
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	11c7c <__assert_fail@plt+0xd38>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	fp, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #110592	; 0x1b000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #110592	; 0x1b000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #110592	; 0x1b000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #110592	; 0x1b000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #110592	; 0x1b000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <read@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #110592	; 0x1b000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <fflush@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #110592	; 0x1b000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #110592	; 0x1b000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #110592	; 0x1b000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #110592	; 0x1b000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <__strtoull_internal@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #110592	; 0x1b000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #110592	; 0x1b000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <fwrite_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #110592	; 0x1b000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <memcmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #110592	; 0x1b000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <stpcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #110592	; 0x1b000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <fputc_unlocked@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #110592	; 0x1b000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <dcgettext@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #110592	; 0x1b000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #110592	; 0x1b000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <textdomain@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #110592	; 0x1b000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <iswprint@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #110592	; 0x1b000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <fwrite@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #110592	; 0x1b000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <lseek64@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #110592	; 0x1b000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <__ctype_get_mb_cur_max@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #110592	; 0x1b000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <__fpending@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #110592	; 0x1b000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <mbrtowc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #110592	; 0x1b000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <error@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #110592	; 0x1b000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <malloc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #110592	; 0x1b000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <__libc_start_main@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #110592	; 0x1b000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__freading@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #110592	; 0x1b000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <__ctype_tolower_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #110592	; 0x1b000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__ctype_toupper_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #110592	; 0x1b000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <__gmon_start__@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #110592	; 0x1b000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <getopt_long@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #110592	; 0x1b000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <__ctype_b_loc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #110592	; 0x1b000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <exit@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #110592	; 0x1b000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <strlen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #110592	; 0x1b000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <strchr@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #110592	; 0x1b000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <__errno_location@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #110592	; 0x1b000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <__sprintf_chk@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #110592	; 0x1b000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #110592	; 0x1b000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #110592	; 0x1b000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <__printf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #110592	; 0x1b000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #110592	; 0x1b000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <__fprintf_chk@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #110592	; 0x1b000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #110592	; 0x1b000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #110592	; 0x1b000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #110592	; 0x1b000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #110592	; 0x1b000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #110592	; 0x1b000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #110592	; 0x1b000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #110592	; 0x1b000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #110592	; 0x1b000
   10f34:	ldr	pc, [ip, #420]!	; 0x1a4

00010f38 <close@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #110592	; 0x1b000
   10f40:	ldr	pc, [ip, #412]!	; 0x19c

00010f44 <__assert_fail@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #110592	; 0x1b000
   10f4c:	ldr	pc, [ip, #404]!	; 0x194

Disassembly of section .text:

00010f50 <.text>:
   10f50:	push	{r4, lr}
   10f54:	bl	10e84 <__errno_location@plt>
   10f58:	mov	r2, #5
   10f5c:	ldr	r1, [pc, #24]	; 10f7c <__assert_fail@plt+0x38>
   10f60:	ldr	r4, [r0]
   10f64:	mov	r0, #0
   10f68:	bl	10d88 <dcgettext@plt>
   10f6c:	mov	r1, r4
   10f70:	mov	r2, r0
   10f74:	mov	r0, #1
   10f78:	bl	10df4 <error@plt>
   10f7c:	andeq	sl, r1, r4, lsl r5
   10f80:	push	{r4, lr}
   10f84:	ldr	r3, [pc, #12]	; 10f98 <__assert_fail@plt+0x54>
   10f88:	ldr	r2, [pc, #12]	; 10f9c <__assert_fail@plt+0x58>
   10f8c:	ldr	r1, [pc, #12]	; 10fa0 <__assert_fail@plt+0x5c>
   10f90:	ldr	r0, [pc, #12]	; 10fa4 <__assert_fail@plt+0x60>
   10f94:	bl	10f44 <__assert_fail@plt>
   10f98:	andeq	sl, r1, r4, ror r3
   10f9c:	ldrdeq	r0, [r0], -r1
   10fa0:	andeq	sl, r1, r0, lsr #10
   10fa4:	andeq	sl, r1, ip, lsr #10
   10fa8:	push	{r4, lr}
   10fac:	ldr	r3, [pc, #12]	; 10fc0 <__assert_fail@plt+0x7c>
   10fb0:	ldr	r2, [pc, #12]	; 10fc4 <__assert_fail@plt+0x80>
   10fb4:	ldr	r1, [pc, #12]	; 10fc8 <__assert_fail@plt+0x84>
   10fb8:	ldr	r0, [pc, #12]	; 10fcc <__assert_fail@plt+0x88>
   10fbc:	bl	10f44 <__assert_fail@plt>
   10fc0:	andeq	sl, r1, ip, lsl #7
   10fc4:	andeq	r0, r0, r9, lsl #5
   10fc8:	andeq	sl, r1, r0, lsr #10
   10fcc:	andeq	sl, r1, ip, lsr #10
   10fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fd4:	mov	r5, r0
   10fd8:	sub	sp, sp, #404	; 0x194
   10fdc:	ldr	r0, [r1]
   10fe0:	mov	r6, r1
   10fe4:	bl	13a94 <__assert_fail@plt+0x2b50>
   10fe8:	ldr	r1, [pc, #2952]	; 11b78 <__assert_fail@plt+0xc34>
   10fec:	mov	r0, #6
   10ff0:	bl	10ef0 <setlocale@plt>
   10ff4:	ldr	r1, [pc, #2944]	; 11b7c <__assert_fail@plt+0xc38>
   10ff8:	ldr	r0, [pc, #2944]	; 11b80 <__assert_fail@plt+0xc3c>
   10ffc:	bl	10f14 <bindtextdomain@plt>
   11000:	ldr	r0, [pc, #2936]	; 11b80 <__assert_fail@plt+0xc3c>
   11004:	bl	10da0 <textdomain@plt>
   11008:	ldr	r0, [pc, #2932]	; 11b84 <__assert_fail@plt+0xc40>
   1100c:	bl	1a350 <__assert_fail@plt+0x940c>
   11010:	ldr	r8, [pc, #2928]	; 11b88 <__assert_fail@plt+0xc44>
   11014:	ldr	r7, [pc, #2928]	; 11b8c <__assert_fail@plt+0xc48>
   11018:	ldr	sl, [pc, #2928]	; 11b90 <__assert_fail@plt+0xc4c>
   1101c:	ldr	fp, [pc, #2928]	; 11b94 <__assert_fail@plt+0xc50>
   11020:	mov	r4, #0
   11024:	mov	r9, #1
   11028:	str	r4, [sp]
   1102c:	mov	r3, r8
   11030:	mov	r2, r7
   11034:	mov	r1, r6
   11038:	mov	r0, r5
   1103c:	bl	10e48 <getopt_long@plt>
   11040:	cmn	r0, #1
   11044:	beq	1110c <__assert_fail@plt+0x1c8>
   11048:	cmp	r0, #67	; 0x43
   1104c:	beq	11104 <__assert_fail@plt+0x1c0>
   11050:	ble	11078 <__assert_fail@plt+0x134>
   11054:	cmp	r0, #100	; 0x64
   11058:	beq	110f4 <__assert_fail@plt+0x1b0>
   1105c:	ble	110fc <__assert_fail@plt+0x1b8>
   11060:	cmp	r0, #115	; 0x73
   11064:	beq	110b4 <__assert_fail@plt+0x170>
   11068:	cmp	r0, #116	; 0x74
   1106c:	bne	11090 <__assert_fail@plt+0x14c>
   11070:	strb	r9, [sl, #779]	; 0x30b
   11074:	b	11028 <__assert_fail@plt+0xe4>
   11078:	cmn	r0, #2
   1107c:	beq	110bc <__assert_fail@plt+0x178>
   11080:	cmp	r0, #65	; 0x41
   11084:	beq	11098 <__assert_fail@plt+0x154>
   11088:	cmn	r0, #3
   1108c:	beq	110c4 <__assert_fail@plt+0x180>
   11090:	mov	r0, #1
   11094:	bl	135c0 <__assert_fail@plt+0x267c>
   11098:	mov	r1, fp
   1109c:	mov	r0, #3
   110a0:	bl	10ef0 <setlocale@plt>
   110a4:	mov	r1, fp
   110a8:	mov	r0, r4
   110ac:	bl	10ef0 <setlocale@plt>
   110b0:	b	11028 <__assert_fail@plt+0xe4>
   110b4:	strb	r9, [sl, #778]	; 0x30a
   110b8:	b	11028 <__assert_fail@plt+0xe4>
   110bc:	mov	r0, #0
   110c0:	bl	135c0 <__assert_fail@plt+0x267c>
   110c4:	ldr	r1, [pc, #2764]	; 11b98 <__assert_fail@plt+0xc54>
   110c8:	ldr	r3, [pc, #2764]	; 11b9c <__assert_fail@plt+0xc58>
   110cc:	ldr	r2, [pc, #2764]	; 11ba0 <__assert_fail@plt+0xc5c>
   110d0:	str	r4, [sp, #4]
   110d4:	ldr	r0, [r1]
   110d8:	ldr	r3, [r3]
   110dc:	ldr	r1, [pc, #2752]	; 11ba4 <__assert_fail@plt+0xc60>
   110e0:	str	r2, [sp]
   110e4:	ldr	r2, [pc, #2748]	; 11ba8 <__assert_fail@plt+0xc64>
   110e8:	bl	1839c <__assert_fail@plt+0x7458>
   110ec:	mov	r0, #0
   110f0:	bl	10e60 <exit@plt>
   110f4:	strb	r9, [sl, #777]	; 0x309
   110f8:	b	11028 <__assert_fail@plt+0xe4>
   110fc:	cmp	r0, #99	; 0x63
   11100:	bne	11090 <__assert_fail@plt+0x14c>
   11104:	strb	r9, [sl, #776]	; 0x308
   11108:	b	11028 <__assert_fail@plt+0xe4>
   1110c:	ldr	r7, [pc, #2712]	; 11bac <__assert_fail@plt+0xc68>
   11110:	ldr	r8, [pc, #2680]	; 11b90 <__assert_fail@plt+0xc4c>
   11114:	ldr	r3, [r7]
   11118:	sub	fp, r5, r3
   1111c:	cmp	fp, #2
   11120:	beq	11320 <__assert_fail@plt+0x3dc>
   11124:	ldrb	r3, [r8, #778]	; 0x30a
   11128:	ldrb	r2, [r8, #777]	; 0x309
   1112c:	mov	r9, #0
   11130:	strb	r9, [r8, #780]	; 0x30c
   11134:	cmp	r2, r3
   11138:	movne	r3, #1
   1113c:	moveq	r3, #2
   11140:	movgt	r4, #1
   11144:	movle	r4, #2
   11148:	cmp	r3, fp
   1114c:	bgt	11af0 <__assert_fail@plt+0xbac>
   11150:	cmp	fp, r4
   11154:	bgt	11a80 <__assert_fail@plt+0xb3c>
   11158:	mov	r0, #24
   1115c:	bl	18584 <__assert_fail@plt+0x7640>
   11160:	ldr	r2, [r7]
   11164:	add	r5, sp, #400	; 0x190
   11168:	mov	r4, #0
   1116c:	mov	r3, r0
   11170:	str	r0, [r5, #-336]!	; 0xfffffeb0
   11174:	str	r4, [r3, #4]
   11178:	ldr	r0, [r6, r2, lsl #2]
   1117c:	mov	r1, r5
   11180:	str	r3, [sp, #68]	; 0x44
   11184:	bl	122bc <__assert_fail@plt+0x1378>
   11188:	cmp	r0, r4
   1118c:	beq	11348 <__assert_fail@plt+0x404>
   11190:	cmp	fp, #2
   11194:	beq	11690 <__assert_fail@plt+0x74c>
   11198:	mov	r0, r5
   1119c:	bl	12bb4 <__assert_fail@plt+0x1c70>
   111a0:	ldrb	r3, [r8, #776]	; 0x308
   111a4:	cmp	r3, #0
   111a8:	bne	11628 <__assert_fail@plt+0x6e4>
   111ac:	ldr	r9, [sp, #88]	; 0x58
   111b0:	cmp	r9, #0
   111b4:	movne	r2, #5
   111b8:	ldrne	r1, [pc, #2544]	; 11bb0 <__assert_fail@plt+0xc6c>
   111bc:	bne	11850 <__assert_fail@plt+0x90c>
   111c0:	cmp	r4, #0
   111c4:	beq	1120c <__assert_fail@plt+0x2c8>
   111c8:	mov	r0, r4
   111cc:	ldrd	r6, [r5, #16]
   111d0:	bl	12bb4 <__assert_fail@plt+0x1c70>
   111d4:	ldrd	r2, [r4, #16]
   111d8:	ldr	r1, [r4, #24]
   111dc:	cmp	r7, r3
   111e0:	cmpeq	r6, r2
   111e4:	bcc	111f0 <__assert_fail@plt+0x2ac>
   111e8:	cmp	r1, #1
   111ec:	beq	11880 <__assert_fail@plt+0x93c>
   111f0:	cmp	r1, #1
   111f4:	bhi	11a60 <__assert_fail@plt+0xb1c>
   111f8:	ldrb	r3, [r8, #780]	; 0x30c
   111fc:	cmp	r3, #0
   11200:	bne	1144c <__assert_fail@plt+0x508>
   11204:	cmp	r1, #0
   11208:	bne	118a0 <__assert_fail@plt+0x95c>
   1120c:	ldr	r3, [pc, #2464]	; 11bb4 <__assert_fail@plt+0xc70>
   11210:	mov	r1, #2
   11214:	ldr	r0, [r3]
   11218:	bl	13a08 <__assert_fail@plt+0x2ac4>
   1121c:	ldrb	r3, [r8, #778]	; 0x30a
   11220:	sub	r2, fp, #1
   11224:	clz	r2, r2
   11228:	lsr	r2, r2, #5
   1122c:	tst	r3, r2
   11230:	bne	11a24 <__assert_fail@plt+0xae0>
   11234:	ldrb	r6, [r8, #777]	; 0x309
   11238:	ands	r7, r6, r2
   1123c:	bne	119d0 <__assert_fail@plt+0xa8c>
   11240:	and	r3, r3, r6
   11244:	cmp	fp, #2
   11248:	movne	fp, #0
   1124c:	andeq	fp, r3, #1
   11250:	cmp	fp, #0
   11254:	bne	113e8 <__assert_fail@plt+0x4a4>
   11258:	ldrb	r3, [r8, #780]	; 0x30c
   1125c:	cmp	r3, #0
   11260:	beq	11410 <__assert_fail@plt+0x4cc>
   11264:	ldrb	r3, [r8, #776]	; 0x308
   11268:	cmp	r3, #0
   1126c:	ldreq	r2, [pc, #2372]	; 11bb8 <__assert_fail@plt+0xc74>
   11270:	bne	1193c <__assert_fail@plt+0x9f8>
   11274:	strb	r3, [r2, #1]!
   11278:	add	r3, r3, #1
   1127c:	cmp	r3, #256	; 0x100
   11280:	bne	11274 <__assert_fail@plt+0x330>
   11284:	mvn	r2, #1
   11288:	mvn	r3, #0
   1128c:	add	sl, sp, #144	; 0x90
   11290:	add	r9, sp, #60	; 0x3c
   11294:	strd	r2, [r5, #8]
   11298:	strd	r2, [r4, #8]
   1129c:	mov	r1, r9
   112a0:	mov	r0, r5
   112a4:	bl	12eb8 <__assert_fail@plt+0x1f74>
   112a8:	mov	r1, sl
   112ac:	mov	r7, r0
   112b0:	mov	r0, r4
   112b4:	bl	12eb8 <__assert_fail@plt+0x1f74>
   112b8:	ldr	r6, [sp, #60]	; 0x3c
   112bc:	cmp	r6, #0
   112c0:	bne	11354 <__assert_fail@plt+0x410>
   112c4:	ldr	r3, [sp, #144]	; 0x90
   112c8:	cmp	r3, #1
   112cc:	beq	113a8 <__assert_fail@plt+0x464>
   112d0:	cmn	r7, #1
   112d4:	cmnne	r0, #1
   112d8:	beq	116d0 <__assert_fail@plt+0x78c>
   112dc:	ldr	r2, [pc, #2264]	; 11bbc <__assert_fail@plt+0xc78>
   112e0:	ldr	r3, [sp, #144]	; 0x90
   112e4:	add	r7, r2, r7
   112e8:	cmp	r3, #2
   112ec:	strb	r0, [r7, #256]	; 0x100
   112f0:	beq	1129c <__assert_fail@plt+0x358>
   112f4:	ldr	r2, [sp, #68]	; 0x44
   112f8:	ldr	r3, [r4, #4]
   112fc:	mvn	r0, #0
   11300:	ldr	r2, [r2, #4]
   11304:	mvn	r1, #0
   11308:	str	r2, [sp, #68]	; 0x44
   1130c:	ldr	r3, [r3, #4]
   11310:	strd	r0, [r5, #8]
   11314:	strd	r0, [r4, #8]
   11318:	str	r3, [r4, #4]
   1131c:	b	1129c <__assert_fail@plt+0x358>
   11320:	ldrb	r3, [r8, #777]	; 0x309
   11324:	cmp	r3, #0
   11328:	bne	11124 <__assert_fail@plt+0x1e0>
   1132c:	ldrb	r3, [r8, #778]	; 0x30a
   11330:	mov	r2, #1
   11334:	strb	r2, [r8, #780]	; 0x30c
   11338:	cmp	r3, #0
   1133c:	movne	r4, fp
   11340:	bne	11150 <__assert_fail@plt+0x20c>
   11344:	b	11158 <__assert_fail@plt+0x214>
   11348:	mov	r0, #1
   1134c:	add	sp, sp, #404	; 0x194
   11350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11354:	cmp	r6, #1
   11358:	bne	112d0 <__assert_fail@plt+0x38c>
   1135c:	ldr	r6, [sp, #144]	; 0x90
   11360:	cmp	r6, #0
   11364:	bne	112d0 <__assert_fail@plt+0x38c>
   11368:	bl	10e54 <__ctype_b_loc@plt>
   1136c:	ldr	r7, [pc, #2124]	; 11bc0 <__assert_fail@plt+0xc7c>
   11370:	ldr	fp, [r0]
   11374:	sub	fp, fp, #2
   11378:	ldrh	r3, [fp, #2]!
   1137c:	tst	r3, #256	; 0x100
   11380:	beq	11394 <__assert_fail@plt+0x450>
   11384:	bl	10e24 <__ctype_tolower_loc@plt>
   11388:	ldr	r3, [r0]
   1138c:	ldr	r3, [r3, r6]
   11390:	strb	r3, [r7]
   11394:	add	r6, r6, #4
   11398:	cmp	r6, #1024	; 0x400
   1139c:	add	r7, r7, #1
   113a0:	bne	11378 <__assert_fail@plt+0x434>
   113a4:	b	112f4 <__assert_fail@plt+0x3b0>
   113a8:	bl	10e54 <__ctype_b_loc@plt>
   113ac:	ldr	r7, [pc, #2060]	; 11bc0 <__assert_fail@plt+0xc7c>
   113b0:	ldr	fp, [r0]
   113b4:	sub	fp, fp, #2
   113b8:	ldrh	r3, [fp, #2]!
   113bc:	tst	r3, #512	; 0x200
   113c0:	beq	113d4 <__assert_fail@plt+0x490>
   113c4:	bl	10e30 <__ctype_toupper_loc@plt>
   113c8:	ldr	r3, [r0]
   113cc:	ldr	r3, [r3, r6]
   113d0:	strb	r3, [r7]
   113d4:	add	r6, r6, #4
   113d8:	cmp	r6, #1024	; 0x400
   113dc:	add	r7, r7, #1
   113e0:	bne	113b8 <__assert_fail@plt+0x474>
   113e4:	b	112f4 <__assert_fail@plt+0x3b0>
   113e8:	ldrb	r1, [r8, #776]	; 0x308
   113ec:	mov	r0, r5
   113f0:	ldr	r2, [pc, #1988]	; 11bbc <__assert_fail@plt+0xc78>
   113f4:	bl	13558 <__assert_fail@plt+0x2614>
   113f8:	mov	r0, r4
   113fc:	mov	r1, r7
   11400:	ldr	r2, [pc, #1980]	; 11bc4 <__assert_fail@plt+0xc80>
   11404:	bl	13558 <__assert_fail@plt+0x2614>
   11408:	ldr	r0, [pc, #1976]	; 11bc8 <__assert_fail@plt+0xc84>
   1140c:	bl	12098 <__assert_fail@plt+0x1154>
   11410:	mov	r0, #0
   11414:	bl	10f38 <close@plt>
   11418:	cmp	r0, #0
   1141c:	beq	11448 <__assert_fail@plt+0x504>
   11420:	bl	10e84 <__errno_location@plt>
   11424:	ldr	r1, [pc, #1952]	; 11bcc <__assert_fail@plt+0xc88>
   11428:	mov	r2, #5
   1142c:	ldr	r4, [r0]
   11430:	mov	r0, #0
   11434:	bl	10d88 <dcgettext@plt>
   11438:	mov	r1, r4
   1143c:	mov	r2, r0
   11440:	mov	r0, #1
   11444:	bl	10df4 <error@plt>
   11448:	bl	10e60 <exit@plt>
   1144c:	ldrb	r6, [r4, #32]
   11450:	cmp	r6, #0
   11454:	movne	r2, #5
   11458:	ldrne	r1, [pc, #1904]	; 11bd0 <__assert_fail@plt+0xc8c>
   1145c:	bne	11850 <__assert_fail@plt+0x90c>
   11460:	ldrb	r3, [r4, #34]	; 0x22
   11464:	cmp	r3, #0
   11468:	movne	r2, #5
   1146c:	ldrne	r1, [pc, #1888]	; 11bd4 <__assert_fail@plt+0xc90>
   11470:	bne	11850 <__assert_fail@plt+0x90c>
   11474:	ldrb	r3, [r8, #776]	; 0x308
   11478:	ldrd	r0, [r4, #16]
   1147c:	ldrd	r6, [r5, #16]
   11480:	cmp	r3, #0
   11484:	strd	r0, [sp, #32]
   11488:	strd	r6, [sp, #24]
   1148c:	mov	r2, r0
   11490:	mov	r3, r1
   11494:	bne	118ac <__assert_fail@plt+0x968>
   11498:	ldrb	r7, [r4, #33]	; 0x21
   1149c:	cmp	r7, #0
   114a0:	beq	11734 <__assert_fail@plt+0x7f0>
   114a4:	bl	10e54 <__ctype_b_loc@plt>
   114a8:	mov	r1, r9
   114ac:	ldr	r2, [r0]
   114b0:	add	ip, r2, #508	; 0x1fc
   114b4:	add	ip, ip, #2
   114b8:	sub	r2, r2, #2
   114bc:	ldrh	r3, [r2, #2]!
   114c0:	cmp	r2, ip
   114c4:	lsl	r0, r3, #23
   114c8:	lsl	r3, r3, #22
   114cc:	add	r9, r9, r0, lsr #31
   114d0:	add	r1, r1, r3, lsr #31
   114d4:	bne	114bc <__assert_fail@plt+0x578>
   114d8:	ldr	r3, [sp, #68]	; 0x44
   114dc:	mvn	r2, #1
   114e0:	str	r3, [sp, #40]	; 0x28
   114e4:	ldr	r3, [r4, #4]
   114e8:	str	fp, [sp, #48]	; 0x30
   114ec:	str	r3, [sp, #44]	; 0x2c
   114f0:	sub	r3, r1, #1
   114f4:	mov	r1, r3
   114f8:	sub	r3, r9, #1
   114fc:	mov	r0, r3
   11500:	mvn	r3, #0
   11504:	add	r9, sp, #60	; 0x3c
   11508:	str	r9, [sp, #20]
   1150c:	str	r8, [sp, #52]	; 0x34
   11510:	add	sl, sp, #144	; 0x90
   11514:	strd	r2, [r5, #8]
   11518:	strd	r2, [r4, #8]
   1151c:	mov	r9, r7
   11520:	mov	r8, r1
   11524:	mov	fp, r0
   11528:	b	115ec <__assert_fail@plt+0x6a8>
   1152c:	cmp	r3, #2
   11530:	beq	115b0 <__assert_fail@plt+0x66c>
   11534:	cmp	r7, #0
   11538:	beq	11a54 <__assert_fail@plt+0xb10>
   1153c:	ldr	r2, [sp, #60]	; 0x3c
   11540:	cmp	r2, #2
   11544:	beq	11a54 <__assert_fail@plt+0xb10>
   11548:	ldrd	r0, [r5, #16]
   1154c:	cmp	r2, #1
   11550:	ldr	lr, [sp, #68]	; 0x44
   11554:	movne	r2, r8
   11558:	moveq	r2, fp
   1155c:	subs	r0, r0, r2
   11560:	ldr	r2, [r4, #4]
   11564:	ldr	lr, [lr, #4]
   11568:	sbc	r1, r1, #0
   1156c:	str	lr, [sp, #68]	; 0x44
   11570:	cmp	r3, #1
   11574:	ldr	r7, [r2, #4]
   11578:	ldrd	r2, [r4, #16]
   1157c:	movne	lr, r8
   11580:	moveq	lr, fp
   11584:	subs	r2, r2, lr
   11588:	sbc	r3, r3, #0
   1158c:	strd	r0, [r5, #16]
   11590:	strd	r2, [sp, #8]
   11594:	mvn	r2, #0
   11598:	mvn	r3, #0
   1159c:	str	r7, [r4, #4]
   115a0:	strd	r2, [r5, #8]
   115a4:	strd	r2, [r4, #8]
   115a8:	ldrd	r2, [sp, #8]
   115ac:	strd	r2, [r4, #16]
   115b0:	ldr	r7, [r5, #8]
   115b4:	ldr	r1, [r5, #12]
   115b8:	ldr	r3, [r4, #8]
   115bc:	ldr	r2, [r4, #12]
   115c0:	and	r7, r7, r1
   115c4:	cmn	r7, #1
   115c8:	and	r3, r3, r2
   115cc:	movne	r7, #0
   115d0:	moveq	r7, #1
   115d4:	cmn	r3, #1
   115d8:	movne	r9, #0
   115dc:	moveq	r9, #1
   115e0:	cmn	ip, #1
   115e4:	cmnne	r6, #1
   115e8:	beq	118cc <__assert_fail@plt+0x988>
   115ec:	ldr	r1, [sp, #20]
   115f0:	mov	r0, r5
   115f4:	bl	12eb8 <__assert_fail@plt+0x1f74>
   115f8:	mov	r1, sl
   115fc:	mov	r6, r0
   11600:	mov	r0, r4
   11604:	bl	12eb8 <__assert_fail@plt+0x1f74>
   11608:	cmp	r9, #0
   1160c:	ldr	r3, [sp, #144]	; 0x90
   11610:	mov	ip, r0
   11614:	bne	1152c <__assert_fail@plt+0x5e8>
   11618:	cmp	r3, #2
   1161c:	beq	115b0 <__assert_fail@plt+0x66c>
   11620:	ldr	r2, [sp, #60]	; 0x3c
   11624:	b	11548 <__assert_fail@plt+0x604>
   11628:	mov	r2, #256	; 0x100
   1162c:	mov	r1, #0
   11630:	add	r0, sp, #144	; 0x90
   11634:	bl	10ea8 <memset@plt>
   11638:	mvn	r2, #1
   1163c:	mvn	r3, #0
   11640:	mov	r9, #256	; 0x100
   11644:	strd	r2, [r5, #8]
   11648:	mov	r6, #0
   1164c:	mov	r7, #1
   11650:	b	1166c <__assert_fail@plt+0x728>
   11654:	add	r3, sp, #400	; 0x190
   11658:	add	r0, r3, r0
   1165c:	ldrb	r3, [r0, #-256]	; 0xffffff00
   11660:	strb	r7, [r0, #-256]	; 0xffffff00
   11664:	eor	r3, r3, #1
   11668:	sub	r9, r9, r3
   1166c:	mov	r1, r6
   11670:	mov	r0, r5
   11674:	bl	12eb8 <__assert_fail@plt+0x1f74>
   11678:	cmn	r0, #1
   1167c:	bne	11654 <__assert_fail@plt+0x710>
   11680:	mov	r2, r9
   11684:	asr	r3, r9, #31
   11688:	strd	r2, [r5, #16]
   1168c:	b	111ac <__assert_fail@plt+0x268>
   11690:	mov	r0, #24
   11694:	bl	18584 <__assert_fail@plt+0x7640>
   11698:	ldr	r2, [r7]
   1169c:	add	r7, sp, #400	; 0x190
   116a0:	add	r2, r2, #1
   116a4:	mov	r3, r0
   116a8:	str	r0, [r7, #-296]!	; 0xfffffed8
   116ac:	str	r4, [r3, #4]
   116b0:	ldr	r0, [r6, r2, lsl #2]
   116b4:	mov	r1, r7
   116b8:	str	r3, [sp, #108]	; 0x6c
   116bc:	bl	122bc <__assert_fail@plt+0x1378>
   116c0:	cmp	r0, r4
   116c4:	beq	11348 <__assert_fail@plt+0x404>
   116c8:	mov	r4, r7
   116cc:	b	11198 <__assert_fail@plt+0x254>
   116d0:	cmn	r7, #1
   116d4:	beq	116e4 <__assert_fail@plt+0x7a0>
   116d8:	ldrb	r3, [r8, #779]	; 0x30b
   116dc:	cmp	r3, #0
   116e0:	beq	11a40 <__assert_fail@plt+0xafc>
   116e4:	ldrb	r3, [r8, #778]	; 0x30a
   116e8:	cmp	r3, #0
   116ec:	bne	11920 <__assert_fail@plt+0x9dc>
   116f0:	mov	r6, #8192	; 0x2000
   116f4:	ldr	r5, [pc, #1244]	; 11bd8 <__assert_fail@plt+0xc94>
   116f8:	ldr	r7, [pc, #1176]	; 11b98 <__assert_fail@plt+0xc54>
   116fc:	b	1171c <__assert_fail@plt+0x7d8>
   11700:	ldr	r3, [r7]
   11704:	mov	r2, r4
   11708:	mov	r1, #1
   1170c:	mov	r0, r5
   11710:	bl	10d58 <fwrite_unlocked@plt>
   11714:	cmp	r4, r0
   11718:	bne	11a6c <__assert_fail@plt+0xb28>
   1171c:	mov	r1, r6
   11720:	mov	r0, r5
   11724:	bl	1203c <__assert_fail@plt+0x10f8>
   11728:	subs	r4, r0, #0
   1172c:	bne	11700 <__assert_fail@plt+0x7bc>
   11730:	b	11410 <__assert_fail@plt+0x4cc>
   11734:	ldrd	r0, [r5, #16]
   11738:	cmp	r3, r1
   1173c:	cmpeq	r2, r0
   11740:	strd	r0, [sp, #24]
   11744:	bcs	1120c <__assert_fail@plt+0x2c8>
   11748:	ldrb	r1, [r8, #779]	; 0x30b
   1174c:	cmp	r1, #0
   11750:	bne	1120c <__assert_fail@plt+0x2c8>
   11754:	orrs	r1, r2, r3
   11758:	moveq	r2, #5
   1175c:	ldreq	r1, [pc, #1144]	; 11bdc <__assert_fail@plt+0xc98>
   11760:	beq	11850 <__assert_fail@plt+0x90c>
   11764:	ldr	r1, [r4, #4]
   11768:	ldr	r0, [r1]
   1176c:	cmp	r0, #4
   11770:	ldrls	pc, [pc, r0, lsl #2]
   11774:	b	11868 <__assert_fail@plt+0x924>
   11778:	andeq	r1, r1, ip, lsl #15
   1177c:	andeq	r1, r1, r8, ror r8
   11780:	andeq	r1, r1, ip, ror #16
   11784:	andeq	r1, r1, r8, ror #16
   11788:	andeq	r1, r1, ip, lsl #15
   1178c:	ldrb	r9, [r1, #8]
   11790:	ldrd	r6, [sp, #24]
   11794:	mov	r0, #24
   11798:	subs	r6, r6, r2
   1179c:	sbc	r7, r7, r3
   117a0:	bl	18584 <__assert_fail@plt+0x7640>
   117a4:	ldr	r1, [r4, #4]
   117a8:	mov	r2, #0
   117ac:	mov	r3, #4
   117b0:	cmp	r1, r2
   117b4:	strd	r6, [r0, #16]
   117b8:	strb	r9, [r0, #8]
   117bc:	str	r2, [r0, #4]
   117c0:	str	r3, [r0]
   117c4:	beq	11a7c <__assert_fail@plt+0xb38>
   117c8:	ldrb	ip, [r8, #776]	; 0x308
   117cc:	ldrd	r2, [r5, #16]
   117d0:	str	r0, [r1, #4]
   117d4:	cmp	ip, #0
   117d8:	str	r0, [r4, #4]
   117dc:	strd	r2, [r4, #16]
   117e0:	beq	1120c <__assert_fail@plt+0x2c8>
   117e4:	ldrb	r3, [sp, #97]	; 0x61
   117e8:	cmp	r3, #0
   117ec:	beq	1120c <__assert_fail@plt+0x2c8>
   117f0:	ldrd	r0, [r4, #16]
   117f4:	ldrd	r2, [r5, #16]
   117f8:	cmp	r1, r3
   117fc:	cmpeq	r0, r2
   11800:	bne	11848 <__assert_fail@plt+0x904>
   11804:	mvn	r2, #1
   11808:	mvn	r3, #0
   1180c:	mov	r1, #0
   11810:	strd	r2, [r4, #8]
   11814:	mov	r0, r4
   11818:	bl	12eb8 <__assert_fail@plt+0x1f74>
   1181c:	cmn	r0, #1
   11820:	mov	r6, r0
   11824:	movne	r7, #0
   11828:	beq	11848 <__assert_fail@plt+0x904>
   1182c:	mov	r1, r7
   11830:	mov	r0, r4
   11834:	bl	12eb8 <__assert_fail@plt+0x1f74>
   11838:	cmn	r0, #1
   1183c:	beq	1120c <__assert_fail@plt+0x2c8>
   11840:	cmp	r6, r0
   11844:	beq	1182c <__assert_fail@plt+0x8e8>
   11848:	ldr	r1, [pc, #912]	; 11be0 <__assert_fail@plt+0xc9c>
   1184c:	mov	r2, #5
   11850:	mov	r0, #0
   11854:	bl	10d88 <dcgettext@plt>
   11858:	mov	r1, #0
   1185c:	mov	r2, r0
   11860:	mov	r0, #1
   11864:	bl	10df4 <error@plt>
   11868:	bl	10f2c <abort@plt>
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #876]	; 11be4 <__assert_fail@plt+0xca0>
   11874:	b	11850 <__assert_fail@plt+0x90c>
   11878:	ldrb	r9, [r1, #9]
   1187c:	b	11790 <__assert_fail@plt+0x84c>
   11880:	ldrb	r0, [r8, #780]	; 0x30c
   11884:	subs	r2, r6, r2
   11888:	ldr	r1, [r4, #28]
   1188c:	sbc	r3, r7, r3
   11890:	cmp	r0, #0
   11894:	strd	r2, [r1, #16]
   11898:	strd	r6, [r4, #16]
   1189c:	bne	1144c <__assert_fail@plt+0x508>
   118a0:	mov	r2, #5
   118a4:	ldr	r1, [pc, #828]	; 11be8 <__assert_fail@plt+0xca4>
   118a8:	b	11850 <__assert_fail@plt+0x90c>
   118ac:	ldrd	r0, [sp, #24]
   118b0:	cmp	r1, r3
   118b4:	cmpeq	r0, r2
   118b8:	bls	117e4 <__assert_fail@plt+0x8a0>
   118bc:	ldrb	r1, [r8, #779]	; 0x30b
   118c0:	cmp	r1, #0
   118c4:	bne	117e4 <__assert_fail@plt+0x8a0>
   118c8:	b	11754 <__assert_fail@plt+0x810>
   118cc:	ldrd	r2, [r5, #16]
   118d0:	ldrd	r0, [sp, #24]
   118d4:	ldr	fp, [sp, #48]	; 0x30
   118d8:	ldr	r8, [sp, #52]	; 0x34
   118dc:	cmp	r1, r3
   118e0:	cmpeq	r0, r2
   118e4:	bcc	1190c <__assert_fail@plt+0x9c8>
   118e8:	ldrd	r0, [sp, #32]
   118ec:	ldrd	r2, [r4, #16]
   118f0:	cmp	r1, r3
   118f4:	cmpeq	r0, r2
   118f8:	ldrcs	r1, [sp, #40]	; 0x28
   118fc:	strcs	r1, [sp, #68]	; 0x44
   11900:	ldrcs	r1, [sp, #44]	; 0x2c
   11904:	strcs	r1, [r4, #4]
   11908:	bcs	11734 <__assert_fail@plt+0x7f0>
   1190c:	ldr	r3, [pc, #728]	; 11bec <__assert_fail@plt+0xca8>
   11910:	ldr	r2, [pc, #728]	; 11bf0 <__assert_fail@plt+0xcac>
   11914:	ldr	r1, [pc, #728]	; 11bf4 <__assert_fail@plt+0xcb0>
   11918:	ldr	r0, [pc, #728]	; 11bf8 <__assert_fail@plt+0xcb4>
   1191c:	bl	10f44 <__assert_fail@plt>
   11920:	mov	r0, r4
   11924:	ldr	r2, [pc, #664]	; 11bc4 <__assert_fail@plt+0xc80>
   11928:	mov	r1, #0
   1192c:	bl	13558 <__assert_fail@plt+0x2614>
   11930:	ldr	r0, [pc, #708]	; 11bfc <__assert_fail@plt+0xcb8>
   11934:	bl	12098 <__assert_fail@plt+0x1154>
   11938:	b	11410 <__assert_fail@plt+0x4cc>
   1193c:	ldr	r2, [pc, #632]	; 11bbc <__assert_fail@plt+0xc78>
   11940:	mov	r0, r5
   11944:	mov	r1, fp
   11948:	add	r7, r2, #256	; 0x100
   1194c:	bl	13558 <__assert_fail@plt+0x2614>
   11950:	mvn	r0, #1
   11954:	mvn	r1, #0
   11958:	mov	r3, fp
   1195c:	strd	r0, [r4, #8]
   11960:	strb	r3, [r7, r3]
   11964:	add	r3, r3, #1
   11968:	cmp	r3, #256	; 0x100
   1196c:	bne	11960 <__assert_fail@plt+0xa1c>
   11970:	mov	r5, #0
   11974:	ldr	r6, [pc, #576]	; 11bbc <__assert_fail@plt+0xc78>
   11978:	mov	r9, r5
   1197c:	b	1198c <__assert_fail@plt+0xa48>
   11980:	add	r5, r5, #1
   11984:	cmp	r5, #256	; 0x100
   11988:	beq	116e4 <__assert_fail@plt+0x7a0>
   1198c:	ldrb	r3, [r6, r5]
   11990:	cmp	r3, #0
   11994:	bne	11980 <__assert_fail@plt+0xa3c>
   11998:	mov	r1, r9
   1199c:	mov	r0, r4
   119a0:	bl	12eb8 <__assert_fail@plt+0x1f74>
   119a4:	cmn	r0, #1
   119a8:	strbne	r0, [r7, r5]
   119ac:	bne	11980 <__assert_fail@plt+0xa3c>
   119b0:	ldrb	r3, [r8, #779]	; 0x30b
   119b4:	cmp	r3, #0
   119b8:	bne	116e4 <__assert_fail@plt+0x7a0>
   119bc:	ldr	r3, [pc, #572]	; 11c00 <__assert_fail@plt+0xcbc>
   119c0:	mov	r2, #1840	; 0x730
   119c4:	ldr	r1, [pc, #552]	; 11bf4 <__assert_fail@plt+0xcb0>
   119c8:	ldr	r0, [pc, #564]	; 11c04 <__assert_fail@plt+0xcc0>
   119cc:	bl	10f44 <__assert_fail@plt>
   119d0:	mov	r0, r5
   119d4:	ldrb	r1, [r8, #776]	; 0x308
   119d8:	ldr	r2, [pc, #476]	; 11bbc <__assert_fail@plt+0xc78>
   119dc:	bl	13558 <__assert_fail@plt+0x2614>
   119e0:	ldr	r5, [pc, #496]	; 11bd8 <__assert_fail@plt+0xc94>
   119e4:	ldr	r7, [pc, #428]	; 11b98 <__assert_fail@plt+0xc54>
   119e8:	mov	r6, #8192	; 0x2000
   119ec:	b	11a0c <__assert_fail@plt+0xac8>
   119f0:	ldr	r3, [r7]
   119f4:	mov	r2, r4
   119f8:	mov	r1, #1
   119fc:	mov	r0, r5
   11a00:	bl	10d58 <fwrite_unlocked@plt>
   11a04:	cmp	r4, r0
   11a08:	bne	11a6c <__assert_fail@plt+0xb28>
   11a0c:	mov	r1, r6
   11a10:	mov	r0, r5
   11a14:	bl	11f7c <__assert_fail@plt+0x1038>
   11a18:	subs	r4, r0, #0
   11a1c:	bne	119f0 <__assert_fail@plt+0xaac>
   11a20:	b	11410 <__assert_fail@plt+0x4cc>
   11a24:	mov	r0, r5
   11a28:	ldrb	r1, [r8, #776]	; 0x308
   11a2c:	ldr	r2, [pc, #400]	; 11bc4 <__assert_fail@plt+0xc80>
   11a30:	bl	13558 <__assert_fail@plt+0x2614>
   11a34:	ldr	r0, [pc, #460]	; 11c08 <__assert_fail@plt+0xcc4>
   11a38:	bl	12098 <__assert_fail@plt+0x1154>
   11a3c:	b	11410 <__assert_fail@plt+0x4cc>
   11a40:	ldr	r3, [pc, #440]	; 11c00 <__assert_fail@plt+0xcbc>
   11a44:	ldr	r2, [pc, #448]	; 11c0c <__assert_fail@plt+0xcc8>
   11a48:	ldr	r1, [pc, #420]	; 11bf4 <__assert_fail@plt+0xcb0>
   11a4c:	ldr	r0, [pc, #444]	; 11c10 <__assert_fail@plt+0xccc>
   11a50:	bl	10f44 <__assert_fail@plt>
   11a54:	mov	r2, #5
   11a58:	ldr	r1, [pc, #436]	; 11c14 <__assert_fail@plt+0xcd0>
   11a5c:	b	11850 <__assert_fail@plt+0x90c>
   11a60:	mov	r2, #5
   11a64:	ldr	r1, [pc, #428]	; 11c18 <__assert_fail@plt+0xcd4>
   11a68:	b	11850 <__assert_fail@plt+0x90c>
   11a6c:	bl	10e84 <__errno_location@plt>
   11a70:	mov	r2, #5
   11a74:	ldr	r1, [pc, #416]	; 11c1c <__assert_fail@plt+0xcd8>
   11a78:	b	1142c <__assert_fail@plt+0x4e8>
   11a7c:	bl	10f80 <__assert_fail@plt+0x3c>
   11a80:	mov	r2, #5
   11a84:	ldr	r1, [pc, #404]	; 11c20 <__assert_fail@plt+0xcdc>
   11a88:	mov	r0, #0
   11a8c:	bl	10d88 <dcgettext@plt>
   11a90:	ldr	r3, [r7]
   11a94:	add	r4, r4, r3
   11a98:	mov	r5, r0
   11a9c:	ldr	r0, [r6, r4, lsl #2]
   11aa0:	bl	17960 <__assert_fail@plt+0x6a1c>
   11aa4:	mov	r1, #0
   11aa8:	mov	r2, r5
   11aac:	mov	r3, r0
   11ab0:	mov	r0, r1
   11ab4:	bl	10df4 <error@plt>
   11ab8:	cmp	fp, #2
   11abc:	bne	11090 <__assert_fail@plt+0x14c>
   11ac0:	ldr	r3, [pc, #348]	; 11c24 <__assert_fail@plt+0xce0>
   11ac4:	ldr	r1, [pc, #348]	; 11c28 <__assert_fail@plt+0xce4>
   11ac8:	mov	r2, #5
   11acc:	ldr	r4, [r3]
   11ad0:	mov	r0, #0
   11ad4:	bl	10d88 <dcgettext@plt>
   11ad8:	ldr	r2, [pc, #332]	; 11c2c <__assert_fail@plt+0xce8>
   11adc:	mov	r1, #1
   11ae0:	mov	r3, r0
   11ae4:	mov	r0, r4
   11ae8:	bl	10ecc <__fprintf_chk@plt>
   11aec:	b	11090 <__assert_fail@plt+0x14c>
   11af0:	cmp	fp, r9
   11af4:	mov	r2, #5
   11af8:	bne	11b1c <__assert_fail@plt+0xbd8>
   11afc:	ldr	r1, [pc, #300]	; 11c30 <__assert_fail@plt+0xcec>
   11b00:	mov	r0, fp
   11b04:	bl	10d88 <dcgettext@plt>
   11b08:	mov	r1, fp
   11b0c:	mov	r2, r0
   11b10:	mov	r0, fp
   11b14:	bl	10df4 <error@plt>
   11b18:	b	11090 <__assert_fail@plt+0x14c>
   11b1c:	ldr	r1, [pc, #272]	; 11c34 <__assert_fail@plt+0xcf0>
   11b20:	mov	r0, r9
   11b24:	bl	10d88 <dcgettext@plt>
   11b28:	sub	r5, r5, #-1073741823	; 0xc0000001
   11b2c:	mov	r4, r0
   11b30:	ldr	r0, [r6, r5, lsl #2]
   11b34:	bl	17960 <__assert_fail@plt+0x6a1c>
   11b38:	mov	r2, r4
   11b3c:	mov	r1, r9
   11b40:	mov	r3, r0
   11b44:	mov	r0, r9
   11b48:	bl	10df4 <error@plt>
   11b4c:	ldrb	r1, [r8, #778]	; 0x30a
   11b50:	ldr	r0, [pc, #204]	; 11c24 <__assert_fail@plt+0xce0>
   11b54:	ldr	r2, [pc, #220]	; 11c38 <__assert_fail@plt+0xcf4>
   11b58:	ldr	r3, [pc, #220]	; 11c3c <__assert_fail@plt+0xcf8>
   11b5c:	cmp	r1, #0
   11b60:	ldr	r4, [r0]
   11b64:	moveq	r1, r2
   11b68:	mov	r0, r9
   11b6c:	movne	r1, r3
   11b70:	mov	r2, #5
   11b74:	b	11ad4 <__assert_fail@plt+0xb90>
   11b78:	andeq	sl, r1, ip, lsr #23
   11b7c:	andeq	fp, r1, ip, lsr #4
   11b80:	andeq	fp, r1, r4, lsl r1
   11b84:	andeq	r3, r1, r8, lsl r9
   11b88:	andeq	sl, r1, ip, asr r4
   11b8c:	andeq	fp, r1, r8, asr r2
   11b90:	andeq	lr, r2, r4, asr r1
   11b94:	andeq	fp, r1, r4, asr #4
   11b98:	andeq	ip, r2, r4, asr r1
   11b9c:	strdeq	ip, [r2], -r0
   11ba0:	andeq	fp, r1, r8, asr #4
   11ba4:	muleq	r1, r0, r7
   11ba8:	andeq	fp, r1, r0, lsl r1
   11bac:	andeq	ip, r2, r0, asr #2
   11bb0:	andeq	fp, r1, r8, ror #5
   11bb4:	andeq	ip, r2, r0, asr r1
   11bb8:	andeq	ip, r2, fp, asr r2
   11bbc:	andeq	ip, r2, ip, asr r1
   11bc0:	andeq	ip, r2, ip, asr r2
   11bc4:	andeq	lr, r2, ip, asr r3
   11bc8:	andeq	r1, r1, ip, ror pc
   11bcc:	andeq	fp, r1, r0, ror #11
   11bd0:	andeq	fp, r1, r4, asr r3
   11bd4:	muleq	r1, r4, r3
   11bd8:	andeq	ip, r2, ip, asr r3
   11bdc:	andeq	fp, r1, ip, asr r4
   11be0:	strdeq	fp, [r1], -ip
   11be4:	muleq	r1, r0, r4
   11be8:	andeq	fp, r1, r8, ror #10
   11bec:	andeq	sl, r1, ip, asr #9
   11bf0:	andeq	r0, r0, r8, asr #9
   11bf4:	andeq	sl, r1, r0, lsr #10
   11bf8:	andeq	fp, r1, r4, lsr #8
   11bfc:	andeq	r2, r1, ip, lsr r0
   11c00:	andeq	sl, r1, r4, ror #9
   11c04:	andeq	fp, r1, r8, lsr #11
   11c08:	andeq	r1, r1, ip, asr pc
   11c0c:	andeq	r0, r0, r5, ror #14
   11c10:	andeq	fp, r1, r4, asr #11
   11c14:	strdeq	fp, [r1], -r4
   11c18:	andeq	fp, r1, ip, lsl r3
   11c1c:	andeq	sl, r1, r8, lsr r5
   11c20:	andeq	fp, r1, ip, lsl #5
   11c24:	andeq	ip, r2, r8, asr #2
   11c28:	andeq	fp, r1, r0, lsr #5
   11c2c:	andeq	fp, r1, r8, lsr r8
   11c30:	andeq	fp, r1, r0, ror #4
   11c34:	andeq	fp, r1, r0, ror r2
   11c38:	andeq	fp, r1, r0, lsl #4
   11c3c:			; <UNDEFINED> instruction: 0x0001b1bc
   11c40:	mov	fp, #0
   11c44:	mov	lr, #0
   11c48:	pop	{r1}		; (ldr r1, [sp], #4)
   11c4c:	mov	r2, sp
   11c50:	push	{r2}		; (str r2, [sp, #-4]!)
   11c54:	push	{r0}		; (str r0, [sp, #-4]!)
   11c58:	ldr	ip, [pc, #16]	; 11c70 <__assert_fail@plt+0xd2c>
   11c5c:	push	{ip}		; (str ip, [sp, #-4]!)
   11c60:	ldr	r0, [pc, #12]	; 11c74 <__assert_fail@plt+0xd30>
   11c64:	ldr	r3, [pc, #12]	; 11c78 <__assert_fail@plt+0xd34>
   11c68:	bl	10e0c <__libc_start_main@plt>
   11c6c:	bl	10f2c <abort@plt>
   11c70:	andeq	sl, r1, ip, asr #6
   11c74:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   11c78:	andeq	sl, r1, ip, ror #5
   11c7c:	ldr	r3, [pc, #20]	; 11c98 <__assert_fail@plt+0xd54>
   11c80:	ldr	r2, [pc, #20]	; 11c9c <__assert_fail@plt+0xd58>
   11c84:	add	r3, pc, r3
   11c88:	ldr	r2, [r3, r2]
   11c8c:	cmp	r2, #0
   11c90:	bxeq	lr
   11c94:	b	10e3c <__gmon_start__@plt>
   11c98:	andeq	sl, r1, r4, ror r3
   11c9c:	andeq	r0, r0, r4, ror #1
   11ca0:	ldr	r3, [pc, #28]	; 11cc4 <__assert_fail@plt+0xd80>
   11ca4:	ldr	r0, [pc, #28]	; 11cc8 <__assert_fail@plt+0xd84>
   11ca8:	sub	r3, r3, r0
   11cac:	cmp	r3, #6
   11cb0:	bxls	lr
   11cb4:	ldr	r3, [pc, #16]	; 11ccc <__assert_fail@plt+0xd88>
   11cb8:	cmp	r3, #0
   11cbc:	bxeq	lr
   11cc0:	bx	r3
   11cc4:	andeq	ip, r2, fp, lsr r1
   11cc8:	andeq	ip, r2, r8, lsr r1
   11ccc:	andeq	r0, r0, r0
   11cd0:	ldr	r1, [pc, #36]	; 11cfc <__assert_fail@plt+0xdb8>
   11cd4:	ldr	r0, [pc, #36]	; 11d00 <__assert_fail@plt+0xdbc>
   11cd8:	sub	r1, r1, r0
   11cdc:	asr	r1, r1, #2
   11ce0:	add	r1, r1, r1, lsr #31
   11ce4:	asrs	r1, r1, #1
   11ce8:	bxeq	lr
   11cec:	ldr	r3, [pc, #16]	; 11d04 <__assert_fail@plt+0xdc0>
   11cf0:	cmp	r3, #0
   11cf4:	bxeq	lr
   11cf8:	bx	r3
   11cfc:	andeq	ip, r2, r8, lsr r1
   11d00:	andeq	ip, r2, r8, lsr r1
   11d04:	andeq	r0, r0, r0
   11d08:	push	{r4, lr}
   11d0c:	ldr	r4, [pc, #24]	; 11d2c <__assert_fail@plt+0xde8>
   11d10:	ldrb	r3, [r4]
   11d14:	cmp	r3, #0
   11d18:	popne	{r4, pc}
   11d1c:	bl	11ca0 <__assert_fail@plt+0xd5c>
   11d20:	mov	r3, #1
   11d24:	strb	r3, [r4]
   11d28:	pop	{r4, pc}
   11d2c:	andeq	ip, r2, r8, asr r1
   11d30:	ldr	r0, [pc, #40]	; 11d60 <__assert_fail@plt+0xe1c>
   11d34:	ldr	r3, [r0]
   11d38:	cmp	r3, #0
   11d3c:	bne	11d44 <__assert_fail@plt+0xe00>
   11d40:	b	11cd0 <__assert_fail@plt+0xd8c>
   11d44:	ldr	r3, [pc, #24]	; 11d64 <__assert_fail@plt+0xe20>
   11d48:	cmp	r3, #0
   11d4c:	beq	11d40 <__assert_fail@plt+0xdfc>
   11d50:	push	{r4, lr}
   11d54:	blx	r3
   11d58:	pop	{r4, lr}
   11d5c:	b	11cd0 <__assert_fail@plt+0xd8c>
   11d60:	andeq	fp, r2, r4, lsl pc
   11d64:	andeq	r0, r0, r0
   11d68:	ldr	r3, [r0]
   11d6c:	mov	r2, r0
   11d70:	ldrb	r0, [r3, r1]
   11d74:	cmp	r0, #42	; 0x2a
   11d78:	beq	11d84 <__assert_fail@plt+0xe40>
   11d7c:	mov	r0, #0
   11d80:	bx	lr
   11d84:	push	{r4, r5, r6, lr}
   11d88:	ldr	r5, [r2, #4]
   11d8c:	ldrb	r0, [r5, r1]
   11d90:	cmp	r0, #0
   11d94:	bne	11e14 <__assert_fail@plt+0xed0>
   11d98:	ldr	r4, [r2, #8]
   11d9c:	add	r1, r1, #1
   11da0:	cmp	r1, r4
   11da4:	popcs	{r4, r5, r6, pc}
   11da8:	ldrb	r2, [r3, r1]
   11dac:	add	r3, r3, r1
   11db0:	sub	ip, r2, #48	; 0x30
   11db4:	cmp	ip, #9
   11db8:	bhi	11e00 <__assert_fail@plt+0xebc>
   11dbc:	ldrb	r6, [r5, r1]
   11dc0:	add	ip, r5, r1
   11dc4:	cmp	r6, #0
   11dc8:	beq	11dec <__assert_fail@plt+0xea8>
   11dcc:	b	11e10 <__assert_fail@plt+0xecc>
   11dd0:	ldrb	r2, [r3, #1]!
   11dd4:	sub	lr, r2, #48	; 0x30
   11dd8:	cmp	lr, #9
   11ddc:	bhi	11e00 <__assert_fail@plt+0xebc>
   11de0:	ldrb	lr, [ip, #1]!
   11de4:	cmp	lr, #0
   11de8:	bne	11e00 <__assert_fail@plt+0xebc>
   11dec:	add	r1, r1, #1
   11df0:	cmp	r1, r4
   11df4:	bcc	11dd0 <__assert_fail@plt+0xe8c>
   11df8:	mov	r0, r6
   11dfc:	pop	{r4, r5, r6, pc}
   11e00:	cmp	r2, #93	; 0x5d
   11e04:	ldrbeq	r0, [r5, r1]
   11e08:	eoreq	r0, r0, #1
   11e0c:	pop	{r4, r5, r6, pc}
   11e10:	pop	{r4, r5, r6, pc}
   11e14:	mov	r0, #0
   11e18:	pop	{r4, r5, r6, pc}
   11e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e20:	mov	r6, r1
   11e24:	sub	sp, sp, #20
   11e28:	mov	r4, r0
   11e2c:	mov	r1, #4
   11e30:	add	r0, r6, #1
   11e34:	bl	18668 <__assert_fail@plt+0x7724>
   11e38:	cmp	r6, #0
   11e3c:	mov	r7, r0
   11e40:	beq	11f0c <__assert_fail@plt+0xfc8>
   11e44:	ldr	fp, [pc, #236]	; 11f38 <__assert_fail@plt+0xff4>
   11e48:	ldr	sl, [pc, #236]	; 11f3c <__assert_fail@plt+0xff8>
   11e4c:	ldr	r9, [pc, #236]	; 11f40 <__assert_fail@plt+0xffc>
   11e50:	add	r6, r4, r6
   11e54:	mov	r5, r0
   11e58:	b	11e98 <__assert_fail@plt+0xf54>
   11e5c:	cmp	r8, #12
   11e60:	moveq	r1, sl
   11e64:	beq	11e84 <__assert_fail@plt+0xf40>
   11e68:	movcc	r1, r9
   11e6c:	bcc	11e84 <__assert_fail@plt+0xf40>
   11e70:	cmp	r8, #13
   11e74:	beq	11efc <__assert_fail@plt+0xfb8>
   11e78:	cmp	r8, #92	; 0x5c
   11e7c:	ldreq	r1, [pc, #192]	; 11f44 <__assert_fail@plt+0x1000>
   11e80:	bne	11ec0 <__assert_fail@plt+0xf7c>
   11e84:	mov	r0, r5
   11e88:	bl	10d70 <stpcpy@plt>
   11e8c:	cmp	r6, r4
   11e90:	mov	r5, r0
   11e94:	beq	11f0c <__assert_fail@plt+0xfc8>
   11e98:	ldrb	r8, [r4], #1
   11e9c:	cmp	r8, #10
   11ea0:	beq	11f04 <__assert_fail@plt+0xfc0>
   11ea4:	bhi	11e5c <__assert_fail@plt+0xf18>
   11ea8:	cmp	r8, #8
   11eac:	beq	11ef4 <__assert_fail@plt+0xfb0>
   11eb0:	bhi	11eec <__assert_fail@plt+0xfa8>
   11eb4:	cmp	r8, #7
   11eb8:	ldreq	r1, [pc, #136]	; 11f48 <__assert_fail@plt+0x1004>
   11ebc:	beq	11e84 <__assert_fail@plt+0xf40>
   11ec0:	bl	10e54 <__ctype_b_loc@plt>
   11ec4:	lsl	r3, r8, #1
   11ec8:	ldr	r2, [r0]
   11ecc:	ldrh	r3, [r2, r3]
   11ed0:	tst	r3, #16384	; 0x4000
   11ed4:	beq	11f18 <__assert_fail@plt+0xfd4>
   11ed8:	mov	r3, #0
   11edc:	strb	r8, [sp, #8]
   11ee0:	strb	r3, [sp, #9]
   11ee4:	add	r1, sp, #8
   11ee8:	b	11e84 <__assert_fail@plt+0xf40>
   11eec:	ldr	r1, [pc, #88]	; 11f4c <__assert_fail@plt+0x1008>
   11ef0:	b	11e84 <__assert_fail@plt+0xf40>
   11ef4:	ldr	r1, [pc, #84]	; 11f50 <__assert_fail@plt+0x100c>
   11ef8:	b	11e84 <__assert_fail@plt+0xf40>
   11efc:	ldr	r1, [pc, #80]	; 11f54 <__assert_fail@plt+0x1010>
   11f00:	b	11e84 <__assert_fail@plt+0xf40>
   11f04:	mov	r1, fp
   11f08:	b	11e84 <__assert_fail@plt+0xf40>
   11f0c:	mov	r0, r7
   11f10:	add	sp, sp, #20
   11f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f18:	mov	r1, #1
   11f1c:	str	r8, [sp]
   11f20:	add	r0, sp, #8
   11f24:	ldr	r3, [pc, #44]	; 11f58 <__assert_fail@plt+0x1014>
   11f28:	mov	r2, #5
   11f2c:	bl	10e90 <__sprintf_chk@plt>
   11f30:	add	r1, sp, #8
   11f34:	b	11e84 <__assert_fail@plt+0xf40>
   11f38:	strdeq	sl, [r1], -ip
   11f3c:	strdeq	sl, [r1], -r8
   11f40:	andeq	sl, r1, r8, lsl #10
   11f44:	andeq	sl, r1, ip, ror #9
   11f48:	strdeq	sl, [r1], -r0
   11f4c:	andeq	sl, r1, r4, lsl #10
   11f50:	strdeq	sl, [r1], -r4
   11f54:	andeq	sl, r1, r0, lsl #10
   11f58:	andeq	sl, r1, ip, lsl #10
   11f5c:	push	{r4, lr}
   11f60:	mov	r2, r1
   11f64:	mov	r1, r0
   11f68:	mov	r0, #0
   11f6c:	bl	17ae0 <__assert_fail@plt+0x6b9c>
   11f70:	cmn	r0, #1
   11f74:	popne	{r4, pc}
   11f78:	bl	10f50 <__assert_fail@plt+0xc>
   11f7c:	push	{r4, r5, r6, r7, r8, lr}
   11f80:	mov	r5, r0
   11f84:	ldr	r4, [pc, #172]	; 12038 <__assert_fail@plt+0x10f4>
   11f88:	mov	r6, r1
   11f8c:	mov	r7, #0
   11f90:	mov	r2, r6
   11f94:	mov	r1, r5
   11f98:	mov	r0, r7
   11f9c:	bl	17ae0 <__assert_fail@plt+0x6b9c>
   11fa0:	cmn	r0, #1
   11fa4:	beq	12034 <__assert_fail@plt+0x10f0>
   11fa8:	cmp	r0, #0
   11fac:	popeq	{r4, r5, r6, r7, r8, pc}
   11fb0:	sub	r3, r5, #1
   11fb4:	mov	r1, r7
   11fb8:	ldrb	r2, [r3, #1]!
   11fbc:	ldrb	r2, [r4, r2]
   11fc0:	cmp	r2, #0
   11fc4:	beq	1200c <__assert_fail@plt+0x10c8>
   11fc8:	add	r3, r1, #1
   11fcc:	cmp	r3, r0
   11fd0:	bcs	11ffc <__assert_fail@plt+0x10b8>
   11fd4:	sub	r0, r0, #1
   11fd8:	add	ip, r5, r0
   11fdc:	add	r3, r5, r1
   11fe0:	ldrb	r2, [r3, #1]!
   11fe4:	ldrb	r0, [r4, r2]
   11fe8:	cmp	r0, #0
   11fec:	strbeq	r2, [r5, r1]
   11ff0:	addeq	r1, r1, #1
   11ff4:	cmp	ip, r3
   11ff8:	bne	11fe0 <__assert_fail@plt+0x109c>
   11ffc:	cmp	r1, #0
   12000:	beq	11f90 <__assert_fail@plt+0x104c>
   12004:	mov	r0, r1
   12008:	pop	{r4, r5, r6, r7, r8, pc}
   1200c:	add	r2, r1, #1
   12010:	cmp	r2, r0
   12014:	movne	r1, r2
   12018:	bne	11fb8 <__assert_fail@plt+0x1074>
   1201c:	add	r1, r1, #2
   12020:	cmp	r0, r1
   12024:	mov	r1, r0
   12028:	bhi	11fd4 <__assert_fail@plt+0x1090>
   1202c:	mov	r0, r1
   12030:	pop	{r4, r5, r6, r7, r8, pc}
   12034:	bl	10f50 <__assert_fail@plt+0xc>
   12038:	andeq	ip, r2, ip, asr r1
   1203c:	push	{r4, lr}
   12040:	mov	r4, r0
   12044:	mov	r2, r1
   12048:	mov	r0, #0
   1204c:	mov	r1, r4
   12050:	bl	17ae0 <__assert_fail@plt+0x6b9c>
   12054:	cmn	r0, #1
   12058:	beq	12090 <__assert_fail@plt+0x114c>
   1205c:	cmp	r0, #0
   12060:	beq	1208c <__assert_fail@plt+0x1148>
   12064:	ldr	ip, [pc, #40]	; 12094 <__assert_fail@plt+0x1150>
   12068:	mov	r1, r4
   1206c:	add	r2, r4, r0
   12070:	ldrb	r3, [r1]
   12074:	add	r3, ip, r3
   12078:	ldrb	r3, [r3, #256]	; 0x100
   1207c:	strb	r3, [r1], #1
   12080:	cmp	r2, r1
   12084:	bne	12070 <__assert_fail@plt+0x112c>
   12088:	pop	{r4, pc}
   1208c:	pop	{r4, pc}
   12090:	bl	10f50 <__assert_fail@plt+0xc>
   12094:	andeq	ip, r2, ip, asr r1
   12098:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1209c:	mov	r5, #0
   120a0:	ldr	r6, [pc, #512]	; 122a8 <__assert_fail@plt+0x1364>
   120a4:	ldr	r9, [pc, #512]	; 122ac <__assert_fail@plt+0x1368>
   120a8:	mov	fp, r0
   120ac:	mov	r8, r6
   120b0:	mov	r4, r5
   120b4:	mvn	r7, #-2147483648	; 0x80000000
   120b8:	cmp	r4, r5
   120bc:	bcs	12228 <__assert_fail@plt+0x12e4>
   120c0:	cmn	r7, #-2147483647	; 0x80000001
   120c4:	bne	1216c <__assert_fail@plt+0x1228>
   120c8:	add	r2, r6, r4
   120cc:	mov	r3, r4
   120d0:	mov	r7, #1
   120d4:	ldrb	r2, [r2]
   120d8:	add	r2, r9, r2
   120dc:	ldrb	r2, [r2, #520]	; 0x208
   120e0:	cmp	r2, #0
   120e4:	bne	121c0 <__assert_fail@plt+0x127c>
   120e8:	mov	r1, r3
   120ec:	add	r4, r1, #2
   120f0:	cmp	r4, r5
   120f4:	bcs	12254 <__assert_fail@plt+0x1310>
   120f8:	ldrb	r2, [r6, r4]
   120fc:	mov	r1, r4
   12100:	add	r2, r9, r2
   12104:	ldrb	r2, [r2, #520]	; 0x208
   12108:	cmp	r2, #0
   1210c:	beq	120ec <__assert_fail@plt+0x11a8>
   12110:	ldr	r2, [pc, #408]	; 122b0 <__assert_fail@plt+0x136c>
   12114:	cmp	r4, #0
   12118:	add	r1, r2, r4
   1211c:	sub	r2, r4, r3
   12120:	ldrb	r7, [r1, #512]	; 0x200
   12124:	add	sl, r2, #1
   12128:	beq	12138 <__assert_fail@plt+0x11f4>
   1212c:	ldrb	r1, [r1, #511]	; 0x1ff
   12130:	cmp	r7, r1
   12134:	moveq	sl, r2
   12138:	cmp	sl, #0
   1213c:	add	r4, r4, #1
   12140:	beq	12164 <__assert_fail@plt+0x1220>
   12144:	add	r0, r6, r3
   12148:	ldr	r3, [pc, #356]	; 122b4 <__assert_fail@plt+0x1370>
   1214c:	mov	r2, sl
   12150:	mov	r1, #1
   12154:	ldr	r3, [r3]
   12158:	bl	10d58 <fwrite_unlocked@plt>
   1215c:	cmp	r0, sl
   12160:	bne	12280 <__assert_fail@plt+0x133c>
   12164:	cmp	r4, r5
   12168:	bcs	120b8 <__assert_fail@plt+0x1174>
   1216c:	ldrb	r3, [r6, r4]
   12170:	add	r2, r6, r4
   12174:	cmp	r7, r3
   12178:	beq	121a4 <__assert_fail@plt+0x1260>
   1217c:	cmp	r5, r4
   12180:	bhi	120c8 <__assert_fail@plt+0x1184>
   12184:	mov	r1, #8192	; 0x2000
   12188:	mov	r0, r8
   1218c:	blx	fp
   12190:	mov	r3, #0
   12194:	mov	r2, r8
   12198:	subs	r5, r0, #0
   1219c:	bne	120d0 <__assert_fail@plt+0x118c>
   121a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a4:	add	r4, r4, #1
   121a8:	cmp	r4, r5
   121ac:	beq	120b8 <__assert_fail@plt+0x1174>
   121b0:	ldrb	r1, [r2, #1]!
   121b4:	cmp	r1, r3
   121b8:	bne	1217c <__assert_fail@plt+0x1238>
   121bc:	b	121a4 <__assert_fail@plt+0x1260>
   121c0:	mov	r4, r3
   121c4:	cmp	r4, r5
   121c8:	bcc	12110 <__assert_fail@plt+0x11cc>
   121cc:	subs	sl, r5, r3
   121d0:	beq	1221c <__assert_fail@plt+0x12d8>
   121d4:	add	r0, r6, r3
   121d8:	ldr	r3, [pc, #212]	; 122b4 <__assert_fail@plt+0x1370>
   121dc:	mov	r2, sl
   121e0:	mov	r1, r7
   121e4:	ldr	r3, [r3]
   121e8:	bl	10d58 <fwrite_unlocked@plt>
   121ec:	cmp	sl, r0
   121f0:	bne	12280 <__assert_fail@plt+0x133c>
   121f4:	cmp	r5, r4
   121f8:	bhi	120c8 <__assert_fail@plt+0x1184>
   121fc:	mov	r1, #8192	; 0x2000
   12200:	mov	r0, r8
   12204:	blx	fp
   12208:	mov	r3, #0
   1220c:	mov	r2, r8
   12210:	subs	r5, r0, #0
   12214:	bne	120d4 <__assert_fail@plt+0x1190>
   12218:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1221c:	cmp	r5, r4
   12220:	mvn	r7, #-2147483648	; 0x80000000
   12224:	bhi	120c8 <__assert_fail@plt+0x1184>
   12228:	mov	r1, #8192	; 0x2000
   1222c:	mov	r0, r8
   12230:	blx	fp
   12234:	subs	r5, r0, #0
   12238:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1223c:	cmn	r7, #-2147483647	; 0x80000001
   12240:	movne	r4, #0
   12244:	bne	12164 <__assert_fail@plt+0x1220>
   12248:	mov	r2, r8
   1224c:	mov	r3, #0
   12250:	b	120d0 <__assert_fail@plt+0x118c>
   12254:	bne	121cc <__assert_fail@plt+0x1288>
   12258:	ldr	r2, [pc, #80]	; 122b0 <__assert_fail@plt+0x136c>
   1225c:	add	r1, r1, #1
   12260:	add	r2, r2, r1
   12264:	ldrb	r2, [r2, #512]	; 0x200
   12268:	add	r2, r9, r2
   1226c:	ldrb	r2, [r2, #520]	; 0x208
   12270:	cmp	r2, #0
   12274:	movne	r4, r1
   12278:	bne	121c4 <__assert_fail@plt+0x1280>
   1227c:	b	121cc <__assert_fail@plt+0x1288>
   12280:	bl	10e84 <__errno_location@plt>
   12284:	mov	r2, #5
   12288:	ldr	r1, [pc, #40]	; 122b8 <__assert_fail@plt+0x1374>
   1228c:	ldr	r4, [r0]
   12290:	mov	r0, #0
   12294:	bl	10d88 <dcgettext@plt>
   12298:	mov	r1, r4
   1229c:	mov	r2, r0
   122a0:	mov	r0, #1
   122a4:	bl	10df4 <error@plt>
   122a8:	andeq	ip, r2, ip, asr r3
   122ac:	andeq	lr, r2, r4, asr r1
   122b0:	andeq	ip, r2, ip, asr r1
   122b4:	andeq	ip, r2, r4, asr r1
   122b8:	andeq	sl, r1, r8, lsr r5
   122bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122c0:	sub	sp, sp, #108	; 0x6c
   122c4:	mov	sl, r0
   122c8:	str	r1, [sp, #28]
   122cc:	bl	10e6c <strlen@plt>
   122d0:	mov	r4, r0
   122d4:	bl	18584 <__assert_fail@plt+0x7640>
   122d8:	mov	r1, #1
   122dc:	mov	r5, r0
   122e0:	str	r0, [sp, #32]
   122e4:	mov	r0, r4
   122e8:	str	r5, [sp, #92]	; 0x5c
   122ec:	bl	18ac8 <__assert_fail@plt+0x7b84>
   122f0:	ldrb	r7, [sl]
   122f4:	cmp	r7, #0
   122f8:	str	r0, [sp, #96]	; 0x60
   122fc:	beq	12418 <__assert_fail@plt+0x14d4>
   12300:	mov	fp, #1
   12304:	mov	r4, #0
   12308:	mov	r6, r7
   1230c:	cmp	r6, #92	; 0x5c
   12310:	sub	r7, fp, #1
   12314:	strbne	r6, [r5]
   12318:	bne	12374 <__assert_fail@plt+0x1430>
   1231c:	add	r9, r4, #1
   12320:	ldr	r3, [sp, #96]	; 0x60
   12324:	ldrb	r8, [sl, r9]
   12328:	mov	r2, #1
   1232c:	add	r1, sl, r9
   12330:	cmp	r8, #98	; 0x62
   12334:	str	r1, [sp, #36]	; 0x24
   12338:	strb	r2, [r3, r7]
   1233c:	beq	12904 <__assert_fail@plt+0x19c0>
   12340:	bls	12394 <__assert_fail@plt+0x1450>
   12344:	cmp	r8, #114	; 0x72
   12348:	moveq	r6, #13
   1234c:	beq	1236c <__assert_fail@plt+0x1428>
   12350:	bhi	123fc <__assert_fail@plt+0x14b8>
   12354:	cmp	r8, #102	; 0x66
   12358:	moveq	r6, #12
   1235c:	beq	1236c <__assert_fail@plt+0x1428>
   12360:	cmp	r8, #110	; 0x6e
   12364:	moveq	r6, #10
   12368:	bne	123f4 <__assert_fail@plt+0x14b0>
   1236c:	mov	r4, r9
   12370:	strb	r6, [r5]
   12374:	add	r4, r4, #1
   12378:	add	r5, r5, #1
   1237c:	ldrb	r6, [sl, r4]
   12380:	add	r3, fp, #1
   12384:	cmp	r6, #0
   12388:	beq	1241c <__assert_fail@plt+0x14d8>
   1238c:	mov	fp, r3
   12390:	b	1230c <__assert_fail@plt+0x13c8>
   12394:	cmp	r8, #55	; 0x37
   12398:	bhi	123e0 <__assert_fail@plt+0x149c>
   1239c:	cmp	r8, #48	; 0x30
   123a0:	bcs	1290c <__assert_fail@plt+0x19c8>
   123a4:	cmp	r8, #0
   123a8:	bne	123f4 <__assert_fail@plt+0x14b0>
   123ac:	mov	r2, #5
   123b0:	ldr	r1, [pc, #1972]	; 12b6c <__assert_fail@plt+0x1c28>
   123b4:	mov	r0, r8
   123b8:	str	r3, [sp, #36]	; 0x24
   123bc:	bl	10d88 <dcgettext@plt>
   123c0:	mov	r1, r8
   123c4:	mov	r9, r4
   123c8:	mov	r2, r0
   123cc:	mov	r0, r8
   123d0:	bl	10df4 <error@plt>
   123d4:	ldr	r3, [sp, #36]	; 0x24
   123d8:	strb	r8, [r3, r7]
   123dc:	b	1236c <__assert_fail@plt+0x1428>
   123e0:	cmp	r8, #92	; 0x5c
   123e4:	beq	1236c <__assert_fail@plt+0x1428>
   123e8:	cmp	r8, #97	; 0x61
   123ec:	moveq	r6, #7
   123f0:	beq	1236c <__assert_fail@plt+0x1428>
   123f4:	mov	r6, r8
   123f8:	b	1236c <__assert_fail@plt+0x1428>
   123fc:	cmp	r8, #116	; 0x74
   12400:	moveq	r6, #9
   12404:	beq	1236c <__assert_fail@plt+0x1428>
   12408:	cmp	r8, #118	; 0x76
   1240c:	moveq	r6, #11
   12410:	beq	1236c <__assert_fail@plt+0x1428>
   12414:	b	123f4 <__assert_fail@plt+0x14b0>
   12418:	mov	fp, r7
   1241c:	mov	sl, #0
   12420:	str	fp, [sp, #100]	; 0x64
   12424:	add	r6, sl, #2
   12428:	cmp	r6, fp
   1242c:	bcs	1249c <__assert_fail@plt+0x1558>
   12430:	ldr	r5, [sp, #92]	; 0x5c
   12434:	ldrb	r3, [r5, sl]
   12438:	cmp	r3, #91	; 0x5b
   1243c:	beq	124fc <__assert_fail@plt+0x15b8>
   12440:	add	r8, sl, #1
   12444:	ldrb	r9, [r5, r8]
   12448:	cmp	r9, #45	; 0x2d
   1244c:	beq	12710 <__assert_fail@plt+0x17cc>
   12450:	ldr	r3, [sp, #32]
   12454:	mov	r0, #24
   12458:	ldrb	r4, [r3, sl]
   1245c:	bl	18584 <__assert_fail@plt+0x7640>
   12460:	ldr	r3, [sp, #28]
   12464:	ldr	r2, [r3, #4]
   12468:	mov	r3, #0
   1246c:	cmp	r2, r3
   12470:	strb	r4, [r0, #8]
   12474:	str	r3, [r0, #4]
   12478:	str	r3, [r0]
   1247c:	beq	12b3c <__assert_fail@plt+0x1bf8>
   12480:	mov	sl, r8
   12484:	ldr	r3, [sp, #28]
   12488:	add	r6, sl, #2
   1248c:	cmp	r6, fp
   12490:	str	r0, [r2, #4]
   12494:	str	r0, [r3, #4]
   12498:	bcc	12430 <__assert_fail@plt+0x14ec>
   1249c:	cmp	sl, fp
   124a0:	bcs	124f0 <__assert_fail@plt+0x15ac>
   124a4:	ldr	r3, [sp, #32]
   124a8:	ldr	r7, [sp, #28]
   124ac:	add	r4, r3, sl
   124b0:	add	r5, r3, fp
   124b4:	mov	r8, #24
   124b8:	mov	r6, #0
   124bc:	mov	r0, r8
   124c0:	ldrb	r9, [r4], #1
   124c4:	bl	18584 <__assert_fail@plt+0x7640>
   124c8:	ldr	r3, [r7, #4]
   124cc:	cmp	r3, #0
   124d0:	str	r6, [r0, #4]
   124d4:	str	r6, [r0]
   124d8:	strb	r9, [r0, #8]
   124dc:	beq	12b3c <__assert_fail@plt+0x1bf8>
   124e0:	cmp	r5, r4
   124e4:	str	r0, [r3, #4]
   124e8:	str	r0, [r7, #4]
   124ec:	bne	124bc <__assert_fail@plt+0x1578>
   124f0:	mov	r3, #1
   124f4:	str	r3, [sp, #36]	; 0x24
   124f8:	b	12814 <__assert_fail@plt+0x18d0>
   124fc:	ldr	r7, [sp, #96]	; 0x60
   12500:	add	r8, sl, #1
   12504:	ldrb	r3, [r7, sl]
   12508:	cmp	r3, #0
   1250c:	str	r3, [sp, #36]	; 0x24
   12510:	ldrb	r9, [r5, r8]
   12514:	bne	12448 <__assert_fail@plt+0x1504>
   12518:	cmp	r9, #58	; 0x3a
   1251c:	beq	1260c <__assert_fail@plt+0x16c8>
   12520:	cmp	r9, #61	; 0x3d
   12524:	beq	1260c <__assert_fail@plt+0x16c8>
   12528:	ldrb	r3, [r5, r6]
   1252c:	cmp	r3, #42	; 0x2a
   12530:	bne	12448 <__assert_fail@plt+0x1504>
   12534:	ldrb	r3, [r7, r6]
   12538:	cmp	r3, #0
   1253c:	bne	12448 <__assert_fail@plt+0x1504>
   12540:	add	r1, sl, #3
   12544:	cmp	r1, fp
   12548:	bcs	12448 <__assert_fail@plt+0x1504>
   1254c:	ldrb	r2, [r7, r1]
   12550:	add	r3, r7, r1
   12554:	cmp	r2, #0
   12558:	bne	12448 <__assert_fail@plt+0x1504>
   1255c:	ldrb	r2, [r5, r1]
   12560:	add	r5, r5, r1
   12564:	cmp	r2, #93	; 0x5d
   12568:	movne	r0, r5
   1256c:	bne	12578 <__assert_fail@plt+0x1634>
   12570:	b	125ac <__assert_fail@plt+0x1668>
   12574:	mov	r1, r4
   12578:	add	r4, r1, #1
   1257c:	cmp	r4, fp
   12580:	bcs	12448 <__assert_fail@plt+0x1504>
   12584:	ldrb	ip, [r3, #1]!
   12588:	cmp	ip, #0
   1258c:	bne	12448 <__assert_fail@plt+0x1504>
   12590:	ldrb	lr, [r0, #1]!
   12594:	cmp	lr, #93	; 0x5d
   12598:	bne	12574 <__assert_fail@plt+0x1630>
   1259c:	mvn	r6, r8
   125a0:	adds	r6, r6, r1
   125a4:	bne	12830 <__assert_fail@plt+0x18ec>
   125a8:	mov	r1, r4
   125ac:	mov	r2, #0
   125b0:	mov	r3, #0
   125b4:	mov	r4, r1
   125b8:	mov	sl, r2
   125bc:	mov	fp, r3
   125c0:	strd	r2, [sp, #80]	; 0x50
   125c4:	mov	r0, #24
   125c8:	bl	18584 <__assert_fail@plt+0x7640>
   125cc:	ldr	r3, [sp, #28]
   125d0:	mov	r1, #0
   125d4:	mov	r2, #4
   125d8:	ldr	r3, [r3, #4]
   125dc:	cmp	r3, #0
   125e0:	strb	r9, [r0, #8]
   125e4:	strd	sl, [r0, #16]
   125e8:	str	r1, [r0, #4]
   125ec:	str	r2, [r0]
   125f0:	beq	12b68 <__assert_fail@plt+0x1c24>
   125f4:	str	r0, [r3, #4]
   125f8:	ldr	r3, [sp, #28]
   125fc:	add	sl, r4, #1
   12600:	str	r0, [r3, #4]
   12604:	ldr	fp, [sp, #100]	; 0x64
   12608:	b	12424 <__assert_fail@plt+0x14e0>
   1260c:	ldrb	r3, [r7, r8]
   12610:	cmp	r3, #0
   12614:	bne	12528 <__assert_fail@plt+0x15e4>
   12618:	ldr	r3, [sp, #32]
   1261c:	sub	r1, fp, #1
   12620:	cmp	r6, r1
   12624:	ldrb	r0, [r3, r8]
   12628:	bcs	12528 <__assert_fail@plt+0x15e4>
   1262c:	add	r3, r5, r6
   12630:	add	r4, sl, #3
   12634:	add	r2, r7, r6
   12638:	b	1264c <__assert_fail@plt+0x1708>
   1263c:	cmp	r4, r1
   12640:	add	r2, r2, #1
   12644:	add	r4, r4, #1
   12648:	bcs	12528 <__assert_fail@plt+0x15e4>
   1264c:	ldrb	lr, [r3], #1
   12650:	sub	ip, r4, #1
   12654:	cmp	r0, lr
   12658:	bne	1263c <__assert_fail@plt+0x16f8>
   1265c:	ldrb	lr, [r3]
   12660:	cmp	lr, #93	; 0x5d
   12664:	bne	1263c <__assert_fail@plt+0x16f8>
   12668:	ldrb	lr, [r2]
   1266c:	cmp	lr, #0
   12670:	bne	1263c <__assert_fail@plt+0x16f8>
   12674:	ldrb	lr, [r2, #1]
   12678:	cmp	lr, #0
   1267c:	bne	1263c <__assert_fail@plt+0x16f8>
   12680:	mvn	r3, #1
   12684:	sub	r3, r3, sl
   12688:	adds	r3, r3, ip
   1268c:	str	r3, [sp, #40]	; 0x28
   12690:	ldr	r3, [sp, #32]
   12694:	str	lr, [sp, #44]	; 0x2c
   12698:	add	r3, r3, r6
   1269c:	str	r3, [sp, #48]	; 0x30
   126a0:	beq	12ac0 <__assert_fail@plt+0x1b7c>
   126a4:	cmp	r0, #58	; 0x3a
   126a8:	beq	12968 <__assert_fail@plt+0x1a24>
   126ac:	ldr	r3, [sp, #40]	; 0x28
   126b0:	cmp	r3, #1
   126b4:	beq	12a78 <__assert_fail@plt+0x1b34>
   126b8:	mov	r1, r6
   126bc:	add	r0, sp, #92	; 0x5c
   126c0:	bl	11d68 <__assert_fail@plt+0xe24>
   126c4:	cmp	r0, #0
   126c8:	bne	12528 <__assert_fail@plt+0x15e4>
   126cc:	mov	r4, r0
   126d0:	ldr	r1, [sp, #40]	; 0x28
   126d4:	ldr	r0, [sp, #48]	; 0x30
   126d8:	bl	11e1c <__assert_fail@plt+0xed8>
   126dc:	mov	r2, #5
   126e0:	ldr	r1, [pc, #1160]	; 12b70 <__assert_fail@plt+0x1c2c>
   126e4:	mov	r5, r0
   126e8:	mov	r0, r4
   126ec:	bl	10d88 <dcgettext@plt>
   126f0:	mov	r3, r5
   126f4:	mov	r2, r0
   126f8:	mov	r0, r4
   126fc:	mov	r1, r4
   12700:	bl	10df4 <error@plt>
   12704:	mov	r0, r5
   12708:	bl	13a3c <__assert_fail@plt+0x2af8>
   1270c:	b	12814 <__assert_fail@plt+0x18d0>
   12710:	ldr	r3, [sp, #96]	; 0x60
   12714:	ldrb	r3, [r3, r8]
   12718:	cmp	r3, #0
   1271c:	str	r3, [sp, #36]	; 0x24
   12720:	bne	12450 <__assert_fail@plt+0x150c>
   12724:	ldr	r3, [sp, #32]
   12728:	ldrb	r4, [r3, r6]
   1272c:	ldrb	r5, [r3, sl]
   12730:	cmp	r5, r4
   12734:	bhi	1277c <__assert_fail@plt+0x1838>
   12738:	mov	r0, #24
   1273c:	bl	18584 <__assert_fail@plt+0x7640>
   12740:	ldr	r3, [sp, #28]
   12744:	ldr	r2, [sp, #36]	; 0x24
   12748:	ldr	r3, [r3, #4]
   1274c:	cmp	r3, #0
   12750:	str	r2, [r0, #4]
   12754:	mov	r2, #1
   12758:	strb	r5, [r0, #8]
   1275c:	strb	r4, [r0, #9]
   12760:	str	r2, [r0]
   12764:	beq	12b40 <__assert_fail@plt+0x1bfc>
   12768:	str	r0, [r3, #4]
   1276c:	ldr	r3, [sp, #28]
   12770:	add	sl, sl, #3
   12774:	str	r0, [r3, #4]
   12778:	b	12424 <__assert_fail@plt+0x14e0>
   1277c:	mov	r0, #5
   12780:	bl	18584 <__assert_fail@plt+0x7640>
   12784:	mov	r6, r0
   12788:	bl	10e54 <__ctype_b_loc@plt>
   1278c:	lsl	r3, r5, #1
   12790:	ldr	r2, [r0]
   12794:	mov	r7, r0
   12798:	ldrh	r3, [r2, r3]
   1279c:	tst	r3, #16384	; 0x4000
   127a0:	beq	128e8 <__assert_fail@plt+0x19a4>
   127a4:	ldrb	r3, [sp, #36]	; 0x24
   127a8:	strb	r5, [r6]
   127ac:	strb	r3, [r6, #1]
   127b0:	mov	r0, #5
   127b4:	bl	18584 <__assert_fail@plt+0x7640>
   127b8:	ldr	r2, [r7]
   127bc:	lsl	r3, r4, #1
   127c0:	ldrh	r3, [r2, r3]
   127c4:	tst	r3, #16384	; 0x4000
   127c8:	mov	r5, r0
   127cc:	beq	128d0 <__assert_fail@plt+0x198c>
   127d0:	mov	r3, #0
   127d4:	strb	r4, [r0]
   127d8:	strb	r3, [r0, #1]
   127dc:	mov	r2, #5
   127e0:	ldr	r1, [pc, #908]	; 12b74 <__assert_fail@plt+0x1c30>
   127e4:	mov	r0, #0
   127e8:	bl	10d88 <dcgettext@plt>
   127ec:	mov	r1, #0
   127f0:	mov	r3, r6
   127f4:	str	r5, [sp]
   127f8:	mov	r2, r0
   127fc:	mov	r0, r1
   12800:	bl	10df4 <error@plt>
   12804:	mov	r0, r6
   12808:	bl	13a3c <__assert_fail@plt+0x2af8>
   1280c:	mov	r0, r5
   12810:	bl	13a3c <__assert_fail@plt+0x2af8>
   12814:	ldr	r0, [sp, #92]	; 0x5c
   12818:	bl	13a3c <__assert_fail@plt+0x2af8>
   1281c:	ldr	r0, [sp, #96]	; 0x60
   12820:	bl	13a3c <__assert_fail@plt+0x2af8>
   12824:	ldr	r0, [sp, #36]	; 0x24
   12828:	add	sp, sp, #108	; 0x6c
   1282c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12830:	cmp	r2, #48	; 0x30
   12834:	movne	r2, #10
   12838:	moveq	r2, #8
   1283c:	str	ip, [sp]
   12840:	add	r3, sp, #80	; 0x50
   12844:	add	r1, sp, #76	; 0x4c
   12848:	mov	r0, r5
   1284c:	bl	18c10 <__assert_fail@plt+0x7ccc>
   12850:	cmp	r0, #0
   12854:	bne	12880 <__assert_fail@plt+0x193c>
   12858:	ldrd	sl, [sp, #80]	; 0x50
   1285c:	mvn	r3, #0
   12860:	mvn	r2, #0
   12864:	cmp	fp, r3
   12868:	cmpeq	sl, r2
   1286c:	beq	12880 <__assert_fail@plt+0x193c>
   12870:	ldr	r2, [sp, #76]	; 0x4c
   12874:	add	r3, r5, r6
   12878:	cmp	r2, r3
   1287c:	beq	125c4 <__assert_fail@plt+0x1680>
   12880:	mov	r7, r5
   12884:	mov	r1, r6
   12888:	mov	r0, r7
   1288c:	bl	11e1c <__assert_fail@plt+0xed8>
   12890:	mov	r2, #5
   12894:	ldr	r1, [pc, #732]	; 12b78 <__assert_fail@plt+0x1c34>
   12898:	mov	r4, r0
   1289c:	mov	r0, #0
   128a0:	bl	10d88 <dcgettext@plt>
   128a4:	mov	r5, r0
   128a8:	mov	r0, r4
   128ac:	bl	17960 <__assert_fail@plt+0x6a1c>
   128b0:	mov	r1, #0
   128b4:	mov	r2, r5
   128b8:	mov	r3, r0
   128bc:	mov	r0, r1
   128c0:	bl	10df4 <error@plt>
   128c4:	mov	r0, r4
   128c8:	bl	13a3c <__assert_fail@plt+0x2af8>
   128cc:	b	12814 <__assert_fail@plt+0x18d0>
   128d0:	str	r4, [sp]
   128d4:	ldr	r3, [pc, #672]	; 12b7c <__assert_fail@plt+0x1c38>
   128d8:	mov	r2, #5
   128dc:	mov	r1, #1
   128e0:	bl	10e90 <__sprintf_chk@plt>
   128e4:	b	127dc <__assert_fail@plt+0x1898>
   128e8:	str	r5, [sp]
   128ec:	ldr	r3, [pc, #648]	; 12b7c <__assert_fail@plt+0x1c38>
   128f0:	mov	r2, #5
   128f4:	mov	r1, #1
   128f8:	mov	r0, r6
   128fc:	bl	10e90 <__sprintf_chk@plt>
   12900:	b	127b0 <__assert_fail@plt+0x186c>
   12904:	mov	r6, #8
   12908:	b	1236c <__assert_fail@plt+0x1428>
   1290c:	add	r7, r4, #2
   12910:	sub	r6, r8, #48	; 0x30
   12914:	ldrb	r3, [sl, r7]
   12918:	uxtb	r6, r6
   1291c:	sub	r3, r3, #48	; 0x30
   12920:	cmp	r3, #7
   12924:	bhi	1236c <__assert_fail@plt+0x1428>
   12928:	add	r8, r4, #3
   1292c:	add	r6, r3, r6, lsl #3
   12930:	ldrb	r3, [sl, r8]
   12934:	and	r6, r6, #255	; 0xff
   12938:	sub	r3, r3, #48	; 0x30
   1293c:	cmp	r3, #7
   12940:	addhi	r9, r9, #1
   12944:	bhi	1236c <__assert_fail@plt+0x1428>
   12948:	mov	r2, #8
   1294c:	smlabb	r2, r2, r6, r3
   12950:	cmp	r2, #255	; 0xff
   12954:	bgt	12af0 <__assert_fail@plt+0x1bac>
   12958:	add	r6, r3, r6, lsl #3
   1295c:	and	r6, r6, #255	; 0xff
   12960:	mov	r9, r8
   12964:	b	1236c <__assert_fail@plt+0x1428>
   12968:	ldr	r2, [sp, #44]	; 0x2c
   1296c:	ldr	r3, [pc, #524]	; 12b80 <__assert_fail@plt+0x1c3c>
   12970:	str	r7, [sp, #56]	; 0x38
   12974:	str	r6, [sp, #60]	; 0x3c
   12978:	ldr	r7, [sp, #48]	; 0x30
   1297c:	ldr	r6, [sp, #40]	; 0x28
   12980:	str	r5, [sp, #44]	; 0x2c
   12984:	str	r4, [sp, #68]	; 0x44
   12988:	mov	r5, r3
   1298c:	mov	r4, r2
   12990:	str	sl, [sp, #52]	; 0x34
   12994:	str	r8, [sp, #64]	; 0x40
   12998:	ldr	r8, [r5, #4]!
   1299c:	mov	r2, r6
   129a0:	mov	r1, r8
   129a4:	mov	r0, r7
   129a8:	bl	10f20 <strncmp@plt>
   129ac:	subs	sl, r0, #0
   129b0:	bne	129c4 <__assert_fail@plt+0x1a80>
   129b4:	mov	r0, r8
   129b8:	bl	10e6c <strlen@plt>
   129bc:	cmp	r6, r0
   129c0:	beq	12a34 <__assert_fail@plt+0x1af0>
   129c4:	add	r4, r4, #1
   129c8:	cmp	r4, #12
   129cc:	bne	12998 <__assert_fail@plt+0x1a54>
   129d0:	ldr	r6, [sp, #60]	; 0x3c
   129d4:	add	r0, sp, #92	; 0x5c
   129d8:	mov	r1, r6
   129dc:	bl	11d68 <__assert_fail@plt+0xe24>
   129e0:	ldr	r5, [sp, #44]	; 0x2c
   129e4:	ldr	sl, [sp, #52]	; 0x34
   129e8:	ldr	r7, [sp, #56]	; 0x38
   129ec:	ldr	r8, [sp, #64]	; 0x40
   129f0:	cmp	r0, #0
   129f4:	bne	12528 <__assert_fail@plt+0x15e4>
   129f8:	mov	r4, r0
   129fc:	ldr	r1, [sp, #40]	; 0x28
   12a00:	ldr	r0, [sp, #48]	; 0x30
   12a04:	bl	11e1c <__assert_fail@plt+0xed8>
   12a08:	mov	r2, #5
   12a0c:	ldr	r1, [pc, #368]	; 12b84 <__assert_fail@plt+0x1c40>
   12a10:	mov	r5, r0
   12a14:	mov	r0, r4
   12a18:	bl	10d88 <dcgettext@plt>
   12a1c:	mov	r6, r0
   12a20:	mov	r0, r5
   12a24:	bl	17960 <__assert_fail@plt+0x6a1c>
   12a28:	mov	r2, r6
   12a2c:	mov	r3, r0
   12a30:	b	126f8 <__assert_fail@plt+0x17b4>
   12a34:	mov	r0, #24
   12a38:	mov	r5, r4
   12a3c:	ldr	r4, [sp, #68]	; 0x44
   12a40:	bl	18584 <__assert_fail@plt+0x7640>
   12a44:	ldr	r3, [sp, #28]
   12a48:	mov	r2, #2
   12a4c:	ldr	r3, [r3, #4]
   12a50:	cmp	r3, #0
   12a54:	str	sl, [r0, #4]
   12a58:	str	r2, [r0]
   12a5c:	str	r5, [r0, #8]
   12a60:	beq	12b54 <__assert_fail@plt+0x1c10>
   12a64:	str	r0, [r3, #4]
   12a68:	ldr	r3, [sp, #28]
   12a6c:	add	sl, r4, #1
   12a70:	str	r0, [r3, #4]
   12a74:	b	12604 <__assert_fail@plt+0x16c0>
   12a78:	mov	r0, #24
   12a7c:	bl	18584 <__assert_fail@plt+0x7640>
   12a80:	ldr	r3, [sp, #32]
   12a84:	ldr	r1, [sp, #44]	; 0x2c
   12a88:	ldrb	r2, [r3, r6]
   12a8c:	ldr	r3, [sp, #28]
   12a90:	ldr	r3, [r3, #4]
   12a94:	cmp	r3, #0
   12a98:	str	r1, [r0, #4]
   12a9c:	mov	r1, #3
   12aa0:	str	r1, [r0]
   12aa4:	strb	r2, [r0, #8]
   12aa8:	bne	12a64 <__assert_fail@plt+0x1b20>
   12aac:	ldr	r3, [pc, #212]	; 12b88 <__assert_fail@plt+0x1c44>
   12ab0:	ldr	r2, [pc, #212]	; 12b8c <__assert_fail@plt+0x1c48>
   12ab4:	ldr	r1, [pc, #212]	; 12b90 <__assert_fail@plt+0x1c4c>
   12ab8:	ldr	r0, [pc, #212]	; 12b94 <__assert_fail@plt+0x1c50>
   12abc:	bl	10f44 <__assert_fail@plt>
   12ac0:	cmp	r0, #58	; 0x3a
   12ac4:	ldr	r4, [sp, #40]	; 0x28
   12ac8:	ldreq	r1, [pc, #200]	; 12b98 <__assert_fail@plt+0x1c54>
   12acc:	ldrne	r1, [pc, #200]	; 12b9c <__assert_fail@plt+0x1c58>
   12ad0:	mov	r2, #5
   12ad4:	mov	r0, r4
   12ad8:	bl	10d88 <dcgettext@plt>
   12adc:	mov	r1, r4
   12ae0:	mov	r2, r0
   12ae4:	mov	r0, r4
   12ae8:	bl	10df4 <error@plt>
   12aec:	b	12814 <__assert_fail@plt+0x18d0>
   12af0:	mov	r2, #5
   12af4:	ldr	r1, [pc, #164]	; 12ba0 <__assert_fail@plt+0x1c5c>
   12af8:	mov	r0, #0
   12afc:	bl	10d88 <dcgettext@plt>
   12b00:	add	r3, sl, r9
   12b04:	ldrb	r2, [sl, r8]
   12b08:	ldrb	r3, [r3]
   12b0c:	ldrb	ip, [sl, r7]
   12b10:	mov	r1, #0
   12b14:	str	r2, [sp, #16]
   12b18:	str	r2, [sp, #4]
   12b1c:	str	r3, [sp, #8]
   12b20:	str	ip, [sp, #12]
   12b24:	str	ip, [sp]
   12b28:	add	r9, r9, #1
   12b2c:	mov	r2, r0
   12b30:	mov	r0, r1
   12b34:	bl	10df4 <error@plt>
   12b38:	b	1236c <__assert_fail@plt+0x1428>
   12b3c:	bl	10fa8 <__assert_fail@plt+0x64>
   12b40:	ldr	r3, [pc, #92]	; 12ba4 <__assert_fail@plt+0x1c60>
   12b44:	ldr	r2, [pc, #92]	; 12ba8 <__assert_fail@plt+0x1c64>
   12b48:	ldr	r1, [pc, #64]	; 12b90 <__assert_fail@plt+0x1c4c>
   12b4c:	ldr	r0, [pc, #64]	; 12b94 <__assert_fail@plt+0x1c50>
   12b50:	bl	10f44 <__assert_fail@plt>
   12b54:	ldr	r3, [pc, #80]	; 12bac <__assert_fail@plt+0x1c68>
   12b58:	ldr	r2, [pc, #80]	; 12bb0 <__assert_fail@plt+0x1c6c>
   12b5c:	ldr	r1, [pc, #44]	; 12b90 <__assert_fail@plt+0x1c4c>
   12b60:	ldr	r0, [pc, #44]	; 12b94 <__assert_fail@plt+0x1c50>
   12b64:	bl	10f44 <__assert_fail@plt>
   12b68:	bl	10f80 <__assert_fail@plt+0x3c>
   12b6c:	andeq	sl, r1, r8, lsr #11
   12b70:	andeq	sl, r1, r8, asr r6
   12b74:	andeq	sl, r1, r0, asr #13
   12b78:	muleq	r1, r4, r6
   12b7c:	andeq	sl, r1, ip, lsl #10
   12b80:	muleq	r1, ip, r3
   12b84:	andeq	sl, r1, ip, lsr r6
   12b88:	andeq	sl, r1, r4, ror #7
   12b8c:	andeq	r0, r0, r7, ror #5
   12b90:	andeq	sl, r1, r0, lsr #10
   12b94:	andeq	sl, r1, ip, lsr #10
   12b98:	andeq	sl, r1, ip, ror #11
   12b9c:	andeq	sl, r1, r0, lsl r6
   12ba0:	andeq	sl, r1, r4, asr #10
   12ba4:	strdeq	sl, [r1], -r8
   12ba8:	andeq	r0, r0, r7, lsr #5
   12bac:	ldrdeq	sl, [r1], -r0
   12bb0:			; <UNDEFINED> instruction: 0x000002bd
   12bb4:	ldr	r2, [r0]
   12bb8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bbc:	mov	r3, #0
   12bc0:	ldr	sl, [r2, #4]
   12bc4:	mov	r8, r0
   12bc8:	cmp	sl, r3
   12bcc:	str	r3, [r0, #24]
   12bd0:	strb	r3, [r0, #32]
   12bd4:	strb	r3, [r0, #34]	; 0x22
   12bd8:	strb	r3, [r0, #33]	; 0x21
   12bdc:	beq	12e64 <__assert_fail@plt+0x1f20>
   12be0:	mov	r6, #0
   12be4:	mov	r7, #0
   12be8:	ldr	r3, [sl]
   12bec:	cmp	r3, #4
   12bf0:	ldrls	pc, [pc, r3, lsl #2]
   12bf4:	b	12c60 <__assert_fail@plt+0x1d1c>
   12bf8:	andeq	r2, r1, ip, lsl #24
   12bfc:	andeq	r2, r1, r0, lsr #26
   12c00:	andeq	r2, r1, ip, asr #25
   12c04:	andeq	r2, r1, ip, lsl #25
   12c08:	andeq	r2, r1, r4, ror #24
   12c0c:	mov	r4, #1
   12c10:	mov	r5, #0
   12c14:	adds	r4, r4, r6
   12c18:	adc	r5, r5, r7
   12c1c:	cmp	r5, r7
   12c20:	and	r3, r4, r5
   12c24:	cmpeq	r4, r6
   12c28:	movcc	r2, #1
   12c2c:	movcs	r2, #0
   12c30:	cmn	r3, #1
   12c34:	movne	r3, #0
   12c38:	moveq	r3, #1
   12c3c:	orrs	r3, r2, r3
   12c40:	bne	12e70 <__assert_fail@plt+0x1f2c>
   12c44:	ldr	sl, [sl, #4]
   12c48:	mov	r6, r4
   12c4c:	cmp	sl, #0
   12c50:	mov	r7, r5
   12c54:	bne	12be8 <__assert_fail@plt+0x1ca4>
   12c58:	strd	r4, [r8, #16]
   12c5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c60:	bl	10f2c <abort@plt>
   12c64:	ldrd	r4, [sl, #16]
   12c68:	orrs	r3, r4, r5
   12c6c:	bne	12c14 <__assert_fail@plt+0x1cd0>
   12c70:	ldr	r3, [r8, #24]
   12c74:	str	sl, [r8, #28]
   12c78:	add	r3, r3, #1
   12c7c:	mov	r4, r6
   12c80:	mov	r5, r7
   12c84:	str	r3, [r8, #24]
   12c88:	b	12c44 <__assert_fail@plt+0x1d00>
   12c8c:	ldrb	r0, [sl, #8]
   12c90:	mov	r3, #0
   12c94:	mov	r4, #0
   12c98:	mov	r5, #0
   12c9c:	uxtb	r2, r3
   12ca0:	sub	r2, r2, r0
   12ca4:	clz	r2, r2
   12ca8:	lsr	r2, r2, #5
   12cac:	adds	r4, r4, r2
   12cb0:	add	r3, r3, #1
   12cb4:	adc	r5, r5, #0
   12cb8:	cmp	r3, #256	; 0x100
   12cbc:	bne	12c9c <__assert_fail@plt+0x1d58>
   12cc0:	mov	r3, #1
   12cc4:	strb	r3, [r8, #32]
   12cc8:	b	12c14 <__assert_fail@plt+0x1cd0>
   12ccc:	mov	r3, #1
   12cd0:	strb	r3, [r8, #33]	; 0x21
   12cd4:	ldr	fp, [sl, #8]
   12cd8:	mov	r9, #0
   12cdc:	mov	r4, #0
   12ce0:	mov	r5, #0
   12ce4:	cmp	fp, #11
   12ce8:	ldrls	pc, [pc, fp, lsl #2]
   12cec:	b	12c60 <__assert_fail@plt+0x1d1c>
   12cf0:	andeq	r2, r1, r0, asr lr
   12cf4:	andeq	r2, r1, ip, lsr lr
   12cf8:	andeq	r2, r1, r8, lsr #28
   12cfc:	andeq	r2, r1, r4, lsl lr
   12d00:	andeq	r2, r1, r0, lsl #28
   12d04:	andeq	r2, r1, r8, ror #27
   12d08:	ldrdeq	r2, [r1], -r4
   12d0c:	andeq	r2, r1, r0, asr #27
   12d10:	andeq	r2, r1, ip, lsr #27
   12d14:	muleq	r1, r8, sp
   12d18:	andeq	r2, r1, r4, lsl #27
   12d1c:	andeq	r2, r1, r0, asr #26
   12d20:	ldrb	r3, [sl, #9]
   12d24:	ldrb	r4, [sl, #8]
   12d28:	cmp	r3, r4
   12d2c:	bcc	12e90 <__assert_fail@plt+0x1f4c>
   12d30:	sub	r4, r3, r4
   12d34:	add	r4, r4, #1
   12d38:	asr	r5, r4, #31
   12d3c:	b	12c14 <__assert_fail@plt+0x1cd0>
   12d40:	bl	10e54 <__ctype_b_loc@plt>
   12d44:	ldr	r2, [r0]
   12d48:	ldrh	r2, [r2, r9]
   12d4c:	and	r2, r2, #4096	; 0x1000
   12d50:	cmp	r2, #0
   12d54:	beq	12d60 <__assert_fail@plt+0x1e1c>
   12d58:	adds	r4, r4, #1
   12d5c:	adc	r5, r5, #0
   12d60:	add	r9, r9, #2
   12d64:	cmp	r9, #512	; 0x200
   12d68:	bne	12ce4 <__assert_fail@plt+0x1da0>
   12d6c:	cmp	fp, #6
   12d70:	beq	12c14 <__assert_fail@plt+0x1cd0>
   12d74:	cmp	fp, #10
   12d78:	movne	r3, #1
   12d7c:	strbne	r3, [r8, #34]	; 0x22
   12d80:	b	12c14 <__assert_fail@plt+0x1cd0>
   12d84:	bl	10e54 <__ctype_b_loc@plt>
   12d88:	ldr	r2, [r0]
   12d8c:	ldrh	r2, [r2, r9]
   12d90:	and	r2, r2, #256	; 0x100
   12d94:	b	12d50 <__assert_fail@plt+0x1e0c>
   12d98:	bl	10e54 <__ctype_b_loc@plt>
   12d9c:	ldr	r2, [r0]
   12da0:	ldrh	r2, [r2, r9]
   12da4:	and	r2, r2, #8192	; 0x2000
   12da8:	b	12d50 <__assert_fail@plt+0x1e0c>
   12dac:	bl	10e54 <__ctype_b_loc@plt>
   12db0:	ldr	r2, [r0]
   12db4:	ldrh	r2, [r2, r9]
   12db8:	and	r2, r2, #4
   12dbc:	b	12d50 <__assert_fail@plt+0x1e0c>
   12dc0:	bl	10e54 <__ctype_b_loc@plt>
   12dc4:	ldr	r2, [r0]
   12dc8:	ldrh	r2, [r2, r9]
   12dcc:	and	r2, r2, #16384	; 0x4000
   12dd0:	b	12d50 <__assert_fail@plt+0x1e0c>
   12dd4:	bl	10e54 <__ctype_b_loc@plt>
   12dd8:	ldr	r2, [r0]
   12ddc:	ldrh	r2, [r2, r9]
   12de0:	and	r2, r2, #512	; 0x200
   12de4:	b	12d50 <__assert_fail@plt+0x1e0c>
   12de8:	bl	10e54 <__ctype_b_loc@plt>
   12dec:	ldr	r2, [r0]
   12df0:	ldrh	r2, [r2, r9]
   12df4:	bic	r2, r2, #32512	; 0x7f00
   12df8:	bic	r2, r2, #255	; 0xff
   12dfc:	b	12d50 <__assert_fail@plt+0x1e0c>
   12e00:	bl	10e54 <__ctype_b_loc@plt>
   12e04:	ldr	r2, [r0]
   12e08:	ldrh	r2, [r2, r9]
   12e0c:	and	r2, r2, #2048	; 0x800
   12e10:	b	12d50 <__assert_fail@plt+0x1e0c>
   12e14:	bl	10e54 <__ctype_b_loc@plt>
   12e18:	ldr	r2, [r0]
   12e1c:	ldrh	r2, [r2, r9]
   12e20:	and	r2, r2, #2
   12e24:	b	12d50 <__assert_fail@plt+0x1e0c>
   12e28:	bl	10e54 <__ctype_b_loc@plt>
   12e2c:	ldr	r2, [r0]
   12e30:	ldrh	r2, [r2, r9]
   12e34:	and	r2, r2, #1
   12e38:	b	12d50 <__assert_fail@plt+0x1e0c>
   12e3c:	bl	10e54 <__ctype_b_loc@plt>
   12e40:	ldr	r2, [r0]
   12e44:	ldrh	r2, [r2, r9]
   12e48:	and	r2, r2, #1024	; 0x400
   12e4c:	b	12d50 <__assert_fail@plt+0x1e0c>
   12e50:	bl	10e54 <__ctype_b_loc@plt>
   12e54:	ldr	r2, [r0]
   12e58:	ldrh	r2, [r2, r9]
   12e5c:	and	r2, r2, #8
   12e60:	b	12d50 <__assert_fail@plt+0x1e0c>
   12e64:	mov	r4, #0
   12e68:	mov	r5, #0
   12e6c:	b	12c58 <__assert_fail@plt+0x1d14>
   12e70:	mov	r2, #5
   12e74:	ldr	r1, [pc, #40]	; 12ea4 <__assert_fail@plt+0x1f60>
   12e78:	mov	r0, #0
   12e7c:	bl	10d88 <dcgettext@plt>
   12e80:	mov	r1, #0
   12e84:	mov	r2, r0
   12e88:	mov	r0, #1
   12e8c:	bl	10df4 <error@plt>
   12e90:	ldr	r3, [pc, #16]	; 12ea8 <__assert_fail@plt+0x1f64>
   12e94:	ldr	r2, [pc, #16]	; 12eac <__assert_fail@plt+0x1f68>
   12e98:	ldr	r1, [pc, #16]	; 12eb0 <__assert_fail@plt+0x1f6c>
   12e9c:	ldr	r0, [pc, #16]	; 12eb4 <__assert_fail@plt+0x1f70>
   12ea0:	bl	10f44 <__assert_fail@plt>
   12ea4:	andeq	sl, r1, r4, lsr r7
   12ea8:	andeq	sl, r1, r8, lsl #8
   12eac:	strdeq	r0, [r0], -r1
   12eb0:	andeq	sl, r1, r0, lsr #10
   12eb4:	andeq	sl, r1, r4, lsl #14
   12eb8:	cmp	r1, #0
   12ebc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ec0:	mvn	r2, #1
   12ec4:	mov	r6, r0
   12ec8:	mvn	r3, #0
   12ecc:	ldrd	r4, [r0, #8]
   12ed0:	beq	13060 <__assert_fail@plt+0x211c>
   12ed4:	cmp	r5, r3
   12ed8:	cmpeq	r4, r2
   12edc:	beq	12f34 <__assert_fail@plt+0x1ff0>
   12ee0:	ldr	r7, [r6, #4]
   12ee4:	cmp	r7, #0
   12ee8:	beq	134c8 <__assert_fail@plt+0x2584>
   12eec:	ldr	r3, [r7]
   12ef0:	cmp	r3, #4
   12ef4:	ldrls	pc, [pc, r3, lsl #2]
   12ef8:	b	13054 <__assert_fail@plt+0x2110>
   12efc:	andeq	r2, r1, r0, lsl pc
   12f00:	andeq	r3, r1, r0
   12f04:	andeq	r2, r1, r8, asr pc
   12f08:	andeq	r2, r1, r0, lsl pc
   12f0c:	ldrdeq	r2, [r1], -r8
   12f10:	mov	r3, #2
   12f14:	str	r3, [r1]
   12f18:	ldr	r3, [r7, #4]
   12f1c:	mvn	r4, #0
   12f20:	mvn	r5, #0
   12f24:	ldrb	r0, [r7, #8]
   12f28:	strd	r4, [r6, #8]
   12f2c:	str	r3, [r6, #4]
   12f30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f34:	ldr	r0, [r0]
   12f38:	mvn	r2, #0
   12f3c:	mov	r4, r2
   12f40:	ldr	r7, [r0, #4]
   12f44:	mov	r5, r2
   12f48:	str	r2, [r6, #8]
   12f4c:	str	r7, [r6, #4]
   12f50:	str	r2, [r6, #12]
   12f54:	b	12ee4 <__assert_fail@plt+0x1fa0>
   12f58:	mov	r3, #2
   12f5c:	str	r3, [r1]
   12f60:	ldr	r8, [r7, #8]
   12f64:	cmp	r8, #6
   12f68:	beq	130f4 <__assert_fail@plt+0x21b0>
   12f6c:	cmp	r8, #10
   12f70:	bne	130a0 <__assert_fail@plt+0x215c>
   12f74:	mvn	r3, #0
   12f78:	cmp	r5, r3
   12f7c:	mvn	r2, #0
   12f80:	mov	r3, #1
   12f84:	cmpeq	r4, r2
   12f88:	str	r3, [r1]
   12f8c:	bne	13484 <__assert_fail@plt+0x2540>
   12f90:	mov	r9, #0
   12f94:	ldr	r5, [pc, #1440]	; 1353c <__assert_fail@plt+0x25f8>
   12f98:	mov	r4, r9
   12f9c:	cmp	r8, #11
   12fa0:	ldrls	pc, [pc, r8, lsl #2]
   12fa4:	b	1305c <__assert_fail@plt+0x2118>
   12fa8:	andeq	r3, r1, r4, ror #4
   12fac:	andeq	r3, r1, r0, asr r2
   12fb0:	andeq	r3, r1, ip, lsr r2
   12fb4:	andeq	r3, r1, r8, lsr #4
   12fb8:	andeq	r3, r1, r4, lsl r2
   12fbc:	andeq	r3, r1, r0, lsl #4
   12fc0:	andeq	r3, r1, ip, ror #3
   12fc4:	ldrdeq	r3, [r1], -r8
   12fc8:	andeq	r3, r1, r4, asr #3
   12fcc:			; <UNDEFINED> instruction: 0x000131b0
   12fd0:	muleq	r1, ip, r1
   12fd4:	andeq	r3, r1, r0, ror #2
   12fd8:	ldrd	r2, [r7, #16]
   12fdc:	orrs	r0, r2, r3
   12fe0:	bne	134d8 <__assert_fail@plt+0x2594>
   12fe4:	ldr	r0, [r7, #4]
   12fe8:	mvn	r2, #0
   12fec:	mov	r4, r2
   12ff0:	stmib	r6, {r0, r2}
   12ff4:	mov	r5, r2
   12ff8:	str	r2, [r6, #12]
   12ffc:	b	12ee0 <__assert_fail@plt+0x1f9c>
   13000:	mov	r3, #2
   13004:	str	r3, [r1]
   13008:	mvn	r3, #0
   1300c:	mvn	r2, #0
   13010:	cmp	r5, r3
   13014:	cmpeq	r4, r2
   13018:	beq	13130 <__assert_fail@plt+0x21ec>
   1301c:	adds	r0, r4, #1
   13020:	adc	r1, r5, #0
   13024:	strd	r0, [r6, #8]
   13028:	ldrb	r2, [r7, #9]
   1302c:	mov	r3, #0
   13030:	cmp	r1, r3
   13034:	cmpeq	r0, r2
   13038:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1303c:	ldr	r1, [r7, #4]
   13040:	mvn	r2, #0
   13044:	mvn	r3, #0
   13048:	str	r1, [r6, #4]
   1304c:	strd	r2, [r6, #8]
   13050:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13054:	mov	r3, #2
   13058:	str	r3, [r1]
   1305c:	bl	10f2c <abort@plt>
   13060:	cmp	r5, r3
   13064:	cmpeq	r4, r2
   13068:	beq	1313c <__assert_fail@plt+0x21f8>
   1306c:	ldr	r7, [r6, #4]
   13070:	cmp	r7, #0
   13074:	beq	13514 <__assert_fail@plt+0x25d0>
   13078:	ldr	r3, [r7]
   1307c:	cmp	r3, #4
   13080:	ldrls	pc, [pc, r3, lsl #2]
   13084:	b	1305c <__assert_fail@plt+0x2118>
   13088:	andeq	r2, r1, r8, lsl pc
   1308c:	andeq	r3, r1, r8
   13090:	muleq	r1, ip, r0
   13094:	andeq	r2, r1, r8, lsl pc
   13098:	andeq	r3, r1, r8, ror r2
   1309c:	ldr	r8, [r7, #8]
   130a0:	mvn	r3, #0
   130a4:	mvn	r2, #0
   130a8:	cmp	r5, r3
   130ac:	cmpeq	r4, r2
   130b0:	beq	12f90 <__assert_fail@plt+0x204c>
   130b4:	uxtb	r9, r4
   130b8:	cmp	r8, #11
   130bc:	ldrls	pc, [pc, r8, lsl #2]
   130c0:	b	1305c <__assert_fail@plt+0x2118>
   130c4:	andeq	r3, r1, r0, lsr #5
   130c8:	strdeq	r3, [r1], -r4
   130cc:	ldrdeq	r3, [r1], -ip
   130d0:	andeq	r3, r1, r4, asr #7
   130d4:	andeq	r3, r1, ip, lsr #7
   130d8:	andeq	r3, r1, ip, ror #8
   130dc:	andeq	r3, r1, r4, lsl r1
   130e0:	andeq	r3, r1, r4, asr r4
   130e4:	andeq	r3, r1, ip, lsr r4
   130e8:	andeq	r3, r1, r4, lsr #8
   130ec:	andeq	r3, r1, r8, lsl #9
   130f0:	andeq	r3, r1, ip, lsl #8
   130f4:	mvn	r3, #0
   130f8:	cmp	r5, r3
   130fc:	mvn	r2, #0
   13100:	mov	r3, #0
   13104:	cmpeq	r4, r2
   13108:	str	r3, [r1]
   1310c:	beq	12f90 <__assert_fail@plt+0x204c>
   13110:	uxtb	r9, r4
   13114:	bl	10e54 <__ctype_b_loc@plt>
   13118:	lsl	r9, r9, #1
   1311c:	mov	r8, #6
   13120:	ldr	ip, [r0]
   13124:	ldrh	r3, [ip, r9]
   13128:	and	r3, r3, #512	; 0x200
   1312c:	b	132b4 <__assert_fail@plt+0x2370>
   13130:	ldrb	r0, [r7, #8]
   13134:	mov	r1, #0
   13138:	b	13024 <__assert_fail@plt+0x20e0>
   1313c:	ldr	r1, [r0]
   13140:	mvn	r2, #0
   13144:	mov	r4, r2
   13148:	ldr	r7, [r1, #4]
   1314c:	mov	r5, r2
   13150:	str	r2, [r0, #8]
   13154:	str	r7, [r0, #4]
   13158:	str	r2, [r6, #12]
   1315c:	b	13070 <__assert_fail@plt+0x212c>
   13160:	bl	10e54 <__ctype_b_loc@plt>
   13164:	ldr	r3, [r0]
   13168:	ldrh	r3, [r3, r9]
   1316c:	and	r3, r3, #4096	; 0x1000
   13170:	cmp	r3, #0
   13174:	bne	134bc <__assert_fail@plt+0x2578>
   13178:	add	r4, r4, #1
   1317c:	cmp	r4, #256	; 0x100
   13180:	add	r9, r9, #2
   13184:	bne	12f9c <__assert_fail@plt+0x2058>
   13188:	ldr	r3, [pc, #944]	; 13540 <__assert_fail@plt+0x25fc>
   1318c:	ldr	r2, [pc, #944]	; 13544 <__assert_fail@plt+0x2600>
   13190:	ldr	r1, [pc, #944]	; 13548 <__assert_fail@plt+0x2604>
   13194:	ldr	r0, [pc, #944]	; 1354c <__assert_fail@plt+0x2608>
   13198:	bl	10f44 <__assert_fail@plt>
   1319c:	bl	10e54 <__ctype_b_loc@plt>
   131a0:	ldr	r3, [r0]
   131a4:	ldrh	r3, [r3, r9]
   131a8:	and	r3, r3, #256	; 0x100
   131ac:	b	13170 <__assert_fail@plt+0x222c>
   131b0:	bl	10e54 <__ctype_b_loc@plt>
   131b4:	ldr	r3, [r0]
   131b8:	ldrh	r3, [r3, r9]
   131bc:	and	r3, r3, #8192	; 0x2000
   131c0:	b	13170 <__assert_fail@plt+0x222c>
   131c4:	bl	10e54 <__ctype_b_loc@plt>
   131c8:	ldr	r3, [r0]
   131cc:	ldrh	r3, [r3, r9]
   131d0:	and	r3, r3, #4
   131d4:	b	13170 <__assert_fail@plt+0x222c>
   131d8:	bl	10e54 <__ctype_b_loc@plt>
   131dc:	ldr	r3, [r0]
   131e0:	ldrh	r3, [r3, r9]
   131e4:	and	r3, r3, #16384	; 0x4000
   131e8:	b	13170 <__assert_fail@plt+0x222c>
   131ec:	bl	10e54 <__ctype_b_loc@plt>
   131f0:	ldr	r3, [r0]
   131f4:	ldrh	r3, [r3, r9]
   131f8:	and	r3, r3, #512	; 0x200
   131fc:	b	13170 <__assert_fail@plt+0x222c>
   13200:	bl	10e54 <__ctype_b_loc@plt>
   13204:	ldr	r3, [r0]
   13208:	ldrh	r3, [r3, r9]
   1320c:	and	r3, r3, r5
   13210:	b	13170 <__assert_fail@plt+0x222c>
   13214:	bl	10e54 <__ctype_b_loc@plt>
   13218:	ldr	r3, [r0]
   1321c:	ldrh	r3, [r3, r9]
   13220:	and	r3, r3, #2048	; 0x800
   13224:	b	13170 <__assert_fail@plt+0x222c>
   13228:	bl	10e54 <__ctype_b_loc@plt>
   1322c:	ldr	r3, [r0]
   13230:	ldrh	r3, [r3, r9]
   13234:	and	r3, r3, #2
   13238:	b	13170 <__assert_fail@plt+0x222c>
   1323c:	bl	10e54 <__ctype_b_loc@plt>
   13240:	ldr	r3, [r0]
   13244:	ldrh	r3, [r3, r9]
   13248:	and	r3, r3, #1
   1324c:	b	13170 <__assert_fail@plt+0x222c>
   13250:	bl	10e54 <__ctype_b_loc@plt>
   13254:	ldr	r3, [r0]
   13258:	ldrh	r3, [r3, r9]
   1325c:	and	r3, r3, #1024	; 0x400
   13260:	b	13170 <__assert_fail@plt+0x222c>
   13264:	bl	10e54 <__ctype_b_loc@plt>
   13268:	ldr	r3, [r0]
   1326c:	ldrh	r3, [r3, r9]
   13270:	and	r3, r3, #8
   13274:	b	13170 <__assert_fail@plt+0x222c>
   13278:	ldrd	r2, [r7, #16]
   1327c:	orrs	r1, r2, r3
   13280:	bne	134e0 <__assert_fail@plt+0x259c>
   13284:	ldr	r1, [r7, #4]
   13288:	mvn	r2, #0
   1328c:	mov	r4, r2
   13290:	stmib	r6, {r1, r2}
   13294:	mov	r5, r2
   13298:	str	r2, [r6, #12]
   1329c:	b	1306c <__assert_fail@plt+0x2128>
   132a0:	bl	10e54 <__ctype_b_loc@plt>
   132a4:	lsl	r9, r9, #1
   132a8:	ldr	ip, [r0]
   132ac:	ldrh	r3, [ip, r9]
   132b0:	and	r3, r3, #8
   132b4:	cmp	r3, #0
   132b8:	beq	13528 <__assert_fail@plt+0x25e4>
   132bc:	add	r2, r4, #1
   132c0:	cmp	r2, #255	; 0xff
   132c4:	mov	r0, r4
   132c8:	bgt	1303c <__assert_fail@plt+0x20f8>
   132cc:	ldr	lr, [pc, #616]	; 1353c <__assert_fail@plt+0x25f8>
   132d0:	sub	r3, r8, #1
   132d4:	uxtb	r1, r2
   132d8:	lsl	r1, r1, #1
   132dc:	cmp	r3, #10
   132e0:	ldrls	pc, [pc, r3, lsl #2]
   132e4:	b	133a0 <__assert_fail@plt+0x245c>
   132e8:	muleq	r1, r4, r3
   132ec:	andeq	r3, r1, r8, lsl #7
   132f0:	andeq	r3, r1, ip, ror r3
   132f4:	andeq	r3, r1, r0, ror r3
   132f8:	andeq	r3, r1, r4, ror #6
   132fc:	andeq	r3, r1, r8, asr r3
   13300:	andeq	r3, r1, ip, asr #6
   13304:	andeq	r3, r1, r0, asr #6
   13308:	andeq	r3, r1, r4, lsr r3
   1330c:	andeq	r3, r1, r4, lsl r3
   13310:	andeq	r3, r1, r4, lsr #9
   13314:	ldrh	r1, [ip, r1]
   13318:	and	r1, r1, #256	; 0x100
   1331c:	cmp	r1, #0
   13320:	bne	134b0 <__assert_fail@plt+0x256c>
   13324:	add	r2, r2, #1
   13328:	cmp	r2, #256	; 0x100
   1332c:	bne	132d4 <__assert_fail@plt+0x2390>
   13330:	b	1303c <__assert_fail@plt+0x20f8>
   13334:	ldrh	r1, [ip, r1]
   13338:	and	r1, r1, #8192	; 0x2000
   1333c:	b	1331c <__assert_fail@plt+0x23d8>
   13340:	ldrh	r1, [ip, r1]
   13344:	and	r1, r1, #4
   13348:	b	1331c <__assert_fail@plt+0x23d8>
   1334c:	ldrh	r1, [ip, r1]
   13350:	and	r1, r1, #16384	; 0x4000
   13354:	b	1331c <__assert_fail@plt+0x23d8>
   13358:	ldrh	r1, [ip, r1]
   1335c:	and	r1, r1, #512	; 0x200
   13360:	b	1331c <__assert_fail@plt+0x23d8>
   13364:	ldrh	r1, [ip, r1]
   13368:	and	r1, r1, lr
   1336c:	b	1331c <__assert_fail@plt+0x23d8>
   13370:	ldrh	r1, [ip, r1]
   13374:	and	r1, r1, #2048	; 0x800
   13378:	b	1331c <__assert_fail@plt+0x23d8>
   1337c:	ldrh	r1, [ip, r1]
   13380:	and	r1, r1, #2
   13384:	b	1331c <__assert_fail@plt+0x23d8>
   13388:	ldrh	r1, [ip, r1]
   1338c:	and	r1, r1, #1
   13390:	b	1331c <__assert_fail@plt+0x23d8>
   13394:	ldrh	r1, [ip, r1]
   13398:	and	r1, r1, #1024	; 0x400
   1339c:	b	1331c <__assert_fail@plt+0x23d8>
   133a0:	ldrh	r1, [ip, r1]
   133a4:	and	r1, r1, #8
   133a8:	b	1331c <__assert_fail@plt+0x23d8>
   133ac:	bl	10e54 <__ctype_b_loc@plt>
   133b0:	lsl	r9, r9, #1
   133b4:	ldr	ip, [r0]
   133b8:	ldrh	r3, [ip, r9]
   133bc:	and	r3, r3, #2048	; 0x800
   133c0:	b	132b4 <__assert_fail@plt+0x2370>
   133c4:	bl	10e54 <__ctype_b_loc@plt>
   133c8:	lsl	r9, r9, #1
   133cc:	ldr	ip, [r0]
   133d0:	ldrh	r3, [ip, r9]
   133d4:	and	r3, r3, #2
   133d8:	b	132b4 <__assert_fail@plt+0x2370>
   133dc:	bl	10e54 <__ctype_b_loc@plt>
   133e0:	lsl	r9, r9, #1
   133e4:	ldr	ip, [r0]
   133e8:	ldrh	r3, [ip, r9]
   133ec:	and	r3, r3, #1
   133f0:	b	132b4 <__assert_fail@plt+0x2370>
   133f4:	bl	10e54 <__ctype_b_loc@plt>
   133f8:	lsl	r9, r9, #1
   133fc:	ldr	ip, [r0]
   13400:	ldrh	r3, [ip, r9]
   13404:	and	r3, r3, #1024	; 0x400
   13408:	b	132b4 <__assert_fail@plt+0x2370>
   1340c:	bl	10e54 <__ctype_b_loc@plt>
   13410:	lsl	r9, r9, #1
   13414:	ldr	ip, [r0]
   13418:	ldrh	r3, [ip, r9]
   1341c:	and	r3, r3, #4096	; 0x1000
   13420:	b	132b4 <__assert_fail@plt+0x2370>
   13424:	bl	10e54 <__ctype_b_loc@plt>
   13428:	lsl	r9, r9, #1
   1342c:	ldr	ip, [r0]
   13430:	ldrh	r3, [ip, r9]
   13434:	and	r3, r3, #8192	; 0x2000
   13438:	b	132b4 <__assert_fail@plt+0x2370>
   1343c:	bl	10e54 <__ctype_b_loc@plt>
   13440:	lsl	r9, r9, #1
   13444:	ldr	ip, [r0]
   13448:	ldrh	r3, [ip, r9]
   1344c:	and	r3, r3, #4
   13450:	b	132b4 <__assert_fail@plt+0x2370>
   13454:	bl	10e54 <__ctype_b_loc@plt>
   13458:	lsl	r9, r9, #1
   1345c:	ldr	ip, [r0]
   13460:	ldrh	r3, [ip, r9]
   13464:	and	r3, r3, #16384	; 0x4000
   13468:	b	132b4 <__assert_fail@plt+0x2370>
   1346c:	bl	10e54 <__ctype_b_loc@plt>
   13470:	lsl	r9, r9, #1
   13474:	ldr	ip, [r0]
   13478:	ldrh	r3, [ip, r9]
   1347c:	and	r3, r3, #32768	; 0x8000
   13480:	b	132b4 <__assert_fail@plt+0x2370>
   13484:	uxtb	r9, r4
   13488:	bl	10e54 <__ctype_b_loc@plt>
   1348c:	lsl	r9, r9, #1
   13490:	mov	r8, #10
   13494:	ldr	ip, [r0]
   13498:	ldrh	r3, [ip, r9]
   1349c:	and	r3, r3, #256	; 0x100
   134a0:	b	132b4 <__assert_fail@plt+0x2370>
   134a4:	ldrh	r1, [ip, r1]
   134a8:	and	r1, r1, #4096	; 0x1000
   134ac:	b	1331c <__assert_fail@plt+0x23d8>
   134b0:	asr	r3, r2, #31
   134b4:	strd	r2, [r6, #8]
   134b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   134bc:	asr	r5, r4, #31
   134c0:	strd	r4, [r6, #8]
   134c4:	b	130b4 <__assert_fail@plt+0x2170>
   134c8:	mov	r3, #2
   134cc:	str	r3, [r1]
   134d0:	mvn	r0, #0
   134d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   134d8:	mov	r0, #2
   134dc:	str	r0, [r1]
   134e0:	mvn	r1, #0
   134e4:	mvn	r0, #0
   134e8:	cmp	r5, r1
   134ec:	cmpeq	r4, r0
   134f0:	beq	1351c <__assert_fail@plt+0x25d8>
   134f4:	adds	r4, r4, #1
   134f8:	adc	r5, r5, #0
   134fc:	cmp	r5, r3
   13500:	cmpeq	r4, r2
   13504:	strd	r4, [r6, #8]
   13508:	ldrb	r0, [r7, #8]
   1350c:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   13510:	b	1303c <__assert_fail@plt+0x20f8>
   13514:	mvn	r0, #0
   13518:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1351c:	mov	r4, #1
   13520:	mov	r5, #0
   13524:	b	134fc <__assert_fail@plt+0x25b8>
   13528:	ldr	r3, [pc, #16]	; 13540 <__assert_fail@plt+0x25fc>
   1352c:	ldr	r2, [pc, #28]	; 13550 <__assert_fail@plt+0x260c>
   13530:	ldr	r1, [pc, #16]	; 13548 <__assert_fail@plt+0x2604>
   13534:	ldr	r0, [pc, #24]	; 13554 <__assert_fail@plt+0x2610>
   13538:	bl	10f44 <__assert_fail@plt>
   1353c:			; <UNDEFINED> instruction: 0xffff8000
   13540:	andeq	sl, r1, r8, lsl r4
   13544:	andeq	r0, r0, r7, lsr r4
   13548:	andeq	sl, r1, r0, lsr #10
   1354c:	andeq	sl, r1, r4, lsl #15
   13550:	andeq	r0, r0, sl, lsr r4
   13554:	andeq	sl, r1, r0, asr r7
   13558:	push	{r4, r5, r6, r7, r8, lr}
   1355c:	mvn	r6, #1
   13560:	mvn	r7, #0
   13564:	mov	r5, r0
   13568:	strd	r6, [r0, #8]
   1356c:	mov	r8, r1
   13570:	mov	r4, r2
   13574:	mov	r6, #0
   13578:	mov	r7, #1
   1357c:	b	13584 <__assert_fail@plt+0x2640>
   13580:	strb	r7, [r4, r0]
   13584:	mov	r1, r6
   13588:	mov	r0, r5
   1358c:	bl	12eb8 <__assert_fail@plt+0x1f74>
   13590:	cmn	r0, #1
   13594:	bne	13580 <__assert_fail@plt+0x263c>
   13598:	cmp	r8, #0
   1359c:	popeq	{r4, r5, r6, r7, r8, pc}
   135a0:	sub	r3, r4, #1
   135a4:	add	r1, r4, #255	; 0xff
   135a8:	ldrb	r2, [r3, #1]
   135ac:	eor	r2, r2, #1
   135b0:	strb	r2, [r3, #1]!
   135b4:	cmp	r3, r1
   135b8:	bne	135a8 <__assert_fail@plt+0x2664>
   135bc:	pop	{r4, r5, r6, r7, r8, pc}
   135c0:	subs	r6, r0, #0
   135c4:	push	{r7, lr}
   135c8:	sub	sp, sp, #56	; 0x38
   135cc:	beq	13608 <__assert_fail@plt+0x26c4>
   135d0:	ldr	r3, [pc, #708]	; 1389c <__assert_fail@plt+0x2958>
   135d4:	mov	r2, #5
   135d8:	ldr	r1, [pc, #704]	; 138a0 <__assert_fail@plt+0x295c>
   135dc:	mov	r0, #0
   135e0:	ldr	r4, [r3]
   135e4:	bl	10d88 <dcgettext@plt>
   135e8:	ldr	r3, [pc, #692]	; 138a4 <__assert_fail@plt+0x2960>
   135ec:	mov	r1, #1
   135f0:	ldr	r3, [r3]
   135f4:	mov	r2, r0
   135f8:	mov	r0, r4
   135fc:	bl	10ecc <__fprintf_chk@plt>
   13600:	mov	r0, r6
   13604:	bl	10e60 <exit@plt>
   13608:	mov	r2, #5
   1360c:	ldr	r1, [pc, #660]	; 138a8 <__assert_fail@plt+0x2964>
   13610:	bl	10d88 <dcgettext@plt>
   13614:	ldr	r3, [pc, #648]	; 138a4 <__assert_fail@plt+0x2960>
   13618:	ldr	r7, [pc, #652]	; 138ac <__assert_fail@plt+0x2968>
   1361c:	ldr	r4, [pc, #652]	; 138b0 <__assert_fail@plt+0x296c>
   13620:	ldr	r2, [r3]
   13624:	mov	r1, r0
   13628:	mov	r0, #1
   1362c:	bl	10eb4 <__printf_chk@plt>
   13630:	mov	r2, #5
   13634:	ldr	r1, [pc, #632]	; 138b4 <__assert_fail@plt+0x2970>
   13638:	mov	r0, r6
   1363c:	bl	10d88 <dcgettext@plt>
   13640:	ldr	r1, [r7]
   13644:	bl	10cd4 <fputs_unlocked@plt>
   13648:	mov	r2, #5
   1364c:	ldr	r1, [pc, #612]	; 138b8 <__assert_fail@plt+0x2974>
   13650:	mov	r0, r6
   13654:	bl	10d88 <dcgettext@plt>
   13658:	ldr	r1, [r7]
   1365c:	bl	10cd4 <fputs_unlocked@plt>
   13660:	mov	r2, #5
   13664:	ldr	r1, [pc, #592]	; 138bc <__assert_fail@plt+0x2978>
   13668:	mov	r0, r6
   1366c:	bl	10d88 <dcgettext@plt>
   13670:	ldr	r1, [r7]
   13674:	bl	10cd4 <fputs_unlocked@plt>
   13678:	mov	r2, #5
   1367c:	ldr	r1, [pc, #572]	; 138c0 <__assert_fail@plt+0x297c>
   13680:	mov	r0, r6
   13684:	bl	10d88 <dcgettext@plt>
   13688:	ldr	r1, [r7]
   1368c:	bl	10cd4 <fputs_unlocked@plt>
   13690:	mov	r2, #5
   13694:	ldr	r1, [pc, #552]	; 138c4 <__assert_fail@plt+0x2980>
   13698:	mov	r0, r6
   1369c:	bl	10d88 <dcgettext@plt>
   136a0:	ldr	r1, [r7]
   136a4:	bl	10cd4 <fputs_unlocked@plt>
   136a8:	mov	r2, #5
   136ac:	ldr	r1, [pc, #532]	; 138c8 <__assert_fail@plt+0x2984>
   136b0:	mov	r0, r6
   136b4:	bl	10d88 <dcgettext@plt>
   136b8:	ldr	r1, [r7]
   136bc:	bl	10cd4 <fputs_unlocked@plt>
   136c0:	mov	r2, #5
   136c4:	ldr	r1, [pc, #512]	; 138cc <__assert_fail@plt+0x2988>
   136c8:	mov	r0, r6
   136cc:	bl	10d88 <dcgettext@plt>
   136d0:	ldr	r1, [r7]
   136d4:	bl	10cd4 <fputs_unlocked@plt>
   136d8:	ldm	r4!, {r0, r1, r2, r3}
   136dc:	mov	lr, sp
   136e0:	stmia	lr!, {r0, r1, r2, r3}
   136e4:	ldm	r4!, {r0, r1, r2, r3}
   136e8:	ldr	ip, [sp]
   136ec:	stmia	lr!, {r0, r1, r2, r3}
   136f0:	cmp	ip, #0
   136f4:	ldm	r4!, {r0, r1, r2, r3}
   136f8:	stmia	lr!, {r0, r1, r2, r3}
   136fc:	ldm	r4, {r0, r1}
   13700:	moveq	r4, sp
   13704:	stm	lr, {r0, r1}
   13708:	beq	13738 <__assert_fail@plt+0x27f4>
   1370c:	ldr	r5, [pc, #444]	; 138d0 <__assert_fail@plt+0x298c>
   13710:	mov	r4, sp
   13714:	b	13724 <__assert_fail@plt+0x27e0>
   13718:	ldr	ip, [r4, #8]!
   1371c:	cmp	ip, #0
   13720:	beq	13738 <__assert_fail@plt+0x27f4>
   13724:	mov	r1, ip
   13728:	mov	r0, r5
   1372c:	bl	10cec <strcmp@plt>
   13730:	cmp	r0, #0
   13734:	bne	13718 <__assert_fail@plt+0x27d4>
   13738:	ldr	r4, [r4, #4]
   1373c:	mov	r2, #5
   13740:	cmp	r4, #0
   13744:	ldr	r1, [pc, #392]	; 138d4 <__assert_fail@plt+0x2990>
   13748:	beq	137f0 <__assert_fail@plt+0x28ac>
   1374c:	mov	r0, #0
   13750:	bl	10d88 <dcgettext@plt>
   13754:	ldr	r3, [pc, #380]	; 138d8 <__assert_fail@plt+0x2994>
   13758:	ldr	r2, [pc, #380]	; 138dc <__assert_fail@plt+0x2998>
   1375c:	mov	r1, r0
   13760:	mov	r0, #1
   13764:	bl	10eb4 <__printf_chk@plt>
   13768:	mov	r1, #0
   1376c:	mov	r0, #5
   13770:	bl	10ef0 <setlocale@plt>
   13774:	cmp	r0, #0
   13778:	ldreq	r5, [pc, #336]	; 138d0 <__assert_fail@plt+0x298c>
   1377c:	beq	13798 <__assert_fail@plt+0x2854>
   13780:	mov	r2, #3
   13784:	ldr	r1, [pc, #340]	; 138e0 <__assert_fail@plt+0x299c>
   13788:	bl	10f20 <strncmp@plt>
   1378c:	ldr	r5, [pc, #316]	; 138d0 <__assert_fail@plt+0x298c>
   13790:	cmp	r0, #0
   13794:	bne	13880 <__assert_fail@plt+0x293c>
   13798:	mov	r2, #5
   1379c:	ldr	r1, [pc, #320]	; 138e4 <__assert_fail@plt+0x29a0>
   137a0:	mov	r0, #0
   137a4:	bl	10d88 <dcgettext@plt>
   137a8:	ldr	r3, [pc, #288]	; 138d0 <__assert_fail@plt+0x298c>
   137ac:	ldr	r2, [pc, #292]	; 138d8 <__assert_fail@plt+0x2994>
   137b0:	mov	r1, r0
   137b4:	mov	r0, #1
   137b8:	bl	10eb4 <__printf_chk@plt>
   137bc:	mov	r2, #5
   137c0:	ldr	r1, [pc, #288]	; 138e8 <__assert_fail@plt+0x29a4>
   137c4:	mov	r0, #0
   137c8:	bl	10d88 <dcgettext@plt>
   137cc:	ldr	r2, [pc, #280]	; 138ec <__assert_fail@plt+0x29a8>
   137d0:	cmp	r4, r5
   137d4:	ldr	r3, [pc, #276]	; 138f0 <__assert_fail@plt+0x29ac>
   137d8:	movne	r3, r2
   137dc:	mov	r1, r0
   137e0:	mov	r2, r4
   137e4:	mov	r0, #1
   137e8:	bl	10eb4 <__printf_chk@plt>
   137ec:	b	13600 <__assert_fail@plt+0x26bc>
   137f0:	mov	r0, r4
   137f4:	bl	10d88 <dcgettext@plt>
   137f8:	ldr	r3, [pc, #216]	; 138d8 <__assert_fail@plt+0x2994>
   137fc:	ldr	r2, [pc, #216]	; 138dc <__assert_fail@plt+0x2998>
   13800:	mov	r1, r0
   13804:	mov	r0, #1
   13808:	bl	10eb4 <__printf_chk@plt>
   1380c:	mov	r1, r4
   13810:	mov	r0, #5
   13814:	bl	10ef0 <setlocale@plt>
   13818:	cmp	r0, #0
   1381c:	beq	13834 <__assert_fail@plt+0x28f0>
   13820:	mov	r2, #3
   13824:	ldr	r1, [pc, #180]	; 138e0 <__assert_fail@plt+0x299c>
   13828:	bl	10f20 <strncmp@plt>
   1382c:	cmp	r0, #0
   13830:	bne	13878 <__assert_fail@plt+0x2934>
   13834:	mov	r2, #5
   13838:	ldr	r1, [pc, #164]	; 138e4 <__assert_fail@plt+0x29a0>
   1383c:	mov	r0, #0
   13840:	bl	10d88 <dcgettext@plt>
   13844:	ldr	r3, [pc, #132]	; 138d0 <__assert_fail@plt+0x298c>
   13848:	ldr	r2, [pc, #136]	; 138d8 <__assert_fail@plt+0x2994>
   1384c:	mov	r4, r3
   13850:	mov	r1, r0
   13854:	mov	r0, #1
   13858:	bl	10eb4 <__printf_chk@plt>
   1385c:	ldr	r1, [pc, #132]	; 138e8 <__assert_fail@plt+0x29a4>
   13860:	mov	r2, #5
   13864:	mov	r0, #0
   13868:	bl	10d88 <dcgettext@plt>
   1386c:	ldr	r3, [pc, #124]	; 138f0 <__assert_fail@plt+0x29ac>
   13870:	mov	r1, r0
   13874:	b	137e0 <__assert_fail@plt+0x289c>
   13878:	ldr	r5, [pc, #80]	; 138d0 <__assert_fail@plt+0x298c>
   1387c:	mov	r4, r5
   13880:	mov	r2, #5
   13884:	ldr	r1, [pc, #104]	; 138f4 <__assert_fail@plt+0x29b0>
   13888:	mov	r0, #0
   1388c:	bl	10d88 <dcgettext@plt>
   13890:	ldr	r1, [r7]
   13894:	bl	10cd4 <fputs_unlocked@plt>
   13898:	b	13798 <__assert_fail@plt+0x2854>
   1389c:	andeq	ip, r2, r8, asr #2
   138a0:	muleq	r1, r4, r7
   138a4:	andeq	lr, r2, ip, ror #8
   138a8:			; <UNDEFINED> instruction: 0x0001a7bc
   138ac:	andeq	ip, r2, r4, asr r1
   138b0:	andeq	sl, r1, r4, lsr #8
   138b4:	andeq	sl, r1, r0, ror #15
   138b8:	ldrdeq	sl, [r1], -r0
   138bc:	andeq	sl, r1, r0, lsl #20
   138c0:	andeq	sl, r1, r8, lsr sl
   138c4:			; <UNDEFINED> instruction: 0x0001abb0
   138c8:	andeq	sl, r1, ip, asr sp
   138cc:	strdeq	sl, [r1], -r8
   138d0:	muleq	r1, r0, r7
   138d4:	ldrdeq	fp, [r1], -r0
   138d8:	andeq	fp, r1, r8, ror #1
   138dc:	andeq	fp, r1, r0, lsl r1
   138e0:	andeq	fp, r1, r0, lsr #2
   138e4:	andeq	fp, r1, ip, ror #2
   138e8:	andeq	fp, r1, r8, lsl #3
   138ec:	andeq	sl, r1, ip, lsr #23
   138f0:	strdeq	fp, [r1], -r8
   138f4:	andeq	fp, r1, r4, lsr #2
   138f8:	ldr	r3, [pc, #4]	; 13904 <__assert_fail@plt+0x29c0>
   138fc:	str	r0, [r3]
   13900:	bx	lr
   13904:	andeq	lr, r2, r4, ror #8
   13908:	ldr	r3, [pc, #4]	; 13914 <__assert_fail@plt+0x29d0>
   1390c:	strb	r0, [r3, #4]
   13910:	bx	lr
   13914:	andeq	lr, r2, r4, ror #8
   13918:	ldr	r3, [pc, #192]	; 139e0 <__assert_fail@plt+0x2a9c>
   1391c:	push	{r4, r5, r6, lr}
   13920:	sub	sp, sp, #8
   13924:	ldr	r0, [r3]
   13928:	bl	19aac <__assert_fail@plt+0x8b68>
   1392c:	cmp	r0, #0
   13930:	beq	13954 <__assert_fail@plt+0x2a10>
   13934:	ldr	r4, [pc, #168]	; 139e4 <__assert_fail@plt+0x2aa0>
   13938:	ldrb	r3, [r4, #4]
   1393c:	cmp	r3, #0
   13940:	beq	13970 <__assert_fail@plt+0x2a2c>
   13944:	bl	10e84 <__errno_location@plt>
   13948:	ldr	r3, [r0]
   1394c:	cmp	r3, #32
   13950:	bne	13970 <__assert_fail@plt+0x2a2c>
   13954:	ldr	r3, [pc, #140]	; 139e8 <__assert_fail@plt+0x2aa4>
   13958:	ldr	r0, [r3]
   1395c:	bl	19aac <__assert_fail@plt+0x8b68>
   13960:	cmp	r0, #0
   13964:	bne	139b8 <__assert_fail@plt+0x2a74>
   13968:	add	sp, sp, #8
   1396c:	pop	{r4, r5, r6, pc}
   13970:	mov	r2, #5
   13974:	ldr	r1, [pc, #112]	; 139ec <__assert_fail@plt+0x2aa8>
   13978:	mov	r0, #0
   1397c:	bl	10d88 <dcgettext@plt>
   13980:	ldr	r4, [r4]
   13984:	cmp	r4, #0
   13988:	mov	r5, r0
   1398c:	beq	139c4 <__assert_fail@plt+0x2a80>
   13990:	bl	10e84 <__errno_location@plt>
   13994:	ldr	r6, [r0]
   13998:	mov	r0, r4
   1399c:	bl	16700 <__assert_fail@plt+0x57bc>
   139a0:	mov	r1, r6
   139a4:	str	r5, [sp]
   139a8:	ldr	r2, [pc, #64]	; 139f0 <__assert_fail@plt+0x2aac>
   139ac:	mov	r3, r0
   139b0:	mov	r0, #0
   139b4:	bl	10df4 <error@plt>
   139b8:	ldr	r3, [pc, #52]	; 139f4 <__assert_fail@plt+0x2ab0>
   139bc:	ldr	r0, [r3]
   139c0:	bl	10d28 <_exit@plt>
   139c4:	bl	10e84 <__errno_location@plt>
   139c8:	mov	r3, r5
   139cc:	ldr	r2, [pc, #36]	; 139f8 <__assert_fail@plt+0x2ab4>
   139d0:	ldr	r1, [r0]
   139d4:	mov	r0, r4
   139d8:	bl	10df4 <error@plt>
   139dc:	b	139b8 <__assert_fail@plt+0x2a74>
   139e0:	andeq	ip, r2, r4, asr r1
   139e4:	andeq	lr, r2, r4, ror #8
   139e8:	andeq	ip, r2, r8, asr #2
   139ec:	andeq	sl, r1, r8, lsr r5
   139f0:	andeq	fp, r1, r0, lsl r7
   139f4:	strdeq	ip, [r2], -r4
   139f8:	andeq	fp, r1, r4, lsl r7
   139fc:	push	{r4, r5}
   13a00:	pop	{r4, r5}
   13a04:	b	10cf8 <posix_fadvise64@plt>
   13a08:	cmp	r0, #0
   13a0c:	bxeq	lr
   13a10:	push	{r4, lr}
   13a14:	sub	sp, sp, #16
   13a18:	mov	r4, r1
   13a1c:	bl	10ec0 <fileno@plt>
   13a20:	mov	r2, #0
   13a24:	mov	r3, #0
   13a28:	str	r4, [sp, #8]
   13a2c:	strd	r2, [sp]
   13a30:	bl	10cf8 <posix_fadvise64@plt>
   13a34:	add	sp, sp, #16
   13a38:	pop	{r4, pc}
   13a3c:	push	{r4, r5, lr}
   13a40:	sub	sp, sp, #12
   13a44:	mov	r5, r0
   13a48:	bl	10e84 <__errno_location@plt>
   13a4c:	mov	r2, #0
   13a50:	mov	r4, r0
   13a54:	ldr	r3, [r0]
   13a58:	str	r2, [r4]
   13a5c:	mov	r0, r5
   13a60:	str	r3, [sp]
   13a64:	str	r3, [sp, #4]
   13a68:	bl	10d1c <free@plt>
   13a6c:	ldr	r3, [r4]
   13a70:	add	r2, sp, #8
   13a74:	cmp	r3, #0
   13a78:	moveq	r3, #4
   13a7c:	movne	r3, #0
   13a80:	add	r3, r2, r3
   13a84:	ldr	r3, [r3, #-8]
   13a88:	str	r3, [r4]
   13a8c:	add	sp, sp, #12
   13a90:	pop	{r4, r5, pc}
   13a94:	push	{r4, r5, r6, lr}
   13a98:	subs	r4, r0, #0
   13a9c:	beq	13b10 <__assert_fail@plt+0x2bcc>
   13aa0:	mov	r1, #47	; 0x2f
   13aa4:	bl	10efc <strrchr@plt>
   13aa8:	subs	r5, r0, #0
   13aac:	beq	13afc <__assert_fail@plt+0x2bb8>
   13ab0:	add	r6, r5, #1
   13ab4:	sub	r3, r6, r4
   13ab8:	cmp	r3, #6
   13abc:	ble	13afc <__assert_fail@plt+0x2bb8>
   13ac0:	mov	r2, #7
   13ac4:	ldr	r1, [pc, #96]	; 13b2c <__assert_fail@plt+0x2be8>
   13ac8:	sub	r0, r5, #6
   13acc:	bl	10f20 <strncmp@plt>
   13ad0:	cmp	r0, #0
   13ad4:	bne	13afc <__assert_fail@plt+0x2bb8>
   13ad8:	mov	r2, #3
   13adc:	ldr	r1, [pc, #76]	; 13b30 <__assert_fail@plt+0x2bec>
   13ae0:	mov	r0, r6
   13ae4:	bl	10f20 <strncmp@plt>
   13ae8:	cmp	r0, #0
   13aec:	movne	r4, r6
   13af0:	ldreq	r3, [pc, #60]	; 13b34 <__assert_fail@plt+0x2bf0>
   13af4:	addeq	r4, r5, #4
   13af8:	streq	r4, [r3]
   13afc:	ldr	r2, [pc, #52]	; 13b38 <__assert_fail@plt+0x2bf4>
   13b00:	ldr	r3, [pc, #52]	; 13b3c <__assert_fail@plt+0x2bf8>
   13b04:	str	r4, [r2]
   13b08:	str	r4, [r3]
   13b0c:	pop	{r4, r5, r6, pc}
   13b10:	ldr	r3, [pc, #40]	; 13b40 <__assert_fail@plt+0x2bfc>
   13b14:	mov	r2, #55	; 0x37
   13b18:	mov	r1, #1
   13b1c:	ldr	r3, [r3]
   13b20:	ldr	r0, [pc, #28]	; 13b44 <__assert_fail@plt+0x2c00>
   13b24:	bl	10db8 <fwrite@plt>
   13b28:	bl	10f2c <abort@plt>
   13b2c:	andeq	fp, r1, r0, asr r7
   13b30:	andeq	fp, r1, r8, asr r7
   13b34:	andeq	ip, r2, r8, lsr r1
   13b38:	andeq	lr, r2, ip, ror #8
   13b3c:	andeq	ip, r2, ip, lsr r1
   13b40:	andeq	ip, r2, r8, asr #2
   13b44:	andeq	fp, r1, r8, lsl r7
   13b48:	push	{r4, r5, r6, lr}
   13b4c:	mov	r4, r0
   13b50:	mov	r5, r1
   13b54:	bl	19cc8 <__assert_fail@plt+0x8d84>
   13b58:	ldrb	r3, [r0]
   13b5c:	bic	r3, r3, #32
   13b60:	cmp	r3, #85	; 0x55
   13b64:	bne	13bc4 <__assert_fail@plt+0x2c80>
   13b68:	ldrb	r3, [r0, #1]
   13b6c:	bic	r3, r3, #32
   13b70:	cmp	r3, #84	; 0x54
   13b74:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13b78:	ldrb	r3, [r0, #2]
   13b7c:	bic	r3, r3, #32
   13b80:	cmp	r3, #70	; 0x46
   13b84:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13b88:	ldrb	r3, [r0, #3]
   13b8c:	cmp	r3, #45	; 0x2d
   13b90:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13b94:	ldrb	r3, [r0, #4]
   13b98:	cmp	r3, #56	; 0x38
   13b9c:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13ba0:	ldrb	r3, [r0, #5]
   13ba4:	cmp	r3, #0
   13ba8:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13bac:	ldrb	r2, [r4]
   13bb0:	ldr	r3, [pc, #152]	; 13c50 <__assert_fail@plt+0x2d0c>
   13bb4:	ldr	r0, [pc, #152]	; 13c54 <__assert_fail@plt+0x2d10>
   13bb8:	cmp	r2, #96	; 0x60
   13bbc:	movne	r0, r3
   13bc0:	pop	{r4, r5, r6, pc}
   13bc4:	cmp	r3, #71	; 0x47
   13bc8:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13bcc:	ldrb	r3, [r0, #1]
   13bd0:	bic	r3, r3, #32
   13bd4:	cmp	r3, #66	; 0x42
   13bd8:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13bdc:	ldrb	r3, [r0, #2]
   13be0:	cmp	r3, #49	; 0x31
   13be4:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13be8:	ldrb	r3, [r0, #3]
   13bec:	cmp	r3, #56	; 0x38
   13bf0:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13bf4:	ldrb	r3, [r0, #4]
   13bf8:	cmp	r3, #48	; 0x30
   13bfc:	beq	13c14 <__assert_fail@plt+0x2cd0>
   13c00:	ldr	r3, [pc, #80]	; 13c58 <__assert_fail@plt+0x2d14>
   13c04:	cmp	r5, #9
   13c08:	ldr	r0, [pc, #76]	; 13c5c <__assert_fail@plt+0x2d18>
   13c0c:	movne	r0, r3
   13c10:	pop	{r4, r5, r6, pc}
   13c14:	ldrb	r3, [r0, #5]
   13c18:	cmp	r3, #51	; 0x33
   13c1c:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13c20:	ldrb	r3, [r0, #6]
   13c24:	cmp	r3, #48	; 0x30
   13c28:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13c2c:	ldrb	r3, [r0, #7]
   13c30:	cmp	r3, #0
   13c34:	bne	13c00 <__assert_fail@plt+0x2cbc>
   13c38:	ldrb	r2, [r4]
   13c3c:	ldr	r3, [pc, #28]	; 13c60 <__assert_fail@plt+0x2d1c>
   13c40:	ldr	r0, [pc, #28]	; 13c64 <__assert_fail@plt+0x2d20>
   13c44:	cmp	r2, #96	; 0x60
   13c48:	movne	r0, r3
   13c4c:	pop	{r4, r5, r6, pc}
   13c50:			; <UNDEFINED> instruction: 0x0001b7b4
   13c54:			; <UNDEFINED> instruction: 0x0001b7b0
   13c58:	andeq	fp, r1, r4, asr #15
   13c5c:	andeq	fp, r1, r0, asr #15
   13c60:			; <UNDEFINED> instruction: 0x0001b7bc
   13c64:			; <UNDEFINED> instruction: 0x0001b7b8
   13c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c6c:	sub	sp, sp, #140	; 0x8c
   13c70:	mov	r9, r1
   13c74:	str	r3, [sp, #24]
   13c78:	mov	r3, #1
   13c7c:	mov	sl, r0
   13c80:	str	r2, [sp, #44]	; 0x2c
   13c84:	str	r3, [sp, #28]
   13c88:	bl	10dd0 <__ctype_get_mb_cur_max@plt>
   13c8c:	ldr	r3, [sp, #180]	; 0xb4
   13c90:	mov	fp, r9
   13c94:	mov	r9, sl
   13c98:	lsr	r3, r3, #1
   13c9c:	and	r3, r3, #1
   13ca0:	str	r3, [sp, #40]	; 0x28
   13ca4:	ldr	r3, [sp, #180]	; 0xb4
   13ca8:	mov	r2, #0
   13cac:	and	r3, r3, #4
   13cb0:	str	r3, [sp, #100]	; 0x64
   13cb4:	ldr	r3, [sp, #180]	; 0xb4
   13cb8:	str	r2, [sp, #76]	; 0x4c
   13cbc:	and	r3, r3, #1
   13cc0:	str	r3, [sp, #96]	; 0x60
   13cc4:	str	r2, [sp, #36]	; 0x24
   13cc8:	str	r2, [sp, #56]	; 0x38
   13ccc:	str	r2, [sp, #68]	; 0x44
   13cd0:	str	r2, [sp, #72]	; 0x48
   13cd4:	str	r2, [sp, #84]	; 0x54
   13cd8:	str	r0, [sp, #80]	; 0x50
   13cdc:	ldr	r3, [sp, #176]	; 0xb0
   13ce0:	cmp	r3, #10
   13ce4:	ldrls	pc, [pc, r3, lsl #2]
   13ce8:	b	14ec0 <__assert_fail@plt+0x3f7c>
   13cec:	andeq	r3, r1, r8, lsl sp
   13cf0:	andeq	r4, r1, r8, lsr r0
   13cf4:	muleq	r1, r0, r1
   13cf8:	andeq	r4, r1, ip, rrx
   13cfc:	andeq	r4, r1, r4, ror #3
   13d00:	andeq	r4, r1, r4, asr #3
   13d04:	andeq	r4, r1, ip, lsl #1
   13d08:	strheq	r4, [r1], -r0
   13d0c:	ldrdeq	r4, [r1], -r8
   13d10:	ldrdeq	r4, [r1], -r8
   13d14:	ldrdeq	r4, [r1], -r8
   13d18:	mov	r3, #0
   13d1c:	ldr	r1, [sp, #56]	; 0x38
   13d20:	ldr	r2, [sp, #176]	; 0xb0
   13d24:	ldr	lr, [sp, #176]	; 0xb0
   13d28:	mov	r8, r3
   13d2c:	mov	ip, r3
   13d30:	str	r3, [sp, #40]	; 0x28
   13d34:	mov	r3, r1
   13d38:	cmp	r2, #2
   13d3c:	moveq	r3, #0
   13d40:	andne	r3, r3, #1
   13d44:	mov	r0, r3
   13d48:	str	r3, [sp, #92]	; 0x5c
   13d4c:	ldr	r3, [sp, #68]	; 0x44
   13d50:	sub	lr, lr, #2
   13d54:	adds	r2, r3, #0
   13d58:	movne	r2, #1
   13d5c:	and	r3, r1, ip
   13d60:	and	r3, r2, r3
   13d64:	clz	lr, lr
   13d68:	str	r3, [sp, #88]	; 0x58
   13d6c:	lsr	lr, lr, #5
   13d70:	mov	r3, ip
   13d74:	and	r3, r3, lr
   13d78:	mov	sl, #0
   13d7c:	and	r0, r2, r0
   13d80:	str	r3, [sp, #64]	; 0x40
   13d84:	eor	r3, r1, #1
   13d88:	str	lr, [sp, #52]	; 0x34
   13d8c:	str	r0, [sp, #48]	; 0x30
   13d90:	str	r3, [sp, #60]	; 0x3c
   13d94:	ldr	r3, [sp, #24]
   13d98:	cmn	r3, #1
   13d9c:	beq	142cc <__assert_fail@plt+0x3388>
   13da0:	subs	r7, r3, sl
   13da4:	movne	r7, #1
   13da8:	cmp	r7, #0
   13dac:	beq	142e4 <__assert_fail@plt+0x33a0>
   13db0:	ldr	r3, [sp, #48]	; 0x30
   13db4:	cmp	r3, #0
   13db8:	beq	14650 <__assert_fail@plt+0x370c>
   13dbc:	ldr	r2, [sp, #68]	; 0x44
   13dc0:	ldr	r1, [sp, #24]
   13dc4:	cmp	r2, #1
   13dc8:	mov	r3, r2
   13dcc:	movls	r3, #0
   13dd0:	movhi	r3, #1
   13dd4:	cmn	r1, #1
   13dd8:	movne	r3, #0
   13ddc:	cmp	r3, #0
   13de0:	add	r4, sl, r2
   13de4:	beq	13df4 <__assert_fail@plt+0x2eb0>
   13de8:	ldr	r0, [sp, #44]	; 0x2c
   13dec:	bl	10e6c <strlen@plt>
   13df0:	str	r0, [sp, #24]
   13df4:	ldr	r3, [sp, #24]
   13df8:	cmp	r3, r4
   13dfc:	ldr	r3, [sp, #44]	; 0x2c
   13e00:	add	r5, r3, sl
   13e04:	bcc	14658 <__assert_fail@plt+0x3714>
   13e08:	mov	r0, r5
   13e0c:	ldr	r2, [sp, #68]	; 0x44
   13e10:	ldr	r1, [sp, #72]	; 0x48
   13e14:	bl	10d64 <memcmp@plt>
   13e18:	cmp	r0, #0
   13e1c:	bne	14658 <__assert_fail@plt+0x3714>
   13e20:	ldr	r3, [sp, #40]	; 0x28
   13e24:	cmp	r3, #0
   13e28:	bne	15014 <__assert_fail@plt+0x40d0>
   13e2c:	ldrb	r4, [r5]
   13e30:	cmp	r4, #126	; 0x7e
   13e34:	ldrls	pc, [pc, r4, lsl #2]
   13e38:	b	14f50 <__assert_fail@plt+0x400c>
   13e3c:	andeq	r4, r1, r0, lsl r5
   13e40:	andeq	r4, r1, r0, asr pc
   13e44:	andeq	r4, r1, r0, asr pc
   13e48:	andeq	r4, r1, r0, asr pc
   13e4c:	andeq	r4, r1, r0, asr pc
   13e50:	andeq	r4, r1, r0, asr pc
   13e54:	andeq	r4, r1, r0, asr pc
   13e58:	strdeq	r4, [r1], -ip
   13e5c:	andeq	r4, r1, r8, ror #9
   13e60:	andeq	r4, r1, r4, asr #9
   13e64:	andeq	r4, r1, r4, lsr #9
   13e68:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e6c:	andeq	r4, r1, ip, lsl #8
   13e70:	andeq	r4, r1, r0, asr #12
   13e74:	andeq	r4, r1, r0, asr pc
   13e78:	andeq	r4, r1, r0, asr pc
   13e7c:	andeq	r4, r1, r0, asr pc
   13e80:	andeq	r4, r1, r0, asr pc
   13e84:	andeq	r4, r1, r0, asr pc
   13e88:	andeq	r4, r1, r0, asr pc
   13e8c:	andeq	r4, r1, r0, asr pc
   13e90:	andeq	r4, r1, r0, asr pc
   13e94:	andeq	r4, r1, r0, asr pc
   13e98:	andeq	r4, r1, r0, asr pc
   13e9c:	andeq	r4, r1, r0, asr pc
   13ea0:	andeq	r4, r1, r0, asr pc
   13ea4:	andeq	r4, r1, r0, asr pc
   13ea8:	andeq	r4, r1, r0, asr pc
   13eac:	andeq	r4, r1, r0, asr pc
   13eb0:	andeq	r4, r1, r0, asr pc
   13eb4:	andeq	r4, r1, r0, asr pc
   13eb8:	andeq	r4, r1, r0, asr pc
   13ebc:	andeq	r4, r1, r0, lsr r6
   13ec0:	andeq	r4, r1, r0, lsl r6
   13ec4:	andeq	r4, r1, r0, lsl r6
   13ec8:	strdeq	r4, [r1], -r0
   13ecc:	andeq	r4, r1, r0, lsl r6
   13ed0:	strdeq	r4, [r1], -ip
   13ed4:	andeq	r4, r1, r0, lsl r6
   13ed8:	ldrdeq	r4, [r1], -r8
   13edc:	andeq	r4, r1, r0, lsl r6
   13ee0:	andeq	r4, r1, r0, lsl r6
   13ee4:	andeq	r4, r1, r0, lsl r6
   13ee8:	strdeq	r4, [r1], -ip
   13eec:	strdeq	r4, [r1], -ip
   13ef0:	strdeq	r4, [r1], -ip
   13ef4:	strdeq	r4, [r1], -ip
   13ef8:	strdeq	r4, [r1], -ip
   13efc:	strdeq	r4, [r1], -ip
   13f00:	strdeq	r4, [r1], -ip
   13f04:	strdeq	r4, [r1], -ip
   13f08:	strdeq	r4, [r1], -ip
   13f0c:	strdeq	r4, [r1], -ip
   13f10:	strdeq	r4, [r1], -ip
   13f14:	strdeq	r4, [r1], -ip
   13f18:	strdeq	r4, [r1], -ip
   13f1c:	strdeq	r4, [r1], -ip
   13f20:	strdeq	r4, [r1], -ip
   13f24:	strdeq	r4, [r1], -ip
   13f28:	andeq	r4, r1, r0, lsl r6
   13f2c:	andeq	r4, r1, r0, lsl r6
   13f30:	andeq	r4, r1, r0, lsl r6
   13f34:	andeq	r4, r1, r0, lsl r6
   13f38:	andeq	r4, r1, r8, lsl #7
   13f3c:	andeq	r4, r1, r0, asr pc
   13f40:	strdeq	r4, [r1], -ip
   13f44:	strdeq	r4, [r1], -ip
   13f48:	strdeq	r4, [r1], -ip
   13f4c:	strdeq	r4, [r1], -ip
   13f50:	strdeq	r4, [r1], -ip
   13f54:	strdeq	r4, [r1], -ip
   13f58:	strdeq	r4, [r1], -ip
   13f5c:	strdeq	r4, [r1], -ip
   13f60:	strdeq	r4, [r1], -ip
   13f64:	strdeq	r4, [r1], -ip
   13f68:	strdeq	r4, [r1], -ip
   13f6c:	strdeq	r4, [r1], -ip
   13f70:	strdeq	r4, [r1], -ip
   13f74:	strdeq	r4, [r1], -ip
   13f78:	strdeq	r4, [r1], -ip
   13f7c:	strdeq	r4, [r1], -ip
   13f80:	strdeq	r4, [r1], -ip
   13f84:	strdeq	r4, [r1], -ip
   13f88:	strdeq	r4, [r1], -ip
   13f8c:	strdeq	r4, [r1], -ip
   13f90:	strdeq	r4, [r1], -ip
   13f94:	strdeq	r4, [r1], -ip
   13f98:	strdeq	r4, [r1], -ip
   13f9c:	strdeq	r4, [r1], -ip
   13fa0:	strdeq	r4, [r1], -ip
   13fa4:	strdeq	r4, [r1], -ip
   13fa8:	andeq	r4, r1, r0, lsl r6
   13fac:	andeq	r4, r1, r4, asr r3
   13fb0:	strdeq	r4, [r1], -ip
   13fb4:	andeq	r4, r1, r0, lsl r6
   13fb8:	strdeq	r4, [r1], -ip
   13fbc:	andeq	r4, r1, r0, lsl r6
   13fc0:	strdeq	r4, [r1], -ip
   13fc4:	strdeq	r4, [r1], -ip
   13fc8:	strdeq	r4, [r1], -ip
   13fcc:	strdeq	r4, [r1], -ip
   13fd0:	strdeq	r4, [r1], -ip
   13fd4:	strdeq	r4, [r1], -ip
   13fd8:	strdeq	r4, [r1], -ip
   13fdc:	strdeq	r4, [r1], -ip
   13fe0:	strdeq	r4, [r1], -ip
   13fe4:	strdeq	r4, [r1], -ip
   13fe8:	strdeq	r4, [r1], -ip
   13fec:	strdeq	r4, [r1], -ip
   13ff0:	strdeq	r4, [r1], -ip
   13ff4:	strdeq	r4, [r1], -ip
   13ff8:	strdeq	r4, [r1], -ip
   13ffc:	strdeq	r4, [r1], -ip
   14000:	strdeq	r4, [r1], -ip
   14004:	strdeq	r4, [r1], -ip
   14008:	strdeq	r4, [r1], -ip
   1400c:	strdeq	r4, [r1], -ip
   14010:	strdeq	r4, [r1], -ip
   14014:	strdeq	r4, [r1], -ip
   14018:	strdeq	r4, [r1], -ip
   1401c:	strdeq	r4, [r1], -ip
   14020:	strdeq	r4, [r1], -ip
   14024:	strdeq	r4, [r1], -ip
   14028:	andeq	r4, r1, ip, lsl #4
   1402c:	andeq	r4, r1, r0, lsl r6
   14030:	andeq	r4, r1, ip, lsl #4
   14034:	strdeq	r4, [r1], -r0
   14038:	mov	r3, #1
   1403c:	str	r3, [sp, #40]	; 0x28
   14040:	str	r3, [sp, #68]	; 0x44
   14044:	mov	r8, #0
   14048:	ldr	r3, [pc, #4056]	; 15028 <__assert_fail@plt+0x40e4>
   1404c:	str	r3, [sp, #72]	; 0x48
   14050:	mov	r3, #2
   14054:	str	r3, [sp, #176]	; 0xb0
   14058:	ldr	r1, [sp, #56]	; 0x38
   1405c:	mov	r2, r3
   14060:	ldr	ip, [sp, #40]	; 0x28
   14064:	mov	lr, r3
   14068:	b	13d34 <__assert_fail@plt+0x2df0>
   1406c:	mov	r3, #1
   14070:	str	r3, [sp, #56]	; 0x38
   14074:	str	r3, [sp, #68]	; 0x44
   14078:	str	r3, [sp, #40]	; 0x28
   1407c:	ldr	r3, [pc, #4004]	; 15028 <__assert_fail@plt+0x40e4>
   14080:	mov	r8, #0
   14084:	str	r3, [sp, #72]	; 0x48
   14088:	b	14050 <__assert_fail@plt+0x310c>
   1408c:	mov	r3, #1
   14090:	str	r3, [sp, #56]	; 0x38
   14094:	str	r3, [sp, #68]	; 0x44
   14098:	str	r3, [sp, #40]	; 0x28
   1409c:	ldr	r3, [pc, #3976]	; 1502c <__assert_fail@plt+0x40e8>
   140a0:	mov	r8, #0
   140a4:	str	r3, [sp, #72]	; 0x48
   140a8:	mov	r3, #5
   140ac:	b	14054 <__assert_fail@plt+0x3110>
   140b0:	mov	r3, #0
   140b4:	str	r3, [sp, #40]	; 0x28
   140b8:	mov	r3, #1
   140bc:	str	r3, [sp, #56]	; 0x38
   140c0:	mov	r8, #0
   140c4:	mov	r1, r3
   140c8:	ldr	r2, [sp, #176]	; 0xb0
   140cc:	ldr	ip, [sp, #40]	; 0x28
   140d0:	ldr	lr, [sp, #176]	; 0xb0
   140d4:	b	13d34 <__assert_fail@plt+0x2df0>
   140d8:	ldr	r3, [sp, #176]	; 0xb0
   140dc:	cmp	r3, #10
   140e0:	beq	14124 <__assert_fail@plt+0x31e0>
   140e4:	mov	r2, #5
   140e8:	ldr	r1, [pc, #3904]	; 15030 <__assert_fail@plt+0x40ec>
   140ec:	mov	r0, #0
   140f0:	bl	10d88 <dcgettext@plt>
   140f4:	ldr	r2, [pc, #3892]	; 15030 <__assert_fail@plt+0x40ec>
   140f8:	cmp	r0, r2
   140fc:	str	r0, [sp, #188]	; 0xbc
   14100:	beq	151bc <__assert_fail@plt+0x4278>
   14104:	mov	r2, #5
   14108:	ldr	r1, [pc, #3864]	; 15028 <__assert_fail@plt+0x40e4>
   1410c:	mov	r0, #0
   14110:	bl	10d88 <dcgettext@plt>
   14114:	ldr	r2, [pc, #3852]	; 15028 <__assert_fail@plt+0x40e4>
   14118:	cmp	r0, r2
   1411c:	str	r0, [sp, #192]	; 0xc0
   14120:	beq	151ac <__assert_fail@plt+0x4268>
   14124:	ldr	r8, [sp, #40]	; 0x28
   14128:	cmp	r8, #0
   1412c:	movne	r8, #0
   14130:	bne	14160 <__assert_fail@plt+0x321c>
   14134:	ldr	r3, [sp, #188]	; 0xbc
   14138:	ldrb	r3, [r3]
   1413c:	cmp	r3, #0
   14140:	beq	14160 <__assert_fail@plt+0x321c>
   14144:	ldr	r2, [sp, #188]	; 0xbc
   14148:	cmp	fp, r8
   1414c:	strbhi	r3, [r9, r8]
   14150:	ldrb	r3, [r2, #1]!
   14154:	add	r8, r8, #1
   14158:	cmp	r3, #0
   1415c:	bne	14148 <__assert_fail@plt+0x3204>
   14160:	ldr	r0, [sp, #192]	; 0xc0
   14164:	bl	10e6c <strlen@plt>
   14168:	ldr	r3, [sp, #192]	; 0xc0
   1416c:	ldr	r2, [sp, #176]	; 0xb0
   14170:	str	r3, [sp, #72]	; 0x48
   14174:	mov	r3, #1
   14178:	str	r3, [sp, #56]	; 0x38
   1417c:	mov	r1, r3
   14180:	ldr	ip, [sp, #40]	; 0x28
   14184:	ldr	lr, [sp, #176]	; 0xb0
   14188:	str	r0, [sp, #68]	; 0x44
   1418c:	b	13d34 <__assert_fail@plt+0x2df0>
   14190:	ldr	r3, [sp, #40]	; 0x28
   14194:	cmp	r3, #0
   14198:	beq	14e40 <__assert_fail@plt+0x3efc>
   1419c:	mov	r3, #1
   141a0:	str	r3, [sp, #68]	; 0x44
   141a4:	ldr	r3, [pc, #3708]	; 15028 <__assert_fail@plt+0x40e4>
   141a8:	str	r3, [sp, #72]	; 0x48
   141ac:	mov	r8, #0
   141b0:	ldr	r1, [sp, #56]	; 0x38
   141b4:	ldr	r2, [sp, #176]	; 0xb0
   141b8:	ldr	ip, [sp, #40]	; 0x28
   141bc:	ldr	lr, [sp, #176]	; 0xb0
   141c0:	b	13d34 <__assert_fail@plt+0x2df0>
   141c4:	ldr	r3, [sp, #40]	; 0x28
   141c8:	cmp	r3, #0
   141cc:	beq	14ec4 <__assert_fail@plt+0x3f80>
   141d0:	str	r3, [sp, #56]	; 0x38
   141d4:	mov	r3, #1
   141d8:	str	r3, [sp, #68]	; 0x44
   141dc:	ldr	r3, [pc, #3656]	; 1502c <__assert_fail@plt+0x40e8>
   141e0:	b	141a8 <__assert_fail@plt+0x3264>
   141e4:	ldr	r3, [sp, #40]	; 0x28
   141e8:	cmp	r3, #0
   141ec:	mov	r3, #1
   141f0:	streq	r3, [sp, #56]	; 0x38
   141f4:	beq	14e40 <__assert_fail@plt+0x3efc>
   141f8:	str	r3, [sp, #68]	; 0x44
   141fc:	ldr	r3, [pc, #3620]	; 15028 <__assert_fail@plt+0x40e4>
   14200:	mov	r8, #0
   14204:	str	r3, [sp, #72]	; 0x48
   14208:	b	14050 <__assert_fail@plt+0x310c>
   1420c:	ldr	r3, [sp, #24]
   14210:	ldr	r6, [sp, #48]	; 0x30
   14214:	cmn	r3, #1
   14218:	beq	14874 <__assert_fail@plt+0x3930>
   1421c:	subs	r3, r3, #1
   14220:	movne	r3, #1
   14224:	cmp	r3, #0
   14228:	beq	145f4 <__assert_fail@plt+0x36b0>
   1422c:	ldr	r1, [sp, #52]	; 0x34
   14230:	mov	r7, r3
   14234:	mov	r3, #0
   14238:	str	r3, [sp, #32]
   1423c:	ldr	r3, [sp, #60]	; 0x3c
   14240:	orr	r2, r1, r3
   14244:	ldr	r3, [sp, #40]	; 0x28
   14248:	eor	r2, r2, #1
   1424c:	orr	r2, r3, r2
   14250:	tst	r2, #255	; 0xff
   14254:	bne	14b78 <__assert_fail@plt+0x3c34>
   14258:	cmp	r6, #0
   1425c:	bne	14438 <__assert_fail@plt+0x34f4>
   14260:	ldr	r3, [sp, #36]	; 0x24
   14264:	add	sl, sl, #1
   14268:	and	r3, r3, r7
   1426c:	uxtb	r6, r3
   14270:	cmp	r6, #0
   14274:	beq	142a0 <__assert_fail@plt+0x335c>
   14278:	cmp	fp, r8
   1427c:	movhi	r3, #39	; 0x27
   14280:	strbhi	r3, [r9, r8]
   14284:	add	r3, r8, #1
   14288:	cmp	fp, r3
   1428c:	movhi	r2, #39	; 0x27
   14290:	add	r8, r8, #2
   14294:	strbhi	r2, [r9, r3]
   14298:	mov	r3, #0
   1429c:	str	r3, [sp, #36]	; 0x24
   142a0:	ldr	r2, [sp, #32]
   142a4:	cmp	r8, fp
   142a8:	ldr	r3, [sp, #28]
   142ac:	strbcc	r4, [r9, r8]
   142b0:	cmp	r2, #0
   142b4:	moveq	r3, #0
   142b8:	str	r3, [sp, #28]
   142bc:	ldr	r3, [sp, #24]
   142c0:	add	r8, r8, #1
   142c4:	cmn	r3, #1
   142c8:	bne	13da0 <__assert_fail@plt+0x2e5c>
   142cc:	ldr	r3, [sp, #44]	; 0x2c
   142d0:	ldrb	r3, [r3, sl]
   142d4:	adds	r7, r3, #0
   142d8:	movne	r7, #1
   142dc:	cmp	r7, #0
   142e0:	bne	13db0 <__assert_fail@plt+0x2e6c>
   142e4:	ldr	r3, [sp, #64]	; 0x40
   142e8:	cmp	r8, #0
   142ec:	movne	r3, #0
   142f0:	andeq	r3, r3, #1
   142f4:	cmp	r3, #0
   142f8:	str	r3, [sp, #64]	; 0x40
   142fc:	bne	14da0 <__assert_fail@plt+0x3e5c>
   14300:	ldr	r3, [sp, #40]	; 0x28
   14304:	ldr	r2, [sp, #52]	; 0x34
   14308:	eor	r3, r3, #1
   1430c:	ands	r2, r2, r3
   14310:	beq	151cc <__assert_fail@plt+0x4288>
   14314:	ldr	r3, [sp, #76]	; 0x4c
   14318:	cmp	r3, #0
   1431c:	beq	1519c <__assert_fail@plt+0x4258>
   14320:	ldr	r3, [sp, #28]
   14324:	cmp	r3, #0
   14328:	bne	15158 <__assert_fail@plt+0x4214>
   1432c:	ldr	r2, [sp, #84]	; 0x54
   14330:	clz	r3, fp
   14334:	cmp	r2, #0
   14338:	lsr	r3, r3, #5
   1433c:	moveq	r3, #0
   14340:	cmp	r3, #0
   14344:	beq	150f8 <__assert_fail@plt+0x41b4>
   14348:	mov	fp, r2
   1434c:	str	r3, [sp, #76]	; 0x4c
   14350:	b	13cdc <__assert_fail@plt+0x2d98>
   14354:	ldr	r3, [sp, #176]	; 0xb0
   14358:	ldr	r6, [sp, #48]	; 0x30
   1435c:	cmp	r3, #2
   14360:	beq	14898 <__assert_fail@plt+0x3954>
   14364:	ldr	r3, [sp, #88]	; 0x58
   14368:	cmp	r3, #0
   1436c:	beq	14e1c <__assert_fail@plt+0x3ed8>
   14370:	mov	r3, #0
   14374:	add	sl, sl, #1
   14378:	ldr	r6, [sp, #36]	; 0x24
   1437c:	str	r3, [sp, #32]
   14380:	mov	r4, #92	; 0x5c
   14384:	b	14270 <__assert_fail@plt+0x332c>
   14388:	ldr	r3, [sp, #176]	; 0xb0
   1438c:	ldr	r6, [sp, #48]	; 0x30
   14390:	cmp	r3, #2
   14394:	beq	148c8 <__assert_fail@plt+0x3984>
   14398:	cmp	r3, #5
   1439c:	bne	14e2c <__assert_fail@plt+0x3ee8>
   143a0:	ldr	r3, [sp, #100]	; 0x64
   143a4:	cmp	r3, #0
   143a8:	beq	14e90 <__assert_fail@plt+0x3f4c>
   143ac:	ldr	r2, [sp, #24]
   143b0:	add	r3, sl, #2
   143b4:	cmp	r2, r3
   143b8:	bls	143c8 <__assert_fail@plt+0x3484>
   143bc:	ldrb	r4, [r5, #1]
   143c0:	cmp	r4, #63	; 0x3f
   143c4:	beq	15038 <__assert_fail@plt+0x40f4>
   143c8:	mov	r1, #0
   143cc:	str	r1, [sp, #32]
   143d0:	mov	r4, #63	; 0x3f
   143d4:	b	1423c <__assert_fail@plt+0x32f8>
   143d8:	ldr	r3, [sp, #176]	; 0xb0
   143dc:	ldr	r6, [sp, #48]	; 0x30
   143e0:	cmp	r3, #2
   143e4:	beq	148f4 <__assert_fail@plt+0x39b0>
   143e8:	str	r7, [sp, #32]
   143ec:	str	r7, [sp, #76]	; 0x4c
   143f0:	mov	r1, #0
   143f4:	mov	r4, #39	; 0x27
   143f8:	b	1423c <__assert_fail@plt+0x32f8>
   143fc:	ldr	r6, [sp, #48]	; 0x30
   14400:	ldr	r1, [sp, #52]	; 0x34
   14404:	str	r7, [sp, #32]
   14408:	b	1423c <__assert_fail@plt+0x32f8>
   1440c:	ldr	r6, [sp, #48]	; 0x30
   14410:	ldr	r1, [sp, #52]	; 0x34
   14414:	mov	r4, #12
   14418:	mov	r3, #102	; 0x66
   1441c:	ldr	r2, [sp, #56]	; 0x38
   14420:	cmp	r2, #0
   14424:	streq	r2, [sp, #32]
   14428:	beq	1423c <__assert_fail@plt+0x32f8>
   1442c:	mov	r4, r3
   14430:	mov	r3, #0
   14434:	str	r3, [sp, #32]
   14438:	ldr	r3, [sp, #40]	; 0x28
   1443c:	cmp	r3, #0
   14440:	bne	14bb0 <__assert_fail@plt+0x3c6c>
   14444:	ldr	r3, [sp, #36]	; 0x24
   14448:	eor	r3, r3, #1
   1444c:	and	r3, r3, r1
   14450:	ands	r3, r3, #255	; 0xff
   14454:	beq	1448c <__assert_fail@plt+0x3548>
   14458:	cmp	fp, r8
   1445c:	movhi	r2, #39	; 0x27
   14460:	strbhi	r2, [r9, r8]
   14464:	add	r2, r8, #1
   14468:	cmp	fp, r2
   1446c:	movhi	r1, #36	; 0x24
   14470:	strbhi	r1, [r9, r2]
   14474:	add	r2, r8, #2
   14478:	cmp	fp, r2
   1447c:	add	r8, r8, #3
   14480:	movhi	r1, #39	; 0x27
   14484:	strbhi	r1, [r9, r2]
   14488:	str	r3, [sp, #36]	; 0x24
   1448c:	cmp	fp, r8
   14490:	movhi	r3, #92	; 0x5c
   14494:	strbhi	r3, [r9, r8]
   14498:	add	sl, sl, #1
   1449c:	add	r8, r8, #1
   144a0:	b	142a0 <__assert_fail@plt+0x335c>
   144a4:	ldr	r6, [sp, #48]	; 0x30
   144a8:	mov	r4, #10
   144ac:	mov	r3, #110	; 0x6e
   144b0:	ldr	r2, [sp, #64]	; 0x40
   144b4:	cmp	r2, #0
   144b8:	bne	14f38 <__assert_fail@plt+0x3ff4>
   144bc:	ldr	r1, [sp, #52]	; 0x34
   144c0:	b	1441c <__assert_fail@plt+0x34d8>
   144c4:	ldr	r6, [sp, #48]	; 0x30
   144c8:	ldr	r1, [sp, #52]	; 0x34
   144cc:	mov	r3, #116	; 0x74
   144d0:	b	1441c <__assert_fail@plt+0x34d8>
   144d4:	ldr	r6, [sp, #48]	; 0x30
   144d8:	ldr	r1, [sp, #52]	; 0x34
   144dc:	mov	r4, #11
   144e0:	mov	r3, #118	; 0x76
   144e4:	b	1441c <__assert_fail@plt+0x34d8>
   144e8:	ldr	r6, [sp, #48]	; 0x30
   144ec:	ldr	r1, [sp, #52]	; 0x34
   144f0:	mov	r4, #8
   144f4:	mov	r3, #98	; 0x62
   144f8:	b	1441c <__assert_fail@plt+0x34d8>
   144fc:	ldr	r6, [sp, #48]	; 0x30
   14500:	ldr	r1, [sp, #52]	; 0x34
   14504:	mov	r4, #7
   14508:	mov	r3, #97	; 0x61
   1450c:	b	1441c <__assert_fail@plt+0x34d8>
   14510:	ldr	r3, [sp, #56]	; 0x38
   14514:	ldr	r6, [sp, #48]	; 0x30
   14518:	cmp	r3, #0
   1451c:	beq	149e0 <__assert_fail@plt+0x3a9c>
   14520:	ldr	r3, [sp, #40]	; 0x28
   14524:	cmp	r3, #0
   14528:	bne	15014 <__assert_fail@plt+0x40d0>
   1452c:	ldr	r3, [sp, #36]	; 0x24
   14530:	ldr	r2, [sp, #52]	; 0x34
   14534:	eor	r3, r3, #1
   14538:	ands	r3, r2, r3
   1453c:	moveq	r2, r8
   14540:	beq	14578 <__assert_fail@plt+0x3634>
   14544:	cmp	fp, r8
   14548:	movhi	r2, #39	; 0x27
   1454c:	strbhi	r2, [r9, r8]
   14550:	add	r2, r8, #1
   14554:	cmp	fp, r2
   14558:	movhi	r1, #36	; 0x24
   1455c:	strbhi	r1, [r9, r2]
   14560:	add	r2, r8, #2
   14564:	cmp	fp, r2
   14568:	movhi	r1, #39	; 0x27
   1456c:	strbhi	r1, [r9, r2]
   14570:	add	r2, r8, #3
   14574:	str	r3, [sp, #36]	; 0x24
   14578:	cmp	fp, r2
   1457c:	movhi	r3, #92	; 0x5c
   14580:	strbhi	r3, [r9, r2]
   14584:	ldr	r3, [sp, #92]	; 0x5c
   14588:	add	r8, r2, #1
   1458c:	cmp	r3, #0
   14590:	beq	14f14 <__assert_fail@plt+0x3fd0>
   14594:	ldr	r1, [sp, #24]
   14598:	add	r3, sl, #1
   1459c:	cmp	r1, r3
   145a0:	bls	145d8 <__assert_fail@plt+0x3694>
   145a4:	ldr	r1, [sp, #44]	; 0x2c
   145a8:	ldrb	r3, [r1, r3]
   145ac:	sub	r3, r3, #48	; 0x30
   145b0:	cmp	r3, #9
   145b4:	bhi	145d8 <__assert_fail@plt+0x3694>
   145b8:	cmp	fp, r8
   145bc:	movhi	r3, #48	; 0x30
   145c0:	strbhi	r3, [r9, r8]
   145c4:	add	r3, r2, #2
   145c8:	cmp	fp, r3
   145cc:	add	r8, r2, #3
   145d0:	movhi	r1, #48	; 0x30
   145d4:	strbhi	r1, [r9, r3]
   145d8:	ldr	r3, [sp, #40]	; 0x28
   145dc:	ldr	r1, [sp, #52]	; 0x34
   145e0:	mov	r7, r3
   145e4:	str	r3, [sp, #32]
   145e8:	mov	r4, #48	; 0x30
   145ec:	b	1423c <__assert_fail@plt+0x32f8>
   145f0:	ldr	r6, [sp, #48]	; 0x30
   145f4:	cmp	sl, #0
   145f8:	streq	r7, [sp, #32]
   145fc:	beq	1461c <__assert_fail@plt+0x36d8>
   14600:	mov	r3, #0
   14604:	ldr	r1, [sp, #52]	; 0x34
   14608:	str	r3, [sp, #32]
   1460c:	b	1423c <__assert_fail@plt+0x32f8>
   14610:	ldr	r6, [sp, #48]	; 0x30
   14614:	mov	r3, #0
   14618:	str	r3, [sp, #32]
   1461c:	ldr	r3, [sp, #64]	; 0x40
   14620:	cmp	r3, #0
   14624:	bne	14da0 <__assert_fail@plt+0x3e5c>
   14628:	ldr	r1, [sp, #52]	; 0x34
   1462c:	b	1423c <__assert_fail@plt+0x32f8>
   14630:	ldr	r3, [sp, #48]	; 0x30
   14634:	mov	r6, r3
   14638:	str	r3, [sp, #32]
   1463c:	b	1461c <__assert_fail@plt+0x36d8>
   14640:	ldr	r6, [sp, #48]	; 0x30
   14644:	mov	r4, #13
   14648:	mov	r3, #114	; 0x72
   1464c:	b	144b0 <__assert_fail@plt+0x356c>
   14650:	ldr	r3, [sp, #44]	; 0x2c
   14654:	add	r5, r3, sl
   14658:	ldrb	r4, [r5]
   1465c:	cmp	r4, #126	; 0x7e
   14660:	ldrls	pc, [pc, r4, lsl #2]
   14664:	b	14a00 <__assert_fail@plt+0x3abc>
   14668:	ldrdeq	r4, [r1], -r0
   1466c:	andeq	r4, r1, r0, lsl #20
   14670:	andeq	r4, r1, r0, lsl #20
   14674:	andeq	r4, r1, r0, lsl #20
   14678:	andeq	r4, r1, r0, lsl #20
   1467c:	andeq	r4, r1, r0, lsl #20
   14680:	andeq	r4, r1, r0, lsl #20
   14684:	andeq	r4, r1, r8, asr #19
   14688:	andeq	r4, r1, r0, asr #19
   1468c:			; <UNDEFINED> instruction: 0x000149b4
   14690:	andeq	r4, r1, ip, lsr #19
   14694:	andeq	r4, r1, r4, lsr #19
   14698:	muleq	r1, ip, r9
   1469c:	muleq	r1, r4, r9
   146a0:	andeq	r4, r1, r0, lsl #20
   146a4:	andeq	r4, r1, r0, lsl #20
   146a8:	andeq	r4, r1, r0, lsl #20
   146ac:	andeq	r4, r1, r0, lsl #20
   146b0:	andeq	r4, r1, r0, lsl #20
   146b4:	andeq	r4, r1, r0, lsl #20
   146b8:	andeq	r4, r1, r0, lsl #20
   146bc:	andeq	r4, r1, r0, lsl #20
   146c0:	andeq	r4, r1, r0, lsl #20
   146c4:	andeq	r4, r1, r0, lsl #20
   146c8:	andeq	r4, r1, r0, lsl #20
   146cc:	andeq	r4, r1, r0, lsl #20
   146d0:	andeq	r4, r1, r0, lsl #20
   146d4:	andeq	r4, r1, r0, lsl #20
   146d8:	andeq	r4, r1, r0, lsl #20
   146dc:	andeq	r4, r1, r0, lsl #20
   146e0:	andeq	r4, r1, r0, lsl #20
   146e4:	andeq	r4, r1, r0, lsl #20
   146e8:	andeq	r4, r1, r8, lsl #19
   146ec:	andeq	r4, r1, r0, lsl #19
   146f0:	andeq	r4, r1, r0, lsl #19
   146f4:	andeq	r4, r1, r8, ror r9
   146f8:	andeq	r4, r1, r0, lsl #19
   146fc:	andeq	r4, r1, r0, ror r9
   14700:	andeq	r4, r1, r0, lsl #19
   14704:	andeq	r4, r1, r4, ror #17
   14708:	andeq	r4, r1, r0, lsl #19
   1470c:	andeq	r4, r1, r0, lsl #19
   14710:	andeq	r4, r1, r0, lsl #19
   14714:	andeq	r4, r1, r0, ror r9
   14718:	andeq	r4, r1, r0, ror r9
   1471c:	andeq	r4, r1, r0, ror r9
   14720:	andeq	r4, r1, r0, ror r9
   14724:	andeq	r4, r1, r0, ror r9
   14728:	andeq	r4, r1, r0, ror r9
   1472c:	andeq	r4, r1, r0, ror r9
   14730:	andeq	r4, r1, r0, ror r9
   14734:	andeq	r4, r1, r0, ror r9
   14738:	andeq	r4, r1, r0, ror r9
   1473c:	andeq	r4, r1, r0, ror r9
   14740:	andeq	r4, r1, r0, ror r9
   14744:	andeq	r4, r1, r0, ror r9
   14748:	andeq	r4, r1, r0, ror r9
   1474c:	andeq	r4, r1, r0, ror r9
   14750:	andeq	r4, r1, r0, ror r9
   14754:	andeq	r4, r1, r0, lsl #19
   14758:	andeq	r4, r1, r0, lsl #19
   1475c:	andeq	r4, r1, r0, lsl #19
   14760:	andeq	r4, r1, r0, lsl #19
   14764:			; <UNDEFINED> instruction: 0x000148b8
   14768:	andeq	r4, r1, r0, lsl #20
   1476c:	andeq	r4, r1, r0, ror r9
   14770:	andeq	r4, r1, r0, ror r9
   14774:	andeq	r4, r1, r0, ror r9
   14778:	andeq	r4, r1, r0, ror r9
   1477c:	andeq	r4, r1, r0, ror r9
   14780:	andeq	r4, r1, r0, ror r9
   14784:	andeq	r4, r1, r0, ror r9
   14788:	andeq	r4, r1, r0, ror r9
   1478c:	andeq	r4, r1, r0, ror r9
   14790:	andeq	r4, r1, r0, ror r9
   14794:	andeq	r4, r1, r0, ror r9
   14798:	andeq	r4, r1, r0, ror r9
   1479c:	andeq	r4, r1, r0, ror r9
   147a0:	andeq	r4, r1, r0, ror r9
   147a4:	andeq	r4, r1, r0, ror r9
   147a8:	andeq	r4, r1, r0, ror r9
   147ac:	andeq	r4, r1, r0, ror r9
   147b0:	andeq	r4, r1, r0, ror r9
   147b4:	andeq	r4, r1, r0, ror r9
   147b8:	andeq	r4, r1, r0, ror r9
   147bc:	andeq	r4, r1, r0, ror r9
   147c0:	andeq	r4, r1, r0, ror r9
   147c4:	andeq	r4, r1, r0, ror r9
   147c8:	andeq	r4, r1, r0, ror r9
   147cc:	andeq	r4, r1, r0, ror r9
   147d0:	andeq	r4, r1, r0, ror r9
   147d4:	andeq	r4, r1, r0, lsl #19
   147d8:	andeq	r4, r1, r8, lsl #17
   147dc:	andeq	r4, r1, r0, ror r9
   147e0:	andeq	r4, r1, r0, lsl #19
   147e4:	andeq	r4, r1, r0, ror r9
   147e8:	andeq	r4, r1, r0, lsl #19
   147ec:	andeq	r4, r1, r0, ror r9
   147f0:	andeq	r4, r1, r0, ror r9
   147f4:	andeq	r4, r1, r0, ror r9
   147f8:	andeq	r4, r1, r0, ror r9
   147fc:	andeq	r4, r1, r0, ror r9
   14800:	andeq	r4, r1, r0, ror r9
   14804:	andeq	r4, r1, r0, ror r9
   14808:	andeq	r4, r1, r0, ror r9
   1480c:	andeq	r4, r1, r0, ror r9
   14810:	andeq	r4, r1, r0, ror r9
   14814:	andeq	r4, r1, r0, ror r9
   14818:	andeq	r4, r1, r0, ror r9
   1481c:	andeq	r4, r1, r0, ror r9
   14820:	andeq	r4, r1, r0, ror r9
   14824:	andeq	r4, r1, r0, ror r9
   14828:	andeq	r4, r1, r0, ror r9
   1482c:	andeq	r4, r1, r0, ror r9
   14830:	andeq	r4, r1, r0, ror r9
   14834:	andeq	r4, r1, r0, ror r9
   14838:	andeq	r4, r1, r0, ror r9
   1483c:	andeq	r4, r1, r0, ror r9
   14840:	andeq	r4, r1, r0, ror r9
   14844:	andeq	r4, r1, r0, ror r9
   14848:	andeq	r4, r1, r0, ror r9
   1484c:	andeq	r4, r1, r0, ror r9
   14850:	andeq	r4, r1, r0, ror r9
   14854:	andeq	r4, r1, r4, ror #16
   14858:	andeq	r4, r1, r0, lsl #19
   1485c:	andeq	r4, r1, r4, ror #16
   14860:	andeq	r4, r1, r8, ror r9
   14864:	ldr	r3, [sp, #24]
   14868:	mov	r6, #0
   1486c:	cmn	r3, #1
   14870:	bne	1421c <__assert_fail@plt+0x32d8>
   14874:	ldr	r3, [sp, #44]	; 0x2c
   14878:	ldrb	r3, [r3, #1]
   1487c:	adds	r3, r3, #0
   14880:	movne	r3, #1
   14884:	b	14224 <__assert_fail@plt+0x32e0>
   14888:	ldr	r3, [sp, #176]	; 0xb0
   1488c:	mov	r6, #0
   14890:	cmp	r3, #2
   14894:	bne	14364 <__assert_fail@plt+0x3420>
   14898:	ldr	r3, [sp, #64]	; 0x40
   1489c:	cmp	r3, #0
   148a0:	bne	150d8 <__assert_fail@plt+0x4194>
   148a4:	add	sl, sl, #1
   148a8:	ldr	r6, [sp, #36]	; 0x24
   148ac:	str	r3, [sp, #32]
   148b0:	mov	r4, #92	; 0x5c
   148b4:	b	14270 <__assert_fail@plt+0x332c>
   148b8:	ldr	r3, [sp, #176]	; 0xb0
   148bc:	mov	r6, #0
   148c0:	cmp	r3, #2
   148c4:	bne	14398 <__assert_fail@plt+0x3454>
   148c8:	ldr	r3, [sp, #40]	; 0x28
   148cc:	cmp	r3, #0
   148d0:	bne	14bb4 <__assert_fail@plt+0x3c70>
   148d4:	mov	r1, r7
   148d8:	str	r3, [sp, #32]
   148dc:	mov	r4, #63	; 0x3f
   148e0:	b	1423c <__assert_fail@plt+0x32f8>
   148e4:	ldr	r3, [sp, #176]	; 0xb0
   148e8:	mov	r6, #0
   148ec:	cmp	r3, #2
   148f0:	bne	143e8 <__assert_fail@plt+0x34a4>
   148f4:	ldr	r3, [sp, #64]	; 0x40
   148f8:	cmp	r3, #0
   148fc:	bne	150d8 <__assert_fail@plt+0x4194>
   14900:	ldr	r2, [sp, #84]	; 0x54
   14904:	adds	r3, fp, #0
   14908:	movne	r3, #1
   1490c:	cmp	r2, #0
   14910:	movne	r3, #0
   14914:	cmp	r3, #0
   14918:	strne	fp, [sp, #84]	; 0x54
   1491c:	movne	fp, #0
   14920:	bne	14950 <__assert_fail@plt+0x3a0c>
   14924:	cmp	fp, r8
   14928:	movhi	r3, #39	; 0x27
   1492c:	strbhi	r3, [r9, r8]
   14930:	add	r3, r8, #1
   14934:	cmp	fp, r3
   14938:	movhi	r2, #92	; 0x5c
   1493c:	strbhi	r2, [r9, r3]
   14940:	add	r3, r8, #2
   14944:	cmp	fp, r3
   14948:	movhi	r2, #39	; 0x27
   1494c:	strbhi	r2, [r9, r3]
   14950:	ldr	r3, [sp, #64]	; 0x40
   14954:	add	r8, r8, #3
   14958:	mov	r1, r7
   1495c:	str	r7, [sp, #32]
   14960:	str	r7, [sp, #76]	; 0x4c
   14964:	str	r3, [sp, #36]	; 0x24
   14968:	mov	r4, #39	; 0x27
   1496c:	b	1423c <__assert_fail@plt+0x32f8>
   14970:	mov	r6, #0
   14974:	b	14400 <__assert_fail@plt+0x34bc>
   14978:	mov	r6, #0
   1497c:	b	145f4 <__assert_fail@plt+0x36b0>
   14980:	mov	r6, #0
   14984:	b	14614 <__assert_fail@plt+0x36d0>
   14988:	str	r7, [sp, #32]
   1498c:	mov	r6, #0
   14990:	b	1461c <__assert_fail@plt+0x36d8>
   14994:	mov	r6, #0
   14998:	b	14644 <__assert_fail@plt+0x3700>
   1499c:	mov	r6, #0
   149a0:	b	14410 <__assert_fail@plt+0x34cc>
   149a4:	mov	r6, #0
   149a8:	b	144d8 <__assert_fail@plt+0x3594>
   149ac:	mov	r6, #0
   149b0:	b	144a8 <__assert_fail@plt+0x3564>
   149b4:	mov	r6, #0
   149b8:	mov	r3, #116	; 0x74
   149bc:	b	144b0 <__assert_fail@plt+0x356c>
   149c0:	mov	r6, #0
   149c4:	b	144ec <__assert_fail@plt+0x35a8>
   149c8:	mov	r6, #0
   149cc:	b	14500 <__assert_fail@plt+0x35bc>
   149d0:	ldr	r3, [sp, #56]	; 0x38
   149d4:	mov	r6, #0
   149d8:	cmp	r3, #0
   149dc:	bne	14520 <__assert_fail@plt+0x35dc>
   149e0:	ldr	r3, [sp, #96]	; 0x60
   149e4:	cmp	r3, #0
   149e8:	addne	sl, sl, #1
   149ec:	bne	13d94 <__assert_fail@plt+0x2e50>
   149f0:	ldr	r1, [sp, #52]	; 0x34
   149f4:	str	r3, [sp, #32]
   149f8:	mov	r4, r3
   149fc:	b	1423c <__assert_fail@plt+0x32f8>
   14a00:	mov	r6, #0
   14a04:	ldr	r3, [sp, #80]	; 0x50
   14a08:	cmp	r3, #1
   14a0c:	bne	14bfc <__assert_fail@plt+0x3cb8>
   14a10:	bl	10e54 <__ctype_b_loc@plt>
   14a14:	ldr	r2, [sp, #80]	; 0x50
   14a18:	sxth	r3, r4
   14a1c:	mov	r1, r2
   14a20:	lsl	r3, r3, #1
   14a24:	ldr	r2, [r0]
   14a28:	ldrh	r3, [r2, r3]
   14a2c:	and	r3, r3, #16384	; 0x4000
   14a30:	cmp	r3, #0
   14a34:	movne	r3, #1
   14a38:	moveq	r3, #0
   14a3c:	str	r3, [sp, #32]
   14a40:	moveq	r3, #1
   14a44:	movne	r3, #0
   14a48:	ldr	r2, [sp, #56]	; 0x38
   14a4c:	and	r3, r3, r2
   14a50:	ands	r3, r3, #255	; 0xff
   14a54:	beq	14628 <__assert_fail@plt+0x36e4>
   14a58:	add	r1, sl, r1
   14a5c:	mov	r0, #0
   14a60:	ldr	r7, [sp, #40]	; 0x28
   14a64:	ldr	r2, [sp, #36]	; 0x24
   14a68:	ldr	lr, [sp, #52]	; 0x34
   14a6c:	b	14b1c <__assert_fail@plt+0x3bd8>
   14a70:	cmp	r7, #0
   14a74:	bne	14e70 <__assert_fail@plt+0x3f2c>
   14a78:	eor	r0, r2, #1
   14a7c:	ands	r0, lr, r0
   14a80:	beq	14ab8 <__assert_fail@plt+0x3b74>
   14a84:	cmp	fp, r8
   14a88:	movhi	r2, #39	; 0x27
   14a8c:	strbhi	r2, [r9, r8]
   14a90:	add	r2, r8, #1
   14a94:	cmp	fp, r2
   14a98:	movhi	ip, #36	; 0x24
   14a9c:	strbhi	ip, [r9, r2]
   14aa0:	add	r2, r8, #2
   14aa4:	cmp	fp, r2
   14aa8:	movhi	ip, #39	; 0x27
   14aac:	strbhi	ip, [r9, r2]
   14ab0:	add	r8, r8, #3
   14ab4:	mov	r2, r0
   14ab8:	cmp	fp, r8
   14abc:	movhi	r0, #92	; 0x5c
   14ac0:	strbhi	r0, [r9, r8]
   14ac4:	add	r0, r8, #1
   14ac8:	cmp	fp, r0
   14acc:	lsrhi	ip, r4, #6
   14ad0:	addhi	ip, ip, #48	; 0x30
   14ad4:	strbhi	ip, [r9, r0]
   14ad8:	add	ip, r8, #2
   14adc:	cmp	fp, ip
   14ae0:	lsrhi	r0, r4, #3
   14ae4:	andhi	r0, r0, #7
   14ae8:	addhi	r0, r0, #48	; 0x30
   14aec:	add	sl, sl, #1
   14af0:	strbhi	r0, [r9, ip]
   14af4:	and	r4, r4, #7
   14af8:	cmp	sl, r1
   14afc:	add	r4, r4, #48	; 0x30
   14b00:	add	r8, r8, #3
   14b04:	bcs	14e88 <__assert_fail@plt+0x3f44>
   14b08:	mov	r0, r3
   14b0c:	cmp	fp, r8
   14b10:	strbhi	r4, [r9, r8]
   14b14:	ldrb	r4, [r5, #1]!
   14b18:	add	r8, r8, #1
   14b1c:	cmp	r3, #0
   14b20:	bne	14a70 <__assert_fail@plt+0x3b2c>
   14b24:	cmp	r6, #0
   14b28:	bne	14bcc <__assert_fail@plt+0x3c88>
   14b2c:	eor	r6, r0, #1
   14b30:	and	r6, r6, r2
   14b34:	add	sl, sl, #1
   14b38:	cmp	r1, sl
   14b3c:	uxtb	r6, r6
   14b40:	bls	14bf4 <__assert_fail@plt+0x3cb0>
   14b44:	cmp	r6, #0
   14b48:	beq	14b0c <__assert_fail@plt+0x3bc8>
   14b4c:	cmp	fp, r8
   14b50:	movhi	r2, #39	; 0x27
   14b54:	strbhi	r2, [r9, r8]
   14b58:	add	r2, r8, #1
   14b5c:	cmp	fp, r2
   14b60:	movhi	ip, #39	; 0x27
   14b64:	strbhi	ip, [r9, r2]
   14b68:	add	r8, r8, #2
   14b6c:	mov	r6, r3
   14b70:	mov	r2, r3
   14b74:	b	14b0c <__assert_fail@plt+0x3bc8>
   14b78:	ldr	r3, [sp, #184]	; 0xb8
   14b7c:	cmp	r3, #0
   14b80:	beq	14258 <__assert_fail@plt+0x3314>
   14b84:	lsr	r2, r4, #5
   14b88:	mov	r0, r3
   14b8c:	uxtb	r2, r2
   14b90:	and	r3, r4, #31
   14b94:	ldr	r2, [r0, r2, lsl #2]
   14b98:	lsr	r3, r2, r3
   14b9c:	tst	r3, #1
   14ba0:	beq	14258 <__assert_fail@plt+0x3314>
   14ba4:	ldr	r3, [sp, #40]	; 0x28
   14ba8:	cmp	r3, #0
   14bac:	beq	14444 <__assert_fail@plt+0x3500>
   14bb0:	mov	r3, r1
   14bb4:	str	r3, [sp, #64]	; 0x40
   14bb8:	mov	sl, r9
   14bbc:	ldr	r3, [sp, #56]	; 0x38
   14bc0:	mov	r9, fp
   14bc4:	ldr	r2, [sp, #64]	; 0x40
   14bc8:	b	14db8 <__assert_fail@plt+0x3e74>
   14bcc:	cmp	fp, r8
   14bd0:	eor	r6, r0, #1
   14bd4:	movhi	ip, #92	; 0x5c
   14bd8:	and	r6, r6, r2
   14bdc:	add	sl, sl, #1
   14be0:	strbhi	ip, [r9, r8]
   14be4:	cmp	r1, sl
   14be8:	add	r8, r8, #1
   14bec:	uxtb	r6, r6
   14bf0:	bhi	14b44 <__assert_fail@plt+0x3c00>
   14bf4:	str	r2, [sp, #36]	; 0x24
   14bf8:	b	14270 <__assert_fail@plt+0x332c>
   14bfc:	ldr	r3, [sp, #24]
   14c00:	cmn	r3, #1
   14c04:	mov	r3, #0
   14c08:	str	r3, [sp, #128]	; 0x80
   14c0c:	str	r3, [sp, #132]	; 0x84
   14c10:	beq	14f04 <__assert_fail@plt+0x3fc0>
   14c14:	mov	r2, r7
   14c18:	mov	r3, #0
   14c1c:	str	r7, [sp, #104]	; 0x68
   14c20:	str	r5, [sp, #116]	; 0x74
   14c24:	mov	r7, r3
   14c28:	mov	r5, r2
   14c2c:	str	r4, [sp, #32]
   14c30:	str	r6, [sp, #108]	; 0x6c
   14c34:	str	r8, [sp, #112]	; 0x70
   14c38:	ldr	r3, [sp, #44]	; 0x2c
   14c3c:	add	r6, sl, r7
   14c40:	add	r4, r3, r6
   14c44:	ldr	r3, [sp, #24]
   14c48:	mov	r1, r4
   14c4c:	sub	r2, r3, r6
   14c50:	add	r0, sp, #124	; 0x7c
   14c54:	add	r3, sp, #128	; 0x80
   14c58:	bl	19cfc <__assert_fail@plt+0x8db8>
   14c5c:	subs	r8, r0, #0
   14c60:	beq	14fe8 <__assert_fail@plt+0x40a4>
   14c64:	cmn	r8, #1
   14c68:	beq	14fc0 <__assert_fail@plt+0x407c>
   14c6c:	cmn	r8, #2
   14c70:	beq	14f58 <__assert_fail@plt+0x4014>
   14c74:	ldr	r3, [sp, #64]	; 0x40
   14c78:	cmp	r3, #0
   14c7c:	beq	14d3c <__assert_fail@plt+0x3df8>
   14c80:	cmp	r8, #1
   14c84:	beq	14d3c <__assert_fail@plt+0x3df8>
   14c88:	sub	r3, r8, #1
   14c8c:	add	r6, r3, r6
   14c90:	ldr	r3, [sp, #44]	; 0x2c
   14c94:	add	r6, r3, r6
   14c98:	ldrb	r3, [r4, #1]!
   14c9c:	sub	r3, r3, #91	; 0x5b
   14ca0:	cmp	r3, #33	; 0x21
   14ca4:	ldrls	pc, [pc, r3, lsl #2]
   14ca8:	b	14d34 <__assert_fail@plt+0x3df0>
   14cac:	andeq	r4, r1, r0, lsr #27
   14cb0:	andeq	r4, r1, r0, lsr #27
   14cb4:	andeq	r4, r1, r4, lsr sp
   14cb8:	andeq	r4, r1, r0, lsr #27
   14cbc:	andeq	r4, r1, r4, lsr sp
   14cc0:	andeq	r4, r1, r0, lsr #27
   14cc4:	andeq	r4, r1, r4, lsr sp
   14cc8:	andeq	r4, r1, r4, lsr sp
   14ccc:	andeq	r4, r1, r4, lsr sp
   14cd0:	andeq	r4, r1, r4, lsr sp
   14cd4:	andeq	r4, r1, r4, lsr sp
   14cd8:	andeq	r4, r1, r4, lsr sp
   14cdc:	andeq	r4, r1, r4, lsr sp
   14ce0:	andeq	r4, r1, r4, lsr sp
   14ce4:	andeq	r4, r1, r4, lsr sp
   14ce8:	andeq	r4, r1, r4, lsr sp
   14cec:	andeq	r4, r1, r4, lsr sp
   14cf0:	andeq	r4, r1, r4, lsr sp
   14cf4:	andeq	r4, r1, r4, lsr sp
   14cf8:	andeq	r4, r1, r4, lsr sp
   14cfc:	andeq	r4, r1, r4, lsr sp
   14d00:	andeq	r4, r1, r4, lsr sp
   14d04:	andeq	r4, r1, r4, lsr sp
   14d08:	andeq	r4, r1, r4, lsr sp
   14d0c:	andeq	r4, r1, r4, lsr sp
   14d10:	andeq	r4, r1, r4, lsr sp
   14d14:	andeq	r4, r1, r4, lsr sp
   14d18:	andeq	r4, r1, r4, lsr sp
   14d1c:	andeq	r4, r1, r4, lsr sp
   14d20:	andeq	r4, r1, r4, lsr sp
   14d24:	andeq	r4, r1, r4, lsr sp
   14d28:	andeq	r4, r1, r4, lsr sp
   14d2c:	andeq	r4, r1, r4, lsr sp
   14d30:	andeq	r4, r1, r0, lsr #27
   14d34:	cmp	r6, r4
   14d38:	bne	14c98 <__assert_fail@plt+0x3d54>
   14d3c:	ldr	r0, [sp, #124]	; 0x7c
   14d40:	bl	10dac <iswprint@plt>
   14d44:	add	r7, r7, r8
   14d48:	cmp	r0, #0
   14d4c:	add	r0, sp, #128	; 0x80
   14d50:	moveq	r5, #0
   14d54:	bl	10d4c <mbsinit@plt>
   14d58:	cmp	r0, #0
   14d5c:	beq	14c38 <__assert_fail@plt+0x3cf4>
   14d60:	ldr	r4, [sp, #32]
   14d64:	str	r5, [sp, #32]
   14d68:	ldr	r3, [sp, #32]
   14d6c:	mov	r1, r7
   14d70:	eor	r3, r3, #1
   14d74:	ldr	r7, [sp, #104]	; 0x68
   14d78:	ldr	r6, [sp, #108]	; 0x6c
   14d7c:	ldr	r8, [sp, #112]	; 0x70
   14d80:	ldr	r5, [sp, #116]	; 0x74
   14d84:	uxtb	r3, r3
   14d88:	cmp	r1, #1
   14d8c:	bls	14a48 <__assert_fail@plt+0x3b04>
   14d90:	ldr	r2, [sp, #56]	; 0x38
   14d94:	and	r3, r3, r2
   14d98:	uxtb	r3, r3
   14d9c:	b	14a58 <__assert_fail@plt+0x3b14>
   14da0:	mov	r3, #2
   14da4:	str	r3, [sp, #176]	; 0xb0
   14da8:	ldr	r2, [sp, #64]	; 0x40
   14dac:	ldr	r3, [sp, #56]	; 0x38
   14db0:	mov	sl, r9
   14db4:	mov	r9, fp
   14db8:	and	r3, r3, r2
   14dbc:	tst	r3, #255	; 0xff
   14dc0:	ldr	r3, [sp, #176]	; 0xb0
   14dc4:	movne	r3, #4
   14dc8:	str	r3, [sp, #176]	; 0xb0
   14dcc:	ldr	r3, [sp, #180]	; 0xb4
   14dd0:	mov	ip, #0
   14dd4:	bic	r3, r3, #2
   14dd8:	str	r3, [sp, #4]
   14ddc:	ldr	r3, [sp, #192]	; 0xc0
   14de0:	ldr	r2, [sp, #44]	; 0x2c
   14de4:	str	r3, [sp, #16]
   14de8:	ldr	r3, [sp, #188]	; 0xbc
   14dec:	mov	r1, r9
   14df0:	str	r3, [sp, #12]
   14df4:	ldr	r3, [sp, #176]	; 0xb0
   14df8:	mov	r0, sl
   14dfc:	str	r3, [sp]
   14e00:	str	ip, [sp, #8]
   14e04:	ldr	r3, [sp, #24]
   14e08:	bl	13c68 <__assert_fail@plt+0x2d24>
   14e0c:	mov	fp, r0
   14e10:	mov	r0, fp
   14e14:	add	sp, sp, #140	; 0x8c
   14e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e1c:	mov	r4, #92	; 0x5c
   14e20:	mov	r1, #0
   14e24:	mov	r3, r4
   14e28:	b	1441c <__assert_fail@plt+0x34d8>
   14e2c:	mov	r3, #0
   14e30:	ldr	r1, [sp, #52]	; 0x34
   14e34:	str	r3, [sp, #32]
   14e38:	mov	r4, #63	; 0x3f
   14e3c:	b	1423c <__assert_fail@plt+0x32f8>
   14e40:	cmp	fp, #0
   14e44:	beq	14ea0 <__assert_fail@plt+0x3f5c>
   14e48:	mov	r3, #39	; 0x27
   14e4c:	strb	r3, [r9]
   14e50:	mov	r3, #0
   14e54:	str	r3, [sp, #40]	; 0x28
   14e58:	mov	r3, #1
   14e5c:	str	r3, [sp, #68]	; 0x44
   14e60:	ldr	r3, [pc, #448]	; 15028 <__assert_fail@plt+0x40e4>
   14e64:	mov	r8, #1
   14e68:	str	r3, [sp, #72]	; 0x48
   14e6c:	b	14050 <__assert_fail@plt+0x310c>
   14e70:	ldr	r3, [sp, #40]	; 0x28
   14e74:	mov	sl, r9
   14e78:	str	r3, [sp, #56]	; 0x38
   14e7c:	mov	r9, fp
   14e80:	ldr	r2, [sp, #64]	; 0x40
   14e84:	b	14db8 <__assert_fail@plt+0x3e74>
   14e88:	str	r2, [sp, #36]	; 0x24
   14e8c:	b	142a0 <__assert_fail@plt+0x335c>
   14e90:	mov	r1, #0
   14e94:	str	r3, [sp, #32]
   14e98:	mov	r4, #63	; 0x3f
   14e9c:	b	1423c <__assert_fail@plt+0x32f8>
   14ea0:	ldr	r3, [pc, #384]	; 15028 <__assert_fail@plt+0x40e4>
   14ea4:	str	r3, [sp, #72]	; 0x48
   14ea8:	mov	r3, #0
   14eac:	str	r3, [sp, #40]	; 0x28
   14eb0:	mov	r3, #1
   14eb4:	str	r3, [sp, #68]	; 0x44
   14eb8:	mov	r8, r3
   14ebc:	b	14050 <__assert_fail@plt+0x310c>
   14ec0:	bl	10f2c <abort@plt>
   14ec4:	cmp	fp, #0
   14ec8:	beq	14f28 <__assert_fail@plt+0x3fe4>
   14ecc:	mov	r2, #1
   14ed0:	mov	r3, #34	; 0x22
   14ed4:	strb	r3, [r9]
   14ed8:	mov	r8, r2
   14edc:	mov	r3, r2
   14ee0:	str	r2, [sp, #68]	; 0x44
   14ee4:	str	r3, [sp, #56]	; 0x38
   14ee8:	ldr	r3, [pc, #316]	; 1502c <__assert_fail@plt+0x40e8>
   14eec:	ldr	r1, [sp, #56]	; 0x38
   14ef0:	str	r3, [sp, #72]	; 0x48
   14ef4:	ldr	r2, [sp, #176]	; 0xb0
   14ef8:	ldr	ip, [sp, #40]	; 0x28
   14efc:	ldr	lr, [sp, #176]	; 0xb0
   14f00:	b	13d34 <__assert_fail@plt+0x2df0>
   14f04:	ldr	r0, [sp, #44]	; 0x2c
   14f08:	bl	10e6c <strlen@plt>
   14f0c:	str	r0, [sp, #24]
   14f10:	b	14c14 <__assert_fail@plt+0x3cd0>
   14f14:	mov	r7, #0
   14f18:	ldr	r1, [sp, #52]	; 0x34
   14f1c:	str	r3, [sp, #32]
   14f20:	mov	r4, #48	; 0x30
   14f24:	b	1423c <__assert_fail@plt+0x32f8>
   14f28:	mov	r3, #1
   14f2c:	str	r3, [sp, #68]	; 0x44
   14f30:	mov	r8, r3
   14f34:	b	14ee4 <__assert_fail@plt+0x3fa0>
   14f38:	mov	r3, #2
   14f3c:	mov	sl, r9
   14f40:	str	r3, [sp, #176]	; 0xb0
   14f44:	mov	r9, fp
   14f48:	ldr	r3, [sp, #56]	; 0x38
   14f4c:	b	14db8 <__assert_fail@plt+0x3e74>
   14f50:	ldr	r6, [sp, #48]	; 0x30
   14f54:	b	14a04 <__assert_fail@plt+0x3ac0>
   14f58:	ldr	r0, [sp, #24]
   14f5c:	mov	ip, r6
   14f60:	cmp	r0, ip
   14f64:	mov	r1, r7
   14f68:	mov	r2, r4
   14f6c:	ldr	r7, [sp, #104]	; 0x68
   14f70:	ldr	r4, [sp, #32]
   14f74:	ldr	r6, [sp, #108]	; 0x6c
   14f78:	ldr	r8, [sp, #112]	; 0x70
   14f7c:	ldr	r5, [sp, #116]	; 0x74
   14f80:	bls	14fb0 <__assert_fail@plt+0x406c>
   14f84:	ldrb	r3, [r2]
   14f88:	cmp	r3, #0
   14f8c:	bne	14fa0 <__assert_fail@plt+0x405c>
   14f90:	b	150c0 <__assert_fail@plt+0x417c>
   14f94:	ldrb	r3, [r2, #1]!
   14f98:	cmp	r3, #0
   14f9c:	beq	150c0 <__assert_fail@plt+0x417c>
   14fa0:	add	r1, r1, #1
   14fa4:	add	r3, sl, r1
   14fa8:	cmp	r0, r3
   14fac:	bhi	14f94 <__assert_fail@plt+0x4050>
   14fb0:	mov	r2, #0
   14fb4:	mov	r3, r7
   14fb8:	str	r2, [sp, #32]
   14fbc:	b	14d88 <__assert_fail@plt+0x3e44>
   14fc0:	mov	r1, r7
   14fc4:	ldr	r7, [sp, #104]	; 0x68
   14fc8:	mov	r2, #0
   14fcc:	ldr	r4, [sp, #32]
   14fd0:	ldr	r6, [sp, #108]	; 0x6c
   14fd4:	ldr	r8, [sp, #112]	; 0x70
   14fd8:	ldr	r5, [sp, #116]	; 0x74
   14fdc:	mov	r3, r7
   14fe0:	str	r2, [sp, #32]
   14fe4:	b	14d88 <__assert_fail@plt+0x3e44>
   14fe8:	mov	r3, r5
   14fec:	eor	r3, r3, #1
   14ff0:	ldr	r4, [sp, #32]
   14ff4:	mov	r1, r7
   14ff8:	str	r5, [sp, #32]
   14ffc:	ldr	r7, [sp, #104]	; 0x68
   15000:	ldr	r6, [sp, #108]	; 0x6c
   15004:	ldr	r8, [sp, #112]	; 0x70
   15008:	ldr	r5, [sp, #116]	; 0x74
   1500c:	uxtb	r3, r3
   15010:	b	14d88 <__assert_fail@plt+0x3e44>
   15014:	mov	sl, r9
   15018:	str	r3, [sp, #56]	; 0x38
   1501c:	mov	r9, fp
   15020:	ldr	r2, [sp, #64]	; 0x40
   15024:	b	14db8 <__assert_fail@plt+0x3e74>
   15028:	andeq	fp, r1, r4, asr #15
   1502c:	andeq	fp, r1, r0, asr #15
   15030:	andeq	fp, r1, r8, asr #15
   15034:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   15038:	ldr	r2, [sp, #44]	; 0x2c
   1503c:	ldrb	r1, [r2, r3]
   15040:	sub	r2, r1, #33	; 0x21
   15044:	uxtb	r2, r2
   15048:	cmp	r2, #29
   1504c:	bhi	150cc <__assert_fail@plt+0x4188>
   15050:	ldr	r0, [pc, #-36]	; 15034 <__assert_fail@plt+0x40f0>
   15054:	mov	ip, #1
   15058:	ands	r2, r0, ip, lsl r2
   1505c:	beq	150ec <__assert_fail@plt+0x41a8>
   15060:	ldr	r2, [sp, #40]	; 0x28
   15064:	cmp	r2, #0
   15068:	bne	151e0 <__assert_fail@plt+0x429c>
   1506c:	add	r2, r8, #1
   15070:	cmp	fp, r8
   15074:	strbhi	r4, [r9, r8]
   15078:	cmp	fp, r2
   1507c:	movhi	r0, #34	; 0x22
   15080:	strbhi	r0, [r9, r2]
   15084:	add	r2, r8, #2
   15088:	cmp	fp, r2
   1508c:	movhi	r0, #34	; 0x22
   15090:	strbhi	r0, [r9, r2]
   15094:	add	r2, r8, #3
   15098:	cmp	fp, r2
   1509c:	mov	sl, r3
   150a0:	ldr	r3, [sp, #40]	; 0x28
   150a4:	movhi	r0, #63	; 0x3f
   150a8:	mov	r4, r1
   150ac:	strbhi	r0, [r9, r2]
   150b0:	add	r8, r8, #4
   150b4:	mov	r1, r3
   150b8:	str	r3, [sp, #32]
   150bc:	b	1423c <__assert_fail@plt+0x32f8>
   150c0:	str	r3, [sp, #32]
   150c4:	mov	r3, r7
   150c8:	b	14d88 <__assert_fail@plt+0x3e44>
   150cc:	mov	r1, #0
   150d0:	str	r1, [sp, #32]
   150d4:	b	1423c <__assert_fail@plt+0x32f8>
   150d8:	mov	sl, r9
   150dc:	ldr	r3, [sp, #56]	; 0x38
   150e0:	mov	r9, fp
   150e4:	ldr	r2, [sp, #64]	; 0x40
   150e8:	b	14db8 <__assert_fail@plt+0x3e74>
   150ec:	str	r2, [sp, #32]
   150f0:	mov	r1, #0
   150f4:	b	1423c <__assert_fail@plt+0x32f8>
   150f8:	ldr	r2, [sp, #76]	; 0x4c
   150fc:	mov	sl, r9
   15100:	mov	r9, fp
   15104:	mov	fp, r8
   15108:	ldr	r1, [sp, #72]	; 0x48
   1510c:	cmp	r1, #0
   15110:	moveq	r3, #0
   15114:	andne	r3, r2, #1
   15118:	cmp	r3, #0
   1511c:	beq	15148 <__assert_fail@plt+0x4204>
   15120:	ldrb	r3, [r1]
   15124:	cmp	r3, #0
   15128:	beq	15148 <__assert_fail@plt+0x4204>
   1512c:	mov	r2, r1
   15130:	cmp	r9, fp
   15134:	strbhi	r3, [sl, fp]
   15138:	ldrb	r3, [r2, #1]!
   1513c:	add	fp, fp, #1
   15140:	cmp	r3, #0
   15144:	bne	15130 <__assert_fail@plt+0x41ec>
   15148:	cmp	r9, fp
   1514c:	movhi	r3, #0
   15150:	strbhi	r3, [sl, fp]
   15154:	b	14e10 <__assert_fail@plt+0x3ecc>
   15158:	ldr	r3, [sp, #192]	; 0xc0
   1515c:	mov	ip, #5
   15160:	str	r3, [sp, #16]
   15164:	ldr	r3, [sp, #188]	; 0xbc
   15168:	ldr	r2, [sp, #44]	; 0x2c
   1516c:	str	r3, [sp, #12]
   15170:	ldr	r3, [sp, #184]	; 0xb8
   15174:	ldr	r1, [sp, #84]	; 0x54
   15178:	str	r3, [sp, #8]
   1517c:	ldr	r3, [sp, #180]	; 0xb4
   15180:	mov	r0, r9
   15184:	str	r3, [sp, #4]
   15188:	str	ip, [sp]
   1518c:	ldr	r3, [sp, #24]
   15190:	bl	13c68 <__assert_fail@plt+0x2d24>
   15194:	mov	fp, r0
   15198:	b	14e10 <__assert_fail@plt+0x3ecc>
   1519c:	mov	sl, r9
   151a0:	mov	r9, fp
   151a4:	mov	fp, r8
   151a8:	b	15108 <__assert_fail@plt+0x41c4>
   151ac:	ldr	r1, [sp, #176]	; 0xb0
   151b0:	bl	13b48 <__assert_fail@plt+0x2c04>
   151b4:	str	r0, [sp, #192]	; 0xc0
   151b8:	b	14124 <__assert_fail@plt+0x31e0>
   151bc:	ldr	r1, [sp, #176]	; 0xb0
   151c0:	bl	13b48 <__assert_fail@plt+0x2c04>
   151c4:	str	r0, [sp, #188]	; 0xbc
   151c8:	b	14104 <__assert_fail@plt+0x31c0>
   151cc:	mov	sl, r9
   151d0:	mov	r2, r3
   151d4:	mov	r9, fp
   151d8:	mov	fp, r8
   151dc:	b	15108 <__assert_fail@plt+0x41c4>
   151e0:	mov	sl, r9
   151e4:	mov	r9, fp
   151e8:	b	14dcc <__assert_fail@plt+0x3e88>
   151ec:	push	{r4, r5, r6, lr}
   151f0:	mov	r5, r0
   151f4:	bl	10e84 <__errno_location@plt>
   151f8:	cmp	r5, #0
   151fc:	mov	r1, #48	; 0x30
   15200:	mov	r4, r0
   15204:	ldr	r0, [pc, #16]	; 1521c <__assert_fail@plt+0x42d8>
   15208:	ldr	r6, [r4]
   1520c:	movne	r0, r5
   15210:	bl	18af0 <__assert_fail@plt+0x7bac>
   15214:	str	r6, [r4]
   15218:	pop	{r4, r5, r6, pc}
   1521c:	andeq	lr, r2, r0, ror r4
   15220:	ldr	r3, [pc, #12]	; 15234 <__assert_fail@plt+0x42f0>
   15224:	cmp	r0, #0
   15228:	moveq	r0, r3
   1522c:	ldr	r0, [r0]
   15230:	bx	lr
   15234:	andeq	lr, r2, r0, ror r4
   15238:	ldr	r3, [pc, #12]	; 1524c <__assert_fail@plt+0x4308>
   1523c:	cmp	r0, #0
   15240:	moveq	r0, r3
   15244:	str	r1, [r0]
   15248:	bx	lr
   1524c:	andeq	lr, r2, r0, ror r4
   15250:	ldr	r3, [pc, #52]	; 1528c <__assert_fail@plt+0x4348>
   15254:	cmp	r0, #0
   15258:	moveq	r0, r3
   1525c:	add	r3, r0, #8
   15260:	push	{lr}		; (str lr, [sp, #-4]!)
   15264:	lsr	lr, r1, #5
   15268:	and	r1, r1, #31
   1526c:	ldr	ip, [r3, lr, lsl #2]
   15270:	lsr	r0, ip, r1
   15274:	eor	r2, r2, r0
   15278:	and	r2, r2, #1
   1527c:	and	r0, r0, #1
   15280:	eor	r1, ip, r2, lsl r1
   15284:	str	r1, [r3, lr, lsl #2]
   15288:	pop	{pc}		; (ldr pc, [sp], #4)
   1528c:	andeq	lr, r2, r0, ror r4
   15290:	ldr	r3, [pc, #16]	; 152a8 <__assert_fail@plt+0x4364>
   15294:	cmp	r0, #0
   15298:	movne	r3, r0
   1529c:	ldr	r0, [r3, #4]
   152a0:	str	r1, [r3, #4]
   152a4:	bx	lr
   152a8:	andeq	lr, r2, r0, ror r4
   152ac:	ldr	r3, [pc, #44]	; 152e0 <__assert_fail@plt+0x439c>
   152b0:	cmp	r0, #0
   152b4:	moveq	r0, r3
   152b8:	mov	ip, #10
   152bc:	cmp	r2, #0
   152c0:	cmpne	r1, #0
   152c4:	str	ip, [r0]
   152c8:	beq	152d8 <__assert_fail@plt+0x4394>
   152cc:	str	r1, [r0, #40]	; 0x28
   152d0:	str	r2, [r0, #44]	; 0x2c
   152d4:	bx	lr
   152d8:	push	{r4, lr}
   152dc:	bl	10f2c <abort@plt>
   152e0:	andeq	lr, r2, r0, ror r4
   152e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   152e8:	sub	sp, sp, #24
   152ec:	ldr	ip, [pc, #108]	; 15360 <__assert_fail@plt+0x441c>
   152f0:	ldr	r4, [sp, #56]	; 0x38
   152f4:	mov	r9, r2
   152f8:	cmp	r4, #0
   152fc:	moveq	r4, ip
   15300:	mov	sl, r3
   15304:	mov	r7, r0
   15308:	mov	r8, r1
   1530c:	bl	10e84 <__errno_location@plt>
   15310:	ldr	r3, [r4, #44]	; 0x2c
   15314:	mov	r1, r8
   15318:	ldr	r6, [r0]
   1531c:	str	r3, [sp, #16]
   15320:	ldr	r2, [r4, #40]	; 0x28
   15324:	add	r3, r4, #8
   15328:	str	r3, [sp, #8]
   1532c:	str	r2, [sp, #12]
   15330:	ldr	r2, [r4, #4]
   15334:	mov	r5, r0
   15338:	str	r2, [sp, #4]
   1533c:	ldr	ip, [r4]
   15340:	mov	r3, sl
   15344:	mov	r2, r9
   15348:	mov	r0, r7
   1534c:	str	ip, [sp]
   15350:	bl	13c68 <__assert_fail@plt+0x2d24>
   15354:	str	r6, [r5]
   15358:	add	sp, sp, #24
   1535c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15360:	andeq	lr, r2, r0, ror r4
   15364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15368:	cmp	r2, #0
   1536c:	sub	sp, sp, #36	; 0x24
   15370:	ldr	r4, [pc, #164]	; 1541c <__assert_fail@plt+0x44d8>
   15374:	mov	r8, r1
   15378:	movne	r4, r2
   1537c:	mov	r7, r0
   15380:	bl	10e84 <__errno_location@plt>
   15384:	ldr	r3, [r4, #44]	; 0x2c
   15388:	ldr	r5, [r4, #4]
   1538c:	add	r9, r4, #8
   15390:	orr	r5, r5, #1
   15394:	mov	r1, #0
   15398:	mov	r2, r7
   1539c:	ldr	fp, [r0]
   153a0:	str	r3, [sp, #16]
   153a4:	ldr	r3, [r4, #40]	; 0x28
   153a8:	stmib	sp, {r5, r9}
   153ac:	str	r3, [sp, #12]
   153b0:	ldr	r3, [r4]
   153b4:	mov	r6, r0
   153b8:	str	r3, [sp]
   153bc:	mov	r0, r1
   153c0:	mov	r3, r8
   153c4:	bl	13c68 <__assert_fail@plt+0x2d24>
   153c8:	add	r1, r0, #1
   153cc:	mov	r0, r1
   153d0:	str	r1, [sp, #28]
   153d4:	bl	185ac <__assert_fail@plt+0x7668>
   153d8:	ldr	r3, [r4, #44]	; 0x2c
   153dc:	ldr	r1, [sp, #28]
   153e0:	str	r3, [sp, #16]
   153e4:	ldr	r3, [r4, #40]	; 0x28
   153e8:	str	r5, [sp, #4]
   153ec:	str	r3, [sp, #12]
   153f0:	str	r9, [sp, #8]
   153f4:	ldr	ip, [r4]
   153f8:	mov	r3, r8
   153fc:	mov	r2, r7
   15400:	str	ip, [sp]
   15404:	mov	sl, r0
   15408:	bl	13c68 <__assert_fail@plt+0x2d24>
   1540c:	mov	r0, sl
   15410:	str	fp, [r6]
   15414:	add	sp, sp, #36	; 0x24
   15418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1541c:	andeq	lr, r2, r0, ror r4
   15420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15424:	cmp	r3, #0
   15428:	sub	sp, sp, #44	; 0x2c
   1542c:	ldr	r4, [pc, #192]	; 154f4 <__assert_fail@plt+0x45b0>
   15430:	mov	r6, r2
   15434:	movne	r4, r3
   15438:	mov	r9, r1
   1543c:	mov	r8, r0
   15440:	bl	10e84 <__errno_location@plt>
   15444:	ldr	r3, [r4, #44]	; 0x2c
   15448:	ldr	r5, [r4, #4]
   1544c:	add	sl, r4, #8
   15450:	cmp	r6, #0
   15454:	orreq	r5, r5, #1
   15458:	mov	r1, #0
   1545c:	ldr	r2, [r0]
   15460:	str	r3, [sp, #16]
   15464:	ldr	r3, [r4, #40]	; 0x28
   15468:	stmib	sp, {r5, sl}
   1546c:	str	r3, [sp, #12]
   15470:	ldr	r3, [r4]
   15474:	mov	r7, r0
   15478:	str	r2, [sp, #28]
   1547c:	str	r3, [sp]
   15480:	mov	r2, r8
   15484:	mov	r3, r9
   15488:	mov	r0, r1
   1548c:	bl	13c68 <__assert_fail@plt+0x2d24>
   15490:	add	r1, r0, #1
   15494:	mov	fp, r0
   15498:	mov	r0, r1
   1549c:	str	r1, [sp, #36]	; 0x24
   154a0:	bl	185ac <__assert_fail@plt+0x7668>
   154a4:	ldr	r3, [r4, #44]	; 0x2c
   154a8:	mov	r2, r8
   154ac:	str	r3, [sp, #16]
   154b0:	ldr	r3, [r4, #40]	; 0x28
   154b4:	str	r5, [sp, #4]
   154b8:	str	r3, [sp, #12]
   154bc:	str	sl, [sp, #8]
   154c0:	ldr	ip, [r4]
   154c4:	ldr	r1, [sp, #36]	; 0x24
   154c8:	mov	r3, r9
   154cc:	str	ip, [sp]
   154d0:	str	r0, [sp, #32]
   154d4:	bl	13c68 <__assert_fail@plt+0x2d24>
   154d8:	ldr	r2, [sp, #28]
   154dc:	cmp	r6, #0
   154e0:	str	r2, [r7]
   154e4:	ldr	r0, [sp, #32]
   154e8:	strne	fp, [r6]
   154ec:	add	sp, sp, #44	; 0x2c
   154f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154f4:	andeq	lr, r2, r0, ror r4
   154f8:	push	{r4, r5, r6, r7, r8, lr}
   154fc:	ldr	r6, [pc, #116]	; 15578 <__assert_fail@plt+0x4634>
   15500:	ldr	r3, [r6, #4]
   15504:	ldr	r7, [r6]
   15508:	cmp	r3, #1
   1550c:	movgt	r5, r7
   15510:	movgt	r4, #1
   15514:	ble	15534 <__assert_fail@plt+0x45f0>
   15518:	ldr	r0, [r5, #12]
   1551c:	bl	13a3c <__assert_fail@plt+0x2af8>
   15520:	ldr	r3, [r6, #4]
   15524:	add	r4, r4, #1
   15528:	cmp	r3, r4
   1552c:	add	r5, r5, #8
   15530:	bgt	15518 <__assert_fail@plt+0x45d4>
   15534:	ldr	r0, [r7, #4]
   15538:	ldr	r4, [pc, #60]	; 1557c <__assert_fail@plt+0x4638>
   1553c:	cmp	r0, r4
   15540:	beq	15554 <__assert_fail@plt+0x4610>
   15544:	bl	13a3c <__assert_fail@plt+0x2af8>
   15548:	mov	r3, #256	; 0x100
   1554c:	str	r4, [r6, #12]
   15550:	str	r3, [r6, #8]
   15554:	ldr	r4, [pc, #36]	; 15580 <__assert_fail@plt+0x463c>
   15558:	cmp	r7, r4
   1555c:	beq	1556c <__assert_fail@plt+0x4628>
   15560:	mov	r0, r7
   15564:	bl	13a3c <__assert_fail@plt+0x2af8>
   15568:	str	r4, [r6]
   1556c:	mov	r3, #1
   15570:	str	r3, [r6, #4]
   15574:	pop	{r4, r5, r6, r7, r8, pc}
   15578:	strdeq	ip, [r2], -r8
   1557c:	andeq	lr, r2, r0, lsr #9
   15580:	andeq	ip, r2, r0, lsl #2
   15584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15588:	sub	sp, sp, #44	; 0x2c
   1558c:	mov	r5, r0
   15590:	mov	sl, r1
   15594:	bl	10e84 <__errno_location@plt>
   15598:	ldr	r4, [pc, #400]	; 15730 <__assert_fail@plt+0x47ec>
   1559c:	cmn	r5, #-2147483647	; 0x80000001
   155a0:	ldr	r6, [r4]
   155a4:	mov	r8, r0
   155a8:	movne	r0, #0
   155ac:	moveq	r0, #1
   155b0:	ldr	r3, [r8]
   155b4:	orrs	r0, r0, r5, lsr #31
   155b8:	str	r3, [sp, #24]
   155bc:	bne	1572c <__assert_fail@plt+0x47e8>
   155c0:	ldr	r2, [r4, #4]
   155c4:	cmp	r5, r2
   155c8:	blt	15628 <__assert_fail@plt+0x46e4>
   155cc:	add	r7, r4, #8
   155d0:	cmp	r6, r7
   155d4:	str	r2, [sp, #36]	; 0x24
   155d8:	beq	156fc <__assert_fail@plt+0x47b8>
   155dc:	mov	r3, #8
   155e0:	sub	r2, r5, r2
   155e4:	mov	r0, r6
   155e8:	str	r3, [sp]
   155ec:	add	r2, r2, #1
   155f0:	mvn	r3, #-2147483648	; 0x80000000
   155f4:	add	r1, sp, #36	; 0x24
   155f8:	bl	187c8 <__assert_fail@plt+0x7884>
   155fc:	mov	r6, r0
   15600:	str	r0, [r4]
   15604:	ldr	r0, [r4, #4]
   15608:	ldr	r2, [sp, #36]	; 0x24
   1560c:	mov	r1, #0
   15610:	sub	r2, r2, r0
   15614:	add	r0, r6, r0, lsl #3
   15618:	lsl	r2, r2, #3
   1561c:	bl	10ea8 <memset@plt>
   15620:	ldr	r3, [sp, #36]	; 0x24
   15624:	str	r3, [r4, #4]
   15628:	ldr	r4, [pc, #260]	; 15734 <__assert_fail@plt+0x47f0>
   1562c:	add	fp, r6, r5, lsl #3
   15630:	ldr	r9, [r6, r5, lsl #3]
   15634:	ldr	r0, [r4, #4]
   15638:	ldr	r3, [r4]
   1563c:	ldr	r7, [fp, #4]
   15640:	ldr	r1, [r4, #44]	; 0x2c
   15644:	ldr	r2, [r4, #40]	; 0x28
   15648:	orr	r0, r0, #1
   1564c:	str	r3, [sp]
   15650:	add	r3, r4, #8
   15654:	str	r0, [sp, #28]
   15658:	str	r0, [sp, #4]
   1565c:	str	r1, [sp, #16]
   15660:	str	r2, [sp, #12]
   15664:	str	r3, [sp, #8]
   15668:	mov	r0, r7
   1566c:	mov	r1, r9
   15670:	mvn	r3, #0
   15674:	mov	r2, sl
   15678:	bl	13c68 <__assert_fail@plt+0x2d24>
   1567c:	cmp	r9, r0
   15680:	bhi	156e8 <__assert_fail@plt+0x47a4>
   15684:	add	r3, r4, #48	; 0x30
   15688:	add	r9, r0, #1
   1568c:	cmp	r7, r3
   15690:	str	r9, [r6, r5, lsl #3]
   15694:	beq	156a0 <__assert_fail@plt+0x475c>
   15698:	mov	r0, r7
   1569c:	bl	13a3c <__assert_fail@plt+0x2af8>
   156a0:	mov	r0, r9
   156a4:	bl	185ac <__assert_fail@plt+0x7668>
   156a8:	ldr	ip, [r4, #44]	; 0x2c
   156ac:	ldr	r3, [r4]
   156b0:	ldr	lr, [r4, #40]	; 0x28
   156b4:	ldr	r4, [pc, #124]	; 15738 <__assert_fail@plt+0x47f4>
   156b8:	mov	r2, sl
   156bc:	mov	r1, r9
   156c0:	str	r0, [fp, #4]
   156c4:	str	r4, [sp, #8]
   156c8:	ldr	r4, [sp, #28]
   156cc:	str	r3, [sp]
   156d0:	str	r4, [sp, #4]
   156d4:	str	ip, [sp, #16]
   156d8:	str	lr, [sp, #12]
   156dc:	mvn	r3, #0
   156e0:	mov	r7, r0
   156e4:	bl	13c68 <__assert_fail@plt+0x2d24>
   156e8:	ldr	r3, [sp, #24]
   156ec:	mov	r0, r7
   156f0:	str	r3, [r8]
   156f4:	add	sp, sp, #44	; 0x2c
   156f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156fc:	mov	r3, #8
   15700:	sub	r2, r5, r2
   15704:	str	r3, [sp]
   15708:	add	r1, sp, #36	; 0x24
   1570c:	add	r2, r2, #1
   15710:	mvn	r3, #-2147483648	; 0x80000000
   15714:	bl	187c8 <__assert_fail@plt+0x7884>
   15718:	mov	r6, r0
   1571c:	ldm	r7, {r0, r1}
   15720:	str	r6, [r4]
   15724:	stm	r6, {r0, r1}
   15728:	b	15604 <__assert_fail@plt+0x46c0>
   1572c:	bl	10f2c <abort@plt>
   15730:	strdeq	ip, [r2], -r8
   15734:	andeq	lr, r2, r0, ror r4
   15738:	andeq	lr, r2, r8, ror r4
   1573c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15740:	sub	sp, sp, #52	; 0x34
   15744:	mov	r5, r0
   15748:	mov	sl, r1
   1574c:	mov	fp, r2
   15750:	bl	10e84 <__errno_location@plt>
   15754:	ldr	r4, [pc, #408]	; 158f4 <__assert_fail@plt+0x49b0>
   15758:	cmn	r5, #-2147483647	; 0x80000001
   1575c:	ldr	r6, [r4]
   15760:	mov	r8, r0
   15764:	movne	r0, #0
   15768:	moveq	r0, #1
   1576c:	ldr	r3, [r8]
   15770:	orrs	r0, r0, r5, lsr #31
   15774:	str	r3, [sp, #28]
   15778:	bne	158f0 <__assert_fail@plt+0x49ac>
   1577c:	ldr	r2, [r4, #4]
   15780:	cmp	r5, r2
   15784:	blt	157e4 <__assert_fail@plt+0x48a0>
   15788:	add	r7, r4, #8
   1578c:	cmp	r6, r7
   15790:	str	r2, [sp, #44]	; 0x2c
   15794:	beq	158c0 <__assert_fail@plt+0x497c>
   15798:	mov	r3, #8
   1579c:	sub	r2, r5, r2
   157a0:	mov	r0, r6
   157a4:	str	r3, [sp]
   157a8:	add	r2, r2, #1
   157ac:	mvn	r3, #-2147483648	; 0x80000000
   157b0:	add	r1, sp, #44	; 0x2c
   157b4:	bl	187c8 <__assert_fail@plt+0x7884>
   157b8:	mov	r6, r0
   157bc:	str	r0, [r4]
   157c0:	ldr	r0, [r4, #4]
   157c4:	ldr	r2, [sp, #44]	; 0x2c
   157c8:	mov	r1, #0
   157cc:	sub	r2, r2, r0
   157d0:	add	r0, r6, r0, lsl #3
   157d4:	lsl	r2, r2, #3
   157d8:	bl	10ea8 <memset@plt>
   157dc:	ldr	r3, [sp, #44]	; 0x2c
   157e0:	str	r3, [r4, #4]
   157e4:	ldr	r4, [pc, #268]	; 158f8 <__assert_fail@plt+0x49b4>
   157e8:	add	r3, r6, r5, lsl #3
   157ec:	str	r3, [sp, #32]
   157f0:	ldr	r7, [r3, #4]
   157f4:	ldr	r0, [r4, #4]
   157f8:	ldr	r3, [r4]
   157fc:	ldr	r9, [r6, r5, lsl #3]
   15800:	ldr	r1, [r4, #44]	; 0x2c
   15804:	ldr	r2, [r4, #40]	; 0x28
   15808:	orr	r0, r0, #1
   1580c:	str	r3, [sp]
   15810:	add	r3, r4, #8
   15814:	str	r0, [sp, #36]	; 0x24
   15818:	str	r0, [sp, #4]
   1581c:	str	r1, [sp, #16]
   15820:	str	r2, [sp, #12]
   15824:	str	r3, [sp, #8]
   15828:	mov	r0, r7
   1582c:	mov	r1, r9
   15830:	mov	r3, fp
   15834:	mov	r2, sl
   15838:	bl	13c68 <__assert_fail@plt+0x2d24>
   1583c:	cmp	r9, r0
   15840:	bhi	158ac <__assert_fail@plt+0x4968>
   15844:	add	r3, r4, #48	; 0x30
   15848:	add	r9, r0, #1
   1584c:	cmp	r7, r3
   15850:	str	r9, [r6, r5, lsl #3]
   15854:	beq	15860 <__assert_fail@plt+0x491c>
   15858:	mov	r0, r7
   1585c:	bl	13a3c <__assert_fail@plt+0x2af8>
   15860:	mov	r0, r9
   15864:	bl	185ac <__assert_fail@plt+0x7668>
   15868:	ldr	ip, [sp, #32]
   1586c:	ldr	lr, [r4, #44]	; 0x2c
   15870:	ldr	r5, [r4, #40]	; 0x28
   15874:	mov	r3, fp
   15878:	mov	r2, sl
   1587c:	mov	r1, r9
   15880:	str	r0, [ip, #4]
   15884:	ldr	ip, [r4]
   15888:	ldr	r4, [pc, #108]	; 158fc <__assert_fail@plt+0x49b8>
   1588c:	str	lr, [sp, #16]
   15890:	str	r4, [sp, #8]
   15894:	ldr	r4, [sp, #36]	; 0x24
   15898:	str	r5, [sp, #12]
   1589c:	str	r4, [sp, #4]
   158a0:	str	ip, [sp]
   158a4:	mov	r7, r0
   158a8:	bl	13c68 <__assert_fail@plt+0x2d24>
   158ac:	ldr	r3, [sp, #28]
   158b0:	mov	r0, r7
   158b4:	str	r3, [r8]
   158b8:	add	sp, sp, #52	; 0x34
   158bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158c0:	mov	r3, #8
   158c4:	sub	r2, r5, r2
   158c8:	str	r3, [sp]
   158cc:	add	r1, sp, #44	; 0x2c
   158d0:	add	r2, r2, #1
   158d4:	mvn	r3, #-2147483648	; 0x80000000
   158d8:	bl	187c8 <__assert_fail@plt+0x7884>
   158dc:	mov	r6, r0
   158e0:	ldm	r7, {r0, r1}
   158e4:	str	r6, [r4]
   158e8:	stm	r6, {r0, r1}
   158ec:	b	157c0 <__assert_fail@plt+0x487c>
   158f0:	bl	10f2c <abort@plt>
   158f4:	strdeq	ip, [r2], -r8
   158f8:	andeq	lr, r2, r0, ror r4
   158fc:	andeq	lr, r2, r8, ror r4
   15900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15904:	sub	sp, sp, #44	; 0x2c
   15908:	mov	sl, r0
   1590c:	bl	10e84 <__errno_location@plt>
   15910:	ldr	r4, [pc, #352]	; 15a78 <__assert_fail@plt+0x4b34>
   15914:	ldr	r2, [r4, #4]
   15918:	ldr	r5, [r4]
   1591c:	cmp	r2, #0
   15920:	ldr	r3, [r0]
   15924:	mov	r8, r0
   15928:	str	r3, [sp, #28]
   1592c:	bgt	15988 <__assert_fail@plt+0x4a44>
   15930:	add	r6, r4, #8
   15934:	cmp	r5, r6
   15938:	str	r2, [sp, #36]	; 0x24
   1593c:	beq	15a48 <__assert_fail@plt+0x4b04>
   15940:	mov	r3, #8
   15944:	mov	r0, r5
   15948:	str	r3, [sp]
   1594c:	rsb	r2, r2, #1
   15950:	mvn	r3, #-2147483648	; 0x80000000
   15954:	add	r1, sp, #36	; 0x24
   15958:	bl	187c8 <__assert_fail@plt+0x7884>
   1595c:	mov	r5, r0
   15960:	str	r0, [r4]
   15964:	ldr	r0, [r4, #4]
   15968:	ldr	r2, [sp, #36]	; 0x24
   1596c:	mov	r1, #0
   15970:	sub	r2, r2, r0
   15974:	add	r0, r5, r0, lsl #3
   15978:	lsl	r2, r2, #3
   1597c:	bl	10ea8 <memset@plt>
   15980:	ldr	r3, [sp, #36]	; 0x24
   15984:	str	r3, [r4, #4]
   15988:	ldr	r4, [pc, #236]	; 15a7c <__assert_fail@plt+0x4b38>
   1598c:	ldr	r9, [r5]
   15990:	ldr	r6, [r5, #4]
   15994:	ldr	r7, [r4, #4]
   15998:	ldr	r1, [r4, #44]	; 0x2c
   1599c:	ldr	r2, [r4, #40]	; 0x28
   159a0:	ldr	r3, [r4]
   159a4:	orr	r7, r7, #1
   159a8:	add	fp, r4, #8
   159ac:	str	r1, [sp, #16]
   159b0:	str	r2, [sp, #12]
   159b4:	str	r3, [sp]
   159b8:	str	r7, [sp, #4]
   159bc:	str	fp, [sp, #8]
   159c0:	mov	r1, r9
   159c4:	mov	r0, r6
   159c8:	mvn	r3, #0
   159cc:	mov	r2, sl
   159d0:	bl	13c68 <__assert_fail@plt+0x2d24>
   159d4:	cmp	r9, r0
   159d8:	bhi	15a34 <__assert_fail@plt+0x4af0>
   159dc:	add	r3, r4, #48	; 0x30
   159e0:	add	r9, r0, #1
   159e4:	cmp	r6, r3
   159e8:	str	r9, [r5]
   159ec:	beq	159f8 <__assert_fail@plt+0x4ab4>
   159f0:	mov	r0, r6
   159f4:	bl	13a3c <__assert_fail@plt+0x2af8>
   159f8:	mov	r0, r9
   159fc:	bl	185ac <__assert_fail@plt+0x7668>
   15a00:	ldr	ip, [r4, #44]	; 0x2c
   15a04:	ldr	r3, [r4]
   15a08:	ldr	lr, [r4, #40]	; 0x28
   15a0c:	mov	r2, sl
   15a10:	mov	r1, r9
   15a14:	str	r0, [r5, #4]
   15a18:	str	r3, [sp]
   15a1c:	stmib	sp, {r7, fp}
   15a20:	str	ip, [sp, #16]
   15a24:	str	lr, [sp, #12]
   15a28:	mvn	r3, #0
   15a2c:	mov	r6, r0
   15a30:	bl	13c68 <__assert_fail@plt+0x2d24>
   15a34:	ldr	r3, [sp, #28]
   15a38:	mov	r0, r6
   15a3c:	str	r3, [r8]
   15a40:	add	sp, sp, #44	; 0x2c
   15a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a48:	mov	r3, #8
   15a4c:	str	r3, [sp]
   15a50:	add	r1, sp, #36	; 0x24
   15a54:	rsb	r2, r2, #1
   15a58:	mvn	r3, #-2147483648	; 0x80000000
   15a5c:	mov	r0, #0
   15a60:	bl	187c8 <__assert_fail@plt+0x7884>
   15a64:	mov	r5, r0
   15a68:	ldm	r6, {r0, r1}
   15a6c:	str	r5, [r4]
   15a70:	stm	r5, {r0, r1}
   15a74:	b	15964 <__assert_fail@plt+0x4a20>
   15a78:	strdeq	ip, [r2], -r8
   15a7c:	andeq	lr, r2, r0, ror r4
   15a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a84:	sub	sp, sp, #44	; 0x2c
   15a88:	mov	r9, r0
   15a8c:	mov	sl, r1
   15a90:	bl	10e84 <__errno_location@plt>
   15a94:	ldr	r4, [pc, #364]	; 15c08 <__assert_fail@plt+0x4cc4>
   15a98:	ldr	r2, [r4, #4]
   15a9c:	ldr	r5, [r4]
   15aa0:	cmp	r2, #0
   15aa4:	ldr	r3, [r0]
   15aa8:	mov	r7, r0
   15aac:	str	r3, [sp, #24]
   15ab0:	bgt	15b0c <__assert_fail@plt+0x4bc8>
   15ab4:	add	r6, r4, #8
   15ab8:	cmp	r5, r6
   15abc:	str	r2, [sp, #36]	; 0x24
   15ac0:	beq	15bd8 <__assert_fail@plt+0x4c94>
   15ac4:	mov	r3, #8
   15ac8:	mov	r0, r5
   15acc:	str	r3, [sp]
   15ad0:	rsb	r2, r2, #1
   15ad4:	mvn	r3, #-2147483648	; 0x80000000
   15ad8:	add	r1, sp, #36	; 0x24
   15adc:	bl	187c8 <__assert_fail@plt+0x7884>
   15ae0:	mov	r5, r0
   15ae4:	str	r0, [r4]
   15ae8:	ldr	r0, [r4, #4]
   15aec:	ldr	r2, [sp, #36]	; 0x24
   15af0:	mov	r1, #0
   15af4:	sub	r2, r2, r0
   15af8:	add	r0, r5, r0, lsl #3
   15afc:	lsl	r2, r2, #3
   15b00:	bl	10ea8 <memset@plt>
   15b04:	ldr	r3, [sp, #36]	; 0x24
   15b08:	str	r3, [r4, #4]
   15b0c:	ldr	r4, [pc, #248]	; 15c0c <__assert_fail@plt+0x4cc8>
   15b10:	ldr	r8, [r5]
   15b14:	ldr	r6, [r5, #4]
   15b18:	ldr	r0, [r4, #4]
   15b1c:	ldr	r1, [r4, #44]	; 0x2c
   15b20:	ldr	r2, [r4, #40]	; 0x28
   15b24:	ldr	r3, [r4]
   15b28:	orr	r0, r0, #1
   15b2c:	add	fp, r4, #8
   15b30:	str	r0, [sp, #28]
   15b34:	str	r0, [sp, #4]
   15b38:	str	r1, [sp, #16]
   15b3c:	str	r2, [sp, #12]
   15b40:	str	r3, [sp]
   15b44:	str	fp, [sp, #8]
   15b48:	mov	r1, r8
   15b4c:	mov	r0, r6
   15b50:	mov	r3, sl
   15b54:	mov	r2, r9
   15b58:	bl	13c68 <__assert_fail@plt+0x2d24>
   15b5c:	cmp	r8, r0
   15b60:	bhi	15bc4 <__assert_fail@plt+0x4c80>
   15b64:	add	r3, r4, #48	; 0x30
   15b68:	add	r8, r0, #1
   15b6c:	cmp	r6, r3
   15b70:	str	r8, [r5]
   15b74:	beq	15b80 <__assert_fail@plt+0x4c3c>
   15b78:	mov	r0, r6
   15b7c:	bl	13a3c <__assert_fail@plt+0x2af8>
   15b80:	mov	r0, r8
   15b84:	bl	185ac <__assert_fail@plt+0x7668>
   15b88:	ldr	lr, [r4, #44]	; 0x2c
   15b8c:	ldr	ip, [r4]
   15b90:	mov	r3, sl
   15b94:	mov	r2, r9
   15b98:	mov	r1, r8
   15b9c:	str	r0, [r5, #4]
   15ba0:	ldr	r5, [r4, #40]	; 0x28
   15ba4:	ldr	r4, [sp, #28]
   15ba8:	str	fp, [sp, #8]
   15bac:	str	r4, [sp, #4]
   15bb0:	str	lr, [sp, #16]
   15bb4:	str	r5, [sp, #12]
   15bb8:	str	ip, [sp]
   15bbc:	mov	r6, r0
   15bc0:	bl	13c68 <__assert_fail@plt+0x2d24>
   15bc4:	ldr	r3, [sp, #24]
   15bc8:	mov	r0, r6
   15bcc:	str	r3, [r7]
   15bd0:	add	sp, sp, #44	; 0x2c
   15bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bd8:	mov	r3, #8
   15bdc:	str	r3, [sp]
   15be0:	add	r1, sp, #36	; 0x24
   15be4:	rsb	r2, r2, #1
   15be8:	mvn	r3, #-2147483648	; 0x80000000
   15bec:	mov	r0, #0
   15bf0:	bl	187c8 <__assert_fail@plt+0x7884>
   15bf4:	mov	r5, r0
   15bf8:	ldm	r6, {r0, r1}
   15bfc:	str	r5, [r4]
   15c00:	stm	r5, {r0, r1}
   15c04:	b	15ae8 <__assert_fail@plt+0x4ba4>
   15c08:	strdeq	ip, [r2], -r8
   15c0c:	andeq	lr, r2, r0, ror r4
   15c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c14:	sub	sp, sp, #132	; 0x84
   15c18:	mov	r5, r1
   15c1c:	mov	r4, r0
   15c20:	mov	r9, r2
   15c24:	add	r0, sp, #80	; 0x50
   15c28:	mov	r2, #48	; 0x30
   15c2c:	mov	r1, #0
   15c30:	bl	10ea8 <memset@plt>
   15c34:	cmp	r5, #10
   15c38:	beq	15df0 <__assert_fail@plt+0x4eac>
   15c3c:	add	lr, sp, #80	; 0x50
   15c40:	str	r5, [sp, #80]	; 0x50
   15c44:	ldm	lr!, {r0, r1, r2, r3}
   15c48:	add	ip, sp, #32
   15c4c:	ldr	r6, [pc, #416]	; 15df4 <__assert_fail@plt+0x4eb0>
   15c50:	stmia	ip!, {r0, r1, r2, r3}
   15c54:	ldm	lr!, {r0, r1, r2, r3}
   15c58:	stmia	ip!, {r0, r1, r2, r3}
   15c5c:	ldm	lr, {r0, r1, r2, r3}
   15c60:	stm	ip, {r0, r1, r2, r3}
   15c64:	bl	10e84 <__errno_location@plt>
   15c68:	cmn	r4, #-2147483647	; 0x80000001
   15c6c:	ldr	r5, [r6]
   15c70:	mov	r7, r0
   15c74:	movne	r0, #0
   15c78:	moveq	r0, #1
   15c7c:	ldr	r3, [r7]
   15c80:	orrs	r0, r0, r4, lsr #31
   15c84:	str	r3, [sp, #24]
   15c88:	bne	15df0 <__assert_fail@plt+0x4eac>
   15c8c:	ldr	r2, [r6, #4]
   15c90:	cmp	r4, r2
   15c94:	blt	15cf4 <__assert_fail@plt+0x4db0>
   15c98:	add	r8, r6, #8
   15c9c:	cmp	r5, r8
   15ca0:	str	r2, [sp, #80]	; 0x50
   15ca4:	beq	15dc0 <__assert_fail@plt+0x4e7c>
   15ca8:	mov	r3, #8
   15cac:	sub	r2, r4, r2
   15cb0:	mov	r0, r5
   15cb4:	str	r3, [sp]
   15cb8:	add	r2, r2, #1
   15cbc:	add	r1, sp, #80	; 0x50
   15cc0:	mvn	r3, #-2147483648	; 0x80000000
   15cc4:	bl	187c8 <__assert_fail@plt+0x7884>
   15cc8:	mov	r5, r0
   15ccc:	str	r0, [r6]
   15cd0:	ldr	r0, [r6, #4]
   15cd4:	ldr	r2, [sp, #80]	; 0x50
   15cd8:	mov	r1, #0
   15cdc:	sub	r2, r2, r0
   15ce0:	add	r0, r5, r0, lsl #3
   15ce4:	lsl	r2, r2, #3
   15ce8:	bl	10ea8 <memset@plt>
   15cec:	ldr	r3, [sp, #80]	; 0x50
   15cf0:	str	r3, [r6, #4]
   15cf4:	add	fp, r5, r4, lsl #3
   15cf8:	ldr	r1, [sp, #36]	; 0x24
   15cfc:	ldr	r8, [r5, r4, lsl #3]
   15d00:	ldr	r6, [fp, #4]
   15d04:	ldr	r2, [sp, #72]	; 0x48
   15d08:	ldr	r3, [sp, #32]
   15d0c:	ldr	ip, [sp, #76]	; 0x4c
   15d10:	orr	r1, r1, #1
   15d14:	add	sl, sp, #40	; 0x28
   15d18:	str	r1, [sp, #28]
   15d1c:	str	r1, [sp, #4]
   15d20:	str	r2, [sp, #12]
   15d24:	str	r3, [sp]
   15d28:	mov	r0, r6
   15d2c:	mov	r1, r8
   15d30:	str	ip, [sp, #16]
   15d34:	str	sl, [sp, #8]
   15d38:	mvn	r3, #0
   15d3c:	mov	r2, r9
   15d40:	bl	13c68 <__assert_fail@plt+0x2d24>
   15d44:	cmp	r8, r0
   15d48:	bhi	15dac <__assert_fail@plt+0x4e68>
   15d4c:	ldr	r3, [pc, #164]	; 15df8 <__assert_fail@plt+0x4eb4>
   15d50:	add	r8, r0, #1
   15d54:	cmp	r6, r3
   15d58:	str	r8, [r5, r4, lsl #3]
   15d5c:	beq	15d68 <__assert_fail@plt+0x4e24>
   15d60:	mov	r0, r6
   15d64:	bl	13a3c <__assert_fail@plt+0x2af8>
   15d68:	mov	r0, r8
   15d6c:	bl	185ac <__assert_fail@plt+0x7668>
   15d70:	ldr	lr, [sp, #76]	; 0x4c
   15d74:	ldr	r3, [sp, #32]
   15d78:	ldr	ip, [sp, #72]	; 0x48
   15d7c:	ldr	r4, [sp, #28]
   15d80:	mov	r2, r9
   15d84:	mov	r1, r8
   15d88:	str	r0, [fp, #4]
   15d8c:	str	r3, [sp]
   15d90:	str	sl, [sp, #8]
   15d94:	str	r4, [sp, #4]
   15d98:	str	lr, [sp, #16]
   15d9c:	str	ip, [sp, #12]
   15da0:	mvn	r3, #0
   15da4:	mov	r6, r0
   15da8:	bl	13c68 <__assert_fail@plt+0x2d24>
   15dac:	ldr	r3, [sp, #24]
   15db0:	mov	r0, r6
   15db4:	str	r3, [r7]
   15db8:	add	sp, sp, #132	; 0x84
   15dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dc0:	mov	r3, #8
   15dc4:	sub	r2, r4, r2
   15dc8:	add	r1, sp, #80	; 0x50
   15dcc:	str	r3, [sp]
   15dd0:	add	r2, r2, #1
   15dd4:	mvn	r3, #-2147483648	; 0x80000000
   15dd8:	bl	187c8 <__assert_fail@plt+0x7884>
   15ddc:	mov	r5, r0
   15de0:	ldm	r8, {r0, r1}
   15de4:	str	r5, [r6]
   15de8:	stm	r5, {r0, r1}
   15dec:	b	15cd0 <__assert_fail@plt+0x4d8c>
   15df0:	bl	10f2c <abort@plt>
   15df4:	strdeq	ip, [r2], -r8
   15df8:	andeq	lr, r2, r0, lsr #9
   15dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e00:	sub	sp, sp, #132	; 0x84
   15e04:	mov	r5, r1
   15e08:	mov	r4, r0
   15e0c:	mov	r9, r2
   15e10:	add	r0, sp, #80	; 0x50
   15e14:	mov	r2, #48	; 0x30
   15e18:	mov	r1, #0
   15e1c:	mov	sl, r3
   15e20:	bl	10ea8 <memset@plt>
   15e24:	cmp	r5, #10
   15e28:	beq	15fe4 <__assert_fail@plt+0x50a0>
   15e2c:	add	lr, sp, #80	; 0x50
   15e30:	str	r5, [sp, #80]	; 0x50
   15e34:	ldm	lr!, {r0, r1, r2, r3}
   15e38:	add	ip, sp, #32
   15e3c:	ldr	r6, [pc, #420]	; 15fe8 <__assert_fail@plt+0x50a4>
   15e40:	stmia	ip!, {r0, r1, r2, r3}
   15e44:	ldm	lr!, {r0, r1, r2, r3}
   15e48:	stmia	ip!, {r0, r1, r2, r3}
   15e4c:	ldm	lr, {r0, r1, r2, r3}
   15e50:	stm	ip, {r0, r1, r2, r3}
   15e54:	bl	10e84 <__errno_location@plt>
   15e58:	cmn	r4, #-2147483647	; 0x80000001
   15e5c:	ldr	r5, [r6]
   15e60:	mov	r7, r0
   15e64:	movne	r0, #0
   15e68:	moveq	r0, #1
   15e6c:	ldr	r3, [r7]
   15e70:	orrs	r0, r0, r4, lsr #31
   15e74:	str	r3, [sp, #24]
   15e78:	bne	15fe4 <__assert_fail@plt+0x50a0>
   15e7c:	ldr	r2, [r6, #4]
   15e80:	cmp	r4, r2
   15e84:	blt	15ee4 <__assert_fail@plt+0x4fa0>
   15e88:	add	r8, r6, #8
   15e8c:	cmp	r5, r8
   15e90:	str	r2, [sp, #80]	; 0x50
   15e94:	beq	15fb4 <__assert_fail@plt+0x5070>
   15e98:	mov	r3, #8
   15e9c:	sub	r2, r4, r2
   15ea0:	mov	r0, r5
   15ea4:	str	r3, [sp]
   15ea8:	add	r2, r2, #1
   15eac:	add	r1, sp, #80	; 0x50
   15eb0:	mvn	r3, #-2147483648	; 0x80000000
   15eb4:	bl	187c8 <__assert_fail@plt+0x7884>
   15eb8:	mov	r5, r0
   15ebc:	str	r0, [r6]
   15ec0:	ldr	r0, [r6, #4]
   15ec4:	ldr	r2, [sp, #80]	; 0x50
   15ec8:	mov	r1, #0
   15ecc:	sub	r2, r2, r0
   15ed0:	add	r0, r5, r0, lsl #3
   15ed4:	lsl	r2, r2, #3
   15ed8:	bl	10ea8 <memset@plt>
   15edc:	ldr	r3, [sp, #80]	; 0x50
   15ee0:	str	r3, [r6, #4]
   15ee4:	add	fp, r5, r4, lsl #3
   15ee8:	ldr	r3, [sp, #32]
   15eec:	ldr	r1, [sp, #36]	; 0x24
   15ef0:	ldr	r8, [r5, r4, lsl #3]
   15ef4:	ldr	r6, [fp, #4]
   15ef8:	ldr	r2, [sp, #72]	; 0x48
   15efc:	ldr	ip, [sp, #76]	; 0x4c
   15f00:	orr	r1, r1, #1
   15f04:	str	r3, [sp]
   15f08:	add	r3, sp, #40	; 0x28
   15f0c:	str	r1, [sp, #28]
   15f10:	str	r1, [sp, #4]
   15f14:	str	r2, [sp, #12]
   15f18:	str	r3, [sp, #8]
   15f1c:	mov	r0, r6
   15f20:	mov	r1, r8
   15f24:	str	ip, [sp, #16]
   15f28:	mov	r3, sl
   15f2c:	mov	r2, r9
   15f30:	bl	13c68 <__assert_fail@plt+0x2d24>
   15f34:	cmp	r8, r0
   15f38:	bhi	15fa0 <__assert_fail@plt+0x505c>
   15f3c:	ldr	r3, [pc, #168]	; 15fec <__assert_fail@plt+0x50a8>
   15f40:	add	r8, r0, #1
   15f44:	cmp	r6, r3
   15f48:	str	r8, [r5, r4, lsl #3]
   15f4c:	beq	15f58 <__assert_fail@plt+0x5014>
   15f50:	mov	r0, r6
   15f54:	bl	13a3c <__assert_fail@plt+0x2af8>
   15f58:	mov	r0, r8
   15f5c:	bl	185ac <__assert_fail@plt+0x7668>
   15f60:	add	lr, sp, #40	; 0x28
   15f64:	ldr	ip, [sp, #76]	; 0x4c
   15f68:	ldr	r4, [sp, #72]	; 0x48
   15f6c:	ldr	r5, [sp, #28]
   15f70:	mov	r3, sl
   15f74:	mov	r2, r9
   15f78:	mov	r1, r8
   15f7c:	str	r0, [fp, #4]
   15f80:	str	lr, [sp, #8]
   15f84:	ldr	lr, [sp, #32]
   15f88:	str	r5, [sp, #4]
   15f8c:	str	ip, [sp, #16]
   15f90:	str	r4, [sp, #12]
   15f94:	str	lr, [sp]
   15f98:	mov	r6, r0
   15f9c:	bl	13c68 <__assert_fail@plt+0x2d24>
   15fa0:	ldr	r3, [sp, #24]
   15fa4:	mov	r0, r6
   15fa8:	str	r3, [r7]
   15fac:	add	sp, sp, #132	; 0x84
   15fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fb4:	mov	r3, #8
   15fb8:	sub	r2, r4, r2
   15fbc:	add	r1, sp, #80	; 0x50
   15fc0:	str	r3, [sp]
   15fc4:	add	r2, r2, #1
   15fc8:	mvn	r3, #-2147483648	; 0x80000000
   15fcc:	bl	187c8 <__assert_fail@plt+0x7884>
   15fd0:	mov	r5, r0
   15fd4:	ldm	r8, {r0, r1}
   15fd8:	str	r5, [r6]
   15fdc:	stm	r5, {r0, r1}
   15fe0:	b	15ec0 <__assert_fail@plt+0x4f7c>
   15fe4:	bl	10f2c <abort@plt>
   15fe8:	strdeq	ip, [r2], -r8
   15fec:	andeq	lr, r2, r0, lsr #9
   15ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff4:	sub	sp, sp, #124	; 0x7c
   15ff8:	mov	r4, r0
   15ffc:	mov	r9, r1
   16000:	add	r0, sp, #72	; 0x48
   16004:	mov	r2, #48	; 0x30
   16008:	mov	r1, #0
   1600c:	bl	10ea8 <memset@plt>
   16010:	cmp	r4, #10
   16014:	beq	161a0 <__assert_fail@plt+0x525c>
   16018:	add	lr, sp, #72	; 0x48
   1601c:	str	r4, [sp, #72]	; 0x48
   16020:	ldm	lr!, {r0, r1, r2, r3}
   16024:	add	ip, sp, #24
   16028:	ldr	r5, [pc, #372]	; 161a4 <__assert_fail@plt+0x5260>
   1602c:	stmia	ip!, {r0, r1, r2, r3}
   16030:	ldm	lr!, {r0, r1, r2, r3}
   16034:	stmia	ip!, {r0, r1, r2, r3}
   16038:	ldm	lr, {r0, r1, r2, r3}
   1603c:	stm	ip, {r0, r1, r2, r3}
   16040:	bl	10e84 <__errno_location@plt>
   16044:	ldr	r2, [r5, #4]
   16048:	ldr	r4, [r5]
   1604c:	cmp	r2, #0
   16050:	mov	r7, r0
   16054:	ldr	fp, [r0]
   16058:	bgt	160b4 <__assert_fail@plt+0x5170>
   1605c:	add	r6, r5, #8
   16060:	cmp	r4, r6
   16064:	str	r2, [sp, #72]	; 0x48
   16068:	beq	16170 <__assert_fail@plt+0x522c>
   1606c:	mov	r3, #8
   16070:	mov	r0, r4
   16074:	str	r3, [sp]
   16078:	rsb	r2, r2, #1
   1607c:	add	r1, sp, #72	; 0x48
   16080:	mvn	r3, #-2147483648	; 0x80000000
   16084:	bl	187c8 <__assert_fail@plt+0x7884>
   16088:	mov	r4, r0
   1608c:	str	r0, [r5]
   16090:	ldr	r0, [r5, #4]
   16094:	ldr	r2, [sp, #72]	; 0x48
   16098:	mov	r1, #0
   1609c:	sub	r2, r2, r0
   160a0:	add	r0, r4, r0, lsl #3
   160a4:	lsl	r2, r2, #3
   160a8:	bl	10ea8 <memset@plt>
   160ac:	ldr	r3, [sp, #72]	; 0x48
   160b0:	str	r3, [r5, #4]
   160b4:	ldr	r6, [sp, #28]
   160b8:	ldr	r8, [r4]
   160bc:	ldr	r5, [r4, #4]
   160c0:	ldr	r2, [sp, #64]	; 0x40
   160c4:	ldr	r3, [sp, #24]
   160c8:	ldr	ip, [sp, #68]	; 0x44
   160cc:	orr	r6, r6, #1
   160d0:	add	sl, sp, #32
   160d4:	str	r2, [sp, #12]
   160d8:	str	r3, [sp]
   160dc:	str	r6, [sp, #4]
   160e0:	mov	r1, r8
   160e4:	mov	r0, r5
   160e8:	str	ip, [sp, #16]
   160ec:	str	sl, [sp, #8]
   160f0:	mvn	r3, #0
   160f4:	mov	r2, r9
   160f8:	bl	13c68 <__assert_fail@plt+0x2d24>
   160fc:	cmp	r8, r0
   16100:	bhi	16160 <__assert_fail@plt+0x521c>
   16104:	ldr	r3, [pc, #156]	; 161a8 <__assert_fail@plt+0x5264>
   16108:	add	r8, r0, #1
   1610c:	cmp	r5, r3
   16110:	str	r8, [r4]
   16114:	beq	16120 <__assert_fail@plt+0x51dc>
   16118:	mov	r0, r5
   1611c:	bl	13a3c <__assert_fail@plt+0x2af8>
   16120:	mov	r0, r8
   16124:	bl	185ac <__assert_fail@plt+0x7668>
   16128:	ldr	lr, [sp, #68]	; 0x44
   1612c:	ldr	r3, [sp, #24]
   16130:	ldr	ip, [sp, #64]	; 0x40
   16134:	mov	r2, r9
   16138:	mov	r1, r8
   1613c:	str	r0, [r4, #4]
   16140:	str	r3, [sp]
   16144:	str	sl, [sp, #8]
   16148:	str	r6, [sp, #4]
   1614c:	str	lr, [sp, #16]
   16150:	str	ip, [sp, #12]
   16154:	mvn	r3, #0
   16158:	mov	r5, r0
   1615c:	bl	13c68 <__assert_fail@plt+0x2d24>
   16160:	mov	r0, r5
   16164:	str	fp, [r7]
   16168:	add	sp, sp, #124	; 0x7c
   1616c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16170:	mov	r3, #8
   16174:	add	r1, sp, #72	; 0x48
   16178:	str	r3, [sp]
   1617c:	rsb	r2, r2, #1
   16180:	mvn	r3, #-2147483648	; 0x80000000
   16184:	mov	r0, #0
   16188:	bl	187c8 <__assert_fail@plt+0x7884>
   1618c:	mov	r4, r0
   16190:	ldm	r6, {r0, r1}
   16194:	str	r4, [r5]
   16198:	stm	r4, {r0, r1}
   1619c:	b	16090 <__assert_fail@plt+0x514c>
   161a0:	bl	10f2c <abort@plt>
   161a4:	strdeq	ip, [r2], -r8
   161a8:	andeq	lr, r2, r0, lsr #9
   161ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161b0:	sub	sp, sp, #132	; 0x84
   161b4:	mov	r4, r0
   161b8:	mov	r9, r1
   161bc:	mov	sl, r2
   161c0:	add	r0, sp, #80	; 0x50
   161c4:	mov	r2, #48	; 0x30
   161c8:	mov	r1, #0
   161cc:	bl	10ea8 <memset@plt>
   161d0:	cmp	r4, #10
   161d4:	beq	16368 <__assert_fail@plt+0x5424>
   161d8:	add	lr, sp, #80	; 0x50
   161dc:	str	r4, [sp, #80]	; 0x50
   161e0:	ldm	lr!, {r0, r1, r2, r3}
   161e4:	add	ip, sp, #32
   161e8:	ldr	r5, [pc, #380]	; 1636c <__assert_fail@plt+0x5428>
   161ec:	stmia	ip!, {r0, r1, r2, r3}
   161f0:	ldm	lr!, {r0, r1, r2, r3}
   161f4:	stmia	ip!, {r0, r1, r2, r3}
   161f8:	ldm	lr, {r0, r1, r2, r3}
   161fc:	stm	ip, {r0, r1, r2, r3}
   16200:	bl	10e84 <__errno_location@plt>
   16204:	ldr	r2, [r5, #4]
   16208:	ldr	r4, [r5]
   1620c:	cmp	r2, #0
   16210:	ldr	r3, [r0]
   16214:	mov	r7, r0
   16218:	str	r3, [sp, #28]
   1621c:	bgt	16278 <__assert_fail@plt+0x5334>
   16220:	add	r6, r5, #8
   16224:	cmp	r4, r6
   16228:	str	r2, [sp, #80]	; 0x50
   1622c:	beq	16338 <__assert_fail@plt+0x53f4>
   16230:	mov	r3, #8
   16234:	mov	r0, r4
   16238:	str	r3, [sp]
   1623c:	rsb	r2, r2, #1
   16240:	add	r1, sp, #80	; 0x50
   16244:	mvn	r3, #-2147483648	; 0x80000000
   16248:	bl	187c8 <__assert_fail@plt+0x7884>
   1624c:	mov	r4, r0
   16250:	str	r0, [r5]
   16254:	ldr	r0, [r5, #4]
   16258:	ldr	r2, [sp, #80]	; 0x50
   1625c:	mov	r1, #0
   16260:	sub	r2, r2, r0
   16264:	add	r0, r4, r0, lsl #3
   16268:	lsl	r2, r2, #3
   1626c:	bl	10ea8 <memset@plt>
   16270:	ldr	r3, [sp, #80]	; 0x50
   16274:	str	r3, [r5, #4]
   16278:	ldr	r6, [sp, #36]	; 0x24
   1627c:	ldr	r8, [r4]
   16280:	ldr	r5, [r4, #4]
   16284:	ldr	r2, [sp, #72]	; 0x48
   16288:	ldr	r3, [sp, #32]
   1628c:	ldr	ip, [sp, #76]	; 0x4c
   16290:	orr	r6, r6, #1
   16294:	add	fp, sp, #40	; 0x28
   16298:	str	r2, [sp, #12]
   1629c:	str	r3, [sp]
   162a0:	str	r6, [sp, #4]
   162a4:	mov	r1, r8
   162a8:	mov	r0, r5
   162ac:	str	ip, [sp, #16]
   162b0:	str	fp, [sp, #8]
   162b4:	mov	r3, sl
   162b8:	mov	r2, r9
   162bc:	bl	13c68 <__assert_fail@plt+0x2d24>
   162c0:	cmp	r8, r0
   162c4:	bhi	16324 <__assert_fail@plt+0x53e0>
   162c8:	ldr	r3, [pc, #160]	; 16370 <__assert_fail@plt+0x542c>
   162cc:	add	r8, r0, #1
   162d0:	cmp	r5, r3
   162d4:	str	r8, [r4]
   162d8:	beq	162e4 <__assert_fail@plt+0x53a0>
   162dc:	mov	r0, r5
   162e0:	bl	13a3c <__assert_fail@plt+0x2af8>
   162e4:	mov	r0, r8
   162e8:	bl	185ac <__assert_fail@plt+0x7668>
   162ec:	ldr	ip, [sp, #76]	; 0x4c
   162f0:	ldr	lr, [sp, #32]
   162f4:	mov	r3, sl
   162f8:	mov	r2, r9
   162fc:	mov	r1, r8
   16300:	str	r0, [r4, #4]
   16304:	ldr	r4, [sp, #72]	; 0x48
   16308:	str	fp, [sp, #8]
   1630c:	str	r6, [sp, #4]
   16310:	str	ip, [sp, #16]
   16314:	str	r4, [sp, #12]
   16318:	str	lr, [sp]
   1631c:	mov	r5, r0
   16320:	bl	13c68 <__assert_fail@plt+0x2d24>
   16324:	ldr	r3, [sp, #28]
   16328:	mov	r0, r5
   1632c:	str	r3, [r7]
   16330:	add	sp, sp, #132	; 0x84
   16334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16338:	mov	r3, #8
   1633c:	add	r1, sp, #80	; 0x50
   16340:	str	r3, [sp]
   16344:	rsb	r2, r2, #1
   16348:	mvn	r3, #-2147483648	; 0x80000000
   1634c:	mov	r0, #0
   16350:	bl	187c8 <__assert_fail@plt+0x7884>
   16354:	mov	r4, r0
   16358:	ldm	r6, {r0, r1}
   1635c:	str	r4, [r5]
   16360:	stm	r4, {r0, r1}
   16364:	b	16254 <__assert_fail@plt+0x5310>
   16368:	bl	10f2c <abort@plt>
   1636c:	strdeq	ip, [r2], -r8
   16370:	andeq	lr, r2, r0, lsr #9
   16374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16378:	mov	r4, r2
   1637c:	ldr	lr, [pc, #432]	; 16534 <__assert_fail@plt+0x55f0>
   16380:	mov	sl, r0
   16384:	mov	fp, r1
   16388:	ldm	lr!, {r0, r1, r2, r3}
   1638c:	sub	sp, sp, #92	; 0x5c
   16390:	add	ip, sp, #40	; 0x28
   16394:	lsr	r7, r4, #5
   16398:	stmia	ip!, {r0, r1, r2, r3}
   1639c:	add	r6, sp, #48	; 0x30
   163a0:	ldm	lr!, {r0, r1, r2, r3}
   163a4:	and	r4, r4, #31
   163a8:	ldr	r5, [pc, #392]	; 16538 <__assert_fail@plt+0x55f4>
   163ac:	stmia	ip!, {r0, r1, r2, r3}
   163b0:	ldm	lr, {r0, r1, r2, r3}
   163b4:	stm	ip, {r0, r1, r2, r3}
   163b8:	ldr	r2, [r6, r7, lsl #2]
   163bc:	lsr	r3, r2, r4
   163c0:	eor	r3, r3, #1
   163c4:	and	r3, r3, #1
   163c8:	eor	r4, r2, r3, lsl r4
   163cc:	str	r4, [r6, r7, lsl #2]
   163d0:	bl	10e84 <__errno_location@plt>
   163d4:	ldr	r2, [r5, #4]
   163d8:	ldr	r4, [r5]
   163dc:	cmp	r2, #0
   163e0:	ldr	r3, [r0]
   163e4:	mov	r8, r0
   163e8:	str	r3, [sp, #28]
   163ec:	bgt	16448 <__assert_fail@plt+0x5504>
   163f0:	add	r7, r5, #8
   163f4:	cmp	r4, r7
   163f8:	str	r2, [sp, #36]	; 0x24
   163fc:	beq	16504 <__assert_fail@plt+0x55c0>
   16400:	mov	r3, #8
   16404:	mov	r0, r4
   16408:	str	r3, [sp]
   1640c:	rsb	r2, r2, #1
   16410:	mvn	r3, #-2147483648	; 0x80000000
   16414:	add	r1, sp, #36	; 0x24
   16418:	bl	187c8 <__assert_fail@plt+0x7884>
   1641c:	mov	r4, r0
   16420:	str	r0, [r5]
   16424:	ldr	r0, [r5, #4]
   16428:	ldr	r2, [sp, #36]	; 0x24
   1642c:	mov	r1, #0
   16430:	sub	r2, r2, r0
   16434:	add	r0, r4, r0, lsl #3
   16438:	lsl	r2, r2, #3
   1643c:	bl	10ea8 <memset@plt>
   16440:	ldr	r3, [sp, #36]	; 0x24
   16444:	str	r3, [r5, #4]
   16448:	ldr	r7, [sp, #44]	; 0x2c
   1644c:	ldr	r9, [r4]
   16450:	ldr	r5, [r4, #4]
   16454:	ldr	r2, [sp, #80]	; 0x50
   16458:	ldr	r3, [sp, #40]	; 0x28
   1645c:	ldr	ip, [sp, #84]	; 0x54
   16460:	orr	r7, r7, #1
   16464:	str	r2, [sp, #12]
   16468:	str	r3, [sp]
   1646c:	str	r7, [sp, #4]
   16470:	str	r6, [sp, #8]
   16474:	mov	r1, r9
   16478:	mov	r0, r5
   1647c:	str	ip, [sp, #16]
   16480:	mov	r3, fp
   16484:	mov	r2, sl
   16488:	bl	13c68 <__assert_fail@plt+0x2d24>
   1648c:	cmp	r9, r0
   16490:	bhi	164f0 <__assert_fail@plt+0x55ac>
   16494:	ldr	r3, [pc, #160]	; 1653c <__assert_fail@plt+0x55f8>
   16498:	add	r9, r0, #1
   1649c:	cmp	r5, r3
   164a0:	str	r9, [r4]
   164a4:	beq	164b0 <__assert_fail@plt+0x556c>
   164a8:	mov	r0, r5
   164ac:	bl	13a3c <__assert_fail@plt+0x2af8>
   164b0:	mov	r0, r9
   164b4:	bl	185ac <__assert_fail@plt+0x7668>
   164b8:	ldr	ip, [sp, #84]	; 0x54
   164bc:	ldr	lr, [sp, #40]	; 0x28
   164c0:	mov	r3, fp
   164c4:	mov	r2, sl
   164c8:	mov	r1, r9
   164cc:	str	r0, [r4, #4]
   164d0:	ldr	r4, [sp, #80]	; 0x50
   164d4:	str	r6, [sp, #8]
   164d8:	str	r7, [sp, #4]
   164dc:	str	ip, [sp, #16]
   164e0:	str	r4, [sp, #12]
   164e4:	str	lr, [sp]
   164e8:	mov	r5, r0
   164ec:	bl	13c68 <__assert_fail@plt+0x2d24>
   164f0:	ldr	r3, [sp, #28]
   164f4:	mov	r0, r5
   164f8:	str	r3, [r8]
   164fc:	add	sp, sp, #92	; 0x5c
   16500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16504:	mov	r3, #8
   16508:	str	r3, [sp]
   1650c:	add	r1, sp, #36	; 0x24
   16510:	rsb	r2, r2, #1
   16514:	mvn	r3, #-2147483648	; 0x80000000
   16518:	mov	r0, #0
   1651c:	bl	187c8 <__assert_fail@plt+0x7884>
   16520:	mov	r4, r0
   16524:	ldm	r7, {r0, r1}
   16528:	str	r4, [r5]
   1652c:	stm	r4, {r0, r1}
   16530:	b	16424 <__assert_fail@plt+0x54e0>
   16534:	andeq	lr, r2, r0, ror r4
   16538:	strdeq	ip, [r2], -r8
   1653c:	andeq	lr, r2, r0, lsr #9
   16540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16544:	mov	r4, r1
   16548:	ldr	lr, [pc, #420]	; 166f4 <__assert_fail@plt+0x57b0>
   1654c:	mov	r6, r0
   16550:	sub	sp, sp, #84	; 0x54
   16554:	ldm	lr!, {r0, r1, r2, r3}
   16558:	add	ip, sp, #32
   1655c:	lsr	r8, r4, #5
   16560:	add	r5, sp, #40	; 0x28
   16564:	stmia	ip!, {r0, r1, r2, r3}
   16568:	and	r4, r4, #31
   1656c:	ldm	lr!, {r0, r1, r2, r3}
   16570:	ldr	r7, [pc, #384]	; 166f8 <__assert_fail@plt+0x57b4>
   16574:	stmia	ip!, {r0, r1, r2, r3}
   16578:	ldm	lr, {r0, r1, r2, r3}
   1657c:	stm	ip, {r0, r1, r2, r3}
   16580:	ldr	r2, [r5, r8, lsl #2]
   16584:	lsr	r3, r2, r4
   16588:	eor	r3, r3, #1
   1658c:	and	r3, r3, #1
   16590:	eor	r4, r2, r3, lsl r4
   16594:	str	r4, [r5, r8, lsl #2]
   16598:	bl	10e84 <__errno_location@plt>
   1659c:	ldr	r2, [r7, #4]
   165a0:	ldr	r4, [r7]
   165a4:	cmp	r2, #0
   165a8:	mov	r9, r0
   165ac:	ldr	sl, [r0]
   165b0:	bgt	1660c <__assert_fail@plt+0x56c8>
   165b4:	add	r8, r7, #8
   165b8:	cmp	r4, r8
   165bc:	str	r2, [sp, #28]
   165c0:	beq	166c4 <__assert_fail@plt+0x5780>
   165c4:	mov	r3, #8
   165c8:	mov	r0, r4
   165cc:	str	r3, [sp]
   165d0:	rsb	r2, r2, #1
   165d4:	mvn	r3, #-2147483648	; 0x80000000
   165d8:	add	r1, sp, #28
   165dc:	bl	187c8 <__assert_fail@plt+0x7884>
   165e0:	mov	r4, r0
   165e4:	str	r0, [r7]
   165e8:	ldr	r0, [r7, #4]
   165ec:	ldr	r2, [sp, #28]
   165f0:	mov	r1, #0
   165f4:	sub	r2, r2, r0
   165f8:	add	r0, r4, r0, lsl #3
   165fc:	lsl	r2, r2, #3
   16600:	bl	10ea8 <memset@plt>
   16604:	ldr	r3, [sp, #28]
   16608:	str	r3, [r7, #4]
   1660c:	ldr	r8, [sp, #36]	; 0x24
   16610:	ldr	fp, [r4]
   16614:	ldr	r7, [r4, #4]
   16618:	ldr	r2, [sp, #72]	; 0x48
   1661c:	ldr	r3, [sp, #32]
   16620:	ldr	ip, [sp, #76]	; 0x4c
   16624:	orr	r8, r8, #1
   16628:	str	r2, [sp, #12]
   1662c:	str	r3, [sp]
   16630:	str	r8, [sp, #4]
   16634:	str	r5, [sp, #8]
   16638:	mov	r1, fp
   1663c:	mov	r0, r7
   16640:	str	ip, [sp, #16]
   16644:	mvn	r3, #0
   16648:	mov	r2, r6
   1664c:	bl	13c68 <__assert_fail@plt+0x2d24>
   16650:	cmp	fp, r0
   16654:	bhi	166b4 <__assert_fail@plt+0x5770>
   16658:	ldr	r3, [pc, #156]	; 166fc <__assert_fail@plt+0x57b8>
   1665c:	add	fp, r0, #1
   16660:	cmp	r7, r3
   16664:	str	fp, [r4]
   16668:	beq	16674 <__assert_fail@plt+0x5730>
   1666c:	mov	r0, r7
   16670:	bl	13a3c <__assert_fail@plt+0x2af8>
   16674:	mov	r0, fp
   16678:	bl	185ac <__assert_fail@plt+0x7668>
   1667c:	ldr	lr, [sp, #76]	; 0x4c
   16680:	ldr	r3, [sp, #32]
   16684:	ldr	ip, [sp, #72]	; 0x48
   16688:	mov	r2, r6
   1668c:	mov	r1, fp
   16690:	str	r0, [r4, #4]
   16694:	str	r3, [sp]
   16698:	str	r5, [sp, #8]
   1669c:	str	r8, [sp, #4]
   166a0:	str	lr, [sp, #16]
   166a4:	str	ip, [sp, #12]
   166a8:	mvn	r3, #0
   166ac:	mov	r7, r0
   166b0:	bl	13c68 <__assert_fail@plt+0x2d24>
   166b4:	mov	r0, r7
   166b8:	str	sl, [r9]
   166bc:	add	sp, sp, #84	; 0x54
   166c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166c4:	mov	r3, #8
   166c8:	str	r3, [sp]
   166cc:	add	r1, sp, #28
   166d0:	rsb	r2, r2, #1
   166d4:	mvn	r3, #-2147483648	; 0x80000000
   166d8:	mov	r0, #0
   166dc:	bl	187c8 <__assert_fail@plt+0x7884>
   166e0:	mov	r4, r0
   166e4:	ldm	r8, {r0, r1}
   166e8:	str	r4, [r7]
   166ec:	stm	r4, {r0, r1}
   166f0:	b	165e8 <__assert_fail@plt+0x56a4>
   166f4:	andeq	lr, r2, r0, ror r4
   166f8:	strdeq	ip, [r2], -r8
   166fc:	andeq	lr, r2, r0, lsr #9
   16700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16704:	mov	r6, r0
   16708:	ldr	lr, [pc, #404]	; 168a4 <__assert_fail@plt+0x5960>
   1670c:	sub	sp, sp, #84	; 0x54
   16710:	add	ip, sp, #32
   16714:	ldm	lr!, {r0, r1, r2, r3}
   16718:	ldr	r5, [pc, #392]	; 168a8 <__assert_fail@plt+0x5964>
   1671c:	stmia	ip!, {r0, r1, r2, r3}
   16720:	ldm	lr!, {r0, r1, r2, r3}
   16724:	ldr	r4, [sp, #44]	; 0x2c
   16728:	stmia	ip!, {r0, r1, r2, r3}
   1672c:	ldm	lr, {r0, r1, r2, r3}
   16730:	mvn	lr, r4
   16734:	and	lr, lr, #67108864	; 0x4000000
   16738:	eor	lr, lr, r4
   1673c:	stm	ip, {r0, r1, r2, r3}
   16740:	str	lr, [sp, #44]	; 0x2c
   16744:	bl	10e84 <__errno_location@plt>
   16748:	ldr	r2, [r5, #4]
   1674c:	ldr	r4, [r5]
   16750:	cmp	r2, #0
   16754:	mov	r8, r0
   16758:	ldr	sl, [r0]
   1675c:	bgt	167b8 <__assert_fail@plt+0x5874>
   16760:	add	r7, r5, #8
   16764:	cmp	r4, r7
   16768:	str	r2, [sp, #28]
   1676c:	beq	16874 <__assert_fail@plt+0x5930>
   16770:	mov	r3, #8
   16774:	mov	r0, r4
   16778:	str	r3, [sp]
   1677c:	rsb	r2, r2, #1
   16780:	mvn	r3, #-2147483648	; 0x80000000
   16784:	add	r1, sp, #28
   16788:	bl	187c8 <__assert_fail@plt+0x7884>
   1678c:	mov	r4, r0
   16790:	str	r0, [r5]
   16794:	ldr	r0, [r5, #4]
   16798:	ldr	r2, [sp, #28]
   1679c:	mov	r1, #0
   167a0:	sub	r2, r2, r0
   167a4:	add	r0, r4, r0, lsl #3
   167a8:	lsl	r2, r2, #3
   167ac:	bl	10ea8 <memset@plt>
   167b0:	ldr	r3, [sp, #28]
   167b4:	str	r3, [r5, #4]
   167b8:	ldr	r7, [sp, #36]	; 0x24
   167bc:	ldr	r9, [r4]
   167c0:	ldr	r5, [r4, #4]
   167c4:	ldr	r2, [sp, #72]	; 0x48
   167c8:	ldr	r3, [sp, #32]
   167cc:	ldr	ip, [sp, #76]	; 0x4c
   167d0:	orr	r7, r7, #1
   167d4:	add	fp, sp, #40	; 0x28
   167d8:	str	r2, [sp, #12]
   167dc:	str	r3, [sp]
   167e0:	str	r7, [sp, #4]
   167e4:	mov	r1, r9
   167e8:	mov	r0, r5
   167ec:	str	ip, [sp, #16]
   167f0:	str	fp, [sp, #8]
   167f4:	mvn	r3, #0
   167f8:	mov	r2, r6
   167fc:	bl	13c68 <__assert_fail@plt+0x2d24>
   16800:	cmp	r9, r0
   16804:	bhi	16864 <__assert_fail@plt+0x5920>
   16808:	ldr	r3, [pc, #156]	; 168ac <__assert_fail@plt+0x5968>
   1680c:	add	r9, r0, #1
   16810:	cmp	r5, r3
   16814:	str	r9, [r4]
   16818:	beq	16824 <__assert_fail@plt+0x58e0>
   1681c:	mov	r0, r5
   16820:	bl	13a3c <__assert_fail@plt+0x2af8>
   16824:	mov	r0, r9
   16828:	bl	185ac <__assert_fail@plt+0x7668>
   1682c:	ldr	lr, [sp, #76]	; 0x4c
   16830:	ldr	r3, [sp, #32]
   16834:	ldr	ip, [sp, #72]	; 0x48
   16838:	mov	r2, r6
   1683c:	mov	r1, r9
   16840:	str	r0, [r4, #4]
   16844:	str	r3, [sp]
   16848:	str	fp, [sp, #8]
   1684c:	str	r7, [sp, #4]
   16850:	str	lr, [sp, #16]
   16854:	str	ip, [sp, #12]
   16858:	mvn	r3, #0
   1685c:	mov	r5, r0
   16860:	bl	13c68 <__assert_fail@plt+0x2d24>
   16864:	mov	r0, r5
   16868:	str	sl, [r8]
   1686c:	add	sp, sp, #84	; 0x54
   16870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16874:	mov	r3, #8
   16878:	str	r3, [sp]
   1687c:	add	r1, sp, #28
   16880:	rsb	r2, r2, #1
   16884:	mvn	r3, #-2147483648	; 0x80000000
   16888:	mov	r0, #0
   1688c:	bl	187c8 <__assert_fail@plt+0x7884>
   16890:	mov	r4, r0
   16894:	ldm	r7, {r0, r1}
   16898:	str	r4, [r5]
   1689c:	stm	r4, {r0, r1}
   168a0:	b	16794 <__assert_fail@plt+0x5850>
   168a4:	andeq	lr, r2, r0, ror r4
   168a8:	strdeq	ip, [r2], -r8
   168ac:	andeq	lr, r2, r0, lsr #9
   168b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168b4:	mov	r9, r0
   168b8:	ldr	lr, [pc, #416]	; 16a60 <__assert_fail@plt+0x5b1c>
   168bc:	mov	sl, r1
   168c0:	sub	sp, sp, #92	; 0x5c
   168c4:	ldm	lr!, {r0, r1, r2, r3}
   168c8:	add	ip, sp, #40	; 0x28
   168cc:	ldr	r5, [pc, #400]	; 16a64 <__assert_fail@plt+0x5b20>
   168d0:	stmia	ip!, {r0, r1, r2, r3}
   168d4:	ldm	lr!, {r0, r1, r2, r3}
   168d8:	ldr	r4, [sp, #52]	; 0x34
   168dc:	stmia	ip!, {r0, r1, r2, r3}
   168e0:	ldm	lr, {r0, r1, r2, r3}
   168e4:	mvn	lr, r4
   168e8:	and	lr, lr, #67108864	; 0x4000000
   168ec:	eor	lr, lr, r4
   168f0:	stm	ip, {r0, r1, r2, r3}
   168f4:	str	lr, [sp, #52]	; 0x34
   168f8:	bl	10e84 <__errno_location@plt>
   168fc:	ldr	r2, [r5, #4]
   16900:	ldr	r4, [r5]
   16904:	cmp	r2, #0
   16908:	ldr	r3, [r0]
   1690c:	mov	r7, r0
   16910:	str	r3, [sp, #28]
   16914:	bgt	16970 <__assert_fail@plt+0x5a2c>
   16918:	add	r6, r5, #8
   1691c:	cmp	r4, r6
   16920:	str	r2, [sp, #36]	; 0x24
   16924:	beq	16a30 <__assert_fail@plt+0x5aec>
   16928:	mov	r3, #8
   1692c:	mov	r0, r4
   16930:	str	r3, [sp]
   16934:	rsb	r2, r2, #1
   16938:	mvn	r3, #-2147483648	; 0x80000000
   1693c:	add	r1, sp, #36	; 0x24
   16940:	bl	187c8 <__assert_fail@plt+0x7884>
   16944:	mov	r4, r0
   16948:	str	r0, [r5]
   1694c:	ldr	r0, [r5, #4]
   16950:	ldr	r2, [sp, #36]	; 0x24
   16954:	mov	r1, #0
   16958:	sub	r2, r2, r0
   1695c:	add	r0, r4, r0, lsl #3
   16960:	lsl	r2, r2, #3
   16964:	bl	10ea8 <memset@plt>
   16968:	ldr	r3, [sp, #36]	; 0x24
   1696c:	str	r3, [r5, #4]
   16970:	ldr	r6, [sp, #44]	; 0x2c
   16974:	ldr	r8, [r4]
   16978:	ldr	r5, [r4, #4]
   1697c:	ldr	r2, [sp, #80]	; 0x50
   16980:	ldr	r3, [sp, #40]	; 0x28
   16984:	ldr	ip, [sp, #84]	; 0x54
   16988:	orr	r6, r6, #1
   1698c:	add	fp, sp, #48	; 0x30
   16990:	str	r2, [sp, #12]
   16994:	str	r3, [sp]
   16998:	str	r6, [sp, #4]
   1699c:	mov	r1, r8
   169a0:	mov	r0, r5
   169a4:	str	ip, [sp, #16]
   169a8:	str	fp, [sp, #8]
   169ac:	mov	r3, sl
   169b0:	mov	r2, r9
   169b4:	bl	13c68 <__assert_fail@plt+0x2d24>
   169b8:	cmp	r8, r0
   169bc:	bhi	16a1c <__assert_fail@plt+0x5ad8>
   169c0:	ldr	r3, [pc, #160]	; 16a68 <__assert_fail@plt+0x5b24>
   169c4:	add	r8, r0, #1
   169c8:	cmp	r5, r3
   169cc:	str	r8, [r4]
   169d0:	beq	169dc <__assert_fail@plt+0x5a98>
   169d4:	mov	r0, r5
   169d8:	bl	13a3c <__assert_fail@plt+0x2af8>
   169dc:	mov	r0, r8
   169e0:	bl	185ac <__assert_fail@plt+0x7668>
   169e4:	ldr	ip, [sp, #84]	; 0x54
   169e8:	ldr	lr, [sp, #40]	; 0x28
   169ec:	mov	r3, sl
   169f0:	mov	r2, r9
   169f4:	mov	r1, r8
   169f8:	str	r0, [r4, #4]
   169fc:	ldr	r4, [sp, #80]	; 0x50
   16a00:	str	fp, [sp, #8]
   16a04:	str	r6, [sp, #4]
   16a08:	str	ip, [sp, #16]
   16a0c:	str	r4, [sp, #12]
   16a10:	str	lr, [sp]
   16a14:	mov	r5, r0
   16a18:	bl	13c68 <__assert_fail@plt+0x2d24>
   16a1c:	ldr	r3, [sp, #28]
   16a20:	mov	r0, r5
   16a24:	str	r3, [r7]
   16a28:	add	sp, sp, #92	; 0x5c
   16a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a30:	mov	r3, #8
   16a34:	str	r3, [sp]
   16a38:	add	r1, sp, #36	; 0x24
   16a3c:	rsb	r2, r2, #1
   16a40:	mvn	r3, #-2147483648	; 0x80000000
   16a44:	mov	r0, #0
   16a48:	bl	187c8 <__assert_fail@plt+0x7884>
   16a4c:	mov	r4, r0
   16a50:	ldm	r6, {r0, r1}
   16a54:	str	r4, [r5]
   16a58:	stm	r4, {r0, r1}
   16a5c:	b	1694c <__assert_fail@plt+0x5a08>
   16a60:	andeq	lr, r2, r0, ror r4
   16a64:	strdeq	ip, [r2], -r8
   16a68:	andeq	lr, r2, r0, lsr #9
   16a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a70:	sub	sp, sp, #180	; 0xb4
   16a74:	mov	r6, r1
   16a78:	mov	r4, r0
   16a7c:	mov	r9, r2
   16a80:	add	r0, sp, #80	; 0x50
   16a84:	mov	r2, #48	; 0x30
   16a88:	mov	r1, #0
   16a8c:	bl	10ea8 <memset@plt>
   16a90:	cmp	r6, #10
   16a94:	beq	16c74 <__assert_fail@plt+0x5d30>
   16a98:	add	r5, sp, #80	; 0x50
   16a9c:	str	r6, [sp, #80]	; 0x50
   16aa0:	ldm	r5!, {r0, r1, r2, r3}
   16aa4:	add	ip, sp, #128	; 0x80
   16aa8:	mov	r7, ip
   16aac:	add	lr, sp, #32
   16ab0:	stmia	ip!, {r0, r1, r2, r3}
   16ab4:	mov	r8, #67108864	; 0x4000000
   16ab8:	ldm	r5!, {r0, r1, r2, r3}
   16abc:	ldr	r6, [pc, #436]	; 16c78 <__assert_fail@plt+0x5d34>
   16ac0:	stmia	ip!, {r0, r1, r2, r3}
   16ac4:	ldm	r5, {r0, r1, r2, r3}
   16ac8:	stm	ip, {r0, r1, r2, r3}
   16acc:	ldm	r7!, {r0, r1, r2, r3}
   16ad0:	stmia	lr!, {r0, r1, r2, r3}
   16ad4:	ldm	r7!, {r0, r1, r2, r3}
   16ad8:	str	r8, [sp, #44]	; 0x2c
   16adc:	stmia	lr!, {r0, r1, r2, r3}
   16ae0:	ldm	ip, {r0, r1, r2, r3}
   16ae4:	stm	lr, {r0, r1, r2, r3}
   16ae8:	bl	10e84 <__errno_location@plt>
   16aec:	cmn	r4, #-2147483647	; 0x80000001
   16af0:	ldr	r5, [r6]
   16af4:	mov	r7, r0
   16af8:	movne	r0, #0
   16afc:	moveq	r0, #1
   16b00:	ldr	r3, [r7]
   16b04:	orrs	r0, r0, r4, lsr #31
   16b08:	str	r3, [sp, #24]
   16b0c:	bne	16c74 <__assert_fail@plt+0x5d30>
   16b10:	ldr	r2, [r6, #4]
   16b14:	cmp	r4, r2
   16b18:	blt	16b78 <__assert_fail@plt+0x5c34>
   16b1c:	add	r8, r6, #8
   16b20:	cmp	r5, r8
   16b24:	str	r2, [sp, #80]	; 0x50
   16b28:	beq	16c44 <__assert_fail@plt+0x5d00>
   16b2c:	mov	r3, #8
   16b30:	sub	r2, r4, r2
   16b34:	mov	r0, r5
   16b38:	str	r3, [sp]
   16b3c:	add	r2, r2, #1
   16b40:	add	r1, sp, #80	; 0x50
   16b44:	mvn	r3, #-2147483648	; 0x80000000
   16b48:	bl	187c8 <__assert_fail@plt+0x7884>
   16b4c:	mov	r5, r0
   16b50:	str	r0, [r6]
   16b54:	ldr	r0, [r6, #4]
   16b58:	ldr	r2, [sp, #80]	; 0x50
   16b5c:	mov	r1, #0
   16b60:	sub	r2, r2, r0
   16b64:	add	r0, r5, r0, lsl #3
   16b68:	lsl	r2, r2, #3
   16b6c:	bl	10ea8 <memset@plt>
   16b70:	ldr	r3, [sp, #80]	; 0x50
   16b74:	str	r3, [r6, #4]
   16b78:	add	fp, r5, r4, lsl #3
   16b7c:	ldr	r1, [sp, #36]	; 0x24
   16b80:	ldr	r8, [r5, r4, lsl #3]
   16b84:	ldr	r6, [fp, #4]
   16b88:	ldr	r2, [sp, #72]	; 0x48
   16b8c:	ldr	r3, [sp, #32]
   16b90:	ldr	ip, [sp, #76]	; 0x4c
   16b94:	orr	r1, r1, #1
   16b98:	add	sl, sp, #40	; 0x28
   16b9c:	str	r1, [sp, #28]
   16ba0:	str	r1, [sp, #4]
   16ba4:	str	r2, [sp, #12]
   16ba8:	str	r3, [sp]
   16bac:	mov	r0, r6
   16bb0:	mov	r1, r8
   16bb4:	str	ip, [sp, #16]
   16bb8:	str	sl, [sp, #8]
   16bbc:	mvn	r3, #0
   16bc0:	mov	r2, r9
   16bc4:	bl	13c68 <__assert_fail@plt+0x2d24>
   16bc8:	cmp	r8, r0
   16bcc:	bhi	16c30 <__assert_fail@plt+0x5cec>
   16bd0:	ldr	r3, [pc, #164]	; 16c7c <__assert_fail@plt+0x5d38>
   16bd4:	add	r8, r0, #1
   16bd8:	cmp	r6, r3
   16bdc:	str	r8, [r5, r4, lsl #3]
   16be0:	beq	16bec <__assert_fail@plt+0x5ca8>
   16be4:	mov	r0, r6
   16be8:	bl	13a3c <__assert_fail@plt+0x2af8>
   16bec:	mov	r0, r8
   16bf0:	bl	185ac <__assert_fail@plt+0x7668>
   16bf4:	ldr	lr, [sp, #76]	; 0x4c
   16bf8:	ldr	r3, [sp, #32]
   16bfc:	ldr	ip, [sp, #72]	; 0x48
   16c00:	ldr	r4, [sp, #28]
   16c04:	mov	r2, r9
   16c08:	mov	r1, r8
   16c0c:	str	r0, [fp, #4]
   16c10:	str	r3, [sp]
   16c14:	str	sl, [sp, #8]
   16c18:	str	r4, [sp, #4]
   16c1c:	str	lr, [sp, #16]
   16c20:	str	ip, [sp, #12]
   16c24:	mvn	r3, #0
   16c28:	mov	r6, r0
   16c2c:	bl	13c68 <__assert_fail@plt+0x2d24>
   16c30:	ldr	r3, [sp, #24]
   16c34:	mov	r0, r6
   16c38:	str	r3, [r7]
   16c3c:	add	sp, sp, #180	; 0xb4
   16c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c44:	mov	r3, #8
   16c48:	sub	r2, r4, r2
   16c4c:	add	r1, sp, #80	; 0x50
   16c50:	str	r3, [sp]
   16c54:	add	r2, r2, #1
   16c58:	mvn	r3, #-2147483648	; 0x80000000
   16c5c:	bl	187c8 <__assert_fail@plt+0x7884>
   16c60:	mov	r5, r0
   16c64:	ldm	r8, {r0, r1}
   16c68:	str	r5, [r6]
   16c6c:	stm	r5, {r0, r1}
   16c70:	b	16b54 <__assert_fail@plt+0x5c10>
   16c74:	bl	10f2c <abort@plt>
   16c78:	strdeq	ip, [r2], -r8
   16c7c:	andeq	lr, r2, r0, lsr #9
   16c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c84:	mov	r7, r1
   16c88:	ldr	lr, [pc, #492]	; 16e7c <__assert_fail@plt+0x5f38>
   16c8c:	mov	r8, r2
   16c90:	mov	r4, r0
   16c94:	mov	fp, r3
   16c98:	ldm	lr!, {r0, r1, r2, r3}
   16c9c:	sub	sp, sp, #100	; 0x64
   16ca0:	add	ip, sp, #48	; 0x30
   16ca4:	mov	sl, #10
   16ca8:	stmia	ip!, {r0, r1, r2, r3}
   16cac:	cmp	r8, #0
   16cb0:	cmpne	r7, #0
   16cb4:	ldm	lr!, {r0, r1, r2, r3}
   16cb8:	str	sl, [sp, #48]	; 0x30
   16cbc:	stmia	ip!, {r0, r1, r2, r3}
   16cc0:	ldm	lr, {r0, r1, r2, r3}
   16cc4:	stm	ip, {r0, r1, r2, r3}
   16cc8:	beq	16e78 <__assert_fail@plt+0x5f34>
   16ccc:	str	r7, [sp, #88]	; 0x58
   16cd0:	str	r8, [sp, #92]	; 0x5c
   16cd4:	bl	10e84 <__errno_location@plt>
   16cd8:	ldr	r6, [pc, #416]	; 16e80 <__assert_fail@plt+0x5f3c>
   16cdc:	cmn	r4, #-2147483647	; 0x80000001
   16ce0:	ldr	r5, [r6]
   16ce4:	mov	r9, r0
   16ce8:	movne	r0, #0
   16cec:	moveq	r0, #1
   16cf0:	ldr	r3, [r9]
   16cf4:	orrs	r0, r0, r4, lsr #31
   16cf8:	str	r3, [sp, #28]
   16cfc:	bne	16e78 <__assert_fail@plt+0x5f34>
   16d00:	ldr	r2, [r6, #4]
   16d04:	cmp	r4, r2
   16d08:	movlt	r3, sl
   16d0c:	blt	16d78 <__assert_fail@plt+0x5e34>
   16d10:	add	r7, r6, #8
   16d14:	cmp	r5, r7
   16d18:	str	r2, [sp, #44]	; 0x2c
   16d1c:	beq	16e48 <__assert_fail@plt+0x5f04>
   16d20:	mov	r3, #8
   16d24:	sub	r2, r4, r2
   16d28:	mov	r0, r5
   16d2c:	str	r3, [sp]
   16d30:	add	r2, r2, #1
   16d34:	mvn	r3, #-2147483648	; 0x80000000
   16d38:	add	r1, sp, #44	; 0x2c
   16d3c:	bl	187c8 <__assert_fail@plt+0x7884>
   16d40:	mov	r5, r0
   16d44:	str	r0, [r6]
   16d48:	ldr	r0, [r6, #4]
   16d4c:	ldr	r2, [sp, #44]	; 0x2c
   16d50:	mov	r1, #0
   16d54:	sub	r2, r2, r0
   16d58:	add	r0, r5, r0, lsl #3
   16d5c:	lsl	r2, r2, #3
   16d60:	bl	10ea8 <memset@plt>
   16d64:	ldr	r3, [sp, #48]	; 0x30
   16d68:	ldr	r7, [sp, #88]	; 0x58
   16d6c:	ldr	r8, [sp, #92]	; 0x5c
   16d70:	ldr	r2, [sp, #44]	; 0x2c
   16d74:	str	r2, [r6, #4]
   16d78:	add	r2, r5, r4, lsl #3
   16d7c:	mov	r1, r2
   16d80:	str	r2, [sp, #32]
   16d84:	ldr	r2, [sp, #52]	; 0x34
   16d88:	ldr	r6, [r1, #4]
   16d8c:	ldr	sl, [r5, r4, lsl #3]
   16d90:	orr	r2, r2, #1
   16d94:	str	r3, [sp]
   16d98:	add	r3, sp, #56	; 0x38
   16d9c:	str	r2, [sp, #36]	; 0x24
   16da0:	str	r2, [sp, #4]
   16da4:	str	r3, [sp, #8]
   16da8:	mov	r0, r6
   16dac:	str	r8, [sp, #16]
   16db0:	str	r7, [sp, #12]
   16db4:	mov	r1, sl
   16db8:	mvn	r3, #0
   16dbc:	mov	r2, fp
   16dc0:	bl	13c68 <__assert_fail@plt+0x2d24>
   16dc4:	cmp	sl, r0
   16dc8:	bhi	16e34 <__assert_fail@plt+0x5ef0>
   16dcc:	ldr	r3, [pc, #176]	; 16e84 <__assert_fail@plt+0x5f40>
   16dd0:	add	r7, r0, #1
   16dd4:	cmp	r6, r3
   16dd8:	str	r7, [r5, r4, lsl #3]
   16ddc:	beq	16de8 <__assert_fail@plt+0x5ea4>
   16de0:	mov	r0, r6
   16de4:	bl	13a3c <__assert_fail@plt+0x2af8>
   16de8:	mov	r0, r7
   16dec:	bl	185ac <__assert_fail@plt+0x7668>
   16df0:	ldr	r3, [sp, #32]
   16df4:	ldr	lr, [sp, #92]	; 0x5c
   16df8:	ldr	ip, [sp, #88]	; 0x58
   16dfc:	ldr	r4, [sp, #36]	; 0x24
   16e00:	mov	r2, fp
   16e04:	mov	r1, r7
   16e08:	str	r0, [r3, #4]
   16e0c:	add	r3, sp, #56	; 0x38
   16e10:	str	r3, [sp, #8]
   16e14:	ldr	r3, [sp, #48]	; 0x30
   16e18:	str	r4, [sp, #4]
   16e1c:	str	r3, [sp]
   16e20:	str	lr, [sp, #16]
   16e24:	str	ip, [sp, #12]
   16e28:	mvn	r3, #0
   16e2c:	mov	r6, r0
   16e30:	bl	13c68 <__assert_fail@plt+0x2d24>
   16e34:	ldr	r3, [sp, #28]
   16e38:	mov	r0, r6
   16e3c:	str	r3, [r9]
   16e40:	add	sp, sp, #100	; 0x64
   16e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e48:	mov	r3, #8
   16e4c:	sub	r2, r4, r2
   16e50:	str	r3, [sp]
   16e54:	add	r1, sp, #44	; 0x2c
   16e58:	add	r2, r2, #1
   16e5c:	mvn	r3, #-2147483648	; 0x80000000
   16e60:	bl	187c8 <__assert_fail@plt+0x7884>
   16e64:	mov	r5, r0
   16e68:	ldm	r7, {r0, r1}
   16e6c:	str	r5, [r6]
   16e70:	stm	r5, {r0, r1}
   16e74:	b	16d48 <__assert_fail@plt+0x5e04>
   16e78:	bl	10f2c <abort@plt>
   16e7c:	andeq	lr, r2, r0, ror r4
   16e80:	strdeq	ip, [r2], -r8
   16e84:	andeq	lr, r2, r0, lsr #9
   16e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e8c:	mov	r7, r1
   16e90:	ldr	lr, [pc, #492]	; 17084 <__assert_fail@plt+0x6140>
   16e94:	mov	r8, r2
   16e98:	mov	r4, r0
   16e9c:	mov	fp, r3
   16ea0:	ldm	lr!, {r0, r1, r2, r3}
   16ea4:	sub	sp, sp, #100	; 0x64
   16ea8:	add	ip, sp, #48	; 0x30
   16eac:	mov	sl, #10
   16eb0:	stmia	ip!, {r0, r1, r2, r3}
   16eb4:	cmp	r8, #0
   16eb8:	cmpne	r7, #0
   16ebc:	ldm	lr!, {r0, r1, r2, r3}
   16ec0:	str	sl, [sp, #48]	; 0x30
   16ec4:	stmia	ip!, {r0, r1, r2, r3}
   16ec8:	ldm	lr, {r0, r1, r2, r3}
   16ecc:	stm	ip, {r0, r1, r2, r3}
   16ed0:	beq	17080 <__assert_fail@plt+0x613c>
   16ed4:	str	r7, [sp, #88]	; 0x58
   16ed8:	str	r8, [sp, #92]	; 0x5c
   16edc:	bl	10e84 <__errno_location@plt>
   16ee0:	ldr	r6, [pc, #416]	; 17088 <__assert_fail@plt+0x6144>
   16ee4:	cmn	r4, #-2147483647	; 0x80000001
   16ee8:	ldr	r5, [r6]
   16eec:	mov	r9, r0
   16ef0:	movne	r0, #0
   16ef4:	moveq	r0, #1
   16ef8:	ldr	r3, [r9]
   16efc:	orrs	r0, r0, r4, lsr #31
   16f00:	str	r3, [sp, #28]
   16f04:	bne	17080 <__assert_fail@plt+0x613c>
   16f08:	ldr	r2, [r6, #4]
   16f0c:	cmp	r4, r2
   16f10:	movlt	r3, sl
   16f14:	blt	16f80 <__assert_fail@plt+0x603c>
   16f18:	add	r7, r6, #8
   16f1c:	cmp	r5, r7
   16f20:	str	r2, [sp, #44]	; 0x2c
   16f24:	beq	17050 <__assert_fail@plt+0x610c>
   16f28:	mov	r3, #8
   16f2c:	sub	r2, r4, r2
   16f30:	mov	r0, r5
   16f34:	str	r3, [sp]
   16f38:	add	r2, r2, #1
   16f3c:	mvn	r3, #-2147483648	; 0x80000000
   16f40:	add	r1, sp, #44	; 0x2c
   16f44:	bl	187c8 <__assert_fail@plt+0x7884>
   16f48:	mov	r5, r0
   16f4c:	str	r0, [r6]
   16f50:	ldr	r0, [r6, #4]
   16f54:	ldr	r2, [sp, #44]	; 0x2c
   16f58:	mov	r1, #0
   16f5c:	sub	r2, r2, r0
   16f60:	add	r0, r5, r0, lsl #3
   16f64:	lsl	r2, r2, #3
   16f68:	bl	10ea8 <memset@plt>
   16f6c:	ldr	r3, [sp, #48]	; 0x30
   16f70:	ldr	r7, [sp, #88]	; 0x58
   16f74:	ldr	r8, [sp, #92]	; 0x5c
   16f78:	ldr	r2, [sp, #44]	; 0x2c
   16f7c:	str	r2, [r6, #4]
   16f80:	add	r2, r5, r4, lsl #3
   16f84:	mov	r1, r2
   16f88:	str	r2, [sp, #32]
   16f8c:	ldr	r2, [sp, #52]	; 0x34
   16f90:	ldr	r6, [r1, #4]
   16f94:	ldr	sl, [r5, r4, lsl #3]
   16f98:	orr	r2, r2, #1
   16f9c:	str	r3, [sp]
   16fa0:	add	r3, sp, #56	; 0x38
   16fa4:	str	r2, [sp, #36]	; 0x24
   16fa8:	str	r2, [sp, #4]
   16fac:	str	r3, [sp, #8]
   16fb0:	mov	r0, r6
   16fb4:	str	r8, [sp, #16]
   16fb8:	str	r7, [sp, #12]
   16fbc:	mov	r1, sl
   16fc0:	ldr	r3, [sp, #136]	; 0x88
   16fc4:	mov	r2, fp
   16fc8:	bl	13c68 <__assert_fail@plt+0x2d24>
   16fcc:	cmp	sl, r0
   16fd0:	bhi	1703c <__assert_fail@plt+0x60f8>
   16fd4:	ldr	r3, [pc, #176]	; 1708c <__assert_fail@plt+0x6148>
   16fd8:	add	r7, r0, #1
   16fdc:	cmp	r6, r3
   16fe0:	str	r7, [r5, r4, lsl #3]
   16fe4:	beq	16ff0 <__assert_fail@plt+0x60ac>
   16fe8:	mov	r0, r6
   16fec:	bl	13a3c <__assert_fail@plt+0x2af8>
   16ff0:	mov	r0, r7
   16ff4:	bl	185ac <__assert_fail@plt+0x7668>
   16ff8:	ldr	r3, [sp, #32]
   16ffc:	ldr	lr, [sp, #92]	; 0x5c
   17000:	ldr	ip, [sp, #88]	; 0x58
   17004:	ldr	r4, [sp, #36]	; 0x24
   17008:	mov	r2, fp
   1700c:	mov	r1, r7
   17010:	str	r0, [r3, #4]
   17014:	add	r3, sp, #56	; 0x38
   17018:	str	r3, [sp, #8]
   1701c:	ldr	r3, [sp, #48]	; 0x30
   17020:	str	r4, [sp, #4]
   17024:	str	r3, [sp]
   17028:	str	lr, [sp, #16]
   1702c:	str	ip, [sp, #12]
   17030:	ldr	r3, [sp, #136]	; 0x88
   17034:	mov	r6, r0
   17038:	bl	13c68 <__assert_fail@plt+0x2d24>
   1703c:	ldr	r3, [sp, #28]
   17040:	mov	r0, r6
   17044:	str	r3, [r9]
   17048:	add	sp, sp, #100	; 0x64
   1704c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17050:	mov	r3, #8
   17054:	sub	r2, r4, r2
   17058:	str	r3, [sp]
   1705c:	add	r1, sp, #44	; 0x2c
   17060:	add	r2, r2, #1
   17064:	mvn	r3, #-2147483648	; 0x80000000
   17068:	bl	187c8 <__assert_fail@plt+0x7884>
   1706c:	mov	r5, r0
   17070:	ldm	r7, {r0, r1}
   17074:	str	r5, [r6]
   17078:	stm	r5, {r0, r1}
   1707c:	b	16f50 <__assert_fail@plt+0x600c>
   17080:	bl	10f2c <abort@plt>
   17084:	andeq	lr, r2, r0, ror r4
   17088:	strdeq	ip, [r2], -r8
   1708c:	andeq	lr, r2, r0, lsr #9
   17090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17094:	mov	r5, r0
   17098:	ldr	lr, [pc, #452]	; 17264 <__assert_fail@plt+0x6320>
   1709c:	mov	r6, r1
   170a0:	mov	sl, r2
   170a4:	ldm	lr!, {r0, r1, r2, r3}
   170a8:	sub	sp, sp, #92	; 0x5c
   170ac:	add	ip, sp, #40	; 0x28
   170b0:	cmp	r6, #0
   170b4:	cmpne	r5, #0
   170b8:	stmia	ip!, {r0, r1, r2, r3}
   170bc:	mov	r9, #10
   170c0:	ldm	lr!, {r0, r1, r2, r3}
   170c4:	moveq	fp, #1
   170c8:	movne	fp, #0
   170cc:	str	r9, [sp, #40]	; 0x28
   170d0:	stmia	ip!, {r0, r1, r2, r3}
   170d4:	ldm	lr, {r0, r1, r2, r3}
   170d8:	stm	ip, {r0, r1, r2, r3}
   170dc:	beq	17260 <__assert_fail@plt+0x631c>
   170e0:	str	r5, [sp, #80]	; 0x50
   170e4:	str	r6, [sp, #84]	; 0x54
   170e8:	bl	10e84 <__errno_location@plt>
   170ec:	ldr	r7, [pc, #372]	; 17268 <__assert_fail@plt+0x6324>
   170f0:	ldr	r2, [r7, #4]
   170f4:	ldr	r4, [r7]
   170f8:	cmp	r2, #0
   170fc:	ldr	r3, [r0]
   17100:	mov	r8, r0
   17104:	str	r3, [sp, #24]
   17108:	movgt	r3, r9
   1710c:	bgt	17174 <__assert_fail@plt+0x6230>
   17110:	add	r5, r7, #8
   17114:	cmp	r4, r5
   17118:	str	r2, [sp, #36]	; 0x24
   1711c:	beq	17230 <__assert_fail@plt+0x62ec>
   17120:	mov	r3, #8
   17124:	mov	r0, r4
   17128:	str	r3, [sp]
   1712c:	rsb	r2, r2, #1
   17130:	mvn	r3, #-2147483648	; 0x80000000
   17134:	add	r1, sp, #36	; 0x24
   17138:	bl	187c8 <__assert_fail@plt+0x7884>
   1713c:	mov	r4, r0
   17140:	str	r0, [r7]
   17144:	ldr	r0, [r7, #4]
   17148:	ldr	r2, [sp, #36]	; 0x24
   1714c:	mov	r1, #0
   17150:	sub	r2, r2, r0
   17154:	add	r0, r4, r0, lsl #3
   17158:	lsl	r2, r2, #3
   1715c:	bl	10ea8 <memset@plt>
   17160:	ldr	r3, [sp, #40]	; 0x28
   17164:	ldr	r5, [sp, #80]	; 0x50
   17168:	ldr	r6, [sp, #84]	; 0x54
   1716c:	ldr	r2, [sp, #36]	; 0x24
   17170:	str	r2, [r7, #4]
   17174:	ldr	r2, [sp, #44]	; 0x2c
   17178:	ldr	r9, [r4]
   1717c:	ldr	r7, [r4, #4]
   17180:	orr	r2, r2, #1
   17184:	add	fp, sp, #48	; 0x30
   17188:	str	r2, [sp, #28]
   1718c:	str	r2, [sp, #4]
   17190:	str	r3, [sp]
   17194:	str	r6, [sp, #16]
   17198:	str	r5, [sp, #12]
   1719c:	mov	r1, r9
   171a0:	mov	r0, r7
   171a4:	str	fp, [sp, #8]
   171a8:	mvn	r3, #0
   171ac:	mov	r2, sl
   171b0:	bl	13c68 <__assert_fail@plt+0x2d24>
   171b4:	cmp	r9, r0
   171b8:	bhi	1721c <__assert_fail@plt+0x62d8>
   171bc:	ldr	r3, [pc, #168]	; 1726c <__assert_fail@plt+0x6328>
   171c0:	add	r5, r0, #1
   171c4:	cmp	r7, r3
   171c8:	str	r5, [r4]
   171cc:	beq	171d8 <__assert_fail@plt+0x6294>
   171d0:	mov	r0, r7
   171d4:	bl	13a3c <__assert_fail@plt+0x2af8>
   171d8:	mov	r0, r5
   171dc:	bl	185ac <__assert_fail@plt+0x7668>
   171e0:	ldr	lr, [sp, #84]	; 0x54
   171e4:	ldr	r3, [sp, #40]	; 0x28
   171e8:	ldr	ip, [sp, #80]	; 0x50
   171ec:	mov	r2, sl
   171f0:	mov	r1, r5
   171f4:	str	r0, [r4, #4]
   171f8:	ldr	r4, [sp, #28]
   171fc:	str	r3, [sp]
   17200:	str	fp, [sp, #8]
   17204:	str	r4, [sp, #4]
   17208:	str	lr, [sp, #16]
   1720c:	str	ip, [sp, #12]
   17210:	mvn	r3, #0
   17214:	mov	r7, r0
   17218:	bl	13c68 <__assert_fail@plt+0x2d24>
   1721c:	ldr	r3, [sp, #24]
   17220:	mov	r0, r7
   17224:	str	r3, [r8]
   17228:	add	sp, sp, #92	; 0x5c
   1722c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17230:	mov	r3, #8
   17234:	str	r3, [sp]
   17238:	add	r1, sp, #36	; 0x24
   1723c:	rsb	r2, r2, #1
   17240:	mov	r0, fp
   17244:	mvn	r3, #-2147483648	; 0x80000000
   17248:	bl	187c8 <__assert_fail@plt+0x7884>
   1724c:	mov	r4, r0
   17250:	ldm	r5, {r0, r1}
   17254:	str	r4, [r7]
   17258:	stm	r4, {r0, r1}
   1725c:	b	17144 <__assert_fail@plt+0x6200>
   17260:	bl	10f2c <abort@plt>
   17264:	andeq	lr, r2, r0, ror r4
   17268:	strdeq	ip, [r2], -r8
   1726c:	andeq	lr, r2, r0, lsr #9
   17270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17274:	mov	r5, r0
   17278:	ldr	lr, [pc, #464]	; 17450 <__assert_fail@plt+0x650c>
   1727c:	mov	r6, r1
   17280:	mov	sl, r2
   17284:	mov	fp, r3
   17288:	ldm	lr!, {r0, r1, r2, r3}
   1728c:	sub	sp, sp, #92	; 0x5c
   17290:	add	ip, sp, #40	; 0x28
   17294:	cmp	r6, #0
   17298:	cmpne	r5, #0
   1729c:	stmia	ip!, {r0, r1, r2, r3}
   172a0:	moveq	r4, #1
   172a4:	ldm	lr!, {r0, r1, r2, r3}
   172a8:	movne	r4, #0
   172ac:	mov	r9, #10
   172b0:	str	r4, [sp, #28]
   172b4:	stmia	ip!, {r0, r1, r2, r3}
   172b8:	ldm	lr, {r0, r1, r2, r3}
   172bc:	str	r9, [sp, #40]	; 0x28
   172c0:	stm	ip, {r0, r1, r2, r3}
   172c4:	beq	1744c <__assert_fail@plt+0x6508>
   172c8:	str	r5, [sp, #80]	; 0x50
   172cc:	str	r6, [sp, #84]	; 0x54
   172d0:	bl	10e84 <__errno_location@plt>
   172d4:	ldr	r7, [pc, #376]	; 17454 <__assert_fail@plt+0x6510>
   172d8:	ldr	r2, [r7, #4]
   172dc:	ldr	r4, [r7]
   172e0:	cmp	r2, #0
   172e4:	ldr	r3, [r0]
   172e8:	mov	r8, r0
   172ec:	str	r3, [sp, #24]
   172f0:	movgt	r3, r9
   172f4:	bgt	1735c <__assert_fail@plt+0x6418>
   172f8:	add	r5, r7, #8
   172fc:	cmp	r4, r5
   17300:	str	r2, [sp, #36]	; 0x24
   17304:	beq	1741c <__assert_fail@plt+0x64d8>
   17308:	mov	r3, #8
   1730c:	mov	r0, r4
   17310:	str	r3, [sp]
   17314:	rsb	r2, r2, #1
   17318:	mvn	r3, #-2147483648	; 0x80000000
   1731c:	add	r1, sp, #36	; 0x24
   17320:	bl	187c8 <__assert_fail@plt+0x7884>
   17324:	mov	r4, r0
   17328:	str	r0, [r7]
   1732c:	ldr	r0, [r7, #4]
   17330:	ldr	r2, [sp, #36]	; 0x24
   17334:	mov	r1, #0
   17338:	sub	r2, r2, r0
   1733c:	add	r0, r4, r0, lsl #3
   17340:	lsl	r2, r2, #3
   17344:	bl	10ea8 <memset@plt>
   17348:	ldr	r3, [sp, #40]	; 0x28
   1734c:	ldr	r5, [sp, #80]	; 0x50
   17350:	ldr	r6, [sp, #84]	; 0x54
   17354:	ldr	r2, [sp, #36]	; 0x24
   17358:	str	r2, [r7, #4]
   1735c:	ldr	r2, [sp, #44]	; 0x2c
   17360:	ldr	r9, [r4]
   17364:	ldr	r7, [r4, #4]
   17368:	orr	r2, r2, #1
   1736c:	str	r3, [sp]
   17370:	add	r3, sp, #48	; 0x30
   17374:	str	r2, [sp, #28]
   17378:	str	r2, [sp, #4]
   1737c:	str	r3, [sp, #8]
   17380:	str	r6, [sp, #16]
   17384:	str	r5, [sp, #12]
   17388:	mov	r1, r9
   1738c:	mov	r0, r7
   17390:	mov	r3, fp
   17394:	mov	r2, sl
   17398:	bl	13c68 <__assert_fail@plt+0x2d24>
   1739c:	cmp	r9, r0
   173a0:	bhi	17408 <__assert_fail@plt+0x64c4>
   173a4:	ldr	r3, [pc, #172]	; 17458 <__assert_fail@plt+0x6514>
   173a8:	add	r5, r0, #1
   173ac:	cmp	r7, r3
   173b0:	str	r5, [r4]
   173b4:	beq	173c0 <__assert_fail@plt+0x647c>
   173b8:	mov	r0, r7
   173bc:	bl	13a3c <__assert_fail@plt+0x2af8>
   173c0:	mov	r0, r5
   173c4:	bl	185ac <__assert_fail@plt+0x7668>
   173c8:	add	lr, sp, #48	; 0x30
   173cc:	ldr	ip, [sp, #84]	; 0x54
   173d0:	mov	r1, r5
   173d4:	ldr	r5, [sp, #28]
   173d8:	mov	r3, fp
   173dc:	mov	r2, sl
   173e0:	str	r0, [r4, #4]
   173e4:	ldr	r4, [sp, #80]	; 0x50
   173e8:	str	lr, [sp, #8]
   173ec:	ldr	lr, [sp, #40]	; 0x28
   173f0:	str	r5, [sp, #4]
   173f4:	str	ip, [sp, #16]
   173f8:	str	r4, [sp, #12]
   173fc:	str	lr, [sp]
   17400:	mov	r7, r0
   17404:	bl	13c68 <__assert_fail@plt+0x2d24>
   17408:	ldr	r3, [sp, #24]
   1740c:	mov	r0, r7
   17410:	str	r3, [r8]
   17414:	add	sp, sp, #92	; 0x5c
   17418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1741c:	mov	r3, #8
   17420:	str	r3, [sp]
   17424:	add	r1, sp, #36	; 0x24
   17428:	rsb	r2, r2, #1
   1742c:	ldr	r0, [sp, #28]
   17430:	mvn	r3, #-2147483648	; 0x80000000
   17434:	bl	187c8 <__assert_fail@plt+0x7884>
   17438:	mov	r4, r0
   1743c:	ldm	r5, {r0, r1}
   17440:	str	r4, [r7]
   17444:	stm	r4, {r0, r1}
   17448:	b	1732c <__assert_fail@plt+0x63e8>
   1744c:	bl	10f2c <abort@plt>
   17450:	andeq	lr, r2, r0, ror r4
   17454:	strdeq	ip, [r2], -r8
   17458:	andeq	lr, r2, r0, lsr #9
   1745c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17460:	sub	sp, sp, #52	; 0x34
   17464:	mov	r5, r0
   17468:	mov	sl, r1
   1746c:	mov	fp, r2
   17470:	bl	10e84 <__errno_location@plt>
   17474:	ldr	r4, [pc, #404]	; 17610 <__assert_fail@plt+0x66cc>
   17478:	cmn	r5, #-2147483647	; 0x80000001
   1747c:	ldr	r6, [r4]
   17480:	mov	r8, r0
   17484:	movne	r0, #0
   17488:	moveq	r0, #1
   1748c:	ldr	r3, [r8]
   17490:	orrs	r0, r0, r5, lsr #31
   17494:	str	r3, [sp, #28]
   17498:	bne	1760c <__assert_fail@plt+0x66c8>
   1749c:	ldr	r2, [r4, #4]
   174a0:	cmp	r5, r2
   174a4:	blt	17504 <__assert_fail@plt+0x65c0>
   174a8:	add	r7, r4, #8
   174ac:	cmp	r6, r7
   174b0:	str	r2, [sp, #44]	; 0x2c
   174b4:	beq	175dc <__assert_fail@plt+0x6698>
   174b8:	mov	r3, #8
   174bc:	sub	r2, r5, r2
   174c0:	mov	r0, r6
   174c4:	str	r3, [sp]
   174c8:	add	r2, r2, #1
   174cc:	mvn	r3, #-2147483648	; 0x80000000
   174d0:	add	r1, sp, #44	; 0x2c
   174d4:	bl	187c8 <__assert_fail@plt+0x7884>
   174d8:	mov	r6, r0
   174dc:	str	r0, [r4]
   174e0:	ldr	r0, [r4, #4]
   174e4:	ldr	r2, [sp, #44]	; 0x2c
   174e8:	mov	r1, #0
   174ec:	sub	r2, r2, r0
   174f0:	add	r0, r6, r0, lsl #3
   174f4:	lsl	r2, r2, #3
   174f8:	bl	10ea8 <memset@plt>
   174fc:	ldr	r3, [sp, #44]	; 0x2c
   17500:	str	r3, [r4, #4]
   17504:	ldr	r2, [r4, #56]	; 0x38
   17508:	add	r3, r6, r5, lsl #3
   1750c:	ldr	r1, [r4, #20]
   17510:	ldr	r7, [r3, #4]
   17514:	ldr	r9, [r6, r5, lsl #3]
   17518:	ldr	ip, [r4, #60]	; 0x3c
   1751c:	str	r3, [sp, #32]
   17520:	ldr	r3, [r4, #16]
   17524:	str	r2, [sp, #12]
   17528:	ldr	r2, [pc, #228]	; 17614 <__assert_fail@plt+0x66d0>
   1752c:	orr	r1, r1, #1
   17530:	str	r1, [sp, #36]	; 0x24
   17534:	str	r1, [sp, #4]
   17538:	str	r2, [sp, #8]
   1753c:	str	r3, [sp]
   17540:	mov	r0, r7
   17544:	mov	r1, r9
   17548:	str	ip, [sp, #16]
   1754c:	mov	r3, fp
   17550:	mov	r2, sl
   17554:	bl	13c68 <__assert_fail@plt+0x2d24>
   17558:	cmp	r9, r0
   1755c:	bhi	175c8 <__assert_fail@plt+0x6684>
   17560:	ldr	r3, [pc, #176]	; 17618 <__assert_fail@plt+0x66d4>
   17564:	add	r9, r0, #1
   17568:	cmp	r7, r3
   1756c:	str	r9, [r6, r5, lsl #3]
   17570:	beq	1757c <__assert_fail@plt+0x6638>
   17574:	mov	r0, r7
   17578:	bl	13a3c <__assert_fail@plt+0x2af8>
   1757c:	mov	r0, r9
   17580:	bl	185ac <__assert_fail@plt+0x7668>
   17584:	ldr	ip, [sp, #32]
   17588:	ldr	lr, [r4, #60]	; 0x3c
   1758c:	ldr	r5, [r4, #56]	; 0x38
   17590:	mov	r3, fp
   17594:	mov	r2, sl
   17598:	mov	r1, r9
   1759c:	str	r0, [ip, #4]
   175a0:	ldr	ip, [r4, #16]
   175a4:	ldr	r4, [pc, #104]	; 17614 <__assert_fail@plt+0x66d0>
   175a8:	str	lr, [sp, #16]
   175ac:	str	r4, [sp, #8]
   175b0:	ldr	r4, [sp, #36]	; 0x24
   175b4:	str	r5, [sp, #12]
   175b8:	str	r4, [sp, #4]
   175bc:	str	ip, [sp]
   175c0:	mov	r7, r0
   175c4:	bl	13c68 <__assert_fail@plt+0x2d24>
   175c8:	ldr	r3, [sp, #28]
   175cc:	mov	r0, r7
   175d0:	str	r3, [r8]
   175d4:	add	sp, sp, #52	; 0x34
   175d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175dc:	mov	r3, #8
   175e0:	sub	r2, r5, r2
   175e4:	str	r3, [sp]
   175e8:	add	r1, sp, #44	; 0x2c
   175ec:	add	r2, r2, #1
   175f0:	mvn	r3, #-2147483648	; 0x80000000
   175f4:	bl	187c8 <__assert_fail@plt+0x7884>
   175f8:	mov	r6, r0
   175fc:	ldm	r7, {r0, r1}
   17600:	str	r6, [r4]
   17604:	stm	r6, {r0, r1}
   17608:	b	174e0 <__assert_fail@plt+0x659c>
   1760c:	bl	10f2c <abort@plt>
   17610:	strdeq	ip, [r2], -r8
   17614:	andeq	ip, r2, r0, lsl r1
   17618:	andeq	lr, r2, r0, lsr #9
   1761c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17620:	sub	sp, sp, #44	; 0x2c
   17624:	mov	r9, r0
   17628:	mov	sl, r1
   1762c:	bl	10e84 <__errno_location@plt>
   17630:	ldr	r4, [pc, #360]	; 177a0 <__assert_fail@plt+0x685c>
   17634:	ldr	r2, [r4, #4]
   17638:	ldr	r5, [r4]
   1763c:	cmp	r2, #0
   17640:	ldr	r3, [r0]
   17644:	mov	r7, r0
   17648:	str	r3, [sp, #24]
   1764c:	bgt	176a8 <__assert_fail@plt+0x6764>
   17650:	add	r6, r4, #8
   17654:	cmp	r5, r6
   17658:	str	r2, [sp, #36]	; 0x24
   1765c:	beq	17770 <__assert_fail@plt+0x682c>
   17660:	mov	r3, #8
   17664:	mov	r0, r5
   17668:	str	r3, [sp]
   1766c:	rsb	r2, r2, #1
   17670:	mvn	r3, #-2147483648	; 0x80000000
   17674:	add	r1, sp, #36	; 0x24
   17678:	bl	187c8 <__assert_fail@plt+0x7884>
   1767c:	mov	r5, r0
   17680:	str	r0, [r4]
   17684:	ldr	r0, [r4, #4]
   17688:	ldr	r2, [sp, #36]	; 0x24
   1768c:	mov	r1, #0
   17690:	sub	r2, r2, r0
   17694:	add	r0, r5, r0, lsl #3
   17698:	lsl	r2, r2, #3
   1769c:	bl	10ea8 <memset@plt>
   176a0:	ldr	r3, [sp, #36]	; 0x24
   176a4:	str	r3, [r4, #4]
   176a8:	ldr	r1, [r4, #20]
   176ac:	ldr	r8, [r5]
   176b0:	ldr	r6, [r5, #4]
   176b4:	ldr	r2, [r4, #56]	; 0x38
   176b8:	ldr	r3, [r4, #16]
   176bc:	ldr	ip, [r4, #60]	; 0x3c
   176c0:	ldr	fp, [pc, #220]	; 177a4 <__assert_fail@plt+0x6860>
   176c4:	orr	r1, r1, #1
   176c8:	str	r1, [sp, #28]
   176cc:	str	r1, [sp, #4]
   176d0:	str	r2, [sp, #12]
   176d4:	str	r3, [sp]
   176d8:	mov	r1, r8
   176dc:	mov	r0, r6
   176e0:	str	ip, [sp, #16]
   176e4:	str	fp, [sp, #8]
   176e8:	mov	r3, sl
   176ec:	mov	r2, r9
   176f0:	bl	13c68 <__assert_fail@plt+0x2d24>
   176f4:	cmp	r8, r0
   176f8:	bhi	1775c <__assert_fail@plt+0x6818>
   176fc:	ldr	r3, [pc, #164]	; 177a8 <__assert_fail@plt+0x6864>
   17700:	add	r8, r0, #1
   17704:	cmp	r6, r3
   17708:	str	r8, [r5]
   1770c:	beq	17718 <__assert_fail@plt+0x67d4>
   17710:	mov	r0, r6
   17714:	bl	13a3c <__assert_fail@plt+0x2af8>
   17718:	mov	r0, r8
   1771c:	bl	185ac <__assert_fail@plt+0x7668>
   17720:	ldr	lr, [r4, #60]	; 0x3c
   17724:	ldr	ip, [r4, #16]
   17728:	mov	r3, sl
   1772c:	mov	r2, r9
   17730:	mov	r1, r8
   17734:	str	r0, [r5, #4]
   17738:	ldr	r5, [r4, #56]	; 0x38
   1773c:	ldr	r4, [sp, #28]
   17740:	str	fp, [sp, #8]
   17744:	str	r4, [sp, #4]
   17748:	str	lr, [sp, #16]
   1774c:	str	r5, [sp, #12]
   17750:	str	ip, [sp]
   17754:	mov	r6, r0
   17758:	bl	13c68 <__assert_fail@plt+0x2d24>
   1775c:	ldr	r3, [sp, #24]
   17760:	mov	r0, r6
   17764:	str	r3, [r7]
   17768:	add	sp, sp, #44	; 0x2c
   1776c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17770:	mov	r3, #8
   17774:	str	r3, [sp]
   17778:	add	r1, sp, #36	; 0x24
   1777c:	rsb	r2, r2, #1
   17780:	mvn	r3, #-2147483648	; 0x80000000
   17784:	mov	r0, #0
   17788:	bl	187c8 <__assert_fail@plt+0x7884>
   1778c:	mov	r5, r0
   17790:	ldm	r6, {r0, r1}
   17794:	str	r5, [r4]
   17798:	stm	r5, {r0, r1}
   1779c:	b	17684 <__assert_fail@plt+0x6740>
   177a0:	strdeq	ip, [r2], -r8
   177a4:	andeq	ip, r2, r0, lsl r1
   177a8:	andeq	lr, r2, r0, lsr #9
   177ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177b0:	sub	sp, sp, #44	; 0x2c
   177b4:	mov	r5, r0
   177b8:	mov	sl, r1
   177bc:	bl	10e84 <__errno_location@plt>
   177c0:	ldr	r4, [pc, #396]	; 17954 <__assert_fail@plt+0x6a10>
   177c4:	cmn	r5, #-2147483647	; 0x80000001
   177c8:	ldr	r6, [r4]
   177cc:	mov	r8, r0
   177d0:	movne	r0, #0
   177d4:	moveq	r0, #1
   177d8:	ldr	r3, [r8]
   177dc:	orrs	r0, r0, r5, lsr #31
   177e0:	str	r3, [sp, #24]
   177e4:	bne	17950 <__assert_fail@plt+0x6a0c>
   177e8:	ldr	r2, [r4, #4]
   177ec:	cmp	r5, r2
   177f0:	blt	17850 <__assert_fail@plt+0x690c>
   177f4:	add	r7, r4, #8
   177f8:	cmp	r6, r7
   177fc:	str	r2, [sp, #36]	; 0x24
   17800:	beq	17920 <__assert_fail@plt+0x69dc>
   17804:	mov	r3, #8
   17808:	sub	r2, r5, r2
   1780c:	mov	r0, r6
   17810:	str	r3, [sp]
   17814:	add	r2, r2, #1
   17818:	mvn	r3, #-2147483648	; 0x80000000
   1781c:	add	r1, sp, #36	; 0x24
   17820:	bl	187c8 <__assert_fail@plt+0x7884>
   17824:	mov	r6, r0
   17828:	str	r0, [r4]
   1782c:	ldr	r0, [r4, #4]
   17830:	ldr	r2, [sp, #36]	; 0x24
   17834:	mov	r1, #0
   17838:	sub	r2, r2, r0
   1783c:	add	r0, r6, r0, lsl #3
   17840:	lsl	r2, r2, #3
   17844:	bl	10ea8 <memset@plt>
   17848:	ldr	r3, [sp, #36]	; 0x24
   1784c:	str	r3, [r4, #4]
   17850:	ldr	r2, [r4, #56]	; 0x38
   17854:	add	fp, r6, r5, lsl #3
   17858:	ldr	r1, [r4, #20]
   1785c:	ldr	r9, [r6, r5, lsl #3]
   17860:	ldr	r7, [fp, #4]
   17864:	ldr	r3, [r4, #16]
   17868:	ldr	ip, [r4, #60]	; 0x3c
   1786c:	str	r2, [sp, #12]
   17870:	ldr	r2, [pc, #224]	; 17958 <__assert_fail@plt+0x6a14>
   17874:	orr	r1, r1, #1
   17878:	str	r1, [sp, #28]
   1787c:	str	r1, [sp, #4]
   17880:	str	r2, [sp, #8]
   17884:	str	r3, [sp]
   17888:	mov	r0, r7
   1788c:	mov	r1, r9
   17890:	str	ip, [sp, #16]
   17894:	mvn	r3, #0
   17898:	mov	r2, sl
   1789c:	bl	13c68 <__assert_fail@plt+0x2d24>
   178a0:	cmp	r9, r0
   178a4:	bhi	1790c <__assert_fail@plt+0x69c8>
   178a8:	ldr	r3, [pc, #172]	; 1795c <__assert_fail@plt+0x6a18>
   178ac:	add	r9, r0, #1
   178b0:	cmp	r7, r3
   178b4:	str	r9, [r6, r5, lsl #3]
   178b8:	beq	178c4 <__assert_fail@plt+0x6980>
   178bc:	mov	r0, r7
   178c0:	bl	13a3c <__assert_fail@plt+0x2af8>
   178c4:	mov	r0, r9
   178c8:	bl	185ac <__assert_fail@plt+0x7668>
   178cc:	ldr	ip, [r4, #60]	; 0x3c
   178d0:	ldr	r3, [r4, #16]
   178d4:	ldr	lr, [r4, #56]	; 0x38
   178d8:	ldr	r4, [pc, #120]	; 17958 <__assert_fail@plt+0x6a14>
   178dc:	mov	r2, sl
   178e0:	mov	r1, r9
   178e4:	str	r0, [fp, #4]
   178e8:	str	r4, [sp, #8]
   178ec:	ldr	r4, [sp, #28]
   178f0:	str	r3, [sp]
   178f4:	str	r4, [sp, #4]
   178f8:	str	ip, [sp, #16]
   178fc:	str	lr, [sp, #12]
   17900:	mvn	r3, #0
   17904:	mov	r7, r0
   17908:	bl	13c68 <__assert_fail@plt+0x2d24>
   1790c:	ldr	r3, [sp, #24]
   17910:	mov	r0, r7
   17914:	str	r3, [r8]
   17918:	add	sp, sp, #44	; 0x2c
   1791c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17920:	mov	r3, #8
   17924:	sub	r2, r5, r2
   17928:	str	r3, [sp]
   1792c:	add	r1, sp, #36	; 0x24
   17930:	add	r2, r2, #1
   17934:	mvn	r3, #-2147483648	; 0x80000000
   17938:	bl	187c8 <__assert_fail@plt+0x7884>
   1793c:	mov	r6, r0
   17940:	ldm	r7, {r0, r1}
   17944:	str	r6, [r4]
   17948:	stm	r6, {r0, r1}
   1794c:	b	1782c <__assert_fail@plt+0x68e8>
   17950:	bl	10f2c <abort@plt>
   17954:	strdeq	ip, [r2], -r8
   17958:	andeq	ip, r2, r0, lsl r1
   1795c:	andeq	lr, r2, r0, lsr #9
   17960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17964:	sub	sp, sp, #44	; 0x2c
   17968:	mov	sl, r0
   1796c:	bl	10e84 <__errno_location@plt>
   17970:	ldr	r4, [pc, #348]	; 17ad4 <__assert_fail@plt+0x6b90>
   17974:	ldr	r2, [r4, #4]
   17978:	ldr	r5, [r4]
   1797c:	cmp	r2, #0
   17980:	ldr	r3, [r0]
   17984:	mov	r8, r0
   17988:	str	r3, [sp, #28]
   1798c:	bgt	179e8 <__assert_fail@plt+0x6aa4>
   17990:	add	r6, r4, #8
   17994:	cmp	r5, r6
   17998:	str	r2, [sp, #36]	; 0x24
   1799c:	beq	17aa4 <__assert_fail@plt+0x6b60>
   179a0:	mov	r3, #8
   179a4:	mov	r0, r5
   179a8:	str	r3, [sp]
   179ac:	rsb	r2, r2, #1
   179b0:	mvn	r3, #-2147483648	; 0x80000000
   179b4:	add	r1, sp, #36	; 0x24
   179b8:	bl	187c8 <__assert_fail@plt+0x7884>
   179bc:	mov	r5, r0
   179c0:	str	r0, [r4]
   179c4:	ldr	r0, [r4, #4]
   179c8:	ldr	r2, [sp, #36]	; 0x24
   179cc:	mov	r1, #0
   179d0:	sub	r2, r2, r0
   179d4:	add	r0, r5, r0, lsl #3
   179d8:	lsl	r2, r2, #3
   179dc:	bl	10ea8 <memset@plt>
   179e0:	ldr	r3, [sp, #36]	; 0x24
   179e4:	str	r3, [r4, #4]
   179e8:	ldr	r7, [r4, #20]
   179ec:	ldr	r9, [r5]
   179f0:	ldr	r6, [r5, #4]
   179f4:	ldr	r2, [r4, #56]	; 0x38
   179f8:	ldr	r3, [r4, #16]
   179fc:	ldr	ip, [r4, #60]	; 0x3c
   17a00:	ldr	fp, [pc, #208]	; 17ad8 <__assert_fail@plt+0x6b94>
   17a04:	orr	r7, r7, #1
   17a08:	str	r2, [sp, #12]
   17a0c:	str	r3, [sp]
   17a10:	str	r7, [sp, #4]
   17a14:	mov	r1, r9
   17a18:	mov	r0, r6
   17a1c:	str	ip, [sp, #16]
   17a20:	str	fp, [sp, #8]
   17a24:	mvn	r3, #0
   17a28:	mov	r2, sl
   17a2c:	bl	13c68 <__assert_fail@plt+0x2d24>
   17a30:	cmp	r9, r0
   17a34:	bhi	17a90 <__assert_fail@plt+0x6b4c>
   17a38:	ldr	r3, [pc, #156]	; 17adc <__assert_fail@plt+0x6b98>
   17a3c:	add	r9, r0, #1
   17a40:	cmp	r6, r3
   17a44:	str	r9, [r5]
   17a48:	beq	17a54 <__assert_fail@plt+0x6b10>
   17a4c:	mov	r0, r6
   17a50:	bl	13a3c <__assert_fail@plt+0x2af8>
   17a54:	mov	r0, r9
   17a58:	bl	185ac <__assert_fail@plt+0x7668>
   17a5c:	ldr	ip, [r4, #60]	; 0x3c
   17a60:	ldr	r3, [r4, #16]
   17a64:	ldr	lr, [r4, #56]	; 0x38
   17a68:	mov	r2, sl
   17a6c:	mov	r1, r9
   17a70:	str	r0, [r5, #4]
   17a74:	str	r3, [sp]
   17a78:	stmib	sp, {r7, fp}
   17a7c:	str	ip, [sp, #16]
   17a80:	str	lr, [sp, #12]
   17a84:	mvn	r3, #0
   17a88:	mov	r6, r0
   17a8c:	bl	13c68 <__assert_fail@plt+0x2d24>
   17a90:	ldr	r3, [sp, #28]
   17a94:	mov	r0, r6
   17a98:	str	r3, [r8]
   17a9c:	add	sp, sp, #44	; 0x2c
   17aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa4:	mov	r3, #8
   17aa8:	str	r3, [sp]
   17aac:	add	r1, sp, #36	; 0x24
   17ab0:	rsb	r2, r2, #1
   17ab4:	mvn	r3, #-2147483648	; 0x80000000
   17ab8:	mov	r0, #0
   17abc:	bl	187c8 <__assert_fail@plt+0x7884>
   17ac0:	mov	r5, r0
   17ac4:	ldm	r6, {r0, r1}
   17ac8:	str	r5, [r4]
   17acc:	stm	r5, {r0, r1}
   17ad0:	b	179c4 <__assert_fail@plt+0x6a80>
   17ad4:	strdeq	ip, [r2], -r8
   17ad8:	andeq	ip, r2, r0, lsl r1
   17adc:	andeq	lr, r2, r0, lsr #9
   17ae0:	push	{r4, r5, r6, r7, r8, lr}
   17ae4:	mov	r8, r0
   17ae8:	ldr	r5, [pc, #84]	; 17b44 <__assert_fail@plt+0x6c00>
   17aec:	mov	r7, r1
   17af0:	mov	r4, r2
   17af4:	mov	r2, r4
   17af8:	mov	r1, r7
   17afc:	mov	r0, r8
   17b00:	bl	10d04 <read@plt>
   17b04:	subs	r6, r0, #0
   17b08:	bge	17b3c <__assert_fail@plt+0x6bf8>
   17b0c:	bl	10e84 <__errno_location@plt>
   17b10:	ldr	r3, [r0]
   17b14:	cmp	r3, #4
   17b18:	beq	17af4 <__assert_fail@plt+0x6bb0>
   17b1c:	cmp	r4, r5
   17b20:	movls	r2, #0
   17b24:	movhi	r2, #1
   17b28:	cmp	r3, #22
   17b2c:	movne	r2, #0
   17b30:	cmp	r2, #0
   17b34:	mov	r4, r5
   17b38:	bne	17af4 <__assert_fail@plt+0x6bb0>
   17b3c:	mov	r0, r6
   17b40:	pop	{r4, r5, r6, r7, r8, pc}
   17b44:	svcvc	0x00f00000	; IMB
   17b48:	push	{r4, r5, r6, lr}
   17b4c:	sub	sp, sp, #32
   17b50:	cmp	r1, #0
   17b54:	mov	r4, r0
   17b58:	ldr	r5, [sp, #48]	; 0x30
   17b5c:	ldr	r6, [sp, #52]	; 0x34
   17b60:	beq	17e78 <__assert_fail@plt+0x6f34>
   17b64:	stm	sp, {r2, r3}
   17b68:	mov	r3, r1
   17b6c:	ldr	r2, [pc, #808]	; 17e9c <__assert_fail@plt+0x6f58>
   17b70:	mov	r1, #1
   17b74:	bl	10ecc <__fprintf_chk@plt>
   17b78:	mov	r2, #5
   17b7c:	ldr	r1, [pc, #796]	; 17ea0 <__assert_fail@plt+0x6f5c>
   17b80:	mov	r0, #0
   17b84:	bl	10d88 <dcgettext@plt>
   17b88:	ldr	r3, [pc, #788]	; 17ea4 <__assert_fail@plt+0x6f60>
   17b8c:	ldr	r2, [pc, #788]	; 17ea8 <__assert_fail@plt+0x6f64>
   17b90:	str	r3, [sp]
   17b94:	mov	r1, #1
   17b98:	mov	r3, r0
   17b9c:	mov	r0, r4
   17ba0:	bl	10ecc <__fprintf_chk@plt>
   17ba4:	mov	r1, r4
   17ba8:	mov	r0, #10
   17bac:	bl	10d7c <fputc_unlocked@plt>
   17bb0:	mov	r2, #5
   17bb4:	ldr	r1, [pc, #752]	; 17eac <__assert_fail@plt+0x6f68>
   17bb8:	mov	r0, #0
   17bbc:	bl	10d88 <dcgettext@plt>
   17bc0:	mov	r1, #1
   17bc4:	ldr	r3, [pc, #740]	; 17eb0 <__assert_fail@plt+0x6f6c>
   17bc8:	mov	r2, r0
   17bcc:	mov	r0, r4
   17bd0:	bl	10ecc <__fprintf_chk@plt>
   17bd4:	mov	r1, r4
   17bd8:	mov	r0, #10
   17bdc:	bl	10d7c <fputc_unlocked@plt>
   17be0:	cmp	r6, #9
   17be4:	ldrls	pc, [pc, r6, lsl #2]
   17be8:	b	17e90 <__assert_fail@plt+0x6f4c>
   17bec:	andeq	r7, r1, r0, ror ip
   17bf0:	andeq	r7, r1, r8, ror ip
   17bf4:	andeq	r7, r1, r4, lsr #25
   17bf8:	ldrdeq	r7, [r1], -r8
   17bfc:	andeq	r7, r1, r4, lsl sp
   17c00:	andeq	r7, r1, r0, asr sp
   17c04:	andeq	r7, r1, ip, lsl #27
   17c08:	ldrdeq	r7, [r1], -r0
   17c0c:	andeq	r7, r1, r0, lsr #28
   17c10:	andeq	r7, r1, r4, lsl ip
   17c14:	ldr	r1, [pc, #664]	; 17eb4 <__assert_fail@plt+0x6f70>
   17c18:	mov	r2, #5
   17c1c:	mov	r0, #0
   17c20:	bl	10d88 <dcgettext@plt>
   17c24:	ldr	ip, [r5, #32]
   17c28:	ldr	r1, [r5, #28]
   17c2c:	ldr	r2, [r5, #24]
   17c30:	ldr	r3, [r5]
   17c34:	ldr	r6, [r5, #20]
   17c38:	str	ip, [sp, #28]
   17c3c:	ldr	lr, [r5, #16]
   17c40:	str	r1, [sp, #24]
   17c44:	ldr	ip, [r5, #12]
   17c48:	str	r2, [sp, #20]
   17c4c:	ldr	r1, [r5, #8]
   17c50:	ldr	r2, [r5, #4]
   17c54:	str	r6, [sp, #16]
   17c58:	stmib	sp, {r1, ip, lr}
   17c5c:	mov	r1, #1
   17c60:	str	r2, [sp]
   17c64:	mov	r2, r0
   17c68:	mov	r0, r4
   17c6c:	bl	10ecc <__fprintf_chk@plt>
   17c70:	add	sp, sp, #32
   17c74:	pop	{r4, r5, r6, pc}
   17c78:	mov	r2, #5
   17c7c:	ldr	r1, [pc, #564]	; 17eb8 <__assert_fail@plt+0x6f74>
   17c80:	mov	r0, #0
   17c84:	bl	10d88 <dcgettext@plt>
   17c88:	ldr	r3, [r5]
   17c8c:	mov	r1, #1
   17c90:	mov	r2, r0
   17c94:	mov	r0, r4
   17c98:	add	sp, sp, #32
   17c9c:	pop	{r4, r5, r6, lr}
   17ca0:	b	10ecc <__fprintf_chk@plt>
   17ca4:	mov	r2, #5
   17ca8:	ldr	r1, [pc, #524]	; 17ebc <__assert_fail@plt+0x6f78>
   17cac:	mov	r0, #0
   17cb0:	bl	10d88 <dcgettext@plt>
   17cb4:	ldr	r2, [r5, #4]
   17cb8:	ldr	r3, [r5]
   17cbc:	mov	r1, #1
   17cc0:	str	r2, [sp, #48]	; 0x30
   17cc4:	mov	r2, r0
   17cc8:	mov	r0, r4
   17ccc:	add	sp, sp, #32
   17cd0:	pop	{r4, r5, r6, lr}
   17cd4:	b	10ecc <__fprintf_chk@plt>
   17cd8:	mov	r2, #5
   17cdc:	ldr	r1, [pc, #476]	; 17ec0 <__assert_fail@plt+0x6f7c>
   17ce0:	mov	r0, #0
   17ce4:	bl	10d88 <dcgettext@plt>
   17ce8:	ldr	r1, [r5, #8]
   17cec:	ldr	r2, [r5, #4]
   17cf0:	ldr	r3, [r5]
   17cf4:	str	r1, [sp, #52]	; 0x34
   17cf8:	str	r2, [sp, #48]	; 0x30
   17cfc:	mov	r1, #1
   17d00:	mov	r2, r0
   17d04:	mov	r0, r4
   17d08:	add	sp, sp, #32
   17d0c:	pop	{r4, r5, r6, lr}
   17d10:	b	10ecc <__fprintf_chk@plt>
   17d14:	mov	r2, #5
   17d18:	ldr	r1, [pc, #420]	; 17ec4 <__assert_fail@plt+0x6f80>
   17d1c:	mov	r0, #0
   17d20:	bl	10d88 <dcgettext@plt>
   17d24:	ldr	r1, [r5, #8]
   17d28:	ldr	ip, [r5, #12]
   17d2c:	ldr	r2, [r5, #4]
   17d30:	ldr	r3, [r5]
   17d34:	stmib	sp, {r1, ip}
   17d38:	str	r2, [sp]
   17d3c:	mov	r1, #1
   17d40:	mov	r2, r0
   17d44:	mov	r0, r4
   17d48:	bl	10ecc <__fprintf_chk@plt>
   17d4c:	b	17c70 <__assert_fail@plt+0x6d2c>
   17d50:	mov	r2, #5
   17d54:	ldr	r1, [pc, #364]	; 17ec8 <__assert_fail@plt+0x6f84>
   17d58:	mov	r0, #0
   17d5c:	bl	10d88 <dcgettext@plt>
   17d60:	add	r1, r5, #8
   17d64:	ldr	r2, [r5, #4]
   17d68:	ldm	r1, {r1, ip, lr}
   17d6c:	ldr	r3, [r5]
   17d70:	str	r2, [sp]
   17d74:	stmib	sp, {r1, ip, lr}
   17d78:	mov	r1, #1
   17d7c:	mov	r2, r0
   17d80:	mov	r0, r4
   17d84:	bl	10ecc <__fprintf_chk@plt>
   17d88:	b	17c70 <__assert_fail@plt+0x6d2c>
   17d8c:	mov	r2, #5
   17d90:	ldr	r1, [pc, #308]	; 17ecc <__assert_fail@plt+0x6f88>
   17d94:	mov	r0, #0
   17d98:	bl	10d88 <dcgettext@plt>
   17d9c:	add	r1, r5, #8
   17da0:	ldr	r2, [r5, #4]
   17da4:	ldm	r1, {r1, ip, lr}
   17da8:	ldr	r6, [r5, #20]
   17dac:	ldr	r3, [r5]
   17db0:	stmib	sp, {r1, ip, lr}
   17db4:	mov	r1, #1
   17db8:	str	r2, [sp]
   17dbc:	str	r6, [sp, #16]
   17dc0:	mov	r2, r0
   17dc4:	mov	r0, r4
   17dc8:	bl	10ecc <__fprintf_chk@plt>
   17dcc:	b	17c70 <__assert_fail@plt+0x6d2c>
   17dd0:	mov	r2, #5
   17dd4:	ldr	r1, [pc, #244]	; 17ed0 <__assert_fail@plt+0x6f8c>
   17dd8:	mov	r0, #0
   17ddc:	bl	10d88 <dcgettext@plt>
   17de0:	ldr	r2, [r5, #24]
   17de4:	ldr	r3, [r5]
   17de8:	ldr	r6, [r5, #20]
   17dec:	ldr	lr, [r5, #16]
   17df0:	ldr	ip, [r5, #12]
   17df4:	str	r2, [sp, #20]
   17df8:	ldr	r1, [r5, #8]
   17dfc:	ldr	r2, [r5, #4]
   17e00:	str	r6, [sp, #16]
   17e04:	stmib	sp, {r1, ip, lr}
   17e08:	mov	r1, #1
   17e0c:	str	r2, [sp]
   17e10:	mov	r2, r0
   17e14:	mov	r0, r4
   17e18:	bl	10ecc <__fprintf_chk@plt>
   17e1c:	b	17c70 <__assert_fail@plt+0x6d2c>
   17e20:	mov	r2, #5
   17e24:	ldr	r1, [pc, #168]	; 17ed4 <__assert_fail@plt+0x6f90>
   17e28:	mov	r0, #0
   17e2c:	bl	10d88 <dcgettext@plt>
   17e30:	ldr	r1, [r5, #28]
   17e34:	ldr	r2, [r5, #24]
   17e38:	ldr	r3, [r5]
   17e3c:	ldr	r6, [r5, #20]
   17e40:	ldr	lr, [r5, #16]
   17e44:	str	r1, [sp, #24]
   17e48:	ldr	ip, [r5, #12]
   17e4c:	str	r2, [sp, #20]
   17e50:	ldr	r1, [r5, #8]
   17e54:	ldr	r2, [r5, #4]
   17e58:	str	r6, [sp, #16]
   17e5c:	stmib	sp, {r1, ip, lr}
   17e60:	mov	r1, #1
   17e64:	str	r2, [sp]
   17e68:	mov	r2, r0
   17e6c:	mov	r0, r4
   17e70:	bl	10ecc <__fprintf_chk@plt>
   17e74:	b	17c70 <__assert_fail@plt+0x6d2c>
   17e78:	str	r3, [sp]
   17e7c:	mov	r1, #1
   17e80:	mov	r3, r2
   17e84:	ldr	r2, [pc, #76]	; 17ed8 <__assert_fail@plt+0x6f94>
   17e88:	bl	10ecc <__fprintf_chk@plt>
   17e8c:	b	17b78 <__assert_fail@plt+0x6c34>
   17e90:	mov	r2, #5
   17e94:	ldr	r1, [pc, #64]	; 17edc <__assert_fail@plt+0x6f98>
   17e98:	b	17c1c <__assert_fail@plt+0x6cd8>
   17e9c:	andeq	fp, r1, r0, lsr r8
   17ea0:	andeq	fp, r1, r4, asr #16
   17ea4:	andeq	r0, r0, r6, ror #15
   17ea8:	andeq	fp, r1, ip, lsl fp
   17eac:	andeq	fp, r1, r8, asr #16
   17eb0:	strdeq	fp, [r1], -r4
   17eb4:	andeq	fp, r1, r4, lsr #20
   17eb8:	andeq	fp, r1, r8, lsl r9
   17ebc:	andeq	fp, r1, r8, lsr #18
   17ec0:	andeq	fp, r1, r0, asr #18
   17ec4:	andeq	fp, r1, ip, asr r9
   17ec8:	andeq	fp, r1, ip, ror r9
   17ecc:	andeq	fp, r1, r0, lsr #19
   17ed0:	andeq	fp, r1, r8, asr #19
   17ed4:	strdeq	fp, [r1], -r4
   17ed8:	andeq	fp, r1, ip, lsr r8
   17edc:	andeq	fp, r1, r8, asr sl
   17ee0:	push	{r4, r5, lr}
   17ee4:	sub	sp, sp, #12
   17ee8:	ldr	r5, [sp, #24]
   17eec:	ldr	ip, [r5]
   17ef0:	cmp	ip, #0
   17ef4:	beq	17f10 <__assert_fail@plt+0x6fcc>
   17ef8:	mov	lr, r5
   17efc:	mov	ip, #0
   17f00:	ldr	r4, [lr, #4]!
   17f04:	add	ip, ip, #1
   17f08:	cmp	r4, #0
   17f0c:	bne	17f00 <__assert_fail@plt+0x6fbc>
   17f10:	stm	sp, {r5, ip}
   17f14:	bl	17b48 <__assert_fail@plt+0x6c04>
   17f18:	add	sp, sp, #12
   17f1c:	pop	{r4, r5, pc}
   17f20:	push	{r4, r5, lr}
   17f24:	sub	sp, sp, #76	; 0x4c
   17f28:	mov	r5, r0
   17f2c:	ldr	ip, [sp, #88]	; 0x58
   17f30:	ldr	r0, [ip]
   17f34:	cmp	r0, #0
   17f38:	str	r0, [sp, #32]
   17f3c:	beq	18310 <__assert_fail@plt+0x73cc>
   17f40:	ldr	r0, [ip, #4]
   17f44:	cmp	r0, #0
   17f48:	str	r0, [sp, #36]	; 0x24
   17f4c:	beq	18318 <__assert_fail@plt+0x73d4>
   17f50:	ldr	r0, [ip, #8]
   17f54:	cmp	r0, #0
   17f58:	str	r0, [sp, #40]	; 0x28
   17f5c:	beq	18320 <__assert_fail@plt+0x73dc>
   17f60:	ldr	r0, [ip, #12]
   17f64:	cmp	r0, #0
   17f68:	str	r0, [sp, #44]	; 0x2c
   17f6c:	beq	18328 <__assert_fail@plt+0x73e4>
   17f70:	ldr	r0, [ip, #16]
   17f74:	cmp	r0, #0
   17f78:	str	r0, [sp, #48]	; 0x30
   17f7c:	beq	18330 <__assert_fail@plt+0x73ec>
   17f80:	ldr	r0, [ip, #20]
   17f84:	cmp	r0, #0
   17f88:	str	r0, [sp, #52]	; 0x34
   17f8c:	beq	18338 <__assert_fail@plt+0x73f4>
   17f90:	ldr	r0, [ip, #24]
   17f94:	cmp	r0, #0
   17f98:	str	r0, [sp, #56]	; 0x38
   17f9c:	beq	18340 <__assert_fail@plt+0x73fc>
   17fa0:	ldr	r0, [ip, #28]
   17fa4:	cmp	r0, #0
   17fa8:	str	r0, [sp, #60]	; 0x3c
   17fac:	beq	18348 <__assert_fail@plt+0x7404>
   17fb0:	ldr	r0, [ip, #32]
   17fb4:	cmp	r0, #0
   17fb8:	str	r0, [sp, #64]	; 0x40
   17fbc:	beq	18350 <__assert_fail@plt+0x740c>
   17fc0:	ldr	r0, [ip, #36]	; 0x24
   17fc4:	cmp	r0, #0
   17fc8:	movne	r4, #10
   17fcc:	moveq	r4, #9
   17fd0:	cmp	r1, #0
   17fd4:	beq	182e8 <__assert_fail@plt+0x73a4>
   17fd8:	stm	sp, {r2, r3}
   17fdc:	mov	r0, r5
   17fe0:	mov	r3, r1
   17fe4:	ldr	r2, [pc, #876]	; 18358 <__assert_fail@plt+0x7414>
   17fe8:	mov	r1, #1
   17fec:	bl	10ecc <__fprintf_chk@plt>
   17ff0:	mov	r2, #5
   17ff4:	ldr	r1, [pc, #864]	; 1835c <__assert_fail@plt+0x7418>
   17ff8:	mov	r0, #0
   17ffc:	bl	10d88 <dcgettext@plt>
   18000:	ldr	r3, [pc, #856]	; 18360 <__assert_fail@plt+0x741c>
   18004:	ldr	r2, [pc, #856]	; 18364 <__assert_fail@plt+0x7420>
   18008:	str	r3, [sp]
   1800c:	mov	r1, #1
   18010:	mov	r3, r0
   18014:	mov	r0, r5
   18018:	bl	10ecc <__fprintf_chk@plt>
   1801c:	mov	r1, r5
   18020:	mov	r0, #10
   18024:	bl	10d7c <fputc_unlocked@plt>
   18028:	mov	r2, #5
   1802c:	ldr	r1, [pc, #820]	; 18368 <__assert_fail@plt+0x7424>
   18030:	mov	r0, #0
   18034:	bl	10d88 <dcgettext@plt>
   18038:	mov	r1, #1
   1803c:	ldr	r3, [pc, #808]	; 1836c <__assert_fail@plt+0x7428>
   18040:	mov	r2, r0
   18044:	mov	r0, r5
   18048:	bl	10ecc <__fprintf_chk@plt>
   1804c:	mov	r1, r5
   18050:	mov	r0, #10
   18054:	bl	10d7c <fputc_unlocked@plt>
   18058:	cmp	r4, #9
   1805c:	ldrls	pc, [pc, r4, lsl #2]
   18060:	b	18304 <__assert_fail@plt+0x73c0>
   18064:	andeq	r8, r1, r8, ror #1
   18068:	strdeq	r8, [r1], -r0
   1806c:	andeq	r8, r1, ip, lsl r1
   18070:	andeq	r8, r1, r0, asr r1
   18074:	andeq	r8, r1, r8, lsl #3
   18078:	andeq	r8, r1, r4, asr #3
   1807c:	andeq	r8, r1, r0, lsl #4
   18080:	andeq	r8, r1, r4, asr #4
   18084:	muleq	r1, r0, r2
   18088:	andeq	r8, r1, ip, lsl #1
   1808c:	ldr	r1, [pc, #732]	; 18370 <__assert_fail@plt+0x742c>
   18090:	mov	r2, #5
   18094:	mov	r0, #0
   18098:	bl	10d88 <dcgettext@plt>
   1809c:	ldr	ip, [sp, #64]	; 0x40
   180a0:	ldr	r1, [sp, #60]	; 0x3c
   180a4:	ldr	r2, [sp, #56]	; 0x38
   180a8:	ldr	lr, [sp, #48]	; 0x30
   180ac:	str	ip, [sp, #28]
   180b0:	str	r1, [sp, #24]
   180b4:	ldr	ip, [sp, #44]	; 0x2c
   180b8:	ldr	r1, [sp, #40]	; 0x28
   180bc:	ldr	r4, [sp, #52]	; 0x34
   180c0:	str	r2, [sp, #20]
   180c4:	ldr	r2, [sp, #36]	; 0x24
   180c8:	stmib	sp, {r1, ip, lr}
   180cc:	mov	r1, #1
   180d0:	str	r2, [sp]
   180d4:	ldr	r3, [sp, #32]
   180d8:	str	r4, [sp, #16]
   180dc:	mov	r2, r0
   180e0:	mov	r0, r5
   180e4:	bl	10ecc <__fprintf_chk@plt>
   180e8:	add	sp, sp, #76	; 0x4c
   180ec:	pop	{r4, r5, pc}
   180f0:	mov	r2, #5
   180f4:	ldr	r1, [pc, #632]	; 18374 <__assert_fail@plt+0x7430>
   180f8:	mov	r0, #0
   180fc:	bl	10d88 <dcgettext@plt>
   18100:	ldr	r3, [sp, #32]
   18104:	mov	r1, #1
   18108:	mov	r2, r0
   1810c:	mov	r0, r5
   18110:	add	sp, sp, #76	; 0x4c
   18114:	pop	{r4, r5, lr}
   18118:	b	10ecc <__fprintf_chk@plt>
   1811c:	mov	r2, #5
   18120:	ldr	r1, [pc, #592]	; 18378 <__assert_fail@plt+0x7434>
   18124:	mov	r0, #0
   18128:	bl	10d88 <dcgettext@plt>
   1812c:	ldr	r2, [sp, #36]	; 0x24
   18130:	ldr	r3, [sp, #32]
   18134:	str	r2, [sp, #88]	; 0x58
   18138:	mov	r1, #1
   1813c:	mov	r2, r0
   18140:	mov	r0, r5
   18144:	add	sp, sp, #76	; 0x4c
   18148:	pop	{r4, r5, lr}
   1814c:	b	10ecc <__fprintf_chk@plt>
   18150:	mov	r2, #5
   18154:	ldr	r1, [pc, #544]	; 1837c <__assert_fail@plt+0x7438>
   18158:	mov	r0, #0
   1815c:	bl	10d88 <dcgettext@plt>
   18160:	ldr	r1, [sp, #40]	; 0x28
   18164:	ldr	r2, [sp, #36]	; 0x24
   18168:	str	r1, [sp, #4]
   1816c:	str	r2, [sp]
   18170:	ldr	r3, [sp, #32]
   18174:	mov	r1, #1
   18178:	mov	r2, r0
   1817c:	mov	r0, r5
   18180:	bl	10ecc <__fprintf_chk@plt>
   18184:	b	180e8 <__assert_fail@plt+0x71a4>
   18188:	mov	r2, #5
   1818c:	ldr	r1, [pc, #492]	; 18380 <__assert_fail@plt+0x743c>
   18190:	mov	r0, #0
   18194:	bl	10d88 <dcgettext@plt>
   18198:	ldr	r1, [sp, #40]	; 0x28
   1819c:	ldr	ip, [sp, #44]	; 0x2c
   181a0:	ldr	r2, [sp, #36]	; 0x24
   181a4:	ldr	r3, [sp, #32]
   181a8:	stmib	sp, {r1, ip}
   181ac:	str	r2, [sp]
   181b0:	mov	r1, #1
   181b4:	mov	r2, r0
   181b8:	mov	r0, r5
   181bc:	bl	10ecc <__fprintf_chk@plt>
   181c0:	b	180e8 <__assert_fail@plt+0x71a4>
   181c4:	mov	r2, #5
   181c8:	ldr	r1, [pc, #436]	; 18384 <__assert_fail@plt+0x7440>
   181cc:	mov	r0, #0
   181d0:	bl	10d88 <dcgettext@plt>
   181d4:	add	r1, sp, #40	; 0x28
   181d8:	ldr	r2, [sp, #36]	; 0x24
   181dc:	ldm	r1, {r1, ip, lr}
   181e0:	ldr	r3, [sp, #32]
   181e4:	str	r2, [sp]
   181e8:	stmib	sp, {r1, ip, lr}
   181ec:	mov	r1, #1
   181f0:	mov	r2, r0
   181f4:	mov	r0, r5
   181f8:	bl	10ecc <__fprintf_chk@plt>
   181fc:	b	180e8 <__assert_fail@plt+0x71a4>
   18200:	mov	r2, #5
   18204:	ldr	r1, [pc, #380]	; 18388 <__assert_fail@plt+0x7444>
   18208:	mov	r0, #0
   1820c:	bl	10d88 <dcgettext@plt>
   18210:	add	r1, sp, #40	; 0x28
   18214:	ldr	r2, [sp, #36]	; 0x24
   18218:	ldm	r1, {r1, ip, lr}
   1821c:	ldr	r4, [sp, #52]	; 0x34
   18220:	str	r2, [sp]
   18224:	stmib	sp, {r1, ip, lr}
   18228:	mov	r1, #1
   1822c:	ldr	r3, [sp, #32]
   18230:	str	r4, [sp, #16]
   18234:	mov	r2, r0
   18238:	mov	r0, r5
   1823c:	bl	10ecc <__fprintf_chk@plt>
   18240:	b	180e8 <__assert_fail@plt+0x71a4>
   18244:	mov	r2, #5
   18248:	ldr	r1, [pc, #316]	; 1838c <__assert_fail@plt+0x7448>
   1824c:	mov	r0, #0
   18250:	bl	10d88 <dcgettext@plt>
   18254:	add	r1, sp, #40	; 0x28
   18258:	ldr	r2, [sp, #56]	; 0x38
   1825c:	ldm	r1, {r1, ip, lr}
   18260:	ldr	r4, [sp, #52]	; 0x34
   18264:	str	r2, [sp, #20]
   18268:	ldr	r2, [sp, #36]	; 0x24
   1826c:	stmib	sp, {r1, ip, lr}
   18270:	mov	r1, #1
   18274:	str	r2, [sp]
   18278:	ldr	r3, [sp, #32]
   1827c:	str	r4, [sp, #16]
   18280:	mov	r2, r0
   18284:	mov	r0, r5
   18288:	bl	10ecc <__fprintf_chk@plt>
   1828c:	b	180e8 <__assert_fail@plt+0x71a4>
   18290:	mov	r2, #5
   18294:	ldr	r1, [pc, #244]	; 18390 <__assert_fail@plt+0x744c>
   18298:	mov	r0, #0
   1829c:	bl	10d88 <dcgettext@plt>
   182a0:	ldr	r1, [sp, #60]	; 0x3c
   182a4:	ldr	r2, [sp, #56]	; 0x38
   182a8:	ldr	lr, [sp, #48]	; 0x30
   182ac:	ldr	ip, [sp, #44]	; 0x2c
   182b0:	str	r1, [sp, #24]
   182b4:	ldr	r1, [sp, #40]	; 0x28
   182b8:	ldr	r4, [sp, #52]	; 0x34
   182bc:	str	r2, [sp, #20]
   182c0:	ldr	r2, [sp, #36]	; 0x24
   182c4:	stmib	sp, {r1, ip, lr}
   182c8:	mov	r1, #1
   182cc:	str	r2, [sp]
   182d0:	ldr	r3, [sp, #32]
   182d4:	str	r4, [sp, #16]
   182d8:	mov	r2, r0
   182dc:	mov	r0, r5
   182e0:	bl	10ecc <__fprintf_chk@plt>
   182e4:	b	180e8 <__assert_fail@plt+0x71a4>
   182e8:	str	r3, [sp]
   182ec:	mov	r1, #1
   182f0:	mov	r3, r2
   182f4:	mov	r0, r5
   182f8:	ldr	r2, [pc, #148]	; 18394 <__assert_fail@plt+0x7450>
   182fc:	bl	10ecc <__fprintf_chk@plt>
   18300:	b	17ff0 <__assert_fail@plt+0x70ac>
   18304:	mov	r2, #5
   18308:	ldr	r1, [pc, #136]	; 18398 <__assert_fail@plt+0x7454>
   1830c:	b	18094 <__assert_fail@plt+0x7150>
   18310:	mov	r4, r0
   18314:	b	17fd0 <__assert_fail@plt+0x708c>
   18318:	mov	r4, #1
   1831c:	b	17fd0 <__assert_fail@plt+0x708c>
   18320:	mov	r4, #2
   18324:	b	17fd0 <__assert_fail@plt+0x708c>
   18328:	mov	r4, #3
   1832c:	b	17fd0 <__assert_fail@plt+0x708c>
   18330:	mov	r4, #4
   18334:	b	17fd0 <__assert_fail@plt+0x708c>
   18338:	mov	r4, #5
   1833c:	b	17fd0 <__assert_fail@plt+0x708c>
   18340:	mov	r4, #6
   18344:	b	17fd0 <__assert_fail@plt+0x708c>
   18348:	mov	r4, #7
   1834c:	b	17fd0 <__assert_fail@plt+0x708c>
   18350:	mov	r4, #8
   18354:	b	17fd0 <__assert_fail@plt+0x708c>
   18358:	andeq	fp, r1, r0, lsr r8
   1835c:	andeq	fp, r1, r4, asr #16
   18360:	andeq	r0, r0, r6, ror #15
   18364:	andeq	fp, r1, ip, lsl fp
   18368:	andeq	fp, r1, r8, asr #16
   1836c:	strdeq	fp, [r1], -r4
   18370:	andeq	fp, r1, r4, lsr #20
   18374:	andeq	fp, r1, r8, lsl r9
   18378:	andeq	fp, r1, r8, lsr #18
   1837c:	andeq	fp, r1, r0, asr #18
   18380:	andeq	fp, r1, ip, asr r9
   18384:	andeq	fp, r1, ip, ror r9
   18388:	andeq	fp, r1, r0, lsr #19
   1838c:	andeq	fp, r1, r8, asr #19
   18390:	strdeq	fp, [r1], -r4
   18394:	andeq	fp, r1, ip, lsr r8
   18398:	andeq	fp, r1, r8, asr sl
   1839c:	push	{r3}		; (str r3, [sp, #-4]!)
   183a0:	push	{lr}		; (str lr, [sp, #-4]!)
   183a4:	sub	sp, sp, #56	; 0x38
   183a8:	add	r3, sp, #64	; 0x40
   183ac:	ldr	ip, [sp, #64]	; 0x40
   183b0:	str	r3, [sp, #12]
   183b4:	cmp	ip, #0
   183b8:	str	ip, [sp, #16]
   183bc:	beq	18454 <__assert_fail@plt+0x7510>
   183c0:	ldr	ip, [sp, #68]	; 0x44
   183c4:	cmp	ip, #0
   183c8:	str	ip, [sp, #20]
   183cc:	beq	18474 <__assert_fail@plt+0x7530>
   183d0:	ldr	ip, [sp, #72]	; 0x48
   183d4:	cmp	ip, #0
   183d8:	str	ip, [sp, #24]
   183dc:	beq	1847c <__assert_fail@plt+0x7538>
   183e0:	ldr	ip, [sp, #76]	; 0x4c
   183e4:	cmp	ip, #0
   183e8:	str	ip, [sp, #28]
   183ec:	beq	18484 <__assert_fail@plt+0x7540>
   183f0:	ldr	ip, [sp, #80]	; 0x50
   183f4:	cmp	ip, #0
   183f8:	str	ip, [sp, #32]
   183fc:	beq	1848c <__assert_fail@plt+0x7548>
   18400:	ldr	ip, [sp, #84]	; 0x54
   18404:	cmp	ip, #0
   18408:	str	ip, [sp, #36]	; 0x24
   1840c:	beq	18494 <__assert_fail@plt+0x7550>
   18410:	ldr	ip, [sp, #88]	; 0x58
   18414:	cmp	ip, #0
   18418:	str	ip, [sp, #40]	; 0x28
   1841c:	beq	1849c <__assert_fail@plt+0x7558>
   18420:	ldr	ip, [sp, #92]	; 0x5c
   18424:	cmp	ip, #0
   18428:	str	ip, [sp, #44]	; 0x2c
   1842c:	beq	184a4 <__assert_fail@plt+0x7560>
   18430:	ldr	ip, [sp, #96]	; 0x60
   18434:	cmp	ip, #0
   18438:	str	ip, [sp, #48]	; 0x30
   1843c:	beq	184ac <__assert_fail@plt+0x7568>
   18440:	ldr	ip, [sp, #100]	; 0x64
   18444:	cmp	ip, #0
   18448:	str	ip, [sp, #52]	; 0x34
   1844c:	movne	ip, #10
   18450:	moveq	ip, #9
   18454:	add	r3, sp, #16
   18458:	stm	sp, {r3, ip}
   1845c:	ldr	r3, [sp, #60]	; 0x3c
   18460:	bl	17b48 <__assert_fail@plt+0x6c04>
   18464:	add	sp, sp, #56	; 0x38
   18468:	pop	{lr}		; (ldr lr, [sp], #4)
   1846c:	add	sp, sp, #4
   18470:	bx	lr
   18474:	mov	ip, #1
   18478:	b	18454 <__assert_fail@plt+0x7510>
   1847c:	mov	ip, #2
   18480:	b	18454 <__assert_fail@plt+0x7510>
   18484:	mov	ip, #3
   18488:	b	18454 <__assert_fail@plt+0x7510>
   1848c:	mov	ip, #4
   18490:	b	18454 <__assert_fail@plt+0x7510>
   18494:	mov	ip, #5
   18498:	b	18454 <__assert_fail@plt+0x7510>
   1849c:	mov	ip, #6
   184a0:	b	18454 <__assert_fail@plt+0x7510>
   184a4:	mov	ip, #7
   184a8:	b	18454 <__assert_fail@plt+0x7510>
   184ac:	mov	ip, #8
   184b0:	b	18454 <__assert_fail@plt+0x7510>
   184b4:	ldr	r3, [pc, #116]	; 18530 <__assert_fail@plt+0x75ec>
   184b8:	push	{r4, lr}
   184bc:	mov	r0, #10
   184c0:	ldr	r1, [r3]
   184c4:	bl	10d7c <fputc_unlocked@plt>
   184c8:	mov	r2, #5
   184cc:	ldr	r1, [pc, #96]	; 18534 <__assert_fail@plt+0x75f0>
   184d0:	mov	r0, #0
   184d4:	bl	10d88 <dcgettext@plt>
   184d8:	ldr	r2, [pc, #88]	; 18538 <__assert_fail@plt+0x75f4>
   184dc:	mov	r1, r0
   184e0:	mov	r0, #1
   184e4:	bl	10eb4 <__printf_chk@plt>
   184e8:	mov	r2, #5
   184ec:	ldr	r1, [pc, #72]	; 1853c <__assert_fail@plt+0x75f8>
   184f0:	mov	r0, #0
   184f4:	bl	10d88 <dcgettext@plt>
   184f8:	ldr	r3, [pc, #64]	; 18540 <__assert_fail@plt+0x75fc>
   184fc:	ldr	r2, [pc, #64]	; 18544 <__assert_fail@plt+0x7600>
   18500:	mov	r1, r0
   18504:	mov	r0, #1
   18508:	bl	10eb4 <__printf_chk@plt>
   1850c:	mov	r2, #5
   18510:	ldr	r1, [pc, #48]	; 18548 <__assert_fail@plt+0x7604>
   18514:	mov	r0, #0
   18518:	bl	10d88 <dcgettext@plt>
   1851c:	ldr	r2, [pc, #40]	; 1854c <__assert_fail@plt+0x7608>
   18520:	pop	{r4, lr}
   18524:	mov	r1, r0
   18528:	mov	r0, #1
   1852c:	b	10eb4 <__printf_chk@plt>
   18530:	andeq	ip, r2, r4, asr r1
   18534:	muleq	r1, r4, sl
   18538:	andeq	fp, r1, r8, lsr #21
   1853c:	andeq	fp, r1, r0, asr #21
   18540:	andeq	fp, r1, r8, ror #1
   18544:	andeq	fp, r1, r0, lsl r1
   18548:	ldrdeq	fp, [r1], -r4
   1854c:	strdeq	fp, [r1], -ip
   18550:	push	{r4, r5, r6, lr}
   18554:	mov	r6, r0
   18558:	mov	r5, r1
   1855c:	mov	r4, r2
   18560:	bl	19d50 <__assert_fail@plt+0x8e0c>
   18564:	cmp	r0, #0
   18568:	popne	{r4, r5, r6, pc}
   1856c:	cmp	r6, #0
   18570:	beq	18580 <__assert_fail@plt+0x763c>
   18574:	cmp	r5, #0
   18578:	cmpne	r4, #0
   1857c:	popeq	{r4, r5, r6, pc}
   18580:	bl	18bcc <__assert_fail@plt+0x7c88>
   18584:	push	{r4, lr}
   18588:	bl	19a24 <__assert_fail@plt+0x8ae0>
   1858c:	cmp	r0, #0
   18590:	popne	{r4, pc}
   18594:	bl	18bcc <__assert_fail@plt+0x7c88>
   18598:	push	{r4, lr}
   1859c:	bl	19a24 <__assert_fail@plt+0x8ae0>
   185a0:	cmp	r0, #0
   185a4:	popne	{r4, pc}
   185a8:	bl	18bcc <__assert_fail@plt+0x7c88>
   185ac:	push	{r4, lr}
   185b0:	bl	19a24 <__assert_fail@plt+0x8ae0>
   185b4:	cmp	r0, #0
   185b8:	popne	{r4, pc}
   185bc:	bl	18bcc <__assert_fail@plt+0x7c88>
   185c0:	push	{r4, r5, r6, lr}
   185c4:	mov	r5, r0
   185c8:	mov	r4, r1
   185cc:	bl	19a50 <__assert_fail@plt+0x8b0c>
   185d0:	cmp	r0, #0
   185d4:	popne	{r4, r5, r6, pc}
   185d8:	adds	r4, r4, #0
   185dc:	movne	r4, #1
   185e0:	cmp	r5, #0
   185e4:	orreq	r4, r4, #1
   185e8:	cmp	r4, #0
   185ec:	popeq	{r4, r5, r6, pc}
   185f0:	bl	18bcc <__assert_fail@plt+0x7c88>
   185f4:	push	{r4, lr}
   185f8:	cmp	r1, #0
   185fc:	orreq	r1, r1, #1
   18600:	bl	19a50 <__assert_fail@plt+0x8b0c>
   18604:	cmp	r0, #0
   18608:	popne	{r4, pc}
   1860c:	bl	18bcc <__assert_fail@plt+0x7c88>
   18610:	push	{r4, r5, r6, lr}
   18614:	mov	r6, r0
   18618:	mov	r5, r1
   1861c:	mov	r4, r2
   18620:	bl	19d50 <__assert_fail@plt+0x8e0c>
   18624:	cmp	r0, #0
   18628:	popne	{r4, r5, r6, pc}
   1862c:	cmp	r6, #0
   18630:	beq	18640 <__assert_fail@plt+0x76fc>
   18634:	cmp	r5, #0
   18638:	cmpne	r4, #0
   1863c:	popeq	{r4, r5, r6, pc}
   18640:	bl	18bcc <__assert_fail@plt+0x7c88>
   18644:	cmp	r2, #0
   18648:	cmpne	r1, #0
   1864c:	moveq	r2, #1
   18650:	moveq	r1, r2
   18654:	push	{r4, lr}
   18658:	bl	19d50 <__assert_fail@plt+0x8e0c>
   1865c:	cmp	r0, #0
   18660:	popne	{r4, pc}
   18664:	bl	18bcc <__assert_fail@plt+0x7c88>
   18668:	push	{r4, lr}
   1866c:	mov	r2, r1
   18670:	mov	r1, r0
   18674:	mov	r0, #0
   18678:	bl	19d50 <__assert_fail@plt+0x8e0c>
   1867c:	cmp	r0, #0
   18680:	popne	{r4, pc}
   18684:	bl	18bcc <__assert_fail@plt+0x7c88>
   18688:	cmp	r1, #0
   1868c:	cmpne	r0, #0
   18690:	moveq	r2, #1
   18694:	movne	r2, r1
   18698:	moveq	r1, r2
   1869c:	movne	r1, r0
   186a0:	push	{r4, lr}
   186a4:	mov	r0, #0
   186a8:	bl	19d50 <__assert_fail@plt+0x8e0c>
   186ac:	cmp	r0, #0
   186b0:	popne	{r4, pc}
   186b4:	bl	18bcc <__assert_fail@plt+0x7c88>
   186b8:	cmp	r0, #0
   186bc:	push	{r4, r5, r6, lr}
   186c0:	mov	r5, r1
   186c4:	ldr	r4, [r1]
   186c8:	beq	18704 <__assert_fail@plt+0x77c0>
   186cc:	lsr	r2, r4, #1
   186d0:	add	r3, r2, #1
   186d4:	mvn	r3, r3
   186d8:	cmp	r4, r3
   186dc:	bhi	18720 <__assert_fail@plt+0x77dc>
   186e0:	add	r4, r4, #1
   186e4:	add	r4, r4, r2
   186e8:	mov	r1, r4
   186ec:	mov	r2, #1
   186f0:	bl	19d50 <__assert_fail@plt+0x8e0c>
   186f4:	cmp	r0, #0
   186f8:	beq	18724 <__assert_fail@plt+0x77e0>
   186fc:	str	r4, [r5]
   18700:	pop	{r4, r5, r6, pc}
   18704:	cmp	r4, #0
   18708:	moveq	r4, #64	; 0x40
   1870c:	mov	r1, r4
   18710:	mov	r2, #1
   18714:	bl	19d50 <__assert_fail@plt+0x8e0c>
   18718:	cmp	r0, #0
   1871c:	bne	186fc <__assert_fail@plt+0x77b8>
   18720:	bl	18bcc <__assert_fail@plt+0x7c88>
   18724:	cmp	r4, #0
   18728:	bne	18720 <__assert_fail@plt+0x77dc>
   1872c:	str	r4, [r5]
   18730:	pop	{r4, r5, r6, pc}
   18734:	cmp	r0, #0
   18738:	push	{r4, r5, r6, lr}
   1873c:	mov	r5, r1
   18740:	ldr	r4, [r1]
   18744:	mov	r6, r2
   18748:	beq	1878c <__assert_fail@plt+0x7848>
   1874c:	lsr	r1, r4, #1
   18750:	add	r3, r1, #1
   18754:	mvn	r3, r3
   18758:	cmp	r4, r3
   1875c:	bhi	187c4 <__assert_fail@plt+0x7880>
   18760:	add	r4, r4, #1
   18764:	add	r4, r4, r1
   18768:	mov	r1, r4
   1876c:	bl	19d50 <__assert_fail@plt+0x8e0c>
   18770:	cmp	r0, #0
   18774:	bne	18784 <__assert_fail@plt+0x7840>
   18778:	cmp	r4, #0
   1877c:	cmpne	r6, #0
   18780:	bne	187c4 <__assert_fail@plt+0x7880>
   18784:	str	r4, [r5]
   18788:	pop	{r4, r5, r6, pc}
   1878c:	cmp	r4, #0
   18790:	bne	187ac <__assert_fail@plt+0x7868>
   18794:	mov	r1, r2
   18798:	mov	r0, #64	; 0x40
   1879c:	bl	19e90 <__assert_fail@plt+0x8f4c>
   187a0:	cmp	r0, #0
   187a4:	movne	r4, r0
   187a8:	addeq	r4, r0, #1
   187ac:	mov	r2, r6
   187b0:	mov	r1, r4
   187b4:	mov	r0, #0
   187b8:	bl	19d50 <__assert_fail@plt+0x8e0c>
   187bc:	cmp	r0, #0
   187c0:	bne	18784 <__assert_fail@plt+0x7840>
   187c4:	bl	18bcc <__assert_fail@plt+0x7c88>
   187c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187cc:	sub	sp, sp, #12
   187d0:	ldr	r6, [r1]
   187d4:	mov	r8, r1
   187d8:	mov	r9, r0
   187dc:	asrs	r4, r6, #1
   187e0:	mov	sl, r2
   187e4:	mov	fp, r3
   187e8:	ldr	r7, [sp, #48]	; 0x30
   187ec:	bmi	18968 <__assert_fail@plt+0x7a24>
   187f0:	mvn	r1, #-2147483648	; 0x80000000
   187f4:	sub	r1, r1, r4
   187f8:	cmp	r6, r1
   187fc:	movle	r1, #0
   18800:	movgt	r1, #1
   18804:	mvn	r3, fp
   18808:	cmp	r1, #0
   1880c:	addeq	r4, r4, r6
   18810:	mvnne	r4, #-2147483648	; 0x80000000
   18814:	lsr	r3, r3, #31
   18818:	cmp	fp, r4
   1881c:	movge	r2, #0
   18820:	andlt	r2, r3, #1
   18824:	cmp	r2, #0
   18828:	beq	18918 <__assert_fail@plt+0x79d4>
   1882c:	cmp	r7, #0
   18830:	blt	18a00 <__assert_fail@plt+0x7abc>
   18834:	bne	189f8 <__assert_fail@plt+0x7ab4>
   18838:	mov	r5, #64	; 0x40
   1883c:	mov	r1, r7
   18840:	mov	r0, r5
   18844:	str	r3, [sp, #4]
   18848:	bl	1a09c <__assert_fail@plt+0x9158>
   1884c:	mov	r1, r7
   18850:	mov	r4, r0
   18854:	mov	r0, r5
   18858:	bl	1a2bc <__assert_fail@plt+0x9378>
   1885c:	ldr	r3, [sp, #4]
   18860:	sub	r5, r5, r1
   18864:	cmp	r9, #0
   18868:	sub	r2, r4, r6
   1886c:	streq	r9, [r8]
   18870:	cmp	r2, sl
   18874:	bge	188f8 <__assert_fail@plt+0x79b4>
   18878:	cmp	sl, #0
   1887c:	blt	18998 <__assert_fail@plt+0x7a54>
   18880:	cmp	r6, #0
   18884:	blt	188a4 <__assert_fail@plt+0x7960>
   18888:	mvn	r2, #-2147483648	; 0x80000000
   1888c:	sub	r2, r2, sl
   18890:	cmp	r6, r2
   18894:	movle	r2, #0
   18898:	movgt	r2, #1
   1889c:	cmp	r2, #0
   188a0:	bne	18994 <__assert_fail@plt+0x7a50>
   188a4:	add	r6, r6, sl
   188a8:	cmp	fp, r6
   188ac:	movge	r3, #0
   188b0:	andlt	r3, r3, #1
   188b4:	cmp	r3, #0
   188b8:	mov	r4, r6
   188bc:	bne	18994 <__assert_fail@plt+0x7a50>
   188c0:	cmp	r7, #0
   188c4:	blt	189ac <__assert_fail@plt+0x7a68>
   188c8:	beq	188f4 <__assert_fail@plt+0x79b0>
   188cc:	cmp	r6, #0
   188d0:	blt	18a50 <__assert_fail@plt+0x7b0c>
   188d4:	mov	r1, r7
   188d8:	mvn	r0, #-2147483648	; 0x80000000
   188dc:	bl	1a09c <__assert_fail@plt+0x9158>
   188e0:	cmp	r6, r0
   188e4:	movle	r0, #0
   188e8:	movgt	r0, #1
   188ec:	cmp	r0, #0
   188f0:	bne	18994 <__assert_fail@plt+0x7a50>
   188f4:	mul	r5, r6, r7
   188f8:	mov	r1, r5
   188fc:	mov	r0, r9
   18900:	bl	19a50 <__assert_fail@plt+0x8b0c>
   18904:	cmp	r0, #0
   18908:	beq	1897c <__assert_fail@plt+0x7a38>
   1890c:	str	r4, [r8]
   18910:	add	sp, sp, #12
   18914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18918:	cmp	r7, #0
   1891c:	blt	189d8 <__assert_fail@plt+0x7a94>
   18920:	beq	18838 <__assert_fail@plt+0x78f4>
   18924:	cmp	r4, #0
   18928:	blt	18a08 <__assert_fail@plt+0x7ac4>
   1892c:	mov	r1, r7
   18930:	mvn	r0, #-2147483648	; 0x80000000
   18934:	str	r3, [sp, #4]
   18938:	bl	1a09c <__assert_fail@plt+0x9158>
   1893c:	ldr	r3, [sp, #4]
   18940:	cmp	r0, r4
   18944:	movge	r0, #0
   18948:	movlt	r0, #1
   1894c:	cmp	r0, #0
   18950:	mvnne	r5, #-2147483648	; 0x80000000
   18954:	bne	1883c <__assert_fail@plt+0x78f8>
   18958:	mul	r5, r7, r4
   1895c:	cmp	r5, #63	; 0x3f
   18960:	bgt	18864 <__assert_fail@plt+0x7920>
   18964:	b	18838 <__assert_fail@plt+0x78f4>
   18968:	rsb	r1, r4, #-2147483648	; 0x80000000
   1896c:	cmp	r6, r1
   18970:	movge	r1, #0
   18974:	movlt	r1, #1
   18978:	b	18804 <__assert_fail@plt+0x78c0>
   1897c:	adds	r5, r5, #0
   18980:	movne	r5, #1
   18984:	cmp	r9, #0
   18988:	orreq	r5, r5, #1
   1898c:	cmp	r5, #0
   18990:	beq	1890c <__assert_fail@plt+0x79c8>
   18994:	bl	18bcc <__assert_fail@plt+0x7c88>
   18998:	rsb	r2, sl, #-2147483648	; 0x80000000
   1899c:	cmp	r6, r2
   189a0:	movge	r2, #0
   189a4:	movlt	r2, #1
   189a8:	b	1889c <__assert_fail@plt+0x7958>
   189ac:	cmp	r6, #0
   189b0:	blt	18a34 <__assert_fail@plt+0x7af0>
   189b4:	cmn	r7, #1
   189b8:	beq	188f4 <__assert_fail@plt+0x79b0>
   189bc:	mov	r1, r7
   189c0:	mov	r0, #-2147483648	; 0x80000000
   189c4:	bl	1a09c <__assert_fail@plt+0x9158>
   189c8:	cmp	r6, r0
   189cc:	movle	r0, #0
   189d0:	movgt	r0, #1
   189d4:	b	188ec <__assert_fail@plt+0x79a8>
   189d8:	cmp	r4, #0
   189dc:	blt	18a74 <__assert_fail@plt+0x7b30>
   189e0:	cmn	r7, #1
   189e4:	beq	18958 <__assert_fail@plt+0x7a14>
   189e8:	str	r3, [sp, #4]
   189ec:	mov	r1, r7
   189f0:	mov	r0, #-2147483648	; 0x80000000
   189f4:	b	18938 <__assert_fail@plt+0x79f4>
   189f8:	mov	r4, fp
   189fc:	b	1892c <__assert_fail@plt+0x79e8>
   18a00:	mov	r4, fp
   18a04:	b	189e0 <__assert_fail@plt+0x7a9c>
   18a08:	cmn	r4, #1
   18a0c:	beq	18958 <__assert_fail@plt+0x7a14>
   18a10:	mov	r1, r4
   18a14:	mov	r0, #-2147483648	; 0x80000000
   18a18:	str	r3, [sp, #4]
   18a1c:	bl	1a09c <__assert_fail@plt+0x9158>
   18a20:	ldr	r3, [sp, #4]
   18a24:	cmp	r7, r0
   18a28:	movle	r0, #0
   18a2c:	movgt	r0, #1
   18a30:	b	1894c <__assert_fail@plt+0x7a08>
   18a34:	mov	r1, r7
   18a38:	mvn	r0, #-2147483648	; 0x80000000
   18a3c:	bl	1a09c <__assert_fail@plt+0x9158>
   18a40:	cmp	r6, r0
   18a44:	movge	r0, #0
   18a48:	movlt	r0, #1
   18a4c:	b	188ec <__assert_fail@plt+0x79a8>
   18a50:	cmn	r6, #1
   18a54:	beq	188f4 <__assert_fail@plt+0x79b0>
   18a58:	mov	r1, r6
   18a5c:	mov	r0, #-2147483648	; 0x80000000
   18a60:	bl	1a09c <__assert_fail@plt+0x9158>
   18a64:	cmp	r7, r0
   18a68:	movle	r0, #0
   18a6c:	movgt	r0, #1
   18a70:	b	188ec <__assert_fail@plt+0x79a8>
   18a74:	mov	r1, r7
   18a78:	mvn	r0, #-2147483648	; 0x80000000
   18a7c:	str	r3, [sp, #4]
   18a80:	bl	1a09c <__assert_fail@plt+0x9158>
   18a84:	ldr	r3, [sp, #4]
   18a88:	cmp	r0, r4
   18a8c:	movle	r0, #0
   18a90:	movgt	r0, #1
   18a94:	b	1894c <__assert_fail@plt+0x7a08>
   18a98:	push	{r4, lr}
   18a9c:	mov	r1, #1
   18aa0:	bl	199dc <__assert_fail@plt+0x8a98>
   18aa4:	cmp	r0, #0
   18aa8:	popne	{r4, pc}
   18aac:	bl	18bcc <__assert_fail@plt+0x7c88>
   18ab0:	push	{r4, lr}
   18ab4:	mov	r1, #1
   18ab8:	bl	199dc <__assert_fail@plt+0x8a98>
   18abc:	cmp	r0, #0
   18ac0:	popne	{r4, pc}
   18ac4:	bl	18bcc <__assert_fail@plt+0x7c88>
   18ac8:	push	{r4, lr}
   18acc:	bl	199dc <__assert_fail@plt+0x8a98>
   18ad0:	cmp	r0, #0
   18ad4:	popne	{r4, pc}
   18ad8:	bl	18bcc <__assert_fail@plt+0x7c88>
   18adc:	push	{r4, lr}
   18ae0:	bl	199dc <__assert_fail@plt+0x8a98>
   18ae4:	cmp	r0, #0
   18ae8:	popne	{r4, pc}
   18aec:	bl	18bcc <__assert_fail@plt+0x7c88>
   18af0:	push	{r4, r5, r6, lr}
   18af4:	mov	r6, r0
   18af8:	mov	r0, r1
   18afc:	mov	r4, r1
   18b00:	bl	19a24 <__assert_fail@plt+0x8ae0>
   18b04:	subs	r5, r0, #0
   18b08:	beq	18b20 <__assert_fail@plt+0x7bdc>
   18b0c:	mov	r2, r4
   18b10:	mov	r1, r6
   18b14:	bl	10d34 <memcpy@plt>
   18b18:	mov	r0, r5
   18b1c:	pop	{r4, r5, r6, pc}
   18b20:	bl	18bcc <__assert_fail@plt+0x7c88>
   18b24:	push	{r4, r5, r6, lr}
   18b28:	mov	r6, r0
   18b2c:	mov	r0, r1
   18b30:	mov	r4, r1
   18b34:	bl	19a24 <__assert_fail@plt+0x8ae0>
   18b38:	subs	r5, r0, #0
   18b3c:	beq	18b54 <__assert_fail@plt+0x7c10>
   18b40:	mov	r2, r4
   18b44:	mov	r1, r6
   18b48:	bl	10d34 <memcpy@plt>
   18b4c:	mov	r0, r5
   18b50:	pop	{r4, r5, r6, pc}
   18b54:	bl	18bcc <__assert_fail@plt+0x7c88>
   18b58:	push	{r4, r5, r6, lr}
   18b5c:	mov	r6, r0
   18b60:	add	r0, r1, #1
   18b64:	mov	r4, r1
   18b68:	bl	19a24 <__assert_fail@plt+0x8ae0>
   18b6c:	subs	r5, r0, #0
   18b70:	beq	18b90 <__assert_fail@plt+0x7c4c>
   18b74:	mov	r3, #0
   18b78:	mov	r1, r6
   18b7c:	strb	r3, [r5, r4]
   18b80:	mov	r2, r4
   18b84:	bl	10d34 <memcpy@plt>
   18b88:	mov	r0, r5
   18b8c:	pop	{r4, r5, r6, pc}
   18b90:	bl	18bcc <__assert_fail@plt+0x7c88>
   18b94:	push	{r4, r5, r6, lr}
   18b98:	mov	r6, r0
   18b9c:	bl	10e6c <strlen@plt>
   18ba0:	add	r4, r0, #1
   18ba4:	mov	r0, r4
   18ba8:	bl	19a24 <__assert_fail@plt+0x8ae0>
   18bac:	subs	r5, r0, #0
   18bb0:	beq	18bc8 <__assert_fail@plt+0x7c84>
   18bb4:	mov	r2, r4
   18bb8:	mov	r1, r6
   18bbc:	bl	10d34 <memcpy@plt>
   18bc0:	mov	r0, r5
   18bc4:	pop	{r4, r5, r6, pc}
   18bc8:	bl	18bcc <__assert_fail@plt+0x7c88>
   18bcc:	ldr	r3, [pc, #44]	; 18c00 <__assert_fail@plt+0x7cbc>
   18bd0:	push	{r4, lr}
   18bd4:	mov	r2, #5
   18bd8:	ldr	r1, [pc, #36]	; 18c04 <__assert_fail@plt+0x7cc0>
   18bdc:	mov	r0, #0
   18be0:	ldr	r4, [r3]
   18be4:	bl	10d88 <dcgettext@plt>
   18be8:	ldr	r2, [pc, #24]	; 18c08 <__assert_fail@plt+0x7cc4>
   18bec:	mov	r1, #0
   18bf0:	mov	r3, r0
   18bf4:	mov	r0, r4
   18bf8:	bl	10df4 <error@plt>
   18bfc:	bl	10f2c <abort@plt>
   18c00:	strdeq	ip, [r2], -r4
   18c04:	andeq	fp, r1, ip, asr #22
   18c08:	andeq	fp, r1, r4, lsl r7
   18c0c:	andeq	r0, r0, r0
   18c10:	cmp	r2, #36	; 0x24
   18c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c18:	sub	sp, sp, #52	; 0x34
   18c1c:	bhi	199ac <__assert_fail@plt+0x8a68>
   18c20:	cmp	r1, #0
   18c24:	mov	r6, r2
   18c28:	mov	sl, r0
   18c2c:	mov	r5, r1
   18c30:	mov	r8, r3
   18c34:	addeq	r5, sp, #44	; 0x2c
   18c38:	bl	10e84 <__errno_location@plt>
   18c3c:	mov	r3, #0
   18c40:	str	r3, [r0]
   18c44:	mov	fp, r0
   18c48:	bl	10e54 <__ctype_b_loc@plt>
   18c4c:	ldrb	r3, [sl]
   18c50:	mov	r2, sl
   18c54:	ldr	r0, [r0]
   18c58:	b	18c60 <__assert_fail@plt+0x7d1c>
   18c5c:	ldrb	r3, [r2, #1]!
   18c60:	lsl	r1, r3, #1
   18c64:	ldrh	r4, [r0, r1]
   18c68:	ands	r4, r4, #8192	; 0x2000
   18c6c:	bne	18c5c <__assert_fail@plt+0x7d18>
   18c70:	cmp	r3, #45	; 0x2d
   18c74:	bne	18c88 <__assert_fail@plt+0x7d44>
   18c78:	mov	r4, #4
   18c7c:	mov	r0, r4
   18c80:	add	sp, sp, #52	; 0x34
   18c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c88:	mov	r2, r6
   18c8c:	mov	r3, r4
   18c90:	mov	r1, r5
   18c94:	mov	r0, sl
   18c98:	bl	10d40 <__strtoull_internal@plt>
   18c9c:	ldr	r9, [r5]
   18ca0:	cmp	sl, r9
   18ca4:	mov	r6, r0
   18ca8:	mov	r7, r1
   18cac:	beq	18cf4 <__assert_fail@plt+0x7db0>
   18cb0:	ldr	r4, [fp]
   18cb4:	cmp	r4, #0
   18cb8:	bne	18ce4 <__assert_fail@plt+0x7da0>
   18cbc:	ldr	r3, [sp, #88]	; 0x58
   18cc0:	cmp	r3, #0
   18cc4:	beq	18cd4 <__assert_fail@plt+0x7d90>
   18cc8:	ldrb	sl, [r9]
   18ccc:	cmp	sl, #0
   18cd0:	bne	18d28 <__assert_fail@plt+0x7de4>
   18cd4:	mov	r0, r4
   18cd8:	strd	r6, [r8]
   18cdc:	add	sp, sp, #52	; 0x34
   18ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ce4:	cmp	r4, #34	; 0x22
   18ce8:	bne	18c78 <__assert_fail@plt+0x7d34>
   18cec:	mov	r4, #1
   18cf0:	b	18cbc <__assert_fail@plt+0x7d78>
   18cf4:	ldr	r3, [sp, #88]	; 0x58
   18cf8:	cmp	r3, #0
   18cfc:	beq	18c78 <__assert_fail@plt+0x7d34>
   18d00:	ldrb	sl, [r9]
   18d04:	cmp	sl, #0
   18d08:	beq	18c78 <__assert_fail@plt+0x7d34>
   18d0c:	mov	r1, sl
   18d10:	mov	r0, r3
   18d14:	bl	10e78 <strchr@plt>
   18d18:	cmp	r0, #0
   18d1c:	movne	r6, #1
   18d20:	movne	r7, #0
   18d24:	beq	18c78 <__assert_fail@plt+0x7d34>
   18d28:	mov	r1, sl
   18d2c:	ldr	r0, [sp, #88]	; 0x58
   18d30:	bl	10e78 <strchr@plt>
   18d34:	cmp	r0, #0
   18d38:	beq	19898 <__assert_fail@plt+0x8954>
   18d3c:	sub	r3, sl, #69	; 0x45
   18d40:	cmp	r3, #47	; 0x2f
   18d44:	ldrls	pc, [pc, r3, lsl #2]
   18d48:	b	18e3c <__assert_fail@plt+0x7ef8>
   18d4c:	andeq	r8, r1, ip, lsl #28
   18d50:	andeq	r8, r1, ip, lsr lr
   18d54:	andeq	r8, r1, ip, lsl #28
   18d58:	andeq	r8, r1, ip, lsr lr
   18d5c:	andeq	r8, r1, ip, lsr lr
   18d60:	andeq	r8, r1, ip, lsr lr
   18d64:	andeq	r8, r1, ip, lsl #28
   18d68:	andeq	r8, r1, ip, lsr lr
   18d6c:	andeq	r8, r1, ip, lsl #28
   18d70:	andeq	r8, r1, ip, lsr lr
   18d74:	andeq	r8, r1, ip, lsr lr
   18d78:	andeq	r8, r1, ip, lsl #28
   18d7c:	andeq	r8, r1, ip, lsr lr
   18d80:	andeq	r8, r1, ip, lsr lr
   18d84:	andeq	r8, r1, ip, lsr lr
   18d88:	andeq	r8, r1, ip, lsl #28
   18d8c:	andeq	r8, r1, ip, lsr lr
   18d90:	andeq	r8, r1, ip, lsr lr
   18d94:	andeq	r8, r1, ip, lsr lr
   18d98:	andeq	r8, r1, ip, lsr lr
   18d9c:	andeq	r8, r1, ip, lsl #28
   18da0:	andeq	r8, r1, ip, lsl #28
   18da4:	andeq	r8, r1, ip, lsr lr
   18da8:	andeq	r8, r1, ip, lsr lr
   18dac:	andeq	r8, r1, ip, lsr lr
   18db0:	andeq	r8, r1, ip, lsr lr
   18db4:	andeq	r8, r1, ip, lsr lr
   18db8:	andeq	r8, r1, ip, lsr lr
   18dbc:	andeq	r8, r1, ip, lsr lr
   18dc0:	andeq	r8, r1, ip, lsr lr
   18dc4:	andeq	r8, r1, ip, lsr lr
   18dc8:	andeq	r8, r1, ip, lsr lr
   18dcc:	andeq	r8, r1, ip, lsr lr
   18dd0:	andeq	r8, r1, ip, lsr lr
   18dd4:	andeq	r8, r1, ip, lsl #28
   18dd8:	andeq	r8, r1, ip, lsr lr
   18ddc:	andeq	r8, r1, ip, lsr lr
   18de0:	andeq	r8, r1, ip, lsr lr
   18de4:	andeq	r8, r1, ip, lsl #28
   18de8:	andeq	r8, r1, ip, lsr lr
   18dec:	andeq	r8, r1, ip, lsl #28
   18df0:	andeq	r8, r1, ip, lsr lr
   18df4:	andeq	r8, r1, ip, lsr lr
   18df8:	andeq	r8, r1, ip, lsr lr
   18dfc:	andeq	r8, r1, ip, lsr lr
   18e00:	andeq	r8, r1, ip, lsr lr
   18e04:	andeq	r8, r1, ip, lsr lr
   18e08:	andeq	r8, r1, ip, lsl #28
   18e0c:	mov	r1, #48	; 0x30
   18e10:	ldr	r0, [sp, #88]	; 0x58
   18e14:	bl	10e78 <strchr@plt>
   18e18:	cmp	r0, #0
   18e1c:	beq	1992c <__assert_fail@plt+0x89e8>
   18e20:	ldrb	r3, [r9, #1]
   18e24:	cmp	r3, #68	; 0x44
   18e28:	beq	1990c <__assert_fail@plt+0x89c8>
   18e2c:	cmp	r3, #105	; 0x69
   18e30:	beq	198dc <__assert_fail@plt+0x8998>
   18e34:	cmp	r3, #66	; 0x42
   18e38:	beq	1990c <__assert_fail@plt+0x89c8>
   18e3c:	ldr	r3, [pc, #2948]	; 199c8 <__assert_fail@plt+0x8a84>
   18e40:	mvn	r2, #0
   18e44:	mov	r1, #1024	; 0x400
   18e48:	mov	lr, #0
   18e4c:	strd	r2, [sp]
   18e50:	mov	r3, #1
   18e54:	str	r3, [sp, #12]
   18e58:	sub	sl, sl, #66	; 0x42
   18e5c:	cmp	sl, #53	; 0x35
   18e60:	ldrls	pc, [pc, sl, lsl #2]
   18e64:	b	19898 <__assert_fail@plt+0x8954>
   18e68:	andeq	r9, r1, r8, ror #16
   18e6c:	muleq	r1, r8, r8
   18e70:	muleq	r1, r8, r8
   18e74:	andeq	r9, r1, r4, ror #13
   18e78:	muleq	r1, r8, r8
   18e7c:	andeq	r9, r1, r0, lsr #12
   18e80:	muleq	r1, r8, r8
   18e84:	muleq	r1, r8, r8
   18e88:	muleq	r1, r8, r8
   18e8c:	andeq	r9, r1, r4, lsr #17
   18e90:	muleq	r1, r8, r8
   18e94:	andeq	r8, r1, r0, asr #30
   18e98:	muleq	r1, r8, r8
   18e9c:	muleq	r1, r8, r8
   18ea0:	andeq	r8, r1, ip, asr #31
   18ea4:	muleq	r1, r8, r8
   18ea8:	muleq	r1, r8, r8
   18eac:	muleq	r1, r8, r8
   18eb0:	andeq	r9, r1, ip, asr #6
   18eb4:	muleq	r1, r8, r8
   18eb8:	muleq	r1, r8, r8
   18ebc:	muleq	r1, r8, r8
   18ec0:	muleq	r1, r8, r8
   18ec4:	andeq	r9, r1, r4, lsr #2
   18ec8:	andeq	r9, r1, r0, lsl #9
   18ecc:	muleq	r1, r8, r8
   18ed0:	muleq	r1, r8, r8
   18ed4:	muleq	r1, r8, r8
   18ed8:	muleq	r1, r8, r8
   18edc:	muleq	r1, r8, r8
   18ee0:	muleq	r1, r8, r8
   18ee4:	muleq	r1, r8, r8
   18ee8:	andeq	r9, r1, r0, asr r4
   18eec:	andeq	r9, r1, r8, asr #8
   18ef0:	muleq	r1, r8, r8
   18ef4:	muleq	r1, r8, r8
   18ef8:	muleq	r1, r8, r8
   18efc:	andeq	r9, r1, r0, lsr #12
   18f00:	muleq	r1, r8, r8
   18f04:	muleq	r1, r8, r8
   18f08:	muleq	r1, r8, r8
   18f0c:	andeq	r9, r1, r4, lsr #17
   18f10:	muleq	r1, r8, r8
   18f14:	andeq	r8, r1, r0, asr #30
   18f18:	muleq	r1, r8, r8
   18f1c:	muleq	r1, r8, r8
   18f20:	muleq	r1, r8, r8
   18f24:	muleq	r1, r8, r8
   18f28:	muleq	r1, r8, r8
   18f2c:	muleq	r1, r8, r8
   18f30:	andeq	r9, r1, ip, asr #6
   18f34:	muleq	r1, r8, r8
   18f38:	muleq	r1, r8, r8
   18f3c:	andeq	r9, r1, ip, lsr #8
   18f40:	mul	r0, r6, lr
   18f44:	ldrd	sl, [sp]
   18f48:	umull	r2, r3, r6, r1
   18f4c:	mla	r0, r1, r7, r0
   18f50:	cmp	r7, fp
   18f54:	cmpeq	r6, sl
   18f58:	add	r3, r0, r3
   18f5c:	mvnhi	r3, #0
   18f60:	mvnhi	r2, #0
   18f64:	mul	r6, r1, r3
   18f68:	umull	r0, r1, r1, r2
   18f6c:	mla	lr, lr, r2, r6
   18f70:	ldrd	r6, [sp]
   18f74:	movhi	ip, #1
   18f78:	movls	ip, #0
   18f7c:	cmp	r7, r3
   18f80:	cmpeq	r6, r2
   18f84:	mvncc	r0, #0
   18f88:	add	r1, lr, r1
   18f8c:	mov	sl, r6
   18f90:	movcc	r1, r0
   18f94:	mov	fp, r7
   18f98:	cmp	fp, r3
   18f9c:	cmpeq	sl, r2
   18fa0:	mov	r6, r0
   18fa4:	mov	r7, r1
   18fa8:	orrcc	ip, ip, #1
   18fac:	ldr	r2, [sp, #12]
   18fb0:	orr	r4, r4, ip
   18fb4:	add	r3, r9, r2
   18fb8:	str	r3, [r5]
   18fbc:	ldrb	r3, [r9, r2]
   18fc0:	cmp	r3, #0
   18fc4:	orrne	r4, r4, #2
   18fc8:	b	18cd4 <__assert_fail@plt+0x7d90>
   18fcc:	ldrd	sl, [sp]
   18fd0:	umull	r2, r3, r6, r1
   18fd4:	mul	r0, r6, lr
   18fd8:	cmp	r7, fp
   18fdc:	cmpeq	r6, sl
   18fe0:	mvnhi	r2, #0
   18fe4:	mla	r0, r1, r7, r0
   18fe8:	umull	sl, fp, r2, r1
   18fec:	add	r3, r0, r3
   18ff0:	mul	r0, lr, r2
   18ff4:	mvnhi	r3, #0
   18ff8:	strd	sl, [sp, #16]
   18ffc:	ldrd	sl, [sp]
   19000:	mla	r0, r1, r3, r0
   19004:	ldr	ip, [sp, #20]
   19008:	cmp	r3, fp
   1900c:	add	r0, r0, ip
   19010:	cmpeq	r2, sl
   19014:	str	r0, [sp, #20]
   19018:	bls	19030 <__assert_fail@plt+0x80ec>
   1901c:	mvn	sl, #0
   19020:	mvn	fp, #0
   19024:	strd	sl, [sp, #16]
   19028:	ldr	r0, [sp, #20]
   1902c:	ldrd	sl, [sp]
   19030:	cmp	r7, fp
   19034:	cmpeq	r6, sl
   19038:	mul	r0, r1, r0
   1903c:	ldrd	r6, [sp, #16]
   19040:	mla	ip, lr, r6, r0
   19044:	mov	r0, r6
   19048:	movhi	r0, #1
   1904c:	movls	r0, #0
   19050:	cmp	r3, fp
   19054:	cmpeq	r2, sl
   19058:	ldrd	r2, [sp, #16]
   1905c:	umull	r6, r7, r1, r6
   19060:	orrhi	r0, r0, #1
   19064:	cmp	fp, r3
   19068:	cmpeq	sl, r2
   1906c:	add	r7, ip, r7
   19070:	bcc	1997c <__assert_fail@plt+0x8a38>
   19074:	mov	sl, r6
   19078:	mov	fp, r7
   1907c:	strd	r6, [sp, #24]
   19080:	mul	r3, r1, fp
   19084:	umull	r6, r7, r1, sl
   19088:	mla	ip, lr, sl, r3
   1908c:	ldrd	sl, [sp]
   19090:	ldrd	r2, [sp, #16]
   19094:	add	r7, ip, r7
   19098:	cmp	fp, r3
   1909c:	cmpeq	sl, r2
   190a0:	mov	r3, fp
   190a4:	mov	r2, sl
   190a8:	ldrd	sl, [sp, #24]
   190ac:	orrcc	r0, r0, #1
   190b0:	str	r0, [sp, #16]
   190b4:	cmp	r3, fp
   190b8:	cmpeq	r2, sl
   190bc:	bcs	19614 <__assert_fail@plt+0x86d0>
   190c0:	mvn	r2, #0
   190c4:	mvn	r3, #0
   190c8:	mul	ip, lr, r2
   190cc:	ldrd	sl, [sp]
   190d0:	mla	ip, r1, r3, ip
   190d4:	umull	r6, r7, r2, r1
   190d8:	ldrd	r0, [sp, #24]
   190dc:	add	r7, ip, r7
   190e0:	cmp	fp, r1
   190e4:	ldr	r1, [sp, #16]
   190e8:	cmpeq	sl, r0
   190ec:	orrcc	r1, r1, #1
   190f0:	cmp	r3, fp
   190f4:	cmpeq	r2, sl
   190f8:	mvnhi	r0, #0
   190fc:	movls	ip, r7
   19100:	movhi	ip, r0
   19104:	movls	r0, r6
   19108:	cmp	r3, fp
   1910c:	cmpeq	r2, sl
   19110:	mov	r7, ip
   19114:	mov	r6, r0
   19118:	movls	ip, r1
   1911c:	orrhi	ip, r1, #1
   19120:	b	18fac <__assert_fail@plt+0x8068>
   19124:	ldrd	sl, [sp]
   19128:	umull	r2, r3, r6, r1
   1912c:	mul	r0, r6, lr
   19130:	cmp	r7, fp
   19134:	cmpeq	r6, sl
   19138:	mvnhi	r2, #0
   1913c:	mla	r0, r1, r7, r0
   19140:	umull	sl, fp, r2, r1
   19144:	add	r3, r0, r3
   19148:	mul	r0, lr, r2
   1914c:	mvnhi	r3, #0
   19150:	strd	sl, [sp, #16]
   19154:	ldrd	sl, [sp]
   19158:	mla	r0, r1, r3, r0
   1915c:	ldr	ip, [sp, #20]
   19160:	cmp	r3, fp
   19164:	add	r0, r0, ip
   19168:	cmpeq	r2, sl
   1916c:	str	r0, [sp, #20]
   19170:	mvnhi	sl, #0
   19174:	mvnhi	fp, #0
   19178:	strdhi	sl, [sp, #16]
   1917c:	ldrdhi	sl, [sp]
   19180:	ldr	r0, [sp, #16]
   19184:	cmp	r3, fp
   19188:	ldr	r3, [sp, #20]
   1918c:	mul	r0, lr, r0
   19190:	cmpeq	r2, sl
   19194:	mla	r0, r1, r3, r0
   19198:	ldr	r3, [sp, #16]
   1919c:	umull	r2, r3, r3, r1
   191a0:	strd	r2, [sp, #24]
   191a4:	movhi	r3, #1
   191a8:	movls	r3, #0
   191ac:	cmp	r7, fp
   191b0:	cmpeq	r6, sl
   191b4:	ldrd	r6, [sp, #16]
   191b8:	ldr	r2, [sp, #28]
   191bc:	movls	ip, r3
   191c0:	orrhi	ip, r3, #1
   191c4:	cmp	r7, fp
   191c8:	add	r2, r0, r2
   191cc:	cmpeq	r6, sl
   191d0:	str	r2, [sp, #28]
   191d4:	mvnhi	r2, #0
   191d8:	mvnhi	r3, #0
   191dc:	strdhi	r2, [sp, #24]
   191e0:	ldrd	r6, [sp, #24]
   191e4:	mul	r2, r1, r7
   191e8:	umull	sl, fp, r1, r6
   191ec:	mla	r3, lr, r6, r2
   191f0:	ldrd	r6, [sp]
   191f4:	str	r3, [sp, #32]
   191f8:	ldrd	r2, [sp, #16]
   191fc:	cmp	r3, r7
   19200:	cmpeq	r2, r6
   19204:	ldrd	r2, [sp, #24]
   19208:	orrhi	ip, ip, #1
   1920c:	cmp	r3, r7
   19210:	ldr	r3, [sp, #32]
   19214:	cmpeq	r2, r6
   19218:	add	r2, r3, fp
   1921c:	mov	fp, r2
   19220:	bhi	19964 <__assert_fail@plt+0x8a20>
   19224:	strd	sl, [sp, #16]
   19228:	mul	r2, r1, fp
   1922c:	umull	r6, r7, r1, sl
   19230:	mla	r3, lr, sl, r2
   19234:	ldrd	sl, [sp]
   19238:	str	r3, [sp, #32]
   1923c:	ldrd	r2, [sp, #24]
   19240:	cmp	r3, fp
   19244:	cmpeq	r2, sl
   19248:	ldrd	r2, [sp, #16]
   1924c:	orrhi	ip, ip, #1
   19250:	cmp	fp, r3
   19254:	ldr	r3, [sp, #32]
   19258:	cmpeq	sl, r2
   1925c:	add	r2, r3, r7
   19260:	mov	r7, r2
   19264:	mvncc	r7, #0
   19268:	mvncc	r6, #0
   1926c:	mul	r2, r1, r7
   19270:	mov	sl, r6
   19274:	strd	r6, [sp, #24]
   19278:	mla	r0, lr, sl, r2
   1927c:	ldrd	r2, [sp, #16]
   19280:	ldrd	sl, [sp]
   19284:	umull	r6, r7, r1, r6
   19288:	cmp	fp, r3
   1928c:	cmpeq	sl, r2
   19290:	mov	r3, fp
   19294:	mov	r2, sl
   19298:	ldrd	sl, [sp, #24]
   1929c:	orrcc	ip, ip, #1
   192a0:	add	r7, r0, r7
   192a4:	cmp	r3, fp
   192a8:	cmpeq	r2, sl
   192ac:	mvncc	r6, #0
   192b0:	mvncc	r7, #0
   192b4:	umull	sl, fp, r1, r6
   192b8:	mul	r3, r1, r7
   192bc:	strd	sl, [sp, #16]
   192c0:	mla	r0, lr, r6, r3
   192c4:	ldrd	sl, [sp, #24]
   192c8:	ldrd	r2, [sp]
   192cc:	cmp	r3, fp
   192d0:	cmpeq	r2, sl
   192d4:	orrcc	ip, ip, #1
   192d8:	cmp	r3, r7
   192dc:	ldr	r3, [sp, #20]
   192e0:	cmpeq	r2, r6
   192e4:	add	r3, r0, r3
   192e8:	str	r3, [sp, #20]
   192ec:	mvncc	r2, #0
   192f0:	mvncc	r3, #0
   192f4:	ldrdcs	r2, [sp, #16]
   192f8:	ldrd	sl, [sp]
   192fc:	mul	r0, r1, r3
   19300:	cmp	fp, r7
   19304:	str	r0, [sp, #16]
   19308:	cmpeq	sl, r6
   1930c:	ldr	r6, [sp, #16]
   19310:	umull	r0, r1, r1, r2
   19314:	mla	lr, lr, r2, r6
   19318:	orrcc	ip, ip, #1
   1931c:	cmp	r3, fp
   19320:	cmpeq	r2, sl
   19324:	add	r1, lr, r1
   19328:	bls	19334 <__assert_fail@plt+0x83f0>
   1932c:	mvn	r0, #0
   19330:	mov	r1, r0
   19334:	cmp	r3, fp
   19338:	cmpeq	r2, sl
   1933c:	mov	r6, r0
   19340:	mov	r7, r1
   19344:	orrhi	ip, ip, #1
   19348:	b	18fac <__assert_fail@plt+0x8068>
   1934c:	ldrd	sl, [sp]
   19350:	umull	r2, r3, r6, r1
   19354:	mul	r0, r6, lr
   19358:	cmp	r7, fp
   1935c:	cmpeq	r6, sl
   19360:	mvnhi	r2, #0
   19364:	mla	r0, r1, r7, r0
   19368:	umull	sl, fp, r1, r2
   1936c:	add	r3, r0, r3
   19370:	mvnhi	r3, #0
   19374:	strd	sl, [sp, #16]
   19378:	mul	r0, r1, r3
   1937c:	ldrd	sl, [sp]
   19380:	mla	r0, lr, r2, r0
   19384:	ldr	ip, [sp, #20]
   19388:	cmp	fp, r3
   1938c:	add	r0, r0, ip
   19390:	cmpeq	sl, r2
   19394:	str	r0, [sp, #20]
   19398:	mvncc	sl, #0
   1939c:	mvncc	fp, #0
   193a0:	strdcc	sl, [sp, #16]
   193a4:	ldrdcc	sl, [sp]
   193a8:	ldr	r0, [sp, #16]
   193ac:	cmp	fp, r3
   193b0:	cmpeq	sl, r2
   193b4:	mul	r0, lr, r0
   193b8:	ldr	r2, [sp, #20]
   193bc:	ldr	r3, [sp, #16]
   193c0:	movcc	ip, #1
   193c4:	movcs	ip, #0
   193c8:	cmp	r7, fp
   193cc:	cmpeq	r6, sl
   193d0:	ldrd	r6, [sp, #16]
   193d4:	mla	r0, r1, r2, r0
   193d8:	umull	r2, r3, r3, r1
   193dc:	orrhi	ip, ip, #1
   193e0:	cmp	r7, fp
   193e4:	cmpeq	r6, sl
   193e8:	add	r3, r0, r3
   193ec:	mvnhi	r3, #0
   193f0:	mvnhi	r2, #0
   193f4:	mul	r0, r1, r3
   193f8:	cmp	r7, fp
   193fc:	str	r0, [sp, #24]
   19400:	cmpeq	r6, sl
   19404:	ldr	r6, [sp, #24]
   19408:	umull	r0, r1, r1, r2
   1940c:	mla	lr, lr, r2, r6
   19410:	orrhi	ip, ip, #1
   19414:	cmp	fp, r3
   19418:	cmpeq	sl, r2
   1941c:	mvncc	r0, #0
   19420:	add	r1, lr, r1
   19424:	movcc	r1, r0
   19428:	b	18f98 <__assert_fail@plt+0x8054>
   1942c:	cmp	r6, #0
   19430:	sbcs	r3, r7, #0
   19434:	blt	198cc <__assert_fail@plt+0x8988>
   19438:	adds	r6, r6, r6
   1943c:	adc	r7, r7, r7
   19440:	mov	ip, #0
   19444:	b	18fac <__assert_fail@plt+0x8068>
   19448:	mov	ip, #0
   1944c:	b	18fac <__assert_fail@plt+0x8068>
   19450:	ldr	r3, [pc, #1396]	; 199cc <__assert_fail@plt+0x8a88>
   19454:	mvn	r2, #0
   19458:	cmp	r7, r3
   1945c:	cmpeq	r6, r2
   19460:	bhi	198cc <__assert_fail@plt+0x8988>
   19464:	lsl	r3, r7, #9
   19468:	orr	r3, r3, r6, lsr #23
   1946c:	lsl	r2, r6, #9
   19470:	mov	r6, r2
   19474:	mov	r7, r3
   19478:	mov	ip, #0
   1947c:	b	18fac <__assert_fail@plt+0x8068>
   19480:	ldrd	sl, [sp]
   19484:	umull	r2, r3, r6, r1
   19488:	mul	r0, r6, lr
   1948c:	cmp	r7, fp
   19490:	cmpeq	r6, sl
   19494:	mvnhi	r2, #0
   19498:	mla	r0, r1, r7, r0
   1949c:	umull	sl, fp, r2, r1
   194a0:	add	r3, r0, r3
   194a4:	mul	r0, lr, r2
   194a8:	mvnhi	r3, #0
   194ac:	strd	sl, [sp, #16]
   194b0:	ldrd	sl, [sp]
   194b4:	mla	r0, r1, r3, r0
   194b8:	ldr	ip, [sp, #20]
   194bc:	cmp	r3, fp
   194c0:	add	r0, r0, ip
   194c4:	cmpeq	r2, sl
   194c8:	str	r0, [sp, #20]
   194cc:	mvnhi	sl, #0
   194d0:	mvnhi	fp, #0
   194d4:	strdhi	sl, [sp, #16]
   194d8:	ldrdhi	sl, [sp]
   194dc:	ldr	r0, [sp, #16]
   194e0:	cmp	r3, fp
   194e4:	ldr	r3, [sp, #20]
   194e8:	mul	r0, lr, r0
   194ec:	cmpeq	r2, sl
   194f0:	mla	r0, r1, r3, r0
   194f4:	ldr	r3, [sp, #16]
   194f8:	umull	r2, r3, r3, r1
   194fc:	strd	r2, [sp, #24]
   19500:	movhi	r3, #1
   19504:	movls	r3, #0
   19508:	cmp	r7, fp
   1950c:	cmpeq	r6, sl
   19510:	ldrd	r6, [sp, #16]
   19514:	ldr	r2, [sp, #28]
   19518:	movls	ip, r3
   1951c:	orrhi	ip, r3, #1
   19520:	cmp	r7, fp
   19524:	add	r2, r0, r2
   19528:	cmpeq	r6, sl
   1952c:	str	r2, [sp, #28]
   19530:	mvnhi	r2, #0
   19534:	mvnhi	r3, #0
   19538:	strdhi	r2, [sp, #24]
   1953c:	ldrd	r6, [sp, #24]
   19540:	mul	r2, lr, r6
   19544:	umull	sl, fp, r6, r1
   19548:	mla	r3, r1, r7, r2
   1954c:	ldrd	r6, [sp]
   19550:	str	r3, [sp, #32]
   19554:	ldrd	r2, [sp, #16]
   19558:	cmp	r3, r7
   1955c:	cmpeq	r2, r6
   19560:	ldrd	r2, [sp, #24]
   19564:	orrhi	ip, ip, #1
   19568:	cmp	r3, r7
   1956c:	ldr	r3, [sp, #32]
   19570:	cmpeq	r2, r6
   19574:	add	r2, r3, fp
   19578:	mov	fp, r2
   1957c:	bhi	19994 <__assert_fail@plt+0x8a50>
   19580:	strd	sl, [sp, #16]
   19584:	mul	r2, lr, sl
   19588:	umull	r6, r7, sl, r1
   1958c:	mla	r3, r1, fp, r2
   19590:	ldrd	sl, [sp]
   19594:	str	r3, [sp, #32]
   19598:	ldrd	r2, [sp, #24]
   1959c:	cmp	r3, fp
   195a0:	cmpeq	r2, sl
   195a4:	ldrd	r2, [sp, #16]
   195a8:	orrhi	ip, ip, #1
   195ac:	cmp	r3, fp
   195b0:	ldr	r3, [sp, #32]
   195b4:	cmpeq	r2, sl
   195b8:	add	r2, r3, r7
   195bc:	mov	r7, r2
   195c0:	mvnhi	r7, #0
   195c4:	mvnhi	r6, #0
   195c8:	mul	r2, r1, r7
   195cc:	mov	sl, r6
   195d0:	strd	r6, [sp, #24]
   195d4:	mla	r0, lr, sl, r2
   195d8:	ldrd	sl, [sp]
   195dc:	ldrd	r2, [sp, #16]
   195e0:	umull	r6, r7, r1, r6
   195e4:	cmp	r3, fp
   195e8:	cmpeq	r2, sl
   195ec:	mov	r3, ip
   195f0:	orrhi	r3, r3, #1
   195f4:	mov	r2, sl
   195f8:	str	r3, [sp, #16]
   195fc:	mov	r3, fp
   19600:	ldrd	sl, [sp, #24]
   19604:	add	r7, r0, r7
   19608:	cmp	r3, fp
   1960c:	cmpeq	r2, sl
   19610:	bcc	190c0 <__assert_fail@plt+0x817c>
   19614:	mov	r2, r6
   19618:	mov	r3, r7
   1961c:	b	190c8 <__assert_fail@plt+0x8184>
   19620:	ldrd	sl, [sp]
   19624:	umull	r2, r3, r6, r1
   19628:	mul	r0, r6, lr
   1962c:	cmp	r7, fp
   19630:	cmpeq	r6, sl
   19634:	mvnhi	r2, #0
   19638:	mla	r0, r1, r7, r0
   1963c:	umull	sl, fp, r2, r1
   19640:	add	r3, r0, r3
   19644:	mul	r0, lr, r2
   19648:	mvnhi	r3, #0
   1964c:	strd	sl, [sp, #16]
   19650:	ldrd	sl, [sp]
   19654:	mla	r0, r1, r3, r0
   19658:	ldr	ip, [sp, #20]
   1965c:	cmp	r3, fp
   19660:	add	r0, r0, ip
   19664:	cmpeq	r2, sl
   19668:	str	r0, [sp, #20]
   1966c:	mvnhi	sl, #0
   19670:	mvnhi	fp, #0
   19674:	strdhi	sl, [sp, #16]
   19678:	ldrdhi	sl, [sp]
   1967c:	ldr	r0, [sp, #16]
   19680:	cmp	r3, fp
   19684:	ldr	ip, [sp, #20]
   19688:	mul	r0, lr, r0
   1968c:	ldr	r3, [sp, #16]
   19690:	cmpeq	r2, sl
   19694:	mla	r0, r1, ip, r0
   19698:	umull	r2, r3, r3, r1
   1969c:	movhi	r1, #1
   196a0:	movls	r1, #0
   196a4:	cmp	r7, fp
   196a8:	cmpeq	r6, sl
   196ac:	ldrd	r6, [sp, #16]
   196b0:	movls	ip, r1
   196b4:	orrhi	ip, r1, #1
   196b8:	cmp	r7, fp
   196bc:	cmpeq	r6, sl
   196c0:	mvnhi	r2, #0
   196c4:	add	r3, r0, r3
   196c8:	movhi	r3, r2
   196cc:	cmp	r7, fp
   196d0:	cmpeq	r6, sl
   196d4:	mov	r7, r3
   196d8:	mov	r6, r2
   196dc:	orrhi	ip, ip, #1
   196e0:	b	18fac <__assert_fail@plt+0x8068>
   196e4:	ldrd	sl, [sp]
   196e8:	umull	r2, r3, r6, r1
   196ec:	mul	r0, r6, lr
   196f0:	cmp	r7, fp
   196f4:	cmpeq	r6, sl
   196f8:	mvnhi	r2, #0
   196fc:	mla	r0, r1, r7, r0
   19700:	umull	sl, fp, r1, r2
   19704:	add	r3, r0, r3
   19708:	mvnhi	r3, #0
   1970c:	strd	sl, [sp, #16]
   19710:	mul	r0, r1, r3
   19714:	ldrd	sl, [sp]
   19718:	mla	r0, lr, r2, r0
   1971c:	ldr	ip, [sp, #20]
   19720:	cmp	fp, r3
   19724:	add	r0, r0, ip
   19728:	cmpeq	sl, r2
   1972c:	str	r0, [sp, #20]
   19730:	mvncc	sl, #0
   19734:	mvncc	fp, #0
   19738:	strdcc	sl, [sp, #16]
   1973c:	ldrdcc	sl, [sp]
   19740:	ldr	r0, [sp, #16]
   19744:	cmp	fp, r3
   19748:	ldr	r3, [sp, #20]
   1974c:	mul	r0, lr, r0
   19750:	cmpeq	sl, r2
   19754:	mla	r0, r1, r3, r0
   19758:	ldr	r3, [sp, #16]
   1975c:	umull	r2, r3, r3, r1
   19760:	strd	r2, [sp, #24]
   19764:	movcc	r3, #1
   19768:	movcs	r3, #0
   1976c:	cmp	r7, fp
   19770:	cmpeq	r6, sl
   19774:	movls	ip, r3
   19778:	orrhi	ip, r3, #1
   1977c:	ldrd	r2, [sp, #16]
   19780:	cmp	r3, fp
   19784:	ldr	r3, [sp, #28]
   19788:	cmpeq	r2, sl
   1978c:	add	r3, r0, r3
   19790:	str	r3, [sp, #28]
   19794:	bhi	1994c <__assert_fail@plt+0x8a08>
   19798:	ldrd	r2, [sp, #24]
   1979c:	mov	sl, r2
   197a0:	mov	fp, r3
   197a4:	mul	r2, lr, sl
   197a8:	umull	r6, r7, sl, r1
   197ac:	mla	r0, r1, fp, r2
   197b0:	ldrd	r2, [sp]
   197b4:	add	r7, r0, r7
   197b8:	mov	sl, r2
   197bc:	mov	fp, r3
   197c0:	strd	r2, [sp, #32]
   197c4:	ldrd	r2, [sp, #16]
   197c8:	cmp	r3, fp
   197cc:	cmpeq	r2, sl
   197d0:	ldrd	r2, [sp, #32]
   197d4:	ldrd	sl, [sp, #24]
   197d8:	orrhi	ip, ip, #1
   197dc:	cmp	fp, r3
   197e0:	cmpeq	sl, r2
   197e4:	mvnhi	r6, #0
   197e8:	mvnhi	r7, #0
   197ec:	umull	sl, fp, r6, r1
   197f0:	mul	r3, lr, r6
   197f4:	strd	sl, [sp, #16]
   197f8:	mla	r0, r1, r7, r3
   197fc:	ldrd	sl, [sp, #24]
   19800:	ldrd	r2, [sp]
   19804:	cmp	fp, r3
   19808:	cmpeq	sl, r2
   1980c:	orrhi	ip, ip, #1
   19810:	cmp	r7, r3
   19814:	ldr	r3, [sp, #20]
   19818:	cmpeq	r6, r2
   1981c:	add	r3, r0, r3
   19820:	str	r3, [sp, #20]
   19824:	mvnhi	r2, #0
   19828:	mvnhi	r3, #0
   1982c:	ldrdls	r2, [sp, #16]
   19830:	ldrd	sl, [sp]
   19834:	mul	r0, r1, r3
   19838:	cmp	r7, fp
   1983c:	str	r0, [sp, #16]
   19840:	cmpeq	r6, sl
   19844:	ldr	r6, [sp, #16]
   19848:	umull	r0, r1, r1, r2
   1984c:	mla	lr, lr, r2, r6
   19850:	orrhi	ip, ip, #1
   19854:	cmp	r3, fp
   19858:	cmpeq	r2, sl
   1985c:	add	r1, lr, r1
   19860:	bls	19334 <__assert_fail@plt+0x83f0>
   19864:	b	1932c <__assert_fail@plt+0x83e8>
   19868:	ldr	r3, [pc, #344]	; 199c8 <__assert_fail@plt+0x8a84>
   1986c:	mvn	r2, #0
   19870:	cmp	r7, r3
   19874:	cmpeq	r6, r2
   19878:	bhi	198cc <__assert_fail@plt+0x8988>
   1987c:	lsl	r3, r7, #10
   19880:	orr	r3, r3, r6, lsr #22
   19884:	lsl	r2, r6, #10
   19888:	mov	r6, r2
   1988c:	mov	r7, r3
   19890:	mov	ip, #0
   19894:	b	18fac <__assert_fail@plt+0x8068>
   19898:	strd	r6, [r8]
   1989c:	orr	r4, r4, #2
   198a0:	b	18c7c <__assert_fail@plt+0x7d38>
   198a4:	ldrd	r2, [sp]
   198a8:	cmp	r7, r3
   198ac:	cmpeq	r6, r2
   198b0:	bhi	198cc <__assert_fail@plt+0x8988>
   198b4:	mul	r3, r6, lr
   198b8:	mov	ip, #0
   198bc:	mla	r3, r1, r7, r3
   198c0:	umull	r6, r7, r6, r1
   198c4:	add	r7, r3, r7
   198c8:	b	18fac <__assert_fail@plt+0x8068>
   198cc:	mvn	r6, #0
   198d0:	mvn	r7, #0
   198d4:	mov	ip, #1
   198d8:	b	18fac <__assert_fail@plt+0x8068>
   198dc:	ldrb	r3, [r9, #2]
   198e0:	mvn	r2, #0
   198e4:	mov	r1, #1024	; 0x400
   198e8:	cmp	r3, #66	; 0x42
   198ec:	ldr	r3, [pc, #212]	; 199c8 <__assert_fail@plt+0x8a84>
   198f0:	mov	lr, #0
   198f4:	strd	r2, [sp]
   198f8:	moveq	r3, #3
   198fc:	streq	r3, [sp, #12]
   19900:	movne	r3, #1
   19904:	strne	r3, [sp, #12]
   19908:	b	18e58 <__assert_fail@plt+0x7f14>
   1990c:	add	r3, pc, #172	; 0xac
   19910:	ldrd	r2, [r3]
   19914:	mov	r1, #1000	; 0x3e8
   19918:	mov	lr, #0
   1991c:	strd	r2, [sp]
   19920:	mov	r3, #2
   19924:	str	r3, [sp, #12]
   19928:	b	18e58 <__assert_fail@plt+0x7f14>
   1992c:	ldr	r3, [pc, #148]	; 199c8 <__assert_fail@plt+0x8a84>
   19930:	mvn	r2, #0
   19934:	mov	lr, r0
   19938:	strd	r2, [sp]
   1993c:	mov	r3, #1
   19940:	mov	r1, #1024	; 0x400
   19944:	str	r3, [sp, #12]
   19948:	b	18e58 <__assert_fail@plt+0x7f14>
   1994c:	mvn	r2, #0
   19950:	mvn	r3, #0
   19954:	mov	sl, r2
   19958:	strd	r2, [sp, #24]
   1995c:	mov	fp, r3
   19960:	b	197a4 <__assert_fail@plt+0x8860>
   19964:	mvn	r2, #0
   19968:	mvn	r3, #0
   1996c:	mov	sl, r2
   19970:	strd	r2, [sp, #16]
   19974:	mov	fp, r3
   19978:	b	19228 <__assert_fail@plt+0x82e4>
   1997c:	mvn	r2, #0
   19980:	mvn	r3, #0
   19984:	mov	sl, r2
   19988:	strd	r2, [sp, #24]
   1998c:	mov	fp, r3
   19990:	b	19080 <__assert_fail@plt+0x813c>
   19994:	mvn	r2, #0
   19998:	mvn	r3, #0
   1999c:	mov	sl, r2
   199a0:	strd	r2, [sp, #16]
   199a4:	mov	fp, r3
   199a8:	b	19584 <__assert_fail@plt+0x8640>
   199ac:	ldr	r3, [pc, #28]	; 199d0 <__assert_fail@plt+0x8a8c>
   199b0:	mov	r2, #85	; 0x55
   199b4:	ldr	r1, [pc, #24]	; 199d4 <__assert_fail@plt+0x8a90>
   199b8:	ldr	r0, [pc, #24]	; 199d8 <__assert_fail@plt+0x8a94>
   199bc:	bl	10f44 <__assert_fail@plt>
   199c0:	blmi	ff1c3984 <stdout@@GLIBC_2.4+0xff197830>
   199c4:	subeq	r8, r1, r7, lsr r9
   199c8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   199cc:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   199d0:	andeq	fp, r1, r0, ror #22
   199d4:	andeq	fp, r1, ip, ror #22
   199d8:	andeq	fp, r1, ip, ror fp
   199dc:	cmp	r1, #0
   199e0:	cmpne	r0, #0
   199e4:	moveq	r1, #1
   199e8:	moveq	r0, r1
   199ec:	umull	r2, r3, r0, r1
   199f0:	adds	r3, r3, #0
   199f4:	movne	r3, #1
   199f8:	cmp	r2, #0
   199fc:	blt	19a0c <__assert_fail@plt+0x8ac8>
   19a00:	cmp	r3, #0
   19a04:	bne	19a0c <__assert_fail@plt+0x8ac8>
   19a08:	b	10cc8 <calloc@plt>
   19a0c:	push	{r4, lr}
   19a10:	bl	10e84 <__errno_location@plt>
   19a14:	mov	r3, #12
   19a18:	str	r3, [r0]
   19a1c:	mov	r0, #0
   19a20:	pop	{r4, pc}
   19a24:	cmp	r0, #0
   19a28:	moveq	r0, #1
   19a2c:	cmp	r0, #0
   19a30:	blt	19a38 <__assert_fail@plt+0x8af4>
   19a34:	b	10e00 <malloc@plt>
   19a38:	push	{r4, lr}
   19a3c:	bl	10e84 <__errno_location@plt>
   19a40:	mov	r3, #12
   19a44:	str	r3, [r0]
   19a48:	mov	r0, #0
   19a4c:	pop	{r4, pc}
   19a50:	cmp	r0, #0
   19a54:	beq	19a78 <__assert_fail@plt+0x8b34>
   19a58:	cmp	r1, #0
   19a5c:	push	{lr}		; (str lr, [sp, #-4]!)
   19a60:	sub	sp, sp, #12
   19a64:	beq	19a80 <__assert_fail@plt+0x8b3c>
   19a68:	blt	19a98 <__assert_fail@plt+0x8b54>
   19a6c:	add	sp, sp, #12
   19a70:	pop	{lr}		; (ldr lr, [sp], #4)
   19a74:	b	10d94 <realloc@plt>
   19a78:	mov	r0, r1
   19a7c:	b	19a24 <__assert_fail@plt+0x8ae0>
   19a80:	str	r1, [sp, #4]
   19a84:	bl	13a3c <__assert_fail@plt+0x2af8>
   19a88:	ldr	r3, [sp, #4]
   19a8c:	mov	r0, r3
   19a90:	add	sp, sp, #12
   19a94:	pop	{pc}		; (ldr pc, [sp], #4)
   19a98:	bl	10e84 <__errno_location@plt>
   19a9c:	mov	r2, #12
   19aa0:	mov	r3, #0
   19aa4:	str	r2, [r0]
   19aa8:	b	19a8c <__assert_fail@plt+0x8b48>
   19aac:	push	{r4, r5, r6, lr}
   19ab0:	mov	r4, r0
   19ab4:	bl	10ddc <__fpending@plt>
   19ab8:	ldr	r5, [r4]
   19abc:	and	r5, r5, #32
   19ac0:	mov	r6, r0
   19ac4:	mov	r0, r4
   19ac8:	bl	19b28 <__assert_fail@plt+0x8be4>
   19acc:	cmp	r5, #0
   19ad0:	mov	r4, r0
   19ad4:	bne	19af4 <__assert_fail@plt+0x8bb0>
   19ad8:	cmp	r0, #0
   19adc:	beq	19aec <__assert_fail@plt+0x8ba8>
   19ae0:	cmp	r6, #0
   19ae4:	beq	19b10 <__assert_fail@plt+0x8bcc>
   19ae8:	mvn	r4, #0
   19aec:	mov	r0, r4
   19af0:	pop	{r4, r5, r6, pc}
   19af4:	cmp	r0, #0
   19af8:	bne	19ae8 <__assert_fail@plt+0x8ba4>
   19afc:	bl	10e84 <__errno_location@plt>
   19b00:	str	r4, [r0]
   19b04:	mvn	r4, #0
   19b08:	mov	r0, r4
   19b0c:	pop	{r4, r5, r6, pc}
   19b10:	bl	10e84 <__errno_location@plt>
   19b14:	ldr	r4, [r0]
   19b18:	subs	r4, r4, #9
   19b1c:	mvnne	r4, #0
   19b20:	mov	r0, r4
   19b24:	pop	{r4, r5, r6, pc}
   19b28:	push	{r4, r5, lr}
   19b2c:	sub	sp, sp, #12
   19b30:	mov	r4, r0
   19b34:	bl	10ec0 <fileno@plt>
   19b38:	cmp	r0, #0
   19b3c:	mov	r0, r4
   19b40:	blt	19bbc <__assert_fail@plt+0x8c78>
   19b44:	bl	10e18 <__freading@plt>
   19b48:	cmp	r0, #0
   19b4c:	bne	19b88 <__assert_fail@plt+0x8c44>
   19b50:	mov	r0, r4
   19b54:	bl	19bc8 <__assert_fail@plt+0x8c84>
   19b58:	cmp	r0, #0
   19b5c:	beq	19bb8 <__assert_fail@plt+0x8c74>
   19b60:	bl	10e84 <__errno_location@plt>
   19b64:	mov	r5, r0
   19b68:	mov	r0, r4
   19b6c:	ldr	r4, [r5]
   19b70:	bl	10ed8 <fclose@plt>
   19b74:	cmp	r4, #0
   19b78:	mvnne	r0, #0
   19b7c:	strne	r4, [r5]
   19b80:	add	sp, sp, #12
   19b84:	pop	{r4, r5, pc}
   19b88:	mov	r0, r4
   19b8c:	bl	10ec0 <fileno@plt>
   19b90:	mov	r3, #1
   19b94:	str	r3, [sp]
   19b98:	mov	r2, #0
   19b9c:	mov	r3, #0
   19ba0:	bl	10dc4 <lseek64@plt>
   19ba4:	mvn	r3, #0
   19ba8:	mvn	r2, #0
   19bac:	cmp	r1, r3
   19bb0:	cmpeq	r0, r2
   19bb4:	bne	19b50 <__assert_fail@plt+0x8c0c>
   19bb8:	mov	r0, r4
   19bbc:	add	sp, sp, #12
   19bc0:	pop	{r4, r5, lr}
   19bc4:	b	10ed8 <fclose@plt>
   19bc8:	push	{r4, lr}
   19bcc:	subs	r4, r0, #0
   19bd0:	sub	sp, sp, #8
   19bd4:	beq	19bf0 <__assert_fail@plt+0x8cac>
   19bd8:	bl	10e18 <__freading@plt>
   19bdc:	cmp	r0, #0
   19be0:	beq	19bf0 <__assert_fail@plt+0x8cac>
   19be4:	ldr	r3, [r4]
   19be8:	tst	r3, #256	; 0x100
   19bec:	bne	19c00 <__assert_fail@plt+0x8cbc>
   19bf0:	mov	r0, r4
   19bf4:	add	sp, sp, #8
   19bf8:	pop	{r4, lr}
   19bfc:	b	10d10 <fflush@plt>
   19c00:	mov	r3, #1
   19c04:	str	r3, [sp]
   19c08:	mov	r2, #0
   19c0c:	mov	r3, #0
   19c10:	mov	r0, r4
   19c14:	bl	19c28 <__assert_fail@plt+0x8ce4>
   19c18:	mov	r0, r4
   19c1c:	add	sp, sp, #8
   19c20:	pop	{r4, lr}
   19c24:	b	10d10 <fflush@plt>
   19c28:	push	{r4, r5, r6, r7, r8, lr}
   19c2c:	sub	sp, sp, #8
   19c30:	ldmib	r0, {ip, lr}
   19c34:	mov	r4, r0
   19c38:	ldr	r5, [sp, #32]
   19c3c:	cmp	lr, ip
   19c40:	beq	19c58 <__assert_fail@plt+0x8d14>
   19c44:	str	r5, [sp, #32]
   19c48:	mov	r0, r4
   19c4c:	add	sp, sp, #8
   19c50:	pop	{r4, r5, r6, r7, r8, lr}
   19c54:	b	10ee4 <fseeko64@plt>
   19c58:	ldr	lr, [r0, #20]
   19c5c:	ldr	ip, [r0, #16]
   19c60:	cmp	lr, ip
   19c64:	bne	19c44 <__assert_fail@plt+0x8d00>
   19c68:	ldr	r8, [r0, #36]	; 0x24
   19c6c:	cmp	r8, #0
   19c70:	bne	19c44 <__assert_fail@plt+0x8d00>
   19c74:	mov	r6, r2
   19c78:	mov	r7, r3
   19c7c:	bl	10ec0 <fileno@plt>
   19c80:	mov	r2, r6
   19c84:	mov	r3, r7
   19c88:	str	r5, [sp]
   19c8c:	bl	10dc4 <lseek64@plt>
   19c90:	mvn	r3, #0
   19c94:	mvn	r2, #0
   19c98:	cmp	r1, r3
   19c9c:	cmpeq	r0, r2
   19ca0:	beq	19cc0 <__assert_fail@plt+0x8d7c>
   19ca4:	ldr	r3, [r4]
   19ca8:	strd	r0, [r4, #80]	; 0x50
   19cac:	mov	r0, r8
   19cb0:	bic	r3, r3, #16
   19cb4:	str	r3, [r4]
   19cb8:	add	sp, sp, #8
   19cbc:	pop	{r4, r5, r6, r7, r8, pc}
   19cc0:	mvn	r0, #0
   19cc4:	b	19cb8 <__assert_fail@plt+0x8d74>
   19cc8:	push	{r4, lr}
   19ccc:	mov	r0, #14
   19cd0:	bl	10f08 <nl_langinfo@plt>
   19cd4:	cmp	r0, #0
   19cd8:	beq	19cf0 <__assert_fail@plt+0x8dac>
   19cdc:	ldrb	r2, [r0]
   19ce0:	ldr	r3, [pc, #16]	; 19cf8 <__assert_fail@plt+0x8db4>
   19ce4:	cmp	r2, #0
   19ce8:	moveq	r0, r3
   19cec:	pop	{r4, pc}
   19cf0:	ldr	r0, [pc]	; 19cf8 <__assert_fail@plt+0x8db4>
   19cf4:	pop	{r4, pc}
   19cf8:	andeq	fp, r1, r4, lsr #23
   19cfc:	push	{r4, r5, r6, r7, lr}
   19d00:	subs	r6, r0, #0
   19d04:	sub	sp, sp, #12
   19d08:	addeq	r6, sp, #4
   19d0c:	mov	r0, r6
   19d10:	mov	r5, r2
   19d14:	mov	r7, r1
   19d18:	bl	10de8 <mbrtowc@plt>
   19d1c:	cmp	r5, #0
   19d20:	cmnne	r0, #3
   19d24:	mov	r4, r0
   19d28:	bls	19d44 <__assert_fail@plt+0x8e00>
   19d2c:	mov	r0, #0
   19d30:	bl	19d9c <__assert_fail@plt+0x8e58>
   19d34:	cmp	r0, #0
   19d38:	moveq	r4, #1
   19d3c:	ldrbeq	r3, [r7]
   19d40:	streq	r3, [r6]
   19d44:	mov	r0, r4
   19d48:	add	sp, sp, #12
   19d4c:	pop	{r4, r5, r6, r7, pc}
   19d50:	push	{r4, r5, r6, lr}
   19d54:	subs	r4, r2, #0
   19d58:	mov	r6, r0
   19d5c:	mov	r5, r1
   19d60:	beq	19d8c <__assert_fail@plt+0x8e48>
   19d64:	mov	r1, r4
   19d68:	mvn	r0, #0
   19d6c:	bl	19e90 <__assert_fail@plt+0x8f4c>
   19d70:	cmp	r0, r5
   19d74:	bcs	19d8c <__assert_fail@plt+0x8e48>
   19d78:	bl	10e84 <__errno_location@plt>
   19d7c:	mov	r3, #12
   19d80:	str	r3, [r0]
   19d84:	mov	r0, #0
   19d88:	pop	{r4, r5, r6, pc}
   19d8c:	mul	r1, r5, r4
   19d90:	mov	r0, r6
   19d94:	pop	{r4, r5, r6, lr}
   19d98:	b	19a50 <__assert_fail@plt+0x8b0c>
   19d9c:	push	{lr}		; (str lr, [sp, #-4]!)
   19da0:	sub	sp, sp, #268	; 0x10c
   19da4:	add	r1, sp, #4
   19da8:	ldr	r2, [pc, #60]	; 19dec <__assert_fail@plt+0x8ea8>
   19dac:	bl	19df8 <__assert_fail@plt+0x8eb4>
   19db0:	cmp	r0, #0
   19db4:	movne	r0, #0
   19db8:	bne	19de4 <__assert_fail@plt+0x8ea0>
   19dbc:	ldr	r1, [pc, #44]	; 19df0 <__assert_fail@plt+0x8eac>
   19dc0:	add	r0, sp, #4
   19dc4:	bl	10cec <strcmp@plt>
   19dc8:	cmp	r0, #0
   19dcc:	beq	19de4 <__assert_fail@plt+0x8ea0>
   19dd0:	add	r0, sp, #4
   19dd4:	ldr	r1, [pc, #24]	; 19df4 <__assert_fail@plt+0x8eb0>
   19dd8:	bl	10cec <strcmp@plt>
   19ddc:	adds	r0, r0, #0
   19de0:	movne	r0, #1
   19de4:	add	sp, sp, #268	; 0x10c
   19de8:	pop	{pc}		; (ldr pc, [sp], #4)
   19dec:	andeq	r0, r0, r1, lsl #2
   19df0:	andeq	fp, r1, r4, asr #4
   19df4:	andeq	fp, r1, ip, lsr #23
   19df8:	push	{r4, r5, r6, lr}
   19dfc:	mov	r5, r1
   19e00:	mov	r1, #0
   19e04:	mov	r4, r2
   19e08:	bl	10ef0 <setlocale@plt>
   19e0c:	subs	r6, r0, #0
   19e10:	beq	19e6c <__assert_fail@plt+0x8f28>
   19e14:	bl	10e6c <strlen@plt>
   19e18:	cmp	r4, r0
   19e1c:	bhi	19e54 <__assert_fail@plt+0x8f10>
   19e20:	cmp	r4, #0
   19e24:	bne	19e30 <__assert_fail@plt+0x8eec>
   19e28:	mov	r0, #34	; 0x22
   19e2c:	pop	{r4, r5, r6, pc}
   19e30:	sub	r4, r4, #1
   19e34:	mov	r1, r6
   19e38:	mov	r2, r4
   19e3c:	mov	r0, r5
   19e40:	bl	10d34 <memcpy@plt>
   19e44:	mov	r3, #0
   19e48:	strb	r3, [r5, r4]
   19e4c:	mov	r0, #34	; 0x22
   19e50:	pop	{r4, r5, r6, pc}
   19e54:	add	r2, r0, #1
   19e58:	mov	r1, r6
   19e5c:	mov	r0, r5
   19e60:	bl	10d34 <memcpy@plt>
   19e64:	mov	r0, #0
   19e68:	pop	{r4, r5, r6, pc}
   19e6c:	cmp	r4, #0
   19e70:	beq	19e80 <__assert_fail@plt+0x8f3c>
   19e74:	strb	r6, [r5]
   19e78:	mov	r0, #22
   19e7c:	pop	{r4, r5, r6, pc}
   19e80:	mov	r0, #22
   19e84:	pop	{r4, r5, r6, pc}
   19e88:	mov	r1, #0
   19e8c:	b	10ef0 <setlocale@plt>
   19e90:	subs	r2, r1, #1
   19e94:	bxeq	lr
   19e98:	bcc	1a070 <__assert_fail@plt+0x912c>
   19e9c:	cmp	r0, r1
   19ea0:	bls	1a054 <__assert_fail@plt+0x9110>
   19ea4:	tst	r1, r2
   19ea8:	beq	1a060 <__assert_fail@plt+0x911c>
   19eac:	clz	r3, r0
   19eb0:	clz	r2, r1
   19eb4:	sub	r3, r2, r3
   19eb8:	rsbs	r3, r3, #31
   19ebc:	addne	r3, r3, r3, lsl #1
   19ec0:	mov	r2, #0
   19ec4:	addne	pc, pc, r3, lsl #2
   19ec8:	nop			; (mov r0, r0)
   19ecc:	cmp	r0, r1, lsl #31
   19ed0:	adc	r2, r2, r2
   19ed4:	subcs	r0, r0, r1, lsl #31
   19ed8:	cmp	r0, r1, lsl #30
   19edc:	adc	r2, r2, r2
   19ee0:	subcs	r0, r0, r1, lsl #30
   19ee4:	cmp	r0, r1, lsl #29
   19ee8:	adc	r2, r2, r2
   19eec:	subcs	r0, r0, r1, lsl #29
   19ef0:	cmp	r0, r1, lsl #28
   19ef4:	adc	r2, r2, r2
   19ef8:	subcs	r0, r0, r1, lsl #28
   19efc:	cmp	r0, r1, lsl #27
   19f00:	adc	r2, r2, r2
   19f04:	subcs	r0, r0, r1, lsl #27
   19f08:	cmp	r0, r1, lsl #26
   19f0c:	adc	r2, r2, r2
   19f10:	subcs	r0, r0, r1, lsl #26
   19f14:	cmp	r0, r1, lsl #25
   19f18:	adc	r2, r2, r2
   19f1c:	subcs	r0, r0, r1, lsl #25
   19f20:	cmp	r0, r1, lsl #24
   19f24:	adc	r2, r2, r2
   19f28:	subcs	r0, r0, r1, lsl #24
   19f2c:	cmp	r0, r1, lsl #23
   19f30:	adc	r2, r2, r2
   19f34:	subcs	r0, r0, r1, lsl #23
   19f38:	cmp	r0, r1, lsl #22
   19f3c:	adc	r2, r2, r2
   19f40:	subcs	r0, r0, r1, lsl #22
   19f44:	cmp	r0, r1, lsl #21
   19f48:	adc	r2, r2, r2
   19f4c:	subcs	r0, r0, r1, lsl #21
   19f50:	cmp	r0, r1, lsl #20
   19f54:	adc	r2, r2, r2
   19f58:	subcs	r0, r0, r1, lsl #20
   19f5c:	cmp	r0, r1, lsl #19
   19f60:	adc	r2, r2, r2
   19f64:	subcs	r0, r0, r1, lsl #19
   19f68:	cmp	r0, r1, lsl #18
   19f6c:	adc	r2, r2, r2
   19f70:	subcs	r0, r0, r1, lsl #18
   19f74:	cmp	r0, r1, lsl #17
   19f78:	adc	r2, r2, r2
   19f7c:	subcs	r0, r0, r1, lsl #17
   19f80:	cmp	r0, r1, lsl #16
   19f84:	adc	r2, r2, r2
   19f88:	subcs	r0, r0, r1, lsl #16
   19f8c:	cmp	r0, r1, lsl #15
   19f90:	adc	r2, r2, r2
   19f94:	subcs	r0, r0, r1, lsl #15
   19f98:	cmp	r0, r1, lsl #14
   19f9c:	adc	r2, r2, r2
   19fa0:	subcs	r0, r0, r1, lsl #14
   19fa4:	cmp	r0, r1, lsl #13
   19fa8:	adc	r2, r2, r2
   19fac:	subcs	r0, r0, r1, lsl #13
   19fb0:	cmp	r0, r1, lsl #12
   19fb4:	adc	r2, r2, r2
   19fb8:	subcs	r0, r0, r1, lsl #12
   19fbc:	cmp	r0, r1, lsl #11
   19fc0:	adc	r2, r2, r2
   19fc4:	subcs	r0, r0, r1, lsl #11
   19fc8:	cmp	r0, r1, lsl #10
   19fcc:	adc	r2, r2, r2
   19fd0:	subcs	r0, r0, r1, lsl #10
   19fd4:	cmp	r0, r1, lsl #9
   19fd8:	adc	r2, r2, r2
   19fdc:	subcs	r0, r0, r1, lsl #9
   19fe0:	cmp	r0, r1, lsl #8
   19fe4:	adc	r2, r2, r2
   19fe8:	subcs	r0, r0, r1, lsl #8
   19fec:	cmp	r0, r1, lsl #7
   19ff0:	adc	r2, r2, r2
   19ff4:	subcs	r0, r0, r1, lsl #7
   19ff8:	cmp	r0, r1, lsl #6
   19ffc:	adc	r2, r2, r2
   1a000:	subcs	r0, r0, r1, lsl #6
   1a004:	cmp	r0, r1, lsl #5
   1a008:	adc	r2, r2, r2
   1a00c:	subcs	r0, r0, r1, lsl #5
   1a010:	cmp	r0, r1, lsl #4
   1a014:	adc	r2, r2, r2
   1a018:	subcs	r0, r0, r1, lsl #4
   1a01c:	cmp	r0, r1, lsl #3
   1a020:	adc	r2, r2, r2
   1a024:	subcs	r0, r0, r1, lsl #3
   1a028:	cmp	r0, r1, lsl #2
   1a02c:	adc	r2, r2, r2
   1a030:	subcs	r0, r0, r1, lsl #2
   1a034:	cmp	r0, r1, lsl #1
   1a038:	adc	r2, r2, r2
   1a03c:	subcs	r0, r0, r1, lsl #1
   1a040:	cmp	r0, r1
   1a044:	adc	r2, r2, r2
   1a048:	subcs	r0, r0, r1
   1a04c:	mov	r0, r2
   1a050:	bx	lr
   1a054:	moveq	r0, #1
   1a058:	movne	r0, #0
   1a05c:	bx	lr
   1a060:	clz	r2, r1
   1a064:	rsb	r2, r2, #31
   1a068:	lsr	r0, r0, r2
   1a06c:	bx	lr
   1a070:	cmp	r0, #0
   1a074:	mvnne	r0, #0
   1a078:	b	1a2dc <__assert_fail@plt+0x9398>
   1a07c:	cmp	r1, #0
   1a080:	beq	1a070 <__assert_fail@plt+0x912c>
   1a084:	push	{r0, r1, lr}
   1a088:	bl	19e90 <__assert_fail@plt+0x8f4c>
   1a08c:	pop	{r1, r2, lr}
   1a090:	mul	r3, r2, r0
   1a094:	sub	r1, r1, r3
   1a098:	bx	lr
   1a09c:	cmp	r1, #0
   1a0a0:	beq	1a2ac <__assert_fail@plt+0x9368>
   1a0a4:	eor	ip, r0, r1
   1a0a8:	rsbmi	r1, r1, #0
   1a0ac:	subs	r2, r1, #1
   1a0b0:	beq	1a278 <__assert_fail@plt+0x9334>
   1a0b4:	movs	r3, r0
   1a0b8:	rsbmi	r3, r0, #0
   1a0bc:	cmp	r3, r1
   1a0c0:	bls	1a284 <__assert_fail@plt+0x9340>
   1a0c4:	tst	r1, r2
   1a0c8:	beq	1a294 <__assert_fail@plt+0x9350>
   1a0cc:	clz	r2, r3
   1a0d0:	clz	r0, r1
   1a0d4:	sub	r2, r0, r2
   1a0d8:	rsbs	r2, r2, #31
   1a0dc:	addne	r2, r2, r2, lsl #1
   1a0e0:	mov	r0, #0
   1a0e4:	addne	pc, pc, r2, lsl #2
   1a0e8:	nop			; (mov r0, r0)
   1a0ec:	cmp	r3, r1, lsl #31
   1a0f0:	adc	r0, r0, r0
   1a0f4:	subcs	r3, r3, r1, lsl #31
   1a0f8:	cmp	r3, r1, lsl #30
   1a0fc:	adc	r0, r0, r0
   1a100:	subcs	r3, r3, r1, lsl #30
   1a104:	cmp	r3, r1, lsl #29
   1a108:	adc	r0, r0, r0
   1a10c:	subcs	r3, r3, r1, lsl #29
   1a110:	cmp	r3, r1, lsl #28
   1a114:	adc	r0, r0, r0
   1a118:	subcs	r3, r3, r1, lsl #28
   1a11c:	cmp	r3, r1, lsl #27
   1a120:	adc	r0, r0, r0
   1a124:	subcs	r3, r3, r1, lsl #27
   1a128:	cmp	r3, r1, lsl #26
   1a12c:	adc	r0, r0, r0
   1a130:	subcs	r3, r3, r1, lsl #26
   1a134:	cmp	r3, r1, lsl #25
   1a138:	adc	r0, r0, r0
   1a13c:	subcs	r3, r3, r1, lsl #25
   1a140:	cmp	r3, r1, lsl #24
   1a144:	adc	r0, r0, r0
   1a148:	subcs	r3, r3, r1, lsl #24
   1a14c:	cmp	r3, r1, lsl #23
   1a150:	adc	r0, r0, r0
   1a154:	subcs	r3, r3, r1, lsl #23
   1a158:	cmp	r3, r1, lsl #22
   1a15c:	adc	r0, r0, r0
   1a160:	subcs	r3, r3, r1, lsl #22
   1a164:	cmp	r3, r1, lsl #21
   1a168:	adc	r0, r0, r0
   1a16c:	subcs	r3, r3, r1, lsl #21
   1a170:	cmp	r3, r1, lsl #20
   1a174:	adc	r0, r0, r0
   1a178:	subcs	r3, r3, r1, lsl #20
   1a17c:	cmp	r3, r1, lsl #19
   1a180:	adc	r0, r0, r0
   1a184:	subcs	r3, r3, r1, lsl #19
   1a188:	cmp	r3, r1, lsl #18
   1a18c:	adc	r0, r0, r0
   1a190:	subcs	r3, r3, r1, lsl #18
   1a194:	cmp	r3, r1, lsl #17
   1a198:	adc	r0, r0, r0
   1a19c:	subcs	r3, r3, r1, lsl #17
   1a1a0:	cmp	r3, r1, lsl #16
   1a1a4:	adc	r0, r0, r0
   1a1a8:	subcs	r3, r3, r1, lsl #16
   1a1ac:	cmp	r3, r1, lsl #15
   1a1b0:	adc	r0, r0, r0
   1a1b4:	subcs	r3, r3, r1, lsl #15
   1a1b8:	cmp	r3, r1, lsl #14
   1a1bc:	adc	r0, r0, r0
   1a1c0:	subcs	r3, r3, r1, lsl #14
   1a1c4:	cmp	r3, r1, lsl #13
   1a1c8:	adc	r0, r0, r0
   1a1cc:	subcs	r3, r3, r1, lsl #13
   1a1d0:	cmp	r3, r1, lsl #12
   1a1d4:	adc	r0, r0, r0
   1a1d8:	subcs	r3, r3, r1, lsl #12
   1a1dc:	cmp	r3, r1, lsl #11
   1a1e0:	adc	r0, r0, r0
   1a1e4:	subcs	r3, r3, r1, lsl #11
   1a1e8:	cmp	r3, r1, lsl #10
   1a1ec:	adc	r0, r0, r0
   1a1f0:	subcs	r3, r3, r1, lsl #10
   1a1f4:	cmp	r3, r1, lsl #9
   1a1f8:	adc	r0, r0, r0
   1a1fc:	subcs	r3, r3, r1, lsl #9
   1a200:	cmp	r3, r1, lsl #8
   1a204:	adc	r0, r0, r0
   1a208:	subcs	r3, r3, r1, lsl #8
   1a20c:	cmp	r3, r1, lsl #7
   1a210:	adc	r0, r0, r0
   1a214:	subcs	r3, r3, r1, lsl #7
   1a218:	cmp	r3, r1, lsl #6
   1a21c:	adc	r0, r0, r0
   1a220:	subcs	r3, r3, r1, lsl #6
   1a224:	cmp	r3, r1, lsl #5
   1a228:	adc	r0, r0, r0
   1a22c:	subcs	r3, r3, r1, lsl #5
   1a230:	cmp	r3, r1, lsl #4
   1a234:	adc	r0, r0, r0
   1a238:	subcs	r3, r3, r1, lsl #4
   1a23c:	cmp	r3, r1, lsl #3
   1a240:	adc	r0, r0, r0
   1a244:	subcs	r3, r3, r1, lsl #3
   1a248:	cmp	r3, r1, lsl #2
   1a24c:	adc	r0, r0, r0
   1a250:	subcs	r3, r3, r1, lsl #2
   1a254:	cmp	r3, r1, lsl #1
   1a258:	adc	r0, r0, r0
   1a25c:	subcs	r3, r3, r1, lsl #1
   1a260:	cmp	r3, r1
   1a264:	adc	r0, r0, r0
   1a268:	subcs	r3, r3, r1
   1a26c:	cmp	ip, #0
   1a270:	rsbmi	r0, r0, #0
   1a274:	bx	lr
   1a278:	teq	ip, r0
   1a27c:	rsbmi	r0, r0, #0
   1a280:	bx	lr
   1a284:	movcc	r0, #0
   1a288:	asreq	r0, ip, #31
   1a28c:	orreq	r0, r0, #1
   1a290:	bx	lr
   1a294:	clz	r2, r1
   1a298:	rsb	r2, r2, #31
   1a29c:	cmp	ip, #0
   1a2a0:	lsr	r0, r3, r2
   1a2a4:	rsbmi	r0, r0, #0
   1a2a8:	bx	lr
   1a2ac:	cmp	r0, #0
   1a2b0:	mvngt	r0, #-2147483648	; 0x80000000
   1a2b4:	movlt	r0, #-2147483648	; 0x80000000
   1a2b8:	b	1a2dc <__assert_fail@plt+0x9398>
   1a2bc:	cmp	r1, #0
   1a2c0:	beq	1a2ac <__assert_fail@plt+0x9368>
   1a2c4:	push	{r0, r1, lr}
   1a2c8:	bl	1a0a4 <__assert_fail@plt+0x9160>
   1a2cc:	pop	{r1, r2, lr}
   1a2d0:	mul	r3, r2, r0
   1a2d4:	sub	r1, r1, r3
   1a2d8:	bx	lr
   1a2dc:	push	{r1, lr}
   1a2e0:	mov	r0, #8
   1a2e4:	bl	10ce0 <raise@plt>
   1a2e8:	pop	{r1, pc}
   1a2ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a2f0:	mov	r7, r0
   1a2f4:	ldr	r6, [pc, #72]	; 1a344 <__assert_fail@plt+0x9400>
   1a2f8:	ldr	r5, [pc, #72]	; 1a348 <__assert_fail@plt+0x9404>
   1a2fc:	add	r6, pc, r6
   1a300:	add	r5, pc, r5
   1a304:	sub	r6, r6, r5
   1a308:	mov	r8, r1
   1a30c:	mov	r9, r2
   1a310:	bl	10ca8 <calloc@plt-0x20>
   1a314:	asrs	r6, r6, #2
   1a318:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a31c:	mov	r4, #0
   1a320:	add	r4, r4, #1
   1a324:	ldr	r3, [r5], #4
   1a328:	mov	r2, r9
   1a32c:	mov	r1, r8
   1a330:	mov	r0, r7
   1a334:	blx	r3
   1a338:	cmp	r6, r4
   1a33c:	bne	1a320 <__assert_fail@plt+0x93dc>
   1a340:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a344:	andeq	r1, r1, ip, lsl #24
   1a348:	andeq	r1, r1, r4, lsl #24
   1a34c:	bx	lr
   1a350:	ldr	r3, [pc, #12]	; 1a364 <__assert_fail@plt+0x9420>
   1a354:	mov	r1, #0
   1a358:	add	r3, pc, r3
   1a35c:	ldr	r2, [r3]
   1a360:	b	10e9c <__cxa_atexit@plt>
   1a364:	andeq	r1, r1, ip, lsl #27

Disassembly of section .fini:

0001a368 <.fini>:
   1a368:	push	{r3, lr}
   1a36c:	pop	{r3, pc}
