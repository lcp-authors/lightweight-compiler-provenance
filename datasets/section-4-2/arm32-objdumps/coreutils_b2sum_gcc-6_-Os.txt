
../repos/coreutils/src/b2sum:     file format elf32-littlearm


Disassembly of section .init:

00010eb4 <.init>:
   10eb4:	push	{r3, lr}
   10eb8:	bl	12344 <__assert_fail@plt+0x1188>
   10ebc:	pop	{r3, pc}

Disassembly of section .plt:

00010ec0 <fdopen@plt-0x14>:
   10ec0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ec4:	ldr	lr, [pc, #4]	; 10ed0 <fdopen@plt-0x4>
   10ec8:	add	lr, pc, lr
   10ecc:	ldr	pc, [lr, #8]!
   10ed0:	andeq	ip, r1, r0, lsr r1

00010ed4 <fdopen@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #28, 20	; 0x1c000
   10edc:	ldr	pc, [ip, #304]!	; 0x130

00010ee0 <calloc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #28, 20	; 0x1c000
   10ee8:	ldr	pc, [ip, #296]!	; 0x128

00010eec <fputs_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #28, 20	; 0x1c000
   10ef4:	ldr	pc, [ip, #288]!	; 0x120

00010ef8 <raise@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #28, 20	; 0x1c000
   10f00:	ldr	pc, [ip, #280]!	; 0x118

00010f04 <strcmp@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #28, 20	; 0x1c000
   10f0c:	ldr	pc, [ip, #272]!	; 0x110

00010f10 <posix_fadvise64@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #28, 20	; 0x1c000
   10f18:	ldr	pc, [ip, #264]!	; 0x108

00010f1c <fflush@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #28, 20	; 0x1c000
   10f24:	ldr	pc, [ip, #256]!	; 0x100

00010f28 <free@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #28, 20	; 0x1c000
   10f30:	ldr	pc, [ip, #248]!	; 0xf8

00010f34 <ferror@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #28, 20	; 0x1c000
   10f3c:	ldr	pc, [ip, #240]!	; 0xf0

00010f40 <_exit@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #28, 20	; 0x1c000
   10f48:	ldr	pc, [ip, #232]!	; 0xe8

00010f4c <memcpy@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #28, 20	; 0x1c000
   10f54:	ldr	pc, [ip, #224]!	; 0xe0

00010f58 <mbsinit@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #28, 20	; 0x1c000
   10f60:	ldr	pc, [ip, #216]!	; 0xd8

00010f64 <memcmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #28, 20	; 0x1c000
   10f6c:	ldr	pc, [ip, #208]!	; 0xd0

00010f70 <fputc_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #28, 20	; 0x1c000
   10f78:	ldr	pc, [ip, #200]!	; 0xc8

00010f7c <dcgettext@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #28, 20	; 0x1c000
   10f84:	ldr	pc, [ip, #192]!	; 0xc0

00010f88 <realloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #28, 20	; 0x1c000
   10f90:	ldr	pc, [ip, #184]!	; 0xb8

00010f94 <textdomain@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #28, 20	; 0x1c000
   10f9c:	ldr	pc, [ip, #176]!	; 0xb0

00010fa0 <iswprint@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #28, 20	; 0x1c000
   10fa8:	ldr	pc, [ip, #168]!	; 0xa8

00010fac <__memcpy_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #28, 20	; 0x1c000
   10fb4:	ldr	pc, [ip, #160]!	; 0xa0

00010fb8 <lseek64@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #28, 20	; 0x1c000
   10fc0:	ldr	pc, [ip, #152]!	; 0x98

00010fc4 <__ctype_get_mb_cur_max@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #28, 20	; 0x1c000
   10fcc:	ldr	pc, [ip, #144]!	; 0x90

00010fd0 <fread@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #28, 20	; 0x1c000
   10fd8:	ldr	pc, [ip, #136]!	; 0x88

00010fdc <__fpending@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #28, 20	; 0x1c000
   10fe4:	ldr	pc, [ip, #128]!	; 0x80

00010fe8 <ferror_unlocked@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #28, 20	; 0x1c000
   10ff0:	ldr	pc, [ip, #120]!	; 0x78

00010ff4 <mbrtowc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #28, 20	; 0x1c000
   10ffc:	ldr	pc, [ip, #112]!	; 0x70

00011000 <error@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #28, 20	; 0x1c000
   11008:	ldr	pc, [ip, #104]!	; 0x68

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #28, 20	; 0x1c000
   11014:	ldr	pc, [ip, #96]!	; 0x60

00011018 <__libc_start_main@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #28, 20	; 0x1c000
   11020:	ldr	pc, [ip, #88]!	; 0x58

00011024 <__freading@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #28, 20	; 0x1c000
   1102c:	ldr	pc, [ip, #80]!	; 0x50

00011030 <__ctype_tolower_loc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #28, 20	; 0x1c000
   11038:	ldr	pc, [ip, #72]!	; 0x48

0001103c <__gmon_start__@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #28, 20	; 0x1c000
   11044:	ldr	pc, [ip, #64]!	; 0x40

00011048 <getopt_long@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #28, 20	; 0x1c000
   11050:	ldr	pc, [ip, #56]!	; 0x38

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #28, 20	; 0x1c000
   1105c:	ldr	pc, [ip, #48]!	; 0x30

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #28, 20	; 0x1c000
   11068:	ldr	pc, [ip, #40]!	; 0x28

0001106c <feof@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #28, 20	; 0x1c000
   11074:	ldr	pc, [ip, #32]!

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #28, 20	; 0x1c000
   11080:	ldr	pc, [ip, #24]!

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #28, 20	; 0x1c000
   1108c:	ldr	pc, [ip, #16]!

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #28, 20	; 0x1c000
   11098:	ldr	pc, [ip, #8]!

0001109c <__cxa_atexit@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #0]!

000110a8 <setvbuf@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #4088]!	; 0xff8

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #4080]!	; 0xff0

000110c0 <__printf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110cc <fileno@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d8 <strtoumax@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110e4 <__fprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #4048]!	; 0xfd0

000110f0 <fclose@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110fc <fseeko64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #4032]!	; 0xfc0

00011108 <fcntl64@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #4024]!	; 0xfb8

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #4008]!	; 0xfa8

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #4000]!	; 0xfa0

00011138 <clearerr_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3992]!	; 0xf98

00011144 <fopen64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3984]!	; 0xf90

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3976]!	; 0xf88

0001115c <getline@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3968]!	; 0xf80

00011168 <fputs@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3960]!	; 0xf78

00011174 <strncmp@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3952]!	; 0xf70

00011180 <abort@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3944]!	; 0xf68

0001118c <feof_unlocked@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3936]!	; 0xf60

00011198 <close@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3928]!	; 0xf58

000111a4 <dcngettext@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3920]!	; 0xf50

000111b0 <putchar_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3912]!	; 0xf48

000111bc <__assert_fail@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3904]!	; 0xf40

Disassembly of section .text:

000111c8 <.text>:
   111c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111cc:	mov	r8, r0
   111d0:	sub	sp, sp, #292	; 0x124
   111d4:	ldr	r0, [r1]
   111d8:	mov	r7, r1
   111dc:	bl	18290 <__assert_fail@plt+0x70d4>
   111e0:	ldr	r1, [pc, #3716]	; 1206c <__assert_fail@plt+0xeb0>
   111e4:	mov	r0, #6
   111e8:	bl	11114 <setlocale@plt>
   111ec:	ldr	r1, [pc, #3708]	; 12070 <__assert_fail@plt+0xeb4>
   111f0:	ldr	r0, [pc, #3708]	; 12074 <__assert_fail@plt+0xeb8>
   111f4:	bl	11150 <bindtextdomain@plt>
   111f8:	ldr	r4, [pc, #3892]	; 12134 <__assert_fail@plt+0xf78>
   111fc:	ldr	r0, [pc, #3696]	; 12074 <__assert_fail@plt+0xeb8>
   11200:	bl	10f94 <textdomain@plt>
   11204:	ldr	r0, [pc, #3692]	; 12078 <__assert_fail@plt+0xebc>
   11208:	bl	1b2dc <__assert_fail@plt+0xa120>
   1120c:	mov	r3, #0
   11210:	mov	r1, r3
   11214:	mov	r2, #1
   11218:	ldr	r0, [r4]
   1121c:	bl	110a8 <setvbuf@plt>
   11220:	ldr	r9, [pc, #3652]	; 1206c <__assert_fail@plt+0xeb0>
   11224:	mov	r3, #0
   11228:	ldr	r5, [pc, #3868]	; 1214c <__assert_fail@plt+0xf90>
   1122c:	ldr	sl, [pc, #3656]	; 1207c <__assert_fail@plt+0xec0>
   11230:	mvn	r6, #0
   11234:	mov	fp, r3
   11238:	str	r3, [sp, #60]	; 0x3c
   1123c:	str	r4, [sp, #32]
   11240:	mov	r4, #0
   11244:	str	r4, [sp]
   11248:	ldr	r3, [pc, #3632]	; 12080 <__assert_fail@plt+0xec4>
   1124c:	ldr	r2, [pc, #3632]	; 12084 <__assert_fail@plt+0xec8>
   11250:	mov	r1, r7
   11254:	mov	r0, r8
   11258:	bl	11048 <getopt_long@plt>
   1125c:	cmn	r0, #1
   11260:	bne	112e8 <__assert_fail@plt+0x12c>
   11264:	ldr	r3, [pc, #3808]	; 1214c <__assert_fail@plt+0xf90>
   11268:	mov	r2, #3
   1126c:	ldrd	r0, [r3, #8]
   11270:	str	r2, [r3, #20]
   11274:	cmp	r1, #0
   11278:	cmpeq	r0, #512	; 0x200
   1127c:	bls	114c4 <__assert_fail@plt+0x308>
   11280:	mov	r2, #5
   11284:	ldr	r1, [pc, #3580]	; 12088 <__assert_fail@plt+0xecc>
   11288:	mov	r0, r4
   1128c:	bl	10f7c <dcgettext@plt>
   11290:	mov	r5, r0
   11294:	mov	r0, r9
   11298:	bl	198c0 <__assert_fail@plt+0x8704>
   1129c:	mov	r2, r5
   112a0:	mov	r1, r4
   112a4:	mov	r3, r0
   112a8:	mov	r0, r4
   112ac:	bl	11000 <error@plt>
   112b0:	mov	r2, #5
   112b4:	ldr	r1, [pc, #3536]	; 1208c <__assert_fail@plt+0xed0>
   112b8:	mov	r0, r4
   112bc:	bl	10f7c <dcgettext@plt>
   112c0:	mov	r5, r0
   112c4:	ldr	r0, [pc, #3692]	; 12138 <__assert_fail@plt+0xf7c>
   112c8:	bl	198c0 <__assert_fail@plt+0x8704>
   112cc:	mov	r3, #512	; 0x200
   112d0:	str	r3, [sp]
   112d4:	mov	r2, r5
   112d8:	mov	r1, r4
   112dc:	mov	r3, r0
   112e0:	mov	r0, #1
   112e4:	bl	11000 <error@plt>
   112e8:	cmp	r0, #119	; 0x77
   112ec:	beq	11458 <__assert_fail@plt+0x29c>
   112f0:	bgt	1133c <__assert_fail@plt+0x180>
   112f4:	cmp	r0, #98	; 0x62
   112f8:	beq	11384 <__assert_fail@plt+0x1c8>
   112fc:	bgt	1131c <__assert_fail@plt+0x160>
   11300:	cmn	r0, #3
   11304:	beq	1148c <__assert_fail@plt+0x2d0>
   11308:	cmn	r0, #2
   1130c:	moveq	r0, r4
   11310:	beq	11318 <__assert_fail@plt+0x15c>
   11314:	mov	r0, #1
   11318:	bl	126e4 <__assert_fail@plt+0x1528>
   1131c:	cmp	r0, #108	; 0x6c
   11320:	beq	11394 <__assert_fail@plt+0x1d8>
   11324:	cmp	r0, #116	; 0x74
   11328:	beq	1138c <__assert_fail@plt+0x1d0>
   1132c:	cmp	r0, #99	; 0x63
   11330:	bne	11314 <__assert_fail@plt+0x158>
   11334:	mov	fp, #1
   11338:	b	11240 <__assert_fail@plt+0x84>
   1133c:	ldr	r3, [pc, #3404]	; 12090 <__assert_fail@plt+0xed4>
   11340:	cmp	r0, r3
   11344:	beq	11444 <__assert_fail@plt+0x288>
   11348:	bgt	11368 <__assert_fail@plt+0x1ac>
   1134c:	cmp	r0, #122	; 0x7a
   11350:	beq	11480 <__assert_fail@plt+0x2c4>
   11354:	cmp	r0, #256	; 0x100
   11358:	bne	11314 <__assert_fail@plt+0x158>
   1135c:	mov	r3, #1
   11360:	strb	r3, [r5, #5]
   11364:	b	11240 <__assert_fail@plt+0x84>
   11368:	cmp	r0, sl
   1136c:	mov	r3, #1
   11370:	beq	11478 <__assert_fail@plt+0x2bc>
   11374:	blt	11468 <__assert_fail@plt+0x2ac>
   11378:	cmp	r0, #260	; 0x104
   1137c:	bne	11314 <__assert_fail@plt+0x158>
   11380:	str	r3, [sp, #60]	; 0x3c
   11384:	mov	r6, #1
   11388:	b	11240 <__assert_fail@plt+0x84>
   1138c:	mov	r6, r4
   11390:	b	11240 <__assert_fail@plt+0x84>
   11394:	ldr	r9, [pc, #3320]	; 12094 <__assert_fail@plt+0xed8>
   11398:	mov	r2, #5
   1139c:	ldr	r1, [pc, #3316]	; 12098 <__assert_fail@plt+0xedc>
   113a0:	ldr	r3, [r9]
   113a4:	mov	r0, r4
   113a8:	str	r3, [sp, #24]
   113ac:	bl	10f7c <dcgettext@plt>
   113b0:	ldr	r3, [pc, #3252]	; 1206c <__assert_fail@plt+0xeb0>
   113b4:	mvn	r2, #0
   113b8:	str	r3, [sp, #8]
   113bc:	mvn	r3, #0
   113c0:	str	r4, [sp, #16]
   113c4:	strd	r2, [sp]
   113c8:	mov	r3, #0
   113cc:	mov	r2, #0
   113d0:	str	r0, [sp, #12]
   113d4:	ldr	r0, [sp, #24]
   113d8:	bl	1a3e4 <__assert_fail@plt+0x9228>
   113dc:	ldr	r9, [r9]
   113e0:	strd	r0, [r5, #8]
   113e4:	and	r0, r0, #7
   113e8:	mov	r1, #0
   113ec:	orrs	r3, r0, r1
   113f0:	beq	11240 <__assert_fail@plt+0x84>
   113f4:	mov	r2, #5
   113f8:	ldr	r1, [pc, #3208]	; 12088 <__assert_fail@plt+0xecc>
   113fc:	mov	r0, r4
   11400:	bl	10f7c <dcgettext@plt>
   11404:	mov	r5, r0
   11408:	mov	r0, r9
   1140c:	bl	198c0 <__assert_fail@plt+0x8704>
   11410:	mov	r2, r5
   11414:	mov	r1, r4
   11418:	mov	r3, r0
   1141c:	mov	r0, r4
   11420:	bl	11000 <error@plt>
   11424:	ldr	r1, [pc, #3184]	; 1209c <__assert_fail@plt+0xee0>
   11428:	mov	r2, #5
   1142c:	mov	r0, #0
   11430:	bl	10f7c <dcgettext@plt>
   11434:	mov	r1, r4
   11438:	mov	r2, r0
   1143c:	mov	r0, #1
   11440:	bl	11000 <error@plt>
   11444:	mov	r3, #1
   11448:	strb	r3, [r5, #16]
   1144c:	strb	r4, [r5, #17]
   11450:	strb	r4, [r5, #18]
   11454:	b	11240 <__assert_fail@plt+0x84>
   11458:	mov	r3, #1
   1145c:	strb	r4, [r5, #16]
   11460:	strb	r3, [r5, #17]
   11464:	b	11450 <__assert_fail@plt+0x294>
   11468:	strb	r4, [r5, #16]
   1146c:	strb	r4, [r5, #17]
   11470:	strb	r3, [r5, #18]
   11474:	b	11240 <__assert_fail@plt+0x84>
   11478:	strb	r3, [r5, #19]
   1147c:	b	11240 <__assert_fail@plt+0x84>
   11480:	ldr	r3, [pc, #3240]	; 12130 <__assert_fail@plt+0xf74>
   11484:	strb	r4, [r3]
   11488:	b	11240 <__assert_fail@plt+0x84>
   1148c:	ldr	r3, [pc, #3084]	; 120a0 <__assert_fail@plt+0xee4>
   11490:	ldr	r0, [sp, #32]
   11494:	str	r3, [sp, #4]
   11498:	ldr	r3, [pc, #3076]	; 120a4 <__assert_fail@plt+0xee8>
   1149c:	str	r4, [sp, #8]
   114a0:	str	r3, [sp]
   114a4:	ldr	r3, [pc, #3068]	; 120a8 <__assert_fail@plt+0xeec>
   114a8:	ldr	r0, [r0]
   114ac:	ldr	r2, [pc, #3064]	; 120ac <__assert_fail@plt+0xef0>
   114b0:	ldr	r3, [r3]
   114b4:	ldr	r1, [pc, #3060]	; 120b0 <__assert_fail@plt+0xef4>
   114b8:	bl	19d1c <__assert_fail@plt+0x8b60>
   114bc:	mov	r0, r4
   114c0:	bl	11060 <exit@plt>
   114c4:	orrs	r2, r0, r1
   114c8:	moveq	r0, #512	; 0x200
   114cc:	moveq	r1, #0
   114d0:	strdeq	r0, [r3, #8]
   114d4:	ldr	r2, [r3, #8]
   114d8:	ldr	r1, [r3, #12]
   114dc:	ldr	r5, [sp, #60]	; 0x3c
   114e0:	lsr	r2, r2, #2
   114e4:	cmp	r6, #0
   114e8:	movne	r5, #0
   114ec:	andeq	r5, r5, #1
   114f0:	orr	r2, r2, r1, lsl #30
   114f4:	cmp	r5, #0
   114f8:	str	r2, [r3]
   114fc:	beq	11524 <__assert_fail@plt+0x368>
   11500:	ldr	r1, [pc, #2988]	; 120b4 <__assert_fail@plt+0xef8>
   11504:	mov	r2, #5
   11508:	mov	r0, #0
   1150c:	bl	10f7c <dcgettext@plt>
   11510:	mov	r1, #0
   11514:	mov	r2, r0
   11518:	mov	r0, r1
   1151c:	bl	11000 <error@plt>
   11520:	b	11314 <__assert_fail@plt+0x158>
   11524:	ldr	r2, [pc, #3076]	; 12130 <__assert_fail@plt+0xf74>
   11528:	ldrb	r4, [r2]
   1152c:	cmp	r4, #10
   11530:	moveq	r4, #0
   11534:	andne	r4, fp, #1
   11538:	cmp	r4, #0
   1153c:	movne	r2, #5
   11540:	ldrne	r1, [pc, #2928]	; 120b8 <__assert_fail@plt+0xefc>
   11544:	bne	11508 <__assert_fail@plt+0x34c>
   11548:	ldr	r2, [sp, #60]	; 0x3c
   1154c:	ands	r5, fp, r2
   11550:	movne	r2, #5
   11554:	ldrne	r1, [pc, #2912]	; 120bc <__assert_fail@plt+0xf00>
   11558:	bne	11508 <__assert_fail@plt+0x34c>
   1155c:	cmp	r6, #0
   11560:	movlt	r4, #0
   11564:	andge	r4, fp, #1
   11568:	cmp	r4, #0
   1156c:	movne	r2, #5
   11570:	ldrne	r1, [pc, #2888]	; 120c0 <__assert_fail@plt+0xf04>
   11574:	bne	11508 <__assert_fail@plt+0x34c>
   11578:	ldrb	r5, [r3, #5]
   1157c:	eor	r5, r5, #1
   11580:	orrs	r5, fp, r5
   11584:	moveq	r2, #5
   11588:	ldreq	r1, [pc, #2868]	; 120c4 <__assert_fail@plt+0xf08>
   1158c:	beq	11508 <__assert_fail@plt+0x34c>
   11590:	ldrb	r5, [r3, #16]
   11594:	eor	r5, r5, #1
   11598:	orrs	r5, fp, r5
   1159c:	moveq	r2, #5
   115a0:	ldreq	r1, [pc, #2848]	; 120c8 <__assert_fail@plt+0xf0c>
   115a4:	beq	11508 <__assert_fail@plt+0x34c>
   115a8:	ldrb	r5, [r3, #17]
   115ac:	eor	r5, r5, #1
   115b0:	orrs	r5, fp, r5
   115b4:	moveq	r2, #5
   115b8:	ldreq	r1, [pc, #2828]	; 120cc <__assert_fail@plt+0xf10>
   115bc:	beq	11508 <__assert_fail@plt+0x34c>
   115c0:	ldrb	r0, [r3, #18]
   115c4:	eor	r0, r0, #1
   115c8:	orrs	r2, fp, r0
   115cc:	str	r2, [sp, #52]	; 0x34
   115d0:	ldreq	r1, [pc, #2808]	; 120d0 <__assert_fail@plt+0xf14>
   115d4:	moveq	r2, #5
   115d8:	beq	11508 <__assert_fail@plt+0x34c>
   115dc:	ldrb	r1, [r3, #19]
   115e0:	eor	r2, fp, #1
   115e4:	ands	r3, r1, r2
   115e8:	str	r3, [sp, #68]	; 0x44
   115ec:	movne	r2, #5
   115f0:	ldrne	r1, [pc, #2780]	; 120d4 <__assert_fail@plt+0xf18>
   115f4:	bne	11508 <__assert_fail@plt+0x34c>
   115f8:	add	r3, r7, r8, lsl #2
   115fc:	str	r3, [sp, #80]	; 0x50
   11600:	ldr	r3, [pc, #2768]	; 120d8 <__assert_fail@plt+0xf1c>
   11604:	cmn	r6, #1
   11608:	moveq	r6, #0
   1160c:	ldr	r3, [r3]
   11610:	cmp	r8, r3
   11614:	add	r3, r7, r3, lsl #2
   11618:	ldreq	r2, [pc, #2748]	; 120dc <__assert_fail@plt+0xf20>
   1161c:	str	r3, [sp, #92]	; 0x5c
   11620:	streq	r2, [r7, r8, lsl #2]
   11624:	ldreq	r2, [sp, #80]	; 0x50
   11628:	add	r3, sp, #216	; 0xd8
   1162c:	addeq	r2, r2, #4
   11630:	streq	r2, [sp, #80]	; 0x50
   11634:	cmp	r6, #0
   11638:	movne	r2, #42	; 0x2a
   1163c:	moveq	r2, #32
   11640:	str	r2, [sp, #108]	; 0x6c
   11644:	str	r3, [sp, #104]	; 0x68
   11648:	ldr	r3, [sp, #80]	; 0x50
   1164c:	ldr	r2, [sp, #92]	; 0x5c
   11650:	cmp	r3, r2
   11654:	bhi	11690 <__assert_fail@plt+0x4d4>
   11658:	ldr	r3, [pc, #2796]	; 1214c <__assert_fail@plt+0xf90>
   1165c:	ldrb	r3, [r3, #4]
   11660:	cmp	r3, #0
   11664:	beq	122f4 <__assert_fail@plt+0x1138>
   11668:	ldr	r3, [pc, #2672]	; 120e0 <__assert_fail@plt+0xf24>
   1166c:	ldr	r0, [r3]
   11670:	bl	1801c <__assert_fail@plt+0x6e60>
   11674:	cmn	r0, #1
   11678:	bne	122f4 <__assert_fail@plt+0x1138>
   1167c:	bl	11090 <__errno_location@plt>
   11680:	mov	r2, #5
   11684:	ldr	r1, [pc, #2648]	; 120e4 <__assert_fail@plt+0xf28>
   11688:	ldr	r4, [r0]
   1168c:	b	1142c <__assert_fail@plt+0x270>
   11690:	ldr	r3, [sp, #92]	; 0x5c
   11694:	cmp	fp, #0
   11698:	ldr	r4, [r3], #4
   1169c:	str	r3, [sp, #92]	; 0x5c
   116a0:	beq	12158 <__assert_fail@plt+0xf9c>
   116a4:	ldr	r1, [pc, #2608]	; 120dc <__assert_fail@plt+0xf20>
   116a8:	mov	r0, r4
   116ac:	bl	10f04 <strcmp@plt>
   116b0:	subs	r3, r0, #0
   116b4:	str	r3, [sp, #100]	; 0x64
   116b8:	bne	11764 <__assert_fail@plt+0x5a8>
   116bc:	ldr	r3, [pc, #2696]	; 1214c <__assert_fail@plt+0xf90>
   116c0:	mov	r2, #1
   116c4:	ldr	r1, [pc, #2584]	; 120e4 <__assert_fail@plt+0xf28>
   116c8:	strb	r2, [r3, #4]
   116cc:	mov	r2, #5
   116d0:	bl	10f7c <dcgettext@plt>
   116d4:	ldr	r3, [pc, #2564]	; 120e0 <__assert_fail@plt+0xf24>
   116d8:	ldr	r8, [r3]
   116dc:	str	r0, [sp, #64]	; 0x40
   116e0:	add	r2, sp, #288	; 0x120
   116e4:	mov	r3, #0
   116e8:	str	r3, [r2, #-160]!	; 0xffffff60
   116ec:	str	r3, [sp, #124]	; 0x7c
   116f0:	ldr	r3, [sp, #68]	; 0x44
   116f4:	str	r2, [sp, #96]	; 0x60
   116f8:	str	r3, [sp, #84]	; 0x54
   116fc:	mov	r2, #1
   11700:	str	r3, [sp, #56]	; 0x38
   11704:	mov	r3, #0
   11708:	strd	r2, [sp, #72]	; 0x48
   1170c:	mov	r2, #0
   11710:	mov	r3, #0
   11714:	strd	r2, [sp, #32]
   11718:	strd	r2, [sp, #40]	; 0x28
   1171c:	strd	r2, [sp, #24]
   11720:	ldrd	r2, [sp, #72]	; 0x48
   11724:	orrs	r3, r2, r3
   11728:	bne	117bc <__assert_fail@plt+0x600>
   1172c:	mov	r2, #5
   11730:	ldr	r1, [pc, #2480]	; 120e8 <__assert_fail@plt+0xf2c>
   11734:	mov	r0, #0
   11738:	bl	10f7c <dcgettext@plt>
   1173c:	ldr	r2, [sp, #64]	; 0x40
   11740:	mov	r1, #3
   11744:	mov	r4, r0
   11748:	mov	r0, #0
   1174c:	bl	19780 <__assert_fail@plt+0x85c4>
   11750:	mov	r2, r4
   11754:	mov	r1, #0
   11758:	mov	r3, r0
   1175c:	mov	r0, #1
   11760:	bl	11000 <error@plt>
   11764:	ldr	r1, [pc, #2432]	; 120ec <__assert_fail@plt+0xf30>
   11768:	mov	r0, r4
   1176c:	bl	18114 <__assert_fail@plt+0x6f58>
   11770:	subs	r8, r0, #0
   11774:	strne	r4, [sp, #64]	; 0x40
   11778:	bne	116e0 <__assert_fail@plt+0x524>
   1177c:	bl	11090 <__errno_location@plt>
   11780:	mov	r2, r4
   11784:	mov	r1, #3
   11788:	ldr	r5, [r0]
   1178c:	mov	r0, r8
   11790:	bl	19780 <__assert_fail@plt+0x85c4>
   11794:	ldr	r2, [pc, #2388]	; 120f0 <__assert_fail@plt+0xf34>
   11798:	mov	r1, r5
   1179c:	mov	r3, r0
   117a0:	mov	r0, #0
   117a4:	bl	11000 <error@plt>
   117a8:	ldr	r3, [sp, #68]	; 0x44
   117ac:	ldr	r2, [sp, #52]	; 0x34
   117b0:	and	r2, r2, r3
   117b4:	str	r2, [sp, #52]	; 0x34
   117b8:	b	11648 <__assert_fail@plt+0x48c>
   117bc:	mov	r2, r8
   117c0:	ldr	r1, [sp, #96]	; 0x60
   117c4:	add	r0, sp, #124	; 0x7c
   117c8:	bl	1115c <getline@plt>
   117cc:	subs	r4, r0, #0
   117d0:	ble	11b58 <__assert_fail@plt+0x99c>
   117d4:	ldr	r3, [sp, #124]	; 0x7c
   117d8:	ldrb	r2, [r3]
   117dc:	cmp	r2, #35	; 0x23
   117e0:	beq	11b28 <__assert_fail@plt+0x96c>
   117e4:	add	r2, r3, r4
   117e8:	ldrb	r0, [r2, #-1]
   117ec:	cmp	r0, #10
   117f0:	subeq	r4, r4, #1
   117f4:	cmp	r4, #0
   117f8:	movle	r2, r4
   117fc:	subgt	r2, r4, #1
   11800:	ldrb	r0, [r3, r2]
   11804:	cmp	r0, #13
   11808:	subeq	r4, r4, #1
   1180c:	cmp	r4, #0
   11810:	beq	11b28 <__assert_fail@plt+0x96c>
   11814:	mov	r2, #0
   11818:	strb	r2, [r3, r4]
   1181c:	ldr	r6, [sp, #124]	; 0x7c
   11820:	mov	r2, r6
   11824:	sub	sl, r2, r6
   11828:	ldrb	r3, [r2], #1
   1182c:	cmp	r3, #9
   11830:	cmpne	r3, #32
   11834:	moveq	r9, #1
   11838:	movne	r9, #0
   1183c:	beq	11824 <__assert_fail@plt+0x668>
   11840:	cmp	r3, #92	; 0x5c
   11844:	addeq	sl, sl, #1
   11848:	add	r7, r6, sl
   1184c:	mov	r2, #7
   11850:	ldr	r1, [pc, #2272]	; 12138 <__assert_fail@plt+0xf7c>
   11854:	mov	r0, r7
   11858:	streq	fp, [sp, #88]	; 0x58
   1185c:	strne	r9, [sp, #88]	; 0x58
   11860:	bl	11174 <strncmp@plt>
   11864:	cmp	r0, #0
   11868:	bne	11bdc <__assert_fail@plt+0xa20>
   1186c:	add	r5, sl, #7
   11870:	add	r2, r6, r5
   11874:	ldrb	r3, [r6, r5]
   11878:	ldr	r1, [pc, #2232]	; 12138 <__assert_fail@plt+0xf7c>
   1187c:	strb	r0, [r6, r5]
   11880:	mov	r0, r7
   11884:	str	r2, [sp, #116]	; 0x74
   11888:	str	r3, [sp, #112]	; 0x70
   1188c:	bl	10f04 <strcmp@plt>
   11890:	cmp	r0, #0
   11894:	bne	11ac0 <__assert_fail@plt+0x904>
   11898:	ldr	r3, [sp, #112]	; 0x70
   1189c:	ldr	r2, [sp, #116]	; 0x74
   118a0:	cmp	r3, #40	; 0x28
   118a4:	moveq	r0, r3
   118a8:	ldr	r7, [pc, #2204]	; 1214c <__assert_fail@plt+0xf90>
   118ac:	strb	r0, [r2]
   118b0:	mov	r1, #0
   118b4:	mov	r0, #512	; 0x200
   118b8:	addne	r5, sl, #8
   118bc:	cmp	r3, #45	; 0x2d
   118c0:	strd	r0, [r7, #8]
   118c4:	bne	11920 <__assert_fail@plt+0x764>
   118c8:	mov	r2, #0
   118cc:	str	r2, [sp]
   118d0:	add	r3, sp, #136	; 0x88
   118d4:	add	r1, sp, #132	; 0x84
   118d8:	add	r0, r6, r5
   118dc:	bl	1a4c4 <__assert_fail@plt+0x9308>
   118e0:	cmp	r0, #0
   118e4:	bne	11ac0 <__assert_fail@plt+0x904>
   118e8:	ldrd	r0, [sp, #136]	; 0x88
   118ec:	orrs	r3, r0, r1
   118f0:	beq	11ac0 <__assert_fail@plt+0x904>
   118f4:	ldrd	r2, [r7, #8]
   118f8:	cmp	r1, r3
   118fc:	cmpeq	r0, r2
   11900:	bhi	11ac0 <__assert_fail@plt+0x904>
   11904:	and	r2, r0, #7
   11908:	mov	r3, #0
   1190c:	orrs	r3, r2, r3
   11910:	bne	11ac0 <__assert_fail@plt+0x904>
   11914:	ldr	r5, [sp, #132]	; 0x84
   11918:	strd	r0, [r7, #8]
   1191c:	sub	r5, r5, r6
   11920:	ldr	r2, [pc, #2084]	; 1214c <__assert_fail@plt+0xf90>
   11924:	ldr	r3, [r2, #8]
   11928:	ldr	r1, [r2, #12]
   1192c:	lsr	r3, r3, #2
   11930:	orr	r3, r3, r1, lsl #30
   11934:	str	r3, [r2]
   11938:	ldrb	r3, [r6, r5]
   1193c:	cmp	r3, #32
   11940:	addeq	r5, r5, #1
   11944:	ldrb	r3, [r6, r5]
   11948:	cmp	r3, #40	; 0x28
   1194c:	bne	11ac0 <__assert_fail@plt+0x904>
   11950:	add	r5, r5, #1
   11954:	subs	r4, r4, r5
   11958:	beq	11ac0 <__assert_fail@plt+0x904>
   1195c:	add	r6, r6, r5
   11960:	sub	r4, r4, #1
   11964:	cmp	r4, #0
   11968:	beq	11978 <__assert_fail@plt+0x7bc>
   1196c:	ldrb	r3, [r6, r4]
   11970:	cmp	r3, #41	; 0x29
   11974:	bne	11960 <__assert_fail@plt+0x7a4>
   11978:	ldrb	r3, [r6, r4]
   1197c:	add	r5, r6, r4
   11980:	cmp	r3, #41	; 0x29
   11984:	bne	11ac0 <__assert_fail@plt+0x904>
   11988:	ldr	r3, [sp, #88]	; 0x58
   1198c:	cmp	r3, #0
   11990:	bne	11aac <__assert_fail@plt+0x8f0>
   11994:	add	r4, r4, #1
   11998:	mov	r3, #0
   1199c:	strb	r3, [r5]
   119a0:	ldrb	r3, [r6, r4]
   119a4:	cmp	r3, #9
   119a8:	cmpne	r3, #32
   119ac:	beq	11bd4 <__assert_fail@plt+0xa18>
   119b0:	cmp	r3, #61	; 0x3d
   119b4:	bne	11ac0 <__assert_fail@plt+0x904>
   119b8:	add	r4, r4, #1
   119bc:	add	r4, r6, r4
   119c0:	mov	r7, r4
   119c4:	ldrb	r3, [r4], #1
   119c8:	cmp	r3, #9
   119cc:	cmpne	r3, #32
   119d0:	beq	119c0 <__assert_fail@plt+0x804>
   119d4:	mov	r0, r7
   119d8:	bl	124c8 <__assert_fail@plt+0x130c>
   119dc:	cmp	r0, #0
   119e0:	beq	11ac0 <__assert_fail@plt+0x904>
   119e4:	ldr	r3, [sp, #100]	; 0x64
   119e8:	cmp	r3, #0
   119ec:	bne	11a04 <__assert_fail@plt+0x848>
   119f0:	ldr	r1, [pc, #1764]	; 120dc <__assert_fail@plt+0xf20>
   119f4:	mov	r0, r6
   119f8:	bl	10f04 <strcmp@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11ac0 <__assert_fail@plt+0x904>
   11a04:	ldr	r3, [pc, #1856]	; 1214c <__assert_fail@plt+0xf90>
   11a08:	ldrb	r3, [r3, #16]
   11a0c:	cmp	r3, #0
   11a10:	bne	11a28 <__assert_fail@plt+0x86c>
   11a14:	mov	r1, #10
   11a18:	mov	r0, r6
   11a1c:	bl	11084 <strchr@plt>
   11a20:	adds	r9, r0, #0
   11a24:	movne	r9, #1
   11a28:	add	r2, sp, #136	; 0x88
   11a2c:	ldr	r1, [sp, #104]	; 0x68
   11a30:	mov	r0, r6
   11a34:	bl	125ac <__assert_fail@plt+0x13f0>
   11a38:	mov	r5, r9
   11a3c:	subs	r3, r0, #0
   11a40:	str	r3, [sp, #56]	; 0x38
   11a44:	ldr	r3, [pc, #1792]	; 1214c <__assert_fail@plt+0xf90>
   11a48:	bne	11d14 <__assert_fail@plt+0xb58>
   11a4c:	ldrd	r0, [sp, #32]
   11a50:	ldrb	r3, [r3, #16]
   11a54:	adds	r0, r0, #1
   11a58:	adc	r1, r1, #0
   11a5c:	cmp	r3, #0
   11a60:	strd	r0, [sp, #32]
   11a64:	bne	11aa4 <__assert_fail@plt+0x8e8>
   11a68:	cmp	r9, #0
   11a6c:	beq	11a78 <__assert_fail@plt+0x8bc>
   11a70:	mov	r0, #92	; 0x5c
   11a74:	bl	111b0 <putchar_unlocked@plt>
   11a78:	mov	r1, r5
   11a7c:	mov	r0, r6
   11a80:	bl	12520 <__assert_fail@plt+0x1364>
   11a84:	ldr	r1, [pc, #1640]	; 120f4 <__assert_fail@plt+0xf38>
   11a88:	mov	r2, #5
   11a8c:	mov	r0, #0
   11a90:	bl	10f7c <dcgettext@plt>
   11a94:	ldr	r1, [pc, #1628]	; 120f8 <__assert_fail@plt+0xf3c>
   11a98:	mov	r2, r0
   11a9c:	mov	r0, #1
   11aa0:	bl	110c0 <__printf_chk@plt>
   11aa4:	str	fp, [sp, #56]	; 0x38
   11aa8:	b	11b28 <__assert_fail@plt+0x96c>
   11aac:	mov	r1, r4
   11ab0:	mov	r0, r6
   11ab4:	bl	12430 <__assert_fail@plt+0x1274>
   11ab8:	cmp	r0, #0
   11abc:	bne	11994 <__assert_fail@plt+0x7d8>
   11ac0:	ldrd	r2, [sp, #24]
   11ac4:	adds	r2, r2, #1
   11ac8:	adc	r3, r3, #0
   11acc:	strd	r2, [sp, #24]
   11ad0:	ldr	r3, [pc, #1652]	; 1214c <__assert_fail@plt+0xf90>
   11ad4:	ldrb	r3, [r3, #17]
   11ad8:	cmp	r3, #0
   11adc:	beq	11b28 <__assert_fail@plt+0x96c>
   11ae0:	mov	r2, #5
   11ae4:	ldr	r1, [pc, #1552]	; 120fc <__assert_fail@plt+0xf40>
   11ae8:	mov	r0, #0
   11aec:	bl	10f7c <dcgettext@plt>
   11af0:	ldr	r2, [sp, #64]	; 0x40
   11af4:	mov	r1, #3
   11af8:	mov	r4, r0
   11afc:	mov	r0, #0
   11b00:	bl	19780 <__assert_fail@plt+0x85c4>
   11b04:	ldr	r3, [pc, #1580]	; 12138 <__assert_fail@plt+0xf7c>
   11b08:	mov	r1, #0
   11b0c:	str	r3, [sp, #8]
   11b10:	ldrd	r2, [sp, #72]	; 0x48
   11b14:	strd	r2, [sp]
   11b18:	mov	r2, r4
   11b1c:	mov	r3, r0
   11b20:	mov	r0, r1
   11b24:	bl	11000 <error@plt>
   11b28:	mov	r0, r8
   11b2c:	bl	1118c <feof_unlocked@plt>
   11b30:	cmp	r0, #0
   11b34:	bne	11b58 <__assert_fail@plt+0x99c>
   11b38:	mov	r0, r8
   11b3c:	bl	10fe8 <ferror_unlocked@plt>
   11b40:	ldrd	r2, [sp, #72]	; 0x48
   11b44:	adds	r2, r2, #1
   11b48:	adc	r3, r3, #0
   11b4c:	strd	r2, [sp, #72]	; 0x48
   11b50:	cmp	r0, #0
   11b54:	beq	11720 <__assert_fail@plt+0x564>
   11b58:	ldr	r0, [sp, #124]	; 0x7c
   11b5c:	bl	181a8 <__assert_fail@plt+0x6fec>
   11b60:	mov	r0, r8
   11b64:	bl	10fe8 <ferror_unlocked@plt>
   11b68:	ldr	r3, [sp, #100]	; 0x64
   11b6c:	cmp	r0, #0
   11b70:	movne	r4, #0
   11b74:	mvneq	r4, #0
   11b78:	cmp	r3, #0
   11b7c:	mov	r5, r0
   11b80:	mov	r0, r8
   11b84:	bne	11e10 <__assert_fail@plt+0xc54>
   11b88:	bl	11138 <clearerr_unlocked@plt>
   11b8c:	cmp	r4, #0
   11b90:	blt	11e30 <__assert_fail@plt+0xc74>
   11b94:	ldrne	r5, [pc, #1364]	; 120f0 <__assert_fail@plt+0xf34>
   11b98:	bne	11bb4 <__assert_fail@plt+0x9f8>
   11b9c:	mov	r2, #5
   11ba0:	ldr	r1, [pc, #1368]	; 12100 <__assert_fail@plt+0xf44>
   11ba4:	mov	r0, #0
   11ba8:	bl	10f7c <dcgettext@plt>
   11bac:	mov	r4, #0
   11bb0:	mov	r5, r0
   11bb4:	ldr	r2, [sp, #64]	; 0x40
   11bb8:	mov	r1, #3
   11bbc:	mov	r0, #0
   11bc0:	bl	19780 <__assert_fail@plt+0x85c4>
   11bc4:	mov	r2, r5
   11bc8:	mov	r1, r4
   11bcc:	mov	r3, r0
   11bd0:	b	117a0 <__assert_fail@plt+0x5e4>
   11bd4:	add	r4, r4, #1
   11bd8:	b	119a0 <__assert_fail@plt+0x7e4>
   11bdc:	ldr	r1, [pc, #1384]	; 1214c <__assert_fail@plt+0xf90>
   11be0:	ldrb	r0, [r6, sl]
   11be4:	sub	r2, r4, sl
   11be8:	ldr	r3, [r1, #20]
   11bec:	cmp	r0, #92	; 0x5c
   11bf0:	addeq	r3, r3, #1
   11bf4:	cmp	r2, r3
   11bf8:	bcc	11ac0 <__assert_fail@plt+0x904>
   11bfc:	mov	r3, #0
   11c00:	str	r3, [r1]
   11c04:	bl	11054 <__ctype_b_loc@plt>
   11c08:	mov	r1, r9
   11c0c:	mov	r2, r7
   11c10:	ldr	ip, [r0]
   11c14:	sub	r0, r2, r7
   11c18:	ldrb	r3, [r2], #1
   11c1c:	lsl	r3, r3, #1
   11c20:	ldrh	r3, [ip, r3]
   11c24:	tst	r3, #4096	; 0x1000
   11c28:	bne	11cf4 <__assert_fail@plt+0xb38>
   11c2c:	ldr	r2, [pc, #1304]	; 1214c <__assert_fail@plt+0xf90>
   11c30:	cmp	r1, #0
   11c34:	strne	r0, [r2]
   11c38:	ldr	r3, [r2]
   11c3c:	sub	r1, r3, #2
   11c40:	cmp	r1, #126	; 0x7e
   11c44:	bhi	11ac0 <__assert_fail@plt+0x904>
   11c48:	tst	r3, #1
   11c4c:	bne	11ac0 <__assert_fail@plt+0x904>
   11c50:	add	sl, sl, r3
   11c54:	lsl	r0, r3, #2
   11c58:	ldrb	r3, [r6, sl]
   11c5c:	mov	r1, #0
   11c60:	cmp	r3, #32
   11c64:	cmpne	r3, #9
   11c68:	strd	r0, [r2, #8]
   11c6c:	movne	r3, #1
   11c70:	moveq	r3, #0
   11c74:	bne	11ac0 <__assert_fail@plt+0x904>
   11c78:	strb	r3, [r6, sl]
   11c7c:	mov	r0, r7
   11c80:	bl	124c8 <__assert_fail@plt+0x130c>
   11c84:	cmp	r0, #0
   11c88:	beq	11ac0 <__assert_fail@plt+0x904>
   11c8c:	add	r1, sl, #1
   11c90:	sub	r3, r4, r1
   11c94:	cmp	r3, #1
   11c98:	beq	11cb4 <__assert_fail@plt+0xaf8>
   11c9c:	ldrb	r3, [r6, r1]
   11ca0:	cmp	r3, #32
   11ca4:	cmpne	r3, #42	; 0x2a
   11ca8:	movne	r3, #1
   11cac:	moveq	r3, #0
   11cb0:	beq	11cfc <__assert_fail@plt+0xb40>
   11cb4:	ldr	r3, [pc, #1140]	; 12130 <__assert_fail@plt+0xf74>
   11cb8:	ldr	r2, [r3, #4]
   11cbc:	cmp	r2, #0
   11cc0:	movne	r2, #1
   11cc4:	strne	r2, [r3, #4]
   11cc8:	beq	11ac0 <__assert_fail@plt+0x904>
   11ccc:	ldr	r3, [sp, #88]	; 0x58
   11cd0:	add	r6, r6, r1
   11cd4:	cmp	r3, #0
   11cd8:	beq	119e4 <__assert_fail@plt+0x828>
   11cdc:	sub	r1, r4, r1
   11ce0:	mov	r0, r6
   11ce4:	bl	12430 <__assert_fail@plt+0x1274>
   11ce8:	adds	r0, r0, #0
   11cec:	movne	r0, #1
   11cf0:	b	119dc <__assert_fail@plt+0x820>
   11cf4:	mov	r1, fp
   11cf8:	b	11c14 <__assert_fail@plt+0xa58>
   11cfc:	ldr	r2, [pc, #1068]	; 12130 <__assert_fail@plt+0xf74>
   11d00:	ldr	r0, [r2, #4]
   11d04:	cmp	r0, #1
   11d08:	strne	r3, [r2, #4]
   11d0c:	addne	r1, sl, #2
   11d10:	b	11ccc <__assert_fail@plt+0xb10>
   11d14:	ldrb	r1, [r3, #5]
   11d18:	cmp	r1, #0
   11d1c:	beq	11d2c <__assert_fail@plt+0xb70>
   11d20:	ldrb	r1, [sp, #136]	; 0x88
   11d24:	cmp	r1, #0
   11d28:	bne	11aa4 <__assert_fail@plt+0x8e8>
   11d2c:	ldr	sl, [r3]
   11d30:	mov	r2, r7
   11d34:	mov	r4, #0
   11d38:	lsr	sl, sl, #1
   11d3c:	cmp	sl, r4
   11d40:	bne	11da0 <__assert_fail@plt+0xbe4>
   11d44:	ldr	r3, [sp, #56]	; 0x38
   11d48:	str	r3, [sp, #84]	; 0x54
   11d4c:	ldr	r3, [pc, #1016]	; 1214c <__assert_fail@plt+0xf90>
   11d50:	ldrb	r2, [r3, #16]
   11d54:	cmp	r2, #0
   11d58:	bne	11aa4 <__assert_fail@plt+0x8e8>
   11d5c:	cmp	sl, r4
   11d60:	bne	122c4 <__assert_fail@plt+0x1108>
   11d64:	ldrb	r3, [r3, #18]
   11d68:	cmp	r3, #0
   11d6c:	bne	11aa4 <__assert_fail@plt+0x8e8>
   11d70:	cmp	r9, #0
   11d74:	bne	122cc <__assert_fail@plt+0x1110>
   11d78:	mov	r1, r9
   11d7c:	mov	r0, r6
   11d80:	bl	12520 <__assert_fail@plt+0x1364>
   11d84:	ldr	r3, [pc, #960]	; 1214c <__assert_fail@plt+0xf90>
   11d88:	ldrb	r0, [r3, #18]
   11d8c:	cmp	r0, #0
   11d90:	bne	11aa4 <__assert_fail@plt+0x8e8>
   11d94:	mov	r2, #5
   11d98:	ldr	r1, [pc, #868]	; 12104 <__assert_fail@plt+0xf48>
   11d9c:	b	11a90 <__assert_fail@plt+0x8d4>
   11da0:	str	r2, [sp, #88]	; 0x58
   11da4:	bl	11030 <__ctype_tolower_loc@plt>
   11da8:	ldr	r3, [sp, #104]	; 0x68
   11dac:	ldr	r2, [pc, #852]	; 12108 <__assert_fail@plt+0xf4c>
   11db0:	ldrb	ip, [r7, r4, lsl #1]
   11db4:	ldrb	r3, [r3, r4]
   11db8:	ldr	r1, [r0]
   11dbc:	add	r0, r2, r3, lsr #4
   11dc0:	ldrb	r0, [r0, #280]	; 0x118
   11dc4:	ldr	ip, [r1, ip, lsl #2]
   11dc8:	cmp	ip, r0
   11dcc:	bne	11dfc <__assert_fail@plt+0xc40>
   11dd0:	ldr	r2, [sp, #88]	; 0x58
   11dd4:	and	r3, r3, #15
   11dd8:	add	r2, r2, #2
   11ddc:	ldrb	r0, [r2, #-1]
   11de0:	ldr	r1, [r1, r0, lsl #2]
   11de4:	ldr	r0, [pc, #796]	; 12108 <__assert_fail@plt+0xf4c>
   11de8:	add	r3, r0, r3
   11dec:	ldrb	r3, [r3, #280]	; 0x118
   11df0:	cmp	r1, r3
   11df4:	addeq	r4, r4, #1
   11df8:	beq	11d3c <__assert_fail@plt+0xb80>
   11dfc:	ldrd	r2, [sp, #40]	; 0x28
   11e00:	adds	r2, r2, #1
   11e04:	adc	r3, r3, #0
   11e08:	strd	r2, [sp, #40]	; 0x28
   11e0c:	b	11d4c <__assert_fail@plt+0xb90>
   11e10:	bl	1801c <__assert_fail@plt+0x6e60>
   11e14:	cmp	r0, #0
   11e18:	beq	11b8c <__assert_fail@plt+0x9d0>
   11e1c:	cmp	r5, #0
   11e20:	bne	11b9c <__assert_fail@plt+0x9e0>
   11e24:	bl	11090 <__errno_location@plt>
   11e28:	ldr	r4, [r0]
   11e2c:	b	11b8c <__assert_fail@plt+0x9d0>
   11e30:	ldr	r3, [sp, #56]	; 0x38
   11e34:	cmp	r3, #0
   11e38:	bne	11ec8 <__assert_fail@plt+0xd0c>
   11e3c:	mov	r0, r3
   11e40:	mov	r2, #5
   11e44:	ldr	r1, [pc, #704]	; 1210c <__assert_fail@plt+0xf50>
   11e48:	bl	10f7c <dcgettext@plt>
   11e4c:	ldr	r2, [sp, #64]	; 0x40
   11e50:	mov	r1, #3
   11e54:	mov	r4, r0
   11e58:	ldr	r0, [sp, #56]	; 0x38
   11e5c:	bl	19780 <__assert_fail@plt+0x85c4>
   11e60:	ldr	r1, [sp, #56]	; 0x38
   11e64:	mov	r2, r4
   11e68:	mov	r3, r0
   11e6c:	mov	r0, r1
   11e70:	bl	11000 <error@plt>
   11e74:	ldr	r3, [sp, #56]	; 0x38
   11e78:	ldr	r2, [sp, #84]	; 0x54
   11e7c:	and	r3, r3, r2
   11e80:	ands	r3, r3, #255	; 0xff
   11e84:	beq	11ec0 <__assert_fail@plt+0xd04>
   11e88:	ldrd	r2, [sp, #32]
   11e8c:	ldrd	r0, [sp, #40]	; 0x28
   11e90:	orr	r3, r3, r1
   11e94:	orr	r2, r2, r0
   11e98:	orrs	r3, r2, r3
   11e9c:	movne	r3, #0
   11ea0:	bne	11ec0 <__assert_fail@plt+0xd04>
   11ea4:	ldr	r3, [pc, #672]	; 1214c <__assert_fail@plt+0xf90>
   11ea8:	ldr	r2, [sp, #24]
   11eac:	ldr	r1, [sp, #28]
   11eb0:	ldrb	r3, [r3, #19]
   11eb4:	orrs	r2, r2, r1
   11eb8:	eor	r3, r3, #1
   11ebc:	orreq	r3, r3, #1
   11ec0:	and	r3, r3, #1
   11ec4:	b	117ac <__assert_fail@plt+0x5f0>
   11ec8:	ldr	r3, [pc, #636]	; 1214c <__assert_fail@plt+0xf90>
   11ecc:	ldrb	r3, [r3, #16]
   11ed0:	cmp	r3, #0
   11ed4:	bne	11e74 <__assert_fail@plt+0xcb8>
   11ed8:	ldrd	r2, [sp, #24]
   11edc:	orrs	r3, r2, r3
   11ee0:	beq	11f44 <__assert_fail@plt+0xd88>
   11ee4:	ldrd	r0, [sp, #24]
   11ee8:	mov	r3, #0
   11eec:	mvn	r2, #0
   11ef0:	cmp	r1, r3
   11ef4:	cmpeq	r0, r2
   11ef8:	ldrls	r3, [sp, #24]
   11efc:	bls	11f14 <__assert_fail@plt+0xd58>
   11f00:	ldr	r2, [pc, #520]	; 12110 <__assert_fail@plt+0xf54>
   11f04:	mov	r3, #0
   11f08:	bl	1b104 <__assert_fail@plt+0x9f48>
   11f0c:	add	r3, r2, #999424	; 0xf4000
   11f10:	add	r3, r3, #576	; 0x240
   11f14:	mov	r2, #5
   11f18:	str	r2, [sp]
   11f1c:	ldr	r1, [pc, #496]	; 12114 <__assert_fail@plt+0xf58>
   11f20:	ldr	r2, [pc, #496]	; 12118 <__assert_fail@plt+0xf5c>
   11f24:	mov	r0, #0
   11f28:	bl	111a4 <dcngettext@plt>
   11f2c:	ldrd	r2, [sp, #24]
   11f30:	mov	r1, #0
   11f34:	strd	r2, [sp]
   11f38:	mov	r2, r0
   11f3c:	mov	r0, r1
   11f40:	bl	11000 <error@plt>
   11f44:	ldrd	r2, [sp, #32]
   11f48:	orrs	r3, r2, r3
   11f4c:	beq	11fb0 <__assert_fail@plt+0xdf4>
   11f50:	ldrd	r0, [sp, #32]
   11f54:	mov	r3, #0
   11f58:	mvn	r2, #0
   11f5c:	cmp	r1, r3
   11f60:	cmpeq	r0, r2
   11f64:	ldrls	r3, [sp, #32]
   11f68:	bls	11f80 <__assert_fail@plt+0xdc4>
   11f6c:	ldr	r2, [pc, #412]	; 12110 <__assert_fail@plt+0xf54>
   11f70:	mov	r3, #0
   11f74:	bl	1b104 <__assert_fail@plt+0x9f48>
   11f78:	add	r3, r2, #999424	; 0xf4000
   11f7c:	add	r3, r3, #576	; 0x240
   11f80:	mov	r2, #5
   11f84:	str	r2, [sp]
   11f88:	ldr	r1, [pc, #396]	; 1211c <__assert_fail@plt+0xf60>
   11f8c:	ldr	r2, [pc, #396]	; 12120 <__assert_fail@plt+0xf64>
   11f90:	mov	r0, #0
   11f94:	bl	111a4 <dcngettext@plt>
   11f98:	ldrd	r2, [sp, #32]
   11f9c:	mov	r1, #0
   11fa0:	strd	r2, [sp]
   11fa4:	mov	r2, r0
   11fa8:	mov	r0, r1
   11fac:	bl	11000 <error@plt>
   11fb0:	ldrd	r2, [sp, #40]	; 0x28
   11fb4:	orrs	r3, r2, r3
   11fb8:	beq	1201c <__assert_fail@plt+0xe60>
   11fbc:	ldrd	r0, [sp, #40]	; 0x28
   11fc0:	mov	r3, #0
   11fc4:	mvn	r2, #0
   11fc8:	cmp	r1, r3
   11fcc:	cmpeq	r0, r2
   11fd0:	ldrls	r3, [sp, #40]	; 0x28
   11fd4:	bls	11fec <__assert_fail@plt+0xe30>
   11fd8:	ldr	r2, [pc, #304]	; 12110 <__assert_fail@plt+0xf54>
   11fdc:	mov	r3, #0
   11fe0:	bl	1b104 <__assert_fail@plt+0x9f48>
   11fe4:	add	r3, r2, #999424	; 0xf4000
   11fe8:	add	r3, r3, #576	; 0x240
   11fec:	mov	r2, #5
   11ff0:	str	r2, [sp]
   11ff4:	ldr	r1, [pc, #296]	; 12124 <__assert_fail@plt+0xf68>
   11ff8:	ldr	r2, [pc, #296]	; 12128 <__assert_fail@plt+0xf6c>
   11ffc:	mov	r0, #0
   12000:	bl	111a4 <dcngettext@plt>
   12004:	ldrd	r2, [sp, #40]	; 0x28
   12008:	mov	r1, #0
   1200c:	strd	r2, [sp]
   12010:	mov	r2, r0
   12014:	mov	r0, r1
   12018:	bl	11000 <error@plt>
   1201c:	ldr	r3, [pc, #296]	; 1214c <__assert_fail@plt+0xf90>
   12020:	ldrb	r4, [r3, #5]
   12024:	ldr	r3, [sp, #84]	; 0x54
   12028:	eor	r4, r4, #1
   1202c:	orr	r4, r3, r4
   12030:	ands	r4, r4, #255	; 0xff
   12034:	bne	11e74 <__assert_fail@plt+0xcb8>
   12038:	mov	r2, #5
   1203c:	ldr	r1, [pc, #232]	; 1212c <__assert_fail@plt+0xf70>
   12040:	mov	r0, r4
   12044:	bl	10f7c <dcgettext@plt>
   12048:	ldr	r2, [sp, #64]	; 0x40
   1204c:	mov	r1, #3
   12050:	mov	r5, r0
   12054:	mov	r0, r4
   12058:	bl	19780 <__assert_fail@plt+0x85c4>
   1205c:	mov	r2, r5
   12060:	mov	r1, r4
   12064:	mov	r3, r0
   12068:	b	11e6c <__assert_fail@plt+0xcb0>
   1206c:	ldrdeq	fp, [r1], -sp
   12070:	andeq	fp, r1, r9, lsr #23
   12074:	andeq	fp, r1, r6, lsl #22
   12078:	strdeq	r7, [r1], -ip
   1207c:	andeq	r0, r0, r3, lsl #2
   12080:	andeq	fp, r1, ip, lsr r3
   12084:	andeq	fp, r1, ip, lsl ip
   12088:	ldrdeq	fp, [r1], -r0
   1208c:	andeq	fp, r1, r4, lsr #24
   12090:	andeq	r0, r0, r1, lsl #2
   12094:	andeq	sp, r2, r8, lsl #3
   12098:	andeq	fp, r1, r1, asr #23
   1209c:	andeq	fp, r1, r3, ror #23
   120a0:	andeq	fp, r1, r1, lsl #24
   120a4:	andeq	fp, r1, lr, lsl #24
   120a8:	andeq	sp, r2, r0, lsr #2
   120ac:	andeq	fp, r1, r2, lsl #22
   120b0:	andeq	fp, r1, r5, lsr r4
   120b4:	andeq	fp, r1, ip, asr #24
   120b8:	andeq	fp, r1, pc, ror #24
   120bc:	andeq	fp, r1, fp, lsr #25
   120c0:	andeq	fp, r1, r4, ror #25
   120c4:	andeq	fp, r1, sp, lsr #26
   120c8:	andeq	fp, r1, r5, ror sp
   120cc:			; <UNDEFINED> instruction: 0x0001bdb5
   120d0:	strdeq	fp, [r1], -r3
   120d4:	andeq	fp, r1, r2, lsr lr
   120d8:	andeq	sp, r2, r0, ror r1
   120dc:			; <UNDEFINED> instruction: 0x0001c1bc
   120e0:	andeq	sp, r2, r0, lsl #3
   120e4:	andeq	fp, r1, r2, ror lr
   120e8:	andeq	fp, r1, r1, lsl #29
   120ec:	andeq	fp, r1, r0, lsr r4
   120f0:	andeq	fp, r1, r0, ror #23
   120f4:	andeq	fp, r1, sp, asr #29
   120f8:	andeq	ip, r1, r2, ror #9
   120fc:	muleq	r1, sp, lr
   12100:	andeq	fp, r1, fp, ror #29
   12104:	andeq	fp, r1, r8, ror #29
   12108:	andeq	fp, r1, r4, lsl #6
   1210c:	strdeq	fp, [r1], -sl
   12110:	andeq	r4, pc, r0, asr #4
   12114:	andeq	fp, r1, r6, asr pc
   12118:	andeq	fp, r1, r9, lsr #30
   1211c:	andeq	fp, r1, lr, lsr #31
   12120:	andeq	fp, r1, r1, lsl #31
   12124:	andeq	ip, r1, r9
   12128:	ldrdeq	fp, [r1], -sl
   1212c:	andeq	ip, r1, r7, lsr r0
   12130:	andeq	sp, r2, r4, lsl r1
   12134:	andeq	sp, r2, r4, lsl #3
   12138:	andeq	fp, r1, sl, lsr #9
   1213c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12140:	andeq	ip, r1, r0, asr r0
   12144:	andeq	ip, r1, r6, asr r0
   12148:	andeq	ip, r1, r9, asr r0
   1214c:	muleq	r2, r0, r1
   12150:	andeq	ip, r1, lr, asr r0
   12154:	andeq	fp, r1, r1, ror #29
   12158:	add	r2, sp, #216	; 0xd8
   1215c:	add	r1, sp, #144	; 0x90
   12160:	mov	r0, r4
   12164:	bl	125ac <__assert_fail@plt+0x13f0>
   12168:	cmp	r0, #0
   1216c:	beq	12290 <__assert_fail@plt+0x10d4>
   12170:	ldr	r3, [pc, #-72]	; 12130 <__assert_fail@plt+0xf74>
   12174:	ldrb	r6, [r3]
   12178:	cmp	r6, #10
   1217c:	movne	r5, fp
   12180:	bne	121c0 <__assert_fail@plt+0x1004>
   12184:	mov	r1, #92	; 0x5c
   12188:	mov	r0, r4
   1218c:	bl	11084 <strchr@plt>
   12190:	cmp	r0, #0
   12194:	bne	12298 <__assert_fail@plt+0x10dc>
   12198:	mov	r1, r6
   1219c:	mov	r0, r4
   121a0:	bl	11084 <strchr@plt>
   121a4:	cmp	r0, #0
   121a8:	bne	12298 <__assert_fail@plt+0x10dc>
   121ac:	mov	r1, #13
   121b0:	mov	r0, r4
   121b4:	bl	11084 <strchr@plt>
   121b8:	adds	r5, r0, #0
   121bc:	movne	r5, #1
   121c0:	cmp	r5, #0
   121c4:	beq	121d0 <__assert_fail@plt+0x1014>
   121c8:	mov	r0, #92	; 0x5c
   121cc:	bl	111b0 <putchar_unlocked@plt>
   121d0:	ldr	r3, [sp, #60]	; 0x3c
   121d4:	cmp	r3, #0
   121d8:	beq	12238 <__assert_fail@plt+0x107c>
   121dc:	ldr	r7, [pc, #-176]	; 12134 <__assert_fail@plt+0xf78>
   121e0:	ldr	r0, [pc, #-176]	; 12138 <__assert_fail@plt+0xf7c>
   121e4:	ldr	r1, [r7]
   121e8:	bl	10eec <fputs_unlocked@plt>
   121ec:	ldr	r3, [pc, #-168]	; 1214c <__assert_fail@plt+0xf90>
   121f0:	ldr	r0, [pc, #-188]	; 1213c <__assert_fail@plt+0xf80>
   121f4:	mov	r1, #0
   121f8:	ldrd	r2, [r3, #8]
   121fc:	cmp	r3, r1
   12200:	cmpeq	r2, r0
   12204:	bhi	12214 <__assert_fail@plt+0x1058>
   12208:	ldr	r1, [pc, #-208]	; 12140 <__assert_fail@plt+0xf84>
   1220c:	mov	r0, #1
   12210:	bl	110c0 <__printf_chk@plt>
   12214:	ldr	r1, [r7]
   12218:	ldr	r0, [pc, #-220]	; 12144 <__assert_fail@plt+0xf88>
   1221c:	bl	10eec <fputs_unlocked@plt>
   12220:	mov	r1, r5
   12224:	mov	r0, r4
   12228:	bl	12520 <__assert_fail@plt+0x1364>
   1222c:	ldr	r1, [r7]
   12230:	ldr	r0, [pc, #-240]	; 12148 <__assert_fail@plt+0xf8c>
   12234:	bl	10eec <fputs_unlocked@plt>
   12238:	ldr	r8, [pc, #-244]	; 1214c <__assert_fail@plt+0xf90>
   1223c:	ldr	r9, [pc, #-244]	; 12150 <__assert_fail@plt+0xf94>
   12240:	add	r7, sp, #144	; 0x90
   12244:	mov	sl, #1
   12248:	ldr	r2, [r8]
   1224c:	add	r3, sp, #144	; 0x90
   12250:	sub	r3, r7, r3
   12254:	cmp	r3, r2, lsr #1
   12258:	bcc	122a0 <__assert_fail@plt+0x10e4>
   1225c:	ldr	r3, [sp, #60]	; 0x3c
   12260:	cmp	r3, #0
   12264:	bne	12284 <__assert_fail@plt+0x10c8>
   12268:	mov	r0, #32
   1226c:	bl	111b0 <putchar_unlocked@plt>
   12270:	ldr	r0, [sp, #108]	; 0x6c
   12274:	bl	111b0 <putchar_unlocked@plt>
   12278:	mov	r1, r5
   1227c:	mov	r0, r4
   12280:	bl	12520 <__assert_fail@plt+0x1364>
   12284:	mov	r0, r6
   12288:	bl	111b0 <putchar_unlocked@plt>
   1228c:	ldr	r0, [sp, #52]	; 0x34
   12290:	str	r0, [sp, #52]	; 0x34
   12294:	b	11648 <__assert_fail@plt+0x48c>
   12298:	mov	r5, #1
   1229c:	b	121c0 <__assert_fail@plt+0x1004>
   122a0:	ldrb	r2, [r7], #1
   122a4:	mov	r1, r9
   122a8:	mov	r0, sl
   122ac:	bl	110c0 <__printf_chk@plt>
   122b0:	b	12248 <__assert_fail@plt+0x108c>
   122b4:	mov	r1, r9
   122b8:	mov	r0, r6
   122bc:	bl	12520 <__assert_fail@plt+0x1364>
   122c0:	b	122e8 <__assert_fail@plt+0x112c>
   122c4:	cmp	r9, #0
   122c8:	beq	122b4 <__assert_fail@plt+0x10f8>
   122cc:	mov	r0, #92	; 0x5c
   122d0:	bl	111b0 <putchar_unlocked@plt>
   122d4:	mov	r1, r5
   122d8:	mov	r0, r6
   122dc:	bl	12520 <__assert_fail@plt+0x1364>
   122e0:	cmp	sl, r4
   122e4:	beq	11d84 <__assert_fail@plt+0xbc8>
   122e8:	mov	r2, #5
   122ec:	ldr	r1, [pc, #-416]	; 12154 <__assert_fail@plt+0xf98>
   122f0:	b	11a8c <__assert_fail@plt+0x8d0>
   122f4:	ldr	r3, [sp, #52]	; 0x34
   122f8:	eor	r0, r3, #1
   122fc:	uxtb	r0, r0
   12300:	add	sp, sp, #292	; 0x124
   12304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12308:	mov	fp, #0
   1230c:	mov	lr, #0
   12310:	pop	{r1}		; (ldr r1, [sp], #4)
   12314:	mov	r2, sp
   12318:	push	{r2}		; (str r2, [sp, #-4]!)
   1231c:	push	{r0}		; (str r0, [sp, #-4]!)
   12320:	ldr	ip, [pc, #16]	; 12338 <__assert_fail@plt+0x117c>
   12324:	push	{ip}		; (str ip, [sp, #-4]!)
   12328:	ldr	r0, [pc, #12]	; 1233c <__assert_fail@plt+0x1180>
   1232c:	ldr	r3, [pc, #12]	; 12340 <__assert_fail@plt+0x1184>
   12330:	bl	11018 <__libc_start_main@plt>
   12334:	bl	11180 <abort@plt>
   12338:	ldrdeq	fp, [r1], -r8
   1233c:	andeq	r1, r1, r8, asr #3
   12340:	andeq	fp, r1, r8, ror r2
   12344:	ldr	r3, [pc, #20]	; 12360 <__assert_fail@plt+0x11a4>
   12348:	ldr	r2, [pc, #20]	; 12364 <__assert_fail@plt+0x11a8>
   1234c:	add	r3, pc, r3
   12350:	ldr	r2, [r3, r2]
   12354:	cmp	r2, #0
   12358:	bxeq	lr
   1235c:	b	1103c <__gmon_start__@plt>
   12360:	andeq	sl, r1, ip, lsr #25
   12364:	andeq	r0, r0, r8, lsl #2
   12368:	ldr	r3, [pc, #28]	; 1238c <__assert_fail@plt+0x11d0>
   1236c:	ldr	r0, [pc, #28]	; 12390 <__assert_fail@plt+0x11d4>
   12370:	sub	r3, r3, r0
   12374:	cmp	r3, #6
   12378:	bxls	lr
   1237c:	ldr	r3, [pc, #16]	; 12394 <__assert_fail@plt+0x11d8>
   12380:	cmp	r3, #0
   12384:	bxeq	lr
   12388:	bx	r3
   1238c:	andeq	sp, r2, fp, ror #2
   12390:	andeq	sp, r2, r8, ror #2
   12394:	andeq	r0, r0, r0
   12398:	ldr	r1, [pc, #36]	; 123c4 <__assert_fail@plt+0x1208>
   1239c:	ldr	r0, [pc, #36]	; 123c8 <__assert_fail@plt+0x120c>
   123a0:	sub	r1, r1, r0
   123a4:	asr	r1, r1, #2
   123a8:	add	r1, r1, r1, lsr #31
   123ac:	asrs	r1, r1, #1
   123b0:	bxeq	lr
   123b4:	ldr	r3, [pc, #16]	; 123cc <__assert_fail@plt+0x1210>
   123b8:	cmp	r3, #0
   123bc:	bxeq	lr
   123c0:	bx	r3
   123c4:	andeq	sp, r2, r8, ror #2
   123c8:	andeq	sp, r2, r8, ror #2
   123cc:	andeq	r0, r0, r0
   123d0:	push	{r4, lr}
   123d4:	ldr	r4, [pc, #24]	; 123f4 <__assert_fail@plt+0x1238>
   123d8:	ldrb	r3, [r4]
   123dc:	cmp	r3, #0
   123e0:	popne	{r4, pc}
   123e4:	bl	12368 <__assert_fail@plt+0x11ac>
   123e8:	mov	r3, #1
   123ec:	strb	r3, [r4]
   123f0:	pop	{r4, pc}
   123f4:	andeq	sp, r2, ip, lsl #3
   123f8:	ldr	r0, [pc, #40]	; 12428 <__assert_fail@plt+0x126c>
   123fc:	ldr	r3, [r0]
   12400:	cmp	r3, #0
   12404:	bne	1240c <__assert_fail@plt+0x1250>
   12408:	b	12398 <__assert_fail@plt+0x11dc>
   1240c:	ldr	r3, [pc, #24]	; 1242c <__assert_fail@plt+0x1270>
   12410:	cmp	r3, #0
   12414:	beq	12408 <__assert_fail@plt+0x124c>
   12418:	push	{r4, lr}
   1241c:	blx	r3
   12420:	pop	{r4, lr}
   12424:	b	12398 <__assert_fail@plt+0x11dc>
   12428:	andeq	ip, r2, r4, lsl pc
   1242c:	andeq	r0, r0, r0
   12430:	push	{r4, r5, lr}
   12434:	mov	r3, r0
   12438:	mov	r2, #0
   1243c:	sub	lr, r1, #1
   12440:	mov	r4, #10
   12444:	mov	r5, #13
   12448:	cmp	r2, r1
   1244c:	bcc	12464 <__assert_fail@plt+0x12a8>
   12450:	add	r1, r0, r1
   12454:	cmp	r3, r1
   12458:	movcc	r2, #0
   1245c:	strbcc	r2, [r3]
   12460:	pop	{r4, r5, pc}
   12464:	ldrb	ip, [r0, r2]
   12468:	cmp	ip, #0
   1246c:	beq	124c0 <__assert_fail@plt+0x1304>
   12470:	cmp	ip, #92	; 0x5c
   12474:	bne	124a0 <__assert_fail@plt+0x12e4>
   12478:	cmp	r2, lr
   1247c:	beq	124c0 <__assert_fail@plt+0x1304>
   12480:	add	r2, r2, #1
   12484:	ldrb	ip, [r0, r2]
   12488:	cmp	ip, #110	; 0x6e
   1248c:	beq	124a8 <__assert_fail@plt+0x12ec>
   12490:	cmp	ip, #114	; 0x72
   12494:	beq	124b8 <__assert_fail@plt+0x12fc>
   12498:	cmp	ip, #92	; 0x5c
   1249c:	bne	124c0 <__assert_fail@plt+0x1304>
   124a0:	strb	ip, [r3]
   124a4:	b	124ac <__assert_fail@plt+0x12f0>
   124a8:	strb	r4, [r3]
   124ac:	add	r2, r2, #1
   124b0:	add	r3, r3, #1
   124b4:	b	12448 <__assert_fail@plt+0x128c>
   124b8:	strb	r5, [r3]
   124bc:	b	124ac <__assert_fail@plt+0x12f0>
   124c0:	mov	r0, #0
   124c4:	pop	{r4, r5, pc}
   124c8:	ldr	r3, [pc, #76]	; 1251c <__assert_fail@plt+0x1360>
   124cc:	push	{r4, r5, r6, lr}
   124d0:	mov	r4, r0
   124d4:	ldr	r5, [r3]
   124d8:	add	r5, r0, r5
   124dc:	cmp	r4, r5
   124e0:	mov	r6, r4
   124e4:	bne	124f8 <__assert_fail@plt+0x133c>
   124e8:	ldrb	r0, [r4]
   124ec:	clz	r0, r0
   124f0:	lsr	r0, r0, #5
   124f4:	pop	{r4, r5, r6, pc}
   124f8:	bl	11054 <__ctype_b_loc@plt>
   124fc:	ldrb	r3, [r6]
   12500:	add	r4, r4, #1
   12504:	lsl	r3, r3, #1
   12508:	ldr	r2, [r0]
   1250c:	ldrh	r0, [r2, r3]
   12510:	ands	r0, r0, #4096	; 0x1000
   12514:	bne	124dc <__assert_fail@plt+0x1320>
   12518:	pop	{r4, r5, r6, pc}
   1251c:	muleq	r2, r0, r1
   12520:	cmp	r1, #0
   12524:	beq	1254c <__assert_fail@plt+0x1390>
   12528:	push	{r4, r5, r6, r7, r8, lr}
   1252c:	sub	r4, r0, #1
   12530:	ldr	r5, [pc, #100]	; 1259c <__assert_fail@plt+0x13e0>
   12534:	ldr	r6, [pc, #100]	; 125a0 <__assert_fail@plt+0x13e4>
   12538:	ldr	r7, [pc, #100]	; 125a4 <__assert_fail@plt+0x13e8>
   1253c:	ldrb	r0, [r4, #1]!
   12540:	cmp	r0, #0
   12544:	bne	12558 <__assert_fail@plt+0x139c>
   12548:	pop	{r4, r5, r6, r7, r8, pc}
   1254c:	ldr	r3, [pc, #72]	; 1259c <__assert_fail@plt+0x13e0>
   12550:	ldr	r1, [r3]
   12554:	b	10eec <fputs_unlocked@plt>
   12558:	cmp	r0, #13
   1255c:	beq	12580 <__assert_fail@plt+0x13c4>
   12560:	cmp	r0, #92	; 0x5c
   12564:	beq	12590 <__assert_fail@plt+0x13d4>
   12568:	cmp	r0, #10
   1256c:	ldreq	r1, [r5]
   12570:	ldreq	r0, [pc, #48]	; 125a8 <__assert_fail@plt+0x13ec>
   12574:	beq	12588 <__assert_fail@plt+0x13cc>
   12578:	bl	111b0 <putchar_unlocked@plt>
   1257c:	b	1253c <__assert_fail@plt+0x1380>
   12580:	ldr	r1, [r5]
   12584:	mov	r0, r6
   12588:	bl	10eec <fputs_unlocked@plt>
   1258c:	b	1253c <__assert_fail@plt+0x1380>
   12590:	ldr	r1, [r5]
   12594:	mov	r0, r7
   12598:	b	12588 <__assert_fail@plt+0x13cc>
   1259c:	andeq	sp, r2, r4, lsl #3
   125a0:	andeq	fp, r1, pc, lsr #8
   125a4:	andeq	fp, r1, r2, lsr r4
   125a8:	andeq	fp, r1, ip, lsr #8
   125ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   125b0:	mov	r9, r1
   125b4:	ldr	r1, [pc, #276]	; 126d0 <__assert_fail@plt+0x1514>
   125b8:	mov	r7, r2
   125bc:	mov	r6, r0
   125c0:	bl	10f04 <strcmp@plt>
   125c4:	mov	r3, #0
   125c8:	strb	r3, [r7]
   125cc:	ldr	r4, [pc, #256]	; 126d4 <__assert_fail@plt+0x1518>
   125d0:	subs	r8, r0, #0
   125d4:	bne	12644 <__assert_fail@plt+0x1488>
   125d8:	mov	r3, #1
   125dc:	strb	r3, [r4, #4]
   125e0:	ldr	r3, [pc, #240]	; 126d8 <__assert_fail@plt+0x151c>
   125e4:	ldr	r5, [r3]
   125e8:	mov	r1, #2
   125ec:	mov	r0, r5
   125f0:	bl	17fec <__assert_fail@plt+0x6e30>
   125f4:	ldr	r3, [r4, #8]
   125f8:	ldr	r2, [r4, #12]
   125fc:	mov	r1, r9
   12600:	lsr	r3, r3, #3
   12604:	orr	r2, r3, r2, lsl #29
   12608:	mov	r0, r5
   1260c:	bl	17dfc <__assert_fail@plt+0x6c40>
   12610:	subs	r4, r0, #0
   12614:	beq	12620 <__assert_fail@plt+0x1464>
   12618:	bl	11090 <__errno_location@plt>
   1261c:	ldr	r4, [r0]
   12620:	cmp	r8, #0
   12624:	mov	r0, r5
   12628:	bne	126b0 <__assert_fail@plt+0x14f4>
   1262c:	bl	11138 <clearerr_unlocked@plt>
   12630:	cmp	r4, #0
   12634:	moveq	r4, #1
   12638:	bne	12684 <__assert_fail@plt+0x14c8>
   1263c:	mov	r0, r4
   12640:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12644:	ldr	r1, [pc, #144]	; 126dc <__assert_fail@plt+0x1520>
   12648:	mov	r0, r6
   1264c:	bl	18114 <__assert_fail@plt+0x6f58>
   12650:	subs	r5, r0, #0
   12654:	bne	125e8 <__assert_fail@plt+0x142c>
   12658:	ldrb	r4, [r4, #5]
   1265c:	cmp	r4, #0
   12660:	beq	1267c <__assert_fail@plt+0x14c0>
   12664:	bl	11090 <__errno_location@plt>
   12668:	ldr	r3, [r0]
   1266c:	cmp	r3, #2
   12670:	moveq	r3, #1
   12674:	strbeq	r3, [r7]
   12678:	beq	1263c <__assert_fail@plt+0x1480>
   1267c:	bl	11090 <__errno_location@plt>
   12680:	ldr	r4, [r0]
   12684:	mov	r2, r6
   12688:	mov	r1, #3
   1268c:	mov	r0, #0
   12690:	bl	19780 <__assert_fail@plt+0x85c4>
   12694:	mov	r1, r4
   12698:	ldr	r2, [pc, #64]	; 126e0 <__assert_fail@plt+0x1524>
   1269c:	mov	r4, #0
   126a0:	mov	r3, r0
   126a4:	mov	r0, #0
   126a8:	bl	11000 <error@plt>
   126ac:	b	1263c <__assert_fail@plt+0x1480>
   126b0:	bl	1801c <__assert_fail@plt+0x6e60>
   126b4:	cmp	r0, #0
   126b8:	beq	12630 <__assert_fail@plt+0x1474>
   126bc:	cmp	r4, #0
   126c0:	bne	12684 <__assert_fail@plt+0x14c8>
   126c4:	bl	11090 <__errno_location@plt>
   126c8:	ldr	r4, [r0]
   126cc:	b	12630 <__assert_fail@plt+0x1474>
   126d0:			; <UNDEFINED> instruction: 0x0001c1bc
   126d4:	muleq	r2, r0, r1
   126d8:	andeq	sp, r2, r0, lsl #3
   126dc:	andeq	fp, r1, r0, lsr r4
   126e0:	andeq	fp, r1, r0, ror #23
   126e4:	subs	r4, r0, #0
   126e8:	push	{r7, lr}
   126ec:	sub	sp, sp, #56	; 0x38
   126f0:	ldr	r5, [pc, #736]	; 129d8 <__assert_fail@plt+0x181c>
   126f4:	beq	1272c <__assert_fail@plt+0x1570>
   126f8:	ldr	r3, [pc, #732]	; 129dc <__assert_fail@plt+0x1820>
   126fc:	mov	r2, #5
   12700:	ldr	r1, [pc, #728]	; 129e0 <__assert_fail@plt+0x1824>
   12704:	mov	r0, #0
   12708:	ldr	r6, [r3]
   1270c:	bl	10f7c <dcgettext@plt>
   12710:	ldr	r3, [r5]
   12714:	mov	r1, #1
   12718:	mov	r2, r0
   1271c:	mov	r0, r6
   12720:	bl	110e4 <__fprintf_chk@plt>
   12724:	mov	r0, r4
   12728:	bl	11060 <exit@plt>
   1272c:	mov	r2, #5
   12730:	ldr	r1, [pc, #684]	; 129e4 <__assert_fail@plt+0x1828>
   12734:	bl	10f7c <dcgettext@plt>
   12738:	ldr	r2, [r5]
   1273c:	ldr	r5, [pc, #676]	; 129e8 <__assert_fail@plt+0x182c>
   12740:	ldr	r8, [pc, #676]	; 129ec <__assert_fail@plt+0x1830>
   12744:	mov	r6, r4
   12748:	mov	r1, r0
   1274c:	mov	r0, #1
   12750:	bl	110c0 <__printf_chk@plt>
   12754:	mov	r2, #5
   12758:	ldr	r1, [pc, #656]	; 129f0 <__assert_fail@plt+0x1834>
   1275c:	mov	r0, r4
   12760:	bl	10f7c <dcgettext@plt>
   12764:	mov	r3, #512	; 0x200
   12768:	ldr	r2, [pc, #644]	; 129f4 <__assert_fail@plt+0x1838>
   1276c:	mov	r1, r0
   12770:	mov	r0, #1
   12774:	bl	110c0 <__printf_chk@plt>
   12778:	mov	r2, #5
   1277c:	ldr	r1, [pc, #628]	; 129f8 <__assert_fail@plt+0x183c>
   12780:	mov	r0, r4
   12784:	bl	10f7c <dcgettext@plt>
   12788:	ldr	r1, [r5]
   1278c:	bl	10eec <fputs_unlocked@plt>
   12790:	mov	r2, #5
   12794:	ldr	r1, [pc, #608]	; 129fc <__assert_fail@plt+0x1840>
   12798:	mov	r0, r4
   1279c:	bl	10f7c <dcgettext@plt>
   127a0:	ldr	r1, [r5]
   127a4:	bl	10eec <fputs_unlocked@plt>
   127a8:	mov	r2, #5
   127ac:	ldr	r1, [pc, #588]	; 12a00 <__assert_fail@plt+0x1844>
   127b0:	mov	r0, r4
   127b4:	bl	10f7c <dcgettext@plt>
   127b8:	ldr	r1, [r5]
   127bc:	bl	10eec <fputs_unlocked@plt>
   127c0:	mov	r2, #5
   127c4:	ldr	r1, [pc, #568]	; 12a04 <__assert_fail@plt+0x1848>
   127c8:	mov	r0, r4
   127cc:	bl	10f7c <dcgettext@plt>
   127d0:	ldr	r1, [r5]
   127d4:	bl	10eec <fputs_unlocked@plt>
   127d8:	mov	r2, #5
   127dc:	ldr	r1, [pc, #548]	; 12a08 <__assert_fail@plt+0x184c>
   127e0:	mov	r0, r4
   127e4:	bl	10f7c <dcgettext@plt>
   127e8:	ldr	r1, [r5]
   127ec:	bl	10eec <fputs_unlocked@plt>
   127f0:	mov	r2, #5
   127f4:	ldr	r1, [pc, #528]	; 12a0c <__assert_fail@plt+0x1850>
   127f8:	mov	r0, r4
   127fc:	bl	10f7c <dcgettext@plt>
   12800:	ldr	r1, [r5]
   12804:	bl	10eec <fputs_unlocked@plt>
   12808:	mov	r2, #5
   1280c:	ldr	r1, [pc, #508]	; 12a10 <__assert_fail@plt+0x1854>
   12810:	mov	r0, r4
   12814:	bl	10f7c <dcgettext@plt>
   12818:	ldr	r1, [r5]
   1281c:	bl	10eec <fputs_unlocked@plt>
   12820:	mov	r2, #5
   12824:	ldr	r1, [pc, #488]	; 12a14 <__assert_fail@plt+0x1858>
   12828:	mov	r0, r4
   1282c:	bl	10f7c <dcgettext@plt>
   12830:	ldr	r1, [r5]
   12834:	bl	10eec <fputs_unlocked@plt>
   12838:	mov	r2, #5
   1283c:	ldr	r1, [pc, #468]	; 12a18 <__assert_fail@plt+0x185c>
   12840:	mov	r0, r4
   12844:	bl	10f7c <dcgettext@plt>
   12848:	ldr	r1, [r5]
   1284c:	bl	10eec <fputs_unlocked@plt>
   12850:	mov	r2, #5
   12854:	ldr	r1, [pc, #448]	; 12a1c <__assert_fail@plt+0x1860>
   12858:	mov	r0, r4
   1285c:	bl	10f7c <dcgettext@plt>
   12860:	ldr	r1, [r5]
   12864:	bl	10eec <fputs_unlocked@plt>
   12868:	mov	r2, #5
   1286c:	ldr	r1, [pc, #428]	; 12a20 <__assert_fail@plt+0x1864>
   12870:	mov	r0, r4
   12874:	bl	10f7c <dcgettext@plt>
   12878:	ldr	r1, [r5]
   1287c:	bl	10eec <fputs_unlocked@plt>
   12880:	mov	r2, #5
   12884:	ldr	r1, [pc, #408]	; 12a24 <__assert_fail@plt+0x1868>
   12888:	mov	r0, r4
   1288c:	bl	10f7c <dcgettext@plt>
   12890:	ldr	r2, [pc, #400]	; 12a28 <__assert_fail@plt+0x186c>
   12894:	mov	r1, r0
   12898:	mov	r0, #1
   1289c:	bl	110c0 <__printf_chk@plt>
   128a0:	mov	r2, #5
   128a4:	ldr	r1, [pc, #384]	; 12a2c <__assert_fail@plt+0x1870>
   128a8:	mov	r0, r4
   128ac:	bl	10f7c <dcgettext@plt>
   128b0:	ldr	r1, [r5]
   128b4:	bl	10eec <fputs_unlocked@plt>
   128b8:	ldr	lr, [pc, #368]	; 12a30 <__assert_fail@plt+0x1874>
   128bc:	mov	ip, sp
   128c0:	ldm	lr!, {r0, r1, r2, r3}
   128c4:	stmia	ip!, {r0, r1, r2, r3}
   128c8:	ldm	lr!, {r0, r1, r2, r3}
   128cc:	stmia	ip!, {r0, r1, r2, r3}
   128d0:	ldm	lr!, {r0, r1, r2, r3}
   128d4:	stmia	ip!, {r0, r1, r2, r3}
   128d8:	ldm	lr, {r0, r1}
   128dc:	stm	ip, {r0, r1}
   128e0:	ldr	r1, [sp, r6]
   128e4:	add	r7, sp, r6
   128e8:	cmp	r1, #0
   128ec:	bne	12990 <__assert_fail@plt+0x17d4>
   128f0:	ldr	r6, [r7, #4]
   128f4:	ldr	r7, [pc, #240]	; 129ec <__assert_fail@plt+0x1830>
   128f8:	cmp	r6, #0
   128fc:	mov	r2, #5
   12900:	ldr	r1, [pc, #300]	; 12a34 <__assert_fail@plt+0x1878>
   12904:	mov	r0, #0
   12908:	moveq	r6, r7
   1290c:	bl	10f7c <dcgettext@plt>
   12910:	ldr	r3, [pc, #288]	; 12a38 <__assert_fail@plt+0x187c>
   12914:	ldr	r2, [pc, #288]	; 12a3c <__assert_fail@plt+0x1880>
   12918:	mov	r1, r0
   1291c:	mov	r0, #1
   12920:	bl	110c0 <__printf_chk@plt>
   12924:	mov	r1, #0
   12928:	mov	r0, #5
   1292c:	bl	11114 <setlocale@plt>
   12930:	cmp	r0, #0
   12934:	bne	129a8 <__assert_fail@plt+0x17ec>
   12938:	mov	r2, #5
   1293c:	ldr	r1, [pc, #252]	; 12a40 <__assert_fail@plt+0x1884>
   12940:	mov	r0, #0
   12944:	bl	10f7c <dcgettext@plt>
   12948:	ldr	r3, [pc, #156]	; 129ec <__assert_fail@plt+0x1830>
   1294c:	ldr	r2, [pc, #228]	; 12a38 <__assert_fail@plt+0x187c>
   12950:	mov	r1, r0
   12954:	mov	r0, #1
   12958:	bl	110c0 <__printf_chk@plt>
   1295c:	mov	r2, #5
   12960:	ldr	r1, [pc, #220]	; 12a44 <__assert_fail@plt+0x1888>
   12964:	mov	r0, #0
   12968:	bl	10f7c <dcgettext@plt>
   1296c:	ldr	r2, [pc, #212]	; 12a48 <__assert_fail@plt+0x188c>
   12970:	cmp	r6, r7
   12974:	ldr	r3, [pc, #208]	; 12a4c <__assert_fail@plt+0x1890>
   12978:	moveq	r3, r2
   1297c:	mov	r2, r6
   12980:	mov	r1, r0
   12984:	mov	r0, #1
   12988:	bl	110c0 <__printf_chk@plt>
   1298c:	b	12724 <__assert_fail@plt+0x1568>
   12990:	mov	r0, r8
   12994:	bl	10f04 <strcmp@plt>
   12998:	add	r6, r6, #8
   1299c:	cmp	r0, #0
   129a0:	bne	128e0 <__assert_fail@plt+0x1724>
   129a4:	b	128f0 <__assert_fail@plt+0x1734>
   129a8:	mov	r2, #3
   129ac:	ldr	r1, [pc, #156]	; 12a50 <__assert_fail@plt+0x1894>
   129b0:	bl	11174 <strncmp@plt>
   129b4:	cmp	r0, #0
   129b8:	beq	12938 <__assert_fail@plt+0x177c>
   129bc:	mov	r2, #5
   129c0:	ldr	r1, [pc, #140]	; 12a54 <__assert_fail@plt+0x1898>
   129c4:	mov	r0, #0
   129c8:	bl	10f7c <dcgettext@plt>
   129cc:	ldr	r1, [r5]
   129d0:	bl	10eec <fputs_unlocked@plt>
   129d4:	b	12938 <__assert_fail@plt+0x177c>
   129d8:			; <UNDEFINED> instruction: 0x0002d1b0
   129dc:	andeq	sp, r2, r8, ror r1
   129e0:	andeq	fp, r1, fp, lsr r4
   129e4:	andeq	fp, r1, r2, ror #8
   129e8:	andeq	sp, r2, r4, lsl #3
   129ec:	andeq	fp, r1, r5, lsr r4
   129f0:	andeq	fp, r1, r3, lsl #9
   129f4:	andeq	fp, r1, sl, lsr #9
   129f8:			; <UNDEFINED> instruction: 0x0001b4b2
   129fc:	andeq	fp, r1, sl, ror #9
   12a00:	andeq	fp, r1, r5, lsr r5
   12a04:	andeq	fp, r1, r2, ror #10
   12a08:	andeq	fp, r1, r8, lsr #11
   12a0c:	andeq	fp, r1, pc, lsr r6
   12a10:	andeq	fp, r1, r4, ror r6
   12a14:	andeq	fp, r1, r9, lsr #13
   12a18:	andeq	fp, r1, r7, lsr #14
   12a1c:	ldrdeq	fp, [r1], -lr
   12a20:	andeq	fp, r1, fp, lsl #18
   12a24:	andeq	fp, r1, r1, asr #18
   12a28:	andeq	fp, r1, sp, ror #18
   12a2c:	andeq	fp, r1, r6, ror r9
   12a30:	andeq	fp, r1, r4, lsl #6
   12a34:	andeq	fp, r1, r3, asr #21
   12a38:	ldrdeq	fp, [r1], -sl
   12a3c:	andeq	fp, r1, r2, lsl #22
   12a40:	andeq	fp, r1, fp, asr fp
   12a44:	andeq	fp, r1, r6, ror fp
   12a48:	andeq	ip, r1, pc, ror r0
   12a4c:	ldrdeq	fp, [r1], -sp
   12a50:	andeq	fp, r1, r0, lsl fp
   12a54:	andeq	fp, r1, r4, lsl fp
   12a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a5c:	sub	sp, sp, #396	; 0x18c
   12a60:	mov	lr, r0
   12a64:	mov	r4, r1
   12a68:	mov	r3, #0
   12a6c:	add	ip, sp, #264	; 0x108
   12a70:	add	r1, r4, r3
   12a74:	mov	r2, ip
   12a78:	ldr	r0, [r1]
   12a7c:	ldr	r1, [r1, #4]
   12a80:	stmia	r2!, {r0, r1}
   12a84:	add	r2, sp, #264	; 0x108
   12a88:	ldrd	r0, [r2]
   12a8c:	add	r2, sp, #136	; 0x88
   12a90:	strd	r0, [r2, r3]
   12a94:	add	r3, r3, #8
   12a98:	cmp	r3, #128	; 0x80
   12a9c:	bne	12a70 <__assert_fail@plt+0x18b4>
   12aa0:	mov	r3, #0
   12aa4:	ldrd	r0, [lr, r3]
   12aa8:	strd	r0, [ip, r3]
   12aac:	add	r3, r3, #8
   12ab0:	cmp	r3, #64	; 0x40
   12ab4:	bne	12aa4 <__assert_fail@plt+0x18e8>
   12ab8:	add	r3, sp, #296	; 0x128
   12abc:	ldrd	r0, [lr, #64]	; 0x40
   12ac0:	ldrd	r6, [r3]
   12ac4:	ldrd	r2, [sp, #136]	; 0x88
   12ac8:	add	r9, pc, #896	; 0x380
   12acc:	ldrd	r8, [r9]
   12ad0:	strd	r2, [sp]
   12ad4:	add	r3, sp, #264	; 0x108
   12ad8:	ldrd	r4, [r3]
   12adc:	ldrd	r2, [sp]
   12ae0:	adds	r4, r4, r6
   12ae4:	adc	r5, r5, r7
   12ae8:	adds	r2, r2, r4
   12aec:	adc	r3, r3, r5
   12af0:	mov	r4, r2
   12af4:	mov	r5, r3
   12af8:	add	r3, pc, #856	; 0x358
   12afc:	ldrd	r2, [r3]
   12b00:	eor	r3, r3, r5
   12b04:	eor	r3, r3, r1
   12b08:	eor	r2, r2, r4
   12b0c:	adds	r8, r8, r3
   12b10:	eor	r2, r2, r0
   12b14:	adc	r9, r9, r2
   12b18:	eor	r6, r6, r8
   12b1c:	eor	r7, r7, r9
   12b20:	lsr	ip, r6, #24
   12b24:	mov	r1, r2
   12b28:	orr	r2, ip, r7, lsl #8
   12b2c:	lsr	ip, r7, #24
   12b30:	mov	r0, r3
   12b34:	orr	r3, ip, r6, lsl #8
   12b38:	ldrd	r6, [sp, #144]	; 0x90
   12b3c:	adds	r6, r6, r4
   12b40:	adc	r7, r7, r5
   12b44:	adds	r6, r6, r2
   12b48:	adc	r7, r7, r3
   12b4c:	mov	r4, r6
   12b50:	mov	r5, r7
   12b54:	eor	r4, r4, r0
   12b58:	eor	r5, r5, r1
   12b5c:	lsr	ip, r4, #16
   12b60:	lsr	r1, r5, #16
   12b64:	orr	ip, ip, r5, lsl #16
   12b68:	orr	r1, r1, r4, lsl #16
   12b6c:	str	ip, [sp, #8]
   12b70:	str	r1, [sp, #12]
   12b74:	ldrd	r0, [sp, #8]
   12b78:	ldrd	r4, [lr, #72]	; 0x48
   12b7c:	strd	r6, [sp, #64]	; 0x40
   12b80:	adds	r0, r0, r8
   12b84:	adc	r1, r1, r9
   12b88:	add	r7, pc, #720	; 0x2d0
   12b8c:	ldrd	r6, [r7]
   12b90:	strd	r0, [sp, #72]	; 0x48
   12b94:	eor	r0, r0, r2
   12b98:	eor	r1, r1, r3
   12b9c:	mov	r3, r1
   12ba0:	lsl	r2, r0, #1
   12ba4:	orr	r3, r2, r3, lsr #31
   12ba8:	str	r3, [sp, #16]
   12bac:	add	r3, sp, #304	; 0x130
   12bb0:	lsl	r1, r1, #1
   12bb4:	ldrd	sl, [r3]
   12bb8:	add	r3, sp, #272	; 0x110
   12bbc:	orr	r1, r1, r0, lsr #31
   12bc0:	str	r1, [sp, #20]
   12bc4:	ldrd	r0, [r3]
   12bc8:	ldrd	r2, [sp, #152]	; 0x98
   12bcc:	adds	r0, r0, sl
   12bd0:	adc	r1, r1, fp
   12bd4:	adds	r2, r2, r0
   12bd8:	adc	r3, r3, r1
   12bdc:	mov	r0, r2
   12be0:	mov	r1, r3
   12be4:	add	r3, pc, #636	; 0x27c
   12be8:	ldrd	r2, [r3]
   12bec:	eor	r3, r3, r1
   12bf0:	eor	r3, r3, r5
   12bf4:	eor	r2, r2, r0
   12bf8:	adds	r6, r6, r3
   12bfc:	eor	r2, r2, r4
   12c00:	adc	r7, r7, r2
   12c04:	eor	sl, sl, r6
   12c08:	ldrd	r4, [sp, #160]	; 0xa0
   12c0c:	eor	fp, fp, r7
   12c10:	lsr	ip, sl, #24
   12c14:	mov	r9, r2
   12c18:	adds	r4, r4, r0
   12c1c:	orr	r2, ip, fp, lsl #8
   12c20:	lsr	ip, fp, #24
   12c24:	mov	r8, r3
   12c28:	adc	r5, r5, r1
   12c2c:	orr	r3, ip, sl, lsl #8
   12c30:	adds	r4, r4, r2
   12c34:	adc	r5, r5, r3
   12c38:	mov	r0, r4
   12c3c:	mov	r1, r5
   12c40:	eor	r0, r0, r8
   12c44:	eor	r1, r1, r9
   12c48:	mov	r9, r1
   12c4c:	lsr	r1, r0, #16
   12c50:	orr	r1, r1, r9, lsl #16
   12c54:	str	r1, [sp, #24]
   12c58:	lsr	r1, r9, #16
   12c5c:	orr	r1, r1, r0, lsl #16
   12c60:	str	r1, [sp, #28]
   12c64:	ldrd	r0, [sp, #24]
   12c68:	strd	r4, [sp, #80]	; 0x50
   12c6c:	ldrd	r4, [lr, #80]	; 0x50
   12c70:	adds	r0, r0, r6
   12c74:	adc	r1, r1, r7
   12c78:	add	r7, pc, #496	; 0x1f0
   12c7c:	ldrd	r6, [r7]
   12c80:	strd	r0, [sp, #88]	; 0x58
   12c84:	eor	r0, r0, r2
   12c88:	eor	r1, r1, r3
   12c8c:	mov	r3, r1
   12c90:	lsl	r2, r0, #1
   12c94:	orr	r3, r2, r3, lsr #31
   12c98:	str	r3, [sp, #32]
   12c9c:	add	r3, sp, #312	; 0x138
   12ca0:	lsl	r1, r1, #1
   12ca4:	ldrd	sl, [r3]
   12ca8:	add	r3, sp, #280	; 0x118
   12cac:	orr	r1, r1, r0, lsr #31
   12cb0:	str	r1, [sp, #36]	; 0x24
   12cb4:	ldrd	r0, [r3]
   12cb8:	ldrd	r2, [sp, #168]	; 0xa8
   12cbc:	adds	r0, r0, sl
   12cc0:	adc	r1, r1, fp
   12cc4:	adds	r2, r2, r0
   12cc8:	adc	r3, r3, r1
   12ccc:	mov	r0, r2
   12cd0:	mov	r1, r3
   12cd4:	add	r3, pc, #412	; 0x19c
   12cd8:	ldrd	r2, [r3]
   12cdc:	eor	r3, r3, r1
   12ce0:	eor	r3, r3, r5
   12ce4:	eor	r2, r2, r0
   12ce8:	adds	r6, r6, r3
   12cec:	eor	r2, r2, r4
   12cf0:	adc	r7, r7, r2
   12cf4:	eor	sl, sl, r6
   12cf8:	ldrd	r4, [sp, #176]	; 0xb0
   12cfc:	eor	fp, fp, r7
   12d00:	lsr	ip, sl, #24
   12d04:	mov	r9, r2
   12d08:	adds	r4, r4, r0
   12d0c:	orr	r2, ip, fp, lsl #8
   12d10:	lsr	ip, fp, #24
   12d14:	mov	r8, r3
   12d18:	adc	r5, r5, r1
   12d1c:	orr	r3, ip, sl, lsl #8
   12d20:	adds	r4, r4, r2
   12d24:	adc	r5, r5, r3
   12d28:	mov	r0, r4
   12d2c:	mov	r1, r5
   12d30:	eor	r0, r0, r8
   12d34:	eor	r1, r1, r9
   12d38:	mov	r9, r1
   12d3c:	lsr	r1, r0, #16
   12d40:	orr	r1, r1, r9, lsl #16
   12d44:	strd	r4, [sp, #96]	; 0x60
   12d48:	str	r1, [sp, #40]	; 0x28
   12d4c:	lsr	r1, r9, #16
   12d50:	orr	r1, r1, r0, lsl #16
   12d54:	str	r1, [sp, #44]	; 0x2c
   12d58:	ldrd	r0, [sp, #40]	; 0x28
   12d5c:	ldrd	r4, [lr, #88]	; 0x58
   12d60:	adds	r0, r0, r6
   12d64:	adc	r1, r1, r7
   12d68:	add	r7, pc, #272	; 0x110
   12d6c:	ldrd	r6, [r7]
   12d70:	strd	r0, [sp, #104]	; 0x68
   12d74:	eor	r0, r0, r2
   12d78:	eor	r1, r1, r3
   12d7c:	mov	r3, r1
   12d80:	lsl	r2, r0, #1
   12d84:	orr	r3, r2, r3, lsr #31
   12d88:	str	r3, [sp, #48]	; 0x30
   12d8c:	add	r3, sp, #320	; 0x140
   12d90:	lsl	r1, r1, #1
   12d94:	ldrd	sl, [r3]
   12d98:	add	r3, sp, #288	; 0x120
   12d9c:	orr	r1, r1, r0, lsr #31
   12da0:	str	r1, [sp, #52]	; 0x34
   12da4:	ldrd	r0, [r3]
   12da8:	ldrd	r2, [sp, #184]	; 0xb8
   12dac:	adds	r0, r0, sl
   12db0:	adc	r1, r1, fp
   12db4:	adds	r2, r2, r0
   12db8:	adc	r3, r3, r1
   12dbc:	mov	r0, r2
   12dc0:	mov	r1, r3
   12dc4:	add	r3, pc, #188	; 0xbc
   12dc8:	ldrd	r2, [r3]
   12dcc:	eor	r3, r3, r1
   12dd0:	eor	r3, r3, r5
   12dd4:	eor	r2, r2, r0
   12dd8:	adds	r6, r6, r3
   12ddc:	eor	r2, r2, r4
   12de0:	adc	r7, r7, r2
   12de4:	eor	sl, sl, r6
   12de8:	ldrd	r4, [sp, #192]	; 0xc0
   12dec:	eor	fp, fp, r7
   12df0:	lsr	ip, sl, #24
   12df4:	mov	r9, r2
   12df8:	adds	r4, r4, r0
   12dfc:	orr	r2, ip, fp, lsl #8
   12e00:	lsr	ip, fp, #24
   12e04:	mov	r8, r3
   12e08:	adc	r5, r5, r1
   12e0c:	orr	r3, ip, sl, lsl #8
   12e10:	adds	r4, r4, r2
   12e14:	adc	r5, r5, r3
   12e18:	mov	r0, r4
   12e1c:	mov	r1, r5
   12e20:	eor	r0, r0, r8
   12e24:	eor	r1, r1, r9
   12e28:	mov	r9, r1
   12e2c:	lsr	r1, r0, #16
   12e30:	orr	sl, r1, r9, lsl #16
   12e34:	lsr	r1, r9, #16
   12e38:	adds	r6, r6, sl
   12e3c:	orr	fp, r1, r0, lsl #16
   12e40:	adc	r7, r7, fp
   12e44:	eor	r3, r3, r7
   12e48:	eor	r2, r2, r6
   12e4c:	b	12e90 <__assert_fail@plt+0x1cd4>
   12e50:	vtbl.8	d12, {d12-d13}, d8
   12e54:	bvs	28c7f8 <optarg@@GLIBC_2.4+0x25f670>
   12e58:	sfmge	f0, 3, [r6, #836]!	; 0x344
   12e5c:	tstpl	lr, pc, ror r2
   12e60:	strbhi	sl, [sl], #1851	; 0x73b
   12e64:	bllt	19fe880 <optarg@@GLIBC_2.4+0x19d16f8>
   12e68:	blcs	fadeec <optarg@@GLIBC_2.4+0xf80d64>
   12e6c:	blls	16d0a4 <optarg@@GLIBC_2.4+0x13ff1c>
   12e70:	vcmla.f32	d15, d4, d27[0], #90
   12e74:	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
   12e78:	blx	108242e <optarg@@GLIBC_2.4+0x10552a6>
   12e7c:	svcne	0x0083d9ab
   12e80:	svcpl	0x001d36f1
   12e84:	strbge	pc, [pc, #-1338]	; 12952 <__assert_fail@plt+0x1796>	; <UNPREDICTABLE>
   12e88:	cmnne	lr, #1073741854	; 0x4000001e
   12e8c:	blpl	ff8462f8 <optarg@@GLIBC_2.4+0xff819170>
   12e90:	lsl	r1, r3, #1
   12e94:	orr	r1, r1, r2, lsr #31
   12e98:	lsl	r2, r2, #1
   12e9c:	orr	r3, r2, r3, lsr #31
   12ea0:	str	r1, [sp, #60]	; 0x3c
   12ea4:	str	r3, [sp, #56]	; 0x38
   12ea8:	ldrd	r0, [sp, #200]	; 0xc8
   12eac:	ldrd	r2, [sp, #64]	; 0x40
   12eb0:	strd	r4, [sp, #112]	; 0x70
   12eb4:	ldrd	r4, [sp, #32]
   12eb8:	adds	r0, r0, r2
   12ebc:	adc	r1, r1, r3
   12ec0:	ldrd	r2, [sp, #32]
   12ec4:	adds	r2, r2, r0
   12ec8:	adc	r3, r3, r1
   12ecc:	eor	sl, sl, r2
   12ed0:	eor	fp, fp, r3
   12ed4:	mov	r8, fp
   12ed8:	mov	r9, sl
   12edc:	ldrd	sl, [sp, #104]	; 0x68
   12ee0:	mov	r0, r2
   12ee4:	mov	r1, r3
   12ee8:	adds	sl, sl, r8
   12eec:	adc	fp, fp, r9
   12ef0:	eor	r4, r4, sl
   12ef4:	eor	r5, r5, fp
   12ef8:	lsr	ip, r4, #24
   12efc:	orr	r2, ip, r5, lsl #8
   12f00:	lsr	ip, r5, #24
   12f04:	orr	r3, ip, r4, lsl #8
   12f08:	ldrd	r4, [sp, #208]	; 0xd0
   12f0c:	adds	r4, r4, r0
   12f10:	adc	r5, r5, r1
   12f14:	adds	r4, r4, r2
   12f18:	adc	r5, r5, r3
   12f1c:	mov	r0, r4
   12f20:	mov	r1, r5
   12f24:	eor	r0, r0, r8
   12f28:	eor	r1, r1, r9
   12f2c:	mov	r9, r1
   12f30:	lsr	r1, r0, #16
   12f34:	orr	r1, r1, r9, lsl #16
   12f38:	str	r1, [sp, #32]
   12f3c:	lsr	r1, r9, #16
   12f40:	orr	r1, r1, r0, lsl #16
   12f44:	str	r1, [sp, #36]	; 0x24
   12f48:	ldrd	r0, [sp, #32]
   12f4c:	strd	r4, [sp, #104]	; 0x68
   12f50:	ldrd	r4, [sp, #48]	; 0x30
   12f54:	adds	r0, r0, sl
   12f58:	adc	r1, r1, fp
   12f5c:	strd	r0, [sp, #120]	; 0x78
   12f60:	eor	r0, r0, r2
   12f64:	eor	r1, r1, r3
   12f68:	mov	r3, r1
   12f6c:	lsl	r2, r0, #1
   12f70:	lsl	r1, r1, #1
   12f74:	orr	r1, r1, r0, lsr #31
   12f78:	orr	r3, r2, r3, lsr #31
   12f7c:	str	r1, [sp, #68]	; 0x44
   12f80:	str	r3, [sp, #64]	; 0x40
   12f84:	ldrd	r0, [sp, #216]	; 0xd8
   12f88:	ldrd	r2, [sp, #80]	; 0x50
   12f8c:	adds	r0, r0, r2
   12f90:	adc	r1, r1, r3
   12f94:	ldrd	r2, [sp, #48]	; 0x30
   12f98:	adds	r2, r2, r0
   12f9c:	adc	r3, r3, r1
   12fa0:	mov	r0, r2
   12fa4:	mov	r1, r3
   12fa8:	ldrd	r2, [sp, #8]
   12fac:	eor	r3, r3, r1
   12fb0:	adds	r6, r6, r3
   12fb4:	eor	r2, r2, r0
   12fb8:	adc	r7, r7, r2
   12fbc:	eor	r4, r4, r6
   12fc0:	eor	r5, r5, r7
   12fc4:	lsr	ip, r4, #24
   12fc8:	mov	r9, r2
   12fcc:	orr	r2, ip, r5, lsl #8
   12fd0:	lsr	ip, r5, #24
   12fd4:	mov	r8, r3
   12fd8:	orr	r3, ip, r4, lsl #8
   12fdc:	ldrd	r4, [sp, #224]	; 0xe0
   12fe0:	adds	r4, r4, r0
   12fe4:	adc	r5, r5, r1
   12fe8:	adds	r4, r4, r2
   12fec:	adc	r5, r5, r3
   12ff0:	mov	r0, r4
   12ff4:	mov	r1, r5
   12ff8:	eor	r0, r0, r8
   12ffc:	eor	r1, r1, r9
   13000:	mov	r9, r1
   13004:	lsr	r1, r0, #16
   13008:	orr	r1, r1, r9, lsl #16
   1300c:	strd	r4, [sp, #80]	; 0x50
   13010:	str	r1, [sp, #8]
   13014:	lsr	r1, r9, #16
   13018:	orr	r1, r1, r0, lsl #16
   1301c:	str	r1, [sp, #12]
   13020:	ldrd	r0, [sp, #8]
   13024:	ldrd	r8, [sp, #72]	; 0x48
   13028:	ldrd	r4, [sp, #56]	; 0x38
   1302c:	adds	r0, r0, r6
   13030:	adc	r1, r1, r7
   13034:	strd	r0, [sp, #128]	; 0x80
   13038:	eor	r0, r0, r2
   1303c:	eor	r1, r1, r3
   13040:	mov	r3, r1
   13044:	lsl	r2, r0, #1
   13048:	lsl	r1, r1, #1
   1304c:	orr	fp, r1, r0, lsr #31
   13050:	orr	sl, r2, r3, lsr #31
   13054:	ldrd	r0, [sp, #232]	; 0xe8
   13058:	ldrd	r2, [sp, #96]	; 0x60
   1305c:	adds	r0, r0, r2
   13060:	adc	r1, r1, r3
   13064:	ldrd	r2, [sp, #56]	; 0x38
   13068:	adds	r2, r2, r0
   1306c:	adc	r3, r3, r1
   13070:	mov	r0, r2
   13074:	mov	r1, r3
   13078:	ldrd	r2, [sp, #24]
   1307c:	eor	r3, r3, r1
   13080:	adds	r8, r8, r3
   13084:	eor	r2, r2, r0
   13088:	adc	r9, r9, r2
   1308c:	eor	r4, r4, r8
   13090:	eor	r5, r5, r9
   13094:	lsr	ip, r4, #24
   13098:	mov	r7, r2
   1309c:	orr	r2, ip, r5, lsl #8
   130a0:	lsr	ip, r5, #24
   130a4:	mov	r6, r3
   130a8:	orr	r3, ip, r4, lsl #8
   130ac:	ldrd	r4, [sp, #240]	; 0xf0
   130b0:	adds	r4, r4, r0
   130b4:	adc	r5, r5, r1
   130b8:	adds	r4, r4, r2
   130bc:	adc	r5, r5, r3
   130c0:	mov	r0, r4
   130c4:	mov	r1, r5
   130c8:	eor	r0, r0, r6
   130cc:	eor	r1, r1, r7
   130d0:	mov	r7, r1
   130d4:	lsr	r1, r0, #16
   130d8:	orr	r1, r1, r7, lsl #16
   130dc:	str	r1, [sp, #24]
   130e0:	lsr	r1, r7, #16
   130e4:	orr	r1, r1, r0, lsl #16
   130e8:	str	r1, [sp, #28]
   130ec:	ldrd	r0, [sp, #24]
   130f0:	ldrd	r6, [sp, #88]	; 0x58
   130f4:	strd	r4, [sp, #72]	; 0x48
   130f8:	adds	r0, r0, r8
   130fc:	adc	r1, r1, r9
   13100:	ldrd	r4, [sp, #16]
   13104:	strd	r0, [sp, #56]	; 0x38
   13108:	eor	r0, r0, r2
   1310c:	eor	r1, r1, r3
   13110:	mov	r3, r1
   13114:	lsl	r2, r0, #1
   13118:	lsl	r1, r1, #1
   1311c:	orr	r1, r1, r0, lsr #31
   13120:	orr	r3, r2, r3, lsr #31
   13124:	str	r1, [sp, #52]	; 0x34
   13128:	str	r3, [sp, #48]	; 0x30
   1312c:	ldrd	r0, [sp, #248]	; 0xf8
   13130:	ldrd	r2, [sp, #112]	; 0x70
   13134:	adds	r0, r0, r2
   13138:	adc	r1, r1, r3
   1313c:	ldrd	r2, [sp, #16]
   13140:	adds	r2, r2, r0
   13144:	adc	r3, r3, r1
   13148:	mov	r0, r2
   1314c:	mov	r1, r3
   13150:	ldrd	r2, [sp, #40]	; 0x28
   13154:	eor	r3, r3, r1
   13158:	adds	r6, r6, r3
   1315c:	eor	r2, r2, r0
   13160:	adc	r7, r7, r2
   13164:	eor	r4, r4, r6
   13168:	eor	r5, r5, r7
   1316c:	lsr	ip, r4, #24
   13170:	mov	r9, r2
   13174:	orr	r2, ip, r5, lsl #8
   13178:	lsr	ip, r5, #24
   1317c:	mov	r8, r3
   13180:	orr	r3, ip, r4, lsl #8
   13184:	add	ip, sp, #256	; 0x100
   13188:	ldrd	r4, [ip]
   1318c:	adds	r4, r4, r0
   13190:	adc	r5, r5, r1
   13194:	adds	r4, r4, r2
   13198:	adc	r5, r5, r3
   1319c:	mov	r0, r4
   131a0:	mov	r1, r5
   131a4:	eor	r0, r0, r8
   131a8:	eor	r1, r1, r9
   131ac:	mov	r9, r1
   131b0:	lsr	r1, r0, #16
   131b4:	orr	r1, r1, r9, lsl #16
   131b8:	str	r1, [sp, #16]
   131bc:	lsr	r1, r9, #16
   131c0:	orr	r1, r1, r0, lsl #16
   131c4:	str	r1, [sp, #20]
   131c8:	ldrd	r0, [sp, #16]
   131cc:	strd	r4, [sp, #88]	; 0x58
   131d0:	adds	r0, r0, r6
   131d4:	adc	r1, r1, r7
   131d8:	strd	r0, [sp, #96]	; 0x60
   131dc:	eor	r0, r0, r2
   131e0:	eor	r1, r1, r3
   131e4:	mov	r3, r1
   131e8:	lsl	r2, r0, #1
   131ec:	lsl	r1, r1, #1
   131f0:	orr	r5, r1, r0, lsr #31
   131f4:	orr	r4, r2, r3, lsr #31
   131f8:	ldrd	r0, [sp, #248]	; 0xf8
   131fc:	ldrd	r2, [sp, #104]	; 0x68
   13200:	adds	r0, r0, r2
   13204:	adc	r1, r1, r3
   13208:	ldrd	r2, [sp, #8]
   1320c:	adds	r0, r0, r4
   13210:	ldrd	r8, [sp, #56]	; 0x38
   13214:	adc	r1, r1, r5
   13218:	eor	r3, r3, r1
   1321c:	adds	r8, r8, r3
   13220:	eor	r2, r2, r0
   13224:	adc	r9, r9, r2
   13228:	eor	r4, r4, r8
   1322c:	eor	r5, r5, r9
   13230:	lsr	ip, r4, #24
   13234:	mov	r7, r2
   13238:	orr	r2, ip, r5, lsl #8
   1323c:	lsr	ip, r5, #24
   13240:	mov	r6, r3
   13244:	orr	r3, ip, r4, lsl #8
   13248:	ldrd	r4, [sp, #216]	; 0xd8
   1324c:	adds	r4, r4, r0
   13250:	adc	r5, r5, r1
   13254:	adds	r4, r4, r2
   13258:	adc	r5, r5, r3
   1325c:	mov	r0, r4
   13260:	mov	r1, r5
   13264:	eor	r0, r0, r6
   13268:	eor	r1, r1, r7
   1326c:	mov	r7, r1
   13270:	lsr	r1, r0, #16
   13274:	orr	r1, r1, r7, lsl #16
   13278:	str	r1, [sp, #8]
   1327c:	lsr	r1, r7, #16
   13280:	orr	r1, r1, r0, lsl #16
   13284:	str	r1, [sp, #12]
   13288:	ldrd	r0, [sp, #8]
   1328c:	ldrd	r6, [sp, #96]	; 0x60
   13290:	strd	r4, [sp, #104]	; 0x68
   13294:	adds	r0, r0, r8
   13298:	adc	r1, r1, r9
   1329c:	ldrd	r4, [sp, #64]	; 0x40
   132a0:	strd	r0, [sp, #112]	; 0x70
   132a4:	eor	r0, r0, r2
   132a8:	eor	r1, r1, r3
   132ac:	mov	r3, r1
   132b0:	lsl	r2, r0, #1
   132b4:	lsl	r1, r1, #1
   132b8:	orr	r1, r1, r0, lsr #31
   132bc:	orr	r3, r2, r3, lsr #31
   132c0:	str	r1, [sp, #44]	; 0x2c
   132c4:	str	r3, [sp, #40]	; 0x28
   132c8:	ldrd	r0, [sp, #168]	; 0xa8
   132cc:	ldrd	r2, [sp, #80]	; 0x50
   132d0:	adds	r0, r0, r2
   132d4:	adc	r1, r1, r3
   132d8:	ldrd	r2, [sp, #64]	; 0x40
   132dc:	adds	r2, r2, r0
   132e0:	adc	r3, r3, r1
   132e4:	mov	r0, r2
   132e8:	mov	r1, r3
   132ec:	ldrd	r2, [sp, #24]
   132f0:	eor	r3, r3, r1
   132f4:	adds	r6, r6, r3
   132f8:	eor	r2, r2, r0
   132fc:	adc	r7, r7, r2
   13300:	eor	r4, r4, r6
   13304:	eor	r5, r5, r7
   13308:	lsr	ip, r4, #24
   1330c:	mov	r9, r2
   13310:	orr	r2, ip, r5, lsl #8
   13314:	lsr	ip, r5, #24
   13318:	mov	r8, r3
   1331c:	orr	r3, ip, r4, lsl #8
   13320:	ldrd	r4, [sp, #200]	; 0xc8
   13324:	adds	r4, r4, r0
   13328:	adc	r5, r5, r1
   1332c:	adds	r4, r4, r2
   13330:	adc	r5, r5, r3
   13334:	mov	r0, r4
   13338:	mov	r1, r5
   1333c:	eor	r0, r0, r8
   13340:	eor	r1, r1, r9
   13344:	mov	r9, r1
   13348:	lsr	r1, r0, #16
   1334c:	orr	r1, r1, r9, lsl #16
   13350:	str	r1, [sp, #24]
   13354:	lsr	r1, r9, #16
   13358:	orr	r1, r1, r0, lsl #16
   1335c:	str	r1, [sp, #28]
   13360:	ldrd	r0, [sp, #24]
   13364:	strd	r4, [sp, #64]	; 0x40
   13368:	adds	r0, r0, r6
   1336c:	adc	r1, r1, r7
   13370:	ldrd	r6, [sp, #120]	; 0x78
   13374:	strd	r0, [sp, #80]	; 0x50
   13378:	eor	r0, r0, r2
   1337c:	eor	r1, r1, r3
   13380:	mov	r3, r1
   13384:	lsl	r2, r0, #1
   13388:	lsl	r1, r1, #1
   1338c:	orr	r1, r1, r0, lsr #31
   13390:	orr	r3, r2, r3, lsr #31
   13394:	str	r1, [sp, #60]	; 0x3c
   13398:	str	r3, [sp, #56]	; 0x38
   1339c:	ldrd	r0, [sp, #208]	; 0xd0
   133a0:	ldrd	r2, [sp, #72]	; 0x48
   133a4:	adds	r0, r0, r2
   133a8:	adc	r1, r1, r3
   133ac:	ldrd	r2, [sp, #16]
   133b0:	adds	r0, r0, sl
   133b4:	adc	r1, r1, fp
   133b8:	eor	r3, r3, r1
   133bc:	adds	r6, r6, r3
   133c0:	eor	r2, r2, r0
   133c4:	adc	r7, r7, r2
   133c8:	eor	r4, sl, r6
   133cc:	eor	r5, fp, r7
   133d0:	lsr	ip, r4, #24
   133d4:	mov	r9, r2
   133d8:	orr	r2, ip, r5, lsl #8
   133dc:	lsr	ip, r5, #24
   133e0:	mov	r8, r3
   133e4:	orr	r3, ip, r4, lsl #8
   133e8:	add	ip, sp, #256	; 0x100
   133ec:	ldrd	r4, [ip]
   133f0:	adds	r4, r4, r0
   133f4:	adc	r5, r5, r1
   133f8:	adds	r4, r4, r2
   133fc:	adc	r5, r5, r3
   13400:	mov	r0, r4
   13404:	mov	r1, r5
   13408:	eor	r0, r0, r8
   1340c:	eor	r1, r1, r9
   13410:	mov	r9, r1
   13414:	lsr	r1, r0, #16
   13418:	orr	r1, r1, r9, lsl #16
   1341c:	str	r1, [sp, #16]
   13420:	lsr	r1, r9, #16
   13424:	orr	r1, r1, r0, lsl #16
   13428:	str	r1, [sp, #20]
   1342c:	strd	r4, [sp, #72]	; 0x48
   13430:	ldrd	r0, [sp, #16]
   13434:	ldrd	r4, [sp, #48]	; 0x30
   13438:	adds	r0, r0, r6
   1343c:	adc	r1, r1, r7
   13440:	ldrd	r6, [sp, #128]	; 0x80
   13444:	strd	r0, [sp, #96]	; 0x60
   13448:	eor	r0, r0, r2
   1344c:	eor	r1, r1, r3
   13450:	mov	r3, r1
   13454:	lsl	r2, r0, #1
   13458:	lsl	r1, r1, #1
   1345c:	orr	fp, r1, r0, lsr #31
   13460:	orr	sl, r2, r3, lsr #31
   13464:	ldrd	r0, [sp, #240]	; 0xf0
   13468:	ldrd	r2, [sp, #88]	; 0x58
   1346c:	adds	r0, r0, r2
   13470:	adc	r1, r1, r3
   13474:	ldrd	r2, [sp, #48]	; 0x30
   13478:	adds	r2, r2, r0
   1347c:	adc	r3, r3, r1
   13480:	mov	r0, r2
   13484:	mov	r1, r3
   13488:	ldrd	r2, [sp, #32]
   1348c:	eor	r3, r3, r1
   13490:	adds	r6, r6, r3
   13494:	eor	r2, r2, r0
   13498:	adc	r7, r7, r2
   1349c:	eor	r4, r4, r6
   134a0:	eor	r5, r5, r7
   134a4:	lsr	ip, r4, #24
   134a8:	mov	r9, r2
   134ac:	orr	r2, ip, r5, lsl #8
   134b0:	lsr	ip, r5, #24
   134b4:	mov	r8, r3
   134b8:	orr	r3, ip, r4, lsl #8
   134bc:	ldrd	r4, [sp, #184]	; 0xb8
   134c0:	adds	r4, r4, r0
   134c4:	adc	r5, r5, r1
   134c8:	adds	r4, r4, r2
   134cc:	adc	r5, r5, r3
   134d0:	mov	r0, r4
   134d4:	mov	r1, r5
   134d8:	eor	r0, r0, r8
   134dc:	eor	r1, r1, r9
   134e0:	mov	r9, r1
   134e4:	lsr	r1, r0, #16
   134e8:	strd	r4, [sp, #88]	; 0x58
   134ec:	orr	r4, r1, r9, lsl #16
   134f0:	lsr	r1, r9, #16
   134f4:	adds	r6, r6, r4
   134f8:	orr	r5, r1, r0, lsl #16
   134fc:	adc	r7, r7, r5
   13500:	eor	r3, r3, r7
   13504:	eor	r2, r2, r6
   13508:	lsl	r1, r3, #1
   1350c:	orr	r1, r1, r2, lsr #31
   13510:	lsl	r2, r2, #1
   13514:	orr	r3, r2, r3, lsr #31
   13518:	str	r1, [sp, #36]	; 0x24
   1351c:	str	r3, [sp, #32]
   13520:	ldrd	r0, [sp, #144]	; 0x90
   13524:	ldrd	r2, [sp, #104]	; 0x68
   13528:	adds	r0, r0, r2
   1352c:	adc	r1, r1, r3
   13530:	ldrd	r2, [sp, #56]	; 0x38
   13534:	adds	r2, r2, r0
   13538:	adc	r3, r3, r1
   1353c:	eor	r4, r4, r2
   13540:	eor	r5, r5, r3
   13544:	mov	r0, r2
   13548:	mov	r1, r3
   1354c:	ldrd	r2, [sp, #96]	; 0x60
   13550:	mov	r8, r5
   13554:	mov	r9, r4
   13558:	adds	r2, r2, r5
   1355c:	adc	r3, r3, r4
   13560:	ldrd	r4, [sp, #56]	; 0x38
   13564:	strd	r2, [sp, #96]	; 0x60
   13568:	eor	r4, r4, r2
   1356c:	eor	r5, r5, r3
   13570:	lsr	ip, r4, #24
   13574:	orr	r2, ip, r5, lsl #8
   13578:	lsr	ip, r5, #24
   1357c:	orr	r3, ip, r4, lsl #8
   13580:	ldrd	r4, [sp, #232]	; 0xe8
   13584:	adds	r4, r4, r0
   13588:	adc	r5, r5, r1
   1358c:	adds	r4, r4, r2
   13590:	adc	r5, r5, r3
   13594:	mov	r0, r4
   13598:	mov	r1, r5
   1359c:	eor	r0, r0, r8
   135a0:	eor	r1, r1, r9
   135a4:	mov	r9, r1
   135a8:	lsr	r1, r0, #16
   135ac:	orr	r1, r1, r9, lsl #16
   135b0:	str	r1, [sp, #48]	; 0x30
   135b4:	lsr	r1, r9, #16
   135b8:	orr	r1, r1, r0, lsl #16
   135bc:	str	r1, [sp, #52]	; 0x34
   135c0:	strd	r4, [sp, #104]	; 0x68
   135c4:	ldrd	r0, [sp, #96]	; 0x60
   135c8:	ldrd	r4, [sp, #48]	; 0x30
   135cc:	adds	r0, r0, r4
   135d0:	adc	r1, r1, r5
   135d4:	strd	r0, [sp, #96]	; 0x60
   135d8:	eor	r0, r0, r2
   135dc:	eor	r1, r1, r3
   135e0:	mov	r3, r1
   135e4:	lsl	r2, r0, #1
   135e8:	lsl	r1, r1, #1
   135ec:	orr	r1, r1, r0, lsr #31
   135f0:	orr	r3, r2, r3, lsr #31
   135f4:	str	r1, [sp, #60]	; 0x3c
   135f8:	str	r3, [sp, #56]	; 0x38
   135fc:	ldrd	r0, [sp]
   13600:	ldrd	r2, [sp, #64]	; 0x40
   13604:	adds	r0, r0, r2
   13608:	adc	r1, r1, r3
   1360c:	ldrd	r2, [sp, #8]
   13610:	adds	r0, r0, sl
   13614:	adc	r1, r1, fp
   13618:	eor	r3, r3, r1
   1361c:	adds	r6, r6, r3
   13620:	eor	r2, r2, r0
   13624:	adc	r7, r7, r2
   13628:	eor	r4, sl, r6
   1362c:	eor	r5, fp, r7
   13630:	lsr	ip, r4, #24
   13634:	mov	r9, r2
   13638:	orr	r2, ip, r5, lsl #8
   1363c:	lsr	ip, r5, #24
   13640:	mov	r8, r3
   13644:	orr	r3, ip, r4, lsl #8
   13648:	ldrd	r4, [sp, #152]	; 0x98
   1364c:	adds	r4, r4, r0
   13650:	adc	r5, r5, r1
   13654:	adds	r4, r4, r2
   13658:	adc	r5, r5, r3
   1365c:	mov	r0, r4
   13660:	mov	r1, r5
   13664:	eor	r0, r0, r8
   13668:	eor	r1, r1, r9
   1366c:	mov	r9, r1
   13670:	lsr	r1, r0, #16
   13674:	orr	r1, r1, r9, lsl #16
   13678:	strd	r4, [sp, #64]	; 0x40
   1367c:	str	r1, [sp, #8]
   13680:	lsr	r1, r9, #16
   13684:	orr	r1, r1, r0, lsl #16
   13688:	str	r1, [sp, #12]
   1368c:	ldrd	r0, [sp, #8]
   13690:	ldrd	r8, [sp, #112]	; 0x70
   13694:	ldrd	r4, [sp, #32]
   13698:	adds	r0, r0, r6
   1369c:	adc	r1, r1, r7
   136a0:	strd	r0, [sp, #120]	; 0x78
   136a4:	eor	r0, r0, r2
   136a8:	eor	r1, r1, r3
   136ac:	mov	r3, r1
   136b0:	lsl	r2, r0, #1
   136b4:	lsl	r1, r1, #1
   136b8:	orr	fp, r1, r0, lsr #31
   136bc:	orr	sl, r2, r3, lsr #31
   136c0:	ldrd	r0, [sp, #224]	; 0xe0
   136c4:	ldrd	r2, [sp, #72]	; 0x48
   136c8:	adds	r0, r0, r2
   136cc:	adc	r1, r1, r3
   136d0:	ldrd	r2, [sp, #32]
   136d4:	adds	r2, r2, r0
   136d8:	adc	r3, r3, r1
   136dc:	mov	r0, r2
   136e0:	mov	r1, r3
   136e4:	ldrd	r2, [sp, #24]
   136e8:	eor	r3, r3, r1
   136ec:	adds	r8, r8, r3
   136f0:	eor	r2, r2, r0
   136f4:	adc	r9, r9, r2
   136f8:	eor	r4, r4, r8
   136fc:	eor	r5, r5, r9
   13700:	lsr	ip, r4, #24
   13704:	mov	r7, r2
   13708:	orr	r2, ip, r5, lsl #8
   1370c:	lsr	ip, r5, #24
   13710:	mov	r6, r3
   13714:	orr	r3, ip, r4, lsl #8
   13718:	ldrd	r4, [sp, #192]	; 0xc0
   1371c:	adds	r4, r4, r0
   13720:	adc	r5, r5, r1
   13724:	adds	r4, r4, r2
   13728:	adc	r5, r5, r3
   1372c:	mov	r0, r4
   13730:	mov	r1, r5
   13734:	eor	r0, r0, r6
   13738:	eor	r1, r1, r7
   1373c:	mov	r7, r1
   13740:	lsr	r1, r0, #16
   13744:	orr	r1, r1, r7, lsl #16
   13748:	str	r1, [sp, #24]
   1374c:	lsr	r1, r7, #16
   13750:	orr	r1, r1, r0, lsl #16
   13754:	str	r1, [sp, #28]
   13758:	ldrd	r0, [sp, #24]
   1375c:	ldrd	r6, [sp, #80]	; 0x50
   13760:	strd	r4, [sp, #72]	; 0x48
   13764:	adds	r0, r0, r8
   13768:	adc	r1, r1, r9
   1376c:	ldrd	r4, [sp, #40]	; 0x28
   13770:	strd	r0, [sp, #112]	; 0x70
   13774:	eor	r0, r0, r2
   13778:	eor	r1, r1, r3
   1377c:	mov	r3, r1
   13780:	lsl	r2, r0, #1
   13784:	lsl	r1, r1, #1
   13788:	orr	r1, r1, r0, lsr #31
   1378c:	orr	r3, r2, r3, lsr #31
   13790:	str	r1, [sp, #36]	; 0x24
   13794:	str	r3, [sp, #32]
   13798:	ldrd	r0, [sp, #176]	; 0xb0
   1379c:	ldrd	r2, [sp, #88]	; 0x58
   137a0:	adds	r0, r0, r2
   137a4:	adc	r1, r1, r3
   137a8:	ldrd	r2, [sp, #40]	; 0x28
   137ac:	adds	r2, r2, r0
   137b0:	adc	r3, r3, r1
   137b4:	mov	r0, r2
   137b8:	mov	r1, r3
   137bc:	ldrd	r2, [sp, #16]
   137c0:	eor	r3, r3, r1
   137c4:	adds	r6, r6, r3
   137c8:	eor	r2, r2, r0
   137cc:	adc	r7, r7, r2
   137d0:	eor	r4, r4, r6
   137d4:	eor	r5, r5, r7
   137d8:	lsr	ip, r4, #24
   137dc:	mov	r9, r2
   137e0:	orr	r2, ip, r5, lsl #8
   137e4:	lsr	ip, r5, #24
   137e8:	mov	r8, r3
   137ec:	orr	r3, ip, r4, lsl #8
   137f0:	ldrd	r4, [sp, #160]	; 0xa0
   137f4:	adds	r4, r4, r0
   137f8:	adc	r5, r5, r1
   137fc:	adds	r4, r4, r2
   13800:	adc	r5, r5, r3
   13804:	mov	r0, r4
   13808:	mov	r1, r5
   1380c:	eor	r0, r0, r8
   13810:	eor	r1, r1, r9
   13814:	mov	r9, r1
   13818:	lsr	r1, r0, #16
   1381c:	orr	r1, r1, r9, lsl #16
   13820:	str	r1, [sp, #16]
   13824:	lsr	r1, r9, #16
   13828:	orr	r1, r1, r0, lsl #16
   1382c:	str	r1, [sp, #20]
   13830:	ldrd	r0, [sp, #16]
   13834:	strd	r4, [sp, #80]	; 0x50
   13838:	adds	r0, r0, r6
   1383c:	adc	r1, r1, r7
   13840:	strd	r0, [sp, #88]	; 0x58
   13844:	eor	r0, r0, r2
   13848:	eor	r1, r1, r3
   1384c:	mov	r3, r1
   13850:	lsl	r2, r0, #1
   13854:	lsl	r1, r1, #1
   13858:	orr	r5, r1, r0, lsr #31
   1385c:	orr	r4, r2, r3, lsr #31
   13860:	ldrd	r0, [sp, #224]	; 0xe0
   13864:	ldrd	r2, [sp, #104]	; 0x68
   13868:	adds	r0, r0, r2
   1386c:	adc	r1, r1, r3
   13870:	ldrd	r2, [sp, #8]
   13874:	adds	r0, r0, r4
   13878:	ldrd	r8, [sp, #112]	; 0x70
   1387c:	adc	r1, r1, r5
   13880:	eor	r3, r3, r1
   13884:	adds	r8, r8, r3
   13888:	eor	r2, r2, r0
   1388c:	adc	r9, r9, r2
   13890:	eor	r4, r4, r8
   13894:	eor	r5, r5, r9
   13898:	lsr	ip, r4, #24
   1389c:	mov	r7, r2
   138a0:	orr	r2, ip, r5, lsl #8
   138a4:	lsr	ip, r5, #24
   138a8:	mov	r6, r3
   138ac:	orr	r3, ip, r4, lsl #8
   138b0:	ldrd	r4, [sp, #200]	; 0xc8
   138b4:	adds	r4, r4, r0
   138b8:	adc	r5, r5, r1
   138bc:	adds	r4, r4, r2
   138c0:	adc	r5, r5, r3
   138c4:	mov	r0, r4
   138c8:	mov	r1, r5
   138cc:	eor	r0, r0, r6
   138d0:	eor	r1, r1, r7
   138d4:	mov	r7, r1
   138d8:	lsr	r1, r0, #16
   138dc:	orr	r1, r1, r7, lsl #16
   138e0:	str	r1, [sp, #8]
   138e4:	lsr	r1, r7, #16
   138e8:	orr	r1, r1, r0, lsl #16
   138ec:	str	r1, [sp, #12]
   138f0:	ldrd	r0, [sp, #8]
   138f4:	ldrd	r6, [sp, #88]	; 0x58
   138f8:	strd	r4, [sp, #104]	; 0x68
   138fc:	adds	r0, r0, r8
   13900:	adc	r1, r1, r9
   13904:	ldrd	r4, [sp, #56]	; 0x38
   13908:	strd	r0, [sp, #112]	; 0x70
   1390c:	eor	r0, r0, r2
   13910:	eor	r1, r1, r3
   13914:	mov	r3, r1
   13918:	lsl	r2, r0, #1
   1391c:	lsl	r1, r1, #1
   13920:	orr	r1, r1, r0, lsr #31
   13924:	orr	r3, r2, r3, lsr #31
   13928:	str	r1, [sp, #44]	; 0x2c
   1392c:	str	r3, [sp, #40]	; 0x28
   13930:	ldrd	r0, [sp, #232]	; 0xe8
   13934:	ldrd	r2, [sp, #64]	; 0x40
   13938:	adds	r0, r0, r2
   1393c:	adc	r1, r1, r3
   13940:	ldrd	r2, [sp, #56]	; 0x38
   13944:	adds	r2, r2, r0
   13948:	adc	r3, r3, r1
   1394c:	mov	r0, r2
   13950:	mov	r1, r3
   13954:	ldrd	r2, [sp, #24]
   13958:	eor	r3, r3, r1
   1395c:	adds	r6, r6, r3
   13960:	eor	r2, r2, r0
   13964:	adc	r7, r7, r2
   13968:	eor	r4, r4, r6
   1396c:	eor	r5, r5, r7
   13970:	lsr	ip, r4, #24
   13974:	mov	r9, r2
   13978:	orr	r2, ip, r5, lsl #8
   1397c:	lsr	ip, r5, #24
   13980:	mov	r8, r3
   13984:	orr	r3, ip, r4, lsl #8
   13988:	ldrd	r4, [sp]
   1398c:	adds	r4, r4, r0
   13990:	adc	r5, r5, r1
   13994:	adds	r4, r4, r2
   13998:	adc	r5, r5, r3
   1399c:	mov	r0, r4
   139a0:	mov	r1, r5
   139a4:	eor	r0, r0, r8
   139a8:	eor	r1, r1, r9
   139ac:	mov	r9, r1
   139b0:	lsr	r1, r0, #16
   139b4:	orr	r1, r1, r9, lsl #16
   139b8:	str	r1, [sp, #24]
   139bc:	lsr	r1, r9, #16
   139c0:	orr	r1, r1, r0, lsl #16
   139c4:	str	r1, [sp, #28]
   139c8:	ldrd	r0, [sp, #24]
   139cc:	strd	r4, [sp, #64]	; 0x40
   139d0:	adds	r0, r0, r6
   139d4:	adc	r1, r1, r7
   139d8:	ldrd	r6, [sp, #96]	; 0x60
   139dc:	strd	r0, [sp, #88]	; 0x58
   139e0:	eor	r0, r0, r2
   139e4:	eor	r1, r1, r3
   139e8:	mov	r3, r1
   139ec:	lsl	r2, r0, #1
   139f0:	lsl	r1, r1, #1
   139f4:	orr	r1, r1, r0, lsr #31
   139f8:	orr	r3, r2, r3, lsr #31
   139fc:	str	r1, [sp, #60]	; 0x3c
   13a00:	str	r3, [sp, #56]	; 0x38
   13a04:	ldrd	r0, [sp, #176]	; 0xb0
   13a08:	ldrd	r2, [sp, #72]	; 0x48
   13a0c:	adds	r0, r0, r2
   13a10:	adc	r1, r1, r3
   13a14:	ldrd	r2, [sp, #16]
   13a18:	adds	r0, r0, sl
   13a1c:	adc	r1, r1, fp
   13a20:	eor	r3, r3, r1
   13a24:	adds	r6, r6, r3
   13a28:	eor	r2, r2, r0
   13a2c:	adc	r7, r7, r2
   13a30:	eor	r4, sl, r6
   13a34:	eor	r5, fp, r7
   13a38:	lsr	ip, r4, #24
   13a3c:	mov	r9, r2
   13a40:	orr	r2, ip, r5, lsl #8
   13a44:	lsr	ip, r5, #24
   13a48:	mov	r8, r3
   13a4c:	orr	r3, ip, r4, lsl #8
   13a50:	ldrd	r4, [sp, #152]	; 0x98
   13a54:	adds	r4, r4, r0
   13a58:	adc	r5, r5, r1
   13a5c:	adds	r4, r4, r2
   13a60:	adc	r5, r5, r3
   13a64:	mov	r0, r4
   13a68:	mov	r1, r5
   13a6c:	eor	r0, r0, r8
   13a70:	eor	r1, r1, r9
   13a74:	mov	r9, r1
   13a78:	lsr	r1, r0, #16
   13a7c:	orr	r1, r1, r9, lsl #16
   13a80:	str	r1, [sp, #16]
   13a84:	lsr	r1, r9, #16
   13a88:	orr	r1, r1, r0, lsl #16
   13a8c:	str	r1, [sp, #20]
   13a90:	ldrd	r0, [sp, #16]
   13a94:	strd	r4, [sp, #72]	; 0x48
   13a98:	adds	r0, r0, r6
   13a9c:	adc	r1, r1, r7
   13aa0:	strd	r0, [sp, #96]	; 0x60
   13aa4:	eor	r0, r0, r2
   13aa8:	eor	r1, r1, r3
   13aac:	mov	r3, r1
   13ab0:	lsl	r2, r0, #1
   13ab4:	orr	sl, r2, r3, lsr #31
   13ab8:	add	r3, sp, #256	; 0x100
   13abc:	lsl	r1, r1, #1
   13ac0:	orr	fp, r1, r0, lsr #31
   13ac4:	ldrd	r0, [r3]
   13ac8:	ldrd	r2, [sp, #80]	; 0x50
   13acc:	ldrd	r6, [sp, #120]	; 0x78
   13ad0:	ldrd	r4, [sp, #32]
   13ad4:	adds	r0, r0, r2
   13ad8:	adc	r1, r1, r3
   13adc:	ldrd	r2, [sp, #32]
   13ae0:	adds	r2, r2, r0
   13ae4:	adc	r3, r3, r1
   13ae8:	mov	r0, r2
   13aec:	mov	r1, r3
   13af0:	ldrd	r2, [sp, #48]	; 0x30
   13af4:	eor	r3, r3, r1
   13af8:	adds	r6, r6, r3
   13afc:	eor	r2, r2, r0
   13b00:	adc	r7, r7, r2
   13b04:	eor	r4, r4, r6
   13b08:	eor	r5, r5, r7
   13b0c:	lsr	ip, r4, #24
   13b10:	mov	r9, r2
   13b14:	orr	r2, ip, r5, lsl #8
   13b18:	lsr	ip, r5, #24
   13b1c:	mov	r8, r3
   13b20:	orr	r3, ip, r4, lsl #8
   13b24:	ldrd	r4, [sp, #240]	; 0xf0
   13b28:	adds	r4, r4, r0
   13b2c:	adc	r5, r5, r1
   13b30:	adds	r4, r4, r2
   13b34:	adc	r5, r5, r3
   13b38:	mov	r0, r4
   13b3c:	mov	r1, r5
   13b40:	eor	r0, r0, r8
   13b44:	eor	r1, r1, r9
   13b48:	mov	r9, r1
   13b4c:	lsr	r1, r0, #16
   13b50:	strd	r4, [sp, #80]	; 0x50
   13b54:	orr	r4, r1, r9, lsl #16
   13b58:	lsr	r1, r9, #16
   13b5c:	adds	r6, r6, r4
   13b60:	orr	r5, r1, r0, lsl #16
   13b64:	adc	r7, r7, r5
   13b68:	eor	r3, r3, r7
   13b6c:	eor	r2, r2, r6
   13b70:	lsl	r1, r3, #1
   13b74:	orr	r1, r1, r2, lsr #31
   13b78:	lsl	r2, r2, #1
   13b7c:	orr	r3, r2, r3, lsr #31
   13b80:	str	r1, [sp, #36]	; 0x24
   13b84:	str	r3, [sp, #32]
   13b88:	ldrd	r0, [sp, #216]	; 0xd8
   13b8c:	ldrd	r2, [sp, #104]	; 0x68
   13b90:	adds	r0, r0, r2
   13b94:	adc	r1, r1, r3
   13b98:	ldrd	r2, [sp, #56]	; 0x38
   13b9c:	adds	r2, r2, r0
   13ba0:	adc	r3, r3, r1
   13ba4:	eor	r4, r4, r2
   13ba8:	eor	r5, r5, r3
   13bac:	mov	r0, r2
   13bb0:	mov	r1, r3
   13bb4:	ldrd	r2, [sp, #96]	; 0x60
   13bb8:	mov	r8, r5
   13bbc:	mov	r9, r4
   13bc0:	adds	r2, r2, r5
   13bc4:	adc	r3, r3, r4
   13bc8:	ldrd	r4, [sp, #56]	; 0x38
   13bcc:	strd	r2, [sp, #96]	; 0x60
   13bd0:	eor	r4, r4, r2
   13bd4:	eor	r5, r5, r3
   13bd8:	lsr	ip, r4, #24
   13bdc:	orr	r2, ip, r5, lsl #8
   13be0:	lsr	ip, r5, #24
   13be4:	orr	r3, ip, r4, lsl #8
   13be8:	ldrd	r4, [sp, #248]	; 0xf8
   13bec:	adds	r4, r4, r0
   13bf0:	adc	r5, r5, r1
   13bf4:	adds	r4, r4, r2
   13bf8:	adc	r5, r5, r3
   13bfc:	mov	r0, r4
   13c00:	mov	r1, r5
   13c04:	eor	r0, r0, r8
   13c08:	eor	r1, r1, r9
   13c0c:	mov	r9, r1
   13c10:	lsr	r1, r0, #16
   13c14:	orr	r1, r1, r9, lsl #16
   13c18:	str	r1, [sp, #48]	; 0x30
   13c1c:	lsr	r1, r9, #16
   13c20:	orr	r1, r1, r0, lsl #16
   13c24:	str	r1, [sp, #52]	; 0x34
   13c28:	strd	r4, [sp, #104]	; 0x68
   13c2c:	ldrd	r0, [sp, #96]	; 0x60
   13c30:	ldrd	r4, [sp, #48]	; 0x30
   13c34:	adds	r0, r0, r4
   13c38:	adc	r1, r1, r5
   13c3c:	strd	r0, [sp, #96]	; 0x60
   13c40:	eor	r0, r0, r2
   13c44:	eor	r1, r1, r3
   13c48:	mov	r3, r1
   13c4c:	lsl	r2, r0, #1
   13c50:	lsl	r1, r1, #1
   13c54:	orr	r1, r1, r0, lsr #31
   13c58:	orr	r3, r2, r3, lsr #31
   13c5c:	str	r1, [sp, #60]	; 0x3c
   13c60:	str	r3, [sp, #56]	; 0x38
   13c64:	ldrd	r0, [sp, #160]	; 0xa0
   13c68:	ldrd	r2, [sp, #64]	; 0x40
   13c6c:	adds	r0, r0, r2
   13c70:	adc	r1, r1, r3
   13c74:	ldrd	r2, [sp, #8]
   13c78:	adds	r0, r0, sl
   13c7c:	adc	r1, r1, fp
   13c80:	eor	r3, r3, r1
   13c84:	adds	r6, r6, r3
   13c88:	eor	r2, r2, r0
   13c8c:	adc	r7, r7, r2
   13c90:	eor	r4, sl, r6
   13c94:	eor	r5, fp, r7
   13c98:	lsr	ip, r4, #24
   13c9c:	mov	r9, r2
   13ca0:	orr	r2, ip, r5, lsl #8
   13ca4:	lsr	ip, r5, #24
   13ca8:	mov	r8, r3
   13cac:	orr	r3, ip, r4, lsl #8
   13cb0:	ldrd	r4, [sp, #184]	; 0xb8
   13cb4:	adds	r4, r4, r0
   13cb8:	adc	r5, r5, r1
   13cbc:	adds	r4, r4, r2
   13cc0:	adc	r5, r5, r3
   13cc4:	mov	r0, r4
   13cc8:	mov	r1, r5
   13ccc:	eor	r0, r0, r8
   13cd0:	eor	r1, r1, r9
   13cd4:	mov	r9, r1
   13cd8:	lsr	r1, r0, #16
   13cdc:	orr	r1, r1, r9, lsl #16
   13ce0:	str	r1, [sp, #8]
   13ce4:	lsr	r1, r9, #16
   13ce8:	orr	r1, r1, r0, lsl #16
   13cec:	str	r1, [sp, #12]
   13cf0:	strd	r4, [sp, #64]	; 0x40
   13cf4:	ldrd	r0, [sp, #8]
   13cf8:	ldrd	r8, [sp, #112]	; 0x70
   13cfc:	ldrd	r4, [sp, #32]
   13d00:	adds	r0, r0, r6
   13d04:	adc	r1, r1, r7
   13d08:	strd	r0, [sp, #120]	; 0x78
   13d0c:	eor	r0, r0, r2
   13d10:	eor	r1, r1, r3
   13d14:	mov	r3, r1
   13d18:	lsl	r2, r0, #1
   13d1c:	lsl	r1, r1, #1
   13d20:	orr	fp, r1, r0, lsr #31
   13d24:	orr	sl, r2, r3, lsr #31
   13d28:	ldrd	r0, [sp, #192]	; 0xc0
   13d2c:	ldrd	r2, [sp, #72]	; 0x48
   13d30:	adds	r0, r0, r2
   13d34:	adc	r1, r1, r3
   13d38:	ldrd	r2, [sp, #32]
   13d3c:	adds	r2, r2, r0
   13d40:	adc	r3, r3, r1
   13d44:	mov	r0, r2
   13d48:	mov	r1, r3
   13d4c:	ldrd	r2, [sp, #24]
   13d50:	eor	r3, r3, r1
   13d54:	adds	r8, r8, r3
   13d58:	eor	r2, r2, r0
   13d5c:	adc	r9, r9, r2
   13d60:	eor	r4, r4, r8
   13d64:	eor	r5, r5, r9
   13d68:	lsr	ip, r4, #24
   13d6c:	mov	r7, r2
   13d70:	orr	r2, ip, r5, lsl #8
   13d74:	lsr	ip, r5, #24
   13d78:	mov	r6, r3
   13d7c:	orr	r3, ip, r4, lsl #8
   13d80:	ldrd	r4, [sp, #144]	; 0x90
   13d84:	adds	r4, r4, r0
   13d88:	adc	r5, r5, r1
   13d8c:	adds	r4, r4, r2
   13d90:	adc	r5, r5, r3
   13d94:	mov	r0, r4
   13d98:	mov	r1, r5
   13d9c:	eor	r0, r0, r6
   13da0:	eor	r1, r1, r7
   13da4:	mov	r7, r1
   13da8:	lsr	r1, r0, #16
   13dac:	orr	r1, r1, r7, lsl #16
   13db0:	str	r1, [sp, #24]
   13db4:	lsr	r1, r7, #16
   13db8:	orr	r1, r1, r0, lsl #16
   13dbc:	str	r1, [sp, #28]
   13dc0:	ldrd	r0, [sp, #24]
   13dc4:	ldrd	r6, [sp, #88]	; 0x58
   13dc8:	strd	r4, [sp, #72]	; 0x48
   13dcc:	adds	r0, r0, r8
   13dd0:	adc	r1, r1, r9
   13dd4:	ldrd	r4, [sp, #40]	; 0x28
   13dd8:	strd	r0, [sp, #112]	; 0x70
   13ddc:	eor	r0, r0, r2
   13de0:	eor	r1, r1, r3
   13de4:	mov	r3, r1
   13de8:	lsl	r2, r0, #1
   13dec:	lsl	r1, r1, #1
   13df0:	orr	r1, r1, r0, lsr #31
   13df4:	orr	r3, r2, r3, lsr #31
   13df8:	str	r1, [sp, #36]	; 0x24
   13dfc:	str	r3, [sp, #32]
   13e00:	ldrd	r0, [sp, #208]	; 0xd0
   13e04:	ldrd	r2, [sp, #80]	; 0x50
   13e08:	adds	r0, r0, r2
   13e0c:	adc	r1, r1, r3
   13e10:	ldrd	r2, [sp, #40]	; 0x28
   13e14:	adds	r2, r2, r0
   13e18:	adc	r3, r3, r1
   13e1c:	mov	r0, r2
   13e20:	mov	r1, r3
   13e24:	ldrd	r2, [sp, #16]
   13e28:	eor	r3, r3, r1
   13e2c:	adds	r6, r6, r3
   13e30:	eor	r2, r2, r0
   13e34:	adc	r7, r7, r2
   13e38:	eor	r4, r4, r6
   13e3c:	eor	r5, r5, r7
   13e40:	lsr	ip, r4, #24
   13e44:	mov	r9, r2
   13e48:	orr	r2, ip, r5, lsl #8
   13e4c:	lsr	ip, r5, #24
   13e50:	mov	r8, r3
   13e54:	orr	r3, ip, r4, lsl #8
   13e58:	ldrd	r4, [sp, #168]	; 0xa8
   13e5c:	adds	r4, r4, r0
   13e60:	adc	r5, r5, r1
   13e64:	adds	r4, r4, r2
   13e68:	adc	r5, r5, r3
   13e6c:	mov	r0, r4
   13e70:	mov	r1, r5
   13e74:	eor	r0, r0, r8
   13e78:	eor	r1, r1, r9
   13e7c:	mov	r9, r1
   13e80:	lsr	r1, r0, #16
   13e84:	orr	r1, r1, r9, lsl #16
   13e88:	str	r1, [sp, #16]
   13e8c:	lsr	r1, r9, #16
   13e90:	orr	r1, r1, r0, lsl #16
   13e94:	str	r1, [sp, #20]
   13e98:	ldrd	r0, [sp, #16]
   13e9c:	strd	r4, [sp, #80]	; 0x50
   13ea0:	ldrd	r8, [sp, #112]	; 0x70
   13ea4:	adds	r0, r0, r6
   13ea8:	adc	r1, r1, r7
   13eac:	strd	r0, [sp, #88]	; 0x58
   13eb0:	eor	r0, r0, r2
   13eb4:	eor	r1, r1, r3
   13eb8:	mov	r3, r1
   13ebc:	lsl	r2, r0, #1
   13ec0:	lsl	r1, r1, #1
   13ec4:	orr	r5, r1, r0, lsr #31
   13ec8:	orr	r4, r2, r3, lsr #31
   13ecc:	ldrd	r0, [sp, #192]	; 0xc0
   13ed0:	ldrd	r2, [sp, #104]	; 0x68
   13ed4:	adds	r0, r0, r2
   13ed8:	adc	r1, r1, r3
   13edc:	ldrd	r2, [sp, #8]
   13ee0:	adds	r0, r0, r4
   13ee4:	adc	r1, r1, r5
   13ee8:	eor	r3, r3, r1
   13eec:	adds	r8, r8, r3
   13ef0:	eor	r2, r2, r0
   13ef4:	adc	r9, r9, r2
   13ef8:	eor	r4, r4, r8
   13efc:	eor	r5, r5, r9
   13f00:	lsr	ip, r4, #24
   13f04:	mov	r7, r2
   13f08:	orr	r2, ip, r5, lsl #8
   13f0c:	lsr	ip, r5, #24
   13f10:	mov	r6, r3
   13f14:	orr	r3, ip, r4, lsl #8
   13f18:	ldrd	r4, [sp, #208]	; 0xd0
   13f1c:	adds	r4, r4, r0
   13f20:	adc	r5, r5, r1
   13f24:	adds	r4, r4, r2
   13f28:	adc	r5, r5, r3
   13f2c:	mov	r0, r4
   13f30:	mov	r1, r5
   13f34:	eor	r0, r0, r6
   13f38:	eor	r1, r1, r7
   13f3c:	mov	r7, r1
   13f40:	lsr	r1, r0, #16
   13f44:	orr	r1, r1, r7, lsl #16
   13f48:	str	r1, [sp, #8]
   13f4c:	lsr	r1, r7, #16
   13f50:	orr	r1, r1, r0, lsl #16
   13f54:	str	r1, [sp, #12]
   13f58:	ldrd	r0, [sp, #8]
   13f5c:	ldrd	r6, [sp, #88]	; 0x58
   13f60:	strd	r4, [sp, #104]	; 0x68
   13f64:	adds	r0, r0, r8
   13f68:	adc	r1, r1, r9
   13f6c:	ldrd	r4, [sp, #56]	; 0x38
   13f70:	strd	r0, [sp, #112]	; 0x70
   13f74:	eor	r0, r0, r2
   13f78:	eor	r1, r1, r3
   13f7c:	mov	r3, r1
   13f80:	lsl	r2, r0, #1
   13f84:	lsl	r1, r1, #1
   13f88:	orr	r1, r1, r0, lsr #31
   13f8c:	orr	r3, r2, r3, lsr #31
   13f90:	str	r1, [sp, #44]	; 0x2c
   13f94:	str	r3, [sp, #40]	; 0x28
   13f98:	ldrd	r0, [sp, #160]	; 0xa0
   13f9c:	ldrd	r2, [sp, #64]	; 0x40
   13fa0:	adds	r0, r0, r2
   13fa4:	adc	r1, r1, r3
   13fa8:	ldrd	r2, [sp, #56]	; 0x38
   13fac:	adds	r2, r2, r0
   13fb0:	adc	r3, r3, r1
   13fb4:	mov	r0, r2
   13fb8:	mov	r1, r3
   13fbc:	ldrd	r2, [sp, #24]
   13fc0:	eor	r3, r3, r1
   13fc4:	adds	r6, r6, r3
   13fc8:	eor	r2, r2, r0
   13fcc:	adc	r7, r7, r2
   13fd0:	eor	r4, r4, r6
   13fd4:	eor	r5, r5, r7
   13fd8:	lsr	ip, r4, #24
   13fdc:	mov	r9, r2
   13fe0:	orr	r2, ip, r5, lsl #8
   13fe4:	lsr	ip, r5, #24
   13fe8:	mov	r8, r3
   13fec:	orr	r3, ip, r4, lsl #8
   13ff0:	ldrd	r4, [sp, #144]	; 0x90
   13ff4:	adds	r4, r4, r0
   13ff8:	adc	r5, r5, r1
   13ffc:	adds	r4, r4, r2
   14000:	adc	r5, r5, r3
   14004:	mov	r0, r4
   14008:	mov	r1, r5
   1400c:	eor	r0, r0, r8
   14010:	eor	r1, r1, r9
   14014:	mov	r9, r1
   14018:	lsr	r1, r0, #16
   1401c:	orr	r1, r1, r9, lsl #16
   14020:	str	r1, [sp, #24]
   14024:	lsr	r1, r9, #16
   14028:	orr	r1, r1, r0, lsl #16
   1402c:	str	r1, [sp, #28]
   14030:	ldrd	r0, [sp, #24]
   14034:	strd	r4, [sp, #64]	; 0x40
   14038:	adds	r0, r0, r6
   1403c:	adc	r1, r1, r7
   14040:	ldrd	r6, [sp, #96]	; 0x60
   14044:	strd	r0, [sp, #88]	; 0x58
   14048:	eor	r0, r0, r2
   1404c:	eor	r1, r1, r3
   14050:	mov	r3, r1
   14054:	lsl	r2, r0, #1
   14058:	lsl	r1, r1, #1
   1405c:	orr	r1, r1, r0, lsr #31
   14060:	orr	r3, r2, r3, lsr #31
   14064:	str	r1, [sp, #60]	; 0x3c
   14068:	str	r3, [sp, #56]	; 0x38
   1406c:	ldrd	r0, [sp, #240]	; 0xf0
   14070:	ldrd	r2, [sp, #72]	; 0x48
   14074:	adds	r0, r0, r2
   14078:	adc	r1, r1, r3
   1407c:	ldrd	r2, [sp, #16]
   14080:	adds	r0, r0, sl
   14084:	adc	r1, r1, fp
   14088:	eor	r3, r3, r1
   1408c:	adds	r6, r6, r3
   14090:	eor	r2, r2, r0
   14094:	adc	r7, r7, r2
   14098:	eor	r4, sl, r6
   1409c:	eor	r5, fp, r7
   140a0:	lsr	ip, r4, #24
   140a4:	mov	r9, r2
   140a8:	orr	r2, ip, r5, lsl #8
   140ac:	lsr	ip, r5, #24
   140b0:	mov	r8, r3
   140b4:	orr	r3, ip, r4, lsl #8
   140b8:	ldrd	r4, [sp, #232]	; 0xe8
   140bc:	adds	r4, r4, r0
   140c0:	adc	r5, r5, r1
   140c4:	adds	r4, r4, r2
   140c8:	adc	r5, r5, r3
   140cc:	mov	r0, r4
   140d0:	mov	r1, r5
   140d4:	eor	r0, r0, r8
   140d8:	eor	r1, r1, r9
   140dc:	mov	r9, r1
   140e0:	lsr	r1, r0, #16
   140e4:	orr	r1, r1, r9, lsl #16
   140e8:	str	r1, [sp, #16]
   140ec:	lsr	r1, r9, #16
   140f0:	orr	r1, r1, r0, lsl #16
   140f4:	str	r1, [sp, #20]
   140f8:	ldrd	r0, [sp, #16]
   140fc:	strd	r4, [sp, #72]	; 0x48
   14100:	adds	r0, r0, r6
   14104:	adc	r1, r1, r7
   14108:	strd	r0, [sp, #96]	; 0x60
   1410c:	eor	r0, r0, r2
   14110:	eor	r1, r1, r3
   14114:	mov	r3, r1
   14118:	lsl	r2, r0, #1
   1411c:	lsl	r1, r1, #1
   14120:	orr	fp, r1, r0, lsr #31
   14124:	orr	sl, r2, r3, lsr #31
   14128:	ldrd	r0, [sp, #224]	; 0xe0
   1412c:	ldrd	r2, [sp, #80]	; 0x50
   14130:	ldrd	r6, [sp, #120]	; 0x78
   14134:	ldrd	r4, [sp, #32]
   14138:	adds	r0, r0, r2
   1413c:	adc	r1, r1, r3
   14140:	ldrd	r2, [sp, #32]
   14144:	adds	r2, r2, r0
   14148:	adc	r3, r3, r1
   1414c:	mov	r0, r2
   14150:	mov	r1, r3
   14154:	ldrd	r2, [sp, #48]	; 0x30
   14158:	eor	r3, r3, r1
   1415c:	adds	r6, r6, r3
   14160:	eor	r2, r2, r0
   14164:	adc	r7, r7, r2
   14168:	eor	r4, r4, r6
   1416c:	eor	r5, r5, r7
   14170:	lsr	ip, r4, #24
   14174:	mov	r9, r2
   14178:	orr	r2, ip, r5, lsl #8
   1417c:	lsr	ip, r5, #24
   14180:	mov	r8, r3
   14184:	orr	r3, ip, r4, lsl #8
   14188:	ldrd	r4, [sp, #248]	; 0xf8
   1418c:	adds	r4, r4, r0
   14190:	adc	r5, r5, r1
   14194:	adds	r4, r4, r2
   14198:	adc	r5, r5, r3
   1419c:	mov	r0, r4
   141a0:	mov	r1, r5
   141a4:	eor	r0, r0, r8
   141a8:	eor	r1, r1, r9
   141ac:	mov	r9, r1
   141b0:	lsr	r1, r0, #16
   141b4:	strd	r4, [sp, #80]	; 0x50
   141b8:	orr	r4, r1, r9, lsl #16
   141bc:	lsr	r1, r9, #16
   141c0:	adds	r6, r6, r4
   141c4:	orr	r5, r1, r0, lsl #16
   141c8:	adc	r7, r7, r5
   141cc:	eor	r3, r3, r7
   141d0:	eor	r2, r2, r6
   141d4:	lsl	r1, r3, #1
   141d8:	orr	r1, r1, r2, lsr #31
   141dc:	lsl	r2, r2, #1
   141e0:	orr	r3, r2, r3, lsr #31
   141e4:	str	r1, [sp, #36]	; 0x24
   141e8:	str	r3, [sp, #32]
   141ec:	ldrd	r0, [sp, #152]	; 0x98
   141f0:	ldrd	r2, [sp, #104]	; 0x68
   141f4:	adds	r0, r0, r2
   141f8:	adc	r1, r1, r3
   141fc:	ldrd	r2, [sp, #56]	; 0x38
   14200:	adds	r2, r2, r0
   14204:	adc	r3, r3, r1
   14208:	eor	r4, r4, r2
   1420c:	eor	r5, r5, r3
   14210:	mov	r0, r2
   14214:	mov	r1, r3
   14218:	ldrd	r2, [sp, #96]	; 0x60
   1421c:	mov	r8, r5
   14220:	mov	r9, r4
   14224:	adds	r2, r2, r5
   14228:	adc	r3, r3, r4
   1422c:	ldrd	r4, [sp, #56]	; 0x38
   14230:	strd	r2, [sp, #96]	; 0x60
   14234:	eor	r4, r4, r2
   14238:	eor	r5, r5, r3
   1423c:	lsr	ip, r4, #24
   14240:	orr	r2, ip, r5, lsl #8
   14244:	lsr	ip, r5, #24
   14248:	orr	r3, ip, r4, lsl #8
   1424c:	ldrd	r4, [sp, #184]	; 0xb8
   14250:	adds	r4, r4, r0
   14254:	adc	r5, r5, r1
   14258:	adds	r4, r4, r2
   1425c:	adc	r5, r5, r3
   14260:	mov	r0, r4
   14264:	mov	r1, r5
   14268:	eor	r0, r0, r8
   1426c:	eor	r1, r1, r9
   14270:	mov	r9, r1
   14274:	lsr	r1, r0, #16
   14278:	orr	r1, r1, r9, lsl #16
   1427c:	str	r1, [sp, #48]	; 0x30
   14280:	lsr	r1, r9, #16
   14284:	orr	r1, r1, r0, lsl #16
   14288:	str	r1, [sp, #52]	; 0x34
   1428c:	strd	r4, [sp, #104]	; 0x68
   14290:	ldrd	r0, [sp, #96]	; 0x60
   14294:	ldrd	r4, [sp, #48]	; 0x30
   14298:	adds	r0, r0, r4
   1429c:	adc	r1, r1, r5
   142a0:	strd	r0, [sp, #96]	; 0x60
   142a4:	eor	r0, r0, r2
   142a8:	eor	r1, r1, r3
   142ac:	mov	r3, r1
   142b0:	lsl	r2, r0, #1
   142b4:	lsl	r1, r1, #1
   142b8:	orr	r1, r1, r0, lsr #31
   142bc:	orr	r3, r2, r3, lsr #31
   142c0:	str	r1, [sp, #60]	; 0x3c
   142c4:	str	r3, [sp, #56]	; 0x38
   142c8:	ldrd	r0, [sp, #176]	; 0xb0
   142cc:	ldrd	r2, [sp, #64]	; 0x40
   142d0:	adds	r0, r0, r2
   142d4:	adc	r1, r1, r3
   142d8:	ldrd	r2, [sp, #8]
   142dc:	adds	r0, r0, sl
   142e0:	adc	r1, r1, fp
   142e4:	eor	r3, r3, r1
   142e8:	adds	r6, r6, r3
   142ec:	eor	r2, r2, r0
   142f0:	adc	r7, r7, r2
   142f4:	eor	r4, sl, r6
   142f8:	eor	r5, fp, r7
   142fc:	lsr	ip, r4, #24
   14300:	mov	r9, r2
   14304:	orr	r2, ip, r5, lsl #8
   14308:	lsr	ip, r5, #24
   1430c:	mov	r8, r3
   14310:	orr	r3, ip, r4, lsl #8
   14314:	ldrd	r4, [sp, #216]	; 0xd8
   14318:	adds	r4, r4, r0
   1431c:	adc	r5, r5, r1
   14320:	adds	r4, r4, r2
   14324:	adc	r5, r5, r3
   14328:	mov	r0, r4
   1432c:	mov	r1, r5
   14330:	eor	r0, r0, r8
   14334:	eor	r1, r1, r9
   14338:	mov	r9, r1
   1433c:	lsr	r1, r0, #16
   14340:	orr	r1, r1, r9, lsl #16
   14344:	str	r1, [sp, #8]
   14348:	lsr	r1, r9, #16
   1434c:	orr	r1, r1, r0, lsl #16
   14350:	str	r1, [sp, #12]
   14354:	strd	r4, [sp, #64]	; 0x40
   14358:	ldrd	r0, [sp, #8]
   1435c:	ldrd	r8, [sp, #112]	; 0x70
   14360:	ldrd	r4, [sp, #32]
   14364:	adds	r0, r0, r6
   14368:	adc	r1, r1, r7
   1436c:	strd	r0, [sp, #120]	; 0x78
   14370:	eor	r0, r0, r2
   14374:	eor	r1, r1, r3
   14378:	mov	r3, r1
   1437c:	lsl	r2, r0, #1
   14380:	lsl	r1, r1, #1
   14384:	orr	fp, r1, r0, lsr #31
   14388:	orr	sl, r2, r3, lsr #31
   1438c:	ldrd	r0, [sp, #168]	; 0xa8
   14390:	ldrd	r2, [sp, #72]	; 0x48
   14394:	adds	r0, r0, r2
   14398:	adc	r1, r1, r3
   1439c:	ldrd	r2, [sp, #32]
   143a0:	adds	r2, r2, r0
   143a4:	adc	r3, r3, r1
   143a8:	mov	r0, r2
   143ac:	mov	r1, r3
   143b0:	ldrd	r2, [sp, #24]
   143b4:	eor	r3, r3, r1
   143b8:	adds	r8, r8, r3
   143bc:	eor	r2, r2, r0
   143c0:	adc	r9, r9, r2
   143c4:	eor	r4, r4, r8
   143c8:	eor	r5, r5, r9
   143cc:	lsr	ip, r4, #24
   143d0:	mov	r7, r2
   143d4:	orr	r2, ip, r5, lsl #8
   143d8:	lsr	ip, r5, #24
   143dc:	mov	r6, r3
   143e0:	orr	r3, ip, r4, lsl #8
   143e4:	ldrd	r4, [sp]
   143e8:	adds	r4, r4, r0
   143ec:	adc	r5, r5, r1
   143f0:	adds	r4, r4, r2
   143f4:	adc	r5, r5, r3
   143f8:	mov	r0, r4
   143fc:	mov	r1, r5
   14400:	eor	r0, r0, r6
   14404:	eor	r1, r1, r7
   14408:	mov	r7, r1
   1440c:	lsr	r1, r0, #16
   14410:	orr	r1, r1, r7, lsl #16
   14414:	str	r1, [sp, #24]
   14418:	lsr	r1, r7, #16
   1441c:	orr	r1, r1, r0, lsl #16
   14420:	str	r1, [sp, #28]
   14424:	ldrd	r0, [sp, #24]
   14428:	ldrd	r6, [sp, #88]	; 0x58
   1442c:	strd	r4, [sp, #72]	; 0x48
   14430:	adds	r0, r0, r8
   14434:	adc	r1, r1, r9
   14438:	ldrd	r4, [sp, #40]	; 0x28
   1443c:	strd	r0, [sp, #112]	; 0x70
   14440:	eor	r0, r0, r2
   14444:	eor	r1, r1, r3
   14448:	mov	r3, r1
   1444c:	lsl	r2, r0, #1
   14450:	orr	r3, r2, r3, lsr #31
   14454:	str	r3, [sp, #32]
   14458:	lsl	r1, r1, #1
   1445c:	add	r3, sp, #256	; 0x100
   14460:	orr	r1, r1, r0, lsr #31
   14464:	str	r1, [sp, #36]	; 0x24
   14468:	ldrd	r0, [r3]
   1446c:	ldrd	r2, [sp, #80]	; 0x50
   14470:	adds	r0, r0, r2
   14474:	adc	r1, r1, r3
   14478:	ldrd	r2, [sp, #40]	; 0x28
   1447c:	adds	r2, r2, r0
   14480:	adc	r3, r3, r1
   14484:	mov	r0, r2
   14488:	mov	r1, r3
   1448c:	ldrd	r2, [sp, #16]
   14490:	eor	r3, r3, r1
   14494:	adds	r6, r6, r3
   14498:	eor	r2, r2, r0
   1449c:	adc	r7, r7, r2
   144a0:	eor	r4, r4, r6
   144a4:	eor	r5, r5, r7
   144a8:	lsr	ip, r4, #24
   144ac:	mov	r9, r2
   144b0:	orr	r2, ip, r5, lsl #8
   144b4:	lsr	ip, r5, #24
   144b8:	mov	r8, r3
   144bc:	orr	r3, ip, r4, lsl #8
   144c0:	ldrd	r4, [sp, #200]	; 0xc8
   144c4:	adds	r4, r4, r0
   144c8:	adc	r5, r5, r1
   144cc:	adds	r4, r4, r2
   144d0:	adc	r5, r5, r3
   144d4:	mov	r0, r4
   144d8:	mov	r1, r5
   144dc:	eor	r0, r0, r8
   144e0:	eor	r1, r1, r9
   144e4:	mov	r9, r1
   144e8:	lsr	r1, r0, #16
   144ec:	orr	r1, r1, r9, lsl #16
   144f0:	str	r1, [sp, #16]
   144f4:	lsr	r1, r9, #16
   144f8:	orr	r1, r1, r0, lsl #16
   144fc:	str	r1, [sp, #20]
   14500:	ldrd	r0, [sp, #16]
   14504:	strd	r4, [sp, #80]	; 0x50
   14508:	ldrd	r8, [sp, #112]	; 0x70
   1450c:	adds	r0, r0, r6
   14510:	adc	r1, r1, r7
   14514:	strd	r0, [sp, #88]	; 0x58
   14518:	eor	r0, r0, r2
   1451c:	eor	r1, r1, r3
   14520:	mov	r3, r1
   14524:	lsl	r2, r0, #1
   14528:	lsl	r1, r1, #1
   1452c:	orr	r5, r1, r0, lsr #31
   14530:	orr	r4, r2, r3, lsr #31
   14534:	ldrd	r0, [sp, #208]	; 0xd0
   14538:	ldrd	r2, [sp, #104]	; 0x68
   1453c:	adds	r0, r0, r2
   14540:	adc	r1, r1, r3
   14544:	ldrd	r2, [sp, #8]
   14548:	adds	r0, r0, r4
   1454c:	adc	r1, r1, r5
   14550:	eor	r3, r3, r1
   14554:	adds	r8, r8, r3
   14558:	eor	r2, r2, r0
   1455c:	adc	r9, r9, r2
   14560:	eor	r4, r4, r8
   14564:	eor	r5, r5, r9
   14568:	lsr	ip, r4, #24
   1456c:	mov	r7, r2
   14570:	orr	r2, ip, r5, lsl #8
   14574:	lsr	ip, r5, #24
   14578:	mov	r6, r3
   1457c:	orr	r3, ip, r4, lsl #8
   14580:	ldrd	r4, [sp]
   14584:	adds	r4, r4, r0
   14588:	adc	r5, r5, r1
   1458c:	adds	r4, r4, r2
   14590:	adc	r5, r5, r3
   14594:	mov	r0, r4
   14598:	mov	r1, r5
   1459c:	eor	r0, r0, r6
   145a0:	eor	r1, r1, r7
   145a4:	mov	r7, r1
   145a8:	lsr	r1, r0, #16
   145ac:	orr	r1, r1, r7, lsl #16
   145b0:	str	r1, [sp, #8]
   145b4:	lsr	r1, r7, #16
   145b8:	orr	r1, r1, r0, lsl #16
   145bc:	str	r1, [sp, #12]
   145c0:	ldrd	r0, [sp, #8]
   145c4:	ldrd	r6, [sp, #88]	; 0x58
   145c8:	strd	r4, [sp, #104]	; 0x68
   145cc:	adds	r0, r0, r8
   145d0:	adc	r1, r1, r9
   145d4:	ldrd	r4, [sp, #56]	; 0x38
   145d8:	strd	r0, [sp, #112]	; 0x70
   145dc:	eor	r0, r0, r2
   145e0:	eor	r1, r1, r3
   145e4:	mov	r3, r1
   145e8:	lsl	r2, r0, #1
   145ec:	lsl	r1, r1, #1
   145f0:	orr	r1, r1, r0, lsr #31
   145f4:	orr	r3, r2, r3, lsr #31
   145f8:	str	r1, [sp, #44]	; 0x2c
   145fc:	str	r3, [sp, #40]	; 0x28
   14600:	ldrd	r0, [sp, #176]	; 0xb0
   14604:	ldrd	r2, [sp, #64]	; 0x40
   14608:	adds	r0, r0, r2
   1460c:	adc	r1, r1, r3
   14610:	ldrd	r2, [sp, #56]	; 0x38
   14614:	adds	r2, r2, r0
   14618:	adc	r3, r3, r1
   1461c:	mov	r0, r2
   14620:	mov	r1, r3
   14624:	ldrd	r2, [sp, #24]
   14628:	eor	r3, r3, r1
   1462c:	adds	r6, r6, r3
   14630:	eor	r2, r2, r0
   14634:	adc	r7, r7, r2
   14638:	eor	r4, r4, r6
   1463c:	eor	r5, r5, r7
   14640:	lsr	ip, r4, #24
   14644:	mov	r9, r2
   14648:	orr	r2, ip, r5, lsl #8
   1464c:	lsr	ip, r5, #24
   14650:	mov	r8, r3
   14654:	orr	r3, ip, r4, lsl #8
   14658:	ldrd	r4, [sp, #192]	; 0xc0
   1465c:	adds	r4, r4, r0
   14660:	adc	r5, r5, r1
   14664:	adds	r4, r4, r2
   14668:	adc	r5, r5, r3
   1466c:	mov	r0, r4
   14670:	mov	r1, r5
   14674:	eor	r0, r0, r8
   14678:	eor	r1, r1, r9
   1467c:	mov	r9, r1
   14680:	lsr	r1, r0, #16
   14684:	orr	r1, r1, r9, lsl #16
   14688:	str	r1, [sp, #24]
   1468c:	lsr	r1, r9, #16
   14690:	orr	r1, r1, r0, lsl #16
   14694:	str	r1, [sp, #28]
   14698:	ldrd	r0, [sp, #24]
   1469c:	strd	r4, [sp, #64]	; 0x40
   146a0:	adds	r0, r0, r6
   146a4:	adc	r1, r1, r7
   146a8:	ldrd	r6, [sp, #96]	; 0x60
   146ac:	strd	r0, [sp, #88]	; 0x58
   146b0:	eor	r0, r0, r2
   146b4:	eor	r1, r1, r3
   146b8:	mov	r3, r1
   146bc:	lsl	r2, r0, #1
   146c0:	lsl	r1, r1, #1
   146c4:	orr	r1, r1, r0, lsr #31
   146c8:	orr	r3, r2, r3, lsr #31
   146cc:	str	r1, [sp, #60]	; 0x3c
   146d0:	str	r3, [sp, #56]	; 0x38
   146d4:	ldrd	r0, [sp, #152]	; 0x98
   146d8:	ldrd	r2, [sp, #72]	; 0x48
   146dc:	adds	r0, r0, r2
   146e0:	adc	r1, r1, r3
   146e4:	ldrd	r2, [sp, #16]
   146e8:	adds	r0, r0, sl
   146ec:	adc	r1, r1, fp
   146f0:	eor	r3, r3, r1
   146f4:	adds	r6, r6, r3
   146f8:	eor	r2, r2, r0
   146fc:	adc	r7, r7, r2
   14700:	eor	r4, sl, r6
   14704:	eor	r5, fp, r7
   14708:	lsr	ip, r4, #24
   1470c:	mov	r9, r2
   14710:	orr	r2, ip, r5, lsl #8
   14714:	lsr	ip, r5, #24
   14718:	mov	r8, r3
   1471c:	orr	r3, ip, r4, lsl #8
   14720:	ldrd	r4, [sp, #168]	; 0xa8
   14724:	adds	r4, r4, r0
   14728:	adc	r5, r5, r1
   1472c:	adds	r4, r4, r2
   14730:	adc	r5, r5, r3
   14734:	mov	r0, r4
   14738:	mov	r1, r5
   1473c:	eor	r0, r0, r8
   14740:	eor	r1, r1, r9
   14744:	mov	r9, r1
   14748:	lsr	r1, r0, #16
   1474c:	orr	r1, r1, r9, lsl #16
   14750:	str	r1, [sp, #16]
   14754:	lsr	r1, r9, #16
   14758:	orr	r1, r1, r0, lsl #16
   1475c:	str	r1, [sp, #20]
   14760:	ldrd	r0, [sp, #16]
   14764:	strd	r4, [sp, #72]	; 0x48
   14768:	adds	r0, r0, r6
   1476c:	adc	r1, r1, r7
   14770:	strd	r0, [sp, #96]	; 0x60
   14774:	eor	r0, r0, r2
   14778:	eor	r1, r1, r3
   1477c:	mov	r3, r1
   14780:	lsl	r2, r0, #1
   14784:	lsl	r1, r1, #1
   14788:	orr	fp, r1, r0, lsr #31
   1478c:	orr	sl, r2, r3, lsr #31
   14790:	ldrd	r0, [sp, #216]	; 0xd8
   14794:	ldrd	r2, [sp, #80]	; 0x50
   14798:	ldrd	r6, [sp, #120]	; 0x78
   1479c:	ldrd	r4, [sp, #32]
   147a0:	adds	r0, r0, r2
   147a4:	adc	r1, r1, r3
   147a8:	ldrd	r2, [sp, #32]
   147ac:	adds	r2, r2, r0
   147b0:	adc	r3, r3, r1
   147b4:	mov	r0, r2
   147b8:	mov	r1, r3
   147bc:	ldrd	r2, [sp, #48]	; 0x30
   147c0:	eor	r3, r3, r1
   147c4:	adds	r6, r6, r3
   147c8:	eor	r2, r2, r0
   147cc:	adc	r7, r7, r2
   147d0:	eor	r4, r4, r6
   147d4:	eor	r5, r5, r7
   147d8:	lsr	ip, r4, #24
   147dc:	mov	r9, r2
   147e0:	orr	r2, ip, r5, lsl #8
   147e4:	lsr	ip, r5, #24
   147e8:	mov	r8, r3
   147ec:	orr	r3, ip, r4, lsl #8
   147f0:	add	ip, sp, #256	; 0x100
   147f4:	ldrd	r4, [ip]
   147f8:	adds	r4, r4, r0
   147fc:	adc	r5, r5, r1
   14800:	adds	r4, r4, r2
   14804:	adc	r5, r5, r3
   14808:	mov	r0, r4
   1480c:	mov	r1, r5
   14810:	eor	r0, r0, r8
   14814:	eor	r1, r1, r9
   14818:	mov	r9, r1
   1481c:	lsr	r1, r0, #16
   14820:	strd	r4, [sp, #80]	; 0x50
   14824:	orr	r4, r1, r9, lsl #16
   14828:	lsr	r1, r9, #16
   1482c:	adds	r6, r6, r4
   14830:	orr	r5, r1, r0, lsl #16
   14834:	adc	r7, r7, r5
   14838:	eor	r3, r3, r7
   1483c:	eor	r2, r2, r6
   14840:	lsl	r1, r3, #1
   14844:	orr	r1, r1, r2, lsr #31
   14848:	lsl	r2, r2, #1
   1484c:	orr	r3, r2, r3, lsr #31
   14850:	str	r1, [sp, #36]	; 0x24
   14854:	str	r3, [sp, #32]
   14858:	ldrd	r0, [sp, #248]	; 0xf8
   1485c:	ldrd	r2, [sp, #104]	; 0x68
   14860:	adds	r0, r0, r2
   14864:	adc	r1, r1, r3
   14868:	ldrd	r2, [sp, #56]	; 0x38
   1486c:	adds	r2, r2, r0
   14870:	adc	r3, r3, r1
   14874:	eor	r4, r4, r2
   14878:	eor	r5, r5, r3
   1487c:	mov	r0, r2
   14880:	mov	r1, r3
   14884:	ldrd	r2, [sp, #96]	; 0x60
   14888:	mov	r8, r5
   1488c:	mov	r9, r4
   14890:	adds	r2, r2, r5
   14894:	adc	r3, r3, r4
   14898:	ldrd	r4, [sp, #56]	; 0x38
   1489c:	strd	r2, [sp, #96]	; 0x60
   148a0:	eor	r4, r4, r2
   148a4:	eor	r5, r5, r3
   148a8:	lsr	ip, r4, #24
   148ac:	orr	r2, ip, r5, lsl #8
   148b0:	lsr	ip, r5, #24
   148b4:	orr	r3, ip, r4, lsl #8
   148b8:	ldrd	r4, [sp, #144]	; 0x90
   148bc:	adds	r4, r4, r0
   148c0:	adc	r5, r5, r1
   148c4:	adds	r4, r4, r2
   148c8:	adc	r5, r5, r3
   148cc:	mov	r0, r4
   148d0:	mov	r1, r5
   148d4:	eor	r0, r0, r8
   148d8:	eor	r1, r1, r9
   148dc:	mov	r9, r1
   148e0:	lsr	r1, r0, #16
   148e4:	orr	r1, r1, r9, lsl #16
   148e8:	str	r1, [sp, #48]	; 0x30
   148ec:	lsr	r1, r9, #16
   148f0:	orr	r1, r1, r0, lsl #16
   148f4:	str	r1, [sp, #52]	; 0x34
   148f8:	strd	r4, [sp, #104]	; 0x68
   148fc:	ldrd	r0, [sp, #96]	; 0x60
   14900:	ldrd	r4, [sp, #48]	; 0x30
   14904:	adds	r0, r0, r4
   14908:	adc	r1, r1, r5
   1490c:	strd	r0, [sp, #96]	; 0x60
   14910:	eor	r0, r0, r2
   14914:	eor	r1, r1, r3
   14918:	mov	r3, r1
   1491c:	lsl	r2, r0, #1
   14920:	lsl	r1, r1, #1
   14924:	orr	r1, r1, r0, lsr #31
   14928:	orr	r3, r2, r3, lsr #31
   1492c:	str	r1, [sp, #60]	; 0x3c
   14930:	str	r3, [sp, #56]	; 0x38
   14934:	ldrd	r0, [sp, #224]	; 0xe0
   14938:	ldrd	r2, [sp, #64]	; 0x40
   1493c:	adds	r0, r0, r2
   14940:	adc	r1, r1, r3
   14944:	ldrd	r2, [sp, #8]
   14948:	adds	r0, r0, sl
   1494c:	adc	r1, r1, fp
   14950:	eor	r3, r3, r1
   14954:	adds	r6, r6, r3
   14958:	eor	r2, r2, r0
   1495c:	adc	r7, r7, r2
   14960:	eor	r4, sl, r6
   14964:	eor	r5, fp, r7
   14968:	lsr	ip, r4, #24
   1496c:	mov	r9, r2
   14970:	orr	r2, ip, r5, lsl #8
   14974:	lsr	ip, r5, #24
   14978:	mov	r8, r3
   1497c:	orr	r3, ip, r4, lsl #8
   14980:	ldrd	r4, [sp, #232]	; 0xe8
   14984:	adds	r4, r4, r0
   14988:	adc	r5, r5, r1
   1498c:	adds	r4, r4, r2
   14990:	adc	r5, r5, r3
   14994:	mov	r0, r4
   14998:	mov	r1, r5
   1499c:	eor	r0, r0, r8
   149a0:	eor	r1, r1, r9
   149a4:	mov	r9, r1
   149a8:	lsr	r1, r0, #16
   149ac:	orr	r1, r1, r9, lsl #16
   149b0:	str	r1, [sp, #8]
   149b4:	lsr	r1, r9, #16
   149b8:	orr	r1, r1, r0, lsl #16
   149bc:	str	r1, [sp, #12]
   149c0:	strd	r4, [sp, #64]	; 0x40
   149c4:	ldrd	r0, [sp, #8]
   149c8:	ldrd	r8, [sp, #112]	; 0x70
   149cc:	ldrd	r4, [sp, #32]
   149d0:	adds	r0, r0, r6
   149d4:	adc	r1, r1, r7
   149d8:	strd	r0, [sp, #120]	; 0x78
   149dc:	eor	r0, r0, r2
   149e0:	eor	r1, r1, r3
   149e4:	mov	r3, r1
   149e8:	lsl	r2, r0, #1
   149ec:	lsl	r1, r1, #1
   149f0:	orr	fp, r1, r0, lsr #31
   149f4:	orr	sl, r2, r3, lsr #31
   149f8:	ldrd	r0, [sp, #184]	; 0xb8
   149fc:	ldrd	r2, [sp, #72]	; 0x48
   14a00:	adds	r0, r0, r2
   14a04:	adc	r1, r1, r3
   14a08:	ldrd	r2, [sp, #32]
   14a0c:	adds	r2, r2, r0
   14a10:	adc	r3, r3, r1
   14a14:	mov	r0, r2
   14a18:	mov	r1, r3
   14a1c:	ldrd	r2, [sp, #24]
   14a20:	eor	r3, r3, r1
   14a24:	adds	r8, r8, r3
   14a28:	eor	r2, r2, r0
   14a2c:	adc	r9, r9, r2
   14a30:	eor	r4, r4, r8
   14a34:	eor	r5, r5, r9
   14a38:	lsr	ip, r4, #24
   14a3c:	mov	r7, r2
   14a40:	orr	r2, ip, r5, lsl #8
   14a44:	lsr	ip, r5, #24
   14a48:	mov	r6, r3
   14a4c:	orr	r3, ip, r4, lsl #8
   14a50:	ldrd	r4, [sp, #200]	; 0xc8
   14a54:	adds	r4, r4, r0
   14a58:	adc	r5, r5, r1
   14a5c:	adds	r4, r4, r2
   14a60:	adc	r5, r5, r3
   14a64:	mov	r0, r4
   14a68:	mov	r1, r5
   14a6c:	eor	r0, r0, r6
   14a70:	eor	r1, r1, r7
   14a74:	mov	r7, r1
   14a78:	lsr	r1, r0, #16
   14a7c:	orr	r1, r1, r7, lsl #16
   14a80:	str	r1, [sp, #24]
   14a84:	lsr	r1, r7, #16
   14a88:	orr	r1, r1, r0, lsl #16
   14a8c:	str	r1, [sp, #28]
   14a90:	ldrd	r0, [sp, #24]
   14a94:	ldrd	r6, [sp, #88]	; 0x58
   14a98:	strd	r4, [sp, #72]	; 0x48
   14a9c:	adds	r0, r0, r8
   14aa0:	adc	r1, r1, r9
   14aa4:	ldrd	r4, [sp, #40]	; 0x28
   14aa8:	strd	r0, [sp, #112]	; 0x70
   14aac:	eor	r0, r0, r2
   14ab0:	eor	r1, r1, r3
   14ab4:	mov	r3, r1
   14ab8:	lsl	r2, r0, #1
   14abc:	lsl	r1, r1, #1
   14ac0:	orr	r1, r1, r0, lsr #31
   14ac4:	orr	r3, r2, r3, lsr #31
   14ac8:	str	r1, [sp, #36]	; 0x24
   14acc:	str	r3, [sp, #32]
   14ad0:	ldrd	r0, [sp, #160]	; 0xa0
   14ad4:	ldrd	r2, [sp, #80]	; 0x50
   14ad8:	adds	r0, r0, r2
   14adc:	adc	r1, r1, r3
   14ae0:	ldrd	r2, [sp, #40]	; 0x28
   14ae4:	adds	r2, r2, r0
   14ae8:	adc	r3, r3, r1
   14aec:	mov	r0, r2
   14af0:	mov	r1, r3
   14af4:	ldrd	r2, [sp, #16]
   14af8:	eor	r3, r3, r1
   14afc:	adds	r6, r6, r3
   14b00:	eor	r2, r2, r0
   14b04:	adc	r7, r7, r2
   14b08:	eor	r4, r4, r6
   14b0c:	eor	r5, r5, r7
   14b10:	lsr	ip, r4, #24
   14b14:	mov	r9, r2
   14b18:	orr	r2, ip, r5, lsl #8
   14b1c:	lsr	ip, r5, #24
   14b20:	mov	r8, r3
   14b24:	orr	r3, ip, r4, lsl #8
   14b28:	ldrd	r4, [sp, #240]	; 0xf0
   14b2c:	adds	r4, r4, r0
   14b30:	adc	r5, r5, r1
   14b34:	adds	r4, r4, r2
   14b38:	adc	r5, r5, r3
   14b3c:	mov	r0, r4
   14b40:	mov	r1, r5
   14b44:	eor	r0, r0, r8
   14b48:	eor	r1, r1, r9
   14b4c:	mov	r9, r1
   14b50:	lsr	r1, r0, #16
   14b54:	orr	r1, r1, r9, lsl #16
   14b58:	str	r1, [sp, #16]
   14b5c:	lsr	r1, r9, #16
   14b60:	orr	r1, r1, r0, lsl #16
   14b64:	str	r1, [sp, #20]
   14b68:	ldrd	r0, [sp, #16]
   14b6c:	strd	r4, [sp, #80]	; 0x50
   14b70:	ldrd	r8, [sp, #112]	; 0x70
   14b74:	adds	r0, r0, r6
   14b78:	adc	r1, r1, r7
   14b7c:	strd	r0, [sp, #88]	; 0x58
   14b80:	eor	r0, r0, r2
   14b84:	eor	r1, r1, r3
   14b88:	mov	r3, r1
   14b8c:	lsl	r2, r0, #1
   14b90:	lsl	r1, r1, #1
   14b94:	orr	r5, r1, r0, lsr #31
   14b98:	orr	r4, r2, r3, lsr #31
   14b9c:	ldrd	r0, [sp, #152]	; 0x98
   14ba0:	ldrd	r2, [sp, #104]	; 0x68
   14ba4:	adds	r0, r0, r2
   14ba8:	adc	r1, r1, r3
   14bac:	ldrd	r2, [sp, #8]
   14bb0:	adds	r0, r0, r4
   14bb4:	adc	r1, r1, r5
   14bb8:	eor	r3, r3, r1
   14bbc:	adds	r8, r8, r3
   14bc0:	eor	r2, r2, r0
   14bc4:	adc	r9, r9, r2
   14bc8:	eor	r4, r4, r8
   14bcc:	eor	r5, r5, r9
   14bd0:	lsr	ip, r4, #24
   14bd4:	mov	r7, r2
   14bd8:	orr	r2, ip, r5, lsl #8
   14bdc:	lsr	ip, r5, #24
   14be0:	mov	r6, r3
   14be4:	orr	r3, ip, r4, lsl #8
   14be8:	ldrd	r4, [sp, #232]	; 0xe8
   14bec:	adds	r4, r4, r0
   14bf0:	adc	r5, r5, r1
   14bf4:	adds	r4, r4, r2
   14bf8:	adc	r5, r5, r3
   14bfc:	mov	r0, r4
   14c00:	mov	r1, r5
   14c04:	eor	r0, r0, r6
   14c08:	eor	r1, r1, r7
   14c0c:	mov	r7, r1
   14c10:	lsr	r1, r0, #16
   14c14:	orr	r1, r1, r7, lsl #16
   14c18:	str	r1, [sp, #8]
   14c1c:	lsr	r1, r7, #16
   14c20:	orr	r1, r1, r0, lsl #16
   14c24:	str	r1, [sp, #12]
   14c28:	ldrd	r0, [sp, #8]
   14c2c:	ldrd	r6, [sp, #88]	; 0x58
   14c30:	strd	r4, [sp, #104]	; 0x68
   14c34:	adds	r0, r0, r8
   14c38:	adc	r1, r1, r9
   14c3c:	ldrd	r4, [sp, #56]	; 0x38
   14c40:	strd	r0, [sp, #112]	; 0x70
   14c44:	eor	r0, r0, r2
   14c48:	eor	r1, r1, r3
   14c4c:	mov	r3, r1
   14c50:	lsl	r2, r0, #1
   14c54:	lsl	r1, r1, #1
   14c58:	orr	r1, r1, r0, lsr #31
   14c5c:	orr	r3, r2, r3, lsr #31
   14c60:	str	r1, [sp, #44]	; 0x2c
   14c64:	str	r3, [sp, #40]	; 0x28
   14c68:	ldrd	r0, [sp, #184]	; 0xb8
   14c6c:	ldrd	r2, [sp, #64]	; 0x40
   14c70:	adds	r0, r0, r2
   14c74:	adc	r1, r1, r3
   14c78:	ldrd	r2, [sp, #56]	; 0x38
   14c7c:	adds	r2, r2, r0
   14c80:	adc	r3, r3, r1
   14c84:	mov	r0, r2
   14c88:	mov	r1, r3
   14c8c:	ldrd	r2, [sp, #24]
   14c90:	eor	r3, r3, r1
   14c94:	adds	r6, r6, r3
   14c98:	eor	r2, r2, r0
   14c9c:	adc	r7, r7, r2
   14ca0:	eor	r4, r4, r6
   14ca4:	eor	r5, r5, r7
   14ca8:	lsr	ip, r4, #24
   14cac:	mov	r9, r2
   14cb0:	orr	r2, ip, r5, lsl #8
   14cb4:	lsr	ip, r5, #24
   14cb8:	mov	r8, r3
   14cbc:	orr	r3, ip, r4, lsl #8
   14cc0:	ldrd	r4, [sp, #216]	; 0xd8
   14cc4:	adds	r4, r4, r0
   14cc8:	adc	r5, r5, r1
   14ccc:	adds	r4, r4, r2
   14cd0:	adc	r5, r5, r3
   14cd4:	mov	r0, r4
   14cd8:	mov	r1, r5
   14cdc:	eor	r0, r0, r8
   14ce0:	eor	r1, r1, r9
   14ce4:	mov	r9, r1
   14ce8:	lsr	r1, r0, #16
   14cec:	orr	r1, r1, r9, lsl #16
   14cf0:	str	r1, [sp, #24]
   14cf4:	lsr	r1, r9, #16
   14cf8:	orr	r1, r1, r0, lsl #16
   14cfc:	str	r1, [sp, #28]
   14d00:	ldrd	r0, [sp, #24]
   14d04:	strd	r4, [sp, #64]	; 0x40
   14d08:	adds	r0, r0, r6
   14d0c:	adc	r1, r1, r7
   14d10:	ldrd	r6, [sp, #96]	; 0x60
   14d14:	strd	r0, [sp, #88]	; 0x58
   14d18:	eor	r0, r0, r2
   14d1c:	eor	r1, r1, r3
   14d20:	mov	r3, r1
   14d24:	lsl	r2, r0, #1
   14d28:	lsl	r1, r1, #1
   14d2c:	orr	r1, r1, r0, lsr #31
   14d30:	orr	r3, r2, r3, lsr #31
   14d34:	str	r1, [sp, #60]	; 0x3c
   14d38:	str	r3, [sp, #56]	; 0x38
   14d3c:	ldrd	r0, [sp]
   14d40:	ldrd	r2, [sp, #72]	; 0x48
   14d44:	adds	r0, r0, r2
   14d48:	adc	r1, r1, r3
   14d4c:	ldrd	r2, [sp, #16]
   14d50:	adds	r0, r0, sl
   14d54:	adc	r1, r1, fp
   14d58:	eor	r3, r3, r1
   14d5c:	adds	r6, r6, r3
   14d60:	eor	r2, r2, r0
   14d64:	adc	r7, r7, r2
   14d68:	eor	r4, sl, r6
   14d6c:	eor	r5, fp, r7
   14d70:	lsr	ip, r4, #24
   14d74:	mov	r9, r2
   14d78:	orr	r2, ip, r5, lsl #8
   14d7c:	lsr	ip, r5, #24
   14d80:	mov	r8, r3
   14d84:	orr	r3, ip, r4, lsl #8
   14d88:	ldrd	r4, [sp, #224]	; 0xe0
   14d8c:	adds	r4, r4, r0
   14d90:	adc	r5, r5, r1
   14d94:	adds	r4, r4, r2
   14d98:	adc	r5, r5, r3
   14d9c:	mov	r0, r4
   14da0:	mov	r1, r5
   14da4:	eor	r0, r0, r8
   14da8:	eor	r1, r1, r9
   14dac:	mov	r9, r1
   14db0:	lsr	r1, r0, #16
   14db4:	orr	r1, r1, r9, lsl #16
   14db8:	str	r1, [sp, #16]
   14dbc:	lsr	r1, r9, #16
   14dc0:	orr	r1, r1, r0, lsl #16
   14dc4:	str	r1, [sp, #20]
   14dc8:	ldrd	r0, [sp, #16]
   14dcc:	strd	r4, [sp, #72]	; 0x48
   14dd0:	adds	r0, r0, r6
   14dd4:	adc	r1, r1, r7
   14dd8:	strd	r0, [sp, #96]	; 0x60
   14ddc:	eor	r0, r0, r2
   14de0:	eor	r1, r1, r3
   14de4:	mov	r3, r1
   14de8:	lsl	r2, r0, #1
   14dec:	lsl	r1, r1, #1
   14df0:	orr	fp, r1, r0, lsr #31
   14df4:	orr	sl, r2, r3, lsr #31
   14df8:	ldrd	r0, [sp, #200]	; 0xc8
   14dfc:	ldrd	r2, [sp, #80]	; 0x50
   14e00:	ldrd	r6, [sp, #120]	; 0x78
   14e04:	ldrd	r4, [sp, #32]
   14e08:	adds	r0, r0, r2
   14e0c:	adc	r1, r1, r3
   14e10:	ldrd	r2, [sp, #32]
   14e14:	adds	r2, r2, r0
   14e18:	adc	r3, r3, r1
   14e1c:	mov	r0, r2
   14e20:	mov	r1, r3
   14e24:	ldrd	r2, [sp, #48]	; 0x30
   14e28:	eor	r3, r3, r1
   14e2c:	adds	r6, r6, r3
   14e30:	eor	r2, r2, r0
   14e34:	adc	r7, r7, r2
   14e38:	eor	r4, r4, r6
   14e3c:	eor	r5, r5, r7
   14e40:	lsr	ip, r4, #24
   14e44:	mov	r9, r2
   14e48:	orr	r2, ip, r5, lsl #8
   14e4c:	lsr	ip, r5, #24
   14e50:	mov	r8, r3
   14e54:	orr	r3, ip, r4, lsl #8
   14e58:	ldrd	r4, [sp, #160]	; 0xa0
   14e5c:	adds	r4, r4, r0
   14e60:	adc	r5, r5, r1
   14e64:	adds	r4, r4, r2
   14e68:	adc	r5, r5, r3
   14e6c:	mov	r0, r4
   14e70:	mov	r1, r5
   14e74:	eor	r0, r0, r8
   14e78:	eor	r1, r1, r9
   14e7c:	mov	r9, r1
   14e80:	lsr	r1, r0, #16
   14e84:	strd	r4, [sp, #80]	; 0x50
   14e88:	orr	r4, r1, r9, lsl #16
   14e8c:	lsr	r1, r9, #16
   14e90:	adds	r6, r6, r4
   14e94:	orr	r5, r1, r0, lsl #16
   14e98:	adc	r7, r7, r5
   14e9c:	eor	r3, r3, r7
   14ea0:	eor	r2, r2, r6
   14ea4:	lsl	r1, r3, #1
   14ea8:	orr	r1, r1, r2, lsr #31
   14eac:	lsl	r2, r2, #1
   14eb0:	orr	r3, r2, r3, lsr #31
   14eb4:	str	r1, [sp, #36]	; 0x24
   14eb8:	str	r3, [sp, #32]
   14ebc:	ldrd	r0, [sp, #168]	; 0xa8
   14ec0:	ldrd	r2, [sp, #104]	; 0x68
   14ec4:	adds	r0, r0, r2
   14ec8:	adc	r1, r1, r3
   14ecc:	ldrd	r2, [sp, #56]	; 0x38
   14ed0:	adds	r2, r2, r0
   14ed4:	adc	r3, r3, r1
   14ed8:	eor	r4, r4, r2
   14edc:	eor	r5, r5, r3
   14ee0:	mov	r0, r2
   14ee4:	mov	r1, r3
   14ee8:	ldrd	r2, [sp, #96]	; 0x60
   14eec:	mov	r8, r5
   14ef0:	mov	r9, r4
   14ef4:	adds	r2, r2, r5
   14ef8:	adc	r3, r3, r4
   14efc:	ldrd	r4, [sp, #56]	; 0x38
   14f00:	strd	r2, [sp, #96]	; 0x60
   14f04:	eor	r4, r4, r2
   14f08:	eor	r5, r5, r3
   14f0c:	lsr	ip, r4, #24
   14f10:	orr	r2, ip, r5, lsl #8
   14f14:	lsr	ip, r5, #24
   14f18:	orr	r3, ip, r4, lsl #8
   14f1c:	ldrd	r4, [sp, #240]	; 0xf0
   14f20:	adds	r4, r4, r0
   14f24:	adc	r5, r5, r1
   14f28:	adds	r4, r4, r2
   14f2c:	adc	r5, r5, r3
   14f30:	mov	r0, r4
   14f34:	mov	r1, r5
   14f38:	eor	r0, r0, r8
   14f3c:	eor	r1, r1, r9
   14f40:	mov	r9, r1
   14f44:	lsr	r1, r0, #16
   14f48:	orr	r1, r1, r9, lsl #16
   14f4c:	str	r1, [sp, #48]	; 0x30
   14f50:	lsr	r1, r9, #16
   14f54:	orr	r1, r1, r0, lsl #16
   14f58:	str	r1, [sp, #52]	; 0x34
   14f5c:	strd	r4, [sp, #104]	; 0x68
   14f60:	ldrd	r0, [sp, #96]	; 0x60
   14f64:	ldrd	r4, [sp, #48]	; 0x30
   14f68:	adds	r0, r0, r4
   14f6c:	adc	r1, r1, r5
   14f70:	strd	r0, [sp, #96]	; 0x60
   14f74:	eor	r0, r0, r2
   14f78:	eor	r1, r1, r3
   14f7c:	mov	r3, r1
   14f80:	lsl	r2, r0, #1
   14f84:	lsl	r1, r1, #1
   14f88:	orr	r1, r1, r0, lsr #31
   14f8c:	orr	r3, r2, r3, lsr #31
   14f90:	str	r1, [sp, #60]	; 0x3c
   14f94:	str	r3, [sp, #56]	; 0x38
   14f98:	ldrd	r0, [sp, #192]	; 0xc0
   14f9c:	ldrd	r2, [sp, #64]	; 0x40
   14fa0:	adds	r0, r0, r2
   14fa4:	adc	r1, r1, r3
   14fa8:	ldrd	r2, [sp, #8]
   14fac:	adds	r0, r0, sl
   14fb0:	adc	r1, r1, fp
   14fb4:	eor	r3, r3, r1
   14fb8:	adds	r6, r6, r3
   14fbc:	eor	r2, r2, r0
   14fc0:	adc	r7, r7, r2
   14fc4:	eor	r4, sl, r6
   14fc8:	eor	r5, fp, r7
   14fcc:	lsr	ip, r4, #24
   14fd0:	mov	r9, r2
   14fd4:	orr	r2, ip, r5, lsl #8
   14fd8:	lsr	ip, r5, #24
   14fdc:	mov	r8, r3
   14fe0:	orr	r3, ip, r4, lsl #8
   14fe4:	ldrd	r4, [sp, #176]	; 0xb0
   14fe8:	adds	r4, r4, r0
   14fec:	adc	r5, r5, r1
   14ff0:	adds	r4, r4, r2
   14ff4:	adc	r5, r5, r3
   14ff8:	mov	r0, r4
   14ffc:	mov	r1, r5
   15000:	eor	r0, r0, r8
   15004:	eor	r1, r1, r9
   15008:	mov	r9, r1
   1500c:	lsr	r1, r0, #16
   15010:	orr	r1, r1, r9, lsl #16
   15014:	str	r1, [sp, #8]
   15018:	lsr	r1, r9, #16
   1501c:	orr	r1, r1, r0, lsl #16
   15020:	str	r1, [sp, #12]
   15024:	strd	r4, [sp, #64]	; 0x40
   15028:	ldrd	r0, [sp, #8]
   1502c:	ldrd	r8, [sp, #112]	; 0x70
   15030:	ldrd	r4, [sp, #32]
   15034:	adds	r0, r0, r6
   15038:	adc	r1, r1, r7
   1503c:	strd	r0, [sp, #120]	; 0x78
   15040:	eor	r0, r0, r2
   15044:	eor	r1, r1, r3
   15048:	mov	r3, r1
   1504c:	lsl	r2, r0, #1
   15050:	orr	sl, r2, r3, lsr #31
   15054:	add	r3, sp, #256	; 0x100
   15058:	lsl	r1, r1, #1
   1505c:	orr	fp, r1, r0, lsr #31
   15060:	ldrd	r0, [r3]
   15064:	ldrd	r2, [sp, #72]	; 0x48
   15068:	adds	r0, r0, r2
   1506c:	adc	r1, r1, r3
   15070:	ldrd	r2, [sp, #32]
   15074:	adds	r2, r2, r0
   15078:	adc	r3, r3, r1
   1507c:	mov	r0, r2
   15080:	mov	r1, r3
   15084:	ldrd	r2, [sp, #24]
   15088:	eor	r3, r3, r1
   1508c:	adds	r8, r8, r3
   15090:	eor	r2, r2, r0
   15094:	adc	r9, r9, r2
   15098:	eor	r4, r4, r8
   1509c:	eor	r5, r5, r9
   150a0:	lsr	ip, r4, #24
   150a4:	mov	r7, r2
   150a8:	orr	r2, ip, r5, lsl #8
   150ac:	lsr	ip, r5, #24
   150b0:	mov	r6, r3
   150b4:	orr	r3, ip, r4, lsl #8
   150b8:	ldrd	r4, [sp, #248]	; 0xf8
   150bc:	adds	r4, r4, r0
   150c0:	adc	r5, r5, r1
   150c4:	adds	r4, r4, r2
   150c8:	adc	r5, r5, r3
   150cc:	mov	r0, r4
   150d0:	mov	r1, r5
   150d4:	eor	r0, r0, r6
   150d8:	eor	r1, r1, r7
   150dc:	mov	r7, r1
   150e0:	lsr	r1, r0, #16
   150e4:	orr	r1, r1, r7, lsl #16
   150e8:	str	r1, [sp, #24]
   150ec:	lsr	r1, r7, #16
   150f0:	orr	r1, r1, r0, lsl #16
   150f4:	str	r1, [sp, #28]
   150f8:	ldrd	r0, [sp, #24]
   150fc:	ldrd	r6, [sp, #88]	; 0x58
   15100:	strd	r4, [sp, #72]	; 0x48
   15104:	adds	r0, r0, r8
   15108:	adc	r1, r1, r9
   1510c:	ldrd	r4, [sp, #40]	; 0x28
   15110:	strd	r0, [sp, #112]	; 0x70
   15114:	eor	r0, r0, r2
   15118:	eor	r1, r1, r3
   1511c:	mov	r3, r1
   15120:	lsl	r2, r0, #1
   15124:	lsl	r1, r1, #1
   15128:	orr	r1, r1, r0, lsr #31
   1512c:	orr	r3, r2, r3, lsr #31
   15130:	str	r1, [sp, #36]	; 0x24
   15134:	str	r3, [sp, #32]
   15138:	ldrd	r0, [sp, #144]	; 0x90
   1513c:	ldrd	r2, [sp, #80]	; 0x50
   15140:	adds	r0, r0, r2
   15144:	adc	r1, r1, r3
   15148:	ldrd	r2, [sp, #40]	; 0x28
   1514c:	adds	r2, r2, r0
   15150:	adc	r3, r3, r1
   15154:	mov	r0, r2
   15158:	mov	r1, r3
   1515c:	ldrd	r2, [sp, #16]
   15160:	eor	r3, r3, r1
   15164:	adds	r6, r6, r3
   15168:	eor	r2, r2, r0
   1516c:	adc	r7, r7, r2
   15170:	eor	r4, r4, r6
   15174:	eor	r5, r5, r7
   15178:	lsr	ip, r4, #24
   1517c:	mov	r9, r2
   15180:	orr	r2, ip, r5, lsl #8
   15184:	lsr	ip, r5, #24
   15188:	mov	r8, r3
   1518c:	orr	r3, ip, r4, lsl #8
   15190:	ldrd	r4, [sp, #208]	; 0xd0
   15194:	adds	r4, r4, r0
   15198:	adc	r5, r5, r1
   1519c:	adds	r4, r4, r2
   151a0:	adc	r5, r5, r3
   151a4:	mov	r0, r4
   151a8:	mov	r1, r5
   151ac:	eor	r0, r0, r8
   151b0:	eor	r1, r1, r9
   151b4:	mov	r9, r1
   151b8:	lsr	r1, r0, #16
   151bc:	orr	r1, r1, r9, lsl #16
   151c0:	str	r1, [sp, #16]
   151c4:	lsr	r1, r9, #16
   151c8:	orr	r1, r1, r0, lsl #16
   151cc:	str	r1, [sp, #20]
   151d0:	ldrd	r0, [sp, #16]
   151d4:	strd	r4, [sp, #80]	; 0x50
   151d8:	ldrd	r8, [sp, #112]	; 0x70
   151dc:	adds	r0, r0, r6
   151e0:	adc	r1, r1, r7
   151e4:	strd	r0, [sp, #88]	; 0x58
   151e8:	eor	r0, r0, r2
   151ec:	eor	r1, r1, r3
   151f0:	mov	r3, r1
   151f4:	lsl	r2, r0, #1
   151f8:	lsl	r1, r1, #1
   151fc:	orr	r5, r1, r0, lsr #31
   15200:	orr	r4, r2, r3, lsr #31
   15204:	ldrd	r0, [sp, #232]	; 0xe8
   15208:	ldrd	r2, [sp, #104]	; 0x68
   1520c:	adds	r0, r0, r2
   15210:	adc	r1, r1, r3
   15214:	ldrd	r2, [sp, #8]
   15218:	adds	r0, r0, r4
   1521c:	adc	r1, r1, r5
   15220:	eor	r3, r3, r1
   15224:	adds	r8, r8, r3
   15228:	eor	r2, r2, r0
   1522c:	adc	r9, r9, r2
   15230:	eor	r4, r4, r8
   15234:	eor	r5, r5, r9
   15238:	lsr	ip, r4, #24
   1523c:	mov	r7, r2
   15240:	orr	r2, ip, r5, lsl #8
   15244:	lsr	ip, r5, #24
   15248:	mov	r6, r3
   1524c:	orr	r3, ip, r4, lsl #8
   15250:	ldrd	r4, [sp, #176]	; 0xb0
   15254:	adds	r4, r4, r0
   15258:	adc	r5, r5, r1
   1525c:	adds	r4, r4, r2
   15260:	adc	r5, r5, r3
   15264:	mov	r0, r4
   15268:	mov	r1, r5
   1526c:	eor	r0, r0, r6
   15270:	eor	r1, r1, r7
   15274:	mov	r7, r1
   15278:	lsr	r1, r0, #16
   1527c:	orr	r1, r1, r7, lsl #16
   15280:	str	r1, [sp, #8]
   15284:	lsr	r1, r7, #16
   15288:	orr	r1, r1, r0, lsl #16
   1528c:	str	r1, [sp, #12]
   15290:	ldrd	r0, [sp, #8]
   15294:	ldrd	r6, [sp, #88]	; 0x58
   15298:	strd	r4, [sp, #104]	; 0x68
   1529c:	adds	r0, r0, r8
   152a0:	adc	r1, r1, r9
   152a4:	ldrd	r4, [sp, #56]	; 0x38
   152a8:	strd	r0, [sp, #112]	; 0x70
   152ac:	eor	r0, r0, r2
   152b0:	eor	r1, r1, r3
   152b4:	mov	r3, r1
   152b8:	lsl	r2, r0, #1
   152bc:	lsl	r1, r1, #1
   152c0:	orr	r1, r1, r0, lsr #31
   152c4:	orr	r3, r2, r3, lsr #31
   152c8:	str	r1, [sp, #44]	; 0x2c
   152cc:	str	r3, [sp, #40]	; 0x28
   152d0:	ldrd	r0, [sp, #144]	; 0x90
   152d4:	ldrd	r2, [sp, #64]	; 0x40
   152d8:	adds	r0, r0, r2
   152dc:	adc	r1, r1, r3
   152e0:	ldrd	r2, [sp, #56]	; 0x38
   152e4:	adds	r2, r2, r0
   152e8:	adc	r3, r3, r1
   152ec:	mov	r0, r2
   152f0:	mov	r1, r3
   152f4:	ldrd	r2, [sp, #24]
   152f8:	eor	r3, r3, r1
   152fc:	adds	r6, r6, r3
   15300:	eor	r2, r2, r0
   15304:	adc	r7, r7, r2
   15308:	eor	r4, r4, r6
   1530c:	eor	r5, r5, r7
   15310:	lsr	ip, r4, #24
   15314:	mov	r9, r2
   15318:	orr	r2, ip, r5, lsl #8
   1531c:	lsr	ip, r5, #24
   15320:	mov	r8, r3
   15324:	orr	r3, ip, r4, lsl #8
   15328:	add	ip, sp, #256	; 0x100
   1532c:	ldrd	r4, [ip]
   15330:	adds	r4, r4, r0
   15334:	adc	r5, r5, r1
   15338:	adds	r4, r4, r2
   1533c:	adc	r5, r5, r3
   15340:	mov	r0, r4
   15344:	mov	r1, r5
   15348:	eor	r0, r0, r8
   1534c:	eor	r1, r1, r9
   15350:	mov	r9, r1
   15354:	lsr	r1, r0, #16
   15358:	orr	r1, r1, r9, lsl #16
   1535c:	str	r1, [sp, #24]
   15360:	lsr	r1, r9, #16
   15364:	orr	r1, r1, r0, lsl #16
   15368:	str	r1, [sp, #28]
   1536c:	ldrd	r0, [sp, #24]
   15370:	strd	r4, [sp, #64]	; 0x40
   15374:	adds	r0, r0, r6
   15378:	adc	r1, r1, r7
   1537c:	ldrd	r6, [sp, #96]	; 0x60
   15380:	strd	r0, [sp, #88]	; 0x58
   15384:	eor	r0, r0, r2
   15388:	eor	r1, r1, r3
   1538c:	mov	r3, r1
   15390:	lsl	r2, r0, #1
   15394:	lsl	r1, r1, #1
   15398:	orr	r1, r1, r0, lsr #31
   1539c:	orr	r3, r2, r3, lsr #31
   153a0:	str	r1, [sp, #60]	; 0x3c
   153a4:	str	r3, [sp, #56]	; 0x38
   153a8:	ldrd	r0, [sp, #248]	; 0xf8
   153ac:	ldrd	r2, [sp, #72]	; 0x48
   153b0:	adds	r0, r0, r2
   153b4:	adc	r1, r1, r3
   153b8:	ldrd	r2, [sp, #16]
   153bc:	adds	r0, r0, sl
   153c0:	adc	r1, r1, fp
   153c4:	eor	r3, r3, r1
   153c8:	adds	r6, r6, r3
   153cc:	eor	r2, r2, r0
   153d0:	adc	r7, r7, r2
   153d4:	eor	r4, sl, r6
   153d8:	eor	r5, fp, r7
   153dc:	lsr	ip, r4, #24
   153e0:	mov	r9, r2
   153e4:	orr	r2, ip, r5, lsl #8
   153e8:	lsr	ip, r5, #24
   153ec:	mov	r8, r3
   153f0:	orr	r3, ip, r4, lsl #8
   153f4:	ldrd	r4, [sp, #240]	; 0xf0
   153f8:	adds	r4, r4, r0
   153fc:	adc	r5, r5, r1
   15400:	adds	r4, r4, r2
   15404:	adc	r5, r5, r3
   15408:	mov	r0, r4
   1540c:	mov	r1, r5
   15410:	eor	r0, r0, r8
   15414:	eor	r1, r1, r9
   15418:	mov	r9, r1
   1541c:	lsr	r1, r0, #16
   15420:	orr	r1, r1, r9, lsl #16
   15424:	str	r1, [sp, #16]
   15428:	lsr	r1, r9, #16
   1542c:	orr	r1, r1, r0, lsl #16
   15430:	str	r1, [sp, #20]
   15434:	ldrd	r0, [sp, #16]
   15438:	strd	r4, [sp, #72]	; 0x48
   1543c:	adds	r0, r0, r6
   15440:	adc	r1, r1, r7
   15444:	strd	r0, [sp, #96]	; 0x60
   15448:	eor	r0, r0, r2
   1544c:	eor	r1, r1, r3
   15450:	mov	r3, r1
   15454:	lsl	r2, r0, #1
   15458:	lsl	r1, r1, #1
   1545c:	orr	fp, r1, r0, lsr #31
   15460:	orr	sl, r2, r3, lsr #31
   15464:	ldrd	r0, [sp, #168]	; 0xa8
   15468:	ldrd	r2, [sp, #80]	; 0x50
   1546c:	ldrd	r6, [sp, #120]	; 0x78
   15470:	ldrd	r4, [sp, #32]
   15474:	adds	r0, r0, r2
   15478:	adc	r1, r1, r3
   1547c:	ldrd	r2, [sp, #32]
   15480:	adds	r2, r2, r0
   15484:	adc	r3, r3, r1
   15488:	mov	r0, r2
   1548c:	mov	r1, r3
   15490:	ldrd	r2, [sp, #48]	; 0x30
   15494:	eor	r3, r3, r1
   15498:	adds	r6, r6, r3
   1549c:	eor	r2, r2, r0
   154a0:	adc	r7, r7, r2
   154a4:	eor	r4, r4, r6
   154a8:	eor	r5, r5, r7
   154ac:	lsr	ip, r4, #24
   154b0:	mov	r9, r2
   154b4:	orr	r2, ip, r5, lsl #8
   154b8:	lsr	ip, r5, #24
   154bc:	mov	r8, r3
   154c0:	orr	r3, ip, r4, lsl #8
   154c4:	ldrd	r4, [sp, #216]	; 0xd8
   154c8:	adds	r4, r4, r0
   154cc:	adc	r5, r5, r1
   154d0:	adds	r4, r4, r2
   154d4:	adc	r5, r5, r3
   154d8:	mov	r0, r4
   154dc:	mov	r1, r5
   154e0:	eor	r0, r0, r8
   154e4:	eor	r1, r1, r9
   154e8:	mov	r9, r1
   154ec:	lsr	r1, r0, #16
   154f0:	strd	r4, [sp, #80]	; 0x50
   154f4:	orr	r4, r1, r9, lsl #16
   154f8:	lsr	r1, r9, #16
   154fc:	adds	r6, r6, r4
   15500:	orr	r5, r1, r0, lsl #16
   15504:	adc	r7, r7, r5
   15508:	eor	r3, r3, r7
   1550c:	eor	r2, r2, r6
   15510:	lsl	r1, r3, #1
   15514:	orr	r1, r1, r2, lsr #31
   15518:	lsl	r2, r2, #1
   1551c:	orr	r3, r2, r3, lsr #31
   15520:	str	r1, [sp, #36]	; 0x24
   15524:	str	r3, [sp, #32]
   15528:	ldrd	r0, [sp]
   1552c:	ldrd	r2, [sp, #104]	; 0x68
   15530:	adds	r0, r0, r2
   15534:	adc	r1, r1, r3
   15538:	ldrd	r2, [sp, #56]	; 0x38
   1553c:	adds	r2, r2, r0
   15540:	adc	r3, r3, r1
   15544:	eor	r4, r4, r2
   15548:	eor	r5, r5, r3
   1554c:	mov	r0, r2
   15550:	mov	r1, r3
   15554:	ldrd	r2, [sp, #96]	; 0x60
   15558:	mov	r8, r5
   1555c:	mov	r9, r4
   15560:	adds	r2, r2, r5
   15564:	adc	r3, r3, r4
   15568:	ldrd	r4, [sp, #56]	; 0x38
   1556c:	strd	r2, [sp, #96]	; 0x60
   15570:	eor	r4, r4, r2
   15574:	eor	r5, r5, r3
   15578:	lsr	ip, r4, #24
   1557c:	orr	r2, ip, r5, lsl #8
   15580:	lsr	ip, r5, #24
   15584:	orr	r3, ip, r4, lsl #8
   15588:	ldrd	r4, [sp, #192]	; 0xc0
   1558c:	adds	r4, r4, r0
   15590:	adc	r5, r5, r1
   15594:	adds	r4, r4, r2
   15598:	adc	r5, r5, r3
   1559c:	mov	r0, r4
   155a0:	mov	r1, r5
   155a4:	eor	r0, r0, r8
   155a8:	eor	r1, r1, r9
   155ac:	mov	r9, r1
   155b0:	lsr	r1, r0, #16
   155b4:	orr	r1, r1, r9, lsl #16
   155b8:	str	r1, [sp, #48]	; 0x30
   155bc:	lsr	r1, r9, #16
   155c0:	orr	r1, r1, r0, lsl #16
   155c4:	str	r1, [sp, #52]	; 0x34
   155c8:	strd	r4, [sp, #104]	; 0x68
   155cc:	ldrd	r0, [sp, #96]	; 0x60
   155d0:	ldrd	r4, [sp, #48]	; 0x30
   155d4:	adds	r0, r0, r4
   155d8:	adc	r1, r1, r5
   155dc:	strd	r0, [sp, #96]	; 0x60
   155e0:	eor	r0, r0, r2
   155e4:	eor	r1, r1, r3
   155e8:	mov	r3, r1
   155ec:	lsl	r2, r0, #1
   155f0:	lsl	r1, r1, #1
   155f4:	orr	r1, r1, r0, lsr #31
   155f8:	orr	r3, r2, r3, lsr #31
   155fc:	str	r1, [sp, #60]	; 0x3c
   15600:	str	r3, [sp, #56]	; 0x38
   15604:	ldrd	r0, [sp, #184]	; 0xb8
   15608:	ldrd	r2, [sp, #64]	; 0x40
   1560c:	adds	r0, r0, r2
   15610:	adc	r1, r1, r3
   15614:	ldrd	r2, [sp, #8]
   15618:	adds	r0, r0, sl
   1561c:	adc	r1, r1, fp
   15620:	eor	r3, r3, r1
   15624:	adds	r6, r6, r3
   15628:	eor	r2, r2, r0
   1562c:	adc	r7, r7, r2
   15630:	eor	r4, sl, r6
   15634:	eor	r5, fp, r7
   15638:	lsr	ip, r4, #24
   1563c:	mov	r9, r2
   15640:	orr	r2, ip, r5, lsl #8
   15644:	lsr	ip, r5, #24
   15648:	mov	r8, r3
   1564c:	orr	r3, ip, r4, lsl #8
   15650:	ldrd	r4, [sp, #160]	; 0xa0
   15654:	adds	r4, r4, r0
   15658:	adc	r5, r5, r1
   1565c:	adds	r4, r4, r2
   15660:	adc	r5, r5, r3
   15664:	mov	r0, r4
   15668:	mov	r1, r5
   1566c:	eor	r0, r0, r8
   15670:	eor	r1, r1, r9
   15674:	mov	r9, r1
   15678:	lsr	r1, r0, #16
   1567c:	orr	r1, r1, r9, lsl #16
   15680:	str	r1, [sp, #8]
   15684:	lsr	r1, r9, #16
   15688:	orr	r1, r1, r0, lsl #16
   1568c:	str	r1, [sp, #12]
   15690:	strd	r4, [sp, #64]	; 0x40
   15694:	ldrd	r0, [sp, #8]
   15698:	ldrd	r8, [sp, #112]	; 0x70
   1569c:	ldrd	r4, [sp, #32]
   156a0:	adds	r0, r0, r6
   156a4:	adc	r1, r1, r7
   156a8:	strd	r0, [sp, #120]	; 0x78
   156ac:	eor	r0, r0, r2
   156b0:	eor	r1, r1, r3
   156b4:	mov	r3, r1
   156b8:	lsl	r2, r0, #1
   156bc:	lsl	r1, r1, #1
   156c0:	orr	fp, r1, r0, lsr #31
   156c4:	orr	sl, r2, r3, lsr #31
   156c8:	ldrd	r0, [sp, #208]	; 0xd0
   156cc:	ldrd	r2, [sp, #72]	; 0x48
   156d0:	adds	r0, r0, r2
   156d4:	adc	r1, r1, r3
   156d8:	ldrd	r2, [sp, #32]
   156dc:	adds	r2, r2, r0
   156e0:	adc	r3, r3, r1
   156e4:	mov	r0, r2
   156e8:	mov	r1, r3
   156ec:	ldrd	r2, [sp, #24]
   156f0:	eor	r3, r3, r1
   156f4:	adds	r8, r8, r3
   156f8:	eor	r2, r2, r0
   156fc:	adc	r9, r9, r2
   15700:	eor	r4, r4, r8
   15704:	eor	r5, r5, r9
   15708:	lsr	ip, r4, #24
   1570c:	mov	r7, r2
   15710:	orr	r2, ip, r5, lsl #8
   15714:	lsr	ip, r5, #24
   15718:	mov	r6, r3
   1571c:	orr	r3, ip, r4, lsl #8
   15720:	ldrd	r4, [sp, #152]	; 0x98
   15724:	adds	r4, r4, r0
   15728:	adc	r5, r5, r1
   1572c:	adds	r4, r4, r2
   15730:	adc	r5, r5, r3
   15734:	mov	r0, r4
   15738:	mov	r1, r5
   1573c:	eor	r0, r0, r6
   15740:	eor	r1, r1, r7
   15744:	mov	r7, r1
   15748:	lsr	r1, r0, #16
   1574c:	orr	r1, r1, r7, lsl #16
   15750:	str	r1, [sp, #24]
   15754:	lsr	r1, r7, #16
   15758:	orr	r1, r1, r0, lsl #16
   1575c:	str	r1, [sp, #28]
   15760:	ldrd	r0, [sp, #24]
   15764:	ldrd	r6, [sp, #88]	; 0x58
   15768:	strd	r4, [sp, #72]	; 0x48
   1576c:	adds	r0, r0, r8
   15770:	adc	r1, r1, r9
   15774:	ldrd	r4, [sp, #40]	; 0x28
   15778:	strd	r0, [sp, #112]	; 0x70
   1577c:	eor	r0, r0, r2
   15780:	eor	r1, r1, r3
   15784:	mov	r3, r1
   15788:	lsl	r2, r0, #1
   1578c:	lsl	r1, r1, #1
   15790:	orr	r1, r1, r0, lsr #31
   15794:	orr	r3, r2, r3, lsr #31
   15798:	str	r1, [sp, #36]	; 0x24
   1579c:	str	r3, [sp, #32]
   157a0:	ldrd	r0, [sp, #200]	; 0xc8
   157a4:	ldrd	r2, [sp, #80]	; 0x50
   157a8:	adds	r0, r0, r2
   157ac:	adc	r1, r1, r3
   157b0:	ldrd	r2, [sp, #40]	; 0x28
   157b4:	adds	r2, r2, r0
   157b8:	adc	r3, r3, r1
   157bc:	mov	r0, r2
   157c0:	mov	r1, r3
   157c4:	ldrd	r2, [sp, #16]
   157c8:	eor	r3, r3, r1
   157cc:	adds	r6, r6, r3
   157d0:	eor	r2, r2, r0
   157d4:	adc	r7, r7, r2
   157d8:	eor	r4, r4, r6
   157dc:	eor	r5, r5, r7
   157e0:	lsr	ip, r4, #24
   157e4:	mov	r9, r2
   157e8:	orr	r2, ip, r5, lsl #8
   157ec:	lsr	ip, r5, #24
   157f0:	mov	r8, r3
   157f4:	orr	r3, ip, r4, lsl #8
   157f8:	ldrd	r4, [sp, #224]	; 0xe0
   157fc:	adds	r4, r4, r0
   15800:	adc	r5, r5, r1
   15804:	adds	r4, r4, r2
   15808:	adc	r5, r5, r3
   1580c:	mov	r0, r4
   15810:	mov	r1, r5
   15814:	eor	r0, r0, r8
   15818:	eor	r1, r1, r9
   1581c:	mov	r9, r1
   15820:	lsr	r1, r0, #16
   15824:	orr	r1, r1, r9, lsl #16
   15828:	str	r1, [sp, #16]
   1582c:	lsr	r1, r9, #16
   15830:	orr	r1, r1, r0, lsl #16
   15834:	str	r1, [sp, #20]
   15838:	ldrd	r0, [sp, #16]
   1583c:	strd	r4, [sp, #80]	; 0x50
   15840:	ldrd	r8, [sp, #112]	; 0x70
   15844:	adds	r0, r0, r6
   15848:	adc	r1, r1, r7
   1584c:	strd	r0, [sp, #88]	; 0x58
   15850:	eor	r0, r0, r2
   15854:	eor	r1, r1, r3
   15858:	mov	r3, r1
   1585c:	lsl	r2, r0, #1
   15860:	lsl	r1, r1, #1
   15864:	orr	r5, r1, r0, lsr #31
   15868:	orr	r4, r2, r3, lsr #31
   1586c:	ldrd	r0, [sp, #240]	; 0xf0
   15870:	ldrd	r2, [sp, #104]	; 0x68
   15874:	adds	r0, r0, r2
   15878:	adc	r1, r1, r3
   1587c:	ldrd	r2, [sp, #8]
   15880:	adds	r0, r0, r4
   15884:	adc	r1, r1, r5
   15888:	eor	r3, r3, r1
   1588c:	adds	r8, r8, r3
   15890:	eor	r2, r2, r0
   15894:	adc	r9, r9, r2
   15898:	eor	r4, r4, r8
   1589c:	eor	r5, r5, r9
   158a0:	lsr	ip, r4, #24
   158a4:	mov	r7, r2
   158a8:	orr	r2, ip, r5, lsl #8
   158ac:	lsr	ip, r5, #24
   158b0:	mov	r6, r3
   158b4:	orr	r3, ip, r4, lsl #8
   158b8:	ldrd	r4, [sp, #224]	; 0xe0
   158bc:	adds	r4, r4, r0
   158c0:	adc	r5, r5, r1
   158c4:	adds	r4, r4, r2
   158c8:	adc	r5, r5, r3
   158cc:	mov	r0, r4
   158d0:	mov	r1, r5
   158d4:	eor	r0, r0, r6
   158d8:	eor	r1, r1, r7
   158dc:	mov	r7, r1
   158e0:	lsr	r1, r0, #16
   158e4:	orr	r1, r1, r7, lsl #16
   158e8:	str	r1, [sp, #8]
   158ec:	lsr	r1, r7, #16
   158f0:	orr	r1, r1, r0, lsl #16
   158f4:	str	r1, [sp, #12]
   158f8:	ldrd	r0, [sp, #8]
   158fc:	ldrd	r6, [sp, #88]	; 0x58
   15900:	strd	r4, [sp, #104]	; 0x68
   15904:	adds	r0, r0, r8
   15908:	adc	r1, r1, r9
   1590c:	ldrd	r4, [sp, #56]	; 0x38
   15910:	strd	r0, [sp, #112]	; 0x70
   15914:	eor	r0, r0, r2
   15918:	eor	r1, r1, r3
   1591c:	mov	r3, r1
   15920:	lsl	r2, r0, #1
   15924:	lsl	r1, r1, #1
   15928:	orr	r1, r1, r0, lsr #31
   1592c:	orr	r3, r2, r3, lsr #31
   15930:	str	r1, [sp, #44]	; 0x2c
   15934:	str	r3, [sp, #40]	; 0x28
   15938:	ldrd	r0, [sp, #192]	; 0xc0
   1593c:	ldrd	r2, [sp, #64]	; 0x40
   15940:	adds	r0, r0, r2
   15944:	adc	r1, r1, r3
   15948:	ldrd	r2, [sp, #56]	; 0x38
   1594c:	adds	r2, r2, r0
   15950:	adc	r3, r3, r1
   15954:	mov	r0, r2
   15958:	mov	r1, r3
   1595c:	ldrd	r2, [sp, #24]
   15960:	eor	r3, r3, r1
   15964:	adds	r6, r6, r3
   15968:	eor	r2, r2, r0
   1596c:	adc	r7, r7, r2
   15970:	eor	r4, r4, r6
   15974:	eor	r5, r5, r7
   15978:	lsr	ip, r4, #24
   1597c:	mov	r9, r2
   15980:	orr	r2, ip, r5, lsl #8
   15984:	lsr	ip, r5, #24
   15988:	mov	r8, r3
   1598c:	orr	r3, ip, r4, lsl #8
   15990:	ldrd	r4, [sp, #248]	; 0xf8
   15994:	adds	r4, r4, r0
   15998:	adc	r5, r5, r1
   1599c:	adds	r4, r4, r2
   159a0:	adc	r5, r5, r3
   159a4:	mov	r0, r4
   159a8:	mov	r1, r5
   159ac:	eor	r0, r0, r8
   159b0:	eor	r1, r1, r9
   159b4:	mov	r9, r1
   159b8:	lsr	r1, r0, #16
   159bc:	orr	r1, r1, r9, lsl #16
   159c0:	str	r1, [sp, #24]
   159c4:	lsr	r1, r9, #16
   159c8:	orr	r1, r1, r0, lsl #16
   159cc:	str	r1, [sp, #28]
   159d0:	ldrd	r0, [sp, #24]
   159d4:	strd	r4, [sp, #64]	; 0x40
   159d8:	adds	r0, r0, r6
   159dc:	adc	r1, r1, r7
   159e0:	ldrd	r6, [sp, #96]	; 0x60
   159e4:	strd	r0, [sp, #88]	; 0x58
   159e8:	eor	r0, r0, r2
   159ec:	eor	r1, r1, r3
   159f0:	mov	r3, r1
   159f4:	lsl	r2, r0, #1
   159f8:	lsl	r1, r1, #1
   159fc:	orr	r1, r1, r0, lsr #31
   15a00:	orr	r3, r2, r3, lsr #31
   15a04:	str	r1, [sp, #60]	; 0x3c
   15a08:	str	r3, [sp, #56]	; 0x38
   15a0c:	ldrd	r0, [sp, #232]	; 0xe8
   15a10:	ldrd	r2, [sp, #72]	; 0x48
   15a14:	adds	r0, r0, r2
   15a18:	adc	r1, r1, r3
   15a1c:	ldrd	r2, [sp, #16]
   15a20:	adds	r0, r0, sl
   15a24:	adc	r1, r1, fp
   15a28:	eor	r3, r3, r1
   15a2c:	adds	r6, r6, r3
   15a30:	eor	r2, r2, r0
   15a34:	adc	r7, r7, r2
   15a38:	eor	r4, sl, r6
   15a3c:	eor	r5, fp, r7
   15a40:	lsr	ip, r4, #24
   15a44:	mov	r9, r2
   15a48:	orr	r2, ip, r5, lsl #8
   15a4c:	lsr	ip, r5, #24
   15a50:	mov	r8, r3
   15a54:	orr	r3, ip, r4, lsl #8
   15a58:	ldrd	r4, [sp, #144]	; 0x90
   15a5c:	adds	r4, r4, r0
   15a60:	adc	r5, r5, r1
   15a64:	adds	r4, r4, r2
   15a68:	adc	r5, r5, r3
   15a6c:	mov	r0, r4
   15a70:	mov	r1, r5
   15a74:	eor	r0, r0, r8
   15a78:	eor	r1, r1, r9
   15a7c:	mov	r9, r1
   15a80:	lsr	r1, r0, #16
   15a84:	orr	r1, r1, r9, lsl #16
   15a88:	str	r1, [sp, #16]
   15a8c:	lsr	r1, r9, #16
   15a90:	orr	r1, r1, r0, lsl #16
   15a94:	str	r1, [sp, #20]
   15a98:	ldrd	r0, [sp, #16]
   15a9c:	strd	r4, [sp, #72]	; 0x48
   15aa0:	adds	r0, r0, r6
   15aa4:	adc	r1, r1, r7
   15aa8:	strd	r0, [sp, #96]	; 0x60
   15aac:	eor	r0, r0, r2
   15ab0:	eor	r1, r1, r3
   15ab4:	mov	r3, r1
   15ab8:	lsl	r2, r0, #1
   15abc:	lsl	r1, r1, #1
   15ac0:	orr	fp, r1, r0, lsr #31
   15ac4:	orr	sl, r2, r3, lsr #31
   15ac8:	ldrd	r0, [sp, #160]	; 0xa0
   15acc:	ldrd	r2, [sp, #80]	; 0x50
   15ad0:	ldrd	r6, [sp, #120]	; 0x78
   15ad4:	ldrd	r4, [sp, #32]
   15ad8:	adds	r0, r0, r2
   15adc:	adc	r1, r1, r3
   15ae0:	ldrd	r2, [sp, #32]
   15ae4:	adds	r2, r2, r0
   15ae8:	adc	r3, r3, r1
   15aec:	mov	r0, r2
   15af0:	mov	r1, r3
   15af4:	ldrd	r2, [sp, #48]	; 0x30
   15af8:	eor	r3, r3, r1
   15afc:	adds	r6, r6, r3
   15b00:	eor	r2, r2, r0
   15b04:	adc	r7, r7, r2
   15b08:	eor	r4, r4, r6
   15b0c:	eor	r5, r5, r7
   15b10:	lsr	ip, r4, #24
   15b14:	mov	r9, r2
   15b18:	orr	r2, ip, r5, lsl #8
   15b1c:	lsr	ip, r5, #24
   15b20:	mov	r8, r3
   15b24:	orr	r3, ip, r4, lsl #8
   15b28:	ldrd	r4, [sp, #208]	; 0xd0
   15b2c:	adds	r4, r4, r0
   15b30:	adc	r5, r5, r1
   15b34:	adds	r4, r4, r2
   15b38:	adc	r5, r5, r3
   15b3c:	mov	r0, r4
   15b40:	mov	r1, r5
   15b44:	eor	r0, r0, r8
   15b48:	eor	r1, r1, r9
   15b4c:	mov	r9, r1
   15b50:	lsr	r1, r0, #16
   15b54:	strd	r4, [sp, #80]	; 0x50
   15b58:	orr	r4, r1, r9, lsl #16
   15b5c:	lsr	r1, r9, #16
   15b60:	adds	r6, r6, r4
   15b64:	orr	r5, r1, r0, lsl #16
   15b68:	adc	r7, r7, r5
   15b6c:	eor	r3, r3, r7
   15b70:	eor	r2, r2, r6
   15b74:	lsl	r1, r3, #1
   15b78:	orr	r1, r1, r2, lsr #31
   15b7c:	lsl	r2, r2, #1
   15b80:	orr	r3, r2, r3, lsr #31
   15b84:	str	r1, [sp, #36]	; 0x24
   15b88:	str	r3, [sp, #32]
   15b8c:	ldrd	r0, [sp, #176]	; 0xb0
   15b90:	ldrd	r2, [sp, #104]	; 0x68
   15b94:	adds	r0, r0, r2
   15b98:	adc	r1, r1, r3
   15b9c:	ldrd	r2, [sp, #56]	; 0x38
   15ba0:	adds	r2, r2, r0
   15ba4:	adc	r3, r3, r1
   15ba8:	eor	r4, r4, r2
   15bac:	eor	r5, r5, r3
   15bb0:	mov	r0, r2
   15bb4:	mov	r1, r3
   15bb8:	ldrd	r2, [sp, #96]	; 0x60
   15bbc:	mov	r8, r5
   15bc0:	mov	r9, r4
   15bc4:	adds	r2, r2, r5
   15bc8:	adc	r3, r3, r4
   15bcc:	ldrd	r4, [sp, #56]	; 0x38
   15bd0:	strd	r2, [sp, #96]	; 0x60
   15bd4:	eor	r4, r4, r2
   15bd8:	eor	r5, r5, r3
   15bdc:	lsr	ip, r4, #24
   15be0:	orr	r2, ip, r5, lsl #8
   15be4:	lsr	ip, r5, #24
   15be8:	orr	r3, ip, r4, lsl #8
   15bec:	ldrd	r4, [sp]
   15bf0:	adds	r4, r4, r0
   15bf4:	adc	r5, r5, r1
   15bf8:	adds	r4, r4, r2
   15bfc:	adc	r5, r5, r3
   15c00:	mov	r0, r4
   15c04:	mov	r1, r5
   15c08:	eor	r0, r0, r8
   15c0c:	eor	r1, r1, r9
   15c10:	mov	r9, r1
   15c14:	lsr	r1, r0, #16
   15c18:	orr	r1, r1, r9, lsl #16
   15c1c:	str	r1, [sp, #48]	; 0x30
   15c20:	lsr	r1, r9, #16
   15c24:	orr	r1, r1, r0, lsl #16
   15c28:	str	r1, [sp, #52]	; 0x34
   15c2c:	strd	r4, [sp, #104]	; 0x68
   15c30:	ldrd	r0, [sp, #96]	; 0x60
   15c34:	ldrd	r4, [sp, #48]	; 0x30
   15c38:	adds	r0, r0, r4
   15c3c:	adc	r1, r1, r5
   15c40:	strd	r0, [sp, #96]	; 0x60
   15c44:	eor	r0, r0, r2
   15c48:	eor	r1, r1, r3
   15c4c:	mov	r3, r1
   15c50:	lsl	r2, r0, #1
   15c54:	orr	r3, r2, r3, lsr #31
   15c58:	str	r3, [sp, #56]	; 0x38
   15c5c:	lsl	r1, r1, #1
   15c60:	add	r3, sp, #256	; 0x100
   15c64:	orr	r1, r1, r0, lsr #31
   15c68:	str	r1, [sp, #60]	; 0x3c
   15c6c:	ldrd	r0, [r3]
   15c70:	ldrd	r2, [sp, #64]	; 0x40
   15c74:	adds	r0, r0, r2
   15c78:	adc	r1, r1, r3
   15c7c:	ldrd	r2, [sp, #8]
   15c80:	adds	r0, r0, sl
   15c84:	adc	r1, r1, fp
   15c88:	eor	r3, r3, r1
   15c8c:	adds	r6, r6, r3
   15c90:	eor	r2, r2, r0
   15c94:	adc	r7, r7, r2
   15c98:	eor	r4, sl, r6
   15c9c:	eor	r5, fp, r7
   15ca0:	lsr	ip, r4, #24
   15ca4:	mov	r9, r2
   15ca8:	orr	r2, ip, r5, lsl #8
   15cac:	lsr	ip, r5, #24
   15cb0:	mov	r8, r3
   15cb4:	orr	r3, ip, r4, lsl #8
   15cb8:	ldrd	r4, [sp, #168]	; 0xa8
   15cbc:	adds	r4, r4, r0
   15cc0:	adc	r5, r5, r1
   15cc4:	adds	r4, r4, r2
   15cc8:	adc	r5, r5, r3
   15ccc:	mov	r0, r4
   15cd0:	mov	r1, r5
   15cd4:	eor	r0, r0, r8
   15cd8:	eor	r1, r1, r9
   15cdc:	mov	r9, r1
   15ce0:	lsr	r1, r0, #16
   15ce4:	orr	r1, r1, r9, lsl #16
   15ce8:	str	r1, [sp, #8]
   15cec:	lsr	r1, r9, #16
   15cf0:	orr	r1, r1, r0, lsl #16
   15cf4:	str	r1, [sp, #12]
   15cf8:	strd	r4, [sp, #64]	; 0x40
   15cfc:	ldrd	r0, [sp, #8]
   15d00:	ldrd	r8, [sp, #112]	; 0x70
   15d04:	ldrd	r4, [sp, #32]
   15d08:	adds	r0, r0, r6
   15d0c:	adc	r1, r1, r7
   15d10:	strd	r0, [sp, #120]	; 0x78
   15d14:	eor	r0, r0, r2
   15d18:	eor	r1, r1, r3
   15d1c:	mov	r3, r1
   15d20:	lsl	r2, r0, #1
   15d24:	lsl	r1, r1, #1
   15d28:	orr	fp, r1, r0, lsr #31
   15d2c:	orr	sl, r2, r3, lsr #31
   15d30:	ldrd	r0, [sp, #200]	; 0xc8
   15d34:	ldrd	r2, [sp, #72]	; 0x48
   15d38:	adds	r0, r0, r2
   15d3c:	adc	r1, r1, r3
   15d40:	ldrd	r2, [sp, #32]
   15d44:	adds	r2, r2, r0
   15d48:	adc	r3, r3, r1
   15d4c:	mov	r0, r2
   15d50:	mov	r1, r3
   15d54:	ldrd	r2, [sp, #24]
   15d58:	eor	r3, r3, r1
   15d5c:	adds	r8, r8, r3
   15d60:	eor	r2, r2, r0
   15d64:	adc	r9, r9, r2
   15d68:	eor	r4, r4, r8
   15d6c:	eor	r5, r5, r9
   15d70:	lsr	ip, r4, #24
   15d74:	mov	r7, r2
   15d78:	orr	r2, ip, r5, lsl #8
   15d7c:	lsr	ip, r5, #24
   15d80:	mov	r6, r3
   15d84:	orr	r3, ip, r4, lsl #8
   15d88:	ldrd	r4, [sp, #184]	; 0xb8
   15d8c:	adds	r4, r4, r0
   15d90:	adc	r5, r5, r1
   15d94:	adds	r4, r4, r2
   15d98:	adc	r5, r5, r3
   15d9c:	mov	r0, r4
   15da0:	mov	r1, r5
   15da4:	eor	r0, r0, r6
   15da8:	eor	r1, r1, r7
   15dac:	mov	r7, r1
   15db0:	lsr	r1, r0, #16
   15db4:	orr	r1, r1, r7, lsl #16
   15db8:	str	r1, [sp, #24]
   15dbc:	lsr	r1, r7, #16
   15dc0:	orr	r1, r1, r0, lsl #16
   15dc4:	str	r1, [sp, #28]
   15dc8:	ldrd	r0, [sp, #24]
   15dcc:	ldrd	r6, [sp, #88]	; 0x58
   15dd0:	strd	r4, [sp, #72]	; 0x48
   15dd4:	adds	r0, r0, r8
   15dd8:	adc	r1, r1, r9
   15ddc:	ldrd	r4, [sp, #40]	; 0x28
   15de0:	strd	r0, [sp, #112]	; 0x70
   15de4:	eor	r0, r0, r2
   15de8:	eor	r1, r1, r3
   15dec:	mov	r3, r1
   15df0:	lsl	r2, r0, #1
   15df4:	lsl	r1, r1, #1
   15df8:	orr	r1, r1, r0, lsr #31
   15dfc:	orr	r3, r2, r3, lsr #31
   15e00:	str	r1, [sp, #36]	; 0x24
   15e04:	str	r3, [sp, #32]
   15e08:	ldrd	r0, [sp, #152]	; 0x98
   15e0c:	ldrd	r2, [sp, #80]	; 0x50
   15e10:	adds	r0, r0, r2
   15e14:	adc	r1, r1, r3
   15e18:	ldrd	r2, [sp, #40]	; 0x28
   15e1c:	adds	r2, r2, r0
   15e20:	adc	r3, r3, r1
   15e24:	mov	r0, r2
   15e28:	mov	r1, r3
   15e2c:	ldrd	r2, [sp, #16]
   15e30:	eor	r3, r3, r1
   15e34:	adds	r6, r6, r3
   15e38:	eor	r2, r2, r0
   15e3c:	adc	r7, r7, r2
   15e40:	eor	r4, r4, r6
   15e44:	eor	r5, r5, r7
   15e48:	lsr	ip, r4, #24
   15e4c:	mov	r9, r2
   15e50:	orr	r2, ip, r5, lsl #8
   15e54:	lsr	ip, r5, #24
   15e58:	mov	r8, r3
   15e5c:	orr	r3, ip, r4, lsl #8
   15e60:	ldrd	r4, [sp, #216]	; 0xd8
   15e64:	adds	r4, r4, r0
   15e68:	adc	r5, r5, r1
   15e6c:	adds	r4, r4, r2
   15e70:	adc	r5, r5, r3
   15e74:	mov	r0, r4
   15e78:	mov	r1, r5
   15e7c:	eor	r0, r0, r8
   15e80:	eor	r1, r1, r9
   15e84:	mov	r9, r1
   15e88:	lsr	r1, r0, #16
   15e8c:	orr	r1, r1, r9, lsl #16
   15e90:	str	r1, [sp, #16]
   15e94:	lsr	r1, r9, #16
   15e98:	orr	r1, r1, r0, lsl #16
   15e9c:	str	r1, [sp, #20]
   15ea0:	ldrd	r0, [sp, #16]
   15ea4:	strd	r4, [sp, #80]	; 0x50
   15ea8:	ldrd	r8, [sp, #112]	; 0x70
   15eac:	adds	r0, r0, r6
   15eb0:	adc	r1, r1, r7
   15eb4:	strd	r0, [sp, #88]	; 0x58
   15eb8:	eor	r0, r0, r2
   15ebc:	eor	r1, r1, r3
   15ec0:	mov	r3, r1
   15ec4:	lsl	r2, r0, #1
   15ec8:	lsl	r1, r1, #1
   15ecc:	orr	r5, r1, r0, lsr #31
   15ed0:	orr	r4, r2, r3, lsr #31
   15ed4:	ldrd	r0, [sp, #184]	; 0xb8
   15ed8:	ldrd	r2, [sp, #104]	; 0x68
   15edc:	adds	r0, r0, r2
   15ee0:	adc	r1, r1, r3
   15ee4:	ldrd	r2, [sp, #8]
   15ee8:	adds	r0, r0, r4
   15eec:	adc	r1, r1, r5
   15ef0:	eor	r3, r3, r1
   15ef4:	adds	r8, r8, r3
   15ef8:	eor	r2, r2, r0
   15efc:	adc	r9, r9, r2
   15f00:	eor	r4, r4, r8
   15f04:	eor	r5, r5, r9
   15f08:	lsr	ip, r4, #24
   15f0c:	mov	r7, r2
   15f10:	orr	r2, ip, r5, lsl #8
   15f14:	lsr	ip, r5, #24
   15f18:	mov	r6, r3
   15f1c:	orr	r3, ip, r4, lsl #8
   15f20:	add	ip, sp, #256	; 0x100
   15f24:	ldrd	r4, [ip]
   15f28:	adds	r4, r4, r0
   15f2c:	adc	r5, r5, r1
   15f30:	adds	r4, r4, r2
   15f34:	adc	r5, r5, r3
   15f38:	mov	r0, r4
   15f3c:	mov	r1, r5
   15f40:	eor	r0, r0, r6
   15f44:	eor	r1, r1, r7
   15f48:	mov	r7, r1
   15f4c:	lsr	r1, r0, #16
   15f50:	orr	r1, r1, r7, lsl #16
   15f54:	str	r1, [sp, #8]
   15f58:	lsr	r1, r7, #16
   15f5c:	orr	r1, r1, r0, lsl #16
   15f60:	str	r1, [sp, #12]
   15f64:	ldrd	r0, [sp, #8]
   15f68:	ldrd	r6, [sp, #88]	; 0x58
   15f6c:	strd	r4, [sp, #104]	; 0x68
   15f70:	adds	r0, r0, r8
   15f74:	adc	r1, r1, r9
   15f78:	ldrd	r4, [sp, #56]	; 0x38
   15f7c:	strd	r0, [sp, #112]	; 0x70
   15f80:	eor	r0, r0, r2
   15f84:	eor	r1, r1, r3
   15f88:	mov	r3, r1
   15f8c:	lsl	r2, r0, #1
   15f90:	lsl	r1, r1, #1
   15f94:	orr	r1, r1, r0, lsr #31
   15f98:	orr	r3, r2, r3, lsr #31
   15f9c:	str	r1, [sp, #44]	; 0x2c
   15fa0:	str	r3, [sp, #40]	; 0x28
   15fa4:	ldrd	r0, [sp, #248]	; 0xf8
   15fa8:	ldrd	r2, [sp, #64]	; 0x40
   15fac:	adds	r0, r0, r2
   15fb0:	adc	r1, r1, r3
   15fb4:	ldrd	r2, [sp, #56]	; 0x38
   15fb8:	adds	r2, r2, r0
   15fbc:	adc	r3, r3, r1
   15fc0:	mov	r0, r2
   15fc4:	mov	r1, r3
   15fc8:	ldrd	r2, [sp, #24]
   15fcc:	eor	r3, r3, r1
   15fd0:	adds	r6, r6, r3
   15fd4:	eor	r2, r2, r0
   15fd8:	adc	r7, r7, r2
   15fdc:	eor	r4, r4, r6
   15fe0:	eor	r5, r5, r7
   15fe4:	lsr	ip, r4, #24
   15fe8:	mov	r9, r2
   15fec:	orr	r2, ip, r5, lsl #8
   15ff0:	lsr	ip, r5, #24
   15ff4:	mov	r8, r3
   15ff8:	orr	r3, ip, r4, lsl #8
   15ffc:	ldrd	r4, [sp, #208]	; 0xd0
   16000:	adds	r4, r4, r0
   16004:	adc	r5, r5, r1
   16008:	adds	r4, r4, r2
   1600c:	adc	r5, r5, r3
   16010:	mov	r0, r4
   16014:	mov	r1, r5
   16018:	eor	r0, r0, r8
   1601c:	eor	r1, r1, r9
   16020:	mov	r9, r1
   16024:	lsr	r1, r0, #16
   16028:	orr	r1, r1, r9, lsl #16
   1602c:	str	r1, [sp, #24]
   16030:	lsr	r1, r9, #16
   16034:	orr	r1, r1, r0, lsl #16
   16038:	str	r1, [sp, #28]
   1603c:	ldrd	r0, [sp, #24]
   16040:	strd	r4, [sp, #64]	; 0x40
   16044:	adds	r0, r0, r6
   16048:	adc	r1, r1, r7
   1604c:	ldrd	r6, [sp, #96]	; 0x60
   16050:	strd	r0, [sp, #88]	; 0x58
   16054:	eor	r0, r0, r2
   16058:	eor	r1, r1, r3
   1605c:	mov	r3, r1
   16060:	lsl	r2, r0, #1
   16064:	lsl	r1, r1, #1
   16068:	orr	r1, r1, r0, lsr #31
   1606c:	orr	r3, r2, r3, lsr #31
   16070:	str	r1, [sp, #60]	; 0x3c
   16074:	str	r3, [sp, #56]	; 0x38
   16078:	ldrd	r0, [sp, #224]	; 0xe0
   1607c:	ldrd	r2, [sp, #72]	; 0x48
   16080:	adds	r0, r0, r2
   16084:	adc	r1, r1, r3
   16088:	ldrd	r2, [sp, #16]
   1608c:	adds	r0, r0, sl
   16090:	adc	r1, r1, fp
   16094:	eor	r3, r3, r1
   16098:	adds	r6, r6, r3
   1609c:	eor	r2, r2, r0
   160a0:	adc	r7, r7, r2
   160a4:	eor	r4, sl, r6
   160a8:	eor	r5, fp, r7
   160ac:	lsr	ip, r4, #24
   160b0:	mov	r9, r2
   160b4:	orr	r2, ip, r5, lsl #8
   160b8:	lsr	ip, r5, #24
   160bc:	mov	r8, r3
   160c0:	orr	r3, ip, r4, lsl #8
   160c4:	ldrd	r4, [sp, #160]	; 0xa0
   160c8:	adds	r4, r4, r0
   160cc:	adc	r5, r5, r1
   160d0:	adds	r4, r4, r2
   160d4:	adc	r5, r5, r3
   160d8:	mov	r0, r4
   160dc:	mov	r1, r5
   160e0:	eor	r0, r0, r8
   160e4:	eor	r1, r1, r9
   160e8:	mov	r9, r1
   160ec:	lsr	r1, r0, #16
   160f0:	orr	r1, r1, r9, lsl #16
   160f4:	str	r1, [sp, #16]
   160f8:	lsr	r1, r9, #16
   160fc:	orr	r1, r1, r0, lsl #16
   16100:	str	r1, [sp, #20]
   16104:	ldrd	r0, [sp, #16]
   16108:	strd	r4, [sp, #72]	; 0x48
   1610c:	adds	r0, r0, r6
   16110:	adc	r1, r1, r7
   16114:	strd	r0, [sp, #96]	; 0x60
   16118:	eor	r0, r0, r2
   1611c:	eor	r1, r1, r3
   16120:	mov	r3, r1
   16124:	lsl	r2, r0, #1
   16128:	lsl	r1, r1, #1
   1612c:	orr	fp, r1, r0, lsr #31
   16130:	orr	sl, r2, r3, lsr #31
   16134:	ldrd	r0, [sp]
   16138:	ldrd	r2, [sp, #80]	; 0x50
   1613c:	ldrd	r6, [sp, #120]	; 0x78
   16140:	ldrd	r4, [sp, #32]
   16144:	adds	r0, r0, r2
   16148:	adc	r1, r1, r3
   1614c:	ldrd	r2, [sp, #32]
   16150:	adds	r2, r2, r0
   16154:	adc	r3, r3, r1
   16158:	mov	r0, r2
   1615c:	mov	r1, r3
   16160:	ldrd	r2, [sp, #48]	; 0x30
   16164:	eor	r3, r3, r1
   16168:	adds	r6, r6, r3
   1616c:	eor	r2, r2, r0
   16170:	adc	r7, r7, r2
   16174:	eor	r4, r4, r6
   16178:	eor	r5, r5, r7
   1617c:	lsr	ip, r4, #24
   16180:	mov	r9, r2
   16184:	orr	r2, ip, r5, lsl #8
   16188:	lsr	ip, r5, #24
   1618c:	mov	r8, r3
   16190:	orr	r3, ip, r4, lsl #8
   16194:	ldrd	r4, [sp, #200]	; 0xc8
   16198:	adds	r4, r4, r0
   1619c:	adc	r5, r5, r1
   161a0:	adds	r4, r4, r2
   161a4:	adc	r5, r5, r3
   161a8:	mov	r0, r4
   161ac:	mov	r1, r5
   161b0:	eor	r0, r0, r8
   161b4:	eor	r1, r1, r9
   161b8:	mov	r9, r1
   161bc:	lsr	r1, r0, #16
   161c0:	strd	r4, [sp, #80]	; 0x50
   161c4:	orr	r4, r1, r9, lsl #16
   161c8:	lsr	r1, r9, #16
   161cc:	adds	r6, r6, r4
   161d0:	orr	r5, r1, r0, lsl #16
   161d4:	adc	r7, r7, r5
   161d8:	eor	r3, r3, r7
   161dc:	eor	r2, r2, r6
   161e0:	lsl	r1, r3, #1
   161e4:	orr	r1, r1, r2, lsr #31
   161e8:	lsl	r2, r2, #1
   161ec:	orr	r3, r2, r3, lsr #31
   161f0:	str	r1, [sp, #36]	; 0x24
   161f4:	str	r3, [sp, #32]
   161f8:	ldrd	r0, [sp, #232]	; 0xe8
   161fc:	ldrd	r2, [sp, #104]	; 0x68
   16200:	adds	r0, r0, r2
   16204:	adc	r1, r1, r3
   16208:	ldrd	r2, [sp, #56]	; 0x38
   1620c:	adds	r2, r2, r0
   16210:	adc	r3, r3, r1
   16214:	eor	r4, r4, r2
   16218:	eor	r5, r5, r3
   1621c:	mov	r0, r2
   16220:	mov	r1, r3
   16224:	ldrd	r2, [sp, #96]	; 0x60
   16228:	mov	r8, r5
   1622c:	mov	r9, r4
   16230:	adds	r2, r2, r5
   16234:	adc	r3, r3, r4
   16238:	ldrd	r4, [sp, #56]	; 0x38
   1623c:	strd	r2, [sp, #96]	; 0x60
   16240:	eor	r4, r4, r2
   16244:	eor	r5, r5, r3
   16248:	lsr	ip, r4, #24
   1624c:	orr	r2, ip, r5, lsl #8
   16250:	lsr	ip, r5, #24
   16254:	orr	r3, ip, r4, lsl #8
   16258:	ldrd	r4, [sp, #152]	; 0x98
   1625c:	adds	r4, r4, r0
   16260:	adc	r5, r5, r1
   16264:	adds	r4, r4, r2
   16268:	adc	r5, r5, r3
   1626c:	mov	r0, r4
   16270:	mov	r1, r5
   16274:	eor	r0, r0, r8
   16278:	eor	r1, r1, r9
   1627c:	mov	r9, r1
   16280:	lsr	r1, r0, #16
   16284:	orr	r1, r1, r9, lsl #16
   16288:	str	r1, [sp, #48]	; 0x30
   1628c:	lsr	r1, r9, #16
   16290:	orr	r1, r1, r0, lsl #16
   16294:	str	r1, [sp, #52]	; 0x34
   16298:	strd	r4, [sp, #104]	; 0x68
   1629c:	ldrd	r0, [sp, #96]	; 0x60
   162a0:	ldrd	r4, [sp, #48]	; 0x30
   162a4:	adds	r0, r0, r4
   162a8:	adc	r1, r1, r5
   162ac:	strd	r0, [sp, #96]	; 0x60
   162b0:	eor	r0, r0, r2
   162b4:	eor	r1, r1, r3
   162b8:	mov	r3, r1
   162bc:	lsl	r2, r0, #1
   162c0:	lsl	r1, r1, #1
   162c4:	orr	r1, r1, r0, lsr #31
   162c8:	orr	r3, r2, r3, lsr #31
   162cc:	str	r1, [sp, #60]	; 0x3c
   162d0:	str	r3, [sp, #56]	; 0x38
   162d4:	ldrd	r0, [sp, #240]	; 0xf0
   162d8:	ldrd	r2, [sp, #64]	; 0x40
   162dc:	adds	r0, r0, r2
   162e0:	adc	r1, r1, r3
   162e4:	ldrd	r2, [sp, #8]
   162e8:	adds	r0, r0, sl
   162ec:	adc	r1, r1, fp
   162f0:	eor	r3, r3, r1
   162f4:	adds	r6, r6, r3
   162f8:	eor	r2, r2, r0
   162fc:	adc	r7, r7, r2
   16300:	eor	r4, sl, r6
   16304:	eor	r5, fp, r7
   16308:	lsr	ip, r4, #24
   1630c:	mov	r9, r2
   16310:	orr	r2, ip, r5, lsl #8
   16314:	lsr	ip, r5, #24
   16318:	mov	r8, r3
   1631c:	orr	r3, ip, r4, lsl #8
   16320:	ldrd	r4, [sp, #192]	; 0xc0
   16324:	adds	r4, r4, r0
   16328:	adc	r5, r5, r1
   1632c:	adds	r4, r4, r2
   16330:	adc	r5, r5, r3
   16334:	mov	r0, r4
   16338:	mov	r1, r5
   1633c:	eor	r0, r0, r8
   16340:	eor	r1, r1, r9
   16344:	mov	r9, r1
   16348:	lsr	r1, r0, #16
   1634c:	orr	r1, r1, r9, lsl #16
   16350:	str	r1, [sp, #8]
   16354:	lsr	r1, r9, #16
   16358:	orr	r1, r1, r0, lsl #16
   1635c:	str	r1, [sp, #12]
   16360:	strd	r4, [sp, #64]	; 0x40
   16364:	ldrd	r0, [sp, #8]
   16368:	ldrd	r8, [sp, #112]	; 0x70
   1636c:	ldrd	r4, [sp, #32]
   16370:	adds	r0, r0, r6
   16374:	adc	r1, r1, r7
   16378:	strd	r0, [sp, #120]	; 0x78
   1637c:	eor	r0, r0, r2
   16380:	eor	r1, r1, r3
   16384:	mov	r3, r1
   16388:	lsl	r2, r0, #1
   1638c:	lsl	r1, r1, #1
   16390:	orr	fp, r1, r0, lsr #31
   16394:	orr	sl, r2, r3, lsr #31
   16398:	ldrd	r0, [sp, #144]	; 0x90
   1639c:	ldrd	r2, [sp, #72]	; 0x48
   163a0:	adds	r0, r0, r2
   163a4:	adc	r1, r1, r3
   163a8:	ldrd	r2, [sp, #32]
   163ac:	adds	r2, r2, r0
   163b0:	adc	r3, r3, r1
   163b4:	mov	r0, r2
   163b8:	mov	r1, r3
   163bc:	ldrd	r2, [sp, #24]
   163c0:	eor	r3, r3, r1
   163c4:	adds	r8, r8, r3
   163c8:	eor	r2, r2, r0
   163cc:	adc	r9, r9, r2
   163d0:	eor	r4, r4, r8
   163d4:	eor	r5, r5, r9
   163d8:	lsr	ip, r4, #24
   163dc:	mov	r7, r2
   163e0:	orr	r2, ip, r5, lsl #8
   163e4:	lsr	ip, r5, #24
   163e8:	mov	r6, r3
   163ec:	orr	r3, ip, r4, lsl #8
   163f0:	ldrd	r4, [sp, #168]	; 0xa8
   163f4:	adds	r4, r4, r0
   163f8:	adc	r5, r5, r1
   163fc:	adds	r4, r4, r2
   16400:	adc	r5, r5, r3
   16404:	mov	r0, r4
   16408:	mov	r1, r5
   1640c:	eor	r0, r0, r6
   16410:	eor	r1, r1, r7
   16414:	mov	r7, r1
   16418:	lsr	r1, r0, #16
   1641c:	orr	r1, r1, r7, lsl #16
   16420:	str	r1, [sp, #24]
   16424:	lsr	r1, r7, #16
   16428:	orr	r1, r1, r0, lsl #16
   1642c:	str	r1, [sp, #28]
   16430:	ldrd	r0, [sp, #24]
   16434:	ldrd	r6, [sp, #88]	; 0x58
   16438:	strd	r4, [sp, #72]	; 0x48
   1643c:	adds	r0, r0, r8
   16440:	adc	r1, r1, r9
   16444:	ldrd	r4, [sp, #40]	; 0x28
   16448:	strd	r0, [sp, #112]	; 0x70
   1644c:	eor	r0, r0, r2
   16450:	eor	r1, r1, r3
   16454:	mov	r3, r1
   16458:	lsl	r2, r0, #1
   1645c:	lsl	r1, r1, #1
   16460:	orr	r1, r1, r0, lsr #31
   16464:	orr	r3, r2, r3, lsr #31
   16468:	str	r1, [sp, #36]	; 0x24
   1646c:	str	r3, [sp, #32]
   16470:	ldrd	r0, [sp, #216]	; 0xd8
   16474:	ldrd	r2, [sp, #80]	; 0x50
   16478:	adds	r0, r0, r2
   1647c:	adc	r1, r1, r3
   16480:	ldrd	r2, [sp, #40]	; 0x28
   16484:	adds	r2, r2, r0
   16488:	adc	r3, r3, r1
   1648c:	mov	r0, r2
   16490:	mov	r1, r3
   16494:	ldrd	r2, [sp, #16]
   16498:	eor	r3, r3, r1
   1649c:	adds	r6, r6, r3
   164a0:	eor	r2, r2, r0
   164a4:	adc	r7, r7, r2
   164a8:	eor	r4, r4, r6
   164ac:	eor	r5, r5, r7
   164b0:	lsr	ip, r4, #24
   164b4:	mov	r9, r2
   164b8:	orr	r2, ip, r5, lsl #8
   164bc:	lsr	ip, r5, #24
   164c0:	mov	r8, r3
   164c4:	orr	r3, ip, r4, lsl #8
   164c8:	ldrd	r4, [sp, #176]	; 0xb0
   164cc:	adds	r4, r4, r0
   164d0:	adc	r5, r5, r1
   164d4:	adds	r4, r4, r2
   164d8:	adc	r5, r5, r3
   164dc:	mov	r0, r4
   164e0:	mov	r1, r5
   164e4:	eor	r0, r0, r8
   164e8:	eor	r1, r1, r9
   164ec:	mov	r9, r1
   164f0:	lsr	r1, r0, #16
   164f4:	orr	r1, r1, r9, lsl #16
   164f8:	str	r1, [sp, #16]
   164fc:	lsr	r1, r9, #16
   16500:	orr	r1, r1, r0, lsl #16
   16504:	str	r1, [sp, #20]
   16508:	ldrd	r0, [sp, #16]
   1650c:	strd	r4, [sp, #80]	; 0x50
   16510:	ldrd	r8, [sp, #112]	; 0x70
   16514:	adds	r0, r0, r6
   16518:	adc	r1, r1, r7
   1651c:	strd	r0, [sp, #88]	; 0x58
   16520:	eor	r0, r0, r2
   16524:	eor	r1, r1, r3
   16528:	mov	r3, r1
   1652c:	lsl	r2, r0, #1
   16530:	lsl	r1, r1, #1
   16534:	orr	r5, r1, r0, lsr #31
   16538:	orr	r4, r2, r3, lsr #31
   1653c:	ldrd	r0, [sp, #216]	; 0xd8
   16540:	ldrd	r2, [sp, #104]	; 0x68
   16544:	adds	r0, r0, r2
   16548:	adc	r1, r1, r3
   1654c:	ldrd	r2, [sp, #8]
   16550:	adds	r0, r0, r4
   16554:	adc	r1, r1, r5
   16558:	eor	r3, r3, r1
   1655c:	adds	r8, r8, r3
   16560:	eor	r2, r2, r0
   16564:	adc	r9, r9, r2
   16568:	eor	r4, r4, r8
   1656c:	eor	r5, r5, r9
   16570:	lsr	ip, r4, #24
   16574:	mov	r7, r2
   16578:	orr	r2, ip, r5, lsl #8
   1657c:	lsr	ip, r5, #24
   16580:	mov	r6, r3
   16584:	orr	r3, ip, r4, lsl #8
   16588:	ldrd	r4, [sp, #152]	; 0x98
   1658c:	adds	r4, r4, r0
   16590:	adc	r5, r5, r1
   16594:	adds	r4, r4, r2
   16598:	adc	r5, r5, r3
   1659c:	mov	r0, r4
   165a0:	mov	r1, r5
   165a4:	eor	r0, r0, r6
   165a8:	eor	r1, r1, r7
   165ac:	mov	r7, r1
   165b0:	lsr	r1, r0, #16
   165b4:	orr	r1, r1, r7, lsl #16
   165b8:	str	r1, [sp, #8]
   165bc:	lsr	r1, r7, #16
   165c0:	orr	r1, r1, r0, lsl #16
   165c4:	str	r1, [sp, #12]
   165c8:	ldrd	r0, [sp, #8]
   165cc:	ldrd	r6, [sp, #88]	; 0x58
   165d0:	strd	r4, [sp, #104]	; 0x68
   165d4:	adds	r0, r0, r8
   165d8:	adc	r1, r1, r9
   165dc:	ldrd	r4, [sp, #56]	; 0x38
   165e0:	strd	r0, [sp, #112]	; 0x70
   165e4:	eor	r0, r0, r2
   165e8:	eor	r1, r1, r3
   165ec:	mov	r3, r1
   165f0:	lsl	r2, r0, #1
   165f4:	lsl	r1, r1, #1
   165f8:	orr	r1, r1, r0, lsr #31
   165fc:	orr	r3, r2, r3, lsr #31
   16600:	str	r1, [sp, #44]	; 0x2c
   16604:	str	r3, [sp, #40]	; 0x28
   16608:	ldrd	r0, [sp, #200]	; 0xc8
   1660c:	ldrd	r2, [sp, #64]	; 0x40
   16610:	adds	r0, r0, r2
   16614:	adc	r1, r1, r3
   16618:	ldrd	r2, [sp, #56]	; 0x38
   1661c:	adds	r2, r2, r0
   16620:	adc	r3, r3, r1
   16624:	mov	r0, r2
   16628:	mov	r1, r3
   1662c:	ldrd	r2, [sp, #24]
   16630:	eor	r3, r3, r1
   16634:	adds	r6, r6, r3
   16638:	eor	r2, r2, r0
   1663c:	adc	r7, r7, r2
   16640:	eor	r4, r4, r6
   16644:	eor	r5, r5, r7
   16648:	lsr	ip, r4, #24
   1664c:	mov	r9, r2
   16650:	orr	r2, ip, r5, lsl #8
   16654:	lsr	ip, r5, #24
   16658:	mov	r8, r3
   1665c:	orr	r3, ip, r4, lsl #8
   16660:	ldrd	r4, [sp, #168]	; 0xa8
   16664:	adds	r4, r4, r0
   16668:	adc	r5, r5, r1
   1666c:	adds	r4, r4, r2
   16670:	adc	r5, r5, r3
   16674:	mov	r0, r4
   16678:	mov	r1, r5
   1667c:	eor	r0, r0, r8
   16680:	eor	r1, r1, r9
   16684:	mov	r9, r1
   16688:	lsr	r1, r0, #16
   1668c:	orr	r1, r1, r9, lsl #16
   16690:	str	r1, [sp, #24]
   16694:	lsr	r1, r9, #16
   16698:	orr	r1, r1, r0, lsl #16
   1669c:	str	r1, [sp, #28]
   166a0:	ldrd	r0, [sp, #24]
   166a4:	strd	r4, [sp, #64]	; 0x40
   166a8:	adds	r0, r0, r6
   166ac:	adc	r1, r1, r7
   166b0:	ldrd	r6, [sp, #96]	; 0x60
   166b4:	strd	r0, [sp, #88]	; 0x58
   166b8:	eor	r0, r0, r2
   166bc:	eor	r1, r1, r3
   166c0:	mov	r3, r1
   166c4:	lsl	r2, r0, #1
   166c8:	lsl	r1, r1, #1
   166cc:	orr	r1, r1, r0, lsr #31
   166d0:	orr	r3, r2, r3, lsr #31
   166d4:	str	r1, [sp, #60]	; 0x3c
   166d8:	str	r3, [sp, #56]	; 0x38
   166dc:	ldrd	r0, [sp, #192]	; 0xc0
   166e0:	ldrd	r2, [sp, #72]	; 0x48
   166e4:	adds	r0, r0, r2
   166e8:	adc	r1, r1, r3
   166ec:	ldrd	r2, [sp, #16]
   166f0:	adds	r0, r0, sl
   166f4:	adc	r1, r1, fp
   166f8:	eor	r3, r3, r1
   166fc:	adds	r6, r6, r3
   16700:	eor	r2, r2, r0
   16704:	adc	r7, r7, r2
   16708:	eor	r4, sl, r6
   1670c:	eor	r5, fp, r7
   16710:	lsr	ip, r4, #24
   16714:	mov	r9, r2
   16718:	orr	r2, ip, r5, lsl #8
   1671c:	lsr	ip, r5, #24
   16720:	mov	r8, r3
   16724:	orr	r3, ip, r4, lsl #8
   16728:	ldrd	r4, [sp, #184]	; 0xb8
   1672c:	adds	r4, r4, r0
   16730:	adc	r5, r5, r1
   16734:	adds	r4, r4, r2
   16738:	adc	r5, r5, r3
   1673c:	mov	r0, r4
   16740:	mov	r1, r5
   16744:	eor	r0, r0, r8
   16748:	eor	r1, r1, r9
   1674c:	mov	r9, r1
   16750:	lsr	r1, r0, #16
   16754:	orr	r1, r1, r9, lsl #16
   16758:	str	r1, [sp, #16]
   1675c:	lsr	r1, r9, #16
   16760:	orr	r1, r1, r0, lsl #16
   16764:	str	r1, [sp, #20]
   16768:	ldrd	r0, [sp, #16]
   1676c:	strd	r4, [sp, #72]	; 0x48
   16770:	adds	r0, r0, r6
   16774:	adc	r1, r1, r7
   16778:	strd	r0, [sp, #96]	; 0x60
   1677c:	eor	r0, r0, r2
   16780:	eor	r1, r1, r3
   16784:	mov	r3, r1
   16788:	lsl	r2, r0, #1
   1678c:	lsl	r1, r1, #1
   16790:	orr	fp, r1, r0, lsr #31
   16794:	orr	sl, r2, r3, lsr #31
   16798:	ldrd	r0, [sp, #144]	; 0x90
   1679c:	ldrd	r2, [sp, #80]	; 0x50
   167a0:	ldrd	r6, [sp, #120]	; 0x78
   167a4:	ldrd	r4, [sp, #32]
   167a8:	adds	r0, r0, r2
   167ac:	adc	r1, r1, r3
   167b0:	ldrd	r2, [sp, #32]
   167b4:	adds	r2, r2, r0
   167b8:	adc	r3, r3, r1
   167bc:	mov	r0, r2
   167c0:	mov	r1, r3
   167c4:	ldrd	r2, [sp, #48]	; 0x30
   167c8:	eor	r3, r3, r1
   167cc:	adds	r6, r6, r3
   167d0:	eor	r2, r2, r0
   167d4:	adc	r7, r7, r2
   167d8:	eor	r4, r4, r6
   167dc:	eor	r5, r5, r7
   167e0:	lsr	ip, r4, #24
   167e4:	mov	r9, r2
   167e8:	orr	r2, ip, r5, lsl #8
   167ec:	lsr	ip, r5, #24
   167f0:	mov	r8, r3
   167f4:	orr	r3, ip, r4, lsl #8
   167f8:	ldrd	r4, [sp, #176]	; 0xb0
   167fc:	adds	r4, r4, r0
   16800:	adc	r5, r5, r1
   16804:	adds	r4, r4, r2
   16808:	adc	r5, r5, r3
   1680c:	mov	r0, r4
   16810:	mov	r1, r5
   16814:	eor	r0, r0, r8
   16818:	eor	r1, r1, r9
   1681c:	mov	r9, r1
   16820:	lsr	r1, r0, #16
   16824:	strd	r4, [sp, #80]	; 0x50
   16828:	orr	r4, r1, r9, lsl #16
   1682c:	lsr	r1, r9, #16
   16830:	adds	r6, r6, r4
   16834:	orr	r5, r1, r0, lsl #16
   16838:	adc	r7, r7, r5
   1683c:	eor	r3, r3, r7
   16840:	eor	r2, r2, r6
   16844:	lsl	r1, r3, #1
   16848:	orr	r1, r1, r2, lsr #31
   1684c:	lsl	r2, r2, #1
   16850:	orr	r3, r2, r3, lsr #31
   16854:	str	r3, [sp, #32]
   16858:	add	r3, sp, #256	; 0x100
   1685c:	str	r1, [sp, #36]	; 0x24
   16860:	ldrd	r0, [r3]
   16864:	ldrd	r2, [sp, #104]	; 0x68
   16868:	adds	r0, r0, r2
   1686c:	adc	r1, r1, r3
   16870:	ldrd	r2, [sp, #56]	; 0x38
   16874:	adds	r2, r2, r0
   16878:	adc	r3, r3, r1
   1687c:	eor	r4, r4, r2
   16880:	eor	r5, r5, r3
   16884:	mov	r0, r2
   16888:	mov	r1, r3
   1688c:	ldrd	r2, [sp, #96]	; 0x60
   16890:	mov	r8, r5
   16894:	mov	r9, r4
   16898:	adds	r2, r2, r5
   1689c:	adc	r3, r3, r4
   168a0:	ldrd	r4, [sp, #56]	; 0x38
   168a4:	strd	r2, [sp, #96]	; 0x60
   168a8:	eor	r4, r4, r2
   168ac:	eor	r5, r5, r3
   168b0:	lsr	ip, r4, #24
   168b4:	orr	r2, ip, r5, lsl #8
   168b8:	lsr	ip, r5, #24
   168bc:	orr	r3, ip, r4, lsl #8
   168c0:	ldrd	r4, [sp, #224]	; 0xe0
   168c4:	adds	r4, r4, r0
   168c8:	adc	r5, r5, r1
   168cc:	adds	r4, r4, r2
   168d0:	adc	r5, r5, r3
   168d4:	mov	r0, r4
   168d8:	mov	r1, r5
   168dc:	eor	r0, r0, r8
   168e0:	eor	r1, r1, r9
   168e4:	mov	r9, r1
   168e8:	lsr	r1, r0, #16
   168ec:	orr	r1, r1, r9, lsl #16
   168f0:	str	r1, [sp, #48]	; 0x30
   168f4:	lsr	r1, r9, #16
   168f8:	orr	r1, r1, r0, lsl #16
   168fc:	str	r1, [sp, #52]	; 0x34
   16900:	strd	r4, [sp, #104]	; 0x68
   16904:	ldrd	r0, [sp, #96]	; 0x60
   16908:	ldrd	r4, [sp, #48]	; 0x30
   1690c:	adds	r0, r0, r4
   16910:	adc	r1, r1, r5
   16914:	strd	r0, [sp, #96]	; 0x60
   16918:	eor	r0, r0, r2
   1691c:	eor	r1, r1, r3
   16920:	mov	r3, r1
   16924:	lsl	r2, r0, #1
   16928:	lsl	r1, r1, #1
   1692c:	orr	r1, r1, r0, lsr #31
   16930:	orr	r3, r2, r3, lsr #31
   16934:	str	r1, [sp, #60]	; 0x3c
   16938:	str	r3, [sp, #56]	; 0x38
   1693c:	ldrd	r0, [sp, #208]	; 0xd0
   16940:	ldrd	r2, [sp, #64]	; 0x40
   16944:	adds	r0, r0, r2
   16948:	adc	r1, r1, r3
   1694c:	ldrd	r2, [sp, #8]
   16950:	adds	r0, r0, sl
   16954:	adc	r1, r1, fp
   16958:	eor	r3, r3, r1
   1695c:	adds	r6, r6, r3
   16960:	eor	r2, r2, r0
   16964:	adc	r7, r7, r2
   16968:	eor	r4, sl, r6
   1696c:	eor	r5, fp, r7
   16970:	lsr	ip, r4, #24
   16974:	mov	r9, r2
   16978:	orr	r2, ip, r5, lsl #8
   1697c:	lsr	ip, r5, #24
   16980:	mov	r8, r3
   16984:	orr	r3, ip, r4, lsl #8
   16988:	ldrd	r4, [sp, #248]	; 0xf8
   1698c:	adds	r4, r4, r0
   16990:	adc	r5, r5, r1
   16994:	adds	r4, r4, r2
   16998:	adc	r5, r5, r3
   1699c:	mov	r0, r4
   169a0:	mov	r1, r5
   169a4:	eor	r0, r0, r8
   169a8:	eor	r1, r1, r9
   169ac:	mov	r9, r1
   169b0:	lsr	r1, r0, #16
   169b4:	orr	r1, r1, r9, lsl #16
   169b8:	str	r1, [sp, #8]
   169bc:	lsr	r1, r9, #16
   169c0:	orr	r1, r1, r0, lsl #16
   169c4:	str	r1, [sp, #12]
   169c8:	strd	r4, [sp, #64]	; 0x40
   169cc:	ldrd	r0, [sp, #8]
   169d0:	ldrd	r8, [sp, #112]	; 0x70
   169d4:	ldrd	r4, [sp, #32]
   169d8:	adds	r0, r0, r6
   169dc:	adc	r1, r1, r7
   169e0:	strd	r0, [sp, #120]	; 0x78
   169e4:	eor	r0, r0, r2
   169e8:	eor	r1, r1, r3
   169ec:	mov	r3, r1
   169f0:	lsl	r2, r0, #1
   169f4:	lsl	r1, r1, #1
   169f8:	orr	fp, r1, r0, lsr #31
   169fc:	orr	sl, r2, r3, lsr #31
   16a00:	ldrd	r0, [sp, #160]	; 0xa0
   16a04:	ldrd	r2, [sp, #72]	; 0x48
   16a08:	adds	r0, r0, r2
   16a0c:	adc	r1, r1, r3
   16a10:	ldrd	r2, [sp, #32]
   16a14:	adds	r2, r2, r0
   16a18:	adc	r3, r3, r1
   16a1c:	mov	r0, r2
   16a20:	mov	r1, r3
   16a24:	ldrd	r2, [sp, #24]
   16a28:	eor	r3, r3, r1
   16a2c:	adds	r8, r8, r3
   16a30:	eor	r2, r2, r0
   16a34:	adc	r9, r9, r2
   16a38:	eor	r4, r4, r8
   16a3c:	eor	r5, r5, r9
   16a40:	lsr	ip, r4, #24
   16a44:	mov	r7, r2
   16a48:	orr	r2, ip, r5, lsl #8
   16a4c:	lsr	ip, r5, #24
   16a50:	mov	r6, r3
   16a54:	orr	r3, ip, r4, lsl #8
   16a58:	ldrd	r4, [sp, #232]	; 0xe8
   16a5c:	adds	r4, r4, r0
   16a60:	adc	r5, r5, r1
   16a64:	adds	r4, r4, r2
   16a68:	adc	r5, r5, r3
   16a6c:	mov	r0, r4
   16a70:	mov	r1, r5
   16a74:	eor	r0, r0, r6
   16a78:	eor	r1, r1, r7
   16a7c:	mov	r7, r1
   16a80:	lsr	r1, r0, #16
   16a84:	orr	r1, r1, r7, lsl #16
   16a88:	str	r1, [sp, #24]
   16a8c:	lsr	r1, r7, #16
   16a90:	orr	r1, r1, r0, lsl #16
   16a94:	str	r1, [sp, #28]
   16a98:	ldrd	r0, [sp, #24]
   16a9c:	ldrd	r6, [sp, #88]	; 0x58
   16aa0:	strd	r4, [sp, #72]	; 0x48
   16aa4:	adds	r0, r0, r8
   16aa8:	adc	r1, r1, r9
   16aac:	ldrd	r4, [sp, #40]	; 0x28
   16ab0:	strd	r0, [sp, #112]	; 0x70
   16ab4:	eor	r0, r0, r2
   16ab8:	eor	r1, r1, r3
   16abc:	mov	r3, r1
   16ac0:	lsl	r2, r0, #1
   16ac4:	lsl	r1, r1, #1
   16ac8:	orr	r1, r1, r0, lsr #31
   16acc:	orr	r3, r2, r3, lsr #31
   16ad0:	str	r1, [sp, #36]	; 0x24
   16ad4:	str	r3, [sp, #32]
   16ad8:	ldrd	r0, [sp, #240]	; 0xf0
   16adc:	ldrd	r2, [sp, #80]	; 0x50
   16ae0:	adds	r0, r0, r2
   16ae4:	adc	r1, r1, r3
   16ae8:	ldrd	r2, [sp, #40]	; 0x28
   16aec:	adds	r2, r2, r0
   16af0:	adc	r3, r3, r1
   16af4:	mov	r0, r2
   16af8:	mov	r1, r3
   16afc:	ldrd	r2, [sp, #16]
   16b00:	eor	r3, r3, r1
   16b04:	adds	r6, r6, r3
   16b08:	eor	r2, r2, r0
   16b0c:	adc	r7, r7, r2
   16b10:	eor	r4, r4, r6
   16b14:	eor	r5, r5, r7
   16b18:	lsr	ip, r4, #24
   16b1c:	mov	r9, r2
   16b20:	orr	r2, ip, r5, lsl #8
   16b24:	lsr	ip, r5, #24
   16b28:	mov	r8, r3
   16b2c:	orr	r3, ip, r4, lsl #8
   16b30:	ldrd	r4, [sp]
   16b34:	adds	r4, r4, r0
   16b38:	adc	r5, r5, r1
   16b3c:	adds	r4, r4, r2
   16b40:	adc	r5, r5, r3
   16b44:	mov	r0, r4
   16b48:	mov	r1, r5
   16b4c:	eor	r0, r0, r8
   16b50:	eor	r1, r1, r9
   16b54:	mov	r9, r1
   16b58:	lsr	r1, r0, #16
   16b5c:	orr	r1, r1, r9, lsl #16
   16b60:	str	r1, [sp, #16]
   16b64:	lsr	r1, r9, #16
   16b68:	orr	r1, r1, r0, lsl #16
   16b6c:	str	r1, [sp, #20]
   16b70:	ldrd	r0, [sp, #16]
   16b74:	strd	r4, [sp, #80]	; 0x50
   16b78:	ldrd	r8, [sp, #112]	; 0x70
   16b7c:	adds	r0, r0, r6
   16b80:	adc	r1, r1, r7
   16b84:	strd	r0, [sp, #88]	; 0x58
   16b88:	eor	r0, r0, r2
   16b8c:	eor	r1, r1, r3
   16b90:	mov	r3, r1
   16b94:	lsl	r2, r0, #1
   16b98:	lsl	r1, r1, #1
   16b9c:	orr	r5, r1, r0, lsr #31
   16ba0:	orr	r4, r2, r3, lsr #31
   16ba4:	ldrd	r0, [sp]
   16ba8:	ldrd	r2, [sp, #104]	; 0x68
   16bac:	adds	r0, r0, r2
   16bb0:	adc	r1, r1, r3
   16bb4:	ldrd	r2, [sp, #8]
   16bb8:	adds	r0, r0, r4
   16bbc:	adc	r1, r1, r5
   16bc0:	eor	r3, r3, r1
   16bc4:	adds	r8, r8, r3
   16bc8:	eor	r2, r2, r0
   16bcc:	adc	r9, r9, r2
   16bd0:	eor	r4, r4, r8
   16bd4:	eor	r5, r5, r9
   16bd8:	lsr	ip, r4, #24
   16bdc:	mov	r7, r2
   16be0:	orr	r2, ip, r5, lsl #8
   16be4:	lsr	ip, r5, #24
   16be8:	mov	r6, r3
   16bec:	orr	r3, ip, r4, lsl #8
   16bf0:	ldrd	r4, [sp, #144]	; 0x90
   16bf4:	adds	r4, r4, r0
   16bf8:	adc	r5, r5, r1
   16bfc:	adds	r4, r4, r2
   16c00:	adc	r5, r5, r3
   16c04:	mov	r0, r4
   16c08:	mov	r1, r5
   16c0c:	eor	r0, r0, r6
   16c10:	eor	r1, r1, r7
   16c14:	mov	r7, r1
   16c18:	lsr	r1, r0, #16
   16c1c:	orr	r1, r1, r7, lsl #16
   16c20:	str	r1, [sp, #8]
   16c24:	lsr	r1, r7, #16
   16c28:	orr	r1, r1, r0, lsl #16
   16c2c:	str	r1, [sp, #12]
   16c30:	ldrd	r0, [sp, #8]
   16c34:	ldrd	r6, [sp, #88]	; 0x58
   16c38:	strd	r4, [sp, #104]	; 0x68
   16c3c:	adds	r0, r0, r8
   16c40:	adc	r1, r1, r9
   16c44:	ldrd	r4, [sp, #56]	; 0x38
   16c48:	strd	r0, [sp, #112]	; 0x70
   16c4c:	eor	r0, r0, r2
   16c50:	eor	r1, r1, r3
   16c54:	mov	r3, r1
   16c58:	lsl	r2, r0, #1
   16c5c:	lsl	r1, r1, #1
   16c60:	orr	r1, r1, r0, lsr #31
   16c64:	orr	r3, r2, r3, lsr #31
   16c68:	str	r1, [sp, #44]	; 0x2c
   16c6c:	str	r3, [sp, #40]	; 0x28
   16c70:	ldrd	r0, [sp, #152]	; 0x98
   16c74:	ldrd	r2, [sp, #64]	; 0x40
   16c78:	adds	r0, r0, r2
   16c7c:	adc	r1, r1, r3
   16c80:	ldrd	r2, [sp, #56]	; 0x38
   16c84:	adds	r2, r2, r0
   16c88:	adc	r3, r3, r1
   16c8c:	mov	r0, r2
   16c90:	mov	r1, r3
   16c94:	ldrd	r2, [sp, #24]
   16c98:	eor	r3, r3, r1
   16c9c:	adds	r6, r6, r3
   16ca0:	eor	r2, r2, r0
   16ca4:	adc	r7, r7, r2
   16ca8:	eor	r4, r4, r6
   16cac:	eor	r5, r5, r7
   16cb0:	lsr	ip, r4, #24
   16cb4:	mov	r9, r2
   16cb8:	orr	r2, ip, r5, lsl #8
   16cbc:	lsr	ip, r5, #24
   16cc0:	mov	r8, r3
   16cc4:	orr	r3, ip, r4, lsl #8
   16cc8:	ldrd	r4, [sp, #160]	; 0xa0
   16ccc:	adds	r4, r4, r0
   16cd0:	adc	r5, r5, r1
   16cd4:	adds	r4, r4, r2
   16cd8:	adc	r5, r5, r3
   16cdc:	mov	r0, r4
   16ce0:	mov	r1, r5
   16ce4:	eor	r0, r0, r8
   16ce8:	eor	r1, r1, r9
   16cec:	mov	r9, r1
   16cf0:	lsr	r1, r0, #16
   16cf4:	orr	r1, r1, r9, lsl #16
   16cf8:	str	r1, [sp, #24]
   16cfc:	lsr	r1, r9, #16
   16d00:	orr	r1, r1, r0, lsl #16
   16d04:	str	r1, [sp, #28]
   16d08:	ldrd	r0, [sp, #24]
   16d0c:	strd	r4, [sp, #64]	; 0x40
   16d10:	adds	r0, r0, r6
   16d14:	adc	r1, r1, r7
   16d18:	ldrd	r6, [sp, #96]	; 0x60
   16d1c:	strd	r0, [sp, #88]	; 0x58
   16d20:	eor	r0, r0, r2
   16d24:	eor	r1, r1, r3
   16d28:	mov	r3, r1
   16d2c:	lsl	r2, r0, #1
   16d30:	lsl	r1, r1, #1
   16d34:	orr	r1, r1, r0, lsr #31
   16d38:	orr	r3, r2, r3, lsr #31
   16d3c:	str	r1, [sp, #60]	; 0x3c
   16d40:	str	r3, [sp, #56]	; 0x38
   16d44:	ldrd	r0, [sp, #168]	; 0xa8
   16d48:	ldrd	r2, [sp, #72]	; 0x48
   16d4c:	adds	r0, r0, r2
   16d50:	adc	r1, r1, r3
   16d54:	ldrd	r2, [sp, #16]
   16d58:	adds	r0, r0, sl
   16d5c:	adc	r1, r1, fp
   16d60:	eor	r3, r3, r1
   16d64:	adds	r6, r6, r3
   16d68:	eor	r2, r2, r0
   16d6c:	adc	r7, r7, r2
   16d70:	eor	r4, sl, r6
   16d74:	eor	r5, fp, r7
   16d78:	lsr	ip, r4, #24
   16d7c:	mov	r9, r2
   16d80:	orr	r2, ip, r5, lsl #8
   16d84:	lsr	ip, r5, #24
   16d88:	mov	r8, r3
   16d8c:	orr	r3, ip, r4, lsl #8
   16d90:	ldrd	r4, [sp, #176]	; 0xb0
   16d94:	adds	r4, r4, r0
   16d98:	adc	r5, r5, r1
   16d9c:	adds	r4, r4, r2
   16da0:	adc	r5, r5, r3
   16da4:	mov	r0, r4
   16da8:	mov	r1, r5
   16dac:	eor	r0, r0, r8
   16db0:	eor	r1, r1, r9
   16db4:	mov	r9, r1
   16db8:	lsr	r1, r0, #16
   16dbc:	orr	r1, r1, r9, lsl #16
   16dc0:	str	r1, [sp, #16]
   16dc4:	lsr	r1, r9, #16
   16dc8:	orr	r1, r1, r0, lsl #16
   16dcc:	str	r1, [sp, #20]
   16dd0:	ldrd	r0, [sp, #16]
   16dd4:	strd	r4, [sp, #72]	; 0x48
   16dd8:	adds	r0, r0, r6
   16ddc:	adc	r1, r1, r7
   16de0:	strd	r0, [sp, #96]	; 0x60
   16de4:	eor	r0, r0, r2
   16de8:	eor	r1, r1, r3
   16dec:	mov	r3, r1
   16df0:	lsl	r2, r0, #1
   16df4:	lsl	r1, r1, #1
   16df8:	orr	fp, r1, r0, lsr #31
   16dfc:	orr	sl, r2, r3, lsr #31
   16e00:	ldrd	r0, [sp, #184]	; 0xb8
   16e04:	ldrd	r2, [sp, #80]	; 0x50
   16e08:	ldrd	r6, [sp, #120]	; 0x78
   16e0c:	ldrd	r4, [sp, #32]
   16e10:	adds	r0, r0, r2
   16e14:	adc	r1, r1, r3
   16e18:	ldrd	r2, [sp, #32]
   16e1c:	adds	r2, r2, r0
   16e20:	adc	r3, r3, r1
   16e24:	mov	r0, r2
   16e28:	mov	r1, r3
   16e2c:	ldrd	r2, [sp, #48]	; 0x30
   16e30:	eor	r3, r3, r1
   16e34:	adds	r6, r6, r3
   16e38:	eor	r2, r2, r0
   16e3c:	adc	r7, r7, r2
   16e40:	eor	r4, r4, r6
   16e44:	eor	r5, r5, r7
   16e48:	lsr	ip, r4, #24
   16e4c:	mov	r9, r2
   16e50:	orr	r2, ip, r5, lsl #8
   16e54:	lsr	ip, r5, #24
   16e58:	mov	r8, r3
   16e5c:	orr	r3, ip, r4, lsl #8
   16e60:	ldrd	r4, [sp, #192]	; 0xc0
   16e64:	adds	r4, r4, r0
   16e68:	adc	r5, r5, r1
   16e6c:	adds	r4, r4, r2
   16e70:	adc	r5, r5, r3
   16e74:	mov	r0, r4
   16e78:	mov	r1, r5
   16e7c:	eor	r0, r0, r8
   16e80:	eor	r1, r1, r9
   16e84:	mov	r9, r1
   16e88:	lsr	r1, r0, #16
   16e8c:	strd	r4, [sp, #80]	; 0x50
   16e90:	orr	r4, r1, r9, lsl #16
   16e94:	lsr	r1, r9, #16
   16e98:	adds	r6, r6, r4
   16e9c:	orr	r5, r1, r0, lsl #16
   16ea0:	adc	r7, r7, r5
   16ea4:	eor	r3, r3, r7
   16ea8:	eor	r2, r2, r6
   16eac:	lsl	r1, r3, #1
   16eb0:	orr	r1, r1, r2, lsr #31
   16eb4:	lsl	r2, r2, #1
   16eb8:	orr	r3, r2, r3, lsr #31
   16ebc:	str	r1, [sp, #36]	; 0x24
   16ec0:	str	r3, [sp, #32]
   16ec4:	ldrd	r0, [sp, #200]	; 0xc8
   16ec8:	ldrd	r2, [sp, #104]	; 0x68
   16ecc:	adds	r0, r0, r2
   16ed0:	adc	r1, r1, r3
   16ed4:	ldrd	r2, [sp, #56]	; 0x38
   16ed8:	adds	r2, r2, r0
   16edc:	adc	r3, r3, r1
   16ee0:	eor	r4, r4, r2
   16ee4:	eor	r5, r5, r3
   16ee8:	mov	r0, r2
   16eec:	mov	r1, r3
   16ef0:	ldrd	r2, [sp, #96]	; 0x60
   16ef4:	mov	r8, r5
   16ef8:	mov	r9, r4
   16efc:	adds	r2, r2, r5
   16f00:	adc	r3, r3, r4
   16f04:	ldrd	r4, [sp, #56]	; 0x38
   16f08:	strd	r2, [sp, #96]	; 0x60
   16f0c:	eor	r4, r4, r2
   16f10:	eor	r5, r5, r3
   16f14:	lsr	ip, r4, #24
   16f18:	orr	r2, ip, r5, lsl #8
   16f1c:	lsr	ip, r5, #24
   16f20:	orr	r3, ip, r4, lsl #8
   16f24:	ldrd	r4, [sp, #208]	; 0xd0
   16f28:	adds	r4, r4, r0
   16f2c:	adc	r5, r5, r1
   16f30:	adds	r4, r4, r2
   16f34:	adc	r5, r5, r3
   16f38:	mov	r0, r4
   16f3c:	mov	r1, r5
   16f40:	eor	r0, r0, r8
   16f44:	eor	r1, r1, r9
   16f48:	mov	r9, r1
   16f4c:	lsr	r1, r0, #16
   16f50:	orr	r1, r1, r9, lsl #16
   16f54:	str	r1, [sp, #48]	; 0x30
   16f58:	lsr	r1, r9, #16
   16f5c:	orr	r1, r1, r0, lsl #16
   16f60:	str	r1, [sp, #52]	; 0x34
   16f64:	strd	r4, [sp, #104]	; 0x68
   16f68:	ldrd	r0, [sp, #96]	; 0x60
   16f6c:	ldrd	r4, [sp, #48]	; 0x30
   16f70:	adds	r0, r0, r4
   16f74:	adc	r1, r1, r5
   16f78:	strd	r0, [sp, #96]	; 0x60
   16f7c:	eor	r0, r0, r2
   16f80:	eor	r1, r1, r3
   16f84:	mov	r3, r1
   16f88:	lsl	r2, r0, #1
   16f8c:	lsl	r1, r1, #1
   16f90:	orr	r1, r1, r0, lsr #31
   16f94:	orr	r3, r2, r3, lsr #31
   16f98:	str	r1, [sp, #60]	; 0x3c
   16f9c:	str	r3, [sp, #56]	; 0x38
   16fa0:	ldrd	r0, [sp, #216]	; 0xd8
   16fa4:	ldrd	r2, [sp, #64]	; 0x40
   16fa8:	adds	r0, r0, r2
   16fac:	adc	r1, r1, r3
   16fb0:	ldrd	r2, [sp, #8]
   16fb4:	adds	r0, r0, sl
   16fb8:	adc	r1, r1, fp
   16fbc:	eor	r3, r3, r1
   16fc0:	adds	r6, r6, r3
   16fc4:	eor	r2, r2, r0
   16fc8:	adc	r7, r7, r2
   16fcc:	eor	r4, sl, r6
   16fd0:	eor	r5, fp, r7
   16fd4:	lsr	ip, r4, #24
   16fd8:	mov	r9, r2
   16fdc:	orr	r2, ip, r5, lsl #8
   16fe0:	lsr	ip, r5, #24
   16fe4:	mov	r8, r3
   16fe8:	orr	r3, ip, r4, lsl #8
   16fec:	ldrd	r4, [sp, #224]	; 0xe0
   16ff0:	adds	r4, r4, r0
   16ff4:	adc	r5, r5, r1
   16ff8:	adds	r4, r4, r2
   16ffc:	adc	r5, r5, r3
   17000:	mov	r0, r4
   17004:	mov	r1, r5
   17008:	eor	r0, r0, r8
   1700c:	eor	r1, r1, r9
   17010:	mov	r9, r1
   17014:	lsr	r1, r0, #16
   17018:	orr	sl, r1, r9, lsl #16
   1701c:	lsr	r1, r9, #16
   17020:	orr	fp, r1, r0, lsl #16
   17024:	adds	r0, r6, sl
   17028:	adc	r1, r7, fp
   1702c:	strd	r4, [sp, #64]	; 0x40
   17030:	strd	r0, [sp, #120]	; 0x78
   17034:	eor	r0, r0, r2
   17038:	eor	r1, r1, r3
   1703c:	mov	r3, r1
   17040:	lsl	r2, r0, #1
   17044:	lsl	r1, r1, #1
   17048:	orr	r1, r1, r0, lsr #31
   1704c:	orr	r3, r2, r3, lsr #31
   17050:	str	r1, [sp, #12]
   17054:	str	r3, [sp, #8]
   17058:	ldrd	r2, [sp, #72]	; 0x48
   1705c:	ldrd	r0, [sp, #232]	; 0xe8
   17060:	ldrd	r8, [sp, #112]	; 0x70
   17064:	ldrd	r4, [sp, #32]
   17068:	adds	r0, r0, r2
   1706c:	adc	r1, r1, r3
   17070:	ldrd	r2, [sp, #32]
   17074:	adds	r2, r2, r0
   17078:	adc	r3, r3, r1
   1707c:	mov	r0, r2
   17080:	mov	r1, r3
   17084:	ldrd	r2, [sp, #24]
   17088:	eor	r3, r3, r1
   1708c:	adds	r8, r8, r3
   17090:	eor	r2, r2, r0
   17094:	adc	r9, r9, r2
   17098:	eor	r4, r4, r8
   1709c:	eor	r5, r5, r9
   170a0:	lsr	ip, r4, #24
   170a4:	mov	r7, r2
   170a8:	orr	r2, ip, r5, lsl #8
   170ac:	lsr	ip, r5, #24
   170b0:	mov	r6, r3
   170b4:	orr	r3, ip, r4, lsl #8
   170b8:	ldrd	r4, [sp, #240]	; 0xf0
   170bc:	adds	r4, r4, r0
   170c0:	adc	r5, r5, r1
   170c4:	adds	r4, r4, r2
   170c8:	adc	r5, r5, r3
   170cc:	mov	r0, r4
   170d0:	mov	r1, r5
   170d4:	eor	r0, r0, r6
   170d8:	eor	r1, r1, r7
   170dc:	mov	r7, r1
   170e0:	lsr	r1, r0, #16
   170e4:	orr	r1, r1, r7, lsl #16
   170e8:	str	r1, [sp, #24]
   170ec:	lsr	r1, r7, #16
   170f0:	orr	r1, r1, r0, lsl #16
   170f4:	str	r1, [sp, #28]
   170f8:	ldrd	r0, [sp, #24]
   170fc:	ldrd	r6, [sp, #88]	; 0x58
   17100:	strd	r4, [sp, #72]	; 0x48
   17104:	adds	r0, r0, r8
   17108:	adc	r1, r1, r9
   1710c:	ldrd	r4, [sp, #40]	; 0x28
   17110:	strd	r0, [sp, #112]	; 0x70
   17114:	eor	r0, r0, r2
   17118:	eor	r1, r1, r3
   1711c:	mov	r3, r1
   17120:	lsl	r2, r0, #1
   17124:	lsl	r1, r1, #1
   17128:	orr	r1, r1, r0, lsr #31
   1712c:	orr	r3, r2, r3, lsr #31
   17130:	str	r1, [sp, #36]	; 0x24
   17134:	str	r3, [sp, #32]
   17138:	ldrd	r0, [sp, #248]	; 0xf8
   1713c:	ldrd	r2, [sp, #80]	; 0x50
   17140:	adds	r0, r0, r2
   17144:	adc	r1, r1, r3
   17148:	ldrd	r2, [sp, #40]	; 0x28
   1714c:	adds	r2, r2, r0
   17150:	adc	r3, r3, r1
   17154:	mov	r0, r2
   17158:	mov	r1, r3
   1715c:	ldrd	r2, [sp, #16]
   17160:	eor	r3, r3, r1
   17164:	adds	r6, r6, r3
   17168:	eor	r2, r2, r0
   1716c:	adc	r7, r7, r2
   17170:	eor	r4, r4, r6
   17174:	eor	r5, r5, r7
   17178:	lsr	ip, r4, #24
   1717c:	mov	r9, r2
   17180:	orr	r2, ip, r5, lsl #8
   17184:	lsr	ip, r5, #24
   17188:	mov	r8, r3
   1718c:	orr	r3, ip, r4, lsl #8
   17190:	add	ip, sp, #256	; 0x100
   17194:	ldrd	r4, [ip]
   17198:	adds	r4, r4, r0
   1719c:	adc	r5, r5, r1
   171a0:	adds	r4, r4, r2
   171a4:	adc	r5, r5, r3
   171a8:	mov	r0, r4
   171ac:	mov	r1, r5
   171b0:	eor	r0, r0, r8
   171b4:	eor	r1, r1, r9
   171b8:	mov	r9, r1
   171bc:	lsr	r1, r0, #16
   171c0:	orr	r1, r1, r9, lsl #16
   171c4:	str	r1, [sp, #16]
   171c8:	lsr	r1, r9, #16
   171cc:	orr	r1, r1, r0, lsl #16
   171d0:	str	r1, [sp, #20]
   171d4:	ldrd	r0, [sp, #16]
   171d8:	strd	r4, [sp, #80]	; 0x50
   171dc:	adds	r0, r0, r6
   171e0:	adc	r1, r1, r7
   171e4:	strd	r0, [sp, #88]	; 0x58
   171e8:	eor	r0, r0, r2
   171ec:	eor	r1, r1, r3
   171f0:	mov	r3, r1
   171f4:	lsl	r2, r0, #1
   171f8:	lsl	r1, r1, #1
   171fc:	orr	r5, r1, r0, lsr #31
   17200:	orr	r4, r2, r3, lsr #31
   17204:	ldrd	r0, [sp, #248]	; 0xf8
   17208:	ldrd	r2, [sp, #104]	; 0x68
   1720c:	adds	r0, r0, r2
   17210:	adc	r1, r1, r3
   17214:	adds	r0, r0, r4
   17218:	adc	r1, r1, r5
   1721c:	eor	r2, sl, r0
   17220:	eor	r3, fp, r1
   17224:	ldrd	sl, [sp, #112]	; 0x70
   17228:	mov	r7, r2
   1722c:	mov	r6, r3
   17230:	adds	sl, sl, r3
   17234:	adc	fp, fp, r2
   17238:	eor	r4, r4, sl
   1723c:	eor	r5, r5, fp
   17240:	lsr	ip, r4, #24
   17244:	orr	r2, ip, r5, lsl #8
   17248:	lsr	ip, r5, #24
   1724c:	orr	r3, ip, r4, lsl #8
   17250:	ldrd	r4, [sp, #216]	; 0xd8
   17254:	adds	r4, r4, r0
   17258:	adc	r5, r5, r1
   1725c:	adds	r4, r4, r2
   17260:	adc	r5, r5, r3
   17264:	mov	r0, r4
   17268:	mov	r1, r5
   1726c:	eor	r0, r0, r6
   17270:	eor	r1, r1, r7
   17274:	mov	r7, r1
   17278:	lsr	r1, r0, #16
   1727c:	orr	r1, r1, r7, lsl #16
   17280:	str	r1, [sp, #40]	; 0x28
   17284:	lsr	r1, r7, #16
   17288:	orr	r1, r1, r0, lsl #16
   1728c:	strd	r4, [sp, #104]	; 0x68
   17290:	str	r1, [sp, #44]	; 0x2c
   17294:	ldrd	r0, [sp, #40]	; 0x28
   17298:	ldrd	r6, [sp, #88]	; 0x58
   1729c:	ldrd	r4, [sp, #56]	; 0x38
   172a0:	adds	r0, r0, sl
   172a4:	adc	r1, r1, fp
   172a8:	strd	r0, [sp, #112]	; 0x70
   172ac:	eor	r0, r0, r2
   172b0:	eor	r1, r1, r3
   172b4:	mov	r3, r1
   172b8:	lsl	r2, r0, #1
   172bc:	lsl	r1, r1, #1
   172c0:	orr	fp, r1, r0, lsr #31
   172c4:	orr	sl, r2, r3, lsr #31
   172c8:	ldrd	r0, [sp, #168]	; 0xa8
   172cc:	ldrd	r2, [sp, #64]	; 0x40
   172d0:	adds	r0, r0, r2
   172d4:	adc	r1, r1, r3
   172d8:	ldrd	r2, [sp, #56]	; 0x38
   172dc:	adds	r2, r2, r0
   172e0:	adc	r3, r3, r1
   172e4:	mov	r0, r2
   172e8:	mov	r1, r3
   172ec:	ldrd	r2, [sp, #24]
   172f0:	eor	r3, r3, r1
   172f4:	adds	r6, r6, r3
   172f8:	eor	r2, r2, r0
   172fc:	adc	r7, r7, r2
   17300:	eor	r4, r4, r6
   17304:	eor	r5, r5, r7
   17308:	lsr	ip, r4, #24
   1730c:	mov	r9, r2
   17310:	orr	r2, ip, r5, lsl #8
   17314:	lsr	ip, r5, #24
   17318:	mov	r8, r3
   1731c:	orr	r3, ip, r4, lsl #8
   17320:	ldrd	r4, [sp, #200]	; 0xc8
   17324:	adds	r4, r4, r0
   17328:	adc	r5, r5, r1
   1732c:	adds	r4, r4, r2
   17330:	adc	r5, r5, r3
   17334:	mov	r0, r4
   17338:	mov	r1, r5
   1733c:	eor	r0, r0, r8
   17340:	eor	r1, r1, r9
   17344:	mov	r9, r1
   17348:	lsr	r1, r0, #16
   1734c:	orr	r1, r1, r9, lsl #16
   17350:	str	r1, [sp, #24]
   17354:	lsr	r1, r9, #16
   17358:	orr	r1, r1, r0, lsl #16
   1735c:	str	r1, [sp, #28]
   17360:	ldrd	r0, [sp, #24]
   17364:	strd	r4, [sp, #64]	; 0x40
   17368:	ldrd	r4, [sp, #8]
   1736c:	adds	r0, r0, r6
   17370:	adc	r1, r1, r7
   17374:	ldrd	r6, [sp, #96]	; 0x60
   17378:	strd	r0, [sp, #88]	; 0x58
   1737c:	eor	r0, r0, r2
   17380:	eor	r1, r1, r3
   17384:	mov	r3, r1
   17388:	lsl	r2, r0, #1
   1738c:	lsl	r1, r1, #1
   17390:	orr	r1, r1, r0, lsr #31
   17394:	orr	r3, r2, r3, lsr #31
   17398:	str	r1, [sp, #60]	; 0x3c
   1739c:	str	r3, [sp, #56]	; 0x38
   173a0:	ldrd	r0, [sp, #208]	; 0xd0
   173a4:	ldrd	r2, [sp, #72]	; 0x48
   173a8:	adds	r0, r0, r2
   173ac:	adc	r1, r1, r3
   173b0:	ldrd	r2, [sp, #8]
   173b4:	adds	r2, r2, r0
   173b8:	adc	r3, r3, r1
   173bc:	mov	r0, r2
   173c0:	mov	r1, r3
   173c4:	ldrd	r2, [sp, #16]
   173c8:	eor	r3, r3, r1
   173cc:	adds	r6, r6, r3
   173d0:	eor	r2, r2, r0
   173d4:	adc	r7, r7, r2
   173d8:	eor	r4, r4, r6
   173dc:	eor	r5, r5, r7
   173e0:	lsr	ip, r4, #24
   173e4:	mov	r9, r2
   173e8:	orr	r2, ip, r5, lsl #8
   173ec:	lsr	ip, r5, #24
   173f0:	mov	r8, r3
   173f4:	orr	r3, ip, r4, lsl #8
   173f8:	add	ip, sp, #256	; 0x100
   173fc:	ldrd	r4, [ip]
   17400:	adds	r4, r4, r0
   17404:	adc	r5, r5, r1
   17408:	adds	r4, r4, r2
   1740c:	adc	r5, r5, r3
   17410:	mov	r0, r4
   17414:	mov	r1, r5
   17418:	eor	r0, r0, r8
   1741c:	eor	r1, r1, r9
   17420:	mov	r9, r1
   17424:	lsr	r1, r0, #16
   17428:	orr	r1, r1, r9, lsl #16
   1742c:	str	r1, [sp, #8]
   17430:	lsr	r1, r9, #16
   17434:	orr	r1, r1, r0, lsl #16
   17438:	str	r1, [sp, #12]
   1743c:	ldrd	r0, [sp, #8]
   17440:	strd	r4, [sp, #72]	; 0x48
   17444:	adds	r0, r0, r6
   17448:	adc	r1, r1, r7
   1744c:	eor	r3, r3, r1
   17450:	eor	r2, r2, r0
   17454:	mov	r7, r1
   17458:	lsl	r1, r3, #1
   1745c:	orr	r1, r1, r2, lsr #31
   17460:	lsl	r2, r2, #1
   17464:	orr	r3, r2, r3, lsr #31
   17468:	mov	r6, r0
   1746c:	str	r1, [sp, #20]
   17470:	str	r3, [sp, #16]
   17474:	ldrd	r0, [sp, #80]	; 0x50
   17478:	ldrd	r2, [sp, #240]	; 0xf0
   1747c:	adds	r2, r2, r0
   17480:	adc	r3, r3, r1
   17484:	ldrd	r0, [sp, #32]
   17488:	adds	r0, r0, r2
   1748c:	adc	r1, r1, r3
   17490:	mov	r2, r0
   17494:	mov	r3, r1
   17498:	ldrd	r0, [sp, #48]	; 0x30
   1749c:	ldrd	r4, [sp, #32]
   174a0:	eor	r0, r0, r2
   174a4:	eor	r1, r1, r3
   174a8:	mov	r8, r1
   174ac:	mov	r9, r0
   174b0:	ldrd	r0, [sp, #120]	; 0x78
   174b4:	adds	r0, r0, r8
   174b8:	adc	r1, r1, r9
   174bc:	eor	r4, r4, r0
   174c0:	eor	r5, r5, r1
   174c4:	lsr	ip, r4, #24
   174c8:	strd	r0, [sp, #48]	; 0x30
   174cc:	orr	r0, ip, r5, lsl #8
   174d0:	lsr	ip, r5, #24
   174d4:	orr	r1, ip, r4, lsl #8
   174d8:	ldrd	r4, [sp, #184]	; 0xb8
   174dc:	adds	r4, r4, r2
   174e0:	adc	r5, r5, r3
   174e4:	adds	r4, r4, r0
   174e8:	adc	r5, r5, r1
   174ec:	mov	r2, r4
   174f0:	eor	r2, r2, r8
   174f4:	mov	r3, r5
   174f8:	eor	r3, r3, r9
   174fc:	strd	r4, [sp, #80]	; 0x50
   17500:	ldrd	r4, [sp, #48]	; 0x30
   17504:	mov	r8, r2
   17508:	lsr	ip, r2, #16
   1750c:	orr	r2, ip, r3, lsl #16
   17510:	lsr	ip, r3, #16
   17514:	adds	r4, r4, r2
   17518:	orr	r3, ip, r8, lsl #16
   1751c:	adc	r5, r5, r3
   17520:	strd	r4, [sp, #48]	; 0x30
   17524:	eor	r4, r4, r0
   17528:	eor	r5, r5, r1
   1752c:	lsl	r0, r4, #1
   17530:	orr	r1, r0, r5, lsr #31
   17534:	lsl	ip, r5, #1
   17538:	orr	ip, ip, r4, lsr #31
   1753c:	str	r1, [sp, #32]
   17540:	ldrd	r4, [sp, #104]	; 0x68
   17544:	ldrd	r0, [sp, #144]	; 0x90
   17548:	str	ip, [sp, #36]	; 0x24
   1754c:	adds	r0, r0, r4
   17550:	adc	r1, r1, r5
   17554:	ldrd	r4, [sp, #56]	; 0x38
   17558:	adds	r4, r4, r0
   1755c:	adc	r5, r5, r1
   17560:	eor	r3, r3, r5
   17564:	adds	r6, r6, r3
   17568:	eor	r2, r2, r4
   1756c:	adc	r7, r7, r2
   17570:	mov	r0, r4
   17574:	mov	r1, r5
   17578:	mov	r4, r3
   1757c:	mov	r5, r2
   17580:	ldrd	r2, [sp, #56]	; 0x38
   17584:	eor	r2, r2, r6
   17588:	eor	r3, r3, r7
   1758c:	lsr	ip, r2, #24
   17590:	orr	r8, ip, r3, lsl #8
   17594:	lsr	r3, r3, #24
   17598:	orr	r9, r3, r2, lsl #8
   1759c:	ldrd	r2, [sp, #232]	; 0xe8
   175a0:	adds	r2, r2, r0
   175a4:	adc	r3, r3, r1
   175a8:	adds	r0, r2, r8
   175ac:	adc	r1, r3, r9
   175b0:	eor	r4, r4, r0
   175b4:	add	r3, sp, #264	; 0x108
   175b8:	eor	r5, r5, r1
   175bc:	strd	r0, [r3]
   175c0:	lsr	r1, r4, #16
   175c4:	orr	r2, r1, r5, lsl #16
   175c8:	lsr	r1, r5, #16
   175cc:	orr	r3, r1, r4, lsl #16
   175d0:	add	r1, sp, #384	; 0x180
   175d4:	adds	r6, r6, r2
   175d8:	strd	r2, [r1]
   175dc:	adc	r7, r7, r3
   175e0:	add	r3, sp, #344	; 0x158
   175e4:	ldrd	r0, [sp]
   175e8:	strd	r6, [r3]
   175ec:	eor	r6, r6, r8
   175f0:	eor	r7, r7, r9
   175f4:	lsl	r2, r6, #1
   175f8:	lsl	r3, r7, #1
   175fc:	orr	r3, r3, r6, lsr #31
   17600:	orr	r2, r2, r7, lsr #31
   17604:	str	r2, [sp, #304]	; 0x130
   17608:	str	r3, [sp, #308]	; 0x134
   1760c:	ldrd	r2, [sp, #64]	; 0x40
   17610:	ldrd	r6, [sp, #48]	; 0x30
   17614:	adds	r0, r0, r2
   17618:	adc	r1, r1, r3
   1761c:	ldrd	r2, [sp, #16]
   17620:	adds	r2, r2, r0
   17624:	adc	r3, r3, r1
   17628:	mov	r0, r2
   1762c:	mov	r1, r3
   17630:	ldrd	r2, [sp, #40]	; 0x28
   17634:	eor	r3, r3, r1
   17638:	adds	r6, r6, r3
   1763c:	eor	r2, r2, r0
   17640:	adc	r7, r7, r2
   17644:	mov	r4, r3
   17648:	mov	r5, r2
   1764c:	ldrd	r2, [sp, #16]
   17650:	eor	r2, r2, r6
   17654:	eor	r3, r3, r7
   17658:	lsr	ip, r2, #24
   1765c:	orr	r8, ip, r3, lsl #8
   17660:	lsr	r3, r3, #24
   17664:	orr	r9, r3, r2, lsl #8
   17668:	ldrd	r2, [sp, #152]	; 0x98
   1766c:	adds	r2, r2, r0
   17670:	adc	r3, r3, r1
   17674:	adds	r0, r2, r8
   17678:	adc	r1, r3, r9
   1767c:	eor	r4, r4, r0
   17680:	add	r3, sp, #272	; 0x110
   17684:	eor	r5, r5, r1
   17688:	strd	r0, [r3]
   1768c:	lsr	r1, r4, #16
   17690:	orr	r2, r1, r5, lsl #16
   17694:	lsr	r1, r5, #16
   17698:	orr	r3, r1, r4, lsl #16
   1769c:	add	r1, sp, #360	; 0x168
   176a0:	adds	r6, r6, r2
   176a4:	adc	r7, r7, r3
   176a8:	strd	r2, [r1]
   176ac:	add	r3, sp, #352	; 0x160
   176b0:	strd	r6, [r3]
   176b4:	eor	r6, r6, r8
   176b8:	eor	r7, r7, r9
   176bc:	lsl	r2, r6, #1
   176c0:	lsl	r3, r7, #1
   176c4:	orr	r3, r3, r6, lsr #31
   176c8:	orr	r2, r2, r7, lsr #31
   176cc:	str	r2, [sp, #312]	; 0x138
   176d0:	str	r3, [sp, #316]	; 0x13c
   176d4:	ldrd	r0, [sp, #224]	; 0xe0
   176d8:	ldrd	r2, [sp, #72]	; 0x48
   176dc:	ldrd	r8, [sp, #112]	; 0x70
   176e0:	adds	r0, r0, r2
   176e4:	adc	r1, r1, r3
   176e8:	ldrd	r2, [sp, #32]
   176ec:	adds	r2, r2, r0
   176f0:	adc	r3, r3, r1
   176f4:	mov	r0, r2
   176f8:	mov	r1, r3
   176fc:	ldrd	r2, [sp, #24]
   17700:	eor	r3, r3, r1
   17704:	adds	r8, r8, r3
   17708:	eor	r2, r2, r0
   1770c:	adc	r9, r9, r2
   17710:	mov	r4, r3
   17714:	mov	r5, r2
   17718:	ldrd	r2, [sp, #32]
   1771c:	eor	r2, r2, r8
   17720:	eor	r3, r3, r9
   17724:	lsr	ip, r2, #24
   17728:	orr	r6, ip, r3, lsl #8
   1772c:	lsr	r3, r3, #24
   17730:	orr	r7, r3, r2, lsl #8
   17734:	ldrd	r2, [sp, #192]	; 0xc0
   17738:	adds	r2, r2, r0
   1773c:	adc	r3, r3, r1
   17740:	adds	r0, r2, r6
   17744:	adc	r1, r3, r7
   17748:	eor	r4, r4, r0
   1774c:	add	r3, sp, #280	; 0x118
   17750:	eor	r5, r5, r1
   17754:	strd	r0, [r3]
   17758:	lsr	r1, r4, #16
   1775c:	orr	r2, r1, r5, lsl #16
   17760:	lsr	r1, r5, #16
   17764:	orr	r3, r1, r4, lsl #16
   17768:	add	r1, sp, #368	; 0x170
   1776c:	adds	r8, r8, r2
   17770:	adc	r9, r9, r3
   17774:	strd	r2, [r1]
   17778:	add	r3, sp, #328	; 0x148
   1777c:	ldrd	r0, [sp, #80]	; 0x50
   17780:	strd	r8, [r3]
   17784:	eor	r8, r8, r6
   17788:	eor	r9, r9, r7
   1778c:	lsl	r2, r8, #1
   17790:	lsl	r3, r9, #1
   17794:	orr	r3, r3, r8, lsr #31
   17798:	orr	r2, r2, r9, lsr #31
   1779c:	str	r2, [sp, #320]	; 0x140
   177a0:	str	r3, [sp, #324]	; 0x144
   177a4:	ldrd	r2, [sp, #176]	; 0xb0
   177a8:	ldrd	r8, [sp, #88]	; 0x58
   177ac:	adds	r2, r2, r0
   177b0:	adc	r3, r3, r1
   177b4:	ldrd	r0, [sp, #8]
   177b8:	adds	r2, r2, sl
   177bc:	adc	r3, r3, fp
   177c0:	eor	r1, r1, r3
   177c4:	adds	r8, r8, r1
   177c8:	eor	r0, r0, r2
   177cc:	adc	r9, r9, r0
   177d0:	eor	r4, sl, r8
   177d4:	eor	r5, fp, r9
   177d8:	lsr	ip, r4, #24
   177dc:	mov	r7, r0
   177e0:	orr	r0, ip, r5, lsl #8
   177e4:	lsr	ip, r5, #24
   177e8:	mov	r6, r1
   177ec:	orr	r1, ip, r4, lsl #8
   177f0:	ldrd	r4, [sp, #160]	; 0xa0
   177f4:	add	ip, sp, #288	; 0x120
   177f8:	adds	r4, r4, r2
   177fc:	adc	r5, r5, r3
   17800:	adds	r2, r4, r0
   17804:	adc	r3, r5, r1
   17808:	eor	r6, r6, r2
   1780c:	eor	r7, r7, r3
   17810:	strd	r2, [ip]
   17814:	lsr	ip, r6, #16
   17818:	orr	r2, ip, r7, lsl #16
   1781c:	lsr	ip, r7, #16
   17820:	orr	r3, ip, r6, lsl #16
   17824:	adds	r8, r8, r2
   17828:	add	ip, sp, #376	; 0x178
   1782c:	adc	r9, r9, r3
   17830:	strd	r2, [ip]
   17834:	eor	r0, r0, r8
   17838:	add	r3, sp, #336	; 0x150
   1783c:	eor	r1, r1, r9
   17840:	strd	r8, [r3]
   17844:	lsl	r2, r0, #1
   17848:	lsl	r3, r1, #1
   1784c:	sub	ip, lr, #8
   17850:	add	r4, sp, #264	; 0x108
   17854:	add	lr, lr, #56	; 0x38
   17858:	orr	r3, r3, r0, lsr #31
   1785c:	orr	r2, r2, r1, lsr #31
   17860:	str	r2, [sp, #296]	; 0x128
   17864:	str	r3, [sp, #300]	; 0x12c
   17868:	ldrd	r0, [ip, #8]
   1786c:	ldrd	r2, [r4], #8
   17870:	eor	r2, r2, r0
   17874:	eor	r3, r3, r1
   17878:	ldrd	r0, [r4, #56]	; 0x38
   1787c:	eor	r2, r2, r0
   17880:	eor	r3, r3, r1
   17884:	strd	r2, [ip, #8]!
   17888:	cmp	ip, lr
   1788c:	bne	17868 <__assert_fail@plt+0x66ac>
   17890:	add	sp, sp, #396	; 0x18c
   17894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17898:	mov	r3, #0
   1789c:	str	r3, [r0]
   178a0:	bx	lr
   178a4:	push	{r4, r5, r6, r7, r8, lr}
   178a8:	mov	r4, r0
   178ac:	ldr	r0, [r0, #224]	; 0xe0
   178b0:	mov	r7, r1
   178b4:	rsb	r6, r0, #128	; 0x80
   178b8:	cmp	r6, r2
   178bc:	mov	r5, r2
   178c0:	add	r8, r4, #96	; 0x60
   178c4:	bcs	17948 <__assert_fail@plt+0x678c>
   178c8:	mov	r3, #0
   178cc:	mov	r2, r6
   178d0:	str	r3, [r4, #224]	; 0xe0
   178d4:	add	r0, r8, r0
   178d8:	bl	10f4c <memcpy@plt>
   178dc:	ldrd	r2, [r4, #64]	; 0x40
   178e0:	mov	r0, r4
   178e4:	sub	r5, r5, r6
   178e8:	adds	r2, r2, #128	; 0x80
   178ec:	adc	r3, r3, #0
   178f0:	cmp	r3, #0
   178f4:	cmpeq	r2, #127	; 0x7f
   178f8:	strd	r2, [r4, #64]	; 0x40
   178fc:	ldrd	r2, [r4, #72]	; 0x48
   17900:	movls	r1, #1
   17904:	movhi	r1, #0
   17908:	add	r7, r7, r6
   1790c:	mov	r6, r5
   17910:	adds	r2, r2, r1
   17914:	adc	r3, r3, #0
   17918:	mov	r1, r8
   1791c:	strd	r2, [r4, #72]	; 0x48
   17920:	bl	12a58 <__assert_fail@plt+0x189c>
   17924:	sub	r1, r5, r6
   17928:	cmp	r6, #128	; 0x80
   1792c:	add	r1, r7, r1
   17930:	bhi	17968 <__assert_fail@plt+0x67ac>
   17934:	sub	r3, r5, #1
   17938:	bic	r1, r3, #127	; 0x7f
   1793c:	lsr	r3, r3, #7
   17940:	add	r1, r7, r1
   17944:	sub	r5, r5, r3, lsl #7
   17948:	ldr	r0, [r4, #224]	; 0xe0
   1794c:	mov	r2, r5
   17950:	add	r0, r8, r0
   17954:	bl	10f4c <memcpy@plt>
   17958:	ldr	r3, [r4, #224]	; 0xe0
   1795c:	add	r5, r3, r5
   17960:	str	r5, [r4, #224]	; 0xe0
   17964:	pop	{r4, r5, r6, r7, r8, pc}
   17968:	ldrd	r2, [r4, #64]	; 0x40
   1796c:	sub	r6, r6, #128	; 0x80
   17970:	adds	r2, r2, #128	; 0x80
   17974:	adc	r3, r3, #0
   17978:	cmp	r3, #0
   1797c:	cmpeq	r2, #127	; 0x7f
   17980:	strd	r2, [r4, #64]	; 0x40
   17984:	ldrd	r2, [r4, #72]	; 0x48
   17988:	movls	r0, #1
   1798c:	movhi	r0, #0
   17990:	adds	r2, r2, r0
   17994:	adc	r3, r3, #0
   17998:	mov	r0, r4
   1799c:	strd	r2, [r4, #72]	; 0x48
   179a0:	bl	12a58 <__assert_fail@plt+0x189c>
   179a4:	b	17924 <__assert_fail@plt+0x6768>
   179a8:	push	{r0, r1, r4, r5, r6, lr}
   179ac:	mov	r2, #240	; 0xf0
   179b0:	mov	r5, r1
   179b4:	mov	r1, #0
   179b8:	mov	r4, r0
   179bc:	bl	110b4 <memset@plt>
   179c0:	ldr	r2, [pc, #100]	; 17a2c <__assert_fail@plt+0x6870>
   179c4:	mov	r3, #0
   179c8:	ldrd	r0, [r3, r2]
   179cc:	strd	r0, [r4, r3]
   179d0:	add	r3, r3, #8
   179d4:	cmp	r3, #64	; 0x40
   179d8:	bne	179c8 <__assert_fail@plt+0x680c>
   179dc:	mov	lr, r5
   179e0:	sub	ip, r4, #8
   179e4:	add	r6, r4, #56	; 0x38
   179e8:	ldr	r0, [lr]
   179ec:	ldr	r1, [lr, #4]
   179f0:	mov	r3, sp
   179f4:	add	lr, lr, #8
   179f8:	stmia	r3!, {r0, r1}
   179fc:	ldrd	r0, [ip, #8]
   17a00:	ldrd	r2, [sp]
   17a04:	eor	r2, r2, r0
   17a08:	eor	r3, r3, r1
   17a0c:	strd	r2, [ip, #8]!
   17a10:	cmp	ip, r6
   17a14:	bne	179e8 <__assert_fail@plt+0x682c>
   17a18:	ldrb	r3, [r5]
   17a1c:	mov	r0, #0
   17a20:	str	r3, [r4, #228]	; 0xe4
   17a24:	add	sp, sp, #8
   17a28:	pop	{r4, r5, r6, pc}
   17a2c:	andeq	ip, r1, r8, lsl r1
   17a30:	sub	r3, r1, #1
   17a34:	cmp	r3, #63	; 0x3f
   17a38:	bhi	17ac4 <__assert_fail@plt+0x6908>
   17a3c:	push	{r4, r5, lr}
   17a40:	sub	sp, sp, #68	; 0x44
   17a44:	mov	r3, #1
   17a48:	mov	r4, #0
   17a4c:	mov	r5, r0
   17a50:	add	r0, sp, #4
   17a54:	strb	r3, [sp, #2]
   17a58:	strb	r3, [sp, #3]
   17a5c:	strb	r1, [sp]
   17a60:	strb	r4, [sp, #1]
   17a64:	bl	17898 <__assert_fail@plt+0x66dc>
   17a68:	add	r0, sp, #8
   17a6c:	bl	17898 <__assert_fail@plt+0x66dc>
   17a70:	add	r0, sp, #12
   17a74:	bl	17898 <__assert_fail@plt+0x66dc>
   17a78:	mov	r1, r4
   17a7c:	mov	r2, #14
   17a80:	add	r0, sp, #18
   17a84:	strb	r4, [sp, #16]
   17a88:	strb	r4, [sp, #17]
   17a8c:	bl	110b4 <memset@plt>
   17a90:	mov	r1, r4
   17a94:	mov	r2, #16
   17a98:	add	r0, sp, #32
   17a9c:	bl	110b4 <memset@plt>
   17aa0:	mov	r2, #16
   17aa4:	mov	r1, r4
   17aa8:	add	r0, sp, #48	; 0x30
   17aac:	bl	110b4 <memset@plt>
   17ab0:	mov	r1, sp
   17ab4:	mov	r0, r5
   17ab8:	bl	179a8 <__assert_fail@plt+0x67ec>
   17abc:	add	sp, sp, #68	; 0x44
   17ac0:	pop	{r4, r5, pc}
   17ac4:	mvn	r0, #0
   17ac8:	bx	lr
   17acc:	sub	ip, r1, #1
   17ad0:	cmp	ip, #63	; 0x3f
   17ad4:	bls	17aec <__assert_fail@plt+0x6930>
   17ad8:	mvn	r0, #0
   17adc:	bx	lr
   17ae0:	mvn	r0, #0
   17ae4:	add	sp, sp, #196	; 0xc4
   17ae8:	pop	{r4, r5, r6, r7, pc}
   17aec:	push	{r4, r5, r6, r7, lr}
   17af0:	clz	ip, r2
   17af4:	sub	r4, r3, #1
   17af8:	lsr	ip, ip, #5
   17afc:	cmp	r4, #63	; 0x3f
   17b00:	movls	r4, ip
   17b04:	orrhi	r4, ip, #1
   17b08:	cmp	r4, #0
   17b0c:	sub	sp, sp, #196	; 0xc4
   17b10:	bne	17ae0 <__assert_fail@plt+0x6924>
   17b14:	mov	r5, r0
   17b18:	strb	r3, [sp, #1]
   17b1c:	add	r0, sp, #4
   17b20:	mov	r7, r3
   17b24:	mov	r3, #1
   17b28:	strb	r3, [sp, #2]
   17b2c:	strb	r3, [sp, #3]
   17b30:	mov	r6, r2
   17b34:	strb	r1, [sp]
   17b38:	bl	17898 <__assert_fail@plt+0x66dc>
   17b3c:	add	r0, sp, #8
   17b40:	bl	17898 <__assert_fail@plt+0x66dc>
   17b44:	add	r0, sp, #12
   17b48:	bl	17898 <__assert_fail@plt+0x66dc>
   17b4c:	mov	r2, #14
   17b50:	mov	r1, r4
   17b54:	add	r0, sp, #18
   17b58:	strb	r4, [sp, #16]
   17b5c:	strb	r4, [sp, #17]
   17b60:	bl	110b4 <memset@plt>
   17b64:	mov	r2, #16
   17b68:	mov	r1, r4
   17b6c:	add	r0, sp, #32
   17b70:	bl	110b4 <memset@plt>
   17b74:	mov	r2, #16
   17b78:	mov	r1, r4
   17b7c:	add	r0, sp, #48	; 0x30
   17b80:	bl	110b4 <memset@plt>
   17b84:	mov	r1, sp
   17b88:	mov	r0, r5
   17b8c:	bl	179a8 <__assert_fail@plt+0x67ec>
   17b90:	cmp	r0, #0
   17b94:	blt	17ae0 <__assert_fail@plt+0x6924>
   17b98:	mov	r2, #128	; 0x80
   17b9c:	mov	r1, r4
   17ba0:	add	r0, sp, #64	; 0x40
   17ba4:	bl	110b4 <memset@plt>
   17ba8:	mov	r3, #128	; 0x80
   17bac:	mov	r2, r7
   17bb0:	mov	r1, r6
   17bb4:	add	r0, sp, #64	; 0x40
   17bb8:	bl	10fac <__memcpy_chk@plt>
   17bbc:	mov	r2, #128	; 0x80
   17bc0:	add	r1, sp, #64	; 0x40
   17bc4:	mov	r0, r5
   17bc8:	bl	178a4 <__assert_fail@plt+0x66e8>
   17bcc:	ldr	r3, [pc, #24]	; 17bec <__assert_fail@plt+0x6a30>
   17bd0:	mov	r2, #128	; 0x80
   17bd4:	mov	r1, r4
   17bd8:	ldr	r3, [r3]
   17bdc:	add	r0, sp, #64	; 0x40
   17be0:	blx	r3
   17be4:	mov	r0, r4
   17be8:	b	17ae4 <__assert_fail@plt+0x6928>
   17bec:	andeq	sp, r2, ip, lsl r1
   17bf0:	cmp	r2, #0
   17bf4:	beq	17c08 <__assert_fail@plt+0x6a4c>
   17bf8:	push	{r4, lr}
   17bfc:	bl	178a4 <__assert_fail@plt+0x66e8>
   17c00:	mov	r0, #0
   17c04:	pop	{r4, pc}
   17c08:	mov	r0, #0
   17c0c:	bx	lr
   17c10:	push	{r4, r5, r6, r8, r9, lr}
   17c14:	sub	sp, sp, #72	; 0x48
   17c18:	mov	r6, r1
   17c1c:	mov	r4, r0
   17c20:	mov	r5, r2
   17c24:	mov	r1, #0
   17c28:	mov	r2, #64	; 0x40
   17c2c:	add	r0, sp, #8
   17c30:	bl	110b4 <memset@plt>
   17c34:	cmp	r6, #0
   17c38:	beq	17d24 <__assert_fail@plt+0x6b68>
   17c3c:	ldr	r3, [r4, #228]	; 0xe4
   17c40:	cmp	r3, r5
   17c44:	bhi	17d24 <__assert_fail@plt+0x6b68>
   17c48:	ldrd	r2, [r4, #80]	; 0x50
   17c4c:	orrs	r3, r2, r3
   17c50:	bne	17d24 <__assert_fail@plt+0x6b68>
   17c54:	ldrd	r2, [r4, #64]	; 0x40
   17c58:	ldr	r0, [r4, #224]	; 0xe0
   17c5c:	mov	r9, #0
   17c60:	adds	r2, r2, r0
   17c64:	adc	r3, r3, r9
   17c68:	cmp	r9, r3
   17c6c:	cmpeq	r0, r2
   17c70:	strd	r2, [r4, #64]	; 0x40
   17c74:	ldrd	r2, [r4, #72]	; 0x48
   17c78:	movhi	r1, #1
   17c7c:	movls	r1, #0
   17c80:	adds	r2, r2, r1
   17c84:	adc	r3, r3, #0
   17c88:	strd	r2, [r4, #72]	; 0x48
   17c8c:	ldrb	r3, [r4, #232]	; 0xe8
   17c90:	mvn	r2, #0
   17c94:	cmp	r3, #0
   17c98:	mvn	r3, #0
   17c9c:	strdne	r2, [r4, #88]	; 0x58
   17ca0:	add	r5, r4, #96	; 0x60
   17ca4:	strd	r2, [r4, #80]	; 0x50
   17ca8:	mov	r1, #0
   17cac:	rsb	r2, r0, #128	; 0x80
   17cb0:	add	r0, r5, r0
   17cb4:	bl	110b4 <memset@plt>
   17cb8:	mov	r1, r5
   17cbc:	mov	r0, r4
   17cc0:	bl	12a58 <__assert_fail@plt+0x189c>
   17cc4:	mov	r5, #0
   17cc8:	mov	ip, sp
   17ccc:	ldrd	r2, [r4, r5]
   17cd0:	strd	r2, [sp]
   17cd4:	add	r3, sp, #8
   17cd8:	ldm	ip, {r0, r1}
   17cdc:	add	r3, r3, r5
   17ce0:	add	r5, r5, #8
   17ce4:	cmp	r5, #64	; 0x40
   17ce8:	stm	r3, {r0, r1}
   17cec:	bne	17ccc <__assert_fail@plt+0x6b10>
   17cf0:	ldr	r2, [r4, #228]	; 0xe4
   17cf4:	add	r1, sp, #8
   17cf8:	mov	r0, r6
   17cfc:	bl	10f4c <memcpy@plt>
   17d00:	ldr	r3, [pc, #36]	; 17d2c <__assert_fail@plt+0x6b70>
   17d04:	mov	r2, r5
   17d08:	mov	r1, #0
   17d0c:	ldr	r3, [r3]
   17d10:	add	r0, sp, #8
   17d14:	blx	r3
   17d18:	mov	r0, #0
   17d1c:	add	sp, sp, #72	; 0x48
   17d20:	pop	{r4, r5, r6, r8, r9, pc}
   17d24:	mvn	r0, #0
   17d28:	b	17d1c <__assert_fail@plt+0x6b60>
   17d2c:	andeq	sp, r2, ip, lsl r1
   17d30:	cmp	r3, #0
   17d34:	push	{r4, r5, r6, r7, r8, lr}
   17d38:	clz	r4, r2
   17d3c:	lsr	r4, r4, #5
   17d40:	moveq	r4, #0
   17d44:	sub	sp, sp, #240	; 0xf0
   17d48:	cmp	r0, #0
   17d4c:	orreq	r4, r4, #1
   17d50:	cmp	r4, #0
   17d54:	ldr	r8, [sp, #264]	; 0x108
   17d58:	ldr	lr, [sp, #268]	; 0x10c
   17d5c:	beq	17d6c <__assert_fail@plt+0x6bb0>
   17d60:	mvn	r0, #0
   17d64:	add	sp, sp, #240	; 0xf0
   17d68:	pop	{r4, r5, r6, r7, r8, pc}
   17d6c:	cmp	lr, #0
   17d70:	clz	r4, r8
   17d74:	lsr	r4, r4, #5
   17d78:	moveq	r4, #0
   17d7c:	cmp	r4, #0
   17d80:	bne	17d60 <__assert_fail@plt+0x6ba4>
   17d84:	sub	r4, r1, #1
   17d88:	cmp	lr, #64	; 0x40
   17d8c:	cmpls	r4, #63	; 0x3f
   17d90:	bhi	17d60 <__assert_fail@plt+0x6ba4>
   17d94:	cmp	lr, #0
   17d98:	mov	r7, r0
   17d9c:	mov	r6, r3
   17da0:	mov	r5, r2
   17da4:	mov	r4, r1
   17da8:	beq	17dec <__assert_fail@plt+0x6c30>
   17dac:	mov	r3, lr
   17db0:	mov	r2, r8
   17db4:	mov	r0, sp
   17db8:	bl	17acc <__assert_fail@plt+0x6910>
   17dbc:	cmp	r0, #0
   17dc0:	blt	17d60 <__assert_fail@plt+0x6ba4>
   17dc4:	mov	r2, r6
   17dc8:	mov	r1, r5
   17dcc:	mov	r0, sp
   17dd0:	bl	17bf0 <__assert_fail@plt+0x6a34>
   17dd4:	mov	r2, r4
   17dd8:	mov	r1, r7
   17ddc:	mov	r0, sp
   17de0:	bl	17c10 <__assert_fail@plt+0x6a54>
   17de4:	mov	r0, #0
   17de8:	b	17d64 <__assert_fail@plt+0x6ba8>
   17dec:	mov	r0, sp
   17df0:	bl	17a30 <__assert_fail@plt+0x6874>
   17df4:	b	17dbc <__assert_fail@plt+0x6c00>
   17df8:	b	17d30 <__assert_fail@plt+0x6b74>
   17dfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e00:	mov	r6, r0
   17e04:	sub	sp, sp, #240	; 0xf0
   17e08:	mov	r0, #32768	; 0x8000
   17e0c:	mov	r8, r1
   17e10:	mov	r7, r2
   17e14:	bl	1a838 <__assert_fail@plt+0x967c>
   17e18:	subs	r5, r0, #0
   17e1c:	mvneq	r4, #0
   17e20:	beq	17eac <__assert_fail@plt+0x6cf0>
   17e24:	mov	r1, r7
   17e28:	mov	r0, sp
   17e2c:	bl	17a30 <__assert_fail@plt+0x6874>
   17e30:	mov	sl, #1
   17e34:	mov	r9, #32768	; 0x8000
   17e38:	mov	r4, #0
   17e3c:	rsb	r2, r4, #32768	; 0x8000
   17e40:	add	r0, r5, r4
   17e44:	mov	r3, r6
   17e48:	mov	r1, sl
   17e4c:	bl	10fd0 <fread@plt>
   17e50:	add	r4, r4, r0
   17e54:	cmp	r4, #32768	; 0x8000
   17e58:	beq	17ec8 <__assert_fail@plt+0x6d0c>
   17e5c:	cmp	r0, #0
   17e60:	mov	r0, r6
   17e64:	bne	17eb8 <__assert_fail@plt+0x6cfc>
   17e68:	bl	10f34 <ferror@plt>
   17e6c:	cmp	r0, #0
   17e70:	mvnne	r4, #0
   17e74:	bne	17ea4 <__assert_fail@plt+0x6ce8>
   17e78:	cmp	r4, #0
   17e7c:	beq	17e90 <__assert_fail@plt+0x6cd4>
   17e80:	mov	r2, r4
   17e84:	mov	r1, r5
   17e88:	mov	r0, sp
   17e8c:	bl	17bf0 <__assert_fail@plt+0x6a34>
   17e90:	mov	r2, r7
   17e94:	mov	r1, r8
   17e98:	mov	r0, sp
   17e9c:	bl	17c10 <__assert_fail@plt+0x6a54>
   17ea0:	mov	r4, #0
   17ea4:	mov	r0, r5
   17ea8:	bl	181a8 <__assert_fail@plt+0x6fec>
   17eac:	mov	r0, r4
   17eb0:	add	sp, sp, #240	; 0xf0
   17eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17eb8:	bl	1106c <feof@plt>
   17ebc:	cmp	r0, #0
   17ec0:	beq	17e3c <__assert_fail@plt+0x6c80>
   17ec4:	b	17e78 <__assert_fail@plt+0x6cbc>
   17ec8:	mov	r2, r9
   17ecc:	mov	r1, r5
   17ed0:	mov	r0, sp
   17ed4:	bl	17bf0 <__assert_fail@plt+0x6a34>
   17ed8:	b	17e38 <__assert_fail@plt+0x6c7c>
   17edc:	ldr	r3, [pc, #4]	; 17ee8 <__assert_fail@plt+0x6d2c>
   17ee0:	str	r0, [r3]
   17ee4:	bx	lr
   17ee8:	andeq	sp, r2, r8, lsr #3
   17eec:	ldr	r3, [pc, #4]	; 17ef8 <__assert_fail@plt+0x6d3c>
   17ef0:	strb	r0, [r3, #4]
   17ef4:	bx	lr
   17ef8:	andeq	sp, r2, r8, lsr #3
   17efc:	ldr	r3, [pc, #192]	; 17fc4 <__assert_fail@plt+0x6e08>
   17f00:	push	{r0, r1, r4, r5, r6, lr}
   17f04:	ldr	r0, [r3]
   17f08:	bl	1a8d4 <__assert_fail@plt+0x9718>
   17f0c:	cmp	r0, #0
   17f10:	beq	17fa8 <__assert_fail@plt+0x6dec>
   17f14:	ldr	r3, [pc, #172]	; 17fc8 <__assert_fail@plt+0x6e0c>
   17f18:	mov	r4, r3
   17f1c:	ldrb	r2, [r3, #4]
   17f20:	cmp	r2, #0
   17f24:	beq	17f38 <__assert_fail@plt+0x6d7c>
   17f28:	bl	11090 <__errno_location@plt>
   17f2c:	ldr	r3, [r0]
   17f30:	cmp	r3, #32
   17f34:	beq	17fa8 <__assert_fail@plt+0x6dec>
   17f38:	mov	r2, #5
   17f3c:	ldr	r1, [pc, #136]	; 17fcc <__assert_fail@plt+0x6e10>
   17f40:	mov	r0, #0
   17f44:	bl	10f7c <dcgettext@plt>
   17f48:	ldr	r4, [r4]
   17f4c:	cmp	r4, #0
   17f50:	mov	r5, r0
   17f54:	beq	17f8c <__assert_fail@plt+0x6dd0>
   17f58:	bl	11090 <__errno_location@plt>
   17f5c:	ldr	r6, [r0]
   17f60:	mov	r0, r4
   17f64:	bl	19770 <__assert_fail@plt+0x85b4>
   17f68:	str	r5, [sp]
   17f6c:	ldr	r2, [pc, #92]	; 17fd0 <__assert_fail@plt+0x6e14>
   17f70:	mov	r1, r6
   17f74:	mov	r3, r0
   17f78:	mov	r0, #0
   17f7c:	bl	11000 <error@plt>
   17f80:	ldr	r3, [pc, #76]	; 17fd4 <__assert_fail@plt+0x6e18>
   17f84:	ldr	r0, [r3]
   17f88:	bl	10f40 <_exit@plt>
   17f8c:	bl	11090 <__errno_location@plt>
   17f90:	mov	r3, r5
   17f94:	ldr	r2, [pc, #60]	; 17fd8 <__assert_fail@plt+0x6e1c>
   17f98:	ldr	r1, [r0]
   17f9c:	mov	r0, r4
   17fa0:	bl	11000 <error@plt>
   17fa4:	b	17f80 <__assert_fail@plt+0x6dc4>
   17fa8:	ldr	r3, [pc, #44]	; 17fdc <__assert_fail@plt+0x6e20>
   17fac:	ldr	r0, [r3]
   17fb0:	bl	1a8d4 <__assert_fail@plt+0x9718>
   17fb4:	cmp	r0, #0
   17fb8:	bne	17f80 <__assert_fail@plt+0x6dc4>
   17fbc:	add	sp, sp, #8
   17fc0:	pop	{r4, r5, r6, pc}
   17fc4:	andeq	sp, r2, r4, lsl #3
   17fc8:	andeq	sp, r2, r8, lsr #3
   17fcc:	andeq	ip, r1, r7, ror #2
   17fd0:	andeq	ip, r1, r3, ror r1
   17fd4:	andeq	sp, r2, r4, lsr #2
   17fd8:	andeq	fp, r1, r0, ror #23
   17fdc:	andeq	sp, r2, r8, ror r1
   17fe0:	push	{r4, r5}
   17fe4:	pop	{r4, r5}
   17fe8:	b	10f10 <posix_fadvise64@plt>
   17fec:	cmp	r0, #0
   17ff0:	bxeq	lr
   17ff4:	push	{r0, r1, r2, r3, r4, lr}
   17ff8:	mov	r4, r1
   17ffc:	bl	110cc <fileno@plt>
   18000:	mov	r2, #0
   18004:	mov	r3, #0
   18008:	str	r4, [sp, #8]
   1800c:	strd	r2, [sp]
   18010:	bl	10f10 <posix_fadvise64@plt>
   18014:	add	sp, sp, #16
   18018:	pop	{r4, pc}
   1801c:	push	{r0, r1, r2, r4, r5, lr}
   18020:	mov	r4, r0
   18024:	bl	110cc <fileno@plt>
   18028:	cmp	r0, #0
   1802c:	mov	r0, r4
   18030:	bge	18040 <__assert_fail@plt+0x6e84>
   18034:	add	sp, sp, #12
   18038:	pop	{r4, r5, lr}
   1803c:	b	110f0 <fclose@plt>
   18040:	bl	11024 <__freading@plt>
   18044:	cmp	r0, #0
   18048:	bne	18084 <__assert_fail@plt+0x6ec8>
   1804c:	mov	r0, r4
   18050:	bl	180c4 <__assert_fail@plt+0x6f08>
   18054:	cmp	r0, #0
   18058:	bne	180b8 <__assert_fail@plt+0x6efc>
   1805c:	mov	r5, #0
   18060:	mov	r0, r4
   18064:	bl	110f0 <fclose@plt>
   18068:	cmp	r5, #0
   1806c:	beq	1807c <__assert_fail@plt+0x6ec0>
   18070:	bl	11090 <__errno_location@plt>
   18074:	str	r5, [r0]
   18078:	mvn	r0, #0
   1807c:	add	sp, sp, #12
   18080:	pop	{r4, r5, pc}
   18084:	mov	r0, r4
   18088:	bl	110cc <fileno@plt>
   1808c:	mov	r3, #1
   18090:	str	r3, [sp]
   18094:	mov	r2, #0
   18098:	mov	r3, #0
   1809c:	bl	10fb8 <lseek64@plt>
   180a0:	mvn	r3, #0
   180a4:	mvn	r2, #0
   180a8:	cmp	r1, r3
   180ac:	cmpeq	r0, r2
   180b0:	bne	1804c <__assert_fail@plt+0x6e90>
   180b4:	b	1805c <__assert_fail@plt+0x6ea0>
   180b8:	bl	11090 <__errno_location@plt>
   180bc:	ldr	r5, [r0]
   180c0:	b	18060 <__assert_fail@plt+0x6ea4>
   180c4:	push	{r0, r1, r4, lr}
   180c8:	subs	r4, r0, #0
   180cc:	bne	180e0 <__assert_fail@plt+0x6f24>
   180d0:	mov	r0, r4
   180d4:	add	sp, sp, #8
   180d8:	pop	{r4, lr}
   180dc:	b	10f1c <fflush@plt>
   180e0:	bl	11024 <__freading@plt>
   180e4:	cmp	r0, #0
   180e8:	beq	180d0 <__assert_fail@plt+0x6f14>
   180ec:	ldr	r3, [r4]
   180f0:	tst	r3, #256	; 0x100
   180f4:	beq	180d0 <__assert_fail@plt+0x6f14>
   180f8:	mov	r3, #1
   180fc:	str	r3, [sp]
   18100:	mov	r2, #0
   18104:	mov	r3, #0
   18108:	mov	r0, r4
   1810c:	bl	181fc <__assert_fail@plt+0x7040>
   18110:	b	180d0 <__assert_fail@plt+0x6f14>
   18114:	push	{r4, r5, r6, lr}
   18118:	mov	r6, r1
   1811c:	bl	11144 <fopen64@plt>
   18120:	subs	r4, r0, #0
   18124:	beq	1815c <__assert_fail@plt+0x6fa0>
   18128:	bl	110cc <fileno@plt>
   1812c:	cmp	r0, #2
   18130:	bhi	1815c <__assert_fail@plt+0x6fa0>
   18134:	bl	198cc <__assert_fail@plt+0x8710>
   18138:	subs	r5, r0, #0
   1813c:	bge	18164 <__assert_fail@plt+0x6fa8>
   18140:	bl	11090 <__errno_location@plt>
   18144:	ldr	r6, [r0]
   18148:	mov	r5, r0
   1814c:	mov	r0, r4
   18150:	bl	1801c <__assert_fail@plt+0x6e60>
   18154:	str	r6, [r5]
   18158:	mov	r4, #0
   1815c:	mov	r0, r4
   18160:	pop	{r4, r5, r6, pc}
   18164:	mov	r0, r4
   18168:	bl	1801c <__assert_fail@plt+0x6e60>
   1816c:	cmp	r0, #0
   18170:	beq	18190 <__assert_fail@plt+0x6fd4>
   18174:	bl	11090 <__errno_location@plt>
   18178:	ldr	r6, [r0]
   1817c:	mov	r4, r0
   18180:	mov	r0, r5
   18184:	bl	11198 <close@plt>
   18188:	str	r6, [r4]
   1818c:	b	18158 <__assert_fail@plt+0x6f9c>
   18190:	mov	r1, r6
   18194:	mov	r0, r5
   18198:	bl	10ed4 <fdopen@plt>
   1819c:	subs	r4, r0, #0
   181a0:	bne	1815c <__assert_fail@plt+0x6fa0>
   181a4:	b	18174 <__assert_fail@plt+0x6fb8>
   181a8:	push	{r0, r1, r2, r4, r5, lr}
   181ac:	mov	r5, r0
   181b0:	bl	11090 <__errno_location@plt>
   181b4:	ldr	r3, [r0]
   181b8:	mov	r4, r0
   181bc:	str	r3, [sp]
   181c0:	str	r3, [sp, #4]
   181c4:	mov	r3, #0
   181c8:	str	r3, [r0]
   181cc:	mov	r0, r5
   181d0:	bl	10f28 <free@plt>
   181d4:	ldr	r3, [r4]
   181d8:	add	r2, sp, #8
   181dc:	cmp	r3, #0
   181e0:	moveq	r3, #4
   181e4:	movne	r3, #0
   181e8:	add	r3, r2, r3
   181ec:	ldr	r3, [r3, #-8]
   181f0:	str	r3, [r4]
   181f4:	add	sp, sp, #12
   181f8:	pop	{r4, r5, pc}
   181fc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   18200:	mov	r4, r0
   18204:	ldmib	r0, {ip, lr}
   18208:	ldr	r8, [sp, #32]
   1820c:	cmp	lr, ip
   18210:	bne	1827c <__assert_fail@plt+0x70c0>
   18214:	ldr	lr, [r0, #20]
   18218:	ldr	ip, [r0, #16]
   1821c:	cmp	lr, ip
   18220:	bne	1827c <__assert_fail@plt+0x70c0>
   18224:	ldr	r5, [r0, #36]	; 0x24
   18228:	cmp	r5, #0
   1822c:	bne	1827c <__assert_fail@plt+0x70c0>
   18230:	mov	r6, r2
   18234:	mov	r7, r3
   18238:	bl	110cc <fileno@plt>
   1823c:	mov	r2, r6
   18240:	mov	r3, r7
   18244:	str	r8, [sp]
   18248:	bl	10fb8 <lseek64@plt>
   1824c:	mvn	r3, #0
   18250:	mvn	r2, #0
   18254:	cmp	r1, r3
   18258:	cmpeq	r0, r2
   1825c:	mvneq	r0, #0
   18260:	ldrne	r3, [r4]
   18264:	strdne	r0, [r4, #80]	; 0x50
   18268:	movne	r0, r5
   1826c:	bicne	r3, r3, #16
   18270:	strne	r3, [r4]
   18274:	add	sp, sp, #8
   18278:	pop	{r4, r5, r6, r7, r8, pc}
   1827c:	str	r8, [sp, #32]
   18280:	mov	r0, r4
   18284:	add	sp, sp, #8
   18288:	pop	{r4, r5, r6, r7, r8, lr}
   1828c:	b	110fc <fseeko64@plt>
   18290:	push	{r4, r5, r6, lr}
   18294:	subs	r5, r0, #0
   18298:	bne	182b0 <__assert_fail@plt+0x70f4>
   1829c:	ldr	r3, [pc, #124]	; 18320 <__assert_fail@plt+0x7164>
   182a0:	ldr	r0, [pc, #124]	; 18324 <__assert_fail@plt+0x7168>
   182a4:	ldr	r1, [r3]
   182a8:	bl	11168 <fputs@plt>
   182ac:	bl	11180 <abort@plt>
   182b0:	mov	r1, #47	; 0x2f
   182b4:	bl	11120 <strrchr@plt>
   182b8:	cmp	r0, #0
   182bc:	addne	r4, r0, #1
   182c0:	moveq	r4, r5
   182c4:	sub	r3, r4, r5
   182c8:	cmp	r3, #6
   182cc:	ble	1830c <__assert_fail@plt+0x7150>
   182d0:	mov	r2, #7
   182d4:	ldr	r1, [pc, #76]	; 18328 <__assert_fail@plt+0x716c>
   182d8:	sub	r0, r4, #7
   182dc:	bl	11174 <strncmp@plt>
   182e0:	cmp	r0, #0
   182e4:	bne	1830c <__assert_fail@plt+0x7150>
   182e8:	mov	r2, #3
   182ec:	ldr	r1, [pc, #56]	; 1832c <__assert_fail@plt+0x7170>
   182f0:	mov	r0, r4
   182f4:	bl	11174 <strncmp@plt>
   182f8:	cmp	r0, #0
   182fc:	movne	r5, r4
   18300:	ldreq	r3, [pc, #40]	; 18330 <__assert_fail@plt+0x7174>
   18304:	addeq	r5, r4, #3
   18308:	streq	r5, [r3]
   1830c:	ldr	r3, [pc, #32]	; 18334 <__assert_fail@plt+0x7178>
   18310:	str	r5, [r3]
   18314:	ldr	r3, [pc, #28]	; 18338 <__assert_fail@plt+0x717c>
   18318:	str	r5, [r3]
   1831c:	pop	{r4, r5, r6, pc}
   18320:	andeq	sp, r2, r8, ror r1
   18324:	andeq	ip, r1, sl, ror r1
   18328:			; <UNDEFINED> instruction: 0x0001c1b2
   1832c:			; <UNDEFINED> instruction: 0x0001c1ba
   18330:	andeq	sp, r2, r8, ror #2
   18334:			; <UNDEFINED> instruction: 0x0002d1b0
   18338:	andeq	sp, r2, ip, ror #2
   1833c:	push	{r4, r5, r6, lr}
   18340:	mov	r2, #48	; 0x30
   18344:	mov	r5, r1
   18348:	mov	r1, #0
   1834c:	mov	r4, r0
   18350:	bl	110b4 <memset@plt>
   18354:	cmp	r5, #10
   18358:	bne	18360 <__assert_fail@plt+0x71a4>
   1835c:	bl	11180 <abort@plt>
   18360:	str	r5, [r4]
   18364:	mov	r0, r4
   18368:	pop	{r4, r5, r6, pc}
   1836c:	push	{r4, r5, r6, lr}
   18370:	mov	r4, r0
   18374:	mov	r5, r1
   18378:	bl	1ab08 <__assert_fail@plt+0x994c>
   1837c:	ldrb	r3, [r0]
   18380:	bic	r3, r3, #32
   18384:	cmp	r3, #85	; 0x55
   18388:	bne	183f8 <__assert_fail@plt+0x723c>
   1838c:	ldrb	r3, [r0, #1]
   18390:	bic	r3, r3, #32
   18394:	cmp	r3, #84	; 0x54
   18398:	bne	183d0 <__assert_fail@plt+0x7214>
   1839c:	ldrb	r3, [r0, #2]
   183a0:	bic	r3, r3, #32
   183a4:	cmp	r3, #70	; 0x46
   183a8:	bne	183d0 <__assert_fail@plt+0x7214>
   183ac:	ldrb	r3, [r0, #3]
   183b0:	cmp	r3, #45	; 0x2d
   183b4:	bne	183d0 <__assert_fail@plt+0x7214>
   183b8:	ldrb	r3, [r0, #4]
   183bc:	cmp	r3, #56	; 0x38
   183c0:	bne	183d0 <__assert_fail@plt+0x7214>
   183c4:	ldrb	r3, [r0, #5]
   183c8:	cmp	r3, #0
   183cc:	beq	183e4 <__assert_fail@plt+0x7228>
   183d0:	ldr	r1, [pc, #144]	; 18468 <__assert_fail@plt+0x72ac>
   183d4:	ldr	r0, [pc, #144]	; 1846c <__assert_fail@plt+0x72b0>
   183d8:	cmp	r5, #9
   183dc:	movne	r0, r1
   183e0:	pop	{r4, r5, r6, pc}
   183e4:	ldrb	r3, [r4]
   183e8:	ldr	r1, [pc, #128]	; 18470 <__assert_fail@plt+0x72b4>
   183ec:	ldr	r0, [pc, #128]	; 18474 <__assert_fail@plt+0x72b8>
   183f0:	cmp	r3, #96	; 0x60
   183f4:	b	183dc <__assert_fail@plt+0x7220>
   183f8:	cmp	r3, #71	; 0x47
   183fc:	bne	183d0 <__assert_fail@plt+0x7214>
   18400:	ldrb	r3, [r0, #1]
   18404:	bic	r3, r3, #32
   18408:	cmp	r3, #66	; 0x42
   1840c:	bne	183d0 <__assert_fail@plt+0x7214>
   18410:	ldrb	r3, [r0, #2]
   18414:	cmp	r3, #49	; 0x31
   18418:	bne	183d0 <__assert_fail@plt+0x7214>
   1841c:	ldrb	r3, [r0, #3]
   18420:	cmp	r3, #56	; 0x38
   18424:	bne	183d0 <__assert_fail@plt+0x7214>
   18428:	ldrb	r3, [r0, #4]
   1842c:	cmp	r3, #48	; 0x30
   18430:	bne	183d0 <__assert_fail@plt+0x7214>
   18434:	ldrb	r3, [r0, #5]
   18438:	cmp	r3, #51	; 0x33
   1843c:	bne	183d0 <__assert_fail@plt+0x7214>
   18440:	ldrb	r3, [r0, #6]
   18444:	cmp	r3, #48	; 0x30
   18448:	bne	183d0 <__assert_fail@plt+0x7214>
   1844c:	ldrb	r3, [r0, #7]
   18450:	cmp	r3, #0
   18454:	bne	183d0 <__assert_fail@plt+0x7214>
   18458:	ldrb	r3, [r4]
   1845c:	ldr	r1, [pc, #20]	; 18478 <__assert_fail@plt+0x72bc>
   18460:	ldr	r0, [pc, #20]	; 1847c <__assert_fail@plt+0x72c0>
   18464:	b	183f0 <__assert_fail@plt+0x7234>
   18468:	andeq	ip, r1, r5, lsr #4
   1846c:	andeq	ip, r1, r3, lsr #4
   18470:	andeq	ip, r1, r8, lsl r2
   18474:	andeq	ip, r1, r4, lsl r2
   18478:	andeq	ip, r1, r0, lsr #4
   1847c:	andeq	ip, r1, ip, lsl r2
   18480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18484:	sub	sp, sp, #108	; 0x6c
   18488:	mov	r8, r0
   1848c:	str	r3, [sp, #36]	; 0x24
   18490:	mov	r5, r1
   18494:	str	r2, [sp, #44]	; 0x2c
   18498:	ldr	sl, [sp, #144]	; 0x90
   1849c:	bl	10fc4 <__ctype_get_mb_cur_max@plt>
   184a0:	ldr	r3, [sp, #148]	; 0x94
   184a4:	mov	r7, #0
   184a8:	str	r7, [sp, #48]	; 0x30
   184ac:	lsr	r6, r3, #1
   184b0:	and	r6, r6, #1
   184b4:	mov	r3, #1
   184b8:	str	r3, [sp, #72]	; 0x48
   184bc:	str	r7, [sp, #24]
   184c0:	str	r7, [sp, #32]
   184c4:	str	r7, [sp, #40]	; 0x28
   184c8:	str	r7, [sp, #60]	; 0x3c
   184cc:	str	r0, [sp, #76]	; 0x4c
   184d0:	cmp	sl, #10
   184d4:	ldrls	pc, [pc, sl, lsl #2]
   184d8:	b	18714 <__assert_fail@plt+0x7558>
   184dc:	andeq	r8, r1, r8, lsl #10
   184e0:	muleq	r1, ip, r1
   184e4:	andeq	r8, r1, r0, ror #13
   184e8:	andeq	r8, r1, ip, lsr #14
   184ec:			; <UNDEFINED> instruction: 0x000186bc
   184f0:	andeq	r8, r1, r4, lsl r5
   184f4:	andeq	r9, r1, ip, ror r1
   184f8:	andeq	r8, r1, r8, lsl r7
   184fc:	andeq	r8, r1, ip, lsl #12
   18500:	andeq	r8, r1, ip, lsl #12
   18504:	andeq	r8, r1, ip, lsl #12
   18508:	mov	r6, #0
   1850c:	mov	r4, #0
   18510:	b	18540 <__assert_fail@plt+0x7384>
   18514:	cmp	r6, #0
   18518:	bne	1873c <__assert_fail@plt+0x7580>
   1851c:	cmp	r5, #0
   18520:	movne	r3, #34	; 0x22
   18524:	strbne	r3, [r8]
   18528:	mov	r3, #1
   1852c:	str	r3, [sp, #24]
   18530:	str	r3, [sp, #32]
   18534:	mov	r4, #1
   18538:	ldr	r3, [pc, #3172]	; 191a4 <__assert_fail@plt+0x7fe8>
   1853c:	str	r3, [sp, #40]	; 0x28
   18540:	mov	r9, r5
   18544:	mov	r3, #0
   18548:	str	r7, [sp, #68]	; 0x44
   1854c:	str	r3, [sp, #28]
   18550:	ldr	r3, [sp, #36]	; 0x24
   18554:	cmn	r3, #1
   18558:	bne	190e8 <__assert_fail@plt+0x7f2c>
   1855c:	ldr	r3, [sp, #44]	; 0x2c
   18560:	ldr	r2, [sp, #28]
   18564:	ldrb	r3, [r3, r2]
   18568:	adds	r3, r3, #0
   1856c:	movne	r3, #1
   18570:	str	r3, [sp, #52]	; 0x34
   18574:	ldr	r3, [sp, #52]	; 0x34
   18578:	cmp	r3, #0
   1857c:	bne	18764 <__assert_fail@plt+0x75a8>
   18580:	sub	r2, sl, #2
   18584:	clz	r2, r2
   18588:	lsr	r2, r2, #5
   1858c:	and	r3, r6, r2
   18590:	cmp	r4, #0
   18594:	movne	r3, #0
   18598:	andeq	r3, r3, #1
   1859c:	cmp	r3, #0
   185a0:	bne	1892c <__assert_fail@plt+0x7770>
   185a4:	eor	r3, r6, #1
   185a8:	ands	r2, r2, r3
   185ac:	beq	19120 <__assert_fail@plt+0x7f64>
   185b0:	ldr	r3, [sp, #68]	; 0x44
   185b4:	cmp	r3, #0
   185b8:	beq	19158 <__assert_fail@plt+0x7f9c>
   185bc:	ldr	r3, [sp, #72]	; 0x48
   185c0:	cmp	r3, #0
   185c4:	beq	190fc <__assert_fail@plt+0x7f40>
   185c8:	ldr	r3, [sp, #160]	; 0xa0
   185cc:	ldr	r2, [sp, #44]	; 0x2c
   185d0:	str	r3, [sp, #16]
   185d4:	ldr	r3, [sp, #156]	; 0x9c
   185d8:	ldr	r1, [sp, #60]	; 0x3c
   185dc:	str	r3, [sp, #12]
   185e0:	ldr	r3, [sp, #152]	; 0x98
   185e4:	str	r3, [sp, #8]
   185e8:	ldr	r3, [sp, #148]	; 0x94
   185ec:	str	r3, [sp, #4]
   185f0:	mov	r3, #5
   185f4:	str	r3, [sp]
   185f8:	ldr	r3, [sp, #36]	; 0x24
   185fc:	mov	r0, r8
   18600:	bl	18480 <__assert_fail@plt+0x72c4>
   18604:	mov	r4, r0
   18608:	b	1914c <__assert_fail@plt+0x7f90>
   1860c:	cmp	sl, #10
   18610:	beq	1866c <__assert_fail@plt+0x74b0>
   18614:	ldr	r4, [pc, #2956]	; 191a8 <__assert_fail@plt+0x7fec>
   18618:	mov	r2, #5
   1861c:	mov	r1, r4
   18620:	mov	r0, #0
   18624:	bl	10f7c <dcgettext@plt>
   18628:	cmp	r0, r4
   1862c:	str	r0, [sp, #156]	; 0x9c
   18630:	bne	18640 <__assert_fail@plt+0x7484>
   18634:	mov	r1, sl
   18638:	bl	1836c <__assert_fail@plt+0x71b0>
   1863c:	str	r0, [sp, #156]	; 0x9c
   18640:	ldr	r4, [pc, #2916]	; 191ac <__assert_fail@plt+0x7ff0>
   18644:	mov	r2, #5
   18648:	mov	r1, r4
   1864c:	mov	r0, #0
   18650:	bl	10f7c <dcgettext@plt>
   18654:	cmp	r0, r4
   18658:	str	r0, [sp, #160]	; 0xa0
   1865c:	bne	1866c <__assert_fail@plt+0x74b0>
   18660:	mov	r1, sl
   18664:	bl	1836c <__assert_fail@plt+0x71b0>
   18668:	str	r0, [sp, #160]	; 0xa0
   1866c:	cmp	r6, #0
   18670:	moveq	r4, r6
   18674:	beq	1868c <__assert_fail@plt+0x74d0>
   18678:	mov	r4, #0
   1867c:	b	1869c <__assert_fail@plt+0x74e0>
   18680:	cmp	r5, r4
   18684:	strbhi	r3, [r8, r4]
   18688:	add	r4, r4, #1
   1868c:	ldr	r3, [sp, #156]	; 0x9c
   18690:	ldrb	r3, [r3, r4]
   18694:	cmp	r3, #0
   18698:	bne	18680 <__assert_fail@plt+0x74c4>
   1869c:	ldr	r0, [sp, #160]	; 0xa0
   186a0:	bl	11078 <strlen@plt>
   186a4:	ldr	r3, [sp, #160]	; 0xa0
   186a8:	str	r3, [sp, #40]	; 0x28
   186ac:	mov	r3, #1
   186b0:	str	r3, [sp, #24]
   186b4:	str	r0, [sp, #32]
   186b8:	b	18540 <__assert_fail@plt+0x7384>
   186bc:	mov	r3, #1
   186c0:	cmp	r6, #0
   186c4:	streq	r3, [sp, #24]
   186c8:	beq	186e8 <__assert_fail@plt+0x752c>
   186cc:	str	r3, [sp, #32]
   186d0:	ldr	r3, [pc, #2772]	; 191ac <__assert_fail@plt+0x7ff0>
   186d4:	mov	r4, #0
   186d8:	str	r3, [sp, #40]	; 0x28
   186dc:	b	1870c <__assert_fail@plt+0x7550>
   186e0:	cmp	r6, #0
   186e4:	bne	18754 <__assert_fail@plt+0x7598>
   186e8:	cmp	r5, #0
   186ec:	movne	r3, #39	; 0x27
   186f0:	strbne	r3, [r8]
   186f4:	mov	r3, #1
   186f8:	str	r3, [sp, #32]
   186fc:	mov	r6, #0
   18700:	ldr	r3, [pc, #2724]	; 191ac <__assert_fail@plt+0x7ff0>
   18704:	mov	r4, #1
   18708:	str	r3, [sp, #40]	; 0x28
   1870c:	mov	sl, #2
   18710:	b	18540 <__assert_fail@plt+0x7384>
   18714:	bl	11180 <abort@plt>
   18718:	mov	r6, #0
   1871c:	mov	r3, #1
   18720:	str	r3, [sp, #24]
   18724:	mov	r4, r6
   18728:	b	18540 <__assert_fail@plt+0x7384>
   1872c:	mov	r6, #1
   18730:	str	r6, [sp, #24]
   18734:	str	r6, [sp, #32]
   18738:	b	186d0 <__assert_fail@plt+0x7514>
   1873c:	mov	r3, #1
   18740:	str	r3, [sp, #32]
   18744:	ldr	r3, [pc, #2648]	; 191a4 <__assert_fail@plt+0x7fe8>
   18748:	str	r6, [sp, #24]
   1874c:	str	r3, [sp, #40]	; 0x28
   18750:	b	1850c <__assert_fail@plt+0x7350>
   18754:	mov	r3, #1
   18758:	str	r3, [sp, #32]
   1875c:	ldr	r3, [pc, #2632]	; 191ac <__assert_fail@plt+0x7ff0>
   18760:	b	1874c <__assert_fail@plt+0x7590>
   18764:	ldr	r3, [sp, #32]
   18768:	ldr	fp, [sp, #24]
   1876c:	cmp	sl, #2
   18770:	moveq	fp, #0
   18774:	andne	fp, fp, #1
   18778:	adds	r5, r3, #0
   1877c:	movne	r5, #1
   18780:	ands	r3, r5, fp
   18784:	str	r3, [sp, #64]	; 0x40
   18788:	beq	18858 <__assert_fail@plt+0x769c>
   1878c:	ldr	r2, [sp, #32]
   18790:	ldr	r3, [sp, #28]
   18794:	add	r7, r3, r2
   18798:	mov	r3, r2
   1879c:	ldr	r2, [sp, #36]	; 0x24
   187a0:	cmp	r3, #1
   187a4:	movls	r3, #0
   187a8:	movhi	r3, #1
   187ac:	cmn	r2, #1
   187b0:	movne	r3, #0
   187b4:	cmp	r3, #0
   187b8:	beq	187c8 <__assert_fail@plt+0x760c>
   187bc:	ldr	r0, [sp, #44]	; 0x2c
   187c0:	bl	11078 <strlen@plt>
   187c4:	str	r0, [sp, #36]	; 0x24
   187c8:	ldr	r3, [sp, #36]	; 0x24
   187cc:	cmp	r3, r7
   187d0:	bcc	18850 <__assert_fail@plt+0x7694>
   187d4:	ldr	r3, [sp, #44]	; 0x2c
   187d8:	ldr	r0, [sp, #28]
   187dc:	ldr	r2, [sp, #32]
   187e0:	ldr	r1, [sp, #40]	; 0x28
   187e4:	add	r0, r3, r0
   187e8:	bl	10f64 <memcmp@plt>
   187ec:	cmp	r0, #0
   187f0:	bne	18850 <__assert_fail@plt+0x7694>
   187f4:	cmp	r6, #0
   187f8:	beq	18858 <__assert_fail@plt+0x769c>
   187fc:	str	r6, [sp, #24]
   18800:	ldr	r3, [sp, #24]
   18804:	ldr	r2, [sp, #44]	; 0x2c
   18808:	cmp	sl, #2
   1880c:	movne	r3, #0
   18810:	andeq	r3, r3, #1
   18814:	cmp	r3, #0
   18818:	ldr	r3, [sp, #160]	; 0xa0
   1881c:	movne	sl, #4
   18820:	str	r3, [sp, #16]
   18824:	ldr	r3, [sp, #156]	; 0x9c
   18828:	str	sl, [sp]
   1882c:	str	r3, [sp, #12]
   18830:	mov	r3, #0
   18834:	str	r3, [sp, #8]
   18838:	ldr	r3, [sp, #148]	; 0x94
   1883c:	mov	r1, r9
   18840:	bic	r3, r3, #2
   18844:	str	r3, [sp, #4]
   18848:	ldr	r3, [sp, #36]	; 0x24
   1884c:	b	185fc <__assert_fail@plt+0x7440>
   18850:	mov	r3, #0
   18854:	str	r3, [sp, #64]	; 0x40
   18858:	ldr	r2, [sp, #28]
   1885c:	ldr	r3, [sp, #44]	; 0x2c
   18860:	add	r3, r3, r2
   18864:	str	r3, [sp, #80]	; 0x50
   18868:	ldr	r3, [sp, #44]	; 0x2c
   1886c:	ldrb	r7, [r3, r2]
   18870:	cmp	r7, #58	; 0x3a
   18874:	bhi	189dc <__assert_fail@plt+0x7820>
   18878:	cmp	r7, #43	; 0x2b
   1887c:	bcs	18a30 <__assert_fail@plt+0x7874>
   18880:	cmp	r7, #32
   18884:	beq	18a88 <__assert_fail@plt+0x78cc>
   18888:	bhi	18934 <__assert_fail@plt+0x7778>
   1888c:	cmp	r7, #9
   18890:	beq	18d3c <__assert_fail@plt+0x7b80>
   18894:	bhi	188f8 <__assert_fail@plt+0x773c>
   18898:	cmp	r7, #7
   1889c:	beq	18de8 <__assert_fail@plt+0x7c2c>
   188a0:	bhi	18aa4 <__assert_fail@plt+0x78e8>
   188a4:	cmp	r7, #0
   188a8:	beq	18ac0 <__assert_fail@plt+0x7904>
   188ac:	ldr	r3, [sp, #76]	; 0x4c
   188b0:	cmp	r3, #1
   188b4:	bne	18e2c <__assert_fail@plt+0x7c70>
   188b8:	bl	11054 <__ctype_b_loc@plt>
   188bc:	sxth	r3, r7
   188c0:	lsl	r3, r3, #1
   188c4:	ldr	r2, [r0]
   188c8:	ldrh	r5, [r2, r3]
   188cc:	ldr	r3, [sp, #76]	; 0x4c
   188d0:	str	r3, [sp, #56]	; 0x38
   188d4:	lsr	r5, r5, #14
   188d8:	and	r5, r5, #1
   188dc:	ldr	r3, [sp, #24]
   188e0:	eor	fp, r5, #1
   188e4:	and	fp, fp, r3
   188e8:	ands	fp, fp, #255	; 0xff
   188ec:	beq	18c74 <__assert_fail@plt+0x7ab8>
   188f0:	mov	r5, #0
   188f4:	b	18ed8 <__assert_fail@plt+0x7d1c>
   188f8:	cmp	r7, #11
   188fc:	beq	18d44 <__assert_fail@plt+0x7b88>
   18900:	bcc	18de0 <__assert_fail@plt+0x7c24>
   18904:	cmp	r7, #12
   18908:	beq	18df0 <__assert_fail@plt+0x7c34>
   1890c:	cmp	r7, #13
   18910:	moveq	r3, #114	; 0x72
   18914:	bne	188ac <__assert_fail@plt+0x76f0>
   18918:	cmp	sl, #2
   1891c:	movne	r2, #0
   18920:	andeq	r2, r6, #1
   18924:	cmp	r2, #0
   18928:	beq	18aa8 <__assert_fail@plt+0x78ec>
   1892c:	mov	sl, #2
   18930:	b	18800 <__assert_fail@plt+0x7644>
   18934:	cmp	r7, #37	; 0x25
   18938:	beq	18a30 <__assert_fail@plt+0x7874>
   1893c:	bhi	18950 <__assert_fail@plt+0x7794>
   18940:	cmp	r7, #35	; 0x23
   18944:	beq	18a7c <__assert_fail@plt+0x78c0>
   18948:	mov	r5, #0
   1894c:	b	18a8c <__assert_fail@plt+0x78d0>
   18950:	cmp	r7, #39	; 0x27
   18954:	bne	18948 <__assert_fail@plt+0x778c>
   18958:	cmp	sl, #2
   1895c:	ldrne	r5, [sp, #52]	; 0x34
   18960:	movne	r3, r5
   18964:	strne	r3, [sp, #68]	; 0x44
   18968:	bne	18a34 <__assert_fail@plt+0x7878>
   1896c:	cmp	r6, #0
   18970:	bne	18800 <__assert_fail@plt+0x7644>
   18974:	ldr	r2, [sp, #60]	; 0x3c
   18978:	adds	r3, r9, #0
   1897c:	movne	r3, #1
   18980:	cmp	r2, #0
   18984:	movne	r3, #0
   18988:	cmp	r3, #0
   1898c:	strne	r9, [sp, #60]	; 0x3c
   18990:	movne	r9, #0
   18994:	bne	189a4 <__assert_fail@plt+0x77e8>
   18998:	cmp	r9, r4
   1899c:	movhi	r3, #39	; 0x27
   189a0:	strbhi	r3, [r8, r4]
   189a4:	add	r3, r4, #1
   189a8:	cmp	r3, r9
   189ac:	movcc	r2, #92	; 0x5c
   189b0:	strbcc	r2, [r8, r3]
   189b4:	add	r3, r4, #2
   189b8:	cmp	r3, r9
   189bc:	ldr	r5, [sp, #52]	; 0x34
   189c0:	movcc	r2, #39	; 0x27
   189c4:	strbcc	r2, [r8, r3]
   189c8:	add	r4, r4, #3
   189cc:	mov	fp, r6
   189d0:	str	r5, [sp, #68]	; 0x44
   189d4:	str	r6, [sp, #48]	; 0x30
   189d8:	b	18c74 <__assert_fail@plt+0x7ab8>
   189dc:	cmp	r7, #94	; 0x5e
   189e0:	beq	18948 <__assert_fail@plt+0x778c>
   189e4:	bhi	18a3c <__assert_fail@plt+0x7880>
   189e8:	cmp	r7, #90	; 0x5a
   189ec:	bhi	18a24 <__assert_fail@plt+0x7868>
   189f0:	cmp	r7, #65	; 0x41
   189f4:	bcs	18a30 <__assert_fail@plt+0x7874>
   189f8:	cmp	r7, #62	; 0x3e
   189fc:	bls	18948 <__assert_fail@plt+0x778c>
   18a00:	cmp	r7, #63	; 0x3f
   18a04:	bne	188ac <__assert_fail@plt+0x76f0>
   18a08:	cmp	sl, #2
   18a0c:	beq	18bb0 <__assert_fail@plt+0x79f4>
   18a10:	cmp	sl, #5
   18a14:	beq	18bc0 <__assert_fail@plt+0x7a04>
   18a18:	mov	fp, #0
   18a1c:	mov	r5, fp
   18a20:	b	18c74 <__assert_fail@plt+0x7ab8>
   18a24:	cmp	r7, #92	; 0x5c
   18a28:	beq	18d4c <__assert_fail@plt+0x7b90>
   18a2c:	bls	18948 <__assert_fail@plt+0x778c>
   18a30:	ldr	r5, [sp, #52]	; 0x34
   18a34:	mov	fp, #0
   18a38:	b	18c74 <__assert_fail@plt+0x7ab8>
   18a3c:	cmp	r7, #122	; 0x7a
   18a40:	bhi	18a60 <__assert_fail@plt+0x78a4>
   18a44:	cmp	r7, #97	; 0x61
   18a48:	bcs	18a30 <__assert_fail@plt+0x7874>
   18a4c:	cmp	r7, #95	; 0x5f
   18a50:	beq	18a30 <__assert_fail@plt+0x7874>
   18a54:	cmp	r7, #96	; 0x60
   18a58:	bne	188ac <__assert_fail@plt+0x76f0>
   18a5c:	b	18948 <__assert_fail@plt+0x778c>
   18a60:	cmp	r7, #124	; 0x7c
   18a64:	beq	18948 <__assert_fail@plt+0x778c>
   18a68:	bcc	18df8 <__assert_fail@plt+0x7c3c>
   18a6c:	cmp	r7, #125	; 0x7d
   18a70:	beq	18df8 <__assert_fail@plt+0x7c3c>
   18a74:	cmp	r7, #126	; 0x7e
   18a78:	bne	188ac <__assert_fail@plt+0x76f0>
   18a7c:	ldr	r3, [sp, #28]
   18a80:	cmp	r3, #0
   18a84:	bne	18bb8 <__assert_fail@plt+0x79fc>
   18a88:	ldr	r5, [sp, #52]	; 0x34
   18a8c:	cmp	sl, #2
   18a90:	movne	fp, #0
   18a94:	andeq	fp, r6, #1
   18a98:	cmp	fp, #0
   18a9c:	beq	18c74 <__assert_fail@plt+0x7ab8>
   18aa0:	b	1892c <__assert_fail@plt+0x7770>
   18aa4:	mov	r3, #98	; 0x62
   18aa8:	ldr	r2, [sp, #24]
   18aac:	cmp	r2, #0
   18ab0:	beq	18bb8 <__assert_fail@plt+0x79fc>
   18ab4:	mov	r7, r3
   18ab8:	mov	r5, #0
   18abc:	b	18ccc <__assert_fail@plt+0x7b10>
   18ac0:	ldr	r3, [sp, #24]
   18ac4:	cmp	r3, #0
   18ac8:	beq	18b94 <__assert_fail@plt+0x79d8>
   18acc:	cmp	r6, #0
   18ad0:	bne	187fc <__assert_fail@plt+0x7640>
   18ad4:	ldr	r3, [sp, #48]	; 0x30
   18ad8:	eor	r2, r3, #1
   18adc:	cmp	sl, #2
   18ae0:	movne	r2, #0
   18ae4:	andeq	r2, r2, #1
   18ae8:	cmp	r2, #0
   18aec:	moveq	r3, r4
   18af0:	beq	18b28 <__assert_fail@plt+0x796c>
   18af4:	cmp	r9, r4
   18af8:	movhi	r3, #39	; 0x27
   18afc:	strbhi	r3, [r8, r4]
   18b00:	add	r3, r4, #1
   18b04:	cmp	r9, r3
   18b08:	movhi	r1, #36	; 0x24
   18b0c:	strbhi	r1, [r8, r3]
   18b10:	add	r3, r4, #2
   18b14:	cmp	r9, r3
   18b18:	movhi	r1, #39	; 0x27
   18b1c:	strbhi	r1, [r8, r3]
   18b20:	add	r3, r4, #3
   18b24:	str	r2, [sp, #48]	; 0x30
   18b28:	cmp	r9, r3
   18b2c:	movhi	r2, #92	; 0x5c
   18b30:	strbhi	r2, [r8, r3]
   18b34:	cmp	fp, #0
   18b38:	add	r4, r3, #1
   18b3c:	beq	190cc <__assert_fail@plt+0x7f10>
   18b40:	ldr	r2, [sp, #28]
   18b44:	ldr	r1, [sp, #36]	; 0x24
   18b48:	add	r2, r2, #1
   18b4c:	cmp	r1, r2
   18b50:	bls	18b8c <__assert_fail@plt+0x79d0>
   18b54:	ldr	r1, [sp, #44]	; 0x2c
   18b58:	mov	r7, #48	; 0x30
   18b5c:	ldrb	r2, [r1, r2]
   18b60:	sub	r2, r2, #48	; 0x30
   18b64:	cmp	r2, #9
   18b68:	movhi	r5, r6
   18b6c:	bhi	18c74 <__assert_fail@plt+0x7ab8>
   18b70:	cmp	r9, r4
   18b74:	add	r2, r3, #2
   18b78:	strbhi	r7, [r8, r4]
   18b7c:	cmp	r9, r2
   18b80:	add	r4, r3, #3
   18b84:	movhi	r1, #48	; 0x30
   18b88:	strbhi	r1, [r8, r2]
   18b8c:	mov	r5, r6
   18b90:	b	190d4 <__assert_fail@plt+0x7f18>
   18b94:	ldr	r3, [sp, #148]	; 0x94
   18b98:	tst	r3, #1
   18b9c:	ldreq	r5, [sp, #24]
   18ba0:	beq	190e0 <__assert_fail@plt+0x7f24>
   18ba4:	ldr	r3, [sp, #28]
   18ba8:	add	r3, r3, #1
   18bac:	b	1854c <__assert_fail@plt+0x7390>
   18bb0:	cmp	r6, #0
   18bb4:	bne	18800 <__assert_fail@plt+0x7644>
   18bb8:	mov	r5, #0
   18bbc:	b	18a34 <__assert_fail@plt+0x7878>
   18bc0:	ldr	r3, [sp, #148]	; 0x94
   18bc4:	tst	r3, #4
   18bc8:	beq	18bb8 <__assert_fail@plt+0x79fc>
   18bcc:	ldr	r3, [sp, #28]
   18bd0:	add	r2, r3, #2
   18bd4:	ldr	r3, [sp, #36]	; 0x24
   18bd8:	cmp	r3, r2
   18bdc:	bls	18bb8 <__assert_fail@plt+0x79fc>
   18be0:	ldr	r3, [sp, #44]	; 0x2c
   18be4:	ldr	r1, [sp, #28]
   18be8:	add	r3, r3, r1
   18bec:	ldrb	r0, [r3, #1]
   18bf0:	cmp	r0, #63	; 0x3f
   18bf4:	bne	18bb8 <__assert_fail@plt+0x79fc>
   18bf8:	ldr	r3, [sp, #44]	; 0x2c
   18bfc:	ldrb	r1, [r3, r2]
   18c00:	sub	r3, r1, #33	; 0x21
   18c04:	uxtb	r3, r3
   18c08:	cmp	r3, #29
   18c0c:	bhi	190dc <__assert_fail@plt+0x7f20>
   18c10:	mov	ip, #1
   18c14:	ldr	r5, [pc, #1428]	; 191b0 <__assert_fail@plt+0x7ff4>
   18c18:	ands	r5, r5, ip, lsl r3
   18c1c:	beq	18a34 <__assert_fail@plt+0x7878>
   18c20:	cmp	r6, #0
   18c24:	bne	18800 <__assert_fail@plt+0x7644>
   18c28:	add	r3, r4, #1
   18c2c:	cmp	r9, r4
   18c30:	strbhi	r0, [r8, r4]
   18c34:	cmp	r9, r3
   18c38:	movhi	r0, #34	; 0x22
   18c3c:	strbhi	r0, [r8, r3]
   18c40:	add	r3, r4, #2
   18c44:	cmp	r9, r3
   18c48:	movhi	r0, #34	; 0x22
   18c4c:	strbhi	r0, [r8, r3]
   18c50:	add	r3, r4, #3
   18c54:	cmp	r9, r3
   18c58:	add	r4, r4, #4
   18c5c:	mov	r5, r6
   18c60:	mov	fp, r6
   18c64:	mov	r7, r1
   18c68:	movhi	r0, #63	; 0x3f
   18c6c:	strbhi	r0, [r8, r3]
   18c70:	str	r2, [sp, #28]
   18c74:	ldr	r3, [sp, #24]
   18c78:	eor	r3, r3, #1
   18c7c:	cmp	sl, #2
   18c80:	orreq	r3, r3, #1
   18c84:	eor	r3, r3, #1
   18c88:	orr	r3, r6, r3
   18c8c:	tst	r3, #255	; 0xff
   18c90:	beq	18cc0 <__assert_fail@plt+0x7b04>
   18c94:	ldr	r3, [sp, #152]	; 0x98
   18c98:	cmp	r3, #0
   18c9c:	beq	18cc0 <__assert_fail@plt+0x7b04>
   18ca0:	lsr	r2, r7, #5
   18ca4:	ldr	r1, [sp, #152]	; 0x98
   18ca8:	uxtb	r2, r2
   18cac:	and	r3, r7, #31
   18cb0:	ldr	r2, [r1, r2, lsl #2]
   18cb4:	lsr	r3, r2, r3
   18cb8:	tst	r3, #1
   18cbc:	bne	18ccc <__assert_fail@plt+0x7b10>
   18cc0:	ldr	r3, [sp, #64]	; 0x40
   18cc4:	cmp	r3, #0
   18cc8:	beq	18d64 <__assert_fail@plt+0x7ba8>
   18ccc:	cmp	r6, #0
   18cd0:	bne	18800 <__assert_fail@plt+0x7644>
   18cd4:	ldr	r3, [sp, #48]	; 0x30
   18cd8:	eor	r3, r3, #1
   18cdc:	cmp	sl, #2
   18ce0:	movne	r3, #0
   18ce4:	andeq	r3, r3, #1
   18ce8:	cmp	r3, #0
   18cec:	beq	18d24 <__assert_fail@plt+0x7b68>
   18cf0:	cmp	r9, r4
   18cf4:	movhi	r2, #39	; 0x27
   18cf8:	strbhi	r2, [r8, r4]
   18cfc:	add	r2, r4, #1
   18d00:	cmp	r9, r2
   18d04:	movhi	r1, #36	; 0x24
   18d08:	strbhi	r1, [r8, r2]
   18d0c:	add	r2, r4, #2
   18d10:	cmp	r9, r2
   18d14:	add	r4, r4, #3
   18d18:	movhi	r1, #39	; 0x27
   18d1c:	strbhi	r1, [r8, r2]
   18d20:	str	r3, [sp, #48]	; 0x30
   18d24:	cmp	r9, r4
   18d28:	movhi	r3, #92	; 0x5c
   18d2c:	strbhi	r3, [r8, r4]
   18d30:	ldr	fp, [sp, #52]	; 0x34
   18d34:	add	r4, r4, #1
   18d38:	b	18d64 <__assert_fail@plt+0x7ba8>
   18d3c:	mov	r3, #116	; 0x74
   18d40:	b	18918 <__assert_fail@plt+0x775c>
   18d44:	mov	r3, #118	; 0x76
   18d48:	b	18aa8 <__assert_fail@plt+0x78ec>
   18d4c:	cmp	sl, #2
   18d50:	bne	18dc0 <__assert_fail@plt+0x7c04>
   18d54:	cmp	r6, #0
   18d58:	bne	18800 <__assert_fail@plt+0x7644>
   18d5c:	mov	r5, r6
   18d60:	mov	fp, r6
   18d64:	ldr	r3, [sp, #48]	; 0x30
   18d68:	eor	fp, fp, #1
   18d6c:	and	fp, fp, r3
   18d70:	tst	fp, #255	; 0xff
   18d74:	beq	18da0 <__assert_fail@plt+0x7be4>
   18d78:	cmp	r9, r4
   18d7c:	movhi	r3, #39	; 0x27
   18d80:	strbhi	r3, [r8, r4]
   18d84:	add	r3, r4, #1
   18d88:	cmp	r9, r3
   18d8c:	movhi	r2, #39	; 0x27
   18d90:	add	r4, r4, #2
   18d94:	strbhi	r2, [r8, r3]
   18d98:	mov	r3, #0
   18d9c:	str	r3, [sp, #48]	; 0x30
   18da0:	cmp	r9, r4
   18da4:	strbhi	r7, [r8, r4]
   18da8:	ldr	r3, [sp, #72]	; 0x48
   18dac:	cmp	r5, #0
   18db0:	moveq	r3, #0
   18db4:	add	r4, r4, #1
   18db8:	str	r3, [sp, #72]	; 0x48
   18dbc:	b	18ba4 <__assert_fail@plt+0x79e8>
   18dc0:	ldr	r3, [sp, #24]
   18dc4:	and	r3, r3, r6
   18dc8:	tst	r5, r3
   18dcc:	moveq	r3, r7
   18dd0:	beq	18918 <__assert_fail@plt+0x775c>
   18dd4:	mov	fp, #0
   18dd8:	mov	r5, fp
   18ddc:	b	18d64 <__assert_fail@plt+0x7ba8>
   18de0:	mov	r3, #110	; 0x6e
   18de4:	b	18918 <__assert_fail@plt+0x775c>
   18de8:	mov	r3, #97	; 0x61
   18dec:	b	18aa8 <__assert_fail@plt+0x78ec>
   18df0:	mov	r3, #102	; 0x66
   18df4:	b	18aa8 <__assert_fail@plt+0x78ec>
   18df8:	ldr	r3, [sp, #36]	; 0x24
   18dfc:	cmn	r3, #1
   18e00:	bne	18e20 <__assert_fail@plt+0x7c64>
   18e04:	ldr	r3, [sp, #44]	; 0x2c
   18e08:	ldrb	r3, [r3, #1]
   18e0c:	adds	r3, r3, #0
   18e10:	movne	r3, #1
   18e14:	cmp	r3, #0
   18e18:	bne	18bb8 <__assert_fail@plt+0x79fc>
   18e1c:	b	18a7c <__assert_fail@plt+0x78c0>
   18e20:	ldr	r3, [sp, #36]	; 0x24
   18e24:	subs	r3, r3, #1
   18e28:	b	18e10 <__assert_fail@plt+0x7c54>
   18e2c:	mov	r3, #0
   18e30:	str	r3, [sp, #96]	; 0x60
   18e34:	str	r3, [sp, #100]	; 0x64
   18e38:	ldr	r3, [sp, #36]	; 0x24
   18e3c:	cmn	r3, #1
   18e40:	bne	18e50 <__assert_fail@plt+0x7c94>
   18e44:	ldr	r0, [sp, #44]	; 0x2c
   18e48:	bl	11078 <strlen@plt>
   18e4c:	str	r0, [sp, #36]	; 0x24
   18e50:	ldr	r5, [sp, #52]	; 0x34
   18e54:	mov	r3, #0
   18e58:	str	r3, [sp, #56]	; 0x38
   18e5c:	ldr	r3, [sp, #28]
   18e60:	ldr	r2, [sp, #56]	; 0x38
   18e64:	ldr	r1, [sp, #36]	; 0x24
   18e68:	add	r2, r3, r2
   18e6c:	ldr	r3, [sp, #44]	; 0x2c
   18e70:	add	r0, sp, #92	; 0x5c
   18e74:	add	fp, r3, r2
   18e78:	sub	r2, r1, r2
   18e7c:	add	r3, sp, #96	; 0x60
   18e80:	mov	r1, fp
   18e84:	bl	1ab3c <__assert_fail@plt+0x9980>
   18e88:	subs	r2, r0, #0
   18e8c:	beq	18ecc <__assert_fail@plt+0x7d10>
   18e90:	cmn	r2, #1
   18e94:	beq	190a4 <__assert_fail@plt+0x7ee8>
   18e98:	cmn	r2, #2
   18e9c:	bne	19014 <__assert_fail@plt+0x7e58>
   18ea0:	ldr	r2, [sp, #56]	; 0x38
   18ea4:	ldr	r3, [sp, #28]
   18ea8:	add	r3, r3, r2
   18eac:	ldr	r2, [sp, #36]	; 0x24
   18eb0:	cmp	r2, r3
   18eb4:	bls	190a4 <__assert_fail@plt+0x7ee8>
   18eb8:	ldr	r3, [sp, #80]	; 0x50
   18ebc:	ldr	r2, [sp, #56]	; 0x38
   18ec0:	ldrb	r5, [r3, r2]
   18ec4:	cmp	r5, #0
   18ec8:	bne	19004 <__assert_fail@plt+0x7e48>
   18ecc:	ldr	r3, [sp, #56]	; 0x38
   18ed0:	cmp	r3, #1
   18ed4:	bls	188dc <__assert_fail@plt+0x7720>
   18ed8:	ldr	r2, [sp, #56]	; 0x38
   18edc:	ldr	r3, [sp, #28]
   18ee0:	mov	fp, #0
   18ee4:	add	r3, r3, r2
   18ee8:	ldr	r2, [sp, #24]
   18eec:	str	r3, [sp, #52]	; 0x34
   18ef0:	eor	r3, r5, #1
   18ef4:	and	r3, r3, r2
   18ef8:	mov	ip, #92	; 0x5c
   18efc:	uxtb	r3, r3
   18f00:	mov	r2, #39	; 0x27
   18f04:	cmp	r3, #0
   18f08:	beq	190ac <__assert_fail@plt+0x7ef0>
   18f0c:	cmp	r6, #0
   18f10:	bne	187fc <__assert_fail@plt+0x7640>
   18f14:	ldr	r1, [sp, #48]	; 0x30
   18f18:	eor	r1, r1, #1
   18f1c:	cmp	sl, #2
   18f20:	movne	r1, #0
   18f24:	andeq	r1, r1, #1
   18f28:	cmp	r1, #0
   18f2c:	beq	18f5c <__assert_fail@plt+0x7da0>
   18f30:	add	r0, r4, #1
   18f34:	cmp	r9, r4
   18f38:	strbhi	r2, [r8, r4]
   18f3c:	cmp	r9, r0
   18f40:	movhi	lr, #36	; 0x24
   18f44:	strbhi	lr, [r8, r0]
   18f48:	add	r0, r4, #2
   18f4c:	add	r4, r4, #3
   18f50:	cmp	r9, r0
   18f54:	strbhi	r2, [r8, r0]
   18f58:	str	r1, [sp, #48]	; 0x30
   18f5c:	add	r0, r4, #1
   18f60:	cmp	r9, r4
   18f64:	strbhi	ip, [r8, r4]
   18f68:	cmp	r9, r0
   18f6c:	lsrhi	r1, r7, #6
   18f70:	addhi	r1, r1, #48	; 0x30
   18f74:	strbhi	r1, [r8, r0]
   18f78:	add	r0, r4, #2
   18f7c:	cmp	r9, r0
   18f80:	lsrhi	r1, r7, #3
   18f84:	and	r7, r7, #7
   18f88:	andhi	r1, r1, #7
   18f8c:	add	r4, r4, #3
   18f90:	add	r7, r7, #48	; 0x30
   18f94:	mov	fp, r3
   18f98:	addhi	r1, r1, #48	; 0x30
   18f9c:	strbhi	r1, [r8, r0]
   18fa0:	ldr	r1, [sp, #28]
   18fa4:	ldr	r0, [sp, #52]	; 0x34
   18fa8:	add	r1, r1, #1
   18fac:	cmp	r0, r1
   18fb0:	bls	18d64 <__assert_fail@plt+0x7ba8>
   18fb4:	ldr	lr, [sp, #48]	; 0x30
   18fb8:	eor	r0, fp, #1
   18fbc:	and	r0, r0, lr
   18fc0:	tst	r0, #255	; 0xff
   18fc4:	beq	18fe8 <__assert_fail@plt+0x7e2c>
   18fc8:	add	r0, r4, #1
   18fcc:	cmp	r9, r4
   18fd0:	strbhi	r2, [r8, r4]
   18fd4:	cmp	r9, r0
   18fd8:	add	r4, r4, #2
   18fdc:	strbhi	r2, [r8, r0]
   18fe0:	mov	r0, #0
   18fe4:	str	r0, [sp, #48]	; 0x30
   18fe8:	ldr	r0, [sp, #44]	; 0x2c
   18fec:	cmp	r9, r4
   18ff0:	strbhi	r7, [r8, r4]
   18ff4:	str	r1, [sp, #28]
   18ff8:	add	r4, r4, #1
   18ffc:	ldrb	r7, [r0, r1]
   19000:	b	18f04 <__assert_fail@plt+0x7d48>
   19004:	ldr	r3, [sp, #56]	; 0x38
   19008:	add	r3, r3, #1
   1900c:	str	r3, [sp, #56]	; 0x38
   19010:	b	18ea0 <__assert_fail@plt+0x7ce4>
   19014:	cmp	sl, #2
   19018:	movne	r3, #0
   1901c:	andeq	r3, r6, #1
   19020:	cmp	r3, #0
   19024:	movne	r1, #1
   19028:	bne	19084 <__assert_fail@plt+0x7ec8>
   1902c:	ldr	r0, [sp, #92]	; 0x5c
   19030:	str	r2, [sp, #84]	; 0x54
   19034:	bl	10fa0 <iswprint@plt>
   19038:	ldr	r3, [sp, #56]	; 0x38
   1903c:	ldr	r2, [sp, #84]	; 0x54
   19040:	add	r3, r3, r2
   19044:	str	r3, [sp, #56]	; 0x38
   19048:	cmp	r0, #0
   1904c:	add	r0, sp, #96	; 0x60
   19050:	moveq	r5, #0
   19054:	bl	10f58 <mbsinit@plt>
   19058:	cmp	r0, #0
   1905c:	beq	18e5c <__assert_fail@plt+0x7ca0>
   19060:	b	18ecc <__assert_fail@plt+0x7d10>
   19064:	ldrb	r3, [fp, r1]
   19068:	cmp	r3, #94	; 0x5e
   1906c:	beq	1892c <__assert_fail@plt+0x7770>
   19070:	bhi	19090 <__assert_fail@plt+0x7ed4>
   19074:	sub	r3, r3, #91	; 0x5b
   19078:	cmp	r3, #1
   1907c:	bls	1892c <__assert_fail@plt+0x7770>
   19080:	add	r1, r1, #1
   19084:	cmp	r1, r2
   19088:	bne	19064 <__assert_fail@plt+0x7ea8>
   1908c:	b	1902c <__assert_fail@plt+0x7e70>
   19090:	cmp	r3, #96	; 0x60
   19094:	beq	1892c <__assert_fail@plt+0x7770>
   19098:	cmp	r3, #124	; 0x7c
   1909c:	bne	19080 <__assert_fail@plt+0x7ec4>
   190a0:	b	1892c <__assert_fail@plt+0x7770>
   190a4:	mov	r5, #0
   190a8:	b	18ecc <__assert_fail@plt+0x7d10>
   190ac:	ldr	r1, [sp, #64]	; 0x40
   190b0:	cmp	r1, #0
   190b4:	beq	18fa0 <__assert_fail@plt+0x7de4>
   190b8:	cmp	r9, r4
   190bc:	strbhi	ip, [r8, r4]
   190c0:	str	r3, [sp, #64]	; 0x40
   190c4:	add	r4, r4, #1
   190c8:	b	18fa0 <__assert_fail@plt+0x7de4>
   190cc:	mov	r5, fp
   190d0:	ldr	fp, [sp, #24]
   190d4:	mov	r7, #48	; 0x30
   190d8:	b	18c74 <__assert_fail@plt+0x7ab8>
   190dc:	mov	r5, #0
   190e0:	mov	fp, r5
   190e4:	b	18c74 <__assert_fail@plt+0x7ab8>
   190e8:	ldr	r3, [sp, #36]	; 0x24
   190ec:	ldr	r2, [sp, #28]
   190f0:	subs	r3, r3, r2
   190f4:	movne	r3, #1
   190f8:	b	18570 <__assert_fail@plt+0x73b4>
   190fc:	ldr	r3, [sp, #60]	; 0x3c
   19100:	clz	r7, r9
   19104:	cmp	r3, #0
   19108:	lsr	r7, r7, #5
   1910c:	moveq	r7, #0
   19110:	cmp	r7, #0
   19114:	mov	r5, r3
   19118:	bne	184d0 <__assert_fail@plt+0x7314>
   1911c:	ldr	r3, [sp, #68]	; 0x44
   19120:	ldr	r2, [sp, #40]	; 0x28
   19124:	cmp	r2, #0
   19128:	moveq	r3, #0
   1912c:	andne	r3, r3, #1
   19130:	cmp	r3, #0
   19134:	movne	r3, r2
   19138:	subne	r2, r3, #1
   1913c:	bne	1916c <__assert_fail@plt+0x7fb0>
   19140:	cmp	r9, r4
   19144:	movhi	r3, #0
   19148:	strbhi	r3, [r8, r4]
   1914c:	mov	r0, r4
   19150:	add	sp, sp, #108	; 0x6c
   19154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19158:	mov	r3, r2
   1915c:	b	19120 <__assert_fail@plt+0x7f64>
   19160:	cmp	r9, r4
   19164:	strbhi	r3, [r8, r4]
   19168:	add	r4, r4, #1
   1916c:	ldrb	r3, [r2, #1]!
   19170:	cmp	r3, #0
   19174:	bne	19160 <__assert_fail@plt+0x7fa4>
   19178:	b	19140 <__assert_fail@plt+0x7f84>
   1917c:	ldr	r3, [pc, #32]	; 191a4 <__assert_fail@plt+0x7fe8>
   19180:	mov	r6, #1
   19184:	str	r6, [sp, #24]
   19188:	str	r6, [sp, #32]
   1918c:	str	r3, [sp, #40]	; 0x28
   19190:	mov	r4, #0
   19194:	mov	sl, #5
   19198:	b	18540 <__assert_fail@plt+0x7384>
   1919c:	mov	r6, #1
   191a0:	b	18734 <__assert_fail@plt+0x7578>
   191a4:	andeq	ip, r1, r3, lsr #4
   191a8:	andeq	ip, r1, r7, lsr #4
   191ac:	andeq	ip, r1, r5, lsr #4
   191b0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   191b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191b8:	sub	sp, sp, #52	; 0x34
   191bc:	mov	r6, r0
   191c0:	mov	r5, r3
   191c4:	mov	r8, r1
   191c8:	mov	r9, r2
   191cc:	bl	11090 <__errno_location@plt>
   191d0:	ldr	r7, [pc, #380]	; 19354 <__assert_fail@plt+0x8198>
   191d4:	cmn	r6, #-2147483647	; 0x80000001
   191d8:	ldr	r4, [r7]
   191dc:	ldr	r3, [r0]
   191e0:	str	r0, [sp, #24]
   191e4:	str	r3, [sp, #32]
   191e8:	movne	r3, #0
   191ec:	moveq	r3, #1
   191f0:	orrs	r3, r3, r6, lsr #31
   191f4:	beq	191fc <__assert_fail@plt+0x8040>
   191f8:	bl	11180 <abort@plt>
   191fc:	ldr	r2, [r7, #4]
   19200:	cmp	r6, r2
   19204:	blt	19274 <__assert_fail@plt+0x80b8>
   19208:	add	r1, sp, #48	; 0x30
   1920c:	add	sl, r7, #8
   19210:	str	r2, [r1, #-4]!
   19214:	cmp	r4, sl
   19218:	mov	r3, #8
   1921c:	sub	r2, r6, r2
   19220:	movne	r0, r4
   19224:	str	r3, [sp]
   19228:	add	r2, r2, #1
   1922c:	mvn	r3, #-2147483648	; 0x80000000
   19230:	moveq	r0, #0
   19234:	bl	19f54 <__assert_fail@plt+0x8d98>
   19238:	cmp	r4, sl
   1923c:	ldr	r2, [sp, #44]	; 0x2c
   19240:	mov	fp, r0
   19244:	str	r0, [r7]
   19248:	ldmeq	r4, {r0, r1}
   1924c:	mov	r4, fp
   19250:	stmeq	fp, {r0, r1}
   19254:	ldr	r0, [r7, #4]
   19258:	mov	r1, #0
   1925c:	sub	r2, r2, r0
   19260:	add	r0, fp, r0, lsl #3
   19264:	lsl	r2, r2, #3
   19268:	bl	110b4 <memset@plt>
   1926c:	ldr	r3, [sp, #44]	; 0x2c
   19270:	str	r3, [r7, #4]
   19274:	ldr	r3, [r5, #4]
   19278:	add	sl, r4, r6, lsl #3
   1927c:	orr	r3, r3, #1
   19280:	str	r3, [sp, #28]
   19284:	add	r3, r5, #8
   19288:	str	r3, [sp, #36]	; 0x24
   1928c:	ldr	r3, [r5, #44]	; 0x2c
   19290:	ldr	fp, [r4, r6, lsl #3]
   19294:	ldr	r7, [sl, #4]
   19298:	str	r3, [sp, #16]
   1929c:	ldr	r3, [r5, #40]	; 0x28
   192a0:	mov	r2, r8
   192a4:	str	r3, [sp, #12]
   192a8:	add	r3, r5, #8
   192ac:	str	r3, [sp, #8]
   192b0:	ldr	r3, [sp, #28]
   192b4:	mov	r1, fp
   192b8:	str	r3, [sp, #4]
   192bc:	ldr	r3, [r5]
   192c0:	mov	r0, r7
   192c4:	str	r3, [sp]
   192c8:	mov	r3, r9
   192cc:	bl	18480 <__assert_fail@plt+0x72c4>
   192d0:	cmp	fp, r0
   192d4:	bhi	1933c <__assert_fail@plt+0x8180>
   192d8:	ldr	r3, [pc, #120]	; 19358 <__assert_fail@plt+0x819c>
   192dc:	add	fp, r0, #1
   192e0:	cmp	r7, r3
   192e4:	str	fp, [r4, r6, lsl #3]
   192e8:	beq	192f4 <__assert_fail@plt+0x8138>
   192ec:	mov	r0, r7
   192f0:	bl	181a8 <__assert_fail@plt+0x6fec>
   192f4:	mov	r0, fp
   192f8:	bl	19e0c <__assert_fail@plt+0x8c50>
   192fc:	ldr	r3, [r5, #44]	; 0x2c
   19300:	mov	r2, r8
   19304:	mov	r1, fp
   19308:	str	r0, [sl, #4]
   1930c:	str	r3, [sp, #16]
   19310:	ldr	r3, [r5, #40]	; 0x28
   19314:	mov	r7, r0
   19318:	str	r3, [sp, #12]
   1931c:	add	r3, r5, #8
   19320:	str	r3, [sp, #8]
   19324:	ldr	r3, [sp, #28]
   19328:	str	r3, [sp, #4]
   1932c:	ldr	r3, [r5]
   19330:	str	r3, [sp]
   19334:	mov	r3, r9
   19338:	bl	18480 <__assert_fail@plt+0x72c4>
   1933c:	ldr	r3, [sp, #24]
   19340:	ldr	r2, [sp, #32]
   19344:	mov	r0, r7
   19348:	str	r2, [r3]
   1934c:	add	sp, sp, #52	; 0x34
   19350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19354:	andeq	sp, r2, r8, lsr #2
   19358:			; <UNDEFINED> instruction: 0x0002d1b4
   1935c:	push	{r4, r5, r6, lr}
   19360:	mov	r5, r0
   19364:	bl	11090 <__errno_location@plt>
   19368:	cmp	r5, #0
   1936c:	mov	r1, #48	; 0x30
   19370:	ldr	r6, [r0]
   19374:	mov	r4, r0
   19378:	ldr	r0, [pc, #12]	; 1938c <__assert_fail@plt+0x81d0>
   1937c:	movne	r0, r5
   19380:	bl	1a1e8 <__assert_fail@plt+0x902c>
   19384:	str	r6, [r4]
   19388:	pop	{r4, r5, r6, pc}
   1938c:			; <UNDEFINED> instruction: 0x0002d2b4
   19390:	ldr	r3, [pc, #12]	; 193a4 <__assert_fail@plt+0x81e8>
   19394:	cmp	r0, #0
   19398:	moveq	r0, r3
   1939c:	ldr	r0, [r0]
   193a0:	bx	lr
   193a4:			; <UNDEFINED> instruction: 0x0002d2b4
   193a8:	ldr	r3, [pc, #12]	; 193bc <__assert_fail@plt+0x8200>
   193ac:	cmp	r0, #0
   193b0:	moveq	r0, r3
   193b4:	str	r1, [r0]
   193b8:	bx	lr
   193bc:			; <UNDEFINED> instruction: 0x0002d2b4
   193c0:	ldr	r3, [pc, #52]	; 193fc <__assert_fail@plt+0x8240>
   193c4:	cmp	r0, #0
   193c8:	moveq	r0, r3
   193cc:	add	r3, r0, #8
   193d0:	push	{lr}		; (str lr, [sp, #-4]!)
   193d4:	lsr	lr, r1, #5
   193d8:	and	r1, r1, #31
   193dc:	ldr	ip, [r3, lr, lsl #2]
   193e0:	lsr	r0, ip, r1
   193e4:	eor	r2, r2, r0
   193e8:	and	r2, r2, #1
   193ec:	and	r0, r0, #1
   193f0:	eor	r1, ip, r2, lsl r1
   193f4:	str	r1, [r3, lr, lsl #2]
   193f8:	pop	{pc}		; (ldr pc, [sp], #4)
   193fc:			; <UNDEFINED> instruction: 0x0002d2b4
   19400:	ldr	r3, [pc, #16]	; 19418 <__assert_fail@plt+0x825c>
   19404:	cmp	r0, #0
   19408:	movne	r3, r0
   1940c:	ldr	r0, [r3, #4]
   19410:	str	r1, [r3, #4]
   19414:	bx	lr
   19418:			; <UNDEFINED> instruction: 0x0002d2b4
   1941c:	ldr	r3, [pc, #44]	; 19450 <__assert_fail@plt+0x8294>
   19420:	cmp	r0, #0
   19424:	moveq	r0, r3
   19428:	mov	r3, #10
   1942c:	cmp	r2, #0
   19430:	cmpne	r1, #0
   19434:	str	r3, [r0]
   19438:	bne	19444 <__assert_fail@plt+0x8288>
   1943c:	push	{r4, lr}
   19440:	bl	11180 <abort@plt>
   19444:	str	r1, [r0, #40]	; 0x28
   19448:	str	r2, [r0, #44]	; 0x2c
   1944c:	bx	lr
   19450:			; <UNDEFINED> instruction: 0x0002d2b4
   19454:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19458:	sub	sp, sp, #24
   1945c:	mov	sl, r3
   19460:	ldr	r4, [sp, #56]	; 0x38
   19464:	ldr	r3, [pc, #100]	; 194d0 <__assert_fail@plt+0x8314>
   19468:	cmp	r4, #0
   1946c:	moveq	r4, r3
   19470:	mov	r7, r0
   19474:	mov	r8, r1
   19478:	mov	r9, r2
   1947c:	bl	11090 <__errno_location@plt>
   19480:	ldr	r3, [r4, #44]	; 0x2c
   19484:	mov	r2, r9
   19488:	mov	r1, r8
   1948c:	ldr	r6, [r0]
   19490:	str	r3, [sp, #16]
   19494:	ldr	r3, [r4, #40]	; 0x28
   19498:	mov	r5, r0
   1949c:	str	r3, [sp, #12]
   194a0:	add	r3, r4, #8
   194a4:	str	r3, [sp, #8]
   194a8:	ldr	r3, [r4, #4]
   194ac:	mov	r0, r7
   194b0:	str	r3, [sp, #4]
   194b4:	ldr	r3, [r4]
   194b8:	str	r3, [sp]
   194bc:	mov	r3, sl
   194c0:	bl	18480 <__assert_fail@plt+0x72c4>
   194c4:	str	r6, [r5]
   194c8:	add	sp, sp, #24
   194cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194d0:			; <UNDEFINED> instruction: 0x0002d2b4
   194d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194d8:	cmp	r3, #0
   194dc:	sub	sp, sp, #44	; 0x2c
   194e0:	ldr	r4, [pc, #188]	; 195a4 <__assert_fail@plt+0x83e8>
   194e4:	mov	r6, r2
   194e8:	movne	r4, r3
   194ec:	mov	sl, r1
   194f0:	mov	r9, r0
   194f4:	bl	11090 <__errno_location@plt>
   194f8:	ldr	r5, [r4, #4]
   194fc:	add	fp, r4, #8
   19500:	cmp	r6, #0
   19504:	orreq	r5, r5, #1
   19508:	mov	r1, #0
   1950c:	mov	r2, r9
   19510:	ldr	r3, [r0]
   19514:	mov	r8, r0
   19518:	str	r3, [sp, #28]
   1951c:	ldr	r3, [r4, #44]	; 0x2c
   19520:	mov	r0, r1
   19524:	str	r3, [sp, #16]
   19528:	ldr	r3, [r4, #40]	; 0x28
   1952c:	stmib	sp, {r5, fp}
   19530:	str	r3, [sp, #12]
   19534:	ldr	r3, [r4]
   19538:	str	r3, [sp]
   1953c:	mov	r3, sl
   19540:	bl	18480 <__assert_fail@plt+0x72c4>
   19544:	add	r1, r0, #1
   19548:	mov	r7, r0
   1954c:	mov	r0, r1
   19550:	str	r1, [sp, #36]	; 0x24
   19554:	bl	19e0c <__assert_fail@plt+0x8c50>
   19558:	ldr	r3, [r4, #44]	; 0x2c
   1955c:	mov	r2, r9
   19560:	str	r3, [sp, #16]
   19564:	ldr	r3, [r4, #40]	; 0x28
   19568:	stmib	sp, {r5, fp}
   1956c:	str	r3, [sp, #12]
   19570:	ldr	r3, [r4]
   19574:	ldr	r1, [sp, #36]	; 0x24
   19578:	str	r3, [sp]
   1957c:	mov	r3, sl
   19580:	str	r0, [sp, #32]
   19584:	bl	18480 <__assert_fail@plt+0x72c4>
   19588:	ldr	r3, [sp, #28]
   1958c:	cmp	r6, #0
   19590:	str	r3, [r8]
   19594:	ldr	r0, [sp, #32]
   19598:	strne	r7, [r6]
   1959c:	add	sp, sp, #44	; 0x2c
   195a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195a4:			; <UNDEFINED> instruction: 0x0002d2b4
   195a8:	mov	r3, r2
   195ac:	mov	r2, #0
   195b0:	b	194d4 <__assert_fail@plt+0x8318>
   195b4:	push	{r4, r5, r6, r7, r8, lr}
   195b8:	mov	r6, #1
   195bc:	ldr	r4, [pc, #104]	; 1962c <__assert_fail@plt+0x8470>
   195c0:	ldr	r5, [r4]
   195c4:	add	r7, r5, #12
   195c8:	ldr	r3, [r4, #4]
   195cc:	add	r7, r7, #8
   195d0:	cmp	r6, r3
   195d4:	blt	1961c <__assert_fail@plt+0x8460>
   195d8:	ldr	r0, [r5, #4]
   195dc:	ldr	r6, [pc, #76]	; 19630 <__assert_fail@plt+0x8474>
   195e0:	cmp	r0, r6
   195e4:	beq	195f8 <__assert_fail@plt+0x843c>
   195e8:	bl	181a8 <__assert_fail@plt+0x6fec>
   195ec:	mov	r3, #256	; 0x100
   195f0:	str	r3, [r4, #8]
   195f4:	str	r6, [r4, #12]
   195f8:	ldr	r6, [pc, #52]	; 19634 <__assert_fail@plt+0x8478>
   195fc:	cmp	r5, r6
   19600:	beq	19610 <__assert_fail@plt+0x8454>
   19604:	mov	r0, r5
   19608:	bl	181a8 <__assert_fail@plt+0x6fec>
   1960c:	str	r6, [r4]
   19610:	mov	r3, #1
   19614:	str	r3, [r4, #4]
   19618:	pop	{r4, r5, r6, r7, r8, pc}
   1961c:	ldr	r0, [r7, #-8]
   19620:	bl	181a8 <__assert_fail@plt+0x6fec>
   19624:	add	r6, r6, #1
   19628:	b	195c8 <__assert_fail@plt+0x840c>
   1962c:	andeq	sp, r2, r8, lsr #2
   19630:			; <UNDEFINED> instruction: 0x0002d1b4
   19634:	andeq	sp, r2, r0, lsr r1
   19638:	ldr	r3, [pc, #4]	; 19644 <__assert_fail@plt+0x8488>
   1963c:	mvn	r2, #0
   19640:	b	191b4 <__assert_fail@plt+0x7ff8>
   19644:			; <UNDEFINED> instruction: 0x0002d2b4
   19648:	ldr	r3, [pc]	; 19650 <__assert_fail@plt+0x8494>
   1964c:	b	191b4 <__assert_fail@plt+0x7ff8>
   19650:			; <UNDEFINED> instruction: 0x0002d2b4
   19654:	mov	r1, r0
   19658:	mov	r0, #0
   1965c:	b	19638 <__assert_fail@plt+0x847c>
   19660:	mov	r2, r1
   19664:	mov	r1, r0
   19668:	mov	r0, #0
   1966c:	b	19648 <__assert_fail@plt+0x848c>
   19670:	push	{r4, r5, lr}
   19674:	sub	sp, sp, #52	; 0x34
   19678:	mov	r5, r2
   1967c:	mov	r4, r0
   19680:	mov	r0, sp
   19684:	bl	1833c <__assert_fail@plt+0x7180>
   19688:	mov	r3, sp
   1968c:	mvn	r2, #0
   19690:	mov	r1, r5
   19694:	mov	r0, r4
   19698:	bl	191b4 <__assert_fail@plt+0x7ff8>
   1969c:	add	sp, sp, #52	; 0x34
   196a0:	pop	{r4, r5, pc}
   196a4:	push	{r4, r5, r6, lr}
   196a8:	sub	sp, sp, #48	; 0x30
   196ac:	mov	r5, r2
   196b0:	mov	r6, r3
   196b4:	mov	r4, r0
   196b8:	mov	r0, sp
   196bc:	bl	1833c <__assert_fail@plt+0x7180>
   196c0:	mov	r3, sp
   196c4:	mov	r2, r6
   196c8:	mov	r1, r5
   196cc:	mov	r0, r4
   196d0:	bl	191b4 <__assert_fail@plt+0x7ff8>
   196d4:	add	sp, sp, #48	; 0x30
   196d8:	pop	{r4, r5, r6, pc}
   196dc:	mov	r2, r1
   196e0:	mov	r1, r0
   196e4:	mov	r0, #0
   196e8:	b	19670 <__assert_fail@plt+0x84b4>
   196ec:	mov	r3, r2
   196f0:	mov	r2, r1
   196f4:	mov	r1, r0
   196f8:	mov	r0, #0
   196fc:	b	196a4 <__assert_fail@plt+0x84e8>
   19700:	push	{r4, r5, r6, lr}
   19704:	mov	r4, r0
   19708:	ldr	lr, [pc, #80]	; 19760 <__assert_fail@plt+0x85a4>
   1970c:	mov	r5, r1
   19710:	mov	r6, r2
   19714:	ldm	lr!, {r0, r1, r2, r3}
   19718:	sub	sp, sp, #48	; 0x30
   1971c:	mov	ip, sp
   19720:	stmia	ip!, {r0, r1, r2, r3}
   19724:	ldm	lr!, {r0, r1, r2, r3}
   19728:	stmia	ip!, {r0, r1, r2, r3}
   1972c:	ldm	lr, {r0, r1, r2, r3}
   19730:	stm	ip, {r0, r1, r2, r3}
   19734:	mov	r1, r6
   19738:	mov	r2, #1
   1973c:	mov	r0, sp
   19740:	bl	193c0 <__assert_fail@plt+0x8204>
   19744:	mov	r3, sp
   19748:	mov	r2, r5
   1974c:	mov	r1, r4
   19750:	mov	r0, #0
   19754:	bl	191b4 <__assert_fail@plt+0x7ff8>
   19758:	add	sp, sp, #48	; 0x30
   1975c:	pop	{r4, r5, r6, pc}
   19760:			; <UNDEFINED> instruction: 0x0002d2b4
   19764:	mov	r2, r1
   19768:	mvn	r1, #0
   1976c:	b	19700 <__assert_fail@plt+0x8544>
   19770:	mov	r1, #58	; 0x3a
   19774:	b	19764 <__assert_fail@plt+0x85a8>
   19778:	mov	r2, #58	; 0x3a
   1977c:	b	19700 <__assert_fail@plt+0x8544>
   19780:	push	{r4, r5, lr}
   19784:	sub	sp, sp, #100	; 0x64
   19788:	mov	r4, r0
   1978c:	mov	r0, sp
   19790:	mov	r5, r2
   19794:	bl	1833c <__assert_fail@plt+0x7180>
   19798:	mov	ip, sp
   1979c:	add	lr, sp, #48	; 0x30
   197a0:	ldm	ip!, {r0, r1, r2, r3}
   197a4:	stmia	lr!, {r0, r1, r2, r3}
   197a8:	ldm	ip!, {r0, r1, r2, r3}
   197ac:	stmia	lr!, {r0, r1, r2, r3}
   197b0:	ldm	ip, {r0, r1, r2, r3}
   197b4:	stm	lr, {r0, r1, r2, r3}
   197b8:	mov	r2, #1
   197bc:	mov	r1, #58	; 0x3a
   197c0:	add	r0, sp, #48	; 0x30
   197c4:	bl	193c0 <__assert_fail@plt+0x8204>
   197c8:	add	r3, sp, #48	; 0x30
   197cc:	mvn	r2, #0
   197d0:	mov	r1, r5
   197d4:	mov	r0, r4
   197d8:	bl	191b4 <__assert_fail@plt+0x7ff8>
   197dc:	add	sp, sp, #100	; 0x64
   197e0:	pop	{r4, r5, pc}
   197e4:	push	{r4, r5, r6, r7, lr}
   197e8:	mov	r4, r0
   197ec:	ldr	lr, [pc, #84]	; 19848 <__assert_fail@plt+0x868c>
   197f0:	mov	r6, r1
   197f4:	mov	r7, r2
   197f8:	mov	r5, r3
   197fc:	ldm	lr!, {r0, r1, r2, r3}
   19800:	sub	sp, sp, #52	; 0x34
   19804:	mov	ip, sp
   19808:	stmia	ip!, {r0, r1, r2, r3}
   1980c:	ldm	lr!, {r0, r1, r2, r3}
   19810:	stmia	ip!, {r0, r1, r2, r3}
   19814:	ldm	lr, {r0, r1, r2, r3}
   19818:	stm	ip, {r0, r1, r2, r3}
   1981c:	mov	r2, r7
   19820:	mov	r1, r6
   19824:	mov	r0, sp
   19828:	bl	1941c <__assert_fail@plt+0x8260>
   1982c:	mov	r3, sp
   19830:	ldr	r2, [sp, #72]	; 0x48
   19834:	mov	r1, r5
   19838:	mov	r0, r4
   1983c:	bl	191b4 <__assert_fail@plt+0x7ff8>
   19840:	add	sp, sp, #52	; 0x34
   19844:	pop	{r4, r5, r6, r7, pc}
   19848:			; <UNDEFINED> instruction: 0x0002d2b4
   1984c:	mvn	ip, #0
   19850:	push	{r0, r1, r2, lr}
   19854:	str	ip, [sp]
   19858:	bl	197e4 <__assert_fail@plt+0x8628>
   1985c:	add	sp, sp, #12
   19860:	pop	{pc}		; (ldr pc, [sp], #4)
   19864:	mov	r3, r2
   19868:	mov	r2, r1
   1986c:	mov	r1, r0
   19870:	mov	r0, #0
   19874:	b	1984c <__assert_fail@plt+0x8690>
   19878:	push	{r0, r1, r2, lr}
   1987c:	str	r3, [sp]
   19880:	mov	r3, r2
   19884:	mov	r2, r1
   19888:	mov	r1, r0
   1988c:	mov	r0, #0
   19890:	bl	197e4 <__assert_fail@plt+0x8628>
   19894:	add	sp, sp, #12
   19898:	pop	{pc}		; (ldr pc, [sp], #4)
   1989c:	ldr	r3, [pc]	; 198a4 <__assert_fail@plt+0x86e8>
   198a0:	b	191b4 <__assert_fail@plt+0x7ff8>
   198a4:	andeq	sp, r2, r8, lsr r1
   198a8:	mov	r2, r1
   198ac:	mov	r1, r0
   198b0:	mov	r0, #0
   198b4:	b	1989c <__assert_fail@plt+0x86e0>
   198b8:	mvn	r2, #0
   198bc:	b	1989c <__assert_fail@plt+0x86e0>
   198c0:	mov	r1, r0
   198c4:	mov	r0, #0
   198c8:	b	198b8 <__assert_fail@plt+0x86fc>
   198cc:	mov	r2, #3
   198d0:	mov	r1, #0
   198d4:	b	1a944 <__assert_fail@plt+0x9788>
   198d8:	push	{r4, r5, r6, lr}
   198dc:	sub	sp, sp, #32
   198e0:	cmp	r1, #0
   198e4:	mov	r5, r0
   198e8:	ldr	r4, [sp, #48]	; 0x30
   198ec:	ldr	r6, [sp, #52]	; 0x34
   198f0:	beq	199a4 <__assert_fail@plt+0x87e8>
   198f4:	stm	sp, {r2, r3}
   198f8:	mov	r3, r1
   198fc:	ldr	r2, [pc, #860]	; 19c60 <__assert_fail@plt+0x8aa4>
   19900:	mov	r1, #1
   19904:	bl	110e4 <__fprintf_chk@plt>
   19908:	mov	r2, #5
   1990c:	ldr	r1, [pc, #848]	; 19c64 <__assert_fail@plt+0x8aa8>
   19910:	mov	r0, #0
   19914:	bl	10f7c <dcgettext@plt>
   19918:	ldr	r3, [pc, #840]	; 19c68 <__assert_fail@plt+0x8aac>
   1991c:	ldr	r2, [pc, #840]	; 19c6c <__assert_fail@plt+0x8ab0>
   19920:	str	r3, [sp]
   19924:	mov	r1, #1
   19928:	mov	r3, r0
   1992c:	mov	r0, r5
   19930:	bl	110e4 <__fprintf_chk@plt>
   19934:	mov	r1, r5
   19938:	mov	r0, #10
   1993c:	bl	10f70 <fputc_unlocked@plt>
   19940:	mov	r2, #5
   19944:	ldr	r1, [pc, #804]	; 19c70 <__assert_fail@plt+0x8ab4>
   19948:	mov	r0, #0
   1994c:	bl	10f7c <dcgettext@plt>
   19950:	mov	r1, #1
   19954:	ldr	r3, [pc, #792]	; 19c74 <__assert_fail@plt+0x8ab8>
   19958:	mov	r2, r0
   1995c:	mov	r0, r5
   19960:	bl	110e4 <__fprintf_chk@plt>
   19964:	mov	r1, r5
   19968:	mov	r0, #10
   1996c:	bl	10f70 <fputc_unlocked@plt>
   19970:	cmp	r6, #9
   19974:	ldrls	pc, [pc, r6, lsl #2]
   19978:	b	19c54 <__assert_fail@plt+0x8a98>
   1997c:	muleq	r1, r4, sl
   19980:			; <UNDEFINED> instruction: 0x000199bc
   19984:	andeq	r9, r1, r8, ror #19
   19988:	andeq	r9, r1, ip, lsl sl
   1998c:	andeq	r9, r1, r8, asr sl
   19990:	muleq	r1, ip, sl
   19994:	andeq	r9, r1, r4, ror #21
   19998:	andeq	r9, r1, r4, lsr fp
   1999c:	andeq	r9, r1, ip, lsl #23
   199a0:	andeq	r9, r1, ip, ror #23
   199a4:	str	r3, [sp]
   199a8:	mov	r1, #1
   199ac:	mov	r3, r2
   199b0:	ldr	r2, [pc, #704]	; 19c78 <__assert_fail@plt+0x8abc>
   199b4:	bl	110e4 <__fprintf_chk@plt>
   199b8:	b	19908 <__assert_fail@plt+0x874c>
   199bc:	mov	r2, #5
   199c0:	ldr	r1, [pc, #692]	; 19c7c <__assert_fail@plt+0x8ac0>
   199c4:	mov	r0, #0
   199c8:	bl	10f7c <dcgettext@plt>
   199cc:	ldr	r3, [r4]
   199d0:	mov	r1, #1
   199d4:	mov	r2, r0
   199d8:	mov	r0, r5
   199dc:	add	sp, sp, #32
   199e0:	pop	{r4, r5, r6, lr}
   199e4:	b	110e4 <__fprintf_chk@plt>
   199e8:	mov	r2, #5
   199ec:	ldr	r1, [pc, #652]	; 19c80 <__assert_fail@plt+0x8ac4>
   199f0:	mov	r0, #0
   199f4:	bl	10f7c <dcgettext@plt>
   199f8:	ldr	r3, [r4, #4]
   199fc:	mov	r1, #1
   19a00:	str	r3, [sp, #48]	; 0x30
   19a04:	ldr	r3, [r4]
   19a08:	mov	r2, r0
   19a0c:	mov	r0, r5
   19a10:	add	sp, sp, #32
   19a14:	pop	{r4, r5, r6, lr}
   19a18:	b	110e4 <__fprintf_chk@plt>
   19a1c:	mov	r2, #5
   19a20:	ldr	r1, [pc, #604]	; 19c84 <__assert_fail@plt+0x8ac8>
   19a24:	mov	r0, #0
   19a28:	bl	10f7c <dcgettext@plt>
   19a2c:	ldr	r3, [r4, #8]
   19a30:	mov	r1, #1
   19a34:	str	r3, [sp, #52]	; 0x34
   19a38:	ldr	r3, [r4, #4]
   19a3c:	str	r3, [sp, #48]	; 0x30
   19a40:	ldr	r3, [r4]
   19a44:	mov	r2, r0
   19a48:	mov	r0, r5
   19a4c:	add	sp, sp, #32
   19a50:	pop	{r4, r5, r6, lr}
   19a54:	b	110e4 <__fprintf_chk@plt>
   19a58:	mov	r2, #5
   19a5c:	ldr	r1, [pc, #548]	; 19c88 <__assert_fail@plt+0x8acc>
   19a60:	mov	r0, #0
   19a64:	bl	10f7c <dcgettext@plt>
   19a68:	ldr	r3, [r4, #12]
   19a6c:	mov	r1, #1
   19a70:	str	r3, [sp, #8]
   19a74:	ldr	r3, [r4, #8]
   19a78:	str	r3, [sp, #4]
   19a7c:	ldr	r3, [r4, #4]
   19a80:	str	r3, [sp]
   19a84:	ldr	r3, [r4]
   19a88:	mov	r2, r0
   19a8c:	mov	r0, r5
   19a90:	bl	110e4 <__fprintf_chk@plt>
   19a94:	add	sp, sp, #32
   19a98:	pop	{r4, r5, r6, pc}
   19a9c:	mov	r2, #5
   19aa0:	ldr	r1, [pc, #484]	; 19c8c <__assert_fail@plt+0x8ad0>
   19aa4:	mov	r0, #0
   19aa8:	bl	10f7c <dcgettext@plt>
   19aac:	ldr	r3, [r4, #16]
   19ab0:	mov	r1, #1
   19ab4:	str	r3, [sp, #12]
   19ab8:	ldr	r3, [r4, #12]
   19abc:	str	r3, [sp, #8]
   19ac0:	ldr	r3, [r4, #8]
   19ac4:	str	r3, [sp, #4]
   19ac8:	ldr	r3, [r4, #4]
   19acc:	str	r3, [sp]
   19ad0:	ldr	r3, [r4]
   19ad4:	mov	r2, r0
   19ad8:	mov	r0, r5
   19adc:	bl	110e4 <__fprintf_chk@plt>
   19ae0:	b	19a94 <__assert_fail@plt+0x88d8>
   19ae4:	mov	r2, #5
   19ae8:	ldr	r1, [pc, #416]	; 19c90 <__assert_fail@plt+0x8ad4>
   19aec:	mov	r0, #0
   19af0:	bl	10f7c <dcgettext@plt>
   19af4:	ldr	r3, [r4, #20]
   19af8:	mov	r1, #1
   19afc:	str	r3, [sp, #16]
   19b00:	ldr	r3, [r4, #16]
   19b04:	str	r3, [sp, #12]
   19b08:	ldr	r3, [r4, #12]
   19b0c:	str	r3, [sp, #8]
   19b10:	ldr	r3, [r4, #8]
   19b14:	str	r3, [sp, #4]
   19b18:	ldr	r3, [r4, #4]
   19b1c:	str	r3, [sp]
   19b20:	ldr	r3, [r4]
   19b24:	mov	r2, r0
   19b28:	mov	r0, r5
   19b2c:	bl	110e4 <__fprintf_chk@plt>
   19b30:	b	19a94 <__assert_fail@plt+0x88d8>
   19b34:	mov	r2, #5
   19b38:	ldr	r1, [pc, #340]	; 19c94 <__assert_fail@plt+0x8ad8>
   19b3c:	mov	r0, #0
   19b40:	bl	10f7c <dcgettext@plt>
   19b44:	ldr	r3, [r4, #24]
   19b48:	mov	r1, #1
   19b4c:	str	r3, [sp, #20]
   19b50:	ldr	r3, [r4, #20]
   19b54:	str	r3, [sp, #16]
   19b58:	ldr	r3, [r4, #16]
   19b5c:	str	r3, [sp, #12]
   19b60:	ldr	r3, [r4, #12]
   19b64:	str	r3, [sp, #8]
   19b68:	ldr	r3, [r4, #8]
   19b6c:	str	r3, [sp, #4]
   19b70:	ldr	r3, [r4, #4]
   19b74:	str	r3, [sp]
   19b78:	ldr	r3, [r4]
   19b7c:	mov	r2, r0
   19b80:	mov	r0, r5
   19b84:	bl	110e4 <__fprintf_chk@plt>
   19b88:	b	19a94 <__assert_fail@plt+0x88d8>
   19b8c:	mov	r2, #5
   19b90:	ldr	r1, [pc, #256]	; 19c98 <__assert_fail@plt+0x8adc>
   19b94:	mov	r0, #0
   19b98:	bl	10f7c <dcgettext@plt>
   19b9c:	ldr	r3, [r4, #28]
   19ba0:	mov	r1, #1
   19ba4:	str	r3, [sp, #24]
   19ba8:	ldr	r3, [r4, #24]
   19bac:	str	r3, [sp, #20]
   19bb0:	ldr	r3, [r4, #20]
   19bb4:	str	r3, [sp, #16]
   19bb8:	ldr	r3, [r4, #16]
   19bbc:	str	r3, [sp, #12]
   19bc0:	ldr	r3, [r4, #12]
   19bc4:	str	r3, [sp, #8]
   19bc8:	ldr	r3, [r4, #8]
   19bcc:	str	r3, [sp, #4]
   19bd0:	ldr	r3, [r4, #4]
   19bd4:	str	r3, [sp]
   19bd8:	ldr	r3, [r4]
   19bdc:	mov	r2, r0
   19be0:	mov	r0, r5
   19be4:	bl	110e4 <__fprintf_chk@plt>
   19be8:	b	19a94 <__assert_fail@plt+0x88d8>
   19bec:	ldr	r1, [pc, #168]	; 19c9c <__assert_fail@plt+0x8ae0>
   19bf0:	mov	r2, #5
   19bf4:	mov	r0, #0
   19bf8:	bl	10f7c <dcgettext@plt>
   19bfc:	ldr	r3, [r4, #32]
   19c00:	mov	r1, #1
   19c04:	str	r3, [sp, #28]
   19c08:	ldr	r3, [r4, #28]
   19c0c:	str	r3, [sp, #24]
   19c10:	ldr	r3, [r4, #24]
   19c14:	str	r3, [sp, #20]
   19c18:	ldr	r3, [r4, #20]
   19c1c:	str	r3, [sp, #16]
   19c20:	ldr	r3, [r4, #16]
   19c24:	str	r3, [sp, #12]
   19c28:	ldr	r3, [r4, #12]
   19c2c:	str	r3, [sp, #8]
   19c30:	ldr	r3, [r4, #8]
   19c34:	str	r3, [sp, #4]
   19c38:	ldr	r3, [r4, #4]
   19c3c:	str	r3, [sp]
   19c40:	ldr	r3, [r4]
   19c44:	mov	r2, r0
   19c48:	mov	r0, r5
   19c4c:	bl	110e4 <__fprintf_chk@plt>
   19c50:	b	19a94 <__assert_fail@plt+0x88d8>
   19c54:	mov	r2, #5
   19c58:	ldr	r1, [pc, #64]	; 19ca0 <__assert_fail@plt+0x8ae4>
   19c5c:	b	19bf4 <__assert_fail@plt+0x8a38>
   19c60:	andeq	ip, r1, r5, ror r2
   19c64:	andeq	ip, r1, r8, lsl #5
   19c68:	andeq	r0, r0, r6, ror #15
   19c6c:	andeq	ip, r1, r6, asr r5
   19c70:	andeq	ip, r1, ip, lsl #5
   19c74:	andeq	ip, r1, r7, lsr r3
   19c78:	andeq	ip, r1, r1, lsl #5
   19c7c:	andeq	ip, r1, r9, asr r3
   19c80:	andeq	ip, r1, r9, ror #6
   19c84:	andeq	ip, r1, r0, lsl #7
   19c88:	muleq	r1, ip, r3
   19c8c:			; <UNDEFINED> instruction: 0x0001c3bc
   19c90:	andeq	ip, r1, r0, ror #7
   19c94:	andeq	ip, r1, r8, lsl #8
   19c98:	andeq	ip, r1, r4, lsr r4
   19c9c:	andeq	ip, r1, r4, ror #8
   19ca0:	muleq	r1, r8, r4
   19ca4:	push	{r0, r1, r4, lr}
   19ca8:	mov	ip, #0
   19cac:	ldr	lr, [sp, #16]
   19cb0:	ldr	r4, [lr, ip, lsl #2]
   19cb4:	cmp	r4, #0
   19cb8:	bne	19cd0 <__assert_fail@plt+0x8b14>
   19cbc:	str	ip, [sp, #4]
   19cc0:	str	lr, [sp]
   19cc4:	bl	198d8 <__assert_fail@plt+0x871c>
   19cc8:	add	sp, sp, #8
   19ccc:	pop	{r4, pc}
   19cd0:	add	ip, ip, #1
   19cd4:	b	19cb0 <__assert_fail@plt+0x8af4>
   19cd8:	push	{r4, r5, lr}
   19cdc:	sub	sp, sp, #52	; 0x34
   19ce0:	mov	ip, #0
   19ce4:	ldr	r5, [sp, #64]	; 0x40
   19ce8:	add	lr, sp, #8
   19cec:	ldr	r4, [r5, ip, lsl #2]
   19cf0:	cmp	r4, #0
   19cf4:	str	r4, [lr, ip, lsl #2]
   19cf8:	beq	19d08 <__assert_fail@plt+0x8b4c>
   19cfc:	add	ip, ip, #1
   19d00:	cmp	ip, #10
   19d04:	bne	19cec <__assert_fail@plt+0x8b30>
   19d08:	str	ip, [sp, #4]
   19d0c:	str	lr, [sp]
   19d10:	bl	198d8 <__assert_fail@plt+0x871c>
   19d14:	add	sp, sp, #52	; 0x34
   19d18:	pop	{r4, r5, pc}
   19d1c:	push	{r3}		; (str r3, [sp, #-4]!)
   19d20:	push	{r0, r1, r2, r3, lr}
   19d24:	add	r3, sp, #24
   19d28:	str	r3, [sp, #12]
   19d2c:	str	r3, [sp]
   19d30:	ldr	r3, [sp, #20]
   19d34:	bl	19cd8 <__assert_fail@plt+0x8b1c>
   19d38:	add	sp, sp, #16
   19d3c:	pop	{lr}		; (ldr lr, [sp], #4)
   19d40:	add	sp, sp, #4
   19d44:	bx	lr
   19d48:	ldr	r3, [pc, #116]	; 19dc4 <__assert_fail@plt+0x8c08>
   19d4c:	push	{r4, lr}
   19d50:	mov	r0, #10
   19d54:	ldr	r1, [r3]
   19d58:	bl	10f70 <fputc_unlocked@plt>
   19d5c:	mov	r2, #5
   19d60:	ldr	r1, [pc, #96]	; 19dc8 <__assert_fail@plt+0x8c0c>
   19d64:	mov	r0, #0
   19d68:	bl	10f7c <dcgettext@plt>
   19d6c:	ldr	r2, [pc, #88]	; 19dcc <__assert_fail@plt+0x8c10>
   19d70:	mov	r1, r0
   19d74:	mov	r0, #1
   19d78:	bl	110c0 <__printf_chk@plt>
   19d7c:	mov	r2, #5
   19d80:	ldr	r1, [pc, #72]	; 19dd0 <__assert_fail@plt+0x8c14>
   19d84:	mov	r0, #0
   19d88:	bl	10f7c <dcgettext@plt>
   19d8c:	ldr	r3, [pc, #64]	; 19dd4 <__assert_fail@plt+0x8c18>
   19d90:	ldr	r2, [pc, #64]	; 19dd8 <__assert_fail@plt+0x8c1c>
   19d94:	mov	r1, r0
   19d98:	mov	r0, #1
   19d9c:	bl	110c0 <__printf_chk@plt>
   19da0:	mov	r2, #5
   19da4:	ldr	r1, [pc, #48]	; 19ddc <__assert_fail@plt+0x8c20>
   19da8:	mov	r0, #0
   19dac:	bl	10f7c <dcgettext@plt>
   19db0:	ldr	r2, [pc, #40]	; 19de0 <__assert_fail@plt+0x8c24>
   19db4:	pop	{r4, lr}
   19db8:	mov	r1, r0
   19dbc:	mov	r0, #1
   19dc0:	b	110c0 <__printf_chk@plt>
   19dc4:	andeq	sp, r2, r4, lsl #3
   19dc8:	ldrdeq	ip, [r1], -r4
   19dcc:	andeq	ip, r1, r8, ror #9
   19dd0:	strdeq	ip, [r1], -lr
   19dd4:	ldrdeq	fp, [r1], -sl
   19dd8:	andeq	fp, r1, r2, lsl #22
   19ddc:	andeq	ip, r1, r2, lsl r5
   19de0:	andeq	ip, r1, r9, lsr r5
   19de4:	push	{r4, lr}
   19de8:	bl	1a838 <__assert_fail@plt+0x967c>
   19dec:	cmp	r0, #0
   19df0:	popne	{r4, pc}
   19df4:	bl	1a278 <__assert_fail@plt+0x90bc>
   19df8:	push	{r4, lr}
   19dfc:	bl	1a838 <__assert_fail@plt+0x967c>
   19e00:	cmp	r0, #0
   19e04:	popne	{r4, pc}
   19e08:	bl	1a278 <__assert_fail@plt+0x90bc>
   19e0c:	b	19de4 <__assert_fail@plt+0x8c28>
   19e10:	push	{r4, r5, r6, lr}
   19e14:	mov	r5, r0
   19e18:	mov	r4, r1
   19e1c:	bl	1a878 <__assert_fail@plt+0x96bc>
   19e20:	cmp	r0, #0
   19e24:	popne	{r4, r5, r6, pc}
   19e28:	adds	r4, r4, #0
   19e2c:	movne	r4, #1
   19e30:	cmp	r5, #0
   19e34:	orreq	r4, r4, #1
   19e38:	cmp	r4, #0
   19e3c:	popeq	{r4, r5, r6, pc}
   19e40:	bl	1a278 <__assert_fail@plt+0x90bc>
   19e44:	push	{r4, lr}
   19e48:	cmp	r1, #0
   19e4c:	orreq	r1, r1, #1
   19e50:	bl	1a878 <__assert_fail@plt+0x96bc>
   19e54:	cmp	r0, #0
   19e58:	popne	{r4, pc}
   19e5c:	bl	1a278 <__assert_fail@plt+0x90bc>
   19e60:	push	{r4, r5, r6, lr}
   19e64:	mov	r6, r0
   19e68:	mov	r5, r1
   19e6c:	mov	r4, r2
   19e70:	bl	1ab8c <__assert_fail@plt+0x99d0>
   19e74:	cmp	r0, #0
   19e78:	popne	{r4, r5, r6, pc}
   19e7c:	cmp	r6, #0
   19e80:	beq	19e90 <__assert_fail@plt+0x8cd4>
   19e84:	cmp	r5, #0
   19e88:	cmpne	r4, #0
   19e8c:	popeq	{r4, r5, r6, pc}
   19e90:	bl	1a278 <__assert_fail@plt+0x90bc>
   19e94:	b	19e60 <__assert_fail@plt+0x8ca4>
   19e98:	cmp	r2, #0
   19e9c:	cmpne	r1, #0
   19ea0:	moveq	r2, #1
   19ea4:	moveq	r1, r2
   19ea8:	push	{r4, lr}
   19eac:	bl	1ab8c <__assert_fail@plt+0x99d0>
   19eb0:	cmp	r0, #0
   19eb4:	popne	{r4, pc}
   19eb8:	bl	1a278 <__assert_fail@plt+0x90bc>
   19ebc:	mov	r2, r1
   19ec0:	mov	r1, r0
   19ec4:	mov	r0, #0
   19ec8:	b	19e60 <__assert_fail@plt+0x8ca4>
   19ecc:	mov	r2, r1
   19ed0:	mov	r1, r0
   19ed4:	mov	r0, #0
   19ed8:	b	19e98 <__assert_fail@plt+0x8cdc>
   19edc:	push	{r4, r5, r6, r7, r8, lr}
   19ee0:	subs	r7, r0, #0
   19ee4:	mov	r5, r1
   19ee8:	mov	r6, r2
   19eec:	ldr	r4, [r1]
   19ef0:	bne	19f2c <__assert_fail@plt+0x8d70>
   19ef4:	cmp	r4, #0
   19ef8:	bne	19f14 <__assert_fail@plt+0x8d58>
   19efc:	mov	r1, r2
   19f00:	mov	r0, #64	; 0x40
   19f04:	bl	1acb8 <__assert_fail@plt+0x9afc>
   19f08:	cmp	r0, #0
   19f0c:	movne	r4, r0
   19f10:	addeq	r4, r0, #1
   19f14:	mov	r2, r6
   19f18:	mov	r1, r4
   19f1c:	mov	r0, r7
   19f20:	bl	19e60 <__assert_fail@plt+0x8ca4>
   19f24:	str	r4, [r5]
   19f28:	pop	{r4, r5, r6, r7, r8, pc}
   19f2c:	lsr	r2, r4, #1
   19f30:	add	r3, r2, #1
   19f34:	mvn	r3, r3
   19f38:	cmp	r4, r3
   19f3c:	addls	r4, r4, #1
   19f40:	addls	r4, r4, r2
   19f44:	bls	19f14 <__assert_fail@plt+0x8d58>
   19f48:	bl	1a278 <__assert_fail@plt+0x90bc>
   19f4c:	mov	r2, #1
   19f50:	b	19edc <__assert_fail@plt+0x8d20>
   19f54:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f58:	mov	sl, r0
   19f5c:	ldr	r8, [r1]
   19f60:	mov	fp, r1
   19f64:	mov	r5, r2
   19f68:	asrs	r4, r8, #1
   19f6c:	mov	r9, r3
   19f70:	ldr	r7, [sp, #48]	; 0x30
   19f74:	bpl	1a010 <__assert_fail@plt+0x8e54>
   19f78:	rsb	r2, r4, #-2147483648	; 0x80000000
   19f7c:	cmp	r8, r2
   19f80:	movge	r2, #0
   19f84:	movlt	r2, #1
   19f88:	mvn	r3, r9
   19f8c:	cmp	r2, #0
   19f90:	lsr	r3, r3, #31
   19f94:	addeq	r4, r4, r8
   19f98:	mvnne	r4, #-2147483648	; 0x80000000
   19f9c:	mov	r0, r3
   19fa0:	cmp	r9, r4
   19fa4:	movge	r0, #0
   19fa8:	andlt	r0, r0, #1
   19fac:	cmp	r0, #0
   19fb0:	str	r3, [sp, #4]
   19fb4:	bne	1a184 <__assert_fail@plt+0x8fc8>
   19fb8:	cmp	r7, #0
   19fbc:	bge	1a0d0 <__assert_fail@plt+0x8f14>
   19fc0:	cmp	r4, #0
   19fc4:	bge	1a028 <__assert_fail@plt+0x8e6c>
   19fc8:	mov	r1, r7
   19fcc:	mvn	r0, #-2147483648	; 0x80000000
   19fd0:	bl	1aec4 <__assert_fail@plt+0x9d08>
   19fd4:	cmp	r0, r4
   19fd8:	movle	r0, #0
   19fdc:	movgt	r0, #1
   19fe0:	cmp	r0, #0
   19fe4:	mvnne	r6, #-2147483648	; 0x80000000
   19fe8:	beq	1a038 <__assert_fail@plt+0x8e7c>
   19fec:	mov	r1, r7
   19ff0:	mov	r0, r6
   19ff4:	bl	1aec4 <__assert_fail@plt+0x9d08>
   19ff8:	mov	r1, r7
   19ffc:	mov	r4, r0
   1a000:	mov	r0, r6
   1a004:	bl	1b0e4 <__assert_fail@plt+0x9f28>
   1a008:	sub	r1, r6, r1
   1a00c:	b	1a048 <__assert_fail@plt+0x8e8c>
   1a010:	mvn	r2, #-2147483648	; 0x80000000
   1a014:	sub	r2, r2, r4
   1a018:	cmp	r8, r2
   1a01c:	movle	r2, #0
   1a020:	movgt	r2, #1
   1a024:	b	19f88 <__assert_fail@plt+0x8dcc>
   1a028:	cmn	r7, #1
   1a02c:	movne	r1, r7
   1a030:	movne	r0, #-2147483648	; 0x80000000
   1a034:	bne	1a19c <__assert_fail@plt+0x8fe0>
   1a038:	mul	r1, r7, r4
   1a03c:	cmp	r1, #63	; 0x3f
   1a040:	movle	r6, #64	; 0x40
   1a044:	ble	19fec <__assert_fail@plt+0x8e30>
   1a048:	cmp	sl, #0
   1a04c:	sub	r2, r4, r8
   1a050:	streq	sl, [fp]
   1a054:	cmp	r2, r5
   1a058:	bge	1a12c <__assert_fail@plt+0x8f70>
   1a05c:	cmp	r5, #0
   1a060:	bge	1a0f8 <__assert_fail@plt+0x8f3c>
   1a064:	rsb	r2, r5, #-2147483648	; 0x80000000
   1a068:	cmp	r8, r2
   1a06c:	movge	r2, #0
   1a070:	movlt	r2, #1
   1a074:	cmp	r2, #0
   1a078:	bne	1a0cc <__assert_fail@plt+0x8f10>
   1a07c:	ldr	r0, [sp, #4]
   1a080:	add	r5, r8, r5
   1a084:	cmp	r9, r5
   1a088:	movge	r0, #0
   1a08c:	andlt	r0, r0, #1
   1a090:	cmp	r0, #0
   1a094:	mov	r4, r5
   1a098:	bne	1a0cc <__assert_fail@plt+0x8f10>
   1a09c:	cmp	r7, #0
   1a0a0:	bge	1a140 <__assert_fail@plt+0x8f84>
   1a0a4:	cmp	r5, #0
   1a0a8:	bge	1a118 <__assert_fail@plt+0x8f5c>
   1a0ac:	mov	r1, r7
   1a0b0:	mvn	r0, #-2147483648	; 0x80000000
   1a0b4:	bl	1aec4 <__assert_fail@plt+0x9d08>
   1a0b8:	cmp	r5, r0
   1a0bc:	movge	r0, #0
   1a0c0:	movlt	r0, #1
   1a0c4:	cmp	r0, #0
   1a0c8:	beq	1a128 <__assert_fail@plt+0x8f6c>
   1a0cc:	bl	1a278 <__assert_fail@plt+0x90bc>
   1a0d0:	beq	1a038 <__assert_fail@plt+0x8e7c>
   1a0d4:	cmp	r4, #0
   1a0d8:	bge	1a194 <__assert_fail@plt+0x8fd8>
   1a0dc:	cmn	r4, #1
   1a0e0:	beq	1a038 <__assert_fail@plt+0x8e7c>
   1a0e4:	mov	r1, r4
   1a0e8:	mov	r0, #-2147483648	; 0x80000000
   1a0ec:	bl	1aec4 <__assert_fail@plt+0x9d08>
   1a0f0:	cmp	r7, r0
   1a0f4:	b	19fd8 <__assert_fail@plt+0x8e1c>
   1a0f8:	cmp	r8, #0
   1a0fc:	blt	1a07c <__assert_fail@plt+0x8ec0>
   1a100:	mvn	r2, #-2147483648	; 0x80000000
   1a104:	sub	r2, r2, r5
   1a108:	cmp	r8, r2
   1a10c:	movle	r2, #0
   1a110:	movgt	r2, #1
   1a114:	b	1a074 <__assert_fail@plt+0x8eb8>
   1a118:	cmn	r7, #1
   1a11c:	movne	r1, r7
   1a120:	movne	r0, #-2147483648	; 0x80000000
   1a124:	bne	1a178 <__assert_fail@plt+0x8fbc>
   1a128:	mul	r1, r5, r7
   1a12c:	mov	r0, sl
   1a130:	bl	19e10 <__assert_fail@plt+0x8c54>
   1a134:	str	r4, [fp]
   1a138:	add	sp, sp, #12
   1a13c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a140:	beq	1a128 <__assert_fail@plt+0x8f6c>
   1a144:	cmp	r5, #0
   1a148:	movge	r1, r7
   1a14c:	mvnge	r0, #-2147483648	; 0x80000000
   1a150:	bge	1a178 <__assert_fail@plt+0x8fbc>
   1a154:	cmn	r5, #1
   1a158:	beq	1a128 <__assert_fail@plt+0x8f6c>
   1a15c:	mov	r1, r5
   1a160:	mov	r0, #-2147483648	; 0x80000000
   1a164:	bl	1aec4 <__assert_fail@plt+0x9d08>
   1a168:	cmp	r7, r0
   1a16c:	movle	r0, #0
   1a170:	movgt	r0, #1
   1a174:	b	1a0c4 <__assert_fail@plt+0x8f08>
   1a178:	bl	1aec4 <__assert_fail@plt+0x9d08>
   1a17c:	cmp	r5, r0
   1a180:	b	1a16c <__assert_fail@plt+0x8fb0>
   1a184:	cmp	r7, #0
   1a188:	mov	r4, r9
   1a18c:	blt	1a028 <__assert_fail@plt+0x8e6c>
   1a190:	beq	1a038 <__assert_fail@plt+0x8e7c>
   1a194:	mov	r1, r7
   1a198:	mvn	r0, #-2147483648	; 0x80000000
   1a19c:	bl	1aec4 <__assert_fail@plt+0x9d08>
   1a1a0:	cmp	r0, r4
   1a1a4:	movge	r0, #0
   1a1a8:	movlt	r0, #1
   1a1ac:	b	19fe0 <__assert_fail@plt+0x8e24>
   1a1b0:	push	{r4, lr}
   1a1b4:	bl	1a7f0 <__assert_fail@plt+0x9634>
   1a1b8:	cmp	r0, #0
   1a1bc:	popne	{r4, pc}
   1a1c0:	bl	1a278 <__assert_fail@plt+0x90bc>
   1a1c4:	mov	r1, #1
   1a1c8:	b	1a1b0 <__assert_fail@plt+0x8ff4>
   1a1cc:	push	{r4, lr}
   1a1d0:	bl	1a7f0 <__assert_fail@plt+0x9634>
   1a1d4:	cmp	r0, #0
   1a1d8:	popne	{r4, pc}
   1a1dc:	bl	1a278 <__assert_fail@plt+0x90bc>
   1a1e0:	mov	r1, #1
   1a1e4:	b	1a1cc <__assert_fail@plt+0x9010>
   1a1e8:	push	{r4, r5, r6, lr}
   1a1ec:	mov	r4, r1
   1a1f0:	mov	r5, r0
   1a1f4:	mov	r0, r1
   1a1f8:	bl	19de4 <__assert_fail@plt+0x8c28>
   1a1fc:	mov	r2, r4
   1a200:	mov	r1, r5
   1a204:	pop	{r4, r5, r6, lr}
   1a208:	b	10f4c <memcpy@plt>
   1a20c:	push	{r4, r5, r6, lr}
   1a210:	mov	r4, r1
   1a214:	mov	r5, r0
   1a218:	mov	r0, r1
   1a21c:	bl	19df8 <__assert_fail@plt+0x8c3c>
   1a220:	mov	r2, r4
   1a224:	mov	r1, r5
   1a228:	pop	{r4, r5, r6, lr}
   1a22c:	b	10f4c <memcpy@plt>
   1a230:	push	{r4, r5, r6, lr}
   1a234:	mov	r5, r0
   1a238:	add	r0, r1, #1
   1a23c:	mov	r4, r1
   1a240:	bl	19df8 <__assert_fail@plt+0x8c3c>
   1a244:	mov	r2, #0
   1a248:	mov	r1, r5
   1a24c:	strb	r2, [r0, r4]
   1a250:	mov	r2, r4
   1a254:	pop	{r4, r5, r6, lr}
   1a258:	b	10f4c <memcpy@plt>
   1a25c:	push	{r4, lr}
   1a260:	mov	r4, r0
   1a264:	bl	11078 <strlen@plt>
   1a268:	add	r1, r0, #1
   1a26c:	mov	r0, r4
   1a270:	pop	{r4, lr}
   1a274:	b	1a1e8 <__assert_fail@plt+0x902c>
   1a278:	ldr	r3, [pc, #44]	; 1a2ac <__assert_fail@plt+0x90f0>
   1a27c:	push	{r4, lr}
   1a280:	mov	r2, #5
   1a284:	ldr	r1, [pc, #36]	; 1a2b0 <__assert_fail@plt+0x90f4>
   1a288:	mov	r0, #0
   1a28c:	ldr	r4, [r3]
   1a290:	bl	10f7c <dcgettext@plt>
   1a294:	ldr	r2, [pc, #24]	; 1a2b4 <__assert_fail@plt+0x90f8>
   1a298:	mov	r1, #0
   1a29c:	mov	r3, r0
   1a2a0:	mov	r0, r4
   1a2a4:	bl	11000 <error@plt>
   1a2a8:	bl	11180 <abort@plt>
   1a2ac:	andeq	sp, r2, r4, lsr #2
   1a2b0:	andeq	ip, r1, r5, lsl #11
   1a2b4:	andeq	fp, r1, r0, ror #23
   1a2b8:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   1a2bc:	mov	r9, r3
   1a2c0:	ldr	r3, [sp, #48]	; 0x30
   1a2c4:	mov	r8, r2
   1a2c8:	str	r3, [sp]
   1a2cc:	mov	r2, r1
   1a2d0:	add	r3, sp, #8
   1a2d4:	mov	r1, #0
   1a2d8:	mov	r6, r0
   1a2dc:	ldr	r4, [sp, #56]	; 0x38
   1a2e0:	bl	1a4c4 <__assert_fail@plt+0x9308>
   1a2e4:	cmp	r0, #0
   1a2e8:	bne	1a35c <__assert_fail@plt+0x91a0>
   1a2ec:	ldrd	r0, [sp, #8]
   1a2f0:	ldrd	r2, [sp, #40]	; 0x28
   1a2f4:	cmp	r1, r9
   1a2f8:	cmpeq	r0, r8
   1a2fc:	movcc	ip, #1
   1a300:	movcs	ip, #0
   1a304:	cmp	r1, r3
   1a308:	cmpeq	r0, r2
   1a30c:	movls	r3, ip
   1a310:	orrhi	r3, ip, #1
   1a314:	cmp	r3, #0
   1a318:	beq	1a3d8 <__assert_fail@plt+0x921c>
   1a31c:	mov	r3, #0
   1a320:	mvn	r2, #-1073741824	; 0xc0000000
   1a324:	cmp	r1, r3
   1a328:	cmpeq	r0, r2
   1a32c:	bls	1a350 <__assert_fail@plt+0x9194>
   1a330:	bl	11090 <__errno_location@plt>
   1a334:	mov	r3, #75	; 0x4b
   1a338:	cmp	r4, #0
   1a33c:	str	r3, [r0]
   1a340:	beq	1a3a4 <__assert_fail@plt+0x91e8>
   1a344:	bl	11090 <__errno_location@plt>
   1a348:	ldr	r5, [r0]
   1a34c:	b	1a3b8 <__assert_fail@plt+0x91fc>
   1a350:	bl	11090 <__errno_location@plt>
   1a354:	mov	r3, #34	; 0x22
   1a358:	b	1a338 <__assert_fail@plt+0x917c>
   1a35c:	cmp	r0, #1
   1a360:	bne	1a388 <__assert_fail@plt+0x91cc>
   1a364:	bl	11090 <__errno_location@plt>
   1a368:	mov	r3, #75	; 0x4b
   1a36c:	cmp	r4, #0
   1a370:	str	r3, [r0]
   1a374:	bne	1a3a8 <__assert_fail@plt+0x91ec>
   1a378:	bl	11090 <__errno_location@plt>
   1a37c:	mov	r4, #1
   1a380:	ldr	r5, [r0]
   1a384:	b	1a3b8 <__assert_fail@plt+0x91fc>
   1a388:	cmp	r0, #3
   1a38c:	bne	1a39c <__assert_fail@plt+0x91e0>
   1a390:	bl	11090 <__errno_location@plt>
   1a394:	mov	r3, #0
   1a398:	b	1a36c <__assert_fail@plt+0x91b0>
   1a39c:	cmp	r4, #0
   1a3a0:	bne	1a3a8 <__assert_fail@plt+0x91ec>
   1a3a4:	mov	r4, #1
   1a3a8:	bl	11090 <__errno_location@plt>
   1a3ac:	ldr	r5, [r0]
   1a3b0:	cmp	r5, #22
   1a3b4:	moveq	r5, #0
   1a3b8:	mov	r0, r6
   1a3bc:	bl	198c0 <__assert_fail@plt+0x8704>
   1a3c0:	ldr	r3, [sp, #52]	; 0x34
   1a3c4:	ldr	r2, [pc, #20]	; 1a3e0 <__assert_fail@plt+0x9224>
   1a3c8:	mov	r1, r5
   1a3cc:	str	r0, [sp]
   1a3d0:	mov	r0, r4
   1a3d4:	bl	11000 <error@plt>
   1a3d8:	add	sp, sp, #16
   1a3dc:	pop	{r4, r5, r6, r8, r9, pc}
   1a3e0:	andeq	ip, r1, r3, ror r1
   1a3e4:	push	{r4, r5}
   1a3e8:	mov	r1, #10
   1a3ec:	pop	{r4, r5}
   1a3f0:	b	1a2b8 <__assert_fail@plt+0x90fc>
   1a3f4:	push	{r4, r5, r6, lr}
   1a3f8:	subs	r5, r1, #0
   1a3fc:	mov	r4, r0
   1a400:	bge	1a440 <__assert_fail@plt+0x9284>
   1a404:	ldm	r0, {r0, r3}
   1a408:	orr	r0, r0, r3
   1a40c:	adds	r0, r0, #0
   1a410:	movne	r0, #1
   1a414:	cmp	r0, #0
   1a418:	bne	1a474 <__assert_fail@plt+0x92b8>
   1a41c:	ldr	r2, [r4]
   1a420:	asr	r3, r5, #31
   1a424:	ldr	r1, [r4, #4]
   1a428:	mul	r3, r3, r2
   1a42c:	mla	r1, r5, r1, r3
   1a430:	umull	r2, r3, r2, r5
   1a434:	add	r3, r1, r3
   1a438:	strd	r2, [r4]
   1a43c:	pop	{r4, r5, r6, pc}
   1a440:	moveq	r0, r5
   1a444:	beq	1a414 <__assert_fail@plt+0x9258>
   1a448:	mov	r2, r5
   1a44c:	asr	r3, r5, #31
   1a450:	mvn	r0, #0
   1a454:	mvn	r1, #0
   1a458:	bl	1b104 <__assert_fail@plt+0x9f48>
   1a45c:	ldrd	r2, [r4]
   1a460:	cmp	r1, r3
   1a464:	cmpeq	r0, r2
   1a468:	movcc	r0, #1
   1a46c:	movcs	r0, #0
   1a470:	b	1a414 <__assert_fail@plt+0x9258>
   1a474:	mvn	r2, #0
   1a478:	mvn	r3, #0
   1a47c:	mov	r0, #1
   1a480:	strd	r2, [r4]
   1a484:	pop	{r4, r5, r6, pc}
   1a488:	push	{r4, r5, r6, r7, r8, lr}
   1a48c:	mov	r6, r0
   1a490:	mov	r7, r1
   1a494:	mov	r5, r2
   1a498:	mov	r4, #0
   1a49c:	cmp	r5, #0
   1a4a0:	bne	1a4ac <__assert_fail@plt+0x92f0>
   1a4a4:	mov	r0, r4
   1a4a8:	pop	{r4, r5, r6, r7, r8, pc}
   1a4ac:	mov	r1, r7
   1a4b0:	mov	r0, r6
   1a4b4:	bl	1a3f4 <__assert_fail@plt+0x9238>
   1a4b8:	sub	r5, r5, #1
   1a4bc:	orr	r4, r4, r0
   1a4c0:	b	1a49c <__assert_fail@plt+0x92e0>
   1a4c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4c8:	sub	sp, sp, #20
   1a4cc:	cmp	r2, #36	; 0x24
   1a4d0:	ldr	r9, [sp, #56]	; 0x38
   1a4d4:	bls	1a4ec <__assert_fail@plt+0x9330>
   1a4d8:	ldr	r3, [pc, #772]	; 1a7e4 <__assert_fail@plt+0x9628>
   1a4dc:	mov	r2, #85	; 0x55
   1a4e0:	ldr	r1, [pc, #768]	; 1a7e8 <__assert_fail@plt+0x962c>
   1a4e4:	ldr	r0, [pc, #768]	; 1a7ec <__assert_fail@plt+0x9630>
   1a4e8:	bl	111bc <__assert_fail@plt>
   1a4ec:	cmp	r1, #0
   1a4f0:	mov	r7, r1
   1a4f4:	mov	r4, r0
   1a4f8:	mov	fp, r2
   1a4fc:	mov	r8, r3
   1a500:	addeq	r7, sp, #4
   1a504:	bl	11090 <__errno_location@plt>
   1a508:	mov	r3, #0
   1a50c:	str	r3, [r0]
   1a510:	mov	sl, r0
   1a514:	bl	11054 <__ctype_b_loc@plt>
   1a518:	ldrb	r6, [r4]
   1a51c:	mov	r3, r4
   1a520:	ldr	r1, [r0]
   1a524:	lsl	r2, r6, #1
   1a528:	ldrh	r5, [r1, r2]
   1a52c:	ands	r5, r5, #8192	; 0x2000
   1a530:	bne	1a54c <__assert_fail@plt+0x9390>
   1a534:	cmp	r6, #45	; 0x2d
   1a538:	bne	1a554 <__assert_fail@plt+0x9398>
   1a53c:	mov	r5, #4
   1a540:	mov	r0, r5
   1a544:	add	sp, sp, #20
   1a548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a54c:	ldrb	r6, [r3, #1]!
   1a550:	b	1a524 <__assert_fail@plt+0x9368>
   1a554:	mov	r2, fp
   1a558:	mov	r1, r7
   1a55c:	mov	r0, r4
   1a560:	bl	110d8 <strtoumax@plt>
   1a564:	ldr	r6, [r7]
   1a568:	cmp	r4, r6
   1a56c:	strd	r0, [sp, #8]
   1a570:	bne	1a5d4 <__assert_fail@plt+0x9418>
   1a574:	cmp	r9, #0
   1a578:	beq	1a53c <__assert_fail@plt+0x9380>
   1a57c:	ldrb	r1, [r6]
   1a580:	cmp	r1, #0
   1a584:	beq	1a53c <__assert_fail@plt+0x9380>
   1a588:	mov	r0, r9
   1a58c:	bl	11084 <strchr@plt>
   1a590:	cmp	r0, #0
   1a594:	beq	1a53c <__assert_fail@plt+0x9380>
   1a598:	mov	r2, #1
   1a59c:	mov	r3, #0
   1a5a0:	strd	r2, [sp, #8]
   1a5a4:	ldrb	r4, [r6]
   1a5a8:	cmp	r4, #0
   1a5ac:	beq	1a6e4 <__assert_fail@plt+0x9528>
   1a5b0:	mov	r1, r4
   1a5b4:	mov	r0, r9
   1a5b8:	bl	11084 <strchr@plt>
   1a5bc:	cmp	r0, #0
   1a5c0:	bne	1a5fc <__assert_fail@plt+0x9440>
   1a5c4:	ldrd	r2, [sp, #8]
   1a5c8:	orr	r5, r5, #2
   1a5cc:	strd	r2, [r8]
   1a5d0:	b	1a540 <__assert_fail@plt+0x9384>
   1a5d4:	ldr	r5, [sl]
   1a5d8:	cmp	r5, #0
   1a5dc:	beq	1a5ec <__assert_fail@plt+0x9430>
   1a5e0:	cmp	r5, #34	; 0x22
   1a5e4:	bne	1a53c <__assert_fail@plt+0x9380>
   1a5e8:	mov	r5, #1
   1a5ec:	cmp	r9, #0
   1a5f0:	bne	1a5a4 <__assert_fail@plt+0x93e8>
   1a5f4:	strd	r0, [r8]
   1a5f8:	b	1a540 <__assert_fail@plt+0x9384>
   1a5fc:	cmp	r4, #84	; 0x54
   1a600:	beq	1a654 <__assert_fail@plt+0x9498>
   1a604:	bhi	1a63c <__assert_fail@plt+0x9480>
   1a608:	cmp	r4, #75	; 0x4b
   1a60c:	beq	1a654 <__assert_fail@plt+0x9498>
   1a610:	bhi	1a62c <__assert_fail@plt+0x9470>
   1a614:	cmp	r4, #69	; 0x45
   1a618:	beq	1a654 <__assert_fail@plt+0x9498>
   1a61c:	cmp	r4, #71	; 0x47
   1a620:	beq	1a654 <__assert_fail@plt+0x9498>
   1a624:	mov	r6, #1
   1a628:	b	1a718 <__assert_fail@plt+0x955c>
   1a62c:	cmp	r4, #77	; 0x4d
   1a630:	beq	1a654 <__assert_fail@plt+0x9498>
   1a634:	cmp	r4, #80	; 0x50
   1a638:	b	1a620 <__assert_fail@plt+0x9464>
   1a63c:	cmp	r4, #103	; 0x67
   1a640:	beq	1a654 <__assert_fail@plt+0x9498>
   1a644:	bhi	1a6f0 <__assert_fail@plt+0x9534>
   1a648:	sub	r3, r4, #89	; 0x59
   1a64c:	cmp	r3, #1
   1a650:	bhi	1a624 <__assert_fail@plt+0x9468>
   1a654:	mov	r1, #48	; 0x30
   1a658:	mov	r0, r9
   1a65c:	bl	11084 <strchr@plt>
   1a660:	cmp	r0, #0
   1a664:	beq	1a624 <__assert_fail@plt+0x9468>
   1a668:	ldrb	r3, [r6, #1]
   1a66c:	cmp	r3, #68	; 0x44
   1a670:	beq	1a684 <__assert_fail@plt+0x94c8>
   1a674:	cmp	r3, #105	; 0x69
   1a678:	beq	1a708 <__assert_fail@plt+0x954c>
   1a67c:	cmp	r3, #66	; 0x42
   1a680:	bne	1a624 <__assert_fail@plt+0x9468>
   1a684:	mov	r6, #2
   1a688:	mov	r1, #1000	; 0x3e8
   1a68c:	cmp	r4, #89	; 0x59
   1a690:	beq	1a7cc <__assert_fail@plt+0x9610>
   1a694:	bhi	1a740 <__assert_fail@plt+0x9584>
   1a698:	cmp	r4, #75	; 0x4b
   1a69c:	beq	1a780 <__assert_fail@plt+0x95c4>
   1a6a0:	bhi	1a720 <__assert_fail@plt+0x9564>
   1a6a4:	cmp	r4, #69	; 0x45
   1a6a8:	beq	1a7a8 <__assert_fail@plt+0x95ec>
   1a6ac:	cmp	r4, #71	; 0x47
   1a6b0:	beq	1a7b4 <__assert_fail@plt+0x95f8>
   1a6b4:	cmp	r4, #66	; 0x42
   1a6b8:	moveq	r1, #1024	; 0x400
   1a6bc:	bne	1a5c4 <__assert_fail@plt+0x9408>
   1a6c0:	add	r0, sp, #8
   1a6c4:	bl	1a3f4 <__assert_fail@plt+0x9238>
   1a6c8:	ldr	r3, [r7]
   1a6cc:	orr	r5, r5, r0
   1a6d0:	add	r2, r3, r6
   1a6d4:	str	r2, [r7]
   1a6d8:	ldrb	r3, [r3, r6]
   1a6dc:	cmp	r3, #0
   1a6e0:	orrne	r5, r5, #2
   1a6e4:	ldrd	r2, [sp, #8]
   1a6e8:	strd	r2, [r8]
   1a6ec:	b	1a540 <__assert_fail@plt+0x9384>
   1a6f0:	cmp	r4, #109	; 0x6d
   1a6f4:	beq	1a654 <__assert_fail@plt+0x9498>
   1a6f8:	cmp	r4, #116	; 0x74
   1a6fc:	beq	1a654 <__assert_fail@plt+0x9498>
   1a700:	cmp	r4, #107	; 0x6b
   1a704:	b	1a620 <__assert_fail@plt+0x9464>
   1a708:	ldrb	r6, [r6, #2]
   1a70c:	cmp	r6, #66	; 0x42
   1a710:	movne	r6, #1
   1a714:	moveq	r6, #3
   1a718:	mov	r1, #1024	; 0x400
   1a71c:	b	1a68c <__assert_fail@plt+0x94d0>
   1a720:	cmp	r4, #80	; 0x50
   1a724:	beq	1a7bc <__assert_fail@plt+0x9600>
   1a728:	cmp	r4, #84	; 0x54
   1a72c:	beq	1a7c4 <__assert_fail@plt+0x9608>
   1a730:	cmp	r4, #77	; 0x4d
   1a734:	bne	1a5c4 <__assert_fail@plt+0x9408>
   1a738:	mov	r2, #2
   1a73c:	b	1a7ac <__assert_fail@plt+0x95f0>
   1a740:	cmp	r4, #103	; 0x67
   1a744:	beq	1a7b4 <__assert_fail@plt+0x95f8>
   1a748:	bhi	1a76c <__assert_fail@plt+0x95b0>
   1a74c:	cmp	r4, #98	; 0x62
   1a750:	beq	1a7a0 <__assert_fail@plt+0x95e4>
   1a754:	cmp	r4, #99	; 0x63
   1a758:	beq	1a7dc <__assert_fail@plt+0x9620>
   1a75c:	cmp	r4, #90	; 0x5a
   1a760:	bne	1a5c4 <__assert_fail@plt+0x9408>
   1a764:	mov	r2, #7
   1a768:	b	1a7ac <__assert_fail@plt+0x95f0>
   1a76c:	cmp	r4, #109	; 0x6d
   1a770:	beq	1a738 <__assert_fail@plt+0x957c>
   1a774:	bhi	1a788 <__assert_fail@plt+0x95cc>
   1a778:	cmp	r4, #107	; 0x6b
   1a77c:	bne	1a5c4 <__assert_fail@plt+0x9408>
   1a780:	mov	r2, #1
   1a784:	b	1a7ac <__assert_fail@plt+0x95f0>
   1a788:	cmp	r4, #116	; 0x74
   1a78c:	beq	1a7c4 <__assert_fail@plt+0x9608>
   1a790:	cmp	r4, #119	; 0x77
   1a794:	moveq	r1, #2
   1a798:	beq	1a6c0 <__assert_fail@plt+0x9504>
   1a79c:	b	1a5c4 <__assert_fail@plt+0x9408>
   1a7a0:	mov	r1, #512	; 0x200
   1a7a4:	b	1a6c0 <__assert_fail@plt+0x9504>
   1a7a8:	mov	r2, #6
   1a7ac:	add	r0, sp, #8
   1a7b0:	b	1a7d4 <__assert_fail@plt+0x9618>
   1a7b4:	mov	r2, #3
   1a7b8:	b	1a7ac <__assert_fail@plt+0x95f0>
   1a7bc:	mov	r2, #5
   1a7c0:	b	1a7ac <__assert_fail@plt+0x95f0>
   1a7c4:	mov	r2, #4
   1a7c8:	b	1a7ac <__assert_fail@plt+0x95f0>
   1a7cc:	mov	r2, #8
   1a7d0:	add	r0, sp, r2
   1a7d4:	bl	1a488 <__assert_fail@plt+0x92cc>
   1a7d8:	b	1a6c8 <__assert_fail@plt+0x950c>
   1a7dc:	mov	r0, #0
   1a7e0:	b	1a6c8 <__assert_fail@plt+0x950c>
   1a7e4:	muleq	r1, r6, r5
   1a7e8:	andeq	ip, r1, r1, lsr #11
   1a7ec:	andeq	ip, r1, pc, lsr #11
   1a7f0:	cmp	r1, #0
   1a7f4:	cmpne	r0, #0
   1a7f8:	moveq	r1, #1
   1a7fc:	moveq	r0, r1
   1a800:	umull	r2, r3, r0, r1
   1a804:	adds	r3, r3, #0
   1a808:	movne	r3, #1
   1a80c:	cmp	r2, #0
   1a810:	blt	1a820 <__assert_fail@plt+0x9664>
   1a814:	cmp	r3, #0
   1a818:	bne	1a820 <__assert_fail@plt+0x9664>
   1a81c:	b	10ee0 <calloc@plt>
   1a820:	push	{r4, lr}
   1a824:	bl	11090 <__errno_location@plt>
   1a828:	mov	r3, #12
   1a82c:	str	r3, [r0]
   1a830:	mov	r0, #0
   1a834:	pop	{r4, pc}
   1a838:	cmp	r0, #0
   1a83c:	mov	r3, #0
   1a840:	moveq	r0, #1
   1a844:	adds	r3, r3, #0
   1a848:	movne	r3, #1
   1a84c:	cmp	r0, #0
   1a850:	blt	1a860 <__assert_fail@plt+0x96a4>
   1a854:	cmp	r3, #0
   1a858:	bne	1a860 <__assert_fail@plt+0x96a4>
   1a85c:	b	1100c <malloc@plt>
   1a860:	push	{r4, lr}
   1a864:	bl	11090 <__errno_location@plt>
   1a868:	mov	r3, #12
   1a86c:	str	r3, [r0]
   1a870:	mov	r0, #0
   1a874:	pop	{r4, pc}
   1a878:	cmp	r0, #0
   1a87c:	push	{r4, lr}
   1a880:	mov	r4, r1
   1a884:	bne	1a894 <__assert_fail@plt+0x96d8>
   1a888:	mov	r0, r1
   1a88c:	pop	{r4, lr}
   1a890:	b	1a838 <__assert_fail@plt+0x967c>
   1a894:	cmp	r1, #0
   1a898:	bne	1a8a8 <__assert_fail@plt+0x96ec>
   1a89c:	bl	181a8 <__assert_fail@plt+0x6fec>
   1a8a0:	mov	r0, #0
   1a8a4:	pop	{r4, pc}
   1a8a8:	cmp	r1, #0
   1a8ac:	blt	1a8bc <__assert_fail@plt+0x9700>
   1a8b0:	mov	r3, #0
   1a8b4:	cmp	r3, r3
   1a8b8:	beq	1a8cc <__assert_fail@plt+0x9710>
   1a8bc:	bl	11090 <__errno_location@plt>
   1a8c0:	mov	r3, #12
   1a8c4:	str	r3, [r0]
   1a8c8:	b	1a8a0 <__assert_fail@plt+0x96e4>
   1a8cc:	pop	{r4, lr}
   1a8d0:	b	10f88 <realloc@plt>
   1a8d4:	push	{r4, r5, r6, lr}
   1a8d8:	mov	r4, r0
   1a8dc:	bl	10fdc <__fpending@plt>
   1a8e0:	mov	r5, r0
   1a8e4:	mov	r0, r4
   1a8e8:	bl	10fe8 <ferror_unlocked@plt>
   1a8ec:	mov	r6, r0
   1a8f0:	mov	r0, r4
   1a8f4:	bl	1801c <__assert_fail@plt+0x6e60>
   1a8f8:	cmp	r6, #0
   1a8fc:	mov	r4, r0
   1a900:	bne	1a92c <__assert_fail@plt+0x9770>
   1a904:	cmp	r0, #0
   1a908:	beq	1a924 <__assert_fail@plt+0x9768>
   1a90c:	cmp	r5, #0
   1a910:	bne	1a93c <__assert_fail@plt+0x9780>
   1a914:	bl	11090 <__errno_location@plt>
   1a918:	ldr	r4, [r0]
   1a91c:	subs	r4, r4, #9
   1a920:	mvnne	r4, #0
   1a924:	mov	r0, r4
   1a928:	pop	{r4, r5, r6, pc}
   1a92c:	cmp	r0, #0
   1a930:	bne	1a93c <__assert_fail@plt+0x9780>
   1a934:	bl	11090 <__errno_location@plt>
   1a938:	str	r4, [r0]
   1a93c:	mvn	r4, #0
   1a940:	b	1a924 <__assert_fail@plt+0x9768>
   1a944:	push	{r1, r2, r3}
   1a948:	push	{r0, r1, r4, r5, r6, r7, lr}
   1a94c:	add	r2, sp, #32
   1a950:	ldr	r1, [sp, #28]
   1a954:	str	r2, [sp, #4]
   1a958:	cmp	r1, #0
   1a95c:	beq	1a9a0 <__assert_fail@plt+0x97e4>
   1a960:	ldr	r3, [pc, #396]	; 1aaf4 <__assert_fail@plt+0x9938>
   1a964:	mov	r6, r0
   1a968:	cmp	r1, r3
   1a96c:	beq	1a9ac <__assert_fail@plt+0x97f0>
   1a970:	cmp	r1, #11
   1a974:	beq	1a990 <__assert_fail@plt+0x97d4>
   1a978:	bgt	1aabc <__assert_fail@plt+0x9900>
   1a97c:	cmp	r1, #3
   1a980:	beq	1a990 <__assert_fail@plt+0x97d4>
   1a984:	bgt	1aa98 <__assert_fail@plt+0x98dc>
   1a988:	cmp	r1, #1
   1a98c:	bne	1aaa4 <__assert_fail@plt+0x98e8>
   1a990:	mov	r0, r6
   1a994:	bl	11108 <fcntl64@plt>
   1a998:	mov	r4, r0
   1a99c:	b	1aa58 <__assert_fail@plt+0x989c>
   1a9a0:	ldr	r2, [sp, #32]
   1a9a4:	bl	11108 <fcntl64@plt>
   1a9a8:	b	1a998 <__assert_fail@plt+0x97dc>
   1a9ac:	ldr	r5, [pc, #324]	; 1aaf8 <__assert_fail@plt+0x993c>
   1a9b0:	add	r3, sp, #36	; 0x24
   1a9b4:	str	r3, [sp, #4]
   1a9b8:	ldr	r3, [r5]
   1a9bc:	ldr	r7, [r2]
   1a9c0:	cmp	r3, #0
   1a9c4:	mov	r2, r7
   1a9c8:	blt	1aa6c <__assert_fail@plt+0x98b0>
   1a9cc:	bl	11108 <fcntl64@plt>
   1a9d0:	subs	r4, r0, #0
   1a9d4:	bge	1a9e8 <__assert_fail@plt+0x982c>
   1a9d8:	bl	11090 <__errno_location@plt>
   1a9dc:	ldr	r3, [r0]
   1a9e0:	cmp	r3, #22
   1a9e4:	beq	1aa38 <__assert_fail@plt+0x987c>
   1a9e8:	mov	r3, #1
   1a9ec:	str	r3, [r5]
   1a9f0:	cmp	r4, #0
   1a9f4:	blt	1aa58 <__assert_fail@plt+0x989c>
   1a9f8:	ldr	r5, [r5]
   1a9fc:	cmn	r5, #1
   1aa00:	bne	1aa58 <__assert_fail@plt+0x989c>
   1aa04:	mov	r1, #1
   1aa08:	mov	r0, r4
   1aa0c:	bl	11108 <fcntl64@plt>
   1aa10:	subs	r2, r0, #0
   1aa14:	bge	1aa7c <__assert_fail@plt+0x98c0>
   1aa18:	bl	11090 <__errno_location@plt>
   1aa1c:	ldr	r7, [r0]
   1aa20:	mov	r6, r0
   1aa24:	mov	r0, r4
   1aa28:	bl	11198 <close@plt>
   1aa2c:	mov	r4, r5
   1aa30:	str	r7, [r6]
   1aa34:	b	1aa58 <__assert_fail@plt+0x989c>
   1aa38:	mov	r2, r7
   1aa3c:	mov	r1, #0
   1aa40:	mov	r0, r6
   1aa44:	bl	11108 <fcntl64@plt>
   1aa48:	subs	r4, r0, #0
   1aa4c:	mvnge	r3, #0
   1aa50:	strge	r3, [r5]
   1aa54:	bge	1a9f8 <__assert_fail@plt+0x983c>
   1aa58:	mov	r0, r4
   1aa5c:	add	sp, sp, #8
   1aa60:	pop	{r4, r5, r6, r7, lr}
   1aa64:	add	sp, sp, #12
   1aa68:	bx	lr
   1aa6c:	mov	r1, #0
   1aa70:	bl	11108 <fcntl64@plt>
   1aa74:	mov	r4, r0
   1aa78:	b	1a9f0 <__assert_fail@plt+0x9834>
   1aa7c:	orr	r2, r2, #1
   1aa80:	mov	r1, #2
   1aa84:	mov	r0, r4
   1aa88:	bl	11108 <fcntl64@plt>
   1aa8c:	cmn	r0, #1
   1aa90:	bne	1aa58 <__assert_fail@plt+0x989c>
   1aa94:	b	1aa18 <__assert_fail@plt+0x985c>
   1aa98:	cmp	r1, #8
   1aa9c:	beq	1aaa4 <__assert_fail@plt+0x98e8>
   1aaa0:	bgt	1aab4 <__assert_fail@plt+0x98f8>
   1aaa4:	ldr	r3, [sp, #4]
   1aaa8:	mov	r0, r6
   1aaac:	ldr	r2, [r3]
   1aab0:	b	1a9a4 <__assert_fail@plt+0x97e8>
   1aab4:	cmp	r1, #9
   1aab8:	b	1a98c <__assert_fail@plt+0x97d0>
   1aabc:	ldr	r2, [pc, #56]	; 1aafc <__assert_fail@plt+0x9940>
   1aac0:	cmp	r1, r2
   1aac4:	bgt	1aadc <__assert_fail@plt+0x9920>
   1aac8:	cmp	r1, r3
   1aacc:	ldrlt	r3, [pc, #44]	; 1ab00 <__assert_fail@plt+0x9944>
   1aad0:	bge	1aaa4 <__assert_fail@plt+0x98e8>
   1aad4:	cmp	r1, r3
   1aad8:	b	1a98c <__assert_fail@plt+0x97d0>
   1aadc:	ldr	r3, [pc, #32]	; 1ab04 <__assert_fail@plt+0x9948>
   1aae0:	cmp	r1, r3
   1aae4:	beq	1aaa4 <__assert_fail@plt+0x98e8>
   1aae8:	blt	1a990 <__assert_fail@plt+0x97d4>
   1aaec:	add	r3, r3, #1
   1aaf0:	b	1aad4 <__assert_fail@plt+0x9918>
   1aaf4:	andeq	r0, r0, r6, lsl #8
   1aaf8:	andeq	sp, r2, r4, ror #5
   1aafc:	andeq	r0, r0, r7, lsl #8
   1ab00:	andeq	r0, r0, r1, lsl #8
   1ab04:	andeq	r0, r0, r9, lsl #8
   1ab08:	push	{r4, lr}
   1ab0c:	mov	r0, #14
   1ab10:	bl	1112c <nl_langinfo@plt>
   1ab14:	ldr	r3, [pc, #24]	; 1ab34 <__assert_fail@plt+0x9978>
   1ab18:	cmp	r0, #0
   1ab1c:	moveq	r0, r3
   1ab20:	ldr	r3, [pc, #16]	; 1ab38 <__assert_fail@plt+0x997c>
   1ab24:	ldrb	r2, [r0]
   1ab28:	cmp	r2, #0
   1ab2c:	moveq	r0, r3
   1ab30:	pop	{r4, pc}
   1ab34:	ldrdeq	fp, [r1], -sp
   1ab38:	ldrdeq	ip, [r1], -r5
   1ab3c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab40:	subs	r5, r0, #0
   1ab44:	addeq	r5, sp, #4
   1ab48:	mov	r0, r5
   1ab4c:	mov	r7, r2
   1ab50:	mov	r6, r1
   1ab54:	bl	10ff4 <mbrtowc@plt>
   1ab58:	cmp	r7, #0
   1ab5c:	cmnne	r0, #3
   1ab60:	mov	r4, r0
   1ab64:	bls	1ab80 <__assert_fail@plt+0x99c4>
   1ab68:	mov	r0, #0
   1ab6c:	bl	1abd8 <__assert_fail@plt+0x9a1c>
   1ab70:	cmp	r0, #0
   1ab74:	moveq	r4, #1
   1ab78:	ldrbeq	r3, [r6]
   1ab7c:	streq	r3, [r5]
   1ab80:	mov	r0, r4
   1ab84:	add	sp, sp, #12
   1ab88:	pop	{r4, r5, r6, r7, pc}
   1ab8c:	push	{r4, r5, r6, lr}
   1ab90:	subs	r4, r2, #0
   1ab94:	mov	r6, r0
   1ab98:	mov	r5, r1
   1ab9c:	beq	1abb4 <__assert_fail@plt+0x99f8>
   1aba0:	mov	r1, r4
   1aba4:	mvn	r0, #0
   1aba8:	bl	1acb8 <__assert_fail@plt+0x9afc>
   1abac:	cmp	r0, r5
   1abb0:	bcc	1abc4 <__assert_fail@plt+0x9a08>
   1abb4:	mul	r1, r5, r4
   1abb8:	mov	r0, r6
   1abbc:	pop	{r4, r5, r6, lr}
   1abc0:	b	1a878 <__assert_fail@plt+0x96bc>
   1abc4:	bl	11090 <__errno_location@plt>
   1abc8:	mov	r3, #12
   1abcc:	str	r3, [r0]
   1abd0:	mov	r0, #0
   1abd4:	pop	{r4, r5, r6, pc}
   1abd8:	push	{lr}		; (str lr, [sp, #-4]!)
   1abdc:	sub	sp, sp, #268	; 0x10c
   1abe0:	ldr	r2, [pc, #64]	; 1ac28 <__assert_fail@plt+0x9a6c>
   1abe4:	add	r1, sp, #4
   1abe8:	bl	1ac34 <__assert_fail@plt+0x9a78>
   1abec:	cmp	r0, #0
   1abf0:	movne	r0, #0
   1abf4:	bne	1ac20 <__assert_fail@plt+0x9a64>
   1abf8:	ldr	r1, [pc, #44]	; 1ac2c <__assert_fail@plt+0x9a70>
   1abfc:	add	r0, sp, #4
   1ac00:	bl	10f04 <strcmp@plt>
   1ac04:	cmp	r0, #0
   1ac08:	beq	1ac20 <__assert_fail@plt+0x9a64>
   1ac0c:	ldr	r1, [pc, #28]	; 1ac30 <__assert_fail@plt+0x9a74>
   1ac10:	add	r0, sp, #4
   1ac14:	bl	10f04 <strcmp@plt>
   1ac18:	adds	r0, r0, #0
   1ac1c:	movne	r0, #1
   1ac20:	add	sp, sp, #268	; 0x10c
   1ac24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac28:	andeq	r0, r0, r1, lsl #2
   1ac2c:	ldrdeq	ip, [r1], -fp
   1ac30:	ldrdeq	ip, [r1], -sp
   1ac34:	push	{r4, r5, r6, lr}
   1ac38:	mov	r5, r1
   1ac3c:	mov	r1, #0
   1ac40:	mov	r4, r2
   1ac44:	bl	11114 <setlocale@plt>
   1ac48:	subs	r6, r0, #0
   1ac4c:	bne	1ac60 <__assert_fail@plt+0x9aa4>
   1ac50:	cmp	r4, #0
   1ac54:	strbne	r6, [r5]
   1ac58:	mov	r0, #22
   1ac5c:	pop	{r4, r5, r6, pc}
   1ac60:	bl	11078 <strlen@plt>
   1ac64:	cmp	r4, r0
   1ac68:	bls	1ac84 <__assert_fail@plt+0x9ac8>
   1ac6c:	add	r2, r0, #1
   1ac70:	mov	r1, r6
   1ac74:	mov	r0, r5
   1ac78:	bl	10f4c <memcpy@plt>
   1ac7c:	mov	r0, #0
   1ac80:	pop	{r4, r5, r6, pc}
   1ac84:	cmp	r4, #0
   1ac88:	beq	1aca8 <__assert_fail@plt+0x9aec>
   1ac8c:	sub	r4, r4, #1
   1ac90:	mov	r2, r4
   1ac94:	mov	r1, r6
   1ac98:	mov	r0, r5
   1ac9c:	bl	10f4c <memcpy@plt>
   1aca0:	mov	r3, #0
   1aca4:	strb	r3, [r5, r4]
   1aca8:	mov	r0, #34	; 0x22
   1acac:	pop	{r4, r5, r6, pc}
   1acb0:	mov	r1, #0
   1acb4:	b	11114 <setlocale@plt>
   1acb8:	subs	r2, r1, #1
   1acbc:	bxeq	lr
   1acc0:	bcc	1ae98 <__assert_fail@plt+0x9cdc>
   1acc4:	cmp	r0, r1
   1acc8:	bls	1ae7c <__assert_fail@plt+0x9cc0>
   1accc:	tst	r1, r2
   1acd0:	beq	1ae88 <__assert_fail@plt+0x9ccc>
   1acd4:	clz	r3, r0
   1acd8:	clz	r2, r1
   1acdc:	sub	r3, r2, r3
   1ace0:	rsbs	r3, r3, #31
   1ace4:	addne	r3, r3, r3, lsl #1
   1ace8:	mov	r2, #0
   1acec:	addne	pc, pc, r3, lsl #2
   1acf0:	nop			; (mov r0, r0)
   1acf4:	cmp	r0, r1, lsl #31
   1acf8:	adc	r2, r2, r2
   1acfc:	subcs	r0, r0, r1, lsl #31
   1ad00:	cmp	r0, r1, lsl #30
   1ad04:	adc	r2, r2, r2
   1ad08:	subcs	r0, r0, r1, lsl #30
   1ad0c:	cmp	r0, r1, lsl #29
   1ad10:	adc	r2, r2, r2
   1ad14:	subcs	r0, r0, r1, lsl #29
   1ad18:	cmp	r0, r1, lsl #28
   1ad1c:	adc	r2, r2, r2
   1ad20:	subcs	r0, r0, r1, lsl #28
   1ad24:	cmp	r0, r1, lsl #27
   1ad28:	adc	r2, r2, r2
   1ad2c:	subcs	r0, r0, r1, lsl #27
   1ad30:	cmp	r0, r1, lsl #26
   1ad34:	adc	r2, r2, r2
   1ad38:	subcs	r0, r0, r1, lsl #26
   1ad3c:	cmp	r0, r1, lsl #25
   1ad40:	adc	r2, r2, r2
   1ad44:	subcs	r0, r0, r1, lsl #25
   1ad48:	cmp	r0, r1, lsl #24
   1ad4c:	adc	r2, r2, r2
   1ad50:	subcs	r0, r0, r1, lsl #24
   1ad54:	cmp	r0, r1, lsl #23
   1ad58:	adc	r2, r2, r2
   1ad5c:	subcs	r0, r0, r1, lsl #23
   1ad60:	cmp	r0, r1, lsl #22
   1ad64:	adc	r2, r2, r2
   1ad68:	subcs	r0, r0, r1, lsl #22
   1ad6c:	cmp	r0, r1, lsl #21
   1ad70:	adc	r2, r2, r2
   1ad74:	subcs	r0, r0, r1, lsl #21
   1ad78:	cmp	r0, r1, lsl #20
   1ad7c:	adc	r2, r2, r2
   1ad80:	subcs	r0, r0, r1, lsl #20
   1ad84:	cmp	r0, r1, lsl #19
   1ad88:	adc	r2, r2, r2
   1ad8c:	subcs	r0, r0, r1, lsl #19
   1ad90:	cmp	r0, r1, lsl #18
   1ad94:	adc	r2, r2, r2
   1ad98:	subcs	r0, r0, r1, lsl #18
   1ad9c:	cmp	r0, r1, lsl #17
   1ada0:	adc	r2, r2, r2
   1ada4:	subcs	r0, r0, r1, lsl #17
   1ada8:	cmp	r0, r1, lsl #16
   1adac:	adc	r2, r2, r2
   1adb0:	subcs	r0, r0, r1, lsl #16
   1adb4:	cmp	r0, r1, lsl #15
   1adb8:	adc	r2, r2, r2
   1adbc:	subcs	r0, r0, r1, lsl #15
   1adc0:	cmp	r0, r1, lsl #14
   1adc4:	adc	r2, r2, r2
   1adc8:	subcs	r0, r0, r1, lsl #14
   1adcc:	cmp	r0, r1, lsl #13
   1add0:	adc	r2, r2, r2
   1add4:	subcs	r0, r0, r1, lsl #13
   1add8:	cmp	r0, r1, lsl #12
   1addc:	adc	r2, r2, r2
   1ade0:	subcs	r0, r0, r1, lsl #12
   1ade4:	cmp	r0, r1, lsl #11
   1ade8:	adc	r2, r2, r2
   1adec:	subcs	r0, r0, r1, lsl #11
   1adf0:	cmp	r0, r1, lsl #10
   1adf4:	adc	r2, r2, r2
   1adf8:	subcs	r0, r0, r1, lsl #10
   1adfc:	cmp	r0, r1, lsl #9
   1ae00:	adc	r2, r2, r2
   1ae04:	subcs	r0, r0, r1, lsl #9
   1ae08:	cmp	r0, r1, lsl #8
   1ae0c:	adc	r2, r2, r2
   1ae10:	subcs	r0, r0, r1, lsl #8
   1ae14:	cmp	r0, r1, lsl #7
   1ae18:	adc	r2, r2, r2
   1ae1c:	subcs	r0, r0, r1, lsl #7
   1ae20:	cmp	r0, r1, lsl #6
   1ae24:	adc	r2, r2, r2
   1ae28:	subcs	r0, r0, r1, lsl #6
   1ae2c:	cmp	r0, r1, lsl #5
   1ae30:	adc	r2, r2, r2
   1ae34:	subcs	r0, r0, r1, lsl #5
   1ae38:	cmp	r0, r1, lsl #4
   1ae3c:	adc	r2, r2, r2
   1ae40:	subcs	r0, r0, r1, lsl #4
   1ae44:	cmp	r0, r1, lsl #3
   1ae48:	adc	r2, r2, r2
   1ae4c:	subcs	r0, r0, r1, lsl #3
   1ae50:	cmp	r0, r1, lsl #2
   1ae54:	adc	r2, r2, r2
   1ae58:	subcs	r0, r0, r1, lsl #2
   1ae5c:	cmp	r0, r1, lsl #1
   1ae60:	adc	r2, r2, r2
   1ae64:	subcs	r0, r0, r1, lsl #1
   1ae68:	cmp	r0, r1
   1ae6c:	adc	r2, r2, r2
   1ae70:	subcs	r0, r0, r1
   1ae74:	mov	r0, r2
   1ae78:	bx	lr
   1ae7c:	moveq	r0, #1
   1ae80:	movne	r0, #0
   1ae84:	bx	lr
   1ae88:	clz	r2, r1
   1ae8c:	rsb	r2, r2, #31
   1ae90:	lsr	r0, r0, r2
   1ae94:	bx	lr
   1ae98:	cmp	r0, #0
   1ae9c:	mvnne	r0, #0
   1aea0:	b	1b140 <__assert_fail@plt+0x9f84>
   1aea4:	cmp	r1, #0
   1aea8:	beq	1ae98 <__assert_fail@plt+0x9cdc>
   1aeac:	push	{r0, r1, lr}
   1aeb0:	bl	1acb8 <__assert_fail@plt+0x9afc>
   1aeb4:	pop	{r1, r2, lr}
   1aeb8:	mul	r3, r2, r0
   1aebc:	sub	r1, r1, r3
   1aec0:	bx	lr
   1aec4:	cmp	r1, #0
   1aec8:	beq	1b0d4 <__assert_fail@plt+0x9f18>
   1aecc:	eor	ip, r0, r1
   1aed0:	rsbmi	r1, r1, #0
   1aed4:	subs	r2, r1, #1
   1aed8:	beq	1b0a0 <__assert_fail@plt+0x9ee4>
   1aedc:	movs	r3, r0
   1aee0:	rsbmi	r3, r0, #0
   1aee4:	cmp	r3, r1
   1aee8:	bls	1b0ac <__assert_fail@plt+0x9ef0>
   1aeec:	tst	r1, r2
   1aef0:	beq	1b0bc <__assert_fail@plt+0x9f00>
   1aef4:	clz	r2, r3
   1aef8:	clz	r0, r1
   1aefc:	sub	r2, r0, r2
   1af00:	rsbs	r2, r2, #31
   1af04:	addne	r2, r2, r2, lsl #1
   1af08:	mov	r0, #0
   1af0c:	addne	pc, pc, r2, lsl #2
   1af10:	nop			; (mov r0, r0)
   1af14:	cmp	r3, r1, lsl #31
   1af18:	adc	r0, r0, r0
   1af1c:	subcs	r3, r3, r1, lsl #31
   1af20:	cmp	r3, r1, lsl #30
   1af24:	adc	r0, r0, r0
   1af28:	subcs	r3, r3, r1, lsl #30
   1af2c:	cmp	r3, r1, lsl #29
   1af30:	adc	r0, r0, r0
   1af34:	subcs	r3, r3, r1, lsl #29
   1af38:	cmp	r3, r1, lsl #28
   1af3c:	adc	r0, r0, r0
   1af40:	subcs	r3, r3, r1, lsl #28
   1af44:	cmp	r3, r1, lsl #27
   1af48:	adc	r0, r0, r0
   1af4c:	subcs	r3, r3, r1, lsl #27
   1af50:	cmp	r3, r1, lsl #26
   1af54:	adc	r0, r0, r0
   1af58:	subcs	r3, r3, r1, lsl #26
   1af5c:	cmp	r3, r1, lsl #25
   1af60:	adc	r0, r0, r0
   1af64:	subcs	r3, r3, r1, lsl #25
   1af68:	cmp	r3, r1, lsl #24
   1af6c:	adc	r0, r0, r0
   1af70:	subcs	r3, r3, r1, lsl #24
   1af74:	cmp	r3, r1, lsl #23
   1af78:	adc	r0, r0, r0
   1af7c:	subcs	r3, r3, r1, lsl #23
   1af80:	cmp	r3, r1, lsl #22
   1af84:	adc	r0, r0, r0
   1af88:	subcs	r3, r3, r1, lsl #22
   1af8c:	cmp	r3, r1, lsl #21
   1af90:	adc	r0, r0, r0
   1af94:	subcs	r3, r3, r1, lsl #21
   1af98:	cmp	r3, r1, lsl #20
   1af9c:	adc	r0, r0, r0
   1afa0:	subcs	r3, r3, r1, lsl #20
   1afa4:	cmp	r3, r1, lsl #19
   1afa8:	adc	r0, r0, r0
   1afac:	subcs	r3, r3, r1, lsl #19
   1afb0:	cmp	r3, r1, lsl #18
   1afb4:	adc	r0, r0, r0
   1afb8:	subcs	r3, r3, r1, lsl #18
   1afbc:	cmp	r3, r1, lsl #17
   1afc0:	adc	r0, r0, r0
   1afc4:	subcs	r3, r3, r1, lsl #17
   1afc8:	cmp	r3, r1, lsl #16
   1afcc:	adc	r0, r0, r0
   1afd0:	subcs	r3, r3, r1, lsl #16
   1afd4:	cmp	r3, r1, lsl #15
   1afd8:	adc	r0, r0, r0
   1afdc:	subcs	r3, r3, r1, lsl #15
   1afe0:	cmp	r3, r1, lsl #14
   1afe4:	adc	r0, r0, r0
   1afe8:	subcs	r3, r3, r1, lsl #14
   1afec:	cmp	r3, r1, lsl #13
   1aff0:	adc	r0, r0, r0
   1aff4:	subcs	r3, r3, r1, lsl #13
   1aff8:	cmp	r3, r1, lsl #12
   1affc:	adc	r0, r0, r0
   1b000:	subcs	r3, r3, r1, lsl #12
   1b004:	cmp	r3, r1, lsl #11
   1b008:	adc	r0, r0, r0
   1b00c:	subcs	r3, r3, r1, lsl #11
   1b010:	cmp	r3, r1, lsl #10
   1b014:	adc	r0, r0, r0
   1b018:	subcs	r3, r3, r1, lsl #10
   1b01c:	cmp	r3, r1, lsl #9
   1b020:	adc	r0, r0, r0
   1b024:	subcs	r3, r3, r1, lsl #9
   1b028:	cmp	r3, r1, lsl #8
   1b02c:	adc	r0, r0, r0
   1b030:	subcs	r3, r3, r1, lsl #8
   1b034:	cmp	r3, r1, lsl #7
   1b038:	adc	r0, r0, r0
   1b03c:	subcs	r3, r3, r1, lsl #7
   1b040:	cmp	r3, r1, lsl #6
   1b044:	adc	r0, r0, r0
   1b048:	subcs	r3, r3, r1, lsl #6
   1b04c:	cmp	r3, r1, lsl #5
   1b050:	adc	r0, r0, r0
   1b054:	subcs	r3, r3, r1, lsl #5
   1b058:	cmp	r3, r1, lsl #4
   1b05c:	adc	r0, r0, r0
   1b060:	subcs	r3, r3, r1, lsl #4
   1b064:	cmp	r3, r1, lsl #3
   1b068:	adc	r0, r0, r0
   1b06c:	subcs	r3, r3, r1, lsl #3
   1b070:	cmp	r3, r1, lsl #2
   1b074:	adc	r0, r0, r0
   1b078:	subcs	r3, r3, r1, lsl #2
   1b07c:	cmp	r3, r1, lsl #1
   1b080:	adc	r0, r0, r0
   1b084:	subcs	r3, r3, r1, lsl #1
   1b088:	cmp	r3, r1
   1b08c:	adc	r0, r0, r0
   1b090:	subcs	r3, r3, r1
   1b094:	cmp	ip, #0
   1b098:	rsbmi	r0, r0, #0
   1b09c:	bx	lr
   1b0a0:	teq	ip, r0
   1b0a4:	rsbmi	r0, r0, #0
   1b0a8:	bx	lr
   1b0ac:	movcc	r0, #0
   1b0b0:	asreq	r0, ip, #31
   1b0b4:	orreq	r0, r0, #1
   1b0b8:	bx	lr
   1b0bc:	clz	r2, r1
   1b0c0:	rsb	r2, r2, #31
   1b0c4:	cmp	ip, #0
   1b0c8:	lsr	r0, r3, r2
   1b0cc:	rsbmi	r0, r0, #0
   1b0d0:	bx	lr
   1b0d4:	cmp	r0, #0
   1b0d8:	mvngt	r0, #-2147483648	; 0x80000000
   1b0dc:	movlt	r0, #-2147483648	; 0x80000000
   1b0e0:	b	1b140 <__assert_fail@plt+0x9f84>
   1b0e4:	cmp	r1, #0
   1b0e8:	beq	1b0d4 <__assert_fail@plt+0x9f18>
   1b0ec:	push	{r0, r1, lr}
   1b0f0:	bl	1aecc <__assert_fail@plt+0x9d10>
   1b0f4:	pop	{r1, r2, lr}
   1b0f8:	mul	r3, r2, r0
   1b0fc:	sub	r1, r1, r3
   1b100:	bx	lr
   1b104:	cmp	r3, #0
   1b108:	cmpeq	r2, #0
   1b10c:	bne	1b124 <__assert_fail@plt+0x9f68>
   1b110:	cmp	r1, #0
   1b114:	cmpeq	r0, #0
   1b118:	mvnne	r1, #0
   1b11c:	mvnne	r0, #0
   1b120:	b	1b140 <__assert_fail@plt+0x9f84>
   1b124:	sub	sp, sp, #8
   1b128:	push	{sp, lr}
   1b12c:	bl	1b150 <__assert_fail@plt+0x9f94>
   1b130:	ldr	lr, [sp, #4]
   1b134:	add	sp, sp, #8
   1b138:	pop	{r2, r3}
   1b13c:	bx	lr
   1b140:	push	{r1, lr}
   1b144:	mov	r0, #8
   1b148:	bl	10ef8 <raise@plt>
   1b14c:	pop	{r1, pc}
   1b150:	cmp	r1, r3
   1b154:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b158:	cmpeq	r0, r2
   1b15c:	mov	r4, r0
   1b160:	mov	r5, r1
   1b164:	ldr	r9, [sp, #28]
   1b168:	movcc	r0, #0
   1b16c:	movcc	r1, #0
   1b170:	bcc	1b268 <__assert_fail@plt+0xa0ac>
   1b174:	cmp	r3, #0
   1b178:	clzeq	ip, r2
   1b17c:	clzne	ip, r3
   1b180:	addeq	ip, ip, #32
   1b184:	cmp	r5, #0
   1b188:	clzeq	r1, r4
   1b18c:	addeq	r1, r1, #32
   1b190:	clzne	r1, r5
   1b194:	sub	ip, ip, r1
   1b198:	sub	lr, ip, #32
   1b19c:	lsl	r7, r3, ip
   1b1a0:	rsb	r8, ip, #32
   1b1a4:	orr	r7, r7, r2, lsl lr
   1b1a8:	orr	r7, r7, r2, lsr r8
   1b1ac:	lsl	r6, r2, ip
   1b1b0:	cmp	r5, r7
   1b1b4:	cmpeq	r4, r6
   1b1b8:	movcc	r0, #0
   1b1bc:	movcc	r1, #0
   1b1c0:	bcc	1b1dc <__assert_fail@plt+0xa020>
   1b1c4:	mov	r3, #1
   1b1c8:	subs	r4, r4, r6
   1b1cc:	lsl	r1, r3, lr
   1b1d0:	lsl	r0, r3, ip
   1b1d4:	orr	r1, r1, r3, lsr r8
   1b1d8:	sbc	r5, r5, r7
   1b1dc:	cmp	ip, #0
   1b1e0:	beq	1b268 <__assert_fail@plt+0xa0ac>
   1b1e4:	lsrs	r3, r7, #1
   1b1e8:	rrx	r2, r6
   1b1ec:	mov	r6, ip
   1b1f0:	b	1b214 <__assert_fail@plt+0xa058>
   1b1f4:	subs	r4, r4, r2
   1b1f8:	sbc	r5, r5, r3
   1b1fc:	adds	r4, r4, r4
   1b200:	adc	r5, r5, r5
   1b204:	adds	r4, r4, #1
   1b208:	adc	r5, r5, #0
   1b20c:	subs	r6, r6, #1
   1b210:	beq	1b230 <__assert_fail@plt+0xa074>
   1b214:	cmp	r5, r3
   1b218:	cmpeq	r4, r2
   1b21c:	bcs	1b1f4 <__assert_fail@plt+0xa038>
   1b220:	adds	r4, r4, r4
   1b224:	adc	r5, r5, r5
   1b228:	subs	r6, r6, #1
   1b22c:	bne	1b214 <__assert_fail@plt+0xa058>
   1b230:	lsr	r6, r4, ip
   1b234:	lsr	r7, r5, ip
   1b238:	orr	r6, r6, r5, lsl r8
   1b23c:	adds	r2, r0, r4
   1b240:	orr	r6, r6, r5, lsr lr
   1b244:	adc	r3, r1, r5
   1b248:	lsl	r1, r7, ip
   1b24c:	orr	r1, r1, r6, lsl lr
   1b250:	lsl	r0, r6, ip
   1b254:	orr	r1, r1, r6, lsr r8
   1b258:	subs	r0, r2, r0
   1b25c:	mov	r4, r6
   1b260:	mov	r5, r7
   1b264:	sbc	r1, r3, r1
   1b268:	cmp	r9, #0
   1b26c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b270:	strd	r4, [r9]
   1b274:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b278:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b27c:	mov	r7, r0
   1b280:	ldr	r6, [pc, #72]	; 1b2d0 <__assert_fail@plt+0xa114>
   1b284:	ldr	r5, [pc, #72]	; 1b2d4 <__assert_fail@plt+0xa118>
   1b288:	add	r6, pc, r6
   1b28c:	add	r5, pc, r5
   1b290:	sub	r6, r6, r5
   1b294:	mov	r8, r1
   1b298:	mov	r9, r2
   1b29c:	bl	10eb4 <fdopen@plt-0x20>
   1b2a0:	asrs	r6, r6, #2
   1b2a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b2a8:	mov	r4, #0
   1b2ac:	add	r4, r4, #1
   1b2b0:	ldr	r3, [r5], #4
   1b2b4:	mov	r2, r9
   1b2b8:	mov	r1, r8
   1b2bc:	mov	r0, r7
   1b2c0:	blx	r3
   1b2c4:	cmp	r6, r4
   1b2c8:	bne	1b2ac <__assert_fail@plt+0xa0f0>
   1b2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b2d0:	andeq	r1, r1, r0, lsl #25
   1b2d4:	andeq	r1, r1, r8, ror ip
   1b2d8:	bx	lr
   1b2dc:	ldr	r3, [pc, #12]	; 1b2f0 <__assert_fail@plt+0xa134>
   1b2e0:	mov	r1, #0
   1b2e4:	add	r3, pc, r3
   1b2e8:	ldr	r2, [r3]
   1b2ec:	b	1109c <__cxa_atexit@plt>
   1b2f0:	andeq	r1, r1, r4, lsr #28

Disassembly of section .fini:

0001b2f4 <.fini>:
   1b2f4:	push	{r3, lr}
   1b2f8:	pop	{r3, pc}
