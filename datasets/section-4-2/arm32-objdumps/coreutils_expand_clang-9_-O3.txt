
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010d78 <.init>:
   10d78:	push	{r3, lr}
   10d7c:	bl	11020 <__assert_fail@plt+0x48>
   10d80:	pop	{r3, pc}

Disassembly of section .plt:

00010d84 <calloc@plt-0x14>:
   10d84:	push	{lr}		; (str lr, [sp, #-4]!)
   10d88:	ldr	lr, [pc, #4]	; 10d94 <calloc@plt-0x4>
   10d8c:	add	lr, pc, lr
   10d90:	ldr	pc, [lr, #8]!
   10d94:	andeq	r6, r1, ip, ror #4

00010d98 <calloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #620]!	; 0x26c

00010da4 <fputs_unlocked@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #612]!	; 0x264

00010db0 <raise@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #604]!	; 0x25c

00010dbc <strcmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #596]!	; 0x254

00010dc8 <posix_fadvise64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #588]!	; 0x24c

00010dd4 <fflush@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #580]!	; 0x244

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #572]!	; 0x23c

00010dec <_exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #564]!	; 0x234

00010df8 <memcpy@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #556]!	; 0x22c

00010e04 <mbsinit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #548]!	; 0x224

00010e10 <dcgettext@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #540]!	; 0x21c

00010e1c <realloc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #532]!	; 0x214

00010e28 <textdomain@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #524]!	; 0x20c

00010e34 <iswprint@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #516]!	; 0x204

00010e40 <fwrite@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #508]!	; 0x1fc

00010e4c <lseek64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #500]!	; 0x1f4

00010e58 <__ctype_get_mb_cur_max@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #492]!	; 0x1ec

00010e64 <__fpending@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e70 <mbrtowc@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #476]!	; 0x1dc

00010e7c <error@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #468]!	; 0x1d4

00010e88 <malloc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #460]!	; 0x1cc

00010e94 <__libc_start_main@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea0 <__freading@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eac <__gmon_start__@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #436]!	; 0x1b4

00010eb8 <getopt_long@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec4 <__ctype_b_loc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed0 <exit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #412]!	; 0x19c

00010edc <bcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #404]!	; 0x194

00010ee8 <strlen@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #396]!	; 0x18c

00010ef4 <__errno_location@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #388]!	; 0x184

00010f00 <__cxa_atexit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #380]!	; 0x17c

00010f0c <memset@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #372]!	; 0x174

00010f18 <__printf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #364]!	; 0x16c

00010f24 <fileno@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #356]!	; 0x164

00010f30 <__fprintf_chk@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #348]!	; 0x15c

00010f3c <fclose@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #340]!	; 0x154

00010f48 <fseeko64@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #332]!	; 0x14c

00010f54 <__uflow@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #324]!	; 0x144

00010f60 <__overflow@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #316]!	; 0x13c

00010f6c <setlocale@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #308]!	; 0x134

00010f78 <strrchr@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #300]!	; 0x12c

00010f84 <nl_langinfo@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #292]!	; 0x124

00010f90 <clearerr_unlocked@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #284]!	; 0x11c

00010f9c <fopen64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #276]!	; 0x114

00010fa8 <bindtextdomain@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #268]!	; 0x10c

00010fb4 <strncmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #260]!	; 0x104

00010fc0 <abort@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #252]!	; 0xfc

00010fcc <strspn@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #244]!	; 0xf4

00010fd8 <__assert_fail@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe4 <.text>:
   10fe4:	mov	fp, #0
   10fe8:	mov	lr, #0
   10fec:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff0:	mov	r2, sp
   10ff4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ff8:	push	{r0}		; (str r0, [sp, #-4]!)
   10ffc:	ldr	ip, [pc, #16]	; 11014 <__assert_fail@plt+0x3c>
   11000:	push	{ip}		; (str ip, [sp, #-4]!)
   11004:	ldr	r0, [pc, #12]	; 11018 <__assert_fail@plt+0x40>
   11008:	ldr	r3, [pc, #12]	; 1101c <__assert_fail@plt+0x44>
   1100c:	bl	10e94 <__libc_start_main@plt>
   11010:	bl	10fc0 <abort@plt>
   11014:			; <UNDEFINED> instruction: 0x000156b8
   11018:	andeq	r1, r1, r0, ror r3
   1101c:	andeq	r5, r1, r8, asr r6
   11020:	ldr	r3, [pc, #20]	; 1103c <__assert_fail@plt+0x64>
   11024:	ldr	r2, [pc, #20]	; 11040 <__assert_fail@plt+0x68>
   11028:	add	r3, pc, r3
   1102c:	ldr	r2, [r3, r2]
   11030:	cmp	r2, #0
   11034:	bxeq	lr
   11038:	b	10eac <__gmon_start__@plt>
   1103c:	ldrdeq	r5, [r1], -r0
   11040:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11044:	ldr	r0, [pc, #24]	; 11064 <__assert_fail@plt+0x8c>
   11048:	ldr	r3, [pc, #24]	; 11068 <__assert_fail@plt+0x90>
   1104c:	cmp	r3, r0
   11050:	bxeq	lr
   11054:	ldr	r3, [pc, #16]	; 1106c <__assert_fail@plt+0x94>
   11058:	cmp	r3, #0
   1105c:	bxeq	lr
   11060:	bx	r3
   11064:	andeq	r7, r2, r0, lsr r1
   11068:	andeq	r7, r2, r0, lsr r1
   1106c:	andeq	r0, r0, r0
   11070:	ldr	r0, [pc, #36]	; 1109c <__assert_fail@plt+0xc4>
   11074:	ldr	r1, [pc, #36]	; 110a0 <__assert_fail@plt+0xc8>
   11078:	sub	r1, r1, r0
   1107c:	asr	r1, r1, #2
   11080:	add	r1, r1, r1, lsr #31
   11084:	asrs	r1, r1, #1
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0xcc>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r7, r2, r0, lsr r1
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	push	{r4, lr}
   110ac:	ldr	r4, [pc, #24]	; 110cc <__assert_fail@plt+0xf4>
   110b0:	ldrb	r3, [r4]
   110b4:	cmp	r3, #0
   110b8:	popne	{r4, pc}
   110bc:	bl	11044 <__assert_fail@plt+0x6c>
   110c0:	mov	r3, #1
   110c4:	strb	r3, [r4]
   110c8:	pop	{r4, pc}
   110cc:	andeq	r7, r2, r4, asr r1
   110d0:	b	11070 <__assert_fail@plt+0x98>
   110d4:	push	{fp, lr}
   110d8:	mov	fp, sp
   110dc:	sub	sp, sp, #56	; 0x38
   110e0:	mov	r4, r0
   110e4:	cmp	r0, #0
   110e8:	bne	1132c <__assert_fail@plt+0x354>
   110ec:	movw	r1, #22283	; 0x570b
   110f0:	mov	r0, #0
   110f4:	mov	r2, #5
   110f8:	movt	r1, #1
   110fc:	bl	10e10 <dcgettext@plt>
   11100:	mov	r1, r0
   11104:	movw	r0, #29088	; 0x71a0
   11108:	movt	r0, #2
   1110c:	ldr	r2, [r0]
   11110:	mov	r0, #1
   11114:	bl	10f18 <__printf_chk@plt>
   11118:	movw	r1, #22316	; 0x572c
   1111c:	mov	r0, #0
   11120:	mov	r2, #5
   11124:	movt	r1, #1
   11128:	bl	10e10 <dcgettext@plt>
   1112c:	movw	r7, #29004	; 0x714c
   11130:	movt	r7, #2
   11134:	ldr	r1, [r7]
   11138:	bl	10da4 <fputs_unlocked@plt>
   1113c:	movw	r1, #22654	; 0x587e
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	movt	r1, #1
   1114c:	bl	10e10 <dcgettext@plt>
   11150:	ldr	r1, [r7]
   11154:	bl	10da4 <fputs_unlocked@plt>
   11158:	movw	r1, #22710	; 0x58b6
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10e10 <dcgettext@plt>
   1116c:	ldr	r1, [r7]
   11170:	bl	10da4 <fputs_unlocked@plt>
   11174:	movw	r1, #22382	; 0x576e
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	movt	r1, #1
   11184:	bl	10e10 <dcgettext@plt>
   11188:	ldr	r1, [r7]
   1118c:	bl	10da4 <fputs_unlocked@plt>
   11190:	bl	12228 <__assert_fail@plt+0x1250>
   11194:	movw	r1, #22494	; 0x57de
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e10 <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10da4 <fputs_unlocked@plt>
   111b0:	movw	r1, #22539	; 0x580b
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e10 <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10da4 <fputs_unlocked@plt>
   111cc:	movw	r0, #23280	; 0x5af0
   111d0:	mov	r2, #48	; 0x30
   111d4:	mov	r6, sp
   111d8:	movw	r5, #22593	; 0x5841
   111dc:	movt	r0, #1
   111e0:	movt	r5, #1
   111e4:	add	r1, r0, #32
   111e8:	add	r3, r0, #16
   111ec:	vld1.64	{d18-d19}, [r0], r2
   111f0:	vld1.64	{d16-d17}, [r1]
   111f4:	vld1.64	{d20-d21}, [r3]
   111f8:	vldr	d22, [r0]
   111fc:	add	r1, r6, #32
   11200:	add	r0, r6, #16
   11204:	vst1.64	{d16-d17}, [r1]
   11208:	movw	r1, #22785	; 0x5901
   1120c:	vst1.64	{d20-d21}, [r0]
   11210:	mov	r0, r6
   11214:	movt	r1, #1
   11218:	vst1.64	{d18-d19}, [r0], r2
   1121c:	vstr	d22, [r0]
   11220:	mov	r0, r5
   11224:	bl	10dbc <strcmp@plt>
   11228:	cmp	r0, #0
   1122c:	ldrne	r1, [r6, #8]!
   11230:	cmpne	r1, #0
   11234:	bne	11220 <__assert_fail@plt+0x248>
   11238:	movw	r1, #22880	; 0x5960
   1123c:	ldr	r6, [r6, #4]
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10e10 <dcgettext@plt>
   11250:	movw	r2, #22624	; 0x5860
   11254:	movw	r3, #22903	; 0x5977
   11258:	mov	r1, r0
   1125c:	mov	r0, #1
   11260:	movt	r2, #1
   11264:	movt	r3, #1
   11268:	bl	10f18 <__printf_chk@plt>
   1126c:	cmp	r6, #0
   11270:	mov	r0, #5
   11274:	mov	r1, #0
   11278:	moveq	r6, r5
   1127c:	bl	10f6c <setlocale@plt>
   11280:	cmp	r0, #0
   11284:	beq	112bc <__assert_fail@plt+0x2e4>
   11288:	movw	r1, #22943	; 0x599f
   1128c:	mov	r2, #3
   11290:	movt	r1, #1
   11294:	bl	10fb4 <strncmp@plt>
   11298:	cmp	r0, #0
   1129c:	beq	112bc <__assert_fail@plt+0x2e4>
   112a0:	movw	r1, #22947	; 0x59a3
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10e10 <dcgettext@plt>
   112b4:	ldr	r1, [r7]
   112b8:	bl	10da4 <fputs_unlocked@plt>
   112bc:	movw	r1, #23018	; 0x59ea
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10e10 <dcgettext@plt>
   112d0:	movw	r2, #22903	; 0x5977
   112d4:	mov	r1, r0
   112d8:	mov	r0, #1
   112dc:	mov	r3, r5
   112e0:	movt	r2, #1
   112e4:	bl	10f18 <__printf_chk@plt>
   112e8:	movw	r1, #23045	; 0x5a05
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10e10 <dcgettext@plt>
   112fc:	mov	r1, r0
   11300:	movw	r0, #22813	; 0x591d
   11304:	movw	r3, #23095	; 0x5a37
   11308:	cmp	r6, r5
   1130c:	mov	r2, r6
   11310:	movt	r0, #1
   11314:	movt	r3, #1
   11318:	moveq	r3, r0
   1131c:	mov	r0, #1
   11320:	bl	10f18 <__printf_chk@plt>
   11324:	mov	r0, r4
   11328:	bl	10ed0 <exit@plt>
   1132c:	movw	r0, #28992	; 0x7140
   11330:	movw	r1, #22244	; 0x56e4
   11334:	mov	r2, #5
   11338:	movt	r0, #2
   1133c:	movt	r1, #1
   11340:	ldr	r5, [r0]
   11344:	mov	r0, #0
   11348:	bl	10e10 <dcgettext@plt>
   1134c:	mov	r2, r0
   11350:	movw	r0, #29088	; 0x71a0
   11354:	mov	r1, #1
   11358:	movt	r0, #2
   1135c:	ldr	r3, [r0]
   11360:	mov	r0, r5
   11364:	bl	10f30 <__fprintf_chk@plt>
   11368:	mov	r0, r4
   1136c:	bl	10ed0 <exit@plt>
   11370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11374:	add	fp, sp, #28
   11378:	sub	sp, sp, #20
   1137c:	mov	r5, r0
   11380:	ldr	r0, [r1]
   11384:	mov	r4, r1
   11388:	bl	12588 <__assert_fail@plt+0x15b0>
   1138c:	movw	r1, #23095	; 0x5a37
   11390:	mov	r0, #6
   11394:	movt	r1, #1
   11398:	bl	10f6c <setlocale@plt>
   1139c:	movw	r6, #22628	; 0x5864
   113a0:	movw	r1, #22600	; 0x5848
   113a4:	movt	r6, #1
   113a8:	movt	r1, #1
   113ac:	mov	r0, r6
   113b0:	bl	10fa8 <bindtextdomain@plt>
   113b4:	mov	r0, r6
   113b8:	bl	10e28 <textdomain@plt>
   113bc:	movw	r0, #8852	; 0x2294
   113c0:	movt	r0, #1
   113c4:	bl	156bc <__assert_fail@plt+0x46e4>
   113c8:	movw	r1, #29016	; 0x7158
   113cc:	movw	r9, #23160	; 0x5a78
   113d0:	movw	r7, #23196	; 0x5a9c
   113d4:	movw	sl, #29008	; 0x7150
   113d8:	mov	r0, #1
   113dc:	mov	r6, #0
   113e0:	add	r8, sp, #13
   113e4:	movt	r1, #2
   113e8:	movt	r9, #1
   113ec:	movt	r7, #1
   113f0:	movt	sl, #2
   113f4:	strb	r0, [r1]
   113f8:	b	11418 <__assert_fail@plt+0x440>
   113fc:	ldr	r1, [sl]
   11400:	cmp	r1, #0
   11404:	subne	r0, r1, #1
   11408:	strbeq	r6, [sp, #14]
   1140c:	strbeq	r0, [sp, #13]
   11410:	moveq	r0, r8
   11414:	bl	1185c <__assert_fail@plt+0x884>
   11418:	mov	r0, r5
   1141c:	mov	r1, r4
   11420:	mov	r2, r9
   11424:	mov	r3, r7
   11428:	str	r6, [sp]
   1142c:	bl	10eb8 <getopt_long@plt>
   11430:	sub	r1, r0, #48	; 0x30
   11434:	cmp	r1, #10
   11438:	bcc	113fc <__assert_fail@plt+0x424>
   1143c:	cmp	r0, #104	; 0x68
   11440:	ble	11470 <__assert_fail@plt+0x498>
   11444:	cmp	r0, #116	; 0x74
   11448:	beq	11464 <__assert_fail@plt+0x48c>
   1144c:	cmp	r0, #105	; 0x69
   11450:	bne	11750 <__assert_fail@plt+0x778>
   11454:	movw	r0, #29016	; 0x7158
   11458:	movt	r0, #2
   1145c:	strb	r6, [r0]
   11460:	b	11418 <__assert_fail@plt+0x440>
   11464:	ldr	r0, [sl]
   11468:	bl	1185c <__assert_fail@plt+0x884>
   1146c:	b	11418 <__assert_fail@plt+0x440>
   11470:	cmn	r0, #1
   11474:	bne	116f0 <__assert_fail@plt+0x718>
   11478:	bl	11dd4 <__assert_fail@plt+0xdfc>
   1147c:	movw	r0, #28984	; 0x7138
   11480:	movt	r0, #2
   11484:	ldr	r1, [r0]
   11488:	mov	r0, #0
   1148c:	cmp	r1, r5
   11490:	addlt	r0, r4, r1, lsl #2
   11494:	bl	11fdc <__assert_fail@plt+0x1004>
   11498:	mov	r0, #0
   1149c:	bl	12004 <__assert_fail@plt+0x102c>
   114a0:	cmp	r0, #0
   114a4:	beq	116d8 <__assert_fail@plt+0x700>
   114a8:	movw	r9, #29004	; 0x714c
   114ac:	movw	r4, #29016	; 0x7158
   114b0:	mov	sl, r0
   114b4:	movt	r9, #2
   114b8:	movt	r4, #2
   114bc:	mov	r7, #0
   114c0:	mov	r8, #1
   114c4:	mov	r5, #0
   114c8:	str	r7, [sp, #16]
   114cc:	ldmib	sl, {r0, r1}
   114d0:	cmp	r0, r1
   114d4:	bcs	11630 <__assert_fail@plt+0x658>
   114d8:	add	r1, r0, #1
   114dc:	str	r1, [sl, #4]
   114e0:	ldrb	r6, [r0]
   114e4:	tst	r8, #1
   114e8:	beq	11664 <__assert_fail@plt+0x68c>
   114ec:	cmp	r6, #8
   114f0:	beq	1158c <__assert_fail@plt+0x5b4>
   114f4:	cmp	r6, #9
   114f8:	bne	115cc <__assert_fail@plt+0x5f4>
   114fc:	mov	r0, r7
   11500:	mov	r1, r5
   11504:	add	r2, sp, #16
   11508:	add	r3, sp, #15
   1150c:	bl	11ef8 <__assert_fail@plt+0xf20>
   11510:	ldrb	r2, [sp, #15]
   11514:	adds	r6, r7, #1
   11518:	adc	r4, r5, #0
   1151c:	cmp	r2, #0
   11520:	moveq	r6, r0
   11524:	moveq	r4, r1
   11528:	subs	r0, r6, r7
   1152c:	sbcs	r0, r4, r5
   11530:	bcc	11758 <__assert_fail@plt+0x780>
   11534:	adds	r7, r7, #1
   11538:	adc	r5, r5, #0
   1153c:	subs	r0, r7, r6
   11540:	sbcs	r0, r5, r4
   11544:	bcs	115f8 <__assert_fail@plt+0x620>
   11548:	ldr	r0, [r9]
   1154c:	ldr	r1, [r0, #20]
   11550:	ldr	r2, [r0, #24]
   11554:	cmp	r1, r2
   11558:	bcs	11578 <__assert_fail@plt+0x5a0>
   1155c:	add	r2, r1, #1
   11560:	str	r2, [r0, #20]
   11564:	mov	r0, #32
   11568:	strb	r0, [r1]
   1156c:	cmn	r0, #1
   11570:	bgt	11534 <__assert_fail@plt+0x55c>
   11574:	b	116ac <__assert_fail@plt+0x6d4>
   11578:	mov	r1, #32
   1157c:	bl	10f60 <__overflow@plt>
   11580:	cmn	r0, #1
   11584:	bgt	11534 <__assert_fail@plt+0x55c>
   11588:	b	116ac <__assert_fail@plt+0x6d4>
   1158c:	ldr	r0, [sp, #16]
   11590:	mov	r6, #8
   11594:	cmp	r0, #0
   11598:	subne	r0, r0, #1
   1159c:	subs	r1, r7, #1
   115a0:	str	r0, [sp, #16]
   115a4:	orr	r0, r7, r5
   115a8:	sbc	r2, r5, #0
   115ac:	cmp	r0, #0
   115b0:	movne	r5, r2
   115b4:	movne	r7, r1
   115b8:	ldrb	r0, [r4]
   115bc:	mov	r8, #1
   115c0:	cmp	r0, #0
   115c4:	bne	11668 <__assert_fail@plt+0x690>
   115c8:	b	11614 <__assert_fail@plt+0x63c>
   115cc:	adds	r7, r7, #1
   115d0:	mov	r0, #0
   115d4:	adcs	r5, r5, #0
   115d8:	adc	r0, r0, #0
   115dc:	cmp	r0, #1
   115e0:	beq	11758 <__assert_fail@plt+0x780>
   115e4:	ldrb	r0, [r4]
   115e8:	mov	r8, #1
   115ec:	cmp	r0, #0
   115f0:	bne	11668 <__assert_fail@plt+0x690>
   115f4:	b	11614 <__assert_fail@plt+0x63c>
   115f8:	movw	r4, #29016	; 0x7158
   115fc:	mov	r6, #32
   11600:	movt	r4, #2
   11604:	ldrb	r0, [r4]
   11608:	mov	r8, #1
   1160c:	cmp	r0, #0
   11610:	bne	11668 <__assert_fail@plt+0x690>
   11614:	bl	10ec4 <__ctype_b_loc@plt>
   11618:	ldr	r0, [r0]
   1161c:	ldrb	r0, [r0, r6, lsl #1]
   11620:	and	r8, r0, #1
   11624:	cmp	r6, #0
   11628:	bpl	11670 <__assert_fail@plt+0x698>
   1162c:	b	116d8 <__assert_fail@plt+0x700>
   11630:	mov	r0, sl
   11634:	bl	10f54 <__uflow@plt>
   11638:	mov	r6, r0
   1163c:	cmn	r0, #1
   11640:	bgt	114e4 <__assert_fail@plt+0x50c>
   11644:	mov	r0, sl
   11648:	bl	12004 <__assert_fail@plt+0x102c>
   1164c:	mov	sl, r0
   11650:	cmp	r0, #0
   11654:	bne	114cc <__assert_fail@plt+0x4f4>
   11658:	mov	sl, #0
   1165c:	tst	r8, #1
   11660:	bne	114ec <__assert_fail@plt+0x514>
   11664:	mov	r8, #0
   11668:	cmp	r6, #0
   1166c:	bmi	116d8 <__assert_fail@plt+0x700>
   11670:	ldr	r0, [r9]
   11674:	ldr	r1, [r0, #20]
   11678:	ldr	r2, [r0, #24]
   1167c:	cmp	r1, r2
   11680:	bcs	1169c <__assert_fail@plt+0x6c4>
   11684:	add	r2, r1, #1
   11688:	str	r2, [r0, #20]
   1168c:	strb	r6, [r1]
   11690:	cmp	r6, #10
   11694:	bne	114cc <__assert_fail@plt+0x4f4>
   11698:	b	114bc <__assert_fail@plt+0x4e4>
   1169c:	uxtb	r1, r6
   116a0:	bl	10f60 <__overflow@plt>
   116a4:	cmn	r0, #1
   116a8:	bgt	11690 <__assert_fail@plt+0x6b8>
   116ac:	bl	10ef4 <__errno_location@plt>
   116b0:	movw	r1, #23145	; 0x5a69
   116b4:	ldr	r4, [r0]
   116b8:	mov	r0, #0
   116bc:	mov	r2, #5
   116c0:	movt	r1, #1
   116c4:	bl	10e10 <dcgettext@plt>
   116c8:	mov	r2, r0
   116cc:	mov	r0, #1
   116d0:	mov	r1, r4
   116d4:	bl	10e7c <error@plt>
   116d8:	bl	121d8 <__assert_fail@plt+0x1200>
   116dc:	movw	r0, #29028	; 0x7164
   116e0:	movt	r0, #2
   116e4:	ldr	r0, [r0]
   116e8:	sub	sp, fp, #28
   116ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f0:	cmn	r0, #3
   116f4:	beq	11708 <__assert_fail@plt+0x730>
   116f8:	cmn	r0, #2
   116fc:	bne	11750 <__assert_fail@plt+0x778>
   11700:	mov	r0, #0
   11704:	bl	110d4 <__assert_fail@plt+0xfc>
   11708:	movw	r0, #28904	; 0x70e8
   1170c:	movw	r2, #22638	; 0x586e
   11710:	mov	r1, #0
   11714:	movt	r0, #2
   11718:	movt	r2, #1
   1171c:	str	r1, [sp, #4]
   11720:	movw	r1, #22593	; 0x5841
   11724:	movt	r1, #1
   11728:	ldr	r3, [r0]
   1172c:	movw	r0, #29004	; 0x714c
   11730:	str	r2, [sp]
   11734:	movw	r2, #22624	; 0x5860
   11738:	movt	r0, #2
   1173c:	movt	r2, #1
   11740:	ldr	r0, [r0]
   11744:	bl	149f0 <__assert_fail@plt+0x3a18>
   11748:	mov	r0, #0
   1174c:	bl	10ed0 <exit@plt>
   11750:	mov	r0, #1
   11754:	bl	110d4 <__assert_fail@plt+0xfc>
   11758:	movw	r1, #23122	; 0x5a52
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	movt	r1, #1
   11768:	bl	10e10 <dcgettext@plt>
   1176c:	mov	r2, r0
   11770:	mov	r0, #1
   11774:	mov	r1, #0
   11778:	bl	10e7c <error@plt>
   1177c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11780:	add	fp, sp, #24
   11784:	movw	r6, #29024	; 0x7160
   11788:	mov	r8, r1
   1178c:	mov	r5, r0
   11790:	mov	r0, #0
   11794:	movt	r6, #2
   11798:	ldr	r1, [r6, #8]
   1179c:	cmp	r1, #0
   117a0:	beq	117b4 <__assert_fail@plt+0x7dc>
   117a4:	ldr	r2, [r6, #12]
   117a8:	add	r2, r2, r1, lsl #3
   117ac:	ldrd	r2, [r2, #-8]
   117b0:	b	117bc <__assert_fail@plt+0x7e4>
   117b4:	mov	r2, #0
   117b8:	mov	r3, #0
   117bc:	subs	r7, r5, r2
   117c0:	sbcs	r4, r8, r3
   117c4:	adc	r0, r0, #0
   117c8:	rsbs	r0, r0, #1
   117cc:	ldr	r0, [r6, #16]
   117d0:	movwne	r4, #0
   117d4:	movwne	r7, #0
   117d8:	cmp	r1, r0
   117dc:	bne	117fc <__assert_fail@plt+0x824>
   117e0:	ldr	r0, [r6, #12]
   117e4:	add	r1, r6, #16
   117e8:	mov	r2, #8
   117ec:	bl	14dd0 <__assert_fail@plt+0x3df8>
   117f0:	str	r0, [r6, #12]
   117f4:	ldr	r1, [r6, #8]
   117f8:	b	11800 <__assert_fail@plt+0x828>
   117fc:	ldr	r0, [r6, #12]
   11800:	add	r2, r1, #1
   11804:	str	r2, [r6, #8]
   11808:	str	r5, [r0, r1, lsl #3]!
   1180c:	str	r8, [r0, #4]
   11810:	movw	r0, #29400	; 0x72d8
   11814:	movt	r0, #2
   11818:	ldr	r1, [r0]
   1181c:	subs	r1, r1, r7
   11820:	rscs	r1, r4, #0
   11824:	bcs	11834 <__assert_fail@plt+0x85c>
   11828:	cmp	r4, #0
   1182c:	bne	11838 <__assert_fail@plt+0x860>
   11830:	str	r7, [r0]
   11834:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11838:	movw	r1, #23336	; 0x5b28
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	10e10 <dcgettext@plt>
   1184c:	mov	r2, r0
   11850:	mov	r0, #1
   11854:	mov	r1, #0
   11858:	bl	10e7c <error@plt>
   1185c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11860:	add	fp, sp, #28
   11864:	sub	sp, sp, #12
   11868:	movw	r8, #29024	; 0x7160
   1186c:	mov	r5, r0
   11870:	mov	r0, #0
   11874:	mov	ip, #1
   11878:	mov	sl, #0
   1187c:	mov	r9, #0
   11880:	mov	r6, #0
   11884:	movt	r8, #2
   11888:	str	r0, [sp, #8]
   1188c:	mov	r0, #0
   11890:	str	r0, [sp, #4]
   11894:	mov	r0, #0
   11898:	str	r0, [sp]
   1189c:	ldrb	r4, [r5]
   118a0:	cmp	r4, #44	; 0x2c
   118a4:	bne	118c4 <__assert_fail@plt+0x8ec>
   118a8:	b	11a98 <__assert_fail@plt+0xac0>
   118ac:	mov	r9, #0
   118b0:	mov	r6, #0
   118b4:	add	r5, r5, #1
   118b8:	ldrb	r4, [r5]
   118bc:	cmp	r4, #44	; 0x2c
   118c0:	beq	11a98 <__assert_fail@plt+0xac0>
   118c4:	cmp	r4, #0
   118c8:	beq	11bd8 <__assert_fail@plt+0xc00>
   118cc:	mov	r7, ip
   118d0:	bl	10ec4 <__ctype_b_loc@plt>
   118d4:	ldr	r0, [r0]
   118d8:	mov	ip, r7
   118dc:	ldrb	r0, [r0, r4, lsl #1]
   118e0:	tst	r0, #1
   118e4:	bne	11a98 <__assert_fail@plt+0xac0>
   118e8:	cmp	r4, #43	; 0x2b
   118ec:	beq	11944 <__assert_fail@plt+0x96c>
   118f0:	cmp	r4, #47	; 0x2f
   118f4:	bne	11990 <__assert_fail@plt+0x9b8>
   118f8:	mov	r9, #0
   118fc:	tst	r6, #1
   11900:	beq	11ac0 <__assert_fail@plt+0xae8>
   11904:	movw	r1, #23359	; 0x5b3f
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	movt	r1, #1
   11914:	bl	10e10 <dcgettext@plt>
   11918:	mov	r6, r0
   1191c:	mov	r0, r5
   11920:	bl	1454c <__assert_fail@plt+0x3574>
   11924:	mov	r3, r0
   11928:	mov	r0, #0
   1192c:	mov	r1, #0
   11930:	mov	r2, r6
   11934:	bl	10e7c <error@plt>
   11938:	mov	sl, #1
   1193c:	mov	ip, #0
   11940:	b	11a84 <__assert_fail@plt+0xaac>
   11944:	tst	r6, #1
   11948:	beq	11ae8 <__assert_fail@plt+0xb10>
   1194c:	movw	r1, #23400	; 0x5b68
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	mov	sl, #0
   1195c:	movt	r1, #1
   11960:	bl	10e10 <dcgettext@plt>
   11964:	mov	r6, r0
   11968:	mov	r0, r5
   1196c:	bl	1454c <__assert_fail@plt+0x3574>
   11970:	mov	r3, r0
   11974:	mov	r0, #0
   11978:	mov	r1, #0
   1197c:	mov	r2, r6
   11980:	bl	10e7c <error@plt>
   11984:	mov	r9, #1
   11988:	mov	ip, #0
   1198c:	b	11a84 <__assert_fail@plt+0xaac>
   11990:	sub	r0, r4, #48	; 0x30
   11994:	cmp	r0, #9
   11998:	bhi	11d98 <__assert_fail@plt+0xdc0>
   1199c:	ldr	r3, [sp, #4]
   119a0:	ands	r1, r6, #1
   119a4:	ldr	r2, [sp]
   119a8:	moveq	r2, r5
   119ac:	str	r2, [sp]
   119b0:	mov	r2, r1
   119b4:	movne	r2, r3
   119b8:	ldr	r3, [sp, #8]
   119bc:	movne	r1, r3
   119c0:	movw	r3, #39321	; 0x9999
   119c4:	movt	r3, #39321	; 0x9999
   119c8:	subs	r3, r3, r1
   119cc:	movw	r3, #39321	; 0x9999
   119d0:	movt	r3, #6553	; 0x1999
   119d4:	sbcs	r3, r3, r2
   119d8:	bcc	11a0c <__assert_fail@plt+0xa34>
   119dc:	mov	r3, #10
   119e0:	add	r6, r2, r2, lsl #2
   119e4:	str	r1, [sp, #8]
   119e8:	str	r2, [sp, #4]
   119ec:	umull	r3, r7, r1, r3
   119f0:	add	r7, r7, r6, lsl #1
   119f4:	adds	r3, r3, r0
   119f8:	mov	r6, #1
   119fc:	adc	r0, r7, r0, asr #31
   11a00:	subs	r7, r3, r1
   11a04:	sbcs	r7, r0, r2
   11a08:	bcs	11bc0 <__assert_fail@plt+0xbe8>
   11a0c:	ldr	r7, [sp]
   11a10:	movw	r1, #23441	; 0x5b91
   11a14:	movt	r1, #1
   11a18:	mov	r0, r7
   11a1c:	bl	10fcc <strspn@plt>
   11a20:	mov	r5, r0
   11a24:	mov	r0, r7
   11a28:	mov	r1, r5
   11a2c:	bl	150ec <__assert_fail@plt+0x4114>
   11a30:	movw	r1, #23452	; 0x5b9c
   11a34:	mov	r6, r0
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	10e10 <dcgettext@plt>
   11a48:	mov	r4, r8
   11a4c:	mov	r8, r0
   11a50:	mov	r0, r6
   11a54:	bl	1454c <__assert_fail@plt+0x3574>
   11a58:	mov	r3, r0
   11a5c:	mov	r2, r8
   11a60:	mov	r0, #0
   11a64:	mov	r1, #0
   11a68:	mov	r8, r4
   11a6c:	bl	10e7c <error@plt>
   11a70:	mov	r0, r6
   11a74:	bl	124b8 <__assert_fail@plt+0x14e0>
   11a78:	add	r0, r7, r5
   11a7c:	mov	ip, #0
   11a80:	sub	r5, r0, #1
   11a84:	mov	r6, #1
   11a88:	add	r5, r5, #1
   11a8c:	ldrb	r4, [r5]
   11a90:	cmp	r4, #44	; 0x2c
   11a94:	bne	118c4 <__assert_fail@plt+0x8ec>
   11a98:	tst	r6, #1
   11a9c:	beq	118b0 <__assert_fail@plt+0x8d8>
   11aa0:	tst	sl, #1
   11aa4:	beq	11ac8 <__assert_fail@plt+0xaf0>
   11aa8:	ldrd	r0, [r8, #32]
   11aac:	orrs	r0, r0, r1
   11ab0:	bne	11c08 <__assert_fail@plt+0xc30>
   11ab4:	ldr	r0, [sp, #8]
   11ab8:	ldr	r1, [sp, #4]
   11abc:	strd	r0, [r8, #32]
   11ac0:	mov	sl, #1
   11ac4:	b	118b0 <__assert_fail@plt+0x8d8>
   11ac8:	tst	r9, #1
   11acc:	beq	11af4 <__assert_fail@plt+0xb1c>
   11ad0:	ldrd	r0, [r8, #40]	; 0x28
   11ad4:	orrs	r0, r0, r1
   11ad8:	bne	11c64 <__assert_fail@plt+0xc8c>
   11adc:	ldr	r0, [sp, #8]
   11ae0:	ldr	r1, [sp, #4]
   11ae4:	strd	r0, [r8, #40]	; 0x28
   11ae8:	mov	r9, #1
   11aec:	mov	sl, #0
   11af0:	b	118b0 <__assert_fail@plt+0x8d8>
   11af4:	ldr	r1, [r8, #8]
   11af8:	cmp	r1, #0
   11afc:	beq	11b14 <__assert_fail@plt+0xb3c>
   11b00:	ldr	r0, [r8, #12]
   11b04:	add	r0, r0, r1, lsl #3
   11b08:	ldr	r3, [r0, #-4]
   11b0c:	ldr	r0, [r0, #-8]
   11b10:	b	11b1c <__assert_fail@plt+0xb44>
   11b14:	mov	r0, #0
   11b18:	mov	r3, #0
   11b1c:	ldr	r2, [sp, #8]
   11b20:	subs	r6, r2, r0
   11b24:	ldr	r0, [sp, #4]
   11b28:	sbcs	r4, r0, r3
   11b2c:	mov	r0, #0
   11b30:	adc	r0, r0, #0
   11b34:	rsbs	r0, r0, #1
   11b38:	ldr	r0, [r8, #16]
   11b3c:	movwne	r4, #0
   11b40:	movwne	r6, #0
   11b44:	cmp	r1, r0
   11b48:	bne	11b70 <__assert_fail@plt+0xb98>
   11b4c:	ldr	r0, [r8, #12]
   11b50:	add	r1, r8, #16
   11b54:	mov	r2, #8
   11b58:	mov	r7, ip
   11b5c:	bl	14dd0 <__assert_fail@plt+0x3df8>
   11b60:	str	r0, [r8, #12]
   11b64:	mov	ip, r7
   11b68:	ldr	r1, [r8, #8]
   11b6c:	b	11b74 <__assert_fail@plt+0xb9c>
   11b70:	ldr	r0, [r8, #12]
   11b74:	add	r2, r1, #1
   11b78:	mov	sl, #0
   11b7c:	str	r2, [r8, #8]
   11b80:	ldr	r2, [sp, #8]
   11b84:	str	r2, [r0, r1, lsl #3]!
   11b88:	ldr	r1, [sp, #4]
   11b8c:	str	r1, [r0, #4]
   11b90:	movw	r0, #29400	; 0x72d8
   11b94:	movt	r0, #2
   11b98:	ldr	r0, [r0]
   11b9c:	subs	r0, r0, r6
   11ba0:	rscs	r0, r4, #0
   11ba4:	bcs	118ac <__assert_fail@plt+0x8d4>
   11ba8:	cmp	r4, #0
   11bac:	bne	11d60 <__assert_fail@plt+0xd88>
   11bb0:	movw	r0, #29400	; 0x72d8
   11bb4:	movt	r0, #2
   11bb8:	str	r6, [r0]
   11bbc:	b	118ac <__assert_fail@plt+0x8d4>
   11bc0:	stmib	sp, {r0, r3}
   11bc4:	add	r5, r5, #1
   11bc8:	ldrb	r4, [r5]
   11bcc:	cmp	r4, #44	; 0x2c
   11bd0:	bne	118c4 <__assert_fail@plt+0x8ec>
   11bd4:	b	11a98 <__assert_fail@plt+0xac0>
   11bd8:	and	r0, ip, r6
   11bdc:	tst	r0, #1
   11be0:	beq	11d84 <__assert_fail@plt+0xdac>
   11be4:	tst	sl, #1
   11be8:	beq	11c40 <__assert_fail@plt+0xc68>
   11bec:	ldrd	r0, [r8, #32]
   11bf0:	orrs	r0, r0, r1
   11bf4:	ldreq	r0, [sp, #8]
   11bf8:	ldreq	r1, [sp, #4]
   11bfc:	strdeq	r0, [r8, #32]
   11c00:	subeq	sp, fp, #28
   11c04:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c08:	movw	r1, #24002	; 0x5dc2
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #1
   11c18:	bl	10e10 <dcgettext@plt>
   11c1c:	mov	r2, r0
   11c20:	mov	r0, #0
   11c24:	mov	r1, #0
   11c28:	bl	10e7c <error@plt>
   11c2c:	ldr	r0, [sp, #8]
   11c30:	ldr	r1, [sp, #4]
   11c34:	strd	r0, [r8, #32]
   11c38:	mov	r0, #1
   11c3c:	bl	10ed0 <exit@plt>
   11c40:	tst	r9, #1
   11c44:	beq	11c9c <__assert_fail@plt+0xcc4>
   11c48:	ldrd	r0, [r8, #40]	; 0x28
   11c4c:	orrs	r0, r0, r1
   11c50:	ldreq	r0, [sp, #8]
   11c54:	ldreq	r1, [sp, #4]
   11c58:	strdeq	r0, [r8, #40]	; 0x28
   11c5c:	subeq	sp, fp, #28
   11c60:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c64:	movw	r1, #24049	; 0x5df1
   11c68:	mov	r0, #0
   11c6c:	mov	r2, #5
   11c70:	movt	r1, #1
   11c74:	bl	10e10 <dcgettext@plt>
   11c78:	mov	r2, r0
   11c7c:	mov	r0, #0
   11c80:	mov	r1, #0
   11c84:	bl	10e7c <error@plt>
   11c88:	ldr	r0, [sp, #8]
   11c8c:	ldr	r1, [sp, #4]
   11c90:	strd	r0, [r8, #40]	; 0x28
   11c94:	mov	r0, #1
   11c98:	bl	10ed0 <exit@plt>
   11c9c:	ldr	r1, [r8, #8]
   11ca0:	mov	r0, #0
   11ca4:	cmp	r1, #0
   11ca8:	beq	11cbc <__assert_fail@plt+0xce4>
   11cac:	ldr	r2, [r8, #12]
   11cb0:	add	r2, r2, r1, lsl #3
   11cb4:	ldrd	r2, [r2, #-8]
   11cb8:	b	11cc4 <__assert_fail@plt+0xcec>
   11cbc:	mov	r2, #0
   11cc0:	mov	r3, #0
   11cc4:	ldr	r6, [sp, #8]
   11cc8:	subs	r5, r6, r2
   11ccc:	ldr	r2, [sp, #4]
   11cd0:	sbcs	r6, r2, r3
   11cd4:	adc	r0, r0, #0
   11cd8:	rsbs	r0, r0, #1
   11cdc:	ldr	r0, [r8, #16]
   11ce0:	movwne	r6, #0
   11ce4:	movwne	r5, #0
   11ce8:	cmp	r1, r0
   11cec:	bne	11d14 <__assert_fail@plt+0xd3c>
   11cf0:	ldr	r0, [r8, #12]
   11cf4:	add	r1, r8, #16
   11cf8:	mov	r2, #8
   11cfc:	mov	r4, ip
   11d00:	bl	14dd0 <__assert_fail@plt+0x3df8>
   11d04:	str	r0, [r8, #12]
   11d08:	mov	ip, r4
   11d0c:	ldr	r1, [r8, #8]
   11d10:	b	11d18 <__assert_fail@plt+0xd40>
   11d14:	ldr	r0, [r8, #12]
   11d18:	add	r2, r1, #1
   11d1c:	str	r2, [r8, #8]
   11d20:	ldr	r2, [sp, #8]
   11d24:	str	r2, [r0, r1, lsl #3]!
   11d28:	ldr	r1, [sp, #4]
   11d2c:	str	r1, [r0, #4]
   11d30:	movw	r0, #29400	; 0x72d8
   11d34:	movt	r0, #2
   11d38:	ldr	r0, [r0]
   11d3c:	subs	r0, r0, r5
   11d40:	rscs	r0, r6, #0
   11d44:	bcs	11d84 <__assert_fail@plt+0xdac>
   11d48:	cmp	r6, #0
   11d4c:	movweq	r0, #29400	; 0x72d8
   11d50:	movteq	r0, #2
   11d54:	streq	r5, [r0]
   11d58:	subeq	sp, fp, #28
   11d5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d60:	movw	r1, #23336	; 0x5b28
   11d64:	mov	r0, #0
   11d68:	mov	r2, #5
   11d6c:	movt	r1, #1
   11d70:	bl	10e10 <dcgettext@plt>
   11d74:	mov	r2, r0
   11d78:	mov	r0, #1
   11d7c:	mov	r1, #0
   11d80:	bl	10e7c <error@plt>
   11d84:	tst	ip, #1
   11d88:	subne	sp, fp, #28
   11d8c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d90:	mov	r0, #1
   11d94:	bl	10ed0 <exit@plt>
   11d98:	movw	r1, #23477	; 0x5bb5
   11d9c:	mov	r0, #0
   11da0:	mov	r2, #5
   11da4:	movt	r1, #1
   11da8:	bl	10e10 <dcgettext@plt>
   11dac:	mov	r4, r0
   11db0:	mov	r0, r5
   11db4:	bl	1454c <__assert_fail@plt+0x3574>
   11db8:	mov	r3, r0
   11dbc:	mov	r0, #0
   11dc0:	mov	r1, #0
   11dc4:	mov	r2, r4
   11dc8:	bl	10e7c <error@plt>
   11dcc:	mov	r0, #1
   11dd0:	bl	10ed0 <exit@plt>
   11dd4:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   11dd8:	add	fp, sp, #24
   11ddc:	movw	ip, #29024	; 0x7160
   11de0:	movt	ip, #2
   11de4:	ldr	r2, [ip, #8]
   11de8:	ldr	r9, [ip, #12]
   11dec:	cmp	r2, #0
   11df0:	beq	11e34 <__assert_fail@plt+0xe5c>
   11df4:	mov	r5, #0
   11df8:	mov	r4, r9
   11dfc:	mov	r3, r2
   11e00:	mov	r7, #0
   11e04:	ldr	r6, [r4]
   11e08:	ldr	r1, [r4, #4]
   11e0c:	orrs	r0, r6, r1
   11e10:	beq	11ebc <__assert_fail@plt+0xee4>
   11e14:	subs	r0, r5, r6
   11e18:	sbcs	r0, r7, r1
   11e1c:	bcs	11ec8 <__assert_fail@plt+0xef0>
   11e20:	add	r4, r4, #8
   11e24:	subs	r3, r3, #1
   11e28:	mov	r5, r6
   11e2c:	mov	r7, r1
   11e30:	bne	11e04 <__assert_fail@plt+0xe2c>
   11e34:	ldr	r3, [ip, #40]	; 0x28
   11e38:	ldr	r7, [ip, #44]	; 0x2c
   11e3c:	ldr	r1, [ip, #32]
   11e40:	ldr	r5, [ip, #36]	; 0x24
   11e44:	orrs	r6, r3, r7
   11e48:	orrsne	r4, r1, r5
   11e4c:	bne	11eec <__assert_fail@plt+0xf14>
   11e50:	cmp	r2, #0
   11e54:	beq	11e80 <__assert_fail@plt+0xea8>
   11e58:	mov	r4, #0
   11e5c:	cmp	r2, #1
   11e60:	bne	11eb0 <__assert_fail@plt+0xed8>
   11e64:	orr	r0, r1, r3
   11e68:	orr	r1, r5, r7
   11e6c:	mov	r5, #0
   11e70:	orrs	r0, r0, r1
   11e74:	ldrdeq	r4, [r9]
   11e78:	strd	r4, [ip, #48]	; 0x30
   11e7c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   11e80:	orr	r0, r1, r5
   11e84:	cmp	r6, #0
   11e88:	mov	r5, #0
   11e8c:	movweq	r3, #8
   11e90:	cmp	r0, #0
   11e94:	movw	r0, #29400	; 0x72d8
   11e98:	movne	r3, r1
   11e9c:	movt	r0, #2
   11ea0:	mov	r4, r3
   11ea4:	str	r3, [r0]
   11ea8:	strd	r4, [ip, #48]	; 0x30
   11eac:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   11eb0:	mov	r5, #0
   11eb4:	strd	r4, [ip, #48]	; 0x30
   11eb8:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   11ebc:	movw	r1, #24096	; 0x5e20
   11ec0:	movt	r1, #1
   11ec4:	b	11ed0 <__assert_fail@plt+0xef8>
   11ec8:	movw	r1, #24117	; 0x5e35
   11ecc:	movt	r1, #1
   11ed0:	mov	r0, #0
   11ed4:	mov	r2, #5
   11ed8:	bl	10e10 <dcgettext@plt>
   11edc:	mov	r2, r0
   11ee0:	mov	r0, #1
   11ee4:	mov	r1, #0
   11ee8:	bl	10e7c <error@plt>
   11eec:	movw	r1, #24145	; 0x5e51
   11ef0:	movt	r1, #1
   11ef4:	b	11ed0 <__assert_fail@plt+0xef8>
   11ef8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11efc:	add	fp, sp, #24
   11f00:	movw	ip, #29024	; 0x7160
   11f04:	mov	r9, r0
   11f08:	mov	r0, #0
   11f0c:	mov	r8, r1
   11f10:	movt	ip, #2
   11f14:	strb	r0, [r3]
   11f18:	ldrd	r6, [ip, #48]	; 0x30
   11f1c:	orrs	r0, r6, r7
   11f20:	bne	11f6c <__assert_fail@plt+0xf94>
   11f24:	ldr	r1, [ip, #8]
   11f28:	ldr	r0, [r2]
   11f2c:	cmp	r0, r1
   11f30:	bcs	11f60 <__assert_fail@plt+0xf88>
   11f34:	ldr	r7, [ip, #12]
   11f38:	add	r4, r7, r0, lsl #3
   11f3c:	ldrd	r6, [r4]
   11f40:	subs	r5, r9, r6
   11f44:	sbcs	r5, r8, r7
   11f48:	bcc	11f90 <__assert_fail@plt+0xfb8>
   11f4c:	add	r0, r0, #1
   11f50:	add	r4, r4, #8
   11f54:	cmp	r0, r1
   11f58:	str	r0, [r2]
   11f5c:	bcc	11f3c <__assert_fail@plt+0xf64>
   11f60:	ldrd	r6, [ip, #32]
   11f64:	orrs	r0, r6, r7
   11f68:	beq	11f9c <__assert_fail@plt+0xfc4>
   11f6c:	mov	r0, r9
   11f70:	mov	r1, r8
   11f74:	mov	r2, r6
   11f78:	mov	r3, r7
   11f7c:	bl	154e4 <__assert_fail@plt+0x450c>
   11f80:	adds	r0, r6, r9
   11f84:	adc	r1, r7, r8
   11f88:	subs	r6, r0, r2
   11f8c:	sbc	r7, r1, r3
   11f90:	mov	r0, r6
   11f94:	mov	r1, r7
   11f98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f9c:	ldrd	r6, [ip, #40]	; 0x28
   11fa0:	orrs	r0, r6, r7
   11fa4:	beq	11fc0 <__assert_fail@plt+0xfe8>
   11fa8:	ldr	r0, [ip, #12]
   11fac:	add	r0, r0, r1, lsl #3
   11fb0:	ldrd	r0, [r0, #-8]
   11fb4:	subs	r0, r9, r0
   11fb8:	sbc	r1, r8, r1
   11fbc:	b	11f74 <__assert_fail@plt+0xf9c>
   11fc0:	mov	r0, #1
   11fc4:	mov	r6, #0
   11fc8:	mov	r7, #0
   11fcc:	strb	r0, [r3]
   11fd0:	mov	r0, r6
   11fd4:	mov	r1, r7
   11fd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11fdc:	movw	r1, #29024	; 0x7160
   11fe0:	mov	r2, #0
   11fe4:	cmp	r0, #0
   11fe8:	movt	r1, #2
   11fec:	strb	r2, [r1]
   11ff0:	movw	r2, #28896	; 0x70e0
   11ff4:	movt	r2, #2
   11ff8:	movne	r2, r0
   11ffc:	str	r2, [r1, #20]
   12000:	bx	lr
   12004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12008:	add	fp, sp, #28
   1200c:	sub	sp, sp, #4
   12010:	movw	r5, #29024	; 0x7160
   12014:	cmp	r0, #0
   12018:	movt	r5, #2
   1201c:	beq	120a8 <__assert_fail@plt+0x10d0>
   12020:	ldr	r7, [r5, #24]
   12024:	cmp	r7, #0
   12028:	beq	121b8 <__assert_fail@plt+0x11e0>
   1202c:	mov	r4, r0
   12030:	bl	10ef4 <__errno_location@plt>
   12034:	ldr	r1, [r4]
   12038:	mov	r6, r0
   1203c:	ldr	r0, [r0]
   12040:	lsl	r1, r1, #26
   12044:	and	r8, r0, r1, asr #31
   12048:	movw	r1, #24278	; 0x5ed6
   1204c:	mov	r0, r7
   12050:	movt	r1, #1
   12054:	bl	10dbc <strcmp@plt>
   12058:	cmp	r0, #0
   1205c:	beq	121a4 <__assert_fail@plt+0x11cc>
   12060:	mov	r0, r4
   12064:	bl	123c0 <__assert_fail@plt+0x13e8>
   12068:	cmp	r0, #0
   1206c:	ldrne	r8, [r6]
   12070:	cmp	r8, #0
   12074:	beq	120a8 <__assert_fail@plt+0x10d0>
   12078:	ldr	r2, [r5, #24]
   1207c:	mov	r0, #0
   12080:	mov	r1, #3
   12084:	bl	142a0 <__assert_fail@plt+0x32c8>
   12088:	movw	r2, #23517	; 0x5bdd
   1208c:	mov	r3, r0
   12090:	mov	r0, #0
   12094:	mov	r1, r8
   12098:	movt	r2, #1
   1209c:	bl	10e7c <error@plt>
   120a0:	mov	r0, #1
   120a4:	str	r0, [r5, #4]
   120a8:	ldr	r0, [r5, #20]
   120ac:	add	r1, r0, #4
   120b0:	str	r1, [r5, #20]
   120b4:	ldr	r7, [r0]
   120b8:	cmp	r7, #0
   120bc:	beq	12178 <__assert_fail@plt+0x11a0>
   120c0:	movw	r9, #24278	; 0x5ed6
   120c4:	movw	sl, #23517	; 0x5bdd
   120c8:	mov	r8, #1
   120cc:	movt	r9, #1
   120d0:	movt	sl, #1
   120d4:	mov	r0, r7
   120d8:	mov	r1, r9
   120dc:	bl	10dbc <strcmp@plt>
   120e0:	cmp	r0, #0
   120e4:	beq	12108 <__assert_fail@plt+0x1130>
   120e8:	movw	r1, #23155	; 0x5a73
   120ec:	mov	r0, r7
   120f0:	movt	r1, #1
   120f4:	bl	10f9c <fopen64@plt>
   120f8:	mov	r6, r0
   120fc:	cmp	r6, #0
   12100:	beq	12120 <__assert_fail@plt+0x1148>
   12104:	b	12188 <__assert_fail@plt+0x11b0>
   12108:	movw	r0, #29000	; 0x7148
   1210c:	strb	r8, [r5]
   12110:	movt	r0, #2
   12114:	ldr	r6, [r0]
   12118:	cmp	r6, #0
   1211c:	bne	12188 <__assert_fail@plt+0x11b0>
   12120:	bl	10ef4 <__errno_location@plt>
   12124:	ldr	r4, [r0]
   12128:	mov	r0, #0
   1212c:	mov	r1, #3
   12130:	mov	r2, r7
   12134:	mov	r6, #0
   12138:	bl	142a0 <__assert_fail@plt+0x32c8>
   1213c:	mov	r3, r0
   12140:	mov	r0, #0
   12144:	mov	r1, r4
   12148:	mov	r2, sl
   1214c:	bl	10e7c <error@plt>
   12150:	str	r8, [r5, #4]
   12154:	ldr	r0, [r5, #20]
   12158:	add	r1, r0, #4
   1215c:	str	r1, [r5, #20]
   12160:	ldr	r7, [r0]
   12164:	cmp	r7, #0
   12168:	bne	120d4 <__assert_fail@plt+0x10fc>
   1216c:	mov	r0, r6
   12170:	sub	sp, fp, #28
   12174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12178:	mov	r6, #0
   1217c:	mov	r0, r6
   12180:	sub	sp, fp, #28
   12184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12188:	mov	r0, r6
   1218c:	mov	r1, #2
   12190:	str	r7, [r5, #24]
   12194:	bl	12384 <__assert_fail@plt+0x13ac>
   12198:	mov	r0, r6
   1219c:	sub	sp, fp, #28
   121a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a4:	mov	r0, r4
   121a8:	bl	10f90 <clearerr_unlocked@plt>
   121ac:	cmp	r8, #0
   121b0:	bne	12078 <__assert_fail@plt+0x10a0>
   121b4:	b	120a8 <__assert_fail@plt+0x10d0>
   121b8:	movw	r0, #23520	; 0x5be0
   121bc:	movw	r1, #23530	; 0x5bea
   121c0:	movw	r3, #23550	; 0x5bfe
   121c4:	mov	r2, #340	; 0x154
   121c8:	movt	r0, #1
   121cc:	movt	r1, #1
   121d0:	movt	r3, #1
   121d4:	bl	10fd8 <__assert_fail@plt>
   121d8:	push	{fp, lr}
   121dc:	mov	fp, sp
   121e0:	movw	r0, #29024	; 0x7160
   121e4:	movt	r0, #2
   121e8:	ldrb	r0, [r0]
   121ec:	cmp	r0, #1
   121f0:	popne	{fp, pc}
   121f4:	movw	r0, #29000	; 0x7148
   121f8:	movt	r0, #2
   121fc:	ldr	r0, [r0]
   12200:	bl	123c0 <__assert_fail@plt+0x13e8>
   12204:	cmp	r0, #0
   12208:	bne	12210 <__assert_fail@plt+0x1238>
   1220c:	pop	{fp, pc}
   12210:	bl	10ef4 <__errno_location@plt>
   12214:	ldr	r1, [r0]
   12218:	movw	r2, #24278	; 0x5ed6
   1221c:	mov	r0, #1
   12220:	movt	r2, #1
   12224:	bl	10e7c <error@plt>
   12228:	push	{r4, sl, fp, lr}
   1222c:	add	fp, sp, #8
   12230:	movw	r1, #23574	; 0x5c16
   12234:	mov	r0, #0
   12238:	mov	r2, #5
   1223c:	movt	r1, #1
   12240:	bl	10e10 <dcgettext@plt>
   12244:	movw	r4, #29004	; 0x714c
   12248:	movt	r4, #2
   1224c:	ldr	r1, [r4]
   12250:	bl	10da4 <fputs_unlocked@plt>
   12254:	movw	r1, #23637	; 0x5c55
   12258:	mov	r0, #0
   1225c:	mov	r2, #5
   12260:	movt	r1, #1
   12264:	bl	10e10 <dcgettext@plt>
   12268:	ldr	r1, [r4]
   1226c:	pop	{r4, sl, fp, lr}
   12270:	b	10da4 <fputs_unlocked@plt>
   12274:	movw	r1, #29080	; 0x7198
   12278:	movt	r1, #2
   1227c:	str	r0, [r1, #4]
   12280:	bx	lr
   12284:	movw	r1, #29080	; 0x7198
   12288:	movt	r1, #2
   1228c:	strb	r0, [r1]
   12290:	bx	lr
   12294:	push	{r4, r5, r6, sl, fp, lr}
   12298:	add	fp, sp, #16
   1229c:	sub	sp, sp, #8
   122a0:	movw	r0, #29004	; 0x714c
   122a4:	movt	r0, #2
   122a8:	ldr	r0, [r0]
   122ac:	bl	1527c <__assert_fail@plt+0x42a4>
   122b0:	cmp	r0, #0
   122b4:	beq	122dc <__assert_fail@plt+0x1304>
   122b8:	movw	r5, #29080	; 0x7198
   122bc:	movt	r5, #2
   122c0:	ldrb	r0, [r5]
   122c4:	cmp	r0, #0
   122c8:	beq	12308 <__assert_fail@plt+0x1330>
   122cc:	bl	10ef4 <__errno_location@plt>
   122d0:	ldr	r0, [r0]
   122d4:	cmp	r0, #32
   122d8:	bne	12308 <__assert_fail@plt+0x1330>
   122dc:	movw	r0, #28992	; 0x7140
   122e0:	movt	r0, #2
   122e4:	ldr	r0, [r0]
   122e8:	bl	1527c <__assert_fail@plt+0x42a4>
   122ec:	cmp	r0, #0
   122f0:	subeq	sp, fp, #16
   122f4:	popeq	{r4, r5, r6, sl, fp, pc}
   122f8:	movw	r0, #28908	; 0x70ec
   122fc:	movt	r0, #2
   12300:	ldr	r0, [r0]
   12304:	bl	10dec <_exit@plt>
   12308:	movw	r1, #23145	; 0x5a69
   1230c:	mov	r0, #0
   12310:	mov	r2, #5
   12314:	movt	r1, #1
   12318:	bl	10e10 <dcgettext@plt>
   1231c:	ldr	r6, [r5, #4]
   12320:	mov	r4, r0
   12324:	bl	10ef4 <__errno_location@plt>
   12328:	ldr	r5, [r0]
   1232c:	cmp	r6, #0
   12330:	bne	1234c <__assert_fail@plt+0x1374>
   12334:	movw	r2, #23517	; 0x5bdd
   12338:	mov	r0, #0
   1233c:	mov	r1, r5
   12340:	mov	r3, r4
   12344:	movt	r2, #1
   12348:	b	1236c <__assert_fail@plt+0x1394>
   1234c:	mov	r0, r6
   12350:	bl	141c4 <__assert_fail@plt+0x31ec>
   12354:	movw	r2, #24205	; 0x5e8d
   12358:	mov	r3, r0
   1235c:	str	r4, [sp]
   12360:	mov	r0, #0
   12364:	mov	r1, r5
   12368:	movt	r2, #1
   1236c:	bl	10e7c <error@plt>
   12370:	movw	r0, #28908	; 0x70ec
   12374:	movt	r0, #2
   12378:	ldr	r0, [r0]
   1237c:	bl	10dec <_exit@plt>
   12380:	b	10dc8 <posix_fadvise64@plt>
   12384:	cmp	r0, #0
   12388:	bxeq	lr
   1238c:	push	{r4, sl, fp, lr}
   12390:	add	fp, sp, #8
   12394:	sub	sp, sp, #16
   12398:	mov	r4, r1
   1239c:	bl	10f24 <fileno@plt>
   123a0:	mov	r1, #0
   123a4:	mov	r2, #0
   123a8:	mov	r3, #0
   123ac:	str	r1, [sp]
   123b0:	stmib	sp, {r1, r4}
   123b4:	bl	10dc8 <posix_fadvise64@plt>
   123b8:	sub	sp, fp, #8
   123bc:	pop	{r4, sl, fp, pc}
   123c0:	push	{r4, r5, r6, sl, fp, lr}
   123c4:	add	fp, sp, #16
   123c8:	sub	sp, sp, #8
   123cc:	mov	r4, r0
   123d0:	bl	10f24 <fileno@plt>
   123d4:	cmn	r0, #1
   123d8:	ble	1244c <__assert_fail@plt+0x1474>
   123dc:	mov	r0, r4
   123e0:	bl	10ea0 <__freading@plt>
   123e4:	cmp	r0, #0
   123e8:	beq	12414 <__assert_fail@plt+0x143c>
   123ec:	mov	r0, r4
   123f0:	bl	10f24 <fileno@plt>
   123f4:	mov	r1, #1
   123f8:	mov	r2, #0
   123fc:	mov	r3, #0
   12400:	str	r1, [sp]
   12404:	bl	10e4c <lseek64@plt>
   12408:	and	r0, r0, r1
   1240c:	cmn	r0, #1
   12410:	beq	1244c <__assert_fail@plt+0x1474>
   12414:	mov	r0, r4
   12418:	bl	1245c <__assert_fail@plt+0x1484>
   1241c:	cmp	r0, #0
   12420:	beq	1244c <__assert_fail@plt+0x1474>
   12424:	bl	10ef4 <__errno_location@plt>
   12428:	ldr	r6, [r0]
   1242c:	mov	r5, r0
   12430:	mov	r0, r4
   12434:	bl	10f3c <fclose@plt>
   12438:	cmp	r6, #0
   1243c:	strne	r6, [r5]
   12440:	mvnne	r0, #0
   12444:	sub	sp, fp, #16
   12448:	pop	{r4, r5, r6, sl, fp, pc}
   1244c:	mov	r0, r4
   12450:	sub	sp, fp, #16
   12454:	pop	{r4, r5, r6, sl, fp, lr}
   12458:	b	10f3c <fclose@plt>
   1245c:	push	{r4, sl, fp, lr}
   12460:	add	fp, sp, #8
   12464:	sub	sp, sp, #8
   12468:	mov	r4, r0
   1246c:	cmp	r0, #0
   12470:	beq	124a8 <__assert_fail@plt+0x14d0>
   12474:	mov	r0, r4
   12478:	bl	10ea0 <__freading@plt>
   1247c:	cmp	r0, #0
   12480:	beq	124a8 <__assert_fail@plt+0x14d0>
   12484:	ldrb	r0, [r4, #1]
   12488:	tst	r0, #1
   1248c:	beq	124a8 <__assert_fail@plt+0x14d0>
   12490:	mov	r0, #1
   12494:	mov	r2, #0
   12498:	mov	r3, #0
   1249c:	str	r0, [sp]
   124a0:	mov	r0, r4
   124a4:	bl	124e0 <__assert_fail@plt+0x1508>
   124a8:	mov	r0, r4
   124ac:	sub	sp, fp, #8
   124b0:	pop	{r4, sl, fp, lr}
   124b4:	b	10dd4 <fflush@plt>
   124b8:	push	{r4, r5, r6, sl, fp, lr}
   124bc:	add	fp, sp, #16
   124c0:	mov	r4, r0
   124c4:	bl	10ef4 <__errno_location@plt>
   124c8:	ldr	r6, [r0]
   124cc:	mov	r5, r0
   124d0:	mov	r0, r4
   124d4:	bl	10de0 <free@plt>
   124d8:	str	r6, [r5]
   124dc:	pop	{r4, r5, r6, sl, fp, pc}
   124e0:	push	{r4, r5, r6, r7, fp, lr}
   124e4:	add	fp, sp, #16
   124e8:	sub	sp, sp, #8
   124ec:	mov	r4, r0
   124f0:	ldr	r0, [r0, #4]
   124f4:	mov	r5, r3
   124f8:	mov	r6, r2
   124fc:	ldr	r1, [r4, #8]
   12500:	cmp	r1, r0
   12504:	bne	12520 <__assert_fail@plt+0x1548>
   12508:	ldrd	r0, [r4, #16]
   1250c:	cmp	r1, r0
   12510:	bne	12520 <__assert_fail@plt+0x1548>
   12514:	ldr	r0, [r4, #36]	; 0x24
   12518:	cmp	r0, #0
   1251c:	beq	12538 <__assert_fail@plt+0x1560>
   12520:	mov	r0, r4
   12524:	mov	r2, r6
   12528:	mov	r3, r5
   1252c:	sub	sp, fp, #16
   12530:	pop	{r4, r5, r6, r7, fp, lr}
   12534:	b	10f48 <fseeko64@plt>
   12538:	ldr	r7, [fp, #8]
   1253c:	mov	r0, r4
   12540:	bl	10f24 <fileno@plt>
   12544:	mov	r2, r6
   12548:	mov	r3, r5
   1254c:	str	r7, [sp]
   12550:	bl	10e4c <lseek64@plt>
   12554:	and	r2, r0, r1
   12558:	cmn	r2, #1
   1255c:	beq	1257c <__assert_fail@plt+0x15a4>
   12560:	strd	r0, [r4, #80]	; 0x50
   12564:	ldr	r0, [r4]
   12568:	bic	r0, r0, #16
   1256c:	str	r0, [r4]
   12570:	mov	r0, #0
   12574:	sub	sp, fp, #16
   12578:	pop	{r4, r5, r6, r7, fp, pc}
   1257c:	mvn	r0, #0
   12580:	sub	sp, fp, #16
   12584:	pop	{r4, r5, r6, r7, fp, pc}
   12588:	push	{r4, r5, fp, lr}
   1258c:	add	fp, sp, #8
   12590:	cmp	r0, #0
   12594:	beq	12628 <__assert_fail@plt+0x1650>
   12598:	mov	r1, #47	; 0x2f
   1259c:	mov	r4, r0
   125a0:	bl	10f78 <strrchr@plt>
   125a4:	cmp	r0, #0
   125a8:	mov	r5, r4
   125ac:	addne	r5, r0, #1
   125b0:	sub	r0, r5, r4
   125b4:	cmp	r0, #7
   125b8:	blt	1260c <__assert_fail@plt+0x1634>
   125bc:	movw	r1, #24268	; 0x5ecc
   125c0:	sub	r0, r5, #7
   125c4:	mov	r2, #7
   125c8:	movt	r1, #1
   125cc:	bl	10fb4 <strncmp@plt>
   125d0:	cmp	r0, #0
   125d4:	bne	1260c <__assert_fail@plt+0x1634>
   125d8:	movw	r1, #24276	; 0x5ed4
   125dc:	mov	r0, r5
   125e0:	mov	r2, #3
   125e4:	movt	r1, #1
   125e8:	bl	10fb4 <strncmp@plt>
   125ec:	cmp	r0, #0
   125f0:	beq	125fc <__assert_fail@plt+0x1624>
   125f4:	mov	r4, r5
   125f8:	b	1260c <__assert_fail@plt+0x1634>
   125fc:	movw	r0, #28976	; 0x7130
   12600:	add	r4, r5, #3
   12604:	movt	r0, #2
   12608:	str	r4, [r0]
   1260c:	movw	r0, #28980	; 0x7134
   12610:	movt	r0, #2
   12614:	str	r4, [r0]
   12618:	movw	r0, #29088	; 0x71a0
   1261c:	movt	r0, #2
   12620:	str	r4, [r0]
   12624:	pop	{r4, r5, fp, pc}
   12628:	movw	r0, #28992	; 0x7140
   1262c:	mov	r1, #55	; 0x37
   12630:	mov	r2, #1
   12634:	movt	r0, #2
   12638:	ldr	r3, [r0]
   1263c:	movw	r0, #24212	; 0x5e94
   12640:	movt	r0, #1
   12644:	bl	10e40 <fwrite@plt>
   12648:	bl	10fc0 <abort@plt>
   1264c:	push	{r4, r5, r6, sl, fp, lr}
   12650:	add	fp, sp, #16
   12654:	mov	r4, r0
   12658:	movw	r0, #29096	; 0x71a8
   1265c:	movt	r0, #2
   12660:	cmp	r4, #0
   12664:	moveq	r4, r0
   12668:	bl	10ef4 <__errno_location@plt>
   1266c:	ldr	r6, [r0]
   12670:	mov	r5, r0
   12674:	mov	r0, r4
   12678:	mov	r1, #48	; 0x30
   1267c:	bl	15084 <__assert_fail@plt+0x40ac>
   12680:	str	r6, [r5]
   12684:	pop	{r4, r5, r6, sl, fp, pc}
   12688:	movw	r1, #29096	; 0x71a8
   1268c:	cmp	r0, #0
   12690:	movt	r1, #2
   12694:	movne	r1, r0
   12698:	ldr	r0, [r1]
   1269c:	bx	lr
   126a0:	movw	r2, #29096	; 0x71a8
   126a4:	cmp	r0, #0
   126a8:	movt	r2, #2
   126ac:	movne	r2, r0
   126b0:	str	r1, [r2]
   126b4:	bx	lr
   126b8:	movw	r3, #29096	; 0x71a8
   126bc:	cmp	r0, #0
   126c0:	and	r2, r2, #1
   126c4:	movt	r3, #2
   126c8:	movne	r3, r0
   126cc:	ubfx	r0, r1, #5, #3
   126d0:	and	r1, r1, #31
   126d4:	add	ip, r3, r0, lsl #2
   126d8:	mov	r0, #1
   126dc:	ldr	r3, [ip, #8]
   126e0:	and	r0, r0, r3, lsr r1
   126e4:	eor	r2, r0, r2
   126e8:	eor	r1, r3, r2, lsl r1
   126ec:	str	r1, [ip, #8]
   126f0:	bx	lr
   126f4:	movw	r2, #29096	; 0x71a8
   126f8:	cmp	r0, #0
   126fc:	movt	r2, #2
   12700:	movne	r2, r0
   12704:	ldr	r0, [r2, #4]
   12708:	str	r1, [r2, #4]
   1270c:	bx	lr
   12710:	push	{fp, lr}
   12714:	mov	fp, sp
   12718:	movw	r3, #29096	; 0x71a8
   1271c:	cmp	r0, #0
   12720:	movt	r3, #2
   12724:	movne	r3, r0
   12728:	cmp	r1, #0
   1272c:	mov	r0, #10
   12730:	cmpne	r2, #0
   12734:	str	r0, [r3]
   12738:	bne	12740 <__assert_fail@plt+0x1768>
   1273c:	bl	10fc0 <abort@plt>
   12740:	str	r1, [r3, #40]	; 0x28
   12744:	str	r2, [r3, #44]	; 0x2c
   12748:	pop	{fp, pc}
   1274c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12750:	add	fp, sp, #28
   12754:	sub	sp, sp, #20
   12758:	mov	r7, r0
   1275c:	ldr	r0, [fp, #8]
   12760:	movw	r5, #29096	; 0x71a8
   12764:	mov	r8, r3
   12768:	mov	r9, r2
   1276c:	mov	sl, r1
   12770:	movt	r5, #2
   12774:	cmp	r0, #0
   12778:	movne	r5, r0
   1277c:	bl	10ef4 <__errno_location@plt>
   12780:	ldr	r2, [r5, #40]	; 0x28
   12784:	ldr	r3, [r5, #44]	; 0x2c
   12788:	mov	r4, r0
   1278c:	ldm	r5, {r0, r1}
   12790:	add	r5, r5, #8
   12794:	ldr	r6, [r4]
   12798:	stm	sp, {r0, r1, r5}
   1279c:	mov	r0, r7
   127a0:	mov	r1, sl
   127a4:	str	r2, [sp, #12]
   127a8:	str	r3, [sp, #16]
   127ac:	mov	r2, r9
   127b0:	mov	r3, r8
   127b4:	bl	127c4 <__assert_fail@plt+0x17ec>
   127b8:	str	r6, [r4]
   127bc:	sub	sp, fp, #28
   127c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c8:	add	fp, sp, #28
   127cc:	sub	sp, sp, #156	; 0x9c
   127d0:	str	r0, [fp, #-84]	; 0xffffffac
   127d4:	add	r0, r2, #1
   127d8:	mov	r6, r1
   127dc:	mov	r7, r3
   127e0:	str	r2, [fp, #-80]	; 0xffffffb0
   127e4:	str	r0, [sp, #80]	; 0x50
   127e8:	ldr	r0, [fp, #12]
   127ec:	and	r1, r0, #1
   127f0:	str	r1, [sp, #36]	; 0x24
   127f4:	and	r1, r0, #4
   127f8:	str	r1, [sp, #32]
   127fc:	ubfx	r8, r0, #1, #1
   12800:	bl	10e58 <__ctype_get_mb_cur_max@plt>
   12804:	str	r0, [sp, #40]	; 0x28
   12808:	ldr	r0, [fp, #24]
   1280c:	ldr	r4, [fp, #8]
   12810:	mov	r1, #0
   12814:	str	r1, [fp, #-52]	; 0xffffffcc
   12818:	mov	r1, #0
   1281c:	str	r1, [sp, #60]	; 0x3c
   12820:	mov	r1, #1
   12824:	str	r1, [sp, #84]	; 0x54
   12828:	str	r0, [sp, #76]	; 0x4c
   1282c:	ldr	r0, [fp, #20]
   12830:	str	r0, [sp, #72]	; 0x48
   12834:	mov	r0, #0
   12838:	str	r0, [sp, #56]	; 0x38
   1283c:	mov	r0, #0
   12840:	str	r0, [fp, #-88]	; 0xffffffa8
   12844:	mov	r0, #0
   12848:	str	r0, [fp, #-72]	; 0xffffffb8
   1284c:	mov	r0, #0
   12850:	cmp	r4, #10
   12854:	bhi	13b70 <__assert_fail@plt+0x2b98>
   12858:	add	r1, pc, #24
   1285c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12860:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12864:	mov	r5, r6
   12868:	mov	r9, #0
   1286c:	mov	r2, #1
   12870:	mov	r3, #0
   12874:	ldr	pc, [r1, r4, lsl #2]
   12878:	andeq	r2, r1, r0, asr #18
   1287c:	andeq	r2, r1, ip, ror r9
   12880:	andeq	r2, r1, r0, asr r9
   12884:	andeq	r2, r1, r8, lsr r9
   12888:	andeq	r2, r1, r0, ror r9
   1288c:	ldrdeq	r2, [r1], -r4
   12890:	andeq	r2, r1, r0, ror #18
   12894:	andeq	r2, r1, ip, asr #24
   12898:	andeq	r2, r1, r4, lsr #17
   1289c:	andeq	r2, r1, r4, lsr #17
   128a0:	ldrdeq	r2, [r1], -ip
   128a4:	movw	r6, #24358	; 0x5f26
   128a8:	mov	r0, #0
   128ac:	mov	r2, #5
   128b0:	movt	r6, #1
   128b4:	mov	r1, r6
   128b8:	bl	10e10 <dcgettext@plt>
   128bc:	cmp	r0, r6
   128c0:	str	r0, [sp, #72]	; 0x48
   128c4:	bne	12ab4 <__assert_fail@plt+0x1adc>
   128c8:	bl	15300 <__assert_fail@plt+0x4328>
   128cc:	ldrb	r1, [r0]
   128d0:	and	r1, r1, #223	; 0xdf
   128d4:	cmp	r1, #71	; 0x47
   128d8:	beq	12a34 <__assert_fail@plt+0x1a5c>
   128dc:	cmp	r1, #85	; 0x55
   128e0:	bne	12a98 <__assert_fail@plt+0x1ac0>
   128e4:	ldrb	r1, [r0, #1]
   128e8:	and	r1, r1, #223	; 0xdf
   128ec:	cmp	r1, #84	; 0x54
   128f0:	bne	12a98 <__assert_fail@plt+0x1ac0>
   128f4:	ldrb	r1, [r0, #2]
   128f8:	and	r1, r1, #223	; 0xdf
   128fc:	cmp	r1, #70	; 0x46
   12900:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12904:	ldrb	r1, [r0, #3]
   12908:	cmp	r1, #45	; 0x2d
   1290c:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12910:	ldrb	r1, [r0, #4]
   12914:	cmp	r1, #56	; 0x38
   12918:	bne	12a98 <__assert_fail@plt+0x1ac0>
   1291c:	ldrb	r0, [r0, #5]
   12920:	cmp	r0, #0
   12924:	movw	r0, #24360	; 0x5f28
   12928:	movt	r0, #1
   1292c:	str	r0, [sp, #72]	; 0x48
   12930:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12934:	b	12ab4 <__assert_fail@plt+0x1adc>
   12938:	mov	r0, #1
   1293c:	b	1297c <__assert_fail@plt+0x19a4>
   12940:	mov	r4, #0
   12944:	mov	r9, #0
   12948:	mov	r2, r0
   1294c:	b	129cc <__assert_fail@plt+0x19f4>
   12950:	tst	r8, #1
   12954:	bne	1297c <__assert_fail@plt+0x19a4>
   12958:	mov	r2, r0
   1295c:	b	129a4 <__assert_fail@plt+0x19cc>
   12960:	mov	r0, #1
   12964:	mov	r9, #0
   12968:	mov	r4, #5
   1296c:	b	129e8 <__assert_fail@plt+0x1a10>
   12970:	mov	r2, #1
   12974:	tst	r8, #1
   12978:	beq	129a4 <__assert_fail@plt+0x19cc>
   1297c:	mov	r1, #1
   12980:	mov	r9, #0
   12984:	mov	r4, #2
   12988:	mov	r2, r0
   1298c:	mov	r3, #1
   12990:	str	r1, [fp, #-72]	; 0xffffffb8
   12994:	movw	r1, #24188	; 0x5e7c
   12998:	movt	r1, #1
   1299c:	str	r1, [fp, #-88]	; 0xffffffa8
   129a0:	b	12c4c <__assert_fail@plt+0x1c74>
   129a4:	cmp	r5, #0
   129a8:	mov	r9, #1
   129ac:	mov	r4, #2
   129b0:	movne	r0, #39	; 0x27
   129b4:	strbne	r0, [ip]
   129b8:	movw	r0, #24188	; 0x5e7c
   129bc:	movt	r0, #1
   129c0:	str	r0, [fp, #-88]	; 0xffffffa8
   129c4:	mov	r0, #1
   129c8:	str	r0, [fp, #-72]	; 0xffffffb8
   129cc:	mov	r3, #0
   129d0:	b	12c4c <__assert_fail@plt+0x1c74>
   129d4:	mov	r4, #5
   129d8:	tst	r8, #1
   129dc:	beq	12a04 <__assert_fail@plt+0x1a2c>
   129e0:	mov	r0, #1
   129e4:	mov	r9, #0
   129e8:	str	r0, [fp, #-72]	; 0xffffffb8
   129ec:	movw	r0, #24356	; 0x5f24
   129f0:	mov	r2, #1
   129f4:	mov	r3, #1
   129f8:	movt	r0, #1
   129fc:	str	r0, [fp, #-88]	; 0xffffffa8
   12a00:	b	12c4c <__assert_fail@plt+0x1c74>
   12a04:	cmp	r5, #0
   12a08:	mov	r3, #0
   12a0c:	mov	r9, #1
   12a10:	mov	r2, #1
   12a14:	movne	r0, #34	; 0x22
   12a18:	strbne	r0, [ip]
   12a1c:	movw	r0, #24356	; 0x5f24
   12a20:	movt	r0, #1
   12a24:	str	r0, [fp, #-88]	; 0xffffffa8
   12a28:	mov	r0, #1
   12a2c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a30:	b	12c4c <__assert_fail@plt+0x1c74>
   12a34:	ldrb	r1, [r0, #1]
   12a38:	and	r1, r1, #223	; 0xdf
   12a3c:	cmp	r1, #66	; 0x42
   12a40:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12a44:	ldrb	r1, [r0, #2]
   12a48:	cmp	r1, #49	; 0x31
   12a4c:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12a50:	ldrb	r1, [r0, #3]
   12a54:	cmp	r1, #56	; 0x38
   12a58:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12a5c:	ldrb	r1, [r0, #4]
   12a60:	cmp	r1, #48	; 0x30
   12a64:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12a68:	ldrb	r1, [r0, #5]
   12a6c:	cmp	r1, #51	; 0x33
   12a70:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12a74:	ldrb	r1, [r0, #6]
   12a78:	cmp	r1, #48	; 0x30
   12a7c:	bne	12a98 <__assert_fail@plt+0x1ac0>
   12a80:	ldrb	r0, [r0, #7]
   12a84:	cmp	r0, #0
   12a88:	movw	r0, #24368	; 0x5f30
   12a8c:	movt	r0, #1
   12a90:	str	r0, [sp, #72]	; 0x48
   12a94:	beq	12ab4 <__assert_fail@plt+0x1adc>
   12a98:	movw	r1, #24356	; 0x5f24
   12a9c:	movw	r0, #24188	; 0x5e7c
   12aa0:	cmp	r4, #9
   12aa4:	movt	r1, #1
   12aa8:	movt	r0, #1
   12aac:	moveq	r0, r1
   12ab0:	str	r0, [sp, #72]	; 0x48
   12ab4:	movw	r6, #24188	; 0x5e7c
   12ab8:	mov	r0, #0
   12abc:	mov	r2, #5
   12ac0:	movt	r6, #1
   12ac4:	mov	r1, r6
   12ac8:	bl	10e10 <dcgettext@plt>
   12acc:	cmp	r0, r6
   12ad0:	str	r0, [sp, #76]	; 0x4c
   12ad4:	beq	12b20 <__assert_fail@plt+0x1b48>
   12ad8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12adc:	mov	r9, #0
   12ae0:	tst	r8, #1
   12ae4:	bne	12c28 <__assert_fail@plt+0x1c50>
   12ae8:	ldr	r0, [sp, #72]	; 0x48
   12aec:	ldrb	r0, [r0]
   12af0:	cmp	r0, #0
   12af4:	beq	12c28 <__assert_fail@plt+0x1c50>
   12af8:	ldr	r1, [sp, #72]	; 0x48
   12afc:	mov	r9, #0
   12b00:	add	r1, r1, #1
   12b04:	cmp	r9, r5
   12b08:	strbcc	r0, [ip, r9]
   12b0c:	ldrb	r0, [r1, r9]
   12b10:	add	r9, r9, #1
   12b14:	cmp	r0, #0
   12b18:	bne	12b04 <__assert_fail@plt+0x1b2c>
   12b1c:	b	12c28 <__assert_fail@plt+0x1c50>
   12b20:	bl	15300 <__assert_fail@plt+0x4328>
   12b24:	ldrb	r1, [r0]
   12b28:	and	r1, r1, #223	; 0xdf
   12b2c:	cmp	r1, #71	; 0x47
   12b30:	beq	12ba0 <__assert_fail@plt+0x1bc8>
   12b34:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b38:	cmp	r1, #85	; 0x55
   12b3c:	bne	12bfc <__assert_fail@plt+0x1c24>
   12b40:	ldrb	r1, [r0, #1]
   12b44:	and	r1, r1, #223	; 0xdf
   12b48:	cmp	r1, #84	; 0x54
   12b4c:	bne	12bfc <__assert_fail@plt+0x1c24>
   12b50:	ldrb	r1, [r0, #2]
   12b54:	and	r1, r1, #223	; 0xdf
   12b58:	cmp	r1, #70	; 0x46
   12b5c:	bne	12bfc <__assert_fail@plt+0x1c24>
   12b60:	ldrb	r1, [r0, #3]
   12b64:	cmp	r1, #45	; 0x2d
   12b68:	bne	12bfc <__assert_fail@plt+0x1c24>
   12b6c:	ldrb	r1, [r0, #4]
   12b70:	cmp	r1, #56	; 0x38
   12b74:	bne	12bfc <__assert_fail@plt+0x1c24>
   12b78:	ldrb	r0, [r0, #5]
   12b7c:	cmp	r0, #0
   12b80:	bne	12bfc <__assert_fail@plt+0x1c24>
   12b84:	movw	r0, #24364	; 0x5f2c
   12b88:	movt	r0, #1
   12b8c:	str	r0, [sp, #76]	; 0x4c
   12b90:	mov	r9, #0
   12b94:	tst	r8, #1
   12b98:	beq	12ae8 <__assert_fail@plt+0x1b10>
   12b9c:	b	12c28 <__assert_fail@plt+0x1c50>
   12ba0:	ldrb	r1, [r0, #1]
   12ba4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ba8:	and	r1, r1, #223	; 0xdf
   12bac:	cmp	r1, #66	; 0x42
   12bb0:	bne	12bfc <__assert_fail@plt+0x1c24>
   12bb4:	ldrb	r1, [r0, #2]
   12bb8:	cmp	r1, #49	; 0x31
   12bbc:	bne	12bfc <__assert_fail@plt+0x1c24>
   12bc0:	ldrb	r1, [r0, #3]
   12bc4:	cmp	r1, #56	; 0x38
   12bc8:	bne	12bfc <__assert_fail@plt+0x1c24>
   12bcc:	ldrb	r1, [r0, #4]
   12bd0:	cmp	r1, #48	; 0x30
   12bd4:	bne	12bfc <__assert_fail@plt+0x1c24>
   12bd8:	ldrb	r1, [r0, #5]
   12bdc:	cmp	r1, #51	; 0x33
   12be0:	bne	12bfc <__assert_fail@plt+0x1c24>
   12be4:	ldrb	r1, [r0, #6]
   12be8:	cmp	r1, #48	; 0x30
   12bec:	bne	12bfc <__assert_fail@plt+0x1c24>
   12bf0:	ldrb	r0, [r0, #7]
   12bf4:	cmp	r0, #0
   12bf8:	beq	13a10 <__assert_fail@plt+0x2a38>
   12bfc:	movw	r0, #24188	; 0x5e7c
   12c00:	cmp	r4, #9
   12c04:	movt	r0, #1
   12c08:	mov	r1, r0
   12c0c:	movw	r0, #24356	; 0x5f24
   12c10:	movt	r0, #1
   12c14:	moveq	r1, r0
   12c18:	str	r1, [sp, #76]	; 0x4c
   12c1c:	mov	r9, #0
   12c20:	tst	r8, #1
   12c24:	beq	12ae8 <__assert_fail@plt+0x1b10>
   12c28:	ldr	r6, [sp, #76]	; 0x4c
   12c2c:	mov	r0, r6
   12c30:	bl	10ee8 <strlen@plt>
   12c34:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12c3c:	str	r0, [fp, #-72]	; 0xffffffb8
   12c40:	str	r6, [fp, #-88]	; 0xffffffa8
   12c44:	mov	r2, #1
   12c48:	mov	r3, r8
   12c4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c50:	str	r4, [fp, #-64]	; 0xffffffc0
   12c54:	mov	sl, #0
   12c58:	str	r3, [fp, #-76]	; 0xffffffb4
   12c5c:	str	r2, [sp, #88]	; 0x58
   12c60:	cmp	r0, #0
   12c64:	movwne	r0, #1
   12c68:	and	r1, r0, r3
   12c6c:	and	r1, r2, r1
   12c70:	str	r1, [sp, #48]	; 0x30
   12c74:	sub	r1, r4, #2
   12c78:	clz	r1, r1
   12c7c:	lsr	r1, r1, #5
   12c80:	and	r1, r1, r3
   12c84:	str	r1, [sp, #44]	; 0x2c
   12c88:	subs	r1, r4, #2
   12c8c:	eor	r4, r3, #1
   12c90:	movwne	r1, #1
   12c94:	str	r4, [sp, #92]	; 0x5c
   12c98:	orr	r4, r1, r4
   12c9c:	and	r1, r1, r2
   12ca0:	and	r0, r0, r1
   12ca4:	str	r4, [sp, #64]	; 0x40
   12ca8:	ldr	r4, [sp, #84]	; 0x54
   12cac:	str	r0, [fp, #-60]	; 0xffffffc4
   12cb0:	orr	r0, r1, r3
   12cb4:	ldr	r1, [fp, #16]
   12cb8:	eor	r0, r0, #1
   12cbc:	clz	r1, r1
   12cc0:	lsr	r1, r1, #5
   12cc4:	orr	r0, r1, r0
   12cc8:	str	r0, [fp, #-68]	; 0xffffffbc
   12ccc:	eor	r0, r2, #1
   12cd0:	str	r0, [sp, #52]	; 0x34
   12cd4:	cmn	r7, #1
   12cd8:	beq	12ce8 <__assert_fail@plt+0x1d10>
   12cdc:	cmp	sl, r7
   12ce0:	bne	12cf4 <__assert_fail@plt+0x1d1c>
   12ce4:	b	13988 <__assert_fail@plt+0x29b0>
   12ce8:	ldrb	r0, [lr, sl]
   12cec:	cmp	r0, #0
   12cf0:	beq	13990 <__assert_fail@plt+0x29b8>
   12cf4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12cf8:	cmp	r0, #0
   12cfc:	beq	12d5c <__assert_fail@plt+0x1d84>
   12d00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d04:	mov	r6, r5
   12d08:	add	r5, sl, r0
   12d0c:	cmp	r0, #2
   12d10:	bcc	12d7c <__assert_fail@plt+0x1da4>
   12d14:	mov	r0, #0
   12d18:	cmn	r7, #1
   12d1c:	str	r0, [fp, #-56]	; 0xffffffc8
   12d20:	bne	12d38 <__assert_fail@plt+0x1d60>
   12d24:	mov	r0, lr
   12d28:	bl	10ee8 <strlen@plt>
   12d2c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d30:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d34:	mov	r7, r0
   12d38:	cmp	r5, r7
   12d3c:	bls	12d8c <__assert_fail@plt+0x1db4>
   12d40:	mov	r0, #0
   12d44:	mov	r5, r6
   12d48:	str	r0, [fp, #-48]	; 0xffffffd0
   12d4c:	ldrb	r6, [lr, sl]
   12d50:	cmp	r6, #126	; 0x7e
   12d54:	bls	12ddc <__assert_fail@plt+0x1e04>
   12d58:	b	13338 <__assert_fail@plt+0x2360>
   12d5c:	mov	r0, #0
   12d60:	str	r0, [fp, #-56]	; 0xffffffc8
   12d64:	mov	r0, #0
   12d68:	str	r0, [fp, #-48]	; 0xffffffd0
   12d6c:	ldrb	r6, [lr, sl]
   12d70:	cmp	r6, #126	; 0x7e
   12d74:	bls	12ddc <__assert_fail@plt+0x1e04>
   12d78:	b	13338 <__assert_fail@plt+0x2360>
   12d7c:	mov	r0, #0
   12d80:	str	r0, [fp, #-56]	; 0xffffffc8
   12d84:	cmp	r5, r7
   12d88:	bhi	12d40 <__assert_fail@plt+0x1d68>
   12d8c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12d90:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d94:	add	r0, lr, sl
   12d98:	bl	10edc <bcmp@plt>
   12d9c:	ldr	r2, [sp, #92]	; 0x5c
   12da0:	cmp	r0, #0
   12da4:	mov	r1, r0
   12da8:	mov	r5, r6
   12dac:	movwne	r1, #1
   12db0:	orr	r1, r1, r2
   12db4:	tst	r1, #1
   12db8:	beq	13a50 <__assert_fail@plt+0x2a78>
   12dbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12dc0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12dc4:	clz	r0, r0
   12dc8:	lsr	r0, r0, #5
   12dcc:	str	r0, [fp, #-48]	; 0xffffffd0
   12dd0:	ldrb	r6, [lr, sl]
   12dd4:	cmp	r6, #126	; 0x7e
   12dd8:	bhi	13338 <__assert_fail@plt+0x2360>
   12ddc:	add	r3, pc, #16
   12de0:	mov	r8, #1
   12de4:	mov	r2, #110	; 0x6e
   12de8:	mov	r0, #97	; 0x61
   12dec:	mov	r1, #0
   12df0:	ldr	pc, [r3, r6, lsl #2]
   12df4:	strdeq	r3, [r1], -r0
   12df8:	andeq	r3, r1, r8, lsr r3
   12dfc:	andeq	r3, r1, r8, lsr r3
   12e00:	andeq	r3, r1, r8, lsr r3
   12e04:	andeq	r3, r1, r8, lsr r3
   12e08:	andeq	r3, r1, r8, lsr r3
   12e0c:	andeq	r3, r1, r8, lsr r3
   12e10:	andeq	r3, r1, ip, ror #7
   12e14:	ldrdeq	r3, [r1], -r0
   12e18:	andeq	r3, r1, r8, asr #1
   12e1c:	ldrdeq	r3, [r1], -ip
   12e20:	andeq	r3, r1, ip, lsl #4
   12e24:	andeq	r3, r1, r0, asr #1
   12e28:	ldrdeq	r3, [r1], -r8
   12e2c:	andeq	r3, r1, r8, lsr r3
   12e30:	andeq	r3, r1, r8, lsr r3
   12e34:	andeq	r3, r1, r8, lsr r3
   12e38:	andeq	r3, r1, r8, lsr r3
   12e3c:	andeq	r3, r1, r8, lsr r3
   12e40:	andeq	r3, r1, r8, lsr r3
   12e44:	andeq	r3, r1, r8, lsr r3
   12e48:	andeq	r3, r1, r8, lsr r3
   12e4c:	andeq	r3, r1, r8, lsr r3
   12e50:	andeq	r3, r1, r8, lsr r3
   12e54:	andeq	r3, r1, r8, lsr r3
   12e58:	andeq	r3, r1, r8, lsr r3
   12e5c:	andeq	r3, r1, r8, lsr r3
   12e60:	andeq	r3, r1, r8, lsr r3
   12e64:	andeq	r3, r1, r8, lsr r3
   12e68:	andeq	r3, r1, r8, lsr r3
   12e6c:	andeq	r3, r1, r8, lsr r3
   12e70:	andeq	r3, r1, r8, lsr r3
   12e74:	andeq	r3, r1, r4, rrx
   12e78:	andeq	r3, r1, r8, rrx
   12e7c:	andeq	r3, r1, r8, rrx
   12e80:	andeq	r3, r1, r8, asr r0
   12e84:	andeq	r3, r1, r8, rrx
   12e88:	strdeq	r2, [r1], -r0
   12e8c:	andeq	r3, r1, r8, rrx
   12e90:	andeq	r3, r1, r4, lsl r2
   12e94:	andeq	r3, r1, r8, rrx
   12e98:	andeq	r3, r1, r8, rrx
   12e9c:	andeq	r3, r1, r8, rrx
   12ea0:	strdeq	r2, [r1], -r0
   12ea4:	strdeq	r2, [r1], -r0
   12ea8:	strdeq	r2, [r1], -r0
   12eac:	strdeq	r2, [r1], -r0
   12eb0:	strdeq	r2, [r1], -r0
   12eb4:	strdeq	r2, [r1], -r0
   12eb8:	strdeq	r2, [r1], -r0
   12ebc:	strdeq	r2, [r1], -r0
   12ec0:	strdeq	r2, [r1], -r0
   12ec4:	strdeq	r2, [r1], -r0
   12ec8:	strdeq	r2, [r1], -r0
   12ecc:	strdeq	r2, [r1], -r0
   12ed0:	strdeq	r2, [r1], -r0
   12ed4:	strdeq	r2, [r1], -r0
   12ed8:	strdeq	r2, [r1], -r0
   12edc:	strdeq	r2, [r1], -r0
   12ee0:	andeq	r3, r1, r8, rrx
   12ee4:	andeq	r3, r1, r8, rrx
   12ee8:	andeq	r3, r1, r8, rrx
   12eec:	andeq	r3, r1, r8, rrx
   12ef0:	ldrdeq	r3, [r1], -r8
   12ef4:	andeq	r3, r1, r8, lsr r3
   12ef8:	strdeq	r2, [r1], -r0
   12efc:	strdeq	r2, [r1], -r0
   12f00:	strdeq	r2, [r1], -r0
   12f04:	strdeq	r2, [r1], -r0
   12f08:	strdeq	r2, [r1], -r0
   12f0c:	strdeq	r2, [r1], -r0
   12f10:	strdeq	r2, [r1], -r0
   12f14:	strdeq	r2, [r1], -r0
   12f18:	strdeq	r2, [r1], -r0
   12f1c:	strdeq	r2, [r1], -r0
   12f20:	strdeq	r2, [r1], -r0
   12f24:	strdeq	r2, [r1], -r0
   12f28:	strdeq	r2, [r1], -r0
   12f2c:	strdeq	r2, [r1], -r0
   12f30:	strdeq	r2, [r1], -r0
   12f34:	strdeq	r2, [r1], -r0
   12f38:	strdeq	r2, [r1], -r0
   12f3c:	strdeq	r2, [r1], -r0
   12f40:	strdeq	r2, [r1], -r0
   12f44:	strdeq	r2, [r1], -r0
   12f48:	strdeq	r2, [r1], -r0
   12f4c:	strdeq	r2, [r1], -r0
   12f50:	strdeq	r2, [r1], -r0
   12f54:	strdeq	r2, [r1], -r0
   12f58:	strdeq	r2, [r1], -r0
   12f5c:	strdeq	r2, [r1], -r0
   12f60:	andeq	r3, r1, r8, rrx
   12f64:	muleq	r1, ip, r0
   12f68:	strdeq	r2, [r1], -r0
   12f6c:	andeq	r3, r1, r8, rrx
   12f70:	strdeq	r2, [r1], -r0
   12f74:	andeq	r3, r1, r8, rrx
   12f78:	strdeq	r2, [r1], -r0
   12f7c:	strdeq	r2, [r1], -r0
   12f80:	strdeq	r2, [r1], -r0
   12f84:	strdeq	r2, [r1], -r0
   12f88:	strdeq	r2, [r1], -r0
   12f8c:	strdeq	r2, [r1], -r0
   12f90:	strdeq	r2, [r1], -r0
   12f94:	strdeq	r2, [r1], -r0
   12f98:	strdeq	r2, [r1], -r0
   12f9c:	strdeq	r2, [r1], -r0
   12fa0:	strdeq	r2, [r1], -r0
   12fa4:	strdeq	r2, [r1], -r0
   12fa8:	strdeq	r2, [r1], -r0
   12fac:	strdeq	r2, [r1], -r0
   12fb0:	strdeq	r2, [r1], -r0
   12fb4:	strdeq	r2, [r1], -r0
   12fb8:	strdeq	r2, [r1], -r0
   12fbc:	strdeq	r2, [r1], -r0
   12fc0:	strdeq	r2, [r1], -r0
   12fc4:	strdeq	r2, [r1], -r0
   12fc8:	strdeq	r2, [r1], -r0
   12fcc:	strdeq	r2, [r1], -r0
   12fd0:	strdeq	r2, [r1], -r0
   12fd4:	strdeq	r2, [r1], -r0
   12fd8:	strdeq	r2, [r1], -r0
   12fdc:	strdeq	r2, [r1], -r0
   12fe0:	andeq	r3, r1, r0, lsr r0
   12fe4:	andeq	r3, r1, r8, rrx
   12fe8:	andeq	r3, r1, r0, lsr r0
   12fec:	andeq	r3, r1, r8, asr r0
   12ff0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ff4:	tst	r0, #1
   12ff8:	bne	132b0 <__assert_fail@plt+0x22d8>
   12ffc:	ldr	r1, [fp, #16]
   13000:	ubfx	r0, r6, #5, #3
   13004:	mov	r2, #1
   13008:	ldr	r0, [r1, r0, lsl #2]
   1300c:	and	r1, r6, #31
   13010:	tst	r0, r2, lsl r1
   13014:	beq	132b0 <__assert_fail@plt+0x22d8>
   13018:	mov	r0, r6
   1301c:	mov	r1, r8
   13020:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13024:	tst	r2, #1
   13028:	beq	132d0 <__assert_fail@plt+0x22f8>
   1302c:	b	13a2c <__assert_fail@plt+0x2a54>
   13030:	cmp	r7, #1
   13034:	beq	13058 <__assert_fail@plt+0x2080>
   13038:	mov	r8, #0
   1303c:	cmn	r7, #1
   13040:	bne	1329c <__assert_fail@plt+0x22c4>
   13044:	ldrb	r0, [lr, #1]
   13048:	cmp	r0, #0
   1304c:	beq	13058 <__assert_fail@plt+0x2080>
   13050:	mvn	r7, #0
   13054:	b	1329c <__assert_fail@plt+0x22c4>
   13058:	mov	r8, #0
   1305c:	cmp	sl, #0
   13060:	bne	1329c <__assert_fail@plt+0x22c4>
   13064:	mov	r1, #1
   13068:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1306c:	cmp	r0, #2
   13070:	bne	13088 <__assert_fail@plt+0x20b0>
   13074:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13078:	mov	r8, r1
   1307c:	tst	r0, #1
   13080:	beq	12ff0 <__assert_fail@plt+0x2018>
   13084:	b	13a2c <__assert_fail@plt+0x2a54>
   13088:	mov	r8, r1
   1308c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13090:	tst	r0, #1
   13094:	beq	12ffc <__assert_fail@plt+0x2024>
   13098:	b	132b0 <__assert_fail@plt+0x22d8>
   1309c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130a0:	cmp	r0, #2
   130a4:	bne	13364 <__assert_fail@plt+0x238c>
   130a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130ac:	tst	r0, #1
   130b0:	bne	13a2c <__assert_fail@plt+0x2a54>
   130b4:	mov	r0, #0
   130b8:	str	r0, [fp, #-56]	; 0xffffffc8
   130bc:	b	1337c <__assert_fail@plt+0x23a4>
   130c0:	mov	r0, #102	; 0x66
   130c4:	b	133ec <__assert_fail@plt+0x2414>
   130c8:	mov	r2, #116	; 0x74
   130cc:	b	130dc <__assert_fail@plt+0x2104>
   130d0:	mov	r0, #98	; 0x62
   130d4:	b	133ec <__assert_fail@plt+0x2414>
   130d8:	mov	r2, #114	; 0x72
   130dc:	ldr	r0, [sp, #64]	; 0x40
   130e0:	tst	r0, #1
   130e4:	mov	r0, r2
   130e8:	bne	133ec <__assert_fail@plt+0x2414>
   130ec:	b	13a2c <__assert_fail@plt+0x2a54>
   130f0:	ldr	r0, [sp, #88]	; 0x58
   130f4:	tst	r0, #1
   130f8:	beq	1340c <__assert_fail@plt+0x2434>
   130fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13100:	tst	r0, #1
   13104:	bne	13b68 <__assert_fail@plt+0x2b90>
   13108:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1310c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13110:	subs	r0, r0, #2
   13114:	movwne	r0, #1
   13118:	orr	r0, r0, r1
   1311c:	tst	r0, #1
   13120:	bne	1315c <__assert_fail@plt+0x2184>
   13124:	cmp	r9, r5
   13128:	movcc	r0, #39	; 0x27
   1312c:	strbcc	r0, [ip, r9]
   13130:	add	r0, r9, #1
   13134:	cmp	r0, r5
   13138:	movcc	r1, #36	; 0x24
   1313c:	strbcc	r1, [ip, r0]
   13140:	add	r0, r9, #2
   13144:	add	r9, r9, #3
   13148:	cmp	r0, r5
   1314c:	movcc	r1, #39	; 0x27
   13150:	strbcc	r1, [ip, r0]
   13154:	mov	r0, #1
   13158:	str	r0, [fp, #-52]	; 0xffffffcc
   1315c:	mov	r1, #1
   13160:	cmp	r9, r5
   13164:	mov	r8, #0
   13168:	mov	r6, #48	; 0x30
   1316c:	str	r1, [fp, #-56]	; 0xffffffc8
   13170:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13174:	movcc	r0, #92	; 0x5c
   13178:	strbcc	r0, [ip, r9]
   1317c:	add	r0, r9, #1
   13180:	cmp	r1, #2
   13184:	beq	135d8 <__assert_fail@plt+0x2600>
   13188:	add	r1, sl, #1
   1318c:	cmp	r1, r7
   13190:	bcs	135d8 <__assert_fail@plt+0x2600>
   13194:	ldrb	r1, [lr, r1]
   13198:	sub	r1, r1, #48	; 0x30
   1319c:	uxtb	r1, r1
   131a0:	cmp	r1, #9
   131a4:	bhi	135d8 <__assert_fail@plt+0x2600>
   131a8:	cmp	r0, r5
   131ac:	movcc	r1, #48	; 0x30
   131b0:	strbcc	r1, [ip, r0]
   131b4:	add	r0, r9, #2
   131b8:	add	r9, r9, #3
   131bc:	cmp	r0, r5
   131c0:	movcc	r1, #48	; 0x30
   131c4:	strbcc	r1, [ip, r0]
   131c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131cc:	tst	r0, #1
   131d0:	beq	12ffc <__assert_fail@plt+0x2024>
   131d4:	b	132b0 <__assert_fail@plt+0x22d8>
   131d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131dc:	mov	r6, #63	; 0x3f
   131e0:	cmp	r0, #5
   131e4:	beq	135ec <__assert_fail@plt+0x2614>
   131e8:	mov	r1, #0
   131ec:	cmp	r0, #2
   131f0:	str	r1, [fp, #-56]	; 0xffffffc8
   131f4:	bne	136b4 <__assert_fail@plt+0x26dc>
   131f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131fc:	mov	r8, #0
   13200:	tst	r0, #1
   13204:	beq	12ff0 <__assert_fail@plt+0x2018>
   13208:	b	13a2c <__assert_fail@plt+0x2a54>
   1320c:	mov	r0, #118	; 0x76
   13210:	b	133ec <__assert_fail@plt+0x2414>
   13214:	mov	r0, #1
   13218:	mov	r6, #39	; 0x27
   1321c:	str	r0, [sp, #60]	; 0x3c
   13220:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13224:	cmp	r0, #2
   13228:	bne	1342c <__assert_fail@plt+0x2454>
   1322c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13230:	tst	r0, #1
   13234:	bne	13a2c <__assert_fail@plt+0x2a54>
   13238:	ldr	r2, [sp, #56]	; 0x38
   1323c:	clz	r1, r5
   13240:	mov	r8, #1
   13244:	lsr	r1, r1, #5
   13248:	cmp	r2, #0
   1324c:	mov	r0, r2
   13250:	movwne	r0, #1
   13254:	orrs	r0, r0, r1
   13258:	moveq	r2, r5
   1325c:	moveq	r5, r0
   13260:	cmp	r9, r5
   13264:	str	r2, [sp, #56]	; 0x38
   13268:	movcc	r0, #39	; 0x27
   1326c:	strbcc	r0, [ip, r9]
   13270:	add	r0, r9, #1
   13274:	cmp	r0, r5
   13278:	movcc	r1, #92	; 0x5c
   1327c:	strbcc	r1, [ip, r0]
   13280:	add	r0, r9, #2
   13284:	add	r9, r9, #3
   13288:	cmp	r0, r5
   1328c:	movcc	r1, #39	; 0x27
   13290:	strbcc	r1, [ip, r0]
   13294:	mov	r0, #0
   13298:	str	r0, [fp, #-52]	; 0xffffffcc
   1329c:	mov	r0, #0
   132a0:	str	r0, [fp, #-56]	; 0xffffffc8
   132a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132a8:	tst	r0, #1
   132ac:	beq	12ffc <__assert_fail@plt+0x2024>
   132b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   132b4:	mov	r1, r8
   132b8:	cmp	r0, #0
   132bc:	mov	r0, r6
   132c0:	beq	13384 <__assert_fail@plt+0x23ac>
   132c4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   132c8:	tst	r2, #1
   132cc:	bne	13a2c <__assert_fail@plt+0x2a54>
   132d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   132d4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   132d8:	subs	r2, r2, #2
   132dc:	movwne	r2, #1
   132e0:	orr	r2, r2, r3
   132e4:	tst	r2, #1
   132e8:	bne	13324 <__assert_fail@plt+0x234c>
   132ec:	cmp	r9, r5
   132f0:	movcc	r2, #39	; 0x27
   132f4:	strbcc	r2, [ip, r9]
   132f8:	add	r2, r9, #1
   132fc:	cmp	r2, r5
   13300:	movcc	r3, #36	; 0x24
   13304:	strbcc	r3, [ip, r2]
   13308:	add	r2, r9, #2
   1330c:	add	r9, r9, #3
   13310:	cmp	r2, r5
   13314:	movcc	r3, #39	; 0x27
   13318:	strbcc	r3, [ip, r2]
   1331c:	mov	r2, #1
   13320:	str	r2, [fp, #-52]	; 0xffffffcc
   13324:	cmp	r9, r5
   13328:	movcc	r2, #92	; 0x5c
   1332c:	strbcc	r2, [ip, r9]
   13330:	add	r9, r9, #1
   13334:	b	133cc <__assert_fail@plt+0x23f4>
   13338:	ldr	r0, [sp, #40]	; 0x28
   1333c:	cmp	r0, #1
   13340:	bne	13440 <__assert_fail@plt+0x2468>
   13344:	bl	10ec4 <__ctype_b_loc@plt>
   13348:	ldr	r0, [r0]
   1334c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13350:	mov	r1, #1
   13354:	add	r0, r0, r6, lsl #1
   13358:	ldrb	r0, [r0, #1]
   1335c:	ubfx	r8, r0, #6, #1
   13360:	b	13798 <__assert_fail@plt+0x27c0>
   13364:	ldr	r1, [sp, #48]	; 0x30
   13368:	mov	r0, #0
   1336c:	str	r0, [fp, #-56]	; 0xffffffc8
   13370:	mov	r0, #92	; 0x5c
   13374:	cmp	r1, #0
   13378:	beq	133ec <__assert_fail@plt+0x2414>
   1337c:	mov	r6, #92	; 0x5c
   13380:	mov	r8, #0
   13384:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13388:	cmp	r0, #0
   1338c:	bne	133c4 <__assert_fail@plt+0x23ec>
   13390:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13394:	tst	r0, #1
   13398:	beq	133c4 <__assert_fail@plt+0x23ec>
   1339c:	cmp	r9, r5
   133a0:	movcc	r0, #39	; 0x27
   133a4:	strbcc	r0, [ip, r9]
   133a8:	add	r0, r9, #1
   133ac:	add	r9, r9, #2
   133b0:	cmp	r0, r5
   133b4:	movcc	r1, #39	; 0x27
   133b8:	strbcc	r1, [ip, r0]
   133bc:	mov	r0, #0
   133c0:	str	r0, [fp, #-52]	; 0xffffffcc
   133c4:	mov	r1, r8
   133c8:	mov	r0, r6
   133cc:	cmp	r9, r5
   133d0:	and	r4, r4, r1
   133d4:	strbcc	r0, [ip, r9]
   133d8:	add	r9, r9, #1
   133dc:	add	sl, sl, #1
   133e0:	cmn	r7, #1
   133e4:	bne	12cdc <__assert_fail@plt+0x1d04>
   133e8:	b	12ce8 <__assert_fail@plt+0x1d10>
   133ec:	mov	r1, #0
   133f0:	mov	r8, #0
   133f4:	str	r1, [fp, #-56]	; 0xffffffc8
   133f8:	ldr	r1, [sp, #88]	; 0x58
   133fc:	tst	r1, #1
   13400:	mov	r1, #0
   13404:	beq	12ff0 <__assert_fail@plt+0x2018>
   13408:	b	132c4 <__assert_fail@plt+0x22ec>
   1340c:	ldr	r0, [sp, #36]	; 0x24
   13410:	mov	r6, #0
   13414:	mov	r8, #0
   13418:	cmp	r0, #0
   1341c:	mov	r0, #0
   13420:	str	r0, [fp, #-56]	; 0xffffffc8
   13424:	bne	133dc <__assert_fail@plt+0x2404>
   13428:	b	12ff0 <__assert_fail@plt+0x2018>
   1342c:	mov	r8, #1
   13430:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13434:	tst	r0, #1
   13438:	beq	12ffc <__assert_fail@plt+0x2024>
   1343c:	b	132b0 <__assert_fail@plt+0x22d8>
   13440:	mov	r0, #0
   13444:	cmn	r7, #1
   13448:	str	r0, [fp, #-36]	; 0xffffffdc
   1344c:	str	r0, [fp, #-40]	; 0xffffffd8
   13450:	bne	13464 <__assert_fail@plt+0x248c>
   13454:	mov	r0, lr
   13458:	bl	10ee8 <strlen@plt>
   1345c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13460:	mov	r7, r0
   13464:	ldr	r0, [sp, #44]	; 0x2c
   13468:	str	r4, [sp, #84]	; 0x54
   1346c:	str	r5, [sp, #28]
   13470:	cmp	r0, #0
   13474:	beq	136c8 <__assert_fail@plt+0x26f0>
   13478:	ldr	r0, [sp, #80]	; 0x50
   1347c:	mov	r8, #1
   13480:	mov	r5, #0
   13484:	add	r0, r0, sl
   13488:	str	r0, [sp, #24]
   1348c:	sub	r0, fp, #40	; 0x28
   13490:	mov	r3, r0
   13494:	b	134d0 <__assert_fail@plt+0x24f8>
   13498:	ldr	r5, [sp, #68]	; 0x44
   1349c:	add	r5, r0, r5
   134a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   134a4:	bl	10e34 <iswprint@plt>
   134a8:	cmp	r0, #0
   134ac:	sub	r4, fp, #40	; 0x28
   134b0:	movwne	r0, #1
   134b4:	and	r8, r8, r0
   134b8:	mov	r0, r4
   134bc:	bl	10e04 <mbsinit@plt>
   134c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   134c4:	mov	r3, r4
   134c8:	cmp	r0, #0
   134cc:	bne	1378c <__assert_fail@plt+0x27b4>
   134d0:	str	r5, [sp, #68]	; 0x44
   134d4:	add	r5, r5, sl
   134d8:	sub	r0, fp, #44	; 0x2c
   134dc:	add	r1, lr, r5
   134e0:	sub	r2, r7, r5
   134e4:	bl	15338 <__assert_fail@plt+0x4360>
   134e8:	cmn	r0, #2
   134ec:	beq	1374c <__assert_fail@plt+0x2774>
   134f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   134f4:	cmn	r0, #1
   134f8:	beq	13740 <__assert_fail@plt+0x2768>
   134fc:	cmp	r0, #0
   13500:	beq	13744 <__assert_fail@plt+0x276c>
   13504:	cmp	r0, #2
   13508:	bcc	13498 <__assert_fail@plt+0x24c0>
   1350c:	ldr	r1, [sp, #68]	; 0x44
   13510:	ldr	r2, [sp, #24]
   13514:	add	r1, r2, r1
   13518:	sub	r2, r0, #1
   1351c:	ldrb	r3, [r1]
   13520:	sub	r3, r3, #91	; 0x5b
   13524:	cmp	r3, #33	; 0x21
   13528:	bls	13548 <__assert_fail@plt+0x2570>
   1352c:	add	r1, r1, #1
   13530:	subs	r2, r2, #1
   13534:	beq	13498 <__assert_fail@plt+0x24c0>
   13538:	ldrb	r3, [r1]
   1353c:	sub	r3, r3, #91	; 0x5b
   13540:	cmp	r3, #33	; 0x21
   13544:	bhi	1352c <__assert_fail@plt+0x2554>
   13548:	add	r5, pc, #0
   1354c:	ldr	pc, [r5, r3, lsl #2]
   13550:	andeq	r3, r1, r4, ror #20
   13554:	andeq	r3, r1, r4, ror #20
   13558:	andeq	r3, r1, ip, lsr #10
   1355c:	andeq	r3, r1, r4, ror #20
   13560:	andeq	r3, r1, ip, lsr #10
   13564:	andeq	r3, r1, r4, ror #20
   13568:	andeq	r3, r1, ip, lsr #10
   1356c:	andeq	r3, r1, ip, lsr #10
   13570:	andeq	r3, r1, ip, lsr #10
   13574:	andeq	r3, r1, ip, lsr #10
   13578:	andeq	r3, r1, ip, lsr #10
   1357c:	andeq	r3, r1, ip, lsr #10
   13580:	andeq	r3, r1, ip, lsr #10
   13584:	andeq	r3, r1, ip, lsr #10
   13588:	andeq	r3, r1, ip, lsr #10
   1358c:	andeq	r3, r1, ip, lsr #10
   13590:	andeq	r3, r1, ip, lsr #10
   13594:	andeq	r3, r1, ip, lsr #10
   13598:	andeq	r3, r1, ip, lsr #10
   1359c:	andeq	r3, r1, ip, lsr #10
   135a0:	andeq	r3, r1, ip, lsr #10
   135a4:	andeq	r3, r1, ip, lsr #10
   135a8:	andeq	r3, r1, ip, lsr #10
   135ac:	andeq	r3, r1, ip, lsr #10
   135b0:	andeq	r3, r1, ip, lsr #10
   135b4:	andeq	r3, r1, ip, lsr #10
   135b8:	andeq	r3, r1, ip, lsr #10
   135bc:	andeq	r3, r1, ip, lsr #10
   135c0:	andeq	r3, r1, ip, lsr #10
   135c4:	andeq	r3, r1, ip, lsr #10
   135c8:	andeq	r3, r1, ip, lsr #10
   135cc:	andeq	r3, r1, ip, lsr #10
   135d0:	andeq	r3, r1, ip, lsr #10
   135d4:	andeq	r3, r1, r4, ror #20
   135d8:	mov	r9, r0
   135dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135e0:	tst	r0, #1
   135e4:	beq	12ffc <__assert_fail@plt+0x2024>
   135e8:	b	132b0 <__assert_fail@plt+0x22d8>
   135ec:	mov	r0, #0
   135f0:	str	r0, [fp, #-56]	; 0xffffffc8
   135f4:	ldr	r0, [sp, #32]
   135f8:	cmp	r0, #0
   135fc:	beq	136b4 <__assert_fail@plt+0x26dc>
   13600:	add	r0, sl, #2
   13604:	mov	r1, r7
   13608:	cmp	r0, r7
   1360c:	bcs	136b4 <__assert_fail@plt+0x26dc>
   13610:	add	r1, sl, lr
   13614:	ldrb	r1, [r1, #1]
   13618:	cmp	r1, #63	; 0x3f
   1361c:	bne	136b4 <__assert_fail@plt+0x26dc>
   13620:	ldrb	r8, [lr, r0]
   13624:	sub	r2, r8, #33	; 0x21
   13628:	cmp	r2, #29
   1362c:	bhi	136b4 <__assert_fail@plt+0x26dc>
   13630:	mov	r1, r4
   13634:	movw	r4, #20929	; 0x51c1
   13638:	mov	r3, #1
   1363c:	movt	r4, #14336	; 0x3800
   13640:	tst	r4, r3, lsl r2
   13644:	beq	13970 <__assert_fail@plt+0x2998>
   13648:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1364c:	tst	r2, #1
   13650:	bne	13a2c <__assert_fail@plt+0x2a54>
   13654:	cmp	r9, r5
   13658:	mov	r6, r8
   1365c:	mov	r4, r1
   13660:	mov	sl, r0
   13664:	mov	r8, #0
   13668:	movcc	r2, #63	; 0x3f
   1366c:	strbcc	r2, [ip, r9]
   13670:	add	r2, r9, #1
   13674:	cmp	r2, r5
   13678:	movcc	r3, #34	; 0x22
   1367c:	strbcc	r3, [ip, r2]
   13680:	add	r2, r9, #2
   13684:	cmp	r2, r5
   13688:	movcc	r3, #34	; 0x22
   1368c:	strbcc	r3, [ip, r2]
   13690:	add	r2, r9, #3
   13694:	add	r9, r9, #4
   13698:	cmp	r2, r5
   1369c:	movcc	r3, #63	; 0x3f
   136a0:	strbcc	r3, [ip, r2]
   136a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136a8:	tst	r0, #1
   136ac:	beq	12ffc <__assert_fail@plt+0x2024>
   136b0:	b	132b0 <__assert_fail@plt+0x22d8>
   136b4:	mov	r8, #0
   136b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136bc:	tst	r0, #1
   136c0:	beq	12ffc <__assert_fail@plt+0x2024>
   136c4:	b	132b0 <__assert_fail@plt+0x22d8>
   136c8:	mov	r8, #1
   136cc:	mov	r5, #0
   136d0:	sub	r4, fp, #40	; 0x28
   136d4:	str	r5, [sp, #68]	; 0x44
   136d8:	add	r5, r5, sl
   136dc:	sub	r0, fp, #44	; 0x2c
   136e0:	mov	r3, r4
   136e4:	add	r1, lr, r5
   136e8:	sub	r2, r7, r5
   136ec:	bl	15338 <__assert_fail@plt+0x4360>
   136f0:	cmn	r0, #2
   136f4:	beq	1374c <__assert_fail@plt+0x2774>
   136f8:	cmn	r0, #1
   136fc:	beq	13740 <__assert_fail@plt+0x2768>
   13700:	ldr	r5, [sp, #68]	; 0x44
   13704:	cmp	r0, #0
   13708:	beq	13788 <__assert_fail@plt+0x27b0>
   1370c:	add	r5, r0, r5
   13710:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13714:	bl	10e34 <iswprint@plt>
   13718:	cmp	r0, #0
   1371c:	sub	r4, fp, #40	; 0x28
   13720:	movwne	r0, #1
   13724:	and	r8, r8, r0
   13728:	mov	r0, r4
   1372c:	bl	10e04 <mbsinit@plt>
   13730:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13734:	cmp	r0, #0
   13738:	beq	136d4 <__assert_fail@plt+0x26fc>
   1373c:	b	1378c <__assert_fail@plt+0x27b4>
   13740:	mov	r8, #0
   13744:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13748:	b	13780 <__assert_fail@plt+0x27a8>
   1374c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13750:	mov	r8, #0
   13754:	cmp	r5, r7
   13758:	bcs	13780 <__assert_fail@plt+0x27a8>
   1375c:	ldrb	r0, [lr, r5]
   13760:	cmp	r0, #0
   13764:	beq	13780 <__assert_fail@plt+0x27a8>
   13768:	ldr	r0, [sp, #68]	; 0x44
   1376c:	add	r0, r0, #1
   13770:	add	r5, r0, sl
   13774:	str	r0, [sp, #68]	; 0x44
   13778:	cmp	r5, r7
   1377c:	bcc	1375c <__assert_fail@plt+0x2784>
   13780:	ldr	r5, [sp, #68]	; 0x44
   13784:	b	1378c <__assert_fail@plt+0x27b4>
   13788:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1378c:	mov	r1, r5
   13790:	ldr	r5, [sp, #28]
   13794:	ldr	r4, [sp, #84]	; 0x54
   13798:	ldr	r0, [sp, #52]	; 0x34
   1379c:	ldr	ip, [fp, #-84]	; 0xffffffac
   137a0:	cmp	r1, #1
   137a4:	orr	r2, r8, r0
   137a8:	mov	r0, r1
   137ac:	bhi	137b8 <__assert_fail@plt+0x27e0>
   137b0:	tst	r2, #1
   137b4:	bne	12ff0 <__assert_fail@plt+0x2018>
   137b8:	add	r0, r0, sl
   137bc:	str	r2, [sp, #84]	; 0x54
   137c0:	str	r0, [fp, #-56]	; 0xffffffc8
   137c4:	mov	r0, #0
   137c8:	tst	r2, #1
   137cc:	bne	138ac <__assert_fail@plt+0x28d4>
   137d0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   137d4:	tst	r1, #1
   137d8:	bne	13a2c <__assert_fail@plt+0x2a54>
   137dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   137e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   137e4:	subs	r2, r1, #2
   137e8:	movwne	r2, #1
   137ec:	orr	r2, r2, r0
   137f0:	tst	r2, #1
   137f4:	bne	13830 <__assert_fail@plt+0x2858>
   137f8:	cmp	r9, r5
   137fc:	add	r2, r9, #1
   13800:	mov	r0, #1
   13804:	movcc	r1, #39	; 0x27
   13808:	str	r0, [fp, #-52]	; 0xffffffcc
   1380c:	strbcc	r1, [ip, r9]
   13810:	cmp	r2, r5
   13814:	movcc	r1, #36	; 0x24
   13818:	strbcc	r1, [ip, r2]
   1381c:	add	r2, r9, #2
   13820:	add	r9, r9, #3
   13824:	cmp	r2, r5
   13828:	movcc	r1, #39	; 0x27
   1382c:	strbcc	r1, [ip, r2]
   13830:	cmp	r9, r5
   13834:	add	r2, r9, #1
   13838:	movcc	r1, #92	; 0x5c
   1383c:	strbcc	r1, [ip, r9]
   13840:	cmp	r2, r5
   13844:	bcs	13858 <__assert_fail@plt+0x2880>
   13848:	uxtb	r3, r6
   1384c:	mov	r1, #48	; 0x30
   13850:	orr	r3, r1, r3, lsr #6
   13854:	strb	r3, [ip, r2]
   13858:	add	r2, r9, #2
   1385c:	add	r9, r9, #3
   13860:	cmp	r2, r5
   13864:	lsrcc	r3, r6, #3
   13868:	movcc	r1, #6
   1386c:	bficc	r3, r1, #3, #29
   13870:	mov	r1, #6
   13874:	bfi	r6, r1, #3, #29
   13878:	strbcc	r3, [ip, r2]
   1387c:	mov	r2, #1
   13880:	b	138e0 <__assert_fail@plt+0x2908>
   13884:	ldr	r1, [sp, #80]	; 0x50
   13888:	cmp	r9, r2
   1388c:	mov	r5, r2
   13890:	ldr	r2, [sp, #84]	; 0x54
   13894:	strbcc	r6, [ip, r9]
   13898:	add	r9, r9, #1
   1389c:	ldrb	r6, [r1, sl]
   138a0:	mov	sl, r3
   138a4:	tst	r2, #1
   138a8:	beq	137d0 <__assert_fail@plt+0x27f8>
   138ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   138b0:	tst	r1, #1
   138b4:	beq	138d4 <__assert_fail@plt+0x28fc>
   138b8:	cmp	r9, r5
   138bc:	mov	r2, r0
   138c0:	movcc	r1, #92	; 0x5c
   138c4:	strbcc	r1, [ip, r9]
   138c8:	add	r9, r9, #1
   138cc:	mov	r1, #0
   138d0:	b	138dc <__assert_fail@plt+0x2904>
   138d4:	mov	r1, #0
   138d8:	mov	r2, r0
   138dc:	str	r1, [fp, #-48]	; 0xffffffd0
   138e0:	mov	r0, r2
   138e4:	and	r1, r2, #1
   138e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138ec:	add	r3, sl, #1
   138f0:	cmp	r2, r3
   138f4:	bls	13954 <__assert_fail@plt+0x297c>
   138f8:	mov	r2, r5
   138fc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13900:	cmp	r1, #0
   13904:	movwne	r1, #1
   13908:	mvn	r5, r5
   1390c:	orr	r5, r5, r1
   13910:	tst	r5, #1
   13914:	bne	13884 <__assert_fail@plt+0x28ac>
   13918:	cmp	r9, r2
   1391c:	movcc	r5, r4
   13920:	movcc	r4, #39	; 0x27
   13924:	strbcc	r4, [ip, r9]
   13928:	movcc	r4, r5
   1392c:	add	r5, r9, #1
   13930:	add	r9, r9, #2
   13934:	cmp	r5, r2
   13938:	movcc	r1, r4
   1393c:	movcc	r4, #39	; 0x27
   13940:	strbcc	r4, [ip, r5]
   13944:	movcc	r4, r1
   13948:	mov	r1, #0
   1394c:	str	r1, [fp, #-52]	; 0xffffffcc
   13950:	b	13884 <__assert_fail@plt+0x28ac>
   13954:	cmp	r1, #0
   13958:	movwne	r1, #1
   1395c:	str	r1, [fp, #-56]	; 0xffffffc8
   13960:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13964:	cmp	r0, #0
   13968:	beq	13390 <__assert_fail@plt+0x23b8>
   1396c:	b	133c4 <__assert_fail@plt+0x23ec>
   13970:	mov	r8, #0
   13974:	mov	r4, r1
   13978:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1397c:	tst	r0, #1
   13980:	beq	12ffc <__assert_fail@plt+0x2024>
   13984:	b	132b0 <__assert_fail@plt+0x22d8>
   13988:	mov	r7, sl
   1398c:	b	13994 <__assert_fail@plt+0x29bc>
   13990:	mvn	r7, #0
   13994:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13998:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1399c:	ldr	r2, [sp, #88]	; 0x58
   139a0:	eor	r0, r1, #2
   139a4:	orr	r0, r0, r9
   139a8:	clz	r0, r0
   139ac:	lsr	r0, r0, #5
   139b0:	tst	r3, r0
   139b4:	bne	13a2c <__assert_fail@plt+0x2a54>
   139b8:	subs	r0, r1, #2
   139bc:	movwne	r0, #1
   139c0:	orr	r0, r3, r0
   139c4:	tst	r0, #1
   139c8:	ldreq	r0, [sp, #60]	; 0x3c
   139cc:	eoreq	r0, r0, #1
   139d0:	tsteq	r0, #1
   139d4:	bne	13b08 <__assert_fail@plt+0x2b30>
   139d8:	tst	r4, #1
   139dc:	bne	13acc <__assert_fail@plt+0x2af4>
   139e0:	ldr	r6, [sp, #56]	; 0x38
   139e4:	mov	r8, #0
   139e8:	cmp	r6, #0
   139ec:	beq	13b04 <__assert_fail@plt+0x2b2c>
   139f0:	mov	r1, #0
   139f4:	mov	r4, #2
   139f8:	cmp	r5, #0
   139fc:	mov	r0, r2
   13a00:	mov	r3, #0
   13a04:	str	r1, [sp, #84]	; 0x54
   13a08:	beq	12850 <__assert_fail@plt+0x1878>
   13a0c:	b	13b08 <__assert_fail@plt+0x2b30>
   13a10:	movw	r0, #24372	; 0x5f34
   13a14:	movt	r0, #1
   13a18:	str	r0, [sp, #76]	; 0x4c
   13a1c:	mov	r9, #0
   13a20:	tst	r8, #1
   13a24:	beq	12ae8 <__assert_fail@plt+0x1b10>
   13a28:	b	12c28 <__assert_fail@plt+0x1c50>
   13a2c:	ldr	r1, [sp, #88]	; 0x58
   13a30:	mov	r0, #2
   13a34:	tst	r1, #1
   13a38:	movwne	r0, #4
   13a3c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13a40:	ldr	r1, [fp, #12]
   13a44:	cmp	r2, #2
   13a48:	moveq	r2, r0
   13a4c:	b	13a84 <__assert_fail@plt+0x2aac>
   13a50:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a54:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a58:	ldr	r1, [fp, #12]
   13a5c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13a60:	b	13a84 <__assert_fail@plt+0x2aac>
   13a64:	ldr	r1, [sp, #88]	; 0x58
   13a68:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a6c:	ldr	r5, [sp, #28]
   13a70:	mov	r0, #2
   13a74:	tst	r1, #1
   13a78:	ldr	r1, [fp, #12]
   13a7c:	movwne	r0, #4
   13a80:	mov	r2, r0
   13a84:	mov	r0, #0
   13a88:	bic	r1, r1, #2
   13a8c:	str	r2, [sp]
   13a90:	mov	r2, lr
   13a94:	str	r0, [sp, #8]
   13a98:	ldr	r0, [sp, #72]	; 0x48
   13a9c:	str	r1, [sp, #4]
   13aa0:	mov	r1, r5
   13aa4:	str	r0, [sp, #12]
   13aa8:	ldr	r0, [sp, #76]	; 0x4c
   13aac:	str	r0, [sp, #16]
   13ab0:	mov	r0, ip
   13ab4:	mov	r3, r7
   13ab8:	bl	127c4 <__assert_fail@plt+0x17ec>
   13abc:	mov	r9, r0
   13ac0:	mov	r0, r9
   13ac4:	sub	sp, fp, #28
   13ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13acc:	mov	r0, #5
   13ad0:	ldr	r1, [sp, #56]	; 0x38
   13ad4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13ad8:	str	r0, [sp]
   13adc:	ldr	r0, [fp, #12]
   13ae0:	str	r0, [sp, #4]
   13ae4:	ldr	r0, [fp, #16]
   13ae8:	str	r0, [sp, #8]
   13aec:	ldr	r0, [sp, #72]	; 0x48
   13af0:	str	r0, [sp, #12]
   13af4:	ldr	r0, [sp, #76]	; 0x4c
   13af8:	str	r0, [sp, #16]
   13afc:	ldr	r0, [fp, #-84]	; 0xffffffac
   13b00:	b	13ab4 <__assert_fail@plt+0x2adc>
   13b04:	mov	r3, #0
   13b08:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13b0c:	cmp	r1, #0
   13b10:	beq	13b4c <__assert_fail@plt+0x2b74>
   13b14:	ldr	r2, [fp, #-84]	; 0xffffffac
   13b18:	tst	r3, #1
   13b1c:	bne	13b50 <__assert_fail@plt+0x2b78>
   13b20:	ldrb	r0, [r1]
   13b24:	cmp	r0, #0
   13b28:	beq	13b50 <__assert_fail@plt+0x2b78>
   13b2c:	add	r1, r1, #1
   13b30:	cmp	r9, r5
   13b34:	strbcc	r0, [r2, r9]
   13b38:	add	r9, r9, #1
   13b3c:	ldrb	r0, [r1], #1
   13b40:	cmp	r0, #0
   13b44:	bne	13b30 <__assert_fail@plt+0x2b58>
   13b48:	b	13b50 <__assert_fail@plt+0x2b78>
   13b4c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13b50:	cmp	r9, r5
   13b54:	movcc	r0, #0
   13b58:	strbcc	r0, [r2, r9]
   13b5c:	mov	r0, r9
   13b60:	sub	sp, fp, #28
   13b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b68:	mov	r0, #4
   13b6c:	b	13a3c <__assert_fail@plt+0x2a64>
   13b70:	bl	10fc0 <abort@plt>
   13b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b78:	add	fp, sp, #28
   13b7c:	sub	sp, sp, #28
   13b80:	movw	r5, #29096	; 0x71a8
   13b84:	cmp	r2, #0
   13b88:	mov	r4, r1
   13b8c:	mov	r7, r0
   13b90:	str	r0, [sp, #20]
   13b94:	movt	r5, #2
   13b98:	movne	r5, r2
   13b9c:	bl	10ef4 <__errno_location@plt>
   13ba0:	mov	sl, r0
   13ba4:	ldr	r2, [r5, #40]	; 0x28
   13ba8:	ldr	r3, [r5, #44]	; 0x2c
   13bac:	ldm	r5, {r0, r1}
   13bb0:	orr	r8, r1, #1
   13bb4:	add	r9, r5, #8
   13bb8:	mov	r1, #0
   13bbc:	ldr	r6, [sl]
   13bc0:	stm	sp, {r0, r8, r9}
   13bc4:	mov	r0, #0
   13bc8:	str	r2, [sp, #12]
   13bcc:	str	r3, [sp, #16]
   13bd0:	mov	r2, r7
   13bd4:	mov	r3, r4
   13bd8:	str	r6, [sp, #24]
   13bdc:	mov	r6, r4
   13be0:	bl	127c4 <__assert_fail@plt+0x17ec>
   13be4:	add	r7, r0, #1
   13be8:	mov	r0, r7
   13bec:	bl	14c54 <__assert_fail@plt+0x3c7c>
   13bf0:	mov	r4, r0
   13bf4:	ldr	r0, [r5]
   13bf8:	ldr	r2, [r5, #44]	; 0x2c
   13bfc:	ldr	r1, [r5, #40]	; 0x28
   13c00:	mov	r3, r6
   13c04:	stm	sp, {r0, r8, r9}
   13c08:	str	r2, [sp, #16]
   13c0c:	ldr	r2, [sp, #20]
   13c10:	str	r1, [sp, #12]
   13c14:	mov	r0, r4
   13c18:	mov	r1, r7
   13c1c:	bl	127c4 <__assert_fail@plt+0x17ec>
   13c20:	ldr	r0, [sp, #24]
   13c24:	str	r0, [sl]
   13c28:	mov	r0, r4
   13c2c:	sub	sp, fp, #28
   13c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c38:	add	fp, sp, #28
   13c3c:	sub	sp, sp, #36	; 0x24
   13c40:	movw	r8, #29096	; 0x71a8
   13c44:	cmp	r3, #0
   13c48:	mov	r4, r2
   13c4c:	str	r2, [sp, #24]
   13c50:	mov	r5, r1
   13c54:	mov	r6, r0
   13c58:	str	r0, [sp, #20]
   13c5c:	movt	r8, #2
   13c60:	movne	r8, r3
   13c64:	bl	10ef4 <__errno_location@plt>
   13c68:	str	r0, [sp, #28]
   13c6c:	ldr	r1, [r8, #40]	; 0x28
   13c70:	ldr	r2, [r8, #44]	; 0x2c
   13c74:	ldr	r7, [r0]
   13c78:	cmp	r4, #0
   13c7c:	add	sl, r8, #8
   13c80:	mov	r0, #0
   13c84:	ldm	r8, {r3, r9}
   13c88:	orreq	r9, r9, #1
   13c8c:	stm	sp, {r3, r9, sl}
   13c90:	str	r1, [sp, #12]
   13c94:	str	r2, [sp, #16]
   13c98:	mov	r1, #0
   13c9c:	mov	r2, r6
   13ca0:	mov	r3, r5
   13ca4:	str	r7, [sp, #32]
   13ca8:	mov	r7, r5
   13cac:	bl	127c4 <__assert_fail@plt+0x17ec>
   13cb0:	add	r4, r0, #1
   13cb4:	mov	r5, r0
   13cb8:	mov	r0, r4
   13cbc:	bl	14c54 <__assert_fail@plt+0x3c7c>
   13cc0:	mov	r6, r0
   13cc4:	ldr	r0, [r8]
   13cc8:	ldr	r2, [r8, #44]	; 0x2c
   13ccc:	ldr	r1, [r8, #40]	; 0x28
   13cd0:	mov	r3, r7
   13cd4:	stm	sp, {r0, r9, sl}
   13cd8:	str	r2, [sp, #16]
   13cdc:	ldr	r2, [sp, #20]
   13ce0:	str	r1, [sp, #12]
   13ce4:	mov	r0, r6
   13ce8:	mov	r1, r4
   13cec:	bl	127c4 <__assert_fail@plt+0x17ec>
   13cf0:	ldr	r0, [sp, #24]
   13cf4:	ldr	r1, [sp, #32]
   13cf8:	ldr	r2, [sp, #28]
   13cfc:	cmp	r0, #0
   13d00:	str	r1, [r2]
   13d04:	strne	r5, [r0]
   13d08:	mov	r0, r6
   13d0c:	sub	sp, fp, #28
   13d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d14:	push	{r4, r5, r6, r7, fp, lr}
   13d18:	add	fp, sp, #16
   13d1c:	movw	r4, #28960	; 0x7120
   13d20:	movt	r4, #2
   13d24:	ldrd	r6, [r4]
   13d28:	cmp	r7, #2
   13d2c:	blt	13d58 <__assert_fail@plt+0x2d80>
   13d30:	add	r5, r6, #12
   13d34:	mov	r7, #0
   13d38:	ldr	r0, [r5, r7, lsl #3]
   13d3c:	bl	124b8 <__assert_fail@plt+0x14e0>
   13d40:	ldr	r1, [r4, #4]
   13d44:	add	r2, r7, #2
   13d48:	add	r0, r7, #1
   13d4c:	mov	r7, r0
   13d50:	cmp	r2, r1
   13d54:	blt	13d38 <__assert_fail@plt+0x2d60>
   13d58:	ldr	r0, [r6, #4]
   13d5c:	movw	r5, #29144	; 0x71d8
   13d60:	movt	r5, #2
   13d64:	cmp	r0, r5
   13d68:	beq	13d7c <__assert_fail@plt+0x2da4>
   13d6c:	bl	124b8 <__assert_fail@plt+0x14e0>
   13d70:	mov	r0, #256	; 0x100
   13d74:	str	r0, [r4, #8]
   13d78:	str	r5, [r4, #12]
   13d7c:	add	r5, r4, #8
   13d80:	cmp	r6, r5
   13d84:	beq	13d94 <__assert_fail@plt+0x2dbc>
   13d88:	mov	r0, r6
   13d8c:	bl	124b8 <__assert_fail@plt+0x14e0>
   13d90:	str	r5, [r4]
   13d94:	mov	r0, #1
   13d98:	str	r0, [r4, #4]
   13d9c:	pop	{r4, r5, r6, r7, fp, pc}
   13da0:	movw	r3, #29096	; 0x71a8
   13da4:	mvn	r2, #0
   13da8:	movt	r3, #2
   13dac:	b	13db0 <__assert_fail@plt+0x2dd8>
   13db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13db4:	add	fp, sp, #28
   13db8:	sub	sp, sp, #44	; 0x2c
   13dbc:	mov	r7, r3
   13dc0:	str	r2, [sp, #36]	; 0x24
   13dc4:	str	r1, [sp, #32]
   13dc8:	mov	r5, r0
   13dcc:	bl	10ef4 <__errno_location@plt>
   13dd0:	cmp	r5, #0
   13dd4:	bmi	13f3c <__assert_fail@plt+0x2f64>
   13dd8:	cmn	r5, #-2147483647	; 0x80000001
   13ddc:	beq	13f3c <__assert_fail@plt+0x2f64>
   13de0:	movw	r8, #28960	; 0x7120
   13de4:	mov	r4, r0
   13de8:	ldr	r0, [r0]
   13dec:	movt	r8, #2
   13df0:	str	r4, [sp, #28]
   13df4:	ldr	r1, [r8, #4]
   13df8:	ldr	r6, [r8]
   13dfc:	str	r0, [sp, #24]
   13e00:	cmp	r1, r5
   13e04:	ble	13e10 <__assert_fail@plt+0x2e38>
   13e08:	mov	sl, r6
   13e0c:	b	13e78 <__assert_fail@plt+0x2ea0>
   13e10:	mov	r0, #8
   13e14:	add	r9, r8, #8
   13e18:	str	r1, [fp, #-32]	; 0xffffffe0
   13e1c:	sub	r1, r5, r1
   13e20:	mvn	r3, #-2147483648	; 0x80000000
   13e24:	str	r0, [sp]
   13e28:	subs	r0, r6, r9
   13e2c:	add	r2, r1, #1
   13e30:	sub	r1, fp, #32
   13e34:	movne	r0, r6
   13e38:	bl	14e54 <__assert_fail@plt+0x3e7c>
   13e3c:	mov	sl, r0
   13e40:	cmp	r6, r9
   13e44:	str	r0, [r8]
   13e48:	bne	13e54 <__assert_fail@plt+0x2e7c>
   13e4c:	ldrd	r0, [r8, #8]
   13e50:	stm	sl, {r0, r1}
   13e54:	ldr	r1, [r8, #4]
   13e58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13e5c:	add	r0, sl, r1, lsl #3
   13e60:	sub	r1, r2, r1
   13e64:	lsl	r2, r1, #3
   13e68:	mov	r1, #0
   13e6c:	bl	10f0c <memset@plt>
   13e70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13e74:	str	r0, [r8, #4]
   13e78:	mov	r9, sl
   13e7c:	ldm	r7, {r0, r1}
   13e80:	orr	r8, r1, #1
   13e84:	add	r1, r7, #8
   13e88:	ldr	r2, [r7, #40]	; 0x28
   13e8c:	ldr	r3, [r7, #44]	; 0x2c
   13e90:	ldr	r6, [r9, r5, lsl #3]!
   13e94:	str	r1, [sp, #20]
   13e98:	ldr	r4, [r9, #4]!
   13e9c:	stm	sp, {r0, r8}
   13ea0:	add	r0, sp, #8
   13ea4:	stm	r0, {r1, r2, r3}
   13ea8:	ldr	r2, [sp, #32]
   13eac:	ldr	r3, [sp, #36]	; 0x24
   13eb0:	mov	r1, r6
   13eb4:	mov	r0, r4
   13eb8:	bl	127c4 <__assert_fail@plt+0x17ec>
   13ebc:	cmp	r6, r0
   13ec0:	bhi	13f24 <__assert_fail@plt+0x2f4c>
   13ec4:	add	r6, r0, #1
   13ec8:	movw	r0, #29144	; 0x71d8
   13ecc:	movt	r0, #2
   13ed0:	str	r6, [sl, r5, lsl #3]
   13ed4:	cmp	r4, r0
   13ed8:	beq	13ee4 <__assert_fail@plt+0x2f0c>
   13edc:	mov	r0, r4
   13ee0:	bl	124b8 <__assert_fail@plt+0x14e0>
   13ee4:	mov	r0, r6
   13ee8:	bl	14c54 <__assert_fail@plt+0x3c7c>
   13eec:	str	r0, [r9]
   13ef0:	mov	r4, r0
   13ef4:	add	r3, sp, #8
   13ef8:	ldr	r0, [r7]
   13efc:	ldr	r1, [r7, #40]	; 0x28
   13f00:	ldr	r2, [r7, #44]	; 0x2c
   13f04:	stm	sp, {r0, r8}
   13f08:	ldr	r0, [sp, #20]
   13f0c:	stm	r3, {r0, r1, r2}
   13f10:	ldr	r2, [sp, #32]
   13f14:	ldr	r3, [sp, #36]	; 0x24
   13f18:	mov	r0, r4
   13f1c:	mov	r1, r6
   13f20:	bl	127c4 <__assert_fail@plt+0x17ec>
   13f24:	ldr	r1, [sp, #24]
   13f28:	ldr	r0, [sp, #28]
   13f2c:	str	r1, [r0]
   13f30:	mov	r0, r4
   13f34:	sub	sp, fp, #28
   13f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f3c:	bl	10fc0 <abort@plt>
   13f40:	movw	r3, #29096	; 0x71a8
   13f44:	movt	r3, #2
   13f48:	b	13db0 <__assert_fail@plt+0x2dd8>
   13f4c:	movw	r3, #29096	; 0x71a8
   13f50:	mov	r1, r0
   13f54:	mov	r0, #0
   13f58:	mvn	r2, #0
   13f5c:	movt	r3, #2
   13f60:	b	13db0 <__assert_fail@plt+0x2dd8>
   13f64:	movw	r3, #29096	; 0x71a8
   13f68:	mov	r2, r1
   13f6c:	mov	r1, r0
   13f70:	mov	r0, #0
   13f74:	movt	r3, #2
   13f78:	b	13db0 <__assert_fail@plt+0x2dd8>
   13f7c:	push	{fp, lr}
   13f80:	mov	fp, sp
   13f84:	sub	sp, sp, #48	; 0x30
   13f88:	vmov.i32	q8, #0	; 0x00000000
   13f8c:	mov	ip, #32
   13f90:	mov	r3, sp
   13f94:	mov	lr, r2
   13f98:	cmp	r1, #10
   13f9c:	add	r2, r3, #16
   13fa0:	vst1.64	{d16-d17}, [r3], ip
   13fa4:	vst1.64	{d16-d17}, [r2]
   13fa8:	vst1.64	{d16-d17}, [r3]
   13fac:	beq	13fcc <__assert_fail@plt+0x2ff4>
   13fb0:	str	r1, [sp]
   13fb4:	mov	r3, sp
   13fb8:	mov	r1, lr
   13fbc:	mvn	r2, #0
   13fc0:	bl	13db0 <__assert_fail@plt+0x2dd8>
   13fc4:	mov	sp, fp
   13fc8:	pop	{fp, pc}
   13fcc:	bl	10fc0 <abort@plt>
   13fd0:	push	{r4, sl, fp, lr}
   13fd4:	add	fp, sp, #8
   13fd8:	sub	sp, sp, #48	; 0x30
   13fdc:	vmov.i32	q8, #0	; 0x00000000
   13fe0:	mov	ip, r3
   13fe4:	mov	r3, sp
   13fe8:	mov	lr, #32
   13fec:	cmp	r1, #10
   13ff0:	add	r4, r3, #16
   13ff4:	vst1.64	{d16-d17}, [r3], lr
   13ff8:	vst1.64	{d16-d17}, [r4]
   13ffc:	vst1.64	{d16-d17}, [r3]
   14000:	beq	14020 <__assert_fail@plt+0x3048>
   14004:	str	r1, [sp]
   14008:	mov	r1, r2
   1400c:	mov	r3, sp
   14010:	mov	r2, ip
   14014:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14018:	sub	sp, fp, #8
   1401c:	pop	{r4, sl, fp, pc}
   14020:	bl	10fc0 <abort@plt>
   14024:	push	{fp, lr}
   14028:	mov	fp, sp
   1402c:	sub	sp, sp, #48	; 0x30
   14030:	vmov.i32	q8, #0	; 0x00000000
   14034:	mov	r3, sp
   14038:	mov	ip, #32
   1403c:	cmp	r0, #10
   14040:	add	r2, r3, #16
   14044:	vst1.64	{d16-d17}, [r3], ip
   14048:	vst1.64	{d16-d17}, [r2]
   1404c:	vst1.64	{d16-d17}, [r3]
   14050:	beq	14070 <__assert_fail@plt+0x3098>
   14054:	str	r0, [sp]
   14058:	mov	r3, sp
   1405c:	mov	r0, #0
   14060:	mvn	r2, #0
   14064:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14068:	mov	sp, fp
   1406c:	pop	{fp, pc}
   14070:	bl	10fc0 <abort@plt>
   14074:	push	{fp, lr}
   14078:	mov	fp, sp
   1407c:	sub	sp, sp, #48	; 0x30
   14080:	vmov.i32	q8, #0	; 0x00000000
   14084:	mov	r3, sp
   14088:	mov	ip, #32
   1408c:	cmp	r0, #10
   14090:	add	lr, r3, #16
   14094:	vst1.64	{d16-d17}, [r3], ip
   14098:	vst1.64	{d16-d17}, [lr]
   1409c:	vst1.64	{d16-d17}, [r3]
   140a0:	beq	140bc <__assert_fail@plt+0x30e4>
   140a4:	str	r0, [sp]
   140a8:	mov	r3, sp
   140ac:	mov	r0, #0
   140b0:	bl	13db0 <__assert_fail@plt+0x2dd8>
   140b4:	mov	sp, fp
   140b8:	pop	{fp, pc}
   140bc:	bl	10fc0 <abort@plt>
   140c0:	push	{r4, sl, fp, lr}
   140c4:	add	fp, sp, #8
   140c8:	sub	sp, sp, #48	; 0x30
   140cc:	mov	lr, r0
   140d0:	movw	r0, #29096	; 0x71a8
   140d4:	mov	ip, r1
   140d8:	mov	r1, #32
   140dc:	mov	r4, #1
   140e0:	movt	r0, #2
   140e4:	add	r3, r0, #16
   140e8:	vld1.64	{d16-d17}, [r0], r1
   140ec:	vld1.64	{d20-d21}, [r0]
   140f0:	vld1.64	{d18-d19}, [r3]
   140f4:	mov	r3, sp
   140f8:	add	r0, r3, #32
   140fc:	add	r1, r3, #16
   14100:	vst1.64	{d20-d21}, [r0]
   14104:	mov	r0, #28
   14108:	vst1.64	{d18-d19}, [r1]
   1410c:	mov	r1, r3
   14110:	and	r0, r0, r2, lsr #3
   14114:	and	r2, r2, #31
   14118:	vst1.64	{d16-d17}, [r1], r0
   1411c:	ldr	r0, [r1, #8]
   14120:	bic	r4, r4, r0, lsr r2
   14124:	eor	r0, r0, r4, lsl r2
   14128:	mov	r2, ip
   1412c:	str	r0, [r1, #8]
   14130:	mov	r0, #0
   14134:	mov	r1, lr
   14138:	bl	13db0 <__assert_fail@plt+0x2dd8>
   1413c:	sub	sp, fp, #8
   14140:	pop	{r4, sl, fp, pc}
   14144:	push	{fp, lr}
   14148:	mov	fp, sp
   1414c:	sub	sp, sp, #48	; 0x30
   14150:	mov	ip, r0
   14154:	movw	r0, #29096	; 0x71a8
   14158:	mov	r2, #32
   1415c:	movt	r0, #2
   14160:	add	r3, r0, #16
   14164:	vld1.64	{d16-d17}, [r0], r2
   14168:	vld1.64	{d20-d21}, [r0]
   1416c:	vld1.64	{d18-d19}, [r3]
   14170:	mov	r3, sp
   14174:	add	r0, r3, #32
   14178:	add	r2, r3, #16
   1417c:	vst1.64	{d20-d21}, [r0]
   14180:	mov	r0, #28
   14184:	vst1.64	{d18-d19}, [r2]
   14188:	mov	r2, r3
   1418c:	and	r0, r0, r1, lsr #3
   14190:	and	r1, r1, #31
   14194:	vst1.64	{d16-d17}, [r2], r0
   14198:	mov	r0, #1
   1419c:	ldr	lr, [r2, #8]
   141a0:	bic	r0, r0, lr, lsr r1
   141a4:	eor	r0, lr, r0, lsl r1
   141a8:	mov	r1, ip
   141ac:	str	r0, [r2, #8]
   141b0:	mov	r0, #0
   141b4:	mvn	r2, #0
   141b8:	bl	13db0 <__assert_fail@plt+0x2dd8>
   141bc:	mov	sp, fp
   141c0:	pop	{fp, pc}
   141c4:	push	{fp, lr}
   141c8:	mov	fp, sp
   141cc:	sub	sp, sp, #48	; 0x30
   141d0:	mov	r1, r0
   141d4:	movw	r0, #29096	; 0x71a8
   141d8:	mov	r3, #32
   141dc:	movt	r0, #2
   141e0:	add	r2, r0, #16
   141e4:	vld1.64	{d16-d17}, [r0], r3
   141e8:	mov	r3, sp
   141ec:	vld1.64	{d18-d19}, [r2]
   141f0:	vld1.64	{d20-d21}, [r0]
   141f4:	add	r2, r3, #16
   141f8:	add	r0, r3, #32
   141fc:	vst1.64	{d18-d19}, [r2]
   14200:	vst1.64	{d20-d21}, [r0]
   14204:	mov	r0, #12
   14208:	mov	r2, r3
   1420c:	vst1.64	{d16-d17}, [r2], r0
   14210:	ldr	r0, [r2]
   14214:	orr	r0, r0, #67108864	; 0x4000000
   14218:	str	r0, [r2]
   1421c:	mov	r0, #0
   14220:	mvn	r2, #0
   14224:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14228:	mov	sp, fp
   1422c:	pop	{fp, pc}
   14230:	push	{fp, lr}
   14234:	mov	fp, sp
   14238:	sub	sp, sp, #48	; 0x30
   1423c:	mov	ip, r1
   14240:	mov	r1, r0
   14244:	movw	r0, #29096	; 0x71a8
   14248:	mov	r2, #32
   1424c:	movt	r0, #2
   14250:	add	r3, r0, #16
   14254:	vld1.64	{d16-d17}, [r0], r2
   14258:	vld1.64	{d18-d19}, [r3]
   1425c:	vld1.64	{d20-d21}, [r0]
   14260:	mov	r3, sp
   14264:	add	r2, r3, #16
   14268:	add	r0, r3, #32
   1426c:	vst1.64	{d18-d19}, [r2]
   14270:	vst1.64	{d20-d21}, [r0]
   14274:	mov	r0, #12
   14278:	mov	r2, r3
   1427c:	vst1.64	{d16-d17}, [r2], r0
   14280:	ldr	r0, [r2]
   14284:	orr	r0, r0, #67108864	; 0x4000000
   14288:	str	r0, [r2]
   1428c:	mov	r0, #0
   14290:	mov	r2, ip
   14294:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14298:	mov	sp, fp
   1429c:	pop	{fp, pc}
   142a0:	push	{r4, sl, fp, lr}
   142a4:	add	fp, sp, #8
   142a8:	sub	sp, sp, #96	; 0x60
   142ac:	vmov.i32	q8, #0	; 0x00000000
   142b0:	mov	ip, r2
   142b4:	mov	r2, sp
   142b8:	mov	r4, #28
   142bc:	cmp	r1, #10
   142c0:	mov	r3, r2
   142c4:	add	lr, r2, #16
   142c8:	vst1.64	{d16-d17}, [r3], r4
   142cc:	vst1.64	{d16-d17}, [lr]
   142d0:	vst1.32	{d16-d17}, [r3]
   142d4:	beq	14324 <__assert_fail@plt+0x334c>
   142d8:	vld1.64	{d16-d17}, [r2], r4
   142dc:	vld1.64	{d18-d19}, [lr]
   142e0:	add	r3, sp, #48	; 0x30
   142e4:	vld1.32	{d20-d21}, [r2]
   142e8:	add	r2, r3, #20
   142ec:	add	r4, r3, #4
   142f0:	vst1.32	{d18-d19}, [r2]
   142f4:	add	r2, r3, #32
   142f8:	vst1.32	{d16-d17}, [r4]
   142fc:	vst1.32	{d20-d21}, [r2]
   14300:	str	r1, [sp, #48]	; 0x30
   14304:	mvn	r2, #0
   14308:	ldr	r1, [sp, #60]	; 0x3c
   1430c:	orr	r1, r1, #67108864	; 0x4000000
   14310:	str	r1, [sp, #60]	; 0x3c
   14314:	mov	r1, ip
   14318:	bl	13db0 <__assert_fail@plt+0x2dd8>
   1431c:	sub	sp, fp, #8
   14320:	pop	{r4, sl, fp, pc}
   14324:	bl	10fc0 <abort@plt>
   14328:	push	{r4, r5, r6, sl, fp, lr}
   1432c:	add	fp, sp, #16
   14330:	sub	sp, sp, #48	; 0x30
   14334:	mov	ip, r3
   14338:	movw	r3, #29096	; 0x71a8
   1433c:	mov	r6, #32
   14340:	cmp	r1, #0
   14344:	mov	r4, sp
   14348:	movt	r3, #2
   1434c:	cmpne	r2, #0
   14350:	add	r5, r4, #16
   14354:	add	lr, r3, #16
   14358:	vld1.64	{d16-d17}, [r3], r6
   1435c:	vld1.64	{d18-d19}, [lr]
   14360:	vld1.64	{d20-d21}, [r3]
   14364:	mov	r3, #10
   14368:	vst1.64	{d16-d17}, [r4], r6
   1436c:	vst1.64	{d18-d19}, [r5]
   14370:	vst1.64	{d20-d21}, [r4]
   14374:	str	r3, [sp]
   14378:	bne	14380 <__assert_fail@plt+0x33a8>
   1437c:	bl	10fc0 <abort@plt>
   14380:	str	r2, [sp, #44]	; 0x2c
   14384:	str	r1, [sp, #40]	; 0x28
   14388:	mov	r3, sp
   1438c:	mov	r1, ip
   14390:	mvn	r2, #0
   14394:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14398:	sub	sp, fp, #16
   1439c:	pop	{r4, r5, r6, sl, fp, pc}
   143a0:	push	{r4, r5, r6, sl, fp, lr}
   143a4:	add	fp, sp, #16
   143a8:	sub	sp, sp, #48	; 0x30
   143ac:	mov	lr, r3
   143b0:	movw	r3, #29096	; 0x71a8
   143b4:	mov	r6, #32
   143b8:	cmp	r1, #0
   143bc:	mov	r4, sp
   143c0:	movt	r3, #2
   143c4:	cmpne	r2, #0
   143c8:	add	r5, r4, #16
   143cc:	add	ip, r3, #16
   143d0:	vld1.64	{d16-d17}, [r3], r6
   143d4:	vld1.64	{d18-d19}, [ip]
   143d8:	vld1.64	{d20-d21}, [r3]
   143dc:	mov	r3, #10
   143e0:	vst1.64	{d16-d17}, [r4], r6
   143e4:	vst1.64	{d18-d19}, [r5]
   143e8:	vst1.64	{d20-d21}, [r4]
   143ec:	str	r3, [sp]
   143f0:	bne	143f8 <__assert_fail@plt+0x3420>
   143f4:	bl	10fc0 <abort@plt>
   143f8:	ldr	ip, [fp, #8]
   143fc:	str	r2, [sp, #44]	; 0x2c
   14400:	str	r1, [sp, #40]	; 0x28
   14404:	mov	r3, sp
   14408:	mov	r1, lr
   1440c:	mov	r2, ip
   14410:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14414:	sub	sp, fp, #16
   14418:	pop	{r4, r5, r6, sl, fp, pc}
   1441c:	push	{r4, sl, fp, lr}
   14420:	add	fp, sp, #8
   14424:	sub	sp, sp, #48	; 0x30
   14428:	movw	r3, #29096	; 0x71a8
   1442c:	mov	lr, #32
   14430:	mov	ip, r2
   14434:	cmp	r0, #0
   14438:	movt	r3, #2
   1443c:	cmpne	r1, #0
   14440:	add	r2, r3, #16
   14444:	vld1.64	{d16-d17}, [r3], lr
   14448:	vld1.64	{d20-d21}, [r3]
   1444c:	vld1.64	{d18-d19}, [r2]
   14450:	mov	r2, sp
   14454:	add	r4, r2, #16
   14458:	vst1.64	{d16-d17}, [r2], lr
   1445c:	vst1.64	{d20-d21}, [r2]
   14460:	mov	r2, #10
   14464:	vst1.64	{d18-d19}, [r4]
   14468:	str	r2, [sp]
   1446c:	bne	14474 <__assert_fail@plt+0x349c>
   14470:	bl	10fc0 <abort@plt>
   14474:	str	r1, [sp, #44]	; 0x2c
   14478:	str	r0, [sp, #40]	; 0x28
   1447c:	mov	r3, sp
   14480:	mov	r0, #0
   14484:	mov	r1, ip
   14488:	mvn	r2, #0
   1448c:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14490:	sub	sp, fp, #8
   14494:	pop	{r4, sl, fp, pc}
   14498:	push	{r4, r5, fp, lr}
   1449c:	add	fp, sp, #8
   144a0:	sub	sp, sp, #48	; 0x30
   144a4:	mov	ip, r3
   144a8:	movw	r3, #29096	; 0x71a8
   144ac:	mov	r4, #32
   144b0:	mov	lr, r2
   144b4:	cmp	r0, #0
   144b8:	movt	r3, #2
   144bc:	cmpne	r1, #0
   144c0:	add	r2, r3, #16
   144c4:	vld1.64	{d16-d17}, [r3], r4
   144c8:	vld1.64	{d20-d21}, [r3]
   144cc:	vld1.64	{d18-d19}, [r2]
   144d0:	mov	r2, sp
   144d4:	add	r5, r2, #16
   144d8:	vst1.64	{d16-d17}, [r2], r4
   144dc:	vst1.64	{d20-d21}, [r2]
   144e0:	mov	r2, #10
   144e4:	vst1.64	{d18-d19}, [r5]
   144e8:	str	r2, [sp]
   144ec:	bne	144f4 <__assert_fail@plt+0x351c>
   144f0:	bl	10fc0 <abort@plt>
   144f4:	str	r1, [sp, #44]	; 0x2c
   144f8:	str	r0, [sp, #40]	; 0x28
   144fc:	mov	r3, sp
   14500:	mov	r0, #0
   14504:	mov	r1, lr
   14508:	mov	r2, ip
   1450c:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14510:	sub	sp, fp, #8
   14514:	pop	{r4, r5, fp, pc}
   14518:	movw	r3, #28912	; 0x70f0
   1451c:	movt	r3, #2
   14520:	b	13db0 <__assert_fail@plt+0x2dd8>
   14524:	movw	r3, #28912	; 0x70f0
   14528:	mov	r2, r1
   1452c:	mov	r1, r0
   14530:	mov	r0, #0
   14534:	movt	r3, #2
   14538:	b	13db0 <__assert_fail@plt+0x2dd8>
   1453c:	movw	r3, #28912	; 0x70f0
   14540:	mvn	r2, #0
   14544:	movt	r3, #2
   14548:	b	13db0 <__assert_fail@plt+0x2dd8>
   1454c:	movw	r3, #28912	; 0x70f0
   14550:	mov	r1, r0
   14554:	mov	r0, #0
   14558:	mvn	r2, #0
   1455c:	movt	r3, #2
   14560:	b	13db0 <__assert_fail@plt+0x2dd8>
   14564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14568:	add	fp, sp, #24
   1456c:	sub	sp, sp, #32
   14570:	ldr	r6, [fp, #12]
   14574:	ldr	r7, [fp, #8]
   14578:	mov	r4, r2
   1457c:	mov	r8, r0
   14580:	cmp	r1, #0
   14584:	beq	145ac <__assert_fail@plt+0x35d4>
   14588:	movw	r2, #24460	; 0x5f8c
   1458c:	mov	r5, r1
   14590:	str	r3, [sp, #4]
   14594:	str	r4, [sp]
   14598:	mov	r0, r8
   1459c:	mov	r1, #1
   145a0:	movt	r2, #1
   145a4:	mov	r3, r5
   145a8:	b	145c4 <__assert_fail@plt+0x35ec>
   145ac:	movw	r2, #24472	; 0x5f98
   145b0:	str	r3, [sp]
   145b4:	mov	r0, r8
   145b8:	mov	r1, #1
   145bc:	mov	r3, r4
   145c0:	movt	r2, #1
   145c4:	bl	10f30 <__fprintf_chk@plt>
   145c8:	movw	r1, #24479	; 0x5f9f
   145cc:	mov	r0, #0
   145d0:	mov	r2, #5
   145d4:	movt	r1, #1
   145d8:	bl	10e10 <dcgettext@plt>
   145dc:	movw	r2, #25197	; 0x626d
   145e0:	mov	r3, r0
   145e4:	movw	r0, #2022	; 0x7e6
   145e8:	mov	r1, #1
   145ec:	movt	r2, #1
   145f0:	str	r0, [sp]
   145f4:	mov	r0, r8
   145f8:	bl	10f30 <__fprintf_chk@plt>
   145fc:	movw	r4, #23094	; 0x5a36
   14600:	mov	r1, r8
   14604:	movt	r4, #1
   14608:	mov	r0, r4
   1460c:	bl	10da4 <fputs_unlocked@plt>
   14610:	movw	r1, #24483	; 0x5fa3
   14614:	mov	r0, #0
   14618:	mov	r2, #5
   1461c:	movt	r1, #1
   14620:	bl	10e10 <dcgettext@plt>
   14624:	movw	r3, #24654	; 0x604e
   14628:	mov	r2, r0
   1462c:	mov	r0, r8
   14630:	mov	r1, #1
   14634:	movt	r3, #1
   14638:	bl	10f30 <__fprintf_chk@plt>
   1463c:	mov	r0, r4
   14640:	mov	r1, r8
   14644:	bl	10da4 <fputs_unlocked@plt>
   14648:	cmp	r6, #9
   1464c:	bhi	14688 <__assert_fail@plt+0x36b0>
   14650:	add	r0, pc, #0
   14654:	ldr	pc, [r0, r6, lsl #2]
   14658:	andeq	r4, r1, r0, lsl #13
   1465c:	muleq	r1, r4, r6
   14660:	andeq	r4, r1, r4, asr #13
   14664:	andeq	r4, r1, ip, ror #13
   14668:	andeq	r4, r1, r4, lsl r7
   1466c:	andeq	r4, r1, ip, lsr r7
   14670:	andeq	r4, r1, r4, ror #14
   14674:	muleq	r1, ip, r7
   14678:	andeq	r4, r1, r4, asr #16
   1467c:	andeq	r4, r1, ip, ror #15
   14680:	sub	sp, fp, #24
   14684:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14688:	movw	r1, #25007	; 0x61af
   1468c:	movt	r1, #1
   14690:	b	147f4 <__assert_fail@plt+0x381c>
   14694:	movw	r1, #24688	; 0x6070
   14698:	mov	r0, #0
   1469c:	mov	r2, #5
   146a0:	movt	r1, #1
   146a4:	bl	10e10 <dcgettext@plt>
   146a8:	ldr	r3, [r7]
   146ac:	mov	r2, r0
   146b0:	mov	r0, r8
   146b4:	mov	r1, #1
   146b8:	sub	sp, fp, #24
   146bc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   146c0:	b	10f30 <__fprintf_chk@plt>
   146c4:	movw	r1, #24704	; 0x6080
   146c8:	mov	r0, #0
   146cc:	mov	r2, #5
   146d0:	movt	r1, #1
   146d4:	bl	10e10 <dcgettext@plt>
   146d8:	mov	r2, r0
   146dc:	ldr	r3, [r7]
   146e0:	ldr	r0, [r7, #4]
   146e4:	str	r0, [sp]
   146e8:	b	147d8 <__assert_fail@plt+0x3800>
   146ec:	movw	r1, #24727	; 0x6097
   146f0:	mov	r0, #0
   146f4:	mov	r2, #5
   146f8:	movt	r1, #1
   146fc:	bl	10e10 <dcgettext@plt>
   14700:	mov	r2, r0
   14704:	ldr	r3, [r7]
   14708:	ldmib	r7, {r0, r1}
   1470c:	stm	sp, {r0, r1}
   14710:	b	147d8 <__assert_fail@plt+0x3800>
   14714:	movw	r1, #24755	; 0x60b3
   14718:	mov	r0, #0
   1471c:	mov	r2, #5
   14720:	movt	r1, #1
   14724:	bl	10e10 <dcgettext@plt>
   14728:	ldr	r3, [r7]
   1472c:	mov	r2, r0
   14730:	ldmib	r7, {r0, r1, r7}
   14734:	stm	sp, {r0, r1, r7}
   14738:	b	147d8 <__assert_fail@plt+0x3800>
   1473c:	movw	r1, #24787	; 0x60d3
   14740:	mov	r0, #0
   14744:	mov	r2, #5
   14748:	movt	r1, #1
   1474c:	bl	10e10 <dcgettext@plt>
   14750:	ldr	r3, [r7]
   14754:	mov	r2, r0
   14758:	ldmib	r7, {r0, r1, r6, r7}
   1475c:	stm	sp, {r0, r1, r6, r7}
   14760:	b	147d8 <__assert_fail@plt+0x3800>
   14764:	movw	r1, #24823	; 0x60f7
   14768:	mov	r0, #0
   1476c:	mov	r2, #5
   14770:	movt	r1, #1
   14774:	bl	10e10 <dcgettext@plt>
   14778:	mov	r2, r0
   1477c:	ldr	r3, [r7]
   14780:	ldmib	r7, {r0, r1, r6}
   14784:	ldr	r5, [r7, #16]
   14788:	ldr	r7, [r7, #20]
   1478c:	stm	sp, {r0, r1, r6}
   14790:	str	r5, [sp, #12]
   14794:	str	r7, [sp, #16]
   14798:	b	147d8 <__assert_fail@plt+0x3800>
   1479c:	movw	r1, #24863	; 0x611f
   147a0:	mov	r0, #0
   147a4:	mov	r2, #5
   147a8:	movt	r1, #1
   147ac:	bl	10e10 <dcgettext@plt>
   147b0:	mov	r2, r0
   147b4:	ldr	r3, [r7]
   147b8:	ldmib	r7, {r0, r1, r6}
   147bc:	ldr	r5, [r7, #16]
   147c0:	ldr	r4, [r7, #20]
   147c4:	ldr	r7, [r7, #24]
   147c8:	stm	sp, {r0, r1, r6}
   147cc:	str	r5, [sp, #12]
   147d0:	str	r4, [sp, #16]
   147d4:	str	r7, [sp, #20]
   147d8:	mov	r0, r8
   147dc:	mov	r1, #1
   147e0:	bl	10f30 <__fprintf_chk@plt>
   147e4:	sub	sp, fp, #24
   147e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147ec:	movw	r1, #24955	; 0x617b
   147f0:	movt	r1, #1
   147f4:	mov	r0, #0
   147f8:	mov	r2, #5
   147fc:	bl	10e10 <dcgettext@plt>
   14800:	mov	ip, r0
   14804:	ldr	r3, [r7]
   14808:	ldr	r0, [r7, #4]
   1480c:	ldr	r1, [r7, #8]
   14810:	ldr	r6, [r7, #12]
   14814:	ldr	r5, [r7, #16]
   14818:	ldr	r4, [r7, #20]
   1481c:	ldr	r2, [r7, #24]
   14820:	ldr	lr, [r7, #28]
   14824:	ldr	r7, [r7, #32]
   14828:	stm	sp, {r0, r1, r6}
   1482c:	str	r5, [sp, #12]
   14830:	str	r4, [sp, #16]
   14834:	str	r2, [sp, #20]
   14838:	str	lr, [sp, #24]
   1483c:	str	r7, [sp, #28]
   14840:	b	14888 <__assert_fail@plt+0x38b0>
   14844:	movw	r1, #24907	; 0x614b
   14848:	mov	r0, #0
   1484c:	mov	r2, #5
   14850:	movt	r1, #1
   14854:	bl	10e10 <dcgettext@plt>
   14858:	mov	ip, r0
   1485c:	ldr	r3, [r7]
   14860:	ldmib	r7, {r0, r1, r6}
   14864:	ldr	r5, [r7, #16]
   14868:	ldr	r4, [r7, #20]
   1486c:	ldr	r2, [r7, #24]
   14870:	ldr	r7, [r7, #28]
   14874:	stm	sp, {r0, r1, r6}
   14878:	str	r5, [sp, #12]
   1487c:	str	r4, [sp, #16]
   14880:	str	r2, [sp, #20]
   14884:	str	r7, [sp, #24]
   14888:	mov	r0, r8
   1488c:	mov	r1, #1
   14890:	mov	r2, ip
   14894:	bl	10f30 <__fprintf_chk@plt>
   14898:	sub	sp, fp, #24
   1489c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148a0:	push	{r4, sl, fp, lr}
   148a4:	add	fp, sp, #8
   148a8:	sub	sp, sp, #8
   148ac:	ldr	ip, [fp, #8]
   148b0:	mov	lr, #0
   148b4:	ldr	r4, [ip, lr, lsl #2]
   148b8:	add	lr, lr, #1
   148bc:	cmp	r4, #0
   148c0:	bne	148b4 <__assert_fail@plt+0x38dc>
   148c4:	sub	r4, lr, #1
   148c8:	str	ip, [sp]
   148cc:	str	r4, [sp, #4]
   148d0:	bl	14564 <__assert_fail@plt+0x358c>
   148d4:	sub	sp, fp, #8
   148d8:	pop	{r4, sl, fp, pc}
   148dc:	push	{fp, lr}
   148e0:	mov	fp, sp
   148e4:	sub	sp, sp, #48	; 0x30
   148e8:	ldr	ip, [fp, #8]
   148ec:	ldr	lr, [ip]
   148f0:	cmp	lr, #0
   148f4:	str	lr, [sp, #8]
   148f8:	beq	14994 <__assert_fail@plt+0x39bc>
   148fc:	ldr	lr, [ip, #4]
   14900:	cmp	lr, #0
   14904:	str	lr, [sp, #12]
   14908:	beq	1499c <__assert_fail@plt+0x39c4>
   1490c:	ldr	lr, [ip, #8]
   14910:	cmp	lr, #0
   14914:	str	lr, [sp, #16]
   14918:	beq	149a4 <__assert_fail@plt+0x39cc>
   1491c:	ldr	lr, [ip, #12]
   14920:	cmp	lr, #0
   14924:	str	lr, [sp, #20]
   14928:	beq	149ac <__assert_fail@plt+0x39d4>
   1492c:	ldr	lr, [ip, #16]
   14930:	cmp	lr, #0
   14934:	str	lr, [sp, #24]
   14938:	beq	149b4 <__assert_fail@plt+0x39dc>
   1493c:	ldr	lr, [ip, #20]
   14940:	cmp	lr, #0
   14944:	str	lr, [sp, #28]
   14948:	beq	149bc <__assert_fail@plt+0x39e4>
   1494c:	ldr	lr, [ip, #24]
   14950:	cmp	lr, #0
   14954:	str	lr, [sp, #32]
   14958:	beq	149c4 <__assert_fail@plt+0x39ec>
   1495c:	ldr	lr, [ip, #28]
   14960:	cmp	lr, #0
   14964:	str	lr, [sp, #36]	; 0x24
   14968:	beq	149cc <__assert_fail@plt+0x39f4>
   1496c:	ldr	lr, [ip, #32]
   14970:	cmp	lr, #0
   14974:	str	lr, [sp, #40]	; 0x28
   14978:	beq	149d4 <__assert_fail@plt+0x39fc>
   1497c:	ldr	lr, [ip, #36]	; 0x24
   14980:	mov	ip, #10
   14984:	cmp	lr, #0
   14988:	str	lr, [sp, #44]	; 0x2c
   1498c:	movweq	ip, #9
   14990:	b	149d8 <__assert_fail@plt+0x3a00>
   14994:	mov	ip, #0
   14998:	b	149d8 <__assert_fail@plt+0x3a00>
   1499c:	mov	ip, #1
   149a0:	b	149d8 <__assert_fail@plt+0x3a00>
   149a4:	mov	ip, #2
   149a8:	b	149d8 <__assert_fail@plt+0x3a00>
   149ac:	mov	ip, #3
   149b0:	b	149d8 <__assert_fail@plt+0x3a00>
   149b4:	mov	ip, #4
   149b8:	b	149d8 <__assert_fail@plt+0x3a00>
   149bc:	mov	ip, #5
   149c0:	b	149d8 <__assert_fail@plt+0x3a00>
   149c4:	mov	ip, #6
   149c8:	b	149d8 <__assert_fail@plt+0x3a00>
   149cc:	mov	ip, #7
   149d0:	b	149d8 <__assert_fail@plt+0x3a00>
   149d4:	mov	ip, #8
   149d8:	add	lr, sp, #8
   149dc:	str	ip, [sp, #4]
   149e0:	str	lr, [sp]
   149e4:	bl	14564 <__assert_fail@plt+0x358c>
   149e8:	mov	sp, fp
   149ec:	pop	{fp, pc}
   149f0:	push	{fp, lr}
   149f4:	mov	fp, sp
   149f8:	sub	sp, sp, #56	; 0x38
   149fc:	add	ip, fp, #8
   14a00:	str	ip, [sp, #12]
   14a04:	ldr	lr, [fp, #8]
   14a08:	cmp	lr, #0
   14a0c:	str	lr, [sp, #16]
   14a10:	beq	14aac <__assert_fail@plt+0x3ad4>
   14a14:	ldr	lr, [ip, #4]
   14a18:	cmp	lr, #0
   14a1c:	str	lr, [sp, #20]
   14a20:	beq	14ab4 <__assert_fail@plt+0x3adc>
   14a24:	ldr	lr, [ip, #8]
   14a28:	cmp	lr, #0
   14a2c:	str	lr, [sp, #24]
   14a30:	beq	14abc <__assert_fail@plt+0x3ae4>
   14a34:	ldr	lr, [ip, #12]
   14a38:	cmp	lr, #0
   14a3c:	str	lr, [sp, #28]
   14a40:	beq	14ac4 <__assert_fail@plt+0x3aec>
   14a44:	ldr	lr, [ip, #16]
   14a48:	cmp	lr, #0
   14a4c:	str	lr, [sp, #32]
   14a50:	beq	14acc <__assert_fail@plt+0x3af4>
   14a54:	ldr	lr, [ip, #20]
   14a58:	cmp	lr, #0
   14a5c:	str	lr, [sp, #36]	; 0x24
   14a60:	beq	14ad4 <__assert_fail@plt+0x3afc>
   14a64:	ldr	lr, [ip, #24]
   14a68:	cmp	lr, #0
   14a6c:	str	lr, [sp, #40]	; 0x28
   14a70:	beq	14adc <__assert_fail@plt+0x3b04>
   14a74:	ldr	lr, [ip, #28]
   14a78:	cmp	lr, #0
   14a7c:	str	lr, [sp, #44]	; 0x2c
   14a80:	beq	14ae4 <__assert_fail@plt+0x3b0c>
   14a84:	ldr	lr, [ip, #32]
   14a88:	cmp	lr, #0
   14a8c:	str	lr, [sp, #48]	; 0x30
   14a90:	beq	14aec <__assert_fail@plt+0x3b14>
   14a94:	ldr	lr, [ip, #36]	; 0x24
   14a98:	mov	ip, #10
   14a9c:	cmp	lr, #0
   14aa0:	str	lr, [sp, #52]	; 0x34
   14aa4:	movweq	ip, #9
   14aa8:	b	14af0 <__assert_fail@plt+0x3b18>
   14aac:	mov	ip, #0
   14ab0:	b	14af0 <__assert_fail@plt+0x3b18>
   14ab4:	mov	ip, #1
   14ab8:	b	14af0 <__assert_fail@plt+0x3b18>
   14abc:	mov	ip, #2
   14ac0:	b	14af0 <__assert_fail@plt+0x3b18>
   14ac4:	mov	ip, #3
   14ac8:	b	14af0 <__assert_fail@plt+0x3b18>
   14acc:	mov	ip, #4
   14ad0:	b	14af0 <__assert_fail@plt+0x3b18>
   14ad4:	mov	ip, #5
   14ad8:	b	14af0 <__assert_fail@plt+0x3b18>
   14adc:	mov	ip, #6
   14ae0:	b	14af0 <__assert_fail@plt+0x3b18>
   14ae4:	mov	ip, #7
   14ae8:	b	14af0 <__assert_fail@plt+0x3b18>
   14aec:	mov	ip, #8
   14af0:	add	lr, sp, #16
   14af4:	str	ip, [sp, #4]
   14af8:	str	lr, [sp]
   14afc:	bl	14564 <__assert_fail@plt+0x358c>
   14b00:	mov	sp, fp
   14b04:	pop	{fp, pc}
   14b08:	push	{fp, lr}
   14b0c:	mov	fp, sp
   14b10:	movw	r0, #29004	; 0x714c
   14b14:	movt	r0, #2
   14b18:	ldr	r1, [r0]
   14b1c:	movw	r0, #23094	; 0x5a36
   14b20:	movt	r0, #1
   14b24:	bl	10da4 <fputs_unlocked@plt>
   14b28:	movw	r1, #25067	; 0x61eb
   14b2c:	mov	r0, #0
   14b30:	mov	r2, #5
   14b34:	movt	r1, #1
   14b38:	bl	10e10 <dcgettext@plt>
   14b3c:	movw	r2, #25087	; 0x61ff
   14b40:	mov	r1, r0
   14b44:	mov	r0, #1
   14b48:	movt	r2, #1
   14b4c:	bl	10f18 <__printf_chk@plt>
   14b50:	movw	r1, #25109	; 0x6215
   14b54:	mov	r0, #0
   14b58:	mov	r2, #5
   14b5c:	movt	r1, #1
   14b60:	bl	10e10 <dcgettext@plt>
   14b64:	movw	r2, #22624	; 0x5860
   14b68:	movw	r3, #22903	; 0x5977
   14b6c:	mov	r1, r0
   14b70:	mov	r0, #1
   14b74:	movt	r2, #1
   14b78:	movt	r3, #1
   14b7c:	bl	10f18 <__printf_chk@plt>
   14b80:	movw	r1, #25129	; 0x6229
   14b84:	mov	r0, #0
   14b88:	mov	r2, #5
   14b8c:	movt	r1, #1
   14b90:	bl	10e10 <dcgettext@plt>
   14b94:	movw	r2, #25168	; 0x6250
   14b98:	mov	r1, r0
   14b9c:	mov	r0, #1
   14ba0:	movt	r2, #1
   14ba4:	pop	{fp, lr}
   14ba8:	b	10f18 <__printf_chk@plt>
   14bac:	push	{r4, r5, r6, sl, fp, lr}
   14bb0:	add	fp, sp, #16
   14bb4:	mov	r4, r2
   14bb8:	mov	r5, r1
   14bbc:	mov	r6, r0
   14bc0:	bl	1539c <__assert_fail@plt+0x43c4>
   14bc4:	cmp	r0, #0
   14bc8:	popne	{r4, r5, r6, sl, fp, pc}
   14bcc:	cmp	r6, #0
   14bd0:	beq	14be4 <__assert_fail@plt+0x3c0c>
   14bd4:	cmp	r5, #0
   14bd8:	cmpne	r4, #0
   14bdc:	bne	14be4 <__assert_fail@plt+0x3c0c>
   14be0:	pop	{r4, r5, r6, sl, fp, pc}
   14be4:	bl	15160 <__assert_fail@plt+0x4188>
   14be8:	push	{r4, r5, r6, sl, fp, lr}
   14bec:	add	fp, sp, #16
   14bf0:	mov	r4, r2
   14bf4:	mov	r5, r1
   14bf8:	mov	r6, r0
   14bfc:	bl	1539c <__assert_fail@plt+0x43c4>
   14c00:	cmp	r0, #0
   14c04:	popne	{r4, r5, r6, sl, fp, pc}
   14c08:	cmp	r6, #0
   14c0c:	beq	14c20 <__assert_fail@plt+0x3c48>
   14c10:	cmp	r5, #0
   14c14:	cmpne	r4, #0
   14c18:	bne	14c20 <__assert_fail@plt+0x3c48>
   14c1c:	pop	{r4, r5, r6, sl, fp, pc}
   14c20:	bl	15160 <__assert_fail@plt+0x4188>
   14c24:	push	{fp, lr}
   14c28:	mov	fp, sp
   14c2c:	bl	151f8 <__assert_fail@plt+0x4220>
   14c30:	cmp	r0, #0
   14c34:	popne	{fp, pc}
   14c38:	bl	15160 <__assert_fail@plt+0x4188>
   14c3c:	push	{fp, lr}
   14c40:	mov	fp, sp
   14c44:	bl	151f8 <__assert_fail@plt+0x4220>
   14c48:	cmp	r0, #0
   14c4c:	popne	{fp, pc}
   14c50:	bl	15160 <__assert_fail@plt+0x4188>
   14c54:	push	{fp, lr}
   14c58:	mov	fp, sp
   14c5c:	bl	151f8 <__assert_fail@plt+0x4220>
   14c60:	cmp	r0, #0
   14c64:	popne	{fp, pc}
   14c68:	bl	15160 <__assert_fail@plt+0x4188>
   14c6c:	push	{r4, r5, fp, lr}
   14c70:	add	fp, sp, #8
   14c74:	mov	r4, r1
   14c78:	mov	r5, r0
   14c7c:	bl	15228 <__assert_fail@plt+0x4250>
   14c80:	cmp	r0, #0
   14c84:	popne	{r4, r5, fp, pc}
   14c88:	cmp	r5, #0
   14c8c:	beq	14c9c <__assert_fail@plt+0x3cc4>
   14c90:	cmp	r4, #0
   14c94:	bne	14c9c <__assert_fail@plt+0x3cc4>
   14c98:	pop	{r4, r5, fp, pc}
   14c9c:	bl	15160 <__assert_fail@plt+0x4188>
   14ca0:	push	{fp, lr}
   14ca4:	mov	fp, sp
   14ca8:	cmp	r1, #0
   14cac:	orreq	r1, r1, #1
   14cb0:	bl	15228 <__assert_fail@plt+0x4250>
   14cb4:	cmp	r0, #0
   14cb8:	popne	{fp, pc}
   14cbc:	bl	15160 <__assert_fail@plt+0x4188>
   14cc0:	push	{fp, lr}
   14cc4:	mov	fp, sp
   14cc8:	clz	r3, r2
   14ccc:	lsr	ip, r3, #5
   14cd0:	clz	r3, r1
   14cd4:	lsr	r3, r3, #5
   14cd8:	orrs	r3, r3, ip
   14cdc:	movwne	r1, #1
   14ce0:	movwne	r2, #1
   14ce4:	bl	1539c <__assert_fail@plt+0x43c4>
   14ce8:	cmp	r0, #0
   14cec:	popne	{fp, pc}
   14cf0:	bl	15160 <__assert_fail@plt+0x4188>
   14cf4:	push	{fp, lr}
   14cf8:	mov	fp, sp
   14cfc:	mov	r2, r1
   14d00:	mov	r1, r0
   14d04:	mov	r0, #0
   14d08:	bl	1539c <__assert_fail@plt+0x43c4>
   14d0c:	cmp	r0, #0
   14d10:	popne	{fp, pc}
   14d14:	bl	15160 <__assert_fail@plt+0x4188>
   14d18:	push	{fp, lr}
   14d1c:	mov	fp, sp
   14d20:	mov	r2, r1
   14d24:	mov	r1, r0
   14d28:	clz	r0, r2
   14d2c:	clz	r3, r1
   14d30:	lsr	r0, r0, #5
   14d34:	lsr	r3, r3, #5
   14d38:	orrs	r0, r3, r0
   14d3c:	mov	r0, #0
   14d40:	movwne	r1, #1
   14d44:	movwne	r2, #1
   14d48:	bl	1539c <__assert_fail@plt+0x43c4>
   14d4c:	cmp	r0, #0
   14d50:	popne	{fp, pc}
   14d54:	bl	15160 <__assert_fail@plt+0x4188>
   14d58:	push	{r4, r5, r6, sl, fp, lr}
   14d5c:	add	fp, sp, #16
   14d60:	ldr	r5, [r1]
   14d64:	mov	r4, r1
   14d68:	mov	r6, r0
   14d6c:	cmp	r0, #0
   14d70:	beq	14d88 <__assert_fail@plt+0x3db0>
   14d74:	mov	r0, #1
   14d78:	add	r0, r0, r5, lsr #1
   14d7c:	adds	r5, r5, r0
   14d80:	bcc	14d90 <__assert_fail@plt+0x3db8>
   14d84:	b	14dcc <__assert_fail@plt+0x3df4>
   14d88:	cmp	r5, #0
   14d8c:	movweq	r5, #64	; 0x40
   14d90:	mov	r0, r6
   14d94:	mov	r1, r5
   14d98:	mov	r2, #1
   14d9c:	bl	1539c <__assert_fail@plt+0x43c4>
   14da0:	cmp	r5, #0
   14da4:	mov	r1, r5
   14da8:	movwne	r1, #1
   14dac:	cmp	r0, #0
   14db0:	bne	14dc4 <__assert_fail@plt+0x3dec>
   14db4:	clz	r2, r6
   14db8:	lsr	r2, r2, #5
   14dbc:	orrs	r1, r2, r1
   14dc0:	bne	14dcc <__assert_fail@plt+0x3df4>
   14dc4:	str	r5, [r4]
   14dc8:	pop	{r4, r5, r6, sl, fp, pc}
   14dcc:	bl	15160 <__assert_fail@plt+0x4188>
   14dd0:	push	{r4, r5, r6, r7, fp, lr}
   14dd4:	add	fp, sp, #16
   14dd8:	ldr	r5, [r1]
   14ddc:	mov	r6, r2
   14de0:	mov	r4, r1
   14de4:	mov	r7, r0
   14de8:	cmp	r0, #0
   14dec:	beq	14e04 <__assert_fail@plt+0x3e2c>
   14df0:	mov	r0, #1
   14df4:	add	r0, r0, r5, lsr #1
   14df8:	adds	r5, r5, r0
   14dfc:	bcc	14e1c <__assert_fail@plt+0x3e44>
   14e00:	b	14e50 <__assert_fail@plt+0x3e78>
   14e04:	cmp	r5, #0
   14e08:	bne	14e1c <__assert_fail@plt+0x3e44>
   14e0c:	mov	r0, #64	; 0x40
   14e10:	cmp	r6, #64	; 0x40
   14e14:	udiv	r5, r0, r6
   14e18:	addhi	r5, r5, #1
   14e1c:	mov	r0, r7
   14e20:	mov	r1, r5
   14e24:	mov	r2, r6
   14e28:	bl	1539c <__assert_fail@plt+0x43c4>
   14e2c:	cmp	r0, #0
   14e30:	bne	14e48 <__assert_fail@plt+0x3e70>
   14e34:	cmp	r7, #0
   14e38:	beq	14e50 <__assert_fail@plt+0x3e78>
   14e3c:	cmp	r6, #0
   14e40:	cmpne	r5, #0
   14e44:	bne	14e50 <__assert_fail@plt+0x3e78>
   14e48:	str	r5, [r4]
   14e4c:	pop	{r4, r5, r6, r7, fp, pc}
   14e50:	bl	15160 <__assert_fail@plt+0x4188>
   14e54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e58:	add	fp, sp, #24
   14e5c:	mov	r8, r1
   14e60:	ldr	r1, [r1]
   14e64:	mov	r5, r0
   14e68:	add	r0, r1, r1, asr #1
   14e6c:	cmp	r0, r1
   14e70:	mvnvs	r0, #-2147483648	; 0x80000000
   14e74:	cmp	r0, r3
   14e78:	mov	r7, r0
   14e7c:	movgt	r7, r3
   14e80:	cmn	r3, #1
   14e84:	movle	r7, r0
   14e88:	ldr	r0, [fp, #8]
   14e8c:	cmn	r0, #1
   14e90:	ble	14eb8 <__assert_fail@plt+0x3ee0>
   14e94:	cmp	r0, #0
   14e98:	beq	14f0c <__assert_fail@plt+0x3f34>
   14e9c:	cmn	r7, #1
   14ea0:	ble	14ee0 <__assert_fail@plt+0x3f08>
   14ea4:	mvn	r4, #-2147483648	; 0x80000000
   14ea8:	udiv	r6, r4, r0
   14eac:	cmp	r6, r7
   14eb0:	bge	14f0c <__assert_fail@plt+0x3f34>
   14eb4:	b	14f1c <__assert_fail@plt+0x3f44>
   14eb8:	cmn	r7, #1
   14ebc:	ble	14efc <__assert_fail@plt+0x3f24>
   14ec0:	cmn	r0, #1
   14ec4:	beq	14f0c <__assert_fail@plt+0x3f34>
   14ec8:	mov	r6, #-2147483648	; 0x80000000
   14ecc:	mvn	r4, #-2147483648	; 0x80000000
   14ed0:	sdiv	r6, r6, r0
   14ed4:	cmp	r6, r7
   14ed8:	bge	14f0c <__assert_fail@plt+0x3f34>
   14edc:	b	14f1c <__assert_fail@plt+0x3f44>
   14ee0:	beq	14f0c <__assert_fail@plt+0x3f34>
   14ee4:	mov	r6, #-2147483648	; 0x80000000
   14ee8:	mvn	r4, #-2147483648	; 0x80000000
   14eec:	sdiv	r6, r6, r7
   14ef0:	cmp	r6, r0
   14ef4:	bge	14f0c <__assert_fail@plt+0x3f34>
   14ef8:	b	14f1c <__assert_fail@plt+0x3f44>
   14efc:	mvn	r4, #-2147483648	; 0x80000000
   14f00:	sdiv	r6, r4, r0
   14f04:	cmp	r7, r6
   14f08:	blt	14f1c <__assert_fail@plt+0x3f44>
   14f0c:	mul	r6, r7, r0
   14f10:	mov	r4, #64	; 0x40
   14f14:	cmp	r6, #63	; 0x3f
   14f18:	bgt	14f24 <__assert_fail@plt+0x3f4c>
   14f1c:	sdiv	r7, r4, r0
   14f20:	mul	r6, r7, r0
   14f24:	cmp	r5, #0
   14f28:	moveq	r4, #0
   14f2c:	streq	r4, [r8]
   14f30:	sub	r4, r7, r1
   14f34:	cmp	r4, r2
   14f38:	bge	14fe4 <__assert_fail@plt+0x400c>
   14f3c:	add	r7, r1, r2
   14f40:	mov	r6, #0
   14f44:	mov	r2, #0
   14f48:	cmp	r7, r3
   14f4c:	movwgt	r6, #1
   14f50:	cmn	r3, #1
   14f54:	movwgt	r2, #1
   14f58:	cmp	r7, r1
   14f5c:	bvs	15018 <__assert_fail@plt+0x4040>
   14f60:	ands	r1, r2, r6
   14f64:	bne	15018 <__assert_fail@plt+0x4040>
   14f68:	cmn	r0, #1
   14f6c:	ble	14f94 <__assert_fail@plt+0x3fbc>
   14f70:	cmp	r0, #0
   14f74:	beq	14fe0 <__assert_fail@plt+0x4008>
   14f78:	cmn	r7, #1
   14f7c:	ble	14fb8 <__assert_fail@plt+0x3fe0>
   14f80:	mvn	r1, #-2147483648	; 0x80000000
   14f84:	udiv	r1, r1, r0
   14f88:	cmp	r1, r7
   14f8c:	bge	14fe0 <__assert_fail@plt+0x4008>
   14f90:	b	15018 <__assert_fail@plt+0x4040>
   14f94:	cmn	r7, #1
   14f98:	ble	14fd0 <__assert_fail@plt+0x3ff8>
   14f9c:	cmn	r0, #1
   14fa0:	beq	14fe0 <__assert_fail@plt+0x4008>
   14fa4:	mov	r1, #-2147483648	; 0x80000000
   14fa8:	sdiv	r1, r1, r0
   14fac:	cmp	r1, r7
   14fb0:	bge	14fe0 <__assert_fail@plt+0x4008>
   14fb4:	b	15018 <__assert_fail@plt+0x4040>
   14fb8:	beq	14fe0 <__assert_fail@plt+0x4008>
   14fbc:	mov	r1, #-2147483648	; 0x80000000
   14fc0:	sdiv	r1, r1, r7
   14fc4:	cmp	r1, r0
   14fc8:	bge	14fe0 <__assert_fail@plt+0x4008>
   14fcc:	b	15018 <__assert_fail@plt+0x4040>
   14fd0:	mvn	r1, #-2147483648	; 0x80000000
   14fd4:	sdiv	r1, r1, r0
   14fd8:	cmp	r7, r1
   14fdc:	blt	15018 <__assert_fail@plt+0x4040>
   14fe0:	mul	r6, r7, r0
   14fe4:	mov	r0, r5
   14fe8:	mov	r1, r6
   14fec:	bl	15228 <__assert_fail@plt+0x4250>
   14ff0:	cmp	r6, #0
   14ff4:	movwne	r6, #1
   14ff8:	cmp	r0, #0
   14ffc:	bne	15010 <__assert_fail@plt+0x4038>
   15000:	clz	r1, r5
   15004:	lsr	r1, r1, #5
   15008:	orrs	r1, r1, r6
   1500c:	bne	15018 <__assert_fail@plt+0x4040>
   15010:	str	r7, [r8]
   15014:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15018:	bl	15160 <__assert_fail@plt+0x4188>
   1501c:	push	{fp, lr}
   15020:	mov	fp, sp
   15024:	mov	r1, #1
   15028:	bl	151a4 <__assert_fail@plt+0x41cc>
   1502c:	cmp	r0, #0
   15030:	popne	{fp, pc}
   15034:	bl	15160 <__assert_fail@plt+0x4188>
   15038:	push	{fp, lr}
   1503c:	mov	fp, sp
   15040:	bl	151a4 <__assert_fail@plt+0x41cc>
   15044:	cmp	r0, #0
   15048:	popne	{fp, pc}
   1504c:	bl	15160 <__assert_fail@plt+0x4188>
   15050:	push	{fp, lr}
   15054:	mov	fp, sp
   15058:	mov	r1, #1
   1505c:	bl	151a4 <__assert_fail@plt+0x41cc>
   15060:	cmp	r0, #0
   15064:	popne	{fp, pc}
   15068:	bl	15160 <__assert_fail@plt+0x4188>
   1506c:	push	{fp, lr}
   15070:	mov	fp, sp
   15074:	bl	151a4 <__assert_fail@plt+0x41cc>
   15078:	cmp	r0, #0
   1507c:	popne	{fp, pc}
   15080:	bl	15160 <__assert_fail@plt+0x4188>
   15084:	push	{r4, r5, fp, lr}
   15088:	add	fp, sp, #8
   1508c:	mov	r5, r0
   15090:	mov	r0, r1
   15094:	mov	r4, r1
   15098:	bl	151f8 <__assert_fail@plt+0x4220>
   1509c:	cmp	r0, #0
   150a0:	beq	150b4 <__assert_fail@plt+0x40dc>
   150a4:	mov	r1, r5
   150a8:	mov	r2, r4
   150ac:	pop	{r4, r5, fp, lr}
   150b0:	b	10df8 <memcpy@plt>
   150b4:	bl	15160 <__assert_fail@plt+0x4188>
   150b8:	push	{r4, r5, fp, lr}
   150bc:	add	fp, sp, #8
   150c0:	mov	r5, r0
   150c4:	mov	r0, r1
   150c8:	mov	r4, r1
   150cc:	bl	151f8 <__assert_fail@plt+0x4220>
   150d0:	cmp	r0, #0
   150d4:	beq	150e8 <__assert_fail@plt+0x4110>
   150d8:	mov	r1, r5
   150dc:	mov	r2, r4
   150e0:	pop	{r4, r5, fp, lr}
   150e4:	b	10df8 <memcpy@plt>
   150e8:	bl	15160 <__assert_fail@plt+0x4188>
   150ec:	push	{r4, r5, fp, lr}
   150f0:	add	fp, sp, #8
   150f4:	mov	r5, r0
   150f8:	add	r0, r1, #1
   150fc:	mov	r4, r1
   15100:	bl	151f8 <__assert_fail@plt+0x4220>
   15104:	cmp	r0, #0
   15108:	beq	15124 <__assert_fail@plt+0x414c>
   1510c:	mov	r1, #0
   15110:	mov	r2, r4
   15114:	strb	r1, [r0, r4]
   15118:	mov	r1, r5
   1511c:	pop	{r4, r5, fp, lr}
   15120:	b	10df8 <memcpy@plt>
   15124:	bl	15160 <__assert_fail@plt+0x4188>
   15128:	push	{r4, r5, fp, lr}
   1512c:	add	fp, sp, #8
   15130:	mov	r4, r0
   15134:	bl	10ee8 <strlen@plt>
   15138:	add	r5, r0, #1
   1513c:	mov	r0, r5
   15140:	bl	151f8 <__assert_fail@plt+0x4220>
   15144:	cmp	r0, #0
   15148:	beq	1515c <__assert_fail@plt+0x4184>
   1514c:	mov	r1, r4
   15150:	mov	r2, r5
   15154:	pop	{r4, r5, fp, lr}
   15158:	b	10df8 <memcpy@plt>
   1515c:	bl	15160 <__assert_fail@plt+0x4188>
   15160:	push	{fp, lr}
   15164:	mov	fp, sp
   15168:	movw	r0, #28908	; 0x70ec
   1516c:	movw	r1, #25244	; 0x629c
   15170:	mov	r2, #5
   15174:	movt	r0, #2
   15178:	movt	r1, #1
   1517c:	ldr	r4, [r0]
   15180:	mov	r0, #0
   15184:	bl	10e10 <dcgettext@plt>
   15188:	movw	r2, #23517	; 0x5bdd
   1518c:	mov	r3, r0
   15190:	mov	r0, r4
   15194:	mov	r1, #0
   15198:	movt	r2, #1
   1519c:	bl	10e7c <error@plt>
   151a0:	bl	10fc0 <abort@plt>
   151a4:	clz	r2, r1
   151a8:	clz	r3, r0
   151ac:	lsr	r2, r2, #5
   151b0:	lsr	r3, r3, #5
   151b4:	orrs	r2, r3, r2
   151b8:	movwne	r1, #1
   151bc:	movwne	r0, #1
   151c0:	cmp	r1, #0
   151c4:	beq	151f4 <__assert_fail@plt+0x421c>
   151c8:	mvn	r2, #-2147483648	; 0x80000000
   151cc:	udiv	r2, r2, r1
   151d0:	cmp	r2, r0
   151d4:	bcs	151f4 <__assert_fail@plt+0x421c>
   151d8:	push	{fp, lr}
   151dc:	mov	fp, sp
   151e0:	bl	10ef4 <__errno_location@plt>
   151e4:	mov	r1, #12
   151e8:	str	r1, [r0]
   151ec:	mov	r0, #0
   151f0:	pop	{fp, pc}
   151f4:	b	10d98 <calloc@plt>
   151f8:	cmp	r0, #0
   151fc:	movweq	r0, #1
   15200:	cmn	r0, #1
   15204:	ble	1520c <__assert_fail@plt+0x4234>
   15208:	b	10e88 <malloc@plt>
   1520c:	push	{fp, lr}
   15210:	mov	fp, sp
   15214:	bl	10ef4 <__errno_location@plt>
   15218:	mov	r1, #12
   1521c:	str	r1, [r0]
   15220:	mov	r0, #0
   15224:	pop	{fp, pc}
   15228:	push	{fp, lr}
   1522c:	mov	fp, sp
   15230:	cmp	r0, #0
   15234:	beq	15250 <__assert_fail@plt+0x4278>
   15238:	cmp	r1, #0
   1523c:	beq	1525c <__assert_fail@plt+0x4284>
   15240:	cmn	r1, #1
   15244:	ble	15268 <__assert_fail@plt+0x4290>
   15248:	pop	{fp, lr}
   1524c:	b	10e1c <realloc@plt>
   15250:	mov	r0, r1
   15254:	pop	{fp, lr}
   15258:	b	151f8 <__assert_fail@plt+0x4220>
   1525c:	bl	124b8 <__assert_fail@plt+0x14e0>
   15260:	mov	r0, #0
   15264:	pop	{fp, pc}
   15268:	bl	10ef4 <__errno_location@plt>
   1526c:	mov	r1, #12
   15270:	str	r1, [r0]
   15274:	mov	r0, #0
   15278:	pop	{fp, pc}
   1527c:	push	{r4, r5, r6, sl, fp, lr}
   15280:	add	fp, sp, #16
   15284:	mov	r4, r0
   15288:	bl	10e64 <__fpending@plt>
   1528c:	ldr	r6, [r4]
   15290:	mov	r5, r0
   15294:	mov	r0, r4
   15298:	bl	123c0 <__assert_fail@plt+0x13e8>
   1529c:	tst	r6, #32
   152a0:	bne	152d8 <__assert_fail@plt+0x4300>
   152a4:	cmp	r0, #0
   152a8:	mov	r4, r0
   152ac:	mvnne	r4, #0
   152b0:	cmp	r5, #0
   152b4:	bne	152e4 <__assert_fail@plt+0x430c>
   152b8:	cmp	r0, #0
   152bc:	beq	152e4 <__assert_fail@plt+0x430c>
   152c0:	bl	10ef4 <__errno_location@plt>
   152c4:	ldr	r0, [r0]
   152c8:	subs	r4, r0, #9
   152cc:	mvnne	r4, #0
   152d0:	mov	r0, r4
   152d4:	pop	{r4, r5, r6, sl, fp, pc}
   152d8:	mvn	r4, #0
   152dc:	cmp	r0, #0
   152e0:	beq	152ec <__assert_fail@plt+0x4314>
   152e4:	mov	r0, r4
   152e8:	pop	{r4, r5, r6, sl, fp, pc}
   152ec:	bl	10ef4 <__errno_location@plt>
   152f0:	mov	r1, #0
   152f4:	str	r1, [r0]
   152f8:	mov	r0, r4
   152fc:	pop	{r4, r5, r6, sl, fp, pc}
   15300:	push	{fp, lr}
   15304:	mov	fp, sp
   15308:	mov	r0, #14
   1530c:	bl	10f84 <nl_langinfo@plt>
   15310:	movw	r1, #23095	; 0x5a37
   15314:	cmp	r0, #0
   15318:	movt	r1, #1
   1531c:	movne	r1, r0
   15320:	movw	r0, #25261	; 0x62ad
   15324:	ldrb	r2, [r1]
   15328:	movt	r0, #1
   1532c:	cmp	r2, #0
   15330:	movne	r0, r1
   15334:	pop	{fp, pc}
   15338:	push	{r4, r5, r6, r7, fp, lr}
   1533c:	add	fp, sp, #16
   15340:	sub	sp, sp, #8
   15344:	cmp	r0, #0
   15348:	add	r5, sp, #4
   1534c:	mov	r7, r2
   15350:	mov	r4, r1
   15354:	movne	r5, r0
   15358:	mov	r0, r5
   1535c:	bl	10e70 <mbrtowc@plt>
   15360:	mov	r6, r0
   15364:	cmp	r7, #0
   15368:	beq	15390 <__assert_fail@plt+0x43b8>
   1536c:	cmn	r6, #2
   15370:	bcc	15390 <__assert_fail@plt+0x43b8>
   15374:	mov	r0, #0
   15378:	bl	153d8 <__assert_fail@plt+0x4400>
   1537c:	cmp	r0, #0
   15380:	bne	15390 <__assert_fail@plt+0x43b8>
   15384:	ldrb	r0, [r4]
   15388:	mov	r6, #1
   1538c:	str	r0, [r5]
   15390:	mov	r0, r6
   15394:	sub	sp, fp, #16
   15398:	pop	{r4, r5, r6, r7, fp, pc}
   1539c:	cmp	r2, #0
   153a0:	beq	153d0 <__assert_fail@plt+0x43f8>
   153a4:	mvn	r3, #0
   153a8:	udiv	r3, r3, r2
   153ac:	cmp	r3, r1
   153b0:	bcs	153d0 <__assert_fail@plt+0x43f8>
   153b4:	push	{fp, lr}
   153b8:	mov	fp, sp
   153bc:	bl	10ef4 <__errno_location@plt>
   153c0:	mov	r1, #12
   153c4:	str	r1, [r0]
   153c8:	mov	r0, #0
   153cc:	pop	{fp, pc}
   153d0:	mul	r1, r2, r1
   153d4:	b	15228 <__assert_fail@plt+0x4250>
   153d8:	push	{r4, sl, fp, lr}
   153dc:	add	fp, sp, #8
   153e0:	sub	sp, sp, #264	; 0x108
   153e4:	add	r1, sp, #7
   153e8:	movw	r2, #257	; 0x101
   153ec:	bl	15444 <__assert_fail@plt+0x446c>
   153f0:	mov	r4, #0
   153f4:	cmp	r0, #0
   153f8:	bne	15438 <__assert_fail@plt+0x4460>
   153fc:	movw	r1, #25267	; 0x62b3
   15400:	add	r0, sp, #7
   15404:	mov	r2, #2
   15408:	movt	r1, #1
   1540c:	bl	10edc <bcmp@plt>
   15410:	cmp	r0, #0
   15414:	beq	15438 <__assert_fail@plt+0x4460>
   15418:	movw	r1, #25269	; 0x62b5
   1541c:	add	r0, sp, #7
   15420:	mov	r2, #6
   15424:	movt	r1, #1
   15428:	bl	10edc <bcmp@plt>
   1542c:	cmp	r0, #0
   15430:	mov	r4, r0
   15434:	movwne	r4, #1
   15438:	mov	r0, r4
   1543c:	sub	sp, fp, #8
   15440:	pop	{r4, sl, fp, pc}
   15444:	push	{r4, r5, r6, r7, fp, lr}
   15448:	add	fp, sp, #16
   1544c:	mov	r4, r1
   15450:	mov	r1, #0
   15454:	mov	r6, r2
   15458:	bl	10f6c <setlocale@plt>
   1545c:	cmp	r0, #0
   15460:	beq	15490 <__assert_fail@plt+0x44b8>
   15464:	mov	r7, r0
   15468:	bl	10ee8 <strlen@plt>
   1546c:	cmp	r0, r6
   15470:	bcs	154ac <__assert_fail@plt+0x44d4>
   15474:	add	r2, r0, #1
   15478:	mov	r0, r4
   1547c:	mov	r1, r7
   15480:	bl	10df8 <memcpy@plt>
   15484:	mov	r5, #0
   15488:	mov	r0, r5
   1548c:	pop	{r4, r5, r6, r7, fp, pc}
   15490:	mov	r5, #22
   15494:	cmp	r6, #0
   15498:	beq	154d4 <__assert_fail@plt+0x44fc>
   1549c:	mov	r0, #0
   154a0:	strb	r0, [r4]
   154a4:	mov	r0, r5
   154a8:	pop	{r4, r5, r6, r7, fp, pc}
   154ac:	mov	r5, #34	; 0x22
   154b0:	cmp	r6, #0
   154b4:	beq	154d4 <__assert_fail@plt+0x44fc>
   154b8:	sub	r6, r6, #1
   154bc:	mov	r0, r4
   154c0:	mov	r1, r7
   154c4:	mov	r2, r6
   154c8:	bl	10df8 <memcpy@plt>
   154cc:	mov	r0, #0
   154d0:	strb	r0, [r4, r6]
   154d4:	mov	r0, r5
   154d8:	pop	{r4, r5, r6, r7, fp, pc}
   154dc:	mov	r1, #0
   154e0:	b	10f6c <setlocale@plt>
   154e4:	cmp	r3, #0
   154e8:	cmpeq	r2, #0
   154ec:	bne	15504 <__assert_fail@plt+0x452c>
   154f0:	cmp	r1, #0
   154f4:	cmpeq	r0, #0
   154f8:	mvnne	r1, #0
   154fc:	mvnne	r0, #0
   15500:	b	15520 <__assert_fail@plt+0x4548>
   15504:	sub	sp, sp, #8
   15508:	push	{sp, lr}
   1550c:	bl	15530 <__assert_fail@plt+0x4558>
   15510:	ldr	lr, [sp, #4]
   15514:	add	sp, sp, #8
   15518:	pop	{r2, r3}
   1551c:	bx	lr
   15520:	push	{r1, lr}
   15524:	mov	r0, #8
   15528:	bl	10db0 <raise@plt>
   1552c:	pop	{r1, pc}
   15530:	cmp	r1, r3
   15534:	cmpeq	r0, r2
   15538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1553c:	mov	r4, r0
   15540:	movcc	r0, #0
   15544:	mov	r5, r1
   15548:	ldr	lr, [sp, #36]	; 0x24
   1554c:	movcc	r1, r0
   15550:	bcc	1564c <__assert_fail@plt+0x4674>
   15554:	cmp	r3, #0
   15558:	clzeq	ip, r2
   1555c:	clzne	ip, r3
   15560:	addeq	ip, ip, #32
   15564:	cmp	r5, #0
   15568:	clzeq	r1, r4
   1556c:	addeq	r1, r1, #32
   15570:	clzne	r1, r5
   15574:	sub	ip, ip, r1
   15578:	sub	sl, ip, #32
   1557c:	lsl	r9, r3, ip
   15580:	rsb	fp, ip, #32
   15584:	orr	r9, r9, r2, lsl sl
   15588:	orr	r9, r9, r2, lsr fp
   1558c:	lsl	r8, r2, ip
   15590:	cmp	r5, r9
   15594:	cmpeq	r4, r8
   15598:	movcc	r0, #0
   1559c:	movcc	r1, r0
   155a0:	bcc	155bc <__assert_fail@plt+0x45e4>
   155a4:	mov	r0, #1
   155a8:	subs	r4, r4, r8
   155ac:	lsl	r1, r0, sl
   155b0:	orr	r1, r1, r0, lsr fp
   155b4:	lsl	r0, r0, ip
   155b8:	sbc	r5, r5, r9
   155bc:	cmp	ip, #0
   155c0:	beq	1564c <__assert_fail@plt+0x4674>
   155c4:	lsr	r6, r8, #1
   155c8:	orr	r6, r6, r9, lsl #31
   155cc:	lsr	r7, r9, #1
   155d0:	mov	r2, ip
   155d4:	b	155f8 <__assert_fail@plt+0x4620>
   155d8:	subs	r3, r4, r6
   155dc:	sbc	r8, r5, r7
   155e0:	adds	r3, r3, r3
   155e4:	adc	r8, r8, r8
   155e8:	adds	r4, r3, #1
   155ec:	adc	r5, r8, #0
   155f0:	subs	r2, r2, #1
   155f4:	beq	15614 <__assert_fail@plt+0x463c>
   155f8:	cmp	r5, r7
   155fc:	cmpeq	r4, r6
   15600:	bcs	155d8 <__assert_fail@plt+0x4600>
   15604:	adds	r4, r4, r4
   15608:	adc	r5, r5, r5
   1560c:	subs	r2, r2, #1
   15610:	bne	155f8 <__assert_fail@plt+0x4620>
   15614:	lsr	r3, r4, ip
   15618:	orr	r3, r3, r5, lsl fp
   1561c:	lsr	r2, r5, ip
   15620:	orr	r3, r3, r5, lsr sl
   15624:	adds	r0, r0, r4
   15628:	mov	r4, r3
   1562c:	lsl	r3, r2, ip
   15630:	orr	r3, r3, r4, lsl sl
   15634:	lsl	ip, r4, ip
   15638:	orr	r3, r3, r4, lsr fp
   1563c:	adc	r1, r1, r5
   15640:	subs	r0, r0, ip
   15644:	mov	r5, r2
   15648:	sbc	r1, r1, r3
   1564c:	cmp	lr, #0
   15650:	strdne	r4, [lr]
   15654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15658:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1565c:	mov	r7, r0
   15660:	ldr	r6, [pc, #72]	; 156b0 <__assert_fail@plt+0x46d8>
   15664:	ldr	r5, [pc, #72]	; 156b4 <__assert_fail@plt+0x46dc>
   15668:	add	r6, pc, r6
   1566c:	add	r5, pc, r5
   15670:	sub	r6, r6, r5
   15674:	mov	r8, r1
   15678:	mov	r9, r2
   1567c:	bl	10d78 <calloc@plt-0x20>
   15680:	asrs	r6, r6, #2
   15684:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15688:	mov	r4, #0
   1568c:	add	r4, r4, #1
   15690:	ldr	r3, [r5], #4
   15694:	mov	r2, r9
   15698:	mov	r1, r8
   1569c:	mov	r0, r7
   156a0:	blx	r3
   156a4:	cmp	r6, r4
   156a8:	bne	1568c <__assert_fail@plt+0x46b4>
   156ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156b0:	muleq	r1, ip, r8
   156b4:	muleq	r1, r4, r8
   156b8:	bx	lr
   156bc:	ldr	r3, [pc, #12]	; 156d0 <__assert_fail@plt+0x46f8>
   156c0:	mov	r1, #0
   156c4:	add	r3, pc, r3
   156c8:	ldr	r2, [r3]
   156cc:	b	10f00 <__cxa_atexit@plt>
   156d0:	andeq	r1, r1, r0, lsl sl

Disassembly of section .fini:

000156d4 <.fini>:
   156d4:	push	{r3, lr}
   156d8:	pop	{r3, pc}
