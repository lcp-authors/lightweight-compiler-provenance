
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

00011dcc <.init>:
   11dcc:	push	{r3, lr}
   11dd0:	bl	1238c <__assert_fail@plt+0x54>
   11dd4:	pop	{r3, pc}

Disassembly of section .plt:

00011dd8 <pthread_mutex_unlock@plt-0x14>:
   11dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   11ddc:	ldr	lr, [pc, #4]	; 11de8 <pthread_mutex_unlock@plt-0x4>
   11de0:	add	lr, pc, lr
   11de4:	ldr	pc, [lr, #8]!
   11de8:	andeq	r6, r2, r8, lsl r2

00011dec <pthread_mutex_unlock@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #155648	; 0x26000
   11df4:	ldr	pc, [ip, #536]!	; 0x218

00011df8 <fdopen@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #155648	; 0x26000
   11e00:	ldr	pc, [ip, #528]!	; 0x210

00011e04 <calloc@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #155648	; 0x26000
   11e0c:	ldr	pc, [ip, #520]!	; 0x208

00011e10 <fputs_unlocked@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #155648	; 0x26000
   11e18:	ldr	pc, [ip, #512]!	; 0x200

00011e1c <raise@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #155648	; 0x26000
   11e24:	ldr	pc, [ip, #504]!	; 0x1f8

00011e28 <strcmp@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #155648	; 0x26000
   11e30:	ldr	pc, [ip, #496]!	; 0x1f0

00011e34 <strtol@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #155648	; 0x26000
   11e3c:	ldr	pc, [ip, #488]!	; 0x1e8

00011e40 <posix_fadvise64@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #155648	; 0x26000
   11e48:	ldr	pc, [ip, #480]!	; 0x1e0

00011e4c <pause@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #155648	; 0x26000
   11e54:	ldr	pc, [ip, #472]!	; 0x1d8

00011e58 <pthread_mutex_destroy@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #155648	; 0x26000
   11e60:	ldr	pc, [ip, #464]!	; 0x1d0

00011e64 <fflush@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #155648	; 0x26000
   11e6c:	ldr	pc, [ip, #456]!	; 0x1c8

00011e70 <wcwidth@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #155648	; 0x26000
   11e78:	ldr	pc, [ip, #448]!	; 0x1c0

00011e7c <memmove@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #155648	; 0x26000
   11e84:	ldr	pc, [ip, #440]!	; 0x1b8

00011e88 <free@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #155648	; 0x26000
   11e90:	ldr	pc, [ip, #432]!	; 0x1b0

00011e94 <pthread_mutex_lock@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #155648	; 0x26000
   11e9c:	ldr	pc, [ip, #424]!	; 0x1a8

00011ea0 <nanosleep@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #155648	; 0x26000
   11ea8:	ldr	pc, [ip, #416]!	; 0x1a0

00011eac <ferror@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #155648	; 0x26000
   11eb4:	ldr	pc, [ip, #408]!	; 0x198

00011eb8 <_exit@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #155648	; 0x26000
   11ec0:	ldr	pc, [ip, #400]!	; 0x190

00011ec4 <memcpy@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #155648	; 0x26000
   11ecc:	ldr	pc, [ip, #392]!	; 0x188

00011ed0 <execlp@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #155648	; 0x26000
   11ed8:	ldr	pc, [ip, #384]!	; 0x180

00011edc <pthread_mutex_init@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #155648	; 0x26000
   11ee4:	ldr	pc, [ip, #376]!	; 0x178

00011ee8 <__strtoull_internal@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #155648	; 0x26000
   11ef0:	ldr	pc, [ip, #368]!	; 0x170

00011ef4 <mbsinit@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #155648	; 0x26000
   11efc:	ldr	pc, [ip, #360]!	; 0x168

00011f00 <signal@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #155648	; 0x26000
   11f08:	ldr	pc, [ip, #352]!	; 0x160

00011f0c <__sched_cpucount@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #155648	; 0x26000
   11f14:	ldr	pc, [ip, #344]!	; 0x158

00011f18 <strtold@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #155648	; 0x26000
   11f20:	ldr	pc, [ip, #336]!	; 0x150

00011f24 <ftruncate64@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #155648	; 0x26000
   11f2c:	ldr	pc, [ip, #328]!	; 0x148

00011f30 <fwrite_unlocked@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #155648	; 0x26000
   11f38:	ldr	pc, [ip, #320]!	; 0x140

00011f3c <memcmp@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #155648	; 0x26000
   11f44:	ldr	pc, [ip, #312]!	; 0x138

00011f48 <stpcpy@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #155648	; 0x26000
   11f50:	ldr	pc, [ip, #304]!	; 0x130

00011f54 <dcgettext@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #155648	; 0x26000
   11f5c:	ldr	pc, [ip, #296]!	; 0x128

00011f60 <pthread_cond_init@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #155648	; 0x26000
   11f68:	ldr	pc, [ip, #288]!	; 0x120

00011f6c <sysconf@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #155648	; 0x26000
   11f74:	ldr	pc, [ip, #280]!	; 0x118

00011f78 <unlink@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #155648	; 0x26000
   11f80:	ldr	pc, [ip, #272]!	; 0x110

00011f84 <dup2@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #155648	; 0x26000
   11f8c:	ldr	pc, [ip, #264]!	; 0x108

00011f90 <getrlimit64@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #155648	; 0x26000
   11f98:	ldr	pc, [ip, #256]!	; 0x100

00011f9c <realloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #155648	; 0x26000
   11fa4:	ldr	pc, [ip, #248]!	; 0xf8

00011fa8 <sigismember@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #155648	; 0x26000
   11fb0:	ldr	pc, [ip, #240]!	; 0xf0

00011fb4 <textdomain@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #155648	; 0x26000
   11fbc:	ldr	pc, [ip, #232]!	; 0xe8

00011fc0 <iswcntrl@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #155648	; 0x26000
   11fc8:	ldr	pc, [ip, #224]!	; 0xe0

00011fcc <pthread_cond_destroy@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #155648	; 0x26000
   11fd4:	ldr	pc, [ip, #216]!	; 0xd8

00011fd8 <fflush_unlocked@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #155648	; 0x26000
   11fe0:	ldr	pc, [ip, #208]!	; 0xd0

00011fe4 <iswprint@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #155648	; 0x26000
   11fec:	ldr	pc, [ip, #200]!	; 0xc8

00011ff0 <__fxstat64@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #155648	; 0x26000
   11ff8:	ldr	pc, [ip, #192]!	; 0xc0

00011ffc <sigaction@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #155648	; 0x26000
   12004:	ldr	pc, [ip, #184]!	; 0xb8

00012008 <mkostemp64@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #155648	; 0x26000
   12010:	ldr	pc, [ip, #176]!	; 0xb0

00012014 <fwrite@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #155648	; 0x26000
   1201c:	ldr	pc, [ip, #168]!	; 0xa8

00012020 <lseek64@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #155648	; 0x26000
   12028:	ldr	pc, [ip, #160]!	; 0xa0

0001202c <__stpcpy_chk@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #155648	; 0x26000
   12034:	ldr	pc, [ip, #152]!	; 0x98

00012038 <waitpid@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #155648	; 0x26000
   12040:	ldr	pc, [ip, #144]!	; 0x90

00012044 <__ctype_get_mb_cur_max@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #155648	; 0x26000
   1204c:	ldr	pc, [ip, #136]!	; 0x88

00012050 <pthread_sigmask@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #155648	; 0x26000
   12058:	ldr	pc, [ip, #128]!	; 0x80

0001205c <pthread_create@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #155648	; 0x26000
   12064:	ldr	pc, [ip, #120]!	; 0x78

00012068 <__fpending@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #155648	; 0x26000
   12070:	ldr	pc, [ip, #112]!	; 0x70

00012074 <mbrtowc@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #155648	; 0x26000
   1207c:	ldr	pc, [ip, #104]!	; 0x68

00012080 <error@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #155648	; 0x26000
   12088:	ldr	pc, [ip, #96]!	; 0x60

0001208c <open64@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #155648	; 0x26000
   12094:	ldr	pc, [ip, #88]!	; 0x58

00012098 <strcoll@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #155648	; 0x26000
   120a0:	ldr	pc, [ip, #80]!	; 0x50

000120a4 <getenv@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #155648	; 0x26000
   120ac:	ldr	pc, [ip, #72]!	; 0x48

000120b0 <mkstemp64@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #155648	; 0x26000
   120b8:	ldr	pc, [ip, #64]!	; 0x40

000120bc <sysinfo@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #155648	; 0x26000
   120c4:	ldr	pc, [ip, #56]!	; 0x38

000120c8 <malloc@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #155648	; 0x26000
   120d0:	ldr	pc, [ip, #48]!	; 0x30

000120d4 <sigaddset@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #155648	; 0x26000
   120dc:	ldr	pc, [ip, #40]!	; 0x28

000120e0 <__libc_start_main@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #155648	; 0x26000
   120e8:	ldr	pc, [ip, #32]!

000120ec <__freading@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #155648	; 0x26000
   120f4:	ldr	pc, [ip, #24]!

000120f8 <__ctype_toupper_loc@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #155648	; 0x26000
   12100:	ldr	pc, [ip, #16]!

00012104 <__gmon_start__@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #155648	; 0x26000
   1210c:	ldr	pc, [ip, #8]!

00012110 <getopt_long@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #155648	; 0x26000
   12118:	ldr	pc, [ip, #0]!

0001211c <__ctype_b_loc@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #151552	; 0x25000
   12124:	ldr	pc, [ip, #4088]!	; 0xff8

00012128 <exit@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #151552	; 0x25000
   12130:	ldr	pc, [ip, #4080]!	; 0xff0

00012134 <strtoul@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #151552	; 0x25000
   1213c:	ldr	pc, [ip, #4072]!	; 0xfe8

00012140 <strlen@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #151552	; 0x25000
   12148:	ldr	pc, [ip, #4064]!	; 0xfe0

0001214c <strchr@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #151552	; 0x25000
   12154:	ldr	pc, [ip, #4056]!	; 0xfd8

00012158 <strxfrm@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #151552	; 0x25000
   12160:	ldr	pc, [ip, #4048]!	; 0xfd0

00012164 <__errno_location@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #151552	; 0x25000
   1216c:	ldr	pc, [ip, #4040]!	; 0xfc8

00012170 <__cxa_atexit@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #151552	; 0x25000
   12178:	ldr	pc, [ip, #4032]!	; 0xfc0

0001217c <setvbuf@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #151552	; 0x25000
   12184:	ldr	pc, [ip, #4024]!	; 0xfb8

00012188 <memset@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #151552	; 0x25000
   12190:	ldr	pc, [ip, #4016]!	; 0xfb0

00012194 <fgetc@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #151552	; 0x25000
   1219c:	ldr	pc, [ip, #4008]!	; 0xfa8

000121a0 <__printf_chk@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #151552	; 0x25000
   121a8:	ldr	pc, [ip, #4000]!	; 0xfa0

000121ac <write@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #151552	; 0x25000
   121b4:	ldr	pc, [ip, #3992]!	; 0xf98

000121b8 <fileno@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #151552	; 0x25000
   121c0:	ldr	pc, [ip, #3984]!	; 0xf90

000121c4 <__fprintf_chk@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #151552	; 0x25000
   121cc:	ldr	pc, [ip, #3976]!	; 0xf88

000121d0 <memchr@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #151552	; 0x25000
   121d8:	ldr	pc, [ip, #3968]!	; 0xf80

000121dc <fclose@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #151552	; 0x25000
   121e4:	ldr	pc, [ip, #3960]!	; 0xf78

000121e8 <pipe@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #151552	; 0x25000
   121f0:	ldr	pc, [ip, #3952]!	; 0xf70

000121f4 <fseeko64@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #151552	; 0x25000
   121fc:	ldr	pc, [ip, #3944]!	; 0xf68

00012200 <fcntl64@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #151552	; 0x25000
   12208:	ldr	pc, [ip, #3936]!	; 0xf60

0001220c <__overflow@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #151552	; 0x25000
   12214:	ldr	pc, [ip, #3928]!	; 0xf58

00012218 <setlocale@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #151552	; 0x25000
   12220:	ldr	pc, [ip, #3920]!	; 0xf50

00012224 <sigemptyset@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #151552	; 0x25000
   1222c:	ldr	pc, [ip, #3912]!	; 0xf48

00012230 <fork@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #151552	; 0x25000
   12238:	ldr	pc, [ip, #3904]!	; 0xf40

0001223c <__explicit_bzero_chk@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #151552	; 0x25000
   12244:	ldr	pc, [ip, #3896]!	; 0xf38

00012248 <strrchr@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #151552	; 0x25000
   12250:	ldr	pc, [ip, #3888]!	; 0xf30

00012254 <pthread_join@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #151552	; 0x25000
   1225c:	ldr	pc, [ip, #3880]!	; 0xf28

00012260 <nl_langinfo@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #151552	; 0x25000
   12268:	ldr	pc, [ip, #3872]!	; 0xf20

0001226c <localeconv@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #151552	; 0x25000
   12274:	ldr	pc, [ip, #3864]!	; 0xf18

00012278 <clearerr_unlocked@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #151552	; 0x25000
   12280:	ldr	pc, [ip, #3856]!	; 0xf10

00012284 <fopen64@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #151552	; 0x25000
   1228c:	ldr	pc, [ip, #3848]!	; 0xf08

00012290 <qsort@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #151552	; 0x25000
   12298:	ldr	pc, [ip, #3840]!	; 0xf00

0001229c <pipe2@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #151552	; 0x25000
   122a4:	ldr	pc, [ip, #3832]!	; 0xef8

000122a8 <pthread_cond_wait@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #151552	; 0x25000
   122b0:	ldr	pc, [ip, #3824]!	; 0xef0

000122b4 <euidaccess@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #151552	; 0x25000
   122bc:	ldr	pc, [ip, #3816]!	; 0xee8

000122c0 <sched_getaffinity@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #151552	; 0x25000
   122c8:	ldr	pc, [ip, #3808]!	; 0xee0

000122cc <bindtextdomain@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #151552	; 0x25000
   122d4:	ldr	pc, [ip, #3800]!	; 0xed8

000122d8 <fread_unlocked@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #151552	; 0x25000
   122e0:	ldr	pc, [ip, #3792]!	; 0xed0

000122e4 <getrandom@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #151552	; 0x25000
   122ec:	ldr	pc, [ip, #3784]!	; 0xec8

000122f0 <__xstat64@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #151552	; 0x25000
   122f8:	ldr	pc, [ip, #3776]!	; 0xec0

000122fc <strncmp@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #151552	; 0x25000
   12304:	ldr	pc, [ip, #3768]!	; 0xeb8

00012308 <pthread_cond_signal@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #151552	; 0x25000
   12310:	ldr	pc, [ip, #3760]!	; 0xeb0

00012314 <abort@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #151552	; 0x25000
   1231c:	ldr	pc, [ip, #3752]!	; 0xea8

00012320 <close@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #151552	; 0x25000
   12328:	ldr	pc, [ip, #3744]!	; 0xea0

0001232c <dcngettext@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #151552	; 0x25000
   12334:	ldr	pc, [ip, #3736]!	; 0xe98

00012338 <__assert_fail@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #151552	; 0x25000
   12340:	ldr	pc, [ip, #3728]!	; 0xe90

Disassembly of section .text:

00012350 <_obstack_begin@@Base-0x11f20>:
   12350:	mov	fp, #0
   12354:	mov	lr, #0
   12358:	pop	{r1}		; (ldr r1, [sp], #4)
   1235c:	mov	r2, sp
   12360:	push	{r2}		; (str r2, [sp, #-4]!)
   12364:	push	{r0}		; (str r0, [sp, #-4]!)
   12368:	ldr	ip, [pc, #16]	; 12380 <__assert_fail@plt+0x48>
   1236c:	push	{ip}		; (str ip, [sp, #-4]!)
   12370:	ldr	r0, [pc, #12]	; 12384 <__assert_fail@plt+0x4c>
   12374:	ldr	r3, [pc, #12]	; 12388 <__assert_fail@plt+0x50>
   12378:	bl	120e0 <__libc_start_main@plt>
   1237c:	bl	12314 <abort@plt>
   12380:	andeq	r4, r2, r0, lsl #25
   12384:	muleq	r1, r0, r8
   12388:	andeq	r4, r2, r0, lsr #24
   1238c:	ldr	r3, [pc, #20]	; 123a8 <__assert_fail@plt+0x70>
   12390:	ldr	r2, [pc, #20]	; 123ac <__assert_fail@plt+0x74>
   12394:	add	r3, pc, r3
   12398:	ldr	r2, [r3, r2]
   1239c:	cmp	r2, #0
   123a0:	bxeq	lr
   123a4:	b	12104 <__gmon_start__@plt>
   123a8:	andeq	r5, r2, r4, ror #24
   123ac:	ldrdeq	r0, [r0], -r4
   123b0:	ldr	r0, [pc, #24]	; 123d0 <__assert_fail@plt+0x98>
   123b4:	ldr	r3, [pc, #24]	; 123d4 <__assert_fail@plt+0x9c>
   123b8:	cmp	r3, r0
   123bc:	bxeq	lr
   123c0:	ldr	r3, [pc, #16]	; 123d8 <__assert_fail@plt+0xa0>
   123c4:	cmp	r3, #0
   123c8:	bxeq	lr
   123cc:	bx	r3
   123d0:			; <UNDEFINED> instruction: 0x000382b4
   123d4:			; <UNDEFINED> instruction: 0x000382b4
   123d8:	andeq	r0, r0, r0
   123dc:	ldr	r0, [pc, #36]	; 12408 <__assert_fail@plt+0xd0>
   123e0:	ldr	r1, [pc, #36]	; 1240c <__assert_fail@plt+0xd4>
   123e4:	sub	r1, r1, r0
   123e8:	asr	r1, r1, #2
   123ec:	add	r1, r1, r1, lsr #31
   123f0:	asrs	r1, r1, #1
   123f4:	bxeq	lr
   123f8:	ldr	r3, [pc, #16]	; 12410 <__assert_fail@plt+0xd8>
   123fc:	cmp	r3, #0
   12400:	bxeq	lr
   12404:	bx	r3
   12408:			; <UNDEFINED> instruction: 0x000382b4
   1240c:			; <UNDEFINED> instruction: 0x000382b4
   12410:	andeq	r0, r0, r0
   12414:	push	{r4, lr}
   12418:	ldr	r4, [pc, #24]	; 12438 <__assert_fail@plt+0x100>
   1241c:	ldrb	r3, [r4]
   12420:	cmp	r3, #0
   12424:	popne	{r4, pc}
   12428:	bl	123b0 <__assert_fail@plt+0x78>
   1242c:	mov	r3, #1
   12430:	strb	r3, [r4]
   12434:	pop	{r4, pc}
   12438:	ldrdeq	r8, [r3], -ip
   1243c:	b	123dc <__assert_fail@plt+0xa4>
   12440:	push	{fp, lr}
   12444:	mov	fp, sp
   12448:	sub	sp, sp, #56	; 0x38
   1244c:	mov	r4, r0
   12450:	cmp	r0, #0
   12454:	bne	12848 <__assert_fail@plt+0x510>
   12458:	movw	r1, #19667	; 0x4cd3
   1245c:	mov	r0, #0
   12460:	mov	r2, #5
   12464:	movt	r1, #2
   12468:	bl	11f54 <dcgettext@plt>
   1246c:	mov	r1, r0
   12470:	movw	r0, #35016	; 0x88c8
   12474:	movt	r0, #3
   12478:	ldr	r2, [r0]
   1247c:	mov	r0, #1
   12480:	mov	r3, r2
   12484:	bl	121a0 <__printf_chk@plt>
   12488:	movw	r1, #19738	; 0x4d1a
   1248c:	mov	r0, #0
   12490:	mov	r2, #5
   12494:	movt	r1, #2
   12498:	bl	11f54 <dcgettext@plt>
   1249c:	movw	r7, #33492	; 0x82d4
   124a0:	movt	r7, #3
   124a4:	ldr	r1, [r7]
   124a8:	bl	11e10 <fputs_unlocked@plt>
   124ac:	movw	r1, #24304	; 0x5ef0
   124b0:	mov	r0, #0
   124b4:	mov	r2, #5
   124b8:	movt	r1, #2
   124bc:	bl	11f54 <dcgettext@plt>
   124c0:	ldr	r1, [r7]
   124c4:	bl	11e10 <fputs_unlocked@plt>
   124c8:	movw	r1, #24360	; 0x5f28
   124cc:	mov	r0, #0
   124d0:	mov	r2, #5
   124d4:	movt	r1, #2
   124d8:	bl	11f54 <dcgettext@plt>
   124dc:	ldr	r1, [r7]
   124e0:	bl	11e10 <fputs_unlocked@plt>
   124e4:	movw	r1, #19801	; 0x4d59
   124e8:	mov	r0, #0
   124ec:	mov	r2, #5
   124f0:	movt	r1, #2
   124f4:	bl	11f54 <dcgettext@plt>
   124f8:	ldr	r1, [r7]
   124fc:	bl	11e10 <fputs_unlocked@plt>
   12500:	movw	r1, #19821	; 0x4d6d
   12504:	mov	r0, #0
   12508:	mov	r2, #5
   1250c:	movt	r1, #2
   12510:	bl	11f54 <dcgettext@plt>
   12514:	ldr	r1, [r7]
   12518:	bl	11e10 <fputs_unlocked@plt>
   1251c:	movw	r1, #20025	; 0x4e39
   12520:	mov	r0, #0
   12524:	mov	r2, #5
   12528:	movt	r1, #2
   1252c:	bl	11f54 <dcgettext@plt>
   12530:	ldr	r1, [r7]
   12534:	bl	11e10 <fputs_unlocked@plt>
   12538:	movw	r1, #20236	; 0x4f0c
   1253c:	mov	r0, #0
   12540:	mov	r2, #5
   12544:	movt	r1, #2
   12548:	bl	11f54 <dcgettext@plt>
   1254c:	ldr	r1, [r7]
   12550:	bl	11e10 <fputs_unlocked@plt>
   12554:	movw	r1, #20312	; 0x4f58
   12558:	mov	r0, #0
   1255c:	mov	r2, #5
   12560:	movt	r1, #2
   12564:	bl	11f54 <dcgettext@plt>
   12568:	ldr	r1, [r7]
   1256c:	bl	11e10 <fputs_unlocked@plt>
   12570:	movw	r1, #20586	; 0x506a
   12574:	mov	r0, #0
   12578:	mov	r2, #5
   1257c:	movt	r1, #2
   12580:	bl	11f54 <dcgettext@plt>
   12584:	ldr	r1, [r7]
   12588:	bl	11e10 <fputs_unlocked@plt>
   1258c:	movw	r1, #20864	; 0x5180
   12590:	mov	r0, #0
   12594:	mov	r2, #5
   12598:	movt	r1, #2
   1259c:	bl	11f54 <dcgettext@plt>
   125a0:	ldr	r1, [r7]
   125a4:	bl	11e10 <fputs_unlocked@plt>
   125a8:	movw	r1, #20881	; 0x5191
   125ac:	mov	r0, #0
   125b0:	mov	r2, #5
   125b4:	movt	r1, #2
   125b8:	bl	11f54 <dcgettext@plt>
   125bc:	ldr	r1, [r7]
   125c0:	bl	11e10 <fputs_unlocked@plt>
   125c4:	movw	r1, #20999	; 0x5207
   125c8:	mov	r0, #0
   125cc:	mov	r2, #5
   125d0:	movt	r1, #2
   125d4:	bl	11f54 <dcgettext@plt>
   125d8:	ldr	r1, [r7]
   125dc:	bl	11e10 <fputs_unlocked@plt>
   125e0:	movw	r1, #21276	; 0x531c
   125e4:	mov	r0, #0
   125e8:	mov	r2, #5
   125ec:	movt	r1, #2
   125f0:	bl	11f54 <dcgettext@plt>
   125f4:	ldr	r1, [r7]
   125f8:	bl	11e10 <fputs_unlocked@plt>
   125fc:	movw	r1, #21624	; 0x5478
   12600:	mov	r0, #0
   12604:	mov	r2, #5
   12608:	movt	r1, #2
   1260c:	bl	11f54 <dcgettext@plt>
   12610:	ldr	r1, [r7]
   12614:	bl	11e10 <fputs_unlocked@plt>
   12618:	movw	r1, #21768	; 0x5508
   1261c:	mov	r0, #0
   12620:	mov	r2, #5
   12624:	movt	r1, #2
   12628:	bl	11f54 <dcgettext@plt>
   1262c:	ldr	r1, [r7]
   12630:	bl	11e10 <fputs_unlocked@plt>
   12634:	movw	r1, #21984	; 0x55e0
   12638:	mov	r0, #0
   1263c:	mov	r2, #5
   12640:	movt	r1, #2
   12644:	bl	11f54 <dcgettext@plt>
   12648:	movw	r2, #22437	; 0x57a5
   1264c:	mov	r1, r0
   12650:	mov	r0, #1
   12654:	movt	r2, #2
   12658:	bl	121a0 <__printf_chk@plt>
   1265c:	movw	r1, #22442	; 0x57aa
   12660:	mov	r0, #0
   12664:	mov	r2, #5
   12668:	movt	r1, #2
   1266c:	bl	11f54 <dcgettext@plt>
   12670:	ldr	r1, [r7]
   12674:	bl	11e10 <fputs_unlocked@plt>
   12678:	movw	r1, #22506	; 0x57ea
   1267c:	mov	r0, #0
   12680:	mov	r2, #5
   12684:	movt	r1, #2
   12688:	bl	11f54 <dcgettext@plt>
   1268c:	ldr	r1, [r7]
   12690:	bl	11e10 <fputs_unlocked@plt>
   12694:	movw	r1, #22551	; 0x5817
   12698:	mov	r0, #0
   1269c:	mov	r2, #5
   126a0:	movt	r1, #2
   126a4:	bl	11f54 <dcgettext@plt>
   126a8:	ldr	r1, [r7]
   126ac:	bl	11e10 <fputs_unlocked@plt>
   126b0:	movw	r1, #22605	; 0x584d
   126b4:	mov	r0, #0
   126b8:	mov	r2, #5
   126bc:	movt	r1, #2
   126c0:	bl	11f54 <dcgettext@plt>
   126c4:	ldr	r1, [r7]
   126c8:	bl	11e10 <fputs_unlocked@plt>
   126cc:	movw	r1, #23209	; 0x5aa9
   126d0:	mov	r0, #0
   126d4:	mov	r2, #5
   126d8:	movt	r1, #2
   126dc:	bl	11f54 <dcgettext@plt>
   126e0:	ldr	r1, [r7]
   126e4:	bl	11e10 <fputs_unlocked@plt>
   126e8:	movw	r0, #27392	; 0x6b00
   126ec:	mov	r2, #48	; 0x30
   126f0:	mov	r6, sp
   126f4:	movw	r5, #23594	; 0x5c2a
   126f8:	movt	r0, #2
   126fc:	movt	r5, #2
   12700:	add	r1, r0, #32
   12704:	add	r3, r0, #16
   12708:	vld1.64	{d18-d19}, [r0], r2
   1270c:	vld1.64	{d16-d17}, [r1]
   12710:	vld1.64	{d20-d21}, [r3]
   12714:	add	r1, r6, #32
   12718:	vldr	d22, [r0]
   1271c:	add	r0, r6, #16
   12720:	vst1.64	{d16-d17}, [r1]
   12724:	movw	r1, #24435	; 0x5f73
   12728:	vst1.64	{d20-d21}, [r0]
   1272c:	mov	r0, r6
   12730:	vst1.64	{d18-d19}, [r0], r2
   12734:	movt	r1, #2
   12738:	vstr	d22, [r0]
   1273c:	mov	r0, r5
   12740:	bl	11e28 <strcmp@plt>
   12744:	cmp	r0, #0
   12748:	ldrne	r1, [r6, #8]!
   1274c:	cmpne	r1, #0
   12750:	bne	1273c <__assert_fail@plt+0x404>
   12754:	ldr	r6, [r6, #4]
   12758:	movw	r1, #24530	; 0x5fd2
   1275c:	mov	r0, #0
   12760:	mov	r2, #5
   12764:	movt	r1, #2
   12768:	bl	11f54 <dcgettext@plt>
   1276c:	movw	r2, #23868	; 0x5d3c
   12770:	movw	r3, #24553	; 0x5fe9
   12774:	mov	r1, r0
   12778:	mov	r0, #1
   1277c:	movt	r2, #2
   12780:	movt	r3, #2
   12784:	bl	121a0 <__printf_chk@plt>
   12788:	cmp	r6, #0
   1278c:	mov	r0, #5
   12790:	mov	r1, #0
   12794:	moveq	r6, r5
   12798:	bl	12218 <setlocale@plt>
   1279c:	cmp	r0, #0
   127a0:	beq	127d8 <__assert_fail@plt+0x4a0>
   127a4:	movw	r1, #24593	; 0x6011
   127a8:	mov	r2, #3
   127ac:	movt	r1, #2
   127b0:	bl	122fc <strncmp@plt>
   127b4:	cmp	r0, #0
   127b8:	beq	127d8 <__assert_fail@plt+0x4a0>
   127bc:	movw	r1, #24597	; 0x6015
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	movt	r1, #2
   127cc:	bl	11f54 <dcgettext@plt>
   127d0:	ldr	r1, [r7]
   127d4:	bl	11e10 <fputs_unlocked@plt>
   127d8:	movw	r1, #24668	; 0x605c
   127dc:	mov	r0, #0
   127e0:	mov	r2, #5
   127e4:	movt	r1, #2
   127e8:	bl	11f54 <dcgettext@plt>
   127ec:	movw	r2, #24553	; 0x5fe9
   127f0:	mov	r1, r0
   127f4:	mov	r0, #1
   127f8:	mov	r3, r5
   127fc:	movt	r2, #2
   12800:	bl	121a0 <__printf_chk@plt>
   12804:	movw	r1, #24695	; 0x6077
   12808:	mov	r0, #0
   1280c:	mov	r2, #5
   12810:	movt	r1, #2
   12814:	bl	11f54 <dcgettext@plt>
   12818:	movw	r3, #19820	; 0x4d6c
   1281c:	mov	r1, r0
   12820:	movw	r0, #24463	; 0x5f8f
   12824:	cmp	r6, r5
   12828:	mov	r2, r6
   1282c:	movt	r0, #2
   12830:	movt	r3, #2
   12834:	moveq	r3, r0
   12838:	mov	r0, #1
   1283c:	bl	121a0 <__printf_chk@plt>
   12840:	mov	r0, r4
   12844:	bl	12128 <exit@plt>
   12848:	movw	r0, #33480	; 0x82c8
   1284c:	movw	r1, #19628	; 0x4cac
   12850:	mov	r2, #5
   12854:	movt	r0, #3
   12858:	movt	r1, #2
   1285c:	ldr	r5, [r0]
   12860:	mov	r0, #0
   12864:	bl	11f54 <dcgettext@plt>
   12868:	mov	r2, r0
   1286c:	movw	r0, #35016	; 0x88c8
   12870:	mov	r1, #1
   12874:	movt	r0, #3
   12878:	ldr	r3, [r0]
   1287c:	mov	r0, r5
   12880:	bl	121c4 <__fprintf_chk@plt>
   12884:	mov	r0, r4
   12888:	bl	12128 <exit@plt>
   1288c:	nop	{0}
   12890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12894:	add	fp, sp, #28
   12898:	sub	sp, sp, #4
   1289c:	vpush	{d12-d13}
   128a0:	vpush	{d8-d10}
   128a4:	sub	sp, sp, #528	; 0x210
   128a8:	str	r0, [sp, #116]	; 0x74
   128ac:	movw	r0, #23438	; 0x5b8e
   128b0:	mov	r6, r1
   128b4:	movt	r0, #2
   128b8:	bl	120a4 <getenv@plt>
   128bc:	str	r0, [sp, #120]	; 0x78
   128c0:	bl	1ec50 <__assert_fail@plt+0xc918>
   128c4:	mov	r4, r0
   128c8:	ldr	r0, [r6]
   128cc:	bl	1eca8 <__assert_fail@plt+0xc970>
   128d0:	movw	r1, #19820	; 0x4d6c
   128d4:	mov	r0, #6
   128d8:	movt	r1, #2
   128dc:	str	r1, [sp, #16]
   128e0:	bl	12218 <setlocale@plt>
   128e4:	movw	r5, #23872	; 0x5d40
   128e8:	movw	r1, #23454	; 0x5b9e
   128ec:	str	r0, [sp, #96]	; 0x60
   128f0:	movt	r5, #2
   128f4:	movt	r1, #2
   128f8:	mov	r0, r5
   128fc:	bl	122cc <bindtextdomain@plt>
   12900:	mov	r0, r5
   12904:	bl	11fb4 <textdomain@plt>
   12908:	movw	r0, #33384	; 0x8268
   1290c:	mov	r1, #2
   12910:	movt	r0, #3
   12914:	str	r1, [r0]
   12918:	mov	r0, #3
   1291c:	bl	1cd44 <__assert_fail@plt+0xaa0c>
   12920:	movw	r1, #33504	; 0x82e0
   12924:	movt	r1, #3
   12928:	strb	r0, [r1]
   1292c:	mov	r0, #2
   12930:	bl	1cd44 <__assert_fail@plt+0xaa0c>
   12934:	movw	r1, #33505	; 0x82e1
   12938:	movt	r1, #3
   1293c:	strb	r0, [r1]
   12940:	bl	1226c <localeconv@plt>
   12944:	ldr	r1, [r0]
   12948:	sub	r3, r4, #3504	; 0xdb0
   1294c:	movw	r7, #33506	; 0x82e2
   12950:	mov	r5, #0
   12954:	sub	r3, r3, #196608	; 0x30000
   12958:	movt	r7, #3
   1295c:	cmp	r3, #696	; 0x2b8
   12960:	movwhi	r5, #1
   12964:	ldrb	r2, [r1]
   12968:	str	r5, [sp, #112]	; 0x70
   1296c:	cmp	r2, #0
   12970:	strb	r2, [r7]
   12974:	beq	12984 <__assert_fail@plt+0x64c>
   12978:	ldrb	r1, [r1, #1]
   1297c:	cmp	r1, #0
   12980:	beq	1298c <__assert_fail@plt+0x654>
   12984:	mov	r1, #46	; 0x2e
   12988:	strb	r1, [r7]
   1298c:	ldr	r0, [r0, #4]
   12990:	movw	r2, #33508	; 0x82e4
   12994:	movt	r2, #3
   12998:	ldrb	r1, [r0]
   1299c:	cmp	r1, #0
   129a0:	str	r1, [r2]
   129a4:	beq	129c4 <__assert_fail@plt+0x68c>
   129a8:	ldrb	r0, [r0, #1]
   129ac:	cmp	r0, #0
   129b0:	beq	129cc <__assert_fail@plt+0x694>
   129b4:	movw	r0, #33512	; 0x82e8
   129b8:	mov	r1, #1
   129bc:	movt	r0, #3
   129c0:	strb	r1, [r0]
   129c4:	mov	r0, #256	; 0x100
   129c8:	str	r0, [r2]
   129cc:	movw	r0, #33513	; 0x82e9
   129d0:	mov	r4, #0
   129d4:	str	r6, [sp, #104]	; 0x68
   129d8:	movt	r0, #3
   129dc:	strb	r4, [r0]
   129e0:	bl	1211c <__ctype_b_loc@plt>
   129e4:	mov	r8, r0
   129e8:	bl	120f8 <__ctype_toupper_loc@plt>
   129ec:	movw	lr, #33928	; 0x8488
   129f0:	movw	ip, #33672	; 0x8388
   129f4:	movw	sl, #34184	; 0x8588
   129f8:	movw	r9, #34440	; 0x8688
   129fc:	mov	r1, #1
   12a00:	mov	r3, #0
   12a04:	movt	lr, #3
   12a08:	movt	ip, #3
   12a0c:	movt	sl, #3
   12a10:	movt	r9, #3
   12a14:	ldr	r7, [r8]
   12a18:	subs	r5, r3, #10
   12a1c:	clz	r2, r5
   12a20:	movwne	r5, #1
   12a24:	lsr	r2, r2, #5
   12a28:	add	r7, r7, r4
   12a2c:	add	r4, r4, #2
   12a30:	ldrh	r7, [r7]
   12a34:	bic	r6, r1, r7, lsr #14
   12a38:	strb	r6, [lr, r3]
   12a3c:	and	r6, r7, #1
   12a40:	and	r7, r7, #8
   12a44:	orr	r2, r6, r2
   12a48:	eor	r7, r1, r7, lsr #3
   12a4c:	strb	r2, [ip, r3]
   12a50:	eor	r2, r6, #1
   12a54:	and	r2, r5, r2
   12a58:	and	r2, r7, r2
   12a5c:	strb	r2, [sl, r3]
   12a60:	ldr	r2, [r0]
   12a64:	ldr	r2, [r2, r3, lsl #2]
   12a68:	strb	r2, [r9, r3]
   12a6c:	add	r3, r3, #1
   12a70:	cmp	r3, #256	; 0x100
   12a74:	bne	12a14 <__assert_fail@plt+0x6dc>
   12a78:	movw	r0, #33505	; 0x82e1
   12a7c:	movt	r0, #3
   12a80:	ldrb	r0, [r0]
   12a84:	cmp	r0, #0
   12a88:	beq	12b38 <__assert_fail@plt+0x800>
   12a8c:	movw	r9, #14
   12a90:	movw	r7, #33272	; 0x81f8
   12a94:	movw	r6, #34440	; 0x8688
   12a98:	mov	sl, #0
   12a9c:	movt	r9, #2
   12aa0:	movt	r7, #3
   12aa4:	movt	r6, #3
   12aa8:	add	r0, sl, r9
   12aac:	bl	12260 <nl_langinfo@plt>
   12ab0:	mov	r4, r0
   12ab4:	bl	12140 <strlen@plt>
   12ab8:	mov	r5, r0
   12abc:	add	r0, r0, #1
   12ac0:	bl	22208 <__assert_fail@plt+0xfed0>
   12ac4:	mov	r1, r7
   12ac8:	cmp	r5, #0
   12acc:	str	r0, [r1, sl, lsl #3]!
   12ad0:	add	sl, sl, #1
   12ad4:	str	sl, [r1, #4]
   12ad8:	mov	r1, #0
   12adc:	beq	12b0c <__assert_fail@plt+0x7d4>
   12ae0:	mov	r1, #0
   12ae4:	ldrb	r2, [r4]
   12ae8:	ldr	r3, [r8]
   12aec:	add	r4, r4, #1
   12af0:	ldrb	r3, [r3, r2, lsl #1]
   12af4:	tst	r3, #1
   12af8:	ldrbeq	r2, [r6, r2]
   12afc:	strbeq	r2, [r0, r1]
   12b00:	addeq	r1, r1, #1
   12b04:	subs	r5, r5, #1
   12b08:	bne	12ae4 <__assert_fail@plt+0x7ac>
   12b0c:	mov	r2, #0
   12b10:	cmp	sl, #12
   12b14:	strb	r2, [r0, r1]
   12b18:	bne	12aa8 <__assert_fail@plt+0x770>
   12b1c:	movw	r0, #33272	; 0x81f8
   12b20:	movw	r3, #29724	; 0x741c
   12b24:	mov	r1, #12
   12b28:	mov	r2, #8
   12b2c:	movt	r0, #3
   12b30:	movt	r3, #1
   12b34:	bl	12290 <qsort@plt>
   12b38:	movw	r5, #33520	; 0x82f0
   12b3c:	movt	r5, #3
   12b40:	mov	r0, r5
   12b44:	bl	12224 <sigemptyset@plt>
   12b48:	movw	r7, #26760	; 0x6888
   12b4c:	mov	r4, #0
   12b50:	add	r9, sp, #128	; 0x80
   12b54:	movt	r7, #2
   12b58:	ldr	r6, [r7, r4, lsl #2]
   12b5c:	mov	r1, #0
   12b60:	mov	r2, r9
   12b64:	mov	r0, r6
   12b68:	bl	11ffc <sigaction@plt>
   12b6c:	ldr	r0, [sp, #128]	; 0x80
   12b70:	cmp	r0, #1
   12b74:	beq	12b84 <__assert_fail@plt+0x84c>
   12b78:	mov	r0, r5
   12b7c:	mov	r1, r6
   12b80:	bl	120d4 <sigaddset@plt>
   12b84:	add	r4, r4, #1
   12b88:	cmp	r4, #11
   12b8c:	bne	12b58 <__assert_fail@plt+0x820>
   12b90:	movw	r0, #26516	; 0x6794
   12b94:	movw	r5, #33520	; 0x82f0
   12b98:	mov	r2, #128	; 0x80
   12b9c:	movt	r0, #1
   12ba0:	movt	r5, #3
   12ba4:	str	r0, [sp, #128]	; 0x80
   12ba8:	add	r0, r9, #4
   12bac:	mov	r1, r5
   12bb0:	bl	11ec4 <memcpy@plt>
   12bb4:	mov	r0, #0
   12bb8:	mov	r1, #14
   12bbc:	str	r0, [sp, #260]	; 0x104
   12bc0:	mov	r0, r5
   12bc4:	bl	11fa8 <sigismember@plt>
   12bc8:	cmp	r0, #0
   12bcc:	beq	12be0 <__assert_fail@plt+0x8a8>
   12bd0:	add	r1, sp, #128	; 0x80
   12bd4:	mov	r0, #14
   12bd8:	mov	r2, #0
   12bdc:	bl	11ffc <sigaction@plt>
   12be0:	movw	r0, #33520	; 0x82f0
   12be4:	mov	r1, #1
   12be8:	movt	r0, #3
   12bec:	bl	11fa8 <sigismember@plt>
   12bf0:	ldr	r5, [sp, #104]	; 0x68
   12bf4:	cmp	r0, #0
   12bf8:	beq	12c0c <__assert_fail@plt+0x8d4>
   12bfc:	add	r1, sp, #128	; 0x80
   12c00:	mov	r0, #1
   12c04:	mov	r2, #0
   12c08:	bl	11ffc <sigaction@plt>
   12c0c:	movw	r0, #33520	; 0x82f0
   12c10:	mov	r1, #2
   12c14:	movt	r0, #3
   12c18:	bl	11fa8 <sigismember@plt>
   12c1c:	cmp	r0, #0
   12c20:	beq	12c34 <__assert_fail@plt+0x8fc>
   12c24:	add	r1, sp, #128	; 0x80
   12c28:	mov	r0, #2
   12c2c:	mov	r2, #0
   12c30:	bl	11ffc <sigaction@plt>
   12c34:	movw	r0, #33520	; 0x82f0
   12c38:	mov	r1, #13
   12c3c:	movt	r0, #3
   12c40:	bl	11fa8 <sigismember@plt>
   12c44:	cmp	r0, #0
   12c48:	beq	12c5c <__assert_fail@plt+0x924>
   12c4c:	add	r1, sp, #128	; 0x80
   12c50:	mov	r0, #13
   12c54:	mov	r2, #0
   12c58:	bl	11ffc <sigaction@plt>
   12c5c:	movw	r0, #33520	; 0x82f0
   12c60:	mov	r1, #3
   12c64:	movt	r0, #3
   12c68:	bl	11fa8 <sigismember@plt>
   12c6c:	cmp	r0, #0
   12c70:	beq	12c84 <__assert_fail@plt+0x94c>
   12c74:	add	r1, sp, #128	; 0x80
   12c78:	mov	r0, #3
   12c7c:	mov	r2, #0
   12c80:	bl	11ffc <sigaction@plt>
   12c84:	movw	r0, #33520	; 0x82f0
   12c88:	mov	r1, #15
   12c8c:	movt	r0, #3
   12c90:	bl	11fa8 <sigismember@plt>
   12c94:	cmp	r0, #0
   12c98:	beq	12cac <__assert_fail@plt+0x974>
   12c9c:	add	r1, sp, #128	; 0x80
   12ca0:	mov	r0, #15
   12ca4:	mov	r2, #0
   12ca8:	bl	11ffc <sigaction@plt>
   12cac:	movw	r0, #33520	; 0x82f0
   12cb0:	mov	r1, #29
   12cb4:	movt	r0, #3
   12cb8:	bl	11fa8 <sigismember@plt>
   12cbc:	cmp	r0, #0
   12cc0:	beq	12cd4 <__assert_fail@plt+0x99c>
   12cc4:	add	r1, sp, #128	; 0x80
   12cc8:	mov	r0, #29
   12ccc:	mov	r2, #0
   12cd0:	bl	11ffc <sigaction@plt>
   12cd4:	movw	r0, #33520	; 0x82f0
   12cd8:	mov	r1, #27
   12cdc:	movt	r0, #3
   12ce0:	bl	11fa8 <sigismember@plt>
   12ce4:	cmp	r0, #0
   12ce8:	beq	12cfc <__assert_fail@plt+0x9c4>
   12cec:	add	r1, sp, #128	; 0x80
   12cf0:	mov	r0, #27
   12cf4:	mov	r2, #0
   12cf8:	bl	11ffc <sigaction@plt>
   12cfc:	movw	r0, #33520	; 0x82f0
   12d00:	mov	r1, #26
   12d04:	movt	r0, #3
   12d08:	bl	11fa8 <sigismember@plt>
   12d0c:	cmp	r0, #0
   12d10:	beq	12d24 <__assert_fail@plt+0x9ec>
   12d14:	add	r1, sp, #128	; 0x80
   12d18:	mov	r0, #26
   12d1c:	mov	r2, #0
   12d20:	bl	11ffc <sigaction@plt>
   12d24:	movw	r0, #33520	; 0x82f0
   12d28:	mov	r1, #24
   12d2c:	movt	r0, #3
   12d30:	bl	11fa8 <sigismember@plt>
   12d34:	cmp	r0, #0
   12d38:	beq	12d4c <__assert_fail@plt+0xa14>
   12d3c:	add	r1, sp, #128	; 0x80
   12d40:	mov	r0, #24
   12d44:	mov	r2, #0
   12d48:	bl	11ffc <sigaction@plt>
   12d4c:	movw	r0, #33520	; 0x82f0
   12d50:	mov	r1, #25
   12d54:	movt	r0, #3
   12d58:	bl	11fa8 <sigismember@plt>
   12d5c:	cmp	r0, #0
   12d60:	beq	12d74 <__assert_fail@plt+0xa3c>
   12d64:	add	r1, sp, #128	; 0x80
   12d68:	mov	r0, #25
   12d6c:	mov	r2, #0
   12d70:	bl	11ffc <sigaction@plt>
   12d74:	mov	r0, #17
   12d78:	mov	r1, #0
   12d7c:	mov	sl, #0
   12d80:	bl	11f00 <signal@plt>
   12d84:	movw	r0, #26600	; 0x67e8
   12d88:	movt	r0, #1
   12d8c:	bl	24c84 <_obstack_memory_used@@Base+0x69c>
   12d90:	ldr	r6, [sp, #116]	; 0x74
   12d94:	add	r0, sp, #272	; 0x110
   12d98:	vmov.i32	q8, #0	; 0x00000000
   12d9c:	str	sl, [sp, #308]	; 0x134
   12da0:	add	r1, r0, #4
   12da4:	add	r0, r0, #20
   12da8:	vst1.32	{d16-d17}, [r0]
   12dac:	mvn	r0, #0
   12db0:	vst1.32	{d16-d17}, [r1]
   12db4:	mov	r1, #4
   12db8:	str	r0, [sp, #272]	; 0x110
   12dbc:	str	r0, [sp, #280]	; 0x118
   12dc0:	mov	r0, r6
   12dc4:	bl	222d8 <__assert_fail@plt+0xffa0>
   12dc8:	str	r0, [sp, #124]	; 0x7c
   12dcc:	add	r0, r9, #1
   12dd0:	movw	r7, #33472	; 0x82c0
   12dd4:	mvn	ip, #0
   12dd8:	mov	lr, r6
   12ddc:	mov	r4, #0
   12de0:	str	r0, [sp, #108]	; 0x6c
   12de4:	sub	r0, fp, #288	; 0x120
   12de8:	movt	r7, #3
   12dec:	add	r1, r0, #12
   12df0:	str	r1, [sp, #80]	; 0x50
   12df4:	orr	r1, r0, #4
   12df8:	add	r0, r0, #8
   12dfc:	str	r0, [sp, #92]	; 0x5c
   12e00:	ldr	r0, [sp, #120]	; 0x78
   12e04:	str	r1, [sp, #88]	; 0x58
   12e08:	mov	r1, #0
   12e0c:	str	r1, [sp, #84]	; 0x54
   12e10:	clz	r0, r0
   12e14:	lsr	r0, r0, #5
   12e18:	str	r0, [sp, #76]	; 0x4c
   12e1c:	mov	r0, #0
   12e20:	str	r0, [sp, #24]
   12e24:	mov	r0, #0
   12e28:	str	r0, [sp, #100]	; 0x64
   12e2c:	mov	r0, #0
   12e30:	str	r0, [sp, #72]	; 0x48
   12e34:	mov	r0, #0
   12e38:	str	r0, [sp, #28]
   12e3c:	mov	r0, #0
   12e40:	b	12e70 <__assert_fail@plt+0xb38>
   12e44:	ldr	lr, [sp, #116]	; 0x74
   12e48:	mov	r1, #0
   12e4c:	movw	r7, #33472	; 0x82c0
   12e50:	str	r0, [r2]
   12e54:	mov	r4, #1
   12e58:	mvn	ip, #0
   12e5c:	str	r1, [r0, #36]	; 0x24
   12e60:	mov	r0, #1
   12e64:	movt	r7, #3
   12e68:	str	r0, [sp, #112]	; 0x70
   12e6c:	mov	r0, r9
   12e70:	mov	r6, r5
   12e74:	b	12e94 <__assert_fail@plt+0xb5c>
   12e78:	add	r1, r0, #1
   12e7c:	str	r1, [r7]
   12e80:	ldr	r1, [sp, #124]	; 0x7c
   12e84:	ldr	r0, [r6, r0, lsl #2]
   12e88:	str	r0, [r1, sl, lsl #2]
   12e8c:	add	sl, sl, #1
   12e90:	mov	r0, r5
   12e94:	mov	r1, r4
   12e98:	cmn	r4, #1
   12e9c:	mov	r5, r0
   12ea0:	mvn	r4, #0
   12ea4:	str	ip, [fp, #-104]	; 0xffffff98
   12ea8:	beq	13510 <__assert_fail@plt+0x11d8>
   12eac:	ldr	r0, [sp, #120]	; 0x78
   12eb0:	cmp	r0, #0
   12eb4:	cmpne	sl, #0
   12eb8:	bne	134d0 <__assert_fail@plt+0x1198>
   12ebc:	movw	r2, #26804	; 0x68b4
   12ec0:	movw	r3, #26836	; 0x68d4
   12ec4:	sub	r0, fp, #104	; 0x68
   12ec8:	mov	r1, r6
   12ecc:	mov	r9, r6
   12ed0:	str	r0, [sp]
   12ed4:	mov	r0, lr
   12ed8:	movt	r2, #2
   12edc:	movt	r3, #2
   12ee0:	bl	12110 <getopt_long@plt>
   12ee4:	ldr	lr, [sp, #116]	; 0x74
   12ee8:	movw	r7, #33472	; 0x82c0
   12eec:	movw	r3, #34440	; 0x8688
   12ef0:	mov	r4, r0
   12ef4:	add	r1, r0, #3
   12ef8:	movw	r0, #266	; 0x10a
   12efc:	mvn	ip, #0
   12f00:	movt	r7, #3
   12f04:	movt	r3, #3
   12f08:	cmp	r1, r0
   12f0c:	bhi	16254 <__assert_fail@plt+0x3f1c>
   12f10:	add	r2, pc, #4
   12f14:	mov	r0, #1
   12f18:	ldr	pc, [r2, r1, lsl #2]
   12f1c:	andeq	r6, r1, ip, asr r2
   12f20:			; <UNDEFINED> instruction: 0x000162b0
   12f24:	andeq	r3, r1, r0, lsl r5
   12f28:	andeq	r6, r1, r4, asr r2
   12f2c:	strdeq	r3, [r1], -ip
   12f30:	andeq	r6, r1, r4, asr r2
   12f34:	andeq	r6, r1, r4, asr r2
   12f38:	andeq	r6, r1, r4, asr r2
   12f3c:	andeq	r6, r1, r4, asr r2
   12f40:	andeq	r6, r1, r4, asr r2
   12f44:	andeq	r6, r1, r4, asr r2
   12f48:	andeq	r6, r1, r4, asr r2
   12f4c:	andeq	r6, r1, r4, asr r2
   12f50:	andeq	r6, r1, r4, asr r2
   12f54:	andeq	r6, r1, r4, asr r2
   12f58:	andeq	r6, r1, r4, asr r2
   12f5c:	andeq	r6, r1, r4, asr r2
   12f60:	andeq	r6, r1, r4, asr r2
   12f64:	andeq	r6, r1, r4, asr r2
   12f68:	andeq	r6, r1, r4, asr r2
   12f6c:	andeq	r6, r1, r4, asr r2
   12f70:	andeq	r6, r1, r4, asr r2
   12f74:	andeq	r6, r1, r4, asr r2
   12f78:	andeq	r6, r1, r4, asr r2
   12f7c:	andeq	r6, r1, r4, asr r2
   12f80:	andeq	r6, r1, r4, asr r2
   12f84:	andeq	r6, r1, r4, asr r2
   12f88:	andeq	r6, r1, r4, asr r2
   12f8c:	andeq	r6, r1, r4, asr r2
   12f90:	andeq	r6, r1, r4, asr r2
   12f94:	andeq	r6, r1, r4, asr r2
   12f98:	andeq	r6, r1, r4, asr r2
   12f9c:	andeq	r6, r1, r4, asr r2
   12fa0:	andeq	r6, r1, r4, asr r2
   12fa4:	andeq	r6, r1, r4, asr r2
   12fa8:	andeq	r6, r1, r4, asr r2
   12fac:	andeq	r6, r1, r4, asr r2
   12fb0:	andeq	r6, r1, r4, asr r2
   12fb4:	andeq	r6, r1, r4, asr r2
   12fb8:	andeq	r6, r1, r4, asr r2
   12fbc:	andeq	r6, r1, r4, asr r2
   12fc0:	andeq	r6, r1, r4, asr r2
   12fc4:	andeq	r6, r1, r4, asr r2
   12fc8:	andeq	r6, r1, r4, asr r2
   12fcc:	andeq	r6, r1, r4, asr r2
   12fd0:	andeq	r6, r1, r4, asr r2
   12fd4:	andeq	r6, r1, r4, asr r2
   12fd8:	andeq	r6, r1, r4, asr r2
   12fdc:	andeq	r6, r1, r4, asr r2
   12fe0:	andeq	r6, r1, r4, asr r2
   12fe4:	andeq	r6, r1, r4, asr r2
   12fe8:	andeq	r6, r1, r4, asr r2
   12fec:	andeq	r6, r1, r4, asr r2
   12ff0:	andeq	r6, r1, r4, asr r2
   12ff4:	andeq	r6, r1, r4, asr r2
   12ff8:	andeq	r6, r1, r4, asr r2
   12ffc:	andeq	r6, r1, r4, asr r2
   13000:	andeq	r6, r1, r4, asr r2
   13004:	andeq	r6, r1, r4, asr r2
   13008:	andeq	r6, r1, r4, asr r2
   1300c:	andeq	r6, r1, r4, asr r2
   13010:	andeq	r6, r1, r4, asr r2
   13014:	andeq	r6, r1, r4, asr r2
   13018:	andeq	r6, r1, r4, asr r2
   1301c:	andeq	r6, r1, r4, asr r2
   13020:	andeq	r6, r1, r4, asr r2
   13024:	andeq	r6, r1, r4, asr r2
   13028:	andeq	r6, r1, r4, asr r2
   1302c:	andeq	r6, r1, r4, asr r2
   13030:	andeq	r6, r1, r4, asr r2
   13034:	andeq	r4, r1, ip, asr #4
   13038:	andeq	r6, r1, r4, asr r2
   1303c:	andeq	r6, r1, r4, asr r2
   13040:	andeq	r6, r1, r4, asr r2
   13044:	andeq	r6, r1, r4, asr r2
   13048:	andeq	r6, r1, r4, asr r2
   1304c:	andeq	r6, r1, r4, asr r2
   13050:	andeq	r6, r1, r4, asr r2
   13054:	andeq	r6, r1, r4, asr r2
   13058:	andeq	r6, r1, r4, asr r2
   1305c:	andeq	r3, r1, r8, asr #6
   13060:	andeq	r6, r1, r4, asr r2
   13064:	andeq	r6, r1, r4, asr r2
   13068:	andeq	r6, r1, r4, asr r2
   1306c:	andeq	r6, r1, r4, asr r2
   13070:	andeq	r3, r1, r8, asr #6
   13074:	andeq	r3, r1, ip, ror #10
   13078:			; <UNDEFINED> instruction: 0x00013abc
   1307c:	andeq	r6, r1, r4, asr r2
   13080:	andeq	r3, r1, r8, asr #6
   13084:	andeq	r6, r1, r4, asr r2
   13088:	andeq	r6, r1, r4, asr r2
   1308c:	andeq	r6, r1, r4, asr r2
   13090:	andeq	r6, r1, r4, asr r2
   13094:	andeq	r6, r1, r4, asr r2
   13098:	andeq	r6, r1, r4, asr r2
   1309c:	andeq	r6, r1, r4, asr r2
   130a0:	andeq	r6, r1, r4, asr r2
   130a4:	andeq	r6, r1, r4, asr r2
   130a8:	andeq	r6, r1, r4, asr r2
   130ac:	andeq	r6, r1, r4, asr r2
   130b0:	andeq	r3, r1, r8, asr #6
   130b4:	andeq	r4, r1, ip, asr #4
   130b8:	andeq	r3, r1, r8, asr #6
   130bc:	andeq	r6, r1, r4, asr r2
   130c0:	andeq	r3, r1, r8, asr #6
   130c4:	andeq	r3, r1, r8, asr #6
   130c8:	andeq	r3, r1, r8, asr #6
   130cc:	andeq	r3, r1, r8, asr #6
   130d0:	andeq	r6, r1, r4, asr r2
   130d4:	andeq	r3, r1, ip, ror #12
   130d8:	andeq	r6, r1, r4, asr r2
   130dc:	muleq	r1, r4, lr
   130e0:	andeq	r3, r1, r8, asr #6
   130e4:	strdeq	r3, [r1], -r4
   130e8:	andeq	r6, r1, r4, asr r2
   130ec:	andeq	r6, r1, r4, asr r2
   130f0:	andeq	r3, r1, r8, asr #6
   130f4:	andeq	r3, r1, r0, lsr #21
   130f8:	andeq	r3, r1, r4, lsl #14
   130fc:	andeq	r3, r1, r4, ror r7
   13100:	andeq	r6, r1, r4, asr r2
   13104:	andeq	r6, r1, r4, asr r2
   13108:	andeq	r6, r1, r4, asr r2
   1310c:	andeq	r3, r1, ip, lsr #17
   13110:	andeq	r3, r1, r8, lsr #22
   13114:	andeq	r6, r1, r4, asr r2
   13118:	andeq	r6, r1, r4, asr r2
   1311c:	andeq	r6, r1, r4, asr r2
   13120:	andeq	r6, r1, r4, asr r2
   13124:	andeq	r6, r1, r4, asr r2
   13128:	andeq	r6, r1, r4, asr r2
   1312c:	andeq	r6, r1, r4, asr r2
   13130:	andeq	r6, r1, r4, asr r2
   13134:	andeq	r6, r1, r4, asr r2
   13138:	andeq	r6, r1, r4, asr r2
   1313c:	andeq	r6, r1, r4, asr r2
   13140:	andeq	r6, r1, r4, asr r2
   13144:	andeq	r6, r1, r4, asr r2
   13148:	andeq	r6, r1, r4, asr r2
   1314c:	andeq	r6, r1, r4, asr r2
   13150:	andeq	r6, r1, r4, asr r2
   13154:	andeq	r6, r1, r4, asr r2
   13158:	andeq	r6, r1, r4, asr r2
   1315c:	andeq	r6, r1, r4, asr r2
   13160:	andeq	r6, r1, r4, asr r2
   13164:	andeq	r6, r1, r4, asr r2
   13168:	andeq	r6, r1, r4, asr r2
   1316c:	andeq	r6, r1, r4, asr r2
   13170:	andeq	r6, r1, r4, asr r2
   13174:	andeq	r6, r1, r4, asr r2
   13178:	andeq	r6, r1, r4, asr r2
   1317c:	andeq	r6, r1, r4, asr r2
   13180:	andeq	r6, r1, r4, asr r2
   13184:	andeq	r6, r1, r4, asr r2
   13188:	andeq	r6, r1, r4, asr r2
   1318c:	andeq	r6, r1, r4, asr r2
   13190:	andeq	r6, r1, r4, asr r2
   13194:	andeq	r6, r1, r4, asr r2
   13198:	andeq	r6, r1, r4, asr r2
   1319c:	andeq	r6, r1, r4, asr r2
   131a0:	andeq	r6, r1, r4, asr r2
   131a4:	andeq	r6, r1, r4, asr r2
   131a8:	andeq	r6, r1, r4, asr r2
   131ac:	andeq	r6, r1, r4, asr r2
   131b0:	andeq	r6, r1, r4, asr r2
   131b4:	andeq	r6, r1, r4, asr r2
   131b8:	andeq	r6, r1, r4, asr r2
   131bc:	andeq	r6, r1, r4, asr r2
   131c0:	andeq	r6, r1, r4, asr r2
   131c4:	andeq	r6, r1, r4, asr r2
   131c8:	andeq	r6, r1, r4, asr r2
   131cc:	andeq	r6, r1, r4, asr r2
   131d0:	andeq	r6, r1, r4, asr r2
   131d4:	andeq	r6, r1, r4, asr r2
   131d8:	andeq	r6, r1, r4, asr r2
   131dc:	andeq	r6, r1, r4, asr r2
   131e0:	andeq	r6, r1, r4, asr r2
   131e4:	andeq	r6, r1, r4, asr r2
   131e8:	andeq	r6, r1, r4, asr r2
   131ec:	andeq	r6, r1, r4, asr r2
   131f0:	andeq	r6, r1, r4, asr r2
   131f4:	andeq	r6, r1, r4, asr r2
   131f8:	andeq	r6, r1, r4, asr r2
   131fc:	andeq	r6, r1, r4, asr r2
   13200:	andeq	r6, r1, r4, asr r2
   13204:	andeq	r6, r1, r4, asr r2
   13208:	andeq	r6, r1, r4, asr r2
   1320c:	andeq	r6, r1, r4, asr r2
   13210:	andeq	r6, r1, r4, asr r2
   13214:	andeq	r6, r1, r4, asr r2
   13218:	andeq	r6, r1, r4, asr r2
   1321c:	andeq	r6, r1, r4, asr r2
   13220:	andeq	r6, r1, r4, asr r2
   13224:	andeq	r6, r1, r4, asr r2
   13228:	andeq	r6, r1, r4, asr r2
   1322c:	andeq	r6, r1, r4, asr r2
   13230:	andeq	r6, r1, r4, asr r2
   13234:	andeq	r6, r1, r4, asr r2
   13238:	andeq	r6, r1, r4, asr r2
   1323c:	andeq	r6, r1, r4, asr r2
   13240:	andeq	r6, r1, r4, asr r2
   13244:	andeq	r6, r1, r4, asr r2
   13248:	andeq	r6, r1, r4, asr r2
   1324c:	andeq	r6, r1, r4, asr r2
   13250:	andeq	r6, r1, r4, asr r2
   13254:	andeq	r6, r1, r4, asr r2
   13258:	andeq	r6, r1, r4, asr r2
   1325c:	andeq	r6, r1, r4, asr r2
   13260:	andeq	r6, r1, r4, asr r2
   13264:	andeq	r6, r1, r4, asr r2
   13268:	andeq	r6, r1, r4, asr r2
   1326c:	andeq	r6, r1, r4, asr r2
   13270:	andeq	r6, r1, r4, asr r2
   13274:	andeq	r6, r1, r4, asr r2
   13278:	andeq	r6, r1, r4, asr r2
   1327c:	andeq	r6, r1, r4, asr r2
   13280:	andeq	r6, r1, r4, asr r2
   13284:	andeq	r6, r1, r4, asr r2
   13288:	andeq	r6, r1, r4, asr r2
   1328c:	andeq	r6, r1, r4, asr r2
   13290:	andeq	r6, r1, r4, asr r2
   13294:	andeq	r6, r1, r4, asr r2
   13298:	andeq	r6, r1, r4, asr r2
   1329c:	andeq	r6, r1, r4, asr r2
   132a0:	andeq	r6, r1, r4, asr r2
   132a4:	andeq	r6, r1, r4, asr r2
   132a8:	andeq	r6, r1, r4, asr r2
   132ac:	andeq	r6, r1, r4, asr r2
   132b0:	andeq	r6, r1, r4, asr r2
   132b4:	andeq	r6, r1, r4, asr r2
   132b8:	andeq	r6, r1, r4, asr r2
   132bc:	andeq	r6, r1, r4, asr r2
   132c0:	andeq	r6, r1, r4, asr r2
   132c4:	andeq	r6, r1, r4, asr r2
   132c8:	andeq	r6, r1, r4, asr r2
   132cc:	andeq	r6, r1, r4, asr r2
   132d0:	andeq	r6, r1, r4, asr r2
   132d4:	andeq	r6, r1, r4, asr r2
   132d8:	andeq	r6, r1, r4, asr r2
   132dc:	andeq	r6, r1, r4, asr r2
   132e0:	andeq	r6, r1, r4, asr r2
   132e4:	andeq	r6, r1, r4, asr r2
   132e8:	andeq	r6, r1, r4, asr r2
   132ec:	andeq	r6, r1, r4, asr r2
   132f0:	andeq	r6, r1, r4, asr r2
   132f4:	andeq	r6, r1, r4, asr r2
   132f8:	andeq	r6, r1, r4, asr r2
   132fc:	andeq	r6, r1, r4, asr r2
   13300:	andeq	r6, r1, r4, asr r2
   13304:	andeq	r6, r1, r4, asr r2
   13308:	andeq	r6, r1, r4, asr r2
   1330c:	andeq	r6, r1, r4, asr r2
   13310:	andeq	r6, r1, r4, asr r2
   13314:	andeq	r6, r1, r4, asr r2
   13318:	andeq	r6, r1, r4, asr r2
   1331c:	andeq	r6, r1, r4, asr r2
   13320:	andeq	r6, r1, r4, asr r2
   13324:	andeq	r6, r1, r4, asr r2
   13328:	andeq	r3, r1, r4, lsl #12
   1332c:	andeq	r3, r1, r8, lsr #10
   13330:	andeq	r3, r1, r0, asr #24
   13334:	andeq	r3, r1, ip, asr ip
   13338:	andeq	r3, r1, r4, asr #22
   1333c:	strdeq	r3, [r1], -r0
   13340:	andeq	r3, r1, r4, asr #16
   13344:	muleq	r1, r0, r7
   13348:	mov	r0, #0
   1334c:	mov	r1, r4
   13350:	strb	r0, [sp, #129]	; 0x81
   13354:	ldr	r0, [sp, #108]	; 0x6c
   13358:	strb	r4, [sp, #128]	; 0x80
   1335c:	b	13374 <__assert_fail@plt+0x103c>
   13360:	ldrb	r1, [r0], #1
   13364:	b	13374 <__assert_fail@plt+0x103c>
   13368:	mov	r1, #1
   1336c:	strb	r1, [sp, #304]	; 0x130
   13370:	b	13360 <__assert_fail@plt+0x1028>
   13374:	mvn	r2, #76	; 0x4c
   13378:	uxtab	r1, r2, r1
   1337c:	cmp	r1, #37	; 0x25
   13380:	bhi	13520 <__assert_fail@plt+0x11e8>
   13384:	add	r2, pc, #0
   13388:	ldr	pc, [r2, r1, lsl #2]
   1338c:	andeq	r3, r1, r4, lsr #8
   13390:	andeq	r3, r1, r0, lsr #10
   13394:	andeq	r3, r1, r0, lsr #10
   13398:	andeq	r3, r1, r0, lsr #10
   1339c:	andeq	r3, r1, r0, lsr #10
   133a0:	andeq	r3, r1, r0, lsr #9
   133a4:	andeq	r3, r1, r0, lsr #10
   133a8:	andeq	r3, r1, r0, lsr #10
   133ac:	andeq	r3, r1, r0, lsr #10
   133b0:	andeq	r3, r1, r8, ror #6
   133b4:	andeq	r3, r1, r0, lsr #10
   133b8:	andeq	r3, r1, r0, lsr #10
   133bc:	andeq	r3, r1, r0, lsr #10
   133c0:	andeq	r3, r1, r0, lsr #10
   133c4:	andeq	r3, r1, r0, lsr #10
   133c8:	andeq	r3, r1, r0, lsr #10
   133cc:	andeq	r3, r1, r0, lsr #10
   133d0:	andeq	r3, r1, r0, lsr #10
   133d4:	andeq	r3, r1, r0, lsr #10
   133d8:	andeq	r3, r1, r0, lsr #10
   133dc:	andeq	r3, r1, r0, lsr #10
   133e0:	andeq	r3, r1, r8, ror #8
   133e4:	andeq	r3, r1, r0, lsr #10
   133e8:	andeq	r3, r1, ip, lsl #9
   133ec:	andeq	r3, r1, r0, lsr #10
   133f0:	andeq	r3, r1, ip, asr r4
   133f4:	andeq	r3, r1, ip, ror r4
   133f8:	andeq	r3, r1, r4, lsr r4
   133fc:	andeq	r3, r1, r4, asr #8
   13400:	andeq	r3, r1, r0, lsr #10
   13404:	andeq	r3, r1, r0, lsr #10
   13408:	andeq	r3, r1, r0, lsr #10
   1340c:	andeq	r3, r1, r0, lsr #10
   13410:	andeq	r3, r1, r0, asr #9
   13414:	andeq	r3, r1, r0, lsr #10
   13418:	andeq	r3, r1, r0, lsr #10
   1341c:	andeq	r3, r1, r0, lsr #10
   13420:			; <UNDEFINED> instruction: 0x000134b0
   13424:	mov	r1, #1
   13428:	strb	r1, [sp, #302]	; 0x12e
   1342c:	ldrb	r1, [r0], #1
   13430:	b	13374 <__assert_fail@plt+0x103c>
   13434:	mov	r1, #1
   13438:	strb	r1, [sp, #301]	; 0x12d
   1343c:	ldrb	r1, [r0], #1
   13440:	b	13374 <__assert_fail@plt+0x103c>
   13444:	ldr	r1, [sp, #288]	; 0x120
   13448:	cmp	r1, #0
   1344c:	bne	13360 <__assert_fail@plt+0x1028>
   13450:	movw	r1, #33928	; 0x8488
   13454:	movt	r1, #3
   13458:	b	13494 <__assert_fail@plt+0x115c>
   1345c:	ldrb	r1, [r0], #1
   13460:	str	r3, [sp, #292]	; 0x124
   13464:	b	13374 <__assert_fail@plt+0x103c>
   13468:	movw	r1, #257	; 0x101
   1346c:	add	r2, sp, #256	; 0x100
   13470:	strh	r1, [r2, #40]	; 0x28
   13474:	ldrb	r1, [r0], #1
   13478:	b	13374 <__assert_fail@plt+0x103c>
   1347c:	mov	r1, #1
   13480:	strb	r1, [sp, #300]	; 0x12c
   13484:	ldrb	r1, [r0], #1
   13488:	b	13374 <__assert_fail@plt+0x103c>
   1348c:	movw	r1, #34184	; 0x8588
   13490:	movt	r1, #3
   13494:	str	r1, [sp, #288]	; 0x120
   13498:	ldrb	r1, [r0], #1
   1349c:	b	13374 <__assert_fail@plt+0x103c>
   134a0:	mov	r1, #1
   134a4:	strb	r1, [sp, #299]	; 0x12b
   134a8:	ldrb	r1, [r0], #1
   134ac:	b	13374 <__assert_fail@plt+0x103c>
   134b0:	mov	r1, #1
   134b4:	strb	r1, [sp, #303]	; 0x12f
   134b8:	ldrb	r1, [r0], #1
   134bc:	b	13374 <__assert_fail@plt+0x103c>
   134c0:	mov	r1, #1
   134c4:	strb	r1, [sp, #298]	; 0x12a
   134c8:	ldrb	r1, [r0], #1
   134cc:	b	13374 <__assert_fail@plt+0x103c>
   134d0:	ldr	r0, [sp, #84]	; 0x54
   134d4:	tst	r0, #255	; 0xff
   134d8:	ldreq	r0, [sp, #112]	; 0x70
   134dc:	eoreq	r0, r0, #1
   134e0:	tsteq	r0, #1
   134e4:	bne	1350c <__assert_fail@plt+0x11d4>
   134e8:	ldr	r2, [r7]
   134ec:	cmp	r2, lr
   134f0:	beq	1350c <__assert_fail@plt+0x11d4>
   134f4:	ldr	r0, [r6, r2, lsl #2]
   134f8:	ldrb	r3, [r0]
   134fc:	cmp	r3, #45	; 0x2d
   13500:	ldrbeq	r3, [r0, #1]
   13504:	cmpeq	r3, #111	; 0x6f
   13508:	beq	13c78 <__assert_fail@plt+0x1940>
   1350c:	mov	r4, r1
   13510:	ldr	r0, [r7]
   13514:	cmp	r0, lr
   13518:	blt	12e78 <__assert_fail@plt+0xb40>
   1351c:	b	14920 <__assert_fail@plt+0x25e8>
   13520:	mov	r0, r5
   13524:	b	12e94 <__assert_fail@plt+0xb5c>
   13528:	movw	r6, #33648	; 0x8370
   1352c:	movt	r6, #3
   13530:	ldr	r0, [r6]
   13534:	cmp	r0, #0
   13538:	beq	14228 <__assert_fail@plt+0x1ef0>
   1353c:	movw	r1, #33496	; 0x82d8
   13540:	movt	r1, #3
   13544:	ldr	r4, [r1]
   13548:	mov	r1, r4
   1354c:	bl	11e28 <strcmp@plt>
   13550:	ldr	lr, [sp, #116]	; 0x74
   13554:	movw	r7, #33472	; 0x82c0
   13558:	mvn	ip, #0
   1355c:	cmp	r0, #0
   13560:	movt	r7, #3
   13564:	beq	14234 <__assert_fail@plt+0x1efc>
   13568:	b	1636c <__assert_fail@plt+0x4034>
   1356c:	movw	r0, #33496	; 0x82d8
   13570:	str	r5, [sp, #48]	; 0x30
   13574:	ldr	r4, [fp, #-104]	; 0xffffff98
   13578:	sub	r1, fp, #208	; 0xd0
   1357c:	add	r3, sp, #128	; 0x80
   13580:	mov	r2, #10
   13584:	movt	r0, #3
   13588:	ldr	r5, [r0]
   1358c:	movw	r0, #25399	; 0x6337
   13590:	movt	r0, #2
   13594:	str	r0, [sp]
   13598:	mov	r0, r5
   1359c:	bl	22b14 <__assert_fail@plt+0x107dc>
   135a0:	cmp	r0, #2
   135a4:	beq	13c98 <__assert_fail@plt+0x1960>
   135a8:	cmp	r0, #0
   135ac:	bne	16518 <__assert_fail@plt+0x41e0>
   135b0:	ldr	r0, [fp, #-208]	; 0xffffff30
   135b4:	ldr	lr, [sp, #116]	; 0x74
   135b8:	movw	r7, #33472	; 0x82c0
   135bc:	mvn	ip, #0
   135c0:	mov	r6, r9
   135c4:	movt	r7, #3
   135c8:	ldrb	r0, [r0, #-1]
   135cc:	sub	r0, r0, #48	; 0x30
   135d0:	cmp	r0, #9
   135d4:	bhi	13d40 <__assert_fail@plt+0x1a08>
   135d8:	ldr	r1, [sp, #132]	; 0x84
   135dc:	mov	r0, #0
   135e0:	cmp	r0, r1, lsr #22
   135e4:	bne	16514 <__assert_fail@plt+0x41dc>
   135e8:	ldr	r2, [sp, #128]	; 0x80
   135ec:	lsl	r1, r1, #10
   135f0:	lsl	r0, r2, #10
   135f4:	orr	r1, r1, r2, lsr #22
   135f8:	str	r0, [sp, #128]	; 0x80
   135fc:	str	r1, [sp, #132]	; 0x84
   13600:	b	13d48 <__assert_fail@plt+0x1a10>
   13604:	movw	r0, #33496	; 0x82d8
   13608:	movt	r0, #3
   1360c:	ldr	r1, [r0]
   13610:	cmp	r1, #0
   13614:	beq	14248 <__assert_fail@plt+0x1f10>
   13618:	movw	r0, #33380	; 0x8264
   1361c:	movw	r4, #27368	; 0x6ae8
   13620:	mov	r2, #1
   13624:	movt	r0, #3
   13628:	movt	r4, #2
   1362c:	str	r2, [sp]
   13630:	ldr	r0, [r0]
   13634:	mov	r3, r4
   13638:	stmib	sp, {r0, r2}
   1363c:	movw	r0, #23599	; 0x5c2f
   13640:	movw	r2, #27372	; 0x6aec
   13644:	movt	r0, #2
   13648:	movt	r2, #2
   1364c:	bl	1b500 <__assert_fail@plt+0x91c8>
   13650:	ldr	lr, [sp, #116]	; 0x74
   13654:	ldrb	r4, [r4, r0]
   13658:	movw	r7, #33472	; 0x82c0
   1365c:	mov	r6, r9
   13660:	mvn	ip, #0
   13664:	movt	r7, #3
   13668:	b	1424c <__assert_fail@plt+0x1f14>
   1366c:	sub	r1, fp, #288	; 0x120
   13670:	vmov.i32	q8, #0	; 0x00000000
   13674:	mov	r0, #36	; 0x24
   13678:	movw	r4, #33496	; 0x82d8
   1367c:	mov	r2, r1
   13680:	movt	r4, #3
   13684:	vst1.64	{d16-d17}, [r2], r0
   13688:	mov	r0, #0
   1368c:	str	r0, [r2]
   13690:	add	r2, r1, #16
   13694:	str	r0, [fp, #-256]	; 0xffffff00
   13698:	mvn	r0, #0
   1369c:	vst1.64	{d16-d17}, [r2]
   136a0:	str	r0, [fp, #-280]	; 0xfffffee8
   136a4:	ldr	r0, [r4]
   136a8:	movw	r2, #23647	; 0x5c5f
   136ac:	movt	r2, #2
   136b0:	bl	16880 <__assert_fail@plt+0x4548>
   136b4:	ldr	r2, [fp, #-288]	; 0xfffffee0
   136b8:	sub	r1, r2, #1
   136bc:	cmp	r2, #0
   136c0:	str	r1, [fp, #-288]	; 0xfffffee0
   136c4:	beq	16530 <__assert_fail@plt+0x41f8>
   136c8:	ldrb	r2, [r0]
   136cc:	cmp	r2, #46	; 0x2e
   136d0:	bne	13d98 <__assert_fail@plt+0x1a60>
   136d4:	ldr	r1, [sp, #88]	; 0x58
   136d8:	movw	r2, #23537	; 0x5bf1
   136dc:	add	r0, r0, #1
   136e0:	movt	r2, #2
   136e4:	bl	16880 <__assert_fail@plt+0x4548>
   136e8:	ldr	r1, [fp, #-284]	; 0xfffffee4
   136ec:	sub	r2, r1, #1
   136f0:	cmp	r1, #0
   136f4:	str	r2, [fp, #-284]	; 0xfffffee4
   136f8:	beq	16378 <__assert_fail@plt+0x4040>
   136fc:	ldr	r1, [fp, #-288]	; 0xfffffee0
   13700:	b	13d9c <__assert_fail@plt+0x1a64>
   13704:	movw	r4, #33496	; 0x82d8
   13708:	movt	r4, #3
   1370c:	ldr	r0, [r4]
   13710:	ldrb	r1, [r0]
   13714:	cmp	r1, #0
   13718:	beq	16388 <__assert_fail@plt+0x4050>
   1371c:	ldrb	r2, [r0, #1]
   13720:	cmp	r2, #0
   13724:	beq	13750 <__assert_fail@plt+0x1418>
   13728:	movw	r1, #23824	; 0x5d10
   1372c:	movt	r1, #2
   13730:	bl	11e28 <strcmp@plt>
   13734:	ldr	lr, [sp, #116]	; 0x74
   13738:	movw	r7, #33472	; 0x82c0
   1373c:	mvn	ip, #0
   13740:	mov	r1, #0
   13744:	cmp	r0, #0
   13748:	movt	r7, #3
   1374c:	bne	16394 <__assert_fail@plt+0x405c>
   13750:	movw	r0, #33248	; 0x81e0
   13754:	movt	r0, #3
   13758:	ldr	r2, [r0]
   1375c:	cmp	r2, #256	; 0x100
   13760:	cmpne	r2, r1
   13764:	bne	163c8 <__assert_fail@plt+0x4090>
   13768:	str	r1, [r0]
   1376c:	mov	r4, #116	; 0x74
   13770:	b	1423c <__assert_fail@plt+0x1f04>
   13774:	movw	r0, #33654	; 0x8376
   13778:	mov	r1, #1
   1377c:	mov	r4, #117	; 0x75
   13780:	movt	r0, #3
   13784:	strb	r1, [r0]
   13788:	mov	r0, r5
   1378c:	b	12e94 <__assert_fail@plt+0xb5c>
   13790:	movw	r0, #33496	; 0x82d8
   13794:	str	r5, [sp, #48]	; 0x30
   13798:	ldr	r4, [fp, #-104]	; 0xffffff98
   1379c:	add	r3, sp, #128	; 0x80
   137a0:	mov	r1, #0
   137a4:	mov	r2, #10
   137a8:	movt	r0, #3
   137ac:	ldr	r5, [r0]
   137b0:	movw	r0, #19820	; 0x4d6c
   137b4:	movt	r0, #2
   137b8:	str	r0, [sp]
   137bc:	mov	r0, r5
   137c0:	bl	22b14 <__assert_fail@plt+0x107dc>
   137c4:	cmp	r0, #0
   137c8:	beq	13f94 <__assert_fail@plt+0x1c5c>
   137cc:	ldr	lr, [sp, #116]	; 0x74
   137d0:	movw	r7, #33472	; 0x82c0
   137d4:	mvn	r1, #0
   137d8:	cmp	r0, #1
   137dc:	mvn	ip, #0
   137e0:	mov	r6, r9
   137e4:	movt	r7, #3
   137e8:	str	r1, [sp, #24]
   137ec:	beq	142a8 <__assert_fail@plt+0x1f70>
   137f0:	b	163d4 <__assert_fail@plt+0x409c>
   137f4:	movw	r0, #33496	; 0x82d8
   137f8:	str	r5, [sp, #48]	; 0x30
   137fc:	mov	r4, #111	; 0x6f
   13800:	movt	r0, #3
   13804:	ldr	r5, [r0]
   13808:	ldr	r0, [sp, #72]	; 0x48
   1380c:	cmp	r0, #0
   13810:	beq	1426c <__assert_fail@plt+0x1f34>
   13814:	mov	r1, r5
   13818:	bl	11e28 <strcmp@plt>
   1381c:	cmp	r0, #0
   13820:	ldr	lr, [sp, #116]	; 0x74
   13824:	ldr	r0, [sp, #48]	; 0x30
   13828:	ldr	r6, [sp, #104]	; 0x68
   1382c:	movw	r7, #33472	; 0x82c0
   13830:	mvn	ip, #0
   13834:	str	r5, [sp, #72]	; 0x48
   13838:	movt	r7, #3
   1383c:	beq	12e94 <__assert_fail@plt+0xb5c>
   13840:	b	163ec <__assert_fail@plt+0x40b4>
   13844:	movw	r0, #33496	; 0x82d8
   13848:	movw	r4, #27332	; 0x6ac4
   1384c:	mov	r2, #1
   13850:	movt	r0, #3
   13854:	movt	r4, #2
   13858:	str	r2, [sp]
   1385c:	ldr	r1, [r0]
   13860:	movw	r0, #33380	; 0x8264
   13864:	mov	r3, r4
   13868:	movt	r0, #3
   1386c:	ldr	r0, [r0]
   13870:	stmib	sp, {r0, r2}
   13874:	movw	r0, #23592	; 0x5c28
   13878:	movw	r2, #27340	; 0x6acc
   1387c:	movt	r0, #2
   13880:	movt	r2, #2
   13884:	bl	1b500 <__assert_fail@plt+0x91c8>
   13888:	ldr	lr, [sp, #116]	; 0x74
   1388c:	ldrb	r4, [r4, r0]
   13890:	movw	r7, #33472	; 0x82c0
   13894:	movw	r3, #34440	; 0x8688
   13898:	mov	r6, r9
   1389c:	mvn	ip, #0
   138a0:	movt	r7, #3
   138a4:	movt	r3, #3
   138a8:	b	13348 <__assert_fail@plt+0x1010>
   138ac:	ldr	r0, [r7]
   138b0:	mov	r4, #121	; 0x79
   138b4:	add	r1, r6, r0, lsl #2
   138b8:	ldr	r2, [r1, #-4]
   138bc:	movw	r1, #33496	; 0x82d8
   138c0:	movt	r1, #3
   138c4:	ldr	r1, [r1]
   138c8:	cmp	r1, r2
   138cc:	beq	138d8 <__assert_fail@plt+0x15a0>
   138d0:	mov	r0, r5
   138d4:	b	12e94 <__assert_fail@plt+0xb5c>
   138d8:	ldrb	r2, [r1], #1
   138dc:	sub	r3, r2, #48	; 0x30
   138e0:	cmp	r3, #10
   138e4:	bcc	138d8 <__assert_fail@plt+0x15a0>
   138e8:	cmp	r2, #0
   138ec:	subne	r0, r0, #1
   138f0:	str	r0, [r7]
   138f4:	mov	r0, r5
   138f8:	b	12e94 <__assert_fail@plt+0xb5c>
   138fc:	movw	r9, #33496	; 0x82d8
   13900:	movt	r9, #3
   13904:	ldr	r1, [r9]
   13908:	ldrb	r0, [r1]
   1390c:	cmp	r0, #43	; 0x2b
   13910:	bne	141fc <__assert_fail@plt+0x1ec4>
   13914:	ldr	r3, [r7]
   13918:	mov	r0, #0
   1391c:	mov	r4, #0
   13920:	mov	r2, #0
   13924:	cmp	r3, lr
   13928:	beq	13960 <__assert_fail@plt+0x1628>
   1392c:	ldr	r3, [r6, r3, lsl #2]
   13930:	mov	r4, #0
   13934:	ldrb	r2, [r3]
   13938:	cmp	r2, #45	; 0x2d
   1393c:	mov	r2, #0
   13940:	bne	13960 <__assert_fail@plt+0x1628>
   13944:	ldrb	r2, [r3, #1]
   13948:	mov	r4, #0
   1394c:	sub	r2, r2, #48	; 0x30
   13950:	cmp	r2, #10
   13954:	ldr	r2, [sp, #76]	; 0x4c
   13958:	movwcc	r4, #1
   1395c:	and	r2, r4, r2
   13960:	ldr	r3, [sp, #112]	; 0x70
   13964:	orr	r2, r3, r2
   13968:	tst	r2, #1
   1396c:	beq	1459c <__assert_fail@plt+0x2264>
   13970:	sub	r3, fp, #288	; 0x120
   13974:	vmov.i32	q8, #0	; 0x00000000
   13978:	mov	r0, #36	; 0x24
   1397c:	mov	r6, r4
   13980:	mov	r4, #0
   13984:	mov	r2, r3
   13988:	str	r4, [fp, #-256]	; 0xffffff00
   1398c:	vst1.64	{d16-d17}, [r2], r0
   13990:	add	r0, r3, #16
   13994:	add	r3, sp, #128	; 0x80
   13998:	vst1.64	{d16-d17}, [r0]
   1399c:	mvn	r0, #0
   139a0:	str	r4, [r2]
   139a4:	mov	r2, #10
   139a8:	str	r0, [fp, #-280]	; 0xfffffee8
   139ac:	movw	r0, #19820	; 0x4d6c
   139b0:	movt	r0, #2
   139b4:	str	r0, [sp]
   139b8:	add	r0, r1, #1
   139bc:	sub	r1, fp, #208	; 0xd0
   139c0:	bl	22b14 <__assert_fail@plt+0x107dc>
   139c4:	cmp	r0, #4
   139c8:	bhi	13a04 <__assert_fail@plt+0x16cc>
   139cc:	add	r1, pc, #0
   139d0:	ldr	pc, [r1, r0, lsl #2]
   139d4:	andeq	r3, r1, r8, ror #19
   139d8:	strdeq	r3, [r1], -ip
   139dc:	andeq	r3, r1, r8, ror #19
   139e0:	strdeq	r3, [r1], -ip
   139e4:			; <UNDEFINED> instruction: 0x000142bc
   139e8:	ldr	r1, [sp, #132]	; 0x84
   139ec:	ldr	r0, [sp, #128]	; 0x80
   139f0:	cmp	r1, #0
   139f4:	str	r0, [fp, #-288]	; 0xfffffee0
   139f8:	beq	13a04 <__assert_fail@plt+0x16cc>
   139fc:	mvn	r0, #0
   13a00:	str	r0, [fp, #-288]	; 0xfffffee0
   13a04:	ldr	r0, [fp, #-208]	; 0xffffff30
   13a08:	ldr	lr, [sp, #116]	; 0x74
   13a0c:	movw	r3, #34440	; 0x8688
   13a10:	movw	r7, #33472	; 0x82c0
   13a14:	mvn	ip, #0
   13a18:	movt	r3, #3
   13a1c:	movt	r7, #3
   13a20:	cmp	r0, #0
   13a24:	beq	142d8 <__assert_fail@plt+0x1fa0>
   13a28:	ldrb	r1, [r0]
   13a2c:	cmp	r1, #46	; 0x2e
   13a30:	bne	142b4 <__assert_fail@plt+0x1f7c>
   13a34:	movw	r1, #19820	; 0x4d6c
   13a38:	add	r0, r0, #1
   13a3c:	add	r3, sp, #128	; 0x80
   13a40:	mov	r2, #10
   13a44:	movt	r1, #2
   13a48:	str	r1, [sp]
   13a4c:	sub	r1, fp, #208	; 0xd0
   13a50:	bl	22b14 <__assert_fail@plt+0x107dc>
   13a54:	cmp	r0, #4
   13a58:	bhi	13a98 <__assert_fail@plt+0x1760>
   13a5c:	add	r1, pc, #4
   13a60:	mov	r4, #0
   13a64:	ldr	pc, [r1, r0, lsl #2]
   13a68:	andeq	r3, r1, ip, ror sl
   13a6c:	muleq	r1, r0, sl
   13a70:	andeq	r3, r1, ip, ror sl
   13a74:	muleq	r1, r0, sl
   13a78:	andeq	r4, r1, r0, asr #5
   13a7c:	ldr	r1, [sp, #132]	; 0x84
   13a80:	ldr	r0, [sp, #128]	; 0x80
   13a84:	cmp	r1, #0
   13a88:	str	r0, [fp, #-284]	; 0xfffffee4
   13a8c:	beq	13a98 <__assert_fail@plt+0x1760>
   13a90:	mvn	r0, #0
   13a94:	str	r0, [fp, #-284]	; 0xfffffee4
   13a98:	ldr	r4, [fp, #-208]	; 0xffffff30
   13a9c:	b	142c0 <__assert_fail@plt+0x1f88>
   13aa0:	movw	r0, #33653	; 0x8375
   13aa4:	mov	r1, #1
   13aa8:	mov	r4, #115	; 0x73
   13aac:	movt	r0, #3
   13ab0:	strb	r1, [r0]
   13ab4:	mov	r0, r5
   13ab8:	b	12e94 <__assert_fail@plt+0xb5c>
   13abc:	movw	r0, #33496	; 0x82d8
   13ac0:	movw	r4, #33664	; 0x8380
   13ac4:	str	r5, [sp, #48]	; 0x30
   13ac8:	movt	r0, #3
   13acc:	movt	r4, #3
   13ad0:	ldr	r5, [r0]
   13ad4:	movw	r0, #34700	; 0x878c
   13ad8:	ldr	r1, [r4]
   13adc:	movt	r0, #3
   13ae0:	ldr	r0, [r0]
   13ae4:	cmp	r1, r0
   13ae8:	bne	14204 <__assert_fail@plt+0x1ecc>
   13aec:	movw	r6, #34704	; 0x8790
   13af0:	movw	r1, #34700	; 0x878c
   13af4:	mov	r2, #4
   13af8:	movt	r6, #3
   13afc:	movt	r1, #3
   13b00:	ldr	r0, [r6]
   13b04:	bl	223b4 <__assert_fail@plt+0x1007c>
   13b08:	str	r0, [r6]
   13b0c:	ldr	lr, [sp, #116]	; 0x74
   13b10:	ldr	r6, [sp, #104]	; 0x68
   13b14:	ldr	r1, [r4]
   13b18:	movw	r7, #33472	; 0x82c0
   13b1c:	mvn	ip, #0
   13b20:	movt	r7, #3
   13b24:	b	14210 <__assert_fail@plt+0x1ed8>
   13b28:	movw	r0, #33655	; 0x8377
   13b2c:	mov	r1, #1
   13b30:	mov	r4, #122	; 0x7a
   13b34:	movt	r0, #3
   13b38:	strb	r1, [r0]
   13b3c:	mov	r0, r5
   13b40:	b	12e94 <__assert_fail@plt+0xb5c>
   13b44:	movw	r0, #33496	; 0x82d8
   13b48:	sub	r3, fp, #240	; 0xf0
   13b4c:	mov	r2, #10
   13b50:	movt	r0, #3
   13b54:	ldr	r1, [r0]
   13b58:	ldr	r0, [fp, #-104]	; 0xffffff98
   13b5c:	str	r0, [sp, #68]	; 0x44
   13b60:	movw	r0, #19820	; 0x4d6c
   13b64:	mov	r9, r1
   13b68:	movt	r0, #2
   13b6c:	str	r0, [sp]
   13b70:	mov	r0, r1
   13b74:	mov	r1, #0
   13b78:	bl	22b14 <__assert_fail@plt+0x107dc>
   13b7c:	mov	r6, r0
   13b80:	add	r1, sp, #128	; 0x80
   13b84:	mov	r0, #7
   13b88:	bl	11f90 <getrlimit64@plt>
   13b8c:	ldr	r1, [sp, #128]	; 0x80
   13b90:	mov	r4, #17
   13b94:	cmp	r0, #0
   13b98:	subeq	r4, r1, #3
   13b9c:	cmp	r6, #0
   13ba0:	bne	163f8 <__assert_fail@plt+0x40c0>
   13ba4:	ldr	r1, [fp, #-236]	; 0xffffff14
   13ba8:	ldr	r0, [fp, #-240]	; 0xffffff10
   13bac:	ldr	r6, [sp, #104]	; 0x68
   13bb0:	ldr	lr, [sp, #116]	; 0x74
   13bb4:	movw	r2, #33264	; 0x81f0
   13bb8:	movw	r7, #33472	; 0x82c0
   13bbc:	mvn	ip, #0
   13bc0:	movt	r2, #3
   13bc4:	movt	r7, #3
   13bc8:	cmp	r1, #0
   13bcc:	str	r0, [r2]
   13bd0:	bne	16400 <__assert_fail@plt+0x40c8>
   13bd4:	cmp	r0, #1
   13bd8:	bls	16484 <__assert_fail@plt+0x414c>
   13bdc:	cmp	r4, r0
   13be0:	bcc	16400 <__assert_fail@plt+0x40c8>
   13be4:	mov	r4, #260	; 0x104
   13be8:	mov	r0, r5
   13bec:	b	12e94 <__assert_fail@plt+0xb5c>
   13bf0:	movw	r0, #33496	; 0x82d8
   13bf4:	str	r5, [sp, #48]	; 0x30
   13bf8:	movw	r4, #261	; 0x105
   13bfc:	movt	r0, #3
   13c00:	ldr	r5, [r0]
   13c04:	ldr	r0, [sp, #28]
   13c08:	cmp	r0, #0
   13c0c:	beq	14274 <__assert_fail@plt+0x1f3c>
   13c10:	mov	r1, r5
   13c14:	bl	11e28 <strcmp@plt>
   13c18:	cmp	r0, #0
   13c1c:	ldr	lr, [sp, #116]	; 0x74
   13c20:	ldr	r0, [sp, #48]	; 0x30
   13c24:	ldr	r6, [sp, #104]	; 0x68
   13c28:	movw	r7, #33472	; 0x82c0
   13c2c:	mvn	ip, #0
   13c30:	str	r5, [sp, #28]
   13c34:	movt	r7, #3
   13c38:	beq	12e94 <__assert_fail@plt+0xb5c>
   13c3c:	b	16508 <__assert_fail@plt+0x41d0>
   13c40:	movw	r0, #33652	; 0x8374
   13c44:	mov	r1, #1
   13c48:	movw	r4, #258	; 0x102
   13c4c:	movt	r0, #3
   13c50:	strb	r1, [r0]
   13c54:	mov	r0, r5
   13c58:	b	12e94 <__assert_fail@plt+0xb5c>
   13c5c:	movw	r0, #33496	; 0x82d8
   13c60:	movw	r4, #259	; 0x103
   13c64:	movt	r0, #3
   13c68:	ldr	r0, [r0]
   13c6c:	str	r0, [sp, #100]	; 0x64
   13c70:	mov	r0, r5
   13c74:	b	12e94 <__assert_fail@plt+0xb5c>
   13c78:	add	r2, r2, #1
   13c7c:	cmp	r2, lr
   13c80:	bne	12ebc <__assert_fail@plt+0xb84>
   13c84:	ldrb	r0, [r0, #2]
   13c88:	mov	r4, r1
   13c8c:	cmp	r0, #0
   13c90:	beq	13510 <__assert_fail@plt+0x11d8>
   13c94:	b	12ebc <__assert_fail@plt+0xb84>
   13c98:	ldr	r1, [fp, #-208]	; 0xffffff30
   13c9c:	ldrb	r0, [r1, #-1]
   13ca0:	sub	r2, r0, #48	; 0x30
   13ca4:	mov	r0, #2
   13ca8:	cmp	r2, #9
   13cac:	bhi	16518 <__assert_fail@plt+0x41e0>
   13cb0:	ldrb	r2, [r1, #1]
   13cb4:	ldr	lr, [sp, #116]	; 0x74
   13cb8:	movw	r7, #33472	; 0x82c0
   13cbc:	mvn	ip, #0
   13cc0:	movt	r7, #3
   13cc4:	cmp	r2, #0
   13cc8:	bne	16518 <__assert_fail@plt+0x41e0>
   13ccc:	ldrb	r1, [r1]
   13cd0:	mov	r6, r9
   13cd4:	cmp	r1, #98	; 0x62
   13cd8:	beq	13d40 <__assert_fail@plt+0x1a08>
   13cdc:	cmp	r1, #37	; 0x25
   13ce0:	bne	16518 <__assert_fail@plt+0x41e0>
   13ce4:	bl	1e918 <__assert_fail@plt+0xc5e0>
   13ce8:	ldr	r0, [sp, #128]	; 0x80
   13cec:	ldr	r1, [sp, #132]	; 0x84
   13cf0:	vmov.f64	d8, d0
   13cf4:	bl	249f4 <_obstack_memory_used@@Base+0x40c>
   13cf8:	vldr	d17, [pc, #1008]	; 140f0 <__assert_fail@plt+0x1db8>
   13cfc:	vldr	d18, [pc, #996]	; 140e8 <__assert_fail@plt+0x1db0>
   13d00:	vmov	d16, r0, r1
   13d04:	vmul.f64	d16, d8, d16
   13d08:	vdiv.f64	d16, d16, d17
   13d0c:	vcmpe.f64	d16, d18
   13d10:	vmrs	APSR_nzcv, fpscr
   13d14:	bpl	16514 <__assert_fail@plt+0x41dc>
   13d18:	vmov	r0, r1, d16
   13d1c:	bl	24ab8 <_obstack_memory_used@@Base+0x4d0>
   13d20:	ldr	lr, [sp, #116]	; 0x74
   13d24:	movw	r7, #33472	; 0x82c0
   13d28:	str	r1, [sp, #132]	; 0x84
   13d2c:	str	r0, [sp, #128]	; 0x80
   13d30:	mvn	ip, #0
   13d34:	mov	r6, r9
   13d38:	movt	r7, #3
   13d3c:	b	13d48 <__assert_fail@plt+0x1a10>
   13d40:	ldr	r0, [sp, #128]	; 0x80
   13d44:	ldr	r1, [sp, #132]	; 0x84
   13d48:	movw	r2, #33668	; 0x8384
   13d4c:	movt	r2, #3
   13d50:	ldr	r3, [r2]
   13d54:	subs	r3, r0, r3
   13d58:	sbcs	r3, r1, #0
   13d5c:	bcc	13d8c <__assert_fail@plt+0x1a54>
   13d60:	cmp	r1, #0
   13d64:	str	r0, [r2]
   13d68:	bne	16514 <__assert_fail@plt+0x41dc>
   13d6c:	movw	r1, #33264	; 0x81f0
   13d70:	movt	r1, #3
   13d74:	ldr	r1, [r1]
   13d78:	add	r1, r1, r1, lsl #3
   13d7c:	lsl	r1, r1, #1
   13d80:	cmp	r1, r0
   13d84:	movcc	r1, r0
   13d88:	str	r1, [r2]
   13d8c:	ldr	r0, [sp, #48]	; 0x30
   13d90:	mov	r4, #83	; 0x53
   13d94:	b	12e94 <__assert_fail@plt+0xb5c>
   13d98:	ldr	r2, [fp, #-284]	; 0xfffffee4
   13d9c:	orrs	r1, r1, r2
   13da0:	movw	r3, #34440	; 0x8688
   13da4:	movt	r3, #3
   13da8:	mvneq	r1, #0
   13dac:	streq	r1, [fp, #-288]	; 0xfffffee0
   13db0:	b	13dbc <__assert_fail@plt+0x1a84>
   13db4:	mov	r1, #1
   13db8:	strb	r1, [fp, #-259]	; 0xfffffefd
   13dbc:	add	r0, r0, #1
   13dc0:	ldrb	r1, [r0, #-1]
   13dc4:	sub	r1, r1, #44	; 0x2c
   13dc8:	cmp	r1, #70	; 0x46
   13dcc:	bhi	13f7c <__assert_fail@plt+0x1c44>
   13dd0:	add	r2, pc, #0
   13dd4:	ldr	pc, [r2, r1, lsl #2]
   13dd8:	ldrdeq	r3, [r1], -r0
   13ddc:	andeq	r3, r1, ip, ror pc
   13de0:	andeq	r3, r1, ip, ror pc
   13de4:	andeq	r3, r1, ip, ror pc
   13de8:	andeq	r3, r1, ip, ror pc
   13dec:	andeq	r3, r1, ip, ror pc
   13df0:	andeq	r3, r1, ip, ror pc
   13df4:	andeq	r3, r1, ip, ror pc
   13df8:	andeq	r3, r1, ip, ror pc
   13dfc:	andeq	r3, r1, ip, ror pc
   13e00:	andeq	r3, r1, ip, ror pc
   13e04:	andeq	r3, r1, ip, ror pc
   13e08:	andeq	r3, r1, ip, ror pc
   13e0c:	andeq	r3, r1, ip, ror pc
   13e10:	andeq	r3, r1, ip, ror pc
   13e14:	andeq	r3, r1, ip, ror pc
   13e18:	andeq	r3, r1, ip, ror pc
   13e1c:	andeq	r3, r1, ip, ror pc
   13e20:	andeq	r3, r1, ip, ror pc
   13e24:	andeq	r3, r1, ip, ror pc
   13e28:	andeq	r3, r1, ip, ror pc
   13e2c:	andeq	r3, r1, ip, ror pc
   13e30:	andeq	r3, r1, ip, ror pc
   13e34:	andeq	r3, r1, ip, ror pc
   13e38:	andeq	r3, r1, ip, ror pc
   13e3c:	andeq	r3, r1, ip, ror pc
   13e40:	andeq	r3, r1, ip, ror pc
   13e44:	andeq	r3, r1, ip, ror pc
   13e48:	andeq	r3, r1, ip, ror pc
   13e4c:	andeq	r3, r1, ip, ror pc
   13e50:	andeq	r3, r1, ip, ror pc
   13e54:	andeq	r3, r1, ip, ror pc
   13e58:	andeq	r3, r1, ip, ror pc
   13e5c:	strdeq	r3, [r1], -r4
   13e60:	andeq	r3, r1, ip, ror pc
   13e64:	andeq	r3, r1, ip, ror pc
   13e68:	andeq	r3, r1, ip, ror pc
   13e6c:	andeq	r3, r1, ip, ror pc
   13e70:	andeq	r3, r1, ip, lsl pc
   13e74:	andeq	r3, r1, ip, ror pc
   13e78:	andeq	r3, r1, ip, ror pc
   13e7c:	andeq	r3, r1, ip, ror pc
   13e80:	andeq	r3, r1, r4, asr #30
   13e84:	andeq	r3, r1, ip, ror pc
   13e88:	andeq	r3, r1, ip, ror pc
   13e8c:	andeq	r3, r1, ip, ror pc
   13e90:	andeq	r3, r1, ip, ror pc
   13e94:	andeq	r3, r1, ip, ror pc
   13e98:	andeq	r3, r1, ip, ror pc
   13e9c:	andeq	r3, r1, ip, ror pc
   13ea0:	andeq	r3, r1, ip, ror pc
   13ea4:	andeq	r3, r1, ip, ror pc
   13ea8:	andeq	r3, r1, ip, ror pc
   13eac:	andeq	r3, r1, ip, ror pc
   13eb0:	andeq	r3, r1, r8, lsr #30
   13eb4:	andeq	r3, r1, ip, ror pc
   13eb8:	andeq	r3, r1, r4, lsr pc
   13ebc:	andeq	r3, r1, ip, ror pc
   13ec0:	andeq	r3, r1, r0, asr pc
   13ec4:	andeq	r3, r1, r8, asr pc
   13ec8:			; <UNDEFINED> instruction: 0x00013db4
   13ecc:	andeq	r3, r1, r0, lsl #30
   13ed0:	andeq	r3, r1, ip, ror pc
   13ed4:	andeq	r3, r1, ip, ror pc
   13ed8:	andeq	r3, r1, ip, ror pc
   13edc:	andeq	r3, r1, ip, ror pc
   13ee0:	andeq	r3, r1, r4, ror #30
   13ee4:	andeq	r3, r1, ip, ror pc
   13ee8:	andeq	r3, r1, ip, ror pc
   13eec:	andeq	r3, r1, ip, ror pc
   13ef0:	andeq	r3, r1, r0, ror pc
   13ef4:	mov	r1, #1
   13ef8:	strb	r1, [fp, #-258]	; 0xfffffefe
   13efc:	b	13dbc <__assert_fail@plt+0x1a84>
   13f00:	ldr	r1, [fp, #-272]	; 0xfffffef0
   13f04:	cmp	r1, #0
   13f08:	bne	13dbc <__assert_fail@plt+0x1a84>
   13f0c:	movw	r1, #33928	; 0x8488
   13f10:	movt	r1, #3
   13f14:	str	r1, [fp, #-272]	; 0xfffffef0
   13f18:	b	13dbc <__assert_fail@plt+0x1a84>
   13f1c:	mov	r1, #1
   13f20:	strb	r1, [fp, #-261]	; 0xfffffefb
   13f24:	b	13dbc <__assert_fail@plt+0x1a84>
   13f28:	mov	r1, #1
   13f2c:	strb	r1, [fp, #-264]	; 0xfffffef8
   13f30:	b	13dbc <__assert_fail@plt+0x1a84>
   13f34:	movw	r1, #34184	; 0x8588
   13f38:	movt	r1, #3
   13f3c:	str	r1, [fp, #-272]	; 0xfffffef0
   13f40:	b	13dbc <__assert_fail@plt+0x1a84>
   13f44:	mov	r1, #1
   13f48:	strb	r1, [fp, #-256]	; 0xffffff00
   13f4c:	b	13dbc <__assert_fail@plt+0x1a84>
   13f50:	str	r3, [fp, #-268]	; 0xfffffef4
   13f54:	b	13dbc <__assert_fail@plt+0x1a84>
   13f58:	mov	r1, #1
   13f5c:	strb	r1, [fp, #-260]	; 0xfffffefc
   13f60:	b	13dbc <__assert_fail@plt+0x1a84>
   13f64:	mov	r1, #1
   13f68:	strb	r1, [fp, #-262]	; 0xfffffefa
   13f6c:	b	13dbc <__assert_fail@plt+0x1a84>
   13f70:	mov	r1, #1
   13f74:	strb	r1, [fp, #-257]	; 0xfffffeff
   13f78:	b	13dbc <__assert_fail@plt+0x1a84>
   13f7c:	mov	r1, #0
   13f80:	str	r1, [fp, #-276]	; 0xfffffeec
   13f84:	mvn	r1, #0
   13f88:	str	r1, [fp, #-280]	; 0xfffffee8
   13f8c:	ldrb	r1, [r0, #-1]
   13f90:	b	141a0 <__assert_fail@plt+0x1e68>
   13f94:	ldr	r0, [sp, #132]	; 0x84
   13f98:	cmp	r0, #0
   13f9c:	beq	14284 <__assert_fail@plt+0x1f4c>
   13fa0:	ldr	lr, [sp, #116]	; 0x74
   13fa4:	movw	r7, #33472	; 0x82c0
   13fa8:	mov	r0, #0
   13fac:	mvn	r1, #0
   13fb0:	mvn	ip, #0
   13fb4:	mov	r6, r9
   13fb8:	str	r0, [sp, #132]	; 0x84
   13fbc:	mvn	r0, #0
   13fc0:	movt	r7, #3
   13fc4:	str	r1, [sp, #128]	; 0x80
   13fc8:	str	r0, [sp, #24]
   13fcc:	b	142a8 <__assert_fail@plt+0x1f70>
   13fd0:	ldr	r1, [sp, #92]	; 0x5c
   13fd4:	movw	r2, #23723	; 0x5cab
   13fd8:	movt	r2, #2
   13fdc:	bl	16880 <__assert_fail@plt+0x4548>
   13fe0:	ldr	r1, [fp, #-280]	; 0xfffffee8
   13fe4:	sub	r2, r1, #1
   13fe8:	cmp	r1, #0
   13fec:	str	r2, [fp, #-280]	; 0xfffffee8
   13ff0:	beq	16530 <__assert_fail@plt+0x41f8>
   13ff4:	ldrb	r1, [r0]
   13ff8:	cmp	r1, #46	; 0x2e
   13ffc:	bne	14014 <__assert_fail@plt+0x1cdc>
   14000:	ldr	r1, [sp, #80]	; 0x50
   14004:	movw	r2, #23537	; 0x5bf1
   14008:	add	r0, r0, #1
   1400c:	movt	r2, #2
   14010:	bl	16880 <__assert_fail@plt+0x4548>
   14014:	movw	r6, #34440	; 0x8688
   14018:	movt	r6, #3
   1401c:	b	14034 <__assert_fail@plt+0x1cfc>
   14020:	add	r0, r0, #1
   14024:	b	14034 <__assert_fail@plt+0x1cfc>
   14028:	mov	r1, #1
   1402c:	strb	r1, [fp, #-256]	; 0xffffff00
   14030:	b	14020 <__assert_fail@plt+0x1ce8>
   14034:	ldrb	r1, [r0]
   14038:	sub	r2, r1, #77	; 0x4d
   1403c:	cmp	r2, #37	; 0x25
   14040:	bhi	141a0 <__assert_fail@plt+0x1e68>
   14044:	add	r3, pc, #0
   14048:	ldr	pc, [r3, r2, lsl #2]
   1404c:	strdeq	r4, [r1], -r8
   14050:	andeq	r4, r1, r0, lsr #3
   14054:	andeq	r4, r1, r0, lsr #3
   14058:	andeq	r4, r1, r0, lsr #3
   1405c:	andeq	r4, r1, r0, lsr #3
   14060:	andeq	r4, r1, r0, ror r1
   14064:	andeq	r4, r1, r0, lsr #3
   14068:	andeq	r4, r1, r0, lsr #3
   1406c:	andeq	r4, r1, r0, lsr #3
   14070:	andeq	r4, r1, r8, lsr #32
   14074:	andeq	r4, r1, r0, lsr #3
   14078:	andeq	r4, r1, r0, lsr #3
   1407c:	andeq	r4, r1, r0, lsr #3
   14080:	andeq	r4, r1, r0, lsr #3
   14084:	andeq	r4, r1, r0, lsr #3
   14088:	andeq	r4, r1, r0, lsr #3
   1408c:	andeq	r4, r1, r0, lsr #3
   14090:	andeq	r4, r1, r0, lsr #3
   14094:	andeq	r4, r1, r0, lsr #3
   14098:	andeq	r4, r1, r0, lsr #3
   1409c:	andeq	r4, r1, r0, lsr #3
   140a0:	andeq	r4, r1, ip, lsr r1
   140a4:	andeq	r4, r1, r0, lsr #3
   140a8:	andeq	r4, r1, ip, asr r1
   140ac:	andeq	r4, r1, r0, lsr #3
   140b0:	andeq	r4, r1, r0, lsr r1
   140b4:	andeq	r4, r1, ip, asr #2
   140b8:	andeq	r4, r1, r8, lsl #2
   140bc:	andeq	r4, r1, r8, lsl r1
   140c0:	andeq	r4, r1, r0, lsr #3
   140c4:	andeq	r4, r1, r0, lsr #3
   140c8:	andeq	r4, r1, r0, lsr #3
   140cc:	andeq	r4, r1, r0, lsr #3
   140d0:	muleq	r1, r0, r1
   140d4:	andeq	r4, r1, r0, lsr #3
   140d8:	andeq	r4, r1, r0, lsr #3
   140dc:	andeq	r4, r1, r0, lsr #3
   140e0:	andeq	r4, r1, r0, lsl #3
   140e4:	nop	{0}
   140e8:	andeq	r0, r0, r0
   140ec:	mvnsmi	r0, #0
   140f0:	andeq	r0, r0, r0
   140f4:	subsmi	r0, r9, r0
   140f8:	mov	r1, #1
   140fc:	add	r0, r0, #1
   14100:	strb	r1, [fp, #-258]	; 0xfffffefe
   14104:	b	14034 <__assert_fail@plt+0x1cfc>
   14108:	mov	r1, #1
   1410c:	add	r0, r0, #1
   14110:	strb	r1, [fp, #-259]	; 0xfffffefd
   14114:	b	14034 <__assert_fail@plt+0x1cfc>
   14118:	ldr	r1, [fp, #-272]	; 0xfffffef0
   1411c:	cmp	r1, #0
   14120:	bne	14020 <__assert_fail@plt+0x1ce8>
   14124:	movw	r1, #33928	; 0x8488
   14128:	movt	r1, #3
   1412c:	b	14164 <__assert_fail@plt+0x1e2c>
   14130:	str	r6, [fp, #-268]	; 0xfffffef4
   14134:	add	r0, r0, #1
   14138:	b	14034 <__assert_fail@plt+0x1cfc>
   1413c:	mov	r1, #1
   14140:	add	r0, r0, #1
   14144:	strb	r1, [fp, #-263]	; 0xfffffef9
   14148:	b	14034 <__assert_fail@plt+0x1cfc>
   1414c:	mov	r1, #1
   14150:	add	r0, r0, #1
   14154:	strb	r1, [fp, #-260]	; 0xfffffefc
   14158:	b	14034 <__assert_fail@plt+0x1cfc>
   1415c:	movw	r1, #34184	; 0x8588
   14160:	movt	r1, #3
   14164:	str	r1, [fp, #-272]	; 0xfffffef0
   14168:	add	r0, r0, #1
   1416c:	b	14034 <__assert_fail@plt+0x1cfc>
   14170:	mov	r1, #1
   14174:	add	r0, r0, #1
   14178:	strb	r1, [fp, #-261]	; 0xfffffefb
   1417c:	b	14034 <__assert_fail@plt+0x1cfc>
   14180:	mov	r1, #1
   14184:	add	r0, r0, #1
   14188:	strb	r1, [fp, #-257]	; 0xfffffeff
   1418c:	b	14034 <__assert_fail@plt+0x1cfc>
   14190:	mov	r1, #1
   14194:	add	r0, r0, #1
   14198:	strb	r1, [fp, #-262]	; 0xfffffefa
   1419c:	b	14034 <__assert_fail@plt+0x1cfc>
   141a0:	cmp	r1, #0
   141a4:	bne	16540 <__assert_fail@plt+0x4208>
   141a8:	sub	r0, fp, #288	; 0x120
   141ac:	mov	r1, #40	; 0x28
   141b0:	bl	22668 <__assert_fail@plt+0x10330>
   141b4:	movw	r1, #33656	; 0x8378
   141b8:	movt	r1, #3
   141bc:	ldr	r3, [r1]
   141c0:	mov	r2, r1
   141c4:	add	r1, r3, #36	; 0x24
   141c8:	cmp	r3, #0
   141cc:	bne	141bc <__assert_fail@plt+0x1e84>
   141d0:	ldr	lr, [sp, #116]	; 0x74
   141d4:	movw	r7, #33472	; 0x82c0
   141d8:	mov	r1, #0
   141dc:	str	r0, [r2]
   141e0:	mov	r4, #107	; 0x6b
   141e4:	mvn	ip, #0
   141e8:	mov	r6, r9
   141ec:	str	r1, [r0, #36]	; 0x24
   141f0:	mov	r0, r5
   141f4:	movt	r7, #3
   141f8:	b	12e94 <__assert_fail@plt+0xb5c>
   141fc:	ldr	r0, [sp, #112]	; 0x70
   14200:	b	1459c <__assert_fail@plt+0x2264>
   14204:	movw	r0, #34704	; 0x8790
   14208:	movt	r0, #3
   1420c:	ldr	r0, [r0]
   14210:	add	r2, r1, #1
   14214:	str	r2, [r4]
   14218:	str	r5, [r0, r1, lsl #2]
   1421c:	ldr	r0, [sp, #48]	; 0x30
   14220:	mov	r4, #84	; 0x54
   14224:	b	12e94 <__assert_fail@plt+0xb5c>
   14228:	movw	r0, #33496	; 0x82d8
   1422c:	movt	r0, #3
   14230:	ldr	r4, [r0]
   14234:	str	r4, [r6]
   14238:	movw	r4, #257	; 0x101
   1423c:	ldr	r6, [sp, #104]	; 0x68
   14240:	mov	r0, r5
   14244:	b	12e94 <__assert_fail@plt+0xb5c>
   14248:	mov	r4, #99	; 0x63
   1424c:	ldr	r0, [sp, #84]	; 0x54
   14250:	uxtb	r0, r0
   14254:	cmp	r0, #0
   14258:	cmpne	r4, r0
   1425c:	bne	16550 <__assert_fail@plt+0x4218>
   14260:	mov	r0, r5
   14264:	str	r4, [sp, #84]	; 0x54
   14268:	b	12e94 <__assert_fail@plt+0xb5c>
   1426c:	str	r5, [sp, #72]	; 0x48
   14270:	b	14278 <__assert_fail@plt+0x1f40>
   14274:	str	r5, [sp, #28]
   14278:	ldr	r0, [sp, #48]	; 0x30
   1427c:	ldr	r6, [sp, #104]	; 0x68
   14280:	b	12e94 <__assert_fail@plt+0xb5c>
   14284:	ldr	r1, [sp, #128]	; 0x80
   14288:	ldr	lr, [sp, #116]	; 0x74
   1428c:	movw	r7, #33472	; 0x82c0
   14290:	mvn	ip, #0
   14294:	mov	r6, r9
   14298:	movt	r7, #3
   1429c:	orrs	r0, r1, r0
   142a0:	str	r1, [sp, #24]
   142a4:	beq	1655c <__assert_fail@plt+0x4224>
   142a8:	ldr	r0, [sp, #48]	; 0x30
   142ac:	movw	r4, #263	; 0x107
   142b0:	b	12e94 <__assert_fail@plt+0xb5c>
   142b4:	mov	r4, r0
   142b8:	b	142d8 <__assert_fail@plt+0x1fa0>
   142bc:	mov	r4, #0
   142c0:	ldr	lr, [sp, #116]	; 0x74
   142c4:	movw	r3, #34440	; 0x8688
   142c8:	movw	r7, #33472	; 0x82c0
   142cc:	mvn	ip, #0
   142d0:	movt	r3, #3
   142d4:	movt	r7, #3
   142d8:	ldr	r0, [fp, #-288]	; 0xfffffee0
   142dc:	ldr	r1, [fp, #-284]	; 0xfffffee4
   142e0:	orrs	r0, r0, r1
   142e4:	mvneq	r0, #0
   142e8:	streq	r0, [fp, #-288]	; 0xfffffee0
   142ec:	mov	r0, #1
   142f0:	cmp	r4, #0
   142f4:	bne	14310 <__assert_fail@plt+0x1fd8>
   142f8:	b	14598 <__assert_fail@plt+0x2260>
   142fc:	add	r4, r4, #1
   14300:	b	14310 <__assert_fail@plt+0x1fd8>
   14304:	mov	r1, #1
   14308:	strb	r1, [fp, #-256]	; 0xffffff00
   1430c:	b	142fc <__assert_fail@plt+0x1fc4>
   14310:	ldrb	r1, [r4]
   14314:	cmp	r1, #114	; 0x72
   14318:	bhi	14598 <__assert_fail@plt+0x2260>
   1431c:	add	r2, pc, #0
   14320:	ldr	pc, [r2, r1, lsl #2]
   14324:			; <UNDEFINED> instruction: 0x000145bc
   14328:	muleq	r1, r8, r5
   1432c:	muleq	r1, r8, r5
   14330:	muleq	r1, r8, r5
   14334:	muleq	r1, r8, r5
   14338:	muleq	r1, r8, r5
   1433c:	muleq	r1, r8, r5
   14340:	muleq	r1, r8, r5
   14344:	muleq	r1, r8, r5
   14348:	muleq	r1, r8, r5
   1434c:	muleq	r1, r8, r5
   14350:	muleq	r1, r8, r5
   14354:	muleq	r1, r8, r5
   14358:	muleq	r1, r8, r5
   1435c:	muleq	r1, r8, r5
   14360:	muleq	r1, r8, r5
   14364:	muleq	r1, r8, r5
   14368:	muleq	r1, r8, r5
   1436c:	muleq	r1, r8, r5
   14370:	muleq	r1, r8, r5
   14374:	muleq	r1, r8, r5
   14378:	muleq	r1, r8, r5
   1437c:	muleq	r1, r8, r5
   14380:	muleq	r1, r8, r5
   14384:	muleq	r1, r8, r5
   14388:	muleq	r1, r8, r5
   1438c:	muleq	r1, r8, r5
   14390:	muleq	r1, r8, r5
   14394:	muleq	r1, r8, r5
   14398:	muleq	r1, r8, r5
   1439c:	muleq	r1, r8, r5
   143a0:	muleq	r1, r8, r5
   143a4:	muleq	r1, r8, r5
   143a8:	muleq	r1, r8, r5
   143ac:	muleq	r1, r8, r5
   143b0:	muleq	r1, r8, r5
   143b4:	muleq	r1, r8, r5
   143b8:	muleq	r1, r8, r5
   143bc:	muleq	r1, r8, r5
   143c0:	muleq	r1, r8, r5
   143c4:	muleq	r1, r8, r5
   143c8:	muleq	r1, r8, r5
   143cc:	muleq	r1, r8, r5
   143d0:	muleq	r1, r8, r5
   143d4:	muleq	r1, r8, r5
   143d8:	muleq	r1, r8, r5
   143dc:	muleq	r1, r8, r5
   143e0:	muleq	r1, r8, r5
   143e4:	muleq	r1, r8, r5
   143e8:	muleq	r1, r8, r5
   143ec:	muleq	r1, r8, r5
   143f0:	muleq	r1, r8, r5
   143f4:	muleq	r1, r8, r5
   143f8:	muleq	r1, r8, r5
   143fc:	muleq	r1, r8, r5
   14400:	muleq	r1, r8, r5
   14404:	muleq	r1, r8, r5
   14408:	muleq	r1, r8, r5
   1440c:	muleq	r1, r8, r5
   14410:	muleq	r1, r8, r5
   14414:	muleq	r1, r8, r5
   14418:	muleq	r1, r8, r5
   1441c:	muleq	r1, r8, r5
   14420:	muleq	r1, r8, r5
   14424:	muleq	r1, r8, r5
   14428:	muleq	r1, r8, r5
   1442c:	muleq	r1, r8, r5
   14430:	muleq	r1, r8, r5
   14434:	muleq	r1, r8, r5
   14438:	muleq	r1, r8, r5
   1443c:	muleq	r1, r8, r5
   14440:	muleq	r1, r8, r5
   14444:	muleq	r1, r8, r5
   14448:	muleq	r1, r8, r5
   1444c:	muleq	r1, r8, r5
   14450:	muleq	r1, r8, r5
   14454:	muleq	r1, r8, r5
   14458:	strdeq	r4, [r1], -r0
   1445c:	muleq	r1, r8, r5
   14460:	muleq	r1, r8, r5
   14464:	muleq	r1, r8, r5
   14468:	muleq	r1, r8, r5
   1446c:	andeq	r4, r1, r8, lsr #10
   14470:	muleq	r1, r8, r5
   14474:	muleq	r1, r8, r5
   14478:	muleq	r1, r8, r5
   1447c:	andeq	r4, r1, r4, lsl #6
   14480:	muleq	r1, r8, r5
   14484:	muleq	r1, r8, r5
   14488:	muleq	r1, r8, r5
   1448c:	muleq	r1, r8, r5
   14490:	muleq	r1, r8, r5
   14494:	muleq	r1, r8, r5
   14498:	muleq	r1, r8, r5
   1449c:	muleq	r1, r8, r5
   144a0:	muleq	r1, r8, r5
   144a4:	muleq	r1, r8, r5
   144a8:	muleq	r1, r8, r5
   144ac:	andeq	r4, r1, r8, lsr r5
   144b0:	muleq	r1, r8, r5
   144b4:	andeq	r4, r1, r8, asr #10
   144b8:	muleq	r1, r8, r5
   144bc:	andeq	r4, r1, ip, asr r5
   144c0:	andeq	r4, r1, r8, ror #10
   144c4:	andeq	r4, r1, r8, lsl r5
   144c8:	andeq	r4, r1, r0, lsl #10
   144cc:	muleq	r1, r8, r5
   144d0:	muleq	r1, r8, r5
   144d4:	muleq	r1, r8, r5
   144d8:	muleq	r1, r8, r5
   144dc:	andeq	r4, r1, r8, ror r5
   144e0:	muleq	r1, r8, r5
   144e4:	muleq	r1, r8, r5
   144e8:	muleq	r1, r8, r5
   144ec:	andeq	r4, r1, r8, lsl #11
   144f0:	mov	r1, #1
   144f4:	add	r4, r4, #1
   144f8:	strb	r1, [fp, #-258]	; 0xfffffefe
   144fc:	b	14310 <__assert_fail@plt+0x1fd8>
   14500:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14504:	cmp	r1, #0
   14508:	bne	142fc <__assert_fail@plt+0x1fc4>
   1450c:	movw	r1, #33928	; 0x8488
   14510:	movt	r1, #3
   14514:	b	14550 <__assert_fail@plt+0x2218>
   14518:	mov	r1, #1
   1451c:	add	r4, r4, #1
   14520:	strb	r1, [fp, #-259]	; 0xfffffefd
   14524:	b	14310 <__assert_fail@plt+0x1fd8>
   14528:	mov	r1, #1
   1452c:	add	r4, r4, #1
   14530:	strb	r1, [fp, #-261]	; 0xfffffefb
   14534:	b	14310 <__assert_fail@plt+0x1fd8>
   14538:	mov	r1, #1
   1453c:	add	r4, r4, #1
   14540:	strb	r1, [fp, #-264]	; 0xfffffef8
   14544:	b	14310 <__assert_fail@plt+0x1fd8>
   14548:	movw	r1, #34184	; 0x8588
   1454c:	movt	r1, #3
   14550:	str	r1, [fp, #-272]	; 0xfffffef0
   14554:	add	r4, r4, #1
   14558:	b	14310 <__assert_fail@plt+0x1fd8>
   1455c:	str	r3, [fp, #-268]	; 0xfffffef4
   14560:	add	r4, r4, #1
   14564:	b	14310 <__assert_fail@plt+0x1fd8>
   14568:	mov	r1, #1
   1456c:	add	r4, r4, #1
   14570:	strb	r1, [fp, #-260]	; 0xfffffefc
   14574:	b	14310 <__assert_fail@plt+0x1fd8>
   14578:	mov	r1, #1
   1457c:	add	r4, r4, #1
   14580:	strb	r1, [fp, #-262]	; 0xfffffefa
   14584:	b	14310 <__assert_fail@plt+0x1fd8>
   14588:	mov	r1, #1
   1458c:	add	r4, r4, #1
   14590:	strb	r1, [fp, #-257]	; 0xfffffeff
   14594:	b	14310 <__assert_fail@plt+0x1fd8>
   14598:	ldr	r6, [sp, #104]	; 0x68
   1459c:	ldr	r1, [r9]
   145a0:	ldr	r2, [sp, #124]	; 0x7c
   145a4:	str	r0, [sp, #112]	; 0x70
   145a8:	mov	r4, #1
   145ac:	mov	r0, r5
   145b0:	str	r1, [r2, sl, lsl #2]
   145b4:	add	sl, sl, #1
   145b8:	b	12e94 <__assert_fail@plt+0xb5c>
   145bc:	cmp	r6, #0
   145c0:	mov	r9, r5
   145c4:	ldr	r6, [sp, #84]	; 0x54
   145c8:	ldr	r5, [sp, #104]	; 0x68
   145cc:	beq	148e8 <__assert_fail@plt+0x25b0>
   145d0:	ldr	r0, [r7]
   145d4:	movw	r2, #23478	; 0x5bb6
   145d8:	movt	r2, #2
   145dc:	add	r1, r0, #1
   145e0:	str	r1, [r7]
   145e4:	ldr	r1, [sp, #92]	; 0x5c
   145e8:	mov	r7, r5
   145ec:	ldr	r4, [r5, r0, lsl #2]
   145f0:	add	r0, r4, #1
   145f4:	bl	16880 <__assert_fail@plt+0x4548>
   145f8:	cmp	r0, #0
   145fc:	beq	16580 <__assert_fail@plt+0x4248>
   14600:	ldrb	r1, [r0]
   14604:	cmp	r1, #46	; 0x2e
   14608:	bne	14620 <__assert_fail@plt+0x22e8>
   1460c:	ldr	r1, [sp, #80]	; 0x50
   14610:	movw	r2, #23537	; 0x5bf1
   14614:	add	r0, r0, #1
   14618:	movt	r2, #2
   1461c:	bl	16880 <__assert_fail@plt+0x4548>
   14620:	ldr	r1, [fp, #-276]	; 0xfffffeec
   14624:	mov	r5, r7
   14628:	cmp	r1, #0
   1462c:	bne	14640 <__assert_fail@plt+0x2308>
   14630:	ldr	r1, [fp, #-280]	; 0xfffffee8
   14634:	cmp	r1, #0
   14638:	subne	r1, r1, #1
   1463c:	strne	r1, [fp, #-280]	; 0xfffffee8
   14640:	movw	r3, #34440	; 0x8688
   14644:	movt	r3, #3
   14648:	b	14660 <__assert_fail@plt+0x2328>
   1464c:	add	r0, r0, #1
   14650:	b	14660 <__assert_fail@plt+0x2328>
   14654:	mov	r1, #1
   14658:	strb	r1, [fp, #-256]	; 0xffffff00
   1465c:	b	1464c <__assert_fail@plt+0x2314>
   14660:	ldrb	r1, [r0]
   14664:	cmp	r1, #114	; 0x72
   14668:	bhi	165a0 <__assert_fail@plt+0x4268>
   1466c:	add	r2, pc, #0
   14670:	ldr	pc, [r2, r1, lsl #2]
   14674:	andeq	r4, r1, r8, ror #17
   14678:	andeq	r6, r1, r0, lsr #11
   1467c:	andeq	r6, r1, r0, lsr #11
   14680:	andeq	r6, r1, r0, lsr #11
   14684:	andeq	r6, r1, r0, lsr #11
   14688:	andeq	r6, r1, r0, lsr #11
   1468c:	andeq	r6, r1, r0, lsr #11
   14690:	andeq	r6, r1, r0, lsr #11
   14694:	andeq	r6, r1, r0, lsr #11
   14698:	andeq	r6, r1, r0, lsr #11
   1469c:	andeq	r6, r1, r0, lsr #11
   146a0:	andeq	r6, r1, r0, lsr #11
   146a4:	andeq	r6, r1, r0, lsr #11
   146a8:	andeq	r6, r1, r0, lsr #11
   146ac:	andeq	r6, r1, r0, lsr #11
   146b0:	andeq	r6, r1, r0, lsr #11
   146b4:	andeq	r6, r1, r0, lsr #11
   146b8:	andeq	r6, r1, r0, lsr #11
   146bc:	andeq	r6, r1, r0, lsr #11
   146c0:	andeq	r6, r1, r0, lsr #11
   146c4:	andeq	r6, r1, r0, lsr #11
   146c8:	andeq	r6, r1, r0, lsr #11
   146cc:	andeq	r6, r1, r0, lsr #11
   146d0:	andeq	r6, r1, r0, lsr #11
   146d4:	andeq	r6, r1, r0, lsr #11
   146d8:	andeq	r6, r1, r0, lsr #11
   146dc:	andeq	r6, r1, r0, lsr #11
   146e0:	andeq	r6, r1, r0, lsr #11
   146e4:	andeq	r6, r1, r0, lsr #11
   146e8:	andeq	r6, r1, r0, lsr #11
   146ec:	andeq	r6, r1, r0, lsr #11
   146f0:	andeq	r6, r1, r0, lsr #11
   146f4:	andeq	r6, r1, r0, lsr #11
   146f8:	andeq	r6, r1, r0, lsr #11
   146fc:	andeq	r6, r1, r0, lsr #11
   14700:	andeq	r6, r1, r0, lsr #11
   14704:	andeq	r6, r1, r0, lsr #11
   14708:	andeq	r6, r1, r0, lsr #11
   1470c:	andeq	r6, r1, r0, lsr #11
   14710:	andeq	r6, r1, r0, lsr #11
   14714:	andeq	r6, r1, r0, lsr #11
   14718:	andeq	r6, r1, r0, lsr #11
   1471c:	andeq	r6, r1, r0, lsr #11
   14720:	andeq	r6, r1, r0, lsr #11
   14724:	andeq	r6, r1, r0, lsr #11
   14728:	andeq	r6, r1, r0, lsr #11
   1472c:	andeq	r6, r1, r0, lsr #11
   14730:	andeq	r6, r1, r0, lsr #11
   14734:	andeq	r6, r1, r0, lsr #11
   14738:	andeq	r6, r1, r0, lsr #11
   1473c:	andeq	r6, r1, r0, lsr #11
   14740:	andeq	r6, r1, r0, lsr #11
   14744:	andeq	r6, r1, r0, lsr #11
   14748:	andeq	r6, r1, r0, lsr #11
   1474c:	andeq	r6, r1, r0, lsr #11
   14750:	andeq	r6, r1, r0, lsr #11
   14754:	andeq	r6, r1, r0, lsr #11
   14758:	andeq	r6, r1, r0, lsr #11
   1475c:	andeq	r6, r1, r0, lsr #11
   14760:	andeq	r6, r1, r0, lsr #11
   14764:	andeq	r6, r1, r0, lsr #11
   14768:	andeq	r6, r1, r0, lsr #11
   1476c:	andeq	r6, r1, r0, lsr #11
   14770:	andeq	r6, r1, r0, lsr #11
   14774:	andeq	r6, r1, r0, lsr #11
   14778:	andeq	r6, r1, r0, lsr #11
   1477c:	andeq	r6, r1, r0, lsr #11
   14780:	andeq	r6, r1, r0, lsr #11
   14784:	andeq	r6, r1, r0, lsr #11
   14788:	andeq	r6, r1, r0, lsr #11
   1478c:	andeq	r6, r1, r0, lsr #11
   14790:	andeq	r6, r1, r0, lsr #11
   14794:	andeq	r6, r1, r0, lsr #11
   14798:	andeq	r6, r1, r0, lsr #11
   1479c:	andeq	r6, r1, r0, lsr #11
   147a0:	andeq	r6, r1, r0, lsr #11
   147a4:	andeq	r6, r1, r0, lsr #11
   147a8:	andeq	r4, r1, r0, asr #16
   147ac:	andeq	r6, r1, r0, lsr #11
   147b0:	andeq	r6, r1, r0, lsr #11
   147b4:	andeq	r6, r1, r0, lsr #11
   147b8:	andeq	r6, r1, r0, lsr #11
   147bc:	muleq	r1, ip, r8
   147c0:	andeq	r6, r1, r0, lsr #11
   147c4:	andeq	r6, r1, r0, lsr #11
   147c8:	andeq	r6, r1, r0, lsr #11
   147cc:	andeq	r4, r1, r4, asr r6
   147d0:	andeq	r6, r1, r0, lsr #11
   147d4:	andeq	r6, r1, r0, lsr #11
   147d8:	andeq	r6, r1, r0, lsr #11
   147dc:	andeq	r6, r1, r0, lsr #11
   147e0:	andeq	r6, r1, r0, lsr #11
   147e4:	andeq	r6, r1, r0, lsr #11
   147e8:	andeq	r6, r1, r0, lsr #11
   147ec:	andeq	r6, r1, r0, lsr #11
   147f0:	andeq	r6, r1, r0, lsr #11
   147f4:	andeq	r6, r1, r0, lsr #11
   147f8:	andeq	r6, r1, r0, lsr #11
   147fc:	andeq	r4, r1, ip, lsr #17
   14800:	andeq	r6, r1, r0, lsr #11
   14804:	andeq	r4, r1, r8, lsl #17
   14808:	andeq	r6, r1, r0, lsr #11
   1480c:			; <UNDEFINED> instruction: 0x000148bc
   14810:	andeq	r4, r1, r8, ror r8
   14814:	andeq	r4, r1, r8, asr #17
   14818:	andeq	r4, r1, r0, ror #16
   1481c:	andeq	r6, r1, r0, lsr #11
   14820:	andeq	r6, r1, r0, lsr #11
   14824:	andeq	r6, r1, r0, lsr #11
   14828:	andeq	r6, r1, r0, lsr #11
   1482c:	ldrdeq	r4, [r1], -r8
   14830:	andeq	r6, r1, r0, lsr #11
   14834:	andeq	r6, r1, r0, lsr #11
   14838:	andeq	r6, r1, r0, lsr #11
   1483c:	andeq	r4, r1, r0, asr r8
   14840:	mov	r1, #1
   14844:	add	r0, r0, #1
   14848:	strb	r1, [fp, #-258]	; 0xfffffefe
   1484c:	b	14660 <__assert_fail@plt+0x2328>
   14850:	mov	r1, #1
   14854:	add	r0, r0, #1
   14858:	strb	r1, [fp, #-257]	; 0xfffffeff
   1485c:	b	14660 <__assert_fail@plt+0x2328>
   14860:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14864:	cmp	r1, #0
   14868:	bne	1464c <__assert_fail@plt+0x2314>
   1486c:	movw	r1, #33928	; 0x8488
   14870:	movt	r1, #3
   14874:	b	14890 <__assert_fail@plt+0x2558>
   14878:	mov	r1, #1
   1487c:	add	r0, r0, #1
   14880:	strb	r1, [fp, #-260]	; 0xfffffefc
   14884:	b	14660 <__assert_fail@plt+0x2328>
   14888:	movw	r1, #34184	; 0x8588
   1488c:	movt	r1, #3
   14890:	str	r1, [fp, #-272]	; 0xfffffef0
   14894:	add	r0, r0, #1
   14898:	b	14660 <__assert_fail@plt+0x2328>
   1489c:	mov	r1, #1
   148a0:	add	r0, r0, #1
   148a4:	strb	r1, [fp, #-261]	; 0xfffffefb
   148a8:	b	14660 <__assert_fail@plt+0x2328>
   148ac:	mov	r1, #1
   148b0:	add	r0, r0, #1
   148b4:	strb	r1, [fp, #-263]	; 0xfffffef9
   148b8:	b	14660 <__assert_fail@plt+0x2328>
   148bc:	str	r3, [fp, #-268]	; 0xfffffef4
   148c0:	add	r0, r0, #1
   148c4:	b	14660 <__assert_fail@plt+0x2328>
   148c8:	mov	r1, #1
   148cc:	add	r0, r0, #1
   148d0:	strb	r1, [fp, #-259]	; 0xfffffefd
   148d4:	b	14660 <__assert_fail@plt+0x2328>
   148d8:	mov	r1, #1
   148dc:	add	r0, r0, #1
   148e0:	strb	r1, [fp, #-262]	; 0xfffffefa
   148e4:	b	14660 <__assert_fail@plt+0x2328>
   148e8:	mov	r0, #1
   148ec:	mov	r1, #40	; 0x28
   148f0:	str	r6, [sp, #84]	; 0x54
   148f4:	strb	r0, [fp, #-255]	; 0xffffff01
   148f8:	sub	r0, fp, #288	; 0x120
   148fc:	bl	22668 <__assert_fail@plt+0x10330>
   14900:	movw	r1, #33656	; 0x8378
   14904:	movt	r1, #3
   14908:	ldr	r3, [r1]
   1490c:	mov	r2, r1
   14910:	add	r1, r3, #36	; 0x24
   14914:	cmp	r3, #0
   14918:	bne	14908 <__assert_fail@plt+0x25d0>
   1491c:	b	12e44 <__assert_fail@plt+0xb0c>
   14920:	ldr	r6, [sp, #100]	; 0x64
   14924:	str	r5, [sp, #48]	; 0x30
   14928:	cmp	r6, #0
   1492c:	beq	14a24 <__assert_fail@plt+0x26ec>
   14930:	cmp	sl, #0
   14934:	bne	16628 <__assert_fail@plt+0x42f0>
   14938:	movw	r1, #24854	; 0x6116
   1493c:	mov	r0, r6
   14940:	movt	r1, #2
   14944:	bl	17428 <__assert_fail@plt+0x50f0>
   14948:	ldr	r7, [sp, #124]	; 0x7c
   1494c:	cmp	r0, #0
   14950:	beq	166a4 <__assert_fail@plt+0x436c>
   14954:	add	r5, sp, #128	; 0x80
   14958:	mov	r4, r0
   1495c:	mov	r0, r5
   14960:	bl	21250 <__assert_fail@plt+0xef18>
   14964:	mov	r0, r4
   14968:	mov	r1, r5
   1496c:	bl	21304 <__assert_fail@plt+0xefcc>
   14970:	cmp	r0, #0
   14974:	beq	166c0 <__assert_fail@plt+0x4388>
   14978:	ldr	r9, [sp, #84]	; 0x54
   1497c:	mov	r0, r4
   14980:	mov	r1, r6
   14984:	bl	169f0 <__assert_fail@plt+0x46b8>
   14988:	ldr	r0, [sp, #128]	; 0x80
   1498c:	cmp	r0, #0
   14990:	beq	166e4 <__assert_fail@plt+0x43ac>
   14994:	mov	r0, r7
   14998:	bl	1cc78 <__assert_fail@plt+0xa940>
   1499c:	ldr	sl, [sp, #128]	; 0x80
   149a0:	ldr	r7, [sp, #132]	; 0x84
   149a4:	movw	r4, #25582	; 0x63ee
   149a8:	mov	r6, #0
   149ac:	movt	r4, #2
   149b0:	cmp	r6, sl
   149b4:	bcs	14a14 <__assert_fail@plt+0x26dc>
   149b8:	ldr	r5, [r7, r6, lsl #2]
   149bc:	mov	r1, r4
   149c0:	mov	r0, r5
   149c4:	bl	11e28 <strcmp@plt>
   149c8:	cmp	r0, #0
   149cc:	beq	162d8 <__assert_fail@plt+0x3fa0>
   149d0:	ldrb	r0, [r5]
   149d4:	add	r6, r6, #1
   149d8:	cmp	r0, #0
   149dc:	bne	149b0 <__assert_fail@plt+0x2678>
   149e0:	movw	r1, #24070	; 0x5e06
   149e4:	mov	r0, #0
   149e8:	mov	r2, #5
   149ec:	movt	r1, #2
   149f0:	bl	11f54 <dcgettext@plt>
   149f4:	ldr	r2, [sp, #100]	; 0x64
   149f8:	mov	r4, r0
   149fc:	mov	r0, #0
   14a00:	mov	r1, #3
   14a04:	bl	20630 <__assert_fail@plt+0xe2f8>
   14a08:	mov	r3, r0
   14a0c:	str	r6, [sp]
   14a10:	b	16300 <__assert_fail@plt+0x3fc8>
   14a14:	mov	r6, r9
   14a18:	ldr	r9, [sp, #72]	; 0x48
   14a1c:	ldr	r5, [sp, #48]	; 0x30
   14a20:	b	14a30 <__assert_fail@plt+0x26f8>
   14a24:	ldr	r7, [sp, #124]	; 0x7c
   14a28:	ldr	r6, [sp, #84]	; 0x54
   14a2c:	ldr	r9, [sp, #72]	; 0x48
   14a30:	movw	r0, #33656	; 0x8378
   14a34:	mov	r3, #0
   14a38:	movt	r0, #3
   14a3c:	ldr	r0, [r0]
   14a40:	cmp	r0, #0
   14a44:	beq	14b58 <__assert_fail@plt+0x2820>
   14a48:	mov	r3, #0
   14a4c:	mov	r1, r0
   14a50:	ldr	r2, [r1, #16]
   14a54:	cmp	r2, #0
   14a58:	bne	14b2c <__assert_fail@plt+0x27f4>
   14a5c:	ldr	r2, [r1, #20]
   14a60:	cmp	r2, #0
   14a64:	bne	14b2c <__assert_fail@plt+0x27f4>
   14a68:	ldrb	r2, [r1, #24]
   14a6c:	cmp	r2, #0
   14a70:	bne	14b2c <__assert_fail@plt+0x27f4>
   14a74:	ldrb	r2, [r1, #25]
   14a78:	cmp	r2, #0
   14a7c:	bne	14b2c <__assert_fail@plt+0x27f4>
   14a80:	ldrb	r2, [r1, #26]
   14a84:	cmp	r2, #0
   14a88:	bne	14b2c <__assert_fail@plt+0x27f4>
   14a8c:	ldrb	r2, [r1, #28]
   14a90:	cmp	r2, #0
   14a94:	bne	14b2c <__assert_fail@plt+0x27f4>
   14a98:	ldrb	r2, [r1, #29]
   14a9c:	cmp	r2, #0
   14aa0:	bne	14b2c <__assert_fail@plt+0x27f4>
   14aa4:	ldrb	r2, [r1, #30]
   14aa8:	cmp	r2, #0
   14aac:	bne	14b2c <__assert_fail@plt+0x27f4>
   14ab0:	ldrb	r2, [r1, #32]
   14ab4:	cmp	r2, #0
   14ab8:	bne	14b2c <__assert_fail@plt+0x27f4>
   14abc:	ldrb	r2, [r1, #27]
   14ac0:	cmp	r2, #0
   14ac4:	bne	14b2c <__assert_fail@plt+0x27f4>
   14ac8:	ldrb	r2, [r1, #31]
   14acc:	cmp	r2, #0
   14ad0:	bne	14b2c <__assert_fail@plt+0x27f4>
   14ad4:	ldr	r2, [sp, #288]	; 0x120
   14ad8:	str	r2, [r1, #16]
   14adc:	ldr	r2, [sp, #292]	; 0x124
   14ae0:	str	r2, [r1, #20]
   14ae4:	ldrb	r2, [sp, #296]	; 0x128
   14ae8:	strb	r2, [r1, #24]
   14aec:	ldrb	r2, [sp, #297]	; 0x129
   14af0:	strb	r2, [r1, #25]
   14af4:	ldrb	r2, [sp, #302]	; 0x12e
   14af8:	strb	r2, [r1, #30]
   14afc:	ldrb	r2, [sp, #298]	; 0x12a
   14b00:	strb	r2, [r1, #26]
   14b04:	ldrb	r2, [sp, #300]	; 0x12c
   14b08:	strb	r2, [r1, #28]
   14b0c:	ldrb	r2, [sp, #301]	; 0x12d
   14b10:	strb	r2, [r1, #29]
   14b14:	ldrb	r2, [sp, #304]	; 0x130
   14b18:	strb	r2, [r1, #32]
   14b1c:	ldrb	r2, [sp, #299]	; 0x12b
   14b20:	strb	r2, [r1, #27]
   14b24:	ldrb	r2, [sp, #303]	; 0x12f
   14b28:	strb	r2, [r1, #31]
   14b2c:	ldrb	r2, [r1, #27]
   14b30:	ldr	r1, [r1, #36]	; 0x24
   14b34:	and	r3, r3, #1
   14b38:	orrs	r3, r2, r3
   14b3c:	movwne	r3, #1
   14b40:	cmp	r1, #0
   14b44:	bne	14a50 <__assert_fail@plt+0x2718>
   14b48:	mov	r1, #0
   14b4c:	cmp	r0, #0
   14b50:	str	r1, [sp, #60]	; 0x3c
   14b54:	bne	14c10 <__assert_fail@plt+0x28d8>
   14b58:	ldrb	r0, [sp, #297]	; 0x129
   14b5c:	ldrb	r1, [sp, #296]	; 0x128
   14b60:	orr	r0, r1, r0
   14b64:	ldrb	r1, [sp, #298]	; 0x12a
   14b68:	orr	r0, r0, r1
   14b6c:	ldrb	r1, [sp, #300]	; 0x12c
   14b70:	orr	r0, r0, r1
   14b74:	ldrb	r1, [sp, #301]	; 0x12d
   14b78:	orr	r0, r0, r1
   14b7c:	ldrb	r1, [sp, #302]	; 0x12e
   14b80:	orr	r0, r0, r1
   14b84:	ldrb	r1, [sp, #304]	; 0x130
   14b88:	orr	r0, r0, r1
   14b8c:	ldrb	r1, [sp, #299]	; 0x12b
   14b90:	orrs	r0, r0, r1
   14b94:	bne	14bac <__assert_fail@plt+0x2874>
   14b98:	ldr	r0, [sp, #288]	; 0x120
   14b9c:	cmp	r0, #0
   14ba0:	ldreq	r0, [sp, #292]	; 0x124
   14ba4:	cmpeq	r0, #0
   14ba8:	beq	14c68 <__assert_fail@plt+0x2930>
   14bac:	add	r0, sp, #272	; 0x110
   14bb0:	mov	r1, #40	; 0x28
   14bb4:	mov	r4, r3
   14bb8:	bl	22668 <__assert_fail@plt+0x10330>
   14bbc:	movw	r2, #33656	; 0x8378
   14bc0:	movt	r2, #3
   14bc4:	ldr	r3, [r2]
   14bc8:	mov	r1, r2
   14bcc:	add	r2, r3, #36	; 0x24
   14bd0:	cmp	r3, #0
   14bd4:	bne	14bc4 <__assert_fail@plt+0x288c>
   14bd8:	str	r0, [r1]
   14bdc:	mov	r1, #0
   14be0:	mov	r3, r4
   14be4:	str	r1, [r0, #36]	; 0x24
   14be8:	ldrb	r0, [sp, #299]	; 0x12b
   14bec:	mov	r1, #1
   14bf0:	str	r1, [sp, #60]	; 0x3c
   14bf4:	orrs	r3, r0, r4
   14bf8:	movw	r0, #33656	; 0x8378
   14bfc:	movt	r0, #3
   14c00:	movwne	r3, #1
   14c04:	ldr	r0, [r0]
   14c08:	cmp	r0, #0
   14c0c:	beq	14c70 <__assert_fail@plt+0x2938>
   14c10:	mov	r4, r3
   14c14:	ldrb	r1, [r0, #32]
   14c18:	ldrb	r2, [r0, #27]
   14c1c:	ldrb	r3, [r0, #28]
   14c20:	orr	r1, r2, r1
   14c24:	ldr	r2, [r0, #16]
   14c28:	cmp	r2, #0
   14c2c:	ldrb	r2, [r0, #26]
   14c30:	movwne	r1, #1
   14c34:	add	r2, r3, r2
   14c38:	ldrb	r3, [r0, #29]
   14c3c:	add	r2, r2, r3
   14c40:	ldrb	r3, [r0, #30]
   14c44:	add	r2, r2, r3
   14c48:	uxtab	r1, r1, r2
   14c4c:	cmp	r1, #2
   14c50:	bcs	162b8 <__assert_fail@plt+0x3f80>
   14c54:	ldr	r0, [r0, #36]	; 0x24
   14c58:	cmp	r0, #0
   14c5c:	bne	14c14 <__assert_fail@plt+0x28dc>
   14c60:	mov	r3, r4
   14c64:	b	14c70 <__assert_fail@plt+0x2938>
   14c68:	mov	r0, #0
   14c6c:	str	r0, [sp, #60]	; 0x3c
   14c70:	movw	r0, #33652	; 0x8374
   14c74:	str	r9, [sp, #72]	; 0x48
   14c78:	movt	r0, #3
   14c7c:	ldrb	r0, [r0]
   14c80:	cmp	r0, #1
   14c84:	bne	158b4 <__assert_fail@plt+0x357c>
   14c88:	cmp	r9, #0
   14c8c:	str	r3, [sp, #20]
   14c90:	tsteq	r6, #255	; 0xff
   14c94:	beq	14cb0 <__assert_fail@plt+0x2978>
   14c98:	tst	r6, #255	; 0xff
   14c9c:	movw	r0, #33252	; 0x81e4
   14ca0:	movt	r0, #3
   14ca4:	moveq	r6, #111	; 0x6f
   14ca8:	strb	r6, [r0]
   14cac:	bl	169bc <__assert_fail@plt+0x4684>
   14cb0:	ldr	r0, [sp, #96]	; 0x60
   14cb4:	cmp	r0, #0
   14cb8:	beq	14cd4 <__assert_fail@plt+0x299c>
   14cbc:	movw	r1, #19820	; 0x4d6c
   14cc0:	mov	r0, #3
   14cc4:	movt	r1, #2
   14cc8:	bl	12218 <setlocale@plt>
   14ccc:	cmp	r0, #0
   14cd0:	bne	14d00 <__assert_fail@plt+0x29c8>
   14cd4:	movw	r1, #24125	; 0x5e3d
   14cd8:	mov	r0, #0
   14cdc:	mov	r2, #5
   14ce0:	movt	r1, #2
   14ce4:	bl	11f54 <dcgettext@plt>
   14ce8:	movw	r2, #27822	; 0x6cae
   14cec:	mov	r3, r0
   14cf0:	mov	r0, #0
   14cf4:	mov	r1, #0
   14cf8:	movt	r2, #2
   14cfc:	bl	12080 <error@plt>
   14d00:	movw	r0, #33504	; 0x82e0
   14d04:	str	r6, [sp, #84]	; 0x54
   14d08:	str	r7, [sp, #124]	; 0x7c
   14d0c:	movt	r0, #3
   14d10:	ldrb	r0, [r0]
   14d14:	cmp	r0, #0
   14d18:	beq	14d58 <__assert_fail@plt+0x2a20>
   14d1c:	movw	r1, #24146	; 0x5e52
   14d20:	mov	r0, #0
   14d24:	mov	r2, #5
   14d28:	movt	r1, #2
   14d2c:	bl	11f54 <dcgettext@plt>
   14d30:	mov	r5, r0
   14d34:	mov	r0, #3
   14d38:	mov	r1, #0
   14d3c:	bl	12218 <setlocale@plt>
   14d40:	bl	208dc <__assert_fail@plt+0xe5a4>
   14d44:	mov	r3, r0
   14d48:	mov	r0, #0
   14d4c:	mov	r1, #0
   14d50:	mov	r2, r5
   14d54:	b	14d80 <__assert_fail@plt+0x2a48>
   14d58:	movw	r1, #24193	; 0x5e81
   14d5c:	mov	r0, #0
   14d60:	mov	r2, #5
   14d64:	movt	r1, #2
   14d68:	bl	11f54 <dcgettext@plt>
   14d6c:	movw	r2, #27822	; 0x6cae
   14d70:	mov	r3, r0
   14d74:	mov	r0, #0
   14d78:	mov	r1, #0
   14d7c:	movt	r2, #2
   14d80:	bl	12080 <error@plt>
   14d84:	movw	r0, #33656	; 0x8378
   14d88:	ldrb	r4, [sp, #303]	; 0x12f
   14d8c:	ldrb	r6, [sp, #296]	; 0x128
   14d90:	ldr	r5, [sp, #288]	; 0x120
   14d94:	ldr	ip, [sp, #292]	; 0x124
   14d98:	str	sl, [sp, #56]	; 0x38
   14d9c:	movt	r0, #3
   14da0:	ldr	r9, [r0]
   14da4:	ldrb	r0, [sp, #304]	; 0x130
   14da8:	str	r0, [sp, #96]	; 0x60
   14dac:	ldrb	r0, [sp, #302]	; 0x12e
   14db0:	cmp	r9, #0
   14db4:	str	r0, [sp, #108]	; 0x6c
   14db8:	ldrb	r0, [sp, #301]	; 0x12d
   14dbc:	str	r0, [sp, #104]	; 0x68
   14dc0:	ldrb	r0, [sp, #300]	; 0x12c
   14dc4:	str	r0, [sp, #100]	; 0x64
   14dc8:	ldrb	r0, [sp, #299]	; 0x12b
   14dcc:	str	r0, [sp, #116]	; 0x74
   14dd0:	ldrb	r0, [sp, #298]	; 0x12a
   14dd4:	str	r0, [sp, #112]	; 0x70
   14dd8:	ldrb	r0, [sp, #297]	; 0x129
   14ddc:	str	r0, [sp, #92]	; 0x5c
   14de0:	beq	15310 <__assert_fail@plt+0x2fd8>
   14de4:	sub	r0, fp, #208	; 0xd0
   14de8:	sub	r7, fp, #104	; 0x68
   14dec:	mov	r1, r5
   14df0:	orr	r0, r0, #3
   14df4:	str	r0, [sp, #44]	; 0x2c
   14df8:	sub	r0, fp, #240	; 0xf0
   14dfc:	orr	r0, r0, #1
   14e00:	str	r0, [sp, #40]	; 0x28
   14e04:	mov	r0, #1
   14e08:	str	r0, [sp, #120]	; 0x78
   14e0c:	mov	r0, #0
   14e10:	str	r0, [sp, #68]	; 0x44
   14e14:	mov	r0, #0
   14e18:	str	r0, [sp, #64]	; 0x40
   14e1c:	mov	r0, #0
   14e20:	str	r0, [sp, #36]	; 0x24
   14e24:	mov	r0, #0
   14e28:	str	r0, [sp, #32]
   14e2c:	mov	r0, ip
   14e30:	str	r1, [sp, #76]	; 0x4c
   14e34:	str	r0, [sp, #80]	; 0x50
   14e38:	ldrb	r1, [r9, #26]
   14e3c:	ldrb	r0, [r9, #28]
   14e40:	str	r6, [sp, #88]	; 0x58
   14e44:	orr	r1, r0, r1
   14e48:	tst	r1, #255	; 0xff
   14e4c:	bne	14e5c <__assert_fail@plt+0x2b24>
   14e50:	ldrb	r1, [r9, #29]
   14e54:	cmp	r1, #0
   14e58:	beq	14e84 <__assert_fail@plt+0x2b4c>
   14e5c:	ldr	r2, [sp, #64]	; 0x40
   14e60:	cmp	r0, #0
   14e64:	clz	r1, r0
   14e68:	movwne	r0, #1
   14e6c:	orr	r2, r2, r0
   14e70:	lsr	r0, r1, #5
   14e74:	ldr	r1, [sp, #68]	; 0x44
   14e78:	str	r2, [sp, #64]	; 0x40
   14e7c:	orr	r1, r1, r0
   14e80:	str	r1, [sp, #68]	; 0x44
   14e84:	ldrb	r0, [r9, #33]	; 0x21
   14e88:	cmp	r0, #0
   14e8c:	beq	14fc0 <__assert_fail@plt+0x2c88>
   14e90:	ldr	r5, [r9]
   14e94:	str	r4, [sp, #52]	; 0x34
   14e98:	ldr	r4, [r9, #8]
   14e9c:	mov	r0, #43	; 0x2b
   14ea0:	mov	r1, #0
   14ea4:	mov	r2, r7
   14ea8:	strh	r0, [fp, #-240]	; 0xffffff10
   14eac:	cmn	r5, #1
   14eb0:	addeq	r5, r5, #1
   14eb4:	mov	r0, r5
   14eb8:	bl	1e320 <__assert_fail@plt+0xbfe8>
   14ebc:	mov	r1, r0
   14ec0:	ldr	r0, [sp, #40]	; 0x28
   14ec4:	mov	r2, #25
   14ec8:	bl	1202c <__stpcpy_chk@plt>
   14ecc:	mov	r6, r0
   14ed0:	movw	r0, #27437	; 0x6b2d
   14ed4:	mov	r1, #0
   14ed8:	mov	r2, r7
   14edc:	movt	r0, #32
   14ee0:	str	r0, [fp, #-208]	; 0xffffff30
   14ee4:	add	r0, r5, #1
   14ee8:	bl	1e320 <__assert_fail@plt+0xbfe8>
   14eec:	mov	r1, r0
   14ef0:	ldr	r0, [sp, #44]	; 0x2c
   14ef4:	mov	r2, #24
   14ef8:	bl	1202c <__stpcpy_chk@plt>
   14efc:	mov	r5, r0
   14f00:	ldr	r0, [r9, #8]
   14f04:	cmn	r0, #1
   14f08:	beq	14f70 <__assert_fail@plt+0x2c38>
   14f0c:	movw	r0, #11552	; 0x2d20
   14f10:	add	sl, r4, #1
   14f14:	mov	r1, #0
   14f18:	mov	r2, r7
   14f1c:	strh	r0, [r6]
   14f20:	mov	r0, #0
   14f24:	strb	r0, [r6, #2]!
   14f28:	mov	r0, sl
   14f2c:	bl	1e320 <__assert_fail@plt+0xbfe8>
   14f30:	mov	r1, r0
   14f34:	mov	r0, r6
   14f38:	bl	11f48 <stpcpy@plt>
   14f3c:	mov	r0, #44	; 0x2c
   14f40:	mov	r1, #0
   14f44:	mov	r2, r7
   14f48:	strh	r0, [r5], #1
   14f4c:	ldr	r0, [r9, #12]
   14f50:	cmn	r0, #1
   14f54:	addeq	sl, r4, #2
   14f58:	mov	r0, sl
   14f5c:	ldr	sl, [sp, #56]	; 0x38
   14f60:	bl	1e320 <__assert_fail@plt+0xbfe8>
   14f64:	mov	r1, r0
   14f68:	mov	r0, r5
   14f6c:	bl	11f48 <stpcpy@plt>
   14f70:	movw	r1, #25584	; 0x63f0
   14f74:	mov	r0, #0
   14f78:	mov	r2, #5
   14f7c:	movt	r1, #2
   14f80:	bl	11f54 <dcgettext@plt>
   14f84:	mov	r5, r0
   14f88:	mov	r0, #0
   14f8c:	sub	r1, fp, #240	; 0xf0
   14f90:	bl	208cc <__assert_fail@plt+0xe594>
   14f94:	mov	r6, r0
   14f98:	mov	r0, #1
   14f9c:	sub	r1, fp, #208	; 0xd0
   14fa0:	bl	208cc <__assert_fail@plt+0xe594>
   14fa4:	str	r0, [sp]
   14fa8:	mov	r0, #0
   14fac:	mov	r1, #0
   14fb0:	mov	r2, r5
   14fb4:	mov	r3, r6
   14fb8:	bl	12080 <error@plt>
   14fbc:	ldr	r4, [sp, #52]	; 0x34
   14fc0:	ldr	r1, [r9]
   14fc4:	mov	r0, #0
   14fc8:	cmn	r1, #1
   14fcc:	beq	1500c <__assert_fail@plt+0x2cd4>
   14fd0:	ldr	r2, [r9, #8]
   14fd4:	cmp	r2, r1
   14fd8:	bcs	1500c <__assert_fail@plt+0x2cd4>
   14fdc:	movw	r1, #25629	; 0x641d
   14fe0:	mov	r0, #0
   14fe4:	mov	r2, #5
   14fe8:	movt	r1, #2
   14fec:	bl	11f54 <dcgettext@plt>
   14ff0:	ldr	r3, [sp, #120]	; 0x78
   14ff4:	mov	r2, r0
   14ff8:	mov	r0, #0
   14ffc:	mov	r1, #0
   15000:	bl	12080 <error@plt>
   15004:	sub	r7, fp, #104	; 0x68
   15008:	mov	r0, #1
   1500c:	ldrb	r2, [r9, #26]
   15010:	mov	r1, #1
   15014:	cmp	r2, #0
   15018:	bne	15040 <__assert_fail@plt+0x2d08>
   1501c:	ldrb	r2, [r9, #28]
   15020:	cmp	r2, #0
   15024:	bne	15040 <__assert_fail@plt+0x2d08>
   15028:	ldrb	r2, [r9, #29]
   1502c:	cmp	r2, #0
   15030:	bne	15040 <__assert_fail@plt+0x2d08>
   15034:	ldrb	r1, [r9, #30]
   15038:	cmp	r1, #0
   1503c:	movwne	r1, #1
   15040:	ldr	r3, [r9, #8]
   15044:	mov	r2, #0
   15048:	cmp	r3, #0
   1504c:	beq	1505c <__assert_fail@plt+0x2d24>
   15050:	cmp	r0, #0
   15054:	beq	15070 <__assert_fail@plt+0x2d38>
   15058:	b	1510c <__assert_fail@plt+0x2dd4>
   1505c:	ldr	r2, [r9, #12]
   15060:	cmp	r2, #0
   15064:	movwne	r2, #1
   15068:	cmp	r0, #0
   1506c:	bne	1510c <__assert_fail@plt+0x2dd4>
   15070:	movw	r0, #33248	; 0x81e0
   15074:	ldr	r3, [sp, #60]	; 0x3c
   15078:	movt	r0, #3
   1507c:	ldr	r0, [r0]
   15080:	subs	r0, r0, #256	; 0x100
   15084:	movwne	r0, #1
   15088:	orr	r0, r3, r0
   1508c:	orrs	r0, r2, r0
   15090:	bne	1510c <__assert_fail@plt+0x2dd4>
   15094:	ldrb	r0, [r9, #24]
   15098:	cmp	r0, #0
   1509c:	mov	r2, r0
   150a0:	movwne	r2, #1
   150a4:	orr	r1, r1, r2
   150a8:	cmp	r1, #1
   150ac:	bne	150e0 <__assert_fail@plt+0x2da8>
   150b0:	cmp	r0, #0
   150b4:	beq	150d4 <__assert_fail@plt+0x2d9c>
   150b8:	ldrb	r0, [r9, #25]
   150bc:	cmp	r0, #0
   150c0:	bne	1510c <__assert_fail@plt+0x2dd4>
   150c4:	ldr	r0, [r9, #12]
   150c8:	cmp	r0, #0
   150cc:	bne	150e0 <__assert_fail@plt+0x2da8>
   150d0:	b	1510c <__assert_fail@plt+0x2dd4>
   150d4:	ldr	r0, [r9, #4]
   150d8:	cmp	r0, #0
   150dc:	beq	150b8 <__assert_fail@plt+0x2d80>
   150e0:	movw	r1, #25672	; 0x6448
   150e4:	mov	r0, #0
   150e8:	mov	r2, #5
   150ec:	movt	r1, #2
   150f0:	bl	11f54 <dcgettext@plt>
   150f4:	ldr	r3, [sp, #120]	; 0x78
   150f8:	mov	r2, r0
   150fc:	mov	r0, #0
   15100:	mov	r1, #0
   15104:	bl	12080 <error@plt>
   15108:	sub	r7, fp, #104	; 0x68
   1510c:	ldr	r0, [sp, #60]	; 0x3c
   15110:	cmp	r0, #0
   15114:	bne	151ac <__assert_fail@plt+0x2e74>
   15118:	ldrb	r0, [r9, #26]
   1511c:	cmp	r0, #0
   15120:	bne	1513c <__assert_fail@plt+0x2e04>
   15124:	ldrb	r0, [r9, #28]
   15128:	cmp	r0, #0
   1512c:	bne	1513c <__assert_fail@plt+0x2e04>
   15130:	ldrb	r0, [r9, #29]
   15134:	cmp	r0, #0
   15138:	beq	151ac <__assert_fail@plt+0x2e74>
   1513c:	ldr	r0, [r9]
   15140:	ldr	r1, [r9, #8]
   15144:	adds	r2, r0, #1
   15148:	addeq	r2, r0, #2
   1514c:	cmp	r1, r2
   15150:	bcc	151ac <__assert_fail@plt+0x2e74>
   15154:	movw	r1, #25744	; 0x6490
   15158:	mov	r0, #0
   1515c:	mov	r2, #5
   15160:	movt	r1, #2
   15164:	bl	11f54 <dcgettext@plt>
   15168:	ldr	r3, [sp, #120]	; 0x78
   1516c:	mov	r2, r0
   15170:	mov	r0, #0
   15174:	mov	r1, #0
   15178:	bl	12080 <error@plt>
   1517c:	ldrb	r0, [r9, #28]
   15180:	ldr	r2, [sp, #32]
   15184:	sub	r7, fp, #104	; 0x68
   15188:	cmp	r0, #0
   1518c:	clz	r1, r0
   15190:	movwne	r0, #1
   15194:	orr	r2, r2, r0
   15198:	lsr	r0, r1, #5
   1519c:	ldr	r1, [sp, #36]	; 0x24
   151a0:	str	r2, [sp, #32]
   151a4:	orr	r1, r1, r0
   151a8:	str	r1, [sp, #36]	; 0x24
   151ac:	ldr	r2, [sp, #76]	; 0x4c
   151b0:	ldr	r1, [sp, #80]	; 0x50
   151b4:	mov	ip, #0
   151b8:	mov	r5, #0
   151bc:	cmp	r2, #0
   151c0:	beq	151d0 <__assert_fail@plt+0x2e98>
   151c4:	ldr	r0, [r9, #16]
   151c8:	subs	r5, r2, r0
   151cc:	movne	r5, r2
   151d0:	cmp	r1, #0
   151d4:	beq	151e4 <__assert_fail@plt+0x2eac>
   151d8:	ldr	r0, [r9, #20]
   151dc:	subs	ip, r1, r0
   151e0:	movne	ip, r1
   151e4:	ldrb	r3, [r9, #27]
   151e8:	ldr	r6, [sp, #116]	; 0x74
   151ec:	ldrb	r0, [r9, #31]
   151f0:	ldrb	r2, [r9, #26]
   151f4:	ldr	r1, [sp, #96]	; 0x60
   151f8:	eor	r3, r3, #1
   151fc:	eor	r0, r0, #1
   15200:	eor	r2, r2, #1
   15204:	and	r6, r3, r6
   15208:	ldrb	r3, [r9, #29]
   1520c:	and	r4, r0, r4
   15210:	ldrb	r0, [r9, #32]
   15214:	str	r6, [sp, #116]	; 0x74
   15218:	ldr	r6, [sp, #104]	; 0x68
   1521c:	eor	r3, r3, #1
   15220:	eor	r0, r0, #1
   15224:	and	r6, r3, r6
   15228:	ldrb	r3, [r9, #28]
   1522c:	and	r1, r0, r1
   15230:	ldrb	r0, [r9, #24]
   15234:	str	r6, [sp, #104]	; 0x68
   15238:	ldr	r6, [sp, #100]	; 0x64
   1523c:	str	r1, [sp, #96]	; 0x60
   15240:	ldrb	r1, [r9, #25]
   15244:	eor	r3, r3, #1
   15248:	eor	r0, r0, #1
   1524c:	and	r6, r3, r6
   15250:	ldr	r3, [sp, #112]	; 0x70
   15254:	eor	r1, r1, #1
   15258:	str	r6, [sp, #100]	; 0x64
   1525c:	ldr	r6, [sp, #88]	; 0x58
   15260:	and	r3, r2, r3
   15264:	ldrb	r2, [r9, #30]
   15268:	ldr	r9, [r9, #36]	; 0x24
   1526c:	str	r3, [sp, #112]	; 0x70
   15270:	ldr	r3, [sp, #108]	; 0x6c
   15274:	and	r6, r0, r6
   15278:	ldr	r0, [sp, #120]	; 0x78
   1527c:	eor	r2, r2, #1
   15280:	cmp	r9, #0
   15284:	and	r3, r2, r3
   15288:	ldr	r2, [sp, #92]	; 0x5c
   1528c:	add	r0, r0, #1
   15290:	str	r0, [sp, #120]	; 0x78
   15294:	mov	r0, ip
   15298:	str	r3, [sp, #108]	; 0x6c
   1529c:	and	r2, r1, r2
   152a0:	mov	r1, r5
   152a4:	str	r2, [sp, #92]	; 0x5c
   152a8:	bne	14e30 <__assert_fail@plt+0x2af8>
   152ac:	ldr	r0, [sp, #36]	; 0x24
   152b0:	ldr	r3, [sp, #20]
   152b4:	ldr	r7, [sp, #124]	; 0x7c
   152b8:	str	r6, [sp, #88]	; 0x58
   152bc:	str	r4, [sp, #52]	; 0x34
   152c0:	tst	r0, #1
   152c4:	beq	15340 <__assert_fail@plt+0x3008>
   152c8:	movw	r0, #33508	; 0x82e4
   152cc:	mov	r9, #0
   152d0:	movt	r0, #3
   152d4:	ldr	r1, [r0]
   152d8:	movw	r0, #33248	; 0x81e0
   152dc:	movt	r0, #3
   152e0:	ldr	r0, [r0]
   152e4:	cmp	r0, #256	; 0x100
   152e8:	bne	15354 <__assert_fail@plt+0x301c>
   152ec:	cmp	r1, #256	; 0x100
   152f0:	beq	153e4 <__assert_fail@plt+0x30ac>
   152f4:	ldr	r0, [r8]
   152f8:	uxtb	r1, r1
   152fc:	mov	r9, #0
   15300:	ldrb	r0, [r0, r1, lsl #1]
   15304:	tst	r0, #1
   15308:	bne	1535c <__assert_fail@plt+0x3024>
   1530c:	b	153bc <__assert_fail@plt+0x3084>
   15310:	ldr	r3, [sp, #20]
   15314:	ldr	r7, [sp, #124]	; 0x7c
   15318:	str	r4, [sp, #52]	; 0x34
   1531c:	movw	r4, #33506	; 0x82e2
   15320:	str	r6, [sp, #88]	; 0x58
   15324:	mov	r1, #0
   15328:	mov	r0, #0
   1532c:	mov	r9, #0
   15330:	movt	r4, #3
   15334:	cmp	r9, #0
   15338:	beq	1553c <__assert_fail@plt+0x3204>
   1533c:	b	155f4 <__assert_fail@plt+0x32bc>
   15340:	ldr	r0, [sp, #32]
   15344:	mov	r9, #0
   15348:	tst	r0, #1
   1534c:	bne	153bc <__assert_fail@plt+0x3084>
   15350:	b	153e4 <__assert_fail@plt+0x30ac>
   15354:	cmp	r0, r1
   15358:	bne	153f0 <__assert_fail@plt+0x30b8>
   1535c:	movw	r1, #25789	; 0x64bd
   15360:	mov	r0, #0
   15364:	mov	r2, #5
   15368:	mov	sl, #0
   1536c:	mov	r6, ip
   15370:	movt	r1, #2
   15374:	bl	11f54 <dcgettext@plt>
   15378:	mov	r4, r0
   1537c:	movw	r0, #33508	; 0x82e4
   15380:	strb	sl, [fp, #-239]	; 0xffffff11
   15384:	ldr	sl, [sp, #56]	; 0x38
   15388:	movt	r0, #3
   1538c:	ldr	r0, [r0]
   15390:	strb	r0, [fp, #-240]	; 0xffffff10
   15394:	sub	r0, fp, #240	; 0xf0
   15398:	bl	208dc <__assert_fail@plt+0xe5a4>
   1539c:	mov	r3, r0
   153a0:	mov	r0, #0
   153a4:	mov	r1, #0
   153a8:	mov	r2, r4
   153ac:	bl	12080 <error@plt>
   153b0:	ldr	r3, [sp, #20]
   153b4:	mov	ip, r6
   153b8:	mov	r9, #1
   153bc:	movw	r0, #33248	; 0x81e0
   153c0:	movt	r0, #3
   153c4:	ldr	r0, [r0]
   153c8:	cmp	r0, #256	; 0x100
   153cc:	bne	153f0 <__assert_fail@plt+0x30b8>
   153d0:	movw	r0, #33508	; 0x82e4
   153d4:	movt	r0, #3
   153d8:	ldr	r0, [r0]
   153dc:	cmp	r0, #256	; 0x100
   153e0:	bne	1541c <__assert_fail@plt+0x30e4>
   153e4:	movw	r4, #33506	; 0x82e2
   153e8:	movt	r4, #3
   153ec:	b	1552c <__assert_fail@plt+0x31f4>
   153f0:	movw	r4, #33506	; 0x82e2
   153f4:	movt	r4, #3
   153f8:	ldrb	r1, [r4]
   153fc:	cmp	r0, r1
   15400:	beq	1543c <__assert_fail@plt+0x3104>
   15404:	cmp	r0, #45	; 0x2d
   15408:	bne	154a4 <__assert_fail@plt+0x316c>
   1540c:	movw	r1, #25911	; 0x6537
   15410:	mov	r8, #0
   15414:	movt	r1, #2
   15418:	b	154cc <__assert_fail@plt+0x3194>
   1541c:	movw	r0, #33506	; 0x82e2
   15420:	ldr	r1, [r8]
   15424:	movt	r0, #3
   15428:	mov	r4, r0
   1542c:	ldrb	r0, [r0]
   15430:	ldrb	r0, [r1, r0, lsl #1]
   15434:	tst	r0, #1
   15438:	beq	1552c <__assert_fail@plt+0x31f4>
   1543c:	movw	r1, #25851	; 0x64fb
   15440:	mov	r0, #0
   15444:	mov	r2, #5
   15448:	mov	r8, #0
   1544c:	mov	r6, ip
   15450:	movt	r1, #2
   15454:	bl	11f54 <dcgettext@plt>
   15458:	mov	r9, r7
   1545c:	mov	r7, r0
   15460:	ldrb	r0, [r4]
   15464:	strb	r8, [fp, #-103]	; 0xffffff99
   15468:	strb	r0, [fp, #-104]	; 0xffffff98
   1546c:	sub	r0, fp, #104	; 0x68
   15470:	bl	208dc <__assert_fail@plt+0xe5a4>
   15474:	ldr	sl, [sp, #56]	; 0x38
   15478:	mov	r3, r0
   1547c:	mov	r2, r7
   15480:	mov	r0, #0
   15484:	mov	r1, #0
   15488:	mov	r7, r9
   1548c:	bl	12080 <error@plt>
   15490:	ldr	r0, [sp, #68]	; 0x44
   15494:	ldr	r3, [sp, #20]
   15498:	mov	ip, r6
   1549c:	tst	r0, #1
   154a0:	b	155f8 <__assert_fail@plt+0x32c0>
   154a4:	ldr	r1, [sp, #32]
   154a8:	subs	r0, r0, #43	; 0x2b
   154ac:	movwne	r0, #1
   154b0:	mvn	r1, r1
   154b4:	orr	r0, r1, r0
   154b8:	tst	r0, #1
   154bc:	bne	1552c <__assert_fail@plt+0x31f4>
   154c0:	movw	r1, #25968	; 0x6570
   154c4:	mov	r8, #0
   154c8:	movt	r1, #2
   154cc:	mov	r0, #0
   154d0:	mov	r2, #5
   154d4:	mov	r6, ip
   154d8:	bl	11f54 <dcgettext@plt>
   154dc:	mov	sl, r7
   154e0:	mov	r7, r0
   154e4:	movw	r0, #33248	; 0x81e0
   154e8:	movw	r4, #33506	; 0x82e2
   154ec:	strb	r8, [fp, #-103]	; 0xffffff99
   154f0:	movt	r0, #3
   154f4:	movt	r4, #3
   154f8:	ldr	r0, [r0]
   154fc:	strb	r0, [fp, #-104]	; 0xffffff98
   15500:	sub	r0, fp, #104	; 0x68
   15504:	bl	208dc <__assert_fail@plt+0xe5a4>
   15508:	mov	r2, r7
   1550c:	mov	r7, sl
   15510:	ldr	sl, [sp, #56]	; 0x38
   15514:	mov	r3, r0
   15518:	mov	r0, #0
   1551c:	mov	r1, #0
   15520:	bl	12080 <error@plt>
   15524:	ldr	r3, [sp, #20]
   15528:	mov	ip, r6
   1552c:	ldr	r1, [sp, #68]	; 0x44
   15530:	ldr	r0, [sp, #64]	; 0x40
   15534:	cmp	r9, #0
   15538:	bne	155f4 <__assert_fail@plt+0x32bc>
   1553c:	orr	r0, r1, r0
   15540:	tst	r0, #1
   15544:	beq	155f4 <__assert_fail@plt+0x32bc>
   15548:	mov	sl, r1
   1554c:	movw	r1, #26024	; 0x65a8
   15550:	mov	r0, #0
   15554:	mov	r2, #5
   15558:	mov	r6, ip
   1555c:	mov	r8, r7
   15560:	movt	r1, #2
   15564:	bl	11f54 <dcgettext@plt>
   15568:	movw	r1, #33248	; 0x81e0
   1556c:	mov	r7, r0
   15570:	ldrb	r0, [r4]
   15574:	ldr	r9, [sp, #72]	; 0x48
   15578:	movt	r1, #3
   1557c:	ldr	r1, [r1]
   15580:	cmp	r1, r0
   15584:	beq	155a4 <__assert_fail@plt+0x326c>
   15588:	movw	r1, #26075	; 0x65db
   1558c:	mov	r0, #0
   15590:	mov	r2, #5
   15594:	movt	r1, #2
   15598:	bl	11f54 <dcgettext@plt>
   1559c:	str	r0, [sp, #16]
   155a0:	ldrb	r0, [r4]
   155a4:	mov	r1, #0
   155a8:	strb	r1, [fp, #-243]	; 0xffffff0d
   155ac:	strb	r0, [fp, #-244]	; 0xffffff0c
   155b0:	sub	r0, fp, #244	; 0xf4
   155b4:	bl	208dc <__assert_fail@plt+0xe5a4>
   155b8:	ldr	r3, [sp, #16]
   155bc:	str	r0, [sp]
   155c0:	mov	r0, #0
   155c4:	mov	r1, #0
   155c8:	mov	r2, r7
   155cc:	bl	12080 <error@plt>
   155d0:	tst	sl, #1
   155d4:	mov	r7, r8
   155d8:	ldr	sl, [sp, #56]	; 0x38
   155dc:	ldr	r3, [sp, #20]
   155e0:	ldr	r4, [sp, #52]	; 0x34
   155e4:	ldr	r8, [sp, #96]	; 0x60
   155e8:	mov	ip, r6
   155ec:	bne	15608 <__assert_fail@plt+0x32d0>
   155f0:	b	1564c <__assert_fail@plt+0x3314>
   155f4:	tst	r1, #1
   155f8:	ldr	r9, [sp, #72]	; 0x48
   155fc:	ldr	r4, [sp, #52]	; 0x34
   15600:	ldr	r8, [sp, #96]	; 0x60
   15604:	beq	1564c <__assert_fail@plt+0x3314>
   15608:	movw	r0, #33512	; 0x82e8
   1560c:	movt	r0, #3
   15610:	ldrb	r0, [r0]
   15614:	cmp	r0, #1
   15618:	bne	1564c <__assert_fail@plt+0x3314>
   1561c:	movw	r1, #26081	; 0x65e1
   15620:	mov	r0, #0
   15624:	mov	r2, #5
   15628:	mov	r6, ip
   1562c:	movt	r1, #2
   15630:	bl	11f54 <dcgettext@plt>
   15634:	mov	r2, r0
   15638:	mov	r0, #0
   1563c:	mov	r1, #0
   15640:	bl	12080 <error@plt>
   15644:	ldr	r3, [sp, #20]
   15648:	mov	ip, r6
   1564c:	ldr	r0, [sp, #92]	; 0x5c
   15650:	ldr	r1, [sp, #88]	; 0x58
   15654:	cmp	ip, #0
   15658:	cmpeq	r5, #0
   1565c:	orr	r0, r1, r0
   15660:	beq	15698 <__assert_fail@plt+0x3360>
   15664:	movw	r1, #33654	; 0x8376
   15668:	movw	r2, #33653	; 0x8375
   1566c:	movt	r1, #3
   15670:	movt	r2, #3
   15674:	ldrb	r1, [r1]
   15678:	ldrb	r2, [r2]
   1567c:	tst	r0, #255	; 0xff
   15680:	beq	15740 <__assert_fail@plt+0x3408>
   15684:	mov	r0, #98	; 0x62
   15688:	strb	r0, [fp, #-208]	; 0xffffff30
   1568c:	sub	r0, fp, #208	; 0xd0
   15690:	add	r0, r0, #1
   15694:	b	15744 <__assert_fail@plt+0x340c>
   15698:	ldr	r1, [sp, #108]	; 0x6c
   1569c:	ldr	r2, [sp, #104]	; 0x68
   156a0:	orr	r1, r1, r8
   156a4:	orr	r1, r1, r2
   156a8:	ldr	r2, [sp, #100]	; 0x64
   156ac:	orr	r1, r1, r2
   156b0:	ldr	r2, [sp, #116]	; 0x74
   156b4:	orr	r1, r1, r2
   156b8:	ldr	r2, [sp, #112]	; 0x70
   156bc:	orr	r1, r1, r2
   156c0:	orr	r1, r1, r0
   156c4:	tst	r1, #255	; 0xff
   156c8:	bne	15664 <__assert_fail@plt+0x332c>
   156cc:	tst	r4, #255	; 0xff
   156d0:	beq	158ac <__assert_fail@plt+0x3574>
   156d4:	movw	r1, #33653	; 0x8375
   156d8:	movt	r1, #3
   156dc:	ldrb	r1, [r1]
   156e0:	cmp	r1, #0
   156e4:	beq	15708 <__assert_fail@plt+0x33d0>
   156e8:	movw	r0, #33656	; 0x8378
   156ec:	movt	r0, #3
   156f0:	ldr	r0, [r0]
   156f4:	cmp	r0, #0
   156f8:	beq	158ac <__assert_fail@plt+0x3574>
   156fc:	sub	r0, fp, #208	; 0xd0
   15700:	mov	r5, r0
   15704:	b	157e0 <__assert_fail@plt+0x34a8>
   15708:	movw	r2, #33654	; 0x8376
   1570c:	movw	r1, #33656	; 0x8378
   15710:	movt	r2, #3
   15714:	movt	r1, #3
   15718:	ldrb	r2, [r2]
   1571c:	ldr	r1, [r1]
   15720:	cmp	r2, #1
   15724:	bne	15874 <__assert_fail@plt+0x353c>
   15728:	cmp	r1, #0
   1572c:	beq	15874 <__assert_fail@plt+0x353c>
   15730:	mov	r2, #0
   15734:	mov	r1, #1
   15738:	tst	r0, #255	; 0xff
   1573c:	bne	15684 <__assert_fail@plt+0x334c>
   15740:	sub	r0, fp, #208	; 0xd0
   15744:	movw	r3, #34184	; 0x8588
   15748:	movt	r3, #3
   1574c:	cmp	r5, r3
   15750:	moveq	r3, #100	; 0x64
   15754:	strbeq	r3, [r0], #1
   15758:	cmp	ip, #0
   1575c:	movne	r3, #102	; 0x66
   15760:	strbne	r3, [r0], #1
   15764:	ldr	r3, [sp, #100]	; 0x64
   15768:	tst	r3, #255	; 0xff
   1576c:	movne	r3, #103	; 0x67
   15770:	strbne	r3, [r0], #1
   15774:	ldr	r3, [sp, #104]	; 0x68
   15778:	tst	r3, #255	; 0xff
   1577c:	movne	r3, #104	; 0x68
   15780:	strbne	r3, [r0], #1
   15784:	movw	r3, #33928	; 0x8488
   15788:	movt	r3, #3
   1578c:	cmp	r5, r3
   15790:	sub	r5, fp, #208	; 0xd0
   15794:	moveq	r3, #105	; 0x69
   15798:	strbeq	r3, [r0], #1
   1579c:	ldr	r3, [sp, #108]	; 0x6c
   157a0:	tst	r3, #255	; 0xff
   157a4:	movne	r3, #77	; 0x4d
   157a8:	strbne	r3, [r0], #1
   157ac:	ldr	r3, [sp, #112]	; 0x70
   157b0:	tst	r3, #255	; 0xff
   157b4:	movne	r3, #110	; 0x6e
   157b8:	strbne	r3, [r0], #1
   157bc:	ldr	r3, [sp, #116]	; 0x74
   157c0:	tst	r3, #255	; 0xff
   157c4:	movne	r3, #82	; 0x52
   157c8:	strbne	r3, [r0], #1
   157cc:	tst	r4, #255	; 0xff
   157d0:	beq	157e8 <__assert_fail@plt+0x34b0>
   157d4:	orr	r1, r1, r2
   157d8:	eors	r1, r1, #1
   157dc:	bne	157e8 <__assert_fail@plt+0x34b0>
   157e0:	mov	r1, #114	; 0x72
   157e4:	strb	r1, [r0], #1
   157e8:	tst	r8, #255	; 0xff
   157ec:	movne	r1, #86	; 0x56
   157f0:	strbne	r1, [r0], #1
   157f4:	mov	r1, #0
   157f8:	strb	r1, [r0]
   157fc:	mov	r0, r5
   15800:	bl	12140 <strlen@plt>
   15804:	movw	r1, #26151	; 0x6627
   15808:	movw	r2, #26175	; 0x663f
   1580c:	mov	r3, r0
   15810:	mov	r0, #5
   15814:	str	r0, [sp]
   15818:	movt	r1, #2
   1581c:	movt	r2, #2
   15820:	mov	r0, #0
   15824:	bl	1232c <dcngettext@plt>
   15828:	mov	r2, r0
   1582c:	mov	r0, #0
   15830:	mov	r1, #0
   15834:	mov	r3, r5
   15838:	bl	12080 <error@plt>
   1583c:	ldr	r3, [sp, #20]
   15840:	tst	r4, #255	; 0xff
   15844:	beq	158ac <__assert_fail@plt+0x3574>
   15848:	movw	r0, #33653	; 0x8375
   1584c:	movt	r0, #3
   15850:	ldrb	r0, [r0]
   15854:	cmp	r0, #0
   15858:	bne	158ac <__assert_fail@plt+0x3574>
   1585c:	movw	r0, #33656	; 0x8378
   15860:	movt	r0, #3
   15864:	ldr	r1, [r0]
   15868:	movw	r0, #33654	; 0x8376
   1586c:	movt	r0, #3
   15870:	ldrb	r2, [r0]
   15874:	cmp	r1, #0
   15878:	beq	158ac <__assert_fail@plt+0x3574>
   1587c:	cmp	r2, #0
   15880:	bne	158ac <__assert_fail@plt+0x3574>
   15884:	movw	r1, #26201	; 0x6659
   15888:	mov	r0, #0
   1588c:	mov	r2, #5
   15890:	movt	r1, #2
   15894:	bl	11f54 <dcgettext@plt>
   15898:	mov	r2, r0
   1589c:	mov	r0, #0
   158a0:	mov	r1, #0
   158a4:	bl	12080 <error@plt>
   158a8:	ldr	r3, [sp, #20]
   158ac:	ldr	r6, [sp, #84]	; 0x54
   158b0:	ldr	r5, [sp, #48]	; 0x30
   158b4:	ldrb	r0, [sp, #303]	; 0x12f
   158b8:	movw	r1, #33660	; 0x837c
   158bc:	cmp	r3, #0
   158c0:	movt	r1, #3
   158c4:	strb	r0, [r1]
   158c8:	beq	15920 <__assert_fail@plt+0x35e8>
   158cc:	ldr	r0, [sp, #28]
   158d0:	mov	r1, #16
   158d4:	bl	20a14 <__assert_fail@plt+0xe6dc>
   158d8:	cmp	r0, #0
   158dc:	beq	16700 <__assert_fail@plt+0x43c8>
   158e0:	sub	r1, fp, #208	; 0xd0
   158e4:	mov	r2, #16
   158e8:	mov	r4, r0
   158ec:	bl	20b8c <__assert_fail@plt+0xe854>
   158f0:	mov	r0, r4
   158f4:	bl	20ce4 <__assert_fail@plt+0xe9ac>
   158f8:	cmp	r0, #0
   158fc:	bne	1672c <__assert_fail@plt+0x43f4>
   15900:	movw	r4, #34816	; 0x8800
   15904:	movt	r4, #3
   15908:	mov	r0, r4
   1590c:	bl	1b880 <__assert_fail@plt+0x9548>
   15910:	sub	r0, fp, #208	; 0xd0
   15914:	mov	r1, #16
   15918:	mov	r2, r4
   1591c:	bl	1c4e0 <__assert_fail@plt+0xa1a8>
   15920:	movw	r4, #33664	; 0x8380
   15924:	movt	r4, #3
   15928:	ldr	r0, [r4]
   1592c:	cmp	r0, #0
   15930:	beq	161a0 <__assert_fail@plt+0x3e68>
   15934:	cmp	sl, #0
   15938:	beq	1622c <__assert_fail@plt+0x3ef4>
   1593c:	movw	r2, #33668	; 0x8384
   15940:	movt	r2, #3
   15944:	ldr	r0, [r2]
   15948:	cmp	r0, #0
   1594c:	beq	1596c <__assert_fail@plt+0x3634>
   15950:	movw	r1, #33264	; 0x81f0
   15954:	movt	r1, #3
   15958:	ldr	r1, [r1]
   1595c:	add	r1, r1, r1, lsl #3
   15960:	cmp	r0, r1, lsl #1
   15964:	lslls	r0, r1, #1
   15968:	str	r0, [r2]
   1596c:	tst	r6, #255	; 0xff
   15970:	bne	165e8 <__assert_fail@plt+0x42b0>
   15974:	movw	r4, #25582	; 0x63ee
   15978:	mov	r8, r5
   1597c:	mov	r6, #0
   15980:	movt	r4, #2
   15984:	ldr	r5, [r7, r6, lsl #2]
   15988:	mov	r1, r4
   1598c:	mov	r0, r5
   15990:	bl	11e28 <strcmp@plt>
   15994:	cmp	r0, #0
   15998:	beq	159b0 <__assert_fail@plt+0x3678>
   1599c:	mov	r0, r5
   159a0:	mov	r1, #4
   159a4:	bl	122b4 <euidaccess@plt>
   159a8:	cmp	r0, #0
   159ac:	bne	16310 <__assert_fail@plt+0x3fd8>
   159b0:	add	r6, r6, #1
   159b4:	cmp	r6, sl
   159b8:	bcc	15984 <__assert_fail@plt+0x364c>
   159bc:	cmp	r9, #0
   159c0:	beq	15a00 <__assert_fail@plt+0x36c8>
   159c4:	movw	r1, #65	; 0x41
   159c8:	mov	r0, r9
   159cc:	movw	r2, #438	; 0x1b6
   159d0:	movt	r1, #8
   159d4:	bl	1208c <open64@plt>
   159d8:	cmn	r0, #1
   159dc:	ble	16330 <__assert_fail@plt+0x3ff8>
   159e0:	mov	r4, r0
   159e4:	cmp	r0, #1
   159e8:	beq	15a00 <__assert_fail@plt+0x36c8>
   159ec:	mov	r0, r4
   159f0:	mov	r1, #1
   159f4:	bl	11f84 <dup2@plt>
   159f8:	mov	r0, r4
   159fc:	bl	12320 <close@plt>
   15a00:	tst	r8, #1
   15a04:	beq	15a40 <__assert_fail@plt+0x3708>
   15a08:	mov	r0, sl
   15a0c:	mov	r1, #8
   15a10:	bl	2261c <__assert_fail@plt+0x102e4>
   15a14:	mov	r1, #0
   15a18:	ldr	r2, [r7, r1, lsl #2]
   15a1c:	str	r2, [r0, r1, lsl #3]
   15a20:	add	r1, r1, #1
   15a24:	cmp	r1, sl
   15a28:	bcc	15a18 <__assert_fail@plt+0x36e0>
   15a2c:	mov	r1, #0
   15a30:	mov	r2, sl
   15a34:	mov	r3, r9
   15a38:	bl	16da8 <__assert_fail@plt+0x4a70>
   15a3c:	b	1615c <__assert_fail@plt+0x3e24>
   15a40:	ldr	r0, [sp, #24]
   15a44:	cmp	r0, #0
   15a48:	bne	15a5c <__assert_fail@plt+0x3724>
   15a4c:	mov	r0, #2
   15a50:	bl	1e738 <__assert_fail@plt+0xc400>
   15a54:	cmp	r0, #8
   15a58:	movcs	r0, #8
   15a5c:	mov	r1, #0
   15a60:	movw	r8, #7281	; 0x1c71
   15a64:	mvn	r2, r0
   15a68:	movw	r5, #34984	; 0x88a8
   15a6c:	vmov.f64	d9, #104	; 0x3f400000  0.750
   15a70:	vmov.f64	d10, #64	; 0x3e000000  0.125
   15a74:	vmov.i32	q6, #0	; 0x00000000
   15a78:	str	r1, [fp, #-228]	; 0xffffff1c
   15a7c:	movw	r1, #58254	; 0xe38e
   15a80:	movt	r8, #455	; 0x1c7
   15a84:	movt	r5, #3
   15a88:	movt	r1, #65080	; 0xfe38
   15a8c:	cmp	r2, r1
   15a90:	movhi	r1, r2
   15a94:	cmp	r0, r8
   15a98:	mov	r2, #2
   15a9c:	movcc	r8, r0
   15aa0:	add	r1, r2, r1, lsl #1
   15aa4:	add	r0, r8, r8, lsl #3
   15aa8:	str	r1, [sp, #64]	; 0x40
   15aac:	str	r8, [sp, #96]	; 0x60
   15ab0:	lsl	r0, r0, #4
   15ab4:	str	r0, [sp, #76]	; 0x4c
   15ab8:	sub	r0, fp, #208	; 0xd0
   15abc:	add	r1, r0, #48	; 0x30
   15ac0:	str	r1, [sp, #60]	; 0x3c
   15ac4:	add	r1, r0, #32
   15ac8:	orr	r0, r0, #4
   15acc:	str	r0, [sp, #88]	; 0x58
   15ad0:	lsl	r0, r8, #1
   15ad4:	str	r1, [sp, #92]	; 0x5c
   15ad8:	movw	r1, #24854	; 0x6116
   15adc:	str	r0, [sp, #68]	; 0x44
   15ae0:	mov	r0, #0
   15ae4:	movt	r1, #2
   15ae8:	str	r0, [sp, #100]	; 0x64
   15aec:	mov	r0, #0
   15af0:	str	r0, [sp, #108]	; 0x6c
   15af4:	ldr	r0, [r7]
   15af8:	str	r0, [sp, #104]	; 0x68
   15afc:	bl	17428 <__assert_fail@plt+0x50f0>
   15b00:	cmp	r0, #0
   15b04:	str	r0, [sp, #112]	; 0x70
   15b08:	beq	165cc <__assert_fail@plt+0x4294>
   15b0c:	mov	r2, #24
   15b10:	cmp	r8, #2
   15b14:	bcc	15b34 <__assert_fail@plt+0x37fc>
   15b18:	mov	r0, #1
   15b1c:	mov	r2, #16
   15b20:	lsl	r1, r0, #1
   15b24:	cmp	r8, r0, lsl #1
   15b28:	add	r2, r2, #16
   15b2c:	mov	r0, r1
   15b30:	bhi	15b20 <__assert_fail@plt+0x37e8>
   15b34:	orr	r0, r2, #1
   15b38:	str	r2, [sp, #80]	; 0x50
   15b3c:	str	r0, [sp, #116]	; 0x74
   15b40:	ldr	r0, [fp, #-228]	; 0xffffff1c
   15b44:	cmp	r0, #0
   15b48:	bne	15e08 <__assert_fail@plt+0x3ad0>
   15b4c:	orr	r5, r2, #2
   15b50:	mov	r6, #0
   15b54:	str	r7, [sp, #124]	; 0x7c
   15b58:	cmp	r6, #0
   15b5c:	beq	15b98 <__assert_fail@plt+0x3860>
   15b60:	ldr	r4, [r7, r6, lsl #2]
   15b64:	movw	r1, #25582	; 0x63ee
   15b68:	movt	r1, #2
   15b6c:	mov	r0, r4
   15b70:	bl	11e28 <strcmp@plt>
   15b74:	cmp	r0, #0
   15b78:	beq	15bac <__assert_fail@plt+0x3874>
   15b7c:	mov	r0, #3
   15b80:	mov	r1, r4
   15b84:	sub	r2, fp, #208	; 0xd0
   15b88:	bl	122f0 <__xstat64@plt>
   15b8c:	cmp	r0, #0
   15b90:	beq	15bc4 <__assert_fail@plt+0x388c>
   15b94:	b	1634c <__assert_fail@plt+0x4014>
   15b98:	ldr	r0, [sp, #112]	; 0x70
   15b9c:	bl	121b8 <fileno@plt>
   15ba0:	mov	r1, r0
   15ba4:	mov	r0, #3
   15ba8:	b	15bb4 <__assert_fail@plt+0x387c>
   15bac:	mov	r0, #3
   15bb0:	mov	r1, #0
   15bb4:	sub	r2, fp, #208	; 0xd0
   15bb8:	bl	11ff0 <__fxstat64@plt>
   15bbc:	cmp	r0, #0
   15bc0:	bne	1634c <__assert_fail@plt+0x4014>
   15bc4:	ldr	r0, [fp, #-192]	; 0xffffff40
   15bc8:	movw	r1, #33668	; 0x8384
   15bcc:	mov	r7, sl
   15bd0:	sub	sl, fp, #104	; 0x68
   15bd4:	movt	r1, #3
   15bd8:	and	r0, r0, #61440	; 0xf000
   15bdc:	cmp	r0, #32768	; 0x8000
   15be0:	bne	15bf0 <__assert_fail@plt+0x38b8>
   15be4:	ldr	r0, [sp, #60]	; 0x3c
   15be8:	ldm	r0, {r4, r9}
   15bec:	b	15c04 <__assert_fail@plt+0x38cc>
   15bf0:	ldr	r0, [r1]
   15bf4:	cmp	r0, #0
   15bf8:	bne	15da0 <__assert_fail@plt+0x3a68>
   15bfc:	mov	r9, #0
   15c00:	mov	r4, #131072	; 0x20000
   15c04:	movw	r0, #35000	; 0x88b8
   15c08:	movt	r0, #3
   15c0c:	ldr	r0, [r0]
   15c10:	cmp	r0, #0
   15c14:	bne	15d54 <__assert_fail@plt+0x3a1c>
   15c18:	ldr	r0, [r1]
   15c1c:	movw	r1, #35000	; 0x88b8
   15c20:	movt	r1, #3
   15c24:	cmp	r0, #0
   15c28:	str	r0, [r1]
   15c2c:	bne	15d54 <__assert_fail@plt+0x3a1c>
   15c30:	mov	r0, #2
   15c34:	mov	r1, sl
   15c38:	bl	11f90 <getrlimit64@plt>
   15c3c:	mvn	r8, #0
   15c40:	cmp	r0, #0
   15c44:	bne	15c60 <__assert_fail@plt+0x3928>
   15c48:	ldr	r8, [fp, #-104]	; 0xffffff98
   15c4c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15c50:	mvn	r2, #0
   15c54:	subs	r1, r8, r2
   15c58:	sbcs	r0, r0, #0
   15c5c:	movcs	r8, r2
   15c60:	mov	r0, #9
   15c64:	mov	r1, sl
   15c68:	bl	11f90 <getrlimit64@plt>
   15c6c:	cmp	r0, #0
   15c70:	bne	15c88 <__assert_fail@plt+0x3950>
   15c74:	ldr	r0, [fp, #-104]	; 0xffffff98
   15c78:	ldr	r1, [fp, #-100]	; 0xffffff9c
   15c7c:	subs	r2, r0, r8
   15c80:	sbcs	r1, r1, #0
   15c84:	movcc	r8, r0
   15c88:	mov	r0, #5
   15c8c:	mov	r1, sl
   15c90:	bl	11f90 <getrlimit64@plt>
   15c94:	lsr	r8, r8, #1
   15c98:	cmp	r0, #0
   15c9c:	bne	15cd4 <__assert_fail@plt+0x399c>
   15ca0:	ldr	r1, [fp, #-100]	; 0xffffff9c
   15ca4:	ldr	r0, [fp, #-104]	; 0xffffff98
   15ca8:	lsr	r2, r1, #4
   15cac:	lsr	r0, r0, #4
   15cb0:	lsl	r2, r2, #4
   15cb4:	orr	r0, r0, r1, lsl #28
   15cb8:	sub	r2, r2, r1, lsr #4
   15cbc:	mov	r1, #15
   15cc0:	umull	r0, r1, r0, r1
   15cc4:	add	r1, r1, r2
   15cc8:	subs	r2, r0, r8
   15ccc:	sbcs	r1, r1, #0
   15cd0:	movcc	r8, r0
   15cd4:	bl	1e998 <__assert_fail@plt+0xc660>
   15cd8:	vmov.f64	d8, d0
   15cdc:	bl	1e918 <__assert_fail@plt+0xc5e0>
   15ce0:	vmul.f64	d17, d0, d10
   15ce4:	vmul.f64	d16, d0, d9
   15ce8:	vmov	s2, r8
   15cec:	vcvt.u32.f64	s0, d16
   15cf0:	vcmpe.f64	d8, d17
   15cf4:	vcvt.f64.u32	d18, s2
   15cf8:	vmrs	APSR_nzcv, fpscr
   15cfc:	vcmpe.f64	d16, d18
   15d00:	vmov	r1, s0
   15d04:	vselgt.f64	d17, d8, d17
   15d08:	vmrs	APSR_nzcv, fpscr
   15d0c:	movpl	r1, r8
   15d10:	vcvt.u32.f64	s0, d17
   15d14:	vmov	s2, r1
   15d18:	vmov	r0, s0
   15d1c:	vcvt.f64.u32	d16, s2
   15d20:	ldr	r8, [sp, #96]	; 0x60
   15d24:	vcmpe.f64	d17, d16
   15d28:	vmrs	APSR_nzcv, fpscr
   15d2c:	movpl	r0, r1
   15d30:	movw	r1, #33264	; 0x81f0
   15d34:	movt	r1, #3
   15d38:	ldr	r1, [r1]
   15d3c:	add	r1, r1, r1, lsl #3
   15d40:	cmp	r0, r1, lsl #1
   15d44:	lslls	r0, r1, #1
   15d48:	movw	r1, #35000	; 0x88b8
   15d4c:	movt	r1, #3
   15d50:	str	r0, [r1]
   15d54:	ldr	r3, [sp, #116]	; 0x74
   15d58:	sub	r2, r0, r5
   15d5c:	mul	r1, r3, r4
   15d60:	add	r1, r1, #1
   15d64:	cmp	r2, r1
   15d68:	bls	15d9c <__assert_fail@plt+0x3a64>
   15d6c:	udiv	r2, r1, r3
   15d70:	eor	r2, r4, r2
   15d74:	orrs	r2, r2, r9
   15d78:	ldr	r9, [sp, #72]	; 0x48
   15d7c:	bne	15da0 <__assert_fail@plt+0x3a68>
   15d80:	add	r6, r6, #1
   15d84:	mov	sl, r7
   15d88:	add	r5, r1, r5
   15d8c:	cmp	r6, r7
   15d90:	ldr	r7, [sp, #124]	; 0x7c
   15d94:	bcc	15b58 <__assert_fail@plt+0x3820>
   15d98:	b	15dac <__assert_fail@plt+0x3a74>
   15d9c:	ldr	r9, [sp, #72]	; 0x48
   15da0:	mov	sl, r7
   15da4:	ldr	r7, [sp, #124]	; 0x7c
   15da8:	mov	r5, r0
   15dac:	and	r0, r5, #15
   15db0:	rsb	r0, r0, #16
   15db4:	add	r4, r0, r5
   15db8:	mov	r0, r4
   15dbc:	bl	23808 <__assert_fail@plt+0x114d0>
   15dc0:	cmp	r0, #0
   15dc4:	bne	15ddc <__assert_fail@plt+0x3aa4>
   15dc8:	ldr	r0, [sp, #116]	; 0x74
   15dcc:	lsr	r5, r4, #1
   15dd0:	cmp	r0, r4, lsr #1
   15dd4:	bcc	15dac <__assert_fail@plt+0x3a74>
   15dd8:	b	1632c <__assert_fail@plt+0x3ff4>
   15ddc:	ldr	r1, [sp, #80]	; 0x50
   15de0:	movw	r5, #34984	; 0x88a8
   15de4:	movt	r5, #3
   15de8:	str	r1, [fp, #-220]	; 0xffffff24
   15dec:	str	r0, [fp, #-240]	; 0xffffff10
   15df0:	mov	r0, #0
   15df4:	str	r4, [fp, #-228]	; 0xffffff1c
   15df8:	str	r0, [fp, #-232]	; 0xffffff18
   15dfc:	str	r0, [fp, #-224]	; 0xffffff20
   15e00:	str	r0, [fp, #-236]	; 0xffffff14
   15e04:	strb	r0, [fp, #-216]	; 0xffffff28
   15e08:	mov	r0, #0
   15e0c:	sub	sl, sl, #1
   15e10:	add	r7, r7, #4
   15e14:	strb	r0, [fp, #-216]	; 0xffffff28
   15e18:	str	r7, [sp, #124]	; 0x7c
   15e1c:	str	sl, [sp, #56]	; 0x38
   15e20:	ldr	r1, [sp, #112]	; 0x70
   15e24:	ldr	r2, [sp, #104]	; 0x68
   15e28:	sub	r0, fp, #240	; 0xf0
   15e2c:	bl	17690 <__assert_fail@plt+0x5358>
   15e30:	cmp	r0, #0
   15e34:	beq	160a0 <__assert_fail@plt+0x3d68>
   15e38:	ldrb	r0, [fp, #-216]	; 0xffffff28
   15e3c:	ldr	r4, [fp, #-228]	; 0xffffff1c
   15e40:	cmp	sl, #0
   15e44:	cmpne	r0, #0
   15e48:	beq	15e6c <__assert_fail@plt+0x3b34>
   15e4c:	ldr	r1, [fp, #-236]	; 0xffffff14
   15e50:	ldr	r2, [fp, #-232]	; 0xffffff18
   15e54:	ldr	r6, [sp, #80]	; 0x50
   15e58:	sub	r3, r4, r1
   15e5c:	mls	r2, r2, r6, r3
   15e60:	ldr	r3, [sp, #116]	; 0x74
   15e64:	cmp	r3, r2
   15e68:	bcc	1609c <__assert_fail@plt+0x3d64>
   15e6c:	mov	r1, #0
   15e70:	cmp	r0, #0
   15e74:	str	r1, [r5]
   15e78:	ldr	r5, [fp, #-240]	; 0xffffff10
   15e7c:	beq	15ecc <__assert_fail@plt+0x3b94>
   15e80:	ldr	r0, [sp, #108]	; 0x6c
   15e84:	ldr	r1, [fp, #-224]	; 0xffffff20
   15e88:	orr	r0, r0, sl
   15e8c:	orrs	r0, r0, r1
   15e90:	bne	15ecc <__assert_fail@plt+0x3b94>
   15e94:	ldr	r0, [sp, #112]	; 0x70
   15e98:	ldr	r1, [sp, #104]	; 0x68
   15e9c:	bl	169f0 <__assert_fail@plt+0x46b8>
   15ea0:	movw	r1, #26459	; 0x675b
   15ea4:	mov	r0, r9
   15ea8:	movt	r1, #2
   15eac:	bl	17428 <__assert_fail@plt+0x50f0>
   15eb0:	cmp	r0, #0
   15eb4:	beq	16330 <__assert_fail@plt+0x3ff8>
   15eb8:	str	r0, [fp, #-244]	; 0xffffff0c
   15ebc:	mov	r0, #1
   15ec0:	str	r9, [sp, #120]	; 0x78
   15ec4:	str	r0, [sp, #100]	; 0x64
   15ec8:	b	15eec <__assert_fail@plt+0x3bb4>
   15ecc:	sub	r0, fp, #244	; 0xf4
   15ed0:	mov	r1, #0
   15ed4:	bl	19e0c <__assert_fail@plt+0x7ad4>
   15ed8:	add	r0, r0, #9
   15edc:	str	r0, [sp, #120]	; 0x78
   15ee0:	ldr	r0, [sp, #108]	; 0x6c
   15ee4:	add	r0, r0, #1
   15ee8:	str	r0, [sp, #108]	; 0x6c
   15eec:	ldr	r6, [fp, #-232]	; 0xffffff18
   15ef0:	str	r5, [sp, #84]	; 0x54
   15ef4:	add	r5, r5, r4
   15ef8:	cmp	r6, #2
   15efc:	bcc	16014 <__assert_fail@plt+0x3cdc>
   15f00:	ldr	r1, [sp, #68]	; 0x44
   15f04:	movw	r0, #44820	; 0xaf14
   15f08:	movt	r0, #1
   15f0c:	bl	1e058 <__assert_fail@plt+0xbd20>
   15f10:	str	r0, [fp, #-208]	; 0xffffff30
   15f14:	ldr	r0, [sp, #88]	; 0x58
   15f18:	mov	r1, #0
   15f1c:	bl	11edc <pthread_mutex_init@plt>
   15f20:	ldr	r0, [sp, #92]	; 0x5c
   15f24:	mov	r1, #0
   15f28:	bl	11f60 <pthread_cond_init@plt>
   15f2c:	ldr	r0, [sp, #76]	; 0x4c
   15f30:	bl	22208 <__assert_fail@plt+0xfed0>
   15f34:	mov	sl, r0
   15f38:	mov	r4, #0
   15f3c:	mov	r9, r0
   15f40:	mov	r1, #0
   15f44:	str	r4, [r0, #16]
   15f48:	str	r6, [r0, #20]
   15f4c:	str	r6, [r0, #24]
   15f50:	str	r4, [r0, #28]
   15f54:	str	r4, [r0, #40]	; 0x28
   15f58:	strb	r4, [r0, #44]	; 0x2c
   15f5c:	mov	r0, #72	; 0x48
   15f60:	add	r7, sl, #48	; 0x30
   15f64:	vst1.32	{d12-d13}, [r9], r0
   15f68:	mov	r0, r7
   15f6c:	bl	11edc <pthread_mutex_init@plt>
   15f70:	ldr	r8, [sp, #96]	; 0x60
   15f74:	mov	r0, sl
   15f78:	mov	r1, r9
   15f7c:	mov	r2, r5
   15f80:	str	r6, [sp]
   15f84:	str	r4, [sp, #4]
   15f88:	mov	r3, r8
   15f8c:	bl	1af4c <__assert_fail@plt+0x8c14>
   15f90:	ldr	r4, [fp, #-244]	; 0xffffff0c
   15f94:	sub	r0, fp, #208	; 0xd0
   15f98:	mov	r1, r8
   15f9c:	mov	r2, r6
   15fa0:	mov	r3, r9
   15fa4:	stm	sp, {r0, r4}
   15fa8:	ldr	r0, [sp, #120]	; 0x78
   15fac:	str	r0, [sp, #8]
   15fb0:	mov	r0, r5
   15fb4:	bl	1a5b0 <__assert_fail@plt+0x8278>
   15fb8:	cmp	r8, #0
   15fbc:	beq	15fd8 <__assert_fail@plt+0x3ca0>
   15fc0:	ldr	r6, [sp, #64]	; 0x40
   15fc4:	mov	r0, r7
   15fc8:	bl	11e58 <pthread_mutex_destroy@plt>
   15fcc:	adds	r6, r6, #1
   15fd0:	add	r7, r7, #72	; 0x48
   15fd4:	bne	15fc4 <__assert_fail@plt+0x3c8c>
   15fd8:	mov	r0, sl
   15fdc:	bl	1cc78 <__assert_fail@plt+0xa940>
   15fe0:	ldr	r0, [fp, #-208]	; 0xffffff30
   15fe4:	bl	1e0bc <__assert_fail@plt+0xbd84>
   15fe8:	ldr	r0, [sp, #92]	; 0x5c
   15fec:	bl	11fcc <pthread_cond_destroy@plt>
   15ff0:	ldr	r0, [sp, #88]	; 0x58
   15ff4:	bl	11e58 <pthread_mutex_destroy@plt>
   15ff8:	ldr	r9, [sp, #72]	; 0x48
   15ffc:	ldr	r7, [sp, #124]	; 0x7c
   16000:	ldr	sl, [sp, #56]	; 0x38
   16004:	ldr	r6, [sp, #120]	; 0x78
   16008:	movw	r5, #34984	; 0x88a8
   1600c:	movt	r5, #3
   16010:	b	16078 <__assert_fail@plt+0x3d40>
   16014:	movw	r0, #33654	; 0x8376
   16018:	ldr	r4, [fp, #-244]	; 0xffffff0c
   1601c:	ldr	r8, [sp, #96]	; 0x60
   16020:	sub	r6, r5, #16
   16024:	movw	r5, #34984	; 0x88a8
   16028:	movt	r0, #3
   1602c:	movt	r5, #3
   16030:	ldrb	r0, [r0]
   16034:	cmp	r0, #1
   16038:	bne	16064 <__assert_fail@plt+0x3d2c>
   1603c:	ldr	r0, [r5]
   16040:	cmp	r0, #0
   16044:	beq	1605c <__assert_fail@plt+0x3d24>
   16048:	mov	r0, r6
   1604c:	mov	r1, r5
   16050:	bl	179a4 <__assert_fail@plt+0x566c>
   16054:	cmp	r0, #0
   16058:	beq	16094 <__assert_fail@plt+0x3d5c>
   1605c:	vld1.32	{d16-d17}, [r6]
   16060:	vst1.64	{d16-d17}, [r5]
   16064:	mov	r0, r6
   16068:	ldr	r6, [sp, #120]	; 0x78
   1606c:	mov	r1, r4
   16070:	mov	r2, r6
   16074:	bl	18914 <__assert_fail@plt+0x65dc>
   16078:	mov	r0, r4
   1607c:	mov	r1, r6
   16080:	bl	169f0 <__assert_fail@plt+0x46b8>
   16084:	ldr	r0, [sp, #100]	; 0x64
   16088:	tst	r0, #1
   1608c:	beq	15e20 <__assert_fail@plt+0x3ae8>
   16090:	b	160c4 <__assert_fail@plt+0x3d8c>
   16094:	ldr	r6, [sp, #120]	; 0x78
   16098:	b	16078 <__assert_fail@plt+0x3d40>
   1609c:	str	r1, [fp, #-224]	; 0xffffff20
   160a0:	ldr	r0, [sp, #112]	; 0x70
   160a4:	ldr	r1, [sp, #104]	; 0x68
   160a8:	bl	169f0 <__assert_fail@plt+0x46b8>
   160ac:	movw	r1, #24854	; 0x6116
   160b0:	cmp	sl, #0
   160b4:	movt	r1, #2
   160b8:	bne	15af4 <__assert_fail@plt+0x37bc>
   160bc:	ldr	r0, [fp, #-240]	; 0xffffff10
   160c0:	b	160c8 <__assert_fail@plt+0x3d90>
   160c4:	ldr	r0, [sp, #84]	; 0x54
   160c8:	bl	1cc78 <__assert_fail@plt+0xa940>
   160cc:	ldr	r0, [sp, #100]	; 0x64
   160d0:	tst	r0, #1
   160d4:	bne	16134 <__assert_fail@plt+0x3dfc>
   160d8:	movw	r0, #34696	; 0x8788
   160dc:	mov	r1, #8
   160e0:	movt	r0, #3
   160e4:	ldr	r5, [r0]
   160e8:	ldr	r0, [sp, #108]	; 0x6c
   160ec:	bl	222d8 <__assert_fail@plt+0xffa0>
   160f0:	mov	r4, r0
   160f4:	cmp	r5, #0
   160f8:	beq	16118 <__assert_fail@plt+0x3de0>
   160fc:	add	r0, r4, #4
   16100:	add	r1, r5, #9
   16104:	stmda	r0, {r1, r5}
   16108:	add	r0, r0, #8
   1610c:	ldr	r5, [r5]
   16110:	cmp	r5, #0
   16114:	bne	16100 <__assert_fail@plt+0x3dc8>
   16118:	ldr	r1, [sp, #108]	; 0x6c
   1611c:	mov	r0, r4
   16120:	mov	r3, r9
   16124:	mov	r2, r1
   16128:	bl	16da8 <__assert_fail@plt+0x4a70>
   1612c:	mov	r0, r4
   16130:	bl	1cc78 <__assert_fail@plt+0xa940>
   16134:	movw	r4, #34976	; 0x88a0
   16138:	movt	r4, #3
   1613c:	ldr	r0, [r4]
   16140:	cmp	r0, #1
   16144:	blt	1615c <__assert_fail@plt+0x3e24>
   16148:	mvn	r0, #0
   1614c:	bl	1a334 <__assert_fail@plt+0x7ffc>
   16150:	ldr	r0, [r4]
   16154:	cmp	r0, #0
   16158:	bgt	16148 <__assert_fail@plt+0x3e10>
   1615c:	movw	r0, #33513	; 0x82e9
   16160:	movt	r0, #3
   16164:	ldrb	r0, [r0]
   16168:	cmp	r0, #1
   1616c:	bne	16188 <__assert_fail@plt+0x3e50>
   16170:	movw	r0, #33488	; 0x82d0
   16174:	movt	r0, #3
   16178:	ldr	r0, [r0]
   1617c:	bl	1c6f4 <__assert_fail@plt+0xa3bc>
   16180:	cmn	r0, #1
   16184:	beq	16748 <__assert_fail@plt+0x4410>
   16188:	mov	r0, #0
   1618c:	sub	sp, fp, #72	; 0x48
   16190:	vpop	{d8-d10}
   16194:	vpop	{d12-d13}
   16198:	add	sp, sp, #4
   1619c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161a0:	movw	r0, #24246	; 0x5eb6
   161a4:	mov	r8, r5
   161a8:	movt	r0, #2
   161ac:	bl	120a4 <getenv@plt>
   161b0:	movw	r5, #22437	; 0x57a5
   161b4:	cmp	r0, #0
   161b8:	movt	r5, #2
   161bc:	movne	r5, r0
   161c0:	movw	r0, #34700	; 0x878c
   161c4:	movt	r0, #3
   161c8:	ldr	r0, [r0]
   161cc:	cmp	r0, #0
   161d0:	beq	161e8 <__assert_fail@plt+0x3eb0>
   161d4:	movw	r0, #34704	; 0x8790
   161d8:	mov	r1, #0
   161dc:	movt	r0, #3
   161e0:	ldr	r0, [r0]
   161e4:	b	16214 <__assert_fail@plt+0x3edc>
   161e8:	movw	r0, #34704	; 0x8790
   161ec:	movw	r1, #34700	; 0x878c
   161f0:	mov	r2, #4
   161f4:	movt	r0, #3
   161f8:	movt	r1, #3
   161fc:	ldr	r0, [r0]
   16200:	bl	223b4 <__assert_fail@plt+0x1007c>
   16204:	movw	r1, #34704	; 0x8790
   16208:	movt	r1, #3
   1620c:	str	r0, [r1]
   16210:	ldr	r1, [r4]
   16214:	add	r2, r1, #1
   16218:	str	r2, [r4]
   1621c:	str	r5, [r0, r1, lsl #2]
   16220:	mov	r5, r8
   16224:	cmp	sl, #0
   16228:	bne	1593c <__assert_fail@plt+0x3604>
   1622c:	mov	r0, r7
   16230:	bl	1cc78 <__assert_fail@plt+0xa940>
   16234:	mov	r0, #4
   16238:	bl	22208 <__assert_fail@plt+0xfed0>
   1623c:	mov	r7, r0
   16240:	movw	r0, #25582	; 0x63ee
   16244:	mov	sl, #1
   16248:	movt	r0, #2
   1624c:	str	r0, [r7]
   16250:	b	1593c <__assert_fail@plt+0x3604>
   16254:	mov	r0, #2
   16258:	bl	12440 <__assert_fail@plt+0x108>
   1625c:	movw	r0, #33376	; 0x8260
   16260:	movw	r2, #23895	; 0x5d57
   16264:	mov	r1, #0
   16268:	movw	r7, #23882	; 0x5d4a
   1626c:	movt	r0, #3
   16270:	movt	r2, #2
   16274:	str	r1, [sp, #8]
   16278:	movw	r1, #23594	; 0x5c2a
   1627c:	movt	r7, #2
   16280:	ldr	r3, [r0]
   16284:	movw	r0, #33492	; 0x82d4
   16288:	str	r2, [sp, #4]
   1628c:	movw	r2, #23868	; 0x5d3c
   16290:	movt	r1, #2
   16294:	str	r7, [sp]
   16298:	movt	r0, #3
   1629c:	movt	r2, #2
   162a0:	ldr	r0, [r0]
   162a4:	bl	21fd4 <__assert_fail@plt+0xfc9c>
   162a8:	mov	r0, #0
   162ac:	bl	12128 <exit@plt>
   162b0:	mov	r0, #0
   162b4:	bl	12440 <__assert_fail@plt+0x108>
   162b8:	mov	r1, #0
   162bc:	sub	r4, fp, #208	; 0xd0
   162c0:	strb	r1, [r0, #31]
   162c4:	strh	r1, [r0, #24]
   162c8:	mov	r1, r4
   162cc:	bl	175b4 <__assert_fail@plt+0x527c>
   162d0:	mov	r0, r4
   162d4:	bl	169bc <__assert_fail@plt+0x4684>
   162d8:	movw	r1, #24007	; 0x5dc7
   162dc:	mov	r0, #0
   162e0:	mov	r2, #5
   162e4:	movt	r1, #2
   162e8:	bl	11f54 <dcgettext@plt>
   162ec:	ldr	r1, [r7, r6, lsl #2]
   162f0:	mov	r4, r0
   162f4:	mov	r0, #4
   162f8:	bl	203b4 <__assert_fail@plt+0xe07c>
   162fc:	mov	r3, r0
   16300:	mov	r0, #2
   16304:	mov	r1, #0
   16308:	mov	r2, r4
   1630c:	bl	12080 <error@plt>
   16310:	movw	r1, #26447	; 0x674f
   16314:	mov	r0, #0
   16318:	mov	r2, #5
   1631c:	movt	r1, #2
   16320:	bl	11f54 <dcgettext@plt>
   16324:	ldr	r1, [r7, r6, lsl #2]
   16328:	bl	173b4 <__assert_fail@plt+0x507c>
   1632c:	bl	22768 <__assert_fail@plt+0x10430>
   16330:	movw	r1, #25447	; 0x6367
   16334:	mov	r0, #0
   16338:	mov	r2, #5
   1633c:	movt	r1, #2
   16340:	bl	11f54 <dcgettext@plt>
   16344:	mov	r1, r9
   16348:	bl	173b4 <__assert_fail@plt+0x507c>
   1634c:	movw	r1, #26725	; 0x6865
   16350:	mov	r0, #0
   16354:	mov	r2, #5
   16358:	movt	r1, #2
   1635c:	bl	11f54 <dcgettext@plt>
   16360:	ldr	r1, [sp, #124]	; 0x7c
   16364:	ldr	r1, [r1, r6, lsl #2]
   16368:	bl	173b4 <__assert_fail@plt+0x507c>
   1636c:	movw	r1, #23610	; 0x5c3a
   16370:	movt	r1, #2
   16374:	b	16564 <__assert_fail@plt+0x422c>
   16378:	ldr	r0, [r4]
   1637c:	movw	r1, #23698	; 0x5c92
   16380:	movt	r1, #2
   16384:	bl	1695c <__assert_fail@plt+0x4624>
   16388:	movw	r1, #23814	; 0x5d06
   1638c:	movt	r1, #2
   16390:	b	16564 <__assert_fail@plt+0x422c>
   16394:	movw	r1, #23827	; 0x5d13
   16398:	mov	r0, #0
   1639c:	mov	r2, #5
   163a0:	movt	r1, #2
   163a4:	bl	11f54 <dcgettext@plt>
   163a8:	mov	r5, r0
   163ac:	ldr	r0, [r4]
   163b0:	bl	208dc <__assert_fail@plt+0xe5a4>
   163b4:	mov	r3, r0
   163b8:	mov	r0, #2
   163bc:	mov	r1, #0
   163c0:	mov	r2, r5
   163c4:	bl	12080 <error@plt>
   163c8:	movw	r1, #23850	; 0x5d2a
   163cc:	movt	r1, #2
   163d0:	b	16564 <__assert_fail@plt+0x422c>
   163d4:	movw	r3, #26836	; 0x68d4
   163d8:	mov	r1, r4
   163dc:	mov	r2, #7
   163e0:	str	r5, [sp]
   163e4:	movt	r3, #2
   163e8:	bl	22a50 <__assert_fail@plt+0x10718>
   163ec:	movw	r1, #23748	; 0x5cc4
   163f0:	movt	r1, #2
   163f4:	b	16564 <__assert_fail@plt+0x422c>
   163f8:	cmp	r6, #1
   163fc:	bne	165b0 <__assert_fail@plt+0x4278>
   16400:	movw	r1, #25324	; 0x62ec
   16404:	mov	r0, #0
   16408:	mov	r2, #5
   1640c:	movt	r1, #2
   16410:	bl	11f54 <dcgettext@plt>
   16414:	mov	r6, r0
   16418:	mov	r0, r9
   1641c:	bl	208dc <__assert_fail@plt+0xe5a4>
   16420:	ldr	r1, [sp, #68]	; 0x44
   16424:	str	r0, [sp]
   16428:	movw	r0, #26836	; 0x68d4
   1642c:	mov	r2, r6
   16430:	movt	r0, #2
   16434:	ldr	r5, [r0, r1, lsl #4]
   16438:	mov	r0, #0
   1643c:	mov	r1, #0
   16440:	mov	r3, r5
   16444:	bl	12080 <error@plt>
   16448:	movw	r1, #25351	; 0x6307
   1644c:	mov	r0, #0
   16450:	mov	r2, #5
   16454:	movt	r1, #2
   16458:	bl	11f54 <dcgettext@plt>
   1645c:	mov	r6, r0
   16460:	sub	r1, fp, #208	; 0xd0
   16464:	mov	r0, r4
   16468:	bl	1e2e0 <__assert_fail@plt+0xbfa8>
   1646c:	str	r0, [sp]
   16470:	mov	r0, #2
   16474:	mov	r1, #0
   16478:	mov	r2, r6
   1647c:	mov	r3, r5
   16480:	bl	12080 <error@plt>
   16484:	movw	r1, #25269	; 0x62b5
   16488:	mov	r0, #0
   1648c:	mov	r2, #5
   16490:	movt	r1, #2
   16494:	bl	11f54 <dcgettext@plt>
   16498:	mov	r4, r0
   1649c:	mov	r0, r9
   164a0:	bl	208dc <__assert_fail@plt+0xe5a4>
   164a4:	ldr	r1, [sp, #68]	; 0x44
   164a8:	str	r0, [sp]
   164ac:	movw	r0, #26836	; 0x68d4
   164b0:	mov	r2, r4
   164b4:	movt	r0, #2
   164b8:	ldr	r5, [r0, r1, lsl #4]
   164bc:	mov	r0, #0
   164c0:	mov	r1, #0
   164c4:	mov	r3, r5
   164c8:	bl	12080 <error@plt>
   164cc:	movw	r1, #25294	; 0x62ce
   164d0:	mov	r0, #0
   164d4:	mov	r2, #5
   164d8:	movt	r1, #2
   164dc:	bl	11f54 <dcgettext@plt>
   164e0:	mov	r4, r0
   164e4:	movw	r0, #25322	; 0x62ea
   164e8:	movt	r0, #2
   164ec:	bl	208dc <__assert_fail@plt+0xe5a4>
   164f0:	str	r0, [sp]
   164f4:	mov	r0, #2
   164f8:	mov	r1, #0
   164fc:	mov	r2, r4
   16500:	mov	r3, r5
   16504:	bl	12080 <error@plt>
   16508:	movw	r1, #23780	; 0x5ce4
   1650c:	movt	r1, #2
   16510:	b	16564 <__assert_fail@plt+0x422c>
   16514:	mov	r0, #1
   16518:	movw	r3, #26836	; 0x68d4
   1651c:	mov	r1, r4
   16520:	mov	r2, #83	; 0x53
   16524:	str	r5, [sp]
   16528:	movt	r3, #2
   1652c:	bl	22a50 <__assert_fail@plt+0x10718>
   16530:	ldr	r0, [r4]
   16534:	movw	r1, #23677	; 0x5c7d
   16538:	movt	r1, #2
   1653c:	bl	1695c <__assert_fail@plt+0x4624>
   16540:	ldr	r0, [r4]
   16544:	movw	r1, #23562	; 0x5c0a
   16548:	movt	r1, #2
   1654c:	bl	1695c <__assert_fail@plt+0x4624>
   16550:	movw	r0, #23607	; 0x5c37
   16554:	movt	r0, #2
   16558:	bl	169bc <__assert_fail@plt+0x4684>
   1655c:	movw	r1, #25412	; 0x6344
   16560:	movt	r1, #2
   16564:	mov	r0, #0
   16568:	mov	r2, #5
   1656c:	bl	11f54 <dcgettext@plt>
   16570:	mov	r2, r0
   16574:	mov	r0, #2
   16578:	mov	r1, #0
   1657c:	bl	12080 <error@plt>
   16580:	movw	r0, #27823	; 0x6caf
   16584:	movw	r1, #23503	; 0x5bcf
   16588:	movw	r3, #23514	; 0x5bda
   1658c:	movw	r2, #4449	; 0x1161
   16590:	movt	r0, #2
   16594:	movt	r1, #2
   16598:	movt	r3, #2
   1659c:	bl	12338 <__assert_fail@plt>
   165a0:	movw	r1, #23562	; 0x5c0a
   165a4:	mov	r0, r4
   165a8:	movt	r1, #2
   165ac:	bl	1695c <__assert_fail@plt+0x4624>
   165b0:	ldr	r1, [sp, #68]	; 0x44
   165b4:	movw	r3, #26836	; 0x68d4
   165b8:	mov	r0, r6
   165bc:	mov	r2, #4
   165c0:	str	r9, [sp]
   165c4:	movt	r3, #2
   165c8:	bl	22a50 <__assert_fail@plt+0x10718>
   165cc:	movw	r1, #25447	; 0x6367
   165d0:	mov	r0, #0
   165d4:	mov	r2, #5
   165d8:	movt	r1, #2
   165dc:	bl	11f54 <dcgettext@plt>
   165e0:	ldr	r1, [sp, #104]	; 0x68
   165e4:	bl	173b4 <__assert_fail@plt+0x507c>
   165e8:	mov	r5, r7
   165ec:	cmp	sl, #2
   165f0:	bcc	16768 <__assert_fail@plt+0x4430>
   165f4:	movw	r1, #24253	; 0x5ebd
   165f8:	mov	r0, #0
   165fc:	mov	r2, #5
   16600:	movt	r1, #2
   16604:	bl	11f54 <dcgettext@plt>
   16608:	ldr	r1, [r5, #4]
   1660c:	mov	r4, r0
   16610:	mov	r0, #4
   16614:	bl	203b4 <__assert_fail@plt+0xe07c>
   16618:	mov	r3, r0
   1661c:	uxtb	r0, r6
   16620:	str	r0, [sp]
   16624:	b	16300 <__assert_fail@plt+0x3fc8>
   16628:	movw	r1, #23907	; 0x5d63
   1662c:	mov	r0, #0
   16630:	mov	r2, #5
   16634:	movt	r1, #2
   16638:	bl	11f54 <dcgettext@plt>
   1663c:	mov	r4, r0
   16640:	ldr	r0, [sp, #124]	; 0x7c
   16644:	ldr	r1, [r0]
   16648:	mov	r0, #4
   1664c:	bl	203b4 <__assert_fail@plt+0xe07c>
   16650:	mov	r3, r0
   16654:	mov	r0, #0
   16658:	mov	r1, #0
   1665c:	mov	r2, r4
   16660:	bl	12080 <error@plt>
   16664:	movw	r0, #33480	; 0x82c8
   16668:	movw	r1, #23924	; 0x5d74
   1666c:	mov	r2, #5
   16670:	movt	r0, #3
   16674:	movt	r1, #2
   16678:	ldr	r4, [r0]
   1667c:	mov	r0, #0
   16680:	bl	11f54 <dcgettext@plt>
   16684:	movw	r2, #28382	; 0x6ede
   16688:	mov	r3, r0
   1668c:	mov	r0, r4
   16690:	mov	r1, #1
   16694:	movt	r2, #2
   16698:	bl	121c4 <__fprintf_chk@plt>
   1669c:	mov	r0, #2
   166a0:	bl	12440 <__assert_fail@plt+0x108>
   166a4:	movw	r1, #25447	; 0x6367
   166a8:	mov	r0, #0
   166ac:	mov	r2, #5
   166b0:	movt	r1, #2
   166b4:	bl	11f54 <dcgettext@plt>
   166b8:	mov	r1, r6
   166bc:	bl	173b4 <__assert_fail@plt+0x507c>
   166c0:	movw	r1, #23976	; 0x5da8
   166c4:	mov	r0, #0
   166c8:	mov	r2, #5
   166cc:	movt	r1, #2
   166d0:	bl	11f54 <dcgettext@plt>
   166d4:	mov	r4, r0
   166d8:	mov	r0, #4
   166dc:	mov	r1, r6
   166e0:	b	162f8 <__assert_fail@plt+0x3fc0>
   166e4:	movw	r1, #24108	; 0x5e2c
   166e8:	mov	r0, #0
   166ec:	mov	r2, #5
   166f0:	movt	r1, #2
   166f4:	bl	11f54 <dcgettext@plt>
   166f8:	ldr	r1, [sp, #100]	; 0x64
   166fc:	b	162f0 <__assert_fail@plt+0x3fb8>
   16700:	movw	r1, #25447	; 0x6367
   16704:	mov	r0, #0
   16708:	mov	r2, #5
   1670c:	movt	r1, #2
   16710:	bl	11f54 <dcgettext@plt>
   16714:	ldr	r2, [sp, #28]
   16718:	movw	r1, #26252	; 0x668c
   1671c:	movt	r1, #2
   16720:	cmp	r2, #0
   16724:	movne	r1, r2
   16728:	bl	173b4 <__assert_fail@plt+0x507c>
   1672c:	movw	r1, #24291	; 0x5ee3
   16730:	mov	r0, #0
   16734:	mov	r2, #5
   16738:	movt	r1, #2
   1673c:	bl	11f54 <dcgettext@plt>
   16740:	ldr	r1, [sp, #28]
   16744:	bl	173b4 <__assert_fail@plt+0x507c>
   16748:	movw	r1, #24291	; 0x5ee3
   1674c:	mov	r0, #0
   16750:	mov	r2, #5
   16754:	movt	r1, #2
   16758:	bl	11f54 <dcgettext@plt>
   1675c:	movw	r1, #25582	; 0x63ee
   16760:	movt	r1, #2
   16764:	bl	173b4 <__assert_fail@plt+0x507c>
   16768:	cmp	r9, #0
   1676c:	bne	16784 <__assert_fail@plt+0x444c>
   16770:	ldr	r0, [r5]
   16774:	uxtb	r1, r6
   16778:	bl	16a6c <__assert_fail@plt+0x4734>
   1677c:	eor	r0, r0, #1
   16780:	bl	12128 <exit@plt>
   16784:	movw	r0, #33268	; 0x81f4
   16788:	movt	r0, #3
   1678c:	strb	r6, [r0]
   16790:	bl	169bc <__assert_fail@plt+0x4684>
   16794:	push	{r4, r5, r6, sl, fp, lr}
   16798:	add	fp, sp, #16
   1679c:	movw	r5, #34696	; 0x8788
   167a0:	mov	r4, r0
   167a4:	movt	r5, #3
   167a8:	ldr	r6, [r5]
   167ac:	cmp	r6, #0
   167b0:	beq	167c8 <__assert_fail@plt+0x4490>
   167b4:	add	r0, r6, #9
   167b8:	bl	11f78 <unlink@plt>
   167bc:	ldr	r6, [r6]
   167c0:	cmp	r6, #0
   167c4:	bne	167b4 <__assert_fail@plt+0x447c>
   167c8:	mov	r0, #0
   167cc:	mov	r1, #0
   167d0:	str	r0, [r5]
   167d4:	mov	r0, r4
   167d8:	bl	11f00 <signal@plt>
   167dc:	mov	r0, r4
   167e0:	pop	{r4, r5, r6, sl, fp, lr}
   167e4:	b	11e1c <raise@plt>
   167e8:	push	{r4, r5, r6, r7, fp, lr}
   167ec:	add	fp, sp, #16
   167f0:	sub	sp, sp, #136	; 0x88
   167f4:	movw	r5, #34696	; 0x8788
   167f8:	movt	r5, #3
   167fc:	ldr	r0, [r5]
   16800:	cmp	r0, #0
   16804:	beq	16874 <__assert_fail@plt+0x453c>
   16808:	add	r0, sp, #4
   1680c:	movw	r1, #33520	; 0x82f0
   16810:	mov	r6, #0
   16814:	add	r4, r0, #4
   16818:	movt	r1, #3
   1681c:	mov	r0, #0
   16820:	mov	r2, r4
   16824:	bl	12050 <pthread_sigmask@plt>
   16828:	clz	r0, r0
   1682c:	lsr	r0, r0, #5
   16830:	strb	r0, [sp, #4]
   16834:	ldr	r7, [r5]
   16838:	cmp	r7, #0
   1683c:	beq	16858 <__assert_fail@plt+0x4520>
   16840:	add	r0, r7, #9
   16844:	bl	11f78 <unlink@plt>
   16848:	ldr	r7, [r7]
   1684c:	cmp	r7, #0
   16850:	bne	16840 <__assert_fail@plt+0x4508>
   16854:	ldrb	r0, [sp, #4]
   16858:	cmp	r0, #0
   1685c:	str	r6, [r5]
   16860:	beq	16874 <__assert_fail@plt+0x453c>
   16864:	mov	r0, #2
   16868:	mov	r1, r4
   1686c:	mov	r2, #0
   16870:	bl	12050 <pthread_sigmask@plt>
   16874:	bl	1b78c <__assert_fail@plt+0x9454>
   16878:	sub	sp, fp, #16
   1687c:	pop	{r4, r5, r6, r7, fp, pc}
   16880:	push	{r4, r5, r6, sl, fp, lr}
   16884:	add	fp, sp, #16
   16888:	sub	sp, sp, #24
   1688c:	mov	r4, r0
   16890:	movw	r0, #19820	; 0x4d6c
   16894:	mov	r5, r2
   16898:	mov	r6, r1
   1689c:	add	r1, sp, #20
   168a0:	add	r3, sp, #8
   168a4:	mov	r2, #10
   168a8:	movt	r0, #2
   168ac:	str	r0, [sp]
   168b0:	mov	r0, r4
   168b4:	bl	22b14 <__assert_fail@plt+0x107dc>
   168b8:	cmp	r0, #4
   168bc:	bhi	168f8 <__assert_fail@plt+0x45c0>
   168c0:	add	r1, pc, #0
   168c4:	ldr	pc, [r1, r0, lsl #2]
   168c8:	ldrdeq	r6, [r1], -ip
   168cc:	strdeq	r6, [r1], -r0
   168d0:	ldrdeq	r6, [r1], -ip
   168d4:	strdeq	r6, [r1], -r0
   168d8:	andeq	r6, r1, r4, lsl #18
   168dc:	ldr	r1, [sp, #12]
   168e0:	ldr	r0, [sp, #8]
   168e4:	cmp	r1, #0
   168e8:	str	r0, [r6]
   168ec:	beq	168f8 <__assert_fail@plt+0x45c0>
   168f0:	mvn	r0, #0
   168f4:	str	r0, [r6]
   168f8:	ldr	r0, [sp, #20]
   168fc:	sub	sp, fp, #16
   16900:	pop	{r4, r5, r6, sl, fp, pc}
   16904:	mov	r0, #0
   16908:	cmp	r5, #0
   1690c:	beq	168fc <__assert_fail@plt+0x45c4>
   16910:	movw	r1, #25106	; 0x6212
   16914:	mov	r0, #0
   16918:	mov	r2, #5
   1691c:	movt	r1, #2
   16920:	bl	11f54 <dcgettext@plt>
   16924:	mov	r6, r0
   16928:	mov	r0, #0
   1692c:	mov	r1, r5
   16930:	mov	r2, #5
   16934:	bl	11f54 <dcgettext@plt>
   16938:	mov	r5, r0
   1693c:	mov	r0, r4
   16940:	bl	208dc <__assert_fail@plt+0xe5a4>
   16944:	str	r0, [sp]
   16948:	mov	r0, #2
   1694c:	mov	r1, #0
   16950:	mov	r2, r6
   16954:	mov	r3, r5
   16958:	bl	12080 <error@plt>
   1695c:	push	{fp, lr}
   16960:	mov	fp, sp
   16964:	sub	sp, sp, #8
   16968:	mov	r4, r1
   1696c:	movw	r1, #25139	; 0x6233
   16970:	mov	r5, r0
   16974:	mov	r0, #0
   16978:	mov	r2, #5
   1697c:	movt	r1, #2
   16980:	bl	11f54 <dcgettext@plt>
   16984:	mov	r6, r0
   16988:	mov	r0, #0
   1698c:	mov	r1, r4
   16990:	mov	r2, #5
   16994:	bl	11f54 <dcgettext@plt>
   16998:	mov	r4, r0
   1699c:	mov	r0, r5
   169a0:	bl	208dc <__assert_fail@plt+0xe5a4>
   169a4:	str	r0, [sp]
   169a8:	mov	r0, #2
   169ac:	mov	r1, #0
   169b0:	mov	r2, r6
   169b4:	mov	r3, r4
   169b8:	bl	12080 <error@plt>
   169bc:	push	{fp, lr}
   169c0:	mov	fp, sp
   169c4:	movw	r1, #25238	; 0x6296
   169c8:	mov	r4, r0
   169cc:	mov	r0, #0
   169d0:	mov	r2, #5
   169d4:	movt	r1, #2
   169d8:	bl	11f54 <dcgettext@plt>
   169dc:	mov	r2, r0
   169e0:	mov	r0, #2
   169e4:	mov	r1, #0
   169e8:	mov	r3, r4
   169ec:	bl	12080 <error@plt>
   169f0:	push	{r4, r5, fp, lr}
   169f4:	add	fp, sp, #8
   169f8:	mov	r4, r1
   169fc:	mov	r5, r0
   16a00:	bl	121b8 <fileno@plt>
   16a04:	cmp	r0, #1
   16a08:	beq	16a20 <__assert_fail@plt+0x46e8>
   16a0c:	cmp	r0, #0
   16a10:	bne	16a34 <__assert_fail@plt+0x46fc>
   16a14:	mov	r0, r5
   16a18:	pop	{r4, r5, fp, lr}
   16a1c:	b	12278 <clearerr_unlocked@plt>
   16a20:	mov	r0, r5
   16a24:	bl	11fd8 <fflush_unlocked@plt>
   16a28:	cmp	r0, #0
   16a2c:	bne	16a60 <__assert_fail@plt+0x4728>
   16a30:	pop	{r4, r5, fp, pc}
   16a34:	mov	r0, r5
   16a38:	bl	1c6f4 <__assert_fail@plt+0xa3bc>
   16a3c:	cmp	r0, #0
   16a40:	popeq	{r4, r5, fp, pc}
   16a44:	movw	r1, #24291	; 0x5ee3
   16a48:	movt	r1, #2
   16a4c:	mov	r0, #0
   16a50:	mov	r2, #5
   16a54:	bl	11f54 <dcgettext@plt>
   16a58:	mov	r1, r4
   16a5c:	bl	173b4 <__assert_fail@plt+0x507c>
   16a60:	movw	r1, #25567	; 0x63df
   16a64:	movt	r1, #2
   16a68:	b	16a4c <__assert_fail@plt+0x4714>
   16a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a70:	add	fp, sp, #28
   16a74:	sub	sp, sp, #100	; 0x64
   16a78:	mov	r9, r1
   16a7c:	movw	r1, #24854	; 0x6116
   16a80:	mov	r5, r0
   16a84:	movt	r1, #2
   16a88:	bl	17428 <__assert_fail@plt+0x50f0>
   16a8c:	cmp	r0, #0
   16a90:	beq	16d8c <__assert_fail@plt+0x4a54>
   16a94:	mov	r4, r0
   16a98:	movw	r0, #33368	; 0x8258
   16a9c:	movt	r0, #3
   16aa0:	ldr	r1, [r0]
   16aa4:	movw	r0, #33668	; 0x8384
   16aa8:	movt	r0, #3
   16aac:	ldr	r0, [r0]
   16ab0:	cmp	r1, r0
   16ab4:	movhi	r0, r1
   16ab8:	movw	r1, #33656	; 0x8378
   16abc:	movt	r1, #3
   16ac0:	ldr	r1, [r1]
   16ac4:	str	r1, [sp, #20]
   16ac8:	movw	r1, #33654	; 0x8376
   16acc:	movt	r1, #3
   16ad0:	ldrb	r1, [r1]
   16ad4:	eor	r8, r1, #1
   16ad8:	and	r1, r0, #15
   16adc:	rsb	r1, r1, #16
   16ae0:	add	r6, r1, r0
   16ae4:	mov	r0, r6
   16ae8:	bl	23808 <__assert_fail@plt+0x114d0>
   16aec:	cmp	r0, #0
   16af0:	bne	16b04 <__assert_fail@plt+0x47cc>
   16af4:	lsr	r0, r6, #1
   16af8:	cmp	r6, #35	; 0x23
   16afc:	bhi	16ad8 <__assert_fail@plt+0x47a0>
   16b00:	bl	22768 <__assert_fail@plt+0x10430>
   16b04:	mov	r1, #16
   16b08:	mov	r2, r5
   16b0c:	str	r1, [fp, #-36]	; 0xffffffdc
   16b10:	str	r0, [fp, #-56]	; 0xffffffc8
   16b14:	str	r6, [fp, #-44]	; 0xffffffd4
   16b18:	mov	r6, #0
   16b1c:	sub	r0, fp, #56	; 0x38
   16b20:	mov	r1, r4
   16b24:	str	r6, [fp, #-48]	; 0xffffffd0
   16b28:	str	r6, [fp, #-40]	; 0xffffffd8
   16b2c:	str	r6, [fp, #-52]	; 0xffffffcc
   16b30:	strb	r6, [fp, #-32]	; 0xffffffe0
   16b34:	str	r6, [sp, #56]	; 0x38
   16b38:	bl	17690 <__assert_fail@plt+0x5358>
   16b3c:	mov	r7, #1
   16b40:	cmp	r0, #0
   16b44:	beq	16d5c <__assert_fail@plt+0x4a24>
   16b48:	str	r9, [sp, #8]
   16b4c:	and	r7, r8, #1
   16b50:	mov	r0, #0
   16b54:	mov	r6, #0
   16b58:	mov	r9, #0
   16b5c:	mov	r8, #0
   16b60:	str	r5, [sp, #16]
   16b64:	str	r4, [sp, #12]
   16b68:	str	r0, [sp, #28]
   16b6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16b70:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16b74:	ldr	r4, [fp, #-48]	; 0xffffffd0
   16b78:	str	r8, [sp, #24]
   16b7c:	cmp	r9, #0
   16b80:	add	r8, r0, r1
   16b84:	beq	16b9c <__assert_fail@plt+0x4864>
   16b88:	sub	r1, r8, #16
   16b8c:	add	r0, sp, #56	; 0x38
   16b90:	bl	179a4 <__assert_fail@plt+0x566c>
   16b94:	cmp	r0, r7
   16b98:	bge	16d84 <__assert_fail@plt+0x4a4c>
   16b9c:	sub	r5, r8, r4, lsl #4
   16ba0:	sub	sl, r8, #32
   16ba4:	add	r0, sl, #16
   16ba8:	cmp	r5, r0
   16bac:	bcs	16bc8 <__assert_fail@plt+0x4890>
   16bb0:	mov	r1, sl
   16bb4:	bl	179a4 <__assert_fail@plt+0x566c>
   16bb8:	sub	sl, sl, #16
   16bbc:	cmp	r0, r7
   16bc0:	blt	16ba4 <__assert_fail@plt+0x486c>
   16bc4:	b	16c9c <__assert_fail@plt+0x4964>
   16bc8:	ldr	r8, [sp, #24]
   16bcc:	ldr	r0, [sp, #28]
   16bd0:	ldr	r2, [sl, #20]
   16bd4:	adds	r8, r8, r4
   16bd8:	adc	r0, r0, #0
   16bdc:	cmp	r9, r2
   16be0:	str	r0, [sp, #28]
   16be4:	bcs	16c0c <__assert_fail@plt+0x48d4>
   16be8:	ldr	r5, [sp, #16]
   16bec:	ldr	r4, [sp, #12]
   16bf0:	mov	r1, #0
   16bf4:	cmp	r1, r9, lsl #1
   16bf8:	beq	16c18 <__assert_fail@plt+0x48e0>
   16bfc:	lsl	r9, r9, #1
   16c00:	cmp	r9, r2
   16c04:	bcc	16bf4 <__assert_fail@plt+0x48bc>
   16c08:	b	16c1c <__assert_fail@plt+0x48e4>
   16c0c:	ldr	r5, [sp, #16]
   16c10:	ldr	r4, [sp, #12]
   16c14:	b	16c38 <__assert_fail@plt+0x4900>
   16c18:	mov	r9, r2
   16c1c:	mov	r0, r6
   16c20:	bl	1cc78 <__assert_fail@plt+0xa940>
   16c24:	mov	r0, r9
   16c28:	bl	22208 <__assert_fail@plt+0xfed0>
   16c2c:	str	r0, [sp, #56]	; 0x38
   16c30:	mov	r6, r0
   16c34:	ldr	r2, [sl, #20]
   16c38:	ldr	r1, [sl, #16]
   16c3c:	mov	r0, r6
   16c40:	bl	11ec4 <memcpy@plt>
   16c44:	ldr	r0, [sl, #20]
   16c48:	str	r0, [sp, #60]	; 0x3c
   16c4c:	ldr	r0, [sp, #20]
   16c50:	cmp	r0, #0
   16c54:	beq	16c7c <__assert_fail@plt+0x4944>
   16c58:	ldr	r0, [sl, #16]
   16c5c:	ldr	r1, [sl, #24]
   16c60:	sub	r1, r1, r0
   16c64:	add	r1, r6, r1
   16c68:	str	r1, [sp, #64]	; 0x40
   16c6c:	ldr	r1, [sl, #28]
   16c70:	sub	r0, r1, r0
   16c74:	add	r0, r6, r0
   16c78:	str	r0, [sp, #68]	; 0x44
   16c7c:	sub	r0, fp, #56	; 0x38
   16c80:	mov	r1, r4
   16c84:	mov	r2, r5
   16c88:	bl	17690 <__assert_fail@plt+0x5358>
   16c8c:	cmp	r0, #0
   16c90:	bne	16b6c <__assert_fail@plt+0x4834>
   16c94:	mov	r7, #1
   16c98:	b	16d5c <__assert_fail@plt+0x4a24>
   16c9c:	add	r5, sl, #32
   16ca0:	ldr	r0, [sp, #8]
   16ca4:	mov	r7, #0
   16ca8:	cmp	r0, #99	; 0x63
   16cac:	bne	16d54 <__assert_fail@plt+0x4a1c>
   16cb0:	movw	r4, #33480	; 0x82c8
   16cb4:	movw	r1, #26262	; 0x6696
   16cb8:	mov	r2, #5
   16cbc:	movt	r4, #3
   16cc0:	movt	r1, #2
   16cc4:	ldr	r0, [r4]
   16cc8:	str	r0, [sp, #20]
   16ccc:	mov	r0, #0
   16cd0:	bl	11f54 <dcgettext@plt>
   16cd4:	mov	r7, r0
   16cd8:	ldr	r0, [sp, #24]
   16cdc:	ldr	r2, [sp, #28]
   16ce0:	sub	sl, r5, #16
   16ce4:	sub	r1, r8, sl
   16ce8:	adds	r0, r0, r1, asr #4
   16cec:	adc	r1, r2, r1, asr #31
   16cf0:	movw	r2, #35016	; 0x88c8
   16cf4:	movt	r2, #3
   16cf8:	ldr	r9, [r2]
   16cfc:	add	r2, sp, #35	; 0x23
   16d00:	bl	1e320 <__assert_fail@plt+0xbfe8>
   16d04:	ldr	r5, [sp, #16]
   16d08:	str	r0, [sp, #4]
   16d0c:	ldr	r0, [sp, #20]
   16d10:	mov	r2, r7
   16d14:	mov	r1, #1
   16d18:	mov	r3, r9
   16d1c:	mov	r7, #0
   16d20:	str	r5, [sp]
   16d24:	bl	121c4 <__fprintf_chk@plt>
   16d28:	ldr	r4, [r4]
   16d2c:	movw	r1, #26284	; 0x66ac
   16d30:	mov	r0, #0
   16d34:	mov	r2, #5
   16d38:	movt	r1, #2
   16d3c:	bl	11f54 <dcgettext@plt>
   16d40:	mov	r2, r0
   16d44:	mov	r0, sl
   16d48:	mov	r1, r4
   16d4c:	bl	18914 <__assert_fail@plt+0x65dc>
   16d50:	b	16d58 <__assert_fail@plt+0x4a20>
   16d54:	ldr	r5, [sp, #16]
   16d58:	ldr	r4, [sp, #12]
   16d5c:	mov	r0, r4
   16d60:	mov	r1, r5
   16d64:	bl	169f0 <__assert_fail@plt+0x46b8>
   16d68:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16d6c:	bl	1cc78 <__assert_fail@plt+0xa940>
   16d70:	mov	r0, r6
   16d74:	bl	1cc78 <__assert_fail@plt+0xa940>
   16d78:	mov	r0, r7
   16d7c:	sub	sp, fp, #28
   16d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d84:	mov	r5, r8
   16d88:	b	16ca0 <__assert_fail@plt+0x4968>
   16d8c:	movw	r1, #25447	; 0x6367
   16d90:	mov	r0, #0
   16d94:	mov	r2, #5
   16d98:	movt	r1, #2
   16d9c:	bl	11f54 <dcgettext@plt>
   16da0:	mov	r1, r5
   16da4:	bl	173b4 <__assert_fail@plt+0x507c>
   16da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dac:	add	fp, sp, #28
   16db0:	sub	sp, sp, #148	; 0x94
   16db4:	mov	r8, r0
   16db8:	movw	r0, #33264	; 0x81f0
   16dbc:	mov	r7, r2
   16dc0:	mov	r9, r1
   16dc4:	str	r3, [sp, #12]
   16dc8:	movt	r0, #3
   16dcc:	str	r8, [sp, #16]
   16dd0:	ldr	r5, [r0]
   16dd4:	cmp	r5, r2
   16dd8:	bcs	16fd0 <__assert_fail@plt+0x4c98>
   16ddc:	cmp	r5, r7
   16de0:	str	r9, [sp, #32]
   16de4:	str	r7, [sp, #20]
   16de8:	bls	16df8 <__assert_fail@plt+0x4ac0>
   16dec:	mov	r2, #0
   16df0:	mov	r4, #0
   16df4:	b	16ec8 <__assert_fail@plt+0x4b90>
   16df8:	movw	r6, #33264	; 0x81f0
   16dfc:	mov	r4, #0
   16e00:	mov	r2, #0
   16e04:	movt	r6, #3
   16e08:	sub	r0, fp, #32
   16e0c:	mov	r1, #0
   16e10:	str	r2, [sp, #28]
   16e14:	bl	19e0c <__assert_fail@plt+0x7ad4>
   16e18:	mov	sl, r0
   16e1c:	add	r7, r8, r4, lsl #3
   16e20:	ldr	r8, [r6]
   16e24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e28:	add	r2, sp, #40	; 0x28
   16e2c:	str	r0, [sp, #24]
   16e30:	mov	r0, r7
   16e34:	mov	r1, r8
   16e38:	bl	19358 <__assert_fail@plt+0x7020>
   16e3c:	mov	r5, r0
   16e40:	cmp	r0, r8
   16e44:	bcs	16e50 <__assert_fail@plt+0x4b18>
   16e48:	cmp	r5, #1
   16e4c:	bls	17324 <__assert_fail@plt+0x4fec>
   16e50:	ldr	r6, [sp, #32]
   16e54:	ldr	r0, [sp, #40]	; 0x28
   16e58:	ldr	r3, [sp, #24]
   16e5c:	add	r9, sl, #9
   16e60:	mov	r2, r5
   16e64:	str	r9, [sp]
   16e68:	cmp	r6, r8
   16e6c:	str	r0, [sp, #4]
   16e70:	mov	r0, r7
   16e74:	movcc	r8, r6
   16e78:	mov	r1, r8
   16e7c:	bl	19610 <__assert_fail@plt+0x72d8>
   16e80:	ldr	r8, [sp, #16]
   16e84:	ldr	r2, [sp, #28]
   16e88:	cmp	r6, r5
   16e8c:	add	r4, r5, r4
   16e90:	movcc	r5, r6
   16e94:	sub	r6, r6, r5
   16e98:	mov	r0, r8
   16e9c:	str	r9, [r0, r2, lsl #3]!
   16ea0:	str	r6, [sp, #32]
   16ea4:	movw	r6, #33264	; 0x81f0
   16ea8:	add	r2, r2, #1
   16eac:	str	sl, [r0, #4]
   16eb0:	ldr	r0, [sp, #20]
   16eb4:	movt	r6, #3
   16eb8:	ldr	r5, [r6]
   16ebc:	sub	r7, r0, r4
   16ec0:	cmp	r5, r7
   16ec4:	bls	16e08 <__assert_fail@plt+0x4ad0>
   16ec8:	udiv	r0, r2, r5
   16ecc:	mul	r0, r0, r5
   16ed0:	sub	r0, r0, r2
   16ed4:	add	r9, r5, r0
   16ed8:	cmp	r7, r9
   16edc:	bls	16f9c <__assert_fail@plt+0x4c64>
   16ee0:	sub	r0, fp, #32
   16ee4:	mov	r1, #0
   16ee8:	str	r2, [sp, #28]
   16eec:	bl	19e0c <__assert_fail@plt+0x7ad4>
   16ef0:	mov	r1, r8
   16ef4:	mov	r8, r0
   16ef8:	sub	r0, r7, r9
   16efc:	add	r2, sp, #40	; 0x28
   16f00:	add	r7, r0, #1
   16f04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16f08:	add	r6, r1, r4, lsl #3
   16f0c:	mov	r1, r7
   16f10:	str	r0, [sp, #24]
   16f14:	mov	r0, r6
   16f18:	bl	19358 <__assert_fail@plt+0x7020>
   16f1c:	mov	r5, r0
   16f20:	cmp	r0, r7
   16f24:	bcs	16f30 <__assert_fail@plt+0x4bf8>
   16f28:	cmp	r5, #1
   16f2c:	bls	17378 <__assert_fail@plt+0x5040>
   16f30:	ldr	r9, [sp, #32]
   16f34:	ldr	r0, [sp, #40]	; 0x28
   16f38:	ldr	r3, [sp, #24]
   16f3c:	add	sl, r8, #9
   16f40:	mov	r2, r5
   16f44:	str	sl, [sp]
   16f48:	cmp	r9, r7
   16f4c:	str	r0, [sp, #4]
   16f50:	mov	r0, r6
   16f54:	movcc	r7, r9
   16f58:	mov	r1, r7
   16f5c:	bl	19610 <__assert_fail@plt+0x72d8>
   16f60:	ldr	r1, [sp, #16]
   16f64:	ldr	r2, [sp, #28]
   16f68:	cmp	r9, r5
   16f6c:	add	r4, r5, r4
   16f70:	movcc	r5, r9
   16f74:	sub	r9, r9, r5
   16f78:	mov	r0, r1
   16f7c:	str	sl, [r0, r2, lsl #3]!
   16f80:	add	r2, r2, #1
   16f84:	str	r8, [r0, #4]
   16f88:	movw	r0, #33264	; 0x81f0
   16f8c:	mov	r8, r1
   16f90:	movt	r0, #3
   16f94:	ldr	r5, [r0]
   16f98:	b	16fa0 <__assert_fail@plt+0x4c68>
   16f9c:	ldr	r9, [sp, #32]
   16fa0:	ldr	r6, [sp, #20]
   16fa4:	add	r0, r8, r2, lsl #3
   16fa8:	mov	r7, r2
   16fac:	add	r1, r8, r4, lsl #3
   16fb0:	sub	r2, r6, r4
   16fb4:	lsl	r2, r2, #3
   16fb8:	bl	11e7c <memmove@plt>
   16fbc:	add	r0, r7, r6
   16fc0:	add	r9, r9, r7
   16fc4:	sub	r7, r0, r4
   16fc8:	cmp	r5, r7
   16fcc:	bcc	16ddc <__assert_fail@plt+0x4aa4>
   16fd0:	cmp	r9, r7
   16fd4:	mov	r5, r9
   16fd8:	bcs	171e0 <__assert_fail@plt+0x4ea8>
   16fdc:	add	r0, sp, #40	; 0x28
   16fe0:	lsl	r9, r5, #3
   16fe4:	mov	sl, r5
   16fe8:	str	r7, [sp, #20]
   16fec:	str	r5, [sp, #32]
   16ff0:	add	r0, r0, #96	; 0x60
   16ff4:	str	r0, [sp, #24]
   16ff8:	mov	r0, #0
   16ffc:	str	r0, [sp, #28]
   17000:	ldr	r7, [r8, r9]!
   17004:	movw	r1, #25582	; 0x63ee
   17008:	movt	r1, #2
   1700c:	mov	r0, r7
   17010:	bl	11e28 <strcmp@plt>
   17014:	mov	r5, r0
   17018:	ldr	r0, [sp, #12]
   1701c:	cmp	r0, #0
   17020:	beq	1705c <__assert_fail@plt+0x4d24>
   17024:	ldr	r0, [sp, #12]
   17028:	mov	r1, r7
   1702c:	bl	11e28 <strcmp@plt>
   17030:	cmp	r5, #0
   17034:	beq	1705c <__assert_fail@plt+0x4d24>
   17038:	cmp	r0, #0
   1703c:	bne	1705c <__assert_fail@plt+0x4d24>
   17040:	ldr	r6, [sp, #28]
   17044:	cmp	r6, #0
   17048:	beq	170a0 <__assert_fail@plt+0x4d68>
   1704c:	ldr	r5, [sp, #32]
   17050:	ldr	r7, [sp, #20]
   17054:	add	r4, r6, #9
   17058:	b	170fc <__assert_fail@plt+0x4dc4>
   1705c:	movw	r0, #34708	; 0x8794
   17060:	ldr	r6, [sp, #32]
   17064:	ldr	r7, [sp, #20]
   17068:	movt	r0, #3
   1706c:	ldr	r4, [r0]
   17070:	cmp	r4, #0
   17074:	bne	17124 <__assert_fail@plt+0x4dec>
   17078:	movw	r2, #34712	; 0x8798
   1707c:	mov	r0, #3
   17080:	mov	r1, #1
   17084:	movt	r2, #3
   17088:	bl	11ff0 <__fxstat64@plt>
   1708c:	cmp	r0, #0
   17090:	beq	17114 <__assert_fail@plt+0x4ddc>
   17094:	bl	12164 <__errno_location@plt>
   17098:	ldr	r4, [r0]
   1709c:	b	17118 <__assert_fail@plt+0x4de0>
   170a0:	add	r0, sp, #36	; 0x24
   170a4:	mov	r1, #0
   170a8:	bl	19e0c <__assert_fail@plt+0x7ad4>
   170ac:	mov	r6, r0
   170b0:	ldr	r0, [sp, #36]	; 0x24
   170b4:	mov	r1, #1
   170b8:	sub	r2, fp, #32
   170bc:	str	r0, [sp, #28]
   170c0:	mov	r0, r8
   170c4:	bl	19358 <__assert_fail@plt+0x7020>
   170c8:	ldr	r5, [sp, #32]
   170cc:	ldr	r7, [sp, #20]
   170d0:	cmp	r0, #0
   170d4:	beq	17394 <__assert_fail@plt+0x505c>
   170d8:	mov	r2, r0
   170dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   170e0:	ldr	r3, [sp, #28]
   170e4:	add	r4, r6, #9
   170e8:	mov	r1, #0
   170ec:	str	r4, [sp]
   170f0:	str	r0, [sp, #4]
   170f4:	mov	r0, r8
   170f8:	bl	19610 <__assert_fail@plt+0x72d8>
   170fc:	str	r4, [r8]
   17100:	ldr	r8, [sp, #16]
   17104:	str	r6, [sp, #28]
   17108:	add	r0, r8, sl, lsl #3
   1710c:	str	r6, [r0, #4]
   17110:	b	171c4 <__assert_fail@plt+0x4e8c>
   17114:	mvn	r4, #0
   17118:	movw	r0, #34708	; 0x8794
   1711c:	movt	r0, #3
   17120:	str	r4, [r0]
   17124:	cmn	r4, #1
   17128:	bgt	171d8 <__assert_fail@plt+0x4ea0>
   1712c:	cmp	r5, #0
   17130:	beq	17150 <__assert_fail@plt+0x4e18>
   17134:	ldr	r1, [r8]
   17138:	mov	r0, #3
   1713c:	add	r2, sp, #40	; 0x28
   17140:	bl	122f0 <__xstat64@plt>
   17144:	cmp	r0, #0
   17148:	bne	171bc <__assert_fail@plt+0x4e84>
   1714c:	b	17168 <__assert_fail@plt+0x4e30>
   17150:	mov	r0, #3
   17154:	mov	r1, #0
   17158:	add	r2, sp, #40	; 0x28
   1715c:	bl	11ff0 <__fxstat64@plt>
   17160:	cmp	r0, #0
   17164:	bne	171bc <__assert_fail@plt+0x4e84>
   17168:	ldr	r1, [sp, #24]
   1716c:	movw	r0, #34712	; 0x8798
   17170:	movt	r0, #3
   17174:	and	r0, r0, r4, asr #31
   17178:	ldrd	r2, [r0, #96]	; 0x60
   1717c:	ldrd	r4, [r1]
   17180:	eor	r1, r5, r3
   17184:	eor	r2, r4, r2
   17188:	orrs	r1, r2, r1
   1718c:	bne	171bc <__assert_fail@plt+0x4e84>
   17190:	ldrd	r0, [r0]
   17194:	ldr	r2, [sp, #40]	; 0x28
   17198:	ldr	r3, [sp, #44]	; 0x2c
   1719c:	eor	r1, r3, r1
   171a0:	eor	r0, r2, r0
   171a4:	orrs	r0, r0, r1
   171a8:	beq	17040 <__assert_fail@plt+0x4d08>
   171ac:	ldr	r8, [sp, #16]
   171b0:	ldr	r5, [sp, #32]
   171b4:	ldr	r7, [sp, #20]
   171b8:	b	171c4 <__assert_fail@plt+0x4e8c>
   171bc:	ldr	r8, [sp, #16]
   171c0:	mov	r5, r6
   171c4:	add	sl, sl, #1
   171c8:	add	r9, r9, #8
   171cc:	cmp	sl, r7
   171d0:	bcc	17000 <__assert_fail@plt+0x4cc8>
   171d4:	b	171e0 <__assert_fail@plt+0x4ea8>
   171d8:	ldr	r8, [sp, #16]
   171dc:	mov	r5, r6
   171e0:	add	r0, r8, #8
   171e4:	sub	r4, r8, #8
   171e8:	sub	r9, fp, #32
   171ec:	str	r0, [sp, #28]
   171f0:	b	1725c <__assert_fail@plt+0x4f24>
   171f4:	mov	r7, r0
   171f8:	add	r0, r0, #9
   171fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17200:	cmp	r6, sl
   17204:	mov	r5, r6
   17208:	mov	r2, sl
   1720c:	str	r0, [sp, #32]
   17210:	stm	sp, {r0, r8}
   17214:	mov	r8, sl
   17218:	movcc	r8, r6
   1721c:	ldr	r6, [sp, #16]
   17220:	mov	r1, r8
   17224:	mov	r0, r6
   17228:	bl	19610 <__assert_fail@plt+0x72d8>
   1722c:	ldr	r0, [sp, #32]
   17230:	add	r1, r6, sl, lsl #3
   17234:	stm	r6, {r0, r7}
   17238:	ldr	r0, [sp, #20]
   1723c:	sub	r7, r0, sl
   17240:	ldr	r0, [sp, #28]
   17244:	lsl	r2, r7, #3
   17248:	bl	11e7c <memmove@plt>
   1724c:	add	r0, r5, #1
   17250:	add	r7, r7, #1
   17254:	sub	r5, r0, r8
   17258:	mov	r8, r6
   1725c:	mov	r0, r8
   17260:	mov	r1, r7
   17264:	add	r2, sp, #40	; 0x28
   17268:	bl	19358 <__assert_fail@plt+0x7020>
   1726c:	mov	sl, r0
   17270:	cmp	r0, r7
   17274:	str	r7, [sp, #20]
   17278:	bne	172b4 <__assert_fail@plt+0x4f7c>
   1727c:	ldr	r0, [sp, #12]
   17280:	movw	r1, #26459	; 0x675b
   17284:	movt	r1, #2
   17288:	bl	17428 <__assert_fail@plt+0x50f0>
   1728c:	cmp	r0, #0
   17290:	bne	172f8 <__assert_fail@plt+0x4fc0>
   17294:	mov	r6, r5
   17298:	bl	12164 <__errno_location@plt>
   1729c:	cmp	r7, #3
   172a0:	bcc	17340 <__assert_fail@plt+0x5008>
   172a4:	ldr	r0, [r0]
   172a8:	cmp	r0, #24
   172ac:	beq	172c0 <__assert_fail@plt+0x4f88>
   172b0:	b	17340 <__assert_fail@plt+0x5008>
   172b4:	mov	r6, r5
   172b8:	cmp	sl, #2
   172bc:	bls	1735c <__assert_fail@plt+0x5024>
   172c0:	ldr	r8, [sp, #40]	; 0x28
   172c4:	sub	r5, r8, #4
   172c8:	ldr	r1, [r4, sl, lsl #3]
   172cc:	ldr	r0, [r5, sl, lsl #2]
   172d0:	bl	169f0 <__assert_fail@plt+0x46b8>
   172d4:	sub	sl, sl, #1
   172d8:	mov	r1, #0
   172dc:	mov	r0, r9
   172e0:	cmp	sl, #2
   172e4:	movwhi	r1, #1
   172e8:	bl	19e0c <__assert_fail@plt+0x7ad4>
   172ec:	cmp	r0, #0
   172f0:	beq	172c8 <__assert_fail@plt+0x4f90>
   172f4:	b	171f4 <__assert_fail@plt+0x4ebc>
   172f8:	mov	r3, r0
   172fc:	ldr	r0, [sp, #40]	; 0x28
   17300:	ldr	r1, [sp, #12]
   17304:	mov	r2, r7
   17308:	str	r1, [sp]
   1730c:	str	r0, [sp, #4]
   17310:	mov	r0, r8
   17314:	mov	r1, r5
   17318:	bl	19610 <__assert_fail@plt+0x72d8>
   1731c:	sub	sp, fp, #28
   17320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17324:	movw	r1, #25447	; 0x6367
   17328:	mov	r0, #0
   1732c:	mov	r2, #5
   17330:	movt	r1, #2
   17334:	bl	11f54 <dcgettext@plt>
   17338:	ldr	r1, [r7, r5, lsl #3]
   1733c:	bl	173b4 <__assert_fail@plt+0x507c>
   17340:	movw	r1, #25447	; 0x6367
   17344:	mov	r0, #0
   17348:	mov	r2, #5
   1734c:	movt	r1, #2
   17350:	bl	11f54 <dcgettext@plt>
   17354:	ldr	r1, [sp, #12]
   17358:	bl	173b4 <__assert_fail@plt+0x507c>
   1735c:	movw	r1, #25447	; 0x6367
   17360:	mov	r0, #0
   17364:	mov	r2, #5
   17368:	movt	r1, #2
   1736c:	bl	11f54 <dcgettext@plt>
   17370:	ldr	r1, [r8, sl, lsl #3]
   17374:	bl	173b4 <__assert_fail@plt+0x507c>
   17378:	movw	r1, #25447	; 0x6367
   1737c:	mov	r0, #0
   17380:	mov	r2, #5
   17384:	movt	r1, #2
   17388:	bl	11f54 <dcgettext@plt>
   1738c:	ldr	r1, [r6, r5, lsl #3]
   17390:	bl	173b4 <__assert_fail@plt+0x507c>
   17394:	movw	r1, #25447	; 0x6367
   17398:	mov	r0, #0
   1739c:	mov	r2, #5
   173a0:	movt	r1, #2
   173a4:	bl	11f54 <dcgettext@plt>
   173a8:	ldr	r1, [sp, #16]
   173ac:	ldr	r1, [r1, r9]
   173b0:	bl	173b4 <__assert_fail@plt+0x507c>
   173b4:	push	{fp, lr}
   173b8:	mov	fp, sp
   173bc:	sub	sp, sp, #8
   173c0:	mov	r6, r1
   173c4:	mov	r4, r0
   173c8:	bl	12164 <__errno_location@plt>
   173cc:	ldr	r5, [r0]
   173d0:	cmp	r6, #0
   173d4:	bne	173f0 <__assert_fail@plt+0x50b8>
   173d8:	movw	r1, #26744	; 0x6878
   173dc:	mov	r0, #0
   173e0:	mov	r2, #5
   173e4:	movt	r1, #2
   173e8:	bl	11f54 <dcgettext@plt>
   173ec:	mov	r6, r0
   173f0:	mov	r0, #0
   173f4:	mov	r1, #3
   173f8:	mov	r2, r6
   173fc:	bl	20630 <__assert_fail@plt+0xe2f8>
   17400:	movw	r2, #26737	; 0x6871
   17404:	str	r0, [sp]
   17408:	mov	r0, #2
   1740c:	mov	r1, r5
   17410:	mov	r3, r4
   17414:	movt	r2, #2
   17418:	bl	12080 <error@plt>
   1741c:	ldr	r1, [r1]
   17420:	ldr	r0, [r0]
   17424:	b	11e28 <strcmp@plt>
   17428:	push	{r4, r5, r6, r7, fp, lr}
   1742c:	add	fp, sp, #16
   17430:	mov	r4, r0
   17434:	ldrb	r0, [r1]
   17438:	cmp	r0, #119	; 0x77
   1743c:	beq	17488 <__assert_fail@plt+0x5150>
   17440:	cmp	r0, #114	; 0x72
   17444:	bne	17558 <__assert_fail@plt+0x5220>
   17448:	mov	r5, r1
   1744c:	movw	r1, #25582	; 0x63ee
   17450:	mov	r0, r4
   17454:	movt	r1, #2
   17458:	bl	11e28 <strcmp@plt>
   1745c:	cmp	r0, #0
   17460:	beq	17520 <__assert_fail@plt+0x51e8>
   17464:	mov	r0, r4
   17468:	mov	r1, #524288	; 0x80000
   1746c:	bl	1208c <open64@plt>
   17470:	cmp	r0, #0
   17474:	blt	17540 <__assert_fail@plt+0x5208>
   17478:	mov	r1, r5
   1747c:	bl	11df8 <fdopen@plt>
   17480:	mov	r4, r0
   17484:	b	17544 <__assert_fail@plt+0x520c>
   17488:	cmp	r4, #0
   1748c:	beq	1750c <__assert_fail@plt+0x51d4>
   17490:	mov	r0, #1
   17494:	mov	r2, #0
   17498:	mov	r3, #0
   1749c:	bl	11f24 <ftruncate64@plt>
   174a0:	cmp	r0, #0
   174a4:	beq	1750c <__assert_fail@plt+0x51d4>
   174a8:	bl	12164 <__errno_location@plt>
   174ac:	movw	r7, #34708	; 0x8794
   174b0:	mov	r6, r0
   174b4:	movt	r7, #3
   174b8:	ldr	r5, [r6]
   174bc:	ldr	r0, [r7]
   174c0:	cmp	r0, #0
   174c4:	bne	174ec <__assert_fail@plt+0x51b4>
   174c8:	movw	r2, #34712	; 0x8798
   174cc:	mov	r0, #3
   174d0:	mov	r1, #1
   174d4:	movt	r2, #3
   174d8:	bl	11ff0 <__fxstat64@plt>
   174dc:	cmp	r0, #0
   174e0:	ldrne	r0, [r6]
   174e4:	mvneq	r0, #0
   174e8:	str	r0, [r7]
   174ec:	cmn	r0, #1
   174f0:	bgt	17578 <__assert_fail@plt+0x5240>
   174f4:	movw	r0, #34712	; 0x8798
   174f8:	movt	r0, #3
   174fc:	ldr	r0, [r0, #16]
   17500:	and	r0, r0, #61440	; 0xf000
   17504:	cmp	r0, #32768	; 0x8000
   17508:	beq	17578 <__assert_fail@plt+0x5240>
   1750c:	movw	r0, #33492	; 0x82d4
   17510:	movt	r0, #3
   17514:	ldr	r4, [r0]
   17518:	mov	r0, r4
   1751c:	pop	{r4, r5, r6, r7, fp, pc}
   17520:	movw	r0, #33513	; 0x82e9
   17524:	mov	r1, #1
   17528:	movt	r0, #3
   1752c:	strb	r1, [r0]
   17530:	movw	r0, #33488	; 0x82d0
   17534:	movt	r0, #3
   17538:	ldr	r4, [r0]
   1753c:	b	17544 <__assert_fail@plt+0x520c>
   17540:	mov	r4, #0
   17544:	mov	r0, r4
   17548:	mov	r1, #2
   1754c:	bl	1c6b8 <__assert_fail@plt+0xa380>
   17550:	mov	r0, r4
   17554:	pop	{r4, r5, r6, r7, fp, pc}
   17558:	movw	r0, #25480	; 0x6388
   1755c:	movw	r1, #23503	; 0x5bcf
   17560:	movw	r3, #25521	; 0x63b1
   17564:	movw	r2, #981	; 0x3d5
   17568:	movt	r0, #2
   1756c:	movt	r1, #2
   17570:	movt	r3, #2
   17574:	bl	12338 <__assert_fail@plt>
   17578:	movw	r1, #25459	; 0x6373
   1757c:	mov	r0, #0
   17580:	mov	r2, #5
   17584:	movt	r1, #2
   17588:	bl	11f54 <dcgettext@plt>
   1758c:	mov	r6, r0
   17590:	mov	r0, #0
   17594:	mov	r1, #3
   17598:	mov	r2, r4
   1759c:	bl	20630 <__assert_fail@plt+0xe2f8>
   175a0:	mov	r3, r0
   175a4:	mov	r0, #2
   175a8:	mov	r1, r5
   175ac:	mov	r2, r6
   175b0:	bl	12080 <error@plt>
   175b4:	ldrb	r2, [r0, #24]
   175b8:	cmp	r2, #0
   175bc:	bne	175cc <__assert_fail@plt+0x5294>
   175c0:	ldrb	r2, [r0, #25]
   175c4:	cmp	r2, #0
   175c8:	beq	175d4 <__assert_fail@plt+0x529c>
   175cc:	mov	r2, #98	; 0x62
   175d0:	strb	r2, [r1], #1
   175d4:	ldr	r2, [r0, #16]
   175d8:	movw	r3, #34184	; 0x8588
   175dc:	movt	r3, #3
   175e0:	cmp	r2, r3
   175e4:	movw	r3, #33928	; 0x8488
   175e8:	moveq	r2, #100	; 0x64
   175ec:	movt	r3, #3
   175f0:	strbeq	r2, [r1], #1
   175f4:	ldr	r2, [r0, #20]
   175f8:	cmp	r2, #0
   175fc:	movne	r2, #102	; 0x66
   17600:	strbne	r2, [r1], #1
   17604:	ldrb	r2, [r0, #28]
   17608:	cmp	r2, #0
   1760c:	movne	r2, #103	; 0x67
   17610:	strbne	r2, [r1], #1
   17614:	ldrb	r2, [r0, #29]
   17618:	cmp	r2, #0
   1761c:	movne	r2, #104	; 0x68
   17620:	strbne	r2, [r1], #1
   17624:	ldr	r2, [r0, #16]
   17628:	cmp	r2, r3
   1762c:	moveq	r2, #105	; 0x69
   17630:	strbeq	r2, [r1], #1
   17634:	ldrb	r2, [r0, #30]
   17638:	cmp	r2, #0
   1763c:	movne	r2, #77	; 0x4d
   17640:	strbne	r2, [r1], #1
   17644:	ldrb	r2, [r0, #26]
   17648:	cmp	r2, #0
   1764c:	movne	r2, #110	; 0x6e
   17650:	strbne	r2, [r1], #1
   17654:	ldrb	r2, [r0, #27]
   17658:	cmp	r2, #0
   1765c:	movne	r2, #82	; 0x52
   17660:	strbne	r2, [r1], #1
   17664:	ldrb	r2, [r0, #31]
   17668:	cmp	r2, #0
   1766c:	movne	r2, #114	; 0x72
   17670:	strbne	r2, [r1], #1
   17674:	ldrb	r0, [r0, #32]
   17678:	cmp	r0, #0
   1767c:	movne	r0, #86	; 0x56
   17680:	strbne	r0, [r1], #1
   17684:	mov	r0, #0
   17688:	strb	r0, [r1]
   1768c:	bx	lr
   17690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17694:	add	fp, sp, #28
   17698:	sub	sp, sp, #36	; 0x24
   1769c:	mov	r8, r0
   176a0:	movw	r0, #33655	; 0x8377
   176a4:	mov	r6, #10
   176a8:	movt	r0, #3
   176ac:	ldrb	r3, [r8, #24]
   176b0:	ldrb	r0, [r0]
   176b4:	cmp	r0, #0
   176b8:	mov	r0, #0
   176bc:	movwne	r6, #0
   176c0:	cmp	r3, #0
   176c4:	beq	176d0 <__assert_fail@plt+0x5398>
   176c8:	sub	sp, fp, #28
   176cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d0:	ldr	r0, [r8, #20]
   176d4:	str	r2, [sp]
   176d8:	ldr	r2, [r8, #16]
   176dc:	ldr	ip, [r8, #4]
   176e0:	str	r1, [sp, #16]
   176e4:	str	r0, [sp, #20]
   176e8:	movw	r0, #33656	; 0x8378
   176ec:	cmp	ip, r2
   176f0:	movt	r0, #3
   176f4:	ldr	r4, [r0]
   176f8:	movw	r0, #33368	; 0x8258
   176fc:	movt	r0, #3
   17700:	ldr	r5, [r0]
   17704:	beq	17728 <__assert_fail@plt+0x53f0>
   17708:	ldr	r0, [r8]
   1770c:	add	r1, r0, ip
   17710:	sub	r1, r1, r2
   17714:	bl	11e7c <memmove@plt>
   17718:	ldr	ip, [r8, #16]
   1771c:	mov	r0, #0
   17720:	str	ip, [r8, #4]
   17724:	str	r0, [r8, #8]
   17728:	ldr	r0, [sp, #20]
   1772c:	str	r6, [sp, #24]
   17730:	sub	r9, r5, #18
   17734:	add	r6, r0, #1
   17738:	rsb	r0, r0, #0
   1773c:	stmib	sp, {r0, r6, r8}
   17740:	b	1776c <__assert_fail@plt+0x5434>
   17744:	lsr	r1, r1, #4
   17748:	mov	r2, #16
   1774c:	str	r1, [sp, #32]
   17750:	add	r1, sp, #32
   17754:	bl	223b4 <__assert_fail@plt+0x1007c>
   17758:	str	r0, [r8]
   1775c:	ldr	r0, [sp, #32]
   17760:	lsl	r0, r0, #4
   17764:	str	r0, [r8, #12]
   17768:	ldr	ip, [r8, #4]
   1776c:	ldr	sl, [r8]
   17770:	ldr	r3, [r8, #8]
   17774:	ldr	r2, [r8, #12]
   17778:	ldr	r1, [sp, #4]
   1777c:	add	r5, sl, r2
   17780:	cmp	r3, #0
   17784:	add	r0, sl, ip
   17788:	mla	r7, r3, r1, r5
   1778c:	movne	r2, r5
   17790:	rsbne	r1, r3, #0
   17794:	sub	r5, r5, r3, lsl #4
   17798:	ldrne	r1, [r2, r1, lsl #4]!
   1779c:	sub	r7, r7, r0
   177a0:	ldrne	r2, [r2, #4]
   177a4:	addne	sl, r1, r2
   177a8:	cmp	r6, r7
   177ac:	bcs	17930 <__assert_fail@plt+0x55f8>
   177b0:	ldr	r3, [sp, #16]
   177b4:	sub	r1, r7, #1
   177b8:	mov	r8, r0
   177bc:	udiv	r6, r1, r6
   177c0:	mov	r1, #1
   177c4:	mov	r2, r6
   177c8:	bl	122d8 <fread_unlocked@plt>
   177cc:	add	ip, r8, r0
   177d0:	cmp	r0, r6
   177d4:	bne	177e0 <__assert_fail@plt+0x54a8>
   177d8:	ldr	r1, [sp, #24]
   177dc:	b	1782c <__assert_fail@plt+0x54f4>
   177e0:	ldr	r1, [sp, #16]
   177e4:	ldr	r2, [r1]
   177e8:	ldr	r1, [sp, #24]
   177ec:	tst	r2, #32
   177f0:	bne	17988 <__assert_fail@plt+0x5650>
   177f4:	ldr	r6, [sp, #12]
   177f8:	tst	r2, #16
   177fc:	beq	1782c <__assert_fail@plt+0x54f4>
   17800:	mov	r2, #1
   17804:	strb	r2, [r6, #24]
   17808:	ldr	r2, [r6]
   1780c:	cmp	r2, ip
   17810:	beq	1797c <__assert_fail@plt+0x5644>
   17814:	cmp	sl, ip
   17818:	mov	r2, sl
   1781c:	beq	17830 <__assert_fail@plt+0x54f8>
   17820:	ldrb	r2, [ip, #-1]
   17824:	cmp	r2, r1
   17828:	strbne	r1, [ip], #1
   1782c:	mov	r2, ip
   17830:	sub	r7, r7, r0
   17834:	str	r2, [sp, #28]
   17838:	sub	r2, r2, r8
   1783c:	mov	r0, r8
   17840:	bl	121d0 <memchr@plt>
   17844:	cmp	r0, #0
   17848:	beq	17910 <__assert_fail@plt+0x55d8>
   1784c:	mov	r6, sl
   17850:	mov	r8, r5
   17854:	mov	sl, r0
   17858:	mov	r1, #0
   1785c:	strb	r1, [sl], #1
   17860:	str	r6, [r5, #-16]!
   17864:	sub	r1, sl, r6
   17868:	cmp	r9, r1
   1786c:	str	r1, [r5, #4]
   17870:	movls	r9, r1
   17874:	cmp	r4, #0
   17878:	beq	178e4 <__assert_fail@plt+0x55ac>
   1787c:	ldr	r1, [r4, #8]
   17880:	cmn	r1, #1
   17884:	beq	17894 <__assert_fail@plt+0x555c>
   17888:	mov	r0, r5
   1788c:	mov	r1, r4
   17890:	bl	19028 <__assert_fail@plt+0x6cf0>
   17894:	str	r0, [r8, #-4]
   17898:	ldr	r0, [r4]
   1789c:	cmn	r0, #1
   178a0:	beq	178b8 <__assert_fail@plt+0x5580>
   178a4:	mov	r0, r5
   178a8:	mov	r1, r4
   178ac:	bl	19160 <__assert_fail@plt+0x6e28>
   178b0:	mov	r6, r0
   178b4:	b	178e0 <__assert_fail@plt+0x55a8>
   178b8:	ldrb	r0, [r4, #24]
   178bc:	cmp	r0, #0
   178c0:	beq	178e0 <__assert_fail@plt+0x55a8>
   178c4:	movw	r1, #33672	; 0x8388
   178c8:	sub	r6, r6, #1
   178cc:	movt	r1, #3
   178d0:	ldrb	r0, [r6, #1]!
   178d4:	ldrb	r0, [r1, r0]
   178d8:	cmp	r0, #0
   178dc:	bne	178d0 <__assert_fail@plt+0x5598>
   178e0:	str	r6, [r8, #-8]
   178e4:	ldr	r0, [sp, #20]
   178e8:	ldr	r1, [sp, #24]
   178ec:	sub	r7, r7, r0
   178f0:	ldr	r0, [sp, #28]
   178f4:	sub	r2, r0, sl
   178f8:	mov	r0, sl
   178fc:	bl	121d0 <memchr@plt>
   17900:	cmp	r0, #0
   17904:	mov	r6, sl
   17908:	mov	r8, r5
   1790c:	bne	17854 <__assert_fail@plt+0x551c>
   17910:	ldr	r8, [sp, #12]
   17914:	ldr	r2, [sp, #28]
   17918:	ldr	r6, [sp, #8]
   1791c:	ldrb	r0, [r8, #24]
   17920:	cmp	r0, #0
   17924:	mov	r0, r2
   17928:	beq	177a8 <__assert_fail@plt+0x5470>
   1792c:	b	17934 <__assert_fail@plt+0x55fc>
   17930:	mov	r2, r0
   17934:	ldr	r0, [r8]
   17938:	ldr	r1, [r8, #12]
   1793c:	add	r3, r0, r1
   17940:	sub	r7, r2, r0
   17944:	subs	r3, r3, r5
   17948:	str	r7, [r8, #4]
   1794c:	asr	r3, r3, #4
   17950:	str	r3, [r8, #8]
   17954:	beq	17744 <__assert_fail@plt+0x540c>
   17958:	movw	r1, #33368	; 0x8258
   1795c:	sub	r0, r2, sl
   17960:	str	r0, [r8, #16]
   17964:	add	r0, r9, #18
   17968:	movt	r1, #3
   1796c:	str	r0, [r1]
   17970:	mov	r0, #1
   17974:	sub	sp, fp, #28
   17978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1797c:	mov	r0, #0
   17980:	sub	sp, fp, #28
   17984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17988:	movw	r1, #26299	; 0x66bb
   1798c:	mov	r0, #0
   17990:	mov	r2, #5
   17994:	movt	r1, #2
   17998:	bl	11f54 <dcgettext@plt>
   1799c:	ldr	r1, [sp]
   179a0:	bl	173b4 <__assert_fail@plt+0x507c>
   179a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179a8:	add	fp, sp, #28
   179ac:	sub	sp, sp, #4
   179b0:	vpush	{d8}
   179b4:	sub	sp, sp, #8448	; 0x2100
   179b8:	mov	r9, r0
   179bc:	movw	r0, #33656	; 0x8378
   179c0:	mov	r5, r1
   179c4:	movt	r0, #3
   179c8:	ldr	ip, [r0]
   179cc:	cmp	ip, #0
   179d0:	beq	18844 <__assert_fail@plt+0x650c>
   179d4:	add	lr, sp, #3072	; 0xc00
   179d8:	ldr	sl, [r5, #8]
   179dc:	ldr	r6, [r5, #12]
   179e0:	ldr	r7, [r9, #8]
   179e4:	ldr	r8, [r9, #12]
   179e8:	str	r9, [sp, #64]	; 0x40
   179ec:	str	r5, [sp, #60]	; 0x3c
   179f0:	add	r0, lr, #1016	; 0x3f8
   179f4:	sub	lr, fp, #3072	; 0xc00
   179f8:	add	r0, r0, #156	; 0x9c
   179fc:	sub	r1, lr, #1016	; 0x3f8
   17a00:	str	r0, [sp, #24]
   17a04:	add	r1, r1, #16
   17a08:	str	r1, [sp, #4]
   17a0c:	b	17a38 <__assert_fail@plt+0x5700>
   17a10:	mov	r0, r9
   17a14:	mov	r1, ip
   17a18:	mov	r4, ip
   17a1c:	bl	19160 <__assert_fail@plt+0x6e28>
   17a20:	mov	r7, r0
   17a24:	mov	r0, r5
   17a28:	mov	r1, r4
   17a2c:	bl	19160 <__assert_fail@plt+0x6e28>
   17a30:	mov	ip, r4
   17a34:	mov	sl, r0
   17a38:	cmp	sl, r6
   17a3c:	movw	r0, #33504	; 0x82e0
   17a40:	ldr	r9, [ip, #16]
   17a44:	str	ip, [sp, #84]	; 0x54
   17a48:	movhi	r6, sl
   17a4c:	cmp	r7, r8
   17a50:	movt	r0, #3
   17a54:	movhi	r8, r7
   17a58:	ldrb	r0, [r0]
   17a5c:	sub	r5, r6, sl
   17a60:	mov	r2, r8
   17a64:	sub	r4, r8, r7
   17a68:	ldr	r8, [ip, #20]
   17a6c:	cmp	r0, #0
   17a70:	bne	17abc <__assert_fail@plt+0x5784>
   17a74:	ldrb	r0, [ip, #26]
   17a78:	cmp	r0, #0
   17a7c:	bne	17abc <__assert_fail@plt+0x5784>
   17a80:	ldrb	r0, [ip, #28]
   17a84:	cmp	r0, #0
   17a88:	bne	17abc <__assert_fail@plt+0x5784>
   17a8c:	ldrb	r0, [ip, #29]
   17a90:	cmp	r0, #0
   17a94:	bne	17abc <__assert_fail@plt+0x5784>
   17a98:	ldrb	r0, [ip, #30]
   17a9c:	cmp	r0, #0
   17aa0:	bne	17abc <__assert_fail@plt+0x5784>
   17aa4:	ldrb	r0, [ip, #27]
   17aa8:	cmp	r0, #0
   17aac:	bne	17abc <__assert_fail@plt+0x5784>
   17ab0:	ldrb	r0, [ip, #32]
   17ab4:	cmp	r0, #0
   17ab8:	beq	18630 <__assert_fail@plt+0x62f8>
   17abc:	orrs	r0, r8, r9
   17ac0:	movwne	r0, #1
   17ac4:	str	r0, [sp, #76]	; 0x4c
   17ac8:	beq	17bbc <__assert_fail@plt+0x5884>
   17acc:	add	r0, r5, r4
   17ad0:	mov	r1, #0
   17ad4:	mov	r6, #0
   17ad8:	add	r2, sp, #88	; 0x58
   17adc:	add	r0, r0, #2
   17ae0:	str	r1, [sp, #68]	; 0x44
   17ae4:	cmp	r0, #4000	; 0xfa0
   17ae8:	bls	17afc <__assert_fail@plt+0x57c4>
   17aec:	bl	22208 <__assert_fail@plt+0xfed0>
   17af0:	ldr	ip, [sp, #84]	; 0x54
   17af4:	mov	r2, r0
   17af8:	str	r0, [sp, #68]	; 0x44
   17afc:	add	r0, r2, r4
   17b00:	cmp	r4, #0
   17b04:	beq	17b4c <__assert_fail@plt+0x5814>
   17b08:	mov	r6, #0
   17b0c:	cmp	r9, #0
   17b10:	beq	17b24 <__assert_fail@plt+0x57ec>
   17b14:	ldrb	r1, [r7]
   17b18:	ldrb	r1, [r9, r1]
   17b1c:	cmp	r1, #0
   17b20:	bne	17b40 <__assert_fail@plt+0x5808>
   17b24:	cmp	r8, #0
   17b28:	mov	r1, r7
   17b2c:	ldrbne	r1, [r7]
   17b30:	addne	r1, r8, r1
   17b34:	ldrb	r1, [r1]
   17b38:	strb	r1, [r2, r6]
   17b3c:	add	r6, r6, #1
   17b40:	add	r7, r7, #1
   17b44:	subs	r4, r4, #1
   17b48:	bne	17b0c <__assert_fail@plt+0x57d4>
   17b4c:	movw	r3, #33672	; 0x8388
   17b50:	mov	r4, #0
   17b54:	add	r7, r0, #1
   17b58:	cmp	r5, #0
   17b5c:	mov	r1, #0
   17b60:	movt	r3, #3
   17b64:	strb	r4, [r2, r6]
   17b68:	beq	17bb0 <__assert_fail@plt+0x5878>
   17b6c:	mov	r4, #0
   17b70:	cmp	r9, #0
   17b74:	beq	17b88 <__assert_fail@plt+0x5850>
   17b78:	ldrb	r0, [sl]
   17b7c:	ldrb	r0, [r9, r0]
   17b80:	cmp	r0, #0
   17b84:	bne	17ba4 <__assert_fail@plt+0x586c>
   17b88:	cmp	r8, #0
   17b8c:	mov	r0, sl
   17b90:	ldrbne	r0, [sl]
   17b94:	addne	r0, r8, r0
   17b98:	ldrb	r0, [r0]
   17b9c:	strb	r0, [r7, r4]
   17ba0:	add	r4, r4, #1
   17ba4:	add	sl, sl, #1
   17ba8:	subs	r5, r5, #1
   17bac:	bne	17b70 <__assert_fail@plt+0x5838>
   17bb0:	str	r6, [sp, #80]	; 0x50
   17bb4:	add	r6, r7, r4
   17bb8:	b	17bec <__assert_fail@plt+0x58b4>
   17bbc:	ldrb	r0, [r2]
   17bc0:	mov	r1, #0
   17bc4:	movw	r3, #33672	; 0x8388
   17bc8:	str	r4, [sp, #80]	; 0x50
   17bcc:	mov	r4, r5
   17bd0:	strb	r1, [r2]
   17bd4:	mov	r2, r7
   17bd8:	mov	r7, sl
   17bdc:	movt	r3, #3
   17be0:	str	r0, [sp, #56]	; 0x38
   17be4:	ldrb	r0, [r6]
   17be8:	str	r0, [sp, #52]	; 0x34
   17bec:	strb	r1, [r6]
   17bf0:	str	r2, [sp, #72]	; 0x48
   17bf4:	ldrb	r0, [ip, #26]
   17bf8:	cmp	r0, #0
   17bfc:	beq	17cd8 <__assert_fail@plt+0x59a0>
   17c00:	ldr	r8, [sp, #80]	; 0x50
   17c04:	sub	r0, r2, #1
   17c08:	ldrb	r1, [r0, #1]!
   17c0c:	ldrb	r1, [r3, r1]
   17c10:	cmp	r1, #0
   17c14:	bne	17c08 <__assert_fail@plt+0x58d0>
   17c18:	sub	r1, r7, #1
   17c1c:	ldrb	r2, [r1, #1]!
   17c20:	ldrb	r2, [r3, r2]
   17c24:	cmp	r2, #0
   17c28:	bne	17c1c <__assert_fail@plt+0x58e4>
   17c2c:	movw	r2, #33508	; 0x82e4
   17c30:	movt	r2, #3
   17c34:	ldr	r3, [r2]
   17c38:	movw	r2, #33506	; 0x82e2
   17c3c:	movt	r2, #3
   17c40:	ldrb	r2, [r2]
   17c44:	bl	21654 <__assert_fail@plt+0xf31c>
   17c48:	mov	r3, r0
   17c4c:	ldr	r0, [sp, #76]	; 0x4c
   17c50:	cmp	r0, #0
   17c54:	beq	17c6c <__assert_fail@plt+0x5934>
   17c58:	ldr	r0, [sp, #68]	; 0x44
   17c5c:	mov	r4, r3
   17c60:	bl	1cc78 <__assert_fail@plt+0xa940>
   17c64:	mov	r3, r4
   17c68:	b	17c80 <__assert_fail@plt+0x5948>
   17c6c:	ldr	r0, [sp, #56]	; 0x38
   17c70:	ldr	r1, [sp, #72]	; 0x48
   17c74:	strb	r0, [r1, r8]
   17c78:	ldr	r0, [sp, #52]	; 0x34
   17c7c:	strb	r0, [r7, r4]
   17c80:	ldr	ip, [sp, #84]	; 0x54
   17c84:	cmp	r3, #0
   17c88:	bne	188f4 <__assert_fail@plt+0x65bc>
   17c8c:	ldr	ip, [ip, #36]	; 0x24
   17c90:	cmp	ip, #0
   17c94:	beq	18810 <__assert_fail@plt+0x64d8>
   17c98:	ldr	r0, [ip, #8]
   17c9c:	ldr	r9, [sp, #64]	; 0x40
   17ca0:	ldr	r5, [sp, #60]	; 0x3c
   17ca4:	cmn	r0, #1
   17ca8:	beq	17d44 <__assert_fail@plt+0x5a0c>
   17cac:	mov	r0, r9
   17cb0:	mov	r1, ip
   17cb4:	mov	r4, ip
   17cb8:	bl	19028 <__assert_fail@plt+0x6cf0>
   17cbc:	mov	r8, r0
   17cc0:	mov	r0, r5
   17cc4:	mov	r1, r4
   17cc8:	bl	19028 <__assert_fail@plt+0x6cf0>
   17ccc:	mov	ip, r4
   17cd0:	mov	r6, r0
   17cd4:	b	17d5c <__assert_fail@plt+0x5a24>
   17cd8:	ldrb	r0, [ip, #28]
   17cdc:	ldr	r8, [sp, #80]	; 0x50
   17ce0:	cmp	r0, #0
   17ce4:	beq	17dd8 <__assert_fail@plt+0x5aa0>
   17ce8:	sub	lr, fp, #3072	; 0xc00
   17cec:	mov	r0, r2
   17cf0:	sub	r1, lr, #1016	; 0x3f8
   17cf4:	bl	11f18 <strtold@plt>
   17cf8:	mov	r0, r7
   17cfc:	sub	r1, fp, #52	; 0x34
   17d00:	vmov.f64	d8, d0
   17d04:	bl	11f18 <strtold@plt>
   17d08:	add	lr, sp, #3072	; 0xc00
   17d0c:	ldr	r2, [sp, #72]	; 0x48
   17d10:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17d14:	add	r1, lr, #1016	; 0x3f8
   17d18:	ldr	r1, [r1, #312]	; 0x138
   17d1c:	cmp	r1, r2
   17d20:	beq	17e90 <__assert_fail@plt+0x5b58>
   17d24:	mov	r3, #1
   17d28:	cmp	r0, r7
   17d2c:	beq	17c4c <__assert_fail@plt+0x5914>
   17d30:	vcmpe.f64	d8, d0
   17d34:	vmrs	APSR_nzcv, fpscr
   17d38:	bpl	17f4c <__assert_fail@plt+0x5c14>
   17d3c:	mvn	r3, #0
   17d40:	b	17c4c <__assert_fail@plt+0x5914>
   17d44:	ldm	r5, {r0, r1}
   17d48:	add	r0, r0, r1
   17d4c:	sub	r6, r0, #1
   17d50:	ldm	r9, {r0, r1}
   17d54:	add	r0, r0, r1
   17d58:	sub	r8, r0, #1
   17d5c:	ldr	r0, [ip]
   17d60:	cmn	r0, #1
   17d64:	bne	17a10 <__assert_fail@plt+0x56d8>
   17d68:	ldrb	r0, [ip, #24]
   17d6c:	ldr	sl, [r5]
   17d70:	ldr	r7, [r9]
   17d74:	cmp	r0, #0
   17d78:	beq	17a38 <__assert_fail@plt+0x5700>
   17d7c:	cmp	r7, r8
   17d80:	bcs	17da8 <__assert_fail@plt+0x5a70>
   17d84:	movw	r1, #33672	; 0x8388
   17d88:	movt	r1, #3
   17d8c:	ldrb	r0, [r7]
   17d90:	ldrb	r0, [r1, r0]
   17d94:	cmp	r0, #0
   17d98:	beq	17da8 <__assert_fail@plt+0x5a70>
   17d9c:	add	r7, r7, #1
   17da0:	cmp	r7, r8
   17da4:	bcc	17d8c <__assert_fail@plt+0x5a54>
   17da8:	cmp	sl, r6
   17dac:	bcs	17a38 <__assert_fail@plt+0x5700>
   17db0:	movw	r1, #33672	; 0x8388
   17db4:	movt	r1, #3
   17db8:	ldrb	r0, [sl]
   17dbc:	ldrb	r0, [r1, r0]
   17dc0:	cmp	r0, #0
   17dc4:	beq	17a38 <__assert_fail@plt+0x5700>
   17dc8:	add	sl, sl, #1
   17dcc:	cmp	sl, r6
   17dd0:	bcc	17db8 <__assert_fail@plt+0x5a80>
   17dd4:	b	17a38 <__assert_fail@plt+0x5700>
   17dd8:	ldrb	r0, [ip, #29]
   17ddc:	cmp	r0, #0
   17de0:	beq	17e9c <__assert_fail@plt+0x5b64>
   17de4:	sub	r0, r2, #1
   17de8:	ldrb	r8, [r0, #1]!
   17dec:	ldrb	r1, [r3, r8]
   17df0:	cmp	r1, #0
   17df4:	bne	17de8 <__assert_fail@plt+0x5ab0>
   17df8:	sub	r1, r7, #1
   17dfc:	str	r4, [sp, #12]
   17e00:	ldrb	lr, [r1, #1]!
   17e04:	ldrb	r2, [r3, lr]
   17e08:	cmp	r2, #0
   17e0c:	bne	17e00 <__assert_fail@plt+0x5ac8>
   17e10:	cmp	r8, #45	; 0x2d
   17e14:	mov	r9, r0
   17e18:	str	r7, [sp, #8]
   17e1c:	addeq	r9, r9, #1
   17e20:	mov	r4, r9
   17e24:	ldrb	r5, [r4], #1
   17e28:	sub	r2, r5, #48	; 0x30
   17e2c:	cmp	r2, #9
   17e30:	bhi	17fc8 <__assert_fail@plt+0x5c90>
   17e34:	movw	r2, #33508	; 0x82e4
   17e38:	mov	sl, #0
   17e3c:	movt	r2, #3
   17e40:	ldr	ip, [r2]
   17e44:	mov	r2, r4
   17e48:	uxtb	r3, r5
   17e4c:	uxtb	r4, sl
   17e50:	cmp	r4, r3
   17e54:	ldrb	r3, [r2]
   17e58:	mov	r7, r2
   17e5c:	movcc	sl, r5
   17e60:	cmp	ip, r3
   17e64:	addeq	r7, r9, #2
   17e68:	mov	r4, r7
   17e6c:	mov	r9, r7
   17e70:	ldrb	r5, [r4], #1
   17e74:	sub	r6, r5, #48	; 0x30
   17e78:	cmp	r6, #10
   17e7c:	bcc	17e44 <__assert_fail@plt+0x5b0c>
   17e80:	cmp	ip, r3
   17e84:	bne	180a4 <__assert_fail@plt+0x5d6c>
   17e88:	sub	r4, r7, #1
   17e8c:	b	180f4 <__assert_fail@plt+0x5dbc>
   17e90:	subs	r3, r0, r7
   17e94:	mvnne	r3, #0
   17e98:	b	17c4c <__assert_fail@plt+0x5914>
   17e9c:	ldrb	r0, [ip, #30]
   17ea0:	cmp	r0, #0
   17ea4:	beq	18234 <__assert_fail@plt+0x5efc>
   17ea8:	mov	r9, r7
   17eac:	sub	r0, r2, #1
   17eb0:	ldrb	r1, [r0, #1]!
   17eb4:	ldrb	r1, [r3, r1]
   17eb8:	cmp	r1, #0
   17ebc:	bne	17eb0 <__assert_fail@plt+0x5b78>
   17ec0:	mov	sl, r4
   17ec4:	mov	r2, #12
   17ec8:	mov	ip, #0
   17ecc:	add	r3, r2, ip
   17ed0:	movw	r7, #33272	; 0x81f8
   17ed4:	lsr	r3, r3, #1
   17ed8:	movt	r7, #3
   17edc:	ldr	r7, [r7, r3, lsl #3]
   17ee0:	ldrb	r5, [r7]
   17ee4:	cmp	r5, #0
   17ee8:	beq	17fd0 <__assert_fail@plt+0x5c98>
   17eec:	add	r7, r7, #1
   17ef0:	mov	r6, #0
   17ef4:	ldrb	r4, [r0, r6]
   17ef8:	movw	r1, #34440	; 0x8688
   17efc:	uxtb	r5, r5
   17f00:	movt	r1, #3
   17f04:	ldrb	r4, [r1, r4]
   17f08:	cmp	r4, r5
   17f0c:	bcc	17f28 <__assert_fail@plt+0x5bf0>
   17f10:	bhi	17f38 <__assert_fail@plt+0x5c00>
   17f14:	ldrb	r5, [r7, r6]
   17f18:	add	r6, r6, #1
   17f1c:	cmp	r5, #0
   17f20:	bne	17ef4 <__assert_fail@plt+0x5bbc>
   17f24:	b	17fd0 <__assert_fail@plt+0x5c98>
   17f28:	mov	r2, r3
   17f2c:	cmp	ip, r2
   17f30:	bcc	17ecc <__assert_fail@plt+0x5b94>
   17f34:	b	17f44 <__assert_fail@plt+0x5c0c>
   17f38:	add	ip, r3, #1
   17f3c:	cmp	ip, r2
   17f40:	bcc	17ecc <__assert_fail@plt+0x5b94>
   17f44:	mov	ip, #0
   17f48:	b	17fe0 <__assert_fail@plt+0x5ca8>
   17f4c:	bgt	17c4c <__assert_fail@plt+0x5914>
   17f50:	vcmp.f64	d8, d0
   17f54:	mov	r3, #0
   17f58:	vmrs	APSR_nzcv, fpscr
   17f5c:	beq	17c4c <__assert_fail@plt+0x5914>
   17f60:	vcmpe.f64	d0, d0
   17f64:	mvn	r3, #0
   17f68:	vmrs	APSR_nzcv, fpscr
   17f6c:	bvc	17c4c <__assert_fail@plt+0x5914>
   17f70:	vcmpe.f64	d8, d8
   17f74:	mov	r3, #1
   17f78:	vmrs	APSR_nzcv, fpscr
   17f7c:	bvc	17c4c <__assert_fail@plt+0x5914>
   17f80:	ldr	r0, [sp, #72]	; 0x48
   17f84:	mov	r1, #0
   17f88:	bl	11f18 <strtold@plt>
   17f8c:	add	lr, sp, #3072	; 0xc00
   17f90:	mov	r5, r4
   17f94:	mov	r0, r7
   17f98:	mov	r1, #0
   17f9c:	add	r4, lr, #1016	; 0x3f8
   17fa0:	vstr	d0, [r4, #344]	; 0x158
   17fa4:	bl	11f18 <strtold@plt>
   17fa8:	sub	lr, fp, #3072	; 0xc00
   17fac:	mov	r1, r4
   17fb0:	mov	r2, #8
   17fb4:	vstr	d0, [r4]
   17fb8:	mov	r4, r5
   17fbc:	sub	r0, lr, #984	; 0x3d8
   17fc0:	bl	11f3c <memcmp@plt>
   17fc4:	b	17c48 <__assert_fail@plt+0x5910>
   17fc8:	mov	sl, #0
   17fcc:	b	180a8 <__assert_fail@plt+0x5d70>
   17fd0:	movw	r0, #33272	; 0x81f8
   17fd4:	movt	r0, #3
   17fd8:	add	r0, r0, r3, lsl #3
   17fdc:	ldr	ip, [r0, #4]
   17fe0:	movw	r0, #33672	; 0x8388
   17fe4:	sub	r1, r9, #1
   17fe8:	movt	r0, #3
   17fec:	ldrb	r2, [r1, #1]!
   17ff0:	ldrb	r2, [r0, r2]
   17ff4:	cmp	r2, #0
   17ff8:	bne	17fec <__assert_fail@plt+0x5cb4>
   17ffc:	mov	r7, #12
   18000:	mov	lr, #0
   18004:	add	r3, r7, lr
   18008:	movw	r0, #33272	; 0x81f8
   1800c:	lsr	r3, r3, #1
   18010:	movt	r0, #3
   18014:	ldr	r6, [r0, r3, lsl #3]
   18018:	ldrb	r4, [r6]
   1801c:	cmp	r4, #0
   18020:	beq	18084 <__assert_fail@plt+0x5d4c>
   18024:	add	r6, r6, #1
   18028:	mov	r5, #0
   1802c:	ldrb	r0, [r1, r5]
   18030:	movw	r2, #34440	; 0x8688
   18034:	uxtb	r4, r4
   18038:	movt	r2, #3
   1803c:	ldrb	r0, [r2, r0]
   18040:	cmp	r0, r4
   18044:	bcc	18060 <__assert_fail@plt+0x5d28>
   18048:	bhi	18070 <__assert_fail@plt+0x5d38>
   1804c:	ldrb	r4, [r6, r5]
   18050:	add	r5, r5, #1
   18054:	cmp	r4, #0
   18058:	bne	1802c <__assert_fail@plt+0x5cf4>
   1805c:	b	18084 <__assert_fail@plt+0x5d4c>
   18060:	mov	r7, r3
   18064:	cmp	lr, r7
   18068:	bcc	18004 <__assert_fail@plt+0x5ccc>
   1806c:	b	1807c <__assert_fail@plt+0x5d44>
   18070:	add	lr, r3, #1
   18074:	cmp	lr, r7
   18078:	bcc	18004 <__assert_fail@plt+0x5ccc>
   1807c:	mov	r1, #0
   18080:	b	18094 <__assert_fail@plt+0x5d5c>
   18084:	movw	r0, #33272	; 0x81f8
   18088:	movt	r0, #3
   1808c:	add	r1, r0, r3, lsl #3
   18090:	ldr	r1, [r1, #4]
   18094:	sub	r3, ip, r1
   18098:	mov	r7, r9
   1809c:	mov	r4, sl
   180a0:	b	17c4c <__assert_fail@plt+0x5914>
   180a4:	mov	r9, r2
   180a8:	movw	r2, #33506	; 0x82e2
   180ac:	movt	r2, #3
   180b0:	ldrb	r2, [r2]
   180b4:	cmp	r5, r2
   180b8:	bne	180f0 <__assert_fail@plt+0x5db8>
   180bc:	ldrb	r2, [r4]
   180c0:	sub	r3, r2, #48	; 0x30
   180c4:	cmp	r3, #9
   180c8:	bhi	180f4 <__assert_fail@plt+0x5dbc>
   180cc:	uxtb	r3, r2
   180d0:	uxtb	r7, sl
   180d4:	cmp	r7, r3
   180d8:	movcc	sl, r2
   180dc:	ldrb	r2, [r4, #1]!
   180e0:	sub	r3, r2, #48	; 0x30
   180e4:	cmp	r3, #10
   180e8:	bcc	180cc <__assert_fail@plt+0x5d94>
   180ec:	b	180f4 <__assert_fail@plt+0x5dbc>
   180f0:	mov	r4, r9
   180f4:	uxtb	r2, sl
   180f8:	mov	sl, #0
   180fc:	mov	ip, #0
   18100:	cmp	r2, #49	; 0x31
   18104:	bcc	18120 <__assert_fail@plt+0x5de8>
   18108:	ldrb	r2, [r4]
   1810c:	movw	r3, #27448	; 0x6b38
   18110:	cmp	r8, #45	; 0x2d
   18114:	movt	r3, #2
   18118:	ldrb	ip, [r3, r2]
   1811c:	rsbeq	ip, ip, #0
   18120:	cmp	lr, #45	; 0x2d
   18124:	mov	r9, r1
   18128:	addeq	r9, r9, #1
   1812c:	mov	r3, r9
   18130:	ldrb	r4, [r3], #1
   18134:	sub	r2, r4, #48	; 0x30
   18138:	cmp	r2, #9
   1813c:	bhi	181a8 <__assert_fail@plt+0x5e70>
   18140:	movw	r2, #33508	; 0x82e4
   18144:	mov	sl, #0
   18148:	movt	r2, #3
   1814c:	ldr	r8, [r2]
   18150:	mov	r7, r3
   18154:	uxtb	r2, r4
   18158:	uxtb	r3, sl
   1815c:	ldrb	r6, [r7]
   18160:	cmp	r3, r2
   18164:	mov	r2, r7
   18168:	movcc	sl, r4
   1816c:	cmp	r8, r6
   18170:	addeq	r2, r9, #2
   18174:	mov	r3, r2
   18178:	mov	r9, r2
   1817c:	ldrb	r4, [r3], #1
   18180:	sub	r5, r4, #48	; 0x30
   18184:	cmp	r5, #10
   18188:	bcc	18150 <__assert_fail@plt+0x5e18>
   1818c:	cmp	r8, r6
   18190:	bne	181a4 <__assert_fail@plt+0x5e6c>
   18194:	ldr	r8, [sp, #80]	; 0x50
   18198:	ldr	r7, [sp, #8]
   1819c:	sub	r3, r2, #1
   181a0:	b	181fc <__assert_fail@plt+0x5ec4>
   181a4:	mov	r9, r7
   181a8:	movw	r2, #33506	; 0x82e2
   181ac:	ldr	r8, [sp, #80]	; 0x50
   181b0:	ldr	r7, [sp, #8]
   181b4:	movt	r2, #3
   181b8:	ldrb	r2, [r2]
   181bc:	cmp	r4, r2
   181c0:	bne	181f8 <__assert_fail@plt+0x5ec0>
   181c4:	ldrb	r2, [r3]
   181c8:	sub	r4, r2, #48	; 0x30
   181cc:	cmp	r4, #9
   181d0:	bhi	181fc <__assert_fail@plt+0x5ec4>
   181d4:	uxtb	r4, r2
   181d8:	uxtb	r5, sl
   181dc:	cmp	r5, r4
   181e0:	movcc	sl, r2
   181e4:	ldrb	r2, [r3, #1]!
   181e8:	sub	r4, r2, #48	; 0x30
   181ec:	cmp	r4, #10
   181f0:	bcc	181d4 <__assert_fail@plt+0x5e9c>
   181f4:	b	181fc <__assert_fail@plt+0x5ec4>
   181f8:	mov	r3, r9
   181fc:	uxtb	r4, sl
   18200:	mov	r2, #0
   18204:	cmp	r4, #49	; 0x31
   18208:	bcc	18224 <__assert_fail@plt+0x5eec>
   1820c:	ldrb	r2, [r3]
   18210:	movw	r3, #27448	; 0x6b38
   18214:	cmp	lr, #45	; 0x2d
   18218:	movt	r3, #2
   1821c:	ldrb	r2, [r3, r2]
   18220:	rsbeq	r2, r2, #0
   18224:	ldr	r4, [sp, #12]
   18228:	subs	r3, ip, r2
   1822c:	bne	17c4c <__assert_fail@plt+0x5914>
   18230:	b	17c2c <__assert_fail@plt+0x58f4>
   18234:	ldrb	r0, [ip, #27]
   18238:	cmp	r0, #0
   1823c:	beq	18500 <__assert_fail@plt+0x61c8>
   18240:	ldr	r0, [sp, #24]
   18244:	str	r4, [sp, #12]
   18248:	movw	r4, #34816	; 0x8800
   1824c:	mov	r2, #156	; 0x9c
   18250:	movt	r4, #3
   18254:	mov	r1, r4
   18258:	bl	11ec4 <memcpy@plt>
   1825c:	add	lr, sp, #3072	; 0xc00
   18260:	mov	r1, r4
   18264:	mov	r2, #156	; 0x9c
   18268:	add	r0, lr, #1016	; 0x3f8
   1826c:	bl	11ec4 <memcpy@plt>
   18270:	movw	r0, #33504	; 0x82e0
   18274:	movt	r0, #3
   18278:	ldrb	r0, [r0]
   1827c:	cmp	r0, #0
   18280:	beq	1851c <__assert_fail@plt+0x61e4>
   18284:	ldr	r0, [sp, #12]
   18288:	sub	lr, fp, #3072	; 0xc00
   1828c:	mov	r9, r7
   18290:	sub	r6, lr, #984	; 0x3d8
   18294:	add	r1, r7, r0
   18298:	add	r0, r0, r8
   1829c:	str	r1, [sp, #28]
   182a0:	ldr	r1, [sp, #72]	; 0x48
   182a4:	add	r0, r0, r0, lsl #1
   182a8:	add	r0, r0, #2
   182ac:	str	r0, [sp, #16]
   182b0:	mov	r0, #0
   182b4:	str	r0, [sp, #32]
   182b8:	mov	r0, #0
   182bc:	add	r2, r1, r8
   182c0:	mov	r8, #4000	; 0xfa0
   182c4:	str	r0, [sp, #20]
   182c8:	str	r2, [sp, #44]	; 0x2c
   182cc:	b	1830c <__assert_fail@plt+0x5fd4>
   182d0:	cmp	r5, sl
   182d4:	mov	r0, #0
   182d8:	mov	r1, r4
   182dc:	movwhi	r0, #1
   182e0:	movcc	sl, r5
   182e4:	subcc	r0, r0, #1
   182e8:	mov	r2, sl
   182ec:	str	r0, [sp, #20]
   182f0:	mov	r0, r6
   182f4:	bl	11f3c <memcmp@plt>
   182f8:	ldr	r1, [sp, #20]
   182fc:	cmp	r0, #0
   18300:	movne	r1, r0
   18304:	str	r1, [sp, #20]
   18308:	ldr	r1, [sp, #48]	; 0x30
   1830c:	str	r1, [sp, #48]	; 0x30
   18310:	ldr	sl, [sp, #16]
   18314:	cmp	r8, sl
   18318:	bcs	18358 <__assert_fail@plt+0x6020>
   1831c:	ldr	r0, [sp, #32]
   18320:	bl	1cc78 <__assert_fail@plt+0xa940>
   18324:	add	r0, r8, r8, lsl #1
   18328:	cmp	sl, r0, lsr #1
   1832c:	lsrls	sl, r0, #1
   18330:	mov	r0, sl
   18334:	bl	23808 <__assert_fail@plt+0x114d0>
   18338:	sub	lr, fp, #3072	; 0xc00
   1833c:	cmp	r0, #0
   18340:	mov	r4, r0
   18344:	str	r0, [sp, #32]
   18348:	sub	r0, lr, #984	; 0x3d8
   1834c:	movweq	sl, #4000	; 0xfa0
   18350:	moveq	r4, r0
   18354:	b	18360 <__assert_fail@plt+0x6028>
   18358:	mov	sl, r8
   1835c:	mov	r4, r6
   18360:	ldr	r0, [sp, #44]	; 0x2c
   18364:	ldr	r1, [sp, #48]	; 0x30
   18368:	mov	r6, #0
   1836c:	mov	r5, #0
   18370:	cmp	r1, r0
   18374:	bcs	1838c <__assert_fail@plt+0x6054>
   18378:	ldr	r1, [sp, #48]	; 0x30
   1837c:	mov	r0, r4
   18380:	mov	r2, sl
   18384:	bl	19270 <__assert_fail@plt+0x6f38>
   18388:	add	r5, r0, #1
   1838c:	ldr	r0, [sp, #28]
   18390:	cmp	r9, r0
   18394:	bcs	183bc <__assert_fail@plt+0x6084>
   18398:	cmp	sl, r5
   1839c:	mov	r1, sl
   183a0:	mov	r0, #0
   183a4:	movcc	r1, r5
   183a8:	addcs	r0, r4, r5
   183ac:	sub	r2, r1, r5
   183b0:	mov	r1, r9
   183b4:	bl	19270 <__assert_fail@plt+0x6f38>
   183b8:	add	r6, r0, #1
   183bc:	add	r8, r6, r5
   183c0:	str	r6, [sp, #36]	; 0x24
   183c4:	mov	r6, r5
   183c8:	str	r5, [sp, #40]	; 0x28
   183cc:	cmp	r8, sl
   183d0:	bhi	183ec <__assert_fail@plt+0x60b4>
   183d4:	cmp	sl, r6
   183d8:	bcc	183ec <__assert_fail@plt+0x60b4>
   183dc:	ldr	r5, [sp, #48]	; 0x30
   183e0:	ldr	r6, [sp, #28]
   183e4:	mov	r8, sl
   183e8:	b	18458 <__assert_fail@plt+0x6120>
   183ec:	ldr	r0, [sp, #32]
   183f0:	bl	1cc78 <__assert_fail@plt+0xa940>
   183f4:	movw	r1, #21845	; 0x5555
   183f8:	add	r0, r8, r8, lsl #1
   183fc:	movt	r1, #21845	; 0x5555
   18400:	cmp	r8, r1
   18404:	lsrcc	r8, r0, #1
   18408:	mov	r0, r8
   1840c:	bl	22208 <__assert_fail@plt+0xfed0>
   18410:	mov	r4, r0
   18414:	ldr	r0, [sp, #44]	; 0x2c
   18418:	ldr	r5, [sp, #48]	; 0x30
   1841c:	cmp	r5, r0
   18420:	bcs	18434 <__assert_fail@plt+0x60fc>
   18424:	mov	r0, r4
   18428:	mov	r1, r5
   1842c:	mov	r2, r6
   18430:	bl	12158 <strxfrm@plt>
   18434:	ldr	r6, [sp, #28]
   18438:	str	r4, [sp, #32]
   1843c:	cmp	r9, r6
   18440:	bcs	18458 <__assert_fail@plt+0x6120>
   18444:	ldr	r0, [sp, #40]	; 0x28
   18448:	ldr	r2, [sp, #36]	; 0x24
   1844c:	mov	r1, r9
   18450:	add	r0, r4, r0
   18454:	bl	12158 <strxfrm@plt>
   18458:	ldr	r0, [sp, #44]	; 0x2c
   1845c:	cmp	r5, r0
   18460:	bcs	18474 <__assert_fail@plt+0x613c>
   18464:	mov	r0, r5
   18468:	bl	12140 <strlen@plt>
   1846c:	add	r0, r5, r0
   18470:	add	r5, r0, #1
   18474:	cmp	r9, r6
   18478:	bcs	1848c <__assert_fail@plt+0x6154>
   1847c:	mov	r0, r9
   18480:	bl	12140 <strlen@plt>
   18484:	add	r0, r9, r0
   18488:	add	r9, r0, #1
   1848c:	ldr	r0, [sp, #44]	; 0x2c
   18490:	cmp	r5, r0
   18494:	cmpcs	r9, r6
   18498:	bcs	184e4 <__assert_fail@plt+0x61ac>
   1849c:	str	r5, [sp, #48]	; 0x30
   184a0:	ldr	r5, [sp, #40]	; 0x28
   184a4:	add	lr, sp, #3072	; 0xc00
   184a8:	mov	r0, r4
   184ac:	add	r2, lr, #1016	; 0x3f8
   184b0:	mov	r1, r5
   184b4:	bl	1c4e0 <__assert_fail@plt+0xa1a8>
   184b8:	ldr	sl, [sp, #36]	; 0x24
   184bc:	ldr	r2, [sp, #24]
   184c0:	mov	r6, r4
   184c4:	add	r4, r4, r5
   184c8:	mov	r0, r4
   184cc:	mov	r1, sl
   184d0:	bl	1c4e0 <__assert_fail@plt+0xa1a8>
   184d4:	ldr	r0, [sp, #20]
   184d8:	cmp	r0, #0
   184dc:	bne	18310 <__assert_fail@plt+0x5fd8>
   184e0:	b	182d0 <__assert_fail@plt+0x5f98>
   184e4:	ldr	r1, [sp, #40]	; 0x28
   184e8:	ldr	r9, [sp, #32]
   184ec:	ldr	r8, [sp, #80]	; 0x50
   184f0:	ldr	r6, [sp, #36]	; 0x24
   184f4:	mov	r0, r4
   184f8:	add	r4, r4, r1
   184fc:	b	18538 <__assert_fail@plt+0x6200>
   18500:	ldrb	r0, [ip, #32]
   18504:	cmp	r0, #0
   18508:	beq	18608 <__assert_fail@plt+0x62d0>
   1850c:	mov	r0, r2
   18510:	mov	r1, r7
   18514:	bl	1c7ec <__assert_fail@plt+0xa4b4>
   18518:	b	17c48 <__assert_fail@plt+0x5910>
   1851c:	mov	r0, #0
   18520:	ldr	r6, [sp, #12]
   18524:	mov	r9, #0
   18528:	mov	r4, r7
   1852c:	mov	r1, r8
   18530:	str	r0, [sp, #20]
   18534:	ldr	r0, [sp, #72]	; 0x48
   18538:	add	lr, sp, #3072	; 0xc00
   1853c:	str	r0, [sp, #80]	; 0x50
   18540:	str	r1, [sp, #40]	; 0x28
   18544:	add	r5, lr, #1016	; 0x3f8
   18548:	mov	r2, r5
   1854c:	bl	1c4e0 <__assert_fail@plt+0xa1a8>
   18550:	sub	lr, fp, #3072	; 0xc00
   18554:	mov	r0, r5
   18558:	sub	r5, lr, #1016	; 0x3f8
   1855c:	mov	r1, r5
   18560:	bl	1b8e8 <__assert_fail@plt+0x95b0>
   18564:	mov	sl, r6
   18568:	mov	r1, r6
   1856c:	ldr	r6, [sp, #24]
   18570:	mov	r0, r4
   18574:	mov	r2, r6
   18578:	bl	1c4e0 <__assert_fail@plt+0xa1a8>
   1857c:	mov	r0, r6
   18580:	ldr	r6, [sp, #4]
   18584:	mov	r1, r6
   18588:	bl	1b8e8 <__assert_fail@plt+0x95b0>
   1858c:	mov	r0, r5
   18590:	mov	r1, r6
   18594:	mov	r2, #16
   18598:	bl	11f3c <memcmp@plt>
   1859c:	mov	r1, r0
   185a0:	cmp	r0, #0
   185a4:	bne	185f0 <__assert_fail@plt+0x62b8>
   185a8:	ldr	r1, [sp, #20]
   185ac:	cmp	r1, #0
   185b0:	bne	185f0 <__assert_fail@plt+0x62b8>
   185b4:	ldr	r0, [sp, #40]	; 0x28
   185b8:	mov	r2, sl
   185bc:	mov	r1, r4
   185c0:	cmp	r0, sl
   185c4:	movcc	r2, r0
   185c8:	ldr	r0, [sp, #80]	; 0x50
   185cc:	bl	11f3c <memcmp@plt>
   185d0:	mov	r1, r0
   185d4:	cmp	r0, #0
   185d8:	bne	185f0 <__assert_fail@plt+0x62b8>
   185dc:	ldr	r0, [sp, #40]	; 0x28
   185e0:	mov	r1, #0
   185e4:	cmp	r0, sl
   185e8:	movwhi	r1, #1
   185ec:	subcc	r1, r1, #1
   185f0:	mov	r0, r9
   185f4:	mov	r4, r1
   185f8:	bl	1cc78 <__assert_fail@plt+0xa940>
   185fc:	mov	r3, r4
   18600:	ldr	r4, [sp, #12]
   18604:	b	17c4c <__assert_fail@plt+0x5914>
   18608:	cmp	r8, #0
   1860c:	beq	18644 <__assert_fail@plt+0x630c>
   18610:	cmp	r4, #0
   18614:	beq	18654 <__assert_fail@plt+0x631c>
   18618:	mov	r0, r2
   1861c:	add	r1, r8, #1
   18620:	add	r3, r4, #1
   18624:	mov	r2, r7
   18628:	bl	2289c <__assert_fail@plt+0x10564>
   1862c:	b	17c48 <__assert_fail@plt+0x5910>
   18630:	cmp	r9, #0
   18634:	beq	1865c <__assert_fail@plt+0x6324>
   18638:	cmp	r8, #0
   1863c:	bne	186a4 <__assert_fail@plt+0x636c>
   18640:	b	18730 <__assert_fail@plt+0x63f8>
   18644:	cmp	r4, #0
   18648:	mov	r3, r4
   1864c:	mvnne	r3, #0
   18650:	b	17c4c <__assert_fail@plt+0x5914>
   18654:	mov	r3, #1
   18658:	b	17c4c <__assert_fail@plt+0x5914>
   1865c:	cmp	r4, #0
   18660:	beq	187b0 <__assert_fail@plt+0x6478>
   18664:	cmp	r5, #0
   18668:	beq	188e0 <__assert_fail@plt+0x65a8>
   1866c:	cmp	r8, #0
   18670:	beq	187c8 <__assert_fail@plt+0x6490>
   18674:	cmp	sl, r6
   18678:	cmpcc	r7, r2
   1867c:	bcs	187ec <__assert_fail@plt+0x64b4>
   18680:	ldrb	r0, [sl], #1
   18684:	ldrb	r1, [r7], #1
   18688:	ldrb	r0, [r8, r0]
   1868c:	ldrb	r1, [r8, r1]
   18690:	subs	r3, r1, r0
   18694:	beq	18674 <__assert_fail@plt+0x633c>
   18698:	b	188f4 <__assert_fail@plt+0x65bc>
   1869c:	add	sl, sl, #1
   186a0:	add	r7, r7, #1
   186a4:	mov	r0, #0
   186a8:	cmp	r7, r2
   186ac:	bcs	186cc <__assert_fail@plt+0x6394>
   186b0:	ldrb	r1, [r7]
   186b4:	ldrb	r1, [r9, r1]
   186b8:	cmp	r1, #0
   186bc:	beq	186dc <__assert_fail@plt+0x63a4>
   186c0:	add	r7, r7, #1
   186c4:	cmp	r7, r2
   186c8:	bcc	186b0 <__assert_fail@plt+0x6378>
   186cc:	mov	r1, #0
   186d0:	cmp	sl, r6
   186d4:	bcc	186e8 <__assert_fail@plt+0x63b0>
   186d8:	b	18800 <__assert_fail@plt+0x64c8>
   186dc:	mov	r1, #1
   186e0:	cmp	sl, r6
   186e4:	bcs	18800 <__assert_fail@plt+0x64c8>
   186e8:	ldrb	r5, [sl]
   186ec:	ldrb	r3, [r9, r5]
   186f0:	cmp	r3, #0
   186f4:	beq	18708 <__assert_fail@plt+0x63d0>
   186f8:	add	sl, sl, #1
   186fc:	cmp	sl, r6
   18700:	bcc	186e8 <__assert_fail@plt+0x63b0>
   18704:	b	18800 <__assert_fail@plt+0x64c8>
   18708:	cmp	r1, #0
   1870c:	beq	187fc <__assert_fail@plt+0x64c4>
   18710:	ldrb	r1, [r7]
   18714:	ldrb	r0, [r8, r5]
   18718:	ldrb	r1, [r8, r1]
   1871c:	subs	r3, r1, r0
   18720:	beq	1869c <__assert_fail@plt+0x6364>
   18724:	b	188f4 <__assert_fail@plt+0x65bc>
   18728:	add	sl, sl, #1
   1872c:	add	r7, r7, #1
   18730:	mov	r0, #0
   18734:	cmp	r7, r2
   18738:	bcs	1875c <__assert_fail@plt+0x6424>
   1873c:	mov	r3, r2
   18740:	ldrb	r1, [r7]
   18744:	ldrb	r1, [r9, r1]
   18748:	cmp	r1, #0
   1874c:	beq	1876c <__assert_fail@plt+0x6434>
   18750:	add	r7, r7, #1
   18754:	cmp	r7, r3
   18758:	bcc	18740 <__assert_fail@plt+0x6408>
   1875c:	mov	r1, #0
   18760:	cmp	sl, r6
   18764:	bcc	18778 <__assert_fail@plt+0x6440>
   18768:	b	18800 <__assert_fail@plt+0x64c8>
   1876c:	mov	r1, #1
   18770:	cmp	sl, r6
   18774:	bcs	18800 <__assert_fail@plt+0x64c8>
   18778:	ldrb	r5, [sl]
   1877c:	ldrb	r3, [r9, r5]
   18780:	cmp	r3, #0
   18784:	beq	18798 <__assert_fail@plt+0x6460>
   18788:	add	sl, sl, #1
   1878c:	cmp	sl, r6
   18790:	bcc	18778 <__assert_fail@plt+0x6440>
   18794:	b	18800 <__assert_fail@plt+0x64c8>
   18798:	cmp	r1, #0
   1879c:	beq	187fc <__assert_fail@plt+0x64c4>
   187a0:	ldrb	r0, [r7]
   187a4:	subs	r3, r0, r5
   187a8:	beq	18728 <__assert_fail@plt+0x63f0>
   187ac:	b	188f4 <__assert_fail@plt+0x65bc>
   187b0:	cmp	r5, #0
   187b4:	mvnne	r5, #0
   187b8:	mov	r3, r5
   187bc:	cmp	r3, #0
   187c0:	beq	17c8c <__assert_fail@plt+0x5954>
   187c4:	b	188f4 <__assert_fail@plt+0x65bc>
   187c8:	cmp	r4, r5
   187cc:	mov	r2, r5
   187d0:	mov	r0, r7
   187d4:	mov	r1, sl
   187d8:	movcc	r2, r4
   187dc:	bl	11f3c <memcmp@plt>
   187e0:	ldr	ip, [sp, #84]	; 0x54
   187e4:	cmp	r0, #0
   187e8:	bne	188f0 <__assert_fail@plt+0x65b8>
   187ec:	subs	r3, r4, r5
   187f0:	movwne	r3, #1
   187f4:	bcs	17c84 <__assert_fail@plt+0x594c>
   187f8:	b	188e8 <__assert_fail@plt+0x65b0>
   187fc:	mov	r0, #1
   18800:	sub	r3, r1, r0
   18804:	cmp	r3, #0
   18808:	beq	17c8c <__assert_fail@plt+0x5954>
   1880c:	b	188f4 <__assert_fail@plt+0x65bc>
   18810:	movw	r0, #33654	; 0x8376
   18814:	ldr	r9, [sp, #64]	; 0x40
   18818:	ldr	r5, [sp, #60]	; 0x3c
   1881c:	movt	r0, #3
   18820:	ldrb	r1, [r0]
   18824:	mov	r0, #0
   18828:	cmp	r1, #0
   1882c:	bne	18904 <__assert_fail@plt+0x65cc>
   18830:	movw	r1, #33653	; 0x8375
   18834:	movt	r1, #3
   18838:	ldrb	r1, [r1]
   1883c:	cmp	r1, #0
   18840:	bne	18904 <__assert_fail@plt+0x65cc>
   18844:	ldr	r3, [r5, #4]
   18848:	ldr	r1, [r9, #4]
   1884c:	sub	r4, r3, #1
   18850:	subs	r8, r1, #1
   18854:	beq	18884 <__assert_fail@plt+0x654c>
   18858:	cmp	r4, #0
   1885c:	beq	18894 <__assert_fail@plt+0x655c>
   18860:	movw	r7, #33504	; 0x82e0
   18864:	ldr	r2, [r5]
   18868:	ldr	r0, [r9]
   1886c:	movt	r7, #3
   18870:	ldrb	r7, [r7]
   18874:	cmp	r7, #0
   18878:	beq	1889c <__assert_fail@plt+0x6564>
   1887c:	bl	2289c <__assert_fail@plt+0x10564>
   18880:	b	188c8 <__assert_fail@plt+0x6590>
   18884:	cmp	r4, #0
   18888:	mvnne	r4, #0
   1888c:	mov	r0, r4
   18890:	b	188c8 <__assert_fail@plt+0x6590>
   18894:	mov	r0, #1
   18898:	b	188c8 <__assert_fail@plt+0x6590>
   1889c:	cmp	r8, r4
   188a0:	mov	r3, r4
   188a4:	mov	r1, r2
   188a8:	movcc	r3, r8
   188ac:	mov	r2, r3
   188b0:	bl	11f3c <memcmp@plt>
   188b4:	cmp	r0, #0
   188b8:	bne	188c8 <__assert_fail@plt+0x6590>
   188bc:	subs	r0, r8, r4
   188c0:	movwne	r0, #1
   188c4:	mvncc	r0, #0
   188c8:	movw	r1, #33660	; 0x837c
   188cc:	movt	r1, #3
   188d0:	ldrb	r1, [r1]
   188d4:	cmp	r1, #0
   188d8:	rsbne	r0, r0, #0
   188dc:	b	18904 <__assert_fail@plt+0x65cc>
   188e0:	mov	r3, #1
   188e4:	b	188f4 <__assert_fail@plt+0x65bc>
   188e8:	mvn	r3, #0
   188ec:	b	188f4 <__assert_fail@plt+0x65bc>
   188f0:	mov	r3, r0
   188f4:	ldrb	r0, [ip, #31]
   188f8:	cmp	r0, #0
   188fc:	rsbne	r3, r3, #0
   18900:	mov	r0, r3
   18904:	sub	sp, fp, #40	; 0x28
   18908:	vpop	{d8}
   1890c:	add	sp, sp, #4
   18910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18918:	add	fp, sp, #28
   1891c:	sub	sp, sp, #4
   18920:	vpush	{d12-d13}
   18924:	vpush	{d8-d10}
   18928:	sub	sp, sp, #24
   1892c:	ldr	r5, [r0]
   18930:	ldr	r7, [r0, #4]
   18934:	mov	r8, r2
   18938:	mov	r4, r1
   1893c:	cmp	r2, #0
   18940:	str	r0, [sp, #8]
   18944:	add	r6, r5, r7
   18948:	bne	189dc <__assert_fail@plt+0x66a4>
   1894c:	movw	r0, #33652	; 0x8374
   18950:	movt	r0, #3
   18954:	ldrb	r0, [r0]
   18958:	cmp	r0, #1
   1895c:	bne	189dc <__assert_fail@plt+0x66a4>
   18960:	cmp	r7, #1
   18964:	blt	18a30 <__assert_fail@plt+0x66f8>
   18968:	sub	r7, r7, #1
   1896c:	ldrb	r0, [r5], #1
   18970:	cmp	r7, #0
   18974:	ldr	r2, [r4, #24]
   18978:	mov	r1, r0
   1897c:	movweq	r1, #10
   18980:	cmp	r0, #9
   18984:	ldr	r0, [r4, #20]
   18988:	movweq	r1, #62	; 0x3e
   1898c:	cmp	r0, r2
   18990:	bcs	189b0 <__assert_fail@plt+0x6678>
   18994:	add	r2, r0, #1
   18998:	str	r2, [r4, #20]
   1899c:	strb	r1, [r0]
   189a0:	sub	r7, r7, #1
   189a4:	cmp	r5, r6
   189a8:	bcc	1896c <__assert_fail@plt+0x6634>
   189ac:	b	18a30 <__assert_fail@plt+0x66f8>
   189b0:	mov	r0, r4
   189b4:	bl	1220c <__overflow@plt>
   189b8:	cmn	r0, #1
   189bc:	bne	189a0 <__assert_fail@plt+0x6668>
   189c0:	movw	r1, #26414	; 0x672e
   189c4:	mov	r0, #0
   189c8:	mov	r2, #5
   189cc:	movt	r1, #2
   189d0:	bl	11f54 <dcgettext@plt>
   189d4:	mov	r1, #0
   189d8:	bl	173b4 <__assert_fail@plt+0x507c>
   189dc:	movw	r0, #33655	; 0x8377
   189e0:	mov	r1, #10
   189e4:	mov	r2, r7
   189e8:	mov	r3, r4
   189ec:	movt	r0, #3
   189f0:	ldrb	r0, [r0]
   189f4:	cmp	r0, #0
   189f8:	mov	r0, r5
   189fc:	movwne	r1, #0
   18a00:	strb	r1, [r6, #-1]
   18a04:	mov	r1, #1
   18a08:	bl	11f30 <fwrite_unlocked@plt>
   18a0c:	cmp	r0, r7
   18a10:	bne	1900c <__assert_fail@plt+0x6cd4>
   18a14:	mov	r0, #0
   18a18:	strb	r0, [r6, #-1]
   18a1c:	sub	sp, fp, #72	; 0x48
   18a20:	vpop	{d8-d10}
   18a24:	vpop	{d12-d13}
   18a28:	add	sp, sp, #4
   18a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a30:	movw	r0, #33656	; 0x8378
   18a34:	movw	sl, #33492	; 0x82d4
   18a38:	movw	r9, #33672	; 0x8388
   18a3c:	vmov.i16	d10, #9	; 0x0009
   18a40:	vmov.i32	q6, #1	; 0x00000001
   18a44:	movt	r0, #3
   18a48:	movt	sl, #3
   18a4c:	movt	r9, #3
   18a50:	ldr	r4, [r0]
   18a54:	mov	r0, #0
   18a58:	vdup.32	q4, r0
   18a5c:	ldr	r0, [sp, #8]
   18a60:	cmp	r4, #0
   18a64:	str	r4, [sp, #4]
   18a68:	ldr	r6, [r0]
   18a6c:	ldr	r0, [r0, #4]
   18a70:	add	r0, r6, r0
   18a74:	sub	r8, r0, #1
   18a78:	beq	18b38 <__assert_fail@plt+0x6800>
   18a7c:	ldr	r5, [r4]
   18a80:	mov	r7, r6
   18a84:	cmn	r5, #1
   18a88:	beq	18a9c <__assert_fail@plt+0x6764>
   18a8c:	ldr	r0, [sp, #8]
   18a90:	mov	r1, r4
   18a94:	bl	19160 <__assert_fail@plt+0x6e28>
   18a98:	mov	r7, r0
   18a9c:	ldr	r0, [r4, #8]
   18aa0:	cmn	r0, #1
   18aa4:	beq	18ab8 <__assert_fail@plt+0x6780>
   18aa8:	ldr	r0, [sp, #8]
   18aac:	mov	r1, r4
   18ab0:	bl	19028 <__assert_fail@plt+0x6cf0>
   18ab4:	mov	r8, r0
   18ab8:	ldrb	r0, [r4, #24]
   18abc:	cmp	r0, #0
   18ac0:	beq	18acc <__assert_fail@plt+0x6794>
   18ac4:	cmn	r5, #1
   18ac8:	beq	18afc <__assert_fail@plt+0x67c4>
   18acc:	ldrb	r0, [r4, #30]
   18ad0:	cmp	r0, #0
   18ad4:	bne	18afc <__assert_fail@plt+0x67c4>
   18ad8:	ldrb	r0, [r4, #26]
   18adc:	cmp	r0, #0
   18ae0:	bne	18afc <__assert_fail@plt+0x67c4>
   18ae4:	ldrb	r0, [r4, #28]
   18ae8:	cmp	r0, #0
   18aec:	bne	18afc <__assert_fail@plt+0x67c4>
   18af0:	ldrb	r0, [r4, #29]
   18af4:	cmp	r0, #0
   18af8:	beq	18ff0 <__assert_fail@plt+0x6cb8>
   18afc:	ldrb	r3, [r8]
   18b00:	mov	r0, #0
   18b04:	sub	r7, r7, #1
   18b08:	strb	r0, [r8]
   18b0c:	mov	r0, r7
   18b10:	ldrb	r1, [r7, #1]!
   18b14:	ldrb	r1, [r9, r1]
   18b18:	cmp	r1, #0
   18b1c:	bne	18b0c <__assert_fail@plt+0x67d4>
   18b20:	cmp	r8, r7
   18b24:	str	r7, [sp, #20]
   18b28:	bcs	18b44 <__assert_fail@plt+0x680c>
   18b2c:	mov	r9, r8
   18b30:	str	r8, [sp, #20]
   18b34:	b	18cd4 <__assert_fail@plt+0x699c>
   18b38:	mov	r9, r8
   18b3c:	mov	r7, r6
   18b40:	b	18cd8 <__assert_fail@plt+0x69a0>
   18b44:	ldrb	r1, [r4, #30]
   18b48:	cmp	r1, #0
   18b4c:	beq	18bf0 <__assert_fail@plt+0x68b8>
   18b50:	str	r3, [sp]
   18b54:	ldrb	r1, [r0, #1]!
   18b58:	ldrb	r1, [r9, r1]
   18b5c:	cmp	r1, #0
   18b60:	bne	18b54 <__assert_fail@plt+0x681c>
   18b64:	mov	r2, #12
   18b68:	mov	ip, #0
   18b6c:	add	r3, r2, ip
   18b70:	movw	r1, #33272	; 0x81f8
   18b74:	lsr	r3, r3, #1
   18b78:	movt	r1, #3
   18b7c:	ldr	r5, [r1, r3, lsl #3]
   18b80:	ldrb	r4, [r5]
   18b84:	cmp	r4, #0
   18b88:	beq	18cc8 <__assert_fail@plt+0x6990>
   18b8c:	add	r5, r5, #1
   18b90:	mov	r9, r0
   18b94:	ldrb	r1, [r9]
   18b98:	movw	lr, #34440	; 0x8688
   18b9c:	uxtb	r4, r4
   18ba0:	movt	lr, #3
   18ba4:	ldrb	r1, [lr, r1]
   18ba8:	cmp	r1, r4
   18bac:	bcc	18bc8 <__assert_fail@plt+0x6890>
   18bb0:	bhi	18bd8 <__assert_fail@plt+0x68a0>
   18bb4:	ldrb	r4, [r5], #1
   18bb8:	add	r9, r9, #1
   18bbc:	cmp	r4, #0
   18bc0:	bne	18b94 <__assert_fail@plt+0x685c>
   18bc4:	b	18ccc <__assert_fail@plt+0x6994>
   18bc8:	mov	r2, r3
   18bcc:	cmp	ip, r2
   18bd0:	bcc	18b6c <__assert_fail@plt+0x6834>
   18bd4:	b	18be4 <__assert_fail@plt+0x68ac>
   18bd8:	add	ip, r3, #1
   18bdc:	cmp	ip, r2
   18be0:	bcc	18b6c <__assert_fail@plt+0x6834>
   18be4:	ldr	r3, [sp]
   18be8:	mov	r9, r7
   18bec:	b	18cd4 <__assert_fail@plt+0x699c>
   18bf0:	ldrb	r0, [r4, #28]
   18bf4:	cmp	r0, #0
   18bf8:	beq	18c18 <__assert_fail@plt+0x68e0>
   18bfc:	mov	r0, r7
   18c00:	add	r1, sp, #20
   18c04:	mov	r5, r3
   18c08:	bl	11f18 <strtold@plt>
   18c0c:	ldr	r9, [sp, #20]
   18c10:	mov	r3, r5
   18c14:	b	18cd4 <__assert_fail@plt+0x699c>
   18c18:	ldrb	r0, [r4, #26]
   18c1c:	cmp	r0, #0
   18c20:	bne	18c30 <__assert_fail@plt+0x68f8>
   18c24:	ldrb	r0, [r4, #29]
   18c28:	cmp	r0, #0
   18c2c:	beq	18b2c <__assert_fail@plt+0x67f4>
   18c30:	cmp	r7, r8
   18c34:	mov	r1, #0
   18c38:	mov	lr, r7
   18c3c:	mov	r9, #0
   18c40:	ldrbcc	r1, [r7]
   18c44:	subcc	r1, r1, #45	; 0x2d
   18c48:	clzcc	r1, r1
   18c4c:	lsrcc	r1, r1, #5
   18c50:	ldrb	r2, [lr, r1]!
   18c54:	sub	r1, r2, #48	; 0x30
   18c58:	add	r5, lr, #1
   18c5c:	cmp	r1, #9
   18c60:	bhi	18f60 <__assert_fail@plt+0x6c28>
   18c64:	movw	r0, #33508	; 0x82e4
   18c68:	mov	r9, #0
   18c6c:	str	r3, [sp]
   18c70:	movt	r0, #3
   18c74:	ldr	ip, [r0]
   18c78:	uxtb	r1, r2
   18c7c:	uxtb	r4, r9
   18c80:	mov	r3, r5
   18c84:	cmp	r4, r1
   18c88:	ldrb	r4, [r5]
   18c8c:	mov	r1, r5
   18c90:	movcc	r9, r2
   18c94:	cmp	ip, r4
   18c98:	addeq	r1, lr, #2
   18c9c:	mov	r5, r1
   18ca0:	mov	lr, r1
   18ca4:	ldrb	r2, [r5], #1
   18ca8:	sub	r0, r2, #48	; 0x30
   18cac:	cmp	r0, #10
   18cb0:	bcc	18c78 <__assert_fail@plt+0x6940>
   18cb4:	cmp	ip, r4
   18cb8:	bne	18f58 <__assert_fail@plt+0x6c20>
   18cbc:	ldm	sp, {r3, r4}
   18cc0:	sub	r5, r1, #1
   18cc4:	b	18fac <__assert_fail@plt+0x6c74>
   18cc8:	mov	r9, r0
   18ccc:	ldr	r3, [sp]
   18cd0:	str	r9, [sp, #20]
   18cd4:	strb	r3, [r8]
   18cd8:	sub	r8, r7, r6
   18cdc:	mov	r0, r6
   18ce0:	mov	r2, #0
   18ce4:	mov	r1, r8
   18ce8:	bl	1e3a4 <__assert_fail@plt+0xc06c>
   18cec:	mov	r4, r0
   18cf0:	cmp	r6, r7
   18cf4:	bcs	18d80 <__assert_fail@plt+0x6a48>
   18cf8:	cmp	r8, #4
   18cfc:	bcs	18d08 <__assert_fail@plt+0x69d0>
   18d00:	mov	r0, r6
   18d04:	b	18d6c <__assert_fail@plt+0x6a34>
   18d08:	vorr	d18, d8, d8
   18d0c:	bic	r1, r8, #3
   18d10:	vorr	q8, q4, q4
   18d14:	add	r5, sp, #16
   18d18:	vmov.32	d18[0], r4
   18d1c:	add	r0, r6, r1
   18d20:	mov	r2, r1
   18d24:	vorr	d16, d18, d18
   18d28:	ldr	r3, [r6], #4
   18d2c:	subs	r2, r2, #4
   18d30:	str	r3, [sp, #16]
   18d34:	vld1.32	{d18[0]}, [r5 :32]
   18d38:	vmovl.u8	q9, d18
   18d3c:	vceq.i16	d18, d18, d10
   18d40:	vmovl.u16	q9, d18
   18d44:	vand	q9, q9, q6
   18d48:	vadd.i32	q8, q8, q9
   18d4c:	bne	18d28 <__assert_fail@plt+0x69f0>
   18d50:	vext.8	q9, q8, q8, #8
   18d54:	cmp	r1, r8
   18d58:	vadd.i32	q8, q8, q9
   18d5c:	vdup.32	q9, d16[1]
   18d60:	vadd.i32	q8, q8, q9
   18d64:	vmov.32	r4, d16[0]
   18d68:	beq	18d80 <__assert_fail@plt+0x6a48>
   18d6c:	ldrb	r1, [r0], #1
   18d70:	cmp	r1, #9
   18d74:	addeq	r4, r4, #1
   18d78:	cmp	r7, r0
   18d7c:	bne	18d6c <__assert_fail@plt+0x6a34>
   18d80:	sub	r5, r9, r7
   18d84:	mov	r0, r7
   18d88:	mov	r2, #0
   18d8c:	mov	r1, r5
   18d90:	bl	1e3a4 <__assert_fail@plt+0xc06c>
   18d94:	mov	r6, r0
   18d98:	cmp	r7, r9
   18d9c:	add	r1, sp, #12
   18da0:	bcs	18e28 <__assert_fail@plt+0x6af0>
   18da4:	cmp	r5, #4
   18da8:	bcs	18db4 <__assert_fail@plt+0x6a7c>
   18dac:	mov	r0, r7
   18db0:	b	18e14 <__assert_fail@plt+0x6adc>
   18db4:	vorr	d18, d8, d8
   18db8:	bic	ip, r5, #3
   18dbc:	vorr	q8, q4, q4
   18dc0:	vmov.32	d18[0], r6
   18dc4:	add	r0, r7, ip
   18dc8:	mov	r2, ip
   18dcc:	vorr	d16, d18, d18
   18dd0:	ldr	r3, [r7], #4
   18dd4:	subs	r2, r2, #4
   18dd8:	str	r3, [sp, #12]
   18ddc:	vld1.32	{d18[0]}, [r1 :32]
   18de0:	vmovl.u8	q9, d18
   18de4:	vceq.i16	d18, d18, d10
   18de8:	vmovl.u16	q9, d18
   18dec:	vand	q9, q9, q6
   18df0:	vadd.i32	q8, q8, q9
   18df4:	bne	18dd0 <__assert_fail@plt+0x6a98>
   18df8:	vext.8	q9, q8, q8, #8
   18dfc:	cmp	ip, r5
   18e00:	vadd.i32	q8, q8, q9
   18e04:	vdup.32	q9, d16[1]
   18e08:	vadd.i32	q8, q8, q9
   18e0c:	vmov.32	r6, d16[0]
   18e10:	beq	18e28 <__assert_fail@plt+0x6af0>
   18e14:	ldrb	r1, [r0], #1
   18e18:	cmp	r1, #9
   18e1c:	addeq	r6, r6, #1
   18e20:	cmp	r9, r0
   18e24:	bne	18e14 <__assert_fail@plt+0x6adc>
   18e28:	movw	r9, #33672	; 0x8388
   18e2c:	cmp	r4, #0
   18e30:	mov	r5, #95	; 0x5f
   18e34:	mov	r7, #32
   18e38:	movt	r9, #3
   18e3c:	beq	18e80 <__assert_fail@plt+0x6b48>
   18e40:	ldr	r0, [sl]
   18e44:	sub	r4, r4, #1
   18e48:	ldr	r1, [r0, #20]
   18e4c:	ldr	r2, [r0, #24]
   18e50:	cmp	r1, r2
   18e54:	bcs	18e70 <__assert_fail@plt+0x6b38>
   18e58:	add	r2, r1, #1
   18e5c:	str	r2, [r0, #20]
   18e60:	strb	r7, [r1]
   18e64:	cmp	r4, #0
   18e68:	bne	18e40 <__assert_fail@plt+0x6b08>
   18e6c:	b	18e80 <__assert_fail@plt+0x6b48>
   18e70:	mov	r1, #32
   18e74:	bl	1220c <__overflow@plt>
   18e78:	cmp	r4, #0
   18e7c:	bne	18e40 <__assert_fail@plt+0x6b08>
   18e80:	ldr	r4, [sp, #4]
   18e84:	cmp	r6, #0
   18e88:	beq	18ef8 <__assert_fail@plt+0x6bc0>
   18e8c:	ldr	r0, [sl]
   18e90:	ldr	r1, [r0, #20]
   18e94:	ldr	r2, [r0, #24]
   18e98:	cmp	r1, r2
   18e9c:	bcs	18eb8 <__assert_fail@plt+0x6b80>
   18ea0:	add	r2, r1, #1
   18ea4:	str	r2, [r0, #20]
   18ea8:	strb	r5, [r1]
   18eac:	subs	r6, r6, #1
   18eb0:	bne	18e8c <__assert_fail@plt+0x6b54>
   18eb4:	b	18ec8 <__assert_fail@plt+0x6b90>
   18eb8:	mov	r1, #95	; 0x5f
   18ebc:	bl	1220c <__overflow@plt>
   18ec0:	subs	r6, r6, #1
   18ec4:	bne	18e8c <__assert_fail@plt+0x6b54>
   18ec8:	ldr	r0, [sl]
   18ecc:	ldr	r1, [r0, #20]
   18ed0:	ldr	r2, [r0, #24]
   18ed4:	cmp	r1, r2
   18ed8:	bcs	18ff8 <__assert_fail@plt+0x6cc0>
   18edc:	add	r2, r1, #1
   18ee0:	str	r2, [r0, #20]
   18ee4:	mov	r0, #10
   18ee8:	strb	r0, [r1]
   18eec:	cmp	r4, #0
   18ef0:	bne	18f20 <__assert_fail@plt+0x6be8>
   18ef4:	b	18a1c <__assert_fail@plt+0x66e4>
   18ef8:	movw	r1, #26427	; 0x673b
   18efc:	mov	r0, #0
   18f00:	mov	r2, #5
   18f04:	movt	r1, #2
   18f08:	bl	11f54 <dcgettext@plt>
   18f0c:	mov	r1, r0
   18f10:	mov	r0, #1
   18f14:	bl	121a0 <__printf_chk@plt>
   18f18:	cmp	r4, #0
   18f1c:	beq	18a1c <__assert_fail@plt+0x66e4>
   18f20:	ldr	r4, [r4, #36]	; 0x24
   18f24:	cmp	r4, #0
   18f28:	bne	18a5c <__assert_fail@plt+0x6724>
   18f2c:	movw	r0, #33654	; 0x8376
   18f30:	movt	r0, #3
   18f34:	ldrb	r0, [r0]
   18f38:	cmp	r0, #0
   18f3c:	bne	18a1c <__assert_fail@plt+0x66e4>
   18f40:	movw	r0, #33653	; 0x8375
   18f44:	movt	r0, #3
   18f48:	ldrb	r0, [r0]
   18f4c:	cmp	r0, #0
   18f50:	beq	18a5c <__assert_fail@plt+0x6724>
   18f54:	b	18a1c <__assert_fail@plt+0x66e4>
   18f58:	mov	lr, r3
   18f5c:	ldm	sp, {r3, r4}
   18f60:	movw	r0, #33506	; 0x82e2
   18f64:	movt	r0, #3
   18f68:	ldrb	r0, [r0]
   18f6c:	cmp	r2, r0
   18f70:	bne	18fa8 <__assert_fail@plt+0x6c70>
   18f74:	ldrb	r1, [r5]
   18f78:	sub	r0, r1, #48	; 0x30
   18f7c:	cmp	r0, #9
   18f80:	bhi	18fac <__assert_fail@plt+0x6c74>
   18f84:	uxtb	r0, r1
   18f88:	uxtb	r2, r9
   18f8c:	cmp	r2, r0
   18f90:	movcc	r9, r1
   18f94:	ldrb	r1, [r5, #1]!
   18f98:	sub	r0, r1, #48	; 0x30
   18f9c:	cmp	r0, #10
   18fa0:	bcc	18f84 <__assert_fail@plt+0x6c4c>
   18fa4:	b	18fac <__assert_fail@plt+0x6c74>
   18fa8:	mov	r5, lr
   18fac:	uxtb	r0, r9
   18fb0:	mov	r9, r7
   18fb4:	cmp	r0, #48	; 0x30
   18fb8:	bcc	18cd4 <__assert_fail@plt+0x699c>
   18fbc:	ldrb	r0, [r4, #29]
   18fc0:	cmp	r0, #0
   18fc4:	beq	18fe4 <__assert_fail@plt+0x6cac>
   18fc8:	ldrb	r0, [r5]
   18fcc:	movw	r1, #27448	; 0x6b38
   18fd0:	movt	r1, #2
   18fd4:	ldrb	r0, [r1, r0]
   18fd8:	cmp	r0, #0
   18fdc:	movwne	r0, #1
   18fe0:	b	18fe8 <__assert_fail@plt+0x6cb0>
   18fe4:	mov	r0, #0
   18fe8:	add	r9, r5, r0
   18fec:	b	18cd0 <__assert_fail@plt+0x6998>
   18ff0:	mov	r9, r8
   18ff4:	b	18cd8 <__assert_fail@plt+0x69a0>
   18ff8:	mov	r1, #10
   18ffc:	bl	1220c <__overflow@plt>
   19000:	cmp	r4, #0
   19004:	bne	18f20 <__assert_fail@plt+0x6be8>
   19008:	b	18a1c <__assert_fail@plt+0x66e4>
   1900c:	movw	r1, #26414	; 0x672e
   19010:	mov	r0, #0
   19014:	mov	r2, #5
   19018:	movt	r1, #2
   1901c:	bl	11f54 <dcgettext@plt>
   19020:	mov	r1, r8
   19024:	bl	173b4 <__assert_fail@plt+0x507c>
   19028:	push	{r4, sl, fp, lr}
   1902c:	add	fp, sp, #8
   19030:	mov	r2, r0
   19034:	movw	r0, #33248	; 0x81e0
   19038:	ldr	ip, [r1, #12]
   1903c:	ldr	lr, [r1, #8]
   19040:	movt	r0, #3
   19044:	ldr	r3, [r0]
   19048:	ldm	r2, {r0, r2}
   1904c:	cmp	ip, #0
   19050:	addeq	lr, lr, #1
   19054:	add	r2, r0, r2
   19058:	cmp	r3, #256	; 0x100
   1905c:	sub	r2, r2, #1
   19060:	bne	190d4 <__assert_fail@plt+0x6d9c>
   19064:	cmp	r0, r2
   19068:	bcs	19110 <__assert_fail@plt+0x6dd8>
   1906c:	movw	r3, #33672	; 0x8388
   19070:	movt	r3, #3
   19074:	cmp	lr, #0
   19078:	bne	19084 <__assert_fail@plt+0x6d4c>
   1907c:	b	19110 <__assert_fail@plt+0x6dd8>
   19080:	add	r0, r0, #1
   19084:	cmp	r0, r2
   19088:	bcs	190a4 <__assert_fail@plt+0x6d6c>
   1908c:	ldrb	r4, [r0]
   19090:	ldrb	r4, [r3, r4]
   19094:	cmp	r4, #0
   19098:	bne	19080 <__assert_fail@plt+0x6d48>
   1909c:	b	190a4 <__assert_fail@plt+0x6d6c>
   190a0:	add	r0, r0, #1
   190a4:	cmp	r0, r2
   190a8:	bcs	190bc <__assert_fail@plt+0x6d84>
   190ac:	ldrb	r4, [r0]
   190b0:	ldrb	r4, [r3, r4]
   190b4:	cmp	r4, #0
   190b8:	beq	190a0 <__assert_fail@plt+0x6d68>
   190bc:	sub	lr, lr, #1
   190c0:	cmp	r0, r2
   190c4:	bcc	19074 <__assert_fail@plt+0x6d3c>
   190c8:	b	19110 <__assert_fail@plt+0x6dd8>
   190cc:	orrs	r4, lr, ip
   190d0:	addne	r0, r0, #1
   190d4:	cmp	r0, r2
   190d8:	bcs	19110 <__assert_fail@plt+0x6dd8>
   190dc:	cmp	lr, #0
   190e0:	beq	19110 <__assert_fail@plt+0x6dd8>
   190e4:	sub	lr, lr, #1
   190e8:	cmp	r0, r2
   190ec:	bcc	19100 <__assert_fail@plt+0x6dc8>
   190f0:	b	190d4 <__assert_fail@plt+0x6d9c>
   190f4:	add	r0, r0, #1
   190f8:	cmp	r0, r2
   190fc:	bcs	190d4 <__assert_fail@plt+0x6d9c>
   19100:	ldrb	r4, [r0]
   19104:	cmp	r3, r4
   19108:	bne	190f4 <__assert_fail@plt+0x6dbc>
   1910c:	b	190cc <__assert_fail@plt+0x6d94>
   19110:	cmp	ip, #0
   19114:	popeq	{r4, sl, fp, pc}
   19118:	ldrb	r1, [r1, #25]
   1911c:	cmp	r1, #0
   19120:	beq	19150 <__assert_fail@plt+0x6e18>
   19124:	cmp	r0, r2
   19128:	bcs	19150 <__assert_fail@plt+0x6e18>
   1912c:	movw	r1, #33672	; 0x8388
   19130:	movt	r1, #3
   19134:	ldrb	r3, [r0]
   19138:	ldrb	r3, [r1, r3]
   1913c:	cmp	r3, #0
   19140:	beq	19150 <__assert_fail@plt+0x6e18>
   19144:	add	r0, r0, #1
   19148:	cmp	r0, r2
   1914c:	bcc	19134 <__assert_fail@plt+0x6dfc>
   19150:	add	r0, r0, ip
   19154:	cmp	r2, r0
   19158:	movcc	r0, r2
   1915c:	pop	{r4, sl, fp, pc}
   19160:	push	{r4, sl, fp, lr}
   19164:	add	fp, sp, #8
   19168:	movw	r2, #33248	; 0x81e0
   1916c:	ldr	lr, [r1]
   19170:	ldr	ip, [r1, #4]
   19174:	movt	r2, #3
   19178:	ldr	r4, [r2]
   1917c:	ldr	r2, [r0]
   19180:	ldr	r0, [r0, #4]
   19184:	add	r0, r2, r0
   19188:	cmp	r4, #256	; 0x100
   1918c:	sub	r3, r0, #1
   19190:	bne	19200 <__assert_fail@plt+0x6ec8>
   19194:	cmp	r2, r3
   19198:	bcs	19228 <__assert_fail@plt+0x6ef0>
   1919c:	movw	r0, #33672	; 0x8388
   191a0:	movt	r0, #3
   191a4:	cmp	lr, #0
   191a8:	bne	191b4 <__assert_fail@plt+0x6e7c>
   191ac:	b	19228 <__assert_fail@plt+0x6ef0>
   191b0:	add	r2, r2, #1
   191b4:	cmp	r2, r3
   191b8:	bcs	191d4 <__assert_fail@plt+0x6e9c>
   191bc:	ldrb	r4, [r2]
   191c0:	ldrb	r4, [r0, r4]
   191c4:	cmp	r4, #0
   191c8:	bne	191b0 <__assert_fail@plt+0x6e78>
   191cc:	b	191d4 <__assert_fail@plt+0x6e9c>
   191d0:	add	r2, r2, #1
   191d4:	cmp	r2, r3
   191d8:	bcs	191ec <__assert_fail@plt+0x6eb4>
   191dc:	ldrb	r4, [r2]
   191e0:	ldrb	r4, [r0, r4]
   191e4:	cmp	r4, #0
   191e8:	beq	191d0 <__assert_fail@plt+0x6e98>
   191ec:	sub	lr, lr, #1
   191f0:	cmp	r2, r3
   191f4:	bcc	191a4 <__assert_fail@plt+0x6e6c>
   191f8:	b	19228 <__assert_fail@plt+0x6ef0>
   191fc:	sub	lr, lr, #1
   19200:	cmp	r2, r3
   19204:	bcs	19228 <__assert_fail@plt+0x6ef0>
   19208:	cmp	lr, #0
   1920c:	beq	19228 <__assert_fail@plt+0x6ef0>
   19210:	cmp	r2, r3
   19214:	bcs	191fc <__assert_fail@plt+0x6ec4>
   19218:	ldrb	r0, [r2], #1
   1921c:	cmp	r4, r0
   19220:	bne	19210 <__assert_fail@plt+0x6ed8>
   19224:	b	191fc <__assert_fail@plt+0x6ec4>
   19228:	ldrb	r0, [r1, #24]
   1922c:	cmp	r0, #0
   19230:	beq	19260 <__assert_fail@plt+0x6f28>
   19234:	cmp	r2, r3
   19238:	bcs	19260 <__assert_fail@plt+0x6f28>
   1923c:	movw	r0, #33672	; 0x8388
   19240:	movt	r0, #3
   19244:	ldrb	r1, [r2]
   19248:	ldrb	r1, [r0, r1]
   1924c:	cmp	r1, #0
   19250:	beq	19260 <__assert_fail@plt+0x6f28>
   19254:	add	r2, r2, #1
   19258:	cmp	r2, r3
   1925c:	bcc	19244 <__assert_fail@plt+0x6f0c>
   19260:	add	r0, r2, ip
   19264:	cmp	r3, r0
   19268:	movcc	r0, r3
   1926c:	pop	{r4, sl, fp, pc}
   19270:	push	{r4, r5, r6, r7, fp, lr}
   19274:	add	fp, sp, #16
   19278:	mov	r5, r2
   1927c:	mov	r4, r1
   19280:	mov	r6, r0
   19284:	bl	12164 <__errno_location@plt>
   19288:	mov	r7, r0
   1928c:	mov	r0, #0
   19290:	mov	r1, r4
   19294:	mov	r2, r5
   19298:	str	r0, [r7]
   1929c:	mov	r0, r6
   192a0:	bl	12158 <strxfrm@plt>
   192a4:	ldr	r5, [r7]
   192a8:	cmp	r5, #0
   192ac:	popeq	{r4, r5, r6, r7, fp, pc}
   192b0:	movw	r1, #26311	; 0x66c7
   192b4:	mov	r0, #0
   192b8:	mov	r2, #5
   192bc:	movt	r1, #2
   192c0:	bl	11f54 <dcgettext@plt>
   192c4:	mov	r2, r0
   192c8:	mov	r0, #0
   192cc:	mov	r1, r5
   192d0:	bl	12080 <error@plt>
   192d4:	movw	r1, #26340	; 0x66e4
   192d8:	mov	r0, #0
   192dc:	mov	r2, #5
   192e0:	movt	r1, #2
   192e4:	bl	11f54 <dcgettext@plt>
   192e8:	mov	r2, r0
   192ec:	mov	r0, #0
   192f0:	mov	r1, #0
   192f4:	bl	12080 <error@plt>
   192f8:	movw	r1, #26382	; 0x670e
   192fc:	mov	r0, #0
   19300:	mov	r2, #5
   19304:	movt	r1, #2
   19308:	bl	11f54 <dcgettext@plt>
   1930c:	mov	r5, r0
   19310:	mov	r0, #0
   19314:	mov	r1, #8
   19318:	mov	r2, r4
   1931c:	bl	2030c <__assert_fail@plt+0xdfd4>
   19320:	mov	r3, r0
   19324:	mov	r0, #2
   19328:	mov	r1, #0
   1932c:	mov	r2, r5
   19330:	bl	12080 <error@plt>
   19334:	cmp	r0, r1
   19338:	bxeq	lr
   1933c:	push	{r4, sl, fp, lr}
   19340:	add	fp, sp, #8
   19344:	mov	r4, r0
   19348:	bl	11f84 <dup2@plt>
   1934c:	mov	r0, r4
   19350:	pop	{r4, sl, fp, lr}
   19354:	b	12320 <close@plt>
   19358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1935c:	add	fp, sp, #28
   19360:	sub	sp, sp, #28
   19364:	mov	r4, r0
   19368:	mov	r6, r1
   1936c:	mov	r0, r1
   19370:	mov	r1, #4
   19374:	mov	r7, r2
   19378:	bl	222d8 <__assert_fail@plt+0xffa0>
   1937c:	cmp	r6, #0
   19380:	str	r0, [r7]
   19384:	beq	19568 <__assert_fail@plt+0x7230>
   19388:	mov	r5, r6
   1938c:	movw	r6, #24854	; 0x6116
   19390:	mov	r9, r0
   19394:	mov	r7, #0
   19398:	str	r0, [sp, #8]
   1939c:	str	r4, [sp, #4]
   193a0:	movt	r6, #2
   193a4:	str	r5, [sp, #12]
   193a8:	add	r0, r4, r7, lsl #3
   193ac:	ldr	sl, [r0, #4]
   193b0:	cmp	sl, #0
   193b4:	ldrbne	r0, [sl, #8]
   193b8:	cmpne	r0, #0
   193bc:	bne	193d4 <__assert_fail@plt+0x709c>
   193c0:	ldr	r0, [r4, r7, lsl #3]
   193c4:	mov	r1, r6
   193c8:	bl	17428 <__assert_fail@plt+0x50f0>
   193cc:	mov	r8, r0
   193d0:	b	1954c <__assert_fail@plt+0x7214>
   193d4:	cmp	r0, #1
   193d8:	bne	19418 <__assert_fail@plt+0x70e0>
   193dc:	movw	r0, #34972	; 0x889c
   193e0:	ldr	r6, [sl, #4]
   193e4:	add	r1, sp, #16
   193e8:	movt	r0, #3
   193ec:	ldr	r0, [r0]
   193f0:	str	r6, [sp, #20]
   193f4:	bl	1ddb4 <__assert_fail@plt+0xba7c>
   193f8:	cmp	r0, #0
   193fc:	beq	19410 <__assert_fail@plt+0x70d8>
   19400:	mov	r1, #2
   19404:	strb	r1, [r0, #8]
   19408:	mov	r0, r6
   1940c:	bl	1a334 <__assert_fail@plt+0x7ffc>
   19410:	movw	r6, #24854	; 0x6116
   19414:	movt	r6, #2
   19418:	add	r0, sl, #9
   1941c:	mov	r1, #0
   19420:	mov	r8, #0
   19424:	bl	1208c <open64@plt>
   19428:	cmp	r0, #0
   1942c:	blt	1950c <__assert_fail@plt+0x71d4>
   19430:	mov	r9, r0
   19434:	add	r0, sp, #16
   19438:	mov	r1, #9
   1943c:	bl	1a0cc <__assert_fail@plt+0x7d94>
   19440:	cmn	r0, #1
   19444:	beq	19514 <__assert_fail@plt+0x71dc>
   19448:	cmp	r0, #0
   1944c:	beq	19578 <__assert_fail@plt+0x7240>
   19450:	str	r0, [sl, #4]
   19454:	movw	r0, #34972	; 0x889c
   19458:	movt	r0, #3
   1945c:	ldr	r0, [r0]
   19460:	cmp	r0, #0
   19464:	bne	194a0 <__assert_fail@plt+0x7168>
   19468:	movw	r2, #42072	; 0xa458
   1946c:	movw	r3, #42088	; 0xa468
   19470:	mov	r0, #0
   19474:	mov	r1, #0
   19478:	str	r0, [sp]
   1947c:	mov	r0, #47	; 0x2f
   19480:	movt	r2, #1
   19484:	movt	r3, #1
   19488:	bl	1d230 <__assert_fail@plt+0xaef8>
   1948c:	movw	r1, #34972	; 0x889c
   19490:	cmp	r0, #0
   19494:	movt	r1, #3
   19498:	str	r0, [r1]
   1949c:	beq	195cc <__assert_fail@plt+0x7294>
   194a0:	mov	r1, #1
   194a4:	strb	r1, [sl, #8]
   194a8:	mov	r1, sl
   194ac:	bl	1dd74 <__assert_fail@plt+0xba3c>
   194b0:	cmp	r0, #0
   194b4:	beq	195cc <__assert_fail@plt+0x7294>
   194b8:	mov	r0, r9
   194bc:	bl	12320 <close@plt>
   194c0:	ldr	r0, [sp, #20]
   194c4:	bl	12320 <close@plt>
   194c8:	ldr	r0, [sp, #16]
   194cc:	mov	r1, r6
   194d0:	bl	11df8 <fdopen@plt>
   194d4:	ldr	r5, [sp, #12]
   194d8:	mov	r8, r0
   194dc:	cmp	r0, #0
   194e0:	bne	19548 <__assert_fail@plt+0x7210>
   194e4:	bl	12164 <__errno_location@plt>
   194e8:	mov	r4, r0
   194ec:	ldr	r6, [r0]
   194f0:	ldr	r0, [sp, #16]
   194f4:	bl	12320 <close@plt>
   194f8:	ldr	r5, [sp, #12]
   194fc:	str	r6, [r4]
   19500:	movw	r6, #24854	; 0x6116
   19504:	mov	r8, #0
   19508:	b	19544 <__assert_fail@plt+0x720c>
   1950c:	ldr	r5, [sp, #12]
   19510:	b	19548 <__assert_fail@plt+0x7210>
   19514:	bl	12164 <__errno_location@plt>
   19518:	ldr	r6, [r0]
   1951c:	cmp	r6, #24
   19520:	bne	195d0 <__assert_fail@plt+0x7298>
   19524:	mov	r4, r0
   19528:	mov	r0, r9
   1952c:	bl	12320 <close@plt>
   19530:	ldr	r5, [sp, #12]
   19534:	movw	r6, #24854	; 0x6116
   19538:	mov	r0, #24
   1953c:	mov	r8, #0
   19540:	str	r0, [r4]
   19544:	movt	r6, #2
   19548:	ldmib	sp, {r4, r9}
   1954c:	cmp	r8, #0
   19550:	str	r8, [r9, r7, lsl #2]
   19554:	beq	1956c <__assert_fail@plt+0x7234>
   19558:	add	r7, r7, #1
   1955c:	cmp	r7, r5
   19560:	bcc	193a8 <__assert_fail@plt+0x7070>
   19564:	b	1956c <__assert_fail@plt+0x7234>
   19568:	mov	r7, #0
   1956c:	mov	r0, r7
   19570:	sub	sp, fp, #28
   19574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19578:	ldr	r0, [sp, #16]
   1957c:	bl	12320 <close@plt>
   19580:	mov	r0, r9
   19584:	mov	r1, #0
   19588:	bl	19334 <__assert_fail@plt+0x6ffc>
   1958c:	ldr	r0, [sp, #20]
   19590:	mov	r1, #1
   19594:	bl	19334 <__assert_fail@plt+0x6ffc>
   19598:	movw	r0, #33648	; 0x8370
   1959c:	movw	r2, #26492	; 0x677c
   195a0:	mov	r3, #0
   195a4:	movt	r0, #3
   195a8:	movt	r2, #2
   195ac:	ldr	r0, [r0]
   195b0:	mov	r1, r0
   195b4:	bl	11ed0 <execlp@plt>
   195b8:	bl	12164 <__errno_location@plt>
   195bc:	ldr	r0, [r0]
   195c0:	movw	r1, #26495	; 0x677f
   195c4:	movt	r1, #2
   195c8:	bl	1a2a8 <__assert_fail@plt+0x7f70>
   195cc:	bl	22768 <__assert_fail@plt+0x10430>
   195d0:	movw	r1, #26461	; 0x675d
   195d4:	mov	r0, #0
   195d8:	mov	r2, #5
   195dc:	movt	r1, #2
   195e0:	bl	11f54 <dcgettext@plt>
   195e4:	mov	r4, r0
   195e8:	movw	r0, #33648	; 0x8370
   195ec:	movt	r0, #3
   195f0:	ldr	r1, [r0]
   195f4:	mov	r0, #4
   195f8:	bl	203b4 <__assert_fail@plt+0xe07c>
   195fc:	mov	r3, r0
   19600:	mov	r0, #2
   19604:	mov	r1, r6
   19608:	mov	r2, r4
   1960c:	bl	12080 <error@plt>
   19610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19614:	add	fp, sp, #28
   19618:	sub	sp, sp, #84	; 0x54
   1961c:	str	r1, [sp, #52]	; 0x34
   19620:	str	r0, [fp, #-48]	; 0xffffffd0
   19624:	mov	r0, r2
   19628:	mov	r1, #28
   1962c:	str	r3, [sp, #36]	; 0x24
   19630:	mov	r5, r2
   19634:	bl	222d8 <__assert_fail@plt+0xffa0>
   19638:	mov	r4, r0
   1963c:	mov	r0, r5
   19640:	mov	r1, #4
   19644:	bl	222d8 <__assert_fail@plt+0xffa0>
   19648:	str	r0, [fp, #-52]	; 0xffffffcc
   1964c:	mov	r0, r5
   19650:	mov	r1, #4
   19654:	bl	222d8 <__assert_fail@plt+0xffa0>
   19658:	str	r0, [sp, #44]	; 0x2c
   1965c:	mov	r0, r5
   19660:	mov	r1, #4
   19664:	bl	222d8 <__assert_fail@plt+0xffa0>
   19668:	mov	r8, r0
   1966c:	mov	r0, #0
   19670:	cmp	r5, #0
   19674:	str	r0, [fp, #-44]	; 0xffffffd4
   19678:	beq	19dd0 <__assert_fail@plt+0x7a98>
   1967c:	movw	r0, #33656	; 0x8378
   19680:	ldr	r9, [fp, #-48]	; 0xffffffd0
   19684:	mov	sl, #0
   19688:	str	r4, [sp, #56]	; 0x38
   1968c:	str	r8, [sp, #48]	; 0x30
   19690:	movt	r0, #3
   19694:	ldr	r0, [r0]
   19698:	str	r0, [sp, #20]
   1969c:	ldr	r0, [fp, #12]
   196a0:	add	r0, r0, #4
   196a4:	str	r0, [sp, #40]	; 0x28
   196a8:	rsb	r0, sl, sl, lsl #3
   196ac:	movw	r1, #33368	; 0x8258
   196b0:	add	r6, r4, r0, lsl #2
   196b4:	movw	r0, #33668	; 0x8384
   196b8:	movt	r1, #3
   196bc:	movt	r0, #3
   196c0:	ldr	r1, [r1]
   196c4:	ldr	r0, [r0]
   196c8:	udiv	r0, r0, r5
   196cc:	cmp	r1, r0
   196d0:	movhi	r0, r1
   196d4:	and	r1, r0, #15
   196d8:	rsb	r1, r1, #16
   196dc:	add	r7, r1, r0
   196e0:	mov	r0, r7
   196e4:	bl	23808 <__assert_fail@plt+0x114d0>
   196e8:	cmp	r0, #0
   196ec:	str	r0, [r6]
   196f0:	bne	19704 <__assert_fail@plt+0x73cc>
   196f4:	lsr	r0, r7, #1
   196f8:	cmp	r7, #35	; 0x23
   196fc:	bhi	196d4 <__assert_fail@plt+0x739c>
   19700:	b	198d8 <__assert_fail@plt+0x75a0>
   19704:	mov	r4, r6
   19708:	ldr	r8, [fp, #12]
   1970c:	mov	r0, #0
   19710:	mov	r1, #16
   19714:	str	r7, [r4, #12]!
   19718:	mov	r7, r4
   1971c:	str	r0, [r4, #4]
   19720:	str	r1, [r4, #8]
   19724:	str	r0, [r4, #-8]
   19728:	strb	r0, [r4, #12]
   1972c:	str	r0, [r7, #-4]!
   19730:	mov	r0, r6
   19734:	ldr	r2, [r9, sl, lsl #3]
   19738:	ldr	r1, [r8, sl, lsl #2]
   1973c:	bl	17690 <__assert_fail@plt+0x5358>
   19740:	cmp	r0, #0
   19744:	beq	1977c <__assert_fail@plt+0x7444>
   19748:	ldr	r0, [r4]
   1974c:	ldr	r1, [r6]
   19750:	ldr	r2, [fp, #-52]	; 0xffffffcc
   19754:	ldr	r8, [sp, #48]	; 0x30
   19758:	add	r0, r1, r0
   1975c:	sub	r1, r0, #16
   19760:	str	r1, [r2, sl, lsl #2]
   19764:	ldr	r1, [r7]
   19768:	sub	r0, r0, r1, lsl #4
   1976c:	ldr	r1, [sp, #44]	; 0x2c
   19770:	str	r0, [r1, sl, lsl #2]
   19774:	add	sl, sl, #1
   19778:	b	19884 <__assert_fail@plt+0x754c>
   1977c:	ldr	r1, [r9, sl, lsl #3]
   19780:	ldr	r0, [r8, sl, lsl #2]
   19784:	bl	169f0 <__assert_fail@plt+0x46b8>
   19788:	ldr	r4, [sp, #52]	; 0x34
   1978c:	cmp	sl, r4
   19790:	bcs	197a0 <__assert_fail@plt+0x7468>
   19794:	ldr	r0, [r9, sl, lsl #3]
   19798:	bl	1a480 <__assert_fail@plt+0x8148>
   1979c:	sub	r4, r4, #1
   197a0:	ldr	r0, [r6]
   197a4:	str	r4, [sp, #52]	; 0x34
   197a8:	bl	1cc78 <__assert_fail@plt+0xa940>
   197ac:	ldr	r8, [sp, #48]	; 0x30
   197b0:	sub	r0, r5, #1
   197b4:	cmp	sl, r0
   197b8:	bcs	19880 <__assert_fail@plt+0x7548>
   197bc:	ldr	r6, [fp, #-48]	; 0xffffffd0
   197c0:	mvn	r1, sl
   197c4:	mov	r2, sl
   197c8:	add	lr, r5, r1
   197cc:	cmp	lr, #2
   197d0:	bcc	19844 <__assert_fail@plt+0x750c>
   197d4:	ldr	r1, [fp, #12]
   197d8:	add	r3, r6, sl, lsl #3
   197dc:	add	r2, r1, r5, lsl #2
   197e0:	cmp	r3, r2
   197e4:	bcs	19800 <__assert_fail@plt+0x74c8>
   197e8:	ldr	r1, [fp, #12]
   197ec:	add	r2, r6, r5, lsl #3
   197f0:	add	r7, r1, sl, lsl #2
   197f4:	cmp	r7, r2
   197f8:	mov	r2, sl
   197fc:	bcc	19844 <__assert_fail@plt+0x750c>
   19800:	ldr	r1, [sp, #40]	; 0x28
   19804:	bic	ip, lr, #1
   19808:	add	r2, sl, ip
   1980c:	mov	r7, ip
   19810:	add	r6, r1, sl, lsl #2
   19814:	mov	r4, r6
   19818:	add	r1, r3, #8
   1981c:	subs	r7, r7, #2
   19820:	vld1.32	{d16-d17}, [r1]
   19824:	vst1.32	{d16-d17}, [r3]!
   19828:	vld1.32	{d16}, [r4]!
   1982c:	vstr	d16, [r6, #-4]
   19830:	mov	r6, r4
   19834:	bne	19818 <__assert_fail@plt+0x74e0>
   19838:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1983c:	cmp	lr, ip
   19840:	beq	19880 <__assert_fail@plt+0x7548>
   19844:	ldr	r1, [sp, #40]	; 0x28
   19848:	add	r7, r6, r2, lsl #3
   1984c:	sub	r3, r5, #1
   19850:	add	r1, r1, r2, lsl #2
   19854:	sub	r2, r3, r2
   19858:	mov	r3, r7
   1985c:	ldr	r6, [r7, #12]
   19860:	ldr	r4, [r3, #8]!
   19864:	subs	r2, r2, #1
   19868:	stm	r7, {r4, r6}
   1986c:	ldr	r7, [r1]
   19870:	str	r7, [r1, #-4]
   19874:	add	r1, r1, #4
   19878:	mov	r7, r3
   1987c:	bne	1985c <__assert_fail@plt+0x7524>
   19880:	mov	r5, r0
   19884:	ldr	r4, [sp, #56]	; 0x38
   19888:	cmp	sl, r5
   1988c:	bcc	196a8 <__assert_fail@plt+0x7370>
   19890:	cmp	r5, #0
   19894:	beq	19dd0 <__assert_fail@plt+0x7a98>
   19898:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1989c:	mov	r0, #0
   198a0:	cmp	r5, #3
   198a4:	bls	198e4 <__assert_fail@plt+0x75ac>
   198a8:	add	r1, pc, #832	; 0x340
   198ac:	bic	r0, r5, #3
   198b0:	vmov.i32	q8, #4	; 0x00000004
   198b4:	mov	r2, r8
   198b8:	vld1.64	{d18-d19}, [r1 :128]
   198bc:	mov	r1, r0
   198c0:	vadd.i32	q10, q9, q8
   198c4:	vst1.32	{d18-d19}, [r2]!
   198c8:	subs	r1, r1, #4
   198cc:	vorr	q9, q10, q10
   198d0:	bne	198c0 <__assert_fail@plt+0x7588>
   198d4:	b	198dc <__assert_fail@plt+0x75a4>
   198d8:	bl	22768 <__assert_fail@plt+0x10430>
   198dc:	cmp	r5, r0
   198e0:	beq	198f0 <__assert_fail@plt+0x75b8>
   198e4:	str	r0, [r8, r0, lsl #2]
   198e8:	add	r0, r0, #1
   198ec:	b	198dc <__assert_fail@plt+0x75a4>
   198f0:	cmp	r5, #2
   198f4:	bcc	1993c <__assert_fail@plt+0x7604>
   198f8:	mov	r6, #1
   198fc:	ldr	r0, [r8, r6, lsl #2]
   19900:	sub	r4, r6, #1
   19904:	ldr	r1, [r3, r0, lsl #2]
   19908:	ldr	r0, [r8, r4, lsl #2]
   1990c:	ldr	r0, [r3, r0, lsl #2]
   19910:	bl	179a4 <__assert_fail@plt+0x566c>
   19914:	cmp	r0, #1
   19918:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1991c:	ldrge	r0, [r8, r4, lsl #2]
   19920:	ldrge	r1, [r8, r6, lsl #2]
   19924:	strge	r1, [r8, r4, lsl #2]
   19928:	strge	r0, [r8, r6, lsl #2]
   1992c:	movge	r6, #0
   19930:	add	r6, r6, #1
   19934:	cmp	r6, r5
   19938:	bcc	198fc <__assert_fail@plt+0x75c4>
   1993c:	ldr	r4, [sp, #56]	; 0x38
   19940:	cmp	r5, #0
   19944:	beq	19dd0 <__assert_fail@plt+0x7a98>
   19948:	add	r0, r8, #4
   1994c:	str	r0, [sp, #24]
   19950:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19954:	add	r0, r0, #8
   19958:	str	r0, [sp, #16]
   1995c:	add	r0, r4, #28
   19960:	str	r0, [sp, #12]
   19964:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19968:	add	r0, r0, #4
   1996c:	str	r0, [sp, #8]
   19970:	ldr	r0, [sp, #44]	; 0x2c
   19974:	add	r0, r0, #4
   19978:	str	r0, [sp, #4]
   1997c:	mov	r0, #0
   19980:	str	r0, [sp, #32]
   19984:	mov	r0, #0
   19988:	str	r0, [sp, #28]
   1998c:	ldr	r0, [r8]
   19990:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19994:	ldr	sl, [r1, r0, lsl #2]
   19998:	movw	r0, #33654	; 0x8376
   1999c:	movt	r0, #3
   199a0:	ldrb	r0, [r0]
   199a4:	cmp	r0, #1
   199a8:	bne	19a08 <__assert_fail@plt+0x76d0>
   199ac:	ldr	r0, [sp, #32]
   199b0:	ldr	r6, [sp, #28]
   199b4:	cmp	r0, #0
   199b8:	beq	199dc <__assert_fail@plt+0x76a4>
   199bc:	mov	r1, sl
   199c0:	bl	179a4 <__assert_fail@plt+0x566c>
   199c4:	cmp	r0, #0
   199c8:	beq	19a8c <__assert_fail@plt+0x7754>
   199cc:	ldr	r1, [sp, #36]	; 0x24
   199d0:	ldr	r2, [fp, #8]
   199d4:	sub	r0, fp, #44	; 0x2c
   199d8:	bl	18914 <__assert_fail@plt+0x65dc>
   199dc:	ldr	r2, [sl, #4]
   199e0:	cmp	r6, r2
   199e4:	bcs	19a1c <__assert_fail@plt+0x76e4>
   199e8:	mov	r0, r6
   199ec:	cmp	r0, #0
   199f0:	beq	19a24 <__assert_fail@plt+0x76ec>
   199f4:	lsl	r6, r0, #1
   199f8:	cmp	r2, r0, lsl #1
   199fc:	mov	r0, r6
   19a00:	bhi	199ec <__assert_fail@plt+0x76b4>
   19a04:	b	19a28 <__assert_fail@plt+0x76f0>
   19a08:	ldr	r1, [sp, #36]	; 0x24
   19a0c:	ldr	r2, [fp, #8]
   19a10:	mov	r0, sl
   19a14:	bl	18914 <__assert_fail@plt+0x65dc>
   19a18:	b	19a8c <__assert_fail@plt+0x7754>
   19a1c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19a20:	b	19a40 <__assert_fail@plt+0x7708>
   19a24:	mov	r6, r2
   19a28:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19a2c:	bl	1cc78 <__assert_fail@plt+0xa940>
   19a30:	mov	r0, r6
   19a34:	bl	22208 <__assert_fail@plt+0xfed0>
   19a38:	str	r0, [fp, #-44]	; 0xffffffd4
   19a3c:	ldr	r2, [sl, #4]
   19a40:	str	r2, [fp, #-40]	; 0xffffffd8
   19a44:	ldr	r1, [sl]
   19a48:	bl	11ec4 <memcpy@plt>
   19a4c:	ldr	r0, [sp, #20]
   19a50:	str	r6, [sp, #28]
   19a54:	cmp	r0, #0
   19a58:	beq	19a84 <__assert_fail@plt+0x774c>
   19a5c:	ldr	r0, [sl]
   19a60:	ldr	r1, [sl, #8]
   19a64:	ldr	r2, [fp, #-44]	; 0xffffffd4
   19a68:	sub	r1, r1, r0
   19a6c:	add	r1, r2, r1
   19a70:	str	r1, [fp, #-36]	; 0xffffffdc
   19a74:	ldr	r1, [sl, #12]
   19a78:	sub	r0, r1, r0
   19a7c:	add	r0, r2, r0
   19a80:	str	r0, [fp, #-32]	; 0xffffffe0
   19a84:	sub	r0, fp, #44	; 0x2c
   19a88:	str	r0, [sp, #32]
   19a8c:	ldr	r7, [r8]
   19a90:	ldr	r0, [sp, #44]	; 0x2c
   19a94:	ldr	r0, [r0, r7, lsl #2]
   19a98:	cmp	r0, sl
   19a9c:	bcs	19ab0 <__assert_fail@plt+0x7778>
   19aa0:	ldr	r4, [fp, #-52]	; 0xffffffcc
   19aa4:	sub	r0, sl, #16
   19aa8:	str	r0, [r4, r7, lsl #2]
   19aac:	b	19b04 <__assert_fail@plt+0x77cc>
   19ab0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19ab4:	ldr	r2, [r0, r7, lsl #3]
   19ab8:	ldr	r0, [fp, #12]
   19abc:	ldr	r1, [r0, r7, lsl #2]
   19ac0:	rsb	r0, r7, r7, lsl #3
   19ac4:	add	r0, r4, r0, lsl #2
   19ac8:	bl	17690 <__assert_fail@plt+0x5358>
   19acc:	cmp	r0, #0
   19ad0:	beq	19c00 <__assert_fail@plt+0x78c8>
   19ad4:	ldr	r7, [r8]
   19ad8:	rsb	r0, r7, r7, lsl #3
   19adc:	ldr	r0, [r4, r0, lsl #2]!
   19ae0:	ldr	r1, [r4, #12]
   19ae4:	ldr	r2, [r4, #8]
   19ae8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   19aec:	add	r1, r0, r1
   19af0:	sub	r0, r1, #16
   19af4:	sub	r1, r1, r2, lsl #4
   19af8:	ldr	r2, [sp, #44]	; 0x2c
   19afc:	str	r0, [r4, r7, lsl #2]
   19b00:	str	r1, [r2, r7, lsl #2]
   19b04:	mov	r1, #0
   19b08:	cmp	r5, #2
   19b0c:	bcc	19bdc <__assert_fail@plt+0x78a4>
   19b10:	mov	r9, #1
   19b14:	mov	sl, r5
   19b18:	mov	r6, #1
   19b1c:	b	19b2c <__assert_fail@plt+0x77f4>
   19b20:	ldr	r0, [r4, r7, lsl #2]
   19b24:	add	r1, sl, r6
   19b28:	lsr	r9, r1, #1
   19b2c:	ldr	r1, [r8, r9, lsl #2]
   19b30:	ldr	r1, [r4, r1, lsl #2]
   19b34:	bl	179a4 <__assert_fail@plt+0x566c>
   19b38:	cmp	r0, #0
   19b3c:	blt	19b50 <__assert_fail@plt+0x7818>
   19b40:	bne	19b60 <__assert_fail@plt+0x7828>
   19b44:	ldr	r0, [r8, r9, lsl #2]
   19b48:	cmp	r7, r0
   19b4c:	bcs	19b60 <__assert_fail@plt+0x7828>
   19b50:	mov	sl, r9
   19b54:	cmp	r6, sl
   19b58:	bcc	19b20 <__assert_fail@plt+0x77e8>
   19b5c:	b	19b6c <__assert_fail@plt+0x7834>
   19b60:	add	r6, r9, #1
   19b64:	cmp	r6, sl
   19b68:	bcc	19b20 <__assert_fail@plt+0x77e8>
   19b6c:	subs	r0, r6, #1
   19b70:	mov	r1, #0
   19b74:	beq	19bdc <__assert_fail@plt+0x78a4>
   19b78:	mov	r1, #0
   19b7c:	cmp	r0, #4
   19b80:	bcc	19bb4 <__assert_fail@plt+0x787c>
   19b84:	bic	r1, r0, #3
   19b88:	mov	r4, r5
   19b8c:	mov	r3, r8
   19b90:	mov	r2, r1
   19b94:	add	r5, r3, #4
   19b98:	subs	r2, r2, #4
   19b9c:	vld1.32	{d16-d17}, [r5]
   19ba0:	vst1.32	{d16-d17}, [r3]!
   19ba4:	bne	19b94 <__assert_fail@plt+0x785c>
   19ba8:	cmp	r0, r1
   19bac:	mov	r5, r4
   19bb0:	beq	19bd8 <__assert_fail@plt+0x78a0>
   19bb4:	ldr	r2, [sp, #24]
   19bb8:	add	r2, r2, r1, lsl #2
   19bbc:	mvn	r1, r1
   19bc0:	add	r1, r1, r6
   19bc4:	ldr	r3, [r2]
   19bc8:	subs	r1, r1, #1
   19bcc:	str	r3, [r2, #-4]
   19bd0:	add	r2, r2, #4
   19bd4:	bne	19bc4 <__assert_fail@plt+0x788c>
   19bd8:	mov	r1, r0
   19bdc:	ldr	r4, [sp, #56]	; 0x38
   19be0:	str	r7, [r8, r1, lsl #2]
   19be4:	cmp	r5, #0
   19be8:	bne	1998c <__assert_fail@plt+0x7654>
   19bec:	b	19d9c <__assert_fail@plt+0x7a64>
   19bf0:	andeq	r0, r0, r0
   19bf4:	andeq	r0, r0, r1
   19bf8:	andeq	r0, r0, r2
   19bfc:	andeq	r0, r0, r3
   19c00:	ldr	r7, [fp, #12]
   19c04:	cmp	r5, #2
   19c08:	bcc	19c34 <__assert_fail@plt+0x78fc>
   19c0c:	ldr	r1, [sp, #24]
   19c10:	sub	r0, r5, #1
   19c14:	ldr	r2, [r1]
   19c18:	ldr	r3, [r8]
   19c1c:	cmp	r2, r3
   19c20:	subhi	r2, r2, #1
   19c24:	strhi	r2, [r1]
   19c28:	subs	r0, r0, #1
   19c2c:	add	r1, r1, #4
   19c30:	bne	19c14 <__assert_fail@plt+0x78dc>
   19c34:	ldr	r0, [r8]
   19c38:	ldr	r6, [fp, #-48]	; 0xffffffd0
   19c3c:	ldr	r1, [r6, r0, lsl #3]
   19c40:	ldr	r0, [r7, r0, lsl #2]
   19c44:	bl	169f0 <__assert_fail@plt+0x46b8>
   19c48:	mov	sl, r5
   19c4c:	sub	r9, r5, #1
   19c50:	ldr	r0, [r8]
   19c54:	ldr	r5, [sp, #52]	; 0x34
   19c58:	cmp	r0, r5
   19c5c:	bcs	19c74 <__assert_fail@plt+0x793c>
   19c60:	ldr	r0, [r6, r0, lsl #3]
   19c64:	bl	1a480 <__assert_fail@plt+0x8148>
   19c68:	ldr	r0, [r8]
   19c6c:	sub	r5, r5, #1
   19c70:	str	r5, [sp, #52]	; 0x34
   19c74:	rsb	r0, r0, r0, lsl #3
   19c78:	ldr	r0, [r4, r0, lsl #2]
   19c7c:	bl	1cc78 <__assert_fail@plt+0xa940>
   19c80:	ldr	r7, [r8]
   19c84:	mvn	ip, #15
   19c88:	cmp	r7, r9
   19c8c:	bcs	19d1c <__assert_fail@plt+0x79e4>
   19c90:	ldr	r0, [sp, #40]	; 0x28
   19c94:	ldr	r1, [sp, #16]
   19c98:	ldr	r2, [sp, #8]
   19c9c:	ldr	r3, [sp, #4]
   19ca0:	ldr	r5, [sp, #12]
   19ca4:	rsb	r6, r7, r7, lsl #3
   19ca8:	sub	r4, sl, #1
   19cac:	add	r0, r0, r7, lsl #2
   19cb0:	add	r1, r1, r7, lsl #3
   19cb4:	add	r2, r2, r7, lsl #2
   19cb8:	add	r3, r3, r7, lsl #2
   19cbc:	add	r5, r5, r6, lsl #2
   19cc0:	sub	r7, r4, r7
   19cc4:	ldr	r4, [r0]
   19cc8:	subs	r7, r7, #1
   19ccc:	str	r4, [r0, #-4]
   19cd0:	add	r0, r0, #4
   19cd4:	ldm	r1, {r4, r6}
   19cd8:	stmdb	r1, {r4, r6}
   19cdc:	mov	r6, r5
   19ce0:	add	r4, r5, #12
   19ce4:	add	r1, r1, #8
   19ce8:	vld1.32	{d16-d17}, [r6], ip
   19cec:	vld1.32	{d18-d19}, [r4]
   19cf0:	vst1.32	{d18-d19}, [r6]
   19cf4:	sub	r6, r5, #28
   19cf8:	add	r5, r5, #28
   19cfc:	vst1.32	{d16-d17}, [r6]
   19d00:	ldr	r6, [r2]
   19d04:	str	r6, [r2, #-4]
   19d08:	ldr	r6, [r3]
   19d0c:	add	r2, r2, #4
   19d10:	str	r6, [r3, #-4]
   19d14:	add	r3, r3, #4
   19d18:	bne	19cc4 <__assert_fail@plt+0x798c>
   19d1c:	ldr	r4, [sp, #56]	; 0x38
   19d20:	cmp	r9, #0
   19d24:	beq	19d9c <__assert_fail@plt+0x7a64>
   19d28:	mov	r0, #0
   19d2c:	cmp	r9, #3
   19d30:	bls	19d6c <__assert_fail@plt+0x7a34>
   19d34:	bic	r0, r9, #3
   19d38:	mov	r2, r8
   19d3c:	mov	r1, r0
   19d40:	add	r3, r2, #4
   19d44:	subs	r1, r1, #4
   19d48:	vld1.32	{d16-d17}, [r3]
   19d4c:	vst1.32	{d16-d17}, [r2]!
   19d50:	bne	19d40 <__assert_fail@plt+0x7a08>
   19d54:	cmp	r9, r0
   19d58:	bne	19d6c <__assert_fail@plt+0x7a34>
   19d5c:	mov	r5, r9
   19d60:	cmp	r5, #0
   19d64:	bne	1998c <__assert_fail@plt+0x7654>
   19d68:	b	19d9c <__assert_fail@plt+0x7a64>
   19d6c:	ldr	r1, [sp, #24]
   19d70:	sub	r2, sl, #1
   19d74:	add	r1, r1, r0, lsl #2
   19d78:	sub	r0, r2, r0
   19d7c:	ldr	r2, [r1]
   19d80:	subs	r0, r0, #1
   19d84:	str	r2, [r1, #-4]
   19d88:	add	r1, r1, #4
   19d8c:	bne	19d7c <__assert_fail@plt+0x7a44>
   19d90:	mov	r5, r9
   19d94:	cmp	r5, #0
   19d98:	bne	1998c <__assert_fail@plt+0x7654>
   19d9c:	ldr	r0, [sp, #32]
   19da0:	cmp	r0, #0
   19da4:	movwne	r0, #33654	; 0x8376
   19da8:	movtne	r0, #3
   19dac:	ldrbne	r0, [r0]
   19db0:	cmpne	r0, #0
   19db4:	beq	19dd0 <__assert_fail@plt+0x7a98>
   19db8:	ldr	r1, [sp, #36]	; 0x24
   19dbc:	ldr	r2, [fp, #8]
   19dc0:	sub	r0, fp, #44	; 0x2c
   19dc4:	bl	18914 <__assert_fail@plt+0x65dc>
   19dc8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19dcc:	bl	1cc78 <__assert_fail@plt+0xa940>
   19dd0:	ldr	r0, [sp, #36]	; 0x24
   19dd4:	ldr	r1, [fp, #8]
   19dd8:	bl	169f0 <__assert_fail@plt+0x46b8>
   19ddc:	ldr	r0, [fp, #12]
   19de0:	bl	1cc78 <__assert_fail@plt+0xa940>
   19de4:	mov	r0, r4
   19de8:	bl	1cc78 <__assert_fail@plt+0xa940>
   19dec:	mov	r0, r8
   19df0:	bl	1cc78 <__assert_fail@plt+0xa940>
   19df4:	ldr	r0, [sp, #44]	; 0x2c
   19df8:	bl	1cc78 <__assert_fail@plt+0xa940>
   19dfc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19e00:	bl	1cc78 <__assert_fail@plt+0xa940>
   19e04:	sub	sp, fp, #28
   19e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e10:	add	fp, sp, #28
   19e14:	sub	sp, sp, #148	; 0x94
   19e18:	movw	r7, #34980	; 0x88a4
   19e1c:	str	r1, [sp, #8]
   19e20:	movw	r1, #34704	; 0x8790
   19e24:	str	r0, [sp, #12]
   19e28:	movt	r1, #3
   19e2c:	movt	r7, #3
   19e30:	ldr	r0, [r7]
   19e34:	ldr	r1, [r1]
   19e38:	ldr	r6, [r1, r0, lsl #2]
   19e3c:	mov	r0, r6
   19e40:	bl	12140 <strlen@plt>
   19e44:	mov	r5, r0
   19e48:	add	r0, r0, #24
   19e4c:	bic	r0, r0, #3
   19e50:	bl	22208 <__assert_fail@plt+0xfed0>
   19e54:	add	sl, r0, #9
   19e58:	mov	r4, r0
   19e5c:	mov	r1, r6
   19e60:	mov	r2, r5
   19e64:	mov	r0, sl
   19e68:	bl	11ec4 <memcpy@plt>
   19e6c:	movw	r0, #27704	; 0x6c38
   19e70:	movw	r1, #22616	; 0x5858
   19e74:	movt	r0, #2
   19e78:	movt	r1, #88	; 0x58
   19e7c:	vldr	d16, [r0]
   19e80:	add	r0, sl, r5
   19e84:	str	r1, [r0, #8]
   19e88:	vst1.8	{d16}, [r0]
   19e8c:	mov	r0, #0
   19e90:	str	r0, [r4]
   19e94:	movw	r0, #33664	; 0x8380
   19e98:	movt	r0, #3
   19e9c:	ldr	r1, [r7]
   19ea0:	ldr	r0, [r0]
   19ea4:	add	r1, r1, #1
   19ea8:	subs	r0, r1, r0
   19eac:	movne	r0, r1
   19eb0:	movw	r1, #33520	; 0x82f0
   19eb4:	str	r0, [r7]
   19eb8:	add	r0, sp, #16
   19ebc:	movt	r1, #3
   19ec0:	add	r9, r0, #4
   19ec4:	mov	r0, #0
   19ec8:	mov	r2, r9
   19ecc:	bl	12050 <pthread_sigmask@plt>
   19ed0:	clz	r0, r0
   19ed4:	mov	r1, #524288	; 0x80000
   19ed8:	lsr	r0, r0, #5
   19edc:	strb	r0, [sp, #16]
   19ee0:	mov	r0, sl
   19ee4:	bl	21638 <__assert_fail@plt+0xf300>
   19ee8:	cmp	r0, #0
   19eec:	mov	r7, r0
   19ef0:	movwge	r0, #33372	; 0x825c
   19ef4:	movtge	r0, #3
   19ef8:	ldrge	r1, [r0]
   19efc:	strge	r4, [r1]
   19f00:	strge	r4, [r0]
   19f04:	bl	12164 <__errno_location@plt>
   19f08:	mov	r5, r0
   19f0c:	ldr	r8, [r0]
   19f10:	ldrb	r0, [sp, #16]
   19f14:	cmp	r0, #0
   19f18:	beq	19f2c <__assert_fail@plt+0x7bf4>
   19f1c:	mov	r0, #2
   19f20:	mov	r1, r9
   19f24:	mov	r2, #0
   19f28:	bl	12050 <pthread_sigmask@plt>
   19f2c:	cmn	r7, #1
   19f30:	str	r8, [r5]
   19f34:	ble	19fe0 <__assert_fail@plt+0x7ca8>
   19f38:	movw	r6, #33648	; 0x8370
   19f3c:	mov	r0, #0
   19f40:	movt	r6, #3
   19f44:	strb	r0, [r4, #8]
   19f48:	ldr	r0, [r6]
   19f4c:	cmp	r0, #0
   19f50:	beq	1a00c <__assert_fail@plt+0x7cd4>
   19f54:	add	r0, sp, #16
   19f58:	mov	r1, #4
   19f5c:	bl	1a0cc <__assert_fail@plt+0x7d94>
   19f60:	cmp	r0, #1
   19f64:	str	r0, [r4, #4]
   19f68:	blt	1a004 <__assert_fail@plt+0x7ccc>
   19f6c:	mov	r0, r7
   19f70:	bl	12320 <close@plt>
   19f74:	ldr	r0, [sp, #16]
   19f78:	bl	12320 <close@plt>
   19f7c:	movw	r5, #34972	; 0x889c
   19f80:	ldr	r7, [sp, #20]
   19f84:	movt	r5, #3
   19f88:	ldr	r0, [r5]
   19f8c:	cmp	r0, #0
   19f90:	bne	19fc4 <__assert_fail@plt+0x7c8c>
   19f94:	movw	r2, #42072	; 0xa458
   19f98:	movw	r3, #42088	; 0xa468
   19f9c:	mov	r0, #0
   19fa0:	mov	r1, #0
   19fa4:	str	r0, [sp]
   19fa8:	movt	r2, #1
   19fac:	movt	r3, #1
   19fb0:	mov	r0, #47	; 0x2f
   19fb4:	bl	1d230 <__assert_fail@plt+0xaef8>
   19fb8:	cmp	r0, #0
   19fbc:	str	r0, [r5]
   19fc0:	beq	19fdc <__assert_fail@plt+0x7ca4>
   19fc4:	mov	r1, #1
   19fc8:	strb	r1, [r4, #8]
   19fcc:	mov	r1, r4
   19fd0:	bl	1dd74 <__assert_fail@plt+0xba3c>
   19fd4:	cmp	r0, #0
   19fd8:	bne	1a00c <__assert_fail@plt+0x7cd4>
   19fdc:	bl	22768 <__assert_fail@plt+0x10430>
   19fe0:	cmp	r8, #24
   19fe4:	bne	1a038 <__assert_fail@plt+0x7d00>
   19fe8:	ldr	r0, [sp, #8]
   19fec:	cmp	r0, #0
   19ff0:	beq	1a038 <__assert_fail@plt+0x7d00>
   19ff4:	mov	r0, r4
   19ff8:	bl	1cc78 <__assert_fail@plt+0xa940>
   19ffc:	mov	r4, #0
   1a000:	b	1a02c <__assert_fail@plt+0x7cf4>
   1a004:	cmp	r0, #0
   1a008:	beq	1a08c <__assert_fail@plt+0x7d54>
   1a00c:	movw	r1, #26459	; 0x675b
   1a010:	mov	r0, r7
   1a014:	movt	r1, #2
   1a018:	bl	11df8 <fdopen@plt>
   1a01c:	ldr	r1, [sp, #12]
   1a020:	cmp	r0, #0
   1a024:	str	r0, [r1]
   1a028:	beq	1a070 <__assert_fail@plt+0x7d38>
   1a02c:	mov	r0, r4
   1a030:	sub	sp, fp, #28
   1a034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a038:	movw	r1, #26690	; 0x6842
   1a03c:	mov	r0, #0
   1a040:	mov	r2, #5
   1a044:	movt	r1, #2
   1a048:	bl	11f54 <dcgettext@plt>
   1a04c:	mov	r4, r0
   1a050:	mov	r0, #4
   1a054:	mov	r1, r6
   1a058:	bl	203b4 <__assert_fail@plt+0xe07c>
   1a05c:	mov	r3, r0
   1a060:	mov	r0, #2
   1a064:	mov	r1, r8
   1a068:	mov	r2, r4
   1a06c:	bl	12080 <error@plt>
   1a070:	movw	r1, #26659	; 0x6823
   1a074:	mov	r0, #0
   1a078:	mov	r2, #5
   1a07c:	movt	r1, #2
   1a080:	bl	11f54 <dcgettext@plt>
   1a084:	mov	r1, sl
   1a088:	bl	173b4 <__assert_fail@plt+0x507c>
   1a08c:	ldr	r0, [sp, #20]
   1a090:	bl	12320 <close@plt>
   1a094:	mov	r0, r7
   1a098:	mov	r1, #1
   1a09c:	bl	19334 <__assert_fail@plt+0x6ffc>
   1a0a0:	ldr	r0, [sp, #16]
   1a0a4:	mov	r1, #0
   1a0a8:	bl	19334 <__assert_fail@plt+0x6ffc>
   1a0ac:	ldr	r0, [r6]
   1a0b0:	mov	r2, #0
   1a0b4:	mov	r1, r0
   1a0b8:	bl	11ed0 <execlp@plt>
   1a0bc:	ldr	r0, [r5]
   1a0c0:	movw	r1, #26625	; 0x6801
   1a0c4:	movt	r1, #2
   1a0c8:	bl	1a2a8 <__assert_fail@plt+0x7f70>
   1a0cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0d0:	add	fp, sp, #28
   1a0d4:	sub	sp, sp, #4
   1a0d8:	vpush	{d8}
   1a0dc:	sub	sp, sp, #144	; 0x90
   1a0e0:	mov	sl, r1
   1a0e4:	mov	r1, #524288	; 0x80000
   1a0e8:	mov	r4, r0
   1a0ec:	bl	1ea90 <__assert_fail@plt+0xc758>
   1a0f0:	cmp	r0, #0
   1a0f4:	blt	1a250 <__assert_fail@plt+0x7f18>
   1a0f8:	movw	r1, #33264	; 0x81f0
   1a0fc:	movw	r7, #34976	; 0x88a0
   1a100:	movt	r1, #3
   1a104:	movt	r7, #3
   1a108:	ldr	r1, [r1]
   1a10c:	ldr	r0, [r7]
   1a110:	add	r1, r1, #1
   1a114:	cmp	r1, r0
   1a118:	bcs	1a14c <__assert_fail@plt+0x7e14>
   1a11c:	mvn	r0, #0
   1a120:	bl	1a334 <__assert_fail@plt+0x7ffc>
   1a124:	ldr	r0, [r7]
   1a128:	cmp	r0, #1
   1a12c:	blt	1a14c <__assert_fail@plt+0x7e14>
   1a130:	mov	r0, #0
   1a134:	bl	1a334 <__assert_fail@plt+0x7ffc>
   1a138:	cmp	r0, #0
   1a13c:	beq	1a14c <__assert_fail@plt+0x7e14>
   1a140:	ldr	r0, [r7]
   1a144:	cmp	r0, #0
   1a148:	bgt	1a130 <__assert_fail@plt+0x7df8>
   1a14c:	cmp	sl, #0
   1a150:	beq	1a258 <__assert_fail@plt+0x7f20>
   1a154:	add	r0, sp, #12
   1a158:	str	r4, [sp, #4]
   1a15c:	movw	r4, #34696	; 0x8788
   1a160:	vmov.f64	d8, #80	; 0x3e800000  0.250
   1a164:	add	r0, r0, #4
   1a168:	movt	r4, #3
   1a16c:	str	r0, [sp, #8]
   1a170:	ldr	r2, [sp, #8]
   1a174:	movw	r1, #33520	; 0x82f0
   1a178:	mov	r0, #0
   1a17c:	movt	r1, #3
   1a180:	bl	12050 <pthread_sigmask@plt>
   1a184:	ldr	r8, [r4]
   1a188:	clz	r0, r0
   1a18c:	mov	r1, #0
   1a190:	lsr	r0, r0, #5
   1a194:	str	r1, [r4]
   1a198:	strb	r0, [sp, #12]
   1a19c:	bl	12230 <fork@plt>
   1a1a0:	mov	r6, r0
   1a1a4:	bl	12164 <__errno_location@plt>
   1a1a8:	mov	r5, r4
   1a1ac:	cmp	r6, #0
   1a1b0:	ldr	r9, [r0]
   1a1b4:	mov	r4, r0
   1a1b8:	strne	r8, [r5]
   1a1bc:	ldrb	r0, [sp, #12]
   1a1c0:	cmp	r0, #0
   1a1c4:	beq	1a1d8 <__assert_fail@plt+0x7ea0>
   1a1c8:	ldr	r1, [sp, #8]
   1a1cc:	mov	r0, #2
   1a1d0:	mov	r2, #0
   1a1d4:	bl	12050 <pthread_sigmask@plt>
   1a1d8:	cmn	r6, #1
   1a1dc:	str	r9, [r4]
   1a1e0:	bgt	1a230 <__assert_fail@plt+0x7ef8>
   1a1e4:	cmp	r9, #11
   1a1e8:	bne	1a230 <__assert_fail@plt+0x7ef8>
   1a1ec:	vmov.f64	d0, d8
   1a1f0:	mov	r4, r5
   1a1f4:	sub	sl, sl, #1
   1a1f8:	bl	22990 <__assert_fail@plt+0x10658>
   1a1fc:	ldr	r0, [r7]
   1a200:	cmp	r0, #1
   1a204:	blt	1a224 <__assert_fail@plt+0x7eec>
   1a208:	mov	r0, #0
   1a20c:	bl	1a334 <__assert_fail@plt+0x7ffc>
   1a210:	cmp	r0, #0
   1a214:	beq	1a224 <__assert_fail@plt+0x7eec>
   1a218:	ldr	r0, [r7]
   1a21c:	cmp	r0, #0
   1a220:	bgt	1a208 <__assert_fail@plt+0x7ed0>
   1a224:	vadd.f64	d8, d8, d8
   1a228:	cmp	sl, #0
   1a22c:	bne	1a170 <__assert_fail@plt+0x7e38>
   1a230:	cmn	r6, #1
   1a234:	ble	1a270 <__assert_fail@plt+0x7f38>
   1a238:	cmp	r6, #0
   1a23c:	beq	1a258 <__assert_fail@plt+0x7f20>
   1a240:	ldr	r0, [r7]
   1a244:	add	r0, r0, #1
   1a248:	str	r0, [r7]
   1a24c:	b	1a294 <__assert_fail@plt+0x7f5c>
   1a250:	mvn	r6, #0
   1a254:	b	1a294 <__assert_fail@plt+0x7f5c>
   1a258:	mov	r0, #0
   1a25c:	mov	r6, #0
   1a260:	bl	12320 <close@plt>
   1a264:	mov	r0, #1
   1a268:	bl	12320 <close@plt>
   1a26c:	b	1a294 <__assert_fail@plt+0x7f5c>
   1a270:	bl	12164 <__errno_location@plt>
   1a274:	ldr	r7, [sp, #4]
   1a278:	mov	r4, r0
   1a27c:	ldr	r5, [r0]
   1a280:	ldr	r0, [r7]
   1a284:	bl	12320 <close@plt>
   1a288:	ldr	r0, [r7, #4]
   1a28c:	bl	12320 <close@plt>
   1a290:	str	r5, [r4]
   1a294:	mov	r0, r6
   1a298:	sub	sp, fp, #40	; 0x28
   1a29c:	vpop	{d8}
   1a2a0:	add	sp, sp, #4
   1a2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2a8:	push	{fp, lr}
   1a2ac:	mov	fp, sp
   1a2b0:	sub	sp, sp, #16
   1a2b4:	mov	r4, r0
   1a2b8:	mov	r0, r1
   1a2bc:	mov	r5, r1
   1a2c0:	bl	12140 <strlen@plt>
   1a2c4:	mov	r2, r0
   1a2c8:	mov	r0, #2
   1a2cc:	mov	r1, r5
   1a2d0:	bl	121ac <write@plt>
   1a2d4:	cmp	r4, #0
   1a2d8:	beq	1a318 <__assert_fail@plt+0x7fe0>
   1a2dc:	add	r1, sp, #4
   1a2e0:	mov	r0, r4
   1a2e4:	bl	1e250 <__assert_fail@plt+0xbf18>
   1a2e8:	movw	r1, #26589	; 0x67dd
   1a2ec:	mov	r4, r0
   1a2f0:	mov	r0, #2
   1a2f4:	mov	r2, #8
   1a2f8:	movt	r1, #2
   1a2fc:	bl	121ac <write@plt>
   1a300:	mov	r0, r4
   1a304:	bl	12140 <strlen@plt>
   1a308:	mov	r2, r0
   1a30c:	mov	r0, #2
   1a310:	mov	r1, r4
   1a314:	bl	121ac <write@plt>
   1a318:	movw	r1, #19819	; 0x4d6b
   1a31c:	mov	r0, #2
   1a320:	mov	r2, #1
   1a324:	movt	r1, #2
   1a328:	bl	121ac <write@plt>
   1a32c:	mov	r0, #2
   1a330:	bl	11eb8 <_exit@plt>
   1a334:	push	{r4, r5, fp, lr}
   1a338:	add	fp, sp, #8
   1a33c:	sub	sp, sp, #16
   1a340:	mov	r5, r0
   1a344:	cmp	r0, #0
   1a348:	clz	r1, r5
   1a34c:	mvneq	r0, #0
   1a350:	lsr	r2, r1, #5
   1a354:	mov	r1, sp
   1a358:	bl	12038 <waitpid@plt>
   1a35c:	cmn	r0, #1
   1a360:	ble	1a3d0 <__assert_fail@plt+0x8098>
   1a364:	mov	r4, r0
   1a368:	cmp	r0, #0
   1a36c:	beq	1a3c4 <__assert_fail@plt+0x808c>
   1a370:	cmp	r5, #0
   1a374:	bgt	1a3a0 <__assert_fail@plt+0x8068>
   1a378:	movw	r0, #34972	; 0x889c
   1a37c:	add	r1, sp, #4
   1a380:	str	r4, [sp, #8]
   1a384:	movt	r0, #3
   1a388:	ldr	r0, [r0]
   1a38c:	bl	1ddb4 <__assert_fail@plt+0xba7c>
   1a390:	cmp	r0, #0
   1a394:	beq	1a3c4 <__assert_fail@plt+0x808c>
   1a398:	mov	r1, #2
   1a39c:	strb	r1, [r0, #8]
   1a3a0:	ldrh	r0, [sp]
   1a3a4:	movw	r1, #65407	; 0xff7f
   1a3a8:	tst	r0, r1
   1a3ac:	bne	1a418 <__assert_fail@plt+0x80e0>
   1a3b0:	movw	r0, #34976	; 0x88a0
   1a3b4:	movt	r0, #3
   1a3b8:	ldr	r1, [r0]
   1a3bc:	sub	r1, r1, #1
   1a3c0:	str	r1, [r0]
   1a3c4:	mov	r0, r4
   1a3c8:	sub	sp, fp, #8
   1a3cc:	pop	{r4, r5, fp, pc}
   1a3d0:	bl	12164 <__errno_location@plt>
   1a3d4:	ldr	r4, [r0]
   1a3d8:	movw	r1, #26539	; 0x67ab
   1a3dc:	mov	r0, #0
   1a3e0:	mov	r2, #5
   1a3e4:	movt	r1, #2
   1a3e8:	bl	11f54 <dcgettext@plt>
   1a3ec:	mov	r5, r0
   1a3f0:	movw	r0, #33648	; 0x8370
   1a3f4:	movt	r0, #3
   1a3f8:	ldr	r1, [r0]
   1a3fc:	mov	r0, #4
   1a400:	bl	203b4 <__assert_fail@plt+0xe07c>
   1a404:	mov	r3, r0
   1a408:	mov	r0, #2
   1a40c:	mov	r1, r4
   1a410:	mov	r2, r5
   1a414:	bl	12080 <error@plt>
   1a418:	movw	r1, #26559	; 0x67bf
   1a41c:	mov	r0, #0
   1a420:	mov	r2, #5
   1a424:	movt	r1, #2
   1a428:	bl	11f54 <dcgettext@plt>
   1a42c:	mov	r4, r0
   1a430:	movw	r0, #33648	; 0x8370
   1a434:	movt	r0, #3
   1a438:	ldr	r1, [r0]
   1a43c:	mov	r0, #4
   1a440:	bl	203b4 <__assert_fail@plt+0xe07c>
   1a444:	mov	r3, r0
   1a448:	mov	r0, #2
   1a44c:	mov	r1, #0
   1a450:	mov	r2, r4
   1a454:	bl	12080 <error@plt>
   1a458:	ldr	r0, [r0, #4]
   1a45c:	udiv	r2, r0, r1
   1a460:	mls	r0, r2, r1, r0
   1a464:	bx	lr
   1a468:	ldr	r1, [r1, #4]
   1a46c:	ldr	r0, [r0, #4]
   1a470:	sub	r0, r0, r1
   1a474:	clz	r0, r0
   1a478:	lsr	r0, r0, #5
   1a47c:	bx	lr
   1a480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a484:	add	fp, sp, #28
   1a488:	sub	sp, sp, #132	; 0x84
   1a48c:	movw	r4, #34696	; 0x8788
   1a490:	mov	r5, r0
   1a494:	movt	r4, #3
   1a498:	mov	r6, r4
   1a49c:	ldr	r4, [r4]
   1a4a0:	add	r0, r4, #9
   1a4a4:	cmp	r0, r5
   1a4a8:	bne	1a498 <__assert_fail@plt+0x8160>
   1a4ac:	ldrb	r0, [r4, #8]
   1a4b0:	cmp	r0, #1
   1a4b4:	bne	1a4ec <__assert_fail@plt+0x81b4>
   1a4b8:	movw	r0, #34972	; 0x889c
   1a4bc:	ldr	r7, [r4, #4]
   1a4c0:	mov	r1, sp
   1a4c4:	movt	r0, #3
   1a4c8:	ldr	r0, [r0]
   1a4cc:	str	r7, [sp, #4]
   1a4d0:	bl	1ddb4 <__assert_fail@plt+0xba7c>
   1a4d4:	cmp	r0, #0
   1a4d8:	beq	1a4ec <__assert_fail@plt+0x81b4>
   1a4dc:	mov	r1, #2
   1a4e0:	strb	r1, [r0, #8]
   1a4e4:	mov	r0, r7
   1a4e8:	bl	1a334 <__assert_fail@plt+0x7ffc>
   1a4ec:	mov	r0, sp
   1a4f0:	ldr	sl, [r4]
   1a4f4:	movw	r1, #33520	; 0x82f0
   1a4f8:	add	r7, r0, #4
   1a4fc:	movt	r1, #3
   1a500:	mov	r0, #0
   1a504:	mov	r2, r7
   1a508:	bl	12050 <pthread_sigmask@plt>
   1a50c:	clz	r0, r0
   1a510:	lsr	r0, r0, #5
   1a514:	strb	r0, [sp]
   1a518:	mov	r0, r5
   1a51c:	bl	11f78 <unlink@plt>
   1a520:	mov	r9, r0
   1a524:	bl	12164 <__errno_location@plt>
   1a528:	ldr	r8, [r0]
   1a52c:	str	sl, [r6]
   1a530:	ldrb	r0, [sp]
   1a534:	cmp	r0, #0
   1a538:	beq	1a54c <__assert_fail@plt+0x8214>
   1a53c:	mov	r0, #2
   1a540:	mov	r1, r7
   1a544:	mov	r2, #0
   1a548:	bl	12050 <pthread_sigmask@plt>
   1a54c:	cmp	r9, #0
   1a550:	beq	1a590 <__assert_fail@plt+0x8258>
   1a554:	movw	r1, #26598	; 0x67e6
   1a558:	mov	r0, #0
   1a55c:	mov	r2, #5
   1a560:	movt	r1, #2
   1a564:	bl	11f54 <dcgettext@plt>
   1a568:	mov	r7, r0
   1a56c:	mov	r0, #0
   1a570:	mov	r1, #3
   1a574:	mov	r2, r5
   1a578:	bl	20630 <__assert_fail@plt+0xe2f8>
   1a57c:	mov	r3, r0
   1a580:	mov	r0, #0
   1a584:	mov	r1, r8
   1a588:	mov	r2, r7
   1a58c:	bl	12080 <error@plt>
   1a590:	cmp	sl, #0
   1a594:	movweq	r0, #33372	; 0x825c
   1a598:	movteq	r0, #3
   1a59c:	streq	r6, [r0]
   1a5a0:	mov	r0, r4
   1a5a4:	bl	1cc78 <__assert_fail@plt+0xa940>
   1a5a8:	sub	sp, fp, #28
   1a5ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5b4:	add	fp, sp, #28
   1a5b8:	sub	sp, sp, #92	; 0x5c
   1a5bc:	mov	r4, r1
   1a5c0:	mov	r8, r0
   1a5c4:	lsr	r0, r1, #1
   1a5c8:	ldr	r1, [fp, #8]
   1a5cc:	ldr	r6, [r3, #20]
   1a5d0:	ldr	r7, [r3, #24]
   1a5d4:	mov	r5, r3
   1a5d8:	str	r2, [sp, #20]
   1a5dc:	str	r0, [sp, #64]	; 0x40
   1a5e0:	str	r8, [sp, #60]	; 0x3c
   1a5e4:	mov	r0, r2
   1a5e8:	str	r2, [sp, #68]	; 0x44
   1a5ec:	cmp	r4, #2
   1a5f0:	ldr	r0, [r3, #32]
   1a5f4:	str	r1, [sp, #76]	; 0x4c
   1a5f8:	ldr	r1, [fp, #12]
   1a5fc:	str	r1, [sp, #80]	; 0x50
   1a600:	ldr	r1, [fp, #16]
   1a604:	str	r1, [sp, #84]	; 0x54
   1a608:	str	r0, [sp, #72]	; 0x48
   1a60c:	addcs	r0, r7, r6
   1a610:	cmpcs	r0, #131072	; 0x20000
   1a614:	bcs	1aea8 <__assert_fail@plt+0x8b70>
   1a618:	ldr	r0, [sp, #20]
   1a61c:	cmp	r7, #2
   1a620:	sub	r4, r8, r0, lsl #4
   1a624:	bcc	1a644 <__assert_fail@plt+0x830c>
   1a628:	mvn	r1, #15
   1a62c:	sub	r0, r8, r6, lsl #4
   1a630:	mov	r3, #0
   1a634:	and	r1, r1, r6, lsl #3
   1a638:	sub	r2, r4, r1
   1a63c:	mov	r1, r7
   1a640:	bl	1b074 <__assert_fail@plt+0x8d3c>
   1a644:	cmp	r6, #2
   1a648:	bcc	1a660 <__assert_fail@plt+0x8328>
   1a64c:	mov	r0, r8
   1a650:	mov	r1, r6
   1a654:	mov	r2, r4
   1a658:	mov	r3, #0
   1a65c:	bl	1b074 <__assert_fail@plt+0x8d3c>
   1a660:	ldr	r4, [fp, #8]
   1a664:	sub	r0, r8, r6, lsl #4
   1a668:	str	r8, [r5]
   1a66c:	str	r0, [r5, #4]
   1a670:	sub	r1, r0, r7, lsl #4
   1a674:	str	r0, [r5, #8]
   1a678:	str	r1, [r5, #12]
   1a67c:	add	sl, r4, #4
   1a680:	mov	r0, sl
   1a684:	bl	11e94 <pthread_mutex_lock@plt>
   1a688:	mov	r7, r4
   1a68c:	mov	r1, r5
   1a690:	ldr	r0, [r7], #32
   1a694:	bl	1e0dc <__assert_fail@plt+0xbda4>
   1a698:	mov	r0, #1
   1a69c:	strb	r0, [r5, #44]	; 0x2c
   1a6a0:	mov	r0, r7
   1a6a4:	bl	12308 <pthread_cond_signal@plt>
   1a6a8:	mov	r0, sl
   1a6ac:	bl	11dec <pthread_mutex_unlock@plt>
   1a6b0:	str	r7, [sp, #24]
   1a6b4:	str	sl, [sp, #16]
   1a6b8:	b	1a6c4 <__assert_fail@plt+0x838c>
   1a6bc:	ldr	r0, [sp, #32]
   1a6c0:	bl	11dec <pthread_mutex_unlock@plt>
   1a6c4:	mov	r0, sl
   1a6c8:	bl	11e94 <pthread_mutex_lock@plt>
   1a6cc:	ldr	r0, [r4]
   1a6d0:	bl	1e184 <__assert_fail@plt+0xbe4c>
   1a6d4:	mov	r8, r0
   1a6d8:	cmp	r0, #0
   1a6dc:	bne	1a700 <__assert_fail@plt+0x83c8>
   1a6e0:	mov	r0, r7
   1a6e4:	mov	r1, sl
   1a6e8:	bl	122a8 <pthread_cond_wait@plt>
   1a6ec:	ldr	r0, [r4]
   1a6f0:	bl	1e184 <__assert_fail@plt+0xbe4c>
   1a6f4:	cmp	r0, #0
   1a6f8:	beq	1a6e0 <__assert_fail@plt+0x83a8>
   1a6fc:	mov	r8, r0
   1a700:	mov	r0, sl
   1a704:	bl	11dec <pthread_mutex_unlock@plt>
   1a708:	add	r0, r8, #48	; 0x30
   1a70c:	str	r0, [sp, #32]
   1a710:	bl	11e94 <pthread_mutex_lock@plt>
   1a714:	mov	r0, #0
   1a718:	strb	r0, [r8, #44]	; 0x2c
   1a71c:	ldr	r1, [r8, #40]	; 0x28
   1a720:	cmp	r1, #0
   1a724:	beq	1ae6c <__assert_fail@plt+0x8b34>
   1a728:	ldr	r2, [sp, #20]
   1a72c:	mov	r0, #2
   1a730:	mov	r3, #1
   1a734:	ldr	r7, [r8]
   1a738:	cmp	r1, #1
   1a73c:	add	r0, r0, r1, lsl #1
   1a740:	add	r9, r3, r2, lsr r0
   1a744:	ldr	r2, [r8, #4]
   1a748:	str	r7, [sp, #36]	; 0x24
   1a74c:	str	r2, [sp, #40]	; 0x28
   1a750:	bne	1a8ac <__assert_fail@plt+0x8574>
   1a754:	ldr	sl, [r8, #8]
   1a758:	cmp	r7, sl
   1a75c:	beq	1a988 <__assert_fail@plt+0x8650>
   1a760:	ldr	r0, [r8, #12]
   1a764:	mov	r5, r7
   1a768:	str	r7, [sp, #48]	; 0x30
   1a76c:	str	r7, [sp, #28]
   1a770:	str	r0, [sp, #44]	; 0x2c
   1a774:	ldr	r0, [sp, #40]	; 0x28
   1a778:	mov	r1, r0
   1a77c:	mov	r2, r0
   1a780:	str	r0, [sp, #56]	; 0x38
   1a784:	ldr	r0, [sp, #44]	; 0x2c
   1a788:	cmp	r2, r0
   1a78c:	beq	1a9d4 <__assert_fail@plt+0x869c>
   1a790:	cmp	r9, #0
   1a794:	beq	1a9dc <__assert_fail@plt+0x86a4>
   1a798:	mov	r7, r5
   1a79c:	sub	r5, r5, #16
   1a7a0:	sub	r6, r2, #16
   1a7a4:	str	r1, [sp, #52]	; 0x34
   1a7a8:	mov	r4, r2
   1a7ac:	mov	r0, r5
   1a7b0:	mov	r1, r6
   1a7b4:	bl	179a4 <__assert_fail@plt+0x566c>
   1a7b8:	cmp	r0, #0
   1a7bc:	ble	1a82c <__assert_fail@plt+0x84f4>
   1a7c0:	movw	r0, #33654	; 0x8376
   1a7c4:	str	r6, [r8, #4]
   1a7c8:	movt	r0, #3
   1a7cc:	ldrb	r0, [r0]
   1a7d0:	cmp	r0, #1
   1a7d4:	bne	1a808 <__assert_fail@plt+0x84d0>
   1a7d8:	movw	r5, #34984	; 0x88a8
   1a7dc:	movt	r5, #3
   1a7e0:	ldr	r0, [r5]
   1a7e4:	cmp	r0, #0
   1a7e8:	beq	1a800 <__assert_fail@plt+0x84c8>
   1a7ec:	mov	r0, r6
   1a7f0:	mov	r1, r5
   1a7f4:	bl	179a4 <__assert_fail@plt+0x566c>
   1a7f8:	cmp	r0, #0
   1a7fc:	beq	1a818 <__assert_fail@plt+0x84e0>
   1a800:	vld1.32	{d16-d17}, [r6]
   1a804:	vst1.64	{d16-d17}, [r5]
   1a808:	ldr	r1, [fp, #12]
   1a80c:	ldr	r2, [fp, #16]
   1a810:	mov	r0, r6
   1a814:	bl	18914 <__assert_fail@plt+0x65dc>
   1a818:	mov	r1, r6
   1a81c:	mov	r2, r6
   1a820:	mov	r5, r7
   1a824:	str	r6, [sp, #56]	; 0x38
   1a828:	b	1a898 <__assert_fail@plt+0x8560>
   1a82c:	movw	r0, #33654	; 0x8376
   1a830:	str	r5, [r8]
   1a834:	mov	r6, r4
   1a838:	movt	r0, #3
   1a83c:	ldrb	r0, [r0]
   1a840:	cmp	r0, #1
   1a844:	bne	1a878 <__assert_fail@plt+0x8540>
   1a848:	movw	r4, #34984	; 0x88a8
   1a84c:	movt	r4, #3
   1a850:	ldr	r0, [r4]
   1a854:	cmp	r0, #0
   1a858:	beq	1a870 <__assert_fail@plt+0x8538>
   1a85c:	mov	r0, r5
   1a860:	mov	r1, r4
   1a864:	bl	179a4 <__assert_fail@plt+0x566c>
   1a868:	cmp	r0, #0
   1a86c:	beq	1a888 <__assert_fail@plt+0x8550>
   1a870:	vld1.32	{d16-d17}, [r5]
   1a874:	vst1.64	{d16-d17}, [r4]
   1a878:	ldr	r1, [fp, #12]
   1a87c:	ldr	r2, [fp, #16]
   1a880:	mov	r0, r5
   1a884:	bl	18914 <__assert_fail@plt+0x65dc>
   1a888:	ldr	r1, [sp, #52]	; 0x34
   1a88c:	str	r5, [sp, #48]	; 0x30
   1a890:	str	r5, [sp, #28]
   1a894:	mov	r2, r6
   1a898:	sub	r9, r9, #1
   1a89c:	cmp	r5, sl
   1a8a0:	bne	1a784 <__assert_fail@plt+0x844c>
   1a8a4:	mov	r5, sl
   1a8a8:	b	1a9e0 <__assert_fail@plt+0x86a8>
   1a8ac:	ldr	r1, [r8, #16]
   1a8b0:	ldr	r2, [r8, #8]
   1a8b4:	ldr	sl, [r1]
   1a8b8:	cmp	r7, r2
   1a8bc:	str	r1, [sp, #28]
   1a8c0:	str	r2, [sp, #52]	; 0x34
   1a8c4:	beq	1a9ac <__assert_fail@plt+0x8674>
   1a8c8:	ldr	r2, [r8, #12]
   1a8cc:	ldr	r1, [sp, #40]	; 0x28
   1a8d0:	cmp	r1, r2
   1a8d4:	str	r2, [sp, #44]	; 0x2c
   1a8d8:	beq	1a9c4 <__assert_fail@plt+0x868c>
   1a8dc:	cmp	r9, #0
   1a8e0:	beq	1ab88 <__assert_fail@plt+0x8850>
   1a8e4:	ldr	r1, [sp, #20]
   1a8e8:	ldr	r2, [sp, #40]	; 0x28
   1a8ec:	str	r7, [sp, #48]	; 0x30
   1a8f0:	lsr	r1, r1, r0
   1a8f4:	sub	r0, sl, #16
   1a8f8:	mov	ip, r2
   1a8fc:	str	r2, [sp, #56]	; 0x38
   1a900:	rsb	r4, r1, #0
   1a904:	mov	r1, r7
   1a908:	sub	r6, ip, #16
   1a90c:	sub	r5, r7, #16
   1a910:	mov	sl, r0
   1a914:	mov	r9, ip
   1a918:	mov	r0, r5
   1a91c:	mov	r1, r6
   1a920:	bl	179a4 <__assert_fail@plt+0x566c>
   1a924:	cmp	r0, #0
   1a928:	ble	1a940 <__assert_fail@plt+0x8608>
   1a92c:	str	r6, [r8, #4]
   1a930:	mov	ip, r6
   1a934:	str	r6, [sp, #56]	; 0x38
   1a938:	vld1.32	{d16-d17}, [r6]
   1a93c:	b	1a954 <__assert_fail@plt+0x861c>
   1a940:	str	r5, [r8]
   1a944:	str	r5, [sp, #48]	; 0x30
   1a948:	mov	r7, r5
   1a94c:	mov	ip, r9
   1a950:	vld1.32	{d16-d17}, [r5]
   1a954:	vst1.32	{d16-d17}, [sl]
   1a958:	ldr	r0, [sp, #52]	; 0x34
   1a95c:	cmp	r7, r0
   1a960:	beq	1aba0 <__assert_fail@plt+0x8868>
   1a964:	ldr	r0, [sp, #44]	; 0x2c
   1a968:	cmp	ip, r0
   1a96c:	beq	1aba8 <__assert_fail@plt+0x8870>
   1a970:	add	r4, r4, #1
   1a974:	sub	r0, sl, #16
   1a978:	cmp	r4, #1
   1a97c:	bne	1a908 <__assert_fail@plt+0x85d0>
   1a980:	mvn	r9, #0
   1a984:	b	1abb0 <__assert_fail@plt+0x8878>
   1a988:	ldr	r0, [sp, #40]	; 0x28
   1a98c:	str	r7, [sp, #48]	; 0x30
   1a990:	mov	r5, r7
   1a994:	mov	sl, r7
   1a998:	str	r7, [sp, #28]
   1a99c:	str	r0, [sp, #56]	; 0x38
   1a9a0:	mov	r2, r0
   1a9a4:	mov	r1, r0
   1a9a8:	b	1a9e4 <__assert_fail@plt+0x86ac>
   1a9ac:	ldr	r1, [sp, #40]	; 0x28
   1a9b0:	str	r7, [sp, #48]	; 0x30
   1a9b4:	mov	r0, r7
   1a9b8:	str	r1, [sp, #56]	; 0x38
   1a9bc:	mov	ip, r1
   1a9c0:	b	1abbc <__assert_fail@plt+0x8884>
   1a9c4:	str	r1, [sp, #56]	; 0x38
   1a9c8:	str	r7, [sp, #48]	; 0x30
   1a9cc:	mov	ip, r1
   1a9d0:	b	1abb4 <__assert_fail@plt+0x887c>
   1a9d4:	ldr	r2, [sp, #44]	; 0x2c
   1a9d8:	b	1a9e0 <__assert_fail@plt+0x86a8>
   1a9dc:	mvn	r9, #0
   1a9e0:	ldr	r0, [sp, #40]	; 0x28
   1a9e4:	ldr	r6, [r8, #24]
   1a9e8:	sub	r0, r0, r1
   1a9ec:	cmp	r6, r0, asr #4
   1a9f0:	bne	1aa14 <__assert_fail@plt+0x86dc>
   1a9f4:	ldr	r7, [sp, #24]
   1a9f8:	cmp	r5, sl
   1a9fc:	asr	r6, r0, #4
   1aa00:	cmpne	r9, #0
   1aa04:	bne	1aae4 <__assert_fail@plt+0x87ac>
   1aa08:	ldr	r4, [fp, #8]
   1aa0c:	ldr	sl, [sp, #16]
   1aa10:	b	1ace0 <__assert_fail@plt+0x89a8>
   1aa14:	ldr	r0, [sp, #36]	; 0x24
   1aa18:	ldr	r1, [sp, #28]
   1aa1c:	ldr	r4, [fp, #8]
   1aa20:	ldr	sl, [sp, #16]
   1aa24:	sub	r0, r0, r1
   1aa28:	ldr	r1, [r8, #20]
   1aa2c:	cmp	r1, r0, asr #4
   1aa30:	bne	1acdc <__assert_fail@plt+0x89a4>
   1aa34:	cmp	r9, #0
   1aa38:	beq	1acdc <__assert_fail@plt+0x89a4>
   1aa3c:	ldr	r4, [r8, #12]
   1aa40:	cmp	r2, r4
   1aa44:	beq	1acd8 <__assert_fail@plt+0x89a0>
   1aa48:	ldr	r7, [sp, #24]
   1aa4c:	str	r6, [sp, #52]	; 0x34
   1aa50:	rsb	r6, r9, #1
   1aa54:	movw	r9, #34984	; 0x88a8
   1aa58:	sub	r5, r2, #16
   1aa5c:	movt	r9, #3
   1aa60:	movw	r0, #33654	; 0x8376
   1aa64:	str	r5, [r8, #4]
   1aa68:	movt	r0, #3
   1aa6c:	ldrb	r0, [r0]
   1aa70:	cmp	r0, #1
   1aa74:	bne	1aaa0 <__assert_fail@plt+0x8768>
   1aa78:	ldr	r0, [r9]
   1aa7c:	cmp	r0, #0
   1aa80:	beq	1aa98 <__assert_fail@plt+0x8760>
   1aa84:	mov	r0, r5
   1aa88:	mov	r1, r9
   1aa8c:	bl	179a4 <__assert_fail@plt+0x566c>
   1aa90:	cmp	r0, #0
   1aa94:	beq	1aab0 <__assert_fail@plt+0x8778>
   1aa98:	vld1.32	{d16-d17}, [r5]
   1aa9c:	vst1.64	{d16-d17}, [r9]
   1aaa0:	ldr	r1, [fp, #12]
   1aaa4:	ldr	r2, [fp, #16]
   1aaa8:	mov	r0, r5
   1aaac:	bl	18914 <__assert_fail@plt+0x65dc>
   1aab0:	sub	r0, r5, #16
   1aab4:	cmp	r4, r5
   1aab8:	beq	1aad0 <__assert_fail@plt+0x8798>
   1aabc:	add	r1, r6, #1
   1aac0:	cmp	r6, #0
   1aac4:	mov	r5, r0
   1aac8:	mov	r6, r1
   1aacc:	bne	1aa60 <__assert_fail@plt+0x8728>
   1aad0:	ldr	r4, [fp, #8]
   1aad4:	ldr	r9, [sp, #40]	; 0x28
   1aad8:	add	r0, r0, #16
   1aadc:	str	r0, [sp, #56]	; 0x38
   1aae0:	b	1ab80 <__assert_fail@plt+0x8848>
   1aae4:	rsb	r7, r9, #1
   1aae8:	ldr	r4, [fp, #8]
   1aaec:	ldr	r9, [sp, #40]	; 0x28
   1aaf0:	str	r6, [sp, #52]	; 0x34
   1aaf4:	movw	r6, #34984	; 0x88a8
   1aaf8:	sub	r5, r5, #16
   1aafc:	movt	r6, #3
   1ab00:	movw	r0, #33654	; 0x8376
   1ab04:	str	r5, [r8]
   1ab08:	movt	r0, #3
   1ab0c:	ldrb	r0, [r0]
   1ab10:	cmp	r0, #1
   1ab14:	bne	1ab40 <__assert_fail@plt+0x8808>
   1ab18:	ldr	r0, [r6]
   1ab1c:	cmp	r0, #0
   1ab20:	beq	1ab38 <__assert_fail@plt+0x8800>
   1ab24:	mov	r0, r5
   1ab28:	mov	r1, r6
   1ab2c:	bl	179a4 <__assert_fail@plt+0x566c>
   1ab30:	cmp	r0, #0
   1ab34:	beq	1ab50 <__assert_fail@plt+0x8818>
   1ab38:	vld1.32	{d16-d17}, [r5]
   1ab3c:	vst1.64	{d16-d17}, [r6]
   1ab40:	ldr	r1, [fp, #12]
   1ab44:	ldr	r2, [fp, #16]
   1ab48:	mov	r0, r5
   1ab4c:	bl	18914 <__assert_fail@plt+0x65dc>
   1ab50:	sub	r0, r5, #16
   1ab54:	cmp	sl, r5
   1ab58:	beq	1ab70 <__assert_fail@plt+0x8838>
   1ab5c:	add	r1, r7, #1
   1ab60:	cmp	r7, #0
   1ab64:	mov	r5, r0
   1ab68:	mov	r7, r1
   1ab6c:	bne	1ab00 <__assert_fail@plt+0x87c8>
   1ab70:	ldr	sl, [sp, #16]
   1ab74:	ldr	r7, [sp, #24]
   1ab78:	add	r0, r0, #16
   1ab7c:	str	r0, [sp, #48]	; 0x30
   1ab80:	ldr	r6, [sp, #52]	; 0x34
   1ab84:	b	1ace4 <__assert_fail@plt+0x89ac>
   1ab88:	ldr	r0, [sp, #40]	; 0x28
   1ab8c:	str	r7, [sp, #48]	; 0x30
   1ab90:	mvn	r9, #0
   1ab94:	str	r0, [sp, #56]	; 0x38
   1ab98:	mov	ip, r0
   1ab9c:	b	1abb4 <__assert_fail@plt+0x887c>
   1aba0:	ldr	r7, [sp, #52]	; 0x34
   1aba4:	b	1abac <__assert_fail@plt+0x8874>
   1aba8:	ldr	ip, [sp, #44]	; 0x2c
   1abac:	rsb	r9, r4, #0
   1abb0:	ldr	r4, [fp, #8]
   1abb4:	ldr	r0, [sp, #52]	; 0x34
   1abb8:	ldr	r1, [sp, #40]	; 0x28
   1abbc:	ldr	r6, [r8, #24]
   1abc0:	sub	r1, r1, ip
   1abc4:	cmp	r6, r1, asr #4
   1abc8:	bne	1ac3c <__assert_fail@plt+0x8904>
   1abcc:	cmp	r7, r0
   1abd0:	cmpne	r9, #0
   1abd4:	beq	1acc0 <__assert_fail@plt+0x8988>
   1abd8:	ldr	r0, [sp, #52]	; 0x34
   1abdc:	rsb	r1, r9, #1
   1abe0:	mov	r2, #0
   1abe4:	sub	r0, r0, r7
   1abe8:	add	r0, r0, #16
   1abec:	add	r3, r7, r2
   1abf0:	cmp	r0, r2
   1abf4:	sub	r3, r3, #16
   1abf8:	vld1.32	{d16-d17}, [r3]
   1abfc:	add	r3, sl, r2
   1ac00:	sub	r3, r3, #16
   1ac04:	vst1.32	{d16-d17}, [r3]
   1ac08:	sub	r3, r2, #16
   1ac0c:	beq	1ac24 <__assert_fail@plt+0x88ec>
   1ac10:	add	r2, r1, #1
   1ac14:	cmp	r1, #0
   1ac18:	mov	r1, r2
   1ac1c:	mov	r2, r3
   1ac20:	bne	1abec <__assert_fail@plt+0x88b4>
   1ac24:	add	r0, r7, r3
   1ac28:	ldr	r7, [sp, #24]
   1ac2c:	add	sl, sl, r3
   1ac30:	str	r0, [sp, #48]	; 0x30
   1ac34:	str	r0, [r8]
   1ac38:	b	1acc4 <__assert_fail@plt+0x898c>
   1ac3c:	ldr	r0, [sp, #36]	; 0x24
   1ac40:	ldr	r1, [r8, #20]
   1ac44:	sub	r0, r0, r7
   1ac48:	cmp	r1, r0, asr #4
   1ac4c:	bne	1acc0 <__assert_fail@plt+0x8988>
   1ac50:	cmp	r9, #0
   1ac54:	ldr	r7, [sp, #24]
   1ac58:	ldrne	r0, [r8, #12]
   1ac5c:	cmpne	ip, r0
   1ac60:	beq	1acc4 <__assert_fail@plt+0x898c>
   1ac64:	sub	r0, r0, ip
   1ac68:	rsb	r1, r9, #1
   1ac6c:	mov	r2, #0
   1ac70:	add	r0, r0, #16
   1ac74:	add	r3, ip, r2
   1ac78:	cmp	r0, r2
   1ac7c:	sub	r3, r3, #16
   1ac80:	vld1.32	{d16-d17}, [r3]
   1ac84:	add	r3, sl, r2
   1ac88:	sub	r3, r3, #16
   1ac8c:	vst1.32	{d16-d17}, [r3]
   1ac90:	sub	r3, r2, #16
   1ac94:	beq	1acac <__assert_fail@plt+0x8974>
   1ac98:	add	r2, r1, #1
   1ac9c:	cmp	r1, #0
   1aca0:	mov	r1, r2
   1aca4:	mov	r2, r3
   1aca8:	bne	1ac74 <__assert_fail@plt+0x893c>
   1acac:	add	r0, ip, r3
   1acb0:	add	sl, sl, r3
   1acb4:	str	r0, [sp, #56]	; 0x38
   1acb8:	str	r0, [r8, #4]
   1acbc:	b	1acc4 <__assert_fail@plt+0x898c>
   1acc0:	ldr	r7, [sp, #24]
   1acc4:	ldr	r0, [sp, #28]
   1acc8:	ldr	r9, [sp, #40]	; 0x28
   1accc:	str	sl, [r0]
   1acd0:	ldr	sl, [sp, #16]
   1acd4:	b	1ace4 <__assert_fail@plt+0x89ac>
   1acd8:	ldr	r4, [fp, #8]
   1acdc:	ldr	r7, [sp, #24]
   1ace0:	ldr	r9, [sp, #40]	; 0x28
   1ace4:	ldr	r0, [sp, #56]	; 0x38
   1ace8:	ldr	r1, [sp, #48]	; 0x30
   1acec:	sub	r0, r9, r0
   1acf0:	sub	r0, r6, r0, asr #4
   1acf4:	str	r0, [r8, #24]
   1acf8:	ldr	r0, [sp, #36]	; 0x24
   1acfc:	sub	r0, r0, r1
   1ad00:	ldr	r1, [r8, #20]
   1ad04:	sub	r0, r1, r0, asr #4
   1ad08:	str	r0, [r8, #20]
   1ad0c:	ldrb	r1, [r8, #44]	; 0x2c
   1ad10:	cmp	r1, #0
   1ad14:	bne	1ad88 <__assert_fail@plt+0x8a50>
   1ad18:	ldr	r3, [r8]
   1ad1c:	ldmib	r8, {r1, r7}
   1ad20:	ldr	r2, [r8, #12]
   1ad24:	cmp	r3, r7
   1ad28:	bne	1ad44 <__assert_fail@plt+0x8a0c>
   1ad2c:	ldr	r7, [sp, #24]
   1ad30:	cmp	r0, #0
   1ad34:	bne	1ad88 <__assert_fail@plt+0x8a50>
   1ad38:	cmp	r1, r2
   1ad3c:	bne	1ad5c <__assert_fail@plt+0x8a24>
   1ad40:	b	1ad88 <__assert_fail@plt+0x8a50>
   1ad44:	ldr	r7, [sp, #24]
   1ad48:	cmp	r1, r2
   1ad4c:	bne	1ad5c <__assert_fail@plt+0x8a24>
   1ad50:	ldr	r0, [r8, #24]
   1ad54:	cmp	r0, #0
   1ad58:	bne	1ad88 <__assert_fail@plt+0x8a50>
   1ad5c:	mov	r0, sl
   1ad60:	bl	11e94 <pthread_mutex_lock@plt>
   1ad64:	ldr	r0, [r4]
   1ad68:	mov	r1, r8
   1ad6c:	bl	1e0dc <__assert_fail@plt+0xbda4>
   1ad70:	mov	r0, #1
   1ad74:	strb	r0, [r8, #44]	; 0x2c
   1ad78:	mov	r0, r7
   1ad7c:	bl	12308 <pthread_cond_signal@plt>
   1ad80:	mov	r0, sl
   1ad84:	bl	11dec <pthread_mutex_unlock@plt>
   1ad88:	ldr	r0, [r8, #40]	; 0x28
   1ad8c:	cmp	r0, #2
   1ad90:	bcc	1addc <__assert_fail@plt+0x8aa4>
   1ad94:	ldr	r0, [r8, #28]
   1ad98:	add	r0, r0, #48	; 0x30
   1ad9c:	bl	11e94 <pthread_mutex_lock@plt>
   1ada0:	ldr	r9, [r8, #28]
   1ada4:	ldrb	r0, [r9, #44]	; 0x2c
   1ada8:	cmp	r0, #0
   1adac:	bne	1ae60 <__assert_fail@plt+0x8b28>
   1adb0:	ldr	r2, [r9]
   1adb4:	ldmib	r9, {r0, r3}
   1adb8:	ldr	r1, [r9, #12]
   1adbc:	cmp	r2, r3
   1adc0:	bne	1ae1c <__assert_fail@plt+0x8ae4>
   1adc4:	cmp	r0, r1
   1adc8:	beq	1ae60 <__assert_fail@plt+0x8b28>
   1adcc:	ldr	r0, [r9, #20]
   1add0:	cmp	r0, #0
   1add4:	bne	1ae60 <__assert_fail@plt+0x8b28>
   1add8:	b	1ae30 <__assert_fail@plt+0x8af8>
   1addc:	ldr	r0, [r8, #20]
   1ade0:	ldr	r1, [r8, #24]
   1ade4:	cmn	r0, r1
   1ade8:	bne	1a6bc <__assert_fail@plt+0x8384>
   1adec:	ldr	r5, [r8, #28]
   1adf0:	mov	r0, sl
   1adf4:	bl	11e94 <pthread_mutex_lock@plt>
   1adf8:	ldr	r0, [r4]
   1adfc:	mov	r1, r5
   1ae00:	bl	1e0dc <__assert_fail@plt+0xbda4>
   1ae04:	mov	r0, #1
   1ae08:	strb	r0, [r5, #44]	; 0x2c
   1ae0c:	mov	r0, r7
   1ae10:	bl	12308 <pthread_cond_signal@plt>
   1ae14:	mov	r0, sl
   1ae18:	b	1ae64 <__assert_fail@plt+0x8b2c>
   1ae1c:	cmp	r0, r1
   1ae20:	bne	1ae30 <__assert_fail@plt+0x8af8>
   1ae24:	ldr	r0, [r9, #24]
   1ae28:	cmp	r0, #0
   1ae2c:	bne	1ae60 <__assert_fail@plt+0x8b28>
   1ae30:	mov	r0, sl
   1ae34:	bl	11e94 <pthread_mutex_lock@plt>
   1ae38:	ldr	r0, [r4]
   1ae3c:	mov	r1, r9
   1ae40:	bl	1e0dc <__assert_fail@plt+0xbda4>
   1ae44:	mov	r0, #1
   1ae48:	strb	r0, [r9, #44]	; 0x2c
   1ae4c:	mov	r0, r7
   1ae50:	bl	12308 <pthread_cond_signal@plt>
   1ae54:	mov	r0, sl
   1ae58:	bl	11dec <pthread_mutex_unlock@plt>
   1ae5c:	ldr	r9, [r8, #28]
   1ae60:	add	r0, r9, #48	; 0x30
   1ae64:	bl	11dec <pthread_mutex_unlock@plt>
   1ae68:	b	1a6bc <__assert_fail@plt+0x8384>
   1ae6c:	ldr	r0, [sp, #32]
   1ae70:	bl	11dec <pthread_mutex_unlock@plt>
   1ae74:	mov	r0, sl
   1ae78:	bl	11e94 <pthread_mutex_lock@plt>
   1ae7c:	ldr	r0, [r4]
   1ae80:	mov	r1, r8
   1ae84:	bl	1e0dc <__assert_fail@plt+0xbda4>
   1ae88:	mov	r0, #1
   1ae8c:	strb	r0, [r8, #44]	; 0x2c
   1ae90:	mov	r0, r7
   1ae94:	bl	12308 <pthread_cond_signal@plt>
   1ae98:	mov	r0, sl
   1ae9c:	bl	11dec <pthread_mutex_unlock@plt>
   1aea0:	sub	sp, fp, #28
   1aea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aea8:	movw	r2, #45112	; 0xb038
   1aeac:	sub	r0, fp, #32
   1aeb0:	add	r3, sp, #60	; 0x3c
   1aeb4:	mov	r1, #0
   1aeb8:	movt	r2, #1
   1aebc:	bl	1205c <pthread_create@plt>
   1aec0:	ldr	r6, [r5, #20]
   1aec4:	cmp	r0, #0
   1aec8:	beq	1aed4 <__assert_fail@plt+0x8b9c>
   1aecc:	ldr	r7, [r5, #24]
   1aed0:	b	1a618 <__assert_fail@plt+0x82e0>
   1aed4:	ldr	r0, [fp, #8]
   1aed8:	ldr	r3, [r5, #36]	; 0x24
   1aedc:	ldr	r2, [sp, #20]
   1aee0:	sub	r1, r4, r4, lsr #1
   1aee4:	str	r0, [sp]
   1aee8:	ldr	r0, [fp, #12]
   1aeec:	str	r0, [sp, #4]
   1aef0:	ldr	r0, [fp, #16]
   1aef4:	str	r0, [sp, #8]
   1aef8:	sub	r0, r8, r6, lsl #4
   1aefc:	bl	1a5b0 <__assert_fail@plt+0x8278>
   1af00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1af04:	mov	r1, #0
   1af08:	bl	12254 <pthread_join@plt>
   1af0c:	sub	sp, fp, #28
   1af10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af14:	ldr	r2, [r1, #40]	; 0x28
   1af18:	ldr	r3, [r0, #40]	; 0x28
   1af1c:	cmp	r3, r2
   1af20:	ldreq	r2, [r1, #20]
   1af24:	ldreq	r1, [r1, #24]
   1af28:	movne	r0, #0
   1af2c:	addeq	r1, r1, r2
   1af30:	ldreq	r2, [r0, #20]
   1af34:	ldreq	r0, [r0, #24]
   1af38:	addeq	r2, r0, r2
   1af3c:	moveq	r0, #0
   1af40:	cmpeq	r2, r1
   1af44:	movwcc	r0, #1
   1af48:	bx	lr
   1af4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af50:	add	fp, sp, #28
   1af54:	sub	sp, sp, #12
   1af58:	mov	r4, r1
   1af5c:	ldr	r1, [fp, #8]
   1af60:	mov	r6, r2
   1af64:	ldr	r2, [fp, #12]
   1af68:	mov	r5, r3
   1af6c:	mov	sl, #0
   1af70:	mov	r8, #1
   1af74:	rsb	r9, r1, #0
   1af78:	b	1afb0 <__assert_fail@plt+0x8c78>
   1af7c:	ldr	r0, [fp, #8]
   1af80:	str	r1, [r4, #32]
   1af84:	lsr	r3, r5, #1
   1af88:	mov	r2, r7
   1af8c:	stm	sp, {r0, r8}
   1af90:	mov	r0, r4
   1af94:	bl	1af4c <__assert_fail@plt+0x8c14>
   1af98:	mov	r1, r0
   1af9c:	str	r0, [r4, #36]	; 0x24
   1afa0:	mov	r0, r4
   1afa4:	sub	r5, r5, r5, lsr #1
   1afa8:	mov	r2, #0
   1afac:	mov	r4, r1
   1afb0:	ands	r1, r2, #1
   1afb4:	mov	r2, #24
   1afb8:	add	r7, r6, r9, lsl #4
   1afbc:	add	r3, r0, #12
   1afc0:	movwne	r2, #20
   1afc4:	cmp	r1, #0
   1afc8:	ldr	r2, [r0, r2]
   1afcc:	addne	r3, r0, #8
   1afd0:	str	r7, [r4]
   1afd4:	lsr	r1, r2, #1
   1afd8:	sub	r2, r2, r2, lsr #1
   1afdc:	sub	r6, r7, r1, lsl #4
   1afe0:	stmib	r4, {r6, r7}
   1afe4:	str	r6, [r4, #12]
   1afe8:	str	r3, [r4, #16]
   1afec:	str	r1, [r4, #20]
   1aff0:	str	r2, [r4, #24]
   1aff4:	str	r0, [r4, #28]
   1aff8:	mov	r1, #0
   1affc:	ldr	r0, [r0, #40]	; 0x28
   1b000:	strb	sl, [r4, #44]	; 0x2c
   1b004:	add	r0, r0, #1
   1b008:	str	r0, [r4, #40]	; 0x28
   1b00c:	add	r0, r4, #48	; 0x30
   1b010:	bl	11edc <pthread_mutex_init@plt>
   1b014:	add	r1, r4, #72	; 0x48
   1b018:	cmp	r5, #2
   1b01c:	bcs	1af7c <__assert_fail@plt+0x8c44>
   1b020:	mov	r0, #0
   1b024:	str	r0, [r4, #32]
   1b028:	str	r0, [r4, #36]	; 0x24
   1b02c:	mov	r0, r1
   1b030:	sub	sp, fp, #28
   1b034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b038:	push	{r4, sl, fp, lr}
   1b03c:	add	fp, sp, #8
   1b040:	sub	sp, sp, #16
   1b044:	ldr	ip, [r0]
   1b048:	ldmib	r0, {r1, r2, r3, lr}
   1b04c:	ldr	r4, [r0, #20]
   1b050:	ldr	r0, [r0, #24]
   1b054:	str	r0, [sp, #8]
   1b058:	mov	r0, ip
   1b05c:	str	lr, [sp]
   1b060:	str	r4, [sp, #4]
   1b064:	bl	1a5b0 <__assert_fail@plt+0x8278>
   1b068:	mov	r0, #0
   1b06c:	sub	sp, fp, #8
   1b070:	pop	{r4, sl, fp, pc}
   1b074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b078:	add	fp, sp, #28
   1b07c:	sub	sp, sp, #4
   1b080:	mov	r9, r3
   1b084:	mov	r8, r2
   1b088:	mov	r4, r0
   1b08c:	cmp	r1, #2
   1b090:	bne	1b0f0 <__assert_fail@plt+0x8db8>
   1b094:	sub	r6, r4, #16
   1b098:	sub	r5, r4, #32
   1b09c:	mov	r0, r6
   1b0a0:	mov	r1, r5
   1b0a4:	bl	179a4 <__assert_fail@plt+0x566c>
   1b0a8:	cmp	r9, #0
   1b0ac:	beq	1b144 <__assert_fail@plt+0x8e0c>
   1b0b0:	mvn	r1, #15
   1b0b4:	cmp	r0, #0
   1b0b8:	mvngt	r1, #31
   1b0bc:	cmp	r0, #0
   1b0c0:	add	r1, r4, r1
   1b0c4:	vld1.32	{d16-d17}, [r1]
   1b0c8:	sub	r1, r8, #16
   1b0cc:	vst1.32	{d16-d17}, [r1]
   1b0d0:	mvn	r1, #31
   1b0d4:	mvngt	r1, #15
   1b0d8:	add	r0, r4, r1
   1b0dc:	vld1.32	{d16-d17}, [r0]
   1b0e0:	sub	r0, r8, #32
   1b0e4:	vst1.32	{d16-d17}, [r0]
   1b0e8:	sub	sp, fp, #28
   1b0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0f0:	mov	r7, r1
   1b0f4:	lsr	sl, r1, #1
   1b0f8:	mov	r1, #0
   1b0fc:	cmp	r9, #0
   1b100:	mov	r3, r9
   1b104:	sub	r5, r1, r7, lsr #1
   1b108:	mov	r1, r9
   1b10c:	sub	r6, r7, r7, lsr #1
   1b110:	sub	r0, r4, sl, lsl #4
   1b114:	movne	r1, r5
   1b118:	add	r2, r8, r1, lsl #4
   1b11c:	mov	r1, r6
   1b120:	bl	1b074 <__assert_fail@plt+0x8d3c>
   1b124:	cmp	r7, #4
   1b128:	bcc	1b170 <__assert_fail@plt+0x8e38>
   1b12c:	eor	r3, r9, #1
   1b130:	mov	r0, r4
   1b134:	mov	r1, sl
   1b138:	mov	r2, r8
   1b13c:	bl	1b074 <__assert_fail@plt+0x8d3c>
   1b140:	b	1b188 <__assert_fail@plt+0x8e50>
   1b144:	cmp	r0, #1
   1b148:	blt	1b210 <__assert_fail@plt+0x8ed8>
   1b14c:	vld1.32	{d16-d17}, [r6]
   1b150:	sub	r0, r8, #16
   1b154:	vst1.32	{d16-d17}, [r0]
   1b158:	vld1.32	{d16-d17}, [r5]
   1b15c:	vst1.32	{d16-d17}, [r6]
   1b160:	vld1.32	{d16-d17}, [r0]
   1b164:	vst1.32	{d16-d17}, [r5]
   1b168:	sub	sp, fp, #28
   1b16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b170:	cmp	r9, #0
   1b174:	bne	1b188 <__assert_fail@plt+0x8e50>
   1b178:	sub	r0, r4, #16
   1b17c:	vld1.32	{d16-d17}, [r0]
   1b180:	sub	r0, r8, #16
   1b184:	vst1.32	{d16-d17}, [r0]
   1b188:	cmp	r9, #0
   1b18c:	mov	r9, r8
   1b190:	movne	r9, r4
   1b194:	movne	r4, r8
   1b198:	add	r7, r4, r5, lsl #4
   1b19c:	sub	r8, r9, #16
   1b1a0:	sub	r5, r7, #16
   1b1a4:	mov	r0, r8
   1b1a8:	mov	r1, r5
   1b1ac:	bl	179a4 <__assert_fail@plt+0x566c>
   1b1b0:	sub	r4, r4, #16
   1b1b4:	cmp	r0, #0
   1b1b8:	ble	1b1d4 <__assert_fail@plt+0x8e9c>
   1b1bc:	vld1.32	{d16-d17}, [r5]
   1b1c0:	subs	r6, r6, #1
   1b1c4:	mov	r7, r5
   1b1c8:	vst1.32	{d16-d17}, [r4]
   1b1cc:	bne	1b1a0 <__assert_fail@plt+0x8e68>
   1b1d0:	b	1b1ec <__assert_fail@plt+0x8eb4>
   1b1d4:	vld1.32	{d16-d17}, [r8]
   1b1d8:	subs	sl, sl, #1
   1b1dc:	mov	r9, r8
   1b1e0:	vst1.32	{d16-d17}, [r4]
   1b1e4:	bne	1b19c <__assert_fail@plt+0x8e64>
   1b1e8:	b	1b210 <__assert_fail@plt+0x8ed8>
   1b1ec:	mvn	r0, #0
   1b1f0:	add	r1, r9, r0, lsl #4
   1b1f4:	vld1.32	{d16-d17}, [r1]
   1b1f8:	add	r1, r4, r0, lsl #4
   1b1fc:	sub	r0, r0, #1
   1b200:	vst1.32	{d16-d17}, [r1]
   1b204:	add	r1, sl, r0
   1b208:	cmn	r1, #1
   1b20c:	bne	1b1f0 <__assert_fail@plt+0x8eb8>
   1b210:	sub	sp, fp, #28
   1b214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b218:	mov	r0, #1
   1b21c:	b	12440 <__assert_fail@plt+0x108>
   1b220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b224:	add	fp, sp, #28
   1b228:	sub	sp, sp, #12
   1b22c:	mov	r4, r3
   1b230:	mov	r6, r2
   1b234:	mov	r5, r1
   1b238:	mov	sl, r0
   1b23c:	bl	12140 <strlen@plt>
   1b240:	ldr	r8, [r5]
   1b244:	cmp	r8, #0
   1b248:	beq	1b304 <__assert_fail@plt+0x8fcc>
   1b24c:	mov	r7, r0
   1b250:	mov	r0, #0
   1b254:	add	r9, r5, #4
   1b258:	mov	r5, #0
   1b25c:	str	r6, [sp, #4]
   1b260:	str	r0, [sp]
   1b264:	mvn	r0, #0
   1b268:	str	r0, [sp, #8]
   1b26c:	mov	r0, r8
   1b270:	mov	r1, sl
   1b274:	mov	r2, r7
   1b278:	bl	122fc <strncmp@plt>
   1b27c:	cmp	r0, #0
   1b280:	bne	1b2d8 <__assert_fail@plt+0x8fa0>
   1b284:	mov	r0, r8
   1b288:	bl	12140 <strlen@plt>
   1b28c:	cmp	r0, r7
   1b290:	beq	1b308 <__assert_fail@plt+0x8fd0>
   1b294:	ldr	r0, [sp, #8]
   1b298:	cmn	r0, #1
   1b29c:	beq	1b2d4 <__assert_fail@plt+0x8f9c>
   1b2a0:	ldr	r0, [sp, #4]
   1b2a4:	cmp	r0, #0
   1b2a8:	beq	1b2c8 <__assert_fail@plt+0x8f90>
   1b2ac:	ldr	r1, [sp, #8]
   1b2b0:	mov	r2, r4
   1b2b4:	mla	r0, r1, r4, r0
   1b2b8:	mov	r1, r6
   1b2bc:	bl	11f3c <memcmp@plt>
   1b2c0:	cmp	r0, #0
   1b2c4:	beq	1b2d8 <__assert_fail@plt+0x8fa0>
   1b2c8:	mov	r0, #1
   1b2cc:	str	r0, [sp]
   1b2d0:	b	1b2d8 <__assert_fail@plt+0x8fa0>
   1b2d4:	str	r5, [sp, #8]
   1b2d8:	ldr	r8, [r9, r5, lsl #2]
   1b2dc:	add	r6, r6, r4
   1b2e0:	add	r5, r5, #1
   1b2e4:	cmp	r8, #0
   1b2e8:	bne	1b26c <__assert_fail@plt+0x8f34>
   1b2ec:	ldr	r0, [sp]
   1b2f0:	tst	r0, #1
   1b2f4:	ldr	r0, [sp, #8]
   1b2f8:	mvnne	r0, #1
   1b2fc:	sub	sp, fp, #28
   1b300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b304:	mvn	r5, #0
   1b308:	mov	r0, r5
   1b30c:	sub	sp, fp, #28
   1b310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b314:	push	{r4, r5, r6, r7, fp, lr}
   1b318:	add	fp, sp, #16
   1b31c:	mov	r5, r0
   1b320:	ldr	r0, [r1]
   1b324:	mvn	r4, #0
   1b328:	cmp	r0, #0
   1b32c:	beq	1b35c <__assert_fail@plt+0x9024>
   1b330:	add	r7, r1, #4
   1b334:	mov	r6, #0
   1b338:	mov	r1, r5
   1b33c:	bl	11e28 <strcmp@plt>
   1b340:	cmp	r0, #0
   1b344:	moveq	r0, r6
   1b348:	popeq	{r4, r5, r6, r7, fp, pc}
   1b34c:	ldr	r0, [r7, r6, lsl #2]
   1b350:	add	r6, r6, #1
   1b354:	cmp	r0, #0
   1b358:	bne	1b338 <__assert_fail@plt+0x9000>
   1b35c:	mov	r0, r4
   1b360:	pop	{r4, r5, r6, r7, fp, pc}
   1b364:	push	{r4, r5, r6, sl, fp, lr}
   1b368:	add	fp, sp, #16
   1b36c:	sub	sp, sp, #8
   1b370:	mov	r4, r1
   1b374:	movw	r1, #27762	; 0x6c72
   1b378:	mov	r5, r0
   1b37c:	movw	r0, #27735	; 0x6c57
   1b380:	cmn	r2, #1
   1b384:	mov	r2, #5
   1b388:	movt	r0, #2
   1b38c:	movt	r1, #2
   1b390:	moveq	r1, r0
   1b394:	mov	r0, #0
   1b398:	bl	11f54 <dcgettext@plt>
   1b39c:	mov	r6, r0
   1b3a0:	mov	r0, #0
   1b3a4:	mov	r1, #8
   1b3a8:	mov	r2, r4
   1b3ac:	bl	2030c <__assert_fail@plt+0xdfd4>
   1b3b0:	mov	r4, r0
   1b3b4:	mov	r0, #1
   1b3b8:	mov	r1, r5
   1b3bc:	bl	208cc <__assert_fail@plt+0xe594>
   1b3c0:	str	r0, [sp]
   1b3c4:	mov	r0, #0
   1b3c8:	mov	r1, #0
   1b3cc:	mov	r2, r6
   1b3d0:	mov	r3, r4
   1b3d4:	bl	12080 <error@plt>
   1b3d8:	sub	sp, fp, #16
   1b3dc:	pop	{r4, r5, r6, sl, fp, pc}
   1b3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3e4:	add	fp, sp, #28
   1b3e8:	sub	sp, sp, #4
   1b3ec:	mov	r5, r1
   1b3f0:	movw	r1, #27791	; 0x6c8f
   1b3f4:	mov	sl, r2
   1b3f8:	mov	r7, r0
   1b3fc:	mov	r0, #0
   1b400:	mov	r2, #5
   1b404:	mov	r8, #0
   1b408:	movt	r1, #2
   1b40c:	bl	11f54 <dcgettext@plt>
   1b410:	movw	r4, #33480	; 0x82c8
   1b414:	movt	r4, #3
   1b418:	ldr	r1, [r4]
   1b41c:	bl	11e10 <fputs_unlocked@plt>
   1b420:	ldr	r6, [r7]
   1b424:	cmp	r6, #0
   1b428:	beq	1b4c8 <__assert_fail@plt+0x9190>
   1b42c:	add	r9, r7, #4
   1b430:	mov	r7, #0
   1b434:	str	sl, [sp]
   1b438:	cmp	r8, #0
   1b43c:	beq	1b458 <__assert_fail@plt+0x9120>
   1b440:	mov	r0, r7
   1b444:	mov	r1, r5
   1b448:	mov	r2, sl
   1b44c:	bl	11f3c <memcmp@plt>
   1b450:	cmp	r0, #0
   1b454:	beq	1b484 <__assert_fail@plt+0x914c>
   1b458:	ldr	r7, [r4]
   1b45c:	mov	r0, r6
   1b460:	bl	208dc <__assert_fail@plt+0xe5a4>
   1b464:	movw	r2, #27812	; 0x6ca4
   1b468:	mov	r3, r0
   1b46c:	mov	r0, r7
   1b470:	mov	r1, #1
   1b474:	movt	r2, #2
   1b478:	bl	121c4 <__fprintf_chk@plt>
   1b47c:	mov	r7, r5
   1b480:	b	1b4b4 <__assert_fail@plt+0x917c>
   1b484:	mov	sl, r9
   1b488:	ldr	r9, [r4]
   1b48c:	mov	r0, r6
   1b490:	bl	208dc <__assert_fail@plt+0xe5a4>
   1b494:	mov	r3, r0
   1b498:	mov	r0, r9
   1b49c:	mov	r9, sl
   1b4a0:	ldr	sl, [sp]
   1b4a4:	movw	r2, #27820	; 0x6cac
   1b4a8:	mov	r1, #1
   1b4ac:	movt	r2, #2
   1b4b0:	bl	121c4 <__fprintf_chk@plt>
   1b4b4:	ldr	r6, [r9, -r8, lsl #2]
   1b4b8:	add	r5, r5, sl
   1b4bc:	sub	r8, r8, #1
   1b4c0:	cmp	r6, #0
   1b4c4:	bne	1b438 <__assert_fail@plt+0x9100>
   1b4c8:	ldr	r0, [r4]
   1b4cc:	ldr	r1, [r0, #20]
   1b4d0:	ldr	r2, [r0, #24]
   1b4d4:	cmp	r1, r2
   1b4d8:	addcc	r2, r1, #1
   1b4dc:	strcc	r2, [r0, #20]
   1b4e0:	movcc	r0, #10
   1b4e4:	strbcc	r0, [r1]
   1b4e8:	subcc	sp, fp, #28
   1b4ec:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4f0:	mov	r1, #10
   1b4f4:	sub	sp, fp, #28
   1b4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4fc:	b	1220c <__overflow@plt>
   1b500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b504:	add	fp, sp, #28
   1b508:	sub	sp, sp, #20
   1b50c:	mov	r9, r0
   1b510:	ldr	r0, [fp, #16]
   1b514:	mov	r8, r3
   1b518:	mov	sl, r2
   1b51c:	mov	r7, r1
   1b520:	cmp	r0, #0
   1b524:	beq	1b5fc <__assert_fail@plt+0x92c4>
   1b528:	mov	r0, r7
   1b52c:	str	r9, [sp, #8]
   1b530:	str	r8, [sp, #16]
   1b534:	bl	12140 <strlen@plt>
   1b538:	ldr	r9, [sl]
   1b53c:	cmp	r9, #0
   1b540:	beq	1b63c <__assert_fail@plt+0x9304>
   1b544:	str	sl, [sp, #4]
   1b548:	add	r8, sl, #4
   1b54c:	ldr	sl, [sp, #16]
   1b550:	mov	r4, r0
   1b554:	mov	r0, #0
   1b558:	mvn	r6, #0
   1b55c:	mov	r5, #0
   1b560:	str	r0, [sp, #12]
   1b564:	mov	r0, r9
   1b568:	mov	r1, r7
   1b56c:	mov	r2, r4
   1b570:	bl	122fc <strncmp@plt>
   1b574:	cmp	r0, #0
   1b578:	bne	1b5c8 <__assert_fail@plt+0x9290>
   1b57c:	mov	r0, r9
   1b580:	bl	12140 <strlen@plt>
   1b584:	cmp	r0, r4
   1b588:	beq	1b648 <__assert_fail@plt+0x9310>
   1b58c:	cmn	r6, #1
   1b590:	beq	1b5c4 <__assert_fail@plt+0x928c>
   1b594:	ldr	r0, [sp, #16]
   1b598:	cmp	r0, #0
   1b59c:	beq	1b5b8 <__assert_fail@plt+0x9280>
   1b5a0:	ldr	r2, [fp, #8]
   1b5a4:	mov	r1, sl
   1b5a8:	mla	r0, r6, r2, r0
   1b5ac:	bl	11f3c <memcmp@plt>
   1b5b0:	cmp	r0, #0
   1b5b4:	beq	1b5c8 <__assert_fail@plt+0x9290>
   1b5b8:	mov	r0, #1
   1b5bc:	str	r0, [sp, #12]
   1b5c0:	b	1b5c8 <__assert_fail@plt+0x9290>
   1b5c4:	mov	r6, r5
   1b5c8:	ldr	r9, [r8, r5, lsl #2]
   1b5cc:	ldr	r0, [fp, #8]
   1b5d0:	add	r5, r5, #1
   1b5d4:	add	sl, sl, r0
   1b5d8:	cmp	r9, #0
   1b5dc:	bne	1b564 <__assert_fail@plt+0x922c>
   1b5e0:	ldr	r0, [sp, #12]
   1b5e4:	ldr	r8, [sp, #16]
   1b5e8:	ldr	sl, [sp, #4]
   1b5ec:	ldr	r9, [sp, #8]
   1b5f0:	tst	r0, #1
   1b5f4:	beq	1b658 <__assert_fail@plt+0x9320>
   1b5f8:	b	1b664 <__assert_fail@plt+0x932c>
   1b5fc:	ldr	r0, [sl]
   1b600:	movw	r4, #27735	; 0x6c57
   1b604:	movt	r4, #2
   1b608:	cmp	r0, #0
   1b60c:	beq	1b678 <__assert_fail@plt+0x9340>
   1b610:	add	r5, sl, #4
   1b614:	mov	r6, #0
   1b618:	mov	r1, r7
   1b61c:	bl	11e28 <strcmp@plt>
   1b620:	cmp	r0, #0
   1b624:	beq	1b658 <__assert_fail@plt+0x9320>
   1b628:	ldr	r0, [r5, r6, lsl #2]
   1b62c:	add	r6, r6, #1
   1b630:	cmp	r0, #0
   1b634:	bne	1b618 <__assert_fail@plt+0x92e0>
   1b638:	b	1b678 <__assert_fail@plt+0x9340>
   1b63c:	ldr	r8, [sp, #16]
   1b640:	ldr	r9, [sp, #8]
   1b644:	b	1b670 <__assert_fail@plt+0x9338>
   1b648:	ldr	r8, [sp, #16]
   1b64c:	ldr	sl, [sp, #4]
   1b650:	ldr	r9, [sp, #8]
   1b654:	mov	r6, r5
   1b658:	cmn	r6, #1
   1b65c:	bgt	1b6e0 <__assert_fail@plt+0x93a8>
   1b660:	beq	1b670 <__assert_fail@plt+0x9338>
   1b664:	movw	r4, #27762	; 0x6c72
   1b668:	movt	r4, #2
   1b66c:	b	1b678 <__assert_fail@plt+0x9340>
   1b670:	movw	r4, #27735	; 0x6c57
   1b674:	movt	r4, #2
   1b678:	ldr	r6, [fp, #12]
   1b67c:	mov	r0, #0
   1b680:	mov	r1, r4
   1b684:	mov	r2, #5
   1b688:	bl	11f54 <dcgettext@plt>
   1b68c:	mov	r4, r0
   1b690:	mov	r0, #0
   1b694:	mov	r1, #8
   1b698:	mov	r2, r7
   1b69c:	bl	2030c <__assert_fail@plt+0xdfd4>
   1b6a0:	mov	r5, r0
   1b6a4:	mov	r0, #1
   1b6a8:	mov	r1, r9
   1b6ac:	bl	208cc <__assert_fail@plt+0xe594>
   1b6b0:	str	r0, [sp]
   1b6b4:	mov	r0, #0
   1b6b8:	mov	r1, #0
   1b6bc:	mov	r2, r4
   1b6c0:	mov	r3, r5
   1b6c4:	bl	12080 <error@plt>
   1b6c8:	ldr	r2, [fp, #8]
   1b6cc:	mov	r0, sl
   1b6d0:	mov	r1, r8
   1b6d4:	bl	1b3e0 <__assert_fail@plt+0x90a8>
   1b6d8:	blx	r6
   1b6dc:	mvn	r6, #0
   1b6e0:	mov	r0, r6
   1b6e4:	sub	sp, fp, #28
   1b6e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b6f0:	add	fp, sp, #24
   1b6f4:	ldr	r6, [r1]
   1b6f8:	cmp	r6, #0
   1b6fc:	beq	1b760 <__assert_fail@plt+0x9428>
   1b700:	mov	r8, r1
   1b704:	mov	r7, r2
   1b708:	mov	r1, r2
   1b70c:	mov	r2, r3
   1b710:	mov	r4, r3
   1b714:	mov	r9, r0
   1b718:	bl	11f3c <memcmp@plt>
   1b71c:	cmp	r0, #0
   1b720:	beq	1b758 <__assert_fail@plt+0x9420>
   1b724:	add	r7, r7, r4
   1b728:	add	r5, r8, #4
   1b72c:	ldr	r6, [r5]
   1b730:	cmp	r6, #0
   1b734:	beq	1b760 <__assert_fail@plt+0x9428>
   1b738:	mov	r0, r9
   1b73c:	mov	r1, r7
   1b740:	mov	r2, r4
   1b744:	bl	11f3c <memcmp@plt>
   1b748:	add	r7, r7, r4
   1b74c:	add	r5, r5, #4
   1b750:	cmp	r0, #0
   1b754:	bne	1b72c <__assert_fail@plt+0x93f4>
   1b758:	mov	r0, r6
   1b75c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b760:	mov	r6, #0
   1b764:	mov	r0, r6
   1b768:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b76c:	movw	r1, #35004	; 0x88bc
   1b770:	movt	r1, #3
   1b774:	str	r0, [r1]
   1b778:	bx	lr
   1b77c:	movw	r1, #35008	; 0x88c0
   1b780:	movt	r1, #3
   1b784:	strb	r0, [r1]
   1b788:	bx	lr
   1b78c:	push	{r4, r5, r6, sl, fp, lr}
   1b790:	add	fp, sp, #16
   1b794:	sub	sp, sp, #8
   1b798:	movw	r0, #33492	; 0x82d4
   1b79c:	movt	r0, #3
   1b7a0:	ldr	r0, [r0]
   1b7a4:	bl	23bb0 <__assert_fail@plt+0x11878>
   1b7a8:	cmp	r0, #0
   1b7ac:	beq	1b7d4 <__assert_fail@plt+0x949c>
   1b7b0:	movw	r0, #35008	; 0x88c0
   1b7b4:	movt	r0, #3
   1b7b8:	ldrb	r0, [r0]
   1b7bc:	cmp	r0, #0
   1b7c0:	beq	1b7f4 <__assert_fail@plt+0x94bc>
   1b7c4:	bl	12164 <__errno_location@plt>
   1b7c8:	ldr	r0, [r0]
   1b7cc:	cmp	r0, #32
   1b7d0:	bne	1b7f4 <__assert_fail@plt+0x94bc>
   1b7d4:	movw	r0, #33480	; 0x82c8
   1b7d8:	movt	r0, #3
   1b7dc:	ldr	r0, [r0]
   1b7e0:	bl	23bb0 <__assert_fail@plt+0x11878>
   1b7e4:	cmp	r0, #0
   1b7e8:	subeq	sp, fp, #16
   1b7ec:	popeq	{r4, r5, r6, sl, fp, pc}
   1b7f0:	b	1b864 <__assert_fail@plt+0x952c>
   1b7f4:	movw	r1, #27825	; 0x6cb1
   1b7f8:	mov	r0, #0
   1b7fc:	mov	r2, #5
   1b800:	movt	r1, #2
   1b804:	bl	11f54 <dcgettext@plt>
   1b808:	mov	r4, r0
   1b80c:	movw	r0, #35004	; 0x88bc
   1b810:	movt	r0, #3
   1b814:	ldr	r6, [r0]
   1b818:	bl	12164 <__errno_location@plt>
   1b81c:	ldr	r5, [r0]
   1b820:	cmp	r6, #0
   1b824:	bne	1b840 <__assert_fail@plt+0x9508>
   1b828:	movw	r2, #27822	; 0x6cae
   1b82c:	mov	r0, #0
   1b830:	mov	r1, r5
   1b834:	mov	r3, r4
   1b838:	movt	r2, #2
   1b83c:	b	1b860 <__assert_fail@plt+0x9528>
   1b840:	mov	r0, r6
   1b844:	bl	20554 <__assert_fail@plt+0xe21c>
   1b848:	movw	r2, #26737	; 0x6871
   1b84c:	mov	r3, r0
   1b850:	str	r4, [sp]
   1b854:	mov	r0, #0
   1b858:	mov	r1, r5
   1b85c:	movt	r2, #2
   1b860:	bl	12080 <error@plt>
   1b864:	movw	r0, #33384	; 0x8268
   1b868:	movt	r0, #3
   1b86c:	ldr	r0, [r0]
   1b870:	bl	11eb8 <_exit@plt>
	...
   1b880:	add	r2, pc, #40	; 0x28
   1b884:	mov	r1, #0
   1b888:	vld1.64	{d16-d17}, [r2 :128]
   1b88c:	mov	r2, #20
   1b890:	str	r1, [r0, #16]
   1b894:	str	r1, [r0, #24]
   1b898:	vst1.32	{d16-d17}, [r0], r2
   1b89c:	str	r1, [r0]
   1b8a0:	bx	lr
   1b8a4:	nop	{0}
   1b8a8:	nop	{0}
   1b8ac:	nop	{0}
   1b8b0:	strbvs	r2, [r5, -r1, lsl #6]
   1b8b4:	svc	0x00cdab89
   1b8b8:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1b8bc:	eorsne	r5, r2, r6, ror r4
   1b8c0:	ldr	r2, [r0]
   1b8c4:	str	r2, [r1]
   1b8c8:	ldr	r2, [r0, #4]
   1b8cc:	str	r2, [r1, #4]
   1b8d0:	ldr	r2, [r0, #8]
   1b8d4:	str	r2, [r1, #8]
   1b8d8:	ldr	r0, [r0, #12]
   1b8dc:	str	r0, [r1, #12]
   1b8e0:	mov	r0, r1
   1b8e4:	bx	lr
   1b8e8:	push	{r4, r5, r6, r7, fp, lr}
   1b8ec:	add	fp, sp, #16
   1b8f0:	mov	r4, r1
   1b8f4:	ldr	r1, [r0, #24]
   1b8f8:	ldr	r2, [r0, #16]
   1b8fc:	mov	r5, r0
   1b900:	mov	r7, #32
   1b904:	add	r6, r5, #28
   1b908:	add	r0, r2, r1
   1b90c:	cmp	r1, #56	; 0x38
   1b910:	movwcc	r7, #16
   1b914:	str	r0, [r5, #16]
   1b918:	cmp	r0, r2
   1b91c:	lsl	r3, r0, #3
   1b920:	ldrcc	r2, [r5, #20]
   1b924:	add	ip, r6, r7, lsl #2
   1b928:	addcc	r2, r2, #1
   1b92c:	strcc	r2, [r5, #20]
   1b930:	mvn	r2, #7
   1b934:	add	r2, r2, r7, lsl #2
   1b938:	str	r3, [r6, r2]
   1b93c:	sub	r2, r2, r1
   1b940:	ldr	r3, [r5, #20]
   1b944:	lsl	r3, r3, #3
   1b948:	orr	r0, r3, r0, lsr #29
   1b94c:	str	r0, [ip, #-4]
   1b950:	add	r0, r6, r1
   1b954:	movw	r1, #27840	; 0x6cc0
   1b958:	movt	r1, #2
   1b95c:	bl	11ec4 <memcpy@plt>
   1b960:	lsl	r1, r7, #2
   1b964:	mov	r0, r6
   1b968:	mov	r2, r5
   1b96c:	bl	1b998 <__assert_fail@plt+0x9660>
   1b970:	ldr	r0, [r5]
   1b974:	str	r0, [r4]
   1b978:	ldr	r0, [r5, #4]
   1b97c:	str	r0, [r4, #4]
   1b980:	ldr	r0, [r5, #8]
   1b984:	str	r0, [r4, #8]
   1b988:	ldr	r0, [r5, #12]
   1b98c:	str	r0, [r4, #12]
   1b990:	mov	r0, r4
   1b994:	pop	{r4, r5, r6, r7, fp, pc}
   1b998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b99c:	add	fp, sp, #28
   1b9a0:	sub	sp, sp, #88	; 0x58
   1b9a4:	ldr	r3, [r2, #16]
   1b9a8:	adds	r3, r3, r1
   1b9ac:	bic	r1, r1, #3
   1b9b0:	str	r3, [r2, #16]
   1b9b4:	add	lr, r0, r1
   1b9b8:	ldr	r3, [r2, #20]
   1b9bc:	adc	r3, r3, #0
   1b9c0:	cmp	lr, r0
   1b9c4:	str	r3, [r2, #20]
   1b9c8:	ldm	r2, {r3, r4, ip}
   1b9cc:	ldr	r1, [r2, #12]
   1b9d0:	str	r2, [sp]
   1b9d4:	bls	1c3e8 <__assert_fail@plt+0xa0b0>
   1b9d8:	mov	sl, r0
   1b9dc:	str	lr, [sp, #4]
   1b9e0:	eor	r2, ip, r1
   1b9e4:	ldr	r0, [sl]
   1b9e8:	str	r3, [sp, #24]
   1b9ec:	mov	r6, r4
   1b9f0:	str	r1, [sp, #28]
   1b9f4:	str	ip, [fp, #-40]	; 0xffffffd8
   1b9f8:	ldr	r5, [sl, #8]
   1b9fc:	ldr	lr, [sl, #12]
   1ba00:	ldr	r8, [sl, #36]	; 0x24
   1ba04:	and	r2, r4, r2
   1ba08:	ldr	r4, [sl, #4]
   1ba0c:	eor	r7, r6, ip
   1ba10:	eor	r2, r2, r1
   1ba14:	add	r2, r3, r2
   1ba18:	movw	r3, #42104	; 0xa478
   1ba1c:	add	r2, r2, r0
   1ba20:	movt	r3, #55146	; 0xd76a
   1ba24:	str	r5, [fp, #-36]	; 0xffffffdc
   1ba28:	str	r0, [fp, #-44]	; 0xffffffd4
   1ba2c:	ldr	r0, [sl, #16]
   1ba30:	str	lr, [fp, #-52]	; 0xffffffcc
   1ba34:	str	r8, [fp, #-56]	; 0xffffffc8
   1ba38:	add	r2, r2, r3
   1ba3c:	mov	r3, r6
   1ba40:	str	r4, [fp, #-32]	; 0xffffffe0
   1ba44:	add	r2, r6, r2, ror #25
   1ba48:	add	r6, r1, r4
   1ba4c:	movw	r1, #46934	; 0xb756
   1ba50:	str	r3, [sp, #20]
   1ba54:	and	r7, r2, r7
   1ba58:	movt	r1, #59591	; 0xe8c7
   1ba5c:	eor	r7, r7, ip
   1ba60:	str	r0, [sp, #44]	; 0x2c
   1ba64:	ldr	ip, [sl, #24]
   1ba68:	add	r7, r6, r7
   1ba6c:	eor	r6, r2, r3
   1ba70:	add	r7, r7, r1
   1ba74:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1ba78:	add	r7, r2, r7, ror #20
   1ba7c:	and	r6, r7, r6
   1ba80:	str	ip, [sp, #48]	; 0x30
   1ba84:	eor	r6, r6, r3
   1ba88:	add	r4, r1, r5
   1ba8c:	movw	r1, #28891	; 0x70db
   1ba90:	add	r5, r3, lr
   1ba94:	add	r6, r4, r6
   1ba98:	movt	r1, #9248	; 0x2420
   1ba9c:	add	r6, r6, r1
   1baa0:	movw	r1, #52974	; 0xceee
   1baa4:	add	r4, r7, r6, ror #15
   1baa8:	eor	r6, r7, r2
   1baac:	movt	r1, #49597	; 0xc1bd
   1bab0:	and	r6, r4, r6
   1bab4:	eor	r6, r6, r2
   1bab8:	add	r2, r0, r2
   1babc:	ldr	r0, [sl, #20]
   1bac0:	add	r6, r5, r6
   1bac4:	add	r6, r6, r1
   1bac8:	movw	r1, #4015	; 0xfaf
   1bacc:	add	r5, r4, r6, ror #10
   1bad0:	eor	r6, r4, r7
   1bad4:	movt	r1, #62844	; 0xf57c
   1bad8:	and	r6, r5, r6
   1badc:	str	r0, [sp, #32]
   1bae0:	eor	r6, r6, r7
   1bae4:	add	r7, r0, r7
   1bae8:	ldr	r0, [sl, #28]
   1baec:	add	r2, r2, r6
   1baf0:	movw	r6, #38145	; 0x9501
   1baf4:	add	r2, r2, r1
   1baf8:	movw	r1, #50730	; 0xc62a
   1bafc:	movt	r6, #64838	; 0xfd46
   1bb00:	add	r3, r5, r2, ror #25
   1bb04:	eor	r2, r5, r4
   1bb08:	movt	r1, #18311	; 0x4787
   1bb0c:	and	r2, r3, r2
   1bb10:	str	r0, [sp, #16]
   1bb14:	eor	r2, r2, r4
   1bb18:	add	r4, ip, r4
   1bb1c:	add	r2, r7, r2
   1bb20:	add	r2, r2, r1
   1bb24:	movw	r1, #17939	; 0x4613
   1bb28:	add	r7, r3, r2, ror #20
   1bb2c:	eor	r2, r3, r5
   1bb30:	movt	r1, #43056	; 0xa830
   1bb34:	and	r2, r7, r2
   1bb38:	eor	r2, r2, r5
   1bb3c:	add	r5, r0, r5
   1bb40:	ldr	r0, [sl, #32]
   1bb44:	add	r2, r4, r2
   1bb48:	add	r2, r2, r1
   1bb4c:	add	r4, r7, r2, ror #15
   1bb50:	eor	r2, r7, r3
   1bb54:	and	r2, r4, r2
   1bb58:	str	r0, [sp, #40]	; 0x28
   1bb5c:	eor	r1, r2, r3
   1bb60:	add	r3, r0, r3
   1bb64:	ldr	r0, [sl, #40]	; 0x28
   1bb68:	ldr	r2, [sl, #44]	; 0x2c
   1bb6c:	add	r1, r5, r1
   1bb70:	eor	r5, r4, r7
   1bb74:	add	r1, r1, r6
   1bb78:	movw	r6, #39128	; 0x98d8
   1bb7c:	add	r1, r4, r1, ror #10
   1bb80:	movt	r6, #27008	; 0x6980
   1bb84:	and	r5, r1, r5
   1bb88:	str	r2, [fp, #-48]	; 0xffffffd0
   1bb8c:	str	r0, [sp, #52]	; 0x34
   1bb90:	eor	lr, r5, r7
   1bb94:	movw	r5, #63407	; 0xf7af
   1bb98:	add	r7, r8, r7
   1bb9c:	add	r3, r3, lr
   1bba0:	movt	r5, #35652	; 0x8b44
   1bba4:	add	r3, r3, r6
   1bba8:	add	lr, r1, r3, ror #25
   1bbac:	eor	r3, r1, r4
   1bbb0:	and	r3, lr, r3
   1bbb4:	eor	r3, r3, r4
   1bbb8:	add	r4, r0, r4
   1bbbc:	add	r3, r7, r3
   1bbc0:	add	r3, r3, r5
   1bbc4:	add	r7, lr, r3, ror #20
   1bbc8:	eor	r3, lr, r1
   1bbcc:	and	r3, r7, r3
   1bbd0:	eor	r5, r7, lr
   1bbd4:	eor	r9, r3, r1
   1bbd8:	movw	r3, #42063	; 0xa44f
   1bbdc:	add	r1, r2, r1
   1bbe0:	add	r4, r4, r9
   1bbe4:	sub	r4, r4, r3
   1bbe8:	movw	r3, #55230	; 0xd7be
   1bbec:	add	r4, r7, r4, ror #15
   1bbf0:	movt	r3, #35164	; 0x895c
   1bbf4:	and	r5, r4, r5
   1bbf8:	eor	r5, r5, lr
   1bbfc:	add	r1, r1, r5
   1bc00:	add	r1, r1, r3
   1bc04:	ldr	r3, [sl, #48]	; 0x30
   1bc08:	add	r5, r4, r1, ror #10
   1bc0c:	eor	r1, r4, r7
   1bc10:	and	r1, r5, r1
   1bc14:	eor	r1, r1, r7
   1bc18:	add	r6, r3, lr
   1bc1c:	str	r3, [sp, #56]	; 0x38
   1bc20:	movw	r3, #4386	; 0x1122
   1bc24:	add	r1, r6, r1
   1bc28:	movt	r3, #27536	; 0x6b90
   1bc2c:	add	r1, r1, r3
   1bc30:	ldr	r3, [sl, #56]	; 0x38
   1bc34:	add	r6, r5, r1, ror #25
   1bc38:	eor	r1, r5, r4
   1bc3c:	and	r1, r6, r1
   1bc40:	eor	lr, r1, r4
   1bc44:	ldr	r1, [sl, #52]	; 0x34
   1bc48:	add	r4, r3, r4
   1bc4c:	mov	r9, r3
   1bc50:	str	r3, [sp, #8]
   1bc54:	movw	r3, #17294	; 0x438e
   1bc58:	movt	r3, #42617	; 0xa679
   1bc5c:	add	r7, r1, r7
   1bc60:	str	r1, [sp, #36]	; 0x24
   1bc64:	movw	r1, #29075	; 0x7193
   1bc68:	add	r7, r7, lr
   1bc6c:	movt	r1, #64920	; 0xfd98
   1bc70:	add	r7, r7, r1
   1bc74:	eor	r1, r6, r5
   1bc78:	add	r7, r6, r7, ror #20
   1bc7c:	and	r1, r7, r1
   1bc80:	eor	r1, r1, r5
   1bc84:	add	r1, r4, r1
   1bc88:	eor	r4, r7, r6
   1bc8c:	add	r1, r1, r3
   1bc90:	ldr	r3, [sl, #60]	; 0x3c
   1bc94:	add	sl, sl, #64	; 0x40
   1bc98:	add	r1, r7, r1, ror #15
   1bc9c:	and	r4, r1, r4
   1bca0:	eor	r4, r4, r6
   1bca4:	add	r5, r3, r5
   1bca8:	mov	lr, r3
   1bcac:	str	r3, [sp, #12]
   1bcb0:	movw	r3, #2081	; 0x821
   1bcb4:	add	r4, r5, r4
   1bcb8:	movt	r3, #18868	; 0x49b4
   1bcbc:	add	r4, r4, r3
   1bcc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bcc4:	add	r4, r1, r4, ror #10
   1bcc8:	eor	r5, r4, r1
   1bccc:	and	r5, r5, r7
   1bcd0:	add	r7, ip, r7
   1bcd4:	ldr	ip, [sp, #32]
   1bcd8:	add	r6, r3, r6
   1bcdc:	eor	r5, r5, r1
   1bce0:	movw	r3, #9570	; 0x2562
   1bce4:	add	r5, r6, r5
   1bce8:	movt	r3, #63006	; 0xf61e
   1bcec:	add	r5, r5, r3
   1bcf0:	movw	r3, #45888	; 0xb340
   1bcf4:	add	r5, r4, r5, ror #27
   1bcf8:	movt	r3, #49216	; 0xc040
   1bcfc:	eor	r6, r5, r4
   1bd00:	and	r6, r6, r1
   1bd04:	add	r1, r2, r1
   1bd08:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1bd0c:	eor	r6, r6, r4
   1bd10:	add	r6, r7, r6
   1bd14:	add	r6, r6, r3
   1bd18:	movw	r3, #23121	; 0x5a51
   1bd1c:	add	r6, r5, r6, ror #23
   1bd20:	movt	r3, #9822	; 0x265e
   1bd24:	eor	r7, r6, r5
   1bd28:	and	r7, r7, r4
   1bd2c:	add	r4, r2, r4
   1bd30:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bd34:	eor	r7, r7, r5
   1bd38:	add	r1, r1, r7
   1bd3c:	add	r1, r1, r3
   1bd40:	movw	r3, #51114	; 0xc7aa
   1bd44:	add	r1, r6, r1, ror #18
   1bd48:	movt	r3, #59830	; 0xe9b6
   1bd4c:	eor	r7, r1, r6
   1bd50:	and	r7, r7, r5
   1bd54:	add	r5, ip, r5
   1bd58:	eor	r7, r7, r6
   1bd5c:	add	r4, r4, r7
   1bd60:	add	r4, r4, r3
   1bd64:	movw	r3, #4189	; 0x105d
   1bd68:	add	r4, r1, r4, ror #12
   1bd6c:	movt	r3, #54831	; 0xd62f
   1bd70:	eor	r7, r4, r1
   1bd74:	and	r7, r7, r6
   1bd78:	add	r6, r0, r6
   1bd7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1bd80:	eor	r7, r7, r1
   1bd84:	add	r5, r5, r7
   1bd88:	add	r5, r5, r3
   1bd8c:	movw	r3, #5203	; 0x1453
   1bd90:	add	r5, r4, r5, ror #27
   1bd94:	movt	r3, #580	; 0x244
   1bd98:	eor	r7, r5, r4
   1bd9c:	and	r7, r7, r1
   1bda0:	add	r1, lr, r1
   1bda4:	ldr	lr, [sp, #44]	; 0x2c
   1bda8:	eor	r7, r7, r4
   1bdac:	add	r6, r6, r7
   1bdb0:	add	r6, r6, r3
   1bdb4:	movw	r3, #59009	; 0xe681
   1bdb8:	add	r6, r5, r6, ror #23
   1bdbc:	movt	r3, #55457	; 0xd8a1
   1bdc0:	eor	r7, r6, r5
   1bdc4:	and	r7, r7, r4
   1bdc8:	add	r4, lr, r4
   1bdcc:	eor	r7, r7, r5
   1bdd0:	add	r1, r1, r7
   1bdd4:	add	r1, r1, r3
   1bdd8:	movw	r3, #64456	; 0xfbc8
   1bddc:	add	r1, r6, r1, ror #18
   1bde0:	movt	r3, #59347	; 0xe7d3
   1bde4:	eor	r7, r1, r6
   1bde8:	and	r7, r7, r5
   1bdec:	add	r5, r8, r5
   1bdf0:	ldr	r8, [sp, #36]	; 0x24
   1bdf4:	eor	r7, r7, r6
   1bdf8:	add	r4, r4, r7
   1bdfc:	add	r4, r4, r3
   1be00:	movw	r3, #52710	; 0xcde6
   1be04:	add	r4, r1, r4, ror #12
   1be08:	movt	r3, #8673	; 0x21e1
   1be0c:	eor	r7, r4, r1
   1be10:	and	r7, r7, r6
   1be14:	add	r6, r9, r6
   1be18:	ldr	r9, [sp, #56]	; 0x38
   1be1c:	eor	r7, r7, r1
   1be20:	add	r5, r5, r7
   1be24:	add	r5, r5, r3
   1be28:	movw	r3, #2006	; 0x7d6
   1be2c:	add	r5, r4, r5, ror #27
   1be30:	movt	r3, #49975	; 0xc337
   1be34:	eor	r7, r5, r4
   1be38:	and	r7, r7, r1
   1be3c:	add	r1, r0, r1
   1be40:	ldr	r0, [sp, #40]	; 0x28
   1be44:	eor	r7, r7, r4
   1be48:	add	r6, r6, r7
   1be4c:	add	r6, r6, r3
   1be50:	movw	r3, #3463	; 0xd87
   1be54:	add	r6, r5, r6, ror #23
   1be58:	movt	r3, #62677	; 0xf4d5
   1be5c:	eor	r7, r6, r5
   1be60:	and	r7, r7, r4
   1be64:	add	r4, r0, r4
   1be68:	eor	r7, r7, r5
   1be6c:	add	r1, r1, r7
   1be70:	add	r1, r1, r3
   1be74:	movw	r3, #5357	; 0x14ed
   1be78:	add	r1, r6, r1, ror #18
   1be7c:	movt	r3, #17754	; 0x455a
   1be80:	eor	r7, r1, r6
   1be84:	and	r7, r7, r5
   1be88:	add	r5, r8, r5
   1be8c:	eor	r7, r7, r6
   1be90:	add	r4, r4, r7
   1be94:	add	r4, r4, r3
   1be98:	movw	r3, #59653	; 0xe905
   1be9c:	add	r4, r1, r4, ror #12
   1bea0:	movt	r3, #43491	; 0xa9e3
   1bea4:	eor	r7, r4, r1
   1bea8:	and	r7, r7, r6
   1beac:	add	r6, r2, r6
   1beb0:	ldr	r2, [sp, #16]
   1beb4:	eor	r7, r7, r1
   1beb8:	add	r5, r5, r7
   1bebc:	add	r5, r5, r3
   1bec0:	movw	r3, #41976	; 0xa3f8
   1bec4:	add	r5, r4, r5, ror #27
   1bec8:	movt	r3, #64751	; 0xfcef
   1becc:	eor	r7, r5, r4
   1bed0:	and	r7, r7, r1
   1bed4:	add	r1, r2, r1
   1bed8:	eor	r7, r7, r4
   1bedc:	add	r6, r6, r7
   1bee0:	add	r6, r6, r3
   1bee4:	movw	r3, #729	; 0x2d9
   1bee8:	add	r6, r5, r6, ror #23
   1beec:	movt	r3, #26479	; 0x676f
   1bef0:	eor	r7, r6, r5
   1bef4:	and	r7, r7, r4
   1bef8:	add	r4, r9, r4
   1befc:	ldr	r9, [fp, #-52]	; 0xffffffcc
   1bf00:	eor	r7, r7, r5
   1bf04:	add	r1, r1, r7
   1bf08:	add	r1, r1, r3
   1bf0c:	add	r1, r6, r1, ror #18
   1bf10:	eor	r7, r1, r6
   1bf14:	and	r3, r7, r5
   1bf18:	add	r5, ip, r5
   1bf1c:	ldr	ip, [sp, #8]
   1bf20:	eor	r3, r3, r6
   1bf24:	add	r6, r0, r6
   1bf28:	ldr	r0, [sp, #48]	; 0x30
   1bf2c:	add	r3, r4, r3
   1bf30:	movw	r4, #19594	; 0x4c8a
   1bf34:	movt	r4, #36138	; 0x8d2a
   1bf38:	add	r3, r3, r4
   1bf3c:	add	r3, r1, r3, ror #12
   1bf40:	eor	r4, r7, r3
   1bf44:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1bf48:	add	r4, r5, r4
   1bf4c:	movw	r5, #14658	; 0x3942
   1bf50:	movt	r5, #65530	; 0xfffa
   1bf54:	add	r4, r4, r5
   1bf58:	eor	r5, r3, r1
   1bf5c:	add	r4, r3, r4, ror #28
   1bf60:	add	r1, r7, r1
   1bf64:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1bf68:	eor	r5, r5, r4
   1bf6c:	add	r5, r6, r5
   1bf70:	movw	r6, #63105	; 0xf681
   1bf74:	movt	r6, #34673	; 0x8771
   1bf78:	add	r5, r5, r6
   1bf7c:	eor	r6, r4, r3
   1bf80:	add	r3, ip, r3
   1bf84:	add	r5, r4, r5, ror #21
   1bf88:	eor	r6, r6, r5
   1bf8c:	add	r1, r1, r6
   1bf90:	movw	r6, #24866	; 0x6122
   1bf94:	movt	r6, #28061	; 0x6d9d
   1bf98:	add	r1, r1, r6
   1bf9c:	eor	r6, r5, r4
   1bfa0:	add	r4, r7, r4
   1bfa4:	ldr	r7, [sp, #52]	; 0x34
   1bfa8:	add	r1, r5, r1, ror #16
   1bfac:	eor	r6, r6, r1
   1bfb0:	add	r3, r3, r6
   1bfb4:	movw	r6, #14348	; 0x380c
   1bfb8:	movt	r6, #64997	; 0xfde5
   1bfbc:	add	r3, r3, r6
   1bfc0:	eor	r6, r1, r5
   1bfc4:	add	r5, lr, r5
   1bfc8:	ldr	lr, [sp, #12]
   1bfcc:	add	r3, r1, r3, ror #9
   1bfd0:	eor	r6, r6, r3
   1bfd4:	add	r4, r4, r6
   1bfd8:	movw	r6, #59972	; 0xea44
   1bfdc:	movt	r6, #42174	; 0xa4be
   1bfe0:	add	r4, r4, r6
   1bfe4:	eor	r6, r3, r1
   1bfe8:	add	r1, r2, r1
   1bfec:	add	r4, r3, r4, ror #28
   1bff0:	eor	r6, r6, r4
   1bff4:	add	r5, r5, r6
   1bff8:	movw	r6, #53161	; 0xcfa9
   1bffc:	movt	r6, #19422	; 0x4bde
   1c000:	add	r5, r5, r6
   1c004:	eor	r6, r4, r3
   1c008:	add	r3, r7, r3
   1c00c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c010:	add	r5, r4, r5, ror #21
   1c014:	eor	r6, r6, r5
   1c018:	add	r1, r1, r6
   1c01c:	movw	r6, #19296	; 0x4b60
   1c020:	movt	r6, #63163	; 0xf6bb
   1c024:	add	r1, r1, r6
   1c028:	eor	r6, r5, r4
   1c02c:	add	r4, r8, r4
   1c030:	ldr	r8, [fp, #-44]	; 0xffffffd4
   1c034:	add	r1, r5, r1, ror #16
   1c038:	eor	r6, r6, r1
   1c03c:	add	r3, r3, r6
   1c040:	movw	r6, #48240	; 0xbc70
   1c044:	movt	r6, #48831	; 0xbebf
   1c048:	add	r3, r3, r6
   1c04c:	eor	r6, r1, r5
   1c050:	add	r5, r8, r5
   1c054:	add	r3, r1, r3, ror #9
   1c058:	eor	r6, r6, r3
   1c05c:	add	r4, r4, r6
   1c060:	movw	r6, #32454	; 0x7ec6
   1c064:	movt	r6, #10395	; 0x289b
   1c068:	add	r4, r4, r6
   1c06c:	eor	r6, r3, r1
   1c070:	add	r1, r9, r1
   1c074:	add	r4, r3, r4, ror #28
   1c078:	eor	r6, r6, r4
   1c07c:	add	r5, r5, r6
   1c080:	movw	r6, #10234	; 0x27fa
   1c084:	movt	r6, #60065	; 0xeaa1
   1c088:	add	r5, r5, r6
   1c08c:	eor	r6, r4, r3
   1c090:	add	r3, r0, r3
   1c094:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c098:	add	r5, r4, r5, ror #21
   1c09c:	eor	r6, r6, r5
   1c0a0:	add	r1, r1, r6
   1c0a4:	movw	r6, #12421	; 0x3085
   1c0a8:	movt	r6, #54511	; 0xd4ef
   1c0ac:	add	r1, r1, r6
   1c0b0:	eor	r6, r5, r4
   1c0b4:	add	r4, r0, r4
   1c0b8:	ldr	r0, [sp, #56]	; 0x38
   1c0bc:	add	r1, r5, r1, ror #16
   1c0c0:	eor	r6, r6, r1
   1c0c4:	add	r3, r3, r6
   1c0c8:	movw	r6, #7429	; 0x1d05
   1c0cc:	movt	r6, #1160	; 0x488
   1c0d0:	add	r3, r3, r6
   1c0d4:	eor	r6, r1, r5
   1c0d8:	add	r5, r0, r5
   1c0dc:	add	r3, r1, r3, ror #9
   1c0e0:	eor	r6, r6, r3
   1c0e4:	add	r4, r4, r6
   1c0e8:	movw	r6, #53305	; 0xd039
   1c0ec:	movt	r6, #55764	; 0xd9d4
   1c0f0:	add	r4, r4, r6
   1c0f4:	eor	r6, r3, r1
   1c0f8:	add	r1, lr, r1
   1c0fc:	add	r4, r3, r4, ror #28
   1c100:	eor	r6, r6, r4
   1c104:	add	r5, r5, r6
   1c108:	movw	r6, #39397	; 0x99e5
   1c10c:	movt	r6, #59099	; 0xe6db
   1c110:	add	r5, r5, r6
   1c114:	eor	r6, r4, r3
   1c118:	add	r3, r7, r3
   1c11c:	ldr	r7, [sp, #32]
   1c120:	add	r5, r4, r5, ror #21
   1c124:	eor	r6, r6, r5
   1c128:	add	r2, r2, r5
   1c12c:	add	r1, r1, r6
   1c130:	movw	r6, #31992	; 0x7cf8
   1c134:	movt	r6, #8098	; 0x1fa2
   1c138:	add	r1, r1, r6
   1c13c:	eor	r6, r5, r4
   1c140:	add	r4, r8, r4
   1c144:	add	r1, r5, r1, ror #16
   1c148:	eor	r6, r6, r1
   1c14c:	add	r3, r3, r6
   1c150:	movw	r6, #22117	; 0x5665
   1c154:	movt	r6, #50348	; 0xc4ac
   1c158:	add	r3, r3, r6
   1c15c:	mvn	r6, r5
   1c160:	movw	r5, #65431	; 0xff97
   1c164:	add	r3, r1, r3, ror #9
   1c168:	movt	r5, #17194	; 0x432a
   1c16c:	orr	r6, r3, r6
   1c170:	eor	r6, r6, r1
   1c174:	add	r4, r4, r6
   1c178:	movw	r6, #8772	; 0x2244
   1c17c:	movt	r6, #62505	; 0xf429
   1c180:	add	r4, r4, r6
   1c184:	mvn	r6, r1
   1c188:	add	r1, ip, r1
   1c18c:	ldr	ip, [fp, #-40]	; 0xffffffd8
   1c190:	add	r4, r3, r4, ror #26
   1c194:	orr	r6, r4, r6
   1c198:	eor	r6, r6, r3
   1c19c:	add	r2, r2, r6
   1c1a0:	add	r2, r2, r5
   1c1a4:	mvn	r5, r3
   1c1a8:	add	r3, r7, r3
   1c1ac:	add	r2, r4, r2, ror #22
   1c1b0:	orr	r5, r2, r5
   1c1b4:	eor	r5, r5, r4
   1c1b8:	add	r1, r1, r5
   1c1bc:	movw	r5, #9127	; 0x23a7
   1c1c0:	movt	r5, #43924	; 0xab94
   1c1c4:	add	r1, r1, r5
   1c1c8:	mvn	r5, r4
   1c1cc:	add	r4, r0, r4
   1c1d0:	ldr	r0, [sp, #52]	; 0x34
   1c1d4:	add	r1, r2, r1, ror #17
   1c1d8:	orr	r5, r1, r5
   1c1dc:	eor	r5, r5, r2
   1c1e0:	add	r3, r3, r5
   1c1e4:	movw	r5, #41017	; 0xa039
   1c1e8:	movt	r5, #64659	; 0xfc93
   1c1ec:	add	r3, r3, r5
   1c1f0:	mvn	r5, r2
   1c1f4:	add	r2, r9, r2
   1c1f8:	add	r3, r1, r3, ror #11
   1c1fc:	orr	r5, r3, r5
   1c200:	eor	r5, r5, r1
   1c204:	add	r4, r4, r5
   1c208:	movw	r5, #22979	; 0x59c3
   1c20c:	movt	r5, #25947	; 0x655b
   1c210:	add	r4, r4, r5
   1c214:	mvn	r5, r1
   1c218:	add	r1, r0, r1
   1c21c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c220:	add	r4, r3, r4, ror #26
   1c224:	orr	r5, r4, r5
   1c228:	eor	r5, r5, r3
   1c22c:	add	r2, r2, r5
   1c230:	movw	r5, #52370	; 0xcc92
   1c234:	movt	r5, #36620	; 0x8f0c
   1c238:	add	r2, r2, r5
   1c23c:	mvn	r5, r3
   1c240:	add	r3, r0, r3
   1c244:	ldr	r0, [sp, #40]	; 0x28
   1c248:	add	r2, r4, r2, ror #22
   1c24c:	orr	r5, r2, r5
   1c250:	eor	r5, r5, r4
   1c254:	add	r1, r1, r5
   1c258:	movw	r5, #62589	; 0xf47d
   1c25c:	movt	r5, #65519	; 0xffef
   1c260:	add	r1, r1, r5
   1c264:	mvn	r5, r4
   1c268:	add	r4, r0, r4
   1c26c:	ldr	r0, [sp, #48]	; 0x30
   1c270:	add	r1, r2, r1, ror #17
   1c274:	orr	r5, r1, r5
   1c278:	eor	r5, r5, r2
   1c27c:	add	r3, r3, r5
   1c280:	movw	r5, #24017	; 0x5dd1
   1c284:	movt	r5, #34180	; 0x8584
   1c288:	add	r3, r3, r5
   1c28c:	mvn	r5, r2
   1c290:	add	r2, lr, r2
   1c294:	ldr	lr, [sp, #4]
   1c298:	add	r3, r1, r3, ror #11
   1c29c:	orr	r5, r3, r5
   1c2a0:	mvn	r7, r3
   1c2a4:	eor	r5, r5, r1
   1c2a8:	add	r4, r4, r5
   1c2ac:	movw	r5, #32335	; 0x7e4f
   1c2b0:	cmp	sl, lr
   1c2b4:	movt	r5, #28584	; 0x6fa8
   1c2b8:	add	r4, r4, r5
   1c2bc:	mvn	r5, r1
   1c2c0:	add	r1, r0, r1
   1c2c4:	ldr	r0, [sp, #36]	; 0x24
   1c2c8:	add	r4, r3, r4, ror #26
   1c2cc:	orr	r5, r4, r5
   1c2d0:	eor	r5, r5, r3
   1c2d4:	add	r2, r2, r5
   1c2d8:	movw	r5, #59104	; 0xe6e0
   1c2dc:	add	r3, r0, r3
   1c2e0:	ldr	r0, [sp, #44]	; 0x2c
   1c2e4:	movt	r5, #65068	; 0xfe2c
   1c2e8:	add	r2, r2, r5
   1c2ec:	movw	r5, #17172	; 0x4314
   1c2f0:	add	r2, r4, r2, ror #22
   1c2f4:	movt	r5, #41729	; 0xa301
   1c2f8:	orr	r7, r2, r7
   1c2fc:	add	r6, r0, r4
   1c300:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c304:	eor	r7, r7, r4
   1c308:	add	r1, r1, r7
   1c30c:	mvn	r7, r4
   1c310:	movw	r4, #32386	; 0x7e82
   1c314:	add	r1, r1, r5
   1c318:	movw	r5, #4513	; 0x11a1
   1c31c:	movt	r4, #63315	; 0xf753
   1c320:	add	r1, r2, r1, ror #17
   1c324:	movt	r5, #19976	; 0x4e08
   1c328:	orr	r7, r1, r7
   1c32c:	eor	r7, r7, r2
   1c330:	add	r3, r3, r7
   1c334:	mvn	r7, r2
   1c338:	add	r2, r0, r2
   1c33c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c340:	add	r3, r3, r5
   1c344:	add	r3, r1, r3, ror #11
   1c348:	orr	r7, r3, r7
   1c34c:	eor	r7, r7, r1
   1c350:	add	r7, r6, r7
   1c354:	mvn	r6, r1
   1c358:	add	r1, r0, r1
   1c35c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c360:	add	r7, r7, r4
   1c364:	movw	r4, #62005	; 0xf235
   1c368:	add	r7, r3, r7, ror #26
   1c36c:	movt	r4, #48442	; 0xbd3a
   1c370:	orr	r6, r7, r6
   1c374:	mvn	r5, r7
   1c378:	eor	r6, r6, r3
   1c37c:	add	r2, r2, r6
   1c380:	mvn	r6, r3
   1c384:	add	r3, r0, r3
   1c388:	add	r2, r2, r4
   1c38c:	movw	r4, #53947	; 0xd2bb
   1c390:	add	r2, r7, r2, ror #22
   1c394:	movt	r4, #10967	; 0x2ad7
   1c398:	orr	r6, r2, r6
   1c39c:	eor	r6, r6, r7
   1c3a0:	add	r1, r1, r6
   1c3a4:	add	r1, r1, r4
   1c3a8:	ldr	r4, [sp, #20]
   1c3ac:	add	r1, r2, r1, ror #17
   1c3b0:	orr	r5, r1, r5
   1c3b4:	add	ip, r1, ip
   1c3b8:	eor	r5, r5, r2
   1c3bc:	add	r6, r1, r4
   1c3c0:	movw	r4, #54161	; 0xd391
   1c3c4:	add	r3, r3, r5
   1c3c8:	ldr	r1, [sp, #28]
   1c3cc:	movt	r4, #60294	; 0xeb86
   1c3d0:	add	r3, r3, r4
   1c3d4:	add	r4, r6, r3, ror #11
   1c3d8:	ldr	r3, [sp, #24]
   1c3dc:	add	r1, r2, r1
   1c3e0:	add	r3, r7, r3
   1c3e4:	bcc	1b9e0 <__assert_fail@plt+0x96a8>
   1c3e8:	ldr	r0, [sp]
   1c3ec:	stm	r0, {r3, r4, ip}
   1c3f0:	str	r1, [r0, #12]
   1c3f4:	sub	sp, fp, #28
   1c3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3fc:	nop	{0}
   1c400:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c404:	add	fp, sp, #24
   1c408:	sub	sp, sp, #160	; 0xa0
   1c40c:	mov	r8, r2
   1c410:	add	r2, pc, #184	; 0xb8
   1c414:	add	r5, sp, #4
   1c418:	vld1.64	{d16-d17}, [r2 :128]
   1c41c:	mov	r2, #20
   1c420:	mov	r3, r5
   1c424:	vst1.32	{d16-d17}, [r3], r2
   1c428:	mov	r2, #0
   1c42c:	str	r2, [r3]
   1c430:	str	r2, [sp, #20]
   1c434:	str	r2, [sp, #28]
   1c438:	mov	r2, r5
   1c43c:	bl	1c4e0 <__assert_fail@plt+0xa1a8>
   1c440:	ldr	r1, [sp, #28]
   1c444:	ldr	r2, [sp, #20]
   1c448:	mov	r7, #32
   1c44c:	add	r6, r5, #28
   1c450:	add	r0, r2, r1
   1c454:	cmp	r1, #56	; 0x38
   1c458:	movwcc	r7, #16
   1c45c:	str	r0, [sp, #20]
   1c460:	cmp	r0, r2
   1c464:	lsl	r3, r0, #3
   1c468:	ldrcc	r2, [sp, #24]
   1c46c:	addcc	r2, r2, #1
   1c470:	strcc	r2, [sp, #24]
   1c474:	mvn	r2, #7
   1c478:	add	r2, r2, r7, lsl #2
   1c47c:	str	r3, [r6, r2]
   1c480:	add	r3, r6, r7, lsl #2
   1c484:	sub	r2, r2, r1
   1c488:	ldr	r4, [sp, #24]
   1c48c:	lsl	r4, r4, #3
   1c490:	orr	r0, r4, r0, lsr #29
   1c494:	str	r0, [r3, #-4]
   1c498:	add	r0, r6, r1
   1c49c:	movw	r1, #27840	; 0x6cc0
   1c4a0:	movt	r1, #2
   1c4a4:	bl	11ec4 <memcpy@plt>
   1c4a8:	lsl	r1, r7, #2
   1c4ac:	mov	r0, r6
   1c4b0:	mov	r2, r5
   1c4b4:	bl	1b998 <__assert_fail@plt+0x9660>
   1c4b8:	vld1.32	{d16-d17}, [r5]
   1c4bc:	mov	r0, r8
   1c4c0:	vst1.8	{d16-d17}, [r8]
   1c4c4:	sub	sp, fp, #24
   1c4c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c4cc:	nop	{0}
   1c4d0:	strbvs	r2, [r5, -r1, lsl #6]
   1c4d4:	svc	0x00cdab89
   1c4d8:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1c4dc:	eorsne	r5, r2, r6, ror r4
   1c4e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4e4:	add	fp, sp, #28
   1c4e8:	sub	sp, sp, #20
   1c4ec:	ldr	r6, [r2, #24]
   1c4f0:	mov	r4, r2
   1c4f4:	mov	r5, r1
   1c4f8:	mov	r8, r0
   1c4fc:	cmp	r6, #0
   1c500:	beq	1c570 <__assert_fail@plt+0xa238>
   1c504:	rsb	r7, r6, #128	; 0x80
   1c508:	add	r9, r4, #28
   1c50c:	mov	r1, r8
   1c510:	cmp	r7, r5
   1c514:	add	r0, r9, r6
   1c518:	movhi	r7, r5
   1c51c:	mov	r2, r7
   1c520:	bl	11ec4 <memcpy@plt>
   1c524:	ldr	r0, [r4, #24]
   1c528:	add	r0, r0, r7
   1c52c:	cmp	r0, #65	; 0x41
   1c530:	str	r0, [r4, #24]
   1c534:	bcc	1c568 <__assert_fail@plt+0xa230>
   1c538:	bic	r1, r0, #63	; 0x3f
   1c53c:	mov	r0, r9
   1c540:	mov	r2, r4
   1c544:	bl	1b998 <__assert_fail@plt+0x9660>
   1c548:	ldr	r0, [r4, #24]
   1c54c:	and	r2, r0, #63	; 0x3f
   1c550:	add	r0, r7, r6
   1c554:	bic	r0, r0, #63	; 0x3f
   1c558:	str	r2, [r4, #24]
   1c55c:	add	r1, r9, r0
   1c560:	mov	r0, r9
   1c564:	bl	11ec4 <memcpy@plt>
   1c568:	sub	r5, r5, r7
   1c56c:	add	r8, r8, r7
   1c570:	cmp	r5, #64	; 0x40
   1c574:	bcc	1c64c <__assert_fail@plt+0xa314>
   1c578:	tst	r8, #3
   1c57c:	beq	1c630 <__assert_fail@plt+0xa2f8>
   1c580:	cmp	r5, #65	; 0x41
   1c584:	bcc	1c65c <__assert_fail@plt+0xa324>
   1c588:	sub	r0, r5, #64	; 0x40
   1c58c:	add	r7, r4, #28
   1c590:	mov	sl, #48	; 0x30
   1c594:	str	r0, [sp, #12]
   1c598:	sub	r0, r5, #65	; 0x41
   1c59c:	add	r6, r7, #32
   1c5a0:	bic	r0, r0, #63	; 0x3f
   1c5a4:	str	r0, [sp, #8]
   1c5a8:	add	r0, r0, #64	; 0x40
   1c5ac:	str	r0, [sp, #4]
   1c5b0:	mov	r0, r8
   1c5b4:	add	r8, r7, #16
   1c5b8:	mov	r9, r0
   1c5bc:	str	r0, [sp, #16]
   1c5c0:	mov	r1, #64	; 0x40
   1c5c4:	add	r2, r0, #48	; 0x30
   1c5c8:	vld1.8	{d16-d17}, [r9], r1
   1c5cc:	add	r1, r0, #32
   1c5d0:	vld1.8	{d18-d19}, [r2]
   1c5d4:	add	r0, r0, #16
   1c5d8:	mov	r2, r4
   1c5dc:	vld1.8	{d20-d21}, [r1]
   1c5e0:	mov	r1, r7
   1c5e4:	vst1.8	{d16-d17}, [r1], sl
   1c5e8:	vld1.8	{d16-d17}, [r0]
   1c5ec:	vst1.8	{d18-d19}, [r1]
   1c5f0:	mov	r0, r7
   1c5f4:	mov	r1, #64	; 0x40
   1c5f8:	vst1.8	{d20-d21}, [r6]
   1c5fc:	vst1.8	{d16-d17}, [r8]
   1c600:	bl	1b998 <__assert_fail@plt+0x9660>
   1c604:	sub	r5, r5, #64	; 0x40
   1c608:	mov	r0, r9
   1c60c:	cmp	r5, #64	; 0x40
   1c610:	bhi	1c5c0 <__assert_fail@plt+0xa288>
   1c614:	ldr	r0, [sp, #12]
   1c618:	ldr	r1, [sp, #8]
   1c61c:	ldr	r8, [sp, #16]
   1c620:	sub	r5, r0, r1
   1c624:	ldr	r0, [sp, #4]
   1c628:	add	r8, r8, r0
   1c62c:	b	1c660 <__assert_fail@plt+0xa328>
   1c630:	bic	r6, r5, #63	; 0x3f
   1c634:	mov	r0, r8
   1c638:	mov	r2, r4
   1c63c:	mov	r1, r6
   1c640:	bl	1b998 <__assert_fail@plt+0x9660>
   1c644:	add	r8, r8, r6
   1c648:	and	r5, r5, #63	; 0x3f
   1c64c:	cmp	r5, #0
   1c650:	bne	1c660 <__assert_fail@plt+0xa328>
   1c654:	sub	sp, fp, #28
   1c658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c65c:	mov	r5, #64	; 0x40
   1c660:	ldr	r7, [r4, #24]
   1c664:	add	r6, r4, #28
   1c668:	mov	r1, r8
   1c66c:	mov	r2, r5
   1c670:	add	r0, r6, r7
   1c674:	bl	11ec4 <memcpy@plt>
   1c678:	add	r5, r7, r5
   1c67c:	cmp	r5, #64	; 0x40
   1c680:	bcc	1c6a8 <__assert_fail@plt+0xa370>
   1c684:	mov	r0, r6
   1c688:	mov	r1, #64	; 0x40
   1c68c:	mov	r2, r4
   1c690:	bl	1b998 <__assert_fail@plt+0x9660>
   1c694:	sub	r5, r5, #64	; 0x40
   1c698:	add	r1, r4, #92	; 0x5c
   1c69c:	mov	r0, r6
   1c6a0:	mov	r2, r5
   1c6a4:	bl	11ec4 <memcpy@plt>
   1c6a8:	str	r5, [r4, #24]
   1c6ac:	sub	sp, fp, #28
   1c6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6b4:	b	11e40 <posix_fadvise64@plt>
   1c6b8:	cmp	r0, #0
   1c6bc:	bxeq	lr
   1c6c0:	push	{r4, sl, fp, lr}
   1c6c4:	add	fp, sp, #8
   1c6c8:	sub	sp, sp, #16
   1c6cc:	mov	r4, r1
   1c6d0:	bl	121b8 <fileno@plt>
   1c6d4:	mov	r1, #0
   1c6d8:	mov	r2, #0
   1c6dc:	mov	r3, #0
   1c6e0:	str	r1, [sp]
   1c6e4:	stmib	sp, {r1, r4}
   1c6e8:	bl	11e40 <posix_fadvise64@plt>
   1c6ec:	sub	sp, fp, #8
   1c6f0:	pop	{r4, sl, fp, pc}
   1c6f4:	push	{r4, r5, r6, sl, fp, lr}
   1c6f8:	add	fp, sp, #16
   1c6fc:	sub	sp, sp, #8
   1c700:	mov	r4, r0
   1c704:	bl	121b8 <fileno@plt>
   1c708:	cmn	r0, #1
   1c70c:	ble	1c780 <__assert_fail@plt+0xa448>
   1c710:	mov	r0, r4
   1c714:	bl	120ec <__freading@plt>
   1c718:	cmp	r0, #0
   1c71c:	beq	1c748 <__assert_fail@plt+0xa410>
   1c720:	mov	r0, r4
   1c724:	bl	121b8 <fileno@plt>
   1c728:	mov	r1, #1
   1c72c:	mov	r2, #0
   1c730:	mov	r3, #0
   1c734:	str	r1, [sp]
   1c738:	bl	12020 <lseek64@plt>
   1c73c:	and	r0, r0, r1
   1c740:	cmn	r0, #1
   1c744:	beq	1c780 <__assert_fail@plt+0xa448>
   1c748:	mov	r0, r4
   1c74c:	bl	1c790 <__assert_fail@plt+0xa458>
   1c750:	cmp	r0, #0
   1c754:	beq	1c780 <__assert_fail@plt+0xa448>
   1c758:	bl	12164 <__errno_location@plt>
   1c75c:	ldr	r6, [r0]
   1c760:	mov	r5, r0
   1c764:	mov	r0, r4
   1c768:	bl	121dc <fclose@plt>
   1c76c:	cmp	r6, #0
   1c770:	strne	r6, [r5]
   1c774:	mvnne	r0, #0
   1c778:	sub	sp, fp, #16
   1c77c:	pop	{r4, r5, r6, sl, fp, pc}
   1c780:	mov	r0, r4
   1c784:	sub	sp, fp, #16
   1c788:	pop	{r4, r5, r6, sl, fp, lr}
   1c78c:	b	121dc <fclose@plt>
   1c790:	push	{r4, sl, fp, lr}
   1c794:	add	fp, sp, #8
   1c798:	sub	sp, sp, #8
   1c79c:	mov	r4, r0
   1c7a0:	cmp	r0, #0
   1c7a4:	beq	1c7c0 <__assert_fail@plt+0xa488>
   1c7a8:	mov	r0, r4
   1c7ac:	bl	120ec <__freading@plt>
   1c7b0:	cmp	r0, #0
   1c7b4:	ldrbne	r0, [r4, #1]
   1c7b8:	tstne	r0, #1
   1c7bc:	bne	1c7d0 <__assert_fail@plt+0xa498>
   1c7c0:	mov	r0, r4
   1c7c4:	sub	sp, fp, #8
   1c7c8:	pop	{r4, sl, fp, lr}
   1c7cc:	b	11e64 <fflush@plt>
   1c7d0:	mov	r0, #1
   1c7d4:	mov	r2, #0
   1c7d8:	mov	r3, #0
   1c7dc:	str	r0, [sp]
   1c7e0:	mov	r0, r4
   1c7e4:	bl	1cca0 <__assert_fail@plt+0xa968>
   1c7e8:	b	1c7c0 <__assert_fail@plt+0xa488>
   1c7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7f0:	add	fp, sp, #28
   1c7f4:	sub	sp, sp, #12
   1c7f8:	mov	r8, r1
   1c7fc:	mov	r9, r0
   1c800:	bl	11e28 <strcmp@plt>
   1c804:	cmp	r0, #0
   1c808:	moveq	r0, #0
   1c80c:	subeq	sp, fp, #28
   1c810:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c814:	ldrb	r4, [r9]
   1c818:	cmp	r4, #0
   1c81c:	beq	1c8a0 <__assert_fail@plt+0xa568>
   1c820:	ldrb	r6, [r8]
   1c824:	cmp	r6, #0
   1c828:	beq	1cc50 <__assert_fail@plt+0xa918>
   1c82c:	mov	sl, r0
   1c830:	movw	r0, #27905	; 0x6d01
   1c834:	mov	r1, r9
   1c838:	movt	r0, #2
   1c83c:	bl	11e28 <strcmp@plt>
   1c840:	cmp	r0, #0
   1c844:	beq	1c8a0 <__assert_fail@plt+0xa568>
   1c848:	movw	r0, #27905	; 0x6d01
   1c84c:	mov	r1, r8
   1c850:	movt	r0, #2
   1c854:	bl	11e28 <strcmp@plt>
   1c858:	cmp	r0, #0
   1c85c:	beq	1cc50 <__assert_fail@plt+0xa918>
   1c860:	movw	r0, #27904	; 0x6d00
   1c864:	mov	r1, r9
   1c868:	movt	r0, #2
   1c86c:	bl	11e28 <strcmp@plt>
   1c870:	cmp	r0, #0
   1c874:	beq	1c8a0 <__assert_fail@plt+0xa568>
   1c878:	movw	r0, #27904	; 0x6d00
   1c87c:	mov	r1, r8
   1c880:	movt	r0, #2
   1c884:	bl	11e28 <strcmp@plt>
   1c888:	cmp	r0, #0
   1c88c:	beq	1cc50 <__assert_fail@plt+0xa918>
   1c890:	cmp	r4, #46	; 0x2e
   1c894:	bne	1c8ac <__assert_fail@plt+0xa574>
   1c898:	cmp	r6, #46	; 0x2e
   1c89c:	beq	1c8ac <__assert_fail@plt+0xa574>
   1c8a0:	mvn	r0, #0
   1c8a4:	sub	sp, fp, #28
   1c8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8ac:	cmp	r4, #46	; 0x2e
   1c8b0:	bne	1c8dc <__assert_fail@plt+0xa5a4>
   1c8b4:	mov	r4, #46	; 0x2e
   1c8b8:	cmp	r6, #46	; 0x2e
   1c8bc:	bne	1c8e4 <__assert_fail@plt+0xa5ac>
   1c8c0:	ldrb	r4, [r9, #1]!
   1c8c4:	add	r8, r8, #1
   1c8c8:	cmp	r4, #0
   1c8cc:	bne	1c8e4 <__assert_fail@plt+0xa5ac>
   1c8d0:	mov	r7, #0
   1c8d4:	mov	r6, r9
   1c8d8:	b	1c968 <__assert_fail@plt+0xa630>
   1c8dc:	cmp	r6, #46	; 0x2e
   1c8e0:	beq	1cc50 <__assert_fail@plt+0xa918>
   1c8e4:	mov	r1, #0
   1c8e8:	mvn	r5, #64	; 0x40
   1c8ec:	mov	r6, r9
   1c8f0:	mov	r7, #0
   1c8f4:	tst	r1, #1
   1c8f8:	beq	1c920 <__assert_fail@plt+0xa5e8>
   1c8fc:	uxtab	r0, r5, r4
   1c900:	mov	r1, #0
   1c904:	cmp	r0, #26
   1c908:	bcc	1c95c <__assert_fail@plt+0xa624>
   1c90c:	uxtb	r0, r4
   1c910:	sub	r2, r0, #97	; 0x61
   1c914:	cmp	r2, #26
   1c918:	bcc	1c95c <__assert_fail@plt+0xa624>
   1c91c:	b	1c950 <__assert_fail@plt+0xa618>
   1c920:	uxtb	r0, r4
   1c924:	cmp	r0, #46	; 0x2e
   1c928:	bne	1c93c <__assert_fail@plt+0xa604>
   1c92c:	cmp	r7, #0
   1c930:	mov	r1, #1
   1c934:	moveq	r7, r6
   1c938:	b	1c95c <__assert_fail@plt+0xa624>
   1c93c:	bl	2388c <__assert_fail@plt+0x11554>
   1c940:	mov	r1, #0
   1c944:	cmp	r0, #0
   1c948:	bne	1c95c <__assert_fail@plt+0xa624>
   1c94c:	ldrb	r0, [r6]
   1c950:	mov	r1, #0
   1c954:	cmp	r0, #126	; 0x7e
   1c958:	movne	r7, r1
   1c95c:	ldrb	r4, [r6, #1]!
   1c960:	cmp	r4, #0
   1c964:	bne	1c8f4 <__assert_fail@plt+0xa5bc>
   1c968:	ldrb	r0, [r8]
   1c96c:	str	r7, [sp, #8]
   1c970:	cmp	r0, #0
   1c974:	beq	1ca00 <__assert_fail@plt+0xa6c8>
   1c978:	mov	r1, #0
   1c97c:	mvn	r5, #64	; 0x40
   1c980:	mov	r4, r8
   1c984:	mov	r7, #0
   1c988:	tst	r1, #1
   1c98c:	beq	1c9b4 <__assert_fail@plt+0xa67c>
   1c990:	uxtab	r2, r5, r0
   1c994:	mov	r1, #0
   1c998:	cmp	r2, #26
   1c99c:	bcc	1c9f0 <__assert_fail@plt+0xa6b8>
   1c9a0:	uxtb	r0, r0
   1c9a4:	sub	r2, r0, #97	; 0x61
   1c9a8:	cmp	r2, #26
   1c9ac:	bcc	1c9f0 <__assert_fail@plt+0xa6b8>
   1c9b0:	b	1c9e4 <__assert_fail@plt+0xa6ac>
   1c9b4:	uxtb	r0, r0
   1c9b8:	cmp	r0, #46	; 0x2e
   1c9bc:	bne	1c9d0 <__assert_fail@plt+0xa698>
   1c9c0:	cmp	r7, #0
   1c9c4:	mov	r1, #1
   1c9c8:	moveq	r7, r4
   1c9cc:	b	1c9f0 <__assert_fail@plt+0xa6b8>
   1c9d0:	bl	2388c <__assert_fail@plt+0x11554>
   1c9d4:	mov	r1, #0
   1c9d8:	cmp	r0, #0
   1c9dc:	bne	1c9f0 <__assert_fail@plt+0xa6b8>
   1c9e0:	ldrb	r0, [r4]
   1c9e4:	mov	r1, #0
   1c9e8:	cmp	r0, #126	; 0x7e
   1c9ec:	movne	r7, r1
   1c9f0:	ldrb	r0, [r4, #1]!
   1c9f4:	cmp	r0, #0
   1c9f8:	bne	1c988 <__assert_fail@plt+0xa650>
   1c9fc:	b	1ca08 <__assert_fail@plt+0xa6d0>
   1ca00:	mov	r7, #0
   1ca04:	mov	r4, r8
   1ca08:	ldr	r1, [sp, #8]
   1ca0c:	cmp	r7, #0
   1ca10:	mov	r0, r4
   1ca14:	movne	r0, r7
   1ca18:	sub	lr, r0, r8
   1ca1c:	mov	r0, r6
   1ca20:	cmp	r1, #0
   1ca24:	movne	r0, r1
   1ca28:	sub	r2, r0, r9
   1ca2c:	orrs	r0, r1, r7
   1ca30:	beq	1ca60 <__assert_fail@plt+0xa728>
   1ca34:	cmp	r2, lr
   1ca38:	bne	1ca60 <__assert_fail@plt+0xa728>
   1ca3c:	mov	r0, r9
   1ca40:	mov	r1, r8
   1ca44:	mov	r5, r2
   1ca48:	bl	122fc <strncmp@plt>
   1ca4c:	mov	r2, r5
   1ca50:	cmp	r0, #0
   1ca54:	mov	lr, r5
   1ca58:	subeq	lr, r4, r8
   1ca5c:	subeq	r2, r6, r9
   1ca60:	mov	ip, #0
   1ca64:	mov	r6, #0
   1ca68:	cmp	ip, lr
   1ca6c:	cmpcs	r6, r2
   1ca70:	bcc	1ca80 <__assert_fail@plt+0xa748>
   1ca74:	b	1cc6c <__assert_fail@plt+0xa934>
   1ca78:	add	ip, ip, #1
   1ca7c:	add	r6, r6, #1
   1ca80:	cmp	r6, r2
   1ca84:	bcs	1ca98 <__assert_fail@plt+0xa760>
   1ca88:	ldrb	r0, [r9, r6]
   1ca8c:	sub	r0, r0, #48	; 0x30
   1ca90:	cmp	r0, #9
   1ca94:	bhi	1cab0 <__assert_fail@plt+0xa778>
   1ca98:	cmp	ip, lr
   1ca9c:	bcs	1cb7c <__assert_fail@plt+0xa844>
   1caa0:	ldrb	r0, [r8, ip]
   1caa4:	sub	r0, r0, #48	; 0x30
   1caa8:	cmp	r0, #10
   1caac:	bcc	1cb7c <__assert_fail@plt+0xa844>
   1cab0:	mov	r0, #0
   1cab4:	cmp	r2, r6
   1cab8:	mov	r1, #0
   1cabc:	beq	1caf0 <__assert_fail@plt+0xa7b8>
   1cac0:	ldrb	r3, [r9, r6]
   1cac4:	sub	r1, r3, #48	; 0x30
   1cac8:	cmp	r1, #10
   1cacc:	mov	r1, #0
   1cad0:	bcc	1caf0 <__assert_fail@plt+0xa7b8>
   1cad4:	sub	r1, r3, #65	; 0x41
   1cad8:	cmp	r1, #26
   1cadc:	bcc	1cb3c <__assert_fail@plt+0xa804>
   1cae0:	sub	r1, r3, #97	; 0x61
   1cae4:	cmp	r1, #26
   1cae8:	mov	r1, r3
   1caec:	bcs	1cb64 <__assert_fail@plt+0xa82c>
   1caf0:	cmp	lr, ip
   1caf4:	beq	1cb48 <__assert_fail@plt+0xa810>
   1caf8:	ldrb	r3, [r8, ip]
   1cafc:	sub	r7, r3, #48	; 0x30
   1cb00:	cmp	r7, #10
   1cb04:	bcc	1cb48 <__assert_fail@plt+0xa810>
   1cb08:	sub	r0, r3, #65	; 0x41
   1cb0c:	cmp	r0, #26
   1cb10:	bcc	1cb54 <__assert_fail@plt+0xa81c>
   1cb14:	sub	r0, r3, #97	; 0x61
   1cb18:	cmp	r0, #26
   1cb1c:	mov	r0, r3
   1cb20:	bcc	1cb48 <__assert_fail@plt+0xa810>
   1cb24:	orr	r0, r3, #256	; 0x100
   1cb28:	cmp	r3, #126	; 0x7e
   1cb2c:	mvneq	r0, #0
   1cb30:	cmp	r1, r0
   1cb34:	beq	1ca78 <__assert_fail@plt+0xa740>
   1cb38:	b	1cc5c <__assert_fail@plt+0xa924>
   1cb3c:	mov	r1, r3
   1cb40:	cmp	lr, ip
   1cb44:	bne	1caf8 <__assert_fail@plt+0xa7c0>
   1cb48:	cmp	r1, r0
   1cb4c:	beq	1ca78 <__assert_fail@plt+0xa740>
   1cb50:	b	1cc5c <__assert_fail@plt+0xa924>
   1cb54:	mov	r0, r3
   1cb58:	cmp	r1, r0
   1cb5c:	beq	1ca78 <__assert_fail@plt+0xa740>
   1cb60:	b	1cc5c <__assert_fail@plt+0xa924>
   1cb64:	orr	r1, r3, #256	; 0x100
   1cb68:	cmp	r3, #126	; 0x7e
   1cb6c:	mvneq	r1, #0
   1cb70:	cmp	lr, ip
   1cb74:	bne	1caf8 <__assert_fail@plt+0xa7c0>
   1cb78:	b	1cb48 <__assert_fail@plt+0xa810>
   1cb7c:	mov	r3, r6
   1cb80:	ldrb	r4, [r9, r3]
   1cb84:	add	r3, r3, #1
   1cb88:	cmp	r4, #48	; 0x30
   1cb8c:	beq	1cb80 <__assert_fail@plt+0xa848>
   1cb90:	sub	r6, r3, #1
   1cb94:	ldrb	r5, [r8, ip]
   1cb98:	add	ip, ip, #1
   1cb9c:	cmp	r5, #48	; 0x30
   1cba0:	beq	1cb94 <__assert_fail@plt+0xa85c>
   1cba4:	sub	r1, r5, #48	; 0x30
   1cba8:	sub	r7, r4, #48	; 0x30
   1cbac:	mov	r0, #0
   1cbb0:	cmp	r1, #10
   1cbb4:	mov	r1, #0
   1cbb8:	movwcc	r1, #1
   1cbbc:	cmp	r7, #9
   1cbc0:	bhi	1cc38 <__assert_fail@plt+0xa900>
   1cbc4:	add	r0, r8, ip
   1cbc8:	mvn	r6, #0
   1cbcc:	mov	r7, r9
   1cbd0:	str	lr, [sp, #4]
   1cbd4:	str	r0, [sp, #8]
   1cbd8:	mov	r0, #0
   1cbdc:	tst	r1, #1
   1cbe0:	beq	1cc50 <__assert_fail@plt+0xa918>
   1cbe4:	ldr	r1, [sp, #8]
   1cbe8:	cmp	r0, #0
   1cbec:	subeq	r0, r4, r5
   1cbf0:	ldrb	r4, [r7, r3]
   1cbf4:	add	r7, r7, #1
   1cbf8:	add	r1, r1, r6
   1cbfc:	add	r6, r6, #1
   1cc00:	ldrb	r5, [r1, #1]
   1cc04:	sub	lr, r4, #48	; 0x30
   1cc08:	sub	r1, r5, #48	; 0x30
   1cc0c:	cmp	r1, #10
   1cc10:	mov	r1, #0
   1cc14:	movwcc	r1, #1
   1cc18:	cmp	lr, #10
   1cc1c:	bcc	1cbdc <__assert_fail@plt+0xa8a4>
   1cc20:	ldr	lr, [sp, #4]
   1cc24:	add	ip, ip, r6
   1cc28:	add	r6, r3, r6
   1cc2c:	cmp	r1, #0
   1cc30:	beq	1cc44 <__assert_fail@plt+0xa90c>
   1cc34:	b	1c8a0 <__assert_fail@plt+0xa568>
   1cc38:	sub	ip, ip, #1
   1cc3c:	cmp	r1, #0
   1cc40:	bne	1c8a0 <__assert_fail@plt+0xa568>
   1cc44:	cmp	r0, #0
   1cc48:	beq	1ca68 <__assert_fail@plt+0xa730>
   1cc4c:	b	1cc64 <__assert_fail@plt+0xa92c>
   1cc50:	mov	r0, #1
   1cc54:	sub	sp, fp, #28
   1cc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc5c:	subs	r0, r1, r0
   1cc60:	moveq	r0, sl
   1cc64:	sub	sp, fp, #28
   1cc68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc6c:	mov	r0, sl
   1cc70:	sub	sp, fp, #28
   1cc74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc78:	push	{r4, r5, r6, sl, fp, lr}
   1cc7c:	add	fp, sp, #16
   1cc80:	mov	r4, r0
   1cc84:	bl	12164 <__errno_location@plt>
   1cc88:	ldr	r6, [r0]
   1cc8c:	mov	r5, r0
   1cc90:	mov	r0, r4
   1cc94:	bl	11e88 <free@plt>
   1cc98:	str	r6, [r5]
   1cc9c:	pop	{r4, r5, r6, sl, fp, pc}
   1cca0:	push	{r4, r5, r6, r7, fp, lr}
   1cca4:	add	fp, sp, #16
   1cca8:	sub	sp, sp, #8
   1ccac:	mov	r4, r0
   1ccb0:	ldr	r0, [r0, #4]
   1ccb4:	mov	r5, r3
   1ccb8:	mov	r6, r2
   1ccbc:	ldr	r1, [r4, #8]
   1ccc0:	cmp	r1, r0
   1ccc4:	bne	1cce0 <__assert_fail@plt+0xa9a8>
   1ccc8:	ldrd	r0, [r4, #16]
   1cccc:	cmp	r1, r0
   1ccd0:	bne	1cce0 <__assert_fail@plt+0xa9a8>
   1ccd4:	ldr	r0, [r4, #36]	; 0x24
   1ccd8:	cmp	r0, #0
   1ccdc:	beq	1ccf8 <__assert_fail@plt+0xa9c0>
   1cce0:	mov	r0, r4
   1cce4:	mov	r2, r6
   1cce8:	mov	r3, r5
   1ccec:	sub	sp, fp, #16
   1ccf0:	pop	{r4, r5, r6, r7, fp, lr}
   1ccf4:	b	121f4 <fseeko64@plt>
   1ccf8:	ldr	r7, [fp, #8]
   1ccfc:	mov	r0, r4
   1cd00:	bl	121b8 <fileno@plt>
   1cd04:	mov	r2, r6
   1cd08:	mov	r3, r5
   1cd0c:	str	r7, [sp]
   1cd10:	bl	12020 <lseek64@plt>
   1cd14:	and	r2, r0, r1
   1cd18:	cmn	r2, #1
   1cd1c:	mvneq	r0, #0
   1cd20:	subeq	sp, fp, #16
   1cd24:	popeq	{r4, r5, r6, r7, fp, pc}
   1cd28:	strd	r0, [r4, #80]	; 0x50
   1cd2c:	ldr	r0, [r4]
   1cd30:	bic	r0, r0, #16
   1cd34:	str	r0, [r4]
   1cd38:	mov	r0, #0
   1cd3c:	sub	sp, fp, #16
   1cd40:	pop	{r4, r5, r6, r7, fp, pc}
   1cd44:	push	{r4, sl, fp, lr}
   1cd48:	add	fp, sp, #8
   1cd4c:	sub	sp, sp, #264	; 0x108
   1cd50:	add	r1, sp, #7
   1cd54:	movw	r2, #257	; 0x101
   1cd58:	bl	21580 <__assert_fail@plt+0xf248>
   1cd5c:	mov	r4, #0
   1cd60:	cmp	r0, #0
   1cd64:	bne	1cd9c <__assert_fail@plt+0xaa64>
   1cd68:	movw	r1, #24756	; 0x60b4
   1cd6c:	add	r0, sp, #7
   1cd70:	movt	r1, #2
   1cd74:	bl	11e28 <strcmp@plt>
   1cd78:	cmp	r0, #0
   1cd7c:	beq	1cd9c <__assert_fail@plt+0xaa64>
   1cd80:	movw	r1, #27907	; 0x6d03
   1cd84:	add	r0, sp, #7
   1cd88:	movt	r1, #2
   1cd8c:	bl	11e28 <strcmp@plt>
   1cd90:	mov	r4, r0
   1cd94:	cmp	r0, #0
   1cd98:	movwne	r4, #1
   1cd9c:	mov	r0, r4
   1cda0:	sub	sp, fp, #8
   1cda4:	pop	{r4, sl, fp, pc}
   1cda8:	ldr	r0, [r0, #8]
   1cdac:	bx	lr
   1cdb0:	ldr	r0, [r0, #12]
   1cdb4:	bx	lr
   1cdb8:	ldr	r0, [r0, #16]
   1cdbc:	bx	lr
   1cdc0:	ldm	r0, {r2, ip}
   1cdc4:	mov	r0, #0
   1cdc8:	cmp	r2, ip
   1cdcc:	bxcs	lr
   1cdd0:	mov	r0, #0
   1cdd4:	ldr	r1, [r2]
   1cdd8:	cmp	r1, #0
   1cddc:	beq	1ce00 <__assert_fail@plt+0xaac8>
   1cde0:	mov	r3, #0
   1cde4:	mov	r1, r2
   1cde8:	ldr	r1, [r1, #4]
   1cdec:	add	r3, r3, #1
   1cdf0:	cmp	r1, #0
   1cdf4:	bne	1cde8 <__assert_fail@plt+0xaab0>
   1cdf8:	cmp	r3, r0
   1cdfc:	movhi	r0, r3
   1ce00:	add	r2, r2, #8
   1ce04:	cmp	r2, ip
   1ce08:	bcc	1cdd4 <__assert_fail@plt+0xaa9c>
   1ce0c:	bx	lr
   1ce10:	push	{fp, lr}
   1ce14:	mov	fp, sp
   1ce18:	ldm	r0, {r3, ip}
   1ce1c:	mov	lr, #0
   1ce20:	mov	r1, #0
   1ce24:	cmp	r3, ip
   1ce28:	bcs	1ce64 <__assert_fail@plt+0xab2c>
   1ce2c:	mov	r1, #0
   1ce30:	mov	lr, #0
   1ce34:	ldr	r2, [r3]
   1ce38:	cmp	r2, #0
   1ce3c:	beq	1ce58 <__assert_fail@plt+0xab20>
   1ce40:	mov	r2, r3
   1ce44:	ldr	r2, [r2, #4]
   1ce48:	add	r1, r1, #1
   1ce4c:	cmp	r2, #0
   1ce50:	bne	1ce44 <__assert_fail@plt+0xab0c>
   1ce54:	add	lr, lr, #1
   1ce58:	add	r3, r3, #8
   1ce5c:	cmp	r3, ip
   1ce60:	bcc	1ce34 <__assert_fail@plt+0xaafc>
   1ce64:	ldr	r2, [r0, #12]
   1ce68:	cmp	lr, r2
   1ce6c:	bne	1ce84 <__assert_fail@plt+0xab4c>
   1ce70:	ldr	r2, [r0, #16]
   1ce74:	mov	r0, #1
   1ce78:	cmp	r1, r2
   1ce7c:	movne	r0, #0
   1ce80:	pop	{fp, pc}
   1ce84:	mov	r0, #0
   1ce88:	pop	{fp, pc}
   1ce8c:	nop	{0}
   1ce90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ce94:	add	fp, sp, #24
   1ce98:	sub	sp, sp, #8
   1ce9c:	ldr	r6, [r0]
   1cea0:	ldmib	r0, {r2, r7, r8}
   1cea4:	ldr	r3, [r0, #16]
   1cea8:	mov	r4, r1
   1ceac:	mov	r5, #0
   1ceb0:	cmp	r6, r2
   1ceb4:	bcs	1cef4 <__assert_fail@plt+0xabbc>
   1ceb8:	mov	r5, #0
   1cebc:	ldr	r0, [r6]
   1cec0:	cmp	r0, #0
   1cec4:	beq	1cee8 <__assert_fail@plt+0xabb0>
   1cec8:	mov	r0, #0
   1cecc:	mov	r1, r6
   1ced0:	ldr	r1, [r1, #4]
   1ced4:	add	r0, r0, #1
   1ced8:	cmp	r1, #0
   1cedc:	bne	1ced0 <__assert_fail@plt+0xab98>
   1cee0:	cmp	r0, r5
   1cee4:	movhi	r5, r0
   1cee8:	add	r6, r6, #8
   1ceec:	cmp	r6, r2
   1cef0:	bcc	1cebc <__assert_fail@plt+0xab84>
   1cef4:	movw	r2, #27913	; 0x6d09
   1cef8:	mov	r0, r4
   1cefc:	mov	r1, #1
   1cf00:	movt	r2, #2
   1cf04:	bl	121c4 <__fprintf_chk@plt>
   1cf08:	movw	r2, #27937	; 0x6d21
   1cf0c:	mov	r0, r4
   1cf10:	mov	r1, #1
   1cf14:	mov	r3, r7
   1cf18:	movt	r2, #2
   1cf1c:	bl	121c4 <__fprintf_chk@plt>
   1cf20:	vldr	d16, [pc, #80]	; 1cf78 <__assert_fail@plt+0xac40>
   1cf24:	vmov	s0, r8
   1cf28:	movw	r2, #27961	; 0x6d39
   1cf2c:	mov	r0, r4
   1cf30:	mov	r1, #1
   1cf34:	mov	r3, r8
   1cf38:	vcvt.f64.u32	d17, s0
   1cf3c:	vmov	s0, r7
   1cf40:	movt	r2, #2
   1cf44:	vcvt.f64.u32	d18, s0
   1cf48:	vmul.f64	d16, d17, d16
   1cf4c:	vdiv.f64	d16, d16, d18
   1cf50:	vstr	d16, [sp]
   1cf54:	bl	121c4 <__fprintf_chk@plt>
   1cf58:	movw	r2, #27994	; 0x6d5a
   1cf5c:	mov	r0, r4
   1cf60:	mov	r1, #1
   1cf64:	mov	r3, r5
   1cf68:	movt	r2, #2
   1cf6c:	sub	sp, fp, #24
   1cf70:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cf74:	b	121c4 <__fprintf_chk@plt>
   1cf78:	andeq	r0, r0, r0
   1cf7c:	subsmi	r0, r9, r0
   1cf80:	push	{r4, r5, r6, r7, fp, lr}
   1cf84:	add	fp, sp, #16
   1cf88:	mov	r4, r1
   1cf8c:	ldr	r1, [r0, #8]
   1cf90:	ldr	r2, [r0, #24]
   1cf94:	mov	r5, r0
   1cf98:	mov	r0, r4
   1cf9c:	blx	r2
   1cfa0:	ldr	r1, [r5, #8]
   1cfa4:	cmp	r0, r1
   1cfa8:	bcs	1d014 <__assert_fail@plt+0xacdc>
   1cfac:	ldr	r7, [r5]
   1cfb0:	mov	r6, #0
   1cfb4:	ldr	r1, [r7, r0, lsl #3]!
   1cfb8:	cmp	r1, #0
   1cfbc:	cmpne	r7, #0
   1cfc0:	bne	1cfd0 <__assert_fail@plt+0xac98>
   1cfc4:	mov	r0, r6
   1cfc8:	pop	{r4, r5, r6, r7, fp, pc}
   1cfcc:	ldr	r1, [r7]
   1cfd0:	cmp	r1, r4
   1cfd4:	beq	1cffc <__assert_fail@plt+0xacc4>
   1cfd8:	ldr	r2, [r5, #28]
   1cfdc:	mov	r0, r4
   1cfe0:	blx	r2
   1cfe4:	cmp	r0, #0
   1cfe8:	bne	1d008 <__assert_fail@plt+0xacd0>
   1cfec:	ldr	r7, [r7, #4]
   1cff0:	cmp	r7, #0
   1cff4:	bne	1cfcc <__assert_fail@plt+0xac94>
   1cff8:	b	1cfc4 <__assert_fail@plt+0xac8c>
   1cffc:	mov	r6, r4
   1d000:	mov	r0, r6
   1d004:	pop	{r4, r5, r6, r7, fp, pc}
   1d008:	ldr	r6, [r7]
   1d00c:	mov	r0, r6
   1d010:	pop	{r4, r5, r6, r7, fp, pc}
   1d014:	bl	12314 <abort@plt>
   1d018:	ldr	r1, [r0, #16]
   1d01c:	cmp	r1, #0
   1d020:	moveq	r0, #0
   1d024:	bxeq	lr
   1d028:	ldm	r0, {r1, r2}
   1d02c:	cmp	r1, r2
   1d030:	bcs	1d048 <__assert_fail@plt+0xad10>
   1d034:	ldr	r0, [r1], #8
   1d038:	cmp	r0, #0
   1d03c:	bxne	lr
   1d040:	cmp	r1, r2
   1d044:	bcc	1d034 <__assert_fail@plt+0xacfc>
   1d048:	push	{fp, lr}
   1d04c:	mov	fp, sp
   1d050:	bl	12314 <abort@plt>
   1d054:	push	{r4, r5, fp, lr}
   1d058:	add	fp, sp, #8
   1d05c:	mov	r5, r1
   1d060:	ldr	r1, [r0, #8]
   1d064:	ldr	r2, [r0, #24]
   1d068:	mov	r4, r0
   1d06c:	mov	r0, r5
   1d070:	blx	r2
   1d074:	ldr	r1, [r4, #8]
   1d078:	cmp	r0, r1
   1d07c:	bcs	1d0d8 <__assert_fail@plt+0xada0>
   1d080:	ldr	r1, [r4]
   1d084:	add	r2, r1, r0, lsl #3
   1d088:	ldr	r3, [r2]
   1d08c:	ldr	r2, [r2, #4]
   1d090:	cmp	r3, r5
   1d094:	beq	1d0a4 <__assert_fail@plt+0xad6c>
   1d098:	cmp	r2, #0
   1d09c:	bne	1d088 <__assert_fail@plt+0xad50>
   1d0a0:	b	1d0b0 <__assert_fail@plt+0xad78>
   1d0a4:	cmp	r2, #0
   1d0a8:	ldrne	r0, [r2]
   1d0ac:	popne	{r4, r5, fp, pc}
   1d0b0:	ldr	r2, [r4, #4]
   1d0b4:	add	r0, r1, r0, lsl #3
   1d0b8:	add	r1, r0, #8
   1d0bc:	cmp	r1, r2
   1d0c0:	movcs	r0, #0
   1d0c4:	popcs	{r4, r5, fp, pc}
   1d0c8:	ldr	r0, [r1], #8
   1d0cc:	cmp	r0, #0
   1d0d0:	popne	{r4, r5, fp, pc}
   1d0d4:	b	1d0bc <__assert_fail@plt+0xad84>
   1d0d8:	bl	12314 <abort@plt>
   1d0dc:	push	{r4, r5, fp, lr}
   1d0e0:	add	fp, sp, #8
   1d0e4:	ldm	r0, {r5, lr}
   1d0e8:	mov	ip, r0
   1d0ec:	mov	r0, #0
   1d0f0:	cmp	r5, lr
   1d0f4:	bcs	1d140 <__assert_fail@plt+0xae08>
   1d0f8:	mov	r0, #0
   1d0fc:	ldr	r3, [r5]
   1d100:	cmp	r3, #0
   1d104:	cmpne	r5, #0
   1d108:	beq	1d134 <__assert_fail@plt+0xadfc>
   1d10c:	mov	r3, r5
   1d110:	cmp	r0, r2
   1d114:	popcs	{r4, r5, fp, pc}
   1d118:	ldr	r4, [r3]
   1d11c:	str	r4, [r1, r0, lsl #2]
   1d120:	add	r0, r0, #1
   1d124:	ldr	r3, [r3, #4]
   1d128:	cmp	r3, #0
   1d12c:	bne	1d110 <__assert_fail@plt+0xadd8>
   1d130:	ldr	lr, [ip, #4]
   1d134:	add	r5, r5, #8
   1d138:	cmp	r5, lr
   1d13c:	bcc	1d0fc <__assert_fail@plt+0xadc4>
   1d140:	pop	{r4, r5, fp, pc}
   1d144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d148:	add	fp, sp, #24
   1d14c:	mov	r5, r1
   1d150:	ldr	r4, [r0]
   1d154:	ldr	r1, [r0, #4]
   1d158:	mov	r6, #0
   1d15c:	cmp	r4, r1
   1d160:	bcs	1d1d4 <__assert_fail@plt+0xae9c>
   1d164:	mov	r9, r2
   1d168:	mov	r8, r0
   1d16c:	mov	r6, #0
   1d170:	b	1d1b8 <__assert_fail@plt+0xae80>
   1d174:	mov	r1, r9
   1d178:	blx	r5
   1d17c:	cmp	r0, #0
   1d180:	beq	1d1d4 <__assert_fail@plt+0xae9c>
   1d184:	mov	r7, r4
   1d188:	ldr	r7, [r7, #4]
   1d18c:	add	r6, r6, #1
   1d190:	cmp	r7, #0
   1d194:	beq	1d1b0 <__assert_fail@plt+0xae78>
   1d198:	ldr	r0, [r7]
   1d19c:	mov	r1, r9
   1d1a0:	blx	r5
   1d1a4:	cmp	r0, #0
   1d1a8:	bne	1d188 <__assert_fail@plt+0xae50>
   1d1ac:	b	1d1d4 <__assert_fail@plt+0xae9c>
   1d1b0:	ldr	r1, [r8, #4]
   1d1b4:	b	1d1c8 <__assert_fail@plt+0xae90>
   1d1b8:	ldr	r0, [r4]
   1d1bc:	cmp	r0, #0
   1d1c0:	cmpne	r4, #0
   1d1c4:	bne	1d174 <__assert_fail@plt+0xae3c>
   1d1c8:	add	r4, r4, #8
   1d1cc:	cmp	r4, r1
   1d1d0:	bcc	1d1b8 <__assert_fail@plt+0xae80>
   1d1d4:	mov	r0, r6
   1d1d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d1dc:	ldrb	r2, [r0]
   1d1e0:	cmp	r2, #0
   1d1e4:	moveq	r0, #0
   1d1e8:	bxeq	lr
   1d1ec:	add	r3, r0, #1
   1d1f0:	mov	r0, #0
   1d1f4:	rsb	r0, r0, r0, lsl #5
   1d1f8:	uxtab	r0, r0, r2
   1d1fc:	udiv	r2, r0, r1
   1d200:	mls	r0, r2, r1, r0
   1d204:	ldrb	r2, [r3], #1
   1d208:	cmp	r2, #0
   1d20c:	bne	1d1f4 <__assert_fail@plt+0xaebc>
   1d210:	bx	lr
   1d214:	movw	r1, #28024	; 0x6d78
   1d218:	movt	r1, #2
   1d21c:	vld1.32	{d16-d17}, [r1]!
   1d220:	ldr	r1, [r1]
   1d224:	vst1.32	{d16-d17}, [r0]!
   1d228:	str	r1, [r0]
   1d22c:	bx	lr
   1d230:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d234:	add	fp, sp, #24
   1d238:	movw	r9, #54360	; 0xd458
   1d23c:	movw	r5, #54340	; 0xd444
   1d240:	cmp	r3, #0
   1d244:	mov	r6, r0
   1d248:	mov	r0, #40	; 0x28
   1d24c:	mov	r7, r1
   1d250:	movt	r9, #1
   1d254:	movt	r5, #1
   1d258:	movne	r9, r3
   1d25c:	cmp	r2, #0
   1d260:	movne	r5, r2
   1d264:	bl	23808 <__assert_fail@plt+0x114d0>
   1d268:	mov	r8, #0
   1d26c:	cmp	r0, #0
   1d270:	beq	1d42c <__assert_fail@plt+0xb0f4>
   1d274:	mov	r4, r0
   1d278:	movw	r0, #28024	; 0x6d78
   1d27c:	cmp	r7, #0
   1d280:	movt	r0, #2
   1d284:	moveq	r7, r0
   1d288:	cmp	r7, r0
   1d28c:	str	r7, [r4, #20]
   1d290:	beq	1d30c <__assert_fail@plt+0xafd4>
   1d294:	vldr	s2, [pc, #408]	; 1d434 <__assert_fail@plt+0xb0fc>
   1d298:	vldr	s0, [r7, #8]
   1d29c:	vcmpe.f32	s0, s2
   1d2a0:	vmrs	APSR_nzcv, fpscr
   1d2a4:	ble	1d3b8 <__assert_fail@plt+0xb080>
   1d2a8:	vldr	s4, [pc, #392]	; 1d438 <__assert_fail@plt+0xb100>
   1d2ac:	vcmpe.f32	s0, s4
   1d2b0:	vmrs	APSR_nzcv, fpscr
   1d2b4:	bpl	1d3b8 <__assert_fail@plt+0xb080>
   1d2b8:	vldr	s4, [pc, #380]	; 1d43c <__assert_fail@plt+0xb104>
   1d2bc:	vldr	s6, [r7, #12]
   1d2c0:	vcmpe.f32	s6, s4
   1d2c4:	vmrs	APSR_nzcv, fpscr
   1d2c8:	ble	1d3b8 <__assert_fail@plt+0xb080>
   1d2cc:	vldr	s4, [r7]
   1d2d0:	vcmpe.f32	s4, #0.0
   1d2d4:	vmrs	APSR_nzcv, fpscr
   1d2d8:	blt	1d3b8 <__assert_fail@plt+0xb080>
   1d2dc:	vadd.f32	s2, s4, s2
   1d2e0:	vcmpe.f32	s2, s0
   1d2e4:	vmrs	APSR_nzcv, fpscr
   1d2e8:	bpl	1d3b8 <__assert_fail@plt+0xb080>
   1d2ec:	vldr	s0, [r7, #4]
   1d2f0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1d2f4:	vcmpe.f32	s0, s4
   1d2f8:	vmrs	APSR_nzcv, fpscr
   1d2fc:	bhi	1d3b8 <__assert_fail@plt+0xb080>
   1d300:	vcmpe.f32	s2, s0
   1d304:	vmrs	APSR_nzcv, fpscr
   1d308:	bpl	1d3b8 <__assert_fail@plt+0xb080>
   1d30c:	ldrb	r0, [r7, #16]
   1d310:	cmp	r0, #0
   1d314:	bne	1d340 <__assert_fail@plt+0xb008>
   1d318:	vldr	s0, [r7, #8]
   1d31c:	vldr	s4, [pc, #284]	; 1d440 <__assert_fail@plt+0xb108>
   1d320:	vmov	s2, r6
   1d324:	vcvt.f32.u32	s2, s2
   1d328:	vdiv.f32	s2, s2, s0
   1d32c:	vcmpe.f32	s2, s4
   1d330:	vcvt.u32.f32	s0, s2
   1d334:	vmrs	APSR_nzcv, fpscr
   1d338:	bge	1d3c8 <__assert_fail@plt+0xb090>
   1d33c:	vmov	r6, s0
   1d340:	cmp	r6, #10
   1d344:	movls	r6, #10
   1d348:	orr	r0, r6, #1
   1d34c:	cmn	r0, #1
   1d350:	beq	1d3c8 <__assert_fail@plt+0xb090>
   1d354:	ldr	r6, [fp, #8]
   1d358:	mov	r1, #3
   1d35c:	cmp	r0, #10
   1d360:	bcc	1d398 <__assert_fail@plt+0xb060>
   1d364:	mov	r1, #3
   1d368:	mov	r3, #9
   1d36c:	mov	r2, #12
   1d370:	udiv	r7, r0, r1
   1d374:	mls	r7, r7, r1, r0
   1d378:	cmp	r7, #0
   1d37c:	beq	1d398 <__assert_fail@plt+0xb060>
   1d380:	add	r3, r3, r2
   1d384:	add	r2, r2, #8
   1d388:	add	r1, r1, #2
   1d38c:	add	r3, r3, #4
   1d390:	cmp	r3, r0
   1d394:	bcc	1d370 <__assert_fail@plt+0xb038>
   1d398:	udiv	r2, r0, r1
   1d39c:	mls	r1, r2, r1, r0
   1d3a0:	cmp	r1, #0
   1d3a4:	bne	1d3c0 <__assert_fail@plt+0xb088>
   1d3a8:	add	r0, r0, #2
   1d3ac:	cmn	r0, #1
   1d3b0:	bne	1d358 <__assert_fail@plt+0xb020>
   1d3b4:	b	1d3c8 <__assert_fail@plt+0xb090>
   1d3b8:	str	r0, [r4, #20]
   1d3bc:	b	1d3d0 <__assert_fail@plt+0xb098>
   1d3c0:	cmp	r0, #536870912	; 0x20000000
   1d3c4:	bcc	1d3e0 <__assert_fail@plt+0xb0a8>
   1d3c8:	mov	r0, #0
   1d3cc:	str	r0, [r4, #8]
   1d3d0:	mov	r0, r4
   1d3d4:	bl	1cc78 <__assert_fail@plt+0xa940>
   1d3d8:	mov	r0, r8
   1d3dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d3e0:	cmp	r0, #0
   1d3e4:	str	r0, [r4, #8]
   1d3e8:	beq	1d3d0 <__assert_fail@plt+0xb098>
   1d3ec:	mov	r1, #8
   1d3f0:	bl	237b4 <__assert_fail@plt+0x1147c>
   1d3f4:	cmp	r0, #0
   1d3f8:	str	r0, [r4]
   1d3fc:	beq	1d3d0 <__assert_fail@plt+0xb098>
   1d400:	mov	r1, #0
   1d404:	mov	r8, r4
   1d408:	str	r1, [r4, #12]
   1d40c:	str	r1, [r4, #16]
   1d410:	str	r5, [r4, #24]
   1d414:	str	r9, [r4, #28]
   1d418:	str	r6, [r4, #32]
   1d41c:	str	r1, [r4, #36]	; 0x24
   1d420:	ldr	r1, [r4, #8]
   1d424:	add	r0, r0, r1, lsl #3
   1d428:	str	r0, [r4, #4]
   1d42c:	mov	r0, r8
   1d430:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d434:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d438:	svccc	0x00666666
   1d43c:	svccc	0x008ccccd
   1d440:	svcmi	0x00800000
   1d444:	ror	r2, r0, #3
   1d448:	udiv	r2, r2, r1
   1d44c:	mul	r1, r2, r1
   1d450:	rsb	r0, r1, r0, ror #3
   1d454:	bx	lr
   1d458:	sub	r0, r0, r1
   1d45c:	clz	r0, r0
   1d460:	lsr	r0, r0, #5
   1d464:	bx	lr
   1d468:	push	{r4, r5, r6, r7, fp, lr}
   1d46c:	add	fp, sp, #16
   1d470:	mov	r4, r0
   1d474:	ldr	r5, [r0]
   1d478:	ldr	r0, [r0, #4]
   1d47c:	cmp	r5, r0
   1d480:	bcs	1d518 <__assert_fail@plt+0xb1e0>
   1d484:	mov	r6, #0
   1d488:	ldr	r1, [r5]
   1d48c:	cmp	r1, #0
   1d490:	beq	1d50c <__assert_fail@plt+0xb1d4>
   1d494:	ldr	r1, [r4, #32]
   1d498:	ldr	r7, [r5, #4]
   1d49c:	cmp	r1, #0
   1d4a0:	mov	r0, r1
   1d4a4:	movwne	r0, #1
   1d4a8:	cmp	r7, #0
   1d4ac:	beq	1d4f0 <__assert_fail@plt+0xb1b8>
   1d4b0:	tst	r0, #1
   1d4b4:	beq	1d4c4 <__assert_fail@plt+0xb18c>
   1d4b8:	ldr	r0, [r7]
   1d4bc:	blx	r1
   1d4c0:	ldr	r1, [r4, #32]
   1d4c4:	str	r6, [r7]
   1d4c8:	cmp	r1, #0
   1d4cc:	ldr	r0, [r4, #36]	; 0x24
   1d4d0:	ldr	r2, [r7, #4]
   1d4d4:	str	r0, [r7, #4]
   1d4d8:	mov	r0, r1
   1d4dc:	str	r7, [r4, #36]	; 0x24
   1d4e0:	mov	r7, r2
   1d4e4:	movwne	r0, #1
   1d4e8:	cmp	r2, #0
   1d4ec:	bne	1d4b0 <__assert_fail@plt+0xb178>
   1d4f0:	cmp	r0, #0
   1d4f4:	beq	1d500 <__assert_fail@plt+0xb1c8>
   1d4f8:	ldr	r0, [r5]
   1d4fc:	blx	r1
   1d500:	str	r6, [r5]
   1d504:	str	r6, [r5, #4]
   1d508:	ldr	r0, [r4, #4]
   1d50c:	add	r5, r5, #8
   1d510:	cmp	r5, r0
   1d514:	bcc	1d488 <__assert_fail@plt+0xb150>
   1d518:	mov	r0, #0
   1d51c:	str	r0, [r4, #12]
   1d520:	str	r0, [r4, #16]
   1d524:	pop	{r4, r5, r6, r7, fp, pc}
   1d528:	push	{r4, r5, r6, sl, fp, lr}
   1d52c:	add	fp, sp, #16
   1d530:	mov	r4, r0
   1d534:	ldr	r0, [r0, #32]
   1d538:	cmp	r0, #0
   1d53c:	ldrne	r0, [r4, #16]
   1d540:	cmpne	r0, #0
   1d544:	beq	1d5ac <__assert_fail@plt+0xb274>
   1d548:	ldr	r5, [r4]
   1d54c:	ldr	r1, [r4, #4]
   1d550:	cmp	r5, r1
   1d554:	bcc	1d568 <__assert_fail@plt+0xb230>
   1d558:	b	1d5ac <__assert_fail@plt+0xb274>
   1d55c:	add	r5, r5, #8
   1d560:	cmp	r5, r1
   1d564:	bcs	1d5ac <__assert_fail@plt+0xb274>
   1d568:	ldr	r0, [r5]
   1d56c:	cmp	r0, #0
   1d570:	cmpne	r5, #0
   1d574:	beq	1d55c <__assert_fail@plt+0xb224>
   1d578:	ldr	r1, [r4, #32]
   1d57c:	blx	r1
   1d580:	ldr	r6, [r5, #4]
   1d584:	cmp	r6, #0
   1d588:	beq	1d5a4 <__assert_fail@plt+0xb26c>
   1d58c:	ldr	r1, [r4, #32]
   1d590:	ldr	r0, [r6]
   1d594:	blx	r1
   1d598:	ldr	r6, [r6, #4]
   1d59c:	cmp	r6, #0
   1d5a0:	bne	1d58c <__assert_fail@plt+0xb254>
   1d5a4:	ldr	r1, [r4, #4]
   1d5a8:	b	1d55c <__assert_fail@plt+0xb224>
   1d5ac:	ldr	r5, [r4]
   1d5b0:	ldr	r1, [r4, #4]
   1d5b4:	cmp	r5, r1
   1d5b8:	bcc	1d5cc <__assert_fail@plt+0xb294>
   1d5bc:	b	1d5f4 <__assert_fail@plt+0xb2bc>
   1d5c0:	add	r5, r5, #8
   1d5c4:	cmp	r5, r1
   1d5c8:	bcs	1d5f4 <__assert_fail@plt+0xb2bc>
   1d5cc:	ldr	r0, [r5, #4]
   1d5d0:	cmp	r0, #0
   1d5d4:	beq	1d5c0 <__assert_fail@plt+0xb288>
   1d5d8:	ldr	r6, [r0, #4]
   1d5dc:	bl	1cc78 <__assert_fail@plt+0xa940>
   1d5e0:	cmp	r6, #0
   1d5e4:	mov	r0, r6
   1d5e8:	bne	1d5d8 <__assert_fail@plt+0xb2a0>
   1d5ec:	ldr	r1, [r4, #4]
   1d5f0:	b	1d5c0 <__assert_fail@plt+0xb288>
   1d5f4:	ldr	r0, [r4, #36]	; 0x24
   1d5f8:	cmp	r0, #0
   1d5fc:	beq	1d614 <__assert_fail@plt+0xb2dc>
   1d600:	ldr	r5, [r0, #4]
   1d604:	bl	1cc78 <__assert_fail@plt+0xa940>
   1d608:	cmp	r5, #0
   1d60c:	mov	r0, r5
   1d610:	bne	1d600 <__assert_fail@plt+0xb2c8>
   1d614:	ldr	r0, [r4]
   1d618:	bl	1cc78 <__assert_fail@plt+0xa940>
   1d61c:	mov	r0, r4
   1d620:	pop	{r4, r5, r6, sl, fp, lr}
   1d624:	b	1cc78 <__assert_fail@plt+0xa940>
   1d628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d62c:	add	fp, sp, #28
   1d630:	sub	sp, sp, #44	; 0x2c
   1d634:	mov	r7, r0
   1d638:	mov	r4, r0
   1d63c:	ldr	r0, [r7, #20]!
   1d640:	ldrb	r2, [r0, #16]
   1d644:	cmp	r2, #0
   1d648:	bne	1d678 <__assert_fail@plt+0xb340>
   1d64c:	vldr	s0, [r0, #8]
   1d650:	vldr	s4, [pc, #560]	; 1d888 <__assert_fail@plt+0xb550>
   1d654:	vmov	s2, r1
   1d658:	mov	r5, #0
   1d65c:	vcvt.f32.u32	s2, s2
   1d660:	vdiv.f32	s2, s2, s0
   1d664:	vcmpe.f32	s2, s4
   1d668:	vcvt.u32.f32	s0, s2
   1d66c:	vmrs	APSR_nzcv, fpscr
   1d670:	bge	1d878 <__assert_fail@plt+0xb540>
   1d674:	vmov	r1, s0
   1d678:	cmp	r1, #10
   1d67c:	mov	r5, #0
   1d680:	movls	r1, #10
   1d684:	orr	r6, r1, #1
   1d688:	cmn	r6, #1
   1d68c:	bne	1d6a0 <__assert_fail@plt+0xb368>
   1d690:	b	1d878 <__assert_fail@plt+0xb540>
   1d694:	add	r6, r6, #2
   1d698:	cmn	r6, #1
   1d69c:	beq	1d878 <__assert_fail@plt+0xb540>
   1d6a0:	mov	r0, #3
   1d6a4:	cmp	r6, #10
   1d6a8:	bcc	1d6e0 <__assert_fail@plt+0xb3a8>
   1d6ac:	mov	r0, #3
   1d6b0:	mov	r2, #9
   1d6b4:	mov	r1, #12
   1d6b8:	udiv	r3, r6, r0
   1d6bc:	mls	r3, r3, r0, r6
   1d6c0:	cmp	r3, #0
   1d6c4:	beq	1d6e0 <__assert_fail@plt+0xb3a8>
   1d6c8:	add	r2, r2, r1
   1d6cc:	add	r1, r1, #8
   1d6d0:	add	r0, r0, #2
   1d6d4:	add	r2, r2, #4
   1d6d8:	cmp	r2, r6
   1d6dc:	bcc	1d6b8 <__assert_fail@plt+0xb380>
   1d6e0:	udiv	r1, r6, r0
   1d6e4:	mls	r0, r1, r0, r6
   1d6e8:	cmp	r0, #0
   1d6ec:	beq	1d694 <__assert_fail@plt+0xb35c>
   1d6f0:	sub	r0, r6, #1
   1d6f4:	cmn	r0, #-536870910	; 0xe0000002
   1d6f8:	bhi	1d878 <__assert_fail@plt+0xb540>
   1d6fc:	ldr	r0, [r4, #8]
   1d700:	cmp	r6, r0
   1d704:	bne	1d710 <__assert_fail@plt+0xb3d8>
   1d708:	mov	r5, #1
   1d70c:	b	1d878 <__assert_fail@plt+0xb540>
   1d710:	mov	r0, r6
   1d714:	mov	r1, #8
   1d718:	bl	237b4 <__assert_fail@plt+0x1147c>
   1d71c:	cmp	r0, #0
   1d720:	str	r0, [sp, #4]
   1d724:	beq	1d878 <__assert_fail@plt+0xb540>
   1d728:	mov	r1, #0
   1d72c:	add	r0, r0, r6, lsl #3
   1d730:	str	r6, [sp, #12]
   1d734:	add	r5, sp, #4
   1d738:	mov	sl, r4
   1d73c:	mov	r2, #0
   1d740:	str	r1, [sp, #16]
   1d744:	str	r1, [sp, #20]
   1d748:	str	r0, [sp, #8]
   1d74c:	add	r0, r5, #20
   1d750:	mov	r1, r4
   1d754:	vld1.32	{d16-d17}, [r7]
   1d758:	vst1.32	{d16-d17}, [r0]
   1d75c:	ldr	r0, [sl, #36]!	; 0x24
   1d760:	str	r0, [sp, #40]	; 0x28
   1d764:	mov	r0, r5
   1d768:	bl	1d88c <__assert_fail@plt+0xb554>
   1d76c:	cmp	r0, #0
   1d770:	beq	1d798 <__assert_fail@plt+0xb460>
   1d774:	ldr	r0, [r4]
   1d778:	bl	1cc78 <__assert_fail@plt+0xa940>
   1d77c:	mov	r0, #36	; 0x24
   1d780:	vld1.32	{d16-d17}, [r5], r0
   1d784:	vst1.32	{d16-d17}, [r4], r0
   1d788:	ldr	r0, [r5]
   1d78c:	mov	r5, #1
   1d790:	str	r0, [r4]
   1d794:	b	1d878 <__assert_fail@plt+0xb540>
   1d798:	ldr	r0, [sp, #40]	; 0x28
   1d79c:	str	r0, [sl]
   1d7a0:	ldr	r0, [sp, #8]
   1d7a4:	ldr	r8, [sp, #4]
   1d7a8:	cmp	r8, r0
   1d7ac:	str	r0, [sp]
   1d7b0:	bcs	1d854 <__assert_fail@plt+0xb51c>
   1d7b4:	mov	r9, #0
   1d7b8:	ldr	r0, [r8]
   1d7bc:	cmp	r0, #0
   1d7c0:	beq	1d844 <__assert_fail@plt+0xb50c>
   1d7c4:	ldr	r6, [r8, #4]
   1d7c8:	cmp	r6, #0
   1d7cc:	beq	1d840 <__assert_fail@plt+0xb508>
   1d7d0:	ldr	r1, [r4, #8]
   1d7d4:	ldr	r5, [r6]
   1d7d8:	ldr	r2, [r4, #24]
   1d7dc:	mov	r0, r5
   1d7e0:	blx	r2
   1d7e4:	ldr	r1, [r4, #8]
   1d7e8:	cmp	r0, r1
   1d7ec:	bcs	1d884 <__assert_fail@plt+0xb54c>
   1d7f0:	ldr	r3, [r4]
   1d7f4:	ldr	r2, [r6, #4]
   1d7f8:	ldr	r7, [r3, r0, lsl #3]
   1d7fc:	cmp	r7, #0
   1d800:	beq	1d810 <__assert_fail@plt+0xb4d8>
   1d804:	add	r0, r3, r0, lsl #3
   1d808:	add	r0, r0, #4
   1d80c:	b	1d828 <__assert_fail@plt+0xb4f0>
   1d810:	str	r5, [r3, r0, lsl #3]
   1d814:	ldr	r0, [r4, #12]
   1d818:	add	r0, r0, #1
   1d81c:	str	r0, [r4, #12]
   1d820:	mov	r0, sl
   1d824:	str	r9, [r6]
   1d828:	ldr	r3, [r0]
   1d82c:	cmp	r2, #0
   1d830:	str	r3, [r6, #4]
   1d834:	str	r6, [r0]
   1d838:	mov	r6, r2
   1d83c:	bne	1d7d4 <__assert_fail@plt+0xb49c>
   1d840:	str	r9, [r8, #4]
   1d844:	ldr	r0, [sp]
   1d848:	add	r8, r8, #8
   1d84c:	cmp	r8, r0
   1d850:	bcc	1d7b8 <__assert_fail@plt+0xb480>
   1d854:	add	r1, sp, #4
   1d858:	mov	r0, r4
   1d85c:	mov	r2, #0
   1d860:	mov	r5, #0
   1d864:	bl	1d88c <__assert_fail@plt+0xb554>
   1d868:	cmp	r0, #0
   1d86c:	beq	1d884 <__assert_fail@plt+0xb54c>
   1d870:	ldr	r0, [sp, #4]
   1d874:	bl	1cc78 <__assert_fail@plt+0xa940>
   1d878:	mov	r0, r5
   1d87c:	sub	sp, fp, #28
   1d880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d884:	bl	12314 <abort@plt>
   1d888:	svcmi	0x00800000
   1d88c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d890:	add	fp, sp, #28
   1d894:	sub	sp, sp, #12
   1d898:	ldr	sl, [r1]
   1d89c:	str	r1, [sp, #8]
   1d8a0:	ldr	r1, [r1, #4]
   1d8a4:	mov	r7, r0
   1d8a8:	mov	r0, #1
   1d8ac:	str	r2, [sp, #4]
   1d8b0:	cmp	sl, r1
   1d8b4:	bcs	1da10 <__assert_fail@plt+0xb6d8>
   1d8b8:	add	r8, r7, #36	; 0x24
   1d8bc:	mov	r9, #0
   1d8c0:	ldr	r4, [sl]
   1d8c4:	cmp	r4, #0
   1d8c8:	beq	1d9f8 <__assert_fail@plt+0xb6c0>
   1d8cc:	ldr	r5, [sl, #4]
   1d8d0:	cmp	r5, #0
   1d8d4:	beq	1d94c <__assert_fail@plt+0xb614>
   1d8d8:	ldr	r1, [r7, #8]
   1d8dc:	ldr	r4, [r5]
   1d8e0:	ldr	r2, [r7, #24]
   1d8e4:	mov	r0, r4
   1d8e8:	blx	r2
   1d8ec:	ldr	r1, [r7, #8]
   1d8f0:	cmp	r0, r1
   1d8f4:	bcs	1da24 <__assert_fail@plt+0xb6ec>
   1d8f8:	ldr	r3, [r7]
   1d8fc:	ldr	r2, [r5, #4]
   1d900:	ldr	r6, [r3, r0, lsl #3]
   1d904:	cmp	r6, #0
   1d908:	beq	1d918 <__assert_fail@plt+0xb5e0>
   1d90c:	add	r0, r3, r0, lsl #3
   1d910:	add	r0, r0, #4
   1d914:	b	1d930 <__assert_fail@plt+0xb5f8>
   1d918:	str	r4, [r3, r0, lsl #3]
   1d91c:	ldr	r0, [r7, #12]
   1d920:	add	r0, r0, #1
   1d924:	str	r0, [r7, #12]
   1d928:	mov	r0, r8
   1d92c:	str	r9, [r5]
   1d930:	ldr	r3, [r0]
   1d934:	cmp	r2, #0
   1d938:	str	r3, [r5, #4]
   1d93c:	str	r5, [r0]
   1d940:	mov	r5, r2
   1d944:	bne	1d8dc <__assert_fail@plt+0xb5a4>
   1d948:	ldr	r4, [sl]
   1d94c:	ldr	r0, [sp, #4]
   1d950:	str	r9, [sl, #4]
   1d954:	cmp	r0, #0
   1d958:	bne	1d9f8 <__assert_fail@plt+0xb6c0>
   1d95c:	ldr	r1, [r7, #8]
   1d960:	ldr	r2, [r7, #24]
   1d964:	mov	r0, r4
   1d968:	blx	r2
   1d96c:	mov	r5, r0
   1d970:	ldr	r0, [r7, #8]
   1d974:	cmp	r5, r0
   1d978:	bcs	1da24 <__assert_fail@plt+0xb6ec>
   1d97c:	ldr	r6, [r7]
   1d980:	ldr	r0, [r6, r5, lsl #3]
   1d984:	cmp	r0, #0
   1d988:	beq	1d9a8 <__assert_fail@plt+0xb670>
   1d98c:	ldr	r0, [r8]
   1d990:	cmp	r0, #0
   1d994:	beq	1d9bc <__assert_fail@plt+0xb684>
   1d998:	mov	r1, r0
   1d99c:	ldr	r2, [r1, #4]!
   1d9a0:	str	r2, [r8]
   1d9a4:	b	1d9d0 <__assert_fail@plt+0xb698>
   1d9a8:	str	r4, [r6, r5, lsl #3]
   1d9ac:	ldr	r0, [r7, #12]
   1d9b0:	add	r0, r0, #1
   1d9b4:	str	r0, [r7, #12]
   1d9b8:	b	1d9e4 <__assert_fail@plt+0xb6ac>
   1d9bc:	mov	r0, #8
   1d9c0:	bl	23808 <__assert_fail@plt+0x114d0>
   1d9c4:	cmp	r0, #0
   1d9c8:	beq	1da18 <__assert_fail@plt+0xb6e0>
   1d9cc:	add	r1, r0, #4
   1d9d0:	str	r4, [r0]
   1d9d4:	add	r2, r6, r5, lsl #3
   1d9d8:	ldr	r3, [r2, #4]
   1d9dc:	str	r3, [r1]
   1d9e0:	str	r0, [r2, #4]
   1d9e4:	ldr	r1, [sp, #8]
   1d9e8:	str	r9, [sl]
   1d9ec:	ldr	r0, [r1, #12]
   1d9f0:	sub	r0, r0, #1
   1d9f4:	str	r0, [r1, #12]
   1d9f8:	ldr	r0, [sp, #8]
   1d9fc:	add	sl, sl, #8
   1da00:	ldr	r0, [r0, #4]
   1da04:	cmp	sl, r0
   1da08:	bcc	1d8c0 <__assert_fail@plt+0xb588>
   1da0c:	mov	r0, #1
   1da10:	sub	sp, fp, #28
   1da14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da18:	mov	r0, #0
   1da1c:	sub	sp, fp, #28
   1da20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da24:	bl	12314 <abort@plt>
   1da28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da2c:	add	fp, sp, #28
   1da30:	sub	sp, sp, #4
   1da34:	cmp	r1, #0
   1da38:	beq	1dd5c <__assert_fail@plt+0xba24>
   1da3c:	mov	r8, r2
   1da40:	mov	sl, r1
   1da44:	ldr	r1, [r0, #8]
   1da48:	ldr	r2, [r0, #24]
   1da4c:	mov	r4, r0
   1da50:	mov	r0, sl
   1da54:	blx	r2
   1da58:	mov	r7, r0
   1da5c:	ldr	r0, [r4, #8]
   1da60:	cmp	r7, r0
   1da64:	bcs	1dd5c <__assert_fail@plt+0xba24>
   1da68:	ldr	r5, [r4]
   1da6c:	mov	r9, r5
   1da70:	ldr	r1, [r9, r7, lsl #3]!
   1da74:	cmp	r1, #0
   1da78:	beq	1db04 <__assert_fail@plt+0xb7cc>
   1da7c:	cmp	r1, sl
   1da80:	beq	1daac <__assert_fail@plt+0xb774>
   1da84:	ldr	r2, [r4, #28]
   1da88:	mov	r0, sl
   1da8c:	blx	r2
   1da90:	cmp	r0, #0
   1da94:	mov	r6, r9
   1da98:	beq	1dac0 <__assert_fail@plt+0xb788>
   1da9c:	ldr	r0, [r6]
   1daa0:	cmp	r0, #0
   1daa4:	bne	1dab0 <__assert_fail@plt+0xb778>
   1daa8:	b	1db04 <__assert_fail@plt+0xb7cc>
   1daac:	mov	r0, sl
   1dab0:	cmp	r8, #0
   1dab4:	mov	r7, #0
   1dab8:	strne	r0, [r8]
   1dabc:	b	1dcf8 <__assert_fail@plt+0xb9c0>
   1dac0:	add	r6, r5, r7, lsl #3
   1dac4:	ldr	r0, [r6, #4]!
   1dac8:	cmp	r0, #0
   1dacc:	beq	1db04 <__assert_fail@plt+0xb7cc>
   1dad0:	ldr	r1, [r0]
   1dad4:	cmp	r1, sl
   1dad8:	beq	1daf8 <__assert_fail@plt+0xb7c0>
   1dadc:	ldr	r2, [r4, #28]
   1dae0:	mov	r0, sl
   1dae4:	blx	r2
   1dae8:	ldr	r6, [r6]
   1daec:	cmp	r0, #0
   1daf0:	beq	1dac4 <__assert_fail@plt+0xb78c>
   1daf4:	b	1da9c <__assert_fail@plt+0xb764>
   1daf8:	mov	r0, sl
   1dafc:	cmp	r0, #0
   1db00:	bne	1dab0 <__assert_fail@plt+0xb778>
   1db04:	vldr	s0, [r4, #8]
   1db08:	vldr	s2, [r4, #12]
   1db0c:	ldr	r0, [r4, #20]
   1db10:	vcvt.f32.u32	s0, s0
   1db14:	vcvt.f32.u32	s4, s2
   1db18:	vldr	s2, [r0, #8]
   1db1c:	vmul.f32	s6, s2, s0
   1db20:	vcmpe.f32	s6, s4
   1db24:	vmrs	APSR_nzcv, fpscr
   1db28:	bpl	1dc7c <__assert_fail@plt+0xb944>
   1db2c:	movw	r1, #28024	; 0x6d78
   1db30:	movt	r1, #2
   1db34:	cmp	r0, r1
   1db38:	beq	1dbc4 <__assert_fail@plt+0xb88c>
   1db3c:	vldr	s6, [pc, #540]	; 1dd60 <__assert_fail@plt+0xba28>
   1db40:	vcmpe.f32	s2, s6
   1db44:	vmrs	APSR_nzcv, fpscr
   1db48:	ble	1dbb0 <__assert_fail@plt+0xb878>
   1db4c:	vldr	s8, [pc, #528]	; 1dd64 <__assert_fail@plt+0xba2c>
   1db50:	vcmpe.f32	s2, s8
   1db54:	vmrs	APSR_nzcv, fpscr
   1db58:	bpl	1dbb0 <__assert_fail@plt+0xb878>
   1db5c:	vldr	s8, [pc, #516]	; 1dd68 <__assert_fail@plt+0xba30>
   1db60:	vldr	s10, [r0, #12]
   1db64:	vcmpe.f32	s10, s8
   1db68:	vmrs	APSR_nzcv, fpscr
   1db6c:	ble	1dbb0 <__assert_fail@plt+0xb878>
   1db70:	vldr	s8, [r0]
   1db74:	vcmpe.f32	s8, #0.0
   1db78:	vmrs	APSR_nzcv, fpscr
   1db7c:	blt	1dbb0 <__assert_fail@plt+0xb878>
   1db80:	vadd.f32	s6, s8, s6
   1db84:	vcmpe.f32	s6, s2
   1db88:	vmrs	APSR_nzcv, fpscr
   1db8c:	bpl	1dbb0 <__assert_fail@plt+0xb878>
   1db90:	vldr	s8, [r0, #4]
   1db94:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1db98:	vcmpe.f32	s8, s10
   1db9c:	vmrs	APSR_nzcv, fpscr
   1dba0:	bhi	1dbb0 <__assert_fail@plt+0xb878>
   1dba4:	vcmpe.f32	s6, s8
   1dba8:	vmrs	APSR_nzcv, fpscr
   1dbac:	bmi	1dbc8 <__assert_fail@plt+0xb890>
   1dbb0:	vldr	s2, [pc, #436]	; 1dd6c <__assert_fail@plt+0xba34>
   1dbb4:	movw	r0, #28024	; 0x6d78
   1dbb8:	movt	r0, #2
   1dbbc:	str	r0, [r4, #20]
   1dbc0:	b	1dbc8 <__assert_fail@plt+0xb890>
   1dbc4:	mov	r0, r1
   1dbc8:	vmul.f32	s6, s2, s0
   1dbcc:	vcmpe.f32	s6, s4
   1dbd0:	vmrs	APSR_nzcv, fpscr
   1dbd4:	bpl	1dc7c <__assert_fail@plt+0xb944>
   1dbd8:	vldr	s4, [r0, #12]
   1dbdc:	ldrb	r0, [r0, #16]
   1dbe0:	mvn	r7, #0
   1dbe4:	vmul.f32	s0, s4, s0
   1dbe8:	vldr	s4, [pc, #384]	; 1dd70 <__assert_fail@plt+0xba38>
   1dbec:	cmp	r0, #0
   1dbf0:	vmul.f32	s2, s2, s0
   1dbf4:	vseleq.f32	s0, s2, s0
   1dbf8:	vcmpe.f32	s0, s4
   1dbfc:	vmrs	APSR_nzcv, fpscr
   1dc00:	bge	1dcf8 <__assert_fail@plt+0xb9c0>
   1dc04:	vcvt.u32.f32	s0, s0
   1dc08:	mov	r0, r4
   1dc0c:	vmov	r1, s0
   1dc10:	bl	1d628 <__assert_fail@plt+0xb2f0>
   1dc14:	cmp	r0, #0
   1dc18:	beq	1dcf8 <__assert_fail@plt+0xb9c0>
   1dc1c:	ldr	r1, [r4, #8]
   1dc20:	ldr	r2, [r4, #24]
   1dc24:	mov	r0, sl
   1dc28:	blx	r2
   1dc2c:	mov	r7, r0
   1dc30:	ldr	r0, [r4, #8]
   1dc34:	cmp	r7, r0
   1dc38:	bcs	1dd5c <__assert_fail@plt+0xba24>
   1dc3c:	ldr	r5, [r4]
   1dc40:	mov	r9, r5
   1dc44:	ldr	r1, [r9, r7, lsl #3]!
   1dc48:	cmp	r1, #0
   1dc4c:	beq	1dca4 <__assert_fail@plt+0xb96c>
   1dc50:	cmp	r1, sl
   1dc54:	mov	r0, sl
   1dc58:	beq	1dc74 <__assert_fail@plt+0xb93c>
   1dc5c:	ldr	r2, [r4, #28]
   1dc60:	mov	r0, sl
   1dc64:	blx	r2
   1dc68:	cmp	r0, #0
   1dc6c:	beq	1dd0c <__assert_fail@plt+0xb9d4>
   1dc70:	ldr	r0, [r9]
   1dc74:	cmp	r0, #0
   1dc78:	bne	1dd5c <__assert_fail@plt+0xba24>
   1dc7c:	ldr	r0, [r9]
   1dc80:	cmp	r0, #0
   1dc84:	beq	1dca4 <__assert_fail@plt+0xb96c>
   1dc88:	ldr	r0, [r4, #36]	; 0x24
   1dc8c:	cmp	r0, #0
   1dc90:	beq	1dcc4 <__assert_fail@plt+0xb98c>
   1dc94:	mov	r1, r0
   1dc98:	ldr	r2, [r1, #4]!
   1dc9c:	str	r2, [r4, #36]	; 0x24
   1dca0:	b	1dcd8 <__assert_fail@plt+0xb9a0>
   1dca4:	str	sl, [r9]
   1dca8:	ldr	r0, [r4, #12]
   1dcac:	ldr	r1, [r4, #16]
   1dcb0:	add	r0, r0, #1
   1dcb4:	add	r1, r1, #1
   1dcb8:	str	r0, [r4, #12]
   1dcbc:	str	r1, [r4, #16]
   1dcc0:	b	1dcf4 <__assert_fail@plt+0xb9bc>
   1dcc4:	mov	r0, #8
   1dcc8:	bl	23808 <__assert_fail@plt+0x114d0>
   1dccc:	cmp	r0, #0
   1dcd0:	beq	1dd04 <__assert_fail@plt+0xb9cc>
   1dcd4:	add	r1, r0, #4
   1dcd8:	str	sl, [r0]
   1dcdc:	ldr	r2, [r9, #4]
   1dce0:	str	r2, [r1]
   1dce4:	str	r0, [r9, #4]
   1dce8:	ldr	r0, [r4, #16]
   1dcec:	add	r0, r0, #1
   1dcf0:	str	r0, [r4, #16]
   1dcf4:	mov	r7, #1
   1dcf8:	mov	r0, r7
   1dcfc:	sub	sp, fp, #28
   1dd00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd04:	mvn	r7, #0
   1dd08:	b	1dcf8 <__assert_fail@plt+0xb9c0>
   1dd0c:	add	r6, r5, r7, lsl #3
   1dd10:	ldr	r0, [r6, #4]!
   1dd14:	cmp	r0, #0
   1dd18:	beq	1dc7c <__assert_fail@plt+0xb944>
   1dd1c:	ldr	r1, [r0]
   1dd20:	cmp	r1, sl
   1dd24:	beq	1dd50 <__assert_fail@plt+0xba18>
   1dd28:	ldr	r2, [r4, #28]
   1dd2c:	mov	r0, sl
   1dd30:	blx	r2
   1dd34:	ldr	r6, [r6]
   1dd38:	cmp	r0, #0
   1dd3c:	beq	1dd10 <__assert_fail@plt+0xb9d8>
   1dd40:	ldr	r0, [r6]
   1dd44:	cmp	r0, #0
   1dd48:	beq	1dc7c <__assert_fail@plt+0xb944>
   1dd4c:	b	1dd5c <__assert_fail@plt+0xba24>
   1dd50:	mov	r0, sl
   1dd54:	cmp	r0, #0
   1dd58:	beq	1dc7c <__assert_fail@plt+0xb944>
   1dd5c:	bl	12314 <abort@plt>
   1dd60:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dd64:	svccc	0x00666666
   1dd68:	svccc	0x008ccccd
   1dd6c:	svccc	0x004ccccd
   1dd70:	svcmi	0x00800000
   1dd74:	push	{r4, sl, fp, lr}
   1dd78:	add	fp, sp, #8
   1dd7c:	sub	sp, sp, #8
   1dd80:	add	r2, sp, #4
   1dd84:	mov	r4, r1
   1dd88:	bl	1da28 <__assert_fail@plt+0xb6f0>
   1dd8c:	cmn	r0, #1
   1dd90:	beq	1dda4 <__assert_fail@plt+0xba6c>
   1dd94:	ldr	r1, [sp, #4]
   1dd98:	cmp	r0, #0
   1dd9c:	moveq	r4, r1
   1dda0:	b	1dda8 <__assert_fail@plt+0xba70>
   1dda4:	mov	r4, #0
   1dda8:	mov	r0, r4
   1ddac:	sub	sp, fp, #8
   1ddb0:	pop	{r4, sl, fp, pc}
   1ddb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ddb8:	add	fp, sp, #24
   1ddbc:	mov	r9, r1
   1ddc0:	ldr	r1, [r0, #8]
   1ddc4:	ldr	r2, [r0, #24]
   1ddc8:	mov	r5, r0
   1ddcc:	mov	r0, r9
   1ddd0:	blx	r2
   1ddd4:	mov	r7, r0
   1ddd8:	ldr	r0, [r5, #8]
   1dddc:	cmp	r7, r0
   1dde0:	bcs	1e040 <__assert_fail@plt+0xbd08>
   1dde4:	ldr	r6, [r5]
   1dde8:	mov	r8, #0
   1ddec:	mov	r4, r6
   1ddf0:	ldr	r1, [r4, r7, lsl #3]!
   1ddf4:	cmp	r1, #0
   1ddf8:	beq	1deac <__assert_fail@plt+0xbb74>
   1ddfc:	cmp	r1, r9
   1de00:	beq	1de1c <__assert_fail@plt+0xbae4>
   1de04:	ldr	r2, [r5, #28]
   1de08:	mov	r0, r9
   1de0c:	blx	r2
   1de10:	cmp	r0, #0
   1de14:	beq	1de54 <__assert_fail@plt+0xbb1c>
   1de18:	ldr	r9, [r4]
   1de1c:	add	r0, r6, r7, lsl #3
   1de20:	ldr	r0, [r0, #4]
   1de24:	cmp	r0, #0
   1de28:	beq	1de9c <__assert_fail@plt+0xbb64>
   1de2c:	ldm	r0, {r1, r2}
   1de30:	stm	r4, {r1, r2}
   1de34:	mov	r1, #0
   1de38:	str	r1, [r0]
   1de3c:	ldr	r1, [r5, #36]	; 0x24
   1de40:	str	r1, [r0, #4]
   1de44:	str	r0, [r5, #36]	; 0x24
   1de48:	cmp	r9, #0
   1de4c:	bne	1dee4 <__assert_fail@plt+0xbbac>
   1de50:	b	1deac <__assert_fail@plt+0xbb74>
   1de54:	add	r7, r6, r7, lsl #3
   1de58:	ldr	r0, [r7, #4]!
   1de5c:	cmp	r0, #0
   1de60:	beq	1deac <__assert_fail@plt+0xbb74>
   1de64:	ldr	r1, [r0]
   1de68:	cmp	r1, r9
   1de6c:	beq	1deb4 <__assert_fail@plt+0xbb7c>
   1de70:	ldr	r2, [r5, #28]
   1de74:	mov	r0, r9
   1de78:	blx	r2
   1de7c:	ldr	r1, [r7]
   1de80:	cmp	r0, #0
   1de84:	bne	1debc <__assert_fail@plt+0xbb84>
   1de88:	ldr	r0, [r1, #4]!
   1de8c:	cmp	r0, #0
   1de90:	mov	r7, r1
   1de94:	bne	1de64 <__assert_fail@plt+0xbb2c>
   1de98:	b	1deac <__assert_fail@plt+0xbb74>
   1de9c:	mov	r0, #0
   1dea0:	str	r0, [r4]
   1dea4:	cmp	r9, #0
   1dea8:	bne	1dee4 <__assert_fail@plt+0xbbac>
   1deac:	mov	r0, r8
   1deb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1deb4:	mov	r1, r0
   1deb8:	b	1dec0 <__assert_fail@plt+0xbb88>
   1debc:	ldr	r9, [r1]
   1dec0:	ldr	r0, [r1, #4]
   1dec4:	str	r0, [r7]
   1dec8:	mov	r0, #0
   1decc:	str	r0, [r1]
   1ded0:	ldr	r0, [r5, #36]	; 0x24
   1ded4:	str	r0, [r1, #4]
   1ded8:	str	r1, [r5, #36]	; 0x24
   1dedc:	cmp	r9, #0
   1dee0:	beq	1deac <__assert_fail@plt+0xbb74>
   1dee4:	ldr	r0, [r5, #16]
   1dee8:	sub	r0, r0, #1
   1deec:	str	r0, [r5, #16]
   1def0:	ldr	r0, [r4]
   1def4:	cmp	r0, #0
   1def8:	bne	1e000 <__assert_fail@plt+0xbcc8>
   1defc:	ldr	r0, [r5, #12]
   1df00:	vldr	s0, [r5, #8]
   1df04:	sub	r1, r0, #1
   1df08:	str	r1, [r5, #12]
   1df0c:	vmov	s2, r1
   1df10:	ldr	r0, [r5, #20]
   1df14:	vcvt.f32.u32	s0, s0
   1df18:	vcvt.f32.u32	s2, s2
   1df1c:	vldr	s4, [r0]
   1df20:	vmul.f32	s6, s4, s0
   1df24:	vcmpe.f32	s6, s2
   1df28:	vmrs	APSR_nzcv, fpscr
   1df2c:	ble	1e000 <__assert_fail@plt+0xbcc8>
   1df30:	movw	r1, #28024	; 0x6d78
   1df34:	movt	r1, #2
   1df38:	cmp	r0, r1
   1df3c:	beq	1df94 <__assert_fail@plt+0xbc5c>
   1df40:	vldr	s8, [pc, #252]	; 1e044 <__assert_fail@plt+0xbd0c>
   1df44:	vldr	s6, [r0, #8]
   1df48:	vcmpe.f32	s6, s8
   1df4c:	vmrs	APSR_nzcv, fpscr
   1df50:	ble	1df80 <__assert_fail@plt+0xbc48>
   1df54:	vldr	s10, [pc, #236]	; 1e048 <__assert_fail@plt+0xbd10>
   1df58:	vcmpe.f32	s6, s10
   1df5c:	vmrs	APSR_nzcv, fpscr
   1df60:	bpl	1df80 <__assert_fail@plt+0xbc48>
   1df64:	vcmpe.f32	s4, #0.0
   1df68:	vmrs	APSR_nzcv, fpscr
   1df6c:	vldrge	s10, [r0, #12]
   1df70:	vldrge	s12, [pc, #212]	; 1e04c <__assert_fail@plt+0xbd14>
   1df74:	vcmpege.f32	s10, s12
   1df78:	vmrsge	APSR_nzcv, fpscr
   1df7c:	bgt	1e00c <__assert_fail@plt+0xbcd4>
   1df80:	vldr	s4, [pc, #200]	; 1e050 <__assert_fail@plt+0xbd18>
   1df84:	movw	r0, #28024	; 0x6d78
   1df88:	movt	r0, #2
   1df8c:	str	r0, [r5, #20]
   1df90:	b	1df98 <__assert_fail@plt+0xbc60>
   1df94:	mov	r0, r1
   1df98:	vmul.f32	s4, s4, s0
   1df9c:	vcmpe.f32	s4, s2
   1dfa0:	vmrs	APSR_nzcv, fpscr
   1dfa4:	ble	1e000 <__assert_fail@plt+0xbcc8>
   1dfa8:	ldrb	r1, [r0, #16]
   1dfac:	vldr	s2, [r0, #4]
   1dfb0:	cmp	r1, #0
   1dfb4:	vmul.f32	s0, s2, s0
   1dfb8:	vldreq	s2, [r0, #8]
   1dfbc:	mov	r0, r5
   1dfc0:	vmuleq.f32	s0, s0, s2
   1dfc4:	vcvt.u32.f32	s0, s0
   1dfc8:	vmov	r1, s0
   1dfcc:	bl	1d628 <__assert_fail@plt+0xb2f0>
   1dfd0:	cmp	r0, #0
   1dfd4:	bne	1e000 <__assert_fail@plt+0xbcc8>
   1dfd8:	ldr	r0, [r5, #36]	; 0x24
   1dfdc:	cmp	r0, #0
   1dfe0:	beq	1dff8 <__assert_fail@plt+0xbcc0>
   1dfe4:	ldr	r4, [r0, #4]
   1dfe8:	bl	1cc78 <__assert_fail@plt+0xa940>
   1dfec:	cmp	r4, #0
   1dff0:	mov	r0, r4
   1dff4:	bne	1dfe4 <__assert_fail@plt+0xbcac>
   1dff8:	mov	r0, #0
   1dffc:	str	r0, [r5, #36]	; 0x24
   1e000:	mov	r8, r9
   1e004:	mov	r0, r8
   1e008:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e00c:	vadd.f32	s8, s4, s8
   1e010:	vcmpe.f32	s8, s6
   1e014:	vmrs	APSR_nzcv, fpscr
   1e018:	bpl	1df80 <__assert_fail@plt+0xbc48>
   1e01c:	vldr	s6, [r0, #4]
   1e020:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1e024:	vcmpe.f32	s6, s10
   1e028:	vmrs	APSR_nzcv, fpscr
   1e02c:	bhi	1df80 <__assert_fail@plt+0xbc48>
   1e030:	vcmpe.f32	s8, s6
   1e034:	vmrs	APSR_nzcv, fpscr
   1e038:	bmi	1df98 <__assert_fail@plt+0xbc60>
   1e03c:	b	1df80 <__assert_fail@plt+0xbc48>
   1e040:	bl	12314 <abort@plt>
   1e044:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e048:	svccc	0x00666666
   1e04c:	svccc	0x008ccccd
   1e050:	andeq	r0, r0, r0
   1e054:	b	1ddb4 <__assert_fail@plt+0xba7c>
   1e058:	push	{r4, r5, r6, sl, fp, lr}
   1e05c:	add	fp, sp, #16
   1e060:	mov	r5, r0
   1e064:	mov	r0, #16
   1e068:	mov	r4, r1
   1e06c:	bl	22208 <__assert_fail@plt+0xfed0>
   1e070:	cmp	r4, #0
   1e074:	mov	r6, r0
   1e078:	mov	r1, #4
   1e07c:	movweq	r4, #1
   1e080:	mov	r0, r4
   1e084:	bl	222d8 <__assert_fail@plt+0xffa0>
   1e088:	movw	r2, #57524	; 0xe0b4
   1e08c:	mov	r1, #0
   1e090:	cmp	r5, #0
   1e094:	movt	r2, #1
   1e098:	str	r1, [r0]
   1e09c:	stm	r6, {r0, r4}
   1e0a0:	mov	r0, r6
   1e0a4:	str	r1, [r6, #8]
   1e0a8:	movne	r2, r5
   1e0ac:	str	r2, [r6, #12]
   1e0b0:	pop	{r4, r5, r6, sl, fp, pc}
   1e0b4:	mov	r0, #0
   1e0b8:	bx	lr
   1e0bc:	push	{r4, sl, fp, lr}
   1e0c0:	add	fp, sp, #8
   1e0c4:	mov	r4, r0
   1e0c8:	ldr	r0, [r0]
   1e0cc:	bl	1cc78 <__assert_fail@plt+0xa940>
   1e0d0:	mov	r0, r4
   1e0d4:	pop	{r4, sl, fp, lr}
   1e0d8:	b	1cc78 <__assert_fail@plt+0xa940>
   1e0dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e0e0:	add	fp, sp, #24
   1e0e4:	mov	r6, r1
   1e0e8:	mov	r1, r0
   1e0ec:	mov	r4, r0
   1e0f0:	ldr	r0, [r1, #4]!
   1e0f4:	ldr	r2, [r1, #4]
   1e0f8:	sub	r0, r0, #1
   1e0fc:	cmp	r0, r2
   1e100:	bls	1e10c <__assert_fail@plt+0xbdd4>
   1e104:	ldr	r0, [r4]
   1e108:	b	1e120 <__assert_fail@plt+0xbde8>
   1e10c:	ldr	r0, [r4]
   1e110:	mov	r2, #4
   1e114:	bl	223b4 <__assert_fail@plt+0x1007c>
   1e118:	str	r0, [r4]
   1e11c:	ldr	r2, [r4, #8]
   1e120:	add	r5, r2, #1
   1e124:	mov	r8, #1
   1e128:	cmp	r2, #0
   1e12c:	str	r5, [r4, #8]
   1e130:	str	r6, [r0, r5, lsl #2]
   1e134:	ldr	r6, [r4]
   1e138:	ldr	r9, [r6, r5, lsl #2]
   1e13c:	beq	1e178 <__assert_fail@plt+0xbe40>
   1e140:	ldr	r4, [r4, #12]
   1e144:	lsr	r7, r5, #1
   1e148:	mov	r1, r9
   1e14c:	ldr	r0, [r6, r7, lsl #2]
   1e150:	blx	r4
   1e154:	cmp	r0, #0
   1e158:	bgt	1e174 <__assert_fail@plt+0xbe3c>
   1e15c:	ldr	r0, [r6, r7, lsl #2]
   1e160:	cmp	r7, #1
   1e164:	str	r0, [r6, r5, lsl #2]
   1e168:	mov	r5, r7
   1e16c:	bne	1e144 <__assert_fail@plt+0xbe0c>
   1e170:	b	1e178 <__assert_fail@plt+0xbe40>
   1e174:	mov	r8, r5
   1e178:	mov	r0, #0
   1e17c:	str	r9, [r6, r8, lsl #2]
   1e180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e184:	ldr	r1, [r0, #8]
   1e188:	cmp	r1, #0
   1e18c:	moveq	r0, #0
   1e190:	bxeq	lr
   1e194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e198:	add	fp, sp, #28
   1e19c:	sub	sp, sp, #12
   1e1a0:	ldr	r2, [r0]
   1e1a4:	sub	r6, r1, #1
   1e1a8:	ldr	r3, [r2, #4]
   1e1ac:	str	r6, [r0, #8]
   1e1b0:	ldr	r1, [r2, r1, lsl #2]
   1e1b4:	str	r3, [sp, #4]
   1e1b8:	str	r1, [r2, #4]
   1e1bc:	ldr	r9, [r0]
   1e1c0:	mov	r7, r9
   1e1c4:	ldr	r1, [r7, #4]!
   1e1c8:	str	r1, [sp, #8]
   1e1cc:	mov	r1, #0
   1e1d0:	cmp	r1, r6, lsr #1
   1e1d4:	beq	1e23c <__assert_fail@plt+0xbf04>
   1e1d8:	ldr	r5, [r0, #12]
   1e1dc:	lsr	sl, r6, #1
   1e1e0:	mov	r8, #1
   1e1e4:	lsl	r4, r8, #1
   1e1e8:	cmp	r6, r8, lsl #1
   1e1ec:	bls	1e208 <__assert_fail@plt+0xbed0>
   1e1f0:	orr	r7, r4, #1
   1e1f4:	ldr	r0, [r9, r4, lsl #2]
   1e1f8:	ldr	r1, [r9, r7, lsl #2]
   1e1fc:	blx	r5
   1e200:	cmp	r0, #0
   1e204:	movlt	r4, r7
   1e208:	mov	r7, r9
   1e20c:	ldr	r1, [sp, #8]
   1e210:	ldr	r0, [r7, r4, lsl #2]!
   1e214:	blx	r5
   1e218:	cmp	r0, #0
   1e21c:	ble	1e238 <__assert_fail@plt+0xbf00>
   1e220:	ldr	r0, [r9, r4, lsl #2]
   1e224:	cmp	r4, sl
   1e228:	str	r0, [r9, r8, lsl #2]
   1e22c:	mov	r8, r4
   1e230:	bls	1e1e4 <__assert_fail@plt+0xbeac>
   1e234:	b	1e23c <__assert_fail@plt+0xbf04>
   1e238:	add	r7, r9, r8, lsl #2
   1e23c:	ldr	r0, [sp, #8]
   1e240:	str	r0, [r7]
   1e244:	ldr	r0, [sp, #4]
   1e248:	sub	sp, fp, #28
   1e24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e250:	movw	ip, #26215	; 0x6667
   1e254:	mov	r2, #0
   1e258:	cmp	r0, #0
   1e25c:	strb	r2, [r1, #11]
   1e260:	add	r1, r1, #10
   1e264:	movt	ip, #26214	; 0x6666
   1e268:	blt	1e2a4 <__assert_fail@plt+0xbf6c>
   1e26c:	smmul	r3, r0, ip
   1e270:	asr	r2, r3, #2
   1e274:	add	r2, r2, r3, lsr #31
   1e278:	add	r3, r2, r2, lsl #2
   1e27c:	sub	r3, r0, r3, lsl #1
   1e280:	add	r0, r0, #9
   1e284:	add	r3, r3, #48	; 0x30
   1e288:	cmp	r0, #18
   1e28c:	mov	r0, r2
   1e290:	strb	r3, [r1], #-1
   1e294:	bhi	1e26c <__assert_fail@plt+0xbf34>
   1e298:	add	r1, r1, #1
   1e29c:	mov	r0, r1
   1e2a0:	bx	lr
   1e2a4:	smmul	r3, r0, ip
   1e2a8:	asr	r2, r3, #2
   1e2ac:	add	r2, r2, r3, lsr #31
   1e2b0:	add	r3, r2, r2, lsl #2
   1e2b4:	rsb	r3, r0, r3, lsl #1
   1e2b8:	add	r0, r0, #9
   1e2bc:	add	r3, r3, #48	; 0x30
   1e2c0:	cmp	r0, #18
   1e2c4:	mov	r0, r2
   1e2c8:	strb	r3, [r1], #-1
   1e2cc:	bhi	1e2a4 <__assert_fail@plt+0xbf6c>
   1e2d0:	mov	r0, #45	; 0x2d
   1e2d4:	strb	r0, [r1]
   1e2d8:	mov	r0, r1
   1e2dc:	bx	lr
   1e2e0:	movw	ip, #52429	; 0xcccd
   1e2e4:	mov	r2, #0
   1e2e8:	strb	r2, [r1, #10]
   1e2ec:	add	r1, r1, #9
   1e2f0:	movt	ip, #52428	; 0xcccc
   1e2f4:	umull	r3, r2, r0, ip
   1e2f8:	cmp	r0, #9
   1e2fc:	lsr	r2, r2, #3
   1e300:	add	r3, r2, r2, lsl #2
   1e304:	sub	r3, r0, r3, lsl #1
   1e308:	mov	r0, r2
   1e30c:	orr	r3, r3, #48	; 0x30
   1e310:	strb	r3, [r1], #-1
   1e314:	bhi	1e2f4 <__assert_fail@plt+0xbfbc>
   1e318:	add	r0, r1, #1
   1e31c:	bx	lr
   1e320:	push	{r4, r5, r6, sl, fp, lr}
   1e324:	add	fp, sp, #16
   1e328:	mov	r5, r0
   1e32c:	mov	r0, #0
   1e330:	mov	r4, r1
   1e334:	add	r6, r2, #19
   1e338:	strb	r0, [r2, #20]
   1e33c:	mov	r0, r5
   1e340:	mov	r1, r4
   1e344:	mov	r2, #10
   1e348:	mov	r3, #0
   1e34c:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   1e350:	add	r2, r0, r0, lsl #2
   1e354:	sub	r2, r5, r2, lsl #1
   1e358:	orr	r2, r2, #48	; 0x30
   1e35c:	strb	r2, [r6], #-1
   1e360:	rsbs	r2, r5, #9
   1e364:	mov	r5, r0
   1e368:	rscs	r2, r4, #0
   1e36c:	mov	r4, r1
   1e370:	bcc	1e33c <__assert_fail@plt+0xc004>
   1e374:	add	r0, r6, #1
   1e378:	pop	{r4, r5, r6, sl, fp, pc}
   1e37c:	push	{r4, r5, fp, lr}
   1e380:	add	fp, sp, #8
   1e384:	mov	r4, r1
   1e388:	mov	r5, r0
   1e38c:	bl	12140 <strlen@plt>
   1e390:	mov	r1, r0
   1e394:	mov	r0, r5
   1e398:	mov	r2, r4
   1e39c:	pop	{r4, r5, fp, lr}
   1e3a0:	b	1e3a4 <__assert_fail@plt+0xc06c>
   1e3a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3a8:	add	fp, sp, #28
   1e3ac:	sub	sp, sp, #28
   1e3b0:	mov	r4, r2
   1e3b4:	mov	r5, r1
   1e3b8:	mov	r7, r0
   1e3bc:	add	r6, r0, r1
   1e3c0:	bl	12044 <__ctype_get_mb_cur_max@plt>
   1e3c4:	cmp	r0, #1
   1e3c8:	bls	1e6b8 <__assert_fail@plt+0xc380>
   1e3cc:	cmp	r5, #1
   1e3d0:	blt	1e720 <__assert_fail@plt+0xc3e8>
   1e3d4:	and	r2, r4, #1
   1e3d8:	and	sl, r4, #2
   1e3dc:	mov	r5, #0
   1e3e0:	add	r8, sp, #12
   1e3e4:	add	r9, sp, #16
   1e3e8:	mov	r4, #0
   1e3ec:	eor	r3, r2, #1
   1e3f0:	ldrb	r0, [r7]
   1e3f4:	sub	r0, r0, #32
   1e3f8:	cmp	r0, #94	; 0x5e
   1e3fc:	bhi	1e598 <__assert_fail@plt+0xc260>
   1e400:	add	r1, pc, #0
   1e404:	ldr	pc, [r1, r0, lsl #2]
   1e408:	andeq	lr, r1, r4, lsl #11
   1e40c:	andeq	lr, r1, r4, lsl #11
   1e410:	andeq	lr, r1, r4, lsl #11
   1e414:	andeq	lr, r1, r4, lsl #11
   1e418:	muleq	r1, r8, r5
   1e41c:	andeq	lr, r1, r4, lsl #11
   1e420:	andeq	lr, r1, r4, lsl #11
   1e424:	andeq	lr, r1, r4, lsl #11
   1e428:	andeq	lr, r1, r4, lsl #11
   1e42c:	andeq	lr, r1, r4, lsl #11
   1e430:	andeq	lr, r1, r4, lsl #11
   1e434:	andeq	lr, r1, r4, lsl #11
   1e438:	andeq	lr, r1, r4, lsl #11
   1e43c:	andeq	lr, r1, r4, lsl #11
   1e440:	andeq	lr, r1, r4, lsl #11
   1e444:	andeq	lr, r1, r4, lsl #11
   1e448:	andeq	lr, r1, r4, lsl #11
   1e44c:	andeq	lr, r1, r4, lsl #11
   1e450:	andeq	lr, r1, r4, lsl #11
   1e454:	andeq	lr, r1, r4, lsl #11
   1e458:	andeq	lr, r1, r4, lsl #11
   1e45c:	andeq	lr, r1, r4, lsl #11
   1e460:	andeq	lr, r1, r4, lsl #11
   1e464:	andeq	lr, r1, r4, lsl #11
   1e468:	andeq	lr, r1, r4, lsl #11
   1e46c:	andeq	lr, r1, r4, lsl #11
   1e470:	andeq	lr, r1, r4, lsl #11
   1e474:	andeq	lr, r1, r4, lsl #11
   1e478:	andeq	lr, r1, r4, lsl #11
   1e47c:	andeq	lr, r1, r4, lsl #11
   1e480:	andeq	lr, r1, r4, lsl #11
   1e484:	andeq	lr, r1, r4, lsl #11
   1e488:	muleq	r1, r8, r5
   1e48c:	andeq	lr, r1, r4, lsl #11
   1e490:	andeq	lr, r1, r4, lsl #11
   1e494:	andeq	lr, r1, r4, lsl #11
   1e498:	andeq	lr, r1, r4, lsl #11
   1e49c:	andeq	lr, r1, r4, lsl #11
   1e4a0:	andeq	lr, r1, r4, lsl #11
   1e4a4:	andeq	lr, r1, r4, lsl #11
   1e4a8:	andeq	lr, r1, r4, lsl #11
   1e4ac:	andeq	lr, r1, r4, lsl #11
   1e4b0:	andeq	lr, r1, r4, lsl #11
   1e4b4:	andeq	lr, r1, r4, lsl #11
   1e4b8:	andeq	lr, r1, r4, lsl #11
   1e4bc:	andeq	lr, r1, r4, lsl #11
   1e4c0:	andeq	lr, r1, r4, lsl #11
   1e4c4:	andeq	lr, r1, r4, lsl #11
   1e4c8:	andeq	lr, r1, r4, lsl #11
   1e4cc:	andeq	lr, r1, r4, lsl #11
   1e4d0:	andeq	lr, r1, r4, lsl #11
   1e4d4:	andeq	lr, r1, r4, lsl #11
   1e4d8:	andeq	lr, r1, r4, lsl #11
   1e4dc:	andeq	lr, r1, r4, lsl #11
   1e4e0:	andeq	lr, r1, r4, lsl #11
   1e4e4:	andeq	lr, r1, r4, lsl #11
   1e4e8:	andeq	lr, r1, r4, lsl #11
   1e4ec:	andeq	lr, r1, r4, lsl #11
   1e4f0:	andeq	lr, r1, r4, lsl #11
   1e4f4:	andeq	lr, r1, r4, lsl #11
   1e4f8:	andeq	lr, r1, r4, lsl #11
   1e4fc:	andeq	lr, r1, r4, lsl #11
   1e500:	andeq	lr, r1, r4, lsl #11
   1e504:	andeq	lr, r1, r4, lsl #11
   1e508:	muleq	r1, r8, r5
   1e50c:	andeq	lr, r1, r4, lsl #11
   1e510:	andeq	lr, r1, r4, lsl #11
   1e514:	andeq	lr, r1, r4, lsl #11
   1e518:	andeq	lr, r1, r4, lsl #11
   1e51c:	andeq	lr, r1, r4, lsl #11
   1e520:	andeq	lr, r1, r4, lsl #11
   1e524:	andeq	lr, r1, r4, lsl #11
   1e528:	andeq	lr, r1, r4, lsl #11
   1e52c:	andeq	lr, r1, r4, lsl #11
   1e530:	andeq	lr, r1, r4, lsl #11
   1e534:	andeq	lr, r1, r4, lsl #11
   1e538:	andeq	lr, r1, r4, lsl #11
   1e53c:	andeq	lr, r1, r4, lsl #11
   1e540:	andeq	lr, r1, r4, lsl #11
   1e544:	andeq	lr, r1, r4, lsl #11
   1e548:	andeq	lr, r1, r4, lsl #11
   1e54c:	andeq	lr, r1, r4, lsl #11
   1e550:	andeq	lr, r1, r4, lsl #11
   1e554:	andeq	lr, r1, r4, lsl #11
   1e558:	andeq	lr, r1, r4, lsl #11
   1e55c:	andeq	lr, r1, r4, lsl #11
   1e560:	andeq	lr, r1, r4, lsl #11
   1e564:	andeq	lr, r1, r4, lsl #11
   1e568:	andeq	lr, r1, r4, lsl #11
   1e56c:	andeq	lr, r1, r4, lsl #11
   1e570:	andeq	lr, r1, r4, lsl #11
   1e574:	andeq	lr, r1, r4, lsl #11
   1e578:	andeq	lr, r1, r4, lsl #11
   1e57c:	andeq	lr, r1, r4, lsl #11
   1e580:	andeq	lr, r1, r4, lsl #11
   1e584:	add	r4, r4, #1
   1e588:	add	r7, r7, #1
   1e58c:	cmp	r7, r6
   1e590:	bcc	1e3f0 <__assert_fail@plt+0xc0b8>
   1e594:	b	1e72c <__assert_fail@plt+0xc3f4>
   1e598:	str	r3, [sp, #4]
   1e59c:	str	r2, [sp, #8]
   1e5a0:	str	r5, [sp, #20]
   1e5a4:	str	r5, [sp, #16]
   1e5a8:	sub	r2, r6, r7
   1e5ac:	mov	r0, r8
   1e5b0:	mov	r1, r7
   1e5b4:	mov	r3, r9
   1e5b8:	mov	r5, r7
   1e5bc:	bl	24024 <__assert_fail@plt+0x11cec>
   1e5c0:	cmp	r0, #0
   1e5c4:	beq	1e5e0 <__assert_fail@plt+0xc2a8>
   1e5c8:	mov	r7, r0
   1e5cc:	cmn	r0, #2
   1e5d0:	beq	1e650 <__assert_fail@plt+0xc318>
   1e5d4:	cmn	r7, #1
   1e5d8:	bne	1e5e4 <__assert_fail@plt+0xc2ac>
   1e5dc:	b	1e670 <__assert_fail@plt+0xc338>
   1e5e0:	mov	r7, #1
   1e5e4:	ldr	r0, [sp, #12]
   1e5e8:	bl	11e70 <wcwidth@plt>
   1e5ec:	cmp	r0, #0
   1e5f0:	blt	1e60c <__assert_fail@plt+0xc2d4>
   1e5f4:	mvn	r1, #-2147483648	; 0x80000000
   1e5f8:	sub	r1, r1, r4
   1e5fc:	cmp	r0, r1
   1e600:	bgt	1e648 <__assert_fail@plt+0xc310>
   1e604:	add	r4, r0, r4
   1e608:	b	1e630 <__assert_fail@plt+0xc2f8>
   1e60c:	cmp	sl, #0
   1e610:	bne	1e698 <__assert_fail@plt+0xc360>
   1e614:	ldr	r0, [sp, #12]
   1e618:	bl	11fc0 <iswcntrl@plt>
   1e61c:	cmp	r0, #0
   1e620:	bne	1e630 <__assert_fail@plt+0xc2f8>
   1e624:	cmn	r4, #-2147483647	; 0x80000001
   1e628:	beq	1e648 <__assert_fail@plt+0xc310>
   1e62c:	add	r4, r4, #1
   1e630:	mov	r0, r9
   1e634:	add	r7, r5, r7
   1e638:	bl	11ef4 <mbsinit@plt>
   1e63c:	cmp	r0, #0
   1e640:	beq	1e5a8 <__assert_fail@plt+0xc270>
   1e644:	b	1e688 <__assert_fail@plt+0xc350>
   1e648:	mov	r0, #7
   1e64c:	b	1e69c <__assert_fail@plt+0xc364>
   1e650:	ldr	r0, [sp, #4]
   1e654:	ldr	r1, [sp, #8]
   1e658:	mov	r7, r6
   1e65c:	add	r4, r4, r0
   1e660:	mov	r0, #1
   1e664:	cmp	r1, #0
   1e668:	beq	1e688 <__assert_fail@plt+0xc350>
   1e66c:	b	1e69c <__assert_fail@plt+0xc364>
   1e670:	ldr	r1, [sp, #8]
   1e674:	mov	r0, #1
   1e678:	cmp	r1, #0
   1e67c:	bne	1e69c <__assert_fail@plt+0xc364>
   1e680:	add	r4, r4, #1
   1e684:	add	r7, r5, #1
   1e688:	ldr	r2, [sp, #8]
   1e68c:	ldr	r3, [sp, #4]
   1e690:	mov	r5, #0
   1e694:	b	1e58c <__assert_fail@plt+0xc254>
   1e698:	mov	r0, #1
   1e69c:	ldr	r2, [sp, #8]
   1e6a0:	ldr	r3, [sp, #4]
   1e6a4:	mov	r7, r5
   1e6a8:	cmp	r0, #0
   1e6ac:	mov	r5, #0
   1e6b0:	beq	1e58c <__assert_fail@plt+0xc254>
   1e6b4:	b	1e710 <__assert_fail@plt+0xc3d8>
   1e6b8:	and	r8, r4, #2
   1e6bc:	mov	r4, #0
   1e6c0:	cmp	r7, r6
   1e6c4:	bcs	1e72c <__assert_fail@plt+0xc3f4>
   1e6c8:	ldrb	r5, [r7], #1
   1e6cc:	bl	1211c <__ctype_b_loc@plt>
   1e6d0:	ldr	r0, [r0]
   1e6d4:	add	r0, r0, r5, lsl #1
   1e6d8:	ldrh	r1, [r0]
   1e6dc:	tst	r1, #16384	; 0x4000
   1e6e0:	bne	1e6f8 <__assert_fail@plt+0xc3c0>
   1e6e4:	cmp	r8, #0
   1e6e8:	bne	1e728 <__assert_fail@plt+0xc3f0>
   1e6ec:	mov	r0, #0
   1e6f0:	tst	r1, #2
   1e6f4:	bne	1e708 <__assert_fail@plt+0xc3d0>
   1e6f8:	cmn	r4, #-2147483647	; 0x80000001
   1e6fc:	mov	r0, #0
   1e700:	mvneq	r0, #0
   1e704:	addne	r4, r4, #1
   1e708:	ands	r0, r0, #7
   1e70c:	beq	1e6c0 <__assert_fail@plt+0xc388>
   1e710:	mvn	r4, #0
   1e714:	cmp	r0, #7
   1e718:	mvneq	r4, #-2147483648	; 0x80000000
   1e71c:	b	1e72c <__assert_fail@plt+0xc3f4>
   1e720:	mov	r4, #0
   1e724:	b	1e72c <__assert_fail@plt+0xc3f4>
   1e728:	mvn	r4, #0
   1e72c:	mov	r0, r4
   1e730:	sub	sp, fp, #28
   1e734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e738:	push	{r4, r5, fp, lr}
   1e73c:	add	fp, sp, #8
   1e740:	sub	sp, sp, #128	; 0x80
   1e744:	mvn	r4, #0
   1e748:	cmp	r0, #2
   1e74c:	bne	1e79c <__assert_fail@plt+0xc464>
   1e750:	movw	r0, #28044	; 0x6d8c
   1e754:	movt	r0, #2
   1e758:	bl	120a4 <getenv@plt>
   1e75c:	bl	1e864 <__assert_fail@plt+0xc52c>
   1e760:	mov	r5, r0
   1e764:	movw	r0, #28060	; 0x6d9c
   1e768:	movt	r0, #2
   1e76c:	bl	120a4 <getenv@plt>
   1e770:	bl	1e864 <__assert_fail@plt+0xc52c>
   1e774:	mov	r1, r0
   1e778:	cmp	r0, #0
   1e77c:	mvneq	r1, #0
   1e780:	cmp	r5, r1
   1e784:	mov	r4, r1
   1e788:	movcc	r4, r5
   1e78c:	cmp	r5, #0
   1e790:	bne	1e858 <__assert_fail@plt+0xc520>
   1e794:	mov	r0, #1
   1e798:	mov	r4, r1
   1e79c:	cmp	r0, #1
   1e7a0:	bne	1e7d4 <__assert_fail@plt+0xc49c>
   1e7a4:	mov	r2, sp
   1e7a8:	mov	r0, #0
   1e7ac:	mov	r1, #128	; 0x80
   1e7b0:	bl	122c0 <sched_getaffinity@plt>
   1e7b4:	cmp	r0, #0
   1e7b8:	beq	1e838 <__assert_fail@plt+0xc500>
   1e7bc:	mov	r0, #84	; 0x54
   1e7c0:	bl	11f6c <sysconf@plt>
   1e7c4:	mov	r5, r0
   1e7c8:	cmp	r0, #0
   1e7cc:	movle	r5, #1
   1e7d0:	b	1e850 <__assert_fail@plt+0xc518>
   1e7d4:	mov	r0, #83	; 0x53
   1e7d8:	bl	11f6c <sysconf@plt>
   1e7dc:	mov	r5, r0
   1e7e0:	sub	r0, r0, #1
   1e7e4:	cmp	r0, #1
   1e7e8:	bhi	1e820 <__assert_fail@plt+0xc4e8>
   1e7ec:	mov	r2, sp
   1e7f0:	mov	r0, #0
   1e7f4:	mov	r1, #128	; 0x80
   1e7f8:	bl	122c0 <sched_getaffinity@plt>
   1e7fc:	cmp	r0, #0
   1e800:	bne	1e850 <__assert_fail@plt+0xc518>
   1e804:	mov	r1, sp
   1e808:	mov	r0, #128	; 0x80
   1e80c:	bl	11f0c <__sched_cpucount@plt>
   1e810:	cmp	r0, #0
   1e814:	cmpne	r0, r5
   1e818:	bls	1e850 <__assert_fail@plt+0xc518>
   1e81c:	b	1e824 <__assert_fail@plt+0xc4ec>
   1e820:	mov	r0, r5
   1e824:	cmp	r0, #0
   1e828:	mov	r5, r0
   1e82c:	bgt	1e850 <__assert_fail@plt+0xc518>
   1e830:	mov	r5, #1
   1e834:	b	1e850 <__assert_fail@plt+0xc518>
   1e838:	mov	r1, sp
   1e83c:	mov	r0, #128	; 0x80
   1e840:	bl	11f0c <__sched_cpucount@plt>
   1e844:	cmp	r0, #0
   1e848:	beq	1e7bc <__assert_fail@plt+0xc484>
   1e84c:	mov	r5, r0
   1e850:	cmp	r5, r4
   1e854:	movcc	r4, r5
   1e858:	mov	r0, r4
   1e85c:	sub	sp, fp, #8
   1e860:	pop	{r4, r5, fp, pc}
   1e864:	push	{fp, lr}
   1e868:	mov	fp, sp
   1e86c:	sub	sp, sp, #8
   1e870:	mov	r2, r0
   1e874:	mov	r0, #0
   1e878:	cmp	r2, #0
   1e87c:	bne	1e888 <__assert_fail@plt+0xc550>
   1e880:	b	1e8fc <__assert_fail@plt+0xc5c4>
   1e884:	add	r2, r2, #1
   1e888:	ldrb	r1, [r2]
   1e88c:	sub	r3, r1, #9
   1e890:	cmp	r3, #5
   1e894:	bcc	1e884 <__assert_fail@plt+0xc54c>
   1e898:	cmp	r1, #32
   1e89c:	beq	1e884 <__assert_fail@plt+0xc54c>
   1e8a0:	sub	r1, r1, #48	; 0x30
   1e8a4:	cmp	r1, #9
   1e8a8:	bhi	1e8fc <__assert_fail@plt+0xc5c4>
   1e8ac:	mov	r0, #0
   1e8b0:	add	r1, sp, #4
   1e8b4:	str	r0, [sp, #4]
   1e8b8:	mov	r0, r2
   1e8bc:	mov	r2, #10
   1e8c0:	bl	12134 <strtoul@plt>
   1e8c4:	ldr	r1, [sp, #4]
   1e8c8:	cmp	r1, #0
   1e8cc:	bne	1e8d8 <__assert_fail@plt+0xc5a0>
   1e8d0:	b	1e908 <__assert_fail@plt+0xc5d0>
   1e8d4:	add	r1, r1, #1
   1e8d8:	ldrb	r2, [r1]
   1e8dc:	sub	r3, r2, #9
   1e8e0:	cmp	r3, #5
   1e8e4:	bcc	1e8d4 <__assert_fail@plt+0xc59c>
   1e8e8:	cmp	r2, #32
   1e8ec:	beq	1e8d4 <__assert_fail@plt+0xc59c>
   1e8f0:	cmp	r2, #0
   1e8f4:	cmpne	r2, #44	; 0x2c
   1e8f8:	bne	1e904 <__assert_fail@plt+0xc5cc>
   1e8fc:	mov	sp, fp
   1e900:	pop	{fp, pc}
   1e904:	str	r1, [sp, #4]
   1e908:	mov	r0, #0
   1e90c:	mov	sp, fp
   1e910:	pop	{fp, pc}
   1e914:	andeq	r0, r0, r0
   1e918:	push	{r4, sl, fp, lr}
   1e91c:	add	fp, sp, #8
   1e920:	sub	sp, sp, #64	; 0x40
   1e924:	mov	r0, #85	; 0x55
   1e928:	bl	11f6c <sysconf@plt>
   1e92c:	mov	r4, r0
   1e930:	mov	r0, #30
   1e934:	bl	11f6c <sysconf@plt>
   1e938:	orr	r1, r0, r4
   1e93c:	cmn	r1, #1
   1e940:	ble	1e958 <__assert_fail@plt+0xc620>
   1e944:	vmov	s0, r0
   1e948:	vcvt.f64.s32	d16, s0
   1e94c:	vmov	s0, r4
   1e950:	vcvt.f64.s32	d17, s0
   1e954:	b	1e980 <__assert_fail@plt+0xc648>
   1e958:	mov	r0, sp
   1e95c:	bl	120bc <sysinfo@plt>
   1e960:	cmp	r0, #0
   1e964:	vldrne	d0, [pc, #36]	; 1e990 <__assert_fail@plt+0xc658>
   1e968:	subne	sp, fp, #8
   1e96c:	popne	{r4, sl, fp, pc}
   1e970:	vldr	s0, [sp, #16]
   1e974:	vldr	s2, [sp, #52]	; 0x34
   1e978:	vcvt.f64.u32	d16, s2
   1e97c:	vcvt.f64.u32	d17, s0
   1e980:	vmul.f64	d0, d17, d16
   1e984:	sub	sp, fp, #8
   1e988:	pop	{r4, sl, fp, pc}
   1e98c:	nop	{0}
   1e990:	andeq	r0, r0, r0
   1e994:	orrsmi	r0, r0, r0
   1e998:	push	{r4, sl, fp, lr}
   1e99c:	add	fp, sp, #8
   1e9a0:	sub	sp, sp, #64	; 0x40
   1e9a4:	mov	r0, #86	; 0x56
   1e9a8:	bl	11f6c <sysconf@plt>
   1e9ac:	mov	r4, r0
   1e9b0:	mov	r0, #30
   1e9b4:	bl	11f6c <sysconf@plt>
   1e9b8:	orr	r1, r0, r4
   1e9bc:	cmp	r1, #0
   1e9c0:	blt	1e9e0 <__assert_fail@plt+0xc6a8>
   1e9c4:	vmov	s0, r0
   1e9c8:	vcvt.f64.s32	d16, s0
   1e9cc:	vmov	s0, r4
   1e9d0:	vcvt.f64.s32	d17, s0
   1e9d4:	vmul.f64	d0, d17, d16
   1e9d8:	sub	sp, fp, #8
   1e9dc:	pop	{r4, sl, fp, pc}
   1e9e0:	mov	r0, sp
   1e9e4:	bl	120bc <sysinfo@plt>
   1e9e8:	cmp	r0, #0
   1e9ec:	beq	1ea28 <__assert_fail@plt+0xc6f0>
   1e9f0:	mov	r0, #85	; 0x55
   1e9f4:	bl	11f6c <sysconf@plt>
   1e9f8:	mov	r4, r0
   1e9fc:	mov	r0, #30
   1ea00:	bl	11f6c <sysconf@plt>
   1ea04:	orr	r1, r0, r4
   1ea08:	cmn	r1, #1
   1ea0c:	ble	1ea50 <__assert_fail@plt+0xc718>
   1ea10:	vmov	s0, r0
   1ea14:	vcvt.f64.s32	d16, s0
   1ea18:	vmov	s0, r4
   1ea1c:	vcvt.f64.s32	d17, s0
   1ea20:	vmul.f64	d16, d17, d16
   1ea24:	b	1ea64 <__assert_fail@plt+0xc72c>
   1ea28:	vldr	s0, [sp, #20]
   1ea2c:	vldr	s2, [sp, #28]
   1ea30:	vldr	s4, [sp, #52]	; 0x34
   1ea34:	vcvt.f64.u32	d16, s2
   1ea38:	vcvt.f64.u32	d17, s0
   1ea3c:	vcvt.f64.u32	d18, s4
   1ea40:	vadd.f64	d16, d17, d16
   1ea44:	vmul.f64	d0, d16, d18
   1ea48:	sub	sp, fp, #8
   1ea4c:	pop	{r4, sl, fp, pc}
   1ea50:	mov	r0, sp
   1ea54:	bl	120bc <sysinfo@plt>
   1ea58:	cmp	r0, #0
   1ea5c:	beq	1ea74 <__assert_fail@plt+0xc73c>
   1ea60:	vldr	d16, [pc, #32]	; 1ea88 <__assert_fail@plt+0xc750>
   1ea64:	vmov.f64	d17, #80	; 0x3e800000  0.250
   1ea68:	vmul.f64	d0, d16, d17
   1ea6c:	sub	sp, fp, #8
   1ea70:	pop	{r4, sl, fp, pc}
   1ea74:	vldr	s0, [sp, #16]
   1ea78:	vldr	s2, [sp, #52]	; 0x34
   1ea7c:	vcvt.f64.u32	d16, s2
   1ea80:	vcvt.f64.u32	d17, s0
   1ea84:	b	1ea20 <__assert_fail@plt+0xc6e8>
   1ea88:	andeq	r0, r0, r0
   1ea8c:	orrsmi	r0, r0, r0
   1ea90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ea94:	add	fp, sp, #24
   1ea98:	movw	r7, #35012	; 0x88c4
   1ea9c:	mov	r4, r0
   1eaa0:	ldr	r9, [r0]
   1eaa4:	ldr	r8, [r0, #4]
   1eaa8:	mov	r5, r1
   1eaac:	movt	r7, #3
   1eab0:	ldr	r0, [r7]
   1eab4:	cmp	r0, #0
   1eab8:	blt	1eaec <__assert_fail@plt+0xc7b4>
   1eabc:	mov	r0, r4
   1eac0:	mov	r1, r5
   1eac4:	bl	1229c <pipe2@plt>
   1eac8:	mov	r6, r0
   1eacc:	cmn	r0, #1
   1ead0:	bgt	1eb14 <__assert_fail@plt+0xc7dc>
   1ead4:	bl	12164 <__errno_location@plt>
   1ead8:	ldr	r0, [r0]
   1eadc:	cmp	r0, #38	; 0x26
   1eae0:	bne	1eb14 <__assert_fail@plt+0xc7dc>
   1eae4:	mvn	r0, #0
   1eae8:	str	r0, [r7]
   1eaec:	movw	r0, #63487	; 0xf7ff
   1eaf0:	movt	r0, #65527	; 0xfff7
   1eaf4:	tst	r5, r0
   1eaf8:	beq	1eb24 <__assert_fail@plt+0xc7ec>
   1eafc:	bl	12164 <__errno_location@plt>
   1eb00:	mov	r1, #22
   1eb04:	str	r1, [r0]
   1eb08:	mvn	r6, #0
   1eb0c:	mov	r0, r6
   1eb10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eb14:	mov	r0, #1
   1eb18:	str	r0, [r7]
   1eb1c:	mov	r0, r6
   1eb20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eb24:	mov	r0, r4
   1eb28:	bl	121e8 <pipe@plt>
   1eb2c:	mvn	r6, #0
   1eb30:	cmp	r0, #0
   1eb34:	blt	1eb0c <__assert_fail@plt+0xc7d4>
   1eb38:	tst	r5, #2048	; 0x800
   1eb3c:	bne	1ebbc <__assert_fail@plt+0xc884>
   1eb40:	mov	r6, #0
   1eb44:	tst	r5, #524288	; 0x80000
   1eb48:	beq	1eb0c <__assert_fail@plt+0xc7d4>
   1eb4c:	ldr	r0, [r4, #4]
   1eb50:	mov	r1, #1
   1eb54:	mov	r2, #0
   1eb58:	bl	23d00 <__assert_fail@plt+0x119c8>
   1eb5c:	cmp	r0, #0
   1eb60:	blt	1ec24 <__assert_fail@plt+0xc8ec>
   1eb64:	ldr	r1, [r4, #4]
   1eb68:	orr	r2, r0, #1
   1eb6c:	mov	r0, r1
   1eb70:	mov	r1, #2
   1eb74:	bl	23d00 <__assert_fail@plt+0x119c8>
   1eb78:	cmn	r0, #1
   1eb7c:	beq	1ec24 <__assert_fail@plt+0xc8ec>
   1eb80:	ldr	r0, [r4]
   1eb84:	mov	r1, #1
   1eb88:	mov	r2, #0
   1eb8c:	mov	r6, #0
   1eb90:	bl	23d00 <__assert_fail@plt+0x119c8>
   1eb94:	cmp	r0, #0
   1eb98:	blt	1ec24 <__assert_fail@plt+0xc8ec>
   1eb9c:	ldr	r1, [r4]
   1eba0:	orr	r2, r0, #1
   1eba4:	mov	r0, r1
   1eba8:	mov	r1, #2
   1ebac:	bl	23d00 <__assert_fail@plt+0x119c8>
   1ebb0:	cmn	r0, #1
   1ebb4:	bne	1eb0c <__assert_fail@plt+0xc7d4>
   1ebb8:	b	1ec24 <__assert_fail@plt+0xc8ec>
   1ebbc:	ldr	r0, [r4, #4]
   1ebc0:	mov	r1, #3
   1ebc4:	mov	r2, #0
   1ebc8:	bl	23d00 <__assert_fail@plt+0x119c8>
   1ebcc:	cmp	r0, #0
   1ebd0:	blt	1ec24 <__assert_fail@plt+0xc8ec>
   1ebd4:	ldr	r1, [r4, #4]
   1ebd8:	orr	r2, r0, #2048	; 0x800
   1ebdc:	mov	r0, r1
   1ebe0:	mov	r1, #4
   1ebe4:	bl	23d00 <__assert_fail@plt+0x119c8>
   1ebe8:	cmn	r0, #1
   1ebec:	beq	1ec24 <__assert_fail@plt+0xc8ec>
   1ebf0:	ldr	r0, [r4]
   1ebf4:	mov	r1, #3
   1ebf8:	mov	r2, #0
   1ebfc:	bl	23d00 <__assert_fail@plt+0x119c8>
   1ec00:	cmp	r0, #0
   1ec04:	blt	1ec24 <__assert_fail@plt+0xc8ec>
   1ec08:	ldr	r1, [r4]
   1ec0c:	orr	r2, r0, #2048	; 0x800
   1ec10:	mov	r0, r1
   1ec14:	mov	r1, #4
   1ec18:	bl	23d00 <__assert_fail@plt+0x119c8>
   1ec1c:	cmn	r0, #1
   1ec20:	bne	1eb40 <__assert_fail@plt+0xc808>
   1ec24:	bl	12164 <__errno_location@plt>
   1ec28:	mov	r5, r0
   1ec2c:	ldr	r6, [r0]
   1ec30:	ldr	r0, [r4]
   1ec34:	bl	12320 <close@plt>
   1ec38:	ldr	r0, [r4, #4]
   1ec3c:	bl	12320 <close@plt>
   1ec40:	str	r9, [r4]
   1ec44:	str	r8, [r4, #4]
   1ec48:	str	r6, [r5]
   1ec4c:	b	1eb08 <__assert_fail@plt+0xc7d0>
   1ec50:	push	{r4, sl, fp, lr}
   1ec54:	add	fp, sp, #8
   1ec58:	sub	sp, sp, #8
   1ec5c:	movw	r0, #28077	; 0x6dad
   1ec60:	movt	r0, #2
   1ec64:	bl	120a4 <getenv@plt>
   1ec68:	cmp	r0, #0
   1ec6c:	movw	r4, #4201	; 0x1069
   1ec70:	ldrbne	r1, [r0]
   1ec74:	movt	r4, #3
   1ec78:	cmpne	r1, #0
   1ec7c:	beq	1ec9c <__assert_fail@plt+0xc964>
   1ec80:	add	r1, sp, #4
   1ec84:	mov	r2, #10
   1ec88:	bl	11e34 <strtol@plt>
   1ec8c:	ldr	r1, [sp, #4]
   1ec90:	ldrb	r1, [r1]
   1ec94:	cmp	r1, #0
   1ec98:	moveq	r4, r0
   1ec9c:	mov	r0, r4
   1eca0:	sub	sp, fp, #8
   1eca4:	pop	{r4, sl, fp, pc}
   1eca8:	push	{r4, r5, fp, lr}
   1ecac:	add	fp, sp, #8
   1ecb0:	cmp	r0, #0
   1ecb4:	beq	1ed48 <__assert_fail@plt+0xca10>
   1ecb8:	mov	r1, #47	; 0x2f
   1ecbc:	mov	r4, r0
   1ecc0:	bl	12248 <strrchr@plt>
   1ecc4:	cmp	r0, #0
   1ecc8:	mov	r5, r4
   1eccc:	addne	r5, r0, #1
   1ecd0:	sub	r0, r5, r4
   1ecd4:	cmp	r0, #7
   1ecd8:	blt	1ed2c <__assert_fail@plt+0xc9f4>
   1ecdc:	movw	r1, #28149	; 0x6df5
   1ece0:	sub	r0, r5, #7
   1ece4:	mov	r2, #7
   1ece8:	movt	r1, #2
   1ecec:	bl	122fc <strncmp@plt>
   1ecf0:	cmp	r0, #0
   1ecf4:	bne	1ed2c <__assert_fail@plt+0xc9f4>
   1ecf8:	movw	r1, #28157	; 0x6dfd
   1ecfc:	mov	r0, r5
   1ed00:	mov	r2, #3
   1ed04:	movt	r1, #2
   1ed08:	bl	122fc <strncmp@plt>
   1ed0c:	cmp	r0, #0
   1ed10:	beq	1ed1c <__assert_fail@plt+0xc9e4>
   1ed14:	mov	r4, r5
   1ed18:	b	1ed2c <__assert_fail@plt+0xc9f4>
   1ed1c:	movw	r0, #33464	; 0x82b8
   1ed20:	add	r4, r5, #3
   1ed24:	movt	r0, #3
   1ed28:	str	r4, [r0]
   1ed2c:	movw	r0, #33468	; 0x82bc
   1ed30:	movt	r0, #3
   1ed34:	str	r4, [r0]
   1ed38:	movw	r0, #35016	; 0x88c8
   1ed3c:	movt	r0, #3
   1ed40:	str	r4, [r0]
   1ed44:	pop	{r4, r5, fp, pc}
   1ed48:	movw	r0, #33480	; 0x82c8
   1ed4c:	mov	r1, #55	; 0x37
   1ed50:	mov	r2, #1
   1ed54:	movt	r0, #3
   1ed58:	ldr	r3, [r0]
   1ed5c:	movw	r0, #28093	; 0x6dbd
   1ed60:	movt	r0, #2
   1ed64:	bl	12014 <fwrite@plt>
   1ed68:	bl	12314 <abort@plt>
   1ed6c:	push	{r4, r5, r6, sl, fp, lr}
   1ed70:	add	fp, sp, #16
   1ed74:	mov	r4, r0
   1ed78:	movw	r0, #35024	; 0x88d0
   1ed7c:	movt	r0, #3
   1ed80:	cmp	r4, #0
   1ed84:	moveq	r4, r0
   1ed88:	bl	12164 <__errno_location@plt>
   1ed8c:	ldr	r6, [r0]
   1ed90:	mov	r5, r0
   1ed94:	mov	r0, r4
   1ed98:	mov	r1, #48	; 0x30
   1ed9c:	bl	22668 <__assert_fail@plt+0x10330>
   1eda0:	str	r6, [r5]
   1eda4:	pop	{r4, r5, r6, sl, fp, pc}
   1eda8:	movw	r1, #35024	; 0x88d0
   1edac:	cmp	r0, #0
   1edb0:	movt	r1, #3
   1edb4:	movne	r1, r0
   1edb8:	ldr	r0, [r1]
   1edbc:	bx	lr
   1edc0:	movw	r2, #35024	; 0x88d0
   1edc4:	cmp	r0, #0
   1edc8:	movt	r2, #3
   1edcc:	movne	r2, r0
   1edd0:	str	r1, [r2]
   1edd4:	bx	lr
   1edd8:	movw	r3, #35024	; 0x88d0
   1eddc:	cmp	r0, #0
   1ede0:	movt	r3, #3
   1ede4:	movne	r3, r0
   1ede8:	ubfx	r0, r1, #5, #3
   1edec:	and	r1, r1, #31
   1edf0:	add	r0, r3, r0, lsl #2
   1edf4:	ldr	r3, [r0, #8]
   1edf8:	eor	r2, r2, r3, lsr r1
   1edfc:	and	r2, r2, #1
   1ee00:	eor	r2, r3, r2, lsl r1
   1ee04:	str	r2, [r0, #8]
   1ee08:	mov	r0, #1
   1ee0c:	and	r0, r0, r3, lsr r1
   1ee10:	bx	lr
   1ee14:	movw	r2, #35024	; 0x88d0
   1ee18:	cmp	r0, #0
   1ee1c:	movt	r2, #3
   1ee20:	movne	r2, r0
   1ee24:	ldr	r0, [r2, #4]
   1ee28:	str	r1, [r2, #4]
   1ee2c:	bx	lr
   1ee30:	movw	r3, #35024	; 0x88d0
   1ee34:	cmp	r0, #0
   1ee38:	movt	r3, #3
   1ee3c:	movne	r3, r0
   1ee40:	cmp	r1, #0
   1ee44:	mov	r0, #10
   1ee48:	cmpne	r2, #0
   1ee4c:	str	r0, [r3]
   1ee50:	bne	1ee60 <__assert_fail@plt+0xcb28>
   1ee54:	push	{fp, lr}
   1ee58:	mov	fp, sp
   1ee5c:	bl	12314 <abort@plt>
   1ee60:	str	r1, [r3, #40]	; 0x28
   1ee64:	str	r2, [r3, #44]	; 0x2c
   1ee68:	bx	lr
   1ee6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee70:	add	fp, sp, #28
   1ee74:	sub	sp, sp, #20
   1ee78:	mov	r7, r0
   1ee7c:	ldr	r0, [fp, #8]
   1ee80:	movw	r5, #35024	; 0x88d0
   1ee84:	mov	r8, r3
   1ee88:	mov	r9, r2
   1ee8c:	mov	sl, r1
   1ee90:	movt	r5, #3
   1ee94:	cmp	r0, #0
   1ee98:	movne	r5, r0
   1ee9c:	bl	12164 <__errno_location@plt>
   1eea0:	mov	r4, r0
   1eea4:	ldm	r5, {r0, r1}
   1eea8:	ldr	r2, [r5, #40]	; 0x28
   1eeac:	ldr	r3, [r5, #44]	; 0x2c
   1eeb0:	add	r5, r5, #8
   1eeb4:	ldr	r6, [r4]
   1eeb8:	stm	sp, {r0, r1, r5}
   1eebc:	str	r2, [sp, #12]
   1eec0:	str	r3, [sp, #16]
   1eec4:	mov	r0, r7
   1eec8:	mov	r1, sl
   1eecc:	mov	r2, r9
   1eed0:	mov	r3, r8
   1eed4:	bl	1eee4 <__assert_fail@plt+0xcbac>
   1eed8:	str	r6, [r4]
   1eedc:	sub	sp, fp, #28
   1eee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eee8:	add	fp, sp, #28
   1eeec:	sub	sp, sp, #156	; 0x9c
   1eef0:	str	r0, [sp, #80]	; 0x50
   1eef4:	ldr	r0, [fp, #12]
   1eef8:	mov	r6, r1
   1eefc:	mov	r9, r3
   1ef00:	str	r2, [fp, #-84]	; 0xffffffac
   1ef04:	and	r1, r0, #4
   1ef08:	str	r1, [sp, #32]
   1ef0c:	and	r1, r0, #1
   1ef10:	str	r1, [sp, #36]	; 0x24
   1ef14:	ubfx	r4, r0, #1, #1
   1ef18:	bl	12044 <__ctype_get_mb_cur_max@plt>
   1ef1c:	str	r0, [sp, #40]	; 0x28
   1ef20:	ldr	r0, [fp, #24]
   1ef24:	ldr	r7, [fp, #8]
   1ef28:	mov	r1, #0
   1ef2c:	mov	r5, #1
   1ef30:	str	r1, [fp, #-56]	; 0xffffffc8
   1ef34:	mov	r1, #0
   1ef38:	str	r1, [sp, #60]	; 0x3c
   1ef3c:	str	r0, [sp, #76]	; 0x4c
   1ef40:	ldr	r0, [fp, #20]
   1ef44:	str	r0, [sp, #72]	; 0x48
   1ef48:	mov	r0, #0
   1ef4c:	str	r0, [sp, #56]	; 0x38
   1ef50:	mov	r0, #0
   1ef54:	str	r0, [sp, #92]	; 0x5c
   1ef58:	mov	r0, #0
   1ef5c:	str	r0, [fp, #-76]	; 0xffffffb4
   1ef60:	mov	r0, #0
   1ef64:	cmp	r7, #10
   1ef68:	bhi	1fee8 <__assert_fail@plt+0xdbb0>
   1ef6c:	add	r1, pc, #28
   1ef70:	mov	sl, r6
   1ef74:	ldr	r6, [sp, #80]	; 0x50
   1ef78:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ef7c:	mov	r8, #0
   1ef80:	mov	r2, #1
   1ef84:	mov	r3, #0
   1ef88:	mov	lr, r9
   1ef8c:	ldr	pc, [r1, r7, lsl #2]
   1ef90:	andeq	pc, r1, r4, ror r0	; <UNPREDICTABLE>
   1ef94:	andeq	pc, r1, r0, lsr #1
   1ef98:	andeq	pc, r1, r4, rrx
   1ef9c:	andeq	pc, r1, ip, asr r0	; <UNPREDICTABLE>
   1efa0:	muleq	r1, r4, r0
   1efa4:	andeq	pc, r1, r8, ror #1
   1efa8:	andeq	pc, r1, r4, lsl #1
   1efac:	andeq	pc, r1, r4, asr #2
   1efb0:			; <UNDEFINED> instruction: 0x0001efbc
   1efb4:			; <UNDEFINED> instruction: 0x0001efbc
   1efb8:	andeq	lr, r1, r4, ror #31
   1efbc:	movw	r0, #28237	; 0x6e4d
   1efc0:	mov	r1, r7
   1efc4:	movt	r0, #2
   1efc8:	bl	208f4 <__assert_fail@plt+0xe5bc>
   1efcc:	str	r0, [sp, #72]	; 0x48
   1efd0:	movw	r0, #23746	; 0x5cc2
   1efd4:	mov	r1, r7
   1efd8:	movt	r0, #2
   1efdc:	bl	208f4 <__assert_fail@plt+0xe5bc>
   1efe0:	str	r0, [sp, #76]	; 0x4c
   1efe4:	str	r5, [fp, #-48]	; 0xffffffd0
   1efe8:	mov	r8, #0
   1efec:	mov	r5, r7
   1eff0:	tst	r4, #1
   1eff4:	bne	1f02c <__assert_fail@plt+0xccf4>
   1eff8:	ldr	r0, [sp, #72]	; 0x48
   1effc:	ldrb	r0, [r0]
   1f000:	cmp	r0, #0
   1f004:	beq	1f02c <__assert_fail@plt+0xccf4>
   1f008:	ldr	r1, [sp, #72]	; 0x48
   1f00c:	mov	r8, #0
   1f010:	add	r1, r1, #1
   1f014:	cmp	r8, sl
   1f018:	strbcc	r0, [r6, r8]
   1f01c:	ldrb	r0, [r1, r8]
   1f020:	add	r8, r8, #1
   1f024:	cmp	r0, #0
   1f028:	bne	1f014 <__assert_fail@plt+0xccdc>
   1f02c:	ldr	r7, [sp, #76]	; 0x4c
   1f030:	mov	r0, r7
   1f034:	bl	12140 <strlen@plt>
   1f038:	str	r7, [sp, #92]	; 0x5c
   1f03c:	mov	r7, r5
   1f040:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f044:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1f048:	str	r0, [fp, #-76]	; 0xffffffb4
   1f04c:	mov	r2, #1
   1f050:	mov	r3, r4
   1f054:	mov	lr, r9
   1f058:	b	1f144 <__assert_fail@plt+0xce0c>
   1f05c:	mov	r0, #1
   1f060:	b	1f0a0 <__assert_fail@plt+0xcd68>
   1f064:	tst	r4, #1
   1f068:	bne	1f0a0 <__assert_fail@plt+0xcd68>
   1f06c:	mov	r2, r0
   1f070:	b	1f0c8 <__assert_fail@plt+0xcd90>
   1f074:	mov	r7, #0
   1f078:	mov	r8, #0
   1f07c:	mov	r2, r0
   1f080:	b	1f140 <__assert_fail@plt+0xce08>
   1f084:	mov	r0, #1
   1f088:	mov	r8, #0
   1f08c:	mov	r7, #5
   1f090:	b	1f0fc <__assert_fail@plt+0xcdc4>
   1f094:	mov	r2, #1
   1f098:	tst	r4, #1
   1f09c:	beq	1f0c8 <__assert_fail@plt+0xcd90>
   1f0a0:	mov	r1, #1
   1f0a4:	mov	r8, #0
   1f0a8:	mov	r7, #2
   1f0ac:	mov	r2, r0
   1f0b0:	mov	r3, #1
   1f0b4:	str	r1, [fp, #-76]	; 0xffffffb4
   1f0b8:	movw	r1, #23746	; 0x5cc2
   1f0bc:	movt	r1, #2
   1f0c0:	str	r1, [sp, #92]	; 0x5c
   1f0c4:	b	1f144 <__assert_fail@plt+0xce0c>
   1f0c8:	cmp	sl, #0
   1f0cc:	mov	r8, #1
   1f0d0:	mov	r7, #2
   1f0d4:	movne	r0, #39	; 0x27
   1f0d8:	strbne	r0, [r6]
   1f0dc:	movw	r0, #23746	; 0x5cc2
   1f0e0:	movt	r0, #2
   1f0e4:	b	1f134 <__assert_fail@plt+0xcdfc>
   1f0e8:	mov	r7, #5
   1f0ec:	tst	r4, #1
   1f0f0:	beq	1f118 <__assert_fail@plt+0xcde0>
   1f0f4:	mov	r0, #1
   1f0f8:	mov	r8, #0
   1f0fc:	str	r0, [fp, #-76]	; 0xffffffb4
   1f100:	movw	r0, #25519	; 0x63af
   1f104:	mov	r2, #1
   1f108:	mov	r3, #1
   1f10c:	movt	r0, #2
   1f110:	str	r0, [sp, #92]	; 0x5c
   1f114:	b	1f144 <__assert_fail@plt+0xce0c>
   1f118:	cmp	sl, #0
   1f11c:	mov	r8, #1
   1f120:	mov	r2, #1
   1f124:	movne	r0, #34	; 0x22
   1f128:	strbne	r0, [r6]
   1f12c:	movw	r0, #25519	; 0x63af
   1f130:	movt	r0, #2
   1f134:	str	r0, [sp, #92]	; 0x5c
   1f138:	mov	r0, #1
   1f13c:	str	r0, [fp, #-76]	; 0xffffffb4
   1f140:	mov	r3, #0
   1f144:	ldr	r0, [fp, #16]
   1f148:	str	r3, [fp, #-72]	; 0xffffffb8
   1f14c:	str	r7, [fp, #-64]	; 0xffffffc0
   1f150:	str	r2, [sp, #84]	; 0x54
   1f154:	cmp	r0, #0
   1f158:	movwne	r0, #1
   1f15c:	and	r0, r0, r3
   1f160:	str	r0, [fp, #-88]	; 0xffffffa8
   1f164:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1f168:	cmp	r0, #0
   1f16c:	movwne	r0, #1
   1f170:	subs	r4, r7, #2
   1f174:	mov	r7, #0
   1f178:	and	r1, r0, r3
   1f17c:	str	r4, [fp, #-80]	; 0xffffffb0
   1f180:	and	r1, r2, r1
   1f184:	str	r1, [sp, #48]	; 0x30
   1f188:	clz	r1, r4
   1f18c:	lsr	r1, r1, #5
   1f190:	and	r1, r1, r3
   1f194:	eor	r3, r3, #1
   1f198:	str	r1, [sp, #64]	; 0x40
   1f19c:	mov	r1, r4
   1f1a0:	str	r3, [sp, #88]	; 0x58
   1f1a4:	movwne	r1, #1
   1f1a8:	orr	r3, r1, r3
   1f1ac:	and	r1, r1, r2
   1f1b0:	and	r0, r0, r1
   1f1b4:	str	r3, [sp, #68]	; 0x44
   1f1b8:	str	r1, [fp, #-68]	; 0xffffffbc
   1f1bc:	str	r0, [fp, #-60]	; 0xffffffc4
   1f1c0:	eor	r0, r2, #1
   1f1c4:	str	r0, [sp, #52]	; 0x34
   1f1c8:	cmn	lr, #1
   1f1cc:	beq	1f1dc <__assert_fail@plt+0xcea4>
   1f1d0:	cmp	r7, lr
   1f1d4:	bne	1f1e8 <__assert_fail@plt+0xceb0>
   1f1d8:	b	1fd10 <__assert_fail@plt+0xd9d8>
   1f1dc:	ldrb	r0, [ip, r7]
   1f1e0:	cmp	r0, #0
   1f1e4:	beq	1fd18 <__assert_fail@plt+0xd9e0>
   1f1e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f1ec:	mov	r9, #0
   1f1f0:	str	r5, [fp, #-48]	; 0xffffffd0
   1f1f4:	cmp	r0, #0
   1f1f8:	beq	1f22c <__assert_fail@plt+0xcef4>
   1f1fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1f200:	add	r4, r7, r0
   1f204:	cmp	r0, #2
   1f208:	bcc	1f224 <__assert_fail@plt+0xceec>
   1f20c:	cmn	lr, #1
   1f210:	bne	1f224 <__assert_fail@plt+0xceec>
   1f214:	mov	r0, ip
   1f218:	bl	12140 <strlen@plt>
   1f21c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f220:	mov	lr, r0
   1f224:	cmp	r4, lr
   1f228:	bls	1f234 <__assert_fail@plt+0xcefc>
   1f22c:	mov	r0, #0
   1f230:	b	1f274 <__assert_fail@plt+0xcf3c>
   1f234:	ldr	r1, [sp, #92]	; 0x5c
   1f238:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1f23c:	add	r0, ip, r7
   1f240:	mov	r4, lr
   1f244:	bl	11f3c <memcmp@plt>
   1f248:	ldr	r2, [sp, #88]	; 0x58
   1f24c:	cmp	r0, #0
   1f250:	mov	r1, r0
   1f254:	movwne	r1, #1
   1f258:	orr	r1, r1, r2
   1f25c:	tst	r1, #1
   1f260:	beq	1fda8 <__assert_fail@plt+0xda70>
   1f264:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f268:	clz	r0, r0
   1f26c:	mov	lr, r4
   1f270:	lsr	r0, r0, #5
   1f274:	str	r0, [fp, #-52]	; 0xffffffcc
   1f278:	ldrb	r5, [ip, r7]
   1f27c:	cmp	r5, #126	; 0x7e
   1f280:	bhi	1f638 <__assert_fail@plt+0xd300>
   1f284:	add	r3, pc, #16
   1f288:	mov	r4, #1
   1f28c:	mov	r2, #110	; 0x6e
   1f290:	mov	r0, #97	; 0x61
   1f294:	mov	r1, #0
   1f298:	ldr	pc, [r3, r5, lsl #2]
   1f29c:	andeq	pc, r1, r4, lsr r5	; <UNPREDICTABLE>
   1f2a0:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2a4:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2a8:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2ac:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2b0:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2b4:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2b8:	andeq	pc, r1, ip, ror #13
   1f2bc:	andeq	pc, r1, r4, lsl r5	; <UNPREDICTABLE>
   1f2c0:	andeq	pc, r1, ip, lsl #10
   1f2c4:	andeq	pc, r1, r0, lsr #10
   1f2c8:	andeq	pc, r1, r0, lsr #11
   1f2cc:	andeq	pc, r1, r4, lsl #10
   1f2d0:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   1f2d4:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2d8:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2dc:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2e0:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2e4:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2e8:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2ec:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2f0:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2f4:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2f8:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f2fc:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f300:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f304:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f308:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f30c:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f310:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f314:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f318:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f31c:	andeq	pc, r1, r4, lsr #13
   1f320:	andeq	pc, r1, r8, lsr #13
   1f324:	andeq	pc, r1, r8, lsr #13
   1f328:	andeq	pc, r1, ip, lsr #9
   1f32c:	andeq	pc, r1, r8, lsr #13
   1f330:	muleq	r1, r8, r4
   1f334:	andeq	pc, r1, r8, lsr #13
   1f338:	andeq	pc, r1, r8, lsr #11
   1f33c:	andeq	pc, r1, r8, lsr #13
   1f340:	andeq	pc, r1, r8, lsr #13
   1f344:	andeq	pc, r1, r8, lsr #13
   1f348:	muleq	r1, r8, r4
   1f34c:	muleq	r1, r8, r4
   1f350:	muleq	r1, r8, r4
   1f354:	muleq	r1, r8, r4
   1f358:	muleq	r1, r8, r4
   1f35c:	muleq	r1, r8, r4
   1f360:	muleq	r1, r8, r4
   1f364:	muleq	r1, r8, r4
   1f368:	muleq	r1, r8, r4
   1f36c:	muleq	r1, r8, r4
   1f370:	muleq	r1, r8, r4
   1f374:	muleq	r1, r8, r4
   1f378:	muleq	r1, r8, r4
   1f37c:	muleq	r1, r8, r4
   1f380:	muleq	r1, r8, r4
   1f384:	muleq	r1, r8, r4
   1f388:	andeq	pc, r1, r8, lsr #13
   1f38c:	andeq	pc, r1, r8, lsr #13
   1f390:	andeq	pc, r1, r8, lsr #13
   1f394:	andeq	pc, r1, r8, lsr #13
   1f398:	andeq	pc, r1, r4, ror r5	; <UNPREDICTABLE>
   1f39c:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   1f3a0:	muleq	r1, r8, r4
   1f3a4:	muleq	r1, r8, r4
   1f3a8:	muleq	r1, r8, r4
   1f3ac:	muleq	r1, r8, r4
   1f3b0:	muleq	r1, r8, r4
   1f3b4:	muleq	r1, r8, r4
   1f3b8:	muleq	r1, r8, r4
   1f3bc:	muleq	r1, r8, r4
   1f3c0:	muleq	r1, r8, r4
   1f3c4:	muleq	r1, r8, r4
   1f3c8:	muleq	r1, r8, r4
   1f3cc:	muleq	r1, r8, r4
   1f3d0:	muleq	r1, r8, r4
   1f3d4:	muleq	r1, r8, r4
   1f3d8:	muleq	r1, r8, r4
   1f3dc:	muleq	r1, r8, r4
   1f3e0:	muleq	r1, r8, r4
   1f3e4:	muleq	r1, r8, r4
   1f3e8:	muleq	r1, r8, r4
   1f3ec:	muleq	r1, r8, r4
   1f3f0:	muleq	r1, r8, r4
   1f3f4:	muleq	r1, r8, r4
   1f3f8:	muleq	r1, r8, r4
   1f3fc:	muleq	r1, r8, r4
   1f400:	muleq	r1, r8, r4
   1f404:	muleq	r1, r8, r4
   1f408:	andeq	pc, r1, r8, lsr #13
   1f40c:	andeq	pc, r1, r0, ror #9
   1f410:	muleq	r1, r8, r4
   1f414:	andeq	pc, r1, r8, lsr #13
   1f418:	muleq	r1, r8, r4
   1f41c:	andeq	pc, r1, r8, lsr #13
   1f420:	muleq	r1, r8, r4
   1f424:	muleq	r1, r8, r4
   1f428:	muleq	r1, r8, r4
   1f42c:	muleq	r1, r8, r4
   1f430:	muleq	r1, r8, r4
   1f434:	muleq	r1, r8, r4
   1f438:	muleq	r1, r8, r4
   1f43c:	muleq	r1, r8, r4
   1f440:	muleq	r1, r8, r4
   1f444:	muleq	r1, r8, r4
   1f448:	muleq	r1, r8, r4
   1f44c:	muleq	r1, r8, r4
   1f450:	muleq	r1, r8, r4
   1f454:	muleq	r1, r8, r4
   1f458:	muleq	r1, r8, r4
   1f45c:	muleq	r1, r8, r4
   1f460:	muleq	r1, r8, r4
   1f464:	muleq	r1, r8, r4
   1f468:	muleq	r1, r8, r4
   1f46c:	muleq	r1, r8, r4
   1f470:	muleq	r1, r8, r4
   1f474:	muleq	r1, r8, r4
   1f478:	muleq	r1, r8, r4
   1f47c:	muleq	r1, r8, r4
   1f480:	muleq	r1, r8, r4
   1f484:	muleq	r1, r8, r4
   1f488:	andeq	pc, r1, r0, asr #9
   1f48c:	andeq	pc, r1, r8, lsr #13
   1f490:	andeq	pc, r1, r0, asr #9
   1f494:	andeq	pc, r1, ip, lsr #9
   1f498:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f49c:	cmp	r0, #0
   1f4a0:	beq	1f700 <__assert_fail@plt+0xd3c8>
   1f4a4:	ldr	r0, [fp, #16]
   1f4a8:	b	1f704 <__assert_fail@plt+0xd3cc>
   1f4ac:	mov	r4, #0
   1f4b0:	cmp	r7, #0
   1f4b4:	beq	1f6a4 <__assert_fail@plt+0xd36c>
   1f4b8:	mov	r9, #0
   1f4bc:	b	1f498 <__assert_fail@plt+0xd160>
   1f4c0:	mov	r4, #0
   1f4c4:	cmn	lr, #1
   1f4c8:	beq	1f688 <__assert_fail@plt+0xd350>
   1f4cc:	cmp	r7, #0
   1f4d0:	bne	1f4b8 <__assert_fail@plt+0xd180>
   1f4d4:	cmp	lr, #1
   1f4d8:	beq	1f6a4 <__assert_fail@plt+0xd36c>
   1f4dc:	b	1f4b8 <__assert_fail@plt+0xd180>
   1f4e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f4e4:	cmp	r0, #2
   1f4e8:	bne	1f6c8 <__assert_fail@plt+0xd390>
   1f4ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f4f0:	tst	r0, #1
   1f4f4:	bne	1fdc4 <__assert_fail@plt+0xda8c>
   1f4f8:	mov	r9, #0
   1f4fc:	mov	r0, #92	; 0x5c
   1f500:	b	1f6dc <__assert_fail@plt+0xd3a4>
   1f504:	mov	r0, #102	; 0x66
   1f508:	b	1f6ec <__assert_fail@plt+0xd3b4>
   1f50c:	mov	r2, #116	; 0x74
   1f510:	b	1f520 <__assert_fail@plt+0xd1e8>
   1f514:	mov	r0, #98	; 0x62
   1f518:	b	1f6ec <__assert_fail@plt+0xd3b4>
   1f51c:	mov	r2, #114	; 0x72
   1f520:	ldr	r0, [sp, #68]	; 0x44
   1f524:	tst	r0, #1
   1f528:	mov	r0, r2
   1f52c:	bne	1f6ec <__assert_fail@plt+0xd3b4>
   1f530:	b	1fdc4 <__assert_fail@plt+0xda8c>
   1f534:	ldr	r0, [sp, #84]	; 0x54
   1f538:	tst	r0, #1
   1f53c:	beq	1f7dc <__assert_fail@plt+0xd4a4>
   1f540:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f544:	tst	r0, #1
   1f548:	bne	1fed4 <__assert_fail@plt+0xdb9c>
   1f54c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f550:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f554:	cmp	r0, #2
   1f558:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1f55c:	movwne	r0, #1
   1f560:	orr	r0, r0, r2
   1f564:	tst	r0, #1
   1f568:	beq	1fbac <__assert_fail@plt+0xd874>
   1f56c:	mov	r0, r8
   1f570:	b	1fbe0 <__assert_fail@plt+0xd8a8>
   1f574:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f578:	mov	r9, #0
   1f57c:	mov	r5, #63	; 0x3f
   1f580:	cmp	r0, #5
   1f584:	beq	1f990 <__assert_fail@plt+0xd658>
   1f588:	cmp	r0, #2
   1f58c:	bne	1fa34 <__assert_fail@plt+0xd6fc>
   1f590:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f594:	tst	r0, #1
   1f598:	beq	1fa38 <__assert_fail@plt+0xd700>
   1f59c:	b	1fdc4 <__assert_fail@plt+0xda8c>
   1f5a0:	mov	r0, #118	; 0x76
   1f5a4:	b	1f6ec <__assert_fail@plt+0xd3b4>
   1f5a8:	mov	r0, #1
   1f5ac:	mov	r5, #39	; 0x27
   1f5b0:	str	r0, [sp, #60]	; 0x3c
   1f5b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f5b8:	cmp	r0, #2
   1f5bc:	bne	1f630 <__assert_fail@plt+0xd2f8>
   1f5c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f5c4:	tst	r0, #1
   1f5c8:	bne	1fdc4 <__assert_fail@plt+0xda8c>
   1f5cc:	ldr	r2, [sp, #56]	; 0x38
   1f5d0:	clz	r1, sl
   1f5d4:	mov	r9, #0
   1f5d8:	lsr	r1, r1, #5
   1f5dc:	cmp	r2, #0
   1f5e0:	mov	r0, r2
   1f5e4:	movwne	r0, #1
   1f5e8:	orrs	r0, r0, r1
   1f5ec:	moveq	r2, sl
   1f5f0:	moveq	sl, r0
   1f5f4:	cmp	r8, sl
   1f5f8:	str	r2, [sp, #56]	; 0x38
   1f5fc:	movcc	r0, #39	; 0x27
   1f600:	strbcc	r0, [r6, r8]
   1f604:	add	r0, r8, #1
   1f608:	cmp	r0, sl
   1f60c:	movcc	r1, #92	; 0x5c
   1f610:	strbcc	r1, [r6, r0]
   1f614:	add	r0, r8, #2
   1f618:	add	r8, r8, #3
   1f61c:	cmp	r0, sl
   1f620:	movcc	r1, #39	; 0x27
   1f624:	strbcc	r1, [r6, r0]
   1f628:	mov	r0, #0
   1f62c:	str	r0, [fp, #-56]	; 0xffffffc8
   1f630:	mov	r4, #1
   1f634:	b	1f498 <__assert_fail@plt+0xd160>
   1f638:	ldr	r0, [sp, #40]	; 0x28
   1f63c:	cmp	r0, #1
   1f640:	bne	1f808 <__assert_fail@plt+0xd4d0>
   1f644:	str	lr, [sp, #28]
   1f648:	bl	1211c <__ctype_b_loc@plt>
   1f64c:	ldr	r0, [r0]
   1f650:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f654:	mov	r1, #1
   1f658:	add	r0, r0, r5, lsl #1
   1f65c:	ldrb	r0, [r0, #1]
   1f660:	ubfx	r4, r0, #6, #1
   1f664:	ldr	r0, [sp, #52]	; 0x34
   1f668:	mov	r2, r1
   1f66c:	cmp	r1, #1
   1f670:	orr	r0, r4, r0
   1f674:	bhi	1fa40 <__assert_fail@plt+0xd708>
   1f678:	tst	r0, #1
   1f67c:	beq	1fa40 <__assert_fail@plt+0xd708>
   1f680:	ldr	lr, [sp, #28]
   1f684:	b	1f498 <__assert_fail@plt+0xd160>
   1f688:	cmp	r7, #0
   1f68c:	ldrbeq	r0, [ip, #1]
   1f690:	cmpeq	r0, #0
   1f694:	beq	1f6a4 <__assert_fail@plt+0xd36c>
   1f698:	mvn	lr, #0
   1f69c:	mov	r9, #0
   1f6a0:	b	1f498 <__assert_fail@plt+0xd160>
   1f6a4:	mov	r1, #1
   1f6a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f6ac:	cmp	r0, #2
   1f6b0:	bne	1f6c0 <__assert_fail@plt+0xd388>
   1f6b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f6b8:	tst	r0, #1
   1f6bc:	bne	1fdc4 <__assert_fail@plt+0xda8c>
   1f6c0:	mov	r4, r1
   1f6c4:	b	1f498 <__assert_fail@plt+0xd160>
   1f6c8:	ldr	r1, [sp, #48]	; 0x30
   1f6cc:	mov	r9, #0
   1f6d0:	mov	r0, #92	; 0x5c
   1f6d4:	cmp	r1, #0
   1f6d8:	beq	1f6ec <__assert_fail@plt+0xd3b4>
   1f6dc:	mov	r4, #0
   1f6e0:	cmp	r9, #0
   1f6e4:	beq	1fc78 <__assert_fail@plt+0xd940>
   1f6e8:	b	1fcb4 <__assert_fail@plt+0xd97c>
   1f6ec:	ldr	r1, [sp, #84]	; 0x54
   1f6f0:	mov	r4, #0
   1f6f4:	mov	r9, #0
   1f6f8:	tst	r1, #1
   1f6fc:	bne	1f73c <__assert_fail@plt+0xd404>
   1f700:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1f704:	cmp	r0, #0
   1f708:	mov	r0, r5
   1f70c:	beq	1f730 <__assert_fail@plt+0xd3f8>
   1f710:	ldr	r1, [fp, #16]
   1f714:	ubfx	r0, r5, #5, #3
   1f718:	mov	r2, #1
   1f71c:	ldr	r0, [r1, r0, lsl #2]
   1f720:	and	r1, r5, #31
   1f724:	tst	r0, r2, lsl r1
   1f728:	mov	r0, r5
   1f72c:	bne	1f73c <__assert_fail@plt+0xd404>
   1f730:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f734:	cmp	r1, #0
   1f738:	beq	1fc70 <__assert_fail@plt+0xd938>
   1f73c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f740:	tst	r1, #1
   1f744:	bne	1fd9c <__assert_fail@plt+0xda64>
   1f748:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1f74c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f750:	cmp	r1, #2
   1f754:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1f758:	movwne	r1, #1
   1f75c:	orr	r1, r1, r2
   1f760:	tst	r1, #1
   1f764:	beq	1f770 <__assert_fail@plt+0xd438>
   1f768:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1f76c:	b	1f7ac <__assert_fail@plt+0xd474>
   1f770:	cmp	r8, sl
   1f774:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1f778:	movcc	r1, #39	; 0x27
   1f77c:	strbcc	r1, [r6, r8]
   1f780:	add	r1, r8, #1
   1f784:	cmp	r1, sl
   1f788:	movcc	r2, #36	; 0x24
   1f78c:	strbcc	r2, [r6, r1]
   1f790:	add	r1, r8, #2
   1f794:	add	r8, r8, #3
   1f798:	cmp	r1, sl
   1f79c:	movcc	r2, #39	; 0x27
   1f7a0:	strbcc	r2, [r6, r1]
   1f7a4:	mov	r1, #1
   1f7a8:	str	r1, [fp, #-56]	; 0xffffffc8
   1f7ac:	cmp	r8, sl
   1f7b0:	movcc	r1, #92	; 0x5c
   1f7b4:	strbcc	r1, [r6, r8]
   1f7b8:	add	r8, r8, #1
   1f7bc:	cmp	r8, sl
   1f7c0:	and	r5, r5, r4
   1f7c4:	add	r7, r7, #1
   1f7c8:	strbcc	r0, [r6, r8]
   1f7cc:	add	r8, r8, #1
   1f7d0:	cmn	lr, #1
   1f7d4:	bne	1f1d0 <__assert_fail@plt+0xce98>
   1f7d8:	b	1f1dc <__assert_fail@plt+0xcea4>
   1f7dc:	ldr	r0, [sp, #36]	; 0x24
   1f7e0:	mov	r4, #0
   1f7e4:	mov	r9, #0
   1f7e8:	mov	r5, #0
   1f7ec:	cmp	r0, #0
   1f7f0:	beq	1f700 <__assert_fail@plt+0xd3c8>
   1f7f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1f7f8:	add	r7, r7, #1
   1f7fc:	cmn	lr, #1
   1f800:	bne	1f1d0 <__assert_fail@plt+0xce98>
   1f804:	b	1f1dc <__assert_fail@plt+0xcea4>
   1f808:	mov	r0, #0
   1f80c:	cmn	lr, #1
   1f810:	str	r0, [fp, #-36]	; 0xffffffdc
   1f814:	str	r0, [fp, #-40]	; 0xffffffd8
   1f818:	bne	1f82c <__assert_fail@plt+0xd4f4>
   1f81c:	mov	r0, ip
   1f820:	bl	12140 <strlen@plt>
   1f824:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f828:	mov	lr, r0
   1f82c:	add	r0, ip, r7
   1f830:	mov	r4, #1
   1f834:	mov	r6, #0
   1f838:	str	lr, [sp, #28]
   1f83c:	str	r0, [sp, #24]
   1f840:	sub	r0, fp, #40	; 0x28
   1f844:	mov	r3, r0
   1f848:	str	r6, [sp, #44]	; 0x2c
   1f84c:	add	r6, r6, r7
   1f850:	sub	r0, fp, #44	; 0x2c
   1f854:	add	r1, ip, r6
   1f858:	sub	r2, lr, r6
   1f85c:	bl	24024 <__assert_fail@plt+0x11cec>
   1f860:	cmp	r0, #0
   1f864:	beq	1fcfc <__assert_fail@plt+0xd9c4>
   1f868:	cmn	r0, #1
   1f86c:	beq	1fcbc <__assert_fail@plt+0xd984>
   1f870:	ldr	lr, [sp, #28]
   1f874:	cmn	r0, #2
   1f878:	beq	1fcc4 <__assert_fail@plt+0xd98c>
   1f87c:	ldr	r2, [sp, #64]	; 0x40
   1f880:	cmp	r0, #2
   1f884:	mov	r1, #0
   1f888:	movwcc	r1, #1
   1f88c:	eor	r2, r2, #1
   1f890:	orrs	r1, r2, r1
   1f894:	bne	1f954 <__assert_fail@plt+0xd61c>
   1f898:	ldr	r1, [sp, #44]	; 0x2c
   1f89c:	ldr	r2, [sp, #24]
   1f8a0:	add	r1, r2, r1
   1f8a4:	mov	r2, #1
   1f8a8:	ldrb	r3, [r1, r2]
   1f8ac:	sub	r3, r3, #91	; 0x5b
   1f8b0:	cmp	r3, #33	; 0x21
   1f8b4:	bhi	1f948 <__assert_fail@plt+0xd610>
   1f8b8:	add	r6, pc, #0
   1f8bc:	ldr	pc, [r6, r3, lsl #2]
   1f8c0:			; <UNDEFINED> instruction: 0x0001fdbc
   1f8c4:			; <UNDEFINED> instruction: 0x0001fdbc
   1f8c8:	andeq	pc, r1, r8, asr #18
   1f8cc:			; <UNDEFINED> instruction: 0x0001fdbc
   1f8d0:	andeq	pc, r1, r8, asr #18
   1f8d4:			; <UNDEFINED> instruction: 0x0001fdbc
   1f8d8:	andeq	pc, r1, r8, asr #18
   1f8dc:	andeq	pc, r1, r8, asr #18
   1f8e0:	andeq	pc, r1, r8, asr #18
   1f8e4:	andeq	pc, r1, r8, asr #18
   1f8e8:	andeq	pc, r1, r8, asr #18
   1f8ec:	andeq	pc, r1, r8, asr #18
   1f8f0:	andeq	pc, r1, r8, asr #18
   1f8f4:	andeq	pc, r1, r8, asr #18
   1f8f8:	andeq	pc, r1, r8, asr #18
   1f8fc:	andeq	pc, r1, r8, asr #18
   1f900:	andeq	pc, r1, r8, asr #18
   1f904:	andeq	pc, r1, r8, asr #18
   1f908:	andeq	pc, r1, r8, asr #18
   1f90c:	andeq	pc, r1, r8, asr #18
   1f910:	andeq	pc, r1, r8, asr #18
   1f914:	andeq	pc, r1, r8, asr #18
   1f918:	andeq	pc, r1, r8, asr #18
   1f91c:	andeq	pc, r1, r8, asr #18
   1f920:	andeq	pc, r1, r8, asr #18
   1f924:	andeq	pc, r1, r8, asr #18
   1f928:	andeq	pc, r1, r8, asr #18
   1f92c:	andeq	pc, r1, r8, asr #18
   1f930:	andeq	pc, r1, r8, asr #18
   1f934:	andeq	pc, r1, r8, asr #18
   1f938:	andeq	pc, r1, r8, asr #18
   1f93c:	andeq	pc, r1, r8, asr #18
   1f940:	andeq	pc, r1, r8, asr #18
   1f944:			; <UNDEFINED> instruction: 0x0001fdbc
   1f948:	add	r2, r2, #1
   1f94c:	cmp	r2, r0
   1f950:	bcc	1f8a8 <__assert_fail@plt+0xd570>
   1f954:	ldr	r6, [sp, #44]	; 0x2c
   1f958:	add	r6, r0, r6
   1f95c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f960:	bl	11fe4 <iswprint@plt>
   1f964:	cmp	r0, #0
   1f968:	movwne	r0, #1
   1f96c:	and	r4, r4, r0
   1f970:	sub	r0, fp, #40	; 0x28
   1f974:	bl	11ef4 <mbsinit@plt>
   1f978:	ldr	lr, [sp, #28]
   1f97c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f980:	sub	r3, fp, #40	; 0x28
   1f984:	cmp	r0, #0
   1f988:	beq	1f848 <__assert_fail@plt+0xd510>
   1f98c:	b	1fd04 <__assert_fail@plt+0xd9cc>
   1f990:	ldr	r0, [sp, #32]
   1f994:	cmp	r0, #0
   1f998:	beq	1fa34 <__assert_fail@plt+0xd6fc>
   1f99c:	add	r0, r7, #2
   1f9a0:	cmp	r0, lr
   1f9a4:	bcs	1fa34 <__assert_fail@plt+0xd6fc>
   1f9a8:	add	r1, ip, r7
   1f9ac:	ldrb	r1, [r1, #1]
   1f9b0:	cmp	r1, #63	; 0x3f
   1f9b4:	bne	1fa34 <__assert_fail@plt+0xd6fc>
   1f9b8:	ldrb	r5, [ip, r0]
   1f9bc:	sub	r1, r5, #33	; 0x21
   1f9c0:	cmp	r1, #29
   1f9c4:	bhi	1fa34 <__assert_fail@plt+0xd6fc>
   1f9c8:	movw	r3, #20929	; 0x51c1
   1f9cc:	mov	r2, #1
   1f9d0:	movt	r3, #14336	; 0x3800
   1f9d4:	tst	r3, r2, lsl r1
   1f9d8:	beq	1fa34 <__assert_fail@plt+0xd6fc>
   1f9dc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f9e0:	tst	r1, #1
   1f9e4:	bne	1fedc <__assert_fail@plt+0xdba4>
   1f9e8:	cmp	r8, sl
   1f9ec:	mov	r7, r0
   1f9f0:	mov	r4, #0
   1f9f4:	movcc	r1, #63	; 0x3f
   1f9f8:	strbcc	r1, [r6, r8]
   1f9fc:	add	r1, r8, #1
   1fa00:	cmp	r1, sl
   1fa04:	movcc	r2, #34	; 0x22
   1fa08:	strbcc	r2, [r6, r1]
   1fa0c:	add	r1, r8, #2
   1fa10:	cmp	r1, sl
   1fa14:	movcc	r2, #34	; 0x22
   1fa18:	strbcc	r2, [r6, r1]
   1fa1c:	add	r1, r8, #3
   1fa20:	add	r8, r8, #4
   1fa24:	cmp	r1, sl
   1fa28:	movcc	r2, #63	; 0x3f
   1fa2c:	strbcc	r2, [r6, r1]
   1fa30:	b	1f498 <__assert_fail@plt+0xd160>
   1fa34:	mov	r5, #63	; 0x3f
   1fa38:	mov	r4, #0
   1fa3c:	b	1f498 <__assert_fail@plt+0xd160>
   1fa40:	add	r1, r2, r7
   1fa44:	ldr	lr, [sp, #28]
   1fa48:	mov	r3, #0
   1fa4c:	str	r1, [sp, #44]	; 0x2c
   1fa50:	add	r1, r7, #1
   1fa54:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1fa58:	tst	r0, #1
   1fa5c:	bne	1fb30 <__assert_fail@plt+0xd7f8>
   1fa60:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1fa64:	tst	r2, #1
   1fa68:	bne	1fe24 <__assert_fail@plt+0xdaec>
   1fa6c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1fa70:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fa74:	cmp	r7, #2
   1fa78:	movwne	r3, #1
   1fa7c:	orr	r3, r3, r2
   1fa80:	tst	r3, #1
   1fa84:	bne	1fac0 <__assert_fail@plt+0xd788>
   1fa88:	cmp	r8, sl
   1fa8c:	add	r3, r8, #1
   1fa90:	movcc	r2, #39	; 0x27
   1fa94:	strbcc	r2, [r6, r8]
   1fa98:	cmp	r3, sl
   1fa9c:	movcc	r2, #36	; 0x24
   1faa0:	strbcc	r2, [r6, r3]
   1faa4:	add	r3, r8, #2
   1faa8:	add	r8, r8, #3
   1faac:	cmp	r3, sl
   1fab0:	movcc	r2, #39	; 0x27
   1fab4:	strbcc	r2, [r6, r3]
   1fab8:	mov	r2, #1
   1fabc:	str	r2, [fp, #-56]	; 0xffffffc8
   1fac0:	cmp	r8, sl
   1fac4:	movcc	r3, #92	; 0x5c
   1fac8:	strbcc	r3, [r6, r8]
   1facc:	add	r3, r8, #1
   1fad0:	cmp	r3, sl
   1fad4:	andcc	r7, r5, #192	; 0xc0
   1fad8:	movcc	r2, #48	; 0x30
   1fadc:	orrcc	r7, r2, r7, lsr #6
   1fae0:	strbcc	r7, [r6, r3]
   1fae4:	add	r3, r8, #2
   1fae8:	add	r8, r8, #3
   1faec:	cmp	r3, sl
   1faf0:	lsrcc	r7, r5, #3
   1faf4:	movcc	r2, #6
   1faf8:	bficc	r7, r2, #3, #29
   1fafc:	mov	r2, #6
   1fb00:	strbcc	r7, [r6, r3]
   1fb04:	bfi	r5, r2, #3, #29
   1fb08:	mov	r3, #1
   1fb0c:	b	1fb54 <__assert_fail@plt+0xd81c>
   1fb10:	cmp	r8, sl
   1fb14:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1fb18:	strbcc	r5, [r6, r8]
   1fb1c:	add	r8, r8, #1
   1fb20:	ldrb	r5, [ip, r1]
   1fb24:	add	r1, r1, #1
   1fb28:	tst	r0, #1
   1fb2c:	beq	1fa60 <__assert_fail@plt+0xd728>
   1fb30:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1fb34:	tst	r2, #1
   1fb38:	beq	1fb4c <__assert_fail@plt+0xd814>
   1fb3c:	cmp	r8, sl
   1fb40:	movcc	r7, #92	; 0x5c
   1fb44:	strbcc	r7, [r6, r8]
   1fb48:	add	r8, r8, #1
   1fb4c:	mov	r2, #0
   1fb50:	str	r2, [fp, #-52]	; 0xffffffcc
   1fb54:	ldr	r2, [sp, #44]	; 0x2c
   1fb58:	and	r9, r3, #1
   1fb5c:	cmp	r2, r1
   1fb60:	bls	1fc60 <__assert_fail@plt+0xd928>
   1fb64:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fb68:	cmp	r9, #0
   1fb6c:	movwne	r9, #1
   1fb70:	mvn	r7, r2
   1fb74:	orr	r7, r7, r9
   1fb78:	tst	r7, #1
   1fb7c:	bne	1fb10 <__assert_fail@plt+0xd7d8>
   1fb80:	cmp	r8, sl
   1fb84:	movcc	r7, #39	; 0x27
   1fb88:	strbcc	r7, [r6, r8]
   1fb8c:	add	r7, r8, #1
   1fb90:	add	r8, r8, #2
   1fb94:	cmp	r7, sl
   1fb98:	movcc	r2, #39	; 0x27
   1fb9c:	strbcc	r2, [r6, r7]
   1fba0:	mov	r2, #0
   1fba4:	str	r2, [fp, #-56]	; 0xffffffc8
   1fba8:	b	1fb10 <__assert_fail@plt+0xd7d8>
   1fbac:	cmp	r8, sl
   1fbb0:	mov	r2, #1
   1fbb4:	movcc	r0, #39	; 0x27
   1fbb8:	strbcc	r0, [r6, r8]
   1fbbc:	add	r0, r8, #1
   1fbc0:	cmp	r0, sl
   1fbc4:	movcc	r1, #36	; 0x24
   1fbc8:	strbcc	r1, [r6, r0]
   1fbcc:	add	r0, r8, #2
   1fbd0:	cmp	r0, sl
   1fbd4:	movcc	r1, #39	; 0x27
   1fbd8:	strbcc	r1, [r6, r0]
   1fbdc:	add	r0, r8, #3
   1fbe0:	cmp	r0, sl
   1fbe4:	add	r8, r0, #1
   1fbe8:	str	r2, [fp, #-56]	; 0xffffffc8
   1fbec:	movcc	r1, #92	; 0x5c
   1fbf0:	strbcc	r1, [r6, r0]
   1fbf4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1fbf8:	cmp	r1, #2
   1fbfc:	beq	1fc50 <__assert_fail@plt+0xd918>
   1fc00:	add	r1, r7, #1
   1fc04:	mov	r4, #0
   1fc08:	mov	r9, #1
   1fc0c:	mov	r5, #48	; 0x30
   1fc10:	cmp	r1, lr
   1fc14:	bcs	1f498 <__assert_fail@plt+0xd160>
   1fc18:	ldrb	r1, [ip, r1]
   1fc1c:	sub	r1, r1, #48	; 0x30
   1fc20:	uxtb	r1, r1
   1fc24:	cmp	r1, #9
   1fc28:	bhi	1f498 <__assert_fail@plt+0xd160>
   1fc2c:	cmp	r8, sl
   1fc30:	movcc	r1, #48	; 0x30
   1fc34:	strbcc	r1, [r6, r8]
   1fc38:	add	r1, r0, #2
   1fc3c:	add	r8, r0, #3
   1fc40:	cmp	r1, sl
   1fc44:	movcc	r2, #48	; 0x30
   1fc48:	strbcc	r2, [r6, r1]
   1fc4c:	b	1f498 <__assert_fail@plt+0xd160>
   1fc50:	mov	r0, #48	; 0x30
   1fc54:	mov	r9, #1
   1fc58:	mov	r4, #0
   1fc5c:	b	1f730 <__assert_fail@plt+0xd3f8>
   1fc60:	cmp	r9, #0
   1fc64:	sub	r7, r1, #1
   1fc68:	mov	r0, r5
   1fc6c:	movwne	r9, #1
   1fc70:	cmp	r9, #0
   1fc74:	bne	1fcb4 <__assert_fail@plt+0xd97c>
   1fc78:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1fc7c:	tst	r1, #1
   1fc80:	beq	1fcb4 <__assert_fail@plt+0xd97c>
   1fc84:	cmp	r8, sl
   1fc88:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1fc8c:	movcc	r1, #39	; 0x27
   1fc90:	strbcc	r1, [r6, r8]
   1fc94:	add	r1, r8, #1
   1fc98:	add	r8, r8, #2
   1fc9c:	cmp	r1, sl
   1fca0:	movcc	r2, #39	; 0x27
   1fca4:	strbcc	r2, [r6, r1]
   1fca8:	mov	r1, #0
   1fcac:	str	r1, [fp, #-56]	; 0xffffffc8
   1fcb0:	b	1f7bc <__assert_fail@plt+0xd484>
   1fcb4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1fcb8:	b	1f7bc <__assert_fail@plt+0xd484>
   1fcbc:	mov	r4, #0
   1fcc0:	b	1fcfc <__assert_fail@plt+0xd9c4>
   1fcc4:	mov	r4, #0
   1fcc8:	cmp	lr, r6
   1fccc:	bls	1fcfc <__assert_fail@plt+0xd9c4>
   1fcd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1fcd4:	ldr	r6, [sp, #44]	; 0x2c
   1fcd8:	ldr	r0, [sp, #24]
   1fcdc:	ldrb	r0, [r0, r6]
   1fce0:	cmp	r0, #0
   1fce4:	beq	1fd04 <__assert_fail@plt+0xd9cc>
   1fce8:	add	r6, r6, #1
   1fcec:	add	r0, r7, r6
   1fcf0:	cmp	r0, lr
   1fcf4:	bcc	1fcd8 <__assert_fail@plt+0xd9a0>
   1fcf8:	b	1fd04 <__assert_fail@plt+0xd9cc>
   1fcfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   1fd00:	ldr	r6, [sp, #44]	; 0x2c
   1fd04:	mov	r1, r6
   1fd08:	ldr	r6, [sp, #80]	; 0x50
   1fd0c:	b	1f664 <__assert_fail@plt+0xd32c>
   1fd10:	mov	lr, r7
   1fd14:	b	1fd1c <__assert_fail@plt+0xd9e4>
   1fd18:	mvn	lr, #0
   1fd1c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1fd20:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fd24:	eor	r0, r7, #2
   1fd28:	orr	r0, r0, r8
   1fd2c:	clz	r0, r0
   1fd30:	lsr	r0, r0, #5
   1fd34:	tst	r1, r0
   1fd38:	bne	1fdc4 <__assert_fail@plt+0xda8c>
   1fd3c:	mov	r0, r1
   1fd40:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1fd44:	cmp	r7, #2
   1fd48:	movwne	r1, #1
   1fd4c:	orr	r0, r0, r1
   1fd50:	tst	r0, #1
   1fd54:	ldreq	r0, [sp, #60]	; 0x3c
   1fd58:	eoreq	r0, r0, #1
   1fd5c:	tsteq	r0, #1
   1fd60:	bne	1fe70 <__assert_fail@plt+0xdb38>
   1fd64:	mov	r9, lr
   1fd68:	tst	r5, #1
   1fd6c:	bne	1fe2c <__assert_fail@plt+0xdaf4>
   1fd70:	ldr	r6, [sp, #56]	; 0x38
   1fd74:	mov	r4, #0
   1fd78:	cmp	r6, #0
   1fd7c:	beq	1fe68 <__assert_fail@plt+0xdb30>
   1fd80:	ldr	r0, [sp, #84]	; 0x54
   1fd84:	mov	r1, #0
   1fd88:	cmp	sl, #0
   1fd8c:	mov	r5, #0
   1fd90:	str	r1, [fp, #-72]	; 0xffffffb8
   1fd94:	beq	1ef64 <__assert_fail@plt+0xcc2c>
   1fd98:	b	1fe70 <__assert_fail@plt+0xdb38>
   1fd9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1fda0:	ldr	r2, [sp, #84]	; 0x54
   1fda4:	b	1fdcc <__assert_fail@plt+0xda94>
   1fda8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1fdac:	mov	r2, #1
   1fdb0:	mov	lr, r4
   1fdb4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1fdb8:	b	1fdcc <__assert_fail@plt+0xda94>
   1fdbc:	ldr	r6, [sp, #80]	; 0x50
   1fdc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1fdc4:	ldr	r2, [sp, #84]	; 0x54
   1fdc8:	mov	r7, #2
   1fdcc:	mov	r0, #0
   1fdd0:	ldr	r1, [fp, #12]
   1fdd4:	tst	r2, #1
   1fdd8:	mov	r2, r7
   1fddc:	mov	r3, lr
   1fde0:	str	r0, [sp, #8]
   1fde4:	ldr	r0, [sp, #72]	; 0x48
   1fde8:	movwne	r2, #4
   1fdec:	cmp	r7, #2
   1fdf0:	movne	r2, r7
   1fdf4:	str	r2, [sp]
   1fdf8:	mov	r2, ip
   1fdfc:	bic	r1, r1, #2
   1fe00:	str	r0, [sp, #12]
   1fe04:	ldr	r0, [sp, #76]	; 0x4c
   1fe08:	str	r1, [sp, #4]
   1fe0c:	mov	r1, sl
   1fe10:	str	r0, [sp, #16]
   1fe14:	mov	r0, r6
   1fe18:	bl	1eee4 <__assert_fail@plt+0xcbac>
   1fe1c:	mov	r8, r0
   1fe20:	b	1fec8 <__assert_fail@plt+0xdb90>
   1fe24:	ldr	r2, [sp, #84]	; 0x54
   1fe28:	b	1fdcc <__assert_fail@plt+0xda94>
   1fe2c:	mov	r0, #5
   1fe30:	ldr	r1, [sp, #56]	; 0x38
   1fe34:	ldr	r2, [fp, #-84]	; 0xffffffac
   1fe38:	mov	r3, r9
   1fe3c:	str	r0, [sp]
   1fe40:	ldr	r0, [fp, #12]
   1fe44:	str	r0, [sp, #4]
   1fe48:	ldr	r0, [fp, #16]
   1fe4c:	str	r0, [sp, #8]
   1fe50:	ldr	r0, [sp, #72]	; 0x48
   1fe54:	str	r0, [sp, #12]
   1fe58:	ldr	r0, [sp, #76]	; 0x4c
   1fe5c:	str	r0, [sp, #16]
   1fe60:	ldr	r0, [sp, #80]	; 0x50
   1fe64:	b	1fe18 <__assert_fail@plt+0xdae0>
   1fe68:	mov	r0, #0
   1fe6c:	str	r0, [fp, #-72]	; 0xffffffb8
   1fe70:	ldr	r1, [sp, #92]	; 0x5c
   1fe74:	cmp	r1, #0
   1fe78:	beq	1feb8 <__assert_fail@plt+0xdb80>
   1fe7c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1fe80:	ldr	r2, [sp, #80]	; 0x50
   1fe84:	tst	r0, #1
   1fe88:	bne	1febc <__assert_fail@plt+0xdb84>
   1fe8c:	ldrb	r0, [r1]
   1fe90:	cmp	r0, #0
   1fe94:	beq	1febc <__assert_fail@plt+0xdb84>
   1fe98:	add	r1, r1, #1
   1fe9c:	cmp	r8, sl
   1fea0:	strbcc	r0, [r2, r8]
   1fea4:	add	r8, r8, #1
   1fea8:	ldrb	r0, [r1], #1
   1feac:	cmp	r0, #0
   1feb0:	bne	1fe9c <__assert_fail@plt+0xdb64>
   1feb4:	b	1febc <__assert_fail@plt+0xdb84>
   1feb8:	ldr	r2, [sp, #80]	; 0x50
   1febc:	cmp	r8, sl
   1fec0:	movcc	r0, #0
   1fec4:	strbcc	r0, [r2, r8]
   1fec8:	mov	r0, r8
   1fecc:	sub	sp, fp, #28
   1fed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fed4:	mov	r2, #1
   1fed8:	b	1fdb4 <__assert_fail@plt+0xda7c>
   1fedc:	ldr	r2, [sp, #84]	; 0x54
   1fee0:	mov	r7, #5
   1fee4:	b	1fdcc <__assert_fail@plt+0xda94>
   1fee8:	bl	12314 <abort@plt>
   1feec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fef0:	add	fp, sp, #28
   1fef4:	sub	sp, sp, #28
   1fef8:	movw	r5, #35024	; 0x88d0
   1fefc:	cmp	r2, #0
   1ff00:	mov	r4, r1
   1ff04:	mov	r7, r0
   1ff08:	str	r0, [sp, #20]
   1ff0c:	movt	r5, #3
   1ff10:	movne	r5, r2
   1ff14:	bl	12164 <__errno_location@plt>
   1ff18:	mov	sl, r0
   1ff1c:	ldm	r5, {r0, r1}
   1ff20:	ldr	r2, [r5, #40]	; 0x28
   1ff24:	ldr	r3, [r5, #44]	; 0x2c
   1ff28:	add	r9, r5, #8
   1ff2c:	ldr	r6, [sl]
   1ff30:	orr	r8, r1, #1
   1ff34:	mov	r1, #0
   1ff38:	str	r6, [sp, #24]
   1ff3c:	stm	sp, {r0, r8, r9}
   1ff40:	str	r2, [sp, #12]
   1ff44:	str	r3, [sp, #16]
   1ff48:	mov	r0, #0
   1ff4c:	mov	r2, r7
   1ff50:	mov	r3, r4
   1ff54:	mov	r6, r4
   1ff58:	bl	1eee4 <__assert_fail@plt+0xcbac>
   1ff5c:	add	r7, r0, #1
   1ff60:	mov	r0, r7
   1ff64:	bl	22238 <__assert_fail@plt+0xff00>
   1ff68:	mov	r4, r0
   1ff6c:	ldr	r0, [r5]
   1ff70:	ldr	r2, [r5, #44]	; 0x2c
   1ff74:	ldr	r1, [r5, #40]	; 0x28
   1ff78:	mov	r3, r6
   1ff7c:	stm	sp, {r0, r8, r9}
   1ff80:	str	r2, [sp, #16]
   1ff84:	str	r1, [sp, #12]
   1ff88:	mov	r0, r4
   1ff8c:	mov	r1, r7
   1ff90:	ldr	r2, [sp, #20]
   1ff94:	bl	1eee4 <__assert_fail@plt+0xcbac>
   1ff98:	ldr	r0, [sp, #24]
   1ff9c:	str	r0, [sl]
   1ffa0:	mov	r0, r4
   1ffa4:	sub	sp, fp, #28
   1ffa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffb0:	add	fp, sp, #28
   1ffb4:	sub	sp, sp, #36	; 0x24
   1ffb8:	movw	r8, #35024	; 0x88d0
   1ffbc:	cmp	r3, #0
   1ffc0:	mov	r4, r2
   1ffc4:	str	r2, [sp, #24]
   1ffc8:	mov	r5, r1
   1ffcc:	mov	r6, r0
   1ffd0:	str	r0, [sp, #20]
   1ffd4:	movt	r8, #3
   1ffd8:	movne	r8, r3
   1ffdc:	bl	12164 <__errno_location@plt>
   1ffe0:	str	r0, [sp, #28]
   1ffe4:	cmp	r4, #0
   1ffe8:	add	sl, r8, #8
   1ffec:	ldm	r8, {r3, r9}
   1fff0:	ldr	r7, [r0]
   1fff4:	ldr	r1, [r8, #40]	; 0x28
   1fff8:	ldr	r2, [r8, #44]	; 0x2c
   1fffc:	mov	r0, #0
   20000:	orreq	r9, r9, #1
   20004:	str	r7, [sp, #32]
   20008:	mov	r7, r5
   2000c:	stm	sp, {r3, r9, sl}
   20010:	str	r1, [sp, #12]
   20014:	str	r2, [sp, #16]
   20018:	mov	r1, #0
   2001c:	mov	r2, r6
   20020:	mov	r3, r5
   20024:	bl	1eee4 <__assert_fail@plt+0xcbac>
   20028:	add	r4, r0, #1
   2002c:	mov	r5, r0
   20030:	mov	r0, r4
   20034:	bl	22238 <__assert_fail@plt+0xff00>
   20038:	mov	r6, r0
   2003c:	ldr	r0, [r8]
   20040:	ldr	r2, [r8, #44]	; 0x2c
   20044:	ldr	r1, [r8, #40]	; 0x28
   20048:	mov	r3, r7
   2004c:	stm	sp, {r0, r9, sl}
   20050:	str	r2, [sp, #16]
   20054:	str	r1, [sp, #12]
   20058:	mov	r0, r6
   2005c:	mov	r1, r4
   20060:	ldr	r2, [sp, #20]
   20064:	bl	1eee4 <__assert_fail@plt+0xcbac>
   20068:	ldr	r0, [sp, #24]
   2006c:	ldr	r1, [sp, #32]
   20070:	ldr	r2, [sp, #28]
   20074:	cmp	r0, #0
   20078:	str	r1, [r2]
   2007c:	strne	r5, [r0]
   20080:	mov	r0, r6
   20084:	sub	sp, fp, #28
   20088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2008c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20090:	add	fp, sp, #24
   20094:	movw	r5, #33396	; 0x8274
   20098:	movw	r8, #33392	; 0x8270
   2009c:	movt	r5, #3
   200a0:	movt	r8, #3
   200a4:	ldr	r0, [r5]
   200a8:	ldr	r4, [r8]
   200ac:	cmp	r0, #2
   200b0:	blt	200dc <__assert_fail@plt+0xdda4>
   200b4:	add	r7, r4, #12
   200b8:	mov	r6, #0
   200bc:	ldr	r0, [r7, r6, lsl #3]
   200c0:	bl	1cc78 <__assert_fail@plt+0xa940>
   200c4:	ldr	r1, [r5]
   200c8:	add	r2, r6, #2
   200cc:	add	r0, r6, #1
   200d0:	mov	r6, r0
   200d4:	cmp	r2, r1
   200d8:	blt	200bc <__assert_fail@plt+0xdd84>
   200dc:	ldr	r0, [r4, #4]
   200e0:	movw	r7, #35072	; 0x8900
   200e4:	movt	r7, #3
   200e8:	cmp	r0, r7
   200ec:	beq	20104 <__assert_fail@plt+0xddcc>
   200f0:	bl	1cc78 <__assert_fail@plt+0xa940>
   200f4:	movw	r0, #33400	; 0x8278
   200f8:	mov	r6, #256	; 0x100
   200fc:	movt	r0, #3
   20100:	strd	r6, [r0]
   20104:	movw	r6, #33400	; 0x8278
   20108:	movt	r6, #3
   2010c:	cmp	r4, r6
   20110:	beq	20120 <__assert_fail@plt+0xdde8>
   20114:	mov	r0, r4
   20118:	bl	1cc78 <__assert_fail@plt+0xa940>
   2011c:	str	r6, [r8]
   20120:	mov	r0, #1
   20124:	str	r0, [r5]
   20128:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2012c:	movw	r3, #35024	; 0x88d0
   20130:	mvn	r2, #0
   20134:	movt	r3, #3
   20138:	b	2013c <__assert_fail@plt+0xde04>
   2013c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20140:	add	fp, sp, #28
   20144:	sub	sp, sp, #44	; 0x2c
   20148:	mov	r7, r3
   2014c:	str	r2, [sp, #36]	; 0x24
   20150:	str	r1, [sp, #32]
   20154:	mov	r5, r0
   20158:	bl	12164 <__errno_location@plt>
   2015c:	cmp	r5, #0
   20160:	blt	202cc <__assert_fail@plt+0xdf94>
   20164:	cmn	r5, #-2147483647	; 0x80000001
   20168:	beq	202cc <__assert_fail@plt+0xdf94>
   2016c:	movw	r8, #33396	; 0x8274
   20170:	movw	r4, #33392	; 0x8270
   20174:	str	r0, [sp, #28]
   20178:	ldr	r0, [r0]
   2017c:	movt	r8, #3
   20180:	movt	r4, #3
   20184:	ldr	r1, [r8]
   20188:	ldr	r6, [r4]
   2018c:	str	r0, [sp, #24]
   20190:	cmp	r1, r5
   20194:	ble	201a0 <__assert_fail@plt+0xde68>
   20198:	mov	sl, r6
   2019c:	b	20208 <__assert_fail@plt+0xded0>
   201a0:	movw	r9, #33400	; 0x8278
   201a4:	mov	r0, #8
   201a8:	add	r2, r5, #1
   201ac:	str	r1, [fp, #-32]	; 0xffffffe0
   201b0:	mvn	r3, #-2147483648	; 0x80000000
   201b4:	movt	r9, #3
   201b8:	str	r0, [sp]
   201bc:	sub	r2, r2, r1
   201c0:	sub	r1, fp, #32
   201c4:	subs	r0, r6, r9
   201c8:	movne	r0, r6
   201cc:	bl	22438 <__assert_fail@plt+0x10100>
   201d0:	cmp	r6, r9
   201d4:	mov	sl, r0
   201d8:	str	r0, [r4]
   201dc:	ldrdeq	r0, [r9]
   201e0:	stmeq	sl, {r0, r1}
   201e4:	ldr	r1, [r8]
   201e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   201ec:	add	r0, sl, r1, lsl #3
   201f0:	sub	r1, r2, r1
   201f4:	lsl	r2, r1, #3
   201f8:	mov	r1, #0
   201fc:	bl	12188 <memset@plt>
   20200:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20204:	str	r0, [r8]
   20208:	mov	r9, sl
   2020c:	ldr	r6, [r9, r5, lsl #3]!
   20210:	ldr	r4, [r9, #4]!
   20214:	ldm	r7, {r0, r1}
   20218:	ldr	r2, [r7, #40]	; 0x28
   2021c:	ldr	r3, [r7, #44]	; 0x2c
   20220:	orr	r8, r1, #1
   20224:	add	r1, r7, #8
   20228:	stm	sp, {r0, r8}
   2022c:	add	r0, sp, #8
   20230:	str	r1, [sp, #20]
   20234:	stm	r0, {r1, r2, r3}
   20238:	mov	r0, r4
   2023c:	mov	r1, r6
   20240:	ldr	r2, [sp, #32]
   20244:	ldr	r3, [sp, #36]	; 0x24
   20248:	bl	1eee4 <__assert_fail@plt+0xcbac>
   2024c:	cmp	r6, r0
   20250:	bhi	202b4 <__assert_fail@plt+0xdf7c>
   20254:	add	r6, r0, #1
   20258:	movw	r0, #35072	; 0x8900
   2025c:	movt	r0, #3
   20260:	str	r6, [sl, r5, lsl #3]
   20264:	cmp	r4, r0
   20268:	beq	20274 <__assert_fail@plt+0xdf3c>
   2026c:	mov	r0, r4
   20270:	bl	1cc78 <__assert_fail@plt+0xa940>
   20274:	mov	r0, r6
   20278:	bl	22238 <__assert_fail@plt+0xff00>
   2027c:	str	r0, [r9]
   20280:	mov	r4, r0
   20284:	add	r3, sp, #8
   20288:	ldr	r0, [r7]
   2028c:	ldr	r1, [r7, #40]	; 0x28
   20290:	ldr	r2, [r7, #44]	; 0x2c
   20294:	stm	sp, {r0, r8}
   20298:	ldr	r0, [sp, #20]
   2029c:	stm	r3, {r0, r1, r2}
   202a0:	mov	r0, r4
   202a4:	mov	r1, r6
   202a8:	ldr	r2, [sp, #32]
   202ac:	ldr	r3, [sp, #36]	; 0x24
   202b0:	bl	1eee4 <__assert_fail@plt+0xcbac>
   202b4:	ldr	r0, [sp, #28]
   202b8:	ldr	r1, [sp, #24]
   202bc:	str	r1, [r0]
   202c0:	mov	r0, r4
   202c4:	sub	sp, fp, #28
   202c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202cc:	bl	12314 <abort@plt>
   202d0:	movw	r3, #35024	; 0x88d0
   202d4:	movt	r3, #3
   202d8:	b	2013c <__assert_fail@plt+0xde04>
   202dc:	movw	r3, #35024	; 0x88d0
   202e0:	mov	r1, r0
   202e4:	mov	r0, #0
   202e8:	mvn	r2, #0
   202ec:	movt	r3, #3
   202f0:	b	2013c <__assert_fail@plt+0xde04>
   202f4:	movw	r3, #35024	; 0x88d0
   202f8:	mov	r2, r1
   202fc:	mov	r1, r0
   20300:	mov	r0, #0
   20304:	movt	r3, #3
   20308:	b	2013c <__assert_fail@plt+0xde04>
   2030c:	push	{fp, lr}
   20310:	mov	fp, sp
   20314:	sub	sp, sp, #48	; 0x30
   20318:	vmov.i32	q8, #0	; 0x00000000
   2031c:	mov	ip, #32
   20320:	mov	r3, sp
   20324:	mov	lr, r2
   20328:	cmp	r1, #10
   2032c:	add	r2, r3, #16
   20330:	vst1.64	{d16-d17}, [r3], ip
   20334:	vst1.64	{d16-d17}, [r3]
   20338:	vst1.64	{d16-d17}, [r2]
   2033c:	beq	2035c <__assert_fail@plt+0xe024>
   20340:	str	r1, [sp]
   20344:	mov	r3, sp
   20348:	mov	r1, lr
   2034c:	mvn	r2, #0
   20350:	bl	2013c <__assert_fail@plt+0xde04>
   20354:	mov	sp, fp
   20358:	pop	{fp, pc}
   2035c:	bl	12314 <abort@plt>
   20360:	push	{r4, sl, fp, lr}
   20364:	add	fp, sp, #8
   20368:	sub	sp, sp, #48	; 0x30
   2036c:	mov	ip, r3
   20370:	mov	r3, sp
   20374:	vmov.i32	q8, #0	; 0x00000000
   20378:	mov	lr, #32
   2037c:	cmp	r1, #10
   20380:	add	r4, r3, #16
   20384:	vst1.64	{d16-d17}, [r3], lr
   20388:	vst1.64	{d16-d17}, [r3]
   2038c:	vst1.64	{d16-d17}, [r4]
   20390:	beq	203b0 <__assert_fail@plt+0xe078>
   20394:	str	r1, [sp]
   20398:	mov	r1, r2
   2039c:	mov	r3, sp
   203a0:	mov	r2, ip
   203a4:	bl	2013c <__assert_fail@plt+0xde04>
   203a8:	sub	sp, fp, #8
   203ac:	pop	{r4, sl, fp, pc}
   203b0:	bl	12314 <abort@plt>
   203b4:	push	{fp, lr}
   203b8:	mov	fp, sp
   203bc:	sub	sp, sp, #48	; 0x30
   203c0:	mov	r3, sp
   203c4:	vmov.i32	q8, #0	; 0x00000000
   203c8:	mov	ip, #32
   203cc:	cmp	r0, #10
   203d0:	add	r2, r3, #16
   203d4:	vst1.64	{d16-d17}, [r3], ip
   203d8:	vst1.64	{d16-d17}, [r3]
   203dc:	vst1.64	{d16-d17}, [r2]
   203e0:	beq	20400 <__assert_fail@plt+0xe0c8>
   203e4:	str	r0, [sp]
   203e8:	mov	r3, sp
   203ec:	mov	r0, #0
   203f0:	mvn	r2, #0
   203f4:	bl	2013c <__assert_fail@plt+0xde04>
   203f8:	mov	sp, fp
   203fc:	pop	{fp, pc}
   20400:	bl	12314 <abort@plt>
   20404:	push	{fp, lr}
   20408:	mov	fp, sp
   2040c:	sub	sp, sp, #48	; 0x30
   20410:	mov	r3, sp
   20414:	vmov.i32	q8, #0	; 0x00000000
   20418:	mov	ip, #32
   2041c:	cmp	r0, #10
   20420:	add	lr, r3, #16
   20424:	vst1.64	{d16-d17}, [r3], ip
   20428:	vst1.64	{d16-d17}, [r3]
   2042c:	vst1.64	{d16-d17}, [lr]
   20430:	beq	2044c <__assert_fail@plt+0xe114>
   20434:	str	r0, [sp]
   20438:	mov	r3, sp
   2043c:	mov	r0, #0
   20440:	bl	2013c <__assert_fail@plt+0xde04>
   20444:	mov	sp, fp
   20448:	pop	{fp, pc}
   2044c:	bl	12314 <abort@plt>
   20450:	push	{r4, sl, fp, lr}
   20454:	add	fp, sp, #8
   20458:	sub	sp, sp, #48	; 0x30
   2045c:	mov	lr, r0
   20460:	movw	r0, #35024	; 0x88d0
   20464:	mov	r3, #32
   20468:	mov	ip, r1
   2046c:	mov	r4, #1
   20470:	movt	r0, #3
   20474:	add	r1, r0, #16
   20478:	vld1.64	{d16-d17}, [r0], r3
   2047c:	mov	r3, sp
   20480:	vld1.64	{d18-d19}, [r1]
   20484:	add	r1, r3, #16
   20488:	vld1.64	{d20-d21}, [r0]
   2048c:	add	r0, r3, #32
   20490:	vst1.64	{d18-d19}, [r1]
   20494:	mov	r1, r3
   20498:	vst1.64	{d20-d21}, [r0]
   2049c:	mov	r0, #28
   204a0:	and	r0, r0, r2, lsr #3
   204a4:	and	r2, r2, #31
   204a8:	vst1.64	{d16-d17}, [r1], r0
   204ac:	ldr	r0, [r1, #8]
   204b0:	bic	r4, r4, r0, lsr r2
   204b4:	eor	r0, r0, r4, lsl r2
   204b8:	mov	r2, ip
   204bc:	str	r0, [r1, #8]
   204c0:	mov	r0, #0
   204c4:	mov	r1, lr
   204c8:	bl	2013c <__assert_fail@plt+0xde04>
   204cc:	sub	sp, fp, #8
   204d0:	pop	{r4, sl, fp, pc}
   204d4:	push	{fp, lr}
   204d8:	mov	fp, sp
   204dc:	sub	sp, sp, #48	; 0x30
   204e0:	mov	ip, r0
   204e4:	movw	r0, #35024	; 0x88d0
   204e8:	mov	r3, #32
   204ec:	movt	r0, #3
   204f0:	add	r2, r0, #16
   204f4:	vld1.64	{d16-d17}, [r0], r3
   204f8:	mov	r3, sp
   204fc:	vld1.64	{d18-d19}, [r2]
   20500:	add	r2, r3, #16
   20504:	vld1.64	{d20-d21}, [r0]
   20508:	add	r0, r3, #32
   2050c:	vst1.64	{d18-d19}, [r2]
   20510:	mov	r2, r3
   20514:	vst1.64	{d20-d21}, [r0]
   20518:	mov	r0, #28
   2051c:	and	r0, r0, r1, lsr #3
   20520:	and	r1, r1, #31
   20524:	vst1.64	{d16-d17}, [r2], r0
   20528:	mov	r0, #1
   2052c:	ldr	lr, [r2, #8]
   20530:	bic	r0, r0, lr, lsr r1
   20534:	eor	r0, lr, r0, lsl r1
   20538:	mov	r1, ip
   2053c:	str	r0, [r2, #8]
   20540:	mov	r0, #0
   20544:	mvn	r2, #0
   20548:	bl	2013c <__assert_fail@plt+0xde04>
   2054c:	mov	sp, fp
   20550:	pop	{fp, pc}
   20554:	push	{fp, lr}
   20558:	mov	fp, sp
   2055c:	sub	sp, sp, #48	; 0x30
   20560:	movw	r2, #35024	; 0x88d0
   20564:	mov	r3, #32
   20568:	mov	r1, r0
   2056c:	movt	r2, #3
   20570:	add	r0, r2, #16
   20574:	vld1.64	{d16-d17}, [r2], r3
   20578:	mov	r3, sp
   2057c:	vld1.64	{d18-d19}, [r0]
   20580:	add	r0, r3, #16
   20584:	vld1.64	{d20-d21}, [r2]
   20588:	mov	r2, r3
   2058c:	vst1.64	{d18-d19}, [r0]
   20590:	add	r0, r3, #32
   20594:	vst1.64	{d20-d21}, [r0]
   20598:	mov	r0, #12
   2059c:	vst1.64	{d16-d17}, [r2], r0
   205a0:	ldr	r0, [r2]
   205a4:	orr	r0, r0, #67108864	; 0x4000000
   205a8:	str	r0, [r2]
   205ac:	mov	r0, #0
   205b0:	mvn	r2, #0
   205b4:	bl	2013c <__assert_fail@plt+0xde04>
   205b8:	mov	sp, fp
   205bc:	pop	{fp, pc}
   205c0:	push	{fp, lr}
   205c4:	mov	fp, sp
   205c8:	sub	sp, sp, #48	; 0x30
   205cc:	mov	ip, r1
   205d0:	mov	r1, r0
   205d4:	movw	r0, #35024	; 0x88d0
   205d8:	mov	r3, #32
   205dc:	movt	r0, #3
   205e0:	add	r2, r0, #16
   205e4:	vld1.64	{d16-d17}, [r0], r3
   205e8:	mov	r3, sp
   205ec:	vld1.64	{d18-d19}, [r2]
   205f0:	add	r2, r3, #16
   205f4:	vld1.64	{d20-d21}, [r0]
   205f8:	add	r0, r3, #32
   205fc:	vst1.64	{d18-d19}, [r2]
   20600:	mov	r2, r3
   20604:	vst1.64	{d20-d21}, [r0]
   20608:	mov	r0, #12
   2060c:	vst1.64	{d16-d17}, [r2], r0
   20610:	ldr	r0, [r2]
   20614:	orr	r0, r0, #67108864	; 0x4000000
   20618:	str	r0, [r2]
   2061c:	mov	r0, #0
   20620:	mov	r2, ip
   20624:	bl	2013c <__assert_fail@plt+0xde04>
   20628:	mov	sp, fp
   2062c:	pop	{fp, pc}
   20630:	push	{r4, sl, fp, lr}
   20634:	add	fp, sp, #8
   20638:	sub	sp, sp, #96	; 0x60
   2063c:	mov	ip, r2
   20640:	mov	r2, sp
   20644:	vmov.i32	q8, #0	; 0x00000000
   20648:	mov	r4, #28
   2064c:	cmp	r1, #10
   20650:	mov	r3, r2
   20654:	add	lr, r2, #16
   20658:	vst1.64	{d16-d17}, [r3], r4
   2065c:	vst1.64	{d16-d17}, [lr]
   20660:	vst1.32	{d16-d17}, [r3]
   20664:	beq	206b4 <__assert_fail@plt+0xe37c>
   20668:	vld1.64	{d16-d17}, [r2], r4
   2066c:	vld1.64	{d18-d19}, [lr]
   20670:	add	r3, sp, #48	; 0x30
   20674:	add	r4, r3, #4
   20678:	vld1.32	{d20-d21}, [r2]
   2067c:	add	r2, r3, #20
   20680:	vst1.32	{d16-d17}, [r4]
   20684:	vst1.32	{d18-d19}, [r2]
   20688:	add	r2, r3, #32
   2068c:	vst1.32	{d20-d21}, [r2]
   20690:	str	r1, [sp, #48]	; 0x30
   20694:	mvn	r2, #0
   20698:	ldr	r1, [sp, #60]	; 0x3c
   2069c:	orr	r1, r1, #67108864	; 0x4000000
   206a0:	str	r1, [sp, #60]	; 0x3c
   206a4:	mov	r1, ip
   206a8:	bl	2013c <__assert_fail@plt+0xde04>
   206ac:	sub	sp, fp, #8
   206b0:	pop	{r4, sl, fp, pc}
   206b4:	bl	12314 <abort@plt>
   206b8:	push	{r4, r5, fp, lr}
   206bc:	add	fp, sp, #8
   206c0:	sub	sp, sp, #48	; 0x30
   206c4:	mov	ip, r3
   206c8:	movw	r3, #35024	; 0x88d0
   206cc:	mov	lr, #32
   206d0:	cmp	r1, #0
   206d4:	mov	r5, sp
   206d8:	movt	r3, #3
   206dc:	cmpne	r2, #0
   206e0:	add	r4, r3, #16
   206e4:	vld1.64	{d16-d17}, [r3], lr
   206e8:	vld1.64	{d18-d19}, [r4]
   206ec:	add	r4, r5, #16
   206f0:	vld1.64	{d20-d21}, [r3]
   206f4:	vst1.64	{d16-d17}, [r5], lr
   206f8:	mov	r3, #10
   206fc:	vst1.64	{d18-d19}, [r4]
   20700:	vst1.64	{d20-d21}, [r5]
   20704:	str	r3, [sp]
   20708:	bne	20710 <__assert_fail@plt+0xe3d8>
   2070c:	bl	12314 <abort@plt>
   20710:	str	r2, [sp, #44]	; 0x2c
   20714:	str	r1, [sp, #40]	; 0x28
   20718:	mov	r3, sp
   2071c:	mov	r1, ip
   20720:	mvn	r2, #0
   20724:	bl	2013c <__assert_fail@plt+0xde04>
   20728:	sub	sp, fp, #8
   2072c:	pop	{r4, r5, fp, pc}
   20730:	push	{r4, r5, fp, lr}
   20734:	add	fp, sp, #8
   20738:	sub	sp, sp, #48	; 0x30
   2073c:	mov	lr, r3
   20740:	movw	r3, #35024	; 0x88d0
   20744:	mov	ip, #32
   20748:	cmp	r1, #0
   2074c:	mov	r5, sp
   20750:	movt	r3, #3
   20754:	cmpne	r2, #0
   20758:	add	r4, r3, #16
   2075c:	vld1.64	{d16-d17}, [r3], ip
   20760:	vld1.64	{d18-d19}, [r4]
   20764:	add	r4, r5, #16
   20768:	vld1.64	{d20-d21}, [r3]
   2076c:	vst1.64	{d16-d17}, [r5], ip
   20770:	mov	r3, #10
   20774:	vst1.64	{d18-d19}, [r4]
   20778:	vst1.64	{d20-d21}, [r5]
   2077c:	str	r3, [sp]
   20780:	bne	20788 <__assert_fail@plt+0xe450>
   20784:	bl	12314 <abort@plt>
   20788:	ldr	ip, [fp, #8]
   2078c:	str	r2, [sp, #44]	; 0x2c
   20790:	str	r1, [sp, #40]	; 0x28
   20794:	mov	r3, sp
   20798:	mov	r1, lr
   2079c:	mov	r2, ip
   207a0:	bl	2013c <__assert_fail@plt+0xde04>
   207a4:	sub	sp, fp, #8
   207a8:	pop	{r4, r5, fp, pc}
   207ac:	push	{r4, sl, fp, lr}
   207b0:	add	fp, sp, #8
   207b4:	sub	sp, sp, #48	; 0x30
   207b8:	mov	ip, r2
   207bc:	movw	r2, #35024	; 0x88d0
   207c0:	mov	lr, #32
   207c4:	cmp	r0, #0
   207c8:	mov	r4, sp
   207cc:	movt	r2, #3
   207d0:	cmpne	r1, #0
   207d4:	add	r3, r2, #16
   207d8:	vld1.64	{d16-d17}, [r2], lr
   207dc:	vld1.64	{d18-d19}, [r3]
   207e0:	add	r3, r4, #16
   207e4:	vld1.64	{d20-d21}, [r2]
   207e8:	vst1.64	{d16-d17}, [r4], lr
   207ec:	mov	r2, #10
   207f0:	vst1.64	{d18-d19}, [r3]
   207f4:	vst1.64	{d20-d21}, [r4]
   207f8:	str	r2, [sp]
   207fc:	bne	20804 <__assert_fail@plt+0xe4cc>
   20800:	bl	12314 <abort@plt>
   20804:	str	r1, [sp, #44]	; 0x2c
   20808:	str	r0, [sp, #40]	; 0x28
   2080c:	mov	r3, sp
   20810:	mov	r0, #0
   20814:	mov	r1, ip
   20818:	mvn	r2, #0
   2081c:	bl	2013c <__assert_fail@plt+0xde04>
   20820:	sub	sp, fp, #8
   20824:	pop	{r4, sl, fp, pc}
   20828:	push	{r4, r5, fp, lr}
   2082c:	add	fp, sp, #8
   20830:	sub	sp, sp, #48	; 0x30
   20834:	mov	lr, r2
   20838:	movw	r2, #35024	; 0x88d0
   2083c:	mov	ip, r3
   20840:	mov	r3, #32
   20844:	cmp	r0, #0
   20848:	mov	r5, sp
   2084c:	movt	r2, #3
   20850:	cmpne	r1, #0
   20854:	add	r4, r2, #16
   20858:	vld1.64	{d16-d17}, [r2], r3
   2085c:	vld1.64	{d18-d19}, [r4]
   20860:	add	r4, r5, #16
   20864:	vld1.64	{d20-d21}, [r2]
   20868:	vst1.64	{d16-d17}, [r5], r3
   2086c:	mov	r2, #10
   20870:	vst1.64	{d18-d19}, [r4]
   20874:	vst1.64	{d20-d21}, [r5]
   20878:	str	r2, [sp]
   2087c:	bne	20884 <__assert_fail@plt+0xe54c>
   20880:	bl	12314 <abort@plt>
   20884:	str	r1, [sp, #44]	; 0x2c
   20888:	str	r0, [sp, #40]	; 0x28
   2088c:	mov	r3, sp
   20890:	mov	r0, #0
   20894:	mov	r1, lr
   20898:	mov	r2, ip
   2089c:	bl	2013c <__assert_fail@plt+0xde04>
   208a0:	sub	sp, fp, #8
   208a4:	pop	{r4, r5, fp, pc}
   208a8:	movw	r3, #33408	; 0x8280
   208ac:	movt	r3, #3
   208b0:	b	2013c <__assert_fail@plt+0xde04>
   208b4:	movw	r3, #33408	; 0x8280
   208b8:	mov	r2, r1
   208bc:	mov	r1, r0
   208c0:	mov	r0, #0
   208c4:	movt	r3, #3
   208c8:	b	2013c <__assert_fail@plt+0xde04>
   208cc:	movw	r3, #33408	; 0x8280
   208d0:	mvn	r2, #0
   208d4:	movt	r3, #3
   208d8:	b	2013c <__assert_fail@plt+0xde04>
   208dc:	movw	r3, #33408	; 0x8280
   208e0:	mov	r1, r0
   208e4:	mov	r0, #0
   208e8:	mvn	r2, #0
   208ec:	movt	r3, #3
   208f0:	b	2013c <__assert_fail@plt+0xde04>
   208f4:	push	{r4, r5, fp, lr}
   208f8:	add	fp, sp, #8
   208fc:	mov	r5, r0
   20900:	mov	r4, r1
   20904:	mov	r0, #0
   20908:	mov	r2, #5
   2090c:	mov	r1, r5
   20910:	bl	11f54 <dcgettext@plt>
   20914:	cmp	r0, r5
   20918:	popne	{r4, r5, fp, pc}
   2091c:	bl	23fec <__assert_fail@plt+0x11cb4>
   20920:	ldrb	r1, [r0]
   20924:	and	r1, r1, #223	; 0xdf
   20928:	cmp	r1, #71	; 0x47
   2092c:	beq	20994 <__assert_fail@plt+0xe65c>
   20930:	cmp	r1, #85	; 0x55
   20934:	bne	209b8 <__assert_fail@plt+0xe680>
   20938:	ldrb	r1, [r0, #1]
   2093c:	and	r1, r1, #223	; 0xdf
   20940:	cmp	r1, #84	; 0x54
   20944:	bne	209b8 <__assert_fail@plt+0xe680>
   20948:	ldrb	r1, [r0, #2]
   2094c:	and	r1, r1, #223	; 0xdf
   20950:	cmp	r1, #70	; 0x46
   20954:	ldrbeq	r1, [r0, #3]
   20958:	cmpeq	r1, #45	; 0x2d
   2095c:	bne	209b8 <__assert_fail@plt+0xe680>
   20960:	ldrb	r1, [r0, #4]
   20964:	cmp	r1, #56	; 0x38
   20968:	ldrbeq	r0, [r0, #5]
   2096c:	cmpeq	r0, #0
   20970:	bne	209b8 <__assert_fail@plt+0xe680>
   20974:	ldrb	r1, [r5]
   20978:	movw	r2, #28239	; 0x6e4f
   2097c:	movw	r0, #28243	; 0x6e53
   20980:	movt	r2, #2
   20984:	movt	r0, #2
   20988:	cmp	r1, #96	; 0x60
   2098c:	moveq	r0, r2
   20990:	pop	{r4, r5, fp, pc}
   20994:	ldrb	r1, [r0, #1]
   20998:	and	r1, r1, #223	; 0xdf
   2099c:	cmp	r1, #66	; 0x42
   209a0:	bne	209b8 <__assert_fail@plt+0xe680>
   209a4:	ldrb	r1, [r0, #2]
   209a8:	cmp	r1, #49	; 0x31
   209ac:	ldrbeq	r1, [r0, #3]
   209b0:	cmpeq	r1, #56	; 0x38
   209b4:	beq	209d4 <__assert_fail@plt+0xe69c>
   209b8:	movw	r1, #25519	; 0x63af
   209bc:	movw	r0, #23746	; 0x5cc2
   209c0:	cmp	r4, #9
   209c4:	movt	r1, #2
   209c8:	movt	r0, #2
   209cc:	moveq	r0, r1
   209d0:	pop	{r4, r5, fp, pc}
   209d4:	ldrb	r1, [r0, #4]
   209d8:	cmp	r1, #48	; 0x30
   209dc:	ldrbeq	r1, [r0, #5]
   209e0:	cmpeq	r1, #51	; 0x33
   209e4:	bne	209b8 <__assert_fail@plt+0xe680>
   209e8:	ldrb	r1, [r0, #6]
   209ec:	cmp	r1, #48	; 0x30
   209f0:	ldrbeq	r0, [r0, #7]
   209f4:	cmpeq	r0, #0
   209f8:	bne	209b8 <__assert_fail@plt+0xe680>
   209fc:	ldrb	r1, [r5]
   20a00:	movw	r2, #28247	; 0x6e57
   20a04:	movw	r0, #28251	; 0x6e5b
   20a08:	movt	r2, #2
   20a0c:	movt	r0, #2
   20a10:	b	20988 <__assert_fail@plt+0xe650>
   20a14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20a18:	add	fp, sp, #24
   20a1c:	cmp	r1, #0
   20a20:	beq	20a5c <__assert_fail@plt+0xe724>
   20a24:	mov	r5, r1
   20a28:	mov	r6, r0
   20a2c:	cmp	r0, #0
   20a30:	beq	20a84 <__assert_fail@plt+0xe74c>
   20a34:	movw	r1, #28340	; 0x6eb4
   20a38:	mov	r0, r6
   20a3c:	movt	r1, #2
   20a40:	bl	23f38 <__assert_fail@plt+0x11c00>
   20a44:	mov	r7, r0
   20a48:	cmp	r0, #0
   20a4c:	bne	20a88 <__assert_fail@plt+0xe750>
   20a50:	mov	r9, #0
   20a54:	mov	r0, r9
   20a58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20a5c:	movw	r0, #2076	; 0x81c
   20a60:	bl	22208 <__assert_fail@plt+0xfed0>
   20a64:	movw	r1, #3360	; 0xd20
   20a68:	mov	r9, r0
   20a6c:	mov	r0, #0
   20a70:	movt	r1, #2
   20a74:	stm	r9, {r0, r1}
   20a78:	str	r0, [r9, #8]
   20a7c:	mov	r0, r9
   20a80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20a84:	mov	r7, #0
   20a88:	movw	r0, #2076	; 0x81c
   20a8c:	bl	22208 <__assert_fail@plt+0xfed0>
   20a90:	mov	r9, r0
   20a94:	movw	r0, #3360	; 0xd20
   20a98:	cmp	r7, #0
   20a9c:	movt	r0, #2
   20aa0:	str	r7, [r9]
   20aa4:	stmib	r9, {r0, r6}
   20aa8:	beq	20ad0 <__assert_fail@plt+0xe798>
   20aac:	cmp	r5, #2048	; 0x800
   20ab0:	add	r1, r9, #12
   20ab4:	mov	r0, r7
   20ab8:	mov	r2, #0
   20abc:	movcs	r5, #2048	; 0x800
   20ac0:	mov	r3, r5
   20ac4:	bl	1217c <setvbuf@plt>
   20ac8:	mov	r0, r9
   20acc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20ad0:	cmp	r5, #1024	; 0x400
   20ad4:	mov	r0, #0
   20ad8:	add	r8, r9, #16
   20adc:	movcs	r5, #1024	; 0x400
   20ae0:	str	r0, [r9, #12]
   20ae4:	cmp	r5, #1
   20ae8:	blt	20b34 <__assert_fail@plt+0xe7fc>
   20aec:	add	r6, r8, r5
   20af0:	mov	r5, r8
   20af4:	sub	r1, r6, r5
   20af8:	mov	r0, r5
   20afc:	mov	r2, #0
   20b00:	bl	122e4 <getrandom@plt>
   20b04:	cmp	r0, #0
   20b08:	blt	20b1c <__assert_fail@plt+0xe7e4>
   20b0c:	add	r5, r5, r0
   20b10:	cmp	r5, r6
   20b14:	bcc	20af4 <__assert_fail@plt+0xe7bc>
   20b18:	b	20b34 <__assert_fail@plt+0xe7fc>
   20b1c:	bl	12164 <__errno_location@plt>
   20b20:	ldr	r4, [r0]
   20b24:	cmp	r4, #4
   20b28:	bne	20b44 <__assert_fail@plt+0xe80c>
   20b2c:	cmp	r5, r6
   20b30:	bcc	20af4 <__assert_fail@plt+0xe7bc>
   20b34:	mov	r0, r8
   20b38:	bl	20fc0 <__assert_fail@plt+0xec88>
   20b3c:	mov	r0, r9
   20b40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20b44:	ldr	r5, [r9]
   20b48:	mov	r7, r0
   20b4c:	mov	r0, r9
   20b50:	movw	r1, #2076	; 0x81c
   20b54:	movw	r2, #2076	; 0x81c
   20b58:	bl	1223c <__explicit_bzero_chk@plt>
   20b5c:	mov	r0, r9
   20b60:	bl	1cc78 <__assert_fail@plt+0xa940>
   20b64:	cmp	r5, #0
   20b68:	beq	20b74 <__assert_fail@plt+0xe83c>
   20b6c:	mov	r0, r5
   20b70:	bl	1c6f4 <__assert_fail@plt+0xa3bc>
   20b74:	str	r4, [r7]
   20b78:	b	20a50 <__assert_fail@plt+0xe718>
   20b7c:	str	r1, [r0, #4]
   20b80:	bx	lr
   20b84:	str	r1, [r0, #8]
   20b88:	bx	lr
   20b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b90:	add	fp, sp, #28
   20b94:	sub	sp, sp, #4
   20b98:	ldr	r3, [r0]
   20b9c:	mov	r6, r2
   20ba0:	mov	r5, r1
   20ba4:	mov	sl, r0
   20ba8:	cmp	r3, #0
   20bac:	beq	20c28 <__assert_fail@plt+0xe8f0>
   20bb0:	mov	r0, r5
   20bb4:	mov	r1, #1
   20bb8:	mov	r2, r6
   20bbc:	bl	122d8 <fread_unlocked@plt>
   20bc0:	mov	r4, r0
   20bc4:	sub	r6, r6, r0
   20bc8:	bl	12164 <__errno_location@plt>
   20bcc:	cmp	r6, #0
   20bd0:	beq	20c20 <__assert_fail@plt+0xe8e8>
   20bd4:	mov	r7, r0
   20bd8:	ldr	r1, [sl]
   20bdc:	ldr	r0, [r7]
   20be0:	ldr	r1, [r1]
   20be4:	lsl	r1, r1, #26
   20be8:	and	r0, r0, r1, asr #31
   20bec:	str	r0, [r7]
   20bf0:	ldr	r1, [sl, #4]
   20bf4:	ldr	r0, [sl, #8]
   20bf8:	blx	r1
   20bfc:	ldr	r3, [sl]
   20c00:	add	r5, r5, r4
   20c04:	mov	r1, #1
   20c08:	mov	r2, r6
   20c0c:	mov	r0, r5
   20c10:	bl	122d8 <fread_unlocked@plt>
   20c14:	mov	r4, r0
   20c18:	subs	r6, r6, r0
   20c1c:	bne	20bd8 <__assert_fail@plt+0xe8a0>
   20c20:	sub	sp, fp, #28
   20c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c28:	ldr	r7, [sl, #12]
   20c2c:	movw	r0, #1052	; 0x41c
   20c30:	add	r9, sl, r0
   20c34:	sub	r0, r9, r7
   20c38:	cmp	r7, r6
   20c3c:	add	r1, r0, #1024	; 0x400
   20c40:	bcs	20cac <__assert_fail@plt+0xe974>
   20c44:	add	r8, sl, #16
   20c48:	mov	r0, r5
   20c4c:	mov	r2, r7
   20c50:	bl	11ec4 <memcpy@plt>
   20c54:	add	r5, r5, r7
   20c58:	sub	r6, r6, r7
   20c5c:	tst	r5, #3
   20c60:	beq	20c84 <__assert_fail@plt+0xe94c>
   20c64:	mov	r0, r8
   20c68:	mov	r1, r9
   20c6c:	bl	20d90 <__assert_fail@plt+0xea58>
   20c70:	mov	r7, #1024	; 0x400
   20c74:	cmp	r6, #1024	; 0x400
   20c78:	mov	r1, r9
   20c7c:	bhi	20c48 <__assert_fail@plt+0xe910>
   20c80:	b	20cc4 <__assert_fail@plt+0xe98c>
   20c84:	cmp	r6, #1024	; 0x400
   20c88:	bcc	20cb4 <__assert_fail@plt+0xe97c>
   20c8c:	mov	r0, r8
   20c90:	mov	r1, r5
   20c94:	bl	20d90 <__assert_fail@plt+0xea58>
   20c98:	subs	r6, r6, #1024	; 0x400
   20c9c:	add	r5, r5, #1024	; 0x400
   20ca0:	bne	20c84 <__assert_fail@plt+0xe94c>
   20ca4:	mov	r0, #0
   20ca8:	b	20cd8 <__assert_fail@plt+0xe9a0>
   20cac:	mov	r9, r1
   20cb0:	b	20cc4 <__assert_fail@plt+0xe98c>
   20cb4:	mov	r0, r8
   20cb8:	mov	r1, r9
   20cbc:	bl	20d90 <__assert_fail@plt+0xea58>
   20cc0:	mov	r7, #1024	; 0x400
   20cc4:	mov	r0, r5
   20cc8:	mov	r1, r9
   20ccc:	mov	r2, r6
   20cd0:	bl	11ec4 <memcpy@plt>
   20cd4:	sub	r0, r7, r6
   20cd8:	str	r0, [sl, #12]
   20cdc:	sub	sp, fp, #28
   20ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ce4:	push	{r4, r5, fp, lr}
   20ce8:	add	fp, sp, #8
   20cec:	ldr	r4, [r0]
   20cf0:	movw	r1, #2076	; 0x81c
   20cf4:	mvn	r2, #0
   20cf8:	mov	r5, r0
   20cfc:	bl	1223c <__explicit_bzero_chk@plt>
   20d00:	mov	r0, r5
   20d04:	bl	1cc78 <__assert_fail@plt+0xa940>
   20d08:	cmp	r4, #0
   20d0c:	moveq	r0, #0
   20d10:	popeq	{r4, r5, fp, pc}
   20d14:	mov	r0, r4
   20d18:	pop	{r4, r5, fp, lr}
   20d1c:	b	1c6f4 <__assert_fail@plt+0xa3bc>
   20d20:	push	{fp, lr}
   20d24:	mov	fp, sp
   20d28:	cmp	r0, #0
   20d2c:	beq	20d8c <__assert_fail@plt+0xea54>
   20d30:	mov	r4, r0
   20d34:	movw	r0, #33384	; 0x8268
   20d38:	movt	r0, #3
   20d3c:	ldr	r5, [r0]
   20d40:	bl	12164 <__errno_location@plt>
   20d44:	ldr	r6, [r0]
   20d48:	movw	r0, #28343	; 0x6eb7
   20d4c:	movw	r1, #28359	; 0x6ec7
   20d50:	mov	r2, #5
   20d54:	movt	r0, #2
   20d58:	movt	r1, #2
   20d5c:	cmp	r6, #0
   20d60:	moveq	r1, r0
   20d64:	mov	r0, #0
   20d68:	bl	11f54 <dcgettext@plt>
   20d6c:	mov	r7, r0
   20d70:	mov	r0, r4
   20d74:	bl	208dc <__assert_fail@plt+0xe5a4>
   20d78:	mov	r3, r0
   20d7c:	mov	r0, r5
   20d80:	mov	r1, r6
   20d84:	mov	r2, r7
   20d88:	bl	12080 <error@plt>
   20d8c:	bl	12314 <abort@plt>
   20d90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20d94:	add	fp, sp, #24
   20d98:	add	r6, r0, #1024	; 0x400
   20d9c:	add	lr, r0, #512	; 0x200
   20da0:	ldm	r6, {r2, r3, r6}
   20da4:	add	r6, r6, #1
   20da8:	add	r4, r6, r3
   20dac:	add	r3, r0, #16
   20db0:	str	r6, [r0, #1032]	; 0x408
   20db4:	mvn	r6, r0
   20db8:	cmp	lr, r3
   20dbc:	movhi	r3, lr
   20dc0:	add	r3, r3, r6
   20dc4:	lsr	ip, r3, #4
   20dc8:	mov	r3, #0
   20dcc:	mov	r5, r0
   20dd0:	eor	r2, r2, r2, lsl #13
   20dd4:	ldr	r6, [r5, r3]!
   20dd8:	and	r7, r6, #1020	; 0x3fc
   20ddc:	ldr	r8, [r0, r7]
   20de0:	ldr	r7, [r5, #512]	; 0x200
   20de4:	add	r2, r2, r7
   20de8:	add	r4, r2, r4
   20dec:	add	r4, r4, r8
   20df0:	eor	r8, r2, r2, lsr #6
   20df4:	str	r4, [r5]
   20df8:	ubfx	r4, r4, #10, #8
   20dfc:	ldr	r4, [r0, r4, lsl #2]
   20e00:	add	r4, r4, r6
   20e04:	mov	r6, r1
   20e08:	str	r4, [r6, r3]!
   20e0c:	add	r3, r3, #16
   20e10:	ldr	r2, [r5, #516]	; 0x204
   20e14:	ldr	r7, [r5, #4]
   20e18:	add	r2, r2, r8
   20e1c:	add	r8, r2, r4
   20e20:	and	r4, r7, #1020	; 0x3fc
   20e24:	ldr	r4, [r0, r4]
   20e28:	add	r4, r8, r4
   20e2c:	eor	r8, r2, r2, lsl #2
   20e30:	str	r4, [r5, #4]
   20e34:	ubfx	r4, r4, #10, #8
   20e38:	ldr	r4, [r0, r4, lsl #2]
   20e3c:	add	r4, r4, r7
   20e40:	str	r4, [r6, #4]
   20e44:	ldr	r2, [r5, #520]	; 0x208
   20e48:	ldr	r7, [r5, #8]
   20e4c:	add	r2, r2, r8
   20e50:	add	r8, r2, r4
   20e54:	and	r4, r7, #1020	; 0x3fc
   20e58:	ldr	r4, [r0, r4]
   20e5c:	add	r4, r8, r4
   20e60:	eor	r8, r2, r2, lsr #16
   20e64:	str	r4, [r5, #8]
   20e68:	ubfx	r4, r4, #10, #8
   20e6c:	ldr	r4, [r0, r4, lsl #2]
   20e70:	add	r4, r4, r7
   20e74:	str	r4, [r6, #8]
   20e78:	ldr	r2, [r5, #524]	; 0x20c
   20e7c:	ldr	r7, [r5, #12]
   20e80:	add	r2, r2, r8
   20e84:	add	r8, r2, r4
   20e88:	and	r4, r7, #1020	; 0x3fc
   20e8c:	ldr	r4, [r0, r4]
   20e90:	add	r4, r8, r4
   20e94:	str	r4, [r5, #12]
   20e98:	ubfx	r4, r4, #10, #8
   20e9c:	add	r5, r0, r3
   20ea0:	ldr	r4, [r0, r4, lsl #2]
   20ea4:	cmp	r5, lr
   20ea8:	add	r4, r4, r7
   20eac:	str	r4, [r6, #12]
   20eb0:	bcc	20dcc <__assert_fail@plt+0xea94>
   20eb4:	lsl	lr, ip, #4
   20eb8:	add	r9, r1, #16
   20ebc:	add	ip, r0, #1024	; 0x400
   20ec0:	mov	r3, r0
   20ec4:	add	r5, r3, lr
   20ec8:	eor	r2, r2, r2, lsl #13
   20ecc:	add	r3, r3, #16
   20ed0:	ldr	r7, [r5, #16]
   20ed4:	ldr	r8, [r5, #-496]	; 0xfffffe10
   20ed8:	and	r6, r7, #1020	; 0x3fc
   20edc:	add	r2, r2, r8
   20ee0:	ldr	r6, [r0, r6]
   20ee4:	add	r4, r2, r4
   20ee8:	eor	r8, r2, r2, lsr #6
   20eec:	add	r4, r4, r6
   20ef0:	mov	r6, r9
   20ef4:	add	r9, r9, #16
   20ef8:	str	r4, [r5, #16]
   20efc:	ubfx	r4, r4, #10, #8
   20f00:	ldr	r4, [r0, r4, lsl #2]
   20f04:	add	r4, r4, r7
   20f08:	str	r4, [r6, lr]!
   20f0c:	ldr	r2, [r5, #20]
   20f10:	ldr	r7, [r5, #-492]	; 0xfffffe14
   20f14:	and	r1, r2, #1020	; 0x3fc
   20f18:	add	r7, r7, r8
   20f1c:	ldr	r1, [r0, r1]
   20f20:	add	r4, r7, r4
   20f24:	add	r1, r4, r1
   20f28:	str	r1, [r5, #20]
   20f2c:	ubfx	r1, r1, #10, #8
   20f30:	ldr	r1, [r0, r1, lsl #2]
   20f34:	add	r1, r1, r2
   20f38:	eor	r2, r7, r7, lsl #2
   20f3c:	str	r1, [r6, #4]
   20f40:	ldr	r4, [r5, #-488]	; 0xfffffe18
   20f44:	ldr	r7, [r5, #24]
   20f48:	add	r2, r4, r2
   20f4c:	and	r4, r7, #1020	; 0x3fc
   20f50:	ldr	r4, [r0, r4]
   20f54:	add	r1, r2, r1
   20f58:	eor	r2, r2, r2, lsr #16
   20f5c:	add	r1, r1, r4
   20f60:	str	r1, [r5, #24]
   20f64:	ubfx	r1, r1, #10, #8
   20f68:	ldr	r1, [r0, r1, lsl #2]
   20f6c:	add	r1, r1, r7
   20f70:	str	r1, [r6, #8]
   20f74:	ldr	r4, [r5, #-484]	; 0xfffffe1c
   20f78:	ldr	r7, [r5, #28]
   20f7c:	add	r2, r4, r2
   20f80:	and	r4, r7, #1020	; 0x3fc
   20f84:	ldr	r4, [r0, r4]
   20f88:	add	r1, r2, r1
   20f8c:	add	r1, r1, r4
   20f90:	str	r1, [r5, #28]
   20f94:	ubfx	r1, r1, #10, #8
   20f98:	ldr	r1, [r0, r1, lsl #2]
   20f9c:	add	r4, r1, r7
   20fa0:	add	r1, r3, lr
   20fa4:	add	r1, r1, #16
   20fa8:	str	r4, [r6, #12]
   20fac:	cmp	r1, ip
   20fb0:	bcc	20ec4 <__assert_fail@plt+0xeb8c>
   20fb4:	str	r2, [r0, #1024]	; 0x400
   20fb8:	str	r4, [r0, #1028]	; 0x404
   20fbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fc4:	add	fp, sp, #28
   20fc8:	sub	sp, sp, #28
   20fcc:	str	r0, [sp, #20]
   20fd0:	add	r7, r0, #28
   20fd4:	movw	r0, #19064	; 0x4a78
   20fd8:	movw	r6, #57178	; 0xdf5a
   20fdc:	movw	r5, #89	; 0x59
   20fe0:	movw	r1, #15947	; 0x3e4b
   20fe4:	movw	sl, #6872	; 0x1ad8
   20fe8:	movw	r8, #15433	; 0x3c49
   20fec:	movw	lr, #37145	; 0x9119
   20ff0:	mov	r9, #0
   20ff4:	movt	r0, #55594	; 0xd92a
   20ff8:	movt	r6, #4967	; 0x1367
   20ffc:	movt	r5, #38361	; 0x95d9
   21000:	movt	r1, #49942	; 0xc316
   21004:	movt	sl, #3906	; 0xf42
   21008:	movt	r8, #42266	; 0xa51a
   2100c:	movt	lr, #12384	; 0x3060
   21010:	str	r0, [sp, #16]
   21014:	movw	r0, #59931	; 0xea1b
   21018:	movt	r0, #50415	; 0xc4ef
   2101c:	ldr	r3, [r7, #-28]	; 0xffffffe4
   21020:	str	r0, [sp, #24]
   21024:	ldr	r0, [r7]
   21028:	str	lr, [sp, #4]
   2102c:	add	r6, r3, r6
   21030:	ldr	r3, [sp, #20]
   21034:	str	r0, [sp, #12]
   21038:	add	r3, r3, r9, lsl #2
   2103c:	add	r9, r9, #8
   21040:	ldmib	r3, {r2, lr}
   21044:	ldr	r0, [r3, #12]
   21048:	ldr	ip, [r3, #16]
   2104c:	cmp	r9, #256	; 0x100
   21050:	add	r5, r2, r5
   21054:	add	r2, r0, sl
   21058:	add	r4, lr, r1
   2105c:	eor	r6, r6, r5, lsl #11
   21060:	add	r5, r4, r5
   21064:	add	r2, r2, r6
   21068:	str	r6, [sp, #8]
   2106c:	add	r6, r2, r4
   21070:	eor	r4, r5, r4, lsr #2
   21074:	eor	r0, r6, r2, lsl #8
   21078:	ldr	r6, [r3, #20]
   2107c:	str	r4, [sp]
   21080:	add	r1, r6, r8
   21084:	ldr	r6, [sp, #16]
   21088:	add	r1, r1, r0
   2108c:	add	r5, ip, r6
   21090:	add	r5, r5, r4
   21094:	ldr	r4, [sp, #4]
   21098:	add	r2, r5, r2
   2109c:	add	r6, r1, r5
   210a0:	eor	sl, r2, r5, lsr #16
   210a4:	ldr	r5, [r3, #24]
   210a8:	ldr	r2, [sp, #24]
   210ac:	eor	ip, r6, r1, lsl #10
   210b0:	ldr	r6, [sp, #12]
   210b4:	str	ip, [sp, #16]
   210b8:	add	r5, r5, r2
   210bc:	add	r6, r6, r4
   210c0:	ldr	r2, [sp]
   210c4:	add	r5, r5, sl
   210c8:	add	r6, r6, ip
   210cc:	add	r1, r5, r1
   210d0:	eor	r8, r1, r5, lsr #4
   210d4:	ldr	r1, [sp, #8]
   210d8:	add	r5, r6, r5
   210dc:	add	r4, r8, r1
   210e0:	add	r1, r4, r6
   210e4:	eor	lr, r1, r4, lsr #9
   210e8:	add	r1, lr, r0
   210ec:	eor	r0, r5, r6, lsl #8
   210f0:	add	r5, r0, r2
   210f4:	add	r6, r5, r4
   210f8:	str	r6, [r7, #-28]	; 0xffffffe4
   210fc:	str	r5, [r3, #4]
   21100:	str	r1, [r3, #8]
   21104:	str	sl, [r3, #12]
   21108:	str	ip, [r3, #16]
   2110c:	str	r8, [r3, #20]
   21110:	str	r0, [r3, #24]
   21114:	str	lr, [r7]
   21118:	add	r7, r7, #32
   2111c:	bcc	2101c <__assert_fail@plt+0xece4>
   21120:	ldr	r3, [sp, #20]
   21124:	ldr	r9, [sp, #16]
   21128:	mov	r4, #0
   2112c:	add	r7, r3, #28
   21130:	str	r0, [sp, #24]
   21134:	ldr	r0, [r7]
   21138:	ldr	r3, [r7, #-28]	; 0xffffffe4
   2113c:	str	r0, [sp, #16]
   21140:	add	r0, r3, r6
   21144:	str	r0, [sp, #12]
   21148:	ldr	r0, [sp, #20]
   2114c:	add	r3, r0, r4, lsl #2
   21150:	add	r4, r4, #8
   21154:	ldmib	r3, {r6, ip}
   21158:	ldr	r2, [r3, #16]
   2115c:	ldr	r0, [r3, #12]
   21160:	cmp	r4, #256	; 0x100
   21164:	str	r2, [sp, #8]
   21168:	ldr	r2, [sp, #12]
   2116c:	add	r5, r6, r5
   21170:	add	r0, r0, sl
   21174:	add	r1, ip, r1
   21178:	eor	r2, r2, r5, lsl #11
   2117c:	add	r0, r0, r2
   21180:	str	r2, [sp, #12]
   21184:	add	r2, r0, r1
   21188:	eor	ip, r2, r0, lsl #8
   2118c:	ldr	r2, [r3, #20]
   21190:	add	r2, r2, r8
   21194:	add	r6, r2, ip
   21198:	add	r2, r1, r5
   2119c:	eor	r5, r2, r1, lsr #2
   211a0:	ldr	r1, [sp, #8]
   211a4:	add	r1, r1, r9
   211a8:	add	r1, r1, r5
   211ac:	add	r0, r1, r0
   211b0:	add	r2, r6, r1
   211b4:	eor	sl, r0, r1, lsr #16
   211b8:	ldr	r0, [r3, #24]
   211bc:	ldr	r1, [sp, #24]
   211c0:	eor	r9, r2, r6, lsl #10
   211c4:	ldr	r2, [sp, #16]
   211c8:	add	r0, r0, r1
   211cc:	add	r2, r2, lr
   211d0:	add	r0, r0, sl
   211d4:	add	lr, r2, r9
   211d8:	add	r1, r0, r6
   211dc:	eor	r8, r1, r0, lsr #4
   211e0:	ldr	r1, [sp, #12]
   211e4:	add	r0, lr, r0
   211e8:	eor	r0, r0, lr, lsl #8
   211ec:	add	r5, r0, r5
   211f0:	add	r6, r8, r1
   211f4:	add	r1, r6, lr
   211f8:	eor	r1, r1, r6, lsr #9
   211fc:	add	r6, r5, r6
   21200:	add	r2, r1, ip
   21204:	mov	lr, r1
   21208:	str	r6, [r7, #-28]	; 0xffffffe4
   2120c:	str	r5, [r3, #4]
   21210:	str	r2, [r3, #8]
   21214:	str	sl, [r3, #12]
   21218:	str	r9, [r3, #16]
   2121c:	str	r8, [r3, #20]
   21220:	str	r0, [r3, #24]
   21224:	str	lr, [r7]
   21228:	mov	r1, r2
   2122c:	add	r7, r7, #32
   21230:	bcc	21130 <__assert_fail@plt+0xedf8>
   21234:	ldr	r0, [sp, #20]
   21238:	mov	r1, #0
   2123c:	str	r1, [r0, #1024]	; 0x400
   21240:	str	r1, [r0, #1028]	; 0x404
   21244:	str	r1, [r0, #1032]	; 0x408
   21248:	sub	sp, fp, #28
   2124c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21250:	push	{r4, r5, r6, sl, fp, lr}
   21254:	add	fp, sp, #16
   21258:	sub	sp, sp, #8
   2125c:	movw	r5, #14344	; 0x3808
   21260:	movw	r6, #52344	; 0xcc78
   21264:	mov	r4, r0
   21268:	mov	r0, #0
   2126c:	mov	r1, #0
   21270:	mov	r2, #0
   21274:	movt	r5, #2
   21278:	str	r0, [r4]
   2127c:	str	r0, [r4, #4]
   21280:	str	r0, [r4, #8]
   21284:	movt	r6, #1
   21288:	add	r0, r4, #12
   2128c:	mov	r3, r5
   21290:	str	r6, [sp]
   21294:	bl	24270 <_obstack_begin@@Base>
   21298:	add	r0, r4, #56	; 0x38
   2129c:	mov	r1, #0
   212a0:	mov	r2, #0
   212a4:	mov	r3, r5
   212a8:	str	r6, [sp]
   212ac:	bl	24270 <_obstack_begin@@Base>
   212b0:	add	r0, r4, #100	; 0x64
   212b4:	mov	r1, #0
   212b8:	mov	r2, #0
   212bc:	mov	r3, r5
   212c0:	str	r6, [sp]
   212c4:	bl	24270 <_obstack_begin@@Base>
   212c8:	sub	sp, fp, #16
   212cc:	pop	{r4, r5, r6, sl, fp, pc}
   212d0:	push	{r4, sl, fp, lr}
   212d4:	add	fp, sp, #8
   212d8:	mov	r4, r0
   212dc:	add	r0, r0, #12
   212e0:	mov	r1, #0
   212e4:	bl	24550 <_obstack_free@@Base>
   212e8:	add	r0, r4, #56	; 0x38
   212ec:	mov	r1, #0
   212f0:	bl	24550 <_obstack_free@@Base>
   212f4:	add	r0, r4, #100	; 0x64
   212f8:	mov	r1, #0
   212fc:	pop	{r4, sl, fp, lr}
   21300:	b	24550 <_obstack_free@@Base>
   21304:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21308:	add	fp, sp, #24
   2130c:	mov	r5, r1
   21310:	mov	r8, r0
   21314:	bl	12194 <fgetc@plt>
   21318:	cmn	r0, #1
   2131c:	beq	21380 <__assert_fail@plt+0xf048>
   21320:	mov	r7, r0
   21324:	add	r6, r5, #12
   21328:	add	r4, r5, #24
   2132c:	ldr	r0, [r5, #24]
   21330:	ldr	r1, [r5, #28]
   21334:	cmp	r1, r0
   21338:	bne	2134c <__assert_fail@plt+0xf014>
   2133c:	mov	r0, r6
   21340:	mov	r1, #1
   21344:	bl	243c4 <_obstack_newchunk@@Base>
   21348:	ldr	r0, [r4]
   2134c:	add	r1, r0, #1
   21350:	cmp	r7, #0
   21354:	str	r1, [r4]
   21358:	strb	r7, [r0]
   2135c:	bne	21368 <__assert_fail@plt+0xf030>
   21360:	mov	r0, r5
   21364:	bl	214ac <__assert_fail@plt+0xf174>
   21368:	mov	r0, r8
   2136c:	bl	12194 <fgetc@plt>
   21370:	mov	r7, r0
   21374:	cmn	r0, #1
   21378:	bne	2132c <__assert_fail@plt+0xeff4>
   2137c:	b	21388 <__assert_fail@plt+0xf050>
   21380:	add	r4, r5, #24
   21384:	add	r6, r5, #12
   21388:	ldr	r1, [r5, #20]
   2138c:	ldr	r0, [r5, #24]
   21390:	cmp	r0, r1
   21394:	beq	213cc <__assert_fail@plt+0xf094>
   21398:	ldr	r1, [r5, #28]
   2139c:	cmp	r1, r0
   213a0:	bne	213b4 <__assert_fail@plt+0xf07c>
   213a4:	mov	r0, r6
   213a8:	mov	r1, #1
   213ac:	bl	243c4 <_obstack_newchunk@@Base>
   213b0:	ldr	r0, [r4]
   213b4:	add	r1, r0, #1
   213b8:	str	r1, [r5, #24]
   213bc:	mov	r1, #0
   213c0:	strb	r1, [r0]
   213c4:	mov	r0, r5
   213c8:	bl	214ac <__assert_fail@plt+0xf174>
   213cc:	ldr	r0, [r5, #68]	; 0x44
   213d0:	ldr	r1, [r5, #72]	; 0x48
   213d4:	sub	r1, r1, r0
   213d8:	cmp	r1, #4
   213dc:	bcs	213f0 <__assert_fail@plt+0xf0b8>
   213e0:	add	r0, r5, #56	; 0x38
   213e4:	mov	r1, #4
   213e8:	bl	243c4 <_obstack_newchunk@@Base>
   213ec:	ldr	r0, [r5, #68]	; 0x44
   213f0:	mov	r1, #0
   213f4:	str	r1, [r0]
   213f8:	ldr	r1, [r5, #68]	; 0x44
   213fc:	ldr	r0, [r5, #64]	; 0x40
   21400:	add	r2, r1, #4
   21404:	str	r2, [r5, #68]	; 0x44
   21408:	cmp	r2, r0
   2140c:	ldrbeq	r1, [r5, #96]	; 0x60
   21410:	orreq	r1, r1, #2
   21414:	strbeq	r1, [r5, #96]	; 0x60
   21418:	ldr	r7, [r5, #80]	; 0x50
   2141c:	ldr	r3, [r5, #60]	; 0x3c
   21420:	ldr	r1, [r5, #72]	; 0x48
   21424:	add	r2, r7, r2
   21428:	bic	r2, r2, r7
   2142c:	sub	r7, r2, r3
   21430:	sub	r3, r1, r3
   21434:	str	r2, [r5, #68]	; 0x44
   21438:	cmp	r7, r3
   2143c:	movhi	r2, r1
   21440:	strhi	r1, [r5, #68]	; 0x44
   21444:	str	r0, [r5, #4]
   21448:	str	r2, [r5, #64]	; 0x40
   2144c:	ldr	r0, [r5, #108]	; 0x6c
   21450:	ldr	r2, [r5, #112]	; 0x70
   21454:	cmp	r2, r0
   21458:	ldrbeq	r1, [r5, #140]	; 0x8c
   2145c:	orreq	r1, r1, #2
   21460:	strbeq	r1, [r5, #140]	; 0x8c
   21464:	ldr	r7, [r5, #124]	; 0x7c
   21468:	ldr	r3, [r5, #104]	; 0x68
   2146c:	ldr	r1, [r5, #116]	; 0x74
   21470:	add	r2, r7, r2
   21474:	bic	r2, r2, r7
   21478:	sub	r7, r2, r3
   2147c:	sub	r3, r1, r3
   21480:	str	r2, [r5, #112]	; 0x70
   21484:	cmp	r7, r3
   21488:	strhi	r1, [r5, #112]	; 0x70
   2148c:	str	r0, [r5, #8]
   21490:	movhi	r2, r1
   21494:	mov	r0, r8
   21498:	str	r2, [r5, #108]	; 0x6c
   2149c:	bl	11eac <ferror@plt>
   214a0:	clz	r0, r0
   214a4:	lsr	r0, r0, #5
   214a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   214ac:	push	{r4, r5, r6, r7, fp, lr}
   214b0:	add	fp, sp, #16
   214b4:	ldr	r5, [r0, #20]
   214b8:	ldr	r6, [r0, #24]
   214bc:	mov	r4, r0
   214c0:	cmp	r6, r5
   214c4:	mvn	r7, r5
   214c8:	ldrbeq	r0, [r4, #52]	; 0x34
   214cc:	orreq	r0, r0, #2
   214d0:	strbeq	r0, [r4, #52]	; 0x34
   214d4:	ldr	r1, [r4, #36]	; 0x24
   214d8:	ldr	r2, [r4, #16]
   214dc:	ldr	r0, [r4, #28]
   214e0:	add	r3, r1, r6
   214e4:	bic	r1, r3, r1
   214e8:	sub	r3, r1, r2
   214ec:	sub	r2, r0, r2
   214f0:	str	r1, [r4, #24]
   214f4:	cmp	r3, r2
   214f8:	movhi	r1, r0
   214fc:	strhi	r0, [r4, #24]
   21500:	str	r1, [r4, #20]
   21504:	ldr	r0, [r4, #68]	; 0x44
   21508:	ldr	r1, [r4, #72]	; 0x48
   2150c:	sub	r1, r1, r0
   21510:	cmp	r1, #4
   21514:	bcs	21528 <__assert_fail@plt+0xf1f0>
   21518:	add	r0, r4, #56	; 0x38
   2151c:	mov	r1, #4
   21520:	bl	243c4 <_obstack_newchunk@@Base>
   21524:	ldr	r0, [r4, #68]	; 0x44
   21528:	str	r5, [r0]
   2152c:	add	r6, r6, r7
   21530:	ldr	r1, [r4, #68]	; 0x44
   21534:	ldr	r0, [r4, #112]	; 0x70
   21538:	ldr	r2, [r4, #116]	; 0x74
   2153c:	add	r1, r1, #4
   21540:	str	r1, [r4, #68]	; 0x44
   21544:	sub	r1, r2, r0
   21548:	cmp	r1, #4
   2154c:	bcs	21560 <__assert_fail@plt+0xf228>
   21550:	add	r0, r4, #100	; 0x64
   21554:	mov	r1, #4
   21558:	bl	243c4 <_obstack_newchunk@@Base>
   2155c:	ldr	r0, [r4, #112]	; 0x70
   21560:	str	r6, [r0]
   21564:	ldr	r0, [r4]
   21568:	ldr	r1, [r4, #112]	; 0x70
   2156c:	add	r1, r1, #4
   21570:	add	r0, r0, #1
   21574:	str	r1, [r4, #112]	; 0x70
   21578:	str	r0, [r4]
   2157c:	pop	{r4, r5, r6, r7, fp, pc}
   21580:	push	{r4, r5, r6, r7, fp, lr}
   21584:	add	fp, sp, #16
   21588:	mov	r4, r1
   2158c:	mov	r1, #0
   21590:	mov	r6, r2
   21594:	bl	12218 <setlocale@plt>
   21598:	cmp	r0, #0
   2159c:	beq	215cc <__assert_fail@plt+0xf294>
   215a0:	mov	r7, r0
   215a4:	bl	12140 <strlen@plt>
   215a8:	cmp	r0, r6
   215ac:	bcs	215ec <__assert_fail@plt+0xf2b4>
   215b0:	add	r2, r0, #1
   215b4:	mov	r0, r4
   215b8:	mov	r1, r7
   215bc:	bl	11ec4 <memcpy@plt>
   215c0:	mov	r5, #0
   215c4:	mov	r0, r5
   215c8:	pop	{r4, r5, r6, r7, fp, pc}
   215cc:	cmp	r6, #0
   215d0:	mov	r5, #22
   215d4:	movne	r0, #0
   215d8:	strbne	r0, [r4]
   215dc:	movne	r0, r5
   215e0:	popne	{r4, r5, r6, r7, fp, pc}
   215e4:	mov	r0, r5
   215e8:	pop	{r4, r5, r6, r7, fp, pc}
   215ec:	mov	r5, #34	; 0x22
   215f0:	cmp	r6, #0
   215f4:	beq	21614 <__assert_fail@plt+0xf2dc>
   215f8:	sub	r6, r6, #1
   215fc:	mov	r0, r4
   21600:	mov	r1, r7
   21604:	mov	r2, r6
   21608:	bl	11ec4 <memcpy@plt>
   2160c:	mov	r0, #0
   21610:	strb	r0, [r4, r6]
   21614:	mov	r0, r5
   21618:	pop	{r4, r5, r6, r7, fp, pc}
   2161c:	mov	r1, #0
   21620:	b	12218 <setlocale@plt>
   21624:	push	{fp, lr}
   21628:	mov	fp, sp
   2162c:	bl	120b0 <mkstemp64@plt>
   21630:	pop	{fp, lr}
   21634:	b	21b0c <__assert_fail@plt+0xf7d4>
   21638:	push	{r4, sl, fp, lr}
   2163c:	add	fp, sp, #8
   21640:	mov	r4, r1
   21644:	bl	12008 <mkostemp64@plt>
   21648:	mov	r1, r4
   2164c:	pop	{r4, sl, fp, lr}
   21650:	b	23ee0 <__assert_fail@plt+0x11ba8>
   21654:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21658:	add	fp, sp, #24
   2165c:	ldrb	lr, [r0]
   21660:	ldrb	r5, [r1]
   21664:	cmp	lr, #45	; 0x2d
   21668:	bne	216e4 <__assert_fail@plt+0xf3ac>
   2166c:	ldrb	r4, [r0, #1]!
   21670:	cmp	r4, #48	; 0x30
   21674:	beq	2166c <__assert_fail@plt+0xf334>
   21678:	cmp	r4, r3
   2167c:	beq	2166c <__assert_fail@plt+0xf334>
   21680:	cmp	r5, #45	; 0x2d
   21684:	bne	217cc <__assert_fail@plt+0xf494>
   21688:	ldrb	r5, [r1, #1]!
   2168c:	cmp	r5, #48	; 0x30
   21690:	beq	21688 <__assert_fail@plt+0xf350>
   21694:	cmp	r5, r3
   21698:	beq	21688 <__assert_fail@plt+0xf350>
   2169c:	sub	r6, r4, #48	; 0x30
   216a0:	mov	ip, #0
   216a4:	b	216ac <__assert_fail@plt+0xf374>
   216a8:	sub	r6, r4, #48	; 0x30
   216ac:	cmp	r6, #10
   216b0:	mov	lr, #0
   216b4:	movwcc	lr, #1
   216b8:	cmp	r6, #9
   216bc:	bhi	2182c <__assert_fail@plt+0xf4f4>
   216c0:	cmp	r5, r4
   216c4:	bne	2182c <__assert_fail@plt+0xf4f4>
   216c8:	ldrb	r4, [r0, #1]!
   216cc:	cmp	r4, r3
   216d0:	beq	216c8 <__assert_fail@plt+0xf390>
   216d4:	ldrb	r5, [r1, #1]!
   216d8:	cmp	r5, r3
   216dc:	beq	216d4 <__assert_fail@plt+0xf39c>
   216e0:	b	216a8 <__assert_fail@plt+0xf370>
   216e4:	cmp	r5, #45	; 0x2d
   216e8:	bne	21734 <__assert_fail@plt+0xf3fc>
   216ec:	ldrb	r6, [r1, #1]!
   216f0:	cmp	r6, #48	; 0x30
   216f4:	beq	216ec <__assert_fail@plt+0xf3b4>
   216f8:	cmp	r6, r3
   216fc:	beq	216ec <__assert_fail@plt+0xf3b4>
   21700:	cmp	r6, r2
   21704:	bne	2171c <__assert_fail@plt+0xf3e4>
   21708:	mov	r7, #1
   2170c:	ldrb	r6, [r1, r7]
   21710:	add	r7, r7, #1
   21714:	cmp	r6, #48	; 0x30
   21718:	beq	2170c <__assert_fail@plt+0xf3d4>
   2171c:	sub	r1, r6, #48	; 0x30
   21720:	mov	ip, #1
   21724:	cmp	r1, #10
   21728:	bcs	217a0 <__assert_fail@plt+0xf468>
   2172c:	b	21af8 <__assert_fail@plt+0xf7c0>
   21730:	ldrb	lr, [r0, #1]!
   21734:	cmp	lr, #48	; 0x30
   21738:	cmpne	lr, r3
   2173c:	beq	21730 <__assert_fail@plt+0xf3f8>
   21740:	b	21748 <__assert_fail@plt+0xf410>
   21744:	ldrb	r5, [r1, #1]!
   21748:	cmp	r5, #48	; 0x30
   2174c:	cmpne	r5, r3
   21750:	beq	21744 <__assert_fail@plt+0xf40c>
   21754:	sub	r6, lr, #48	; 0x30
   21758:	mov	ip, #0
   2175c:	b	21764 <__assert_fail@plt+0xf42c>
   21760:	sub	r6, lr, #48	; 0x30
   21764:	cmp	r6, #10
   21768:	mov	r4, #0
   2176c:	movwcc	r4, #1
   21770:	cmp	r6, #9
   21774:	bhi	218d0 <__assert_fail@plt+0xf598>
   21778:	cmp	lr, r5
   2177c:	bne	218d0 <__assert_fail@plt+0xf598>
   21780:	ldrb	lr, [r0, #1]!
   21784:	cmp	lr, r3
   21788:	beq	21780 <__assert_fail@plt+0xf448>
   2178c:	ldrb	r5, [r1, #1]!
   21790:	cmp	r5, r3
   21794:	beq	2178c <__assert_fail@plt+0xf454>
   21798:	b	21760 <__assert_fail@plt+0xf428>
   2179c:	ldrb	lr, [r0, #1]!
   217a0:	cmp	lr, #48	; 0x30
   217a4:	cmpne	lr, r3
   217a8:	beq	2179c <__assert_fail@plt+0xf464>
   217ac:	cmp	lr, r2
   217b0:	bne	217c4 <__assert_fail@plt+0xf48c>
   217b4:	add	r0, r0, #1
   217b8:	ldrb	lr, [r0], #1
   217bc:	cmp	lr, #48	; 0x30
   217c0:	beq	217b8 <__assert_fail@plt+0xf480>
   217c4:	sub	r0, lr, #48	; 0x30
   217c8:	b	21a98 <__assert_fail@plt+0xf760>
   217cc:	cmp	r4, r2
   217d0:	bne	217e8 <__assert_fail@plt+0xf4b0>
   217d4:	mov	r7, #1
   217d8:	ldrb	r4, [r0, r7]
   217dc:	add	r7, r7, #1
   217e0:	cmp	r4, #48	; 0x30
   217e4:	beq	217d8 <__assert_fail@plt+0xf4a0>
   217e8:	sub	r0, r4, #48	; 0x30
   217ec:	mvn	ip, #0
   217f0:	cmp	r0, #10
   217f4:	bcs	21800 <__assert_fail@plt+0xf4c8>
   217f8:	b	21af8 <__assert_fail@plt+0xf7c0>
   217fc:	ldrb	r5, [r1, #1]!
   21800:	cmp	r5, #48	; 0x30
   21804:	cmpne	r5, r3
   21808:	beq	217fc <__assert_fail@plt+0xf4c4>
   2180c:	cmp	r5, r2
   21810:	bne	21824 <__assert_fail@plt+0xf4ec>
   21814:	add	r0, r1, #1
   21818:	ldrb	r5, [r0], #1
   2181c:	cmp	r5, #48	; 0x30
   21820:	beq	21818 <__assert_fail@plt+0xf4e0>
   21824:	sub	r0, r5, #48	; 0x30
   21828:	b	21a48 <__assert_fail@plt+0xf710>
   2182c:	subs	r7, r4, r2
   21830:	sub	r8, r5, #48	; 0x30
   21834:	movwne	r7, #1
   21838:	cmp	r8, #10
   2183c:	movwcc	ip, #1
   21840:	subs	r6, r5, r2
   21844:	movwne	r6, #1
   21848:	orr	r6, r6, lr
   2184c:	cmp	r6, #1
   21850:	bne	21974 <__assert_fail@plt+0xf63c>
   21854:	orrs	r7, ip, r7
   21858:	beq	21974 <__assert_fail@plt+0xf63c>
   2185c:	sub	r7, r4, #48	; 0x30
   21860:	mov	r2, #0
   21864:	mov	ip, #0
   21868:	cmp	r7, #9
   2186c:	bhi	21890 <__assert_fail@plt+0xf558>
   21870:	mov	ip, #0
   21874:	ldrb	r7, [r0, #1]!
   21878:	cmp	r7, r3
   2187c:	beq	21874 <__assert_fail@plt+0xf53c>
   21880:	sub	r7, r7, #48	; 0x30
   21884:	add	ip, ip, #1
   21888:	cmp	r7, #10
   2188c:	bcc	21874 <__assert_fail@plt+0xf53c>
   21890:	cmp	r8, #9
   21894:	bhi	218b8 <__assert_fail@plt+0xf580>
   21898:	mov	r2, #0
   2189c:	ldrb	r0, [r1, #1]!
   218a0:	cmp	r0, r3
   218a4:	beq	2189c <__assert_fail@plt+0xf564>
   218a8:	sub	r0, r0, #48	; 0x30
   218ac:	add	r2, r2, #1
   218b0:	cmp	r0, #10
   218b4:	bcc	2189c <__assert_fail@plt+0xf564>
   218b8:	cmp	ip, r2
   218bc:	bne	21a54 <__assert_fail@plt+0xf71c>
   218c0:	cmp	ip, #0
   218c4:	subne	ip, r5, r4
   218c8:	mov	r0, ip
   218cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   218d0:	subs	r7, lr, r2
   218d4:	sub	r8, r5, #48	; 0x30
   218d8:	movwne	r7, #1
   218dc:	cmp	r8, #10
   218e0:	movwcc	ip, #1
   218e4:	subs	r6, r5, r2
   218e8:	movwne	r6, #1
   218ec:	orr	r4, r6, r4
   218f0:	cmp	r4, #1
   218f4:	bne	219bc <__assert_fail@plt+0xf684>
   218f8:	orrs	r7, ip, r7
   218fc:	beq	219bc <__assert_fail@plt+0xf684>
   21900:	sub	r7, lr, #48	; 0x30
   21904:	mov	r2, #0
   21908:	mov	ip, #0
   2190c:	cmp	r7, #9
   21910:	bhi	21934 <__assert_fail@plt+0xf5fc>
   21914:	mov	ip, #0
   21918:	ldrb	r4, [r0, #1]!
   2191c:	cmp	r4, r3
   21920:	beq	21918 <__assert_fail@plt+0xf5e0>
   21924:	sub	r4, r4, #48	; 0x30
   21928:	add	ip, ip, #1
   2192c:	cmp	r4, #10
   21930:	bcc	21918 <__assert_fail@plt+0xf5e0>
   21934:	cmp	r8, #9
   21938:	bhi	2195c <__assert_fail@plt+0xf624>
   2193c:	mov	r2, #0
   21940:	ldrb	r0, [r1, #1]!
   21944:	cmp	r0, r3
   21948:	beq	21940 <__assert_fail@plt+0xf608>
   2194c:	sub	r0, r0, #48	; 0x30
   21950:	add	r2, r2, #1
   21954:	cmp	r0, #10
   21958:	bcc	21940 <__assert_fail@plt+0xf608>
   2195c:	cmp	ip, r2
   21960:	bne	21a5c <__assert_fail@plt+0xf724>
   21964:	cmp	ip, #0
   21968:	subne	ip, lr, r5
   2196c:	mov	r0, ip
   21970:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21974:	uxtb	r2, r2
   21978:	cmp	r5, r2
   2197c:	bne	21a04 <__assert_fail@plt+0xf6cc>
   21980:	cmp	r4, r2
   21984:	bne	21a6c <__assert_fail@plt+0xf734>
   21988:	add	r0, r0, #1
   2198c:	add	r1, r1, #1
   21990:	mov	ip, #0
   21994:	ldrb	r7, [r1]
   21998:	ldrb	r3, [r0]
   2199c:	sub	r2, r7, #48	; 0x30
   219a0:	cmp	r7, r3
   219a4:	bne	21aac <__assert_fail@plt+0xf774>
   219a8:	add	r0, r0, #1
   219ac:	add	r1, r1, #1
   219b0:	cmp	r2, #10
   219b4:	bcc	21994 <__assert_fail@plt+0xf65c>
   219b8:	b	21af8 <__assert_fail@plt+0xf7c0>
   219bc:	uxtb	r2, r2
   219c0:	cmp	lr, r2
   219c4:	bne	21a28 <__assert_fail@plt+0xf6f0>
   219c8:	cmp	r5, lr
   219cc:	bne	21a84 <__assert_fail@plt+0xf74c>
   219d0:	add	r1, r1, #1
   219d4:	add	r0, r0, #1
   219d8:	mov	ip, #0
   219dc:	ldrb	r7, [r0]
   219e0:	ldrb	r3, [r1]
   219e4:	sub	r2, r7, #48	; 0x30
   219e8:	cmp	r7, r3
   219ec:	bne	21ad4 <__assert_fail@plt+0xf79c>
   219f0:	add	r1, r1, #1
   219f4:	add	r0, r0, #1
   219f8:	cmp	r2, #10
   219fc:	bcc	219dc <__assert_fail@plt+0xf6a4>
   21a00:	b	21af8 <__assert_fail@plt+0xf7c0>
   21a04:	mov	ip, #0
   21a08:	cmp	r4, r2
   21a0c:	bne	21af8 <__assert_fail@plt+0xf7c0>
   21a10:	add	r0, r0, #1
   21a14:	ldrb	r1, [r0], #1
   21a18:	cmp	r1, #48	; 0x30
   21a1c:	beq	21a14 <__assert_fail@plt+0xf6dc>
   21a20:	sub	r0, r1, #48	; 0x30
   21a24:	b	21a48 <__assert_fail@plt+0xf710>
   21a28:	mov	ip, #0
   21a2c:	cmp	r5, r2
   21a30:	bne	21af8 <__assert_fail@plt+0xf7c0>
   21a34:	add	r1, r1, #1
   21a38:	ldrb	r0, [r1], #1
   21a3c:	cmp	r0, #48	; 0x30
   21a40:	beq	21a38 <__assert_fail@plt+0xf700>
   21a44:	sub	r0, r0, #48	; 0x30
   21a48:	mov	ip, #0
   21a4c:	cmp	r0, #10
   21a50:	b	21a60 <__assert_fail@plt+0xf728>
   21a54:	mvn	ip, #0
   21a58:	b	21aa0 <__assert_fail@plt+0xf768>
   21a5c:	mov	ip, #1
   21a60:	mvncc	ip, #0
   21a64:	mov	r0, ip
   21a68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21a6c:	add	r1, r1, #1
   21a70:	ldrb	r0, [r1], #1
   21a74:	cmp	r0, #48	; 0x30
   21a78:	beq	21a70 <__assert_fail@plt+0xf738>
   21a7c:	sub	r0, r0, #48	; 0x30
   21a80:	b	21a98 <__assert_fail@plt+0xf760>
   21a84:	add	r0, r0, #1
   21a88:	ldrb	r1, [r0], #1
   21a8c:	cmp	r1, #48	; 0x30
   21a90:	beq	21a88 <__assert_fail@plt+0xf750>
   21a94:	sub	r0, r1, #48	; 0x30
   21a98:	mov	ip, #0
   21a9c:	cmp	r0, #10
   21aa0:	movwcc	ip, #1
   21aa4:	mov	r0, ip
   21aa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21aac:	sub	r6, r3, #48	; 0x30
   21ab0:	cmp	r2, #9
   21ab4:	cmpls	r6, #9
   21ab8:	bls	21b00 <__assert_fail@plt+0xf7c8>
   21abc:	cmp	r2, #10
   21ac0:	bcc	21a70 <__assert_fail@plt+0xf738>
   21ac4:	mov	ip, #0
   21ac8:	cmp	r6, #10
   21acc:	bcc	21a14 <__assert_fail@plt+0xf6dc>
   21ad0:	b	21af8 <__assert_fail@plt+0xf7c0>
   21ad4:	sub	r6, r3, #48	; 0x30
   21ad8:	cmp	r2, #9
   21adc:	cmpls	r6, #9
   21ae0:	bls	21b00 <__assert_fail@plt+0xf7c8>
   21ae4:	cmp	r2, #10
   21ae8:	bcc	21a88 <__assert_fail@plt+0xf750>
   21aec:	mov	ip, #0
   21af0:	cmp	r6, #10
   21af4:	bcc	21a38 <__assert_fail@plt+0xf700>
   21af8:	mov	r0, ip
   21afc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21b00:	sub	ip, r7, r3
   21b04:	mov	r0, ip
   21b08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21b0c:	push	{r4, r5, r6, r7, fp, lr}
   21b10:	add	fp, sp, #16
   21b14:	mov	r4, r0
   21b18:	cmp	r0, #2
   21b1c:	movhi	r0, r4
   21b20:	pophi	{r4, r5, r6, r7, fp, pc}
   21b24:	mov	r0, r4
   21b28:	bl	2469c <_obstack_memory_used@@Base+0xb4>
   21b2c:	mov	r5, r0
   21b30:	bl	12164 <__errno_location@plt>
   21b34:	ldr	r7, [r0]
   21b38:	mov	r6, r0
   21b3c:	mov	r0, r4
   21b40:	bl	12320 <close@plt>
   21b44:	mov	r0, r5
   21b48:	str	r7, [r6]
   21b4c:	pop	{r4, r5, r6, r7, fp, pc}
   21b50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21b54:	add	fp, sp, #24
   21b58:	sub	sp, sp, #32
   21b5c:	ldr	r6, [fp, #12]
   21b60:	ldr	r7, [fp, #8]
   21b64:	mov	r4, r2
   21b68:	mov	r8, r0
   21b6c:	cmp	r1, #0
   21b70:	beq	21b98 <__assert_fail@plt+0xf860>
   21b74:	movw	r2, #28374	; 0x6ed6
   21b78:	mov	r5, r1
   21b7c:	str	r3, [sp, #4]
   21b80:	str	r4, [sp]
   21b84:	mov	r0, r8
   21b88:	mov	r1, #1
   21b8c:	movt	r2, #2
   21b90:	mov	r3, r5
   21b94:	b	21bb0 <__assert_fail@plt+0xf878>
   21b98:	movw	r2, #28386	; 0x6ee2
   21b9c:	str	r3, [sp]
   21ba0:	mov	r0, r8
   21ba4:	mov	r1, #1
   21ba8:	mov	r3, r4
   21bac:	movt	r2, #2
   21bb0:	bl	121c4 <__fprintf_chk@plt>
   21bb4:	movw	r1, #28393	; 0x6ee9
   21bb8:	mov	r0, #0
   21bbc:	mov	r2, #5
   21bc0:	movt	r1, #2
   21bc4:	bl	11f54 <dcgettext@plt>
   21bc8:	movw	r2, #29111	; 0x71b7
   21bcc:	mov	r3, r0
   21bd0:	movw	r0, #2022	; 0x7e6
   21bd4:	mov	r1, #1
   21bd8:	str	r0, [sp]
   21bdc:	movt	r2, #2
   21be0:	mov	r0, r8
   21be4:	bl	121c4 <__fprintf_chk@plt>
   21be8:	movw	r4, #19819	; 0x4d6b
   21bec:	mov	r1, r8
   21bf0:	movt	r4, #2
   21bf4:	mov	r0, r4
   21bf8:	bl	11e10 <fputs_unlocked@plt>
   21bfc:	movw	r1, #28397	; 0x6eed
   21c00:	mov	r0, #0
   21c04:	mov	r2, #5
   21c08:	movt	r1, #2
   21c0c:	bl	11f54 <dcgettext@plt>
   21c10:	movw	r3, #28568	; 0x6f98
   21c14:	mov	r2, r0
   21c18:	mov	r0, r8
   21c1c:	mov	r1, #1
   21c20:	movt	r3, #2
   21c24:	bl	121c4 <__fprintf_chk@plt>
   21c28:	mov	r0, r4
   21c2c:	mov	r1, r8
   21c30:	bl	11e10 <fputs_unlocked@plt>
   21c34:	cmp	r6, #9
   21c38:	bhi	21c74 <__assert_fail@plt+0xf93c>
   21c3c:	add	r0, pc, #0
   21c40:	ldr	pc, [r0, r6, lsl #2]
   21c44:	andeq	r1, r2, ip, ror #24
   21c48:	andeq	r1, r2, r0, lsl #25
   21c4c:			; <UNDEFINED> instruction: 0x00021cb0
   21c50:	ldrdeq	r1, [r2], -r8
   21c54:	andeq	r1, r2, r0, lsl #26
   21c58:	andeq	r1, r2, r8, lsr #26
   21c5c:	andeq	r1, r2, r0, asr sp
   21c60:	andeq	r1, r2, r8, lsl #27
   21c64:	andeq	r1, r2, r8, lsr #28
   21c68:	ldrdeq	r1, [r2], -r0
   21c6c:	sub	sp, fp, #24
   21c70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21c74:	movw	r1, #28921	; 0x70f9
   21c78:	movt	r1, #2
   21c7c:	b	21dd8 <__assert_fail@plt+0xfaa0>
   21c80:	movw	r1, #28602	; 0x6fba
   21c84:	mov	r0, #0
   21c88:	mov	r2, #5
   21c8c:	movt	r1, #2
   21c90:	bl	11f54 <dcgettext@plt>
   21c94:	ldr	r3, [r7]
   21c98:	mov	r2, r0
   21c9c:	mov	r0, r8
   21ca0:	mov	r1, #1
   21ca4:	sub	sp, fp, #24
   21ca8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   21cac:	b	121c4 <__fprintf_chk@plt>
   21cb0:	movw	r1, #28618	; 0x6fca
   21cb4:	mov	r0, #0
   21cb8:	mov	r2, #5
   21cbc:	movt	r1, #2
   21cc0:	bl	11f54 <dcgettext@plt>
   21cc4:	mov	r2, r0
   21cc8:	ldr	r3, [r7]
   21ccc:	ldr	r0, [r7, #4]
   21cd0:	str	r0, [sp]
   21cd4:	b	21dc4 <__assert_fail@plt+0xfa8c>
   21cd8:	movw	r1, #28641	; 0x6fe1
   21cdc:	mov	r0, #0
   21ce0:	mov	r2, #5
   21ce4:	movt	r1, #2
   21ce8:	bl	11f54 <dcgettext@plt>
   21cec:	ldr	r3, [r7]
   21cf0:	mov	r2, r0
   21cf4:	ldmib	r7, {r0, r1}
   21cf8:	stm	sp, {r0, r1}
   21cfc:	b	21dc4 <__assert_fail@plt+0xfa8c>
   21d00:	movw	r1, #28669	; 0x6ffd
   21d04:	mov	r0, #0
   21d08:	mov	r2, #5
   21d0c:	movt	r1, #2
   21d10:	bl	11f54 <dcgettext@plt>
   21d14:	ldr	r3, [r7]
   21d18:	mov	r2, r0
   21d1c:	ldmib	r7, {r0, r1, r7}
   21d20:	stm	sp, {r0, r1, r7}
   21d24:	b	21dc4 <__assert_fail@plt+0xfa8c>
   21d28:	movw	r1, #28701	; 0x701d
   21d2c:	mov	r0, #0
   21d30:	mov	r2, #5
   21d34:	movt	r1, #2
   21d38:	bl	11f54 <dcgettext@plt>
   21d3c:	ldr	r3, [r7]
   21d40:	mov	r2, r0
   21d44:	ldmib	r7, {r0, r1, r6, r7}
   21d48:	stm	sp, {r0, r1, r6, r7}
   21d4c:	b	21dc4 <__assert_fail@plt+0xfa8c>
   21d50:	movw	r1, #28737	; 0x7041
   21d54:	mov	r0, #0
   21d58:	mov	r2, #5
   21d5c:	movt	r1, #2
   21d60:	bl	11f54 <dcgettext@plt>
   21d64:	ldr	r3, [r7]
   21d68:	mov	r2, r0
   21d6c:	ldmib	r7, {r0, r1, r6}
   21d70:	ldr	r5, [r7, #16]
   21d74:	ldr	r7, [r7, #20]
   21d78:	stm	sp, {r0, r1, r6}
   21d7c:	str	r5, [sp, #12]
   21d80:	str	r7, [sp, #16]
   21d84:	b	21dc4 <__assert_fail@plt+0xfa8c>
   21d88:	movw	r1, #28777	; 0x7069
   21d8c:	mov	r0, #0
   21d90:	mov	r2, #5
   21d94:	movt	r1, #2
   21d98:	bl	11f54 <dcgettext@plt>
   21d9c:	ldr	r3, [r7]
   21da0:	mov	r2, r0
   21da4:	ldmib	r7, {r0, r1, r6}
   21da8:	ldr	r5, [r7, #16]
   21dac:	ldr	r4, [r7, #20]
   21db0:	ldr	r7, [r7, #24]
   21db4:	stm	sp, {r0, r1, r6}
   21db8:	str	r5, [sp, #12]
   21dbc:	str	r4, [sp, #16]
   21dc0:	str	r7, [sp, #20]
   21dc4:	mov	r0, r8
   21dc8:	mov	r1, #1
   21dcc:	b	21e78 <__assert_fail@plt+0xfb40>
   21dd0:	movw	r1, #28869	; 0x70c5
   21dd4:	movt	r1, #2
   21dd8:	mov	r0, #0
   21ddc:	mov	r2, #5
   21de0:	bl	11f54 <dcgettext@plt>
   21de4:	mov	ip, r0
   21de8:	ldr	r3, [r7]
   21dec:	ldr	r0, [r7, #4]
   21df0:	ldr	r1, [r7, #8]
   21df4:	ldr	r6, [r7, #12]
   21df8:	ldr	r5, [r7, #16]
   21dfc:	ldr	r4, [r7, #20]
   21e00:	ldr	r2, [r7, #24]
   21e04:	ldr	lr, [r7, #28]
   21e08:	ldr	r7, [r7, #32]
   21e0c:	stm	sp, {r0, r1, r6}
   21e10:	str	r5, [sp, #12]
   21e14:	str	r4, [sp, #16]
   21e18:	str	r2, [sp, #20]
   21e1c:	str	lr, [sp, #24]
   21e20:	str	r7, [sp, #28]
   21e24:	b	21e6c <__assert_fail@plt+0xfb34>
   21e28:	movw	r1, #28821	; 0x7095
   21e2c:	mov	r0, #0
   21e30:	mov	r2, #5
   21e34:	movt	r1, #2
   21e38:	bl	11f54 <dcgettext@plt>
   21e3c:	mov	ip, r0
   21e40:	ldr	r3, [r7]
   21e44:	ldmib	r7, {r0, r1, r6}
   21e48:	ldr	r5, [r7, #16]
   21e4c:	ldr	r4, [r7, #20]
   21e50:	ldr	r2, [r7, #24]
   21e54:	ldr	r7, [r7, #28]
   21e58:	stm	sp, {r0, r1, r6}
   21e5c:	str	r5, [sp, #12]
   21e60:	str	r4, [sp, #16]
   21e64:	str	r2, [sp, #20]
   21e68:	str	r7, [sp, #24]
   21e6c:	mov	r0, r8
   21e70:	mov	r1, #1
   21e74:	mov	r2, ip
   21e78:	bl	121c4 <__fprintf_chk@plt>
   21e7c:	sub	sp, fp, #24
   21e80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21e84:	push	{r4, sl, fp, lr}
   21e88:	add	fp, sp, #8
   21e8c:	sub	sp, sp, #8
   21e90:	ldr	ip, [fp, #8]
   21e94:	mov	lr, #0
   21e98:	ldr	r4, [ip, lr, lsl #2]
   21e9c:	add	lr, lr, #1
   21ea0:	cmp	r4, #0
   21ea4:	bne	21e98 <__assert_fail@plt+0xfb60>
   21ea8:	sub	r4, lr, #1
   21eac:	str	ip, [sp]
   21eb0:	str	r4, [sp, #4]
   21eb4:	bl	21b50 <__assert_fail@plt+0xf818>
   21eb8:	sub	sp, fp, #8
   21ebc:	pop	{r4, sl, fp, pc}
   21ec0:	push	{fp, lr}
   21ec4:	mov	fp, sp
   21ec8:	sub	sp, sp, #48	; 0x30
   21ecc:	ldr	ip, [fp, #8]
   21ed0:	ldr	lr, [ip]
   21ed4:	cmp	lr, #0
   21ed8:	str	lr, [sp, #8]
   21edc:	beq	21f78 <__assert_fail@plt+0xfc40>
   21ee0:	ldr	lr, [ip, #4]
   21ee4:	cmp	lr, #0
   21ee8:	str	lr, [sp, #12]
   21eec:	beq	21f80 <__assert_fail@plt+0xfc48>
   21ef0:	ldr	lr, [ip, #8]
   21ef4:	cmp	lr, #0
   21ef8:	str	lr, [sp, #16]
   21efc:	beq	21f88 <__assert_fail@plt+0xfc50>
   21f00:	ldr	lr, [ip, #12]
   21f04:	cmp	lr, #0
   21f08:	str	lr, [sp, #20]
   21f0c:	beq	21f90 <__assert_fail@plt+0xfc58>
   21f10:	ldr	lr, [ip, #16]
   21f14:	cmp	lr, #0
   21f18:	str	lr, [sp, #24]
   21f1c:	beq	21f98 <__assert_fail@plt+0xfc60>
   21f20:	ldr	lr, [ip, #20]
   21f24:	cmp	lr, #0
   21f28:	str	lr, [sp, #28]
   21f2c:	beq	21fa0 <__assert_fail@plt+0xfc68>
   21f30:	ldr	lr, [ip, #24]
   21f34:	cmp	lr, #0
   21f38:	str	lr, [sp, #32]
   21f3c:	beq	21fa8 <__assert_fail@plt+0xfc70>
   21f40:	ldr	lr, [ip, #28]
   21f44:	cmp	lr, #0
   21f48:	str	lr, [sp, #36]	; 0x24
   21f4c:	beq	21fb0 <__assert_fail@plt+0xfc78>
   21f50:	ldr	lr, [ip, #32]
   21f54:	cmp	lr, #0
   21f58:	str	lr, [sp, #40]	; 0x28
   21f5c:	beq	21fb8 <__assert_fail@plt+0xfc80>
   21f60:	ldr	lr, [ip, #36]	; 0x24
   21f64:	mov	ip, #10
   21f68:	cmp	lr, #0
   21f6c:	str	lr, [sp, #44]	; 0x2c
   21f70:	movweq	ip, #9
   21f74:	b	21fbc <__assert_fail@plt+0xfc84>
   21f78:	mov	ip, #0
   21f7c:	b	21fbc <__assert_fail@plt+0xfc84>
   21f80:	mov	ip, #1
   21f84:	b	21fbc <__assert_fail@plt+0xfc84>
   21f88:	mov	ip, #2
   21f8c:	b	21fbc <__assert_fail@plt+0xfc84>
   21f90:	mov	ip, #3
   21f94:	b	21fbc <__assert_fail@plt+0xfc84>
   21f98:	mov	ip, #4
   21f9c:	b	21fbc <__assert_fail@plt+0xfc84>
   21fa0:	mov	ip, #5
   21fa4:	b	21fbc <__assert_fail@plt+0xfc84>
   21fa8:	mov	ip, #6
   21fac:	b	21fbc <__assert_fail@plt+0xfc84>
   21fb0:	mov	ip, #7
   21fb4:	b	21fbc <__assert_fail@plt+0xfc84>
   21fb8:	mov	ip, #8
   21fbc:	add	lr, sp, #8
   21fc0:	str	ip, [sp, #4]
   21fc4:	str	lr, [sp]
   21fc8:	bl	21b50 <__assert_fail@plt+0xf818>
   21fcc:	mov	sp, fp
   21fd0:	pop	{fp, pc}
   21fd4:	push	{fp, lr}
   21fd8:	mov	fp, sp
   21fdc:	sub	sp, sp, #56	; 0x38
   21fe0:	add	ip, fp, #8
   21fe4:	str	ip, [sp, #12]
   21fe8:	ldr	lr, [fp, #8]
   21fec:	cmp	lr, #0
   21ff0:	str	lr, [sp, #16]
   21ff4:	beq	22090 <__assert_fail@plt+0xfd58>
   21ff8:	ldr	lr, [ip, #4]
   21ffc:	cmp	lr, #0
   22000:	str	lr, [sp, #20]
   22004:	beq	22098 <__assert_fail@plt+0xfd60>
   22008:	ldr	lr, [ip, #8]
   2200c:	cmp	lr, #0
   22010:	str	lr, [sp, #24]
   22014:	beq	220a0 <__assert_fail@plt+0xfd68>
   22018:	ldr	lr, [ip, #12]
   2201c:	cmp	lr, #0
   22020:	str	lr, [sp, #28]
   22024:	beq	220a8 <__assert_fail@plt+0xfd70>
   22028:	ldr	lr, [ip, #16]
   2202c:	cmp	lr, #0
   22030:	str	lr, [sp, #32]
   22034:	beq	220b0 <__assert_fail@plt+0xfd78>
   22038:	ldr	lr, [ip, #20]
   2203c:	cmp	lr, #0
   22040:	str	lr, [sp, #36]	; 0x24
   22044:	beq	220b8 <__assert_fail@plt+0xfd80>
   22048:	ldr	lr, [ip, #24]
   2204c:	cmp	lr, #0
   22050:	str	lr, [sp, #40]	; 0x28
   22054:	beq	220c0 <__assert_fail@plt+0xfd88>
   22058:	ldr	lr, [ip, #28]
   2205c:	cmp	lr, #0
   22060:	str	lr, [sp, #44]	; 0x2c
   22064:	beq	220c8 <__assert_fail@plt+0xfd90>
   22068:	ldr	lr, [ip, #32]
   2206c:	cmp	lr, #0
   22070:	str	lr, [sp, #48]	; 0x30
   22074:	beq	220d0 <__assert_fail@plt+0xfd98>
   22078:	ldr	lr, [ip, #36]	; 0x24
   2207c:	mov	ip, #10
   22080:	cmp	lr, #0
   22084:	str	lr, [sp, #52]	; 0x34
   22088:	movweq	ip, #9
   2208c:	b	220d4 <__assert_fail@plt+0xfd9c>
   22090:	mov	ip, #0
   22094:	b	220d4 <__assert_fail@plt+0xfd9c>
   22098:	mov	ip, #1
   2209c:	b	220d4 <__assert_fail@plt+0xfd9c>
   220a0:	mov	ip, #2
   220a4:	b	220d4 <__assert_fail@plt+0xfd9c>
   220a8:	mov	ip, #3
   220ac:	b	220d4 <__assert_fail@plt+0xfd9c>
   220b0:	mov	ip, #4
   220b4:	b	220d4 <__assert_fail@plt+0xfd9c>
   220b8:	mov	ip, #5
   220bc:	b	220d4 <__assert_fail@plt+0xfd9c>
   220c0:	mov	ip, #6
   220c4:	b	220d4 <__assert_fail@plt+0xfd9c>
   220c8:	mov	ip, #7
   220cc:	b	220d4 <__assert_fail@plt+0xfd9c>
   220d0:	mov	ip, #8
   220d4:	add	lr, sp, #16
   220d8:	str	ip, [sp, #4]
   220dc:	str	lr, [sp]
   220e0:	bl	21b50 <__assert_fail@plt+0xf818>
   220e4:	mov	sp, fp
   220e8:	pop	{fp, pc}
   220ec:	push	{fp, lr}
   220f0:	mov	fp, sp
   220f4:	movw	r0, #33492	; 0x82d4
   220f8:	movt	r0, #3
   220fc:	ldr	r1, [r0]
   22100:	movw	r0, #19819	; 0x4d6b
   22104:	movt	r0, #2
   22108:	bl	11e10 <fputs_unlocked@plt>
   2210c:	movw	r1, #28981	; 0x7135
   22110:	mov	r0, #0
   22114:	mov	r2, #5
   22118:	movt	r1, #2
   2211c:	bl	11f54 <dcgettext@plt>
   22120:	movw	r2, #29001	; 0x7149
   22124:	mov	r1, r0
   22128:	mov	r0, #1
   2212c:	movt	r2, #2
   22130:	bl	121a0 <__printf_chk@plt>
   22134:	movw	r1, #29023	; 0x715f
   22138:	mov	r0, #0
   2213c:	mov	r2, #5
   22140:	movt	r1, #2
   22144:	bl	11f54 <dcgettext@plt>
   22148:	movw	r2, #23868	; 0x5d3c
   2214c:	movw	r3, #24553	; 0x5fe9
   22150:	mov	r1, r0
   22154:	mov	r0, #1
   22158:	movt	r2, #2
   2215c:	movt	r3, #2
   22160:	bl	121a0 <__printf_chk@plt>
   22164:	movw	r1, #29043	; 0x7173
   22168:	mov	r0, #0
   2216c:	mov	r2, #5
   22170:	movt	r1, #2
   22174:	bl	11f54 <dcgettext@plt>
   22178:	movw	r2, #29082	; 0x719a
   2217c:	mov	r1, r0
   22180:	mov	r0, #1
   22184:	movt	r2, #2
   22188:	pop	{fp, lr}
   2218c:	b	121a0 <__printf_chk@plt>
   22190:	push	{r4, r5, r6, sl, fp, lr}
   22194:	add	fp, sp, #16
   22198:	mov	r4, r2
   2219c:	mov	r5, r1
   221a0:	mov	r6, r0
   221a4:	bl	24660 <_obstack_memory_used@@Base+0x78>
   221a8:	cmp	r0, #0
   221ac:	popne	{r4, r5, r6, sl, fp, pc}
   221b0:	cmp	r6, #0
   221b4:	beq	221c8 <__assert_fail@plt+0xfe90>
   221b8:	cmp	r5, #0
   221bc:	cmpne	r4, #0
   221c0:	bne	221c8 <__assert_fail@plt+0xfe90>
   221c4:	pop	{r4, r5, r6, sl, fp, pc}
   221c8:	bl	22768 <__assert_fail@plt+0x10430>
   221cc:	push	{r4, r5, r6, sl, fp, lr}
   221d0:	add	fp, sp, #16
   221d4:	mov	r4, r2
   221d8:	mov	r5, r1
   221dc:	mov	r6, r0
   221e0:	bl	24660 <_obstack_memory_used@@Base+0x78>
   221e4:	cmp	r0, #0
   221e8:	popne	{r4, r5, r6, sl, fp, pc}
   221ec:	cmp	r6, #0
   221f0:	beq	22204 <__assert_fail@plt+0xfecc>
   221f4:	cmp	r5, #0
   221f8:	cmpne	r4, #0
   221fc:	bne	22204 <__assert_fail@plt+0xfecc>
   22200:	pop	{r4, r5, r6, sl, fp, pc}
   22204:	bl	22768 <__assert_fail@plt+0x10430>
   22208:	push	{fp, lr}
   2220c:	mov	fp, sp
   22210:	bl	23808 <__assert_fail@plt+0x114d0>
   22214:	cmp	r0, #0
   22218:	popne	{fp, pc}
   2221c:	bl	22768 <__assert_fail@plt+0x10430>
   22220:	push	{fp, lr}
   22224:	mov	fp, sp
   22228:	bl	23808 <__assert_fail@plt+0x114d0>
   2222c:	cmp	r0, #0
   22230:	popne	{fp, pc}
   22234:	bl	22768 <__assert_fail@plt+0x10430>
   22238:	push	{fp, lr}
   2223c:	mov	fp, sp
   22240:	bl	23808 <__assert_fail@plt+0x114d0>
   22244:	cmp	r0, #0
   22248:	popne	{fp, pc}
   2224c:	bl	22768 <__assert_fail@plt+0x10430>
   22250:	push	{r4, r5, fp, lr}
   22254:	add	fp, sp, #8
   22258:	mov	r4, r1
   2225c:	mov	r5, r0
   22260:	bl	23838 <__assert_fail@plt+0x11500>
   22264:	cmp	r0, #0
   22268:	popne	{r4, r5, fp, pc}
   2226c:	cmp	r5, #0
   22270:	beq	22280 <__assert_fail@plt+0xff48>
   22274:	cmp	r4, #0
   22278:	bne	22280 <__assert_fail@plt+0xff48>
   2227c:	pop	{r4, r5, fp, pc}
   22280:	bl	22768 <__assert_fail@plt+0x10430>
   22284:	push	{fp, lr}
   22288:	mov	fp, sp
   2228c:	cmp	r1, #0
   22290:	orreq	r1, r1, #1
   22294:	bl	23838 <__assert_fail@plt+0x11500>
   22298:	cmp	r0, #0
   2229c:	popne	{fp, pc}
   222a0:	bl	22768 <__assert_fail@plt+0x10430>
   222a4:	push	{fp, lr}
   222a8:	mov	fp, sp
   222ac:	clz	r3, r2
   222b0:	lsr	ip, r3, #5
   222b4:	clz	r3, r1
   222b8:	lsr	r3, r3, #5
   222bc:	orrs	r3, r3, ip
   222c0:	movwne	r1, #1
   222c4:	movwne	r2, #1
   222c8:	bl	24660 <_obstack_memory_used@@Base+0x78>
   222cc:	cmp	r0, #0
   222d0:	popne	{fp, pc}
   222d4:	bl	22768 <__assert_fail@plt+0x10430>
   222d8:	push	{fp, lr}
   222dc:	mov	fp, sp
   222e0:	mov	r2, r1
   222e4:	mov	r1, r0
   222e8:	mov	r0, #0
   222ec:	bl	24660 <_obstack_memory_used@@Base+0x78>
   222f0:	cmp	r0, #0
   222f4:	popne	{fp, pc}
   222f8:	bl	22768 <__assert_fail@plt+0x10430>
   222fc:	push	{fp, lr}
   22300:	mov	fp, sp
   22304:	mov	r2, r1
   22308:	mov	r1, r0
   2230c:	clz	r0, r2
   22310:	clz	r3, r1
   22314:	lsr	r0, r0, #5
   22318:	lsr	r3, r3, #5
   2231c:	orrs	r0, r3, r0
   22320:	movwne	r1, #1
   22324:	movwne	r2, #1
   22328:	mov	r0, #0
   2232c:	bl	24660 <_obstack_memory_used@@Base+0x78>
   22330:	cmp	r0, #0
   22334:	popne	{fp, pc}
   22338:	bl	22768 <__assert_fail@plt+0x10430>
   2233c:	push	{r4, r5, r6, sl, fp, lr}
   22340:	add	fp, sp, #16
   22344:	ldr	r5, [r1]
   22348:	mov	r4, r1
   2234c:	mov	r6, r0
   22350:	cmp	r0, #0
   22354:	beq	2236c <__assert_fail@plt+0x10034>
   22358:	mov	r0, #1
   2235c:	add	r0, r0, r5, lsr #1
   22360:	adds	r5, r5, r0
   22364:	bcc	22374 <__assert_fail@plt+0x1003c>
   22368:	b	223b0 <__assert_fail@plt+0x10078>
   2236c:	cmp	r5, #0
   22370:	movweq	r5, #64	; 0x40
   22374:	mov	r0, r6
   22378:	mov	r1, r5
   2237c:	mov	r2, #1
   22380:	bl	24660 <_obstack_memory_used@@Base+0x78>
   22384:	cmp	r5, #0
   22388:	mov	r1, r5
   2238c:	movwne	r1, #1
   22390:	cmp	r0, #0
   22394:	bne	223a8 <__assert_fail@plt+0x10070>
   22398:	clz	r2, r6
   2239c:	lsr	r2, r2, #5
   223a0:	orrs	r1, r2, r1
   223a4:	bne	223b0 <__assert_fail@plt+0x10078>
   223a8:	str	r5, [r4]
   223ac:	pop	{r4, r5, r6, sl, fp, pc}
   223b0:	bl	22768 <__assert_fail@plt+0x10430>
   223b4:	push	{r4, r5, r6, r7, fp, lr}
   223b8:	add	fp, sp, #16
   223bc:	ldr	r5, [r1]
   223c0:	mov	r6, r2
   223c4:	mov	r4, r1
   223c8:	mov	r7, r0
   223cc:	cmp	r0, #0
   223d0:	beq	223e8 <__assert_fail@plt+0x100b0>
   223d4:	mov	r0, #1
   223d8:	add	r0, r0, r5, lsr #1
   223dc:	adds	r5, r5, r0
   223e0:	bcc	22400 <__assert_fail@plt+0x100c8>
   223e4:	b	22434 <__assert_fail@plt+0x100fc>
   223e8:	cmp	r5, #0
   223ec:	bne	22400 <__assert_fail@plt+0x100c8>
   223f0:	mov	r0, #64	; 0x40
   223f4:	cmp	r6, #64	; 0x40
   223f8:	udiv	r5, r0, r6
   223fc:	addhi	r5, r5, #1
   22400:	mov	r0, r7
   22404:	mov	r1, r5
   22408:	mov	r2, r6
   2240c:	bl	24660 <_obstack_memory_used@@Base+0x78>
   22410:	cmp	r0, #0
   22414:	bne	2242c <__assert_fail@plt+0x100f4>
   22418:	cmp	r7, #0
   2241c:	beq	22434 <__assert_fail@plt+0x100fc>
   22420:	cmp	r6, #0
   22424:	cmpne	r5, #0
   22428:	bne	22434 <__assert_fail@plt+0x100fc>
   2242c:	str	r5, [r4]
   22430:	pop	{r4, r5, r6, r7, fp, pc}
   22434:	bl	22768 <__assert_fail@plt+0x10430>
   22438:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2243c:	add	fp, sp, #24
   22440:	mov	r8, r1
   22444:	ldr	r1, [r1]
   22448:	mov	r5, r0
   2244c:	add	r0, r1, r1, asr #1
   22450:	cmp	r0, r1
   22454:	mvnvs	r0, #-2147483648	; 0x80000000
   22458:	cmp	r0, r3
   2245c:	mov	r7, r0
   22460:	movgt	r7, r3
   22464:	cmn	r3, #1
   22468:	movle	r7, r0
   2246c:	ldr	r0, [fp, #8]
   22470:	cmn	r0, #1
   22474:	ble	2249c <__assert_fail@plt+0x10164>
   22478:	cmp	r0, #0
   2247c:	beq	224f0 <__assert_fail@plt+0x101b8>
   22480:	cmn	r7, #1
   22484:	ble	224c4 <__assert_fail@plt+0x1018c>
   22488:	mvn	r4, #-2147483648	; 0x80000000
   2248c:	udiv	r6, r4, r0
   22490:	cmp	r6, r7
   22494:	bge	224f0 <__assert_fail@plt+0x101b8>
   22498:	b	22500 <__assert_fail@plt+0x101c8>
   2249c:	cmn	r7, #1
   224a0:	ble	224e0 <__assert_fail@plt+0x101a8>
   224a4:	cmn	r0, #1
   224a8:	beq	224f0 <__assert_fail@plt+0x101b8>
   224ac:	mov	r6, #-2147483648	; 0x80000000
   224b0:	mvn	r4, #-2147483648	; 0x80000000
   224b4:	sdiv	r6, r6, r0
   224b8:	cmp	r6, r7
   224bc:	bge	224f0 <__assert_fail@plt+0x101b8>
   224c0:	b	22500 <__assert_fail@plt+0x101c8>
   224c4:	beq	224f0 <__assert_fail@plt+0x101b8>
   224c8:	mov	r6, #-2147483648	; 0x80000000
   224cc:	mvn	r4, #-2147483648	; 0x80000000
   224d0:	sdiv	r6, r6, r7
   224d4:	cmp	r6, r0
   224d8:	bge	224f0 <__assert_fail@plt+0x101b8>
   224dc:	b	22500 <__assert_fail@plt+0x101c8>
   224e0:	mvn	r4, #-2147483648	; 0x80000000
   224e4:	sdiv	r6, r4, r0
   224e8:	cmp	r7, r6
   224ec:	blt	22500 <__assert_fail@plt+0x101c8>
   224f0:	mul	r6, r7, r0
   224f4:	mov	r4, #64	; 0x40
   224f8:	cmp	r6, #63	; 0x3f
   224fc:	bgt	22508 <__assert_fail@plt+0x101d0>
   22500:	sdiv	r7, r4, r0
   22504:	mul	r6, r7, r0
   22508:	cmp	r5, #0
   2250c:	moveq	r4, #0
   22510:	streq	r4, [r8]
   22514:	sub	r4, r7, r1
   22518:	cmp	r4, r2
   2251c:	bge	225c8 <__assert_fail@plt+0x10290>
   22520:	add	r7, r1, r2
   22524:	mov	r6, #0
   22528:	mov	r2, #0
   2252c:	cmp	r7, r3
   22530:	movwgt	r6, #1
   22534:	cmn	r3, #1
   22538:	movwgt	r2, #1
   2253c:	cmp	r7, r1
   22540:	bvs	225fc <__assert_fail@plt+0x102c4>
   22544:	ands	r1, r2, r6
   22548:	bne	225fc <__assert_fail@plt+0x102c4>
   2254c:	cmn	r0, #1
   22550:	ble	22578 <__assert_fail@plt+0x10240>
   22554:	cmp	r0, #0
   22558:	beq	225c4 <__assert_fail@plt+0x1028c>
   2255c:	cmn	r7, #1
   22560:	ble	2259c <__assert_fail@plt+0x10264>
   22564:	mvn	r1, #-2147483648	; 0x80000000
   22568:	udiv	r1, r1, r0
   2256c:	cmp	r1, r7
   22570:	bge	225c4 <__assert_fail@plt+0x1028c>
   22574:	b	225fc <__assert_fail@plt+0x102c4>
   22578:	cmn	r7, #1
   2257c:	ble	225b4 <__assert_fail@plt+0x1027c>
   22580:	cmn	r0, #1
   22584:	beq	225c4 <__assert_fail@plt+0x1028c>
   22588:	mov	r1, #-2147483648	; 0x80000000
   2258c:	sdiv	r1, r1, r0
   22590:	cmp	r1, r7
   22594:	bge	225c4 <__assert_fail@plt+0x1028c>
   22598:	b	225fc <__assert_fail@plt+0x102c4>
   2259c:	beq	225c4 <__assert_fail@plt+0x1028c>
   225a0:	mov	r1, #-2147483648	; 0x80000000
   225a4:	sdiv	r1, r1, r7
   225a8:	cmp	r1, r0
   225ac:	bge	225c4 <__assert_fail@plt+0x1028c>
   225b0:	b	225fc <__assert_fail@plt+0x102c4>
   225b4:	mvn	r1, #-2147483648	; 0x80000000
   225b8:	sdiv	r1, r1, r0
   225bc:	cmp	r7, r1
   225c0:	blt	225fc <__assert_fail@plt+0x102c4>
   225c4:	mul	r6, r7, r0
   225c8:	mov	r0, r5
   225cc:	mov	r1, r6
   225d0:	bl	23838 <__assert_fail@plt+0x11500>
   225d4:	cmp	r6, #0
   225d8:	movwne	r6, #1
   225dc:	cmp	r0, #0
   225e0:	bne	225f4 <__assert_fail@plt+0x102bc>
   225e4:	clz	r1, r5
   225e8:	lsr	r1, r1, #5
   225ec:	orrs	r1, r1, r6
   225f0:	bne	225fc <__assert_fail@plt+0x102c4>
   225f4:	str	r7, [r8]
   225f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   225fc:	bl	22768 <__assert_fail@plt+0x10430>
   22600:	push	{fp, lr}
   22604:	mov	fp, sp
   22608:	mov	r1, #1
   2260c:	bl	237b4 <__assert_fail@plt+0x1147c>
   22610:	cmp	r0, #0
   22614:	popne	{fp, pc}
   22618:	bl	22768 <__assert_fail@plt+0x10430>
   2261c:	push	{fp, lr}
   22620:	mov	fp, sp
   22624:	bl	237b4 <__assert_fail@plt+0x1147c>
   22628:	cmp	r0, #0
   2262c:	popne	{fp, pc}
   22630:	bl	22768 <__assert_fail@plt+0x10430>
   22634:	push	{fp, lr}
   22638:	mov	fp, sp
   2263c:	mov	r1, #1
   22640:	bl	237b4 <__assert_fail@plt+0x1147c>
   22644:	cmp	r0, #0
   22648:	popne	{fp, pc}
   2264c:	bl	22768 <__assert_fail@plt+0x10430>
   22650:	push	{fp, lr}
   22654:	mov	fp, sp
   22658:	bl	237b4 <__assert_fail@plt+0x1147c>
   2265c:	cmp	r0, #0
   22660:	popne	{fp, pc}
   22664:	bl	22768 <__assert_fail@plt+0x10430>
   22668:	push	{r4, r5, r6, sl, fp, lr}
   2266c:	add	fp, sp, #16
   22670:	mov	r5, r0
   22674:	mov	r0, r1
   22678:	mov	r4, r1
   2267c:	bl	23808 <__assert_fail@plt+0x114d0>
   22680:	cmp	r0, #0
   22684:	beq	226a0 <__assert_fail@plt+0x10368>
   22688:	mov	r1, r5
   2268c:	mov	r2, r4
   22690:	mov	r6, r0
   22694:	bl	11ec4 <memcpy@plt>
   22698:	mov	r0, r6
   2269c:	pop	{r4, r5, r6, sl, fp, pc}
   226a0:	bl	22768 <__assert_fail@plt+0x10430>
   226a4:	push	{r4, r5, r6, sl, fp, lr}
   226a8:	add	fp, sp, #16
   226ac:	mov	r5, r0
   226b0:	mov	r0, r1
   226b4:	mov	r4, r1
   226b8:	bl	23808 <__assert_fail@plt+0x114d0>
   226bc:	cmp	r0, #0
   226c0:	beq	226dc <__assert_fail@plt+0x103a4>
   226c4:	mov	r1, r5
   226c8:	mov	r2, r4
   226cc:	mov	r6, r0
   226d0:	bl	11ec4 <memcpy@plt>
   226d4:	mov	r0, r6
   226d8:	pop	{r4, r5, r6, sl, fp, pc}
   226dc:	bl	22768 <__assert_fail@plt+0x10430>
   226e0:	push	{r4, r5, r6, sl, fp, lr}
   226e4:	add	fp, sp, #16
   226e8:	mov	r5, r0
   226ec:	add	r0, r1, #1
   226f0:	mov	r4, r1
   226f4:	bl	23808 <__assert_fail@plt+0x114d0>
   226f8:	cmp	r0, #0
   226fc:	beq	22724 <__assert_fail@plt+0x103ec>
   22700:	mov	r6, r0
   22704:	mov	r0, #0
   22708:	mov	r1, r5
   2270c:	mov	r2, r4
   22710:	strb	r0, [r6, r4]
   22714:	mov	r0, r6
   22718:	bl	11ec4 <memcpy@plt>
   2271c:	mov	r0, r6
   22720:	pop	{r4, r5, r6, sl, fp, pc}
   22724:	bl	22768 <__assert_fail@plt+0x10430>
   22728:	push	{r4, r5, r6, sl, fp, lr}
   2272c:	add	fp, sp, #16
   22730:	mov	r4, r0
   22734:	bl	12140 <strlen@plt>
   22738:	add	r5, r0, #1
   2273c:	mov	r0, r5
   22740:	bl	23808 <__assert_fail@plt+0x114d0>
   22744:	cmp	r0, #0
   22748:	beq	22764 <__assert_fail@plt+0x1042c>
   2274c:	mov	r1, r4
   22750:	mov	r2, r5
   22754:	mov	r6, r0
   22758:	bl	11ec4 <memcpy@plt>
   2275c:	mov	r0, r6
   22760:	pop	{r4, r5, r6, sl, fp, pc}
   22764:	bl	22768 <__assert_fail@plt+0x10430>
   22768:	push	{fp, lr}
   2276c:	mov	fp, sp
   22770:	movw	r0, #33384	; 0x8268
   22774:	movw	r1, #29158	; 0x71e6
   22778:	mov	r2, #5
   2277c:	movt	r0, #3
   22780:	movt	r1, #2
   22784:	ldr	r4, [r0]
   22788:	mov	r0, #0
   2278c:	bl	11f54 <dcgettext@plt>
   22790:	movw	r2, #27822	; 0x6cae
   22794:	mov	r3, r0
   22798:	mov	r0, r4
   2279c:	mov	r1, #0
   227a0:	movt	r2, #2
   227a4:	bl	12080 <error@plt>
   227a8:	bl	12314 <abort@plt>
   227ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227b0:	add	fp, sp, #28
   227b4:	sub	sp, sp, #4
   227b8:	mov	r9, r3
   227bc:	mov	r6, r2
   227c0:	mov	r7, r1
   227c4:	mov	r4, r0
   227c8:	bl	24084 <__assert_fail@plt+0x11d4c>
   227cc:	mov	r8, r0
   227d0:	bl	12164 <__errno_location@plt>
   227d4:	ldr	r5, [r0]
   227d8:	cmp	r5, #0
   227dc:	beq	22890 <__assert_fail@plt+0x10558>
   227e0:	movw	r1, #29175	; 0x71f7
   227e4:	mov	r0, #0
   227e8:	mov	r2, #5
   227ec:	movt	r1, #2
   227f0:	bl	11f54 <dcgettext@plt>
   227f4:	mov	r2, r0
   227f8:	mov	r0, #0
   227fc:	mov	r1, r5
   22800:	bl	12080 <error@plt>
   22804:	movw	r1, #29200	; 0x7210
   22808:	mov	r0, #0
   2280c:	mov	r2, #5
   22810:	movt	r1, #2
   22814:	bl	11f54 <dcgettext@plt>
   22818:	mov	r2, r0
   2281c:	mov	r0, #0
   22820:	mov	r1, #0
   22824:	bl	12080 <error@plt>
   22828:	movw	r0, #33384	; 0x8268
   2282c:	movw	r1, #29243	; 0x723b
   22830:	mov	r2, #5
   22834:	movt	r0, #3
   22838:	movt	r1, #2
   2283c:	ldr	sl, [r0]
   22840:	mov	r0, #0
   22844:	bl	11f54 <dcgettext@plt>
   22848:	mov	r5, r0
   2284c:	mov	r0, #0
   22850:	mov	r1, #8
   22854:	mov	r2, r4
   22858:	mov	r3, r7
   2285c:	bl	20360 <__assert_fail@plt+0xe028>
   22860:	mov	r4, r0
   22864:	mov	r0, #1
   22868:	mov	r1, #8
   2286c:	mov	r2, r6
   22870:	mov	r3, r9
   22874:	bl	20360 <__assert_fail@plt+0xe028>
   22878:	str	r0, [sp]
   2287c:	mov	r0, sl
   22880:	mov	r1, #0
   22884:	mov	r2, r5
   22888:	mov	r3, r4
   2288c:	bl	12080 <error@plt>
   22890:	mov	r0, r8
   22894:	sub	sp, fp, #28
   22898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2289c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228a0:	add	fp, sp, #28
   228a4:	sub	sp, sp, #4
   228a8:	mov	r6, r3
   228ac:	mov	r9, r2
   228b0:	mov	r4, r1
   228b4:	mov	r7, r0
   228b8:	bl	241a0 <__assert_fail@plt+0x11e68>
   228bc:	mov	r8, r0
   228c0:	bl	12164 <__errno_location@plt>
   228c4:	ldr	r5, [r0]
   228c8:	cmp	r5, #0
   228cc:	beq	22980 <__assert_fail@plt+0x10648>
   228d0:	movw	r1, #29175	; 0x71f7
   228d4:	mov	r0, #0
   228d8:	mov	r2, #5
   228dc:	movt	r1, #2
   228e0:	bl	11f54 <dcgettext@plt>
   228e4:	mov	r2, r0
   228e8:	mov	r0, #0
   228ec:	mov	r1, r5
   228f0:	bl	12080 <error@plt>
   228f4:	movw	r1, #29200	; 0x7210
   228f8:	mov	r0, #0
   228fc:	mov	r2, #5
   22900:	movt	r1, #2
   22904:	bl	11f54 <dcgettext@plt>
   22908:	mov	r2, r0
   2290c:	mov	r0, #0
   22910:	mov	r1, #0
   22914:	bl	12080 <error@plt>
   22918:	movw	r0, #33384	; 0x8268
   2291c:	movw	r1, #29243	; 0x723b
   22920:	mov	r2, #5
   22924:	movt	r0, #3
   22928:	movt	r1, #2
   2292c:	ldr	sl, [r0]
   22930:	mov	r0, #0
   22934:	bl	11f54 <dcgettext@plt>
   22938:	mov	r5, r0
   2293c:	sub	r3, r4, #1
   22940:	mov	r0, #0
   22944:	mov	r1, #8
   22948:	mov	r2, r7
   2294c:	bl	20360 <__assert_fail@plt+0xe028>
   22950:	mov	r4, r0
   22954:	sub	r3, r6, #1
   22958:	mov	r0, #1
   2295c:	mov	r1, #8
   22960:	mov	r2, r9
   22964:	bl	20360 <__assert_fail@plt+0xe028>
   22968:	str	r0, [sp]
   2296c:	mov	r0, sl
   22970:	mov	r1, #0
   22974:	mov	r2, r5
   22978:	mov	r3, r4
   2297c:	bl	12080 <error@plt>
   22980:	mov	r0, r8
   22984:	sub	sp, fp, #28
   22988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2298c:	andeq	r0, r0, r0
   22990:	push	{r4, r5, r6, sl, fp, lr}
   22994:	add	fp, sp, #16
   22998:	vpush	{d8}
   2299c:	sub	sp, sp, #8
   229a0:	vldr	d16, [pc, #160]	; 22a48 <__assert_fail@plt+0x10710>
   229a4:	vmov.f64	d8, d0
   229a8:	vcmpe.f64	d0, d16
   229ac:	vmrs	APSR_nzcv, fpscr
   229b0:	blt	229c8 <__assert_fail@plt+0x10690>
   229b4:	bl	11e4c <pause@plt>
   229b8:	bl	12164 <__errno_location@plt>
   229bc:	ldr	r0, [r0]
   229c0:	cmp	r0, #4
   229c4:	beq	229b4 <__assert_fail@plt+0x1067c>
   229c8:	mov	r6, sp
   229cc:	vmov.f64	d0, d8
   229d0:	mov	r0, r6
   229d4:	bl	23c38 <__assert_fail@plt+0x11900>
   229d8:	bl	12164 <__errno_location@plt>
   229dc:	mov	r5, #0
   229e0:	mov	r4, r0
   229e4:	mov	r1, r6
   229e8:	str	r5, [r0]
   229ec:	mov	r0, r6
   229f0:	bl	11ea0 <nanosleep@plt>
   229f4:	cmp	r0, #0
   229f8:	beq	22a34 <__assert_fail@plt+0x106fc>
   229fc:	mov	r6, sp
   22a00:	mov	r5, #0
   22a04:	ldr	r0, [r4]
   22a08:	orr	r0, r0, #4
   22a0c:	cmp	r0, #4
   22a10:	bne	22a30 <__assert_fail@plt+0x106f8>
   22a14:	mov	r0, r6
   22a18:	mov	r1, r6
   22a1c:	str	r5, [r4]
   22a20:	bl	11ea0 <nanosleep@plt>
   22a24:	cmp	r0, #0
   22a28:	bne	22a04 <__assert_fail@plt+0x106cc>
   22a2c:	b	22a34 <__assert_fail@plt+0x106fc>
   22a30:	mvn	r5, #0
   22a34:	mov	r0, r5
   22a38:	sub	sp, fp, #24
   22a3c:	vpop	{d8}
   22a40:	pop	{r4, r5, r6, sl, fp, pc}
   22a44:	nop	{0}
   22a48:	andeq	r0, r0, r0
   22a4c:	mvnmi	r0, r0
   22a50:	push	{fp, lr}
   22a54:	mov	fp, sp
   22a58:	sub	sp, sp, #8
   22a5c:	movw	ip, #33384	; 0x8268
   22a60:	movt	ip, #3
   22a64:	ldr	ip, [ip]
   22a68:	str	ip, [sp, #4]
   22a6c:	ldr	ip, [fp, #8]
   22a70:	str	ip, [sp]
   22a74:	bl	22a7c <__assert_fail@plt+0x10744>
   22a78:	bl	12314 <abort@plt>
   22a7c:	push	{r4, r5, r6, r7, fp, lr}
   22a80:	add	fp, sp, #16
   22a84:	sub	sp, sp, #16
   22a88:	sub	r0, r0, #1
   22a8c:	cmp	r0, #4
   22a90:	bcs	22b10 <__assert_fail@plt+0x107d8>
   22a94:	mov	r5, r1
   22a98:	movw	r1, #29376	; 0x72c0
   22a9c:	ldr	r4, [fp, #12]
   22aa0:	ldr	r6, [fp, #8]
   22aa4:	movt	r1, #2
   22aa8:	cmn	r5, #1
   22aac:	ldr	r1, [r1, r0, lsl #2]
   22ab0:	ble	22ac4 <__assert_fail@plt+0x1078c>
   22ab4:	ldr	r7, [r3, r5, lsl #4]
   22ab8:	movw	r5, #29280	; 0x7260
   22abc:	movt	r5, #2
   22ac0:	b	22ae0 <__assert_fail@plt+0x107a8>
   22ac4:	mov	r0, #0
   22ac8:	add	r7, sp, #14
   22acc:	strb	r0, [sp, #15]
   22ad0:	movw	r0, #29280	; 0x7260
   22ad4:	strb	r2, [sp, #14]
   22ad8:	movt	r0, #2
   22adc:	sub	r5, r0, r5
   22ae0:	mov	r0, #0
   22ae4:	mov	r2, #5
   22ae8:	bl	11f54 <dcgettext@plt>
   22aec:	mov	r2, r0
   22af0:	mov	r0, r4
   22af4:	mov	r1, #0
   22af8:	mov	r3, r5
   22afc:	str	r7, [sp]
   22b00:	str	r6, [sp, #4]
   22b04:	bl	12080 <error@plt>
   22b08:	sub	sp, fp, #16
   22b0c:	pop	{r4, r5, r6, r7, fp, pc}
   22b10:	bl	12314 <abort@plt>
   22b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b18:	add	fp, sp, #28
   22b1c:	sub	sp, sp, #44	; 0x2c
   22b20:	cmp	r2, #37	; 0x25
   22b24:	bcs	23794 <__assert_fail@plt+0x1145c>
   22b28:	ldr	sl, [fp, #8]
   22b2c:	mov	r6, r2
   22b30:	mov	r7, r1
   22b34:	mov	r4, r0
   22b38:	str	r3, [sp, #36]	; 0x24
   22b3c:	bl	12164 <__errno_location@plt>
   22b40:	mov	r5, r0
   22b44:	mov	r0, #0
   22b48:	str	r0, [r5]
   22b4c:	bl	1211c <__ctype_b_loc@plt>
   22b50:	ldr	r1, [r0]
   22b54:	mov	r2, r4
   22b58:	ldrb	r0, [r2], #1
   22b5c:	add	r3, r1, r0, lsl #1
   22b60:	ldrb	r3, [r3, #1]
   22b64:	tst	r3, #32
   22b68:	bne	22b58 <__assert_fail@plt+0x10820>
   22b6c:	sub	r9, fp, #32
   22b70:	cmp	r7, #0
   22b74:	mov	r8, #4
   22b78:	movne	r9, r7
   22b7c:	cmp	r0, #45	; 0x2d
   22b80:	beq	23788 <__assert_fail@plt+0x11450>
   22b84:	mov	r0, r4
   22b88:	mov	r1, r9
   22b8c:	mov	r2, r6
   22b90:	mov	r3, #0
   22b94:	bl	11ee8 <__strtoull_internal@plt>
   22b98:	mov	r7, r1
   22b9c:	ldr	r1, [r9]
   22ba0:	cmp	r1, r4
   22ba4:	beq	22bd0 <__assert_fail@plt+0x10898>
   22ba8:	mov	r6, r0
   22bac:	ldr	r0, [r5]
   22bb0:	cmp	r0, #0
   22bb4:	beq	22c0c <__assert_fail@plt+0x108d4>
   22bb8:	cmp	r0, #34	; 0x22
   22bbc:	bne	23788 <__assert_fail@plt+0x11450>
   22bc0:	mov	r8, #1
   22bc4:	cmp	sl, #0
   22bc8:	bne	22c18 <__assert_fail@plt+0x108e0>
   22bcc:	b	23780 <__assert_fail@plt+0x11448>
   22bd0:	cmp	sl, #0
   22bd4:	beq	23788 <__assert_fail@plt+0x11450>
   22bd8:	mov	r5, r1
   22bdc:	ldrb	r1, [r4]
   22be0:	cmp	r1, #0
   22be4:	beq	23788 <__assert_fail@plt+0x11450>
   22be8:	mov	r0, sl
   22bec:	bl	1214c <strchr@plt>
   22bf0:	cmp	r0, #0
   22bf4:	beq	23788 <__assert_fail@plt+0x11450>
   22bf8:	mov	r1, r5
   22bfc:	mov	r8, #0
   22c00:	mov	r6, #1
   22c04:	mov	r7, #0
   22c08:	b	22c18 <__assert_fail@plt+0x108e0>
   22c0c:	mov	r8, r0
   22c10:	cmp	sl, #0
   22c14:	beq	23780 <__assert_fail@plt+0x11448>
   22c18:	ldrb	r4, [r1]
   22c1c:	cmp	r4, #0
   22c20:	beq	23780 <__assert_fail@plt+0x11448>
   22c24:	str	r1, [sp, #32]
   22c28:	mov	r0, sl
   22c2c:	mov	r1, r4
   22c30:	bl	1214c <strchr@plt>
   22c34:	cmp	r0, #0
   22c38:	beq	22f00 <__assert_fail@plt+0x10bc8>
   22c3c:	sub	r0, r4, #69	; 0x45
   22c40:	mov	r1, #1
   22c44:	mov	r3, #0
   22c48:	mov	r5, #1024	; 0x400
   22c4c:	cmp	r0, #47	; 0x2f
   22c50:	str	r1, [sp, #28]
   22c54:	bhi	22d58 <__assert_fail@plt+0x10a20>
   22c58:	add	r1, pc, #0
   22c5c:	ldr	pc, [r1, r0, lsl #2]
   22c60:	andeq	r2, r2, r0, lsr #26
   22c64:	andeq	r2, r2, r8, asr sp
   22c68:	andeq	r2, r2, r0, lsr #26
   22c6c:	andeq	r2, r2, r8, asr sp
   22c70:	andeq	r2, r2, r8, asr sp
   22c74:	andeq	r2, r2, r8, asr sp
   22c78:	andeq	r2, r2, r0, lsr #26
   22c7c:	andeq	r2, r2, r8, asr sp
   22c80:	andeq	r2, r2, r0, lsr #26
   22c84:	andeq	r2, r2, r8, asr sp
   22c88:	andeq	r2, r2, r8, asr sp
   22c8c:	andeq	r2, r2, r0, lsr #26
   22c90:	andeq	r2, r2, r8, asr sp
   22c94:	andeq	r2, r2, r8, asr sp
   22c98:	andeq	r2, r2, r8, asr sp
   22c9c:	andeq	r2, r2, r0, lsr #26
   22ca0:	andeq	r2, r2, r8, asr sp
   22ca4:	andeq	r2, r2, r8, asr sp
   22ca8:	andeq	r2, r2, r8, asr sp
   22cac:	andeq	r2, r2, r8, asr sp
   22cb0:	andeq	r2, r2, r0, lsr #26
   22cb4:	andeq	r2, r2, r0, lsr #26
   22cb8:	andeq	r2, r2, r8, asr sp
   22cbc:	andeq	r2, r2, r8, asr sp
   22cc0:	andeq	r2, r2, r8, asr sp
   22cc4:	andeq	r2, r2, r8, asr sp
   22cc8:	andeq	r2, r2, r8, asr sp
   22ccc:	andeq	r2, r2, r8, asr sp
   22cd0:	andeq	r2, r2, r8, asr sp
   22cd4:	andeq	r2, r2, r8, asr sp
   22cd8:	andeq	r2, r2, r8, asr sp
   22cdc:	andeq	r2, r2, r8, asr sp
   22ce0:	andeq	r2, r2, r8, asr sp
   22ce4:	andeq	r2, r2, r8, asr sp
   22ce8:	andeq	r2, r2, r0, lsr #26
   22cec:	andeq	r2, r2, r8, asr sp
   22cf0:	andeq	r2, r2, r8, asr sp
   22cf4:	andeq	r2, r2, r8, asr sp
   22cf8:	andeq	r2, r2, r0, lsr #26
   22cfc:	andeq	r2, r2, r8, asr sp
   22d00:	andeq	r2, r2, r0, lsr #26
   22d04:	andeq	r2, r2, r8, asr sp
   22d08:	andeq	r2, r2, r8, asr sp
   22d0c:	andeq	r2, r2, r8, asr sp
   22d10:	andeq	r2, r2, r8, asr sp
   22d14:	andeq	r2, r2, r8, asr sp
   22d18:	andeq	r2, r2, r8, asr sp
   22d1c:	andeq	r2, r2, r0, lsr #26
   22d20:	mov	r0, sl
   22d24:	mov	r1, #48	; 0x30
   22d28:	bl	1214c <strchr@plt>
   22d2c:	cmp	r0, #0
   22d30:	beq	22d54 <__assert_fail@plt+0x10a1c>
   22d34:	ldr	r1, [sp, #32]
   22d38:	ldrb	r0, [r1, #1]
   22d3c:	cmp	r0, #66	; 0x42
   22d40:	cmpne	r0, #68	; 0x44
   22d44:	bne	22f0c <__assert_fail@plt+0x10bd4>
   22d48:	mov	r5, #1000	; 0x3e8
   22d4c:	mov	r0, #2
   22d50:	str	r0, [sp, #28]
   22d54:	mov	r3, #0
   22d58:	sub	r0, r4, #66	; 0x42
   22d5c:	cmp	r0, #53	; 0x35
   22d60:	bhi	22f00 <__assert_fail@plt+0x10bc8>
   22d64:	add	r1, pc, #0
   22d68:	ldr	pc, [r1, r0, lsl #2]
   22d6c:	andeq	r3, r2, r8, lsl #5
   22d70:	andeq	r2, r2, r0, lsl #30
   22d74:	andeq	r2, r2, r0, lsl #30
   22d78:			; <UNDEFINED> instruction: 0x000232b0
   22d7c:	andeq	r2, r2, r0, lsl #30
   22d80:	andeq	r2, r2, r4, asr #28
   22d84:	andeq	r2, r2, r0, lsl #30
   22d88:	andeq	r2, r2, r0, lsl #30
   22d8c:	andeq	r2, r2, r0, lsl #30
   22d90:	andeq	r2, r2, r0, lsr pc
   22d94:	andeq	r2, r2, r0, lsl #30
   22d98:	andeq	r2, r2, r8, ror pc
   22d9c:	andeq	r2, r2, r0, lsl #30
   22da0:	andeq	r2, r2, r0, lsl #30
   22da4:	andeq	r3, r2, r8, lsl #8
   22da8:	andeq	r2, r2, r0, lsl #30
   22dac:	andeq	r2, r2, r0, lsl #30
   22db0:	andeq	r2, r2, r0, lsl #30
   22db4:	andeq	r3, r2, r4
   22db8:	andeq	r2, r2, r0, lsl #30
   22dbc:	andeq	r2, r2, r0, lsl #30
   22dc0:	andeq	r2, r2, r0, lsl #30
   22dc4:	andeq	r2, r2, r0, lsl #30
   22dc8:	andeq	r3, r2, r0, lsr r5
   22dcc:	andeq	r3, r2, ip, ror #1
   22dd0:	andeq	r2, r2, r0, lsl #30
   22dd4:	andeq	r2, r2, r0, lsl #30
   22dd8:	andeq	r2, r2, r0, lsl #30
   22ddc:	andeq	r2, r2, r0, lsl #30
   22de0:	andeq	r2, r2, r0, lsl #30
   22de4:	andeq	r2, r2, r0, lsl #30
   22de8:	andeq	r2, r2, r0, lsl #30
   22dec:	andeq	r3, r2, r8, lsl #14
   22df0:	andeq	r3, r2, r0, ror #14
   22df4:	andeq	r2, r2, r0, lsl #30
   22df8:	andeq	r2, r2, r0, lsl #30
   22dfc:	andeq	r2, r2, r0, lsl #30
   22e00:	andeq	r2, r2, r4, asr #28
   22e04:	andeq	r2, r2, r0, lsl #30
   22e08:	andeq	r2, r2, r0, lsl #30
   22e0c:	andeq	r2, r2, r0, lsl #30
   22e10:	andeq	r2, r2, r0, lsr pc
   22e14:	andeq	r2, r2, r0, lsl #30
   22e18:	andeq	r2, r2, r8, ror pc
   22e1c:	andeq	r2, r2, r0, lsl #30
   22e20:	andeq	r2, r2, r0, lsl #30
   22e24:	andeq	r2, r2, r0, lsl #30
   22e28:	andeq	r2, r2, r0, lsl #30
   22e2c:	andeq	r2, r2, r0, lsl #30
   22e30:	andeq	r2, r2, r0, lsl #30
   22e34:	andeq	r3, r2, r4
   22e38:	andeq	r2, r2, r0, lsl #30
   22e3c:	andeq	r2, r2, r0, lsl #30
   22e40:	andeq	r3, r2, ip, lsr r7
   22e44:	mvn	r0, #0
   22e48:	mvn	r1, #0
   22e4c:	mov	r2, r5
   22e50:	mov	sl, r3
   22e54:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   22e58:	subs	r3, r0, r6
   22e5c:	mov	lr, #0
   22e60:	umull	r4, r2, r6, r5
   22e64:	str	r1, [sp, #20]
   22e68:	sbcs	r3, r1, r7
   22e6c:	mla	ip, r6, sl, r2
   22e70:	mov	r2, r1
   22e74:	movwcc	lr, #1
   22e78:	mla	r7, r7, r5, ip
   22e7c:	mov	r2, #0
   22e80:	cmp	lr, #0
   22e84:	mvnne	r4, #0
   22e88:	mvnne	r7, #0
   22e8c:	subs	r6, r0, r4
   22e90:	sbcs	r6, r1, r7
   22e94:	movwcc	r2, #1
   22e98:	umull	r3, r6, r4, r5
   22e9c:	cmp	r2, #0
   22ea0:	str	r6, [sp, #16]
   22ea4:	mvnne	r3, #0
   22ea8:	cmp	r2, #0
   22eac:	umull	r6, ip, r3, r5
   22eb0:	mla	r1, r3, sl, ip
   22eb4:	ldr	ip, [sp, #16]
   22eb8:	str	r1, [sp, #12]
   22ebc:	mla	r4, r4, sl, ip
   22ec0:	mla	r4, r7, r5, r4
   22ec4:	ldr	r7, [sp, #12]
   22ec8:	mvnne	r4, #0
   22ecc:	subs	r0, r0, r3
   22ed0:	ldr	r0, [sp, #20]
   22ed4:	mla	r7, r4, r5, r7
   22ed8:	sbcs	r0, r0, r4
   22edc:	mov	r0, #0
   22ee0:	movwcc	r0, #1
   22ee4:	cmp	r0, #0
   22ee8:	mov	r1, r0
   22eec:	orr	r0, lr, r2
   22ef0:	mvnne	r7, #0
   22ef4:	mvnne	r6, #0
   22ef8:	orr	r3, r0, r1
   22efc:	b	23760 <__assert_fail@plt+0x11428>
   22f00:	ldr	r0, [sp, #36]	; 0x24
   22f04:	orr	r8, r8, #2
   22f08:	b	23784 <__assert_fail@plt+0x1144c>
   22f0c:	cmp	r0, #105	; 0x69
   22f10:	mov	r3, #0
   22f14:	bne	22d58 <__assert_fail@plt+0x10a20>
   22f18:	ldrb	r0, [r1, #2]
   22f1c:	mov	r1, #1
   22f20:	cmp	r0, #66	; 0x42
   22f24:	movweq	r1, #3
   22f28:	str	r1, [sp, #28]
   22f2c:	b	22d58 <__assert_fail@plt+0x10a20>
   22f30:	mvn	r0, #0
   22f34:	mvn	r1, #0
   22f38:	mov	r2, r5
   22f3c:	mov	r4, r3
   22f40:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   22f44:	subs	r0, r0, r6
   22f48:	mov	r2, #0
   22f4c:	sbcs	r0, r1, r7
   22f50:	movwcc	r2, #1
   22f54:	umull	r0, r1, r6, r5
   22f58:	mla	r1, r6, r4, r1
   22f5c:	cmp	r2, #0
   22f60:	mov	r3, r2
   22f64:	mla	r7, r7, r5, r1
   22f68:	mvnne	r0, #0
   22f6c:	mvnne	r7, #0
   22f70:	mov	r6, r0
   22f74:	b	23760 <__assert_fail@plt+0x11428>
   22f78:	mvn	r0, #0
   22f7c:	mvn	r1, #0
   22f80:	mov	r2, r5
   22f84:	str	r3, [sp, #24]
   22f88:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   22f8c:	subs	r3, r0, r6
   22f90:	mov	ip, r0
   22f94:	umull	r4, r0, r6, r5
   22f98:	mov	sl, #0
   22f9c:	sbcs	r3, r1, r7
   22fa0:	str	r0, [sp, #20]
   22fa4:	ldr	r0, [sp, #24]
   22fa8:	mov	r3, #0
   22fac:	movwcc	r3, #1
   22fb0:	cmp	r3, #0
   22fb4:	mvnne	r4, #0
   22fb8:	cmp	r3, #0
   22fbc:	umull	lr, r2, r4, r5
   22fc0:	mla	r2, r4, r0, r2
   22fc4:	str	r2, [sp, #16]
   22fc8:	ldr	r2, [sp, #20]
   22fcc:	mla	r6, r6, r0, r2
   22fd0:	ldr	r0, [sp, #16]
   22fd4:	mla	r6, r7, r5, r6
   22fd8:	mvnne	r6, #0
   22fdc:	mla	r7, r6, r5, r0
   22fe0:	subs	r0, ip, r4
   22fe4:	sbcs	r0, r1, r6
   22fe8:	movwcc	sl, #1
   22fec:	cmp	sl, #0
   22ff0:	orr	r3, r3, sl
   22ff4:	mvnne	lr, #0
   22ff8:	mvnne	r7, #0
   22ffc:	mov	r6, lr
   23000:	b	23760 <__assert_fail@plt+0x11428>
   23004:	mvn	r0, #0
   23008:	mvn	r1, #0
   2300c:	mov	r2, r5
   23010:	mov	sl, r3
   23014:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   23018:	subs	r3, r0, r6
   2301c:	mov	ip, r1
   23020:	umull	r2, lr, r6, r5
   23024:	str	r0, [sp, #20]
   23028:	sbcs	r3, r1, r7
   2302c:	mov	r1, #0
   23030:	mla	r6, r6, sl, lr
   23034:	mov	lr, #0
   23038:	str	ip, [sp, #16]
   2303c:	movwcc	r1, #1
   23040:	mla	r7, r7, r5, r6
   23044:	cmp	r1, #0
   23048:	mvnne	r2, #0
   2304c:	cmp	r1, #0
   23050:	umull	r3, r4, r2, r5
   23054:	mvnne	r7, #0
   23058:	mla	r4, r2, sl, r4
   2305c:	subs	r2, r0, r2
   23060:	sbcs	r2, ip, r7
   23064:	mla	r4, r7, r5, r4
   23068:	movwcc	lr, #1
   2306c:	mov	r2, #0
   23070:	cmp	lr, #0
   23074:	mvnne	r3, #0
   23078:	mvnne	r4, #0
   2307c:	subs	r7, r0, r3
   23080:	mov	r0, r5
   23084:	sbcs	r7, ip, r4
   23088:	movwcc	r2, #1
   2308c:	umull	r5, r7, r3, r5
   23090:	cmp	r2, #0
   23094:	mla	r3, r3, sl, r7
   23098:	mvnne	r5, #0
   2309c:	mla	r3, r4, r0, r3
   230a0:	cmp	r2, #0
   230a4:	umull	r6, ip, r5, r0
   230a8:	mvnne	r3, #0
   230ac:	mla	ip, r5, sl, ip
   230b0:	mla	r7, r3, r0, ip
   230b4:	ldr	r0, [sp, #20]
   230b8:	subs	r0, r0, r5
   230bc:	ldr	r0, [sp, #16]
   230c0:	sbcs	r0, r0, r3
   230c4:	mov	r0, #0
   230c8:	movwcc	r0, #1
   230cc:	cmp	r0, #0
   230d0:	mov	r3, r0
   230d4:	orr	r0, r1, lr
   230d8:	orr	r0, r0, r2
   230dc:	mvnne	r7, #0
   230e0:	mvnne	r6, #0
   230e4:	orr	r3, r0, r3
   230e8:	b	23760 <__assert_fail@plt+0x11428>
   230ec:	mvn	r0, #0
   230f0:	mvn	r1, #0
   230f4:	mov	r2, r5
   230f8:	mov	r4, r3
   230fc:	str	r3, [sp, #24]
   23100:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   23104:	umull	r3, r2, r6, r5
   23108:	mla	r2, r6, r4, r2
   2310c:	subs	r6, r0, r6
   23110:	sbcs	r6, r1, r7
   23114:	mla	ip, r7, r5, r2
   23118:	ldr	r2, [sp, #24]
   2311c:	mov	r6, #0
   23120:	movwcc	r6, #1
   23124:	cmp	r6, #0
   23128:	str	r6, [sp, #20]
   2312c:	mov	r6, #0
   23130:	mvnne	r3, #0
   23134:	mvnne	ip, #0
   23138:	subs	r4, r0, r3
   2313c:	umull	r7, lr, r3, r5
   23140:	sbcs	r4, r1, ip
   23144:	mla	r3, r3, r2, lr
   23148:	movwcc	r6, #1
   2314c:	cmp	r6, #0
   23150:	str	r6, [sp, #16]
   23154:	mvnne	r7, #0
   23158:	cmp	r6, #0
   2315c:	umull	sl, r4, r7, r5
   23160:	mla	r4, r7, r2, r4
   23164:	mla	r2, ip, r5, r3
   23168:	mov	ip, #0
   2316c:	mvnne	r2, #0
   23170:	subs	r3, r0, r7
   23174:	mla	r6, r2, r5, r4
   23178:	mov	r4, r0
   2317c:	sbcs	r2, r1, r2
   23180:	mov	r0, #0
   23184:	movwcc	r0, #1
   23188:	mov	r3, r4
   2318c:	cmp	r0, #0
   23190:	str	r0, [sp, #12]
   23194:	mov	r0, r1
   23198:	str	r3, [sp, #4]
   2319c:	mvnne	sl, #0
   231a0:	mvnne	r6, #0
   231a4:	str	r0, [sp, #8]
   231a8:	subs	r2, r4, sl
   231ac:	ldr	r4, [sp, #24]
   231b0:	sbcs	r2, r1, r6
   231b4:	movwcc	ip, #1
   231b8:	umull	r7, r2, sl, r5
   231bc:	cmp	ip, #0
   231c0:	mla	r2, sl, r4, r2
   231c4:	mvnne	r7, #0
   231c8:	cmp	ip, #0
   231cc:	mov	sl, #0
   231d0:	umull	r1, lr, r7, r5
   231d4:	mla	r2, r6, r5, r2
   231d8:	mvnne	r2, #0
   231dc:	mla	lr, r7, r4, lr
   231e0:	subs	r6, r3, r7
   231e4:	mla	lr, r2, r5, lr
   231e8:	sbcs	r2, r0, r2
   231ec:	movwcc	sl, #1
   231f0:	mov	r2, #0
   231f4:	cmp	sl, #0
   231f8:	mvnne	r1, #0
   231fc:	mvnne	lr, #0
   23200:	subs	r6, r3, r1
   23204:	ldr	r3, [sp, #24]
   23208:	sbcs	r6, r0, lr
   2320c:	umull	r0, r7, r1, r5
   23210:	movwcc	r2, #1
   23214:	cmp	r2, #0
   23218:	mvnne	r0, #0
   2321c:	mla	r1, r1, r3, r7
   23220:	cmp	r2, #0
   23224:	umull	r6, r4, r0, r5
   23228:	mla	r1, lr, r5, r1
   2322c:	mla	r4, r0, r3, r4
   23230:	ldr	r3, [sp, #4]
   23234:	mvnne	r1, #0
   23238:	mla	r7, r1, r5, r4
   2323c:	ldr	r5, [sp, #16]
   23240:	subs	r0, r3, r0
   23244:	ldr	r0, [sp, #8]
   23248:	sbcs	r0, r0, r1
   2324c:	mov	r0, #0
   23250:	movwcc	r0, #1
   23254:	cmp	r0, #0
   23258:	mov	r1, r0
   2325c:	ldr	r0, [sp, #20]
   23260:	mvnne	r7, #0
   23264:	mvnne	r6, #0
   23268:	orr	r0, r0, r5
   2326c:	ldr	r5, [sp, #12]
   23270:	orr	r0, r0, r5
   23274:	orr	r0, r0, ip
   23278:	orr	r0, r0, sl
   2327c:	orr	r0, r0, r2
   23280:	orr	r0, r0, r1
   23284:	b	23700 <__assert_fail@plt+0x113c8>
   23288:	mov	r1, #0
   2328c:	lsl	r2, r7, #10
   23290:	lsl	r0, r6, #10
   23294:	lsr	r3, r7, #22
   23298:	cmp	r1, r7, lsr #22
   2329c:	orr	r2, r2, r6, lsr #22
   232a0:	mvnne	r0, #0
   232a4:	movwne	r3, #1
   232a8:	cmp	r1, r7, lsr #22
   232ac:	b	2372c <__assert_fail@plt+0x113f4>
   232b0:	mvn	r0, #0
   232b4:	mvn	r1, #0
   232b8:	mov	r2, r5
   232bc:	mov	sl, r3
   232c0:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   232c4:	subs	r2, r0, r6
   232c8:	mov	ip, r0
   232cc:	mov	r0, #0
   232d0:	sbcs	r2, r1, r7
   232d4:	movwcc	r0, #1
   232d8:	umull	r4, r2, r6, r5
   232dc:	cmp	r0, #0
   232e0:	mla	r2, r6, sl, r2
   232e4:	str	r0, [sp, #20]
   232e8:	mvnne	r4, #0
   232ec:	cmp	r0, #0
   232f0:	mla	r2, r7, r5, r2
   232f4:	mov	r0, #0
   232f8:	umull	lr, r3, r4, r5
   232fc:	mvnne	r2, #0
   23300:	mla	r3, r4, sl, r3
   23304:	mla	r6, r2, r5, r3
   23308:	subs	r3, ip, r4
   2330c:	sbcs	r2, r1, r2
   23310:	mov	r3, r1
   23314:	movwcc	r0, #1
   23318:	str	r3, [sp, #8]
   2331c:	cmp	r0, #0
   23320:	str	r0, [sp, #16]
   23324:	mov	r0, ip
   23328:	mvnne	lr, #0
   2332c:	mvnne	r6, #0
   23330:	str	r0, [sp, #12]
   23334:	subs	r2, ip, lr
   23338:	umull	r7, r4, lr, r5
   2333c:	sbcs	r2, r1, r6
   23340:	mla	r4, lr, sl, r4
   23344:	mov	r2, #0
   23348:	mla	r6, r6, r5, r4
   2334c:	mov	r4, #0
   23350:	movwcc	r2, #1
   23354:	cmp	r2, #0
   23358:	mvnne	r7, #0
   2335c:	cmp	r2, #0
   23360:	umull	r1, ip, r7, r5
   23364:	mvnne	r6, #0
   23368:	mla	ip, r7, sl, ip
   2336c:	subs	r7, r0, r7
   23370:	mla	lr, r6, r5, ip
   23374:	sbcs	r7, r3, r6
   23378:	mov	ip, #0
   2337c:	movwcc	ip, #1
   23380:	cmp	ip, #0
   23384:	mvnne	r1, #0
   23388:	mvnne	lr, #0
   2338c:	subs	r7, r0, r1
   23390:	sbcs	r7, r3, lr
   23394:	movwcc	r4, #1
   23398:	umull	r0, r7, r1, r5
   2339c:	cmp	r4, #0
   233a0:	mla	r1, r1, sl, r7
   233a4:	mvnne	r0, #0
   233a8:	mla	r1, lr, r5, r1
   233ac:	cmp	r4, #0
   233b0:	umull	r6, r3, r0, r5
   233b4:	mvnne	r1, #0
   233b8:	mla	r3, r0, sl, r3
   233bc:	mla	r7, r1, r5, r3
   233c0:	ldr	r3, [sp, #12]
   233c4:	subs	r0, r3, r0
   233c8:	ldr	r3, [sp, #16]
   233cc:	ldr	r0, [sp, #8]
   233d0:	sbcs	r0, r0, r1
   233d4:	mov	r0, #0
   233d8:	movwcc	r0, #1
   233dc:	cmp	r0, #0
   233e0:	mov	r1, r0
   233e4:	ldr	r0, [sp, #20]
   233e8:	mvnne	r7, #0
   233ec:	mvnne	r6, #0
   233f0:	orr	r0, r0, r3
   233f4:	orr	r0, r0, r2
   233f8:	orr	r0, r0, ip
   233fc:	orr	r0, r0, r4
   23400:	orr	r3, r0, r1
   23404:	b	23760 <__assert_fail@plt+0x11428>
   23408:	mvn	r0, #0
   2340c:	mvn	r1, #0
   23410:	mov	r2, r5
   23414:	mov	sl, r3
   23418:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   2341c:	umull	r3, r2, r6, r5
   23420:	mov	lr, r1
   23424:	mov	r1, r0
   23428:	mla	r2, r6, sl, r2
   2342c:	subs	r6, r0, r6
   23430:	mov	r0, #0
   23434:	sbcs	r6, lr, r7
   23438:	mla	r2, r7, r5, r2
   2343c:	movwcc	r0, #1
   23440:	cmp	r0, #0
   23444:	str	r0, [sp, #20]
   23448:	mov	r0, r1
   2344c:	mvnne	r3, #0
   23450:	mvnne	r2, #0
   23454:	str	r0, [sp, #16]
   23458:	subs	r4, r1, r3
   2345c:	umull	r7, ip, r3, r5
   23460:	sbcs	r4, lr, r2
   23464:	mla	r3, r3, sl, ip
   23468:	mov	ip, #0
   2346c:	mov	r4, #0
   23470:	mla	r2, r2, r5, r3
   23474:	movwcc	r4, #1
   23478:	cmp	r4, #0
   2347c:	mvnne	r7, #0
   23480:	cmp	r4, #0
   23484:	umull	r1, r6, r7, r5
   23488:	mvnne	r2, #0
   2348c:	mla	r6, r7, sl, r6
   23490:	mla	r3, r2, r5, r6
   23494:	subs	r6, r0, r7
   23498:	sbcs	r2, lr, r2
   2349c:	movwcc	ip, #1
   234a0:	mov	r2, #0
   234a4:	cmp	ip, #0
   234a8:	mvnne	r1, #0
   234ac:	mvnne	r3, #0
   234b0:	subs	r6, r0, r1
   234b4:	sbcs	r6, lr, r3
   234b8:	movwcc	r2, #1
   234bc:	umull	r0, r6, r1, r5
   234c0:	cmp	r2, #0
   234c4:	str	r6, [sp, #12]
   234c8:	mvnne	r0, #0
   234cc:	cmp	r2, #0
   234d0:	umull	r6, r7, r0, r5
   234d4:	mla	r7, r0, sl, r7
   234d8:	str	r7, [sp, #8]
   234dc:	ldr	r7, [sp, #12]
   234e0:	mla	r1, r1, sl, r7
   234e4:	mla	r1, r3, r5, r1
   234e8:	ldr	r3, [sp, #8]
   234ec:	mvnne	r1, #0
   234f0:	mla	r7, r1, r5, r3
   234f4:	ldr	r3, [sp, #16]
   234f8:	subs	r0, r3, r0
   234fc:	sbcs	r0, lr, r1
   23500:	mov	r0, #0
   23504:	movwcc	r0, #1
   23508:	cmp	r0, #0
   2350c:	mov	r1, r0
   23510:	ldr	r0, [sp, #20]
   23514:	mvnne	r7, #0
   23518:	mvnne	r6, #0
   2351c:	orr	r0, r0, r4
   23520:	orr	r0, r0, ip
   23524:	orr	r0, r0, r2
   23528:	orr	r3, r0, r1
   2352c:	b	23760 <__assert_fail@plt+0x11428>
   23530:	mvn	r0, #0
   23534:	mvn	r1, #0
   23538:	mov	r2, r5
   2353c:	mov	sl, r3
   23540:	bl	24a68 <_obstack_memory_used@@Base+0x480>
   23544:	mov	lr, r0
   23548:	subs	r0, r0, r6
   2354c:	mov	r2, #0
   23550:	mov	ip, r1
   23554:	str	sl, [sp, #24]
   23558:	sbcs	r0, r1, r7
   2355c:	umull	r3, r1, r6, r5
   23560:	str	lr, [sp, #4]
   23564:	movwcc	r2, #1
   23568:	mla	r6, r6, sl, r1
   2356c:	mov	r1, #0
   23570:	cmp	r2, #0
   23574:	mla	r7, r7, r5, r6
   23578:	str	r2, [sp, #20]
   2357c:	mvnne	r3, #0
   23580:	cmp	r2, #0
   23584:	mov	r2, #0
   23588:	umull	r0, r4, r3, r5
   2358c:	mvnne	r7, #0
   23590:	mla	r4, r3, sl, r4
   23594:	subs	r3, lr, r3
   23598:	sbcs	r3, ip, r7
   2359c:	mla	r4, r7, r5, r4
   235a0:	movwcc	r1, #1
   235a4:	cmp	r1, #0
   235a8:	str	r1, [sp, #16]
   235ac:	mvnne	r0, #0
   235b0:	mvnne	r4, #0
   235b4:	subs	r3, lr, r0
   235b8:	sbcs	r3, ip, r4
   235bc:	movwcc	r2, #1
   235c0:	umull	r6, r3, r0, r5
   235c4:	cmp	r2, #0
   235c8:	mla	r0, r0, sl, r3
   235cc:	str	r2, [sp, #12]
   235d0:	mvnne	r6, #0
   235d4:	mla	r0, r4, r5, r0
   235d8:	cmp	r2, #0
   235dc:	ldr	r4, [sp, #24]
   235e0:	umull	r1, r7, r6, r5
   235e4:	mvnne	r0, #0
   235e8:	subs	r3, lr, r6
   235ec:	mla	r7, r6, sl, r7
   235f0:	mov	r3, ip
   235f4:	mla	r7, r0, r5, r7
   235f8:	sbcs	r0, ip, r0
   235fc:	str	r3, [sp]
   23600:	mov	r0, #0
   23604:	movwcc	r0, #1
   23608:	cmp	r0, #0
   2360c:	str	r0, [sp, #8]
   23610:	mvnne	r1, #0
   23614:	mvnne	r7, #0
   23618:	subs	r0, lr, r1
   2361c:	sbcs	r0, ip, r7
   23620:	mov	ip, #0
   23624:	movwcc	ip, #1
   23628:	umull	r6, r0, r1, r5
   2362c:	cmp	ip, #0
   23630:	mla	r1, r1, r4, r0
   23634:	mov	r0, lr
   23638:	mvnne	r6, #0
   2363c:	mla	r1, r7, r5, r1
   23640:	cmp	ip, #0
   23644:	umull	r2, sl, r6, r5
   23648:	mvnne	r1, #0
   2364c:	mla	sl, r6, r4, sl
   23650:	subs	r6, lr, r6
   23654:	mov	lr, #0
   23658:	mla	r7, r1, r5, sl
   2365c:	sbcs	r1, r3, r1
   23660:	movwcc	lr, #1
   23664:	ldr	r1, [sp, #24]
   23668:	cmp	lr, #0
   2366c:	mvnne	r2, #0
   23670:	mvnne	r7, #0
   23674:	subs	r6, r0, r2
   23678:	umull	r0, sl, r2, r5
   2367c:	sbcs	r6, r3, r7
   23680:	mov	r3, #0
   23684:	mla	r2, r2, r1, sl
   23688:	movwcc	r3, #1
   2368c:	mla	r2, r7, r5, r2
   23690:	cmp	r3, #0
   23694:	mvnne	r0, #0
   23698:	cmp	r3, #0
   2369c:	umull	r6, r4, r0, r5
   236a0:	mvnne	r2, #0
   236a4:	mla	r4, r0, r1, r4
   236a8:	ldr	r1, [sp, #4]
   236ac:	mla	r7, r2, r5, r4
   236b0:	ldr	r5, [sp, #16]
   236b4:	subs	r0, r1, r0
   236b8:	ldr	r0, [sp]
   236bc:	sbcs	r0, r0, r2
   236c0:	mov	r0, #0
   236c4:	movwcc	r0, #1
   236c8:	cmp	r0, #0
   236cc:	mov	r2, r0
   236d0:	ldr	r0, [sp, #20]
   236d4:	mvnne	r7, #0
   236d8:	mvnne	r6, #0
   236dc:	orr	r0, r0, r5
   236e0:	ldr	r5, [sp, #12]
   236e4:	orr	r0, r0, r5
   236e8:	ldr	r5, [sp, #8]
   236ec:	orr	r0, r0, r5
   236f0:	orr	r0, r0, ip
   236f4:	orr	r0, r0, lr
   236f8:	orr	r0, r0, r3
   236fc:	orr	r0, r0, r2
   23700:	and	r3, r0, #1
   23704:	b	23760 <__assert_fail@plt+0x11428>
   23708:	mov	r1, #0
   2370c:	lsl	r2, r7, #9
   23710:	lsl	r0, r6, #9
   23714:	lsr	r3, r7, #23
   23718:	cmp	r1, r7, lsr #23
   2371c:	orr	r2, r2, r6, lsr #23
   23720:	mvnne	r0, #0
   23724:	movwne	r3, #1
   23728:	cmp	r1, r7, lsr #23
   2372c:	mvnne	r2, #0
   23730:	mov	r6, r0
   23734:	mov	r7, r2
   23738:	b	23760 <__assert_fail@plt+0x11428>
   2373c:	lsl	r1, r7, #1
   23740:	lsl	r0, r6, #1
   23744:	cmp	r7, #0
   23748:	lsr	r3, r7, #31
   2374c:	orr	r1, r1, r6, lsr #31
   23750:	mvnlt	r0, #0
   23754:	mvnlt	r1, #0
   23758:	mov	r6, r0
   2375c:	mov	r7, r1
   23760:	ldr	r1, [sp, #32]
   23764:	ldr	r2, [sp, #28]
   23768:	orr	r8, r3, r8
   2376c:	add	r0, r1, r2
   23770:	str	r0, [r9]
   23774:	ldrb	r0, [r1, r2]
   23778:	cmp	r0, #0
   2377c:	orrne	r8, r8, #2
   23780:	ldr	r0, [sp, #36]	; 0x24
   23784:	strd	r6, [r0]
   23788:	mov	r0, r8
   2378c:	sub	sp, fp, #28
   23790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23794:	movw	r0, #29392	; 0x72d0
   23798:	movw	r1, #29430	; 0x72f6
   2379c:	movw	r3, #29446	; 0x7306
   237a0:	mov	r2, #85	; 0x55
   237a4:	movt	r0, #2
   237a8:	movt	r1, #2
   237ac:	movt	r3, #2
   237b0:	bl	12338 <__assert_fail@plt>
   237b4:	clz	r2, r1
   237b8:	clz	r3, r0
   237bc:	lsr	r2, r2, #5
   237c0:	lsr	r3, r3, #5
   237c4:	orrs	r2, r3, r2
   237c8:	movwne	r1, #1
   237cc:	movwne	r0, #1
   237d0:	cmp	r1, #0
   237d4:	beq	23804 <__assert_fail@plt+0x114cc>
   237d8:	mvn	r2, #-2147483648	; 0x80000000
   237dc:	udiv	r2, r2, r1
   237e0:	cmp	r2, r0
   237e4:	bcs	23804 <__assert_fail@plt+0x114cc>
   237e8:	push	{fp, lr}
   237ec:	mov	fp, sp
   237f0:	bl	12164 <__errno_location@plt>
   237f4:	mov	r1, #12
   237f8:	str	r1, [r0]
   237fc:	mov	r0, #0
   23800:	pop	{fp, pc}
   23804:	b	11e04 <calloc@plt>
   23808:	cmp	r0, #0
   2380c:	movweq	r0, #1
   23810:	cmn	r0, #1
   23814:	ble	2381c <__assert_fail@plt+0x114e4>
   23818:	b	120c8 <malloc@plt>
   2381c:	push	{fp, lr}
   23820:	mov	fp, sp
   23824:	bl	12164 <__errno_location@plt>
   23828:	mov	r1, #12
   2382c:	str	r1, [r0]
   23830:	mov	r0, #0
   23834:	pop	{fp, pc}
   23838:	push	{fp, lr}
   2383c:	mov	fp, sp
   23840:	cmp	r0, #0
   23844:	beq	23860 <__assert_fail@plt+0x11528>
   23848:	cmp	r1, #0
   2384c:	beq	2386c <__assert_fail@plt+0x11534>
   23850:	cmn	r1, #1
   23854:	ble	23878 <__assert_fail@plt+0x11540>
   23858:	pop	{fp, lr}
   2385c:	b	11f9c <realloc@plt>
   23860:	mov	r0, r1
   23864:	pop	{fp, lr}
   23868:	b	23808 <__assert_fail@plt+0x114d0>
   2386c:	bl	1cc78 <__assert_fail@plt+0xa940>
   23870:	mov	r0, #0
   23874:	pop	{fp, pc}
   23878:	bl	12164 <__errno_location@plt>
   2387c:	mov	r1, #12
   23880:	str	r1, [r0]
   23884:	mov	r0, #0
   23888:	pop	{fp, pc}
   2388c:	sub	r2, r0, #65	; 0x41
   23890:	mov	r1, r0
   23894:	mov	r0, #1
   23898:	cmp	r2, #26
   2389c:	subcs	r2, r1, #97	; 0x61
   238a0:	cmpcs	r2, #26
   238a4:	bcs	238ac <__assert_fail@plt+0x11574>
   238a8:	bx	lr
   238ac:	sub	r1, r1, #48	; 0x30
   238b0:	cmp	r1, #10
   238b4:	movcs	r0, #0
   238b8:	bx	lr
   238bc:	sub	r2, r0, #65	; 0x41
   238c0:	mov	r1, r0
   238c4:	mov	r0, #1
   238c8:	cmp	r2, #26
   238cc:	subcs	r1, r1, #97	; 0x61
   238d0:	cmpcs	r1, #26
   238d4:	movcs	r0, #0
   238d8:	bx	lr
   238dc:	mov	r1, #0
   238e0:	cmp	r0, #128	; 0x80
   238e4:	movwcc	r1, #1
   238e8:	mov	r0, r1
   238ec:	bx	lr
   238f0:	sub	r1, r0, #9
   238f4:	sub	r0, r0, #32
   238f8:	clz	r1, r1
   238fc:	clz	r0, r0
   23900:	lsr	r1, r1, #5
   23904:	lsr	r0, r0, #5
   23908:	orr	r0, r0, r1
   2390c:	bx	lr
   23910:	mov	r1, r0
   23914:	mov	r0, #1
   23918:	cmp	r1, #32
   2391c:	bxcc	lr
   23920:	cmp	r1, #127	; 0x7f
   23924:	movne	r0, #0
   23928:	bx	lr
   2392c:	sub	r1, r0, #48	; 0x30
   23930:	mov	r0, #0
   23934:	cmp	r1, #10
   23938:	movwcc	r0, #1
   2393c:	bx	lr
   23940:	sub	r1, r0, #33	; 0x21
   23944:	mov	r0, #0
   23948:	cmp	r1, #94	; 0x5e
   2394c:	movwcc	r0, #1
   23950:	bx	lr
   23954:	sub	r1, r0, #97	; 0x61
   23958:	mov	r0, #0
   2395c:	cmp	r1, #26
   23960:	movwcc	r0, #1
   23964:	bx	lr
   23968:	sub	r1, r0, #32
   2396c:	mov	r0, #0
   23970:	cmp	r1, #95	; 0x5f
   23974:	movwcc	r0, #1
   23978:	bx	lr
   2397c:	sub	r1, r0, #33	; 0x21
   23980:	cmp	r1, #93	; 0x5d
   23984:	bhi	23b10 <__assert_fail@plt+0x117d8>
   23988:	add	r2, pc, #4
   2398c:	mov	r0, #1
   23990:	ldr	pc, [r2, r1, lsl #2]
   23994:	andeq	r3, r2, ip, lsl #22
   23998:	andeq	r3, r2, ip, lsl #22
   2399c:	andeq	r3, r2, ip, lsl #22
   239a0:	andeq	r3, r2, ip, lsl #22
   239a4:	andeq	r3, r2, ip, lsl #22
   239a8:	andeq	r3, r2, ip, lsl #22
   239ac:	andeq	r3, r2, ip, lsl #22
   239b0:	andeq	r3, r2, ip, lsl #22
   239b4:	andeq	r3, r2, ip, lsl #22
   239b8:	andeq	r3, r2, ip, lsl #22
   239bc:	andeq	r3, r2, ip, lsl #22
   239c0:	andeq	r3, r2, ip, lsl #22
   239c4:	andeq	r3, r2, ip, lsl #22
   239c8:	andeq	r3, r2, ip, lsl #22
   239cc:	andeq	r3, r2, ip, lsl #22
   239d0:	andeq	r3, r2, r0, lsl fp
   239d4:	andeq	r3, r2, r0, lsl fp
   239d8:	andeq	r3, r2, r0, lsl fp
   239dc:	andeq	r3, r2, r0, lsl fp
   239e0:	andeq	r3, r2, r0, lsl fp
   239e4:	andeq	r3, r2, r0, lsl fp
   239e8:	andeq	r3, r2, r0, lsl fp
   239ec:	andeq	r3, r2, r0, lsl fp
   239f0:	andeq	r3, r2, r0, lsl fp
   239f4:	andeq	r3, r2, r0, lsl fp
   239f8:	andeq	r3, r2, ip, lsl #22
   239fc:	andeq	r3, r2, ip, lsl #22
   23a00:	andeq	r3, r2, ip, lsl #22
   23a04:	andeq	r3, r2, ip, lsl #22
   23a08:	andeq	r3, r2, ip, lsl #22
   23a0c:	andeq	r3, r2, ip, lsl #22
   23a10:	andeq	r3, r2, ip, lsl #22
   23a14:	andeq	r3, r2, r0, lsl fp
   23a18:	andeq	r3, r2, r0, lsl fp
   23a1c:	andeq	r3, r2, r0, lsl fp
   23a20:	andeq	r3, r2, r0, lsl fp
   23a24:	andeq	r3, r2, r0, lsl fp
   23a28:	andeq	r3, r2, r0, lsl fp
   23a2c:	andeq	r3, r2, r0, lsl fp
   23a30:	andeq	r3, r2, r0, lsl fp
   23a34:	andeq	r3, r2, r0, lsl fp
   23a38:	andeq	r3, r2, r0, lsl fp
   23a3c:	andeq	r3, r2, r0, lsl fp
   23a40:	andeq	r3, r2, r0, lsl fp
   23a44:	andeq	r3, r2, r0, lsl fp
   23a48:	andeq	r3, r2, r0, lsl fp
   23a4c:	andeq	r3, r2, r0, lsl fp
   23a50:	andeq	r3, r2, r0, lsl fp
   23a54:	andeq	r3, r2, r0, lsl fp
   23a58:	andeq	r3, r2, r0, lsl fp
   23a5c:	andeq	r3, r2, r0, lsl fp
   23a60:	andeq	r3, r2, r0, lsl fp
   23a64:	andeq	r3, r2, r0, lsl fp
   23a68:	andeq	r3, r2, r0, lsl fp
   23a6c:	andeq	r3, r2, r0, lsl fp
   23a70:	andeq	r3, r2, r0, lsl fp
   23a74:	andeq	r3, r2, r0, lsl fp
   23a78:	andeq	r3, r2, r0, lsl fp
   23a7c:	andeq	r3, r2, ip, lsl #22
   23a80:	andeq	r3, r2, ip, lsl #22
   23a84:	andeq	r3, r2, ip, lsl #22
   23a88:	andeq	r3, r2, ip, lsl #22
   23a8c:	andeq	r3, r2, ip, lsl #22
   23a90:	andeq	r3, r2, ip, lsl #22
   23a94:	andeq	r3, r2, r0, lsl fp
   23a98:	andeq	r3, r2, r0, lsl fp
   23a9c:	andeq	r3, r2, r0, lsl fp
   23aa0:	andeq	r3, r2, r0, lsl fp
   23aa4:	andeq	r3, r2, r0, lsl fp
   23aa8:	andeq	r3, r2, r0, lsl fp
   23aac:	andeq	r3, r2, r0, lsl fp
   23ab0:	andeq	r3, r2, r0, lsl fp
   23ab4:	andeq	r3, r2, r0, lsl fp
   23ab8:	andeq	r3, r2, r0, lsl fp
   23abc:	andeq	r3, r2, r0, lsl fp
   23ac0:	andeq	r3, r2, r0, lsl fp
   23ac4:	andeq	r3, r2, r0, lsl fp
   23ac8:	andeq	r3, r2, r0, lsl fp
   23acc:	andeq	r3, r2, r0, lsl fp
   23ad0:	andeq	r3, r2, r0, lsl fp
   23ad4:	andeq	r3, r2, r0, lsl fp
   23ad8:	andeq	r3, r2, r0, lsl fp
   23adc:	andeq	r3, r2, r0, lsl fp
   23ae0:	andeq	r3, r2, r0, lsl fp
   23ae4:	andeq	r3, r2, r0, lsl fp
   23ae8:	andeq	r3, r2, r0, lsl fp
   23aec:	andeq	r3, r2, r0, lsl fp
   23af0:	andeq	r3, r2, r0, lsl fp
   23af4:	andeq	r3, r2, r0, lsl fp
   23af8:	andeq	r3, r2, r0, lsl fp
   23afc:	andeq	r3, r2, ip, lsl #22
   23b00:	andeq	r3, r2, ip, lsl #22
   23b04:	andeq	r3, r2, ip, lsl #22
   23b08:	andeq	r3, r2, ip, lsl #22
   23b0c:	bx	lr
   23b10:	mov	r0, #0
   23b14:	bx	lr
   23b18:	sub	r0, r0, #9
   23b1c:	cmp	r0, #23
   23b20:	movhi	r0, #0
   23b24:	bxhi	lr
   23b28:	movw	r1, #31
   23b2c:	bic	r0, r0, #-16777216	; 0xff000000
   23b30:	mov	r2, #1
   23b34:	movt	r1, #128	; 0x80
   23b38:	and	r0, r2, r1, lsr r0
   23b3c:	bx	lr
   23b40:	sub	r1, r0, #65	; 0x41
   23b44:	mov	r0, #0
   23b48:	cmp	r1, #26
   23b4c:	movwcc	r0, #1
   23b50:	bx	lr
   23b54:	sub	r2, r0, #48	; 0x30
   23b58:	mov	r1, r0
   23b5c:	mov	r0, #1
   23b60:	cmp	r2, #22
   23b64:	bhi	23b7c <__assert_fail@plt+0x11844>
   23b68:	movw	r3, #1023	; 0x3ff
   23b6c:	mov	ip, #1
   23b70:	movt	r3, #126	; 0x7e
   23b74:	tst	r3, ip, lsl r2
   23b78:	bxne	lr
   23b7c:	sub	r1, r1, #97	; 0x61
   23b80:	cmp	r1, #6
   23b84:	movcs	r0, #0
   23b88:	bxcs	lr
   23b8c:	bx	lr
   23b90:	sub	r1, r0, #65	; 0x41
   23b94:	cmp	r1, #26
   23b98:	addcc	r0, r0, #32
   23b9c:	bx	lr
   23ba0:	sub	r1, r0, #97	; 0x61
   23ba4:	cmp	r1, #26
   23ba8:	subcc	r0, r0, #32
   23bac:	bx	lr
   23bb0:	push	{r4, r5, r6, sl, fp, lr}
   23bb4:	add	fp, sp, #16
   23bb8:	mov	r4, r0
   23bbc:	bl	12068 <__fpending@plt>
   23bc0:	ldr	r6, [r4]
   23bc4:	mov	r5, r0
   23bc8:	mov	r0, r4
   23bcc:	bl	1c6f4 <__assert_fail@plt+0xa3bc>
   23bd0:	tst	r6, #32
   23bd4:	bne	23c0c <__assert_fail@plt+0x118d4>
   23bd8:	cmp	r0, #0
   23bdc:	mov	r4, r0
   23be0:	mvnne	r4, #0
   23be4:	cmp	r5, #0
   23be8:	bne	23c18 <__assert_fail@plt+0x118e0>
   23bec:	cmp	r0, #0
   23bf0:	beq	23c18 <__assert_fail@plt+0x118e0>
   23bf4:	bl	12164 <__errno_location@plt>
   23bf8:	ldr	r0, [r0]
   23bfc:	subs	r4, r0, #9
   23c00:	mvnne	r4, #0
   23c04:	mov	r0, r4
   23c08:	pop	{r4, r5, r6, sl, fp, pc}
   23c0c:	mvn	r4, #0
   23c10:	cmp	r0, #0
   23c14:	beq	23c20 <__assert_fail@plt+0x118e8>
   23c18:	mov	r0, r4
   23c1c:	pop	{r4, r5, r6, sl, fp, pc}
   23c20:	bl	12164 <__errno_location@plt>
   23c24:	mov	r1, #0
   23c28:	str	r1, [r0]
   23c2c:	mov	r0, r4
   23c30:	pop	{r4, r5, r6, sl, fp, pc}
   23c34:	andeq	r0, r0, r0
   23c38:	vldr	d16, [pc, #168]	; 23ce8 <__assert_fail@plt+0x119b0>
   23c3c:	vcmpe.f64	d0, d16
   23c40:	vmrs	APSR_nzcv, fpscr
   23c44:	ble	23cc8 <__assert_fail@plt+0x11990>
   23c48:	vldr	d16, [pc, #160]	; 23cf0 <__assert_fail@plt+0x119b8>
   23c4c:	movw	ip, #51712	; 0xca00
   23c50:	movt	ip, #15258	; 0x3b9a
   23c54:	vcmpe.f64	d0, d16
   23c58:	vmrs	APSR_nzcv, fpscr
   23c5c:	bpl	23cd4 <__assert_fail@plt+0x1199c>
   23c60:	push	{fp, lr}
   23c64:	mov	fp, sp
   23c68:	vldr	d16, [pc, #136]	; 23cf8 <__assert_fail@plt+0x119c0>
   23c6c:	vcvt.s32.f64	s2, d0
   23c70:	movw	r1, #12193	; 0x2fa1
   23c74:	vcvt.f64.s32	d17, s2
   23c78:	movt	r1, #17592	; 0x44b8
   23c7c:	vmov	lr, s2
   23c80:	vsub.f64	d17, d0, d17
   23c84:	vmul.f64	d16, d17, d16
   23c88:	vcvt.s32.f64	s0, d16
   23c8c:	vcvt.f64.s32	d17, s0
   23c90:	vmov	r2, s0
   23c94:	vcmpe.f64	d16, d17
   23c98:	vmrs	APSR_nzcv, fpscr
   23c9c:	addgt	r2, r2, #1
   23ca0:	smmul	r1, r2, r1
   23ca4:	asr	r3, r1, #28
   23ca8:	add	r1, r3, r1, lsr #31
   23cac:	mls	r2, r1, ip, r2
   23cb0:	add	r1, r1, lr
   23cb4:	cmp	r2, #0
   23cb8:	add	r3, r1, r2, asr #31
   23cbc:	addlt	r2, r2, ip
   23cc0:	pop	{fp, lr}
   23cc4:	b	23cdc <__assert_fail@plt+0x119a4>
   23cc8:	mov	r2, #0
   23ccc:	mov	r3, #-2147483648	; 0x80000000
   23cd0:	b	23cdc <__assert_fail@plt+0x119a4>
   23cd4:	sub	r2, ip, #1
   23cd8:	mvn	r3, #-2147483648	; 0x80000000
   23cdc:	str	r3, [r0]
   23ce0:	str	r2, [r0, #4]
   23ce4:	bx	lr
   23ce8:	andeq	r0, r0, r0
   23cec:	mvngt	r0, r0
   23cf0:	andeq	r0, r0, r0
   23cf4:	mvnmi	r0, r0
   23cf8:	andeq	r0, r0, r0
   23cfc:	bicmi	ip, sp, r5, ror #26
   23d00:	sub	sp, sp, #8
   23d04:	push	{r4, r5, r6, r7, fp, lr}
   23d08:	add	fp, sp, #16
   23d0c:	sub	sp, sp, #8
   23d10:	mov	r5, r0
   23d14:	add	r0, fp, #8
   23d18:	cmp	r1, #11
   23d1c:	str	r3, [fp, #12]
   23d20:	str	r2, [fp, #8]
   23d24:	str	r0, [sp, #4]
   23d28:	bhi	23d64 <__assert_fail@plt+0x11a2c>
   23d2c:	mov	r0, #1
   23d30:	movw	r2, #1300	; 0x514
   23d34:	tst	r2, r0, lsl r1
   23d38:	bne	23e24 <__assert_fail@plt+0x11aec>
   23d3c:	movw	r2, #2570	; 0xa0a
   23d40:	tst	r2, r0, lsl r1
   23d44:	bne	23d8c <__assert_fail@plt+0x11a54>
   23d48:	cmp	r1, #0
   23d4c:	bne	23d64 <__assert_fail@plt+0x11a2c>
   23d50:	ldr	r0, [sp, #4]
   23d54:	add	r1, r0, #4
   23d58:	str	r1, [sp, #4]
   23d5c:	mov	r1, #0
   23d60:	b	23e30 <__assert_fail@plt+0x11af8>
   23d64:	sub	r0, r1, #1024	; 0x400
   23d68:	cmp	r0, #10
   23d6c:	bhi	23e24 <__assert_fail@plt+0x11aec>
   23d70:	mov	r2, #1
   23d74:	movw	r3, #645	; 0x285
   23d78:	tst	r3, r2, lsl r0
   23d7c:	bne	23e24 <__assert_fail@plt+0x11aec>
   23d80:	movw	r3, #1282	; 0x502
   23d84:	tst	r3, r2, lsl r0
   23d88:	beq	23d98 <__assert_fail@plt+0x11a60>
   23d8c:	mov	r0, r5
   23d90:	bl	12200 <fcntl64@plt>
   23d94:	b	23e3c <__assert_fail@plt+0x11b04>
   23d98:	cmp	r0, #6
   23d9c:	bne	23e24 <__assert_fail@plt+0x11aec>
   23da0:	ldr	r0, [sp, #4]
   23da4:	movw	r7, #35328	; 0x8a00
   23da8:	movt	r7, #3
   23dac:	add	r1, r0, #4
   23db0:	str	r1, [sp, #4]
   23db4:	ldr	r6, [r0]
   23db8:	ldr	r0, [r7]
   23dbc:	cmp	r0, #0
   23dc0:	blt	23e60 <__assert_fail@plt+0x11b28>
   23dc4:	mov	r0, r5
   23dc8:	movw	r1, #1030	; 0x406
   23dcc:	mov	r2, r6
   23dd0:	bl	12200 <fcntl64@plt>
   23dd4:	mov	r4, r0
   23dd8:	cmn	r0, #1
   23ddc:	bgt	23e54 <__assert_fail@plt+0x11b1c>
   23de0:	bl	12164 <__errno_location@plt>
   23de4:	ldr	r0, [r0]
   23de8:	cmp	r0, #22
   23dec:	bne	23e54 <__assert_fail@plt+0x11b1c>
   23df0:	mov	r0, r5
   23df4:	mov	r1, #0
   23df8:	mov	r2, r6
   23dfc:	bl	12200 <fcntl64@plt>
   23e00:	mov	r4, r0
   23e04:	cmp	r0, #0
   23e08:	blt	23e40 <__assert_fail@plt+0x11b08>
   23e0c:	mvn	r0, #0
   23e10:	str	r0, [r7]
   23e14:	mov	r0, #1
   23e18:	cmp	r0, #0
   23e1c:	bne	23e8c <__assert_fail@plt+0x11b54>
   23e20:	b	23e40 <__assert_fail@plt+0x11b08>
   23e24:	ldr	r0, [sp, #4]
   23e28:	add	r2, r0, #4
   23e2c:	str	r2, [sp, #4]
   23e30:	ldr	r2, [r0]
   23e34:	mov	r0, r5
   23e38:	bl	12200 <fcntl64@plt>
   23e3c:	mov	r4, r0
   23e40:	mov	r0, r4
   23e44:	sub	sp, fp, #16
   23e48:	pop	{r4, r5, r6, r7, fp, lr}
   23e4c:	add	sp, sp, #8
   23e50:	bx	lr
   23e54:	mov	r0, #1
   23e58:	str	r0, [r7]
   23e5c:	b	23e40 <__assert_fail@plt+0x11b08>
   23e60:	mov	r0, r5
   23e64:	mov	r1, #0
   23e68:	mov	r2, r6
   23e6c:	bl	12200 <fcntl64@plt>
   23e70:	mov	r4, r0
   23e74:	ldr	r0, [r7]
   23e78:	add	r0, r0, #1
   23e7c:	clz	r0, r0
   23e80:	lsr	r0, r0, #5
   23e84:	cmp	r0, #0
   23e88:	beq	23e40 <__assert_fail@plt+0x11b08>
   23e8c:	cmp	r4, #0
   23e90:	blt	23e40 <__assert_fail@plt+0x11b08>
   23e94:	mov	r0, r4
   23e98:	mov	r1, #1
   23e9c:	bl	12200 <fcntl64@plt>
   23ea0:	cmp	r0, #0
   23ea4:	blt	23ec0 <__assert_fail@plt+0x11b88>
   23ea8:	orr	r2, r0, #1
   23eac:	mov	r0, r4
   23eb0:	mov	r1, #2
   23eb4:	bl	12200 <fcntl64@plt>
   23eb8:	cmn	r0, #1
   23ebc:	bne	23e40 <__assert_fail@plt+0x11b08>
   23ec0:	bl	12164 <__errno_location@plt>
   23ec4:	ldr	r6, [r0]
   23ec8:	mov	r5, r0
   23ecc:	mov	r0, r4
   23ed0:	bl	12320 <close@plt>
   23ed4:	str	r6, [r5]
   23ed8:	mvn	r4, #0
   23edc:	b	23e40 <__assert_fail@plt+0x11b08>
   23ee0:	push	{r4, r5, r6, r7, fp, lr}
   23ee4:	add	fp, sp, #16
   23ee8:	mov	r4, r0
   23eec:	cmp	r0, #2
   23ef0:	movhi	r0, r4
   23ef4:	pophi	{r4, r5, r6, r7, fp, pc}
   23ef8:	mov	r0, r4
   23efc:	bl	23f24 <__assert_fail@plt+0x11bec>
   23f00:	mov	r5, r0
   23f04:	bl	12164 <__errno_location@plt>
   23f08:	ldr	r7, [r0]
   23f0c:	mov	r6, r0
   23f10:	mov	r0, r4
   23f14:	bl	12320 <close@plt>
   23f18:	mov	r0, r5
   23f1c:	str	r7, [r6]
   23f20:	pop	{r4, r5, r6, r7, fp, pc}
   23f24:	lsl	r1, r1, #12
   23f28:	movw	r2, #1030	; 0x406
   23f2c:	and	r1, r2, r1, asr #31
   23f30:	mov	r2, #3
   23f34:	b	23d00 <__assert_fail@plt+0x119c8>
   23f38:	push	{r4, r5, r6, r7, fp, lr}
   23f3c:	add	fp, sp, #16
   23f40:	mov	r5, r1
   23f44:	bl	12284 <fopen64@plt>
   23f48:	mov	r4, #0
   23f4c:	cmp	r0, #0
   23f50:	beq	23fa0 <__assert_fail@plt+0x11c68>
   23f54:	mov	r6, r0
   23f58:	bl	121b8 <fileno@plt>
   23f5c:	cmp	r0, #2
   23f60:	movhi	r0, r6
   23f64:	pophi	{r4, r5, r6, r7, fp, pc}
   23f68:	bl	2469c <_obstack_memory_used@@Base+0xb4>
   23f6c:	cmn	r0, #1
   23f70:	ble	23fcc <__assert_fail@plt+0x11c94>
   23f74:	mov	r7, r0
   23f78:	mov	r0, r6
   23f7c:	bl	1c6f4 <__assert_fail@plt+0xa3bc>
   23f80:	cmp	r0, #0
   23f84:	bne	23fa8 <__assert_fail@plt+0x11c70>
   23f88:	mov	r0, r7
   23f8c:	mov	r1, r5
   23f90:	bl	11df8 <fdopen@plt>
   23f94:	mov	r4, r0
   23f98:	cmp	r0, #0
   23f9c:	beq	23fa8 <__assert_fail@plt+0x11c70>
   23fa0:	mov	r0, r4
   23fa4:	pop	{r4, r5, r6, r7, fp, pc}
   23fa8:	bl	12164 <__errno_location@plt>
   23fac:	ldr	r5, [r0]
   23fb0:	mov	r4, r0
   23fb4:	mov	r0, r7
   23fb8:	bl	12320 <close@plt>
   23fbc:	str	r5, [r4]
   23fc0:	mov	r4, #0
   23fc4:	mov	r0, r4
   23fc8:	pop	{r4, r5, r6, r7, fp, pc}
   23fcc:	bl	12164 <__errno_location@plt>
   23fd0:	ldr	r7, [r0]
   23fd4:	mov	r5, r0
   23fd8:	mov	r0, r6
   23fdc:	bl	1c6f4 <__assert_fail@plt+0xa3bc>
   23fe0:	mov	r0, r4
   23fe4:	str	r7, [r5]
   23fe8:	pop	{r4, r5, r6, r7, fp, pc}
   23fec:	push	{fp, lr}
   23ff0:	mov	fp, sp
   23ff4:	mov	r0, #14
   23ff8:	bl	12260 <nl_langinfo@plt>
   23ffc:	movw	r1, #19820	; 0x4d6c
   24000:	cmp	r0, #0
   24004:	movt	r1, #2
   24008:	movne	r1, r0
   2400c:	movw	r0, #29525	; 0x7355
   24010:	ldrb	r2, [r1]
   24014:	movt	r0, #2
   24018:	cmp	r2, #0
   2401c:	movne	r0, r1
   24020:	pop	{fp, pc}
   24024:	push	{r4, r5, r6, r7, fp, lr}
   24028:	add	fp, sp, #16
   2402c:	sub	sp, sp, #8
   24030:	add	r5, sp, #4
   24034:	cmp	r0, #0
   24038:	mov	r7, r2
   2403c:	mov	r4, r1
   24040:	movne	r5, r0
   24044:	mov	r0, r5
   24048:	bl	12074 <mbrtowc@plt>
   2404c:	mov	r6, r0
   24050:	cmp	r7, #0
   24054:	beq	24078 <__assert_fail@plt+0x11d40>
   24058:	cmn	r6, #2
   2405c:	bcc	24078 <__assert_fail@plt+0x11d40>
   24060:	mov	r0, #0
   24064:	bl	1cd44 <__assert_fail@plt+0xaa0c>
   24068:	cmp	r0, #0
   2406c:	ldrbeq	r0, [r4]
   24070:	moveq	r6, #1
   24074:	streq	r0, [r5]
   24078:	mov	r0, r6
   2407c:	sub	sp, fp, #16
   24080:	pop	{r4, r5, r6, r7, fp, pc}
   24084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24088:	add	fp, sp, #28
   2408c:	sub	sp, sp, #28
   24090:	mov	r4, r3
   24094:	mov	r6, r2
   24098:	mov	r5, r1
   2409c:	mov	r7, r0
   240a0:	cmp	r1, r3
   240a4:	bne	240c0 <__assert_fail@plt+0x11d88>
   240a8:	mov	r0, r7
   240ac:	mov	r1, r6
   240b0:	mov	r2, r5
   240b4:	bl	11f3c <memcmp@plt>
   240b8:	cmp	r0, #0
   240bc:	beq	24188 <__assert_fail@plt+0x11e50>
   240c0:	ldrb	r0, [r6, r4]
   240c4:	mov	r9, #0
   240c8:	str	r4, [sp, #24]
   240cc:	add	r8, r4, #1
   240d0:	str	r5, [sp, #16]
   240d4:	add	sl, r5, #1
   240d8:	str	r0, [sp, #8]
   240dc:	ldrb	r0, [r7, r5]
   240e0:	strb	r9, [r7, r5]
   240e4:	strb	r9, [r6, r4]
   240e8:	str	r0, [sp, #4]
   240ec:	bl	12164 <__errno_location@plt>
   240f0:	mov	r4, r7
   240f4:	mov	r5, r0
   240f8:	mov	r7, r6
   240fc:	str	r6, [sp, #20]
   24100:	str	r4, [sp, #12]
   24104:	mov	r0, r4
   24108:	mov	r1, r7
   2410c:	str	r9, [r5]
   24110:	bl	12098 <strcoll@plt>
   24114:	cmp	r0, #0
   24118:	bne	24168 <__assert_fail@plt+0x11e30>
   2411c:	mov	r0, r4
   24120:	bl	12140 <strlen@plt>
   24124:	add	r6, r0, #1
   24128:	mov	r0, r7
   2412c:	sub	sl, sl, r6
   24130:	bl	12140 <strlen@plt>
   24134:	add	r0, r0, #1
   24138:	cmp	sl, #0
   2413c:	sub	r8, r8, r0
   24140:	beq	2415c <__assert_fail@plt+0x11e24>
   24144:	add	r4, r4, r6
   24148:	add	r7, r7, r0
   2414c:	cmp	r8, #0
   24150:	bne	24104 <__assert_fail@plt+0x11dcc>
   24154:	mov	r0, #1
   24158:	b	24168 <__assert_fail@plt+0x11e30>
   2415c:	cmp	r8, #0
   24160:	mvnne	r8, #0
   24164:	mov	r0, r8
   24168:	ldr	r1, [sp, #24]
   2416c:	ldr	r2, [sp, #20]
   24170:	ldr	r3, [sp, #16]
   24174:	ldmib	sp, {r5, r6, r7}
   24178:	strb	r5, [r7, r3]
   2417c:	strb	r6, [r2, r1]
   24180:	sub	sp, fp, #28
   24184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24188:	bl	12164 <__errno_location@plt>
   2418c:	mov	r1, r0
   24190:	mov	r0, #0
   24194:	str	r0, [r1]
   24198:	sub	sp, fp, #28
   2419c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   241a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241a4:	add	fp, sp, #28
   241a8:	sub	sp, sp, #4
   241ac:	mov	sl, r3
   241b0:	mov	r5, r2
   241b4:	mov	r6, r1
   241b8:	mov	r7, r0
   241bc:	cmp	r1, r3
   241c0:	bne	241dc <__assert_fail@plt+0x11ea4>
   241c4:	mov	r0, r7
   241c8:	mov	r1, r5
   241cc:	mov	r2, r6
   241d0:	bl	11f3c <memcmp@plt>
   241d4:	cmp	r0, #0
   241d8:	beq	24258 <__assert_fail@plt+0x11f20>
   241dc:	bl	12164 <__errno_location@plt>
   241e0:	mov	r8, r0
   241e4:	mov	r9, #0
   241e8:	mov	r0, r7
   241ec:	mov	r1, r5
   241f0:	str	r9, [r8]
   241f4:	bl	12098 <strcoll@plt>
   241f8:	cmp	r0, #0
   241fc:	bne	2423c <__assert_fail@plt+0x11f04>
   24200:	mov	r0, r7
   24204:	bl	12140 <strlen@plt>
   24208:	add	r4, r0, #1
   2420c:	mov	r0, r5
   24210:	sub	r6, r6, r4
   24214:	bl	12140 <strlen@plt>
   24218:	add	r0, r0, #1
   2421c:	cmp	r6, #0
   24220:	sub	sl, sl, r0
   24224:	beq	24244 <__assert_fail@plt+0x11f0c>
   24228:	add	r7, r7, r4
   2422c:	add	r5, r5, r0
   24230:	cmp	sl, #0
   24234:	bne	241e8 <__assert_fail@plt+0x11eb0>
   24238:	mov	r0, #1
   2423c:	sub	sp, fp, #28
   24240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24244:	cmp	sl, #0
   24248:	mvnne	sl, #0
   2424c:	mov	r0, sl
   24250:	sub	sp, fp, #28
   24254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24258:	bl	12164 <__errno_location@plt>
   2425c:	mov	r1, r0
   24260:	mov	r0, #0
   24264:	str	r0, [r1]
   24268:	sub	sp, fp, #28
   2426c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024270 <_obstack_begin@@Base>:
   24270:	push	{r4, r5, r6, sl, fp, lr}
   24274:	add	fp, sp, #16
   24278:	cmp	r1, #0
   2427c:	mov	r4, r0
   24280:	str	r3, [r0, #28]
   24284:	mov	r5, r2
   24288:	movweq	r1, #4072	; 0xfe8
   2428c:	cmp	r2, #0
   24290:	str	r1, [r0]
   24294:	ldr	r0, [fp, #8]
   24298:	movweq	r5, #8
   2429c:	sub	r6, r5, #1
   242a0:	str	r0, [r4, #32]
   242a4:	str	r6, [r4, #24]
   242a8:	ldrb	r0, [r4, #40]	; 0x28
   242ac:	and	r0, r0, #254	; 0xfe
   242b0:	strb	r0, [r4, #40]	; 0x28
   242b4:	mov	r0, r1
   242b8:	blx	r3
   242bc:	cmp	r0, #0
   242c0:	str	r0, [r4, #4]
   242c4:	addne	r1, r6, r0
   242c8:	rsbne	r2, r5, #0
   242cc:	addne	r1, r1, #8
   242d0:	andne	r1, r1, r2
   242d4:	strne	r1, [r4, #12]
   242d8:	strne	r1, [r4, #8]
   242dc:	ldrne	r1, [r4]
   242e0:	addne	r1, r0, r1
   242e4:	strne	r1, [r0]
   242e8:	strne	r1, [r4, #16]
   242ec:	movne	r1, #0
   242f0:	strne	r1, [r0, #4]
   242f4:	ldrbne	r0, [r4, #40]	; 0x28
   242f8:	andne	r0, r0, #249	; 0xf9
   242fc:	strbne	r0, [r4, #40]	; 0x28
   24300:	movne	r0, #1
   24304:	popne	{r4, r5, r6, sl, fp, pc}
   24308:	movw	r0, #33456	; 0x82b0
   2430c:	movt	r0, #3
   24310:	ldr	r0, [r0]
   24314:	blx	r0

00024318 <_obstack_begin_1@@Base>:
   24318:	push	{r4, r5, r6, sl, fp, lr}
   2431c:	add	fp, sp, #16
   24320:	cmp	r1, #0
   24324:	mov	r4, r0
   24328:	str	r3, [r0, #28]
   2432c:	mov	r5, r2
   24330:	movweq	r1, #4072	; 0xfe8
   24334:	cmp	r2, #0
   24338:	str	r1, [r0]
   2433c:	ldr	r0, [fp, #8]
   24340:	movweq	r5, #8
   24344:	sub	r6, r5, #1
   24348:	str	r0, [r4, #32]
   2434c:	ldr	r0, [fp, #12]
   24350:	str	r0, [r4, #36]	; 0x24
   24354:	str	r6, [r4, #24]
   24358:	ldrb	r2, [r4, #40]	; 0x28
   2435c:	orr	r2, r2, #1
   24360:	strb	r2, [r4, #40]	; 0x28
   24364:	blx	r3
   24368:	cmp	r0, #0
   2436c:	str	r0, [r4, #4]
   24370:	addne	r1, r6, r0
   24374:	rsbne	r2, r5, #0
   24378:	addne	r1, r1, #8
   2437c:	andne	r1, r1, r2
   24380:	strne	r1, [r4, #12]
   24384:	strne	r1, [r4, #8]
   24388:	ldrne	r1, [r4]
   2438c:	addne	r1, r0, r1
   24390:	strne	r1, [r0]
   24394:	strne	r1, [r4, #16]
   24398:	movne	r1, #0
   2439c:	strne	r1, [r0, #4]
   243a0:	ldrbne	r0, [r4, #40]	; 0x28
   243a4:	andne	r0, r0, #249	; 0xf9
   243a8:	strbne	r0, [r4, #40]	; 0x28
   243ac:	movne	r0, #1
   243b0:	popne	{r4, r5, r6, sl, fp, pc}
   243b4:	movw	r0, #33456	; 0x82b0
   243b8:	movt	r0, #3
   243bc:	ldr	r0, [r0]
   243c0:	blx	r0

000243c4 <_obstack_newchunk@@Base>:
   243c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243c8:	add	fp, sp, #28
   243cc:	sub	sp, sp, #4
   243d0:	mov	r4, r0
   243d4:	ldr	r2, [r0]
   243d8:	ldr	r0, [r0, #8]
   243dc:	ldr	r3, [r4, #12]
   243e0:	sub	r9, r3, r0
   243e4:	ldr	r0, [r4, #24]
   243e8:	mov	r3, #0
   243ec:	add	r1, r9, r1
   243f0:	adds	r6, r1, r0
   243f4:	adc	r0, r3, #0
   243f8:	mov	r3, #100	; 0x64
   243fc:	add	r3, r3, r9, lsr #3
   24400:	adds	r7, r3, r6
   24404:	movcs	r7, r6
   24408:	cmp	r7, r2
   2440c:	movcc	r7, r2
   24410:	cmp	r1, r9
   24414:	bcc	2450c <_obstack_newchunk@@Base+0x148>
   24418:	cmp	r0, #0
   2441c:	bne	2450c <_obstack_newchunk@@Base+0x148>
   24420:	ldrb	r0, [r4, #40]	; 0x28
   24424:	ldr	r8, [r4, #4]
   24428:	tst	r0, #1
   2442c:	bne	24440 <_obstack_newchunk@@Base+0x7c>
   24430:	ldr	r1, [r4, #28]
   24434:	mov	r0, r7
   24438:	blx	r1
   2443c:	b	24450 <_obstack_newchunk@@Base+0x8c>
   24440:	ldr	r2, [r4, #28]
   24444:	ldr	r0, [r4, #36]	; 0x24
   24448:	mov	r1, r7
   2444c:	blx	r2
   24450:	mov	r6, r0
   24454:	cmp	r0, #0
   24458:	beq	2450c <_obstack_newchunk@@Base+0x148>
   2445c:	add	r0, r6, r7
   24460:	str	r6, [r4, #4]
   24464:	str	r8, [r6, #4]
   24468:	mov	r2, r9
   2446c:	str	r0, [r4, #16]
   24470:	str	r0, [r6]
   24474:	ldr	r5, [r4, #24]
   24478:	ldr	sl, [r4, #8]
   2447c:	add	r0, r5, r6
   24480:	mov	r1, sl
   24484:	add	r0, r0, #8
   24488:	bic	r7, r0, r5
   2448c:	mov	r0, r7
   24490:	bl	11ec4 <memcpy@plt>
   24494:	ldrb	r0, [r4, #40]	; 0x28
   24498:	tst	r0, #2
   2449c:	bne	244ec <_obstack_newchunk@@Base+0x128>
   244a0:	add	r1, r5, r8
   244a4:	mvn	r0, r5
   244a8:	add	r1, r1, #8
   244ac:	and	r0, r1, r0
   244b0:	cmp	sl, r0
   244b4:	bne	244ec <_obstack_newchunk@@Base+0x128>
   244b8:	ldr	r0, [r8, #4]
   244bc:	str	r0, [r6, #4]
   244c0:	ldrb	r0, [r4, #40]	; 0x28
   244c4:	tst	r0, #1
   244c8:	bne	244dc <_obstack_newchunk@@Base+0x118>
   244cc:	ldr	r1, [r4, #32]
   244d0:	mov	r0, r8
   244d4:	blx	r1
   244d8:	b	244ec <_obstack_newchunk@@Base+0x128>
   244dc:	ldr	r2, [r4, #32]
   244e0:	ldr	r0, [r4, #36]	; 0x24
   244e4:	mov	r1, r8
   244e8:	blx	r2
   244ec:	add	r0, r7, r9
   244f0:	str	r7, [r4, #8]
   244f4:	str	r0, [r4, #12]
   244f8:	ldrb	r0, [r4, #40]	; 0x28
   244fc:	and	r0, r0, #253	; 0xfd
   24500:	strb	r0, [r4, #40]	; 0x28
   24504:	sub	sp, fp, #28
   24508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2450c:	movw	r0, #33456	; 0x82b0
   24510:	movt	r0, #3
   24514:	ldr	r0, [r0]
   24518:	blx	r0

0002451c <_obstack_allocated_p@@Base>:
   2451c:	ldr	r2, [r0, #4]
   24520:	mov	r0, #0
   24524:	b	2452c <_obstack_allocated_p@@Base+0x10>
   24528:	ldr	r2, [r2, #4]
   2452c:	cmp	r2, #0
   24530:	bxeq	lr
   24534:	cmp	r2, r1
   24538:	bcs	24528 <_obstack_allocated_p@@Base+0xc>
   2453c:	ldr	r3, [r2]
   24540:	cmp	r3, r1
   24544:	bcc	24528 <_obstack_allocated_p@@Base+0xc>
   24548:	mov	r0, #1
   2454c:	bx	lr

00024550 <_obstack_free@@Base>:
   24550:	push	{r4, r5, r6, sl, fp, lr}
   24554:	add	fp, sp, #16
   24558:	mov	r5, r1
   2455c:	ldr	r1, [r0, #4]
   24560:	cmp	r1, #0
   24564:	beq	245c4 <_obstack_free@@Base+0x74>
   24568:	mov	r4, r0
   2456c:	cmp	r1, r5
   24570:	bcs	24580 <_obstack_free@@Base+0x30>
   24574:	ldr	r0, [r1]
   24578:	cmp	r0, r5
   2457c:	bcs	245d0 <_obstack_free@@Base+0x80>
   24580:	ldrb	r0, [r4, #40]	; 0x28
   24584:	ldr	r6, [r1, #4]
   24588:	tst	r0, #1
   2458c:	bne	245a0 <_obstack_free@@Base+0x50>
   24590:	ldr	r2, [r4, #32]
   24594:	mov	r0, r1
   24598:	blx	r2
   2459c:	b	245ac <_obstack_free@@Base+0x5c>
   245a0:	ldr	r2, [r4, #32]
   245a4:	ldr	r0, [r4, #36]	; 0x24
   245a8:	blx	r2
   245ac:	ldrb	r0, [r4, #40]	; 0x28
   245b0:	cmp	r6, #0
   245b4:	mov	r1, r6
   245b8:	orr	r0, r0, #2
   245bc:	strb	r0, [r4, #40]	; 0x28
   245c0:	bne	2456c <_obstack_free@@Base+0x1c>
   245c4:	cmp	r5, #0
   245c8:	popeq	{r4, r5, r6, sl, fp, pc}
   245cc:	bl	12314 <abort@plt>
   245d0:	str	r5, [r4, #8]
   245d4:	str	r5, [r4, #12]
   245d8:	ldr	r0, [r1]
   245dc:	str	r1, [r4, #4]
   245e0:	str	r0, [r4, #16]
   245e4:	pop	{r4, r5, r6, sl, fp, pc}

000245e8 <_obstack_memory_used@@Base>:
   245e8:	ldr	r1, [r0, #4]
   245ec:	mov	r0, #0
   245f0:	b	24604 <_obstack_memory_used@@Base+0x1c>
   245f4:	ldr	r2, [r1]
   245f8:	sub	r0, r0, r1
   245fc:	ldr	r1, [r1, #4]
   24600:	add	r0, r0, r2
   24604:	cmp	r1, #0
   24608:	bxeq	lr
   2460c:	b	245f4 <_obstack_memory_used@@Base+0xc>
   24610:	push	{fp, lr}
   24614:	mov	fp, sp
   24618:	movw	r0, #33480	; 0x82c8
   2461c:	movw	r1, #29158	; 0x71e6
   24620:	mov	r2, #5
   24624:	movt	r0, #3
   24628:	movt	r1, #2
   2462c:	ldr	r4, [r0]
   24630:	mov	r0, #0
   24634:	bl	11f54 <dcgettext@plt>
   24638:	movw	r2, #28382	; 0x6ede
   2463c:	mov	r3, r0
   24640:	mov	r0, r4
   24644:	mov	r1, #1
   24648:	movt	r2, #2
   2464c:	bl	121c4 <__fprintf_chk@plt>
   24650:	movw	r0, #33384	; 0x8268
   24654:	movt	r0, #3
   24658:	ldr	r0, [r0]
   2465c:	bl	12128 <exit@plt>
   24660:	cmp	r2, #0
   24664:	beq	24694 <_obstack_memory_used@@Base+0xac>
   24668:	mvn	r3, #0
   2466c:	udiv	r3, r3, r2
   24670:	cmp	r3, r1
   24674:	bcs	24694 <_obstack_memory_used@@Base+0xac>
   24678:	push	{fp, lr}
   2467c:	mov	fp, sp
   24680:	bl	12164 <__errno_location@plt>
   24684:	mov	r1, #12
   24688:	str	r1, [r0]
   2468c:	mov	r0, #0
   24690:	pop	{fp, pc}
   24694:	mul	r1, r2, r1
   24698:	b	23838 <__assert_fail@plt+0x11500>
   2469c:	mov	r1, #0
   246a0:	mov	r2, #3
   246a4:	b	23d00 <__assert_fail@plt+0x119c8>
   246a8:	eor	r1, r1, #-2147483648	; 0x80000000
   246ac:	b	246b4 <_obstack_memory_used@@Base+0xcc>
   246b0:	eor	r3, r3, #-2147483648	; 0x80000000
   246b4:	push	{r4, r5, lr}
   246b8:	lsl	r4, r1, #1
   246bc:	lsl	r5, r3, #1
   246c0:	teq	r4, r5
   246c4:	teqeq	r0, r2
   246c8:	orrsne	ip, r4, r0
   246cc:	orrsne	ip, r5, r2
   246d0:	mvnsne	ip, r4, asr #21
   246d4:	mvnsne	ip, r5, asr #21
   246d8:	beq	248c4 <_obstack_memory_used@@Base+0x2dc>
   246dc:	lsr	r4, r4, #21
   246e0:	rsbs	r5, r4, r5, lsr #21
   246e4:	rsblt	r5, r5, #0
   246e8:	ble	24708 <_obstack_memory_used@@Base+0x120>
   246ec:	add	r4, r4, r5
   246f0:	eor	r2, r0, r2
   246f4:	eor	r3, r1, r3
   246f8:	eor	r0, r2, r0
   246fc:	eor	r1, r3, r1
   24700:	eor	r2, r0, r2
   24704:	eor	r3, r1, r3
   24708:	cmp	r5, #54	; 0x36
   2470c:	pophi	{r4, r5, pc}
   24710:	tst	r1, #-2147483648	; 0x80000000
   24714:	lsl	r1, r1, #12
   24718:	mov	ip, #1048576	; 0x100000
   2471c:	orr	r1, ip, r1, lsr #12
   24720:	beq	2472c <_obstack_memory_used@@Base+0x144>
   24724:	rsbs	r0, r0, #0
   24728:	rsc	r1, r1, #0
   2472c:	tst	r3, #-2147483648	; 0x80000000
   24730:	lsl	r3, r3, #12
   24734:	orr	r3, ip, r3, lsr #12
   24738:	beq	24744 <_obstack_memory_used@@Base+0x15c>
   2473c:	rsbs	r2, r2, #0
   24740:	rsc	r3, r3, #0
   24744:	teq	r4, r5
   24748:	beq	248ac <_obstack_memory_used@@Base+0x2c4>
   2474c:	sub	r4, r4, #1
   24750:	rsbs	lr, r5, #32
   24754:	blt	24770 <_obstack_memory_used@@Base+0x188>
   24758:	lsl	ip, r2, lr
   2475c:	adds	r0, r0, r2, lsr r5
   24760:	adc	r1, r1, #0
   24764:	adds	r0, r0, r3, lsl lr
   24768:	adcs	r1, r1, r3, asr r5
   2476c:	b	2478c <_obstack_memory_used@@Base+0x1a4>
   24770:	sub	r5, r5, #32
   24774:	add	lr, lr, #32
   24778:	cmp	r2, #1
   2477c:	lsl	ip, r3, lr
   24780:	orrcs	ip, ip, #2
   24784:	adds	r0, r0, r3, asr r5
   24788:	adcs	r1, r1, r3, asr #31
   2478c:	and	r5, r1, #-2147483648	; 0x80000000
   24790:	bpl	247a0 <_obstack_memory_used@@Base+0x1b8>
   24794:	rsbs	ip, ip, #0
   24798:	rscs	r0, r0, #0
   2479c:	rsc	r1, r1, #0
   247a0:	cmp	r1, #1048576	; 0x100000
   247a4:	bcc	247e4 <_obstack_memory_used@@Base+0x1fc>
   247a8:	cmp	r1, #2097152	; 0x200000
   247ac:	bcc	247cc <_obstack_memory_used@@Base+0x1e4>
   247b0:	lsrs	r1, r1, #1
   247b4:	rrxs	r0, r0
   247b8:	rrx	ip, ip
   247bc:	add	r4, r4, #1
   247c0:	lsl	r2, r4, #21
   247c4:	cmn	r2, #4194304	; 0x400000
   247c8:	bcs	24924 <_obstack_memory_used@@Base+0x33c>
   247cc:	cmp	ip, #-2147483648	; 0x80000000
   247d0:	lsrseq	ip, r0, #1
   247d4:	adcs	r0, r0, #0
   247d8:	adc	r1, r1, r4, lsl #20
   247dc:	orr	r1, r1, r5
   247e0:	pop	{r4, r5, pc}
   247e4:	lsls	ip, ip, #1
   247e8:	adcs	r0, r0, r0
   247ec:	adc	r1, r1, r1
   247f0:	tst	r1, #1048576	; 0x100000
   247f4:	sub	r4, r4, #1
   247f8:	bne	247cc <_obstack_memory_used@@Base+0x1e4>
   247fc:	teq	r1, #0
   24800:	moveq	r1, r0
   24804:	moveq	r0, #0
   24808:	clz	r3, r1
   2480c:	addeq	r3, r3, #32
   24810:	sub	r3, r3, #11
   24814:	subs	r2, r3, #32
   24818:	bge	2483c <_obstack_memory_used@@Base+0x254>
   2481c:	adds	r2, r2, #12
   24820:	ble	24838 <_obstack_memory_used@@Base+0x250>
   24824:	add	ip, r2, #20
   24828:	rsb	r2, r2, #12
   2482c:	lsl	r0, r1, ip
   24830:	lsr	r1, r1, r2
   24834:	b	2484c <_obstack_memory_used@@Base+0x264>
   24838:	add	r2, r2, #20
   2483c:	rsble	ip, r2, #32
   24840:	lsl	r1, r1, r2
   24844:	orrle	r1, r1, r0, lsr ip
   24848:	lslle	r0, r0, r2
   2484c:	subs	r4, r4, r3
   24850:	addge	r1, r1, r4, lsl #20
   24854:	orrge	r1, r1, r5
   24858:	popge	{r4, r5, pc}
   2485c:	mvn	r4, r4
   24860:	subs	r4, r4, #31
   24864:	bge	248a0 <_obstack_memory_used@@Base+0x2b8>
   24868:	adds	r4, r4, #12
   2486c:	bgt	24888 <_obstack_memory_used@@Base+0x2a0>
   24870:	add	r4, r4, #20
   24874:	rsb	r2, r4, #32
   24878:	lsr	r0, r0, r4
   2487c:	orr	r0, r0, r1, lsl r2
   24880:	orr	r1, r5, r1, lsr r4
   24884:	pop	{r4, r5, pc}
   24888:	rsb	r4, r4, #12
   2488c:	rsb	r2, r4, #32
   24890:	lsr	r0, r0, r2
   24894:	orr	r0, r0, r1, lsl r4
   24898:	mov	r1, r5
   2489c:	pop	{r4, r5, pc}
   248a0:	lsr	r0, r1, r4
   248a4:	mov	r1, r5
   248a8:	pop	{r4, r5, pc}
   248ac:	teq	r4, #0
   248b0:	eor	r3, r3, #1048576	; 0x100000
   248b4:	eoreq	r1, r1, #1048576	; 0x100000
   248b8:	addeq	r4, r4, #1
   248bc:	subne	r5, r5, #1
   248c0:	b	2474c <_obstack_memory_used@@Base+0x164>
   248c4:	mvns	ip, r4, asr #21
   248c8:	mvnsne	ip, r5, asr #21
   248cc:	beq	24934 <_obstack_memory_used@@Base+0x34c>
   248d0:	teq	r4, r5
   248d4:	teqeq	r0, r2
   248d8:	beq	248ec <_obstack_memory_used@@Base+0x304>
   248dc:	orrs	ip, r4, r0
   248e0:	moveq	r1, r3
   248e4:	moveq	r0, r2
   248e8:	pop	{r4, r5, pc}
   248ec:	teq	r1, r3
   248f0:	movne	r1, #0
   248f4:	movne	r0, #0
   248f8:	popne	{r4, r5, pc}
   248fc:	lsrs	ip, r4, #21
   24900:	bne	24914 <_obstack_memory_used@@Base+0x32c>
   24904:	lsls	r0, r0, #1
   24908:	adcs	r1, r1, r1
   2490c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   24910:	pop	{r4, r5, pc}
   24914:	adds	r4, r4, #4194304	; 0x400000
   24918:	addcc	r1, r1, #1048576	; 0x100000
   2491c:	popcc	{r4, r5, pc}
   24920:	and	r5, r1, #-2147483648	; 0x80000000
   24924:	orr	r1, r5, #2130706432	; 0x7f000000
   24928:	orr	r1, r1, #15728640	; 0xf00000
   2492c:	mov	r0, #0
   24930:	pop	{r4, r5, pc}
   24934:	mvns	ip, r4, asr #21
   24938:	movne	r1, r3
   2493c:	movne	r0, r2
   24940:	mvnseq	ip, r5, asr #21
   24944:	movne	r3, r1
   24948:	movne	r2, r0
   2494c:	orrs	r4, r0, r1, lsl #12
   24950:	orrseq	r5, r2, r3, lsl #12
   24954:	teqeq	r1, r3
   24958:	orrne	r1, r1, #524288	; 0x80000
   2495c:	pop	{r4, r5, pc}
   24960:	teq	r0, #0
   24964:	moveq	r1, #0
   24968:	bxeq	lr
   2496c:	push	{r4, r5, lr}
   24970:	mov	r4, #1024	; 0x400
   24974:	add	r4, r4, #50	; 0x32
   24978:	mov	r5, #0
   2497c:	mov	r1, #0
   24980:	b	247fc <_obstack_memory_used@@Base+0x214>
   24984:	teq	r0, #0
   24988:	moveq	r1, #0
   2498c:	bxeq	lr
   24990:	push	{r4, r5, lr}
   24994:	mov	r4, #1024	; 0x400
   24998:	add	r4, r4, #50	; 0x32
   2499c:	ands	r5, r0, #-2147483648	; 0x80000000
   249a0:	rsbmi	r0, r0, #0
   249a4:	mov	r1, #0
   249a8:	b	247fc <_obstack_memory_used@@Base+0x214>
   249ac:	lsls	r2, r0, #1
   249b0:	asr	r1, r2, #3
   249b4:	rrx	r1, r1
   249b8:	lsl	r0, r2, #28
   249bc:	andsne	r3, r2, #-16777216	; 0xff000000
   249c0:	teqne	r3, #-16777216	; 0xff000000
   249c4:	eorne	r1, r1, #939524096	; 0x38000000
   249c8:	bxne	lr
   249cc:	bics	r2, r2, #-16777216	; 0xff000000
   249d0:	bxeq	lr
   249d4:	teq	r3, #-16777216	; 0xff000000
   249d8:	orreq	r1, r1, #524288	; 0x80000
   249dc:	bxeq	lr
   249e0:	push	{r4, r5, lr}
   249e4:	mov	r4, #896	; 0x380
   249e8:	and	r5, r1, #-2147483648	; 0x80000000
   249ec:	bic	r1, r1, #-2147483648	; 0x80000000
   249f0:	b	247fc <_obstack_memory_used@@Base+0x214>
   249f4:	orrs	r2, r0, r1
   249f8:	bxeq	lr
   249fc:	push	{r4, r5, lr}
   24a00:	mov	r5, #0
   24a04:	b	24a24 <_obstack_memory_used@@Base+0x43c>
   24a08:	orrs	r2, r0, r1
   24a0c:	bxeq	lr
   24a10:	push	{r4, r5, lr}
   24a14:	ands	r5, r1, #-2147483648	; 0x80000000
   24a18:	bpl	24a24 <_obstack_memory_used@@Base+0x43c>
   24a1c:	rsbs	r0, r0, #0
   24a20:	rsc	r1, r1, #0
   24a24:	mov	r4, #1024	; 0x400
   24a28:	add	r4, r4, #50	; 0x32
   24a2c:	lsrs	ip, r1, #22
   24a30:	beq	247a0 <_obstack_memory_used@@Base+0x1b8>
   24a34:	mov	r2, #3
   24a38:	lsrs	ip, ip, #3
   24a3c:	addne	r2, r2, #3
   24a40:	lsrs	ip, ip, #3
   24a44:	addne	r2, r2, #3
   24a48:	add	r2, r2, ip, lsr #3
   24a4c:	rsb	r3, r2, #32
   24a50:	lsl	ip, r0, r3
   24a54:	lsr	r0, r0, r2
   24a58:	orr	r0, r0, r1, lsl r3
   24a5c:	lsr	r1, r1, r2
   24a60:	add	r4, r4, r2
   24a64:	b	247a0 <_obstack_memory_used@@Base+0x1b8>
   24a68:	cmp	r3, #0
   24a6c:	cmpeq	r2, #0
   24a70:	bne	24a88 <_obstack_memory_used@@Base+0x4a0>
   24a74:	cmp	r1, #0
   24a78:	cmpeq	r0, #0
   24a7c:	mvnne	r1, #0
   24a80:	mvnne	r0, #0
   24a84:	b	24aa4 <_obstack_memory_used@@Base+0x4bc>
   24a88:	sub	sp, sp, #8
   24a8c:	push	{sp, lr}
   24a90:	bl	24af8 <_obstack_memory_used@@Base+0x510>
   24a94:	ldr	lr, [sp, #4]
   24a98:	add	sp, sp, #8
   24a9c:	pop	{r2, r3}
   24aa0:	bx	lr
   24aa4:	push	{r1, lr}
   24aa8:	mov	r0, #8
   24aac:	bl	11e1c <raise@plt>
   24ab0:	pop	{r1, pc}
   24ab4:	andeq	r0, r0, r0
   24ab8:	vmov	d6, r0, r1
   24abc:	vldr	d7, [pc, #36]	; 24ae8 <_obstack_memory_used@@Base+0x500>
   24ac0:	vldr	d5, [pc, #40]	; 24af0 <_obstack_memory_used@@Base+0x508>
   24ac4:	vmul.f64	d7, d6, d7
   24ac8:	vcvt.u32.f64	s14, d7
   24acc:	vcvt.f64.u32	d4, s14
   24ad0:	vmov	r1, s14
   24ad4:	vmls.f64	d6, d4, d5
   24ad8:	vcvt.u32.f64	s15, d6
   24adc:	vmov	r0, s15
   24ae0:	bx	lr
   24ae4:	nop			; (mov r0, r0)
   24ae8:	andeq	r0, r0, r0
   24aec:	ldclcc	0, cr0, [r0]
   24af0:	andeq	r0, r0, r0
   24af4:	mvnsmi	r0, r0
   24af8:	cmp	r1, r3
   24afc:	cmpeq	r0, r2
   24b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b04:	mov	r4, r0
   24b08:	movcc	r0, #0
   24b0c:	mov	r5, r1
   24b10:	ldr	lr, [sp, #36]	; 0x24
   24b14:	movcc	r1, r0
   24b18:	bcc	24c14 <_obstack_memory_used@@Base+0x62c>
   24b1c:	cmp	r3, #0
   24b20:	clzeq	ip, r2
   24b24:	clzne	ip, r3
   24b28:	addeq	ip, ip, #32
   24b2c:	cmp	r5, #0
   24b30:	clzeq	r1, r4
   24b34:	addeq	r1, r1, #32
   24b38:	clzne	r1, r5
   24b3c:	sub	ip, ip, r1
   24b40:	sub	sl, ip, #32
   24b44:	lsl	r9, r3, ip
   24b48:	rsb	fp, ip, #32
   24b4c:	orr	r9, r9, r2, lsl sl
   24b50:	orr	r9, r9, r2, lsr fp
   24b54:	lsl	r8, r2, ip
   24b58:	cmp	r5, r9
   24b5c:	cmpeq	r4, r8
   24b60:	movcc	r0, #0
   24b64:	movcc	r1, r0
   24b68:	bcc	24b84 <_obstack_memory_used@@Base+0x59c>
   24b6c:	mov	r0, #1
   24b70:	subs	r4, r4, r8
   24b74:	lsl	r1, r0, sl
   24b78:	orr	r1, r1, r0, lsr fp
   24b7c:	lsl	r0, r0, ip
   24b80:	sbc	r5, r5, r9
   24b84:	cmp	ip, #0
   24b88:	beq	24c14 <_obstack_memory_used@@Base+0x62c>
   24b8c:	lsr	r6, r8, #1
   24b90:	orr	r6, r6, r9, lsl #31
   24b94:	lsr	r7, r9, #1
   24b98:	mov	r2, ip
   24b9c:	b	24bc0 <_obstack_memory_used@@Base+0x5d8>
   24ba0:	subs	r3, r4, r6
   24ba4:	sbc	r8, r5, r7
   24ba8:	adds	r3, r3, r3
   24bac:	adc	r8, r8, r8
   24bb0:	adds	r4, r3, #1
   24bb4:	adc	r5, r8, #0
   24bb8:	subs	r2, r2, #1
   24bbc:	beq	24bdc <_obstack_memory_used@@Base+0x5f4>
   24bc0:	cmp	r5, r7
   24bc4:	cmpeq	r4, r6
   24bc8:	bcs	24ba0 <_obstack_memory_used@@Base+0x5b8>
   24bcc:	adds	r4, r4, r4
   24bd0:	adc	r5, r5, r5
   24bd4:	subs	r2, r2, #1
   24bd8:	bne	24bc0 <_obstack_memory_used@@Base+0x5d8>
   24bdc:	lsr	r3, r4, ip
   24be0:	orr	r3, r3, r5, lsl fp
   24be4:	lsr	r2, r5, ip
   24be8:	orr	r3, r3, r5, lsr sl
   24bec:	adds	r0, r0, r4
   24bf0:	mov	r4, r3
   24bf4:	lsl	r3, r2, ip
   24bf8:	orr	r3, r3, r4, lsl sl
   24bfc:	lsl	ip, r4, ip
   24c00:	orr	r3, r3, r4, lsr fp
   24c04:	adc	r1, r1, r5
   24c08:	subs	r0, r0, ip
   24c0c:	mov	r5, r2
   24c10:	sbc	r1, r1, r3
   24c14:	cmp	lr, #0
   24c18:	strdne	r4, [lr]
   24c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24c24:	mov	r7, r0
   24c28:	ldr	r6, [pc, #72]	; 24c78 <_obstack_memory_used@@Base+0x690>
   24c2c:	ldr	r5, [pc, #72]	; 24c7c <_obstack_memory_used@@Base+0x694>
   24c30:	add	r6, pc, r6
   24c34:	add	r5, pc, r5
   24c38:	sub	r6, r6, r5
   24c3c:	mov	r8, r1
   24c40:	mov	r9, r2
   24c44:	bl	11dcc <pthread_mutex_unlock@plt-0x20>
   24c48:	asrs	r6, r6, #2
   24c4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24c50:	mov	r4, #0
   24c54:	add	r4, r4, #1
   24c58:	ldr	r3, [r5], #4
   24c5c:	mov	r2, r9
   24c60:	mov	r1, r8
   24c64:	mov	r0, r7
   24c68:	blx	r3
   24c6c:	cmp	r6, r4
   24c70:	bne	24c54 <_obstack_memory_used@@Base+0x66c>
   24c74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24c78:	andeq	r3, r1, ip, asr #5
   24c7c:	andeq	r3, r1, r4, asr #5
   24c80:	bx	lr
   24c84:	ldr	r3, [pc, #12]	; 24c98 <_obstack_memory_used@@Base+0x6b0>
   24c88:	mov	r1, #0
   24c8c:	add	r3, pc, r3
   24c90:	ldr	r2, [r3]
   24c94:	b	12170 <__cxa_atexit@plt>
   24c98:	andeq	r3, r1, r8, asr #10

Disassembly of section .fini:

00024c9c <.fini>:
   24c9c:	push	{r3, lr}
   24ca0:	pop	{r3, pc}
