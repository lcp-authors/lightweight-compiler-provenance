
../repos/coreutils/src/mknod:     file format elf32-littlearm


Disassembly of section .init:

000114e0 <.init>:
   114e0:	push	{r3, lr}
   114e4:	bl	12070 <__assert_fail@plt+0x708>
   114e8:	pop	{r3, pc}

Disassembly of section .plt:

000114ec <fstatfs64@plt-0x14>:
   114ec:	push	{lr}		; (str lr, [sp, #-4]!)
   114f0:	ldr	lr, [pc, #4]	; 114fc <fstatfs64@plt-0x4>
   114f4:	add	lr, pc, lr
   114f8:	ldr	pc, [lr, #8]!
   114fc:	andeq	r9, r1, r4, lsl #22

00011500 <fstatfs64@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #102400	; 0x19000
   11508:	ldr	pc, [ip, #2820]!	; 0xb04

0001150c <selabel_lookup@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #102400	; 0x19000
   11514:	ldr	pc, [ip, #2812]!	; 0xafc

00011518 <calloc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #102400	; 0x19000
   11520:	ldr	pc, [ip, #2804]!	; 0xaf4

00011524 <fputs_unlocked@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #102400	; 0x19000
   1152c:	ldr	pc, [ip, #2796]!	; 0xaec

00011530 <raise@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #102400	; 0x19000
   11538:	ldr	pc, [ip, #2788]!	; 0xae4

0001153c <is_selinux_enabled@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #102400	; 0x19000
   11544:	ldr	pc, [ip, #2780]!	; 0xadc

00011548 <strcmp@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #102400	; 0x19000
   11550:	ldr	pc, [ip, #2772]!	; 0xad4

00011554 <gnu_dev_makedev@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #102400	; 0x19000
   1155c:	ldr	pc, [ip, #2764]!	; 0xacc

00011560 <context_type_get@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #102400	; 0x19000
   11568:	ldr	pc, [ip, #2756]!	; 0xac4

0001156c <fflush@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #102400	; 0x19000
   11574:	ldr	pc, [ip, #2748]!	; 0xabc

00011578 <lsetfilecon@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #102400	; 0x19000
   11580:	ldr	pc, [ip, #2740]!	; 0xab4

00011584 <memmove@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #102400	; 0x19000
   1158c:	ldr	pc, [ip, #2732]!	; 0xaac

00011590 <free@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #102400	; 0x19000
   11598:	ldr	pc, [ip, #2724]!	; 0xaa4

0001159c <faccessat@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #102400	; 0x19000
   115a4:	ldr	pc, [ip, #2716]!	; 0xa9c

000115a8 <_exit@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #102400	; 0x19000
   115b0:	ldr	pc, [ip, #2708]!	; 0xa94

000115b4 <memcpy@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #102400	; 0x19000
   115bc:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c0 <mbsinit@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #102400	; 0x19000
   115c8:	ldr	pc, [ip, #2692]!	; 0xa84

000115cc <context_new@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #102400	; 0x19000
   115d4:	ldr	pc, [ip, #2684]!	; 0xa7c

000115d8 <memcmp@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #102400	; 0x19000
   115e0:	ldr	pc, [ip, #2676]!	; 0xa74

000115e4 <fputc_unlocked@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #102400	; 0x19000
   115ec:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f0 <dcgettext@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #102400	; 0x19000
   115f8:	ldr	pc, [ip, #2660]!	; 0xa64

000115fc <context_type_set@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #102400	; 0x19000
   11604:	ldr	pc, [ip, #2652]!	; 0xa5c

00011608 <realloc@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #102400	; 0x19000
   11610:	ldr	pc, [ip, #2644]!	; 0xa54

00011614 <fgetfilecon@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #102400	; 0x19000
   1161c:	ldr	pc, [ip, #2636]!	; 0xa4c

00011620 <textdomain@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #102400	; 0x19000
   11628:	ldr	pc, [ip, #2628]!	; 0xa44

0001162c <rawmemchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #102400	; 0x19000
   11634:	ldr	pc, [ip, #2620]!	; 0xa3c

00011638 <__fxstatat64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #102400	; 0x19000
   11640:	ldr	pc, [ip, #2612]!	; 0xa34

00011644 <iswprint@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #102400	; 0x19000
   1164c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011650 <__fxstat64@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #102400	; 0x19000
   11658:	ldr	pc, [ip, #2596]!	; 0xa24

0001165c <readlink@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #102400	; 0x19000
   11664:	ldr	pc, [ip, #2588]!	; 0xa1c

00011668 <lseek64@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #102400	; 0x19000
   11670:	ldr	pc, [ip, #2580]!	; 0xa14

00011674 <__ctype_get_mb_cur_max@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #102400	; 0x19000
   1167c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011680 <strcpy@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #102400	; 0x19000
   11688:	ldr	pc, [ip, #2564]!	; 0xa04

0001168c <getcon@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #102400	; 0x19000
   11694:	ldr	pc, [ip, #2556]!	; 0x9fc

00011698 <__fpending@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #102400	; 0x19000
   116a0:	ldr	pc, [ip, #2548]!	; 0x9f4

000116a4 <ferror_unlocked@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #102400	; 0x19000
   116ac:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b0 <mbrtowc@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #102400	; 0x19000
   116b8:	ldr	pc, [ip, #2532]!	; 0x9e4

000116bc <error@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #102400	; 0x19000
   116c4:	ldr	pc, [ip, #2524]!	; 0x9dc

000116c8 <open64@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #102400	; 0x19000
   116d0:	ldr	pc, [ip, #2516]!	; 0x9d4

000116d4 <lgetfilecon@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #102400	; 0x19000
   116dc:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e0 <malloc@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #102400	; 0x19000
   116e8:	ldr	pc, [ip, #2500]!	; 0x9c4

000116ec <__libc_start_main@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #102400	; 0x19000
   116f4:	ldr	pc, [ip, #2492]!	; 0x9bc

000116f8 <__freading@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #102400	; 0x19000
   11700:	ldr	pc, [ip, #2484]!	; 0x9b4

00011704 <__gmon_start__@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #102400	; 0x19000
   1170c:	ldr	pc, [ip, #2476]!	; 0x9ac

00011710 <context_free@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #102400	; 0x19000
   11718:	ldr	pc, [ip, #2468]!	; 0x9a4

0001171c <mempcpy@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #102400	; 0x19000
   11724:	ldr	pc, [ip, #2460]!	; 0x99c

00011728 <getopt_long@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #102400	; 0x19000
   11730:	ldr	pc, [ip, #2452]!	; 0x994

00011734 <__ctype_b_loc@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #102400	; 0x19000
   1173c:	ldr	pc, [ip, #2444]!	; 0x98c

00011740 <getcwd@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #102400	; 0x19000
   11748:	ldr	pc, [ip, #2436]!	; 0x984

0001174c <exit@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #102400	; 0x19000
   11754:	ldr	pc, [ip, #2428]!	; 0x97c

00011758 <getfilecon@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #102400	; 0x19000
   11760:	ldr	pc, [ip, #2420]!	; 0x974

00011764 <strlen@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #102400	; 0x19000
   1176c:	ldr	pc, [ip, #2412]!	; 0x96c

00011770 <selabel_open@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #102400	; 0x19000
   11778:	ldr	pc, [ip, #2404]!	; 0x964

0001177c <strchr@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #102400	; 0x19000
   11784:	ldr	pc, [ip, #2396]!	; 0x95c

00011788 <openat64@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #102400	; 0x19000
   11790:	ldr	pc, [ip, #2388]!	; 0x954

00011794 <setfscreatecon@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #102400	; 0x19000
   1179c:	ldr	pc, [ip, #2380]!	; 0x94c

000117a0 <__errno_location@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #102400	; 0x19000
   117a8:	ldr	pc, [ip, #2372]!	; 0x944

000117ac <__sprintf_chk@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #102400	; 0x19000
   117b4:	ldr	pc, [ip, #2364]!	; 0x93c

000117b8 <__cxa_atexit@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #102400	; 0x19000
   117c0:	ldr	pc, [ip, #2356]!	; 0x934

000117c4 <memset@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #102400	; 0x19000
   117cc:	ldr	pc, [ip, #2348]!	; 0x92c

000117d0 <__printf_chk@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #102400	; 0x19000
   117d8:	ldr	pc, [ip, #2340]!	; 0x924

000117dc <fileno@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #102400	; 0x19000
   117e4:	ldr	pc, [ip, #2332]!	; 0x91c

000117e8 <strtoumax@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #102400	; 0x19000
   117f0:	ldr	pc, [ip, #2324]!	; 0x914

000117f4 <__fprintf_chk@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #102400	; 0x19000
   117fc:	ldr	pc, [ip, #2316]!	; 0x90c

00011800 <fclose@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #102400	; 0x19000
   11808:	ldr	pc, [ip, #2308]!	; 0x904

0001180c <fseeko64@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #102400	; 0x19000
   11814:	ldr	pc, [ip, #2300]!	; 0x8fc

00011818 <fcntl64@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #102400	; 0x19000
   11820:	ldr	pc, [ip, #2292]!	; 0x8f4

00011824 <setlocale@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #102400	; 0x19000
   1182c:	ldr	pc, [ip, #2284]!	; 0x8ec

00011830 <fsetfilecon@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #102400	; 0x19000
   11838:	ldr	pc, [ip, #2276]!	; 0x8e4

0001183c <strrchr@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #102400	; 0x19000
   11844:	ldr	pc, [ip, #2268]!	; 0x8dc

00011848 <nl_langinfo@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #102400	; 0x19000
   11850:	ldr	pc, [ip, #2260]!	; 0x8d4

00011854 <readdir64@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #102400	; 0x19000
   1185c:	ldr	pc, [ip, #2252]!	; 0x8cc

00011860 <fdopendir@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #102400	; 0x19000
   11868:	ldr	pc, [ip, #2244]!	; 0x8c4

0001186c <security_compute_create@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #102400	; 0x19000
   11874:	ldr	pc, [ip, #2236]!	; 0x8bc

00011878 <dirfd@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #102400	; 0x19000
   11880:	ldr	pc, [ip, #2228]!	; 0x8b4

00011884 <fchdir@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #102400	; 0x19000
   1188c:	ldr	pc, [ip, #2220]!	; 0x8ac

00011890 <qsort@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #102400	; 0x19000
   11898:	ldr	pc, [ip, #2212]!	; 0x8a4

0001189c <freecon@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #102400	; 0x19000
   118a4:	ldr	pc, [ip, #2204]!	; 0x89c

000118a8 <bindtextdomain@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #102400	; 0x19000
   118b0:	ldr	pc, [ip, #2196]!	; 0x894

000118b4 <getfscreatecon@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #102400	; 0x19000
   118bc:	ldr	pc, [ip, #2188]!	; 0x88c

000118c0 <umask@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #102400	; 0x19000
   118c8:	ldr	pc, [ip, #2180]!	; 0x884

000118cc <context_str@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #102400	; 0x19000
   118d4:	ldr	pc, [ip, #2172]!	; 0x87c

000118d8 <chmod@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #102400	; 0x19000
   118e0:	ldr	pc, [ip, #2164]!	; 0x874

000118e4 <__xstat64@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #102400	; 0x19000
   118ec:	ldr	pc, [ip, #2156]!	; 0x86c

000118f0 <__xmknod@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #102400	; 0x19000
   118f8:	ldr	pc, [ip, #2148]!	; 0x864

000118fc <fputs@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #102400	; 0x19000
   11904:	ldr	pc, [ip, #2140]!	; 0x85c

00011908 <strncmp@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #102400	; 0x19000
   11910:	ldr	pc, [ip, #2132]!	; 0x854

00011914 <abort@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #102400	; 0x19000
   1191c:	ldr	pc, [ip, #2124]!	; 0x84c

00011920 <close@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #102400	; 0x19000
   11928:	ldr	pc, [ip, #2116]!	; 0x844

0001192c <__lxstat64@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #102400	; 0x19000
   11934:	ldr	pc, [ip, #2108]!	; 0x83c

00011938 <mkfifo@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #102400	; 0x19000
   11940:	ldr	pc, [ip, #2100]!	; 0x834

00011944 <mode_to_security_class@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #102400	; 0x19000
   1194c:	ldr	pc, [ip, #2092]!	; 0x82c

00011950 <closedir@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #102400	; 0x19000
   11958:	ldr	pc, [ip, #2084]!	; 0x824

0001195c <strspn@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #102400	; 0x19000
   11964:	ldr	pc, [ip, #2076]!	; 0x81c

00011968 <__assert_fail@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #102400	; 0x19000
   11970:	ldr	pc, [ip, #2068]!	; 0x814

Disassembly of section .text:

00011978 <lchmod@@Base-0x4330>:
   11978:	push	{r4, lr}
   1197c:	bl	117a0 <__errno_location@plt>
   11980:	mov	r3, #12
   11984:	str	r3, [r0]
   11988:	mov	r0, #0
   1198c:	pop	{r4, pc}
   11990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11994:	mov	r8, r0
   11998:	sub	sp, sp, #44	; 0x2c
   1199c:	mov	r4, r1
   119a0:	mov	r6, #0
   119a4:	mov	r9, r6
   119a8:	ldr	sl, [pc, #1544]	; 11fb8 <__assert_fail@plt+0x650>
   119ac:	ldr	fp, [pc, #1544]	; 11fbc <__assert_fail@plt+0x654>
   119b0:	ldr	r7, [pc, #1544]	; 11fc0 <__assert_fail@plt+0x658>
   119b4:	ldr	r0, [r1]
   119b8:	bl	16264 <lchmod@@Base+0x5bc>
   119bc:	ldr	r1, [pc, #1536]	; 11fc4 <__assert_fail@plt+0x65c>
   119c0:	mov	r0, #6
   119c4:	bl	11824 <setlocale@plt>
   119c8:	ldr	r1, [pc, #1528]	; 11fc8 <__assert_fail@plt+0x660>
   119cc:	ldr	r0, [pc, #1528]	; 11fcc <__assert_fail@plt+0x664>
   119d0:	bl	118a8 <bindtextdomain@plt>
   119d4:	ldr	r0, [pc, #1520]	; 11fcc <__assert_fail@plt+0x664>
   119d8:	bl	11620 <textdomain@plt>
   119dc:	ldr	r0, [pc, #1516]	; 11fd0 <__assert_fail@plt+0x668>
   119e0:	bl	1910c <lchmod@@Base+0x3464>
   119e4:	str	r6, [sp, #12]
   119e8:	mov	r5, #0
   119ec:	mov	r3, sl
   119f0:	mov	r2, fp
   119f4:	mov	r1, r4
   119f8:	mov	r0, r8
   119fc:	str	r5, [sp]
   11a00:	bl	11728 <getopt_long@plt>
   11a04:	cmn	r0, #1
   11a08:	bne	11a44 <__assert_fail@plt+0xdc>
   11a0c:	ldr	r3, [sp, #12]
   11a10:	cmp	r3, r5
   11a14:	beq	11b98 <__assert_fail@plt+0x230>
   11a18:	mov	r0, r3
   11a1c:	bl	15d98 <lchmod@@Base+0xf0>
   11a20:	subs	sl, r0, #0
   11a24:	bne	11b38 <__assert_fail@plt+0x1d0>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #1440]	; 11fd4 <__assert_fail@plt+0x66c>
   11a30:	bl	115f0 <dcgettext@plt>
   11a34:	mov	r2, r0
   11a38:	mov	r1, sl
   11a3c:	mov	r0, #1
   11a40:	bl	116bc <error@plt>
   11a44:	cmn	r0, #2
   11a48:	beq	11b04 <__assert_fail@plt+0x19c>
   11a4c:	bgt	11a60 <__assert_fail@plt+0xf8>
   11a50:	cmn	r0, #3
   11a54:	beq	11b0c <__assert_fail@plt+0x1a4>
   11a58:	mov	r0, #1
   11a5c:	b	11b08 <__assert_fail@plt+0x1a0>
   11a60:	cmp	r0, #90	; 0x5a
   11a64:	beq	11a7c <__assert_fail@plt+0x114>
   11a68:	cmp	r0, #109	; 0x6d
   11a6c:	bne	11a58 <__assert_fail@plt+0xf0>
   11a70:	ldr	r3, [r7]
   11a74:	str	r3, [sp, #12]
   11a78:	b	119e8 <__assert_fail@plt+0x80>
   11a7c:	bl	1153c <is_selinux_enabled@plt>
   11a80:	cmp	r0, #0
   11a84:	ble	11ad8 <__assert_fail@plt+0x170>
   11a88:	ldr	r2, [r7]
   11a8c:	cmp	r2, #0
   11a90:	movne	r9, r2
   11a94:	bne	119e8 <__assert_fail@plt+0x80>
   11a98:	mov	r1, r2
   11a9c:	mov	r0, r2
   11aa0:	bl	11770 <selabel_open@plt>
   11aa4:	subs	r6, r0, #0
   11aa8:	bne	119e8 <__assert_fail@plt+0x80>
   11aac:	bl	117a0 <__errno_location@plt>
   11ab0:	ldr	r5, [r0]
   11ab4:	mov	r2, #5
   11ab8:	mov	r0, r6
   11abc:	ldr	r1, [pc, #1300]	; 11fd8 <__assert_fail@plt+0x670>
   11ac0:	bl	115f0 <dcgettext@plt>
   11ac4:	mov	r2, r0
   11ac8:	mov	r0, r6
   11acc:	mov	r1, r5
   11ad0:	bl	116bc <error@plt>
   11ad4:	b	119e8 <__assert_fail@plt+0x80>
   11ad8:	ldr	r3, [r7]
   11adc:	cmp	r3, #0
   11ae0:	beq	119e8 <__assert_fail@plt+0x80>
   11ae4:	mov	r2, #5
   11ae8:	ldr	r1, [pc, #1260]	; 11fdc <__assert_fail@plt+0x674>
   11aec:	mov	r0, r5
   11af0:	bl	115f0 <dcgettext@plt>
   11af4:	mov	r2, r0
   11af8:	mov	r1, r5
   11afc:	mov	r0, r5
   11b00:	b	11ad0 <__assert_fail@plt+0x168>
   11b04:	mov	r0, r5
   11b08:	bl	12124 <__assert_fail@plt+0x7bc>
   11b0c:	ldr	r3, [pc, #1228]	; 11fe0 <__assert_fail@plt+0x678>
   11b10:	ldr	r0, [pc, #1228]	; 11fe4 <__assert_fail@plt+0x67c>
   11b14:	ldr	r2, [pc, #1228]	; 11fe8 <__assert_fail@plt+0x680>
   11b18:	stm	sp, {r3, r5}
   11b1c:	ldr	r3, [pc, #1224]	; 11fec <__assert_fail@plt+0x684>
   11b20:	ldr	r1, [pc, #1224]	; 11ff0 <__assert_fail@plt+0x688>
   11b24:	ldr	r0, [r0]
   11b28:	ldr	r3, [r3]
   11b2c:	bl	17ee8 <lchmod@@Base+0x2240>
   11b30:	mov	r0, r5
   11b34:	bl	1174c <exit@plt>
   11b38:	mov	r0, r5
   11b3c:	bl	118c0 <umask@plt>
   11b40:	mov	r7, r0
   11b44:	bl	118c0 <umask@plt>
   11b48:	mov	r3, sl
   11b4c:	mov	r2, r7
   11b50:	str	r5, [sp]
   11b54:	mov	r1, r5
   11b58:	movw	r0, #438	; 0x1b6
   11b5c:	bl	160d8 <lchmod@@Base+0x430>
   11b60:	mov	r7, r0
   11b64:	mov	r0, sl
   11b68:	bl	130d0 <__assert_fail@plt+0x1768>
   11b6c:	bic	r3, r7, #508	; 0x1fc
   11b70:	bic	r3, r3, #3
   11b74:	cmp	r3, #0
   11b78:	beq	11b9c <__assert_fail@plt+0x234>
   11b7c:	mov	r2, #5
   11b80:	ldr	r1, [pc, #1132]	; 11ff4 <__assert_fail@plt+0x68c>
   11b84:	mov	r0, r5
   11b88:	bl	115f0 <dcgettext@plt>
   11b8c:	mov	r2, r0
   11b90:	mov	r1, r5
   11b94:	b	11a3c <__assert_fail@plt+0xd4>
   11b98:	movw	r7, #438	; 0x1b6
   11b9c:	ldr	r5, [pc, #1108]	; 11ff8 <__assert_fail@plt+0x690>
   11ba0:	ldr	r3, [r5]
   11ba4:	cmp	r3, r8
   11ba8:	movge	sl, #2
   11bac:	bge	11bd4 <__assert_fail@plt+0x26c>
   11bb0:	add	r2, r3, #1
   11bb4:	cmp	r2, r8
   11bb8:	movge	sl, #4
   11bbc:	bge	11bd4 <__assert_fail@plt+0x26c>
   11bc0:	ldr	r2, [r4, r2, lsl #2]
   11bc4:	ldrb	r2, [r2]
   11bc8:	cmp	r2, #112	; 0x70
   11bcc:	movne	sl, #4
   11bd0:	moveq	sl, #2
   11bd4:	sub	r2, r8, r3
   11bd8:	cmp	r2, sl
   11bdc:	bcs	11c84 <__assert_fail@plt+0x31c>
   11be0:	cmp	r3, r8
   11be4:	mov	r2, #5
   11be8:	blt	11c50 <__assert_fail@plt+0x2e8>
   11bec:	ldr	r1, [pc, #1032]	; 11ffc <__assert_fail@plt+0x694>
   11bf0:	mov	r0, #0
   11bf4:	bl	115f0 <dcgettext@plt>
   11bf8:	mov	r1, #0
   11bfc:	mov	r2, r0
   11c00:	mov	r0, r1
   11c04:	bl	116bc <error@plt>
   11c08:	cmp	sl, #4
   11c0c:	bne	11a58 <__assert_fail@plt+0xf0>
   11c10:	ldr	r3, [r5]
   11c14:	sub	r8, r8, r3
   11c18:	cmp	r8, #2
   11c1c:	bne	11a58 <__assert_fail@plt+0xf0>
   11c20:	ldr	r3, [pc, #984]	; 12000 <__assert_fail@plt+0x698>
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #980]	; 12004 <__assert_fail@plt+0x69c>
   11c2c:	ldr	r4, [r3]
   11c30:	mov	r0, #0
   11c34:	bl	115f0 <dcgettext@plt>
   11c38:	mov	r3, r0
   11c3c:	ldr	r2, [pc, #964]	; 12008 <__assert_fail@plt+0x6a0>
   11c40:	mov	r1, #1
   11c44:	mov	r0, r4
   11c48:	bl	117f4 <__fprintf_chk@plt>
   11c4c:	b	11a58 <__assert_fail@plt+0xf0>
   11c50:	ldr	r1, [pc, #948]	; 1200c <__assert_fail@plt+0x6a4>
   11c54:	mov	r0, #0
   11c58:	bl	115f0 <dcgettext@plt>
   11c5c:	sub	r3, r8, #-1073741823	; 0xc0000001
   11c60:	mov	r6, r0
   11c64:	ldr	r0, [r4, r3, lsl #2]
   11c68:	bl	17864 <lchmod@@Base+0x1bbc>
   11c6c:	mov	r1, #0
   11c70:	mov	r3, r0
   11c74:	mov	r2, r6
   11c78:	mov	r0, r1
   11c7c:	bl	116bc <error@plt>
   11c80:	b	11c08 <__assert_fail@plt+0x2a0>
   11c84:	bls	11cec <__assert_fail@plt+0x384>
   11c88:	mov	r2, #5
   11c8c:	ldr	r1, [pc, #892]	; 12010 <__assert_fail@plt+0x6a8>
   11c90:	mov	r0, #0
   11c94:	bl	115f0 <dcgettext@plt>
   11c98:	ldr	r3, [r5]
   11c9c:	mov	r6, r0
   11ca0:	add	r3, sl, r3
   11ca4:	ldr	r0, [r4, r3, lsl #2]
   11ca8:	bl	17864 <lchmod@@Base+0x1bbc>
   11cac:	mov	r1, #0
   11cb0:	mov	r3, r0
   11cb4:	mov	r2, r6
   11cb8:	mov	r0, r1
   11cbc:	bl	116bc <error@plt>
   11cc0:	cmp	sl, #2
   11cc4:	bne	11a58 <__assert_fail@plt+0xf0>
   11cc8:	ldr	r3, [r5]
   11ccc:	sub	r8, r8, r3
   11cd0:	cmp	r8, #4
   11cd4:	bne	11a58 <__assert_fail@plt+0xf0>
   11cd8:	ldr	r3, [pc, #800]	; 12000 <__assert_fail@plt+0x698>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r1, [pc, #812]	; 12014 <__assert_fail@plt+0x6ac>
   11ce4:	ldr	r4, [r3]
   11ce8:	b	11c30 <__assert_fail@plt+0x2c8>
   11cec:	cmp	r9, #0
   11cf0:	beq	11d3c <__assert_fail@plt+0x3d4>
   11cf4:	mov	r0, r9
   11cf8:	bl	11794 <setfscreatecon@plt>
   11cfc:	cmp	r0, #0
   11d00:	bge	11d3c <__assert_fail@plt+0x3d4>
   11d04:	bl	117a0 <__errno_location@plt>
   11d08:	ldr	r4, [r0]
   11d0c:	mov	r2, #5
   11d10:	mov	r0, #0
   11d14:	ldr	r1, [pc, #764]	; 12018 <__assert_fail@plt+0x6b0>
   11d18:	bl	115f0 <dcgettext@plt>
   11d1c:	mov	r5, r0
   11d20:	mov	r0, r9
   11d24:	bl	17864 <lchmod@@Base+0x1bbc>
   11d28:	mov	r3, r0
   11d2c:	mov	r2, r5
   11d30:	mov	r1, r4
   11d34:	mov	r0, #1
   11d38:	bl	116bc <error@plt>
   11d3c:	ldr	r2, [r5]
   11d40:	add	r2, r2, #1
   11d44:	lsl	r3, r2, #2
   11d48:	ldr	r2, [r4, r2, lsl #2]
   11d4c:	ldrb	r2, [r2]
   11d50:	cmp	r2, #99	; 0x63
   11d54:	beq	11db4 <__assert_fail@plt+0x44c>
   11d58:	bhi	11da4 <__assert_fail@plt+0x43c>
   11d5c:	cmp	r2, #98	; 0x62
   11d60:	moveq	sl, #24576	; 0x6000
   11d64:	beq	11db8 <__assert_fail@plt+0x450>
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #680]	; 1201c <__assert_fail@plt+0x6b4>
   11d70:	mov	r0, #0
   11d74:	bl	115f0 <dcgettext@plt>
   11d78:	ldr	r3, [r5]
   11d7c:	mov	r6, r0
   11d80:	add	r3, r3, #1
   11d84:	ldr	r0, [r4, r3, lsl #2]
   11d88:	bl	17864 <lchmod@@Base+0x1bbc>
   11d8c:	mov	r1, #0
   11d90:	mov	r3, r0
   11d94:	mov	r2, r6
   11d98:	mov	r0, r1
   11d9c:	bl	116bc <error@plt>
   11da0:	b	11a58 <__assert_fail@plt+0xf0>
   11da4:	cmp	r2, #112	; 0x70
   11da8:	beq	11f20 <__assert_fail@plt+0x5b8>
   11dac:	cmp	r2, #117	; 0x75
   11db0:	bne	11d68 <__assert_fail@plt+0x400>
   11db4:	mov	sl, #8192	; 0x2000
   11db8:	add	r3, r4, r3
   11dbc:	ldr	fp, [pc, #512]	; 11fc4 <__assert_fail@plt+0x65c>
   11dc0:	mov	r2, #0
   11dc4:	mov	r1, r2
   11dc8:	ldr	r9, [r3, #4]
   11dcc:	ldr	r8, [r3, #8]
   11dd0:	add	r3, sp, #24
   11dd4:	str	fp, [sp]
   11dd8:	mov	r0, r9
   11ddc:	bl	183bc <lchmod@@Base+0x2714>
   11de0:	subs	ip, r0, #0
   11de4:	bne	11dfc <__assert_fail@plt+0x494>
   11de8:	ldrd	r2, [sp, #24]
   11dec:	mov	r1, ip
   11df0:	cmp	r3, ip
   11df4:	cmpeq	r2, r2
   11df8:	beq	11e28 <__assert_fail@plt+0x4c0>
   11dfc:	mov	r2, #5
   11e00:	ldr	r1, [pc, #536]	; 12020 <__assert_fail@plt+0x6b8>
   11e04:	mov	r0, #0
   11e08:	bl	115f0 <dcgettext@plt>
   11e0c:	mov	r4, r0
   11e10:	mov	r0, r9
   11e14:	bl	17864 <lchmod@@Base+0x1bbc>
   11e18:	mov	r3, r0
   11e1c:	mov	r2, r4
   11e20:	mov	r1, #0
   11e24:	b	11d34 <__assert_fail@plt+0x3cc>
   11e28:	add	r3, sp, #32
   11e2c:	mov	r2, ip
   11e30:	str	fp, [sp]
   11e34:	mov	r0, r8
   11e38:	bl	183bc <lchmod@@Base+0x2714>
   11e3c:	subs	fp, r0, #0
   11e40:	bne	11e54 <__assert_fail@plt+0x4ec>
   11e44:	ldrd	r2, [sp, #32]
   11e48:	cmp	r3, fp
   11e4c:	cmpeq	r2, r2
   11e50:	beq	11e70 <__assert_fail@plt+0x508>
   11e54:	mov	r2, #5
   11e58:	ldr	r1, [pc, #452]	; 12024 <__assert_fail@plt+0x6bc>
   11e5c:	mov	r0, #0
   11e60:	bl	115f0 <dcgettext@plt>
   11e64:	mov	r4, r0
   11e68:	mov	r0, r8
   11e6c:	b	11e14 <__assert_fail@plt+0x4ac>
   11e70:	mov	r1, r2
   11e74:	ldr	r0, [sp, #24]
   11e78:	bl	11554 <gnu_dev_makedev@plt>
   11e7c:	mvn	r3, #0
   11e80:	mvn	r2, #0
   11e84:	strd	r0, [sp, #16]
   11e88:	cmp	r1, r3
   11e8c:	cmpeq	r0, r2
   11e90:	bne	11ebc <__assert_fail@plt+0x554>
   11e94:	mov	r2, #5
   11e98:	ldr	r1, [pc, #392]	; 12028 <__assert_fail@plt+0x6c0>
   11e9c:	mov	r0, fp
   11ea0:	bl	115f0 <dcgettext@plt>
   11ea4:	mov	r2, r0
   11ea8:	mov	r3, r9
   11eac:	str	r8, [sp]
   11eb0:	mov	r1, fp
   11eb4:	mov	r0, #1
   11eb8:	bl	116bc <error@plt>
   11ebc:	cmp	r6, #0
   11ec0:	beq	11ed8 <__assert_fail@plt+0x570>
   11ec4:	ldr	r3, [r5]
   11ec8:	mov	r2, sl
   11ecc:	mov	r0, r6
   11ed0:	ldr	r1, [r4, r3, lsl #2]
   11ed4:	bl	125f0 <__assert_fail@plt+0xc88>
   11ed8:	ldr	r0, [r5]
   11edc:	orr	r1, r7, sl
   11ee0:	ldrd	r2, [sp, #16]
   11ee4:	ldr	r0, [r4, r0, lsl #2]
   11ee8:	bl	1917c <lchmod@@Base+0x34d4>
   11eec:	cmp	r0, #0
   11ef0:	beq	11f50 <__assert_fail@plt+0x5e8>
   11ef4:	bl	117a0 <__errno_location@plt>
   11ef8:	ldr	r3, [r5]
   11efc:	mov	r1, #3
   11f00:	ldr	r6, [r0]
   11f04:	mov	r0, #0
   11f08:	ldr	r2, [r4, r3, lsl #2]
   11f0c:	bl	17724 <lchmod@@Base+0x1a7c>
   11f10:	ldr	r2, [pc, #276]	; 1202c <__assert_fail@plt+0x6c4>
   11f14:	mov	r3, r0
   11f18:	mov	r1, r6
   11f1c:	b	11d34 <__assert_fail@plt+0x3cc>
   11f20:	cmp	r6, #0
   11f24:	beq	11f3c <__assert_fail@plt+0x5d4>
   11f28:	add	r3, r4, r3
   11f2c:	mov	r2, #4096	; 0x1000
   11f30:	mov	r0, r6
   11f34:	ldr	r1, [r3, #-4]
   11f38:	bl	125f0 <__assert_fail@plt+0xc88>
   11f3c:	ldr	r3, [r5]
   11f40:	mov	r1, r7
   11f44:	ldr	r0, [r4, r3, lsl #2]
   11f48:	bl	11938 <mkfifo@plt>
   11f4c:	b	11eec <__assert_fail@plt+0x584>
   11f50:	ldr	r3, [sp, #12]
   11f54:	cmp	r3, #0
   11f58:	beq	11fac <__assert_fail@plt+0x644>
   11f5c:	ldr	r3, [r5]
   11f60:	mov	r1, r7
   11f64:	ldr	r0, [r4, r3, lsl #2]
   11f68:	bl	15ca8 <lchmod@@Base>
   11f6c:	cmp	r0, #0
   11f70:	beq	11fac <__assert_fail@plt+0x644>
   11f74:	bl	117a0 <__errno_location@plt>
   11f78:	mov	r2, #5
   11f7c:	ldr	r1, [pc, #172]	; 12030 <__assert_fail@plt+0x6c8>
   11f80:	ldr	r6, [r0]
   11f84:	mov	r0, #0
   11f88:	bl	115f0 <dcgettext@plt>
   11f8c:	ldr	r3, [r5]
   11f90:	mov	r7, r0
   11f94:	mov	r0, #4
   11f98:	ldr	r1, [r4, r3, lsl #2]
   11f9c:	bl	17680 <lchmod@@Base+0x19d8>
   11fa0:	mov	r3, r0
   11fa4:	mov	r2, r7
   11fa8:	b	11f18 <__assert_fail@plt+0x5b0>
   11fac:	mov	r0, #0
   11fb0:	add	sp, sp, #44	; 0x2c
   11fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fb8:	andeq	r9, r1, r8, ror #3
   11fbc:	andeq	r9, r1, r1, asr #16
   11fc0:	strdeq	fp, [r2], -r8
   11fc4:			; <UNDEFINED> instruction: 0x000197b3
   11fc8:			; <UNDEFINED> instruction: 0x000197b4
   11fcc:	andeq	r9, r1, r1, lsl r7
   11fd0:	andeq	r2, r1, r4, lsr #29
   11fd4:	andeq	r9, r1, r5, asr #16
   11fd8:	andeq	r9, r1, ip, asr #15
   11fdc:	andeq	r9, r1, r8, ror #15
   11fe0:	andeq	r9, r1, r1, lsr r8
   11fe4:	strdeq	fp, [r2], -r4
   11fe8:	andeq	r9, r1, sp, lsl #14
   11fec:	muleq	r2, r4, r1
   11ff0:	andeq	r9, r1, r8, lsr r2
   11ff4:	andeq	r9, r1, r2, asr r8
   11ff8:	andeq	fp, r2, r8, ror #3
   11ffc:	andeq	r9, r1, lr, ror r8
   12000:	strdeq	fp, [r2], -r0
   12004:	andeq	r9, r1, r7, lsr #17
   12008:	andeq	r9, r1, r3, lsr #24
   1200c:	andeq	r9, r1, lr, lsl #17
   12010:	ldrdeq	r9, [r1], -sp
   12014:	andeq	r9, r1, lr, ror #17
   12018:	andeq	r9, r1, r0, lsr #18
   1201c:	andeq	r9, r1, r5, lsr #19
   12020:	andeq	r9, r1, r2, asr r9
   12024:	andeq	r9, r1, r1, ror r9
   12028:	muleq	r1, r0, r9
   1202c:	andeq	r9, r1, r6, ror #20
   12030:			; <UNDEFINED> instruction: 0x000199bc
   12034:	mov	fp, #0
   12038:	mov	lr, #0
   1203c:	pop	{r1}		; (ldr r1, [sp], #4)
   12040:	mov	r2, sp
   12044:	push	{r2}		; (str r2, [sp, #-4]!)
   12048:	push	{r0}		; (str r0, [sp, #-4]!)
   1204c:	ldr	ip, [pc, #16]	; 12064 <__assert_fail@plt+0x6fc>
   12050:	push	{ip}		; (str ip, [sp, #-4]!)
   12054:	ldr	r0, [pc, #12]	; 12068 <__assert_fail@plt+0x700>
   12058:	ldr	r3, [pc, #12]	; 1206c <__assert_fail@plt+0x704>
   1205c:	bl	116ec <__libc_start_main@plt>
   12060:	bl	11914 <abort@plt>
   12064:	andeq	r9, r1, r8, lsl #2
   12068:	muleq	r1, r0, r9
   1206c:	andeq	r9, r1, r8, lsr #1
   12070:	ldr	r3, [pc, #20]	; 1208c <__assert_fail@plt+0x724>
   12074:	ldr	r2, [pc, #20]	; 12090 <__assert_fail@plt+0x728>
   12078:	add	r3, pc, r3
   1207c:	ldr	r2, [r3, r2]
   12080:	cmp	r2, #0
   12084:	bxeq	lr
   12088:	b	11704 <__gmon_start__@plt>
   1208c:	andeq	r8, r1, r0, lsl #31
   12090:	andeq	r0, r0, r8, lsl #3
   12094:	ldr	r0, [pc, #24]	; 120b4 <__assert_fail@plt+0x74c>
   12098:	ldr	r3, [pc, #24]	; 120b8 <__assert_fail@plt+0x750>
   1209c:	cmp	r3, r0
   120a0:	bxeq	lr
   120a4:	ldr	r3, [pc, #16]	; 120bc <__assert_fail@plt+0x754>
   120a8:	cmp	r3, #0
   120ac:	bxeq	lr
   120b0:	bx	r3
   120b4:	ldrdeq	fp, [r2], -ip
   120b8:	ldrdeq	fp, [r2], -ip
   120bc:	andeq	r0, r0, r0
   120c0:	ldr	r0, [pc, #36]	; 120ec <__assert_fail@plt+0x784>
   120c4:	ldr	r1, [pc, #36]	; 120f0 <__assert_fail@plt+0x788>
   120c8:	sub	r1, r1, r0
   120cc:	asr	r1, r1, #2
   120d0:	add	r1, r1, r1, lsr #31
   120d4:	asrs	r1, r1, #1
   120d8:	bxeq	lr
   120dc:	ldr	r3, [pc, #16]	; 120f4 <__assert_fail@plt+0x78c>
   120e0:	cmp	r3, #0
   120e4:	bxeq	lr
   120e8:	bx	r3
   120ec:	ldrdeq	fp, [r2], -ip
   120f0:	ldrdeq	fp, [r2], -ip
   120f4:	andeq	r0, r0, r0
   120f8:	push	{r4, lr}
   120fc:	ldr	r4, [pc, #24]	; 1211c <__assert_fail@plt+0x7b4>
   12100:	ldrb	r3, [r4]
   12104:	cmp	r3, #0
   12108:	popne	{r4, pc}
   1210c:	bl	12094 <__assert_fail@plt+0x72c>
   12110:	mov	r3, #1
   12114:	strb	r3, [r4]
   12118:	pop	{r4, pc}
   1211c:	strdeq	fp, [r2], -ip
   12120:	b	120c0 <__assert_fail@plt+0x758>
   12124:	subs	r5, r0, #0
   12128:	push	{r7, lr}
   1212c:	sub	sp, sp, #56	; 0x38
   12130:	ldr	r4, [pc, #600]	; 12390 <__assert_fail@plt+0xa28>
   12134:	beq	1216c <__assert_fail@plt+0x804>
   12138:	mov	r2, #5
   1213c:	mov	r0, #0
   12140:	ldr	r3, [pc, #588]	; 12394 <__assert_fail@plt+0xa2c>
   12144:	ldr	r1, [pc, #588]	; 12398 <__assert_fail@plt+0xa30>
   12148:	ldr	r6, [r3]
   1214c:	bl	115f0 <dcgettext@plt>
   12150:	mov	r2, r0
   12154:	mov	r1, #1
   12158:	ldr	r3, [r4]
   1215c:	mov	r0, r6
   12160:	bl	117f4 <__fprintf_chk@plt>
   12164:	mov	r0, r5
   12168:	bl	1174c <exit@plt>
   1216c:	mov	r2, #5
   12170:	ldr	r1, [pc, #548]	; 1239c <__assert_fail@plt+0xa34>
   12174:	mov	r6, sp
   12178:	bl	115f0 <dcgettext@plt>
   1217c:	ldr	r2, [r4]
   12180:	mov	r1, r0
   12184:	mov	r0, #1
   12188:	bl	117d0 <__printf_chk@plt>
   1218c:	ldr	r4, [pc, #524]	; 123a0 <__assert_fail@plt+0xa38>
   12190:	mov	r2, #5
   12194:	mov	r0, r5
   12198:	ldr	r1, [pc, #516]	; 123a4 <__assert_fail@plt+0xa3c>
   1219c:	bl	115f0 <dcgettext@plt>
   121a0:	ldr	r7, [pc, #512]	; 123a8 <__assert_fail@plt+0xa40>
   121a4:	ldr	r1, [r4]
   121a8:	bl	11524 <fputs_unlocked@plt>
   121ac:	mov	r2, #5
   121b0:	ldr	r1, [pc, #500]	; 123ac <__assert_fail@plt+0xa44>
   121b4:	mov	r0, r5
   121b8:	bl	115f0 <dcgettext@plt>
   121bc:	ldr	r1, [r4]
   121c0:	bl	11524 <fputs_unlocked@plt>
   121c4:	mov	r2, #5
   121c8:	ldr	r1, [pc, #480]	; 123b0 <__assert_fail@plt+0xa48>
   121cc:	mov	r0, r5
   121d0:	bl	115f0 <dcgettext@plt>
   121d4:	ldr	r1, [r4]
   121d8:	bl	11524 <fputs_unlocked@plt>
   121dc:	mov	r2, #5
   121e0:	ldr	r1, [pc, #460]	; 123b4 <__assert_fail@plt+0xa4c>
   121e4:	mov	r0, r5
   121e8:	bl	115f0 <dcgettext@plt>
   121ec:	ldr	r1, [r4]
   121f0:	bl	11524 <fputs_unlocked@plt>
   121f4:	mov	r2, #5
   121f8:	ldr	r1, [pc, #440]	; 123b8 <__assert_fail@plt+0xa50>
   121fc:	mov	r0, r5
   12200:	bl	115f0 <dcgettext@plt>
   12204:	ldr	r1, [r4]
   12208:	bl	11524 <fputs_unlocked@plt>
   1220c:	mov	r2, #5
   12210:	ldr	r1, [pc, #420]	; 123bc <__assert_fail@plt+0xa54>
   12214:	mov	r0, r5
   12218:	bl	115f0 <dcgettext@plt>
   1221c:	ldr	r1, [r4]
   12220:	bl	11524 <fputs_unlocked@plt>
   12224:	mov	r2, #5
   12228:	ldr	r1, [pc, #400]	; 123c0 <__assert_fail@plt+0xa58>
   1222c:	mov	r0, r5
   12230:	bl	115f0 <dcgettext@plt>
   12234:	ldr	r1, [r4]
   12238:	bl	11524 <fputs_unlocked@plt>
   1223c:	mov	r2, #5
   12240:	ldr	r1, [pc, #380]	; 123c4 <__assert_fail@plt+0xa5c>
   12244:	mov	r0, r5
   12248:	bl	115f0 <dcgettext@plt>
   1224c:	ldr	r1, [r4]
   12250:	bl	11524 <fputs_unlocked@plt>
   12254:	mov	r2, #5
   12258:	ldr	r1, [pc, #360]	; 123c8 <__assert_fail@plt+0xa60>
   1225c:	mov	r0, r5
   12260:	bl	115f0 <dcgettext@plt>
   12264:	mov	r1, r0
   12268:	ldr	r2, [pc, #312]	; 123a8 <__assert_fail@plt+0xa40>
   1226c:	mov	r0, #1
   12270:	bl	117d0 <__printf_chk@plt>
   12274:	ldr	lr, [pc, #336]	; 123cc <__assert_fail@plt+0xa64>
   12278:	mov	ip, sp
   1227c:	ldm	lr!, {r0, r1, r2, r3}
   12280:	stmia	ip!, {r0, r1, r2, r3}
   12284:	ldm	lr!, {r0, r1, r2, r3}
   12288:	stmia	ip!, {r0, r1, r2, r3}
   1228c:	ldm	lr!, {r0, r1, r2, r3}
   12290:	stmia	ip!, {r0, r1, r2, r3}
   12294:	ldm	lr, {r0, r1}
   12298:	stm	ip, {r0, r1}
   1229c:	ldr	r1, [r6]
   122a0:	cmp	r1, #0
   122a4:	bne	12348 <__assert_fail@plt+0x9e0>
   122a8:	ldr	r6, [r6, #4]
   122ac:	mov	r2, #5
   122b0:	mov	r0, #0
   122b4:	ldr	r7, [pc, #236]	; 123a8 <__assert_fail@plt+0xa40>
   122b8:	ldr	r1, [pc, #272]	; 123d0 <__assert_fail@plt+0xa68>
   122bc:	cmp	r6, #0
   122c0:	moveq	r6, r7
   122c4:	bl	115f0 <dcgettext@plt>
   122c8:	mov	r1, r0
   122cc:	ldr	r3, [pc, #256]	; 123d4 <__assert_fail@plt+0xa6c>
   122d0:	mov	r0, #1
   122d4:	ldr	r2, [pc, #252]	; 123d8 <__assert_fail@plt+0xa70>
   122d8:	bl	117d0 <__printf_chk@plt>
   122dc:	mov	r1, #0
   122e0:	mov	r0, #5
   122e4:	bl	11824 <setlocale@plt>
   122e8:	cmp	r0, #0
   122ec:	bne	12360 <__assert_fail@plt+0x9f8>
   122f0:	mov	r2, #5
   122f4:	ldr	r1, [pc, #224]	; 123dc <__assert_fail@plt+0xa74>
   122f8:	mov	r0, #0
   122fc:	bl	115f0 <dcgettext@plt>
   12300:	mov	r1, r0
   12304:	ldr	r3, [pc, #156]	; 123a8 <__assert_fail@plt+0xa40>
   12308:	mov	r0, #1
   1230c:	ldr	r2, [pc, #192]	; 123d4 <__assert_fail@plt+0xa6c>
   12310:	bl	117d0 <__printf_chk@plt>
   12314:	mov	r2, #5
   12318:	ldr	r1, [pc, #192]	; 123e0 <__assert_fail@plt+0xa78>
   1231c:	mov	r0, #0
   12320:	bl	115f0 <dcgettext@plt>
   12324:	ldr	r2, [pc, #184]	; 123e4 <__assert_fail@plt+0xa7c>
   12328:	cmp	r6, r7
   1232c:	mov	r1, r0
   12330:	mov	r0, #1
   12334:	ldr	r3, [pc, #172]	; 123e8 <__assert_fail@plt+0xa80>
   12338:	moveq	r3, r2
   1233c:	mov	r2, r6
   12340:	bl	117d0 <__printf_chk@plt>
   12344:	b	12164 <__assert_fail@plt+0x7fc>
   12348:	mov	r0, r7
   1234c:	bl	11548 <strcmp@plt>
   12350:	cmp	r0, #0
   12354:	beq	122a8 <__assert_fail@plt+0x940>
   12358:	add	r6, r6, #8
   1235c:	b	1229c <__assert_fail@plt+0x934>
   12360:	mov	r2, #3
   12364:	ldr	r1, [pc, #128]	; 123ec <__assert_fail@plt+0xa84>
   12368:	bl	11908 <strncmp@plt>
   1236c:	cmp	r0, #0
   12370:	beq	122f0 <__assert_fail@plt+0x988>
   12374:	mov	r2, #5
   12378:	ldr	r1, [pc, #112]	; 123f0 <__assert_fail@plt+0xa88>
   1237c:	mov	r0, #0
   12380:	bl	115f0 <dcgettext@plt>
   12384:	ldr	r1, [r4]
   12388:	bl	11524 <fputs_unlocked@plt>
   1238c:	b	122f0 <__assert_fail@plt+0x988>
   12390:	andeq	fp, r2, r8, lsl #4
   12394:	strdeq	fp, [r2], -r0
   12398:	andeq	r9, r1, lr, lsr r2
   1239c:	andeq	r9, r1, r5, ror #4
   123a0:	strdeq	fp, [r2], -r4
   123a4:	muleq	r1, r4, r2
   123a8:	andeq	r9, r1, r8, lsr r2
   123ac:	andeq	r9, r1, r5, asr #5
   123b0:	andeq	r9, r1, r0, lsl r3
   123b4:	andeq	r9, r1, r9, asr r3
   123b8:	andeq	r9, r1, r8, lsr #8
   123bc:	andeq	r9, r1, r5, asr r4
   123c0:	andeq	r9, r1, fp, lsl #9
   123c4:	muleq	r1, r0, r5
   123c8:	andeq	r9, r1, pc, lsl #12
   123cc:			; <UNDEFINED> instruction: 0x000191b0
   123d0:	andeq	r9, r1, lr, asr #13
   123d4:	andeq	r9, r1, r5, ror #13
   123d8:	andeq	r9, r1, sp, lsl #14
   123dc:	andeq	r9, r1, r6, ror #14
   123e0:	andeq	r9, r1, r1, lsl #15
   123e4:	strdeq	r9, [r1], -r5
   123e8:			; <UNDEFINED> instruction: 0x000197b3
   123ec:	andeq	r9, r1, fp, lsl r7
   123f0:	andeq	r9, r1, pc, lsl r7
   123f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   123f8:	mov	r3, #0
   123fc:	sub	sp, sp, #116	; 0x74
   12400:	subs	r5, r0, #0
   12404:	mov	r4, r1
   12408:	str	r3, [sp]
   1240c:	str	r3, [sp, #4]
   12410:	bne	1246c <__assert_fail@plt+0xb04>
   12414:	add	r0, sp, #4
   12418:	bl	118b4 <getfscreatecon@plt>
   1241c:	cmp	r0, #0
   12420:	blt	125e8 <__assert_fail@plt+0xc80>
   12424:	bl	117a0 <__errno_location@plt>
   12428:	ldr	r6, [sp, #4]
   1242c:	mov	r5, r0
   12430:	cmp	r6, #0
   12434:	moveq	r3, #61	; 0x3d
   12438:	streq	r3, [r0]
   1243c:	beq	125e8 <__assert_fail@plt+0xc80>
   12440:	mov	r1, r6
   12444:	mov	r0, r4
   12448:	bl	11578 <lsetfilecon@plt>
   1244c:	ldr	r6, [r5]
   12450:	mov	r4, r0
   12454:	ldr	r0, [sp, #4]
   12458:	bl	1189c <freecon@plt>
   1245c:	str	r6, [r5]
   12460:	mov	r0, r4
   12464:	add	sp, sp, #116	; 0x74
   12468:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1246c:	mov	r1, #32768	; 0x8000
   12470:	mov	r0, r4
   12474:	bl	116c8 <open64@plt>
   12478:	mov	r6, r0
   1247c:	bl	117a0 <__errno_location@plt>
   12480:	cmn	r6, #1
   12484:	mov	r7, r0
   12488:	bne	124a8 <__assert_fail@plt+0xb40>
   1248c:	ldr	r3, [r0]
   12490:	cmp	r3, #40	; 0x28
   12494:	beq	124ec <__assert_fail@plt+0xb84>
   12498:	mov	r5, #0
   1249c:	mov	r8, r5
   124a0:	mvn	r4, #0
   124a4:	b	1257c <__assert_fail@plt+0xc14>
   124a8:	add	r1, sp, #8
   124ac:	mov	r0, r6
   124b0:	bl	19134 <lchmod@@Base+0x348c>
   124b4:	cmp	r0, #0
   124b8:	blt	12498 <__assert_fail@plt+0xb30>
   124bc:	mov	r2, r4
   124c0:	mov	r1, sp
   124c4:	ldr	r3, [sp, #24]
   124c8:	mov	r0, r5
   124cc:	bl	1150c <selabel_lookup@plt>
   124d0:	cmp	r0, #0
   124d4:	bge	124fc <__assert_fail@plt+0xb94>
   124d8:	ldr	r3, [r7]
   124dc:	cmp	r3, #2
   124e0:	moveq	r3, #61	; 0x3d
   124e4:	streq	r3, [r7]
   124e8:	b	12498 <__assert_fail@plt+0xb30>
   124ec:	add	r1, sp, #8
   124f0:	mov	r0, r4
   124f4:	bl	19144 <lchmod@@Base+0x349c>
   124f8:	b	124b4 <__assert_fail@plt+0xb4c>
   124fc:	ldr	r0, [sp]
   12500:	bl	115cc <context_new@plt>
   12504:	subs	r8, r0, #0
   12508:	beq	12498 <__assert_fail@plt+0xb30>
   1250c:	cmn	r6, #1
   12510:	add	r1, sp, #4
   12514:	beq	125b8 <__assert_fail@plt+0xc50>
   12518:	mov	r0, r6
   1251c:	bl	17a54 <lchmod@@Base+0x1dac>
   12520:	cmp	r0, #0
   12524:	blt	125e0 <__assert_fail@plt+0xc78>
   12528:	ldr	r0, [sp, #4]
   1252c:	bl	115cc <context_new@plt>
   12530:	subs	r5, r0, #0
   12534:	beq	124a0 <__assert_fail@plt+0xb38>
   12538:	mov	r0, r8
   1253c:	bl	11560 <context_type_get@plt>
   12540:	subs	r1, r0, #0
   12544:	beq	124a0 <__assert_fail@plt+0xb38>
   12548:	mov	r0, r5
   1254c:	bl	115fc <context_type_set@plt>
   12550:	cmp	r0, #0
   12554:	bne	124a0 <__assert_fail@plt+0xb38>
   12558:	mov	r0, r5
   1255c:	bl	118cc <context_str@plt>
   12560:	subs	r1, r0, #0
   12564:	beq	124a0 <__assert_fail@plt+0xb38>
   12568:	cmn	r6, #1
   1256c:	beq	125d4 <__assert_fail@plt+0xc6c>
   12570:	mov	r0, r6
   12574:	bl	11830 <fsetfilecon@plt>
   12578:	mov	r4, r0
   1257c:	cmn	r6, #1
   12580:	ldr	r9, [r7]
   12584:	beq	12590 <__assert_fail@plt+0xc28>
   12588:	mov	r0, r6
   1258c:	bl	11920 <close@plt>
   12590:	mov	r0, r8
   12594:	bl	11710 <context_free@plt>
   12598:	mov	r0, r5
   1259c:	bl	11710 <context_free@plt>
   125a0:	ldr	r0, [sp]
   125a4:	bl	1189c <freecon@plt>
   125a8:	ldr	r0, [sp, #4]
   125ac:	bl	1189c <freecon@plt>
   125b0:	str	r9, [r7]
   125b4:	b	12460 <__assert_fail@plt+0xaf8>
   125b8:	mov	r0, r4
   125bc:	bl	17a3c <lchmod@@Base+0x1d94>
   125c0:	cmp	r0, #0
   125c4:	bge	12528 <__assert_fail@plt+0xbc0>
   125c8:	mov	r4, r6
   125cc:	mov	r5, #0
   125d0:	b	1257c <__assert_fail@plt+0xc14>
   125d4:	mov	r0, r4
   125d8:	bl	11578 <lsetfilecon@plt>
   125dc:	b	12578 <__assert_fail@plt+0xc10>
   125e0:	mov	r5, #0
   125e4:	b	124a0 <__assert_fail@plt+0xb38>
   125e8:	mvn	r4, #0
   125ec:	b	12460 <__assert_fail@plt+0xaf8>
   125f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   125f4:	mov	r7, #0
   125f8:	sub	sp, sp, #20
   125fc:	mov	r5, r0
   12600:	mov	r4, r1
   12604:	mov	r8, r2
   12608:	ldrb	r3, [r1]
   1260c:	str	r7, [sp]
   12610:	str	r7, [sp, #4]
   12614:	cmp	r3, #47	; 0x2f
   12618:	beq	12634 <__assert_fail@plt+0xccc>
   1261c:	mov	r0, r4
   12620:	mov	r1, #2
   12624:	bl	128b8 <__assert_fail@plt+0xf50>
   12628:	subs	r4, r0, #0
   1262c:	mov	r7, r4
   12630:	beq	12674 <__assert_fail@plt+0xd0c>
   12634:	mov	r3, r8
   12638:	mov	r2, r4
   1263c:	mov	r1, sp
   12640:	mov	r0, r5
   12644:	bl	1150c <selabel_lookup@plt>
   12648:	mov	r6, r0
   1264c:	bl	117a0 <__errno_location@plt>
   12650:	cmp	r6, #0
   12654:	mov	r5, r0
   12658:	mov	r3, #0
   1265c:	bge	1267c <__assert_fail@plt+0xd14>
   12660:	ldr	r2, [r0]
   12664:	mov	r4, r3
   12668:	cmp	r2, #2
   1266c:	moveq	r2, #61	; 0x3d
   12670:	streq	r2, [r0]
   12674:	mov	r6, r4
   12678:	b	127a8 <__assert_fail@plt+0xe40>
   1267c:	mov	r0, r4
   12680:	str	r3, [sp, #8]
   12684:	str	r3, [sp, #12]
   12688:	bl	12f78 <__assert_fail@plt+0x1610>
   1268c:	mov	r6, r0
   12690:	add	r0, sp, #8
   12694:	bl	1168c <getcon@plt>
   12698:	cmp	r0, #0
   1269c:	bge	12768 <__assert_fail@plt+0xe00>
   126a0:	mvn	r4, #0
   126a4:	ldr	r8, [r5]
   126a8:	mov	r0, r6
   126ac:	bl	130d0 <__assert_fail@plt+0x1768>
   126b0:	ldr	r0, [sp, #8]
   126b4:	bl	1189c <freecon@plt>
   126b8:	ldr	r0, [sp, #12]
   126bc:	bl	1189c <freecon@plt>
   126c0:	cmp	r4, #0
   126c4:	str	r8, [r5]
   126c8:	blt	127a0 <__assert_fail@plt+0xe38>
   126cc:	ldr	r0, [sp]
   126d0:	bl	115cc <context_new@plt>
   126d4:	subs	r4, r0, #0
   126d8:	beq	12674 <__assert_fail@plt+0xd0c>
   126dc:	ldr	r0, [sp, #4]
   126e0:	bl	115cc <context_new@plt>
   126e4:	subs	r6, r0, #0
   126e8:	beq	127a8 <__assert_fail@plt+0xe40>
   126ec:	mov	r0, r4
   126f0:	bl	11560 <context_type_get@plt>
   126f4:	subs	r1, r0, #0
   126f8:	beq	127a8 <__assert_fail@plt+0xe40>
   126fc:	mov	r0, r6
   12700:	bl	115fc <context_type_set@plt>
   12704:	cmp	r0, #0
   12708:	bne	127a8 <__assert_fail@plt+0xe40>
   1270c:	mov	r0, r6
   12710:	bl	118cc <context_str@plt>
   12714:	cmp	r0, #0
   12718:	beq	127a8 <__assert_fail@plt+0xe40>
   1271c:	bl	11794 <setfscreatecon@plt>
   12720:	mov	r5, r0
   12724:	bl	117a0 <__errno_location@plt>
   12728:	mov	r8, r0
   1272c:	mov	r0, r4
   12730:	ldr	r9, [r8]
   12734:	bl	11710 <context_free@plt>
   12738:	mov	r0, r6
   1273c:	bl	11710 <context_free@plt>
   12740:	ldr	r0, [sp]
   12744:	bl	1189c <freecon@plt>
   12748:	ldr	r0, [sp, #4]
   1274c:	bl	1189c <freecon@plt>
   12750:	mov	r0, r7
   12754:	bl	130d0 <__assert_fail@plt+0x1768>
   12758:	mov	r0, r5
   1275c:	str	r9, [r8]
   12760:	add	sp, sp, #20
   12764:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12768:	add	r1, sp, #12
   1276c:	mov	r0, r6
   12770:	bl	17a24 <lchmod@@Base+0x1d7c>
   12774:	cmp	r0, #0
   12778:	blt	126a0 <__assert_fail@plt+0xd38>
   1277c:	mov	r0, r8
   12780:	bl	11944 <mode_to_security_class@plt>
   12784:	subs	r2, r0, #0
   12788:	beq	126a0 <__assert_fail@plt+0xd38>
   1278c:	add	r3, sp, #4
   12790:	ldrd	r0, [sp, #8]
   12794:	bl	1186c <security_compute_create@plt>
   12798:	mov	r4, r0
   1279c:	b	126a4 <__assert_fail@plt+0xd3c>
   127a0:	mov	r6, #0
   127a4:	mov	r4, r6
   127a8:	mvn	r5, #0
   127ac:	b	12724 <__assert_fail@plt+0xdbc>
   127b0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   127b4:	mov	r8, r0
   127b8:	mov	r4, r1
   127bc:	mov	r7, r2
   127c0:	ldrb	r3, [r1]
   127c4:	cmp	r3, #47	; 0x2f
   127c8:	moveq	r6, #0
   127cc:	beq	127f4 <__assert_fail@plt+0xe8c>
   127d0:	mov	r0, r4
   127d4:	mov	r1, #2
   127d8:	bl	128b8 <__assert_fail@plt+0xf50>
   127dc:	subs	r4, r0, #0
   127e0:	movne	r6, r4
   127e4:	bne	127f4 <__assert_fail@plt+0xe8c>
   127e8:	mov	r0, r4
   127ec:	add	sp, sp, #8
   127f0:	pop	{r4, r5, r6, r7, r8, pc}
   127f4:	bl	117a0 <__errno_location@plt>
   127f8:	cmp	r7, #0
   127fc:	mov	r5, r0
   12800:	bne	1282c <__assert_fail@plt+0xec4>
   12804:	mov	r1, r4
   12808:	mov	r0, r8
   1280c:	bl	123f4 <__assert_fail@plt+0xa8c>
   12810:	ldr	r7, [r5]
   12814:	adds	r4, r0, #1
   12818:	mov	r0, r6
   1281c:	movne	r4, #1
   12820:	bl	130d0 <__assert_fail@plt+0x1768>
   12824:	str	r7, [r5]
   12828:	b	127e8 <__assert_fail@plt+0xe80>
   1282c:	str	r4, [sp]
   12830:	mov	r4, #0
   12834:	mov	r1, #16
   12838:	mov	r0, sp
   1283c:	mov	r2, r4
   12840:	str	r4, [sp, #4]
   12844:	bl	182a8 <lchmod@@Base+0x2600>
   12848:	mov	r7, r0
   1284c:	mov	r0, r7
   12850:	bl	146d8 <__assert_fail@plt+0x2d70>
   12854:	cmp	r0, #0
   12858:	bne	1288c <__assert_fail@plt+0xf24>
   1285c:	ldr	r3, [r5]
   12860:	mov	r0, r7
   12864:	cmp	r3, #0
   12868:	movne	r4, r3
   1286c:	bl	145c0 <__assert_fail@plt+0x2c58>
   12870:	cmp	r0, #0
   12874:	mov	r0, r6
   12878:	ldrne	r4, [r5]
   1287c:	bl	130d0 <__assert_fail@plt+0x1768>
   12880:	clz	r4, r4
   12884:	lsr	r4, r4, #5
   12888:	b	127e8 <__assert_fail@plt+0xe80>
   1288c:	mov	r0, r8
   12890:	ldr	r1, [r7, #24]
   12894:	bl	123f4 <__assert_fail@plt+0xa8c>
   12898:	cmp	r0, #0
   1289c:	ldrlt	r4, [r5]
   128a0:	b	1284c <__assert_fail@plt+0xee4>
   128a4:	mov	r3, r0
   128a8:	ldr	r0, [r3], #8
   128ac:	cmp	r0, r3
   128b0:	bxeq	lr
   128b4:	b	130d0 <__assert_fail@plt+0x1768>
   128b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128bc:	and	fp, r1, #3
   128c0:	sub	sp, sp, #3232	; 0xca0
   128c4:	sub	r3, fp, #1
   128c8:	sub	sp, sp, #4
   128cc:	tst	r3, fp
   128d0:	beq	128f4 <__assert_fail@plt+0xf8c>
   128d4:	bl	117a0 <__errno_location@plt>
   128d8:	mov	r3, #22
   128dc:	str	r3, [r0]
   128e0:	mov	r5, #0
   128e4:	mov	r0, r5
   128e8:	add	sp, sp, #3232	; 0xca0
   128ec:	add	sp, sp, #4
   128f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128f4:	cmp	r0, #0
   128f8:	mov	r5, r0
   128fc:	bne	12910 <__assert_fail@plt+0xfa8>
   12900:	bl	117a0 <__errno_location@plt>
   12904:	mov	r3, #22
   12908:	str	r3, [r0]
   1290c:	b	128e4 <__assert_fail@plt+0xf7c>
   12910:	ldrb	r6, [r0]
   12914:	cmp	r6, #0
   12918:	bne	12928 <__assert_fail@plt+0xfc0>
   1291c:	bl	117a0 <__errno_location@plt>
   12920:	mov	r3, #2
   12924:	b	128dc <__assert_fail@plt+0xf74>
   12928:	add	r3, sp, #1168	; 0x490
   1292c:	add	r4, sp, #144	; 0x90
   12930:	add	r3, r3, #8
   12934:	add	r2, sp, #2208	; 0x8a0
   12938:	cmp	r6, #47	; 0x2f
   1293c:	mov	r7, r1
   12940:	str	r4, [sp, #136]	; 0x88
   12944:	str	r3, [sp, #1168]	; 0x490
   12948:	mov	r3, #1024	; 0x400
   1294c:	subne	r6, r4, #8
   12950:	str	r3, [sp, #140]	; 0x8c
   12954:	str	r3, [sp, #1172]	; 0x494
   12958:	str	r2, [sp, #2200]	; 0x898
   1295c:	str	r3, [sp, #2204]	; 0x89c
   12960:	bne	129a0 <__assert_fail@plt+0x1038>
   12964:	add	r0, r4, #1
   12968:	strb	r6, [sp, #144]	; 0x90
   1296c:	b	129c0 <__assert_fail@plt+0x1058>
   12970:	bl	117a0 <__errno_location@plt>
   12974:	ldr	r3, [r0]
   12978:	cmp	r3, #12
   1297c:	beq	12998 <__assert_fail@plt+0x1030>
   12980:	cmp	r3, #34	; 0x22
   12984:	bne	12e44 <__assert_fail@plt+0x14dc>
   12988:	mov	r0, r6
   1298c:	bl	178c0 <lchmod@@Base+0x1c18>
   12990:	cmp	r0, #0
   12994:	bne	1299c <__assert_fail@plt+0x1034>
   12998:	bl	18268 <lchmod@@Base+0x25c0>
   1299c:	ldr	r4, [sp, #136]	; 0x88
   129a0:	mov	r0, r4
   129a4:	ldr	r1, [sp, #140]	; 0x8c
   129a8:	bl	11740 <getcwd@plt>
   129ac:	cmp	r0, #0
   129b0:	beq	12970 <__assert_fail@plt+0x1008>
   129b4:	mov	r1, #0
   129b8:	mov	r0, r4
   129bc:	bl	1162c <rawmemchr@plt>
   129c0:	and	r3, r7, #4
   129c4:	mov	r7, #0
   129c8:	mov	r6, r4
   129cc:	mov	r9, r7
   129d0:	mov	r4, r0
   129d4:	str	r7, [sp, #12]
   129d8:	str	r3, [sp, #16]
   129dc:	b	12a28 <__assert_fail@plt+0x10c0>
   129e0:	mov	r3, r1
   129e4:	mov	r1, r3
   129e8:	mov	r8, r3
   129ec:	ldrb	r2, [r1], #1
   129f0:	cmp	r2, #47	; 0x2f
   129f4:	beq	129e0 <__assert_fail@plt+0x1078>
   129f8:	ldrb	r1, [r3]
   129fc:	mov	r5, r3
   12a00:	add	r3, r3, #1
   12a04:	cmp	r1, #0
   12a08:	cmpne	r1, #47	; 0x2f
   12a0c:	bne	129f8 <__assert_fail@plt+0x1090>
   12a10:	subs	sl, r5, r8
   12a14:	beq	12e24 <__assert_fail@plt+0x14bc>
   12a18:	cmp	sl, #1
   12a1c:	bne	12a3c <__assert_fail@plt+0x10d4>
   12a20:	cmp	r2, #46	; 0x2e
   12a24:	bne	12a80 <__assert_fail@plt+0x1118>
   12a28:	ldrb	r3, [r5]
   12a2c:	cmp	r3, #0
   12a30:	beq	12e24 <__assert_fail@plt+0x14bc>
   12a34:	mov	r3, r5
   12a38:	b	129e4 <__assert_fail@plt+0x107c>
   12a3c:	cmp	r2, #46	; 0x2e
   12a40:	cmpeq	sl, #2
   12a44:	bne	12a80 <__assert_fail@plt+0x1118>
   12a48:	ldrb	r3, [r8, #1]
   12a4c:	cmp	r3, #46	; 0x2e
   12a50:	bne	12a80 <__assert_fail@plt+0x1118>
   12a54:	add	r3, r6, #1
   12a58:	cmp	r4, r3
   12a5c:	bls	12a28 <__assert_fail@plt+0x10c0>
   12a60:	sub	r3, r4, #1
   12a64:	cmp	r3, r6
   12a68:	mov	r4, r3
   12a6c:	beq	12a28 <__assert_fail@plt+0x10c0>
   12a70:	ldrb	r2, [r3, #-1]!
   12a74:	cmp	r2, #47	; 0x2f
   12a78:	beq	12a28 <__assert_fail@plt+0x10c0>
   12a7c:	b	12a64 <__assert_fail@plt+0x10fc>
   12a80:	ldrb	r3, [r4, #-1]
   12a84:	add	r2, sl, #2
   12a88:	cmp	r3, #47	; 0x2f
   12a8c:	movne	r3, #47	; 0x2f
   12a90:	strbne	r3, [r4], #1
   12a94:	ldr	r3, [sp, #140]	; 0x8c
   12a98:	add	r3, r6, r3
   12a9c:	sub	r3, r3, r4
   12aa0:	cmp	r3, r2
   12aa4:	bcc	12b1c <__assert_fail@plt+0x11b4>
   12aa8:	mov	r0, r4
   12aac:	mov	r2, sl
   12ab0:	mov	r1, r8
   12ab4:	bl	1171c <mempcpy@plt>
   12ab8:	mov	r3, #0
   12abc:	mov	r4, r0
   12ac0:	strb	r3, [r0]
   12ac4:	ldr	r3, [sp, #16]
   12ac8:	cmp	r3, #0
   12acc:	bne	12d28 <__assert_fail@plt+0x13c0>
   12ad0:	ldr	r3, [sp, #2200]	; 0x898
   12ad4:	mov	r0, r6
   12ad8:	str	r3, [sp, #8]
   12adc:	ldr	r1, [sp, #8]
   12ae0:	ldr	r3, [sp, #2204]	; 0x89c
   12ae4:	sub	r3, r3, #1
   12ae8:	mov	r2, r3
   12aec:	str	r3, [sp, #20]
   12af0:	bl	1165c <readlink@plt>
   12af4:	ldr	r3, [sp, #20]
   12af8:	mov	sl, r0
   12afc:	cmp	r3, r0
   12b00:	bgt	12b44 <__assert_fail@plt+0x11dc>
   12b04:	add	r0, sp, #2192	; 0x890
   12b08:	add	r0, r0, #8
   12b0c:	bl	178c0 <lchmod@@Base+0x1c18>
   12b10:	cmp	r0, #0
   12b14:	bne	12ad0 <__assert_fail@plt+0x1168>
   12b18:	b	12998 <__assert_fail@plt+0x1030>
   12b1c:	add	r0, sp, #136	; 0x88
   12b20:	str	r2, [sp, #8]
   12b24:	sub	r4, r4, r6
   12b28:	bl	17930 <lchmod@@Base+0x1c88>
   12b2c:	cmp	r0, #0
   12b30:	ldr	r2, [sp, #8]
   12b34:	beq	12998 <__assert_fail@plt+0x1030>
   12b38:	ldr	r6, [sp, #136]	; 0x88
   12b3c:	add	r4, r6, r4
   12b40:	b	12a94 <__assert_fail@plt+0x112c>
   12b44:	cmp	r0, #0
   12b48:	blt	12d28 <__assert_fail@plt+0x13c0>
   12b4c:	ldr	r3, [sp, #12]
   12b50:	cmp	r3, #19
   12b54:	addle	r3, r3, #1
   12b58:	strle	r3, [sp, #12]
   12b5c:	ble	12c50 <__assert_fail@plt+0x12e8>
   12b60:	ldrb	r3, [r8]
   12b64:	cmp	r3, #0
   12b68:	beq	12c50 <__assert_fail@plt+0x12e8>
   12b6c:	sub	r3, r8, r5
   12b70:	mov	r2, #0
   12b74:	add	r1, sp, #32
   12b78:	strb	r2, [r4, r3]
   12b7c:	ldrb	r0, [r6]
   12b80:	str	r3, [sp, #20]
   12b84:	ldr	r2, [pc, #736]	; 12e6c <__assert_fail@plt+0x1504>
   12b88:	cmp	r0, #0
   12b8c:	movne	r0, r6
   12b90:	moveq	r0, r2
   12b94:	bl	19124 <lchmod@@Base+0x347c>
   12b98:	cmp	r0, #0
   12b9c:	bne	12c04 <__assert_fail@plt+0x129c>
   12ba0:	ldrb	r2, [r8]
   12ba4:	cmp	r7, #0
   12ba8:	ldr	r3, [sp, #20]
   12bac:	strb	r2, [r4, r3]
   12bb0:	bne	12bd8 <__assert_fail@plt+0x1270>
   12bb4:	ldr	r3, [pc, #692]	; 12e70 <__assert_fail@plt+0x1508>
   12bb8:	mov	r1, r7
   12bbc:	mov	r0, #7
   12bc0:	ldr	r2, [pc, #684]	; 12e74 <__assert_fail@plt+0x150c>
   12bc4:	str	r3, [sp]
   12bc8:	ldr	r3, [pc, #680]	; 12e78 <__assert_fail@plt+0x1510>
   12bcc:	bl	15558 <__assert_fail@plt+0x3bf0>
   12bd0:	subs	r7, r0, #0
   12bd4:	beq	12998 <__assert_fail@plt+0x1030>
   12bd8:	add	r2, sp, #32
   12bdc:	mov	r1, r8
   12be0:	mov	r0, r7
   12be4:	bl	1308c <__assert_fail@plt+0x1724>
   12be8:	cmp	r0, #0
   12bec:	beq	12c40 <__assert_fail@plt+0x12d8>
   12bf0:	cmp	fp, #2
   12bf4:	beq	12a28 <__assert_fail@plt+0x10c0>
   12bf8:	bl	117a0 <__errno_location@plt>
   12bfc:	mov	r3, #40	; 0x28
   12c00:	str	r3, [r0]
   12c04:	mov	r8, #1
   12c08:	cmp	r7, #0
   12c0c:	beq	12c18 <__assert_fail@plt+0x12b0>
   12c10:	mov	r0, r7
   12c14:	bl	156c0 <__assert_fail@plt+0x3d58>
   12c18:	add	r0, sp, #1168	; 0x490
   12c1c:	bl	128a4 <__assert_fail@plt+0xf3c>
   12c20:	add	r0, sp, #2192	; 0x890
   12c24:	add	r0, r0, #8
   12c28:	bl	128a4 <__assert_fail@plt+0xf3c>
   12c2c:	cmp	r8, #0
   12c30:	beq	12e50 <__assert_fail@plt+0x14e8>
   12c34:	add	r0, sp, #136	; 0x88
   12c38:	bl	128a4 <__assert_fail@plt+0xf3c>
   12c3c:	b	128e0 <__assert_fail@plt+0xf78>
   12c40:	add	r2, sp, #32
   12c44:	mov	r1, r8
   12c48:	mov	r0, r7
   12c4c:	bl	13024 <__assert_fail@plt+0x16bc>
   12c50:	ldr	r2, [sp, #8]
   12c54:	mov	r3, #0
   12c58:	mov	r0, r5
   12c5c:	cmp	r9, r3
   12c60:	streq	r9, [sp, #20]
   12c64:	strb	r3, [r2, sl]
   12c68:	ldr	r8, [sp, #1168]	; 0x490
   12c6c:	subne	r3, r5, r8
   12c70:	strne	r3, [sp, #20]
   12c74:	bl	11764 <strlen@plt>
   12c78:	mov	r2, r0
   12c7c:	add	r1, sl, r0
   12c80:	ldr	r0, [sp, #1172]	; 0x494
   12c84:	cmp	r0, r1
   12c88:	bls	12d00 <__assert_fail@plt+0x1398>
   12c8c:	cmp	r9, #0
   12c90:	add	r2, r2, #1
   12c94:	ldrne	r3, [sp, #20]
   12c98:	add	r0, r8, sl
   12c9c:	addne	r5, r8, r3
   12ca0:	mov	r1, r5
   12ca4:	bl	11584 <memmove@plt>
   12ca8:	mov	r2, sl
   12cac:	mov	r0, r8
   12cb0:	ldr	r1, [sp, #8]
   12cb4:	bl	115b4 <memcpy@plt>
   12cb8:	ldr	r2, [sp, #8]
   12cbc:	add	r3, r6, #1
   12cc0:	mov	r5, r0
   12cc4:	ldrb	r2, [r2]
   12cc8:	cmp	r2, #47	; 0x2f
   12ccc:	moveq	r4, r3
   12cd0:	strbeq	r2, [r6]
   12cd4:	beq	12cf8 <__assert_fail@plt+0x1390>
   12cd8:	cmp	r4, r3
   12cdc:	bls	12cf8 <__assert_fail@plt+0x1390>
   12ce0:	sub	r4, r4, #1
   12ce4:	cmp	r6, r4
   12ce8:	beq	12cf8 <__assert_fail@plt+0x1390>
   12cec:	ldrb	r3, [r4, #-1]
   12cf0:	cmp	r3, #47	; 0x2f
   12cf4:	bne	12ce0 <__assert_fail@plt+0x1378>
   12cf8:	mov	r9, #1
   12cfc:	b	12a28 <__assert_fail@plt+0x10c0>
   12d00:	add	r0, sp, #1168	; 0x490
   12d04:	str	r2, [sp, #24]
   12d08:	str	r1, [sp, #28]
   12d0c:	bl	17930 <lchmod@@Base+0x1c88>
   12d10:	cmp	r0, #0
   12d14:	beq	12998 <__assert_fail@plt+0x1030>
   12d18:	ldr	r2, [sp, #24]
   12d1c:	ldr	r1, [sp, #28]
   12d20:	ldr	r8, [sp, #1168]	; 0x490
   12d24:	b	12c80 <__assert_fail@plt+0x1318>
   12d28:	cmp	fp, #2
   12d2c:	movne	r3, r5
   12d30:	beq	12a28 <__assert_fail@plt+0x10c0>
   12d34:	ldrb	r2, [r3]
   12d38:	cmp	r2, #47	; 0x2f
   12d3c:	beq	12d9c <__assert_fail@plt+0x1434>
   12d40:	ldr	r3, [sp, #16]
   12d44:	cmp	r3, #0
   12d48:	bne	12e0c <__assert_fail@plt+0x14a4>
   12d4c:	bl	117a0 <__errno_location@plt>
   12d50:	ldr	r8, [r0]
   12d54:	subs	r8, r8, #22
   12d58:	movne	r8, #1
   12d5c:	cmp	r8, #0
   12d60:	beq	12a28 <__assert_fail@plt+0x10c0>
   12d64:	cmp	fp, #1
   12d68:	bne	12c08 <__assert_fail@plt+0x12a0>
   12d6c:	bl	117a0 <__errno_location@plt>
   12d70:	ldr	r3, [r0]
   12d74:	cmp	r3, #2
   12d78:	bne	12c08 <__assert_fail@plt+0x12a0>
   12d7c:	ldr	r1, [pc, #248]	; 12e7c <__assert_fail@plt+0x1514>
   12d80:	mov	r0, r5
   12d84:	bl	1195c <strspn@plt>
   12d88:	ldrb	r3, [r5, r0]
   12d8c:	cmp	r3, #0
   12d90:	beq	12a28 <__assert_fail@plt+0x10c0>
   12d94:	b	12c08 <__assert_fail@plt+0x12a0>
   12d98:	mov	r3, r2
   12d9c:	ldrb	r1, [r3, #1]
   12da0:	add	r2, r3, #1
   12da4:	cmp	r1, #47	; 0x2f
   12da8:	beq	12d98 <__assert_fail@plt+0x1430>
   12dac:	cmp	r1, #0
   12db0:	add	r3, r3, #2
   12db4:	beq	12de4 <__assert_fail@plt+0x147c>
   12db8:	cmp	r1, #46	; 0x2e
   12dbc:	bne	12d40 <__assert_fail@plt+0x13d8>
   12dc0:	ldrb	r1, [r2, #1]
   12dc4:	cmp	r1, #0
   12dc8:	beq	12de4 <__assert_fail@plt+0x147c>
   12dcc:	cmp	r1, #46	; 0x2e
   12dd0:	bne	12d34 <__assert_fail@plt+0x13cc>
   12dd4:	ldrb	r2, [r2, #2]
   12dd8:	cmp	r2, #47	; 0x2f
   12ddc:	cmpne	r2, #0
   12de0:	bne	12d34 <__assert_fail@plt+0x13cc>
   12de4:	ldr	r1, [pc, #148]	; 12e80 <__assert_fail@plt+0x1518>
   12de8:	mov	r0, r4
   12dec:	bl	11680 <strcpy@plt>
   12df0:	mov	r3, #512	; 0x200
   12df4:	mov	r2, #0
   12df8:	mov	r1, r6
   12dfc:	mvn	r0, #99	; 0x63
   12e00:	bl	1159c <faccessat@plt>
   12e04:	adds	r8, r0, #0
   12e08:	b	12d58 <__assert_fail@plt+0x13f0>
   12e0c:	ldrb	r2, [r5]
   12e10:	cmp	r2, #0
   12e14:	movne	r8, #0
   12e18:	bne	12d5c <__assert_fail@plt+0x13f4>
   12e1c:	mov	r3, #512	; 0x200
   12e20:	b	12df8 <__assert_fail@plt+0x1490>
   12e24:	add	r3, r6, #1
   12e28:	cmp	r4, r3
   12e2c:	bls	12e3c <__assert_fail@plt+0x14d4>
   12e30:	ldrb	r3, [r4, #-1]
   12e34:	cmp	r3, #47	; 0x2f
   12e38:	subeq	r4, r4, #1
   12e3c:	mov	r8, #0
   12e40:	b	12c08 <__assert_fail@plt+0x12a0>
   12e44:	mov	r6, r4
   12e48:	mov	r8, #1
   12e4c:	b	12c18 <__assert_fail@plt+0x12b0>
   12e50:	add	r0, sp, #136	; 0x88
   12e54:	strb	r8, [r4], #1
   12e58:	sub	r1, r4, r6
   12e5c:	bl	17870 <lchmod@@Base+0x1bc8>
   12e60:	subs	r5, r0, #0
   12e64:	bne	128e4 <__assert_fail@plt+0xf7c>
   12e68:	b	12998 <__assert_fail@plt+0x1030>
   12e6c:	andeq	r9, r1, r3, lsl #21
   12e70:	andeq	r5, r1, ip, asr #23
   12e74:	andeq	r5, r1, ip, asr #22
   12e78:	andeq	r5, r1, r0, lsl #23
   12e7c:	strdeq	r9, [r1], -sl
   12e80:	andeq	r9, r1, r4, asr sl
   12e84:	ldr	r3, [pc, #4]	; 12e90 <__assert_fail@plt+0x1528>
   12e88:	str	r0, [r3]
   12e8c:	bx	lr
   12e90:	andeq	fp, r2, r0, lsl #4
   12e94:	ldr	r3, [pc, #4]	; 12ea0 <__assert_fail@plt+0x1538>
   12e98:	strb	r0, [r3, #4]
   12e9c:	bx	lr
   12ea0:	andeq	fp, r2, r0, lsl #4
   12ea4:	ldr	r3, [pc, #176]	; 12f5c <__assert_fail@plt+0x15f4>
   12ea8:	push	{r0, r1, r4, r5, r6, lr}
   12eac:	ldr	r0, [r3]
   12eb0:	bl	18898 <lchmod@@Base+0x2bf0>
   12eb4:	cmp	r0, #0
   12eb8:	beq	12f40 <__assert_fail@plt+0x15d8>
   12ebc:	ldr	r4, [pc, #156]	; 12f60 <__assert_fail@plt+0x15f8>
   12ec0:	bl	117a0 <__errno_location@plt>
   12ec4:	mov	r5, r0
   12ec8:	ldrb	r6, [r4, #4]
   12ecc:	cmp	r6, #0
   12ed0:	beq	12ee0 <__assert_fail@plt+0x1578>
   12ed4:	ldr	r3, [r0]
   12ed8:	cmp	r3, #32
   12edc:	beq	12f40 <__assert_fail@plt+0x15d8>
   12ee0:	mov	r2, #5
   12ee4:	ldr	r1, [pc, #120]	; 12f64 <__assert_fail@plt+0x15fc>
   12ee8:	mov	r0, #0
   12eec:	bl	115f0 <dcgettext@plt>
   12ef0:	mov	r6, r0
   12ef4:	ldr	r0, [r4]
   12ef8:	cmp	r0, #0
   12efc:	beq	12f2c <__assert_fail@plt+0x15c4>
   12f00:	ldr	r4, [r5]
   12f04:	bl	17714 <lchmod@@Base+0x1a6c>
   12f08:	mov	r3, r0
   12f0c:	ldr	r2, [pc, #84]	; 12f68 <__assert_fail@plt+0x1600>
   12f10:	mov	r0, #0
   12f14:	str	r6, [sp]
   12f18:	mov	r1, r4
   12f1c:	bl	116bc <error@plt>
   12f20:	ldr	r3, [pc, #68]	; 12f6c <__assert_fail@plt+0x1604>
   12f24:	ldr	r0, [r3]
   12f28:	bl	115a8 <_exit@plt>
   12f2c:	mov	r3, r6
   12f30:	ldr	r2, [pc, #56]	; 12f70 <__assert_fail@plt+0x1608>
   12f34:	ldr	r1, [r5]
   12f38:	bl	116bc <error@plt>
   12f3c:	b	12f20 <__assert_fail@plt+0x15b8>
   12f40:	ldr	r3, [pc, #44]	; 12f74 <__assert_fail@plt+0x160c>
   12f44:	ldr	r0, [r3]
   12f48:	bl	18898 <lchmod@@Base+0x2bf0>
   12f4c:	cmp	r0, #0
   12f50:	bne	12f20 <__assert_fail@plt+0x15b8>
   12f54:	add	sp, sp, #8
   12f58:	pop	{r4, r5, r6, pc}
   12f5c:	strdeq	fp, [r2], -r4
   12f60:	andeq	fp, r2, r0, lsl #4
   12f64:	andeq	r9, r1, r6, asr sl
   12f68:	andeq	r9, r1, r2, ror #20
   12f6c:	muleq	r2, r8, r1
   12f70:	andeq	r9, r1, r6, ror #20
   12f74:	strdeq	fp, [r2], -r0
   12f78:	push	{r4, lr}
   12f7c:	bl	12fcc <__assert_fail@plt+0x1664>
   12f80:	cmp	r0, #0
   12f84:	popne	{r4, pc}
   12f88:	bl	18268 <lchmod@@Base+0x25c0>
   12f8c:	push	{r4, r5, r6, lr}
   12f90:	mov	r5, r0
   12f94:	ldrb	r4, [r0]
   12f98:	bl	18814 <lchmod@@Base+0x2b6c>
   12f9c:	sub	r0, r0, r5
   12fa0:	sub	r4, r4, #47	; 0x2f
   12fa4:	clz	r4, r4
   12fa8:	lsr	r4, r4, #5
   12fac:	cmp	r0, r4
   12fb0:	popls	{r4, r5, r6, pc}
   12fb4:	sub	r3, r0, #1
   12fb8:	ldrb	r2, [r5, r3]
   12fbc:	cmp	r2, #47	; 0x2f
   12fc0:	popne	{r4, r5, r6, pc}
   12fc4:	mov	r0, r3
   12fc8:	b	12fac <__assert_fail@plt+0x1644>
   12fcc:	push	{r4, r5, r6, lr}
   12fd0:	mov	r6, r0
   12fd4:	bl	12f8c <__assert_fail@plt+0x1624>
   12fd8:	add	r3, r0, #1
   12fdc:	mov	r4, r0
   12fe0:	cmp	r0, #0
   12fe4:	movne	r0, r3
   12fe8:	addeq	r0, r3, #1
   12fec:	bl	187a4 <lchmod@@Base+0x2afc>
   12ff0:	subs	r5, r0, #0
   12ff4:	beq	1301c <__assert_fail@plt+0x16b4>
   12ff8:	mov	r2, r4
   12ffc:	mov	r1, r6
   13000:	bl	115b4 <memcpy@plt>
   13004:	cmp	r4, #0
   13008:	moveq	r3, #46	; 0x2e
   1300c:	moveq	r4, #1
   13010:	strbeq	r3, [r5]
   13014:	mov	r3, #0
   13018:	strb	r3, [r5, r4]
   1301c:	mov	r0, r5
   13020:	pop	{r4, r5, r6, pc}
   13024:	push	{r4, r5, r6, r7, r8, lr}
   13028:	subs	r6, r0, #0
   1302c:	popeq	{r4, r5, r6, r7, r8, pc}
   13030:	mov	r0, #24
   13034:	mov	r5, r2
   13038:	mov	r7, r1
   1303c:	bl	17fb0 <lchmod@@Base+0x2308>
   13040:	mov	r4, r0
   13044:	mov	r0, r7
   13048:	bl	1824c <lchmod@@Base+0x25a4>
   1304c:	ldrd	r2, [r5, #96]	; 0x60
   13050:	mov	r1, r4
   13054:	str	r0, [r4]
   13058:	mov	r0, r6
   1305c:	strd	r2, [r4, #8]
   13060:	ldrd	r2, [r5]
   13064:	strd	r2, [r4, #16]
   13068:	bl	15a20 <__assert_fail@plt+0x40b8>
   1306c:	cmp	r0, #0
   13070:	bne	13078 <__assert_fail@plt+0x1710>
   13074:	bl	18268 <lchmod@@Base+0x25c0>
   13078:	cmp	r4, r0
   1307c:	popeq	{r4, r5, r6, r7, r8, pc}
   13080:	mov	r0, r4
   13084:	pop	{r4, r5, r6, r7, r8, lr}
   13088:	b	15bcc <__assert_fail@plt+0x4264>
   1308c:	subs	r3, r0, #0
   13090:	beq	130c8 <__assert_fail@plt+0x1760>
   13094:	push	{r4, r5, lr}
   13098:	sub	sp, sp, #28
   1309c:	ldrd	r4, [r2, #96]	; 0x60
   130a0:	str	r1, [sp]
   130a4:	mov	r1, sp
   130a8:	ldrd	r2, [r2]
   130ac:	strd	r4, [sp, #8]
   130b0:	strd	r2, [sp, #16]
   130b4:	bl	15348 <__assert_fail@plt+0x39e0>
   130b8:	adds	r0, r0, #0
   130bc:	movne	r0, #1
   130c0:	add	sp, sp, #28
   130c4:	pop	{r4, r5, pc}
   130c8:	mov	r0, r3
   130cc:	bx	lr
   130d0:	push	{r0, r1, r2, r4, r5, lr}
   130d4:	mov	r5, r0
   130d8:	bl	117a0 <__errno_location@plt>
   130dc:	mov	r4, r0
   130e0:	mov	r0, r5
   130e4:	ldr	r3, [r4]
   130e8:	str	r3, [sp]
   130ec:	str	r3, [sp, #4]
   130f0:	mov	r3, #0
   130f4:	str	r3, [r4]
   130f8:	bl	11590 <free@plt>
   130fc:	ldr	r3, [r4]
   13100:	add	r2, sp, #8
   13104:	clz	r3, r3
   13108:	lsr	r3, r3, #5
   1310c:	add	r3, r2, r3, lsl #2
   13110:	ldr	r3, [r3, #-8]
   13114:	str	r3, [r4]
   13118:	add	sp, sp, #12
   1311c:	pop	{r4, r5, pc}
   13120:	push	{r4, r5, lr}
   13124:	ldrd	r2, [r1, #8]
   13128:	ldrd	r4, [r0, #8]
   1312c:	cmp	r5, r3
   13130:	cmpeq	r4, r2
   13134:	bne	13154 <__assert_fail@plt+0x17ec>
   13138:	ldrd	r4, [r0]
   1313c:	ldrd	r2, [r1]
   13140:	cmp	r5, r3
   13144:	cmpeq	r4, r2
   13148:	moveq	r0, #1
   1314c:	movne	r0, #0
   13150:	pop	{r4, r5, pc}
   13154:	mov	r0, #0
   13158:	pop	{r4, r5, pc}
   1315c:	push	{r4, lr}
   13160:	mov	r2, r1
   13164:	mov	r3, #0
   13168:	ldrd	r0, [r0, #8]
   1316c:	bl	18f34 <lchmod@@Base+0x328c>
   13170:	mov	r0, r2
   13174:	pop	{r4, pc}
   13178:	push	{r4, lr}
   1317c:	mov	r2, r1
   13180:	mov	r3, #0
   13184:	ldrd	r0, [r0]
   13188:	bl	18f34 <lchmod@@Base+0x328c>
   1318c:	mov	r0, r2
   13190:	pop	{r4, pc}
   13194:	push	{r4, r5, lr}
   13198:	ldrd	r2, [r1]
   1319c:	ldrd	r4, [r0]
   131a0:	cmp	r5, r3
   131a4:	cmpeq	r4, r2
   131a8:	moveq	r0, #1
   131ac:	movne	r0, #0
   131b0:	pop	{r4, r5, pc}
   131b4:	ldr	r3, [r0]
   131b8:	push	{r4, r5, lr}
   131bc:	ldrd	r4, [r3, #160]	; 0xa0
   131c0:	ldr	r3, [r1]
   131c4:	ldrd	r2, [r3, #160]	; 0xa0
   131c8:	cmp	r5, r3
   131cc:	cmpeq	r4, r2
   131d0:	movhi	r0, #1
   131d4:	movls	r0, #0
   131d8:	movcc	r3, #1
   131dc:	movcs	r3, #0
   131e0:	sub	r0, r0, r3
   131e4:	pop	{r4, r5, pc}
   131e8:	push	{r4, r5, r6, lr}
   131ec:	mov	r4, r1
   131f0:	add	r5, r1, #64	; 0x40
   131f4:	ldr	r1, [r1, #48]	; 0x30
   131f8:	ldr	r3, [r0, #48]	; 0x30
   131fc:	cmp	r1, #0
   13200:	bne	1320c <__assert_fail@plt+0x18a4>
   13204:	tst	r3, #1
   13208:	bne	13218 <__assert_fail@plt+0x18b0>
   1320c:	ubfx	r3, r3, #1, #1
   13210:	orrs	r3, r2, r3
   13214:	beq	13280 <__assert_fail@plt+0x1918>
   13218:	mov	r1, r5
   1321c:	ldr	r0, [r4, #24]
   13220:	bl	19124 <lchmod@@Base+0x347c>
   13224:	cmp	r0, #0
   13228:	beq	132a8 <__assert_fail@plt+0x1940>
   1322c:	bl	117a0 <__errno_location@plt>
   13230:	ldr	r3, [r0]
   13234:	mov	r6, r0
   13238:	cmp	r3, #2
   1323c:	bne	13260 <__assert_fail@plt+0x18f8>
   13240:	mov	r1, r5
   13244:	ldr	r0, [r4, #24]
   13248:	bl	19144 <lchmod@@Base+0x349c>
   1324c:	cmp	r0, #0
   13250:	bne	13260 <__assert_fail@plt+0x18f8>
   13254:	str	r0, [r6]
   13258:	mov	r0, #13
   1325c:	pop	{r4, r5, r6, pc}
   13260:	ldr	r3, [r6]
   13264:	mov	r2, #104	; 0x68
   13268:	mov	r1, #0
   1326c:	str	r3, [r4, #32]
   13270:	mov	r0, r5
   13274:	bl	117c4 <memset@plt>
   13278:	mov	r0, #10
   1327c:	pop	{r4, r5, r6, pc}
   13280:	mov	r3, #256	; 0x100
   13284:	mov	r2, r5
   13288:	ldr	r1, [r4, #24]
   1328c:	ldr	r0, [r0, #32]
   13290:	bl	19154 <lchmod@@Base+0x34ac>
   13294:	cmp	r0, #0
   13298:	beq	132a8 <__assert_fail@plt+0x1940>
   1329c:	bl	117a0 <__errno_location@plt>
   132a0:	ldr	r3, [r0]
   132a4:	b	13264 <__assert_fail@plt+0x18fc>
   132a8:	ldr	r3, [r4, #80]	; 0x50
   132ac:	and	r3, r3, #61440	; 0xf000
   132b0:	cmp	r3, #16384	; 0x4000
   132b4:	bne	132f8 <__assert_fail@plt+0x1990>
   132b8:	ldrb	r3, [r4, #168]	; 0xa8
   132bc:	cmp	r3, #46	; 0x2e
   132c0:	bne	13310 <__assert_fail@plt+0x19a8>
   132c4:	ldrb	r3, [r4, #169]	; 0xa9
   132c8:	cmp	r3, #0
   132cc:	beq	132e4 <__assert_fail@plt+0x197c>
   132d0:	ldr	r3, [r4, #168]	; 0xa8
   132d4:	bic	r3, r3, #-16777216	; 0xff000000
   132d8:	bic	r3, r3, #255	; 0xff
   132dc:	cmp	r3, #11776	; 0x2e00
   132e0:	bne	13310 <__assert_fail@plt+0x19a8>
   132e4:	ldr	r3, [r4, #48]	; 0x30
   132e8:	cmp	r3, #0
   132ec:	moveq	r0, #1
   132f0:	movne	r0, #5
   132f4:	pop	{r4, r5, r6, pc}
   132f8:	cmp	r3, #40960	; 0xa000
   132fc:	beq	13318 <__assert_fail@plt+0x19b0>
   13300:	cmp	r3, #32768	; 0x8000
   13304:	movne	r0, #3
   13308:	moveq	r0, #8
   1330c:	pop	{r4, r5, r6, pc}
   13310:	mov	r0, #1
   13314:	pop	{r4, r5, r6, pc}
   13318:	mov	r0, #12
   1331c:	pop	{r4, r5, r6, pc}
   13320:	ldr	r3, [r0, #40]	; 0x28
   13324:	push	{r4, r5, r6, r7, r8, lr}
   13328:	mov	r4, r0
   1332c:	mov	r6, r1
   13330:	mov	r5, r2
   13334:	ldr	r7, [r0, #44]	; 0x2c
   13338:	cmp	r3, r2
   1333c:	bcs	13384 <__assert_fail@plt+0x1a1c>
   13340:	add	r1, r2, #40	; 0x28
   13344:	ldr	r0, [r0, #8]
   13348:	cmn	r1, #-1073741823	; 0xc0000001
   1334c:	str	r1, [r4, #40]	; 0x28
   13350:	bls	13370 <__assert_fail@plt+0x1a08>
   13354:	ldr	r0, [r4, #8]
   13358:	bl	130d0 <__assert_fail@plt+0x1768>
   1335c:	mov	r3, #0
   13360:	str	r3, [r4, #8]
   13364:	str	r3, [r4, #40]	; 0x28
   13368:	mov	r0, r6
   1336c:	pop	{r4, r5, r6, r7, r8, pc}
   13370:	lsl	r1, r1, #2
   13374:	bl	187d0 <lchmod@@Base+0x2b28>
   13378:	cmp	r0, #0
   1337c:	beq	13354 <__assert_fail@plt+0x19ec>
   13380:	str	r0, [r4, #8]
   13384:	ldr	r0, [r4, #8]
   13388:	mov	r2, r0
   1338c:	cmp	r6, #0
   13390:	bne	133c0 <__assert_fail@plt+0x1a58>
   13394:	mov	r3, r7
   13398:	mov	r2, #4
   1339c:	mov	r1, r5
   133a0:	bl	11890 <qsort@plt>
   133a4:	ldr	r3, [r4, #8]
   133a8:	ldr	r6, [r3]
   133ac:	subs	r5, r5, #1
   133b0:	ldr	r2, [r3]
   133b4:	bne	133cc <__assert_fail@plt+0x1a64>
   133b8:	str	r5, [r2, #8]
   133bc:	b	13368 <__assert_fail@plt+0x1a00>
   133c0:	str	r6, [r2], #4
   133c4:	ldr	r6, [r6, #8]
   133c8:	b	1338c <__assert_fail@plt+0x1a24>
   133cc:	ldr	r1, [r3, #4]!
   133d0:	str	r1, [r2, #8]
   133d4:	b	133ac <__assert_fail@plt+0x1a44>
   133d8:	push	{r4, r5, r6, r7, r8, lr}
   133dc:	mov	r6, r0
   133e0:	add	r0, r2, #176	; 0xb0
   133e4:	bic	r0, r0, #7
   133e8:	mov	r7, r1
   133ec:	mov	r5, r2
   133f0:	bl	187a4 <lchmod@@Base+0x2afc>
   133f4:	subs	r4, r0, #0
   133f8:	beq	13444 <__assert_fail@plt+0x1adc>
   133fc:	mov	r2, r5
   13400:	mov	r1, r7
   13404:	add	r0, r4, #168	; 0xa8
   13408:	bl	115b4 <memcpy@plt>
   1340c:	mov	r3, #0
   13410:	add	r2, r4, r5
   13414:	strb	r3, [r2, #168]	; 0xa8
   13418:	ldr	r2, [r6, #24]
   1341c:	str	r3, [r4, #12]
   13420:	str	r3, [r4, #16]
   13424:	str	r3, [r4, #20]
   13428:	str	r2, [r4, #28]
   1342c:	mov	r2, #3
   13430:	str	r3, [r4, #32]
   13434:	str	r6, [r4, #44]	; 0x2c
   13438:	str	r5, [r4, #52]	; 0x34
   1343c:	strh	r3, [r4, #58]	; 0x3a
   13440:	strh	r2, [r4, #60]	; 0x3c
   13444:	mov	r0, r4
   13448:	pop	{r4, r5, r6, r7, r8, pc}
   1344c:	mov	r3, r0
   13450:	mov	r0, r1
   13454:	ldr	ip, [r3, #48]	; 0x30
   13458:	lsl	r2, ip, #11
   1345c:	tst	ip, #512	; 0x200
   13460:	and	r2, r2, #32768	; 0x8000
   13464:	orr	r2, r2, #540672	; 0x84000
   13468:	orr	r2, r2, #2304	; 0x900
   1346c:	beq	13478 <__assert_fail@plt+0x1b10>
   13470:	ldr	r0, [r3, #32]
   13474:	b	161e0 <lchmod@@Base+0x538>
   13478:	mov	r1, r2
   1347c:	b	18c2c <lchmod@@Base+0x2f84>
   13480:	push	{r4, r5, r6, lr}
   13484:	mov	r4, r0
   13488:	cmp	r4, #0
   1348c:	popeq	{r4, r5, r6, pc}
   13490:	ldr	r5, [r4, #8]
   13494:	ldr	r0, [r4, #12]
   13498:	cmp	r0, #0
   1349c:	beq	134a4 <__assert_fail@plt+0x1b3c>
   134a0:	bl	11950 <closedir@plt>
   134a4:	mov	r0, r4
   134a8:	mov	r4, r5
   134ac:	bl	130d0 <__assert_fail@plt+0x1768>
   134b0:	b	13488 <__assert_fail@plt+0x1b20>
   134b4:	push	{r4, lr}
   134b8:	mov	r4, r0
   134bc:	mov	r0, r4
   134c0:	bl	15c14 <__assert_fail@plt+0x42ac>
   134c4:	cmp	r0, #0
   134c8:	popne	{r4, pc}
   134cc:	mov	r0, r4
   134d0:	bl	15c60 <__assert_fail@plt+0x42f8>
   134d4:	cmp	r0, #0
   134d8:	blt	134bc <__assert_fail@plt+0x1b54>
   134dc:	bl	11920 <close@plt>
   134e0:	b	134bc <__assert_fail@plt+0x1b54>
   134e4:	push	{r4, r5, r6, r7, lr}
   134e8:	sub	sp, sp, #100	; 0x64
   134ec:	ldr	r5, [r0, #44]	; 0x2c
   134f0:	ldr	r3, [r5, #48]	; 0x30
   134f4:	tst	r3, #512	; 0x200
   134f8:	bne	13508 <__assert_fail@plt+0x1ba0>
   134fc:	mov	r0, #0
   13500:	add	sp, sp, #100	; 0x64
   13504:	pop	{r4, r5, r6, r7, pc}
   13508:	ldr	r4, [r5, #52]	; 0x34
   1350c:	mov	r7, r1
   13510:	mov	r6, r0
   13514:	cmp	r4, #0
   13518:	bne	13548 <__assert_fail@plt+0x1be0>
   1351c:	ldr	r3, [pc, #184]	; 135dc <__assert_fail@plt+0x1c74>
   13520:	mov	r1, r4
   13524:	mov	r0, #13
   13528:	ldr	r2, [pc, #176]	; 135e0 <__assert_fail@plt+0x1c78>
   1352c:	str	r3, [sp]
   13530:	ldr	r3, [pc, #172]	; 135e4 <__assert_fail@plt+0x1c7c>
   13534:	bl	15558 <__assert_fail@plt+0x3bf0>
   13538:	cmp	r0, #0
   1353c:	mov	r4, r0
   13540:	str	r0, [r5, #52]	; 0x34
   13544:	beq	13568 <__assert_fail@plt+0x1c00>
   13548:	ldrd	r2, [r6, #64]	; 0x40
   1354c:	add	r1, sp, #8
   13550:	mov	r0, r4
   13554:	strd	r2, [sp, #8]
   13558:	bl	15348 <__assert_fail@plt+0x39e0>
   1355c:	cmp	r0, #0
   13560:	ldrne	r0, [r0, #8]
   13564:	bne	13500 <__assert_fail@plt+0x1b98>
   13568:	cmp	r7, #0
   1356c:	blt	134fc <__assert_fail@plt+0x1b94>
   13570:	add	r1, sp, #8
   13574:	mov	r0, r7
   13578:	bl	11500 <fstatfs64@plt>
   1357c:	cmp	r0, #0
   13580:	bne	134fc <__assert_fail@plt+0x1b94>
   13584:	cmp	r4, #0
   13588:	beq	135d4 <__assert_fail@plt+0x1c6c>
   1358c:	mov	r0, #16
   13590:	bl	187a4 <lchmod@@Base+0x2afc>
   13594:	subs	r5, r0, #0
   13598:	beq	135d4 <__assert_fail@plt+0x1c6c>
   1359c:	ldrd	r2, [r6, #64]	; 0x40
   135a0:	mov	r1, r5
   135a4:	mov	r0, r4
   135a8:	strd	r2, [r5]
   135ac:	ldr	r3, [sp, #8]
   135b0:	str	r3, [r5, #8]
   135b4:	bl	15a20 <__assert_fail@plt+0x40b8>
   135b8:	cmp	r0, #0
   135bc:	beq	135cc <__assert_fail@plt+0x1c64>
   135c0:	cmp	r5, r0
   135c4:	beq	135d4 <__assert_fail@plt+0x1c6c>
   135c8:	bl	11914 <abort@plt>
   135cc:	mov	r0, r5
   135d0:	bl	130d0 <__assert_fail@plt+0x1768>
   135d4:	ldr	r0, [sp, #8]
   135d8:	b	13500 <__assert_fail@plt+0x1b98>
   135dc:	ldrdeq	r3, [r1], -r0
   135e0:	andeq	r3, r1, r8, ror r1
   135e4:	muleq	r1, r4, r1
   135e8:	push	{r4, r5, r6, lr}
   135ec:	mov	r5, r1
   135f0:	ldr	r1, [r0, #32]
   135f4:	sub	r3, r1, r5
   135f8:	cmn	r1, #100	; 0x64
   135fc:	clz	r3, r3
   13600:	lsr	r3, r3, #5
   13604:	moveq	r3, #0
   13608:	cmp	r3, #0
   1360c:	beq	13614 <__assert_fail@plt+0x1cac>
   13610:	bl	11914 <abort@plt>
   13614:	cmp	r2, #0
   13618:	mov	r4, r0
   1361c:	beq	1363c <__assert_fail@plt+0x1cd4>
   13620:	add	r0, r0, #60	; 0x3c
   13624:	bl	15c1c <__assert_fail@plt+0x42b4>
   13628:	cmp	r0, #0
   1362c:	blt	13634 <__assert_fail@plt+0x1ccc>
   13630:	bl	11920 <close@plt>
   13634:	str	r5, [r4, #32]
   13638:	pop	{r4, r5, r6, pc}
   1363c:	ldr	r3, [r0, #48]	; 0x30
   13640:	mvn	r2, r1
   13644:	lsr	r2, r2, #31
   13648:	eor	r3, r3, #4
   1364c:	ands	r3, r2, r3, lsr #2
   13650:	beq	13634 <__assert_fail@plt+0x1ccc>
   13654:	mov	r0, r1
   13658:	b	13630 <__assert_fail@plt+0x1cc8>
   1365c:	ldr	r3, [r0, #48]	; 0x30
   13660:	push	{r4, r5, r6, lr}
   13664:	mov	r5, r0
   13668:	ands	r4, r3, #4
   1366c:	movne	r4, #0
   13670:	bne	13688 <__assert_fail@plt+0x1d20>
   13674:	tst	r3, #512	; 0x200
   13678:	beq	13698 <__assert_fail@plt+0x1d30>
   1367c:	mov	r2, #1
   13680:	mvn	r1, #99	; 0x63
   13684:	bl	135e8 <__assert_fail@plt+0x1c80>
   13688:	add	r0, r5, #60	; 0x3c
   1368c:	bl	134b4 <__assert_fail@plt+0x1b4c>
   13690:	mov	r0, r4
   13694:	pop	{r4, r5, r6, pc}
   13698:	ldr	r0, [r0, #28]
   1369c:	bl	11884 <fchdir@plt>
   136a0:	adds	r4, r0, #0
   136a4:	movne	r4, #1
   136a8:	b	13688 <__assert_fail@plt+0x1d20>
   136ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   136b0:	subs	sl, r3, #0
   136b4:	sub	sp, sp, #104	; 0x68
   136b8:	mov	r7, r0
   136bc:	mov	r8, r1
   136c0:	mov	r6, r2
   136c4:	moveq	r9, sl
   136c8:	beq	136e0 <__assert_fail@plt+0x1d78>
   136cc:	ldr	r1, [pc, #368]	; 13844 <__assert_fail@plt+0x1edc>
   136d0:	mov	r0, sl
   136d4:	bl	11548 <strcmp@plt>
   136d8:	clz	r9, r0
   136dc:	lsr	r9, r9, #5
   136e0:	ldr	r3, [r7, #48]	; 0x30
   136e4:	ands	r4, r3, #4
   136e8:	beq	13714 <__assert_fail@plt+0x1dac>
   136ec:	mvn	r4, r6
   136f0:	lsr	r4, r4, #31
   136f4:	ands	r4, r4, r3, lsr #9
   136f8:	beq	13708 <__assert_fail@plt+0x1da0>
   136fc:	mov	r0, r6
   13700:	mov	r4, #0
   13704:	bl	11920 <close@plt>
   13708:	mov	r0, r4
   1370c:	add	sp, sp, #104	; 0x68
   13710:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13714:	ands	r2, r9, r6, lsr #31
   13718:	beq	13804 <__assert_fail@plt+0x1e9c>
   1371c:	tst	r3, #512	; 0x200
   13720:	bne	13740 <__assert_fail@plt+0x1dd8>
   13724:	mov	r1, sl
   13728:	mov	r0, r7
   1372c:	bl	1344c <__assert_fail@plt+0x1ae4>
   13730:	subs	r5, r0, #0
   13734:	bge	1376c <__assert_fail@plt+0x1e04>
   13738:	mvn	r4, #0
   1373c:	b	13708 <__assert_fail@plt+0x1da0>
   13740:	add	r5, r7, #60	; 0x3c
   13744:	mov	r0, r5
   13748:	bl	15c14 <__assert_fail@plt+0x42ac>
   1374c:	cmp	r0, #0
   13750:	bne	13724 <__assert_fail@plt+0x1dbc>
   13754:	mov	r0, r5
   13758:	bl	15c60 <__assert_fail@plt+0x42f8>
   1375c:	subs	r5, r0, #0
   13760:	movge	r6, r5
   13764:	movge	sl, r4
   13768:	blt	13724 <__assert_fail@plt+0x1dbc>
   1376c:	ldr	r3, [r7, #48]	; 0x30
   13770:	tst	r3, #2
   13774:	bne	13794 <__assert_fail@plt+0x1e2c>
   13778:	cmp	sl, #0
   1377c:	beq	13814 <__assert_fail@plt+0x1eac>
   13780:	ldr	r1, [pc, #188]	; 13844 <__assert_fail@plt+0x1edc>
   13784:	mov	r0, sl
   13788:	bl	11548 <strcmp@plt>
   1378c:	cmp	r0, #0
   13790:	bne	13814 <__assert_fail@plt+0x1eac>
   13794:	mov	r1, sp
   13798:	mov	r0, r5
   1379c:	bl	19134 <lchmod@@Base+0x348c>
   137a0:	cmp	r0, #0
   137a4:	bne	137dc <__assert_fail@plt+0x1e74>
   137a8:	ldrd	r2, [sp]
   137ac:	ldrd	r0, [r8, #64]	; 0x40
   137b0:	cmp	r1, r3
   137b4:	cmpeq	r0, r2
   137b8:	bne	137d0 <__assert_fail@plt+0x1e68>
   137bc:	ldrd	r2, [sp, #96]	; 0x60
   137c0:	ldrd	r0, [r8, #160]	; 0xa0
   137c4:	cmp	r1, r3
   137c8:	cmpeq	r0, r2
   137cc:	beq	13814 <__assert_fail@plt+0x1eac>
   137d0:	bl	117a0 <__errno_location@plt>
   137d4:	mov	r3, #2
   137d8:	str	r3, [r0]
   137dc:	mvn	r4, #0
   137e0:	cmp	r6, #0
   137e4:	bge	13708 <__assert_fail@plt+0x1da0>
   137e8:	bl	117a0 <__errno_location@plt>
   137ec:	mov	r6, r0
   137f0:	mov	r0, r5
   137f4:	ldr	r7, [r6]
   137f8:	bl	11920 <close@plt>
   137fc:	str	r7, [r6]
   13800:	b	13708 <__assert_fail@plt+0x1da0>
   13804:	cmp	r6, #0
   13808:	movge	r5, r6
   1380c:	bge	1376c <__assert_fail@plt+0x1e04>
   13810:	b	13724 <__assert_fail@plt+0x1dbc>
   13814:	ldr	r3, [r7, #48]	; 0x30
   13818:	tst	r3, #512	; 0x200
   1381c:	beq	13834 <__assert_fail@plt+0x1ecc>
   13820:	eor	r2, r9, #1
   13824:	mov	r1, r5
   13828:	mov	r0, r7
   1382c:	bl	135e8 <__assert_fail@plt+0x1c80>
   13830:	b	13708 <__assert_fail@plt+0x1da0>
   13834:	mov	r0, r5
   13838:	bl	11884 <fchdir@plt>
   1383c:	mov	r4, r0
   13840:	b	137e0 <__assert_fail@plt+0x1e78>
   13844:	andeq	r9, r1, r2, lsl #21
   13848:	ldr	r3, [r0, #36]	; 0x24
   1384c:	add	r1, r1, #256	; 0x100
   13850:	push	{r4, r5, r6, lr}
   13854:	mov	r5, r0
   13858:	ldr	r0, [r0, #24]
   1385c:	adds	r1, r3, r1
   13860:	bcc	13884 <__assert_fail@plt+0x1f1c>
   13864:	mov	r4, #0
   13868:	bl	130d0 <__assert_fail@plt+0x1768>
   1386c:	str	r4, [r5, #24]
   13870:	bl	117a0 <__errno_location@plt>
   13874:	mov	r3, #36	; 0x24
   13878:	str	r3, [r0]
   1387c:	mov	r0, r4
   13880:	pop	{r4, r5, r6, pc}
   13884:	str	r1, [r5, #36]	; 0x24
   13888:	bl	187d0 <lchmod@@Base+0x2b28>
   1388c:	subs	r4, r0, #0
   13890:	bne	138a4 <__assert_fail@plt+0x1f3c>
   13894:	ldr	r0, [r5, #24]
   13898:	bl	130d0 <__assert_fail@plt+0x1768>
   1389c:	str	r4, [r5, #24]
   138a0:	b	1387c <__assert_fail@plt+0x1f14>
   138a4:	mov	r0, #1
   138a8:	str	r4, [r5, #24]
   138ac:	pop	{r4, r5, r6, pc}
   138b0:	ldr	r3, [r0, #48]	; 0x30
   138b4:	movw	r2, #258	; 0x102
   138b8:	push	{r0, r1, r4, lr}
   138bc:	mov	r4, r0
   138c0:	tst	r2, r3
   138c4:	beq	138f8 <__assert_fail@plt+0x1f90>
   138c8:	ldr	r3, [pc, #72]	; 13918 <__assert_fail@plt+0x1fb0>
   138cc:	mov	r1, #0
   138d0:	mov	r0, #31
   138d4:	ldr	r2, [pc, #64]	; 1391c <__assert_fail@plt+0x1fb4>
   138d8:	str	r3, [sp]
   138dc:	ldr	r3, [pc, #60]	; 13920 <__assert_fail@plt+0x1fb8>
   138e0:	bl	15558 <__assert_fail@plt+0x3bf0>
   138e4:	str	r0, [r4, #56]	; 0x38
   138e8:	adds	r0, r0, #0
   138ec:	movne	r0, #1
   138f0:	add	sp, sp, #8
   138f4:	pop	{r4, pc}
   138f8:	mov	r0, #32
   138fc:	bl	187a4 <lchmod@@Base+0x2afc>
   13900:	cmp	r0, #0
   13904:	str	r0, [r4, #56]	; 0x38
   13908:	beq	138f0 <__assert_fail@plt+0x1f88>
   1390c:	bl	18908 <lchmod@@Base+0x2c60>
   13910:	mov	r0, #1
   13914:	b	138f0 <__assert_fail@plt+0x1f88>
   13918:	ldrdeq	r3, [r1], -r0
   1391c:	andeq	r3, r1, ip, asr r1
   13920:	andeq	r3, r1, r0, lsr #2
   13924:	mov	r3, r0
   13928:	movw	r2, #258	; 0x102
   1392c:	ldr	r0, [r0, #56]	; 0x38
   13930:	ldr	r3, [r3, #48]	; 0x30
   13934:	tst	r2, r3
   13938:	beq	13948 <__assert_fail@plt+0x1fe0>
   1393c:	cmp	r0, #0
   13940:	bxeq	lr
   13944:	b	156c0 <__assert_fail@plt+0x3d58>
   13948:	b	130d0 <__assert_fail@plt+0x1768>
   1394c:	ldr	r3, [r0, #48]	; 0x30
   13950:	movw	r2, #258	; 0x102
   13954:	push	{r4, r5, r6, lr}
   13958:	mov	r6, r0
   1395c:	mov	r4, r1
   13960:	tst	r2, r3
   13964:	beq	139d8 <__assert_fail@plt+0x2070>
   13968:	mov	r0, #24
   1396c:	bl	187a4 <lchmod@@Base+0x2afc>
   13970:	subs	r5, r0, #0
   13974:	bne	13980 <__assert_fail@plt+0x2018>
   13978:	mov	r0, #0
   1397c:	pop	{r4, r5, r6, pc}
   13980:	ldrd	r2, [r4, #64]	; 0x40
   13984:	mov	r1, r5
   13988:	ldr	r0, [r6, #56]	; 0x38
   1398c:	strd	r2, [r5]
   13990:	ldrd	r2, [r4, #160]	; 0xa0
   13994:	str	r4, [r5, #16]
   13998:	strd	r2, [r5, #8]
   1399c:	bl	15a20 <__assert_fail@plt+0x40b8>
   139a0:	cmp	r5, r0
   139a4:	mov	r6, r0
   139a8:	bne	139b4 <__assert_fail@plt+0x204c>
   139ac:	mov	r0, #1
   139b0:	pop	{r4, r5, r6, pc}
   139b4:	mov	r0, r5
   139b8:	bl	130d0 <__assert_fail@plt+0x1768>
   139bc:	cmp	r6, #0
   139c0:	beq	13978 <__assert_fail@plt+0x2010>
   139c4:	ldr	r3, [r6, #16]
   139c8:	str	r3, [r4]
   139cc:	mov	r3, #2
   139d0:	strh	r3, [r4, #56]	; 0x38
   139d4:	b	139ac <__assert_fail@plt+0x2044>
   139d8:	add	r1, r1, #64	; 0x40
   139dc:	ldr	r0, [r0, #56]	; 0x38
   139e0:	bl	18924 <lchmod@@Base+0x2c7c>
   139e4:	cmp	r0, #0
   139e8:	beq	139ac <__assert_fail@plt+0x2044>
   139ec:	mov	r3, #2
   139f0:	str	r4, [r4]
   139f4:	strh	r3, [r4, #56]	; 0x38
   139f8:	pop	{r4, r5, r6, pc}
   139fc:	ldr	r3, [r0, #48]	; 0x30
   13a00:	mov	r2, r1
   13a04:	movw	r1, #258	; 0x102
   13a08:	push	{r4, r5, lr}
   13a0c:	sub	sp, sp, #28
   13a10:	tst	r1, r3
   13a14:	beq	13a4c <__assert_fail@plt+0x20e4>
   13a18:	ldrd	r4, [r2, #64]	; 0x40
   13a1c:	mov	r1, sp
   13a20:	ldrd	r2, [r2, #160]	; 0xa0
   13a24:	ldr	r0, [r0, #56]	; 0x38
   13a28:	strd	r4, [sp]
   13a2c:	strd	r2, [sp, #8]
   13a30:	bl	15a50 <__assert_fail@plt+0x40e8>
   13a34:	cmp	r0, #0
   13a38:	bne	13a40 <__assert_fail@plt+0x20d8>
   13a3c:	bl	11914 <abort@plt>
   13a40:	bl	130d0 <__assert_fail@plt+0x1768>
   13a44:	add	sp, sp, #28
   13a48:	pop	{r4, r5, pc}
   13a4c:	ldr	ip, [r2, #4]
   13a50:	cmp	ip, #0
   13a54:	beq	13a44 <__assert_fail@plt+0x20dc>
   13a58:	ldr	r3, [ip, #48]	; 0x30
   13a5c:	cmp	r3, #0
   13a60:	blt	13a44 <__assert_fail@plt+0x20dc>
   13a64:	ldr	r3, [r0, #56]	; 0x38
   13a68:	ldrd	r0, [r3, #16]
   13a6c:	orrs	r1, r0, r1
   13a70:	beq	13a3c <__assert_fail@plt+0x20d4>
   13a74:	ldrd	r4, [r3]
   13a78:	ldrd	r0, [r2, #160]	; 0xa0
   13a7c:	cmp	r5, r1
   13a80:	cmpeq	r4, r0
   13a84:	bne	13a44 <__assert_fail@plt+0x20dc>
   13a88:	ldrd	r0, [r3, #8]
   13a8c:	ldrd	r4, [r2, #64]	; 0x40
   13a90:	cmp	r1, r5
   13a94:	cmpeq	r0, r4
   13a98:	ldrdeq	r0, [ip, #64]	; 0x40
   13a9c:	strdeq	r0, [r3, #8]
   13aa0:	ldrdeq	r0, [ip, #160]	; 0xa0
   13aa4:	strdeq	r0, [r3]
   13aa8:	b	13a44 <__assert_fail@plt+0x20dc>
   13aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab0:	sub	sp, sp, #60	; 0x3c
   13ab4:	mov	r4, r0
   13ab8:	ldr	r5, [r0]
   13abc:	str	r1, [sp, #8]
   13ac0:	ldr	r3, [r5, #12]
   13ac4:	cmp	r3, #0
   13ac8:	str	r3, [sp]
   13acc:	beq	13b20 <__assert_fail@plt+0x21b8>
   13ad0:	mov	r0, r3
   13ad4:	bl	11878 <dirfd@plt>
   13ad8:	cmp	r0, #0
   13adc:	str	r0, [sp, #52]	; 0x34
   13ae0:	bge	13b90 <__assert_fail@plt+0x2228>
   13ae4:	mov	r6, #0
   13ae8:	ldr	r0, [r5, #12]
   13aec:	bl	11950 <closedir@plt>
   13af0:	str	r6, [r5, #12]
   13af4:	ldr	r3, [sp, #8]
   13af8:	cmp	r3, #3
   13afc:	bne	13d18 <__assert_fail@plt+0x23b0>
   13b00:	mov	r3, #4
   13b04:	strh	r3, [r5, #56]	; 0x38
   13b08:	bl	117a0 <__errno_location@plt>
   13b0c:	ldr	r3, [r0]
   13b10:	str	r3, [r5, #32]
   13b14:	mov	r0, r6
   13b18:	add	sp, sp, #60	; 0x3c
   13b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b20:	ldr	r3, [r0, #48]	; 0x30
   13b24:	ldr	r1, [r5, #24]
   13b28:	and	r2, r3, #516	; 0x204
   13b2c:	cmp	r2, #512	; 0x200
   13b30:	ldreq	r0, [r0, #32]
   13b34:	mvnne	r0, #99	; 0x63
   13b38:	ands	r2, r3, #16
   13b3c:	beq	13b58 <__assert_fail@plt+0x21f0>
   13b40:	tst	r3, #1
   13b44:	moveq	r2, #32768	; 0x8000
   13b48:	beq	13b58 <__assert_fail@plt+0x21f0>
   13b4c:	ldr	r2, [r5, #48]	; 0x30
   13b50:	cmp	r2, #0
   13b54:	movne	r2, #32768	; 0x8000
   13b58:	add	r3, sp, #52	; 0x34
   13b5c:	bl	16214 <lchmod@@Base+0x56c>
   13b60:	cmp	r0, #0
   13b64:	mov	r6, r0
   13b68:	str	r0, [r5, #12]
   13b6c:	beq	13af4 <__assert_fail@plt+0x218c>
   13b70:	ldrh	r3, [r5, #56]	; 0x38
   13b74:	cmp	r3, #11
   13b78:	bne	13d20 <__assert_fail@plt+0x23b8>
   13b7c:	mov	r2, #0
   13b80:	mov	r1, r5
   13b84:	mov	r0, r4
   13b88:	bl	131e8 <__assert_fail@plt+0x1880>
   13b8c:	strh	r0, [r5, #56]	; 0x38
   13b90:	ldr	r3, [r4, #44]	; 0x2c
   13b94:	cmp	r3, #0
   13b98:	ldr	r3, [pc, #1812]	; 142b4 <__assert_fail@plt+0x294c>
   13b9c:	mvnne	r3, #0
   13ba0:	str	r3, [sp, #36]	; 0x24
   13ba4:	ldr	r3, [sp]
   13ba8:	cmp	r3, #0
   13bac:	beq	13d6c <__assert_fail@plt+0x2404>
   13bb0:	mov	r3, #1
   13bb4:	str	r3, [sp, #24]
   13bb8:	ldr	r2, [r5, #28]
   13bbc:	mov	r8, #0
   13bc0:	mov	r9, r8
   13bc4:	mov	r6, r8
   13bc8:	ldr	r3, [r5, #40]	; 0x28
   13bcc:	str	r8, [sp, #20]
   13bd0:	str	r8, [sp, #32]
   13bd4:	sub	fp, r3, #1
   13bd8:	ldrb	r2, [r2, fp]
   13bdc:	cmp	r2, #47	; 0x2f
   13be0:	movne	fp, r3
   13be4:	ldr	r3, [r4, #48]	; 0x30
   13be8:	ands	r3, r3, #4
   13bec:	ldrne	r3, [r4, #24]
   13bf0:	streq	r3, [sp, #4]
   13bf4:	addne	r2, r3, fp
   13bf8:	addne	r2, r2, #1
   13bfc:	strne	r2, [sp, #4]
   13c00:	movne	r2, #47	; 0x2f
   13c04:	strbne	r2, [r3, fp]
   13c08:	add	r3, fp, #1
   13c0c:	add	r2, fp, #1
   13c10:	str	r3, [sp, #16]
   13c14:	ldr	r3, [r4, #36]	; 0x24
   13c18:	sub	r3, r3, r2
   13c1c:	str	r3, [sp, #28]
   13c20:	ldr	r3, [r5, #48]	; 0x30
   13c24:	add	r3, r3, #1
   13c28:	str	r3, [sp, #40]	; 0x28
   13c2c:	ldr	r7, [r5, #12]
   13c30:	cmp	r7, #0
   13c34:	beq	13c80 <__assert_fail@plt+0x2318>
   13c38:	bl	117a0 <__errno_location@plt>
   13c3c:	mov	r3, #0
   13c40:	str	r0, [sp, #12]
   13c44:	str	r3, [r0]
   13c48:	mov	r0, r7
   13c4c:	bl	11854 <readdir64@plt>
   13c50:	subs	r3, r0, #0
   13c54:	bne	13eb0 <__assert_fail@plt+0x2548>
   13c58:	ldr	r3, [sp, #12]
   13c5c:	ldr	r3, [r3]
   13c60:	cmp	r3, #0
   13c64:	beq	13c80 <__assert_fail@plt+0x2318>
   13c68:	str	r3, [r5, #32]
   13c6c:	ldr	r3, [sp]
   13c70:	orrs	r3, r3, r9
   13c74:	moveq	r3, #4
   13c78:	movne	r3, #7
   13c7c:	strh	r3, [r5, #56]	; 0x38
   13c80:	ldr	r0, [r5, #12]
   13c84:	cmp	r0, #0
   13c88:	beq	13c98 <__assert_fail@plt+0x2330>
   13c8c:	bl	11950 <closedir@plt>
   13c90:	mov	r3, #0
   13c94:	str	r3, [r5, #12]
   13c98:	ldr	r3, [sp, #20]
   13c9c:	cmp	r3, #0
   13ca0:	bne	14170 <__assert_fail@plt+0x2808>
   13ca4:	ldr	r3, [r4, #48]	; 0x30
   13ca8:	tst	r3, #4
   13cac:	bne	141ec <__assert_fail@plt+0x2884>
   13cb0:	ldr	r2, [sp]
   13cb4:	ldr	r3, [sp, #24]
   13cb8:	cmp	r2, #0
   13cbc:	movne	r3, #0
   13cc0:	cmp	r3, #0
   13cc4:	beq	14230 <__assert_fail@plt+0x28c8>
   13cc8:	ldr	r3, [sp, #8]
   13ccc:	cmp	r9, #0
   13cd0:	cmpne	r3, #1
   13cd4:	bne	1425c <__assert_fail@plt+0x28f4>
   13cd8:	ldr	r3, [r5, #48]	; 0x30
   13cdc:	cmp	r3, #0
   13ce0:	bne	14218 <__assert_fail@plt+0x28b0>
   13ce4:	mov	r0, r4
   13ce8:	bl	1365c <__assert_fail@plt+0x1cf4>
   13cec:	adds	r0, r0, #0
   13cf0:	movne	r0, #1
   13cf4:	cmp	r0, #0
   13cf8:	beq	14230 <__assert_fail@plt+0x28c8>
   13cfc:	mov	r3, #7
   13d00:	strh	r3, [r5, #56]	; 0x38
   13d04:	ldr	r3, [r4, #48]	; 0x30
   13d08:	orr	r3, r3, #8192	; 0x2000
   13d0c:	str	r3, [r4, #48]	; 0x30
   13d10:	mov	r0, r6
   13d14:	bl	13480 <__assert_fail@plt+0x1b18>
   13d18:	mov	r6, #0
   13d1c:	b	13b14 <__assert_fail@plt+0x21ac>
   13d20:	ldr	r3, [r4, #48]	; 0x30
   13d24:	tst	r3, #256	; 0x100
   13d28:	beq	13b90 <__assert_fail@plt+0x2228>
   13d2c:	mov	r1, r5
   13d30:	mov	r0, r4
   13d34:	bl	139fc <__assert_fail@plt+0x2094>
   13d38:	mov	r2, #0
   13d3c:	mov	r1, r5
   13d40:	mov	r0, r4
   13d44:	bl	131e8 <__assert_fail@plt+0x1880>
   13d48:	mov	r1, r5
   13d4c:	mov	r0, r4
   13d50:	bl	1394c <__assert_fail@plt+0x1fe4>
   13d54:	subs	r6, r0, #0
   13d58:	bne	13b90 <__assert_fail@plt+0x2228>
   13d5c:	bl	117a0 <__errno_location@plt>
   13d60:	mov	r3, #12
   13d64:	str	r3, [r0]
   13d68:	b	13b14 <__assert_fail@plt+0x21ac>
   13d6c:	ldr	r3, [sp, #8]
   13d70:	cmp	r3, #2
   13d74:	ldreq	r0, [sp]
   13d78:	beq	13dec <__assert_fail@plt+0x2484>
   13d7c:	ldr	r3, [r4, #48]	; 0x30
   13d80:	and	r3, r3, #56	; 0x38
   13d84:	cmp	r3, #24
   13d88:	bne	13dc8 <__assert_fail@plt+0x2460>
   13d8c:	ldr	r3, [r5, #84]	; 0x54
   13d90:	cmp	r3, #2
   13d94:	bne	13dc8 <__assert_fail@plt+0x2460>
   13d98:	mov	r0, r5
   13d9c:	ldr	r1, [sp, #52]	; 0x34
   13da0:	bl	134e4 <__assert_fail@plt+0x1b7c>
   13da4:	movw	r3, #26985	; 0x6969
   13da8:	cmp	r0, r3
   13dac:	beq	13dc8 <__assert_fail@plt+0x2460>
   13db0:	bgt	13dd0 <__assert_fail@plt+0x2468>
   13db4:	ldr	r3, [pc, #1276]	; 142b8 <__assert_fail@plt+0x2950>
   13db8:	cmp	r0, r3
   13dbc:	clzne	r0, r0
   13dc0:	lsrne	r0, r0, #5
   13dc4:	bne	13dec <__assert_fail@plt+0x2484>
   13dc8:	mov	r0, #1
   13dcc:	b	13dec <__assert_fail@plt+0x2484>
   13dd0:	movw	r3, #40864	; 0x9fa0
   13dd4:	cmp	r0, r3
   13dd8:	beq	13dc8 <__assert_fail@plt+0x2460>
   13ddc:	ldr	r3, [pc, #1240]	; 142bc <__assert_fail@plt+0x2954>
   13de0:	sub	r0, r0, r3
   13de4:	clz	r0, r0
   13de8:	lsr	r0, r0, #5
   13dec:	ldr	r3, [sp, #8]
   13df0:	mov	r6, r0
   13df4:	sub	r7, r3, #3
   13df8:	clz	r7, r7
   13dfc:	lsr	r7, r7, #5
   13e00:	orrs	r3, r7, r0
   13e04:	str	r3, [sp, #24]
   13e08:	beq	13bb8 <__assert_fail@plt+0x2250>
   13e0c:	ldr	r3, [r4, #48]	; 0x30
   13e10:	tst	r3, #512	; 0x200
   13e14:	beq	13e2c <__assert_fail@plt+0x24c4>
   13e18:	mov	r2, #3
   13e1c:	movw	r1, #1030	; 0x406
   13e20:	ldr	r0, [sp, #52]	; 0x34
   13e24:	bl	18a7c <lchmod@@Base+0x2dd4>
   13e28:	str	r0, [sp, #52]	; 0x34
   13e2c:	ldr	r2, [sp, #52]	; 0x34
   13e30:	cmp	r2, #0
   13e34:	bge	13e84 <__assert_fail@plt+0x251c>
   13e38:	tst	r7, r6
   13e3c:	bne	13ea0 <__assert_fail@plt+0x2538>
   13e40:	ldrh	r3, [r5, #58]	; 0x3a
   13e44:	ldr	r0, [r5, #12]
   13e48:	orr	r3, r3, #1
   13e4c:	strh	r3, [r5, #58]	; 0x3a
   13e50:	bl	11950 <closedir@plt>
   13e54:	mov	r3, #0
   13e58:	str	r3, [r5, #12]
   13e5c:	ldr	r3, [r4, #48]	; 0x30
   13e60:	tst	r3, #512	; 0x200
   13e64:	beq	13e78 <__assert_fail@plt+0x2510>
   13e68:	ldr	r0, [sp, #52]	; 0x34
   13e6c:	cmp	r0, #0
   13e70:	blt	13e78 <__assert_fail@plt+0x2510>
   13e74:	bl	11920 <close@plt>
   13e78:	mov	r3, #0
   13e7c:	str	r3, [r5, #12]
   13e80:	b	13bb4 <__assert_fail@plt+0x224c>
   13e84:	mov	r3, #0
   13e88:	mov	r1, r5
   13e8c:	mov	r0, r4
   13e90:	bl	136ac <__assert_fail@plt+0x1d44>
   13e94:	cmp	r0, #0
   13e98:	bne	13e38 <__assert_fail@plt+0x24d0>
   13e9c:	b	13bb0 <__assert_fail@plt+0x2248>
   13ea0:	bl	117a0 <__errno_location@plt>
   13ea4:	ldr	r3, [r0]
   13ea8:	str	r3, [r5, #32]
   13eac:	b	13e40 <__assert_fail@plt+0x24d8>
   13eb0:	ldr	r2, [r4, #48]	; 0x30
   13eb4:	tst	r2, #32
   13eb8:	bne	13ee0 <__assert_fail@plt+0x2578>
   13ebc:	ldrb	r2, [r3, #19]
   13ec0:	cmp	r2, #46	; 0x2e
   13ec4:	bne	13ee0 <__assert_fail@plt+0x2578>
   13ec8:	ldrb	r2, [r3, #20]
   13ecc:	cmp	r2, #0
   13ed0:	beq	13c2c <__assert_fail@plt+0x22c4>
   13ed4:	ldrh	r2, [r3, #20]
   13ed8:	cmp	r2, #46	; 0x2e
   13edc:	beq	13c2c <__assert_fail@plt+0x22c4>
   13ee0:	add	r7, r3, #19
   13ee4:	str	r3, [sp, #44]	; 0x2c
   13ee8:	mov	r0, r7
   13eec:	bl	11764 <strlen@plt>
   13ef0:	mov	r2, r0
   13ef4:	mov	r1, r7
   13ef8:	mov	sl, r0
   13efc:	mov	r0, r4
   13f00:	bl	133d8 <__assert_fail@plt+0x1a70>
   13f04:	subs	r7, r0, #0
   13f08:	beq	13f44 <__assert_fail@plt+0x25dc>
   13f0c:	ldr	r3, [sp, #28]
   13f10:	cmp	r3, sl
   13f14:	ldr	r3, [sp, #44]	; 0x2c
   13f18:	bhi	13fc4 <__assert_fail@plt+0x265c>
   13f1c:	ldr	r2, [r4, #24]
   13f20:	add	r1, fp, #2
   13f24:	mov	r0, r4
   13f28:	add	r1, r1, sl
   13f2c:	str	r2, [sp, #28]
   13f30:	bl	13848 <__assert_fail@plt+0x1ee0>
   13f34:	cmp	r0, #0
   13f38:	ldr	r2, [sp, #28]
   13f3c:	ldr	r3, [sp, #44]	; 0x2c
   13f40:	bne	13f8c <__assert_fail@plt+0x2624>
   13f44:	ldr	r3, [sp, #12]
   13f48:	mov	r0, r7
   13f4c:	ldr	r8, [r3]
   13f50:	bl	130d0 <__assert_fail@plt+0x1768>
   13f54:	mov	r0, r6
   13f58:	mov	r6, #0
   13f5c:	bl	13480 <__assert_fail@plt+0x1b18>
   13f60:	ldr	r0, [r5, #12]
   13f64:	bl	11950 <closedir@plt>
   13f68:	mov	r3, #7
   13f6c:	str	r6, [r5, #12]
   13f70:	strh	r3, [r5, #56]	; 0x38
   13f74:	ldr	r3, [r4, #48]	; 0x30
   13f78:	orr	r3, r3, #8192	; 0x2000
   13f7c:	str	r3, [r4, #48]	; 0x30
   13f80:	ldr	r3, [sp, #12]
   13f84:	str	r8, [r3]
   13f88:	b	13b14 <__assert_fail@plt+0x21ac>
   13f8c:	ldr	r1, [r4, #24]
   13f90:	cmp	r1, r2
   13f94:	ldreq	r0, [sp, #20]
   13f98:	beq	13fb0 <__assert_fail@plt+0x2648>
   13f9c:	ldr	r2, [r4, #48]	; 0x30
   13fa0:	tst	r2, #4
   13fa4:	ldrne	r2, [sp, #16]
   13fa8:	addne	r2, r1, r2
   13fac:	strne	r2, [sp, #4]
   13fb0:	ldr	r1, [sp, #16]
   13fb4:	str	r0, [sp, #20]
   13fb8:	ldr	r2, [r4, #36]	; 0x24
   13fbc:	sub	r2, r2, r1
   13fc0:	str	r2, [sp, #28]
   13fc4:	ldr	r2, [sp, #16]
   13fc8:	adds	r2, r2, sl
   13fcc:	movcs	sl, #1
   13fd0:	movcc	sl, #0
   13fd4:	bcc	1401c <__assert_fail@plt+0x26b4>
   13fd8:	mov	r0, r7
   13fdc:	bl	130d0 <__assert_fail@plt+0x1768>
   13fe0:	mov	r0, r6
   13fe4:	mov	r6, #0
   13fe8:	bl	13480 <__assert_fail@plt+0x1b18>
   13fec:	ldr	r0, [r5, #12]
   13ff0:	bl	11950 <closedir@plt>
   13ff4:	mov	r3, #7
   13ff8:	ldr	r2, [sp, #12]
   13ffc:	str	r6, [r5, #12]
   14000:	strh	r3, [r5, #56]	; 0x38
   14004:	ldr	r3, [r4, #48]	; 0x30
   14008:	orr	r3, r3, #8192	; 0x2000
   1400c:	str	r3, [r4, #48]	; 0x30
   14010:	mov	r3, #36	; 0x24
   14014:	str	r3, [r2]
   14018:	b	13b14 <__assert_fail@plt+0x21ac>
   1401c:	ldr	r1, [sp, #40]	; 0x28
   14020:	str	r1, [r7, #48]	; 0x30
   14024:	ldr	r1, [r4]
   14028:	str	r1, [r7, #4]
   1402c:	str	r2, [r7, #40]	; 0x28
   14030:	ldrd	r0, [r3]
   14034:	ldr	r2, [r4, #48]	; 0x30
   14038:	strd	r0, [r7, #160]	; 0xa0
   1403c:	add	r1, r7, #168	; 0xa8
   14040:	tst	r2, #4
   14044:	streq	r1, [r7, #24]
   14048:	beq	1406c <__assert_fail@plt+0x2704>
   1404c:	ldr	r2, [r7, #28]
   14050:	str	r3, [sp, #12]
   14054:	ldr	r0, [sp, #4]
   14058:	str	r2, [r7, #24]
   1405c:	ldr	r2, [r7, #52]	; 0x34
   14060:	add	r2, r2, #1
   14064:	bl	11584 <memmove@plt>
   14068:	ldr	r3, [sp, #12]
   1406c:	ldr	r2, [r4, #44]	; 0x2c
   14070:	ldr	r1, [r4, #48]	; 0x30
   14074:	cmp	r2, #0
   14078:	beq	14084 <__assert_fail@plt+0x271c>
   1407c:	ands	r2, r1, #1024	; 0x400
   14080:	beq	14154 <__assert_fail@plt+0x27ec>
   14084:	ands	r2, r1, #8
   14088:	ldrb	r3, [r3, #18]
   1408c:	beq	140a8 <__assert_fail@plt+0x2740>
   14090:	ands	r2, r3, #251	; 0xfb
   14094:	beq	140a8 <__assert_fail@plt+0x2740>
   14098:	ubfx	r1, r1, #4, #1
   1409c:	cmp	r3, #10
   140a0:	moveq	r2, r1
   140a4:	orrne	r2, r1, #1
   140a8:	mov	r1, #11
   140ac:	sub	r3, r3, #1
   140b0:	cmp	r3, r1
   140b4:	strh	r1, [r7, #56]	; 0x38
   140b8:	lslls	r3, r3, #1
   140bc:	ldrls	r1, [pc, #508]	; 142c0 <__assert_fail@plt+0x2958>
   140c0:	ldrhls	sl, [r1, r3]
   140c4:	cmp	r2, #0
   140c8:	mov	r3, #0
   140cc:	movne	r2, #1
   140d0:	moveq	r2, #2
   140d4:	str	sl, [r7, #80]	; 0x50
   140d8:	strd	r2, [r7, #112]	; 0x70
   140dc:	mov	r3, #0
   140e0:	cmp	r6, r3
   140e4:	str	r3, [r7, #8]
   140e8:	moveq	r6, r7
   140ec:	ldrne	r3, [sp, #32]
   140f0:	strne	r7, [r3, #8]
   140f4:	movw	r3, #10000	; 0x2710
   140f8:	cmp	r9, r3
   140fc:	bne	1413c <__assert_fail@plt+0x27d4>
   14100:	ldr	sl, [r4, #44]	; 0x2c
   14104:	cmp	sl, #0
   14108:	bne	1413c <__assert_fail@plt+0x27d4>
   1410c:	mov	r0, r5
   14110:	ldr	r1, [sp, #52]	; 0x34
   14114:	bl	134e4 <__assert_fail@plt+0x1b7c>
   14118:	movw	r3, #26985	; 0x6969
   1411c:	cmp	r0, r3
   14120:	beq	14168 <__assert_fail@plt+0x2800>
   14124:	ldr	r3, [pc, #408]	; 142c4 <__assert_fail@plt+0x295c>
   14128:	cmp	r0, r3
   1412c:	beq	14168 <__assert_fail@plt+0x2800>
   14130:	ldr	r3, [pc, #384]	; 142b8 <__assert_fail@plt+0x2950>
   14134:	subs	r8, r0, r3
   14138:	movne	r8, #1
   1413c:	ldr	r3, [sp, #36]	; 0x24
   14140:	add	r9, r9, #1
   14144:	cmp	r3, r9
   14148:	bls	13c98 <__assert_fail@plt+0x2330>
   1414c:	str	r7, [sp, #32]
   14150:	b	13c2c <__assert_fail@plt+0x22c4>
   14154:	mov	r1, r7
   14158:	mov	r0, r4
   1415c:	bl	131e8 <__assert_fail@plt+0x1880>
   14160:	strh	r0, [r7, #56]	; 0x38
   14164:	b	140dc <__assert_fail@plt+0x2774>
   14168:	mov	r8, sl
   1416c:	b	1413c <__assert_fail@plt+0x27d4>
   14170:	ldr	r3, [r4, #4]
   14174:	ldr	r1, [r4, #24]
   14178:	cmp	r3, #0
   1417c:	bne	141c4 <__assert_fail@plt+0x285c>
   14180:	mov	r3, r6
   14184:	ldr	r2, [r3, #48]	; 0x30
   14188:	cmp	r2, #0
   1418c:	blt	13ca4 <__assert_fail@plt+0x233c>
   14190:	ldr	r2, [r3, #24]
   14194:	add	r0, r3, #168	; 0xa8
   14198:	cmp	r2, r0
   1419c:	ldrne	r0, [r3, #28]
   141a0:	str	r1, [r3, #28]
   141a4:	subne	r2, r2, r0
   141a8:	addne	r2, r1, r2
   141ac:	strne	r2, [r3, #24]
   141b0:	ldr	r2, [r3, #8]
   141b4:	cmp	r2, #0
   141b8:	ldreq	r2, [r3, #4]
   141bc:	mov	r3, r2
   141c0:	b	14184 <__assert_fail@plt+0x281c>
   141c4:	ldr	r2, [r3, #24]
   141c8:	add	r0, r3, #168	; 0xa8
   141cc:	cmp	r2, r0
   141d0:	ldrne	r0, [r3, #28]
   141d4:	str	r1, [r3, #28]
   141d8:	subne	r2, r2, r0
   141dc:	addne	r2, r1, r2
   141e0:	strne	r2, [r3, #24]
   141e4:	ldr	r3, [r3, #8]
   141e8:	b	14178 <__assert_fail@plt+0x2810>
   141ec:	ldr	r2, [sp, #16]
   141f0:	ldr	r3, [r4, #36]	; 0x24
   141f4:	cmp	r9, #0
   141f8:	cmpne	r3, r2
   141fc:	ldreq	r3, [sp, #4]
   14200:	subeq	r3, r3, #1
   14204:	streq	r3, [sp, #4]
   14208:	mov	r3, #0
   1420c:	ldr	r2, [sp, #4]
   14210:	strb	r3, [r2]
   14214:	b	13cb0 <__assert_fail@plt+0x2348>
   14218:	ldr	r3, [pc, #168]	; 142c8 <__assert_fail@plt+0x2960>
   1421c:	mvn	r2, #0
   14220:	mov	r0, r4
   14224:	ldr	r1, [r5, #4]
   14228:	bl	136ac <__assert_fail@plt+0x1d44>
   1422c:	b	13cec <__assert_fail@plt+0x2384>
   14230:	cmp	r9, #0
   14234:	bne	1425c <__assert_fail@plt+0x28f4>
   14238:	ldr	r3, [sp, #8]
   1423c:	cmp	r3, #3
   14240:	bne	13d10 <__assert_fail@plt+0x23a8>
   14244:	ldrh	r3, [r5, #56]	; 0x38
   14248:	cmp	r3, #4
   1424c:	cmpne	r3, #7
   14250:	movne	r3, #6
   14254:	strhne	r3, [r5, #56]	; 0x38
   14258:	b	13d10 <__assert_fail@plt+0x23a8>
   1425c:	cmp	r8, #0
   14260:	beq	1428c <__assert_fail@plt+0x2924>
   14264:	ldr	r3, [pc, #96]	; 142cc <__assert_fail@plt+0x2964>
   14268:	mov	r1, r6
   1426c:	mov	r2, r9
   14270:	mov	r0, r4
   14274:	str	r3, [r4, #44]	; 0x2c
   14278:	bl	13320 <__assert_fail@plt+0x19b8>
   1427c:	mov	r3, #0
   14280:	mov	r6, r0
   14284:	str	r3, [r4, #44]	; 0x2c
   14288:	b	13b14 <__assert_fail@plt+0x21ac>
   1428c:	ldr	r3, [r4, #44]	; 0x2c
   14290:	cmp	r3, #0
   14294:	cmpne	r9, #1
   14298:	beq	13b14 <__assert_fail@plt+0x21ac>
   1429c:	mov	r1, r6
   142a0:	mov	r2, r9
   142a4:	mov	r0, r4
   142a8:	bl	13320 <__assert_fail@plt+0x19b8>
   142ac:	mov	r6, r0
   142b0:	b	13b14 <__assert_fail@plt+0x21ac>
   142b4:	andeq	r8, r1, r0, lsr #13
   142b8:			; <UNDEFINED> instruction: 0xff534d42
   142bc:	movtpl	r4, #24911	; 0x614f
   142c0:	andeq	r9, r1, sl, ror #20
   142c4:			; <UNDEFINED> instruction: 0x01021994
   142c8:	andeq	r9, r1, r2, lsl #21
   142cc:			; <UNDEFINED> instruction: 0x000131b4
   142d0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142d4:	bic	r4, r1, #4080	; 0xff0
   142d8:	bic	r4, r4, #15
   142dc:	cmp	r4, #0
   142e0:	str	r0, [sp]
   142e4:	beq	142fc <__assert_fail@plt+0x2994>
   142e8:	bl	117a0 <__errno_location@plt>
   142ec:	mov	r3, #22
   142f0:	str	r3, [r0]
   142f4:	mov	r4, #0
   142f8:	b	14318 <__assert_fail@plt+0x29b0>
   142fc:	and	r3, r1, #516	; 0x204
   14300:	mov	r6, r1
   14304:	cmp	r3, #516	; 0x204
   14308:	bne	14324 <__assert_fail@plt+0x29bc>
   1430c:	bl	117a0 <__errno_location@plt>
   14310:	mov	r3, #22
   14314:	str	r3, [r0]
   14318:	mov	r0, r4
   1431c:	add	sp, sp, #12
   14320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14324:	ands	r4, r1, #18
   14328:	beq	1430c <__assert_fail@plt+0x29a4>
   1432c:	mov	r1, #96	; 0x60
   14330:	mov	r0, #1
   14334:	mov	sl, r2
   14338:	bl	18750 <lchmod@@Base+0x2aa8>
   1433c:	subs	r4, r0, #0
   14340:	beq	14318 <__assert_fail@plt+0x29b0>
   14344:	tst	r6, #2
   14348:	mov	r5, #0
   1434c:	str	sl, [r4, #44]	; 0x2c
   14350:	bicne	r3, r6, #512	; 0x200
   14354:	orrne	r3, r3, #4
   14358:	streq	r6, [r4, #48]	; 0x30
   1435c:	strne	r3, [r4, #48]	; 0x30
   14360:	mvn	r3, #99	; 0x63
   14364:	str	r3, [r4, #32]
   14368:	ldr	r3, [sp]
   1436c:	sub	r8, r3, #4
   14370:	ldr	r7, [r8, #4]!
   14374:	cmp	r7, #0
   14378:	bne	1449c <__assert_fail@plt+0x2b34>
   1437c:	add	r1, r5, #1
   14380:	mov	r0, r4
   14384:	cmp	r1, #4096	; 0x1000
   14388:	movcc	r1, #4096	; 0x1000
   1438c:	bl	13848 <__assert_fail@plt+0x1ee0>
   14390:	cmp	r0, #0
   14394:	beq	145ac <__assert_fail@plt+0x2c44>
   14398:	ldr	r3, [sp]
   1439c:	ldr	r8, [r3]
   143a0:	cmp	r8, #0
   143a4:	beq	143c8 <__assert_fail@plt+0x2a60>
   143a8:	mov	r2, r7
   143ac:	ldr	r1, [pc, #516]	; 145b8 <__assert_fail@plt+0x2c50>
   143b0:	mov	r0, r4
   143b4:	bl	133d8 <__assert_fail@plt+0x1a70>
   143b8:	subs	r8, r0, #0
   143bc:	beq	145a4 <__assert_fail@plt+0x2c3c>
   143c0:	mvn	r3, #0
   143c4:	str	r3, [r8, #48]	; 0x30
   143c8:	cmp	sl, #0
   143cc:	eor	r6, r6, #2048	; 0x800
   143d0:	ldrne	r3, [r4, #48]	; 0x30
   143d4:	mov	fp, #0
   143d8:	ubfx	r6, r6, #11, #1
   143dc:	moveq	r3, #1
   143e0:	mov	r7, fp
   143e4:	mov	r9, fp
   143e8:	ubfxne	r3, r3, #10, #1
   143ec:	str	r3, [sp, #4]
   143f0:	ldr	r3, [sp]
   143f4:	ldr	r5, [r3, r9, lsl #2]
   143f8:	cmp	r5, #0
   143fc:	bne	144b0 <__assert_fail@plt+0x2b48>
   14400:	cmp	sl, #0
   14404:	cmpne	r9, #1
   14408:	bls	14420 <__assert_fail@plt+0x2ab8>
   1440c:	mov	r1, r7
   14410:	mov	r2, r9
   14414:	mov	r0, r4
   14418:	bl	13320 <__assert_fail@plt+0x19b8>
   1441c:	mov	r7, r0
   14420:	mov	r2, #0
   14424:	ldr	r1, [pc, #396]	; 145b8 <__assert_fail@plt+0x2c50>
   14428:	mov	r0, r4
   1442c:	bl	133d8 <__assert_fail@plt+0x1a70>
   14430:	cmp	r0, #0
   14434:	str	r0, [r4]
   14438:	beq	14594 <__assert_fail@plt+0x2c2c>
   1443c:	mov	r3, #9
   14440:	str	r7, [r0, #8]
   14444:	strh	r3, [r0, #56]	; 0x38
   14448:	mov	r3, #1
   1444c:	str	r3, [r0, #48]	; 0x30
   14450:	mov	r0, r4
   14454:	bl	138b0 <__assert_fail@plt+0x1f48>
   14458:	cmp	r0, #0
   1445c:	beq	14594 <__assert_fail@plt+0x2c2c>
   14460:	ldr	r3, [r4, #48]	; 0x30
   14464:	tst	r3, #516	; 0x204
   14468:	bne	1448c <__assert_fail@plt+0x2b24>
   1446c:	ldr	r1, [pc, #328]	; 145bc <__assert_fail@plt+0x2c54>
   14470:	mov	r0, r4
   14474:	bl	1344c <__assert_fail@plt+0x1ae4>
   14478:	cmp	r0, #0
   1447c:	str	r0, [r4, #28]
   14480:	ldrlt	r3, [r4, #48]	; 0x30
   14484:	orrlt	r3, r3, #4
   14488:	strlt	r3, [r4, #48]	; 0x30
   1448c:	mvn	r1, #0
   14490:	add	r0, r4, #60	; 0x3c
   14494:	bl	15be8 <__assert_fail@plt+0x4280>
   14498:	b	14318 <__assert_fail@plt+0x29b0>
   1449c:	mov	r0, r7
   144a0:	bl	11764 <strlen@plt>
   144a4:	cmp	r5, r0
   144a8:	movcc	r5, r0
   144ac:	b	14370 <__assert_fail@plt+0x2a08>
   144b0:	mov	r0, r5
   144b4:	bl	11764 <strlen@plt>
   144b8:	cmp	r0, #2
   144bc:	movls	r1, #0
   144c0:	andhi	r1, r6, #1
   144c4:	mov	r2, r0
   144c8:	cmp	r1, #0
   144cc:	beq	144e4 <__assert_fail@plt+0x2b7c>
   144d0:	add	r1, r5, r0
   144d4:	ldrb	r1, [r1, #-1]
   144d8:	cmp	r1, #47	; 0x2f
   144dc:	subeq	r0, r5, #2
   144e0:	beq	14570 <__assert_fail@plt+0x2c08>
   144e4:	mov	r1, r5
   144e8:	mov	r0, r4
   144ec:	bl	133d8 <__assert_fail@plt+0x1a70>
   144f0:	subs	r5, r0, #0
   144f4:	beq	14594 <__assert_fail@plt+0x2c2c>
   144f8:	mov	r2, #0
   144fc:	cmp	r7, #0
   14500:	str	r8, [r5, #4]
   14504:	str	r2, [r5, #48]	; 0x30
   14508:	add	r2, r5, #168	; 0xa8
   1450c:	str	r2, [r5, #24]
   14510:	ldr	r2, [sp, #4]
   14514:	moveq	r2, #0
   14518:	cmp	r2, #0
   1451c:	beq	14580 <__assert_fail@plt+0x2c18>
   14520:	mov	r2, #11
   14524:	mov	r0, #2
   14528:	mov	r1, #0
   1452c:	strh	r2, [r5, #56]	; 0x38
   14530:	strd	r0, [r5, #112]	; 0x70
   14534:	cmp	sl, #0
   14538:	strne	r7, [r5, #8]
   1453c:	bne	14558 <__assert_fail@plt+0x2bf0>
   14540:	cmp	r7, #0
   14544:	str	sl, [r5, #8]
   14548:	moveq	fp, r5
   1454c:	strne	r5, [fp, #8]
   14550:	movne	fp, r5
   14554:	movne	r5, r7
   14558:	add	r9, r9, #1
   1455c:	mov	r7, r5
   14560:	b	143f0 <__assert_fail@plt+0x2a88>
   14564:	sub	r2, r2, #1
   14568:	cmp	r2, #1
   1456c:	beq	144e4 <__assert_fail@plt+0x2b7c>
   14570:	ldrb	r1, [r0, r2]
   14574:	cmp	r1, #47	; 0x2f
   14578:	beq	14564 <__assert_fail@plt+0x2bfc>
   1457c:	b	144e4 <__assert_fail@plt+0x2b7c>
   14580:	mov	r1, r5
   14584:	mov	r0, r4
   14588:	bl	131e8 <__assert_fail@plt+0x1880>
   1458c:	strh	r0, [r5, #56]	; 0x38
   14590:	b	14534 <__assert_fail@plt+0x2bcc>
   14594:	mov	r0, r7
   14598:	bl	13480 <__assert_fail@plt+0x1b18>
   1459c:	mov	r0, r8
   145a0:	bl	130d0 <__assert_fail@plt+0x1768>
   145a4:	ldr	r0, [r4, #24]
   145a8:	bl	130d0 <__assert_fail@plt+0x1768>
   145ac:	mov	r0, r4
   145b0:	bl	130d0 <__assert_fail@plt+0x1768>
   145b4:	b	142f4 <__assert_fail@plt+0x298c>
   145b8:			; <UNDEFINED> instruction: 0x000197b3
   145bc:	andeq	r9, r1, r3, lsl #21
   145c0:	push	{r4, r5, r6, lr}
   145c4:	mov	r4, r0
   145c8:	ldr	r0, [r0]
   145cc:	cmp	r0, #0
   145d0:	bne	14668 <__assert_fail@plt+0x2d00>
   145d4:	ldr	r0, [r4, #4]
   145d8:	cmp	r0, #0
   145dc:	beq	145e4 <__assert_fail@plt+0x2c7c>
   145e0:	bl	13480 <__assert_fail@plt+0x1b18>
   145e4:	ldr	r0, [r4, #8]
   145e8:	bl	130d0 <__assert_fail@plt+0x1768>
   145ec:	ldr	r0, [r4, #24]
   145f0:	bl	130d0 <__assert_fail@plt+0x1768>
   145f4:	ldr	r3, [r4, #48]	; 0x30
   145f8:	tst	r3, #512	; 0x200
   145fc:	beq	14694 <__assert_fail@plt+0x2d2c>
   14600:	ldr	r0, [r4, #32]
   14604:	cmp	r0, #0
   14608:	bge	1467c <__assert_fail@plt+0x2d14>
   1460c:	mov	r5, #0
   14610:	add	r0, r4, #60	; 0x3c
   14614:	bl	134b4 <__assert_fail@plt+0x1b4c>
   14618:	ldr	r0, [r4, #52]	; 0x34
   1461c:	cmp	r0, #0
   14620:	beq	14628 <__assert_fail@plt+0x2cc0>
   14624:	bl	156c0 <__assert_fail@plt+0x3d58>
   14628:	mov	r0, r4
   1462c:	bl	13924 <__assert_fail@plt+0x1fbc>
   14630:	mov	r0, r4
   14634:	bl	130d0 <__assert_fail@plt+0x1768>
   14638:	cmp	r5, #0
   1463c:	beq	1464c <__assert_fail@plt+0x2ce4>
   14640:	bl	117a0 <__errno_location@plt>
   14644:	str	r5, [r0]
   14648:	mvn	r5, #0
   1464c:	mov	r0, r5
   14650:	pop	{r4, r5, r6, pc}
   14654:	ldr	r5, [r0, #8]
   14658:	cmp	r5, #0
   1465c:	ldreq	r5, [r0, #4]
   14660:	bl	130d0 <__assert_fail@plt+0x1768>
   14664:	mov	r0, r5
   14668:	ldr	r3, [r0, #48]	; 0x30
   1466c:	cmp	r3, #0
   14670:	bge	14654 <__assert_fail@plt+0x2cec>
   14674:	bl	130d0 <__assert_fail@plt+0x1768>
   14678:	b	145d4 <__assert_fail@plt+0x2c6c>
   1467c:	bl	11920 <close@plt>
   14680:	cmp	r0, #0
   14684:	beq	1460c <__assert_fail@plt+0x2ca4>
   14688:	bl	117a0 <__errno_location@plt>
   1468c:	ldr	r5, [r0]
   14690:	b	14610 <__assert_fail@plt+0x2ca8>
   14694:	tst	r3, #4
   14698:	bne	1460c <__assert_fail@plt+0x2ca4>
   1469c:	ldr	r0, [r4, #28]
   146a0:	bl	11884 <fchdir@plt>
   146a4:	subs	r5, r0, #0
   146a8:	beq	146b4 <__assert_fail@plt+0x2d4c>
   146ac:	bl	117a0 <__errno_location@plt>
   146b0:	ldr	r5, [r0]
   146b4:	ldr	r0, [r4, #28]
   146b8:	bl	11920 <close@plt>
   146bc:	adds	r0, r0, #0
   146c0:	movne	r0, #1
   146c4:	cmp	r5, #0
   146c8:	movne	r0, #0
   146cc:	cmp	r0, #0
   146d0:	beq	14610 <__assert_fail@plt+0x2ca8>
   146d4:	b	14688 <__assert_fail@plt+0x2d20>
   146d8:	push	{r4, r5, r6, r7, r8, lr}
   146dc:	ldr	r4, [r0]
   146e0:	cmp	r4, #0
   146e4:	bne	146f4 <__assert_fail@plt+0x2d8c>
   146e8:	mov	r4, #0
   146ec:	mov	r0, r4
   146f0:	pop	{r4, r5, r6, r7, r8, pc}
   146f4:	ldr	r1, [r0, #48]	; 0x30
   146f8:	mov	r5, r0
   146fc:	ands	r2, r1, #8192	; 0x2000
   14700:	bne	146e8 <__assert_fail@plt+0x2d80>
   14704:	ldrh	ip, [r4, #60]	; 0x3c
   14708:	mov	r3, #3
   1470c:	strh	r3, [r4, #60]	; 0x3c
   14710:	cmp	ip, #1
   14714:	bne	14728 <__assert_fail@plt+0x2dc0>
   14718:	mov	r1, r4
   1471c:	bl	131e8 <__assert_fail@plt+0x1880>
   14720:	strh	r0, [r4, #56]	; 0x38
   14724:	b	146ec <__assert_fail@plt+0x2d84>
   14728:	cmp	ip, #2
   1472c:	ldrh	r3, [r4, #56]	; 0x38
   14730:	bne	14810 <__assert_fail@plt+0x2ea8>
   14734:	sub	r2, r3, #12
   14738:	cmp	r2, #1
   1473c:	bhi	14c04 <__assert_fail@plt+0x329c>
   14740:	mov	r2, #1
   14744:	mov	r1, r4
   14748:	bl	131e8 <__assert_fail@plt+0x1880>
   1474c:	cmp	r0, #1
   14750:	strh	r0, [r4, #56]	; 0x38
   14754:	bne	1479c <__assert_fail@plt+0x2e34>
   14758:	ldr	r3, [r5, #48]	; 0x30
   1475c:	tst	r3, #4
   14760:	bne	1479c <__assert_fail@plt+0x2e34>
   14764:	ldr	r1, [pc, #1320]	; 14c94 <__assert_fail@plt+0x332c>
   14768:	mov	r0, r5
   1476c:	bl	1344c <__assert_fail@plt+0x1ae4>
   14770:	cmp	r0, #0
   14774:	str	r0, [r4, #36]	; 0x24
   14778:	ldrhge	r3, [r4, #58]	; 0x3a
   1477c:	orrge	r3, r3, #2
   14780:	strhge	r3, [r4, #58]	; 0x3a
   14784:	bge	1479c <__assert_fail@plt+0x2e34>
   14788:	bl	117a0 <__errno_location@plt>
   1478c:	ldr	r3, [r0]
   14790:	str	r3, [r4, #32]
   14794:	mov	r3, #7
   14798:	strh	r3, [r4, #56]	; 0x38
   1479c:	ldrh	r3, [r4, #56]	; 0x38
   147a0:	str	r4, [r5]
   147a4:	cmp	r3, #11
   147a8:	bne	147d0 <__assert_fail@plt+0x2e68>
   147ac:	ldrd	r2, [r4, #112]	; 0x70
   147b0:	cmp	r3, #0
   147b4:	cmpeq	r2, #2
   147b8:	bne	14a4c <__assert_fail@plt+0x30e4>
   147bc:	mov	r2, #0
   147c0:	mov	r1, r4
   147c4:	mov	r0, r5
   147c8:	bl	131e8 <__assert_fail@plt+0x1880>
   147cc:	strh	r0, [r4, #56]	; 0x38
   147d0:	ldrh	r3, [r4, #56]	; 0x38
   147d4:	cmp	r3, #1
   147d8:	bne	146ec <__assert_fail@plt+0x2d84>
   147dc:	ldr	r3, [r4, #48]	; 0x30
   147e0:	mov	r0, r5
   147e4:	mov	r1, r4
   147e8:	cmp	r3, #0
   147ec:	ldrdeq	r2, [r4, #64]	; 0x40
   147f0:	strdeq	r2, [r5, #16]
   147f4:	bl	1394c <__assert_fail@plt+0x1fe4>
   147f8:	subs	r5, r0, #0
   147fc:	bne	146ec <__assert_fail@plt+0x2d84>
   14800:	bl	117a0 <__errno_location@plt>
   14804:	mov	r3, #12
   14808:	str	r3, [r0]
   1480c:	b	146e8 <__assert_fail@plt+0x2d80>
   14810:	cmp	r3, #1
   14814:	bne	14c0c <__assert_fail@plt+0x32a4>
   14818:	cmp	ip, #4
   1481c:	beq	1483c <__assert_fail@plt+0x2ed4>
   14820:	tst	r1, #64	; 0x40
   14824:	beq	14880 <__assert_fail@plt+0x2f18>
   14828:	ldrd	r2, [r5, #16]
   1482c:	ldrd	r6, [r4, #64]	; 0x40
   14830:	cmp	r7, r3
   14834:	cmpeq	r6, r2
   14838:	beq	14880 <__assert_fail@plt+0x2f18>
   1483c:	ldrh	r3, [r4, #58]	; 0x3a
   14840:	tst	r3, #2
   14844:	beq	14850 <__assert_fail@plt+0x2ee8>
   14848:	ldr	r0, [r4, #36]	; 0x24
   1484c:	bl	11920 <close@plt>
   14850:	ldr	r0, [r5, #4]
   14854:	cmp	r0, #0
   14858:	beq	14868 <__assert_fail@plt+0x2f00>
   1485c:	bl	13480 <__assert_fail@plt+0x1b18>
   14860:	mov	r3, #0
   14864:	str	r3, [r5, #4]
   14868:	mov	r3, #6
   1486c:	strh	r3, [r4, #56]	; 0x38
   14870:	mov	r1, r4
   14874:	mov	r0, r5
   14878:	bl	139fc <__assert_fail@plt+0x2094>
   1487c:	b	146ec <__assert_fail@plt+0x2d84>
   14880:	ldr	r0, [r5, #4]
   14884:	cmp	r0, #0
   14888:	beq	148a8 <__assert_fail@plt+0x2f40>
   1488c:	tst	r1, #4096	; 0x1000
   14890:	beq	14b74 <__assert_fail@plt+0x320c>
   14894:	bic	r1, r1, #4096	; 0x1000
   14898:	str	r1, [r5, #48]	; 0x30
   1489c:	bl	13480 <__assert_fail@plt+0x1b18>
   148a0:	mov	r3, #0
   148a4:	str	r3, [r5, #4]
   148a8:	mov	r1, #3
   148ac:	mov	r0, r5
   148b0:	bl	13aac <__assert_fail@plt+0x2144>
   148b4:	cmp	r0, #0
   148b8:	str	r0, [r5, #4]
   148bc:	bne	14bb4 <__assert_fail@plt+0x324c>
   148c0:	ldr	r3, [r5, #48]	; 0x30
   148c4:	tst	r3, #8192	; 0x2000
   148c8:	bne	146e8 <__assert_fail@plt+0x2d80>
   148cc:	ldr	r3, [r4, #32]
   148d0:	cmp	r3, #0
   148d4:	beq	14870 <__assert_fail@plt+0x2f08>
   148d8:	ldrh	r3, [r4, #56]	; 0x38
   148dc:	cmp	r3, #4
   148e0:	beq	14870 <__assert_fail@plt+0x2f08>
   148e4:	mov	r3, #7
   148e8:	b	1486c <__assert_fail@plt+0x2f04>
   148ec:	ldr	r2, [r3, #4]
   148f0:	ldr	r2, [r2, #24]
   148f4:	str	r2, [r3, #24]
   148f8:	ldr	r3, [r3, #8]
   148fc:	b	14bac <__assert_fail@plt+0x3244>
   14900:	mov	r0, r6
   14904:	bl	130d0 <__assert_fail@plt+0x1768>
   14908:	b	14bc0 <__assert_fail@plt+0x3258>
   1490c:	mov	r0, r6
   14910:	str	r4, [r5]
   14914:	bl	130d0 <__assert_fail@plt+0x1768>
   14918:	ldr	r6, [r4, #48]	; 0x30
   1491c:	cmp	r6, #0
   14920:	bne	149c8 <__assert_fail@plt+0x3060>
   14924:	mov	r0, r5
   14928:	bl	1365c <__assert_fail@plt+0x1cf4>
   1492c:	cmp	r0, #0
   14930:	ldrne	r3, [r5, #48]	; 0x30
   14934:	orrne	r3, r3, #8192	; 0x2000
   14938:	strne	r3, [r5, #48]	; 0x30
   1493c:	bne	146e8 <__assert_fail@plt+0x2d80>
   14940:	mov	r0, r5
   14944:	add	r6, r4, #168	; 0xa8
   14948:	bl	13924 <__assert_fail@plt+0x1fbc>
   1494c:	ldr	r2, [r4, #52]	; 0x34
   14950:	mov	r1, r6
   14954:	ldr	r0, [r5, #24]
   14958:	str	r2, [r4, #40]	; 0x28
   1495c:	add	r2, r2, #1
   14960:	bl	11584 <memmove@plt>
   14964:	mov	r1, #47	; 0x2f
   14968:	mov	r0, r6
   1496c:	bl	1183c <strrchr@plt>
   14970:	cmp	r0, #0
   14974:	beq	149b0 <__assert_fail@plt+0x3048>
   14978:	cmp	r6, r0
   1497c:	bne	1498c <__assert_fail@plt+0x3024>
   14980:	ldrb	r3, [r6, #1]
   14984:	cmp	r3, #0
   14988:	beq	149b0 <__assert_fail@plt+0x3048>
   1498c:	add	r7, r0, #1
   14990:	mov	r0, r7
   14994:	bl	11764 <strlen@plt>
   14998:	mov	r8, r0
   1499c:	add	r2, r0, #1
   149a0:	mov	r1, r7
   149a4:	mov	r0, r6
   149a8:	bl	11584 <memmove@plt>
   149ac:	str	r8, [r4, #52]	; 0x34
   149b0:	ldr	r3, [r5, #24]
   149b4:	mov	r0, r5
   149b8:	str	r3, [r4, #24]
   149bc:	str	r3, [r4, #28]
   149c0:	bl	138b0 <__assert_fail@plt+0x1f48>
   149c4:	b	1479c <__assert_fail@plt+0x2e34>
   149c8:	ldrh	r3, [r4, #60]	; 0x3c
   149cc:	mov	r6, r4
   149d0:	cmp	r3, #4
   149d4:	beq	14c10 <__assert_fail@plt+0x32a8>
   149d8:	cmp	r3, #2
   149dc:	bne	14bc0 <__assert_fail@plt+0x3258>
   149e0:	mov	r2, #1
   149e4:	mov	r1, r4
   149e8:	mov	r0, r5
   149ec:	bl	131e8 <__assert_fail@plt+0x1880>
   149f0:	cmp	r0, #1
   149f4:	strh	r0, [r4, #56]	; 0x38
   149f8:	bne	14a40 <__assert_fail@plt+0x30d8>
   149fc:	ldr	r3, [r5, #48]	; 0x30
   14a00:	tst	r3, #4
   14a04:	bne	14a40 <__assert_fail@plt+0x30d8>
   14a08:	ldr	r1, [pc, #644]	; 14c94 <__assert_fail@plt+0x332c>
   14a0c:	mov	r0, r5
   14a10:	bl	1344c <__assert_fail@plt+0x1ae4>
   14a14:	cmp	r0, #0
   14a18:	str	r0, [r4, #36]	; 0x24
   14a1c:	ldrhge	r3, [r4, #58]	; 0x3a
   14a20:	orrge	r3, r3, #2
   14a24:	strhge	r3, [r4, #58]	; 0x3a
   14a28:	bge	14a40 <__assert_fail@plt+0x30d8>
   14a2c:	bl	117a0 <__errno_location@plt>
   14a30:	ldr	r3, [r0]
   14a34:	str	r3, [r4, #32]
   14a38:	mov	r3, #7
   14a3c:	strh	r3, [r4, #56]	; 0x38
   14a40:	mov	r3, #3
   14a44:	strh	r3, [r4, #60]	; 0x3c
   14a48:	b	14bc0 <__assert_fail@plt+0x3258>
   14a4c:	cmp	r3, #0
   14a50:	cmpeq	r2, #1
   14a54:	beq	146ec <__assert_fail@plt+0x2d84>
   14a58:	bl	11914 <abort@plt>
   14a5c:	ldrh	r3, [r4, #56]	; 0x38
   14a60:	cmp	r3, #11
   14a64:	beq	14a58 <__assert_fail@plt+0x30f0>
   14a68:	ldr	r2, [r5, #24]
   14a6c:	mov	r1, #0
   14a70:	ldr	r3, [r4, #40]	; 0x28
   14a74:	strb	r1, [r2, r3]
   14a78:	ldr	r3, [r4, #48]	; 0x30
   14a7c:	cmp	r3, r1
   14a80:	bne	14ab0 <__assert_fail@plt+0x3148>
   14a84:	mov	r0, r5
   14a88:	bl	1365c <__assert_fail@plt+0x1cf4>
   14a8c:	cmp	r0, #0
   14a90:	beq	14ae8 <__assert_fail@plt+0x3180>
   14a94:	bl	117a0 <__errno_location@plt>
   14a98:	ldr	r3, [r0]
   14a9c:	str	r3, [r4, #32]
   14aa0:	ldr	r3, [r5, #48]	; 0x30
   14aa4:	orr	r3, r3, #8192	; 0x2000
   14aa8:	str	r3, [r5, #48]	; 0x30
   14aac:	b	14ae8 <__assert_fail@plt+0x3180>
   14ab0:	ldrh	r3, [r4, #58]	; 0x3a
   14ab4:	tst	r3, #2
   14ab8:	beq	14b54 <__assert_fail@plt+0x31ec>
   14abc:	ldr	r3, [r5, #48]	; 0x30
   14ac0:	tst	r3, #4
   14ac4:	bne	14ae0 <__assert_fail@plt+0x3178>
   14ac8:	tst	r3, #512	; 0x200
   14acc:	ldr	r1, [r4, #36]	; 0x24
   14ad0:	beq	14b28 <__assert_fail@plt+0x31c0>
   14ad4:	mov	r2, #1
   14ad8:	mov	r0, r5
   14adc:	bl	135e8 <__assert_fail@plt+0x1c80>
   14ae0:	ldr	r0, [r4, #36]	; 0x24
   14ae4:	bl	11920 <close@plt>
   14ae8:	ldrh	r3, [r4, #56]	; 0x38
   14aec:	cmp	r3, #2
   14af0:	beq	14b18 <__assert_fail@plt+0x31b0>
   14af4:	ldr	r3, [r4, #32]
   14af8:	cmp	r3, #0
   14afc:	movne	r3, #7
   14b00:	moveq	r3, #6
   14b04:	strh	r3, [r4, #56]	; 0x38
   14b08:	bne	14b18 <__assert_fail@plt+0x31b0>
   14b0c:	mov	r1, r4
   14b10:	mov	r0, r5
   14b14:	bl	139fc <__assert_fail@plt+0x2094>
   14b18:	ldr	r3, [r5, #48]	; 0x30
   14b1c:	tst	r3, #8192	; 0x2000
   14b20:	beq	146ec <__assert_fail@plt+0x2d84>
   14b24:	b	146e8 <__assert_fail@plt+0x2d80>
   14b28:	mov	r0, r1
   14b2c:	bl	11884 <fchdir@plt>
   14b30:	cmp	r0, #0
   14b34:	beq	14ae0 <__assert_fail@plt+0x3178>
   14b38:	bl	117a0 <__errno_location@plt>
   14b3c:	ldr	r3, [r0]
   14b40:	str	r3, [r4, #32]
   14b44:	ldr	r3, [r5, #48]	; 0x30
   14b48:	orr	r3, r3, #8192	; 0x2000
   14b4c:	str	r3, [r5, #48]	; 0x30
   14b50:	b	14ae0 <__assert_fail@plt+0x3178>
   14b54:	tst	r3, #1
   14b58:	bne	14ae8 <__assert_fail@plt+0x3180>
   14b5c:	ldr	r3, [pc, #308]	; 14c98 <__assert_fail@plt+0x3330>
   14b60:	mvn	r2, #0
   14b64:	mov	r0, r5
   14b68:	ldr	r1, [r4, #4]
   14b6c:	bl	136ac <__assert_fail@plt+0x1d44>
   14b70:	b	14a8c <__assert_fail@plt+0x3124>
   14b74:	mvn	r2, #0
   14b78:	mov	r1, r4
   14b7c:	ldr	r3, [r4, #24]
   14b80:	mov	r0, r5
   14b84:	bl	136ac <__assert_fail@plt+0x1d44>
   14b88:	cmp	r0, #0
   14b8c:	beq	14bb4 <__assert_fail@plt+0x324c>
   14b90:	bl	117a0 <__errno_location@plt>
   14b94:	ldr	r3, [r0]
   14b98:	str	r3, [r4, #32]
   14b9c:	ldrh	r3, [r4, #58]	; 0x3a
   14ba0:	orr	r3, r3, #1
   14ba4:	strh	r3, [r4, #58]	; 0x3a
   14ba8:	ldr	r3, [r5, #4]
   14bac:	cmp	r3, #0
   14bb0:	bne	148ec <__assert_fail@plt+0x2f84>
   14bb4:	mov	r3, #0
   14bb8:	ldr	r4, [r5, #4]
   14bbc:	str	r3, [r5, #4]
   14bc0:	ldr	r0, [r4, #4]
   14bc4:	ldr	r2, [r5, #24]
   14bc8:	ldr	r1, [r0, #40]	; 0x28
   14bcc:	ldr	r0, [r0, #28]
   14bd0:	sub	r3, r1, #1
   14bd4:	ldrb	r0, [r0, r3]
   14bd8:	cmp	r0, #47	; 0x2f
   14bdc:	movne	r3, r1
   14be0:	mov	r1, #47	; 0x2f
   14be4:	add	r0, r2, r3
   14be8:	strb	r1, [r2, r3]
   14bec:	add	r0, r0, #1
   14bf0:	add	r1, r4, #168	; 0xa8
   14bf4:	ldr	r2, [r4, #52]	; 0x34
   14bf8:	add	r2, r2, #1
   14bfc:	bl	11584 <memmove@plt>
   14c00:	b	1479c <__assert_fail@plt+0x2e34>
   14c04:	cmp	r3, #1
   14c08:	beq	14820 <__assert_fail@plt+0x2eb8>
   14c0c:	mov	r6, r4
   14c10:	ldr	r4, [r6, #8]
   14c14:	cmp	r4, #0
   14c18:	bne	1490c <__assert_fail@plt+0x2fa4>
   14c1c:	ldr	r3, [r6, #4]
   14c20:	ldr	r2, [r3, #12]
   14c24:	cmp	r2, #0
   14c28:	beq	14c5c <__assert_fail@plt+0x32f4>
   14c2c:	str	r3, [r5]
   14c30:	mov	r1, #3
   14c34:	mov	r0, r5
   14c38:	ldr	r2, [r5, #24]
   14c3c:	ldr	r3, [r3, #40]	; 0x28
   14c40:	strb	r4, [r2, r3]
   14c44:	bl	13aac <__assert_fail@plt+0x2144>
   14c48:	subs	r4, r0, #0
   14c4c:	bne	14900 <__assert_fail@plt+0x2f98>
   14c50:	ldr	r3, [r5, #48]	; 0x30
   14c54:	tst	r3, #8192	; 0x2000
   14c58:	bne	146e8 <__assert_fail@plt+0x2d80>
   14c5c:	ldr	r4, [r6, #4]
   14c60:	mov	r0, r6
   14c64:	str	r4, [r5]
   14c68:	bl	130d0 <__assert_fail@plt+0x1768>
   14c6c:	ldr	r3, [r4, #48]	; 0x30
   14c70:	cmn	r3, #1
   14c74:	bne	14a5c <__assert_fail@plt+0x30f4>
   14c78:	mov	r0, r4
   14c7c:	mov	r4, #0
   14c80:	bl	130d0 <__assert_fail@plt+0x1768>
   14c84:	bl	117a0 <__errno_location@plt>
   14c88:	str	r4, [r0]
   14c8c:	str	r4, [r5]
   14c90:	b	146ec <__assert_fail@plt+0x2d84>
   14c94:	andeq	r9, r1, r3, lsl #21
   14c98:	andeq	r9, r1, r2, lsl #21
   14c9c:	cmp	r2, #4
   14ca0:	bls	14cbc <__assert_fail@plt+0x3354>
   14ca4:	push	{r4, lr}
   14ca8:	bl	117a0 <__errno_location@plt>
   14cac:	mov	r3, #22
   14cb0:	str	r3, [r0]
   14cb4:	mov	r0, #1
   14cb8:	pop	{r4, pc}
   14cbc:	mov	r0, #0
   14cc0:	strh	r2, [r1, #60]	; 0x3c
   14cc4:	bx	lr
   14cc8:	push	{r4, r5, r6, r7, r8, lr}
   14ccc:	mov	r7, r1
   14cd0:	mov	r5, r0
   14cd4:	bl	117a0 <__errno_location@plt>
   14cd8:	bics	r2, r7, #4096	; 0x1000
   14cdc:	mov	r6, r0
   14ce0:	beq	14cf4 <__assert_fail@plt+0x338c>
   14ce4:	mov	r3, #22
   14ce8:	str	r3, [r0]
   14cec:	mov	r0, #0
   14cf0:	pop	{r4, r5, r6, r7, r8, pc}
   14cf4:	ldr	r4, [r5]
   14cf8:	str	r2, [r0]
   14cfc:	ldr	r3, [r5, #48]	; 0x30
   14d00:	ands	r0, r3, #8192	; 0x2000
   14d04:	bne	14cec <__assert_fail@plt+0x3384>
   14d08:	ldrh	r3, [r4, #56]	; 0x38
   14d0c:	cmp	r3, #9
   14d10:	bne	14d1c <__assert_fail@plt+0x33b4>
   14d14:	ldr	r0, [r4, #8]
   14d18:	pop	{r4, r5, r6, r7, r8, pc}
   14d1c:	cmp	r3, #1
   14d20:	popne	{r4, r5, r6, r7, r8, pc}
   14d24:	ldr	r0, [r5, #4]
   14d28:	cmp	r0, #0
   14d2c:	beq	14d34 <__assert_fail@plt+0x33cc>
   14d30:	bl	13480 <__assert_fail@plt+0x1b18>
   14d34:	cmp	r7, #4096	; 0x1000
   14d38:	ldreq	r3, [r5, #48]	; 0x30
   14d3c:	moveq	r8, #2
   14d40:	movne	r8, #1
   14d44:	orreq	r3, r3, #4096	; 0x1000
   14d48:	streq	r3, [r5, #48]	; 0x30
   14d4c:	ldr	r3, [r4, #48]	; 0x30
   14d50:	cmp	r3, #0
   14d54:	bne	14d74 <__assert_fail@plt+0x340c>
   14d58:	ldr	r3, [r4, #24]
   14d5c:	ldrb	r3, [r3]
   14d60:	cmp	r3, #47	; 0x2f
   14d64:	beq	14d74 <__assert_fail@plt+0x340c>
   14d68:	ldr	r0, [r5, #48]	; 0x30
   14d6c:	ands	r4, r0, #4
   14d70:	beq	14d88 <__assert_fail@plt+0x3420>
   14d74:	mov	r1, r8
   14d78:	mov	r0, r5
   14d7c:	bl	13aac <__assert_fail@plt+0x2144>
   14d80:	str	r0, [r5, #4]
   14d84:	pop	{r4, r5, r6, r7, r8, pc}
   14d88:	ldr	r1, [pc, #116]	; 14e04 <__assert_fail@plt+0x349c>
   14d8c:	mov	r0, r5
   14d90:	bl	1344c <__assert_fail@plt+0x1ae4>
   14d94:	subs	r7, r0, #0
   14d98:	strlt	r4, [r5, #4]
   14d9c:	blt	14cec <__assert_fail@plt+0x3384>
   14da0:	mov	r1, r8
   14da4:	mov	r0, r5
   14da8:	bl	13aac <__assert_fail@plt+0x2144>
   14dac:	str	r0, [r5, #4]
   14db0:	ldr	r0, [r5, #48]	; 0x30
   14db4:	ands	r4, r0, #512	; 0x200
   14db8:	beq	14dd4 <__assert_fail@plt+0x346c>
   14dbc:	mov	r2, #1
   14dc0:	mov	r1, r7
   14dc4:	mov	r0, r5
   14dc8:	bl	135e8 <__assert_fail@plt+0x1c80>
   14dcc:	ldr	r0, [r5, #4]
   14dd0:	pop	{r4, r5, r6, r7, r8, pc}
   14dd4:	mov	r0, r7
   14dd8:	bl	11884 <fchdir@plt>
   14ddc:	cmp	r0, #0
   14de0:	beq	14df8 <__assert_fail@plt+0x3490>
   14de4:	ldr	r5, [r6]
   14de8:	mov	r0, r7
   14dec:	bl	11920 <close@plt>
   14df0:	str	r5, [r6]
   14df4:	b	14cec <__assert_fail@plt+0x3384>
   14df8:	mov	r0, r7
   14dfc:	bl	11920 <close@plt>
   14e00:	b	14dcc <__assert_fail@plt+0x3464>
   14e04:	andeq	r9, r1, r3, lsl #21
   14e08:	ror	r0, r0, #3
   14e0c:	udiv	r3, r0, r1
   14e10:	mls	r0, r3, r1, r0
   14e14:	bx	lr
   14e18:	sub	r0, r1, r0
   14e1c:	clz	r0, r0
   14e20:	lsr	r0, r0, #5
   14e24:	bx	lr
   14e28:	ldrb	r3, [r1, #16]
   14e2c:	cmp	r3, #0
   14e30:	bne	14e5c <__assert_fail@plt+0x34f4>
   14e34:	vmov	s15, r0
   14e38:	vldr	s14, [r1, #8]
   14e3c:	vcvt.f32.u32	s13, s15
   14e40:	vdiv.f32	s15, s13, s14
   14e44:	vldr	s14, [pc, #140]	; 14ed8 <__assert_fail@plt+0x3570>
   14e48:	vcmpe.f32	s15, s14
   14e4c:	vmrs	APSR_nzcv, fpscr
   14e50:	bge	14e70 <__assert_fail@plt+0x3508>
   14e54:	vcvt.u32.f32	s15, s15
   14e58:	vmov	r0, s15
   14e5c:	cmp	r0, #10
   14e60:	movcc	r0, #10
   14e64:	orr	r0, r0, #1
   14e68:	cmn	r0, #1
   14e6c:	bne	14ea4 <__assert_fail@plt+0x353c>
   14e70:	mov	r0, #0
   14e74:	bx	lr
   14e78:	add	r2, r3, #1
   14e7c:	add	r3, r3, #2
   14e80:	add	r1, r1, r2, lsl #2
   14e84:	udiv	r2, r0, r3
   14e88:	cmp	r0, r1
   14e8c:	mls	r2, r3, r2, r0
   14e90:	bls	14eb0 <__assert_fail@plt+0x3548>
   14e94:	cmp	r2, #0
   14e98:	bne	14e78 <__assert_fail@plt+0x3510>
   14e9c:	add	r0, r0, #2
   14ea0:	b	14e68 <__assert_fail@plt+0x3500>
   14ea4:	mov	r1, #9
   14ea8:	mov	r3, #3
   14eac:	b	14e84 <__assert_fail@plt+0x351c>
   14eb0:	cmp	r2, #0
   14eb4:	beq	14e9c <__assert_fail@plt+0x3534>
   14eb8:	lsrs	r3, r0, #30
   14ebc:	movne	r3, #1
   14ec0:	moveq	r3, #0
   14ec4:	tst	r0, #536870912	; 0x20000000
   14ec8:	bne	14e70 <__assert_fail@plt+0x3508>
   14ecc:	cmp	r3, #0
   14ed0:	bxeq	lr
   14ed4:	b	14e70 <__assert_fail@plt+0x3508>
   14ed8:	svcmi	0x00800000
   14edc:	push	{r4, lr}
   14ee0:	mov	r4, r0
   14ee4:	mov	r0, r1
   14ee8:	ldr	r1, [r4, #8]
   14eec:	ldr	r3, [r4, #24]
   14ef0:	blx	r3
   14ef4:	ldr	r3, [r4, #8]
   14ef8:	cmp	r3, r0
   14efc:	bhi	14f04 <__assert_fail@plt+0x359c>
   14f00:	bl	11914 <abort@plt>
   14f04:	ldr	r3, [r4]
   14f08:	add	r0, r3, r0, lsl #3
   14f0c:	pop	{r4, pc}
   14f10:	push	{r4, r5, r6, r7, r8, lr}
   14f14:	mov	r8, r2
   14f18:	mov	r6, r1
   14f1c:	mov	r5, r0
   14f20:	mov	r7, r3
   14f24:	bl	14edc <__assert_fail@plt+0x3574>
   14f28:	str	r0, [r8]
   14f2c:	ldr	r1, [r0]
   14f30:	cmp	r1, #0
   14f34:	bne	14f44 <__assert_fail@plt+0x35dc>
   14f38:	mov	r2, #0
   14f3c:	mov	r0, r2
   14f40:	pop	{r4, r5, r6, r7, r8, pc}
   14f44:	cmp	r1, r6
   14f48:	mov	r4, r0
   14f4c:	beq	14f64 <__assert_fail@plt+0x35fc>
   14f50:	mov	r0, r6
   14f54:	ldr	r3, [r5, #28]
   14f58:	blx	r3
   14f5c:	cmp	r0, #0
   14f60:	beq	14fb8 <__assert_fail@plt+0x3650>
   14f64:	cmp	r7, #0
   14f68:	ldr	r2, [r4]
   14f6c:	beq	14f3c <__assert_fail@plt+0x35d4>
   14f70:	ldr	r3, [r4, #4]
   14f74:	cmp	r3, #0
   14f78:	streq	r3, [r4]
   14f7c:	beq	14f3c <__assert_fail@plt+0x35d4>
   14f80:	ldm	r3, {r0, r1}
   14f84:	stm	r4, {r0, r1}
   14f88:	mov	r1, #0
   14f8c:	str	r1, [r3]
   14f90:	ldr	r1, [r5, #36]	; 0x24
   14f94:	str	r1, [r3, #4]
   14f98:	str	r3, [r5, #36]	; 0x24
   14f9c:	b	14f3c <__assert_fail@plt+0x35d4>
   14fa0:	mov	r0, r6
   14fa4:	ldr	r3, [r5, #28]
   14fa8:	blx	r3
   14fac:	cmp	r0, #0
   14fb0:	bne	14fd0 <__assert_fail@plt+0x3668>
   14fb4:	ldr	r4, [r4, #4]
   14fb8:	ldr	r3, [r4, #4]
   14fbc:	cmp	r3, #0
   14fc0:	beq	14f38 <__assert_fail@plt+0x35d0>
   14fc4:	ldr	r1, [r3]
   14fc8:	cmp	r1, r6
   14fcc:	bne	14fa0 <__assert_fail@plt+0x3638>
   14fd0:	ldr	r3, [r4, #4]
   14fd4:	cmp	r7, #0
   14fd8:	ldr	r2, [r3]
   14fdc:	beq	14f3c <__assert_fail@plt+0x35d4>
   14fe0:	ldr	r1, [r3, #4]
   14fe4:	str	r1, [r4, #4]
   14fe8:	b	14f88 <__assert_fail@plt+0x3620>
   14fec:	ldr	r2, [pc, #164]	; 15098 <__assert_fail@plt+0x3730>
   14ff0:	ldr	r3, [r0]
   14ff4:	cmp	r3, r2
   14ff8:	beq	15080 <__assert_fail@plt+0x3718>
   14ffc:	vldr	s13, [pc, #132]	; 15088 <__assert_fail@plt+0x3720>
   15000:	vldr	s14, [r3, #8]
   15004:	vcmpe.f32	s14, s13
   15008:	vmrs	APSR_nzcv, fpscr
   1500c:	ble	15074 <__assert_fail@plt+0x370c>
   15010:	vldr	s15, [pc, #116]	; 1508c <__assert_fail@plt+0x3724>
   15014:	vcmpe.f32	s14, s15
   15018:	vmrs	APSR_nzcv, fpscr
   1501c:	bpl	15074 <__assert_fail@plt+0x370c>
   15020:	vldr	s15, [pc, #104]	; 15090 <__assert_fail@plt+0x3728>
   15024:	vldr	s12, [r3, #12]
   15028:	vcmpe.f32	s12, s15
   1502c:	vmrs	APSR_nzcv, fpscr
   15030:	ble	15074 <__assert_fail@plt+0x370c>
   15034:	vldr	s15, [r3]
   15038:	vcmpe.f32	s15, #0.0
   1503c:	vmrs	APSR_nzcv, fpscr
   15040:	blt	15074 <__assert_fail@plt+0x370c>
   15044:	vadd.f32	s15, s15, s13
   15048:	vldr	s13, [r3, #4]
   1504c:	vcmpe.f32	s15, s13
   15050:	vmrs	APSR_nzcv, fpscr
   15054:	bpl	15074 <__assert_fail@plt+0x370c>
   15058:	vldr	s12, [pc, #52]	; 15094 <__assert_fail@plt+0x372c>
   1505c:	vcmpe.f32	s13, s12
   15060:	vmrs	APSR_nzcv, fpscr
   15064:	bhi	15074 <__assert_fail@plt+0x370c>
   15068:	vcmpe.f32	s14, s15
   1506c:	vmrs	APSR_nzcv, fpscr
   15070:	bgt	15080 <__assert_fail@plt+0x3718>
   15074:	str	r2, [r0]
   15078:	mov	r0, #0
   1507c:	bx	lr
   15080:	mov	r0, #1
   15084:	bx	lr
   15088:	stclcc	12, cr12, [ip, #820]	; 0x334
   1508c:	svccc	0x00666666
   15090:	svccc	0x008ccccd
   15094:	svccc	0x00800000
   15098:	andeq	r9, r1, r8, lsl #21
   1509c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150a0:	mov	r5, r0
   150a4:	mov	r7, r1
   150a8:	mov	r8, r2
   150ac:	mov	r9, #0
   150b0:	ldr	r4, [r1]
   150b4:	add	r4, r4, #8
   150b8:	ldr	r2, [r7, #4]
   150bc:	sub	r3, r4, #8
   150c0:	cmp	r2, r3
   150c4:	bhi	150d4 <__assert_fail@plt+0x376c>
   150c8:	mov	r8, #1
   150cc:	mov	r0, r8
   150d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150d4:	ldr	r3, [r4, #-8]
   150d8:	cmp	r3, #0
   150dc:	ldrne	r6, [r4, #-4]
   150e0:	bne	1513c <__assert_fail@plt+0x37d4>
   150e4:	add	r4, r4, #8
   150e8:	b	150b8 <__assert_fail@plt+0x3750>
   150ec:	ldr	sl, [r6]
   150f0:	mov	r0, r5
   150f4:	mov	r1, sl
   150f8:	bl	14edc <__assert_fail@plt+0x3574>
   150fc:	ldr	r2, [r0]
   15100:	ldr	r1, [r6, #4]
   15104:	cmp	r2, #0
   15108:	ldrne	r3, [r0, #4]
   1510c:	strne	r3, [r6, #4]
   15110:	strne	r6, [r0, #4]
   15114:	bne	15138 <__assert_fail@plt+0x37d0>
   15118:	ldr	r3, [r5, #12]
   1511c:	str	sl, [r0]
   15120:	add	r3, r3, #1
   15124:	str	r3, [r5, #12]
   15128:	str	r2, [r6]
   1512c:	ldr	r3, [r5, #36]	; 0x24
   15130:	str	r3, [r6, #4]
   15134:	str	r6, [r5, #36]	; 0x24
   15138:	mov	r6, r1
   1513c:	cmp	r6, #0
   15140:	bne	150ec <__assert_fail@plt+0x3784>
   15144:	cmp	r8, #0
   15148:	str	r6, [r4, #-4]
   1514c:	ldr	sl, [r4, #-8]
   15150:	bne	150e4 <__assert_fail@plt+0x377c>
   15154:	mov	r1, sl
   15158:	mov	r0, r5
   1515c:	bl	14edc <__assert_fail@plt+0x3574>
   15160:	ldr	r3, [r0]
   15164:	mov	r6, r0
   15168:	cmp	r3, #0
   1516c:	beq	151b8 <__assert_fail@plt+0x3850>
   15170:	ldr	r0, [r5, #36]	; 0x24
   15174:	cmp	r0, #0
   15178:	ldrne	r3, [r0, #4]
   1517c:	strne	r3, [r5, #36]	; 0x24
   15180:	bne	15194 <__assert_fail@plt+0x382c>
   15184:	mov	r0, #8
   15188:	bl	187a4 <lchmod@@Base+0x2afc>
   1518c:	cmp	r0, #0
   15190:	beq	150cc <__assert_fail@plt+0x3764>
   15194:	ldr	r3, [r6, #4]
   15198:	str	sl, [r0]
   1519c:	str	r3, [r0, #4]
   151a0:	str	r0, [r6, #4]
   151a4:	ldr	r3, [r7, #12]
   151a8:	str	r9, [r4, #-8]
   151ac:	sub	r3, r3, #1
   151b0:	str	r3, [r7, #12]
   151b4:	b	150e4 <__assert_fail@plt+0x377c>
   151b8:	ldr	r3, [r5, #12]
   151bc:	str	sl, [r0]
   151c0:	add	r3, r3, #1
   151c4:	str	r3, [r5, #12]
   151c8:	b	151a4 <__assert_fail@plt+0x383c>
   151cc:	ldr	r0, [r0, #8]
   151d0:	bx	lr
   151d4:	ldr	r0, [r0, #12]
   151d8:	bx	lr
   151dc:	ldr	r0, [r0, #16]
   151e0:	bx	lr
   151e4:	ldm	r0, {r3, ip}
   151e8:	mov	r0, #0
   151ec:	cmp	ip, r3
   151f0:	bxls	lr
   151f4:	ldr	r2, [r3]
   151f8:	cmp	r2, #0
   151fc:	beq	15224 <__assert_fail@plt+0x38bc>
   15200:	mov	r1, r3
   15204:	mov	r2, #1
   15208:	b	15210 <__assert_fail@plt+0x38a8>
   1520c:	add	r2, r2, #1
   15210:	ldr	r1, [r1, #4]
   15214:	cmp	r1, #0
   15218:	bne	1520c <__assert_fail@plt+0x38a4>
   1521c:	cmp	r0, r2
   15220:	movcc	r0, r2
   15224:	add	r3, r3, #8
   15228:	b	151ec <__assert_fail@plt+0x3884>
   1522c:	push	{lr}		; (str lr, [sp, #-4]!)
   15230:	mov	r3, #0
   15234:	mov	r1, r3
   15238:	ldm	r0, {r2, lr}
   1523c:	cmp	lr, r2
   15240:	bhi	15264 <__assert_fail@plt+0x38fc>
   15244:	ldr	r2, [r0, #12]
   15248:	cmp	r2, r1
   1524c:	ldreq	r0, [r0, #16]
   15250:	subeq	r0, r0, r3
   15254:	clzeq	r0, r0
   15258:	lsreq	r0, r0, #5
   1525c:	movne	r0, #0
   15260:	pop	{pc}		; (ldr pc, [sp], #4)
   15264:	ldr	ip, [r2]
   15268:	cmp	ip, #0
   1526c:	addne	r1, r1, #1
   15270:	addne	r3, r3, #1
   15274:	movne	ip, r2
   15278:	bne	15288 <__assert_fail@plt+0x3920>
   1527c:	add	r2, r2, #8
   15280:	b	1523c <__assert_fail@plt+0x38d4>
   15284:	add	r3, r3, #1
   15288:	ldr	ip, [ip, #4]
   1528c:	cmp	ip, #0
   15290:	bne	15284 <__assert_fail@plt+0x391c>
   15294:	b	1527c <__assert_fail@plt+0x3914>
   15298:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1529c:	mov	r6, r0
   152a0:	mov	r4, r1
   152a4:	bl	151e4 <__assert_fail@plt+0x387c>
   152a8:	ldr	r5, [r6, #8]
   152ac:	mov	r8, r0
   152b0:	mov	r1, #1
   152b4:	mov	r0, r4
   152b8:	ldr	r7, [r6, #12]
   152bc:	ldr	r2, [pc, #116]	; 15338 <__assert_fail@plt+0x39d0>
   152c0:	ldr	r3, [r6, #16]
   152c4:	bl	117f4 <__fprintf_chk@plt>
   152c8:	mov	r3, r5
   152cc:	ldr	r2, [pc, #104]	; 1533c <__assert_fail@plt+0x39d4>
   152d0:	mov	r1, #1
   152d4:	mov	r0, r4
   152d8:	bl	117f4 <__fprintf_chk@plt>
   152dc:	vmov	s15, r7
   152e0:	mov	r3, r7
   152e4:	mov	r1, #1
   152e8:	ldr	r2, [pc, #80]	; 15340 <__assert_fail@plt+0x39d8>
   152ec:	mov	r0, r4
   152f0:	vcvt.f64.u32	d6, s15
   152f4:	vldr	d7, [pc, #52]	; 15330 <__assert_fail@plt+0x39c8>
   152f8:	vmul.f64	d6, d6, d7
   152fc:	vmov	s15, r5
   15300:	vcvt.f64.u32	d7, s15
   15304:	vdiv.f64	d5, d6, d7
   15308:	vstr	d5, [sp]
   1530c:	bl	117f4 <__fprintf_chk@plt>
   15310:	ldr	r2, [pc, #44]	; 15344 <__assert_fail@plt+0x39dc>
   15314:	mov	r3, r8
   15318:	mov	r1, #1
   1531c:	mov	r0, r4
   15320:	add	sp, sp, #8
   15324:	pop	{r4, r5, r6, r7, r8, lr}
   15328:	b	117f4 <__fprintf_chk@plt>
   1532c:	nop	{0}
   15330:	andeq	r0, r0, r0
   15334:	subsmi	r0, r9, r0
   15338:	muleq	r1, ip, sl
   1533c:			; <UNDEFINED> instruction: 0x00019ab4
   15340:	andeq	r9, r1, ip, asr #21
   15344:	andeq	r9, r1, sp, ror #21
   15348:	push	{r4, r5, r6, lr}
   1534c:	mov	r6, r0
   15350:	mov	r5, r1
   15354:	bl	14edc <__assert_fail@plt+0x3574>
   15358:	ldr	r3, [r0]
   1535c:	cmp	r3, #0
   15360:	beq	1539c <__assert_fail@plt+0x3a34>
   15364:	mov	r4, r0
   15368:	ldr	r1, [r4]
   1536c:	cmp	r1, r5
   15370:	bne	1537c <__assert_fail@plt+0x3a14>
   15374:	ldr	r0, [r4]
   15378:	pop	{r4, r5, r6, pc}
   1537c:	mov	r0, r5
   15380:	ldr	r3, [r6, #28]
   15384:	blx	r3
   15388:	cmp	r0, #0
   1538c:	bne	15374 <__assert_fail@plt+0x3a0c>
   15390:	ldr	r4, [r4, #4]
   15394:	cmp	r4, #0
   15398:	bne	15368 <__assert_fail@plt+0x3a00>
   1539c:	mov	r0, #0
   153a0:	pop	{r4, r5, r6, pc}
   153a4:	ldr	r3, [r0, #16]
   153a8:	cmp	r3, #0
   153ac:	beq	153dc <__assert_fail@plt+0x3a74>
   153b0:	ldr	r3, [r0]
   153b4:	ldr	r2, [r0, #4]
   153b8:	cmp	r2, r3
   153bc:	bhi	153c8 <__assert_fail@plt+0x3a60>
   153c0:	push	{r4, lr}
   153c4:	bl	11914 <abort@plt>
   153c8:	ldr	r0, [r3]
   153cc:	cmp	r0, #0
   153d0:	bxne	lr
   153d4:	add	r3, r3, #8
   153d8:	b	153b8 <__assert_fail@plt+0x3a50>
   153dc:	mov	r0, r3
   153e0:	bx	lr
   153e4:	push	{r4, r5, r6, lr}
   153e8:	mov	r4, r0
   153ec:	mov	r5, r1
   153f0:	bl	14edc <__assert_fail@plt+0x3574>
   153f4:	mov	r2, r0
   153f8:	mov	r3, r0
   153fc:	ldm	r3, {r1, r3}
   15400:	cmp	r1, r5
   15404:	bne	15418 <__assert_fail@plt+0x3ab0>
   15408:	cmp	r3, #0
   1540c:	beq	15420 <__assert_fail@plt+0x3ab8>
   15410:	ldr	r0, [r3]
   15414:	pop	{r4, r5, r6, pc}
   15418:	cmp	r3, #0
   1541c:	bne	153fc <__assert_fail@plt+0x3a94>
   15420:	ldr	r3, [r4, #4]
   15424:	add	r2, r2, #8
   15428:	cmp	r3, r2
   1542c:	bhi	15438 <__assert_fail@plt+0x3ad0>
   15430:	mov	r0, #0
   15434:	pop	{r4, r5, r6, pc}
   15438:	ldr	r0, [r2]
   1543c:	cmp	r0, #0
   15440:	beq	15424 <__assert_fail@plt+0x3abc>
   15444:	pop	{r4, r5, r6, pc}
   15448:	ldr	ip, [r0]
   1544c:	mov	r3, #0
   15450:	push	{r4, r5, lr}
   15454:	ldr	lr, [r0, #4]
   15458:	cmp	lr, ip
   1545c:	bhi	15468 <__assert_fail@plt+0x3b00>
   15460:	mov	r0, r3
   15464:	pop	{r4, r5, pc}
   15468:	ldr	lr, [ip]
   1546c:	cmp	lr, #0
   15470:	beq	1549c <__assert_fail@plt+0x3b34>
   15474:	add	r4, r1, r3, lsl #2
   15478:	mov	lr, ip
   1547c:	cmp	r2, r3
   15480:	bls	15460 <__assert_fail@plt+0x3af8>
   15484:	ldr	r5, [lr]
   15488:	add	r3, r3, #1
   1548c:	str	r5, [r4], #4
   15490:	ldr	lr, [lr, #4]
   15494:	cmp	lr, #0
   15498:	bne	1547c <__assert_fail@plt+0x3b14>
   1549c:	add	ip, ip, #8
   154a0:	b	15454 <__assert_fail@plt+0x3aec>
   154a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154a8:	mov	r7, r0
   154ac:	mov	r8, r1
   154b0:	mov	r9, r2
   154b4:	mov	r6, #0
   154b8:	ldr	r4, [r0]
   154bc:	ldr	r3, [r7, #4]
   154c0:	cmp	r3, r4
   154c4:	bhi	154d0 <__assert_fail@plt+0x3b68>
   154c8:	mov	r0, r6
   154cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154d0:	ldr	r3, [r4]
   154d4:	cmp	r3, #0
   154d8:	beq	15504 <__assert_fail@plt+0x3b9c>
   154dc:	mov	r5, r4
   154e0:	mov	r1, r9
   154e4:	ldr	r0, [r5]
   154e8:	blx	r8
   154ec:	cmp	r0, #0
   154f0:	beq	154c8 <__assert_fail@plt+0x3b60>
   154f4:	ldr	r5, [r5, #4]
   154f8:	add	r6, r6, #1
   154fc:	cmp	r5, #0
   15500:	bne	154e0 <__assert_fail@plt+0x3b78>
   15504:	add	r4, r4, #8
   15508:	b	154bc <__assert_fail@plt+0x3b54>
   1550c:	sub	r2, r0, #1
   15510:	mov	r0, #0
   15514:	ldrb	r3, [r2, #1]!
   15518:	cmp	r3, #0
   1551c:	bxeq	lr
   15520:	rsb	r0, r0, r0, lsl #5
   15524:	add	r0, r0, r3
   15528:	udiv	r3, r0, r1
   1552c:	mls	r0, r1, r3, r0
   15530:	b	15514 <__assert_fail@plt+0x3bac>
   15534:	push	{lr}		; (str lr, [sp, #-4]!)
   15538:	mov	ip, r0
   1553c:	ldr	lr, [pc, #16]	; 15554 <__assert_fail@plt+0x3bec>
   15540:	ldm	lr!, {r0, r1, r2, r3}
   15544:	stmia	ip!, {r0, r1, r2, r3}
   15548:	ldr	r3, [lr]
   1554c:	str	r3, [ip]
   15550:	pop	{pc}		; (ldr pc, [sp], #4)
   15554:	andeq	r9, r1, r8, lsl #21
   15558:	cmp	r2, #0
   1555c:	push	{r4, r5, r6, r7, r8, lr}
   15560:	mov	r8, r0
   15564:	mov	r0, #40	; 0x28
   15568:	mov	r5, r1
   1556c:	ldr	r7, [pc, #164]	; 15618 <__assert_fail@plt+0x3cb0>
   15570:	movne	r7, r2
   15574:	cmp	r3, #0
   15578:	ldr	r6, [pc, #156]	; 1561c <__assert_fail@plt+0x3cb4>
   1557c:	movne	r6, r3
   15580:	bl	187a4 <lchmod@@Base+0x2afc>
   15584:	subs	r4, r0, #0
   15588:	beq	15600 <__assert_fail@plt+0x3c98>
   1558c:	ldr	r3, [pc, #140]	; 15620 <__assert_fail@plt+0x3cb8>
   15590:	cmp	r5, #0
   15594:	mov	r0, r4
   15598:	moveq	r5, r3
   1559c:	str	r5, [r0, #20]!
   155a0:	bl	14fec <__assert_fail@plt+0x3684>
   155a4:	cmp	r0, #0
   155a8:	beq	15608 <__assert_fail@plt+0x3ca0>
   155ac:	mov	r1, r5
   155b0:	mov	r0, r8
   155b4:	bl	14e28 <__assert_fail@plt+0x34c0>
   155b8:	cmp	r0, #0
   155bc:	str	r0, [r4, #8]
   155c0:	beq	15608 <__assert_fail@plt+0x3ca0>
   155c4:	mov	r1, #8
   155c8:	bl	18750 <lchmod@@Base+0x2aa8>
   155cc:	cmp	r0, #0
   155d0:	str	r0, [r4]
   155d4:	beq	15608 <__assert_fail@plt+0x3ca0>
   155d8:	ldr	r3, [r4, #8]
   155dc:	str	r7, [r4, #24]
   155e0:	ldr	r2, [sp, #24]
   155e4:	str	r6, [r4, #28]
   155e8:	add	r0, r0, r3, lsl #3
   155ec:	mov	r3, #0
   155f0:	str	r0, [r4, #4]
   155f4:	str	r3, [r4, #12]
   155f8:	str	r3, [r4, #16]
   155fc:	strd	r2, [r4, #32]
   15600:	mov	r0, r4
   15604:	pop	{r4, r5, r6, r7, r8, pc}
   15608:	mov	r0, r4
   1560c:	mov	r4, #0
   15610:	bl	130d0 <__assert_fail@plt+0x1768>
   15614:	b	15600 <__assert_fail@plt+0x3c98>
   15618:	andeq	r4, r1, r8, lsl #28
   1561c:	andeq	r4, r1, r8, lsl lr
   15620:	andeq	r9, r1, r8, lsl #21
   15624:	push	{r4, r5, r6, r7, r8, lr}
   15628:	mov	r5, r0
   1562c:	mov	r7, #0
   15630:	ldr	r4, [r0]
   15634:	add	r4, r4, #8
   15638:	ldr	r2, [r5, #4]
   1563c:	sub	r3, r4, #8
   15640:	cmp	r2, r3
   15644:	bhi	15658 <__assert_fail@plt+0x3cf0>
   15648:	mov	r3, #0
   1564c:	str	r3, [r5, #12]
   15650:	str	r3, [r5, #16]
   15654:	pop	{r4, r5, r6, r7, r8, pc}
   15658:	ldr	r3, [r4, #-8]
   1565c:	cmp	r3, #0
   15660:	ldrne	r6, [r4, #-4]
   15664:	bne	15698 <__assert_fail@plt+0x3d30>
   15668:	add	r4, r4, #8
   1566c:	b	15638 <__assert_fail@plt+0x3cd0>
   15670:	cmp	r3, #0
   15674:	beq	15680 <__assert_fail@plt+0x3d18>
   15678:	ldr	r0, [r6]
   1567c:	blx	r3
   15680:	ldr	r3, [r6, #4]
   15684:	ldr	r2, [r5, #36]	; 0x24
   15688:	str	r7, [r6]
   1568c:	str	r2, [r6, #4]
   15690:	str	r6, [r5, #36]	; 0x24
   15694:	mov	r6, r3
   15698:	cmp	r6, #0
   1569c:	ldr	r3, [r5, #32]
   156a0:	bne	15670 <__assert_fail@plt+0x3d08>
   156a4:	cmp	r3, #0
   156a8:	beq	156b4 <__assert_fail@plt+0x3d4c>
   156ac:	ldr	r0, [r4, #-8]
   156b0:	blx	r3
   156b4:	str	r7, [r4, #-8]
   156b8:	str	r7, [r4, #-4]
   156bc:	b	15668 <__assert_fail@plt+0x3d00>
   156c0:	ldr	r3, [r0, #32]
   156c4:	push	{r4, r5, r6, lr}
   156c8:	mov	r4, r0
   156cc:	cmp	r3, #0
   156d0:	bne	15704 <__assert_fail@plt+0x3d9c>
   156d4:	ldr	r5, [r4]
   156d8:	ldr	r3, [r4, #4]
   156dc:	cmp	r3, r5
   156e0:	bhi	15754 <__assert_fail@plt+0x3dec>
   156e4:	ldr	r0, [r4, #36]	; 0x24
   156e8:	cmp	r0, #0
   156ec:	bne	15774 <__assert_fail@plt+0x3e0c>
   156f0:	ldr	r0, [r4]
   156f4:	bl	130d0 <__assert_fail@plt+0x1768>
   156f8:	mov	r0, r4
   156fc:	pop	{r4, r5, r6, lr}
   15700:	b	130d0 <__assert_fail@plt+0x1768>
   15704:	ldr	r3, [r0, #16]
   15708:	cmp	r3, #0
   1570c:	ldrne	r5, [r0]
   15710:	beq	156d4 <__assert_fail@plt+0x3d6c>
   15714:	ldr	r3, [r4, #4]
   15718:	cmp	r3, r5
   1571c:	bls	156d4 <__assert_fail@plt+0x3d6c>
   15720:	ldr	r3, [r5]
   15724:	cmp	r3, #0
   15728:	bne	15734 <__assert_fail@plt+0x3dcc>
   1572c:	add	r5, r5, #8
   15730:	b	15714 <__assert_fail@plt+0x3dac>
   15734:	mov	r6, r5
   15738:	ldr	r0, [r6]
   1573c:	ldr	r3, [r4, #32]
   15740:	blx	r3
   15744:	ldr	r6, [r6, #4]
   15748:	cmp	r6, #0
   1574c:	bne	15738 <__assert_fail@plt+0x3dd0>
   15750:	b	1572c <__assert_fail@plt+0x3dc4>
   15754:	ldr	r0, [r5, #4]
   15758:	cmp	r0, #0
   1575c:	addeq	r5, r5, #8
   15760:	beq	156d8 <__assert_fail@plt+0x3d70>
   15764:	ldr	r6, [r0, #4]
   15768:	bl	130d0 <__assert_fail@plt+0x1768>
   1576c:	mov	r0, r6
   15770:	b	15758 <__assert_fail@plt+0x3df0>
   15774:	ldr	r5, [r0, #4]
   15778:	bl	130d0 <__assert_fail@plt+0x1768>
   1577c:	mov	r0, r5
   15780:	b	156e8 <__assert_fail@plt+0x3d80>
   15784:	push	{r4, r5, lr}
   15788:	mov	r4, r0
   1578c:	sub	sp, sp, #44	; 0x2c
   15790:	mov	r0, r1
   15794:	ldr	r1, [r4, #20]
   15798:	bl	14e28 <__assert_fail@plt+0x34c0>
   1579c:	subs	r5, r0, #0
   157a0:	bne	157b4 <__assert_fail@plt+0x3e4c>
   157a4:	mov	r5, #0
   157a8:	mov	r0, r5
   157ac:	add	sp, sp, #44	; 0x2c
   157b0:	pop	{r4, r5, pc}
   157b4:	ldr	r3, [r4, #8]
   157b8:	cmp	r3, r5
   157bc:	beq	1589c <__assert_fail@plt+0x3f34>
   157c0:	mov	r1, #8
   157c4:	bl	18750 <lchmod@@Base+0x2aa8>
   157c8:	cmp	r0, #0
   157cc:	str	r0, [sp]
   157d0:	beq	157a4 <__assert_fail@plt+0x3e3c>
   157d4:	ldr	r3, [r4, #20]
   157d8:	mov	r2, #0
   157dc:	add	r0, r0, r5, lsl #3
   157e0:	mov	r1, r4
   157e4:	stmib	sp, {r0, r5}
   157e8:	mov	r0, sp
   157ec:	str	r2, [sp, #12]
   157f0:	strd	r2, [sp, #16]
   157f4:	ldr	r3, [r4, #24]
   157f8:	str	r3, [sp, #24]
   157fc:	ldr	r3, [r4, #28]
   15800:	str	r3, [sp, #28]
   15804:	ldr	r3, [r4, #32]
   15808:	str	r3, [sp, #32]
   1580c:	ldr	r3, [r4, #36]	; 0x24
   15810:	str	r3, [sp, #36]	; 0x24
   15814:	bl	1509c <__assert_fail@plt+0x3734>
   15818:	subs	r5, r0, #0
   1581c:	beq	15854 <__assert_fail@plt+0x3eec>
   15820:	ldr	r0, [r4]
   15824:	bl	130d0 <__assert_fail@plt+0x1768>
   15828:	ldr	r3, [sp]
   1582c:	str	r3, [r4]
   15830:	ldr	r3, [sp, #4]
   15834:	str	r3, [r4, #4]
   15838:	ldr	r3, [sp, #8]
   1583c:	str	r3, [r4, #8]
   15840:	ldr	r3, [sp, #12]
   15844:	str	r3, [r4, #12]
   15848:	ldr	r3, [sp, #36]	; 0x24
   1584c:	str	r3, [r4, #36]	; 0x24
   15850:	b	157a8 <__assert_fail@plt+0x3e40>
   15854:	ldr	r3, [sp, #36]	; 0x24
   15858:	mov	r2, #1
   1585c:	mov	r1, sp
   15860:	mov	r0, r4
   15864:	str	r3, [r4, #36]	; 0x24
   15868:	bl	1509c <__assert_fail@plt+0x3734>
   1586c:	cmp	r0, #0
   15870:	bne	15878 <__assert_fail@plt+0x3f10>
   15874:	bl	11914 <abort@plt>
   15878:	mov	r2, r5
   1587c:	mov	r1, sp
   15880:	mov	r0, r4
   15884:	bl	1509c <__assert_fail@plt+0x3734>
   15888:	cmp	r0, #0
   1588c:	beq	15874 <__assert_fail@plt+0x3f0c>
   15890:	ldr	r0, [sp]
   15894:	bl	130d0 <__assert_fail@plt+0x1768>
   15898:	b	157a8 <__assert_fail@plt+0x3e40>
   1589c:	mov	r5, #1
   158a0:	b	157a8 <__assert_fail@plt+0x3e40>
   158a4:	push	{r0, r1, r4, r5, r6, lr}
   158a8:	subs	r6, r1, #0
   158ac:	bne	158b4 <__assert_fail@plt+0x3f4c>
   158b0:	bl	11914 <abort@plt>
   158b4:	mov	r5, r2
   158b8:	mov	r3, #0
   158bc:	add	r2, sp, #4
   158c0:	mov	r4, r0
   158c4:	bl	14f10 <__assert_fail@plt+0x35a8>
   158c8:	cmp	r0, #0
   158cc:	beq	158e4 <__assert_fail@plt+0x3f7c>
   158d0:	cmp	r5, #0
   158d4:	strne	r0, [r5]
   158d8:	movne	r0, #0
   158dc:	moveq	r0, r5
   158e0:	b	15964 <__assert_fail@plt+0x3ffc>
   158e4:	vldr	s15, [r4, #12]
   158e8:	ldr	r3, [r4, #20]
   158ec:	vcvt.f32.u32	s14, s15
   158f0:	vldr	s15, [r4, #8]
   158f4:	vldr	s13, [r3, #8]
   158f8:	vcvt.f32.u32	s15, s15
   158fc:	vmul.f32	s15, s15, s13
   15900:	vcmpe.f32	s14, s15
   15904:	vmrs	APSR_nzcv, fpscr
   15908:	ble	159a0 <__assert_fail@plt+0x4038>
   1590c:	add	r0, r4, #20
   15910:	bl	14fec <__assert_fail@plt+0x3684>
   15914:	vldr	s15, [r4, #8]
   15918:	vldr	s14, [r4, #12]
   1591c:	ldr	r3, [r4, #20]
   15920:	vcvt.f32.u32	s15, s15
   15924:	vcvt.f32.u32	s14, s14
   15928:	vldr	s13, [r3, #8]
   1592c:	vmul.f32	s12, s13, s15
   15930:	vcmpe.f32	s14, s12
   15934:	vmrs	APSR_nzcv, fpscr
   15938:	ble	159a0 <__assert_fail@plt+0x4038>
   1593c:	vldr	s14, [r3, #12]
   15940:	ldrb	r3, [r3, #16]
   15944:	vmul.f32	s15, s15, s14
   15948:	vldr	s14, [pc, #204]	; 15a1c <__assert_fail@plt+0x40b4>
   1594c:	cmp	r3, #0
   15950:	vmuleq.f32	s15, s15, s13
   15954:	vcmpe.f32	s15, s14
   15958:	vmrs	APSR_nzcv, fpscr
   1595c:	blt	1596c <__assert_fail@plt+0x4004>
   15960:	mvn	r0, #0
   15964:	add	sp, sp, #8
   15968:	pop	{r4, r5, r6, pc}
   1596c:	vcvt.u32.f32	s15, s15
   15970:	mov	r0, r4
   15974:	vmov	r1, s15
   15978:	bl	15784 <__assert_fail@plt+0x3e1c>
   1597c:	cmp	r0, #0
   15980:	beq	15960 <__assert_fail@plt+0x3ff8>
   15984:	mov	r3, #0
   15988:	add	r2, sp, #4
   1598c:	mov	r1, r6
   15990:	mov	r0, r4
   15994:	bl	14f10 <__assert_fail@plt+0x35a8>
   15998:	cmp	r0, #0
   1599c:	bne	158b0 <__assert_fail@plt+0x3f48>
   159a0:	ldr	r3, [sp, #4]
   159a4:	ldr	r2, [r3]
   159a8:	cmp	r2, #0
   159ac:	beq	159fc <__assert_fail@plt+0x4094>
   159b0:	ldr	r0, [r4, #36]	; 0x24
   159b4:	cmp	r0, #0
   159b8:	ldrne	r3, [r0, #4]
   159bc:	strne	r3, [r4, #36]	; 0x24
   159c0:	bne	159d4 <__assert_fail@plt+0x406c>
   159c4:	mov	r0, #8
   159c8:	bl	187a4 <lchmod@@Base+0x2afc>
   159cc:	cmp	r0, #0
   159d0:	beq	15960 <__assert_fail@plt+0x3ff8>
   159d4:	ldr	r3, [sp, #4]
   159d8:	ldr	r2, [r3, #4]
   159dc:	str	r6, [r0]
   159e0:	str	r2, [r0, #4]
   159e4:	str	r0, [r3, #4]
   159e8:	ldr	r3, [r4, #16]
   159ec:	add	r3, r3, #1
   159f0:	str	r3, [r4, #16]
   159f4:	mov	r0, #1
   159f8:	b	15964 <__assert_fail@plt+0x3ffc>
   159fc:	str	r6, [r3]
   15a00:	ldr	r3, [r4, #16]
   15a04:	add	r3, r3, #1
   15a08:	str	r3, [r4, #16]
   15a0c:	ldr	r3, [r4, #12]
   15a10:	add	r3, r3, #1
   15a14:	str	r3, [r4, #12]
   15a18:	b	159f4 <__assert_fail@plt+0x408c>
   15a1c:	svcmi	0x00800000
   15a20:	push	{r0, r1, r4, lr}
   15a24:	add	r2, sp, #4
   15a28:	mov	r4, r1
   15a2c:	bl	158a4 <__assert_fail@plt+0x3f3c>
   15a30:	cmn	r0, #1
   15a34:	moveq	r4, #0
   15a38:	beq	15a44 <__assert_fail@plt+0x40dc>
   15a3c:	cmp	r0, #0
   15a40:	ldreq	r4, [sp, #4]
   15a44:	mov	r0, r4
   15a48:	add	sp, sp, #8
   15a4c:	pop	{r4, pc}
   15a50:	push	{r0, r1, r4, r5, r6, lr}
   15a54:	mov	r3, #1
   15a58:	add	r2, sp, #4
   15a5c:	mov	r4, r0
   15a60:	bl	14f10 <__assert_fail@plt+0x35a8>
   15a64:	subs	r5, r0, #0
   15a68:	beq	15b20 <__assert_fail@plt+0x41b8>
   15a6c:	ldr	r3, [r4, #16]
   15a70:	sub	r3, r3, #1
   15a74:	str	r3, [r4, #16]
   15a78:	ldr	r3, [sp, #4]
   15a7c:	ldr	r3, [r3]
   15a80:	cmp	r3, #0
   15a84:	bne	15b20 <__assert_fail@plt+0x41b8>
   15a88:	vldr	s14, [r4, #8]
   15a8c:	ldr	r3, [r4, #12]
   15a90:	vcvt.f32.u32	s14, s14
   15a94:	sub	r3, r3, #1
   15a98:	vmov	s15, r3
   15a9c:	str	r3, [r4, #12]
   15aa0:	ldr	r3, [r4, #20]
   15aa4:	vldr	s13, [r3]
   15aa8:	vcvt.f32.u32	s15, s15
   15aac:	vmul.f32	s14, s14, s13
   15ab0:	vcmpe.f32	s15, s14
   15ab4:	vmrs	APSR_nzcv, fpscr
   15ab8:	bpl	15b20 <__assert_fail@plt+0x41b8>
   15abc:	add	r0, r4, #20
   15ac0:	bl	14fec <__assert_fail@plt+0x3684>
   15ac4:	vldr	s15, [r4, #8]
   15ac8:	vldr	s14, [r4, #12]
   15acc:	ldr	r3, [r4, #20]
   15ad0:	vcvt.f32.u32	s15, s15
   15ad4:	vcvt.f32.u32	s13, s14
   15ad8:	vldr	s14, [r3]
   15adc:	vmul.f32	s14, s15, s14
   15ae0:	vcmpe.f32	s13, s14
   15ae4:	vmrs	APSR_nzcv, fpscr
   15ae8:	bpl	15b20 <__assert_fail@plt+0x41b8>
   15aec:	ldrb	r2, [r3, #16]
   15af0:	mov	r0, r4
   15af4:	vldr	s14, [r3, #4]
   15af8:	cmp	r2, #0
   15afc:	vmul.f32	s15, s15, s14
   15b00:	vldreq	s14, [r3, #8]
   15b04:	vmuleq.f32	s15, s15, s14
   15b08:	vcvt.u32.f32	s15, s15
   15b0c:	vmov	r1, s15
   15b10:	bl	15784 <__assert_fail@plt+0x3e1c>
   15b14:	cmp	r0, #0
   15b18:	ldreq	r0, [r4, #36]	; 0x24
   15b1c:	beq	15b38 <__assert_fail@plt+0x41d0>
   15b20:	mov	r0, r5
   15b24:	add	sp, sp, #8
   15b28:	pop	{r4, r5, r6, pc}
   15b2c:	ldr	r6, [r0, #4]
   15b30:	bl	130d0 <__assert_fail@plt+0x1768>
   15b34:	mov	r0, r6
   15b38:	cmp	r0, #0
   15b3c:	bne	15b2c <__assert_fail@plt+0x41c4>
   15b40:	str	r0, [r4, #36]	; 0x24
   15b44:	b	15b20 <__assert_fail@plt+0x41b8>
   15b48:	b	15a50 <__assert_fail@plt+0x40e8>
   15b4c:	push	{r4, r5, r6, lr}
   15b50:	mov	r4, r0
   15b54:	mov	r5, r1
   15b58:	ldr	r0, [r0]
   15b5c:	bl	18d48 <lchmod@@Base+0x30a0>
   15b60:	ldr	r1, [r4, #8]
   15b64:	mov	r2, r5
   15b68:	mov	r3, #0
   15b6c:	eor	r0, r0, r1
   15b70:	ldr	r1, [r4, #12]
   15b74:	bl	18f34 <lchmod@@Base+0x328c>
   15b78:	mov	r0, r2
   15b7c:	pop	{r4, r5, r6, pc}
   15b80:	push	{r4, r5, r6, lr}
   15b84:	ldrd	r2, [r1, #8]
   15b88:	ldrd	r4, [r0, #8]
   15b8c:	cmp	r5, r3
   15b90:	cmpeq	r4, r2
   15b94:	bne	15bc4 <__assert_fail@plt+0x425c>
   15b98:	ldrd	r4, [r0, #16]
   15b9c:	ldrd	r2, [r1, #16]
   15ba0:	cmp	r5, r3
   15ba4:	cmpeq	r4, r2
   15ba8:	bne	15bc4 <__assert_fail@plt+0x425c>
   15bac:	ldr	r0, [r0]
   15bb0:	ldr	r1, [r1]
   15bb4:	bl	11548 <strcmp@plt>
   15bb8:	clz	r0, r0
   15bbc:	lsr	r0, r0, #5
   15bc0:	pop	{r4, r5, r6, pc}
   15bc4:	mov	r0, #0
   15bc8:	pop	{r4, r5, r6, pc}
   15bcc:	push	{r4, lr}
   15bd0:	mov	r4, r0
   15bd4:	ldr	r0, [r0]
   15bd8:	bl	130d0 <__assert_fail@plt+0x1768>
   15bdc:	mov	r0, r4
   15be0:	pop	{r4, lr}
   15be4:	b	130d0 <__assert_fail@plt+0x1768>
   15be8:	mov	r3, #1
   15bec:	str	r1, [r0]
   15bf0:	str	r1, [r0, #4]
   15bf4:	str	r1, [r0, #8]
   15bf8:	strb	r3, [r0, #28]
   15bfc:	mov	r3, #0
   15c00:	str	r1, [r0, #12]
   15c04:	str	r1, [r0, #16]
   15c08:	str	r3, [r0, #20]
   15c0c:	str	r3, [r0, #24]
   15c10:	bx	lr
   15c14:	ldrb	r0, [r0, #28]
   15c18:	bx	lr
   15c1c:	ldrb	r2, [r0, #28]
   15c20:	mov	r3, r0
   15c24:	ldr	ip, [r0, #20]
   15c28:	eor	r2, r2, #1
   15c2c:	add	ip, r2, ip
   15c30:	and	ip, ip, #3
   15c34:	ldr	r0, [r0, ip, lsl #2]
   15c38:	str	r1, [r3, ip, lsl #2]
   15c3c:	ldr	r1, [r3, #24]
   15c40:	str	ip, [r3, #20]
   15c44:	cmp	r1, ip
   15c48:	addeq	r2, r2, r1
   15c4c:	andeq	r2, r2, #3
   15c50:	streq	r2, [r3, #24]
   15c54:	mov	r2, #0
   15c58:	strb	r2, [r3, #28]
   15c5c:	bx	lr
   15c60:	ldrb	r2, [r0, #28]
   15c64:	cmp	r2, #0
   15c68:	beq	15c74 <__assert_fail@plt+0x430c>
   15c6c:	push	{r4, lr}
   15c70:	bl	11914 <abort@plt>
   15c74:	ldr	r1, [r0, #16]
   15c78:	mov	r3, r0
   15c7c:	ldr	r2, [r0, #20]
   15c80:	ldr	r0, [r0, r2, lsl #2]
   15c84:	str	r1, [r3, r2, lsl #2]
   15c88:	ldr	r1, [r3, #24]
   15c8c:	cmp	r2, r1
   15c90:	addne	r2, r2, #3
   15c94:	moveq	r2, #1
   15c98:	andne	r2, r2, #3
   15c9c:	strbeq	r2, [r3, #28]
   15ca0:	strne	r2, [r3, #20]
   15ca4:	bx	lr

00015ca8 <lchmod@@Base>:
   15ca8:	push	{r4, r5, r6, r7, r8, r9, lr}
   15cac:	mov	r7, r1
   15cb0:	sub	sp, sp, #148	; 0x94
   15cb4:	mov	r1, #2654208	; 0x288000
   15cb8:	mov	r9, r0
   15cbc:	bl	116c8 <open64@plt>
   15cc0:	subs	r5, r0, #0
   15cc4:	movlt	r4, r5
   15cc8:	blt	15d04 <lchmod@@Base+0x5c>
   15ccc:	mov	r3, #4096	; 0x1000
   15cd0:	add	r2, sp, #40	; 0x28
   15cd4:	ldr	r1, [pc, #180]	; 15d90 <lchmod@@Base+0xe8>
   15cd8:	bl	19154 <lchmod@@Base+0x34ac>
   15cdc:	mov	r4, r0
   15ce0:	bl	117a0 <__errno_location@plt>
   15ce4:	cmp	r4, #0
   15ce8:	mov	r6, r0
   15cec:	beq	15d10 <lchmod@@Base+0x68>
   15cf0:	ldr	r4, [r6]
   15cf4:	mov	r0, r5
   15cf8:	bl	11920 <close@plt>
   15cfc:	str	r4, [r6]
   15d00:	mvn	r4, #0
   15d04:	mov	r0, r4
   15d08:	add	sp, sp, #148	; 0x94
   15d0c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15d10:	ldr	r3, [sp, #56]	; 0x38
   15d14:	and	r3, r3, #61440	; 0xf000
   15d18:	cmp	r3, #40960	; 0xa000
   15d1c:	bne	15d34 <lchmod@@Base+0x8c>
   15d20:	mov	r0, r5
   15d24:	bl	11920 <close@plt>
   15d28:	mov	r3, #95	; 0x5f
   15d2c:	str	r3, [r6]
   15d30:	b	15d00 <lchmod@@Base+0x58>
   15d34:	ldr	r3, [pc, #88]	; 15d94 <lchmod@@Base+0xec>
   15d38:	mov	r2, #26
   15d3c:	mov	r1, #1
   15d40:	add	r0, sp, #12
   15d44:	str	r5, [sp]
   15d48:	bl	117ac <__sprintf_chk@plt>
   15d4c:	mov	r1, r7
   15d50:	add	r0, sp, #12
   15d54:	bl	118d8 <chmod@plt>
   15d58:	mov	r4, r0
   15d5c:	mov	r0, r5
   15d60:	ldr	r8, [r6]
   15d64:	bl	11920 <close@plt>
   15d68:	cmp	r4, #0
   15d6c:	beq	15d04 <lchmod@@Base+0x5c>
   15d70:	cmp	r8, #2
   15d74:	strne	r8, [r6]
   15d78:	bne	15d04 <lchmod@@Base+0x5c>
   15d7c:	mov	r1, r7
   15d80:	mov	r0, r9
   15d84:	bl	118d8 <chmod@plt>
   15d88:	mov	r4, r0
   15d8c:	b	15d04 <lchmod@@Base+0x5c>
   15d90:			; <UNDEFINED> instruction: 0x000197b3
   15d94:	andeq	r9, r1, r5, lsl #22
   15d98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d9c:	mov	r5, r0
   15da0:	ldrb	r3, [r0]
   15da4:	sub	r3, r3, #48	; 0x30
   15da8:	cmp	r3, #7
   15dac:	subhi	r3, r0, #1
   15db0:	movhi	r0, #1
   15db4:	bhi	15e48 <lchmod@@Base+0x1a0>
   15db8:	mov	r3, r5
   15dbc:	mov	r4, #0
   15dc0:	ldrb	r2, [r3], #1
   15dc4:	lsl	r4, r4, #3
   15dc8:	sub	r4, r4, #48	; 0x30
   15dcc:	add	r4, r2, r4
   15dd0:	cmp	r4, #4096	; 0x1000
   15dd4:	bcs	16084 <lchmod@@Base+0x3dc>
   15dd8:	ldrb	r2, [r3]
   15ddc:	sub	r1, r2, #48	; 0x30
   15de0:	cmp	r1, #7
   15de4:	bls	15dc0 <lchmod@@Base+0x118>
   15de8:	cmp	r2, #0
   15dec:	bne	16084 <lchmod@@Base+0x3dc>
   15df0:	sub	r3, r3, r5
   15df4:	mov	r0, #32
   15df8:	cmp	r3, #4
   15dfc:	andle	r5, r4, #3072	; 0xc00
   15e00:	movwgt	r5, #4095	; 0xfff
   15e04:	mvnle	r5, r5, lsr #10
   15e08:	mvnle	r5, r5, lsl #10
   15e0c:	bl	17fb0 <lchmod@@Base+0x2308>
   15e10:	movw	r3, #317	; 0x13d
   15e14:	strh	r3, [r0]
   15e18:	movw	r3, #4095	; 0xfff
   15e1c:	strd	r4, [r0, #8]
   15e20:	str	r3, [r0, #4]
   15e24:	mov	r3, #0
   15e28:	strb	r3, [r0, #17]
   15e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e30:	and	ip, r4, #239	; 0xef
   15e34:	cmp	r4, #43	; 0x2b
   15e38:	cmpne	ip, #45	; 0x2d
   15e3c:	moveq	ip, #1
   15e40:	movne	ip, #0
   15e44:	add	r0, r0, ip
   15e48:	ldrb	r4, [r3, #1]!
   15e4c:	cmp	r4, #0
   15e50:	bne	15e30 <lchmod@@Base+0x188>
   15e54:	mov	r1, #16
   15e58:	movw	r7, #519	; 0x207
   15e5c:	bl	18070 <lchmod@@Base+0x23c8>
   15e60:	movw	r8, #1080	; 0x438
   15e64:	mov	ip, r4
   15e68:	mov	r1, #0
   15e6c:	ldrb	r3, [r5]
   15e70:	mov	r2, r5
   15e74:	add	r5, r5, #1
   15e78:	cmp	r3, #97	; 0x61
   15e7c:	beq	15f38 <lchmod@@Base+0x290>
   15e80:	bhi	15f08 <lchmod@@Base+0x260>
   15e84:	cmp	r3, #45	; 0x2d
   15e88:	beq	15e9c <lchmod@@Base+0x1f4>
   15e8c:	cmp	r3, #61	; 0x3d
   15e90:	beq	15e9c <lchmod@@Base+0x1f4>
   15e94:	cmp	r3, #43	; 0x2b
   15e98:	bne	16080 <lchmod@@Base+0x3d8>
   15e9c:	add	r4, r0, ip, lsl #4
   15ea0:	ldrb	lr, [r2, #1]
   15ea4:	mov	r3, r2
   15ea8:	ldrb	r9, [r3], #1
   15eac:	cmp	lr, #103	; 0x67
   15eb0:	beq	15ffc <lchmod@@Base+0x354>
   15eb4:	bhi	15f40 <lchmod@@Base+0x298>
   15eb8:	sub	lr, lr, #48	; 0x30
   15ebc:	cmp	lr, #7
   15ec0:	movls	r2, r3
   15ec4:	movls	r3, #0
   15ec8:	bls	15f64 <lchmod@@Base+0x2bc>
   15ecc:	mov	lr, r3
   15ed0:	mov	r5, #1
   15ed4:	mov	r3, #0
   15ed8:	ldrb	r6, [lr]
   15edc:	mov	r2, lr
   15ee0:	add	lr, lr, #1
   15ee4:	cmp	r6, #115	; 0x73
   15ee8:	beq	1605c <lchmod@@Base+0x3b4>
   15eec:	bhi	16024 <lchmod@@Base+0x37c>
   15ef0:	cmp	r6, #88	; 0x58
   15ef4:	beq	16064 <lchmod@@Base+0x3bc>
   15ef8:	cmp	r6, #114	; 0x72
   15efc:	beq	16044 <lchmod@@Base+0x39c>
   15f00:	mov	lr, #0
   15f04:	b	15fac <lchmod@@Base+0x304>
   15f08:	cmp	r3, #111	; 0x6f
   15f0c:	beq	15f30 <lchmod@@Base+0x288>
   15f10:	cmp	r3, #117	; 0x75
   15f14:	beq	15f28 <lchmod@@Base+0x280>
   15f18:	cmp	r3, #103	; 0x67
   15f1c:	bne	16080 <lchmod@@Base+0x3d8>
   15f20:	orr	r1, r1, r8
   15f24:	b	15e6c <lchmod@@Base+0x1c4>
   15f28:	orr	r1, r1, #2496	; 0x9c0
   15f2c:	b	15e6c <lchmod@@Base+0x1c4>
   15f30:	orr	r1, r1, r7
   15f34:	b	15e6c <lchmod@@Base+0x1c4>
   15f38:	movw	r1, #4095	; 0xfff
   15f3c:	b	15e6c <lchmod@@Base+0x1c4>
   15f40:	cmp	lr, #111	; 0x6f
   15f44:	beq	16010 <lchmod@@Base+0x368>
   15f48:	cmp	lr, #117	; 0x75
   15f4c:	bne	15ecc <lchmod@@Base+0x224>
   15f50:	add	r2, r2, #2
   15f54:	mov	r5, #3
   15f58:	mov	lr, #0
   15f5c:	mov	r3, #448	; 0x1c0
   15f60:	b	15fac <lchmod@@Base+0x304>
   15f64:	ldrb	lr, [r2], #1
   15f68:	lsl	r3, r3, #3
   15f6c:	sub	r3, r3, #48	; 0x30
   15f70:	add	r3, lr, r3
   15f74:	cmp	r3, #4096	; 0x1000
   15f78:	bcs	16080 <lchmod@@Base+0x3d8>
   15f7c:	ldrb	lr, [r2]
   15f80:	sub	r5, lr, #48	; 0x30
   15f84:	cmp	r5, #7
   15f88:	bls	15f64 <lchmod@@Base+0x2bc>
   15f8c:	cmp	r1, #0
   15f90:	bne	16080 <lchmod@@Base+0x3d8>
   15f94:	cmp	lr, #0
   15f98:	cmpne	lr, #44	; 0x2c
   15f9c:	bne	16080 <lchmod@@Base+0x3d8>
   15fa0:	movw	r1, #4095	; 0xfff
   15fa4:	mov	r5, #1
   15fa8:	mov	lr, r1
   15fac:	cmp	lr, #0
   15fb0:	add	ip, ip, #1
   15fb4:	strb	r9, [r4]
   15fb8:	strb	r5, [r4, #1]
   15fbc:	stmib	r4, {r1, r3}
   15fc0:	bne	15fd0 <lchmod@@Base+0x328>
   15fc4:	cmp	r1, #0
   15fc8:	andne	lr, r1, r3
   15fcc:	moveq	lr, r3
   15fd0:	ldrb	r3, [r2]
   15fd4:	add	r4, r4, #16
   15fd8:	str	lr, [r4, #-4]
   15fdc:	and	lr, r3, #239	; 0xef
   15fe0:	cmp	r3, #43	; 0x2b
   15fe4:	cmpne	lr, #45	; 0x2d
   15fe8:	beq	15ea0 <lchmod@@Base+0x1f8>
   15fec:	cmp	r3, #44	; 0x2c
   15ff0:	bne	1606c <lchmod@@Base+0x3c4>
   15ff4:	add	r5, r2, #1
   15ff8:	b	15e68 <lchmod@@Base+0x1c0>
   15ffc:	add	r2, r2, #2
   16000:	mov	r5, #3
   16004:	mov	lr, #0
   16008:	mov	r3, #56	; 0x38
   1600c:	b	15fac <lchmod@@Base+0x304>
   16010:	add	r2, r2, #2
   16014:	mov	r5, #3
   16018:	mov	lr, #0
   1601c:	mov	r3, #7
   16020:	b	15fac <lchmod@@Base+0x304>
   16024:	cmp	r6, #119	; 0x77
   16028:	beq	1604c <lchmod@@Base+0x3a4>
   1602c:	cmp	r6, #120	; 0x78
   16030:	beq	16054 <lchmod@@Base+0x3ac>
   16034:	cmp	r6, #116	; 0x74
   16038:	bne	15f00 <lchmod@@Base+0x258>
   1603c:	orr	r3, r3, #512	; 0x200
   16040:	b	15ed8 <lchmod@@Base+0x230>
   16044:	orr	r3, r3, #292	; 0x124
   16048:	b	15ed8 <lchmod@@Base+0x230>
   1604c:	orr	r3, r3, #146	; 0x92
   16050:	b	15ed8 <lchmod@@Base+0x230>
   16054:	orr	r3, r3, #73	; 0x49
   16058:	b	15ed8 <lchmod@@Base+0x230>
   1605c:	orr	r3, r3, #3072	; 0xc00
   16060:	b	15ed8 <lchmod@@Base+0x230>
   16064:	mov	r5, #2
   16068:	b	15ed8 <lchmod@@Base+0x230>
   1606c:	cmp	r3, #0
   16070:	bne	16080 <lchmod@@Base+0x3d8>
   16074:	add	ip, r0, ip, lsl #4
   16078:	strb	r3, [ip, #1]
   1607c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16080:	bl	130d0 <__assert_fail@plt+0x1768>
   16084:	mov	r0, #0
   16088:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1608c:	push	{r4, r5, lr}
   16090:	sub	sp, sp, #108	; 0x6c
   16094:	mov	r1, sp
   16098:	bl	19124 <lchmod@@Base+0x347c>
   1609c:	subs	r4, r0, #0
   160a0:	movne	r0, #0
   160a4:	bne	160d0 <lchmod@@Base+0x428>
   160a8:	mov	r0, #32
   160ac:	ldr	r5, [sp, #16]
   160b0:	bl	17fb0 <lchmod@@Base+0x2308>
   160b4:	movw	r3, #317	; 0x13d
   160b8:	strh	r3, [r0]
   160bc:	movw	r3, #4095	; 0xfff
   160c0:	str	r3, [r0, #4]
   160c4:	str	r5, [r0, #8]
   160c8:	str	r3, [r0, #12]
   160cc:	strb	r4, [r0, #17]
   160d0:	add	sp, sp, #108	; 0x6c
   160d4:	pop	{r4, r5, pc}
   160d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   160dc:	cmp	r1, #0
   160e0:	ubfx	r0, r0, #0, #12
   160e4:	movne	r6, #3072	; 0xc00
   160e8:	moveq	r6, #0
   160ec:	add	r3, r3, #16
   160f0:	mov	r4, #0
   160f4:	ldr	r5, [sp, #28]
   160f8:	mvn	r2, r2
   160fc:	ldrb	r7, [r3, #-15]
   16100:	cmp	r7, #0
   16104:	bne	16114 <lchmod@@Base+0x46c>
   16108:	cmp	r5, #0
   1610c:	strne	r4, [r5]
   16110:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16114:	cmp	r7, #2
   16118:	ldr	ip, [r3, #-12]
   1611c:	ldr	r8, [r3, #-4]
   16120:	ldr	lr, [r3, #-8]
   16124:	bic	r8, r6, r8
   16128:	beq	161a8 <lchmod@@Base+0x500>
   1612c:	cmp	r7, #3
   16130:	bne	16168 <lchmod@@Base+0x4c0>
   16134:	and	lr, lr, r0
   16138:	tst	lr, #292	; 0x124
   1613c:	movne	r7, #292	; 0x124
   16140:	moveq	r7, #0
   16144:	tst	lr, #146	; 0x92
   16148:	movne	r9, #146	; 0x92
   1614c:	moveq	r9, #0
   16150:	tst	lr, #73	; 0x49
   16154:	orr	r7, r7, r9
   16158:	movne	r9, #73	; 0x49
   1615c:	moveq	r9, #0
   16160:	orr	r7, r7, r9
   16164:	orr	lr, r7, lr
   16168:	cmp	ip, #0
   1616c:	bic	lr, lr, r8
   16170:	movne	r7, ip
   16174:	moveq	r7, r2
   16178:	and	lr, lr, r7
   1617c:	ldrb	r7, [r3, #-16]
   16180:	cmp	r7, #45	; 0x2d
   16184:	orreq	r4, r4, lr
   16188:	biceq	r0, r0, lr
   1618c:	beq	161d8 <lchmod@@Base+0x530>
   16190:	cmp	r7, #61	; 0x3d
   16194:	beq	161b8 <lchmod@@Base+0x510>
   16198:	cmp	r7, #43	; 0x2b
   1619c:	orreq	r4, r4, lr
   161a0:	orreq	r0, r0, lr
   161a4:	b	161d8 <lchmod@@Base+0x530>
   161a8:	and	r7, r0, #73	; 0x49
   161ac:	orrs	r7, r7, r1
   161b0:	orrne	lr, lr, #73	; 0x49
   161b4:	b	16168 <lchmod@@Base+0x4c0>
   161b8:	cmp	ip, #0
   161bc:	mvnne	ip, ip
   161c0:	orr	ip, ip, r8
   161c4:	mvn	r7, ip
   161c8:	and	ip, ip, r0
   161cc:	ubfx	r7, r7, #0, #12
   161d0:	orr	r0, ip, lr
   161d4:	orr	r4, r4, r7
   161d8:	add	r3, r3, #16
   161dc:	b	160fc <lchmod@@Base+0x454>
   161e0:	push	{r2, r3}
   161e4:	push	{r0, r1, r2, lr}
   161e8:	ldr	r2, [sp, #16]
   161ec:	ands	r3, r2, #64	; 0x40
   161f0:	addne	r3, sp, #20
   161f4:	strne	r3, [sp, #4]
   161f8:	ldrne	r3, [sp, #20]
   161fc:	bl	11788 <openat64@plt>
   16200:	bl	17a6c <lchmod@@Base+0x1dc4>
   16204:	add	sp, sp, #12
   16208:	pop	{lr}		; (ldr lr, [sp], #4)
   1620c:	add	sp, sp, #8
   16210:	bx	lr
   16214:	orr	r2, r2, #540672	; 0x84000
   16218:	push	{r4, r5, r6, r7, r8, lr}
   1621c:	mov	r5, r3
   16220:	orr	r2, r2, #2304	; 0x900
   16224:	bl	161e0 <lchmod@@Base+0x538>
   16228:	subs	r6, r0, #0
   1622c:	movlt	r4, #0
   16230:	blt	1625c <lchmod@@Base+0x5b4>
   16234:	bl	11860 <fdopendir@plt>
   16238:	subs	r4, r0, #0
   1623c:	strne	r6, [r5]
   16240:	bne	1625c <lchmod@@Base+0x5b4>
   16244:	bl	117a0 <__errno_location@plt>
   16248:	mov	r5, r0
   1624c:	mov	r0, r6
   16250:	ldr	r7, [r5]
   16254:	bl	11920 <close@plt>
   16258:	str	r7, [r5]
   1625c:	mov	r0, r4
   16260:	pop	{r4, r5, r6, r7, r8, pc}
   16264:	push	{r4, r5, r6, lr}
   16268:	subs	r4, r0, #0
   1626c:	bne	16284 <lchmod@@Base+0x5dc>
   16270:	ldr	r3, [pc, #124]	; 162f4 <lchmod@@Base+0x64c>
   16274:	ldr	r0, [pc, #124]	; 162f8 <lchmod@@Base+0x650>
   16278:	ldr	r1, [r3]
   1627c:	bl	118fc <fputs@plt>
   16280:	bl	11914 <abort@plt>
   16284:	mov	r1, #47	; 0x2f
   16288:	bl	1183c <strrchr@plt>
   1628c:	subs	r6, r0, #0
   16290:	beq	162e0 <lchmod@@Base+0x638>
   16294:	add	r5, r6, #1
   16298:	sub	r3, r5, r4
   1629c:	cmp	r3, #6
   162a0:	ble	162e0 <lchmod@@Base+0x638>
   162a4:	mov	r2, #7
   162a8:	ldr	r1, [pc, #76]	; 162fc <lchmod@@Base+0x654>
   162ac:	sub	r0, r6, #6
   162b0:	bl	11908 <strncmp@plt>
   162b4:	cmp	r0, #0
   162b8:	bne	162e0 <lchmod@@Base+0x638>
   162bc:	mov	r2, #3
   162c0:	ldr	r1, [pc, #56]	; 16300 <lchmod@@Base+0x658>
   162c4:	mov	r0, r5
   162c8:	bl	11908 <strncmp@plt>
   162cc:	cmp	r0, #0
   162d0:	ldreq	r3, [pc, #44]	; 16304 <lchmod@@Base+0x65c>
   162d4:	addeq	r4, r6, #4
   162d8:	movne	r4, r5
   162dc:	streq	r4, [r3]
   162e0:	ldr	r3, [pc, #32]	; 16308 <lchmod@@Base+0x660>
   162e4:	str	r4, [r3]
   162e8:	ldr	r3, [pc, #28]	; 1630c <lchmod@@Base+0x664>
   162ec:	str	r4, [r3]
   162f0:	pop	{r4, r5, r6, pc}
   162f4:	strdeq	fp, [r2], -r0
   162f8:	andeq	r9, r1, r6, lsl fp
   162fc:	andeq	r9, r1, lr, asr #22
   16300:	andeq	r9, r1, r6, asr fp
   16304:	andeq	fp, r2, r0, ror #3
   16308:	andeq	fp, r2, r8, lsl #4
   1630c:	andeq	fp, r2, r4, ror #3
   16310:	push	{r4, lr}
   16314:	mov	r2, #48	; 0x30
   16318:	mov	r4, r1
   1631c:	mov	r1, #0
   16320:	bl	117c4 <memset@plt>
   16324:	cmp	r4, #10
   16328:	bne	16330 <lchmod@@Base+0x688>
   1632c:	bl	11914 <abort@plt>
   16330:	str	r4, [r0]
   16334:	pop	{r4, pc}
   16338:	push	{r4, r5, r6, lr}
   1633c:	mov	r2, #5
   16340:	mov	r6, r0
   16344:	mov	r5, r1
   16348:	mov	r1, r0
   1634c:	mov	r0, #0
   16350:	bl	115f0 <dcgettext@plt>
   16354:	cmp	r6, r0
   16358:	mov	r4, r0
   1635c:	bne	163cc <lchmod@@Base+0x724>
   16360:	bl	18d98 <lchmod@@Base+0x30f0>
   16364:	ldrb	r3, [r0]
   16368:	bic	r3, r3, #32
   1636c:	cmp	r3, #85	; 0x55
   16370:	bne	163d4 <lchmod@@Base+0x72c>
   16374:	ldrb	r3, [r0, #1]
   16378:	bic	r3, r3, #32
   1637c:	cmp	r3, #84	; 0x54
   16380:	bne	16444 <lchmod@@Base+0x79c>
   16384:	ldrb	r3, [r0, #2]
   16388:	bic	r3, r3, #32
   1638c:	cmp	r3, #70	; 0x46
   16390:	bne	16444 <lchmod@@Base+0x79c>
   16394:	ldrb	r3, [r0, #3]
   16398:	cmp	r3, #45	; 0x2d
   1639c:	bne	16444 <lchmod@@Base+0x79c>
   163a0:	ldrb	r3, [r0, #4]
   163a4:	cmp	r3, #56	; 0x38
   163a8:	bne	16444 <lchmod@@Base+0x79c>
   163ac:	ldrb	r3, [r0, #5]
   163b0:	cmp	r3, #0
   163b4:	bne	16444 <lchmod@@Base+0x79c>
   163b8:	ldrb	r2, [r4]
   163bc:	ldr	r3, [pc, #144]	; 16454 <lchmod@@Base+0x7ac>
   163c0:	ldr	r4, [pc, #144]	; 16458 <lchmod@@Base+0x7b0>
   163c4:	cmp	r2, #96	; 0x60
   163c8:	movne	r4, r3
   163cc:	mov	r0, r4
   163d0:	pop	{r4, r5, r6, pc}
   163d4:	cmp	r3, #71	; 0x47
   163d8:	bne	16444 <lchmod@@Base+0x79c>
   163dc:	ldrb	r3, [r0, #1]
   163e0:	bic	r3, r3, #32
   163e4:	cmp	r3, #66	; 0x42
   163e8:	bne	16444 <lchmod@@Base+0x79c>
   163ec:	ldrb	r3, [r0, #2]
   163f0:	cmp	r3, #49	; 0x31
   163f4:	bne	16444 <lchmod@@Base+0x79c>
   163f8:	ldrb	r3, [r0, #3]
   163fc:	cmp	r3, #56	; 0x38
   16400:	bne	16444 <lchmod@@Base+0x79c>
   16404:	ldrb	r3, [r0, #4]
   16408:	cmp	r3, #48	; 0x30
   1640c:	bne	16444 <lchmod@@Base+0x79c>
   16410:	ldrb	r3, [r0, #5]
   16414:	cmp	r3, #51	; 0x33
   16418:	bne	16444 <lchmod@@Base+0x79c>
   1641c:	ldrb	r3, [r0, #6]
   16420:	cmp	r3, #48	; 0x30
   16424:	bne	16444 <lchmod@@Base+0x79c>
   16428:	ldrb	r3, [r0, #7]
   1642c:	cmp	r3, #0
   16430:	bne	16444 <lchmod@@Base+0x79c>
   16434:	ldrb	r2, [r4]
   16438:	ldr	r3, [pc, #28]	; 1645c <lchmod@@Base+0x7b4>
   1643c:	ldr	r4, [pc, #28]	; 16460 <lchmod@@Base+0x7b8>
   16440:	b	163c4 <lchmod@@Base+0x71c>
   16444:	ldr	r4, [pc, #24]	; 16464 <lchmod@@Base+0x7bc>
   16448:	cmp	r5, #9
   1644c:	ldr	r3, [pc, #20]	; 16468 <lchmod@@Base+0x7c0>
   16450:	b	163c8 <lchmod@@Base+0x720>
   16454:			; <UNDEFINED> instruction: 0x00019bb2
   16458:			; <UNDEFINED> instruction: 0x00019bbd
   1645c:			; <UNDEFINED> instruction: 0x00019bb6
   16460:			; <UNDEFINED> instruction: 0x00019bb9
   16464:			; <UNDEFINED> instruction: 0x00019bb0
   16468:	andeq	r9, r1, r1, asr #23
   1646c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16470:	sub	sp, sp, #108	; 0x6c
   16474:	mov	r8, r0
   16478:	mov	r5, r1
   1647c:	mov	r6, #0
   16480:	str	r3, [sp, #40]	; 0x28
   16484:	str	r2, [sp, #48]	; 0x30
   16488:	ldr	sl, [sp, #144]	; 0x90
   1648c:	bl	11674 <__ctype_get_mb_cur_max@plt>
   16490:	ldr	r3, [sp, #148]	; 0x94
   16494:	str	r6, [sp, #24]
   16498:	str	r6, [sp, #32]
   1649c:	str	r6, [sp, #44]	; 0x2c
   164a0:	str	r6, [sp, #52]	; 0x34
   164a4:	ubfx	r7, r3, #1, #1
   164a8:	mov	r3, #1
   164ac:	str	r6, [sp, #60]	; 0x3c
   164b0:	str	r3, [sp, #72]	; 0x48
   164b4:	str	r0, [sp, #76]	; 0x4c
   164b8:	cmp	sl, #10
   164bc:	ldrls	pc, [pc, sl, lsl #2]
   164c0:	b	16704 <lchmod@@Base+0xa5c>
   164c4:	strdeq	r6, [r1], -r0
   164c8:	andeq	r6, r1, ip, lsl r7
   164cc:	andeq	r6, r1, r0, lsr #13
   164d0:			; <UNDEFINED> instruction: 0x000166b8
   164d4:	andeq	r6, r1, r8, lsl #13
   164d8:	andeq	r6, r1, r0, ror #11
   164dc:	andeq	r6, r1, r0, asr #11
   164e0:	andeq	r6, r1, r8, lsl #14
   164e4:	andeq	r6, r1, r0, lsl r6
   164e8:	andeq	r6, r1, r0, lsl r6
   164ec:	andeq	r6, r1, r0, lsl r6
   164f0:	mov	r4, sl
   164f4:	mov	r7, #0
   164f8:	mov	r9, r5
   164fc:	mov	r3, #0
   16500:	str	r6, [sp, #68]	; 0x44
   16504:	str	r3, [sp, #28]
   16508:	ldr	r3, [sp, #40]	; 0x28
   1650c:	cmn	r3, #1
   16510:	bne	170b0 <lchmod@@Base+0x1408>
   16514:	ldr	r2, [sp, #28]
   16518:	ldr	r3, [sp, #48]	; 0x30
   1651c:	ldrb	r3, [r3, r2]
   16520:	adds	r3, r3, #0
   16524:	movne	r3, #1
   16528:	str	r3, [sp, #36]	; 0x24
   1652c:	ldr	r3, [sp, #36]	; 0x24
   16530:	cmp	r3, #0
   16534:	bne	16740 <lchmod@@Base+0xa98>
   16538:	sub	r3, sl, #2
   1653c:	cmp	r4, #0
   16540:	clz	r3, r3
   16544:	movne	r2, #0
   16548:	lsr	r3, r3, #5
   1654c:	andeq	r2, r3, r7
   16550:	cmp	r2, #0
   16554:	bne	16904 <lchmod@@Base+0xc5c>
   16558:	eor	r7, r7, #1
   1655c:	ands	r3, r3, r7
   16560:	beq	17128 <lchmod@@Base+0x1480>
   16564:	ldr	r2, [sp, #68]	; 0x44
   16568:	cmp	r2, #0
   1656c:	beq	170f0 <lchmod@@Base+0x1448>
   16570:	ldr	r3, [sp, #72]	; 0x48
   16574:	cmp	r3, #0
   16578:	beq	170c4 <lchmod@@Base+0x141c>
   1657c:	ldr	r2, [sp, #48]	; 0x30
   16580:	ldr	r3, [sp, #160]	; 0xa0
   16584:	ldr	r1, [sp, #60]	; 0x3c
   16588:	str	r3, [sp, #16]
   1658c:	ldr	r3, [sp, #156]	; 0x9c
   16590:	str	r3, [sp, #12]
   16594:	ldr	r3, [sp, #152]	; 0x98
   16598:	str	r3, [sp, #8]
   1659c:	ldr	r3, [sp, #148]	; 0x94
   165a0:	str	r3, [sp, #4]
   165a4:	mov	r3, #5
   165a8:	str	r3, [sp]
   165ac:	ldr	r3, [sp, #40]	; 0x28
   165b0:	mov	r0, r8
   165b4:	bl	1646c <lchmod@@Base+0x7c4>
   165b8:	mov	r4, r0
   165bc:	b	1711c <lchmod@@Base+0x1474>
   165c0:	ldr	r3, [pc, #2948]	; 1714c <lchmod@@Base+0x14a4>
   165c4:	mov	r7, #1
   165c8:	mov	r4, #0
   165cc:	mov	sl, #5
   165d0:	str	r7, [sp, #24]
   165d4:	str	r7, [sp, #32]
   165d8:	str	r3, [sp, #44]	; 0x2c
   165dc:	b	164f8 <lchmod@@Base+0x850>
   165e0:	cmp	r7, #0
   165e4:	bne	16728 <lchmod@@Base+0xa80>
   165e8:	cmp	r5, #0
   165ec:	mov	r4, #1
   165f0:	movne	r3, #34	; 0x22
   165f4:	strbne	r3, [r8]
   165f8:	mov	r3, #1
   165fc:	str	r3, [sp, #24]
   16600:	str	r3, [sp, #32]
   16604:	ldr	r3, [pc, #2880]	; 1714c <lchmod@@Base+0x14a4>
   16608:	str	r3, [sp, #44]	; 0x2c
   1660c:	b	164f8 <lchmod@@Base+0x850>
   16610:	cmp	sl, #10
   16614:	beq	16638 <lchmod@@Base+0x990>
   16618:	mov	r1, sl
   1661c:	ldr	r0, [pc, #2860]	; 17150 <lchmod@@Base+0x14a8>
   16620:	bl	16338 <lchmod@@Base+0x690>
   16624:	mov	r1, sl
   16628:	str	r0, [sp, #156]	; 0x9c
   1662c:	ldr	r0, [pc, #2848]	; 17154 <lchmod@@Base+0x14ac>
   16630:	bl	16338 <lchmod@@Base+0x690>
   16634:	str	r0, [sp, #160]	; 0xa0
   16638:	cmp	r7, #0
   1663c:	moveq	r4, r7
   16640:	beq	16658 <lchmod@@Base+0x9b0>
   16644:	mov	r4, #0
   16648:	b	16668 <lchmod@@Base+0x9c0>
   1664c:	cmp	r5, r4
   16650:	strbhi	r3, [r8, r4]
   16654:	add	r4, r4, #1
   16658:	ldr	r3, [sp, #156]	; 0x9c
   1665c:	ldrb	r3, [r3, r4]
   16660:	cmp	r3, #0
   16664:	bne	1664c <lchmod@@Base+0x9a4>
   16668:	ldr	r0, [sp, #160]	; 0xa0
   1666c:	bl	11764 <strlen@plt>
   16670:	ldr	r3, [sp, #160]	; 0xa0
   16674:	str	r0, [sp, #32]
   16678:	str	r3, [sp, #44]	; 0x2c
   1667c:	mov	r3, #1
   16680:	str	r3, [sp, #24]
   16684:	b	164f8 <lchmod@@Base+0x850>
   16688:	mov	r3, #1
   1668c:	cmp	r7, #0
   16690:	streq	r3, [sp, #24]
   16694:	beq	166d8 <lchmod@@Base+0xa30>
   16698:	str	r3, [sp, #32]
   1669c:	b	166c4 <lchmod@@Base+0xa1c>
   166a0:	cmp	r7, #0
   166a4:	beq	166d8 <lchmod@@Base+0xa30>
   166a8:	mov	r3, #1
   166ac:	str	r3, [sp, #32]
   166b0:	ldr	r3, [pc, #2716]	; 17154 <lchmod@@Base+0x14ac>
   166b4:	b	16738 <lchmod@@Base+0xa90>
   166b8:	mov	r7, #1
   166bc:	str	r7, [sp, #24]
   166c0:	str	r7, [sp, #32]
   166c4:	ldr	r3, [pc, #2696]	; 17154 <lchmod@@Base+0x14ac>
   166c8:	mov	r4, #0
   166cc:	str	r3, [sp, #44]	; 0x2c
   166d0:	mov	sl, #2
   166d4:	b	164f8 <lchmod@@Base+0x850>
   166d8:	cmp	r5, #0
   166dc:	movne	r3, #39	; 0x27
   166e0:	movne	r7, #0
   166e4:	strbne	r3, [r8]
   166e8:	moveq	r7, r5
   166ec:	mov	r3, #1
   166f0:	mov	r4, #1
   166f4:	str	r3, [sp, #32]
   166f8:	ldr	r3, [pc, #2644]	; 17154 <lchmod@@Base+0x14ac>
   166fc:	str	r3, [sp, #44]	; 0x2c
   16700:	b	166d0 <lchmod@@Base+0xa28>
   16704:	bl	11914 <abort@plt>
   16708:	mov	r3, #1
   1670c:	mov	r7, #0
   16710:	str	r3, [sp, #24]
   16714:	mov	r4, #0
   16718:	b	164f8 <lchmod@@Base+0x850>
   1671c:	mov	r7, #1
   16720:	str	sl, [sp, #32]
   16724:	b	166c4 <lchmod@@Base+0xa1c>
   16728:	mov	r3, #1
   1672c:	str	r7, [sp, #24]
   16730:	str	r3, [sp, #32]
   16734:	ldr	r3, [pc, #2576]	; 1714c <lchmod@@Base+0x14a4>
   16738:	str	r3, [sp, #44]	; 0x2c
   1673c:	b	16714 <lchmod@@Base+0xa6c>
   16740:	ldr	fp, [sp, #24]
   16744:	ldr	r3, [sp, #32]
   16748:	cmp	sl, #2
   1674c:	moveq	fp, #0
   16750:	andne	fp, fp, #1
   16754:	adds	r5, r3, #0
   16758:	movne	r5, #1
   1675c:	ands	r3, fp, r5
   16760:	str	r3, [sp, #64]	; 0x40
   16764:	beq	16834 <lchmod@@Base+0xb8c>
   16768:	ldr	r3, [sp, #28]
   1676c:	ldr	r2, [sp, #32]
   16770:	cmp	r2, #1
   16774:	add	r6, r3, r2
   16778:	mov	r3, r2
   1677c:	ldr	r2, [sp, #40]	; 0x28
   16780:	movls	r3, #0
   16784:	movhi	r3, #1
   16788:	cmn	r2, #1
   1678c:	movne	r3, #0
   16790:	cmp	r3, #0
   16794:	beq	167a4 <lchmod@@Base+0xafc>
   16798:	ldr	r0, [sp, #48]	; 0x30
   1679c:	bl	11764 <strlen@plt>
   167a0:	str	r0, [sp, #40]	; 0x28
   167a4:	ldr	r3, [sp, #40]	; 0x28
   167a8:	cmp	r6, r3
   167ac:	bhi	1682c <lchmod@@Base+0xb84>
   167b0:	ldr	r0, [sp, #28]
   167b4:	ldr	r2, [sp, #32]
   167b8:	ldr	r3, [sp, #48]	; 0x30
   167bc:	ldr	r1, [sp, #44]	; 0x2c
   167c0:	add	r0, r3, r0
   167c4:	bl	115d8 <memcmp@plt>
   167c8:	cmp	r0, #0
   167cc:	bne	1682c <lchmod@@Base+0xb84>
   167d0:	cmp	r7, #0
   167d4:	beq	16834 <lchmod@@Base+0xb8c>
   167d8:	str	r7, [sp, #24]
   167dc:	ldr	r3, [sp, #24]
   167e0:	mov	r1, r9
   167e4:	ldr	r2, [sp, #48]	; 0x30
   167e8:	cmp	sl, #2
   167ec:	movne	r3, #0
   167f0:	andeq	r3, r3, #1
   167f4:	cmp	r3, #0
   167f8:	ldr	r3, [sp, #160]	; 0xa0
   167fc:	movne	sl, #4
   16800:	str	sl, [sp]
   16804:	str	r3, [sp, #16]
   16808:	ldr	r3, [sp, #156]	; 0x9c
   1680c:	str	r3, [sp, #12]
   16810:	mov	r3, #0
   16814:	str	r3, [sp, #8]
   16818:	ldr	r3, [sp, #148]	; 0x94
   1681c:	bic	r3, r3, #2
   16820:	str	r3, [sp, #4]
   16824:	ldr	r3, [sp, #40]	; 0x28
   16828:	b	165b0 <lchmod@@Base+0x908>
   1682c:	mov	r3, #0
   16830:	str	r3, [sp, #64]	; 0x40
   16834:	ldr	r2, [sp, #28]
   16838:	ldr	r3, [sp, #48]	; 0x30
   1683c:	add	r3, r3, r2
   16840:	str	r3, [sp, #80]	; 0x50
   16844:	ldr	r3, [sp, #48]	; 0x30
   16848:	ldrb	r6, [r3, r2]
   1684c:	cmp	r6, #58	; 0x3a
   16850:	bhi	169b4 <lchmod@@Base+0xd0c>
   16854:	cmp	r6, #43	; 0x2b
   16858:	bcs	16b74 <lchmod@@Base+0xecc>
   1685c:	cmp	r6, #32
   16860:	beq	16bc8 <lchmod@@Base+0xf20>
   16864:	bhi	1690c <lchmod@@Base+0xc64>
   16868:	cmp	r6, #9
   1686c:	beq	16d70 <lchmod@@Base+0x10c8>
   16870:	bhi	168d0 <lchmod@@Base+0xc28>
   16874:	cmp	r6, #7
   16878:	beq	16d80 <lchmod@@Base+0x10d8>
   1687c:	bhi	16d9c <lchmod@@Base+0x10f4>
   16880:	cmp	r6, #0
   16884:	beq	16be4 <lchmod@@Base+0xf3c>
   16888:	ldr	r3, [sp, #76]	; 0x4c
   1688c:	cmp	r3, #1
   16890:	bne	16de8 <lchmod@@Base+0x1140>
   16894:	bl	11734 <__ctype_b_loc@plt>
   16898:	ldr	r2, [r0]
   1689c:	sxth	r3, r6
   168a0:	lsl	r3, r3, #1
   168a4:	ldrh	r5, [r2, r3]
   168a8:	ldr	r3, [sp, #76]	; 0x4c
   168ac:	ubfx	r5, r5, #14, #1
   168b0:	str	r3, [sp, #56]	; 0x38
   168b4:	ldr	r3, [sp, #24]
   168b8:	eor	fp, r5, #1
   168bc:	and	fp, fp, r3
   168c0:	ands	fp, fp, #255	; 0xff
   168c4:	beq	16aa4 <lchmod@@Base+0xdfc>
   168c8:	mov	r5, #0
   168cc:	b	16e94 <lchmod@@Base+0x11ec>
   168d0:	cmp	r6, #11
   168d4:	beq	16da4 <lchmod@@Base+0x10fc>
   168d8:	bcc	16d78 <lchmod@@Base+0x10d0>
   168dc:	cmp	r6, #12
   168e0:	beq	16dac <lchmod@@Base+0x1104>
   168e4:	cmp	r6, #13
   168e8:	moveq	r3, #114	; 0x72
   168ec:	bne	16888 <lchmod@@Base+0xbe0>
   168f0:	cmp	sl, #2
   168f4:	movne	r2, #0
   168f8:	andeq	r2, r7, #1
   168fc:	cmp	r2, #0
   16900:	beq	16d84 <lchmod@@Base+0x10dc>
   16904:	mov	sl, #2
   16908:	b	167dc <lchmod@@Base+0xb34>
   1690c:	cmp	r6, #37	; 0x25
   16910:	beq	16b74 <lchmod@@Base+0xecc>
   16914:	bhi	16928 <lchmod@@Base+0xc80>
   16918:	cmp	r6, #35	; 0x23
   1691c:	beq	16bbc <lchmod@@Base+0xf14>
   16920:	mov	r5, #0
   16924:	b	16bcc <lchmod@@Base+0xf24>
   16928:	cmp	r6, #39	; 0x27
   1692c:	bne	16920 <lchmod@@Base+0xc78>
   16930:	cmp	sl, #2
   16934:	ldrne	r5, [sp, #36]	; 0x24
   16938:	movne	r3, r5
   1693c:	strne	r3, [sp, #68]	; 0x44
   16940:	bne	16cc0 <lchmod@@Base+0x1018>
   16944:	cmp	r7, #0
   16948:	bne	167dc <lchmod@@Base+0xb34>
   1694c:	ldr	r3, [sp, #60]	; 0x3c
   16950:	cmp	r9, #0
   16954:	clz	r3, r3
   16958:	lsr	r3, r3, #5
   1695c:	moveq	r3, #0
   16960:	cmp	r3, #0
   16964:	strne	r9, [sp, #60]	; 0x3c
   16968:	movne	r9, #0
   1696c:	bne	1697c <lchmod@@Base+0xcd4>
   16970:	cmp	r9, r4
   16974:	movhi	r3, #39	; 0x27
   16978:	strbhi	r3, [r8, r4]
   1697c:	add	r3, r4, #1
   16980:	ldr	r5, [sp, #36]	; 0x24
   16984:	mov	fp, #0
   16988:	cmp	r3, r9
   1698c:	movcc	r2, #92	; 0x5c
   16990:	str	fp, [sp, #52]	; 0x34
   16994:	strbcc	r2, [r8, r3]
   16998:	add	r3, r4, #2
   1699c:	add	r4, r4, #3
   169a0:	cmp	r3, r9
   169a4:	str	r5, [sp, #68]	; 0x44
   169a8:	movcc	r2, #39	; 0x27
   169ac:	strbcc	r2, [r8, r3]
   169b0:	b	16aa4 <lchmod@@Base+0xdfc>
   169b4:	cmp	r6, #94	; 0x5e
   169b8:	beq	16920 <lchmod@@Base+0xc78>
   169bc:	bhi	16b7c <lchmod@@Base+0xed4>
   169c0:	cmp	r6, #90	; 0x5a
   169c4:	bhi	16b68 <lchmod@@Base+0xec0>
   169c8:	cmp	r6, #65	; 0x41
   169cc:	bcs	16b74 <lchmod@@Base+0xecc>
   169d0:	cmp	r6, #62	; 0x3e
   169d4:	bls	16920 <lchmod@@Base+0xc78>
   169d8:	cmp	r6, #63	; 0x3f
   169dc:	bne	16888 <lchmod@@Base+0xbe0>
   169e0:	cmp	sl, #2
   169e4:	beq	16cc8 <lchmod@@Base+0x1020>
   169e8:	cmp	sl, #5
   169ec:	movne	fp, #0
   169f0:	bne	17098 <lchmod@@Base+0x13f0>
   169f4:	ldr	r3, [sp, #148]	; 0x94
   169f8:	tst	r3, #4
   169fc:	beq	16cd0 <lchmod@@Base+0x1028>
   16a00:	ldr	r3, [sp, #28]
   16a04:	add	r2, r3, #2
   16a08:	ldr	r3, [sp, #40]	; 0x28
   16a0c:	cmp	r2, r3
   16a10:	bcs	16cd0 <lchmod@@Base+0x1028>
   16a14:	ldr	r1, [sp, #28]
   16a18:	ldr	r3, [sp, #48]	; 0x30
   16a1c:	add	r3, r3, r1
   16a20:	ldrb	r1, [r3, #1]
   16a24:	cmp	r1, #63	; 0x3f
   16a28:	bne	16cd0 <lchmod@@Base+0x1028>
   16a2c:	ldr	r3, [sp, #48]	; 0x30
   16a30:	ldrb	r6, [r3, r2]
   16a34:	sub	r3, r6, #33	; 0x21
   16a38:	uxtb	r3, r3
   16a3c:	cmp	r3, #29
   16a40:	bhi	170a0 <lchmod@@Base+0x13f8>
   16a44:	ldr	r0, [pc, #1804]	; 17158 <lchmod@@Base+0x14b0>
   16a48:	mov	r5, #1
   16a4c:	ands	r5, r0, r5, lsl r3
   16a50:	beq	170a8 <lchmod@@Base+0x1400>
   16a54:	cmp	r7, #0
   16a58:	bne	167dc <lchmod@@Base+0xb34>
   16a5c:	cmp	r9, r4
   16a60:	add	r3, r4, #1
   16a64:	str	r2, [sp, #28]
   16a68:	mov	r5, #0
   16a6c:	strbhi	r1, [r8, r4]
   16a70:	cmp	r9, r3
   16a74:	mov	fp, r5
   16a78:	movhi	r1, #34	; 0x22
   16a7c:	strbhi	r1, [r8, r3]
   16a80:	add	r3, r4, #2
   16a84:	cmp	r9, r3
   16a88:	movhi	r1, #34	; 0x22
   16a8c:	strbhi	r1, [r8, r3]
   16a90:	add	r3, r4, #3
   16a94:	add	r4, r4, #4
   16a98:	cmp	r9, r3
   16a9c:	movhi	r1, #63	; 0x3f
   16aa0:	strbhi	r1, [r8, r3]
   16aa4:	ldr	r3, [sp, #24]
   16aa8:	eor	r3, r3, #1
   16aac:	cmp	sl, #2
   16ab0:	orreq	r3, r3, #1
   16ab4:	eor	r3, r3, #1
   16ab8:	orr	r3, r7, r3
   16abc:	tst	r3, #255	; 0xff
   16ac0:	beq	16aec <lchmod@@Base+0xe44>
   16ac4:	ldr	r3, [sp, #152]	; 0x98
   16ac8:	cmp	r3, #0
   16acc:	beq	16aec <lchmod@@Base+0xe44>
   16ad0:	ldr	r1, [sp, #152]	; 0x98
   16ad4:	ubfx	r2, r6, #5, #8
   16ad8:	and	r3, r6, #31
   16adc:	ldr	r2, [r1, r2, lsl #2]
   16ae0:	lsr	r3, r2, r3
   16ae4:	tst	r3, #1
   16ae8:	bne	16af8 <lchmod@@Base+0xe50>
   16aec:	ldr	r3, [sp, #64]	; 0x40
   16af0:	cmp	r3, #0
   16af4:	beq	16cf0 <lchmod@@Base+0x1048>
   16af8:	sub	r3, sl, #2
   16afc:	cmp	r7, #0
   16b00:	clz	r3, r3
   16b04:	lsr	r3, r3, #5
   16b08:	bne	167dc <lchmod@@Base+0xb34>
   16b0c:	ldr	r2, [sp, #52]	; 0x34
   16b10:	eor	r2, r2, #1
   16b14:	ands	r3, r3, r2
   16b18:	beq	16b50 <lchmod@@Base+0xea8>
   16b1c:	cmp	r9, r4
   16b20:	str	r3, [sp, #52]	; 0x34
   16b24:	movhi	r2, #39	; 0x27
   16b28:	strbhi	r2, [r8, r4]
   16b2c:	add	r2, r4, #1
   16b30:	cmp	r9, r2
   16b34:	movhi	r1, #36	; 0x24
   16b38:	strbhi	r1, [r8, r2]
   16b3c:	add	r2, r4, #2
   16b40:	add	r4, r4, #3
   16b44:	cmp	r9, r2
   16b48:	movhi	r1, #39	; 0x27
   16b4c:	strbhi	r1, [r8, r2]
   16b50:	cmp	r9, r4
   16b54:	ldr	fp, [sp, #36]	; 0x24
   16b58:	movhi	r3, #92	; 0x5c
   16b5c:	strbhi	r3, [r8, r4]
   16b60:	add	r4, r4, #1
   16b64:	b	16cf0 <lchmod@@Base+0x1048>
   16b68:	cmp	r6, #92	; 0x5c
   16b6c:	beq	16cd8 <lchmod@@Base+0x1030>
   16b70:	bls	16920 <lchmod@@Base+0xc78>
   16b74:	ldr	r5, [sp, #36]	; 0x24
   16b78:	b	16cc0 <lchmod@@Base+0x1018>
   16b7c:	cmp	r6, #122	; 0x7a
   16b80:	bhi	16ba0 <lchmod@@Base+0xef8>
   16b84:	cmp	r6, #97	; 0x61
   16b88:	bcs	16b74 <lchmod@@Base+0xecc>
   16b8c:	cmp	r6, #95	; 0x5f
   16b90:	beq	16b74 <lchmod@@Base+0xecc>
   16b94:	cmp	r6, #96	; 0x60
   16b98:	bne	16888 <lchmod@@Base+0xbe0>
   16b9c:	b	16920 <lchmod@@Base+0xc78>
   16ba0:	cmp	r6, #124	; 0x7c
   16ba4:	beq	16920 <lchmod@@Base+0xc78>
   16ba8:	bcc	16db4 <lchmod@@Base+0x110c>
   16bac:	cmp	r6, #125	; 0x7d
   16bb0:	beq	16db4 <lchmod@@Base+0x110c>
   16bb4:	cmp	r6, #126	; 0x7e
   16bb8:	bne	16888 <lchmod@@Base+0xbe0>
   16bbc:	ldr	r3, [sp, #28]
   16bc0:	cmp	r3, #0
   16bc4:	bne	16cd0 <lchmod@@Base+0x1028>
   16bc8:	ldr	r5, [sp, #36]	; 0x24
   16bcc:	cmp	sl, #2
   16bd0:	movne	fp, #0
   16bd4:	andeq	fp, r7, #1
   16bd8:	cmp	fp, #0
   16bdc:	beq	16aa4 <lchmod@@Base+0xdfc>
   16be0:	b	16904 <lchmod@@Base+0xc5c>
   16be4:	ldr	r3, [sp, #24]
   16be8:	cmp	r3, #0
   16bec:	beq	16cb4 <lchmod@@Base+0x100c>
   16bf0:	sub	r2, sl, #2
   16bf4:	cmp	r7, #0
   16bf8:	clz	r2, r2
   16bfc:	lsr	r2, r2, #5
   16c00:	bne	167d8 <lchmod@@Base+0xb30>
   16c04:	ldr	r3, [sp, #52]	; 0x34
   16c08:	eor	r3, r3, #1
   16c0c:	ands	r2, r2, r3
   16c10:	moveq	r3, r4
   16c14:	beq	16c4c <lchmod@@Base+0xfa4>
   16c18:	cmp	r9, r4
   16c1c:	str	r2, [sp, #52]	; 0x34
   16c20:	movhi	r3, #39	; 0x27
   16c24:	strbhi	r3, [r8, r4]
   16c28:	add	r3, r4, #1
   16c2c:	cmp	r9, r3
   16c30:	movhi	r1, #36	; 0x24
   16c34:	strbhi	r1, [r8, r3]
   16c38:	add	r3, r4, #2
   16c3c:	cmp	r9, r3
   16c40:	movhi	r1, #39	; 0x27
   16c44:	strbhi	r1, [r8, r3]
   16c48:	add	r3, r4, #3
   16c4c:	cmp	r9, r3
   16c50:	add	r4, r3, #1
   16c54:	movhi	r2, #92	; 0x5c
   16c58:	strbhi	r2, [r8, r3]
   16c5c:	cmp	fp, #0
   16c60:	beq	17088 <lchmod@@Base+0x13e0>
   16c64:	ldr	r2, [sp, #28]
   16c68:	ldr	r1, [sp, #40]	; 0x28
   16c6c:	add	r2, r2, #1
   16c70:	cmp	r2, r1
   16c74:	bcs	16cac <lchmod@@Base+0x1004>
   16c78:	ldr	r1, [sp, #48]	; 0x30
   16c7c:	mov	r6, #48	; 0x30
   16c80:	ldrb	r2, [r1, r2]
   16c84:	sub	r2, r2, #48	; 0x30
   16c88:	cmp	r2, #9
   16c8c:	bhi	17098 <lchmod@@Base+0x13f0>
   16c90:	cmp	r9, r4
   16c94:	add	r2, r3, #2
   16c98:	strbhi	r6, [r8, r4]
   16c9c:	cmp	r9, r2
   16ca0:	add	r4, r3, #3
   16ca4:	movhi	r1, #48	; 0x30
   16ca8:	strbhi	r1, [r8, r2]
   16cac:	mov	r5, #0
   16cb0:	b	17090 <lchmod@@Base+0x13e8>
   16cb4:	ldr	r3, [sp, #148]	; 0x94
   16cb8:	ands	r5, r3, #1
   16cbc:	bne	16d44 <lchmod@@Base+0x109c>
   16cc0:	mov	fp, #0
   16cc4:	b	16aa4 <lchmod@@Base+0xdfc>
   16cc8:	cmp	r7, #0
   16ccc:	bne	167dc <lchmod@@Base+0xb34>
   16cd0:	mov	r5, #0
   16cd4:	b	16cc0 <lchmod@@Base+0x1018>
   16cd8:	cmp	sl, #2
   16cdc:	bne	16d50 <lchmod@@Base+0x10a8>
   16ce0:	cmp	r7, #0
   16ce4:	bne	167dc <lchmod@@Base+0xb34>
   16ce8:	mov	r5, r7
   16cec:	mov	fp, r7
   16cf0:	ldr	r3, [sp, #52]	; 0x34
   16cf4:	eor	fp, fp, #1
   16cf8:	tst	r3, fp
   16cfc:	beq	16d28 <lchmod@@Base+0x1080>
   16d00:	cmp	r9, r4
   16d04:	movhi	r3, #39	; 0x27
   16d08:	strbhi	r3, [r8, r4]
   16d0c:	add	r3, r4, #1
   16d10:	add	r4, r4, #2
   16d14:	cmp	r9, r3
   16d18:	movhi	r2, #39	; 0x27
   16d1c:	strbhi	r2, [r8, r3]
   16d20:	mov	r3, #0
   16d24:	str	r3, [sp, #52]	; 0x34
   16d28:	cmp	r9, r4
   16d2c:	ldr	r3, [sp, #72]	; 0x48
   16d30:	strbhi	r6, [r8, r4]
   16d34:	cmp	r5, #0
   16d38:	add	r4, r4, #1
   16d3c:	moveq	r3, #0
   16d40:	str	r3, [sp, #72]	; 0x48
   16d44:	ldr	r3, [sp, #28]
   16d48:	add	r3, r3, #1
   16d4c:	b	16504 <lchmod@@Base+0x85c>
   16d50:	ldr	r3, [sp, #24]
   16d54:	and	r3, r3, r7
   16d58:	tst	r5, r3
   16d5c:	moveq	r3, r6
   16d60:	beq	168f0 <lchmod@@Base+0xc48>
   16d64:	mov	fp, #0
   16d68:	mov	r5, fp
   16d6c:	b	16cf0 <lchmod@@Base+0x1048>
   16d70:	mov	r3, #116	; 0x74
   16d74:	b	168f0 <lchmod@@Base+0xc48>
   16d78:	mov	r3, #110	; 0x6e
   16d7c:	b	168f0 <lchmod@@Base+0xc48>
   16d80:	mov	r3, #97	; 0x61
   16d84:	ldr	r2, [sp, #24]
   16d88:	cmp	r2, #0
   16d8c:	beq	16cd0 <lchmod@@Base+0x1028>
   16d90:	mov	r6, r3
   16d94:	mov	r5, #0
   16d98:	b	16af8 <lchmod@@Base+0xe50>
   16d9c:	mov	r3, #98	; 0x62
   16da0:	b	16d84 <lchmod@@Base+0x10dc>
   16da4:	mov	r3, #118	; 0x76
   16da8:	b	16d84 <lchmod@@Base+0x10dc>
   16dac:	mov	r3, #102	; 0x66
   16db0:	b	16d84 <lchmod@@Base+0x10dc>
   16db4:	ldr	r3, [sp, #40]	; 0x28
   16db8:	cmn	r3, #1
   16dbc:	bne	16ddc <lchmod@@Base+0x1134>
   16dc0:	ldr	r3, [sp, #48]	; 0x30
   16dc4:	ldrb	r3, [r3, #1]
   16dc8:	adds	r3, r3, #0
   16dcc:	movne	r3, #1
   16dd0:	cmp	r3, #0
   16dd4:	bne	16cd0 <lchmod@@Base+0x1028>
   16dd8:	b	16bbc <lchmod@@Base+0xf14>
   16ddc:	ldr	r3, [sp, #40]	; 0x28
   16de0:	subs	r3, r3, #1
   16de4:	b	16dcc <lchmod@@Base+0x1124>
   16de8:	mov	r3, #0
   16dec:	mov	r2, #0
   16df0:	strd	r2, [sp, #96]	; 0x60
   16df4:	ldr	r3, [sp, #40]	; 0x28
   16df8:	cmn	r3, #1
   16dfc:	bne	16e0c <lchmod@@Base+0x1164>
   16e00:	ldr	r0, [sp, #48]	; 0x30
   16e04:	bl	11764 <strlen@plt>
   16e08:	str	r0, [sp, #40]	; 0x28
   16e0c:	ldr	r5, [sp, #36]	; 0x24
   16e10:	mov	r3, #0
   16e14:	str	r3, [sp, #56]	; 0x38
   16e18:	ldr	r3, [sp, #28]
   16e1c:	add	r0, sp, #92	; 0x5c
   16e20:	ldr	r1, [sp, #40]	; 0x28
   16e24:	ldr	r2, [sp, #56]	; 0x38
   16e28:	add	r2, r3, r2
   16e2c:	ldr	r3, [sp, #48]	; 0x30
   16e30:	add	fp, r3, r2
   16e34:	sub	r2, r1, r2
   16e38:	add	r3, sp, #96	; 0x60
   16e3c:	mov	r1, fp
   16e40:	bl	18dcc <lchmod@@Base+0x3124>
   16e44:	subs	r2, r0, #0
   16e48:	beq	16e88 <lchmod@@Base+0x11e0>
   16e4c:	cmn	r2, #1
   16e50:	beq	1705c <lchmod@@Base+0x13b4>
   16e54:	cmn	r2, #2
   16e58:	bne	16fcc <lchmod@@Base+0x1324>
   16e5c:	ldr	r3, [sp, #28]
   16e60:	ldr	r2, [sp, #56]	; 0x38
   16e64:	add	r3, r3, r2
   16e68:	ldr	r2, [sp, #40]	; 0x28
   16e6c:	cmp	r2, r3
   16e70:	bls	1705c <lchmod@@Base+0x13b4>
   16e74:	ldr	r2, [sp, #56]	; 0x38
   16e78:	ldr	r3, [sp, #80]	; 0x50
   16e7c:	ldrb	r5, [r3, r2]
   16e80:	cmp	r5, #0
   16e84:	bne	16fbc <lchmod@@Base+0x1314>
   16e88:	ldr	r3, [sp, #56]	; 0x38
   16e8c:	cmp	r3, #1
   16e90:	bls	168b4 <lchmod@@Base+0xc0c>
   16e94:	ldr	r3, [sp, #28]
   16e98:	mov	fp, #0
   16e9c:	mov	ip, #92	; 0x5c
   16ea0:	ldr	r2, [sp, #56]	; 0x38
   16ea4:	add	r3, r3, r2
   16ea8:	ldr	r2, [sp, #24]
   16eac:	str	r3, [sp, #36]	; 0x24
   16eb0:	eor	r3, r5, #1
   16eb4:	and	r3, r3, r2
   16eb8:	mov	r2, #39	; 0x27
   16ebc:	uxtb	r3, r3
   16ec0:	cmp	r3, #0
   16ec4:	beq	17064 <lchmod@@Base+0x13bc>
   16ec8:	sub	r0, sl, #2
   16ecc:	cmp	r7, #0
   16ed0:	clz	r0, r0
   16ed4:	lsr	r0, r0, #5
   16ed8:	bne	167d8 <lchmod@@Base+0xb30>
   16edc:	ldr	r1, [sp, #52]	; 0x34
   16ee0:	eor	r1, r1, #1
   16ee4:	ands	r1, r0, r1
   16ee8:	beq	16f18 <lchmod@@Base+0x1270>
   16eec:	cmp	r9, r4
   16ef0:	add	r0, r4, #1
   16ef4:	str	r1, [sp, #52]	; 0x34
   16ef8:	strbhi	r2, [r8, r4]
   16efc:	cmp	r9, r0
   16f00:	movhi	lr, #36	; 0x24
   16f04:	strbhi	lr, [r8, r0]
   16f08:	add	r0, r4, #2
   16f0c:	add	r4, r4, #3
   16f10:	cmp	r9, r0
   16f14:	strbhi	r2, [r8, r0]
   16f18:	cmp	r9, r4
   16f1c:	add	r0, r4, #1
   16f20:	mov	fp, r3
   16f24:	strbhi	ip, [r8, r4]
   16f28:	cmp	r9, r0
   16f2c:	lsrhi	r1, r6, #6
   16f30:	addhi	r1, r1, #48	; 0x30
   16f34:	strbhi	r1, [r8, r0]
   16f38:	add	r0, r4, #2
   16f3c:	add	r4, r4, #3
   16f40:	cmp	r9, r0
   16f44:	ubfxhi	r1, r6, #3, #3
   16f48:	and	r6, r6, #7
   16f4c:	add	r6, r6, #48	; 0x30
   16f50:	addhi	r1, r1, #48	; 0x30
   16f54:	strbhi	r1, [r8, r0]
   16f58:	eor	r0, fp, #1
   16f5c:	ldr	r1, [sp, #28]
   16f60:	ldr	lr, [sp, #52]	; 0x34
   16f64:	add	r1, r1, #1
   16f68:	and	r0, r0, lr
   16f6c:	ldr	lr, [sp, #36]	; 0x24
   16f70:	cmp	r1, lr
   16f74:	bcs	16cf0 <lchmod@@Base+0x1048>
   16f78:	cmp	r0, #0
   16f7c:	beq	16fa0 <lchmod@@Base+0x12f8>
   16f80:	cmp	r9, r4
   16f84:	add	r0, r4, #1
   16f88:	strbhi	r2, [r8, r4]
   16f8c:	cmp	r9, r0
   16f90:	add	r4, r4, #2
   16f94:	strbhi	r2, [r8, r0]
   16f98:	mov	r0, #0
   16f9c:	str	r0, [sp, #52]	; 0x34
   16fa0:	ldr	r0, [sp, #48]	; 0x30
   16fa4:	cmp	r9, r4
   16fa8:	str	r1, [sp, #28]
   16fac:	strbhi	r6, [r8, r4]
   16fb0:	add	r4, r4, #1
   16fb4:	ldrb	r6, [r0, r1]
   16fb8:	b	16ec0 <lchmod@@Base+0x1218>
   16fbc:	ldr	r3, [sp, #56]	; 0x38
   16fc0:	add	r3, r3, #1
   16fc4:	str	r3, [sp, #56]	; 0x38
   16fc8:	b	16e5c <lchmod@@Base+0x11b4>
   16fcc:	cmp	sl, #2
   16fd0:	movne	r3, #0
   16fd4:	andeq	r3, r7, #1
   16fd8:	cmp	r3, #0
   16fdc:	movne	r1, #1
   16fe0:	bne	1703c <lchmod@@Base+0x1394>
   16fe4:	ldr	r0, [sp, #92]	; 0x5c
   16fe8:	str	r2, [sp, #84]	; 0x54
   16fec:	bl	11644 <iswprint@plt>
   16ff0:	ldr	r3, [sp, #56]	; 0x38
   16ff4:	cmp	r0, #0
   16ff8:	add	r0, sp, #96	; 0x60
   16ffc:	moveq	r5, #0
   17000:	ldr	r2, [sp, #84]	; 0x54
   17004:	add	r3, r3, r2
   17008:	str	r3, [sp, #56]	; 0x38
   1700c:	bl	115c0 <mbsinit@plt>
   17010:	cmp	r0, #0
   17014:	beq	16e18 <lchmod@@Base+0x1170>
   17018:	b	16e88 <lchmod@@Base+0x11e0>
   1701c:	ldrb	r3, [fp, #1]!
   17020:	cmp	r3, #94	; 0x5e
   17024:	beq	16904 <lchmod@@Base+0xc5c>
   17028:	bhi	17048 <lchmod@@Base+0x13a0>
   1702c:	sub	r3, r3, #91	; 0x5b
   17030:	cmp	r3, #1
   17034:	bls	16904 <lchmod@@Base+0xc5c>
   17038:	add	r1, r1, #1
   1703c:	cmp	r1, r2
   17040:	bne	1701c <lchmod@@Base+0x1374>
   17044:	b	16fe4 <lchmod@@Base+0x133c>
   17048:	cmp	r3, #96	; 0x60
   1704c:	beq	16904 <lchmod@@Base+0xc5c>
   17050:	cmp	r3, #124	; 0x7c
   17054:	bne	17038 <lchmod@@Base+0x1390>
   17058:	b	16904 <lchmod@@Base+0xc5c>
   1705c:	mov	r5, #0
   17060:	b	16e88 <lchmod@@Base+0x11e0>
   17064:	ldr	r1, [sp, #64]	; 0x40
   17068:	cmp	r1, #0
   1706c:	beq	16f58 <lchmod@@Base+0x12b0>
   17070:	cmp	r9, r4
   17074:	mov	r1, #0
   17078:	strbhi	ip, [r8, r4]
   1707c:	add	r4, r4, #1
   17080:	str	r1, [sp, #64]	; 0x40
   17084:	b	16f58 <lchmod@@Base+0x12b0>
   17088:	mov	r5, fp
   1708c:	ldr	fp, [sp, #24]
   17090:	mov	r6, #48	; 0x30
   17094:	b	16aa4 <lchmod@@Base+0xdfc>
   17098:	mov	r5, #0
   1709c:	b	16aa4 <lchmod@@Base+0xdfc>
   170a0:	mov	r6, r1
   170a4:	b	16cd0 <lchmod@@Base+0x1028>
   170a8:	mov	r6, r1
   170ac:	b	16cc0 <lchmod@@Base+0x1018>
   170b0:	ldr	r2, [sp, #28]
   170b4:	ldr	r3, [sp, #40]	; 0x28
   170b8:	subs	r3, r3, r2
   170bc:	movne	r3, #1
   170c0:	b	16528 <lchmod@@Base+0x880>
   170c4:	ldr	r3, [sp, #60]	; 0x3c
   170c8:	mov	sl, #2
   170cc:	ldr	r7, [sp, #72]	; 0x48
   170d0:	adds	r6, r3, #0
   170d4:	mov	r5, r3
   170d8:	movne	r6, #1
   170dc:	cmp	r9, #0
   170e0:	movne	r6, #0
   170e4:	cmp	r6, #0
   170e8:	bne	164b8 <lchmod@@Base+0x810>
   170ec:	ldr	r3, [sp, #68]	; 0x44
   170f0:	ldr	r2, [sp, #44]	; 0x2c
   170f4:	cmp	r2, #0
   170f8:	moveq	r3, #0
   170fc:	andne	r3, r3, #1
   17100:	cmp	r3, #0
   17104:	movne	r3, r2
   17108:	subne	r3, r3, #1
   1710c:	bne	1713c <lchmod@@Base+0x1494>
   17110:	cmp	r9, r4
   17114:	movhi	r3, #0
   17118:	strbhi	r3, [r8, r4]
   1711c:	mov	r0, r4
   17120:	add	sp, sp, #108	; 0x6c
   17124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17128:	mov	r3, r7
   1712c:	b	170f0 <lchmod@@Base+0x1448>
   17130:	cmp	r9, r4
   17134:	strbhi	r2, [r8, r4]
   17138:	add	r4, r4, #1
   1713c:	ldrb	r2, [r3, #1]!
   17140:	cmp	r2, #0
   17144:	bne	17130 <lchmod@@Base+0x1488>
   17148:	b	17110 <lchmod@@Base+0x1468>
   1714c:			; <UNDEFINED> instruction: 0x00019bb0
   17150:	andeq	r9, r1, r3, asr #23
   17154:	andeq	r9, r1, r1, asr #23
   17158:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1715c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17160:	sub	sp, sp, #52	; 0x34
   17164:	mov	r6, r0
   17168:	mov	r5, r3
   1716c:	mov	r8, r1
   17170:	mov	r9, r2
   17174:	bl	117a0 <__errno_location@plt>
   17178:	ldr	r3, [r0]
   1717c:	cmn	r6, #-2147483647	; 0x80000001
   17180:	str	r0, [sp, #24]
   17184:	ldr	r7, [pc, #368]	; 172fc <lchmod@@Base+0x1654>
   17188:	str	r3, [sp, #32]
   1718c:	movne	r3, #0
   17190:	moveq	r3, #1
   17194:	orrs	r3, r3, r6, lsr #31
   17198:	ldr	r4, [r7]
   1719c:	beq	171a4 <lchmod@@Base+0x14fc>
   171a0:	bl	11914 <abort@plt>
   171a4:	ldr	r2, [r7, #4]
   171a8:	cmp	r2, r6
   171ac:	bgt	1721c <lchmod@@Base+0x1574>
   171b0:	add	sl, r7, #8
   171b4:	mov	r3, #8
   171b8:	cmp	r4, sl
   171bc:	add	r1, sp, #44	; 0x2c
   171c0:	str	r2, [sp, #44]	; 0x2c
   171c4:	sub	r2, r6, r2
   171c8:	movne	r0, r4
   171cc:	moveq	r0, #0
   171d0:	add	r2, r2, #1
   171d4:	str	r3, [sp]
   171d8:	mvn	r3, #-2147483648	; 0x80000000
   171dc:	bl	180e8 <lchmod@@Base+0x2440>
   171e0:	cmp	r4, sl
   171e4:	mov	fp, r0
   171e8:	str	r0, [r7]
   171ec:	ldmeq	r4, {r0, r1}
   171f0:	mov	r4, fp
   171f4:	ldr	r2, [sp, #44]	; 0x2c
   171f8:	stmeq	fp, {r0, r1}
   171fc:	mov	r1, #0
   17200:	ldr	r0, [r7, #4]
   17204:	sub	r2, r2, r0
   17208:	add	r0, fp, r0, lsl #3
   1720c:	lsl	r2, r2, #3
   17210:	bl	117c4 <memset@plt>
   17214:	ldr	r3, [sp, #44]	; 0x2c
   17218:	str	r3, [r7, #4]
   1721c:	ldr	r3, [r5, #4]
   17220:	add	sl, r4, r6, lsl #3
   17224:	mov	r2, r8
   17228:	ldr	fp, [r4, r6, lsl #3]
   1722c:	ldr	r7, [sl, #4]
   17230:	orr	r3, r3, #1
   17234:	str	r3, [sp, #28]
   17238:	add	r3, r5, #8
   1723c:	mov	r1, fp
   17240:	str	r3, [sp, #36]	; 0x24
   17244:	mov	r0, r7
   17248:	ldr	r3, [r5, #44]	; 0x2c
   1724c:	str	r3, [sp, #16]
   17250:	ldr	r3, [r5, #40]	; 0x28
   17254:	str	r3, [sp, #12]
   17258:	add	r3, r5, #8
   1725c:	str	r3, [sp, #8]
   17260:	ldr	r3, [sp, #28]
   17264:	str	r3, [sp, #4]
   17268:	ldr	r3, [r5]
   1726c:	str	r3, [sp]
   17270:	mov	r3, r9
   17274:	bl	1646c <lchmod@@Base+0x7c4>
   17278:	cmp	fp, r0
   1727c:	bhi	172e4 <lchmod@@Base+0x163c>
   17280:	ldr	r3, [pc, #120]	; 17300 <lchmod@@Base+0x1658>
   17284:	add	fp, r0, #1
   17288:	str	fp, [r4, r6, lsl #3]
   1728c:	cmp	r7, r3
   17290:	beq	1729c <lchmod@@Base+0x15f4>
   17294:	mov	r0, r7
   17298:	bl	130d0 <__assert_fail@plt+0x1768>
   1729c:	mov	r0, fp
   172a0:	bl	17fd8 <lchmod@@Base+0x2330>
   172a4:	ldr	r3, [r5, #44]	; 0x2c
   172a8:	mov	r2, r8
   172ac:	mov	r1, fp
   172b0:	str	r0, [sl, #4]
   172b4:	mov	r7, r0
   172b8:	str	r3, [sp, #16]
   172bc:	ldr	r3, [r5, #40]	; 0x28
   172c0:	str	r3, [sp, #12]
   172c4:	add	r3, r5, #8
   172c8:	str	r3, [sp, #8]
   172cc:	ldr	r3, [sp, #28]
   172d0:	str	r3, [sp, #4]
   172d4:	ldr	r3, [r5]
   172d8:	str	r3, [sp]
   172dc:	mov	r3, r9
   172e0:	bl	1646c <lchmod@@Base+0x7c4>
   172e4:	ldr	r3, [sp, #24]
   172e8:	mov	r0, r7
   172ec:	ldr	r2, [sp, #32]
   172f0:	str	r2, [r3]
   172f4:	add	sp, sp, #52	; 0x34
   172f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172fc:	muleq	r2, ip, r1
   17300:	andeq	fp, r2, ip, lsl #4
   17304:	push	{r4, r5, r6, lr}
   17308:	mov	r5, r0
   1730c:	bl	117a0 <__errno_location@plt>
   17310:	mov	r4, r0
   17314:	cmp	r5, #0
   17318:	ldr	r0, [pc, #20]	; 17334 <lchmod@@Base+0x168c>
   1731c:	mov	r1, #48	; 0x30
   17320:	movne	r0, r5
   17324:	ldr	r6, [r4]
   17328:	bl	181d8 <lchmod@@Base+0x2530>
   1732c:	str	r6, [r4]
   17330:	pop	{r4, r5, r6, pc}
   17334:	andeq	fp, r2, ip, lsl #6
   17338:	ldr	r3, [pc, #12]	; 1734c <lchmod@@Base+0x16a4>
   1733c:	cmp	r0, #0
   17340:	moveq	r0, r3
   17344:	ldr	r0, [r0]
   17348:	bx	lr
   1734c:	andeq	fp, r2, ip, lsl #6
   17350:	ldr	r3, [pc, #12]	; 17364 <lchmod@@Base+0x16bc>
   17354:	cmp	r0, #0
   17358:	moveq	r0, r3
   1735c:	str	r1, [r0]
   17360:	bx	lr
   17364:	andeq	fp, r2, ip, lsl #6
   17368:	ldr	r3, [pc, #52]	; 173a4 <lchmod@@Base+0x16fc>
   1736c:	cmp	r0, #0
   17370:	push	{lr}		; (str lr, [sp, #-4]!)
   17374:	lsr	lr, r1, #5
   17378:	and	r1, r1, #31
   1737c:	moveq	r0, r3
   17380:	add	r3, r0, #8
   17384:	ldr	ip, [r3, lr, lsl #2]
   17388:	lsr	r0, ip, r1
   1738c:	eor	r2, r2, r0
   17390:	and	r0, r0, #1
   17394:	and	r2, r2, #1
   17398:	eor	r1, ip, r2, lsl r1
   1739c:	str	r1, [r3, lr, lsl #2]
   173a0:	pop	{pc}		; (ldr pc, [sp], #4)
   173a4:	andeq	fp, r2, ip, lsl #6
   173a8:	ldr	r3, [pc, #16]	; 173c0 <lchmod@@Base+0x1718>
   173ac:	cmp	r0, #0
   173b0:	movne	r3, r0
   173b4:	ldr	r0, [r3, #4]
   173b8:	str	r1, [r3, #4]
   173bc:	bx	lr
   173c0:	andeq	fp, r2, ip, lsl #6
   173c4:	ldr	r3, [pc, #44]	; 173f8 <lchmod@@Base+0x1750>
   173c8:	cmp	r0, #0
   173cc:	moveq	r0, r3
   173d0:	mov	r3, #10
   173d4:	cmp	r2, #0
   173d8:	cmpne	r1, #0
   173dc:	str	r3, [r0]
   173e0:	bne	173ec <lchmod@@Base+0x1744>
   173e4:	push	{r4, lr}
   173e8:	bl	11914 <abort@plt>
   173ec:	str	r1, [r0, #40]	; 0x28
   173f0:	str	r2, [r0, #44]	; 0x2c
   173f4:	bx	lr
   173f8:	andeq	fp, r2, ip, lsl #6
   173fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17400:	sub	sp, sp, #24
   17404:	mov	sl, r3
   17408:	mov	r7, r0
   1740c:	mov	r8, r1
   17410:	mov	r9, r2
   17414:	ldr	r4, [sp, #56]	; 0x38
   17418:	ldr	r3, [pc, #88]	; 17478 <lchmod@@Base+0x17d0>
   1741c:	cmp	r4, #0
   17420:	moveq	r4, r3
   17424:	bl	117a0 <__errno_location@plt>
   17428:	ldr	r3, [r4, #44]	; 0x2c
   1742c:	mov	r5, r0
   17430:	mov	r2, r9
   17434:	mov	r1, r8
   17438:	mov	r0, r7
   1743c:	ldr	r6, [r5]
   17440:	str	r3, [sp, #16]
   17444:	ldr	r3, [r4, #40]	; 0x28
   17448:	str	r3, [sp, #12]
   1744c:	add	r3, r4, #8
   17450:	str	r3, [sp, #8]
   17454:	ldr	r3, [r4, #4]
   17458:	str	r3, [sp, #4]
   1745c:	ldr	r3, [r4]
   17460:	str	r3, [sp]
   17464:	mov	r3, sl
   17468:	bl	1646c <lchmod@@Base+0x7c4>
   1746c:	str	r6, [r5]
   17470:	add	sp, sp, #24
   17474:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17478:	andeq	fp, r2, ip, lsl #6
   1747c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17480:	cmp	r3, #0
   17484:	sub	sp, sp, #44	; 0x2c
   17488:	mov	r6, r2
   1748c:	mov	sl, r1
   17490:	mov	r9, r0
   17494:	ldr	r4, [pc, #176]	; 1754c <lchmod@@Base+0x18a4>
   17498:	movne	r4, r3
   1749c:	bl	117a0 <__errno_location@plt>
   174a0:	ldr	r3, [r0]
   174a4:	mov	r1, #0
   174a8:	mov	r2, r9
   174ac:	mov	r8, r0
   174b0:	mov	r0, r1
   174b4:	ldr	r5, [r4, #4]
   174b8:	add	fp, r4, #8
   174bc:	str	r3, [sp, #28]
   174c0:	ldr	r3, [r4, #44]	; 0x2c
   174c4:	cmp	r6, #0
   174c8:	orreq	r5, r5, #1
   174cc:	str	r3, [sp, #16]
   174d0:	ldr	r3, [r4, #40]	; 0x28
   174d4:	stmib	sp, {r5, fp}
   174d8:	str	r3, [sp, #12]
   174dc:	ldr	r3, [r4]
   174e0:	str	r3, [sp]
   174e4:	mov	r3, sl
   174e8:	bl	1646c <lchmod@@Base+0x7c4>
   174ec:	add	r1, r0, #1
   174f0:	mov	r7, r0
   174f4:	mov	r0, r1
   174f8:	str	r1, [sp, #36]	; 0x24
   174fc:	bl	17fd8 <lchmod@@Base+0x2330>
   17500:	ldr	r3, [r4, #44]	; 0x2c
   17504:	mov	r2, r9
   17508:	ldr	r1, [sp, #36]	; 0x24
   1750c:	str	r3, [sp, #16]
   17510:	ldr	r3, [r4, #40]	; 0x28
   17514:	stmib	sp, {r5, fp}
   17518:	str	r0, [sp, #32]
   1751c:	str	r3, [sp, #12]
   17520:	ldr	r3, [r4]
   17524:	str	r3, [sp]
   17528:	mov	r3, sl
   1752c:	bl	1646c <lchmod@@Base+0x7c4>
   17530:	ldr	r3, [sp, #28]
   17534:	cmp	r6, #0
   17538:	ldr	r0, [sp, #32]
   1753c:	str	r3, [r8]
   17540:	strne	r7, [r6]
   17544:	add	sp, sp, #44	; 0x2c
   17548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1754c:	andeq	fp, r2, ip, lsl #6
   17550:	mov	r3, r2
   17554:	mov	r2, #0
   17558:	b	1747c <lchmod@@Base+0x17d4>
   1755c:	push	{r4, r5, r6, r7, r8, lr}
   17560:	mov	r6, #1
   17564:	ldr	r4, [pc, #100]	; 175d0 <lchmod@@Base+0x1928>
   17568:	ldr	r5, [r4]
   1756c:	add	r7, r5, #4
   17570:	ldr	r3, [r4, #4]
   17574:	cmp	r3, r6
   17578:	bgt	175c0 <lchmod@@Base+0x1918>
   1757c:	ldr	r6, [pc, #80]	; 175d4 <lchmod@@Base+0x192c>
   17580:	ldr	r0, [r5, #4]
   17584:	cmp	r0, r6
   17588:	beq	1759c <lchmod@@Base+0x18f4>
   1758c:	bl	130d0 <__assert_fail@plt+0x1768>
   17590:	mov	r3, #256	; 0x100
   17594:	str	r3, [r4, #8]
   17598:	str	r6, [r4, #12]
   1759c:	ldr	r6, [pc, #52]	; 175d8 <lchmod@@Base+0x1930>
   175a0:	cmp	r5, r6
   175a4:	beq	175b4 <lchmod@@Base+0x190c>
   175a8:	mov	r0, r5
   175ac:	bl	130d0 <__assert_fail@plt+0x1768>
   175b0:	str	r6, [r4]
   175b4:	mov	r3, #1
   175b8:	str	r3, [r4, #4]
   175bc:	pop	{r4, r5, r6, r7, r8, pc}
   175c0:	ldr	r0, [r7, r6, lsl #3]
   175c4:	add	r6, r6, #1
   175c8:	bl	130d0 <__assert_fail@plt+0x1768>
   175cc:	b	17570 <lchmod@@Base+0x18c8>
   175d0:	muleq	r2, ip, r1
   175d4:	andeq	fp, r2, ip, lsl #4
   175d8:	andeq	fp, r2, r4, lsr #3
   175dc:	ldr	r3, [pc, #4]	; 175e8 <lchmod@@Base+0x1940>
   175e0:	mvn	r2, #0
   175e4:	b	1715c <lchmod@@Base+0x14b4>
   175e8:	andeq	fp, r2, ip, lsl #6
   175ec:	ldr	r3, [pc]	; 175f4 <lchmod@@Base+0x194c>
   175f0:	b	1715c <lchmod@@Base+0x14b4>
   175f4:	andeq	fp, r2, ip, lsl #6
   175f8:	mov	r1, r0
   175fc:	mov	r0, #0
   17600:	b	175dc <lchmod@@Base+0x1934>
   17604:	mov	r2, r1
   17608:	mov	r1, r0
   1760c:	mov	r0, #0
   17610:	b	175ec <lchmod@@Base+0x1944>
   17614:	push	{r4, r5, lr}
   17618:	sub	sp, sp, #52	; 0x34
   1761c:	mov	r5, r2
   17620:	mov	r4, r0
   17624:	mov	r0, sp
   17628:	bl	16310 <lchmod@@Base+0x668>
   1762c:	mov	r3, sp
   17630:	mvn	r2, #0
   17634:	mov	r1, r5
   17638:	mov	r0, r4
   1763c:	bl	1715c <lchmod@@Base+0x14b4>
   17640:	add	sp, sp, #52	; 0x34
   17644:	pop	{r4, r5, pc}
   17648:	push	{r4, r5, r6, lr}
   1764c:	sub	sp, sp, #48	; 0x30
   17650:	mov	r5, r2
   17654:	mov	r6, r3
   17658:	mov	r4, r0
   1765c:	mov	r0, sp
   17660:	bl	16310 <lchmod@@Base+0x668>
   17664:	mov	r3, sp
   17668:	mov	r2, r6
   1766c:	mov	r1, r5
   17670:	mov	r0, r4
   17674:	bl	1715c <lchmod@@Base+0x14b4>
   17678:	add	sp, sp, #48	; 0x30
   1767c:	pop	{r4, r5, r6, pc}
   17680:	mov	r2, r1
   17684:	mov	r1, r0
   17688:	mov	r0, #0
   1768c:	b	17614 <lchmod@@Base+0x196c>
   17690:	mov	r3, r2
   17694:	mov	r2, r1
   17698:	mov	r1, r0
   1769c:	mov	r0, #0
   176a0:	b	17648 <lchmod@@Base+0x19a0>
   176a4:	push	{r4, r5, r6, lr}
   176a8:	mov	r4, r0
   176ac:	mov	r5, r1
   176b0:	mov	r6, r2
   176b4:	sub	sp, sp, #48	; 0x30
   176b8:	mov	ip, sp
   176bc:	ldr	lr, [pc, #64]	; 17704 <lchmod@@Base+0x1a5c>
   176c0:	ldm	lr!, {r0, r1, r2, r3}
   176c4:	stmia	ip!, {r0, r1, r2, r3}
   176c8:	ldm	lr!, {r0, r1, r2, r3}
   176cc:	stmia	ip!, {r0, r1, r2, r3}
   176d0:	ldm	lr, {r0, r1, r2, r3}
   176d4:	stm	ip, {r0, r1, r2, r3}
   176d8:	mov	r1, r6
   176dc:	mov	r2, #1
   176e0:	mov	r0, sp
   176e4:	bl	17368 <lchmod@@Base+0x16c0>
   176e8:	mov	r3, sp
   176ec:	mov	r2, r5
   176f0:	mov	r1, r4
   176f4:	mov	r0, #0
   176f8:	bl	1715c <lchmod@@Base+0x14b4>
   176fc:	add	sp, sp, #48	; 0x30
   17700:	pop	{r4, r5, r6, pc}
   17704:	andeq	fp, r2, ip, lsl #6
   17708:	mov	r2, r1
   1770c:	mvn	r1, #0
   17710:	b	176a4 <lchmod@@Base+0x19fc>
   17714:	mov	r1, #58	; 0x3a
   17718:	b	17708 <lchmod@@Base+0x1a60>
   1771c:	mov	r2, #58	; 0x3a
   17720:	b	176a4 <lchmod@@Base+0x19fc>
   17724:	push	{r4, r5, lr}
   17728:	sub	sp, sp, #100	; 0x64
   1772c:	mov	r4, r0
   17730:	mov	r0, sp
   17734:	mov	r5, r2
   17738:	bl	16310 <lchmod@@Base+0x668>
   1773c:	mov	ip, sp
   17740:	add	lr, sp, #48	; 0x30
   17744:	ldm	ip!, {r0, r1, r2, r3}
   17748:	stmia	lr!, {r0, r1, r2, r3}
   1774c:	ldm	ip!, {r0, r1, r2, r3}
   17750:	stmia	lr!, {r0, r1, r2, r3}
   17754:	ldm	ip, {r0, r1, r2, r3}
   17758:	stm	lr, {r0, r1, r2, r3}
   1775c:	mov	r2, #1
   17760:	mov	r1, #58	; 0x3a
   17764:	add	r0, sp, #48	; 0x30
   17768:	bl	17368 <lchmod@@Base+0x16c0>
   1776c:	add	r3, sp, #48	; 0x30
   17770:	mvn	r2, #0
   17774:	mov	r1, r5
   17778:	mov	r0, r4
   1777c:	bl	1715c <lchmod@@Base+0x14b4>
   17780:	add	sp, sp, #100	; 0x64
   17784:	pop	{r4, r5, pc}
   17788:	push	{r4, r5, r6, r7, lr}
   1778c:	mov	r4, r0
   17790:	mov	r6, r1
   17794:	mov	r7, r2
   17798:	mov	r5, r3
   1779c:	sub	sp, sp, #52	; 0x34
   177a0:	ldr	lr, [pc, #68]	; 177ec <lchmod@@Base+0x1b44>
   177a4:	mov	ip, sp
   177a8:	ldm	lr!, {r0, r1, r2, r3}
   177ac:	stmia	ip!, {r0, r1, r2, r3}
   177b0:	ldm	lr!, {r0, r1, r2, r3}
   177b4:	stmia	ip!, {r0, r1, r2, r3}
   177b8:	ldm	lr, {r0, r1, r2, r3}
   177bc:	stm	ip, {r0, r1, r2, r3}
   177c0:	mov	r2, r7
   177c4:	mov	r1, r6
   177c8:	mov	r0, sp
   177cc:	bl	173c4 <lchmod@@Base+0x171c>
   177d0:	ldr	r2, [sp, #72]	; 0x48
   177d4:	mov	r3, sp
   177d8:	mov	r1, r5
   177dc:	mov	r0, r4
   177e0:	bl	1715c <lchmod@@Base+0x14b4>
   177e4:	add	sp, sp, #52	; 0x34
   177e8:	pop	{r4, r5, r6, r7, pc}
   177ec:	andeq	fp, r2, ip, lsl #6
   177f0:	mvn	ip, #0
   177f4:	push	{r0, r1, r2, lr}
   177f8:	str	ip, [sp]
   177fc:	bl	17788 <lchmod@@Base+0x1ae0>
   17800:	add	sp, sp, #12
   17804:	pop	{pc}		; (ldr pc, [sp], #4)
   17808:	mov	r3, r2
   1780c:	mov	r2, r1
   17810:	mov	r1, r0
   17814:	mov	r0, #0
   17818:	b	177f0 <lchmod@@Base+0x1b48>
   1781c:	push	{r0, r1, r2, lr}
   17820:	str	r3, [sp]
   17824:	mov	r3, r2
   17828:	mov	r2, r1
   1782c:	mov	r1, r0
   17830:	mov	r0, #0
   17834:	bl	17788 <lchmod@@Base+0x1ae0>
   17838:	add	sp, sp, #12
   1783c:	pop	{pc}		; (ldr pc, [sp], #4)
   17840:	ldr	r3, [pc]	; 17848 <lchmod@@Base+0x1ba0>
   17844:	b	1715c <lchmod@@Base+0x14b4>
   17848:	andeq	fp, r2, ip, lsr #3
   1784c:	mov	r2, r1
   17850:	mov	r1, r0
   17854:	mov	r0, #0
   17858:	b	17840 <lchmod@@Base+0x1b98>
   1785c:	mvn	r2, #0
   17860:	b	17840 <lchmod@@Base+0x1b98>
   17864:	mov	r1, r0
   17868:	mov	r0, #0
   1786c:	b	1785c <lchmod@@Base+0x1bb4>
   17870:	push	{r4, r5, r6, lr}
   17874:	ldr	r4, [r0], #8
   17878:	cmp	r4, r0
   1787c:	bne	178a4 <lchmod@@Base+0x1bfc>
   17880:	mov	r0, r1
   17884:	mov	r5, r1
   17888:	bl	187a4 <lchmod@@Base+0x2afc>
   1788c:	subs	r3, r0, #0
   17890:	beq	178b8 <lchmod@@Base+0x1c10>
   17894:	mov	r2, r5
   17898:	mov	r1, r4
   1789c:	pop	{r4, r5, r6, lr}
   178a0:	b	115b4 <memcpy@plt>
   178a4:	mov	r0, r4
   178a8:	bl	187d0 <lchmod@@Base+0x2b28>
   178ac:	cmp	r0, #0
   178b0:	movne	r3, r0
   178b4:	moveq	r3, r4
   178b8:	mov	r0, r3
   178bc:	pop	{r4, r5, r6, pc}
   178c0:	push	{r4, r5, r6, lr}
   178c4:	mov	r6, r0
   178c8:	mov	r4, r0
   178cc:	ldr	r5, [r0, #4]
   178d0:	ldr	r0, [r6], #8
   178d4:	lsl	r5, r5, #1
   178d8:	cmp	r0, r6
   178dc:	beq	178e4 <lchmod@@Base+0x1c3c>
   178e0:	bl	130d0 <__assert_fail@plt+0x1768>
   178e4:	ldr	r3, [r4, #4]
   178e8:	cmp	r3, r5
   178ec:	bhi	17914 <lchmod@@Base+0x1c6c>
   178f0:	mov	r0, r5
   178f4:	bl	187a4 <lchmod@@Base+0x2afc>
   178f8:	cmp	r0, #0
   178fc:	bne	17924 <lchmod@@Base+0x1c7c>
   17900:	mov	r3, #1024	; 0x400
   17904:	mov	r0, #0
   17908:	str	r6, [r4]
   1790c:	str	r3, [r4, #4]
   17910:	pop	{r4, r5, r6, pc}
   17914:	bl	117a0 <__errno_location@plt>
   17918:	mov	r3, #12
   1791c:	str	r3, [r0]
   17920:	b	17900 <lchmod@@Base+0x1c58>
   17924:	stm	r4, {r0, r5}
   17928:	mov	r0, #1
   1792c:	pop	{r4, r5, r6, pc}
   17930:	push	{r4, r5, r6, r7, r8, lr}
   17934:	mov	r7, r0
   17938:	mov	r4, r0
   1793c:	ldr	r8, [r7], #8
   17940:	ldr	r3, [r0, #4]
   17944:	cmp	r8, r7
   17948:	lsl	r6, r3, #1
   1794c:	bne	17978 <lchmod@@Base+0x1cd0>
   17950:	mov	r0, r6
   17954:	bl	187a4 <lchmod@@Base+0x2afc>
   17958:	subs	r5, r0, #0
   1795c:	beq	179a8 <lchmod@@Base+0x1d00>
   17960:	mov	r1, r8
   17964:	ldr	r2, [r4, #4]
   17968:	bl	115b4 <memcpy@plt>
   1796c:	mov	r0, #1
   17970:	stm	r4, {r5, r6}
   17974:	pop	{r4, r5, r6, r7, r8, pc}
   17978:	cmp	r3, r6
   1797c:	bhi	179b0 <lchmod@@Base+0x1d08>
   17980:	mov	r1, r6
   17984:	mov	r0, r8
   17988:	bl	187d0 <lchmod@@Base+0x2b28>
   1798c:	subs	r5, r0, #0
   17990:	bne	1796c <lchmod@@Base+0x1cc4>
   17994:	ldr	r0, [r4]
   17998:	bl	130d0 <__assert_fail@plt+0x1768>
   1799c:	mov	r3, #1024	; 0x400
   179a0:	str	r7, [r4]
   179a4:	str	r3, [r4, #4]
   179a8:	mov	r0, #0
   179ac:	pop	{r4, r5, r6, r7, r8, pc}
   179b0:	bl	117a0 <__errno_location@plt>
   179b4:	mov	r3, #12
   179b8:	str	r3, [r0]
   179bc:	b	17994 <lchmod@@Base+0x1cec>
   179c0:	push	{r4, r5, r6, r7, r8, lr}
   179c4:	subs	r4, r0, #0
   179c8:	bne	179e4 <lchmod@@Base+0x1d3c>
   179cc:	bl	117a0 <__errno_location@plt>
   179d0:	mov	r3, #95	; 0x5f
   179d4:	mvn	r4, #0
   179d8:	str	r3, [r0]
   179dc:	mov	r0, r4
   179e0:	pop	{r4, r5, r6, r7, r8, pc}
   179e4:	cmp	r4, #10
   179e8:	bne	179dc <lchmod@@Base+0x1d34>
   179ec:	mov	r5, r1
   179f0:	ldr	r1, [pc, #40]	; 17a20 <lchmod@@Base+0x1d78>
   179f4:	ldr	r6, [r5]
   179f8:	mov	r0, r6
   179fc:	bl	11548 <strcmp@plt>
   17a00:	subs	r7, r0, #0
   17a04:	bne	179dc <lchmod@@Base+0x1d34>
   17a08:	mov	r0, r6
   17a0c:	bl	1189c <freecon@plt>
   17a10:	str	r7, [r5]
   17a14:	bl	117a0 <__errno_location@plt>
   17a18:	mov	r3, #61	; 0x3d
   17a1c:	b	179d4 <lchmod@@Base+0x1d2c>
   17a20:	andeq	r9, r1, r1, lsl ip
   17a24:	push	{r4, lr}
   17a28:	mov	r4, r1
   17a2c:	bl	11758 <getfilecon@plt>
   17a30:	mov	r1, r4
   17a34:	pop	{r4, lr}
   17a38:	b	179c0 <lchmod@@Base+0x1d18>
   17a3c:	push	{r4, lr}
   17a40:	mov	r4, r1
   17a44:	bl	116d4 <lgetfilecon@plt>
   17a48:	mov	r1, r4
   17a4c:	pop	{r4, lr}
   17a50:	b	179c0 <lchmod@@Base+0x1d18>
   17a54:	push	{r4, lr}
   17a58:	mov	r4, r1
   17a5c:	bl	11614 <fgetfilecon@plt>
   17a60:	mov	r1, r4
   17a64:	pop	{r4, lr}
   17a68:	b	179c0 <lchmod@@Base+0x1d18>
   17a6c:	cmp	r0, #2
   17a70:	push	{r4, r5, r6, r7, r8, lr}
   17a74:	mov	r4, r0
   17a78:	bhi	17aa0 <lchmod@@Base+0x1df8>
   17a7c:	bl	18e48 <lchmod@@Base+0x31a0>
   17a80:	mov	r6, r0
   17a84:	bl	117a0 <__errno_location@plt>
   17a88:	mov	r5, r0
   17a8c:	mov	r0, r4
   17a90:	ldr	r7, [r5]
   17a94:	mov	r4, r6
   17a98:	bl	11920 <close@plt>
   17a9c:	str	r7, [r5]
   17aa0:	mov	r0, r4
   17aa4:	pop	{r4, r5, r6, r7, r8, pc}
   17aa8:	push	{r4, r5, r6, lr}
   17aac:	cmp	r1, #0
   17ab0:	sub	sp, sp, #32
   17ab4:	mov	r5, r0
   17ab8:	ldr	r4, [sp, #48]	; 0x30
   17abc:	ldr	r6, [sp, #52]	; 0x34
   17ac0:	beq	17b74 <lchmod@@Base+0x1ecc>
   17ac4:	strd	r2, [sp]
   17ac8:	mov	r3, r1
   17acc:	mov	r1, #1
   17ad0:	ldr	r2, [pc, #856]	; 17e30 <lchmod@@Base+0x2188>
   17ad4:	bl	117f4 <__fprintf_chk@plt>
   17ad8:	mov	r2, #5
   17adc:	ldr	r1, [pc, #848]	; 17e34 <lchmod@@Base+0x218c>
   17ae0:	mov	r0, #0
   17ae4:	bl	115f0 <dcgettext@plt>
   17ae8:	movw	r3, #2022	; 0x7e6
   17aec:	ldr	r2, [pc, #836]	; 17e38 <lchmod@@Base+0x2190>
   17af0:	mov	r1, #1
   17af4:	str	r3, [sp]
   17af8:	mov	r3, r0
   17afc:	mov	r0, r5
   17b00:	bl	117f4 <__fprintf_chk@plt>
   17b04:	mov	r1, r5
   17b08:	mov	r0, #10
   17b0c:	bl	115e4 <fputc_unlocked@plt>
   17b10:	mov	r2, #5
   17b14:	ldr	r1, [pc, #800]	; 17e3c <lchmod@@Base+0x2194>
   17b18:	mov	r0, #0
   17b1c:	bl	115f0 <dcgettext@plt>
   17b20:	mov	r2, r0
   17b24:	mov	r1, #1
   17b28:	ldr	r3, [pc, #784]	; 17e40 <lchmod@@Base+0x2198>
   17b2c:	mov	r0, r5
   17b30:	bl	117f4 <__fprintf_chk@plt>
   17b34:	mov	r1, r5
   17b38:	mov	r0, #10
   17b3c:	bl	115e4 <fputc_unlocked@plt>
   17b40:	cmp	r6, #9
   17b44:	ldrls	pc, [pc, r6, lsl #2]
   17b48:	b	17e24 <lchmod@@Base+0x217c>
   17b4c:	andeq	r7, r1, r4, ror #24
   17b50:	andeq	r7, r1, ip, lsl #23
   17b54:			; <UNDEFINED> instruction: 0x00017bb8
   17b58:	andeq	r7, r1, ip, ror #23
   17b5c:	andeq	r7, r1, r8, lsr #24
   17b60:	andeq	r7, r1, ip, ror #24
   17b64:			; <UNDEFINED> instruction: 0x00017cb4
   17b68:	andeq	r7, r1, r4, lsl #26
   17b6c:	andeq	r7, r1, ip, asr sp
   17b70:			; <UNDEFINED> instruction: 0x00017dbc
   17b74:	mov	r1, #1
   17b78:	str	r3, [sp]
   17b7c:	mov	r3, r2
   17b80:	ldr	r2, [pc, #700]	; 17e44 <lchmod@@Base+0x219c>
   17b84:	bl	117f4 <__fprintf_chk@plt>
   17b88:	b	17ad8 <lchmod@@Base+0x1e30>
   17b8c:	mov	r2, #5
   17b90:	ldr	r1, [pc, #688]	; 17e48 <lchmod@@Base+0x21a0>
   17b94:	mov	r0, #0
   17b98:	bl	115f0 <dcgettext@plt>
   17b9c:	ldr	r3, [r4]
   17ba0:	mov	r2, r0
   17ba4:	mov	r1, #1
   17ba8:	mov	r0, r5
   17bac:	add	sp, sp, #32
   17bb0:	pop	{r4, r5, r6, lr}
   17bb4:	b	117f4 <__fprintf_chk@plt>
   17bb8:	mov	r2, #5
   17bbc:	ldr	r1, [pc, #648]	; 17e4c <lchmod@@Base+0x21a4>
   17bc0:	mov	r0, #0
   17bc4:	bl	115f0 <dcgettext@plt>
   17bc8:	ldr	r3, [r4, #4]
   17bcc:	mov	r2, r0
   17bd0:	mov	r1, #1
   17bd4:	mov	r0, r5
   17bd8:	str	r3, [sp, #48]	; 0x30
   17bdc:	ldr	r3, [r4]
   17be0:	add	sp, sp, #32
   17be4:	pop	{r4, r5, r6, lr}
   17be8:	b	117f4 <__fprintf_chk@plt>
   17bec:	mov	r2, #5
   17bf0:	ldr	r1, [pc, #600]	; 17e50 <lchmod@@Base+0x21a8>
   17bf4:	mov	r0, #0
   17bf8:	bl	115f0 <dcgettext@plt>
   17bfc:	ldr	r3, [r4, #8]
   17c00:	mov	r2, r0
   17c04:	mov	r1, #1
   17c08:	mov	r0, r5
   17c0c:	str	r3, [sp, #52]	; 0x34
   17c10:	ldr	r3, [r4, #4]
   17c14:	str	r3, [sp, #48]	; 0x30
   17c18:	ldr	r3, [r4]
   17c1c:	add	sp, sp, #32
   17c20:	pop	{r4, r5, r6, lr}
   17c24:	b	117f4 <__fprintf_chk@plt>
   17c28:	mov	r2, #5
   17c2c:	ldr	r1, [pc, #544]	; 17e54 <lchmod@@Base+0x21ac>
   17c30:	mov	r0, #0
   17c34:	bl	115f0 <dcgettext@plt>
   17c38:	ldr	r3, [r4, #12]
   17c3c:	mov	r2, r0
   17c40:	mov	r1, #1
   17c44:	mov	r0, r5
   17c48:	str	r3, [sp, #8]
   17c4c:	ldr	r3, [r4, #8]
   17c50:	str	r3, [sp, #4]
   17c54:	ldr	r3, [r4, #4]
   17c58:	str	r3, [sp]
   17c5c:	ldr	r3, [r4]
   17c60:	bl	117f4 <__fprintf_chk@plt>
   17c64:	add	sp, sp, #32
   17c68:	pop	{r4, r5, r6, pc}
   17c6c:	mov	r2, #5
   17c70:	ldr	r1, [pc, #480]	; 17e58 <lchmod@@Base+0x21b0>
   17c74:	mov	r0, #0
   17c78:	bl	115f0 <dcgettext@plt>
   17c7c:	ldr	r3, [r4, #16]
   17c80:	mov	r2, r0
   17c84:	mov	r1, #1
   17c88:	mov	r0, r5
   17c8c:	str	r3, [sp, #12]
   17c90:	ldr	r3, [r4, #12]
   17c94:	str	r3, [sp, #8]
   17c98:	ldr	r3, [r4, #8]
   17c9c:	str	r3, [sp, #4]
   17ca0:	ldr	r3, [r4, #4]
   17ca4:	str	r3, [sp]
   17ca8:	ldr	r3, [r4]
   17cac:	bl	117f4 <__fprintf_chk@plt>
   17cb0:	b	17c64 <lchmod@@Base+0x1fbc>
   17cb4:	mov	r2, #5
   17cb8:	ldr	r1, [pc, #412]	; 17e5c <lchmod@@Base+0x21b4>
   17cbc:	mov	r0, #0
   17cc0:	bl	115f0 <dcgettext@plt>
   17cc4:	ldr	r3, [r4, #20]
   17cc8:	mov	r2, r0
   17ccc:	mov	r1, #1
   17cd0:	mov	r0, r5
   17cd4:	str	r3, [sp, #16]
   17cd8:	ldr	r3, [r4, #16]
   17cdc:	str	r3, [sp, #12]
   17ce0:	ldr	r3, [r4, #12]
   17ce4:	str	r3, [sp, #8]
   17ce8:	ldr	r3, [r4, #8]
   17cec:	str	r3, [sp, #4]
   17cf0:	ldr	r3, [r4, #4]
   17cf4:	str	r3, [sp]
   17cf8:	ldr	r3, [r4]
   17cfc:	bl	117f4 <__fprintf_chk@plt>
   17d00:	b	17c64 <lchmod@@Base+0x1fbc>
   17d04:	mov	r2, #5
   17d08:	ldr	r1, [pc, #336]	; 17e60 <lchmod@@Base+0x21b8>
   17d0c:	mov	r0, #0
   17d10:	bl	115f0 <dcgettext@plt>
   17d14:	ldr	r3, [r4, #24]
   17d18:	mov	r2, r0
   17d1c:	mov	r1, #1
   17d20:	mov	r0, r5
   17d24:	str	r3, [sp, #20]
   17d28:	ldr	r3, [r4, #20]
   17d2c:	str	r3, [sp, #16]
   17d30:	ldr	r3, [r4, #16]
   17d34:	str	r3, [sp, #12]
   17d38:	ldr	r3, [r4, #12]
   17d3c:	str	r3, [sp, #8]
   17d40:	ldr	r3, [r4, #8]
   17d44:	str	r3, [sp, #4]
   17d48:	ldr	r3, [r4, #4]
   17d4c:	str	r3, [sp]
   17d50:	ldr	r3, [r4]
   17d54:	bl	117f4 <__fprintf_chk@plt>
   17d58:	b	17c64 <lchmod@@Base+0x1fbc>
   17d5c:	mov	r2, #5
   17d60:	ldr	r1, [pc, #252]	; 17e64 <lchmod@@Base+0x21bc>
   17d64:	mov	r0, #0
   17d68:	bl	115f0 <dcgettext@plt>
   17d6c:	ldr	r3, [r4, #28]
   17d70:	mov	r2, r0
   17d74:	mov	r1, #1
   17d78:	mov	r0, r5
   17d7c:	str	r3, [sp, #24]
   17d80:	ldr	r3, [r4, #24]
   17d84:	str	r3, [sp, #20]
   17d88:	ldr	r3, [r4, #20]
   17d8c:	str	r3, [sp, #16]
   17d90:	ldr	r3, [r4, #16]
   17d94:	str	r3, [sp, #12]
   17d98:	ldr	r3, [r4, #12]
   17d9c:	str	r3, [sp, #8]
   17da0:	ldr	r3, [r4, #8]
   17da4:	str	r3, [sp, #4]
   17da8:	ldr	r3, [r4, #4]
   17dac:	str	r3, [sp]
   17db0:	ldr	r3, [r4]
   17db4:	bl	117f4 <__fprintf_chk@plt>
   17db8:	b	17c64 <lchmod@@Base+0x1fbc>
   17dbc:	ldr	r1, [pc, #164]	; 17e68 <lchmod@@Base+0x21c0>
   17dc0:	mov	r2, #5
   17dc4:	mov	r0, #0
   17dc8:	bl	115f0 <dcgettext@plt>
   17dcc:	ldr	r3, [r4, #32]
   17dd0:	mov	r2, r0
   17dd4:	mov	r1, #1
   17dd8:	mov	r0, r5
   17ddc:	str	r3, [sp, #28]
   17de0:	ldr	r3, [r4, #28]
   17de4:	str	r3, [sp, #24]
   17de8:	ldr	r3, [r4, #24]
   17dec:	str	r3, [sp, #20]
   17df0:	ldr	r3, [r4, #20]
   17df4:	str	r3, [sp, #16]
   17df8:	ldr	r3, [r4, #16]
   17dfc:	str	r3, [sp, #12]
   17e00:	ldr	r3, [r4, #12]
   17e04:	str	r3, [sp, #8]
   17e08:	ldr	r3, [r4, #8]
   17e0c:	str	r3, [sp, #4]
   17e10:	ldr	r3, [r4, #4]
   17e14:	str	r3, [sp]
   17e18:	ldr	r3, [r4]
   17e1c:	bl	117f4 <__fprintf_chk@plt>
   17e20:	b	17c64 <lchmod@@Base+0x1fbc>
   17e24:	mov	r2, #5
   17e28:	ldr	r1, [pc, #60]	; 17e6c <lchmod@@Base+0x21c4>
   17e2c:	b	17dc4 <lchmod@@Base+0x211c>
   17e30:	andeq	r9, r1, fp, lsl ip
   17e34:	andeq	r9, r1, lr, lsr #24
   17e38:	strdeq	r9, [r1], -ip
   17e3c:	andeq	r9, r1, r2, lsr ip
   17e40:	ldrdeq	r9, [r1], -sp
   17e44:	andeq	r9, r1, r7, lsr #24
   17e48:	strdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   17e4c:	andeq	r9, r1, pc, lsl #26
   17e50:	andeq	r9, r1, r6, lsr #26
   17e54:	andeq	r9, r1, r2, asr #26
   17e58:	andeq	r9, r1, r2, ror #26
   17e5c:	andeq	r9, r1, r6, lsl #27
   17e60:	andeq	r9, r1, lr, lsr #27
   17e64:	ldrdeq	r9, [r1], -sl
   17e68:	andeq	r9, r1, sl, lsl #28
   17e6c:	andeq	r9, r1, lr, lsr lr
   17e70:	push	{r0, r1, r4, lr}
   17e74:	mov	ip, #0
   17e78:	ldr	lr, [sp, #16]
   17e7c:	ldr	r4, [lr, ip, lsl #2]
   17e80:	cmp	r4, #0
   17e84:	bne	17e9c <lchmod@@Base+0x21f4>
   17e88:	str	lr, [sp]
   17e8c:	str	ip, [sp, #4]
   17e90:	bl	17aa8 <lchmod@@Base+0x1e00>
   17e94:	add	sp, sp, #8
   17e98:	pop	{r4, pc}
   17e9c:	add	ip, ip, #1
   17ea0:	b	17e7c <lchmod@@Base+0x21d4>
   17ea4:	push	{r4, r5, r6, lr}
   17ea8:	sub	sp, sp, #48	; 0x30
   17eac:	mov	ip, #0
   17eb0:	add	lr, sp, #8
   17eb4:	mov	r5, lr
   17eb8:	ldr	r6, [sp, #64]	; 0x40
   17ebc:	ldr	r4, [r6, ip, lsl #2]
   17ec0:	cmp	r4, #0
   17ec4:	str	r4, [lr], #4
   17ec8:	beq	17ed8 <lchmod@@Base+0x2230>
   17ecc:	add	ip, ip, #1
   17ed0:	cmp	ip, #10
   17ed4:	bne	17ebc <lchmod@@Base+0x2214>
   17ed8:	stm	sp, {r5, ip}
   17edc:	bl	17aa8 <lchmod@@Base+0x1e00>
   17ee0:	add	sp, sp, #48	; 0x30
   17ee4:	pop	{r4, r5, r6, pc}
   17ee8:	push	{r3}		; (str r3, [sp, #-4]!)
   17eec:	push	{r0, r1, r2, r3, lr}
   17ef0:	add	r3, sp, #24
   17ef4:	str	r3, [sp]
   17ef8:	str	r3, [sp, #12]
   17efc:	ldr	r3, [sp, #20]
   17f00:	bl	17ea4 <lchmod@@Base+0x21fc>
   17f04:	add	sp, sp, #16
   17f08:	pop	{lr}		; (ldr lr, [sp], #4)
   17f0c:	add	sp, sp, #4
   17f10:	bx	lr
   17f14:	ldr	r3, [pc, #116]	; 17f90 <lchmod@@Base+0x22e8>
   17f18:	mov	r0, #10
   17f1c:	push	{r4, lr}
   17f20:	ldr	r1, [r3]
   17f24:	bl	115e4 <fputc_unlocked@plt>
   17f28:	mov	r2, #5
   17f2c:	ldr	r1, [pc, #96]	; 17f94 <lchmod@@Base+0x22ec>
   17f30:	mov	r0, #0
   17f34:	bl	115f0 <dcgettext@plt>
   17f38:	mov	r1, r0
   17f3c:	ldr	r2, [pc, #84]	; 17f98 <lchmod@@Base+0x22f0>
   17f40:	mov	r0, #1
   17f44:	bl	117d0 <__printf_chk@plt>
   17f48:	mov	r2, #5
   17f4c:	ldr	r1, [pc, #72]	; 17f9c <lchmod@@Base+0x22f4>
   17f50:	mov	r0, #0
   17f54:	bl	115f0 <dcgettext@plt>
   17f58:	mov	r1, r0
   17f5c:	ldr	r3, [pc, #60]	; 17fa0 <lchmod@@Base+0x22f8>
   17f60:	mov	r0, #1
   17f64:	ldr	r2, [pc, #56]	; 17fa4 <lchmod@@Base+0x22fc>
   17f68:	bl	117d0 <__printf_chk@plt>
   17f6c:	mov	r2, #5
   17f70:	ldr	r1, [pc, #48]	; 17fa8 <lchmod@@Base+0x2300>
   17f74:	mov	r0, #0
   17f78:	bl	115f0 <dcgettext@plt>
   17f7c:	mov	r1, r0
   17f80:	ldr	r2, [pc, #36]	; 17fac <lchmod@@Base+0x2304>
   17f84:	mov	r0, #1
   17f88:	pop	{r4, lr}
   17f8c:	b	117d0 <__printf_chk@plt>
   17f90:	strdeq	fp, [r2], -r4
   17f94:	andeq	r9, r1, sl, ror lr
   17f98:	andeq	r9, r1, lr, lsl #29
   17f9c:	andeq	r9, r1, r4, lsr #29
   17fa0:	andeq	r9, r1, r5, ror #13
   17fa4:	andeq	r9, r1, sp, lsl #14
   17fa8:			; <UNDEFINED> instruction: 0x00019eb8
   17fac:	ldrdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   17fb0:	push	{r4, lr}
   17fb4:	bl	187a4 <lchmod@@Base+0x2afc>
   17fb8:	cmp	r0, #0
   17fbc:	popne	{r4, pc}
   17fc0:	bl	18268 <lchmod@@Base+0x25c0>
   17fc4:	push	{r4, lr}
   17fc8:	bl	187a4 <lchmod@@Base+0x2afc>
   17fcc:	cmp	r0, #0
   17fd0:	popne	{r4, pc}
   17fd4:	bl	18268 <lchmod@@Base+0x25c0>
   17fd8:	b	17fb0 <lchmod@@Base+0x2308>
   17fdc:	push	{r4, r5, r6, lr}
   17fe0:	mov	r5, r0
   17fe4:	mov	r4, r1
   17fe8:	bl	187d0 <lchmod@@Base+0x2b28>
   17fec:	cmp	r0, #0
   17ff0:	popne	{r4, r5, r6, pc}
   17ff4:	adds	r4, r4, #0
   17ff8:	movne	r4, #1
   17ffc:	cmp	r5, #0
   18000:	moveq	r4, #1
   18004:	cmp	r4, #0
   18008:	popeq	{r4, r5, r6, pc}
   1800c:	bl	18268 <lchmod@@Base+0x25c0>
   18010:	push	{r4, lr}
   18014:	bl	18d74 <lchmod@@Base+0x30cc>
   18018:	cmp	r0, #0
   1801c:	popne	{r4, pc}
   18020:	bl	18268 <lchmod@@Base+0x25c0>
   18024:	push	{r4, r5, r6, lr}
   18028:	mov	r6, r0
   1802c:	mov	r5, r1
   18030:	mov	r4, r2
   18034:	bl	18e1c <lchmod@@Base+0x3174>
   18038:	cmp	r0, #0
   1803c:	popne	{r4, r5, r6, pc}
   18040:	cmp	r6, #0
   18044:	beq	18054 <lchmod@@Base+0x23ac>
   18048:	cmp	r5, #0
   1804c:	cmpne	r4, #0
   18050:	popeq	{r4, r5, r6, pc}
   18054:	bl	18268 <lchmod@@Base+0x25c0>
   18058:	b	18024 <lchmod@@Base+0x237c>
   1805c:	push	{r4, lr}
   18060:	bl	18d84 <lchmod@@Base+0x30dc>
   18064:	cmp	r0, #0
   18068:	popne	{r4, pc}
   1806c:	bl	18268 <lchmod@@Base+0x25c0>
   18070:	mov	r2, r1
   18074:	mov	r1, r0
   18078:	mov	r0, #0
   1807c:	b	18024 <lchmod@@Base+0x237c>
   18080:	mov	r2, r1
   18084:	mov	r1, r0
   18088:	mov	r0, #0
   1808c:	b	1805c <lchmod@@Base+0x23b4>
   18090:	cmp	r0, #0
   18094:	push	{r4, r5, r6, lr}
   18098:	mov	r5, r1
   1809c:	ldr	r4, [r1]
   180a0:	bne	180cc <lchmod@@Base+0x2424>
   180a4:	cmp	r4, #0
   180a8:	bne	180bc <lchmod@@Base+0x2414>
   180ac:	mov	r4, #64	; 0x40
   180b0:	udiv	r4, r4, r2
   180b4:	cmp	r2, #64	; 0x40
   180b8:	addhi	r4, r4, #1
   180bc:	mov	r1, r4
   180c0:	bl	18024 <lchmod@@Base+0x237c>
   180c4:	str	r4, [r5]
   180c8:	pop	{r4, r5, r6, pc}
   180cc:	lsr	r3, r4, #1
   180d0:	add	r3, r3, #1
   180d4:	adds	r4, r4, r3
   180d8:	bcc	180bc <lchmod@@Base+0x2414>
   180dc:	bl	18268 <lchmod@@Base+0x25c0>
   180e0:	mov	r2, #1
   180e4:	b	18090 <lchmod@@Base+0x23e8>
   180e8:	ldr	ip, [r1]
   180ec:	push	{r4, r5, r6, r7, r8, lr}
   180f0:	mov	r5, r1
   180f4:	mvn	r8, r3
   180f8:	lsr	r8, r8, #31
   180fc:	ldr	lr, [sp, #24]
   18100:	asr	r1, ip, #1
   18104:	adds	r4, ip, r1
   18108:	mvnvs	r4, #-2147483648	; 0x80000000
   1810c:	cmp	r3, r4
   18110:	movge	r1, #0
   18114:	andlt	r1, r8, #1
   18118:	cmp	r1, #0
   1811c:	movne	r4, r3
   18120:	smull	r6, r7, r4, lr
   18124:	cmp	r7, r6, asr #31
   18128:	bne	18140 <lchmod@@Base+0x2498>
   1812c:	cmp	r6, #63	; 0x3f
   18130:	mov	r1, r6
   18134:	bgt	18150 <lchmod@@Base+0x24a8>
   18138:	mov	r1, #64	; 0x40
   1813c:	b	18144 <lchmod@@Base+0x249c>
   18140:	mvn	r1, #-2147483648	; 0x80000000
   18144:	sdiv	r4, r1, lr
   18148:	mls	r6, lr, r4, r1
   1814c:	sub	r1, r1, r6
   18150:	cmp	r0, #0
   18154:	sub	r6, r4, ip
   18158:	streq	r0, [r5]
   1815c:	cmp	r6, r2
   18160:	bge	18194 <lchmod@@Base+0x24ec>
   18164:	adds	r4, ip, r2
   18168:	bvs	18190 <lchmod@@Base+0x24e8>
   1816c:	cmp	r4, r3
   18170:	movle	r3, #0
   18174:	andgt	r3, r8, #1
   18178:	cmp	r3, #0
   1817c:	bne	18190 <lchmod@@Base+0x24e8>
   18180:	smull	r2, r3, r4, lr
   18184:	cmp	r3, r2, asr #31
   18188:	mov	r1, r2
   1818c:	beq	18194 <lchmod@@Base+0x24ec>
   18190:	bl	18268 <lchmod@@Base+0x25c0>
   18194:	bl	17fdc <lchmod@@Base+0x2334>
   18198:	str	r4, [r5]
   1819c:	pop	{r4, r5, r6, r7, r8, pc}
   181a0:	push	{r4, lr}
   181a4:	bl	18750 <lchmod@@Base+0x2aa8>
   181a8:	cmp	r0, #0
   181ac:	popne	{r4, pc}
   181b0:	bl	18268 <lchmod@@Base+0x25c0>
   181b4:	mov	r1, #1
   181b8:	b	181a0 <lchmod@@Base+0x24f8>
   181bc:	push	{r4, lr}
   181c0:	bl	18750 <lchmod@@Base+0x2aa8>
   181c4:	cmp	r0, #0
   181c8:	popne	{r4, pc}
   181cc:	bl	18268 <lchmod@@Base+0x25c0>
   181d0:	mov	r1, #1
   181d4:	b	181bc <lchmod@@Base+0x2514>
   181d8:	push	{r4, r5, r6, lr}
   181dc:	mov	r4, r1
   181e0:	mov	r5, r0
   181e4:	mov	r0, r1
   181e8:	bl	17fb0 <lchmod@@Base+0x2308>
   181ec:	mov	r2, r4
   181f0:	mov	r1, r5
   181f4:	pop	{r4, r5, r6, lr}
   181f8:	b	115b4 <memcpy@plt>
   181fc:	push	{r4, r5, r6, lr}
   18200:	mov	r4, r1
   18204:	mov	r5, r0
   18208:	mov	r0, r1
   1820c:	bl	17fc4 <lchmod@@Base+0x231c>
   18210:	mov	r2, r4
   18214:	mov	r1, r5
   18218:	pop	{r4, r5, r6, lr}
   1821c:	b	115b4 <memcpy@plt>
   18220:	push	{r4, r5, r6, lr}
   18224:	mov	r5, r0
   18228:	add	r0, r1, #1
   1822c:	mov	r4, r1
   18230:	bl	17fc4 <lchmod@@Base+0x231c>
   18234:	mov	r2, #0
   18238:	mov	r1, r5
   1823c:	strb	r2, [r0, r4]
   18240:	mov	r2, r4
   18244:	pop	{r4, r5, r6, lr}
   18248:	b	115b4 <memcpy@plt>
   1824c:	push	{r4, lr}
   18250:	mov	r4, r0
   18254:	bl	11764 <strlen@plt>
   18258:	add	r1, r0, #1
   1825c:	mov	r0, r4
   18260:	pop	{r4, lr}
   18264:	b	181d8 <lchmod@@Base+0x2530>
   18268:	ldr	r3, [pc, #44]	; 1829c <lchmod@@Base+0x25f4>
   1826c:	mov	r2, #5
   18270:	mov	r0, #0
   18274:	push	{r4, lr}
   18278:	ldr	r1, [pc, #32]	; 182a0 <lchmod@@Base+0x25f8>
   1827c:	ldr	r4, [r3]
   18280:	bl	115f0 <dcgettext@plt>
   18284:	mov	r3, r0
   18288:	ldr	r2, [pc, #20]	; 182a4 <lchmod@@Base+0x25fc>
   1828c:	mov	r1, #0
   18290:	mov	r0, r4
   18294:	bl	116bc <error@plt>
   18298:	bl	11914 <abort@plt>
   1829c:	muleq	r2, r8, r1
   182a0:	andeq	r9, r1, fp, lsr #30
   182a4:	andeq	r9, r1, r6, ror #20
   182a8:	push	{r4, lr}
   182ac:	orr	r1, r1, #512	; 0x200
   182b0:	bl	142d0 <__assert_fail@plt+0x2968>
   182b4:	cmp	r0, #0
   182b8:	popne	{r4, pc}
   182bc:	bl	117a0 <__errno_location@plt>
   182c0:	ldr	r3, [r0]
   182c4:	cmp	r3, #22
   182c8:	bne	182e0 <lchmod@@Base+0x2638>
   182cc:	ldr	r3, [pc, #16]	; 182e4 <lchmod@@Base+0x263c>
   182d0:	mov	r2, #41	; 0x29
   182d4:	ldr	r1, [pc, #12]	; 182e8 <lchmod@@Base+0x2640>
   182d8:	ldr	r0, [pc, #12]	; 182ec <lchmod@@Base+0x2644>
   182dc:	bl	11968 <__assert_fail@plt>
   182e0:	bl	18268 <lchmod@@Base+0x25c0>
   182e4:	andeq	r9, r1, ip, lsr pc
   182e8:	andeq	r9, r1, r6, asr #30
   182ec:	andeq	r9, r1, r1, asr pc
   182f0:	ldr	r3, [r0, #48]	; 0x30
   182f4:	and	r3, r3, #17
   182f8:	cmp	r3, #16
   182fc:	beq	18318 <lchmod@@Base+0x2670>
   18300:	cmp	r3, #17
   18304:	bne	18320 <lchmod@@Base+0x2678>
   18308:	ldr	r0, [r1, #48]	; 0x30
   1830c:	adds	r0, r0, #0
   18310:	movne	r0, #1
   18314:	bx	lr
   18318:	mov	r0, #1
   1831c:	bx	lr
   18320:	mov	r0, #0
   18324:	bx	lr
   18328:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1832c:	mov	ip, r0
   18330:	asr	fp, r1, #31
   18334:	mov	r0, #0
   18338:	mov	lr, r0
   1833c:	subs	r2, r2, #1
   18340:	bcs	1834c <lchmod@@Base+0x26a4>
   18344:	add	sp, sp, #12
   18348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1834c:	ldrd	r8, [ip]
   18350:	mov	r3, #0
   18354:	cmp	r9, r3
   18358:	umulleq	r8, r9, r8, r1
   1835c:	moveq	r6, r8
   18360:	moveq	r4, r9
   18364:	beq	1839c <lchmod@@Base+0x26f4>
   18368:	umull	r4, r5, r8, r1
   1836c:	strd	r4, [sp]
   18370:	mov	r5, lr
   18374:	ldr	r4, [sp, #4]
   18378:	umlal	r4, r5, r9, r1
   1837c:	cmp	r5, #0
   18380:	ldrne	r3, [sp, #4]
   18384:	mulne	r4, r1, r9
   18388:	ldreq	r6, [sp]
   1838c:	mlane	r4, r8, fp, r4
   18390:	ldrne	r6, [sp]
   18394:	addne	r4, r4, r3
   18398:	movne	r3, #1
   1839c:	cmp	r3, #0
   183a0:	mvnne	r6, #0
   183a4:	movne	r3, #1
   183a8:	movne	r4, r6
   183ac:	orr	r0, r0, r3
   183b0:	str	r6, [ip]
   183b4:	str	r4, [ip, #4]
   183b8:	b	1833c <lchmod@@Base+0x2694>
   183bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183c0:	cmp	r2, #36	; 0x24
   183c4:	sub	sp, sp, #20
   183c8:	ldr	r5, [sp, #56]	; 0x38
   183cc:	bls	183e4 <lchmod@@Base+0x273c>
   183d0:	ldr	r3, [pc, #876]	; 18744 <lchmod@@Base+0x2a9c>
   183d4:	mov	r2, #85	; 0x55
   183d8:	ldr	r1, [pc, #872]	; 18748 <lchmod@@Base+0x2aa0>
   183dc:	ldr	r0, [pc, #872]	; 1874c <lchmod@@Base+0x2aa4>
   183e0:	bl	11968 <__assert_fail@plt>
   183e4:	cmp	r1, #0
   183e8:	mov	r6, r1
   183ec:	mov	r8, r0
   183f0:	mov	fp, r2
   183f4:	mov	r7, r3
   183f8:	addeq	r6, sp, #4
   183fc:	bl	117a0 <__errno_location@plt>
   18400:	mov	r3, #0
   18404:	mov	sl, r0
   18408:	str	r3, [r0]
   1840c:	bl	11734 <__ctype_b_loc@plt>
   18410:	ldrb	r9, [r8]
   18414:	mov	r3, r8
   18418:	ldr	r1, [r0]
   1841c:	lsl	r2, r9, #1
   18420:	ldrh	r4, [r1, r2]
   18424:	ands	r4, r4, #8192	; 0x2000
   18428:	bne	18444 <lchmod@@Base+0x279c>
   1842c:	cmp	r9, #45	; 0x2d
   18430:	bne	1844c <lchmod@@Base+0x27a4>
   18434:	mov	r4, #4
   18438:	mov	r0, r4
   1843c:	add	sp, sp, #20
   18440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18444:	ldrb	r9, [r3, #1]!
   18448:	b	1841c <lchmod@@Base+0x2774>
   1844c:	mov	r2, fp
   18450:	mov	r1, r6
   18454:	mov	r0, r8
   18458:	bl	117e8 <strtoumax@plt>
   1845c:	ldr	r9, [r6]
   18460:	strd	r0, [sp, #8]
   18464:	cmp	r9, r8
   18468:	bne	184cc <lchmod@@Base+0x2824>
   1846c:	cmp	r5, #0
   18470:	beq	18434 <lchmod@@Base+0x278c>
   18474:	ldrb	r1, [r8]
   18478:	cmp	r1, #0
   1847c:	beq	18434 <lchmod@@Base+0x278c>
   18480:	mov	r0, r5
   18484:	bl	1177c <strchr@plt>
   18488:	cmp	r0, #0
   1848c:	movne	r2, #1
   18490:	movne	r3, #0
   18494:	strdne	r2, [sp, #8]
   18498:	beq	18434 <lchmod@@Base+0x278c>
   1849c:	ldrb	r8, [r9]
   184a0:	cmp	r8, #0
   184a4:	beq	186fc <lchmod@@Base+0x2a54>
   184a8:	mov	r1, r8
   184ac:	mov	r0, r5
   184b0:	bl	1177c <strchr@plt>
   184b4:	cmp	r0, #0
   184b8:	bne	184f4 <lchmod@@Base+0x284c>
   184bc:	ldrd	r2, [sp, #8]
   184c0:	orr	r4, r4, #2
   184c4:	strd	r2, [r7]
   184c8:	b	18438 <lchmod@@Base+0x2790>
   184cc:	ldr	r4, [sl]
   184d0:	cmp	r4, #0
   184d4:	beq	184e4 <lchmod@@Base+0x283c>
   184d8:	cmp	r4, #34	; 0x22
   184dc:	bne	18434 <lchmod@@Base+0x278c>
   184e0:	mov	r4, #1
   184e4:	cmp	r5, #0
   184e8:	strdeq	r0, [r7]
   184ec:	bne	1849c <lchmod@@Base+0x27f4>
   184f0:	b	18438 <lchmod@@Base+0x2790>
   184f4:	cmp	r8, #84	; 0x54
   184f8:	beq	1854c <lchmod@@Base+0x28a4>
   184fc:	bhi	18534 <lchmod@@Base+0x288c>
   18500:	cmp	r8, #75	; 0x4b
   18504:	beq	1854c <lchmod@@Base+0x28a4>
   18508:	bhi	18524 <lchmod@@Base+0x287c>
   1850c:	cmp	r8, #69	; 0x45
   18510:	beq	1854c <lchmod@@Base+0x28a4>
   18514:	cmp	r8, #71	; 0x47
   18518:	beq	1854c <lchmod@@Base+0x28a4>
   1851c:	mov	r5, #1
   18520:	b	18604 <lchmod@@Base+0x295c>
   18524:	cmp	r8, #77	; 0x4d
   18528:	beq	1854c <lchmod@@Base+0x28a4>
   1852c:	cmp	r8, #80	; 0x50
   18530:	b	18518 <lchmod@@Base+0x2870>
   18534:	cmp	r8, #103	; 0x67
   18538:	beq	1854c <lchmod@@Base+0x28a4>
   1853c:	bhi	185dc <lchmod@@Base+0x2934>
   18540:	sub	r3, r8, #89	; 0x59
   18544:	cmp	r3, #1
   18548:	bhi	1851c <lchmod@@Base+0x2874>
   1854c:	mov	r1, #48	; 0x30
   18550:	mov	r0, r5
   18554:	bl	1177c <strchr@plt>
   18558:	cmp	r0, #0
   1855c:	beq	1851c <lchmod@@Base+0x2874>
   18560:	ldrb	r3, [r9, #1]
   18564:	cmp	r3, #68	; 0x44
   18568:	moveq	r5, #2
   1856c:	moveq	r1, #1000	; 0x3e8
   18570:	beq	18590 <lchmod@@Base+0x28e8>
   18574:	cmp	r3, #105	; 0x69
   18578:	beq	185f4 <lchmod@@Base+0x294c>
   1857c:	cmp	r3, #66	; 0x42
   18580:	moveq	r5, #2
   18584:	movne	r5, #1
   18588:	moveq	r1, #1000	; 0x3e8
   1858c:	movne	r1, #1024	; 0x400
   18590:	cmp	r8, #89	; 0x59
   18594:	beq	1872c <lchmod@@Base+0x2a84>
   18598:	bhi	1862c <lchmod@@Base+0x2984>
   1859c:	cmp	r8, #75	; 0x4b
   185a0:	beq	1866c <lchmod@@Base+0x29c4>
   185a4:	bhi	1860c <lchmod@@Base+0x2964>
   185a8:	cmp	r8, #69	; 0x45
   185ac:	beq	18708 <lchmod@@Base+0x2a60>
   185b0:	cmp	r8, #71	; 0x47
   185b4:	beq	18714 <lchmod@@Base+0x2a6c>
   185b8:	cmp	r8, #66	; 0x42
   185bc:	bne	184bc <lchmod@@Base+0x2814>
   185c0:	ldr	r3, [sp, #8]
   185c4:	ldr	r1, [sp, #12]
   185c8:	lsl	r2, r1, #10
   185cc:	lsr	r0, r1, #22
   185d0:	orr	r2, r2, r3, lsr #22
   185d4:	lsl	r3, r3, #10
   185d8:	b	186b8 <lchmod@@Base+0x2a10>
   185dc:	cmp	r8, #109	; 0x6d
   185e0:	beq	1854c <lchmod@@Base+0x28a4>
   185e4:	cmp	r8, #116	; 0x74
   185e8:	beq	1854c <lchmod@@Base+0x28a4>
   185ec:	cmp	r8, #107	; 0x6b
   185f0:	b	18518 <lchmod@@Base+0x2870>
   185f4:	ldrb	r3, [r9, #2]
   185f8:	cmp	r3, #66	; 0x42
   185fc:	movne	r5, #1
   18600:	moveq	r5, #3
   18604:	mov	r1, #1024	; 0x400
   18608:	b	18590 <lchmod@@Base+0x28e8>
   1860c:	cmp	r8, #80	; 0x50
   18610:	beq	1871c <lchmod@@Base+0x2a74>
   18614:	cmp	r8, #84	; 0x54
   18618:	beq	18724 <lchmod@@Base+0x2a7c>
   1861c:	cmp	r8, #77	; 0x4d
   18620:	bne	184bc <lchmod@@Base+0x2814>
   18624:	mov	r2, #2
   18628:	b	1870c <lchmod@@Base+0x2a64>
   1862c:	cmp	r8, #103	; 0x67
   18630:	beq	18714 <lchmod@@Base+0x2a6c>
   18634:	bhi	18658 <lchmod@@Base+0x29b0>
   18638:	cmp	r8, #98	; 0x62
   1863c:	beq	186a0 <lchmod@@Base+0x29f8>
   18640:	cmp	r8, #99	; 0x63
   18644:	beq	1873c <lchmod@@Base+0x2a94>
   18648:	cmp	r8, #90	; 0x5a
   1864c:	bne	184bc <lchmod@@Base+0x2814>
   18650:	mov	r2, #7
   18654:	b	1870c <lchmod@@Base+0x2a64>
   18658:	cmp	r8, #109	; 0x6d
   1865c:	beq	18624 <lchmod@@Base+0x297c>
   18660:	bhi	18674 <lchmod@@Base+0x29cc>
   18664:	cmp	r8, #107	; 0x6b
   18668:	bne	184bc <lchmod@@Base+0x2814>
   1866c:	mov	r2, #1
   18670:	b	1870c <lchmod@@Base+0x2a64>
   18674:	cmp	r8, #116	; 0x74
   18678:	beq	18724 <lchmod@@Base+0x2a7c>
   1867c:	cmp	r8, #119	; 0x77
   18680:	bne	184bc <lchmod@@Base+0x2814>
   18684:	ldr	r3, [sp, #8]
   18688:	ldr	r2, [sp, #12]
   1868c:	ldr	r0, [sp, #12]
   18690:	adds	r3, r3, r3
   18694:	adc	r2, r2, r2
   18698:	lsr	r0, r0, #31
   1869c:	b	186b8 <lchmod@@Base+0x2a10>
   186a0:	ldr	r3, [sp, #8]
   186a4:	ldr	r1, [sp, #12]
   186a8:	lsl	r2, r1, #9
   186ac:	lsr	r0, r1, #23
   186b0:	orr	r2, r2, r3, lsr #23
   186b4:	lsl	r3, r3, #9
   186b8:	adds	r0, r0, #0
   186bc:	movne	r0, #1
   186c0:	cmp	r0, #0
   186c4:	streq	r3, [sp, #8]
   186c8:	streq	r2, [sp, #12]
   186cc:	beq	186e0 <lchmod@@Base+0x2a38>
   186d0:	mvn	r2, #0
   186d4:	mvn	r3, #0
   186d8:	mov	r0, #1
   186dc:	strd	r2, [sp, #8]
   186e0:	ldr	r3, [r6]
   186e4:	orr	r4, r4, r0
   186e8:	add	r2, r3, r5
   186ec:	str	r2, [r6]
   186f0:	ldrb	r3, [r3, r5]
   186f4:	cmp	r3, #0
   186f8:	orrne	r4, r4, #2
   186fc:	ldrd	r2, [sp, #8]
   18700:	strd	r2, [r7]
   18704:	b	18438 <lchmod@@Base+0x2790>
   18708:	mov	r2, #6
   1870c:	add	r0, sp, #8
   18710:	b	18734 <lchmod@@Base+0x2a8c>
   18714:	mov	r2, #3
   18718:	b	1870c <lchmod@@Base+0x2a64>
   1871c:	mov	r2, #5
   18720:	b	1870c <lchmod@@Base+0x2a64>
   18724:	mov	r2, #4
   18728:	b	1870c <lchmod@@Base+0x2a64>
   1872c:	mov	r2, #8
   18730:	add	r0, sp, r2
   18734:	bl	18328 <lchmod@@Base+0x2680>
   18738:	b	186e0 <lchmod@@Base+0x2a38>
   1873c:	mov	r0, #0
   18740:	b	186e0 <lchmod@@Base+0x2a38>
   18744:	andeq	r9, r1, r1, ror #30
   18748:	andeq	r9, r1, ip, ror #30
   1874c:	andeq	r9, r1, sl, ror pc
   18750:	cmp	r1, #0
   18754:	cmpne	r0, #0
   18758:	beq	18790 <lchmod@@Base+0x2ae8>
   1875c:	push	{r4, r5, r6, lr}
   18760:	umull	r4, r5, r0, r1
   18764:	adds	r3, r5, #0
   18768:	movne	r3, #1
   1876c:	cmp	r4, #0
   18770:	blt	1877c <lchmod@@Base+0x2ad4>
   18774:	cmp	r3, #0
   18778:	beq	1879c <lchmod@@Base+0x2af4>
   1877c:	bl	117a0 <__errno_location@plt>
   18780:	mov	r3, #12
   18784:	str	r3, [r0]
   18788:	mov	r0, #0
   1878c:	pop	{r4, r5, r6, pc}
   18790:	mov	r1, #1
   18794:	mov	r0, r1
   18798:	b	11518 <calloc@plt>
   1879c:	pop	{r4, r5, r6, lr}
   187a0:	b	18798 <lchmod@@Base+0x2af0>
   187a4:	cmp	r0, #0
   187a8:	beq	187c8 <lchmod@@Base+0x2b20>
   187ac:	bge	187cc <lchmod@@Base+0x2b24>
   187b0:	push	{r4, lr}
   187b4:	bl	117a0 <__errno_location@plt>
   187b8:	mov	r3, #12
   187bc:	str	r3, [r0]
   187c0:	mov	r0, #0
   187c4:	pop	{r4, pc}
   187c8:	mov	r0, #1
   187cc:	b	116e0 <malloc@plt>
   187d0:	cmp	r0, #0
   187d4:	bne	187e0 <lchmod@@Base+0x2b38>
   187d8:	mov	r0, r1
   187dc:	b	187a4 <lchmod@@Base+0x2afc>
   187e0:	cmp	r1, #0
   187e4:	push	{r4, lr}
   187e8:	bne	187f8 <lchmod@@Base+0x2b50>
   187ec:	bl	130d0 <__assert_fail@plt+0x1768>
   187f0:	mov	r0, #0
   187f4:	pop	{r4, pc}
   187f8:	blt	18804 <lchmod@@Base+0x2b5c>
   187fc:	pop	{r4, lr}
   18800:	b	11608 <realloc@plt>
   18804:	bl	117a0 <__errno_location@plt>
   18808:	mov	r3, #12
   1880c:	str	r3, [r0]
   18810:	b	187f0 <lchmod@@Base+0x2b48>
   18814:	mov	r3, r0
   18818:	mov	r2, r3
   1881c:	mov	r0, r3
   18820:	ldrb	r1, [r2], #1
   18824:	cmp	r1, #47	; 0x2f
   18828:	beq	18834 <lchmod@@Base+0x2b8c>
   1882c:	mov	r2, #0
   18830:	b	18850 <lchmod@@Base+0x2ba8>
   18834:	mov	r3, r2
   18838:	b	18818 <lchmod@@Base+0x2b70>
   1883c:	cmp	r1, #47	; 0x2f
   18840:	moveq	r2, #1
   18844:	beq	18850 <lchmod@@Base+0x2ba8>
   18848:	cmp	r2, #0
   1884c:	bne	18864 <lchmod@@Base+0x2bbc>
   18850:	mov	ip, r3
   18854:	ldrb	r1, [r3], #1
   18858:	cmp	r1, #0
   1885c:	bne	1883c <lchmod@@Base+0x2b94>
   18860:	bx	lr
   18864:	mov	r0, ip
   18868:	b	1882c <lchmod@@Base+0x2b84>
   1886c:	push	{r4, lr}
   18870:	mov	r4, r0
   18874:	bl	11764 <strlen@plt>
   18878:	cmp	r0, #1
   1887c:	popls	{r4, pc}
   18880:	sub	r3, r0, #1
   18884:	ldrb	r2, [r4, r3]
   18888:	cmp	r2, #47	; 0x2f
   1888c:	popne	{r4, pc}
   18890:	mov	r0, r3
   18894:	b	18878 <lchmod@@Base+0x2bd0>
   18898:	push	{r4, r5, r6, lr}
   1889c:	mov	r4, r0
   188a0:	bl	11698 <__fpending@plt>
   188a4:	mov	r5, r0
   188a8:	mov	r0, r4
   188ac:	bl	116a4 <ferror_unlocked@plt>
   188b0:	mov	r6, r0
   188b4:	mov	r0, r4
   188b8:	bl	189d4 <lchmod@@Base+0x2d2c>
   188bc:	cmp	r6, #0
   188c0:	mov	r4, r0
   188c4:	bne	188f0 <lchmod@@Base+0x2c48>
   188c8:	cmp	r0, #0
   188cc:	beq	188e8 <lchmod@@Base+0x2c40>
   188d0:	cmp	r5, #0
   188d4:	bne	18900 <lchmod@@Base+0x2c58>
   188d8:	bl	117a0 <__errno_location@plt>
   188dc:	ldr	r4, [r0]
   188e0:	subs	r4, r4, #9
   188e4:	mvnne	r4, #0
   188e8:	mov	r0, r4
   188ec:	pop	{r4, r5, r6, pc}
   188f0:	cmp	r0, #0
   188f4:	bne	18900 <lchmod@@Base+0x2c58>
   188f8:	bl	117a0 <__errno_location@plt>
   188fc:	str	r4, [r0]
   18900:	mvn	r4, #0
   18904:	b	188e8 <lchmod@@Base+0x2c40>
   18908:	mov	r3, #0
   1890c:	mov	r2, #0
   18910:	strd	r2, [r0, #16]
   18914:	ldr	r3, [pc, #4]	; 18920 <lchmod@@Base+0x2c78>
   18918:	str	r3, [r0, #24]
   1891c:	bx	lr
   18920:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18924:	ldr	r3, [pc, #152]	; 189c4 <lchmod@@Base+0x2d1c>
   18928:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1892c:	ldr	r2, [r0, #24]
   18930:	cmp	r2, r3
   18934:	beq	1894c <lchmod@@Base+0x2ca4>
   18938:	ldr	r3, [pc, #136]	; 189c8 <lchmod@@Base+0x2d20>
   1893c:	mov	r2, #60	; 0x3c
   18940:	ldr	r1, [pc, #132]	; 189cc <lchmod@@Base+0x2d24>
   18944:	ldr	r0, [pc, #132]	; 189d0 <lchmod@@Base+0x2d28>
   18948:	bl	11968 <__assert_fail@plt>
   1894c:	ldrd	r6, [r0, #16]
   18950:	orrs	r3, r6, r7
   18954:	beq	18988 <lchmod@@Base+0x2ce0>
   18958:	ldrd	r2, [r0]
   1895c:	ldrd	r4, [r1, #96]	; 0x60
   18960:	cmp	r5, r3
   18964:	cmpeq	r4, r2
   18968:	bne	18988 <lchmod@@Base+0x2ce0>
   1896c:	ldrd	r4, [r1]
   18970:	ldrd	r2, [r0, #8]
   18974:	cmp	r5, r3
   18978:	cmpeq	r4, r2
   1897c:	bne	18988 <lchmod@@Base+0x2ce0>
   18980:	mov	r0, #1
   18984:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18988:	adds	r8, r6, #1
   1898c:	adc	r9, r7, #0
   18990:	and	r2, r6, r8
   18994:	and	r3, r7, r9
   18998:	orrs	r3, r2, r3
   1899c:	strd	r8, [r0, #16]
   189a0:	bne	189bc <lchmod@@Base+0x2d14>
   189a4:	orrs	r3, r8, r9
   189a8:	beq	18980 <lchmod@@Base+0x2cd8>
   189ac:	ldrd	r2, [r1]
   189b0:	strd	r2, [r0, #8]
   189b4:	ldrd	r2, [r1, #96]	; 0x60
   189b8:	strd	r2, [r0]
   189bc:	mov	r0, #0
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189c4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   189c8:	andeq	r9, r1, r0, lsr #31
   189cc:	andeq	r9, r1, ip, lsr #31
   189d0:			; <UNDEFINED> instruction: 0x00019fbe
   189d4:	push	{r0, r1, r2, r4, r5, lr}
   189d8:	mov	r4, r0
   189dc:	bl	117dc <fileno@plt>
   189e0:	cmp	r0, #0
   189e4:	mov	r0, r4
   189e8:	bge	189f8 <lchmod@@Base+0x2d50>
   189ec:	add	sp, sp, #12
   189f0:	pop	{r4, r5, lr}
   189f4:	b	11800 <fclose@plt>
   189f8:	bl	116f8 <__freading@plt>
   189fc:	cmp	r0, #0
   18a00:	bne	18a3c <lchmod@@Base+0x2d94>
   18a04:	mov	r0, r4
   18a08:	bl	18c60 <lchmod@@Base+0x2fb8>
   18a0c:	cmp	r0, #0
   18a10:	bne	18a70 <lchmod@@Base+0x2dc8>
   18a14:	mov	r5, #0
   18a18:	mov	r0, r4
   18a1c:	bl	11800 <fclose@plt>
   18a20:	cmp	r5, #0
   18a24:	beq	18a34 <lchmod@@Base+0x2d8c>
   18a28:	bl	117a0 <__errno_location@plt>
   18a2c:	str	r5, [r0]
   18a30:	mvn	r0, #0
   18a34:	add	sp, sp, #12
   18a38:	pop	{r4, r5, pc}
   18a3c:	mov	r0, r4
   18a40:	bl	117dc <fileno@plt>
   18a44:	mov	r3, #1
   18a48:	mov	r2, #0
   18a4c:	str	r3, [sp]
   18a50:	mov	r3, #0
   18a54:	bl	11668 <lseek64@plt>
   18a58:	mvn	r3, #0
   18a5c:	mvn	r2, #0
   18a60:	cmp	r1, r3
   18a64:	cmpeq	r0, r2
   18a68:	bne	18a04 <lchmod@@Base+0x2d5c>
   18a6c:	b	18a14 <lchmod@@Base+0x2d6c>
   18a70:	bl	117a0 <__errno_location@plt>
   18a74:	ldr	r5, [r0]
   18a78:	b	18a18 <lchmod@@Base+0x2d70>
   18a7c:	push	{r1, r2, r3}
   18a80:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   18a84:	add	r2, sp, #40	; 0x28
   18a88:	ldr	r1, [sp, #36]	; 0x24
   18a8c:	str	r2, [sp, #4]
   18a90:	cmp	r1, #0
   18a94:	beq	18ae4 <lchmod@@Base+0x2e3c>
   18a98:	movw	r3, #1030	; 0x406
   18a9c:	mov	r5, r0
   18aa0:	cmp	r1, r3
   18aa4:	beq	18af0 <lchmod@@Base+0x2e48>
   18aa8:	cmp	r1, #11
   18aac:	beq	18ad4 <lchmod@@Base+0x2e2c>
   18ab0:	bgt	18be4 <lchmod@@Base+0x2f3c>
   18ab4:	cmp	r1, #4
   18ab8:	beq	18bfc <lchmod@@Base+0x2f54>
   18abc:	bgt	18bdc <lchmod@@Base+0x2f34>
   18ac0:	cmp	r1, #2
   18ac4:	beq	18bfc <lchmod@@Base+0x2f54>
   18ac8:	bgt	18ad4 <lchmod@@Base+0x2e2c>
   18acc:	cmp	r1, #1
   18ad0:	bne	18bfc <lchmod@@Base+0x2f54>
   18ad4:	mov	r0, r5
   18ad8:	bl	11818 <fcntl64@plt>
   18adc:	mov	r4, r0
   18ae0:	b	18b38 <lchmod@@Base+0x2e90>
   18ae4:	ldr	r2, [sp, #40]	; 0x28
   18ae8:	bl	11818 <fcntl64@plt>
   18aec:	b	18adc <lchmod@@Base+0x2e34>
   18af0:	ldr	r6, [pc, #304]	; 18c28 <lchmod@@Base+0x2f80>
   18af4:	add	r3, sp, #44	; 0x2c
   18af8:	str	r3, [sp, #4]
   18afc:	ldr	r7, [r2]
   18b00:	ldr	r3, [r6]
   18b04:	mov	r8, r6
   18b08:	mov	r2, r7
   18b0c:	cmp	r3, #0
   18b10:	blt	18ba0 <lchmod@@Base+0x2ef8>
   18b14:	bl	11818 <fcntl64@plt>
   18b18:	subs	r4, r0, #0
   18b1c:	bge	18b30 <lchmod@@Base+0x2e88>
   18b20:	bl	117a0 <__errno_location@plt>
   18b24:	ldr	r3, [r0]
   18b28:	cmp	r3, #22
   18b2c:	beq	18b4c <lchmod@@Base+0x2ea4>
   18b30:	mov	r3, #1
   18b34:	str	r3, [r8]
   18b38:	mov	r0, r4
   18b3c:	add	sp, sp, #12
   18b40:	pop	{r4, r5, r6, r7, r8, lr}
   18b44:	add	sp, sp, #12
   18b48:	bx	lr
   18b4c:	mov	r2, r7
   18b50:	mov	r1, #0
   18b54:	mov	r0, r5
   18b58:	bl	11818 <fcntl64@plt>
   18b5c:	subs	r4, r0, #0
   18b60:	mvnge	r3, #0
   18b64:	strge	r3, [r6]
   18b68:	blt	18b38 <lchmod@@Base+0x2e90>
   18b6c:	mov	r1, #1
   18b70:	mov	r0, r4
   18b74:	bl	11818 <fcntl64@plt>
   18b78:	subs	r2, r0, #0
   18b7c:	bge	18bc0 <lchmod@@Base+0x2f18>
   18b80:	bl	117a0 <__errno_location@plt>
   18b84:	mov	r5, r0
   18b88:	mov	r0, r4
   18b8c:	ldr	r6, [r5]
   18b90:	mvn	r4, #0
   18b94:	bl	11920 <close@plt>
   18b98:	str	r6, [r5]
   18b9c:	b	18b38 <lchmod@@Base+0x2e90>
   18ba0:	mov	r1, #0
   18ba4:	bl	11818 <fcntl64@plt>
   18ba8:	subs	r4, r0, #0
   18bac:	blt	18b38 <lchmod@@Base+0x2e90>
   18bb0:	ldr	r3, [r6]
   18bb4:	cmn	r3, #1
   18bb8:	bne	18b38 <lchmod@@Base+0x2e90>
   18bbc:	b	18b6c <lchmod@@Base+0x2ec4>
   18bc0:	orr	r2, r2, #1
   18bc4:	mov	r1, #2
   18bc8:	mov	r0, r4
   18bcc:	bl	11818 <fcntl64@plt>
   18bd0:	cmn	r0, #1
   18bd4:	bne	18b38 <lchmod@@Base+0x2e90>
   18bd8:	b	18b80 <lchmod@@Base+0x2ed8>
   18bdc:	cmp	r1, #9
   18be0:	b	18ad0 <lchmod@@Base+0x2e28>
   18be4:	movw	r2, #1031	; 0x407
   18be8:	cmp	r1, r2
   18bec:	bgt	18c0c <lchmod@@Base+0x2f64>
   18bf0:	cmp	r1, r3
   18bf4:	movwlt	r3, #1025	; 0x401
   18bf8:	blt	18c20 <lchmod@@Base+0x2f78>
   18bfc:	ldr	r3, [sp, #4]
   18c00:	mov	r0, r5
   18c04:	ldr	r2, [r3]
   18c08:	b	18ae8 <lchmod@@Base+0x2e40>
   18c0c:	movw	r3, #1033	; 0x409
   18c10:	cmp	r1, r3
   18c14:	beq	18bfc <lchmod@@Base+0x2f54>
   18c18:	blt	18ad4 <lchmod@@Base+0x2e2c>
   18c1c:	movw	r3, #1034	; 0x40a
   18c20:	cmp	r1, r3
   18c24:	b	18ad0 <lchmod@@Base+0x2e28>
   18c28:	andeq	fp, r2, ip, lsr r3
   18c2c:	push	{r1, r2, r3}
   18c30:	push	{r0, r1, lr}
   18c34:	ldr	r1, [sp, #12]
   18c38:	ands	r2, r1, #64	; 0x40
   18c3c:	ldrne	r2, [sp, #16]
   18c40:	addne	r3, sp, #16
   18c44:	strne	r3, [sp, #4]
   18c48:	bl	116c8 <open64@plt>
   18c4c:	bl	17a6c <lchmod@@Base+0x1dc4>
   18c50:	add	sp, sp, #8
   18c54:	pop	{lr}		; (ldr lr, [sp], #4)
   18c58:	add	sp, sp, #12
   18c5c:	bx	lr
   18c60:	push	{r0, r1, r4, lr}
   18c64:	subs	r4, r0, #0
   18c68:	bne	18c7c <lchmod@@Base+0x2fd4>
   18c6c:	mov	r0, r4
   18c70:	add	sp, sp, #8
   18c74:	pop	{r4, lr}
   18c78:	b	1156c <fflush@plt>
   18c7c:	bl	116f8 <__freading@plt>
   18c80:	cmp	r0, #0
   18c84:	beq	18c6c <lchmod@@Base+0x2fc4>
   18c88:	ldr	r3, [r4]
   18c8c:	tst	r3, #256	; 0x100
   18c90:	beq	18c6c <lchmod@@Base+0x2fc4>
   18c94:	mov	r3, #1
   18c98:	mov	r2, #0
   18c9c:	mov	r0, r4
   18ca0:	str	r3, [sp]
   18ca4:	mov	r3, #0
   18ca8:	bl	18cb0 <lchmod@@Base+0x3008>
   18cac:	b	18c6c <lchmod@@Base+0x2fc4>
   18cb0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   18cb4:	mov	r4, r0
   18cb8:	ldmib	r0, {ip, lr}
   18cbc:	ldr	r8, [sp, #32]
   18cc0:	cmp	lr, ip
   18cc4:	bne	18d34 <lchmod@@Base+0x308c>
   18cc8:	ldr	ip, [r0, #16]
   18ccc:	ldr	lr, [r0, #20]
   18cd0:	cmp	lr, ip
   18cd4:	bne	18d34 <lchmod@@Base+0x308c>
   18cd8:	ldr	r5, [r0, #36]	; 0x24
   18cdc:	cmp	r5, #0
   18ce0:	bne	18d34 <lchmod@@Base+0x308c>
   18ce4:	mov	r6, r2
   18ce8:	mov	r7, r3
   18cec:	bl	117dc <fileno@plt>
   18cf0:	mov	r2, r6
   18cf4:	mov	r3, r7
   18cf8:	str	r8, [sp]
   18cfc:	bl	11668 <lseek64@plt>
   18d00:	mvn	r3, #0
   18d04:	mvn	r2, #0
   18d08:	cmp	r1, r3
   18d0c:	cmpeq	r0, r2
   18d10:	mvneq	r0, #0
   18d14:	beq	18d2c <lchmod@@Base+0x3084>
   18d18:	ldr	r3, [r4]
   18d1c:	strd	r0, [r4, #80]	; 0x50
   18d20:	mov	r0, r5
   18d24:	bic	r3, r3, #16
   18d28:	str	r3, [r4]
   18d2c:	add	sp, sp, #8
   18d30:	pop	{r4, r5, r6, r7, r8, pc}
   18d34:	mov	r0, r4
   18d38:	str	r8, [sp, #32]
   18d3c:	add	sp, sp, #8
   18d40:	pop	{r4, r5, r6, r7, r8, lr}
   18d44:	b	1180c <fseeko64@plt>
   18d48:	sub	r0, r0, #1
   18d4c:	mov	r3, #0
   18d50:	ldrb	r2, [r0, #1]!
   18d54:	cmp	r2, #0
   18d58:	bne	18d68 <lchmod@@Base+0x30c0>
   18d5c:	udiv	r0, r3, r1
   18d60:	mls	r0, r1, r0, r3
   18d64:	bx	lr
   18d68:	add	r3, r2, r3, ror #23
   18d6c:	b	18d50 <lchmod@@Base+0x30a8>
   18d70:	b	187a4 <lchmod@@Base+0x2afc>
   18d74:	cmp	r1, #0
   18d78:	orreq	r1, r1, #1
   18d7c:	b	187d0 <lchmod@@Base+0x2b28>
   18d80:	b	18750 <lchmod@@Base+0x2aa8>
   18d84:	cmp	r2, #0
   18d88:	cmpne	r1, #0
   18d8c:	moveq	r2, #1
   18d90:	moveq	r1, r2
   18d94:	b	18e1c <lchmod@@Base+0x3174>
   18d98:	push	{r4, lr}
   18d9c:	mov	r0, #14
   18da0:	bl	11848 <nl_langinfo@plt>
   18da4:	cmp	r0, #0
   18da8:	beq	18dc0 <lchmod@@Base+0x3118>
   18dac:	ldrb	r2, [r0]
   18db0:	ldr	r3, [pc, #16]	; 18dc8 <lchmod@@Base+0x3120>
   18db4:	cmp	r2, #0
   18db8:	moveq	r0, r3
   18dbc:	pop	{r4, pc}
   18dc0:	ldr	r0, [pc]	; 18dc8 <lchmod@@Base+0x3120>
   18dc4:	pop	{r4, pc}
   18dc8:	ldrdeq	r9, [r1], -r6
   18dcc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18dd0:	subs	r5, r0, #0
   18dd4:	mov	r7, r2
   18dd8:	addeq	r5, sp, #4
   18ddc:	mov	r6, r1
   18de0:	mov	r0, r5
   18de4:	bl	116b0 <mbrtowc@plt>
   18de8:	cmp	r7, #0
   18dec:	cmnne	r0, #3
   18df0:	mov	r4, r0
   18df4:	bls	18e10 <lchmod@@Base+0x3168>
   18df8:	mov	r0, #0
   18dfc:	bl	18e54 <lchmod@@Base+0x31ac>
   18e00:	cmp	r0, #0
   18e04:	ldrbeq	r3, [r6]
   18e08:	moveq	r4, #1
   18e0c:	streq	r3, [r5]
   18e10:	mov	r0, r4
   18e14:	add	sp, sp, #12
   18e18:	pop	{r4, r5, r6, r7, pc}
   18e1c:	umull	r2, r3, r1, r2
   18e20:	cmp	r3, #0
   18e24:	bne	18e30 <lchmod@@Base+0x3188>
   18e28:	mov	r1, r2
   18e2c:	b	187d0 <lchmod@@Base+0x2b28>
   18e30:	push	{r4, lr}
   18e34:	bl	117a0 <__errno_location@plt>
   18e38:	mov	r3, #12
   18e3c:	str	r3, [r0]
   18e40:	mov	r0, #0
   18e44:	pop	{r4, pc}
   18e48:	mov	r2, #3
   18e4c:	mov	r1, #0
   18e50:	b	18a7c <lchmod@@Base+0x2dd4>
   18e54:	push	{lr}		; (str lr, [sp, #-4]!)
   18e58:	sub	sp, sp, #268	; 0x10c
   18e5c:	movw	r2, #257	; 0x101
   18e60:	add	r1, sp, #4
   18e64:	bl	18eb0 <lchmod@@Base+0x3208>
   18e68:	cmp	r0, #0
   18e6c:	movne	r0, #0
   18e70:	bne	18ea0 <lchmod@@Base+0x31f8>
   18e74:	ldr	r1, [pc, #44]	; 18ea8 <lchmod@@Base+0x3200>
   18e78:	add	r0, sp, #4
   18e7c:	bl	11548 <strcmp@plt>
   18e80:	cmp	r0, #0
   18e84:	beq	18e9c <lchmod@@Base+0x31f4>
   18e88:	ldr	r1, [pc, #28]	; 18eac <lchmod@@Base+0x3204>
   18e8c:	add	r0, sp, #4
   18e90:	bl	11548 <strcmp@plt>
   18e94:	adds	r0, r0, #0
   18e98:	movne	r0, #1
   18e9c:	and	r0, r0, #1
   18ea0:	add	sp, sp, #268	; 0x10c
   18ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ea8:	ldrdeq	r9, [r1], -ip
   18eac:	ldrdeq	r9, [r1], -lr
   18eb0:	push	{r4, r5, r6, lr}
   18eb4:	mov	r5, r1
   18eb8:	mov	r1, #0
   18ebc:	mov	r4, r2
   18ec0:	bl	11824 <setlocale@plt>
   18ec4:	subs	r6, r0, #0
   18ec8:	bne	18edc <lchmod@@Base+0x3234>
   18ecc:	cmp	r4, #0
   18ed0:	mov	r0, #22
   18ed4:	strbne	r6, [r5]
   18ed8:	pop	{r4, r5, r6, pc}
   18edc:	bl	11764 <strlen@plt>
   18ee0:	cmp	r4, r0
   18ee4:	bls	18f00 <lchmod@@Base+0x3258>
   18ee8:	add	r2, r0, #1
   18eec:	mov	r1, r6
   18ef0:	mov	r0, r5
   18ef4:	bl	115b4 <memcpy@plt>
   18ef8:	mov	r0, #0
   18efc:	pop	{r4, r5, r6, pc}
   18f00:	cmp	r4, #0
   18f04:	beq	18f24 <lchmod@@Base+0x327c>
   18f08:	sub	r4, r4, #1
   18f0c:	mov	r1, r6
   18f10:	mov	r2, r4
   18f14:	mov	r0, r5
   18f18:	bl	115b4 <memcpy@plt>
   18f1c:	mov	r3, #0
   18f20:	strb	r3, [r5, r4]
   18f24:	mov	r0, #34	; 0x22
   18f28:	pop	{r4, r5, r6, pc}
   18f2c:	mov	r1, #0
   18f30:	b	11824 <setlocale@plt>
   18f34:	cmp	r3, #0
   18f38:	cmpeq	r2, #0
   18f3c:	bne	18f54 <lchmod@@Base+0x32ac>
   18f40:	cmp	r1, #0
   18f44:	cmpeq	r0, #0
   18f48:	mvnne	r1, #0
   18f4c:	mvnne	r0, #0
   18f50:	b	18f70 <lchmod@@Base+0x32c8>
   18f54:	sub	sp, sp, #8
   18f58:	push	{sp, lr}
   18f5c:	bl	18f80 <lchmod@@Base+0x32d8>
   18f60:	ldr	lr, [sp, #4]
   18f64:	add	sp, sp, #8
   18f68:	pop	{r2, r3}
   18f6c:	bx	lr
   18f70:	push	{r1, lr}
   18f74:	mov	r0, #8
   18f78:	bl	11530 <raise@plt>
   18f7c:	pop	{r1, pc}
   18f80:	cmp	r1, r3
   18f84:	cmpeq	r0, r2
   18f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f8c:	mov	r4, r0
   18f90:	movcc	r0, #0
   18f94:	mov	r5, r1
   18f98:	ldr	lr, [sp, #36]	; 0x24
   18f9c:	movcc	r1, r0
   18fa0:	bcc	1909c <lchmod@@Base+0x33f4>
   18fa4:	cmp	r3, #0
   18fa8:	clzeq	ip, r2
   18fac:	clzne	ip, r3
   18fb0:	addeq	ip, ip, #32
   18fb4:	cmp	r5, #0
   18fb8:	clzeq	r1, r4
   18fbc:	addeq	r1, r1, #32
   18fc0:	clzne	r1, r5
   18fc4:	sub	ip, ip, r1
   18fc8:	sub	sl, ip, #32
   18fcc:	lsl	r9, r3, ip
   18fd0:	rsb	fp, ip, #32
   18fd4:	orr	r9, r9, r2, lsl sl
   18fd8:	orr	r9, r9, r2, lsr fp
   18fdc:	lsl	r8, r2, ip
   18fe0:	cmp	r5, r9
   18fe4:	cmpeq	r4, r8
   18fe8:	movcc	r0, #0
   18fec:	movcc	r1, r0
   18ff0:	bcc	1900c <lchmod@@Base+0x3364>
   18ff4:	mov	r0, #1
   18ff8:	subs	r4, r4, r8
   18ffc:	lsl	r1, r0, sl
   19000:	orr	r1, r1, r0, lsr fp
   19004:	lsl	r0, r0, ip
   19008:	sbc	r5, r5, r9
   1900c:	cmp	ip, #0
   19010:	beq	1909c <lchmod@@Base+0x33f4>
   19014:	lsr	r6, r8, #1
   19018:	orr	r6, r6, r9, lsl #31
   1901c:	lsr	r7, r9, #1
   19020:	mov	r2, ip
   19024:	b	19048 <lchmod@@Base+0x33a0>
   19028:	subs	r3, r4, r6
   1902c:	sbc	r8, r5, r7
   19030:	adds	r3, r3, r3
   19034:	adc	r8, r8, r8
   19038:	adds	r4, r3, #1
   1903c:	adc	r5, r8, #0
   19040:	subs	r2, r2, #1
   19044:	beq	19064 <lchmod@@Base+0x33bc>
   19048:	cmp	r5, r7
   1904c:	cmpeq	r4, r6
   19050:	bcs	19028 <lchmod@@Base+0x3380>
   19054:	adds	r4, r4, r4
   19058:	adc	r5, r5, r5
   1905c:	subs	r2, r2, #1
   19060:	bne	19048 <lchmod@@Base+0x33a0>
   19064:	lsr	r3, r4, ip
   19068:	orr	r3, r3, r5, lsl fp
   1906c:	lsr	r2, r5, ip
   19070:	orr	r3, r3, r5, lsr sl
   19074:	adds	r0, r0, r4
   19078:	mov	r4, r3
   1907c:	lsl	r3, r2, ip
   19080:	orr	r3, r3, r4, lsl sl
   19084:	lsl	ip, r4, ip
   19088:	orr	r3, r3, r4, lsr fp
   1908c:	adc	r1, r1, r5
   19090:	subs	r0, r0, ip
   19094:	mov	r5, r2
   19098:	sbc	r1, r1, r3
   1909c:	cmp	lr, #0
   190a0:	strdne	r4, [lr]
   190a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   190ac:	mov	r7, r0
   190b0:	ldr	r6, [pc, #72]	; 19100 <lchmod@@Base+0x3458>
   190b4:	ldr	r5, [pc, #72]	; 19104 <lchmod@@Base+0x345c>
   190b8:	add	r6, pc, r6
   190bc:	add	r5, pc, r5
   190c0:	sub	r6, r6, r5
   190c4:	mov	r8, r1
   190c8:	mov	r9, r2
   190cc:	bl	114e0 <fstatfs64@plt-0x20>
   190d0:	asrs	r6, r6, #2
   190d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   190d8:	mov	r4, #0
   190dc:	add	r4, r4, #1
   190e0:	ldr	r3, [r5], #4
   190e4:	mov	r2, r9
   190e8:	mov	r1, r8
   190ec:	mov	r0, r7
   190f0:	blx	r3
   190f4:	cmp	r6, r4
   190f8:	bne	190dc <lchmod@@Base+0x3434>
   190fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19100:	andeq	r1, r1, ip, asr #28
   19104:	andeq	r1, r1, r4, asr #28
   19108:	bx	lr
   1910c:	ldr	r3, [pc, #12]	; 19120 <lchmod@@Base+0x3478>
   19110:	mov	r1, #0
   19114:	add	r3, pc, r3
   19118:	ldr	r2, [r3]
   1911c:	b	117b8 <__cxa_atexit@plt>
   19120:	andeq	r2, r1, r4, ror r0
   19124:	mov	r2, r1
   19128:	mov	r1, r0
   1912c:	mov	r0, #3
   19130:	b	118e4 <__xstat64@plt>
   19134:	mov	r2, r1
   19138:	mov	r1, r0
   1913c:	mov	r0, #3
   19140:	b	11650 <__fxstat64@plt>
   19144:	mov	r2, r1
   19148:	mov	r1, r0
   1914c:	mov	r0, #3
   19150:	b	1192c <__lxstat64@plt>
   19154:	push	{lr}		; (str lr, [sp, #-4]!)
   19158:	sub	sp, sp, #12
   1915c:	str	r3, [sp]
   19160:	mov	r3, r2
   19164:	mov	r2, r1
   19168:	mov	r1, r0
   1916c:	mov	r0, #3
   19170:	bl	11638 <__fxstatat64@plt>
   19174:	add	sp, sp, #12
   19178:	pop	{pc}		; (ldr pc, [sp], #4)
   1917c:	push	{lr}		; (str lr, [sp, #-4]!)
   19180:	sub	sp, sp, #12
   19184:	strd	r2, [sp]
   19188:	mov	r2, r1
   1918c:	mov	r3, sp
   19190:	mov	r1, r0
   19194:	mov	r0, #1
   19198:	bl	118f0 <__xmknod@plt>
   1919c:	add	sp, sp, #12
   191a0:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000191a4 <.fini>:
   191a4:	push	{r3, lr}
   191a8:	pop	{r3, pc}
