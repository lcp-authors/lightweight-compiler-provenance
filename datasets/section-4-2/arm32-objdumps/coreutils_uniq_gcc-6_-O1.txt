
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010d2c <.init>:
   10d2c:	push	{r3, lr}
   10d30:	bl	11034 <__assert_fail@plt+0x48>
   10d34:	pop	{r3, pc}

Disassembly of section .plt:

00010d38 <calloc@plt-0x14>:
   10d38:	push	{lr}		; (str lr, [sp, #-4]!)
   10d3c:	ldr	lr, [pc, #4]	; 10d48 <calloc@plt-0x4>
   10d40:	add	lr, pc, lr
   10d44:	ldr	pc, [lr, #8]!
   10d48:			; <UNDEFINED> instruction: 0x000172b8

00010d4c <calloc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #696]!	; 0x2b8

00010d58 <fputs_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #688]!	; 0x2b0

00010d64 <raise@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d70 <strcmp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #672]!	; 0x2a0

00010d7c <strtol@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #664]!	; 0x298

00010d88 <posix_fadvise64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #656]!	; 0x290

00010d94 <fflush@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #648]!	; 0x288

00010da0 <free@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #640]!	; 0x280

00010dac <_exit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #632]!	; 0x278

00010db8 <memcpy@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #624]!	; 0x270

00010dc4 <__strtoull_internal@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #616]!	; 0x268

00010dd0 <mbsinit@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #608]!	; 0x260

00010ddc <fwrite_unlocked@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #600]!	; 0x258

00010de8 <memcmp@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #592]!	; 0x250

00010df4 <fputc_unlocked@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #584]!	; 0x248

00010e00 <dcgettext@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #576]!	; 0x240

00010e0c <dup2@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #568]!	; 0x238

00010e18 <realloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #560]!	; 0x230

00010e24 <textdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #552]!	; 0x228

00010e30 <iswprint@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #544]!	; 0x220

00010e3c <fwrite@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #536]!	; 0x218

00010e48 <lseek64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #528]!	; 0x210

00010e54 <__ctype_get_mb_cur_max@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #520]!	; 0x208

00010e60 <__fpending@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #512]!	; 0x200

00010e6c <mbrtowc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #504]!	; 0x1f8

00010e78 <error@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #496]!	; 0x1f0

00010e84 <open64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e90 <getenv@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #480]!	; 0x1e0

00010e9c <malloc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ea8 <__libc_start_main@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #464]!	; 0x1d0

00010eb4 <__freading@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #456]!	; 0x1c8

00010ec0 <__ctype_toupper_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #448]!	; 0x1c0

00010ecc <__gmon_start__@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ed8 <freopen64@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ee4 <getopt_long@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #424]!	; 0x1a8

00010ef0 <__ctype_b_loc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #416]!	; 0x1a0

00010efc <exit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #408]!	; 0x198

00010f08 <strlen@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #400]!	; 0x190

00010f14 <strchr@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #392]!	; 0x188

00010f20 <__errno_location@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #384]!	; 0x180

00010f2c <__cxa_atexit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #376]!	; 0x178

00010f38 <memset@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #368]!	; 0x170

00010f44 <__printf_chk@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #360]!	; 0x168

00010f50 <fileno@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #352]!	; 0x160

00010f5c <__fprintf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #344]!	; 0x158

00010f68 <fclose@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #336]!	; 0x150

00010f74 <fseeko64@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #328]!	; 0x148

00010f80 <__uflow@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #320]!	; 0x140

00010f8c <__overflow@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #312]!	; 0x138

00010f98 <setlocale@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #304]!	; 0x130

00010fa4 <strrchr@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #296]!	; 0x128

00010fb0 <nl_langinfo@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #288]!	; 0x120

00010fbc <bindtextdomain@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #280]!	; 0x118

00010fc8 <strncmp@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #272]!	; 0x110

00010fd4 <abort@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #264]!	; 0x108

00010fe0 <close@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #256]!	; 0x100

00010fec <__assert_fail@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #248]!	; 0xf8

Disassembly of section .text:

00010ff8 <.text>:
   10ff8:	mov	fp, #0
   10ffc:	mov	lr, #0
   11000:	pop	{r1}		; (ldr r1, [sp], #4)
   11004:	mov	r2, sp
   11008:	push	{r2}		; (str r2, [sp, #-4]!)
   1100c:	push	{r0}		; (str r0, [sp, #-4]!)
   11010:	ldr	ip, [pc, #16]	; 11028 <__assert_fail@plt+0x3c>
   11014:	push	{ip}		; (str ip, [sp, #-4]!)
   11018:	ldr	r0, [pc, #12]	; 1102c <__assert_fail@plt+0x40>
   1101c:	ldr	r3, [pc, #12]	; 11030 <__assert_fail@plt+0x44>
   11020:	bl	10ea8 <__libc_start_main@plt>
   11024:	bl	10fd4 <abort@plt>
   11028:	andeq	r6, r1, ip, ror #6
   1102c:			; <UNDEFINED> instruction: 0x000117b4
   11030:	andeq	r6, r1, ip, lsl #6
   11034:	ldr	r3, [pc, #20]	; 11050 <__assert_fail@plt+0x64>
   11038:	ldr	r2, [pc, #20]	; 11054 <__assert_fail@plt+0x68>
   1103c:	add	r3, pc, r3
   11040:	ldr	r2, [r3, r2]
   11044:	cmp	r2, #0
   11048:	bxeq	lr
   1104c:	b	10ecc <__gmon_start__@plt>
   11050:			; <UNDEFINED> instruction: 0x00016fbc
   11054:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11058:	ldr	r3, [pc, #28]	; 1107c <__assert_fail@plt+0x90>
   1105c:	ldr	r0, [pc, #28]	; 11080 <__assert_fail@plt+0x94>
   11060:	sub	r3, r3, r0
   11064:	cmp	r3, #6
   11068:	bxls	lr
   1106c:	ldr	r3, [pc, #16]	; 11084 <__assert_fail@plt+0x98>
   11070:	cmp	r3, #0
   11074:	bxeq	lr
   11078:	bx	r3
   1107c:	andeq	r8, r2, fp, asr #2
   11080:	andeq	r8, r2, r8, asr #2
   11084:	andeq	r0, r0, r0
   11088:	ldr	r1, [pc, #36]	; 110b4 <__assert_fail@plt+0xc8>
   1108c:	ldr	r0, [pc, #36]	; 110b8 <__assert_fail@plt+0xcc>
   11090:	sub	r1, r1, r0
   11094:	asr	r1, r1, #2
   11098:	add	r1, r1, r1, lsr #31
   1109c:	asrs	r1, r1, #1
   110a0:	bxeq	lr
   110a4:	ldr	r3, [pc, #16]	; 110bc <__assert_fail@plt+0xd0>
   110a8:	cmp	r3, #0
   110ac:	bxeq	lr
   110b0:	bx	r3
   110b4:	andeq	r8, r2, r8, asr #2
   110b8:	andeq	r8, r2, r8, asr #2
   110bc:	andeq	r0, r0, r0
   110c0:	push	{r4, lr}
   110c4:	ldr	r4, [pc, #24]	; 110e4 <__assert_fail@plt+0xf8>
   110c8:	ldrb	r3, [r4]
   110cc:	cmp	r3, #0
   110d0:	popne	{r4, pc}
   110d4:	bl	11058 <__assert_fail@plt+0x6c>
   110d8:	mov	r3, #1
   110dc:	strb	r3, [r4]
   110e0:	pop	{r4, pc}
   110e4:	andeq	r8, r2, ip, ror #2
   110e8:	ldr	r0, [pc, #40]	; 11118 <__assert_fail@plt+0x12c>
   110ec:	ldr	r3, [r0]
   110f0:	cmp	r3, #0
   110f4:	bne	110fc <__assert_fail@plt+0x110>
   110f8:	b	11088 <__assert_fail@plt+0x9c>
   110fc:	ldr	r3, [pc, #24]	; 1111c <__assert_fail@plt+0x130>
   11100:	cmp	r3, #0
   11104:	beq	110f8 <__assert_fail@plt+0x10c>
   11108:	push	{r4, lr}
   1110c:	blx	r3
   11110:	pop	{r4, lr}
   11114:	b	11088 <__assert_fail@plt+0x9c>
   11118:	andeq	r7, r2, r4, lsl pc
   1111c:	andeq	r0, r0, r0
   11120:	push	{r4, r5, lr}
   11124:	sub	sp, sp, #20
   11128:	mov	r4, r0
   1112c:	mov	r5, r1
   11130:	ldr	r3, [pc, #96]	; 11198 <__assert_fail@plt+0x1ac>
   11134:	str	r3, [sp]
   11138:	add	r3, sp, #8
   1113c:	mov	r2, #10
   11140:	mov	r1, #0
   11144:	bl	155a4 <__assert_fail@plt+0x45b8>
   11148:	cmp	r0, #1
   1114c:	bhi	11170 <__assert_fail@plt+0x184>
   11150:	ldrd	r0, [sp, #8]
   11154:	mvn	r2, #0
   11158:	mov	r3, #0
   1115c:	cmp	r1, r3
   11160:	cmpeq	r0, r2
   11164:	movhi	r0, r2
   11168:	add	sp, sp, #20
   1116c:	pop	{r4, r5, pc}
   11170:	mov	r2, #5
   11174:	mov	r1, r5
   11178:	mov	r0, #0
   1117c:	bl	10e00 <dcgettext@plt>
   11180:	str	r0, [sp]
   11184:	mov	r3, r4
   11188:	ldr	r2, [pc, #12]	; 1119c <__assert_fail@plt+0x1b0>
   1118c:	mov	r1, #0
   11190:	mov	r0, #1
   11194:	bl	10e78 <error@plt>
   11198:	strdeq	r6, [r1], -r0
   1119c:	ldrdeq	r6, [r1], -ip
   111a0:	push	{r4, r5, r6, lr}
   111a4:	mov	r4, r2
   111a8:	mov	r5, r3
   111ac:	orrs	r3, r4, r5
   111b0:	bne	111fc <__assert_fail@plt+0x210>
   111b4:	ldr	r3, [pc, #112]	; 1122c <__assert_fail@plt+0x240>
   111b8:	ldrb	r3, [r3]
   111bc:	eor	r3, r3, #1
   111c0:	cmp	r3, #0
   111c4:	popne	{r4, r5, r6, pc}
   111c8:	mov	r2, r4
   111cc:	mov	r4, r0
   111d0:	ldr	r1, [pc, #84]	; 1122c <__assert_fail@plt+0x240>
   111d4:	ldr	r1, [r1, #4]
   111d8:	cmp	r1, #0
   111dc:	beq	11214 <__assert_fail@plt+0x228>
   111e0:	ldr	r3, [pc, #72]	; 11230 <__assert_fail@plt+0x244>
   111e4:	ldr	r3, [r3]
   111e8:	ldr	r2, [r4, #4]
   111ec:	mov	r1, #1
   111f0:	ldr	r0, [r4, #8]
   111f4:	bl	10ddc <fwrite_unlocked@plt>
   111f8:	pop	{r4, r5, r6, pc}
   111fc:	cmp	r1, #0
   11200:	ldr	r3, [pc, #36]	; 1122c <__assert_fail@plt+0x240>
   11204:	ldrbeq	r3, [r3, #1]
   11208:	ldrbne	r3, [r3, #2]
   1120c:	eor	r3, r3, #1
   11210:	b	111c0 <__assert_fail@plt+0x1d4>
   11214:	adds	r2, r2, #1
   11218:	adc	r3, r5, #0
   1121c:	ldr	r1, [pc, #16]	; 11234 <__assert_fail@plt+0x248>
   11220:	mov	r0, #1
   11224:	bl	10f44 <__printf_chk@plt>
   11228:	b	111e0 <__assert_fail@plt+0x1f4>
   1122c:	andeq	r8, r2, r0, ror r1
   11230:	andeq	r8, r2, r4, ror #2
   11234:	andeq	r6, r1, r4, ror #9
   11238:	push	{r4, lr}
   1123c:	ldr	lr, [pc, #88]	; 1129c <__assert_fail@plt+0x2b0>
   11240:	ldr	ip, [lr, #8]
   11244:	cmp	ip, r2
   11248:	movcc	r2, ip
   1124c:	cmp	ip, r3
   11250:	movcc	r3, ip
   11254:	ldrb	ip, [lr, #12]
   11258:	cmp	ip, #0
   1125c:	beq	11278 <__assert_fail@plt+0x28c>
   11260:	cmp	r3, r2
   11264:	bne	11284 <__assert_fail@plt+0x298>
   11268:	bl	12d38 <__assert_fail@plt+0x1d4c>
   1126c:	adds	ip, r0, #0
   11270:	movne	ip, #1
   11274:	b	11284 <__assert_fail@plt+0x298>
   11278:	cmp	r3, r2
   1127c:	movne	ip, #1
   11280:	beq	1128c <__assert_fail@plt+0x2a0>
   11284:	mov	r0, ip
   11288:	pop	{r4, pc}
   1128c:	bl	10de8 <memcmp@plt>
   11290:	adds	ip, r0, #0
   11294:	movne	ip, #1
   11298:	b	11284 <__assert_fail@plt+0x298>
   1129c:	andeq	r8, r2, r0, ror r1
   112a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   112a4:	ldr	r8, [r0, #8]
   112a8:	ldr	r5, [r0, #4]
   112ac:	ldr	r3, [pc, #216]	; 1138c <__assert_fail@plt+0x3a0>
   112b0:	ldr	r9, [r3, #16]
   112b4:	sub	r6, r5, #1
   112b8:	cmp	r5, #1
   112bc:	cmpne	r9, #0
   112c0:	moveq	r4, #0
   112c4:	beq	1130c <__assert_fail@plt+0x320>
   112c8:	mov	r7, #0
   112cc:	mov	r4, r7
   112d0:	sub	r5, r5, #1
   112d4:	b	1134c <__assert_fail@plt+0x360>
   112d8:	cmp	r6, r4
   112dc:	bls	1130c <__assert_fail@plt+0x320>
   112e0:	add	r1, r8, r4
   112e4:	ldrb	r2, [r1], #1
   112e8:	lsl	r3, r2, #1
   112ec:	ldrh	r3, [r0, r3]
   112f0:	cmp	r2, #10
   112f4:	orreq	r3, r3, #1
   112f8:	tst	r3, #1
   112fc:	bne	1132c <__assert_fail@plt+0x340>
   11300:	add	r4, r4, #1
   11304:	cmp	r5, r4
   11308:	bne	112e4 <__assert_fail@plt+0x2f8>
   1130c:	sub	r0, r6, r4
   11310:	ldr	r3, [pc, #116]	; 1138c <__assert_fail@plt+0x3a0>
   11314:	ldr	r3, [r3, #20]
   11318:	cmp	r0, r3
   1131c:	addls	r0, r4, r0
   11320:	addhi	r0, r4, r3
   11324:	add	r0, r8, r0
   11328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1132c:	add	r7, r7, #1
   11330:	cmp	r6, r4
   11334:	movls	r3, #0
   11338:	movhi	r3, #1
   1133c:	cmp	r7, r9
   11340:	movcs	r3, #0
   11344:	cmp	r3, #0
   11348:	beq	1130c <__assert_fail@plt+0x320>
   1134c:	cmp	r6, r4
   11350:	bls	1130c <__assert_fail@plt+0x320>
   11354:	bl	10ef0 <__ctype_b_loc@plt>
   11358:	ldr	r0, [r0]
   1135c:	add	r1, r8, r4
   11360:	ldrb	r2, [r1], #1
   11364:	lsl	r3, r2, #1
   11368:	ldrh	r3, [r0, r3]
   1136c:	cmp	r2, #10
   11370:	orreq	r3, r3, #1
   11374:	tst	r3, #1
   11378:	beq	112d8 <__assert_fail@plt+0x2ec>
   1137c:	add	r4, r4, #1
   11380:	cmp	r5, r4
   11384:	bne	11360 <__assert_fail@plt+0x374>
   11388:	b	1132c <__assert_fail@plt+0x340>
   1138c:	andeq	r8, r2, r0, ror r1
   11390:	push	{lr}		; (str lr, [sp, #-4]!)
   11394:	sub	sp, sp, #60	; 0x3c
   11398:	subs	r6, r0, #0
   1139c:	beq	113d8 <__assert_fail@plt+0x3ec>
   113a0:	ldr	r3, [pc, #920]	; 11740 <__assert_fail@plt+0x754>
   113a4:	ldr	r4, [r3]
   113a8:	mov	r2, #5
   113ac:	ldr	r1, [pc, #912]	; 11744 <__assert_fail@plt+0x758>
   113b0:	mov	r0, #0
   113b4:	bl	10e00 <dcgettext@plt>
   113b8:	ldr	r3, [pc, #904]	; 11748 <__assert_fail@plt+0x75c>
   113bc:	ldr	r3, [r3]
   113c0:	mov	r2, r0
   113c4:	mov	r1, #1
   113c8:	mov	r0, r4
   113cc:	bl	10f5c <__fprintf_chk@plt>
   113d0:	mov	r0, r6
   113d4:	bl	10efc <exit@plt>
   113d8:	mov	r2, #5
   113dc:	ldr	r1, [pc, #872]	; 1174c <__assert_fail@plt+0x760>
   113e0:	mov	r0, #0
   113e4:	bl	10e00 <dcgettext@plt>
   113e8:	ldr	r3, [pc, #856]	; 11748 <__assert_fail@plt+0x75c>
   113ec:	ldr	r2, [r3]
   113f0:	mov	r1, r0
   113f4:	mov	r0, #1
   113f8:	bl	10f44 <__printf_chk@plt>
   113fc:	mov	r2, #5
   11400:	ldr	r1, [pc, #840]	; 11750 <__assert_fail@plt+0x764>
   11404:	mov	r0, #0
   11408:	bl	10e00 <dcgettext@plt>
   1140c:	ldr	r4, [pc, #832]	; 11754 <__assert_fail@plt+0x768>
   11410:	ldr	r1, [r4]
   11414:	bl	10d58 <fputs_unlocked@plt>
   11418:	mov	r2, #5
   1141c:	ldr	r1, [pc, #820]	; 11758 <__assert_fail@plt+0x76c>
   11420:	mov	r0, #0
   11424:	bl	10e00 <dcgettext@plt>
   11428:	ldr	r1, [r4]
   1142c:	bl	10d58 <fputs_unlocked@plt>
   11430:	mov	r2, #5
   11434:	ldr	r1, [pc, #800]	; 1175c <__assert_fail@plt+0x770>
   11438:	mov	r0, #0
   1143c:	bl	10e00 <dcgettext@plt>
   11440:	ldr	r1, [r4]
   11444:	bl	10d58 <fputs_unlocked@plt>
   11448:	mov	r2, #5
   1144c:	ldr	r1, [pc, #780]	; 11760 <__assert_fail@plt+0x774>
   11450:	mov	r0, #0
   11454:	bl	10e00 <dcgettext@plt>
   11458:	ldr	r1, [r4]
   1145c:	bl	10d58 <fputs_unlocked@plt>
   11460:	mov	r2, #5
   11464:	ldr	r1, [pc, #760]	; 11764 <__assert_fail@plt+0x778>
   11468:	mov	r0, #0
   1146c:	bl	10e00 <dcgettext@plt>
   11470:	ldr	r1, [r4]
   11474:	bl	10d58 <fputs_unlocked@plt>
   11478:	mov	r2, #5
   1147c:	ldr	r1, [pc, #740]	; 11768 <__assert_fail@plt+0x77c>
   11480:	mov	r0, #0
   11484:	bl	10e00 <dcgettext@plt>
   11488:	ldr	r1, [r4]
   1148c:	bl	10d58 <fputs_unlocked@plt>
   11490:	mov	r2, #5
   11494:	ldr	r1, [pc, #720]	; 1176c <__assert_fail@plt+0x780>
   11498:	mov	r0, #0
   1149c:	bl	10e00 <dcgettext@plt>
   114a0:	ldr	r1, [r4]
   114a4:	bl	10d58 <fputs_unlocked@plt>
   114a8:	mov	r2, #5
   114ac:	ldr	r1, [pc, #700]	; 11770 <__assert_fail@plt+0x784>
   114b0:	mov	r0, #0
   114b4:	bl	10e00 <dcgettext@plt>
   114b8:	ldr	r1, [r4]
   114bc:	bl	10d58 <fputs_unlocked@plt>
   114c0:	mov	r2, #5
   114c4:	ldr	r1, [pc, #680]	; 11774 <__assert_fail@plt+0x788>
   114c8:	mov	r0, #0
   114cc:	bl	10e00 <dcgettext@plt>
   114d0:	ldr	r1, [r4]
   114d4:	bl	10d58 <fputs_unlocked@plt>
   114d8:	mov	r2, #5
   114dc:	ldr	r1, [pc, #660]	; 11778 <__assert_fail@plt+0x78c>
   114e0:	mov	r0, #0
   114e4:	bl	10e00 <dcgettext@plt>
   114e8:	ldr	r1, [r4]
   114ec:	bl	10d58 <fputs_unlocked@plt>
   114f0:	mov	r2, #5
   114f4:	ldr	r1, [pc, #640]	; 1177c <__assert_fail@plt+0x790>
   114f8:	mov	r0, #0
   114fc:	bl	10e00 <dcgettext@plt>
   11500:	ldr	r1, [r4]
   11504:	bl	10d58 <fputs_unlocked@plt>
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #620]	; 11780 <__assert_fail@plt+0x794>
   11510:	mov	r0, #0
   11514:	bl	10e00 <dcgettext@plt>
   11518:	ldr	r1, [r4]
   1151c:	bl	10d58 <fputs_unlocked@plt>
   11520:	mov	r2, #5
   11524:	ldr	r1, [pc, #600]	; 11784 <__assert_fail@plt+0x798>
   11528:	mov	r0, #0
   1152c:	bl	10e00 <dcgettext@plt>
   11530:	ldr	r1, [r4]
   11534:	bl	10d58 <fputs_unlocked@plt>
   11538:	mov	ip, sp
   1153c:	ldr	lr, [pc, #580]	; 11788 <__assert_fail@plt+0x79c>
   11540:	ldm	lr!, {r0, r1, r2, r3}
   11544:	stmia	ip!, {r0, r1, r2, r3}
   11548:	ldm	lr!, {r0, r1, r2, r3}
   1154c:	stmia	ip!, {r0, r1, r2, r3}
   11550:	ldm	lr!, {r0, r1, r2, r3}
   11554:	stmia	ip!, {r0, r1, r2, r3}
   11558:	ldm	lr, {r0, r1}
   1155c:	stm	ip, {r0, r1}
   11560:	ldr	r1, [sp]
   11564:	cmp	r1, #0
   11568:	moveq	r4, sp
   1156c:	beq	11594 <__assert_fail@plt+0x5a8>
   11570:	mov	r4, sp
   11574:	ldr	r5, [pc, #528]	; 1178c <__assert_fail@plt+0x7a0>
   11578:	mov	r0, r5
   1157c:	bl	10d70 <strcmp@plt>
   11580:	cmp	r0, #0
   11584:	beq	11594 <__assert_fail@plt+0x5a8>
   11588:	ldr	r1, [r4, #8]!
   1158c:	cmp	r1, #0
   11590:	bne	11578 <__assert_fail@plt+0x58c>
   11594:	ldr	r4, [r4, #4]
   11598:	cmp	r4, #0
   1159c:	beq	116b0 <__assert_fail@plt+0x6c4>
   115a0:	mov	r2, #5
   115a4:	ldr	r1, [pc, #484]	; 11790 <__assert_fail@plt+0x7a4>
   115a8:	mov	r0, #0
   115ac:	bl	10e00 <dcgettext@plt>
   115b0:	ldr	r3, [pc, #476]	; 11794 <__assert_fail@plt+0x7a8>
   115b4:	ldr	r2, [pc, #476]	; 11798 <__assert_fail@plt+0x7ac>
   115b8:	mov	r1, r0
   115bc:	mov	r0, #1
   115c0:	bl	10f44 <__printf_chk@plt>
   115c4:	mov	r1, #0
   115c8:	mov	r0, #5
   115cc:	bl	10f98 <setlocale@plt>
   115d0:	cmp	r0, #0
   115d4:	beq	115ec <__assert_fail@plt+0x600>
   115d8:	mov	r2, #3
   115dc:	ldr	r1, [pc, #440]	; 1179c <__assert_fail@plt+0x7b0>
   115e0:	bl	10fc8 <strncmp@plt>
   115e4:	cmp	r0, #0
   115e8:	bne	1164c <__assert_fail@plt+0x660>
   115ec:	mov	r2, #5
   115f0:	ldr	r1, [pc, #424]	; 117a0 <__assert_fail@plt+0x7b4>
   115f4:	mov	r0, #0
   115f8:	bl	10e00 <dcgettext@plt>
   115fc:	ldr	r5, [pc, #392]	; 1178c <__assert_fail@plt+0x7a0>
   11600:	mov	r3, r5
   11604:	ldr	r2, [pc, #392]	; 11794 <__assert_fail@plt+0x7a8>
   11608:	mov	r1, r0
   1160c:	mov	r0, #1
   11610:	bl	10f44 <__printf_chk@plt>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #388]	; 117a4 <__assert_fail@plt+0x7b8>
   1161c:	mov	r0, #0
   11620:	bl	10e00 <dcgettext@plt>
   11624:	mov	r1, r0
   11628:	ldr	r2, [pc, #376]	; 117a8 <__assert_fail@plt+0x7bc>
   1162c:	ldr	r3, [pc, #376]	; 117ac <__assert_fail@plt+0x7c0>
   11630:	cmp	r4, r5
   11634:	movne	r3, r2
   11638:	mov	r2, r4
   1163c:	mov	r0, #1
   11640:	bl	10f44 <__printf_chk@plt>
   11644:	b	113d0 <__assert_fail@plt+0x3e4>
   11648:	ldr	r4, [pc, #316]	; 1178c <__assert_fail@plt+0x7a0>
   1164c:	mov	r2, #5
   11650:	ldr	r1, [pc, #344]	; 117b0 <__assert_fail@plt+0x7c4>
   11654:	mov	r0, #0
   11658:	bl	10e00 <dcgettext@plt>
   1165c:	ldr	r3, [pc, #240]	; 11754 <__assert_fail@plt+0x768>
   11660:	ldr	r1, [r3]
   11664:	bl	10d58 <fputs_unlocked@plt>
   11668:	b	115ec <__assert_fail@plt+0x600>
   1166c:	mov	r2, #5
   11670:	ldr	r1, [pc, #296]	; 117a0 <__assert_fail@plt+0x7b4>
   11674:	mov	r0, #0
   11678:	bl	10e00 <dcgettext@plt>
   1167c:	ldr	r4, [pc, #264]	; 1178c <__assert_fail@plt+0x7a0>
   11680:	mov	r3, r4
   11684:	ldr	r2, [pc, #264]	; 11794 <__assert_fail@plt+0x7a8>
   11688:	mov	r1, r0
   1168c:	mov	r0, #1
   11690:	bl	10f44 <__printf_chk@plt>
   11694:	mov	r2, #5
   11698:	ldr	r1, [pc, #260]	; 117a4 <__assert_fail@plt+0x7b8>
   1169c:	mov	r0, #0
   116a0:	bl	10e00 <dcgettext@plt>
   116a4:	mov	r1, r0
   116a8:	ldr	r3, [pc, #252]	; 117ac <__assert_fail@plt+0x7c0>
   116ac:	b	11638 <__assert_fail@plt+0x64c>
   116b0:	mov	r2, #5
   116b4:	ldr	r1, [pc, #212]	; 11790 <__assert_fail@plt+0x7a4>
   116b8:	mov	r0, #0
   116bc:	bl	10e00 <dcgettext@plt>
   116c0:	ldr	r3, [pc, #204]	; 11794 <__assert_fail@plt+0x7a8>
   116c4:	ldr	r2, [pc, #204]	; 11798 <__assert_fail@plt+0x7ac>
   116c8:	mov	r1, r0
   116cc:	mov	r0, #1
   116d0:	bl	10f44 <__printf_chk@plt>
   116d4:	mov	r1, #0
   116d8:	mov	r0, #5
   116dc:	bl	10f98 <setlocale@plt>
   116e0:	cmp	r0, #0
   116e4:	beq	1166c <__assert_fail@plt+0x680>
   116e8:	mov	r2, #3
   116ec:	ldr	r1, [pc, #168]	; 1179c <__assert_fail@plt+0x7b0>
   116f0:	bl	10fc8 <strncmp@plt>
   116f4:	cmp	r0, #0
   116f8:	bne	11648 <__assert_fail@plt+0x65c>
   116fc:	mov	r2, #5
   11700:	ldr	r1, [pc, #152]	; 117a0 <__assert_fail@plt+0x7b4>
   11704:	mov	r0, #0
   11708:	bl	10e00 <dcgettext@plt>
   1170c:	ldr	r4, [pc, #120]	; 1178c <__assert_fail@plt+0x7a0>
   11710:	mov	r3, r4
   11714:	ldr	r2, [pc, #120]	; 11794 <__assert_fail@plt+0x7a8>
   11718:	mov	r1, r0
   1171c:	mov	r0, #1
   11720:	bl	10f44 <__printf_chk@plt>
   11724:	mov	r2, #5
   11728:	ldr	r1, [pc, #116]	; 117a4 <__assert_fail@plt+0x7b8>
   1172c:	mov	r0, #0
   11730:	bl	10e00 <dcgettext@plt>
   11734:	mov	r1, r0
   11738:	ldr	r3, [pc, #108]	; 117ac <__assert_fail@plt+0x7c0>
   1173c:	b	11638 <__assert_fail@plt+0x64c>
   11740:	andeq	r8, r2, r8, asr r1
   11744:	strdeq	r6, [r1], -r4
   11748:	muleq	r2, r8, r1
   1174c:	andeq	r6, r1, ip, lsl r5
   11750:	andeq	r6, r1, r4, asr #10
   11754:	andeq	r8, r2, r4, ror #2
   11758:	strdeq	r6, [r1], -r4
   1175c:	andeq	r6, r1, r0, asr #12
   11760:	andeq	r6, r1, ip, asr #13
   11764:	andeq	r6, r1, r4, asr #15
   11768:	andeq	r6, r1, r0, lsl #16
   1176c:	muleq	r1, r8, r8
   11770:	andeq	r6, r1, ip, asr #18
   11774:	andeq	r6, r1, ip, lsl #19
   11778:	ldrdeq	r6, [r1], -r0
   1177c:	andeq	r6, r1, r0, lsl #20
   11780:	andeq	r6, r1, r8, lsr sl
   11784:			; <UNDEFINED> instruction: 0x00016ab0
   11788:	muleq	r1, r4, r3
   1178c:	andeq	r6, r1, ip, ror #9
   11790:	andeq	r6, r1, r0, asr #22
   11794:	andeq	r6, r1, r8, asr fp
   11798:	andeq	r6, r1, r0, lsl #23
   1179c:	muleq	r1, r0, fp
   117a0:	ldrdeq	r6, [r1], -ip
   117a4:	strdeq	r6, [r1], -r8
   117a8:	strdeq	r6, [r1], -r0
   117ac:	strdeq	r6, [r1], -r0
   117b0:	muleq	r1, r4, fp
   117b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117b8:	sub	sp, sp, #92	; 0x5c
   117bc:	mov	r8, r0
   117c0:	mov	r7, r1
   117c4:	ldr	r0, [pc, #2768]	; 1229c <__assert_fail@plt+0x12b0>
   117c8:	bl	10e90 <getenv@plt>
   117cc:	adds	r9, r0, #0
   117d0:	movne	r9, #1
   117d4:	ldr	r3, [pc, #2756]	; 122a0 <__assert_fail@plt+0x12b4>
   117d8:	str	r3, [sp, #84]	; 0x54
   117dc:	str	r3, [sp, #80]	; 0x50
   117e0:	ldr	r0, [r7]
   117e4:	bl	12df0 <__assert_fail@plt+0x1e04>
   117e8:	ldr	r1, [pc, #2740]	; 122a4 <__assert_fail@plt+0x12b8>
   117ec:	mov	r0, #6
   117f0:	bl	10f98 <setlocale@plt>
   117f4:	ldr	r4, [pc, #2732]	; 122a8 <__assert_fail@plt+0x12bc>
   117f8:	ldr	r1, [pc, #2732]	; 122ac <__assert_fail@plt+0x12c0>
   117fc:	mov	r0, r4
   11800:	bl	10fbc <bindtextdomain@plt>
   11804:	mov	r0, r4
   11808:	bl	10e24 <textdomain@plt>
   1180c:	ldr	r0, [pc, #2716]	; 122b0 <__assert_fail@plt+0x12c4>
   11810:	bl	16370 <__assert_fail@plt+0x5384>
   11814:	ldr	r3, [pc, #2712]	; 122b4 <__assert_fail@plt+0x12c8>
   11818:	mov	r5, #0
   1181c:	str	r5, [r3, #20]
   11820:	str	r5, [r3, #16]
   11824:	mvn	r2, #0
   11828:	str	r2, [r3, #8]
   1182c:	mov	r2, #1
   11830:	strb	r2, [r3, #1]
   11834:	strb	r2, [r3]
   11838:	strb	r5, [r3, #2]
   1183c:	str	r2, [r3, #4]
   11840:	str	r5, [r3, #24]
   11844:	str	r5, [sp, #24]
   11848:	mov	r3, #10
   1184c:	str	r3, [sp, #20]
   11850:	mov	r4, r5
   11854:	str	r5, [sp, #28]
   11858:	ldr	r6, [pc, #2648]	; 122b8 <__assert_fail@plt+0x12cc>
   1185c:	ldr	sl, [pc, #2648]	; 122bc <__assert_fail@plt+0x12d0>
   11860:	ldr	fp, [pc, #2636]	; 122b4 <__assert_fail@plt+0x12c8>
   11864:	add	r3, sl, #292	; 0x124
   11868:	str	r3, [sp, #32]
   1186c:	b	118ac <__assert_fail@plt+0x8c0>
   11870:	mov	r3, #0
   11874:	str	r3, [sp, #20]
   11878:	b	118ac <__assert_fail@plt+0x8c0>
   1187c:	ldr	r3, [r6]
   11880:	cmp	r8, r3
   11884:	ble	11c84 <__assert_fail@plt+0xc98>
   11888:	cmp	r4, #2
   1188c:	beq	1193c <__assert_fail@plt+0x950>
   11890:	add	r2, r3, #1
   11894:	str	r2, [r6]
   11898:	add	r2, sp, #88	; 0x58
   1189c:	add	r2, r2, r4, lsl #2
   118a0:	ldr	r3, [r7, r3, lsl #2]
   118a4:	str	r3, [r2, #-8]
   118a8:	add	r4, r4, #1
   118ac:	cmn	r5, #1
   118b0:	beq	1187c <__assert_fail@plt+0x890>
   118b4:	cmp	r4, #0
   118b8:	moveq	r3, #0
   118bc:	andne	r3, r9, #1
   118c0:	cmp	r3, #0
   118c4:	bne	1187c <__assert_fail@plt+0x890>
   118c8:	str	r3, [sp]
   118cc:	add	r3, sl, #56	; 0x38
   118d0:	ldr	r2, [pc, #2536]	; 122c0 <__assert_fail@plt+0x12d4>
   118d4:	mov	r1, r7
   118d8:	mov	r0, r8
   118dc:	bl	10ee4 <getopt_long@plt>
   118e0:	mov	r5, r0
   118e4:	cmn	r0, #1
   118e8:	beq	1187c <__assert_fail@plt+0x890>
   118ec:	cmp	r0, #100	; 0x64
   118f0:	beq	11b28 <__assert_fail@plt+0xb3c>
   118f4:	ble	1197c <__assert_fail@plt+0x990>
   118f8:	cmp	r0, #117	; 0x75
   118fc:	beq	11c2c <__assert_fail@plt+0xc40>
   11900:	bgt	119d0 <__assert_fail@plt+0x9e4>
   11904:	cmp	r0, #105	; 0x69
   11908:	beq	11c08 <__assert_fail@plt+0xc1c>
   1190c:	cmp	r0, #115	; 0x73
   11910:	beq	11c14 <__assert_fail@plt+0xc28>
   11914:	cmp	r0, #102	; 0x66
   11918:	bne	119a4 <__assert_fail@plt+0x9b8>
   1191c:	ldr	r1, [pc, #2464]	; 122c4 <__assert_fail@plt+0x12d8>
   11920:	ldr	r3, [pc, #2464]	; 122c8 <__assert_fail@plt+0x12dc>
   11924:	ldr	r0, [r3]
   11928:	bl	11120 <__assert_fail@plt+0x134>
   1192c:	str	r0, [fp, #16]
   11930:	mov	r3, #2
   11934:	str	r3, [sp, #28]
   11938:	b	118ac <__assert_fail@plt+0x8c0>
   1193c:	mov	r2, #5
   11940:	ldr	r1, [pc, #2436]	; 122cc <__assert_fail@plt+0x12e0>
   11944:	mov	r0, #0
   11948:	bl	10e00 <dcgettext@plt>
   1194c:	mov	r4, r0
   11950:	ldr	r3, [pc, #2400]	; 122b8 <__assert_fail@plt+0x12cc>
   11954:	ldr	r3, [r3]
   11958:	ldr	r0, [r7, r3, lsl #2]
   1195c:	bl	14940 <__assert_fail@plt+0x3954>
   11960:	mov	r3, r0
   11964:	mov	r2, r4
   11968:	mov	r1, #0
   1196c:	mov	r0, r1
   11970:	bl	10e78 <error@plt>
   11974:	mov	r0, #1
   11978:	bl	11390 <__assert_fail@plt+0x3a4>
   1197c:	cmp	r0, #57	; 0x39
   11980:	bgt	119ac <__assert_fail@plt+0x9c0>
   11984:	cmp	r0, #48	; 0x30
   11988:	bge	11ad0 <__assert_fail@plt+0xae4>
   1198c:	cmn	r0, #2
   11990:	beq	11c40 <__assert_fail@plt+0xc54>
   11994:	cmp	r0, #1
   11998:	beq	11a00 <__assert_fail@plt+0xa14>
   1199c:	cmn	r0, #3
   119a0:	beq	11c48 <__assert_fail@plt+0xc5c>
   119a4:	mov	r0, #1
   119a8:	bl	11390 <__assert_fail@plt+0x3a4>
   119ac:	cmp	r0, #68	; 0x44
   119b0:	beq	11b3c <__assert_fail@plt+0xb50>
   119b4:	cmp	r0, #99	; 0x63
   119b8:	bne	119a4 <__assert_fail@plt+0x9b8>
   119bc:	mov	r3, #0
   119c0:	str	r3, [fp, #4]
   119c4:	mov	r3, #1
   119c8:	str	r3, [sp, #24]
   119cc:	b	118ac <__assert_fail@plt+0x8c0>
   119d0:	cmp	r0, #122	; 0x7a
   119d4:	beq	11870 <__assert_fail@plt+0x884>
   119d8:	cmp	r0, #256	; 0x100
   119dc:	beq	11bb4 <__assert_fail@plt+0xbc8>
   119e0:	cmp	r0, #119	; 0x77
   119e4:	bne	119a4 <__assert_fail@plt+0x9b8>
   119e8:	ldr	r1, [pc, #2272]	; 122d0 <__assert_fail@plt+0x12e4>
   119ec:	ldr	r3, [pc, #2260]	; 122c8 <__assert_fail@plt+0x12dc>
   119f0:	ldr	r0, [r3]
   119f4:	bl	11120 <__assert_fail@plt+0x134>
   119f8:	str	r0, [fp, #8]
   119fc:	b	118ac <__assert_fail@plt+0x8c0>
   11a00:	ldr	r3, [pc, #2240]	; 122c8 <__assert_fail@plt+0x12dc>
   11a04:	ldr	r3, [r3]
   11a08:	ldrb	r3, [r3]
   11a0c:	cmp	r3, #43	; 0x2b
   11a10:	beq	11a38 <__assert_fail@plt+0xa4c>
   11a14:	cmp	r4, #2
   11a18:	beq	11a94 <__assert_fail@plt+0xaa8>
   11a1c:	add	r3, sp, #88	; 0x58
   11a20:	add	r3, r3, r4, lsl #2
   11a24:	ldr	r2, [pc, #2204]	; 122c8 <__assert_fail@plt+0x12dc>
   11a28:	ldr	r2, [r2]
   11a2c:	str	r2, [r3, #-8]
   11a30:	add	r4, r4, #1
   11a34:	b	118ac <__assert_fail@plt+0x8c0>
   11a38:	bl	12d8c <__assert_fail@plt+0x1da0>
   11a3c:	sub	r3, r0, #199680	; 0x30c00
   11a40:	sub	r3, r3, #432	; 0x1b0
   11a44:	cmp	r3, #696	; 0x2b8
   11a48:	bls	11a14 <__assert_fail@plt+0xa28>
   11a4c:	ldr	r3, [pc, #2128]	; 122a4 <__assert_fail@plt+0x12b8>
   11a50:	str	r3, [sp]
   11a54:	add	r3, sp, #64	; 0x40
   11a58:	mov	r2, #10
   11a5c:	mov	r1, #0
   11a60:	ldr	r0, [pc, #2144]	; 122c8 <__assert_fail@plt+0x12dc>
   11a64:	ldr	r0, [r0]
   11a68:	bl	155a4 <__assert_fail@plt+0x45b8>
   11a6c:	cmp	r0, #0
   11a70:	bne	11a14 <__assert_fail@plt+0xa28>
   11a74:	ldrd	r2, [sp, #64]	; 0x40
   11a78:	mvn	r0, #0
   11a7c:	mov	r1, #0
   11a80:	cmp	r3, r1
   11a84:	cmpeq	r2, r0
   11a88:	strls	r2, [fp, #20]
   11a8c:	bls	118ac <__assert_fail@plt+0x8c0>
   11a90:	b	11a14 <__assert_fail@plt+0xa28>
   11a94:	mov	r2, #5
   11a98:	ldr	r1, [pc, #2092]	; 122cc <__assert_fail@plt+0x12e0>
   11a9c:	mov	r0, #0
   11aa0:	bl	10e00 <dcgettext@plt>
   11aa4:	mov	r4, r0
   11aa8:	ldr	r3, [pc, #2072]	; 122c8 <__assert_fail@plt+0x12dc>
   11aac:	ldr	r0, [r3]
   11ab0:	bl	14940 <__assert_fail@plt+0x3954>
   11ab4:	mov	r3, r0
   11ab8:	mov	r2, r4
   11abc:	mov	r1, #0
   11ac0:	mov	r0, r1
   11ac4:	bl	10e78 <error@plt>
   11ac8:	mov	r0, #1
   11acc:	bl	11390 <__assert_fail@plt+0x3a4>
   11ad0:	ldr	r3, [sp, #28]
   11ad4:	cmp	r3, #2
   11ad8:	subeq	r2, r0, #48	; 0x30
   11adc:	beq	11b18 <__assert_fail@plt+0xb2c>
   11ae0:	ldr	r3, [fp, #16]
   11ae4:	ldr	r2, [pc, #2024]	; 122d4 <__assert_fail@plt+0x12e8>
   11ae8:	cmp	r3, r2
   11aec:	bls	11b04 <__assert_fail@plt+0xb18>
   11af0:	mvn	r3, #0
   11af4:	str	r3, [fp, #16]
   11af8:	mov	r3, #1
   11afc:	str	r3, [sp, #28]
   11b00:	b	118ac <__assert_fail@plt+0x8c0>
   11b04:	sub	r1, r0, #48	; 0x30
   11b08:	mov	r2, #10
   11b0c:	mla	r2, r2, r3, r1
   11b10:	cmp	r3, r2
   11b14:	bhi	11af0 <__assert_fail@plt+0xb04>
   11b18:	str	r2, [fp, #16]
   11b1c:	mov	r3, #1
   11b20:	str	r3, [sp, #28]
   11b24:	b	118ac <__assert_fail@plt+0x8c0>
   11b28:	mov	r3, #0
   11b2c:	strb	r3, [fp]
   11b30:	mov	r3, #1
   11b34:	str	r3, [sp, #24]
   11b38:	b	118ac <__assert_fail@plt+0x8c0>
   11b3c:	mov	r3, #0
   11b40:	strb	r3, [fp]
   11b44:	mov	r3, #1
   11b48:	strb	r3, [fp, #2]
   11b4c:	ldr	r3, [pc, #1908]	; 122c8 <__assert_fail@plt+0x12dc>
   11b50:	ldr	r1, [r3]
   11b54:	cmp	r1, #0
   11b58:	beq	11ba0 <__assert_fail@plt+0xbb4>
   11b5c:	mov	r3, #1
   11b60:	str	r3, [sp, #8]
   11b64:	ldr	r3, [pc, #1900]	; 122d8 <__assert_fail@plt+0x12ec>
   11b68:	ldr	r3, [r3]
   11b6c:	str	r3, [sp, #4]
   11b70:	mov	r3, #4
   11b74:	str	r3, [sp]
   11b78:	add	r3, sl, #264	; 0x108
   11b7c:	add	r2, sl, #276	; 0x114
   11b80:	ldr	r0, [pc, #1876]	; 122dc <__assert_fail@plt+0x12f0>
   11b84:	bl	125dc <__assert_fail@plt+0x15f0>
   11b88:	add	r0, sl, r0, lsl #2
   11b8c:	ldr	r3, [r0, #264]	; 0x108
   11b90:	str	r3, [fp, #24]
   11b94:	mov	r3, #1
   11b98:	str	r3, [sp, #24]
   11b9c:	b	118ac <__assert_fail@plt+0x8c0>
   11ba0:	mov	r3, #0
   11ba4:	str	r3, [fp, #24]
   11ba8:	mov	r3, #1
   11bac:	str	r3, [sp, #24]
   11bb0:	b	118ac <__assert_fail@plt+0x8c0>
   11bb4:	ldr	r3, [pc, #1804]	; 122c8 <__assert_fail@plt+0x12dc>
   11bb8:	ldr	r1, [r3]
   11bbc:	cmp	r1, #0
   11bc0:	moveq	r3, #3
   11bc4:	streq	r3, [fp, #28]
   11bc8:	beq	118ac <__assert_fail@plt+0x8c0>
   11bcc:	mov	r3, #1
   11bd0:	str	r3, [sp, #8]
   11bd4:	ldr	r3, [pc, #1788]	; 122d8 <__assert_fail@plt+0x12ec>
   11bd8:	ldr	r3, [r3]
   11bdc:	str	r3, [sp, #4]
   11be0:	mov	r3, #4
   11be4:	str	r3, [sp]
   11be8:	ldr	r3, [sp, #32]
   11bec:	add	r2, sl, #308	; 0x134
   11bf0:	ldr	r0, [pc, #1768]	; 122e0 <__assert_fail@plt+0x12f4>
   11bf4:	bl	125dc <__assert_fail@plt+0x15f0>
   11bf8:	add	r0, sl, r0, lsl #2
   11bfc:	ldr	r3, [r0, #292]	; 0x124
   11c00:	str	r3, [fp, #28]
   11c04:	b	118ac <__assert_fail@plt+0x8c0>
   11c08:	mov	r3, #1
   11c0c:	strb	r3, [fp, #12]
   11c10:	b	118ac <__assert_fail@plt+0x8c0>
   11c14:	ldr	r1, [pc, #1736]	; 122e4 <__assert_fail@plt+0x12f8>
   11c18:	ldr	r3, [pc, #1704]	; 122c8 <__assert_fail@plt+0x12dc>
   11c1c:	ldr	r0, [r3]
   11c20:	bl	11120 <__assert_fail@plt+0x134>
   11c24:	str	r0, [fp, #20]
   11c28:	b	118ac <__assert_fail@plt+0x8c0>
   11c2c:	mov	r3, #0
   11c30:	strb	r3, [fp, #1]
   11c34:	mov	r3, #1
   11c38:	str	r3, [sp, #24]
   11c3c:	b	118ac <__assert_fail@plt+0x8c0>
   11c40:	mov	r0, #0
   11c44:	bl	11390 <__assert_fail@plt+0x3a4>
   11c48:	mov	r4, #0
   11c4c:	str	r4, [sp, #8]
   11c50:	ldr	r3, [pc, #1680]	; 122e8 <__assert_fail@plt+0x12fc>
   11c54:	str	r3, [sp, #4]
   11c58:	ldr	r3, [pc, #1676]	; 122ec <__assert_fail@plt+0x1300>
   11c5c:	str	r3, [sp]
   11c60:	ldr	r3, [pc, #1672]	; 122f0 <__assert_fail@plt+0x1304>
   11c64:	ldr	r3, [r3]
   11c68:	ldr	r2, [pc, #1668]	; 122f4 <__assert_fail@plt+0x1308>
   11c6c:	ldr	r1, [pc, #1668]	; 122f8 <__assert_fail@plt+0x130c>
   11c70:	ldr	r0, [pc, #1668]	; 122fc <__assert_fail@plt+0x1310>
   11c74:	ldr	r0, [r0]
   11c78:	bl	14e0c <__assert_fail@plt+0x3e20>
   11c7c:	mov	r0, r4
   11c80:	bl	10efc <exit@plt>
   11c84:	ldr	r3, [pc, #1576]	; 122b4 <__assert_fail@plt+0x12c8>
   11c88:	ldr	r3, [r3, #28]
   11c8c:	ldr	r2, [sp, #24]
   11c90:	cmp	r3, #0
   11c94:	moveq	r2, #0
   11c98:	andne	r2, r2, #1
   11c9c:	str	r2, [sp, #40]	; 0x28
   11ca0:	cmp	r2, #0
   11ca4:	bne	11ce8 <__assert_fail@plt+0xcfc>
   11ca8:	cmp	r3, #0
   11cac:	beq	11d10 <__assert_fail@plt+0xd24>
   11cb0:	ldr	r3, [pc, #1532]	; 122b4 <__assert_fail@plt+0x12c8>
   11cb4:	ldr	r3, [r3, #4]
   11cb8:	cmp	r3, #1
   11cbc:	beq	11d30 <__assert_fail@plt+0xd44>
   11cc0:	mov	r2, #5
   11cc4:	ldr	r1, [pc, #1588]	; 12300 <__assert_fail@plt+0x1314>
   11cc8:	mov	r0, #0
   11ccc:	bl	10e00 <dcgettext@plt>
   11cd0:	mov	r2, r0
   11cd4:	mov	r1, #0
   11cd8:	mov	r0, r1
   11cdc:	bl	10e78 <error@plt>
   11ce0:	mov	r0, #1
   11ce4:	bl	11390 <__assert_fail@plt+0x3a4>
   11ce8:	mov	r2, #5
   11cec:	ldr	r1, [pc, #1552]	; 12304 <__assert_fail@plt+0x1318>
   11cf0:	mov	r0, #0
   11cf4:	bl	10e00 <dcgettext@plt>
   11cf8:	mov	r2, r0
   11cfc:	mov	r1, #0
   11d00:	mov	r0, r1
   11d04:	bl	10e78 <error@plt>
   11d08:	mov	r0, #1
   11d0c:	bl	11390 <__assert_fail@plt+0x3a4>
   11d10:	ldr	r3, [pc, #1436]	; 122b4 <__assert_fail@plt+0x12c8>
   11d14:	ldr	r3, [r3, #4]
   11d18:	cmp	r3, #0
   11d1c:	bne	11d30 <__assert_fail@plt+0xd44>
   11d20:	ldr	r3, [pc, #1420]	; 122b4 <__assert_fail@plt+0x12c8>
   11d24:	ldrb	r3, [r3, #2]
   11d28:	cmp	r3, #0
   11d2c:	bne	11e34 <__assert_fail@plt+0xe48>
   11d30:	ldr	r3, [sp, #80]	; 0x50
   11d34:	str	r3, [sp, #44]	; 0x2c
   11d38:	ldr	r4, [sp, #84]	; 0x54
   11d3c:	ldr	r1, [pc, #1372]	; 122a0 <__assert_fail@plt+0x12b4>
   11d40:	mov	r0, r3
   11d44:	bl	10d70 <strcmp@plt>
   11d48:	cmp	r0, #0
   11d4c:	bne	11e5c <__assert_fail@plt+0xe70>
   11d50:	ldr	r1, [pc, #1352]	; 122a0 <__assert_fail@plt+0x12b4>
   11d54:	mov	r0, r4
   11d58:	bl	10d70 <strcmp@plt>
   11d5c:	cmp	r0, #0
   11d60:	beq	11d80 <__assert_fail@plt+0xd94>
   11d64:	ldr	r3, [pc, #1424]	; 122fc <__assert_fail@plt+0x1310>
   11d68:	ldr	r2, [r3]
   11d6c:	ldr	r1, [pc, #1428]	; 12308 <__assert_fail@plt+0x131c>
   11d70:	mov	r0, r4
   11d74:	bl	129d0 <__assert_fail@plt+0x19e4>
   11d78:	cmp	r0, #0
   11d7c:	beq	11ea4 <__assert_fail@plt+0xeb8>
   11d80:	mov	r1, #2
   11d84:	ldr	r3, [pc, #1408]	; 1230c <__assert_fail@plt+0x1320>
   11d88:	ldr	r0, [r3]
   11d8c:	bl	127e8 <__assert_fail@plt+0x17fc>
   11d90:	add	r0, sp, #52	; 0x34
   11d94:	bl	12bf4 <__assert_fail@plt+0x1c08>
   11d98:	add	r0, sp, #64	; 0x40
   11d9c:	bl	12bf4 <__assert_fail@plt+0x1c08>
   11da0:	ldr	r3, [pc, #1292]	; 122b4 <__assert_fail@plt+0x12c8>
   11da4:	ldrb	r3, [r3]
   11da8:	cmp	r3, #0
   11dac:	beq	11dcc <__assert_fail@plt+0xde0>
   11db0:	ldr	r3, [pc, #1276]	; 122b4 <__assert_fail@plt+0x12c8>
   11db4:	ldrb	r8, [r3, #1]
   11db8:	cmp	r8, #0
   11dbc:	beq	11dcc <__assert_fail@plt+0xde0>
   11dc0:	ldr	r3, [r3, #4]
   11dc4:	cmp	r3, #1
   11dc8:	beq	11fd0 <__assert_fail@plt+0xfe4>
   11dcc:	ldr	r2, [sp, #20]
   11dd0:	ldr	r3, [pc, #1332]	; 1230c <__assert_fail@plt+0x1320>
   11dd4:	ldr	r1, [r3]
   11dd8:	add	r0, sp, #64	; 0x40
   11ddc:	bl	12c08 <__assert_fail@plt+0x1c1c>
   11de0:	cmp	r0, #0
   11de4:	beq	12070 <__assert_fail@plt+0x1084>
   11de8:	add	r0, sp, #64	; 0x40
   11dec:	bl	112a0 <__assert_fail@plt+0x2b4>
   11df0:	str	r0, [sp, #28]
   11df4:	ldr	r2, [sp, #68]	; 0x44
   11df8:	sub	r2, r2, #1
   11dfc:	ldr	r3, [sp, #72]	; 0x48
   11e00:	sub	r3, r0, r3
   11e04:	sub	r3, r2, r3
   11e08:	str	r3, [sp, #24]
   11e0c:	mov	r3, #1
   11e10:	str	r3, [sp, #36]	; 0x24
   11e14:	mov	r6, #0
   11e18:	mov	r7, #0
   11e1c:	add	r3, sp, #64	; 0x40
   11e20:	str	r3, [sp, #32]
   11e24:	add	r5, sp, #52	; 0x34
   11e28:	ldr	fp, [pc, #1244]	; 1230c <__assert_fail@plt+0x1320>
   11e2c:	ldr	sl, [pc, #1152]	; 122b4 <__assert_fail@plt+0x12c8>
   11e30:	b	1211c <__assert_fail@plt+0x1130>
   11e34:	mov	r2, #5
   11e38:	ldr	r1, [pc, #1232]	; 12310 <__assert_fail@plt+0x1324>
   11e3c:	mov	r0, #0
   11e40:	bl	10e00 <dcgettext@plt>
   11e44:	mov	r2, r0
   11e48:	mov	r1, #0
   11e4c:	mov	r0, r1
   11e50:	bl	10e78 <error@plt>
   11e54:	mov	r0, #1
   11e58:	bl	11390 <__assert_fail@plt+0x3a4>
   11e5c:	ldr	r3, [pc, #1192]	; 1230c <__assert_fail@plt+0x1320>
   11e60:	ldr	r2, [r3]
   11e64:	ldr	r1, [pc, #1192]	; 12314 <__assert_fail@plt+0x1328>
   11e68:	ldr	r0, [sp, #44]	; 0x2c
   11e6c:	bl	129d0 <__assert_fail@plt+0x19e4>
   11e70:	cmp	r0, #0
   11e74:	bne	11d50 <__assert_fail@plt+0xd64>
   11e78:	bl	10f20 <__errno_location@plt>
   11e7c:	ldr	r4, [r0]
   11e80:	ldr	r2, [sp, #44]	; 0x2c
   11e84:	mov	r1, #3
   11e88:	mov	r0, #0
   11e8c:	bl	147d8 <__assert_fail@plt+0x37ec>
   11e90:	mov	r3, r0
   11e94:	ldr	r2, [pc, #1148]	; 12318 <__assert_fail@plt+0x132c>
   11e98:	mov	r1, r4
   11e9c:	mov	r0, #1
   11ea0:	bl	10e78 <error@plt>
   11ea4:	bl	10f20 <__errno_location@plt>
   11ea8:	ldr	r5, [r0]
   11eac:	mov	r2, r4
   11eb0:	mov	r1, #3
   11eb4:	mov	r0, #0
   11eb8:	bl	147d8 <__assert_fail@plt+0x37ec>
   11ebc:	mov	r3, r0
   11ec0:	ldr	r2, [pc, #1104]	; 12318 <__assert_fail@plt+0x132c>
   11ec4:	mov	r1, r5
   11ec8:	mov	r0, #1
   11ecc:	bl	10e78 <error@plt>
   11ed0:	ldr	r3, [sl, #28]
   11ed4:	cmp	r3, #0
   11ed8:	beq	11f24 <__assert_fail@plt+0xf38>
   11edc:	cmp	r3, #4
   11ee0:	cmpne	r3, #1
   11ee4:	beq	11f00 <__assert_fail@plt+0xf14>
   11ee8:	ldr	r2, [sp, #40]	; 0x28
   11eec:	cmp	r2, #0
   11ef0:	beq	11f24 <__assert_fail@plt+0xf38>
   11ef4:	sub	r3, r3, #2
   11ef8:	cmp	r3, #1
   11efc:	bhi	11f24 <__assert_fail@plt+0xf38>
   11f00:	ldr	r0, [fp]
   11f04:	ldr	r3, [r0, #20]
   11f08:	ldr	r2, [r0, #24]
   11f0c:	cmp	r3, r2
   11f10:	addcc	r2, r3, #1
   11f14:	strcc	r2, [r0, #20]
   11f18:	ldrbcc	r2, [sp, #20]
   11f1c:	strbcc	r2, [r3]
   11f20:	bcs	11fc4 <__assert_fail@plt+0xfd8>
   11f24:	ldr	r3, [fp]
   11f28:	ldr	r2, [r5, #4]
   11f2c:	mov	r1, #1
   11f30:	ldr	r0, [r5, #8]
   11f34:	bl	10ddc <fwrite_unlocked@plt>
   11f38:	str	r8, [sp, #40]	; 0x28
   11f3c:	str	r4, [sp, #36]	; 0x24
   11f40:	mov	r7, r6
   11f44:	mov	r3, r5
   11f48:	ldr	r5, [sp, #24]
   11f4c:	str	r3, [sp, #24]
   11f50:	ldr	r1, [r9]
   11f54:	ldr	r3, [r1]
   11f58:	tst	r3, #16
   11f5c:	bne	11ff0 <__assert_fail@plt+0x1004>
   11f60:	ldr	r2, [sp, #20]
   11f64:	mov	r0, r5
   11f68:	bl	12c08 <__assert_fail@plt+0x1c1c>
   11f6c:	cmp	r0, #0
   11f70:	beq	11ff0 <__assert_fail@plt+0x1004>
   11f74:	mov	r0, r5
   11f78:	bl	112a0 <__assert_fail@plt+0x2b4>
   11f7c:	mov	r6, r0
   11f80:	ldr	r4, [r5, #4]
   11f84:	sub	r4, r4, #1
   11f88:	ldr	r3, [r5, #8]
   11f8c:	sub	r3, r0, r3
   11f90:	sub	r4, r4, r3
   11f94:	cmp	r7, #0
   11f98:	beq	11ed0 <__assert_fail@plt+0xee4>
   11f9c:	ldr	r3, [sp, #36]	; 0x24
   11fa0:	mov	r2, r4
   11fa4:	mov	r1, r7
   11fa8:	bl	11238 <__assert_fail@plt+0x24c>
   11fac:	cmp	r0, #0
   11fb0:	bne	11ed0 <__assert_fail@plt+0xee4>
   11fb4:	ldr	r3, [sl, #28]
   11fb8:	cmp	r3, #0
   11fbc:	bne	11f24 <__assert_fail@plt+0xf38>
   11fc0:	b	11f50 <__assert_fail@plt+0xf64>
   11fc4:	ldr	r1, [sp, #20]
   11fc8:	bl	10f8c <__overflow@plt>
   11fcc:	b	11f24 <__assert_fail@plt+0xf38>
   11fd0:	mov	r7, #0
   11fd4:	add	r3, sp, #64	; 0x40
   11fd8:	str	r3, [sp, #24]
   11fdc:	add	r5, sp, #52	; 0x34
   11fe0:	ldr	r9, [pc, #804]	; 1230c <__assert_fail@plt+0x1320>
   11fe4:	ldr	fp, [pc, #784]	; 122fc <__assert_fail@plt+0x1310>
   11fe8:	ldr	sl, [pc, #708]	; 122b4 <__assert_fail@plt+0x12c8>
   11fec:	b	11f50 <__assert_fail@plt+0xf64>
   11ff0:	ldr	r3, [pc, #700]	; 122b4 <__assert_fail@plt+0x12c8>
   11ff4:	ldr	r3, [r3, #28]
   11ff8:	sub	r3, r3, #2
   11ffc:	bics	r3, r3, #2
   12000:	ldr	r3, [sp, #40]	; 0x28
   12004:	movne	r3, #0
   12008:	andeq	r3, r3, #1
   1200c:	cmp	r3, #0
   12010:	beq	12070 <__assert_fail@plt+0x1084>
   12014:	ldr	r3, [pc, #736]	; 122fc <__assert_fail@plt+0x1310>
   12018:	ldr	r0, [r3]
   1201c:	ldr	r3, [r0, #20]
   12020:	ldr	r2, [r0, #24]
   12024:	cmp	r3, r2
   12028:	addcc	r2, r3, #1
   1202c:	strcc	r2, [r0, #20]
   12030:	ldrbcc	r2, [sp, #20]
   12034:	strbcc	r2, [r3]
   12038:	bcc	12070 <__assert_fail@plt+0x1084>
   1203c:	ldr	r1, [sp, #20]
   12040:	bl	10f8c <__overflow@plt>
   12044:	b	12070 <__assert_fail@plt+0x1084>
   12048:	ldr	r3, [pc, #700]	; 1230c <__assert_fail@plt+0x1320>
   1204c:	ldr	r3, [r3]
   12050:	ldr	r3, [r3]
   12054:	tst	r3, #32
   12058:	bne	12200 <__assert_fail@plt+0x1214>
   1205c:	mov	r2, r6
   12060:	mov	r3, r7
   12064:	mov	r1, #0
   12068:	ldr	r0, [sp, #32]
   1206c:	bl	111a0 <__assert_fail@plt+0x1b4>
   12070:	ldr	r3, [pc, #660]	; 1230c <__assert_fail@plt+0x1320>
   12074:	ldr	r0, [r3]
   12078:	ldr	r3, [r0]
   1207c:	tst	r3, #32
   12080:	bne	12200 <__assert_fail@plt+0x1214>
   12084:	bl	1281c <__assert_fail@plt+0x1830>
   12088:	cmp	r0, #0
   1208c:	bne	12200 <__assert_fail@plt+0x1214>
   12090:	ldr	r0, [sp, #60]	; 0x3c
   12094:	bl	12928 <__assert_fail@plt+0x193c>
   12098:	ldr	r0, [sp, #72]	; 0x48
   1209c:	bl	12928 <__assert_fail@plt+0x193c>
   120a0:	mov	r0, #0
   120a4:	add	sp, sp, #92	; 0x5c
   120a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ac:	cmp	r7, #0
   120b0:	cmpeq	r6, #1
   120b4:	bne	12110 <__assert_fail@plt+0x1124>
   120b8:	cmp	r3, #1
   120bc:	beq	120d4 <__assert_fail@plt+0x10e8>
   120c0:	ldr	r2, [sp, #36]	; 0x24
   120c4:	cmp	r3, #2
   120c8:	orrne	r2, r2, #1
   120cc:	tst	r2, #255	; 0xff
   120d0:	bne	12110 <__assert_fail@plt+0x1124>
   120d4:	ldr	r3, [pc, #544]	; 122fc <__assert_fail@plt+0x1310>
   120d8:	ldr	r0, [r3]
   120dc:	ldr	r3, [r0, #20]
   120e0:	ldr	r2, [r0, #24]
   120e4:	cmp	r3, r2
   120e8:	addcc	r2, r3, #1
   120ec:	strcc	r2, [r0, #20]
   120f0:	ldrbcc	r2, [sp, #20]
   120f4:	strbcc	r2, [r3]
   120f8:	bcc	12110 <__assert_fail@plt+0x1124>
   120fc:	ldr	r1, [sp, #20]
   12100:	bl	10f8c <__overflow@plt>
   12104:	b	12110 <__assert_fail@plt+0x1124>
   12108:	cmp	r0, #0
   1210c:	bne	12264 <__assert_fail@plt+0x1278>
   12110:	ldrb	r3, [sl, #2]
   12114:	cmp	r3, #0
   12118:	bne	12234 <__assert_fail@plt+0x1248>
   1211c:	ldr	r1, [fp]
   12120:	ldr	r3, [r1]
   12124:	tst	r3, #16
   12128:	bne	1205c <__assert_fail@plt+0x1070>
   1212c:	ldr	r2, [sp, #20]
   12130:	mov	r0, r5
   12134:	bl	12c08 <__assert_fail@plt+0x1c1c>
   12138:	cmp	r0, #0
   1213c:	beq	12048 <__assert_fail@plt+0x105c>
   12140:	mov	r0, r5
   12144:	bl	112a0 <__assert_fail@plt+0x2b4>
   12148:	mov	r8, r0
   1214c:	ldr	r4, [r5, #4]
   12150:	sub	r4, r4, #1
   12154:	ldr	r3, [r5, #8]
   12158:	sub	r3, r0, r3
   1215c:	sub	r4, r4, r3
   12160:	ldr	r3, [sp, #24]
   12164:	mov	r2, r4
   12168:	ldr	r1, [sp, #28]
   1216c:	bl	11238 <__assert_fail@plt+0x24c>
   12170:	eor	r9, r0, #1
   12174:	uxtb	r9, r9
   12178:	uxtb	r2, r9
   1217c:	mov	r3, #0
   12180:	adds	r6, r6, r2
   12184:	adc	r7, r7, r3
   12188:	mvn	r2, #0
   1218c:	mvn	r3, #0
   12190:	cmp	r7, r3
   12194:	cmpeq	r6, r2
   12198:	mvneq	r6, #1
   1219c:	mvneq	r7, #0
   121a0:	ldr	r3, [sl, #24]
   121a4:	cmp	r3, #0
   121a8:	beq	12108 <__assert_fail@plt+0x111c>
   121ac:	cmp	r0, #0
   121b0:	beq	120ac <__assert_fail@plt+0x10c0>
   121b4:	orrs	r3, r6, r7
   121b8:	ldr	r3, [sp, #36]	; 0x24
   121bc:	ldr	r2, [sp, #40]	; 0x28
   121c0:	movne	r3, r2
   121c4:	str	r3, [sp, #36]	; 0x24
   121c8:	mov	r2, r6
   121cc:	mov	r3, r7
   121d0:	mov	r1, #0
   121d4:	ldr	r6, [sp, #32]
   121d8:	mov	r0, r6
   121dc:	bl	111a0 <__assert_fail@plt+0x1b4>
   121e0:	str	r4, [sp, #24]
   121e4:	str	r8, [sp, #28]
   121e8:	mov	r3, r5
   121ec:	mov	r5, r6
   121f0:	str	r3, [sp, #32]
   121f4:	mov	r6, #0
   121f8:	mov	r7, #0
   121fc:	b	1211c <__assert_fail@plt+0x1130>
   12200:	mov	r2, #5
   12204:	ldr	r1, [pc, #272]	; 1231c <__assert_fail@plt+0x1330>
   12208:	mov	r0, #0
   1220c:	bl	10e00 <dcgettext@plt>
   12210:	mov	r4, r0
   12214:	ldr	r1, [sp, #44]	; 0x2c
   12218:	mov	r0, #4
   1221c:	bl	1470c <__assert_fail@plt+0x3720>
   12220:	mov	r3, r0
   12224:	mov	r2, r4
   12228:	mov	r1, #0
   1222c:	mov	r0, #1
   12230:	bl	10e78 <error@plt>
   12234:	mov	r2, r6
   12238:	mov	r3, r7
   1223c:	mov	r1, r9
   12240:	ldr	r9, [sp, #32]
   12244:	mov	r0, r9
   12248:	bl	111a0 <__assert_fail@plt+0x1b4>
   1224c:	str	r4, [sp, #24]
   12250:	str	r8, [sp, #28]
   12254:	mov	r3, r5
   12258:	mov	r5, r9
   1225c:	str	r3, [sp, #32]
   12260:	b	1211c <__assert_fail@plt+0x1130>
   12264:	mov	r2, r6
   12268:	mov	r3, r7
   1226c:	mov	r1, #0
   12270:	ldr	r6, [sp, #32]
   12274:	mov	r0, r6
   12278:	bl	111a0 <__assert_fail@plt+0x1b4>
   1227c:	str	r4, [sp, #24]
   12280:	str	r8, [sp, #28]
   12284:	mov	r3, r5
   12288:	mov	r5, r6
   1228c:	str	r3, [sp, #32]
   12290:	mov	r6, #0
   12294:	mov	r7, #0
   12298:	b	1211c <__assert_fail@plt+0x1130>
   1229c:	andeq	r6, r1, ip, lsr #24
   122a0:	andeq	r6, r1, ip, lsr ip
   122a4:	strdeq	r6, [r1], -r0
   122a8:	andeq	r6, r1, r4, lsl #23
   122ac:	andeq	r6, r1, r0, asr #24
   122b0:	ldrdeq	r2, [r1], -r0
   122b4:	andeq	r8, r2, r0, ror r1
   122b8:	andeq	r8, r2, r0, asr r1
   122bc:	muleq	r1, r4, r3
   122c0:	andeq	r6, r1, r8, asr ip
   122c4:	muleq	r1, ip, ip
   122c8:	andeq	r8, r2, r8, ror #2
   122cc:	andeq	r6, r1, r0, ror ip
   122d0:	andeq	r6, r1, r0, ror #25
   122d4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   122d8:	andeq	r8, r2, r0, lsl #2
   122dc:	andeq	r6, r1, r4, lsl #25
   122e0:	muleq	r1, r4, ip
   122e4:	andeq	r6, r1, r0, asr #25
   122e8:	andeq	r6, r1, r4, lsl #26
   122ec:	andeq	r6, r1, r4, lsl sp
   122f0:	strdeq	r8, [r2], -ip
   122f4:	andeq	r6, r1, r0, lsl #23
   122f8:	andeq	r6, r1, ip, ror #9
   122fc:	andeq	r8, r2, r4, ror #2
   12300:	andeq	r6, r1, r8, asr sp
   12304:	andeq	r6, r1, r8, lsr #26
   12308:	ldrdeq	r6, [r1], -r0
   1230c:	andeq	r8, r2, r0, ror #2
   12310:	andeq	r6, r1, ip, lsl #27
   12314:	andeq	r6, r1, ip, asr #27
   12318:	andeq	r6, r1, r0, ror #9
   1231c:	ldrdeq	r6, [r1], -r4
   12320:	push	{r4, lr}
   12324:	mov	r0, #1
   12328:	bl	11390 <__assert_fail@plt+0x3a4>
   1232c:	pop	{r4, pc}
   12330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12334:	sub	sp, sp, #12
   12338:	str	r0, [sp, #4]
   1233c:	mov	r6, r1
   12340:	mov	fp, r2
   12344:	mov	r8, r3
   12348:	bl	10f08 <strlen@plt>
   1234c:	str	r0, [sp]
   12350:	ldr	r4, [r6]
   12354:	cmp	r4, #0
   12358:	beq	12400 <__assert_fail@plt+0x1414>
   1235c:	mov	r5, fp
   12360:	mov	sl, #0
   12364:	mvn	r9, #0
   12368:	mov	r7, sl
   1236c:	b	1238c <__assert_fail@plt+0x13a0>
   12370:	mov	r9, r7
   12374:	b	123f4 <__assert_fail@plt+0x1408>
   12378:	add	r7, r7, #1
   1237c:	ldr	r4, [r6, #4]!
   12380:	add	r5, r5, r8
   12384:	cmp	r4, #0
   12388:	beq	123ec <__assert_fail@plt+0x1400>
   1238c:	ldr	r2, [sp]
   12390:	ldr	r1, [sp, #4]
   12394:	mov	r0, r4
   12398:	bl	10fc8 <strncmp@plt>
   1239c:	cmp	r0, #0
   123a0:	bne	12378 <__assert_fail@plt+0x138c>
   123a4:	mov	r0, r4
   123a8:	bl	10f08 <strlen@plt>
   123ac:	ldr	r3, [sp]
   123b0:	cmp	r3, r0
   123b4:	beq	12370 <__assert_fail@plt+0x1384>
   123b8:	cmn	r9, #1
   123bc:	moveq	r9, r7
   123c0:	beq	12378 <__assert_fail@plt+0x138c>
   123c4:	cmp	fp, #0
   123c8:	moveq	sl, #1
   123cc:	beq	12378 <__assert_fail@plt+0x138c>
   123d0:	mov	r2, r8
   123d4:	mov	r1, r5
   123d8:	mla	r0, r8, r9, fp
   123dc:	bl	10de8 <memcmp@plt>
   123e0:	cmp	r0, #0
   123e4:	movne	sl, #1
   123e8:	b	12378 <__assert_fail@plt+0x138c>
   123ec:	cmp	sl, #0
   123f0:	mvnne	r9, #1
   123f4:	mov	r0, r9
   123f8:	add	sp, sp, #12
   123fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12400:	mvn	r9, #0
   12404:	b	123f4 <__assert_fail@plt+0x1408>
   12408:	push	{r4, r5, r6, lr}
   1240c:	mov	r6, r0
   12410:	ldr	r0, [r1]
   12414:	cmp	r0, #0
   12418:	beq	12454 <__assert_fail@plt+0x1468>
   1241c:	mov	r4, r1
   12420:	mov	r5, #0
   12424:	mov	r1, r6
   12428:	bl	10d70 <strcmp@plt>
   1242c:	cmp	r0, #0
   12430:	beq	1244c <__assert_fail@plt+0x1460>
   12434:	add	r5, r5, #1
   12438:	ldr	r0, [r4, #4]!
   1243c:	cmp	r0, #0
   12440:	bne	12424 <__assert_fail@plt+0x1438>
   12444:	mvn	r0, #0
   12448:	pop	{r4, r5, r6, pc}
   1244c:	mov	r0, r5
   12450:	pop	{r4, r5, r6, pc}
   12454:	mvn	r0, #0
   12458:	pop	{r4, r5, r6, pc}
   1245c:	push	{r4, r5, r6, lr}
   12460:	sub	sp, sp, #8
   12464:	mov	r5, r0
   12468:	mov	r4, r1
   1246c:	cmn	r2, #1
   12470:	mov	r2, #5
   12474:	ldreq	r1, [pc, #76]	; 124c8 <__assert_fail@plt+0x14dc>
   12478:	ldrne	r1, [pc, #76]	; 124cc <__assert_fail@plt+0x14e0>
   1247c:	mov	r0, #0
   12480:	bl	10e00 <dcgettext@plt>
   12484:	mov	r6, r0
   12488:	mov	r2, r4
   1248c:	mov	r1, #8
   12490:	mov	r0, #0
   12494:	bl	146a0 <__assert_fail@plt+0x36b4>
   12498:	mov	r4, r0
   1249c:	mov	r1, r5
   124a0:	mov	r0, #1
   124a4:	bl	14930 <__assert_fail@plt+0x3944>
   124a8:	str	r0, [sp]
   124ac:	mov	r3, r4
   124b0:	mov	r2, r6
   124b4:	mov	r1, #0
   124b8:	mov	r0, r1
   124bc:	bl	10e78 <error@plt>
   124c0:	add	sp, sp, #8
   124c4:	pop	{r4, r5, r6, pc}
   124c8:	andeq	r6, r1, r8, lsl #30
   124cc:	andeq	r6, r1, r4, lsr #30
   124d0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124d4:	mov	r7, r0
   124d8:	mov	r4, r1
   124dc:	mov	r8, r2
   124e0:	mov	r2, #5
   124e4:	ldr	r1, [pc, #224]	; 125cc <__assert_fail@plt+0x15e0>
   124e8:	mov	r0, #0
   124ec:	bl	10e00 <dcgettext@plt>
   124f0:	ldr	r3, [pc, #216]	; 125d0 <__assert_fail@plt+0x15e4>
   124f4:	ldr	r1, [r3]
   124f8:	bl	10d58 <fputs_unlocked@plt>
   124fc:	ldr	r5, [r7]
   12500:	cmp	r5, #0
   12504:	beq	12594 <__assert_fail@plt+0x15a8>
   12508:	mov	r9, #0
   1250c:	mov	r6, r9
   12510:	ldr	sl, [pc, #184]	; 125d0 <__assert_fail@plt+0x15e4>
   12514:	b	12550 <__assert_fail@plt+0x1564>
   12518:	ldr	r9, [sl]
   1251c:	mov	r0, r5
   12520:	bl	14940 <__assert_fail@plt+0x3954>
   12524:	mov	r3, r0
   12528:	ldr	r2, [pc, #164]	; 125d4 <__assert_fail@plt+0x15e8>
   1252c:	mov	r1, #1
   12530:	mov	r0, r9
   12534:	bl	10f5c <__fprintf_chk@plt>
   12538:	mov	r9, r4
   1253c:	add	r6, r6, #1
   12540:	ldr	r5, [r7, #4]!
   12544:	add	r4, r4, r8
   12548:	cmp	r5, #0
   1254c:	beq	12594 <__assert_fail@plt+0x15a8>
   12550:	cmp	r6, #0
   12554:	beq	12518 <__assert_fail@plt+0x152c>
   12558:	mov	r2, r8
   1255c:	mov	r1, r4
   12560:	mov	r0, r9
   12564:	bl	10de8 <memcmp@plt>
   12568:	cmp	r0, #0
   1256c:	bne	12518 <__assert_fail@plt+0x152c>
   12570:	ldr	fp, [sl]
   12574:	mov	r0, r5
   12578:	bl	14940 <__assert_fail@plt+0x3954>
   1257c:	mov	r3, r0
   12580:	ldr	r2, [pc, #80]	; 125d8 <__assert_fail@plt+0x15ec>
   12584:	mov	r1, #1
   12588:	mov	r0, fp
   1258c:	bl	10f5c <__fprintf_chk@plt>
   12590:	b	1253c <__assert_fail@plt+0x1550>
   12594:	ldr	r3, [pc, #52]	; 125d0 <__assert_fail@plt+0x15e4>
   12598:	ldr	r0, [r3]
   1259c:	ldr	r3, [r0, #20]
   125a0:	ldr	r2, [r0, #24]
   125a4:	cmp	r3, r2
   125a8:	bcs	125c0 <__assert_fail@plt+0x15d4>
   125ac:	add	r2, r3, #1
   125b0:	str	r2, [r0, #20]
   125b4:	mov	r2, #10
   125b8:	strb	r2, [r3]
   125bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c0:	mov	r1, #10
   125c4:	bl	10f8c <__overflow@plt>
   125c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125cc:	andeq	r6, r1, r4, asr #30
   125d0:	andeq	r8, r2, r8, asr r1
   125d4:	andeq	r6, r1, ip, asr pc
   125d8:	andeq	r6, r1, r4, ror #30
   125dc:	push	{r4, r5, r6, r7, r8, lr}
   125e0:	mov	r7, r0
   125e4:	mov	r5, r1
   125e8:	mov	r4, r2
   125ec:	mov	r6, r3
   125f0:	ldrb	r3, [sp, #32]
   125f4:	cmp	r3, #0
   125f8:	beq	12648 <__assert_fail@plt+0x165c>
   125fc:	ldr	r3, [sp, #24]
   12600:	mov	r2, r6
   12604:	mov	r1, r4
   12608:	mov	r0, r5
   1260c:	bl	12330 <__assert_fail@plt+0x1344>
   12610:	cmp	r0, #0
   12614:	popge	{r4, r5, r6, r7, r8, pc}
   12618:	mov	r2, r0
   1261c:	mov	r1, r5
   12620:	mov	r0, r7
   12624:	bl	1245c <__assert_fail@plt+0x1470>
   12628:	ldr	r2, [sp, #24]
   1262c:	mov	r1, r6
   12630:	mov	r0, r4
   12634:	bl	124d0 <__assert_fail@plt+0x14e4>
   12638:	ldr	r3, [sp, #28]
   1263c:	blx	r3
   12640:	mvn	r0, #0
   12644:	pop	{r4, r5, r6, r7, r8, pc}
   12648:	mov	r1, r2
   1264c:	mov	r0, r5
   12650:	bl	12408 <__assert_fail@plt+0x141c>
   12654:	b	12610 <__assert_fail@plt+0x1624>
   12658:	push	{r4, r5, r6, r7, r8, lr}
   1265c:	ldr	r6, [r1]
   12660:	cmp	r6, #0
   12664:	beq	126a8 <__assert_fail@plt+0x16bc>
   12668:	mov	r7, r3
   1266c:	mov	r8, r0
   12670:	mov	r4, r2
   12674:	mov	r5, r1
   12678:	mov	r2, r7
   1267c:	mov	r1, r4
   12680:	mov	r0, r8
   12684:	bl	10de8 <memcmp@plt>
   12688:	cmp	r0, #0
   1268c:	beq	126a0 <__assert_fail@plt+0x16b4>
   12690:	ldr	r6, [r5, #4]!
   12694:	add	r4, r4, r7
   12698:	cmp	r6, #0
   1269c:	bne	12678 <__assert_fail@plt+0x168c>
   126a0:	mov	r0, r6
   126a4:	pop	{r4, r5, r6, r7, r8, pc}
   126a8:	mov	r6, #0
   126ac:	b	126a0 <__assert_fail@plt+0x16b4>
   126b0:	ldr	r3, [pc, #4]	; 126bc <__assert_fail@plt+0x16d0>
   126b4:	str	r0, [r3]
   126b8:	bx	lr
   126bc:	muleq	r2, r0, r1
   126c0:	ldr	r3, [pc, #4]	; 126cc <__assert_fail@plt+0x16e0>
   126c4:	strb	r0, [r3, #4]
   126c8:	bx	lr
   126cc:	muleq	r2, r0, r1
   126d0:	push	{r4, r5, r6, lr}
   126d4:	sub	sp, sp, #8
   126d8:	ldr	r3, [pc, #200]	; 127a8 <__assert_fail@plt+0x17bc>
   126dc:	ldr	r0, [r3]
   126e0:	bl	15af4 <__assert_fail@plt+0x4b08>
   126e4:	cmp	r0, #0
   126e8:	beq	1270c <__assert_fail@plt+0x1720>
   126ec:	ldr	r3, [pc, #184]	; 127ac <__assert_fail@plt+0x17c0>
   126f0:	ldrb	r3, [r3, #4]
   126f4:	cmp	r3, #0
   126f8:	beq	12728 <__assert_fail@plt+0x173c>
   126fc:	bl	10f20 <__errno_location@plt>
   12700:	ldr	r3, [r0]
   12704:	cmp	r3, #32
   12708:	bne	12728 <__assert_fail@plt+0x173c>
   1270c:	ldr	r3, [pc, #156]	; 127b0 <__assert_fail@plt+0x17c4>
   12710:	ldr	r0, [r3]
   12714:	bl	15af4 <__assert_fail@plt+0x4b08>
   12718:	cmp	r0, #0
   1271c:	bne	1279c <__assert_fail@plt+0x17b0>
   12720:	add	sp, sp, #8
   12724:	pop	{r4, r5, r6, pc}
   12728:	mov	r2, #5
   1272c:	ldr	r1, [pc, #128]	; 127b4 <__assert_fail@plt+0x17c8>
   12730:	mov	r0, #0
   12734:	bl	10e00 <dcgettext@plt>
   12738:	mov	r4, r0
   1273c:	ldr	r3, [pc, #104]	; 127ac <__assert_fail@plt+0x17c0>
   12740:	ldr	r5, [r3]
   12744:	cmp	r5, #0
   12748:	beq	12780 <__assert_fail@plt+0x1794>
   1274c:	bl	10f20 <__errno_location@plt>
   12750:	ldr	r6, [r0]
   12754:	mov	r0, r5
   12758:	bl	147b8 <__assert_fail@plt+0x37cc>
   1275c:	str	r4, [sp]
   12760:	mov	r3, r0
   12764:	ldr	r2, [pc, #76]	; 127b8 <__assert_fail@plt+0x17cc>
   12768:	mov	r1, r6
   1276c:	mov	r0, #0
   12770:	bl	10e78 <error@plt>
   12774:	ldr	r3, [pc, #64]	; 127bc <__assert_fail@plt+0x17d0>
   12778:	ldr	r0, [r3]
   1277c:	bl	10dac <_exit@plt>
   12780:	bl	10f20 <__errno_location@plt>
   12784:	mov	r3, r4
   12788:	ldr	r2, [pc, #48]	; 127c0 <__assert_fail@plt+0x17d4>
   1278c:	ldr	r1, [r0]
   12790:	mov	r0, #0
   12794:	bl	10e78 <error@plt>
   12798:	b	12774 <__assert_fail@plt+0x1788>
   1279c:	ldr	r3, [pc, #24]	; 127bc <__assert_fail@plt+0x17d0>
   127a0:	ldr	r0, [r3]
   127a4:	bl	10dac <_exit@plt>
   127a8:	andeq	r8, r2, r4, ror #2
   127ac:	muleq	r2, r0, r1
   127b0:	andeq	r8, r2, r8, asr r1
   127b4:	andeq	r6, r1, ip, ror #30
   127b8:	ldrdeq	r6, [r1], -ip
   127bc:	andeq	r8, r2, r4, lsl #2
   127c0:	andeq	r6, r1, r0, ror #9
   127c4:	push	{r4, r5, lr}
   127c8:	sub	sp, sp, #20
   127cc:	ldr	r1, [sp, #40]	; 0x28
   127d0:	str	r1, [sp, #8]
   127d4:	ldrd	r4, [sp, #32]
   127d8:	strd	r4, [sp]
   127dc:	bl	10d88 <posix_fadvise64@plt>
   127e0:	add	sp, sp, #20
   127e4:	pop	{r4, r5, pc}
   127e8:	cmp	r0, #0
   127ec:	bxeq	lr
   127f0:	push	{r4, lr}
   127f4:	sub	sp, sp, #16
   127f8:	mov	r4, r1
   127fc:	bl	10f50 <fileno@plt>
   12800:	str	r4, [sp, #8]
   12804:	mov	r2, #0
   12808:	mov	r3, #0
   1280c:	strd	r2, [sp]
   12810:	bl	10d88 <posix_fadvise64@plt>
   12814:	add	sp, sp, #16
   12818:	pop	{r4, pc}
   1281c:	push	{r4, r5, r6, lr}
   12820:	sub	sp, sp, #8
   12824:	mov	r4, r0
   12828:	bl	10f50 <fileno@plt>
   1282c:	cmp	r0, #0
   12830:	blt	128a8 <__assert_fail@plt+0x18bc>
   12834:	mov	r0, r4
   12838:	bl	10eb4 <__freading@plt>
   1283c:	cmp	r0, #0
   12840:	beq	12874 <__assert_fail@plt+0x1888>
   12844:	mov	r0, r4
   12848:	bl	10f50 <fileno@plt>
   1284c:	mov	r3, #1
   12850:	str	r3, [sp]
   12854:	mov	r2, #0
   12858:	mov	r3, #0
   1285c:	bl	10e48 <lseek64@plt>
   12860:	mvn	r2, #0
   12864:	mvn	r3, #0
   12868:	cmp	r1, r3
   1286c:	cmpeq	r0, r2
   12870:	beq	128b4 <__assert_fail@plt+0x18c8>
   12874:	mov	r0, r4
   12878:	bl	128c4 <__assert_fail@plt+0x18d8>
   1287c:	cmp	r0, #0
   12880:	beq	128b4 <__assert_fail@plt+0x18c8>
   12884:	bl	10f20 <__errno_location@plt>
   12888:	mov	r5, r0
   1288c:	ldr	r6, [r0]
   12890:	mov	r0, r4
   12894:	bl	10f68 <fclose@plt>
   12898:	cmp	r6, #0
   1289c:	strne	r6, [r5]
   128a0:	mvnne	r0, #0
   128a4:	b	128bc <__assert_fail@plt+0x18d0>
   128a8:	mov	r0, r4
   128ac:	bl	10f68 <fclose@plt>
   128b0:	b	128bc <__assert_fail@plt+0x18d0>
   128b4:	mov	r0, r4
   128b8:	bl	10f68 <fclose@plt>
   128bc:	add	sp, sp, #8
   128c0:	pop	{r4, r5, r6, pc}
   128c4:	push	{r4, lr}
   128c8:	sub	sp, sp, #8
   128cc:	subs	r4, r0, #0
   128d0:	beq	128e4 <__assert_fail@plt+0x18f8>
   128d4:	mov	r0, r4
   128d8:	bl	10eb4 <__freading@plt>
   128dc:	cmp	r0, #0
   128e0:	bne	128f4 <__assert_fail@plt+0x1908>
   128e4:	mov	r0, r4
   128e8:	bl	10d94 <fflush@plt>
   128ec:	add	sp, sp, #8
   128f0:	pop	{r4, pc}
   128f4:	ldr	r3, [r4]
   128f8:	tst	r3, #256	; 0x100
   128fc:	bne	1290c <__assert_fail@plt+0x1920>
   12900:	mov	r0, r4
   12904:	bl	10d94 <fflush@plt>
   12908:	b	128ec <__assert_fail@plt+0x1900>
   1290c:	mov	r3, #1
   12910:	str	r3, [sp]
   12914:	mov	r2, #0
   12918:	mov	r3, #0
   1291c:	mov	r0, r4
   12920:	bl	12b4c <__assert_fail@plt+0x1b60>
   12924:	b	12900 <__assert_fail@plt+0x1914>
   12928:	push	{r4, r5, lr}
   1292c:	sub	sp, sp, #12
   12930:	mov	r5, r0
   12934:	bl	10f20 <__errno_location@plt>
   12938:	mov	r4, r0
   1293c:	ldr	r3, [r0]
   12940:	str	r3, [sp]
   12944:	str	r3, [sp, #4]
   12948:	mov	r3, #0
   1294c:	str	r3, [r0]
   12950:	mov	r0, r5
   12954:	bl	10da0 <free@plt>
   12958:	ldr	r3, [r4]
   1295c:	cmp	r3, #0
   12960:	moveq	r3, #4
   12964:	movne	r3, #0
   12968:	add	r2, sp, #8
   1296c:	add	r3, r2, r3
   12970:	ldr	r3, [r3, #-8]
   12974:	str	r3, [r4]
   12978:	add	sp, sp, #12
   1297c:	pop	{r4, r5, pc}
   12980:	push	{r4, lr}
   12984:	mov	r4, r0
   12988:	mov	r1, #0
   1298c:	ldr	r0, [pc, #56]	; 129cc <__assert_fail@plt+0x19e0>
   12990:	bl	10e84 <open64@plt>
   12994:	cmp	r4, r0
   12998:	beq	129bc <__assert_fail@plt+0x19d0>
   1299c:	cmp	r0, #0
   129a0:	blt	129c4 <__assert_fail@plt+0x19d8>
   129a4:	bl	10fe0 <close@plt>
   129a8:	bl	10f20 <__errno_location@plt>
   129ac:	mov	r3, #9
   129b0:	str	r3, [r0]
   129b4:	mov	r0, #0
   129b8:	pop	{r4, pc}
   129bc:	mov	r0, #1
   129c0:	pop	{r4, pc}
   129c4:	mov	r0, #0
   129c8:	pop	{r4, pc}
   129cc:	andeq	r6, r1, r8, ror pc
   129d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129d4:	mov	r8, r0
   129d8:	mov	r9, r1
   129dc:	mov	r6, r2
   129e0:	mov	r0, r2
   129e4:	bl	10f50 <fileno@plt>
   129e8:	cmp	r0, #1
   129ec:	beq	12ab4 <__assert_fail@plt+0x1ac8>
   129f0:	cmp	r0, #2
   129f4:	beq	12aac <__assert_fail@plt+0x1ac0>
   129f8:	cmp	r0, #0
   129fc:	beq	12ac0 <__assert_fail@plt+0x1ad4>
   12a00:	mov	r1, #2
   12a04:	mov	r0, r1
   12a08:	bl	10e0c <dup2@plt>
   12a0c:	subs	r4, r0, #2
   12a10:	movne	r4, #1
   12a14:	mov	r1, #1
   12a18:	mov	r0, r1
   12a1c:	bl	10e0c <dup2@plt>
   12a20:	subs	r7, r0, #1
   12a24:	movne	r7, #1
   12a28:	mov	r1, #0
   12a2c:	mov	r0, r1
   12a30:	bl	10e0c <dup2@plt>
   12a34:	adds	r5, r0, #0
   12a38:	movne	r5, #1
   12a3c:	cmp	r5, #0
   12a40:	bne	12ad0 <__assert_fail@plt+0x1ae4>
   12a44:	cmp	r7, #0
   12a48:	bne	12ae8 <__assert_fail@plt+0x1afc>
   12a4c:	cmp	r4, #0
   12a50:	beq	12a64 <__assert_fail@plt+0x1a78>
   12a54:	mov	r0, #2
   12a58:	bl	12980 <__assert_fail@plt+0x1994>
   12a5c:	cmp	r0, #0
   12a60:	beq	12b30 <__assert_fail@plt+0x1b44>
   12a64:	mov	r2, r6
   12a68:	mov	r1, r9
   12a6c:	mov	r0, r8
   12a70:	bl	10ed8 <freopen64@plt>
   12a74:	mov	r6, r0
   12a78:	bl	10f20 <__errno_location@plt>
   12a7c:	mov	r8, r0
   12a80:	ldr	r9, [r0]
   12a84:	cmp	r4, #0
   12a88:	bne	12b40 <__assert_fail@plt+0x1b54>
   12a8c:	cmp	r7, #0
   12a90:	bne	12b10 <__assert_fail@plt+0x1b24>
   12a94:	cmp	r5, #0
   12a98:	bne	12b24 <__assert_fail@plt+0x1b38>
   12a9c:	cmp	r6, #0
   12aa0:	streq	r9, [r8]
   12aa4:	mov	r0, r6
   12aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12aac:	mov	r4, #0
   12ab0:	b	12a14 <__assert_fail@plt+0x1a28>
   12ab4:	mov	r4, #0
   12ab8:	mov	r7, r4
   12abc:	b	12a28 <__assert_fail@plt+0x1a3c>
   12ac0:	mov	r4, #0
   12ac4:	mov	r7, r4
   12ac8:	mov	r5, r4
   12acc:	b	12a3c <__assert_fail@plt+0x1a50>
   12ad0:	mov	r0, #0
   12ad4:	bl	12980 <__assert_fail@plt+0x1994>
   12ad8:	cmp	r0, #0
   12adc:	bne	12a44 <__assert_fail@plt+0x1a58>
   12ae0:	mov	r6, #0
   12ae4:	b	12a78 <__assert_fail@plt+0x1a8c>
   12ae8:	mov	r0, #1
   12aec:	bl	12980 <__assert_fail@plt+0x1994>
   12af0:	cmp	r0, #0
   12af4:	bne	12a4c <__assert_fail@plt+0x1a60>
   12af8:	bl	10f20 <__errno_location@plt>
   12afc:	mov	r8, r0
   12b00:	ldr	r9, [r0]
   12b04:	cmp	r4, #0
   12b08:	moveq	r6, #0
   12b0c:	bne	12b1c <__assert_fail@plt+0x1b30>
   12b10:	mov	r0, #1
   12b14:	bl	10fe0 <close@plt>
   12b18:	b	12a94 <__assert_fail@plt+0x1aa8>
   12b1c:	mov	r6, #0
   12b20:	b	12b40 <__assert_fail@plt+0x1b54>
   12b24:	mov	r0, #0
   12b28:	bl	10fe0 <close@plt>
   12b2c:	b	12a9c <__assert_fail@plt+0x1ab0>
   12b30:	bl	10f20 <__errno_location@plt>
   12b34:	mov	r8, r0
   12b38:	ldr	r9, [r0]
   12b3c:	mov	r6, #0
   12b40:	mov	r0, #2
   12b44:	bl	10fe0 <close@plt>
   12b48:	b	12a8c <__assert_fail@plt+0x1aa0>
   12b4c:	push	{r4, r5, r6, r7, lr}
   12b50:	sub	sp, sp, #12
   12b54:	mov	r4, r0
   12b58:	mov	r6, r2
   12b5c:	mov	r7, r3
   12b60:	ldr	r5, [sp, #32]
   12b64:	ldr	r2, [r0, #8]
   12b68:	ldr	r3, [r0, #4]
   12b6c:	cmp	r2, r3
   12b70:	beq	12b90 <__assert_fail@plt+0x1ba4>
   12b74:	str	r5, [sp]
   12b78:	mov	r2, r6
   12b7c:	mov	r3, r7
   12b80:	mov	r0, r4
   12b84:	bl	10f74 <fseeko64@plt>
   12b88:	add	sp, sp, #12
   12b8c:	pop	{r4, r5, r6, r7, pc}
   12b90:	ldr	r2, [r0, #20]
   12b94:	ldr	r3, [r0, #16]
   12b98:	cmp	r2, r3
   12b9c:	bne	12b74 <__assert_fail@plt+0x1b88>
   12ba0:	ldr	r3, [r0, #36]	; 0x24
   12ba4:	cmp	r3, #0
   12ba8:	bne	12b74 <__assert_fail@plt+0x1b88>
   12bac:	bl	10f50 <fileno@plt>
   12bb0:	str	r5, [sp]
   12bb4:	mov	r2, r6
   12bb8:	mov	r3, r7
   12bbc:	bl	10e48 <lseek64@plt>
   12bc0:	mvn	r2, #0
   12bc4:	mvn	r3, #0
   12bc8:	cmp	r1, r3
   12bcc:	cmpeq	r0, r2
   12bd0:	beq	12bec <__assert_fail@plt+0x1c00>
   12bd4:	ldr	r3, [r4]
   12bd8:	bic	r3, r3, #16
   12bdc:	str	r3, [r4]
   12be0:	strd	r0, [r4, #80]	; 0x50
   12be4:	mov	r0, #0
   12be8:	b	12b88 <__assert_fail@plt+0x1b9c>
   12bec:	mvn	r0, #0
   12bf0:	b	12b88 <__assert_fail@plt+0x1b9c>
   12bf4:	mov	r3, #0
   12bf8:	str	r3, [r0]
   12bfc:	str	r3, [r0, #4]
   12c00:	str	r3, [r0, #8]
   12c04:	bx	lr
   12c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c0c:	sub	sp, sp, #12
   12c10:	ldr	r9, [r0, #8]
   12c14:	ldr	r8, [r0]
   12c18:	add	r8, r9, r8
   12c1c:	ldr	r3, [r1]
   12c20:	tst	r3, #16
   12c24:	bne	12d00 <__assert_fail@plt+0x1d14>
   12c28:	mov	r7, r2
   12c2c:	mov	r6, r1
   12c30:	mov	sl, r0
   12c34:	mov	r5, r9
   12c38:	mov	fp, #1
   12c3c:	b	12c6c <__assert_fail@plt+0x1c80>
   12c40:	mov	r0, r6
   12c44:	bl	10f80 <__uflow@plt>
   12c48:	mov	r4, r0
   12c4c:	b	12c88 <__assert_fail@plt+0x1c9c>
   12c50:	cmp	r5, r8
   12c54:	movne	r3, r5
   12c58:	beq	12cb8 <__assert_fail@plt+0x1ccc>
   12c5c:	add	r5, r3, #1
   12c60:	strb	r4, [r3]
   12c64:	cmp	r4, r7
   12c68:	beq	12cec <__assert_fail@plt+0x1d00>
   12c6c:	ldr	r3, [r6, #4]
   12c70:	ldr	r2, [r6, #8]
   12c74:	cmp	r3, r2
   12c78:	bcs	12c40 <__assert_fail@plt+0x1c54>
   12c7c:	add	r2, r3, #1
   12c80:	str	r2, [r6, #4]
   12c84:	ldrb	r4, [r3]
   12c88:	cmn	r4, #1
   12c8c:	bne	12c50 <__assert_fail@plt+0x1c64>
   12c90:	cmp	r9, r5
   12c94:	beq	12d08 <__assert_fail@plt+0x1d1c>
   12c98:	ldr	r3, [r6]
   12c9c:	tst	r3, #32
   12ca0:	bne	12d10 <__assert_fail@plt+0x1d24>
   12ca4:	ldrb	r3, [r5, #-1]
   12ca8:	cmp	r3, r7
   12cac:	beq	12cec <__assert_fail@plt+0x1d00>
   12cb0:	mov	r4, r7
   12cb4:	b	12c50 <__assert_fail@plt+0x1c64>
   12cb8:	ldr	r5, [sl]
   12cbc:	str	fp, [sp]
   12cc0:	mvn	r3, #0
   12cc4:	mov	r2, fp
   12cc8:	mov	r1, sl
   12ccc:	mov	r0, r9
   12cd0:	bl	15084 <__assert_fail@plt+0x4098>
   12cd4:	mov	r9, r0
   12cd8:	add	r3, r0, r5
   12cdc:	str	r0, [sl, #8]
   12ce0:	ldr	r8, [sl]
   12ce4:	add	r8, r0, r8
   12ce8:	b	12c5c <__assert_fail@plt+0x1c70>
   12cec:	sub	r5, r5, r9
   12cf0:	str	r5, [sl, #4]
   12cf4:	mov	r0, sl
   12cf8:	add	sp, sp, #12
   12cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d00:	mov	r0, #0
   12d04:	b	12cf8 <__assert_fail@plt+0x1d0c>
   12d08:	mov	r0, #0
   12d0c:	b	12cf8 <__assert_fail@plt+0x1d0c>
   12d10:	mov	r0, #0
   12d14:	b	12cf8 <__assert_fail@plt+0x1d0c>
   12d18:	push	{r4, lr}
   12d1c:	mov	r2, #10
   12d20:	bl	12c08 <__assert_fail@plt+0x1c1c>
   12d24:	pop	{r4, pc}
   12d28:	push	{r4, lr}
   12d2c:	ldr	r0, [r0, #8]
   12d30:	bl	12928 <__assert_fail@plt+0x193c>
   12d34:	pop	{r4, pc}
   12d38:	push	{r4, r5, r6, lr}
   12d3c:	subs	r6, r2, #0
   12d40:	beq	12d84 <__assert_fail@plt+0x1d98>
   12d44:	mov	r4, r1
   12d48:	mov	r5, r0
   12d4c:	bl	10ec0 <__ctype_toupper_loc@plt>
   12d50:	ldr	ip, [r0]
   12d54:	mov	r3, r5
   12d58:	sub	r1, r4, #1
   12d5c:	add	lr, r5, r6
   12d60:	ldrb	r0, [r3], #1
   12d64:	ldrb	r2, [r1, #1]!
   12d68:	ldr	r0, [ip, r0, lsl #2]
   12d6c:	ldr	r2, [ip, r2, lsl #2]
   12d70:	subs	r0, r0, r2
   12d74:	popne	{r4, r5, r6, pc}
   12d78:	cmp	r3, lr
   12d7c:	bne	12d60 <__assert_fail@plt+0x1d74>
   12d80:	pop	{r4, r5, r6, pc}
   12d84:	mov	r0, #0
   12d88:	pop	{r4, r5, r6, pc}
   12d8c:	push	{lr}		; (str lr, [sp, #-4]!)
   12d90:	sub	sp, sp, #12
   12d94:	ldr	r0, [pc, #76]	; 12de8 <__assert_fail@plt+0x1dfc>
   12d98:	bl	10e90 <getenv@plt>
   12d9c:	cmp	r0, #0
   12da0:	beq	12de0 <__assert_fail@plt+0x1df4>
   12da4:	ldrb	r3, [r0]
   12da8:	cmp	r3, #0
   12dac:	ldreq	r0, [pc, #56]	; 12dec <__assert_fail@plt+0x1e00>
   12db0:	bne	12dbc <__assert_fail@plt+0x1dd0>
   12db4:	add	sp, sp, #12
   12db8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dbc:	mov	r2, #10
   12dc0:	add	r1, sp, #4
   12dc4:	bl	10d7c <strtol@plt>
   12dc8:	ldr	r3, [sp, #4]
   12dcc:	ldrb	r2, [r3]
   12dd0:	ldr	r3, [pc, #20]	; 12dec <__assert_fail@plt+0x1e00>
   12dd4:	cmp	r2, #0
   12dd8:	movne	r0, r3
   12ddc:	b	12db4 <__assert_fail@plt+0x1dc8>
   12de0:	ldr	r0, [pc, #4]	; 12dec <__assert_fail@plt+0x1e00>
   12de4:	b	12db4 <__assert_fail@plt+0x1dc8>
   12de8:	andeq	r6, r1, r4, lsl #31
   12dec:	andeq	r1, r3, r9, rrx
   12df0:	push	{r4, r5, r6, lr}
   12df4:	subs	r4, r0, #0
   12df8:	beq	12e70 <__assert_fail@plt+0x1e84>
   12dfc:	mov	r1, #47	; 0x2f
   12e00:	mov	r0, r4
   12e04:	bl	10fa4 <strrchr@plt>
   12e08:	cmp	r0, #0
   12e0c:	addne	r5, r0, #1
   12e10:	moveq	r5, r4
   12e14:	sub	r3, r5, r4
   12e18:	cmp	r3, #6
   12e1c:	ble	12e5c <__assert_fail@plt+0x1e70>
   12e20:	mov	r2, #7
   12e24:	ldr	r1, [pc, #96]	; 12e8c <__assert_fail@plt+0x1ea0>
   12e28:	sub	r0, r5, #7
   12e2c:	bl	10fc8 <strncmp@plt>
   12e30:	cmp	r0, #0
   12e34:	bne	12e5c <__assert_fail@plt+0x1e70>
   12e38:	mov	r2, #3
   12e3c:	ldr	r1, [pc, #76]	; 12e90 <__assert_fail@plt+0x1ea4>
   12e40:	mov	r0, r5
   12e44:	bl	10fc8 <strncmp@plt>
   12e48:	cmp	r0, #0
   12e4c:	addeq	r4, r5, #3
   12e50:	ldreq	r3, [pc, #60]	; 12e94 <__assert_fail@plt+0x1ea8>
   12e54:	streq	r4, [r3]
   12e58:	movne	r4, r5
   12e5c:	ldr	r3, [pc, #52]	; 12e98 <__assert_fail@plt+0x1eac>
   12e60:	str	r4, [r3]
   12e64:	ldr	r3, [pc, #48]	; 12e9c <__assert_fail@plt+0x1eb0>
   12e68:	str	r4, [r3]
   12e6c:	pop	{r4, r5, r6, pc}
   12e70:	ldr	r3, [pc, #40]	; 12ea0 <__assert_fail@plt+0x1eb4>
   12e74:	ldr	r3, [r3]
   12e78:	mov	r2, #55	; 0x37
   12e7c:	mov	r1, #1
   12e80:	ldr	r0, [pc, #28]	; 12ea4 <__assert_fail@plt+0x1eb8>
   12e84:	bl	10e3c <fwrite@plt>
   12e88:	bl	10fd4 <abort@plt>
   12e8c:	andeq	r6, r1, ip, asr #31
   12e90:	ldrdeq	r6, [r1], -r4
   12e94:	andeq	r8, r2, r8, asr #2
   12e98:	muleq	r2, r8, r1
   12e9c:	andeq	r8, r2, ip, asr #2
   12ea0:	andeq	r8, r2, r8, asr r1
   12ea4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12ea8:	push	{r4, r5, r6, lr}
   12eac:	mov	r5, r0
   12eb0:	mov	r4, r1
   12eb4:	mov	r2, #48	; 0x30
   12eb8:	mov	r1, #0
   12ebc:	bl	10f38 <memset@plt>
   12ec0:	cmp	r4, #10
   12ec4:	beq	12ed4 <__assert_fail@plt+0x1ee8>
   12ec8:	str	r4, [r5]
   12ecc:	mov	r0, r5
   12ed0:	pop	{r4, r5, r6, pc}
   12ed4:	bl	10fd4 <abort@plt>
   12ed8:	push	{r4, r5, r6, lr}
   12edc:	mov	r4, r0
   12ee0:	mov	r5, r1
   12ee4:	mov	r2, #5
   12ee8:	mov	r1, r0
   12eec:	mov	r0, #0
   12ef0:	bl	10e00 <dcgettext@plt>
   12ef4:	cmp	r4, r0
   12ef8:	popne	{r4, r5, r6, pc}
   12efc:	bl	15b6c <__assert_fail@plt+0x4b80>
   12f00:	ldrb	r3, [r0]
   12f04:	bic	r3, r3, #32
   12f08:	cmp	r3, #85	; 0x55
   12f0c:	beq	12f88 <__assert_fail@plt+0x1f9c>
   12f10:	cmp	r3, #71	; 0x47
   12f14:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f18:	ldrb	r3, [r0, #1]
   12f1c:	bic	r3, r3, #32
   12f20:	cmp	r3, #66	; 0x42
   12f24:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f28:	ldrb	r3, [r0, #2]
   12f2c:	cmp	r3, #49	; 0x31
   12f30:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f34:	ldrb	r3, [r0, #3]
   12f38:	cmp	r3, #56	; 0x38
   12f3c:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f40:	ldrb	r3, [r0, #4]
   12f44:	cmp	r3, #48	; 0x30
   12f48:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f4c:	ldrb	r3, [r0, #5]
   12f50:	cmp	r3, #51	; 0x33
   12f54:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f58:	ldrb	r3, [r0, #6]
   12f5c:	cmp	r3, #48	; 0x30
   12f60:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f64:	ldrb	r3, [r0, #7]
   12f68:	cmp	r3, #0
   12f6c:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f70:	ldrb	r2, [r4]
   12f74:	ldr	r3, [pc, #124]	; 12ff8 <__assert_fail@plt+0x200c>
   12f78:	ldr	r0, [pc, #124]	; 12ffc <__assert_fail@plt+0x2010>
   12f7c:	cmp	r2, #96	; 0x60
   12f80:	movne	r0, r3
   12f84:	pop	{r4, r5, r6, pc}
   12f88:	ldrb	r3, [r0, #1]
   12f8c:	bic	r3, r3, #32
   12f90:	cmp	r3, #84	; 0x54
   12f94:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12f98:	ldrb	r3, [r0, #2]
   12f9c:	bic	r3, r3, #32
   12fa0:	cmp	r3, #70	; 0x46
   12fa4:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12fa8:	ldrb	r3, [r0, #3]
   12fac:	cmp	r3, #45	; 0x2d
   12fb0:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12fb4:	ldrb	r3, [r0, #4]
   12fb8:	cmp	r3, #56	; 0x38
   12fbc:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12fc0:	ldrb	r3, [r0, #5]
   12fc4:	cmp	r3, #0
   12fc8:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   12fcc:	ldrb	r2, [r4]
   12fd0:	ldr	r3, [pc, #40]	; 13000 <__assert_fail@plt+0x2014>
   12fd4:	ldr	r0, [pc, #40]	; 13004 <__assert_fail@plt+0x2018>
   12fd8:	cmp	r2, #96	; 0x60
   12fdc:	movne	r0, r3
   12fe0:	pop	{r4, r5, r6, pc}
   12fe4:	ldr	r3, [pc, #28]	; 13008 <__assert_fail@plt+0x201c>
   12fe8:	ldr	r0, [pc, #28]	; 1300c <__assert_fail@plt+0x2020>
   12fec:	cmp	r5, #9
   12ff0:	movne	r0, r3
   12ff4:	pop	{r4, r5, r6, pc}
   12ff8:	andeq	r7, r1, r0, lsr r0
   12ffc:	andeq	r7, r1, ip, lsr r0
   13000:	andeq	r7, r1, ip, lsr #32
   13004:	andeq	r7, r1, r0, asr #32
   13008:	andeq	r7, r1, r4, lsr r0
   1300c:	andeq	r7, r1, r8, lsr r0
   13010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13014:	sub	sp, sp, #116	; 0x74
   13018:	str	r0, [sp, #36]	; 0x24
   1301c:	mov	sl, r1
   13020:	str	r2, [sp, #52]	; 0x34
   13024:	str	r3, [sp, #28]
   13028:	ldr	r8, [sp, #152]	; 0x98
   1302c:	bl	10e54 <__ctype_get_mb_cur_max@plt>
   13030:	str	r0, [sp, #84]	; 0x54
   13034:	ldr	r3, [sp, #156]	; 0x9c
   13038:	lsr	r3, r3, #1
   1303c:	and	r3, r3, #1
   13040:	str	r3, [sp, #32]
   13044:	mov	r3, #1
   13048:	str	r3, [sp, #40]	; 0x28
   1304c:	mov	r3, #0
   13050:	str	r3, [sp, #80]	; 0x50
   13054:	str	r3, [sp, #44]	; 0x2c
   13058:	str	r3, [sp, #48]	; 0x30
   1305c:	str	r3, [sp, #60]	; 0x3c
   13060:	str	r3, [sp, #72]	; 0x48
   13064:	str	r3, [sp, #76]	; 0x4c
   13068:	mov	r7, sl
   1306c:	mov	sl, r8
   13070:	cmp	sl, #10
   13074:	ldrls	pc, [pc, sl, lsl #2]
   13078:	b	13230 <__assert_fail@plt+0x2244>
   1307c:	andeq	r3, r1, r0, ror #1
   13080:	strheq	r3, [r1], -r0
   13084:	andeq	r3, r1, ip, lsl #4
   13088:	andeq	r3, r1, r8, lsr #1
   1308c:	andeq	r3, r1, r0, asr #3
   13090:	strdeq	r3, [r1], -r0
   13094:	andeq	r4, r1, ip, asr r1
   13098:	andeq	r3, r1, r4, lsr r2
   1309c:	andeq	r3, r1, ip, lsr #2
   130a0:	andeq	r3, r1, ip, lsr #2
   130a4:	andeq	r3, r1, ip, lsr #2
   130a8:	mov	r3, #1
   130ac:	str	r3, [sp, #48]	; 0x30
   130b0:	mov	r3, #1
   130b4:	str	r3, [sp, #32]
   130b8:	str	r3, [sp, #60]	; 0x3c
   130bc:	ldr	r3, [pc, #4068]	; 140a8 <__assert_fail@plt+0x30bc>
   130c0:	str	r3, [sp, #72]	; 0x48
   130c4:	mov	fp, #0
   130c8:	mov	sl, #2
   130cc:	mov	r6, #0
   130d0:	ldr	r3, [sp, #48]	; 0x30
   130d4:	eor	r3, r3, #1
   130d8:	str	r3, [sp, #68]	; 0x44
   130dc:	b	139c4 <__assert_fail@plt+0x29d8>
   130e0:	mov	r3, #0
   130e4:	str	r3, [sp, #32]
   130e8:	mov	fp, r3
   130ec:	b	130cc <__assert_fail@plt+0x20e0>
   130f0:	ldr	r3, [sp, #32]
   130f4:	cmp	r3, #0
   130f8:	bne	1324c <__assert_fail@plt+0x2260>
   130fc:	cmp	r7, #0
   13100:	beq	1326c <__assert_fail@plt+0x2280>
   13104:	ldr	r3, [sp, #36]	; 0x24
   13108:	mov	r2, #34	; 0x22
   1310c:	strb	r2, [r3]
   13110:	mov	r3, #1
   13114:	str	r3, [sp, #48]	; 0x30
   13118:	str	r3, [sp, #60]	; 0x3c
   1311c:	ldr	r3, [pc, #3980]	; 140b0 <__assert_fail@plt+0x30c4>
   13120:	str	r3, [sp, #72]	; 0x48
   13124:	mov	fp, #1
   13128:	b	130cc <__assert_fail@plt+0x20e0>
   1312c:	cmp	sl, #10
   13130:	beq	13154 <__assert_fail@plt+0x2168>
   13134:	mov	r1, sl
   13138:	ldr	r0, [pc, #3948]	; 140ac <__assert_fail@plt+0x30c0>
   1313c:	bl	12ed8 <__assert_fail@plt+0x1eec>
   13140:	str	r0, [sp, #164]	; 0xa4
   13144:	mov	r1, sl
   13148:	ldr	r0, [pc, #3928]	; 140a8 <__assert_fail@plt+0x30bc>
   1314c:	bl	12ed8 <__assert_fail@plt+0x1eec>
   13150:	str	r0, [sp, #168]	; 0xa8
   13154:	ldr	r3, [sp, #32]
   13158:	cmp	r3, #0
   1315c:	movne	fp, #0
   13160:	bne	13198 <__assert_fail@plt+0x21ac>
   13164:	ldr	r3, [sp, #164]	; 0xa4
   13168:	ldrb	r3, [r3]
   1316c:	cmp	r3, #0
   13170:	beq	131b8 <__assert_fail@plt+0x21cc>
   13174:	ldr	r2, [sp, #164]	; 0xa4
   13178:	mov	fp, #0
   1317c:	ldr	r1, [sp, #36]	; 0x24
   13180:	cmp	r7, fp
   13184:	strbhi	r3, [r1, fp]
   13188:	add	fp, fp, #1
   1318c:	ldrb	r3, [r2, #1]!
   13190:	cmp	r3, #0
   13194:	bne	13180 <__assert_fail@plt+0x2194>
   13198:	ldr	r0, [sp, #168]	; 0xa8
   1319c:	bl	10f08 <strlen@plt>
   131a0:	str	r0, [sp, #60]	; 0x3c
   131a4:	ldr	r3, [sp, #168]	; 0xa8
   131a8:	str	r3, [sp, #72]	; 0x48
   131ac:	mov	r3, #1
   131b0:	str	r3, [sp, #48]	; 0x30
   131b4:	b	130cc <__assert_fail@plt+0x20e0>
   131b8:	mov	fp, #0
   131bc:	b	13198 <__assert_fail@plt+0x21ac>
   131c0:	ldr	r3, [sp, #32]
   131c4:	cmp	r3, #0
   131c8:	bne	13288 <__assert_fail@plt+0x229c>
   131cc:	mov	r3, #1
   131d0:	str	r3, [sp, #48]	; 0x30
   131d4:	cmp	r7, #0
   131d8:	beq	132a4 <__assert_fail@plt+0x22b8>
   131dc:	ldr	r3, [sp, #36]	; 0x24
   131e0:	mov	r2, #39	; 0x27
   131e4:	strb	r2, [r3]
   131e8:	mov	r3, #0
   131ec:	str	r3, [sp, #32]
   131f0:	mov	r3, #1
   131f4:	str	r3, [sp, #60]	; 0x3c
   131f8:	ldr	r3, [pc, #3752]	; 140a8 <__assert_fail@plt+0x30bc>
   131fc:	str	r3, [sp, #72]	; 0x48
   13200:	mov	fp, #1
   13204:	mov	sl, #2
   13208:	b	130cc <__assert_fail@plt+0x20e0>
   1320c:	ldr	r3, [sp, #32]
   13210:	cmp	r3, #0
   13214:	beq	131d4 <__assert_fail@plt+0x21e8>
   13218:	mov	r3, #1
   1321c:	str	r3, [sp, #60]	; 0x3c
   13220:	ldr	r3, [pc, #3712]	; 140a8 <__assert_fail@plt+0x30bc>
   13224:	str	r3, [sp, #72]	; 0x48
   13228:	mov	fp, #0
   1322c:	b	130cc <__assert_fail@plt+0x20e0>
   13230:	bl	10fd4 <abort@plt>
   13234:	mov	r3, #0
   13238:	str	r3, [sp, #32]
   1323c:	mov	r3, #1
   13240:	str	r3, [sp, #48]	; 0x30
   13244:	mov	fp, #0
   13248:	b	130cc <__assert_fail@plt+0x20e0>
   1324c:	ldr	r3, [sp, #32]
   13250:	str	r3, [sp, #48]	; 0x30
   13254:	mov	r3, #1
   13258:	str	r3, [sp, #60]	; 0x3c
   1325c:	ldr	r3, [pc, #3660]	; 140b0 <__assert_fail@plt+0x30c4>
   13260:	str	r3, [sp, #72]	; 0x48
   13264:	mov	fp, #0
   13268:	b	130cc <__assert_fail@plt+0x20e0>
   1326c:	mov	r3, #1
   13270:	str	r3, [sp, #48]	; 0x30
   13274:	str	r3, [sp, #60]	; 0x3c
   13278:	ldr	r3, [pc, #3632]	; 140b0 <__assert_fail@plt+0x30c4>
   1327c:	str	r3, [sp, #72]	; 0x48
   13280:	mov	fp, #1
   13284:	b	130cc <__assert_fail@plt+0x20e0>
   13288:	mov	r3, #1
   1328c:	str	r3, [sp, #60]	; 0x3c
   13290:	ldr	r3, [pc, #3600]	; 140a8 <__assert_fail@plt+0x30bc>
   13294:	str	r3, [sp, #72]	; 0x48
   13298:	mov	fp, #0
   1329c:	mov	sl, #2
   132a0:	b	130cc <__assert_fail@plt+0x20e0>
   132a4:	mov	r3, #0
   132a8:	str	r3, [sp, #32]
   132ac:	mov	r3, #1
   132b0:	str	r3, [sp, #60]	; 0x3c
   132b4:	ldr	r3, [pc, #3564]	; 140a8 <__assert_fail@plt+0x30bc>
   132b8:	str	r3, [sp, #72]	; 0x48
   132bc:	mov	fp, #1
   132c0:	mov	sl, #2
   132c4:	b	130cc <__assert_fail@plt+0x20e0>
   132c8:	mov	r3, #0
   132cc:	str	r3, [sp, #56]	; 0x38
   132d0:	ldr	r3, [sp, #52]	; 0x34
   132d4:	add	r2, r3, r6
   132d8:	str	r2, [sp, #64]	; 0x40
   132dc:	ldrb	r4, [r3, r6]
   132e0:	cmp	r4, #126	; 0x7e
   132e4:	ldrls	pc, [pc, r4, lsl #2]
   132e8:	b	13b24 <__assert_fail@plt+0x2b38>
   132ec:	andeq	r3, r1, r4, lsl #10
   132f0:	andeq	r3, r1, r4, lsr #22
   132f4:	andeq	r3, r1, r4, lsr #22
   132f8:	andeq	r3, r1, r4, lsr #22
   132fc:	andeq	r3, r1, r4, lsr #22
   13300:	andeq	r3, r1, r4, lsr #22
   13304:	andeq	r3, r1, r4, lsr #22
   13308:	andeq	r3, r1, r0, ror #16
   1330c:	strdeq	r3, [r1], -ip
   13310:	andeq	r3, r1, r8, lsl r8
   13314:	andeq	r3, r1, r0, lsl r8
   13318:	andeq	r3, r1, r0, lsl #15
   1331c:	andeq	r3, r1, r8, ror r7
   13320:	strdeq	r3, [r1], -r4
   13324:	andeq	r3, r1, r4, lsr #22
   13328:	andeq	r3, r1, r4, lsr #22
   1332c:	andeq	r3, r1, r4, lsr #22
   13330:	andeq	r3, r1, r4, lsr #22
   13334:	andeq	r3, r1, r4, lsr #22
   13338:	andeq	r3, r1, r4, lsr #22
   1333c:	andeq	r3, r1, r4, lsr #22
   13340:	andeq	r3, r1, r4, lsr #22
   13344:	andeq	r3, r1, r4, lsr #22
   13348:	andeq	r3, r1, r4, lsr #22
   1334c:	andeq	r3, r1, r4, lsr #22
   13350:	andeq	r3, r1, r4, lsr #22
   13354:	andeq	r3, r1, r4, lsr #22
   13358:	andeq	r3, r1, r4, lsr #22
   1335c:	andeq	r3, r1, r4, lsr #22
   13360:	andeq	r3, r1, r4, lsr #22
   13364:	andeq	r3, r1, r4, lsr #22
   13368:	andeq	r3, r1, r4, lsr #22
   1336c:			; <UNDEFINED> instruction: 0x000138b4
   13370:			; <UNDEFINED> instruction: 0x000138b0
   13374:			; <UNDEFINED> instruction: 0x000138b0
   13378:	andeq	r3, r1, r8, lsl #17
   1337c:			; <UNDEFINED> instruction: 0x000138b0
   13380:	strdeq	r3, [r1], -r8
   13384:			; <UNDEFINED> instruction: 0x000138b0
   13388:	andeq	r3, r1, r8, lsl #21
   1338c:			; <UNDEFINED> instruction: 0x000138b0
   13390:			; <UNDEFINED> instruction: 0x000138b0
   13394:			; <UNDEFINED> instruction: 0x000138b0
   13398:	strdeq	r3, [r1], -r8
   1339c:	strdeq	r3, [r1], -r8
   133a0:	strdeq	r3, [r1], -r8
   133a4:	strdeq	r3, [r1], -r8
   133a8:	strdeq	r3, [r1], -r8
   133ac:	strdeq	r3, [r1], -r8
   133b0:	strdeq	r3, [r1], -r8
   133b4:	strdeq	r3, [r1], -r8
   133b8:	strdeq	r3, [r1], -r8
   133bc:	strdeq	r3, [r1], -r8
   133c0:	strdeq	r3, [r1], -r8
   133c4:	strdeq	r3, [r1], -r8
   133c8:	strdeq	r3, [r1], -r8
   133cc:	strdeq	r3, [r1], -r8
   133d0:	strdeq	r3, [r1], -r8
   133d4:	strdeq	r3, [r1], -r8
   133d8:			; <UNDEFINED> instruction: 0x000138b0
   133dc:			; <UNDEFINED> instruction: 0x000138b0
   133e0:			; <UNDEFINED> instruction: 0x000138b0
   133e4:			; <UNDEFINED> instruction: 0x000138b0
   133e8:	andeq	r3, r1, ip, lsl #12
   133ec:	andeq	r3, r1, r4, lsr #22
   133f0:	strdeq	r3, [r1], -r8
   133f4:	strdeq	r3, [r1], -r8
   133f8:	strdeq	r3, [r1], -r8
   133fc:	strdeq	r3, [r1], -r8
   13400:	strdeq	r3, [r1], -r8
   13404:	strdeq	r3, [r1], -r8
   13408:	strdeq	r3, [r1], -r8
   1340c:	strdeq	r3, [r1], -r8
   13410:	strdeq	r3, [r1], -r8
   13414:	strdeq	r3, [r1], -r8
   13418:	strdeq	r3, [r1], -r8
   1341c:	strdeq	r3, [r1], -r8
   13420:	strdeq	r3, [r1], -r8
   13424:	strdeq	r3, [r1], -r8
   13428:	strdeq	r3, [r1], -r8
   1342c:	strdeq	r3, [r1], -r8
   13430:	strdeq	r3, [r1], -r8
   13434:	strdeq	r3, [r1], -r8
   13438:	strdeq	r3, [r1], -r8
   1343c:	strdeq	r3, [r1], -r8
   13440:	strdeq	r3, [r1], -r8
   13444:	strdeq	r3, [r1], -r8
   13448:	strdeq	r3, [r1], -r8
   1344c:	strdeq	r3, [r1], -r8
   13450:	strdeq	r3, [r1], -r8
   13454:	strdeq	r3, [r1], -r8
   13458:			; <UNDEFINED> instruction: 0x000138b0
   1345c:	andeq	r3, r1, r8, lsl #15
   13460:	strdeq	r3, [r1], -r8
   13464:			; <UNDEFINED> instruction: 0x000138b0
   13468:	strdeq	r3, [r1], -r8
   1346c:			; <UNDEFINED> instruction: 0x000138b0
   13470:	strdeq	r3, [r1], -r8
   13474:	strdeq	r3, [r1], -r8
   13478:	strdeq	r3, [r1], -r8
   1347c:	strdeq	r3, [r1], -r8
   13480:	strdeq	r3, [r1], -r8
   13484:	strdeq	r3, [r1], -r8
   13488:	strdeq	r3, [r1], -r8
   1348c:	strdeq	r3, [r1], -r8
   13490:	strdeq	r3, [r1], -r8
   13494:	strdeq	r3, [r1], -r8
   13498:	strdeq	r3, [r1], -r8
   1349c:	strdeq	r3, [r1], -r8
   134a0:	strdeq	r3, [r1], -r8
   134a4:	strdeq	r3, [r1], -r8
   134a8:	strdeq	r3, [r1], -r8
   134ac:	strdeq	r3, [r1], -r8
   134b0:	strdeq	r3, [r1], -r8
   134b4:	strdeq	r3, [r1], -r8
   134b8:	strdeq	r3, [r1], -r8
   134bc:	strdeq	r3, [r1], -r8
   134c0:	strdeq	r3, [r1], -r8
   134c4:	strdeq	r3, [r1], -r8
   134c8:	strdeq	r3, [r1], -r8
   134cc:	strdeq	r3, [r1], -r8
   134d0:	strdeq	r3, [r1], -r8
   134d4:	strdeq	r3, [r1], -r8
   134d8:	andeq	r3, r1, r8, ror #16
   134dc:			; <UNDEFINED> instruction: 0x000138b0
   134e0:	andeq	r3, r1, r8, ror #16
   134e4:	andeq	r3, r1, r8, lsl #17
   134e8:	mov	r3, #0
   134ec:	str	r3, [sp, #56]	; 0x38
   134f0:	b	132d0 <__assert_fail@plt+0x22e4>
   134f4:	mov	r3, #114	; 0x72
   134f8:	b	1381c <__assert_fail@plt+0x2830>
   134fc:	mov	r3, #98	; 0x62
   13500:	b	13834 <__assert_fail@plt+0x2848>
   13504:	ldr	r3, [sp, #48]	; 0x30
   13508:	cmp	r3, #0
   1350c:	beq	135f4 <__assert_fail@plt+0x2608>
   13510:	ldr	r3, [sp, #32]
   13514:	cmp	r3, #0
   13518:	bne	1407c <__assert_fail@plt+0x3090>
   1351c:	ldr	r3, [sp, #44]	; 0x2c
   13520:	eor	r3, r3, #1
   13524:	cmp	sl, #2
   13528:	movne	r3, #0
   1352c:	andeq	r3, r3, #1
   13530:	cmp	r3, #0
   13534:	moveq	r2, fp
   13538:	beq	1357c <__assert_fail@plt+0x2590>
   1353c:	cmp	r7, fp
   13540:	ldrhi	r2, [sp, #36]	; 0x24
   13544:	movhi	r1, #39	; 0x27
   13548:	strbhi	r1, [r2, fp]
   1354c:	add	r2, fp, #1
   13550:	cmp	r7, r2
   13554:	ldrhi	r1, [sp, #36]	; 0x24
   13558:	movhi	r0, #36	; 0x24
   1355c:	strbhi	r0, [r1, r2]
   13560:	add	r2, fp, #2
   13564:	cmp	r7, r2
   13568:	ldrhi	r1, [sp, #36]	; 0x24
   1356c:	movhi	r0, #39	; 0x27
   13570:	strbhi	r0, [r1, r2]
   13574:	add	r2, fp, #3
   13578:	str	r3, [sp, #44]	; 0x2c
   1357c:	cmp	r7, r2
   13580:	ldrhi	r3, [sp, #36]	; 0x24
   13584:	movhi	r1, #92	; 0x5c
   13588:	strbhi	r1, [r3, r2]
   1358c:	add	fp, r2, #1
   13590:	cmp	r5, #0
   13594:	beq	13f00 <__assert_fail@plt+0x2f14>
   13598:	add	r3, r6, #1
   1359c:	ldr	r1, [sp, #28]
   135a0:	cmp	r1, r3
   135a4:	bls	13f10 <__assert_fail@plt+0x2f24>
   135a8:	ldr	r1, [sp, #52]	; 0x34
   135ac:	ldrb	r3, [r1, r3]
   135b0:	sub	r3, r3, #48	; 0x30
   135b4:	uxtb	r3, r3
   135b8:	cmp	r3, #9
   135bc:	bhi	13f1c <__assert_fail@plt+0x2f30>
   135c0:	cmp	r7, fp
   135c4:	movhi	r3, #48	; 0x30
   135c8:	ldrhi	r1, [sp, #36]	; 0x24
   135cc:	strbhi	r3, [r1, fp]
   135d0:	add	r3, r2, #2
   135d4:	cmp	r7, r3
   135d8:	movhi	r1, #48	; 0x30
   135dc:	ldrhi	r0, [sp, #36]	; 0x24
   135e0:	strbhi	r1, [r0, r3]
   135e4:	add	fp, r2, #3
   135e8:	ldr	r8, [sp, #32]
   135ec:	mov	r4, #48	; 0x30
   135f0:	b	138cc <__assert_fail@plt+0x28e0>
   135f4:	ldr	r3, [sp, #156]	; 0x9c
   135f8:	tst	r3, #1
   135fc:	bne	139c0 <__assert_fail@plt+0x29d4>
   13600:	ldr	r5, [sp, #48]	; 0x30
   13604:	mov	r8, r5
   13608:	b	138cc <__assert_fail@plt+0x28e0>
   1360c:	cmp	sl, #2
   13610:	beq	13628 <__assert_fail@plt+0x263c>
   13614:	cmp	sl, #5
   13618:	beq	13640 <__assert_fail@plt+0x2654>
   1361c:	mov	r8, #0
   13620:	mov	r5, r8
   13624:	b	138cc <__assert_fail@plt+0x28e0>
   13628:	ldr	r3, [sp, #32]
   1362c:	cmp	r3, #0
   13630:	bne	14090 <__assert_fail@plt+0x30a4>
   13634:	mov	r8, r3
   13638:	mov	r5, r3
   1363c:	b	138cc <__assert_fail@plt+0x28e0>
   13640:	ldr	r3, [sp, #156]	; 0x9c
   13644:	tst	r3, #4
   13648:	beq	13f28 <__assert_fail@plt+0x2f3c>
   1364c:	add	r3, r6, #2
   13650:	ldr	r2, [sp, #28]
   13654:	cmp	r2, r3
   13658:	bls	13f34 <__assert_fail@plt+0x2f48>
   1365c:	ldr	r2, [sp, #52]	; 0x34
   13660:	add	r2, r2, r6
   13664:	ldrb	r2, [r2, #1]
   13668:	cmp	r2, #63	; 0x3f
   1366c:	movne	r8, #0
   13670:	movne	r5, r8
   13674:	bne	138cc <__assert_fail@plt+0x28e0>
   13678:	ldr	r2, [sp, #52]	; 0x34
   1367c:	ldrb	r2, [r2, r3]
   13680:	sub	r1, r2, #33	; 0x21
   13684:	cmp	r1, #29
   13688:	ldrls	pc, [pc, r1, lsl #2]
   1368c:	b	13f40 <__assert_fail@plt+0x2f54>
   13690:	andeq	r3, r1, r8, lsl #14
   13694:	andeq	r3, r1, r0, asr #30
   13698:	andeq	r3, r1, r0, asr #30
   1369c:	andeq	r3, r1, r0, asr #30
   136a0:	andeq	r3, r1, r0, asr #30
   136a4:	andeq	r3, r1, r0, asr #30
   136a8:	andeq	r3, r1, r8, lsl #14
   136ac:	andeq	r3, r1, r8, lsl #14
   136b0:	andeq	r3, r1, r8, lsl #14
   136b4:	andeq	r3, r1, r0, asr #30
   136b8:	andeq	r3, r1, r0, asr #30
   136bc:	andeq	r3, r1, r0, asr #30
   136c0:	andeq	r3, r1, r8, lsl #14
   136c4:	andeq	r3, r1, r0, asr #30
   136c8:	andeq	r3, r1, r8, lsl #14
   136cc:	andeq	r3, r1, r0, asr #30
   136d0:	andeq	r3, r1, r0, asr #30
   136d4:	andeq	r3, r1, r0, asr #30
   136d8:	andeq	r3, r1, r0, asr #30
   136dc:	andeq	r3, r1, r0, asr #30
   136e0:	andeq	r3, r1, r0, asr #30
   136e4:	andeq	r3, r1, r0, asr #30
   136e8:	andeq	r3, r1, r0, asr #30
   136ec:	andeq	r3, r1, r0, asr #30
   136f0:	andeq	r3, r1, r0, asr #30
   136f4:	andeq	r3, r1, r0, asr #30
   136f8:	andeq	r3, r1, r0, asr #30
   136fc:	andeq	r3, r1, r8, lsl #14
   13700:	andeq	r3, r1, r8, lsl #14
   13704:	andeq	r3, r1, r8, lsl #14
   13708:	ldr	r1, [sp, #32]
   1370c:	cmp	r1, #0
   13710:	bne	14150 <__assert_fail@plt+0x3164>
   13714:	cmp	r7, fp
   13718:	movhi	r1, #63	; 0x3f
   1371c:	ldrhi	r0, [sp, #36]	; 0x24
   13720:	strbhi	r1, [r0, fp]
   13724:	add	r1, fp, #1
   13728:	cmp	r7, r1
   1372c:	ldrhi	r0, [sp, #36]	; 0x24
   13730:	movhi	ip, #34	; 0x22
   13734:	strbhi	ip, [r0, r1]
   13738:	add	r1, fp, #2
   1373c:	cmp	r7, r1
   13740:	ldrhi	r0, [sp, #36]	; 0x24
   13744:	movhi	ip, #34	; 0x22
   13748:	strbhi	ip, [r0, r1]
   1374c:	add	r1, fp, #3
   13750:	cmp	r7, r1
   13754:	movhi	r0, #63	; 0x3f
   13758:	ldrhi	ip, [sp, #36]	; 0x24
   1375c:	strbhi	r0, [ip, r1]
   13760:	add	fp, fp, #4
   13764:	ldr	r5, [sp, #32]
   13768:	mov	r8, r5
   1376c:	mov	r4, r2
   13770:	mov	r6, r3
   13774:	b	138cc <__assert_fail@plt+0x28e0>
   13778:	mov	r3, #102	; 0x66
   1377c:	b	13834 <__assert_fail@plt+0x2848>
   13780:	mov	r3, #118	; 0x76
   13784:	b	13834 <__assert_fail@plt+0x2848>
   13788:	cmp	sl, #2
   1378c:	beq	137f8 <__assert_fail@plt+0x280c>
   13790:	ldr	r3, [sp, #48]	; 0x30
   13794:	ldr	r2, [sp, #32]
   13798:	and	r3, r3, r2
   1379c:	tst	r9, r3
   137a0:	moveq	r3, r4
   137a4:	beq	13834 <__assert_fail@plt+0x2848>
   137a8:	mov	r8, #0
   137ac:	mov	r5, r8
   137b0:	eor	r5, r5, #1
   137b4:	ldr	r3, [sp, #44]	; 0x2c
   137b8:	and	r5, r5, r3
   137bc:	tst	r5, #255	; 0xff
   137c0:	beq	139a0 <__assert_fail@plt+0x29b4>
   137c4:	cmp	r7, fp
   137c8:	ldrhi	r3, [sp, #36]	; 0x24
   137cc:	movhi	r2, #39	; 0x27
   137d0:	strbhi	r2, [r3, fp]
   137d4:	add	r3, fp, #1
   137d8:	cmp	r7, r3
   137dc:	ldrhi	r2, [sp, #36]	; 0x24
   137e0:	movhi	r1, #39	; 0x27
   137e4:	strbhi	r1, [r2, r3]
   137e8:	add	fp, fp, #2
   137ec:	mov	r3, #0
   137f0:	str	r3, [sp, #44]	; 0x2c
   137f4:	b	139a0 <__assert_fail@plt+0x29b4>
   137f8:	ldr	r3, [sp, #32]
   137fc:	cmp	r3, #0
   13800:	bne	1409c <__assert_fail@plt+0x30b0>
   13804:	mov	r8, r3
   13808:	mov	r5, r3
   1380c:	b	137b0 <__assert_fail@plt+0x27c4>
   13810:	mov	r3, #110	; 0x6e
   13814:	b	1381c <__assert_fail@plt+0x2830>
   13818:	mov	r3, #116	; 0x74
   1381c:	ldr	r2, [sp, #32]
   13820:	cmp	sl, #2
   13824:	movne	r2, #0
   13828:	andeq	r2, r2, #1
   1382c:	cmp	r2, #0
   13830:	bne	13854 <__assert_fail@plt+0x2868>
   13834:	ldr	r2, [sp, #48]	; 0x30
   13838:	cmp	r2, #0
   1383c:	moveq	r8, r2
   13840:	moveq	r5, r2
   13844:	beq	138cc <__assert_fail@plt+0x28e0>
   13848:	mov	r4, r3
   1384c:	mov	r8, #0
   13850:	b	13924 <__assert_fail@plt+0x2938>
   13854:	mov	r8, sl
   13858:	mov	sl, r7
   1385c:	b	140c8 <__assert_fail@plt+0x30dc>
   13860:	mov	r3, #97	; 0x61
   13864:	b	13834 <__assert_fail@plt+0x2848>
   13868:	ldr	r3, [sp, #28]
   1386c:	cmn	r3, #1
   13870:	beq	1389c <__assert_fail@plt+0x28b0>
   13874:	ldr	r3, [sp, #28]
   13878:	subs	r3, r3, #1
   1387c:	movne	r3, #1
   13880:	cmp	r3, #0
   13884:	bne	13f4c <__assert_fail@plt+0x2f60>
   13888:	cmp	r6, #0
   1388c:	beq	138b4 <__assert_fail@plt+0x28c8>
   13890:	mov	r8, #0
   13894:	mov	r5, r8
   13898:	b	138cc <__assert_fail@plt+0x28e0>
   1389c:	ldr	r3, [sp, #52]	; 0x34
   138a0:	ldrb	r3, [r3, #1]
   138a4:	adds	r3, r3, #0
   138a8:	movne	r3, #1
   138ac:	b	13880 <__assert_fail@plt+0x2894>
   138b0:	mov	r8, #0
   138b4:	ldr	r5, [sp, #32]
   138b8:	cmp	sl, #2
   138bc:	movne	r5, #0
   138c0:	andeq	r5, r5, #1
   138c4:	cmp	r5, #0
   138c8:	bne	13a7c <__assert_fail@plt+0x2a90>
   138cc:	ldr	r3, [sp, #68]	; 0x44
   138d0:	cmp	sl, #2
   138d4:	orreq	r3, r3, #1
   138d8:	eor	r3, r3, #1
   138dc:	ldr	r2, [sp, #32]
   138e0:	orr	r3, r2, r3
   138e4:	tst	r3, #255	; 0xff
   138e8:	beq	13918 <__assert_fail@plt+0x292c>
   138ec:	ldr	r3, [sp, #160]	; 0xa0
   138f0:	cmp	r3, #0
   138f4:	beq	13918 <__assert_fail@plt+0x292c>
   138f8:	lsr	r2, r4, #5
   138fc:	uxtb	r2, r2
   13900:	and	r3, r4, #31
   13904:	ldr	r1, [sp, #160]	; 0xa0
   13908:	ldr	r2, [r1, r2, lsl #2]
   1390c:	lsr	r3, r2, r3
   13910:	tst	r3, #1
   13914:	bne	13924 <__assert_fail@plt+0x2938>
   13918:	ldr	r3, [sp, #56]	; 0x38
   1391c:	cmp	r3, #0
   13920:	beq	137b0 <__assert_fail@plt+0x27c4>
   13924:	ldr	r3, [sp, #32]
   13928:	cmp	r3, #0
   1392c:	bne	14138 <__assert_fail@plt+0x314c>
   13930:	ldr	r3, [sp, #44]	; 0x2c
   13934:	eor	r3, r3, #1
   13938:	cmp	sl, #2
   1393c:	movne	r3, #0
   13940:	andeq	r3, r3, #1
   13944:	cmp	r3, #0
   13948:	beq	1398c <__assert_fail@plt+0x29a0>
   1394c:	cmp	r7, fp
   13950:	ldrhi	r2, [sp, #36]	; 0x24
   13954:	movhi	r1, #39	; 0x27
   13958:	strbhi	r1, [r2, fp]
   1395c:	add	r2, fp, #1
   13960:	cmp	r7, r2
   13964:	ldrhi	r1, [sp, #36]	; 0x24
   13968:	movhi	r0, #36	; 0x24
   1396c:	strbhi	r0, [r1, r2]
   13970:	add	r2, fp, #2
   13974:	cmp	r7, r2
   13978:	ldrhi	r1, [sp, #36]	; 0x24
   1397c:	movhi	r0, #39	; 0x27
   13980:	strbhi	r0, [r1, r2]
   13984:	add	fp, fp, #3
   13988:	str	r3, [sp, #44]	; 0x2c
   1398c:	cmp	r7, fp
   13990:	ldrhi	r3, [sp, #36]	; 0x24
   13994:	movhi	r2, #92	; 0x5c
   13998:	strbhi	r2, [r3, fp]
   1399c:	add	fp, fp, #1
   139a0:	cmp	fp, r7
   139a4:	ldrcc	r3, [sp, #36]	; 0x24
   139a8:	strbcc	r4, [r3, fp]
   139ac:	add	fp, fp, #1
   139b0:	ldr	r3, [sp, #40]	; 0x28
   139b4:	cmp	r8, #0
   139b8:	moveq	r3, #0
   139bc:	str	r3, [sp, #40]	; 0x28
   139c0:	add	r6, r6, #1
   139c4:	ldr	r3, [sp, #28]
   139c8:	cmn	r3, #1
   139cc:	beq	13f58 <__assert_fail@plt+0x2f6c>
   139d0:	ldr	r3, [sp, #28]
   139d4:	subs	r8, r3, r6
   139d8:	movne	r8, #1
   139dc:	cmp	r8, #0
   139e0:	beq	13f6c <__assert_fail@plt+0x2f80>
   139e4:	ldr	r5, [sp, #48]	; 0x30
   139e8:	cmp	sl, #2
   139ec:	moveq	r5, #0
   139f0:	andne	r5, r5, #1
   139f4:	ldr	r3, [sp, #60]	; 0x3c
   139f8:	adds	r9, r3, #0
   139fc:	movne	r9, #1
   13a00:	ands	r2, r5, r9
   13a04:	str	r2, [sp, #56]	; 0x38
   13a08:	beq	132d0 <__assert_fail@plt+0x22e4>
   13a0c:	add	r4, r6, r3
   13a10:	ldr	r2, [sp, #28]
   13a14:	cmp	r3, #1
   13a18:	movls	r3, #0
   13a1c:	movhi	r3, #1
   13a20:	cmn	r2, #1
   13a24:	movne	r3, #0
   13a28:	cmp	r3, #0
   13a2c:	beq	13a3c <__assert_fail@plt+0x2a50>
   13a30:	ldr	r0, [sp, #52]	; 0x34
   13a34:	bl	10f08 <strlen@plt>
   13a38:	str	r0, [sp, #28]
   13a3c:	ldr	r3, [sp, #28]
   13a40:	cmp	r3, r4
   13a44:	bcc	132c8 <__assert_fail@plt+0x22dc>
   13a48:	ldr	r2, [sp, #60]	; 0x3c
   13a4c:	ldr	r1, [sp, #72]	; 0x48
   13a50:	ldr	r3, [sp, #52]	; 0x34
   13a54:	add	r0, r3, r6
   13a58:	bl	10de8 <memcmp@plt>
   13a5c:	cmp	r0, #0
   13a60:	bne	134e8 <__assert_fail@plt+0x24fc>
   13a64:	ldr	r3, [sp, #32]
   13a68:	cmp	r3, #0
   13a6c:	beq	132d0 <__assert_fail@plt+0x22e4>
   13a70:	mov	r8, sl
   13a74:	mov	sl, r7
   13a78:	b	140c8 <__assert_fail@plt+0x30dc>
   13a7c:	mov	r8, sl
   13a80:	mov	sl, r7
   13a84:	b	140c8 <__assert_fail@plt+0x30dc>
   13a88:	cmp	sl, #2
   13a8c:	strne	r8, [sp, #80]	; 0x50
   13a90:	movne	r5, #0
   13a94:	bne	138cc <__assert_fail@plt+0x28e0>
   13a98:	ldr	r3, [sp, #32]
   13a9c:	cmp	r3, #0
   13aa0:	bne	140b4 <__assert_fail@plt+0x30c8>
   13aa4:	ldr	r2, [sp, #76]	; 0x4c
   13aa8:	adds	r3, r7, #0
   13aac:	movne	r3, #1
   13ab0:	cmp	r2, #0
   13ab4:	movne	r3, #0
   13ab8:	cmp	r3, #0
   13abc:	movne	r3, #0
   13ac0:	bne	13af0 <__assert_fail@plt+0x2b04>
   13ac4:	cmp	r7, fp
   13ac8:	ldrhi	r3, [sp, #36]	; 0x24
   13acc:	movhi	r2, #39	; 0x27
   13ad0:	strbhi	r2, [r3, fp]
   13ad4:	add	r3, fp, #1
   13ad8:	cmp	r7, r3
   13adc:	ldrhi	r2, [sp, #36]	; 0x24
   13ae0:	movhi	r1, #92	; 0x5c
   13ae4:	strbhi	r1, [r2, r3]
   13ae8:	mov	r3, r7
   13aec:	ldr	r7, [sp, #76]	; 0x4c
   13af0:	add	r2, fp, #2
   13af4:	cmp	r2, r3
   13af8:	ldrcc	r1, [sp, #36]	; 0x24
   13afc:	movcc	r0, #39	; 0x27
   13b00:	strbcc	r0, [r1, r2]
   13b04:	add	fp, fp, #3
   13b08:	ldr	r2, [sp, #32]
   13b0c:	mov	r5, r2
   13b10:	str	r8, [sp, #80]	; 0x50
   13b14:	str	r2, [sp, #44]	; 0x2c
   13b18:	str	r7, [sp, #76]	; 0x4c
   13b1c:	mov	r7, r3
   13b20:	b	138cc <__assert_fail@plt+0x28e0>
   13b24:	ldr	r5, [sp, #84]	; 0x54
   13b28:	cmp	r5, #1
   13b2c:	beq	13b5c <__assert_fail@plt+0x2b70>
   13b30:	mov	r3, #0
   13b34:	str	r3, [sp, #104]	; 0x68
   13b38:	str	r3, [sp, #108]	; 0x6c
   13b3c:	ldr	r3, [sp, #28]
   13b40:	cmn	r3, #1
   13b44:	beq	13b90 <__assert_fail@plt+0x2ba4>
   13b48:	mov	r3, #0
   13b4c:	str	r4, [sp, #88]	; 0x58
   13b50:	str	fp, [sp, #92]	; 0x5c
   13b54:	mov	fp, r3
   13b58:	b	13cb8 <__assert_fail@plt+0x2ccc>
   13b5c:	bl	10ef0 <__ctype_b_loc@plt>
   13b60:	ldr	r2, [r0]
   13b64:	lsl	r3, r4, #1
   13b68:	ldrh	r8, [r2, r3]
   13b6c:	lsr	r8, r8, #14
   13b70:	and	r8, r8, #1
   13b74:	mov	r2, r5
   13b78:	eor	r5, r8, #1
   13b7c:	ldr	r3, [sp, #48]	; 0x30
   13b80:	and	r5, r5, r3
   13b84:	ands	r5, r5, #255	; 0xff
   13b88:	beq	138cc <__assert_fail@plt+0x28e0>
   13b8c:	b	13d50 <__assert_fail@plt+0x2d64>
   13b90:	ldr	r0, [sp, #52]	; 0x34
   13b94:	bl	10f08 <strlen@plt>
   13b98:	str	r0, [sp, #28]
   13b9c:	b	13b48 <__assert_fail@plt+0x2b5c>
   13ba0:	mov	r2, fp
   13ba4:	mov	r1, r4
   13ba8:	ldr	r4, [sp, #88]	; 0x58
   13bac:	ldr	fp, [sp, #92]	; 0x5c
   13bb0:	ldr	r0, [sp, #28]
   13bb4:	cmp	r0, r5
   13bb8:	bls	13d84 <__assert_fail@plt+0x2d98>
   13bbc:	ldrb	r3, [r1]
   13bc0:	cmp	r3, #0
   13bc4:	beq	13d8c <__assert_fail@plt+0x2da0>
   13bc8:	mov	r3, r1
   13bcc:	add	r2, r2, #1
   13bd0:	add	r1, r6, r2
   13bd4:	cmp	r0, r1
   13bd8:	bls	13d94 <__assert_fail@plt+0x2da8>
   13bdc:	ldrb	r1, [r3, #1]!
   13be0:	cmp	r1, #0
   13be4:	bne	13bcc <__assert_fail@plt+0x2be0>
   13be8:	mov	r8, #0
   13bec:	b	13d48 <__assert_fail@plt+0x2d5c>
   13bf0:	cmp	r4, r5
   13bf4:	beq	13c94 <__assert_fail@plt+0x2ca8>
   13bf8:	ldrb	r3, [r4, #1]!
   13bfc:	sub	r3, r3, #91	; 0x5b
   13c00:	cmp	r3, #33	; 0x21
   13c04:	ldrls	pc, [pc, r3, lsl #2]
   13c08:	b	13bf0 <__assert_fail@plt+0x2c04>
   13c0c:	andeq	r4, r1, r0, asr #1
   13c10:	andeq	r4, r1, r0, asr #1
   13c14:	strdeq	r3, [r1], -r0
   13c18:	andeq	r4, r1, r0, asr #1
   13c1c:	strdeq	r3, [r1], -r0
   13c20:	andeq	r4, r1, r0, asr #1
   13c24:	strdeq	r3, [r1], -r0
   13c28:	strdeq	r3, [r1], -r0
   13c2c:	strdeq	r3, [r1], -r0
   13c30:	strdeq	r3, [r1], -r0
   13c34:	strdeq	r3, [r1], -r0
   13c38:	strdeq	r3, [r1], -r0
   13c3c:	strdeq	r3, [r1], -r0
   13c40:	strdeq	r3, [r1], -r0
   13c44:	strdeq	r3, [r1], -r0
   13c48:	strdeq	r3, [r1], -r0
   13c4c:	strdeq	r3, [r1], -r0
   13c50:	strdeq	r3, [r1], -r0
   13c54:	strdeq	r3, [r1], -r0
   13c58:	strdeq	r3, [r1], -r0
   13c5c:	strdeq	r3, [r1], -r0
   13c60:	strdeq	r3, [r1], -r0
   13c64:	strdeq	r3, [r1], -r0
   13c68:	strdeq	r3, [r1], -r0
   13c6c:	strdeq	r3, [r1], -r0
   13c70:	strdeq	r3, [r1], -r0
   13c74:	strdeq	r3, [r1], -r0
   13c78:	strdeq	r3, [r1], -r0
   13c7c:	strdeq	r3, [r1], -r0
   13c80:	strdeq	r3, [r1], -r0
   13c84:	strdeq	r3, [r1], -r0
   13c88:	strdeq	r3, [r1], -r0
   13c8c:	strdeq	r3, [r1], -r0
   13c90:	andeq	r4, r1, r0, asr #1
   13c94:	ldr	r0, [sp, #100]	; 0x64
   13c98:	bl	10e30 <iswprint@plt>
   13c9c:	cmp	r0, #0
   13ca0:	moveq	r8, #0
   13ca4:	add	fp, fp, r9
   13ca8:	add	r0, sp, #104	; 0x68
   13cac:	bl	10dd0 <mbsinit@plt>
   13cb0:	cmp	r0, #0
   13cb4:	bne	13d28 <__assert_fail@plt+0x2d3c>
   13cb8:	add	r5, r6, fp
   13cbc:	ldr	r3, [sp, #52]	; 0x34
   13cc0:	add	r4, r3, r5
   13cc4:	add	r3, sp, #104	; 0x68
   13cc8:	ldr	r2, [sp, #28]
   13ccc:	sub	r2, r2, r5
   13cd0:	mov	r1, r4
   13cd4:	add	r0, sp, #100	; 0x64
   13cd8:	bl	15ba0 <__assert_fail@plt+0x4bb4>
   13cdc:	subs	r9, r0, #0
   13ce0:	beq	13d9c <__assert_fail@plt+0x2db0>
   13ce4:	cmn	r9, #1
   13ce8:	beq	13d38 <__assert_fail@plt+0x2d4c>
   13cec:	cmn	r9, #2
   13cf0:	beq	13ba0 <__assert_fail@plt+0x2bb4>
   13cf4:	ldr	r3, [sp, #32]
   13cf8:	cmp	sl, #2
   13cfc:	movne	r3, #0
   13d00:	andeq	r3, r3, #1
   13d04:	cmp	r3, #0
   13d08:	beq	13c94 <__assert_fail@plt+0x2ca8>
   13d0c:	cmp	r9, #1
   13d10:	bls	13c94 <__assert_fail@plt+0x2ca8>
   13d14:	sub	r3, r9, #1
   13d18:	add	r5, r3, r5
   13d1c:	ldr	r3, [sp, #52]	; 0x34
   13d20:	add	r5, r3, r5
   13d24:	b	13bf8 <__assert_fail@plt+0x2c0c>
   13d28:	ldr	r4, [sp, #88]	; 0x58
   13d2c:	mov	r2, fp
   13d30:	ldr	fp, [sp, #92]	; 0x5c
   13d34:	b	13d48 <__assert_fail@plt+0x2d5c>
   13d38:	ldr	r4, [sp, #88]	; 0x58
   13d3c:	mov	r2, fp
   13d40:	ldr	fp, [sp, #92]	; 0x5c
   13d44:	mov	r8, #0
   13d48:	cmp	r2, #1
   13d4c:	bls	13b78 <__assert_fail@plt+0x2b8c>
   13d50:	add	r1, r6, r2
   13d54:	ldr	ip, [sp, #64]	; 0x40
   13d58:	mov	r5, #0
   13d5c:	eor	r3, r8, #1
   13d60:	ldr	r2, [sp, #48]	; 0x30
   13d64:	and	r3, r3, r2
   13d68:	uxtb	r3, r3
   13d6c:	ldr	r9, [sp, #32]
   13d70:	ldr	lr, [sp, #44]	; 0x2c
   13d74:	ldr	r2, [sp, #56]	; 0x38
   13d78:	str	r8, [sp, #56]	; 0x38
   13d7c:	ldr	r0, [sp, #36]	; 0x24
   13d80:	b	13e1c <__assert_fail@plt+0x2e30>
   13d84:	mov	r8, #0
   13d88:	b	13d48 <__assert_fail@plt+0x2d5c>
   13d8c:	mov	r8, #0
   13d90:	b	13d48 <__assert_fail@plt+0x2d5c>
   13d94:	mov	r8, #0
   13d98:	b	13d48 <__assert_fail@plt+0x2d5c>
   13d9c:	ldr	r4, [sp, #88]	; 0x58
   13da0:	mov	r2, fp
   13da4:	ldr	fp, [sp, #92]	; 0x5c
   13da8:	b	13d48 <__assert_fail@plt+0x2d5c>
   13dac:	cmp	r2, #0
   13db0:	beq	13dc4 <__assert_fail@plt+0x2dd8>
   13db4:	cmp	r7, fp
   13db8:	movhi	r2, #92	; 0x5c
   13dbc:	strbhi	r2, [r0, fp]
   13dc0:	add	fp, fp, #1
   13dc4:	add	r8, r6, #1
   13dc8:	cmp	r1, r8
   13dcc:	bls	13ed4 <__assert_fail@plt+0x2ee8>
   13dd0:	eor	r2, r5, #1
   13dd4:	and	r2, r2, lr
   13dd8:	ands	r2, r2, #255	; 0xff
   13ddc:	beq	13ef0 <__assert_fail@plt+0x2f04>
   13de0:	cmp	r7, fp
   13de4:	movhi	r2, #39	; 0x27
   13de8:	strbhi	r2, [r0, fp]
   13dec:	add	r2, fp, #1
   13df0:	cmp	r7, r2
   13df4:	movhi	lr, #39	; 0x27
   13df8:	strbhi	lr, [r0, r2]
   13dfc:	add	fp, fp, #2
   13e00:	mov	r6, r8
   13e04:	mov	r2, r3
   13e08:	mov	lr, r3
   13e0c:	cmp	r7, fp
   13e10:	strbhi	r4, [r0, fp]
   13e14:	add	fp, fp, #1
   13e18:	ldrb	r4, [ip, #1]!
   13e1c:	cmp	r3, #0
   13e20:	beq	13dac <__assert_fail@plt+0x2dc0>
   13e24:	cmp	r9, #0
   13e28:	bne	1412c <__assert_fail@plt+0x3140>
   13e2c:	eor	r5, lr, #1
   13e30:	cmp	sl, #2
   13e34:	movne	r5, #0
   13e38:	andeq	r5, r5, #1
   13e3c:	cmp	r5, #0
   13e40:	beq	13e78 <__assert_fail@plt+0x2e8c>
   13e44:	cmp	r7, fp
   13e48:	movhi	lr, #39	; 0x27
   13e4c:	strbhi	lr, [r0, fp]
   13e50:	add	lr, fp, #1
   13e54:	cmp	r7, lr
   13e58:	movhi	r8, #36	; 0x24
   13e5c:	strbhi	r8, [r0, lr]
   13e60:	add	lr, fp, #2
   13e64:	cmp	r7, lr
   13e68:	movhi	r8, #39	; 0x27
   13e6c:	strbhi	r8, [r0, lr]
   13e70:	add	fp, fp, #3
   13e74:	mov	lr, r5
   13e78:	cmp	r7, fp
   13e7c:	movhi	r5, #92	; 0x5c
   13e80:	strbhi	r5, [r0, fp]
   13e84:	add	r5, fp, #1
   13e88:	cmp	r7, r5
   13e8c:	lsrhi	r8, r4, #6
   13e90:	addhi	r8, r8, #48	; 0x30
   13e94:	strbhi	r8, [r0, r5]
   13e98:	add	r8, fp, #2
   13e9c:	cmp	r7, r8
   13ea0:	lsrhi	r5, r4, #3
   13ea4:	andhi	r5, r5, #7
   13ea8:	addhi	r5, r5, #48	; 0x30
   13eac:	strbhi	r5, [r0, r8]
   13eb0:	add	fp, fp, #3
   13eb4:	and	r4, r4, #7
   13eb8:	add	r4, r4, #48	; 0x30
   13ebc:	add	r5, r6, #1
   13ec0:	cmp	r1, r5
   13ec4:	bls	13ee0 <__assert_fail@plt+0x2ef4>
   13ec8:	mov	r6, r5
   13ecc:	mov	r5, r3
   13ed0:	b	13e0c <__assert_fail@plt+0x2e20>
   13ed4:	str	lr, [sp, #44]	; 0x2c
   13ed8:	ldr	r8, [sp, #56]	; 0x38
   13edc:	b	137b0 <__assert_fail@plt+0x27c4>
   13ee0:	str	lr, [sp, #44]	; 0x2c
   13ee4:	ldr	r8, [sp, #56]	; 0x38
   13ee8:	mov	r5, r3
   13eec:	b	137b0 <__assert_fail@plt+0x27c4>
   13ef0:	mov	r6, r8
   13ef4:	b	13e0c <__assert_fail@plt+0x2e20>
   13ef8:	mov	r5, #0
   13efc:	b	138cc <__assert_fail@plt+0x28e0>
   13f00:	mov	r8, r5
   13f04:	ldr	r5, [sp, #48]	; 0x30
   13f08:	mov	r4, #48	; 0x30
   13f0c:	b	138cc <__assert_fail@plt+0x28e0>
   13f10:	ldr	r8, [sp, #32]
   13f14:	mov	r4, #48	; 0x30
   13f18:	b	138cc <__assert_fail@plt+0x28e0>
   13f1c:	ldr	r8, [sp, #32]
   13f20:	mov	r4, #48	; 0x30
   13f24:	b	138cc <__assert_fail@plt+0x28e0>
   13f28:	mov	r8, #0
   13f2c:	mov	r5, r8
   13f30:	b	138cc <__assert_fail@plt+0x28e0>
   13f34:	mov	r8, #0
   13f38:	mov	r5, r8
   13f3c:	b	138cc <__assert_fail@plt+0x28e0>
   13f40:	mov	r8, #0
   13f44:	mov	r5, r8
   13f48:	b	138cc <__assert_fail@plt+0x28e0>
   13f4c:	mov	r8, #0
   13f50:	mov	r5, r8
   13f54:	b	138cc <__assert_fail@plt+0x28e0>
   13f58:	ldr	r3, [sp, #52]	; 0x34
   13f5c:	ldrb	r8, [r3, r6]
   13f60:	adds	r8, r8, #0
   13f64:	movne	r8, #1
   13f68:	b	139dc <__assert_fail@plt+0x29f0>
   13f6c:	cmp	sl, #2
   13f70:	movne	r3, #0
   13f74:	moveq	r3, #1
   13f78:	ldr	r1, [sp, #32]
   13f7c:	mov	r2, r1
   13f80:	and	r2, r2, r3
   13f84:	cmp	fp, #0
   13f88:	movne	r2, #0
   13f8c:	andeq	r2, r2, #1
   13f90:	cmp	r2, #0
   13f94:	bne	14144 <__assert_fail@plt+0x3158>
   13f98:	eor	r2, r1, #1
   13f9c:	and	r3, r3, r2
   13fa0:	ldr	r1, [sp, #80]	; 0x50
   13fa4:	tst	r1, r3
   13fa8:	beq	14020 <__assert_fail@plt+0x3034>
   13fac:	ldr	r3, [sp, #40]	; 0x28
   13fb0:	cmp	r3, #0
   13fb4:	bne	13fdc <__assert_fail@plt+0x2ff0>
   13fb8:	ldr	r1, [sp, #76]	; 0x4c
   13fbc:	clz	r3, r7
   13fc0:	lsr	r3, r3, #5
   13fc4:	cmp	r1, #0
   13fc8:	moveq	r3, #0
   13fcc:	cmp	r3, #0
   13fd0:	beq	14020 <__assert_fail@plt+0x3034>
   13fd4:	ldr	r7, [sp, #76]	; 0x4c
   13fd8:	b	13070 <__assert_fail@plt+0x2084>
   13fdc:	ldr	r3, [sp, #168]	; 0xa8
   13fe0:	str	r3, [sp, #16]
   13fe4:	ldr	r3, [sp, #164]	; 0xa4
   13fe8:	str	r3, [sp, #12]
   13fec:	ldr	r3, [sp, #160]	; 0xa0
   13ff0:	str	r3, [sp, #8]
   13ff4:	ldr	r3, [sp, #156]	; 0x9c
   13ff8:	str	r3, [sp, #4]
   13ffc:	mov	r3, #5
   14000:	str	r3, [sp]
   14004:	ldr	r3, [sp, #28]
   14008:	ldr	r2, [sp, #52]	; 0x34
   1400c:	ldr	r1, [sp, #76]	; 0x4c
   14010:	ldr	r0, [sp, #36]	; 0x24
   14014:	bl	13010 <__assert_fail@plt+0x2024>
   14018:	mov	fp, r0
   1401c:	b	14120 <__assert_fail@plt+0x3134>
   14020:	mov	sl, r7
   14024:	ldr	r3, [sp, #72]	; 0x48
   14028:	cmp	r3, #0
   1402c:	moveq	r2, #0
   14030:	andne	r2, r2, #1
   14034:	cmp	r2, #0
   14038:	beq	14068 <__assert_fail@plt+0x307c>
   1403c:	mov	r2, r3
   14040:	ldrb	r3, [r3]
   14044:	cmp	r3, #0
   14048:	beq	14068 <__assert_fail@plt+0x307c>
   1404c:	ldr	r1, [sp, #36]	; 0x24
   14050:	cmp	sl, fp
   14054:	strbhi	r3, [r1, fp]
   14058:	add	fp, fp, #1
   1405c:	ldrb	r3, [r2, #1]!
   14060:	cmp	r3, #0
   14064:	bne	14050 <__assert_fail@plt+0x3064>
   14068:	cmp	sl, fp
   1406c:	movhi	r3, #0
   14070:	ldrhi	r2, [sp, #36]	; 0x24
   14074:	strbhi	r3, [r2, fp]
   14078:	b	14120 <__assert_fail@plt+0x3134>
   1407c:	mov	r8, sl
   14080:	mov	sl, r7
   14084:	ldr	r3, [sp, #32]
   14088:	str	r3, [sp, #48]	; 0x30
   1408c:	b	140c8 <__assert_fail@plt+0x30dc>
   14090:	mov	r8, sl
   14094:	mov	sl, r7
   14098:	b	140c8 <__assert_fail@plt+0x30dc>
   1409c:	mov	r8, sl
   140a0:	mov	sl, r7
   140a4:	b	140c8 <__assert_fail@plt+0x30dc>
   140a8:	andeq	r7, r1, r4, lsr r0
   140ac:	andeq	r7, r1, r4, asr #32
   140b0:	andeq	r7, r1, r8, lsr r0
   140b4:	mov	r8, sl
   140b8:	mov	sl, r7
   140bc:	b	140c8 <__assert_fail@plt+0x30dc>
   140c0:	mov	r8, sl
   140c4:	mov	sl, r7
   140c8:	ldr	r3, [sp, #48]	; 0x30
   140cc:	cmp	r8, #2
   140d0:	movne	r3, #0
   140d4:	andeq	r3, r3, #1
   140d8:	cmp	r3, #0
   140dc:	movne	r8, #4
   140e0:	ldr	r3, [sp, #168]	; 0xa8
   140e4:	str	r3, [sp, #16]
   140e8:	ldr	r3, [sp, #164]	; 0xa4
   140ec:	str	r3, [sp, #12]
   140f0:	mov	r3, #0
   140f4:	str	r3, [sp, #8]
   140f8:	ldr	r3, [sp, #156]	; 0x9c
   140fc:	bic	r3, r3, #2
   14100:	str	r3, [sp, #4]
   14104:	str	r8, [sp]
   14108:	ldr	r3, [sp, #28]
   1410c:	ldr	r2, [sp, #52]	; 0x34
   14110:	mov	r1, sl
   14114:	ldr	r0, [sp, #36]	; 0x24
   14118:	bl	13010 <__assert_fail@plt+0x2024>
   1411c:	mov	fp, r0
   14120:	mov	r0, fp
   14124:	add	sp, sp, #116	; 0x74
   14128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412c:	mov	r8, sl
   14130:	mov	sl, r7
   14134:	b	140c8 <__assert_fail@plt+0x30dc>
   14138:	mov	r8, sl
   1413c:	mov	sl, r7
   14140:	b	140c8 <__assert_fail@plt+0x30dc>
   14144:	mov	r8, sl
   14148:	mov	sl, r7
   1414c:	b	140c8 <__assert_fail@plt+0x30dc>
   14150:	mov	r8, sl
   14154:	mov	sl, r7
   14158:	b	140e0 <__assert_fail@plt+0x30f4>
   1415c:	mov	r3, #1
   14160:	str	r3, [sp, #32]
   14164:	str	r3, [sp, #48]	; 0x30
   14168:	str	r3, [sp, #60]	; 0x3c
   1416c:	ldr	r3, [pc, #-196]	; 140b0 <__assert_fail@plt+0x30c4>
   14170:	str	r3, [sp, #72]	; 0x48
   14174:	mov	fp, #0
   14178:	mov	sl, #5
   1417c:	b	130cc <__assert_fail@plt+0x20e0>
   14180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14184:	sub	sp, sp, #52	; 0x34
   14188:	mov	r5, r0
   1418c:	str	r1, [sp, #24]
   14190:	str	r2, [sp, #28]
   14194:	mov	r4, r3
   14198:	bl	10f20 <__errno_location@plt>
   1419c:	str	r0, [sp, #32]
   141a0:	ldr	r3, [r0]
   141a4:	str	r3, [sp, #36]	; 0x24
   141a8:	ldr	r3, [pc, #396]	; 1433c <__assert_fail@plt+0x3350>
   141ac:	ldr	r6, [r3]
   141b0:	cmn	r5, #-2147483647	; 0x80000001
   141b4:	movne	r3, #0
   141b8:	moveq	r3, #1
   141bc:	orrs	r3, r3, r5, lsr #31
   141c0:	bne	14300 <__assert_fail@plt+0x3314>
   141c4:	ldr	r3, [pc, #368]	; 1433c <__assert_fail@plt+0x3350>
   141c8:	ldr	r2, [r3, #4]
   141cc:	cmp	r5, r2
   141d0:	blt	14238 <__assert_fail@plt+0x324c>
   141d4:	str	r2, [sp, #44]	; 0x2c
   141d8:	add	r3, r3, #8
   141dc:	cmp	r6, r3
   141e0:	beq	14304 <__assert_fail@plt+0x3318>
   141e4:	sub	r2, r5, r2
   141e8:	mov	r3, #8
   141ec:	str	r3, [sp]
   141f0:	mvn	r3, #-2147483648	; 0x80000000
   141f4:	add	r2, r2, #1
   141f8:	add	r1, sp, #44	; 0x2c
   141fc:	mov	r0, r6
   14200:	bl	15084 <__assert_fail@plt+0x4098>
   14204:	mov	r6, r0
   14208:	ldr	r3, [pc, #300]	; 1433c <__assert_fail@plt+0x3350>
   1420c:	str	r0, [r3]
   14210:	ldr	r7, [pc, #292]	; 1433c <__assert_fail@plt+0x3350>
   14214:	ldr	r0, [r7, #4]
   14218:	ldr	r2, [sp, #44]	; 0x2c
   1421c:	sub	r2, r2, r0
   14220:	lsl	r2, r2, #3
   14224:	mov	r1, #0
   14228:	add	r0, r6, r0, lsl #3
   1422c:	bl	10f38 <memset@plt>
   14230:	ldr	r3, [sp, #44]	; 0x2c
   14234:	str	r3, [r7, #4]
   14238:	add	fp, r6, r5, lsl #3
   1423c:	ldr	r8, [r6, r5, lsl #3]
   14240:	ldr	r7, [fp, #4]
   14244:	ldr	r9, [r4, #4]
   14248:	orr	r9, r9, #1
   1424c:	add	sl, r4, #8
   14250:	ldr	r3, [r4, #44]	; 0x2c
   14254:	str	r3, [sp, #16]
   14258:	ldr	r3, [r4, #40]	; 0x28
   1425c:	str	r3, [sp, #12]
   14260:	str	sl, [sp, #8]
   14264:	str	r9, [sp, #4]
   14268:	ldr	r3, [r4]
   1426c:	str	r3, [sp]
   14270:	ldr	r3, [sp, #28]
   14274:	ldr	r2, [sp, #24]
   14278:	mov	r1, r8
   1427c:	mov	r0, r7
   14280:	bl	13010 <__assert_fail@plt+0x2024>
   14284:	cmp	r8, r0
   14288:	bhi	142e8 <__assert_fail@plt+0x32fc>
   1428c:	add	r8, r0, #1
   14290:	str	r8, [r6, r5, lsl #3]
   14294:	ldr	r3, [pc, #164]	; 14340 <__assert_fail@plt+0x3354>
   14298:	cmp	r7, r3
   1429c:	beq	142a8 <__assert_fail@plt+0x32bc>
   142a0:	mov	r0, r7
   142a4:	bl	12928 <__assert_fail@plt+0x193c>
   142a8:	mov	r0, r8
   142ac:	bl	14f00 <__assert_fail@plt+0x3f14>
   142b0:	mov	r7, r0
   142b4:	str	r0, [fp, #4]
   142b8:	ldr	r3, [r4, #44]	; 0x2c
   142bc:	str	r3, [sp, #16]
   142c0:	ldr	r3, [r4, #40]	; 0x28
   142c4:	str	r3, [sp, #12]
   142c8:	str	sl, [sp, #8]
   142cc:	str	r9, [sp, #4]
   142d0:	ldr	r3, [r4]
   142d4:	str	r3, [sp]
   142d8:	ldr	r3, [sp, #28]
   142dc:	ldr	r2, [sp, #24]
   142e0:	mov	r1, r8
   142e4:	bl	13010 <__assert_fail@plt+0x2024>
   142e8:	ldr	r3, [sp, #32]
   142ec:	ldr	r2, [sp, #36]	; 0x24
   142f0:	str	r2, [r3]
   142f4:	mov	r0, r7
   142f8:	add	sp, sp, #52	; 0x34
   142fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14300:	bl	10fd4 <abort@plt>
   14304:	sub	r2, r5, r2
   14308:	mov	r3, #8
   1430c:	str	r3, [sp]
   14310:	mvn	r3, #-2147483648	; 0x80000000
   14314:	add	r2, r2, #1
   14318:	add	r1, sp, #44	; 0x2c
   1431c:	mov	r0, #0
   14320:	bl	15084 <__assert_fail@plt+0x4098>
   14324:	mov	r6, r0
   14328:	ldr	r3, [pc, #12]	; 1433c <__assert_fail@plt+0x3350>
   1432c:	str	r0, [r3], #8
   14330:	ldm	r3, {r0, r1}
   14334:	stm	r6, {r0, r1}
   14338:	b	14210 <__assert_fail@plt+0x3224>
   1433c:	andeq	r8, r2, r8, lsl #2
   14340:	muleq	r2, ip, r1
   14344:	push	{r4, r5, r6, lr}
   14348:	mov	r4, r0
   1434c:	bl	10f20 <__errno_location@plt>
   14350:	mov	r5, r0
   14354:	ldr	r6, [r0]
   14358:	cmp	r4, #0
   1435c:	ldr	r3, [pc, #20]	; 14378 <__assert_fail@plt+0x338c>
   14360:	moveq	r4, r3
   14364:	mov	r1, #48	; 0x30
   14368:	mov	r0, r4
   1436c:	bl	153ec <__assert_fail@plt+0x4400>
   14370:	str	r6, [r5]
   14374:	pop	{r4, r5, r6, pc}
   14378:	muleq	r2, ip, r2
   1437c:	subs	r3, r0, #0
   14380:	ldr	r2, [pc, #8]	; 14390 <__assert_fail@plt+0x33a4>
   14384:	moveq	r3, r2
   14388:	ldr	r0, [r3]
   1438c:	bx	lr
   14390:	muleq	r2, ip, r2
   14394:	subs	r3, r0, #0
   14398:	ldr	r2, [pc, #8]	; 143a8 <__assert_fail@plt+0x33bc>
   1439c:	moveq	r3, r2
   143a0:	str	r1, [r3]
   143a4:	bx	lr
   143a8:	muleq	r2, ip, r2
   143ac:	push	{lr}		; (str lr, [sp, #-4]!)
   143b0:	subs	r3, r0, #0
   143b4:	ldr	r0, [pc, #44]	; 143e8 <__assert_fail@plt+0x33fc>
   143b8:	moveq	r3, r0
   143bc:	add	r3, r3, #8
   143c0:	lsr	lr, r1, #5
   143c4:	and	r1, r1, #31
   143c8:	ldr	ip, [r3, lr, lsl #2]
   143cc:	lsr	r0, ip, r1
   143d0:	eor	r2, r2, r0
   143d4:	and	r2, r2, #1
   143d8:	eor	r1, ip, r2, lsl r1
   143dc:	str	r1, [r3, lr, lsl #2]
   143e0:	and	r0, r0, #1
   143e4:	pop	{pc}		; (ldr pc, [sp], #4)
   143e8:	muleq	r2, ip, r2
   143ec:	subs	r3, r0, #0
   143f0:	ldr	r2, [pc, #12]	; 14404 <__assert_fail@plt+0x3418>
   143f4:	moveq	r3, r2
   143f8:	ldr	r0, [r3, #4]
   143fc:	str	r1, [r3, #4]
   14400:	bx	lr
   14404:	muleq	r2, ip, r2
   14408:	subs	r3, r0, #0
   1440c:	ldr	r0, [pc, #40]	; 1443c <__assert_fail@plt+0x3450>
   14410:	moveq	r3, r0
   14414:	mov	r0, #10
   14418:	str	r0, [r3]
   1441c:	cmp	r2, #0
   14420:	cmpne	r1, #0
   14424:	beq	14434 <__assert_fail@plt+0x3448>
   14428:	str	r1, [r3, #40]	; 0x28
   1442c:	str	r2, [r3, #44]	; 0x2c
   14430:	bx	lr
   14434:	push	{r4, lr}
   14438:	bl	10fd4 <abort@plt>
   1443c:	muleq	r2, ip, r2
   14440:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14444:	sub	sp, sp, #24
   14448:	mov	r7, r0
   1444c:	mov	r8, r1
   14450:	mov	r9, r2
   14454:	mov	sl, r3
   14458:	ldr	r4, [sp, #56]	; 0x38
   1445c:	cmp	r4, #0
   14460:	ldr	r3, [pc, #84]	; 144bc <__assert_fail@plt+0x34d0>
   14464:	moveq	r4, r3
   14468:	bl	10f20 <__errno_location@plt>
   1446c:	mov	r5, r0
   14470:	ldr	r6, [r0]
   14474:	ldr	r3, [r4, #44]	; 0x2c
   14478:	str	r3, [sp, #16]
   1447c:	ldr	r3, [r4, #40]	; 0x28
   14480:	str	r3, [sp, #12]
   14484:	add	r3, r4, #8
   14488:	str	r3, [sp, #8]
   1448c:	ldr	r3, [r4, #4]
   14490:	str	r3, [sp, #4]
   14494:	ldr	r3, [r4]
   14498:	str	r3, [sp]
   1449c:	mov	r3, sl
   144a0:	mov	r2, r9
   144a4:	mov	r1, r8
   144a8:	mov	r0, r7
   144ac:	bl	13010 <__assert_fail@plt+0x2024>
   144b0:	str	r6, [r5]
   144b4:	add	sp, sp, #24
   144b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   144bc:	muleq	r2, ip, r2
   144c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144c4:	sub	sp, sp, #44	; 0x2c
   144c8:	str	r0, [sp, #28]
   144cc:	str	r1, [sp, #32]
   144d0:	mov	r6, r2
   144d4:	subs	r4, r3, #0
   144d8:	ldr	r3, [pc, #172]	; 1458c <__assert_fail@plt+0x35a0>
   144dc:	moveq	r4, r3
   144e0:	bl	10f20 <__errno_location@plt>
   144e4:	mov	r7, r0
   144e8:	ldr	fp, [r0]
   144ec:	ldr	r5, [r4, #4]
   144f0:	cmp	r6, #0
   144f4:	orreq	r5, r5, #1
   144f8:	add	r9, r4, #8
   144fc:	ldr	r3, [r4, #44]	; 0x2c
   14500:	str	r3, [sp, #16]
   14504:	ldr	r3, [r4, #40]	; 0x28
   14508:	str	r3, [sp, #12]
   1450c:	str	r9, [sp, #8]
   14510:	str	r5, [sp, #4]
   14514:	ldr	r3, [r4]
   14518:	str	r3, [sp]
   1451c:	ldr	r3, [sp, #32]
   14520:	ldr	r2, [sp, #28]
   14524:	mov	r1, #0
   14528:	mov	r0, r1
   1452c:	bl	13010 <__assert_fail@plt+0x2024>
   14530:	mov	sl, r0
   14534:	add	r8, r0, #1
   14538:	mov	r0, r8
   1453c:	bl	14f00 <__assert_fail@plt+0x3f14>
   14540:	str	r0, [sp, #36]	; 0x24
   14544:	ldr	r3, [r4, #44]	; 0x2c
   14548:	str	r3, [sp, #16]
   1454c:	ldr	r3, [r4, #40]	; 0x28
   14550:	str	r3, [sp, #12]
   14554:	str	r9, [sp, #8]
   14558:	str	r5, [sp, #4]
   1455c:	ldr	r3, [r4]
   14560:	str	r3, [sp]
   14564:	ldr	r3, [sp, #32]
   14568:	ldr	r2, [sp, #28]
   1456c:	mov	r1, r8
   14570:	bl	13010 <__assert_fail@plt+0x2024>
   14574:	str	fp, [r7]
   14578:	cmp	r6, #0
   1457c:	strne	sl, [r6]
   14580:	ldr	r0, [sp, #36]	; 0x24
   14584:	add	sp, sp, #44	; 0x2c
   14588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1458c:	muleq	r2, ip, r2
   14590:	push	{r4, lr}
   14594:	mov	r3, r2
   14598:	mov	r2, #0
   1459c:	bl	144c0 <__assert_fail@plt+0x34d4>
   145a0:	pop	{r4, pc}
   145a4:	push	{r4, r5, r6, r7, r8, lr}
   145a8:	ldr	r3, [pc, #140]	; 1463c <__assert_fail@plt+0x3650>
   145ac:	ldr	r7, [r3]
   145b0:	ldr	r3, [r3, #4]
   145b4:	cmp	r3, #1
   145b8:	ble	145e4 <__assert_fail@plt+0x35f8>
   145bc:	mov	r5, r7
   145c0:	mov	r4, #1
   145c4:	ldr	r6, [pc, #112]	; 1463c <__assert_fail@plt+0x3650>
   145c8:	ldr	r0, [r5, #12]
   145cc:	bl	12928 <__assert_fail@plt+0x193c>
   145d0:	add	r4, r4, #1
   145d4:	add	r5, r5, #8
   145d8:	ldr	r3, [r6, #4]
   145dc:	cmp	r3, r4
   145e0:	bgt	145c8 <__assert_fail@plt+0x35dc>
   145e4:	ldr	r0, [r7, #4]
   145e8:	ldr	r3, [pc, #80]	; 14640 <__assert_fail@plt+0x3654>
   145ec:	cmp	r0, r3
   145f0:	beq	1460c <__assert_fail@plt+0x3620>
   145f4:	bl	12928 <__assert_fail@plt+0x193c>
   145f8:	ldr	r3, [pc, #60]	; 1463c <__assert_fail@plt+0x3650>
   145fc:	mov	r2, #256	; 0x100
   14600:	str	r2, [r3, #8]
   14604:	ldr	r2, [pc, #52]	; 14640 <__assert_fail@plt+0x3654>
   14608:	str	r2, [r3, #12]
   1460c:	ldr	r3, [pc, #48]	; 14644 <__assert_fail@plt+0x3658>
   14610:	cmp	r7, r3
   14614:	beq	1462c <__assert_fail@plt+0x3640>
   14618:	mov	r0, r7
   1461c:	bl	12928 <__assert_fail@plt+0x193c>
   14620:	ldr	r3, [pc, #20]	; 1463c <__assert_fail@plt+0x3650>
   14624:	add	r2, r3, #8
   14628:	str	r2, [r3]
   1462c:	mov	r2, #1
   14630:	ldr	r3, [pc, #4]	; 1463c <__assert_fail@plt+0x3650>
   14634:	str	r2, [r3, #4]
   14638:	pop	{r4, r5, r6, r7, r8, pc}
   1463c:	andeq	r8, r2, r8, lsl #2
   14640:	muleq	r2, ip, r1
   14644:	andeq	r8, r2, r0, lsl r1
   14648:	push	{r4, lr}
   1464c:	ldr	r3, [pc, #8]	; 1465c <__assert_fail@plt+0x3670>
   14650:	mvn	r2, #0
   14654:	bl	14180 <__assert_fail@plt+0x3194>
   14658:	pop	{r4, pc}
   1465c:	muleq	r2, ip, r2
   14660:	push	{r4, lr}
   14664:	ldr	r3, [pc, #4]	; 14670 <__assert_fail@plt+0x3684>
   14668:	bl	14180 <__assert_fail@plt+0x3194>
   1466c:	pop	{r4, pc}
   14670:	muleq	r2, ip, r2
   14674:	push	{r4, lr}
   14678:	mov	r1, r0
   1467c:	mov	r0, #0
   14680:	bl	14648 <__assert_fail@plt+0x365c>
   14684:	pop	{r4, pc}
   14688:	push	{r4, lr}
   1468c:	mov	r2, r1
   14690:	mov	r1, r0
   14694:	mov	r0, #0
   14698:	bl	14660 <__assert_fail@plt+0x3674>
   1469c:	pop	{r4, pc}
   146a0:	push	{r4, r5, lr}
   146a4:	sub	sp, sp, #52	; 0x34
   146a8:	mov	r4, r0
   146ac:	mov	r5, r2
   146b0:	mov	r0, sp
   146b4:	bl	12ea8 <__assert_fail@plt+0x1ebc>
   146b8:	mov	r3, sp
   146bc:	mvn	r2, #0
   146c0:	mov	r1, r5
   146c4:	mov	r0, r4
   146c8:	bl	14180 <__assert_fail@plt+0x3194>
   146cc:	add	sp, sp, #52	; 0x34
   146d0:	pop	{r4, r5, pc}
   146d4:	push	{r4, r5, r6, lr}
   146d8:	sub	sp, sp, #48	; 0x30
   146dc:	mov	r4, r0
   146e0:	mov	r5, r2
   146e4:	mov	r6, r3
   146e8:	mov	r0, sp
   146ec:	bl	12ea8 <__assert_fail@plt+0x1ebc>
   146f0:	mov	r3, sp
   146f4:	mov	r2, r6
   146f8:	mov	r1, r5
   146fc:	mov	r0, r4
   14700:	bl	14180 <__assert_fail@plt+0x3194>
   14704:	add	sp, sp, #48	; 0x30
   14708:	pop	{r4, r5, r6, pc}
   1470c:	push	{r4, lr}
   14710:	mov	r2, r1
   14714:	mov	r1, r0
   14718:	mov	r0, #0
   1471c:	bl	146a0 <__assert_fail@plt+0x36b4>
   14720:	pop	{r4, pc}
   14724:	push	{r4, lr}
   14728:	mov	r3, r2
   1472c:	mov	r2, r1
   14730:	mov	r1, r0
   14734:	mov	r0, #0
   14738:	bl	146d4 <__assert_fail@plt+0x36e8>
   1473c:	pop	{r4, pc}
   14740:	push	{r4, r5, r6, lr}
   14744:	sub	sp, sp, #48	; 0x30
   14748:	mov	r4, r0
   1474c:	mov	r5, r1
   14750:	mov	r6, r2
   14754:	mov	ip, sp
   14758:	ldr	lr, [pc, #64]	; 147a0 <__assert_fail@plt+0x37b4>
   1475c:	ldm	lr!, {r0, r1, r2, r3}
   14760:	stmia	ip!, {r0, r1, r2, r3}
   14764:	ldm	lr!, {r0, r1, r2, r3}
   14768:	stmia	ip!, {r0, r1, r2, r3}
   1476c:	ldm	lr, {r0, r1, r2, r3}
   14770:	stm	ip, {r0, r1, r2, r3}
   14774:	mov	r2, #1
   14778:	mov	r1, r6
   1477c:	mov	r0, sp
   14780:	bl	143ac <__assert_fail@plt+0x33c0>
   14784:	mov	r3, sp
   14788:	mov	r2, r5
   1478c:	mov	r1, r4
   14790:	mov	r0, #0
   14794:	bl	14180 <__assert_fail@plt+0x3194>
   14798:	add	sp, sp, #48	; 0x30
   1479c:	pop	{r4, r5, r6, pc}
   147a0:	muleq	r2, ip, r2
   147a4:	push	{r4, lr}
   147a8:	mov	r2, r1
   147ac:	mvn	r1, #0
   147b0:	bl	14740 <__assert_fail@plt+0x3754>
   147b4:	pop	{r4, pc}
   147b8:	push	{r4, lr}
   147bc:	mov	r1, #58	; 0x3a
   147c0:	bl	147a4 <__assert_fail@plt+0x37b8>
   147c4:	pop	{r4, pc}
   147c8:	push	{r4, lr}
   147cc:	mov	r2, #58	; 0x3a
   147d0:	bl	14740 <__assert_fail@plt+0x3754>
   147d4:	pop	{r4, pc}
   147d8:	push	{r4, r5, lr}
   147dc:	sub	sp, sp, #100	; 0x64
   147e0:	mov	r4, r0
   147e4:	mov	r5, r2
   147e8:	mov	r0, sp
   147ec:	bl	12ea8 <__assert_fail@plt+0x1ebc>
   147f0:	add	lr, sp, #48	; 0x30
   147f4:	mov	ip, sp
   147f8:	ldm	ip!, {r0, r1, r2, r3}
   147fc:	stmia	lr!, {r0, r1, r2, r3}
   14800:	ldm	ip!, {r0, r1, r2, r3}
   14804:	stmia	lr!, {r0, r1, r2, r3}
   14808:	ldm	ip, {r0, r1, r2, r3}
   1480c:	stm	lr, {r0, r1, r2, r3}
   14810:	mov	r2, #1
   14814:	mov	r1, #58	; 0x3a
   14818:	add	r0, sp, #48	; 0x30
   1481c:	bl	143ac <__assert_fail@plt+0x33c0>
   14820:	add	r3, sp, #48	; 0x30
   14824:	mvn	r2, #0
   14828:	mov	r1, r5
   1482c:	mov	r0, r4
   14830:	bl	14180 <__assert_fail@plt+0x3194>
   14834:	add	sp, sp, #100	; 0x64
   14838:	pop	{r4, r5, pc}
   1483c:	push	{r4, r5, r6, r7, lr}
   14840:	sub	sp, sp, #52	; 0x34
   14844:	mov	r4, r0
   14848:	mov	r6, r1
   1484c:	mov	r7, r2
   14850:	mov	r5, r3
   14854:	mov	ip, sp
   14858:	ldr	lr, [pc, #64]	; 148a0 <__assert_fail@plt+0x38b4>
   1485c:	ldm	lr!, {r0, r1, r2, r3}
   14860:	stmia	ip!, {r0, r1, r2, r3}
   14864:	ldm	lr!, {r0, r1, r2, r3}
   14868:	stmia	ip!, {r0, r1, r2, r3}
   1486c:	ldm	lr, {r0, r1, r2, r3}
   14870:	stm	ip, {r0, r1, r2, r3}
   14874:	mov	r2, r7
   14878:	mov	r1, r6
   1487c:	mov	r0, sp
   14880:	bl	14408 <__assert_fail@plt+0x341c>
   14884:	mov	r3, sp
   14888:	ldr	r2, [sp, #72]	; 0x48
   1488c:	mov	r1, r5
   14890:	mov	r0, r4
   14894:	bl	14180 <__assert_fail@plt+0x3194>
   14898:	add	sp, sp, #52	; 0x34
   1489c:	pop	{r4, r5, r6, r7, pc}
   148a0:	muleq	r2, ip, r2
   148a4:	push	{lr}		; (str lr, [sp, #-4]!)
   148a8:	sub	sp, sp, #12
   148ac:	mvn	ip, #0
   148b0:	str	ip, [sp]
   148b4:	bl	1483c <__assert_fail@plt+0x3850>
   148b8:	add	sp, sp, #12
   148bc:	pop	{pc}		; (ldr pc, [sp], #4)
   148c0:	push	{r4, lr}
   148c4:	mov	r3, r2
   148c8:	mov	r2, r1
   148cc:	mov	r1, r0
   148d0:	mov	r0, #0
   148d4:	bl	148a4 <__assert_fail@plt+0x38b8>
   148d8:	pop	{r4, pc}
   148dc:	push	{lr}		; (str lr, [sp, #-4]!)
   148e0:	sub	sp, sp, #12
   148e4:	str	r3, [sp]
   148e8:	mov	r3, r2
   148ec:	mov	r2, r1
   148f0:	mov	r1, r0
   148f4:	mov	r0, #0
   148f8:	bl	1483c <__assert_fail@plt+0x3850>
   148fc:	add	sp, sp, #12
   14900:	pop	{pc}		; (ldr pc, [sp], #4)
   14904:	push	{r4, lr}
   14908:	ldr	r3, [pc, #4]	; 14914 <__assert_fail@plt+0x3928>
   1490c:	bl	14180 <__assert_fail@plt+0x3194>
   14910:	pop	{r4, pc}
   14914:	andeq	r8, r2, r8, lsl r1
   14918:	push	{r4, lr}
   1491c:	mov	r2, r1
   14920:	mov	r1, r0
   14924:	mov	r0, #0
   14928:	bl	14904 <__assert_fail@plt+0x3918>
   1492c:	pop	{r4, pc}
   14930:	push	{r4, lr}
   14934:	mvn	r2, #0
   14938:	bl	14904 <__assert_fail@plt+0x3918>
   1493c:	pop	{r4, pc}
   14940:	push	{r4, lr}
   14944:	mov	r1, r0
   14948:	mov	r0, #0
   1494c:	bl	14930 <__assert_fail@plt+0x3944>
   14950:	pop	{r4, pc}
   14954:	push	{r4, r5, r6, lr}
   14958:	sub	sp, sp, #32
   1495c:	mov	r4, r0
   14960:	ldr	r5, [sp, #48]	; 0x30
   14964:	ldr	r6, [sp, #52]	; 0x34
   14968:	cmp	r1, #0
   1496c:	beq	14a24 <__assert_fail@plt+0x3a38>
   14970:	str	r3, [sp, #4]
   14974:	str	r2, [sp]
   14978:	mov	r3, r1
   1497c:	ldr	r2, [pc, #940]	; 14d30 <__assert_fail@plt+0x3d44>
   14980:	mov	r1, #1
   14984:	bl	10f5c <__fprintf_chk@plt>
   14988:	mov	r2, #5
   1498c:	ldr	r1, [pc, #928]	; 14d34 <__assert_fail@plt+0x3d48>
   14990:	mov	r0, #0
   14994:	bl	10e00 <dcgettext@plt>
   14998:	ldr	r3, [pc, #920]	; 14d38 <__assert_fail@plt+0x3d4c>
   1499c:	str	r3, [sp]
   149a0:	mov	r3, r0
   149a4:	ldr	r2, [pc, #912]	; 14d3c <__assert_fail@plt+0x3d50>
   149a8:	mov	r1, #1
   149ac:	mov	r0, r4
   149b0:	bl	10f5c <__fprintf_chk@plt>
   149b4:	mov	r1, r4
   149b8:	mov	r0, #10
   149bc:	bl	10df4 <fputc_unlocked@plt>
   149c0:	mov	r2, #5
   149c4:	ldr	r1, [pc, #884]	; 14d40 <__assert_fail@plt+0x3d54>
   149c8:	mov	r0, #0
   149cc:	bl	10e00 <dcgettext@plt>
   149d0:	ldr	r3, [pc, #876]	; 14d44 <__assert_fail@plt+0x3d58>
   149d4:	mov	r2, r0
   149d8:	mov	r1, #1
   149dc:	mov	r0, r4
   149e0:	bl	10f5c <__fprintf_chk@plt>
   149e4:	mov	r1, r4
   149e8:	mov	r0, #10
   149ec:	bl	10df4 <fputc_unlocked@plt>
   149f0:	cmp	r6, #9
   149f4:	ldrls	pc, [pc, r6, lsl #2]
   149f8:	b	14cc8 <__assert_fail@plt+0x3cdc>
   149fc:	andeq	r4, r1, r0, ror #20
   14a00:	andeq	r4, r1, ip, lsr sl
   14a04:	andeq	r4, r1, r8, ror #20
   14a08:	muleq	r1, r8, sl
   14a0c:	ldrdeq	r4, [r1], -r0
   14a10:	andeq	r4, r1, r0, lsl fp
   14a14:	andeq	r4, r1, r8, asr fp
   14a18:	andeq	r4, r1, r8, lsr #23
   14a1c:	andeq	r4, r1, r0, lsl #24
   14a20:	andeq	r4, r1, r0, ror #24
   14a24:	str	r3, [sp]
   14a28:	mov	r3, r2
   14a2c:	ldr	r2, [pc, #788]	; 14d48 <__assert_fail@plt+0x3d5c>
   14a30:	mov	r1, #1
   14a34:	bl	10f5c <__fprintf_chk@plt>
   14a38:	b	14988 <__assert_fail@plt+0x399c>
   14a3c:	mov	r2, #5
   14a40:	ldr	r1, [pc, #772]	; 14d4c <__assert_fail@plt+0x3d60>
   14a44:	mov	r0, #0
   14a48:	bl	10e00 <dcgettext@plt>
   14a4c:	ldr	r3, [r5]
   14a50:	mov	r2, r0
   14a54:	mov	r1, #1
   14a58:	mov	r0, r4
   14a5c:	bl	10f5c <__fprintf_chk@plt>
   14a60:	add	sp, sp, #32
   14a64:	pop	{r4, r5, r6, pc}
   14a68:	mov	r2, #5
   14a6c:	ldr	r1, [pc, #732]	; 14d50 <__assert_fail@plt+0x3d64>
   14a70:	mov	r0, #0
   14a74:	bl	10e00 <dcgettext@plt>
   14a78:	ldr	r3, [r5]
   14a7c:	ldr	r2, [r5, #4]
   14a80:	str	r2, [sp]
   14a84:	mov	r2, r0
   14a88:	mov	r1, #1
   14a8c:	mov	r0, r4
   14a90:	bl	10f5c <__fprintf_chk@plt>
   14a94:	b	14a60 <__assert_fail@plt+0x3a74>
   14a98:	mov	r2, #5
   14a9c:	ldr	r1, [pc, #688]	; 14d54 <__assert_fail@plt+0x3d68>
   14aa0:	mov	r0, #0
   14aa4:	bl	10e00 <dcgettext@plt>
   14aa8:	ldr	r3, [r5]
   14aac:	ldr	r2, [r5, #8]
   14ab0:	str	r2, [sp, #4]
   14ab4:	ldr	r2, [r5, #4]
   14ab8:	str	r2, [sp]
   14abc:	mov	r2, r0
   14ac0:	mov	r1, #1
   14ac4:	mov	r0, r4
   14ac8:	bl	10f5c <__fprintf_chk@plt>
   14acc:	b	14a60 <__assert_fail@plt+0x3a74>
   14ad0:	mov	r2, #5
   14ad4:	ldr	r1, [pc, #636]	; 14d58 <__assert_fail@plt+0x3d6c>
   14ad8:	mov	r0, #0
   14adc:	bl	10e00 <dcgettext@plt>
   14ae0:	ldr	r3, [r5]
   14ae4:	ldr	r2, [r5, #12]
   14ae8:	str	r2, [sp, #8]
   14aec:	ldr	r2, [r5, #8]
   14af0:	str	r2, [sp, #4]
   14af4:	ldr	r2, [r5, #4]
   14af8:	str	r2, [sp]
   14afc:	mov	r2, r0
   14b00:	mov	r1, #1
   14b04:	mov	r0, r4
   14b08:	bl	10f5c <__fprintf_chk@plt>
   14b0c:	b	14a60 <__assert_fail@plt+0x3a74>
   14b10:	mov	r2, #5
   14b14:	ldr	r1, [pc, #576]	; 14d5c <__assert_fail@plt+0x3d70>
   14b18:	mov	r0, #0
   14b1c:	bl	10e00 <dcgettext@plt>
   14b20:	ldr	r3, [r5]
   14b24:	ldr	r2, [r5, #16]
   14b28:	str	r2, [sp, #12]
   14b2c:	ldr	r2, [r5, #12]
   14b30:	str	r2, [sp, #8]
   14b34:	ldr	r2, [r5, #8]
   14b38:	str	r2, [sp, #4]
   14b3c:	ldr	r2, [r5, #4]
   14b40:	str	r2, [sp]
   14b44:	mov	r2, r0
   14b48:	mov	r1, #1
   14b4c:	mov	r0, r4
   14b50:	bl	10f5c <__fprintf_chk@plt>
   14b54:	b	14a60 <__assert_fail@plt+0x3a74>
   14b58:	mov	r2, #5
   14b5c:	ldr	r1, [pc, #508]	; 14d60 <__assert_fail@plt+0x3d74>
   14b60:	mov	r0, #0
   14b64:	bl	10e00 <dcgettext@plt>
   14b68:	ldr	r3, [r5]
   14b6c:	ldr	r2, [r5, #20]
   14b70:	str	r2, [sp, #16]
   14b74:	ldr	r2, [r5, #16]
   14b78:	str	r2, [sp, #12]
   14b7c:	ldr	r2, [r5, #12]
   14b80:	str	r2, [sp, #8]
   14b84:	ldr	r2, [r5, #8]
   14b88:	str	r2, [sp, #4]
   14b8c:	ldr	r2, [r5, #4]
   14b90:	str	r2, [sp]
   14b94:	mov	r2, r0
   14b98:	mov	r1, #1
   14b9c:	mov	r0, r4
   14ba0:	bl	10f5c <__fprintf_chk@plt>
   14ba4:	b	14a60 <__assert_fail@plt+0x3a74>
   14ba8:	mov	r2, #5
   14bac:	ldr	r1, [pc, #432]	; 14d64 <__assert_fail@plt+0x3d78>
   14bb0:	mov	r0, #0
   14bb4:	bl	10e00 <dcgettext@plt>
   14bb8:	ldr	r3, [r5]
   14bbc:	ldr	r2, [r5, #24]
   14bc0:	str	r2, [sp, #20]
   14bc4:	ldr	r2, [r5, #20]
   14bc8:	str	r2, [sp, #16]
   14bcc:	ldr	r2, [r5, #16]
   14bd0:	str	r2, [sp, #12]
   14bd4:	ldr	r2, [r5, #12]
   14bd8:	str	r2, [sp, #8]
   14bdc:	ldr	r2, [r5, #8]
   14be0:	str	r2, [sp, #4]
   14be4:	ldr	r2, [r5, #4]
   14be8:	str	r2, [sp]
   14bec:	mov	r2, r0
   14bf0:	mov	r1, #1
   14bf4:	mov	r0, r4
   14bf8:	bl	10f5c <__fprintf_chk@plt>
   14bfc:	b	14a60 <__assert_fail@plt+0x3a74>
   14c00:	mov	r2, #5
   14c04:	ldr	r1, [pc, #348]	; 14d68 <__assert_fail@plt+0x3d7c>
   14c08:	mov	r0, #0
   14c0c:	bl	10e00 <dcgettext@plt>
   14c10:	ldr	r3, [r5]
   14c14:	ldr	r2, [r5, #28]
   14c18:	str	r2, [sp, #24]
   14c1c:	ldr	r2, [r5, #24]
   14c20:	str	r2, [sp, #20]
   14c24:	ldr	r2, [r5, #20]
   14c28:	str	r2, [sp, #16]
   14c2c:	ldr	r2, [r5, #16]
   14c30:	str	r2, [sp, #12]
   14c34:	ldr	r2, [r5, #12]
   14c38:	str	r2, [sp, #8]
   14c3c:	ldr	r2, [r5, #8]
   14c40:	str	r2, [sp, #4]
   14c44:	ldr	r2, [r5, #4]
   14c48:	str	r2, [sp]
   14c4c:	mov	r2, r0
   14c50:	mov	r1, #1
   14c54:	mov	r0, r4
   14c58:	bl	10f5c <__fprintf_chk@plt>
   14c5c:	b	14a60 <__assert_fail@plt+0x3a74>
   14c60:	mov	r2, #5
   14c64:	ldr	r1, [pc, #256]	; 14d6c <__assert_fail@plt+0x3d80>
   14c68:	mov	r0, #0
   14c6c:	bl	10e00 <dcgettext@plt>
   14c70:	ldr	r3, [r5]
   14c74:	ldr	r2, [r5, #32]
   14c78:	str	r2, [sp, #28]
   14c7c:	ldr	r2, [r5, #28]
   14c80:	str	r2, [sp, #24]
   14c84:	ldr	r2, [r5, #24]
   14c88:	str	r2, [sp, #20]
   14c8c:	ldr	r2, [r5, #20]
   14c90:	str	r2, [sp, #16]
   14c94:	ldr	r2, [r5, #16]
   14c98:	str	r2, [sp, #12]
   14c9c:	ldr	r2, [r5, #12]
   14ca0:	str	r2, [sp, #8]
   14ca4:	ldr	r2, [r5, #8]
   14ca8:	str	r2, [sp, #4]
   14cac:	ldr	r2, [r5, #4]
   14cb0:	str	r2, [sp]
   14cb4:	mov	r2, r0
   14cb8:	mov	r1, #1
   14cbc:	mov	r0, r4
   14cc0:	bl	10f5c <__fprintf_chk@plt>
   14cc4:	b	14a60 <__assert_fail@plt+0x3a74>
   14cc8:	mov	r2, #5
   14ccc:	ldr	r1, [pc, #156]	; 14d70 <__assert_fail@plt+0x3d84>
   14cd0:	mov	r0, #0
   14cd4:	bl	10e00 <dcgettext@plt>
   14cd8:	ldr	r3, [r5]
   14cdc:	ldr	r2, [r5, #32]
   14ce0:	str	r2, [sp, #28]
   14ce4:	ldr	r2, [r5, #28]
   14ce8:	str	r2, [sp, #24]
   14cec:	ldr	r2, [r5, #24]
   14cf0:	str	r2, [sp, #20]
   14cf4:	ldr	r2, [r5, #20]
   14cf8:	str	r2, [sp, #16]
   14cfc:	ldr	r2, [r5, #16]
   14d00:	str	r2, [sp, #12]
   14d04:	ldr	r2, [r5, #12]
   14d08:	str	r2, [sp, #8]
   14d0c:	ldr	r2, [r5, #8]
   14d10:	str	r2, [sp, #4]
   14d14:	ldr	r2, [r5, #4]
   14d18:	str	r2, [sp]
   14d1c:	mov	r2, r0
   14d20:	mov	r1, #1
   14d24:	mov	r0, r4
   14d28:	bl	10f5c <__fprintf_chk@plt>
   14d2c:	b	14a60 <__assert_fail@plt+0x3a74>
   14d30:	andeq	r7, r1, ip, lsr #1
   14d34:	andeq	r7, r1, r0, asr #1
   14d38:	andeq	r0, r0, r6, ror #15
   14d3c:	muleq	r1, r8, r3
   14d40:	andeq	r7, r1, r4, asr #1
   14d44:	andeq	r7, r1, r0, ror r1
   14d48:	strheq	r7, [r1], -r8
   14d4c:	muleq	r1, r4, r1
   14d50:	andeq	r7, r1, r4, lsr #3
   14d54:			; <UNDEFINED> instruction: 0x000171bc
   14d58:	ldrdeq	r7, [r1], -r8
   14d5c:	strdeq	r7, [r1], -r8
   14d60:	andeq	r7, r1, ip, lsl r2
   14d64:	andeq	r7, r1, r4, asr #4
   14d68:	andeq	r7, r1, r0, ror r2
   14d6c:	andeq	r7, r1, r0, lsr #5
   14d70:	ldrdeq	r7, [r1], -r4
   14d74:	push	{r4, r5, lr}
   14d78:	sub	sp, sp, #12
   14d7c:	ldr	r5, [sp, #24]
   14d80:	ldr	ip, [r5]
   14d84:	cmp	ip, #0
   14d88:	beq	14db8 <__assert_fail@plt+0x3dcc>
   14d8c:	mov	lr, r5
   14d90:	mov	ip, #0
   14d94:	add	ip, ip, #1
   14d98:	ldr	r4, [lr, #4]!
   14d9c:	cmp	r4, #0
   14da0:	bne	14d94 <__assert_fail@plt+0x3da8>
   14da4:	str	ip, [sp, #4]
   14da8:	str	r5, [sp]
   14dac:	bl	14954 <__assert_fail@plt+0x3968>
   14db0:	add	sp, sp, #12
   14db4:	pop	{r4, r5, pc}
   14db8:	mov	ip, #0
   14dbc:	b	14da4 <__assert_fail@plt+0x3db8>
   14dc0:	push	{r4, r5, lr}
   14dc4:	sub	sp, sp, #52	; 0x34
   14dc8:	ldr	r4, [sp, #64]	; 0x40
   14dcc:	sub	r4, r4, #4
   14dd0:	add	r5, sp, #4
   14dd4:	mov	ip, #0
   14dd8:	ldr	lr, [r4, #4]!
   14ddc:	str	lr, [r5, #4]!
   14de0:	cmp	lr, #0
   14de4:	beq	14df4 <__assert_fail@plt+0x3e08>
   14de8:	add	ip, ip, #1
   14dec:	cmp	ip, #10
   14df0:	bne	14dd8 <__assert_fail@plt+0x3dec>
   14df4:	str	ip, [sp, #4]
   14df8:	add	ip, sp, #8
   14dfc:	str	ip, [sp]
   14e00:	bl	14954 <__assert_fail@plt+0x3968>
   14e04:	add	sp, sp, #52	; 0x34
   14e08:	pop	{r4, r5, pc}
   14e0c:	push	{r3}		; (str r3, [sp, #-4]!)
   14e10:	push	{lr}		; (str lr, [sp, #-4]!)
   14e14:	sub	sp, sp, #16
   14e18:	add	r3, sp, #24
   14e1c:	str	r3, [sp, #12]
   14e20:	str	r3, [sp]
   14e24:	ldr	r3, [sp, #20]
   14e28:	bl	14dc0 <__assert_fail@plt+0x3dd4>
   14e2c:	add	sp, sp, #16
   14e30:	pop	{lr}		; (ldr lr, [sp], #4)
   14e34:	add	sp, sp, #4
   14e38:	bx	lr
   14e3c:	push	{r4, lr}
   14e40:	ldr	r3, [pc, #112]	; 14eb8 <__assert_fail@plt+0x3ecc>
   14e44:	ldr	r1, [r3]
   14e48:	mov	r0, #10
   14e4c:	bl	10df4 <fputc_unlocked@plt>
   14e50:	mov	r2, #5
   14e54:	ldr	r1, [pc, #96]	; 14ebc <__assert_fail@plt+0x3ed0>
   14e58:	mov	r0, #0
   14e5c:	bl	10e00 <dcgettext@plt>
   14e60:	ldr	r2, [pc, #88]	; 14ec0 <__assert_fail@plt+0x3ed4>
   14e64:	mov	r1, r0
   14e68:	mov	r0, #1
   14e6c:	bl	10f44 <__printf_chk@plt>
   14e70:	mov	r2, #5
   14e74:	ldr	r1, [pc, #72]	; 14ec4 <__assert_fail@plt+0x3ed8>
   14e78:	mov	r0, #0
   14e7c:	bl	10e00 <dcgettext@plt>
   14e80:	ldr	r3, [pc, #64]	; 14ec8 <__assert_fail@plt+0x3edc>
   14e84:	ldr	r2, [pc, #64]	; 14ecc <__assert_fail@plt+0x3ee0>
   14e88:	mov	r1, r0
   14e8c:	mov	r0, #1
   14e90:	bl	10f44 <__printf_chk@plt>
   14e94:	mov	r2, #5
   14e98:	ldr	r1, [pc, #48]	; 14ed0 <__assert_fail@plt+0x3ee4>
   14e9c:	mov	r0, #0
   14ea0:	bl	10e00 <dcgettext@plt>
   14ea4:	ldr	r2, [pc, #40]	; 14ed4 <__assert_fail@plt+0x3ee8>
   14ea8:	mov	r1, r0
   14eac:	mov	r0, #1
   14eb0:	bl	10f44 <__printf_chk@plt>
   14eb4:	pop	{r4, pc}
   14eb8:	andeq	r8, r2, r4, ror #2
   14ebc:	andeq	r7, r1, r0, lsl r3
   14ec0:	andeq	r7, r1, r4, lsr #6
   14ec4:	andeq	r7, r1, ip, lsr r3
   14ec8:	andeq	r6, r1, r8, asr fp
   14ecc:	andeq	r6, r1, r0, lsl #23
   14ed0:	andeq	r7, r1, r0, asr r3
   14ed4:	andeq	r7, r1, r8, ror r3
   14ed8:	push	{r4, lr}
   14edc:	bl	15a74 <__assert_fail@plt+0x4a88>
   14ee0:	cmp	r0, #0
   14ee4:	popne	{r4, pc}
   14ee8:	bl	1547c <__assert_fail@plt+0x4490>
   14eec:	push	{r4, lr}
   14ef0:	bl	15a74 <__assert_fail@plt+0x4a88>
   14ef4:	cmp	r0, #0
   14ef8:	popne	{r4, pc}
   14efc:	bl	1547c <__assert_fail@plt+0x4490>
   14f00:	push	{r4, lr}
   14f04:	bl	14ed8 <__assert_fail@plt+0x3eec>
   14f08:	pop	{r4, pc}
   14f0c:	push	{r4, r5, r6, lr}
   14f10:	mov	r5, r0
   14f14:	mov	r4, r1
   14f18:	bl	15aa4 <__assert_fail@plt+0x4ab8>
   14f1c:	cmp	r0, #0
   14f20:	popne	{r4, r5, r6, pc}
   14f24:	adds	r4, r4, #0
   14f28:	movne	r4, #1
   14f2c:	cmp	r5, #0
   14f30:	orreq	r4, r4, #1
   14f34:	cmp	r4, #0
   14f38:	popeq	{r4, r5, r6, pc}
   14f3c:	bl	1547c <__assert_fail@plt+0x4490>
   14f40:	push	{r4, lr}
   14f44:	cmp	r1, #0
   14f48:	orreq	r1, r1, #1
   14f4c:	bl	15aa4 <__assert_fail@plt+0x4ab8>
   14f50:	cmp	r0, #0
   14f54:	popne	{r4, pc}
   14f58:	bl	1547c <__assert_fail@plt+0x4490>
   14f5c:	push	{r4, r5, r6, lr}
   14f60:	mov	r6, r0
   14f64:	mov	r5, r1
   14f68:	mov	r4, r2
   14f6c:	bl	15bf8 <__assert_fail@plt+0x4c0c>
   14f70:	cmp	r0, #0
   14f74:	popne	{r4, r5, r6, pc}
   14f78:	cmp	r6, #0
   14f7c:	beq	14f8c <__assert_fail@plt+0x3fa0>
   14f80:	cmp	r5, #0
   14f84:	cmpne	r4, #0
   14f88:	popeq	{r4, r5, r6, pc}
   14f8c:	bl	1547c <__assert_fail@plt+0x4490>
   14f90:	push	{r4, lr}
   14f94:	bl	14f5c <__assert_fail@plt+0x3f70>
   14f98:	pop	{r4, pc}
   14f9c:	push	{r4, lr}
   14fa0:	mov	ip, r1
   14fa4:	mov	r3, r2
   14fa8:	cmp	r2, #0
   14fac:	cmpne	r1, #0
   14fb0:	moveq	r3, #1
   14fb4:	moveq	ip, r3
   14fb8:	mov	r2, r3
   14fbc:	mov	r1, ip
   14fc0:	bl	15bf8 <__assert_fail@plt+0x4c0c>
   14fc4:	cmp	r0, #0
   14fc8:	popne	{r4, pc}
   14fcc:	bl	1547c <__assert_fail@plt+0x4490>
   14fd0:	push	{r4, lr}
   14fd4:	mov	r2, r1
   14fd8:	mov	r1, r0
   14fdc:	mov	r0, #0
   14fe0:	bl	14f5c <__assert_fail@plt+0x3f70>
   14fe4:	pop	{r4, pc}
   14fe8:	push	{r4, lr}
   14fec:	mov	r2, r1
   14ff0:	mov	r1, r0
   14ff4:	mov	r0, #0
   14ff8:	bl	14f9c <__assert_fail@plt+0x3fb0>
   14ffc:	pop	{r4, pc}
   15000:	push	{r4, r5, r6, r7, r8, lr}
   15004:	mov	r5, r1
   15008:	mov	r6, r2
   1500c:	ldr	r4, [r1]
   15010:	subs	r7, r0, #0
   15014:	beq	15030 <__assert_fail@plt+0x4044>
   15018:	lsr	r2, r4, #1
   1501c:	add	r3, r2, #1
   15020:	mvn	r3, r3
   15024:	cmp	r4, r3
   15028:	bls	15054 <__assert_fail@plt+0x4068>
   1502c:	bl	1547c <__assert_fail@plt+0x4490>
   15030:	cmp	r4, #0
   15034:	bne	1505c <__assert_fail@plt+0x4070>
   15038:	mov	r1, r2
   1503c:	mov	r0, #64	; 0x40
   15040:	bl	15d4c <__assert_fail@plt+0x4d60>
   15044:	cmp	r0, #0
   15048:	movne	r4, r0
   1504c:	addeq	r4, r0, #1
   15050:	b	1505c <__assert_fail@plt+0x4070>
   15054:	add	r4, r4, #1
   15058:	add	r4, r4, r2
   1505c:	mov	r2, r6
   15060:	mov	r1, r4
   15064:	mov	r0, r7
   15068:	bl	14f5c <__assert_fail@plt+0x3f70>
   1506c:	str	r4, [r5]
   15070:	pop	{r4, r5, r6, r7, r8, pc}
   15074:	push	{r4, lr}
   15078:	mov	r2, #1
   1507c:	bl	15000 <__assert_fail@plt+0x4014>
   15080:	pop	{r4, pc}
   15084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15088:	sub	sp, sp, #12
   1508c:	mov	fp, r0
   15090:	mov	sl, r1
   15094:	mov	r9, r2
   15098:	mov	r7, r3
   1509c:	ldr	r6, [sp, #48]	; 0x30
   150a0:	ldr	r5, [r1]
   150a4:	asrs	r4, r5, #1
   150a8:	bmi	15204 <__assert_fail@plt+0x4218>
   150ac:	cmp	r5, #0
   150b0:	blt	15218 <__assert_fail@plt+0x422c>
   150b4:	mvn	r3, #-2147483648	; 0x80000000
   150b8:	sub	r3, r3, r4
   150bc:	cmp	r5, r3
   150c0:	movle	r3, #0
   150c4:	movgt	r3, #1
   150c8:	cmp	r3, #0
   150cc:	addeq	r4, r4, r5
   150d0:	mvnne	r4, #-2147483648	; 0x80000000
   150d4:	mvn	r8, r7
   150d8:	lsr	r8, r8, #31
   150dc:	cmp	r7, r4
   150e0:	movge	r3, #0
   150e4:	andlt	r3, r8, #1
   150e8:	cmp	r3, #0
   150ec:	movne	r4, r7
   150f0:	cmp	r6, #0
   150f4:	blt	1522c <__assert_fail@plt+0x4240>
   150f8:	cmp	r6, #0
   150fc:	beq	152d8 <__assert_fail@plt+0x42ec>
   15100:	cmp	r4, #0
   15104:	blt	15288 <__assert_fail@plt+0x429c>
   15108:	mov	r1, r6
   1510c:	mvn	r0, #-2147483648	; 0x80000000
   15110:	bl	15f58 <__assert_fail@plt+0x4f6c>
   15114:	cmp	r0, r4
   15118:	movge	r0, #0
   1511c:	movlt	r0, #1
   15120:	cmp	r0, #0
   15124:	mvnne	r3, #-2147483648	; 0x80000000
   15128:	strne	r3, [sp, #4]
   1512c:	beq	152c0 <__assert_fail@plt+0x42d4>
   15130:	mov	r1, r6
   15134:	ldr	r0, [sp, #4]
   15138:	bl	15f58 <__assert_fail@plt+0x4f6c>
   1513c:	mov	r4, r0
   15140:	mov	r1, r6
   15144:	ldr	r0, [sp, #4]
   15148:	bl	16178 <__assert_fail@plt+0x518c>
   1514c:	ldr	r3, [sp, #4]
   15150:	sub	r1, r3, r1
   15154:	cmp	fp, #0
   15158:	moveq	r3, #0
   1515c:	streq	r3, [sl]
   15160:	sub	r3, r4, r5
   15164:	cmp	r3, r9
   15168:	bge	151f0 <__assert_fail@plt+0x4204>
   1516c:	cmp	r9, #0
   15170:	blt	152e4 <__assert_fail@plt+0x42f8>
   15174:	cmp	r5, #0
   15178:	blt	152f8 <__assert_fail@plt+0x430c>
   1517c:	mvn	r3, #-2147483648	; 0x80000000
   15180:	sub	r3, r3, r9
   15184:	cmp	r5, r3
   15188:	movle	r3, #0
   1518c:	movgt	r3, #1
   15190:	cmp	r3, #0
   15194:	bne	153a0 <__assert_fail@plt+0x43b4>
   15198:	add	r5, r5, r9
   1519c:	mov	r4, r5
   151a0:	cmp	r7, r5
   151a4:	movge	r7, #0
   151a8:	andlt	r7, r8, #1
   151ac:	cmp	r7, #0
   151b0:	bne	153a0 <__assert_fail@plt+0x43b4>
   151b4:	cmp	r6, #0
   151b8:	blt	1530c <__assert_fail@plt+0x4320>
   151bc:	cmp	r6, #0
   151c0:	beq	151ec <__assert_fail@plt+0x4200>
   151c4:	cmp	r5, #0
   151c8:	blt	15368 <__assert_fail@plt+0x437c>
   151cc:	mov	r1, r6
   151d0:	mvn	r0, #-2147483648	; 0x80000000
   151d4:	bl	15f58 <__assert_fail@plt+0x4f6c>
   151d8:	cmp	r5, r0
   151dc:	movle	r0, #0
   151e0:	movgt	r0, #1
   151e4:	cmp	r0, #0
   151e8:	bne	153a0 <__assert_fail@plt+0x43b4>
   151ec:	mul	r1, r5, r6
   151f0:	mov	r0, fp
   151f4:	bl	14f0c <__assert_fail@plt+0x3f20>
   151f8:	str	r4, [sl]
   151fc:	add	sp, sp, #12
   15200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15204:	rsb	r3, r4, #-2147483648	; 0x80000000
   15208:	cmp	r5, r3
   1520c:	movge	r3, #0
   15210:	movlt	r3, #1
   15214:	b	150c8 <__assert_fail@plt+0x40dc>
   15218:	rsb	r3, r5, #-2147483648	; 0x80000000
   1521c:	cmp	r4, r3
   15220:	movge	r3, #0
   15224:	movlt	r3, #1
   15228:	b	150c8 <__assert_fail@plt+0x40dc>
   1522c:	cmp	r4, #0
   15230:	blt	15258 <__assert_fail@plt+0x426c>
   15234:	cmn	r6, #1
   15238:	beq	15274 <__assert_fail@plt+0x4288>
   1523c:	mov	r1, r6
   15240:	mov	r0, #-2147483648	; 0x80000000
   15244:	bl	15f58 <__assert_fail@plt+0x4f6c>
   15248:	cmp	r0, r4
   1524c:	movge	r0, #0
   15250:	movlt	r0, #1
   15254:	b	15120 <__assert_fail@plt+0x4134>
   15258:	mov	r1, r6
   1525c:	mvn	r0, #-2147483648	; 0x80000000
   15260:	bl	15f58 <__assert_fail@plt+0x4f6c>
   15264:	cmp	r0, r4
   15268:	movle	r0, #0
   1526c:	movgt	r0, #1
   15270:	b	15120 <__assert_fail@plt+0x4134>
   15274:	add	r0, r4, #-2147483648	; 0x80000000
   15278:	cmp	r0, #0
   1527c:	movle	r0, #0
   15280:	movgt	r0, #1
   15284:	b	15120 <__assert_fail@plt+0x4134>
   15288:	cmn	r4, #1
   1528c:	beq	152ac <__assert_fail@plt+0x42c0>
   15290:	mov	r1, r4
   15294:	mov	r0, #-2147483648	; 0x80000000
   15298:	bl	15f58 <__assert_fail@plt+0x4f6c>
   1529c:	cmp	r6, r0
   152a0:	movle	r0, #0
   152a4:	movgt	r0, #1
   152a8:	b	15120 <__assert_fail@plt+0x4134>
   152ac:	add	r0, r6, #-2147483648	; 0x80000000
   152b0:	cmp	r0, #0
   152b4:	movle	r0, #0
   152b8:	movgt	r0, #1
   152bc:	b	15120 <__assert_fail@plt+0x4134>
   152c0:	mul	r1, r6, r4
   152c4:	cmp	r1, #63	; 0x3f
   152c8:	movle	r3, #64	; 0x40
   152cc:	strle	r3, [sp, #4]
   152d0:	bgt	15154 <__assert_fail@plt+0x4168>
   152d4:	b	15130 <__assert_fail@plt+0x4144>
   152d8:	mov	r3, #64	; 0x40
   152dc:	str	r3, [sp, #4]
   152e0:	b	15130 <__assert_fail@plt+0x4144>
   152e4:	rsb	r3, r9, #-2147483648	; 0x80000000
   152e8:	cmp	r5, r3
   152ec:	movge	r3, #0
   152f0:	movlt	r3, #1
   152f4:	b	15190 <__assert_fail@plt+0x41a4>
   152f8:	rsb	r3, r5, #-2147483648	; 0x80000000
   152fc:	cmp	r9, r3
   15300:	movge	r3, #0
   15304:	movlt	r3, #1
   15308:	b	15190 <__assert_fail@plt+0x41a4>
   1530c:	cmp	r5, #0
   15310:	blt	15338 <__assert_fail@plt+0x434c>
   15314:	cmn	r6, #1
   15318:	beq	15354 <__assert_fail@plt+0x4368>
   1531c:	mov	r1, r6
   15320:	mov	r0, #-2147483648	; 0x80000000
   15324:	bl	15f58 <__assert_fail@plt+0x4f6c>
   15328:	cmp	r5, r0
   1532c:	movle	r0, #0
   15330:	movgt	r0, #1
   15334:	b	151e4 <__assert_fail@plt+0x41f8>
   15338:	mov	r1, r6
   1533c:	mvn	r0, #-2147483648	; 0x80000000
   15340:	bl	15f58 <__assert_fail@plt+0x4f6c>
   15344:	cmp	r5, r0
   15348:	movge	r0, #0
   1534c:	movlt	r0, #1
   15350:	b	151e4 <__assert_fail@plt+0x41f8>
   15354:	add	r0, r5, #-2147483648	; 0x80000000
   15358:	cmp	r0, #0
   1535c:	movle	r0, #0
   15360:	movgt	r0, #1
   15364:	b	151e4 <__assert_fail@plt+0x41f8>
   15368:	cmn	r5, #1
   1536c:	beq	1538c <__assert_fail@plt+0x43a0>
   15370:	mov	r1, r5
   15374:	mov	r0, #-2147483648	; 0x80000000
   15378:	bl	15f58 <__assert_fail@plt+0x4f6c>
   1537c:	cmp	r6, r0
   15380:	movle	r0, #0
   15384:	movgt	r0, #1
   15388:	b	151e4 <__assert_fail@plt+0x41f8>
   1538c:	add	r0, r6, #-2147483648	; 0x80000000
   15390:	cmp	r0, #0
   15394:	movle	r0, #0
   15398:	movgt	r0, #1
   1539c:	b	151e4 <__assert_fail@plt+0x41f8>
   153a0:	bl	1547c <__assert_fail@plt+0x4490>
   153a4:	push	{r4, lr}
   153a8:	bl	15a24 <__assert_fail@plt+0x4a38>
   153ac:	cmp	r0, #0
   153b0:	popne	{r4, pc}
   153b4:	bl	1547c <__assert_fail@plt+0x4490>
   153b8:	push	{r4, lr}
   153bc:	mov	r1, #1
   153c0:	bl	153a4 <__assert_fail@plt+0x43b8>
   153c4:	pop	{r4, pc}
   153c8:	push	{r4, lr}
   153cc:	bl	15a24 <__assert_fail@plt+0x4a38>
   153d0:	cmp	r0, #0
   153d4:	popne	{r4, pc}
   153d8:	bl	1547c <__assert_fail@plt+0x4490>
   153dc:	push	{r4, lr}
   153e0:	mov	r1, #1
   153e4:	bl	153c8 <__assert_fail@plt+0x43dc>
   153e8:	pop	{r4, pc}
   153ec:	push	{r4, r5, r6, lr}
   153f0:	mov	r5, r0
   153f4:	mov	r4, r1
   153f8:	mov	r0, r1
   153fc:	bl	14ed8 <__assert_fail@plt+0x3eec>
   15400:	mov	r2, r4
   15404:	mov	r1, r5
   15408:	bl	10db8 <memcpy@plt>
   1540c:	pop	{r4, r5, r6, pc}
   15410:	push	{r4, r5, r6, lr}
   15414:	mov	r5, r0
   15418:	mov	r4, r1
   1541c:	mov	r0, r1
   15420:	bl	14eec <__assert_fail@plt+0x3f00>
   15424:	mov	r2, r4
   15428:	mov	r1, r5
   1542c:	bl	10db8 <memcpy@plt>
   15430:	pop	{r4, r5, r6, pc}
   15434:	push	{r4, r5, r6, lr}
   15438:	mov	r5, r0
   1543c:	mov	r4, r1
   15440:	add	r0, r1, #1
   15444:	bl	14eec <__assert_fail@plt+0x3f00>
   15448:	mov	r2, #0
   1544c:	strb	r2, [r0, r4]
   15450:	mov	r2, r4
   15454:	mov	r1, r5
   15458:	bl	10db8 <memcpy@plt>
   1545c:	pop	{r4, r5, r6, pc}
   15460:	push	{r4, lr}
   15464:	mov	r4, r0
   15468:	bl	10f08 <strlen@plt>
   1546c:	add	r1, r0, #1
   15470:	mov	r0, r4
   15474:	bl	153ec <__assert_fail@plt+0x4400>
   15478:	pop	{r4, pc}
   1547c:	push	{r4, lr}
   15480:	ldr	r3, [pc, #40]	; 154b0 <__assert_fail@plt+0x44c4>
   15484:	ldr	r4, [r3]
   15488:	mov	r2, #5
   1548c:	ldr	r1, [pc, #32]	; 154b4 <__assert_fail@plt+0x44c8>
   15490:	mov	r0, #0
   15494:	bl	10e00 <dcgettext@plt>
   15498:	mov	r3, r0
   1549c:	ldr	r2, [pc, #20]	; 154b8 <__assert_fail@plt+0x44cc>
   154a0:	mov	r1, #0
   154a4:	mov	r0, r4
   154a8:	bl	10e78 <error@plt>
   154ac:	bl	10fd4 <abort@plt>
   154b0:	andeq	r8, r2, r4, lsl #2
   154b4:	andeq	r7, r1, r8, asr #7
   154b8:	andeq	r6, r1, r0, ror #9
   154bc:	push	{r4, r5, r6, lr}
   154c0:	mov	r5, r0
   154c4:	subs	r4, r1, #0
   154c8:	blt	1551c <__assert_fail@plt+0x4530>
   154cc:	cmp	r4, #0
   154d0:	moveq	r3, #0
   154d4:	beq	15500 <__assert_fail@plt+0x4514>
   154d8:	mov	r2, r4
   154dc:	asr	r3, r4, #31
   154e0:	mvn	r0, #0
   154e4:	mvn	r1, #0
   154e8:	bl	16198 <__assert_fail@plt+0x51ac>
   154ec:	ldrd	r2, [r5]
   154f0:	cmp	r1, r3
   154f4:	cmpeq	r0, r2
   154f8:	movcc	r3, #1
   154fc:	movcs	r3, #0
   15500:	cmp	r3, #0
   15504:	beq	1553c <__assert_fail@plt+0x4550>
   15508:	mvn	r2, #0
   1550c:	mvn	r3, #0
   15510:	strd	r2, [r5]
   15514:	mov	r0, #1
   15518:	pop	{r4, r5, r6, pc}
   1551c:	mov	r1, r4
   15520:	mov	r0, #0
   15524:	bl	15f58 <__assert_fail@plt+0x4f6c>
   15528:	ldrd	r2, [r5]
   1552c:	orrs	r3, r2, r3
   15530:	movne	r3, #1
   15534:	moveq	r3, #0
   15538:	b	15500 <__assert_fail@plt+0x4514>
   1553c:	asr	r3, r4, #31
   15540:	ldr	r1, [r5, #4]
   15544:	ldr	r2, [r5]
   15548:	mul	r3, r3, r2
   1554c:	mla	r1, r4, r1, r3
   15550:	umull	r2, r3, r2, r4
   15554:	add	r3, r1, r3
   15558:	strd	r2, [r5]
   1555c:	mov	r0, #0
   15560:	pop	{r4, r5, r6, pc}
   15564:	push	{r4, r5, r6, r7, r8, lr}
   15568:	subs	r4, r2, #0
   1556c:	beq	1559c <__assert_fail@plt+0x45b0>
   15570:	mov	r7, r1
   15574:	mov	r6, r0
   15578:	mov	r5, #0
   1557c:	mov	r1, r7
   15580:	mov	r0, r6
   15584:	bl	154bc <__assert_fail@plt+0x44d0>
   15588:	orr	r5, r5, r0
   1558c:	subs	r4, r4, #1
   15590:	bne	1557c <__assert_fail@plt+0x4590>
   15594:	mov	r0, r5
   15598:	pop	{r4, r5, r6, r7, r8, pc}
   1559c:	mov	r5, #0
   155a0:	b	15594 <__assert_fail@plt+0x45a8>
   155a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   155a8:	sub	sp, sp, #20
   155ac:	cmp	r2, #36	; 0x24
   155b0:	bhi	155f0 <__assert_fail@plt+0x4604>
   155b4:	mov	r5, r0
   155b8:	mov	r6, r1
   155bc:	mov	r7, r2
   155c0:	mov	r9, r3
   155c4:	cmp	r1, #0
   155c8:	addeq	r6, sp, #12
   155cc:	bl	10f20 <__errno_location@plt>
   155d0:	mov	r8, r0
   155d4:	mov	r3, #0
   155d8:	str	r3, [r0]
   155dc:	ldrb	r4, [r5]
   155e0:	bl	10ef0 <__ctype_b_loc@plt>
   155e4:	ldr	r1, [r0]
   155e8:	mov	r2, r5
   155ec:	b	15608 <__assert_fail@plt+0x461c>
   155f0:	ldr	r3, [pc, #1056]	; 15a18 <__assert_fail@plt+0x4a2c>
   155f4:	mov	r2, #85	; 0x55
   155f8:	ldr	r1, [pc, #1052]	; 15a1c <__assert_fail@plt+0x4a30>
   155fc:	ldr	r0, [pc, #1052]	; 15a20 <__assert_fail@plt+0x4a34>
   15600:	bl	10fec <__assert_fail@plt>
   15604:	ldrb	r4, [r2, #1]!
   15608:	lsl	r3, r4, #1
   1560c:	ldrh	r3, [r1, r3]
   15610:	tst	r3, #8192	; 0x2000
   15614:	bne	15604 <__assert_fail@plt+0x4618>
   15618:	cmp	r4, #45	; 0x2d
   1561c:	moveq	r4, #4
   15620:	bne	15630 <__assert_fail@plt+0x4644>
   15624:	mov	r0, r4
   15628:	add	sp, sp, #20
   1562c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15630:	mov	r3, #0
   15634:	mov	r2, r7
   15638:	mov	r1, r6
   1563c:	mov	r0, r5
   15640:	bl	10dc4 <__strtoull_internal@plt>
   15644:	strd	r0, [sp]
   15648:	ldr	r7, [r6]
   1564c:	cmp	r5, r7
   15650:	beq	15674 <__assert_fail@plt+0x4688>
   15654:	ldr	r3, [r8]
   15658:	cmp	r3, #0
   1565c:	beq	156bc <__assert_fail@plt+0x46d0>
   15660:	cmp	r3, #34	; 0x22
   15664:	moveq	r4, #1
   15668:	beq	156c0 <__assert_fail@plt+0x46d4>
   1566c:	mov	r4, #4
   15670:	b	15624 <__assert_fail@plt+0x4638>
   15674:	ldr	r3, [sp, #48]	; 0x30
   15678:	cmp	r3, #0
   1567c:	moveq	r4, #4
   15680:	beq	15624 <__assert_fail@plt+0x4638>
   15684:	ldrb	r1, [r7]
   15688:	cmp	r1, #0
   1568c:	moveq	r4, #4
   15690:	beq	15624 <__assert_fail@plt+0x4638>
   15694:	mov	r0, r3
   15698:	bl	10f14 <strchr@plt>
   1569c:	cmp	r0, #0
   156a0:	moveq	r4, #4
   156a4:	beq	15624 <__assert_fail@plt+0x4638>
   156a8:	mov	r2, #1
   156ac:	mov	r3, #0
   156b0:	strd	r2, [sp]
   156b4:	mov	r4, #0
   156b8:	b	156cc <__assert_fail@plt+0x46e0>
   156bc:	mov	r4, #0
   156c0:	ldr	r3, [sp, #48]	; 0x30
   156c4:	cmp	r3, #0
   156c8:	beq	157bc <__assert_fail@plt+0x47d0>
   156cc:	ldrb	r5, [r7]
   156d0:	cmp	r5, #0
   156d4:	beq	15954 <__assert_fail@plt+0x4968>
   156d8:	mov	r1, r5
   156dc:	ldr	r0, [sp, #48]	; 0x30
   156e0:	bl	10f14 <strchr@plt>
   156e4:	cmp	r0, #0
   156e8:	beq	157c4 <__assert_fail@plt+0x47d8>
   156ec:	sub	r3, r5, #69	; 0x45
   156f0:	cmp	r3, #47	; 0x2f
   156f4:	ldrls	pc, [pc, r3, lsl #2]
   156f8:	b	15830 <__assert_fail@plt+0x4844>
   156fc:	ldrdeq	r5, [r1], -r4
   15700:	andeq	r5, r1, r0, lsr r8
   15704:	ldrdeq	r5, [r1], -r4
   15708:	andeq	r5, r1, r0, lsr r8
   1570c:	andeq	r5, r1, r0, lsr r8
   15710:	andeq	r5, r1, r0, lsr r8
   15714:	ldrdeq	r5, [r1], -r4
   15718:	andeq	r5, r1, r0, lsr r8
   1571c:	ldrdeq	r5, [r1], -r4
   15720:	andeq	r5, r1, r0, lsr r8
   15724:	andeq	r5, r1, r0, lsr r8
   15728:	ldrdeq	r5, [r1], -r4
   1572c:	andeq	r5, r1, r0, lsr r8
   15730:	andeq	r5, r1, r0, lsr r8
   15734:	andeq	r5, r1, r0, lsr r8
   15738:	ldrdeq	r5, [r1], -r4
   1573c:	andeq	r5, r1, r0, lsr r8
   15740:	andeq	r5, r1, r0, lsr r8
   15744:	andeq	r5, r1, r0, lsr r8
   15748:	andeq	r5, r1, r0, lsr r8
   1574c:	ldrdeq	r5, [r1], -r4
   15750:	ldrdeq	r5, [r1], -r4
   15754:	andeq	r5, r1, r0, lsr r8
   15758:	andeq	r5, r1, r0, lsr r8
   1575c:	andeq	r5, r1, r0, lsr r8
   15760:	andeq	r5, r1, r0, lsr r8
   15764:	andeq	r5, r1, r0, lsr r8
   15768:	andeq	r5, r1, r0, lsr r8
   1576c:	andeq	r5, r1, r0, lsr r8
   15770:	andeq	r5, r1, r0, lsr r8
   15774:	andeq	r5, r1, r0, lsr r8
   15778:	andeq	r5, r1, r0, lsr r8
   1577c:	andeq	r5, r1, r0, lsr r8
   15780:	andeq	r5, r1, r0, lsr r8
   15784:	ldrdeq	r5, [r1], -r4
   15788:	andeq	r5, r1, r0, lsr r8
   1578c:	andeq	r5, r1, r0, lsr r8
   15790:	andeq	r5, r1, r0, lsr r8
   15794:	ldrdeq	r5, [r1], -r4
   15798:	andeq	r5, r1, r0, lsr r8
   1579c:	ldrdeq	r5, [r1], -r4
   157a0:	andeq	r5, r1, r0, lsr r8
   157a4:	andeq	r5, r1, r0, lsr r8
   157a8:	andeq	r5, r1, r0, lsr r8
   157ac:	andeq	r5, r1, r0, lsr r8
   157b0:	andeq	r5, r1, r0, lsr r8
   157b4:	andeq	r5, r1, r0, lsr r8
   157b8:	ldrdeq	r5, [r1], -r4
   157bc:	strd	r0, [r9]
   157c0:	b	15624 <__assert_fail@plt+0x4638>
   157c4:	ldrd	r2, [sp]
   157c8:	strd	r2, [r9]
   157cc:	orr	r4, r4, #2
   157d0:	b	15624 <__assert_fail@plt+0x4638>
   157d4:	mov	r1, #48	; 0x30
   157d8:	ldr	r0, [sp, #48]	; 0x30
   157dc:	bl	10f14 <strchr@plt>
   157e0:	cmp	r0, #0
   157e4:	beq	15920 <__assert_fail@plt+0x4934>
   157e8:	ldrb	r3, [r7, #1]
   157ec:	cmp	r3, #68	; 0x44
   157f0:	beq	1580c <__assert_fail@plt+0x4820>
   157f4:	cmp	r3, #105	; 0x69
   157f8:	beq	15818 <__assert_fail@plt+0x482c>
   157fc:	cmp	r3, #66	; 0x42
   15800:	movne	r7, #1
   15804:	movne	r1, #1024	; 0x400
   15808:	bne	15838 <__assert_fail@plt+0x484c>
   1580c:	mov	r7, #2
   15810:	mov	r1, #1000	; 0x3e8
   15814:	b	15838 <__assert_fail@plt+0x484c>
   15818:	ldrb	r7, [r7, #2]
   1581c:	cmp	r7, #66	; 0x42
   15820:	movne	r7, #1
   15824:	moveq	r7, #3
   15828:	mov	r1, #1024	; 0x400
   1582c:	b	15838 <__assert_fail@plt+0x484c>
   15830:	mov	r7, #1
   15834:	mov	r1, #1024	; 0x400
   15838:	sub	r5, r5, #66	; 0x42
   1583c:	cmp	r5, #53	; 0x35
   15840:	ldrls	pc, [pc, r5, lsl #2]
   15844:	b	15a00 <__assert_fail@plt+0x4a14>
   15848:	andeq	r5, r1, r0, ror #18
   1584c:	andeq	r5, r1, r0, lsl #20
   15850:	andeq	r5, r1, r0, lsl #20
   15854:	andeq	r5, r1, r0, ror r9
   15858:	andeq	r5, r1, r0, lsl #20
   1585c:	andeq	r5, r1, r0, lsl #19
   15860:	andeq	r5, r1, r0, lsl #20
   15864:	andeq	r5, r1, r0, lsl #20
   15868:	andeq	r5, r1, r0, lsl #20
   1586c:	muleq	r1, r0, r9
   15870:	andeq	r5, r1, r0, lsl #20
   15874:	andeq	r5, r1, r0, lsr #19
   15878:	andeq	r5, r1, r0, lsl #20
   1587c:	andeq	r5, r1, r0, lsl #20
   15880:			; <UNDEFINED> instruction: 0x000159b0
   15884:	andeq	r5, r1, r0, lsl #20
   15888:	andeq	r5, r1, r0, lsl #20
   1588c:	andeq	r5, r1, r0, lsl #20
   15890:	andeq	r5, r1, r0, asr #19
   15894:	andeq	r5, r1, r0, lsl #20
   15898:	andeq	r5, r1, r0, lsl #20
   1589c:	andeq	r5, r1, r0, lsl #20
   158a0:	andeq	r5, r1, r0, lsl #20
   158a4:	andeq	r5, r1, r0, ror #19
   158a8:	strdeq	r5, [r1], -r0
   158ac:	andeq	r5, r1, r0, lsl #20
   158b0:	andeq	r5, r1, r0, lsl #20
   158b4:	andeq	r5, r1, r0, lsl #20
   158b8:	andeq	r5, r1, r0, lsl #20
   158bc:	andeq	r5, r1, r0, lsl #20
   158c0:	andeq	r5, r1, r0, lsl #20
   158c4:	andeq	r5, r1, r0, lsl #20
   158c8:	andeq	r5, r1, ip, lsr #18
   158cc:	andeq	r5, r1, r0, lsl sl
   158d0:	andeq	r5, r1, r0, lsl #20
   158d4:	andeq	r5, r1, r0, lsl #20
   158d8:	andeq	r5, r1, r0, lsl #20
   158dc:	andeq	r5, r1, r0, lsl #19
   158e0:	andeq	r5, r1, r0, lsl #20
   158e4:	andeq	r5, r1, r0, lsl #20
   158e8:	andeq	r5, r1, r0, lsl #20
   158ec:	muleq	r1, r0, r9
   158f0:	andeq	r5, r1, r0, lsl #20
   158f4:	andeq	r5, r1, r0, lsr #19
   158f8:	andeq	r5, r1, r0, lsl #20
   158fc:	andeq	r5, r1, r0, lsl #20
   15900:	andeq	r5, r1, r0, lsl #20
   15904:	andeq	r5, r1, r0, lsl #20
   15908:	andeq	r5, r1, r0, lsl #20
   1590c:	andeq	r5, r1, r0, lsl #20
   15910:	andeq	r5, r1, r0, asr #19
   15914:	andeq	r5, r1, r0, lsl #20
   15918:	andeq	r5, r1, r0, lsl #20
   1591c:	ldrdeq	r5, [r1], -r0
   15920:	mov	r7, #1
   15924:	mov	r1, #1024	; 0x400
   15928:	b	15838 <__assert_fail@plt+0x484c>
   1592c:	mov	r1, #512	; 0x200
   15930:	mov	r0, sp
   15934:	bl	154bc <__assert_fail@plt+0x44d0>
   15938:	orr	r4, r4, r0
   1593c:	ldr	r3, [r6]
   15940:	add	r2, r3, r7
   15944:	str	r2, [r6]
   15948:	ldrb	r3, [r3, r7]
   1594c:	cmp	r3, #0
   15950:	orrne	r4, r4, #2
   15954:	ldrd	r2, [sp]
   15958:	strd	r2, [r9]
   1595c:	b	15624 <__assert_fail@plt+0x4638>
   15960:	mov	r1, #1024	; 0x400
   15964:	mov	r0, sp
   15968:	bl	154bc <__assert_fail@plt+0x44d0>
   1596c:	b	15938 <__assert_fail@plt+0x494c>
   15970:	mov	r2, #6
   15974:	mov	r0, sp
   15978:	bl	15564 <__assert_fail@plt+0x4578>
   1597c:	b	15938 <__assert_fail@plt+0x494c>
   15980:	mov	r2, #3
   15984:	mov	r0, sp
   15988:	bl	15564 <__assert_fail@plt+0x4578>
   1598c:	b	15938 <__assert_fail@plt+0x494c>
   15990:	mov	r2, #1
   15994:	mov	r0, sp
   15998:	bl	15564 <__assert_fail@plt+0x4578>
   1599c:	b	15938 <__assert_fail@plt+0x494c>
   159a0:	mov	r2, #2
   159a4:	mov	r0, sp
   159a8:	bl	15564 <__assert_fail@plt+0x4578>
   159ac:	b	15938 <__assert_fail@plt+0x494c>
   159b0:	mov	r2, #5
   159b4:	mov	r0, sp
   159b8:	bl	15564 <__assert_fail@plt+0x4578>
   159bc:	b	15938 <__assert_fail@plt+0x494c>
   159c0:	mov	r2, #4
   159c4:	mov	r0, sp
   159c8:	bl	15564 <__assert_fail@plt+0x4578>
   159cc:	b	15938 <__assert_fail@plt+0x494c>
   159d0:	mov	r1, #2
   159d4:	mov	r0, sp
   159d8:	bl	154bc <__assert_fail@plt+0x44d0>
   159dc:	b	15938 <__assert_fail@plt+0x494c>
   159e0:	mov	r2, #8
   159e4:	mov	r0, sp
   159e8:	bl	15564 <__assert_fail@plt+0x4578>
   159ec:	b	15938 <__assert_fail@plt+0x494c>
   159f0:	mov	r2, #7
   159f4:	mov	r0, sp
   159f8:	bl	15564 <__assert_fail@plt+0x4578>
   159fc:	b	15938 <__assert_fail@plt+0x494c>
   15a00:	ldrd	r2, [sp]
   15a04:	strd	r2, [r9]
   15a08:	orr	r4, r4, #2
   15a0c:	b	15624 <__assert_fail@plt+0x4638>
   15a10:	mov	r0, #0
   15a14:	b	15938 <__assert_fail@plt+0x494c>
   15a18:	ldrdeq	r7, [r1], -ip
   15a1c:	andeq	r7, r1, r8, ror #7
   15a20:	strdeq	r7, [r1], -r8
   15a24:	push	{r4, lr}
   15a28:	mov	r2, r0
   15a2c:	mov	r3, r1
   15a30:	cmp	r1, #0
   15a34:	cmpne	r0, #0
   15a38:	moveq	r3, #1
   15a3c:	moveq	r2, r3
   15a40:	umull	r0, r1, r2, r3
   15a44:	cmp	r0, #0
   15a48:	cmpge	r1, #0
   15a4c:	bne	15a60 <__assert_fail@plt+0x4a74>
   15a50:	mov	r1, r3
   15a54:	mov	r0, r2
   15a58:	bl	10d4c <calloc@plt>
   15a5c:	pop	{r4, pc}
   15a60:	bl	10f20 <__errno_location@plt>
   15a64:	mov	r3, #12
   15a68:	str	r3, [r0]
   15a6c:	mov	r0, #0
   15a70:	pop	{r4, pc}
   15a74:	push	{r4, lr}
   15a78:	cmp	r0, #0
   15a7c:	moveq	r0, #1
   15a80:	cmp	r0, #0
   15a84:	blt	15a90 <__assert_fail@plt+0x4aa4>
   15a88:	bl	10e9c <malloc@plt>
   15a8c:	pop	{r4, pc}
   15a90:	bl	10f20 <__errno_location@plt>
   15a94:	mov	r3, #12
   15a98:	str	r3, [r0]
   15a9c:	mov	r0, #0
   15aa0:	pop	{r4, pc}
   15aa4:	push	{r4, lr}
   15aa8:	cmp	r0, #0
   15aac:	beq	15ac8 <__assert_fail@plt+0x4adc>
   15ab0:	cmp	r1, #0
   15ab4:	beq	15ad4 <__assert_fail@plt+0x4ae8>
   15ab8:	cmp	r1, #0
   15abc:	blt	15ae0 <__assert_fail@plt+0x4af4>
   15ac0:	bl	10e18 <realloc@plt>
   15ac4:	pop	{r4, pc}
   15ac8:	mov	r0, r1
   15acc:	bl	15a74 <__assert_fail@plt+0x4a88>
   15ad0:	pop	{r4, pc}
   15ad4:	bl	12928 <__assert_fail@plt+0x193c>
   15ad8:	mov	r0, #0
   15adc:	pop	{r4, pc}
   15ae0:	bl	10f20 <__errno_location@plt>
   15ae4:	mov	r3, #12
   15ae8:	str	r3, [r0]
   15aec:	mov	r0, #0
   15af0:	pop	{r4, pc}
   15af4:	push	{r4, r5, r6, lr}
   15af8:	mov	r5, r0
   15afc:	bl	10e60 <__fpending@plt>
   15b00:	mov	r6, r0
   15b04:	ldr	r4, [r5]
   15b08:	and	r4, r4, #32
   15b0c:	mov	r0, r5
   15b10:	bl	1281c <__assert_fail@plt+0x1830>
   15b14:	cmp	r4, #0
   15b18:	bne	15b40 <__assert_fail@plt+0x4b54>
   15b1c:	cmp	r0, #0
   15b20:	popeq	{r4, r5, r6, pc}
   15b24:	cmp	r6, #0
   15b28:	bne	15b5c <__assert_fail@plt+0x4b70>
   15b2c:	bl	10f20 <__errno_location@plt>
   15b30:	ldr	r0, [r0]
   15b34:	subs	r0, r0, #9
   15b38:	mvnne	r0, #0
   15b3c:	pop	{r4, r5, r6, pc}
   15b40:	cmp	r0, #0
   15b44:	bne	15b64 <__assert_fail@plt+0x4b78>
   15b48:	bl	10f20 <__errno_location@plt>
   15b4c:	mov	r3, #0
   15b50:	str	r3, [r0]
   15b54:	mvn	r0, #0
   15b58:	pop	{r4, r5, r6, pc}
   15b5c:	mvn	r0, #0
   15b60:	pop	{r4, r5, r6, pc}
   15b64:	mvn	r0, #0
   15b68:	pop	{r4, r5, r6, pc}
   15b6c:	push	{r4, lr}
   15b70:	mov	r0, #14
   15b74:	bl	10fb0 <nl_langinfo@plt>
   15b78:	cmp	r0, #0
   15b7c:	beq	15b94 <__assert_fail@plt+0x4ba8>
   15b80:	ldrb	r2, [r0]
   15b84:	ldr	r3, [pc, #16]	; 15b9c <__assert_fail@plt+0x4bb0>
   15b88:	cmp	r2, #0
   15b8c:	moveq	r0, r3
   15b90:	pop	{r4, pc}
   15b94:	ldr	r0, [pc]	; 15b9c <__assert_fail@plt+0x4bb0>
   15b98:	pop	{r4, pc}
   15b9c:	andeq	r7, r1, r0, lsr #8
   15ba0:	push	{r4, r5, r6, r7, lr}
   15ba4:	sub	sp, sp, #12
   15ba8:	mov	r7, r1
   15bac:	mov	r5, r2
   15bb0:	subs	r6, r0, #0
   15bb4:	addeq	r6, sp, #4
   15bb8:	mov	r0, r6
   15bbc:	bl	10e6c <mbrtowc@plt>
   15bc0:	mov	r4, r0
   15bc4:	cmp	r5, #0
   15bc8:	cmnne	r0, #3
   15bcc:	bhi	15bdc <__assert_fail@plt+0x4bf0>
   15bd0:	mov	r0, r4
   15bd4:	add	sp, sp, #12
   15bd8:	pop	{r4, r5, r6, r7, pc}
   15bdc:	mov	r0, #0
   15be0:	bl	15c44 <__assert_fail@plt+0x4c58>
   15be4:	cmp	r0, #0
   15be8:	ldrbeq	r3, [r7]
   15bec:	streq	r3, [r6]
   15bf0:	moveq	r4, #1
   15bf4:	b	15bd0 <__assert_fail@plt+0x4be4>
   15bf8:	push	{r4, r5, r6, lr}
   15bfc:	mov	r6, r0
   15c00:	mov	r5, r1
   15c04:	subs	r4, r2, #0
   15c08:	beq	15c34 <__assert_fail@plt+0x4c48>
   15c0c:	mov	r1, r4
   15c10:	mvn	r0, #0
   15c14:	bl	15d4c <__assert_fail@plt+0x4d60>
   15c18:	cmp	r0, r5
   15c1c:	bcs	15c34 <__assert_fail@plt+0x4c48>
   15c20:	bl	10f20 <__errno_location@plt>
   15c24:	mov	r3, #12
   15c28:	str	r3, [r0]
   15c2c:	mov	r0, #0
   15c30:	pop	{r4, r5, r6, pc}
   15c34:	mul	r1, r5, r4
   15c38:	mov	r0, r6
   15c3c:	bl	15aa4 <__assert_fail@plt+0x4ab8>
   15c40:	pop	{r4, r5, r6, pc}
   15c44:	push	{lr}		; (str lr, [sp, #-4]!)
   15c48:	sub	sp, sp, #268	; 0x10c
   15c4c:	ldr	r2, [pc, #68]	; 15c98 <__assert_fail@plt+0x4cac>
   15c50:	add	r1, sp, #4
   15c54:	bl	15ca4 <__assert_fail@plt+0x4cb8>
   15c58:	cmp	r0, #0
   15c5c:	movne	r0, #0
   15c60:	bne	15c90 <__assert_fail@plt+0x4ca4>
   15c64:	ldr	r1, [pc, #48]	; 15c9c <__assert_fail@plt+0x4cb0>
   15c68:	add	r0, sp, #4
   15c6c:	bl	10d70 <strcmp@plt>
   15c70:	cmp	r0, #0
   15c74:	moveq	r0, #0
   15c78:	beq	15c90 <__assert_fail@plt+0x4ca4>
   15c7c:	ldr	r1, [pc, #28]	; 15ca0 <__assert_fail@plt+0x4cb4>
   15c80:	add	r0, sp, #4
   15c84:	bl	10d70 <strcmp@plt>
   15c88:	adds	r0, r0, #0
   15c8c:	movne	r0, #1
   15c90:	add	sp, sp, #268	; 0x10c
   15c94:	pop	{pc}		; (ldr pc, [sp], #4)
   15c98:	andeq	r0, r0, r1, lsl #2
   15c9c:	andeq	r7, r1, r8, lsr #8
   15ca0:	andeq	r7, r1, ip, lsr #8
   15ca4:	push	{r4, r5, r6, lr}
   15ca8:	mov	r6, r1
   15cac:	mov	r4, r2
   15cb0:	mov	r1, #0
   15cb4:	bl	10f98 <setlocale@plt>
   15cb8:	subs	r5, r0, #0
   15cbc:	beq	15ce0 <__assert_fail@plt+0x4cf4>
   15cc0:	mov	r0, r5
   15cc4:	bl	10f08 <strlen@plt>
   15cc8:	cmp	r4, r0
   15ccc:	bhi	15cf8 <__assert_fail@plt+0x4d0c>
   15cd0:	cmp	r4, #0
   15cd4:	bne	15d10 <__assert_fail@plt+0x4d24>
   15cd8:	mov	r0, #34	; 0x22
   15cdc:	pop	{r4, r5, r6, pc}
   15ce0:	cmp	r4, #0
   15ce4:	beq	15d34 <__assert_fail@plt+0x4d48>
   15ce8:	mov	r3, #0
   15cec:	strb	r3, [r6]
   15cf0:	mov	r0, #22
   15cf4:	pop	{r4, r5, r6, pc}
   15cf8:	add	r2, r0, #1
   15cfc:	mov	r1, r5
   15d00:	mov	r0, r6
   15d04:	bl	10db8 <memcpy@plt>
   15d08:	mov	r0, #0
   15d0c:	pop	{r4, r5, r6, pc}
   15d10:	sub	r4, r4, #1
   15d14:	mov	r2, r4
   15d18:	mov	r1, r5
   15d1c:	mov	r0, r6
   15d20:	bl	10db8 <memcpy@plt>
   15d24:	mov	r3, #0
   15d28:	strb	r3, [r6, r4]
   15d2c:	mov	r0, #34	; 0x22
   15d30:	pop	{r4, r5, r6, pc}
   15d34:	mov	r0, #22
   15d38:	pop	{r4, r5, r6, pc}
   15d3c:	push	{r4, lr}
   15d40:	mov	r1, #0
   15d44:	bl	10f98 <setlocale@plt>
   15d48:	pop	{r4, pc}
   15d4c:	subs	r2, r1, #1
   15d50:	bxeq	lr
   15d54:	bcc	15f2c <__assert_fail@plt+0x4f40>
   15d58:	cmp	r0, r1
   15d5c:	bls	15f10 <__assert_fail@plt+0x4f24>
   15d60:	tst	r1, r2
   15d64:	beq	15f1c <__assert_fail@plt+0x4f30>
   15d68:	clz	r3, r0
   15d6c:	clz	r2, r1
   15d70:	sub	r3, r2, r3
   15d74:	rsbs	r3, r3, #31
   15d78:	addne	r3, r3, r3, lsl #1
   15d7c:	mov	r2, #0
   15d80:	addne	pc, pc, r3, lsl #2
   15d84:	nop			; (mov r0, r0)
   15d88:	cmp	r0, r1, lsl #31
   15d8c:	adc	r2, r2, r2
   15d90:	subcs	r0, r0, r1, lsl #31
   15d94:	cmp	r0, r1, lsl #30
   15d98:	adc	r2, r2, r2
   15d9c:	subcs	r0, r0, r1, lsl #30
   15da0:	cmp	r0, r1, lsl #29
   15da4:	adc	r2, r2, r2
   15da8:	subcs	r0, r0, r1, lsl #29
   15dac:	cmp	r0, r1, lsl #28
   15db0:	adc	r2, r2, r2
   15db4:	subcs	r0, r0, r1, lsl #28
   15db8:	cmp	r0, r1, lsl #27
   15dbc:	adc	r2, r2, r2
   15dc0:	subcs	r0, r0, r1, lsl #27
   15dc4:	cmp	r0, r1, lsl #26
   15dc8:	adc	r2, r2, r2
   15dcc:	subcs	r0, r0, r1, lsl #26
   15dd0:	cmp	r0, r1, lsl #25
   15dd4:	adc	r2, r2, r2
   15dd8:	subcs	r0, r0, r1, lsl #25
   15ddc:	cmp	r0, r1, lsl #24
   15de0:	adc	r2, r2, r2
   15de4:	subcs	r0, r0, r1, lsl #24
   15de8:	cmp	r0, r1, lsl #23
   15dec:	adc	r2, r2, r2
   15df0:	subcs	r0, r0, r1, lsl #23
   15df4:	cmp	r0, r1, lsl #22
   15df8:	adc	r2, r2, r2
   15dfc:	subcs	r0, r0, r1, lsl #22
   15e00:	cmp	r0, r1, lsl #21
   15e04:	adc	r2, r2, r2
   15e08:	subcs	r0, r0, r1, lsl #21
   15e0c:	cmp	r0, r1, lsl #20
   15e10:	adc	r2, r2, r2
   15e14:	subcs	r0, r0, r1, lsl #20
   15e18:	cmp	r0, r1, lsl #19
   15e1c:	adc	r2, r2, r2
   15e20:	subcs	r0, r0, r1, lsl #19
   15e24:	cmp	r0, r1, lsl #18
   15e28:	adc	r2, r2, r2
   15e2c:	subcs	r0, r0, r1, lsl #18
   15e30:	cmp	r0, r1, lsl #17
   15e34:	adc	r2, r2, r2
   15e38:	subcs	r0, r0, r1, lsl #17
   15e3c:	cmp	r0, r1, lsl #16
   15e40:	adc	r2, r2, r2
   15e44:	subcs	r0, r0, r1, lsl #16
   15e48:	cmp	r0, r1, lsl #15
   15e4c:	adc	r2, r2, r2
   15e50:	subcs	r0, r0, r1, lsl #15
   15e54:	cmp	r0, r1, lsl #14
   15e58:	adc	r2, r2, r2
   15e5c:	subcs	r0, r0, r1, lsl #14
   15e60:	cmp	r0, r1, lsl #13
   15e64:	adc	r2, r2, r2
   15e68:	subcs	r0, r0, r1, lsl #13
   15e6c:	cmp	r0, r1, lsl #12
   15e70:	adc	r2, r2, r2
   15e74:	subcs	r0, r0, r1, lsl #12
   15e78:	cmp	r0, r1, lsl #11
   15e7c:	adc	r2, r2, r2
   15e80:	subcs	r0, r0, r1, lsl #11
   15e84:	cmp	r0, r1, lsl #10
   15e88:	adc	r2, r2, r2
   15e8c:	subcs	r0, r0, r1, lsl #10
   15e90:	cmp	r0, r1, lsl #9
   15e94:	adc	r2, r2, r2
   15e98:	subcs	r0, r0, r1, lsl #9
   15e9c:	cmp	r0, r1, lsl #8
   15ea0:	adc	r2, r2, r2
   15ea4:	subcs	r0, r0, r1, lsl #8
   15ea8:	cmp	r0, r1, lsl #7
   15eac:	adc	r2, r2, r2
   15eb0:	subcs	r0, r0, r1, lsl #7
   15eb4:	cmp	r0, r1, lsl #6
   15eb8:	adc	r2, r2, r2
   15ebc:	subcs	r0, r0, r1, lsl #6
   15ec0:	cmp	r0, r1, lsl #5
   15ec4:	adc	r2, r2, r2
   15ec8:	subcs	r0, r0, r1, lsl #5
   15ecc:	cmp	r0, r1, lsl #4
   15ed0:	adc	r2, r2, r2
   15ed4:	subcs	r0, r0, r1, lsl #4
   15ed8:	cmp	r0, r1, lsl #3
   15edc:	adc	r2, r2, r2
   15ee0:	subcs	r0, r0, r1, lsl #3
   15ee4:	cmp	r0, r1, lsl #2
   15ee8:	adc	r2, r2, r2
   15eec:	subcs	r0, r0, r1, lsl #2
   15ef0:	cmp	r0, r1, lsl #1
   15ef4:	adc	r2, r2, r2
   15ef8:	subcs	r0, r0, r1, lsl #1
   15efc:	cmp	r0, r1
   15f00:	adc	r2, r2, r2
   15f04:	subcs	r0, r0, r1
   15f08:	mov	r0, r2
   15f0c:	bx	lr
   15f10:	moveq	r0, #1
   15f14:	movne	r0, #0
   15f18:	bx	lr
   15f1c:	clz	r2, r1
   15f20:	rsb	r2, r2, #31
   15f24:	lsr	r0, r0, r2
   15f28:	bx	lr
   15f2c:	cmp	r0, #0
   15f30:	mvnne	r0, #0
   15f34:	b	161d4 <__assert_fail@plt+0x51e8>
   15f38:	cmp	r1, #0
   15f3c:	beq	15f2c <__assert_fail@plt+0x4f40>
   15f40:	push	{r0, r1, lr}
   15f44:	bl	15d4c <__assert_fail@plt+0x4d60>
   15f48:	pop	{r1, r2, lr}
   15f4c:	mul	r3, r2, r0
   15f50:	sub	r1, r1, r3
   15f54:	bx	lr
   15f58:	cmp	r1, #0
   15f5c:	beq	16168 <__assert_fail@plt+0x517c>
   15f60:	eor	ip, r0, r1
   15f64:	rsbmi	r1, r1, #0
   15f68:	subs	r2, r1, #1
   15f6c:	beq	16134 <__assert_fail@plt+0x5148>
   15f70:	movs	r3, r0
   15f74:	rsbmi	r3, r0, #0
   15f78:	cmp	r3, r1
   15f7c:	bls	16140 <__assert_fail@plt+0x5154>
   15f80:	tst	r1, r2
   15f84:	beq	16150 <__assert_fail@plt+0x5164>
   15f88:	clz	r2, r3
   15f8c:	clz	r0, r1
   15f90:	sub	r2, r0, r2
   15f94:	rsbs	r2, r2, #31
   15f98:	addne	r2, r2, r2, lsl #1
   15f9c:	mov	r0, #0
   15fa0:	addne	pc, pc, r2, lsl #2
   15fa4:	nop			; (mov r0, r0)
   15fa8:	cmp	r3, r1, lsl #31
   15fac:	adc	r0, r0, r0
   15fb0:	subcs	r3, r3, r1, lsl #31
   15fb4:	cmp	r3, r1, lsl #30
   15fb8:	adc	r0, r0, r0
   15fbc:	subcs	r3, r3, r1, lsl #30
   15fc0:	cmp	r3, r1, lsl #29
   15fc4:	adc	r0, r0, r0
   15fc8:	subcs	r3, r3, r1, lsl #29
   15fcc:	cmp	r3, r1, lsl #28
   15fd0:	adc	r0, r0, r0
   15fd4:	subcs	r3, r3, r1, lsl #28
   15fd8:	cmp	r3, r1, lsl #27
   15fdc:	adc	r0, r0, r0
   15fe0:	subcs	r3, r3, r1, lsl #27
   15fe4:	cmp	r3, r1, lsl #26
   15fe8:	adc	r0, r0, r0
   15fec:	subcs	r3, r3, r1, lsl #26
   15ff0:	cmp	r3, r1, lsl #25
   15ff4:	adc	r0, r0, r0
   15ff8:	subcs	r3, r3, r1, lsl #25
   15ffc:	cmp	r3, r1, lsl #24
   16000:	adc	r0, r0, r0
   16004:	subcs	r3, r3, r1, lsl #24
   16008:	cmp	r3, r1, lsl #23
   1600c:	adc	r0, r0, r0
   16010:	subcs	r3, r3, r1, lsl #23
   16014:	cmp	r3, r1, lsl #22
   16018:	adc	r0, r0, r0
   1601c:	subcs	r3, r3, r1, lsl #22
   16020:	cmp	r3, r1, lsl #21
   16024:	adc	r0, r0, r0
   16028:	subcs	r3, r3, r1, lsl #21
   1602c:	cmp	r3, r1, lsl #20
   16030:	adc	r0, r0, r0
   16034:	subcs	r3, r3, r1, lsl #20
   16038:	cmp	r3, r1, lsl #19
   1603c:	adc	r0, r0, r0
   16040:	subcs	r3, r3, r1, lsl #19
   16044:	cmp	r3, r1, lsl #18
   16048:	adc	r0, r0, r0
   1604c:	subcs	r3, r3, r1, lsl #18
   16050:	cmp	r3, r1, lsl #17
   16054:	adc	r0, r0, r0
   16058:	subcs	r3, r3, r1, lsl #17
   1605c:	cmp	r3, r1, lsl #16
   16060:	adc	r0, r0, r0
   16064:	subcs	r3, r3, r1, lsl #16
   16068:	cmp	r3, r1, lsl #15
   1606c:	adc	r0, r0, r0
   16070:	subcs	r3, r3, r1, lsl #15
   16074:	cmp	r3, r1, lsl #14
   16078:	adc	r0, r0, r0
   1607c:	subcs	r3, r3, r1, lsl #14
   16080:	cmp	r3, r1, lsl #13
   16084:	adc	r0, r0, r0
   16088:	subcs	r3, r3, r1, lsl #13
   1608c:	cmp	r3, r1, lsl #12
   16090:	adc	r0, r0, r0
   16094:	subcs	r3, r3, r1, lsl #12
   16098:	cmp	r3, r1, lsl #11
   1609c:	adc	r0, r0, r0
   160a0:	subcs	r3, r3, r1, lsl #11
   160a4:	cmp	r3, r1, lsl #10
   160a8:	adc	r0, r0, r0
   160ac:	subcs	r3, r3, r1, lsl #10
   160b0:	cmp	r3, r1, lsl #9
   160b4:	adc	r0, r0, r0
   160b8:	subcs	r3, r3, r1, lsl #9
   160bc:	cmp	r3, r1, lsl #8
   160c0:	adc	r0, r0, r0
   160c4:	subcs	r3, r3, r1, lsl #8
   160c8:	cmp	r3, r1, lsl #7
   160cc:	adc	r0, r0, r0
   160d0:	subcs	r3, r3, r1, lsl #7
   160d4:	cmp	r3, r1, lsl #6
   160d8:	adc	r0, r0, r0
   160dc:	subcs	r3, r3, r1, lsl #6
   160e0:	cmp	r3, r1, lsl #5
   160e4:	adc	r0, r0, r0
   160e8:	subcs	r3, r3, r1, lsl #5
   160ec:	cmp	r3, r1, lsl #4
   160f0:	adc	r0, r0, r0
   160f4:	subcs	r3, r3, r1, lsl #4
   160f8:	cmp	r3, r1, lsl #3
   160fc:	adc	r0, r0, r0
   16100:	subcs	r3, r3, r1, lsl #3
   16104:	cmp	r3, r1, lsl #2
   16108:	adc	r0, r0, r0
   1610c:	subcs	r3, r3, r1, lsl #2
   16110:	cmp	r3, r1, lsl #1
   16114:	adc	r0, r0, r0
   16118:	subcs	r3, r3, r1, lsl #1
   1611c:	cmp	r3, r1
   16120:	adc	r0, r0, r0
   16124:	subcs	r3, r3, r1
   16128:	cmp	ip, #0
   1612c:	rsbmi	r0, r0, #0
   16130:	bx	lr
   16134:	teq	ip, r0
   16138:	rsbmi	r0, r0, #0
   1613c:	bx	lr
   16140:	movcc	r0, #0
   16144:	asreq	r0, ip, #31
   16148:	orreq	r0, r0, #1
   1614c:	bx	lr
   16150:	clz	r2, r1
   16154:	rsb	r2, r2, #31
   16158:	cmp	ip, #0
   1615c:	lsr	r0, r3, r2
   16160:	rsbmi	r0, r0, #0
   16164:	bx	lr
   16168:	cmp	r0, #0
   1616c:	mvngt	r0, #-2147483648	; 0x80000000
   16170:	movlt	r0, #-2147483648	; 0x80000000
   16174:	b	161d4 <__assert_fail@plt+0x51e8>
   16178:	cmp	r1, #0
   1617c:	beq	16168 <__assert_fail@plt+0x517c>
   16180:	push	{r0, r1, lr}
   16184:	bl	15f60 <__assert_fail@plt+0x4f74>
   16188:	pop	{r1, r2, lr}
   1618c:	mul	r3, r2, r0
   16190:	sub	r1, r1, r3
   16194:	bx	lr
   16198:	cmp	r3, #0
   1619c:	cmpeq	r2, #0
   161a0:	bne	161b8 <__assert_fail@plt+0x51cc>
   161a4:	cmp	r1, #0
   161a8:	cmpeq	r0, #0
   161ac:	mvnne	r1, #0
   161b0:	mvnne	r0, #0
   161b4:	b	161d4 <__assert_fail@plt+0x51e8>
   161b8:	sub	sp, sp, #8
   161bc:	push	{sp, lr}
   161c0:	bl	161e4 <__assert_fail@plt+0x51f8>
   161c4:	ldr	lr, [sp, #4]
   161c8:	add	sp, sp, #8
   161cc:	pop	{r2, r3}
   161d0:	bx	lr
   161d4:	push	{r1, lr}
   161d8:	mov	r0, #8
   161dc:	bl	10d64 <raise@plt>
   161e0:	pop	{r1, pc}
   161e4:	cmp	r1, r3
   161e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   161ec:	cmpeq	r0, r2
   161f0:	mov	r4, r0
   161f4:	mov	r5, r1
   161f8:	ldr	r9, [sp, #28]
   161fc:	movcc	r0, #0
   16200:	movcc	r1, #0
   16204:	bcc	162fc <__assert_fail@plt+0x5310>
   16208:	cmp	r3, #0
   1620c:	clzeq	ip, r2
   16210:	clzne	ip, r3
   16214:	addeq	ip, ip, #32
   16218:	cmp	r5, #0
   1621c:	clzeq	r1, r4
   16220:	addeq	r1, r1, #32
   16224:	clzne	r1, r5
   16228:	sub	ip, ip, r1
   1622c:	sub	lr, ip, #32
   16230:	lsl	r7, r3, ip
   16234:	rsb	r8, ip, #32
   16238:	orr	r7, r7, r2, lsl lr
   1623c:	orr	r7, r7, r2, lsr r8
   16240:	lsl	r6, r2, ip
   16244:	cmp	r5, r7
   16248:	cmpeq	r4, r6
   1624c:	movcc	r0, #0
   16250:	movcc	r1, #0
   16254:	bcc	16270 <__assert_fail@plt+0x5284>
   16258:	mov	r3, #1
   1625c:	subs	r4, r4, r6
   16260:	lsl	r1, r3, lr
   16264:	lsl	r0, r3, ip
   16268:	orr	r1, r1, r3, lsr r8
   1626c:	sbc	r5, r5, r7
   16270:	cmp	ip, #0
   16274:	beq	162fc <__assert_fail@plt+0x5310>
   16278:	lsrs	r3, r7, #1
   1627c:	rrx	r2, r6
   16280:	mov	r6, ip
   16284:	b	162a8 <__assert_fail@plt+0x52bc>
   16288:	subs	r4, r4, r2
   1628c:	sbc	r5, r5, r3
   16290:	adds	r4, r4, r4
   16294:	adc	r5, r5, r5
   16298:	adds	r4, r4, #1
   1629c:	adc	r5, r5, #0
   162a0:	subs	r6, r6, #1
   162a4:	beq	162c4 <__assert_fail@plt+0x52d8>
   162a8:	cmp	r5, r3
   162ac:	cmpeq	r4, r2
   162b0:	bcs	16288 <__assert_fail@plt+0x529c>
   162b4:	adds	r4, r4, r4
   162b8:	adc	r5, r5, r5
   162bc:	subs	r6, r6, #1
   162c0:	bne	162a8 <__assert_fail@plt+0x52bc>
   162c4:	lsr	r6, r4, ip
   162c8:	lsr	r7, r5, ip
   162cc:	orr	r6, r6, r5, lsl r8
   162d0:	adds	r2, r0, r4
   162d4:	orr	r6, r6, r5, lsr lr
   162d8:	adc	r3, r1, r5
   162dc:	lsl	r1, r7, ip
   162e0:	orr	r1, r1, r6, lsl lr
   162e4:	lsl	r0, r6, ip
   162e8:	orr	r1, r1, r6, lsr r8
   162ec:	subs	r0, r2, r0
   162f0:	mov	r4, r6
   162f4:	mov	r5, r7
   162f8:	sbc	r1, r3, r1
   162fc:	cmp	r9, #0
   16300:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16304:	strd	r4, [r9]
   16308:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1630c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16310:	mov	r7, r0
   16314:	ldr	r6, [pc, #72]	; 16364 <__assert_fail@plt+0x5378>
   16318:	ldr	r5, [pc, #72]	; 16368 <__assert_fail@plt+0x537c>
   1631c:	add	r6, pc, r6
   16320:	add	r5, pc, r5
   16324:	sub	r6, r6, r5
   16328:	mov	r8, r1
   1632c:	mov	r9, r2
   16330:	bl	10d2c <calloc@plt-0x20>
   16334:	asrs	r6, r6, #2
   16338:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1633c:	mov	r4, #0
   16340:	add	r4, r4, #1
   16344:	ldr	r3, [r5], #4
   16348:	mov	r2, r9
   1634c:	mov	r1, r8
   16350:	mov	r0, r7
   16354:	blx	r3
   16358:	cmp	r6, r4
   1635c:	bne	16340 <__assert_fail@plt+0x5354>
   16360:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16364:	andeq	r1, r1, ip, ror #23
   16368:	andeq	r1, r1, r4, ror #23
   1636c:	bx	lr
   16370:	ldr	r3, [pc, #12]	; 16384 <__assert_fail@plt+0x5398>
   16374:	mov	r1, #0
   16378:	add	r3, pc, r3
   1637c:	ldr	r2, [r3]
   16380:	b	10f2c <__cxa_atexit@plt>
   16384:	andeq	r1, r1, r8, ror sp

Disassembly of section .fini:

00016388 <.fini>:
   16388:	push	{r3, lr}
   1638c:	pop	{r3, pc}
