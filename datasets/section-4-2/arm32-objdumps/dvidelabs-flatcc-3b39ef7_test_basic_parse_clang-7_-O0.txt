
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128ac <.init>:
   128ac:	push	{r3, lr}
   128b0:	bl	129d4 <_start@@Base+0x3c>
   128b4:	pop	{r3, pc}

Disassembly of section .plt:

000128b8 <free@plt-0x14>:
   128b8:	push	{lr}		; (str lr, [sp, #-4]!)
   128bc:	ldr	lr, [pc, #4]	; 128c8 <free@plt-0x4>
   128c0:	add	lr, pc, lr
   128c4:	ldr	pc, [lr, #8]!
   128c8:	andeq	r2, r2, r8, lsr r7

000128cc <free@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #139264	; 0x22000
   128d4:	ldr	pc, [ip, #1848]!	; 0x738

000128d8 <memcpy@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #139264	; 0x22000
   128e0:	ldr	pc, [ip, #1840]!	; 0x730

000128e4 <memcmp@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #139264	; 0x22000
   128ec:	ldr	pc, [ip, #1832]!	; 0x728

000128f0 <__isinff@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #139264	; 0x22000
   128f8:	ldr	pc, [ip, #1824]!	; 0x720

000128fc <__isinf@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #139264	; 0x22000
   12904:	ldr	pc, [ip, #1816]!	; 0x718

00012908 <realloc@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #139264	; 0x22000
   12910:	ldr	pc, [ip, #1808]!	; 0x710

00012914 <malloc@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #139264	; 0x22000
   1291c:	ldr	pc, [ip, #1800]!	; 0x708

00012920 <__libc_start_main@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #139264	; 0x22000
   12928:	ldr	pc, [ip, #1792]!	; 0x700

0001292c <__gmon_start__@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #139264	; 0x22000
   12934:	ldr	pc, [ip, #1784]!	; 0x6f8

00012938 <strlen@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #139264	; 0x22000
   12940:	ldr	pc, [ip, #1776]!	; 0x6f0

00012944 <fprintf@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #139264	; 0x22000
   1294c:	ldr	pc, [ip, #1768]!	; 0x6e8

00012950 <posix_memalign@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #139264	; 0x22000
   12958:	ldr	pc, [ip, #1760]!	; 0x6e0

0001295c <memset@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #139264	; 0x22000
   12964:	ldr	pc, [ip, #1752]!	; 0x6d8

00012968 <strtod@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #139264	; 0x22000
   12970:	ldr	pc, [ip, #1744]!	; 0x6d0

00012974 <memchr@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #139264	; 0x22000
   1297c:	ldr	pc, [ip, #1736]!	; 0x6c8

00012980 <abort@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #139264	; 0x22000
   12988:	ldr	pc, [ip, #1728]!	; 0x6c0

0001298c <__assert_fail@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #139264	; 0x22000
   12994:	ldr	pc, [ip, #1720]!	; 0x6b8

Disassembly of section .text:

00012998 <_start@@Base>:
   12998:	mov	fp, #0
   1299c:	mov	lr, #0
   129a0:	pop	{r1}		; (ldr r1, [sp], #4)
   129a4:	mov	r2, sp
   129a8:	push	{r2}		; (str r2, [sp, #-4]!)
   129ac:	push	{r0}		; (str r0, [sp, #-4]!)
   129b0:	ldr	ip, [pc, #16]	; 129c8 <_start@@Base+0x30>
   129b4:	push	{ip}		; (str ip, [sp, #-4]!)
   129b8:	ldr	r0, [pc, #12]	; 129cc <_start@@Base+0x34>
   129bc:	ldr	r3, [pc, #12]	; 129d0 <_start@@Base+0x38>
   129c0:	bl	12920 <__libc_start_main@plt>
   129c4:	bl	12980 <abort@plt>
   129c8:	andeq	r1, r2, r0, ror #30
   129cc:			; <UNDEFINED> instruction: 0x000142bc
   129d0:	andeq	r1, r2, r0, lsl #30
   129d4:	ldr	r3, [pc, #20]	; 129f0 <_start@@Base+0x58>
   129d8:	ldr	r2, [pc, #20]	; 129f4 <_start@@Base+0x5c>
   129dc:	add	r3, pc, r3
   129e0:	ldr	r2, [r3, r2]
   129e4:	cmp	r2, #0
   129e8:	bxeq	lr
   129ec:	b	1292c <__gmon_start__@plt>
   129f0:	andeq	r2, r2, ip, lsl r6
   129f4:	andeq	r0, r0, ip, asr r0
   129f8:	ldr	r0, [pc, #24]	; 12a18 <_start@@Base+0x80>
   129fc:	ldr	r3, [pc, #24]	; 12a1c <_start@@Base+0x84>
   12a00:	cmp	r3, r0
   12a04:	bxeq	lr
   12a08:	ldr	r3, [pc, #16]	; 12a20 <_start@@Base+0x88>
   12a0c:	cmp	r3, #0
   12a10:	bxeq	lr
   12a14:	bx	r3
   12a18:	andeq	r5, r3, r0, ror #1
   12a1c:	andeq	r5, r3, r0, ror #1
   12a20:	andeq	r0, r0, r0
   12a24:	ldr	r0, [pc, #36]	; 12a50 <_start@@Base+0xb8>
   12a28:	ldr	r1, [pc, #36]	; 12a54 <_start@@Base+0xbc>
   12a2c:	sub	r1, r1, r0
   12a30:	asr	r1, r1, #2
   12a34:	add	r1, r1, r1, lsr #31
   12a38:	asrs	r1, r1, #1
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0xc0>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	r5, r3, r0, ror #1
   12a54:	andeq	r5, r3, r0, ror #1
   12a58:	andeq	r0, r0, r0
   12a5c:	push	{r4, lr}
   12a60:	ldr	r4, [pc, #24]	; 12a80 <_start@@Base+0xe8>
   12a64:	ldrb	r3, [r4]
   12a68:	cmp	r3, #0
   12a6c:	popne	{r4, pc}
   12a70:	bl	129f8 <_start@@Base+0x60>
   12a74:	mov	r3, #1
   12a78:	strb	r3, [r4]
   12a7c:	pop	{r4, pc}
   12a80:	andeq	r5, r3, r0, ror #1
   12a84:	b	12a24 <_start@@Base+0x8c>

00012a88 <test@@Base>:
   12a88:	push	{r4, r5, fp, lr}
   12a8c:	add	fp, sp, #8
   12a90:	sub	sp, sp, #280	; 0x118
   12a94:	ldr	ip, [pc, #4072]	; 13a84 <test@@Base+0xffc>
   12a98:	add	ip, pc, ip
   12a9c:	str	r0, [fp, #-12]
   12aa0:	str	r1, [fp, #-16]
   12aa4:	str	r2, [fp, #-20]	; 0xffffffec
   12aa8:	str	r3, [fp, #-24]	; 0xffffffe8
   12aac:	movw	r0, #0
   12ab0:	str	r0, [fp, #-76]	; 0xffffffb4
   12ab4:	sub	r1, fp, #68	; 0x44
   12ab8:	str	r1, [fp, #-72]	; 0xffffffb8
   12abc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12ac0:	str	r0, [fp, #-116]	; 0xffffff8c
   12ac4:	mov	r0, r1
   12ac8:	movw	r1, #0
   12acc:	and	r1, r1, #255	; 0xff
   12ad0:	movw	r2, #44	; 0x2c
   12ad4:	str	ip, [fp, #-120]	; 0xffffff88
   12ad8:	bl	1295c <memset@plt>
   12adc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ae0:	movw	r1, #1
   12ae4:	str	r1, [r0, #16]
   12ae8:	ldr	r0, [fp, #-16]
   12aec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12af0:	str	r0, [r1, #4]
   12af4:	ldr	r0, [fp, #-12]
   12af8:	ldr	r1, [fp, #-120]	; 0xffffff88
   12afc:	movw	r2, #0
   12b00:	uxth	r2, r2
   12b04:	ldr	r3, [fp, #-116]	; 0xffffff8c
   12b08:	bl	15b54 <flatcc_builder_start_buffer@@Base>
   12b0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b10:	ldr	r2, [fp, #-16]
   12b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b18:	str	r0, [fp, #-124]	; 0xffffff84
   12b1c:	mov	r0, r1
   12b20:	mov	r1, r2
   12b24:	mov	r2, r3
   12b28:	bl	13bbc <test@@Base+0x1134>
   12b2c:	str	r0, [fp, #-16]
   12b30:	ldr	r0, [fp, #-16]
   12b34:	ldr	r1, [fp, #-20]	; 0xffffffec
   12b38:	cmp	r0, r1
   12b3c:	bne	12b60 <test@@Base+0xd8>
   12b40:	ldr	r0, [pc, #3960]	; 13ac0 <test@@Base+0x1038>
   12b44:	add	r1, pc, r0
   12b48:	ldr	r0, [pc, #3956]	; 13ac4 <test@@Base+0x103c>
   12b4c:	ldr	r0, [pc, r0]
   12b50:	ldr	r0, [r0]
   12b54:	bl	12944 <fprintf@plt>
   12b58:	str	r0, [fp, #-128]	; 0xffffff80
   12b5c:	b	139ec <test@@Base+0xf64>
   12b60:	ldr	r0, [fp, #-20]	; 0xffffffec
   12b64:	ldr	r1, [fp, #-16]
   12b68:	cmp	r0, r1
   12b6c:	bls	12b90 <test@@Base+0x108>
   12b70:	ldr	r0, [fp, #-16]
   12b74:	ldrb	r0, [r0]
   12b78:	cmp	r0, #123	; 0x7b
   12b7c:	bne	12b90 <test@@Base+0x108>
   12b80:	ldr	r0, [fp, #-16]
   12b84:	add	r0, r0, #1
   12b88:	str	r0, [fp, #-16]
   12b8c:	b	12bd8 <test@@Base+0x150>
   12b90:	ldr	r0, [pc, #3888]	; 13ac8 <test@@Base+0x1040>
   12b94:	add	r1, pc, r0
   12b98:	ldr	r0, [pc, #3884]	; 13acc <test@@Base+0x1044>
   12b9c:	ldr	r0, [pc, r0]
   12ba0:	ldr	r0, [r0]
   12ba4:	movw	r2, #123	; 0x7b
   12ba8:	bl	12944 <fprintf@plt>
   12bac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12bb0:	ldr	r2, [fp, #-16]
   12bb4:	ldr	lr, [fp, #-20]	; 0xffffffec
   12bb8:	str	r0, [fp, #-132]	; 0xffffff7c
   12bbc:	mov	r0, r1
   12bc0:	mov	r1, r2
   12bc4:	mov	r2, lr
   12bc8:	movw	r3, #17
   12bcc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   12bd0:	str	r0, [fp, #-16]
   12bd4:	b	139ec <test@@Base+0xf64>
   12bd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12bdc:	ldr	r1, [fp, #-16]
   12be0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12be4:	bl	13bbc <test@@Base+0x1134>
   12be8:	str	r0, [fp, #-16]
   12bec:	ldr	r0, [fp, #-16]
   12bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   12bf4:	cmp	r0, r1
   12bf8:	bne	12c1c <test@@Base+0x194>
   12bfc:	ldr	r0, [pc, #3940]	; 13b68 <test@@Base+0x10e0>
   12c00:	add	r1, pc, r0
   12c04:	ldr	r0, [pc, #3936]	; 13b6c <test@@Base+0x10e4>
   12c08:	ldr	r0, [pc, r0]
   12c0c:	ldr	r0, [r0]
   12c10:	bl	12944 <fprintf@plt>
   12c14:	str	r0, [fp, #-136]	; 0xffffff78
   12c18:	b	139ec <test@@Base+0xf64>
   12c1c:	ldr	r0, [fp, #-12]
   12c20:	movw	r1, #11
   12c24:	bl	17288 <flatcc_builder_start_table@@Base>
   12c28:	str	r0, [fp, #-140]	; 0xffffff74
   12c2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c30:	ldr	r1, [fp, #-16]
   12c34:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c38:	bl	13c58 <test@@Base+0x11d0>
   12c3c:	str	r0, [fp, #-16]
   12c40:	ldr	r0, [fp, #-16]
   12c44:	ldr	r1, [fp, #-20]	; 0xffffffec
   12c48:	bl	13d04 <test@@Base+0x127c>
   12c4c:	str	r1, [fp, #-92]	; 0xffffffa4
   12c50:	str	r0, [fp, #-96]	; 0xffffffa0
   12c54:	ldr	r0, [fp, #-20]	; 0xffffffec
   12c58:	ldr	r1, [fp, #-16]
   12c5c:	sub	r0, r0, r1
   12c60:	cmp	r0, #8
   12c64:	ble	12c78 <test@@Base+0x1f0>
   12c68:	ldr	r0, [fp, #-16]
   12c6c:	add	r0, r0, #8
   12c70:	str	r0, [sp, #144]	; 0x90
   12c74:	b	12c80 <test@@Base+0x1f8>
   12c78:	ldr	r0, [fp, #-20]	; 0xffffffec
   12c7c:	str	r0, [sp, #144]	; 0x90
   12c80:	ldr	r0, [sp, #144]	; 0x90
   12c84:	str	r0, [fp, #-100]	; 0xffffff9c
   12c88:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12c8c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   12c90:	bfc	r0, #0, #16
   12c94:	ldr	r2, [pc, #3812]	; 13b80 <test@@Base+0x10f8>
   12c98:	add	r2, pc, r2
   12c9c:	ldr	r3, [pc, #3808]	; 13b84 <test@@Base+0x10fc>
   12ca0:	ldr	r3, [pc, r3]
   12ca4:	rev	r3, r3
   12ca8:	ldrb	ip, [r2, #4]
   12cac:	ldrb	r2, [r2, #5]
   12cb0:	lsl	ip, ip, #24
   12cb4:	orr	r2, ip, r2, lsl #16
   12cb8:	subs	r0, r0, r2
   12cbc:	sbcs	r1, r1, r3
   12cc0:	str	r0, [sp, #140]	; 0x8c
   12cc4:	str	r1, [sp, #136]	; 0x88
   12cc8:	bcs	12eac <test@@Base+0x424>
   12ccc:	b	12cd0 <test@@Base+0x248>
   12cd0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12cd4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   12cd8:	and	r0, r0, #-16777216	; 0xff000000
   12cdc:	ldr	r2, [pc, #3748]	; 13b88 <test@@Base+0x1100>
   12ce0:	add	r2, pc, r2
   12ce4:	ldr	r3, [pc, #3744]	; 13b8c <test@@Base+0x1104>
   12ce8:	ldr	r3, [pc, r3]
   12cec:	rev	r3, r3
   12cf0:	ldrb	r2, [r2, #4]
   12cf4:	eor	r1, r1, r3
   12cf8:	eor	r0, r0, r2, lsl #24
   12cfc:	orr	r0, r0, r1
   12d00:	cmp	r0, #0
   12d04:	beq	12d28 <test@@Base+0x2a0>
   12d08:	b	12d0c <test@@Base+0x284>
   12d0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d10:	ldr	r1, [fp, #-16]
   12d14:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d18:	movw	r3, #13
   12d1c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   12d20:	str	r0, [fp, #-16]
   12d24:	b	139ec <test@@Base+0xf64>
   12d28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d2c:	ldr	r1, [fp, #-16]
   12d30:	add	r1, r1, #5
   12d34:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d38:	bl	13d3c <test@@Base+0x12b4>
   12d3c:	str	r0, [fp, #-16]
   12d40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d44:	ldr	r1, [fp, #-16]
   12d48:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d4c:	bl	13bbc <test@@Base+0x1134>
   12d50:	str	r0, [fp, #-16]
   12d54:	ldr	r0, [fp, #-16]
   12d58:	ldr	r1, [fp, #-20]	; 0xffffffec
   12d5c:	cmp	r0, r1
   12d60:	bne	12d84 <test@@Base+0x2fc>
   12d64:	ldr	r0, [pc, #3572]	; 13b60 <test@@Base+0x10d8>
   12d68:	add	r1, pc, r0
   12d6c:	ldr	r0, [pc, #3568]	; 13b64 <test@@Base+0x10dc>
   12d70:	ldr	r0, [pc, r0]
   12d74:	ldr	r0, [r0]
   12d78:	bl	12944 <fprintf@plt>
   12d7c:	str	r0, [sp, #132]	; 0x84
   12d80:	b	139ec <test@@Base+0xf64>
   12d84:	ldr	r0, [fp, #-20]	; 0xffffffec
   12d88:	ldr	r1, [fp, #-16]
   12d8c:	cmp	r0, r1
   12d90:	bls	12db4 <test@@Base+0x32c>
   12d94:	ldr	r0, [fp, #-16]
   12d98:	ldrb	r0, [r0]
   12d9c:	cmp	r0, #58	; 0x3a
   12da0:	bne	12db4 <test@@Base+0x32c>
   12da4:	ldr	r0, [fp, #-16]
   12da8:	add	r0, r0, #1
   12dac:	str	r0, [fp, #-16]
   12db0:	b	12dfc <test@@Base+0x374>
   12db4:	ldr	r0, [pc, #3444]	; 13b30 <test@@Base+0x10a8>
   12db8:	add	r1, pc, r0
   12dbc:	ldr	r0, [pc, #3440]	; 13b34 <test@@Base+0x10ac>
   12dc0:	ldr	r0, [pc, r0]
   12dc4:	ldr	r0, [r0]
   12dc8:	movw	r2, #58	; 0x3a
   12dcc:	bl	12944 <fprintf@plt>
   12dd0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12dd4:	ldr	r2, [fp, #-16]
   12dd8:	ldr	lr, [fp, #-20]	; 0xffffffec
   12ddc:	str	r0, [sp, #128]	; 0x80
   12de0:	mov	r0, r1
   12de4:	mov	r1, r2
   12de8:	mov	r2, lr
   12dec:	movw	r3, #17
   12df0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   12df4:	str	r0, [fp, #-16]
   12df8:	b	139ec <test@@Base+0xf64>
   12dfc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e00:	ldr	r1, [fp, #-16]
   12e04:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e08:	bl	13bbc <test@@Base+0x1134>
   12e0c:	str	r0, [fp, #-16]
   12e10:	ldr	r0, [fp, #-16]
   12e14:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e18:	cmp	r0, r1
   12e1c:	bne	12e40 <test@@Base+0x3b8>
   12e20:	ldr	r0, [pc, #3376]	; 13b58 <test@@Base+0x10d0>
   12e24:	add	r1, pc, r0
   12e28:	ldr	r0, [pc, #3372]	; 13b5c <test@@Base+0x10d4>
   12e2c:	ldr	r0, [pc, r0]
   12e30:	ldr	r0, [r0]
   12e34:	bl	12944 <fprintf@plt>
   12e38:	str	r0, [sp, #124]	; 0x7c
   12e3c:	b	139ec <test@@Base+0xf64>
   12e40:	ldr	r0, [fp, #-12]
   12e44:	movw	r1, #0
   12e48:	movw	r2, #1
   12e4c:	movw	r3, #1
   12e50:	uxth	r3, r3
   12e54:	bl	18b40 <flatcc_builder_table_add@@Base>
   12e58:	str	r0, [fp, #-112]	; 0xffffff90
   12e5c:	ldr	r0, [fp, #-112]	; 0xffffff90
   12e60:	movw	r1, #0
   12e64:	cmp	r0, r1
   12e68:	bne	12e70 <test@@Base+0x3e8>
   12e6c:	b	139ec <test@@Base+0xf64>
   12e70:	ldr	r0, [fp, #-16]
   12e74:	str	r0, [fp, #-100]	; 0xffffff9c
   12e78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e7c:	ldr	r1, [fp, #-16]
   12e80:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e84:	ldr	r3, [fp, #-112]	; 0xffffff90
   12e88:	bl	13f50 <test@@Base+0x14c8>
   12e8c:	str	r0, [fp, #-16]
   12e90:	ldr	r0, [fp, #-100]	; 0xffffff9c
   12e94:	ldr	r1, [fp, #-16]
   12e98:	cmp	r0, r1
   12e9c:	bne	12ea4 <test@@Base+0x41c>
   12ea0:	b	139ec <test@@Base+0xf64>
   12ea4:	b	12ea8 <test@@Base+0x420>
   12ea8:	b	1384c <test@@Base+0xdc4>
   12eac:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12eb0:	ldr	r1, [pc, #3288]	; 13b90 <test@@Base+0x1108>
   12eb4:	ldr	r1, [pc, r1]
   12eb8:	rev	r1, r1
   12ebc:	cmp	r0, r1
   12ec0:	bcs	13534 <test@@Base+0xaac>
   12ec4:	b	12ec8 <test@@Base+0x440>
   12ec8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12ecc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   12ed0:	ldr	r2, [pc, #3260]	; 13b94 <test@@Base+0x110c>
   12ed4:	add	r2, pc, r2
   12ed8:	ldr	r3, [pc, #3256]	; 13b98 <test@@Base+0x1110>
   12edc:	ldr	r3, [pc, r3]
   12ee0:	rev	r3, r3
   12ee4:	ldr	r2, [r2, #4]
   12ee8:	rev	r2, r2
   12eec:	subs	r0, r0, r2
   12ef0:	sbcs	r1, r1, r3
   12ef4:	str	r0, [sp, #120]	; 0x78
   12ef8:	str	r1, [sp, #116]	; 0x74
   12efc:	bcs	130ec <test@@Base+0x664>
   12f00:	b	12f04 <test@@Base+0x47c>
   12f04:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12f08:	ldr	r1, [fp, #-92]	; 0xffffffa4
   12f0c:	bfc	r0, #0, #16
   12f10:	ldr	r2, [pc, #3204]	; 13b9c <test@@Base+0x1114>
   12f14:	add	r2, pc, r2
   12f18:	ldr	r3, [pc, #3200]	; 13ba0 <test@@Base+0x1118>
   12f1c:	ldr	r3, [pc, r3]
   12f20:	rev	r3, r3
   12f24:	ldrb	ip, [r2, #4]
   12f28:	ldrb	r2, [r2, #5]
   12f2c:	lsl	ip, ip, #24
   12f30:	orr	r2, ip, r2, lsl #16
   12f34:	eor	r1, r1, r3
   12f38:	eor	r0, r0, r2
   12f3c:	orr	r0, r0, r1
   12f40:	cmp	r0, #0
   12f44:	beq	12f68 <test@@Base+0x4e0>
   12f48:	b	12f4c <test@@Base+0x4c4>
   12f4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f50:	ldr	r1, [fp, #-16]
   12f54:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f58:	movw	r3, #13
   12f5c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   12f60:	str	r0, [fp, #-16]
   12f64:	b	139ec <test@@Base+0xf64>
   12f68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f6c:	ldr	r1, [fp, #-16]
   12f70:	add	r1, r1, #6
   12f74:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f78:	bl	13d3c <test@@Base+0x12b4>
   12f7c:	str	r0, [fp, #-16]
   12f80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f84:	ldr	r1, [fp, #-16]
   12f88:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f8c:	bl	13bbc <test@@Base+0x1134>
   12f90:	str	r0, [fp, #-16]
   12f94:	ldr	r0, [fp, #-16]
   12f98:	ldr	r1, [fp, #-20]	; 0xffffffec
   12f9c:	cmp	r0, r1
   12fa0:	bne	12fc4 <test@@Base+0x53c>
   12fa4:	ldr	r0, [pc, #2940]	; 13b28 <test@@Base+0x10a0>
   12fa8:	add	r1, pc, r0
   12fac:	ldr	r0, [pc, #2936]	; 13b2c <test@@Base+0x10a4>
   12fb0:	ldr	r0, [pc, r0]
   12fb4:	ldr	r0, [r0]
   12fb8:	bl	12944 <fprintf@plt>
   12fbc:	str	r0, [sp, #112]	; 0x70
   12fc0:	b	139ec <test@@Base+0xf64>
   12fc4:	ldr	r0, [fp, #-20]	; 0xffffffec
   12fc8:	ldr	r1, [fp, #-16]
   12fcc:	cmp	r0, r1
   12fd0:	bls	12ff4 <test@@Base+0x56c>
   12fd4:	ldr	r0, [fp, #-16]
   12fd8:	ldrb	r0, [r0]
   12fdc:	cmp	r0, #58	; 0x3a
   12fe0:	bne	12ff4 <test@@Base+0x56c>
   12fe4:	ldr	r0, [fp, #-16]
   12fe8:	add	r0, r0, #1
   12fec:	str	r0, [fp, #-16]
   12ff0:	b	1303c <test@@Base+0x5b4>
   12ff4:	ldr	r0, [pc, #2844]	; 13b18 <test@@Base+0x1090>
   12ff8:	add	r1, pc, r0
   12ffc:	ldr	r0, [pc, #2840]	; 13b1c <test@@Base+0x1094>
   13000:	ldr	r0, [pc, r0]
   13004:	ldr	r0, [r0]
   13008:	movw	r2, #58	; 0x3a
   1300c:	bl	12944 <fprintf@plt>
   13010:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13014:	ldr	r2, [fp, #-16]
   13018:	ldr	lr, [fp, #-20]	; 0xffffffec
   1301c:	str	r0, [sp, #108]	; 0x6c
   13020:	mov	r0, r1
   13024:	mov	r1, r2
   13028:	mov	r2, lr
   1302c:	movw	r3, #17
   13030:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13034:	str	r0, [fp, #-16]
   13038:	b	139ec <test@@Base+0xf64>
   1303c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13040:	ldr	r1, [fp, #-16]
   13044:	ldr	r2, [fp, #-20]	; 0xffffffec
   13048:	bl	13bbc <test@@Base+0x1134>
   1304c:	str	r0, [fp, #-16]
   13050:	ldr	r0, [fp, #-16]
   13054:	ldr	r1, [fp, #-20]	; 0xffffffec
   13058:	cmp	r0, r1
   1305c:	bne	13080 <test@@Base+0x5f8>
   13060:	ldr	r0, [pc, #2744]	; 13b20 <test@@Base+0x1098>
   13064:	add	r1, pc, r0
   13068:	ldr	r0, [pc, #2740]	; 13b24 <test@@Base+0x109c>
   1306c:	ldr	r0, [pc, r0]
   13070:	ldr	r0, [r0]
   13074:	bl	12944 <fprintf@plt>
   13078:	str	r0, [sp, #104]	; 0x68
   1307c:	b	139ec <test@@Base+0xf64>
   13080:	ldr	r0, [fp, #-12]
   13084:	movw	r1, #1
   13088:	movw	r2, #8
   1308c:	movw	r3, #8
   13090:	uxth	r3, r3
   13094:	bl	18b40 <flatcc_builder_table_add@@Base>
   13098:	str	r0, [fp, #-112]	; 0xffffff90
   1309c:	ldr	r0, [fp, #-112]	; 0xffffff90
   130a0:	movw	r1, #0
   130a4:	cmp	r0, r1
   130a8:	bne	130b0 <test@@Base+0x628>
   130ac:	b	139ec <test@@Base+0xf64>
   130b0:	ldr	r0, [fp, #-16]
   130b4:	str	r0, [fp, #-100]	; 0xffffff9c
   130b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   130bc:	ldr	r1, [fp, #-16]
   130c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   130c4:	ldr	r3, [fp, #-112]	; 0xffffff90
   130c8:	bl	1dad8 <flatcc_json_parser_double@@Base>
   130cc:	str	r0, [fp, #-16]
   130d0:	ldr	r0, [fp, #-100]	; 0xffffff9c
   130d4:	ldr	r1, [fp, #-16]
   130d8:	cmp	r0, r1
   130dc:	bne	130e4 <test@@Base+0x65c>
   130e0:	b	139ec <test@@Base+0xf64>
   130e4:	b	130e8 <test@@Base+0x660>
   130e8:	b	13530 <test@@Base+0xaa8>
   130ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   130f0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   130f4:	ldr	r2, [pc, #2728]	; 13ba4 <test@@Base+0x111c>
   130f8:	add	r2, pc, r2
   130fc:	ldr	r3, [pc, #2724]	; 13ba8 <test@@Base+0x1120>
   13100:	ldr	r3, [pc, r3]
   13104:	rev	r3, r3
   13108:	ldr	r2, [r2, #4]
   1310c:	rev	r2, r2
   13110:	eor	r1, r1, r3
   13114:	eor	r0, r0, r2
   13118:	orr	r0, r0, r1
   1311c:	cmp	r0, #0
   13120:	beq	13144 <test@@Base+0x6bc>
   13124:	b	13128 <test@@Base+0x6a0>
   13128:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1312c:	ldr	r1, [fp, #-16]
   13130:	ldr	r2, [fp, #-20]	; 0xffffffec
   13134:	movw	r3, #13
   13138:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1313c:	str	r0, [fp, #-16]
   13140:	b	139ec <test@@Base+0xf64>
   13144:	ldr	r0, [fp, #-100]	; 0xffffff9c
   13148:	str	r0, [fp, #-16]
   1314c:	ldr	r0, [fp, #-16]
   13150:	ldr	r1, [fp, #-20]	; 0xffffffec
   13154:	bl	13d04 <test@@Base+0x127c>
   13158:	str	r1, [fp, #-92]	; 0xffffffa4
   1315c:	str	r0, [fp, #-96]	; 0xffffffa0
   13160:	ldr	r0, [fp, #-20]	; 0xffffffec
   13164:	ldr	r1, [fp, #-16]
   13168:	sub	r0, r0, r1
   1316c:	cmp	r0, #8
   13170:	ble	13184 <test@@Base+0x6fc>
   13174:	ldr	r0, [fp, #-16]
   13178:	add	r0, r0, #8
   1317c:	str	r0, [sp, #100]	; 0x64
   13180:	b	1318c <test@@Base+0x704>
   13184:	ldr	r0, [fp, #-20]	; 0xffffffec
   13188:	str	r0, [sp, #100]	; 0x64
   1318c:	ldr	r0, [sp, #100]	; 0x64
   13190:	str	r0, [fp, #-100]	; 0xffffff9c
   13194:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13198:	ldr	r1, [pc, #2572]	; 13bac <test@@Base+0x1124>
   1319c:	ldr	r1, [pc, r1]
   131a0:	rev	r1, r1
   131a4:	cmp	r0, r1
   131a8:	bcs	1336c <test@@Base+0x8e4>
   131ac:	b	131b0 <test@@Base+0x728>
   131b0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   131b4:	ldr	r1, [pc, #2548]	; 13bb0 <test@@Base+0x1128>
   131b8:	ldr	r1, [pc, r1]
   131bc:	rev	r1, r1
   131c0:	teq	r0, r1
   131c4:	beq	131e8 <test@@Base+0x760>
   131c8:	b	131cc <test@@Base+0x744>
   131cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   131d0:	ldr	r1, [fp, #-16]
   131d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   131d8:	movw	r3, #13
   131dc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   131e0:	str	r0, [fp, #-16]
   131e4:	b	139ec <test@@Base+0xf64>
   131e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   131ec:	ldr	r1, [fp, #-16]
   131f0:	add	r1, r1, #4
   131f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   131f8:	bl	13d3c <test@@Base+0x12b4>
   131fc:	str	r0, [fp, #-16]
   13200:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13204:	ldr	r1, [fp, #-16]
   13208:	ldr	r2, [fp, #-20]	; 0xffffffec
   1320c:	bl	13bbc <test@@Base+0x1134>
   13210:	str	r0, [fp, #-16]
   13214:	ldr	r0, [fp, #-16]
   13218:	ldr	r1, [fp, #-20]	; 0xffffffec
   1321c:	cmp	r0, r1
   13220:	bne	13244 <test@@Base+0x7bc>
   13224:	ldr	r0, [pc, #2276]	; 13b10 <test@@Base+0x1088>
   13228:	add	r1, pc, r0
   1322c:	ldr	r0, [pc, #2272]	; 13b14 <test@@Base+0x108c>
   13230:	ldr	r0, [pc, r0]
   13234:	ldr	r0, [r0]
   13238:	bl	12944 <fprintf@plt>
   1323c:	str	r0, [sp, #96]	; 0x60
   13240:	b	139ec <test@@Base+0xf64>
   13244:	ldr	r0, [fp, #-20]	; 0xffffffec
   13248:	ldr	r1, [fp, #-16]
   1324c:	cmp	r0, r1
   13250:	bls	13274 <test@@Base+0x7ec>
   13254:	ldr	r0, [fp, #-16]
   13258:	ldrb	r0, [r0]
   1325c:	cmp	r0, #58	; 0x3a
   13260:	bne	13274 <test@@Base+0x7ec>
   13264:	ldr	r0, [fp, #-16]
   13268:	add	r0, r0, #1
   1326c:	str	r0, [fp, #-16]
   13270:	b	132bc <test@@Base+0x834>
   13274:	ldr	r0, [pc, #2180]	; 13b00 <test@@Base+0x1078>
   13278:	add	r1, pc, r0
   1327c:	ldr	r0, [pc, #2176]	; 13b04 <test@@Base+0x107c>
   13280:	ldr	r0, [pc, r0]
   13284:	ldr	r0, [r0]
   13288:	movw	r2, #58	; 0x3a
   1328c:	bl	12944 <fprintf@plt>
   13290:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13294:	ldr	r2, [fp, #-16]
   13298:	ldr	lr, [fp, #-20]	; 0xffffffec
   1329c:	str	r0, [sp, #92]	; 0x5c
   132a0:	mov	r0, r1
   132a4:	mov	r1, r2
   132a8:	mov	r2, lr
   132ac:	movw	r3, #17
   132b0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   132b4:	str	r0, [fp, #-16]
   132b8:	b	139ec <test@@Base+0xf64>
   132bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132c0:	ldr	r1, [fp, #-16]
   132c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   132c8:	bl	13bbc <test@@Base+0x1134>
   132cc:	str	r0, [fp, #-16]
   132d0:	ldr	r0, [fp, #-16]
   132d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   132d8:	cmp	r0, r1
   132dc:	bne	13300 <test@@Base+0x878>
   132e0:	ldr	r0, [pc, #2080]	; 13b08 <test@@Base+0x1080>
   132e4:	add	r1, pc, r0
   132e8:	ldr	r0, [pc, #2076]	; 13b0c <test@@Base+0x1084>
   132ec:	ldr	r0, [pc, r0]
   132f0:	ldr	r0, [r0]
   132f4:	bl	12944 <fprintf@plt>
   132f8:	str	r0, [sp, #88]	; 0x58
   132fc:	b	139ec <test@@Base+0xf64>
   13300:	ldr	r0, [fp, #-12]
   13304:	movw	r1, #3
   13308:	movw	r2, #8
   1330c:	movw	r3, #8
   13310:	uxth	r3, r3
   13314:	bl	18b40 <flatcc_builder_table_add@@Base>
   13318:	str	r0, [fp, #-112]	; 0xffffff90
   1331c:	ldr	r0, [fp, #-112]	; 0xffffff90
   13320:	movw	r1, #0
   13324:	cmp	r0, r1
   13328:	bne	13330 <test@@Base+0x8a8>
   1332c:	b	139ec <test@@Base+0xf64>
   13330:	ldr	r0, [fp, #-16]
   13334:	str	r0, [fp, #-100]	; 0xffffff9c
   13338:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1333c:	ldr	r1, [fp, #-16]
   13340:	ldr	r2, [fp, #-20]	; 0xffffffec
   13344:	ldr	r3, [fp, #-112]	; 0xffffff90
   13348:	bl	1402c <test@@Base+0x15a4>
   1334c:	str	r0, [fp, #-16]
   13350:	ldr	r0, [fp, #-100]	; 0xffffff9c
   13354:	ldr	r1, [fp, #-16]
   13358:	cmp	r0, r1
   1335c:	bne	13364 <test@@Base+0x8dc>
   13360:	b	139ec <test@@Base+0xf64>
   13364:	b	13368 <test@@Base+0x8e0>
   13368:	b	13528 <test@@Base+0xaa0>
   1336c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13370:	ldr	r1, [pc, #2108]	; 13bb4 <test@@Base+0x112c>
   13374:	ldr	r1, [pc, r1]
   13378:	rev	r1, r1
   1337c:	teq	r0, r1
   13380:	beq	133a4 <test@@Base+0x91c>
   13384:	b	13388 <test@@Base+0x900>
   13388:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1338c:	ldr	r1, [fp, #-16]
   13390:	ldr	r2, [fp, #-20]	; 0xffffffec
   13394:	movw	r3, #13
   13398:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1339c:	str	r0, [fp, #-16]
   133a0:	b	139ec <test@@Base+0xf64>
   133a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133a8:	ldr	r1, [fp, #-16]
   133ac:	add	r1, r1, #4
   133b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   133b4:	bl	13d3c <test@@Base+0x12b4>
   133b8:	str	r0, [fp, #-16]
   133bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133c0:	ldr	r1, [fp, #-16]
   133c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   133c8:	bl	13bbc <test@@Base+0x1134>
   133cc:	str	r0, [fp, #-16]
   133d0:	ldr	r0, [fp, #-16]
   133d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   133d8:	cmp	r0, r1
   133dc:	bne	13400 <test@@Base+0x978>
   133e0:	ldr	r0, [pc, #1808]	; 13af8 <test@@Base+0x1070>
   133e4:	add	r1, pc, r0
   133e8:	ldr	r0, [pc, #1804]	; 13afc <test@@Base+0x1074>
   133ec:	ldr	r0, [pc, r0]
   133f0:	ldr	r0, [r0]
   133f4:	bl	12944 <fprintf@plt>
   133f8:	str	r0, [sp, #84]	; 0x54
   133fc:	b	139ec <test@@Base+0xf64>
   13400:	ldr	r0, [fp, #-20]	; 0xffffffec
   13404:	ldr	r1, [fp, #-16]
   13408:	cmp	r0, r1
   1340c:	bls	13430 <test@@Base+0x9a8>
   13410:	ldr	r0, [fp, #-16]
   13414:	ldrb	r0, [r0]
   13418:	cmp	r0, #58	; 0x3a
   1341c:	bne	13430 <test@@Base+0x9a8>
   13420:	ldr	r0, [fp, #-16]
   13424:	add	r0, r0, #1
   13428:	str	r0, [fp, #-16]
   1342c:	b	13478 <test@@Base+0x9f0>
   13430:	ldr	r0, [pc, #1712]	; 13ae8 <test@@Base+0x1060>
   13434:	add	r1, pc, r0
   13438:	ldr	r0, [pc, #1708]	; 13aec <test@@Base+0x1064>
   1343c:	ldr	r0, [pc, r0]
   13440:	ldr	r0, [r0]
   13444:	movw	r2, #58	; 0x3a
   13448:	bl	12944 <fprintf@plt>
   1344c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13450:	ldr	r2, [fp, #-16]
   13454:	ldr	lr, [fp, #-20]	; 0xffffffec
   13458:	str	r0, [sp, #80]	; 0x50
   1345c:	mov	r0, r1
   13460:	mov	r1, r2
   13464:	mov	r2, lr
   13468:	movw	r3, #17
   1346c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13470:	str	r0, [fp, #-16]
   13474:	b	139ec <test@@Base+0xf64>
   13478:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1347c:	ldr	r1, [fp, #-16]
   13480:	ldr	r2, [fp, #-20]	; 0xffffffec
   13484:	bl	13bbc <test@@Base+0x1134>
   13488:	str	r0, [fp, #-16]
   1348c:	ldr	r0, [fp, #-16]
   13490:	ldr	r1, [fp, #-20]	; 0xffffffec
   13494:	cmp	r0, r1
   13498:	bne	134bc <test@@Base+0xa34>
   1349c:	ldr	r0, [pc, #1612]	; 13af0 <test@@Base+0x1068>
   134a0:	add	r1, pc, r0
   134a4:	ldr	r0, [pc, #1608]	; 13af4 <test@@Base+0x106c>
   134a8:	ldr	r0, [pc, r0]
   134ac:	ldr	r0, [r0]
   134b0:	bl	12944 <fprintf@plt>
   134b4:	str	r0, [sp, #76]	; 0x4c
   134b8:	b	139ec <test@@Base+0xf64>
   134bc:	ldr	r0, [fp, #-12]
   134c0:	movw	r1, #2
   134c4:	movw	r2, #4
   134c8:	movw	r3, #4
   134cc:	uxth	r3, r3
   134d0:	bl	18b40 <flatcc_builder_table_add@@Base>
   134d4:	str	r0, [fp, #-112]	; 0xffffff90
   134d8:	ldr	r0, [fp, #-112]	; 0xffffff90
   134dc:	movw	r1, #0
   134e0:	cmp	r0, r1
   134e4:	bne	134ec <test@@Base+0xa64>
   134e8:	b	139ec <test@@Base+0xf64>
   134ec:	ldr	r0, [fp, #-16]
   134f0:	str	r0, [fp, #-100]	; 0xffffff9c
   134f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   134f8:	ldr	r1, [fp, #-16]
   134fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13500:	ldr	r3, [fp, #-112]	; 0xffffff90
   13504:	bl	14104 <test@@Base+0x167c>
   13508:	str	r0, [fp, #-16]
   1350c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   13510:	ldr	r1, [fp, #-16]
   13514:	cmp	r0, r1
   13518:	bne	13520 <test@@Base+0xa98>
   1351c:	b	139ec <test@@Base+0xf64>
   13520:	b	13524 <test@@Base+0xa9c>
   13524:	b	13528 <test@@Base+0xaa0>
   13528:	b	1352c <test@@Base+0xaa4>
   1352c:	b	13530 <test@@Base+0xaa8>
   13530:	b	13848 <test@@Base+0xdc0>
   13534:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13538:	ldr	r1, [pc, #1656]	; 13bb8 <test@@Base+0x1130>
   1353c:	ldr	r1, [pc, r1]
   13540:	rev	r1, r1
   13544:	teq	r0, r1
   13548:	beq	1356c <test@@Base+0xae4>
   1354c:	b	13550 <test@@Base+0xac8>
   13550:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13554:	ldr	r1, [fp, #-16]
   13558:	ldr	r2, [fp, #-20]	; 0xffffffec
   1355c:	movw	r3, #13
   13560:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13564:	str	r0, [fp, #-16]
   13568:	b	139ec <test@@Base+0xf64>
   1356c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13570:	ldr	r1, [fp, #-16]
   13574:	add	r1, r1, #4
   13578:	ldr	r2, [fp, #-20]	; 0xffffffec
   1357c:	bl	13d3c <test@@Base+0x12b4>
   13580:	str	r0, [fp, #-16]
   13584:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13588:	ldr	r1, [fp, #-16]
   1358c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13590:	bl	13bbc <test@@Base+0x1134>
   13594:	str	r0, [fp, #-16]
   13598:	ldr	r0, [fp, #-16]
   1359c:	ldr	r1, [fp, #-20]	; 0xffffffec
   135a0:	cmp	r0, r1
   135a4:	bne	135c8 <test@@Base+0xb40>
   135a8:	ldr	r0, [pc, #1328]	; 13ae0 <test@@Base+0x1058>
   135ac:	add	r1, pc, r0
   135b0:	ldr	r0, [pc, #1324]	; 13ae4 <test@@Base+0x105c>
   135b4:	ldr	r0, [pc, r0]
   135b8:	ldr	r0, [r0]
   135bc:	bl	12944 <fprintf@plt>
   135c0:	str	r0, [sp, #72]	; 0x48
   135c4:	b	139ec <test@@Base+0xf64>
   135c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   135cc:	ldr	r1, [fp, #-16]
   135d0:	cmp	r0, r1
   135d4:	bls	135f8 <test@@Base+0xb70>
   135d8:	ldr	r0, [fp, #-16]
   135dc:	ldrb	r0, [r0]
   135e0:	cmp	r0, #58	; 0x3a
   135e4:	bne	135f8 <test@@Base+0xb70>
   135e8:	ldr	r0, [fp, #-16]
   135ec:	add	r0, r0, #1
   135f0:	str	r0, [fp, #-16]
   135f4:	b	13640 <test@@Base+0xbb8>
   135f8:	ldr	r0, [pc, #1232]	; 13ad0 <test@@Base+0x1048>
   135fc:	add	r1, pc, r0
   13600:	ldr	r0, [pc, #1228]	; 13ad4 <test@@Base+0x104c>
   13604:	ldr	r0, [pc, r0]
   13608:	ldr	r0, [r0]
   1360c:	movw	r2, #58	; 0x3a
   13610:	bl	12944 <fprintf@plt>
   13614:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13618:	ldr	r2, [fp, #-16]
   1361c:	ldr	lr, [fp, #-20]	; 0xffffffec
   13620:	str	r0, [sp, #68]	; 0x44
   13624:	mov	r0, r1
   13628:	mov	r1, r2
   1362c:	mov	r2, lr
   13630:	movw	r3, #17
   13634:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13638:	str	r0, [fp, #-16]
   1363c:	b	139ec <test@@Base+0xf64>
   13640:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13644:	ldr	r1, [fp, #-16]
   13648:	ldr	r2, [fp, #-20]	; 0xffffffec
   1364c:	bl	13bbc <test@@Base+0x1134>
   13650:	str	r0, [fp, #-16]
   13654:	ldr	r0, [fp, #-16]
   13658:	ldr	r1, [fp, #-20]	; 0xffffffec
   1365c:	cmp	r0, r1
   13660:	bne	13684 <test@@Base+0xbfc>
   13664:	ldr	r0, [pc, #1132]	; 13ad8 <test@@Base+0x1050>
   13668:	add	r1, pc, r0
   1366c:	ldr	r0, [pc, #1128]	; 13adc <test@@Base+0x1054>
   13670:	ldr	r0, [pc, r0]
   13674:	ldr	r0, [r0]
   13678:	bl	12944 <fprintf@plt>
   1367c:	str	r0, [sp, #64]	; 0x40
   13680:	b	139ec <test@@Base+0xf64>
   13684:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13688:	ldr	r1, [fp, #-16]
   1368c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13690:	bl	141dc <test@@Base+0x1754>
   13694:	str	r0, [fp, #-16]
   13698:	ldr	r0, [fp, #-16]
   1369c:	str	r0, [fp, #-100]	; 0xffffff9c
   136a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   136a4:	ldr	r1, [fp, #-16]
   136a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   136ac:	bl	1c114 <flatcc_json_parser_string_part@@Base>
   136b0:	str	r0, [fp, #-16]
   136b4:	ldr	r0, [fp, #-16]
   136b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   136bc:	cmp	r0, r1
   136c0:	bne	136c8 <test@@Base+0xc40>
   136c4:	b	139ec <test@@Base+0xf64>
   136c8:	ldr	r0, [fp, #-16]
   136cc:	ldrb	r0, [r0]
   136d0:	cmp	r0, #34	; 0x22
   136d4:	bne	136f8 <test@@Base+0xc70>
   136d8:	ldr	r0, [fp, #-12]
   136dc:	ldr	r1, [fp, #-100]	; 0xffffff9c
   136e0:	ldr	r2, [fp, #-16]
   136e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   136e8:	sub	r2, r2, r3
   136ec:	bl	195c0 <flatcc_builder_create_string@@Base>
   136f0:	str	r0, [fp, #-80]	; 0xffffffb0
   136f4:	b	137f0 <test@@Base+0xd68>
   136f8:	ldr	r0, [fp, #-12]
   136fc:	bl	170a8 <flatcc_builder_start_string@@Base>
   13700:	ldr	lr, [fp, #-12]
   13704:	ldr	r1, [fp, #-16]
   13708:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1370c:	sub	r1, r1, r2
   13710:	str	r0, [sp, #60]	; 0x3c
   13714:	mov	r0, lr
   13718:	bl	16868 <flatcc_builder_extend_string@@Base>
   1371c:	str	r0, [fp, #-104]	; 0xffffff98
   13720:	ldr	r0, [fp, #-104]	; 0xffffff98
   13724:	movw	r1, #0
   13728:	cmp	r0, r1
   1372c:	bne	13734 <test@@Base+0xcac>
   13730:	b	139ec <test@@Base+0xf64>
   13734:	ldr	r0, [fp, #-104]	; 0xffffff98
   13738:	ldr	r1, [fp, #-100]	; 0xffffff9c
   1373c:	ldr	r2, [fp, #-16]
   13740:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13744:	sub	r2, r2, r3
   13748:	bl	128d8 <memcpy@plt>
   1374c:	sub	r3, fp, #108	; 0x6c
   13750:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13754:	ldr	r1, [fp, #-16]
   13758:	ldr	r2, [fp, #-20]	; 0xffffffec
   1375c:	bl	1c414 <flatcc_json_parser_string_escape@@Base>
   13760:	sub	r1, fp, #108	; 0x6c
   13764:	str	r0, [fp, #-16]
   13768:	ldr	r0, [fp, #-12]
   1376c:	add	r1, r1, #1
   13770:	ldrb	r2, [fp, #-108]	; 0xffffff94
   13774:	bl	16900 <flatcc_builder_append_string@@Base>
   13778:	ldr	r1, [fp, #-16]
   1377c:	str	r1, [fp, #-100]	; 0xffffff9c
   13780:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13784:	ldr	r2, [fp, #-16]
   13788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1378c:	str	r0, [sp, #56]	; 0x38
   13790:	mov	r0, r1
   13794:	mov	r1, r2
   13798:	mov	r2, r3
   1379c:	bl	1c114 <flatcc_json_parser_string_part@@Base>
   137a0:	str	r0, [fp, #-16]
   137a4:	ldr	r0, [fp, #-16]
   137a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   137ac:	cmp	r0, r1
   137b0:	bne	137b8 <test@@Base+0xd30>
   137b4:	b	139ec <test@@Base+0xf64>
   137b8:	ldr	r0, [fp, #-12]
   137bc:	ldr	r1, [fp, #-100]	; 0xffffff9c
   137c0:	ldr	r2, [fp, #-16]
   137c4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   137c8:	sub	r2, r2, r3
   137cc:	bl	16900 <flatcc_builder_append_string@@Base>
   137d0:	str	r0, [sp, #52]	; 0x34
   137d4:	ldr	r0, [fp, #-16]
   137d8:	ldrb	r0, [r0]
   137dc:	cmp	r0, #34	; 0x22
   137e0:	bne	1374c <test@@Base+0xcc4>
   137e4:	ldr	r0, [fp, #-12]
   137e8:	bl	197c8 <flatcc_builder_end_string@@Base>
   137ec:	str	r0, [fp, #-80]	; 0xffffffb0
   137f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   137f4:	cmp	r0, #0
   137f8:	bne	13800 <test@@Base+0xd78>
   137fc:	b	139ec <test@@Base+0xf64>
   13800:	ldr	r0, [fp, #-12]
   13804:	movw	r1, #10
   13808:	bl	18a10 <flatcc_builder_table_add_offset@@Base>
   1380c:	str	r0, [fp, #-84]	; 0xffffffac
   13810:	ldr	r0, [fp, #-84]	; 0xffffffac
   13814:	movw	r1, #0
   13818:	cmp	r0, r1
   1381c:	bne	13824 <test@@Base+0xd9c>
   13820:	b	139ec <test@@Base+0xf64>
   13824:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13828:	ldr	r1, [fp, #-84]	; 0xffffffac
   1382c:	str	r0, [r1]
   13830:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13834:	ldr	r1, [fp, #-16]
   13838:	ldr	r2, [fp, #-20]	; 0xffffffec
   1383c:	bl	1424c <test@@Base+0x17c4>
   13840:	str	r0, [fp, #-16]
   13844:	b	13848 <test@@Base+0xdc0>
   13848:	b	1384c <test@@Base+0xdc4>
   1384c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13850:	ldr	r1, [fp, #-16]
   13854:	ldr	r2, [fp, #-20]	; 0xffffffec
   13858:	bl	13bbc <test@@Base+0x1134>
   1385c:	str	r0, [fp, #-16]
   13860:	ldr	r0, [fp, #-16]
   13864:	ldr	r1, [fp, #-20]	; 0xffffffec
   13868:	cmp	r0, r1
   1386c:	bne	13890 <test@@Base+0xe08>
   13870:	ldr	r0, [pc, #728]	; 13b50 <test@@Base+0x10c8>
   13874:	add	r1, pc, r0
   13878:	ldr	r0, [pc, #724]	; 13b54 <test@@Base+0x10cc>
   1387c:	ldr	r0, [pc, r0]
   13880:	ldr	r0, [r0]
   13884:	bl	12944 <fprintf@plt>
   13888:	str	r0, [sp, #48]	; 0x30
   1388c:	b	139ec <test@@Base+0xf64>
   13890:	ldr	r0, [fp, #-16]
   13894:	ldrb	r0, [r0]
   13898:	cmp	r0, #44	; 0x2c
   1389c:	bne	13908 <test@@Base+0xe80>
   138a0:	ldr	r0, [fp, #-16]
   138a4:	add	r0, r0, #1
   138a8:	str	r0, [fp, #-16]
   138ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   138b0:	ldr	r1, [fp, #-16]
   138b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   138b8:	bl	13bbc <test@@Base+0x1134>
   138bc:	str	r0, [fp, #-16]
   138c0:	ldr	r0, [fp, #-16]
   138c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   138c8:	cmp	r0, r1
   138cc:	bne	138f0 <test@@Base+0xe68>
   138d0:	ldr	r0, [pc, #624]	; 13b48 <test@@Base+0x10c0>
   138d4:	add	r1, pc, r0
   138d8:	ldr	r0, [pc, #620]	; 13b4c <test@@Base+0x10c4>
   138dc:	ldr	r0, [pc, r0]
   138e0:	ldr	r0, [r0]
   138e4:	bl	12944 <fprintf@plt>
   138e8:	str	r0, [sp, #44]	; 0x2c
   138ec:	b	139ec <test@@Base+0xf64>
   138f0:	ldr	r0, [fp, #-16]
   138f4:	ldrb	r0, [r0]
   138f8:	cmp	r0, #125	; 0x7d
   138fc:	beq	13904 <test@@Base+0xe7c>
   13900:	b	12c2c <test@@Base+0x1a4>
   13904:	b	13908 <test@@Base+0xe80>
   13908:	ldr	r0, [fp, #-20]	; 0xffffffec
   1390c:	ldr	r1, [fp, #-16]
   13910:	cmp	r0, r1
   13914:	bls	13938 <test@@Base+0xeb0>
   13918:	ldr	r0, [fp, #-16]
   1391c:	ldrb	r0, [r0]
   13920:	cmp	r0, #125	; 0x7d
   13924:	bne	13938 <test@@Base+0xeb0>
   13928:	ldr	r0, [fp, #-16]
   1392c:	add	r0, r0, #1
   13930:	str	r0, [fp, #-16]
   13934:	b	13980 <test@@Base+0xef8>
   13938:	ldr	r0, [pc, #504]	; 13b38 <test@@Base+0x10b0>
   1393c:	add	r1, pc, r0
   13940:	ldr	r0, [pc, #500]	; 13b3c <test@@Base+0x10b4>
   13944:	ldr	r0, [pc, r0]
   13948:	ldr	r0, [r0]
   1394c:	movw	r2, #125	; 0x7d
   13950:	bl	12944 <fprintf@plt>
   13954:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13958:	ldr	r2, [fp, #-16]
   1395c:	ldr	lr, [fp, #-20]	; 0xffffffec
   13960:	str	r0, [sp, #40]	; 0x28
   13964:	mov	r0, r1
   13968:	mov	r1, r2
   1396c:	mov	r2, lr
   13970:	movw	r3, #17
   13974:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13978:	str	r0, [fp, #-16]
   1397c:	b	139ec <test@@Base+0xf64>
   13980:	ldr	r0, [fp, #-12]
   13984:	bl	17f00 <flatcc_builder_end_table@@Base>
   13988:	str	r0, [fp, #-76]	; 0xffffffb4
   1398c:	ldr	r0, [fp, #-12]
   13990:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13994:	bl	15e98 <flatcc_builder_end_buffer@@Base>
   13998:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1399c:	ldr	lr, [fp, #-16]
   139a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   139a4:	str	r0, [sp, #36]	; 0x24
   139a8:	mov	r0, r1
   139ac:	mov	r1, lr
   139b0:	bl	13bbc <test@@Base+0x1134>
   139b4:	str	r0, [fp, #-16]
   139b8:	ldr	r0, [fp, #-16]
   139bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   139c0:	cmp	r0, r1
   139c4:	beq	139e8 <test@@Base+0xf60>
   139c8:	ldr	r0, [pc, #368]	; 13b40 <test@@Base+0x10b8>
   139cc:	add	r1, pc, r0
   139d0:	ldr	r0, [pc, #364]	; 13b44 <test@@Base+0x10bc>
   139d4:	ldr	r0, [pc, r0]
   139d8:	ldr	r0, [r0]
   139dc:	bl	12944 <fprintf@plt>
   139e0:	str	r0, [sp, #32]
   139e4:	b	139ec <test@@Base+0xf64>
   139e8:	b	139ec <test@@Base+0xf64>
   139ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139f0:	ldr	r0, [r0, #24]
   139f4:	cmp	r0, #0
   139f8:	beq	13a88 <test@@Base+0x1000>
   139fc:	ldr	r0, [pc, #376]	; 13b7c <test@@Base+0x10f4>
   13a00:	ldr	r0, [pc, r0]
   13a04:	ldr	r0, [r0]
   13a08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a0c:	ldr	r2, [r1, #16]
   13a10:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a14:	ldr	r1, [r1, #36]	; 0x24
   13a18:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13a1c:	ldr	r3, [r3, #4]
   13a20:	sub	r1, r1, r3
   13a24:	add	r3, r1, #1
   13a28:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a2c:	ldr	r1, [r1, #24]
   13a30:	str	r0, [sp, #28]
   13a34:	mov	r0, r1
   13a38:	str	r3, [sp, #24]
   13a3c:	str	r2, [sp, #20]
   13a40:	bl	1bd24 <flatcc_json_parser_error_string@@Base>
   13a44:	ldr	r1, [pc, #300]	; 13b78 <test@@Base+0x10f0>
   13a48:	add	r1, pc, r1
   13a4c:	ldr	r2, [sp, #28]
   13a50:	str	r0, [sp, #16]
   13a54:	mov	r0, r2
   13a58:	ldr	r2, [sp, #20]
   13a5c:	ldr	r3, [sp, #24]
   13a60:	ldr	lr, [sp, #16]
   13a64:	str	lr, [sp]
   13a68:	bl	12944 <fprintf@plt>
   13a6c:	ldr	r1, [fp, #-12]
   13a70:	str	r0, [sp, #12]
   13a74:	mov	r0, r1
   13a78:	bl	14c90 <flatcc_builder_reset@@Base>
   13a7c:	str	r0, [sp, #8]
   13a80:	b	13aa4 <test@@Base+0x101c>
   13a84:	andeq	pc, r0, sl, asr r7	; <UNPREDICTABLE>
   13a88:	ldr	r0, [pc, #224]	; 13b70 <test@@Base+0x10e8>
   13a8c:	add	r1, pc, r0
   13a90:	ldr	r0, [pc, #220]	; 13b74 <test@@Base+0x10ec>
   13a94:	ldr	r0, [pc, r0]
   13a98:	ldr	r0, [r0]
   13a9c:	bl	12944 <fprintf@plt>
   13aa0:	str	r0, [sp, #4]
   13aa4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13aa8:	ldr	r0, [r0, #24]
   13aac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13ab0:	str	r0, [r1]
   13ab4:	ldr	r0, [fp, #-16]
   13ab8:	sub	sp, fp, #8
   13abc:	pop	{r4, r5, fp, pc}
   13ac0:			; <UNDEFINED> instruction: 0x0000f6b3
   13ac4:	andeq	r2, r2, r4, lsl #10
   13ac8:	andeq	pc, r0, r1, ror r6	; <UNPREDICTABLE>
   13acc:			; <UNDEFINED> instruction: 0x000224b4
   13ad0:	andeq	lr, r0, r9, lsl #24
   13ad4:	andeq	r1, r2, ip, asr #20
   13ad8:	andeq	lr, r0, pc, lsl #23
   13adc:	andeq	r1, r2, r0, ror #19
   13ae0:	andeq	lr, r0, fp, asr #24
   13ae4:	muleq	r2, ip, sl
   13ae8:	ldrdeq	lr, [r0], -r1
   13aec:	andeq	r1, r2, r4, lsl ip
   13af0:	andeq	lr, r0, r7, asr sp
   13af4:	andeq	r1, r2, r8, lsr #23
   13af8:	andeq	lr, r0, r3, lsl lr
   13afc:	andeq	r1, r2, r4, ror #24
   13b00:	andeq	lr, r0, sp, lsl #31
   13b04:	ldrdeq	r1, [r2], -r0
   13b08:	andeq	lr, r0, r3, lsl pc
   13b0c:	andeq	r1, r2, r4, ror #26
   13b10:	andeq	lr, r0, pc, asr #31
   13b14:	andeq	r1, r2, r0, lsr #28
   13b18:	andeq	pc, r0, sp, lsl #4
   13b1c:	andeq	r2, r2, r0, asr r0
   13b20:	muleq	r0, r3, r1
   13b24:	andeq	r1, r2, r4, ror #31
   13b28:	andeq	pc, r0, pc, asr #4
   13b2c:	andeq	r2, r2, r0, lsr #1
   13b30:	andeq	pc, r0, sp, asr #8
   13b34:	muleq	r2, r0, r2
   13b38:	andeq	lr, r0, r9, asr #17
   13b3c:	andeq	r1, r2, ip, lsl #14
   13b40:	andeq	lr, r0, r4, ror r8
   13b44:	andeq	r1, r2, ip, ror r6
   13b48:	andeq	lr, r0, r3, lsr #18
   13b4c:	andeq	r1, r2, r4, ror r7
   13b50:	andeq	lr, r0, r3, lsl #19
   13b54:	ldrdeq	r1, [r2], -r4
   13b58:	ldrdeq	pc, [r0], -r3
   13b5c:	andeq	r2, r2, r4, lsr #4
   13b60:	andeq	pc, r0, pc, lsl #9
   13b64:	andeq	r2, r2, r0, ror #5
   13b68:	strdeq	pc, [r0], -r7
   13b6c:	andeq	r2, r2, r8, asr #8
   13b70:	ldrdeq	lr, [r0], -sl
   13b74:			; <UNDEFINED> instruction: 0x000215bc
   13b78:	andeq	lr, r0, r3, lsl r8
   13b7c:	andeq	r1, r2, r0, asr r6
   13b80:	andeq	pc, r0, r3, lsl #11
   13b84:	andeq	pc, r0, fp, ror r5	; <UNPREDICTABLE>
   13b88:	andeq	pc, r0, r2, asr #10
   13b8c:	andeq	pc, r0, sl, lsr r5	; <UNPREDICTABLE>
   13b90:	andeq	pc, r0, r4, ror r3	; <UNPREDICTABLE>
   13b94:	andeq	pc, r0, r9, asr r3	; <UNPREDICTABLE>
   13b98:	andeq	pc, r0, r1, asr r3	; <UNPREDICTABLE>
   13b9c:	andeq	pc, r0, r7, lsl #6
   13ba0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   13ba4:	andeq	pc, r0, r5, lsr r1	; <UNPREDICTABLE>
   13ba8:	andeq	pc, r0, sp, lsr #2
   13bac:	muleq	r0, sl, r0
   13bb0:	andeq	pc, r0, r3, lsl #1
   13bb4:	andeq	lr, r0, r2, asr #29
   13bb8:	andeq	lr, r0, ip, ror #25
   13bbc:	push	{fp, lr}
   13bc0:	mov	fp, sp
   13bc4:	sub	sp, sp, #16
   13bc8:	str	r0, [sp, #8]
   13bcc:	str	r1, [sp, #4]
   13bd0:	str	r2, [sp]
   13bd4:	ldr	r0, [sp]
   13bd8:	ldr	r1, [sp, #4]
   13bdc:	sub	r0, r0, r1
   13be0:	cmp	r0, #1
   13be4:	ble	13c38 <test@@Base+0x11b0>
   13be8:	ldr	r0, [sp, #4]
   13bec:	ldrb	r0, [r0]
   13bf0:	cmp	r0, #32
   13bf4:	ble	13c04 <test@@Base+0x117c>
   13bf8:	ldr	r0, [sp, #4]
   13bfc:	str	r0, [fp, #-4]
   13c00:	b	13c4c <test@@Base+0x11c4>
   13c04:	ldr	r0, [sp, #4]
   13c08:	ldrb	r0, [r0]
   13c0c:	cmp	r0, #32
   13c10:	bne	13c34 <test@@Base+0x11ac>
   13c14:	ldr	r0, [sp, #4]
   13c18:	ldrb	r0, [r0, #1]
   13c1c:	cmp	r0, #32
   13c20:	ble	13c34 <test@@Base+0x11ac>
   13c24:	ldr	r0, [sp, #4]
   13c28:	add	r0, r0, #1
   13c2c:	str	r0, [fp, #-4]
   13c30:	b	13c4c <test@@Base+0x11c4>
   13c34:	b	13c38 <test@@Base+0x11b0>
   13c38:	ldr	r0, [sp, #8]
   13c3c:	ldr	r1, [sp, #4]
   13c40:	ldr	r2, [sp]
   13c44:	bl	1c230 <flatcc_json_parser_space_ext@@Base>
   13c48:	str	r0, [fp, #-4]
   13c4c:	ldr	r0, [fp, #-4]
   13c50:	mov	sp, fp
   13c54:	pop	{fp, pc}
   13c58:	push	{fp, lr}
   13c5c:	mov	fp, sp
   13c60:	sub	sp, sp, #16
   13c64:	str	r0, [sp, #8]
   13c68:	str	r1, [sp, #4]
   13c6c:	str	r2, [sp]
   13c70:	ldr	r0, [sp, #4]
   13c74:	ldr	r1, [sp]
   13c78:	cmp	r0, r1
   13c7c:	bne	13c8c <test@@Base+0x1204>
   13c80:	ldr	r0, [sp, #4]
   13c84:	str	r0, [fp, #-4]
   13c88:	b	13cf8 <test@@Base+0x1270>
   13c8c:	ldr	r0, [sp, #4]
   13c90:	ldrb	r0, [r0]
   13c94:	cmp	r0, #34	; 0x22
   13c98:	bne	13cb8 <test@@Base+0x1230>
   13c9c:	ldr	r0, [sp, #4]
   13ca0:	add	r0, r0, #1
   13ca4:	str	r0, [sp, #4]
   13ca8:	ldr	r0, [sp, #8]
   13cac:	movw	r1, #0
   13cb0:	str	r1, [r0, #12]
   13cb4:	b	13cf0 <test@@Base+0x1268>
   13cb8:	ldr	r0, [sp, #4]
   13cbc:	ldrb	r0, [r0]
   13cc0:	cmp	r0, #46	; 0x2e
   13cc4:	bne	13ce4 <test@@Base+0x125c>
   13cc8:	ldr	r0, [sp, #8]
   13ccc:	ldr	r1, [sp, #4]
   13cd0:	ldr	r2, [sp]
   13cd4:	movw	r3, #5
   13cd8:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13cdc:	str	r0, [fp, #-4]
   13ce0:	b	13cf8 <test@@Base+0x1270>
   13ce4:	ldr	r0, [sp, #8]
   13ce8:	movw	r1, #1
   13cec:	str	r1, [r0, #12]
   13cf0:	ldr	r0, [sp, #4]
   13cf4:	str	r0, [fp, #-4]
   13cf8:	ldr	r0, [fp, #-4]
   13cfc:	mov	sp, fp
   13d00:	pop	{fp, pc}
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	sub	sp, sp, #16
   13d10:	str	r0, [fp, #-4]
   13d14:	str	r1, [sp, #8]
   13d18:	ldr	r0, [sp, #8]
   13d1c:	ldr	r1, [fp, #-4]
   13d20:	sub	r0, r0, r1
   13d24:	str	r0, [sp, #4]
   13d28:	ldr	r0, [fp, #-4]
   13d2c:	ldr	r1, [sp, #8]
   13d30:	bl	14328 <main@@Base+0x6c>
   13d34:	mov	sp, fp
   13d38:	pop	{fp, pc}
   13d3c:	push	{fp, lr}
   13d40:	mov	fp, sp
   13d44:	sub	sp, sp, #32
   13d48:	str	r0, [fp, #-8]
   13d4c:	str	r1, [fp, #-12]
   13d50:	str	r2, [sp, #16]
   13d54:	movw	r0, #0
   13d58:	strb	r0, [sp, #14]
   13d5c:	ldr	r0, [fp, #-8]
   13d60:	ldr	r0, [r0, #12]
   13d64:	cmp	r0, #0
   13d68:	beq	13e70 <test@@Base+0x13e8>
   13d6c:	b	13d70 <test@@Base+0x12e8>
   13d70:	ldr	r0, [fp, #-12]
   13d74:	ldr	r1, [sp, #16]
   13d78:	cmp	r0, r1
   13d7c:	movw	r0, #0
   13d80:	str	r0, [sp, #8]
   13d84:	beq	13da0 <test@@Base+0x1318>
   13d88:	ldr	r0, [fp, #-12]
   13d8c:	ldrb	r0, [r0]
   13d90:	cmp	r0, #32
   13d94:	movw	r0, #0
   13d98:	movgt	r0, #1
   13d9c:	str	r0, [sp, #8]
   13da0:	ldr	r0, [sp, #8]
   13da4:	tst	r0, #1
   13da8:	beq	13e44 <test@@Base+0x13bc>
   13dac:	ldr	r0, [fp, #-12]
   13db0:	ldrb	r0, [r0]
   13db4:	strb	r0, [sp, #15]
   13db8:	strb	r0, [sp, #14]
   13dbc:	ldrb	r0, [sp, #15]
   13dc0:	cmp	r0, #95	; 0x5f
   13dc4:	beq	13dfc <test@@Base+0x1374>
   13dc8:	ldrb	r0, [sp, #15]
   13dcc:	cmp	r0, #46	; 0x2e
   13dd0:	beq	13dfc <test@@Base+0x1374>
   13dd4:	ldrb	r0, [sp, #15]
   13dd8:	and	r0, r0, #128	; 0x80
   13ddc:	cmp	r0, #0
   13de0:	bne	13dfc <test@@Base+0x1374>
   13de4:	ldrb	r0, [sp, #15]
   13de8:	cmp	r0, #48	; 0x30
   13dec:	blt	13e0c <test@@Base+0x1384>
   13df0:	ldrb	r0, [sp, #15]
   13df4:	cmp	r0, #57	; 0x39
   13df8:	bgt	13e0c <test@@Base+0x1384>
   13dfc:	ldr	r0, [fp, #-12]
   13e00:	add	r0, r0, #1
   13e04:	str	r0, [fp, #-12]
   13e08:	b	13d70 <test@@Base+0x12e8>
   13e0c:	ldrb	r0, [sp, #15]
   13e10:	orr	r0, r0, #32
   13e14:	strb	r0, [sp, #15]
   13e18:	ldrb	r0, [sp, #15]
   13e1c:	cmp	r0, #97	; 0x61
   13e20:	blt	13e40 <test@@Base+0x13b8>
   13e24:	ldrb	r0, [sp, #15]
   13e28:	cmp	r0, #122	; 0x7a
   13e2c:	bgt	13e40 <test@@Base+0x13b8>
   13e30:	ldr	r0, [fp, #-12]
   13e34:	add	r0, r0, #1
   13e38:	str	r0, [fp, #-12]
   13e3c:	b	13d70 <test@@Base+0x12e8>
   13e40:	b	13e44 <test@@Base+0x13bc>
   13e44:	ldrb	r0, [sp, #14]
   13e48:	cmp	r0, #46	; 0x2e
   13e4c:	bne	13e6c <test@@Base+0x13e4>
   13e50:	ldr	r0, [fp, #-8]
   13e54:	ldr	r1, [fp, #-12]
   13e58:	ldr	r2, [sp, #16]
   13e5c:	movw	r3, #5
   13e60:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13e64:	str	r0, [fp, #-4]
   13e68:	b	13f44 <test@@Base+0x14bc>
   13e6c:	b	13f3c <test@@Base+0x14b4>
   13e70:	b	13e74 <test@@Base+0x13ec>
   13e74:	ldr	r0, [fp, #-12]
   13e78:	ldr	r1, [sp, #16]
   13e7c:	cmp	r0, r1
   13e80:	movw	r0, #0
   13e84:	str	r0, [sp, #4]
   13e88:	beq	13ea4 <test@@Base+0x141c>
   13e8c:	ldr	r0, [fp, #-12]
   13e90:	ldrb	r0, [r0]
   13e94:	cmp	r0, #34	; 0x22
   13e98:	movw	r0, #0
   13e9c:	movne	r0, #1
   13ea0:	str	r0, [sp, #4]
   13ea4:	ldr	r0, [sp, #4]
   13ea8:	tst	r0, #1
   13eac:	beq	13ef4 <test@@Base+0x146c>
   13eb0:	ldr	r0, [fp, #-12]
   13eb4:	ldrb	r0, [r0]
   13eb8:	cmp	r0, #92	; 0x5c
   13ebc:	bne	13ee4 <test@@Base+0x145c>
   13ec0:	ldr	r0, [sp, #16]
   13ec4:	ldr	r1, [fp, #-12]
   13ec8:	sub	r0, r0, r1
   13ecc:	cmp	r0, #2
   13ed0:	bge	13ed8 <test@@Base+0x1450>
   13ed4:	b	13ef4 <test@@Base+0x146c>
   13ed8:	ldr	r0, [fp, #-12]
   13edc:	add	r0, r0, #1
   13ee0:	str	r0, [fp, #-12]
   13ee4:	ldr	r0, [fp, #-12]
   13ee8:	add	r0, r0, #1
   13eec:	str	r0, [fp, #-12]
   13ef0:	b	13e74 <test@@Base+0x13ec>
   13ef4:	ldr	r0, [fp, #-12]
   13ef8:	ldr	r1, [sp, #16]
   13efc:	cmp	r0, r1
   13f00:	beq	13f14 <test@@Base+0x148c>
   13f04:	ldr	r0, [fp, #-12]
   13f08:	ldrb	r0, [r0]
   13f0c:	cmp	r0, #34	; 0x22
   13f10:	beq	13f30 <test@@Base+0x14a8>
   13f14:	ldr	r0, [fp, #-8]
   13f18:	ldr	r1, [fp, #-12]
   13f1c:	ldr	r2, [sp, #16]
   13f20:	movw	r3, #20
   13f24:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   13f28:	str	r0, [fp, #-4]
   13f2c:	b	13f44 <test@@Base+0x14bc>
   13f30:	ldr	r0, [fp, #-12]
   13f34:	add	r0, r0, #1
   13f38:	str	r0, [fp, #-12]
   13f3c:	ldr	r0, [fp, #-12]
   13f40:	str	r0, [fp, #-4]
   13f44:	ldr	r0, [fp, #-4]
   13f48:	mov	sp, fp
   13f4c:	pop	{fp, pc}
   13f50:	push	{r4, r5, fp, lr}
   13f54:	add	fp, sp, #8
   13f58:	sub	sp, sp, #56	; 0x38
   13f5c:	str	r0, [fp, #-16]
   13f60:	str	r1, [fp, #-20]	; 0xffffffec
   13f64:	str	r2, [fp, #-24]	; 0xffffffe8
   13f68:	str	r3, [fp, #-28]	; 0xffffffe4
   13f6c:	mov	r0, #0
   13f70:	str	r0, [sp, #28]
   13f74:	str	r0, [sp, #24]
   13f78:	movw	r0, #0
   13f7c:	str	r0, [sp, #20]
   13f80:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f84:	str	r0, [sp, #16]
   13f88:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13f8c:	movw	r1, #0
   13f90:	strb	r1, [r0]
   13f94:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13f9c:	cmp	r0, r1
   13fa0:	bne	13fb0 <test@@Base+0x1528>
   13fa4:	ldr	r0, [fp, #-20]	; 0xffffffec
   13fa8:	str	r0, [fp, #-12]
   13fac:	b	14020 <test@@Base+0x1598>
   13fb0:	ldr	r0, [fp, #-16]
   13fb4:	ldr	r1, [fp, #-20]	; 0xffffffec
   13fb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13fbc:	add	r3, sp, #20
   13fc0:	add	ip, sp, #24
   13fc4:	str	ip, [sp]
   13fc8:	bl	1e784 <flatcc_json_parser_integer@@Base>
   13fcc:	str	r0, [fp, #-20]	; 0xffffffec
   13fd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13fd4:	ldr	r1, [sp, #16]
   13fd8:	cmp	r0, r1
   13fdc:	beq	14018 <test@@Base+0x1590>
   13fe0:	ldr	r0, [fp, #-16]
   13fe4:	ldr	r1, [fp, #-20]	; 0xffffffec
   13fe8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13fec:	ldr	r3, [sp, #20]
   13ff0:	ldr	ip, [sp, #24]
   13ff4:	ldr	lr, [sp, #28]
   13ff8:	ldr	r4, [fp, #-28]	; 0xffffffe4
   13ffc:	mov	r5, sp
   14000:	str	r4, [r5, #8]
   14004:	str	lr, [r5, #4]
   14008:	str	ip, [r5]
   1400c:	bl	1449c <main@@Base+0x1e0>
   14010:	str	r0, [fp, #-12]
   14014:	b	14020 <test@@Base+0x1598>
   14018:	ldr	r0, [fp, #-20]	; 0xffffffec
   1401c:	str	r0, [fp, #-12]
   14020:	ldr	r0, [fp, #-12]
   14024:	sub	sp, fp, #8
   14028:	pop	{r4, r5, fp, pc}
   1402c:	push	{r4, r5, fp, lr}
   14030:	add	fp, sp, #8
   14034:	sub	sp, sp, #56	; 0x38
   14038:	str	r0, [fp, #-16]
   1403c:	str	r1, [fp, #-20]	; 0xffffffec
   14040:	str	r2, [fp, #-24]	; 0xffffffe8
   14044:	str	r3, [fp, #-28]	; 0xffffffe4
   14048:	mov	r0, #0
   1404c:	str	r0, [sp, #28]
   14050:	str	r0, [sp, #24]
   14054:	str	r0, [sp, #20]
   14058:	ldr	r1, [fp, #-20]	; 0xffffffec
   1405c:	str	r1, [sp, #16]
   14060:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14064:	str	r0, [r1, #4]
   14068:	str	r0, [r1]
   1406c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14070:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14074:	cmp	r0, r1
   14078:	bne	14088 <test@@Base+0x1600>
   1407c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14080:	str	r0, [fp, #-12]
   14084:	b	140f8 <test@@Base+0x1670>
   14088:	ldr	r0, [fp, #-16]
   1408c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14090:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14094:	add	r3, sp, #20
   14098:	add	ip, sp, #24
   1409c:	str	ip, [sp]
   140a0:	bl	1e784 <flatcc_json_parser_integer@@Base>
   140a4:	str	r0, [fp, #-20]	; 0xffffffec
   140a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   140ac:	ldr	r1, [sp, #16]
   140b0:	cmp	r0, r1
   140b4:	beq	140f0 <test@@Base+0x1668>
   140b8:	ldr	r0, [fp, #-16]
   140bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   140c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   140c4:	ldr	r3, [sp, #20]
   140c8:	ldr	ip, [sp, #24]
   140cc:	ldr	lr, [sp, #28]
   140d0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   140d4:	mov	r5, sp
   140d8:	str	r4, [r5, #8]
   140dc:	str	lr, [r5, #4]
   140e0:	str	ip, [r5]
   140e4:	bl	14554 <main@@Base+0x298>
   140e8:	str	r0, [fp, #-12]
   140ec:	b	140f8 <test@@Base+0x1670>
   140f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   140f4:	str	r0, [fp, #-12]
   140f8:	ldr	r0, [fp, #-12]
   140fc:	sub	sp, fp, #8
   14100:	pop	{r4, r5, fp, pc}
   14104:	push	{r4, r5, fp, lr}
   14108:	add	fp, sp, #8
   1410c:	sub	sp, sp, #56	; 0x38
   14110:	str	r0, [fp, #-16]
   14114:	str	r1, [fp, #-20]	; 0xffffffec
   14118:	str	r2, [fp, #-24]	; 0xffffffe8
   1411c:	str	r3, [fp, #-28]	; 0xffffffe4
   14120:	mov	r0, #0
   14124:	str	r0, [sp, #28]
   14128:	str	r0, [sp, #24]
   1412c:	movw	r0, #0
   14130:	str	r0, [sp, #20]
   14134:	ldr	r1, [fp, #-20]	; 0xffffffec
   14138:	str	r1, [sp, #16]
   1413c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14140:	str	r0, [r1]
   14144:	ldr	r0, [fp, #-20]	; 0xffffffec
   14148:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1414c:	cmp	r0, r1
   14150:	bne	14160 <test@@Base+0x16d8>
   14154:	ldr	r0, [fp, #-20]	; 0xffffffec
   14158:	str	r0, [fp, #-12]
   1415c:	b	141d0 <test@@Base+0x1748>
   14160:	ldr	r0, [fp, #-16]
   14164:	ldr	r1, [fp, #-20]	; 0xffffffec
   14168:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1416c:	add	r3, sp, #20
   14170:	add	ip, sp, #24
   14174:	str	ip, [sp]
   14178:	bl	1e784 <flatcc_json_parser_integer@@Base>
   1417c:	str	r0, [fp, #-20]	; 0xffffffec
   14180:	ldr	r0, [fp, #-20]	; 0xffffffec
   14184:	ldr	r1, [sp, #16]
   14188:	cmp	r0, r1
   1418c:	beq	141c8 <test@@Base+0x1740>
   14190:	ldr	r0, [fp, #-16]
   14194:	ldr	r1, [fp, #-20]	; 0xffffffec
   14198:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1419c:	ldr	r3, [sp, #20]
   141a0:	ldr	ip, [sp, #24]
   141a4:	ldr	lr, [sp, #28]
   141a8:	ldr	r4, [fp, #-28]	; 0xffffffe4
   141ac:	mov	r5, sp
   141b0:	str	r4, [r5, #8]
   141b4:	str	lr, [r5, #4]
   141b8:	str	ip, [r5]
   141bc:	bl	14644 <main@@Base+0x388>
   141c0:	str	r0, [fp, #-12]
   141c4:	b	141d0 <test@@Base+0x1748>
   141c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   141cc:	str	r0, [fp, #-12]
   141d0:	ldr	r0, [fp, #-12]
   141d4:	sub	sp, fp, #8
   141d8:	pop	{r4, r5, fp, pc}
   141dc:	push	{fp, lr}
   141e0:	mov	fp, sp
   141e4:	sub	sp, sp, #16
   141e8:	str	r0, [sp, #8]
   141ec:	str	r1, [sp, #4]
   141f0:	str	r2, [sp]
   141f4:	ldr	r0, [sp, #4]
   141f8:	ldr	r1, [sp]
   141fc:	cmp	r0, r1
   14200:	beq	14214 <test@@Base+0x178c>
   14204:	ldr	r0, [sp, #4]
   14208:	ldrb	r0, [r0]
   1420c:	cmp	r0, #34	; 0x22
   14210:	beq	14230 <test@@Base+0x17a8>
   14214:	ldr	r0, [sp, #8]
   14218:	ldr	r1, [sp, #4]
   1421c:	ldr	r2, [sp]
   14220:	movw	r3, #16
   14224:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   14228:	str	r0, [fp, #-4]
   1422c:	b	14240 <test@@Base+0x17b8>
   14230:	ldr	r0, [sp, #4]
   14234:	add	r0, r0, #1
   14238:	str	r0, [sp, #4]
   1423c:	str	r0, [fp, #-4]
   14240:	ldr	r0, [fp, #-4]
   14244:	mov	sp, fp
   14248:	pop	{fp, pc}
   1424c:	push	{fp, lr}
   14250:	mov	fp, sp
   14254:	sub	sp, sp, #16
   14258:	str	r0, [sp, #8]
   1425c:	str	r1, [sp, #4]
   14260:	str	r2, [sp]
   14264:	ldr	r0, [sp, #4]
   14268:	ldr	r1, [sp]
   1426c:	cmp	r0, r1
   14270:	beq	14284 <test@@Base+0x17fc>
   14274:	ldr	r0, [sp, #4]
   14278:	ldrb	r0, [r0]
   1427c:	cmp	r0, #34	; 0x22
   14280:	beq	142a0 <test@@Base+0x1818>
   14284:	ldr	r0, [sp, #8]
   14288:	ldr	r1, [sp, #4]
   1428c:	ldr	r2, [sp]
   14290:	movw	r3, #20
   14294:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   14298:	str	r0, [fp, #-4]
   1429c:	b	142b0 <test@@Base+0x1828>
   142a0:	ldr	r0, [sp, #4]
   142a4:	add	r0, r0, #1
   142a8:	str	r0, [sp, #4]
   142ac:	str	r0, [fp, #-4]
   142b0:	ldr	r0, [fp, #-4]
   142b4:	mov	sp, fp
   142b8:	pop	{fp, pc}

000142bc <main@@Base>:
   142bc:	push	{r4, r5, fp, lr}
   142c0:	add	fp, sp, #8
   142c4:	sub	sp, sp, #248	; 0xf8
   142c8:	movw	r0, #0
   142cc:	str	r0, [fp, #-12]
   142d0:	mvn	r0, #0
   142d4:	str	r0, [fp, #-16]
   142d8:	add	r0, sp, #8
   142dc:	bl	14a10 <flatcc_builder_init@@Base>
   142e0:	ldr	lr, [pc, #60]	; 14324 <main@@Base+0x68>
   142e4:	ldr	lr, [pc, lr]
   142e8:	movw	r1, #645	; 0x285
   142ec:	add	r2, lr, r1
   142f0:	add	r1, sp, #8
   142f4:	str	r0, [sp, #4]
   142f8:	mov	r0, r1
   142fc:	mov	r1, lr
   14300:	sub	r3, fp, #16
   14304:	bl	12a88 <test@@Base>
   14308:	add	r1, sp, #8
   1430c:	str	r0, [sp]
   14310:	mov	r0, r1
   14314:	bl	14cbc <flatcc_builder_clear@@Base>
   14318:	ldr	r0, [fp, #-16]
   1431c:	sub	sp, fp, #8
   14320:	pop	{r4, r5, fp, pc}
   14324:	andeq	r0, r2, r4, ror #26
   14328:	sub	sp, sp, #24
   1432c:	str	r0, [sp, #20]
   14330:	str	r1, [sp, #16]
   14334:	mov	r0, #0
   14338:	str	r0, [sp, #12]
   1433c:	str	r0, [sp, #8]
   14340:	ldr	r0, [sp, #16]
   14344:	ldr	r1, [sp, #20]
   14348:	sub	r0, r0, r1
   1434c:	str	r0, [sp, #4]
   14350:	ldr	r0, [sp, #4]
   14354:	cmp	r0, #8
   14358:	bls	14364 <main@@Base+0xa8>
   1435c:	movw	r0, #8
   14360:	str	r0, [sp, #4]
   14364:	ldr	r0, [sp, #4]
   14368:	cmp	r0, #8
   1436c:	str	r0, [sp]
   14370:	bhi	1448c <main@@Base+0x1d0>
   14374:	add	r0, pc, #8
   14378:	ldr	r1, [sp]
   1437c:	ldr	r2, [r0, r1, lsl #2]
   14380:	add	pc, r0, r2
   14384:	andeq	r0, r0, r4, lsl #2
   14388:	andeq	r0, r0, r8, ror #1
   1438c:	andeq	r0, r0, ip, asr #1
   14390:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   14394:	muleq	r0, r4, r0
   14398:	andeq	r0, r0, r8, ror r0
   1439c:	andeq	r0, r0, ip, asr r0
   143a0:	andeq	r0, r0, r0, asr #32
   143a4:	andeq	r0, r0, r4, lsr #32
   143a8:	ldr	r0, [sp, #20]
   143ac:	ldrb	r0, [r0, #7]
   143b0:	ldr	r1, [sp, #8]
   143b4:	ldr	r2, [sp, #12]
   143b8:	orr	r0, r1, r0
   143bc:	str	r2, [sp, #12]
   143c0:	str	r0, [sp, #8]
   143c4:	ldr	r0, [sp, #20]
   143c8:	ldrb	r0, [r0, #6]
   143cc:	ldr	r1, [sp, #8]
   143d0:	ldr	r2, [sp, #12]
   143d4:	orr	r0, r1, r0, lsl #8
   143d8:	str	r2, [sp, #12]
   143dc:	str	r0, [sp, #8]
   143e0:	ldr	r0, [sp, #20]
   143e4:	ldrb	r0, [r0, #5]
   143e8:	ldr	r1, [sp, #8]
   143ec:	ldr	r2, [sp, #12]
   143f0:	orr	r0, r1, r0, lsl #16
   143f4:	str	r2, [sp, #12]
   143f8:	str	r0, [sp, #8]
   143fc:	ldr	r0, [sp, #20]
   14400:	ldrb	r0, [r0, #4]
   14404:	ldr	r1, [sp, #8]
   14408:	ldr	r2, [sp, #12]
   1440c:	orr	r0, r1, r0, lsl #24
   14410:	str	r2, [sp, #12]
   14414:	str	r0, [sp, #8]
   14418:	ldr	r0, [sp, #20]
   1441c:	ldrb	r0, [r0, #3]
   14420:	ldr	r1, [sp, #8]
   14424:	ldr	r2, [sp, #12]
   14428:	orr	r0, r2, r0
   1442c:	str	r1, [sp, #8]
   14430:	str	r0, [sp, #12]
   14434:	ldr	r0, [sp, #20]
   14438:	ldrb	r0, [r0, #2]
   1443c:	ldr	r1, [sp, #8]
   14440:	ldr	r2, [sp, #12]
   14444:	orr	r0, r2, r0, lsl #8
   14448:	str	r1, [sp, #8]
   1444c:	str	r0, [sp, #12]
   14450:	ldr	r0, [sp, #20]
   14454:	ldrb	r0, [r0, #1]
   14458:	ldr	r1, [sp, #8]
   1445c:	ldr	r2, [sp, #12]
   14460:	orr	r0, r2, r0, lsl #16
   14464:	str	r1, [sp, #8]
   14468:	str	r0, [sp, #12]
   1446c:	ldr	r0, [sp, #20]
   14470:	ldrb	r0, [r0]
   14474:	ldr	r1, [sp, #8]
   14478:	ldr	r2, [sp, #12]
   1447c:	orr	r0, r2, r0, lsl #24
   14480:	str	r1, [sp, #8]
   14484:	str	r0, [sp, #12]
   14488:	b	1448c <main@@Base+0x1d0>
   1448c:	ldr	r0, [sp, #8]
   14490:	ldr	r1, [sp, #12]
   14494:	add	sp, sp, #24
   14498:	bx	lr
   1449c:	push	{r4, sl, fp, lr}
   144a0:	add	fp, sp, #8
   144a4:	sub	sp, sp, #48	; 0x30
   144a8:	ldr	ip, [fp, #12]
   144ac:	ldr	lr, [fp, #8]
   144b0:	ldr	r4, [fp, #16]
   144b4:	str	r0, [fp, #-16]
   144b8:	str	r1, [fp, #-20]	; 0xffffffec
   144bc:	str	r2, [fp, #-24]	; 0xffffffe8
   144c0:	str	r3, [sp, #28]
   144c4:	str	ip, [sp, #20]
   144c8:	str	lr, [sp, #16]
   144cc:	ldr	r0, [sp, #28]
   144d0:	cmp	r0, #0
   144d4:	str	r4, [sp, #12]
   144d8:	beq	144f8 <main@@Base+0x23c>
   144dc:	ldr	r0, [fp, #-16]
   144e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   144e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   144e8:	movw	r3, #8
   144ec:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   144f0:	str	r0, [fp, #-12]
   144f4:	b	14548 <main@@Base+0x28c>
   144f8:	ldr	r0, [sp, #16]
   144fc:	ldr	r1, [sp, #20]
   14500:	subs	r0, r0, #256	; 0x100
   14504:	sbcs	r1, r1, #0
   14508:	str	r0, [sp, #8]
   1450c:	str	r1, [sp, #4]
   14510:	bcc	14534 <main@@Base+0x278>
   14514:	b	14518 <main@@Base+0x25c>
   14518:	ldr	r0, [fp, #-16]
   1451c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14520:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14524:	movw	r3, #7
   14528:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1452c:	str	r0, [fp, #-12]
   14530:	b	14548 <main@@Base+0x28c>
   14534:	ldrb	r0, [sp, #16]
   14538:	ldr	r1, [fp, #16]
   1453c:	strb	r0, [r1]
   14540:	ldr	r0, [fp, #-20]	; 0xffffffec
   14544:	str	r0, [fp, #-12]
   14548:	ldr	r0, [fp, #-12]
   1454c:	sub	sp, fp, #8
   14550:	pop	{r4, sl, fp, pc}
   14554:	push	{r4, sl, fp, lr}
   14558:	add	fp, sp, #8
   1455c:	sub	sp, sp, #48	; 0x30
   14560:	ldr	ip, [fp, #12]
   14564:	ldr	lr, [fp, #8]
   14568:	ldr	r4, [fp, #16]
   1456c:	str	r0, [fp, #-16]
   14570:	str	r1, [fp, #-20]	; 0xffffffec
   14574:	str	r2, [fp, #-24]	; 0xffffffe8
   14578:	str	r3, [sp, #28]
   1457c:	str	ip, [sp, #20]
   14580:	str	lr, [sp, #16]
   14584:	ldr	r0, [sp, #28]
   14588:	cmp	r0, #0
   1458c:	str	r4, [sp, #12]
   14590:	beq	145f0 <main@@Base+0x334>
   14594:	ldr	r0, [sp, #16]
   14598:	ldr	r1, [sp, #20]
   1459c:	subs	r0, r0, #1
   145a0:	sbcs	r1, r1, #-2147483648	; 0x80000000
   145a4:	str	r0, [sp, #8]
   145a8:	str	r1, [sp, #4]
   145ac:	bcc	145d0 <main@@Base+0x314>
   145b0:	b	145b4 <main@@Base+0x2f8>
   145b4:	ldr	r0, [fp, #-16]
   145b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   145bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   145c0:	movw	r3, #8
   145c4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   145c8:	str	r0, [fp, #-12]
   145cc:	b	14638 <main@@Base+0x37c>
   145d0:	ldr	r0, [sp, #16]
   145d4:	ldr	r1, [sp, #20]
   145d8:	rsbs	r0, r0, #0
   145dc:	rsc	r1, r1, #0
   145e0:	ldr	r2, [fp, #16]
   145e4:	str	r0, [r2]
   145e8:	str	r1, [r2, #4]
   145ec:	b	14630 <main@@Base+0x374>
   145f0:	ldr	r0, [sp, #20]
   145f4:	cmn	r0, #1
   145f8:	bgt	1461c <main@@Base+0x360>
   145fc:	b	14600 <main@@Base+0x344>
   14600:	ldr	r0, [fp, #-16]
   14604:	ldr	r1, [fp, #-20]	; 0xffffffec
   14608:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1460c:	movw	r3, #7
   14610:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   14614:	str	r0, [fp, #-12]
   14618:	b	14638 <main@@Base+0x37c>
   1461c:	ldr	r0, [sp, #16]
   14620:	ldr	r1, [sp, #20]
   14624:	ldr	r2, [fp, #16]
   14628:	str	r1, [r2, #4]
   1462c:	str	r0, [r2]
   14630:	ldr	r0, [fp, #-20]	; 0xffffffec
   14634:	str	r0, [fp, #-12]
   14638:	ldr	r0, [fp, #-12]
   1463c:	sub	sp, fp, #8
   14640:	pop	{r4, sl, fp, pc}
   14644:	push	{r4, sl, fp, lr}
   14648:	add	fp, sp, #8
   1464c:	sub	sp, sp, #40	; 0x28
   14650:	ldr	ip, [fp, #12]
   14654:	ldr	lr, [fp, #8]
   14658:	ldr	r4, [fp, #16]
   1465c:	str	r0, [fp, #-16]
   14660:	str	r1, [fp, #-20]	; 0xffffffec
   14664:	str	r2, [sp, #24]
   14668:	str	r3, [sp, #20]
   1466c:	str	ip, [sp, #12]
   14670:	str	lr, [sp, #8]
   14674:	ldr	r0, [sp, #20]
   14678:	cmp	r0, #0
   1467c:	str	r4, [sp, #4]
   14680:	beq	146a0 <main@@Base+0x3e4>
   14684:	ldr	r0, [fp, #-16]
   14688:	ldr	r1, [fp, #-20]	; 0xffffffec
   1468c:	ldr	r2, [sp, #24]
   14690:	movw	r3, #8
   14694:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   14698:	str	r0, [fp, #-12]
   1469c:	b	146e0 <main@@Base+0x424>
   146a0:	ldr	r0, [sp, #12]
   146a4:	cmp	r0, #0
   146a8:	beq	146cc <main@@Base+0x410>
   146ac:	b	146b0 <main@@Base+0x3f4>
   146b0:	ldr	r0, [fp, #-16]
   146b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   146b8:	ldr	r2, [sp, #24]
   146bc:	movw	r3, #7
   146c0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   146c4:	str	r0, [fp, #-12]
   146c8:	b	146e0 <main@@Base+0x424>
   146cc:	ldr	r0, [sp, #8]
   146d0:	ldr	r1, [fp, #16]
   146d4:	str	r0, [r1]
   146d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   146dc:	str	r0, [fp, #-12]
   146e0:	ldr	r0, [fp, #-12]
   146e4:	sub	sp, fp, #8
   146e8:	pop	{r4, sl, fp, pc}

000146ec <flatcc_builder_default_alloc@@Base>:
   146ec:	push	{fp, lr}
   146f0:	mov	fp, sp
   146f4:	sub	sp, sp, #40	; 0x28
   146f8:	ldr	ip, [fp, #8]
   146fc:	str	r0, [fp, #-8]
   14700:	str	r1, [fp, #-12]
   14704:	str	r2, [fp, #-16]
   14708:	str	r3, [sp, #20]
   1470c:	ldr	r0, [fp, #-16]
   14710:	cmp	r0, #0
   14714:	str	ip, [sp, #8]
   14718:	bne	1475c <flatcc_builder_default_alloc@@Base+0x70>
   1471c:	ldr	r0, [fp, #-12]
   14720:	ldr	r0, [r0]
   14724:	movw	r1, #0
   14728:	cmp	r0, r1
   1472c:	beq	14750 <flatcc_builder_default_alloc@@Base+0x64>
   14730:	ldr	r0, [fp, #-12]
   14734:	ldr	r0, [r0]
   14738:	bl	128cc <free@plt>
   1473c:	ldr	r0, [fp, #-12]
   14740:	movw	lr, #0
   14744:	str	lr, [r0]
   14748:	ldr	r0, [fp, #-12]
   1474c:	str	lr, [r0, #4]
   14750:	movw	r0, #0
   14754:	str	r0, [fp, #-4]
   14758:	b	148c8 <flatcc_builder_default_alloc@@Base+0x1dc>
   1475c:	ldr	r0, [fp, #8]
   14760:	sub	r0, r0, #1
   14764:	cmp	r0, #6
   14768:	str	r0, [sp, #4]
   1476c:	bhi	147cc <flatcc_builder_default_alloc@@Base+0xe0>
   14770:	add	r0, pc, #8
   14774:	ldr	r1, [sp, #4]
   14778:	ldr	r2, [r0, r1, lsl #2]
   1477c:	add	pc, r0, r2
   14780:	andeq	r0, r0, ip, lsl r0
   14784:	andeq	r0, r0, ip, asr #32
   14788:	andeq	r0, r0, ip, asr #32
   1478c:	andeq	r0, r0, r4, lsr r0
   14790:	andeq	r0, r0, r8, lsr #32
   14794:	andeq	r0, r0, ip, asr #32
   14798:	andeq	r0, r0, r0, asr #32
   1479c:	movw	r0, #256	; 0x100
   147a0:	str	r0, [sp, #12]
   147a4:	b	147d4 <flatcc_builder_default_alloc@@Base+0xe8>
   147a8:	ldr	r0, [fp, #-16]
   147ac:	str	r0, [sp, #12]
   147b0:	b	147d4 <flatcc_builder_default_alloc@@Base+0xe8>
   147b4:	movw	r0, #288	; 0x120
   147b8:	str	r0, [sp, #12]
   147bc:	b	147d4 <flatcc_builder_default_alloc@@Base+0xe8>
   147c0:	movw	r0, #64	; 0x40
   147c4:	str	r0, [sp, #12]
   147c8:	b	147d4 <flatcc_builder_default_alloc@@Base+0xe8>
   147cc:	movw	r0, #32
   147d0:	str	r0, [sp, #12]
   147d4:	b	147d8 <flatcc_builder_default_alloc@@Base+0xec>
   147d8:	ldr	r0, [sp, #12]
   147dc:	ldr	r1, [fp, #-16]
   147e0:	cmp	r0, r1
   147e4:	bcs	147f8 <flatcc_builder_default_alloc@@Base+0x10c>
   147e8:	ldr	r0, [sp, #12]
   147ec:	lsl	r0, r0, #1
   147f0:	str	r0, [sp, #12]
   147f4:	b	147d8 <flatcc_builder_default_alloc@@Base+0xec>
   147f8:	ldr	r0, [fp, #-16]
   147fc:	ldr	r1, [fp, #-12]
   14800:	ldr	r1, [r1, #4]
   14804:	cmp	r0, r1
   14808:	bhi	14830 <flatcc_builder_default_alloc@@Base+0x144>
   1480c:	ldr	r0, [fp, #-12]
   14810:	ldr	r0, [r0, #4]
   14814:	lsr	r0, r0, #1
   14818:	ldr	r1, [sp, #12]
   1481c:	cmp	r0, r1
   14820:	bcc	14830 <flatcc_builder_default_alloc@@Base+0x144>
   14824:	movw	r0, #0
   14828:	str	r0, [fp, #-4]
   1482c:	b	148c8 <flatcc_builder_default_alloc@@Base+0x1dc>
   14830:	ldr	r0, [fp, #-12]
   14834:	ldr	r0, [r0]
   14838:	ldr	r1, [sp, #12]
   1483c:	bl	12908 <realloc@plt>
   14840:	str	r0, [sp, #16]
   14844:	movw	r1, #0
   14848:	cmp	r0, r1
   1484c:	bne	1485c <flatcc_builder_default_alloc@@Base+0x170>
   14850:	mvn	r0, #0
   14854:	str	r0, [fp, #-4]
   14858:	b	148c8 <flatcc_builder_default_alloc@@Base+0x1dc>
   1485c:	ldr	r0, [sp, #20]
   14860:	cmp	r0, #0
   14864:	beq	148a8 <flatcc_builder_default_alloc@@Base+0x1bc>
   14868:	ldr	r0, [fp, #-12]
   1486c:	ldr	r0, [r0, #4]
   14870:	ldr	r1, [sp, #12]
   14874:	cmp	r0, r1
   14878:	bcs	148a8 <flatcc_builder_default_alloc@@Base+0x1bc>
   1487c:	ldr	r0, [sp, #16]
   14880:	ldr	r1, [fp, #-12]
   14884:	ldr	r1, [r1, #4]
   14888:	add	r0, r0, r1
   1488c:	ldr	r1, [sp, #12]
   14890:	ldr	r2, [fp, #-12]
   14894:	ldr	r2, [r2, #4]
   14898:	sub	r2, r1, r2
   1489c:	movw	r1, #0
   148a0:	and	r1, r1, #255	; 0xff
   148a4:	bl	1295c <memset@plt>
   148a8:	ldr	r0, [sp, #16]
   148ac:	ldr	r1, [fp, #-12]
   148b0:	str	r0, [r1]
   148b4:	ldr	r0, [sp, #12]
   148b8:	ldr	r1, [fp, #-12]
   148bc:	str	r0, [r1, #4]
   148c0:	movw	r0, #0
   148c4:	str	r0, [fp, #-4]
   148c8:	ldr	r0, [fp, #-4]
   148cc:	mov	sp, fp
   148d0:	pop	{fp, pc}

000148d4 <flatcc_builder_flush_vtable_cache@@Base>:
   148d4:	push	{fp, lr}
   148d8:	mov	fp, sp
   148dc:	sub	sp, sp, #8
   148e0:	str	r0, [sp, #4]
   148e4:	ldr	r0, [sp, #4]
   148e8:	add	r0, r0, #52	; 0x34
   148ec:	add	r0, r0, #40	; 0x28
   148f0:	str	r0, [sp]
   148f4:	ldr	r0, [sp, #4]
   148f8:	ldr	r0, [r0, #116]	; 0x74
   148fc:	cmp	r0, #0
   14900:	bne	14908 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   14904:	b	1493c <flatcc_builder_flush_vtable_cache@@Base+0x68>
   14908:	ldr	r0, [sp]
   1490c:	ldr	r0, [r0]
   14910:	ldr	r1, [sp]
   14914:	ldr	r2, [r1, #4]
   14918:	movw	r1, #0
   1491c:	and	r1, r1, #255	; 0xff
   14920:	bl	1295c <memset@plt>
   14924:	ldr	r0, [sp, #4]
   14928:	movw	r1, #16
   1492c:	str	r1, [r0, #124]	; 0x7c
   14930:	ldr	r0, [sp, #4]
   14934:	movw	r1, #0
   14938:	str	r1, [r0, #120]	; 0x78
   1493c:	mov	sp, fp
   14940:	pop	{fp, pc}

00014944 <flatcc_builder_custom_init@@Base>:
   14944:	push	{fp, lr}
   14948:	mov	fp, sp
   1494c:	sub	sp, sp, #24
   14950:	ldr	ip, [fp, #8]
   14954:	str	r0, [fp, #-4]
   14958:	str	r1, [fp, #-8]
   1495c:	str	r2, [sp, #12]
   14960:	str	r3, [sp, #8]
   14964:	ldr	r0, [fp, #-4]
   14968:	movw	r1, #0
   1496c:	and	r1, r1, #255	; 0xff
   14970:	movw	r2, #232	; 0xe8
   14974:	str	ip, [sp, #4]
   14978:	bl	1295c <memset@plt>
   1497c:	ldr	r0, [fp, #-8]
   14980:	movw	r1, #0
   14984:	cmp	r0, r1
   14988:	bne	149b0 <flatcc_builder_custom_init@@Base+0x6c>
   1498c:	ldr	r0, [pc, #116]	; 14a08 <flatcc_builder_custom_init@@Base+0xc4>
   14990:	ldr	r0, [pc, r0]
   14994:	ldr	r1, [fp, #-4]
   14998:	movw	r2, #1
   1499c:	str	r2, [r1, #184]	; 0xb8
   149a0:	str	r0, [fp, #-8]
   149a4:	ldr	r0, [fp, #-4]
   149a8:	add	r0, r0, #188	; 0xbc
   149ac:	str	r0, [sp, #12]
   149b0:	ldr	r0, [sp, #8]
   149b4:	movw	r1, #0
   149b8:	cmp	r0, r1
   149bc:	bne	149cc <flatcc_builder_custom_init@@Base+0x88>
   149c0:	ldr	r0, [pc, #68]	; 14a0c <flatcc_builder_custom_init@@Base+0xc8>
   149c4:	ldr	r0, [pc, r0]
   149c8:	str	r0, [sp, #8]
   149cc:	ldr	r0, [fp, #8]
   149d0:	ldr	r1, [fp, #-4]
   149d4:	str	r0, [r1, #40]	; 0x28
   149d8:	ldr	r0, [sp, #8]
   149dc:	ldr	r1, [fp, #-4]
   149e0:	str	r0, [r1, #48]	; 0x30
   149e4:	ldr	r0, [sp, #12]
   149e8:	ldr	r1, [fp, #-4]
   149ec:	str	r0, [r1, #36]	; 0x24
   149f0:	ldr	r0, [fp, #-8]
   149f4:	ldr	r1, [fp, #-4]
   149f8:	str	r0, [r1, #44]	; 0x2c
   149fc:	movw	r0, #0
   14a00:	mov	sp, fp
   14a04:	pop	{fp, pc}
   14a08:	andeq	r0, r2, ip, asr #13
   14a0c:	muleq	r2, r4, r6

00014a10 <flatcc_builder_init@@Base>:
   14a10:	push	{fp, lr}
   14a14:	mov	fp, sp
   14a18:	sub	sp, sp, #16
   14a1c:	str	r0, [fp, #-4]
   14a20:	ldr	r0, [fp, #-4]
   14a24:	movw	r1, #0
   14a28:	str	r1, [sp, #8]
   14a2c:	ldr	r2, [sp, #8]
   14a30:	ldr	r3, [sp, #8]
   14a34:	ldr	ip, [sp, #8]
   14a38:	str	ip, [sp]
   14a3c:	bl	14944 <flatcc_builder_custom_init@@Base>
   14a40:	mov	sp, fp
   14a44:	pop	{fp, pc}

00014a48 <flatcc_builder_custom_reset@@Base>:
   14a48:	push	{r4, sl, fp, lr}
   14a4c:	add	fp, sp, #8
   14a50:	sub	sp, sp, #40	; 0x28
   14a54:	str	r0, [fp, #-16]
   14a58:	str	r1, [fp, #-20]	; 0xffffffec
   14a5c:	str	r2, [sp, #24]
   14a60:	movw	r0, #0
   14a64:	str	r0, [sp, #16]
   14a68:	ldr	r0, [sp, #16]
   14a6c:	cmp	r0, #8
   14a70:	bge	14b7c <flatcc_builder_custom_reset@@Base+0x134>
   14a74:	ldr	r0, [fp, #-16]
   14a78:	add	r0, r0, #52	; 0x34
   14a7c:	ldr	r1, [sp, #16]
   14a80:	add	r0, r0, r1, lsl #3
   14a84:	str	r0, [sp, #20]
   14a88:	ldr	r0, [sp, #20]
   14a8c:	ldr	r0, [r0]
   14a90:	movw	r1, #0
   14a94:	cmp	r0, r1
   14a98:	beq	14b30 <flatcc_builder_custom_reset@@Base+0xe8>
   14a9c:	ldr	r0, [sp, #16]
   14aa0:	cmp	r0, #5
   14aa4:	beq	14b10 <flatcc_builder_custom_reset@@Base+0xc8>
   14aa8:	ldr	r0, [sp, #24]
   14aac:	cmp	r0, #0
   14ab0:	beq	14b10 <flatcc_builder_custom_reset@@Base+0xc8>
   14ab4:	ldr	r0, [fp, #-16]
   14ab8:	ldr	r0, [r0, #48]	; 0x30
   14abc:	ldr	r1, [fp, #-16]
   14ac0:	ldr	r1, [r1, #40]	; 0x28
   14ac4:	ldr	r2, [sp, #20]
   14ac8:	ldr	r3, [sp, #16]
   14acc:	str	r0, [sp, #12]
   14ad0:	mov	r0, r1
   14ad4:	mov	r1, r2
   14ad8:	movw	r2, #1
   14adc:	str	r2, [sp, #8]
   14ae0:	ldr	ip, [sp, #8]
   14ae4:	str	r3, [sp, #4]
   14ae8:	mov	r3, ip
   14aec:	ldr	lr, [sp, #4]
   14af0:	str	lr, [sp]
   14af4:	ldr	r4, [sp, #12]
   14af8:	blx	r4
   14afc:	cmp	r0, #0
   14b00:	beq	14b10 <flatcc_builder_custom_reset@@Base+0xc8>
   14b04:	mvn	r0, #0
   14b08:	str	r0, [fp, #-12]
   14b0c:	b	14c78 <flatcc_builder_custom_reset@@Base+0x230>
   14b10:	ldr	r0, [sp, #20]
   14b14:	ldr	r0, [r0]
   14b18:	ldr	r1, [sp, #20]
   14b1c:	ldr	r2, [r1, #4]
   14b20:	movw	r1, #0
   14b24:	and	r1, r1, #255	; 0xff
   14b28:	bl	1295c <memset@plt>
   14b2c:	b	14b68 <flatcc_builder_custom_reset@@Base+0x120>
   14b30:	ldr	r0, [sp, #20]
   14b34:	ldr	r0, [r0, #4]
   14b38:	cmp	r0, #0
   14b3c:	bne	14b44 <flatcc_builder_custom_reset@@Base+0xfc>
   14b40:	b	14b64 <flatcc_builder_custom_reset@@Base+0x11c>
   14b44:	ldr	r0, [pc, #312]	; 14c84 <flatcc_builder_custom_reset@@Base+0x23c>
   14b48:	add	r0, pc, r0
   14b4c:	ldr	r1, [pc, #308]	; 14c88 <flatcc_builder_custom_reset@@Base+0x240>
   14b50:	add	r1, pc, r1
   14b54:	ldr	r2, [pc, #304]	; 14c8c <flatcc_builder_custom_reset@@Base+0x244>
   14b58:	add	r3, pc, r2
   14b5c:	movw	r2, #434	; 0x1b2
   14b60:	bl	1298c <__assert_fail@plt>
   14b64:	b	14b68 <flatcc_builder_custom_reset@@Base+0x120>
   14b68:	b	14b6c <flatcc_builder_custom_reset@@Base+0x124>
   14b6c:	ldr	r0, [sp, #16]
   14b70:	add	r0, r0, #1
   14b74:	str	r0, [sp, #16]
   14b78:	b	14a68 <flatcc_builder_custom_reset@@Base+0x20>
   14b7c:	ldr	r0, [fp, #-16]
   14b80:	movw	r1, #0
   14b84:	str	r1, [r0, #120]	; 0x78
   14b88:	ldr	r0, [fp, #-16]
   14b8c:	ldr	r0, [r0, #124]	; 0x7c
   14b90:	cmp	r0, #0
   14b94:	bls	14ba4 <flatcc_builder_custom_reset@@Base+0x15c>
   14b98:	ldr	r0, [fp, #-16]
   14b9c:	movw	r1, #16
   14ba0:	str	r1, [r0, #124]	; 0x7c
   14ba4:	ldr	r0, [fp, #-16]
   14ba8:	movw	r1, #0
   14bac:	strh	r1, [r0, #128]	; 0x80
   14bb0:	ldr	r0, [fp, #-16]
   14bb4:	movw	r1, #0
   14bb8:	str	r1, [r0, #136]	; 0x88
   14bbc:	ldr	r0, [fp, #-16]
   14bc0:	str	r1, [r0, #140]	; 0x8c
   14bc4:	ldr	r0, [fp, #-16]
   14bc8:	str	r1, [r0, #156]	; 0x9c
   14bcc:	ldr	r0, [fp, #-16]
   14bd0:	str	r1, [r0, #160]	; 0xa0
   14bd4:	ldr	r0, [fp, #-16]
   14bd8:	str	r1, [r0, #20]
   14bdc:	ldr	r0, [fp, #-16]
   14be0:	str	r1, [r0, #24]
   14be4:	ldr	r0, [fp, #-16]
   14be8:	str	r1, [r0, #148]	; 0x94
   14bec:	ldr	r0, [fp, #-16]
   14bf0:	str	r1, [r0, #152]	; 0x98
   14bf4:	ldr	r0, [fp, #-16]
   14bf8:	ldr	r0, [r0, #60]	; 0x3c
   14bfc:	ldr	r2, [fp, #-16]
   14c00:	str	r0, [r2, #16]
   14c04:	ldr	r0, [fp, #-16]
   14c08:	ldr	r0, [r0, #76]	; 0x4c
   14c0c:	ldr	r2, [fp, #-16]
   14c10:	str	r0, [r2]
   14c14:	ldr	r0, [fp, #-16]
   14c18:	ldr	r0, [r0, #52]	; 0x34
   14c1c:	ldr	r2, [fp, #-16]
   14c20:	str	r0, [r2, #4]
   14c24:	ldr	r0, [fp, #-16]
   14c28:	str	r1, [r0, #32]
   14c2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c30:	cmp	r0, #0
   14c34:	beq	14c54 <flatcc_builder_custom_reset@@Base+0x20c>
   14c38:	ldr	r0, [fp, #-16]
   14c3c:	movw	r1, #0
   14c40:	str	r1, [r0, #172]	; 0xac
   14c44:	ldr	r0, [fp, #-16]
   14c48:	str	r1, [r0, #176]	; 0xb0
   14c4c:	ldr	r0, [fp, #-16]
   14c50:	str	r1, [r0, #180]	; 0xb4
   14c54:	ldr	r0, [fp, #-16]
   14c58:	ldr	r0, [r0, #184]	; 0xb8
   14c5c:	cmp	r0, #0
   14c60:	beq	14c70 <flatcc_builder_custom_reset@@Base+0x228>
   14c64:	ldr	r0, [fp, #-16]
   14c68:	add	r0, r0, #188	; 0xbc
   14c6c:	bl	1a620 <flatcc_emitter_reset@@Base>
   14c70:	movw	r0, #0
   14c74:	str	r0, [fp, #-12]
   14c78:	ldr	r0, [fp, #-12]
   14c7c:	sub	sp, fp, #8
   14c80:	pop	{r4, sl, fp, pc}
   14c84:	andeq	sp, r0, lr, lsr #18
   14c88:	andeq	sp, r0, r8, lsr r9
   14c8c:	andeq	sp, r0, sp, lsl #19

00014c90 <flatcc_builder_reset@@Base>:
   14c90:	push	{fp, lr}
   14c94:	mov	fp, sp
   14c98:	sub	sp, sp, #8
   14c9c:	str	r0, [sp, #4]
   14ca0:	ldr	r0, [sp, #4]
   14ca4:	movw	r1, #0
   14ca8:	str	r1, [sp]
   14cac:	ldr	r2, [sp]
   14cb0:	bl	14a48 <flatcc_builder_custom_reset@@Base>
   14cb4:	mov	sp, fp
   14cb8:	pop	{fp, pc}

00014cbc <flatcc_builder_clear@@Base>:
   14cbc:	push	{r4, sl, fp, lr}
   14cc0:	add	fp, sp, #8
   14cc4:	sub	sp, sp, #32
   14cc8:	str	r0, [fp, #-12]
   14ccc:	movw	r0, #0
   14cd0:	str	r0, [sp, #20]
   14cd4:	ldr	r0, [sp, #20]
   14cd8:	cmp	r0, #8
   14cdc:	bge	14d50 <flatcc_builder_clear@@Base+0x94>
   14ce0:	ldr	r0, [fp, #-12]
   14ce4:	add	r0, r0, #52	; 0x34
   14ce8:	ldr	r1, [sp, #20]
   14cec:	add	r0, r0, r1, lsl #3
   14cf0:	str	r0, [fp, #-16]
   14cf4:	ldr	r0, [fp, #-12]
   14cf8:	ldr	r0, [r0, #48]	; 0x30
   14cfc:	ldr	r1, [fp, #-12]
   14d00:	ldr	r1, [r1, #40]	; 0x28
   14d04:	ldr	r2, [fp, #-16]
   14d08:	ldr	r3, [sp, #20]
   14d0c:	str	r0, [sp, #16]
   14d10:	mov	r0, r1
   14d14:	mov	r1, r2
   14d18:	movw	r2, #0
   14d1c:	str	r2, [sp, #12]
   14d20:	ldr	ip, [sp, #12]
   14d24:	str	r3, [sp, #8]
   14d28:	mov	r3, ip
   14d2c:	ldr	lr, [sp, #8]
   14d30:	str	lr, [sp]
   14d34:	ldr	r4, [sp, #16]
   14d38:	blx	r4
   14d3c:	str	r0, [sp, #4]
   14d40:	ldr	r0, [sp, #20]
   14d44:	add	r0, r0, #1
   14d48:	str	r0, [sp, #20]
   14d4c:	b	14cd4 <flatcc_builder_clear@@Base+0x18>
   14d50:	ldr	r0, [fp, #-12]
   14d54:	ldr	r0, [r0, #184]	; 0xb8
   14d58:	cmp	r0, #0
   14d5c:	beq	14d6c <flatcc_builder_clear@@Base+0xb0>
   14d60:	ldr	r0, [fp, #-12]
   14d64:	add	r0, r0, #188	; 0xbc
   14d68:	bl	1a7b8 <flatcc_emitter_clear@@Base>
   14d6c:	ldr	r0, [fp, #-12]
   14d70:	movw	r1, #0
   14d74:	and	r1, r1, #255	; 0xff
   14d78:	movw	r2, #232	; 0xe8
   14d7c:	bl	1295c <memset@plt>
   14d80:	sub	sp, fp, #8
   14d84:	pop	{r4, sl, fp, pc}

00014d88 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14d88:	push	{fp, lr}
   14d8c:	mov	fp, sp
   14d90:	sub	sp, sp, #24
   14d94:	str	r0, [fp, #-8]
   14d98:	str	r1, [sp, #12]
   14d9c:	ldr	r0, [sp, #12]
   14da0:	add	r0, r0, #4
   14da4:	sub	r0, r0, #1
   14da8:	mvn	r1, #3
   14dac:	and	r0, r0, r1
   14db0:	add	r0, r0, #4
   14db4:	str	r0, [sp, #12]
   14db8:	ldr	r0, [fp, #-8]
   14dbc:	ldr	r1, [fp, #-8]
   14dc0:	ldr	r2, [r1, #228]	; 0xe4
   14dc4:	ldr	r3, [sp, #12]
   14dc8:	movw	r1, #7
   14dcc:	movw	ip, #0
   14dd0:	str	ip, [sp]
   14dd4:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14dd8:	str	r0, [sp, #8]
   14ddc:	movw	r1, #0
   14de0:	cmp	r0, r1
   14de4:	bne	14df4 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   14de8:	movw	r0, #0
   14dec:	str	r0, [fp, #-4]
   14df0:	b	14e50 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   14df4:	ldr	r0, [sp, #8]
   14df8:	ldr	r2, [sp, #12]
   14dfc:	movw	r1, #0
   14e00:	and	r1, r1, #255	; 0xff
   14e04:	bl	1295c <memset@plt>
   14e08:	ldr	r0, [fp, #-8]
   14e0c:	ldr	r0, [r0, #224]	; 0xe0
   14e10:	ldr	r1, [sp, #8]
   14e14:	add	r2, r1, #4
   14e18:	str	r2, [sp, #8]
   14e1c:	str	r0, [r1]
   14e20:	ldr	r0, [fp, #-8]
   14e24:	ldr	r0, [r0, #228]	; 0xe4
   14e28:	add	r0, r0, #4
   14e2c:	ldr	r1, [fp, #-8]
   14e30:	str	r0, [r1, #224]	; 0xe0
   14e34:	ldr	r0, [sp, #12]
   14e38:	ldr	r1, [fp, #-8]
   14e3c:	ldr	r2, [r1, #228]	; 0xe4
   14e40:	add	r0, r2, r0
   14e44:	str	r0, [r1, #228]	; 0xe4
   14e48:	ldr	r0, [sp, #8]
   14e4c:	str	r0, [fp, #-4]
   14e50:	ldr	r0, [fp, #-4]
   14e54:	mov	sp, fp
   14e58:	pop	{fp, pc}
   14e5c:	push	{fp, lr}
   14e60:	mov	fp, sp
   14e64:	sub	sp, sp, #32
   14e68:	ldr	ip, [fp, #8]
   14e6c:	str	r0, [fp, #-4]
   14e70:	str	r1, [fp, #-8]
   14e74:	str	r2, [fp, #-12]
   14e78:	str	r3, [sp, #16]
   14e7c:	ldr	r0, [fp, #-4]
   14e80:	add	r0, r0, #52	; 0x34
   14e84:	ldr	r1, [fp, #-8]
   14e88:	add	r0, r0, r1, lsl #3
   14e8c:	str	r0, [sp, #12]
   14e90:	ldr	r0, [fp, #-12]
   14e94:	ldr	r1, [sp, #16]
   14e98:	add	r0, r0, r1
   14e9c:	ldr	r1, [sp, #12]
   14ea0:	ldr	r1, [r1, #4]
   14ea4:	cmp	r0, r1
   14ea8:	str	ip, [sp, #8]
   14eac:	bls	14f24 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   14eb0:	ldr	r0, [fp, #-4]
   14eb4:	ldr	r0, [r0, #48]	; 0x30
   14eb8:	ldr	r1, [fp, #-4]
   14ebc:	ldr	r1, [r1, #40]	; 0x28
   14ec0:	ldr	r2, [sp, #12]
   14ec4:	ldr	r3, [fp, #-12]
   14ec8:	ldr	ip, [sp, #16]
   14ecc:	add	r3, r3, ip
   14ed0:	ldr	ip, [fp, #8]
   14ed4:	ldr	lr, [fp, #-8]
   14ed8:	str	r0, [sp, #4]
   14edc:	mov	r0, r1
   14ee0:	mov	r1, r2
   14ee4:	mov	r2, r3
   14ee8:	mov	r3, ip
   14eec:	str	lr, [sp]
   14ef0:	ldr	ip, [sp, #4]
   14ef4:	blx	ip
   14ef8:	cmp	r0, #0
   14efc:	beq	14f20 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   14f00:	ldr	r0, [pc, #52]	; 14f3c <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   14f04:	add	r0, pc, r0
   14f08:	ldr	r1, [pc, #48]	; 14f40 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   14f0c:	add	r1, pc, r1
   14f10:	ldr	r2, [pc, #44]	; 14f44 <flatcc_builder_enter_user_frame_ptr@@Base+0x1bc>
   14f14:	add	r3, pc, r2
   14f18:	movw	r2, #308	; 0x134
   14f1c:	bl	1298c <__assert_fail@plt>
   14f20:	b	14f24 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   14f24:	ldr	r0, [sp, #12]
   14f28:	ldr	r0, [r0]
   14f2c:	ldr	r1, [fp, #-12]
   14f30:	add	r0, r0, r1
   14f34:	mov	sp, fp
   14f38:	pop	{fp, pc}
   14f3c:	andeq	lr, r0, r1, asr #14
   14f40:	andeq	sp, r0, ip, ror r5
   14f44:	andeq	lr, r0, fp, ror #10

00014f48 <flatcc_builder_enter_user_frame@@Base>:
   14f48:	push	{fp, lr}
   14f4c:	mov	fp, sp
   14f50:	sub	sp, sp, #24
   14f54:	str	r0, [fp, #-8]
   14f58:	str	r1, [sp, #12]
   14f5c:	ldr	r0, [sp, #12]
   14f60:	add	r0, r0, #4
   14f64:	sub	r0, r0, #1
   14f68:	mvn	r1, #3
   14f6c:	and	r0, r0, r1
   14f70:	add	r0, r0, #4
   14f74:	str	r0, [sp, #12]
   14f78:	ldr	r0, [fp, #-8]
   14f7c:	ldr	r1, [fp, #-8]
   14f80:	ldr	r2, [r1, #228]	; 0xe4
   14f84:	ldr	r3, [sp, #12]
   14f88:	movw	r1, #7
   14f8c:	movw	ip, #0
   14f90:	str	ip, [sp]
   14f94:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14f98:	str	r0, [sp, #8]
   14f9c:	movw	r1, #0
   14fa0:	cmp	r0, r1
   14fa4:	bne	14fb4 <flatcc_builder_enter_user_frame@@Base+0x6c>
   14fa8:	movw	r0, #0
   14fac:	str	r0, [fp, #-4]
   14fb0:	b	15014 <flatcc_builder_enter_user_frame@@Base+0xcc>
   14fb4:	ldr	r0, [sp, #8]
   14fb8:	ldr	r2, [sp, #12]
   14fbc:	movw	r1, #0
   14fc0:	and	r1, r1, #255	; 0xff
   14fc4:	bl	1295c <memset@plt>
   14fc8:	ldr	r0, [fp, #-8]
   14fcc:	ldr	r0, [r0, #224]	; 0xe0
   14fd0:	ldr	r1, [sp, #8]
   14fd4:	add	r2, r1, #4
   14fd8:	str	r2, [sp, #8]
   14fdc:	str	r0, [r1]
   14fe0:	ldr	r0, [fp, #-8]
   14fe4:	ldr	r0, [r0, #228]	; 0xe4
   14fe8:	add	r0, r0, #4
   14fec:	ldr	r1, [fp, #-8]
   14ff0:	str	r0, [r1, #224]	; 0xe0
   14ff4:	ldr	r0, [sp, #12]
   14ff8:	ldr	r1, [fp, #-8]
   14ffc:	ldr	r2, [r1, #228]	; 0xe4
   15000:	add	r0, r2, r0
   15004:	str	r0, [r1, #228]	; 0xe4
   15008:	ldr	r0, [fp, #-8]
   1500c:	ldr	r0, [r0, #224]	; 0xe0
   15010:	str	r0, [fp, #-4]
   15014:	ldr	r0, [fp, #-4]
   15018:	mov	sp, fp
   1501c:	pop	{fp, pc}

00015020 <flatcc_builder_exit_user_frame@@Base>:
   15020:	push	{fp, lr}
   15024:	mov	fp, sp
   15028:	sub	sp, sp, #8
   1502c:	str	r0, [sp, #4]
   15030:	ldr	r0, [sp, #4]
   15034:	ldr	r0, [r0, #224]	; 0xe0
   15038:	cmp	r0, #0
   1503c:	bls	15044 <flatcc_builder_exit_user_frame@@Base+0x24>
   15040:	b	15064 <flatcc_builder_exit_user_frame@@Base+0x44>
   15044:	ldr	r0, [pc, #100]	; 150b0 <flatcc_builder_exit_user_frame@@Base+0x90>
   15048:	add	r0, pc, r0
   1504c:	ldr	r1, [pc, #96]	; 150b4 <flatcc_builder_exit_user_frame@@Base+0x94>
   15050:	add	r1, pc, r1
   15054:	ldr	r2, [pc, #92]	; 150b8 <flatcc_builder_exit_user_frame@@Base+0x98>
   15058:	add	r3, pc, r2
   1505c:	movw	r2, #542	; 0x21e
   15060:	bl	1298c <__assert_fail@plt>
   15064:	ldr	r0, [sp, #4]
   15068:	ldr	r0, [r0, #108]	; 0x6c
   1506c:	ldr	r1, [sp, #4]
   15070:	ldr	r1, [r1, #224]	; 0xe0
   15074:	add	r0, r0, r1
   15078:	str	r0, [sp]
   1507c:	ldr	r0, [sp, #4]
   15080:	ldr	r0, [r0, #224]	; 0xe0
   15084:	sub	r0, r0, #4
   15088:	ldr	r1, [sp, #4]
   1508c:	str	r0, [r1, #228]	; 0xe4
   15090:	ldr	r0, [sp]
   15094:	mvn	r1, #3
   15098:	add	r0, r0, r1
   1509c:	ldr	r0, [r0]
   150a0:	ldr	r1, [sp, #4]
   150a4:	str	r0, [r1, #224]	; 0xe0
   150a8:	mov	sp, fp
   150ac:	pop	{fp, pc}
   150b0:	ldrdeq	sp, [r0], -fp
   150b4:	andeq	sp, r0, r8, lsr r4
   150b8:	andeq	sp, r0, r4, ror #9

000150bc <flatcc_builder_exit_user_frame_at@@Base>:
   150bc:	push	{fp, lr}
   150c0:	mov	fp, sp
   150c4:	sub	sp, sp, #8
   150c8:	str	r0, [sp, #4]
   150cc:	str	r1, [sp]
   150d0:	ldr	r0, [sp, #4]
   150d4:	ldr	r0, [r0, #224]	; 0xe0
   150d8:	ldr	r1, [sp]
   150dc:	cmp	r0, r1
   150e0:	bcc	150e8 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   150e4:	b	15108 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   150e8:	ldr	r0, [pc, #52]	; 15124 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   150ec:	add	r0, pc, r0
   150f0:	ldr	r1, [pc, #48]	; 15128 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   150f4:	add	r1, pc, r1
   150f8:	ldr	r2, [pc, #44]	; 1512c <flatcc_builder_exit_user_frame_at@@Base+0x70>
   150fc:	add	r3, pc, r2
   15100:	movw	r2, #551	; 0x227
   15104:	bl	1298c <__assert_fail@plt>
   15108:	ldr	r0, [sp]
   1510c:	ldr	r1, [sp, #4]
   15110:	str	r0, [r1, #224]	; 0xe0
   15114:	ldr	r0, [sp, #4]
   15118:	bl	15020 <flatcc_builder_exit_user_frame@@Base>
   1511c:	mov	sp, fp
   15120:	pop	{fp, pc}
   15124:	andeq	sp, r0, sl, lsl #9
   15128:	muleq	r0, r4, r3
   1512c:	muleq	r0, r9, r4

00015130 <flatcc_builder_get_current_user_frame@@Base>:
   15130:	sub	sp, sp, #4
   15134:	str	r0, [sp]
   15138:	ldr	r0, [sp]
   1513c:	ldr	r0, [r0, #224]	; 0xe0
   15140:	add	sp, sp, #4
   15144:	bx	lr

00015148 <flatcc_builder_get_user_frame_ptr@@Base>:
   15148:	sub	sp, sp, #8
   1514c:	str	r0, [sp, #4]
   15150:	str	r1, [sp]
   15154:	ldr	r0, [sp, #4]
   15158:	ldr	r0, [r0, #108]	; 0x6c
   1515c:	ldr	r1, [sp]
   15160:	add	r0, r0, r1
   15164:	add	sp, sp, #8
   15168:	bx	lr

0001516c <flatcc_builder_embed_buffer@@Base>:
   1516c:	push	{fp, lr}
   15170:	mov	fp, sp
   15174:	sub	sp, sp, #120	; 0x78
   15178:	ldr	ip, [fp, #12]
   1517c:	ldr	lr, [fp, #8]
   15180:	str	r0, [fp, #-8]
   15184:	strh	r1, [fp, #-10]
   15188:	str	r2, [fp, #-16]
   1518c:	str	r3, [fp, #-20]	; 0xffffffec
   15190:	strh	lr, [fp, #-22]	; 0xffffffea
   15194:	ldr	r0, [fp, #12]
   15198:	and	r0, r0, #2
   1519c:	str	r0, [sp, #12]
   151a0:	ldr	r0, [fp, #-8]
   151a4:	ldrh	r1, [fp, #-10]
   151a8:	ldr	r2, [fp, #-8]
   151ac:	ldr	r2, [r2, #152]	; 0x98
   151b0:	cmp	r2, #0
   151b4:	movw	r2, #0
   151b8:	moveq	r2, #1
   151bc:	mvn	r3, #0
   151c0:	eor	r2, r2, r3
   151c4:	and	r3, r2, #1
   151c8:	sub	r2, fp, #22
   151cc:	str	r1, [sp, #8]
   151d0:	mov	r1, r2
   151d4:	ldr	r2, [sp, #8]
   151d8:	uxth	r2, r2
   151dc:	str	ip, [sp, #4]
   151e0:	bl	15354 <flatcc_builder_embed_buffer@@Base+0x1e8>
   151e4:	cmp	r0, #0
   151e8:	beq	151f8 <flatcc_builder_embed_buffer@@Base+0x8c>
   151ec:	movw	r0, #0
   151f0:	str	r0, [fp, #-4]
   151f4:	b	15344 <flatcc_builder_embed_buffer@@Base+0x1d8>
   151f8:	ldr	r0, [fp, #-8]
   151fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15200:	ldr	r2, [sp, #12]
   15204:	cmp	r2, #0
   15208:	movw	r2, #0
   1520c:	movne	r2, #1
   15210:	tst	r2, #1
   15214:	movw	r2, #4
   15218:	moveq	r2, #0
   1521c:	add	r1, r1, r2
   15220:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15224:	bl	154c0 <flatcc_builder_embed_buffer@@Base+0x354>
   15228:	str	r0, [fp, #-32]	; 0xffffffe0
   1522c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15230:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15234:	add	r0, r0, r1
   15238:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   1523c:	str	r0, [fp, #-28]	; 0xffffffe4
   15240:	movw	r0, #0
   15244:	str	r0, [sp, #16]
   15248:	str	r0, [sp, #20]
   1524c:	ldr	r0, [fp, #-8]
   15250:	ldr	r0, [r0, #152]	; 0x98
   15254:	cmp	r0, #0
   15258:	beq	15298 <flatcc_builder_embed_buffer@@Base+0x12c>
   1525c:	ldr	r0, [sp, #16]
   15260:	add	r0, r0, #4
   15264:	str	r0, [sp, #16]
   15268:	add	r0, sp, #16
   1526c:	add	r0, r0, #8
   15270:	ldr	r1, [sp, #20]
   15274:	sub	r2, fp, #28
   15278:	str	r2, [r0, r1, lsl #3]
   1527c:	ldr	r1, [sp, #20]
   15280:	add	r0, r0, r1, lsl #3
   15284:	movw	r1, #4
   15288:	str	r1, [r0, #4]
   1528c:	ldr	r0, [sp, #20]
   15290:	add	r0, r0, #1
   15294:	str	r0, [sp, #20]
   15298:	ldr	r0, [fp, #-20]	; 0xffffffec
   1529c:	cmp	r0, #0
   152a0:	bls	152e4 <flatcc_builder_embed_buffer@@Base+0x178>
   152a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   152a8:	ldr	r1, [sp, #16]
   152ac:	add	r0, r1, r0
   152b0:	str	r0, [sp, #16]
   152b4:	ldr	r0, [fp, #-16]
   152b8:	add	r1, sp, #16
   152bc:	add	r1, r1, #8
   152c0:	ldr	r2, [sp, #20]
   152c4:	str	r0, [r1, r2, lsl #3]
   152c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   152cc:	ldr	r2, [sp, #20]
   152d0:	add	r1, r1, r2, lsl #3
   152d4:	str	r0, [r1, #4]
   152d8:	ldr	r0, [sp, #20]
   152dc:	add	r0, r0, #1
   152e0:	str	r0, [sp, #20]
   152e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   152e8:	cmp	r0, #0
   152ec:	bls	15334 <flatcc_builder_embed_buffer@@Base+0x1c8>
   152f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   152f4:	ldr	r1, [sp, #16]
   152f8:	add	r0, r1, r0
   152fc:	str	r0, [sp, #16]
   15300:	add	r0, sp, #16
   15304:	add	r0, r0, #8
   15308:	ldr	r1, [sp, #20]
   1530c:	ldr	r2, [pc, #60]	; 15350 <flatcc_builder_embed_buffer@@Base+0x1e4>
   15310:	ldr	r2, [pc, r2]
   15314:	str	r2, [r0, r1, lsl #3]
   15318:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1531c:	ldr	r2, [sp, #20]
   15320:	add	r0, r0, r2, lsl #3
   15324:	str	r1, [r0, #4]
   15328:	ldr	r0, [sp, #20]
   1532c:	add	r0, r0, #1
   15330:	str	r0, [sp, #20]
   15334:	ldr	r0, [fp, #-8]
   15338:	add	r1, sp, #16
   1533c:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   15340:	str	r0, [fp, #-4]
   15344:	ldr	r0, [fp, #-4]
   15348:	mov	sp, fp
   1534c:	pop	{fp, pc}
   15350:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   15354:	push	{fp, lr}
   15358:	mov	fp, sp
   1535c:	sub	sp, sp, #104	; 0x68
   15360:	str	r0, [fp, #-4]
   15364:	str	r1, [fp, #-8]
   15368:	strh	r2, [fp, #-10]
   1536c:	str	r3, [fp, #-16]
   15370:	ldrh	r0, [fp, #-10]
   15374:	cmp	r0, #0
   15378:	beq	15388 <flatcc_builder_embed_buffer@@Base+0x21c>
   1537c:	ldrh	r0, [fp, #-10]
   15380:	str	r0, [sp, #8]
   15384:	b	153bc <flatcc_builder_embed_buffer@@Base+0x250>
   15388:	ldr	r0, [fp, #-4]
   1538c:	ldrh	r0, [r0, #132]	; 0x84
   15390:	cmp	r0, #0
   15394:	beq	153a8 <flatcc_builder_embed_buffer@@Base+0x23c>
   15398:	ldr	r0, [fp, #-4]
   1539c:	ldrh	r0, [r0, #132]	; 0x84
   153a0:	str	r0, [sp, #4]
   153a4:	b	153b4 <flatcc_builder_embed_buffer@@Base+0x248>
   153a8:	movw	r0, #1
   153ac:	str	r0, [sp, #4]
   153b0:	b	153b4 <flatcc_builder_embed_buffer@@Base+0x248>
   153b4:	ldr	r0, [sp, #4]
   153b8:	str	r0, [sp, #8]
   153bc:	ldr	r0, [sp, #8]
   153c0:	strh	r0, [fp, #-10]
   153c4:	ldr	r0, [fp, #-8]
   153c8:	movw	r1, #4
   153cc:	uxth	r1, r1
   153d0:	bl	16ec0 <flatcc_builder_start_vector@@Base+0xac>
   153d4:	ldr	r0, [fp, #-8]
   153d8:	ldrh	r1, [fp, #-10]
   153dc:	bl	16ec0 <flatcc_builder_start_vector@@Base+0xac>
   153e0:	ldr	r0, [fp, #-16]
   153e4:	cmp	r0, #0
   153e8:	bne	154a4 <flatcc_builder_embed_buffer@@Base+0x338>
   153ec:	ldr	r0, [fp, #-4]
   153f0:	ldrh	r1, [fp, #-10]
   153f4:	bl	1a308 <flatcc_builder_get_emit_context@@Base+0x18>
   153f8:	str	r0, [fp, #-20]	; 0xffffffec
   153fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   15400:	cmp	r0, #0
   15404:	beq	154a0 <flatcc_builder_embed_buffer@@Base+0x334>
   15408:	movw	r0, #0
   1540c:	str	r0, [sp, #12]
   15410:	str	r0, [sp, #16]
   15414:	ldr	r0, [fp, #-20]	; 0xffffffec
   15418:	cmp	r0, #0
   1541c:	bls	15464 <flatcc_builder_embed_buffer@@Base+0x2f8>
   15420:	ldr	r0, [fp, #-20]	; 0xffffffec
   15424:	ldr	r1, [sp, #12]
   15428:	add	r0, r1, r0
   1542c:	str	r0, [sp, #12]
   15430:	add	r0, sp, #12
   15434:	add	r0, r0, #8
   15438:	ldr	r1, [sp, #16]
   1543c:	ldr	r2, [pc, #120]	; 154bc <flatcc_builder_embed_buffer@@Base+0x350>
   15440:	ldr	r2, [pc, r2]
   15444:	str	r2, [r0, r1, lsl #3]
   15448:	ldr	r1, [fp, #-20]	; 0xffffffec
   1544c:	ldr	r2, [sp, #16]
   15450:	add	r0, r0, r2, lsl #3
   15454:	str	r1, [r0, #4]
   15458:	ldr	r0, [sp, #16]
   1545c:	add	r0, r0, #1
   15460:	str	r0, [sp, #16]
   15464:	ldr	r0, [fp, #-4]
   15468:	add	r1, sp, #12
   1546c:	bl	174a4 <flatcc_builder_create_vtable@@Base+0x104>
   15470:	movw	r1, #0
   15474:	cmp	r1, r0
   15478:	bne	1549c <flatcc_builder_embed_buffer@@Base+0x330>
   1547c:	ldr	r0, [pc, #44]	; 154b0 <flatcc_builder_embed_buffer@@Base+0x344>
   15480:	add	r0, pc, r0
   15484:	ldr	r1, [pc, #40]	; 154b4 <flatcc_builder_embed_buffer@@Base+0x348>
   15488:	add	r1, pc, r1
   1548c:	ldr	r2, [pc, #36]	; 154b8 <flatcc_builder_embed_buffer@@Base+0x34c>
   15490:	add	r3, pc, r2
   15494:	movw	r2, #702	; 0x2be
   15498:	bl	1298c <__assert_fail@plt>
   1549c:	b	154a0 <flatcc_builder_embed_buffer@@Base+0x334>
   154a0:	b	154a4 <flatcc_builder_embed_buffer@@Base+0x338>
   154a4:	movw	r0, #0
   154a8:	mov	sp, fp
   154ac:	pop	{fp, pc}
   154b0:	andeq	lr, r0, r5, asr #3
   154b4:	andeq	sp, r0, r0
   154b8:	andeq	lr, r0, r2, lsr r0
   154bc:	andeq	pc, r1, ip, lsl #24
   154c0:	sub	sp, sp, #12
   154c4:	str	r0, [sp, #8]
   154c8:	str	r1, [sp, #4]
   154cc:	strh	r2, [sp, #2]
   154d0:	ldr	r0, [sp, #8]
   154d4:	ldr	r0, [r0, #136]	; 0x88
   154d8:	ldr	r1, [sp, #4]
   154dc:	sub	r0, r0, r1
   154e0:	ldrh	r1, [sp, #2]
   154e4:	sub	r1, r1, #1
   154e8:	and	r0, r0, r1
   154ec:	add	sp, sp, #12
   154f0:	bx	lr
   154f4:	sub	sp, sp, #4
   154f8:	str	r0, [sp]
   154fc:	ldr	r0, [sp]
   15500:	add	sp, sp, #4
   15504:	bx	lr
   15508:	push	{fp, lr}
   1550c:	mov	fp, sp
   15510:	sub	sp, sp, #24
   15514:	str	r0, [fp, #-4]
   15518:	str	r1, [fp, #-8]
   1551c:	ldr	r0, [fp, #-4]
   15520:	ldr	r0, [r0, #136]	; 0x88
   15524:	ldr	r1, [fp, #-8]
   15528:	ldr	r1, [r1]
   1552c:	sub	r0, r0, r1
   15530:	str	r0, [sp, #12]
   15534:	ldr	r0, [fp, #-8]
   15538:	ldr	r0, [r0]
   1553c:	cmp	r0, #16
   15540:	bls	15558 <flatcc_builder_embed_buffer@@Base+0x3ec>
   15544:	ldr	r0, [fp, #-8]
   15548:	ldr	r0, [r0]
   1554c:	sub	r0, r0, #16
   15550:	cmn	r0, #1
   15554:	bhi	1556c <flatcc_builder_embed_buffer@@Base+0x400>
   15558:	ldr	r0, [sp, #12]
   1555c:	ldr	r1, [fp, #-4]
   15560:	ldr	r1, [r1, #136]	; 0x88
   15564:	cmp	r0, r1
   15568:	blt	1558c <flatcc_builder_embed_buffer@@Base+0x420>
   1556c:	ldr	r0, [pc, #172]	; 15620 <flatcc_builder_embed_buffer@@Base+0x4b4>
   15570:	add	r0, pc, r0
   15574:	ldr	r1, [pc, #168]	; 15624 <flatcc_builder_embed_buffer@@Base+0x4b8>
   15578:	add	r1, pc, r1
   1557c:	ldr	r2, [pc, #164]	; 15628 <flatcc_builder_embed_buffer@@Base+0x4bc>
   15580:	add	r3, pc, r2
   15584:	movw	r2, #647	; 0x287
   15588:	bl	1298c <__assert_fail@plt>
   1558c:	ldr	r0, [fp, #-4]
   15590:	ldr	r0, [r0, #44]	; 0x2c
   15594:	ldr	r1, [fp, #-4]
   15598:	ldr	r1, [r1, #36]	; 0x24
   1559c:	ldr	r2, [fp, #-8]
   155a0:	add	r2, r2, #8
   155a4:	ldr	r3, [fp, #-8]
   155a8:	ldr	r3, [r3, #4]
   155ac:	ldr	ip, [sp, #12]
   155b0:	ldr	lr, [fp, #-8]
   155b4:	ldr	lr, [lr]
   155b8:	str	r0, [sp, #8]
   155bc:	mov	r0, r1
   155c0:	mov	r1, r2
   155c4:	mov	r2, r3
   155c8:	mov	r3, ip
   155cc:	str	lr, [sp]
   155d0:	ldr	ip, [sp, #8]
   155d4:	blx	ip
   155d8:	cmp	r0, #0
   155dc:	beq	15600 <flatcc_builder_embed_buffer@@Base+0x494>
   155e0:	ldr	r0, [pc, #44]	; 15614 <flatcc_builder_embed_buffer@@Base+0x4a8>
   155e4:	add	r0, pc, r0
   155e8:	ldr	r1, [pc, #40]	; 15618 <flatcc_builder_embed_buffer@@Base+0x4ac>
   155ec:	add	r1, pc, r1
   155f0:	ldr	r2, [pc, #36]	; 1561c <flatcc_builder_embed_buffer@@Base+0x4b0>
   155f4:	add	r3, pc, r2
   155f8:	movw	r2, #651	; 0x28b
   155fc:	bl	1298c <__assert_fail@plt>
   15600:	ldr	r0, [sp, #12]
   15604:	ldr	r1, [fp, #-4]
   15608:	str	r0, [r1, #136]	; 0x88
   1560c:	mov	sp, fp
   15610:	pop	{fp, pc}
   15614:	andeq	lr, r0, r1, rrx
   15618:	muleq	r0, ip, lr
   1561c:	andeq	sp, r0, r0, lsl pc
   15620:	ldrdeq	lr, [r0], -r5
   15624:	andeq	ip, r0, r0, lsl pc
   15628:	andeq	sp, r0, r4, lsl #31

0001562c <flatcc_builder_create_buffer@@Base>:
   1562c:	push	{fp, lr}
   15630:	mov	fp, sp
   15634:	sub	sp, sp, #152	; 0x98
   15638:	ldr	ip, [fp, #12]
   1563c:	ldr	lr, [fp, #8]
   15640:	str	r0, [fp, #-8]
   15644:	str	r1, [fp, #-12]
   15648:	strh	r2, [fp, #-14]
   1564c:	str	r3, [fp, #-20]	; 0xffffffec
   15650:	strh	lr, [fp, #-22]	; 0xffffffea
   15654:	movw	r0, #0
   15658:	str	r0, [fp, #-36]	; 0xffffffdc
   1565c:	str	r0, [sp, #28]
   15660:	ldr	r0, [fp, #12]
   15664:	and	r0, r0, #1
   15668:	cmp	r0, #0
   1566c:	movw	r0, #0
   15670:	movne	r0, #1
   15674:	and	r0, r0, #1
   15678:	str	r0, [sp, #24]
   1567c:	ldr	r0, [fp, #12]
   15680:	and	r0, r0, #2
   15684:	cmp	r0, #0
   15688:	movw	r0, #0
   1568c:	movne	r0, #1
   15690:	and	r0, r0, #1
   15694:	str	r0, [sp, #20]
   15698:	ldr	r0, [fp, #-8]
   1569c:	ldrh	r1, [fp, #-14]
   156a0:	ldr	r3, [sp, #24]
   156a4:	sub	r2, fp, #22
   156a8:	str	r1, [sp, #16]
   156ac:	mov	r1, r2
   156b0:	ldr	r2, [sp, #16]
   156b4:	uxth	r2, r2
   156b8:	str	ip, [sp, #12]
   156bc:	bl	15354 <flatcc_builder_embed_buffer@@Base+0x1e8>
   156c0:	cmp	r0, #0
   156c4:	beq	156d4 <flatcc_builder_create_buffer@@Base+0xa8>
   156c8:	movw	r0, #0
   156cc:	str	r0, [fp, #-4]
   156d0:	b	159b8 <flatcc_builder_create_buffer@@Base+0x38c>
   156d4:	ldr	r0, [fp, #-8]
   156d8:	ldrh	r1, [fp, #-22]	; 0xffffffea
   156dc:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   156e0:	ldr	r0, [fp, #-12]
   156e4:	movw	r1, #0
   156e8:	cmp	r0, r1
   156ec:	beq	1572c <flatcc_builder_create_buffer@@Base+0x100>
   156f0:	ldr	r0, [fp, #-12]
   156f4:	ldrb	r1, [r0]
   156f8:	strb	r1, [sp, #28]
   156fc:	ldrb	r1, [r0, #1]
   15700:	strb	r1, [sp, #29]
   15704:	ldrb	r1, [r0, #2]
   15708:	strb	r1, [sp, #30]
   1570c:	ldrb	r0, [r0, #3]
   15710:	strb	r0, [sp, #31]
   15714:	ldr	r0, [sp, #28]
   15718:	bl	15a08 <flatcc_builder_create_buffer@@Base+0x3dc>
   1571c:	str	r0, [sp, #28]
   15720:	ldr	r0, [sp, #28]
   15724:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   15728:	str	r0, [sp, #28]
   1572c:	ldr	r0, [sp, #28]
   15730:	cmp	r0, #0
   15734:	movw	r0, #0
   15738:	movne	r0, #1
   1573c:	tst	r0, #1
   15740:	movw	r0, #4
   15744:	mov	r1, r0
   15748:	moveq	r1, #0
   1574c:	str	r1, [fp, #-36]	; 0xffffffdc
   15750:	ldr	r1, [fp, #-8]
   15754:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15758:	add	r2, r2, #4
   1575c:	ldr	r3, [sp, #20]
   15760:	cmp	r3, #0
   15764:	movw	r3, #0
   15768:	movne	r3, #1
   1576c:	tst	r3, #1
   15770:	moveq	r0, #0
   15774:	add	r0, r2, r0
   15778:	str	r0, [sp, #8]
   1577c:	mov	r0, r1
   15780:	ldr	r1, [sp, #8]
   15784:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15788:	bl	154c0 <flatcc_builder_embed_buffer@@Base+0x354>
   1578c:	str	r0, [fp, #-32]	; 0xffffffe0
   15790:	movw	r0, #0
   15794:	str	r0, [sp, #32]
   15798:	str	r0, [sp, #36]	; 0x24
   1579c:	ldr	r0, [sp, #24]
   157a0:	cmp	r0, #0
   157a4:	bne	157b4 <flatcc_builder_create_buffer@@Base+0x188>
   157a8:	ldr	r0, [sp, #20]
   157ac:	cmp	r0, #0
   157b0:	beq	157f0 <flatcc_builder_create_buffer@@Base+0x1c4>
   157b4:	ldr	r0, [sp, #32]
   157b8:	add	r0, r0, #4
   157bc:	str	r0, [sp, #32]
   157c0:	add	r0, sp, #32
   157c4:	add	r0, r0, #8
   157c8:	ldr	r1, [sp, #36]	; 0x24
   157cc:	sub	r2, fp, #44	; 0x2c
   157d0:	str	r2, [r0, r1, lsl #3]
   157d4:	ldr	r1, [sp, #36]	; 0x24
   157d8:	add	r0, r0, r1, lsl #3
   157dc:	movw	r1, #4
   157e0:	str	r1, [r0, #4]
   157e4:	ldr	r0, [sp, #36]	; 0x24
   157e8:	add	r0, r0, #1
   157ec:	str	r0, [sp, #36]	; 0x24
   157f0:	ldr	r0, [sp, #32]
   157f4:	add	r0, r0, #4
   157f8:	str	r0, [sp, #32]
   157fc:	add	r0, sp, #32
   15800:	add	r0, r0, #8
   15804:	ldr	r1, [sp, #36]	; 0x24
   15808:	sub	r2, fp, #40	; 0x28
   1580c:	str	r2, [r0, r1, lsl #3]
   15810:	ldr	r1, [sp, #36]	; 0x24
   15814:	add	r0, r0, r1, lsl #3
   15818:	movw	r1, #4
   1581c:	str	r1, [r0, #4]
   15820:	ldr	r0, [sp, #36]	; 0x24
   15824:	add	r0, r0, #1
   15828:	str	r0, [sp, #36]	; 0x24
   1582c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15830:	cmp	r0, #0
   15834:	bls	15878 <flatcc_builder_create_buffer@@Base+0x24c>
   15838:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1583c:	ldr	r1, [sp, #32]
   15840:	add	r0, r1, r0
   15844:	str	r0, [sp, #32]
   15848:	add	r0, sp, #32
   1584c:	add	r0, r0, #8
   15850:	ldr	r1, [sp, #36]	; 0x24
   15854:	add	r2, sp, #28
   15858:	str	r2, [r0, r1, lsl #3]
   1585c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15860:	ldr	r2, [sp, #36]	; 0x24
   15864:	add	r0, r0, r2, lsl #3
   15868:	str	r1, [r0, #4]
   1586c:	ldr	r0, [sp, #36]	; 0x24
   15870:	add	r0, r0, #1
   15874:	str	r0, [sp, #36]	; 0x24
   15878:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1587c:	cmp	r0, #0
   15880:	bls	158c8 <flatcc_builder_create_buffer@@Base+0x29c>
   15884:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15888:	ldr	r1, [sp, #32]
   1588c:	add	r0, r1, r0
   15890:	str	r0, [sp, #32]
   15894:	add	r0, sp, #32
   15898:	add	r0, r0, #8
   1589c:	ldr	r1, [sp, #36]	; 0x24
   158a0:	ldr	r2, [pc, #296]	; 159d0 <flatcc_builder_create_buffer@@Base+0x3a4>
   158a4:	ldr	r2, [pc, r2]
   158a8:	str	r2, [r0, r1, lsl #3]
   158ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   158b0:	ldr	r2, [sp, #36]	; 0x24
   158b4:	add	r0, r0, r2, lsl #3
   158b8:	str	r1, [r0, #4]
   158bc:	ldr	r0, [sp, #36]	; 0x24
   158c0:	add	r0, r0, #1
   158c4:	str	r0, [sp, #36]	; 0x24
   158c8:	ldr	r0, [fp, #-8]
   158cc:	ldr	r0, [r0, #136]	; 0x88
   158d0:	ldr	r1, [sp, #32]
   158d4:	sub	r0, r0, r1
   158d8:	ldr	r1, [sp, #24]
   158dc:	cmp	r1, #0
   158e0:	movw	r1, #1
   158e4:	str	r0, [sp, #4]
   158e8:	str	r1, [sp]
   158ec:	bne	15904 <flatcc_builder_create_buffer@@Base+0x2d8>
   158f0:	ldr	r0, [sp, #20]
   158f4:	cmp	r0, #0
   158f8:	movw	r0, #0
   158fc:	movne	r0, #1
   15900:	str	r0, [sp]
   15904:	ldr	r0, [sp]
   15908:	tst	r0, #1
   1590c:	movw	r0, #4
   15910:	moveq	r0, #0
   15914:	ldr	r1, [sp, #4]
   15918:	add	r0, r1, r0
   1591c:	str	r0, [fp, #-48]	; 0xffffffd0
   15920:	ldr	r0, [sp, #24]
   15924:	cmp	r0, #0
   15928:	beq	15948 <flatcc_builder_create_buffer@@Base+0x31c>
   1592c:	ldr	r0, [fp, #-8]
   15930:	ldr	r0, [r0, #144]	; 0x90
   15934:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15938:	sub	r0, r0, r1
   1593c:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   15940:	str	r0, [fp, #-44]	; 0xffffffd4
   15944:	b	15960 <flatcc_builder_create_buffer@@Base+0x334>
   15948:	ldr	r0, [fp, #-8]
   1594c:	ldr	r0, [r0, #140]	; 0x8c
   15950:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15954:	sub	r0, r0, r1
   15958:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   1595c:	str	r0, [fp, #-44]	; 0xffffffd4
   15960:	ldr	r0, [fp, #-20]	; 0xffffffec
   15964:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15968:	sub	r0, r0, r1
   1596c:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   15970:	str	r0, [fp, #-40]	; 0xffffffd8
   15974:	ldr	r0, [fp, #-8]
   15978:	add	r1, sp, #32
   1597c:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   15980:	str	r0, [fp, #-28]	; 0xffffffe4
   15984:	movw	r1, #0
   15988:	cmp	r1, r0
   1598c:	bne	159b0 <flatcc_builder_create_buffer@@Base+0x384>
   15990:	ldr	r0, [pc, #44]	; 159c4 <flatcc_builder_create_buffer@@Base+0x398>
   15994:	add	r0, pc, r0
   15998:	ldr	r1, [pc, #40]	; 159c8 <flatcc_builder_create_buffer@@Base+0x39c>
   1599c:	add	r1, pc, r1
   159a0:	ldr	r2, [pc, #36]	; 159cc <flatcc_builder_create_buffer@@Base+0x3a0>
   159a4:	add	r3, pc, r2
   159a8:	movw	r2, #772	; 0x304
   159ac:	bl	1298c <__assert_fail@plt>
   159b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   159b4:	str	r0, [fp, #-4]
   159b8:	ldr	r0, [fp, #-4]
   159bc:	mov	sp, fp
   159c0:	pop	{fp, pc}
   159c4:			; <UNDEFINED> instruction: 0x0000dcb1
   159c8:	andeq	ip, r0, ip, ror #21
   159cc:	andeq	ip, r0, r6, lsr ip
   159d0:	andeq	pc, r1, r8, lsr #15
   159d4:	sub	sp, sp, #8
   159d8:	str	r0, [sp, #4]
   159dc:	strh	r1, [sp, #2]
   159e0:	ldr	r0, [sp, #4]
   159e4:	ldrh	r0, [r0, #128]	; 0x80
   159e8:	ldrh	r1, [sp, #2]
   159ec:	cmp	r0, r1
   159f0:	bge	15a00 <flatcc_builder_create_buffer@@Base+0x3d4>
   159f4:	ldrh	r0, [sp, #2]
   159f8:	ldr	r1, [sp, #4]
   159fc:	strh	r0, [r1, #128]	; 0x80
   15a00:	add	sp, sp, #8
   15a04:	bx	lr
   15a08:	sub	sp, sp, #4
   15a0c:	str	r0, [sp]
   15a10:	ldr	r0, [sp]
   15a14:	add	sp, sp, #4
   15a18:	bx	lr

00015a1c <flatcc_builder_create_struct@@Base>:
   15a1c:	push	{fp, lr}
   15a20:	mov	fp, sp
   15a24:	sub	sp, sp, #96	; 0x60
   15a28:	str	r0, [fp, #-4]
   15a2c:	str	r1, [fp, #-8]
   15a30:	str	r2, [fp, #-12]
   15a34:	strh	r3, [fp, #-14]
   15a38:	ldrh	r0, [fp, #-14]
   15a3c:	cmp	r0, #1
   15a40:	blt	15a48 <flatcc_builder_create_struct@@Base+0x2c>
   15a44:	b	15a68 <flatcc_builder_create_struct@@Base+0x4c>
   15a48:	ldr	r0, [pc, #244]	; 15b44 <flatcc_builder_create_struct@@Base+0x128>
   15a4c:	add	r0, pc, r0
   15a50:	ldr	r1, [pc, #240]	; 15b48 <flatcc_builder_create_struct@@Base+0x12c>
   15a54:	add	r1, pc, r1
   15a58:	ldr	r2, [pc, #236]	; 15b4c <flatcc_builder_create_struct@@Base+0x130>
   15a5c:	add	r3, pc, r2
   15a60:	movw	r2, #783	; 0x30f
   15a64:	bl	1298c <__assert_fail@plt>
   15a68:	ldr	r0, [fp, #-4]
   15a6c:	ldrh	r1, [fp, #-14]
   15a70:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   15a74:	ldr	r0, [fp, #-4]
   15a78:	ldr	r1, [fp, #-12]
   15a7c:	ldrh	r2, [fp, #-14]
   15a80:	bl	154c0 <flatcc_builder_embed_buffer@@Base+0x354>
   15a84:	str	r0, [fp, #-20]	; 0xffffffec
   15a88:	movw	r0, #0
   15a8c:	str	r0, [sp, #4]
   15a90:	str	r0, [sp, #8]
   15a94:	ldr	r0, [fp, #-12]
   15a98:	cmp	r0, #0
   15a9c:	bls	15ae0 <flatcc_builder_create_struct@@Base+0xc4>
   15aa0:	ldr	r0, [fp, #-12]
   15aa4:	ldr	r1, [sp, #4]
   15aa8:	add	r0, r1, r0
   15aac:	str	r0, [sp, #4]
   15ab0:	ldr	r0, [fp, #-8]
   15ab4:	add	r1, sp, #4
   15ab8:	add	r1, r1, #8
   15abc:	ldr	r2, [sp, #8]
   15ac0:	str	r0, [r1, r2, lsl #3]
   15ac4:	ldr	r0, [fp, #-12]
   15ac8:	ldr	r2, [sp, #8]
   15acc:	add	r1, r1, r2, lsl #3
   15ad0:	str	r0, [r1, #4]
   15ad4:	ldr	r0, [sp, #8]
   15ad8:	add	r0, r0, #1
   15adc:	str	r0, [sp, #8]
   15ae0:	ldr	r0, [fp, #-20]	; 0xffffffec
   15ae4:	cmp	r0, #0
   15ae8:	bls	15b30 <flatcc_builder_create_struct@@Base+0x114>
   15aec:	ldr	r0, [fp, #-20]	; 0xffffffec
   15af0:	ldr	r1, [sp, #4]
   15af4:	add	r0, r1, r0
   15af8:	str	r0, [sp, #4]
   15afc:	add	r0, sp, #4
   15b00:	add	r0, r0, #8
   15b04:	ldr	r1, [sp, #8]
   15b08:	ldr	r2, [pc, #64]	; 15b50 <flatcc_builder_create_struct@@Base+0x134>
   15b0c:	ldr	r2, [pc, r2]
   15b10:	str	r2, [r0, r1, lsl #3]
   15b14:	ldr	r1, [fp, #-20]	; 0xffffffec
   15b18:	ldr	r2, [sp, #8]
   15b1c:	add	r0, r0, r2, lsl #3
   15b20:	str	r1, [r0, #4]
   15b24:	ldr	r0, [sp, #8]
   15b28:	add	r0, r0, #1
   15b2c:	str	r0, [sp, #8]
   15b30:	ldr	r0, [fp, #-4]
   15b34:	add	r1, sp, #4
   15b38:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   15b3c:	mov	sp, fp
   15b40:	pop	{fp, pc}
   15b44:	andeq	ip, r0, r1, lsl ip
   15b48:	andeq	ip, r0, r4, lsr sl
   15b4c:	andeq	ip, r0, ip, lsl #24
   15b50:	andeq	pc, r1, r0, asr #10

00015b54 <flatcc_builder_start_buffer@@Base>:
   15b54:	push	{fp, lr}
   15b58:	mov	fp, sp
   15b5c:	sub	sp, sp, #32
   15b60:	str	r0, [fp, #-8]
   15b64:	str	r1, [fp, #-12]
   15b68:	strh	r2, [fp, #-14]
   15b6c:	str	r3, [sp, #12]
   15b70:	ldr	r0, [fp, #-8]
   15b74:	ldr	r1, [fp, #-8]
   15b78:	ldrh	r1, [r1, #128]	; 0x80
   15b7c:	bl	15ccc <flatcc_builder_start_buffer@@Base+0x178>
   15b80:	cmp	r0, #0
   15b84:	beq	15b94 <flatcc_builder_start_buffer@@Base+0x40>
   15b88:	mvn	r0, #0
   15b8c:	str	r0, [fp, #-4]
   15b90:	b	15cbc <flatcc_builder_start_buffer@@Base+0x168>
   15b94:	ldr	r0, [fp, #-8]
   15b98:	movw	r1, #1
   15b9c:	strh	r1, [r0, #128]	; 0x80
   15ba0:	ldr	r0, [fp, #-8]
   15ba4:	ldrh	r0, [r0, #132]	; 0x84
   15ba8:	ldr	r1, [fp, #-8]
   15bac:	ldr	r1, [r1, #32]
   15bb0:	strh	r0, [r1, #34]	; 0x22
   15bb4:	ldrh	r0, [fp, #-14]
   15bb8:	ldr	r1, [fp, #-8]
   15bbc:	strh	r0, [r1, #132]	; 0x84
   15bc0:	ldr	r0, [fp, #-8]
   15bc4:	ldrh	r0, [r0, #164]	; 0xa4
   15bc8:	ldr	r1, [fp, #-8]
   15bcc:	ldr	r1, [r1, #32]
   15bd0:	strh	r0, [r1, #32]
   15bd4:	ldr	r0, [sp, #12]
   15bd8:	ldr	r1, [fp, #-8]
   15bdc:	strh	r0, [r1, #164]	; 0xa4
   15be0:	ldr	r0, [fp, #-8]
   15be4:	ldr	r0, [r0, #144]	; 0x90
   15be8:	ldr	r1, [fp, #-8]
   15bec:	ldr	r1, [r1, #32]
   15bf0:	str	r0, [r1, #20]
   15bf4:	ldr	r0, [fp, #-8]
   15bf8:	ldr	r0, [r0, #152]	; 0x98
   15bfc:	ldr	r1, [fp, #-8]
   15c00:	ldr	r1, [r1, #32]
   15c04:	str	r0, [r1, #28]
   15c08:	ldr	r0, [fp, #-8]
   15c0c:	ldr	r0, [r0, #136]	; 0x88
   15c10:	ldr	r1, [fp, #-8]
   15c14:	str	r0, [r1, #144]	; 0x90
   15c18:	ldr	r0, [fp, #-8]
   15c1c:	ldr	r1, [r0, #148]	; 0x94
   15c20:	add	r2, r1, #1
   15c24:	str	r2, [r0, #148]	; 0x94
   15c28:	ldr	r0, [fp, #-8]
   15c2c:	str	r1, [r0, #152]	; 0x98
   15c30:	ldr	r0, [fp, #-8]
   15c34:	ldr	r0, [r0, #168]	; 0xa8
   15c38:	ldr	r1, [fp, #-8]
   15c3c:	ldr	r1, [r1, #32]
   15c40:	str	r0, [r1, #16]
   15c44:	ldr	r0, [fp, #-8]
   15c48:	add	r0, r0, #168	; 0xa8
   15c4c:	ldr	r1, [fp, #-12]
   15c50:	movw	r2, #0
   15c54:	cmp	r1, r2
   15c58:	str	r0, [sp, #8]
   15c5c:	beq	15c6c <flatcc_builder_start_buffer@@Base+0x118>
   15c60:	ldr	r0, [fp, #-12]
   15c64:	str	r0, [sp, #4]
   15c68:	b	15c7c <flatcc_builder_start_buffer@@Base+0x128>
   15c6c:	ldr	r0, [pc, #84]	; 15cc8 <flatcc_builder_start_buffer@@Base+0x174>
   15c70:	ldr	r0, [pc, r0]
   15c74:	str	r0, [sp, #4]
   15c78:	b	15c7c <flatcc_builder_start_buffer@@Base+0x128>
   15c7c:	ldr	r0, [sp, #4]
   15c80:	ldrb	r1, [r0]
   15c84:	ldr	r2, [sp, #8]
   15c88:	strb	r1, [r2]
   15c8c:	ldrb	r1, [r0, #1]
   15c90:	strb	r1, [r2, #1]
   15c94:	ldrb	r1, [r0, #2]
   15c98:	strb	r1, [r2, #2]
   15c9c:	ldrb	r0, [r0, #3]
   15ca0:	strb	r0, [r2, #3]
   15ca4:	ldr	r0, [fp, #-8]
   15ca8:	ldr	r0, [r0, #32]
   15cac:	movw	r1, #1
   15cb0:	strh	r1, [r0, #14]
   15cb4:	movw	r0, #0
   15cb8:	str	r0, [fp, #-4]
   15cbc:	ldr	r0, [fp, #-4]
   15cc0:	mov	sp, fp
   15cc4:	pop	{fp, pc}
   15cc8:	ldrdeq	pc, [r1], -ip
   15ccc:	push	{fp, lr}
   15cd0:	mov	fp, sp
   15cd4:	sub	sp, sp, #24
   15cd8:	str	r0, [fp, #-8]
   15cdc:	strh	r1, [fp, #-10]
   15ce0:	ldr	r0, [fp, #-8]
   15ce4:	ldr	r1, [r0, #156]	; 0x9c
   15ce8:	add	r1, r1, #1
   15cec:	str	r1, [r0, #156]	; 0x9c
   15cf0:	ldr	r0, [fp, #-8]
   15cf4:	ldr	r0, [r0, #160]	; 0xa0
   15cf8:	cmp	r1, r0
   15cfc:	ble	15de8 <flatcc_builder_start_buffer@@Base+0x294>
   15d00:	ldr	r0, [fp, #-8]
   15d04:	ldr	r0, [r0, #176]	; 0xb0
   15d08:	cmp	r0, #0
   15d0c:	ble	15d34 <flatcc_builder_start_buffer@@Base+0x1e0>
   15d10:	ldr	r0, [fp, #-8]
   15d14:	ldr	r0, [r0, #156]	; 0x9c
   15d18:	ldr	r1, [fp, #-8]
   15d1c:	ldr	r1, [r1, #176]	; 0xb0
   15d20:	cmp	r0, r1
   15d24:	ble	15d34 <flatcc_builder_start_buffer@@Base+0x1e0>
   15d28:	mvn	r0, #0
   15d2c:	str	r0, [fp, #-4]
   15d30:	b	15e8c <flatcc_builder_start_buffer@@Base+0x338>
   15d34:	ldr	r0, [fp, #-8]
   15d38:	ldr	r1, [fp, #-8]
   15d3c:	ldr	r1, [r1, #156]	; 0x9c
   15d40:	sub	r1, r1, #1
   15d44:	movw	r2, #36	; 0x24
   15d48:	mul	r1, r1, r2
   15d4c:	movw	r3, #4
   15d50:	str	r1, [sp, #8]
   15d54:	mov	r1, r3
   15d58:	ldr	r3, [sp, #8]
   15d5c:	str	r2, [sp, #4]
   15d60:	mov	r2, r3
   15d64:	ldr	r3, [sp, #4]
   15d68:	movw	ip, #0
   15d6c:	str	ip, [sp]
   15d70:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15d74:	ldr	r1, [fp, #-8]
   15d78:	str	r0, [r1, #32]
   15d7c:	movw	r1, #0
   15d80:	cmp	r0, r1
   15d84:	bne	15d94 <flatcc_builder_start_buffer@@Base+0x240>
   15d88:	mvn	r0, #0
   15d8c:	str	r0, [fp, #-4]
   15d90:	b	15e8c <flatcc_builder_start_buffer@@Base+0x338>
   15d94:	ldr	r0, [fp, #-8]
   15d98:	ldr	r0, [r0, #88]	; 0x58
   15d9c:	movw	r1, #36	; 0x24
   15da0:	udiv	r0, r0, r1
   15da4:	ldr	r1, [fp, #-8]
   15da8:	str	r0, [r1, #160]	; 0xa0
   15dac:	ldr	r0, [fp, #-8]
   15db0:	ldr	r0, [r0, #176]	; 0xb0
   15db4:	cmp	r0, #0
   15db8:	ble	15de4 <flatcc_builder_start_buffer@@Base+0x290>
   15dbc:	ldr	r0, [fp, #-8]
   15dc0:	ldr	r0, [r0, #176]	; 0xb0
   15dc4:	ldr	r1, [fp, #-8]
   15dc8:	ldr	r1, [r1, #160]	; 0xa0
   15dcc:	cmp	r0, r1
   15dd0:	bge	15de4 <flatcc_builder_start_buffer@@Base+0x290>
   15dd4:	ldr	r0, [fp, #-8]
   15dd8:	ldr	r0, [r0, #176]	; 0xb0
   15ddc:	ldr	r1, [fp, #-8]
   15de0:	str	r0, [r1, #160]	; 0xa0
   15de4:	b	15df8 <flatcc_builder_start_buffer@@Base+0x2a4>
   15de8:	ldr	r0, [fp, #-8]
   15dec:	ldr	r1, [r0, #32]
   15df0:	add	r1, r1, #36	; 0x24
   15df4:	str	r1, [r0, #32]
   15df8:	ldr	r0, [fp, #-8]
   15dfc:	ldr	r0, [r0, #20]
   15e00:	ldr	r1, [fp, #-8]
   15e04:	ldr	r1, [r1, #32]
   15e08:	str	r0, [r1, #8]
   15e0c:	ldr	r0, [fp, #-8]
   15e10:	ldrh	r0, [r0, #130]	; 0x82
   15e14:	ldr	r1, [fp, #-8]
   15e18:	ldr	r1, [r1, #32]
   15e1c:	strh	r0, [r1, #12]
   15e20:	ldrh	r0, [fp, #-10]
   15e24:	ldr	r1, [fp, #-8]
   15e28:	strh	r0, [r1, #130]	; 0x82
   15e2c:	ldr	r0, [fp, #-8]
   15e30:	ldr	r0, [r0, #28]
   15e34:	ldr	r1, [fp, #-8]
   15e38:	ldr	r1, [r1, #32]
   15e3c:	str	r0, [r1]
   15e40:	ldr	r0, [fp, #-8]
   15e44:	ldr	r0, [r0, #32]
   15e48:	mvn	r1, #3
   15e4c:	str	r1, [r0, #4]
   15e50:	ldr	r0, [fp, #-8]
   15e54:	ldr	r0, [r0, #28]
   15e58:	ldr	r1, [fp, #-8]
   15e5c:	ldr	r1, [r1, #20]
   15e60:	add	r0, r0, r1
   15e64:	add	r0, r0, #8
   15e68:	sub	r0, r0, #1
   15e6c:	mvn	r1, #7
   15e70:	and	r0, r0, r1
   15e74:	ldr	r1, [fp, #-8]
   15e78:	str	r0, [r1, #28]
   15e7c:	ldr	r0, [fp, #-8]
   15e80:	movw	r1, #0
   15e84:	str	r1, [r0, #20]
   15e88:	str	r1, [fp, #-4]
   15e8c:	ldr	r0, [fp, #-4]
   15e90:	mov	sp, fp
   15e94:	pop	{fp, pc}

00015e98 <flatcc_builder_end_buffer@@Base>:
   15e98:	push	{r4, sl, fp, lr}
   15e9c:	add	fp, sp, #8
   15ea0:	sub	sp, sp, #32
   15ea4:	str	r0, [fp, #-16]
   15ea8:	str	r1, [sp, #20]
   15eac:	ldr	r0, [fp, #-16]
   15eb0:	ldrh	r0, [r0, #164]	; 0xa4
   15eb4:	and	r0, r0, #2
   15eb8:	str	r0, [sp, #12]
   15ebc:	ldr	r0, [fp, #-16]
   15ec0:	ldr	r0, [r0, #152]	; 0x98
   15ec4:	cmp	r0, #0
   15ec8:	movw	r0, #0
   15ecc:	moveq	r0, #1
   15ed0:	tst	r0, #1
   15ed4:	movw	r0, #0
   15ed8:	moveq	r0, #1
   15edc:	ldr	r1, [sp, #12]
   15ee0:	orr	r0, r1, r0
   15ee4:	str	r0, [sp, #12]
   15ee8:	ldr	r0, [fp, #-16]
   15eec:	ldr	r0, [r0, #32]
   15ef0:	ldrh	r0, [r0, #14]
   15ef4:	cmp	r0, #1
   15ef8:	bne	15f00 <flatcc_builder_end_buffer@@Base+0x68>
   15efc:	b	15f20 <flatcc_builder_end_buffer@@Base+0x88>
   15f00:	ldr	r0, [pc, #244]	; 15ffc <flatcc_builder_end_buffer@@Base+0x164>
   15f04:	add	r0, pc, r0
   15f08:	ldr	r1, [pc, #240]	; 16000 <flatcc_builder_end_buffer@@Base+0x168>
   15f0c:	add	r1, pc, r1
   15f10:	ldr	r2, [pc, #236]	; 16004 <flatcc_builder_end_buffer@@Base+0x16c>
   15f14:	add	r3, pc, r2
   15f18:	movw	r2, #838	; 0x346
   15f1c:	bl	1298c <__assert_fail@plt>
   15f20:	ldr	r0, [fp, #-16]
   15f24:	ldr	r1, [fp, #-16]
   15f28:	ldrh	r1, [r1, #132]	; 0x84
   15f2c:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   15f30:	ldr	r0, [fp, #-16]
   15f34:	ldr	r1, [fp, #-16]
   15f38:	add	r1, r1, #168	; 0xa8
   15f3c:	ldr	lr, [fp, #-16]
   15f40:	ldrh	lr, [lr, #132]	; 0x84
   15f44:	ldr	r3, [sp, #20]
   15f48:	ldr	r2, [fp, #-16]
   15f4c:	ldrh	r2, [r2, #128]	; 0x80
   15f50:	ldr	ip, [sp, #12]
   15f54:	uxth	lr, lr
   15f58:	str	r2, [sp, #8]
   15f5c:	mov	r2, lr
   15f60:	ldr	lr, [sp, #8]
   15f64:	uxth	r4, lr
   15f68:	str	r4, [sp]
   15f6c:	str	ip, [sp, #4]
   15f70:	bl	1562c <flatcc_builder_create_buffer@@Base>
   15f74:	str	r0, [sp, #16]
   15f78:	movw	r1, #0
   15f7c:	cmp	r1, r0
   15f80:	bne	15f90 <flatcc_builder_end_buffer@@Base+0xf8>
   15f84:	movw	r0, #0
   15f88:	str	r0, [fp, #-12]
   15f8c:	b	15ff0 <flatcc_builder_end_buffer@@Base+0x158>
   15f90:	ldr	r0, [fp, #-16]
   15f94:	ldr	r0, [r0, #32]
   15f98:	ldr	r0, [r0, #20]
   15f9c:	ldr	r1, [fp, #-16]
   15fa0:	str	r0, [r1, #144]	; 0x90
   15fa4:	ldr	r0, [fp, #-16]
   15fa8:	ldr	r0, [r0, #32]
   15fac:	ldr	r0, [r0, #28]
   15fb0:	ldr	r1, [fp, #-16]
   15fb4:	str	r0, [r1, #152]	; 0x98
   15fb8:	ldr	r0, [fp, #-16]
   15fbc:	ldr	r0, [r0, #32]
   15fc0:	ldr	r0, [r0, #16]
   15fc4:	ldr	r1, [fp, #-16]
   15fc8:	str	r0, [r1, #168]	; 0xa8
   15fcc:	ldr	r0, [fp, #-16]
   15fd0:	ldr	r0, [r0, #32]
   15fd4:	ldrh	r0, [r0, #32]
   15fd8:	ldr	r1, [fp, #-16]
   15fdc:	strh	r0, [r1, #164]	; 0xa4
   15fe0:	ldr	r0, [fp, #-16]
   15fe4:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   15fe8:	ldr	r0, [sp, #16]
   15fec:	str	r0, [fp, #-12]
   15ff0:	ldr	r0, [fp, #-12]
   15ff4:	sub	sp, fp, #8
   15ff8:	pop	{r4, sl, fp, pc}
   15ffc:	andeq	ip, r0, sl, asr #15
   16000:	andeq	ip, r0, ip, ror r5
   16004:	andeq	ip, r0, r6, ror #15
   16008:	push	{fp, lr}
   1600c:	mov	fp, sp
   16010:	sub	sp, sp, #8
   16014:	str	r0, [sp, #4]
   16018:	ldr	r0, [sp, #4]
   1601c:	ldr	r0, [r0, #16]
   16020:	ldr	r1, [sp, #4]
   16024:	ldr	r2, [r1, #20]
   16028:	movw	r1, #0
   1602c:	and	r1, r1, #255	; 0xff
   16030:	bl	1295c <memset@plt>
   16034:	ldr	r0, [sp, #4]
   16038:	ldr	r0, [r0, #32]
   1603c:	ldr	r0, [r0, #8]
   16040:	ldr	r1, [sp, #4]
   16044:	str	r0, [r1, #20]
   16048:	ldr	r0, [sp, #4]
   1604c:	ldr	r0, [r0, #32]
   16050:	ldr	r0, [r0]
   16054:	ldr	r1, [sp, #4]
   16058:	str	r0, [r1, #28]
   1605c:	ldr	r0, [sp, #4]
   16060:	ldr	r1, [sp, #4]
   16064:	ldr	r1, [r1, #32]
   16068:	ldr	r1, [r1, #4]
   1606c:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   16070:	ldr	r0, [sp, #4]
   16074:	ldr	r1, [sp, #4]
   16078:	ldrh	r1, [r1, #130]	; 0x82
   1607c:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   16080:	ldr	r0, [sp, #4]
   16084:	ldr	r0, [r0, #32]
   16088:	ldrh	r0, [r0, #12]
   1608c:	ldr	r1, [sp, #4]
   16090:	strh	r0, [r1, #130]	; 0x82
   16094:	ldr	r0, [sp, #4]
   16098:	ldr	r1, [r0, #32]
   1609c:	mvn	r2, #35	; 0x23
   160a0:	add	r1, r1, r2
   160a4:	str	r1, [r0, #32]
   160a8:	ldr	r0, [sp, #4]
   160ac:	ldr	r1, [r0, #156]	; 0x9c
   160b0:	mvn	r2, #0
   160b4:	add	r1, r1, r2
   160b8:	str	r1, [r0, #156]	; 0x9c
   160bc:	mov	sp, fp
   160c0:	pop	{fp, pc}

000160c4 <flatcc_builder_start_struct@@Base>:
   160c4:	push	{fp, lr}
   160c8:	mov	fp, sp
   160cc:	sub	sp, sp, #16
   160d0:	str	r0, [sp, #8]
   160d4:	str	r1, [sp, #4]
   160d8:	strh	r2, [sp, #2]
   160dc:	ldr	r0, [sp, #8]
   160e0:	ldrh	r1, [sp, #2]
   160e4:	bl	15ccc <flatcc_builder_start_buffer@@Base+0x178>
   160e8:	cmp	r0, #0
   160ec:	beq	160fc <flatcc_builder_start_struct@@Base+0x38>
   160f0:	movw	r0, #0
   160f4:	str	r0, [fp, #-4]
   160f8:	b	16128 <flatcc_builder_start_struct@@Base+0x64>
   160fc:	ldr	r0, [sp, #8]
   16100:	ldr	r0, [r0, #32]
   16104:	movw	r1, #2
   16108:	strh	r1, [r0, #14]
   1610c:	ldr	r0, [sp, #8]
   16110:	mvn	r1, #3
   16114:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   16118:	ldr	r0, [sp, #8]
   1611c:	ldr	r1, [sp, #4]
   16120:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   16124:	str	r0, [fp, #-4]
   16128:	ldr	r0, [fp, #-4]
   1612c:	mov	sp, fp
   16130:	pop	{fp, pc}
   16134:	sub	sp, sp, #12
   16138:	str	r0, [sp, #8]
   1613c:	str	r1, [sp, #4]
   16140:	ldr	r0, [sp, #8]
   16144:	add	r0, r0, #52	; 0x34
   16148:	add	r0, r0, #8
   1614c:	str	r0, [sp]
   16150:	ldr	r0, [sp, #8]
   16154:	ldr	r0, [r0, #60]	; 0x3c
   16158:	ldr	r1, [sp, #8]
   1615c:	ldr	r1, [r1, #28]
   16160:	add	r0, r0, r1
   16164:	ldr	r1, [sp, #8]
   16168:	str	r0, [r1, #16]
   1616c:	ldr	r0, [sp]
   16170:	ldr	r0, [r0, #4]
   16174:	ldr	r1, [sp, #8]
   16178:	ldr	r1, [r1, #28]
   1617c:	sub	r0, r0, r1
   16180:	ldr	r1, [sp, #8]
   16184:	str	r0, [r1, #24]
   16188:	ldr	r0, [sp, #8]
   1618c:	ldr	r0, [r0, #24]
   16190:	ldr	r1, [sp, #4]
   16194:	cmp	r0, r1
   16198:	bls	161a8 <flatcc_builder_start_struct@@Base+0xe4>
   1619c:	ldr	r0, [sp, #4]
   161a0:	ldr	r1, [sp, #8]
   161a4:	str	r0, [r1, #24]
   161a8:	ldr	r0, [sp, #4]
   161ac:	ldr	r1, [sp, #8]
   161b0:	ldr	r1, [r1, #32]
   161b4:	str	r0, [r1, #4]
   161b8:	add	sp, sp, #12
   161bc:	bx	lr
   161c0:	push	{fp, lr}
   161c4:	mov	fp, sp
   161c8:	sub	sp, sp, #16
   161cc:	str	r0, [sp, #8]
   161d0:	str	r1, [sp, #4]
   161d4:	ldr	r0, [sp, #8]
   161d8:	ldr	r0, [r0, #20]
   161dc:	str	r0, [sp]
   161e0:	ldr	r0, [sp, #4]
   161e4:	ldr	r1, [sp, #8]
   161e8:	ldr	r2, [r1, #20]
   161ec:	add	r0, r2, r0
   161f0:	str	r0, [r1, #20]
   161f4:	ldr	r1, [sp, #8]
   161f8:	ldr	r1, [r1, #24]
   161fc:	cmp	r0, r1
   16200:	bcc	16234 <flatcc_builder_start_struct@@Base+0x170>
   16204:	ldr	r0, [sp, #8]
   16208:	ldr	r1, [sp, #8]
   1620c:	ldr	r1, [r1, #20]
   16210:	add	r1, r1, #1
   16214:	mvn	r2, #3
   16218:	bl	1a330 <flatcc_builder_get_emit_context@@Base+0x40>
   1621c:	cmp	r0, #0
   16220:	beq	16230 <flatcc_builder_start_struct@@Base+0x16c>
   16224:	movw	r0, #0
   16228:	str	r0, [fp, #-4]
   1622c:	b	16248 <flatcc_builder_start_struct@@Base+0x184>
   16230:	b	16234 <flatcc_builder_start_struct@@Base+0x170>
   16234:	ldr	r0, [sp, #8]
   16238:	ldr	r0, [r0, #16]
   1623c:	ldr	r1, [sp]
   16240:	add	r0, r0, r1
   16244:	str	r0, [fp, #-4]
   16248:	ldr	r0, [fp, #-4]
   1624c:	mov	sp, fp
   16250:	pop	{fp, pc}

00016254 <flatcc_builder_struct_edit@@Base>:
   16254:	sub	sp, sp, #4
   16258:	str	r0, [sp]
   1625c:	ldr	r0, [sp]
   16260:	ldr	r0, [r0, #16]
   16264:	add	sp, sp, #4
   16268:	bx	lr

0001626c <flatcc_builder_end_struct@@Base>:
   1626c:	push	{fp, lr}
   16270:	mov	fp, sp
   16274:	sub	sp, sp, #16
   16278:	str	r0, [sp, #8]
   1627c:	ldr	r0, [sp, #8]
   16280:	ldr	r0, [r0, #32]
   16284:	ldrh	r0, [r0, #14]
   16288:	cmp	r0, #2
   1628c:	bne	16294 <flatcc_builder_end_struct@@Base+0x28>
   16290:	b	162b4 <flatcc_builder_end_struct@@Base+0x48>
   16294:	ldr	r0, [pc, #112]	; 1630c <flatcc_builder_end_struct@@Base+0xa0>
   16298:	add	r0, pc, r0
   1629c:	ldr	r1, [pc, #108]	; 16310 <flatcc_builder_end_struct@@Base+0xa4>
   162a0:	add	r1, pc, r1
   162a4:	ldr	r2, [pc, #104]	; 16314 <flatcc_builder_end_struct@@Base+0xa8>
   162a8:	add	r3, pc, r2
   162ac:	movw	r2, #872	; 0x368
   162b0:	bl	1298c <__assert_fail@plt>
   162b4:	ldr	r0, [sp, #8]
   162b8:	ldr	r1, [sp, #8]
   162bc:	ldr	r1, [r1, #16]
   162c0:	ldr	r2, [sp, #8]
   162c4:	ldr	r2, [r2, #20]
   162c8:	ldr	r3, [sp, #8]
   162cc:	ldrh	r3, [r3, #130]	; 0x82
   162d0:	bl	15a1c <flatcc_builder_create_struct@@Base>
   162d4:	str	r0, [sp, #4]
   162d8:	movw	r1, #0
   162dc:	cmp	r1, r0
   162e0:	bne	162f0 <flatcc_builder_end_struct@@Base+0x84>
   162e4:	movw	r0, #0
   162e8:	str	r0, [fp, #-4]
   162ec:	b	16300 <flatcc_builder_end_struct@@Base+0x94>
   162f0:	ldr	r0, [sp, #8]
   162f4:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   162f8:	ldr	r0, [sp, #4]
   162fc:	str	r0, [fp, #-4]
   16300:	ldr	r0, [fp, #-4]
   16304:	mov	sp, fp
   16308:	pop	{fp, pc}
   1630c:			; <UNDEFINED> instruction: 0x0000c4bb
   16310:	andeq	ip, r0, r8, ror #3
   16314:	ldrdeq	ip, [r0], -r7

00016318 <flatcc_builder_extend_vector@@Base>:
   16318:	push	{fp, lr}
   1631c:	mov	fp, sp
   16320:	sub	sp, sp, #16
   16324:	str	r0, [sp, #8]
   16328:	str	r1, [sp, #4]
   1632c:	ldr	r0, [sp, #8]
   16330:	ldr	r1, [sp, #4]
   16334:	ldr	r2, [sp, #8]
   16338:	ldr	r2, [r2, #32]
   1633c:	ldr	r2, [r2, #24]
   16340:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   16344:	cmp	r0, #0
   16348:	beq	16358 <flatcc_builder_extend_vector@@Base+0x40>
   1634c:	movw	r0, #0
   16350:	str	r0, [fp, #-4]
   16354:	b	16378 <flatcc_builder_extend_vector@@Base+0x60>
   16358:	ldr	r0, [sp, #8]
   1635c:	ldr	r1, [sp, #8]
   16360:	ldr	r1, [r1, #32]
   16364:	ldr	r1, [r1, #16]
   16368:	ldr	r2, [sp, #4]
   1636c:	mul	r1, r1, r2
   16370:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   16374:	str	r0, [fp, #-4]
   16378:	ldr	r0, [fp, #-4]
   1637c:	mov	sp, fp
   16380:	pop	{fp, pc}
   16384:	push	{fp, lr}
   16388:	mov	fp, sp
   1638c:	sub	sp, sp, #24
   16390:	str	r0, [fp, #-8]
   16394:	str	r1, [sp, #12]
   16398:	str	r2, [sp, #8]
   1639c:	ldr	r0, [fp, #-8]
   163a0:	ldr	r0, [r0, #32]
   163a4:	ldr	r0, [r0, #20]
   163a8:	str	r0, [sp, #4]
   163ac:	ldr	r0, [sp, #4]
   163b0:	ldr	r1, [sp, #12]
   163b4:	add	r0, r0, r1
   163b8:	str	r0, [sp]
   163bc:	ldr	r0, [sp, #4]
   163c0:	ldr	r1, [sp]
   163c4:	cmp	r0, r1
   163c8:	bhi	163dc <flatcc_builder_extend_vector@@Base+0xc4>
   163cc:	ldr	r0, [sp]
   163d0:	ldr	r1, [sp, #8]
   163d4:	cmp	r0, r1
   163d8:	bls	1642c <flatcc_builder_extend_vector@@Base+0x114>
   163dc:	ldr	r0, [sp, #4]
   163e0:	ldr	r1, [sp]
   163e4:	cmp	r0, r1
   163e8:	bhi	16400 <flatcc_builder_extend_vector@@Base+0xe8>
   163ec:	ldr	r0, [sp]
   163f0:	ldr	r1, [sp, #8]
   163f4:	cmp	r0, r1
   163f8:	bhi	16400 <flatcc_builder_extend_vector@@Base+0xe8>
   163fc:	b	16420 <flatcc_builder_extend_vector@@Base+0x108>
   16400:	ldr	r0, [pc, #72]	; 16450 <flatcc_builder_extend_vector@@Base+0x138>
   16404:	add	r0, pc, r0
   16408:	ldr	r1, [pc, #68]	; 16454 <flatcc_builder_extend_vector@@Base+0x13c>
   1640c:	add	r1, pc, r1
   16410:	ldr	r2, [pc, #64]	; 16458 <flatcc_builder_extend_vector@@Base+0x140>
   16414:	add	r3, pc, r2
   16418:	movw	r2, #892	; 0x37c
   1641c:	bl	1298c <__assert_fail@plt>
   16420:	mvn	r0, #0
   16424:	str	r0, [fp, #-4]
   16428:	b	16444 <flatcc_builder_extend_vector@@Base+0x12c>
   1642c:	ldr	r0, [sp]
   16430:	ldr	r1, [fp, #-8]
   16434:	ldr	r1, [r1, #32]
   16438:	str	r0, [r1, #20]
   1643c:	movw	r0, #0
   16440:	str	r0, [fp, #-4]
   16444:	ldr	r0, [fp, #-4]
   16448:	mov	sp, fp
   1644c:	pop	{fp, pc}
   16450:	andeq	sp, r0, sl, asr #2
   16454:	andeq	ip, r0, ip, ror r0
   16458:	andeq	sp, r0, r5, asr r1

0001645c <flatcc_builder_vector_push@@Base>:
   1645c:	push	{fp, lr}
   16460:	mov	fp, sp
   16464:	sub	sp, sp, #16
   16468:	str	r0, [sp, #8]
   1646c:	str	r1, [sp, #4]
   16470:	ldr	r0, [sp, #8]
   16474:	ldr	r0, [r0, #32]
   16478:	ldrh	r0, [r0, #14]
   1647c:	cmp	r0, #4
   16480:	bne	16488 <flatcc_builder_vector_push@@Base+0x2c>
   16484:	b	164a8 <flatcc_builder_vector_push@@Base+0x4c>
   16488:	ldr	r0, [pc, #196]	; 16554 <flatcc_builder_vector_push@@Base+0xf8>
   1648c:	add	r0, pc, r0
   16490:	ldr	r1, [pc, #192]	; 16558 <flatcc_builder_vector_push@@Base+0xfc>
   16494:	add	r1, pc, r1
   16498:	ldr	r2, [pc, #188]	; 1655c <flatcc_builder_vector_push@@Base+0x100>
   1649c:	add	r3, pc, r2
   164a0:	movw	r2, #907	; 0x38b
   164a4:	bl	1298c <__assert_fail@plt>
   164a8:	ldr	r0, [sp, #8]
   164ac:	ldr	r0, [r0, #32]
   164b0:	ldr	r0, [r0, #20]
   164b4:	ldr	r1, [sp, #8]
   164b8:	ldr	r1, [r1, #32]
   164bc:	ldr	r1, [r1, #24]
   164c0:	cmp	r0, r1
   164c4:	bls	16518 <flatcc_builder_vector_push@@Base+0xbc>
   164c8:	ldr	r0, [sp, #8]
   164cc:	ldr	r0, [r0, #32]
   164d0:	ldr	r0, [r0, #20]
   164d4:	ldr	r1, [sp, #8]
   164d8:	ldr	r1, [r1, #32]
   164dc:	ldr	r1, [r1, #24]
   164e0:	cmp	r0, r1
   164e4:	bhi	164ec <flatcc_builder_vector_push@@Base+0x90>
   164e8:	b	1650c <flatcc_builder_vector_push@@Base+0xb0>
   164ec:	ldr	r0, [pc, #108]	; 16560 <flatcc_builder_vector_push@@Base+0x104>
   164f0:	add	r0, pc, r0
   164f4:	ldr	r1, [pc, #104]	; 16564 <flatcc_builder_vector_push@@Base+0x108>
   164f8:	add	r1, pc, r1
   164fc:	ldr	r2, [pc, #100]	; 16568 <flatcc_builder_vector_push@@Base+0x10c>
   16500:	add	r3, pc, r2
   16504:	movw	r2, #908	; 0x38c
   16508:	bl	1298c <__assert_fail@plt>
   1650c:	movw	r0, #0
   16510:	str	r0, [fp, #-4]
   16514:	b	16548 <flatcc_builder_vector_push@@Base+0xec>
   16518:	ldr	r0, [sp, #8]
   1651c:	ldr	r0, [r0, #32]
   16520:	ldr	r1, [r0, #20]
   16524:	add	r1, r1, #1
   16528:	str	r1, [r0, #20]
   1652c:	ldr	r0, [sp, #8]
   16530:	ldr	r1, [sp, #4]
   16534:	ldr	r2, [sp, #8]
   16538:	ldr	r2, [r2, #32]
   1653c:	ldr	r2, [r2, #16]
   16540:	bl	1656c <flatcc_builder_vector_push@@Base+0x110>
   16544:	str	r0, [fp, #-4]
   16548:	ldr	r0, [fp, #-4]
   1654c:	mov	sp, fp
   16550:	pop	{fp, pc}
   16554:	andeq	ip, r0, r6, lsr r3
   16558:	strdeq	fp, [r0], -r4
   1655c:	andeq	ip, r0, r2, asr r3
   16560:	andeq	ip, r0, r1, asr #6
   16564:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   16568:	andeq	ip, r0, lr, ror #5
   1656c:	push	{fp, lr}
   16570:	mov	fp, sp
   16574:	sub	sp, sp, #24
   16578:	str	r0, [fp, #-8]
   1657c:	str	r1, [sp, #12]
   16580:	str	r2, [sp, #8]
   16584:	ldr	r0, [fp, #-8]
   16588:	ldr	r1, [sp, #8]
   1658c:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   16590:	str	r0, [sp, #4]
   16594:	movw	r1, #0
   16598:	cmp	r0, r1
   1659c:	bne	165ac <flatcc_builder_vector_push@@Base+0x150>
   165a0:	movw	r0, #0
   165a4:	str	r0, [fp, #-4]
   165a8:	b	165c4 <flatcc_builder_vector_push@@Base+0x168>
   165ac:	ldr	r0, [sp, #4]
   165b0:	ldr	r1, [sp, #12]
   165b4:	ldr	r2, [sp, #8]
   165b8:	bl	128d8 <memcpy@plt>
   165bc:	ldr	r0, [sp, #4]
   165c0:	str	r0, [fp, #-4]
   165c4:	ldr	r0, [fp, #-4]
   165c8:	mov	sp, fp
   165cc:	pop	{fp, pc}

000165d0 <flatcc_builder_append_vector@@Base>:
   165d0:	push	{fp, lr}
   165d4:	mov	fp, sp
   165d8:	sub	sp, sp, #16
   165dc:	str	r0, [sp, #8]
   165e0:	str	r1, [sp, #4]
   165e4:	str	r2, [sp]
   165e8:	ldr	r0, [sp, #8]
   165ec:	ldr	r0, [r0, #32]
   165f0:	ldrh	r0, [r0, #14]
   165f4:	cmp	r0, #4
   165f8:	bne	16600 <flatcc_builder_append_vector@@Base+0x30>
   165fc:	b	16620 <flatcc_builder_append_vector@@Base+0x50>
   16600:	ldr	r0, [pc, #116]	; 1667c <flatcc_builder_append_vector@@Base+0xac>
   16604:	add	r0, pc, r0
   16608:	ldr	r1, [pc, #112]	; 16680 <flatcc_builder_append_vector@@Base+0xb0>
   1660c:	add	r1, pc, r1
   16610:	ldr	r2, [pc, #108]	; 16684 <flatcc_builder_append_vector@@Base+0xb4>
   16614:	add	r3, pc, r2
   16618:	movw	r2, #915	; 0x393
   1661c:	bl	1298c <__assert_fail@plt>
   16620:	ldr	r0, [sp, #8]
   16624:	ldr	r1, [sp]
   16628:	ldr	r2, [sp, #8]
   1662c:	ldr	r2, [r2, #32]
   16630:	ldr	r2, [r2, #24]
   16634:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   16638:	cmp	r0, #0
   1663c:	beq	1664c <flatcc_builder_append_vector@@Base+0x7c>
   16640:	movw	r0, #0
   16644:	str	r0, [fp, #-4]
   16648:	b	16670 <flatcc_builder_append_vector@@Base+0xa0>
   1664c:	ldr	r0, [sp, #8]
   16650:	ldr	r1, [sp, #4]
   16654:	ldr	r2, [sp, #8]
   16658:	ldr	r2, [r2, #32]
   1665c:	ldr	r2, [r2, #16]
   16660:	ldr	r3, [sp]
   16664:	mul	r2, r2, r3
   16668:	bl	1656c <flatcc_builder_vector_push@@Base+0x110>
   1666c:	str	r0, [fp, #-4]
   16670:	ldr	r0, [fp, #-4]
   16674:	mov	sp, fp
   16678:	pop	{fp, pc}
   1667c:			; <UNDEFINED> instruction: 0x0000c1be
   16680:	andeq	fp, r0, ip, ror lr
   16684:	andeq	ip, r0, sl, asr r2

00016688 <flatcc_builder_extend_offset_vector@@Base>:
   16688:	push	{fp, lr}
   1668c:	mov	fp, sp
   16690:	sub	sp, sp, #16
   16694:	ldr	r2, [pc, #68]	; 166e0 <flatcc_builder_extend_offset_vector@@Base+0x58>
   16698:	str	r0, [sp, #8]
   1669c:	str	r1, [sp, #4]
   166a0:	ldr	r0, [sp, #8]
   166a4:	ldr	r1, [sp, #4]
   166a8:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   166ac:	cmp	r0, #0
   166b0:	beq	166c0 <flatcc_builder_extend_offset_vector@@Base+0x38>
   166b4:	movw	r0, #0
   166b8:	str	r0, [fp, #-4]
   166bc:	b	166d4 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   166c0:	ldr	r0, [sp, #8]
   166c4:	ldr	r1, [sp, #4]
   166c8:	lsl	r1, r1, #2
   166cc:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   166d0:	str	r0, [fp, #-4]
   166d4:	ldr	r0, [fp, #-4]
   166d8:	mov	sp, fp
   166dc:	pop	{fp, pc}
   166e0:	svccc	0x00ffffff

000166e4 <flatcc_builder_offset_vector_push@@Base>:
   166e4:	push	{fp, lr}
   166e8:	mov	fp, sp
   166ec:	sub	sp, sp, #16
   166f0:	str	r0, [sp, #8]
   166f4:	str	r1, [sp, #4]
   166f8:	ldr	r0, [sp, #8]
   166fc:	ldr	r0, [r0, #32]
   16700:	ldrh	r0, [r0, #14]
   16704:	cmp	r0, #5
   16708:	bne	16710 <flatcc_builder_offset_vector_push@@Base+0x2c>
   1670c:	b	16730 <flatcc_builder_offset_vector_push@@Base+0x4c>
   16710:	ldr	r0, [pc, #152]	; 167b0 <flatcc_builder_offset_vector_push@@Base+0xcc>
   16714:	add	r0, pc, r0
   16718:	ldr	r1, [pc, #148]	; 167b4 <flatcc_builder_offset_vector_push@@Base+0xd0>
   1671c:	add	r1, pc, r1
   16720:	ldr	r2, [pc, #144]	; 167b8 <flatcc_builder_offset_vector_push@@Base+0xd4>
   16724:	add	r3, pc, r2
   16728:	movw	r2, #934	; 0x3a6
   1672c:	bl	1298c <__assert_fail@plt>
   16730:	ldr	r0, [pc, #132]	; 167bc <flatcc_builder_offset_vector_push@@Base+0xd8>
   16734:	ldr	r1, [sp, #8]
   16738:	ldr	r1, [r1, #32]
   1673c:	ldr	r1, [r1, #20]
   16740:	cmp	r1, r0
   16744:	bne	16754 <flatcc_builder_offset_vector_push@@Base+0x70>
   16748:	movw	r0, #0
   1674c:	str	r0, [fp, #-4]
   16750:	b	167a4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   16754:	ldr	r0, [sp, #8]
   16758:	ldr	r0, [r0, #32]
   1675c:	ldr	r1, [r0, #20]
   16760:	add	r1, r1, #1
   16764:	str	r1, [r0, #20]
   16768:	ldr	r0, [sp, #8]
   1676c:	movw	r1, #4
   16770:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   16774:	str	r0, [sp]
   16778:	movw	r1, #0
   1677c:	cmp	r1, r0
   16780:	bne	16790 <flatcc_builder_offset_vector_push@@Base+0xac>
   16784:	movw	r0, #0
   16788:	str	r0, [fp, #-4]
   1678c:	b	167a4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   16790:	ldr	r0, [sp, #4]
   16794:	ldr	r1, [sp]
   16798:	str	r0, [r1]
   1679c:	ldr	r0, [sp]
   167a0:	str	r0, [fp, #-4]
   167a4:	ldr	r0, [fp, #-4]
   167a8:	mov	sp, fp
   167ac:	pop	{fp, pc}
   167b0:	andeq	ip, r0, r7, lsr #3
   167b4:	andeq	fp, r0, ip, ror #26
   167b8:	andeq	ip, r0, sl, asr #3
   167bc:	svccc	0x00ffffff

000167c0 <flatcc_builder_append_offset_vector@@Base>:
   167c0:	push	{fp, lr}
   167c4:	mov	fp, sp
   167c8:	sub	sp, sp, #16
   167cc:	str	r0, [sp, #8]
   167d0:	str	r1, [sp, #4]
   167d4:	str	r2, [sp]
   167d8:	ldr	r0, [sp, #8]
   167dc:	ldr	r0, [r0, #32]
   167e0:	ldrh	r0, [r0, #14]
   167e4:	cmp	r0, #5
   167e8:	bne	167f0 <flatcc_builder_append_offset_vector@@Base+0x30>
   167ec:	b	16810 <flatcc_builder_append_offset_vector@@Base+0x50>
   167f0:	ldr	r0, [pc, #96]	; 16858 <flatcc_builder_append_offset_vector@@Base+0x98>
   167f4:	add	r0, pc, r0
   167f8:	ldr	r1, [pc, #92]	; 1685c <flatcc_builder_append_offset_vector@@Base+0x9c>
   167fc:	add	r1, pc, r1
   16800:	ldr	r2, [pc, #88]	; 16860 <flatcc_builder_append_offset_vector@@Base+0xa0>
   16804:	add	r3, pc, r2
   16808:	movw	r2, #948	; 0x3b4
   1680c:	bl	1298c <__assert_fail@plt>
   16810:	ldr	r2, [pc, #76]	; 16864 <flatcc_builder_append_offset_vector@@Base+0xa4>
   16814:	ldr	r0, [sp, #8]
   16818:	ldr	r1, [sp]
   1681c:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   16820:	cmp	r0, #0
   16824:	beq	16834 <flatcc_builder_append_offset_vector@@Base+0x74>
   16828:	movw	r0, #0
   1682c:	str	r0, [fp, #-4]
   16830:	b	1684c <flatcc_builder_append_offset_vector@@Base+0x8c>
   16834:	ldr	r0, [sp, #8]
   16838:	ldr	r1, [sp, #4]
   1683c:	ldr	r2, [sp]
   16840:	lsl	r2, r2, #2
   16844:	bl	1656c <flatcc_builder_vector_push@@Base+0x110>
   16848:	str	r0, [fp, #-4]
   1684c:	ldr	r0, [fp, #-4]
   16850:	mov	sp, fp
   16854:	pop	{fp, pc}
   16858:	andeq	ip, r0, r7, asr #1
   1685c:	andeq	fp, r0, ip, lsl #25
   16860:	andeq	ip, r0, ip, asr #2
   16864:	svccc	0x00ffffff

00016868 <flatcc_builder_extend_string@@Base>:
   16868:	push	{fp, lr}
   1686c:	mov	fp, sp
   16870:	sub	sp, sp, #16
   16874:	str	r0, [sp, #8]
   16878:	str	r1, [sp, #4]
   1687c:	ldr	r0, [sp, #8]
   16880:	ldr	r0, [r0, #32]
   16884:	ldrh	r0, [r0, #14]
   16888:	cmp	r0, #6
   1688c:	bne	16894 <flatcc_builder_extend_string@@Base+0x2c>
   16890:	b	168b4 <flatcc_builder_extend_string@@Base+0x4c>
   16894:	ldr	r0, [pc, #88]	; 168f4 <flatcc_builder_extend_string@@Base+0x8c>
   16898:	add	r0, pc, r0
   1689c:	ldr	r1, [pc, #84]	; 168f8 <flatcc_builder_extend_string@@Base+0x90>
   168a0:	add	r1, pc, r1
   168a4:	ldr	r2, [pc, #80]	; 168fc <flatcc_builder_extend_string@@Base+0x94>
   168a8:	add	r3, pc, r2
   168ac:	movw	r2, #957	; 0x3bd
   168b0:	bl	1298c <__assert_fail@plt>
   168b4:	ldr	r0, [sp, #8]
   168b8:	ldr	r1, [sp, #4]
   168bc:	mvn	r2, #0
   168c0:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   168c4:	cmp	r0, #0
   168c8:	beq	168d8 <flatcc_builder_extend_string@@Base+0x70>
   168cc:	movw	r0, #0
   168d0:	str	r0, [fp, #-4]
   168d4:	b	168e8 <flatcc_builder_extend_string@@Base+0x80>
   168d8:	ldr	r0, [sp, #8]
   168dc:	ldr	r1, [sp, #4]
   168e0:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   168e4:	str	r0, [fp, #-4]
   168e8:	ldr	r0, [fp, #-4]
   168ec:	mov	sp, fp
   168f0:	pop	{fp, pc}
   168f4:	andeq	ip, r0, ip, lsr #2
   168f8:	andeq	fp, r0, r8, ror #23
   168fc:	andeq	ip, r0, r8, asr #2

00016900 <flatcc_builder_append_string@@Base>:
   16900:	push	{fp, lr}
   16904:	mov	fp, sp
   16908:	sub	sp, sp, #16
   1690c:	str	r0, [sp, #8]
   16910:	str	r1, [sp, #4]
   16914:	str	r2, [sp]
   16918:	ldr	r0, [sp, #8]
   1691c:	ldr	r0, [r0, #32]
   16920:	ldrh	r0, [r0, #14]
   16924:	cmp	r0, #6
   16928:	bne	16930 <flatcc_builder_append_string@@Base+0x30>
   1692c:	b	16950 <flatcc_builder_append_string@@Base+0x50>
   16930:	ldr	r0, [pc, #92]	; 16994 <flatcc_builder_append_string@@Base+0x94>
   16934:	add	r0, pc, r0
   16938:	ldr	r1, [pc, #88]	; 16998 <flatcc_builder_append_string@@Base+0x98>
   1693c:	add	r1, pc, r1
   16940:	ldr	r2, [pc, #84]	; 1699c <flatcc_builder_append_string@@Base+0x9c>
   16944:	add	r3, pc, r2
   16948:	movw	r2, #966	; 0x3c6
   1694c:	bl	1298c <__assert_fail@plt>
   16950:	ldr	r0, [sp, #8]
   16954:	ldr	r1, [sp]
   16958:	mvn	r2, #0
   1695c:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   16960:	cmp	r0, #0
   16964:	beq	16974 <flatcc_builder_append_string@@Base+0x74>
   16968:	movw	r0, #0
   1696c:	str	r0, [fp, #-4]
   16970:	b	16988 <flatcc_builder_append_string@@Base+0x88>
   16974:	ldr	r0, [sp, #8]
   16978:	ldr	r1, [sp, #4]
   1697c:	ldr	r2, [sp]
   16980:	bl	1656c <flatcc_builder_vector_push@@Base+0x110>
   16984:	str	r0, [fp, #-4]
   16988:	ldr	r0, [fp, #-4]
   1698c:	mov	sp, fp
   16990:	pop	{fp, pc}
   16994:	muleq	r0, r0, r0
   16998:	andeq	fp, r0, ip, asr #22
   1699c:	andeq	ip, r0, fp, ror #1

000169a0 <flatcc_builder_append_string_str@@Base>:
   169a0:	push	{fp, lr}
   169a4:	mov	fp, sp
   169a8:	sub	sp, sp, #24
   169ac:	str	r0, [fp, #-4]
   169b0:	str	r1, [fp, #-8]
   169b4:	ldr	r0, [fp, #-4]
   169b8:	ldr	r1, [fp, #-8]
   169bc:	ldr	r2, [fp, #-8]
   169c0:	str	r0, [sp, #12]
   169c4:	mov	r0, r2
   169c8:	str	r1, [sp, #8]
   169cc:	bl	12938 <strlen@plt>
   169d0:	ldr	r1, [sp, #12]
   169d4:	str	r0, [sp, #4]
   169d8:	mov	r0, r1
   169dc:	ldr	r1, [sp, #8]
   169e0:	ldr	r2, [sp, #4]
   169e4:	bl	16900 <flatcc_builder_append_string@@Base>
   169e8:	mov	sp, fp
   169ec:	pop	{fp, pc}

000169f0 <flatcc_builder_append_string_strn@@Base>:
   169f0:	push	{fp, lr}
   169f4:	mov	fp, sp
   169f8:	sub	sp, sp, #24
   169fc:	str	r0, [fp, #-4]
   16a00:	str	r1, [fp, #-8]
   16a04:	str	r2, [sp, #12]
   16a08:	ldr	r0, [fp, #-4]
   16a0c:	ldr	r1, [fp, #-8]
   16a10:	ldr	r2, [fp, #-8]
   16a14:	ldr	r3, [sp, #12]
   16a18:	str	r0, [sp, #8]
   16a1c:	mov	r0, r2
   16a20:	str	r1, [sp, #4]
   16a24:	mov	r1, r3
   16a28:	bl	16a4c <flatcc_builder_append_string_strn@@Base+0x5c>
   16a2c:	ldr	r1, [sp, #8]
   16a30:	str	r0, [sp]
   16a34:	mov	r0, r1
   16a38:	ldr	r1, [sp, #4]
   16a3c:	ldr	r2, [sp]
   16a40:	bl	16900 <flatcc_builder_append_string@@Base>
   16a44:	mov	sp, fp
   16a48:	pop	{fp, pc}
   16a4c:	push	{fp, lr}
   16a50:	mov	fp, sp
   16a54:	sub	sp, sp, #16
   16a58:	str	r0, [fp, #-4]
   16a5c:	str	r1, [sp, #8]
   16a60:	ldr	r0, [fp, #-4]
   16a64:	ldr	r2, [sp, #8]
   16a68:	mov	r1, #0
   16a6c:	bl	12974 <memchr@plt>
   16a70:	str	r0, [sp, #4]
   16a74:	ldr	r0, [sp, #4]
   16a78:	movw	r1, #0
   16a7c:	cmp	r0, r1
   16a80:	beq	16a98 <flatcc_builder_append_string_strn@@Base+0xa8>
   16a84:	ldr	r0, [sp, #4]
   16a88:	ldr	r1, [fp, #-4]
   16a8c:	sub	r0, r0, r1
   16a90:	str	r0, [sp]
   16a94:	b	16aa0 <flatcc_builder_append_string_strn@@Base+0xb0>
   16a98:	ldr	r0, [sp, #8]
   16a9c:	str	r0, [sp]
   16aa0:	ldr	r0, [sp]
   16aa4:	mov	sp, fp
   16aa8:	pop	{fp, pc}

00016aac <flatcc_builder_truncate_vector@@Base>:
   16aac:	push	{fp, lr}
   16ab0:	mov	fp, sp
   16ab4:	sub	sp, sp, #16
   16ab8:	str	r0, [sp, #8]
   16abc:	str	r1, [sp, #4]
   16ac0:	ldr	r0, [sp, #8]
   16ac4:	ldr	r0, [r0, #32]
   16ac8:	ldrh	r0, [r0, #14]
   16acc:	cmp	r0, #4
   16ad0:	bne	16ad8 <flatcc_builder_truncate_vector@@Base+0x2c>
   16ad4:	b	16af8 <flatcc_builder_truncate_vector@@Base+0x4c>
   16ad8:	ldr	r0, [pc, #192]	; 16ba0 <flatcc_builder_truncate_vector@@Base+0xf4>
   16adc:	add	r0, pc, r0
   16ae0:	ldr	r1, [pc, #188]	; 16ba4 <flatcc_builder_truncate_vector@@Base+0xf8>
   16ae4:	add	r1, pc, r1
   16ae8:	ldr	r2, [pc, #184]	; 16ba8 <flatcc_builder_truncate_vector@@Base+0xfc>
   16aec:	add	r3, pc, r2
   16af0:	movw	r2, #985	; 0x3d9
   16af4:	bl	1298c <__assert_fail@plt>
   16af8:	ldr	r0, [sp, #8]
   16afc:	ldr	r0, [r0, #32]
   16b00:	ldr	r0, [r0, #20]
   16b04:	ldr	r1, [sp, #4]
   16b08:	cmp	r0, r1
   16b0c:	bcs	16b58 <flatcc_builder_truncate_vector@@Base+0xac>
   16b10:	ldr	r0, [sp, #8]
   16b14:	ldr	r0, [r0, #32]
   16b18:	ldr	r0, [r0, #20]
   16b1c:	ldr	r1, [sp, #4]
   16b20:	cmp	r0, r1
   16b24:	bcc	16b2c <flatcc_builder_truncate_vector@@Base+0x80>
   16b28:	b	16b4c <flatcc_builder_truncate_vector@@Base+0xa0>
   16b2c:	ldr	r0, [pc, #120]	; 16bac <flatcc_builder_truncate_vector@@Base+0x100>
   16b30:	add	r0, pc, r0
   16b34:	ldr	r1, [pc, #116]	; 16bb0 <flatcc_builder_truncate_vector@@Base+0x104>
   16b38:	add	r1, pc, r1
   16b3c:	ldr	r2, [pc, #112]	; 16bb4 <flatcc_builder_truncate_vector@@Base+0x108>
   16b40:	add	r3, pc, r2
   16b44:	movw	r2, #986	; 0x3da
   16b48:	bl	1298c <__assert_fail@plt>
   16b4c:	mvn	r0, #0
   16b50:	str	r0, [fp, #-4]
   16b54:	b	16b94 <flatcc_builder_truncate_vector@@Base+0xe8>
   16b58:	ldr	r0, [sp, #4]
   16b5c:	ldr	r1, [sp, #8]
   16b60:	ldr	r1, [r1, #32]
   16b64:	ldr	r2, [r1, #20]
   16b68:	sub	r0, r2, r0
   16b6c:	str	r0, [r1, #20]
   16b70:	ldr	r0, [sp, #8]
   16b74:	ldr	r1, [sp, #8]
   16b78:	ldr	r1, [r1, #32]
   16b7c:	ldr	r1, [r1, #16]
   16b80:	ldr	r2, [sp, #4]
   16b84:	mul	r1, r1, r2
   16b88:	bl	16bb8 <flatcc_builder_truncate_vector@@Base+0x10c>
   16b8c:	movw	r0, #0
   16b90:	str	r0, [fp, #-4]
   16b94:	ldr	r0, [fp, #-4]
   16b98:	mov	sp, fp
   16b9c:	pop	{fp, pc}
   16ba0:	andeq	fp, r0, r6, ror #25
   16ba4:	andeq	fp, r0, r4, lsr #19
   16ba8:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   16bac:	andeq	fp, r0, fp, lsl #31
   16bb0:	andeq	fp, r0, r0, asr r9
   16bb4:	andeq	fp, r0, ip, lsr pc
   16bb8:	push	{fp, lr}
   16bbc:	mov	fp, sp
   16bc0:	sub	sp, sp, #8
   16bc4:	str	r0, [sp, #4]
   16bc8:	str	r1, [sp]
   16bcc:	ldr	r0, [sp]
   16bd0:	ldr	r1, [sp, #4]
   16bd4:	ldr	r2, [r1, #20]
   16bd8:	sub	r0, r2, r0
   16bdc:	str	r0, [r1, #20]
   16be0:	ldr	r0, [sp, #4]
   16be4:	ldr	r0, [r0, #16]
   16be8:	ldr	r1, [sp, #4]
   16bec:	ldr	r1, [r1, #20]
   16bf0:	add	r0, r0, r1
   16bf4:	ldr	r2, [sp]
   16bf8:	movw	r1, #0
   16bfc:	and	r1, r1, #255	; 0xff
   16c00:	bl	1295c <memset@plt>
   16c04:	mov	sp, fp
   16c08:	pop	{fp, pc}

00016c0c <flatcc_builder_truncate_offset_vector@@Base>:
   16c0c:	push	{fp, lr}
   16c10:	mov	fp, sp
   16c14:	sub	sp, sp, #16
   16c18:	str	r0, [sp, #8]
   16c1c:	str	r1, [sp, #4]
   16c20:	ldr	r0, [sp, #8]
   16c24:	ldr	r0, [r0, #32]
   16c28:	ldrh	r0, [r0, #14]
   16c2c:	cmp	r0, #5
   16c30:	bne	16c38 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   16c34:	b	16c58 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   16c38:	ldr	r0, [pc, #192]	; 16d00 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   16c3c:	add	r0, pc, r0
   16c40:	ldr	r1, [pc, #188]	; 16d04 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   16c44:	add	r1, pc, r1
   16c48:	ldr	r2, [pc, #184]	; 16d08 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16c4c:	add	r3, pc, r2
   16c50:	movw	r2, #994	; 0x3e2
   16c54:	bl	1298c <__assert_fail@plt>
   16c58:	ldr	r0, [sp, #8]
   16c5c:	ldr	r0, [r0, #32]
   16c60:	ldr	r0, [r0, #20]
   16c64:	ldr	r1, [sp, #4]
   16c68:	cmp	r0, r1
   16c6c:	bcs	16cb8 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   16c70:	ldr	r0, [sp, #8]
   16c74:	ldr	r0, [r0, #32]
   16c78:	ldr	r0, [r0, #20]
   16c7c:	ldr	r1, [sp, #4]
   16c80:	cmp	r0, r1
   16c84:	bcc	16c8c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   16c88:	b	16cac <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   16c8c:	ldr	r0, [pc, #120]	; 16d0c <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16c90:	add	r0, pc, r0
   16c94:	ldr	r1, [pc, #116]	; 16d10 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16c98:	add	r1, pc, r1
   16c9c:	ldr	r2, [pc, #112]	; 16d14 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16ca0:	add	r3, pc, r2
   16ca4:	movw	r2, #995	; 0x3e3
   16ca8:	bl	1298c <__assert_fail@plt>
   16cac:	mvn	r0, #0
   16cb0:	str	r0, [fp, #-4]
   16cb4:	b	16cf4 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   16cb8:	ldr	r0, [sp, #4]
   16cbc:	ldr	r1, [sp, #8]
   16cc0:	ldr	r1, [r1, #32]
   16cc4:	ldr	r2, [r1, #20]
   16cc8:	sub	r0, r2, r0
   16ccc:	str	r0, [r1, #20]
   16cd0:	ldr	r0, [sp, #8]
   16cd4:	ldr	r1, [sp, #8]
   16cd8:	ldr	r1, [r1, #32]
   16cdc:	ldr	r1, [r1, #16]
   16ce0:	ldr	r2, [sp, #4]
   16ce4:	mul	r1, r1, r2
   16ce8:	bl	16bb8 <flatcc_builder_truncate_vector@@Base+0x10c>
   16cec:	movw	r0, #0
   16cf0:	str	r0, [fp, #-4]
   16cf4:	ldr	r0, [fp, #-4]
   16cf8:	mov	sp, fp
   16cfc:	pop	{fp, pc}
   16d00:	andeq	fp, r0, pc, ror ip
   16d04:	andeq	fp, r0, r4, asr #16
   16d08:	muleq	r0, r3, lr
   16d0c:	muleq	r0, r5, lr
   16d10:	strdeq	fp, [r0], -r0
   16d14:	andeq	fp, r0, pc, lsr lr

00016d18 <flatcc_builder_truncate_string@@Base>:
   16d18:	push	{fp, lr}
   16d1c:	mov	fp, sp
   16d20:	sub	sp, sp, #16
   16d24:	str	r0, [sp, #8]
   16d28:	str	r1, [sp, #4]
   16d2c:	ldr	r0, [sp, #8]
   16d30:	ldr	r0, [r0, #32]
   16d34:	ldrh	r0, [r0, #14]
   16d38:	cmp	r0, #6
   16d3c:	bne	16d44 <flatcc_builder_truncate_string@@Base+0x2c>
   16d40:	b	16d64 <flatcc_builder_truncate_string@@Base+0x4c>
   16d44:	ldr	r0, [pc, #176]	; 16dfc <flatcc_builder_truncate_string@@Base+0xe4>
   16d48:	add	r0, pc, r0
   16d4c:	ldr	r1, [pc, #172]	; 16e00 <flatcc_builder_truncate_string@@Base+0xe8>
   16d50:	add	r1, pc, r1
   16d54:	ldr	r2, [pc, #168]	; 16e04 <flatcc_builder_truncate_string@@Base+0xec>
   16d58:	add	r3, pc, r2
   16d5c:	movw	r2, #1003	; 0x3eb
   16d60:	bl	1298c <__assert_fail@plt>
   16d64:	ldr	r0, [sp, #8]
   16d68:	ldr	r0, [r0, #32]
   16d6c:	ldr	r0, [r0, #20]
   16d70:	ldr	r1, [sp, #4]
   16d74:	cmp	r0, r1
   16d78:	bcs	16dc4 <flatcc_builder_truncate_string@@Base+0xac>
   16d7c:	ldr	r0, [sp, #8]
   16d80:	ldr	r0, [r0, #32]
   16d84:	ldr	r0, [r0, #20]
   16d88:	ldr	r1, [sp, #4]
   16d8c:	cmp	r0, r1
   16d90:	bcc	16d98 <flatcc_builder_truncate_string@@Base+0x80>
   16d94:	b	16db8 <flatcc_builder_truncate_string@@Base+0xa0>
   16d98:	ldr	r0, [pc, #104]	; 16e08 <flatcc_builder_truncate_string@@Base+0xf0>
   16d9c:	add	r0, pc, r0
   16da0:	ldr	r1, [pc, #100]	; 16e0c <flatcc_builder_truncate_string@@Base+0xf4>
   16da4:	add	r1, pc, r1
   16da8:	ldr	r2, [pc, #96]	; 16e10 <flatcc_builder_truncate_string@@Base+0xf8>
   16dac:	add	r3, pc, r2
   16db0:	movw	r2, #1004	; 0x3ec
   16db4:	bl	1298c <__assert_fail@plt>
   16db8:	mvn	r0, #0
   16dbc:	str	r0, [fp, #-4]
   16dc0:	b	16df0 <flatcc_builder_truncate_string@@Base+0xd8>
   16dc4:	ldr	r0, [sp, #4]
   16dc8:	ldr	r1, [sp, #8]
   16dcc:	ldr	r1, [r1, #32]
   16dd0:	ldr	r2, [r1, #20]
   16dd4:	sub	r0, r2, r0
   16dd8:	str	r0, [r1, #20]
   16ddc:	ldr	r0, [sp, #8]
   16de0:	ldr	r1, [sp, #4]
   16de4:	bl	16bb8 <flatcc_builder_truncate_vector@@Base+0x10c>
   16de8:	movw	r0, #0
   16dec:	str	r0, [fp, #-4]
   16df0:	ldr	r0, [fp, #-4]
   16df4:	mov	sp, fp
   16df8:	pop	{fp, pc}
   16dfc:	andeq	fp, r0, ip, ror ip
   16e00:	andeq	fp, r0, r8, lsr r7
   16e04:	andeq	fp, r0, r8, lsl #28
   16e08:	andeq	fp, r0, r3, lsl #28
   16e0c:	andeq	fp, r0, r4, ror #13
   16e10:			; <UNDEFINED> instruction: 0x0000bdb4

00016e14 <flatcc_builder_start_vector@@Base>:
   16e14:	push	{fp, lr}
   16e18:	mov	fp, sp
   16e1c:	sub	sp, sp, #24
   16e20:	str	r0, [fp, #-8]
   16e24:	str	r1, [sp, #12]
   16e28:	strh	r2, [sp, #10]
   16e2c:	str	r3, [sp, #4]
   16e30:	add	r0, sp, #10
   16e34:	movw	r1, #4
   16e38:	uxth	r1, r1
   16e3c:	bl	16ec0 <flatcc_builder_start_vector@@Base+0xac>
   16e40:	ldr	r0, [fp, #-8]
   16e44:	ldrh	r1, [sp, #10]
   16e48:	bl	15ccc <flatcc_builder_start_buffer@@Base+0x178>
   16e4c:	cmp	r0, #0
   16e50:	beq	16e60 <flatcc_builder_start_vector@@Base+0x4c>
   16e54:	mvn	r0, #0
   16e58:	str	r0, [fp, #-4]
   16e5c:	b	16eb4 <flatcc_builder_start_vector@@Base+0xa0>
   16e60:	ldr	r0, [sp, #12]
   16e64:	ldr	r1, [fp, #-8]
   16e68:	ldr	r1, [r1, #32]
   16e6c:	str	r0, [r1, #16]
   16e70:	ldr	r0, [fp, #-8]
   16e74:	ldr	r0, [r0, #32]
   16e78:	movw	r1, #0
   16e7c:	str	r1, [r0, #20]
   16e80:	ldr	r0, [sp, #4]
   16e84:	ldr	r1, [fp, #-8]
   16e88:	ldr	r1, [r1, #32]
   16e8c:	str	r0, [r1, #24]
   16e90:	ldr	r0, [fp, #-8]
   16e94:	ldr	r0, [r0, #32]
   16e98:	movw	r1, #4
   16e9c:	strh	r1, [r0, #14]
   16ea0:	ldr	r0, [fp, #-8]
   16ea4:	mvn	r1, #3
   16ea8:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   16eac:	movw	r0, #0
   16eb0:	str	r0, [fp, #-4]
   16eb4:	ldr	r0, [fp, #-4]
   16eb8:	mov	sp, fp
   16ebc:	pop	{fp, pc}
   16ec0:	sub	sp, sp, #8
   16ec4:	str	r0, [sp, #4]
   16ec8:	strh	r1, [sp, #2]
   16ecc:	ldr	r0, [sp, #4]
   16ed0:	ldrh	r0, [r0]
   16ed4:	ldrh	r1, [sp, #2]
   16ed8:	cmp	r0, r1
   16edc:	bge	16eec <flatcc_builder_start_vector@@Base+0xd8>
   16ee0:	ldrh	r0, [sp, #2]
   16ee4:	ldr	r1, [sp, #4]
   16ee8:	strh	r0, [r1]
   16eec:	add	sp, sp, #8
   16ef0:	bx	lr

00016ef4 <flatcc_builder_start_offset_vector@@Base>:
   16ef4:	push	{fp, lr}
   16ef8:	mov	fp, sp
   16efc:	sub	sp, sp, #8
   16f00:	str	r0, [sp]
   16f04:	ldr	r0, [sp]
   16f08:	movw	r1, #4
   16f0c:	uxth	r1, r1
   16f10:	bl	15ccc <flatcc_builder_start_buffer@@Base+0x178>
   16f14:	cmp	r0, #0
   16f18:	beq	16f28 <flatcc_builder_start_offset_vector@@Base+0x34>
   16f1c:	mvn	r0, #0
   16f20:	str	r0, [sp, #4]
   16f24:	b	16f6c <flatcc_builder_start_offset_vector@@Base+0x78>
   16f28:	ldr	r0, [sp]
   16f2c:	ldr	r0, [r0, #32]
   16f30:	movw	r1, #4
   16f34:	str	r1, [r0, #16]
   16f38:	ldr	r0, [sp]
   16f3c:	ldr	r0, [r0, #32]
   16f40:	movw	r1, #0
   16f44:	str	r1, [r0, #20]
   16f48:	ldr	r0, [sp]
   16f4c:	ldr	r0, [r0, #32]
   16f50:	movw	r1, #5
   16f54:	strh	r1, [r0, #14]
   16f58:	ldr	r0, [sp]
   16f5c:	mvn	r1, #3
   16f60:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   16f64:	movw	r0, #0
   16f68:	str	r0, [sp, #4]
   16f6c:	ldr	r0, [sp, #4]
   16f70:	mov	sp, fp
   16f74:	pop	{fp, pc}

00016f78 <flatcc_builder_create_offset_vector@@Base>:
   16f78:	push	{fp, lr}
   16f7c:	mov	fp, sp
   16f80:	sub	sp, sp, #24
   16f84:	str	r0, [fp, #-8]
   16f88:	str	r1, [sp, #12]
   16f8c:	str	r2, [sp, #8]
   16f90:	ldr	r0, [fp, #-8]
   16f94:	bl	16ef4 <flatcc_builder_start_offset_vector@@Base>
   16f98:	cmp	r0, #0
   16f9c:	beq	16fac <flatcc_builder_create_offset_vector@@Base+0x34>
   16fa0:	movw	r0, #0
   16fa4:	str	r0, [fp, #-4]
   16fa8:	b	16ff4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16fac:	ldr	r0, [fp, #-8]
   16fb0:	ldr	r1, [sp, #8]
   16fb4:	bl	16688 <flatcc_builder_extend_offset_vector@@Base>
   16fb8:	str	r0, [sp, #4]
   16fbc:	movw	r1, #0
   16fc0:	cmp	r0, r1
   16fc4:	bne	16fd4 <flatcc_builder_create_offset_vector@@Base+0x5c>
   16fc8:	movw	r0, #0
   16fcc:	str	r0, [fp, #-4]
   16fd0:	b	16ff4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16fd4:	ldr	r0, [sp, #4]
   16fd8:	ldr	r1, [sp, #12]
   16fdc:	ldr	r2, [sp, #8]
   16fe0:	lsl	r2, r2, #2
   16fe4:	bl	128d8 <memcpy@plt>
   16fe8:	ldr	r0, [fp, #-8]
   16fec:	bl	17000 <flatcc_builder_end_offset_vector@@Base>
   16ff0:	str	r0, [fp, #-4]
   16ff4:	ldr	r0, [fp, #-4]
   16ff8:	mov	sp, fp
   16ffc:	pop	{fp, pc}

00017000 <flatcc_builder_end_offset_vector@@Base>:
   17000:	push	{fp, lr}
   17004:	mov	fp, sp
   17008:	sub	sp, sp, #16
   1700c:	str	r0, [sp, #8]
   17010:	ldr	r0, [sp, #8]
   17014:	ldr	r0, [r0, #32]
   17018:	ldrh	r0, [r0, #14]
   1701c:	cmp	r0, #5
   17020:	bne	17028 <flatcc_builder_end_offset_vector@@Base+0x28>
   17024:	b	17048 <flatcc_builder_end_offset_vector@@Base+0x48>
   17028:	ldr	r0, [pc, #108]	; 1709c <flatcc_builder_end_offset_vector@@Base+0x9c>
   1702c:	add	r0, pc, r0
   17030:	ldr	r1, [pc, #104]	; 170a0 <flatcc_builder_end_offset_vector@@Base+0xa0>
   17034:	add	r1, pc, r1
   17038:	ldr	r2, [pc, #100]	; 170a4 <flatcc_builder_end_offset_vector@@Base+0xa4>
   1703c:	add	r3, pc, r2
   17040:	movw	r2, #1480	; 0x5c8
   17044:	bl	1298c <__assert_fail@plt>
   17048:	ldr	r0, [sp, #8]
   1704c:	ldr	r1, [sp, #8]
   17050:	ldr	r1, [r1, #16]
   17054:	ldr	r2, [sp, #8]
   17058:	ldr	r2, [r2, #32]
   1705c:	ldr	r2, [r2, #20]
   17060:	bl	18410 <flatcc_builder_create_offset_vector_direct@@Base>
   17064:	str	r0, [sp, #4]
   17068:	movw	r1, #0
   1706c:	cmp	r1, r0
   17070:	bne	17080 <flatcc_builder_end_offset_vector@@Base+0x80>
   17074:	movw	r0, #0
   17078:	str	r0, [fp, #-4]
   1707c:	b	17090 <flatcc_builder_end_offset_vector@@Base+0x90>
   17080:	ldr	r0, [sp, #8]
   17084:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   17088:	ldr	r0, [sp, #4]
   1708c:	str	r0, [fp, #-4]
   17090:	ldr	r0, [fp, #-4]
   17094:	mov	sp, fp
   17098:	pop	{fp, pc}
   1709c:	andeq	fp, r0, pc, lsl #17
   170a0:	andeq	fp, r0, r4, asr r4
   170a4:	andeq	fp, r0, lr, lsr #29

000170a8 <flatcc_builder_start_string@@Base>:
   170a8:	push	{fp, lr}
   170ac:	mov	fp, sp
   170b0:	sub	sp, sp, #8
   170b4:	str	r0, [sp]
   170b8:	ldr	r0, [sp]
   170bc:	movw	r1, #1
   170c0:	uxth	r1, r1
   170c4:	bl	15ccc <flatcc_builder_start_buffer@@Base+0x178>
   170c8:	cmp	r0, #0
   170cc:	beq	170dc <flatcc_builder_start_string@@Base+0x34>
   170d0:	mvn	r0, #0
   170d4:	str	r0, [sp, #4]
   170d8:	b	17120 <flatcc_builder_start_string@@Base+0x78>
   170dc:	ldr	r0, [sp]
   170e0:	ldr	r0, [r0, #32]
   170e4:	movw	r1, #1
   170e8:	str	r1, [r0, #16]
   170ec:	ldr	r0, [sp]
   170f0:	ldr	r0, [r0, #32]
   170f4:	movw	r1, #0
   170f8:	str	r1, [r0, #20]
   170fc:	ldr	r0, [sp]
   17100:	ldr	r0, [r0, #32]
   17104:	movw	r1, #6
   17108:	strh	r1, [r0, #14]
   1710c:	ldr	r0, [sp]
   17110:	mvn	r1, #3
   17114:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   17118:	movw	r0, #0
   1711c:	str	r0, [sp, #4]
   17120:	ldr	r0, [sp, #4]
   17124:	mov	sp, fp
   17128:	pop	{fp, pc}

0001712c <flatcc_builder_reserve_table@@Base>:
   1712c:	push	{fp, lr}
   17130:	mov	fp, sp
   17134:	sub	sp, sp, #8
   17138:	str	r0, [sp, #4]
   1713c:	str	r1, [sp]
   17140:	ldr	r0, [sp]
   17144:	cmp	r0, #0
   17148:	blt	17150 <flatcc_builder_reserve_table@@Base+0x24>
   1714c:	b	17170 <flatcc_builder_reserve_table@@Base+0x44>
   17150:	ldr	r0, [pc, #44]	; 17184 <flatcc_builder_reserve_table@@Base+0x58>
   17154:	add	r0, pc, r0
   17158:	ldr	r1, [pc, #40]	; 17188 <flatcc_builder_reserve_table@@Base+0x5c>
   1715c:	add	r1, pc, r1
   17160:	ldr	r2, [pc, #36]	; 1718c <flatcc_builder_reserve_table@@Base+0x60>
   17164:	add	r3, pc, r2
   17168:	movw	r2, #1065	; 0x429
   1716c:	bl	1298c <__assert_fail@plt>
   17170:	ldr	r0, [sp, #4]
   17174:	ldr	r1, [sp]
   17178:	bl	17190 <flatcc_builder_reserve_table@@Base+0x64>
   1717c:	mov	sp, fp
   17180:	pop	{fp, pc}
   17184:	andeq	fp, r0, lr, lsr #21
   17188:	andeq	fp, r0, ip, lsr #6
   1718c:	andeq	fp, r0, sp, asr sl
   17190:	push	{fp, lr}
   17194:	mov	fp, sp
   17198:	sub	sp, sp, #24
   1719c:	str	r0, [fp, #-8]
   171a0:	str	r1, [sp, #12]
   171a4:	ldr	r0, [fp, #-8]
   171a8:	ldr	r0, [r0, #32]
   171ac:	ldr	r1, [r0, #16]
   171b0:	ldrh	r0, [r0, #28]
   171b4:	add	r0, r1, r0, lsl #1
   171b8:	str	r0, [sp, #8]
   171bc:	ldr	r0, [sp, #12]
   171c0:	add	r0, r0, #2
   171c4:	lsl	r0, r0, #1
   171c8:	str	r0, [sp, #4]
   171cc:	ldr	r0, [fp, #-8]
   171d0:	ldr	r2, [sp, #8]
   171d4:	ldr	r3, [sp, #4]
   171d8:	movw	r1, #0
   171dc:	movw	ip, #1
   171e0:	str	ip, [sp]
   171e4:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   171e8:	ldr	r1, [fp, #-8]
   171ec:	str	r0, [r1, #4]
   171f0:	movw	r1, #0
   171f4:	cmp	r0, r1
   171f8:	bne	17208 <flatcc_builder_reserve_table@@Base+0xdc>
   171fc:	mvn	r0, #0
   17200:	str	r0, [fp, #-4]
   17204:	b	1727c <flatcc_builder_reserve_table@@Base+0x150>
   17208:	ldr	r0, [fp, #-8]
   1720c:	ldr	r1, [r0, #4]
   17210:	add	r1, r1, #4
   17214:	str	r1, [r0, #4]
   17218:	ldr	r0, [fp, #-8]
   1721c:	ldr	r0, [r0, #32]
   17220:	ldr	r0, [r0, #20]
   17224:	str	r0, [sp, #8]
   17228:	ldr	r0, [sp, #12]
   1722c:	lsl	r0, r0, #1
   17230:	add	r0, r0, #1
   17234:	str	r0, [sp, #4]
   17238:	ldr	r0, [fp, #-8]
   1723c:	ldr	r2, [sp, #8]
   17240:	ldr	r3, [sp, #4]
   17244:	movw	r1, #3
   17248:	movw	ip, #0
   1724c:	str	ip, [sp]
   17250:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   17254:	ldr	r1, [fp, #-8]
   17258:	str	r0, [r1]
   1725c:	movw	r1, #0
   17260:	cmp	r0, r1
   17264:	bne	17274 <flatcc_builder_reserve_table@@Base+0x148>
   17268:	mvn	r0, #0
   1726c:	str	r0, [fp, #-4]
   17270:	b	1727c <flatcc_builder_reserve_table@@Base+0x150>
   17274:	movw	r0, #0
   17278:	str	r0, [fp, #-4]
   1727c:	ldr	r0, [fp, #-4]
   17280:	mov	sp, fp
   17284:	pop	{fp, pc}

00017288 <flatcc_builder_start_table@@Base>:
   17288:	push	{fp, lr}
   1728c:	mov	fp, sp
   17290:	sub	sp, sp, #16
   17294:	str	r0, [sp, #8]
   17298:	str	r1, [sp, #4]
   1729c:	ldr	r0, [sp, #8]
   172a0:	movw	r1, #4
   172a4:	uxth	r1, r1
   172a8:	bl	15ccc <flatcc_builder_start_buffer@@Base+0x178>
   172ac:	cmp	r0, #0
   172b0:	beq	172c0 <flatcc_builder_start_table@@Base+0x38>
   172b4:	mvn	r0, #0
   172b8:	str	r0, [fp, #-4]
   172bc:	b	17390 <flatcc_builder_start_table@@Base+0x108>
   172c0:	ldr	r0, [pc, #212]	; 1739c <flatcc_builder_start_table@@Base+0x114>
   172c4:	ldr	r1, [sp, #8]
   172c8:	ldr	r1, [r1, #4]
   172cc:	ldr	r2, [sp, #8]
   172d0:	ldr	r2, [r2, #52]	; 0x34
   172d4:	sub	r1, r1, r2
   172d8:	ldr	r2, [sp, #8]
   172dc:	ldr	r2, [r2, #32]
   172e0:	str	r1, [r2, #16]
   172e4:	ldr	r1, [sp, #8]
   172e8:	ldr	r1, [r1]
   172ec:	ldr	r2, [sp, #8]
   172f0:	ldr	r2, [r2, #76]	; 0x4c
   172f4:	sub	r1, r1, r2
   172f8:	ldr	r2, [sp, #8]
   172fc:	ldr	r2, [r2, #32]
   17300:	str	r1, [r2, #20]
   17304:	ldr	r1, [sp, #8]
   17308:	ldr	r1, [r1, #12]
   1730c:	ldr	r2, [sp, #8]
   17310:	ldr	r2, [r2, #32]
   17314:	str	r1, [r2, #24]
   17318:	ldr	r1, [sp, #8]
   1731c:	ldrh	r1, [r1, #8]
   17320:	ldr	r2, [sp, #8]
   17324:	ldr	r2, [r2, #32]
   17328:	strh	r1, [r2, #28]
   1732c:	ldr	r1, [sp, #8]
   17330:	movw	r2, #0
   17334:	str	r2, [r1, #12]
   17338:	ldr	r1, [sp, #8]
   1733c:	str	r0, [r1, #12]
   17340:	ldr	r0, [sp, #8]
   17344:	movw	r1, #0
   17348:	strh	r1, [r0, #8]
   1734c:	ldr	r0, [sp, #8]
   17350:	ldr	r0, [r0, #32]
   17354:	movw	r1, #3
   17358:	strh	r1, [r0, #14]
   1735c:	ldr	r0, [sp, #8]
   17360:	ldr	r1, [sp, #4]
   17364:	bl	17190 <flatcc_builder_reserve_table@@Base+0x64>
   17368:	cmp	r0, #0
   1736c:	beq	1737c <flatcc_builder_start_table@@Base+0xf4>
   17370:	mvn	r0, #0
   17374:	str	r0, [fp, #-4]
   17378:	b	17390 <flatcc_builder_start_table@@Base+0x108>
   1737c:	ldr	r0, [sp, #8]
   17380:	movw	r1, #65532	; 0xfffc
   17384:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   17388:	movw	r0, #0
   1738c:	str	r0, [fp, #-4]
   17390:	ldr	r0, [fp, #-4]
   17394:	mov	sp, fp
   17398:	pop	{fp, pc}
   1739c:	svccs	0x00693b52

000173a0 <flatcc_builder_create_vtable@@Base>:
   173a0:	push	{fp, lr}
   173a4:	mov	fp, sp
   173a8:	sub	sp, sp, #104	; 0x68
   173ac:	str	r0, [fp, #-8]
   173b0:	str	r1, [fp, #-12]
   173b4:	strh	r2, [fp, #-14]
   173b8:	movw	r0, #0
   173bc:	str	r0, [sp, #12]
   173c0:	str	r0, [sp, #16]
   173c4:	ldrh	r0, [fp, #-14]
   173c8:	cmp	r0, #0
   173cc:	ble	17410 <flatcc_builder_create_vtable@@Base+0x70>
   173d0:	ldrh	r0, [fp, #-14]
   173d4:	ldr	r1, [sp, #12]
   173d8:	add	r0, r1, r0
   173dc:	str	r0, [sp, #12]
   173e0:	ldr	r0, [fp, #-12]
   173e4:	add	r1, sp, #12
   173e8:	add	r1, r1, #8
   173ec:	ldr	r2, [sp, #16]
   173f0:	str	r0, [r1, r2, lsl #3]
   173f4:	ldrh	r0, [fp, #-14]
   173f8:	ldr	r2, [sp, #16]
   173fc:	add	r1, r1, r2, lsl #3
   17400:	str	r0, [r1, #4]
   17404:	ldr	r0, [sp, #16]
   17408:	add	r0, r0, #1
   1740c:	str	r0, [sp, #16]
   17410:	ldr	r0, [fp, #-8]
   17414:	ldr	r0, [r0, #152]	; 0x98
   17418:	cmp	r0, #0
   1741c:	bne	1745c <flatcc_builder_create_vtable@@Base+0xbc>
   17420:	ldr	r0, [fp, #-8]
   17424:	ldr	r0, [r0, #180]	; 0xb4
   17428:	cmp	r0, #0
   1742c:	bne	1745c <flatcc_builder_create_vtable@@Base+0xbc>
   17430:	ldr	r0, [fp, #-8]
   17434:	add	r1, sp, #12
   17438:	bl	174a4 <flatcc_builder_create_vtable@@Base+0x104>
   1743c:	str	r0, [fp, #-20]	; 0xffffffec
   17440:	movw	r1, #0
   17444:	cmp	r1, r0
   17448:	bne	17458 <flatcc_builder_create_vtable@@Base+0xb8>
   1744c:	movw	r0, #0
   17450:	str	r0, [fp, #-4]
   17454:	b	17498 <flatcc_builder_create_vtable@@Base+0xf8>
   17458:	b	17490 <flatcc_builder_create_vtable@@Base+0xf0>
   1745c:	ldr	r0, [fp, #-8]
   17460:	add	r1, sp, #12
   17464:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   17468:	str	r0, [fp, #-20]	; 0xffffffec
   1746c:	movw	r1, #0
   17470:	cmp	r1, r0
   17474:	bne	17484 <flatcc_builder_create_vtable@@Base+0xe4>
   17478:	movw	r0, #0
   1747c:	str	r0, [fp, #-4]
   17480:	b	17498 <flatcc_builder_create_vtable@@Base+0xf8>
   17484:	ldr	r0, [fp, #-20]	; 0xffffffec
   17488:	add	r0, r0, #1
   1748c:	str	r0, [fp, #-20]	; 0xffffffec
   17490:	ldr	r0, [fp, #-20]	; 0xffffffec
   17494:	str	r0, [fp, #-4]
   17498:	ldr	r0, [fp, #-4]
   1749c:	mov	sp, fp
   174a0:	pop	{fp, pc}
   174a4:	push	{fp, lr}
   174a8:	mov	fp, sp
   174ac:	sub	sp, sp, #24
   174b0:	str	r0, [fp, #-4]
   174b4:	str	r1, [fp, #-8]
   174b8:	ldr	r0, [fp, #-4]
   174bc:	ldr	r0, [r0, #140]	; 0x8c
   174c0:	str	r0, [sp, #12]
   174c4:	ldr	r0, [sp, #12]
   174c8:	ldr	r1, [fp, #-8]
   174cc:	ldr	r1, [r1]
   174d0:	add	r0, r0, r1
   174d4:	ldr	r1, [fp, #-4]
   174d8:	str	r0, [r1, #140]	; 0x8c
   174dc:	ldr	r0, [fp, #-4]
   174e0:	ldr	r0, [r0, #140]	; 0x8c
   174e4:	ldr	r1, [sp, #12]
   174e8:	cmp	r0, r1
   174ec:	bge	17510 <flatcc_builder_create_vtable@@Base+0x170>
   174f0:	ldr	r0, [pc, #168]	; 175a0 <flatcc_builder_create_vtable@@Base+0x200>
   174f4:	add	r0, pc, r0
   174f8:	ldr	r1, [pc, #164]	; 175a4 <flatcc_builder_create_vtable@@Base+0x204>
   174fc:	add	r1, pc, r1
   17500:	ldr	r2, [pc, #160]	; 175a8 <flatcc_builder_create_vtable@@Base+0x208>
   17504:	add	r3, pc, r2
   17508:	movw	r2, #673	; 0x2a1
   1750c:	bl	1298c <__assert_fail@plt>
   17510:	ldr	r0, [fp, #-4]
   17514:	ldr	r0, [r0, #44]	; 0x2c
   17518:	ldr	r1, [fp, #-4]
   1751c:	ldr	r1, [r1, #36]	; 0x24
   17520:	ldr	r2, [fp, #-8]
   17524:	add	r2, r2, #8
   17528:	ldr	r3, [fp, #-8]
   1752c:	ldr	r3, [r3, #4]
   17530:	ldr	ip, [sp, #12]
   17534:	ldr	lr, [fp, #-8]
   17538:	ldr	lr, [lr]
   1753c:	str	r0, [sp, #8]
   17540:	mov	r0, r1
   17544:	mov	r1, r2
   17548:	mov	r2, r3
   1754c:	mov	r3, ip
   17550:	str	lr, [sp]
   17554:	ldr	ip, [sp, #8]
   17558:	blx	ip
   1755c:	cmp	r0, #0
   17560:	beq	17584 <flatcc_builder_create_vtable@@Base+0x1e4>
   17564:	ldr	r0, [pc, #40]	; 17594 <flatcc_builder_create_vtable@@Base+0x1f4>
   17568:	add	r0, pc, r0
   1756c:	ldr	r1, [pc, #36]	; 17598 <flatcc_builder_create_vtable@@Base+0x1f8>
   17570:	add	r1, pc, r1
   17574:	ldr	r2, [pc, #32]	; 1759c <flatcc_builder_create_vtable@@Base+0x1fc>
   17578:	add	r3, pc, r2
   1757c:	movw	r2, #677	; 0x2a5
   17580:	bl	1298c <__assert_fail@plt>
   17584:	ldr	r0, [sp, #12]
   17588:	add	r0, r0, #1
   1758c:	mov	sp, fp
   17590:	pop	{fp, pc}
   17594:	ldrdeq	ip, [r0], -sp
   17598:	andeq	sl, r0, r8, lsl pc
   1759c:	andeq	ip, r0, r8, asr #32
   175a0:	andeq	ip, r0, r1, asr r1
   175a4:	andeq	sl, r0, ip, lsl #31
   175a8:	strheq	ip, [r0], -ip	; <UNPREDICTABLE>

000175ac <flatcc_builder_create_cached_vtable@@Base>:
   175ac:	push	{fp, lr}
   175b0:	mov	fp, sp
   175b4:	sub	sp, sp, #48	; 0x30
   175b8:	str	r0, [fp, #-8]
   175bc:	str	r1, [fp, #-12]
   175c0:	strh	r2, [fp, #-14]
   175c4:	str	r3, [fp, #-20]	; 0xffffffec
   175c8:	ldr	r0, [fp, #-8]
   175cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   175d0:	bl	178b8 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   175d4:	str	r0, [sp, #12]
   175d8:	movw	r1, #0
   175dc:	cmp	r0, r1
   175e0:	bne	175f0 <flatcc_builder_create_cached_vtable@@Base+0x44>
   175e4:	movw	r0, #0
   175e8:	str	r0, [fp, #-4]
   175ec:	b	178ac <flatcc_builder_create_cached_vtable@@Base+0x300>
   175f0:	ldr	r0, [sp, #12]
   175f4:	str	r0, [sp, #16]
   175f8:	ldr	r0, [sp, #16]
   175fc:	ldr	r0, [r0]
   17600:	str	r0, [sp, #8]
   17604:	movw	r0, #0
   17608:	str	r0, [sp, #20]
   1760c:	ldr	r0, [sp, #8]
   17610:	cmp	r0, #0
   17614:	beq	17718 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   17618:	ldr	r0, [fp, #-8]
   1761c:	ldr	r0, [r0, #100]	; 0x64
   17620:	ldr	r1, [sp, #8]
   17624:	add	r0, r0, r1
   17628:	str	r0, [sp, #24]
   1762c:	ldr	r0, [fp, #-8]
   17630:	ldr	r0, [r0, #68]	; 0x44
   17634:	ldr	r1, [sp, #24]
   17638:	ldr	r1, [r1, #8]
   1763c:	add	r0, r0, r1
   17640:	str	r0, [sp, #4]
   17644:	ldr	r0, [sp, #4]
   17648:	ldrh	r0, [r0]
   1764c:	ldrh	r1, [fp, #-14]
   17650:	cmp	r0, r1
   17654:	bne	17674 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   17658:	ldr	r0, [fp, #-12]
   1765c:	ldr	r1, [sp, #4]
   17660:	ldrh	r2, [fp, #-14]
   17664:	bl	128e4 <memcmp@plt>
   17668:	movw	r1, #0
   1766c:	cmp	r1, r0
   17670:	beq	17690 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   17674:	ldr	r0, [sp, #24]
   17678:	add	r0, r0, #12
   1767c:	str	r0, [sp, #16]
   17680:	ldr	r0, [sp, #24]
   17684:	ldr	r0, [r0, #12]
   17688:	str	r0, [sp, #8]
   1768c:	b	1760c <flatcc_builder_create_cached_vtable@@Base+0x60>
   17690:	ldr	r0, [sp, #24]
   17694:	ldr	r0, [r0, #4]
   17698:	ldr	r1, [fp, #-8]
   1769c:	ldr	r1, [r1, #152]	; 0x98
   176a0:	cmp	r0, r1
   176a4:	beq	176cc <flatcc_builder_create_cached_vtable@@Base+0x120>
   176a8:	ldr	r0, [sp, #24]
   176ac:	str	r0, [sp, #20]
   176b0:	ldr	r0, [sp, #24]
   176b4:	add	r0, r0, #12
   176b8:	str	r0, [sp, #16]
   176bc:	ldr	r0, [sp, #24]
   176c0:	ldr	r0, [r0, #12]
   176c4:	str	r0, [sp, #8]
   176c8:	b	1760c <flatcc_builder_create_cached_vtable@@Base+0x60>
   176cc:	ldr	r0, [sp, #16]
   176d0:	ldr	r1, [sp, #12]
   176d4:	cmp	r0, r1
   176d8:	beq	17708 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   176dc:	ldr	r0, [sp, #24]
   176e0:	ldr	r0, [r0, #12]
   176e4:	ldr	r1, [sp, #16]
   176e8:	str	r0, [r1]
   176ec:	ldr	r0, [sp, #12]
   176f0:	ldr	r0, [r0]
   176f4:	ldr	r1, [sp, #24]
   176f8:	str	r0, [r1, #12]
   176fc:	ldr	r0, [sp, #8]
   17700:	ldr	r1, [sp, #12]
   17704:	str	r0, [r1]
   17708:	ldr	r0, [sp, #24]
   1770c:	ldr	r0, [r0]
   17710:	str	r0, [fp, #-4]
   17714:	b	178ac <flatcc_builder_create_cached_vtable@@Base+0x300>
   17718:	ldr	r0, [fp, #-8]
   1771c:	ldr	r1, [fp, #-8]
   17720:	ldr	r2, [r1, #124]	; 0x7c
   17724:	movw	r1, #6
   17728:	movw	r3, #16
   1772c:	movw	ip, #0
   17730:	str	ip, [sp]
   17734:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   17738:	str	r0, [sp, #24]
   1773c:	movw	r1, #0
   17740:	cmp	r0, r1
   17744:	bne	17754 <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   17748:	movw	r0, #0
   1774c:	str	r0, [fp, #-4]
   17750:	b	178ac <flatcc_builder_create_cached_vtable@@Base+0x300>
   17754:	ldr	r0, [fp, #-8]
   17758:	ldr	r0, [r0, #124]	; 0x7c
   1775c:	str	r0, [sp, #8]
   17760:	ldr	r0, [fp, #-8]
   17764:	ldr	r1, [r0, #124]	; 0x7c
   17768:	add	r1, r1, #16
   1776c:	str	r1, [r0, #124]	; 0x7c
   17770:	ldr	r0, [fp, #-8]
   17774:	ldr	r0, [r0, #152]	; 0x98
   17778:	ldr	r1, [sp, #24]
   1777c:	str	r0, [r1, #4]
   17780:	ldr	r0, [sp, #12]
   17784:	ldr	r0, [r0]
   17788:	ldr	r1, [sp, #24]
   1778c:	str	r0, [r1, #12]
   17790:	ldr	r0, [sp, #8]
   17794:	ldr	r1, [sp, #12]
   17798:	str	r0, [r1]
   1779c:	ldr	r0, [fp, #-8]
   177a0:	ldr	r1, [fp, #-12]
   177a4:	ldrh	r2, [fp, #-14]
   177a8:	bl	173a0 <flatcc_builder_create_vtable@@Base>
   177ac:	ldr	r1, [sp, #24]
   177b0:	str	r0, [r1]
   177b4:	movw	r1, #0
   177b8:	cmp	r1, r0
   177bc:	bne	177cc <flatcc_builder_create_cached_vtable@@Base+0x220>
   177c0:	movw	r0, #0
   177c4:	str	r0, [fp, #-4]
   177c8:	b	178ac <flatcc_builder_create_cached_vtable@@Base+0x300>
   177cc:	ldr	r0, [sp, #20]
   177d0:	movw	r1, #0
   177d4:	cmp	r0, r1
   177d8:	beq	177f0 <flatcc_builder_create_cached_vtable@@Base+0x244>
   177dc:	ldr	r0, [sp, #20]
   177e0:	ldr	r0, [r0, #8]
   177e4:	ldr	r1, [sp, #24]
   177e8:	str	r0, [r1, #8]
   177ec:	b	178a0 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   177f0:	ldr	r0, [fp, #-8]
   177f4:	ldr	r0, [r0, #172]	; 0xac
   177f8:	cmp	r0, #0
   177fc:	beq	1782c <flatcc_builder_create_cached_vtable@@Base+0x280>
   17800:	ldr	r0, [fp, #-8]
   17804:	ldr	r0, [r0, #172]	; 0xac
   17808:	ldr	r1, [fp, #-8]
   1780c:	ldr	r1, [r1, #120]	; 0x78
   17810:	ldrh	r2, [fp, #-14]
   17814:	add	r1, r1, r2
   17818:	cmp	r0, r1
   1781c:	bcs	1782c <flatcc_builder_create_cached_vtable@@Base+0x280>
   17820:	ldr	r0, [fp, #-8]
   17824:	bl	148d4 <flatcc_builder_flush_vtable_cache@@Base>
   17828:	b	1789c <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   1782c:	ldr	r0, [fp, #-8]
   17830:	ldr	r1, [fp, #-8]
   17834:	ldr	r2, [r1, #120]	; 0x78
   17838:	ldrh	r3, [fp, #-14]
   1783c:	movw	r1, #2
   17840:	movw	ip, #0
   17844:	str	ip, [sp]
   17848:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1784c:	str	r0, [sp, #4]
   17850:	movw	r1, #0
   17854:	cmp	r0, r1
   17858:	bne	17868 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   1785c:	mvn	r0, #0
   17860:	str	r0, [fp, #-4]
   17864:	b	178ac <flatcc_builder_create_cached_vtable@@Base+0x300>
   17868:	ldr	r0, [fp, #-8]
   1786c:	ldr	r0, [r0, #120]	; 0x78
   17870:	ldr	r1, [sp, #24]
   17874:	str	r0, [r1, #8]
   17878:	ldrh	r0, [fp, #-14]
   1787c:	ldr	r1, [fp, #-8]
   17880:	ldr	r2, [r1, #120]	; 0x78
   17884:	add	r0, r2, r0
   17888:	str	r0, [r1, #120]	; 0x78
   1788c:	ldr	r0, [sp, #4]
   17890:	ldr	r1, [fp, #-12]
   17894:	ldrh	r2, [fp, #-14]
   17898:	bl	128d8 <memcpy@plt>
   1789c:	b	178a0 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   178a0:	ldr	r0, [sp, #24]
   178a4:	ldr	r0, [r0]
   178a8:	str	r0, [fp, #-4]
   178ac:	ldr	r0, [fp, #-4]
   178b0:	mov	sp, fp
   178b4:	pop	{fp, pc}
   178b8:	push	{fp, lr}
   178bc:	mov	fp, sp
   178c0:	sub	sp, sp, #24
   178c4:	str	r0, [fp, #-8]
   178c8:	str	r1, [sp, #12]
   178cc:	ldr	r0, [fp, #-8]
   178d0:	ldr	r0, [r0, #116]	; 0x74
   178d4:	cmp	r0, #0
   178d8:	bne	178fc <flatcc_builder_create_cached_vtable@@Base+0x350>
   178dc:	ldr	r0, [fp, #-8]
   178e0:	bl	1a3d8 <flatcc_builder_get_emit_context@@Base+0xe8>
   178e4:	cmp	r0, #0
   178e8:	beq	178f8 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   178ec:	movw	r0, #0
   178f0:	str	r0, [fp, #-4]
   178f4:	b	17930 <flatcc_builder_create_cached_vtable@@Base+0x384>
   178f8:	b	178fc <flatcc_builder_create_cached_vtable@@Base+0x350>
   178fc:	ldr	r0, [fp, #-8]
   17900:	ldr	r0, [r0, #92]	; 0x5c
   17904:	str	r0, [sp, #8]
   17908:	ldr	r0, [sp, #8]
   1790c:	ldr	r1, [sp, #12]
   17910:	ldr	r2, [fp, #-8]
   17914:	ldr	r2, [r2, #116]	; 0x74
   17918:	rsb	r2, r2, #32
   1791c:	lsr	r1, r1, r2
   17920:	mov	r2, r1
   17924:	add	r0, r0, r1, lsl #2
   17928:	str	r0, [fp, #-4]
   1792c:	str	r2, [sp, #4]
   17930:	ldr	r0, [fp, #-4]
   17934:	mov	sp, fp
   17938:	pop	{fp, pc}

0001793c <flatcc_builder_create_table@@Base>:
   1793c:	push	{r4, sl, fp, lr}
   17940:	add	fp, sp, #8
   17944:	sub	sp, sp, #136	; 0x88
   17948:	ldr	ip, [fp, #16]
   1794c:	ldr	lr, [fp, #12]
   17950:	ldr	r4, [fp, #8]
   17954:	str	r0, [fp, #-16]
   17958:	str	r1, [fp, #-20]	; 0xffffffec
   1795c:	str	r2, [fp, #-24]	; 0xffffffe8
   17960:	strh	r3, [fp, #-26]	; 0xffffffe6
   17964:	ldr	r0, [fp, #12]
   17968:	cmp	r0, #0
   1796c:	str	r4, [sp, #8]
   17970:	str	lr, [sp, #4]
   17974:	str	ip, [sp]
   17978:	blt	17980 <flatcc_builder_create_table@@Base+0x44>
   1797c:	b	179a0 <flatcc_builder_create_table@@Base+0x64>
   17980:	ldr	r0, [pc, #616]	; 17bf0 <flatcc_builder_create_table@@Base+0x2b4>
   17984:	add	r0, pc, r0
   17988:	ldr	r1, [pc, #612]	; 17bf4 <flatcc_builder_create_table@@Base+0x2b8>
   1798c:	add	r1, pc, r1
   17990:	ldr	r2, [pc, #608]	; 17bf8 <flatcc_builder_create_table@@Base+0x2bc>
   17994:	add	r3, pc, r2
   17998:	movw	r2, #1237	; 0x4d5
   1799c:	bl	1298c <__assert_fail@plt>
   179a0:	ldr	r0, [fp, #16]
   179a4:	and	r0, r0, #1
   179a8:	cmp	r0, #0
   179ac:	beq	179b4 <flatcc_builder_create_table@@Base+0x78>
   179b0:	b	179d4 <flatcc_builder_create_table@@Base+0x98>
   179b4:	ldr	r0, [pc, #576]	; 17bfc <flatcc_builder_create_table@@Base+0x2c0>
   179b8:	add	r0, pc, r0
   179bc:	ldr	r1, [pc, #572]	; 17c00 <flatcc_builder_create_table@@Base+0x2c4>
   179c0:	add	r1, pc, r1
   179c4:	ldr	r2, [pc, #568]	; 17c04 <flatcc_builder_create_table@@Base+0x2c8>
   179c8:	add	r3, pc, r2
   179cc:	movw	r2, #1243	; 0x4db
   179d0:	bl	1298c <__assert_fail@plt>
   179d4:	sub	r0, fp, #26
   179d8:	movw	r1, #4
   179dc:	uxth	r1, r1
   179e0:	bl	16ec0 <flatcc_builder_start_vector@@Base+0xac>
   179e4:	ldr	r0, [fp, #-16]
   179e8:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   179ec:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   179f0:	ldr	r0, [fp, #-16]
   179f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   179f8:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   179fc:	bl	154c0 <flatcc_builder_embed_buffer@@Base+0x354>
   17a00:	str	r0, [fp, #-36]	; 0xffffffdc
   17a04:	ldr	r0, [fp, #-16]
   17a08:	ldr	r0, [r0, #136]	; 0x88
   17a0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17a10:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17a14:	add	r1, r1, r2
   17a18:	add	r1, r1, #4
   17a1c:	sub	r0, r0, r1
   17a20:	str	r0, [fp, #-52]	; 0xffffffcc
   17a24:	ldr	r0, [fp, #16]
   17a28:	sub	r0, r0, #1
   17a2c:	str	r0, [fp, #-48]	; 0xffffffd0
   17a30:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17a34:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17a38:	sub	r0, r0, r1
   17a3c:	str	r0, [fp, #-40]	; 0xffffffd8
   17a40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17a44:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17a48:	sub	r0, r0, r1
   17a4c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17a50:	cmp	r0, r1
   17a54:	beq	17a64 <flatcc_builder_create_table@@Base+0x128>
   17a58:	mvn	r0, #0
   17a5c:	str	r0, [fp, #-12]
   17a60:	b	17be4 <flatcc_builder_create_table@@Base+0x2a8>
   17a64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17a68:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   17a6c:	str	r0, [fp, #-44]	; 0xffffffd4
   17a70:	movw	r0, #0
   17a74:	str	r0, [fp, #-32]	; 0xffffffe0
   17a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a7c:	ldr	r1, [fp, #12]
   17a80:	cmp	r0, r1
   17a84:	bge	17af0 <flatcc_builder_create_table@@Base+0x1b4>
   17a88:	ldr	r0, [fp, #-20]	; 0xffffffec
   17a8c:	ldr	r1, [fp, #8]
   17a90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17a94:	add	r1, r1, r2, lsl #1
   17a98:	ldrh	r1, [r1]
   17a9c:	add	r0, r0, r1
   17aa0:	str	r0, [fp, #-60]	; 0xffffffc4
   17aa4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17aa8:	ldr	r0, [r0]
   17aac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17ab0:	sub	r0, r0, r1
   17ab4:	ldr	r1, [fp, #8]
   17ab8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17abc:	add	r1, r1, r2, lsl #1
   17ac0:	ldrh	r1, [r1]
   17ac4:	sub	r0, r0, r1
   17ac8:	sub	r0, r0, #4
   17acc:	str	r0, [fp, #-56]	; 0xffffffc8
   17ad0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17ad4:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   17ad8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17adc:	str	r0, [r1]
   17ae0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ae4:	add	r0, r0, #1
   17ae8:	str	r0, [fp, #-32]	; 0xffffffe0
   17aec:	b	17a78 <flatcc_builder_create_table@@Base+0x13c>
   17af0:	mov	r0, #0
   17af4:	str	r0, [sp, #12]
   17af8:	str	r0, [sp, #16]
   17afc:	ldr	r0, [sp, #12]
   17b00:	add	r0, r0, #4
   17b04:	str	r0, [sp, #12]
   17b08:	add	r0, sp, #12
   17b0c:	add	r0, r0, #8
   17b10:	ldr	r1, [sp, #16]
   17b14:	sub	r2, fp, #44	; 0x2c
   17b18:	str	r2, [r0, r1, lsl #3]
   17b1c:	ldr	r1, [sp, #16]
   17b20:	add	r0, r0, r1, lsl #3
   17b24:	movw	r1, #4
   17b28:	str	r1, [r0, #4]
   17b2c:	ldr	r0, [sp, #16]
   17b30:	add	r0, r0, #1
   17b34:	str	r0, [sp, #16]
   17b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b3c:	cmp	r0, #0
   17b40:	bls	17b84 <flatcc_builder_create_table@@Base+0x248>
   17b44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b48:	ldr	r1, [sp, #12]
   17b4c:	add	r0, r1, r0
   17b50:	str	r0, [sp, #12]
   17b54:	ldr	r0, [fp, #-20]	; 0xffffffec
   17b58:	add	r1, sp, #12
   17b5c:	add	r1, r1, #8
   17b60:	ldr	r2, [sp, #16]
   17b64:	str	r0, [r1, r2, lsl #3]
   17b68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b6c:	ldr	r2, [sp, #16]
   17b70:	add	r1, r1, r2, lsl #3
   17b74:	str	r0, [r1, #4]
   17b78:	ldr	r0, [sp, #16]
   17b7c:	add	r0, r0, #1
   17b80:	str	r0, [sp, #16]
   17b84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17b88:	cmp	r0, #0
   17b8c:	bls	17bd4 <flatcc_builder_create_table@@Base+0x298>
   17b90:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17b94:	ldr	r1, [sp, #12]
   17b98:	add	r0, r1, r0
   17b9c:	str	r0, [sp, #12]
   17ba0:	add	r0, sp, #12
   17ba4:	add	r0, r0, #8
   17ba8:	ldr	r1, [sp, #16]
   17bac:	ldr	r2, [pc, #84]	; 17c08 <flatcc_builder_create_table@@Base+0x2cc>
   17bb0:	ldr	r2, [pc, r2]
   17bb4:	str	r2, [r0, r1, lsl #3]
   17bb8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17bbc:	ldr	r2, [sp, #16]
   17bc0:	add	r0, r0, r2, lsl #3
   17bc4:	str	r1, [r0, #4]
   17bc8:	ldr	r0, [sp, #16]
   17bcc:	add	r0, r0, #1
   17bd0:	str	r0, [sp, #16]
   17bd4:	ldr	r0, [fp, #-16]
   17bd8:	add	r1, sp, #12
   17bdc:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   17be0:	str	r0, [fp, #-12]
   17be4:	ldr	r0, [fp, #-12]
   17be8:	sub	sp, fp, #8
   17bec:	pop	{r4, sl, fp, pc}
   17bf0:	andeq	fp, r0, r7, ror r2
   17bf4:	strdeq	sl, [r0], -ip
   17bf8:	andeq	fp, r0, r9, ror r2
   17bfc:	strdeq	fp, [r0], -r1
   17c00:	andeq	sl, r0, r8, asr #21
   17c04:	andeq	fp, r0, r5, asr #4
   17c08:	muleq	r1, ip, r4

00017c0c <flatcc_builder_check_required_field@@Base>:
   17c0c:	push	{fp, lr}
   17c10:	mov	fp, sp
   17c14:	sub	sp, sp, #16
   17c18:	str	r0, [fp, #-4]
   17c1c:	strh	r1, [fp, #-6]
   17c20:	ldr	r0, [fp, #-4]
   17c24:	ldr	r0, [r0, #32]
   17c28:	ldrh	r0, [r0, #14]
   17c2c:	cmp	r0, #3
   17c30:	bne	17c38 <flatcc_builder_check_required_field@@Base+0x2c>
   17c34:	b	17c58 <flatcc_builder_check_required_field@@Base+0x4c>
   17c38:	ldr	r0, [pc, #104]	; 17ca8 <flatcc_builder_check_required_field@@Base+0x9c>
   17c3c:	add	r0, pc, r0
   17c40:	ldr	r1, [pc, #100]	; 17cac <flatcc_builder_check_required_field@@Base+0xa0>
   17c44:	add	r1, pc, r1
   17c48:	ldr	r2, [pc, #96]	; 17cb0 <flatcc_builder_check_required_field@@Base+0xa4>
   17c4c:	add	r3, pc, r2
   17c50:	movw	r2, #1272	; 0x4f8
   17c54:	bl	1298c <__assert_fail@plt>
   17c58:	ldrh	r0, [fp, #-6]
   17c5c:	ldr	r1, [fp, #-4]
   17c60:	ldrh	r1, [r1, #8]
   17c64:	cmp	r0, r1
   17c68:	movw	r0, #0
   17c6c:	str	r0, [sp, #4]
   17c70:	bge	17c98 <flatcc_builder_check_required_field@@Base+0x8c>
   17c74:	ldr	r0, [fp, #-4]
   17c78:	ldr	r0, [r0, #4]
   17c7c:	ldrh	r1, [fp, #-6]
   17c80:	add	r0, r0, r1, lsl #1
   17c84:	ldrh	r0, [r0]
   17c88:	cmp	r0, #0
   17c8c:	movw	r0, #0
   17c90:	movne	r0, #1
   17c94:	str	r0, [sp, #4]
   17c98:	ldr	r0, [sp, #4]
   17c9c:	and	r0, r0, #1
   17ca0:	mov	sp, fp
   17ca4:	pop	{fp, pc}
   17ca8:	andeq	fp, r0, r8, ror r0
   17cac:	andeq	sl, r0, r4, asr #16
   17cb0:	muleq	r0, r3, r0

00017cb4 <flatcc_builder_check_union_field@@Base>:
   17cb4:	push	{fp, lr}
   17cb8:	mov	fp, sp
   17cbc:	sub	sp, sp, #16
   17cc0:	str	r0, [sp, #8]
   17cc4:	strh	r1, [sp, #6]
   17cc8:	ldr	r0, [sp, #8]
   17ccc:	ldr	r0, [r0, #32]
   17cd0:	ldrh	r0, [r0, #14]
   17cd4:	cmp	r0, #3
   17cd8:	bne	17ce0 <flatcc_builder_check_union_field@@Base+0x2c>
   17cdc:	b	17d00 <flatcc_builder_check_union_field@@Base+0x4c>
   17ce0:	ldr	r0, [pc, #284]	; 17e04 <flatcc_builder_check_union_field@@Base+0x150>
   17ce4:	add	r0, pc, r0
   17ce8:	ldr	r1, [pc, #280]	; 17e08 <flatcc_builder_check_union_field@@Base+0x154>
   17cec:	add	r1, pc, r1
   17cf0:	ldr	r2, [pc, #276]	; 17e0c <flatcc_builder_check_union_field@@Base+0x158>
   17cf4:	add	r3, pc, r2
   17cf8:	movw	r2, #1279	; 0x4ff
   17cfc:	bl	1298c <__assert_fail@plt>
   17d00:	ldrh	r0, [sp, #6]
   17d04:	cmp	r0, #0
   17d08:	beq	17d20 <flatcc_builder_check_union_field@@Base+0x6c>
   17d0c:	ldrh	r0, [sp, #6]
   17d10:	ldr	r1, [sp, #8]
   17d14:	ldrh	r1, [r1, #8]
   17d18:	cmp	r0, r1
   17d1c:	blt	17d2c <flatcc_builder_check_union_field@@Base+0x78>
   17d20:	movw	r0, #0
   17d24:	str	r0, [fp, #-4]
   17d28:	b	17df8 <flatcc_builder_check_union_field@@Base+0x144>
   17d2c:	ldr	r0, [sp, #8]
   17d30:	ldr	r0, [r0, #4]
   17d34:	ldrh	r1, [sp, #6]
   17d38:	sub	r1, r1, #1
   17d3c:	add	r0, r0, r1, lsl #1
   17d40:	ldrh	r0, [r0]
   17d44:	cmp	r0, #0
   17d48:	bne	17d78 <flatcc_builder_check_union_field@@Base+0xc4>
   17d4c:	ldr	r0, [sp, #8]
   17d50:	ldr	r0, [r0, #4]
   17d54:	ldrh	r1, [sp, #6]
   17d58:	add	r0, r0, r1, lsl #1
   17d5c:	ldrh	r0, [r0]
   17d60:	cmp	r0, #0
   17d64:	movw	r0, #0
   17d68:	moveq	r0, #1
   17d6c:	and	r0, r0, #1
   17d70:	str	r0, [fp, #-4]
   17d74:	b	17df8 <flatcc_builder_check_union_field@@Base+0x144>
   17d78:	ldr	r0, [sp, #8]
   17d7c:	ldr	r1, [r0, #4]
   17d80:	ldr	r0, [r0, #16]
   17d84:	ldrh	r2, [sp, #6]
   17d88:	sub	r2, r2, #1
   17d8c:	add	r1, r1, r2, lsl #1
   17d90:	ldrh	r1, [r1]
   17d94:	add	r0, r0, r1
   17d98:	ldrsb	r0, [r0]
   17d9c:	cmp	r0, #0
   17da0:	beq	17dd0 <flatcc_builder_check_union_field@@Base+0x11c>
   17da4:	ldr	r0, [sp, #8]
   17da8:	ldr	r0, [r0, #4]
   17dac:	ldrh	r1, [sp, #6]
   17db0:	add	r0, r0, r1, lsl #1
   17db4:	ldrh	r0, [r0]
   17db8:	cmp	r0, #0
   17dbc:	movw	r0, #0
   17dc0:	movne	r0, #1
   17dc4:	and	r0, r0, #1
   17dc8:	str	r0, [fp, #-4]
   17dcc:	b	17df8 <flatcc_builder_check_union_field@@Base+0x144>
   17dd0:	ldr	r0, [sp, #8]
   17dd4:	ldr	r0, [r0, #4]
   17dd8:	ldrh	r1, [sp, #6]
   17ddc:	add	r0, r0, r1, lsl #1
   17de0:	ldrh	r0, [r0]
   17de4:	cmp	r0, #0
   17de8:	movw	r0, #0
   17dec:	moveq	r0, #1
   17df0:	and	r0, r0, #1
   17df4:	str	r0, [fp, #-4]
   17df8:	ldr	r0, [fp, #-4]
   17dfc:	mov	sp, fp
   17e00:	pop	{fp, pc}
   17e04:	ldrdeq	sl, [r0], -r0
   17e08:	muleq	r0, ip, r7
   17e0c:	andeq	fp, r0, lr, lsr r0

00017e10 <flatcc_builder_check_required@@Base>:
   17e10:	push	{fp, lr}
   17e14:	mov	fp, sp
   17e18:	sub	sp, sp, #24
   17e1c:	str	r0, [fp, #-8]
   17e20:	str	r1, [sp, #12]
   17e24:	str	r2, [sp, #8]
   17e28:	ldr	r0, [fp, #-8]
   17e2c:	ldr	r0, [r0, #32]
   17e30:	ldrh	r0, [r0, #14]
   17e34:	cmp	r0, #3
   17e38:	bne	17e40 <flatcc_builder_check_required@@Base+0x30>
   17e3c:	b	17e60 <flatcc_builder_check_required@@Base+0x50>
   17e40:	ldr	r0, [pc, #172]	; 17ef4 <flatcc_builder_check_required@@Base+0xe4>
   17e44:	add	r0, pc, r0
   17e48:	ldr	r1, [pc, #168]	; 17ef8 <flatcc_builder_check_required@@Base+0xe8>
   17e4c:	add	r1, pc, r1
   17e50:	ldr	r2, [pc, #164]	; 17efc <flatcc_builder_check_required@@Base+0xec>
   17e54:	add	r3, pc, r2
   17e58:	movw	r2, #1297	; 0x511
   17e5c:	bl	1298c <__assert_fail@plt>
   17e60:	ldr	r0, [fp, #-8]
   17e64:	ldrh	r0, [r0, #8]
   17e68:	ldr	r1, [sp, #8]
   17e6c:	cmp	r0, r1
   17e70:	bge	17e80 <flatcc_builder_check_required@@Base+0x70>
   17e74:	movw	r0, #0
   17e78:	str	r0, [fp, #-4]
   17e7c:	b	17ee8 <flatcc_builder_check_required@@Base+0xd8>
   17e80:	movw	r0, #0
   17e84:	str	r0, [sp, #4]
   17e88:	ldr	r0, [sp, #4]
   17e8c:	ldr	r1, [sp, #8]
   17e90:	cmp	r0, r1
   17e94:	bge	17ee0 <flatcc_builder_check_required@@Base+0xd0>
   17e98:	ldr	r0, [fp, #-8]
   17e9c:	ldr	r0, [r0, #4]
   17ea0:	ldr	r1, [sp, #12]
   17ea4:	ldr	r2, [sp, #4]
   17ea8:	add	r1, r1, r2, lsl #1
   17eac:	ldrh	r1, [r1]
   17eb0:	add	r0, r0, r1, lsl #1
   17eb4:	ldrh	r0, [r0]
   17eb8:	cmp	r0, #0
   17ebc:	bne	17ecc <flatcc_builder_check_required@@Base+0xbc>
   17ec0:	movw	r0, #0
   17ec4:	str	r0, [fp, #-4]
   17ec8:	b	17ee8 <flatcc_builder_check_required@@Base+0xd8>
   17ecc:	b	17ed0 <flatcc_builder_check_required@@Base+0xc0>
   17ed0:	ldr	r0, [sp, #4]
   17ed4:	add	r0, r0, #1
   17ed8:	str	r0, [sp, #4]
   17edc:	b	17e88 <flatcc_builder_check_required@@Base+0x78>
   17ee0:	movw	r0, #1
   17ee4:	str	r0, [fp, #-4]
   17ee8:	ldr	r0, [fp, #-4]
   17eec:	mov	sp, fp
   17ef0:	pop	{fp, pc}
   17ef4:	andeq	sl, r0, r0, ror lr
   17ef8:	andeq	sl, r0, ip, lsr r6
   17efc:	andeq	sl, r0, lr, lsr #30

00017f00 <flatcc_builder_end_table@@Base>:
   17f00:	push	{r4, r5, fp, lr}
   17f04:	add	fp, sp, #8
   17f08:	sub	sp, sp, #48	; 0x30
   17f0c:	str	r0, [fp, #-16]
   17f10:	ldr	r0, [fp, #-16]
   17f14:	ldr	r0, [r0, #32]
   17f18:	ldrh	r0, [r0, #14]
   17f1c:	cmp	r0, #3
   17f20:	bne	17f28 <flatcc_builder_end_table@@Base+0x28>
   17f24:	b	17f48 <flatcc_builder_end_table@@Base+0x48>
   17f28:	ldr	r0, [pc, #500]	; 18124 <flatcc_builder_end_table@@Base+0x224>
   17f2c:	add	r0, pc, r0
   17f30:	ldr	r1, [pc, #496]	; 18128 <flatcc_builder_end_table@@Base+0x228>
   17f34:	add	r1, pc, r1
   17f38:	ldr	r2, [pc, #492]	; 1812c <flatcc_builder_end_table@@Base+0x22c>
   17f3c:	add	r3, pc, r2
   17f40:	movw	r2, #1317	; 0x525
   17f44:	bl	1298c <__assert_fail@plt>
   17f48:	ldr	r0, [pc, #480]	; 18130 <flatcc_builder_end_table@@Base+0x230>
   17f4c:	ldr	r1, [fp, #-16]
   17f50:	ldr	r1, [r1, #4]
   17f54:	sub	r1, r1, #4
   17f58:	str	r1, [fp, #-20]	; 0xffffffec
   17f5c:	ldr	r1, [fp, #-16]
   17f60:	ldrh	r1, [r1, #8]
   17f64:	add	r1, r1, #2
   17f68:	lsl	r1, r1, #1
   17f6c:	strh	r1, [fp, #-22]	; 0xffffffea
   17f70:	ldrh	r1, [fp, #-22]	; 0xffffffea
   17f74:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f78:	strh	r1, [r2]
   17f7c:	ldr	r1, [fp, #-16]
   17f80:	ldr	r1, [r1, #20]
   17f84:	uxth	r1, r1
   17f88:	add	r1, r1, #4
   17f8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f90:	strh	r1, [r2, #2]
   17f94:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f98:	ldrh	r1, [r1]
   17f9c:	ldr	r2, [fp, #-16]
   17fa0:	ldr	r2, [r2, #12]
   17fa4:	eor	r1, r1, r2
   17fa8:	mul	r1, r1, r0
   17fac:	ldr	r2, [fp, #-20]	; 0xffffffec
   17fb0:	ldrh	r2, [r2, #2]
   17fb4:	eor	r1, r1, r2
   17fb8:	mul	r0, r1, r0
   17fbc:	ldr	r1, [fp, #-16]
   17fc0:	str	r0, [r1, #12]
   17fc4:	ldr	r0, [fp, #-16]
   17fc8:	ldr	r1, [fp, #-20]	; 0xffffffec
   17fcc:	ldrh	r2, [fp, #-22]	; 0xffffffea
   17fd0:	ldr	r3, [fp, #-16]
   17fd4:	ldr	r3, [r3, #12]
   17fd8:	uxth	r2, r2
   17fdc:	bl	175ac <flatcc_builder_create_cached_vtable@@Base>
   17fe0:	str	r0, [sp, #24]
   17fe4:	cmp	r0, #0
   17fe8:	bne	17ff8 <flatcc_builder_end_table@@Base+0xf8>
   17fec:	movw	r0, #0
   17ff0:	str	r0, [fp, #-12]
   17ff4:	b	18118 <flatcc_builder_end_table@@Base+0x218>
   17ff8:	ldr	r0, [fp, #-20]	; 0xffffffec
   17ffc:	ldrh	r2, [fp, #-22]	; 0xffffffea
   18000:	mov	r1, #0
   18004:	bl	1295c <memset@plt>
   18008:	ldr	r1, [fp, #-16]
   1800c:	ldr	r2, [r1, #32]
   18010:	ldr	r1, [r1, #76]	; 0x4c
   18014:	ldr	r2, [r2, #20]
   18018:	add	r1, r1, r2
   1801c:	str	r1, [sp, #16]
   18020:	ldr	r1, [fp, #-16]
   18024:	ldr	r1, [r1]
   18028:	ldr	r2, [sp, #16]
   1802c:	sub	r1, r1, r2
   18030:	asr	r1, r1, #1
   18034:	str	r1, [sp, #20]
   18038:	ldr	r1, [fp, #-16]
   1803c:	ldr	r2, [fp, #-16]
   18040:	ldr	r2, [r2, #16]
   18044:	ldr	lr, [fp, #-16]
   18048:	ldr	lr, [lr, #20]
   1804c:	ldr	r3, [fp, #-16]
   18050:	ldrh	r3, [r3, #130]	; 0x82
   18054:	ldr	ip, [sp, #16]
   18058:	ldr	r4, [sp, #20]
   1805c:	ldr	r5, [sp, #24]
   18060:	str	r0, [sp, #12]
   18064:	mov	r0, r1
   18068:	mov	r1, r2
   1806c:	mov	r2, lr
   18070:	uxth	r3, r3
   18074:	str	ip, [sp]
   18078:	str	r4, [sp, #4]
   1807c:	str	r5, [sp, #8]
   18080:	bl	1793c <flatcc_builder_create_table@@Base>
   18084:	str	r0, [sp, #28]
   18088:	movw	r1, #0
   1808c:	cmp	r1, r0
   18090:	bne	180a0 <flatcc_builder_end_table@@Base+0x1a0>
   18094:	movw	r0, #0
   18098:	str	r0, [fp, #-12]
   1809c:	b	18118 <flatcc_builder_end_table@@Base+0x218>
   180a0:	ldr	r0, [fp, #-16]
   180a4:	ldr	r0, [r0, #32]
   180a8:	ldr	r0, [r0, #24]
   180ac:	ldr	r1, [fp, #-16]
   180b0:	str	r0, [r1, #12]
   180b4:	ldr	r0, [fp, #-16]
   180b8:	ldr	r0, [r0, #32]
   180bc:	ldrh	r0, [r0, #28]
   180c0:	ldr	r1, [fp, #-16]
   180c4:	strh	r0, [r1, #8]
   180c8:	ldr	r0, [fp, #-16]
   180cc:	ldr	r0, [r0, #52]	; 0x34
   180d0:	ldr	r1, [fp, #-16]
   180d4:	ldr	r1, [r1, #32]
   180d8:	ldr	r1, [r1, #16]
   180dc:	add	r0, r0, r1
   180e0:	ldr	r1, [fp, #-16]
   180e4:	str	r0, [r1, #4]
   180e8:	ldr	r0, [fp, #-16]
   180ec:	ldr	r0, [r0, #76]	; 0x4c
   180f0:	ldr	r1, [fp, #-16]
   180f4:	ldr	r1, [r1, #32]
   180f8:	ldr	r1, [r1, #20]
   180fc:	add	r0, r0, r1
   18100:	ldr	r1, [fp, #-16]
   18104:	str	r0, [r1]
   18108:	ldr	r0, [fp, #-16]
   1810c:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   18110:	ldr	r0, [sp, #28]
   18114:	str	r0, [fp, #-12]
   18118:	ldr	r0, [fp, #-12]
   1811c:	sub	sp, fp, #8
   18120:	pop	{r4, r5, fp, pc}
   18124:	andeq	sl, r0, r8, lsl #27
   18128:	andeq	sl, r0, r4, asr r5
   1812c:	andeq	sl, r0, r0, lsr #29
   18130:			; <UNDEFINED> instruction: 0x9e3779b1

00018134 <flatcc_builder_create_vector@@Base>:
   18134:	push	{fp, lr}
   18138:	mov	fp, sp
   1813c:	sub	sp, sp, #112	; 0x70
   18140:	ldr	ip, [fp, #12]
   18144:	ldr	lr, [fp, #8]
   18148:	str	r0, [fp, #-8]
   1814c:	str	r1, [fp, #-12]
   18150:	str	r2, [fp, #-16]
   18154:	str	r3, [fp, #-20]	; 0xffffffec
   18158:	strh	lr, [fp, #-22]	; 0xffffffea
   1815c:	ldr	r0, [fp, #-16]
   18160:	ldr	r1, [fp, #12]
   18164:	cmp	r0, r1
   18168:	str	ip, [sp]
   1816c:	bls	181b0 <flatcc_builder_create_vector@@Base+0x7c>
   18170:	ldr	r0, [fp, #-16]
   18174:	ldr	r1, [fp, #12]
   18178:	cmp	r0, r1
   1817c:	bhi	18184 <flatcc_builder_create_vector@@Base+0x50>
   18180:	b	181a4 <flatcc_builder_create_vector@@Base+0x70>
   18184:	ldr	r0, [pc, #364]	; 182f8 <flatcc_builder_create_vector@@Base+0x1c4>
   18188:	add	r0, pc, r0
   1818c:	ldr	r1, [pc, #360]	; 182fc <flatcc_builder_create_vector@@Base+0x1c8>
   18190:	add	r1, pc, r1
   18194:	ldr	r2, [pc, #356]	; 18300 <flatcc_builder_create_vector@@Base+0x1cc>
   18198:	add	r3, pc, r2
   1819c:	movw	r2, #1365	; 0x555
   181a0:	bl	1298c <__assert_fail@plt>
   181a4:	movw	r0, #0
   181a8:	str	r0, [fp, #-4]
   181ac:	b	182ec <flatcc_builder_create_vector@@Base+0x1b8>
   181b0:	sub	r0, fp, #22
   181b4:	mov	r1, #4
   181b8:	bl	16ec0 <flatcc_builder_start_vector@@Base+0xac>
   181bc:	ldr	r0, [fp, #-8]
   181c0:	ldrh	r1, [fp, #-22]	; 0xffffffea
   181c4:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   181c8:	ldr	r0, [fp, #-16]
   181cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   181d0:	mul	r0, r0, r1
   181d4:	str	r0, [fp, #-28]	; 0xffffffe4
   181d8:	ldr	r0, [fp, #-16]
   181dc:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   181e0:	str	r0, [fp, #-36]	; 0xffffffdc
   181e4:	ldr	r0, [fp, #-8]
   181e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   181ec:	ldrh	r2, [fp, #-22]	; 0xffffffea
   181f0:	bl	154c0 <flatcc_builder_embed_buffer@@Base+0x354>
   181f4:	str	r0, [fp, #-32]	; 0xffffffe0
   181f8:	mov	r0, #0
   181fc:	str	r0, [sp, #4]
   18200:	str	r0, [sp, #8]
   18204:	ldr	r0, [sp, #4]
   18208:	add	r0, r0, #4
   1820c:	str	r0, [sp, #4]
   18210:	add	r0, sp, #4
   18214:	add	r0, r0, #8
   18218:	ldr	r1, [sp, #8]
   1821c:	sub	r2, fp, #36	; 0x24
   18220:	str	r2, [r0, r1, lsl #3]
   18224:	ldr	r1, [sp, #8]
   18228:	add	r0, r0, r1, lsl #3
   1822c:	movw	r1, #4
   18230:	str	r1, [r0, #4]
   18234:	ldr	r0, [sp, #8]
   18238:	add	r0, r0, #1
   1823c:	str	r0, [sp, #8]
   18240:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18244:	cmp	r0, #0
   18248:	bls	1828c <flatcc_builder_create_vector@@Base+0x158>
   1824c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18250:	ldr	r1, [sp, #4]
   18254:	add	r0, r1, r0
   18258:	str	r0, [sp, #4]
   1825c:	ldr	r0, [fp, #-12]
   18260:	add	r1, sp, #4
   18264:	add	r1, r1, #8
   18268:	ldr	r2, [sp, #8]
   1826c:	str	r0, [r1, r2, lsl #3]
   18270:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18274:	ldr	r2, [sp, #8]
   18278:	add	r1, r1, r2, lsl #3
   1827c:	str	r0, [r1, #4]
   18280:	ldr	r0, [sp, #8]
   18284:	add	r0, r0, #1
   18288:	str	r0, [sp, #8]
   1828c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18290:	cmp	r0, #0
   18294:	bls	182dc <flatcc_builder_create_vector@@Base+0x1a8>
   18298:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1829c:	ldr	r1, [sp, #4]
   182a0:	add	r0, r1, r0
   182a4:	str	r0, [sp, #4]
   182a8:	add	r0, sp, #4
   182ac:	add	r0, r0, #8
   182b0:	ldr	r1, [sp, #8]
   182b4:	ldr	r2, [pc, #72]	; 18304 <flatcc_builder_create_vector@@Base+0x1d0>
   182b8:	ldr	r2, [pc, r2]
   182bc:	str	r2, [r0, r1, lsl #3]
   182c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   182c4:	ldr	r2, [sp, #8]
   182c8:	add	r0, r0, r2, lsl #3
   182cc:	str	r1, [r0, #4]
   182d0:	ldr	r0, [sp, #8]
   182d4:	add	r0, r0, #1
   182d8:	str	r0, [sp, #8]
   182dc:	ldr	r0, [fp, #-8]
   182e0:	add	r1, sp, #4
   182e4:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   182e8:	str	r0, [fp, #-4]
   182ec:	ldr	r0, [fp, #-4]
   182f0:	mov	sp, fp
   182f4:	pop	{fp, pc}
   182f8:	muleq	r0, r6, ip
   182fc:	strdeq	sl, [r0], -r8
   18300:	muleq	r0, r9, ip
   18304:	muleq	r1, r4, sp

00018308 <flatcc_builder_end_vector@@Base>:
   18308:	push	{fp, lr}
   1830c:	mov	fp, sp
   18310:	sub	sp, sp, #24
   18314:	str	r0, [fp, #-8]
   18318:	ldr	r0, [fp, #-8]
   1831c:	ldr	r0, [r0, #32]
   18320:	ldrh	r0, [r0, #14]
   18324:	cmp	r0, #4
   18328:	bne	18330 <flatcc_builder_end_vector@@Base+0x28>
   1832c:	b	18350 <flatcc_builder_end_vector@@Base+0x48>
   18330:	ldr	r0, [pc, #152]	; 183d0 <flatcc_builder_end_vector@@Base+0xc8>
   18334:	add	r0, pc, r0
   18338:	ldr	r1, [pc, #148]	; 183d4 <flatcc_builder_end_vector@@Base+0xcc>
   1833c:	add	r1, pc, r1
   18340:	ldr	r2, [pc, #144]	; 183d8 <flatcc_builder_end_vector@@Base+0xd0>
   18344:	add	r3, pc, r2
   18348:	movw	r2, #1400	; 0x578
   1834c:	bl	1298c <__assert_fail@plt>
   18350:	ldr	r0, [fp, #-8]
   18354:	ldr	r1, [fp, #-8]
   18358:	ldr	r1, [r1, #16]
   1835c:	ldr	r2, [fp, #-8]
   18360:	ldr	r2, [r2, #32]
   18364:	ldr	r2, [r2, #20]
   18368:	ldr	r3, [fp, #-8]
   1836c:	ldr	r3, [r3, #32]
   18370:	ldr	r3, [r3, #16]
   18374:	ldr	ip, [fp, #-8]
   18378:	ldrh	ip, [ip, #130]	; 0x82
   1837c:	ldr	lr, [fp, #-8]
   18380:	ldr	lr, [lr, #32]
   18384:	ldr	lr, [lr, #24]
   18388:	uxth	ip, ip
   1838c:	str	ip, [sp]
   18390:	str	lr, [sp, #4]
   18394:	bl	18134 <flatcc_builder_create_vector@@Base>
   18398:	str	r0, [sp, #12]
   1839c:	movw	r1, #0
   183a0:	cmp	r1, r0
   183a4:	bne	183b4 <flatcc_builder_end_vector@@Base+0xac>
   183a8:	movw	r0, #0
   183ac:	str	r0, [fp, #-4]
   183b0:	b	183c4 <flatcc_builder_end_vector@@Base+0xbc>
   183b4:	ldr	r0, [fp, #-8]
   183b8:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   183bc:	ldr	r0, [sp, #12]
   183c0:	str	r0, [fp, #-4]
   183c4:	ldr	r0, [fp, #-4]
   183c8:	mov	sp, fp
   183cc:	pop	{fp, pc}
   183d0:	andeq	sl, r0, lr, lsl #9
   183d4:	andeq	sl, r0, ip, asr #2
   183d8:	andeq	sl, r0, r3, ror #22

000183dc <flatcc_builder_vector_count@@Base>:
   183dc:	sub	sp, sp, #4
   183e0:	str	r0, [sp]
   183e4:	ldr	r0, [sp]
   183e8:	ldr	r0, [r0, #32]
   183ec:	ldr	r0, [r0, #20]
   183f0:	add	sp, sp, #4
   183f4:	bx	lr

000183f8 <flatcc_builder_vector_edit@@Base>:
   183f8:	sub	sp, sp, #4
   183fc:	str	r0, [sp]
   18400:	ldr	r0, [sp]
   18404:	ldr	r0, [r0, #16]
   18408:	add	sp, sp, #4
   1840c:	bx	lr

00018410 <flatcc_builder_create_offset_vector_direct@@Base>:
   18410:	push	{fp, lr}
   18414:	mov	fp, sp
   18418:	sub	sp, sp, #16
   1841c:	str	r0, [fp, #-4]
   18420:	str	r1, [sp, #8]
   18424:	str	r2, [sp, #4]
   18428:	ldr	r0, [fp, #-4]
   1842c:	ldr	r1, [sp, #8]
   18430:	ldr	r2, [sp, #4]
   18434:	movw	r3, #0
   18438:	bl	18444 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   1843c:	mov	sp, fp
   18440:	pop	{fp, pc}
   18444:	push	{fp, lr}
   18448:	mov	fp, sp
   1844c:	sub	sp, sp, #120	; 0x78
   18450:	ldr	ip, [pc, #696]	; 18710 <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   18454:	str	r0, [fp, #-8]
   18458:	str	r1, [fp, #-12]
   1845c:	str	r2, [fp, #-16]
   18460:	str	r3, [fp, #-20]	; 0xffffffec
   18464:	ldr	r0, [fp, #-16]
   18468:	cmp	r0, ip
   1846c:	bls	1847c <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   18470:	movw	r0, #0
   18474:	str	r0, [fp, #-4]
   18478:	b	18704 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   1847c:	ldr	r0, [fp, #-8]
   18480:	mov	r1, #4
   18484:	str	r1, [sp]
   18488:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   1848c:	ldr	r0, [fp, #-16]
   18490:	lsl	r0, r0, #2
   18494:	str	r0, [fp, #-24]	; 0xffffffe8
   18498:	ldr	r0, [fp, #-16]
   1849c:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   184a0:	str	r0, [fp, #-32]	; 0xffffffe0
   184a4:	ldr	r0, [fp, #-8]
   184a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   184ac:	ldr	r2, [sp]
   184b0:	bl	154c0 <flatcc_builder_embed_buffer@@Base+0x354>
   184b4:	str	r0, [fp, #-28]	; 0xffffffe4
   184b8:	mov	r0, #0
   184bc:	str	r0, [sp, #4]
   184c0:	str	r0, [sp, #8]
   184c4:	ldr	r0, [sp, #4]
   184c8:	add	r0, r0, #4
   184cc:	str	r0, [sp, #4]
   184d0:	add	r0, sp, #4
   184d4:	add	r0, r0, #8
   184d8:	ldr	r1, [sp, #8]
   184dc:	sub	r2, fp, #32
   184e0:	str	r2, [r0, r1, lsl #3]
   184e4:	ldr	r1, [sp, #8]
   184e8:	add	r0, r0, r1, lsl #3
   184ec:	movw	r1, #4
   184f0:	str	r1, [r0, #4]
   184f4:	ldr	r0, [sp, #8]
   184f8:	add	r0, r0, #1
   184fc:	str	r0, [sp, #8]
   18500:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18504:	cmp	r0, #0
   18508:	bls	1854c <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   1850c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18510:	ldr	r1, [sp, #4]
   18514:	add	r0, r1, r0
   18518:	str	r0, [sp, #4]
   1851c:	ldr	r0, [fp, #-12]
   18520:	add	r1, sp, #4
   18524:	add	r1, r1, #8
   18528:	ldr	r2, [sp, #8]
   1852c:	str	r0, [r1, r2, lsl #3]
   18530:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18534:	ldr	r2, [sp, #8]
   18538:	add	r1, r1, r2, lsl #3
   1853c:	str	r0, [r1, #4]
   18540:	ldr	r0, [sp, #8]
   18544:	add	r0, r0, #1
   18548:	str	r0, [sp, #8]
   1854c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18550:	cmp	r0, #0
   18554:	bls	1859c <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   18558:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1855c:	ldr	r1, [sp, #4]
   18560:	add	r0, r1, r0
   18564:	str	r0, [sp, #4]
   18568:	add	r0, sp, #4
   1856c:	add	r0, r0, #8
   18570:	ldr	r1, [sp, #8]
   18574:	ldr	r2, [pc, #444]	; 18738 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   18578:	ldr	r2, [pc, r2]
   1857c:	str	r2, [r0, r1, lsl #3]
   18580:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18584:	ldr	r2, [sp, #8]
   18588:	add	r0, r0, r2, lsl #3
   1858c:	str	r1, [r0, #4]
   18590:	ldr	r0, [sp, #8]
   18594:	add	r0, r0, #1
   18598:	str	r0, [sp, #8]
   1859c:	ldr	r0, [fp, #-8]
   185a0:	ldr	r0, [r0, #136]	; 0x88
   185a4:	ldr	r1, [sp, #4]
   185a8:	sub	r0, r0, r1
   185ac:	str	r0, [fp, #-36]	; 0xffffffdc
   185b0:	movw	r0, #0
   185b4:	str	r0, [fp, #-44]	; 0xffffffd4
   185b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   185bc:	ldr	r1, [fp, #-16]
   185c0:	cmp	r0, r1
   185c4:	bcs	186f4 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   185c8:	ldr	r0, [fp, #-12]
   185cc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   185d0:	add	r0, r0, r1, lsl #2
   185d4:	ldr	r0, [r0]
   185d8:	cmp	r0, #0
   185dc:	beq	1866c <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   185e0:	ldr	r0, [fp, #-12]
   185e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   185e8:	ldr	r0, [r0, r1, lsl #2]
   185ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   185f0:	sub	r0, r0, r2
   185f4:	sub	r0, r0, r1, lsl #2
   185f8:	sub	r0, r0, #4
   185fc:	str	r0, [fp, #-40]	; 0xffffffd8
   18600:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18604:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   18608:	ldr	r1, [fp, #-12]
   1860c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18610:	add	r1, r1, r2, lsl #2
   18614:	str	r0, [r1]
   18618:	ldr	r0, [fp, #-20]	; 0xffffffec
   1861c:	movw	r1, #0
   18620:	cmp	r0, r1
   18624:	beq	18668 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   18628:	ldr	r0, [fp, #-20]	; 0xffffffec
   1862c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18630:	add	r0, r0, r1
   18634:	ldrb	r0, [r0]
   18638:	cmp	r0, #0
   1863c:	beq	18644 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   18640:	b	18664 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   18644:	ldr	r0, [pc, #224]	; 1872c <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   18648:	add	r0, pc, r0
   1864c:	ldr	r1, [pc, #220]	; 18730 <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   18650:	add	r1, pc, r1
   18654:	ldr	r2, [pc, #216]	; 18734 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   18658:	add	r3, pc, r2
   1865c:	movw	r2, #1457	; 0x5b1
   18660:	bl	1298c <__assert_fail@plt>
   18664:	b	18668 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   18668:	b	186e0 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   1866c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18670:	movw	r1, #0
   18674:	cmp	r0, r1
   18678:	beq	186bc <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   1867c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18680:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18684:	add	r0, r0, r1
   18688:	ldrb	r0, [r0]
   1868c:	cmp	r0, #0
   18690:	bne	18698 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   18694:	b	186b8 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   18698:	ldr	r0, [pc, #128]	; 18720 <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   1869c:	add	r0, pc, r0
   186a0:	ldr	r1, [pc, #124]	; 18724 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   186a4:	add	r1, pc, r1
   186a8:	ldr	r2, [pc, #120]	; 18728 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   186ac:	add	r3, pc, r2
   186b0:	movw	r2, #1461	; 0x5b5
   186b4:	bl	1298c <__assert_fail@plt>
   186b8:	b	186dc <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   186bc:	ldr	r0, [pc, #80]	; 18714 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   186c0:	add	r0, pc, r0
   186c4:	ldr	r1, [pc, #76]	; 18718 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   186c8:	add	r1, pc, r1
   186cc:	ldr	r2, [pc, #72]	; 1871c <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   186d0:	add	r3, pc, r2
   186d4:	movw	r2, #1463	; 0x5b7
   186d8:	bl	1298c <__assert_fail@plt>
   186dc:	b	186e0 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   186e0:	b	186e4 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   186e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   186e8:	add	r0, r0, #1
   186ec:	str	r0, [fp, #-44]	; 0xffffffd4
   186f0:	b	185b8 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   186f4:	ldr	r0, [fp, #-8]
   186f8:	add	r1, sp, #4
   186fc:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   18700:	str	r0, [fp, #-4]
   18704:	ldr	r0, [fp, #-4]
   18708:	mov	sp, fp
   1870c:	pop	{fp, pc}
   18710:	svccc	0x00ffffff
   18714:	andeq	sl, r0, r5, lsl #31
   18718:	andeq	r9, r0, r0, asr #27
   1871c:	andeq	sl, r0, r7, ror pc
   18720:	andeq	fp, r0, lr, lsr #32
   18724:	andeq	r9, r0, r4, ror #27
   18728:	muleq	r0, fp, pc	; <UNPREDICTABLE>
   1872c:	strdeq	sl, [r0], -r1
   18730:	andeq	r9, r0, r8, lsr lr
   18734:	andeq	sl, r0, pc, ror #31
   18738:	ldrdeq	ip, [r1], -r4

0001873c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1873c:	push	{fp, lr}
   18740:	mov	fp, sp
   18744:	sub	sp, sp, #16
   18748:	str	r0, [sp, #8]
   1874c:	str	r1, [sp, #4]
   18750:	ldr	r0, [sp, #8]
   18754:	ldr	r0, [r0, #32]
   18758:	ldrh	r0, [r0, #14]
   1875c:	cmp	r0, #5
   18760:	bne	18768 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   18764:	b	18788 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   18768:	ldr	r0, [pc, #112]	; 187e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   1876c:	add	r0, pc, r0
   18770:	ldr	r1, [pc, #108]	; 187e4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   18774:	add	r1, pc, r1
   18778:	ldr	r2, [pc, #104]	; 187e8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   1877c:	add	r3, pc, r2
   18780:	movw	r2, #1493	; 0x5d5
   18784:	bl	1298c <__assert_fail@plt>
   18788:	ldr	r0, [sp, #8]
   1878c:	ldr	r1, [sp, #8]
   18790:	ldr	r1, [r1, #16]
   18794:	ldr	r2, [sp, #8]
   18798:	ldr	r2, [r2, #32]
   1879c:	ldr	r2, [r2, #20]
   187a0:	ldr	r3, [sp, #4]
   187a4:	bl	18444 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   187a8:	str	r0, [sp]
   187ac:	movw	r1, #0
   187b0:	cmp	r1, r0
   187b4:	bne	187c4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   187b8:	movw	r0, #0
   187bc:	str	r0, [fp, #-4]
   187c0:	b	187d4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   187c4:	ldr	r0, [sp, #8]
   187c8:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   187cc:	ldr	r0, [sp]
   187d0:	str	r0, [fp, #-4]
   187d4:	ldr	r0, [fp, #-4]
   187d8:	mov	sp, fp
   187dc:	pop	{fp, pc}
   187e0:	andeq	sl, r0, pc, asr #2
   187e4:	andeq	r9, r0, r4, lsl sp
   187e8:			; <UNDEFINED> instruction: 0x0000a7b8

000187ec <flatcc_builder_offset_vector_edit@@Base>:
   187ec:	sub	sp, sp, #4
   187f0:	str	r0, [sp]
   187f4:	ldr	r0, [sp]
   187f8:	ldr	r0, [r0, #16]
   187fc:	add	sp, sp, #4
   18800:	bx	lr

00018804 <flatcc_builder_offset_vector_count@@Base>:
   18804:	sub	sp, sp, #4
   18808:	str	r0, [sp]
   1880c:	ldr	r0, [sp]
   18810:	ldr	r0, [r0, #32]
   18814:	ldr	r0, [r0, #20]
   18818:	add	sp, sp, #4
   1881c:	bx	lr

00018820 <flatcc_builder_table_add_union@@Base>:
   18820:	push	{fp, lr}
   18824:	mov	fp, sp
   18828:	sub	sp, sp, #32
   1882c:	str	r2, [fp, #-12]
   18830:	str	r3, [fp, #-8]
   18834:	str	r0, [sp, #16]
   18838:	str	r1, [sp, #12]
   1883c:	ldr	r0, [sp, #16]
   18840:	ldr	r0, [r0, #32]
   18844:	ldrh	r0, [r0, #14]
   18848:	cmp	r0, #3
   1884c:	bne	18854 <flatcc_builder_table_add_union@@Base+0x34>
   18850:	b	18874 <flatcc_builder_table_add_union@@Base+0x54>
   18854:	ldr	r0, [pc, #388]	; 189e0 <flatcc_builder_table_add_union@@Base+0x1c0>
   18858:	add	r0, pc, r0
   1885c:	ldr	r1, [pc, #384]	; 189e4 <flatcc_builder_table_add_union@@Base+0x1c4>
   18860:	add	r1, pc, r1
   18864:	ldr	r2, [pc, #380]	; 189e8 <flatcc_builder_table_add_union@@Base+0x1c8>
   18868:	add	r3, pc, r2
   1886c:	movw	r2, #1518	; 0x5ee
   18870:	bl	1298c <__assert_fail@plt>
   18874:	ldrb	r0, [fp, #-12]
   18878:	cmp	r0, #0
   1887c:	bne	188d4 <flatcc_builder_table_add_union@@Base+0xb4>
   18880:	ldr	r0, [fp, #-8]
   18884:	cmp	r0, #0
   18888:	beq	188d4 <flatcc_builder_table_add_union@@Base+0xb4>
   1888c:	ldrb	r0, [fp, #-12]
   18890:	cmp	r0, #0
   18894:	bne	188a4 <flatcc_builder_table_add_union@@Base+0x84>
   18898:	ldr	r0, [fp, #-8]
   1889c:	cmp	r0, #0
   188a0:	bne	188a8 <flatcc_builder_table_add_union@@Base+0x88>
   188a4:	b	188c8 <flatcc_builder_table_add_union@@Base+0xa8>
   188a8:	ldr	r0, [pc, #316]	; 189ec <flatcc_builder_table_add_union@@Base+0x1cc>
   188ac:	add	r0, pc, r0
   188b0:	ldr	r1, [pc, #312]	; 189f0 <flatcc_builder_table_add_union@@Base+0x1d0>
   188b4:	add	r1, pc, r1
   188b8:	ldr	r2, [pc, #308]	; 189f4 <flatcc_builder_table_add_union@@Base+0x1d4>
   188bc:	add	r3, pc, r2
   188c0:	movw	r2, #1519	; 0x5ef
   188c4:	bl	1298c <__assert_fail@plt>
   188c8:	mvn	r0, #0
   188cc:	str	r0, [fp, #-4]
   188d0:	b	189d4 <flatcc_builder_table_add_union@@Base+0x1b4>
   188d4:	ldr	r0, [fp, #-8]
   188d8:	cmp	r0, #0
   188dc:	beq	1894c <flatcc_builder_table_add_union@@Base+0x12c>
   188e0:	ldr	r0, [sp, #16]
   188e4:	ldr	r1, [sp, #12]
   188e8:	bl	18a10 <flatcc_builder_table_add_offset@@Base>
   188ec:	str	r0, [sp, #8]
   188f0:	ldr	r0, [sp, #8]
   188f4:	movw	r1, #0
   188f8:	cmp	r0, r1
   188fc:	bne	18940 <flatcc_builder_table_add_union@@Base+0x120>
   18900:	ldr	r0, [sp, #8]
   18904:	movw	r1, #0
   18908:	cmp	r0, r1
   1890c:	beq	18914 <flatcc_builder_table_add_union@@Base+0xf4>
   18910:	b	18934 <flatcc_builder_table_add_union@@Base+0x114>
   18914:	ldr	r0, [pc, #220]	; 189f8 <flatcc_builder_table_add_union@@Base+0x1d8>
   18918:	add	r0, pc, r0
   1891c:	ldr	r1, [pc, #216]	; 189fc <flatcc_builder_table_add_union@@Base+0x1dc>
   18920:	add	r1, pc, r1
   18924:	ldr	r2, [pc, #212]	; 18a00 <flatcc_builder_table_add_union@@Base+0x1e0>
   18928:	add	r3, pc, r2
   1892c:	movw	r2, #1522	; 0x5f2
   18930:	bl	1298c <__assert_fail@plt>
   18934:	mvn	r0, #0
   18938:	str	r0, [fp, #-4]
   1893c:	b	189d4 <flatcc_builder_table_add_union@@Base+0x1b4>
   18940:	ldr	r0, [fp, #-8]
   18944:	ldr	r1, [sp, #8]
   18948:	str	r0, [r1]
   1894c:	ldr	r0, [sp, #16]
   18950:	ldr	r1, [sp, #12]
   18954:	sub	r1, r1, #1
   18958:	movw	r2, #1
   1895c:	movw	r3, #1
   18960:	uxth	r3, r3
   18964:	bl	18b40 <flatcc_builder_table_add@@Base>
   18968:	str	r0, [sp, #4]
   1896c:	ldr	r0, [sp, #4]
   18970:	movw	r1, #0
   18974:	cmp	r0, r1
   18978:	bne	189bc <flatcc_builder_table_add_union@@Base+0x19c>
   1897c:	ldr	r0, [sp, #4]
   18980:	movw	r1, #0
   18984:	cmp	r0, r1
   18988:	beq	18990 <flatcc_builder_table_add_union@@Base+0x170>
   1898c:	b	189b0 <flatcc_builder_table_add_union@@Base+0x190>
   18990:	ldr	r0, [pc, #108]	; 18a04 <flatcc_builder_table_add_union@@Base+0x1e4>
   18994:	add	r0, pc, r0
   18998:	ldr	r1, [pc, #104]	; 18a08 <flatcc_builder_table_add_union@@Base+0x1e8>
   1899c:	add	r1, pc, r1
   189a0:	ldr	r2, [pc, #100]	; 18a0c <flatcc_builder_table_add_union@@Base+0x1ec>
   189a4:	add	r3, pc, r2
   189a8:	movw	r2, #1526	; 0x5f6
   189ac:	bl	1298c <__assert_fail@plt>
   189b0:	mvn	r0, #0
   189b4:	str	r0, [fp, #-4]
   189b8:	b	189d4 <flatcc_builder_table_add_union@@Base+0x1b4>
   189bc:	ldrb	r0, [fp, #-12]
   189c0:	bl	18ca8 <flatcc_builder_table_add@@Base+0x168>
   189c4:	ldr	lr, [sp, #4]
   189c8:	strb	r0, [lr]
   189cc:	movw	r0, #0
   189d0:	str	r0, [fp, #-4]
   189d4:	ldr	r0, [fp, #-4]
   189d8:	mov	sp, fp
   189dc:	pop	{fp, pc}
   189e0:	andeq	sl, r0, ip, asr r4
   189e4:	andeq	r9, r0, r8, lsr #24
   189e8:	andeq	sl, r0, lr, lsr r7
   189ec:	andeq	sl, r0, r2, asr r7
   189f0:	ldrdeq	r9, [r0], -r4
   189f4:	andeq	sl, r0, sl, ror #13
   189f8:	andeq	sl, r0, r8, lsl #14
   189fc:	andeq	r9, r0, r8, ror #22
   18a00:	andeq	sl, r0, lr, ror r6
   18a04:	muleq	r0, r6, r6
   18a08:	andeq	r9, r0, ip, ror #21
   18a0c:	andeq	sl, r0, r2, lsl #12

00018a10 <flatcc_builder_table_add_offset@@Base>:
   18a10:	push	{fp, lr}
   18a14:	mov	fp, sp
   18a18:	sub	sp, sp, #8
   18a1c:	str	r0, [sp, #4]
   18a20:	str	r1, [sp]
   18a24:	ldr	r0, [sp, #4]
   18a28:	ldr	r0, [r0, #32]
   18a2c:	ldrh	r0, [r0, #14]
   18a30:	cmp	r0, #3
   18a34:	bne	18a3c <flatcc_builder_table_add_offset@@Base+0x2c>
   18a38:	b	18a5c <flatcc_builder_table_add_offset@@Base+0x4c>
   18a3c:	ldr	r0, [pc, #212]	; 18b18 <flatcc_builder_table_add_offset@@Base+0x108>
   18a40:	add	r0, pc, r0
   18a44:	ldr	r1, [pc, #208]	; 18b1c <flatcc_builder_table_add_offset@@Base+0x10c>
   18a48:	add	r1, pc, r1
   18a4c:	ldr	r2, [pc, #204]	; 18b20 <flatcc_builder_table_add_offset@@Base+0x110>
   18a50:	add	r3, pc, r2
   18a54:	movw	r2, #1811	; 0x713
   18a58:	bl	1298c <__assert_fail@plt>
   18a5c:	ldr	r0, [sp]
   18a60:	cmp	r0, #0
   18a64:	blt	18a7c <flatcc_builder_table_add_offset@@Base+0x6c>
   18a68:	ldr	r0, [sp]
   18a6c:	movw	r1, #32764	; 0x7ffc
   18a70:	cmp	r0, r1
   18a74:	bgt	18a7c <flatcc_builder_table_add_offset@@Base+0x6c>
   18a78:	b	18a9c <flatcc_builder_table_add_offset@@Base+0x8c>
   18a7c:	ldr	r0, [pc, #160]	; 18b24 <flatcc_builder_table_add_offset@@Base+0x114>
   18a80:	add	r0, pc, r0
   18a84:	ldr	r1, [pc, #156]	; 18b28 <flatcc_builder_table_add_offset@@Base+0x118>
   18a88:	add	r1, pc, r1
   18a8c:	ldr	r2, [pc, #152]	; 18b2c <flatcc_builder_table_add_offset@@Base+0x11c>
   18a90:	add	r3, pc, r2
   18a94:	movw	r2, #1812	; 0x714
   18a98:	bl	1298c <__assert_fail@plt>
   18a9c:	ldr	r0, [sp, #4]
   18aa0:	ldr	r0, [r0, #4]
   18aa4:	ldr	r1, [sp]
   18aa8:	add	r0, r0, r1, lsl #1
   18aac:	ldrh	r0, [r0]
   18ab0:	cmp	r0, #0
   18ab4:	beq	18ad8 <flatcc_builder_table_add_offset@@Base+0xc8>
   18ab8:	ldr	r0, [pc, #116]	; 18b34 <flatcc_builder_table_add_offset@@Base+0x124>
   18abc:	add	r0, pc, r0
   18ac0:	ldr	r1, [pc, #112]	; 18b38 <flatcc_builder_table_add_offset@@Base+0x128>
   18ac4:	add	r1, pc, r1
   18ac8:	ldr	r2, [pc, #108]	; 18b3c <flatcc_builder_table_add_offset@@Base+0x12c>
   18acc:	add	r3, pc, r2
   18ad0:	movw	r2, #1819	; 0x71b
   18ad4:	bl	1298c <__assert_fail@plt>
   18ad8:	ldr	r0, [pc, #80]	; 18b30 <flatcc_builder_table_add_offset@@Base+0x120>
   18adc:	ldr	r1, [sp]
   18ae0:	ldr	r2, [sp, #4]
   18ae4:	ldr	r2, [r2, #12]
   18ae8:	eor	r1, r1, r2
   18aec:	mul	r1, r1, r0
   18af0:	eor	r1, r1, #4
   18af4:	mul	r0, r1, r0
   18af8:	ldr	r1, [sp, #4]
   18afc:	str	r0, [r1, #12]
   18b00:	ldr	r0, [sp, #4]
   18b04:	ldr	r1, [sp]
   18b08:	uxth	r1, r1
   18b0c:	bl	19ad0 <flatcc_builder_table_add_copy@@Base+0x64>
   18b10:	mov	sp, fp
   18b14:	pop	{fp, pc}
   18b18:	andeq	sl, r0, r4, ror r2
   18b1c:	andeq	r9, r0, r0, asr #20
   18b20:	andeq	sl, r0, r8, asr r9
   18b24:	andeq	sl, r0, r8, lsr #17
   18b28:	andeq	r9, r0, r0, lsl #20
   18b2c:	andeq	sl, r0, r8, lsl r9
   18b30:			; <UNDEFINED> instruction: 0x9e3779b1
   18b34:	andeq	sl, r0, r9, lsl #23
   18b38:	andeq	r9, r0, r4, asr #19
   18b3c:	ldrdeq	sl, [r0], -ip

00018b40 <flatcc_builder_table_add@@Base>:
   18b40:	push	{fp, lr}
   18b44:	mov	fp, sp
   18b48:	sub	sp, sp, #16
   18b4c:	str	r0, [fp, #-4]
   18b50:	str	r1, [sp, #8]
   18b54:	str	r2, [sp, #4]
   18b58:	strh	r3, [sp, #2]
   18b5c:	ldr	r0, [fp, #-4]
   18b60:	ldr	r0, [r0, #32]
   18b64:	ldrh	r0, [r0, #14]
   18b68:	cmp	r0, #3
   18b6c:	bne	18b74 <flatcc_builder_table_add@@Base+0x34>
   18b70:	b	18b94 <flatcc_builder_table_add@@Base+0x54>
   18b74:	ldr	r0, [pc, #260]	; 18c80 <flatcc_builder_table_add@@Base+0x140>
   18b78:	add	r0, pc, r0
   18b7c:	ldr	r1, [pc, #256]	; 18c84 <flatcc_builder_table_add@@Base+0x144>
   18b80:	add	r1, pc, r1
   18b84:	ldr	r2, [pc, #252]	; 18c88 <flatcc_builder_table_add@@Base+0x148>
   18b88:	add	r3, pc, r2
   18b8c:	movw	r2, #1773	; 0x6ed
   18b90:	bl	1298c <__assert_fail@plt>
   18b94:	ldr	r0, [sp, #8]
   18b98:	cmp	r0, #0
   18b9c:	blt	18bb4 <flatcc_builder_table_add@@Base+0x74>
   18ba0:	ldr	r0, [sp, #8]
   18ba4:	movw	r1, #32764	; 0x7ffc
   18ba8:	cmp	r0, r1
   18bac:	bgt	18bb4 <flatcc_builder_table_add@@Base+0x74>
   18bb0:	b	18bd4 <flatcc_builder_table_add@@Base+0x94>
   18bb4:	ldr	r0, [pc, #208]	; 18c8c <flatcc_builder_table_add@@Base+0x14c>
   18bb8:	add	r0, pc, r0
   18bbc:	ldr	r1, [pc, #204]	; 18c90 <flatcc_builder_table_add@@Base+0x150>
   18bc0:	add	r1, pc, r1
   18bc4:	ldr	r2, [pc, #200]	; 18c94 <flatcc_builder_table_add@@Base+0x154>
   18bc8:	add	r3, pc, r2
   18bcc:	movw	r2, #1774	; 0x6ee
   18bd0:	bl	1298c <__assert_fail@plt>
   18bd4:	ldrh	r0, [sp, #2]
   18bd8:	ldr	r1, [fp, #-4]
   18bdc:	ldrh	r1, [r1, #130]	; 0x82
   18be0:	cmp	r0, r1
   18be4:	ble	18bf4 <flatcc_builder_table_add@@Base+0xb4>
   18be8:	ldrh	r0, [sp, #2]
   18bec:	ldr	r1, [fp, #-4]
   18bf0:	strh	r0, [r1, #130]	; 0x82
   18bf4:	ldr	r0, [fp, #-4]
   18bf8:	ldr	r0, [r0, #4]
   18bfc:	ldr	r1, [sp, #8]
   18c00:	add	r0, r0, r1, lsl #1
   18c04:	ldrh	r0, [r0]
   18c08:	cmp	r0, #0
   18c0c:	beq	18c30 <flatcc_builder_table_add@@Base+0xf0>
   18c10:	ldr	r0, [pc, #132]	; 18c9c <flatcc_builder_table_add@@Base+0x15c>
   18c14:	add	r0, pc, r0
   18c18:	ldr	r1, [pc, #128]	; 18ca0 <flatcc_builder_table_add@@Base+0x160>
   18c1c:	add	r1, pc, r1
   18c20:	ldr	r2, [pc, #124]	; 18ca4 <flatcc_builder_table_add@@Base+0x164>
   18c24:	add	r3, pc, r2
   18c28:	movw	r2, #1784	; 0x6f8
   18c2c:	bl	1298c <__assert_fail@plt>
   18c30:	ldr	r0, [pc, #96]	; 18c98 <flatcc_builder_table_add@@Base+0x158>
   18c34:	ldr	r1, [sp, #8]
   18c38:	ldr	r2, [fp, #-4]
   18c3c:	ldr	r2, [r2, #12]
   18c40:	eor	r1, r1, r2
   18c44:	mul	r1, r1, r0
   18c48:	ldr	r2, [sp, #4]
   18c4c:	eor	r1, r1, r2
   18c50:	mul	r0, r1, r0
   18c54:	ldr	r1, [fp, #-4]
   18c58:	str	r0, [r1, #12]
   18c5c:	ldr	r0, [fp, #-4]
   18c60:	ldr	r1, [sp, #4]
   18c64:	ldrh	r2, [sp, #2]
   18c68:	ldr	r3, [sp, #8]
   18c6c:	uxth	r2, r2
   18c70:	uxth	r3, r3
   18c74:	bl	198ec <flatcc_builder_string_len@@Base+0x1c>
   18c78:	mov	sp, fp
   18c7c:	pop	{fp, pc}
   18c80:	andeq	sl, r0, ip, lsr r1
   18c84:	andeq	r9, r0, r8, lsl #18
   18c88:	andeq	sl, r0, r6, asr r7
   18c8c:	andeq	sl, r0, r0, ror r7
   18c90:	andeq	r9, r0, r8, asr #17
   18c94:	andeq	sl, r0, r6, lsl r7
   18c98:			; <UNDEFINED> instruction: 0x9e3779b1
   18c9c:	andeq	sl, r0, r1, lsr sl
   18ca0:	andeq	r9, r0, ip, ror #16
   18ca4:			; <UNDEFINED> instruction: 0x0000a6ba
   18ca8:	sub	sp, sp, #4
   18cac:	strb	r0, [sp, #3]
   18cb0:	ldrb	r0, [sp, #3]
   18cb4:	add	sp, sp, #4
   18cb8:	bx	lr

00018cbc <flatcc_builder_table_add_union_vector@@Base>:
   18cbc:	push	{fp, lr}
   18cc0:	mov	fp, sp
   18cc4:	sub	sp, sp, #24
   18cc8:	str	r2, [sp, #12]
   18ccc:	str	r3, [sp, #16]
   18cd0:	str	r0, [sp, #8]
   18cd4:	str	r1, [sp, #4]
   18cd8:	ldr	r0, [sp, #8]
   18cdc:	ldr	r0, [r0, #32]
   18ce0:	ldrh	r0, [r0, #14]
   18ce4:	cmp	r0, #3
   18ce8:	bne	18cf0 <flatcc_builder_table_add_union_vector@@Base+0x34>
   18cec:	b	18d10 <flatcc_builder_table_add_union_vector@@Base+0x54>
   18cf0:	ldr	r0, [pc, #420]	; 18e9c <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   18cf4:	add	r0, pc, r0
   18cf8:	ldr	r1, [pc, #416]	; 18ea0 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   18cfc:	add	r1, pc, r1
   18d00:	ldr	r2, [pc, #412]	; 18ea4 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18d04:	add	r3, pc, r2
   18d08:	movw	r2, #1536	; 0x600
   18d0c:	bl	1298c <__assert_fail@plt>
   18d10:	ldr	r0, [sp, #12]
   18d14:	cmp	r0, #0
   18d18:	movw	r0, #0
   18d1c:	moveq	r0, #1
   18d20:	and	r0, r0, #1
   18d24:	ldr	r1, [sp, #16]
   18d28:	cmp	r1, #0
   18d2c:	movw	r1, #0
   18d30:	moveq	r1, #1
   18d34:	and	r1, r1, #1
   18d38:	cmp	r0, r1
   18d3c:	beq	18da0 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   18d40:	ldr	r0, [sp, #12]
   18d44:	cmp	r0, #0
   18d48:	movw	r0, #0
   18d4c:	moveq	r0, #1
   18d50:	and	r0, r0, #1
   18d54:	ldr	r1, [sp, #16]
   18d58:	cmp	r1, #0
   18d5c:	movw	r1, #0
   18d60:	moveq	r1, #1
   18d64:	and	r1, r1, #1
   18d68:	cmp	r0, r1
   18d6c:	bne	18d74 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   18d70:	b	18d94 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   18d74:	ldr	r0, [pc, #300]	; 18ea8 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18d78:	add	r0, pc, r0
   18d7c:	ldr	r1, [pc, #296]	; 18eac <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18d80:	add	r1, pc, r1
   18d84:	ldr	r2, [pc, #292]	; 18eb0 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18d88:	add	r3, pc, r2
   18d8c:	movw	r2, #1537	; 0x601
   18d90:	bl	1298c <__assert_fail@plt>
   18d94:	mvn	r0, #0
   18d98:	str	r0, [fp, #-4]
   18d9c:	b	18e90 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18da0:	ldr	r0, [sp, #12]
   18da4:	cmp	r0, #0
   18da8:	beq	18e88 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   18dac:	ldr	r0, [sp, #8]
   18db0:	ldr	r1, [sp, #4]
   18db4:	sub	r1, r1, #1
   18db8:	bl	18a10 <flatcc_builder_table_add_offset@@Base>
   18dbc:	str	r0, [sp]
   18dc0:	ldr	r0, [sp]
   18dc4:	movw	r1, #0
   18dc8:	cmp	r0, r1
   18dcc:	bne	18e10 <flatcc_builder_table_add_union_vector@@Base+0x154>
   18dd0:	ldr	r0, [sp]
   18dd4:	movw	r1, #0
   18dd8:	cmp	r0, r1
   18ddc:	beq	18de4 <flatcc_builder_table_add_union_vector@@Base+0x128>
   18de0:	b	18e04 <flatcc_builder_table_add_union_vector@@Base+0x148>
   18de4:	ldr	r0, [pc, #200]	; 18eb4 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   18de8:	add	r0, pc, r0
   18dec:	ldr	r1, [pc, #196]	; 18eb8 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   18df0:	add	r1, pc, r1
   18df4:	ldr	r2, [pc, #192]	; 18ebc <flatcc_builder_table_add_union_vector@@Base+0x200>
   18df8:	add	r3, pc, r2
   18dfc:	movw	r2, #1540	; 0x604
   18e00:	bl	1298c <__assert_fail@plt>
   18e04:	mvn	r0, #0
   18e08:	str	r0, [fp, #-4]
   18e0c:	b	18e90 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18e10:	ldr	r0, [sp, #12]
   18e14:	ldr	r1, [sp]
   18e18:	str	r0, [r1]
   18e1c:	ldr	r0, [sp, #8]
   18e20:	ldr	r1, [sp, #4]
   18e24:	bl	18a10 <flatcc_builder_table_add_offset@@Base>
   18e28:	str	r0, [sp]
   18e2c:	ldr	r0, [sp]
   18e30:	movw	r1, #0
   18e34:	cmp	r0, r1
   18e38:	bne	18e7c <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   18e3c:	ldr	r0, [sp]
   18e40:	movw	r1, #0
   18e44:	cmp	r0, r1
   18e48:	beq	18e50 <flatcc_builder_table_add_union_vector@@Base+0x194>
   18e4c:	b	18e70 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   18e50:	ldr	r0, [pc, #104]	; 18ec0 <flatcc_builder_table_add_union_vector@@Base+0x204>
   18e54:	add	r0, pc, r0
   18e58:	ldr	r1, [pc, #100]	; 18ec4 <flatcc_builder_table_add_union_vector@@Base+0x208>
   18e5c:	add	r1, pc, r1
   18e60:	ldr	r2, [pc, #96]	; 18ec8 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   18e64:	add	r3, pc, r2
   18e68:	movw	r2, #1544	; 0x608
   18e6c:	bl	1298c <__assert_fail@plt>
   18e70:	mvn	r0, #0
   18e74:	str	r0, [fp, #-4]
   18e78:	b	18e90 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18e7c:	ldr	r0, [sp, #16]
   18e80:	ldr	r1, [sp]
   18e84:	str	r0, [r1]
   18e88:	movw	r0, #0
   18e8c:	str	r0, [fp, #-4]
   18e90:	ldr	r0, [fp, #-4]
   18e94:	mov	sp, fp
   18e98:	pop	{fp, pc}
   18e9c:	andeq	r9, r0, r0, asr #31
   18ea0:	andeq	r9, r0, ip, lsl #15
   18ea4:	andeq	sl, r0, r2, lsr r3
   18ea8:	andeq	sl, r0, r1, lsr #6
   18eac:	andeq	r9, r0, r8, lsl #14
   18eb0:	andeq	sl, r0, lr, lsr #5
   18eb4:	andeq	sl, r0, r8, lsr r2
   18eb8:	muleq	r0, r8, r6
   18ebc:	andeq	sl, r0, lr, lsr r2
   18ec0:	andeq	sl, r0, ip, asr #3
   18ec4:	andeq	r9, r0, ip, lsr #12
   18ec8:	ldrdeq	sl, [r0], -r2

00018ecc <flatcc_builder_create_union_vector@@Base>:
   18ecc:	push	{fp, lr}
   18ed0:	mov	fp, sp
   18ed4:	sub	sp, sp, #48	; 0x30
   18ed8:	str	r1, [fp, #-4]
   18edc:	str	r2, [fp, #-8]
   18ee0:	str	r3, [fp, #-12]
   18ee4:	mov	r1, r0
   18ee8:	str	r0, [sp, #12]
   18eec:	mov	r0, r1
   18ef0:	movw	r1, #0
   18ef4:	and	r1, r1, #255	; 0xff
   18ef8:	movw	r2, #8
   18efc:	bl	1295c <memset@plt>
   18f00:	ldr	r0, [fp, #-4]
   18f04:	bl	16ef4 <flatcc_builder_start_offset_vector@@Base>
   18f08:	cmp	r0, #0
   18f0c:	beq	18f14 <flatcc_builder_create_union_vector@@Base+0x48>
   18f10:	b	18ff8 <flatcc_builder_create_union_vector@@Base+0x12c>
   18f14:	ldr	r0, [fp, #-4]
   18f18:	ldr	r1, [fp, #-12]
   18f1c:	bl	16688 <flatcc_builder_extend_offset_vector@@Base>
   18f20:	movw	r1, #0
   18f24:	cmp	r1, r0
   18f28:	bne	18f30 <flatcc_builder_create_union_vector@@Base+0x64>
   18f2c:	b	18ff8 <flatcc_builder_create_union_vector@@Base+0x12c>
   18f30:	ldr	r0, [fp, #-4]
   18f34:	ldr	r1, [fp, #-12]
   18f38:	mov	r2, r1
   18f3c:	str	r2, [sp, #8]
   18f40:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   18f44:	str	r0, [fp, #-16]
   18f48:	movw	r1, #0
   18f4c:	cmp	r1, r0
   18f50:	bne	18f58 <flatcc_builder_create_union_vector@@Base+0x8c>
   18f54:	b	18ff8 <flatcc_builder_create_union_vector@@Base+0x12c>
   18f58:	ldr	r0, [fp, #-4]
   18f5c:	bl	187ec <flatcc_builder_offset_vector_edit@@Base>
   18f60:	str	r0, [fp, #-20]	; 0xffffffec
   18f64:	movw	r0, #0
   18f68:	str	r0, [sp, #24]
   18f6c:	ldr	r0, [sp, #24]
   18f70:	ldr	r1, [fp, #-12]
   18f74:	cmp	r0, r1
   18f78:	bcs	18fbc <flatcc_builder_create_union_vector@@Base+0xf0>
   18f7c:	ldr	r0, [fp, #-8]
   18f80:	ldr	r1, [sp, #24]
   18f84:	ldrb	r0, [r0, r1, lsl #3]
   18f88:	ldr	r2, [fp, #-16]
   18f8c:	strb	r0, [r2, r1]
   18f90:	ldr	r0, [fp, #-8]
   18f94:	ldr	r1, [sp, #24]
   18f98:	add	r0, r0, r1, lsl #3
   18f9c:	ldr	r0, [r0, #4]
   18fa0:	ldr	r2, [fp, #-20]	; 0xffffffec
   18fa4:	add	r1, r2, r1, lsl #2
   18fa8:	str	r0, [r1]
   18fac:	ldr	r0, [sp, #24]
   18fb0:	add	r0, r0, #1
   18fb4:	str	r0, [sp, #24]
   18fb8:	b	18f6c <flatcc_builder_create_union_vector@@Base+0xa0>
   18fbc:	ldr	r1, [fp, #-4]
   18fc0:	ldr	r2, [fp, #-16]
   18fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   18fc8:	ldr	r0, [fp, #-12]
   18fcc:	mov	ip, sp
   18fd0:	str	r0, [ip]
   18fd4:	add	r0, sp, #16
   18fd8:	bl	19000 <flatcc_builder_create_union_vector_direct@@Base>
   18fdc:	ldr	r0, [sp, #16]
   18fe0:	ldr	r1, [sp, #12]
   18fe4:	str	r0, [r1]
   18fe8:	ldr	r0, [sp, #20]
   18fec:	str	r0, [r1, #4]
   18ff0:	ldr	r0, [fp, #-4]
   18ff4:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   18ff8:	mov	sp, fp
   18ffc:	pop	{fp, pc}

00019000 <flatcc_builder_create_union_vector_direct@@Base>:
   19000:	push	{fp, lr}
   19004:	mov	fp, sp
   19008:	sub	sp, sp, #32
   1900c:	ldr	ip, [fp, #8]
   19010:	str	r1, [fp, #-4]
   19014:	str	r2, [fp, #-8]
   19018:	str	r3, [fp, #-12]
   1901c:	mov	r1, r0
   19020:	str	r0, [sp, #16]
   19024:	mov	r0, r1
   19028:	movw	r1, #0
   1902c:	and	r1, r1, #255	; 0xff
   19030:	movw	r2, #8
   19034:	str	ip, [sp, #12]
   19038:	bl	1295c <memset@plt>
   1903c:	ldr	r0, [fp, #-4]
   19040:	ldr	r1, [fp, #-12]
   19044:	ldr	r2, [fp, #8]
   19048:	ldr	r3, [fp, #-8]
   1904c:	bl	18444 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   19050:	ldr	r1, [sp, #16]
   19054:	str	r0, [r1, #4]
   19058:	movw	r2, #0
   1905c:	cmp	r2, r0
   19060:	bne	19068 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   19064:	b	190ac <flatcc_builder_create_union_vector_direct@@Base+0xac>
   19068:	ldr	r0, [fp, #-4]
   1906c:	ldr	r1, [fp, #-8]
   19070:	ldr	r2, [fp, #8]
   19074:	movw	r3, #1
   19078:	movw	ip, #1
   1907c:	uxth	ip, ip
   19080:	str	ip, [sp]
   19084:	mvn	ip, #0
   19088:	str	ip, [sp, #4]
   1908c:	bl	18134 <flatcc_builder_create_vector@@Base>
   19090:	ldr	r1, [sp, #16]
   19094:	str	r0, [r1]
   19098:	movw	r2, #0
   1909c:	cmp	r2, r0
   190a0:	bne	190a8 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   190a4:	b	190ac <flatcc_builder_create_union_vector_direct@@Base+0xac>
   190a8:	b	190ac <flatcc_builder_create_union_vector_direct@@Base+0xac>
   190ac:	mov	sp, fp
   190b0:	pop	{fp, pc}

000190b4 <flatcc_builder_start_union_vector@@Base>:
   190b4:	push	{fp, lr}
   190b8:	mov	fp, sp
   190bc:	sub	sp, sp, #8
   190c0:	str	r0, [sp]
   190c4:	ldr	r0, [sp]
   190c8:	movw	r1, #4
   190cc:	uxth	r1, r1
   190d0:	bl	15ccc <flatcc_builder_start_buffer@@Base+0x178>
   190d4:	cmp	r0, #0
   190d8:	beq	190e8 <flatcc_builder_start_union_vector@@Base+0x34>
   190dc:	mvn	r0, #0
   190e0:	str	r0, [sp, #4]
   190e4:	b	1912c <flatcc_builder_start_union_vector@@Base+0x78>
   190e8:	ldr	r0, [sp]
   190ec:	ldr	r0, [r0, #32]
   190f0:	movw	r1, #8
   190f4:	str	r1, [r0, #16]
   190f8:	ldr	r0, [sp]
   190fc:	ldr	r0, [r0, #32]
   19100:	movw	r1, #0
   19104:	str	r1, [r0, #20]
   19108:	ldr	r0, [sp]
   1910c:	ldr	r0, [r0, #32]
   19110:	movw	r1, #7
   19114:	strh	r1, [r0, #14]
   19118:	ldr	r0, [sp]
   1911c:	mvn	r1, #3
   19120:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   19124:	movw	r0, #0
   19128:	str	r0, [sp, #4]
   1912c:	ldr	r0, [sp, #4]
   19130:	mov	sp, fp
   19134:	pop	{fp, pc}

00019138 <flatcc_builder_end_union_vector@@Base>:
   19138:	push	{fp, lr}
   1913c:	mov	fp, sp
   19140:	sub	sp, sp, #40	; 0x28
   19144:	str	r1, [fp, #-4]
   19148:	mov	r1, r0
   1914c:	str	r0, [sp, #4]
   19150:	mov	r0, r1
   19154:	movw	r1, #0
   19158:	and	r1, r1, #255	; 0xff
   1915c:	movw	r2, #8
   19160:	bl	1295c <memset@plt>
   19164:	ldr	r0, [fp, #-4]
   19168:	ldr	r0, [r0, #32]
   1916c:	ldrh	r0, [r0, #14]
   19170:	cmp	r0, #7
   19174:	bne	1917c <flatcc_builder_end_union_vector@@Base+0x44>
   19178:	b	1919c <flatcc_builder_end_union_vector@@Base+0x64>
   1917c:	ldr	r0, [pc, #260]	; 19288 <flatcc_builder_end_union_vector@@Base+0x150>
   19180:	add	r0, pc, r0
   19184:	ldr	r1, [pc, #256]	; 1928c <flatcc_builder_end_union_vector@@Base+0x154>
   19188:	add	r1, pc, r1
   1918c:	ldr	r2, [pc, #252]	; 19290 <flatcc_builder_end_union_vector@@Base+0x158>
   19190:	add	r3, pc, r2
   19194:	movw	r2, #1617	; 0x651
   19198:	bl	1298c <__assert_fail@plt>
   1919c:	ldr	r0, [fp, #-4]
   191a0:	bl	19294 <flatcc_builder_union_vector_count@@Base>
   191a4:	str	r0, [sp, #16]
   191a8:	ldr	r0, [fp, #-4]
   191ac:	ldr	lr, [sp, #16]
   191b0:	movw	r1, #5
   191b4:	mul	r1, lr, r1
   191b8:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   191bc:	str	r0, [fp, #-16]
   191c0:	movw	r1, #0
   191c4:	cmp	r1, r0
   191c8:	bne	191d0 <flatcc_builder_end_union_vector@@Base+0x98>
   191cc:	b	19280 <flatcc_builder_end_union_vector@@Base+0x148>
   191d0:	ldr	r0, [fp, #-16]
   191d4:	ldr	r1, [sp, #16]
   191d8:	add	r0, r0, r1, lsl #2
   191dc:	str	r0, [fp, #-8]
   191e0:	ldr	r0, [fp, #-4]
   191e4:	bl	192b0 <flatcc_builder_union_vector_edit@@Base>
   191e8:	str	r0, [fp, #-12]
   191ec:	movw	r0, #0
   191f0:	str	r0, [sp, #20]
   191f4:	ldr	r0, [sp, #20]
   191f8:	ldr	r1, [sp, #16]
   191fc:	cmp	r0, r1
   19200:	bcs	19244 <flatcc_builder_end_union_vector@@Base+0x10c>
   19204:	ldr	r0, [fp, #-12]
   19208:	ldr	r1, [sp, #20]
   1920c:	ldrb	r0, [r0, r1, lsl #3]
   19210:	ldr	r2, [fp, #-8]
   19214:	strb	r0, [r2, r1]
   19218:	ldr	r0, [fp, #-12]
   1921c:	ldr	r1, [sp, #20]
   19220:	add	r0, r0, r1, lsl #3
   19224:	ldr	r0, [r0, #4]
   19228:	ldr	r2, [fp, #-16]
   1922c:	add	r1, r2, r1, lsl #2
   19230:	str	r0, [r1]
   19234:	ldr	r0, [sp, #20]
   19238:	add	r0, r0, #1
   1923c:	str	r0, [sp, #20]
   19240:	b	191f4 <flatcc_builder_end_union_vector@@Base+0xbc>
   19244:	ldr	r1, [fp, #-4]
   19248:	ldr	r2, [fp, #-8]
   1924c:	ldr	r3, [fp, #-16]
   19250:	ldr	r0, [sp, #16]
   19254:	mov	ip, sp
   19258:	str	r0, [ip]
   1925c:	add	r0, sp, #8
   19260:	bl	19000 <flatcc_builder_create_union_vector_direct@@Base>
   19264:	ldr	r0, [sp, #8]
   19268:	ldr	r1, [sp, #4]
   1926c:	str	r0, [r1]
   19270:	ldr	r0, [sp, #12]
   19274:	str	r0, [r1, #4]
   19278:	ldr	r0, [fp, #-4]
   1927c:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   19280:	mov	sp, fp
   19284:	pop	{fp, pc}
   19288:	andeq	r9, r0, r1, asr #30
   1928c:	andeq	r9, r0, r0, lsl #6
   19290:	andeq	r9, r0, r3, ror #30

00019294 <flatcc_builder_union_vector_count@@Base>:
   19294:	sub	sp, sp, #4
   19298:	str	r0, [sp]
   1929c:	ldr	r0, [sp]
   192a0:	ldr	r0, [r0, #32]
   192a4:	ldr	r0, [r0, #20]
   192a8:	add	sp, sp, #4
   192ac:	bx	lr

000192b0 <flatcc_builder_union_vector_edit@@Base>:
   192b0:	sub	sp, sp, #4
   192b4:	str	r0, [sp]
   192b8:	ldr	r0, [sp]
   192bc:	ldr	r0, [r0, #16]
   192c0:	add	sp, sp, #4
   192c4:	bx	lr

000192c8 <flatcc_builder_extend_union_vector@@Base>:
   192c8:	push	{fp, lr}
   192cc:	mov	fp, sp
   192d0:	sub	sp, sp, #16
   192d4:	ldr	r2, [pc, #68]	; 19320 <flatcc_builder_extend_union_vector@@Base+0x58>
   192d8:	str	r0, [sp, #8]
   192dc:	str	r1, [sp, #4]
   192e0:	ldr	r0, [sp, #8]
   192e4:	ldr	r1, [sp, #4]
   192e8:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   192ec:	cmp	r0, #0
   192f0:	beq	19300 <flatcc_builder_extend_union_vector@@Base+0x38>
   192f4:	movw	r0, #0
   192f8:	str	r0, [fp, #-4]
   192fc:	b	19314 <flatcc_builder_extend_union_vector@@Base+0x4c>
   19300:	ldr	r0, [sp, #8]
   19304:	ldr	r1, [sp, #4]
   19308:	lsl	r1, r1, #3
   1930c:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   19310:	str	r0, [fp, #-4]
   19314:	ldr	r0, [fp, #-4]
   19318:	mov	sp, fp
   1931c:	pop	{fp, pc}
   19320:	svcne	0x00ffffff

00019324 <flatcc_builder_truncate_union_vector@@Base>:
   19324:	push	{fp, lr}
   19328:	mov	fp, sp
   1932c:	sub	sp, sp, #16
   19330:	str	r0, [sp, #8]
   19334:	str	r1, [sp, #4]
   19338:	ldr	r0, [sp, #8]
   1933c:	ldr	r0, [r0, #32]
   19340:	ldrh	r0, [r0, #14]
   19344:	cmp	r0, #7
   19348:	bne	19350 <flatcc_builder_truncate_union_vector@@Base+0x2c>
   1934c:	b	19370 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   19350:	ldr	r0, [pc, #192]	; 19418 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   19354:	add	r0, pc, r0
   19358:	ldr	r1, [pc, #188]	; 1941c <flatcc_builder_truncate_union_vector@@Base+0xf8>
   1935c:	add	r1, pc, r1
   19360:	ldr	r2, [pc, #184]	; 19420 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   19364:	add	r3, pc, r2
   19368:	movw	r2, #1665	; 0x681
   1936c:	bl	1298c <__assert_fail@plt>
   19370:	ldr	r0, [sp, #8]
   19374:	ldr	r0, [r0, #32]
   19378:	ldr	r0, [r0, #20]
   1937c:	ldr	r1, [sp, #4]
   19380:	cmp	r0, r1
   19384:	bcs	193d0 <flatcc_builder_truncate_union_vector@@Base+0xac>
   19388:	ldr	r0, [sp, #8]
   1938c:	ldr	r0, [r0, #32]
   19390:	ldr	r0, [r0, #20]
   19394:	ldr	r1, [sp, #4]
   19398:	cmp	r0, r1
   1939c:	bcc	193a4 <flatcc_builder_truncate_union_vector@@Base+0x80>
   193a0:	b	193c4 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   193a4:	ldr	r0, [pc, #120]	; 19424 <flatcc_builder_truncate_union_vector@@Base+0x100>
   193a8:	add	r0, pc, r0
   193ac:	ldr	r1, [pc, #116]	; 19428 <flatcc_builder_truncate_union_vector@@Base+0x104>
   193b0:	add	r1, pc, r1
   193b4:	ldr	r2, [pc, #112]	; 1942c <flatcc_builder_truncate_union_vector@@Base+0x108>
   193b8:	add	r3, pc, r2
   193bc:	movw	r2, #1666	; 0x682
   193c0:	bl	1298c <__assert_fail@plt>
   193c4:	mvn	r0, #0
   193c8:	str	r0, [fp, #-4]
   193cc:	b	1940c <flatcc_builder_truncate_union_vector@@Base+0xe8>
   193d0:	ldr	r0, [sp, #4]
   193d4:	ldr	r1, [sp, #8]
   193d8:	ldr	r1, [r1, #32]
   193dc:	ldr	r2, [r1, #20]
   193e0:	sub	r0, r2, r0
   193e4:	str	r0, [r1, #20]
   193e8:	ldr	r0, [sp, #8]
   193ec:	ldr	r1, [sp, #8]
   193f0:	ldr	r1, [r1, #32]
   193f4:	ldr	r1, [r1, #16]
   193f8:	ldr	r2, [sp, #4]
   193fc:	mul	r1, r1, r2
   19400:	bl	16bb8 <flatcc_builder_truncate_vector@@Base+0x10c>
   19404:	movw	r0, #0
   19408:	str	r0, [fp, #-4]
   1940c:	ldr	r0, [fp, #-4]
   19410:	mov	sp, fp
   19414:	pop	{fp, pc}
   19418:	andeq	r9, r0, sp, ror #26
   1941c:	andeq	r9, r0, ip, lsr #2
   19420:	andeq	r9, r0, r2, ror #27
   19424:	andeq	r9, r0, sp, ror r7
   19428:	ldrdeq	r9, [r0], -r8
   1942c:	andeq	r9, r0, lr, lsl #27

00019430 <flatcc_builder_union_vector_push@@Base>:
   19430:	push	{fp, lr}
   19434:	mov	fp, sp
   19438:	sub	sp, sp, #24
   1943c:	str	r1, [sp, #12]
   19440:	str	r2, [sp, #16]
   19444:	str	r0, [sp, #8]
   19448:	ldr	r0, [sp, #8]
   1944c:	ldr	r0, [r0, #32]
   19450:	ldrh	r0, [r0, #14]
   19454:	cmp	r0, #7
   19458:	bne	19460 <flatcc_builder_union_vector_push@@Base+0x30>
   1945c:	b	19480 <flatcc_builder_union_vector_push@@Base+0x50>
   19460:	ldr	r0, [pc, #160]	; 19508 <flatcc_builder_union_vector_push@@Base+0xd8>
   19464:	add	r0, pc, r0
   19468:	ldr	r1, [pc, #156]	; 1950c <flatcc_builder_union_vector_push@@Base+0xdc>
   1946c:	add	r1, pc, r1
   19470:	ldr	r2, [pc, #152]	; 19510 <flatcc_builder_union_vector_push@@Base+0xe0>
   19474:	add	r3, pc, r2
   19478:	movw	r2, #1677	; 0x68d
   1947c:	bl	1298c <__assert_fail@plt>
   19480:	ldr	r0, [pc, #140]	; 19514 <flatcc_builder_union_vector_push@@Base+0xe4>
   19484:	ldr	r1, [sp, #8]
   19488:	ldr	r1, [r1, #32]
   1948c:	ldr	r1, [r1, #20]
   19490:	cmp	r1, r0
   19494:	bne	194a4 <flatcc_builder_union_vector_push@@Base+0x74>
   19498:	movw	r0, #0
   1949c:	str	r0, [fp, #-4]
   194a0:	b	194fc <flatcc_builder_union_vector_push@@Base+0xcc>
   194a4:	ldr	r0, [sp, #8]
   194a8:	ldr	r0, [r0, #32]
   194ac:	ldr	r1, [r0, #20]
   194b0:	add	r1, r1, #1
   194b4:	str	r1, [r0, #20]
   194b8:	ldr	r0, [sp, #8]
   194bc:	movw	r1, #8
   194c0:	bl	161c0 <flatcc_builder_start_struct@@Base+0xfc>
   194c4:	str	r0, [sp, #4]
   194c8:	movw	r1, #0
   194cc:	cmp	r1, r0
   194d0:	bne	194e0 <flatcc_builder_union_vector_push@@Base+0xb0>
   194d4:	movw	r0, #0
   194d8:	str	r0, [fp, #-4]
   194dc:	b	194fc <flatcc_builder_union_vector_push@@Base+0xcc>
   194e0:	ldr	r0, [sp, #4]
   194e4:	ldr	r1, [sp, #12]
   194e8:	str	r1, [r0]
   194ec:	ldr	r1, [sp, #16]
   194f0:	str	r1, [r0, #4]
   194f4:	ldr	r0, [sp, #4]
   194f8:	str	r0, [fp, #-4]
   194fc:	ldr	r0, [fp, #-4]
   19500:	mov	sp, fp
   19504:	pop	{fp, pc}
   19508:	andeq	r9, r0, sp, asr ip
   1950c:	andeq	r9, r0, ip, lsl r0
   19510:	andeq	r9, r0, r7, lsl sp
   19514:	svcne	0x00ffffff

00019518 <flatcc_builder_append_union_vector@@Base>:
   19518:	push	{fp, lr}
   1951c:	mov	fp, sp
   19520:	sub	sp, sp, #16
   19524:	str	r0, [sp, #8]
   19528:	str	r1, [sp, #4]
   1952c:	str	r2, [sp]
   19530:	ldr	r0, [sp, #8]
   19534:	ldr	r0, [r0, #32]
   19538:	ldrh	r0, [r0, #14]
   1953c:	cmp	r0, #7
   19540:	bne	19548 <flatcc_builder_append_union_vector@@Base+0x30>
   19544:	b	19568 <flatcc_builder_append_union_vector@@Base+0x50>
   19548:	ldr	r0, [pc, #96]	; 195b0 <flatcc_builder_append_union_vector@@Base+0x98>
   1954c:	add	r0, pc, r0
   19550:	ldr	r1, [pc, #92]	; 195b4 <flatcc_builder_append_union_vector@@Base+0x9c>
   19554:	add	r1, pc, r1
   19558:	ldr	r2, [pc, #88]	; 195b8 <flatcc_builder_append_union_vector@@Base+0xa0>
   1955c:	add	r3, pc, r2
   19560:	movw	r2, #1692	; 0x69c
   19564:	bl	1298c <__assert_fail@plt>
   19568:	ldr	r2, [pc, #76]	; 195bc <flatcc_builder_append_union_vector@@Base+0xa4>
   1956c:	ldr	r0, [sp, #8]
   19570:	ldr	r1, [sp]
   19574:	bl	16384 <flatcc_builder_extend_vector@@Base+0x6c>
   19578:	cmp	r0, #0
   1957c:	beq	1958c <flatcc_builder_append_union_vector@@Base+0x74>
   19580:	movw	r0, #0
   19584:	str	r0, [fp, #-4]
   19588:	b	195a4 <flatcc_builder_append_union_vector@@Base+0x8c>
   1958c:	ldr	r0, [sp, #8]
   19590:	ldr	r1, [sp, #4]
   19594:	ldr	r2, [sp]
   19598:	lsl	r2, r2, #3
   1959c:	bl	1656c <flatcc_builder_vector_push@@Base+0x110>
   195a0:	str	r0, [fp, #-4]
   195a4:	ldr	r0, [fp, #-4]
   195a8:	mov	sp, fp
   195ac:	pop	{fp, pc}
   195b0:	andeq	r9, r0, r5, ror fp
   195b4:	andeq	r8, r0, r4, lsr pc
   195b8:	muleq	r0, ip, ip
   195bc:	svcne	0x00ffffff

000195c0 <flatcc_builder_create_string@@Base>:
   195c0:	push	{fp, lr}
   195c4:	mov	fp, sp
   195c8:	sub	sp, sp, #96	; 0x60
   195cc:	str	r0, [fp, #-8]
   195d0:	str	r1, [fp, #-12]
   195d4:	str	r2, [fp, #-16]
   195d8:	ldr	r0, [fp, #-16]
   195dc:	cmn	r0, #1
   195e0:	bls	195f0 <flatcc_builder_create_string@@Base+0x30>
   195e4:	movw	r0, #0
   195e8:	str	r0, [fp, #-4]
   195ec:	b	1970c <flatcc_builder_create_string@@Base+0x14c>
   195f0:	ldr	r0, [fp, #-16]
   195f4:	bl	154f4 <flatcc_builder_embed_buffer@@Base+0x388>
   195f8:	str	r0, [fp, #-24]	; 0xffffffe8
   195fc:	ldr	r0, [fp, #-8]
   19600:	ldr	lr, [fp, #-16]
   19604:	add	r1, lr, #1
   19608:	mov	r2, #4
   1960c:	bl	154c0 <flatcc_builder_embed_buffer@@Base+0x354>
   19610:	add	r0, r0, #1
   19614:	str	r0, [fp, #-20]	; 0xffffffec
   19618:	mov	r0, #0
   1961c:	str	r0, [sp]
   19620:	str	r0, [sp, #4]
   19624:	ldr	r0, [sp]
   19628:	add	r0, r0, #4
   1962c:	str	r0, [sp]
   19630:	mov	r0, sp
   19634:	add	r0, r0, #8
   19638:	ldr	r1, [sp, #4]
   1963c:	sub	r2, fp, #24
   19640:	str	r2, [r0, r1, lsl #3]
   19644:	ldr	r1, [sp, #4]
   19648:	add	r0, r0, r1, lsl #3
   1964c:	movw	r1, #4
   19650:	str	r1, [r0, #4]
   19654:	ldr	r0, [sp, #4]
   19658:	add	r0, r0, #1
   1965c:	str	r0, [sp, #4]
   19660:	ldr	r0, [fp, #-16]
   19664:	cmp	r0, #0
   19668:	bls	196ac <flatcc_builder_create_string@@Base+0xec>
   1966c:	ldr	r0, [fp, #-16]
   19670:	ldr	r1, [sp]
   19674:	add	r0, r1, r0
   19678:	str	r0, [sp]
   1967c:	ldr	r0, [fp, #-12]
   19680:	mov	r1, sp
   19684:	add	r1, r1, #8
   19688:	ldr	r2, [sp, #4]
   1968c:	str	r0, [r1, r2, lsl #3]
   19690:	ldr	r0, [fp, #-16]
   19694:	ldr	r2, [sp, #4]
   19698:	add	r1, r1, r2, lsl #3
   1969c:	str	r0, [r1, #4]
   196a0:	ldr	r0, [sp, #4]
   196a4:	add	r0, r0, #1
   196a8:	str	r0, [sp, #4]
   196ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   196b0:	cmp	r0, #0
   196b4:	bls	196fc <flatcc_builder_create_string@@Base+0x13c>
   196b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   196bc:	ldr	r1, [sp]
   196c0:	add	r0, r1, r0
   196c4:	str	r0, [sp]
   196c8:	mov	r0, sp
   196cc:	add	r0, r0, #8
   196d0:	ldr	r1, [sp, #4]
   196d4:	ldr	r2, [pc, #60]	; 19718 <flatcc_builder_create_string@@Base+0x158>
   196d8:	ldr	r2, [pc, r2]
   196dc:	str	r2, [r0, r1, lsl #3]
   196e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   196e4:	ldr	r2, [sp, #4]
   196e8:	add	r0, r0, r2, lsl #3
   196ec:	str	r1, [r0, #4]
   196f0:	ldr	r0, [sp, #4]
   196f4:	add	r0, r0, #1
   196f8:	str	r0, [sp, #4]
   196fc:	ldr	r0, [fp, #-8]
   19700:	mov	r1, sp
   19704:	bl	15508 <flatcc_builder_embed_buffer@@Base+0x39c>
   19708:	str	r0, [fp, #-4]
   1970c:	ldr	r0, [fp, #-4]
   19710:	mov	sp, fp
   19714:	pop	{fp, pc}
   19718:	andeq	fp, r1, r4, ror r9

0001971c <flatcc_builder_create_string_str@@Base>:
   1971c:	push	{fp, lr}
   19720:	mov	fp, sp
   19724:	sub	sp, sp, #24
   19728:	str	r0, [fp, #-4]
   1972c:	str	r1, [fp, #-8]
   19730:	ldr	r0, [fp, #-4]
   19734:	ldr	r1, [fp, #-8]
   19738:	ldr	r2, [fp, #-8]
   1973c:	str	r0, [sp, #12]
   19740:	mov	r0, r2
   19744:	str	r1, [sp, #8]
   19748:	bl	12938 <strlen@plt>
   1974c:	ldr	r1, [sp, #12]
   19750:	str	r0, [sp, #4]
   19754:	mov	r0, r1
   19758:	ldr	r1, [sp, #8]
   1975c:	ldr	r2, [sp, #4]
   19760:	bl	195c0 <flatcc_builder_create_string@@Base>
   19764:	mov	sp, fp
   19768:	pop	{fp, pc}

0001976c <flatcc_builder_create_string_strn@@Base>:
   1976c:	push	{fp, lr}
   19770:	mov	fp, sp
   19774:	sub	sp, sp, #24
   19778:	str	r0, [fp, #-4]
   1977c:	str	r1, [fp, #-8]
   19780:	str	r2, [sp, #12]
   19784:	ldr	r0, [fp, #-4]
   19788:	ldr	r1, [fp, #-8]
   1978c:	ldr	r2, [fp, #-8]
   19790:	ldr	r3, [sp, #12]
   19794:	str	r0, [sp, #8]
   19798:	mov	r0, r2
   1979c:	str	r1, [sp, #4]
   197a0:	mov	r1, r3
   197a4:	bl	16a4c <flatcc_builder_append_string_strn@@Base+0x5c>
   197a8:	ldr	r1, [sp, #8]
   197ac:	str	r0, [sp]
   197b0:	mov	r0, r1
   197b4:	ldr	r1, [sp, #4]
   197b8:	ldr	r2, [sp]
   197bc:	bl	195c0 <flatcc_builder_create_string@@Base>
   197c0:	mov	sp, fp
   197c4:	pop	{fp, pc}

000197c8 <flatcc_builder_end_string@@Base>:
   197c8:	push	{fp, lr}
   197cc:	mov	fp, sp
   197d0:	sub	sp, sp, #16
   197d4:	str	r0, [sp, #8]
   197d8:	ldr	r0, [sp, #8]
   197dc:	ldr	r0, [r0, #32]
   197e0:	ldrh	r0, [r0, #14]
   197e4:	cmp	r0, #6
   197e8:	bne	197f0 <flatcc_builder_end_string@@Base+0x28>
   197ec:	b	19810 <flatcc_builder_end_string@@Base+0x48>
   197f0:	ldr	r0, [pc, #168]	; 198a0 <flatcc_builder_end_string@@Base+0xd8>
   197f4:	add	r0, pc, r0
   197f8:	ldr	r1, [pc, #164]	; 198a4 <flatcc_builder_end_string@@Base+0xdc>
   197fc:	add	r1, pc, r1
   19800:	ldr	r2, [pc, #160]	; 198a8 <flatcc_builder_end_string@@Base+0xe0>
   19804:	add	r3, pc, r2
   19808:	movw	r2, #1732	; 0x6c4
   1980c:	bl	1298c <__assert_fail@plt>
   19810:	ldr	r0, [sp, #8]
   19814:	ldr	r0, [r0, #32]
   19818:	ldr	r0, [r0, #20]
   1981c:	ldr	r1, [sp, #8]
   19820:	ldr	r1, [r1, #20]
   19824:	cmp	r0, r1
   19828:	bne	19830 <flatcc_builder_end_string@@Base+0x68>
   1982c:	b	19850 <flatcc_builder_end_string@@Base+0x88>
   19830:	ldr	r0, [pc, #116]	; 198ac <flatcc_builder_end_string@@Base+0xe4>
   19834:	add	r0, pc, r0
   19838:	ldr	r1, [pc, #112]	; 198b0 <flatcc_builder_end_string@@Base+0xe8>
   1983c:	add	r1, pc, r1
   19840:	ldr	r2, [pc, #108]	; 198b4 <flatcc_builder_end_string@@Base+0xec>
   19844:	add	r3, pc, r2
   19848:	movw	r2, #1733	; 0x6c5
   1984c:	bl	1298c <__assert_fail@plt>
   19850:	ldr	r0, [sp, #8]
   19854:	ldr	r1, [sp, #8]
   19858:	ldr	r1, [r1, #16]
   1985c:	ldr	r2, [sp, #8]
   19860:	ldr	r2, [r2, #20]
   19864:	bl	195c0 <flatcc_builder_create_string@@Base>
   19868:	str	r0, [sp, #4]
   1986c:	movw	r1, #0
   19870:	cmp	r1, r0
   19874:	bne	19884 <flatcc_builder_end_string@@Base+0xbc>
   19878:	movw	r0, #0
   1987c:	str	r0, [fp, #-4]
   19880:	b	19894 <flatcc_builder_end_string@@Base+0xcc>
   19884:	ldr	r0, [sp, #8]
   19888:	bl	16008 <flatcc_builder_end_buffer@@Base+0x170>
   1988c:	ldr	r0, [sp, #4]
   19890:	str	r0, [fp, #-4]
   19894:	ldr	r0, [fp, #-4]
   19898:	mov	sp, fp
   1989c:	pop	{fp, pc}
   198a0:	ldrdeq	r9, [r0], -r0
   198a4:	andeq	r8, r0, ip, lsl #25
   198a8:	andeq	r9, r0, r3, ror sl
   198ac:	andeq	r9, r0, r6, lsl #21
   198b0:	andeq	r8, r0, ip, asr #24
   198b4:	andeq	r9, r0, r3, lsr sl

000198b8 <flatcc_builder_string_edit@@Base>:
   198b8:	sub	sp, sp, #4
   198bc:	str	r0, [sp]
   198c0:	ldr	r0, [sp]
   198c4:	ldr	r0, [r0, #16]
   198c8:	add	sp, sp, #4
   198cc:	bx	lr

000198d0 <flatcc_builder_string_len@@Base>:
   198d0:	sub	sp, sp, #4
   198d4:	str	r0, [sp]
   198d8:	ldr	r0, [sp]
   198dc:	ldr	r0, [r0, #32]
   198e0:	ldr	r0, [r0, #20]
   198e4:	add	sp, sp, #4
   198e8:	bx	lr
   198ec:	push	{fp, lr}
   198f0:	mov	fp, sp
   198f4:	sub	sp, sp, #24
   198f8:	str	r0, [fp, #-8]
   198fc:	str	r1, [sp, #12]
   19900:	strh	r2, [sp, #10]
   19904:	strh	r3, [sp, #8]
   19908:	ldr	r0, [fp, #-8]
   1990c:	ldr	r0, [r0, #20]
   19910:	ldrh	r1, [sp, #10]
   19914:	add	r0, r0, r1
   19918:	sub	r0, r0, #1
   1991c:	ldrh	r1, [sp, #10]
   19920:	sub	r1, r1, #1
   19924:	mvn	r2, #0
   19928:	eor	r1, r1, r2
   1992c:	and	r0, r0, r1
   19930:	str	r0, [sp, #4]
   19934:	ldr	r0, [sp, #4]
   19938:	ldr	r1, [sp, #12]
   1993c:	add	r0, r0, r1
   19940:	ldr	r1, [fp, #-8]
   19944:	str	r0, [r1, #20]
   19948:	ldr	r1, [fp, #-8]
   1994c:	ldr	r1, [r1, #24]
   19950:	cmp	r0, r1
   19954:	bcc	19988 <flatcc_builder_string_len@@Base+0xb8>
   19958:	ldr	r0, [fp, #-8]
   1995c:	ldr	r1, [fp, #-8]
   19960:	ldr	r1, [r1, #20]
   19964:	add	r1, r1, #1
   19968:	movw	r2, #65532	; 0xfffc
   1996c:	bl	1a330 <flatcc_builder_get_emit_context@@Base+0x40>
   19970:	cmp	r0, #0
   19974:	beq	19984 <flatcc_builder_string_len@@Base+0xb4>
   19978:	movw	r0, #0
   1997c:	str	r0, [fp, #-4]
   19980:	b	199dc <flatcc_builder_string_len@@Base+0x10c>
   19984:	b	19988 <flatcc_builder_string_len@@Base+0xb8>
   19988:	ldr	r0, [sp, #4]
   1998c:	add	r0, r0, #4
   19990:	ldr	r1, [fp, #-8]
   19994:	ldr	r1, [r1, #4]
   19998:	ldrh	r2, [sp, #8]
   1999c:	add	r1, r1, r2, lsl #1
   199a0:	strh	r0, [r1]
   199a4:	ldrh	r0, [sp, #8]
   199a8:	ldr	r1, [fp, #-8]
   199ac:	ldrh	r1, [r1, #8]
   199b0:	cmp	r0, r1
   199b4:	blt	199c8 <flatcc_builder_string_len@@Base+0xf8>
   199b8:	ldrh	r0, [sp, #8]
   199bc:	add	r0, r0, #1
   199c0:	ldr	r1, [fp, #-8]
   199c4:	strh	r0, [r1, #8]
   199c8:	ldr	r0, [fp, #-8]
   199cc:	ldr	r0, [r0, #16]
   199d0:	ldr	r1, [sp, #4]
   199d4:	add	r0, r0, r1
   199d8:	str	r0, [fp, #-4]
   199dc:	ldr	r0, [fp, #-4]
   199e0:	mov	sp, fp
   199e4:	pop	{fp, pc}

000199e8 <flatcc_builder_table_edit@@Base>:
   199e8:	push	{fp, lr}
   199ec:	mov	fp, sp
   199f0:	sub	sp, sp, #8
   199f4:	str	r0, [sp, #4]
   199f8:	str	r1, [sp]
   199fc:	ldr	r0, [sp, #4]
   19a00:	ldr	r0, [r0, #32]
   19a04:	ldrh	r0, [r0, #14]
   19a08:	cmp	r0, #3
   19a0c:	bne	19a14 <flatcc_builder_table_edit@@Base+0x2c>
   19a10:	b	19a34 <flatcc_builder_table_edit@@Base+0x4c>
   19a14:	ldr	r0, [pc, #68]	; 19a60 <flatcc_builder_table_edit@@Base+0x78>
   19a18:	add	r0, pc, r0
   19a1c:	ldr	r1, [pc, #64]	; 19a64 <flatcc_builder_table_edit@@Base+0x7c>
   19a20:	add	r1, pc, r1
   19a24:	ldr	r2, [pc, #60]	; 19a68 <flatcc_builder_table_edit@@Base+0x80>
   19a28:	add	r3, pc, r2
   19a2c:	movw	r2, #1794	; 0x702
   19a30:	bl	1298c <__assert_fail@plt>
   19a34:	ldr	r0, [sp, #4]
   19a38:	ldr	r0, [r0, #16]
   19a3c:	ldr	r1, [sp, #4]
   19a40:	ldr	r1, [r1, #20]
   19a44:	add	r0, r0, r1
   19a48:	ldr	r1, [sp]
   19a4c:	movw	r2, #0
   19a50:	sub	r1, r2, r1
   19a54:	add	r0, r0, r1
   19a58:	mov	sp, fp
   19a5c:	pop	{fp, pc}
   19a60:	muleq	r0, ip, r2
   19a64:	andeq	r8, r0, r8, ror #20
   19a68:	andeq	r9, r0, r4, asr #18

00019a6c <flatcc_builder_table_add_copy@@Base>:
   19a6c:	push	{fp, lr}
   19a70:	mov	fp, sp
   19a74:	sub	sp, sp, #24
   19a78:	ldr	ip, [fp, #8]
   19a7c:	str	r0, [fp, #-4]
   19a80:	str	r1, [fp, #-8]
   19a84:	str	r2, [sp, #12]
   19a88:	str	r3, [sp, #8]
   19a8c:	strh	ip, [sp, #6]
   19a90:	ldr	r0, [fp, #-4]
   19a94:	ldr	r1, [fp, #-8]
   19a98:	ldr	r2, [sp, #8]
   19a9c:	ldrh	r3, [sp, #6]
   19aa0:	bl	18b40 <flatcc_builder_table_add@@Base>
   19aa4:	str	r0, [sp]
   19aa8:	movw	r1, #0
   19aac:	cmp	r0, r1
   19ab0:	beq	19ac4 <flatcc_builder_table_add_copy@@Base+0x58>
   19ab4:	ldr	r0, [sp]
   19ab8:	ldr	r1, [sp, #12]
   19abc:	ldr	r2, [sp, #8]
   19ac0:	bl	128d8 <memcpy@plt>
   19ac4:	ldr	r0, [sp]
   19ac8:	mov	sp, fp
   19acc:	pop	{fp, pc}
   19ad0:	push	{fp, lr}
   19ad4:	mov	fp, sp
   19ad8:	sub	sp, sp, #16
   19adc:	str	r0, [sp, #8]
   19ae0:	strh	r1, [sp, #6]
   19ae4:	ldr	r0, [sp, #8]
   19ae8:	ldr	r0, [r0, #20]
   19aec:	add	r0, r0, #4
   19af0:	sub	r0, r0, #1
   19af4:	mvn	r1, #3
   19af8:	and	r0, r0, r1
   19afc:	str	r0, [sp]
   19b00:	ldr	r0, [sp]
   19b04:	add	r0, r0, #4
   19b08:	ldr	r1, [sp, #8]
   19b0c:	str	r0, [r1, #20]
   19b10:	ldr	r1, [sp, #8]
   19b14:	ldr	r1, [r1, #24]
   19b18:	cmp	r0, r1
   19b1c:	bls	19b4c <flatcc_builder_table_add_copy@@Base+0xe0>
   19b20:	ldr	r0, [sp, #8]
   19b24:	ldr	r1, [sp, #8]
   19b28:	ldr	r1, [r1, #20]
   19b2c:	movw	r2, #65532	; 0xfffc
   19b30:	bl	1a330 <flatcc_builder_get_emit_context@@Base+0x40>
   19b34:	cmp	r0, #0
   19b38:	beq	19b48 <flatcc_builder_table_add_copy@@Base+0xdc>
   19b3c:	movw	r0, #0
   19b40:	str	r0, [fp, #-4]
   19b44:	b	19bb8 <flatcc_builder_table_add_copy@@Base+0x14c>
   19b48:	b	19b4c <flatcc_builder_table_add_copy@@Base+0xe0>
   19b4c:	ldr	r0, [sp]
   19b50:	add	r0, r0, #4
   19b54:	ldr	r1, [sp, #8]
   19b58:	ldr	r1, [r1, #4]
   19b5c:	ldrh	r2, [sp, #6]
   19b60:	add	r1, r1, r2, lsl #1
   19b64:	strh	r0, [r1]
   19b68:	ldrh	r0, [sp, #6]
   19b6c:	ldr	r1, [sp, #8]
   19b70:	ldrh	r1, [r1, #8]
   19b74:	cmp	r0, r1
   19b78:	blt	19b8c <flatcc_builder_table_add_copy@@Base+0x120>
   19b7c:	ldrh	r0, [sp, #6]
   19b80:	add	r0, r0, #1
   19b84:	ldr	r1, [sp, #8]
   19b88:	strh	r0, [r1, #8]
   19b8c:	ldr	r0, [sp]
   19b90:	ldr	r1, [sp, #8]
   19b94:	ldr	r2, [r1]
   19b98:	add	r3, r2, #2
   19b9c:	str	r3, [r1]
   19ba0:	strh	r0, [r2]
   19ba4:	ldr	r0, [sp, #8]
   19ba8:	ldr	r0, [r0, #16]
   19bac:	ldr	r1, [sp]
   19bb0:	add	r0, r0, r1
   19bb4:	str	r0, [fp, #-4]
   19bb8:	ldr	r0, [fp, #-4]
   19bbc:	mov	sp, fp
   19bc0:	pop	{fp, pc}

00019bc4 <flatcc_builder_push_buffer_alignment@@Base>:
   19bc4:	sub	sp, sp, #8
   19bc8:	str	r0, [sp, #4]
   19bcc:	ldr	r0, [sp, #4]
   19bd0:	ldrh	r0, [r0, #128]	; 0x80
   19bd4:	strh	r0, [sp, #2]
   19bd8:	ldr	r0, [sp, #4]
   19bdc:	movw	r1, #4
   19be0:	strh	r1, [r0, #128]	; 0x80
   19be4:	ldrh	r0, [sp, #2]
   19be8:	add	sp, sp, #8
   19bec:	bx	lr

00019bf0 <flatcc_builder_pop_buffer_alignment@@Base>:
   19bf0:	push	{fp, lr}
   19bf4:	mov	fp, sp
   19bf8:	sub	sp, sp, #8
   19bfc:	str	r0, [sp, #4]
   19c00:	strh	r1, [sp, #2]
   19c04:	ldr	r0, [sp, #4]
   19c08:	ldrh	r1, [sp, #2]
   19c0c:	bl	159d4 <flatcc_builder_create_buffer@@Base+0x3a8>
   19c10:	mov	sp, fp
   19c14:	pop	{fp, pc}

00019c18 <flatcc_builder_get_buffer_alignment@@Base>:
   19c18:	sub	sp, sp, #4
   19c1c:	str	r0, [sp]
   19c20:	ldr	r0, [sp]
   19c24:	ldrh	r0, [r0, #128]	; 0x80
   19c28:	add	sp, sp, #4
   19c2c:	bx	lr

00019c30 <flatcc_builder_set_vtable_clustering@@Base>:
   19c30:	sub	sp, sp, #8
   19c34:	str	r0, [sp, #4]
   19c38:	str	r1, [sp]
   19c3c:	ldr	r0, [sp]
   19c40:	cmp	r0, #0
   19c44:	movw	r0, #0
   19c48:	movne	r0, #1
   19c4c:	mvn	r1, #0
   19c50:	eor	r0, r0, r1
   19c54:	and	r0, r0, #1
   19c58:	ldr	r1, [sp, #4]
   19c5c:	str	r0, [r1, #180]	; 0xb4
   19c60:	add	sp, sp, #8
   19c64:	bx	lr

00019c68 <flatcc_builder_set_block_align@@Base>:
   19c68:	sub	sp, sp, #8
   19c6c:	str	r0, [sp, #4]
   19c70:	strh	r1, [sp, #2]
   19c74:	ldrh	r0, [sp, #2]
   19c78:	ldr	r1, [sp, #4]
   19c7c:	strh	r0, [r1, #132]	; 0x84
   19c80:	add	sp, sp, #8
   19c84:	bx	lr

00019c88 <flatcc_builder_get_level@@Base>:
   19c88:	sub	sp, sp, #4
   19c8c:	str	r0, [sp]
   19c90:	ldr	r0, [sp]
   19c94:	ldr	r0, [r0, #156]	; 0x9c
   19c98:	add	sp, sp, #4
   19c9c:	bx	lr

00019ca0 <flatcc_builder_set_max_level@@Base>:
   19ca0:	sub	sp, sp, #8
   19ca4:	str	r0, [sp, #4]
   19ca8:	str	r1, [sp]
   19cac:	ldr	r0, [sp]
   19cb0:	ldr	r1, [sp, #4]
   19cb4:	str	r0, [r1, #176]	; 0xb0
   19cb8:	ldr	r0, [sp, #4]
   19cbc:	ldr	r0, [r0, #160]	; 0xa0
   19cc0:	ldr	r1, [sp, #4]
   19cc4:	ldr	r1, [r1, #176]	; 0xb0
   19cc8:	cmp	r0, r1
   19ccc:	bge	19ce0 <flatcc_builder_set_max_level@@Base+0x40>
   19cd0:	ldr	r0, [sp, #4]
   19cd4:	ldr	r0, [r0, #176]	; 0xb0
   19cd8:	ldr	r1, [sp, #4]
   19cdc:	str	r0, [r1, #160]	; 0xa0
   19ce0:	add	sp, sp, #8
   19ce4:	bx	lr

00019ce8 <flatcc_builder_get_buffer_size@@Base>:
   19ce8:	sub	sp, sp, #4
   19cec:	str	r0, [sp]
   19cf0:	ldr	r0, [sp]
   19cf4:	ldr	r0, [r0, #140]	; 0x8c
   19cf8:	ldr	r1, [sp]
   19cfc:	ldr	r1, [r1, #136]	; 0x88
   19d00:	sub	r0, r0, r1
   19d04:	add	sp, sp, #4
   19d08:	bx	lr

00019d0c <flatcc_builder_get_buffer_start@@Base>:
   19d0c:	sub	sp, sp, #4
   19d10:	str	r0, [sp]
   19d14:	ldr	r0, [sp]
   19d18:	ldr	r0, [r0, #136]	; 0x88
   19d1c:	add	sp, sp, #4
   19d20:	bx	lr

00019d24 <flatcc_builder_get_buffer_end@@Base>:
   19d24:	sub	sp, sp, #4
   19d28:	str	r0, [sp]
   19d2c:	ldr	r0, [sp]
   19d30:	ldr	r0, [r0, #140]	; 0x8c
   19d34:	add	sp, sp, #4
   19d38:	bx	lr

00019d3c <flatcc_builder_set_vtable_cache_limit@@Base>:
   19d3c:	sub	sp, sp, #8
   19d40:	str	r0, [sp, #4]
   19d44:	str	r1, [sp]
   19d48:	ldr	r0, [sp]
   19d4c:	ldr	r1, [sp, #4]
   19d50:	str	r0, [r1, #172]	; 0xac
   19d54:	add	sp, sp, #8
   19d58:	bx	lr

00019d5c <flatcc_builder_set_identifier@@Base>:
   19d5c:	sub	sp, sp, #16
   19d60:	str	r0, [sp, #12]
   19d64:	str	r1, [sp, #8]
   19d68:	ldr	r0, [sp, #12]
   19d6c:	add	r0, r0, #168	; 0xa8
   19d70:	ldr	r1, [sp, #8]
   19d74:	movw	r2, #0
   19d78:	cmp	r1, r2
   19d7c:	str	r0, [sp, #4]
   19d80:	beq	19d90 <flatcc_builder_set_identifier@@Base+0x34>
   19d84:	ldr	r0, [sp, #8]
   19d88:	str	r0, [sp]
   19d8c:	b	19da0 <flatcc_builder_set_identifier@@Base+0x44>
   19d90:	ldr	r0, [pc, #56]	; 19dd0 <flatcc_builder_set_identifier@@Base+0x74>
   19d94:	ldr	r0, [pc, r0]
   19d98:	str	r0, [sp]
   19d9c:	b	19da0 <flatcc_builder_set_identifier@@Base+0x44>
   19da0:	ldr	r0, [sp]
   19da4:	ldrb	r1, [r0]
   19da8:	ldr	r2, [sp, #4]
   19dac:	strb	r1, [r2]
   19db0:	ldrb	r1, [r0, #1]
   19db4:	strb	r1, [r2, #1]
   19db8:	ldrb	r1, [r0, #2]
   19dbc:	strb	r1, [r2, #2]
   19dc0:	ldrb	r0, [r0, #3]
   19dc4:	strb	r0, [r2, #3]
   19dc8:	add	sp, sp, #16
   19dcc:	bx	lr
   19dd0:			; <UNDEFINED> instruction: 0x0001b2b8

00019dd4 <flatcc_builder_get_type@@Base>:
   19dd4:	sub	sp, sp, #8
   19dd8:	str	r0, [sp, #4]
   19ddc:	ldr	r0, [sp, #4]
   19de0:	ldr	r0, [r0, #32]
   19de4:	movw	r1, #0
   19de8:	cmp	r0, r1
   19dec:	beq	19e04 <flatcc_builder_get_type@@Base+0x30>
   19df0:	ldr	r0, [sp, #4]
   19df4:	ldr	r0, [r0, #32]
   19df8:	ldrh	r0, [r0, #14]
   19dfc:	str	r0, [sp]
   19e00:	b	19e10 <flatcc_builder_get_type@@Base+0x3c>
   19e04:	movw	r0, #0
   19e08:	str	r0, [sp]
   19e0c:	b	19e10 <flatcc_builder_get_type@@Base+0x3c>
   19e10:	ldr	r0, [sp]
   19e14:	add	sp, sp, #8
   19e18:	bx	lr

00019e1c <flatcc_builder_get_type_at@@Base>:
   19e1c:	sub	sp, sp, #12
   19e20:	str	r0, [sp, #4]
   19e24:	str	r1, [sp]
   19e28:	ldr	r0, [sp]
   19e2c:	cmp	r0, #1
   19e30:	blt	19e48 <flatcc_builder_get_type_at@@Base+0x2c>
   19e34:	ldr	r0, [sp]
   19e38:	ldr	r1, [sp, #4]
   19e3c:	ldr	r1, [r1, #156]	; 0x9c
   19e40:	cmp	r0, r1
   19e44:	ble	19e54 <flatcc_builder_get_type_at@@Base+0x38>
   19e48:	movw	r0, #0
   19e4c:	str	r0, [sp, #8]
   19e50:	b	19e80 <flatcc_builder_get_type_at@@Base+0x64>
   19e54:	ldr	r0, [sp, #4]
   19e58:	ldr	r0, [r0, #32]
   19e5c:	ldr	r1, [sp]
   19e60:	ldr	r2, [sp, #4]
   19e64:	ldr	r2, [r2, #156]	; 0x9c
   19e68:	sub	r1, r1, r2
   19e6c:	movw	r2, #36	; 0x24
   19e70:	mul	r1, r1, r2
   19e74:	add	r0, r0, r1
   19e78:	ldrh	r0, [r0, #14]
   19e7c:	str	r0, [sp, #8]
   19e80:	ldr	r0, [sp, #8]
   19e84:	add	sp, sp, #12
   19e88:	bx	lr

00019e8c <flatcc_builder_get_direct_buffer@@Base>:
   19e8c:	push	{fp, lr}
   19e90:	mov	fp, sp
   19e94:	sub	sp, sp, #16
   19e98:	str	r0, [sp, #8]
   19e9c:	str	r1, [sp, #4]
   19ea0:	ldr	r0, [sp, #8]
   19ea4:	ldr	r0, [r0, #184]	; 0xb8
   19ea8:	cmp	r0, #0
   19eac:	beq	19ec8 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   19eb0:	ldr	r0, [sp, #8]
   19eb4:	add	r0, r0, #188	; 0xbc
   19eb8:	ldr	r1, [sp, #4]
   19ebc:	bl	19efc <flatcc_builder_get_direct_buffer@@Base+0x70>
   19ec0:	str	r0, [fp, #-4]
   19ec4:	b	19ef0 <flatcc_builder_get_direct_buffer@@Base+0x64>
   19ec8:	ldr	r0, [sp, #4]
   19ecc:	movw	r1, #0
   19ed0:	cmp	r0, r1
   19ed4:	beq	19ee4 <flatcc_builder_get_direct_buffer@@Base+0x58>
   19ed8:	ldr	r0, [sp, #4]
   19edc:	movw	r1, #0
   19ee0:	str	r1, [r0]
   19ee4:	b	19ee8 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19ee8:	movw	r0, #0
   19eec:	str	r0, [fp, #-4]
   19ef0:	ldr	r0, [fp, #-4]
   19ef4:	mov	sp, fp
   19ef8:	pop	{fp, pc}
   19efc:	sub	sp, sp, #12
   19f00:	str	r0, [sp, #4]
   19f04:	str	r1, [sp]
   19f08:	ldr	r0, [sp, #4]
   19f0c:	ldr	r0, [r0]
   19f10:	ldr	r1, [sp, #4]
   19f14:	ldr	r1, [r1, #4]
   19f18:	cmp	r0, r1
   19f1c:	bne	19f50 <flatcc_builder_get_direct_buffer@@Base+0xc4>
   19f20:	ldr	r0, [sp]
   19f24:	movw	r1, #0
   19f28:	cmp	r0, r1
   19f2c:	beq	19f40 <flatcc_builder_get_direct_buffer@@Base+0xb4>
   19f30:	ldr	r0, [sp, #4]
   19f34:	ldr	r0, [r0, #24]
   19f38:	ldr	r1, [sp]
   19f3c:	str	r0, [r1]
   19f40:	ldr	r0, [sp, #4]
   19f44:	ldr	r0, [r0, #8]
   19f48:	str	r0, [sp, #8]
   19f4c:	b	19f74 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   19f50:	ldr	r0, [sp]
   19f54:	movw	r1, #0
   19f58:	cmp	r0, r1
   19f5c:	beq	19f6c <flatcc_builder_get_direct_buffer@@Base+0xe0>
   19f60:	ldr	r0, [sp]
   19f64:	movw	r1, #0
   19f68:	str	r1, [r0]
   19f6c:	movw	r0, #0
   19f70:	str	r0, [sp, #8]
   19f74:	ldr	r0, [sp, #8]
   19f78:	add	sp, sp, #12
   19f7c:	bx	lr

00019f80 <flatcc_builder_copy_buffer@@Base>:
   19f80:	push	{fp, lr}
   19f84:	mov	fp, sp
   19f88:	sub	sp, sp, #16
   19f8c:	str	r0, [sp, #8]
   19f90:	str	r1, [sp, #4]
   19f94:	str	r2, [sp]
   19f98:	ldr	r0, [sp, #8]
   19f9c:	ldr	r0, [r0, #184]	; 0xb8
   19fa0:	cmp	r0, #0
   19fa4:	bne	19fb4 <flatcc_builder_copy_buffer@@Base+0x34>
   19fa8:	movw	r0, #0
   19fac:	str	r0, [fp, #-4]
   19fb0:	b	1a008 <flatcc_builder_copy_buffer@@Base+0x88>
   19fb4:	ldr	r0, [sp, #8]
   19fb8:	add	r0, r0, #188	; 0xbc
   19fbc:	ldr	r1, [sp, #4]
   19fc0:	ldr	r2, [sp]
   19fc4:	bl	1ac74 <flatcc_emitter_copy_buffer@@Base>
   19fc8:	str	r0, [sp, #4]
   19fcc:	ldr	r0, [sp, #4]
   19fd0:	movw	r1, #0
   19fd4:	cmp	r0, r1
   19fd8:	beq	19fe0 <flatcc_builder_copy_buffer@@Base+0x60>
   19fdc:	b	1a000 <flatcc_builder_copy_buffer@@Base+0x80>
   19fe0:	ldr	r0, [pc, #44]	; 1a014 <flatcc_builder_copy_buffer@@Base+0x94>
   19fe4:	add	r0, pc, r0
   19fe8:	ldr	r1, [pc, #40]	; 1a018 <flatcc_builder_copy_buffer@@Base+0x98>
   19fec:	add	r1, pc, r1
   19ff0:	ldr	r2, [pc, #36]	; 1a01c <flatcc_builder_copy_buffer@@Base+0x9c>
   19ff4:	add	r3, pc, r2
   19ff8:	movw	r2, #1926	; 0x786
   19ffc:	bl	1298c <__assert_fail@plt>
   1a000:	ldr	r0, [sp, #4]
   1a004:	str	r0, [fp, #-4]
   1a008:	ldr	r0, [fp, #-4]
   1a00c:	mov	sp, fp
   1a010:	pop	{fp, pc}
   1a014:	andeq	r8, r0, pc, lsl #14
   1a018:	muleq	r0, ip, r4
   1a01c:	andeq	r9, r0, r3, lsl #8

0001a020 <flatcc_builder_finalize_buffer@@Base>:
   1a020:	push	{fp, lr}
   1a024:	mov	fp, sp
   1a028:	sub	sp, sp, #16
   1a02c:	str	r0, [fp, #-4]
   1a030:	str	r1, [sp, #8]
   1a034:	ldr	r0, [fp, #-4]
   1a038:	bl	19ce8 <flatcc_builder_get_buffer_size@@Base>
   1a03c:	str	r0, [sp]
   1a040:	ldr	r0, [sp, #8]
   1a044:	movw	r1, #0
   1a048:	cmp	r0, r1
   1a04c:	beq	1a05c <flatcc_builder_finalize_buffer@@Base+0x3c>
   1a050:	ldr	r0, [sp]
   1a054:	ldr	r1, [sp, #8]
   1a058:	str	r0, [r1]
   1a05c:	ldr	r0, [sp]
   1a060:	bl	12914 <malloc@plt>
   1a064:	str	r0, [sp, #4]
   1a068:	ldr	r0, [sp, #4]
   1a06c:	movw	lr, #0
   1a070:	cmp	r0, lr
   1a074:	bne	1a098 <flatcc_builder_finalize_buffer@@Base+0x78>
   1a078:	ldr	r0, [pc, #144]	; 1a110 <flatcc_builder_finalize_buffer@@Base+0xf0>
   1a07c:	add	r0, pc, r0
   1a080:	ldr	r1, [pc, #140]	; 1a114 <flatcc_builder_finalize_buffer@@Base+0xf4>
   1a084:	add	r1, pc, r1
   1a088:	ldr	r2, [pc, #136]	; 1a118 <flatcc_builder_finalize_buffer@@Base+0xf8>
   1a08c:	add	r3, pc, r2
   1a090:	movw	r2, #1944	; 0x798
   1a094:	bl	1298c <__assert_fail@plt>
   1a098:	ldr	r0, [fp, #-4]
   1a09c:	ldr	r1, [sp, #4]
   1a0a0:	ldr	r2, [sp]
   1a0a4:	bl	19f80 <flatcc_builder_copy_buffer@@Base>
   1a0a8:	movw	r1, #0
   1a0ac:	cmp	r0, r1
   1a0b0:	bne	1a0d4 <flatcc_builder_finalize_buffer@@Base+0xb4>
   1a0b4:	ldr	r0, [pc, #96]	; 1a11c <flatcc_builder_finalize_buffer@@Base+0xfc>
   1a0b8:	add	r0, pc, r0
   1a0bc:	ldr	r1, [pc, #92]	; 1a120 <flatcc_builder_finalize_buffer@@Base+0x100>
   1a0c0:	add	r1, pc, r1
   1a0c4:	ldr	r2, [pc, #88]	; 1a124 <flatcc_builder_finalize_buffer@@Base+0x104>
   1a0c8:	add	r3, pc, r2
   1a0cc:	movw	r2, #1948	; 0x79c
   1a0d0:	bl	1298c <__assert_fail@plt>
   1a0d4:	b	1a0d8 <flatcc_builder_finalize_buffer@@Base+0xb8>
   1a0d8:	ldr	r0, [sp, #4]
   1a0dc:	movw	r1, #0
   1a0e0:	cmp	r0, r1
   1a0e4:	bne	1a104 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1a0e8:	ldr	r0, [sp, #8]
   1a0ec:	movw	r1, #0
   1a0f0:	cmp	r0, r1
   1a0f4:	beq	1a104 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1a0f8:	ldr	r0, [sp, #8]
   1a0fc:	movw	r1, #0
   1a100:	str	r1, [r0]
   1a104:	ldr	r0, [sp, #4]
   1a108:	mov	sp, fp
   1a10c:	pop	{fp, pc}
   1a110:	andeq	r9, r0, r9, asr #11
   1a114:	andeq	r8, r0, r4, lsl #8
   1a118:			; <UNDEFINED> instruction: 0x000093b0
   1a11c:	andeq	r9, r0, sp, lsl #11
   1a120:	andeq	r8, r0, r8, asr #7
   1a124:	andeq	r9, r0, r4, ror r3

0001a128 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1a128:	push	{fp, lr}
   1a12c:	mov	fp, sp
   1a130:	sub	sp, sp, #24
   1a134:	str	r0, [fp, #-4]
   1a138:	str	r1, [fp, #-8]
   1a13c:	ldr	r0, [fp, #-4]
   1a140:	bl	19ce8 <flatcc_builder_get_buffer_size@@Base>
   1a144:	str	r0, [sp, #4]
   1a148:	ldr	r0, [fp, #-8]
   1a14c:	movw	r1, #0
   1a150:	cmp	r0, r1
   1a154:	beq	1a164 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   1a158:	ldr	r0, [sp, #4]
   1a15c:	ldr	r1, [fp, #-8]
   1a160:	str	r0, [r1]
   1a164:	ldr	r0, [fp, #-4]
   1a168:	bl	19c18 <flatcc_builder_get_buffer_alignment@@Base>
   1a16c:	uxth	r0, r0
   1a170:	str	r0, [sp, #8]
   1a174:	ldr	r0, [sp, #4]
   1a178:	ldr	lr, [sp, #8]
   1a17c:	add	r0, r0, lr
   1a180:	sub	r0, r0, #1
   1a184:	ldr	lr, [sp, #8]
   1a188:	sub	lr, lr, #1
   1a18c:	mvn	r1, #0
   1a190:	eor	r1, lr, r1
   1a194:	and	r0, r0, r1
   1a198:	str	r0, [sp, #4]
   1a19c:	ldr	r0, [sp, #8]
   1a1a0:	ldr	r1, [sp, #4]
   1a1a4:	bl	1a22c <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   1a1a8:	str	r0, [sp, #12]
   1a1ac:	ldr	r0, [sp, #12]
   1a1b0:	movw	r1, #0
   1a1b4:	cmp	r0, r1
   1a1b8:	bne	1a1c0 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   1a1bc:	b	1a1f4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1a1c0:	ldr	r0, [fp, #-4]
   1a1c4:	ldr	r1, [sp, #12]
   1a1c8:	ldr	r2, [sp, #4]
   1a1cc:	bl	19f80 <flatcc_builder_copy_buffer@@Base>
   1a1d0:	movw	r1, #0
   1a1d4:	cmp	r0, r1
   1a1d8:	bne	1a1f0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   1a1dc:	ldr	r0, [sp, #12]
   1a1e0:	bl	128cc <free@plt>
   1a1e4:	movw	r0, #0
   1a1e8:	str	r0, [sp, #12]
   1a1ec:	b	1a1f4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1a1f0:	b	1a1f4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1a1f4:	ldr	r0, [sp, #12]
   1a1f8:	movw	r1, #0
   1a1fc:	cmp	r0, r1
   1a200:	bne	1a220 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1a204:	ldr	r0, [fp, #-8]
   1a208:	movw	r1, #0
   1a20c:	cmp	r0, r1
   1a210:	beq	1a220 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1a214:	ldr	r0, [fp, #-8]
   1a218:	movw	r1, #0
   1a21c:	str	r1, [r0]
   1a220:	ldr	r0, [sp, #12]
   1a224:	mov	sp, fp
   1a228:	pop	{fp, pc}
   1a22c:	push	{fp, lr}
   1a230:	mov	fp, sp
   1a234:	sub	sp, sp, #16
   1a238:	str	r0, [fp, #-4]
   1a23c:	str	r1, [sp, #8]
   1a240:	movw	r0, #0
   1a244:	str	r0, [sp]
   1a248:	ldr	r0, [fp, #-4]
   1a24c:	cmp	r0, #4
   1a250:	bcs	1a25c <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   1a254:	movw	r0, #4
   1a258:	str	r0, [fp, #-4]
   1a25c:	ldr	r1, [fp, #-4]
   1a260:	ldr	r2, [sp, #8]
   1a264:	mov	r0, sp
   1a268:	bl	12950 <posix_memalign@plt>
   1a26c:	str	r0, [sp, #4]
   1a270:	ldr	r0, [sp, #4]
   1a274:	cmp	r0, #0
   1a278:	beq	1a29c <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   1a27c:	ldr	r0, [sp]
   1a280:	movw	r1, #0
   1a284:	cmp	r0, r1
   1a288:	beq	1a29c <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   1a28c:	ldr	r0, [sp]
   1a290:	bl	128cc <free@plt>
   1a294:	movw	r0, #0
   1a298:	str	r0, [sp]
   1a29c:	ldr	r0, [sp]
   1a2a0:	mov	sp, fp
   1a2a4:	pop	{fp, pc}

0001a2a8 <flatcc_builder_aligned_alloc@@Base>:
   1a2a8:	push	{fp, lr}
   1a2ac:	mov	fp, sp
   1a2b0:	sub	sp, sp, #8
   1a2b4:	str	r0, [sp, #4]
   1a2b8:	str	r1, [sp]
   1a2bc:	ldr	r0, [sp, #4]
   1a2c0:	ldr	r1, [sp]
   1a2c4:	bl	1a22c <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   1a2c8:	mov	sp, fp
   1a2cc:	pop	{fp, pc}

0001a2d0 <flatcc_builder_aligned_free@@Base>:
   1a2d0:	push	{fp, lr}
   1a2d4:	mov	fp, sp
   1a2d8:	sub	sp, sp, #8
   1a2dc:	str	r0, [sp, #4]
   1a2e0:	ldr	r0, [sp, #4]
   1a2e4:	bl	128cc <free@plt>
   1a2e8:	mov	sp, fp
   1a2ec:	pop	{fp, pc}

0001a2f0 <flatcc_builder_get_emit_context@@Base>:
   1a2f0:	sub	sp, sp, #4
   1a2f4:	str	r0, [sp]
   1a2f8:	ldr	r0, [sp]
   1a2fc:	ldr	r0, [r0, #36]	; 0x24
   1a300:	add	sp, sp, #4
   1a304:	bx	lr
   1a308:	sub	sp, sp, #8
   1a30c:	str	r0, [sp, #4]
   1a310:	strh	r1, [sp, #2]
   1a314:	ldr	r0, [sp, #4]
   1a318:	ldr	r0, [r0, #140]	; 0x8c
   1a31c:	ldrh	r1, [sp, #2]
   1a320:	sub	r1, r1, #1
   1a324:	and	r0, r0, r1
   1a328:	add	sp, sp, #8
   1a32c:	bx	lr
   1a330:	push	{fp, lr}
   1a334:	mov	fp, sp
   1a338:	sub	sp, sp, #32
   1a33c:	str	r0, [fp, #-8]
   1a340:	str	r1, [fp, #-12]
   1a344:	str	r2, [sp, #16]
   1a348:	ldr	r0, [fp, #-8]
   1a34c:	add	r0, r0, #52	; 0x34
   1a350:	add	r0, r0, #8
   1a354:	str	r0, [sp, #12]
   1a358:	ldr	r0, [fp, #-8]
   1a35c:	ldr	r0, [r0, #48]	; 0x30
   1a360:	ldr	r1, [fp, #-8]
   1a364:	ldr	r1, [r1, #40]	; 0x28
   1a368:	ldr	r2, [sp, #12]
   1a36c:	ldr	r3, [fp, #-8]
   1a370:	ldr	r3, [r3, #28]
   1a374:	ldr	ip, [fp, #-12]
   1a378:	add	r3, r3, ip
   1a37c:	str	r0, [sp, #8]
   1a380:	mov	r0, r1
   1a384:	mov	r1, r2
   1a388:	mov	r2, r3
   1a38c:	movw	r3, #1
   1a390:	str	r3, [sp, #4]
   1a394:	ldr	ip, [sp, #4]
   1a398:	str	ip, [sp]
   1a39c:	ldr	lr, [sp, #8]
   1a3a0:	blx	lr
   1a3a4:	cmp	r0, #0
   1a3a8:	beq	1a3b8 <flatcc_builder_get_emit_context@@Base+0xc8>
   1a3ac:	mvn	r0, #0
   1a3b0:	str	r0, [fp, #-4]
   1a3b4:	b	1a3cc <flatcc_builder_get_emit_context@@Base+0xdc>
   1a3b8:	ldr	r0, [fp, #-8]
   1a3bc:	ldr	r1, [sp, #16]
   1a3c0:	bl	16134 <flatcc_builder_start_struct@@Base+0x70>
   1a3c4:	movw	r0, #0
   1a3c8:	str	r0, [fp, #-4]
   1a3cc:	ldr	r0, [fp, #-4]
   1a3d0:	mov	sp, fp
   1a3d4:	pop	{fp, pc}
   1a3d8:	push	{fp, lr}
   1a3dc:	mov	fp, sp
   1a3e0:	sub	sp, sp, #32
   1a3e4:	str	r0, [fp, #-8]
   1a3e8:	ldr	r0, [fp, #-8]
   1a3ec:	add	r0, r0, #52	; 0x34
   1a3f0:	add	r0, r0, #40	; 0x28
   1a3f4:	str	r0, [fp, #-12]
   1a3f8:	ldr	r0, [fp, #-8]
   1a3fc:	ldr	r0, [r0, #124]	; 0x7c
   1a400:	cmp	r0, #0
   1a404:	bne	1a40c <flatcc_builder_get_emit_context@@Base+0x11c>
   1a408:	b	1a42c <flatcc_builder_get_emit_context@@Base+0x13c>
   1a40c:	ldr	r0, [pc, #320]	; 1a554 <flatcc_builder_get_emit_context@@Base+0x264>
   1a410:	add	r0, pc, r0
   1a414:	ldr	r1, [pc, #316]	; 1a558 <flatcc_builder_get_emit_context@@Base+0x268>
   1a418:	add	r1, pc, r1
   1a41c:	ldr	r2, [pc, #312]	; 1a55c <flatcc_builder_get_emit_context@@Base+0x26c>
   1a420:	add	r3, pc, r2
   1a424:	movw	r2, #342	; 0x156
   1a428:	bl	1298c <__assert_fail@plt>
   1a42c:	ldr	r0, [fp, #-8]
   1a430:	ldr	r1, [fp, #-8]
   1a434:	ldr	r2, [r1, #124]	; 0x7c
   1a438:	movw	r1, #6
   1a43c:	movw	r3, #16
   1a440:	movw	ip, #0
   1a444:	str	ip, [sp]
   1a448:	bl	14e5c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1a44c:	movw	r1, #0
   1a450:	cmp	r0, r1
   1a454:	bne	1a464 <flatcc_builder_get_emit_context@@Base+0x174>
   1a458:	mvn	r0, #0
   1a45c:	str	r0, [fp, #-4]
   1a460:	b	1a548 <flatcc_builder_get_emit_context@@Base+0x258>
   1a464:	ldr	r0, [fp, #-8]
   1a468:	movw	r1, #16
   1a46c:	str	r1, [r0, #124]	; 0x7c
   1a470:	movw	r0, #256	; 0x100
   1a474:	str	r0, [sp, #16]
   1a478:	ldr	r0, [fp, #-8]
   1a47c:	ldr	r0, [r0, #48]	; 0x30
   1a480:	ldr	r1, [fp, #-8]
   1a484:	ldr	r1, [r1, #40]	; 0x28
   1a488:	ldr	r2, [fp, #-12]
   1a48c:	ldr	r3, [sp, #16]
   1a490:	str	r0, [sp, #8]
   1a494:	mov	r0, r1
   1a498:	mov	r1, r2
   1a49c:	mov	r2, r3
   1a4a0:	movw	r3, #1
   1a4a4:	movw	ip, #5
   1a4a8:	str	ip, [sp]
   1a4ac:	ldr	ip, [sp, #8]
   1a4b0:	blx	ip
   1a4b4:	cmp	r0, #0
   1a4b8:	beq	1a4c8 <flatcc_builder_get_emit_context@@Base+0x1d8>
   1a4bc:	mvn	r0, #0
   1a4c0:	str	r0, [fp, #-4]
   1a4c4:	b	1a548 <flatcc_builder_get_emit_context@@Base+0x258>
   1a4c8:	b	1a4cc <flatcc_builder_get_emit_context@@Base+0x1dc>
   1a4cc:	ldr	r0, [sp, #16]
   1a4d0:	lsl	r0, r0, #1
   1a4d4:	ldr	r1, [fp, #-12]
   1a4d8:	ldr	r1, [r1, #4]
   1a4dc:	cmp	r0, r1
   1a4e0:	bhi	1a4f4 <flatcc_builder_get_emit_context@@Base+0x204>
   1a4e4:	ldr	r0, [sp, #16]
   1a4e8:	lsl	r0, r0, #1
   1a4ec:	str	r0, [sp, #16]
   1a4f0:	b	1a4cc <flatcc_builder_get_emit_context@@Base+0x1dc>
   1a4f4:	ldr	r0, [sp, #16]
   1a4f8:	lsr	r0, r0, #2
   1a4fc:	str	r0, [sp, #16]
   1a500:	movw	r0, #0
   1a504:	str	r0, [sp, #12]
   1a508:	ldr	r0, [sp, #12]
   1a50c:	movw	r1, #1
   1a510:	lsl	r0, r1, r0
   1a514:	ldr	r1, [sp, #16]
   1a518:	cmp	r0, r1
   1a51c:	bcs	1a534 <flatcc_builder_get_emit_context@@Base+0x244>
   1a520:	b	1a524 <flatcc_builder_get_emit_context@@Base+0x234>
   1a524:	ldr	r0, [sp, #12]
   1a528:	add	r0, r0, #1
   1a52c:	str	r0, [sp, #12]
   1a530:	b	1a508 <flatcc_builder_get_emit_context@@Base+0x218>
   1a534:	ldr	r0, [sp, #12]
   1a538:	ldr	r1, [fp, #-8]
   1a53c:	str	r0, [r1, #116]	; 0x74
   1a540:	movw	r0, #0
   1a544:	str	r0, [fp, #-4]
   1a548:	ldr	r0, [fp, #-4]
   1a54c:	mov	sp, fp
   1a550:	pop	{fp, pc}
   1a554:	strdeq	r9, [r0], -r9	; <UNPREDICTABLE>
   1a558:	andeq	r8, r0, r0, ror r0
   1a55c:	strdeq	r9, [r0], -r8

0001a560 <flatcc_emitter_recycle_page@@Base>:
   1a560:	sub	sp, sp, #12
   1a564:	str	r0, [sp, #4]
   1a568:	str	r1, [sp]
   1a56c:	ldr	r0, [sp]
   1a570:	ldr	r1, [sp, #4]
   1a574:	ldr	r1, [r1]
   1a578:	cmp	r0, r1
   1a57c:	beq	1a594 <flatcc_emitter_recycle_page@@Base+0x34>
   1a580:	ldr	r0, [sp]
   1a584:	ldr	r1, [sp, #4]
   1a588:	ldr	r1, [r1, #4]
   1a58c:	cmp	r0, r1
   1a590:	bne	1a5a0 <flatcc_emitter_recycle_page@@Base+0x40>
   1a594:	mvn	r0, #0
   1a598:	str	r0, [sp, #8]
   1a59c:	b	1a614 <flatcc_emitter_recycle_page@@Base+0xb4>
   1a5a0:	ldr	r0, [sp]
   1a5a4:	ldr	r0, [r0, #2948]	; 0xb84
   1a5a8:	ldr	r1, [sp]
   1a5ac:	ldr	r1, [r1, #2944]	; 0xb80
   1a5b0:	str	r0, [r1, #2948]	; 0xb84
   1a5b4:	ldr	r0, [sp]
   1a5b8:	ldr	r0, [r0, #2944]	; 0xb80
   1a5bc:	ldr	r1, [sp]
   1a5c0:	ldr	r1, [r1, #2948]	; 0xb84
   1a5c4:	str	r0, [r1, #2944]	; 0xb80
   1a5c8:	ldr	r0, [sp, #4]
   1a5cc:	ldr	r0, [r0]
   1a5d0:	ldr	r0, [r0, #2948]	; 0xb84
   1a5d4:	ldr	r1, [sp]
   1a5d8:	str	r0, [r1, #2948]	; 0xb84
   1a5dc:	ldr	r0, [sp, #4]
   1a5e0:	ldr	r0, [r0]
   1a5e4:	ldr	r1, [sp]
   1a5e8:	str	r0, [r1, #2944]	; 0xb80
   1a5ec:	ldr	r0, [sp]
   1a5f0:	ldr	r1, [sp]
   1a5f4:	ldr	r1, [r1, #2948]	; 0xb84
   1a5f8:	str	r0, [r1, #2944]	; 0xb80
   1a5fc:	ldr	r0, [sp]
   1a600:	ldr	r1, [sp]
   1a604:	ldr	r1, [r1, #2944]	; 0xb80
   1a608:	str	r0, [r1, #2948]	; 0xb84
   1a60c:	movw	r0, #0
   1a610:	str	r0, [sp, #8]
   1a614:	ldr	r0, [sp, #8]
   1a618:	add	sp, sp, #12
   1a61c:	bx	lr

0001a620 <flatcc_emitter_reset@@Base>:
   1a620:	push	{fp, lr}
   1a624:	mov	fp, sp
   1a628:	sub	sp, sp, #16
   1a62c:	str	r0, [fp, #-4]
   1a630:	ldr	r0, [fp, #-4]
   1a634:	ldr	r0, [r0]
   1a638:	str	r0, [sp, #8]
   1a63c:	ldr	r0, [fp, #-4]
   1a640:	ldr	r0, [r0]
   1a644:	movw	r1, #0
   1a648:	cmp	r0, r1
   1a64c:	bne	1a654 <flatcc_emitter_reset@@Base+0x34>
   1a650:	b	1a7b0 <flatcc_emitter_reset@@Base+0x190>
   1a654:	ldr	r0, [fp, #-4]
   1a658:	ldr	r0, [r0]
   1a65c:	ldr	r1, [fp, #-4]
   1a660:	str	r0, [r1, #4]
   1a664:	ldr	r0, [fp, #-4]
   1a668:	ldr	r0, [r0]
   1a66c:	add	r0, r0, #1472	; 0x5c0
   1a670:	ldr	r1, [fp, #-4]
   1a674:	str	r0, [r1, #8]
   1a678:	ldr	r0, [fp, #-4]
   1a67c:	ldr	r0, [r0, #8]
   1a680:	ldr	r1, [fp, #-4]
   1a684:	str	r0, [r1, #16]
   1a688:	ldr	r0, [fp, #-4]
   1a68c:	movw	r1, #1472	; 0x5c0
   1a690:	str	r1, [r0, #12]
   1a694:	ldr	r0, [fp, #-4]
   1a698:	str	r1, [r0, #20]
   1a69c:	ldr	r0, [fp, #-4]
   1a6a0:	ldr	r0, [r0, #12]
   1a6a4:	movw	r1, #0
   1a6a8:	sub	r0, r1, r0
   1a6ac:	ldr	r1, [fp, #-4]
   1a6b0:	ldr	r1, [r1]
   1a6b4:	str	r0, [r1, #2952]	; 0xb88
   1a6b8:	ldr	r0, [fp, #-4]
   1a6bc:	ldr	r0, [r0, #32]
   1a6c0:	cmp	r0, #0
   1a6c4:	bne	1a6d8 <flatcc_emitter_reset@@Base+0xb8>
   1a6c8:	ldr	r0, [fp, #-4]
   1a6cc:	ldr	r0, [r0, #24]
   1a6d0:	ldr	r1, [fp, #-4]
   1a6d4:	str	r0, [r1, #32]
   1a6d8:	ldr	r0, [fp, #-4]
   1a6dc:	ldr	r1, [r0, #24]
   1a6e0:	ldr	r0, [r0, #32]
   1a6e4:	add	r0, r0, r0, lsl #1
   1a6e8:	lsr	r0, r0, #2
   1a6ec:	lsr	r1, r1, #2
   1a6f0:	add	r0, r0, r1
   1a6f4:	ldr	r1, [fp, #-4]
   1a6f8:	str	r0, [r1, #32]
   1a6fc:	ldr	r0, [fp, #-4]
   1a700:	movw	r1, #0
   1a704:	str	r1, [r0, #24]
   1a708:	ldr	r0, [fp, #-4]
   1a70c:	ldr	r0, [r0, #32]
   1a710:	lsl	r0, r0, #1
   1a714:	ldr	r1, [fp, #-4]
   1a718:	ldr	r1, [r1, #28]
   1a71c:	cmp	r0, r1
   1a720:	movw	r0, #0
   1a724:	str	r0, [sp, #4]
   1a728:	bcs	1a750 <flatcc_emitter_reset@@Base+0x130>
   1a72c:	ldr	r0, [fp, #-4]
   1a730:	ldr	r0, [r0, #4]
   1a734:	ldr	r0, [r0, #2944]	; 0xb80
   1a738:	ldr	r1, [fp, #-4]
   1a73c:	ldr	r1, [r1]
   1a740:	cmp	r0, r1
   1a744:	movw	r0, #0
   1a748:	movne	r0, #1
   1a74c:	str	r0, [sp, #4]
   1a750:	ldr	r0, [sp, #4]
   1a754:	tst	r0, #1
   1a758:	beq	1a7b0 <flatcc_emitter_reset@@Base+0x190>
   1a75c:	ldr	r0, [fp, #-4]
   1a760:	ldr	r0, [r0, #4]
   1a764:	ldr	r0, [r0, #2944]	; 0xb80
   1a768:	str	r0, [sp, #8]
   1a76c:	ldr	r0, [sp, #8]
   1a770:	ldr	r0, [r0, #2944]	; 0xb80
   1a774:	ldr	r1, [fp, #-4]
   1a778:	ldr	r1, [r1, #4]
   1a77c:	str	r0, [r1, #2944]	; 0xb80
   1a780:	ldr	r0, [fp, #-4]
   1a784:	ldr	r0, [r0, #4]
   1a788:	ldr	r1, [sp, #8]
   1a78c:	ldr	r1, [r1, #2944]	; 0xb80
   1a790:	str	r0, [r1, #2948]	; 0xb84
   1a794:	ldr	r0, [sp, #8]
   1a798:	bl	128cc <free@plt>
   1a79c:	ldr	r0, [fp, #-4]
   1a7a0:	ldr	r1, [r0, #28]
   1a7a4:	sub	r1, r1, #2944	; 0xb80
   1a7a8:	str	r1, [r0, #28]
   1a7ac:	b	1a708 <flatcc_emitter_reset@@Base+0xe8>
   1a7b0:	mov	sp, fp
   1a7b4:	pop	{fp, pc}

0001a7b8 <flatcc_emitter_clear@@Base>:
   1a7b8:	push	{fp, lr}
   1a7bc:	mov	fp, sp
   1a7c0:	sub	sp, sp, #8
   1a7c4:	str	r0, [sp, #4]
   1a7c8:	ldr	r0, [sp, #4]
   1a7cc:	ldr	r0, [r0]
   1a7d0:	str	r0, [sp]
   1a7d4:	ldr	r0, [sp]
   1a7d8:	movw	r1, #0
   1a7dc:	cmp	r0, r1
   1a7e0:	bne	1a7e8 <flatcc_emitter_clear@@Base+0x30>
   1a7e4:	b	1a844 <flatcc_emitter_clear@@Base+0x8c>
   1a7e8:	ldr	r0, [sp]
   1a7ec:	ldr	r0, [r0, #2948]	; 0xb84
   1a7f0:	movw	r1, #0
   1a7f4:	str	r1, [r0, #2944]	; 0xb80
   1a7f8:	ldr	r0, [sp]
   1a7fc:	ldr	r0, [r0, #2944]	; 0xb80
   1a800:	movw	r1, #0
   1a804:	cmp	r0, r1
   1a808:	beq	1a828 <flatcc_emitter_clear@@Base+0x70>
   1a80c:	ldr	r0, [sp]
   1a810:	ldr	r0, [r0, #2944]	; 0xb80
   1a814:	str	r0, [sp]
   1a818:	ldr	r0, [sp]
   1a81c:	ldr	r0, [r0, #2948]	; 0xb84
   1a820:	bl	128cc <free@plt>
   1a824:	b	1a7f8 <flatcc_emitter_clear@@Base+0x40>
   1a828:	ldr	r0, [sp]
   1a82c:	bl	128cc <free@plt>
   1a830:	ldr	r0, [sp, #4]
   1a834:	movw	lr, #0
   1a838:	and	r1, lr, #255	; 0xff
   1a83c:	movw	r2, #36	; 0x24
   1a840:	bl	1295c <memset@plt>
   1a844:	mov	sp, fp
   1a848:	pop	{fp, pc}

0001a84c <flatcc_emitter@@Base>:
   1a84c:	push	{fp, lr}
   1a850:	mov	fp, sp
   1a854:	sub	sp, sp, #32
   1a858:	ldr	ip, [fp, #8]
   1a85c:	str	r0, [fp, #-8]
   1a860:	str	r1, [fp, #-12]
   1a864:	str	r2, [sp, #16]
   1a868:	str	r3, [sp, #12]
   1a86c:	ldr	r0, [fp, #-8]
   1a870:	str	r0, [sp, #8]
   1a874:	ldr	r0, [fp, #8]
   1a878:	ldr	r1, [sp, #8]
   1a87c:	ldr	r2, [r1, #24]
   1a880:	add	r0, r2, r0
   1a884:	str	r0, [r1, #24]
   1a888:	ldr	r0, [sp, #12]
   1a88c:	cmp	r0, #0
   1a890:	str	ip, [sp]
   1a894:	bge	1a958 <flatcc_emitter@@Base+0x10c>
   1a898:	ldr	r0, [fp, #8]
   1a89c:	ldr	r1, [sp, #8]
   1a8a0:	ldr	r1, [r1, #12]
   1a8a4:	cmp	r0, r1
   1a8a8:	bhi	1a8ec <flatcc_emitter@@Base+0xa0>
   1a8ac:	ldr	r0, [fp, #8]
   1a8b0:	ldr	r1, [sp, #8]
   1a8b4:	ldr	r2, [r1, #8]
   1a8b8:	movw	r3, #0
   1a8bc:	sub	r0, r3, r0
   1a8c0:	add	r0, r2, r0
   1a8c4:	str	r0, [r1, #8]
   1a8c8:	ldr	r0, [fp, #8]
   1a8cc:	ldr	r1, [sp, #8]
   1a8d0:	ldr	r2, [r1, #12]
   1a8d4:	sub	r0, r2, r0
   1a8d8:	str	r0, [r1, #12]
   1a8dc:	ldr	r0, [sp, #8]
   1a8e0:	ldr	r0, [r0, #8]
   1a8e4:	str	r0, [sp, #4]
   1a8e8:	b	1aa0c <flatcc_emitter@@Base+0x1c0>
   1a8ec:	ldr	r0, [sp, #16]
   1a8f0:	ldr	r1, [fp, #-12]
   1a8f4:	add	r0, r1, r0, lsl #3
   1a8f8:	str	r0, [fp, #-12]
   1a8fc:	ldr	r0, [sp, #16]
   1a900:	mvn	r1, #0
   1a904:	add	r1, r0, r1
   1a908:	str	r1, [sp, #16]
   1a90c:	cmp	r0, #0
   1a910:	beq	1a954 <flatcc_emitter@@Base+0x108>
   1a914:	ldr	r0, [fp, #-12]
   1a918:	mvn	r1, #7
   1a91c:	add	r0, r0, r1
   1a920:	str	r0, [fp, #-12]
   1a924:	ldr	r0, [sp, #8]
   1a928:	ldr	r1, [fp, #-12]
   1a92c:	ldr	r1, [r1]
   1a930:	ldr	r2, [fp, #-12]
   1a934:	ldr	r2, [r2, #4]
   1a938:	bl	1aa78 <flatcc_emitter@@Base+0x22c>
   1a93c:	cmp	r0, #0
   1a940:	beq	1a950 <flatcc_emitter@@Base+0x104>
   1a944:	mvn	r0, #0
   1a948:	str	r0, [fp, #-4]
   1a94c:	b	1aa6c <flatcc_emitter@@Base+0x220>
   1a950:	b	1a8fc <flatcc_emitter@@Base+0xb0>
   1a954:	b	1aa00 <flatcc_emitter@@Base+0x1b4>
   1a958:	ldr	r0, [fp, #8]
   1a95c:	ldr	r1, [sp, #8]
   1a960:	ldr	r1, [r1, #20]
   1a964:	cmp	r0, r1
   1a968:	bhi	1a9a4 <flatcc_emitter@@Base+0x158>
   1a96c:	ldr	r0, [sp, #8]
   1a970:	ldr	r0, [r0, #16]
   1a974:	str	r0, [sp, #4]
   1a978:	ldr	r0, [fp, #8]
   1a97c:	ldr	r1, [sp, #8]
   1a980:	ldr	r2, [r1, #16]
   1a984:	add	r0, r2, r0
   1a988:	str	r0, [r1, #16]
   1a98c:	ldr	r0, [fp, #8]
   1a990:	ldr	r1, [sp, #8]
   1a994:	ldr	r2, [r1, #20]
   1a998:	sub	r0, r2, r0
   1a99c:	str	r0, [r1, #20]
   1a9a0:	b	1aa0c <flatcc_emitter@@Base+0x1c0>
   1a9a4:	b	1a9a8 <flatcc_emitter@@Base+0x15c>
   1a9a8:	ldr	r0, [sp, #16]
   1a9ac:	mvn	r1, #0
   1a9b0:	add	r1, r0, r1
   1a9b4:	str	r1, [sp, #16]
   1a9b8:	cmp	r0, #0
   1a9bc:	beq	1a9fc <flatcc_emitter@@Base+0x1b0>
   1a9c0:	ldr	r0, [sp, #8]
   1a9c4:	ldr	r1, [fp, #-12]
   1a9c8:	ldr	r1, [r1]
   1a9cc:	ldr	r2, [fp, #-12]
   1a9d0:	ldr	r2, [r2, #4]
   1a9d4:	bl	1ab84 <flatcc_emitter@@Base+0x338>
   1a9d8:	cmp	r0, #0
   1a9dc:	beq	1a9ec <flatcc_emitter@@Base+0x1a0>
   1a9e0:	mvn	r0, #0
   1a9e4:	str	r0, [fp, #-4]
   1a9e8:	b	1aa6c <flatcc_emitter@@Base+0x220>
   1a9ec:	ldr	r0, [fp, #-12]
   1a9f0:	add	r0, r0, #8
   1a9f4:	str	r0, [fp, #-12]
   1a9f8:	b	1a9a8 <flatcc_emitter@@Base+0x15c>
   1a9fc:	b	1aa00 <flatcc_emitter@@Base+0x1b4>
   1aa00:	movw	r0, #0
   1aa04:	str	r0, [fp, #-4]
   1aa08:	b	1aa6c <flatcc_emitter@@Base+0x220>
   1aa0c:	b	1aa10 <flatcc_emitter@@Base+0x1c4>
   1aa10:	ldr	r0, [sp, #16]
   1aa14:	mvn	r1, #0
   1aa18:	add	r1, r0, r1
   1aa1c:	str	r1, [sp, #16]
   1aa20:	cmp	r0, #0
   1aa24:	beq	1aa64 <flatcc_emitter@@Base+0x218>
   1aa28:	ldr	r0, [sp, #4]
   1aa2c:	ldr	r1, [fp, #-12]
   1aa30:	ldr	r1, [r1]
   1aa34:	ldr	r2, [fp, #-12]
   1aa38:	ldr	r2, [r2, #4]
   1aa3c:	bl	128d8 <memcpy@plt>
   1aa40:	ldr	r0, [fp, #-12]
   1aa44:	ldr	r0, [r0, #4]
   1aa48:	ldr	r1, [sp, #4]
   1aa4c:	add	r0, r1, r0
   1aa50:	str	r0, [sp, #4]
   1aa54:	ldr	r0, [fp, #-12]
   1aa58:	add	r0, r0, #8
   1aa5c:	str	r0, [fp, #-12]
   1aa60:	b	1aa10 <flatcc_emitter@@Base+0x1c4>
   1aa64:	movw	r0, #0
   1aa68:	str	r0, [fp, #-4]
   1aa6c:	ldr	r0, [fp, #-4]
   1aa70:	mov	sp, fp
   1aa74:	pop	{fp, pc}
   1aa78:	push	{fp, lr}
   1aa7c:	mov	fp, sp
   1aa80:	sub	sp, sp, #24
   1aa84:	str	r0, [fp, #-8]
   1aa88:	str	r1, [sp, #12]
   1aa8c:	str	r2, [sp, #8]
   1aa90:	ldr	r0, [sp, #8]
   1aa94:	ldr	r1, [sp, #12]
   1aa98:	add	r0, r1, r0
   1aa9c:	str	r0, [sp, #12]
   1aaa0:	ldr	r0, [sp, #8]
   1aaa4:	cmp	r0, #0
   1aaa8:	beq	1ab70 <flatcc_emitter@@Base+0x324>
   1aaac:	ldr	r0, [sp, #8]
   1aab0:	str	r0, [sp, #4]
   1aab4:	ldr	r0, [sp, #4]
   1aab8:	ldr	r1, [fp, #-8]
   1aabc:	ldr	r1, [r1, #12]
   1aac0:	cmp	r0, r1
   1aac4:	bls	1ab04 <flatcc_emitter@@Base+0x2b8>
   1aac8:	ldr	r0, [fp, #-8]
   1aacc:	ldr	r0, [r0, #12]
   1aad0:	str	r0, [sp, #4]
   1aad4:	ldr	r0, [sp, #4]
   1aad8:	cmp	r0, #0
   1aadc:	bne	1ab00 <flatcc_emitter@@Base+0x2b4>
   1aae0:	ldr	r0, [fp, #-8]
   1aae4:	bl	1adc0 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1aae8:	cmp	r0, #0
   1aaec:	beq	1aafc <flatcc_emitter@@Base+0x2b0>
   1aaf0:	mvn	r0, #0
   1aaf4:	str	r0, [fp, #-4]
   1aaf8:	b	1ab78 <flatcc_emitter@@Base+0x32c>
   1aafc:	b	1aaa0 <flatcc_emitter@@Base+0x254>
   1ab00:	b	1ab04 <flatcc_emitter@@Base+0x2b8>
   1ab04:	ldr	r0, [sp, #4]
   1ab08:	ldr	r1, [fp, #-8]
   1ab0c:	ldr	r2, [r1, #8]
   1ab10:	movw	r3, #0
   1ab14:	sub	r0, r3, r0
   1ab18:	add	r0, r2, r0
   1ab1c:	str	r0, [r1, #8]
   1ab20:	ldr	r0, [sp, #4]
   1ab24:	ldr	r1, [fp, #-8]
   1ab28:	ldr	r2, [r1, #12]
   1ab2c:	sub	r0, r2, r0
   1ab30:	str	r0, [r1, #12]
   1ab34:	ldr	r0, [sp, #4]
   1ab38:	ldr	r1, [sp, #12]
   1ab3c:	sub	r0, r3, r0
   1ab40:	add	r0, r1, r0
   1ab44:	str	r0, [sp, #12]
   1ab48:	ldr	r0, [sp, #4]
   1ab4c:	ldr	r1, [sp, #8]
   1ab50:	sub	r0, r1, r0
   1ab54:	str	r0, [sp, #8]
   1ab58:	ldr	r0, [fp, #-8]
   1ab5c:	ldr	r0, [r0, #8]
   1ab60:	ldr	r1, [sp, #12]
   1ab64:	ldr	r2, [sp, #4]
   1ab68:	bl	128d8 <memcpy@plt>
   1ab6c:	b	1aaa0 <flatcc_emitter@@Base+0x254>
   1ab70:	movw	r0, #0
   1ab74:	str	r0, [fp, #-4]
   1ab78:	ldr	r0, [fp, #-4]
   1ab7c:	mov	sp, fp
   1ab80:	pop	{fp, pc}
   1ab84:	push	{fp, lr}
   1ab88:	mov	fp, sp
   1ab8c:	sub	sp, sp, #24
   1ab90:	str	r0, [fp, #-8]
   1ab94:	str	r1, [sp, #12]
   1ab98:	str	r2, [sp, #8]
   1ab9c:	ldr	r0, [sp, #8]
   1aba0:	cmp	r0, #0
   1aba4:	beq	1ac60 <flatcc_emitter@@Base+0x414>
   1aba8:	ldr	r0, [sp, #8]
   1abac:	str	r0, [sp, #4]
   1abb0:	ldr	r0, [sp, #4]
   1abb4:	ldr	r1, [fp, #-8]
   1abb8:	ldr	r1, [r1, #20]
   1abbc:	cmp	r0, r1
   1abc0:	bls	1ac00 <flatcc_emitter@@Base+0x3b4>
   1abc4:	ldr	r0, [fp, #-8]
   1abc8:	ldr	r0, [r0, #20]
   1abcc:	str	r0, [sp, #4]
   1abd0:	ldr	r0, [sp, #4]
   1abd4:	cmp	r0, #0
   1abd8:	bne	1abfc <flatcc_emitter@@Base+0x3b0>
   1abdc:	ldr	r0, [fp, #-8]
   1abe0:	bl	1afc0 <flatcc_emitter_copy_buffer@@Base+0x34c>
   1abe4:	cmp	r0, #0
   1abe8:	beq	1abf8 <flatcc_emitter@@Base+0x3ac>
   1abec:	mvn	r0, #0
   1abf0:	str	r0, [fp, #-4]
   1abf4:	b	1ac68 <flatcc_emitter@@Base+0x41c>
   1abf8:	b	1ab9c <flatcc_emitter@@Base+0x350>
   1abfc:	b	1ac00 <flatcc_emitter@@Base+0x3b4>
   1ac00:	ldr	r0, [fp, #-8]
   1ac04:	ldr	r0, [r0, #16]
   1ac08:	ldr	r1, [sp, #12]
   1ac0c:	ldr	r2, [sp, #4]
   1ac10:	bl	128d8 <memcpy@plt>
   1ac14:	ldr	r0, [sp, #4]
   1ac18:	ldr	r1, [sp, #8]
   1ac1c:	sub	r0, r1, r0
   1ac20:	str	r0, [sp, #8]
   1ac24:	ldr	r0, [sp, #4]
   1ac28:	ldr	r1, [sp, #12]
   1ac2c:	add	r0, r1, r0
   1ac30:	str	r0, [sp, #12]
   1ac34:	ldr	r0, [sp, #4]
   1ac38:	ldr	r1, [fp, #-8]
   1ac3c:	ldr	r2, [r1, #16]
   1ac40:	add	r0, r2, r0
   1ac44:	str	r0, [r1, #16]
   1ac48:	ldr	r0, [sp, #4]
   1ac4c:	ldr	r1, [fp, #-8]
   1ac50:	ldr	r2, [r1, #20]
   1ac54:	sub	r0, r2, r0
   1ac58:	str	r0, [r1, #20]
   1ac5c:	b	1ab9c <flatcc_emitter@@Base+0x350>
   1ac60:	movw	r0, #0
   1ac64:	str	r0, [fp, #-4]
   1ac68:	ldr	r0, [fp, #-4]
   1ac6c:	mov	sp, fp
   1ac70:	pop	{fp, pc}

0001ac74 <flatcc_emitter_copy_buffer@@Base>:
   1ac74:	push	{fp, lr}
   1ac78:	mov	fp, sp
   1ac7c:	sub	sp, sp, #24
   1ac80:	str	r0, [fp, #-8]
   1ac84:	str	r1, [sp, #12]
   1ac88:	str	r2, [sp, #8]
   1ac8c:	ldr	r0, [sp, #8]
   1ac90:	ldr	r1, [fp, #-8]
   1ac94:	ldr	r1, [r1, #24]
   1ac98:	cmp	r0, r1
   1ac9c:	bcs	1acac <flatcc_emitter_copy_buffer@@Base+0x38>
   1aca0:	movw	r0, #0
   1aca4:	str	r0, [fp, #-4]
   1aca8:	b	1adb4 <flatcc_emitter_copy_buffer@@Base+0x140>
   1acac:	ldr	r0, [fp, #-8]
   1acb0:	ldr	r0, [r0]
   1acb4:	movw	r1, #0
   1acb8:	cmp	r0, r1
   1acbc:	bne	1accc <flatcc_emitter_copy_buffer@@Base+0x58>
   1acc0:	movw	r0, #0
   1acc4:	str	r0, [fp, #-4]
   1acc8:	b	1adb4 <flatcc_emitter_copy_buffer@@Base+0x140>
   1accc:	ldr	r0, [fp, #-8]
   1acd0:	ldr	r0, [r0]
   1acd4:	ldr	r1, [fp, #-8]
   1acd8:	ldr	r1, [r1, #4]
   1acdc:	cmp	r0, r1
   1ace0:	bne	1ad08 <flatcc_emitter_copy_buffer@@Base+0x94>
   1ace4:	ldr	r0, [sp, #12]
   1ace8:	ldr	r1, [fp, #-8]
   1acec:	ldr	r1, [r1, #8]
   1acf0:	ldr	r2, [fp, #-8]
   1acf4:	ldr	r2, [r2, #24]
   1acf8:	bl	128d8 <memcpy@plt>
   1acfc:	ldr	r0, [sp, #12]
   1ad00:	str	r0, [fp, #-4]
   1ad04:	b	1adb4 <flatcc_emitter_copy_buffer@@Base+0x140>
   1ad08:	ldr	r0, [fp, #-8]
   1ad0c:	ldr	r0, [r0, #12]
   1ad10:	movw	r1, #2944	; 0xb80
   1ad14:	sub	r0, r1, r0
   1ad18:	str	r0, [sp]
   1ad1c:	ldr	r0, [sp, #12]
   1ad20:	ldr	r1, [fp, #-8]
   1ad24:	ldr	r1, [r1, #8]
   1ad28:	ldr	r2, [sp]
   1ad2c:	bl	128d8 <memcpy@plt>
   1ad30:	ldr	r0, [sp, #12]
   1ad34:	ldr	r1, [sp]
   1ad38:	add	r0, r0, r1
   1ad3c:	str	r0, [sp, #12]
   1ad40:	ldr	r0, [fp, #-8]
   1ad44:	ldr	r0, [r0]
   1ad48:	ldr	r0, [r0, #2944]	; 0xb80
   1ad4c:	str	r0, [sp, #4]
   1ad50:	ldr	r0, [sp, #4]
   1ad54:	ldr	r1, [fp, #-8]
   1ad58:	ldr	r1, [r1, #4]
   1ad5c:	cmp	r0, r1
   1ad60:	beq	1ad90 <flatcc_emitter_copy_buffer@@Base+0x11c>
   1ad64:	ldr	r0, [sp, #12]
   1ad68:	ldr	r1, [sp, #4]
   1ad6c:	movw	r2, #2944	; 0xb80
   1ad70:	bl	128d8 <memcpy@plt>
   1ad74:	ldr	r0, [sp, #12]
   1ad78:	add	r0, r0, #2944	; 0xb80
   1ad7c:	str	r0, [sp, #12]
   1ad80:	ldr	r0, [sp, #4]
   1ad84:	ldr	r0, [r0, #2944]	; 0xb80
   1ad88:	str	r0, [sp, #4]
   1ad8c:	b	1ad50 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1ad90:	ldr	r0, [sp, #12]
   1ad94:	ldr	r1, [sp, #4]
   1ad98:	ldr	r2, [fp, #-8]
   1ad9c:	ldr	r2, [r2, #20]
   1ada0:	movw	r3, #2944	; 0xb80
   1ada4:	sub	r2, r3, r2
   1ada8:	bl	128d8 <memcpy@plt>
   1adac:	ldr	r0, [sp, #12]
   1adb0:	str	r0, [fp, #-4]
   1adb4:	ldr	r0, [fp, #-4]
   1adb8:	mov	sp, fp
   1adbc:	pop	{fp, pc}
   1adc0:	push	{fp, lr}
   1adc4:	mov	fp, sp
   1adc8:	sub	sp, sp, #16
   1adcc:	str	r0, [sp, #8]
   1add0:	movw	r0, #0
   1add4:	str	r0, [sp, #4]
   1add8:	ldr	r1, [sp, #8]
   1addc:	ldr	r1, [r1]
   1ade0:	cmp	r1, r0
   1ade4:	beq	1ae3c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1ade8:	ldr	r0, [sp, #8]
   1adec:	ldr	r0, [r0]
   1adf0:	ldr	r0, [r0, #2948]	; 0xb84
   1adf4:	ldr	r1, [sp, #8]
   1adf8:	ldr	r1, [r1, #4]
   1adfc:	cmp	r0, r1
   1ae00:	beq	1ae3c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1ae04:	ldr	r0, [sp, #8]
   1ae08:	ldr	r0, [r0]
   1ae0c:	ldr	r0, [r0, #2952]	; 0xb88
   1ae10:	sub	r0, r0, #2944	; 0xb80
   1ae14:	ldr	r1, [sp, #8]
   1ae18:	ldr	r1, [r1]
   1ae1c:	ldr	r1, [r1, #2948]	; 0xb84
   1ae20:	str	r0, [r1, #2952]	; 0xb88
   1ae24:	ldr	r0, [sp, #8]
   1ae28:	ldr	r0, [r0]
   1ae2c:	ldr	r0, [r0, #2948]	; 0xb84
   1ae30:	ldr	r1, [sp, #8]
   1ae34:	str	r0, [r1]
   1ae38:	b	1af6c <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1ae3c:	movw	r0, #2956	; 0xb8c
   1ae40:	bl	12914 <malloc@plt>
   1ae44:	str	r0, [sp, #4]
   1ae48:	movw	lr, #0
   1ae4c:	cmp	r0, lr
   1ae50:	bne	1ae60 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1ae54:	mvn	r0, #0
   1ae58:	str	r0, [fp, #-4]
   1ae5c:	b	1afb4 <flatcc_emitter_copy_buffer@@Base+0x340>
   1ae60:	ldr	r0, [sp, #8]
   1ae64:	ldr	r1, [r0, #28]
   1ae68:	add	r1, r1, #2944	; 0xb80
   1ae6c:	str	r1, [r0, #28]
   1ae70:	ldr	r0, [sp, #8]
   1ae74:	ldr	r0, [r0]
   1ae78:	movw	r1, #0
   1ae7c:	cmp	r0, r1
   1ae80:	beq	1aed4 <flatcc_emitter_copy_buffer@@Base+0x260>
   1ae84:	ldr	r0, [sp, #8]
   1ae88:	ldr	r0, [r0, #4]
   1ae8c:	ldr	r1, [sp, #4]
   1ae90:	str	r0, [r1, #2948]	; 0xb84
   1ae94:	ldr	r0, [sp, #8]
   1ae98:	ldr	r0, [r0]
   1ae9c:	ldr	r1, [sp, #4]
   1aea0:	str	r0, [r1, #2944]	; 0xb80
   1aea4:	ldr	r0, [sp, #4]
   1aea8:	ldr	r1, [sp, #8]
   1aeac:	ldr	r1, [r1]
   1aeb0:	str	r0, [r1, #2948]	; 0xb84
   1aeb4:	ldr	r0, [sp, #4]
   1aeb8:	ldr	r1, [sp, #8]
   1aebc:	ldr	r1, [r1, #4]
   1aec0:	str	r0, [r1, #2944]	; 0xb80
   1aec4:	ldr	r0, [sp, #4]
   1aec8:	ldr	r1, [sp, #8]
   1aecc:	str	r0, [r1]
   1aed0:	b	1af6c <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1aed4:	ldr	r0, [sp, #4]
   1aed8:	ldr	r1, [sp, #8]
   1aedc:	str	r0, [r1]
   1aee0:	ldr	r0, [sp, #4]
   1aee4:	ldr	r1, [sp, #8]
   1aee8:	str	r0, [r1, #4]
   1aeec:	ldr	r0, [sp, #4]
   1aef0:	ldr	r1, [sp, #4]
   1aef4:	str	r0, [r1, #2944]	; 0xb80
   1aef8:	ldr	r0, [sp, #4]
   1aefc:	ldr	r1, [sp, #4]
   1af00:	str	r0, [r1, #2948]	; 0xb84
   1af04:	ldr	r0, [sp, #8]
   1af08:	ldr	r0, [r0]
   1af0c:	add	r0, r0, #1472	; 0x5c0
   1af10:	ldr	r1, [sp, #8]
   1af14:	str	r0, [r1, #8]
   1af18:	ldr	r0, [sp, #8]
   1af1c:	ldr	r0, [r0, #8]
   1af20:	ldr	r1, [sp, #8]
   1af24:	str	r0, [r1, #16]
   1af28:	ldr	r0, [sp, #8]
   1af2c:	movw	r1, #1472	; 0x5c0
   1af30:	str	r1, [r0, #12]
   1af34:	ldr	r0, [sp, #8]
   1af38:	ldr	r0, [r0, #12]
   1af3c:	movw	r1, #2944	; 0xb80
   1af40:	sub	r0, r1, r0
   1af44:	ldr	r1, [sp, #8]
   1af48:	str	r0, [r1, #20]
   1af4c:	ldr	r0, [sp, #8]
   1af50:	ldr	r0, [r0, #12]
   1af54:	movw	r1, #0
   1af58:	sub	r0, r1, r0
   1af5c:	ldr	r2, [sp, #4]
   1af60:	str	r0, [r2, #2952]	; 0xb88
   1af64:	str	r1, [fp, #-4]
   1af68:	b	1afb4 <flatcc_emitter_copy_buffer@@Base+0x340>
   1af6c:	ldr	r0, [sp, #8]
   1af70:	ldr	r0, [r0]
   1af74:	add	r0, r0, #2944	; 0xb80
   1af78:	ldr	r1, [sp, #8]
   1af7c:	str	r0, [r1, #8]
   1af80:	ldr	r0, [sp, #8]
   1af84:	movw	r1, #2944	; 0xb80
   1af88:	str	r1, [r0, #12]
   1af8c:	ldr	r0, [sp, #8]
   1af90:	ldr	r0, [r0]
   1af94:	ldr	r0, [r0, #2944]	; 0xb80
   1af98:	ldr	r0, [r0, #2952]	; 0xb88
   1af9c:	sub	r0, r0, #2944	; 0xb80
   1afa0:	ldr	r1, [sp, #8]
   1afa4:	ldr	r1, [r1]
   1afa8:	str	r0, [r1, #2952]	; 0xb88
   1afac:	movw	r0, #0
   1afb0:	str	r0, [fp, #-4]
   1afb4:	ldr	r0, [fp, #-4]
   1afb8:	mov	sp, fp
   1afbc:	pop	{fp, pc}
   1afc0:	push	{fp, lr}
   1afc4:	mov	fp, sp
   1afc8:	sub	sp, sp, #16
   1afcc:	str	r0, [sp, #8]
   1afd0:	movw	r0, #0
   1afd4:	str	r0, [sp, #4]
   1afd8:	ldr	r1, [sp, #8]
   1afdc:	ldr	r1, [r1, #4]
   1afe0:	cmp	r1, r0
   1afe4:	beq	1b01c <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1afe8:	ldr	r0, [sp, #8]
   1afec:	ldr	r0, [r0, #4]
   1aff0:	ldr	r0, [r0, #2944]	; 0xb80
   1aff4:	ldr	r1, [sp, #8]
   1aff8:	ldr	r1, [r1]
   1affc:	cmp	r0, r1
   1b000:	beq	1b01c <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1b004:	ldr	r0, [sp, #8]
   1b008:	ldr	r0, [r0, #4]
   1b00c:	ldr	r0, [r0, #2944]	; 0xb80
   1b010:	ldr	r1, [sp, #8]
   1b014:	str	r0, [r1, #4]
   1b018:	b	1b14c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1b01c:	movw	r0, #2956	; 0xb8c
   1b020:	bl	12914 <malloc@plt>
   1b024:	str	r0, [sp, #4]
   1b028:	movw	lr, #0
   1b02c:	cmp	r0, lr
   1b030:	bne	1b040 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1b034:	mvn	r0, #0
   1b038:	str	r0, [fp, #-4]
   1b03c:	b	1b190 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1b040:	ldr	r0, [sp, #8]
   1b044:	ldr	r1, [r0, #28]
   1b048:	add	r1, r1, #2944	; 0xb80
   1b04c:	str	r1, [r0, #28]
   1b050:	ldr	r0, [sp, #8]
   1b054:	ldr	r0, [r0, #4]
   1b058:	movw	r1, #0
   1b05c:	cmp	r0, r1
   1b060:	beq	1b0b4 <flatcc_emitter_copy_buffer@@Base+0x440>
   1b064:	ldr	r0, [sp, #8]
   1b068:	ldr	r0, [r0, #4]
   1b06c:	ldr	r1, [sp, #4]
   1b070:	str	r0, [r1, #2948]	; 0xb84
   1b074:	ldr	r0, [sp, #8]
   1b078:	ldr	r0, [r0]
   1b07c:	ldr	r1, [sp, #4]
   1b080:	str	r0, [r1, #2944]	; 0xb80
   1b084:	ldr	r0, [sp, #4]
   1b088:	ldr	r1, [sp, #8]
   1b08c:	ldr	r1, [r1]
   1b090:	str	r0, [r1, #2948]	; 0xb84
   1b094:	ldr	r0, [sp, #4]
   1b098:	ldr	r1, [sp, #8]
   1b09c:	ldr	r1, [r1, #4]
   1b0a0:	str	r0, [r1, #2944]	; 0xb80
   1b0a4:	ldr	r0, [sp, #4]
   1b0a8:	ldr	r1, [sp, #8]
   1b0ac:	str	r0, [r1, #4]
   1b0b0:	b	1b14c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1b0b4:	ldr	r0, [sp, #4]
   1b0b8:	ldr	r1, [sp, #8]
   1b0bc:	str	r0, [r1]
   1b0c0:	ldr	r0, [sp, #4]
   1b0c4:	ldr	r1, [sp, #8]
   1b0c8:	str	r0, [r1, #4]
   1b0cc:	ldr	r0, [sp, #4]
   1b0d0:	ldr	r1, [sp, #4]
   1b0d4:	str	r0, [r1, #2944]	; 0xb80
   1b0d8:	ldr	r0, [sp, #4]
   1b0dc:	ldr	r1, [sp, #4]
   1b0e0:	str	r0, [r1, #2948]	; 0xb84
   1b0e4:	ldr	r0, [sp, #8]
   1b0e8:	ldr	r0, [r0]
   1b0ec:	add	r0, r0, #1472	; 0x5c0
   1b0f0:	ldr	r1, [sp, #8]
   1b0f4:	str	r0, [r1, #8]
   1b0f8:	ldr	r0, [sp, #8]
   1b0fc:	ldr	r0, [r0, #8]
   1b100:	ldr	r1, [sp, #8]
   1b104:	str	r0, [r1, #16]
   1b108:	ldr	r0, [sp, #8]
   1b10c:	movw	r1, #1472	; 0x5c0
   1b110:	str	r1, [r0, #12]
   1b114:	ldr	r0, [sp, #8]
   1b118:	ldr	r0, [r0, #12]
   1b11c:	movw	r1, #2944	; 0xb80
   1b120:	sub	r0, r1, r0
   1b124:	ldr	r1, [sp, #8]
   1b128:	str	r0, [r1, #20]
   1b12c:	ldr	r0, [sp, #8]
   1b130:	ldr	r0, [r0, #12]
   1b134:	movw	r1, #0
   1b138:	sub	r0, r1, r0
   1b13c:	ldr	r2, [sp, #4]
   1b140:	str	r0, [r2, #2952]	; 0xb88
   1b144:	str	r1, [fp, #-4]
   1b148:	b	1b190 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1b14c:	ldr	r0, [sp, #8]
   1b150:	ldr	r0, [r0, #4]
   1b154:	ldr	r1, [sp, #8]
   1b158:	str	r0, [r1, #16]
   1b15c:	ldr	r0, [sp, #8]
   1b160:	movw	r1, #2944	; 0xb80
   1b164:	str	r1, [r0, #20]
   1b168:	ldr	r0, [sp, #8]
   1b16c:	ldr	r0, [r0, #4]
   1b170:	ldr	r0, [r0, #2948]	; 0xb84
   1b174:	ldr	r0, [r0, #2952]	; 0xb88
   1b178:	add	r0, r0, #2944	; 0xb80
   1b17c:	ldr	r1, [sp, #8]
   1b180:	ldr	r1, [r1, #4]
   1b184:	str	r0, [r1, #2952]	; 0xb88
   1b188:	movw	r0, #0
   1b18c:	str	r0, [fp, #-4]
   1b190:	ldr	r0, [fp, #-4]
   1b194:	mov	sp, fp
   1b198:	pop	{fp, pc}
   1b19c:	andeq	r0, r0, r0

0001b1a0 <grisu3_diy_fp_encode_double@@Base>:
   1b1a0:	push	{r4, r5, r6, sl, fp, lr}
   1b1a4:	add	fp, sp, #16
   1b1a8:	sub	sp, sp, #256	; 0x100
   1b1ac:	ldr	ip, [fp, #12]
   1b1b0:	ldr	lr, [fp, #8]
   1b1b4:	str	r0, [fp, #-24]	; 0xffffffe8
   1b1b8:	str	r1, [fp, #-20]	; 0xffffffec
   1b1bc:	str	r2, [fp, #-28]	; 0xffffffe4
   1b1c0:	str	r3, [fp, #-32]	; 0xffffffe0
   1b1c4:	mov	r0, #3
   1b1c8:	str	r0, [fp, #-36]	; 0xffffffdc
   1b1cc:	mov	r0, #8
   1b1d0:	str	r0, [fp, #-40]	; 0xffffffd8
   1b1d4:	movw	r0, #64462	; 0xfbce
   1b1d8:	movt	r0, #65535	; 0xffff
   1b1dc:	str	r0, [fp, #-44]	; 0xffffffd4
   1b1e0:	mov	r0, #1048576	; 0x100000
   1b1e4:	str	r0, [fp, #-52]	; 0xffffffcc
   1b1e8:	mov	r0, #0
   1b1ec:	str	r0, [fp, #-56]	; 0xffffffc8
   1b1f0:	mov	r1, #64	; 0x40
   1b1f4:	str	r1, [fp, #-60]	; 0xffffffc4
   1b1f8:	mov	r1, #19
   1b1fc:	str	r1, [fp, #-64]	; 0xffffffc0
   1b200:	ldr	r1, [fp, #8]
   1b204:	cmp	r1, #0
   1b208:	movwne	r1, #1
   1b20c:	lsl	r1, r1, #2
   1b210:	str	r1, [fp, #-68]	; 0xffffffbc
   1b214:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b218:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b21c:	sub	r1, r1, r2
   1b220:	str	r1, [fp, #-72]	; 0xffffffb8
   1b224:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b228:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b22c:	str	r2, [fp, #-92]	; 0xffffffa4
   1b230:	str	r1, [fp, #-96]	; 0xffffffa0
   1b234:	str	r0, [fp, #-88]	; 0xffffffa8
   1b238:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b23c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b240:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b244:	ldr	r1, [fp, #-84]	; 0xffffffac
   1b248:	mov	r4, sp
   1b24c:	str	r0, [r4]
   1b250:	str	r1, [r4, #4]
   1b254:	add	r0, sp, #112	; 0x70
   1b258:	str	lr, [sp, #48]	; 0x30
   1b25c:	str	ip, [sp, #44]	; 0x2c
   1b260:	bl	1b6f8 <grisu3_diy_fp_encode_double@@Base+0x558>
   1b264:	ldr	r0, [sp, #112]	; 0x70
   1b268:	str	r0, [fp, #-96]	; 0xffffffa0
   1b26c:	ldr	r0, [sp, #116]	; 0x74
   1b270:	str	r0, [fp, #-92]	; 0xffffffa4
   1b274:	ldr	r0, [sp, #120]	; 0x78
   1b278:	str	r0, [fp, #-88]	; 0xffffffa8
   1b27c:	ldr	r0, [sp, #124]	; 0x7c
   1b280:	str	r0, [fp, #-84]	; 0xffffffac
   1b284:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b288:	movw	r1, #0
   1b28c:	sub	r0, r1, r0
   1b290:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b294:	lsl	r0, r1, r0
   1b298:	str	r0, [fp, #-68]	; 0xffffffbc
   1b29c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b2a0:	sub	r1, fp, #112	; 0x70
   1b2a4:	bl	1b834 <grisu3_diy_fp_encode_double@@Base+0x694>
   1b2a8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b2ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b2b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1b2b4:	cmp	r0, r1
   1b2b8:	beq	1b3a4 <grisu3_diy_fp_encode_double@@Base+0x204>
   1b2bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b2c0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b2c4:	sub	r0, r0, r1
   1b2c8:	sub	r0, r0, #1
   1b2cc:	str	r0, [sp, #108]	; 0x6c
   1b2d0:	ldr	r0, [sp, #108]	; 0x6c
   1b2d4:	cmp	r0, #0
   1b2d8:	blt	1b2ec <grisu3_diy_fp_encode_double@@Base+0x14c>
   1b2dc:	ldr	r0, [sp, #108]	; 0x6c
   1b2e0:	cmp	r0, #7
   1b2e4:	bge	1b2ec <grisu3_diy_fp_encode_double@@Base+0x14c>
   1b2e8:	b	1b30c <grisu3_diy_fp_encode_double@@Base+0x16c>
   1b2ec:	ldr	r0, [pc, #1004]	; 1b6e0 <grisu3_diy_fp_encode_double@@Base+0x540>
   1b2f0:	add	r0, pc, r0
   1b2f4:	ldr	r1, [pc, #1000]	; 1b6e4 <grisu3_diy_fp_encode_double@@Base+0x544>
   1b2f8:	add	r1, pc, r1
   1b2fc:	ldr	r2, [pc, #996]	; 1b6e8 <grisu3_diy_fp_encode_double@@Base+0x548>
   1b300:	add	r3, pc, r2
   1b304:	movw	r2, #185	; 0xb9
   1b308:	bl	1298c <__assert_fail@plt>
   1b30c:	ldr	r0, [sp, #108]	; 0x6c
   1b310:	ldr	r1, [pc, #988]	; 1b6f4 <grisu3_diy_fp_encode_double@@Base+0x554>
   1b314:	add	r1, pc, r1
   1b318:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b31c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b320:	ldr	ip, [fp, #-88]	; 0xffffffa8
   1b324:	ldr	lr, [fp, #-84]	; 0xffffffac
   1b328:	ldr	r0, [r1, r0, lsl #4]!
   1b32c:	ldr	r4, [r1, #4]
   1b330:	ldr	r5, [r1, #8]
   1b334:	ldr	r1, [r1, #12]
   1b338:	mov	r6, sp
   1b33c:	str	r4, [r6, #12]
   1b340:	str	r0, [r6, #8]
   1b344:	str	r5, [r6, #16]
   1b348:	str	ip, [r6]
   1b34c:	str	r1, [r6, #20]
   1b350:	str	lr, [r6, #4]
   1b354:	add	r0, sp, #88	; 0x58
   1b358:	bl	1b9dc <grisu3_diy_fp_encode_double@@Base+0x83c>
   1b35c:	ldr	r0, [sp, #88]	; 0x58
   1b360:	str	r0, [fp, #-96]	; 0xffffffa0
   1b364:	ldr	r0, [sp, #92]	; 0x5c
   1b368:	str	r0, [fp, #-92]	; 0xffffffa4
   1b36c:	ldr	r0, [sp, #96]	; 0x60
   1b370:	str	r0, [fp, #-88]	; 0xffffffa8
   1b374:	ldr	r0, [sp, #100]	; 0x64
   1b378:	str	r0, [fp, #-84]	; 0xffffffac
   1b37c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b380:	add	r0, r0, #1
   1b384:	ldr	r1, [sp, #108]	; 0x6c
   1b388:	add	r0, r0, r1
   1b38c:	cmp	r0, #19
   1b390:	ble	1b3a0 <grisu3_diy_fp_encode_double@@Base+0x200>
   1b394:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b398:	add	r0, r0, #4
   1b39c:	str	r0, [fp, #-68]	; 0xffffffbc
   1b3a0:	b	1b3a4 <grisu3_diy_fp_encode_double@@Base+0x204>
   1b3a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b3a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b3ac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b3b0:	ldr	r1, [fp, #-84]	; 0xffffffac
   1b3b4:	ldr	ip, [fp, #-112]	; 0xffffff90
   1b3b8:	ldr	lr, [fp, #-108]	; 0xffffff94
   1b3bc:	ldr	r4, [fp, #-104]	; 0xffffff98
   1b3c0:	ldr	r5, [fp, #-100]	; 0xffffff9c
   1b3c4:	mov	r6, sp
   1b3c8:	str	r5, [r6, #20]
   1b3cc:	str	r4, [r6, #16]
   1b3d0:	str	lr, [r6, #12]
   1b3d4:	str	ip, [r6, #8]
   1b3d8:	str	r1, [r6, #4]
   1b3dc:	str	r0, [r6]
   1b3e0:	add	r0, sp, #72	; 0x48
   1b3e4:	str	r0, [sp, #40]	; 0x28
   1b3e8:	bl	1b9dc <grisu3_diy_fp_encode_double@@Base+0x83c>
   1b3ec:	ldr	r0, [sp, #40]	; 0x28
   1b3f0:	vld1.64	{d16-d17}, [r0]
   1b3f4:	sub	r1, fp, #96	; 0x60
   1b3f8:	vst1.64	{d16-d17}, [r1]
   1b3fc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b400:	add	r2, r1, #1
   1b404:	cmp	r1, #0
   1b408:	movne	r1, r2
   1b40c:	add	r1, r1, #8
   1b410:	str	r1, [fp, #-68]	; 0xffffffbc
   1b414:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b418:	str	r1, [fp, #-80]	; 0xffffffb0
   1b41c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b420:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b424:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b428:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b42c:	mov	lr, sp
   1b430:	str	r1, [lr]
   1b434:	str	ip, [lr, #4]
   1b438:	add	r0, sp, #56	; 0x38
   1b43c:	bl	1b6f8 <grisu3_diy_fp_encode_double@@Base+0x558>
   1b440:	ldr	r0, [pc, #676]	; 1b6ec <grisu3_diy_fp_encode_double@@Base+0x54c>
   1b444:	ldr	r1, [sp, #56]	; 0x38
   1b448:	str	r1, [fp, #-96]	; 0xffffffa0
   1b44c:	ldr	r1, [sp, #60]	; 0x3c
   1b450:	str	r1, [fp, #-92]	; 0xffffffa4
   1b454:	ldr	r1, [sp, #64]	; 0x40
   1b458:	str	r1, [fp, #-88]	; 0xffffffa8
   1b45c:	ldr	r1, [sp, #68]	; 0x44
   1b460:	str	r1, [fp, #-84]	; 0xffffffac
   1b464:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1b468:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b46c:	sub	r1, r1, r2
   1b470:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b474:	lsl	r1, r2, r1
   1b478:	str	r1, [fp, #-68]	; 0xffffffbc
   1b47c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b480:	add	r1, r1, #64	; 0x40
   1b484:	str	r1, [fp, #-132]	; 0xffffff7c
   1b488:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1b48c:	cmp	r1, r0
   1b490:	blt	1b4a0 <grisu3_diy_fp_encode_double@@Base+0x300>
   1b494:	movw	r0, #64	; 0x40
   1b498:	str	r0, [sp, #36]	; 0x24
   1b49c:	b	1b4d4 <grisu3_diy_fp_encode_double@@Base+0x334>
   1b4a0:	ldr	r0, [pc, #584]	; 1b6f0 <grisu3_diy_fp_encode_double@@Base+0x550>
   1b4a4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1b4a8:	cmp	r1, r0
   1b4ac:	bgt	1b4bc <grisu3_diy_fp_encode_double@@Base+0x31c>
   1b4b0:	movw	r0, #0
   1b4b4:	str	r0, [sp, #32]
   1b4b8:	b	1b4cc <grisu3_diy_fp_encode_double@@Base+0x32c>
   1b4bc:	ldr	r0, [pc, #556]	; 1b6f0 <grisu3_diy_fp_encode_double@@Base+0x550>
   1b4c0:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1b4c4:	sub	r0, r1, r0
   1b4c8:	str	r0, [sp, #32]
   1b4cc:	ldr	r0, [sp, #32]
   1b4d0:	str	r0, [sp, #36]	; 0x24
   1b4d4:	ldr	r0, [sp, #36]	; 0x24
   1b4d8:	str	r0, [fp, #-132]	; 0xffffff7c
   1b4dc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1b4e0:	movw	r1, #64	; 0x40
   1b4e4:	sub	r0, r1, r0
   1b4e8:	str	r0, [sp, #136]	; 0x88
   1b4ec:	ldr	r0, [sp, #136]	; 0x88
   1b4f0:	add	r0, r0, #3
   1b4f4:	cmp	r0, #64	; 0x40
   1b4f8:	blt	1b578 <grisu3_diy_fp_encode_double@@Base+0x3d8>
   1b4fc:	ldr	r0, [sp, #136]	; 0x88
   1b500:	sub	r0, r0, #62	; 0x3e
   1b504:	str	r0, [sp, #52]	; 0x34
   1b508:	ldr	r0, [sp, #52]	; 0x34
   1b50c:	ldr	r1, [fp, #-96]	; 0xffffffa0
   1b510:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1b514:	lsr	r1, r1, r0
   1b518:	rsb	r3, r0, #32
   1b51c:	orr	r1, r1, r2, lsl r3
   1b520:	sub	r3, r0, #32
   1b524:	cmp	r3, #0
   1b528:	lsrge	r1, r2, r3
   1b52c:	lsr	r0, r2, r0
   1b530:	cmp	r3, #0
   1b534:	movwge	r0, #0
   1b538:	str	r0, [fp, #-92]	; 0xffffffa4
   1b53c:	str	r1, [fp, #-96]	; 0xffffffa0
   1b540:	ldr	r0, [sp, #52]	; 0x34
   1b544:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b548:	add	r0, r1, r0
   1b54c:	str	r0, [fp, #-88]	; 0xffffffa8
   1b550:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b554:	ldr	r1, [sp, #52]	; 0x34
   1b558:	asr	r0, r0, r1
   1b55c:	add	r0, r0, #1
   1b560:	add	r0, r0, #8
   1b564:	str	r0, [fp, #-68]	; 0xffffffbc
   1b568:	ldr	r0, [sp, #52]	; 0x34
   1b56c:	ldr	r1, [sp, #136]	; 0x88
   1b570:	sub	r0, r1, r0
   1b574:	str	r0, [sp, #136]	; 0x88
   1b578:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1b57c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1b580:	ldr	r2, [sp, #136]	; 0x88
   1b584:	lsr	r0, r0, r2
   1b588:	rsb	r3, r2, #32
   1b58c:	orr	r0, r0, r1, lsl r3
   1b590:	sub	r3, r2, #32
   1b594:	cmp	r3, #0
   1b598:	lsrge	r0, r1, r3
   1b59c:	lsr	r1, r1, r2
   1b5a0:	cmp	r3, #0
   1b5a4:	movwge	r1, #0
   1b5a8:	str	r1, [fp, #-124]	; 0xffffff84
   1b5ac:	str	r0, [fp, #-128]	; 0xffffff80
   1b5b0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b5b4:	ldr	r1, [sp, #136]	; 0x88
   1b5b8:	add	r0, r0, r1
   1b5bc:	str	r0, [fp, #-120]	; 0xffffff88
   1b5c0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1b5c4:	ldr	r1, [sp, #136]	; 0x88
   1b5c8:	sub	r2, r1, #1
   1b5cc:	mov	r3, #1
   1b5d0:	lsl	r2, r3, r2
   1b5d4:	sub	r1, r1, #33	; 0x21
   1b5d8:	cmp	r1, #0
   1b5dc:	movwge	r2, #0
   1b5e0:	and	r0, r0, r2
   1b5e4:	lsl	r0, r0, #3
   1b5e8:	str	r0, [sp, #132]	; 0x84
   1b5ec:	ldr	r0, [sp, #136]	; 0x88
   1b5f0:	sub	r1, r0, #1
   1b5f4:	lsl	r1, r3, r1
   1b5f8:	sub	r0, r0, #33	; 0x21
   1b5fc:	cmp	r0, #0
   1b600:	movwge	r1, #0
   1b604:	lsl	r0, r1, #3
   1b608:	str	r0, [sp, #128]	; 0x80
   1b60c:	ldr	r0, [sp, #136]	; 0x88
   1b610:	ldr	r1, [sp, #128]	; 0x80
   1b614:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b618:	add	r1, r1, r2
   1b61c:	cmp	r0, r1
   1b620:	blt	1b674 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   1b624:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b628:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b62c:	adds	r0, r0, #1
   1b630:	adc	r1, r1, #0
   1b634:	str	r0, [fp, #-128]	; 0xffffff80
   1b638:	str	r1, [fp, #-124]	; 0xffffff84
   1b63c:	ldrb	r0, [fp, #-122]	; 0xffffff86
   1b640:	tst	r0, #32
   1b644:	beq	1b670 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   1b648:	b	1b64c <grisu3_diy_fp_encode_double@@Base+0x4ac>
   1b64c:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b650:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b654:	lsrs	r1, r1, #1
   1b658:	rrx	r0, r0
   1b65c:	str	r1, [fp, #-124]	; 0xffffff84
   1b660:	str	r0, [fp, #-128]	; 0xffffff80
   1b664:	ldr	r0, [fp, #-120]	; 0xffffff88
   1b668:	add	r0, r0, #1
   1b66c:	str	r0, [fp, #-120]	; 0xffffff88
   1b670:	b	1b674 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   1b674:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b678:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b67c:	ldr	r2, [fp, #-120]	; 0xffffff88
   1b680:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1b684:	bl	1bb70 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   1b688:	ldr	r0, [fp, #12]
   1b68c:	vstr	d0, [r0]
   1b690:	ldr	r0, [sp, #128]	; 0x80
   1b694:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b698:	sub	r0, r0, r1
   1b69c:	ldr	r1, [sp, #132]	; 0x84
   1b6a0:	cmp	r0, r1
   1b6a4:	movw	r0, #1
   1b6a8:	str	r0, [sp, #28]
   1b6ac:	bge	1b6d0 <grisu3_diy_fp_encode_double@@Base+0x530>
   1b6b0:	ldr	r0, [sp, #132]	; 0x84
   1b6b4:	ldr	r1, [sp, #128]	; 0x80
   1b6b8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b6bc:	add	r1, r1, r2
   1b6c0:	cmp	r0, r1
   1b6c4:	movw	r0, #0
   1b6c8:	movge	r0, #1
   1b6cc:	str	r0, [sp, #28]
   1b6d0:	ldr	r0, [sp, #28]
   1b6d4:	and	r0, r0, #1
   1b6d8:	sub	sp, fp, #16
   1b6dc:	pop	{r4, r5, r6, sl, fp, pc}
   1b6e0:	andeq	r8, r0, r8, ror #7
   1b6e4:	strdeq	r8, [r0], -ip
   1b6e8:	andeq	r8, r0, r2, ror #8
   1b6ec:			; <UNDEFINED> instruction: 0xfffffc0e
   1b6f0:			; <UNDEFINED> instruction: 0xfffffbce
   1b6f4:	andeq	r9, r1, r4, asr sp
   1b6f8:	push	{fp, lr}
   1b6fc:	mov	fp, sp
   1b700:	sub	sp, sp, #24
   1b704:	ldr	r1, [fp, #12]
   1b708:	ldr	ip, [fp, #8]
   1b70c:	str	r2, [sp, #8]
   1b710:	str	r3, [sp, #12]
   1b714:	str	ip, [sp, #16]
   1b718:	str	r1, [sp, #20]
   1b71c:	ldr	r1, [sp, #8]
   1b720:	ldr	r2, [sp, #12]
   1b724:	orr	r1, r1, r2
   1b728:	cmp	r1, #0
   1b72c:	str	r0, [sp, #4]
   1b730:	beq	1b73c <grisu3_diy_fp_encode_double@@Base+0x59c>
   1b734:	b	1b738 <grisu3_diy_fp_encode_double@@Base+0x598>
   1b738:	b	1b75c <grisu3_diy_fp_encode_double@@Base+0x5bc>
   1b73c:	ldr	r0, [pc, #228]	; 1b828 <grisu3_diy_fp_encode_double@@Base+0x688>
   1b740:	add	r0, pc, r0
   1b744:	ldr	r1, [pc, #224]	; 1b82c <grisu3_diy_fp_encode_double@@Base+0x68c>
   1b748:	add	r1, pc, r1
   1b74c:	ldr	r2, [pc, #220]	; 1b830 <grisu3_diy_fp_encode_double@@Base+0x690>
   1b750:	add	r3, pc, r2
   1b754:	movw	r2, #260	; 0x104
   1b758:	bl	1298c <__assert_fail@plt>
   1b75c:	b	1b760 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   1b760:	ldrh	r0, [sp, #14]
   1b764:	movw	r1, #65472	; 0xffc0
   1b768:	and	r0, r0, r1
   1b76c:	cmp	r0, #0
   1b770:	movwne	r0, #1
   1b774:	mvn	r1, #0
   1b778:	eor	r0, r0, r1
   1b77c:	tst	r0, #1
   1b780:	beq	1b7b0 <grisu3_diy_fp_encode_double@@Base+0x610>
   1b784:	ldr	r0, [sp, #8]
   1b788:	ldr	r1, [sp, #12]
   1b78c:	lsl	r1, r1, #10
   1b790:	orr	r1, r1, r0, lsr #22
   1b794:	lsl	r0, r0, #10
   1b798:	str	r0, [sp, #8]
   1b79c:	str	r1, [sp, #12]
   1b7a0:	ldr	r0, [sp, #16]
   1b7a4:	sub	r0, r0, #10
   1b7a8:	str	r0, [sp, #16]
   1b7ac:	b	1b760 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   1b7b0:	b	1b7b4 <grisu3_diy_fp_encode_double@@Base+0x614>
   1b7b4:	ldrb	r0, [sp, #15]
   1b7b8:	lsr	r0, r0, #7
   1b7bc:	mvn	r1, #0
   1b7c0:	eor	r0, r0, r1
   1b7c4:	tst	r0, #1
   1b7c8:	beq	1b7fc <grisu3_diy_fp_encode_double@@Base+0x65c>
   1b7cc:	ldr	r0, [sp, #8]
   1b7d0:	ldr	r1, [sp, #12]
   1b7d4:	lsl	r1, r1, #1
   1b7d8:	orr	r1, r1, r0, lsr #31
   1b7dc:	lsl	r0, r0, #1
   1b7e0:	str	r0, [sp, #8]
   1b7e4:	str	r1, [sp, #12]
   1b7e8:	ldr	r0, [sp, #16]
   1b7ec:	mvn	r1, #0
   1b7f0:	add	r0, r0, r1
   1b7f4:	str	r0, [sp, #16]
   1b7f8:	b	1b7b4 <grisu3_diy_fp_encode_double@@Base+0x614>
   1b7fc:	ldr	r0, [sp, #8]
   1b800:	ldr	r1, [sp, #4]
   1b804:	str	r0, [r1]
   1b808:	ldr	r0, [sp, #12]
   1b80c:	str	r0, [r1, #4]
   1b810:	ldr	r0, [sp, #16]
   1b814:	str	r0, [r1, #8]
   1b818:	ldr	r0, [sp, #20]
   1b81c:	str	r0, [r1, #12]
   1b820:	mov	sp, fp
   1b824:	pop	{fp, pc}
   1b828:	andeq	r8, r0, r5, lsr #10
   1b82c:	andeq	r8, r0, r6, lsr #10
   1b830:	andeq	r8, r0, fp, lsl #11
   1b834:	push	{fp, lr}
   1b838:	mov	fp, sp
   1b83c:	sub	sp, sp, #32
   1b840:	ldr	r2, [pc, #344]	; 1b9a0 <grisu3_diy_fp_encode_double@@Base+0x800>
   1b844:	str	r0, [fp, #-4]
   1b848:	str	r1, [fp, #-8]
   1b84c:	movw	r0, #348	; 0x15c
   1b850:	str	r0, [fp, #-12]
   1b854:	movw	r0, #8
   1b858:	str	r0, [sp, #16]
   1b85c:	ldr	r0, [fp, #-4]
   1b860:	cmp	r2, r0
   1b864:	bgt	1b86c <grisu3_diy_fp_encode_double@@Base+0x6cc>
   1b868:	b	1b88c <grisu3_diy_fp_encode_double@@Base+0x6ec>
   1b86c:	ldr	r0, [pc, #304]	; 1b9a4 <grisu3_diy_fp_encode_double@@Base+0x804>
   1b870:	add	r0, pc, r0
   1b874:	ldr	r1, [pc, #300]	; 1b9a8 <grisu3_diy_fp_encode_double@@Base+0x808>
   1b878:	add	r1, pc, r1
   1b87c:	ldr	r2, [pc, #296]	; 1b9ac <grisu3_diy_fp_encode_double@@Base+0x80c>
   1b880:	add	r3, pc, r2
   1b884:	movw	r2, #80	; 0x50
   1b888:	bl	1298c <__assert_fail@plt>
   1b88c:	ldr	r0, [fp, #-4]
   1b890:	cmp	r0, #348	; 0x15c
   1b894:	bge	1b89c <grisu3_diy_fp_encode_double@@Base+0x6fc>
   1b898:	b	1b8bc <grisu3_diy_fp_encode_double@@Base+0x71c>
   1b89c:	ldr	r0, [pc, #268]	; 1b9b0 <grisu3_diy_fp_encode_double@@Base+0x810>
   1b8a0:	add	r0, pc, r0
   1b8a4:	ldr	r1, [pc, #264]	; 1b9b4 <grisu3_diy_fp_encode_double@@Base+0x814>
   1b8a8:	add	r1, pc, r1
   1b8ac:	ldr	r2, [pc, #260]	; 1b9b8 <grisu3_diy_fp_encode_double@@Base+0x818>
   1b8b0:	add	r3, pc, r2
   1b8b4:	movw	r2, #81	; 0x51
   1b8b8:	bl	1298c <__assert_fail@plt>
   1b8bc:	ldr	r0, [pc, #248]	; 1b9bc <grisu3_diy_fp_encode_double@@Base+0x81c>
   1b8c0:	add	r0, pc, r0
   1b8c4:	ldr	r1, [fp, #-4]
   1b8c8:	add	r1, r1, #348	; 0x15c
   1b8cc:	asr	r2, r1, #31
   1b8d0:	add	r1, r1, r2, lsr #29
   1b8d4:	asr	r1, r1, #3
   1b8d8:	str	r1, [sp, #12]
   1b8dc:	ldr	r1, [sp, #12]
   1b8e0:	ldr	r2, [pc, #240]	; 1b9d8 <grisu3_diy_fp_encode_double@@Base+0x838>
   1b8e4:	add	r2, pc, r2
   1b8e8:	add	r1, r2, r1, lsl #4
   1b8ec:	ldrsh	r1, [r1, #10]
   1b8f0:	str	r1, [sp, #8]
   1b8f4:	ldr	r1, [sp, #12]
   1b8f8:	mov	r3, r2
   1b8fc:	ldr	r1, [r3, r1, lsl #4]!
   1b900:	ldr	r3, [r3, #4]
   1b904:	ldr	ip, [fp, #-8]
   1b908:	str	r3, [ip, #4]
   1b90c:	str	r1, [ip]
   1b910:	ldr	r1, [sp, #12]
   1b914:	add	r1, r2, r1, lsl #4
   1b918:	ldrsh	r1, [r1, #8]
   1b91c:	ldr	r2, [fp, #-8]
   1b920:	str	r1, [r2, #8]
   1b924:	ldr	r1, [sp, #8]
   1b928:	ldr	r2, [fp, #-4]
   1b92c:	cmp	r1, r2
   1b930:	str	r0, [sp, #4]
   1b934:	bgt	1b93c <grisu3_diy_fp_encode_double@@Base+0x79c>
   1b938:	b	1b95c <grisu3_diy_fp_encode_double@@Base+0x7bc>
   1b93c:	ldr	r0, [pc, #124]	; 1b9c0 <grisu3_diy_fp_encode_double@@Base+0x820>
   1b940:	add	r0, pc, r0
   1b944:	ldr	r1, [pc, #120]	; 1b9c4 <grisu3_diy_fp_encode_double@@Base+0x824>
   1b948:	add	r1, pc, r1
   1b94c:	ldr	r2, [pc, #116]	; 1b9c8 <grisu3_diy_fp_encode_double@@Base+0x828>
   1b950:	add	r3, pc, r2
   1b954:	movw	r2, #88	; 0x58
   1b958:	bl	1298c <__assert_fail@plt>
   1b95c:	ldr	r0, [fp, #-4]
   1b960:	ldr	r1, [sp, #8]
   1b964:	add	r1, r1, #8
   1b968:	cmp	r0, r1
   1b96c:	bge	1b974 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   1b970:	b	1b994 <grisu3_diy_fp_encode_double@@Base+0x7f4>
   1b974:	ldr	r0, [pc, #80]	; 1b9cc <grisu3_diy_fp_encode_double@@Base+0x82c>
   1b978:	add	r0, pc, r0
   1b97c:	ldr	r1, [pc, #76]	; 1b9d0 <grisu3_diy_fp_encode_double@@Base+0x830>
   1b980:	add	r1, pc, r1
   1b984:	ldr	r2, [pc, #72]	; 1b9d4 <grisu3_diy_fp_encode_double@@Base+0x834>
   1b988:	add	r3, pc, r2
   1b98c:	movw	r2, #89	; 0x59
   1b990:	bl	1298c <__assert_fail@plt>
   1b994:	ldr	r0, [sp, #8]
   1b998:	mov	sp, fp
   1b99c:	pop	{fp, pc}
   1b9a0:			; <UNDEFINED> instruction: 0xfffffea4
   1b9a4:	andeq	r8, r0, r4, lsr #9
   1b9a8:	andeq	r7, r0, ip, ror lr
   1b9ac:			; <UNDEFINED> instruction: 0x000084b3
   1b9b0:	andeq	r8, r0, ip, asr #9
   1b9b4:	andeq	r7, r0, ip, asr #28
   1b9b8:	andeq	r8, r0, r3, lsl #9
   1b9bc:	andeq	r8, r0, r8, lsl #10
   1b9c0:	andeq	r8, r0, r7, asr r4
   1b9c4:	andeq	r7, r0, ip, lsr #27
   1b9c8:	andeq	r8, r0, r3, ror #7
   1b9cc:	andeq	r8, r0, lr, lsr #8
   1b9d0:	andeq	r7, r0, r4, ror sp
   1b9d4:	andeq	r8, r0, fp, lsr #7
   1b9d8:	andeq	r8, r0, r4, ror #9
   1b9dc:	push	{r4, r5, r6, sl, fp, lr}
   1b9e0:	add	fp, sp, #16
   1b9e4:	sub	sp, sp, #104	; 0x68
   1b9e8:	ldr	r1, [fp, #28]
   1b9ec:	ldr	ip, [fp, #24]
   1b9f0:	ldr	lr, [fp, #20]
   1b9f4:	ldr	r4, [fp, #16]
   1b9f8:	ldr	r5, [fp, #12]
   1b9fc:	ldr	r6, [fp, #8]
   1ba00:	str	r2, [fp, #-32]	; 0xffffffe0
   1ba04:	str	r3, [fp, #-28]	; 0xffffffe4
   1ba08:	str	r6, [fp, #-24]	; 0xffffffe8
   1ba0c:	str	r5, [fp, #-20]	; 0xffffffec
   1ba10:	str	r1, [fp, #-36]	; 0xffffffdc
   1ba14:	str	ip, [fp, #-40]	; 0xffffffd8
   1ba18:	str	lr, [fp, #-44]	; 0xffffffd4
   1ba1c:	str	r4, [fp, #-48]	; 0xffffffd0
   1ba20:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ba24:	mov	r2, #0
   1ba28:	str	r2, [fp, #-52]	; 0xffffffcc
   1ba2c:	str	r1, [fp, #-56]	; 0xffffffc8
   1ba30:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ba34:	str	r2, [sp, #60]	; 0x3c
   1ba38:	str	r1, [sp, #56]	; 0x38
   1ba3c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1ba40:	str	r2, [sp, #52]	; 0x34
   1ba44:	str	r1, [sp, #48]	; 0x30
   1ba48:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1ba4c:	str	r2, [sp, #44]	; 0x2c
   1ba50:	str	r1, [sp, #40]	; 0x28
   1ba54:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1ba58:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ba5c:	ldr	ip, [sp, #48]	; 0x30
   1ba60:	ldr	lr, [sp, #52]	; 0x34
   1ba64:	umull	r4, r5, r1, ip
   1ba68:	mla	r1, r1, lr, r5
   1ba6c:	mla	r1, r3, ip, r1
   1ba70:	str	r4, [sp, #32]
   1ba74:	str	r1, [sp, #36]	; 0x24
   1ba78:	ldr	r1, [sp, #56]	; 0x38
   1ba7c:	ldr	r3, [sp, #60]	; 0x3c
   1ba80:	ldr	ip, [sp, #48]	; 0x30
   1ba84:	ldr	lr, [sp, #52]	; 0x34
   1ba88:	umull	r4, r5, r1, ip
   1ba8c:	mla	r1, r1, lr, r5
   1ba90:	mla	r1, r3, ip, r1
   1ba94:	str	r4, [sp, #24]
   1ba98:	str	r1, [sp, #28]
   1ba9c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1baa0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1baa4:	ldr	ip, [sp, #40]	; 0x28
   1baa8:	ldr	lr, [sp, #44]	; 0x2c
   1baac:	umull	r4, r5, r1, ip
   1bab0:	mla	r1, r1, lr, r5
   1bab4:	mla	r1, r3, ip, r1
   1bab8:	str	r4, [sp, #16]
   1babc:	str	r1, [sp, #20]
   1bac0:	ldr	r1, [sp, #56]	; 0x38
   1bac4:	ldr	r3, [sp, #60]	; 0x3c
   1bac8:	ldr	ip, [sp, #40]	; 0x28
   1bacc:	ldr	lr, [sp, #44]	; 0x2c
   1bad0:	umull	r4, r5, r1, ip
   1bad4:	mla	r1, r1, lr, r5
   1bad8:	mla	r1, r3, ip, r1
   1badc:	str	r4, [sp, #8]
   1bae0:	str	r1, [sp, #12]
   1bae4:	ldr	r1, [sp, #12]
   1bae8:	ldr	r3, [sp, #16]
   1baec:	adds	r1, r1, r3
   1baf0:	adc	r2, r2, #0
   1baf4:	ldr	r3, [sp, #24]
   1baf8:	adds	r1, r1, r3
   1bafc:	adc	r2, r2, #0
   1bb00:	str	r1, [sp]
   1bb04:	str	r2, [sp, #4]
   1bb08:	ldr	r1, [sp]
   1bb0c:	ldr	r2, [sp, #4]
   1bb10:	adds	r1, r1, #-2147483648	; 0x80000000
   1bb14:	adc	r2, r2, #0
   1bb18:	str	r1, [sp]
   1bb1c:	str	r2, [sp, #4]
   1bb20:	ldr	r1, [sp, #32]
   1bb24:	ldr	r2, [sp, #36]	; 0x24
   1bb28:	ldr	r3, [sp, #20]
   1bb2c:	adds	r1, r1, r3
   1bb30:	adc	r2, r2, #0
   1bb34:	ldr	r3, [sp, #28]
   1bb38:	adds	r1, r1, r3
   1bb3c:	adc	r2, r2, #0
   1bb40:	ldr	r3, [sp, #4]
   1bb44:	adds	r1, r1, r3
   1bb48:	adc	r2, r2, #0
   1bb4c:	str	r1, [r0]
   1bb50:	str	r2, [r0, #4]
   1bb54:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bb58:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1bb5c:	add	r1, r1, r2
   1bb60:	add	r1, r1, #64	; 0x40
   1bb64:	str	r1, [r0, #8]
   1bb68:	sub	sp, fp, #16
   1bb6c:	pop	{r4, r5, r6, sl, fp, pc}
   1bb70:	push	{fp, lr}
   1bb74:	mov	fp, sp
   1bb78:	sub	sp, sp, #88	; 0x58
   1bb7c:	ldr	ip, [pc, #412]	; 1bd20 <grisu3_diy_fp_encode_double@@Base+0xb80>
   1bb80:	str	r0, [fp, #-24]	; 0xffffffe8
   1bb84:	str	r1, [fp, #-20]	; 0xffffffec
   1bb88:	str	r2, [fp, #-16]
   1bb8c:	str	r3, [fp, #-12]
   1bb90:	mov	r0, #1048576	; 0x100000
   1bb94:	str	r0, [fp, #-28]	; 0xffffffe4
   1bb98:	mov	r0, #0
   1bb9c:	str	r0, [fp, #-32]	; 0xffffffe0
   1bba0:	movw	r0, #65535	; 0xffff
   1bba4:	movt	r0, #15
   1bba8:	str	r0, [fp, #-36]	; 0xffffffdc
   1bbac:	mvn	r0, #0
   1bbb0:	str	r0, [fp, #-40]	; 0xffffffd8
   1bbb4:	str	ip, [sp, #44]	; 0x2c
   1bbb8:	movw	r0, #1075	; 0x433
   1bbbc:	str	r0, [sp, #40]	; 0x28
   1bbc0:	movw	r0, #52	; 0x34
   1bbc4:	str	r0, [sp, #36]	; 0x24
   1bbc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bbcc:	str	r0, [sp, #16]
   1bbd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1bbd4:	str	r0, [sp, #20]
   1bbd8:	ldr	r0, [fp, #-16]
   1bbdc:	str	r0, [sp, #24]
   1bbe0:	ldr	r0, [fp, #-12]
   1bbe4:	str	r0, [sp, #28]
   1bbe8:	ldr	r0, [sp, #20]
   1bbec:	cmp	r0, #2097152	; 0x200000
   1bbf0:	bcc	1bc20 <grisu3_diy_fp_encode_double@@Base+0xa80>
   1bbf4:	b	1bbf8 <grisu3_diy_fp_encode_double@@Base+0xa58>
   1bbf8:	ldr	r0, [sp, #16]
   1bbfc:	ldr	r1, [sp, #20]
   1bc00:	lsrs	r1, r1, #1
   1bc04:	rrx	r0, r0
   1bc08:	str	r1, [sp, #20]
   1bc0c:	str	r0, [sp, #16]
   1bc10:	ldr	r0, [sp, #24]
   1bc14:	add	r0, r0, #1
   1bc18:	str	r0, [sp, #24]
   1bc1c:	b	1bbe8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   1bc20:	ldr	r0, [pc, #248]	; 1bd20 <grisu3_diy_fp_encode_double@@Base+0xb80>
   1bc24:	ldr	r1, [sp, #24]
   1bc28:	cmp	r1, r0
   1bc2c:	bge	1bc3c <grisu3_diy_fp_encode_double@@Base+0xa9c>
   1bc30:	vldr	d16, [pc, #224]	; 1bd18 <grisu3_diy_fp_encode_double@@Base+0xb78>
   1bc34:	vstr	d16, [fp, #-8]
   1bc38:	b	1bd0c <grisu3_diy_fp_encode_double@@Base+0xb6c>
   1bc3c:	b	1bc40 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   1bc40:	ldr	r0, [pc, #216]	; 1bd20 <grisu3_diy_fp_encode_double@@Base+0xb80>
   1bc44:	ldr	r1, [sp, #24]
   1bc48:	cmp	r1, r0
   1bc4c:	movw	r0, #0
   1bc50:	str	r0, [sp, #4]
   1bc54:	ble	1bc6c <grisu3_diy_fp_encode_double@@Base+0xacc>
   1bc58:	ldrb	r0, [sp, #22]
   1bc5c:	and	r0, r0, #16
   1bc60:	mov	r1, #1
   1bc64:	eor	r0, r1, r0, lsr #4
   1bc68:	str	r0, [sp, #4]
   1bc6c:	ldr	r0, [sp, #4]
   1bc70:	tst	r0, #1
   1bc74:	beq	1bca8 <grisu3_diy_fp_encode_double@@Base+0xb08>
   1bc78:	ldr	r0, [sp, #16]
   1bc7c:	ldr	r1, [sp, #20]
   1bc80:	lsl	r1, r1, #1
   1bc84:	orr	r1, r1, r0, lsr #31
   1bc88:	lsl	r0, r0, #1
   1bc8c:	str	r0, [sp, #16]
   1bc90:	str	r1, [sp, #20]
   1bc94:	ldr	r0, [sp, #24]
   1bc98:	mvn	r1, #0
   1bc9c:	add	r0, r0, r1
   1bca0:	str	r0, [sp, #24]
   1bca4:	b	1bc40 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   1bca8:	ldr	r0, [pc, #112]	; 1bd20 <grisu3_diy_fp_encode_double@@Base+0xb80>
   1bcac:	ldr	r1, [sp, #24]
   1bcb0:	cmp	r1, r0
   1bcb4:	bne	1bcd8 <grisu3_diy_fp_encode_double@@Base+0xb38>
   1bcb8:	ldrb	r0, [sp, #22]
   1bcbc:	tst	r0, #16
   1bcc0:	bne	1bcd8 <grisu3_diy_fp_encode_double@@Base+0xb38>
   1bcc4:	b	1bcc8 <grisu3_diy_fp_encode_double@@Base+0xb28>
   1bcc8:	mov	r0, #0
   1bccc:	str	r0, [sp, #12]
   1bcd0:	str	r0, [sp, #8]
   1bcd4:	b	1bcf0 <grisu3_diy_fp_encode_double@@Base+0xb50>
   1bcd8:	ldr	r0, [sp, #24]
   1bcdc:	movw	r1, #1075	; 0x433
   1bce0:	add	r0, r0, r1
   1bce4:	asr	r1, r0, #31
   1bce8:	str	r0, [sp, #8]
   1bcec:	str	r1, [sp, #12]
   1bcf0:	ldr	r0, [sp, #16]
   1bcf4:	ldr	r1, [sp, #20]
   1bcf8:	bfc	r1, #20, #12
   1bcfc:	ldr	r2, [sp, #8]
   1bd00:	orr	r1, r1, r2, lsl #20
   1bd04:	bl	2092c <flatcc_json_parser_struct_as_root@@Base+0x170>
   1bd08:	vstr	d0, [fp, #-8]
   1bd0c:	vldr	d0, [fp, #-8]
   1bd10:	mov	sp, fp
   1bd14:	pop	{fp, pc}
	...
   1bd20:			; <UNDEFINED> instruction: 0xfffffbce

0001bd24 <flatcc_json_parser_error_string@@Base>:
   1bd24:	sub	sp, sp, #12
   1bd28:	str	r0, [sp, #4]
   1bd2c:	ldr	r0, [sp, #4]
   1bd30:	cmp	r0, #34	; 0x22
   1bd34:	str	r0, [sp]
   1bd38:	bhi	1c008 <flatcc_json_parser_error_string@@Base+0x2e4>
   1bd3c:	add	r0, pc, #8
   1bd40:	ldr	r1, [sp]
   1bd44:	ldr	r2, [r0, r1, lsl #2]
   1bd48:	add	pc, r0, r2
   1bd4c:	andeq	r0, r0, ip, lsl #1
   1bd50:	muleq	r0, ip, r0
   1bd54:	andeq	r0, r0, ip, lsr #1
   1bd58:	strheq	r0, [r0], -ip
   1bd5c:	andeq	r0, r0, ip, asr #1
   1bd60:	ldrdeq	r0, [r0], -ip
   1bd64:	andeq	r0, r0, ip, ror #1
   1bd68:	strdeq	r0, [r0], -ip
   1bd6c:	andeq	r0, r0, ip, lsl #2
   1bd70:	andeq	r0, r0, ip, lsl r1
   1bd74:	andeq	r0, r0, ip, lsr #2
   1bd78:	andeq	r0, r0, ip, lsr r1
   1bd7c:	andeq	r0, r0, ip, asr #2
   1bd80:	andeq	r0, r0, ip, asr r1
   1bd84:	andeq	r0, r0, ip, ror #2
   1bd88:	andeq	r0, r0, ip, ror r1
   1bd8c:	andeq	r0, r0, ip, lsl #3
   1bd90:	muleq	r0, ip, r1
   1bd94:	andeq	r0, r0, ip, lsr #3
   1bd98:			; <UNDEFINED> instruction: 0x000001bc
   1bd9c:	andeq	r0, r0, ip, asr #3
   1bda0:	ldrdeq	r0, [r0], -ip
   1bda4:	andeq	r0, r0, ip, ror #3
   1bda8:	strdeq	r0, [r0], -ip
   1bdac:	andeq	r0, r0, ip, lsl #4
   1bdb0:	andeq	r0, r0, ip, lsl r2
   1bdb4:	andeq	r0, r0, ip, lsr #4
   1bdb8:	andeq	r0, r0, ip, lsr r2
   1bdbc:	andeq	r0, r0, ip, asr #4
   1bdc0:	andeq	r0, r0, ip, asr r2
   1bdc4:	andeq	r0, r0, ip, ror #4
   1bdc8:	andeq	r0, r0, ip, ror r2
   1bdcc:	andeq	r0, r0, ip, lsl #5
   1bdd0:	muleq	r0, ip, r2
   1bdd4:	andeq	r0, r0, ip, lsr #5
   1bdd8:	ldr	r0, [pc, #712]	; 1c0a8 <flatcc_json_parser_error_string@@Base+0x384>
   1bddc:	add	r0, pc, r0
   1bde0:	str	r0, [sp, #8]
   1bde4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bde8:	ldr	r0, [pc, #692]	; 1c0a4 <flatcc_json_parser_error_string@@Base+0x380>
   1bdec:	add	r0, pc, r0
   1bdf0:	str	r0, [sp, #8]
   1bdf4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bdf8:	ldr	r0, [pc, #672]	; 1c0a0 <flatcc_json_parser_error_string@@Base+0x37c>
   1bdfc:	add	r0, pc, r0
   1be00:	str	r0, [sp, #8]
   1be04:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be08:	ldr	r0, [pc, #652]	; 1c09c <flatcc_json_parser_error_string@@Base+0x378>
   1be0c:	add	r0, pc, r0
   1be10:	str	r0, [sp, #8]
   1be14:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be18:	ldr	r0, [pc, #632]	; 1c098 <flatcc_json_parser_error_string@@Base+0x374>
   1be1c:	add	r0, pc, r0
   1be20:	str	r0, [sp, #8]
   1be24:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be28:	ldr	r0, [pc, #612]	; 1c094 <flatcc_json_parser_error_string@@Base+0x370>
   1be2c:	add	r0, pc, r0
   1be30:	str	r0, [sp, #8]
   1be34:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be38:	ldr	r0, [pc, #592]	; 1c090 <flatcc_json_parser_error_string@@Base+0x36c>
   1be3c:	add	r0, pc, r0
   1be40:	str	r0, [sp, #8]
   1be44:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be48:	ldr	r0, [pc, #572]	; 1c08c <flatcc_json_parser_error_string@@Base+0x368>
   1be4c:	add	r0, pc, r0
   1be50:	str	r0, [sp, #8]
   1be54:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be58:	ldr	r0, [pc, #552]	; 1c088 <flatcc_json_parser_error_string@@Base+0x364>
   1be5c:	add	r0, pc, r0
   1be60:	str	r0, [sp, #8]
   1be64:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be68:	ldr	r0, [pc, #532]	; 1c084 <flatcc_json_parser_error_string@@Base+0x360>
   1be6c:	add	r0, pc, r0
   1be70:	str	r0, [sp, #8]
   1be74:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be78:	ldr	r0, [pc, #512]	; 1c080 <flatcc_json_parser_error_string@@Base+0x35c>
   1be7c:	add	r0, pc, r0
   1be80:	str	r0, [sp, #8]
   1be84:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be88:	ldr	r0, [pc, #492]	; 1c07c <flatcc_json_parser_error_string@@Base+0x358>
   1be8c:	add	r0, pc, r0
   1be90:	str	r0, [sp, #8]
   1be94:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1be98:	ldr	r0, [pc, #472]	; 1c078 <flatcc_json_parser_error_string@@Base+0x354>
   1be9c:	add	r0, pc, r0
   1bea0:	str	r0, [sp, #8]
   1bea4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bea8:	ldr	r0, [pc, #452]	; 1c074 <flatcc_json_parser_error_string@@Base+0x350>
   1beac:	add	r0, pc, r0
   1beb0:	str	r0, [sp, #8]
   1beb4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1beb8:	ldr	r0, [pc, #432]	; 1c070 <flatcc_json_parser_error_string@@Base+0x34c>
   1bebc:	add	r0, pc, r0
   1bec0:	str	r0, [sp, #8]
   1bec4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bec8:	ldr	r0, [pc, #412]	; 1c06c <flatcc_json_parser_error_string@@Base+0x348>
   1becc:	add	r0, pc, r0
   1bed0:	str	r0, [sp, #8]
   1bed4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bed8:	ldr	r0, [pc, #392]	; 1c068 <flatcc_json_parser_error_string@@Base+0x344>
   1bedc:	add	r0, pc, r0
   1bee0:	str	r0, [sp, #8]
   1bee4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bee8:	ldr	r0, [pc, #372]	; 1c064 <flatcc_json_parser_error_string@@Base+0x340>
   1beec:	add	r0, pc, r0
   1bef0:	str	r0, [sp, #8]
   1bef4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bef8:	ldr	r0, [pc, #352]	; 1c060 <flatcc_json_parser_error_string@@Base+0x33c>
   1befc:	add	r0, pc, r0
   1bf00:	str	r0, [sp, #8]
   1bf04:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf08:	ldr	r0, [pc, #332]	; 1c05c <flatcc_json_parser_error_string@@Base+0x338>
   1bf0c:	add	r0, pc, r0
   1bf10:	str	r0, [sp, #8]
   1bf14:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf18:	ldr	r0, [pc, #312]	; 1c058 <flatcc_json_parser_error_string@@Base+0x334>
   1bf1c:	add	r0, pc, r0
   1bf20:	str	r0, [sp, #8]
   1bf24:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf28:	ldr	r0, [pc, #292]	; 1c054 <flatcc_json_parser_error_string@@Base+0x330>
   1bf2c:	add	r0, pc, r0
   1bf30:	str	r0, [sp, #8]
   1bf34:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf38:	ldr	r0, [pc, #272]	; 1c050 <flatcc_json_parser_error_string@@Base+0x32c>
   1bf3c:	add	r0, pc, r0
   1bf40:	str	r0, [sp, #8]
   1bf44:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf48:	ldr	r0, [pc, #252]	; 1c04c <flatcc_json_parser_error_string@@Base+0x328>
   1bf4c:	add	r0, pc, r0
   1bf50:	str	r0, [sp, #8]
   1bf54:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf58:	ldr	r0, [pc, #232]	; 1c048 <flatcc_json_parser_error_string@@Base+0x324>
   1bf5c:	add	r0, pc, r0
   1bf60:	str	r0, [sp, #8]
   1bf64:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf68:	ldr	r0, [pc, #212]	; 1c044 <flatcc_json_parser_error_string@@Base+0x320>
   1bf6c:	add	r0, pc, r0
   1bf70:	str	r0, [sp, #8]
   1bf74:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf78:	ldr	r0, [pc, #192]	; 1c040 <flatcc_json_parser_error_string@@Base+0x31c>
   1bf7c:	add	r0, pc, r0
   1bf80:	str	r0, [sp, #8]
   1bf84:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf88:	ldr	r0, [pc, #172]	; 1c03c <flatcc_json_parser_error_string@@Base+0x318>
   1bf8c:	add	r0, pc, r0
   1bf90:	str	r0, [sp, #8]
   1bf94:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf98:	ldr	r0, [pc, #152]	; 1c038 <flatcc_json_parser_error_string@@Base+0x314>
   1bf9c:	add	r0, pc, r0
   1bfa0:	str	r0, [sp, #8]
   1bfa4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bfa8:	ldr	r0, [pc, #132]	; 1c034 <flatcc_json_parser_error_string@@Base+0x310>
   1bfac:	add	r0, pc, r0
   1bfb0:	str	r0, [sp, #8]
   1bfb4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bfb8:	ldr	r0, [pc, #112]	; 1c030 <flatcc_json_parser_error_string@@Base+0x30c>
   1bfbc:	add	r0, pc, r0
   1bfc0:	str	r0, [sp, #8]
   1bfc4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bfc8:	ldr	r0, [pc, #92]	; 1c02c <flatcc_json_parser_error_string@@Base+0x308>
   1bfcc:	add	r0, pc, r0
   1bfd0:	str	r0, [sp, #8]
   1bfd4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bfd8:	ldr	r0, [pc, #72]	; 1c028 <flatcc_json_parser_error_string@@Base+0x304>
   1bfdc:	add	r0, pc, r0
   1bfe0:	str	r0, [sp, #8]
   1bfe4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bfe8:	ldr	r0, [pc, #52]	; 1c024 <flatcc_json_parser_error_string@@Base+0x300>
   1bfec:	add	r0, pc, r0
   1bff0:	str	r0, [sp, #8]
   1bff4:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1bff8:	ldr	r0, [pc, #32]	; 1c020 <flatcc_json_parser_error_string@@Base+0x2fc>
   1bffc:	add	r0, pc, r0
   1c000:	str	r0, [sp, #8]
   1c004:	b	1c014 <flatcc_json_parser_error_string@@Base+0x2f0>
   1c008:	ldr	r0, [pc, #156]	; 1c0ac <flatcc_json_parser_error_string@@Base+0x388>
   1c00c:	add	r0, pc, r0
   1c010:	str	r0, [sp, #8]
   1c014:	ldr	r0, [sp, #8]
   1c018:	add	sp, sp, #12
   1c01c:	bx	lr
   1c020:	andeq	r7, r0, lr, lsl sl
   1c024:	andeq	r7, r0, r0, lsr #20
   1c028:	andeq	r7, r0, r6, lsl sl
   1c02c:	andeq	r7, r0, pc, lsl #20
   1c030:	andeq	r7, r0, r2, lsl #20
   1c034:	strdeq	r7, [r0], -fp
   1c038:	strdeq	r7, [r0], -r1
   1c03c:	andeq	r7, r0, r6, ror #19
   1c040:	ldrdeq	r7, [r0], -r7	; <UNPREDICTABLE>
   1c044:	andeq	r7, r0, sl, asr #19
   1c048:	andeq	r7, r0, r6, asr #19
   1c04c:			; <UNDEFINED> instruction: 0x000079b2
   1c050:			; <UNDEFINED> instruction: 0x000079b3
   1c054:			; <UNDEFINED> instruction: 0x000079b3
   1c058:	andeq	r7, r0, pc, lsr #19
   1c05c:			; <UNDEFINED> instruction: 0x000079b2
   1c060:			; <UNDEFINED> instruction: 0x000079b3
   1c064:			; <UNDEFINED> instruction: 0x000079b1
   1c068:			; <UNDEFINED> instruction: 0x000079b1
   1c06c:	andeq	r7, r0, lr, lsr #19
   1c070:	andeq	r7, r0, r5, lsr #19
   1c074:	andeq	r7, r0, r6, lsr #19
   1c078:	andeq	r7, r0, r5, lsr #19
   1c07c:	andeq	r7, r0, r6, lsr #19
   1c080:	andeq	r7, r0, r4, lsr #19
   1c084:	andeq	r7, r0, r3, lsr #19
   1c088:	andeq	r7, r0, r9, lsr #19
   1c08c:			; <UNDEFINED> instruction: 0x000079b0
   1c090:			; <UNDEFINED> instruction: 0x000079b0
   1c094:	andeq	r7, r0, fp, lsr #19
   1c098:	andeq	r7, r0, ip, lsr #19
   1c09c:	andeq	r7, r0, sp, lsr #19
   1c0a0:			; <UNDEFINED> instruction: 0x000079b0
   1c0a4:			; <UNDEFINED> instruction: 0x000079bc
   1c0a8:	andeq	r7, r0, r9, asr #19
   1c0ac:	andeq	r7, r0, ip, lsl sl

0001c0b0 <flatcc_json_parser_set_error@@Base>:
   1c0b0:	sub	sp, sp, #16
   1c0b4:	str	r0, [sp, #12]
   1c0b8:	str	r1, [sp, #8]
   1c0bc:	str	r2, [sp, #4]
   1c0c0:	str	r3, [sp]
   1c0c4:	ldr	r0, [sp, #12]
   1c0c8:	ldr	r0, [r0, #24]
   1c0cc:	cmp	r0, #0
   1c0d0:	bne	1c108 <flatcc_json_parser_set_error@@Base+0x58>
   1c0d4:	ldr	r0, [sp]
   1c0d8:	ldr	r1, [sp, #12]
   1c0dc:	str	r0, [r1, #24]
   1c0e0:	ldr	r0, [sp, #8]
   1c0e4:	ldr	r1, [sp, #12]
   1c0e8:	ldr	r1, [r1, #4]
   1c0ec:	sub	r0, r0, r1
   1c0f0:	add	r0, r0, #1
   1c0f4:	ldr	r1, [sp, #12]
   1c0f8:	str	r0, [r1, #20]
   1c0fc:	ldr	r0, [sp, #8]
   1c100:	ldr	r1, [sp, #12]
   1c104:	str	r0, [r1, #36]	; 0x24
   1c108:	ldr	r0, [sp, #4]
   1c10c:	add	sp, sp, #16
   1c110:	bx	lr

0001c114 <flatcc_json_parser_string_part@@Base>:
   1c114:	push	{fp, lr}
   1c118:	mov	fp, sp
   1c11c:	sub	sp, sp, #24
   1c120:	str	r0, [fp, #-8]
   1c124:	str	r1, [sp, #12]
   1c128:	str	r2, [sp, #8]
   1c12c:	ldr	r0, [sp, #12]
   1c130:	ldr	r1, [sp, #8]
   1c134:	cmp	r0, r1
   1c138:	movw	r0, #0
   1c13c:	str	r0, [sp, #4]
   1c140:	beq	1c18c <flatcc_json_parser_string_part@@Base+0x78>
   1c144:	ldr	r0, [sp, #12]
   1c148:	ldrb	r0, [r0]
   1c14c:	cmp	r0, #34	; 0x22
   1c150:	movw	r0, #0
   1c154:	str	r0, [sp, #4]
   1c158:	beq	1c18c <flatcc_json_parser_string_part@@Base+0x78>
   1c15c:	ldr	r0, [sp, #12]
   1c160:	ldrb	r0, [r0]
   1c164:	cmp	r0, #32
   1c168:	movw	r0, #0
   1c16c:	str	r0, [sp, #4]
   1c170:	blt	1c18c <flatcc_json_parser_string_part@@Base+0x78>
   1c174:	ldr	r0, [sp, #12]
   1c178:	ldrb	r0, [r0]
   1c17c:	cmp	r0, #92	; 0x5c
   1c180:	movw	r0, #0
   1c184:	movne	r0, #1
   1c188:	str	r0, [sp, #4]
   1c18c:	ldr	r0, [sp, #4]
   1c190:	tst	r0, #1
   1c194:	beq	1c1a8 <flatcc_json_parser_string_part@@Base+0x94>
   1c198:	ldr	r0, [sp, #12]
   1c19c:	add	r0, r0, #1
   1c1a0:	str	r0, [sp, #12]
   1c1a4:	b	1c12c <flatcc_json_parser_string_part@@Base+0x18>
   1c1a8:	ldr	r0, [sp, #12]
   1c1ac:	ldr	r1, [sp, #8]
   1c1b0:	cmp	r0, r1
   1c1b4:	bne	1c1d4 <flatcc_json_parser_string_part@@Base+0xc0>
   1c1b8:	ldr	r0, [fp, #-8]
   1c1bc:	ldr	r1, [sp, #12]
   1c1c0:	ldr	r2, [sp, #8]
   1c1c4:	movw	r3, #20
   1c1c8:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c1cc:	str	r0, [fp, #-4]
   1c1d0:	b	1c224 <flatcc_json_parser_string_part@@Base+0x110>
   1c1d4:	ldr	r0, [sp, #12]
   1c1d8:	ldrb	r0, [r0]
   1c1dc:	cmp	r0, #34	; 0x22
   1c1e0:	bne	1c1f0 <flatcc_json_parser_string_part@@Base+0xdc>
   1c1e4:	ldr	r0, [sp, #12]
   1c1e8:	str	r0, [fp, #-4]
   1c1ec:	b	1c224 <flatcc_json_parser_string_part@@Base+0x110>
   1c1f0:	ldr	r0, [sp, #12]
   1c1f4:	ldrb	r0, [r0]
   1c1f8:	cmp	r0, #32
   1c1fc:	bge	1c21c <flatcc_json_parser_string_part@@Base+0x108>
   1c200:	ldr	r0, [fp, #-8]
   1c204:	ldr	r1, [sp, #12]
   1c208:	ldr	r2, [sp, #8]
   1c20c:	movw	r3, #17
   1c210:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c214:	str	r0, [fp, #-4]
   1c218:	b	1c224 <flatcc_json_parser_string_part@@Base+0x110>
   1c21c:	ldr	r0, [sp, #12]
   1c220:	str	r0, [fp, #-4]
   1c224:	ldr	r0, [fp, #-4]
   1c228:	mov	sp, fp
   1c22c:	pop	{fp, pc}

0001c230 <flatcc_json_parser_space_ext@@Base>:
   1c230:	push	{fp, lr}
   1c234:	mov	fp, sp
   1c238:	sub	sp, sp, #32
   1c23c:	str	r0, [fp, #-8]
   1c240:	str	r1, [fp, #-12]
   1c244:	str	r2, [sp, #16]
   1c248:	b	1c24c <flatcc_json_parser_space_ext@@Base+0x1c>
   1c24c:	ldr	r0, [fp, #-12]
   1c250:	ldr	r1, [sp, #16]
   1c254:	cmp	r0, r1
   1c258:	movw	r0, #0
   1c25c:	str	r0, [sp, #12]
   1c260:	beq	1c27c <flatcc_json_parser_space_ext@@Base+0x4c>
   1c264:	ldr	r0, [fp, #-12]
   1c268:	ldrb	r0, [r0]
   1c26c:	cmp	r0, #32
   1c270:	movw	r0, #0
   1c274:	moveq	r0, #1
   1c278:	str	r0, [sp, #12]
   1c27c:	ldr	r0, [sp, #12]
   1c280:	tst	r0, #1
   1c284:	beq	1c298 <flatcc_json_parser_space_ext@@Base+0x68>
   1c288:	ldr	r0, [fp, #-12]
   1c28c:	add	r0, r0, #1
   1c290:	str	r0, [fp, #-12]
   1c294:	b	1c24c <flatcc_json_parser_space_ext@@Base+0x1c>
   1c298:	b	1c29c <flatcc_json_parser_space_ext@@Base+0x6c>
   1c29c:	ldr	r0, [fp, #-12]
   1c2a0:	ldr	r1, [sp, #16]
   1c2a4:	cmp	r0, r1
   1c2a8:	movw	r0, #0
   1c2ac:	str	r0, [sp, #8]
   1c2b0:	beq	1c2cc <flatcc_json_parser_space_ext@@Base+0x9c>
   1c2b4:	ldr	r0, [fp, #-12]
   1c2b8:	ldrb	r0, [r0]
   1c2bc:	cmp	r0, #32
   1c2c0:	movw	r0, #0
   1c2c4:	movle	r0, #1
   1c2c8:	str	r0, [sp, #8]
   1c2cc:	ldr	r0, [sp, #8]
   1c2d0:	tst	r0, #1
   1c2d4:	beq	1c400 <flatcc_json_parser_space_ext@@Base+0x1d0>
   1c2d8:	ldr	r0, [fp, #-12]
   1c2dc:	ldrb	r0, [r0]
   1c2e0:	sub	r0, r0, #9
   1c2e4:	cmp	r0, #23
   1c2e8:	str	r0, [sp, #4]
   1c2ec:	bhi	1c3e4 <flatcc_json_parser_space_ext@@Base+0x1b4>
   1c2f0:	add	r0, pc, #8
   1c2f4:	ldr	r1, [sp, #4]
   1c2f8:	ldr	r2, [r0, r1, lsl #2]
   1c2fc:	add	pc, r0, r2
   1c300:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1c304:	andeq	r0, r0, r8, lsr #1
   1c308:	andeq	r0, r0, r4, ror #1
   1c30c:	andeq	r0, r0, r4, ror #1
   1c310:	andeq	r0, r0, r0, rrx
   1c314:	andeq	r0, r0, r4, ror #1
   1c318:	andeq	r0, r0, r4, ror #1
   1c31c:	andeq	r0, r0, r4, ror #1
   1c320:	andeq	r0, r0, r4, ror #1
   1c324:	andeq	r0, r0, r4, ror #1
   1c328:	andeq	r0, r0, r4, ror #1
   1c32c:	andeq	r0, r0, r4, ror #1
   1c330:	andeq	r0, r0, r4, ror #1
   1c334:	andeq	r0, r0, r4, ror #1
   1c338:	andeq	r0, r0, r4, ror #1
   1c33c:	andeq	r0, r0, r4, ror #1
   1c340:	andeq	r0, r0, r4, ror #1
   1c344:	andeq	r0, r0, r4, ror #1
   1c348:	andeq	r0, r0, r4, ror #1
   1c34c:	andeq	r0, r0, r4, ror #1
   1c350:	andeq	r0, r0, r4, ror #1
   1c354:	andeq	r0, r0, r4, ror #1
   1c358:	andeq	r0, r0, r4, ror #1
   1c35c:	andeq	r0, r0, r0, ror #1
   1c360:	ldr	r0, [sp, #16]
   1c364:	ldr	r1, [fp, #-12]
   1c368:	sub	r0, r0, r1
   1c36c:	cmp	r0, #1
   1c370:	movw	r0, #0
   1c374:	str	r0, [sp]
   1c378:	ble	1c394 <flatcc_json_parser_space_ext@@Base+0x164>
   1c37c:	ldr	r0, [fp, #-12]
   1c380:	ldrb	r0, [r0, #1]
   1c384:	cmp	r0, #10
   1c388:	movw	r0, #0
   1c38c:	moveq	r0, #1
   1c390:	str	r0, [sp]
   1c394:	ldr	r0, [sp]
   1c398:	and	r0, r0, #1
   1c39c:	ldr	r1, [fp, #-12]
   1c3a0:	add	r0, r1, r0
   1c3a4:	str	r0, [fp, #-12]
   1c3a8:	ldr	r0, [fp, #-8]
   1c3ac:	ldr	r1, [r0, #16]
   1c3b0:	add	r1, r1, #1
   1c3b4:	str	r1, [r0, #16]
   1c3b8:	ldr	r0, [fp, #-12]
   1c3bc:	add	r0, r0, #1
   1c3c0:	str	r0, [fp, #-12]
   1c3c4:	ldr	r1, [fp, #-8]
   1c3c8:	str	r0, [r1, #4]
   1c3cc:	b	1c29c <flatcc_json_parser_space_ext@@Base+0x6c>
   1c3d0:	ldr	r0, [fp, #-12]
   1c3d4:	add	r0, r0, #1
   1c3d8:	str	r0, [fp, #-12]
   1c3dc:	b	1c29c <flatcc_json_parser_space_ext@@Base+0x6c>
   1c3e0:	b	1c248 <flatcc_json_parser_space_ext@@Base+0x18>
   1c3e4:	ldr	r0, [fp, #-8]
   1c3e8:	ldr	r1, [fp, #-12]
   1c3ec:	ldr	r2, [sp, #16]
   1c3f0:	movw	r3, #5
   1c3f4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c3f8:	str	r0, [fp, #-4]
   1c3fc:	b	1c408 <flatcc_json_parser_space_ext@@Base+0x1d8>
   1c400:	ldr	r0, [fp, #-12]
   1c404:	str	r0, [fp, #-4]
   1c408:	ldr	r0, [fp, #-4]
   1c40c:	mov	sp, fp
   1c410:	pop	{fp, pc}

0001c414 <flatcc_json_parser_string_escape@@Base>:
   1c414:	push	{fp, lr}
   1c418:	mov	fp, sp
   1c41c:	sub	sp, sp, #32
   1c420:	str	r0, [fp, #-8]
   1c424:	str	r1, [fp, #-12]
   1c428:	str	r2, [sp, #16]
   1c42c:	str	r3, [sp, #12]
   1c430:	ldr	r0, [sp, #16]
   1c434:	ldr	r1, [fp, #-12]
   1c438:	sub	r0, r0, r1
   1c43c:	cmp	r0, #2
   1c440:	blt	1c454 <flatcc_json_parser_string_escape@@Base+0x40>
   1c444:	ldr	r0, [fp, #-12]
   1c448:	ldrb	r0, [r0]
   1c44c:	cmp	r0, #92	; 0x5c
   1c450:	beq	1c47c <flatcc_json_parser_string_escape@@Base+0x68>
   1c454:	ldr	r0, [sp, #12]
   1c458:	movw	r1, #0
   1c45c:	strb	r1, [r0]
   1c460:	ldr	r0, [fp, #-8]
   1c464:	ldr	r1, [fp, #-12]
   1c468:	ldr	r2, [sp, #16]
   1c46c:	movw	r3, #18
   1c470:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c474:	str	r0, [fp, #-4]
   1c478:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c47c:	ldr	r0, [fp, #-12]
   1c480:	ldrb	r0, [r0, #1]
   1c484:	sub	r0, r0, #34	; 0x22
   1c488:	cmp	r0, #86	; 0x56
   1c48c:	str	r0, [sp]
   1c490:	bhi	1cd08 <flatcc_json_parser_string_escape@@Base+0x8f4>
   1c494:	add	r0, pc, #8
   1c498:	ldr	r1, [sp]
   1c49c:	ldr	r2, [r0, r1, lsl #2]
   1c4a0:	add	pc, r0, r2
   1c4a4:	andeq	r0, r0, ip, ror #15
   1c4a8:	andeq	r0, r0, r4, ror #16
   1c4ac:	andeq	r0, r0, r4, ror #16
   1c4b0:	andeq	r0, r0, r4, ror #16
   1c4b4:	andeq	r0, r0, r4, ror #16
   1c4b8:	andeq	r0, r0, r4, ror #16
   1c4bc:	andeq	r0, r0, r4, ror #16
   1c4c0:	andeq	r0, r0, r4, ror #16
   1c4c4:	andeq	r0, r0, r4, ror #16
   1c4c8:	andeq	r0, r0, r4, ror #16
   1c4cc:	andeq	r0, r0, r4, ror #16
   1c4d0:	andeq	r0, r0, r4, ror #16
   1c4d4:	andeq	r0, r0, r4, ror #16
   1c4d8:	andeq	r0, r0, ip, lsr r8
   1c4dc:	andeq	r0, r0, r4, ror #16
   1c4e0:	andeq	r0, r0, r4, ror #16
   1c4e4:	andeq	r0, r0, r4, ror #16
   1c4e8:	andeq	r0, r0, r4, ror #16
   1c4ec:	andeq	r0, r0, r4, ror #16
   1c4f0:	andeq	r0, r0, r4, ror #16
   1c4f4:	andeq	r0, r0, r4, ror #16
   1c4f8:	andeq	r0, r0, r4, ror #16
   1c4fc:	andeq	r0, r0, r4, ror #16
   1c500:	andeq	r0, r0, r4, ror #16
   1c504:	andeq	r0, r0, r4, ror #16
   1c508:	andeq	r0, r0, r4, ror #16
   1c50c:	andeq	r0, r0, r4, ror #16
   1c510:	andeq	r0, r0, r4, ror #16
   1c514:	andeq	r0, r0, r4, ror #16
   1c518:	andeq	r0, r0, r4, ror #16
   1c51c:	andeq	r0, r0, r4, ror #16
   1c520:	andeq	r0, r0, r4, ror #16
   1c524:	andeq	r0, r0, r4, ror #16
   1c528:	andeq	r0, r0, r4, ror #16
   1c52c:	andeq	r0, r0, r4, ror #16
   1c530:	andeq	r0, r0, r4, ror #16
   1c534:	andeq	r0, r0, r4, ror #16
   1c538:	andeq	r0, r0, r4, ror #16
   1c53c:	andeq	r0, r0, r4, ror #16
   1c540:	andeq	r0, r0, r4, ror #16
   1c544:	andeq	r0, r0, r4, ror #16
   1c548:	andeq	r0, r0, r4, ror #16
   1c54c:	andeq	r0, r0, r4, ror #16
   1c550:	andeq	r0, r0, r4, ror #16
   1c554:	andeq	r0, r0, r4, ror #16
   1c558:	andeq	r0, r0, r4, ror #16
   1c55c:	andeq	r0, r0, r4, ror #16
   1c560:	andeq	r0, r0, r4, ror #16
   1c564:	andeq	r0, r0, r4, ror #16
   1c568:	andeq	r0, r0, r4, ror #16
   1c56c:	andeq	r0, r0, r4, ror #16
   1c570:	andeq	r0, r0, r4, ror #16
   1c574:	andeq	r0, r0, r4, ror #16
   1c578:	andeq	r0, r0, r4, ror #16
   1c57c:	andeq	r0, r0, r4, ror #16
   1c580:	andeq	r0, r0, r4, ror #16
   1c584:	andeq	r0, r0, r4, ror #16
   1c588:	andeq	r0, r0, r4, ror #16
   1c58c:	andeq	r0, r0, r4, lsl r8
   1c590:	andeq	r0, r0, r4, ror #16
   1c594:	andeq	r0, r0, r4, ror #16
   1c598:	andeq	r0, r0, r4, ror #16
   1c59c:	andeq	r0, r0, r4, ror #16
   1c5a0:	andeq	r0, r0, r4, ror #16
   1c5a4:	muleq	r0, ip, r7
   1c5a8:	andeq	r0, r0, r4, ror #16
   1c5ac:	andeq	r0, r0, r4, ror #16
   1c5b0:	andeq	r0, r0, r4, ror #16
   1c5b4:	andeq	r0, r0, r4, asr #15
   1c5b8:	andeq	r0, r0, r4, ror #16
   1c5bc:	andeq	r0, r0, r4, ror #16
   1c5c0:	andeq	r0, r0, r4, ror #16
   1c5c4:	andeq	r0, r0, r4, ror #16
   1c5c8:	andeq	r0, r0, r4, ror #16
   1c5cc:	andeq	r0, r0, r4, ror #16
   1c5d0:	andeq	r0, r0, r4, ror #16
   1c5d4:	andeq	r0, r0, ip, asr #14
   1c5d8:	andeq	r0, r0, r4, ror #16
   1c5dc:	andeq	r0, r0, r4, ror #16
   1c5e0:	andeq	r0, r0, r4, ror #16
   1c5e4:	andeq	r0, r0, r4, ror r7
   1c5e8:	andeq	r0, r0, r4, ror #16
   1c5ec:	andeq	r0, r0, r4, lsr #14
   1c5f0:	andeq	r0, r0, r0, lsr #6
   1c5f4:	andeq	r0, r0, r4, ror #16
   1c5f8:	andeq	r0, r0, r4, ror #16
   1c5fc:	andeq	r0, r0, ip, asr r1
   1c600:	movw	r0, #0
   1c604:	strb	r0, [sp, #10]
   1c608:	ldr	r0, [sp, #12]
   1c60c:	movw	r1, #1
   1c610:	strb	r1, [r0]
   1c614:	ldr	r0, [sp, #16]
   1c618:	ldr	r1, [fp, #-12]
   1c61c:	sub	r0, r0, r1
   1c620:	cmp	r0, #4
   1c624:	bge	1c650 <flatcc_json_parser_string_escape@@Base+0x23c>
   1c628:	ldr	r0, [sp, #12]
   1c62c:	movw	r1, #0
   1c630:	strb	r1, [r0]
   1c634:	ldr	r0, [fp, #-8]
   1c638:	ldr	r1, [fp, #-12]
   1c63c:	ldr	r2, [sp, #16]
   1c640:	movw	r3, #18
   1c644:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c648:	str	r0, [fp, #-4]
   1c64c:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c650:	ldr	r0, [fp, #-12]
   1c654:	ldrb	r0, [r0, #2]
   1c658:	strb	r0, [sp, #11]
   1c65c:	ldrb	r0, [sp, #11]
   1c660:	cmp	r0, #48	; 0x30
   1c664:	blt	1c690 <flatcc_json_parser_string_escape@@Base+0x27c>
   1c668:	ldrb	r0, [sp, #11]
   1c66c:	cmp	r0, #57	; 0x39
   1c670:	bgt	1c690 <flatcc_json_parser_string_escape@@Base+0x27c>
   1c674:	ldrb	r0, [sp, #11]
   1c678:	sub	r0, r0, #48	; 0x30
   1c67c:	lsl	r0, r0, #4
   1c680:	ldrb	r1, [sp, #10]
   1c684:	orr	r0, r1, r0
   1c688:	strb	r0, [sp, #10]
   1c68c:	b	1c700 <flatcc_json_parser_string_escape@@Base+0x2ec>
   1c690:	ldrb	r0, [sp, #11]
   1c694:	orr	r0, r0, #32
   1c698:	strb	r0, [sp, #11]
   1c69c:	ldrb	r0, [sp, #11]
   1c6a0:	cmp	r0, #97	; 0x61
   1c6a4:	blt	1c6d4 <flatcc_json_parser_string_escape@@Base+0x2c0>
   1c6a8:	ldrb	r0, [sp, #11]
   1c6ac:	cmp	r0, #102	; 0x66
   1c6b0:	bgt	1c6d4 <flatcc_json_parser_string_escape@@Base+0x2c0>
   1c6b4:	ldrb	r0, [sp, #11]
   1c6b8:	sub	r0, r0, #97	; 0x61
   1c6bc:	add	r0, r0, #10
   1c6c0:	lsl	r0, r0, #4
   1c6c4:	ldrb	r1, [sp, #10]
   1c6c8:	orr	r0, r1, r0
   1c6cc:	strb	r0, [sp, #10]
   1c6d0:	b	1c6fc <flatcc_json_parser_string_escape@@Base+0x2e8>
   1c6d4:	ldr	r0, [sp, #12]
   1c6d8:	movw	r1, #0
   1c6dc:	strb	r1, [r0]
   1c6e0:	ldr	r0, [fp, #-8]
   1c6e4:	ldr	r1, [fp, #-12]
   1c6e8:	ldr	r2, [sp, #16]
   1c6ec:	movw	r3, #18
   1c6f0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c6f4:	str	r0, [fp, #-4]
   1c6f8:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c6fc:	b	1c700 <flatcc_json_parser_string_escape@@Base+0x2ec>
   1c700:	ldr	r0, [fp, #-12]
   1c704:	ldrb	r0, [r0, #3]
   1c708:	strb	r0, [sp, #11]
   1c70c:	ldrb	r0, [sp, #11]
   1c710:	cmp	r0, #48	; 0x30
   1c714:	blt	1c73c <flatcc_json_parser_string_escape@@Base+0x328>
   1c718:	ldrb	r0, [sp, #11]
   1c71c:	cmp	r0, #57	; 0x39
   1c720:	bgt	1c73c <flatcc_json_parser_string_escape@@Base+0x328>
   1c724:	ldrb	r0, [sp, #11]
   1c728:	sub	r0, r0, #48	; 0x30
   1c72c:	ldrb	r1, [sp, #10]
   1c730:	orr	r0, r1, r0
   1c734:	strb	r0, [sp, #10]
   1c738:	b	1c7a8 <flatcc_json_parser_string_escape@@Base+0x394>
   1c73c:	ldrb	r0, [sp, #11]
   1c740:	orr	r0, r0, #32
   1c744:	strb	r0, [sp, #11]
   1c748:	ldrb	r0, [sp, #11]
   1c74c:	cmp	r0, #97	; 0x61
   1c750:	blt	1c77c <flatcc_json_parser_string_escape@@Base+0x368>
   1c754:	ldrb	r0, [sp, #11]
   1c758:	cmp	r0, #102	; 0x66
   1c75c:	bgt	1c77c <flatcc_json_parser_string_escape@@Base+0x368>
   1c760:	ldrb	r0, [sp, #11]
   1c764:	sub	r0, r0, #97	; 0x61
   1c768:	add	r0, r0, #10
   1c76c:	ldrb	r1, [sp, #10]
   1c770:	orr	r0, r1, r0
   1c774:	strb	r0, [sp, #10]
   1c778:	b	1c7a4 <flatcc_json_parser_string_escape@@Base+0x390>
   1c77c:	ldr	r0, [sp, #12]
   1c780:	movw	r1, #0
   1c784:	strb	r1, [r0]
   1c788:	ldr	r0, [fp, #-8]
   1c78c:	ldr	r1, [fp, #-12]
   1c790:	ldr	r2, [sp, #16]
   1c794:	movw	r3, #18
   1c798:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c79c:	str	r0, [fp, #-4]
   1c7a0:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c7a4:	b	1c7a8 <flatcc_json_parser_string_escape@@Base+0x394>
   1c7a8:	ldrb	r0, [sp, #10]
   1c7ac:	ldr	r1, [sp, #12]
   1c7b0:	strb	r0, [r1, #1]
   1c7b4:	ldr	r0, [fp, #-12]
   1c7b8:	add	r0, r0, #4
   1c7bc:	str	r0, [fp, #-4]
   1c7c0:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c7c4:	ldr	r0, [sp, #16]
   1c7c8:	ldr	r1, [fp, #-12]
   1c7cc:	sub	r0, r0, r1
   1c7d0:	cmp	r0, #6
   1c7d4:	bge	1c800 <flatcc_json_parser_string_escape@@Base+0x3ec>
   1c7d8:	ldr	r0, [sp, #12]
   1c7dc:	movw	r1, #0
   1c7e0:	strb	r1, [r0]
   1c7e4:	ldr	r0, [fp, #-8]
   1c7e8:	ldr	r1, [fp, #-12]
   1c7ec:	ldr	r2, [sp, #16]
   1c7f0:	movw	r3, #18
   1c7f4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c7f8:	str	r0, [fp, #-4]
   1c7fc:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c800:	movw	r0, #0
   1c804:	strh	r0, [sp, #8]
   1c808:	ldr	r0, [fp, #-12]
   1c80c:	ldrb	r0, [r0, #2]
   1c810:	strb	r0, [sp, #11]
   1c814:	ldrb	r0, [sp, #11]
   1c818:	cmp	r0, #48	; 0x30
   1c81c:	blt	1c848 <flatcc_json_parser_string_escape@@Base+0x434>
   1c820:	ldrb	r0, [sp, #11]
   1c824:	cmp	r0, #57	; 0x39
   1c828:	bgt	1c848 <flatcc_json_parser_string_escape@@Base+0x434>
   1c82c:	ldrb	r0, [sp, #11]
   1c830:	sub	r0, r0, #48	; 0x30
   1c834:	strh	r0, [sp, #6]
   1c838:	ldrh	r0, [sp, #6]
   1c83c:	lsl	r0, r0, #12
   1c840:	strh	r0, [sp, #8]
   1c844:	b	1c8c0 <flatcc_json_parser_string_escape@@Base+0x4ac>
   1c848:	ldrb	r0, [sp, #11]
   1c84c:	orr	r0, r0, #32
   1c850:	strb	r0, [sp, #11]
   1c854:	ldrb	r0, [sp, #11]
   1c858:	cmp	r0, #97	; 0x61
   1c85c:	blt	1c894 <flatcc_json_parser_string_escape@@Base+0x480>
   1c860:	ldrb	r0, [sp, #11]
   1c864:	cmp	r0, #102	; 0x66
   1c868:	bgt	1c894 <flatcc_json_parser_string_escape@@Base+0x480>
   1c86c:	ldrb	r0, [sp, #11]
   1c870:	sub	r0, r0, #97	; 0x61
   1c874:	add	r0, r0, #10
   1c878:	strh	r0, [sp, #6]
   1c87c:	ldrh	r0, [sp, #6]
   1c880:	lsl	r0, r0, #12
   1c884:	ldrh	r1, [sp, #8]
   1c888:	orr	r0, r1, r0
   1c88c:	strh	r0, [sp, #8]
   1c890:	b	1c8bc <flatcc_json_parser_string_escape@@Base+0x4a8>
   1c894:	ldr	r0, [sp, #12]
   1c898:	movw	r1, #0
   1c89c:	strb	r1, [r0]
   1c8a0:	ldr	r0, [fp, #-8]
   1c8a4:	ldr	r1, [fp, #-12]
   1c8a8:	ldr	r2, [sp, #16]
   1c8ac:	movw	r3, #18
   1c8b0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c8b4:	str	r0, [fp, #-4]
   1c8b8:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c8bc:	b	1c8c0 <flatcc_json_parser_string_escape@@Base+0x4ac>
   1c8c0:	ldr	r0, [fp, #-12]
   1c8c4:	ldrb	r0, [r0, #3]
   1c8c8:	strb	r0, [sp, #11]
   1c8cc:	ldrb	r0, [sp, #11]
   1c8d0:	cmp	r0, #48	; 0x30
   1c8d4:	blt	1c908 <flatcc_json_parser_string_escape@@Base+0x4f4>
   1c8d8:	ldrb	r0, [sp, #11]
   1c8dc:	cmp	r0, #57	; 0x39
   1c8e0:	bgt	1c908 <flatcc_json_parser_string_escape@@Base+0x4f4>
   1c8e4:	ldrb	r0, [sp, #11]
   1c8e8:	sub	r0, r0, #48	; 0x30
   1c8ec:	strh	r0, [sp, #6]
   1c8f0:	ldrh	r0, [sp, #6]
   1c8f4:	lsl	r0, r0, #8
   1c8f8:	ldrh	r1, [sp, #8]
   1c8fc:	orr	r0, r1, r0
   1c900:	strh	r0, [sp, #8]
   1c904:	b	1c980 <flatcc_json_parser_string_escape@@Base+0x56c>
   1c908:	ldrb	r0, [sp, #11]
   1c90c:	orr	r0, r0, #32
   1c910:	strb	r0, [sp, #11]
   1c914:	ldrb	r0, [sp, #11]
   1c918:	cmp	r0, #97	; 0x61
   1c91c:	blt	1c954 <flatcc_json_parser_string_escape@@Base+0x540>
   1c920:	ldrb	r0, [sp, #11]
   1c924:	cmp	r0, #102	; 0x66
   1c928:	bgt	1c954 <flatcc_json_parser_string_escape@@Base+0x540>
   1c92c:	ldrb	r0, [sp, #11]
   1c930:	sub	r0, r0, #97	; 0x61
   1c934:	add	r0, r0, #10
   1c938:	strh	r0, [sp, #6]
   1c93c:	ldrh	r0, [sp, #6]
   1c940:	lsl	r0, r0, #8
   1c944:	ldrh	r1, [sp, #8]
   1c948:	orr	r0, r1, r0
   1c94c:	strh	r0, [sp, #8]
   1c950:	b	1c97c <flatcc_json_parser_string_escape@@Base+0x568>
   1c954:	ldr	r0, [sp, #12]
   1c958:	movw	r1, #0
   1c95c:	strb	r1, [r0]
   1c960:	ldr	r0, [fp, #-8]
   1c964:	ldr	r1, [fp, #-12]
   1c968:	ldr	r2, [sp, #16]
   1c96c:	movw	r3, #18
   1c970:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1c974:	str	r0, [fp, #-4]
   1c978:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1c97c:	b	1c980 <flatcc_json_parser_string_escape@@Base+0x56c>
   1c980:	ldr	r0, [fp, #-12]
   1c984:	ldrb	r0, [r0, #4]
   1c988:	strb	r0, [sp, #11]
   1c98c:	ldrb	r0, [sp, #11]
   1c990:	cmp	r0, #48	; 0x30
   1c994:	blt	1c9c8 <flatcc_json_parser_string_escape@@Base+0x5b4>
   1c998:	ldrb	r0, [sp, #11]
   1c99c:	cmp	r0, #57	; 0x39
   1c9a0:	bgt	1c9c8 <flatcc_json_parser_string_escape@@Base+0x5b4>
   1c9a4:	ldrb	r0, [sp, #11]
   1c9a8:	sub	r0, r0, #48	; 0x30
   1c9ac:	strh	r0, [sp, #6]
   1c9b0:	ldrh	r0, [sp, #6]
   1c9b4:	lsl	r0, r0, #4
   1c9b8:	ldrh	r1, [sp, #8]
   1c9bc:	orr	r0, r1, r0
   1c9c0:	strh	r0, [sp, #8]
   1c9c4:	b	1ca40 <flatcc_json_parser_string_escape@@Base+0x62c>
   1c9c8:	ldrb	r0, [sp, #11]
   1c9cc:	orr	r0, r0, #32
   1c9d0:	strb	r0, [sp, #11]
   1c9d4:	ldrb	r0, [sp, #11]
   1c9d8:	cmp	r0, #97	; 0x61
   1c9dc:	blt	1ca14 <flatcc_json_parser_string_escape@@Base+0x600>
   1c9e0:	ldrb	r0, [sp, #11]
   1c9e4:	cmp	r0, #102	; 0x66
   1c9e8:	bgt	1ca14 <flatcc_json_parser_string_escape@@Base+0x600>
   1c9ec:	ldrb	r0, [sp, #11]
   1c9f0:	sub	r0, r0, #97	; 0x61
   1c9f4:	add	r0, r0, #10
   1c9f8:	strh	r0, [sp, #6]
   1c9fc:	ldrh	r0, [sp, #6]
   1ca00:	lsl	r0, r0, #4
   1ca04:	ldrh	r1, [sp, #8]
   1ca08:	orr	r0, r1, r0
   1ca0c:	strh	r0, [sp, #8]
   1ca10:	b	1ca3c <flatcc_json_parser_string_escape@@Base+0x628>
   1ca14:	ldr	r0, [sp, #12]
   1ca18:	movw	r1, #0
   1ca1c:	strb	r1, [r0]
   1ca20:	ldr	r0, [fp, #-8]
   1ca24:	ldr	r1, [fp, #-12]
   1ca28:	ldr	r2, [sp, #16]
   1ca2c:	movw	r3, #18
   1ca30:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1ca34:	str	r0, [fp, #-4]
   1ca38:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1ca3c:	b	1ca40 <flatcc_json_parser_string_escape@@Base+0x62c>
   1ca40:	ldr	r0, [fp, #-12]
   1ca44:	ldrb	r0, [r0, #5]
   1ca48:	strb	r0, [sp, #11]
   1ca4c:	ldrb	r0, [sp, #11]
   1ca50:	cmp	r0, #48	; 0x30
   1ca54:	blt	1ca84 <flatcc_json_parser_string_escape@@Base+0x670>
   1ca58:	ldrb	r0, [sp, #11]
   1ca5c:	cmp	r0, #57	; 0x39
   1ca60:	bgt	1ca84 <flatcc_json_parser_string_escape@@Base+0x670>
   1ca64:	ldrb	r0, [sp, #11]
   1ca68:	sub	r0, r0, #48	; 0x30
   1ca6c:	strh	r0, [sp, #6]
   1ca70:	ldrh	r0, [sp, #6]
   1ca74:	ldrh	r1, [sp, #8]
   1ca78:	orr	r0, r1, r0
   1ca7c:	strh	r0, [sp, #8]
   1ca80:	b	1caf8 <flatcc_json_parser_string_escape@@Base+0x6e4>
   1ca84:	ldrb	r0, [sp, #11]
   1ca88:	orr	r0, r0, #32
   1ca8c:	strb	r0, [sp, #11]
   1ca90:	ldrb	r0, [sp, #11]
   1ca94:	cmp	r0, #97	; 0x61
   1ca98:	blt	1cacc <flatcc_json_parser_string_escape@@Base+0x6b8>
   1ca9c:	ldrb	r0, [sp, #11]
   1caa0:	cmp	r0, #102	; 0x66
   1caa4:	bgt	1cacc <flatcc_json_parser_string_escape@@Base+0x6b8>
   1caa8:	ldrb	r0, [sp, #11]
   1caac:	sub	r0, r0, #97	; 0x61
   1cab0:	add	r0, r0, #10
   1cab4:	strh	r0, [sp, #6]
   1cab8:	ldrh	r0, [sp, #6]
   1cabc:	ldrh	r1, [sp, #8]
   1cac0:	orr	r0, r1, r0
   1cac4:	strh	r0, [sp, #8]
   1cac8:	b	1caf4 <flatcc_json_parser_string_escape@@Base+0x6e0>
   1cacc:	ldr	r0, [sp, #12]
   1cad0:	movw	r1, #0
   1cad4:	strb	r1, [r0]
   1cad8:	ldr	r0, [fp, #-8]
   1cadc:	ldr	r1, [fp, #-12]
   1cae0:	ldr	r2, [sp, #16]
   1cae4:	movw	r3, #18
   1cae8:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1caec:	str	r0, [fp, #-4]
   1caf0:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1caf4:	b	1caf8 <flatcc_json_parser_string_escape@@Base+0x6e4>
   1caf8:	ldrh	r0, [sp, #8]
   1cafc:	cmp	r0, #127	; 0x7f
   1cb00:	bgt	1cb20 <flatcc_json_parser_string_escape@@Base+0x70c>
   1cb04:	ldr	r0, [sp, #12]
   1cb08:	movw	r1, #1
   1cb0c:	strb	r1, [r0]
   1cb10:	ldrh	r0, [sp, #8]
   1cb14:	ldr	r1, [sp, #12]
   1cb18:	strb	r0, [r1, #1]
   1cb1c:	b	1cbb8 <flatcc_json_parser_string_escape@@Base+0x7a4>
   1cb20:	ldrh	r0, [sp, #8]
   1cb24:	movw	r1, #2047	; 0x7ff
   1cb28:	cmp	r0, r1
   1cb2c:	bgt	1cb68 <flatcc_json_parser_string_escape@@Base+0x754>
   1cb30:	ldr	r0, [sp, #12]
   1cb34:	movw	r1, #2
   1cb38:	strb	r1, [r0]
   1cb3c:	ldrh	r0, [sp, #8]
   1cb40:	asr	r0, r0, #6
   1cb44:	orr	r0, r0, #192	; 0xc0
   1cb48:	ldr	r1, [sp, #12]
   1cb4c:	strb	r0, [r1, #1]
   1cb50:	ldrh	r0, [sp, #8]
   1cb54:	and	r0, r0, #63	; 0x3f
   1cb58:	orr	r0, r0, #128	; 0x80
   1cb5c:	ldr	r1, [sp, #12]
   1cb60:	strb	r0, [r1, #2]
   1cb64:	b	1cbb4 <flatcc_json_parser_string_escape@@Base+0x7a0>
   1cb68:	ldr	r0, [sp, #12]
   1cb6c:	movw	r1, #3
   1cb70:	strb	r1, [r0]
   1cb74:	ldrh	r0, [sp, #8]
   1cb78:	asr	r0, r0, #12
   1cb7c:	orr	r0, r0, #224	; 0xe0
   1cb80:	ldr	r1, [sp, #12]
   1cb84:	strb	r0, [r1, #1]
   1cb88:	ldrh	r0, [sp, #8]
   1cb8c:	asr	r0, r0, #6
   1cb90:	and	r0, r0, #63	; 0x3f
   1cb94:	orr	r0, r0, #128	; 0x80
   1cb98:	ldr	r1, [sp, #12]
   1cb9c:	strb	r0, [r1, #2]
   1cba0:	ldrh	r0, [sp, #8]
   1cba4:	and	r0, r0, #63	; 0x3f
   1cba8:	orr	r0, r0, #128	; 0x80
   1cbac:	ldr	r1, [sp, #12]
   1cbb0:	strb	r0, [r1, #3]
   1cbb4:	b	1cbb8 <flatcc_json_parser_string_escape@@Base+0x7a4>
   1cbb8:	ldr	r0, [fp, #-12]
   1cbbc:	add	r0, r0, #6
   1cbc0:	str	r0, [fp, #-4]
   1cbc4:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cbc8:	ldr	r0, [sp, #12]
   1cbcc:	movw	r1, #1
   1cbd0:	strb	r1, [r0]
   1cbd4:	ldr	r0, [sp, #12]
   1cbd8:	movw	r1, #9
   1cbdc:	strb	r1, [r0, #1]
   1cbe0:	ldr	r0, [fp, #-12]
   1cbe4:	add	r0, r0, #2
   1cbe8:	str	r0, [fp, #-4]
   1cbec:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cbf0:	ldr	r0, [sp, #12]
   1cbf4:	movw	r1, #1
   1cbf8:	strb	r1, [r0]
   1cbfc:	ldr	r0, [sp, #12]
   1cc00:	movw	r1, #10
   1cc04:	strb	r1, [r0, #1]
   1cc08:	ldr	r0, [fp, #-12]
   1cc0c:	add	r0, r0, #2
   1cc10:	str	r0, [fp, #-4]
   1cc14:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cc18:	ldr	r0, [sp, #12]
   1cc1c:	movw	r1, #1
   1cc20:	strb	r1, [r0]
   1cc24:	ldr	r0, [sp, #12]
   1cc28:	movw	r1, #13
   1cc2c:	strb	r1, [r0, #1]
   1cc30:	ldr	r0, [fp, #-12]
   1cc34:	add	r0, r0, #2
   1cc38:	str	r0, [fp, #-4]
   1cc3c:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cc40:	ldr	r0, [sp, #12]
   1cc44:	movw	r1, #1
   1cc48:	strb	r1, [r0]
   1cc4c:	ldr	r0, [sp, #12]
   1cc50:	movw	r1, #8
   1cc54:	strb	r1, [r0, #1]
   1cc58:	ldr	r0, [fp, #-12]
   1cc5c:	add	r0, r0, #2
   1cc60:	str	r0, [fp, #-4]
   1cc64:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cc68:	ldr	r0, [sp, #12]
   1cc6c:	movw	r1, #1
   1cc70:	strb	r1, [r0]
   1cc74:	ldr	r0, [sp, #12]
   1cc78:	movw	r1, #12
   1cc7c:	strb	r1, [r0, #1]
   1cc80:	ldr	r0, [fp, #-12]
   1cc84:	add	r0, r0, #2
   1cc88:	str	r0, [fp, #-4]
   1cc8c:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cc90:	ldr	r0, [sp, #12]
   1cc94:	movw	r1, #1
   1cc98:	strb	r1, [r0]
   1cc9c:	ldr	r0, [sp, #12]
   1cca0:	movw	r1, #34	; 0x22
   1cca4:	strb	r1, [r0, #1]
   1cca8:	ldr	r0, [fp, #-12]
   1ccac:	add	r0, r0, #2
   1ccb0:	str	r0, [fp, #-4]
   1ccb4:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1ccb8:	ldr	r0, [sp, #12]
   1ccbc:	movw	r1, #1
   1ccc0:	strb	r1, [r0]
   1ccc4:	ldr	r0, [sp, #12]
   1ccc8:	movw	r1, #92	; 0x5c
   1cccc:	strb	r1, [r0, #1]
   1ccd0:	ldr	r0, [fp, #-12]
   1ccd4:	add	r0, r0, #2
   1ccd8:	str	r0, [fp, #-4]
   1ccdc:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cce0:	ldr	r0, [sp, #12]
   1cce4:	movw	r1, #1
   1cce8:	strb	r1, [r0]
   1ccec:	ldr	r0, [sp, #12]
   1ccf0:	movw	r1, #47	; 0x2f
   1ccf4:	strb	r1, [r0, #1]
   1ccf8:	ldr	r0, [fp, #-12]
   1ccfc:	add	r0, r0, #2
   1cd00:	str	r0, [fp, #-4]
   1cd04:	b	1cd2c <flatcc_json_parser_string_escape@@Base+0x918>
   1cd08:	ldr	r0, [sp, #12]
   1cd0c:	movw	r1, #0
   1cd10:	strb	r1, [r0]
   1cd14:	ldr	r0, [fp, #-8]
   1cd18:	ldr	r1, [fp, #-12]
   1cd1c:	ldr	r2, [sp, #16]
   1cd20:	movw	r3, #18
   1cd24:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1cd28:	str	r0, [fp, #-4]
   1cd2c:	ldr	r0, [fp, #-4]
   1cd30:	mov	sp, fp
   1cd34:	pop	{fp, pc}

0001cd38 <flatcc_json_parser_skip_constant@@Base>:
   1cd38:	push	{fp, lr}
   1cd3c:	mov	fp, sp
   1cd40:	sub	sp, sp, #24
   1cd44:	str	r0, [fp, #-8]
   1cd48:	str	r1, [sp, #12]
   1cd4c:	str	r2, [sp, #8]
   1cd50:	ldr	r0, [sp, #12]
   1cd54:	ldr	r1, [sp, #8]
   1cd58:	cmp	r0, r1
   1cd5c:	beq	1ce28 <flatcc_json_parser_skip_constant@@Base+0xf0>
   1cd60:	ldr	r0, [sp, #12]
   1cd64:	ldrb	r0, [r0]
   1cd68:	strb	r0, [sp, #7]
   1cd6c:	ldrb	r0, [sp, #7]
   1cd70:	and	r0, r0, #128	; 0x80
   1cd74:	cmp	r0, #0
   1cd78:	bne	1cdac <flatcc_json_parser_skip_constant@@Base+0x74>
   1cd7c:	ldrb	r0, [sp, #7]
   1cd80:	cmp	r0, #95	; 0x5f
   1cd84:	beq	1cdac <flatcc_json_parser_skip_constant@@Base+0x74>
   1cd88:	ldrb	r0, [sp, #7]
   1cd8c:	cmp	r0, #48	; 0x30
   1cd90:	blt	1cda0 <flatcc_json_parser_skip_constant@@Base+0x68>
   1cd94:	ldrb	r0, [sp, #7]
   1cd98:	cmp	r0, #57	; 0x39
   1cd9c:	ble	1cdac <flatcc_json_parser_skip_constant@@Base+0x74>
   1cda0:	ldrb	r0, [sp, #7]
   1cda4:	cmp	r0, #46	; 0x2e
   1cda8:	bne	1cdbc <flatcc_json_parser_skip_constant@@Base+0x84>
   1cdac:	ldr	r0, [sp, #12]
   1cdb0:	add	r0, r0, #1
   1cdb4:	str	r0, [sp, #12]
   1cdb8:	b	1cd50 <flatcc_json_parser_skip_constant@@Base+0x18>
   1cdbc:	ldrb	r0, [sp, #7]
   1cdc0:	orr	r0, r0, #32
   1cdc4:	strb	r0, [sp, #7]
   1cdc8:	ldrb	r0, [sp, #7]
   1cdcc:	cmp	r0, #97	; 0x61
   1cdd0:	blt	1cdf0 <flatcc_json_parser_skip_constant@@Base+0xb8>
   1cdd4:	ldrb	r0, [sp, #7]
   1cdd8:	cmp	r0, #122	; 0x7a
   1cddc:	bgt	1cdf0 <flatcc_json_parser_skip_constant@@Base+0xb8>
   1cde0:	ldr	r0, [sp, #12]
   1cde4:	add	r0, r0, #1
   1cde8:	str	r0, [sp, #12]
   1cdec:	b	1cd50 <flatcc_json_parser_skip_constant@@Base+0x18>
   1cdf0:	ldr	r0, [fp, #-8]
   1cdf4:	ldr	r1, [sp, #12]
   1cdf8:	str	r1, [sp]
   1cdfc:	ldr	r2, [sp, #8]
   1ce00:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1ce04:	str	r0, [sp, #12]
   1ce08:	ldr	r0, [sp, #12]
   1ce0c:	ldr	r1, [sp]
   1ce10:	cmp	r0, r1
   1ce14:	bne	1ce24 <flatcc_json_parser_skip_constant@@Base+0xec>
   1ce18:	ldr	r0, [sp, #12]
   1ce1c:	str	r0, [fp, #-4]
   1ce20:	b	1ce30 <flatcc_json_parser_skip_constant@@Base+0xf8>
   1ce24:	b	1cd50 <flatcc_json_parser_skip_constant@@Base+0x18>
   1ce28:	ldr	r0, [sp, #12]
   1ce2c:	str	r0, [fp, #-4]
   1ce30:	ldr	r0, [fp, #-4]
   1ce34:	mov	sp, fp
   1ce38:	pop	{fp, pc}
   1ce3c:	push	{fp, lr}
   1ce40:	mov	fp, sp
   1ce44:	sub	sp, sp, #16
   1ce48:	str	r0, [sp, #8]
   1ce4c:	str	r1, [sp, #4]
   1ce50:	str	r2, [sp]
   1ce54:	ldr	r0, [sp]
   1ce58:	ldr	r1, [sp, #4]
   1ce5c:	sub	r0, r0, r1
   1ce60:	cmp	r0, #1
   1ce64:	ble	1ceb8 <flatcc_json_parser_skip_constant@@Base+0x180>
   1ce68:	ldr	r0, [sp, #4]
   1ce6c:	ldrb	r0, [r0]
   1ce70:	cmp	r0, #32
   1ce74:	ble	1ce84 <flatcc_json_parser_skip_constant@@Base+0x14c>
   1ce78:	ldr	r0, [sp, #4]
   1ce7c:	str	r0, [fp, #-4]
   1ce80:	b	1cecc <flatcc_json_parser_skip_constant@@Base+0x194>
   1ce84:	ldr	r0, [sp, #4]
   1ce88:	ldrb	r0, [r0]
   1ce8c:	cmp	r0, #32
   1ce90:	bne	1ceb4 <flatcc_json_parser_skip_constant@@Base+0x17c>
   1ce94:	ldr	r0, [sp, #4]
   1ce98:	ldrb	r0, [r0, #1]
   1ce9c:	cmp	r0, #32
   1cea0:	ble	1ceb4 <flatcc_json_parser_skip_constant@@Base+0x17c>
   1cea4:	ldr	r0, [sp, #4]
   1cea8:	add	r0, r0, #1
   1ceac:	str	r0, [fp, #-4]
   1ceb0:	b	1cecc <flatcc_json_parser_skip_constant@@Base+0x194>
   1ceb4:	b	1ceb8 <flatcc_json_parser_skip_constant@@Base+0x180>
   1ceb8:	ldr	r0, [sp, #8]
   1cebc:	ldr	r1, [sp, #4]
   1cec0:	ldr	r2, [sp]
   1cec4:	bl	1c230 <flatcc_json_parser_space_ext@@Base>
   1cec8:	str	r0, [fp, #-4]
   1cecc:	ldr	r0, [fp, #-4]
   1ced0:	mov	sp, fp
   1ced4:	pop	{fp, pc}

0001ced8 <flatcc_json_parser_match_constant@@Base>:
   1ced8:	push	{fp, lr}
   1cedc:	mov	fp, sp
   1cee0:	sub	sp, sp, #48	; 0x30
   1cee4:	ldr	ip, [fp, #8]
   1cee8:	str	r0, [fp, #-8]
   1ceec:	str	r1, [fp, #-12]
   1cef0:	str	r2, [fp, #-16]
   1cef4:	str	r3, [fp, #-20]	; 0xffffffec
   1cef8:	ldr	r0, [fp, #-12]
   1cefc:	str	r0, [sp, #24]
   1cf00:	ldr	r0, [fp, #-12]
   1cf04:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cf08:	add	r0, r0, r1
   1cf0c:	str	r0, [sp, #20]
   1cf10:	ldr	r0, [fp, #-16]
   1cf14:	ldr	r1, [fp, #-12]
   1cf18:	sub	r0, r0, r1
   1cf1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cf20:	cmp	r0, r1
   1cf24:	str	ip, [sp, #12]
   1cf28:	bgt	1cf44 <flatcc_json_parser_match_constant@@Base+0x6c>
   1cf2c:	ldr	r0, [fp, #8]
   1cf30:	movw	r1, #0
   1cf34:	str	r1, [r0]
   1cf38:	ldr	r0, [fp, #-12]
   1cf3c:	str	r0, [fp, #-4]
   1cf40:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1cf44:	ldr	r0, [fp, #-8]
   1cf48:	ldr	r0, [r0, #12]
   1cf4c:	cmp	r0, #0
   1cf50:	beq	1d074 <flatcc_json_parser_match_constant@@Base+0x19c>
   1cf54:	ldr	r0, [fp, #-8]
   1cf58:	ldr	r1, [sp, #20]
   1cf5c:	ldr	r2, [fp, #-16]
   1cf60:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1cf64:	str	r0, [fp, #-12]
   1cf68:	ldr	r0, [fp, #-12]
   1cf6c:	ldr	r1, [fp, #-16]
   1cf70:	cmp	r0, r1
   1cf74:	bne	1cf90 <flatcc_json_parser_match_constant@@Base+0xb8>
   1cf78:	ldr	r0, [fp, #8]
   1cf7c:	movw	r1, #0
   1cf80:	str	r1, [r0]
   1cf84:	ldr	r0, [fp, #-12]
   1cf88:	str	r0, [fp, #-4]
   1cf8c:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1cf90:	ldr	r0, [fp, #-12]
   1cf94:	ldr	r1, [sp, #20]
   1cf98:	cmp	r0, r1
   1cf9c:	beq	1d020 <flatcc_json_parser_match_constant@@Base+0x148>
   1cfa0:	ldr	r0, [fp, #-12]
   1cfa4:	ldrb	r0, [r0]
   1cfa8:	strb	r0, [sp, #19]
   1cfac:	ldrb	r0, [sp, #19]
   1cfb0:	cmp	r0, #95	; 0x5f
   1cfb4:	beq	1cfc8 <flatcc_json_parser_match_constant@@Base+0xf0>
   1cfb8:	ldrb	r0, [sp, #19]
   1cfbc:	and	r0, r0, #128	; 0x80
   1cfc0:	cmp	r0, #0
   1cfc4:	beq	1cfe0 <flatcc_json_parser_match_constant@@Base+0x108>
   1cfc8:	ldr	r0, [fp, #8]
   1cfcc:	movw	r1, #1
   1cfd0:	str	r1, [r0]
   1cfd4:	ldr	r0, [fp, #-12]
   1cfd8:	str	r0, [fp, #-4]
   1cfdc:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1cfe0:	ldrb	r0, [sp, #19]
   1cfe4:	orr	r0, r0, #32
   1cfe8:	strb	r0, [sp, #19]
   1cfec:	ldrb	r0, [sp, #19]
   1cff0:	cmp	r0, #97	; 0x61
   1cff4:	blt	1d01c <flatcc_json_parser_match_constant@@Base+0x144>
   1cff8:	ldrb	r0, [sp, #19]
   1cffc:	cmp	r0, #122	; 0x7a
   1d000:	bgt	1d01c <flatcc_json_parser_match_constant@@Base+0x144>
   1d004:	ldr	r0, [fp, #8]
   1d008:	movw	r1, #1
   1d00c:	str	r1, [r0]
   1d010:	ldr	r0, [fp, #-12]
   1d014:	str	r0, [fp, #-4]
   1d018:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1d01c:	b	1d020 <flatcc_json_parser_match_constant@@Base+0x148>
   1d020:	ldr	r0, [fp, #8]
   1d024:	movw	r1, #0
   1d028:	str	r1, [r0]
   1d02c:	ldr	r0, [fp, #-12]
   1d030:	ldrb	r0, [r0]
   1d034:	cmp	r0, #44	; 0x2c
   1d038:	beq	1d05c <flatcc_json_parser_match_constant@@Base+0x184>
   1d03c:	ldr	r0, [fp, #-12]
   1d040:	ldrb	r0, [r0]
   1d044:	cmp	r0, #125	; 0x7d
   1d048:	beq	1d05c <flatcc_json_parser_match_constant@@Base+0x184>
   1d04c:	ldr	r0, [fp, #-12]
   1d050:	ldrb	r0, [r0]
   1d054:	cmp	r0, #93	; 0x5d
   1d058:	bne	1d068 <flatcc_json_parser_match_constant@@Base+0x190>
   1d05c:	ldr	r0, [fp, #-12]
   1d060:	str	r0, [fp, #-4]
   1d064:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1d068:	ldr	r0, [sp, #24]
   1d06c:	str	r0, [fp, #-4]
   1d070:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1d074:	ldr	r0, [sp, #20]
   1d078:	str	r0, [fp, #-12]
   1d07c:	ldr	r0, [fp, #-12]
   1d080:	ldrb	r0, [r0]
   1d084:	cmp	r0, #32
   1d088:	bne	1d138 <flatcc_json_parser_match_constant@@Base+0x260>
   1d08c:	ldr	r0, [fp, #-12]
   1d090:	add	r0, r0, #1
   1d094:	str	r0, [fp, #-12]
   1d098:	ldr	r0, [fp, #-12]
   1d09c:	ldr	r1, [fp, #-16]
   1d0a0:	cmp	r0, r1
   1d0a4:	movw	r0, #0
   1d0a8:	str	r0, [sp, #8]
   1d0ac:	beq	1d0c8 <flatcc_json_parser_match_constant@@Base+0x1f0>
   1d0b0:	ldr	r0, [fp, #-12]
   1d0b4:	ldrb	r0, [r0]
   1d0b8:	cmp	r0, #32
   1d0bc:	movw	r0, #0
   1d0c0:	moveq	r0, #1
   1d0c4:	str	r0, [sp, #8]
   1d0c8:	ldr	r0, [sp, #8]
   1d0cc:	tst	r0, #1
   1d0d0:	beq	1d0e4 <flatcc_json_parser_match_constant@@Base+0x20c>
   1d0d4:	ldr	r0, [fp, #-12]
   1d0d8:	add	r0, r0, #1
   1d0dc:	str	r0, [fp, #-12]
   1d0e0:	b	1d098 <flatcc_json_parser_match_constant@@Base+0x1c0>
   1d0e4:	ldr	r0, [fp, #-12]
   1d0e8:	ldr	r1, [fp, #-16]
   1d0ec:	cmp	r0, r1
   1d0f0:	bne	1d10c <flatcc_json_parser_match_constant@@Base+0x234>
   1d0f4:	ldr	r0, [fp, #8]
   1d0f8:	movw	r1, #0
   1d0fc:	str	r1, [r0]
   1d100:	ldr	r0, [fp, #-12]
   1d104:	str	r0, [fp, #-4]
   1d108:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1d10c:	ldr	r0, [fp, #-12]
   1d110:	ldrb	r0, [r0]
   1d114:	cmp	r0, #34	; 0x22
   1d118:	beq	1d134 <flatcc_json_parser_match_constant@@Base+0x25c>
   1d11c:	ldr	r0, [fp, #8]
   1d120:	movw	r1, #1
   1d124:	str	r1, [r0]
   1d128:	ldr	r0, [fp, #-12]
   1d12c:	str	r0, [fp, #-4]
   1d130:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1d134:	b	1d138 <flatcc_json_parser_match_constant@@Base+0x260>
   1d138:	ldr	r0, [fp, #-12]
   1d13c:	ldrb	r0, [r0]
   1d140:	mov	r1, r0
   1d144:	cmp	r0, #34	; 0x22
   1d148:	str	r1, [sp, #4]
   1d14c:	beq	1d18c <flatcc_json_parser_match_constant@@Base+0x2b4>
   1d150:	b	1d154 <flatcc_json_parser_match_constant@@Base+0x27c>
   1d154:	ldr	r0, [sp, #4]
   1d158:	cmp	r0, #92	; 0x5c
   1d15c:	bne	1d1bc <flatcc_json_parser_match_constant@@Base+0x2e4>
   1d160:	b	1d164 <flatcc_json_parser_match_constant@@Base+0x28c>
   1d164:	ldr	r0, [fp, #8]
   1d168:	movw	r1, #0
   1d16c:	str	r1, [r0]
   1d170:	ldr	r0, [fp, #-8]
   1d174:	ldr	r1, [fp, #-12]
   1d178:	ldr	r2, [fp, #-16]
   1d17c:	movw	r3, #18
   1d180:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d184:	str	r0, [fp, #-4]
   1d188:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1d18c:	ldr	r0, [fp, #-8]
   1d190:	ldr	r1, [fp, #-12]
   1d194:	add	r1, r1, #1
   1d198:	movw	r2, #0
   1d19c:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1d1a0:	str	r0, [fp, #-12]
   1d1a4:	ldr	r0, [fp, #8]
   1d1a8:	movw	r1, #0
   1d1ac:	str	r1, [r0]
   1d1b0:	ldr	r0, [fp, #-12]
   1d1b4:	str	r0, [fp, #-4]
   1d1b8:	b	1d1d0 <flatcc_json_parser_match_constant@@Base+0x2f8>
   1d1bc:	ldr	r0, [fp, #8]
   1d1c0:	movw	r1, #0
   1d1c4:	str	r1, [r0]
   1d1c8:	ldr	r0, [sp, #24]
   1d1cc:	str	r0, [fp, #-4]
   1d1d0:	ldr	r0, [fp, #-4]
   1d1d4:	mov	sp, fp
   1d1d8:	pop	{fp, pc}

0001d1dc <flatcc_json_parser_unmatched_symbol@@Base>:
   1d1dc:	push	{fp, lr}
   1d1e0:	mov	fp, sp
   1d1e4:	sub	sp, sp, #16
   1d1e8:	str	r0, [sp, #8]
   1d1ec:	str	r1, [sp, #4]
   1d1f0:	str	r2, [sp]
   1d1f4:	ldr	r0, [sp, #8]
   1d1f8:	ldr	r0, [r0, #8]
   1d1fc:	and	r0, r0, #1
   1d200:	cmp	r0, #0
   1d204:	beq	1d2a8 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1d208:	ldr	r0, [sp, #8]
   1d20c:	ldr	r1, [sp, #4]
   1d210:	ldr	r2, [sp]
   1d214:	bl	1d2cc <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1d218:	str	r0, [sp, #4]
   1d21c:	ldr	r0, [sp, #8]
   1d220:	ldr	r1, [sp, #4]
   1d224:	ldr	r2, [sp]
   1d228:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1d22c:	str	r0, [sp, #4]
   1d230:	ldr	r0, [sp, #4]
   1d234:	ldr	r1, [sp]
   1d238:	cmp	r0, r1
   1d23c:	beq	1d274 <flatcc_json_parser_unmatched_symbol@@Base+0x98>
   1d240:	ldr	r0, [sp, #4]
   1d244:	ldrb	r0, [r0]
   1d248:	cmp	r0, #58	; 0x3a
   1d24c:	bne	1d274 <flatcc_json_parser_unmatched_symbol@@Base+0x98>
   1d250:	ldr	r0, [sp, #4]
   1d254:	add	r0, r0, #1
   1d258:	str	r0, [sp, #4]
   1d25c:	ldr	r0, [sp, #8]
   1d260:	ldr	r1, [sp, #4]
   1d264:	ldr	r2, [sp]
   1d268:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1d26c:	str	r0, [sp, #4]
   1d270:	b	1d290 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   1d274:	ldr	r0, [sp, #8]
   1d278:	ldr	r1, [sp, #4]
   1d27c:	ldr	r2, [sp]
   1d280:	movw	r3, #4
   1d284:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d288:	str	r0, [fp, #-4]
   1d28c:	b	1d2c0 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   1d290:	ldr	r0, [sp, #8]
   1d294:	ldr	r1, [sp, #4]
   1d298:	ldr	r2, [sp]
   1d29c:	bl	1d4e0 <flatcc_json_parser_generic_json@@Base>
   1d2a0:	str	r0, [fp, #-4]
   1d2a4:	b	1d2c0 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   1d2a8:	ldr	r0, [sp, #8]
   1d2ac:	ldr	r1, [sp, #4]
   1d2b0:	ldr	r2, [sp]
   1d2b4:	movw	r3, #13
   1d2b8:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d2bc:	str	r0, [fp, #-4]
   1d2c0:	ldr	r0, [fp, #-4]
   1d2c4:	mov	sp, fp
   1d2c8:	pop	{fp, pc}
   1d2cc:	push	{fp, lr}
   1d2d0:	mov	fp, sp
   1d2d4:	sub	sp, sp, #32
   1d2d8:	str	r0, [fp, #-8]
   1d2dc:	str	r1, [fp, #-12]
   1d2e0:	str	r2, [sp, #16]
   1d2e4:	movw	r0, #0
   1d2e8:	strb	r0, [sp, #14]
   1d2ec:	ldr	r0, [fp, #-8]
   1d2f0:	ldr	r0, [r0, #12]
   1d2f4:	cmp	r0, #0
   1d2f8:	beq	1d400 <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   1d2fc:	b	1d300 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1d300:	ldr	r0, [fp, #-12]
   1d304:	ldr	r1, [sp, #16]
   1d308:	cmp	r0, r1
   1d30c:	movw	r0, #0
   1d310:	str	r0, [sp, #8]
   1d314:	beq	1d330 <flatcc_json_parser_unmatched_symbol@@Base+0x154>
   1d318:	ldr	r0, [fp, #-12]
   1d31c:	ldrb	r0, [r0]
   1d320:	cmp	r0, #32
   1d324:	movw	r0, #0
   1d328:	movgt	r0, #1
   1d32c:	str	r0, [sp, #8]
   1d330:	ldr	r0, [sp, #8]
   1d334:	tst	r0, #1
   1d338:	beq	1d3d4 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1d33c:	ldr	r0, [fp, #-12]
   1d340:	ldrb	r0, [r0]
   1d344:	strb	r0, [sp, #15]
   1d348:	strb	r0, [sp, #14]
   1d34c:	ldrb	r0, [sp, #15]
   1d350:	cmp	r0, #95	; 0x5f
   1d354:	beq	1d38c <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1d358:	ldrb	r0, [sp, #15]
   1d35c:	cmp	r0, #46	; 0x2e
   1d360:	beq	1d38c <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1d364:	ldrb	r0, [sp, #15]
   1d368:	and	r0, r0, #128	; 0x80
   1d36c:	cmp	r0, #0
   1d370:	bne	1d38c <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1d374:	ldrb	r0, [sp, #15]
   1d378:	cmp	r0, #48	; 0x30
   1d37c:	blt	1d39c <flatcc_json_parser_unmatched_symbol@@Base+0x1c0>
   1d380:	ldrb	r0, [sp, #15]
   1d384:	cmp	r0, #57	; 0x39
   1d388:	bgt	1d39c <flatcc_json_parser_unmatched_symbol@@Base+0x1c0>
   1d38c:	ldr	r0, [fp, #-12]
   1d390:	add	r0, r0, #1
   1d394:	str	r0, [fp, #-12]
   1d398:	b	1d300 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1d39c:	ldrb	r0, [sp, #15]
   1d3a0:	orr	r0, r0, #32
   1d3a4:	strb	r0, [sp, #15]
   1d3a8:	ldrb	r0, [sp, #15]
   1d3ac:	cmp	r0, #97	; 0x61
   1d3b0:	blt	1d3d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1d3b4:	ldrb	r0, [sp, #15]
   1d3b8:	cmp	r0, #122	; 0x7a
   1d3bc:	bgt	1d3d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1d3c0:	ldr	r0, [fp, #-12]
   1d3c4:	add	r0, r0, #1
   1d3c8:	str	r0, [fp, #-12]
   1d3cc:	b	1d300 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1d3d0:	b	1d3d4 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1d3d4:	ldrb	r0, [sp, #14]
   1d3d8:	cmp	r0, #46	; 0x2e
   1d3dc:	bne	1d3fc <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   1d3e0:	ldr	r0, [fp, #-8]
   1d3e4:	ldr	r1, [fp, #-12]
   1d3e8:	ldr	r2, [sp, #16]
   1d3ec:	movw	r3, #5
   1d3f0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d3f4:	str	r0, [fp, #-4]
   1d3f8:	b	1d4d4 <flatcc_json_parser_unmatched_symbol@@Base+0x2f8>
   1d3fc:	b	1d4cc <flatcc_json_parser_unmatched_symbol@@Base+0x2f0>
   1d400:	b	1d404 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   1d404:	ldr	r0, [fp, #-12]
   1d408:	ldr	r1, [sp, #16]
   1d40c:	cmp	r0, r1
   1d410:	movw	r0, #0
   1d414:	str	r0, [sp, #4]
   1d418:	beq	1d434 <flatcc_json_parser_unmatched_symbol@@Base+0x258>
   1d41c:	ldr	r0, [fp, #-12]
   1d420:	ldrb	r0, [r0]
   1d424:	cmp	r0, #34	; 0x22
   1d428:	movw	r0, #0
   1d42c:	movne	r0, #1
   1d430:	str	r0, [sp, #4]
   1d434:	ldr	r0, [sp, #4]
   1d438:	tst	r0, #1
   1d43c:	beq	1d484 <flatcc_json_parser_unmatched_symbol@@Base+0x2a8>
   1d440:	ldr	r0, [fp, #-12]
   1d444:	ldrb	r0, [r0]
   1d448:	cmp	r0, #92	; 0x5c
   1d44c:	bne	1d474 <flatcc_json_parser_unmatched_symbol@@Base+0x298>
   1d450:	ldr	r0, [sp, #16]
   1d454:	ldr	r1, [fp, #-12]
   1d458:	sub	r0, r0, r1
   1d45c:	cmp	r0, #2
   1d460:	bge	1d468 <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   1d464:	b	1d484 <flatcc_json_parser_unmatched_symbol@@Base+0x2a8>
   1d468:	ldr	r0, [fp, #-12]
   1d46c:	add	r0, r0, #1
   1d470:	str	r0, [fp, #-12]
   1d474:	ldr	r0, [fp, #-12]
   1d478:	add	r0, r0, #1
   1d47c:	str	r0, [fp, #-12]
   1d480:	b	1d404 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   1d484:	ldr	r0, [fp, #-12]
   1d488:	ldr	r1, [sp, #16]
   1d48c:	cmp	r0, r1
   1d490:	beq	1d4a4 <flatcc_json_parser_unmatched_symbol@@Base+0x2c8>
   1d494:	ldr	r0, [fp, #-12]
   1d498:	ldrb	r0, [r0]
   1d49c:	cmp	r0, #34	; 0x22
   1d4a0:	beq	1d4c0 <flatcc_json_parser_unmatched_symbol@@Base+0x2e4>
   1d4a4:	ldr	r0, [fp, #-8]
   1d4a8:	ldr	r1, [fp, #-12]
   1d4ac:	ldr	r2, [sp, #16]
   1d4b0:	movw	r3, #20
   1d4b4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d4b8:	str	r0, [fp, #-4]
   1d4bc:	b	1d4d4 <flatcc_json_parser_unmatched_symbol@@Base+0x2f8>
   1d4c0:	ldr	r0, [fp, #-12]
   1d4c4:	add	r0, r0, #1
   1d4c8:	str	r0, [fp, #-12]
   1d4cc:	ldr	r0, [fp, #-12]
   1d4d0:	str	r0, [fp, #-4]
   1d4d4:	ldr	r0, [fp, #-4]
   1d4d8:	mov	sp, fp
   1d4dc:	pop	{fp, pc}

0001d4e0 <flatcc_json_parser_generic_json@@Base>:
   1d4e0:	push	{r4, r5, fp, lr}
   1d4e4:	add	fp, sp, #8
   1d4e8:	sub	sp, sp, #560	; 0x230
   1d4ec:	add	r3, sp, #32
   1d4f0:	str	r0, [fp, #-16]
   1d4f4:	str	r1, [fp, #-20]	; 0xffffffec
   1d4f8:	str	r2, [fp, #-24]	; 0xffffffe8
   1d4fc:	movw	r0, #0
   1d500:	str	r0, [sp, #12]
   1d504:	str	r3, [sp, #28]
   1d508:	ldr	r0, [sp, #28]
   1d50c:	add	r0, r0, #512	; 0x200
   1d510:	str	r0, [sp, #24]
   1d514:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d518:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d51c:	cmp	r0, r1
   1d520:	bne	1d530 <flatcc_json_parser_generic_json@@Base+0x50>
   1d524:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d528:	str	r0, [fp, #-12]
   1d52c:	b	1dacc <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d530:	add	r0, sp, #32
   1d534:	ldr	r1, [sp, #28]
   1d538:	cmp	r1, r0
   1d53c:	beq	1d604 <flatcc_json_parser_generic_json@@Base+0x124>
   1d540:	ldr	r0, [sp, #28]
   1d544:	mvn	r1, #0
   1d548:	add	r0, r0, r1
   1d54c:	ldrb	r0, [r0]
   1d550:	cmp	r0, #125	; 0x7d
   1d554:	bne	1d604 <flatcc_json_parser_generic_json@@Base+0x124>
   1d558:	ldr	r0, [fp, #-16]
   1d55c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d560:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d564:	bl	1deec <flatcc_json_parser_float@@Base+0x254>
   1d568:	str	r0, [fp, #-20]	; 0xffffffec
   1d56c:	ldr	r0, [fp, #-16]
   1d570:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d574:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d578:	bl	1d2cc <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1d57c:	str	r0, [fp, #-20]	; 0xffffffec
   1d580:	ldr	r0, [fp, #-16]
   1d584:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d588:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d58c:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1d590:	str	r0, [fp, #-20]	; 0xffffffec
   1d594:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d598:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d59c:	cmp	r0, r1
   1d5a0:	bne	1d5c0 <flatcc_json_parser_generic_json@@Base+0xe0>
   1d5a4:	ldr	r0, [fp, #-16]
   1d5a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d5ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d5b0:	movw	r3, #10
   1d5b4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d5b8:	str	r0, [fp, #-12]
   1d5bc:	b	1dacc <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d5c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d5c4:	ldrb	r0, [r0]
   1d5c8:	cmp	r0, #58	; 0x3a
   1d5cc:	beq	1d5ec <flatcc_json_parser_generic_json@@Base+0x10c>
   1d5d0:	ldr	r0, [fp, #-16]
   1d5d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d5d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d5dc:	movw	r3, #4
   1d5e0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d5e4:	str	r0, [fp, #-12]
   1d5e8:	b	1dacc <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d5ec:	ldr	r0, [fp, #-16]
   1d5f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d5f4:	add	r1, r1, #1
   1d5f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d5fc:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1d600:	str	r0, [fp, #-20]	; 0xffffffec
   1d604:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d608:	ldrb	r0, [r0]
   1d60c:	sub	r0, r0, #34	; 0x22
   1d610:	cmp	r0, #89	; 0x59
   1d614:	str	r0, [sp, #8]
   1d618:	bhi	1d968 <flatcc_json_parser_generic_json@@Base+0x488>
   1d61c:	add	r0, pc, #8
   1d620:	ldr	r1, [sp, #8]
   1d624:	ldr	r2, [r0, r1, lsl #2]
   1d628:	add	pc, r0, r2
   1d62c:	andeq	r0, r0, r8, ror #2
   1d630:	andeq	r0, r0, ip, lsr r3
   1d634:	andeq	r0, r0, ip, lsr r3
   1d638:	andeq	r0, r0, ip, lsr r3
   1d63c:	andeq	r0, r0, ip, lsr r3
   1d640:	andeq	r0, r0, ip, lsr r3
   1d644:	andeq	r0, r0, ip, lsr r3
   1d648:	andeq	r0, r0, ip, lsr r3
   1d64c:	andeq	r0, r0, ip, lsr r3
   1d650:	andeq	r0, r0, ip, lsr r3
   1d654:	andeq	r0, r0, ip, lsr r3
   1d658:	andeq	r0, r0, r4, lsr #4
   1d65c:	andeq	r0, r0, ip, lsr r3
   1d660:	andeq	r0, r0, ip, lsr r3
   1d664:	andeq	r0, r0, r4, lsr #4
   1d668:	andeq	r0, r0, r4, lsr #4
   1d66c:	andeq	r0, r0, r4, lsr #4
   1d670:	andeq	r0, r0, r4, lsr #4
   1d674:	andeq	r0, r0, r4, lsr #4
   1d678:	andeq	r0, r0, r4, lsr #4
   1d67c:	andeq	r0, r0, r4, lsr #4
   1d680:	andeq	r0, r0, r4, lsr #4
   1d684:	andeq	r0, r0, r4, lsr #4
   1d688:	andeq	r0, r0, r4, lsr #4
   1d68c:	andeq	r0, r0, ip, lsr r3
   1d690:	andeq	r0, r0, ip, lsr r3
   1d694:	andeq	r0, r0, ip, lsr r3
   1d698:	andeq	r0, r0, ip, lsr r3
   1d69c:	andeq	r0, r0, ip, lsr r3
   1d6a0:	andeq	r0, r0, ip, lsr r3
   1d6a4:	andeq	r0, r0, ip, lsr r3
   1d6a8:	andeq	r0, r0, ip, lsr r3
   1d6ac:	andeq	r0, r0, ip, lsr r3
   1d6b0:	andeq	r0, r0, ip, lsr r3
   1d6b4:	andeq	r0, r0, ip, lsr r3
   1d6b8:	andeq	r0, r0, ip, lsr r3
   1d6bc:	andeq	r0, r0, ip, lsr r3
   1d6c0:	andeq	r0, r0, ip, lsr r3
   1d6c4:	andeq	r0, r0, ip, lsr r3
   1d6c8:	andeq	r0, r0, ip, lsr r3
   1d6cc:	andeq	r0, r0, ip, lsr r3
   1d6d0:	andeq	r0, r0, ip, lsr r3
   1d6d4:	andeq	r0, r0, ip, lsr r3
   1d6d8:	andeq	r0, r0, ip, lsr r3
   1d6dc:	andeq	r0, r0, ip, lsr r3
   1d6e0:	andeq	r0, r0, ip, lsr r3
   1d6e4:	andeq	r0, r0, ip, lsr r3
   1d6e8:	andeq	r0, r0, ip, lsr r3
   1d6ec:	andeq	r0, r0, ip, lsr r3
   1d6f0:	andeq	r0, r0, ip, lsr r3
   1d6f4:	andeq	r0, r0, ip, lsr r3
   1d6f8:	andeq	r0, r0, ip, lsr r3
   1d6fc:	andeq	r0, r0, ip, lsr r3
   1d700:	andeq	r0, r0, ip, lsr r3
   1d704:	andeq	r0, r0, ip, lsr r3
   1d708:	andeq	r0, r0, ip, lsr r3
   1d70c:	andeq	r0, r0, ip, lsr r3
   1d710:	andeq	r0, r0, ip, lsr r2
   1d714:	andeq	r0, r0, ip, lsr r3
   1d718:	andeq	r0, r0, ip, lsr r3
   1d71c:	andeq	r0, r0, ip, lsr r3
   1d720:	andeq	r0, r0, ip, lsr r3
   1d724:	andeq	r0, r0, ip, lsr r3
   1d728:	andeq	r0, r0, ip, lsr r3
   1d72c:	andeq	r0, r0, ip, lsr r3
   1d730:	andeq	r0, r0, ip, lsr r3
   1d734:	andeq	r0, r0, ip, lsr r3
   1d738:	andeq	r0, r0, ip, lsr r3
   1d73c:	andeq	r0, r0, ip, lsr r3
   1d740:	andeq	r0, r0, ip, lsr r3
   1d744:	andeq	r0, r0, ip, lsr r3
   1d748:	andeq	r0, r0, ip, lsr r3
   1d74c:	andeq	r0, r0, ip, lsr r3
   1d750:	andeq	r0, r0, ip, lsr r3
   1d754:	andeq	r0, r0, ip, lsr r3
   1d758:	andeq	r0, r0, ip, lsr r3
   1d75c:	andeq	r0, r0, ip, lsr r3
   1d760:	andeq	r0, r0, ip, lsr r3
   1d764:	andeq	r0, r0, ip, lsr r3
   1d768:	andeq	r0, r0, ip, lsr r3
   1d76c:	andeq	r0, r0, ip, lsr r3
   1d770:	andeq	r0, r0, ip, lsr r3
   1d774:	andeq	r0, r0, ip, lsr r3
   1d778:	andeq	r0, r0, ip, lsr r3
   1d77c:	andeq	r0, r0, ip, lsr r3
   1d780:	andeq	r0, r0, ip, lsr r3
   1d784:	andeq	r0, r0, ip, lsr r3
   1d788:	andeq	r0, r0, ip, lsr r3
   1d78c:	andeq	r0, r0, ip, lsr r3
   1d790:			; <UNDEFINED> instruction: 0x000002bc
   1d794:	ldr	r0, [fp, #-16]
   1d798:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d79c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d7a0:	bl	1df98 <flatcc_json_parser_float@@Base+0x300>
   1d7a4:	str	r0, [fp, #-20]	; 0xffffffec
   1d7a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d7ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d7b0:	cmp	r0, r1
   1d7b4:	movw	r0, #0
   1d7b8:	str	r0, [sp, #4]
   1d7bc:	beq	1d7d8 <flatcc_json_parser_generic_json@@Base+0x2f8>
   1d7c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d7c4:	ldrb	r0, [r0]
   1d7c8:	cmp	r0, #34	; 0x22
   1d7cc:	movw	r0, #0
   1d7d0:	movne	r0, #1
   1d7d4:	str	r0, [sp, #4]
   1d7d8:	ldr	r0, [sp, #4]
   1d7dc:	tst	r0, #1
   1d7e0:	beq	1d838 <flatcc_json_parser_generic_json@@Base+0x358>
   1d7e4:	ldr	r0, [fp, #-16]
   1d7e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d7ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d7f0:	bl	1c114 <flatcc_json_parser_string_part@@Base>
   1d7f4:	str	r0, [fp, #-20]	; 0xffffffec
   1d7f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d7fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d800:	cmp	r0, r1
   1d804:	beq	1d81c <flatcc_json_parser_generic_json@@Base+0x33c>
   1d808:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d80c:	ldrb	r0, [r0]
   1d810:	cmp	r0, #34	; 0x22
   1d814:	bne	1d81c <flatcc_json_parser_generic_json@@Base+0x33c>
   1d818:	b	1d838 <flatcc_json_parser_generic_json@@Base+0x358>
   1d81c:	add	r3, sp, #16
   1d820:	ldr	r0, [fp, #-16]
   1d824:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d828:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d82c:	bl	1c414 <flatcc_json_parser_string_escape@@Base>
   1d830:	str	r0, [fp, #-20]	; 0xffffffec
   1d834:	b	1d7a8 <flatcc_json_parser_generic_json@@Base+0x2c8>
   1d838:	ldr	r0, [fp, #-16]
   1d83c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d840:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d844:	bl	1e008 <flatcc_json_parser_float@@Base+0x370>
   1d848:	str	r0, [fp, #-20]	; 0xffffffec
   1d84c:	b	1d9b0 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d850:	ldr	r0, [fp, #-16]
   1d854:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d858:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d85c:	bl	1e078 <flatcc_json_parser_float@@Base+0x3e0>
   1d860:	str	r0, [fp, #-20]	; 0xffffffec
   1d864:	b	1d9b0 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d868:	ldr	r0, [sp, #28]
   1d86c:	ldr	r1, [sp, #24]
   1d870:	cmp	r0, r1
   1d874:	bne	1d894 <flatcc_json_parser_generic_json@@Base+0x3b4>
   1d878:	ldr	r0, [fp, #-16]
   1d87c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d880:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d884:	movw	r3, #2
   1d888:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d88c:	str	r0, [fp, #-12]
   1d890:	b	1dacc <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d894:	ldr	r0, [sp, #28]
   1d898:	add	r1, r0, #1
   1d89c:	str	r1, [sp, #28]
   1d8a0:	movw	r1, #93	; 0x5d
   1d8a4:	strb	r1, [r0]
   1d8a8:	ldr	r0, [fp, #-16]
   1d8ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d8b0:	add	r1, r1, #1
   1d8b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d8b8:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1d8bc:	str	r0, [fp, #-20]	; 0xffffffec
   1d8c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d8c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d8c8:	cmp	r0, r1
   1d8cc:	beq	1d8e4 <flatcc_json_parser_generic_json@@Base+0x404>
   1d8d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d8d4:	ldrb	r0, [r0]
   1d8d8:	cmp	r0, #93	; 0x5d
   1d8dc:	bne	1d8e4 <flatcc_json_parser_generic_json@@Base+0x404>
   1d8e0:	b	1d9b0 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d8e4:	b	1d514 <flatcc_json_parser_generic_json@@Base+0x34>
   1d8e8:	ldr	r0, [sp, #28]
   1d8ec:	ldr	r1, [sp, #24]
   1d8f0:	cmp	r0, r1
   1d8f4:	bne	1d914 <flatcc_json_parser_generic_json@@Base+0x434>
   1d8f8:	ldr	r0, [fp, #-16]
   1d8fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d900:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d904:	movw	r3, #2
   1d908:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d90c:	str	r0, [fp, #-12]
   1d910:	b	1dacc <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d914:	ldr	r0, [sp, #28]
   1d918:	add	r1, r0, #1
   1d91c:	str	r1, [sp, #28]
   1d920:	movw	r1, #125	; 0x7d
   1d924:	strb	r1, [r0]
   1d928:	ldr	r0, [fp, #-16]
   1d92c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d930:	add	r1, r1, #1
   1d934:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d938:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1d93c:	str	r0, [fp, #-20]	; 0xffffffec
   1d940:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d944:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d948:	cmp	r0, r1
   1d94c:	beq	1d964 <flatcc_json_parser_generic_json@@Base+0x484>
   1d950:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d954:	ldrb	r0, [r0]
   1d958:	cmp	r0, #125	; 0x7d
   1d95c:	bne	1d964 <flatcc_json_parser_generic_json@@Base+0x484>
   1d960:	b	1d9b0 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d964:	b	1d514 <flatcc_json_parser_generic_json@@Base+0x34>
   1d968:	ldr	r0, [fp, #-16]
   1d96c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d970:	str	r1, [sp, #20]
   1d974:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d978:	bl	1cd38 <flatcc_json_parser_skip_constant@@Base>
   1d97c:	str	r0, [fp, #-20]	; 0xffffffec
   1d980:	ldr	r0, [sp, #20]
   1d984:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d988:	cmp	r0, r1
   1d98c:	bne	1d9ac <flatcc_json_parser_generic_json@@Base+0x4cc>
   1d990:	ldr	r0, [fp, #-16]
   1d994:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d998:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d99c:	movw	r3, #5
   1d9a0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1d9a4:	str	r0, [fp, #-12]
   1d9a8:	b	1dacc <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d9ac:	b	1d9b0 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d9b0:	b	1d9b4 <flatcc_json_parser_generic_json@@Base+0x4d4>
   1d9b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d9b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d9bc:	cmp	r0, r1
   1d9c0:	movw	r0, #0
   1d9c4:	str	r0, [sp]
   1d9c8:	beq	1d9e4 <flatcc_json_parser_generic_json@@Base+0x504>
   1d9cc:	add	r0, sp, #32
   1d9d0:	ldr	r1, [sp, #28]
   1d9d4:	cmp	r1, r0
   1d9d8:	movw	r0, #0
   1d9dc:	movne	r0, #1
   1d9e0:	str	r0, [sp]
   1d9e4:	ldr	r0, [sp]
   1d9e8:	tst	r0, #1
   1d9ec:	beq	1da64 <flatcc_json_parser_generic_json@@Base+0x584>
   1d9f0:	ldr	r0, [sp, #28]
   1d9f4:	mvn	r1, #0
   1d9f8:	add	r0, r0, r1
   1d9fc:	str	r0, [sp, #28]
   1da00:	ldr	r0, [sp, #28]
   1da04:	ldrb	r0, [r0]
   1da08:	cmp	r0, #93	; 0x5d
   1da0c:	bne	1da2c <flatcc_json_parser_generic_json@@Base+0x54c>
   1da10:	ldr	r0, [fp, #-16]
   1da14:	ldr	r1, [fp, #-20]	; 0xffffffec
   1da18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1da1c:	add	r3, sp, #12
   1da20:	bl	1e4bc <flatcc_json_parser_float@@Base+0x824>
   1da24:	str	r0, [fp, #-20]	; 0xffffffec
   1da28:	b	1da44 <flatcc_json_parser_generic_json@@Base+0x564>
   1da2c:	ldr	r0, [fp, #-16]
   1da30:	ldr	r1, [fp, #-20]	; 0xffffffec
   1da34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1da38:	add	r3, sp, #12
   1da3c:	bl	1e620 <flatcc_json_parser_float@@Base+0x988>
   1da40:	str	r0, [fp, #-20]	; 0xffffffec
   1da44:	ldr	r0, [sp, #12]
   1da48:	cmp	r0, #0
   1da4c:	beq	1da60 <flatcc_json_parser_generic_json@@Base+0x580>
   1da50:	ldr	r0, [sp, #28]
   1da54:	add	r0, r0, #1
   1da58:	str	r0, [sp, #28]
   1da5c:	b	1d514 <flatcc_json_parser_generic_json@@Base+0x34>
   1da60:	b	1d9b4 <flatcc_json_parser_generic_json@@Base+0x4d4>
   1da64:	ldr	r0, [fp, #-20]	; 0xffffffec
   1da68:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1da6c:	cmp	r0, r1
   1da70:	bne	1dac4 <flatcc_json_parser_generic_json@@Base+0x5e4>
   1da74:	add	r0, sp, #32
   1da78:	ldr	r1, [sp, #28]
   1da7c:	cmp	r1, r0
   1da80:	beq	1dac4 <flatcc_json_parser_generic_json@@Base+0x5e4>
   1da84:	ldr	r0, [fp, #-16]
   1da88:	ldr	r1, [fp, #-20]	; 0xffffffec
   1da8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1da90:	ldr	r3, [sp, #28]
   1da94:	mvn	ip, #0
   1da98:	add	r3, r3, ip
   1da9c:	ldrb	r3, [r3]
   1daa0:	cmp	r3, #93	; 0x5d
   1daa4:	movw	r3, #0
   1daa8:	moveq	r3, #1
   1daac:	tst	r3, #1
   1dab0:	movw	r3, #9
   1dab4:	moveq	r3, #10
   1dab8:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1dabc:	str	r0, [fp, #-12]
   1dac0:	b	1dacc <flatcc_json_parser_generic_json@@Base+0x5ec>
   1dac4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dac8:	str	r0, [fp, #-12]
   1dacc:	ldr	r0, [fp, #-12]
   1dad0:	sub	sp, fp, #8
   1dad4:	pop	{r4, r5, fp, pc}

0001dad8 <flatcc_json_parser_double@@Base>:
   1dad8:	push	{fp, lr}
   1dadc:	mov	fp, sp
   1dae0:	sub	sp, sp, #32
   1dae4:	vldr	d16, [pc, #372]	; 1dc60 <flatcc_json_parser_double@@Base+0x188>
   1dae8:	str	r0, [fp, #-8]
   1daec:	str	r1, [fp, #-12]
   1daf0:	str	r2, [sp, #16]
   1daf4:	str	r3, [sp, #12]
   1daf8:	ldr	r0, [sp, #12]
   1dafc:	vstr	d16, [r0]
   1db00:	ldr	r0, [fp, #-12]
   1db04:	ldr	r1, [sp, #16]
   1db08:	cmp	r0, r1
   1db0c:	bne	1db1c <flatcc_json_parser_double@@Base+0x44>
   1db10:	ldr	r0, [fp, #-12]
   1db14:	str	r0, [fp, #-4]
   1db18:	b	1dc50 <flatcc_json_parser_double@@Base+0x178>
   1db1c:	ldr	r0, [fp, #-12]
   1db20:	str	r0, [sp, #4]
   1db24:	ldr	r0, [fp, #-12]
   1db28:	ldrb	r0, [r0]
   1db2c:	cmp	r0, #45	; 0x2d
   1db30:	bne	1db40 <flatcc_json_parser_double@@Base+0x68>
   1db34:	ldr	r0, [sp, #4]
   1db38:	add	r0, r0, #1
   1db3c:	str	r0, [sp, #4]
   1db40:	ldr	r0, [sp, #16]
   1db44:	ldr	r1, [sp, #4]
   1db48:	sub	r0, r0, r1
   1db4c:	cmp	r0, #1
   1db50:	ble	1dba0 <flatcc_json_parser_double@@Base+0xc8>
   1db54:	ldr	r0, [sp, #4]
   1db58:	ldrb	r0, [r0]
   1db5c:	cmp	r0, #46	; 0x2e
   1db60:	beq	1db84 <flatcc_json_parser_double@@Base+0xac>
   1db64:	ldr	r0, [sp, #4]
   1db68:	ldrb	r0, [r0]
   1db6c:	cmp	r0, #48	; 0x30
   1db70:	bne	1dba0 <flatcc_json_parser_double@@Base+0xc8>
   1db74:	ldr	r0, [sp, #4]
   1db78:	ldrb	r0, [r0, #1]
   1db7c:	cmp	r0, #48	; 0x30
   1db80:	bne	1dba0 <flatcc_json_parser_double@@Base+0xc8>
   1db84:	ldr	r0, [fp, #-8]
   1db88:	ldr	r1, [fp, #-12]
   1db8c:	ldr	r2, [sp, #16]
   1db90:	movw	r3, #6
   1db94:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1db98:	str	r0, [fp, #-4]
   1db9c:	b	1dc50 <flatcc_json_parser_double@@Base+0x178>
   1dba0:	ldr	r0, [fp, #-12]
   1dba4:	ldr	r1, [sp, #16]
   1dba8:	ldr	r2, [fp, #-12]
   1dbac:	sub	r1, r1, r2
   1dbb0:	ldr	r2, [sp, #12]
   1dbb4:	bl	1dc68 <flatcc_json_parser_double@@Base+0x190>
   1dbb8:	str	r0, [sp, #8]
   1dbbc:	ldr	r0, [sp, #8]
   1dbc0:	movw	r1, #0
   1dbc4:	cmp	r0, r1
   1dbc8:	beq	1dbdc <flatcc_json_parser_double@@Base+0x104>
   1dbcc:	ldr	r0, [sp, #8]
   1dbd0:	ldr	r1, [fp, #-12]
   1dbd4:	cmp	r0, r1
   1dbd8:	bne	1dc48 <flatcc_json_parser_double@@Base+0x170>
   1dbdc:	b	1dbfc <flatcc_json_parser_double@@Base+0x124>
   1dbe0:	ldr	r0, [sp, #12]
   1dbe4:	vldr	d16, [r0]
   1dbe8:	vcvt.f32.f64	s0, d16
   1dbec:	bl	128f0 <__isinff@plt>
   1dbf0:	cmp	r0, #0
   1dbf4:	bne	1dc10 <flatcc_json_parser_double@@Base+0x138>
   1dbf8:	b	1dc2c <flatcc_json_parser_double@@Base+0x154>
   1dbfc:	ldr	r0, [sp, #12]
   1dc00:	vldr	d0, [r0]
   1dc04:	bl	128fc <__isinf@plt>
   1dc08:	cmp	r0, #0
   1dc0c:	beq	1dc2c <flatcc_json_parser_double@@Base+0x154>
   1dc10:	ldr	r0, [fp, #-8]
   1dc14:	ldr	r1, [fp, #-12]
   1dc18:	ldr	r2, [sp, #16]
   1dc1c:	movw	r3, #7
   1dc20:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1dc24:	str	r0, [fp, #-4]
   1dc28:	b	1dc50 <flatcc_json_parser_double@@Base+0x178>
   1dc2c:	ldr	r0, [fp, #-8]
   1dc30:	ldr	r1, [fp, #-12]
   1dc34:	ldr	r2, [sp, #16]
   1dc38:	movw	r3, #6
   1dc3c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1dc40:	str	r0, [fp, #-4]
   1dc44:	b	1dc50 <flatcc_json_parser_double@@Base+0x178>
   1dc48:	ldr	r0, [sp, #8]
   1dc4c:	str	r0, [fp, #-4]
   1dc50:	ldr	r0, [fp, #-4]
   1dc54:	mov	sp, fp
   1dc58:	pop	{fp, pc}
   1dc5c:	nop	{0}
	...
   1dc68:	push	{fp, lr}
   1dc6c:	mov	fp, sp
   1dc70:	sub	sp, sp, #16
   1dc74:	str	r0, [fp, #-4]
   1dc78:	str	r1, [sp, #8]
   1dc7c:	str	r2, [sp, #4]
   1dc80:	ldr	r0, [fp, #-4]
   1dc84:	ldr	r1, [sp, #8]
   1dc88:	ldr	r2, [sp, #4]
   1dc8c:	bl	20958 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   1dc90:	mov	sp, fp
   1dc94:	pop	{fp, pc}

0001dc98 <flatcc_json_parser_float@@Base>:
   1dc98:	push	{fp, lr}
   1dc9c:	mov	fp, sp
   1dca0:	sub	sp, sp, #32
   1dca4:	vldr	s0, [pc, #368]	; 1de1c <flatcc_json_parser_float@@Base+0x184>
   1dca8:	str	r0, [fp, #-8]
   1dcac:	str	r1, [fp, #-12]
   1dcb0:	str	r2, [sp, #16]
   1dcb4:	str	r3, [sp, #12]
   1dcb8:	ldr	r0, [sp, #12]
   1dcbc:	vstr	s0, [r0]
   1dcc0:	ldr	r0, [fp, #-12]
   1dcc4:	ldr	r1, [sp, #16]
   1dcc8:	cmp	r0, r1
   1dccc:	bne	1dcdc <flatcc_json_parser_float@@Base+0x44>
   1dcd0:	ldr	r0, [fp, #-12]
   1dcd4:	str	r0, [fp, #-4]
   1dcd8:	b	1de10 <flatcc_json_parser_float@@Base+0x178>
   1dcdc:	ldr	r0, [fp, #-12]
   1dce0:	str	r0, [sp, #4]
   1dce4:	ldr	r0, [fp, #-12]
   1dce8:	ldrb	r0, [r0]
   1dcec:	cmp	r0, #45	; 0x2d
   1dcf0:	bne	1dd00 <flatcc_json_parser_float@@Base+0x68>
   1dcf4:	ldr	r0, [sp, #4]
   1dcf8:	add	r0, r0, #1
   1dcfc:	str	r0, [sp, #4]
   1dd00:	ldr	r0, [sp, #16]
   1dd04:	ldr	r1, [sp, #4]
   1dd08:	sub	r0, r0, r1
   1dd0c:	cmp	r0, #1
   1dd10:	ble	1dd60 <flatcc_json_parser_float@@Base+0xc8>
   1dd14:	ldr	r0, [sp, #4]
   1dd18:	ldrb	r0, [r0]
   1dd1c:	cmp	r0, #46	; 0x2e
   1dd20:	beq	1dd44 <flatcc_json_parser_float@@Base+0xac>
   1dd24:	ldr	r0, [sp, #4]
   1dd28:	ldrb	r0, [r0]
   1dd2c:	cmp	r0, #48	; 0x30
   1dd30:	bne	1dd60 <flatcc_json_parser_float@@Base+0xc8>
   1dd34:	ldr	r0, [sp, #4]
   1dd38:	ldrb	r0, [r0, #1]
   1dd3c:	cmp	r0, #48	; 0x30
   1dd40:	bne	1dd60 <flatcc_json_parser_float@@Base+0xc8>
   1dd44:	ldr	r0, [fp, #-8]
   1dd48:	ldr	r1, [fp, #-12]
   1dd4c:	ldr	r2, [sp, #16]
   1dd50:	movw	r3, #6
   1dd54:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1dd58:	str	r0, [fp, #-4]
   1dd5c:	b	1de10 <flatcc_json_parser_float@@Base+0x178>
   1dd60:	ldr	r0, [fp, #-12]
   1dd64:	ldr	r1, [sp, #16]
   1dd68:	ldr	r2, [fp, #-12]
   1dd6c:	sub	r1, r1, r2
   1dd70:	ldr	r2, [sp, #12]
   1dd74:	bl	1de20 <flatcc_json_parser_float@@Base+0x188>
   1dd78:	str	r0, [sp, #8]
   1dd7c:	ldr	r0, [sp, #8]
   1dd80:	movw	r1, #0
   1dd84:	cmp	r0, r1
   1dd88:	beq	1dd9c <flatcc_json_parser_float@@Base+0x104>
   1dd8c:	ldr	r0, [sp, #8]
   1dd90:	ldr	r1, [fp, #-12]
   1dd94:	cmp	r0, r1
   1dd98:	bne	1de08 <flatcc_json_parser_float@@Base+0x170>
   1dd9c:	b	1dda0 <flatcc_json_parser_float@@Base+0x108>
   1dda0:	ldr	r0, [sp, #12]
   1dda4:	vldr	s0, [r0]
   1dda8:	bl	128f0 <__isinff@plt>
   1ddac:	cmp	r0, #0
   1ddb0:	bne	1ddd0 <flatcc_json_parser_float@@Base+0x138>
   1ddb4:	b	1ddec <flatcc_json_parser_float@@Base+0x154>
   1ddb8:	ldr	r0, [sp, #12]
   1ddbc:	vldr	s0, [r0]
   1ddc0:	vcvt.f64.f32	d0, s0
   1ddc4:	bl	128fc <__isinf@plt>
   1ddc8:	cmp	r0, #0
   1ddcc:	beq	1ddec <flatcc_json_parser_float@@Base+0x154>
   1ddd0:	ldr	r0, [fp, #-8]
   1ddd4:	ldr	r1, [fp, #-12]
   1ddd8:	ldr	r2, [sp, #16]
   1dddc:	movw	r3, #7
   1dde0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1dde4:	str	r0, [fp, #-4]
   1dde8:	b	1de10 <flatcc_json_parser_float@@Base+0x178>
   1ddec:	ldr	r0, [fp, #-8]
   1ddf0:	ldr	r1, [fp, #-12]
   1ddf4:	ldr	r2, [sp, #16]
   1ddf8:	movw	r3, #6
   1ddfc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1de00:	str	r0, [fp, #-4]
   1de04:	b	1de10 <flatcc_json_parser_float@@Base+0x178>
   1de08:	ldr	r0, [sp, #8]
   1de0c:	str	r0, [fp, #-4]
   1de10:	ldr	r0, [fp, #-4]
   1de14:	mov	sp, fp
   1de18:	pop	{fp, pc}
   1de1c:	andeq	r0, r0, r0
   1de20:	push	{fp, lr}
   1de24:	mov	fp, sp
   1de28:	sub	sp, sp, #40	; 0x28
   1de2c:	ldr	r3, [pc, #180]	; 1dee8 <flatcc_json_parser_float@@Base+0x250>
   1de30:	str	r0, [fp, #-8]
   1de34:	str	r1, [fp, #-12]
   1de38:	str	r2, [fp, #-16]
   1de3c:	str	r3, [sp, #4]
   1de40:	ldr	r0, [fp, #-8]
   1de44:	ldr	r1, [fp, #-12]
   1de48:	add	r2, sp, #8
   1de4c:	bl	1dc68 <flatcc_json_parser_double@@Base+0x190>
   1de50:	str	r0, [sp, #20]
   1de54:	vldr	d16, [sp, #8]
   1de58:	vcvt.f32.f64	s0, d16
   1de5c:	ldr	r0, [fp, #-16]
   1de60:	vstr	s0, [r0]
   1de64:	ldr	r0, [fp, #-16]
   1de68:	vldr	s0, [r0]
   1de6c:	bl	128f0 <__isinff@plt>
   1de70:	cmp	r0, #0
   1de74:	bne	1de94 <flatcc_json_parser_float@@Base+0x1fc>
   1de78:	b	1ded4 <flatcc_json_parser_float@@Base+0x23c>
   1de7c:	ldr	r0, [fp, #-16]
   1de80:	vldr	s0, [r0]
   1de84:	vcvt.f64.f32	d0, s0
   1de88:	bl	128fc <__isinf@plt>
   1de8c:	cmp	r0, #0
   1de90:	beq	1ded4 <flatcc_json_parser_float@@Base+0x23c>
   1de94:	vldr	d16, [sp, #8]
   1de98:	vcmpe.f64	d16, #0.0
   1de9c:	vmrs	APSR_nzcv, fpscr
   1dea0:	bpl	1deb4 <flatcc_json_parser_float@@Base+0x21c>
   1dea4:	vldr	s0, [sp, #4]
   1dea8:	vneg.f32	s0, s0
   1deac:	vstr	s0, [sp]
   1deb0:	b	1debc <flatcc_json_parser_float@@Base+0x224>
   1deb4:	vldr	s0, [sp, #4]
   1deb8:	vstr	s0, [sp]
   1debc:	vldr	s0, [sp]
   1dec0:	ldr	r0, [fp, #-16]
   1dec4:	vstr	s0, [r0]
   1dec8:	ldr	r0, [fp, #-8]
   1decc:	str	r0, [fp, #-4]
   1ded0:	b	1dedc <flatcc_json_parser_float@@Base+0x244>
   1ded4:	ldr	r0, [sp, #20]
   1ded8:	str	r0, [fp, #-4]
   1dedc:	ldr	r0, [fp, #-4]
   1dee0:	mov	sp, fp
   1dee4:	pop	{fp, pc}
   1dee8:	svcvc	0x00800000
   1deec:	push	{fp, lr}
   1def0:	mov	fp, sp
   1def4:	sub	sp, sp, #16
   1def8:	str	r0, [sp, #8]
   1defc:	str	r1, [sp, #4]
   1df00:	str	r2, [sp]
   1df04:	ldr	r0, [sp, #4]
   1df08:	ldr	r1, [sp]
   1df0c:	cmp	r0, r1
   1df10:	bne	1df20 <flatcc_json_parser_float@@Base+0x288>
   1df14:	ldr	r0, [sp, #4]
   1df18:	str	r0, [fp, #-4]
   1df1c:	b	1df8c <flatcc_json_parser_float@@Base+0x2f4>
   1df20:	ldr	r0, [sp, #4]
   1df24:	ldrb	r0, [r0]
   1df28:	cmp	r0, #34	; 0x22
   1df2c:	bne	1df4c <flatcc_json_parser_float@@Base+0x2b4>
   1df30:	ldr	r0, [sp, #4]
   1df34:	add	r0, r0, #1
   1df38:	str	r0, [sp, #4]
   1df3c:	ldr	r0, [sp, #8]
   1df40:	movw	r1, #0
   1df44:	str	r1, [r0, #12]
   1df48:	b	1df84 <flatcc_json_parser_float@@Base+0x2ec>
   1df4c:	ldr	r0, [sp, #4]
   1df50:	ldrb	r0, [r0]
   1df54:	cmp	r0, #46	; 0x2e
   1df58:	bne	1df78 <flatcc_json_parser_float@@Base+0x2e0>
   1df5c:	ldr	r0, [sp, #8]
   1df60:	ldr	r1, [sp, #4]
   1df64:	ldr	r2, [sp]
   1df68:	movw	r3, #5
   1df6c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1df70:	str	r0, [fp, #-4]
   1df74:	b	1df8c <flatcc_json_parser_float@@Base+0x2f4>
   1df78:	ldr	r0, [sp, #8]
   1df7c:	movw	r1, #1
   1df80:	str	r1, [r0, #12]
   1df84:	ldr	r0, [sp, #4]
   1df88:	str	r0, [fp, #-4]
   1df8c:	ldr	r0, [fp, #-4]
   1df90:	mov	sp, fp
   1df94:	pop	{fp, pc}
   1df98:	push	{fp, lr}
   1df9c:	mov	fp, sp
   1dfa0:	sub	sp, sp, #16
   1dfa4:	str	r0, [sp, #8]
   1dfa8:	str	r1, [sp, #4]
   1dfac:	str	r2, [sp]
   1dfb0:	ldr	r0, [sp, #4]
   1dfb4:	ldr	r1, [sp]
   1dfb8:	cmp	r0, r1
   1dfbc:	beq	1dfd0 <flatcc_json_parser_float@@Base+0x338>
   1dfc0:	ldr	r0, [sp, #4]
   1dfc4:	ldrb	r0, [r0]
   1dfc8:	cmp	r0, #34	; 0x22
   1dfcc:	beq	1dfec <flatcc_json_parser_float@@Base+0x354>
   1dfd0:	ldr	r0, [sp, #8]
   1dfd4:	ldr	r1, [sp, #4]
   1dfd8:	ldr	r2, [sp]
   1dfdc:	movw	r3, #16
   1dfe0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1dfe4:	str	r0, [fp, #-4]
   1dfe8:	b	1dffc <flatcc_json_parser_float@@Base+0x364>
   1dfec:	ldr	r0, [sp, #4]
   1dff0:	add	r0, r0, #1
   1dff4:	str	r0, [sp, #4]
   1dff8:	str	r0, [fp, #-4]
   1dffc:	ldr	r0, [fp, #-4]
   1e000:	mov	sp, fp
   1e004:	pop	{fp, pc}
   1e008:	push	{fp, lr}
   1e00c:	mov	fp, sp
   1e010:	sub	sp, sp, #16
   1e014:	str	r0, [sp, #8]
   1e018:	str	r1, [sp, #4]
   1e01c:	str	r2, [sp]
   1e020:	ldr	r0, [sp, #4]
   1e024:	ldr	r1, [sp]
   1e028:	cmp	r0, r1
   1e02c:	beq	1e040 <flatcc_json_parser_float@@Base+0x3a8>
   1e030:	ldr	r0, [sp, #4]
   1e034:	ldrb	r0, [r0]
   1e038:	cmp	r0, #34	; 0x22
   1e03c:	beq	1e05c <flatcc_json_parser_float@@Base+0x3c4>
   1e040:	ldr	r0, [sp, #8]
   1e044:	ldr	r1, [sp, #4]
   1e048:	ldr	r2, [sp]
   1e04c:	movw	r3, #20
   1e050:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e054:	str	r0, [fp, #-4]
   1e058:	b	1e06c <flatcc_json_parser_float@@Base+0x3d4>
   1e05c:	ldr	r0, [sp, #4]
   1e060:	add	r0, r0, #1
   1e064:	str	r0, [sp, #4]
   1e068:	str	r0, [fp, #-4]
   1e06c:	ldr	r0, [fp, #-4]
   1e070:	mov	sp, fp
   1e074:	pop	{fp, pc}
   1e078:	push	{fp, lr}
   1e07c:	mov	fp, sp
   1e080:	sub	sp, sp, #32
   1e084:	str	r0, [fp, #-8]
   1e088:	str	r1, [fp, #-12]
   1e08c:	str	r2, [sp, #16]
   1e090:	ldr	r0, [fp, #-12]
   1e094:	ldr	r1, [sp, #16]
   1e098:	cmp	r0, r1
   1e09c:	bne	1e0ac <flatcc_json_parser_float@@Base+0x414>
   1e0a0:	ldr	r0, [fp, #-12]
   1e0a4:	str	r0, [fp, #-4]
   1e0a8:	b	1e4b0 <flatcc_json_parser_float@@Base+0x818>
   1e0ac:	ldr	r0, [fp, #-12]
   1e0b0:	ldrb	r0, [r0]
   1e0b4:	cmp	r0, #45	; 0x2d
   1e0b8:	bne	1e0f8 <flatcc_json_parser_float@@Base+0x460>
   1e0bc:	ldr	r0, [fp, #-12]
   1e0c0:	add	r0, r0, #1
   1e0c4:	str	r0, [fp, #-12]
   1e0c8:	ldr	r0, [fp, #-12]
   1e0cc:	ldr	r1, [sp, #16]
   1e0d0:	cmp	r0, r1
   1e0d4:	bne	1e0f4 <flatcc_json_parser_float@@Base+0x45c>
   1e0d8:	ldr	r0, [fp, #-8]
   1e0dc:	ldr	r1, [fp, #-12]
   1e0e0:	ldr	r2, [sp, #16]
   1e0e4:	movw	r3, #6
   1e0e8:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e0ec:	str	r0, [fp, #-4]
   1e0f0:	b	1e4b0 <flatcc_json_parser_float@@Base+0x818>
   1e0f4:	b	1e0f8 <flatcc_json_parser_float@@Base+0x460>
   1e0f8:	ldr	r0, [fp, #-12]
   1e0fc:	ldrb	r0, [r0]
   1e100:	cmp	r0, #48	; 0x30
   1e104:	bne	1e118 <flatcc_json_parser_float@@Base+0x480>
   1e108:	ldr	r0, [fp, #-12]
   1e10c:	add	r0, r0, #1
   1e110:	str	r0, [fp, #-12]
   1e114:	b	1e1c8 <flatcc_json_parser_float@@Base+0x530>
   1e118:	ldr	r0, [fp, #-12]
   1e11c:	ldrb	r0, [r0]
   1e120:	cmp	r0, #49	; 0x31
   1e124:	blt	1e138 <flatcc_json_parser_float@@Base+0x4a0>
   1e128:	ldr	r0, [fp, #-12]
   1e12c:	ldrb	r0, [r0]
   1e130:	cmp	r0, #57	; 0x39
   1e134:	ble	1e154 <flatcc_json_parser_float@@Base+0x4bc>
   1e138:	ldr	r0, [fp, #-8]
   1e13c:	ldr	r1, [fp, #-12]
   1e140:	ldr	r2, [sp, #16]
   1e144:	movw	r3, #6
   1e148:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e14c:	str	r0, [fp, #-4]
   1e150:	b	1e4b0 <flatcc_json_parser_float@@Base+0x818>
   1e154:	ldr	r0, [fp, #-12]
   1e158:	add	r0, r0, #1
   1e15c:	str	r0, [fp, #-12]
   1e160:	ldr	r0, [fp, #-12]
   1e164:	ldr	r1, [sp, #16]
   1e168:	cmp	r0, r1
   1e16c:	movw	r0, #0
   1e170:	str	r0, [sp, #12]
   1e174:	beq	1e1a8 <flatcc_json_parser_float@@Base+0x510>
   1e178:	ldr	r0, [fp, #-12]
   1e17c:	ldrb	r0, [r0]
   1e180:	cmp	r0, #48	; 0x30
   1e184:	movw	r0, #0
   1e188:	str	r0, [sp, #12]
   1e18c:	blt	1e1a8 <flatcc_json_parser_float@@Base+0x510>
   1e190:	ldr	r0, [fp, #-12]
   1e194:	ldrb	r0, [r0]
   1e198:	cmp	r0, #57	; 0x39
   1e19c:	movw	r0, #0
   1e1a0:	movle	r0, #1
   1e1a4:	str	r0, [sp, #12]
   1e1a8:	ldr	r0, [sp, #12]
   1e1ac:	tst	r0, #1
   1e1b0:	beq	1e1c4 <flatcc_json_parser_float@@Base+0x52c>
   1e1b4:	ldr	r0, [fp, #-12]
   1e1b8:	add	r0, r0, #1
   1e1bc:	str	r0, [fp, #-12]
   1e1c0:	b	1e160 <flatcc_json_parser_float@@Base+0x4c8>
   1e1c4:	b	1e1c8 <flatcc_json_parser_float@@Base+0x530>
   1e1c8:	ldr	r0, [fp, #-12]
   1e1cc:	ldr	r1, [sp, #16]
   1e1d0:	cmp	r0, r1
   1e1d4:	beq	1e2a8 <flatcc_json_parser_float@@Base+0x610>
   1e1d8:	ldr	r0, [fp, #-12]
   1e1dc:	ldrb	r0, [r0]
   1e1e0:	cmp	r0, #46	; 0x2e
   1e1e4:	bne	1e2a4 <flatcc_json_parser_float@@Base+0x60c>
   1e1e8:	ldr	r0, [fp, #-12]
   1e1ec:	add	r0, r0, #1
   1e1f0:	str	r0, [fp, #-12]
   1e1f4:	ldr	r0, [fp, #-12]
   1e1f8:	ldrb	r0, [r0]
   1e1fc:	cmp	r0, #48	; 0x30
   1e200:	blt	1e214 <flatcc_json_parser_float@@Base+0x57c>
   1e204:	ldr	r0, [fp, #-12]
   1e208:	ldrb	r0, [r0]
   1e20c:	cmp	r0, #57	; 0x39
   1e210:	ble	1e230 <flatcc_json_parser_float@@Base+0x598>
   1e214:	ldr	r0, [fp, #-8]
   1e218:	ldr	r1, [fp, #-12]
   1e21c:	ldr	r2, [sp, #16]
   1e220:	movw	r3, #6
   1e224:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e228:	str	r0, [fp, #-4]
   1e22c:	b	1e4b0 <flatcc_json_parser_float@@Base+0x818>
   1e230:	ldr	r0, [fp, #-12]
   1e234:	add	r0, r0, #1
   1e238:	str	r0, [fp, #-12]
   1e23c:	ldr	r0, [fp, #-12]
   1e240:	ldr	r1, [sp, #16]
   1e244:	cmp	r0, r1
   1e248:	movw	r0, #0
   1e24c:	str	r0, [sp, #8]
   1e250:	beq	1e284 <flatcc_json_parser_float@@Base+0x5ec>
   1e254:	ldr	r0, [fp, #-12]
   1e258:	ldrb	r0, [r0]
   1e25c:	cmp	r0, #48	; 0x30
   1e260:	movw	r0, #0
   1e264:	str	r0, [sp, #8]
   1e268:	blt	1e284 <flatcc_json_parser_float@@Base+0x5ec>
   1e26c:	ldr	r0, [fp, #-12]
   1e270:	ldrb	r0, [r0]
   1e274:	cmp	r0, #57	; 0x39
   1e278:	movw	r0, #0
   1e27c:	movle	r0, #1
   1e280:	str	r0, [sp, #8]
   1e284:	ldr	r0, [sp, #8]
   1e288:	tst	r0, #1
   1e28c:	beq	1e2a0 <flatcc_json_parser_float@@Base+0x608>
   1e290:	ldr	r0, [fp, #-12]
   1e294:	add	r0, r0, #1
   1e298:	str	r0, [fp, #-12]
   1e29c:	b	1e23c <flatcc_json_parser_float@@Base+0x5a4>
   1e2a0:	b	1e2a4 <flatcc_json_parser_float@@Base+0x60c>
   1e2a4:	b	1e2a8 <flatcc_json_parser_float@@Base+0x610>
   1e2a8:	ldr	r0, [fp, #-12]
   1e2ac:	ldr	r1, [sp, #16]
   1e2b0:	cmp	r0, r1
   1e2b4:	beq	1e3fc <flatcc_json_parser_float@@Base+0x764>
   1e2b8:	ldr	r0, [fp, #-12]
   1e2bc:	ldrb	r0, [r0]
   1e2c0:	cmp	r0, #101	; 0x65
   1e2c4:	beq	1e2d8 <flatcc_json_parser_float@@Base+0x640>
   1e2c8:	ldr	r0, [fp, #-12]
   1e2cc:	ldrb	r0, [r0]
   1e2d0:	cmp	r0, #69	; 0x45
   1e2d4:	bne	1e3fc <flatcc_json_parser_float@@Base+0x764>
   1e2d8:	ldr	r0, [fp, #-12]
   1e2dc:	add	r0, r0, #1
   1e2e0:	str	r0, [fp, #-12]
   1e2e4:	ldr	r0, [fp, #-12]
   1e2e8:	ldr	r1, [sp, #16]
   1e2ec:	cmp	r0, r1
   1e2f0:	bne	1e310 <flatcc_json_parser_float@@Base+0x678>
   1e2f4:	ldr	r0, [fp, #-8]
   1e2f8:	ldr	r1, [fp, #-12]
   1e2fc:	ldr	r2, [sp, #16]
   1e300:	movw	r3, #6
   1e304:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e308:	str	r0, [fp, #-4]
   1e30c:	b	1e4b0 <flatcc_json_parser_float@@Base+0x818>
   1e310:	ldr	r0, [fp, #-12]
   1e314:	ldrb	r0, [r0]
   1e318:	cmp	r0, #43	; 0x2b
   1e31c:	beq	1e330 <flatcc_json_parser_float@@Base+0x698>
   1e320:	ldr	r0, [fp, #-12]
   1e324:	ldrb	r0, [r0]
   1e328:	cmp	r0, #45	; 0x2d
   1e32c:	bne	1e33c <flatcc_json_parser_float@@Base+0x6a4>
   1e330:	ldr	r0, [fp, #-12]
   1e334:	add	r0, r0, #1
   1e338:	str	r0, [fp, #-12]
   1e33c:	ldr	r0, [fp, #-12]
   1e340:	ldr	r1, [sp, #16]
   1e344:	cmp	r0, r1
   1e348:	beq	1e36c <flatcc_json_parser_float@@Base+0x6d4>
   1e34c:	ldr	r0, [fp, #-12]
   1e350:	ldrb	r0, [r0]
   1e354:	cmp	r0, #48	; 0x30
   1e358:	blt	1e36c <flatcc_json_parser_float@@Base+0x6d4>
   1e35c:	ldr	r0, [fp, #-12]
   1e360:	ldrb	r0, [r0]
   1e364:	cmp	r0, #57	; 0x39
   1e368:	ble	1e388 <flatcc_json_parser_float@@Base+0x6f0>
   1e36c:	ldr	r0, [fp, #-8]
   1e370:	ldr	r1, [fp, #-12]
   1e374:	ldr	r2, [sp, #16]
   1e378:	movw	r3, #6
   1e37c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e380:	str	r0, [fp, #-4]
   1e384:	b	1e4b0 <flatcc_json_parser_float@@Base+0x818>
   1e388:	ldr	r0, [fp, #-12]
   1e38c:	add	r0, r0, #1
   1e390:	str	r0, [fp, #-12]
   1e394:	ldr	r0, [fp, #-12]
   1e398:	ldr	r1, [sp, #16]
   1e39c:	cmp	r0, r1
   1e3a0:	movw	r0, #0
   1e3a4:	str	r0, [sp, #4]
   1e3a8:	beq	1e3dc <flatcc_json_parser_float@@Base+0x744>
   1e3ac:	ldr	r0, [fp, #-12]
   1e3b0:	ldrb	r0, [r0]
   1e3b4:	cmp	r0, #48	; 0x30
   1e3b8:	movw	r0, #0
   1e3bc:	str	r0, [sp, #4]
   1e3c0:	blt	1e3dc <flatcc_json_parser_float@@Base+0x744>
   1e3c4:	ldr	r0, [fp, #-12]
   1e3c8:	ldrb	r0, [r0]
   1e3cc:	cmp	r0, #57	; 0x39
   1e3d0:	movw	r0, #0
   1e3d4:	movle	r0, #1
   1e3d8:	str	r0, [sp, #4]
   1e3dc:	ldr	r0, [sp, #4]
   1e3e0:	tst	r0, #1
   1e3e4:	beq	1e3f8 <flatcc_json_parser_float@@Base+0x760>
   1e3e8:	ldr	r0, [fp, #-12]
   1e3ec:	add	r0, r0, #1
   1e3f0:	str	r0, [fp, #-12]
   1e3f4:	b	1e394 <flatcc_json_parser_float@@Base+0x6fc>
   1e3f8:	b	1e3fc <flatcc_json_parser_float@@Base+0x764>
   1e3fc:	ldr	r0, [fp, #-12]
   1e400:	ldr	r1, [sp, #16]
   1e404:	cmp	r0, r1
   1e408:	beq	1e498 <flatcc_json_parser_float@@Base+0x800>
   1e40c:	ldr	r0, [fp, #-12]
   1e410:	ldrb	r0, [r0]
   1e414:	sub	r1, r0, #9
   1e418:	cmp	r1, #3
   1e41c:	str	r0, [sp]
   1e420:	bcc	1e488 <flatcc_json_parser_float@@Base+0x7f0>
   1e424:	b	1e428 <flatcc_json_parser_float@@Base+0x790>
   1e428:	ldr	r0, [sp]
   1e42c:	cmp	r0, #13
   1e430:	beq	1e488 <flatcc_json_parser_float@@Base+0x7f0>
   1e434:	b	1e438 <flatcc_json_parser_float@@Base+0x7a0>
   1e438:	ldr	r0, [sp]
   1e43c:	cmp	r0, #32
   1e440:	beq	1e488 <flatcc_json_parser_float@@Base+0x7f0>
   1e444:	b	1e448 <flatcc_json_parser_float@@Base+0x7b0>
   1e448:	ldr	r0, [sp]
   1e44c:	cmp	r0, #44	; 0x2c
   1e450:	beq	1e488 <flatcc_json_parser_float@@Base+0x7f0>
   1e454:	b	1e458 <flatcc_json_parser_float@@Base+0x7c0>
   1e458:	ldr	r0, [sp]
   1e45c:	cmp	r0, #58	; 0x3a
   1e460:	beq	1e488 <flatcc_json_parser_float@@Base+0x7f0>
   1e464:	b	1e468 <flatcc_json_parser_float@@Base+0x7d0>
   1e468:	ldr	r0, [sp]
   1e46c:	cmp	r0, #93	; 0x5d
   1e470:	beq	1e488 <flatcc_json_parser_float@@Base+0x7f0>
   1e474:	b	1e478 <flatcc_json_parser_float@@Base+0x7e0>
   1e478:	ldr	r0, [sp]
   1e47c:	cmp	r0, #125	; 0x7d
   1e480:	bne	1e494 <flatcc_json_parser_float@@Base+0x7fc>
   1e484:	b	1e488 <flatcc_json_parser_float@@Base+0x7f0>
   1e488:	ldr	r0, [fp, #-12]
   1e48c:	str	r0, [fp, #-4]
   1e490:	b	1e4b0 <flatcc_json_parser_float@@Base+0x818>
   1e494:	b	1e498 <flatcc_json_parser_float@@Base+0x800>
   1e498:	ldr	r0, [fp, #-8]
   1e49c:	ldr	r1, [fp, #-12]
   1e4a0:	ldr	r2, [sp, #16]
   1e4a4:	movw	r3, #6
   1e4a8:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e4ac:	str	r0, [fp, #-4]
   1e4b0:	ldr	r0, [fp, #-4]
   1e4b4:	mov	sp, fp
   1e4b8:	pop	{fp, pc}
   1e4bc:	push	{fp, lr}
   1e4c0:	mov	fp, sp
   1e4c4:	sub	sp, sp, #24
   1e4c8:	str	r0, [fp, #-8]
   1e4cc:	str	r1, [sp, #12]
   1e4d0:	str	r2, [sp, #8]
   1e4d4:	str	r3, [sp, #4]
   1e4d8:	ldr	r0, [fp, #-8]
   1e4dc:	ldr	r1, [sp, #12]
   1e4e0:	ldr	r2, [sp, #8]
   1e4e4:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e4e8:	str	r0, [sp, #12]
   1e4ec:	ldr	r0, [sp, #12]
   1e4f0:	ldr	r1, [sp, #8]
   1e4f4:	cmp	r0, r1
   1e4f8:	bne	1e514 <flatcc_json_parser_float@@Base+0x87c>
   1e4fc:	ldr	r0, [sp, #4]
   1e500:	movw	r1, #0
   1e504:	str	r1, [r0]
   1e508:	ldr	r0, [sp, #12]
   1e50c:	str	r0, [fp, #-4]
   1e510:	b	1e614 <flatcc_json_parser_float@@Base+0x97c>
   1e514:	ldr	r0, [sp, #12]
   1e518:	ldrb	r0, [r0]
   1e51c:	cmp	r0, #44	; 0x2c
   1e520:	beq	1e578 <flatcc_json_parser_float@@Base+0x8e0>
   1e524:	ldr	r0, [sp, #4]
   1e528:	movw	r1, #0
   1e52c:	str	r1, [r0]
   1e530:	ldr	r0, [sp, #12]
   1e534:	ldrb	r0, [r0]
   1e538:	cmp	r0, #93	; 0x5d
   1e53c:	beq	1e55c <flatcc_json_parser_float@@Base+0x8c4>
   1e540:	ldr	r0, [fp, #-8]
   1e544:	ldr	r1, [sp, #12]
   1e548:	ldr	r2, [sp, #8]
   1e54c:	movw	r3, #9
   1e550:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e554:	str	r0, [fp, #-4]
   1e558:	b	1e614 <flatcc_json_parser_float@@Base+0x97c>
   1e55c:	ldr	r0, [fp, #-8]
   1e560:	ldr	r1, [sp, #12]
   1e564:	add	r1, r1, #1
   1e568:	ldr	r2, [sp, #8]
   1e56c:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e570:	str	r0, [fp, #-4]
   1e574:	b	1e614 <flatcc_json_parser_float@@Base+0x97c>
   1e578:	ldr	r0, [fp, #-8]
   1e57c:	ldr	r1, [sp, #12]
   1e580:	add	r1, r1, #1
   1e584:	ldr	r2, [sp, #8]
   1e588:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e58c:	str	r0, [sp, #12]
   1e590:	ldr	r0, [sp, #12]
   1e594:	ldr	r1, [sp, #8]
   1e598:	cmp	r0, r1
   1e59c:	bne	1e5c8 <flatcc_json_parser_float@@Base+0x930>
   1e5a0:	ldr	r0, [sp, #4]
   1e5a4:	movw	r1, #0
   1e5a8:	str	r1, [r0]
   1e5ac:	ldr	r0, [fp, #-8]
   1e5b0:	ldr	r1, [sp, #12]
   1e5b4:	ldr	r2, [sp, #8]
   1e5b8:	movw	r3, #9
   1e5bc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e5c0:	str	r0, [fp, #-4]
   1e5c4:	b	1e614 <flatcc_json_parser_float@@Base+0x97c>
   1e5c8:	ldr	r0, [sp, #12]
   1e5cc:	ldrb	r0, [r0]
   1e5d0:	cmp	r0, #93	; 0x5d
   1e5d4:	bne	1e600 <flatcc_json_parser_float@@Base+0x968>
   1e5d8:	ldr	r0, [sp, #4]
   1e5dc:	movw	r1, #0
   1e5e0:	str	r1, [r0]
   1e5e4:	ldr	r0, [fp, #-8]
   1e5e8:	ldr	r1, [sp, #12]
   1e5ec:	add	r1, r1, #1
   1e5f0:	ldr	r2, [sp, #8]
   1e5f4:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e5f8:	str	r0, [fp, #-4]
   1e5fc:	b	1e614 <flatcc_json_parser_float@@Base+0x97c>
   1e600:	ldr	r0, [sp, #4]
   1e604:	movw	r1, #1
   1e608:	str	r1, [r0]
   1e60c:	ldr	r0, [sp, #12]
   1e610:	str	r0, [fp, #-4]
   1e614:	ldr	r0, [fp, #-4]
   1e618:	mov	sp, fp
   1e61c:	pop	{fp, pc}
   1e620:	push	{fp, lr}
   1e624:	mov	fp, sp
   1e628:	sub	sp, sp, #24
   1e62c:	str	r0, [fp, #-8]
   1e630:	str	r1, [sp, #12]
   1e634:	str	r2, [sp, #8]
   1e638:	str	r3, [sp, #4]
   1e63c:	ldr	r0, [fp, #-8]
   1e640:	ldr	r1, [sp, #12]
   1e644:	ldr	r2, [sp, #8]
   1e648:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e64c:	str	r0, [sp, #12]
   1e650:	ldr	r0, [sp, #12]
   1e654:	ldr	r1, [sp, #8]
   1e658:	cmp	r0, r1
   1e65c:	bne	1e678 <flatcc_json_parser_float@@Base+0x9e0>
   1e660:	ldr	r0, [sp, #4]
   1e664:	movw	r1, #0
   1e668:	str	r1, [r0]
   1e66c:	ldr	r0, [sp, #12]
   1e670:	str	r0, [fp, #-4]
   1e674:	b	1e778 <flatcc_json_parser_float@@Base+0xae0>
   1e678:	ldr	r0, [sp, #12]
   1e67c:	ldrb	r0, [r0]
   1e680:	cmp	r0, #44	; 0x2c
   1e684:	beq	1e6dc <flatcc_json_parser_float@@Base+0xa44>
   1e688:	ldr	r0, [sp, #4]
   1e68c:	movw	r1, #0
   1e690:	str	r1, [r0]
   1e694:	ldr	r0, [sp, #12]
   1e698:	ldrb	r0, [r0]
   1e69c:	cmp	r0, #125	; 0x7d
   1e6a0:	beq	1e6c0 <flatcc_json_parser_float@@Base+0xa28>
   1e6a4:	ldr	r0, [fp, #-8]
   1e6a8:	ldr	r1, [sp, #12]
   1e6ac:	ldr	r2, [sp, #8]
   1e6b0:	movw	r3, #10
   1e6b4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e6b8:	str	r0, [fp, #-4]
   1e6bc:	b	1e778 <flatcc_json_parser_float@@Base+0xae0>
   1e6c0:	ldr	r0, [fp, #-8]
   1e6c4:	ldr	r1, [sp, #12]
   1e6c8:	add	r1, r1, #1
   1e6cc:	ldr	r2, [sp, #8]
   1e6d0:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e6d4:	str	r0, [fp, #-4]
   1e6d8:	b	1e778 <flatcc_json_parser_float@@Base+0xae0>
   1e6dc:	ldr	r0, [fp, #-8]
   1e6e0:	ldr	r1, [sp, #12]
   1e6e4:	add	r1, r1, #1
   1e6e8:	ldr	r2, [sp, #8]
   1e6ec:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e6f0:	str	r0, [sp, #12]
   1e6f4:	ldr	r0, [sp, #12]
   1e6f8:	ldr	r1, [sp, #8]
   1e6fc:	cmp	r0, r1
   1e700:	bne	1e72c <flatcc_json_parser_float@@Base+0xa94>
   1e704:	ldr	r0, [sp, #4]
   1e708:	movw	r1, #0
   1e70c:	str	r1, [r0]
   1e710:	ldr	r0, [fp, #-8]
   1e714:	ldr	r1, [sp, #12]
   1e718:	ldr	r2, [sp, #8]
   1e71c:	movw	r3, #10
   1e720:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e724:	str	r0, [fp, #-4]
   1e728:	b	1e778 <flatcc_json_parser_float@@Base+0xae0>
   1e72c:	ldr	r0, [sp, #12]
   1e730:	ldrb	r0, [r0]
   1e734:	cmp	r0, #125	; 0x7d
   1e738:	bne	1e764 <flatcc_json_parser_float@@Base+0xacc>
   1e73c:	ldr	r0, [sp, #4]
   1e740:	movw	r1, #0
   1e744:	str	r1, [r0]
   1e748:	ldr	r0, [fp, #-8]
   1e74c:	ldr	r1, [sp, #12]
   1e750:	add	r1, r1, #1
   1e754:	ldr	r2, [sp, #8]
   1e758:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   1e75c:	str	r0, [fp, #-4]
   1e760:	b	1e778 <flatcc_json_parser_float@@Base+0xae0>
   1e764:	ldr	r0, [sp, #4]
   1e768:	movw	r1, #1
   1e76c:	str	r1, [r0]
   1e770:	ldr	r0, [sp, #12]
   1e774:	str	r0, [fp, #-4]
   1e778:	ldr	r0, [fp, #-4]
   1e77c:	mov	sp, fp
   1e780:	pop	{fp, pc}

0001e784 <flatcc_json_parser_integer@@Base>:
   1e784:	push	{fp, lr}
   1e788:	mov	fp, sp
   1e78c:	sub	sp, sp, #64	; 0x40
   1e790:	ldr	ip, [fp, #8]
   1e794:	str	r0, [fp, #-8]
   1e798:	str	r1, [fp, #-12]
   1e79c:	str	r2, [fp, #-16]
   1e7a0:	str	r3, [fp, #-20]	; 0xffffffec
   1e7a4:	mov	r0, #0
   1e7a8:	str	r0, [sp, #28]
   1e7ac:	str	r0, [sp, #24]
   1e7b0:	ldr	r0, [fp, #-12]
   1e7b4:	ldr	r1, [fp, #-16]
   1e7b8:	cmp	r0, r1
   1e7bc:	str	ip, [sp, #16]
   1e7c0:	bne	1e7d0 <flatcc_json_parser_integer@@Base+0x4c>
   1e7c4:	ldr	r0, [fp, #-12]
   1e7c8:	str	r0, [fp, #-4]
   1e7cc:	b	1e9a4 <flatcc_json_parser_integer@@Base+0x220>
   1e7d0:	ldr	r0, [fp, #-12]
   1e7d4:	str	r0, [sp, #20]
   1e7d8:	ldr	r0, [fp, #-12]
   1e7dc:	ldrb	r0, [r0]
   1e7e0:	cmp	r0, #45	; 0x2d
   1e7e4:	movw	r0, #0
   1e7e8:	moveq	r0, #1
   1e7ec:	and	r0, r0, #1
   1e7f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e7f4:	str	r0, [r1]
   1e7f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e7fc:	ldr	r0, [r0]
   1e800:	ldr	r1, [fp, #-12]
   1e804:	add	r0, r1, r0
   1e808:	str	r0, [fp, #-12]
   1e80c:	ldr	r0, [fp, #-12]
   1e810:	ldr	r1, [fp, #-16]
   1e814:	cmp	r0, r1
   1e818:	movw	r0, #0
   1e81c:	str	r0, [sp, #12]
   1e820:	beq	1e854 <flatcc_json_parser_integer@@Base+0xd0>
   1e824:	ldr	r0, [fp, #-12]
   1e828:	ldrb	r0, [r0]
   1e82c:	cmp	r0, #48	; 0x30
   1e830:	movw	r0, #0
   1e834:	str	r0, [sp, #12]
   1e838:	blt	1e854 <flatcc_json_parser_integer@@Base+0xd0>
   1e83c:	ldr	r0, [fp, #-12]
   1e840:	ldrb	r0, [r0]
   1e844:	cmp	r0, #57	; 0x39
   1e848:	movw	r0, #0
   1e84c:	movle	r0, #1
   1e850:	str	r0, [sp, #12]
   1e854:	ldr	r0, [sp, #12]
   1e858:	tst	r0, #1
   1e85c:	beq	1e910 <flatcc_json_parser_integer@@Base+0x18c>
   1e860:	ldr	r0, [sp, #24]
   1e864:	ldr	r1, [sp, #28]
   1e868:	str	r1, [sp, #36]	; 0x24
   1e86c:	str	r0, [sp, #32]
   1e870:	ldr	r0, [sp, #24]
   1e874:	ldr	r1, [sp, #28]
   1e878:	add	r1, r1, r1, lsl #2
   1e87c:	lsl	r1, r1, #1
   1e880:	ldr	r2, [fp, #-12]
   1e884:	ldrb	r2, [r2]
   1e888:	mov	r3, #10
   1e88c:	umlal	r2, r1, r0, r3
   1e890:	subs	r0, r2, #48	; 0x30
   1e894:	sbc	r1, r1, #0
   1e898:	str	r0, [sp, #24]
   1e89c:	str	r1, [sp, #28]
   1e8a0:	ldr	r0, [sp, #32]
   1e8a4:	ldr	r1, [sp, #36]	; 0x24
   1e8a8:	ldr	r2, [sp, #24]
   1e8ac:	ldr	r3, [sp, #28]
   1e8b0:	subs	r0, r2, r0
   1e8b4:	sbcs	r1, r3, r1
   1e8b8:	str	r0, [sp, #8]
   1e8bc:	str	r1, [sp, #4]
   1e8c0:	bcs	1e900 <flatcc_json_parser_integer@@Base+0x17c>
   1e8c4:	b	1e8c8 <flatcc_json_parser_integer@@Base+0x144>
   1e8c8:	ldr	r0, [fp, #-8]
   1e8cc:	ldr	r1, [fp, #-12]
   1e8d0:	ldr	r2, [fp, #-16]
   1e8d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e8d8:	movw	ip, #0
   1e8dc:	cmp	r3, ip
   1e8e0:	movw	r3, #0
   1e8e4:	movne	r3, #1
   1e8e8:	tst	r3, #1
   1e8ec:	movw	r3, #8
   1e8f0:	moveq	r3, #7
   1e8f4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e8f8:	str	r0, [fp, #-4]
   1e8fc:	b	1e9a4 <flatcc_json_parser_integer@@Base+0x220>
   1e900:	ldr	r0, [fp, #-12]
   1e904:	add	r0, r0, #1
   1e908:	str	r0, [fp, #-12]
   1e90c:	b	1e80c <flatcc_json_parser_integer@@Base+0x88>
   1e910:	ldr	r0, [fp, #-12]
   1e914:	ldr	r1, [sp, #20]
   1e918:	cmp	r0, r1
   1e91c:	bne	1e92c <flatcc_json_parser_integer@@Base+0x1a8>
   1e920:	ldr	r0, [fp, #-12]
   1e924:	str	r0, [fp, #-4]
   1e928:	b	1e9a4 <flatcc_json_parser_integer@@Base+0x220>
   1e92c:	ldr	r0, [fp, #-12]
   1e930:	ldr	r1, [fp, #-16]
   1e934:	cmp	r0, r1
   1e938:	beq	1e988 <flatcc_json_parser_integer@@Base+0x204>
   1e93c:	ldr	r0, [fp, #-12]
   1e940:	ldrb	r0, [r0]
   1e944:	cmp	r0, #101	; 0x65
   1e948:	beq	1e96c <flatcc_json_parser_integer@@Base+0x1e8>
   1e94c:	ldr	r0, [fp, #-12]
   1e950:	ldrb	r0, [r0]
   1e954:	cmp	r0, #69	; 0x45
   1e958:	beq	1e96c <flatcc_json_parser_integer@@Base+0x1e8>
   1e95c:	ldr	r0, [fp, #-12]
   1e960:	ldrb	r0, [r0]
   1e964:	cmp	r0, #46	; 0x2e
   1e968:	bne	1e988 <flatcc_json_parser_integer@@Base+0x204>
   1e96c:	ldr	r0, [fp, #-8]
   1e970:	ldr	r1, [fp, #-12]
   1e974:	ldr	r2, [fp, #-16]
   1e978:	movw	r3, #12
   1e97c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1e980:	str	r0, [fp, #-4]
   1e984:	b	1e9a4 <flatcc_json_parser_integer@@Base+0x220>
   1e988:	ldr	r0, [sp, #24]
   1e98c:	ldr	r1, [sp, #28]
   1e990:	ldr	r2, [fp, #8]
   1e994:	str	r1, [r2, #4]
   1e998:	str	r0, [r2]
   1e99c:	ldr	r0, [fp, #-12]
   1e9a0:	str	r0, [fp, #-4]
   1e9a4:	ldr	r0, [fp, #-4]
   1e9a8:	mov	sp, fp
   1e9ac:	pop	{fp, pc}

0001e9b0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1e9b0:	push	{fp, lr}
   1e9b4:	mov	fp, sp
   1e9b8:	sub	sp, sp, #64	; 0x40
   1e9bc:	ldr	ip, [fp, #8]
   1e9c0:	str	r0, [fp, #-8]
   1e9c4:	str	r1, [fp, #-12]
   1e9c8:	str	r2, [fp, #-16]
   1e9cc:	str	r3, [fp, #-20]	; 0xffffffec
   1e9d0:	ldr	r0, [fp, #8]
   1e9d4:	cmp	r0, #0
   1e9d8:	movw	r0, #0
   1e9dc:	movne	r0, #1
   1e9e0:	tst	r0, #1
   1e9e4:	movw	r0, #1
   1e9e8:	moveq	r0, #0
   1e9ec:	str	r0, [sp, #20]
   1e9f0:	ldr	r0, [fp, #-8]
   1e9f4:	ldr	r1, [fp, #-12]
   1e9f8:	ldr	r2, [fp, #-16]
   1e9fc:	str	ip, [sp, #12]
   1ea00:	bl	1df98 <flatcc_json_parser_float@@Base+0x300>
   1ea04:	str	r0, [fp, #-12]
   1ea08:	ldr	r0, [fp, #-8]
   1ea0c:	ldr	r1, [fp, #-12]
   1ea10:	str	r1, [fp, #-24]	; 0xffffffe8
   1ea14:	ldr	r2, [fp, #-16]
   1ea18:	bl	1c114 <flatcc_json_parser_string_part@@Base>
   1ea1c:	str	r0, [fp, #-12]
   1ea20:	ldr	r0, [fp, #-12]
   1ea24:	ldr	r1, [fp, #-16]
   1ea28:	cmp	r0, r1
   1ea2c:	beq	1ea40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1ea30:	ldr	r0, [fp, #-12]
   1ea34:	ldrb	r0, [r0]
   1ea38:	cmp	r0, #34	; 0x22
   1ea3c:	beq	1ea44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   1ea40:	b	1ebc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   1ea44:	ldr	r0, [fp, #-12]
   1ea48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ea4c:	sub	r0, r0, r1
   1ea50:	bl	1ec10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   1ea54:	str	r0, [sp, #32]
   1ea58:	ldr	r0, [fp, #-8]
   1ea5c:	ldr	r0, [r0]
   1ea60:	movw	r1, #1
   1ea64:	movw	lr, #1
   1ea68:	uxth	r2, lr
   1ea6c:	mvn	r3, #0
   1ea70:	bl	16e14 <flatcc_builder_start_vector@@Base>
   1ea74:	cmp	r0, #0
   1ea78:	beq	1ea80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd0>
   1ea7c:	b	1eba0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1ea80:	ldr	r0, [fp, #-8]
   1ea84:	ldr	r0, [r0]
   1ea88:	ldr	r1, [sp, #32]
   1ea8c:	bl	16318 <flatcc_builder_extend_vector@@Base>
   1ea90:	str	r0, [fp, #-28]	; 0xffffffe4
   1ea94:	movw	r1, #0
   1ea98:	cmp	r0, r1
   1ea9c:	bne	1eaa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf4>
   1eaa0:	b	1eba0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1eaa4:	ldr	r0, [fp, #-12]
   1eaa8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1eaac:	sub	r0, r0, r1
   1eab0:	str	r0, [sp, #24]
   1eab4:	ldr	r0, [sp, #32]
   1eab8:	str	r0, [sp, #28]
   1eabc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1eac0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1eac4:	ldr	r2, [sp, #20]
   1eac8:	add	r3, sp, #28
   1eacc:	str	r2, [sp, #8]
   1ead0:	mov	r2, r3
   1ead4:	add	r3, sp, #24
   1ead8:	ldr	ip, [sp, #8]
   1eadc:	str	ip, [sp]
   1eae0:	bl	1eca0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f0>
   1eae4:	str	r0, [sp, #16]
   1eae8:	cmp	r0, #0
   1eaec:	beq	1eb04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   1eaf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eaf4:	ldr	r1, [sp, #24]
   1eaf8:	add	r0, r0, r1
   1eafc:	str	r0, [fp, #-12]
   1eb00:	b	1ebc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   1eb04:	ldr	r0, [sp, #24]
   1eb08:	ldr	r1, [fp, #-12]
   1eb0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1eb10:	sub	r1, r1, r2
   1eb14:	cmp	r0, r1
   1eb18:	beq	1eb30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1eb1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eb20:	ldr	r1, [sp, #24]
   1eb24:	add	r0, r0, r1
   1eb28:	str	r0, [fp, #-12]
   1eb2c:	b	1ebc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   1eb30:	ldr	r0, [sp, #28]
   1eb34:	ldr	r1, [sp, #32]
   1eb38:	cmp	r0, r1
   1eb3c:	bcs	1eb68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1eb40:	ldr	r0, [fp, #-8]
   1eb44:	ldr	r0, [r0]
   1eb48:	ldr	r1, [sp, #32]
   1eb4c:	ldr	r2, [sp, #28]
   1eb50:	sub	r1, r1, r2
   1eb54:	bl	16aac <flatcc_builder_truncate_vector@@Base>
   1eb58:	cmp	r0, #0
   1eb5c:	beq	1eb64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b4>
   1eb60:	b	1eba0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1eb64:	b	1eb68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1eb68:	ldr	r0, [fp, #-8]
   1eb6c:	ldr	r0, [r0]
   1eb70:	bl	18308 <flatcc_builder_end_vector@@Base>
   1eb74:	ldr	lr, [fp, #-20]	; 0xffffffec
   1eb78:	str	r0, [lr]
   1eb7c:	cmp	r0, #0
   1eb80:	bne	1eb88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d8>
   1eb84:	b	1eba0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1eb88:	ldr	r0, [fp, #-8]
   1eb8c:	ldr	r1, [fp, #-12]
   1eb90:	ldr	r2, [fp, #-16]
   1eb94:	bl	1e008 <flatcc_json_parser_float@@Base+0x370>
   1eb98:	str	r0, [fp, #-4]
   1eb9c:	b	1ec04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   1eba0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1eba4:	movw	r1, #0
   1eba8:	str	r1, [r0]
   1ebac:	ldr	r0, [fp, #-8]
   1ebb0:	ldr	r1, [fp, #-12]
   1ebb4:	ldr	r2, [fp, #-16]
   1ebb8:	movw	r3, #33	; 0x21
   1ebbc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1ebc0:	str	r0, [fp, #-4]
   1ebc4:	b	1ec04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   1ebc8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ebcc:	movw	r1, #0
   1ebd0:	str	r1, [r0]
   1ebd4:	ldr	r0, [fp, #-8]
   1ebd8:	ldr	r1, [fp, #-12]
   1ebdc:	ldr	r2, [fp, #-16]
   1ebe0:	ldr	r3, [fp, #8]
   1ebe4:	cmp	r3, #0
   1ebe8:	movw	r3, #0
   1ebec:	movne	r3, #1
   1ebf0:	tst	r3, #1
   1ebf4:	movw	r3, #32
   1ebf8:	moveq	r3, #31
   1ebfc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1ec00:	str	r0, [fp, #-4]
   1ec04:	ldr	r0, [fp, #-4]
   1ec08:	mov	sp, fp
   1ec0c:	pop	{fp, pc}
   1ec10:	sub	sp, sp, #20
   1ec14:	str	r0, [sp, #12]
   1ec18:	ldr	r0, [sp, #12]
   1ec1c:	and	r0, r0, #3
   1ec20:	str	r0, [sp, #8]
   1ec24:	ldr	r0, [sp, #12]
   1ec28:	lsr	r0, r0, #2
   1ec2c:	add	r0, r0, r0, lsl #1
   1ec30:	str	r0, [sp, #4]
   1ec34:	ldr	r0, [sp, #8]
   1ec38:	cmp	r0, #2
   1ec3c:	str	r0, [sp]
   1ec40:	bcc	1ec88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   1ec44:	b	1ec48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x298>
   1ec48:	ldr	r0, [sp]
   1ec4c:	cmp	r0, #2
   1ec50:	beq	1ec78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   1ec54:	b	1ec58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   1ec58:	ldr	r0, [sp]
   1ec5c:	cmp	r0, #3
   1ec60:	bne	1ec8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   1ec64:	b	1ec68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   1ec68:	ldr	r0, [sp, #4]
   1ec6c:	add	r0, r0, #2
   1ec70:	str	r0, [sp, #16]
   1ec74:	b	1ec94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   1ec78:	ldr	r0, [sp, #4]
   1ec7c:	add	r0, r0, #1
   1ec80:	str	r0, [sp, #16]
   1ec84:	b	1ec94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   1ec88:	b	1ec8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   1ec8c:	ldr	r0, [sp, #4]
   1ec90:	str	r0, [sp, #16]
   1ec94:	ldr	r0, [sp, #16]
   1ec98:	add	sp, sp, #20
   1ec9c:	bx	lr
   1eca0:	push	{fp, lr}
   1eca4:	mov	fp, sp
   1eca8:	sub	sp, sp, #72	; 0x48
   1ecac:	ldr	ip, [fp, #8]
   1ecb0:	ldr	lr, [pc, #1280]	; 1f1b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x808>
   1ecb4:	add	lr, pc, lr
   1ecb8:	str	r0, [fp, #-4]
   1ecbc:	str	r1, [fp, #-8]
   1ecc0:	str	r2, [fp, #-12]
   1ecc4:	str	r3, [fp, #-16]
   1ecc8:	movw	r0, #0
   1eccc:	str	r0, [fp, #-20]	; 0xffffffec
   1ecd0:	ldr	r1, [fp, #-4]
   1ecd4:	str	r1, [sp, #36]	; 0x24
   1ecd8:	mvn	r1, #0
   1ecdc:	str	r1, [sp, #32]
   1ece0:	str	r1, [sp, #28]
   1ece4:	str	lr, [sp, #20]
   1ece8:	ldr	r1, [fp, #8]
   1ecec:	and	r1, r1, #32
   1ecf0:	str	r1, [sp, #16]
   1ecf4:	ldr	r1, [fp, #-16]
   1ecf8:	cmp	r1, r0
   1ecfc:	str	ip, [sp, #12]
   1ed00:	beq	1ed10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   1ed04:	ldr	r0, [fp, #-16]
   1ed08:	ldr	r0, [r0]
   1ed0c:	str	r0, [sp, #28]
   1ed10:	ldr	r0, [sp, #28]
   1ed14:	str	r0, [sp, #24]
   1ed18:	ldr	r0, [fp, #8]
   1ed1c:	bic	r0, r0, #224	; 0xe0
   1ed20:	str	r0, [fp, #8]
   1ed24:	ldr	r0, [fp, #8]
   1ed28:	cmp	r0, #0
   1ed2c:	str	r0, [sp, #8]
   1ed30:	beq	1ed48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x398>
   1ed34:	b	1ed38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x388>
   1ed38:	ldr	r0, [sp, #8]
   1ed3c:	cmp	r0, #1
   1ed40:	beq	1ed78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c8>
   1ed44:	b	1eda8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
   1ed48:	ldr	r0, [pc, #1140]	; 1f1c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x814>
   1ed4c:	add	r0, pc, r0
   1ed50:	ldr	r1, [pc, #1136]	; 1f1c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x818>
   1ed54:	add	r1, pc, r1
   1ed58:	ldr	r2, [sp, #16]
   1ed5c:	cmp	r2, #0
   1ed60:	movw	r2, #0
   1ed64:	movne	r2, #1
   1ed68:	tst	r2, #1
   1ed6c:	movne	r1, r0
   1ed70:	str	r1, [sp, #20]
   1ed74:	b	1edb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x404>
   1ed78:	ldr	r0, [pc, #1084]	; 1f1bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x80c>
   1ed7c:	add	r0, pc, r0
   1ed80:	ldr	r1, [pc, #1080]	; 1f1c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x810>
   1ed84:	add	r1, pc, r1
   1ed88:	ldr	r2, [sp, #16]
   1ed8c:	cmp	r2, #0
   1ed90:	movw	r2, #0
   1ed94:	movne	r2, #1
   1ed98:	tst	r2, #1
   1ed9c:	movne	r1, r0
   1eda0:	str	r1, [sp, #20]
   1eda4:	b	1edb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x404>
   1eda8:	movw	r0, #3
   1edac:	str	r0, [fp, #-20]	; 0xffffffec
   1edb0:	b	1f038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x688>
   1edb4:	ldr	r0, [fp, #-12]
   1edb8:	movw	r1, #0
   1edbc:	cmp	r0, r1
   1edc0:	beq	1ede0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x430>
   1edc4:	ldr	r0, [fp, #-12]
   1edc8:	ldr	r0, [r0]
   1edcc:	cmp	r0, #0
   1edd0:	bls	1ede0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x430>
   1edd4:	ldr	r0, [fp, #-12]
   1edd8:	ldr	r0, [r0]
   1eddc:	str	r0, [sp, #32]
   1ede0:	b	1ede4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x434>
   1ede4:	ldr	r0, [sp, #32]
   1ede8:	cmp	r0, #0
   1edec:	bls	1f034 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x684>
   1edf0:	movw	r0, #0
   1edf4:	str	r0, [fp, #-24]	; 0xffffffe8
   1edf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1edfc:	cmp	r0, #4
   1ee00:	bcs	1ef98 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5e8>
   1ee04:	ldr	r0, [sp, #28]
   1ee08:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ee0c:	cmp	r0, r1
   1ee10:	bne	1ee30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x480>
   1ee14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ee18:	str	r0, [fp, #-28]	; 0xffffffe4
   1ee1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ee20:	ldr	r1, [sp, #28]
   1ee24:	sub	r0, r1, r0
   1ee28:	str	r0, [sp, #28]
   1ee2c:	b	1f08c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6dc>
   1ee30:	ldr	r0, [sp, #20]
   1ee34:	ldr	r1, [fp, #-8]
   1ee38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ee3c:	add	r1, r1, r2
   1ee40:	ldrb	r1, [r1]
   1ee44:	add	r0, r0, r1
   1ee48:	ldrb	r0, [r0]
   1ee4c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ee50:	sub	r2, fp, #32
   1ee54:	add	r1, r2, r1
   1ee58:	strb	r0, [r1]
   1ee5c:	and	r0, r0, #255	; 0xff
   1ee60:	cmp	r0, #64	; 0x40
   1ee64:	blt	1ef84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5d4>
   1ee68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ee6c:	sub	r1, fp, #32
   1ee70:	add	r0, r1, r0
   1ee74:	ldrb	r0, [r0]
   1ee78:	cmp	r0, #65	; 0x41
   1ee7c:	bne	1eeac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4fc>
   1ee80:	ldr	r0, [fp, #-8]
   1ee84:	add	r0, r0, #1
   1ee88:	str	r0, [fp, #-8]
   1ee8c:	ldr	r0, [sp, #28]
   1ee90:	mvn	r1, #0
   1ee94:	add	r0, r0, r1
   1ee98:	str	r0, [sp, #28]
   1ee9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eea0:	add	r0, r0, r1
   1eea4:	str	r0, [fp, #-24]	; 0xffffffe8
   1eea8:	b	1ef88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5d8>
   1eeac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eeb0:	str	r0, [fp, #-28]	; 0xffffffe4
   1eeb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eeb8:	sub	r1, fp, #32
   1eebc:	add	r0, r1, r0
   1eec0:	ldrb	r0, [r0]
   1eec4:	cmp	r0, #66	; 0x42
   1eec8:	bne	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5c0>
   1eecc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eed0:	add	r0, r0, #1
   1eed4:	str	r0, [fp, #-24]	; 0xffffffe8
   1eed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eedc:	ldr	r1, [sp, #28]
   1eee0:	cmp	r0, r1
   1eee4:	movw	r0, #0
   1eee8:	str	r0, [sp, #4]
   1eeec:	bcs	1ef04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x554>
   1eef0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eef4:	cmp	r0, #8
   1eef8:	movw	r0, #0
   1eefc:	movcc	r0, #1
   1ef00:	str	r0, [sp, #4]
   1ef04:	ldr	r0, [sp, #4]
   1ef08:	tst	r0, #1
   1ef0c:	beq	1ef6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5bc>
   1ef10:	ldr	r0, [sp, #20]
   1ef14:	ldr	r1, [fp, #-8]
   1ef18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ef1c:	add	r1, r1, r2
   1ef20:	ldrb	r1, [r1]
   1ef24:	add	r0, r0, r1
   1ef28:	ldrb	r0, [r0]
   1ef2c:	cmp	r0, #66	; 0x42
   1ef30:	beq	1ef5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5ac>
   1ef34:	ldr	r0, [sp, #20]
   1ef38:	ldr	r1, [fp, #-8]
   1ef3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ef40:	add	r1, r1, r2
   1ef44:	ldrb	r1, [r1]
   1ef48:	add	r0, r0, r1
   1ef4c:	ldrb	r0, [r0]
   1ef50:	cmp	r0, #65	; 0x41
   1ef54:	beq	1ef5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5ac>
   1ef58:	b	1ef6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5bc>
   1ef5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ef60:	add	r0, r0, #1
   1ef64:	str	r0, [fp, #-24]	; 0xffffffe8
   1ef68:	b	1eed8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x528>
   1ef6c:	b	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5c0>
   1ef70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ef74:	ldr	r1, [sp, #28]
   1ef78:	sub	r0, r1, r0
   1ef7c:	str	r0, [sp, #28]
   1ef80:	b	1f08c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6dc>
   1ef84:	b	1ef88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5d8>
   1ef88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ef8c:	add	r0, r0, #1
   1ef90:	str	r0, [fp, #-24]	; 0xffffffe8
   1ef94:	b	1edf8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x448>
   1ef98:	ldr	r0, [sp, #32]
   1ef9c:	cmp	r0, #3
   1efa0:	bcs	1efa8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5f8>
   1efa4:	b	1f1ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7fc>
   1efa8:	ldrb	r0, [fp, #-32]	; 0xffffffe0
   1efac:	lsl	r0, r0, #2
   1efb0:	ldrb	r1, [fp, #-31]	; 0xffffffe1
   1efb4:	asr	r1, r1, #4
   1efb8:	orr	r0, r0, r1
   1efbc:	ldr	r1, [fp, #-4]
   1efc0:	strb	r0, [r1]
   1efc4:	ldrb	r0, [fp, #-31]	; 0xffffffe1
   1efc8:	lsl	r0, r0, #4
   1efcc:	ldrb	r1, [fp, #-30]	; 0xffffffe2
   1efd0:	asr	r1, r1, #2
   1efd4:	orr	r0, r0, r1
   1efd8:	ldr	r1, [fp, #-4]
   1efdc:	strb	r0, [r1, #1]
   1efe0:	ldrb	r0, [fp, #-30]	; 0xffffffe2
   1efe4:	lsl	r0, r0, #6
   1efe8:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1efec:	orr	r0, r0, r1
   1eff0:	ldr	r1, [fp, #-4]
   1eff4:	strb	r0, [r1, #2]
   1eff8:	ldr	r0, [fp, #-4]
   1effc:	add	r0, r0, #3
   1f000:	str	r0, [fp, #-4]
   1f004:	ldr	r0, [fp, #-8]
   1f008:	add	r0, r0, #4
   1f00c:	str	r0, [fp, #-8]
   1f010:	ldr	r0, [sp, #32]
   1f014:	sub	r0, r0, #3
   1f018:	str	r0, [sp, #32]
   1f01c:	ldr	r0, [sp, #28]
   1f020:	sub	r0, r0, #4
   1f024:	str	r0, [sp, #28]
   1f028:	ldr	r0, [sp, #28]
   1f02c:	str	r0, [sp, #24]
   1f030:	b	1ede4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x434>
   1f034:	b	1f038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x688>
   1f038:	ldr	r0, [fp, #-12]
   1f03c:	movw	r1, #0
   1f040:	cmp	r0, r1
   1f044:	beq	1f05c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6ac>
   1f048:	ldr	r0, [fp, #-4]
   1f04c:	ldr	r1, [sp, #36]	; 0x24
   1f050:	sub	r0, r0, r1
   1f054:	ldr	r1, [fp, #-12]
   1f058:	str	r0, [r1]
   1f05c:	ldr	r0, [fp, #-16]
   1f060:	movw	r1, #0
   1f064:	cmp	r0, r1
   1f068:	beq	1f080 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6d0>
   1f06c:	ldr	r0, [sp, #24]
   1f070:	ldr	r1, [fp, #-16]
   1f074:	ldr	r2, [r1]
   1f078:	sub	r0, r2, r0
   1f07c:	str	r0, [r1]
   1f080:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f084:	mov	sp, fp
   1f088:	pop	{fp, pc}
   1f08c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1f090:	cmp	r0, #0
   1f094:	str	r0, [sp]
   1f098:	beq	1f0c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x710>
   1f09c:	b	1f0a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6f0>
   1f0a0:	ldr	r0, [sp]
   1f0a4:	cmp	r0, #2
   1f0a8:	beq	1f0c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x714>
   1f0ac:	b	1f0b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x700>
   1f0b0:	ldr	r0, [sp]
   1f0b4:	cmp	r0, #3
   1f0b8:	beq	1f118 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x768>
   1f0bc:	b	1f188 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7d8>
   1f0c0:	b	1f194 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7e4>
   1f0c4:	ldrb	r0, [fp, #-31]	; 0xffffffe1
   1f0c8:	lsl	r0, r0, #4
   1f0cc:	and	r0, r0, #255	; 0xff
   1f0d0:	cmp	r0, #0
   1f0d4:	beq	1f0dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x72c>
   1f0d8:	b	1f1a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7f0>
   1f0dc:	ldr	r0, [sp, #32]
   1f0e0:	cmp	r0, #1
   1f0e4:	bcs	1f0ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x73c>
   1f0e8:	b	1f1ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7fc>
   1f0ec:	ldrb	r0, [fp, #-32]	; 0xffffffe0
   1f0f0:	lsl	r0, r0, #2
   1f0f4:	ldrb	r1, [fp, #-31]	; 0xffffffe1
   1f0f8:	asr	r1, r1, #4
   1f0fc:	orr	r0, r0, r1
   1f100:	ldr	r1, [fp, #-4]
   1f104:	strb	r0, [r1]
   1f108:	ldr	r0, [fp, #-4]
   1f10c:	add	r0, r0, #1
   1f110:	str	r0, [fp, #-4]
   1f114:	b	1f194 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7e4>
   1f118:	ldrb	r0, [fp, #-30]	; 0xffffffe2
   1f11c:	lsl	r0, r0, #6
   1f120:	and	r0, r0, #255	; 0xff
   1f124:	cmp	r0, #0
   1f128:	beq	1f130 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x780>
   1f12c:	b	1f1a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7f0>
   1f130:	ldr	r0, [sp, #32]
   1f134:	cmp	r0, #2
   1f138:	bcs	1f140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x790>
   1f13c:	b	1f1ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7fc>
   1f140:	ldrb	r0, [fp, #-32]	; 0xffffffe0
   1f144:	lsl	r0, r0, #2
   1f148:	ldrb	r1, [fp, #-31]	; 0xffffffe1
   1f14c:	asr	r1, r1, #4
   1f150:	orr	r0, r0, r1
   1f154:	ldr	r1, [fp, #-4]
   1f158:	strb	r0, [r1]
   1f15c:	ldrb	r0, [fp, #-31]	; 0xffffffe1
   1f160:	lsl	r0, r0, #4
   1f164:	ldrb	r1, [fp, #-30]	; 0xffffffe2
   1f168:	asr	r1, r1, #2
   1f16c:	orr	r0, r0, r1
   1f170:	ldr	r1, [fp, #-4]
   1f174:	strb	r0, [r1, #1]
   1f178:	ldr	r0, [fp, #-4]
   1f17c:	add	r0, r0, #2
   1f180:	str	r0, [fp, #-4]
   1f184:	b	1f194 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7e4>
   1f188:	movw	r0, #4
   1f18c:	str	r0, [fp, #-20]	; 0xffffffec
   1f190:	b	1f038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x688>
   1f194:	ldr	r0, [sp, #28]
   1f198:	str	r0, [sp, #24]
   1f19c:	b	1f038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x688>
   1f1a0:	movw	r0, #5
   1f1a4:	str	r0, [fp, #-20]	; 0xffffffec
   1f1a8:	b	1f038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x688>
   1f1ac:	movw	r0, #1
   1f1b0:	str	r0, [fp, #-20]	; 0xffffffec
   1f1b4:	b	1f038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x688>
   1f1b8:	andeq	r5, r0, r7, lsl #13
   1f1bc:			; <UNDEFINED> instruction: 0x000058bf
   1f1c0:			; <UNDEFINED> instruction: 0x000056b7
   1f1c4:	andeq	r5, r0, pc, ror #15
   1f1c8:	andeq	r5, r0, r7, ror #11

0001f1cc <flatcc_json_parser_build_string@@Base>:
   1f1cc:	push	{fp, lr}
   1f1d0:	mov	fp, sp
   1f1d4:	sub	sp, sp, #40	; 0x28
   1f1d8:	str	r0, [fp, #-8]
   1f1dc:	str	r1, [fp, #-12]
   1f1e0:	str	r2, [fp, #-16]
   1f1e4:	str	r3, [sp, #20]
   1f1e8:	ldr	r0, [fp, #-8]
   1f1ec:	ldr	r1, [fp, #-12]
   1f1f0:	ldr	r2, [fp, #-16]
   1f1f4:	bl	1df98 <flatcc_json_parser_float@@Base+0x300>
   1f1f8:	str	r0, [fp, #-12]
   1f1fc:	ldr	r0, [fp, #-8]
   1f200:	ldr	r1, [fp, #-12]
   1f204:	str	r1, [sp, #12]
   1f208:	ldr	r2, [fp, #-16]
   1f20c:	bl	1c114 <flatcc_json_parser_string_part@@Base>
   1f210:	str	r0, [fp, #-12]
   1f214:	ldr	r0, [fp, #-12]
   1f218:	ldr	r1, [fp, #-16]
   1f21c:	cmp	r0, r1
   1f220:	beq	1f25c <flatcc_json_parser_build_string@@Base+0x90>
   1f224:	ldr	r0, [fp, #-12]
   1f228:	ldrb	r0, [r0]
   1f22c:	cmp	r0, #34	; 0x22
   1f230:	bne	1f25c <flatcc_json_parser_build_string@@Base+0x90>
   1f234:	ldr	r0, [fp, #-8]
   1f238:	ldr	r0, [r0]
   1f23c:	ldr	r1, [sp, #12]
   1f240:	ldr	r2, [fp, #-12]
   1f244:	ldr	r3, [sp, #12]
   1f248:	sub	r2, r2, r3
   1f24c:	bl	195c0 <flatcc_builder_create_string@@Base>
   1f250:	ldr	r1, [sp, #20]
   1f254:	str	r0, [r1]
   1f258:	b	1f39c <flatcc_json_parser_build_string@@Base+0x1d0>
   1f25c:	ldr	r0, [fp, #-8]
   1f260:	ldr	r0, [r0]
   1f264:	bl	170a8 <flatcc_builder_start_string@@Base>
   1f268:	cmp	r0, #0
   1f26c:	bne	1f298 <flatcc_json_parser_build_string@@Base+0xcc>
   1f270:	ldr	r0, [fp, #-8]
   1f274:	ldr	r0, [r0]
   1f278:	ldr	r1, [sp, #12]
   1f27c:	ldr	r2, [fp, #-12]
   1f280:	ldr	r3, [sp, #12]
   1f284:	sub	r2, r2, r3
   1f288:	bl	16900 <flatcc_builder_append_string@@Base>
   1f28c:	movw	r1, #0
   1f290:	cmp	r1, r0
   1f294:	bne	1f29c <flatcc_json_parser_build_string@@Base+0xd0>
   1f298:	b	1f3b4 <flatcc_json_parser_build_string@@Base+0x1e8>
   1f29c:	b	1f2a0 <flatcc_json_parser_build_string@@Base+0xd4>
   1f2a0:	ldr	r0, [fp, #-12]
   1f2a4:	ldr	r1, [fp, #-16]
   1f2a8:	cmp	r0, r1
   1f2ac:	movw	r0, #0
   1f2b0:	str	r0, [sp, #8]
   1f2b4:	beq	1f2d0 <flatcc_json_parser_build_string@@Base+0x104>
   1f2b8:	ldr	r0, [fp, #-12]
   1f2bc:	ldrb	r0, [r0]
   1f2c0:	cmp	r0, #34	; 0x22
   1f2c4:	movw	r0, #0
   1f2c8:	movne	r0, #1
   1f2cc:	str	r0, [sp, #8]
   1f2d0:	ldr	r0, [sp, #8]
   1f2d4:	tst	r0, #1
   1f2d8:	beq	1f388 <flatcc_json_parser_build_string@@Base+0x1bc>
   1f2dc:	add	r3, sp, #16
   1f2e0:	ldr	r0, [fp, #-8]
   1f2e4:	ldr	r1, [fp, #-12]
   1f2e8:	ldr	r2, [fp, #-16]
   1f2ec:	bl	1c414 <flatcc_json_parser_string_escape@@Base>
   1f2f0:	add	r1, sp, #16
   1f2f4:	str	r0, [fp, #-12]
   1f2f8:	ldr	r0, [fp, #-8]
   1f2fc:	ldr	r0, [r0]
   1f300:	add	r1, r1, #1
   1f304:	ldrb	r2, [sp, #16]
   1f308:	bl	16900 <flatcc_builder_append_string@@Base>
   1f30c:	movw	r1, #0
   1f310:	cmp	r1, r0
   1f314:	bne	1f31c <flatcc_json_parser_build_string@@Base+0x150>
   1f318:	b	1f3b4 <flatcc_json_parser_build_string@@Base+0x1e8>
   1f31c:	ldr	r0, [fp, #-16]
   1f320:	ldr	r1, [fp, #-8]
   1f324:	ldr	r2, [fp, #-12]
   1f328:	str	r2, [sp, #12]
   1f32c:	ldr	r3, [fp, #-16]
   1f330:	str	r0, [sp, #4]
   1f334:	mov	r0, r1
   1f338:	mov	r1, r2
   1f33c:	mov	r2, r3
   1f340:	bl	1c114 <flatcc_json_parser_string_part@@Base>
   1f344:	str	r0, [fp, #-12]
   1f348:	ldr	r1, [sp, #4]
   1f34c:	cmp	r1, r0
   1f350:	beq	1f384 <flatcc_json_parser_build_string@@Base+0x1b8>
   1f354:	ldr	r0, [fp, #-8]
   1f358:	ldr	r0, [r0]
   1f35c:	ldr	r1, [sp, #12]
   1f360:	ldr	r2, [fp, #-12]
   1f364:	ldr	r3, [sp, #12]
   1f368:	sub	r2, r2, r3
   1f36c:	bl	16900 <flatcc_builder_append_string@@Base>
   1f370:	movw	r1, #0
   1f374:	cmp	r1, r0
   1f378:	bne	1f380 <flatcc_json_parser_build_string@@Base+0x1b4>
   1f37c:	b	1f3b4 <flatcc_json_parser_build_string@@Base+0x1e8>
   1f380:	b	1f384 <flatcc_json_parser_build_string@@Base+0x1b8>
   1f384:	b	1f2a0 <flatcc_json_parser_build_string@@Base+0xd4>
   1f388:	ldr	r0, [fp, #-8]
   1f38c:	ldr	r0, [r0]
   1f390:	bl	197c8 <flatcc_builder_end_string@@Base>
   1f394:	ldr	lr, [sp, #20]
   1f398:	str	r0, [lr]
   1f39c:	ldr	r0, [fp, #-8]
   1f3a0:	ldr	r1, [fp, #-12]
   1f3a4:	ldr	r2, [fp, #-16]
   1f3a8:	bl	1e008 <flatcc_json_parser_float@@Base+0x370>
   1f3ac:	str	r0, [fp, #-4]
   1f3b0:	b	1f3c8 <flatcc_json_parser_build_string@@Base+0x1fc>
   1f3b4:	ldr	r0, [sp, #20]
   1f3b8:	movw	r1, #0
   1f3bc:	str	r1, [r0]
   1f3c0:	ldr	r0, [fp, #-12]
   1f3c4:	str	r0, [fp, #-4]
   1f3c8:	ldr	r0, [fp, #-4]
   1f3cc:	mov	sp, fp
   1f3d0:	pop	{fp, pc}

0001f3d4 <flatcc_json_parser_prepare_unions@@Base>:
   1f3d4:	push	{fp, lr}
   1f3d8:	mov	fp, sp
   1f3dc:	sub	sp, sp, #32
   1f3e0:	ldr	ip, [fp, #8]
   1f3e4:	str	r0, [fp, #-8]
   1f3e8:	str	r1, [fp, #-12]
   1f3ec:	str	r2, [sp, #16]
   1f3f0:	str	r3, [sp, #12]
   1f3f4:	ldr	r0, [fp, #-8]
   1f3f8:	ldr	r0, [r0]
   1f3fc:	ldr	r1, [sp, #12]
   1f400:	sub	r1, r1, #1
   1f404:	movw	r2, #24
   1f408:	mul	r1, r1, r2
   1f40c:	add	r1, r1, #32
   1f410:	str	ip, [sp, #4]
   1f414:	bl	14f48 <flatcc_builder_enter_user_frame@@Base>
   1f418:	ldr	r1, [fp, #8]
   1f41c:	str	r0, [r1]
   1f420:	cmp	r0, #0
   1f424:	bne	1f444 <flatcc_json_parser_prepare_unions@@Base+0x70>
   1f428:	ldr	r0, [fp, #-8]
   1f42c:	ldr	r1, [fp, #-12]
   1f430:	ldr	r2, [sp, #16]
   1f434:	movw	r3, #33	; 0x21
   1f438:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1f43c:	str	r0, [fp, #-4]
   1f440:	b	1f470 <flatcc_json_parser_prepare_unions@@Base+0x9c>
   1f444:	ldr	r0, [fp, #-8]
   1f448:	ldr	r0, [r0]
   1f44c:	ldr	r1, [fp, #8]
   1f450:	ldr	r1, [r1]
   1f454:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   1f458:	str	r0, [sp, #8]
   1f45c:	ldr	r0, [sp, #12]
   1f460:	ldr	r1, [sp, #8]
   1f464:	str	r0, [r1]
   1f468:	ldr	r0, [fp, #-12]
   1f46c:	str	r0, [fp, #-4]
   1f470:	ldr	r0, [fp, #-4]
   1f474:	mov	sp, fp
   1f478:	pop	{fp, pc}

0001f47c <flatcc_json_parser_finalize_unions@@Base>:
   1f47c:	push	{fp, lr}
   1f480:	mov	fp, sp
   1f484:	sub	sp, sp, #24
   1f488:	str	r0, [fp, #-4]
   1f48c:	str	r1, [fp, #-8]
   1f490:	str	r2, [sp, #12]
   1f494:	str	r3, [sp, #8]
   1f498:	ldr	r0, [fp, #-4]
   1f49c:	ldr	r0, [r0]
   1f4a0:	ldr	r1, [sp, #8]
   1f4a4:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   1f4a8:	str	r0, [sp, #4]
   1f4ac:	ldr	r0, [sp, #4]
   1f4b0:	ldr	r0, [r0, #4]
   1f4b4:	cmp	r0, #0
   1f4b8:	beq	1f4d4 <flatcc_json_parser_finalize_unions@@Base+0x58>
   1f4bc:	ldr	r0, [fp, #-4]
   1f4c0:	ldr	r1, [fp, #-8]
   1f4c4:	ldr	r2, [sp, #12]
   1f4c8:	movw	r3, #27
   1f4cc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1f4d0:	str	r0, [fp, #-8]
   1f4d4:	ldr	r0, [fp, #-4]
   1f4d8:	ldr	r0, [r0]
   1f4dc:	ldr	r1, [sp, #8]
   1f4e0:	bl	150bc <flatcc_builder_exit_user_frame_at@@Base>
   1f4e4:	ldr	r1, [fp, #-8]
   1f4e8:	str	r0, [sp]
   1f4ec:	mov	r0, r1
   1f4f0:	mov	sp, fp
   1f4f4:	pop	{fp, pc}

0001f4f8 <flatcc_json_parser_union@@Base>:
   1f4f8:	push	{r4, sl, fp, lr}
   1f4fc:	add	fp, sp, #8
   1f500:	sub	sp, sp, #56	; 0x38
   1f504:	ldr	ip, [fp, #16]
   1f508:	ldr	lr, [fp, #12]
   1f50c:	ldr	r4, [fp, #8]
   1f510:	str	r0, [fp, #-16]
   1f514:	str	r1, [fp, #-20]	; 0xffffffec
   1f518:	str	r2, [fp, #-24]	; 0xffffffe8
   1f51c:	str	r3, [fp, #-28]	; 0xffffffe4
   1f520:	strh	r4, [fp, #-30]	; 0xffffffe2
   1f524:	ldr	r0, [fp, #-16]
   1f528:	ldr	r0, [r0]
   1f52c:	ldr	r1, [fp, #12]
   1f530:	str	ip, [sp, #12]
   1f534:	str	lr, [sp, #8]
   1f538:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   1f53c:	str	r0, [sp, #28]
   1f540:	ldr	r0, [sp, #28]
   1f544:	add	r0, r0, #8
   1f548:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f54c:	movw	r2, #24
   1f550:	mul	r1, r1, r2
   1f554:	add	r0, r0, r1
   1f558:	str	r0, [sp, #24]
   1f55c:	ldr	r0, [sp, #24]
   1f560:	ldr	r0, [r0]
   1f564:	movw	r1, #0
   1f568:	cmp	r0, r1
   1f56c:	beq	1f58c <flatcc_json_parser_union@@Base+0x94>
   1f570:	ldr	r0, [fp, #-16]
   1f574:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f578:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f57c:	movw	r3, #28
   1f580:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1f584:	str	r0, [fp, #-12]
   1f588:	b	1f6d8 <flatcc_json_parser_union@@Base+0x1e0>
   1f58c:	ldr	r0, [sp, #24]
   1f590:	ldrsb	r0, [r0, #12]
   1f594:	cmp	r0, #0
   1f598:	bne	1f5ec <flatcc_json_parser_union@@Base+0xf4>
   1f59c:	ldr	r0, [sp, #28]
   1f5a0:	ldr	r1, [r0, #4]
   1f5a4:	add	r1, r1, #1
   1f5a8:	str	r1, [r0, #4]
   1f5ac:	ldr	r0, [fp, #-16]
   1f5b0:	ldr	r0, [r0, #16]
   1f5b4:	ldr	r1, [sp, #24]
   1f5b8:	str	r0, [r1, #8]
   1f5bc:	ldr	r0, [fp, #-16]
   1f5c0:	ldr	r0, [r0, #4]
   1f5c4:	ldr	r1, [sp, #24]
   1f5c8:	str	r0, [r1, #4]
   1f5cc:	ldr	r0, [fp, #-16]
   1f5d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f5d4:	ldr	r2, [sp, #24]
   1f5d8:	str	r1, [r2]
   1f5dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f5e0:	bl	1d4e0 <flatcc_json_parser_generic_json@@Base>
   1f5e4:	str	r0, [fp, #-20]	; 0xffffffec
   1f5e8:	b	1f6d0 <flatcc_json_parser_union@@Base+0x1d8>
   1f5ec:	ldr	r0, [sp, #24]
   1f5f0:	ldrb	r0, [r0, #13]
   1f5f4:	strb	r0, [sp, #16]
   1f5f8:	ldr	r0, [sp, #24]
   1f5fc:	ldrb	r0, [r0, #13]
   1f600:	cmp	r0, #0
   1f604:	bne	1f624 <flatcc_json_parser_union@@Base+0x12c>
   1f608:	ldr	r0, [fp, #-16]
   1f60c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f610:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f614:	movw	r3, #25
   1f618:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1f61c:	str	r0, [fp, #-12]
   1f620:	b	1f6d8 <flatcc_json_parser_union@@Base+0x1e0>
   1f624:	ldr	r0, [sp, #28]
   1f628:	ldr	r1, [r0, #4]
   1f62c:	mvn	r2, #0
   1f630:	add	r1, r1, r2
   1f634:	str	r1, [r0, #4]
   1f638:	ldr	r0, [fp, #16]
   1f63c:	ldr	r1, [fp, #-16]
   1f640:	ldr	r2, [fp, #-20]	; 0xffffffec
   1f644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f648:	ldr	ip, [sp, #24]
   1f64c:	ldrb	ip, [ip, #13]
   1f650:	add	lr, sp, #16
   1f654:	add	lr, lr, #4
   1f658:	str	r0, [sp, #4]
   1f65c:	mov	r0, r1
   1f660:	mov	r1, r2
   1f664:	mov	r2, r3
   1f668:	and	r3, ip, #255	; 0xff
   1f66c:	str	lr, [sp]
   1f670:	ldr	ip, [sp, #4]
   1f674:	blx	ip
   1f678:	str	r0, [fp, #-20]	; 0xffffffec
   1f67c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f680:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f684:	cmp	r0, r1
   1f688:	beq	1f6cc <flatcc_json_parser_union@@Base+0x1d4>
   1f68c:	ldr	r0, [fp, #-16]
   1f690:	ldr	r0, [r0]
   1f694:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1f698:	ldr	r2, [sp, #16]
   1f69c:	ldr	r3, [sp, #20]
   1f6a0:	bl	18820 <flatcc_builder_table_add_union@@Base>
   1f6a4:	cmp	r0, #0
   1f6a8:	beq	1f6c8 <flatcc_json_parser_union@@Base+0x1d0>
   1f6ac:	ldr	r0, [fp, #-16]
   1f6b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f6b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f6b8:	movw	r3, #28
   1f6bc:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1f6c0:	str	r0, [fp, #-12]
   1f6c4:	b	1f6d8 <flatcc_json_parser_union@@Base+0x1e0>
   1f6c8:	b	1f6cc <flatcc_json_parser_union@@Base+0x1d4>
   1f6cc:	b	1f6d0 <flatcc_json_parser_union@@Base+0x1d8>
   1f6d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f6d4:	str	r0, [fp, #-12]
   1f6d8:	ldr	r0, [fp, #-12]
   1f6dc:	sub	sp, fp, #8
   1f6e0:	pop	{r4, sl, fp, pc}

0001f6e4 <flatcc_json_parser_union_type@@Base>:
   1f6e4:	push	{r4, r5, fp, lr}
   1f6e8:	add	fp, sp, #8
   1f6ec:	sub	sp, sp, #80	; 0x50
   1f6f0:	ldr	ip, [fp, #20]
   1f6f4:	ldr	lr, [fp, #16]
   1f6f8:	ldr	r4, [fp, #12]
   1f6fc:	ldr	r5, [fp, #8]
   1f700:	str	r0, [fp, #-16]
   1f704:	str	r1, [fp, #-20]	; 0xffffffec
   1f708:	str	r2, [fp, #-24]	; 0xffffffe8
   1f70c:	str	r3, [fp, #-28]	; 0xffffffe4
   1f710:	strh	r5, [fp, #-30]	; 0xffffffe2
   1f714:	ldr	r0, [fp, #-16]
   1f718:	ldr	r0, [r0]
   1f71c:	ldr	r1, [fp, #12]
   1f720:	str	r4, [sp, #24]
   1f724:	str	ip, [sp, #20]
   1f728:	str	lr, [sp, #16]
   1f72c:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   1f730:	str	r0, [fp, #-36]	; 0xffffffdc
   1f734:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f738:	add	r0, r0, #8
   1f73c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f740:	movw	r2, #24
   1f744:	mul	r1, r1, r2
   1f748:	add	r0, r0, r1
   1f74c:	str	r0, [fp, #-40]	; 0xffffffd8
   1f750:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f754:	ldrsb	r0, [r0, #12]
   1f758:	cmp	r0, #0
   1f75c:	beq	1f77c <flatcc_json_parser_union_type@@Base+0x98>
   1f760:	ldr	r0, [fp, #-16]
   1f764:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f768:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f76c:	movw	r3, #28
   1f770:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1f774:	str	r0, [fp, #-12]
   1f778:	b	1f970 <flatcc_json_parser_union_type@@Base+0x28c>
   1f77c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f780:	movw	r1, #1
   1f784:	strb	r1, [r0, #12]
   1f788:	ldr	r0, [fp, #-16]
   1f78c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f790:	str	r1, [sp, #36]	; 0x24
   1f794:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f798:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f79c:	add	r3, r3, #13
   1f7a0:	bl	1f988 <flatcc_json_parser_union_type@@Base+0x2a4>
   1f7a4:	str	r0, [fp, #-20]	; 0xffffffec
   1f7a8:	ldr	r0, [sp, #36]	; 0x24
   1f7ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f7b0:	cmp	r0, r1
   1f7b4:	bne	1f7dc <flatcc_json_parser_union_type@@Base+0xf8>
   1f7b8:	ldr	r0, [fp, #-16]
   1f7bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f7c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f7c4:	ldr	r3, [fp, #16]
   1f7c8:	ldr	ip, [fp, #-40]	; 0xffffffd8
   1f7cc:	add	ip, ip, #13
   1f7d0:	str	ip, [sp]
   1f7d4:	bl	1fa64 <flatcc_json_parser_union_type@@Base+0x380>
   1f7d8:	str	r0, [fp, #-20]	; 0xffffffec
   1f7dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f7e0:	ldr	r0, [r0]
   1f7e4:	movw	r1, #0
   1f7e8:	cmp	r0, r1
   1f7ec:	bne	1f824 <flatcc_json_parser_union_type@@Base+0x140>
   1f7f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f7f4:	ldrb	r0, [r0, #13]
   1f7f8:	cmp	r0, #0
   1f7fc:	movw	r0, #0
   1f800:	movne	r0, #1
   1f804:	and	r0, r0, #1
   1f808:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f80c:	ldr	r2, [r1, #4]
   1f810:	add	r0, r2, r0
   1f814:	str	r0, [r1, #4]
   1f818:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f81c:	str	r0, [fp, #-12]
   1f820:	b	1f970 <flatcc_json_parser_union_type@@Base+0x28c>
   1f824:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f828:	ldr	r0, [r0, #4]
   1f82c:	cmp	r0, #0
   1f830:	beq	1f838 <flatcc_json_parser_union_type@@Base+0x154>
   1f834:	b	1f858 <flatcc_json_parser_union_type@@Base+0x174>
   1f838:	ldr	r0, [pc, #316]	; 1f97c <flatcc_json_parser_union_type@@Base+0x298>
   1f83c:	add	r0, pc, r0
   1f840:	ldr	r1, [pc, #312]	; 1f980 <flatcc_json_parser_union_type@@Base+0x29c>
   1f844:	add	r1, pc, r1
   1f848:	ldr	r2, [pc, #308]	; 1f984 <flatcc_json_parser_union_type@@Base+0x2a0>
   1f84c:	add	r3, pc, r2
   1f850:	movw	r2, #965	; 0x3c5
   1f854:	bl	1298c <__assert_fail@plt>
   1f858:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f85c:	ldr	r1, [r0, #4]
   1f860:	mvn	r2, #0
   1f864:	add	r1, r1, r2
   1f868:	str	r1, [r0, #4]
   1f86c:	ldr	r0, [fp, #-16]
   1f870:	ldr	r0, [r0, #16]
   1f874:	str	r0, [sp, #32]
   1f878:	ldr	r0, [fp, #-16]
   1f87c:	ldr	r0, [r0, #4]
   1f880:	str	r0, [sp, #28]
   1f884:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f888:	ldr	r0, [r0, #8]
   1f88c:	ldr	r1, [fp, #-16]
   1f890:	str	r0, [r1, #16]
   1f894:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f898:	ldr	r0, [r0, #4]
   1f89c:	ldr	r1, [fp, #-16]
   1f8a0:	str	r0, [r1, #4]
   1f8a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f8a8:	ldrb	r0, [r0, #13]
   1f8ac:	strb	r0, [sp, #40]	; 0x28
   1f8b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f8b4:	ldr	r1, [fp, #20]
   1f8b8:	ldr	r2, [fp, #-16]
   1f8bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f8c0:	ldr	r3, [r3]
   1f8c4:	ldr	ip, [fp, #-24]	; 0xffffffe8
   1f8c8:	ldr	lr, [fp, #-40]	; 0xffffffd8
   1f8cc:	ldrb	lr, [lr, #13]
   1f8d0:	add	r4, sp, #40	; 0x28
   1f8d4:	add	r4, r4, #4
   1f8d8:	str	r0, [sp, #12]
   1f8dc:	mov	r0, r2
   1f8e0:	str	r1, [sp, #8]
   1f8e4:	mov	r1, r3
   1f8e8:	mov	r2, ip
   1f8ec:	and	r3, lr, #255	; 0xff
   1f8f0:	str	r4, [sp]
   1f8f4:	ldr	ip, [sp, #8]
   1f8f8:	blx	ip
   1f8fc:	ldr	r1, [sp, #12]
   1f900:	cmp	r1, r0
   1f904:	bne	1f914 <flatcc_json_parser_union_type@@Base+0x230>
   1f908:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f90c:	str	r0, [fp, #-12]
   1f910:	b	1f970 <flatcc_json_parser_union_type@@Base+0x28c>
   1f914:	ldr	r0, [fp, #-16]
   1f918:	ldr	r0, [r0]
   1f91c:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1f920:	ldr	r2, [sp, #40]	; 0x28
   1f924:	ldr	r3, [sp, #44]	; 0x2c
   1f928:	bl	18820 <flatcc_builder_table_add_union@@Base>
   1f92c:	cmp	r0, #0
   1f930:	beq	1f950 <flatcc_json_parser_union_type@@Base+0x26c>
   1f934:	ldr	r0, [fp, #-16]
   1f938:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f93c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f940:	movw	r3, #28
   1f944:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1f948:	str	r0, [fp, #-12]
   1f94c:	b	1f970 <flatcc_json_parser_union_type@@Base+0x28c>
   1f950:	ldr	r0, [sp, #32]
   1f954:	ldr	r1, [fp, #-16]
   1f958:	str	r0, [r1, #16]
   1f95c:	ldr	r0, [sp, #28]
   1f960:	ldr	r1, [fp, #-16]
   1f964:	str	r0, [r1, #4]
   1f968:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f96c:	str	r0, [fp, #-12]
   1f970:	ldr	r0, [fp, #-12]
   1f974:	sub	sp, fp, #8
   1f978:	pop	{r4, r5, fp, pc}
   1f97c:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1f980:	strdeq	r4, [r0], -fp
   1f984:	andeq	r4, r0, r4, asr r2
   1f988:	push	{r4, r5, fp, lr}
   1f98c:	add	fp, sp, #8
   1f990:	sub	sp, sp, #56	; 0x38
   1f994:	str	r0, [fp, #-16]
   1f998:	str	r1, [fp, #-20]	; 0xffffffec
   1f99c:	str	r2, [fp, #-24]	; 0xffffffe8
   1f9a0:	str	r3, [fp, #-28]	; 0xffffffe4
   1f9a4:	mov	r0, #0
   1f9a8:	str	r0, [sp, #28]
   1f9ac:	str	r0, [sp, #24]
   1f9b0:	movw	r0, #0
   1f9b4:	str	r0, [sp, #20]
   1f9b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f9bc:	str	r0, [sp, #16]
   1f9c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1f9c4:	movw	r1, #0
   1f9c8:	strb	r1, [r0]
   1f9cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f9d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f9d4:	cmp	r0, r1
   1f9d8:	bne	1f9e8 <flatcc_json_parser_union_type@@Base+0x304>
   1f9dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f9e0:	str	r0, [fp, #-12]
   1f9e4:	b	1fa58 <flatcc_json_parser_union_type@@Base+0x374>
   1f9e8:	ldr	r0, [fp, #-16]
   1f9ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f9f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f9f4:	add	r3, sp, #20
   1f9f8:	add	ip, sp, #24
   1f9fc:	str	ip, [sp]
   1fa00:	bl	1e784 <flatcc_json_parser_integer@@Base>
   1fa04:	str	r0, [fp, #-20]	; 0xffffffec
   1fa08:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fa0c:	ldr	r1, [sp, #16]
   1fa10:	cmp	r0, r1
   1fa14:	beq	1fa50 <flatcc_json_parser_union_type@@Base+0x36c>
   1fa18:	ldr	r0, [fp, #-16]
   1fa1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fa20:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fa24:	ldr	r3, [sp, #20]
   1fa28:	ldr	ip, [sp, #24]
   1fa2c:	ldr	lr, [sp, #28]
   1fa30:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1fa34:	mov	r5, sp
   1fa38:	str	r4, [r5, #8]
   1fa3c:	str	lr, [r5, #4]
   1fa40:	str	ip, [r5]
   1fa44:	bl	21a18 <flatcc_json_parser_struct_as_root@@Base+0x125c>
   1fa48:	str	r0, [fp, #-12]
   1fa4c:	b	1fa58 <flatcc_json_parser_union_type@@Base+0x374>
   1fa50:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fa54:	str	r0, [fp, #-12]
   1fa58:	ldr	r0, [fp, #-12]
   1fa5c:	sub	sp, fp, #8
   1fa60:	pop	{r4, r5, fp, pc}
   1fa64:	push	{r4, r5, r6, sl, fp, lr}
   1fa68:	add	fp, sp, #16
   1fa6c:	sub	sp, sp, #88	; 0x58
   1fa70:	ldr	ip, [fp, #8]
   1fa74:	str	r0, [fp, #-24]	; 0xffffffe8
   1fa78:	str	r1, [fp, #-28]	; 0xffffffe4
   1fa7c:	str	r2, [fp, #-32]	; 0xffffffe0
   1fa80:	str	r3, [fp, #-36]	; 0xffffffdc
   1fa84:	movw	r0, #0
   1fa88:	strb	r0, [fp, #-45]	; 0xffffffd3
   1fa8c:	movw	r1, #0
   1fa90:	str	r1, [sp, #36]	; 0x24
   1fa94:	ldr	r1, [fp, #8]
   1fa98:	strb	r0, [r1]
   1fa9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1faa0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1faa4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1faa8:	str	ip, [sp, #32]
   1faac:	bl	21ad0 <flatcc_json_parser_struct_as_root@@Base+0x1314>
   1fab0:	str	r0, [fp, #-28]	; 0xffffffe4
   1fab4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fab8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1fabc:	cmp	r0, r1
   1fac0:	bne	1fad0 <flatcc_json_parser_union_type@@Base+0x3ec>
   1fac4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fac8:	str	r0, [fp, #-20]	; 0xffffffec
   1facc:	b	1fc84 <flatcc_json_parser_union_type@@Base+0x5a0>
   1fad0:	b	1fad4 <flatcc_json_parser_union_type@@Base+0x3f0>
   1fad4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1fad8:	str	r0, [fp, #-40]	; 0xffffffd8
   1fadc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fae0:	ldr	r0, [r0]
   1fae4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1fae8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1faec:	str	r2, [fp, #-44]	; 0xffffffd4
   1faf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1faf4:	str	r0, [sp, #28]
   1faf8:	mov	r0, r1
   1fafc:	mov	r1, r2
   1fb00:	mov	r2, r3
   1fb04:	add	r3, sp, #44	; 0x2c
   1fb08:	add	ip, sp, #48	; 0x30
   1fb0c:	str	ip, [sp]
   1fb10:	add	ip, sp, #40	; 0x28
   1fb14:	str	ip, [sp, #4]
   1fb18:	ldr	ip, [sp, #28]
   1fb1c:	blx	ip
   1fb20:	str	r0, [fp, #-28]	; 0xffffffe4
   1fb24:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fb28:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1fb2c:	cmp	r0, r1
   1fb30:	bne	1fb40 <flatcc_json_parser_union_type@@Base+0x45c>
   1fb34:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fb38:	str	r0, [fp, #-20]	; 0xffffffec
   1fb3c:	b	1fc84 <flatcc_json_parser_union_type@@Base+0x5a0>
   1fb40:	b	1fb44 <flatcc_json_parser_union_type@@Base+0x460>
   1fb44:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fb48:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1fb4c:	cmp	r0, r1
   1fb50:	movw	r0, #0
   1fb54:	str	r0, [sp, #24]
   1fb58:	bne	1fb80 <flatcc_json_parser_union_type@@Base+0x49c>
   1fb5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fb60:	add	r1, r0, #4
   1fb64:	str	r1, [fp, #-40]	; 0xffffffd8
   1fb68:	ldr	r0, [r0, #4]
   1fb6c:	movw	r1, #0
   1fb70:	cmp	r0, r1
   1fb74:	movw	r0, #0
   1fb78:	movne	r0, #1
   1fb7c:	str	r0, [sp, #24]
   1fb80:	ldr	r0, [sp, #24]
   1fb84:	tst	r0, #1
   1fb88:	bne	1fadc <flatcc_json_parser_union_type@@Base+0x3f8>
   1fb8c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1fb90:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fb94:	cmp	r0, r1
   1fb98:	bne	1fbb8 <flatcc_json_parser_union_type@@Base+0x4d4>
   1fb9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1fba0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fba4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fba8:	movw	r3, #23
   1fbac:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1fbb0:	str	r0, [fp, #-20]	; 0xffffffec
   1fbb4:	b	1fc84 <flatcc_json_parser_union_type@@Base+0x5a0>
   1fbb8:	ldr	r0, [sp, #36]	; 0x24
   1fbbc:	add	r1, r0, #1
   1fbc0:	str	r1, [sp, #36]	; 0x24
   1fbc4:	cmp	r0, #0
   1fbc8:	beq	1fbf8 <flatcc_json_parser_union_type@@Base+0x514>
   1fbcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1fbd0:	ldr	r0, [r0, #12]
   1fbd4:	cmp	r0, #0
   1fbd8:	beq	1fbf8 <flatcc_json_parser_union_type@@Base+0x514>
   1fbdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1fbe0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fbe4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fbe8:	movw	r3, #14
   1fbec:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1fbf0:	str	r0, [fp, #-20]	; 0xffffffec
   1fbf4:	b	1fc84 <flatcc_json_parser_union_type@@Base+0x5a0>
   1fbf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fbfc:	mov	r1, r0
   1fc00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fc04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1fc08:	ldr	ip, [sp, #44]	; 0x2c
   1fc0c:	ldr	lr, [sp, #48]	; 0x30
   1fc10:	ldr	r4, [sp, #52]	; 0x34
   1fc14:	mov	r5, sp
   1fc18:	sub	r6, fp, #45	; 0x2d
   1fc1c:	str	r6, [r5, #8]
   1fc20:	str	r4, [r5, #4]
   1fc24:	str	lr, [r5]
   1fc28:	str	r0, [sp, #20]
   1fc2c:	mov	r0, r2
   1fc30:	str	r1, [sp, #16]
   1fc34:	mov	r1, r3
   1fc38:	ldr	r2, [sp, #20]
   1fc3c:	mov	r3, ip
   1fc40:	bl	21a18 <flatcc_json_parser_struct_as_root@@Base+0x125c>
   1fc44:	ldr	r1, [sp, #16]
   1fc48:	cmp	r1, r0
   1fc4c:	bne	1fc5c <flatcc_json_parser_union_type@@Base+0x578>
   1fc50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fc54:	str	r0, [fp, #-20]	; 0xffffffec
   1fc58:	b	1fc84 <flatcc_json_parser_union_type@@Base+0x5a0>
   1fc5c:	ldrb	r0, [fp, #-45]	; 0xffffffd3
   1fc60:	ldr	r1, [fp, #8]
   1fc64:	ldrb	r2, [r1]
   1fc68:	add	r0, r2, r0
   1fc6c:	strb	r0, [r1]
   1fc70:	ldr	r0, [sp, #40]	; 0x28
   1fc74:	cmp	r0, #0
   1fc78:	bne	1fad4 <flatcc_json_parser_union_type@@Base+0x3f0>
   1fc7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fc80:	str	r0, [fp, #-20]	; 0xffffffec
   1fc84:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fc88:	sub	sp, fp, #16
   1fc8c:	pop	{r4, r5, r6, sl, fp, pc}

0001fc90 <flatcc_json_parser_union_vector@@Base>:
   1fc90:	push	{r4, sl, fp, lr}
   1fc94:	add	fp, sp, #8
   1fc98:	sub	sp, sp, #56	; 0x38
   1fc9c:	ldr	ip, [fp, #16]
   1fca0:	ldr	lr, [fp, #12]
   1fca4:	ldr	r4, [fp, #8]
   1fca8:	str	r0, [fp, #-16]
   1fcac:	str	r1, [fp, #-20]	; 0xffffffec
   1fcb0:	str	r2, [fp, #-24]	; 0xffffffe8
   1fcb4:	str	r3, [fp, #-28]	; 0xffffffe4
   1fcb8:	strh	r4, [fp, #-30]	; 0xffffffe2
   1fcbc:	ldr	r0, [fp, #-16]
   1fcc0:	ldr	r0, [r0]
   1fcc4:	ldr	r1, [fp, #12]
   1fcc8:	str	ip, [sp, #20]
   1fccc:	str	lr, [sp, #16]
   1fcd0:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   1fcd4:	str	r0, [sp, #28]
   1fcd8:	ldr	r0, [sp, #28]
   1fcdc:	add	r0, r0, #8
   1fce0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fce4:	movw	r2, #24
   1fce8:	mul	r1, r1, r2
   1fcec:	add	r0, r0, r1
   1fcf0:	str	r0, [sp, #24]
   1fcf4:	ldr	r0, [sp, #24]
   1fcf8:	ldr	r0, [r0]
   1fcfc:	movw	r1, #0
   1fd00:	cmp	r0, r1
   1fd04:	beq	1fd24 <flatcc_json_parser_union_vector@@Base+0x94>
   1fd08:	ldr	r0, [fp, #-16]
   1fd0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fd10:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fd14:	movw	r3, #28
   1fd18:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1fd1c:	str	r0, [fp, #-12]
   1fd20:	b	1fddc <flatcc_json_parser_union_vector@@Base+0x14c>
   1fd24:	ldr	r0, [sp, #24]
   1fd28:	ldrsb	r0, [r0, #12]
   1fd2c:	cmp	r0, #0
   1fd30:	bne	1fd84 <flatcc_json_parser_union_vector@@Base+0xf4>
   1fd34:	ldr	r0, [sp, #28]
   1fd38:	ldr	r1, [r0, #4]
   1fd3c:	add	r1, r1, #1
   1fd40:	str	r1, [r0, #4]
   1fd44:	ldr	r0, [fp, #-16]
   1fd48:	ldr	r0, [r0, #16]
   1fd4c:	ldr	r1, [sp, #24]
   1fd50:	str	r0, [r1, #8]
   1fd54:	ldr	r0, [fp, #-16]
   1fd58:	ldr	r0, [r0, #4]
   1fd5c:	ldr	r1, [sp, #24]
   1fd60:	str	r0, [r1, #4]
   1fd64:	ldr	r0, [fp, #-16]
   1fd68:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fd6c:	ldr	r2, [sp, #24]
   1fd70:	str	r1, [r2]
   1fd74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fd78:	bl	1d4e0 <flatcc_json_parser_generic_json@@Base>
   1fd7c:	str	r0, [fp, #-20]	; 0xffffffec
   1fd80:	b	1fdd4 <flatcc_json_parser_union_vector@@Base+0x144>
   1fd84:	ldr	r0, [sp, #28]
   1fd88:	ldr	r1, [r0, #4]
   1fd8c:	mvn	r2, #0
   1fd90:	add	r1, r1, r2
   1fd94:	str	r1, [r0, #4]
   1fd98:	ldr	r0, [fp, #-16]
   1fd9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fda0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fda4:	ldr	r3, [sp, #24]
   1fda8:	ldr	r3, [r3, #20]
   1fdac:	ldr	ip, [sp, #24]
   1fdb0:	ldr	ip, [ip, #16]
   1fdb4:	ldrh	lr, [fp, #-30]	; 0xffffffe2
   1fdb8:	ldr	r4, [fp, #16]
   1fdbc:	str	ip, [sp]
   1fdc0:	uxth	ip, lr
   1fdc4:	str	ip, [sp, #4]
   1fdc8:	str	r4, [sp, #8]
   1fdcc:	bl	1fde8 <flatcc_json_parser_union_vector@@Base+0x158>
   1fdd0:	str	r0, [fp, #-20]	; 0xffffffec
   1fdd4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fdd8:	str	r0, [fp, #-12]
   1fddc:	ldr	r0, [fp, #-12]
   1fde0:	sub	sp, fp, #8
   1fde4:	pop	{r4, sl, fp, pc}
   1fde8:	push	{r4, sl, fp, lr}
   1fdec:	add	fp, sp, #8
   1fdf0:	sub	sp, sp, #64	; 0x40
   1fdf4:	ldr	ip, [fp, #16]
   1fdf8:	ldr	lr, [fp, #12]
   1fdfc:	ldr	r4, [fp, #8]
   1fe00:	str	r0, [fp, #-16]
   1fe04:	str	r1, [fp, #-20]	; 0xffffffec
   1fe08:	str	r2, [fp, #-24]	; 0xffffffe8
   1fe0c:	str	r3, [fp, #-28]	; 0xffffffe4
   1fe10:	strh	lr, [fp, #-30]	; 0xffffffe2
   1fe14:	movw	r0, #0
   1fe18:	str	r0, [sp, #36]	; 0x24
   1fe1c:	ldr	r0, [fp, #-16]
   1fe20:	ldr	r0, [r0]
   1fe24:	str	r4, [sp, #16]
   1fe28:	str	ip, [sp, #12]
   1fe2c:	bl	16ef4 <flatcc_builder_start_offset_vector@@Base>
   1fe30:	cmp	r0, #0
   1fe34:	beq	1fe3c <flatcc_json_parser_union_vector@@Base+0x1ac>
   1fe38:	b	1fff8 <flatcc_json_parser_union_vector@@Base+0x368>
   1fe3c:	ldr	r0, [fp, #-16]
   1fe40:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fe44:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fe48:	add	r3, sp, #24
   1fe4c:	bl	204a8 <flatcc_json_parser_union_type_vector@@Base+0x48c>
   1fe50:	str	r0, [fp, #-20]	; 0xffffffec
   1fe54:	movw	r0, #0
   1fe58:	str	r0, [sp, #20]
   1fe5c:	ldr	r0, [sp, #24]
   1fe60:	cmp	r0, #0
   1fe64:	beq	1ff5c <flatcc_json_parser_union_vector@@Base+0x2cc>
   1fe68:	ldr	r0, [sp, #20]
   1fe6c:	ldr	r1, [fp, #8]
   1fe70:	cmp	r0, r1
   1fe74:	bne	1fe94 <flatcc_json_parser_union_vector@@Base+0x204>
   1fe78:	ldr	r0, [fp, #-16]
   1fe7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fe80:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fe84:	movw	r3, #30
   1fe88:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1fe8c:	str	r0, [fp, #-12]
   1fe90:	b	20010 <flatcc_json_parser_union_vector@@Base+0x380>
   1fe94:	ldr	r0, [fp, #-16]
   1fe98:	ldr	r0, [r0]
   1fe9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fea0:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   1fea4:	str	r0, [sp, #28]
   1fea8:	ldr	r0, [fp, #16]
   1feac:	ldr	r1, [fp, #-16]
   1feb0:	ldr	lr, [fp, #-20]	; 0xffffffec
   1feb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1feb8:	ldr	r3, [sp, #28]
   1febc:	ldr	ip, [sp, #20]
   1fec0:	add	r3, r3, ip
   1fec4:	str	r0, [sp, #8]
   1fec8:	mov	r0, r1
   1fecc:	mov	r1, lr
   1fed0:	ldrb	r3, [r3]
   1fed4:	add	ip, sp, #36	; 0x24
   1fed8:	str	ip, [sp]
   1fedc:	ldr	ip, [sp, #8]
   1fee0:	blx	ip
   1fee4:	str	r0, [fp, #-20]	; 0xffffffec
   1fee8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1feec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1fef0:	cmp	r0, r1
   1fef4:	bne	1ff04 <flatcc_json_parser_union_vector@@Base+0x274>
   1fef8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fefc:	str	r0, [fp, #-12]
   1ff00:	b	20010 <flatcc_json_parser_union_vector@@Base+0x380>
   1ff04:	ldr	r0, [fp, #-16]
   1ff08:	ldr	r0, [r0]
   1ff0c:	movw	r1, #1
   1ff10:	bl	16688 <flatcc_builder_extend_offset_vector@@Base>
   1ff14:	str	r0, [sp, #32]
   1ff18:	movw	r1, #0
   1ff1c:	cmp	r0, r1
   1ff20:	bne	1ff28 <flatcc_json_parser_union_vector@@Base+0x298>
   1ff24:	b	1fff8 <flatcc_json_parser_union_vector@@Base+0x368>
   1ff28:	ldr	r0, [sp, #36]	; 0x24
   1ff2c:	ldr	r1, [sp, #32]
   1ff30:	str	r0, [r1]
   1ff34:	ldr	r0, [fp, #-16]
   1ff38:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ff3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ff40:	add	r3, sp, #24
   1ff44:	bl	1e4bc <flatcc_json_parser_float@@Base+0x824>
   1ff48:	str	r0, [fp, #-20]	; 0xffffffec
   1ff4c:	ldr	r0, [sp, #20]
   1ff50:	add	r0, r0, #1
   1ff54:	str	r0, [sp, #20]
   1ff58:	b	1fe5c <flatcc_json_parser_union_vector@@Base+0x1cc>
   1ff5c:	ldr	r0, [sp, #20]
   1ff60:	ldr	r1, [fp, #8]
   1ff64:	cmp	r0, r1
   1ff68:	beq	1ff88 <flatcc_json_parser_union_vector@@Base+0x2f8>
   1ff6c:	ldr	r0, [fp, #-16]
   1ff70:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ff74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ff78:	movw	r3, #30
   1ff7c:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   1ff80:	str	r0, [fp, #-12]
   1ff84:	b	20010 <flatcc_json_parser_union_vector@@Base+0x380>
   1ff88:	ldr	r0, [fp, #-16]
   1ff8c:	ldr	r0, [r0]
   1ff90:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ff94:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   1ff98:	str	r0, [sp, #28]
   1ff9c:	ldr	r0, [fp, #-16]
   1ffa0:	ldr	r0, [r0]
   1ffa4:	ldr	r1, [sp, #28]
   1ffa8:	bl	1873c <flatcc_builder_end_offset_vector_for_unions@@Base>
   1ffac:	str	r0, [sp, #36]	; 0x24
   1ffb0:	cmp	r0, #0
   1ffb4:	bne	1ffbc <flatcc_json_parser_union_vector@@Base+0x32c>
   1ffb8:	b	1fff8 <flatcc_json_parser_union_vector@@Base+0x368>
   1ffbc:	ldr	r0, [fp, #-16]
   1ffc0:	ldr	r0, [r0]
   1ffc4:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1ffc8:	bl	18a10 <flatcc_builder_table_add_offset@@Base>
   1ffcc:	str	r0, [sp, #32]
   1ffd0:	movw	r1, #0
   1ffd4:	cmp	r0, r1
   1ffd8:	bne	1ffe0 <flatcc_json_parser_union_vector@@Base+0x350>
   1ffdc:	b	1fff8 <flatcc_json_parser_union_vector@@Base+0x368>
   1ffe0:	ldr	r0, [sp, #36]	; 0x24
   1ffe4:	ldr	r1, [sp, #32]
   1ffe8:	str	r0, [r1]
   1ffec:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fff0:	str	r0, [fp, #-12]
   1fff4:	b	20010 <flatcc_json_parser_union_vector@@Base+0x380>
   1fff8:	ldr	r0, [fp, #-16]
   1fffc:	ldr	r1, [fp, #-20]	; 0xffffffec
   20000:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20004:	movw	r3, #33	; 0x21
   20008:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   2000c:	str	r0, [fp, #-12]
   20010:	ldr	r0, [fp, #-12]
   20014:	sub	sp, fp, #8
   20018:	pop	{r4, sl, fp, pc}

0002001c <flatcc_json_parser_union_type_vector@@Base>:
   2001c:	push	{r4, r5, r6, sl, fp, lr}
   20020:	add	fp, sp, #16
   20024:	sub	sp, sp, #128	; 0x80
   20028:	ldr	ip, [fp, #24]
   2002c:	ldr	lr, [fp, #20]
   20030:	ldr	r4, [fp, #16]
   20034:	ldr	r5, [fp, #12]
   20038:	ldr	r6, [fp, #8]
   2003c:	str	r0, [fp, #-24]	; 0xffffffe8
   20040:	str	r1, [fp, #-28]	; 0xffffffe4
   20044:	str	r2, [fp, #-32]	; 0xffffffe0
   20048:	str	r3, [fp, #-36]	; 0xffffffdc
   2004c:	strh	r6, [fp, #-38]	; 0xffffffda
   20050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20054:	ldr	r0, [r0]
   20058:	ldr	r1, [fp, #12]
   2005c:	str	ip, [sp, #44]	; 0x2c
   20060:	str	lr, [sp, #40]	; 0x28
   20064:	str	r4, [sp, #36]	; 0x24
   20068:	str	r5, [sp, #32]
   2006c:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   20070:	str	r0, [fp, #-44]	; 0xffffffd4
   20074:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20078:	add	r0, r0, #8
   2007c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20080:	movw	r2, #24
   20084:	mul	r1, r1, r2
   20088:	add	r0, r0, r1
   2008c:	str	r0, [fp, #-48]	; 0xffffffd0
   20090:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20094:	ldrsb	r0, [r0, #12]
   20098:	cmp	r0, #0
   2009c:	beq	200bc <flatcc_json_parser_union_type_vector@@Base+0xa0>
   200a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   200a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   200a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   200ac:	movw	r3, #28
   200b0:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   200b4:	str	r0, [fp, #-20]	; 0xffffffec
   200b8:	b	20490 <flatcc_json_parser_union_type_vector@@Base+0x474>
   200bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   200c0:	movw	r1, #1
   200c4:	strb	r1, [r0, #12]
   200c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   200cc:	ldr	r0, [r0]
   200d0:	movw	r1, #1
   200d4:	movw	r2, #1
   200d8:	uxth	r2, r2
   200dc:	mvn	r3, #0
   200e0:	bl	16e14 <flatcc_builder_start_vector@@Base>
   200e4:	cmp	r0, #0
   200e8:	beq	200f0 <flatcc_json_parser_union_type_vector@@Base+0xd4>
   200ec:	b	20478 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   200f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   200f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   200f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   200fc:	sub	r3, fp, #64	; 0x40
   20100:	bl	204a8 <flatcc_json_parser_union_type_vector@@Base+0x48c>
   20104:	str	r0, [fp, #-28]	; 0xffffffe4
   20108:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2010c:	cmp	r0, #0
   20110:	beq	20230 <flatcc_json_parser_union_type_vector@@Base+0x214>
   20114:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20118:	ldr	r0, [r0]
   2011c:	movw	r1, #1
   20120:	bl	16318 <flatcc_builder_extend_vector@@Base>
   20124:	str	r0, [sp, #72]	; 0x48
   20128:	movw	r1, #0
   2012c:	cmp	r0, r1
   20130:	bne	20138 <flatcc_json_parser_union_type_vector@@Base+0x11c>
   20134:	b	20478 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   20138:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2013c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20140:	str	r1, [fp, #-52]	; 0xffffffcc
   20144:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20148:	sub	r3, fp, #65	; 0x41
   2014c:	bl	1f988 <flatcc_json_parser_union_type@@Base+0x2a4>
   20150:	str	r0, [fp, #-28]	; 0xffffffe4
   20154:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20158:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2015c:	cmp	r0, r1
   20160:	bne	201b0 <flatcc_json_parser_union_type_vector@@Base+0x194>
   20164:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20168:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2016c:	str	r1, [fp, #-52]	; 0xffffffcc
   20170:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20174:	ldr	r3, [fp, #16]
   20178:	sub	ip, fp, #65	; 0x41
   2017c:	str	ip, [sp]
   20180:	bl	1fa64 <flatcc_json_parser_union_type@@Base+0x380>
   20184:	str	r0, [fp, #-28]	; 0xffffffe4
   20188:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2018c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   20190:	cmp	r0, r1
   20194:	beq	201a8 <flatcc_json_parser_union_type_vector@@Base+0x18c>
   20198:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2019c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   201a0:	cmp	r0, r1
   201a4:	bne	201ac <flatcc_json_parser_union_type_vector@@Base+0x190>
   201a8:	b	20478 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   201ac:	b	201b0 <flatcc_json_parser_union_type_vector@@Base+0x194>
   201b0:	ldr	r0, [fp, #24]
   201b4:	ldrb	r1, [fp, #-65]	; 0xffffffbf
   201b8:	str	r0, [sp, #28]
   201bc:	mov	r0, r1
   201c0:	ldr	r1, [sp, #28]
   201c4:	blx	r1
   201c8:	cmp	r0, #0
   201cc:	bne	20208 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   201d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   201d4:	ldr	r0, [r0, #8]
   201d8:	and	r0, r0, #1
   201dc:	cmp	r0, #0
   201e0:	bne	20200 <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   201e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   201e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   201ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   201f0:	movw	r3, #15
   201f4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   201f8:	str	r0, [fp, #-20]	; 0xffffffec
   201fc:	b	20490 <flatcc_json_parser_union_type_vector@@Base+0x474>
   20200:	movw	r0, #0
   20204:	strb	r0, [fp, #-65]	; 0xffffffbf
   20208:	ldr	r0, [sp, #72]	; 0x48
   2020c:	ldrb	r1, [fp, #-65]	; 0xffffffbf
   20210:	bl	2058c <flatcc_json_parser_union_type_vector@@Base+0x570>
   20214:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20218:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2021c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20220:	sub	r3, fp, #64	; 0x40
   20224:	bl	1e4bc <flatcc_json_parser_float@@Base+0x824>
   20228:	str	r0, [fp, #-28]	; 0xffffffe4
   2022c:	b	20108 <flatcc_json_parser_union_type_vector@@Base+0xec>
   20230:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20234:	ldr	r0, [r0]
   20238:	bl	183dc <flatcc_builder_vector_count@@Base>
   2023c:	str	r0, [sp, #48]	; 0x30
   20240:	ldr	r0, [sp, #48]	; 0x30
   20244:	ldr	lr, [fp, #-48]	; 0xffffffd0
   20248:	str	r0, [lr, #16]
   2024c:	ldr	r0, [sp, #48]	; 0x30
   20250:	mov	lr, r0
   20254:	str	r0, [sp, #56]	; 0x38
   20258:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2025c:	ldr	r0, [r0]
   20260:	ldr	r1, [sp, #56]	; 0x38
   20264:	str	lr, [sp, #24]
   20268:	bl	14f48 <flatcc_builder_enter_user_frame@@Base>
   2026c:	str	r0, [sp, #52]	; 0x34
   20270:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20274:	ldr	r0, [r0]
   20278:	ldr	r1, [sp, #52]	; 0x34
   2027c:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   20280:	str	r0, [sp, #60]	; 0x3c
   20284:	ldr	r0, [sp, #60]	; 0x3c
   20288:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2028c:	ldr	r1, [r1]
   20290:	str	r0, [sp, #20]
   20294:	mov	r0, r1
   20298:	bl	183f8 <flatcc_builder_vector_edit@@Base>
   2029c:	ldr	r2, [sp, #56]	; 0x38
   202a0:	ldr	r1, [sp, #20]
   202a4:	str	r0, [sp, #16]
   202a8:	mov	r0, r1
   202ac:	ldr	r1, [sp, #16]
   202b0:	bl	128d8 <memcpy@plt>
   202b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   202b8:	ldr	r0, [r0]
   202bc:	bl	18308 <flatcc_builder_end_vector@@Base>
   202c0:	str	r0, [sp, #68]	; 0x44
   202c4:	cmp	r0, #0
   202c8:	bne	202d0 <flatcc_json_parser_union_type_vector@@Base+0x2b4>
   202cc:	b	20478 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   202d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   202d4:	ldr	r0, [r0]
   202d8:	ldrh	r1, [fp, #-38]	; 0xffffffda
   202dc:	sub	r1, r1, #1
   202e0:	bl	18a10 <flatcc_builder_table_add_offset@@Base>
   202e4:	str	r0, [sp, #64]	; 0x40
   202e8:	movw	r1, #0
   202ec:	cmp	r0, r1
   202f0:	bne	202f8 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   202f4:	b	20478 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   202f8:	ldr	r0, [sp, #68]	; 0x44
   202fc:	ldr	r1, [sp, #64]	; 0x40
   20300:	str	r0, [r1]
   20304:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20308:	ldr	r0, [r0]
   2030c:	ldr	r1, [fp, #12]
   20310:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base>
   20314:	str	r0, [fp, #-44]	; 0xffffffd4
   20318:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2031c:	add	r0, r0, #8
   20320:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20324:	movw	lr, #24
   20328:	mul	r1, r1, lr
   2032c:	add	r0, r0, r1
   20330:	str	r0, [fp, #-48]	; 0xffffffd0
   20334:	ldr	r0, [sp, #52]	; 0x34
   20338:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2033c:	str	r0, [r1, #20]
   20340:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20344:	ldr	r0, [r0]
   20348:	movw	r1, #0
   2034c:	cmp	r0, r1
   20350:	bne	20370 <flatcc_json_parser_union_type_vector@@Base+0x354>
   20354:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20358:	ldr	r1, [r0, #4]
   2035c:	add	r1, r1, #1
   20360:	str	r1, [r0, #4]
   20364:	ldr	r0, [fp, #-28]	; 0xffffffe4
   20368:	str	r0, [fp, #-20]	; 0xffffffec
   2036c:	b	20490 <flatcc_json_parser_union_type_vector@@Base+0x474>
   20370:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20374:	ldr	r0, [r0, #4]
   20378:	cmp	r0, #0
   2037c:	beq	20384 <flatcc_json_parser_union_type_vector@@Base+0x368>
   20380:	b	203a4 <flatcc_json_parser_union_type_vector@@Base+0x388>
   20384:	ldr	r0, [pc, #272]	; 2049c <flatcc_json_parser_union_type_vector@@Base+0x480>
   20388:	add	r0, pc, r0
   2038c:	ldr	r1, [pc, #268]	; 204a0 <flatcc_json_parser_union_type_vector@@Base+0x484>
   20390:	add	r1, pc, r1
   20394:	ldr	r2, [pc, #264]	; 204a4 <flatcc_json_parser_union_type_vector@@Base+0x488>
   20398:	add	r3, pc, r2
   2039c:	movw	r2, #1122	; 0x462
   203a0:	bl	1298c <__assert_fail@plt>
   203a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   203a8:	ldr	r1, [r0, #4]
   203ac:	mvn	r2, #0
   203b0:	add	r1, r1, r2
   203b4:	str	r1, [r0, #4]
   203b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   203bc:	ldr	r0, [r0, #16]
   203c0:	str	r0, [fp, #-56]	; 0xffffffc8
   203c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   203c8:	ldr	r0, [r0, #4]
   203cc:	str	r0, [fp, #-60]	; 0xffffffc4
   203d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   203d4:	ldr	r0, [r0, #8]
   203d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   203dc:	str	r0, [r1, #16]
   203e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   203e4:	ldr	r0, [r0, #4]
   203e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   203ec:	str	r0, [r1, #4]
   203f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   203f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   203f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   203fc:	ldr	r2, [r2]
   20400:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20404:	ldr	ip, [sp, #52]	; 0x34
   20408:	ldr	lr, [sp, #48]	; 0x30
   2040c:	ldrh	r4, [fp, #-38]	; 0xffffffda
   20410:	ldr	r5, [fp, #20]
   20414:	str	r0, [sp, #12]
   20418:	mov	r0, r1
   2041c:	mov	r1, r2
   20420:	mov	r2, r3
   20424:	mov	r3, ip
   20428:	str	lr, [sp]
   2042c:	uxth	ip, r4
   20430:	str	ip, [sp, #4]
   20434:	str	r5, [sp, #8]
   20438:	bl	1fde8 <flatcc_json_parser_union_vector@@Base+0x158>
   2043c:	ldr	r1, [sp, #12]
   20440:	cmp	r1, r0
   20444:	bne	20454 <flatcc_json_parser_union_type_vector@@Base+0x438>
   20448:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2044c:	str	r0, [fp, #-20]	; 0xffffffec
   20450:	b	20490 <flatcc_json_parser_union_type_vector@@Base+0x474>
   20454:	ldr	r0, [fp, #-56]	; 0xffffffc8
   20458:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2045c:	str	r0, [r1, #16]
   20460:	ldr	r0, [fp, #-60]	; 0xffffffc4
   20464:	ldr	r1, [fp, #-24]	; 0xffffffe8
   20468:	str	r0, [r1, #4]
   2046c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   20470:	str	r0, [fp, #-20]	; 0xffffffec
   20474:	b	20490 <flatcc_json_parser_union_type_vector@@Base+0x474>
   20478:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2047c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20480:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20484:	movw	r3, #33	; 0x21
   20488:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   2048c:	str	r0, [fp, #-20]	; 0xffffffec
   20490:	ldr	r0, [fp, #-20]	; 0xffffffec
   20494:	sub	sp, fp, #16
   20498:	pop	{r4, r5, r6, sl, fp, pc}
   2049c:	andeq	r3, r0, r8, lsr #13
   204a0:	andeq	r3, r0, pc, lsr #13
   204a4:	ldrdeq	r3, [r0], -r4
   204a8:	push	{fp, lr}
   204ac:	mov	fp, sp
   204b0:	sub	sp, sp, #24
   204b4:	str	r0, [fp, #-8]
   204b8:	str	r1, [sp, #12]
   204bc:	str	r2, [sp, #8]
   204c0:	str	r3, [sp, #4]
   204c4:	ldr	r0, [sp, #12]
   204c8:	ldr	r1, [sp, #8]
   204cc:	cmp	r0, r1
   204d0:	beq	204e4 <flatcc_json_parser_union_type_vector@@Base+0x4c8>
   204d4:	ldr	r0, [sp, #12]
   204d8:	ldrb	r0, [r0]
   204dc:	cmp	r0, #91	; 0x5b
   204e0:	beq	2050c <flatcc_json_parser_union_type_vector@@Base+0x4f0>
   204e4:	ldr	r0, [sp, #4]
   204e8:	movw	r1, #0
   204ec:	str	r1, [r0]
   204f0:	ldr	r0, [fp, #-8]
   204f4:	ldr	r1, [sp, #12]
   204f8:	ldr	r2, [sp, #8]
   204fc:	movw	r3, #22
   20500:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   20504:	str	r0, [fp, #-4]
   20508:	b	20580 <flatcc_json_parser_union_type_vector@@Base+0x564>
   2050c:	ldr	r0, [fp, #-8]
   20510:	ldr	r1, [sp, #12]
   20514:	add	r1, r1, #1
   20518:	ldr	r2, [sp, #8]
   2051c:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   20520:	str	r0, [sp, #12]
   20524:	ldr	r0, [sp, #12]
   20528:	ldr	r1, [sp, #8]
   2052c:	cmp	r0, r1
   20530:	beq	2056c <flatcc_json_parser_union_type_vector@@Base+0x550>
   20534:	ldr	r0, [sp, #12]
   20538:	ldrb	r0, [r0]
   2053c:	cmp	r0, #93	; 0x5d
   20540:	bne	2056c <flatcc_json_parser_union_type_vector@@Base+0x550>
   20544:	ldr	r0, [sp, #4]
   20548:	movw	r1, #0
   2054c:	str	r1, [r0]
   20550:	ldr	r0, [fp, #-8]
   20554:	ldr	r1, [sp, #12]
   20558:	add	r1, r1, #1
   2055c:	ldr	r2, [sp, #8]
   20560:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   20564:	str	r0, [fp, #-4]
   20568:	b	20580 <flatcc_json_parser_union_type_vector@@Base+0x564>
   2056c:	ldr	r0, [sp, #4]
   20570:	movw	r1, #1
   20574:	str	r1, [r0]
   20578:	ldr	r0, [sp, #12]
   2057c:	str	r0, [fp, #-4]
   20580:	ldr	r0, [fp, #-4]
   20584:	mov	sp, fp
   20588:	pop	{fp, pc}
   2058c:	push	{fp, lr}
   20590:	mov	fp, sp
   20594:	sub	sp, sp, #8
   20598:	str	r0, [sp, #4]
   2059c:	strb	r1, [sp, #3]
   205a0:	ldrb	r0, [sp, #3]
   205a4:	bl	21b2c <flatcc_json_parser_struct_as_root@@Base+0x1370>
   205a8:	ldr	r1, [sp, #4]
   205ac:	strb	r0, [r1]
   205b0:	mov	sp, fp
   205b4:	pop	{fp, pc}

000205b8 <flatcc_json_parser_table_as_root@@Base>:
   205b8:	push	{r4, sl, fp, lr}
   205bc:	add	fp, sp, #8
   205c0:	sub	sp, sp, #104	; 0x68
   205c4:	ldr	ip, [fp, #16]
   205c8:	ldr	lr, [fp, #12]
   205cc:	ldr	r4, [fp, #8]
   205d0:	str	r0, [fp, #-16]
   205d4:	str	r1, [fp, #-20]	; 0xffffffec
   205d8:	str	r2, [fp, #-24]	; 0xffffffe8
   205dc:	str	r3, [fp, #-28]	; 0xffffffe4
   205e0:	ldr	r0, [fp, #8]
   205e4:	and	r0, r0, #4
   205e8:	cmp	r0, #0
   205ec:	movw	r0, #0
   205f0:	movne	r0, #1
   205f4:	tst	r0, #1
   205f8:	movw	r0, #2
   205fc:	moveq	r0, #0
   20600:	str	r0, [sp, #32]
   20604:	ldr	r0, [fp, #-20]	; 0xffffffec
   20608:	movw	r1, #0
   2060c:	cmp	r0, r1
   20610:	str	r4, [sp, #28]
   20614:	str	lr, [sp, #24]
   20618:	str	ip, [sp, #20]
   2061c:	beq	2062c <flatcc_json_parser_table_as_root@@Base+0x74>
   20620:	ldr	r0, [fp, #-20]	; 0xffffffec
   20624:	str	r0, [sp, #16]
   20628:	b	20638 <flatcc_json_parser_table_as_root@@Base+0x80>
   2062c:	add	r0, sp, #40	; 0x28
   20630:	str	r0, [sp, #16]
   20634:	b	20638 <flatcc_json_parser_table_as_root@@Base+0x80>
   20638:	ldr	r0, [sp, #16]
   2063c:	str	r0, [fp, #-20]	; 0xffffffec
   20640:	ldr	r0, [fp, #-20]	; 0xffffffec
   20644:	ldr	r1, [fp, #-16]
   20648:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2064c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20650:	ldr	ip, [fp, #-28]	; 0xffffffe4
   20654:	add	r3, r3, ip
   20658:	ldr	ip, [fp, #8]
   2065c:	str	ip, [sp]
   20660:	bl	20728 <flatcc_json_parser_table_as_root@@Base+0x170>
   20664:	ldr	r0, [fp, #-16]
   20668:	ldr	r1, [fp, #12]
   2066c:	ldr	r3, [sp, #32]
   20670:	movw	r2, #0
   20674:	uxth	r2, r2
   20678:	bl	15b54 <flatcc_builder_start_buffer@@Base>
   2067c:	cmp	r0, #0
   20680:	beq	20690 <flatcc_json_parser_table_as_root@@Base+0xd8>
   20684:	mvn	r0, #0
   20688:	str	r0, [fp, #-12]
   2068c:	b	2071c <flatcc_json_parser_table_as_root@@Base+0x164>
   20690:	ldr	r0, [fp, #16]
   20694:	ldr	r1, [fp, #-20]	; 0xffffffec
   20698:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2069c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   206a0:	ldr	ip, [fp, #-28]	; 0xffffffe4
   206a4:	add	r3, r3, ip
   206a8:	str	r0, [sp, #12]
   206ac:	mov	r0, r1
   206b0:	mov	r1, r2
   206b4:	mov	r2, r3
   206b8:	add	r3, sp, #36	; 0x24
   206bc:	ldr	ip, [sp, #12]
   206c0:	blx	ip
   206c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   206c8:	ldr	r1, [r1, #24]
   206cc:	cmp	r1, #0
   206d0:	str	r0, [sp, #8]
   206d4:	beq	206e8 <flatcc_json_parser_table_as_root@@Base+0x130>
   206d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   206dc:	ldr	r0, [r0, #24]
   206e0:	str	r0, [fp, #-12]
   206e4:	b	2071c <flatcc_json_parser_table_as_root@@Base+0x164>
   206e8:	ldr	r0, [fp, #-16]
   206ec:	ldr	r1, [sp, #36]	; 0x24
   206f0:	bl	15e98 <flatcc_builder_end_buffer@@Base>
   206f4:	cmp	r0, #0
   206f8:	bne	20708 <flatcc_json_parser_table_as_root@@Base+0x150>
   206fc:	mvn	r0, #0
   20700:	str	r0, [fp, #-12]
   20704:	b	2071c <flatcc_json_parser_table_as_root@@Base+0x164>
   20708:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2070c:	ldr	r1, [fp, #-20]	; 0xffffffec
   20710:	str	r0, [r1, #40]	; 0x28
   20714:	movw	r0, #0
   20718:	str	r0, [fp, #-12]
   2071c:	ldr	r0, [fp, #-12]
   20720:	sub	sp, fp, #8
   20724:	pop	{r4, sl, fp, pc}
   20728:	push	{fp, lr}
   2072c:	mov	fp, sp
   20730:	sub	sp, sp, #24
   20734:	ldr	ip, [fp, #8]
   20738:	str	r0, [fp, #-4]
   2073c:	str	r1, [fp, #-8]
   20740:	str	r2, [sp, #12]
   20744:	str	r3, [sp, #8]
   20748:	ldr	r0, [fp, #-4]
   2074c:	movw	r1, #0
   20750:	and	r1, r1, #255	; 0xff
   20754:	movw	r2, #44	; 0x2c
   20758:	str	ip, [sp, #4]
   2075c:	bl	1295c <memset@plt>
   20760:	ldr	r0, [fp, #-8]
   20764:	ldr	r1, [fp, #-4]
   20768:	str	r0, [r1]
   2076c:	ldr	r0, [sp, #12]
   20770:	ldr	r1, [fp, #-4]
   20774:	str	r0, [r1, #4]
   20778:	ldr	r0, [fp, #-4]
   2077c:	movw	r1, #1
   20780:	str	r1, [r0, #16]
   20784:	ldr	r0, [fp, #8]
   20788:	ldr	r1, [fp, #-4]
   2078c:	str	r0, [r1, #8]
   20790:	ldr	r0, [sp, #12]
   20794:	ldr	r1, [fp, #-4]
   20798:	str	r0, [r1, #28]
   2079c:	ldr	r0, [sp, #8]
   207a0:	ldr	r1, [fp, #-4]
   207a4:	str	r0, [r1, #32]
   207a8:	ldr	r0, [sp, #12]
   207ac:	ldr	r1, [fp, #-4]
   207b0:	str	r0, [r1, #36]	; 0x24
   207b4:	mov	sp, fp
   207b8:	pop	{fp, pc}

000207bc <flatcc_json_parser_struct_as_root@@Base>:
   207bc:	push	{r4, sl, fp, lr}
   207c0:	add	fp, sp, #8
   207c4:	sub	sp, sp, #104	; 0x68
   207c8:	ldr	ip, [fp, #16]
   207cc:	ldr	lr, [fp, #12]
   207d0:	ldr	r4, [fp, #8]
   207d4:	str	r0, [fp, #-16]
   207d8:	str	r1, [fp, #-20]	; 0xffffffec
   207dc:	str	r2, [fp, #-24]	; 0xffffffe8
   207e0:	str	r3, [fp, #-28]	; 0xffffffe4
   207e4:	ldr	r0, [fp, #8]
   207e8:	and	r0, r0, #4
   207ec:	cmp	r0, #0
   207f0:	movw	r0, #0
   207f4:	movne	r0, #1
   207f8:	tst	r0, #1
   207fc:	movw	r0, #2
   20800:	moveq	r0, #0
   20804:	str	r0, [sp, #32]
   20808:	ldr	r0, [fp, #-20]	; 0xffffffec
   2080c:	movw	r1, #0
   20810:	cmp	r0, r1
   20814:	str	r4, [sp, #28]
   20818:	str	lr, [sp, #24]
   2081c:	str	ip, [sp, #20]
   20820:	beq	20830 <flatcc_json_parser_struct_as_root@@Base+0x74>
   20824:	ldr	r0, [fp, #-20]	; 0xffffffec
   20828:	str	r0, [sp, #16]
   2082c:	b	2083c <flatcc_json_parser_struct_as_root@@Base+0x80>
   20830:	add	r0, sp, #40	; 0x28
   20834:	str	r0, [sp, #16]
   20838:	b	2083c <flatcc_json_parser_struct_as_root@@Base+0x80>
   2083c:	ldr	r0, [sp, #16]
   20840:	str	r0, [fp, #-20]	; 0xffffffec
   20844:	ldr	r0, [fp, #-20]	; 0xffffffec
   20848:	ldr	r1, [fp, #-16]
   2084c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20850:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20854:	ldr	ip, [fp, #-28]	; 0xffffffe4
   20858:	add	r3, r3, ip
   2085c:	ldr	ip, [fp, #8]
   20860:	str	ip, [sp]
   20864:	bl	20728 <flatcc_json_parser_table_as_root@@Base+0x170>
   20868:	ldr	r0, [fp, #-16]
   2086c:	ldr	r1, [fp, #12]
   20870:	ldr	r3, [sp, #32]
   20874:	movw	r2, #0
   20878:	uxth	r2, r2
   2087c:	bl	15b54 <flatcc_builder_start_buffer@@Base>
   20880:	cmp	r0, #0
   20884:	beq	20894 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   20888:	mvn	r0, #0
   2088c:	str	r0, [fp, #-12]
   20890:	b	20920 <flatcc_json_parser_struct_as_root@@Base+0x164>
   20894:	ldr	r0, [fp, #16]
   20898:	ldr	r1, [fp, #-20]	; 0xffffffec
   2089c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   208a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   208a4:	ldr	ip, [fp, #-28]	; 0xffffffe4
   208a8:	add	r3, r3, ip
   208ac:	str	r0, [sp, #12]
   208b0:	mov	r0, r1
   208b4:	mov	r1, r2
   208b8:	mov	r2, r3
   208bc:	add	r3, sp, #36	; 0x24
   208c0:	ldr	ip, [sp, #12]
   208c4:	blx	ip
   208c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   208cc:	ldr	r1, [r1, #24]
   208d0:	cmp	r1, #0
   208d4:	str	r0, [sp, #8]
   208d8:	beq	208ec <flatcc_json_parser_struct_as_root@@Base+0x130>
   208dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   208e0:	ldr	r0, [r0, #24]
   208e4:	str	r0, [fp, #-12]
   208e8:	b	20920 <flatcc_json_parser_struct_as_root@@Base+0x164>
   208ec:	ldr	r0, [fp, #-16]
   208f0:	ldr	r1, [sp, #36]	; 0x24
   208f4:	bl	15e98 <flatcc_builder_end_buffer@@Base>
   208f8:	cmp	r0, #0
   208fc:	bne	2090c <flatcc_json_parser_struct_as_root@@Base+0x150>
   20900:	mvn	r0, #0
   20904:	str	r0, [fp, #-12]
   20908:	b	20920 <flatcc_json_parser_struct_as_root@@Base+0x164>
   2090c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20910:	ldr	r1, [fp, #-20]	; 0xffffffec
   20914:	str	r0, [r1, #40]	; 0x28
   20918:	movw	r0, #0
   2091c:	str	r0, [fp, #-12]
   20920:	ldr	r0, [fp, #-12]
   20924:	sub	sp, fp, #8
   20928:	pop	{r4, sl, fp, pc}
   2092c:	sub	sp, sp, #16
   20930:	str	r0, [sp, #8]
   20934:	str	r1, [sp, #12]
   20938:	ldr	r0, [sp, #8]
   2093c:	ldr	r1, [sp, #12]
   20940:	str	r1, [sp, #4]
   20944:	str	r0, [sp]
   20948:	vldr	d0, [sp]
   2094c:	add	sp, sp, #16
   20950:	bx	lr
   20954:	nop	{0}
   20958:	push	{r4, r5, r6, r7, fp, lr}
   2095c:	add	fp, sp, #16
   20960:	sub	sp, sp, #152	; 0x98
   20964:	vldr	d16, [pc, #892]	; 20ce8 <flatcc_json_parser_struct_as_root@@Base+0x52c>
   20968:	str	r0, [fp, #-24]	; 0xffffffe8
   2096c:	str	r1, [fp, #-28]	; 0xffffffe4
   20970:	str	r2, [fp, #-32]	; 0xffffffe0
   20974:	mov	r0, #0
   20978:	str	r0, [fp, #-48]	; 0xffffffd0
   2097c:	str	r0, [fp, #-52]	; 0xffffffcc
   20980:	str	r0, [fp, #-60]	; 0xffffffc4
   20984:	str	r0, [fp, #-64]	; 0xffffffc0
   20988:	movw	r0, #0
   2098c:	str	r0, [fp, #-68]	; 0xffffffbc
   20990:	str	r0, [fp, #-72]	; 0xffffffb8
   20994:	str	r0, [fp, #-76]	; 0xffffffb4
   20998:	str	r0, [fp, #-80]	; 0xffffffb0
   2099c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   209a0:	vstr	d16, [r0]
   209a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   209ac:	add	r0, r0, r1
   209b0:	add	r0, r0, #1
   209b4:	str	r0, [fp, #-44]	; 0xffffffd4
   209b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   209bc:	cmp	r0, #1000	; 0x3e8
   209c0:	ble	209d4 <flatcc_json_parser_struct_as_root@@Base+0x218>
   209c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209c8:	add	r0, r0, #1000	; 0x3e8
   209cc:	add	r0, r0, #1
   209d0:	str	r0, [fp, #-44]	; 0xffffffd4
   209d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209d8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   209dc:	cmp	r0, r1
   209e0:	bne	209f0 <flatcc_json_parser_struct_as_root@@Base+0x234>
   209e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209e8:	str	r0, [fp, #-20]	; 0xffffffec
   209ec:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   209f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209f4:	str	r0, [fp, #-36]	; 0xffffffdc
   209f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209fc:	ldrb	r0, [r0]
   20a00:	cmp	r0, #45	; 0x2d
   20a04:	bne	20a3c <flatcc_json_parser_struct_as_root@@Base+0x280>
   20a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a0c:	add	r0, r0, #1
   20a10:	str	r0, [fp, #-24]	; 0xffffffe8
   20a14:	movw	r0, #1
   20a18:	str	r0, [fp, #-48]	; 0xffffffd0
   20a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a20:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20a24:	cmp	r0, r1
   20a28:	bne	20a38 <flatcc_json_parser_struct_as_root@@Base+0x27c>
   20a2c:	movw	r0, #0
   20a30:	str	r0, [fp, #-20]	; 0xffffffec
   20a34:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   20a38:	b	20a3c <flatcc_json_parser_struct_as_root@@Base+0x280>
   20a3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a40:	ldrb	r0, [r0]
   20a44:	cmp	r0, #48	; 0x30
   20a48:	bne	20b10 <flatcc_json_parser_struct_as_root@@Base+0x354>
   20a4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a50:	add	r0, r0, #1
   20a54:	str	r0, [fp, #-24]	; 0xffffffe8
   20a58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20a60:	cmp	r0, r1
   20a64:	beq	20abc <flatcc_json_parser_struct_as_root@@Base+0x300>
   20a68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a6c:	ldrb	r0, [r0]
   20a70:	orr	r0, r0, #32
   20a74:	cmp	r0, #120	; 0x78
   20a78:	bne	20abc <flatcc_json_parser_struct_as_root@@Base+0x300>
   20a7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a80:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20a84:	ldr	r2, [fp, #-48]	; 0xffffffd0
   20a88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20a8c:	bl	212c0 <flatcc_json_parser_struct_as_root@@Base+0xb04>
   20a90:	str	r0, [fp, #-40]	; 0xffffffd8
   20a94:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20a98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   20a9c:	cmp	r0, r1
   20aa0:	bne	20ab0 <flatcc_json_parser_struct_as_root@@Base+0x2f4>
   20aa4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20aa8:	str	r0, [fp, #-20]	; 0xffffffec
   20aac:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   20ab0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20ab4:	str	r0, [fp, #-20]	; 0xffffffec
   20ab8:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   20abc:	b	20ac0 <flatcc_json_parser_struct_as_root@@Base+0x304>
   20ac0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ac4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20ac8:	cmp	r0, r1
   20acc:	movw	r0, #0
   20ad0:	str	r0, [sp, #84]	; 0x54
   20ad4:	beq	20af0 <flatcc_json_parser_struct_as_root@@Base+0x334>
   20ad8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20adc:	ldrb	r0, [r0]
   20ae0:	cmp	r0, #48	; 0x30
   20ae4:	movw	r0, #0
   20ae8:	moveq	r0, #1
   20aec:	str	r0, [sp, #84]	; 0x54
   20af0:	ldr	r0, [sp, #84]	; 0x54
   20af4:	tst	r0, #1
   20af8:	beq	20b0c <flatcc_json_parser_struct_as_root@@Base+0x350>
   20afc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b00:	add	r0, r0, #1
   20b04:	str	r0, [fp, #-24]	; 0xffffffe8
   20b08:	b	20ac0 <flatcc_json_parser_struct_as_root@@Base+0x304>
   20b0c:	b	20b7c <flatcc_json_parser_struct_as_root@@Base+0x3c0>
   20b10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b14:	ldrb	r0, [r0]
   20b18:	cmp	r0, #49	; 0x31
   20b1c:	blt	20b30 <flatcc_json_parser_struct_as_root@@Base+0x374>
   20b20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b24:	ldrb	r0, [r0]
   20b28:	cmp	r0, #57	; 0x39
   20b2c:	ble	20b5c <flatcc_json_parser_struct_as_root@@Base+0x3a0>
   20b30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20b34:	cmp	r0, #0
   20b38:	beq	20b48 <flatcc_json_parser_struct_as_root@@Base+0x38c>
   20b3c:	movw	r0, #0
   20b40:	str	r0, [sp, #80]	; 0x50
   20b44:	b	20b50 <flatcc_json_parser_struct_as_root@@Base+0x394>
   20b48:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20b4c:	str	r0, [sp, #80]	; 0x50
   20b50:	ldr	r0, [sp, #80]	; 0x50
   20b54:	str	r0, [fp, #-20]	; 0xffffffec
   20b58:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   20b5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b60:	add	r1, r0, #1
   20b64:	str	r1, [fp, #-24]	; 0xffffffe8
   20b68:	ldrb	r0, [r0]
   20b6c:	sub	r0, r0, #48	; 0x30
   20b70:	asr	r1, r0, #31
   20b74:	str	r0, [fp, #-64]	; 0xffffffc0
   20b78:	str	r1, [fp, #-60]	; 0xffffffc4
   20b7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b80:	str	r0, [fp, #-40]	; 0xffffffd8
   20b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b88:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20b8c:	cmp	r0, r1
   20b90:	movw	r0, #0
   20b94:	str	r0, [sp, #76]	; 0x4c
   20b98:	beq	20bcc <flatcc_json_parser_struct_as_root@@Base+0x410>
   20b9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ba0:	ldrb	r0, [r0]
   20ba4:	cmp	r0, #48	; 0x30
   20ba8:	movw	r0, #0
   20bac:	str	r0, [sp, #76]	; 0x4c
   20bb0:	blt	20bcc <flatcc_json_parser_struct_as_root@@Base+0x410>
   20bb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20bb8:	ldrb	r0, [r0]
   20bbc:	cmp	r0, #57	; 0x39
   20bc0:	movw	r0, #0
   20bc4:	movle	r0, #1
   20bc8:	str	r0, [sp, #76]	; 0x4c
   20bcc:	ldr	r0, [sp, #76]	; 0x4c
   20bd0:	tst	r0, #1
   20bd4:	beq	20c80 <flatcc_json_parser_struct_as_root@@Base+0x4c4>
   20bd8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20bdc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20be0:	movw	r2, #39321	; 0x9999
   20be4:	movt	r2, #39321	; 0x9999
   20be8:	subs	r0, r0, r2
   20bec:	movw	r2, #39321	; 0x9999
   20bf0:	movt	r2, #6553	; 0x1999
   20bf4:	sbcs	r1, r1, r2
   20bf8:	str	r0, [sp, #72]	; 0x48
   20bfc:	str	r1, [sp, #68]	; 0x44
   20c00:	bcc	20c44 <flatcc_json_parser_struct_as_root@@Base+0x488>
   20c04:	b	20c08 <flatcc_json_parser_struct_as_root@@Base+0x44c>
   20c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c0c:	ldrb	r0, [r0]
   20c10:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20c14:	ldr	r2, [fp, #-60]	; 0xffffffc4
   20c18:	adds	r3, r1, #1
   20c1c:	adc	ip, r2, #0
   20c20:	cmp	r0, #52	; 0x34
   20c24:	movgt	r1, r3
   20c28:	cmp	r0, #52	; 0x34
   20c2c:	movgt	r2, ip
   20c30:	str	r1, [fp, #-64]	; 0xffffffc0
   20c34:	str	r2, [fp, #-60]	; 0xffffffc4
   20c38:	movw	r0, #1
   20c3c:	str	r0, [fp, #-80]	; 0xffffffb0
   20c40:	b	20c80 <flatcc_json_parser_struct_as_root@@Base+0x4c4>
   20c44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20c48:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20c4c:	add	r1, r1, r1, lsl #2
   20c50:	lsl	r1, r1, #1
   20c54:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20c58:	add	r3, r2, #1
   20c5c:	str	r3, [fp, #-24]	; 0xffffffe8
   20c60:	ldrb	r2, [r2]
   20c64:	mov	r3, #10
   20c68:	umlal	r2, r1, r0, r3
   20c6c:	subs	r0, r2, #48	; 0x30
   20c70:	sbc	r1, r1, #0
   20c74:	str	r0, [fp, #-64]	; 0xffffffc0
   20c78:	str	r1, [fp, #-60]	; 0xffffffc4
   20c7c:	b	20b84 <flatcc_json_parser_struct_as_root@@Base+0x3c8>
   20c80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c84:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20c88:	sub	r0, r0, r1
   20c8c:	str	r0, [fp, #-76]	; 0xffffffb4
   20c90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c94:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20c98:	cmp	r0, r1
   20c9c:	movw	r0, #0
   20ca0:	str	r0, [sp, #64]	; 0x40
   20ca4:	beq	20cc0 <flatcc_json_parser_struct_as_root@@Base+0x504>
   20ca8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20cac:	ldrb	r0, [r0]
   20cb0:	cmp	r0, #48	; 0x30
   20cb4:	movw	r0, #0
   20cb8:	moveq	r0, #1
   20cbc:	str	r0, [sp, #64]	; 0x40
   20cc0:	ldr	r0, [sp, #64]	; 0x40
   20cc4:	tst	r0, #1
   20cc8:	beq	20cf0 <flatcc_json_parser_struct_as_root@@Base+0x534>
   20ccc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20cd0:	add	r0, r0, #1
   20cd4:	str	r0, [fp, #-68]	; 0xffffffbc
   20cd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20cdc:	add	r0, r0, #1
   20ce0:	str	r0, [fp, #-24]	; 0xffffffe8
   20ce4:	b	20c90 <flatcc_json_parser_struct_as_root@@Base+0x4d4>
	...
   20cf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20cf4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20cf8:	cmp	r0, r1
   20cfc:	beq	20db4 <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   20d00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d04:	ldrb	r0, [r0]
   20d08:	cmp	r0, #49	; 0x31
   20d0c:	blt	20db4 <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   20d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d14:	ldrb	r0, [r0]
   20d18:	cmp	r0, #57	; 0x39
   20d1c:	bgt	20db4 <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   20d20:	movw	r0, #1
   20d24:	str	r0, [fp, #-80]	; 0xffffffb0
   20d28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20d2c:	add	r0, r0, #1
   20d30:	str	r0, [fp, #-68]	; 0xffffffbc
   20d34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d38:	add	r0, r0, #1
   20d3c:	str	r0, [fp, #-24]	; 0xffffffe8
   20d40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d44:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20d48:	cmp	r0, r1
   20d4c:	movw	r0, #0
   20d50:	str	r0, [sp, #60]	; 0x3c
   20d54:	beq	20d88 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   20d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d5c:	ldrb	r0, [r0]
   20d60:	cmp	r0, #48	; 0x30
   20d64:	movw	r0, #0
   20d68:	str	r0, [sp, #60]	; 0x3c
   20d6c:	blt	20d88 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   20d70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d74:	ldrb	r0, [r0]
   20d78:	cmp	r0, #57	; 0x39
   20d7c:	movw	r0, #0
   20d80:	movle	r0, #1
   20d84:	str	r0, [sp, #60]	; 0x3c
   20d88:	ldr	r0, [sp, #60]	; 0x3c
   20d8c:	tst	r0, #1
   20d90:	beq	20db0 <flatcc_json_parser_struct_as_root@@Base+0x5f4>
   20d94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20d98:	add	r0, r0, #1
   20d9c:	str	r0, [fp, #-68]	; 0xffffffbc
   20da0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20da4:	add	r0, r0, #1
   20da8:	str	r0, [fp, #-24]	; 0xffffffe8
   20dac:	b	20d40 <flatcc_json_parser_struct_as_root@@Base+0x584>
   20db0:	b	20db4 <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   20db4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20db8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20dbc:	cmp	r0, r1
   20dc0:	beq	21050 <flatcc_json_parser_struct_as_root@@Base+0x894>
   20dc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20dc8:	ldrb	r0, [r0]
   20dcc:	cmp	r0, #46	; 0x2e
   20dd0:	bne	21050 <flatcc_json_parser_struct_as_root@@Base+0x894>
   20dd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20dd8:	add	r0, r0, #1
   20ddc:	str	r0, [fp, #-24]	; 0xffffffe8
   20de0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20de4:	str	r0, [fp, #-40]	; 0xffffffd8
   20de8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20dec:	ldrb	r0, [r0]
   20df0:	cmp	r0, #48	; 0x30
   20df4:	blt	20e08 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   20df8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20dfc:	ldrb	r0, [r0]
   20e00:	cmp	r0, #57	; 0x39
   20e04:	ble	20e14 <flatcc_json_parser_struct_as_root@@Base+0x658>
   20e08:	movw	r0, #0
   20e0c:	str	r0, [fp, #-20]	; 0xffffffec
   20e10:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   20e14:	b	20e18 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   20e18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e1c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20e20:	cmp	r0, r1
   20e24:	movw	r0, #0
   20e28:	str	r0, [sp, #56]	; 0x38
   20e2c:	beq	20e60 <flatcc_json_parser_struct_as_root@@Base+0x6a4>
   20e30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e34:	ldrb	r0, [r0]
   20e38:	cmp	r0, #48	; 0x30
   20e3c:	movw	r0, #0
   20e40:	str	r0, [sp, #56]	; 0x38
   20e44:	blt	20e60 <flatcc_json_parser_struct_as_root@@Base+0x6a4>
   20e48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e4c:	ldrb	r0, [r0]
   20e50:	cmp	r0, #57	; 0x39
   20e54:	movw	r0, #0
   20e58:	movle	r0, #1
   20e5c:	str	r0, [sp, #56]	; 0x38
   20e60:	ldr	r0, [sp, #56]	; 0x38
   20e64:	tst	r0, #1
   20e68:	beq	20f30 <flatcc_json_parser_struct_as_root@@Base+0x774>
   20e6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20e70:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20e74:	movw	r2, #39321	; 0x9999
   20e78:	movt	r2, #39321	; 0x9999
   20e7c:	subs	r0, r0, r2
   20e80:	movw	r2, #39321	; 0x9999
   20e84:	movt	r2, #6553	; 0x1999
   20e88:	sbcs	r1, r1, r2
   20e8c:	str	r0, [sp, #52]	; 0x34
   20e90:	str	r1, [sp, #48]	; 0x30
   20e94:	bcc	20ee4 <flatcc_json_parser_struct_as_root@@Base+0x728>
   20e98:	b	20e9c <flatcc_json_parser_struct_as_root@@Base+0x6e0>
   20e9c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   20ea0:	cmp	r0, #0
   20ea4:	bne	20ee0 <flatcc_json_parser_struct_as_root@@Base+0x724>
   20ea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20eac:	ldrb	r0, [r0]
   20eb0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20eb4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   20eb8:	adds	r3, r1, #1
   20ebc:	adc	ip, r2, #0
   20ec0:	cmp	r0, #52	; 0x34
   20ec4:	movgt	r1, r3
   20ec8:	cmp	r0, #52	; 0x34
   20ecc:	movgt	r2, ip
   20ed0:	str	r1, [fp, #-64]	; 0xffffffc0
   20ed4:	str	r2, [fp, #-60]	; 0xffffffc4
   20ed8:	movw	r0, #1
   20edc:	str	r0, [fp, #-80]	; 0xffffffb0
   20ee0:	b	20f30 <flatcc_json_parser_struct_as_root@@Base+0x774>
   20ee4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20ee8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20eec:	add	r1, r1, r1, lsl #2
   20ef0:	lsl	r1, r1, #1
   20ef4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20ef8:	add	r3, r2, #1
   20efc:	str	r3, [fp, #-24]	; 0xffffffe8
   20f00:	ldrb	r2, [r2]
   20f04:	mov	r3, #10
   20f08:	umlal	r2, r1, r0, r3
   20f0c:	subs	r0, r2, #48	; 0x30
   20f10:	sbc	r1, r1, #0
   20f14:	str	r0, [fp, #-64]	; 0xffffffc0
   20f18:	str	r1, [fp, #-60]	; 0xffffffc4
   20f1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20f20:	mvn	r1, #0
   20f24:	add	r0, r0, r1
   20f28:	str	r0, [fp, #-68]	; 0xffffffbc
   20f2c:	b	20e18 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   20f30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f34:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20f38:	sub	r0, r0, r1
   20f3c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   20f40:	add	r0, r1, r0
   20f44:	str	r0, [fp, #-76]	; 0xffffffb4
   20f48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f4c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20f50:	cmp	r0, r1
   20f54:	movw	r0, #0
   20f58:	str	r0, [sp, #44]	; 0x2c
   20f5c:	beq	20f78 <flatcc_json_parser_struct_as_root@@Base+0x7bc>
   20f60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f64:	ldrb	r0, [r0]
   20f68:	cmp	r0, #48	; 0x30
   20f6c:	movw	r0, #0
   20f70:	moveq	r0, #1
   20f74:	str	r0, [sp, #44]	; 0x2c
   20f78:	ldr	r0, [sp, #44]	; 0x2c
   20f7c:	tst	r0, #1
   20f80:	beq	20fa0 <flatcc_json_parser_struct_as_root@@Base+0x7e4>
   20f84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20f88:	add	r0, r0, #1
   20f8c:	str	r0, [fp, #-68]	; 0xffffffbc
   20f90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f94:	add	r0, r0, #1
   20f98:	str	r0, [fp, #-24]	; 0xffffffe8
   20f9c:	b	20f48 <flatcc_json_parser_struct_as_root@@Base+0x78c>
   20fa0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fa4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20fa8:	cmp	r0, r1
   20fac:	beq	2104c <flatcc_json_parser_struct_as_root@@Base+0x890>
   20fb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fb4:	ldrb	r0, [r0]
   20fb8:	cmp	r0, #49	; 0x31
   20fbc:	blt	2104c <flatcc_json_parser_struct_as_root@@Base+0x890>
   20fc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fc4:	ldrb	r0, [r0]
   20fc8:	cmp	r0, #57	; 0x39
   20fcc:	bgt	2104c <flatcc_json_parser_struct_as_root@@Base+0x890>
   20fd0:	movw	r0, #1
   20fd4:	str	r0, [fp, #-80]	; 0xffffffb0
   20fd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fdc:	add	r0, r0, #1
   20fe0:	str	r0, [fp, #-24]	; 0xffffffe8
   20fe4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fe8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20fec:	cmp	r0, r1
   20ff0:	movw	r0, #0
   20ff4:	str	r0, [sp, #40]	; 0x28
   20ff8:	beq	2102c <flatcc_json_parser_struct_as_root@@Base+0x870>
   20ffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21000:	ldrb	r0, [r0]
   21004:	cmp	r0, #48	; 0x30
   21008:	movw	r0, #0
   2100c:	str	r0, [sp, #40]	; 0x28
   21010:	blt	2102c <flatcc_json_parser_struct_as_root@@Base+0x870>
   21014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21018:	ldrb	r0, [r0]
   2101c:	cmp	r0, #57	; 0x39
   21020:	movw	r0, #0
   21024:	movle	r0, #1
   21028:	str	r0, [sp, #40]	; 0x28
   2102c:	ldr	r0, [sp, #40]	; 0x28
   21030:	tst	r0, #1
   21034:	beq	21048 <flatcc_json_parser_struct_as_root@@Base+0x88c>
   21038:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2103c:	add	r0, r0, #1
   21040:	str	r0, [fp, #-24]	; 0xffffffe8
   21044:	b	20fe4 <flatcc_json_parser_struct_as_root@@Base+0x828>
   21048:	b	2104c <flatcc_json_parser_struct_as_root@@Base+0x890>
   2104c:	b	21050 <flatcc_json_parser_struct_as_root@@Base+0x894>
   21050:	ldr	r0, [fp, #-76]	; 0xffffffb4
   21054:	ldr	r1, [fp, #-68]	; 0xffffffbc
   21058:	add	r0, r1, r0
   2105c:	str	r0, [fp, #-68]	; 0xffffffbc
   21060:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21064:	ldr	r1, [fp, #-44]	; 0xffffffd4
   21068:	cmp	r0, r1
   2106c:	beq	21210 <flatcc_json_parser_struct_as_root@@Base+0xa54>
   21070:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21074:	ldrb	r0, [r0]
   21078:	orr	r0, r0, #32
   2107c:	cmp	r0, #101	; 0x65
   21080:	bne	21210 <flatcc_json_parser_struct_as_root@@Base+0xa54>
   21084:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21088:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2108c:	sub	r0, r0, r1
   21090:	cmp	r0, #2
   21094:	bge	210a4 <flatcc_json_parser_struct_as_root@@Base+0x8e8>
   21098:	movw	r0, #0
   2109c:	str	r0, [fp, #-20]	; 0xffffffec
   210a0:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   210a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   210a8:	add	r0, r0, #1
   210ac:	str	r0, [fp, #-24]	; 0xffffffe8
   210b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   210b4:	ldrb	r0, [r0]
   210b8:	cmp	r0, #43	; 0x2b
   210bc:	bne	210ec <flatcc_json_parser_struct_as_root@@Base+0x930>
   210c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   210c4:	add	r0, r0, #1
   210c8:	str	r0, [fp, #-24]	; 0xffffffe8
   210cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   210d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   210d4:	cmp	r0, r1
   210d8:	bne	210e8 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   210dc:	movw	r0, #0
   210e0:	str	r0, [fp, #-20]	; 0xffffffec
   210e4:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   210e8:	b	21134 <flatcc_json_parser_struct_as_root@@Base+0x978>
   210ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   210f0:	ldrb	r0, [r0]
   210f4:	cmp	r0, #45	; 0x2d
   210f8:	bne	21130 <flatcc_json_parser_struct_as_root@@Base+0x974>
   210fc:	movw	r0, #1
   21100:	str	r0, [fp, #-52]	; 0xffffffcc
   21104:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21108:	add	r0, r0, #1
   2110c:	str	r0, [fp, #-24]	; 0xffffffe8
   21110:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21114:	ldr	r1, [fp, #-44]	; 0xffffffd4
   21118:	cmp	r0, r1
   2111c:	bne	2112c <flatcc_json_parser_struct_as_root@@Base+0x970>
   21120:	movw	r0, #0
   21124:	str	r0, [fp, #-20]	; 0xffffffec
   21128:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   2112c:	b	21130 <flatcc_json_parser_struct_as_root@@Base+0x974>
   21130:	b	21134 <flatcc_json_parser_struct_as_root@@Base+0x978>
   21134:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21138:	ldrb	r0, [r0]
   2113c:	cmp	r0, #48	; 0x30
   21140:	blt	21154 <flatcc_json_parser_struct_as_root@@Base+0x998>
   21144:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21148:	ldrb	r0, [r0]
   2114c:	cmp	r0, #57	; 0x39
   21150:	ble	21160 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   21154:	movw	r0, #0
   21158:	str	r0, [fp, #-20]	; 0xffffffec
   2115c:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   21160:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21164:	add	r1, r0, #1
   21168:	str	r1, [fp, #-24]	; 0xffffffe8
   2116c:	ldrb	r0, [r0]
   21170:	sub	r0, r0, #48	; 0x30
   21174:	str	r0, [fp, #-72]	; 0xffffffb8
   21178:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2117c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   21180:	cmp	r0, r1
   21184:	movw	r0, #0
   21188:	str	r0, [sp, #36]	; 0x24
   2118c:	beq	211c0 <flatcc_json_parser_struct_as_root@@Base+0xa04>
   21190:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21194:	ldrb	r0, [r0]
   21198:	cmp	r0, #48	; 0x30
   2119c:	movw	r0, #0
   211a0:	str	r0, [sp, #36]	; 0x24
   211a4:	blt	211c0 <flatcc_json_parser_struct_as_root@@Base+0xa04>
   211a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   211ac:	ldrb	r0, [r0]
   211b0:	cmp	r0, #57	; 0x39
   211b4:	movw	r0, #0
   211b8:	movle	r0, #1
   211bc:	str	r0, [sp, #36]	; 0x24
   211c0:	ldr	r0, [sp, #36]	; 0x24
   211c4:	tst	r0, #1
   211c8:	beq	2120c <flatcc_json_parser_struct_as_root@@Base+0xa50>
   211cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   211d0:	movw	r1, #32767	; 0x7fff
   211d4:	cmp	r0, r1
   211d8:	bgt	211fc <flatcc_json_parser_struct_as_root@@Base+0xa40>
   211dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   211e0:	movw	r1, #10
   211e4:	mul	r0, r0, r1
   211e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   211ec:	ldrb	r1, [r1]
   211f0:	add	r0, r0, r1
   211f4:	sub	r0, r0, #48	; 0x30
   211f8:	str	r0, [fp, #-72]	; 0xffffffb8
   211fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21200:	add	r0, r0, #1
   21204:	str	r0, [fp, #-24]	; 0xffffffe8
   21208:	b	21178 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   2120c:	b	21210 <flatcc_json_parser_struct_as_root@@Base+0xa54>
   21210:	ldr	r0, [fp, #-68]	; 0xffffffbc
   21214:	ldr	r1, [fp, #-52]	; 0xffffffcc
   21218:	cmp	r1, #0
   2121c:	str	r0, [sp, #32]
   21220:	beq	21238 <flatcc_json_parser_struct_as_root@@Base+0xa7c>
   21224:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21228:	movw	r1, #0
   2122c:	sub	r0, r1, r0
   21230:	str	r0, [sp, #28]
   21234:	b	21240 <flatcc_json_parser_struct_as_root@@Base+0xa84>
   21238:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2123c:	str	r0, [sp, #28]
   21240:	ldr	r0, [sp, #28]
   21244:	ldr	r1, [sp, #32]
   21248:	add	r0, r1, r0
   2124c:	str	r0, [fp, #-68]	; 0xffffffbc
   21250:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21254:	ldr	r2, [fp, #-44]	; 0xffffffd4
   21258:	cmp	r0, r2
   2125c:	bne	2126c <flatcc_json_parser_struct_as_root@@Base+0xab0>
   21260:	movw	r0, #0
   21264:	str	r0, [fp, #-20]	; 0xffffffec
   21268:	b	212b4 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   2126c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   21270:	ldr	r1, [fp, #-24]	; 0xffffffe8
   21274:	ldr	r2, [fp, #-48]	; 0xffffffd0
   21278:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2127c:	ldr	ip, [fp, #-60]	; 0xffffffc4
   21280:	ldr	lr, [fp, #-68]	; 0xffffffbc
   21284:	ldr	r4, [fp, #-76]	; 0xffffffb4
   21288:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2128c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   21290:	mov	r7, sp
   21294:	str	r6, [r7, #20]
   21298:	str	r5, [r7, #16]
   2129c:	str	r4, [r7, #12]
   212a0:	str	lr, [r7, #8]
   212a4:	str	ip, [r7, #4]
   212a8:	str	r3, [r7]
   212ac:	bl	212f8 <flatcc_json_parser_struct_as_root@@Base+0xb3c>
   212b0:	str	r0, [fp, #-20]	; 0xffffffec
   212b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   212b8:	sub	sp, fp, #16
   212bc:	pop	{r4, r5, r6, r7, fp, pc}
   212c0:	sub	sp, sp, #16
   212c4:	vldr	d16, [pc, #36]	; 212f0 <flatcc_json_parser_struct_as_root@@Base+0xb34>
   212c8:	str	r0, [sp, #12]
   212cc:	str	r1, [sp, #8]
   212d0:	str	r2, [sp, #4]
   212d4:	str	r3, [sp]
   212d8:	ldr	r0, [sp]
   212dc:	vstr	d16, [r0]
   212e0:	ldr	r0, [sp, #12]
   212e4:	add	sp, sp, #16
   212e8:	bx	lr
   212ec:	nop	{0}
	...
   212f8:	push	{r4, r5, r6, sl, fp, lr}
   212fc:	add	fp, sp, #16
   21300:	sub	sp, sp, #80	; 0x50
   21304:	ldr	r3, [fp, #12]
   21308:	ldr	ip, [fp, #8]
   2130c:	ldr	lr, [fp, #28]
   21310:	ldr	r4, [fp, #24]
   21314:	ldr	r5, [fp, #20]
   21318:	ldr	r6, [fp, #16]
   2131c:	str	r0, [fp, #-24]	; 0xffffffe8
   21320:	str	r1, [fp, #-28]	; 0xffffffe4
   21324:	str	r2, [fp, #-32]	; 0xffffffe0
   21328:	str	r3, [fp, #-36]	; 0xffffffdc
   2132c:	str	ip, [fp, #-40]	; 0xffffffd8
   21330:	movw	r0, #309	; 0x135
   21334:	str	r0, [fp, #-44]	; 0xffffffd4
   21338:	movw	r0, #65212	; 0xfebc
   2133c:	movt	r0, #65535	; 0xffff
   21340:	str	r0, [sp, #48]	; 0x30
   21344:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21348:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2134c:	orr	r0, r0, r1
   21350:	cmp	r0, #0
   21354:	str	r6, [sp, #28]
   21358:	str	r4, [sp, #24]
   2135c:	str	r5, [sp, #20]
   21360:	str	lr, [sp, #16]
   21364:	beq	21378 <flatcc_json_parser_struct_as_root@@Base+0xbbc>
   21368:	b	2136c <flatcc_json_parser_struct_as_root@@Base+0xbb0>
   2136c:	ldr	r0, [fp, #16]
   21370:	cmn	r0, #324	; 0x144
   21374:	bge	21388 <flatcc_json_parser_struct_as_root@@Base+0xbcc>
   21378:	vldr	d16, [pc, #1008]	; 21770 <flatcc_json_parser_struct_as_root@@Base+0xfb4>
   2137c:	ldr	r0, [fp, #28]
   21380:	vstr	d16, [r0]
   21384:	b	21938 <flatcc_json_parser_struct_as_root@@Base+0x117c>
   21388:	ldr	r0, [fp, #16]
   2138c:	sub	r0, r0, #1
   21390:	movw	r1, #309	; 0x135
   21394:	cmp	r0, r1
   21398:	ble	213b8 <flatcc_json_parser_struct_as_root@@Base+0xbfc>
   2139c:	mov	r0, #0
   213a0:	movw	r1, #0
   213a4:	movt	r1, #32752	; 0x7ff0
   213a8:	bl	2092c <flatcc_json_parser_struct_as_root@@Base+0x170>
   213ac:	ldr	r0, [fp, #28]
   213b0:	vstr	d0, [r0]
   213b4:	b	21938 <flatcc_json_parser_struct_as_root@@Base+0x117c>
   213b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   213bc:	mov	r1, #0
   213c0:	cmp	r1, r0, lsr #21
   213c4:	bne	218c8 <flatcc_json_parser_struct_as_root@@Base+0x110c>
   213c8:	b	213cc <flatcc_json_parser_struct_as_root@@Base+0xc10>
   213cc:	ldr	r0, [fp, #16]
   213d0:	cmp	r0, #0
   213d4:	blt	218c8 <flatcc_json_parser_struct_as_root@@Base+0x110c>
   213d8:	ldr	r0, [fp, #16]
   213dc:	cmp	r0, #22
   213e0:	bgt	218c8 <flatcc_json_parser_struct_as_root@@Base+0x110c>
   213e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   213e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   213ec:	bl	21e8c <flatcc_json_parser_struct_as_root@@Base+0x16d0>
   213f0:	str	r0, [sp, #32]
   213f4:	str	r1, [sp, #36]	; 0x24
   213f8:	ldr	r0, [fp, #16]
   213fc:	ldr	r1, [fp, #20]
   21400:	sub	r0, r0, r1
   21404:	add	r0, r0, #22
   21408:	cmp	r0, #44	; 0x2c
   2140c:	str	r0, [sp, #12]
   21410:	bhi	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21414:	add	r0, pc, #8
   21418:	ldr	r1, [sp, #12]
   2141c:	ldr	r2, [r0, r1, lsl #2]
   21420:	add	pc, r0, r2
   21424:	strheq	r0, [r0], -r4
   21428:	andeq	r0, r0, r8, asr #1
   2142c:	ldrdeq	r0, [r0], -ip
   21430:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   21434:	andeq	r0, r0, r4, lsl #2
   21438:	andeq	r0, r0, r8, lsl r1
   2143c:	andeq	r0, r0, ip, lsr #2
   21440:	andeq	r0, r0, r0, asr #2
   21444:	andeq	r0, r0, r4, asr r1
   21448:	andeq	r0, r0, r8, ror #2
   2144c:	andeq	r0, r0, ip, ror r1
   21450:	muleq	r0, r0, r1
   21454:	andeq	r0, r0, r4, lsr #3
   21458:			; <UNDEFINED> instruction: 0x000001b8
   2145c:	andeq	r0, r0, ip, asr #3
   21460:	andeq	r0, r0, r0, ror #3
   21464:	strdeq	r0, [r0], -r4
   21468:	andeq	r0, r0, r8, lsl #4
   2146c:	andeq	r0, r0, ip, lsl r2
   21470:	andeq	r0, r0, r0, lsr r2
   21474:	andeq	r0, r0, r4, asr #4
   21478:	andeq	r0, r0, r8, asr r2
   2147c:	andeq	r0, r0, ip, ror #4
   21480:	andeq	r0, r0, r0, ror r2
   21484:	andeq	r0, r0, r4, lsl #5
   21488:	muleq	r0, r8, r2
   2148c:	andeq	r0, r0, ip, lsr #5
   21490:	andeq	r0, r0, r0, asr #5
   21494:	ldrdeq	r0, [r0], -r4
   21498:	andeq	r0, r0, r8, ror #5
   2149c:	strdeq	r0, [r0], -ip
   214a0:	andeq	r0, r0, r0, lsl r3
   214a4:	andeq	r0, r0, r4, lsr #6
   214a8:	andeq	r0, r0, r8, lsr r3
   214ac:			; <UNDEFINED> instruction: 0x000003bc
   214b0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   214b4:	andeq	r0, r0, r4, ror #7
   214b8:	strdeq	r0, [r0], -r8
   214bc:	andeq	r0, r0, ip, lsl #8
   214c0:	andeq	r0, r0, r0, lsr #8
   214c4:	andeq	r0, r0, r4, lsr r4
   214c8:	andeq	r0, r0, r8, asr #8
   214cc:	andeq	r0, r0, ip, asr r4
   214d0:	andeq	r0, r0, r0, ror r4
   214d4:	andeq	r0, r0, r4, lsl #9
   214d8:	vldr	d16, [pc, #664]	; 21778 <flatcc_json_parser_struct_as_root@@Base+0xfbc>
   214dc:	vldr	d17, [sp, #32]
   214e0:	vdiv.f64	d16, d17, d16
   214e4:	vstr	d16, [sp, #32]
   214e8:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   214ec:	vldr	d16, [pc, #652]	; 21780 <flatcc_json_parser_struct_as_root@@Base+0xfc4>
   214f0:	vldr	d17, [sp, #32]
   214f4:	vdiv.f64	d16, d17, d16
   214f8:	vstr	d16, [sp, #32]
   214fc:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21500:	vldr	d16, [pc, #640]	; 21788 <flatcc_json_parser_struct_as_root@@Base+0xfcc>
   21504:	vldr	d17, [sp, #32]
   21508:	vdiv.f64	d16, d17, d16
   2150c:	vstr	d16, [sp, #32]
   21510:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21514:	vldr	d16, [pc, #628]	; 21790 <flatcc_json_parser_struct_as_root@@Base+0xfd4>
   21518:	vldr	d17, [sp, #32]
   2151c:	vdiv.f64	d16, d17, d16
   21520:	vstr	d16, [sp, #32]
   21524:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21528:	vldr	d16, [pc, #616]	; 21798 <flatcc_json_parser_struct_as_root@@Base+0xfdc>
   2152c:	vldr	d17, [sp, #32]
   21530:	vdiv.f64	d16, d17, d16
   21534:	vstr	d16, [sp, #32]
   21538:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2153c:	vldr	d16, [pc, #604]	; 217a0 <flatcc_json_parser_struct_as_root@@Base+0xfe4>
   21540:	vldr	d17, [sp, #32]
   21544:	vdiv.f64	d16, d17, d16
   21548:	vstr	d16, [sp, #32]
   2154c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21550:	vldr	d16, [pc, #592]	; 217a8 <flatcc_json_parser_struct_as_root@@Base+0xfec>
   21554:	vldr	d17, [sp, #32]
   21558:	vdiv.f64	d16, d17, d16
   2155c:	vstr	d16, [sp, #32]
   21560:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21564:	vldr	d16, [pc, #580]	; 217b0 <flatcc_json_parser_struct_as_root@@Base+0xff4>
   21568:	vldr	d17, [sp, #32]
   2156c:	vdiv.f64	d16, d17, d16
   21570:	vstr	d16, [sp, #32]
   21574:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21578:	vldr	d16, [pc, #568]	; 217b8 <flatcc_json_parser_struct_as_root@@Base+0xffc>
   2157c:	vldr	d17, [sp, #32]
   21580:	vdiv.f64	d16, d17, d16
   21584:	vstr	d16, [sp, #32]
   21588:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2158c:	vldr	d16, [pc, #556]	; 217c0 <flatcc_json_parser_struct_as_root@@Base+0x1004>
   21590:	vldr	d17, [sp, #32]
   21594:	vdiv.f64	d16, d17, d16
   21598:	vstr	d16, [sp, #32]
   2159c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   215a0:	vldr	d16, [pc, #544]	; 217c8 <flatcc_json_parser_struct_as_root@@Base+0x100c>
   215a4:	vldr	d17, [sp, #32]
   215a8:	vdiv.f64	d16, d17, d16
   215ac:	vstr	d16, [sp, #32]
   215b0:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   215b4:	vldr	d16, [pc, #532]	; 217d0 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   215b8:	vldr	d17, [sp, #32]
   215bc:	vdiv.f64	d16, d17, d16
   215c0:	vstr	d16, [sp, #32]
   215c4:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   215c8:	vldr	d16, [pc, #520]	; 217d8 <flatcc_json_parser_struct_as_root@@Base+0x101c>
   215cc:	vldr	d17, [sp, #32]
   215d0:	vdiv.f64	d16, d17, d16
   215d4:	vstr	d16, [sp, #32]
   215d8:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   215dc:	vldr	d16, [pc, #1012]	; 219d8 <flatcc_json_parser_struct_as_root@@Base+0x121c>
   215e0:	vldr	d17, [sp, #32]
   215e4:	vdiv.f64	d16, d17, d16
   215e8:	vstr	d16, [sp, #32]
   215ec:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   215f0:	vldr	d16, [pc, #1000]	; 219e0 <flatcc_json_parser_struct_as_root@@Base+0x1224>
   215f4:	vldr	d17, [sp, #32]
   215f8:	vdiv.f64	d16, d17, d16
   215fc:	vstr	d16, [sp, #32]
   21600:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21604:	vldr	d16, [pc, #988]	; 219e8 <flatcc_json_parser_struct_as_root@@Base+0x122c>
   21608:	vldr	d17, [sp, #32]
   2160c:	vdiv.f64	d16, d17, d16
   21610:	vstr	d16, [sp, #32]
   21614:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21618:	vldr	d16, [pc, #976]	; 219f0 <flatcc_json_parser_struct_as_root@@Base+0x1234>
   2161c:	vldr	d17, [sp, #32]
   21620:	vdiv.f64	d16, d17, d16
   21624:	vstr	d16, [sp, #32]
   21628:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2162c:	vldr	d16, [pc, #964]	; 219f8 <flatcc_json_parser_struct_as_root@@Base+0x123c>
   21630:	vldr	d17, [sp, #32]
   21634:	vdiv.f64	d16, d17, d16
   21638:	vstr	d16, [sp, #32]
   2163c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21640:	vldr	d16, [pc, #952]	; 21a00 <flatcc_json_parser_struct_as_root@@Base+0x1244>
   21644:	vldr	d17, [sp, #32]
   21648:	vdiv.f64	d16, d17, d16
   2164c:	vstr	d16, [sp, #32]
   21650:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21654:	vldr	d16, [pc, #940]	; 21a08 <flatcc_json_parser_struct_as_root@@Base+0x124c>
   21658:	vldr	d17, [sp, #32]
   2165c:	vdiv.f64	d16, d17, d16
   21660:	vstr	d16, [sp, #32]
   21664:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21668:	vldr	d16, [pc, #928]	; 21a10 <flatcc_json_parser_struct_as_root@@Base+0x1254>
   2166c:	vldr	d17, [sp, #32]
   21670:	vdiv.f64	d16, d17, d16
   21674:	vstr	d16, [sp, #32]
   21678:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2167c:	vldr	d16, [sp, #32]
   21680:	vmov.f64	d17, #36	; 0x41200000  10.0
   21684:	vdiv.f64	d16, d16, d17
   21688:	vstr	d16, [sp, #32]
   2168c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21690:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21694:	vldr	d16, [sp, #32]
   21698:	vmov.f64	d17, #36	; 0x41200000  10.0
   2169c:	vmul.f64	d16, d16, d17
   216a0:	vstr	d16, [sp, #32]
   216a4:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   216a8:	vldr	d16, [pc, #864]	; 21a10 <flatcc_json_parser_struct_as_root@@Base+0x1254>
   216ac:	vldr	d17, [sp, #32]
   216b0:	vmul.f64	d16, d17, d16
   216b4:	vstr	d16, [sp, #32]
   216b8:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   216bc:	vldr	d16, [pc, #836]	; 21a08 <flatcc_json_parser_struct_as_root@@Base+0x124c>
   216c0:	vldr	d17, [sp, #32]
   216c4:	vmul.f64	d16, d17, d16
   216c8:	vstr	d16, [sp, #32]
   216cc:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   216d0:	vldr	d16, [pc, #808]	; 21a00 <flatcc_json_parser_struct_as_root@@Base+0x1244>
   216d4:	vldr	d17, [sp, #32]
   216d8:	vmul.f64	d16, d17, d16
   216dc:	vstr	d16, [sp, #32]
   216e0:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   216e4:	vldr	d16, [pc, #780]	; 219f8 <flatcc_json_parser_struct_as_root@@Base+0x123c>
   216e8:	vldr	d17, [sp, #32]
   216ec:	vmul.f64	d16, d17, d16
   216f0:	vstr	d16, [sp, #32]
   216f4:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   216f8:	vldr	d16, [pc, #752]	; 219f0 <flatcc_json_parser_struct_as_root@@Base+0x1234>
   216fc:	vldr	d17, [sp, #32]
   21700:	vmul.f64	d16, d17, d16
   21704:	vstr	d16, [sp, #32]
   21708:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2170c:	vldr	d16, [pc, #724]	; 219e8 <flatcc_json_parser_struct_as_root@@Base+0x122c>
   21710:	vldr	d17, [sp, #32]
   21714:	vmul.f64	d16, d17, d16
   21718:	vstr	d16, [sp, #32]
   2171c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21720:	vldr	d16, [pc, #696]	; 219e0 <flatcc_json_parser_struct_as_root@@Base+0x1224>
   21724:	vldr	d17, [sp, #32]
   21728:	vmul.f64	d16, d17, d16
   2172c:	vstr	d16, [sp, #32]
   21730:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21734:	vldr	d16, [pc, #668]	; 219d8 <flatcc_json_parser_struct_as_root@@Base+0x121c>
   21738:	vldr	d17, [sp, #32]
   2173c:	vmul.f64	d16, d17, d16
   21740:	vstr	d16, [sp, #32]
   21744:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21748:	vldr	d16, [pc, #640]	; 219d0 <flatcc_json_parser_struct_as_root@@Base+0x1214>
   2174c:	vldr	d17, [sp, #32]
   21750:	vmul.f64	d16, d17, d16
   21754:	vstr	d16, [sp, #32]
   21758:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2175c:	vldr	d16, [pc, #612]	; 219c8 <flatcc_json_parser_struct_as_root@@Base+0x120c>
   21760:	vldr	d17, [sp, #32]
   21764:	vmul.f64	d16, d17, d16
   21768:	vstr	d16, [sp, #32]
   2176c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
	...
   21778:			; <UNDEFINED> instruction: 0x064dd592
   2177c:	strmi	pc, [r0], #207	; 0xcf
   21780:	usatle	lr, #2, r0, asr #30
   21784:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   21788:	ldmvc	r5!, {r6, sl, fp, pc}
   2178c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   21790:	addsvs	r3, r1, r0, lsl #26
   21794:	mvnmi	r5, #228, 16	; 0xe40000
   21798:	strbvs	ip, [lr, -r0, lsl #16]
   2179c:			; <UNDEFINED> instruction: 0x43abc16d
   217a0:	ldrbhi	sl, [r8]
   217a4:	cmnmi	r6, #1459617792	; 0x57000000
   217a8:	strbcc	r8, [r0, r0]!
   217ac:	movtmi	ip, #4985	; 0x1379
   217b0:	ldrtcs	r0, [r4], -r0
   217b4:	movwmi	r6, #52213	; 0xcbf5
   217b8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   217bc:	sbcsmi	fp, r6, #196, 24	; 0xc400
   217c0:	strb	r0, [r0, #-0]
   217c4:	adcmi	r3, r2, #156	; 0x9c
   217c8:	andge	r0, r0, #0
   217cc:	rsbmi	r1, sp, #148, 20	; 0x94000
   217d0:	stmda	r0, {}	; <UNPREDICTABLE>
   217d4:	eorsmi	r4, r7, #7733248	; 0x760000
   217d8:	andcs	r0, r0, r0
   217dc:	andmi	sl, r2, #95	; 0x5f
   217e0:	vldr	d16, [pc, #472]	; 219c0 <flatcc_json_parser_struct_as_root@@Base+0x1204>
   217e4:	vldr	d17, [sp, #32]
   217e8:	vmul.f64	d16, d17, d16
   217ec:	vstr	d16, [sp, #32]
   217f0:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   217f4:	vldr	d16, [pc, #444]	; 219b8 <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   217f8:	vldr	d17, [sp, #32]
   217fc:	vmul.f64	d16, d17, d16
   21800:	vstr	d16, [sp, #32]
   21804:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21808:	vldr	d16, [pc, #416]	; 219b0 <flatcc_json_parser_struct_as_root@@Base+0x11f4>
   2180c:	vldr	d17, [sp, #32]
   21810:	vmul.f64	d16, d17, d16
   21814:	vstr	d16, [sp, #32]
   21818:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2181c:	vldr	d16, [pc, #388]	; 219a8 <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   21820:	vldr	d17, [sp, #32]
   21824:	vmul.f64	d16, d17, d16
   21828:	vstr	d16, [sp, #32]
   2182c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21830:	vldr	d16, [pc, #360]	; 219a0 <flatcc_json_parser_struct_as_root@@Base+0x11e4>
   21834:	vldr	d17, [sp, #32]
   21838:	vmul.f64	d16, d17, d16
   2183c:	vstr	d16, [sp, #32]
   21840:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21844:	vldr	d16, [pc, #332]	; 21998 <flatcc_json_parser_struct_as_root@@Base+0x11dc>
   21848:	vldr	d17, [sp, #32]
   2184c:	vmul.f64	d16, d17, d16
   21850:	vstr	d16, [sp, #32]
   21854:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21858:	vldr	d16, [pc, #304]	; 21990 <flatcc_json_parser_struct_as_root@@Base+0x11d4>
   2185c:	vldr	d17, [sp, #32]
   21860:	vmul.f64	d16, d17, d16
   21864:	vstr	d16, [sp, #32]
   21868:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   2186c:	vldr	d16, [pc, #276]	; 21988 <flatcc_json_parser_struct_as_root@@Base+0x11cc>
   21870:	vldr	d17, [sp, #32]
   21874:	vmul.f64	d16, d17, d16
   21878:	vstr	d16, [sp, #32]
   2187c:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21880:	vldr	d16, [pc, #248]	; 21980 <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   21884:	vldr	d17, [sp, #32]
   21888:	vmul.f64	d16, d17, d16
   2188c:	vstr	d16, [sp, #32]
   21890:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   21894:	vldr	d16, [pc, #220]	; 21978 <flatcc_json_parser_struct_as_root@@Base+0x11bc>
   21898:	vldr	d17, [sp, #32]
   2189c:	vmul.f64	d16, d17, d16
   218a0:	vstr	d16, [sp, #32]
   218a4:	b	218b8 <flatcc_json_parser_struct_as_root@@Base+0x10fc>
   218a8:	vldr	d16, [pc, #192]	; 21970 <flatcc_json_parser_struct_as_root@@Base+0x11b4>
   218ac:	vldr	d17, [sp, #32]
   218b0:	vmul.f64	d16, d17, d16
   218b4:	vstr	d16, [sp, #32]
   218b8:	vldr	d16, [sp, #32]
   218bc:	ldr	r0, [fp, #28]
   218c0:	vstr	d16, [r0]
   218c4:	b	21938 <flatcc_json_parser_struct_as_root@@Base+0x117c>
   218c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   218cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   218d0:	ldr	r2, [fp, #16]
   218d4:	ldr	r3, [fp, #20]
   218d8:	ldr	ip, [fp, #24]
   218dc:	ldr	lr, [fp, #28]
   218e0:	mov	r4, sp
   218e4:	str	lr, [r4, #4]
   218e8:	str	ip, [r4]
   218ec:	bl	1b1a0 <grisu3_diy_fp_encode_double@@Base>
   218f0:	cmp	r0, #0
   218f4:	beq	218fc <flatcc_json_parser_struct_as_root@@Base+0x1140>
   218f8:	b	21938 <flatcc_json_parser_struct_as_root@@Base+0x117c>
   218fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21900:	add	r1, sp, #44	; 0x2c
   21904:	bl	12968 <strtod@plt>
   21908:	ldr	r0, [fp, #28]
   2190c:	vstr	d0, [r0]
   21910:	ldr	r0, [sp, #44]	; 0x2c
   21914:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21918:	cmp	r0, r1
   2191c:	bcs	2192c <flatcc_json_parser_struct_as_root@@Base+0x1170>
   21920:	ldr	r0, [sp, #44]	; 0x2c
   21924:	str	r0, [fp, #-20]	; 0xffffffec
   21928:	b	21960 <flatcc_json_parser_struct_as_root@@Base+0x11a4>
   2192c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21930:	str	r0, [fp, #-20]	; 0xffffffec
   21934:	b	21960 <flatcc_json_parser_struct_as_root@@Base+0x11a4>
   21938:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2193c:	cmp	r0, #0
   21940:	beq	21958 <flatcc_json_parser_struct_as_root@@Base+0x119c>
   21944:	ldr	r0, [fp, #28]
   21948:	vldr	d16, [r0]
   2194c:	vneg.f64	d16, d16
   21950:	ldr	r0, [fp, #28]
   21954:	vstr	d16, [r0]
   21958:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2195c:	str	r0, [fp, #-20]	; 0xffffffec
   21960:	ldr	r0, [fp, #-20]	; 0xffffffec
   21964:	sub	sp, fp, #16
   21968:	pop	{r4, r5, r6, sl, fp, pc}
   2196c:	nop	{0}
   21970:			; <UNDEFINED> instruction: 0x064dd592
   21974:	strmi	pc, [r0], #207	; 0xcf
   21978:	usatle	lr, #2, r0, asr #30
   2197c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   21980:	ldmvc	r5!, {r6, sl, fp, pc}
   21984:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   21988:	addsvs	r3, r1, r0, lsl #26
   2198c:	mvnmi	r5, #228, 16	; 0xe40000
   21990:	strbvs	ip, [lr, -r0, lsl #16]
   21994:			; <UNDEFINED> instruction: 0x43abc16d
   21998:	ldrbhi	sl, [r8]
   2199c:	cmnmi	r6, #1459617792	; 0x57000000
   219a0:	strbcc	r8, [r0, r0]!
   219a4:	movtmi	ip, #4985	; 0x1379
   219a8:	ldrtcs	r0, [r4], -r0
   219ac:	movwmi	r6, #52213	; 0xcbf5
   219b0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   219b4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   219b8:	strb	r0, [r0, #-0]
   219bc:	adcmi	r3, r2, #156	; 0x9c
   219c0:	andge	r0, r0, #0
   219c4:	rsbmi	r1, sp, #148, 20	; 0x94000
   219c8:	stmda	r0, {}	; <UNPREDICTABLE>
   219cc:	eorsmi	r4, r7, #7733248	; 0x760000
   219d0:	andcs	r0, r0, r0
   219d4:	andmi	sl, r2, #95	; 0x5f
   219d8:	andeq	r0, r0, r0
   219dc:	bicmi	ip, sp, r5, ror #26
   219e0:	andeq	r0, r0, r0
   219e4:	orrsmi	sp, r7, r4, lsl #15
   219e8:	andeq	r0, r0, r0
   219ec:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   219f0:	andeq	r0, r0, r0
   219f4:	smlawbmi	lr, r0, r4, r8
   219f8:	andeq	r0, r0, r0
   219fc:	rscsmi	r6, r8, r0, lsl #20
   21a00:	andeq	r0, r0, r0
   21a04:	sbcmi	r8, r3, r0, lsl #16
   21a08:	andeq	r0, r0, r0
   21a0c:	addmi	r4, pc, r0
   21a10:	andeq	r0, r0, r0
   21a14:	subsmi	r0, r9, r0
   21a18:	push	{r4, sl, fp, lr}
   21a1c:	add	fp, sp, #8
   21a20:	sub	sp, sp, #48	; 0x30
   21a24:	ldr	ip, [fp, #12]
   21a28:	ldr	lr, [fp, #8]
   21a2c:	ldr	r4, [fp, #16]
   21a30:	str	r0, [fp, #-16]
   21a34:	str	r1, [fp, #-20]	; 0xffffffec
   21a38:	str	r2, [fp, #-24]	; 0xffffffe8
   21a3c:	str	r3, [sp, #28]
   21a40:	str	ip, [sp, #20]
   21a44:	str	lr, [sp, #16]
   21a48:	ldr	r0, [sp, #28]
   21a4c:	cmp	r0, #0
   21a50:	str	r4, [sp, #12]
   21a54:	beq	21a74 <flatcc_json_parser_struct_as_root@@Base+0x12b8>
   21a58:	ldr	r0, [fp, #-16]
   21a5c:	ldr	r1, [fp, #-20]	; 0xffffffec
   21a60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   21a64:	movw	r3, #8
   21a68:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   21a6c:	str	r0, [fp, #-12]
   21a70:	b	21ac4 <flatcc_json_parser_struct_as_root@@Base+0x1308>
   21a74:	ldr	r0, [sp, #16]
   21a78:	ldr	r1, [sp, #20]
   21a7c:	subs	r0, r0, #256	; 0x100
   21a80:	sbcs	r1, r1, #0
   21a84:	str	r0, [sp, #8]
   21a88:	str	r1, [sp, #4]
   21a8c:	bcc	21ab0 <flatcc_json_parser_struct_as_root@@Base+0x12f4>
   21a90:	b	21a94 <flatcc_json_parser_struct_as_root@@Base+0x12d8>
   21a94:	ldr	r0, [fp, #-16]
   21a98:	ldr	r1, [fp, #-20]	; 0xffffffec
   21a9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   21aa0:	movw	r3, #7
   21aa4:	bl	1c0b0 <flatcc_json_parser_set_error@@Base>
   21aa8:	str	r0, [fp, #-12]
   21aac:	b	21ac4 <flatcc_json_parser_struct_as_root@@Base+0x1308>
   21ab0:	ldrb	r0, [sp, #16]
   21ab4:	ldr	r1, [fp, #16]
   21ab8:	strb	r0, [r1]
   21abc:	ldr	r0, [fp, #-20]	; 0xffffffec
   21ac0:	str	r0, [fp, #-12]
   21ac4:	ldr	r0, [fp, #-12]
   21ac8:	sub	sp, fp, #8
   21acc:	pop	{r4, sl, fp, pc}
   21ad0:	push	{fp, lr}
   21ad4:	mov	fp, sp
   21ad8:	sub	sp, sp, #16
   21adc:	str	r0, [fp, #-4]
   21ae0:	str	r1, [sp, #8]
   21ae4:	str	r2, [sp, #4]
   21ae8:	ldr	r0, [fp, #-4]
   21aec:	ldr	r1, [sp, #8]
   21af0:	ldr	r2, [sp, #4]
   21af4:	bl	1deec <flatcc_json_parser_float@@Base+0x254>
   21af8:	str	r0, [sp, #8]
   21afc:	ldr	r0, [fp, #-4]
   21b00:	ldr	r0, [r0, #12]
   21b04:	cmp	r0, #0
   21b08:	bne	21b20 <flatcc_json_parser_struct_as_root@@Base+0x1364>
   21b0c:	ldr	r0, [fp, #-4]
   21b10:	ldr	r1, [sp, #8]
   21b14:	ldr	r2, [sp, #4]
   21b18:	bl	1ce3c <flatcc_json_parser_skip_constant@@Base+0x104>
   21b1c:	str	r0, [sp, #8]
   21b20:	ldr	r0, [sp, #8]
   21b24:	mov	sp, fp
   21b28:	pop	{fp, pc}
   21b2c:	sub	sp, sp, #4
   21b30:	strb	r0, [sp, #3]
   21b34:	ldrb	r0, [sp, #3]
   21b38:	add	sp, sp, #4
   21b3c:	bx	lr
   21b40:	eor	r1, r1, #-2147483648	; 0x80000000
   21b44:	b	21b4c <flatcc_json_parser_struct_as_root@@Base+0x1390>
   21b48:	eor	r3, r3, #-2147483648	; 0x80000000
   21b4c:	push	{r4, r5, lr}
   21b50:	lsl	r4, r1, #1
   21b54:	lsl	r5, r3, #1
   21b58:	teq	r4, r5
   21b5c:	teqeq	r0, r2
   21b60:	orrsne	ip, r4, r0
   21b64:	orrsne	ip, r5, r2
   21b68:	mvnsne	ip, r4, asr #21
   21b6c:	mvnsne	ip, r5, asr #21
   21b70:	beq	21d5c <flatcc_json_parser_struct_as_root@@Base+0x15a0>
   21b74:	lsr	r4, r4, #21
   21b78:	rsbs	r5, r4, r5, lsr #21
   21b7c:	rsblt	r5, r5, #0
   21b80:	ble	21ba0 <flatcc_json_parser_struct_as_root@@Base+0x13e4>
   21b84:	add	r4, r4, r5
   21b88:	eor	r2, r0, r2
   21b8c:	eor	r3, r1, r3
   21b90:	eor	r0, r2, r0
   21b94:	eor	r1, r3, r1
   21b98:	eor	r2, r0, r2
   21b9c:	eor	r3, r1, r3
   21ba0:	cmp	r5, #54	; 0x36
   21ba4:	pophi	{r4, r5, pc}
   21ba8:	tst	r1, #-2147483648	; 0x80000000
   21bac:	lsl	r1, r1, #12
   21bb0:	mov	ip, #1048576	; 0x100000
   21bb4:	orr	r1, ip, r1, lsr #12
   21bb8:	beq	21bc4 <flatcc_json_parser_struct_as_root@@Base+0x1408>
   21bbc:	rsbs	r0, r0, #0
   21bc0:	rsc	r1, r1, #0
   21bc4:	tst	r3, #-2147483648	; 0x80000000
   21bc8:	lsl	r3, r3, #12
   21bcc:	orr	r3, ip, r3, lsr #12
   21bd0:	beq	21bdc <flatcc_json_parser_struct_as_root@@Base+0x1420>
   21bd4:	rsbs	r2, r2, #0
   21bd8:	rsc	r3, r3, #0
   21bdc:	teq	r4, r5
   21be0:	beq	21d44 <flatcc_json_parser_struct_as_root@@Base+0x1588>
   21be4:	sub	r4, r4, #1
   21be8:	rsbs	lr, r5, #32
   21bec:	blt	21c08 <flatcc_json_parser_struct_as_root@@Base+0x144c>
   21bf0:	lsl	ip, r2, lr
   21bf4:	adds	r0, r0, r2, lsr r5
   21bf8:	adc	r1, r1, #0
   21bfc:	adds	r0, r0, r3, lsl lr
   21c00:	adcs	r1, r1, r3, asr r5
   21c04:	b	21c24 <flatcc_json_parser_struct_as_root@@Base+0x1468>
   21c08:	sub	r5, r5, #32
   21c0c:	add	lr, lr, #32
   21c10:	cmp	r2, #1
   21c14:	lsl	ip, r3, lr
   21c18:	orrcs	ip, ip, #2
   21c1c:	adds	r0, r0, r3, asr r5
   21c20:	adcs	r1, r1, r3, asr #31
   21c24:	and	r5, r1, #-2147483648	; 0x80000000
   21c28:	bpl	21c38 <flatcc_json_parser_struct_as_root@@Base+0x147c>
   21c2c:	rsbs	ip, ip, #0
   21c30:	rscs	r0, r0, #0
   21c34:	rsc	r1, r1, #0
   21c38:	cmp	r1, #1048576	; 0x100000
   21c3c:	bcc	21c7c <flatcc_json_parser_struct_as_root@@Base+0x14c0>
   21c40:	cmp	r1, #2097152	; 0x200000
   21c44:	bcc	21c64 <flatcc_json_parser_struct_as_root@@Base+0x14a8>
   21c48:	lsrs	r1, r1, #1
   21c4c:	rrxs	r0, r0
   21c50:	rrx	ip, ip
   21c54:	add	r4, r4, #1
   21c58:	lsl	r2, r4, #21
   21c5c:	cmn	r2, #4194304	; 0x400000
   21c60:	bcs	21dbc <flatcc_json_parser_struct_as_root@@Base+0x1600>
   21c64:	cmp	ip, #-2147483648	; 0x80000000
   21c68:	lsrseq	ip, r0, #1
   21c6c:	adcs	r0, r0, #0
   21c70:	adc	r1, r1, r4, lsl #20
   21c74:	orr	r1, r1, r5
   21c78:	pop	{r4, r5, pc}
   21c7c:	lsls	ip, ip, #1
   21c80:	adcs	r0, r0, r0
   21c84:	adc	r1, r1, r1
   21c88:	tst	r1, #1048576	; 0x100000
   21c8c:	sub	r4, r4, #1
   21c90:	bne	21c64 <flatcc_json_parser_struct_as_root@@Base+0x14a8>
   21c94:	teq	r1, #0
   21c98:	moveq	r1, r0
   21c9c:	moveq	r0, #0
   21ca0:	clz	r3, r1
   21ca4:	addeq	r3, r3, #32
   21ca8:	sub	r3, r3, #11
   21cac:	subs	r2, r3, #32
   21cb0:	bge	21cd4 <flatcc_json_parser_struct_as_root@@Base+0x1518>
   21cb4:	adds	r2, r2, #12
   21cb8:	ble	21cd0 <flatcc_json_parser_struct_as_root@@Base+0x1514>
   21cbc:	add	ip, r2, #20
   21cc0:	rsb	r2, r2, #12
   21cc4:	lsl	r0, r1, ip
   21cc8:	lsr	r1, r1, r2
   21ccc:	b	21ce4 <flatcc_json_parser_struct_as_root@@Base+0x1528>
   21cd0:	add	r2, r2, #20
   21cd4:	rsble	ip, r2, #32
   21cd8:	lsl	r1, r1, r2
   21cdc:	orrle	r1, r1, r0, lsr ip
   21ce0:	lslle	r0, r0, r2
   21ce4:	subs	r4, r4, r3
   21ce8:	addge	r1, r1, r4, lsl #20
   21cec:	orrge	r1, r1, r5
   21cf0:	popge	{r4, r5, pc}
   21cf4:	mvn	r4, r4
   21cf8:	subs	r4, r4, #31
   21cfc:	bge	21d38 <flatcc_json_parser_struct_as_root@@Base+0x157c>
   21d00:	adds	r4, r4, #12
   21d04:	bgt	21d20 <flatcc_json_parser_struct_as_root@@Base+0x1564>
   21d08:	add	r4, r4, #20
   21d0c:	rsb	r2, r4, #32
   21d10:	lsr	r0, r0, r4
   21d14:	orr	r0, r0, r1, lsl r2
   21d18:	orr	r1, r5, r1, lsr r4
   21d1c:	pop	{r4, r5, pc}
   21d20:	rsb	r4, r4, #12
   21d24:	rsb	r2, r4, #32
   21d28:	lsr	r0, r0, r2
   21d2c:	orr	r0, r0, r1, lsl r4
   21d30:	mov	r1, r5
   21d34:	pop	{r4, r5, pc}
   21d38:	lsr	r0, r1, r4
   21d3c:	mov	r1, r5
   21d40:	pop	{r4, r5, pc}
   21d44:	teq	r4, #0
   21d48:	eor	r3, r3, #1048576	; 0x100000
   21d4c:	eoreq	r1, r1, #1048576	; 0x100000
   21d50:	addeq	r4, r4, #1
   21d54:	subne	r5, r5, #1
   21d58:	b	21be4 <flatcc_json_parser_struct_as_root@@Base+0x1428>
   21d5c:	mvns	ip, r4, asr #21
   21d60:	mvnsne	ip, r5, asr #21
   21d64:	beq	21dcc <flatcc_json_parser_struct_as_root@@Base+0x1610>
   21d68:	teq	r4, r5
   21d6c:	teqeq	r0, r2
   21d70:	beq	21d84 <flatcc_json_parser_struct_as_root@@Base+0x15c8>
   21d74:	orrs	ip, r4, r0
   21d78:	moveq	r1, r3
   21d7c:	moveq	r0, r2
   21d80:	pop	{r4, r5, pc}
   21d84:	teq	r1, r3
   21d88:	movne	r1, #0
   21d8c:	movne	r0, #0
   21d90:	popne	{r4, r5, pc}
   21d94:	lsrs	ip, r4, #21
   21d98:	bne	21dac <flatcc_json_parser_struct_as_root@@Base+0x15f0>
   21d9c:	lsls	r0, r0, #1
   21da0:	adcs	r1, r1, r1
   21da4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   21da8:	pop	{r4, r5, pc}
   21dac:	adds	r4, r4, #4194304	; 0x400000
   21db0:	addcc	r1, r1, #1048576	; 0x100000
   21db4:	popcc	{r4, r5, pc}
   21db8:	and	r5, r1, #-2147483648	; 0x80000000
   21dbc:	orr	r1, r5, #2130706432	; 0x7f000000
   21dc0:	orr	r1, r1, #15728640	; 0xf00000
   21dc4:	mov	r0, #0
   21dc8:	pop	{r4, r5, pc}
   21dcc:	mvns	ip, r4, asr #21
   21dd0:	movne	r1, r3
   21dd4:	movne	r0, r2
   21dd8:	mvnseq	ip, r5, asr #21
   21ddc:	movne	r3, r1
   21de0:	movne	r2, r0
   21de4:	orrs	r4, r0, r1, lsl #12
   21de8:	orrseq	r5, r2, r3, lsl #12
   21dec:	teqeq	r1, r3
   21df0:	orrne	r1, r1, #524288	; 0x80000
   21df4:	pop	{r4, r5, pc}
   21df8:	teq	r0, #0
   21dfc:	moveq	r1, #0
   21e00:	bxeq	lr
   21e04:	push	{r4, r5, lr}
   21e08:	mov	r4, #1024	; 0x400
   21e0c:	add	r4, r4, #50	; 0x32
   21e10:	mov	r5, #0
   21e14:	mov	r1, #0
   21e18:	b	21c94 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   21e1c:	teq	r0, #0
   21e20:	moveq	r1, #0
   21e24:	bxeq	lr
   21e28:	push	{r4, r5, lr}
   21e2c:	mov	r4, #1024	; 0x400
   21e30:	add	r4, r4, #50	; 0x32
   21e34:	ands	r5, r0, #-2147483648	; 0x80000000
   21e38:	rsbmi	r0, r0, #0
   21e3c:	mov	r1, #0
   21e40:	b	21c94 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   21e44:	lsls	r2, r0, #1
   21e48:	asr	r1, r2, #3
   21e4c:	rrx	r1, r1
   21e50:	lsl	r0, r2, #28
   21e54:	andsne	r3, r2, #-16777216	; 0xff000000
   21e58:	teqne	r3, #-16777216	; 0xff000000
   21e5c:	eorne	r1, r1, #939524096	; 0x38000000
   21e60:	bxne	lr
   21e64:	bics	r2, r2, #-16777216	; 0xff000000
   21e68:	bxeq	lr
   21e6c:	teq	r3, #-16777216	; 0xff000000
   21e70:	orreq	r1, r1, #524288	; 0x80000
   21e74:	bxeq	lr
   21e78:	push	{r4, r5, lr}
   21e7c:	mov	r4, #896	; 0x380
   21e80:	and	r5, r1, #-2147483648	; 0x80000000
   21e84:	bic	r1, r1, #-2147483648	; 0x80000000
   21e88:	b	21c94 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   21e8c:	orrs	r2, r0, r1
   21e90:	bxeq	lr
   21e94:	push	{r4, r5, lr}
   21e98:	mov	r5, #0
   21e9c:	b	21ebc <flatcc_json_parser_struct_as_root@@Base+0x1700>
   21ea0:	orrs	r2, r0, r1
   21ea4:	bxeq	lr
   21ea8:	push	{r4, r5, lr}
   21eac:	ands	r5, r1, #-2147483648	; 0x80000000
   21eb0:	bpl	21ebc <flatcc_json_parser_struct_as_root@@Base+0x1700>
   21eb4:	rsbs	r0, r0, #0
   21eb8:	rsc	r1, r1, #0
   21ebc:	mov	r4, #1024	; 0x400
   21ec0:	add	r4, r4, #50	; 0x32
   21ec4:	lsrs	ip, r1, #22
   21ec8:	beq	21c38 <flatcc_json_parser_struct_as_root@@Base+0x147c>
   21ecc:	mov	r2, #3
   21ed0:	lsrs	ip, ip, #3
   21ed4:	addne	r2, r2, #3
   21ed8:	lsrs	ip, ip, #3
   21edc:	addne	r2, r2, #3
   21ee0:	add	r2, r2, ip, lsr #3
   21ee4:	rsb	r3, r2, #32
   21ee8:	lsl	ip, r0, r3
   21eec:	lsr	r0, r0, r2
   21ef0:	orr	r0, r0, r1, lsl r3
   21ef4:	lsr	r1, r1, r2
   21ef8:	add	r4, r4, r2
   21efc:	b	21c38 <flatcc_json_parser_struct_as_root@@Base+0x147c>

00021f00 <__libc_csu_init@@Base>:
   21f00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21f04:	mov	r7, r0
   21f08:	ldr	r6, [pc, #72]	; 21f58 <__libc_csu_init@@Base+0x58>
   21f0c:	ldr	r5, [pc, #72]	; 21f5c <__libc_csu_init@@Base+0x5c>
   21f10:	add	r6, pc, r6
   21f14:	add	r5, pc, r5
   21f18:	sub	r6, r6, r5
   21f1c:	mov	r8, r1
   21f20:	mov	r9, r2
   21f24:	bl	128ac <free@plt-0x20>
   21f28:	asrs	r6, r6, #2
   21f2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f30:	mov	r4, #0
   21f34:	add	r4, r4, #1
   21f38:	ldr	r3, [r5], #4
   21f3c:	mov	r2, r9
   21f40:	mov	r1, r8
   21f44:	mov	r0, r7
   21f48:	blx	r3
   21f4c:	cmp	r6, r4
   21f50:	bne	21f34 <__libc_csu_init@@Base+0x34>
   21f54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f58:	strdeq	r2, [r1], -r4
   21f5c:	andeq	r2, r1, ip, ror #31

00021f60 <__libc_csu_fini@@Base>:
   21f60:	bx	lr

Disassembly of section .fini:

00021f64 <.fini>:
   21f64:	push	{r3, lr}
   21f68:	pop	{r3, pc}
