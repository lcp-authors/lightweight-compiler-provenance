
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000ff8 <.init>:
     ff8:	push	{r3, lr}
     ffc:	bl	1150 <o_strchr@plt+0xc>
    1000:	pop	{r3, pc}

Disassembly of section .plt:

00001004 <strstr@plt-0x14>:
    1004:	push	{lr}		; (str lr, [sp, #-4]!)
    1008:	ldr	lr, [pc, #4]	; 1014 <strstr@plt-0x4>
    100c:	add	lr, pc, lr
    1010:	ldr	pc, [lr, #8]!
    1014:	andeq	r2, r1, ip, ror #31

00001018 <strstr@plt>:
    1018:	add	ip, pc, #0, 12
    101c:	add	ip, ip, #73728	; 0x12000
    1020:	ldr	pc, [ip, #4076]!	; 0xfec

00001024 <strcasestr@plt>:
    1024:	add	ip, pc, #0, 12
    1028:	add	ip, ip, #73728	; 0x12000
    102c:	ldr	pc, [ip, #4068]!	; 0xfe4

00001030 <strcmp@plt>:
    1030:	add	ip, pc, #0, 12
    1034:	add	ip, ip, #73728	; 0x12000
    1038:	ldr	pc, [ip, #4060]!	; 0xfdc

0000103c <__cxa_finalize@plt>:
    103c:	add	ip, pc, #0, 12
    1040:	add	ip, ip, #73728	; 0x12000
    1044:	ldr	pc, [ip, #4052]!	; 0xfd4

00001048 <o_free@plt>:
    1048:	add	ip, pc, #0, 12
    104c:	add	ip, ip, #73728	; 0x12000
    1050:	ldr	pc, [ip, #4044]!	; 0xfcc

00001054 <memcpy@plt>:
    1054:	add	ip, pc, #0, 12
    1058:	add	ip, ip, #73728	; 0x12000
    105c:	ldr	pc, [ip, #4036]!	; 0xfc4

00001060 <o_base64_encode@plt>:
    1060:	add	ip, pc, #0, 12
    1064:	add	ip, ip, #73728	; 0x12000
    1068:	ldr	pc, [ip, #4028]!	; 0xfbc

0000106c <strcasecmp@plt>:
    106c:	add	ip, pc, #0, 12
    1070:	add	ip, ip, #73728	; 0x12000
    1074:	ldr	pc, [ip, #4020]!	; 0xfb4

00001078 <strcpy@plt>:
    1078:	add	ip, pc, #0, 12
    107c:	add	ip, ip, #73728	; 0x12000
    1080:	ldr	pc, [ip, #4012]!	; 0xfac

00001084 <o_realloc@plt>:
    1084:	add	ip, pc, #0, 12
    1088:	add	ip, ip, #73728	; 0x12000
    108c:	ldr	pc, [ip, #4004]!	; 0xfa4

00001090 <str_replace@plt>:
    1090:	add	ip, pc, #0, 12
    1094:	add	ip, ip, #73728	; 0x12000
    1098:	ldr	pc, [ip, #3996]!	; 0xf9c

0000109c <__gmon_start__@plt>:
    109c:	add	ip, pc, #0, 12
    10a0:	add	ip, ip, #73728	; 0x12000
    10a4:	ldr	pc, [ip, #3988]!	; 0xf94

000010a8 <__ctype_b_loc@plt>:
    10a8:	add	ip, pc, #0, 12
    10ac:	add	ip, ip, #73728	; 0x12000
    10b0:	ldr	pc, [ip, #3980]!	; 0xf8c

000010b4 <strlen@plt>:
    10b4:	add	ip, pc, #0, 12
    10b8:	add	ip, ip, #73728	; 0x12000
    10bc:	ldr	pc, [ip, #3972]!	; 0xf84

000010c0 <strchr@plt>:
    10c0:	add	ip, pc, #0, 12
    10c4:	add	ip, ip, #73728	; 0x12000
    10c8:	ldr	pc, [ip, #3964]!	; 0xf7c

000010cc <strncasecmp@plt>:
    10cc:	add	ip, pc, #0, 12
    10d0:	add	ip, ip, #73728	; 0x12000
    10d4:	ldr	pc, [ip, #3956]!	; 0xf74

000010d8 <snprintf@plt>:
    10d8:	add	ip, pc, #0, 12
    10dc:	add	ip, ip, #73728	; 0x12000
    10e0:	ldr	pc, [ip, #3948]!	; 0xf6c

000010e4 <o_malloc@plt>:
    10e4:	add	ip, pc, #0, 12
    10e8:	add	ip, ip, #73728	; 0x12000
    10ec:	ldr	pc, [ip, #3940]!	; 0xf64

000010f0 <memset@plt>:
    10f0:	add	ip, pc, #0, 12
    10f4:	add	ip, ip, #73728	; 0x12000
    10f8:	ldr	pc, [ip, #3932]!	; 0xf5c

000010fc <strncpy@plt>:
    10fc:	add	ip, pc, #0, 12
    1100:	add	ip, ip, #73728	; 0x12000
    1104:	ldr	pc, [ip, #3924]!	; 0xf54

00001108 <msprintf@plt>:
    1108:	add	ip, pc, #0, 12
    110c:	add	ip, ip, #73728	; 0x12000
    1110:	ldr	pc, [ip, #3916]!	; 0xf4c

00001114 <strrchr@plt>:
    1114:	add	ip, pc, #0, 12
    1118:	add	ip, ip, #73728	; 0x12000
    111c:	ldr	pc, [ip, #3908]!	; 0xf44

00001120 <o_base64_decode@plt>:
    1120:	add	ip, pc, #0, 12
    1124:	add	ip, ip, #73728	; 0x12000
    1128:	ldr	pc, [ip, #3900]!	; 0xf3c

0000112c <vsnprintf@plt>:
    112c:	add	ip, pc, #0, 12
    1130:	add	ip, ip, #73728	; 0x12000
    1134:	ldr	pc, [ip, #3892]!	; 0xf34

00001138 <strncmp@plt>:
    1138:	add	ip, pc, #0, 12
    113c:	add	ip, ip, #73728	; 0x12000
    1140:	ldr	pc, [ip, #3884]!	; 0xf2c

00001144 <o_strchr@plt>:
    1144:	add	ip, pc, #0, 12
    1148:	add	ip, ip, #73728	; 0x12000
    114c:	ldr	pc, [ip, #3876]!	; 0xf24

Disassembly of section .text:

00001150 <o_base64_encode@@Base-0x124>:
    1150:	ldr	r3, [pc, #20]	; 116c <o_strchr@plt+0x28>
    1154:	ldr	r2, [pc, #20]	; 1170 <o_strchr@plt+0x2c>
    1158:	add	r3, pc, r3
    115c:	ldr	r2, [r3, r2]
    1160:	cmp	r2, #0
    1164:	bxeq	lr
    1168:	b	109c <__gmon_start__@plt>
    116c:	andeq	r2, r1, r0, lsr #29
    1170:	andeq	r0, r0, ip, ror r0
    1174:	ldr	r0, [pc, #44]	; 11a8 <o_strchr@plt+0x64>
    1178:	ldr	r3, [pc, #44]	; 11ac <o_strchr@plt+0x68>
    117c:	add	r0, pc, r0
    1180:	add	r3, pc, r3
    1184:	cmp	r3, r0
    1188:	ldr	r3, [pc, #32]	; 11b0 <o_strchr@plt+0x6c>
    118c:	add	r3, pc, r3
    1190:	bxeq	lr
    1194:	ldr	r2, [pc, #24]	; 11b4 <o_strchr@plt+0x70>
    1198:	ldr	r3, [r3, r2]
    119c:	cmp	r3, #0
    11a0:	bxeq	lr
    11a4:	bx	r3
    11a8:	andeq	r2, r1, r0, lsl pc
    11ac:	andeq	r2, r1, ip, lsl #30
    11b0:	andeq	r2, r1, ip, ror #28
    11b4:	andeq	r0, r0, r8, ror r0
    11b8:	ldr	r0, [pc, #56]	; 11f8 <o_strchr@plt+0xb4>
    11bc:	ldr	r3, [pc, #56]	; 11fc <o_strchr@plt+0xb8>
    11c0:	add	r0, pc, r0
    11c4:	add	r3, pc, r3
    11c8:	sub	r1, r3, r0
    11cc:	ldr	r3, [pc, #44]	; 1200 <o_strchr@plt+0xbc>
    11d0:	asr	r1, r1, #2
    11d4:	add	r3, pc, r3
    11d8:	add	r1, r1, r1, lsr #31
    11dc:	asrs	r1, r1, #1
    11e0:	bxeq	lr
    11e4:	ldr	r2, [pc, #24]	; 1204 <o_strchr@plt+0xc0>
    11e8:	ldr	r3, [r3, r2]
    11ec:	cmp	r3, #0
    11f0:	bxeq	lr
    11f4:	bx	r3
    11f8:	andeq	r2, r1, ip, asr #29
    11fc:	andeq	r2, r1, r8, asr #29
    1200:	andeq	r2, r1, r4, lsr #28
    1204:	andeq	r0, r0, r0, lsl #1
    1208:	ldr	r3, [pc, #76]	; 125c <o_strchr@plt+0x118>
    120c:	ldr	r2, [pc, #76]	; 1260 <o_strchr@plt+0x11c>
    1210:	add	r3, pc, r3
    1214:	add	r2, pc, r2
    1218:	ldrb	r3, [r3]
    121c:	cmp	r3, #0
    1220:	bxne	lr
    1224:	ldr	r3, [pc, #56]	; 1264 <o_strchr@plt+0x120>
    1228:	push	{r4, lr}
    122c:	ldr	r3, [r2, r3]
    1230:	cmp	r3, #0
    1234:	beq	1244 <o_strchr@plt+0x100>
    1238:	ldr	r3, [pc, #40]	; 1268 <o_strchr@plt+0x124>
    123c:	ldr	r0, [pc, r3]
    1240:	bl	103c <__cxa_finalize@plt>
    1244:	bl	1174 <o_strchr@plt+0x30>
    1248:	ldr	r3, [pc, #28]	; 126c <o_strchr@plt+0x128>
    124c:	mov	r2, #1
    1250:	add	r3, pc, r3
    1254:	strb	r2, [r3]
    1258:	pop	{r4, pc}
    125c:	andeq	r2, r1, ip, ror lr
    1260:	andeq	r2, r1, r4, ror #27
    1264:	andeq	r0, r0, r4, ror r0
    1268:	andeq	r2, r1, r0, asr #28
    126c:	andeq	r2, r1, ip, lsr lr
    1270:	b	11b8 <o_strchr@plt+0x74>

00001274 <o_base64_encode@@Base>:
    1274:	push	{r4, r5, r6, sl, fp, lr}
    1278:	add	fp, sp, #16
    127c:	cmp	r3, #0
    1280:	mov	ip, #0
    1284:	cmpne	r0, #0
    1288:	beq	1464 <o_base64_encode@@Base+0x1f0>
    128c:	movw	r4, #43691	; 0xaaab
    1290:	lsl	r5, r1, #2
    1294:	movt	r4, #43690	; 0xaaaa
    1298:	umull	r5, r4, r5, r4
    129c:	mov	r5, #4
    12a0:	add	lr, r5, r4, lsr #1
    12a4:	movw	r5, #36409	; 0x8e39
    12a8:	lsr	r4, r4, #1
    12ac:	movt	r5, #14563	; 0x38e3
    12b0:	umull	r5, lr, lr, r5
    12b4:	add	r5, r4, lr, lsr #4
    12b8:	add	r5, r5, #5
    12bc:	cmp	r5, r1
    12c0:	bcc	1464 <o_base64_encode@@Base+0x1f0>
    12c4:	mov	ip, #0
    12c8:	cmp	r1, #3
    12cc:	str	ip, [r3]
    12d0:	blt	13c4 <o_base64_encode@@Base+0x150>
    12d4:	ldr	r5, [pc, #400]	; 146c <o_base64_encode@@Base+0x1f8>
    12d8:	add	r6, r0, r1
    12dc:	mov	ip, #0
    12e0:	add	r5, pc, r5
    12e4:	cmp	r2, #0
    12e8:	mov	lr, #0
    12ec:	beq	1344 <o_base64_encode@@Base+0xd0>
    12f0:	ldrb	r1, [r0]
    12f4:	add	lr, r2, #4
    12f8:	ldrb	r1, [r5, r1, lsr #2]
    12fc:	strb	r1, [r2]
    1300:	ldrb	r4, [r0, #1]
    1304:	ldrb	r1, [r0]
    1308:	lsr	r4, r4, #4
    130c:	bfi	r4, r1, #4, #2
    1310:	ldrb	r1, [r5, r4]
    1314:	strb	r1, [r2, #1]
    1318:	ldrb	r4, [r0, #2]
    131c:	ldrb	r1, [r0, #1]
    1320:	lsr	r4, r4, #6
    1324:	bfi	r4, r1, #2, #4
    1328:	ldrb	r1, [r5, r4]
    132c:	strb	r1, [r2, #2]
    1330:	ldrb	r1, [r0, #2]
    1334:	and	r1, r1, #63	; 0x3f
    1338:	ldrb	r1, [r5, r1]
    133c:	strb	r1, [r2, #3]
    1340:	ldr	ip, [r3]
    1344:	add	r0, r0, #3
    1348:	add	ip, ip, #4
    134c:	mov	r2, lr
    1350:	sub	r1, r6, r0
    1354:	str	ip, [r3]
    1358:	cmp	r1, #2
    135c:	bgt	12e4 <o_base64_encode@@Base+0x70>
    1360:	cmp	r1, #0
    1364:	beq	1454 <o_base64_encode@@Base+0x1e0>
    1368:	cmp	lr, #0
    136c:	beq	13d4 <o_base64_encode@@Base+0x160>
    1370:	ldrb	r2, [r0]
    1374:	ldr	r6, [pc, #244]	; 1470 <o_base64_encode@@Base+0x1fc>
    1378:	add	r6, pc, r6
    137c:	ldrb	r2, [r6, r2, lsr #2]
    1380:	strb	r2, [lr], #1
    1384:	ldr	ip, [r3]
    1388:	add	r2, ip, #1
    138c:	cmp	r1, #1
    1390:	str	r2, [r3]
    1394:	bne	13e8 <o_base64_encode@@Base+0x174>
    1398:	cmp	lr, #0
    139c:	beq	1440 <o_base64_encode@@Base+0x1cc>
    13a0:	mov	r1, #61	; 0x3d
    13a4:	ldrb	r0, [r0]
    13a8:	strb	r1, [lr, #1]
    13ac:	ldr	r1, [pc, #192]	; 1474 <o_base64_encode@@Base+0x200>
    13b0:	and	r0, r0, #3
    13b4:	add	r1, pc, r1
    13b8:	ldrb	r0, [r1, r0, lsl #4]
    13bc:	strb	r0, [lr]
    13c0:	b	1420 <o_base64_encode@@Base+0x1ac>
    13c4:	mov	lr, r2
    13c8:	cmp	r1, #0
    13cc:	bne	1368 <o_base64_encode@@Base+0xf4>
    13d0:	b	1454 <o_base64_encode@@Base+0x1e0>
    13d4:	mov	lr, #0
    13d8:	add	r2, ip, #1
    13dc:	cmp	r1, #1
    13e0:	str	r2, [r3]
    13e4:	beq	1398 <o_base64_encode@@Base+0x124>
    13e8:	cmp	lr, #0
    13ec:	beq	1440 <o_base64_encode@@Base+0x1cc>
    13f0:	ldrb	r2, [r0, #1]
    13f4:	ldrb	r1, [r0]
    13f8:	lsr	r2, r2, #4
    13fc:	bfi	r2, r1, #4, #2
    1400:	ldr	r1, [pc, #112]	; 1478 <o_base64_encode@@Base+0x204>
    1404:	add	r1, pc, r1
    1408:	ldrb	r2, [r1, r2]
    140c:	strb	r2, [lr]
    1410:	ldrb	r0, [r0, #1]
    1414:	and	r0, r0, #15
    1418:	ldrb	r0, [r1, r0, lsl #2]
    141c:	strb	r0, [lr, #1]
    1420:	ldr	r0, [r3]
    1424:	add	r0, r0, #2
    1428:	str	r0, [r3]
    142c:	mov	r0, #61	; 0x3d
    1430:	strb	r0, [lr, #2]
    1434:	add	lr, lr, #3
    1438:	ldr	r0, [r3]
    143c:	b	144c <o_base64_encode@@Base+0x1d8>
    1440:	add	r0, ip, #3
    1444:	mov	lr, #0
    1448:	str	r0, [r3]
    144c:	add	r0, r0, #1
    1450:	str	r0, [r3]
    1454:	cmp	lr, #0
    1458:	mov	ip, #1
    145c:	movne	r0, #0
    1460:	strbne	r0, [lr]
    1464:	mov	r0, ip
    1468:	pop	{r4, r5, r6, sl, fp, pc}
    146c:	andeq	r1, r0, r0, ror #23
    1470:	andeq	r1, r0, r8, asr #22
    1474:	andeq	r1, r0, ip, lsl #22
    1478:			; <UNDEFINED> instruction: 0x00001abc

0000147c <o_base64_decode@@Base>:
    147c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1480:	add	fp, sp, #28
    1484:	sub	sp, sp, #268	; 0x10c
    1488:	mov	r6, r0
    148c:	mov	r0, #0
    1490:	cmp	r6, #0
    1494:	beq	14ac <o_base64_decode@@Base+0x30>
    1498:	cmp	r1, #0
    149c:	mov	r5, r1
    14a0:	movne	r7, r3
    14a4:	cmpne	r3, #0
    14a8:	bne	14b4 <o_base64_decode@@Base+0x38>
    14ac:	sub	sp, fp, #28
    14b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14b4:	add	r4, sp, #8
    14b8:	mov	sl, r2
    14bc:	mov	r1, #128	; 0x80
    14c0:	mov	r2, #256	; 0x100
    14c4:	mov	r0, r4
    14c8:	bl	10f0 <memset@plt>
    14cc:	ldr	r1, [pc, #392]	; 165c <o_base64_decode@@Base+0x1e0>
    14d0:	mov	r0, #0
    14d4:	add	r1, pc, r1
    14d8:	ldrb	r2, [r1, r0]
    14dc:	strb	r0, [r4, r2]
    14e0:	add	r0, r0, #1
    14e4:	cmp	r0, #64	; 0x40
    14e8:	bne	14d8 <o_base64_decode@@Base+0x5c>
    14ec:	mov	r1, #0
    14f0:	mov	r0, #0
    14f4:	strb	r1, [sp, #69]	; 0x45
    14f8:	ldrb	r2, [r6, r0]
    14fc:	add	r0, r0, #1
    1500:	ldrb	r2, [r4, r2]
    1504:	cmp	r2, #128	; 0x80
    1508:	addne	r1, r1, #1
    150c:	cmp	r5, r0
    1510:	bne	14f8 <o_base64_decode@@Base+0x7c>
    1514:	mov	r0, #0
    1518:	cmp	r1, #0
    151c:	beq	14ac <o_base64_decode@@Base+0x30>
    1520:	ands	r1, r1, #3
    1524:	bne	14ac <o_base64_decode@@Base+0x30>
    1528:	mov	r8, #0
    152c:	str	r7, [sp]
    1530:	mov	r9, #0
    1534:	str	r8, [r7]
    1538:	mov	r7, #0
    153c:	ldrb	r1, [r6, r9]
    1540:	ldr	r0, [pc, #280]	; 1660 <o_base64_decode@@Base+0x1e4>
    1544:	add	r0, pc, r0
    1548:	bl	1144 <o_strchr@plt>
    154c:	ldrb	r1, [r6, r9]
    1550:	cmp	r0, #0
    1554:	bne	1570 <o_base64_decode@@Base+0xf4>
    1558:	sub	r0, r1, #9
    155c:	cmp	r0, #2
    1560:	bcc	1570 <o_base64_decode@@Base+0xf4>
    1564:	cmp	r1, #61	; 0x3d
    1568:	cmpne	r1, #32
    156c:	bne	1618 <o_base64_decode@@Base+0x19c>
    1570:	ldrb	r0, [r4, r1]
    1574:	cmp	r0, #128	; 0x80
    1578:	beq	1600 <o_base64_decode@@Base+0x184>
    157c:	add	r2, sp, #4
    1580:	cmp	r1, #61	; 0x3d
    1584:	strb	r0, [r2, r7]
    1588:	add	r7, r7, #1
    158c:	addeq	r8, r8, #1
    1590:	cmp	r7, #4
    1594:	bne	1600 <o_base64_decode@@Base+0x184>
    1598:	mov	r0, #0
    159c:	cmp	sl, #0
    15a0:	mov	r2, #0
    15a4:	beq	15e0 <o_base64_decode@@Base+0x164>
    15a8:	ldrb	r2, [sp, #5]
    15ac:	ldrb	r1, [sp, #4]
    15b0:	lsr	r3, r2, #4
    15b4:	orr	r1, r3, r1, lsl #2
    15b8:	strb	r1, [sl]
    15bc:	ldrb	r1, [sp, #6]
    15c0:	lsr	r1, r1, #2
    15c4:	orr	r1, r1, r2, lsl #4
    15c8:	strb	r1, [sl, #1]
    15cc:	ldrb	r1, [sp, #6]
    15d0:	ldrb	r2, [sp, #7]
    15d4:	orr	r1, r2, r1, lsl #6
    15d8:	add	r2, sl, #3
    15dc:	strb	r1, [sl, #2]
    15e0:	ldr	r7, [sp]
    15e4:	cmp	r8, #0
    15e8:	ldr	r1, [r7]
    15ec:	add	r3, r1, #3
    15f0:	str	r3, [r7]
    15f4:	bne	1624 <o_base64_decode@@Base+0x1a8>
    15f8:	mov	sl, r2
    15fc:	mov	r7, r8
    1600:	add	r9, r9, #1
    1604:	cmp	r9, r5
    1608:	bcc	153c <o_base64_decode@@Base+0xc0>
    160c:	mov	r0, #1
    1610:	sub	sp, fp, #28
    1614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1618:	mov	r0, #0
    161c:	sub	sp, fp, #28
    1620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1624:	cmp	r8, #2
    1628:	beq	1648 <o_base64_decode@@Base+0x1cc>
    162c:	cmp	r8, #1
    1630:	bne	14ac <o_base64_decode@@Base+0x30>
    1634:	add	r0, r1, #2
    1638:	str	r0, [r7]
    163c:	mov	r0, #1
    1640:	sub	sp, fp, #28
    1644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1648:	add	r0, r1, #1
    164c:	str	r0, [r7]
    1650:	mov	r0, #1
    1654:	sub	sp, fp, #28
    1658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    165c:	andeq	r1, r0, ip, ror #19
    1660:	andeq	r1, r0, ip, ror r9

00001664 <o_base64url_encode@@Base>:
    1664:	push	{r4, r5, fp, lr}
    1668:	add	fp, sp, #8
    166c:	mov	r4, r3
    1670:	cmp	r2, #0
    1674:	beq	16b4 <o_base64url_encode@@Base+0x50>
    1678:	mov	r3, r4
    167c:	mov	r5, r2
    1680:	bl	1060 <o_base64_encode@plt>
    1684:	cmp	r0, #0
    1688:	moveq	r0, #0
    168c:	popeq	{r4, r5, fp, pc}
    1690:	ldr	r2, [r4]
    1694:	cmp	r2, #2
    1698:	bcc	1704 <o_base64url_encode@@Base+0xa0>
    169c:	add	r1, r5, r2
    16a0:	mvn	r3, #1
    16a4:	ldrb	ip, [r1, #-2]!
    16a8:	cmp	ip, #61	; 0x3d
    16ac:	bne	170c <o_base64url_encode@@Base+0xa8>
    16b0:	b	1720 <o_base64url_encode@@Base+0xbc>
    16b4:	cmp	r1, #0
    16b8:	mov	r0, #0
    16bc:	cmpne	r4, #0
    16c0:	beq	1770 <o_base64url_encode@@Base+0x10c>
    16c4:	vmov	s0, r1
    16c8:	vmov.f64	d16, #16	; 0x40800000  4.0
    16cc:	vmov.f64	d18, #8	; 0x40400000  3.0
    16d0:	mov	r0, #1
    16d4:	vcvt.f64.u32	d17, s0
    16d8:	vmul.f64	d16, d17, d16
    16dc:	vmov.f64	d17, #112	; 0x3f800000  1.0
    16e0:	vdiv.f64	d16, d16, d18
    16e4:	vrintm.f64	d18, d16
    16e8:	vcmp.f64	d16, d18
    16ec:	vadd.f64	d17, d18, d17
    16f0:	vmrs	APSR_nzcv, fpscr
    16f4:	vseleq.f64	d16, d16, d17
    16f8:	vcvt.u32.f64	s0, d16
    16fc:	vstr	s0, [r4]
    1700:	pop	{r4, r5, fp, pc}
    1704:	cmp	r2, #0
    1708:	beq	1770 <o_base64url_encode@@Base+0x10c>
    170c:	add	r1, r5, r2
    1710:	mvn	r3, #0
    1714:	ldrb	r2, [r1, #-1]!
    1718:	cmp	r2, #61	; 0x3d
    171c:	bne	1738 <o_base64url_encode@@Base+0xd4>
    1720:	mov	r2, #0
    1724:	strb	r2, [r1]
    1728:	ldr	r1, [r4]
    172c:	adds	r1, r1, r3
    1730:	str	r1, [r4]
    1734:	popeq	{r4, r5, fp, pc}
    1738:	mov	r1, #0
    173c:	ldrb	r2, [r5, r1]
    1740:	cmp	r2, #43	; 0x2b
    1744:	beq	1758 <o_base64url_encode@@Base+0xf4>
    1748:	cmp	r2, #47	; 0x2f
    174c:	bne	1760 <o_base64url_encode@@Base+0xfc>
    1750:	mov	r2, #95	; 0x5f
    1754:	b	175c <o_base64url_encode@@Base+0xf8>
    1758:	mov	r2, #45	; 0x2d
    175c:	strb	r2, [r5, r1]
    1760:	ldr	r2, [r4]
    1764:	add	r1, r1, #1
    1768:	cmp	r1, r2
    176c:	bcc	173c <o_base64url_encode@@Base+0xd8>
    1770:	pop	{r4, r5, fp, pc}

00001774 <o_base64url_decode@@Base>:
    1774:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1778:	add	fp, sp, #24
    177c:	cmp	r0, #0
    1780:	beq	181c <o_base64url_decode@@Base+0xa8>
    1784:	mov	r4, r0
    1788:	add	r0, r1, #3
    178c:	mov	r8, r3
    1790:	mov	r5, r2
    1794:	mov	r6, r1
    1798:	bl	10e4 <o_malloc@plt>
    179c:	cmp	r0, #0
    17a0:	beq	181c <o_base64url_decode@@Base+0xa8>
    17a4:	mov	r1, r4
    17a8:	mov	r2, r6
    17ac:	mov	r7, r0
    17b0:	bl	1054 <memcpy@plt>
    17b4:	cmp	r6, #0
    17b8:	beq	17f4 <o_base64url_decode@@Base+0x80>
    17bc:	mov	r0, r7
    17c0:	mov	r1, r6
    17c4:	ldrb	r2, [r0]
    17c8:	cmp	r2, #45	; 0x2d
    17cc:	beq	17e0 <o_base64url_decode@@Base+0x6c>
    17d0:	cmp	r2, #95	; 0x5f
    17d4:	bne	17e8 <o_base64url_decode@@Base+0x74>
    17d8:	mov	r2, #47	; 0x2f
    17dc:	b	17e4 <o_base64url_decode@@Base+0x70>
    17e0:	mov	r2, #43	; 0x2b
    17e4:	strb	r2, [r0]
    17e8:	add	r0, r0, #1
    17ec:	subs	r1, r1, #1
    17f0:	bne	17c4 <o_base64url_decode@@Base+0x50>
    17f4:	and	r0, r6, #3
    17f8:	cmp	r0, #3
    17fc:	beq	1824 <o_base64url_decode@@Base+0xb0>
    1800:	cmp	r0, #2
    1804:	bne	1838 <o_base64url_decode@@Base+0xc4>
    1808:	mov	r0, #61	; 0x3d
    180c:	add	r1, r6, #1
    1810:	strb	r0, [r7, r6]
    1814:	mov	r0, #2
    1818:	b	182c <o_base64url_decode@@Base+0xb8>
    181c:	mov	r0, #0
    1820:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1824:	mov	r0, #1
    1828:	mov	r1, r6
    182c:	mov	r2, #61	; 0x3d
    1830:	add	r6, r0, r6
    1834:	strb	r2, [r7, r1]
    1838:	mov	r0, r7
    183c:	mov	r1, r6
    1840:	mov	r2, r5
    1844:	mov	r3, r8
    1848:	bl	1120 <o_base64_decode@plt>
    184c:	mov	r4, r0
    1850:	mov	r0, r7
    1854:	bl	1048 <o_free@plt>
    1858:	mov	r0, r4
    185c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00001860 <o_base64url_2_base64@@Base>:
    1860:	push	{r4, r5, r6, sl, fp, lr}
    1864:	add	fp, sp, #16
    1868:	cmp	r0, #0
    186c:	moveq	r0, #0
    1870:	popeq	{r4, r5, r6, sl, fp, pc}
    1874:	mov	r6, r1
    1878:	mov	r1, r0
    187c:	mov	r5, r2
    1880:	mov	r0, r2
    1884:	mov	r4, r3
    1888:	mov	r2, r6
    188c:	bl	1054 <memcpy@plt>
    1890:	cmp	r6, #0
    1894:	str	r6, [r4]
    1898:	beq	18d4 <o_base64url_2_base64@@Base+0x74>
    189c:	mov	r0, r6
    18a0:	mov	r1, r5
    18a4:	ldrb	r2, [r1]
    18a8:	cmp	r2, #45	; 0x2d
    18ac:	beq	18c0 <o_base64url_2_base64@@Base+0x60>
    18b0:	cmp	r2, #95	; 0x5f
    18b4:	bne	18c8 <o_base64url_2_base64@@Base+0x68>
    18b8:	mov	r2, #47	; 0x2f
    18bc:	b	18c4 <o_base64url_2_base64@@Base+0x64>
    18c0:	mov	r2, #43	; 0x2b
    18c4:	strb	r2, [r1]
    18c8:	subs	r0, r0, #1
    18cc:	add	r1, r1, #1
    18d0:	bne	18a4 <o_base64url_2_base64@@Base+0x44>
    18d4:	and	r1, r6, #3
    18d8:	mov	r0, #1
    18dc:	cmp	r1, #3
    18e0:	beq	1908 <o_base64url_2_base64@@Base+0xa8>
    18e4:	cmp	r1, #2
    18e8:	popne	{r4, r5, r6, sl, fp, pc}
    18ec:	add	r1, r5, r6
    18f0:	movw	r2, #15677	; 0x3d3d
    18f4:	strh	r2, [r1]
    18f8:	ldr	r1, [r4]
    18fc:	add	r1, r1, #2
    1900:	str	r1, [r4]
    1904:	pop	{r4, r5, r6, sl, fp, pc}
    1908:	mov	r1, #61	; 0x3d
    190c:	strb	r1, [r5, r6]
    1910:	ldr	r1, [r4]
    1914:	add	r1, r1, #1
    1918:	str	r1, [r4]
    191c:	pop	{r4, r5, r6, sl, fp, pc}

00001920 <o_base64_2_base64url@@Base>:
    1920:	push	{r4, r5, r6, sl, fp, lr}
    1924:	add	fp, sp, #16
    1928:	cmp	r0, #0
    192c:	beq	1998 <o_base64_2_base64url@@Base+0x78>
    1930:	mov	r6, r1
    1934:	mov	r1, r0
    1938:	mov	r5, r2
    193c:	mov	r0, r2
    1940:	mov	r4, r3
    1944:	mov	r2, r6
    1948:	bl	1054 <memcpy@plt>
    194c:	cmp	r6, #0
    1950:	str	r6, [r4]
    1954:	beq	19a0 <o_base64_2_base64url@@Base+0x80>
    1958:	mov	r0, r5
    195c:	ldrb	r1, [r0]
    1960:	cmp	r1, #43	; 0x2b
    1964:	beq	1978 <o_base64_2_base64url@@Base+0x58>
    1968:	cmp	r1, #47	; 0x2f
    196c:	bne	1980 <o_base64_2_base64url@@Base+0x60>
    1970:	mov	r1, #95	; 0x5f
    1974:	b	197c <o_base64_2_base64url@@Base+0x5c>
    1978:	mov	r1, #45	; 0x2d
    197c:	strb	r1, [r0]
    1980:	subs	r6, r6, #1
    1984:	add	r0, r0, #1
    1988:	bne	195c <o_base64_2_base64url@@Base+0x3c>
    198c:	ldr	r0, [r4]
    1990:	sub	r1, r0, #1
    1994:	b	19a4 <o_base64_2_base64url@@Base+0x84>
    1998:	mov	r0, #0
    199c:	pop	{r4, r5, r6, sl, fp, pc}
    19a0:	mvn	r1, #0
    19a4:	ldrb	r2, [r5, r1]
    19a8:	mov	r0, #1
    19ac:	cmp	r2, #61	; 0x3d
    19b0:	popne	{r4, r5, r6, sl, fp, pc}
    19b4:	sub	r2, r5, #1
    19b8:	str	r1, [r4]
    19bc:	ldrb	r3, [r2, r1]
    19c0:	sub	r1, r1, #1
    19c4:	cmp	r3, #61	; 0x3d
    19c8:	beq	19b8 <o_base64_2_base64url@@Base+0x98>
    19cc:	pop	{r4, r5, r6, sl, fp, pc}

000019d0 <o_malloc@@Base>:
    19d0:	cmp	r0, #0
    19d4:	moveq	r0, #0
    19d8:	bxeq	lr
    19dc:	ldr	r1, [pc, #4]	; 19e8 <o_malloc@@Base+0x18>
    19e0:	ldr	r1, [pc, r1]
    19e4:	bx	r1
    19e8:	andeq	r2, r1, r0, lsr #13

000019ec <o_realloc@@Base>:
    19ec:	cmp	r1, #0
    19f0:	moveq	r0, #0
    19f4:	bxeq	lr
    19f8:	ldr	r2, [pc, #8]	; 1a08 <o_realloc@@Base+0x1c>
    19fc:	add	r2, pc, r2
    1a00:	ldr	r2, [r2, #4]
    1a04:	bx	r2
    1a08:	andeq	r2, r1, r4, lsl #13

00001a0c <o_free@@Base>:
    1a0c:	cmp	r0, #0
    1a10:	bxeq	lr
    1a14:	ldr	r1, [pc, #8]	; 1a24 <o_free@@Base+0x18>
    1a18:	add	r1, pc, r1
    1a1c:	ldr	r1, [r1, #8]
    1a20:	bx	r1
    1a24:	andeq	r2, r1, r8, ror #12

00001a28 <o_set_alloc_funcs@@Base>:
    1a28:	ldr	r3, [pc, #8]	; 1a38 <o_set_alloc_funcs@@Base+0x10>
    1a2c:	add	r3, pc, r3
    1a30:	stm	r3, {r0, r1, r2}
    1a34:	bx	lr
    1a38:	andeq	r2, r1, r4, asr r6

00001a3c <o_get_alloc_funcs@@Base>:
    1a3c:	cmp	r0, #0
    1a40:	ldrne	r3, [pc, #48]	; 1a78 <o_get_alloc_funcs@@Base+0x3c>
    1a44:	ldrne	r3, [pc, r3]
    1a48:	strne	r3, [r0]
    1a4c:	cmp	r1, #0
    1a50:	ldrne	r0, [pc, #36]	; 1a7c <o_get_alloc_funcs@@Base+0x40>
    1a54:	addne	r0, pc, r0
    1a58:	ldrne	r0, [r0, #4]
    1a5c:	strne	r0, [r1]
    1a60:	cmp	r2, #0
    1a64:	ldrne	r0, [pc, #20]	; 1a80 <o_get_alloc_funcs@@Base+0x44>
    1a68:	addne	r0, pc, r0
    1a6c:	ldrne	r0, [r0, #8]
    1a70:	strne	r0, [r2]
    1a74:	bx	lr
    1a78:	andeq	r2, r1, ip, lsr r6
    1a7c:	andeq	r2, r1, ip, lsr #12
    1a80:	andeq	r2, r1, r8, lsl r6

00001a84 <str_replace@@Base>:
    1a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a88:	add	fp, sp, #28
    1a8c:	sub	sp, sp, #12
    1a90:	mov	r4, #0
    1a94:	cmp	r0, #0
    1a98:	beq	1ab0 <str_replace@@Base+0x2c>
    1a9c:	cmp	r1, #0
    1aa0:	mov	r6, r1
    1aa4:	movne	sl, r2
    1aa8:	cmpne	r2, #0
    1aac:	bne	1abc <str_replace@@Base+0x38>
    1ab0:	mov	r0, r4
    1ab4:	sub	sp, fp, #28
    1ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1abc:	mov	r1, r6
    1ac0:	mov	r7, r0
    1ac4:	bl	1018 <strstr@plt>
    1ac8:	cmp	r0, #0
    1acc:	beq	1b9c <str_replace@@Base+0x118>
    1ad0:	sub	r5, r0, r7
    1ad4:	add	r9, r5, #1
    1ad8:	mov	r0, r9
    1adc:	bl	10e4 <o_malloc@plt>
    1ae0:	cmp	r0, #0
    1ae4:	beq	1ab0 <str_replace@@Base+0x2c>
    1ae8:	mov	r1, r7
    1aec:	mov	r2, r5
    1af0:	mov	r8, r0
    1af4:	bl	1054 <memcpy@plt>
    1af8:	mov	r4, #0
    1afc:	mov	r0, r8
    1b00:	strb	r4, [r8, r5]
    1b04:	bl	10b4 <strlen@plt>
    1b08:	add	r5, r7, r0
    1b0c:	mov	r0, r6
    1b10:	bl	10b4 <strlen@plt>
    1b14:	add	r0, r5, r0
    1b18:	mov	r1, r6
    1b1c:	mov	r2, sl
    1b20:	bl	1090 <str_replace@plt>
    1b24:	cmp	r0, #0
    1b28:	beq	1be0 <str_replace@@Base+0x15c>
    1b2c:	mov	r6, r0
    1b30:	mov	r0, sl
    1b34:	bl	10b4 <strlen@plt>
    1b38:	add	r4, r9, r0
    1b3c:	mov	r0, r6
    1b40:	bl	10b4 <strlen@plt>
    1b44:	add	r5, r4, r0
    1b48:	mov	r0, r5
    1b4c:	bl	10e4 <o_malloc@plt>
    1b50:	cmp	r0, #0
    1b54:	beq	1bf4 <str_replace@@Base+0x170>
    1b58:	str	sl, [sp]
    1b5c:	str	r6, [sp, #4]
    1b60:	mov	r1, r5
    1b64:	mov	r3, r8
    1b68:	mov	r4, r0
    1b6c:	ldr	r2, [pc, #160]	; 1c14 <str_replace@@Base+0x190>
    1b70:	add	r2, pc, r2
    1b74:	bl	10d8 <snprintf@plt>
    1b78:	mov	r5, r0
    1b7c:	mov	r0, r8
    1b80:	bl	1048 <o_free@plt>
    1b84:	mov	r0, r6
    1b88:	bl	1048 <o_free@plt>
    1b8c:	cmn	r5, #1
    1b90:	bgt	1ab0 <str_replace@@Base+0x2c>
    1b94:	mov	r0, r4
    1b98:	b	1c00 <str_replace@@Base+0x17c>
    1b9c:	mov	r0, r7
    1ba0:	bl	10b4 <strlen@plt>
    1ba4:	mov	r5, r0
    1ba8:	add	r0, r0, #1
    1bac:	bl	10e4 <o_malloc@plt>
    1bb0:	cmp	r0, #0
    1bb4:	beq	1ab0 <str_replace@@Base+0x2c>
    1bb8:	mov	r1, r7
    1bbc:	mov	r2, r5
    1bc0:	mov	r6, r0
    1bc4:	bl	1054 <memcpy@plt>
    1bc8:	mov	r0, #0
    1bcc:	mov	r4, r6
    1bd0:	strb	r0, [r6, r5]
    1bd4:	mov	r0, r4
    1bd8:	sub	sp, fp, #28
    1bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1be0:	mov	r0, r8
    1be4:	bl	1048 <o_free@plt>
    1be8:	mov	r0, r4
    1bec:	sub	sp, fp, #28
    1bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bf4:	mov	r0, r8
    1bf8:	bl	1048 <o_free@plt>
    1bfc:	mov	r0, r6
    1c00:	bl	1048 <o_free@plt>
    1c04:	mov	r4, #0
    1c08:	mov	r0, r4
    1c0c:	sub	sp, fp, #28
    1c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c14:	muleq	r0, r1, r3

00001c18 <o_strdup@@Base>:
    1c18:	push	{r4, r5, r6, r7, fp, lr}
    1c1c:	add	fp, sp, #16
    1c20:	mov	r5, #0
    1c24:	cmp	r0, #0
    1c28:	beq	1c64 <o_strdup@@Base+0x4c>
    1c2c:	mov	r4, r0
    1c30:	bl	10b4 <strlen@plt>
    1c34:	mov	r6, r0
    1c38:	add	r0, r0, #1
    1c3c:	bl	10e4 <o_malloc@plt>
    1c40:	cmp	r0, #0
    1c44:	beq	1c64 <o_strdup@@Base+0x4c>
    1c48:	mov	r1, r4
    1c4c:	mov	r2, r6
    1c50:	mov	r7, r0
    1c54:	bl	1054 <memcpy@plt>
    1c58:	mov	r0, #0
    1c5c:	mov	r5, r7
    1c60:	strb	r0, [r7, r6]
    1c64:	mov	r0, r5
    1c68:	pop	{r4, r5, r6, r7, fp, pc}

00001c6c <msprintf@@Base>:
    1c6c:	sub	sp, sp, #12
    1c70:	push	{r4, r5, r6, r7, fp, lr}
    1c74:	add	fp, sp, #16
    1c78:	sub	sp, sp, #12
    1c7c:	add	ip, fp, #8
    1c80:	cmp	r0, #0
    1c84:	stm	ip, {r1, r2, r3}
    1c88:	beq	1ce0 <msprintf@@Base+0x74>
    1c8c:	mov	r4, r0
    1c90:	add	r3, fp, #8
    1c94:	mov	r0, #0
    1c98:	mov	r1, #0
    1c9c:	mov	r5, #0
    1ca0:	mov	r2, r4
    1ca4:	str	r3, [sp, #4]
    1ca8:	str	r3, [sp, #8]
    1cac:	bl	112c <vsnprintf@plt>
    1cb0:	add	r6, r0, #1
    1cb4:	mov	r0, r6
    1cb8:	bl	10e4 <o_malloc@plt>
    1cbc:	cmp	r0, #0
    1cc0:	beq	1ce4 <msprintf@@Base+0x78>
    1cc4:	ldr	r3, [sp, #4]
    1cc8:	mov	r1, r6
    1ccc:	mov	r2, r4
    1cd0:	mov	r7, r0
    1cd4:	bl	112c <vsnprintf@plt>
    1cd8:	mov	r5, r7
    1cdc:	b	1ce4 <msprintf@@Base+0x78>
    1ce0:	mov	r5, #0
    1ce4:	mov	r0, r5
    1ce8:	sub	sp, fp, #16
    1cec:	pop	{r4, r5, r6, r7, fp, lr}
    1cf0:	add	sp, sp, #12
    1cf4:	bx	lr

00001cf8 <mstrcatf@@Base>:
    1cf8:	sub	sp, sp, #8
    1cfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1d00:	add	fp, sp, #24
    1d04:	sub	sp, sp, #8
    1d08:	cmp	r1, #0
    1d0c:	str	r3, [fp, #12]
    1d10:	str	r2, [fp, #8]
    1d14:	beq	1da0 <mstrcatf@@Base+0xa8>
    1d18:	mov	r5, r1
    1d1c:	add	r3, fp, #8
    1d20:	mov	r8, r0
    1d24:	mov	r0, #0
    1d28:	mov	r1, #0
    1d2c:	mov	r6, #0
    1d30:	mov	r2, r5
    1d34:	str	r3, [sp]
    1d38:	str	r3, [sp, #4]
    1d3c:	bl	112c <vsnprintf@plt>
    1d40:	add	r4, r0, #1
    1d44:	mov	r0, r4
    1d48:	bl	10e4 <o_malloc@plt>
    1d4c:	mov	r7, r0
    1d50:	cmp	r8, #0
    1d54:	beq	1da8 <mstrcatf@@Base+0xb0>
    1d58:	cmp	r7, #0
    1d5c:	beq	1dc8 <mstrcatf@@Base+0xd0>
    1d60:	ldr	r3, [sp]
    1d64:	mov	r0, r7
    1d68:	mov	r1, r4
    1d6c:	mov	r2, r5
    1d70:	bl	112c <vsnprintf@plt>
    1d74:	ldr	r0, [pc, #96]	; 1ddc <mstrcatf@@Base+0xe4>
    1d78:	mov	r1, r8
    1d7c:	mov	r2, r7
    1d80:	add	r0, pc, r0
    1d84:	bl	1108 <msprintf@plt>
    1d88:	mov	r6, r0
    1d8c:	mov	r0, r7
    1d90:	bl	1048 <o_free@plt>
    1d94:	mov	r0, r8
    1d98:	bl	1048 <o_free@plt>
    1d9c:	b	1dc8 <mstrcatf@@Base+0xd0>
    1da0:	mov	r6, #0
    1da4:	b	1dc8 <mstrcatf@@Base+0xd0>
    1da8:	cmp	r7, #0
    1dac:	beq	1dc4 <mstrcatf@@Base+0xcc>
    1db0:	ldr	r3, [sp]
    1db4:	mov	r0, r7
    1db8:	mov	r1, r4
    1dbc:	mov	r2, r5
    1dc0:	bl	112c <vsnprintf@plt>
    1dc4:	mov	r6, r7
    1dc8:	mov	r0, r6
    1dcc:	sub	sp, fp, #24
    1dd0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    1dd4:	add	sp, sp, #8
    1dd8:	bx	lr
    1ddc:	andeq	r1, r0, r3, lsl #3

00001de0 <o_strndup@@Base>:
    1de0:	push	{r4, r5, r6, r7, fp, lr}
    1de4:	add	fp, sp, #16
    1de8:	mov	r5, #0
    1dec:	cmp	r0, #0
    1df0:	beq	1e28 <o_strndup@@Base+0x48>
    1df4:	mov	r6, r0
    1df8:	add	r0, r1, #1
    1dfc:	mov	r4, r1
    1e00:	bl	10e4 <o_malloc@plt>
    1e04:	cmp	r0, #0
    1e08:	beq	1e28 <o_strndup@@Base+0x48>
    1e0c:	mov	r1, r6
    1e10:	mov	r2, r4
    1e14:	mov	r7, r0
    1e18:	bl	1054 <memcpy@plt>
    1e1c:	mov	r0, #0
    1e20:	mov	r5, r7
    1e24:	strb	r0, [r7, r4]
    1e28:	mov	r0, r5
    1e2c:	pop	{r4, r5, r6, r7, fp, pc}

00001e30 <o_strcmp@@Base>:
    1e30:	orrs	r2, r0, r1
    1e34:	mov	r2, #0
    1e38:	beq	1e5c <o_strcmp@@Base+0x2c>
    1e3c:	cmp	r1, #0
    1e40:	mov	r2, #1
    1e44:	mov	r3, #1
    1e48:	mvneq	r2, #0
    1e4c:	cmp	r0, #0
    1e50:	moveq	r2, r3
    1e54:	cmpne	r1, #0
    1e58:	bne	1e64 <o_strcmp@@Base+0x34>
    1e5c:	mov	r0, r2
    1e60:	bx	lr
    1e64:	b	1030 <strcmp@plt>

00001e68 <o_strncmp@@Base>:
    1e68:	mov	r3, r0
    1e6c:	orrs	r0, r0, r1
    1e70:	mov	r0, #0
    1e74:	cmpne	r2, #0
    1e78:	bne	1e80 <o_strncmp@@Base+0x18>
    1e7c:	bx	lr
    1e80:	cmp	r1, #0
    1e84:	mov	r0, #1
    1e88:	mov	ip, #1
    1e8c:	mvneq	r0, #0
    1e90:	cmp	r3, #0
    1e94:	moveq	r0, ip
    1e98:	cmpne	r1, #0
    1e9c:	bxeq	lr
    1ea0:	mov	r0, r3
    1ea4:	b	1138 <strncmp@plt>

00001ea8 <o_strcpy@@Base>:
    1ea8:	cmp	r0, #0
    1eac:	cmpne	r1, #0
    1eb0:	bne	1ebc <o_strcpy@@Base+0x14>
    1eb4:	mov	r0, #0
    1eb8:	bx	lr
    1ebc:	b	1078 <strcpy@plt>

00001ec0 <o_strncpy@@Base>:
    1ec0:	cmp	r0, #0
    1ec4:	cmpne	r1, #0
    1ec8:	bne	1ed4 <o_strncpy@@Base+0x14>
    1ecc:	mov	r0, #0
    1ed0:	bx	lr
    1ed4:	b	10fc <strncpy@plt>

00001ed8 <o_strcasecmp@@Base>:
    1ed8:	orrs	r2, r0, r1
    1edc:	mov	r2, #0
    1ee0:	beq	1f0c <o_strcasecmp@@Base+0x34>
    1ee4:	cmp	r0, #0
    1ee8:	beq	1ef8 <o_strcasecmp@@Base+0x20>
    1eec:	mvn	r2, #0
    1ef0:	cmp	r1, #0
    1ef4:	beq	1f0c <o_strcasecmp@@Base+0x34>
    1ef8:	cmp	r0, #0
    1efc:	bne	1f14 <o_strcasecmp@@Base+0x3c>
    1f00:	mov	r2, #1
    1f04:	cmp	r1, #0
    1f08:	beq	1f14 <o_strcasecmp@@Base+0x3c>
    1f0c:	mov	r0, r2
    1f10:	bx	lr
    1f14:	b	106c <strcasecmp@plt>

00001f18 <o_strncasecmp@@Base>:
    1f18:	orrs	r3, r0, r1
    1f1c:	mov	r3, #0
    1f20:	cmpne	r2, #0
    1f24:	bne	1f30 <o_strncasecmp@@Base+0x18>
    1f28:	mov	r0, r3
    1f2c:	bx	lr
    1f30:	cmp	r0, #0
    1f34:	beq	1f44 <o_strncasecmp@@Base+0x2c>
    1f38:	mvn	r3, #0
    1f3c:	cmp	r1, #0
    1f40:	beq	1f28 <o_strncasecmp@@Base+0x10>
    1f44:	cmp	r0, #0
    1f48:	bne	1f58 <o_strncasecmp@@Base+0x40>
    1f4c:	mov	r3, #1
    1f50:	cmp	r1, #0
    1f54:	bne	1f28 <o_strncasecmp@@Base+0x10>
    1f58:	b	10cc <strncasecmp@plt>

00001f5c <o_strstr@@Base>:
    1f5c:	cmp	r0, #0
    1f60:	cmpne	r1, #0
    1f64:	bne	1f70 <o_strstr@@Base+0x14>
    1f68:	mov	r0, #0
    1f6c:	bx	lr
    1f70:	b	1018 <strstr@plt>

00001f74 <o_strchr@@Base>:
    1f74:	cmp	r0, #0
    1f78:	moveq	r0, #0
    1f7c:	bxeq	lr
    1f80:	b	10c0 <strchr@plt>

00001f84 <o_strnchr@@Base>:
    1f84:	push	{r4, r5, r6, sl, fp, lr}
    1f88:	add	fp, sp, #16
    1f8c:	mov	r5, r0
    1f90:	mov	r0, #0
    1f94:	cmp	r5, #0
    1f98:	movne	r6, r1
    1f9c:	cmpne	r1, #0
    1fa0:	bne	1fa8 <o_strnchr@@Base+0x24>
    1fa4:	pop	{r4, r5, r6, sl, fp, pc}
    1fa8:	mov	r0, r5
    1fac:	mov	r4, r2
    1fb0:	bl	10b4 <strlen@plt>
    1fb4:	mov	r1, r0
    1fb8:	mov	r0, #0
    1fbc:	mov	r2, #0
    1fc0:	cmp	r2, r1
    1fc4:	popcs	{r4, r5, r6, sl, fp, pc}
    1fc8:	ldrb	r3, [r5, r2]
    1fcc:	cmp	r3, r4
    1fd0:	beq	1fe4 <o_strnchr@@Base+0x60>
    1fd4:	add	r2, r2, #1
    1fd8:	cmp	r2, r6
    1fdc:	bcc	1fc0 <o_strnchr@@Base+0x3c>
    1fe0:	b	1fa4 <o_strnchr@@Base+0x20>
    1fe4:	add	r0, r5, r2
    1fe8:	pop	{r4, r5, r6, sl, fp, pc}

00001fec <o_strlen@@Base>:
    1fec:	cmp	r0, #0
    1ff0:	moveq	r0, #0
    1ff4:	bxeq	lr
    1ff8:	b	10b4 <strlen@plt>

00001ffc <o_strrchr@@Base>:
    1ffc:	cmp	r0, #0
    2000:	moveq	r0, #0
    2004:	bxeq	lr
    2008:	b	1114 <strrchr@plt>

0000200c <o_strrnchr@@Base>:
    200c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2010:	add	fp, sp, #24
    2014:	cmp	r0, #0
    2018:	mov	r8, #0
    201c:	movne	r7, r1
    2020:	cmpne	r1, #0
    2024:	bne	2030 <o_strrnchr@@Base+0x24>
    2028:	mov	r0, r8
    202c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2030:	mov	r9, r2
    2034:	mov	r6, r0
    2038:	bl	10b4 <strlen@plt>
    203c:	sub	r5, r0, #1
    2040:	rsb	r4, r0, #0
    2044:	cmp	r5, #0
    2048:	blt	2028 <o_strrnchr@@Base+0x1c>
    204c:	mov	r0, r6
    2050:	bl	10b4 <strlen@plt>
    2054:	add	r0, r0, r4
    2058:	cmp	r0, r7
    205c:	bcs	2028 <o_strrnchr@@Base+0x1c>
    2060:	ldrb	r0, [r6, r5]
    2064:	sub	r5, r5, #1
    2068:	add	r4, r4, #1
    206c:	cmp	r0, r9
    2070:	bne	2044 <o_strrnchr@@Base+0x38>
    2074:	sub	r8, r6, r4
    2078:	mov	r0, r8
    207c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00002080 <o_strnstr@@Base>:
    2080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2084:	add	fp, sp, #28
    2088:	sub	sp, sp, #4
    208c:	cmp	r0, #0
    2090:	mov	r9, #0
    2094:	movne	r8, r1
    2098:	cmpne	r1, #0
    209c:	bne	20ac <o_strnstr@@Base+0x2c>
    20a0:	mov	r0, r9
    20a4:	sub	sp, fp, #28
    20a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20ac:	mov	r4, r0
    20b0:	mov	r0, r8
    20b4:	mov	r5, r2
    20b8:	bl	10b4 <strlen@plt>
    20bc:	cmp	r0, #0
    20c0:	beq	2120 <o_strnstr@@Base+0xa0>
    20c4:	sub	r7, r5, r0
    20c8:	mov	sl, r0
    20cc:	cmp	r7, #0
    20d0:	blt	20a0 <o_strnstr@@Base+0x20>
    20d4:	ldrb	r6, [r8]
    20d8:	mov	r5, #0
    20dc:	mov	r0, r4
    20e0:	ldrb	r1, [r0, r5]!
    20e4:	cmp	r1, r6
    20e8:	bne	2100 <o_strnstr@@Base+0x80>
    20ec:	mov	r1, r8
    20f0:	mov	r2, sl
    20f4:	bl	1138 <strncmp@plt>
    20f8:	cmp	r0, #0
    20fc:	beq	2130 <o_strnstr@@Base+0xb0>
    2100:	add	r0, r5, #1
    2104:	cmp	r5, r7
    2108:	mov	r5, r0
    210c:	blt	20dc <o_strnstr@@Base+0x5c>
    2110:	mov	r9, #0
    2114:	mov	r0, r9
    2118:	sub	sp, fp, #28
    211c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2120:	mov	r9, r4
    2124:	mov	r0, r9
    2128:	sub	sp, fp, #28
    212c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2130:	add	r9, r4, r5
    2134:	mov	r0, r9
    2138:	sub	sp, fp, #28
    213c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002140 <o_strcasestr@@Base>:
    2140:	cmp	r0, #0
    2144:	cmpne	r1, #0
    2148:	bne	2154 <o_strcasestr@@Base+0x14>
    214c:	mov	r0, #0
    2150:	bx	lr
    2154:	b	1024 <strcasestr@plt>

00002158 <split_string@@Base>:
    2158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    215c:	add	fp, sp, #28
    2160:	sub	sp, sp, #4
    2164:	cmp	r0, #0
    2168:	mov	r5, #0
    216c:	movne	sl, r1
    2170:	cmpne	r1, #0
    2174:	bne	2184 <split_string@@Base+0x2c>
    2178:	mov	r0, r5
    217c:	sub	sp, fp, #28
    2180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2184:	cmp	r2, #0
    2188:	mov	r6, r0
    218c:	mov	r7, r2
    2190:	mov	r1, sl
    2194:	movne	r0, #0
    2198:	strne	r0, [r7]
    219c:	mov	r0, r6
    21a0:	bl	1018 <strstr@plt>
    21a4:	cmp	r0, #0
    21a8:	str	r7, [sp]
    21ac:	beq	2260 <split_string@@Base+0x108>
    21b0:	mov	r4, r0
    21b4:	cmp	r7, #0
    21b8:	beq	2270 <split_string@@Base+0x118>
    21bc:	mov	r5, #1
    21c0:	mov	r0, #4
    21c4:	add	r1, r0, r5, lsl #2
    21c8:	ldr	r0, [r7]
    21cc:	bl	1084 <o_realloc@plt>
    21d0:	cmp	r0, #0
    21d4:	str	r0, [r7]
    21d8:	beq	2234 <split_string@@Base+0xdc>
    21dc:	mov	r8, #0
    21e0:	cmp	r6, #0
    21e4:	beq	2218 <split_string@@Base+0xc0>
    21e8:	sub	r9, r4, r6
    21ec:	add	r0, r9, #1
    21f0:	bl	10e4 <o_malloc@plt>
    21f4:	cmp	r0, #0
    21f8:	beq	2218 <split_string@@Base+0xc0>
    21fc:	mov	r1, r6
    2200:	mov	r2, r9
    2204:	mov	r7, r0
    2208:	bl	1054 <memcpy@plt>
    220c:	mov	r0, #0
    2210:	mov	r8, r7
    2214:	strb	r0, [r7, r9]
    2218:	ldr	r7, [sp]
    221c:	mov	r1, #0
    2220:	ldr	r0, [r7]
    2224:	add	r0, r0, r5, lsl #2
    2228:	str	r8, [r0, #-4]
    222c:	ldr	r0, [r7]
    2230:	str	r1, [r0, r5, lsl #2]
    2234:	mov	r0, sl
    2238:	bl	10b4 <strlen@plt>
    223c:	add	r6, r4, r0
    2240:	mov	r1, sl
    2244:	mov	r0, r6
    2248:	bl	1018 <strstr@plt>
    224c:	mov	r4, r0
    2250:	add	r5, r5, #1
    2254:	cmp	r0, #0
    2258:	bne	21c0 <split_string@@Base+0x68>
    225c:	b	22a0 <split_string@@Base+0x148>
    2260:	mov	r5, #1
    2264:	cmp	r7, #0
    2268:	bne	22a8 <split_string@@Base+0x150>
    226c:	b	2178 <split_string@@Base+0x20>
    2270:	mov	r0, sl
    2274:	bl	10b4 <strlen@plt>
    2278:	mov	r9, r0
    227c:	mov	r5, #1
    2280:	add	r6, r4, r9
    2284:	mov	r1, sl
    2288:	mov	r0, r6
    228c:	bl	1018 <strstr@plt>
    2290:	mov	r4, r0
    2294:	add	r5, r5, #1
    2298:	cmp	r0, #0
    229c:	bne	2280 <split_string@@Base+0x128>
    22a0:	cmp	r7, #0
    22a4:	beq	2178 <split_string@@Base+0x20>
    22a8:	mov	r0, #4
    22ac:	add	r1, r0, r5, lsl #2
    22b0:	ldr	r0, [r7]
    22b4:	bl	1084 <o_realloc@plt>
    22b8:	cmp	r0, #0
    22bc:	str	r0, [r7]
    22c0:	beq	2178 <split_string@@Base+0x20>
    22c4:	mov	r9, #0
    22c8:	cmp	r6, #0
    22cc:	mov	r0, #0
    22d0:	beq	2314 <split_string@@Base+0x1bc>
    22d4:	mov	r0, r6
    22d8:	bl	10b4 <strlen@plt>
    22dc:	mov	r4, r0
    22e0:	add	r0, r0, #1
    22e4:	bl	10e4 <o_malloc@plt>
    22e8:	mov	r7, r0
    22ec:	cmp	r0, #0
    22f0:	mov	r0, #0
    22f4:	beq	2314 <split_string@@Base+0x1bc>
    22f8:	mov	r0, r7
    22fc:	mov	r1, r6
    2300:	mov	r2, r4
    2304:	bl	1054 <memcpy@plt>
    2308:	mov	r0, #0
    230c:	strb	r0, [r7, r4]
    2310:	mov	r0, r7
    2314:	ldr	r2, [sp]
    2318:	ldr	r1, [r2]
    231c:	add	r1, r1, r5, lsl #2
    2320:	str	r0, [r1, #-4]
    2324:	ldr	r0, [r2]
    2328:	str	r9, [r0, r5, lsl #2]
    232c:	mov	r0, r5
    2330:	sub	sp, fp, #28
    2334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002338 <free_string_array@@Base>:
    2338:	cmp	r0, #0
    233c:	bxeq	lr
    2340:	push	{r4, r5, r6, sl, fp, lr}
    2344:	add	fp, sp, #16
    2348:	mov	r4, r0
    234c:	ldr	r0, [r0]
    2350:	cmp	r0, #0
    2354:	beq	2374 <free_string_array@@Base+0x3c>
    2358:	add	r5, r4, #4
    235c:	mov	r6, #0
    2360:	bl	1048 <o_free@plt>
    2364:	str	r6, [r5, #-4]
    2368:	ldr	r0, [r5], #4
    236c:	cmp	r0, #0
    2370:	bne	2360 <free_string_array@@Base+0x28>
    2374:	mov	r0, r4
    2378:	pop	{r4, r5, r6, sl, fp, lr}
    237c:	b	1048 <o_free@plt>

00002380 <string_array_size@@Base>:
    2380:	cmp	r0, #0
    2384:	moveq	r0, #0
    2388:	bxeq	lr
    238c:	mov	r1, #0
    2390:	ldr	r2, [r0, r1, lsl #2]
    2394:	add	r1, r1, #1
    2398:	cmp	r2, #0
    239c:	bne	2390 <string_array_size@@Base+0x10>
    23a0:	sub	r0, r1, #1
    23a4:	bx	lr

000023a8 <string_array_join@@Base>:
    23a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23ac:	add	fp, sp, #28
    23b0:	sub	sp, sp, #4
    23b4:	mov	r5, #0
    23b8:	cmp	r0, #0
    23bc:	beq	23d4 <string_array_join@@Base+0x2c>
    23c0:	cmp	r1, #0
    23c4:	mov	r9, r1
    23c8:	ldrne	r7, [r0]
    23cc:	cmpne	r7, #0
    23d0:	bne	23e0 <string_array_join@@Base+0x38>
    23d4:	mov	r0, r5
    23d8:	sub	sp, fp, #28
    23dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23e0:	ldr	r8, [pc, #156]	; 2484 <string_array_join@@Base+0xdc>
    23e4:	add	r4, r0, #4
    23e8:	mov	sl, #0
    23ec:	mov	r5, #0
    23f0:	add	r8, pc, r8
    23f4:	cmp	r5, #0
    23f8:	beq	2430 <string_array_join@@Base+0x88>
    23fc:	mov	r0, r8
    2400:	mov	r1, r5
    2404:	mov	r2, r9
    2408:	mov	r3, r7
    240c:	bl	1108 <msprintf@plt>
    2410:	mov	r6, r0
    2414:	mov	r0, r5
    2418:	bl	1048 <o_free@plt>
    241c:	mov	r5, r6
    2420:	ldr	r7, [r4], #4
    2424:	cmp	r7, #0
    2428:	bne	23f4 <string_array_join@@Base+0x4c>
    242c:	b	23d4 <string_array_join@@Base+0x2c>
    2430:	mov	r0, r7
    2434:	bl	10b4 <strlen@plt>
    2438:	mov	r6, r0
    243c:	add	r0, r0, #1
    2440:	bl	10e4 <o_malloc@plt>
    2444:	cmp	r0, #0
    2448:	beq	2470 <string_array_join@@Base+0xc8>
    244c:	mov	r1, r7
    2450:	mov	r2, r6
    2454:	mov	r5, r0
    2458:	bl	1054 <memcpy@plt>
    245c:	strb	sl, [r5, r6]
    2460:	ldr	r7, [r4], #4
    2464:	cmp	r7, #0
    2468:	bne	23f4 <string_array_join@@Base+0x4c>
    246c:	b	23d4 <string_array_join@@Base+0x2c>
    2470:	mov	r5, #0
    2474:	ldr	r7, [r4], #4
    2478:	cmp	r7, #0
    247c:	bne	23f4 <string_array_join@@Base+0x4c>
    2480:	b	23d4 <string_array_join@@Base+0x2c>
    2484:	andeq	r0, r0, r1, lsl fp

00002488 <trimwhitespace@@Base>:
    2488:	push	{r4, r5, r6, sl, fp, lr}
    248c:	add	fp, sp, #16
    2490:	cmp	r0, #0
    2494:	moveq	r4, #0
    2498:	moveq	r0, r4
    249c:	popeq	{r4, r5, r6, sl, fp, pc}
    24a0:	ldrb	r6, [r0]
    24a4:	mov	r4, r0
    24a8:	cmp	r6, #0
    24ac:	beq	2518 <trimwhitespace@@Base+0x90>
    24b0:	bl	10a8 <__ctype_b_loc@plt>
    24b4:	ldr	r5, [r0]
    24b8:	add	r0, r5, r6, lsl #1
    24bc:	ldrb	r0, [r0, #1]
    24c0:	tst	r0, #32
    24c4:	beq	24dc <trimwhitespace@@Base+0x54>
    24c8:	ldrb	r0, [r4, #1]!
    24cc:	add	r0, r5, r0, lsl #1
    24d0:	ldrb	r0, [r0, #1]
    24d4:	tst	r0, #32
    24d8:	bne	24c8 <trimwhitespace@@Base+0x40>
    24dc:	mov	r0, r4
    24e0:	bl	10b4 <strlen@plt>
    24e4:	add	r0, r4, r0
    24e8:	sub	r1, r0, #1
    24ec:	mov	r0, r1
    24f0:	cmp	r1, r4
    24f4:	bls	2510 <trimwhitespace@@Base+0x88>
    24f8:	mov	r1, r0
    24fc:	ldrb	r2, [r1], #-1
    2500:	add	r2, r5, r2, lsl #1
    2504:	ldrb	r2, [r2, #1]
    2508:	tst	r2, #32
    250c:	bne	24ec <trimwhitespace@@Base+0x64>
    2510:	mov	r1, #0
    2514:	strb	r1, [r0, #1]
    2518:	mov	r0, r4
    251c:	pop	{r4, r5, r6, sl, fp, pc}

00002520 <trimcharacter@@Base>:
    2520:	push	{r4, r5, fp, lr}
    2524:	add	fp, sp, #8
    2528:	cmp	r0, #0
    252c:	moveq	r4, #0
    2530:	moveq	r0, r4
    2534:	popeq	{r4, r5, fp, pc}
    2538:	mov	r4, r0
    253c:	ldrb	r0, [r0]
    2540:	cmp	r0, #0
    2544:	beq	2594 <trimcharacter@@Base+0x74>
    2548:	mov	r5, r1
    254c:	cmp	r0, r5
    2550:	bne	2560 <trimcharacter@@Base+0x40>
    2554:	ldrb	r0, [r4, #1]!
    2558:	cmp	r0, r5
    255c:	beq	2554 <trimcharacter@@Base+0x34>
    2560:	mov	r0, r4
    2564:	bl	10b4 <strlen@plt>
    2568:	add	r0, r4, r0
    256c:	sub	r1, r0, #1
    2570:	mov	r0, r1
    2574:	cmp	r1, r4
    2578:	bls	258c <trimcharacter@@Base+0x6c>
    257c:	mov	r1, r0
    2580:	ldrb	r2, [r1], #-1
    2584:	cmp	r2, r5
    2588:	beq	2570 <trimcharacter@@Base+0x50>
    258c:	mov	r1, #0
    2590:	strb	r1, [r0, #1]
    2594:	mov	r0, r4
    2598:	pop	{r4, r5, fp, pc}

0000259c <string_array_has_value@@Base>:
    259c:	push	{r4, r5, r6, sl, fp, lr}
    25a0:	add	fp, sp, #16
    25a4:	cmp	r0, #0
    25a8:	mov	r4, #0
    25ac:	movne	r5, r1
    25b0:	cmpne	r1, #0
    25b4:	bne	25c0 <string_array_has_value@@Base+0x24>
    25b8:	mov	r0, r4
    25bc:	pop	{r4, r5, r6, sl, fp, pc}
    25c0:	mov	r1, r0
    25c4:	ldr	r0, [r0]
    25c8:	cmp	r0, #0
    25cc:	beq	25b8 <string_array_has_value@@Base+0x1c>
    25d0:	add	r6, r1, #4
    25d4:	mov	r1, r5
    25d8:	bl	1030 <strcmp@plt>
    25dc:	cmp	r0, #0
    25e0:	beq	25f4 <string_array_has_value@@Base+0x58>
    25e4:	ldr	r0, [r6], #4
    25e8:	cmp	r0, #0
    25ec:	bne	25d4 <string_array_has_value@@Base+0x38>
    25f0:	b	25b8 <string_array_has_value@@Base+0x1c>
    25f4:	mov	r4, #1
    25f8:	mov	r0, r4
    25fc:	pop	{r4, r5, r6, sl, fp, pc}

00002600 <string_array_has_value_case@@Base>:
    2600:	push	{r4, r5, r6, sl, fp, lr}
    2604:	add	fp, sp, #16
    2608:	cmp	r0, #0
    260c:	mov	r4, #0
    2610:	movne	r5, r1
    2614:	cmpne	r1, #0
    2618:	bne	2624 <string_array_has_value_case@@Base+0x24>
    261c:	mov	r0, r4
    2620:	pop	{r4, r5, r6, sl, fp, pc}
    2624:	mov	r1, r0
    2628:	ldr	r0, [r0]
    262c:	cmp	r0, #0
    2630:	beq	261c <string_array_has_value_case@@Base+0x1c>
    2634:	add	r6, r1, #4
    2638:	mov	r1, r5
    263c:	bl	106c <strcasecmp@plt>
    2640:	cmp	r0, #0
    2644:	beq	2658 <string_array_has_value_case@@Base+0x58>
    2648:	ldr	r0, [r6], #4
    264c:	cmp	r0, #0
    2650:	bne	2638 <string_array_has_value_case@@Base+0x38>
    2654:	b	261c <string_array_has_value_case@@Base+0x1c>
    2658:	mov	r4, #1
    265c:	mov	r0, r4
    2660:	pop	{r4, r5, r6, sl, fp, pc}

00002664 <string_array_has_value_n@@Base>:
    2664:	push	{r4, r5, r6, r7, fp, lr}
    2668:	add	fp, sp, #16
    266c:	cmp	r0, #0
    2670:	mov	r4, #0
    2674:	movne	r6, r1
    2678:	cmpne	r1, #0
    267c:	bne	2688 <string_array_has_value_n@@Base+0x24>
    2680:	mov	r0, r4
    2684:	pop	{r4, r5, r6, r7, fp, pc}
    2688:	mov	r1, r0
    268c:	ldr	r0, [r0]
    2690:	cmp	r0, #0
    2694:	beq	2680 <string_array_has_value_n@@Base+0x1c>
    2698:	mov	r5, r2
    269c:	cmp	r2, #0
    26a0:	beq	26cc <string_array_has_value_n@@Base+0x68>
    26a4:	add	r7, r1, #4
    26a8:	mov	r1, r6
    26ac:	mov	r2, r5
    26b0:	bl	1138 <strncmp@plt>
    26b4:	cmp	r0, #0
    26b8:	beq	26cc <string_array_has_value_n@@Base+0x68>
    26bc:	ldr	r0, [r7], #4
    26c0:	cmp	r0, #0
    26c4:	bne	26a8 <string_array_has_value_n@@Base+0x44>
    26c8:	b	2680 <string_array_has_value_n@@Base+0x1c>
    26cc:	mov	r4, #1
    26d0:	mov	r0, r4
    26d4:	pop	{r4, r5, r6, r7, fp, pc}

000026d8 <string_array_has_value_ncase@@Base>:
    26d8:	push	{r4, r5, r6, r7, fp, lr}
    26dc:	add	fp, sp, #16
    26e0:	cmp	r0, #0
    26e4:	mov	r4, #0
    26e8:	movne	r6, r1
    26ec:	cmpne	r1, #0
    26f0:	bne	26fc <string_array_has_value_ncase@@Base+0x24>
    26f4:	mov	r0, r4
    26f8:	pop	{r4, r5, r6, r7, fp, pc}
    26fc:	mov	r1, r0
    2700:	ldr	r0, [r0]
    2704:	cmp	r0, #0
    2708:	beq	26f4 <string_array_has_value_ncase@@Base+0x1c>
    270c:	mov	r5, r2
    2710:	cmp	r2, #0
    2714:	beq	2740 <string_array_has_value_ncase@@Base+0x68>
    2718:	add	r7, r1, #4
    271c:	mov	r1, r6
    2720:	mov	r2, r5
    2724:	bl	10cc <strncasecmp@plt>
    2728:	cmp	r0, #0
    272c:	beq	2740 <string_array_has_value_ncase@@Base+0x68>
    2730:	ldr	r0, [r7], #4
    2734:	cmp	r0, #0
    2738:	bne	271c <string_array_has_value_ncase@@Base+0x44>
    273c:	b	26f4 <string_array_has_value_ncase@@Base+0x1c>
    2740:	mov	r4, #1
    2744:	mov	r0, r4
    2748:	pop	{r4, r5, r6, r7, fp, pc}

0000274c <string_array_has_trimmed_value@@Base>:
    274c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2750:	add	fp, sp, #28
    2754:	sub	sp, sp, #12
    2758:	cmp	r0, #0
    275c:	mov	sl, #0
    2760:	str	r0, [sp, #8]
    2764:	movne	r4, r1
    2768:	cmpne	r1, #0
    276c:	bne	277c <string_array_has_trimmed_value@@Base+0x30>
    2770:	mov	r0, sl
    2774:	sub	sp, fp, #28
    2778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    277c:	mov	r0, r4
    2780:	bl	10b4 <strlen@plt>
    2784:	mov	r6, r0
    2788:	add	r0, r0, #1
    278c:	bl	10e4 <o_malloc@plt>
    2790:	mov	r5, r0
    2794:	cmp	r0, #0
    2798:	beq	293c <string_array_has_trimmed_value@@Base+0x1f0>
    279c:	mov	r0, r5
    27a0:	mov	r1, r4
    27a4:	mov	r2, r6
    27a8:	bl	1054 <memcpy@plt>
    27ac:	mov	sl, #0
    27b0:	mov	r7, r5
    27b4:	strb	sl, [r5, r6]
    27b8:	ldrb	r6, [r5]
    27bc:	cmp	r6, #0
    27c0:	beq	2834 <string_array_has_trimmed_value@@Base+0xe8>
    27c4:	bl	10a8 <__ctype_b_loc@plt>
    27c8:	ldr	r4, [r0]
    27cc:	mov	r7, r5
    27d0:	add	r0, r4, r6, lsl #1
    27d4:	ldrb	r0, [r0, #1]
    27d8:	tst	r0, #32
    27dc:	beq	27f8 <string_array_has_trimmed_value@@Base+0xac>
    27e0:	mov	r7, r5
    27e4:	ldrb	r0, [r7, #1]!
    27e8:	add	r0, r4, r0, lsl #1
    27ec:	ldrb	r0, [r0, #1]
    27f0:	tst	r0, #32
    27f4:	bne	27e4 <string_array_has_trimmed_value@@Base+0x98>
    27f8:	mov	r0, r7
    27fc:	bl	10b4 <strlen@plt>
    2800:	add	r0, r7, r0
    2804:	sub	r1, r0, #1
    2808:	mov	r0, r1
    280c:	cmp	r1, r7
    2810:	bls	282c <string_array_has_trimmed_value@@Base+0xe0>
    2814:	mov	r1, r0
    2818:	ldrb	r2, [r1], #-1
    281c:	add	r2, r4, r2, lsl #1
    2820:	ldrb	r2, [r2, #1]
    2824:	tst	r2, #32
    2828:	bne	2808 <string_array_has_trimmed_value@@Base+0xbc>
    282c:	mov	r1, #0
    2830:	strb	r1, [r0, #1]
    2834:	ldr	r0, [sp, #8]
    2838:	ldr	r6, [r0]
    283c:	cmp	r6, #0
    2840:	beq	2940 <string_array_has_trimmed_value@@Base+0x1f4>
    2844:	mov	sl, #0
    2848:	mov	r8, #0
    284c:	str	r5, [sp, #4]
    2850:	mov	r0, r6
    2854:	bl	10b4 <strlen@plt>
    2858:	mov	r5, r0
    285c:	add	r0, r0, #1
    2860:	bl	10e4 <o_malloc@plt>
    2864:	cmp	r0, #0
    2868:	beq	2934 <string_array_has_trimmed_value@@Base+0x1e8>
    286c:	mov	r1, r6
    2870:	mov	r2, r5
    2874:	mov	r4, r0
    2878:	bl	1054 <memcpy@plt>
    287c:	strb	sl, [r4, r5]
    2880:	mov	r6, r4
    2884:	ldrb	r9, [r4]
    2888:	cmp	r9, #0
    288c:	beq	28fc <string_array_has_trimmed_value@@Base+0x1b0>
    2890:	bl	10a8 <__ctype_b_loc@plt>
    2894:	ldr	r5, [r0]
    2898:	mov	r6, r4
    289c:	add	r0, r5, r9, lsl #1
    28a0:	ldrb	r0, [r0, #1]
    28a4:	tst	r0, #32
    28a8:	beq	28c4 <string_array_has_trimmed_value@@Base+0x178>
    28ac:	mov	r6, r4
    28b0:	ldrb	r0, [r6, #1]!
    28b4:	add	r0, r5, r0, lsl #1
    28b8:	ldrb	r0, [r0, #1]
    28bc:	tst	r0, #32
    28c0:	bne	28b0 <string_array_has_trimmed_value@@Base+0x164>
    28c4:	mov	r0, r6
    28c8:	bl	10b4 <strlen@plt>
    28cc:	add	r0, r6, r0
    28d0:	sub	r1, r0, #1
    28d4:	mov	r0, r1
    28d8:	cmp	r1, r6
    28dc:	bls	28f8 <string_array_has_trimmed_value@@Base+0x1ac>
    28e0:	mov	r1, r0
    28e4:	ldrb	r2, [r1], #-1
    28e8:	add	r2, r5, r2, lsl #1
    28ec:	ldrb	r2, [r2, #1]
    28f0:	tst	r2, #32
    28f4:	bne	28d4 <string_array_has_trimmed_value@@Base+0x188>
    28f8:	strb	sl, [r0, #1]
    28fc:	mov	r0, r6
    2900:	mov	r1, r7
    2904:	bl	1030 <strcmp@plt>
    2908:	mov	r5, r0
    290c:	mov	r0, r4
    2910:	bl	1048 <o_free@plt>
    2914:	ldr	r0, [sp, #8]
    2918:	add	r8, r8, #1
    291c:	ldr	r6, [r0, r8, lsl #2]
    2920:	cmp	r6, #0
    2924:	cmpne	r5, #0
    2928:	bne	2850 <string_array_has_trimmed_value@@Base+0x104>
    292c:	clz	r0, r5
    2930:	lsr	sl, r0, #5
    2934:	ldr	r5, [sp, #4]
    2938:	b	2940 <string_array_has_trimmed_value@@Base+0x1f4>
    293c:	mov	sl, #0
    2940:	mov	r0, r5
    2944:	bl	1048 <o_free@plt>
    2948:	mov	r0, sl
    294c:	sub	sp, fp, #28
    2950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002954 <pointer_list_init@@Base>:
    2954:	cmp	r0, #0
    2958:	movne	r1, #0
    295c:	strne	r1, [r0]
    2960:	strne	r1, [r0, #4]
    2964:	bx	lr

00002968 <pointer_list_clean@@Base>:
    2968:	push	{r4, r5, r6, r7, fp, lr}
    296c:	add	fp, sp, #16
    2970:	cmp	r0, #0
    2974:	beq	2a0c <pointer_list_clean@@Base+0xa4>
    2978:	ldr	lr, [r0]
    297c:	mov	r4, r0
    2980:	cmp	lr, #0
    2984:	popeq	{r4, r5, r6, r7, fp, pc}
    2988:	lsl	r7, lr, #2
    298c:	mov	r0, lr
    2990:	sub	r6, r0, #1
    2994:	cmp	lr, r6
    2998:	bls	29fc <pointer_list_clean@@Base+0x94>
    299c:	sub	ip, lr, #1
    29a0:	cmp	ip, r6
    29a4:	bls	29cc <pointer_list_clean@@Base+0x64>
    29a8:	mov	r3, lr
    29ac:	mov	r5, r7
    29b0:	ldr	r2, [r4, #4]
    29b4:	sub	r3, r3, #1
    29b8:	cmp	r0, r3
    29bc:	ldr	r1, [r2, r5]!
    29c0:	add	r5, r5, #4
    29c4:	str	r1, [r2, #-4]
    29c8:	bne	29b0 <pointer_list_clean@@Base+0x48>
    29cc:	ldr	r0, [r4, #4]
    29d0:	cmp	lr, #2
    29d4:	bcc	29e4 <pointer_list_clean@@Base+0x7c>
    29d8:	lsl	r1, ip, #2
    29dc:	bl	1084 <o_realloc@plt>
    29e0:	b	29ec <pointer_list_clean@@Base+0x84>
    29e4:	bl	1048 <o_free@plt>
    29e8:	mov	r0, #0
    29ec:	str	r0, [r4, #4]
    29f0:	ldr	r0, [r4]
    29f4:	sub	lr, r0, #1
    29f8:	str	lr, [r4]
    29fc:	sub	r7, r7, #4
    2a00:	cmp	r6, #0
    2a04:	mov	r0, r6
    2a08:	bne	2990 <pointer_list_clean@@Base+0x28>
    2a0c:	pop	{r4, r5, r6, r7, fp, pc}

00002a10 <pointer_list_size@@Base>:
    2a10:	cmp	r0, #0
    2a14:	ldrne	r0, [r0]
    2a18:	moveq	r0, #0
    2a1c:	bx	lr

00002a20 <pointer_list_remove_at@@Base>:
    2a20:	push	{r4, sl, fp, lr}
    2a24:	add	fp, sp, #8
    2a28:	mov	r4, r0
    2a2c:	mov	r0, #0
    2a30:	cmp	r4, #0
    2a34:	ldrne	ip, [r4]
    2a38:	cmpne	ip, r1
    2a3c:	bhi	2a44 <pointer_list_remove_at@@Base+0x24>
    2a40:	pop	{r4, sl, fp, pc}
    2a44:	sub	r3, ip, #1
    2a48:	cmp	r3, r1
    2a4c:	bls	2a6c <pointer_list_remove_at@@Base+0x4c>
    2a50:	ldr	r0, [r4, #4]
    2a54:	add	r2, r0, r1, lsl #2
    2a58:	ldr	r2, [r2, #4]
    2a5c:	str	r2, [r0, r1, lsl #2]
    2a60:	add	r1, r1, #1
    2a64:	cmp	r3, r1
    2a68:	bne	2a50 <pointer_list_remove_at@@Base+0x30>
    2a6c:	ldr	r0, [r4, #4]
    2a70:	cmp	ip, #2
    2a74:	bcc	2a84 <pointer_list_remove_at@@Base+0x64>
    2a78:	lsl	r1, r3, #2
    2a7c:	bl	1084 <o_realloc@plt>
    2a80:	b	2a8c <pointer_list_remove_at@@Base+0x6c>
    2a84:	bl	1048 <o_free@plt>
    2a88:	mov	r0, #0
    2a8c:	str	r0, [r4, #4]
    2a90:	ldr	r0, [r4]
    2a94:	sub	r0, r0, #1
    2a98:	str	r0, [r4]
    2a9c:	mov	r0, #1
    2aa0:	pop	{r4, sl, fp, pc}

00002aa4 <pointer_list_clean_free@@Base>:
    2aa4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2aa8:	add	fp, sp, #24
    2aac:	cmp	r0, #0
    2ab0:	beq	2b64 <pointer_list_clean_free@@Base+0xc0>
    2ab4:	mov	r8, r1
    2ab8:	ldr	r1, [r0]
    2abc:	mov	r5, r0
    2ac0:	cmp	r1, #0
    2ac4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    2ac8:	lsl	r9, r1, #2
    2acc:	mov	r7, r1
    2ad0:	sub	r4, r7, #1
    2ad4:	mov	r0, #0
    2ad8:	cmp	r1, r4
    2adc:	ldrhi	r0, [r5, #4]
    2ae0:	ldrhi	r0, [r0, r4, lsl #2]
    2ae4:	blx	r8
    2ae8:	ldr	r1, [r5]
    2aec:	cmp	r1, r4
    2af0:	bls	2b54 <pointer_list_clean_free@@Base+0xb0>
    2af4:	sub	ip, r1, #1
    2af8:	cmp	ip, r4
    2afc:	bls	2b24 <pointer_list_clean_free@@Base+0x80>
    2b00:	mov	r0, r1
    2b04:	mov	r3, r9
    2b08:	ldr	r2, [r5, #4]
    2b0c:	sub	r0, r0, #1
    2b10:	cmp	r7, r0
    2b14:	ldr	r6, [r2, r3]!
    2b18:	add	r3, r3, #4
    2b1c:	str	r6, [r2, #-4]
    2b20:	bne	2b08 <pointer_list_clean_free@@Base+0x64>
    2b24:	ldr	r0, [r5, #4]
    2b28:	cmp	r1, #2
    2b2c:	bcc	2b3c <pointer_list_clean_free@@Base+0x98>
    2b30:	lsl	r1, ip, #2
    2b34:	bl	1084 <o_realloc@plt>
    2b38:	b	2b44 <pointer_list_clean_free@@Base+0xa0>
    2b3c:	bl	1048 <o_free@plt>
    2b40:	mov	r0, #0
    2b44:	str	r0, [r5, #4]
    2b48:	ldr	r0, [r5]
    2b4c:	sub	r1, r0, #1
    2b50:	str	r1, [r5]
    2b54:	sub	r9, r9, #4
    2b58:	cmp	r4, #0
    2b5c:	mov	r7, r4
    2b60:	bne	2ad0 <pointer_list_clean_free@@Base+0x2c>
    2b64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00002b68 <pointer_list_get_at@@Base>:
    2b68:	mov	r2, r0
    2b6c:	mov	r0, #0
    2b70:	cmp	r2, #0
    2b74:	bxeq	lr
    2b78:	ldr	r3, [r2]
    2b7c:	cmp	r3, r1
    2b80:	ldrhi	r0, [r2, #4]
    2b84:	ldrhi	r0, [r0, r1, lsl #2]
    2b88:	bx	lr

00002b8c <pointer_list_append@@Base>:
    2b8c:	push	{r4, r5, fp, lr}
    2b90:	add	fp, sp, #8
    2b94:	cmp	r0, #0
    2b98:	moveq	r5, #0
    2b9c:	moveq	r0, r5
    2ba0:	popeq	{r4, r5, fp, pc}
    2ba4:	mov	r5, r1
    2ba8:	ldr	r1, [r0]
    2bac:	mov	r4, r0
    2bb0:	ldr	r0, [r0, #4]
    2bb4:	mov	r2, #4
    2bb8:	add	r1, r2, r1, lsl #2
    2bbc:	bl	1084 <o_realloc@plt>
    2bc0:	cmp	r0, #0
    2bc4:	str	r0, [r4, #4]
    2bc8:	beq	2be8 <pointer_list_append@@Base+0x5c>
    2bcc:	ldr	r1, [r4]
    2bd0:	str	r5, [r0, r1, lsl #2]
    2bd4:	add	r0, r1, #1
    2bd8:	mov	r5, #1
    2bdc:	str	r0, [r4]
    2be0:	mov	r0, r5
    2be4:	pop	{r4, r5, fp, pc}
    2be8:	mov	r0, #0
    2bec:	mov	r5, #0
    2bf0:	bl	1048 <o_free@plt>
    2bf4:	mov	r0, r5
    2bf8:	str	r5, [r4, #4]
    2bfc:	pop	{r4, r5, fp, pc}

00002c00 <pointer_list_remove_at_free@@Base>:
    2c00:	push	{r4, r5, r6, sl, fp, lr}
    2c04:	add	fp, sp, #16
    2c08:	mov	r6, #0
    2c0c:	cmp	r0, #0
    2c10:	beq	2c9c <pointer_list_remove_at_free@@Base+0x9c>
    2c14:	mov	r4, r0
    2c18:	ldr	r0, [r0]
    2c1c:	mov	r5, r1
    2c20:	cmp	r0, r1
    2c24:	bls	2c9c <pointer_list_remove_at_free@@Base+0x9c>
    2c28:	ldr	r0, [r4, #4]
    2c2c:	ldr	r0, [r0, r5, lsl #2]
    2c30:	blx	r2
    2c34:	ldr	r1, [r4]
    2c38:	cmp	r1, r5
    2c3c:	bls	2c9c <pointer_list_remove_at_free@@Base+0x9c>
    2c40:	sub	r2, r1, #1
    2c44:	cmp	r2, r5
    2c48:	bls	2c68 <pointer_list_remove_at_free@@Base+0x68>
    2c4c:	ldr	r0, [r4, #4]
    2c50:	add	r3, r0, r5, lsl #2
    2c54:	ldr	r3, [r3, #4]
    2c58:	str	r3, [r0, r5, lsl #2]
    2c5c:	add	r5, r5, #1
    2c60:	cmp	r2, r5
    2c64:	bne	2c4c <pointer_list_remove_at_free@@Base+0x4c>
    2c68:	ldr	r0, [r4, #4]
    2c6c:	cmp	r1, #2
    2c70:	bcc	2c80 <pointer_list_remove_at_free@@Base+0x80>
    2c74:	lsl	r1, r2, #2
    2c78:	bl	1084 <o_realloc@plt>
    2c7c:	b	2c88 <pointer_list_remove_at_free@@Base+0x88>
    2c80:	bl	1048 <o_free@plt>
    2c84:	mov	r0, #0
    2c88:	str	r0, [r4, #4]
    2c8c:	mov	r6, #1
    2c90:	ldr	r0, [r4]
    2c94:	sub	r0, r0, #1
    2c98:	str	r0, [r4]
    2c9c:	mov	r0, r6
    2ca0:	pop	{r4, r5, r6, sl, fp, pc}

00002ca4 <pointer_list_insert_at@@Base>:
    2ca4:	push	{r4, r5, r6, r7, fp, lr}
    2ca8:	add	fp, sp, #16
    2cac:	mov	r7, #0
    2cb0:	cmp	r0, #0
    2cb4:	beq	2d28 <pointer_list_insert_at@@Base+0x84>
    2cb8:	mov	r4, r0
    2cbc:	ldr	r0, [r0]
    2cc0:	mov	r5, r2
    2cc4:	cmp	r0, r2
    2cc8:	bcc	2d28 <pointer_list_insert_at@@Base+0x84>
    2ccc:	mov	r6, r1
    2cd0:	mov	r1, #4
    2cd4:	add	r1, r1, r0, lsl #2
    2cd8:	ldr	r0, [r4, #4]
    2cdc:	bl	1084 <o_realloc@plt>
    2ce0:	cmp	r0, #0
    2ce4:	str	r0, [r4, #4]
    2ce8:	beq	2d28 <pointer_list_insert_at@@Base+0x84>
    2cec:	ldr	r1, [r4]
    2cf0:	cmp	r1, r5
    2cf4:	bls	2d18 <pointer_list_insert_at@@Base+0x74>
    2cf8:	mov	r2, r1
    2cfc:	add	r3, r0, r2, lsl #2
    2d00:	ldr	r3, [r3, #-4]
    2d04:	str	r3, [r0, r2, lsl #2]
    2d08:	sub	r2, r2, #1
    2d0c:	ldr	r0, [r4, #4]
    2d10:	cmp	r2, r5
    2d14:	bhi	2cfc <pointer_list_insert_at@@Base+0x58>
    2d18:	str	r6, [r0, r5, lsl #2]
    2d1c:	add	r0, r1, #1
    2d20:	mov	r7, #1
    2d24:	str	r0, [r4]
    2d28:	mov	r0, r7
    2d2c:	pop	{r4, r5, r6, r7, fp, pc}

00002d30 <pointer_list_remove_pointer@@Base>:
    2d30:	push	{r4, r5, fp, lr}
    2d34:	add	fp, sp, #8
    2d38:	mov	r5, r0
    2d3c:	mov	r0, #0
    2d40:	cmp	r5, #0
    2d44:	ldrne	r2, [r5]
    2d48:	cmpne	r2, #0
    2d4c:	bne	2d54 <pointer_list_remove_pointer@@Base+0x24>
    2d50:	pop	{r4, r5, fp, pc}
    2d54:	ldr	r0, [r5, #4]
    2d58:	mov	r3, #0
    2d5c:	ldr	r4, [r0, r3, lsl #2]
    2d60:	cmp	r4, r1
    2d64:	beq	2d7c <pointer_list_remove_pointer@@Base+0x4c>
    2d68:	add	r3, r3, #1
    2d6c:	cmp	r3, r2
    2d70:	bcc	2d5c <pointer_list_remove_pointer@@Base+0x2c>
    2d74:	mov	r0, #0
    2d78:	pop	{r4, r5, fp, pc}
    2d7c:	sub	ip, r2, #1
    2d80:	cmp	ip, r3
    2d84:	bls	2dc8 <pointer_list_remove_pointer@@Base+0x98>
    2d88:	add	r4, r0, r3, lsl #2
    2d8c:	ldr	r4, [r4, #4]
    2d90:	str	r4, [r0, r3, lsl #2]
    2d94:	sub	r0, r2, #2
    2d98:	cmp	r0, r3
    2d9c:	beq	2dc4 <pointer_list_remove_pointer@@Base+0x94>
    2da0:	rsb	r0, r3, #0
    2da4:	rsb	r3, r2, #2
    2da8:	ldr	r4, [r5, #4]
    2dac:	sub	r4, r4, r0, lsl #2
    2db0:	sub	r0, r0, #1
    2db4:	ldr	r1, [r4, #8]
    2db8:	cmp	r3, r0
    2dbc:	str	r1, [r4, #4]
    2dc0:	bne	2da8 <pointer_list_remove_pointer@@Base+0x78>
    2dc4:	ldr	r0, [r5, #4]
    2dc8:	cmp	r2, #2
    2dcc:	bcc	2ddc <pointer_list_remove_pointer@@Base+0xac>
    2dd0:	lsl	r1, ip, #2
    2dd4:	bl	1084 <o_realloc@plt>
    2dd8:	b	2de4 <pointer_list_remove_pointer@@Base+0xb4>
    2ddc:	bl	1048 <o_free@plt>
    2de0:	mov	r0, #0
    2de4:	str	r0, [r5, #4]
    2de8:	ldr	r0, [r5]
    2dec:	sub	r0, r0, #1
    2df0:	str	r0, [r5]
    2df4:	mov	r0, #1
    2df8:	pop	{r4, r5, fp, pc}

00002dfc <pointer_list_remove_pointer_free@@Base>:
    2dfc:	push	{r4, r5, r6, sl, fp, lr}
    2e00:	add	fp, sp, #16
    2e04:	mov	r6, r0
    2e08:	mov	r0, #0
    2e0c:	cmp	r6, #0
    2e10:	ldrne	r3, [r6]
    2e14:	cmpne	r3, #0
    2e18:	bne	2e20 <pointer_list_remove_pointer_free@@Base+0x24>
    2e1c:	pop	{r4, r5, r6, sl, fp, pc}
    2e20:	ldr	r0, [r6, #4]
    2e24:	mov	r5, #0
    2e28:	ldr	r4, [r0, r5, lsl #2]
    2e2c:	cmp	r4, r1
    2e30:	beq	2e48 <pointer_list_remove_pointer_free@@Base+0x4c>
    2e34:	add	r5, r5, #1
    2e38:	cmp	r5, r3
    2e3c:	bcc	2e28 <pointer_list_remove_pointer_free@@Base+0x2c>
    2e40:	mov	r0, #0
    2e44:	pop	{r4, r5, r6, sl, fp, pc}
    2e48:	mov	r0, r1
    2e4c:	blx	r2
    2e50:	ldr	r1, [r6]
    2e54:	mov	r0, #0
    2e58:	cmp	r1, r5
    2e5c:	popls	{r4, r5, r6, sl, fp, pc}
    2e60:	sub	r2, r1, #1
    2e64:	cmp	r2, r5
    2e68:	bls	2e88 <pointer_list_remove_pointer_free@@Base+0x8c>
    2e6c:	ldr	r0, [r6, #4]
    2e70:	add	r3, r0, r5, lsl #2
    2e74:	ldr	r3, [r3, #4]
    2e78:	str	r3, [r0, r5, lsl #2]
    2e7c:	add	r5, r5, #1
    2e80:	cmp	r2, r5
    2e84:	bne	2e6c <pointer_list_remove_pointer_free@@Base+0x70>
    2e88:	ldr	r0, [r6, #4]
    2e8c:	cmp	r1, #2
    2e90:	bcc	2ea0 <pointer_list_remove_pointer_free@@Base+0xa4>
    2e94:	lsl	r1, r2, #2
    2e98:	bl	1084 <o_realloc@plt>
    2e9c:	b	2ea8 <pointer_list_remove_pointer_free@@Base+0xac>
    2ea0:	bl	1048 <o_free@plt>
    2ea4:	mov	r0, #0
    2ea8:	str	r0, [r6, #4]
    2eac:	ldr	r0, [r6]
    2eb0:	sub	r0, r0, #1
    2eb4:	str	r0, [r6]
    2eb8:	mov	r0, #1
    2ebc:	pop	{r4, r5, r6, sl, fp, pc}

Disassembly of section .fini:

00002ec0 <.fini>:
    2ec0:	push	{r3, lr}
    2ec4:	pop	{r3, pc}
