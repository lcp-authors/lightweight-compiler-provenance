
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011498 <.init>:
   11498:	push	{r3, lr}
   1149c:	bl	118dc <__assert_fail@plt+0x4c>
   114a0:	pop	{r3, pc}

Disassembly of section .plt:

000114a4 <fstatfs64@plt-0x14>:
   114a4:	push	{lr}		; (str lr, [sp, #-4]!)
   114a8:	ldr	lr, [pc, #4]	; 114b4 <fstatfs64@plt-0x4>
   114ac:	add	lr, pc, lr
   114b0:	ldr	pc, [lr, #8]!
   114b4:	andeq	sl, r1, ip, asr #22

000114b8 <fstatfs64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #2892]!	; 0xb4c

000114c4 <calloc@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #2884]!	; 0xb44

000114d0 <fputs_unlocked@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #2876]!	; 0xb3c

000114dc <raise@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #2868]!	; 0xb34

000114e8 <is_selinux_enabled@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #2860]!	; 0xb2c

000114f4 <strcmp@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #106496	; 0x1a000
   114fc:	ldr	pc, [ip, #2852]!	; 0xb24

00011500 <fflush@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #106496	; 0x1a000
   11508:	ldr	pc, [ip, #2844]!	; 0xb1c

0001150c <lsetfilecon@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #106496	; 0x1a000
   11514:	ldr	pc, [ip, #2836]!	; 0xb14

00011518 <memmove@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #106496	; 0x1a000
   11520:	ldr	pc, [ip, #2828]!	; 0xb0c

00011524 <free@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #106496	; 0x1a000
   1152c:	ldr	pc, [ip, #2820]!	; 0xb04

00011530 <_exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #106496	; 0x1a000
   11538:	ldr	pc, [ip, #2812]!	; 0xafc

0001153c <memcpy@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #106496	; 0x1a000
   11544:	ldr	pc, [ip, #2804]!	; 0xaf4

00011548 <mbsinit@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #106496	; 0x1a000
   11550:	ldr	pc, [ip, #2796]!	; 0xaec

00011554 <context_new@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #106496	; 0x1a000
   1155c:	ldr	pc, [ip, #2788]!	; 0xae4

00011560 <memcmp@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #106496	; 0x1a000
   11568:	ldr	pc, [ip, #2780]!	; 0xadc

0001156c <context_role_set@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #106496	; 0x1a000
   11574:	ldr	pc, [ip, #2772]!	; 0xad4

00011578 <dcgettext@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #106496	; 0x1a000
   11580:	ldr	pc, [ip, #2764]!	; 0xacc

00011584 <context_type_set@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #106496	; 0x1a000
   1158c:	ldr	pc, [ip, #2756]!	; 0xac4

00011590 <realloc@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #106496	; 0x1a000
   11598:	ldr	pc, [ip, #2748]!	; 0xabc

0001159c <fgetfilecon@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #106496	; 0x1a000
   115a4:	ldr	pc, [ip, #2740]!	; 0xab4

000115a8 <textdomain@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #106496	; 0x1a000
   115b0:	ldr	pc, [ip, #2732]!	; 0xaac

000115b4 <chdir@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #106496	; 0x1a000
   115bc:	ldr	pc, [ip, #2724]!	; 0xaa4

000115c0 <__fxstatat64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #106496	; 0x1a000
   115c8:	ldr	pc, [ip, #2716]!	; 0xa9c

000115cc <iswprint@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #106496	; 0x1a000
   115d4:	ldr	pc, [ip, #2708]!	; 0xa94

000115d8 <__fxstat64@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #106496	; 0x1a000
   115e0:	ldr	pc, [ip, #2700]!	; 0xa8c

000115e4 <lseek64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #106496	; 0x1a000
   115ec:	ldr	pc, [ip, #2692]!	; 0xa84

000115f0 <__ctype_get_mb_cur_max@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #106496	; 0x1a000
   115f8:	ldr	pc, [ip, #2684]!	; 0xa7c

000115fc <strcpy@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #106496	; 0x1a000
   11604:	ldr	pc, [ip, #2676]!	; 0xa74

00011608 <__fpending@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #106496	; 0x1a000
   11610:	ldr	pc, [ip, #2668]!	; 0xa6c

00011614 <ferror_unlocked@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #106496	; 0x1a000
   1161c:	ldr	pc, [ip, #2660]!	; 0xa64

00011620 <mbrtowc@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #106496	; 0x1a000
   11628:	ldr	pc, [ip, #2652]!	; 0xa5c

0001162c <error@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #106496	; 0x1a000
   11634:	ldr	pc, [ip, #2644]!	; 0xa54

00011638 <security_check_context@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #106496	; 0x1a000
   11640:	ldr	pc, [ip, #2636]!	; 0xa4c

00011644 <open64@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #106496	; 0x1a000
   1164c:	ldr	pc, [ip, #2628]!	; 0xa44

00011650 <lgetfilecon@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #106496	; 0x1a000
   11658:	ldr	pc, [ip, #2620]!	; 0xa3c

0001165c <malloc@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #106496	; 0x1a000
   11664:	ldr	pc, [ip, #2612]!	; 0xa34

00011668 <__libc_start_main@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #106496	; 0x1a000
   11670:	ldr	pc, [ip, #2604]!	; 0xa2c

00011674 <__freading@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #106496	; 0x1a000
   1167c:	ldr	pc, [ip, #2596]!	; 0xa24

00011680 <__gmon_start__@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #106496	; 0x1a000
   11688:	ldr	pc, [ip, #2588]!	; 0xa1c

0001168c <context_free@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #106496	; 0x1a000
   11694:	ldr	pc, [ip, #2580]!	; 0xa14

00011698 <getopt_long@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #106496	; 0x1a000
   116a0:	ldr	pc, [ip, #2572]!	; 0xa0c

000116a4 <__ctype_b_loc@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #106496	; 0x1a000
   116ac:	ldr	pc, [ip, #2564]!	; 0xa04

000116b0 <getcwd@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #106496	; 0x1a000
   116b8:	ldr	pc, [ip, #2556]!	; 0x9fc

000116bc <exit@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #106496	; 0x1a000
   116c4:	ldr	pc, [ip, #2548]!	; 0x9f4

000116c8 <context_user_set@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #106496	; 0x1a000
   116d0:	ldr	pc, [ip, #2540]!	; 0x9ec

000116d4 <getfilecon@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #106496	; 0x1a000
   116dc:	ldr	pc, [ip, #2532]!	; 0x9e4

000116e0 <strlen@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #106496	; 0x1a000
   116e8:	ldr	pc, [ip, #2524]!	; 0x9dc

000116ec <openat64@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #106496	; 0x1a000
   116f4:	ldr	pc, [ip, #2516]!	; 0x9d4

000116f8 <memrchr@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #106496	; 0x1a000
   11700:	ldr	pc, [ip, #2508]!	; 0x9cc

00011704 <__errno_location@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #106496	; 0x1a000
   1170c:	ldr	pc, [ip, #2500]!	; 0x9c4

00011710 <__sprintf_chk@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #106496	; 0x1a000
   11718:	ldr	pc, [ip, #2492]!	; 0x9bc

0001171c <__cxa_atexit@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #106496	; 0x1a000
   11724:	ldr	pc, [ip, #2484]!	; 0x9b4

00011728 <memset@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #106496	; 0x1a000
   11730:	ldr	pc, [ip, #2476]!	; 0x9ac

00011734 <__printf_chk@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #106496	; 0x1a000
   1173c:	ldr	pc, [ip, #2468]!	; 0x9a4

00011740 <fileno@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #106496	; 0x1a000
   11748:	ldr	pc, [ip, #2460]!	; 0x99c

0001174c <__fprintf_chk@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #106496	; 0x1a000
   11754:	ldr	pc, [ip, #2452]!	; 0x994

00011758 <memchr@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #106496	; 0x1a000
   11760:	ldr	pc, [ip, #2444]!	; 0x98c

00011764 <setfilecon@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #106496	; 0x1a000
   1176c:	ldr	pc, [ip, #2436]!	; 0x984

00011770 <access@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #106496	; 0x1a000
   11778:	ldr	pc, [ip, #2428]!	; 0x97c

0001177c <fclose@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #106496	; 0x1a000
   11784:	ldr	pc, [ip, #2420]!	; 0x974

00011788 <fseeko64@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #106496	; 0x1a000
   11790:	ldr	pc, [ip, #2412]!	; 0x96c

00011794 <fcntl64@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #106496	; 0x1a000
   1179c:	ldr	pc, [ip, #2404]!	; 0x964

000117a0 <setlocale@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #106496	; 0x1a000
   117a8:	ldr	pc, [ip, #2396]!	; 0x95c

000117ac <strrchr@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #106496	; 0x1a000
   117b4:	ldr	pc, [ip, #2388]!	; 0x954

000117b8 <nl_langinfo@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #106496	; 0x1a000
   117c0:	ldr	pc, [ip, #2380]!	; 0x94c

000117c4 <readdir64@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #106496	; 0x1a000
   117cc:	ldr	pc, [ip, #2372]!	; 0x944

000117d0 <fdopendir@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #106496	; 0x1a000
   117d8:	ldr	pc, [ip, #2364]!	; 0x93c

000117dc <dirfd@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #106496	; 0x1a000
   117e4:	ldr	pc, [ip, #2356]!	; 0x934

000117e8 <fchdir@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #106496	; 0x1a000
   117f0:	ldr	pc, [ip, #2348]!	; 0x92c

000117f4 <qsort@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #106496	; 0x1a000
   117fc:	ldr	pc, [ip, #2340]!	; 0x924

00011800 <freecon@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #106496	; 0x1a000
   11808:	ldr	pc, [ip, #2332]!	; 0x91c

0001180c <bindtextdomain@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #106496	; 0x1a000
   11814:	ldr	pc, [ip, #2324]!	; 0x914

00011818 <context_range_set@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #106496	; 0x1a000
   11820:	ldr	pc, [ip, #2316]!	; 0x90c

00011824 <context_str@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #106496	; 0x1a000
   1182c:	ldr	pc, [ip, #2308]!	; 0x904

00011830 <__xstat64@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #106496	; 0x1a000
   11838:	ldr	pc, [ip, #2300]!	; 0x8fc

0001183c <fputs@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #106496	; 0x1a000
   11844:	ldr	pc, [ip, #2292]!	; 0x8f4

00011848 <strncmp@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #106496	; 0x1a000
   11850:	ldr	pc, [ip, #2284]!	; 0x8ec

00011854 <abort@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #106496	; 0x1a000
   1185c:	ldr	pc, [ip, #2276]!	; 0x8e4

00011860 <close@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #106496	; 0x1a000
   11868:	ldr	pc, [ip, #2268]!	; 0x8dc

0001186c <__lxstat64@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #106496	; 0x1a000
   11874:	ldr	pc, [ip, #2260]!	; 0x8d4

00011878 <closedir@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #106496	; 0x1a000
   11880:	ldr	pc, [ip, #2252]!	; 0x8cc

00011884 <strspn@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #106496	; 0x1a000
   1188c:	ldr	pc, [ip, #2244]!	; 0x8c4

00011890 <__assert_fail@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #106496	; 0x1a000
   11898:	ldr	pc, [ip, #2236]!	; 0x8bc

Disassembly of section .text:

000118a0 <.text>:
   118a0:	mov	fp, #0
   118a4:	mov	lr, #0
   118a8:	pop	{r1}		; (ldr r1, [sp], #4)
   118ac:	mov	r2, sp
   118b0:	push	{r2}		; (str r2, [sp, #-4]!)
   118b4:	push	{r0}		; (str r0, [sp, #-4]!)
   118b8:	ldr	ip, [pc, #16]	; 118d0 <__assert_fail@plt+0x40>
   118bc:	push	{ip}		; (str ip, [sp, #-4]!)
   118c0:	ldr	r0, [pc, #12]	; 118d4 <__assert_fail@plt+0x44>
   118c4:	ldr	r3, [pc, #12]	; 118d8 <__assert_fail@plt+0x48>
   118c8:	bl	11668 <__libc_start_main@plt>
   118cc:	bl	11854 <abort@plt>
   118d0:	strdeq	r9, [r1], -ip
   118d4:	muleq	r1, ip, ip
   118d8:	muleq	r1, ip, r9
   118dc:	ldr	r3, [pc, #20]	; 118f8 <__assert_fail@plt+0x68>
   118e0:	ldr	r2, [pc, #20]	; 118fc <__assert_fail@plt+0x6c>
   118e4:	add	r3, pc, r3
   118e8:	ldr	r2, [r3, r2]
   118ec:	cmp	r2, #0
   118f0:	bxeq	lr
   118f4:	b	11680 <__gmon_start__@plt>
   118f8:	andeq	sl, r1, r4, lsl r7
   118fc:	andeq	r0, r0, r8, asr r1
   11900:	ldr	r0, [pc, #24]	; 11920 <__assert_fail@plt+0x90>
   11904:	ldr	r3, [pc, #24]	; 11924 <__assert_fail@plt+0x94>
   11908:	cmp	r3, r0
   1190c:	bxeq	lr
   11910:	ldr	r3, [pc, #16]	; 11928 <__assert_fail@plt+0x98>
   11914:	cmp	r3, #0
   11918:	bxeq	lr
   1191c:	bx	r3
   11920:			; <UNDEFINED> instruction: 0x0002c1b0
   11924:			; <UNDEFINED> instruction: 0x0002c1b0
   11928:	andeq	r0, r0, r0
   1192c:	ldr	r0, [pc, #36]	; 11958 <__assert_fail@plt+0xc8>
   11930:	ldr	r1, [pc, #36]	; 1195c <__assert_fail@plt+0xcc>
   11934:	sub	r1, r1, r0
   11938:	asr	r1, r1, #2
   1193c:	add	r1, r1, r1, lsr #31
   11940:	asrs	r1, r1, #1
   11944:	bxeq	lr
   11948:	ldr	r3, [pc, #16]	; 11960 <__assert_fail@plt+0xd0>
   1194c:	cmp	r3, #0
   11950:	bxeq	lr
   11954:	bx	r3
   11958:			; <UNDEFINED> instruction: 0x0002c1b0
   1195c:			; <UNDEFINED> instruction: 0x0002c1b0
   11960:	andeq	r0, r0, r0
   11964:	push	{r4, lr}
   11968:	ldr	r4, [pc, #24]	; 11988 <__assert_fail@plt+0xf8>
   1196c:	ldrb	r3, [r4]
   11970:	cmp	r3, #0
   11974:	popne	{r4, pc}
   11978:	bl	11900 <__assert_fail@plt+0x70>
   1197c:	mov	r3, #1
   11980:	strb	r3, [r4]
   11984:	pop	{r4, pc}
   11988:	andeq	ip, r2, ip, asr #3
   1198c:	b	1192c <__assert_fail@plt+0x9c>
   11990:	push	{fp, lr}
   11994:	mov	fp, sp
   11998:	sub	sp, sp, #64	; 0x40
   1199c:	mov	r8, r0
   119a0:	cmp	r0, #0
   119a4:	bne	11c5c <__assert_fail@plt+0x3cc>
   119a8:	movw	r1, #39595	; 0x9aab
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	movt	r1, #1
   119b8:	bl	11578 <dcgettext@plt>
   119bc:	mov	r1, r0
   119c0:	movw	r0, #49676	; 0xc20c
   119c4:	movt	r0, #2
   119c8:	ldr	r2, [r0]
   119cc:	mov	r0, #1
   119d0:	mov	r3, r2
   119d4:	str	r2, [sp]
   119d8:	bl	11734 <__printf_chk@plt>
   119dc:	movw	r1, #39753	; 0x9b49
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	movt	r1, #1
   119ec:	bl	11578 <dcgettext@plt>
   119f0:	movw	r9, #49604	; 0xc1c4
   119f4:	movt	r9, #2
   119f8:	ldr	r1, [r9]
   119fc:	bl	114d0 <fputs_unlocked@plt>
   11a00:	movw	r1, #41680	; 0xa2d0
   11a04:	mov	r0, #0
   11a08:	mov	r2, #5
   11a0c:	movt	r1, #1
   11a10:	bl	11578 <dcgettext@plt>
   11a14:	ldr	r1, [r9]
   11a18:	bl	114d0 <fputs_unlocked@plt>
   11a1c:	movw	r1, #39892	; 0x9bd4
   11a20:	mov	r0, #0
   11a24:	mov	r2, #5
   11a28:	movt	r1, #1
   11a2c:	bl	11578 <dcgettext@plt>
   11a30:	ldr	r1, [r9]
   11a34:	bl	114d0 <fputs_unlocked@plt>
   11a38:	movw	r1, #40123	; 0x9cbb
   11a3c:	mov	r0, #0
   11a40:	mov	r2, #5
   11a44:	movt	r1, #1
   11a48:	bl	11578 <dcgettext@plt>
   11a4c:	ldr	r1, [r9]
   11a50:	bl	114d0 <fputs_unlocked@plt>
   11a54:	movw	r1, #40406	; 0x9dd6
   11a58:	mov	r0, #0
   11a5c:	mov	r2, #5
   11a60:	movt	r1, #1
   11a64:	bl	11578 <dcgettext@plt>
   11a68:	ldr	r1, [r9]
   11a6c:	bl	114d0 <fputs_unlocked@plt>
   11a70:	movw	r1, #40534	; 0x9e56
   11a74:	mov	r0, #0
   11a78:	mov	r2, #5
   11a7c:	movt	r1, #1
   11a80:	bl	11578 <dcgettext@plt>
   11a84:	ldr	r1, [r9]
   11a88:	bl	114d0 <fputs_unlocked@plt>
   11a8c:	movw	r1, #40653	; 0x9ecd
   11a90:	mov	r0, #0
   11a94:	mov	r2, #5
   11a98:	movt	r1, #1
   11a9c:	bl	11578 <dcgettext@plt>
   11aa0:	ldr	r1, [r9]
   11aa4:	bl	114d0 <fputs_unlocked@plt>
   11aa8:	movw	r1, #40724	; 0x9f14
   11aac:	mov	r0, #0
   11ab0:	mov	r2, #5
   11ab4:	movt	r1, #1
   11ab8:	bl	11578 <dcgettext@plt>
   11abc:	ldr	r1, [r9]
   11ac0:	bl	114d0 <fputs_unlocked@plt>
   11ac4:	movw	r1, #40795	; 0x9f5b
   11ac8:	mov	r0, #0
   11acc:	mov	r2, #5
   11ad0:	movt	r1, #1
   11ad4:	bl	11578 <dcgettext@plt>
   11ad8:	ldr	r1, [r9]
   11adc:	bl	114d0 <fputs_unlocked@plt>
   11ae0:	movw	r1, #41260	; 0xa12c
   11ae4:	mov	r0, #0
   11ae8:	mov	r2, #5
   11aec:	movt	r1, #1
   11af0:	bl	11578 <dcgettext@plt>
   11af4:	ldr	r1, [r9]
   11af8:	bl	114d0 <fputs_unlocked@plt>
   11afc:	movw	r1, #41305	; 0xa159
   11b00:	mov	r0, #0
   11b04:	mov	r2, #5
   11b08:	movt	r1, #1
   11b0c:	bl	11578 <dcgettext@plt>
   11b10:	ldr	r1, [r9]
   11b14:	bl	114d0 <fputs_unlocked@plt>
   11b18:	movw	r0, #43000	; 0xa7f8
   11b1c:	add	r6, sp, #8
   11b20:	movt	r0, #1
   11b24:	mov	r1, r6
   11b28:	ldm	r0!, {r2, r3, r4, r5}
   11b2c:	stmia	r1!, {r2, r3, r4, r5}
   11b30:	ldm	r0!, {r2, r3, r4, r5, r7}
   11b34:	stmia	r1!, {r2, r3, r4, r5, r7}
   11b38:	ldm	r0, {r2, r3, r4, r5, r7}
   11b3c:	stm	r1, {r2, r3, r4, r5, r7}
   11b40:	movw	r1, #41755	; 0xa31b
   11b44:	movw	r5, #41359	; 0xa18f
   11b48:	movt	r1, #1
   11b4c:	movt	r5, #1
   11b50:	mov	r0, r5
   11b54:	bl	114f4 <strcmp@plt>
   11b58:	cmp	r0, #0
   11b5c:	ldrne	r1, [r6, #8]!
   11b60:	cmpne	r1, #0
   11b64:	bne	11b50 <__assert_fail@plt+0x2c0>
   11b68:	ldr	r6, [r6, #4]
   11b6c:	movw	r1, #41850	; 0xa37a
   11b70:	mov	r0, #0
   11b74:	mov	r2, #5
   11b78:	movt	r1, #1
   11b7c:	bl	11578 <dcgettext@plt>
   11b80:	movw	r2, #41404	; 0xa1bc
   11b84:	movw	r3, #41873	; 0xa391
   11b88:	mov	r1, r0
   11b8c:	mov	r0, #1
   11b90:	movt	r2, #1
   11b94:	movt	r3, #1
   11b98:	bl	11734 <__printf_chk@plt>
   11b9c:	cmp	r6, #0
   11ba0:	mov	r0, #5
   11ba4:	mov	r1, #0
   11ba8:	moveq	r6, r5
   11bac:	bl	117a0 <setlocale@plt>
   11bb0:	cmp	r0, #0
   11bb4:	beq	11bec <__assert_fail@plt+0x35c>
   11bb8:	movw	r1, #41913	; 0xa3b9
   11bbc:	mov	r2, #3
   11bc0:	movt	r1, #1
   11bc4:	bl	11848 <strncmp@plt>
   11bc8:	cmp	r0, #0
   11bcc:	beq	11bec <__assert_fail@plt+0x35c>
   11bd0:	movw	r1, #41917	; 0xa3bd
   11bd4:	mov	r0, #0
   11bd8:	mov	r2, #5
   11bdc:	movt	r1, #1
   11be0:	bl	11578 <dcgettext@plt>
   11be4:	ldr	r1, [r9]
   11be8:	bl	114d0 <fputs_unlocked@plt>
   11bec:	movw	r1, #41988	; 0xa404
   11bf0:	mov	r0, #0
   11bf4:	mov	r2, #5
   11bf8:	movt	r1, #1
   11bfc:	bl	11578 <dcgettext@plt>
   11c00:	movw	r2, #41873	; 0xa391
   11c04:	mov	r1, r0
   11c08:	mov	r0, #1
   11c0c:	mov	r3, r5
   11c10:	movt	r2, #1
   11c14:	bl	11734 <__printf_chk@plt>
   11c18:	movw	r1, #42015	; 0xa41f
   11c1c:	mov	r0, #0
   11c20:	mov	r2, #5
   11c24:	movt	r1, #1
   11c28:	bl	11578 <dcgettext@plt>
   11c2c:	movw	r3, #41259	; 0xa12b
   11c30:	mov	r1, r0
   11c34:	movw	r0, #41783	; 0xa337
   11c38:	cmp	r6, r5
   11c3c:	mov	r2, r6
   11c40:	movt	r0, #1
   11c44:	movt	r3, #1
   11c48:	moveq	r3, r0
   11c4c:	mov	r0, #1
   11c50:	bl	11734 <__printf_chk@plt>
   11c54:	mov	r0, r8
   11c58:	bl	116bc <exit@plt>
   11c5c:	movw	r0, #49600	; 0xc1c0
   11c60:	movw	r1, #39556	; 0x9a84
   11c64:	mov	r2, #5
   11c68:	movt	r0, #2
   11c6c:	movt	r1, #1
   11c70:	ldr	r5, [r0]
   11c74:	mov	r0, #0
   11c78:	bl	11578 <dcgettext@plt>
   11c7c:	mov	r2, r0
   11c80:	movw	r0, #49676	; 0xc20c
   11c84:	mov	r1, #1
   11c88:	movt	r0, #2
   11c8c:	ldr	r3, [r0]
   11c90:	mov	r0, r5
   11c94:	bl	1174c <__fprintf_chk@plt>
   11c98:	b	11c54 <__assert_fail@plt+0x3c4>
   11c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ca0:	add	fp, sp, #28
   11ca4:	sub	sp, sp, #36	; 0x24
   11ca8:	mov	r5, r0
   11cac:	ldr	r0, [r1]
   11cb0:	mov	r4, r1
   11cb4:	bl	15d98 <__assert_fail@plt+0x4508>
   11cb8:	movw	r1, #41259	; 0xa12b
   11cbc:	mov	r0, #6
   11cc0:	movt	r1, #1
   11cc4:	bl	117a0 <setlocale@plt>
   11cc8:	movw	r6, #41408	; 0xa1c0
   11ccc:	movw	r1, #41365	; 0xa195
   11cd0:	movt	r6, #1
   11cd4:	movt	r1, #1
   11cd8:	mov	r0, r6
   11cdc:	bl	1180c <bindtextdomain@plt>
   11ce0:	mov	r0, r6
   11ce4:	bl	115a8 <textdomain@plt>
   11ce8:	movw	r0, #11216	; 0x2bd0
   11cec:	movt	r0, #1
   11cf0:	bl	19a00 <__assert_fail@plt+0x8170>
   11cf4:	mov	r0, #16
   11cf8:	movw	r7, #41389	; 0xa1ad
   11cfc:	movw	r6, #42776	; 0xa718
   11d00:	mov	r8, #0
   11d04:	mvn	r9, #0
   11d08:	mov	sl, #0
   11d0c:	str	r0, [sp, #24]
   11d10:	mov	r0, #0
   11d14:	movt	r7, #1
   11d18:	movt	r6, #1
   11d1c:	str	r0, [sp, #20]
   11d20:	mov	r0, #0
   11d24:	str	r0, [sp, #16]
   11d28:	mov	r0, r5
   11d2c:	mov	r1, r4
   11d30:	mov	r2, r7
   11d34:	mov	r3, r6
   11d38:	str	r8, [sp]
   11d3c:	bl	11698 <getopt_long@plt>
   11d40:	cmp	r0, #81	; 0x51
   11d44:	ble	11da8 <__assert_fail@plt+0x518>
   11d48:	sub	r1, r0, #102	; 0x66
   11d4c:	cmp	r1, #16
   11d50:	bhi	11dcc <__assert_fail@plt+0x53c>
   11d54:	add	r0, pc, #0
   11d58:	ldr	pc, [r0, r1, lsl #2]
   11d5c:	andeq	r1, r1, r8, lsr #26
   11d60:	andeq	r2, r1, ip, lsr fp
   11d64:	andeq	r1, r1, r0, lsr #27
   11d68:	andeq	r2, r1, ip, lsr fp
   11d6c:	andeq	r2, r1, ip, lsr fp
   11d70:	andeq	r2, r1, ip, lsr fp
   11d74:	andeq	r1, r1, r0, asr #28
   11d78:	andeq	r2, r1, ip, lsr fp
   11d7c:	andeq	r2, r1, ip, lsr fp
   11d80:	andeq	r2, r1, ip, lsr fp
   11d84:	andeq	r2, r1, ip, lsr fp
   11d88:	andeq	r2, r1, ip, lsr fp
   11d8c:	andeq	r1, r1, r0, lsr #28
   11d90:	andeq	r2, r1, ip, lsr fp
   11d94:	strdeq	r1, [r1], -r8
   11d98:	andeq	r1, r1, r8, ror #28
   11d9c:	andeq	r1, r1, r4, asr lr
   11da0:	mov	r9, #0
   11da4:	b	11d28 <__assert_fail@plt+0x498>
   11da8:	cmp	r0, #71	; 0x47
   11dac:	ble	11ec4 <__assert_fail@plt+0x634>
   11db0:	cmp	r0, #72	; 0x48
   11db4:	beq	11e94 <__assert_fail@plt+0x604>
   11db8:	cmp	r0, #76	; 0x4c
   11dbc:	bne	11ea0 <__assert_fail@plt+0x610>
   11dc0:	mov	r0, #2
   11dc4:	str	r0, [sp, #24]
   11dc8:	b	11d28 <__assert_fail@plt+0x498>
   11dcc:	sub	r1, r0, #256	; 0x100
   11dd0:	cmp	r1, #3
   11dd4:	bhi	11e0c <__assert_fail@plt+0x57c>
   11dd8:	add	r0, pc, #0
   11ddc:	ldr	pc, [r0, r1, lsl #2]
   11de0:	strdeq	r1, [r1], -r0
   11de4:	andeq	r1, r1, r8, lsl #29
   11de8:	andeq	r1, r1, r4, lsr lr
   11dec:			; <UNDEFINED> instruction: 0x00011eb4
   11df0:	mov	r9, #1
   11df4:	b	11d28 <__assert_fail@plt+0x498>
   11df8:	movw	r0, #49608	; 0xc1c8
   11dfc:	movw	r1, #49628	; 0xc1dc
   11e00:	movt	r0, #2
   11e04:	movt	r1, #2
   11e08:	b	11e78 <__assert_fail@plt+0x5e8>
   11e0c:	cmp	r0, #82	; 0x52
   11e10:	bne	12b3c <__assert_fail@plt+0x12ac>
   11e14:	movw	r0, #49616	; 0xc1d0
   11e18:	movt	r0, #2
   11e1c:	b	11e5c <__assert_fail@plt+0x5cc>
   11e20:	movw	r0, #49608	; 0xc1c8
   11e24:	movw	r1, #49624	; 0xc1d8
   11e28:	movt	r0, #2
   11e2c:	movt	r1, #2
   11e30:	b	11e78 <__assert_fail@plt+0x5e8>
   11e34:	mov	r0, #1
   11e38:	str	r0, [sp, #20]
   11e3c:	b	11d28 <__assert_fail@plt+0x498>
   11e40:	movw	r0, #49608	; 0xc1c8
   11e44:	movw	r1, #49632	; 0xc1e0
   11e48:	movt	r0, #2
   11e4c:	movt	r1, #2
   11e50:	b	11e78 <__assert_fail@plt+0x5e8>
   11e54:	movw	r0, #49617	; 0xc1d1
   11e58:	movt	r0, #2
   11e5c:	mov	r1, #1
   11e60:	strb	r1, [r0]
   11e64:	b	11d28 <__assert_fail@plt+0x498>
   11e68:	movw	r0, #49608	; 0xc1c8
   11e6c:	movw	r1, #49620	; 0xc1d4
   11e70:	movt	r0, #2
   11e74:	movt	r1, #2
   11e78:	ldr	r0, [r0]
   11e7c:	str	r0, [r1]
   11e80:	mov	sl, #1
   11e84:	b	11d28 <__assert_fail@plt+0x498>
   11e88:	mov	r0, #0
   11e8c:	str	r0, [sp, #20]
   11e90:	b	11d28 <__assert_fail@plt+0x498>
   11e94:	mov	r0, #17
   11e98:	str	r0, [sp, #24]
   11e9c:	b	11d28 <__assert_fail@plt+0x498>
   11ea0:	cmp	r0, #80	; 0x50
   11ea4:	bne	12b3c <__assert_fail@plt+0x12ac>
   11ea8:	mov	r0, #16
   11eac:	str	r0, [sp, #24]
   11eb0:	b	11d28 <__assert_fail@plt+0x498>
   11eb4:	movw	r0, #49608	; 0xc1c8
   11eb8:	movt	r0, #2
   11ebc:	ldr	r0, [r0]
   11ec0:	b	11d24 <__assert_fail@plt+0x494>
   11ec4:	cmn	r0, #1
   11ec8:	bne	12a28 <__assert_fail@plt+0x1198>
   11ecc:	movw	r0, #49616	; 0xc1d0
   11ed0:	ldr	r7, [sp, #24]
   11ed4:	movt	r0, #2
   11ed8:	ldrb	r0, [r0]
   11edc:	cmp	r0, #1
   11ee0:	bne	11f00 <__assert_fail@plt+0x670>
   11ee4:	cmp	r7, #16
   11ee8:	bne	11f18 <__assert_fail@plt+0x688>
   11eec:	cmp	r9, #1
   11ef0:	beq	12b44 <__assert_fail@plt+0x12b4>
   11ef4:	mov	r7, #16
   11ef8:	mov	r0, #0
   11efc:	b	11f10 <__assert_fail@plt+0x680>
   11f00:	cmp	r9, #0
   11f04:	mov	r7, #16
   11f08:	movwne	r9, #1
   11f0c:	mov	r0, r9
   11f10:	ldr	r6, [sp, #16]
   11f14:	b	11f28 <__assert_fail@plt+0x698>
   11f18:	ldr	r6, [sp, #16]
   11f1c:	mov	r0, #1
   11f20:	cmp	r9, #0
   11f24:	beq	12b50 <__assert_fail@plt+0x12c0>
   11f28:	movw	r1, #49636	; 0xc1e4
   11f2c:	movw	r8, #49592	; 0xc1b8
   11f30:	cmp	r6, #0
   11f34:	movt	r1, #2
   11f38:	movt	r8, #2
   11f3c:	strb	r0, [r1]
   11f40:	ldr	r0, [r8]
   11f44:	mov	r1, #2
   11f48:	movwne	r1, #1
   11f4c:	tst	sl, #1
   11f50:	movwne	r1, #1
   11f54:	sub	r2, r5, r0
   11f58:	cmp	r2, r1
   11f5c:	blt	12a94 <__assert_fail@plt+0x1204>
   11f60:	cmp	r6, #0
   11f64:	beq	11fa8 <__assert_fail@plt+0x718>
   11f68:	mov	r0, #0
   11f6c:	add	r1, sp, #28
   11f70:	str	r0, [sp, #28]
   11f74:	mov	r0, r6
   11f78:	bl	18000 <__assert_fail@plt+0x6770>
   11f7c:	cmn	r0, #1
   11f80:	ble	12ad8 <__assert_fail@plt+0x1248>
   11f84:	ldr	r0, [sp, #28]
   11f88:	movw	r1, #49640	; 0xc1e8
   11f8c:	tst	sl, #1
   11f90:	movt	r1, #2
   11f94:	str	r0, [r1]
   11f98:	beq	11ff8 <__assert_fail@plt+0x768>
   11f9c:	movw	r1, #41603	; 0xa283
   11fa0:	movt	r1, #1
   11fa4:	b	12b20 <__assert_fail@plt+0x1290>
   11fa8:	tst	sl, #1
   11fac:	beq	11fc4 <__assert_fail@plt+0x734>
   11fb0:	movw	r0, #49640	; 0xc1e8
   11fb4:	mov	r1, #0
   11fb8:	movt	r0, #2
   11fbc:	str	r1, [r0]
   11fc0:	b	11ff8 <__assert_fail@plt+0x768>
   11fc4:	add	r1, r0, #1
   11fc8:	movw	r5, #49640	; 0xc1e8
   11fcc:	str	r1, [r8]
   11fd0:	movt	r5, #2
   11fd4:	ldr	r0, [r4, r0, lsl #2]
   11fd8:	str	r0, [r5]
   11fdc:	bl	114e8 <is_selinux_enabled@plt>
   11fe0:	cmp	r0, #1
   11fe4:	blt	11ff8 <__assert_fail@plt+0x768>
   11fe8:	ldr	r0, [r5]
   11fec:	bl	11638 <security_check_context@plt>
   11ff0:	cmn	r0, #1
   11ff4:	ble	12b74 <__assert_fail@plt+0x12e4>
   11ff8:	movw	r0, #49616	; 0xc1d0
   11ffc:	ldr	r1, [sp, #20]
   12000:	movt	r0, #2
   12004:	ldrb	r0, [r0]
   12008:	and	r0, r1, r0
   1200c:	tst	r0, #1
   12010:	beq	12064 <__assert_fail@plt+0x7d4>
   12014:	movw	r0, #49648	; 0xc1f0
   12018:	movt	r0, #2
   1201c:	bl	178d4 <__assert_fail@plt+0x6044>
   12020:	movw	r1, #49664	; 0xc200
   12024:	cmp	r0, #0
   12028:	movt	r1, #2
   1202c:	str	r0, [r1]
   12030:	bne	12074 <__assert_fail@plt+0x7e4>
   12034:	bl	11704 <__errno_location@plt>
   12038:	ldr	r4, [r0]
   1203c:	movw	r1, #41649	; 0xa2b1
   12040:	mov	r0, #0
   12044:	mov	r2, #5
   12048:	movt	r1, #1
   1204c:	bl	11578 <dcgettext@plt>
   12050:	movw	r1, #44501	; 0xadd5
   12054:	mov	r5, r0
   12058:	mov	r0, #4
   1205c:	movt	r1, #1
   12060:	b	12b00 <__assert_fail@plt+0x1270>
   12064:	movw	r0, #49664	; 0xc200
   12068:	mov	r1, #0
   1206c:	movt	r0, #2
   12070:	str	r1, [r0]
   12074:	ldr	r0, [r8]
   12078:	orr	r1, r7, #8
   1207c:	mov	r2, #0
   12080:	add	r0, r4, r0, lsl #2
   12084:	bl	18a58 <__assert_fail@plt+0x71c8>
   12088:	str	r0, [sp, #24]
   1208c:	bl	13570 <__assert_fail@plt+0x1ce0>
   12090:	cmp	r0, #0
   12094:	beq	120a4 <__assert_fail@plt+0x814>
   12098:	mov	r8, r0
   1209c:	mov	r6, #1
   120a0:	b	12190 <__assert_fail@plt+0x900>
   120a4:	mov	r6, #1
   120a8:	b	129a4 <__assert_fail@plt+0x1114>
   120ac:	movw	r1, #42183	; 0xa4c7
   120b0:	mov	r0, #0
   120b4:	mov	r2, #5
   120b8:	movt	r1, #1
   120bc:	bl	11578 <dcgettext@plt>
   120c0:	mov	r5, r0
   120c4:	mov	r0, #4
   120c8:	mov	r1, r9
   120cc:	bl	17464 <__assert_fail@plt+0x5bd4>
   120d0:	mov	r3, r0
   120d4:	mov	r0, #0
   120d8:	mov	r1, #0
   120dc:	mov	r2, r5
   120e0:	bl	1162c <error@plt>
   120e4:	movw	r1, #42286	; 0xa52e
   120e8:	mov	r0, #0
   120ec:	mov	r2, #5
   120f0:	mov	r4, #0
   120f4:	movt	r1, #1
   120f8:	bl	11578 <dcgettext@plt>
   120fc:	mov	r2, r0
   12100:	mov	r0, #0
   12104:	mov	r1, #0
   12108:	bl	1162c <error@plt>
   1210c:	b	12964 <__assert_fail@plt+0x10d4>
   12110:	movw	r1, #42183	; 0xa4c7
   12114:	mov	r0, #0
   12118:	mov	r2, #5
   1211c:	movt	r1, #1
   12120:	bl	11578 <dcgettext@plt>
   12124:	mov	r5, r0
   12128:	mov	r0, #4
   1212c:	mov	r1, r9
   12130:	bl	17464 <__assert_fail@plt+0x5bd4>
   12134:	mov	r3, r0
   12138:	mov	r0, #0
   1213c:	mov	r1, #0
   12140:	mov	r2, r5
   12144:	bl	1162c <error@plt>
   12148:	movw	r1, #42286	; 0xa52e
   1214c:	mov	r0, #0
   12150:	mov	r2, #5
   12154:	mov	r7, #0
   12158:	movt	r1, #1
   1215c:	bl	11578 <dcgettext@plt>
   12160:	mov	r2, r0
   12164:	mov	r0, #0
   12168:	mov	r1, #0
   1216c:	bl	1162c <error@plt>
   12170:	ldr	r4, [sp, #24]
   12174:	mov	r1, r8
   12178:	mov	r2, #4
   1217c:	mov	r0, r4
   12180:	bl	14934 <__assert_fail@plt+0x30a4>
   12184:	mov	r0, r4
   12188:	bl	13570 <__assert_fail@plt+0x1ce0>
   1218c:	b	1298c <__assert_fail@plt+0x10fc>
   12190:	ldr	sl, [r8, #24]
   12194:	ldr	r9, [r8, #28]
   12198:	ldrh	r0, [r8, #56]	; 0x38
   1219c:	add	r4, r8, #64	; 0x40
   121a0:	sub	r1, r0, #1
   121a4:	cmp	r1, #9
   121a8:	bhi	125d0 <__assert_fail@plt+0xd40>
   121ac:	add	r2, pc, #4
   121b0:	mov	r7, #1
   121b4:	ldr	pc, [r2, r1, lsl #2]
   121b8:	andeq	r2, r1, r0, ror #3
   121bc:	andeq	r2, r1, r8, lsl r3
   121c0:	andeq	r2, r1, r0, asr #7
   121c4:			; <UNDEFINED> instruction: 0x000122b0
   121c8:	andeq	r2, r1, r0, asr #7
   121cc:	andeq	r2, r1, r0, ror r3
   121d0:	andeq	r2, r1, ip, lsl #7
   121d4:	andeq	r2, r1, r0, asr #7
   121d8:	andeq	r2, r1, r0, asr #7
   121dc:	andeq	r2, r1, r4, asr #5
   121e0:	movw	r0, #49616	; 0xc1d0
   121e4:	movt	r0, #2
   121e8:	ldrb	r0, [r0]
   121ec:	cmp	r0, #1
   121f0:	bne	123ec <__assert_fail@plt+0xb5c>
   121f4:	movw	r0, #49664	; 0xc200
   121f8:	mov	r7, #1
   121fc:	movt	r0, #2
   12200:	ldr	r0, [r0]
   12204:	cmp	r0, #0
   12208:	beq	1298c <__assert_fail@plt+0x10fc>
   1220c:	ldrd	r2, [r0]
   12210:	ldr	r1, [r8, #160]	; 0xa0
   12214:	ldr	r5, [r8, #164]	; 0xa4
   12218:	eor	r3, r5, r3
   1221c:	eor	r1, r1, r2
   12220:	orrs	r1, r1, r3
   12224:	bne	1298c <__assert_fail@plt+0x10fc>
   12228:	ldrd	r0, [r0, #8]
   1222c:	ldrd	r2, [r4]
   12230:	eor	r1, r3, r1
   12234:	eor	r0, r2, r0
   12238:	orrs	r0, r0, r1
   1223c:	bne	1298c <__assert_fail@plt+0x10fc>
   12240:	movw	r4, #44501	; 0xadd5
   12244:	mov	r0, r9
   12248:	movt	r4, #1
   1224c:	mov	r1, r4
   12250:	bl	114f4 <strcmp@plt>
   12254:	cmp	r0, #0
   12258:	beq	12110 <__assert_fail@plt+0x880>
   1225c:	movw	r1, #42228	; 0xa4f4
   12260:	mov	r0, #0
   12264:	mov	r2, #5
   12268:	movt	r1, #1
   1226c:	bl	11578 <dcgettext@plt>
   12270:	mov	r5, r0
   12274:	mov	r0, #0
   12278:	mov	r1, #4
   1227c:	mov	r2, r9
   12280:	bl	173bc <__assert_fail@plt+0x5b2c>
   12284:	mov	r7, r0
   12288:	mov	r0, #1
   1228c:	mov	r1, #4
   12290:	mov	r2, r4
   12294:	bl	173bc <__assert_fail@plt+0x5b2c>
   12298:	str	r0, [sp]
   1229c:	mov	r0, #0
   122a0:	mov	r1, #0
   122a4:	mov	r2, r5
   122a8:	mov	r3, r7
   122ac:	b	12144 <__assert_fail@plt+0x8b4>
   122b0:	ldr	r5, [r8, #32]
   122b4:	movw	r1, #42352	; 0xa570
   122b8:	mov	r0, #0
   122bc:	movt	r1, #1
   122c0:	b	122ec <__assert_fail@plt+0xa5c>
   122c4:	ldr	r0, [r8, #48]	; 0x30
   122c8:	cmp	r0, #0
   122cc:	bne	122dc <__assert_fail@plt+0xa4c>
   122d0:	ldr	r0, [r8, #16]
   122d4:	cmp	r0, #0
   122d8:	beq	1292c <__assert_fail@plt+0x109c>
   122dc:	ldr	r5, [r8, #32]
   122e0:	movw	r1, #42335	; 0xa55f
   122e4:	mov	r0, #0
   122e8:	movt	r1, #1
   122ec:	mov	r2, #5
   122f0:	bl	11578 <dcgettext@plt>
   122f4:	mov	r7, r0
   122f8:	mov	r0, #4
   122fc:	mov	r1, r9
   12300:	bl	17464 <__assert_fail@plt+0x5bd4>
   12304:	mov	r3, r0
   12308:	mov	r0, #0
   1230c:	mov	r1, r5
   12310:	mov	r2, r7
   12314:	b	123b4 <__assert_fail@plt+0xb24>
   12318:	ldr	r0, [sp, #24]
   1231c:	mov	r1, r8
   12320:	bl	18aa4 <__assert_fail@plt+0x7214>
   12324:	cmp	r0, #0
   12328:	beq	123ec <__assert_fail@plt+0xb5c>
   1232c:	movw	r1, #42377	; 0xa589
   12330:	mov	r0, #0
   12334:	mov	r2, #5
   12338:	mov	r7, #0
   1233c:	movt	r1, #1
   12340:	bl	11578 <dcgettext@plt>
   12344:	mov	r5, r0
   12348:	mov	r0, #0
   1234c:	mov	r1, #3
   12350:	mov	r2, r9
   12354:	bl	17608 <__assert_fail@plt+0x5d78>
   12358:	mov	r3, r0
   1235c:	mov	r0, #0
   12360:	mov	r1, #0
   12364:	mov	r2, r5
   12368:	bl	1162c <error@plt>
   1236c:	b	1298c <__assert_fail@plt+0x10fc>
   12370:	movw	r0, #49616	; 0xc1d0
   12374:	mov	r7, #1
   12378:	movt	r0, #2
   1237c:	ldrb	r0, [r0]
   12380:	cmp	r0, #0
   12384:	bne	123c8 <__assert_fail@plt+0xb38>
   12388:	b	1298c <__assert_fail@plt+0x10fc>
   1238c:	ldr	r5, [r8, #32]
   12390:	mov	r0, #0
   12394:	mov	r1, #3
   12398:	mov	r2, r9
   1239c:	bl	17608 <__assert_fail@plt+0x5d78>
   123a0:	movw	r2, #43087	; 0xa84f
   123a4:	mov	r3, r0
   123a8:	mov	r0, #0
   123ac:	mov	r1, r5
   123b0:	movt	r2, #1
   123b4:	bl	1162c <error@plt>
   123b8:	ldrh	r0, [r8, #56]	; 0x38
   123bc:	mov	r7, #0
   123c0:	cmp	r0, #6
   123c4:	bne	123e0 <__assert_fail@plt+0xb50>
   123c8:	cmp	r7, #0
   123cc:	movwne	r0, #49664	; 0xc200
   123d0:	movtne	r0, #2
   123d4:	ldrne	r0, [r0]
   123d8:	cmpne	r0, #0
   123dc:	bne	1252c <__assert_fail@plt+0xc9c>
   123e0:	mov	r4, #0
   123e4:	cmp	r7, #0
   123e8:	beq	12964 <__assert_fail@plt+0x10d4>
   123ec:	movw	r0, #49617	; 0xc1d1
   123f0:	movt	r0, #2
   123f4:	ldrb	r0, [r0]
   123f8:	cmp	r0, #1
   123fc:	bne	12434 <__assert_fail@plt+0xba4>
   12400:	movw	r1, #42563	; 0xa643
   12404:	mov	r0, #0
   12408:	mov	r2, #5
   1240c:	movt	r1, #1
   12410:	bl	11578 <dcgettext@plt>
   12414:	mov	r5, r0
   12418:	mov	r0, #4
   1241c:	mov	r1, r9
   12420:	bl	17464 <__assert_fail@plt+0x5bd4>
   12424:	mov	r2, r0
   12428:	mov	r0, #1
   1242c:	mov	r1, r5
   12430:	bl	11734 <__printf_chk@plt>
   12434:	ldr	r0, [sp, #24]
   12438:	ldr	r5, [r0, #32]
   1243c:	mov	r0, #0
   12440:	str	r0, [sp, #32]
   12444:	movw	r0, #49640	; 0xc1e8
   12448:	movt	r0, #2
   1244c:	ldr	r7, [r0]
   12450:	cmp	r7, #0
   12454:	beq	12480 <__assert_fail@plt+0xbf0>
   12458:	movw	r0, #49636	; 0xc1e4
   1245c:	movt	r0, #2
   12460:	ldrb	r0, [r0]
   12464:	cmp	r0, #0
   12468:	beq	124a8 <__assert_fail@plt+0xc18>
   1246c:	mov	r0, r5
   12470:	mov	r1, sl
   12474:	mov	r2, r7
   12478:	bl	17c90 <__assert_fail@plt+0x6400>
   1247c:	b	124b8 <__assert_fail@plt+0xc28>
   12480:	movw	r0, #49636	; 0xc1e4
   12484:	movt	r0, #2
   12488:	ldrb	r0, [r0]
   1248c:	cmp	r0, #0
   12490:	beq	125d8 <__assert_fail@plt+0xd48>
   12494:	mov	r0, r5
   12498:	mov	r1, sl
   1249c:	add	r2, sp, #32
   124a0:	bl	17920 <__assert_fail@plt+0x6090>
   124a4:	b	125e8 <__assert_fail@plt+0xd58>
   124a8:	mov	r0, r5
   124ac:	mov	r1, sl
   124b0:	mov	r2, r7
   124b4:	bl	17e48 <__assert_fail@plt+0x65b8>
   124b8:	cmp	r0, #0
   124bc:	beq	12884 <__assert_fail@plt+0xff4>
   124c0:	bl	11704 <__errno_location@plt>
   124c4:	ldr	r0, [r0]
   124c8:	movw	r1, #42645	; 0xa695
   124cc:	mov	r2, #5
   124d0:	movt	r1, #1
   124d4:	str	r0, [sp, #20]
   124d8:	mov	r0, #0
   124dc:	bl	11578 <dcgettext@plt>
   124e0:	mov	r5, r6
   124e4:	mov	r6, r0
   124e8:	mov	r0, #0
   124ec:	mov	r1, #4
   124f0:	mov	r2, sl
   124f4:	bl	173bc <__assert_fail@plt+0x5b2c>
   124f8:	mov	sl, r0
   124fc:	mov	r0, #1
   12500:	mov	r1, r7
   12504:	mov	r4, #1
   12508:	bl	1778c <__assert_fail@plt+0x5efc>
   1250c:	ldr	r1, [sp, #20]
   12510:	str	r0, [sp]
   12514:	mov	r2, r6
   12518:	mov	r0, #0
   1251c:	mov	r3, sl
   12520:	mov	r6, r5
   12524:	bl	1162c <error@plt>
   12528:	b	12888 <__assert_fail@plt+0xff8>
   1252c:	ldrd	r2, [r0]
   12530:	ldr	r1, [r8, #160]	; 0xa0
   12534:	ldr	r5, [r8, #164]	; 0xa4
   12538:	eor	r3, r5, r3
   1253c:	eor	r1, r1, r2
   12540:	orrs	r1, r1, r3
   12544:	bne	123ec <__assert_fail@plt+0xb5c>
   12548:	ldrd	r0, [r0, #8]
   1254c:	ldrd	r2, [r4]
   12550:	eor	r1, r3, r1
   12554:	eor	r0, r2, r0
   12558:	orrs	r0, r0, r1
   1255c:	bne	123ec <__assert_fail@plt+0xb5c>
   12560:	movw	r4, #44501	; 0xadd5
   12564:	mov	r0, r9
   12568:	movt	r4, #1
   1256c:	mov	r1, r4
   12570:	bl	114f4 <strcmp@plt>
   12574:	cmp	r0, #0
   12578:	beq	120ac <__assert_fail@plt+0x81c>
   1257c:	movw	r1, #42228	; 0xa4f4
   12580:	mov	r0, #0
   12584:	mov	r2, #5
   12588:	movt	r1, #1
   1258c:	bl	11578 <dcgettext@plt>
   12590:	mov	r5, r0
   12594:	mov	r0, #0
   12598:	mov	r1, #4
   1259c:	mov	r2, r9
   125a0:	bl	173bc <__assert_fail@plt+0x5b2c>
   125a4:	mov	r7, r0
   125a8:	mov	r0, #1
   125ac:	mov	r1, #4
   125b0:	mov	r2, r4
   125b4:	bl	173bc <__assert_fail@plt+0x5b2c>
   125b8:	str	r0, [sp]
   125bc:	mov	r0, #0
   125c0:	mov	r1, #0
   125c4:	mov	r2, r5
   125c8:	mov	r3, r7
   125cc:	b	120e0 <__assert_fail@plt+0x850>
   125d0:	mov	r7, #1
   125d4:	b	123c0 <__assert_fail@plt+0xb30>
   125d8:	mov	r0, r5
   125dc:	mov	r1, sl
   125e0:	add	r2, sp, #32
   125e4:	bl	17ad8 <__assert_fail@plt+0x6248>
   125e8:	cmn	r0, #1
   125ec:	bgt	12600 <__assert_fail@plt+0xd70>
   125f0:	bl	11704 <__errno_location@plt>
   125f4:	ldr	r7, [r0]
   125f8:	cmp	r7, #61	; 0x3d
   125fc:	bne	128f0 <__assert_fail@plt+0x1060>
   12600:	ldr	r7, [sp, #32]
   12604:	cmp	r7, #0
   12608:	beq	1281c <__assert_fail@plt+0xf8c>
   1260c:	mov	r0, r7
   12610:	bl	11554 <context_new@plt>
   12614:	cmp	r0, #0
   12618:	beq	128b4 <__assert_fail@plt+0x1024>
   1261c:	mov	r9, r0
   12620:	movw	r0, #49620	; 0xc1d4
   12624:	movt	r0, #2
   12628:	str	r9, [sp, #16]
   1262c:	ldr	r1, [r0]
   12630:	mov	r0, #1
   12634:	str	r0, [sp, #20]
   12638:	cmp	r1, #0
   1263c:	beq	126a8 <__assert_fail@plt+0xe18>
   12640:	mov	r0, r9
   12644:	bl	116c8 <context_user_set@plt>
   12648:	cmp	r0, #0
   1264c:	beq	126a8 <__assert_fail@plt+0xe18>
   12650:	bl	11704 <__errno_location@plt>
   12654:	ldr	r4, [r0]
   12658:	movw	r1, #42720	; 0xa6e0
   1265c:	mov	r0, #0
   12660:	mov	r2, #5
   12664:	str	r0, [sp, #20]
   12668:	mov	r0, #0
   1266c:	movt	r1, #1
   12670:	bl	11578 <dcgettext@plt>
   12674:	mov	r7, r0
   12678:	movw	r0, #49620	; 0xc1d4
   1267c:	movt	r0, #2
   12680:	ldr	r0, [r0]
   12684:	bl	1779c <__assert_fail@plt+0x5f0c>
   12688:	ldr	r9, [sp, #16]
   1268c:	movw	r3, #42108	; 0xa47c
   12690:	str	r0, [sp]
   12694:	mov	r0, #0
   12698:	mov	r1, r4
   1269c:	mov	r2, r7
   126a0:	movt	r3, #1
   126a4:	bl	1162c <error@plt>
   126a8:	movw	r0, #49632	; 0xc1e0
   126ac:	movt	r0, #2
   126b0:	ldr	r1, [r0]
   126b4:	cmp	r1, #0
   126b8:	beq	12724 <__assert_fail@plt+0xe94>
   126bc:	mov	r0, r9
   126c0:	bl	11818 <context_range_set@plt>
   126c4:	cmp	r0, #0
   126c8:	beq	12724 <__assert_fail@plt+0xe94>
   126cc:	bl	11704 <__errno_location@plt>
   126d0:	ldr	r4, [r0]
   126d4:	movw	r1, #42720	; 0xa6e0
   126d8:	mov	r0, #0
   126dc:	mov	r2, #5
   126e0:	str	r0, [sp, #20]
   126e4:	mov	r0, #0
   126e8:	movt	r1, #1
   126ec:	bl	11578 <dcgettext@plt>
   126f0:	mov	r7, r0
   126f4:	movw	r0, #49632	; 0xc1e0
   126f8:	movt	r0, #2
   126fc:	ldr	r0, [r0]
   12700:	bl	1779c <__assert_fail@plt+0x5f0c>
   12704:	ldr	r9, [sp, #16]
   12708:	movw	r3, #42123	; 0xa48b
   1270c:	str	r0, [sp]
   12710:	mov	r0, #0
   12714:	mov	r1, r4
   12718:	mov	r2, r7
   1271c:	movt	r3, #1
   12720:	bl	1162c <error@plt>
   12724:	movw	r0, #49624	; 0xc1d8
   12728:	movt	r0, #2
   1272c:	ldr	r1, [r0]
   12730:	cmp	r1, #0
   12734:	beq	127a0 <__assert_fail@plt+0xf10>
   12738:	mov	r0, r9
   1273c:	bl	1156c <context_role_set@plt>
   12740:	cmp	r0, #0
   12744:	beq	127a0 <__assert_fail@plt+0xf10>
   12748:	bl	11704 <__errno_location@plt>
   1274c:	ldr	r4, [r0]
   12750:	movw	r1, #42720	; 0xa6e0
   12754:	mov	r0, #0
   12758:	mov	r2, #5
   1275c:	str	r0, [sp, #20]
   12760:	mov	r0, #0
   12764:	movt	r1, #1
   12768:	bl	11578 <dcgettext@plt>
   1276c:	mov	r7, r0
   12770:	movw	r0, #49624	; 0xc1d8
   12774:	movt	r0, #2
   12778:	ldr	r0, [r0]
   1277c:	bl	1779c <__assert_fail@plt+0x5f0c>
   12780:	ldr	r9, [sp, #16]
   12784:	movw	r3, #42113	; 0xa481
   12788:	str	r0, [sp]
   1278c:	mov	r0, #0
   12790:	mov	r1, r4
   12794:	mov	r2, r7
   12798:	movt	r3, #1
   1279c:	bl	1162c <error@plt>
   127a0:	movw	r0, #49628	; 0xc1dc
   127a4:	movt	r0, #2
   127a8:	ldr	r1, [r0]
   127ac:	cmp	r1, #0
   127b0:	beq	12850 <__assert_fail@plt+0xfc0>
   127b4:	mov	r0, r9
   127b8:	bl	11584 <context_type_set@plt>
   127bc:	cmp	r0, #0
   127c0:	beq	12850 <__assert_fail@plt+0xfc0>
   127c4:	bl	11704 <__errno_location@plt>
   127c8:	ldr	r4, [r0]
   127cc:	movw	r1, #42720	; 0xa6e0
   127d0:	mov	r5, r0
   127d4:	mov	r0, #0
   127d8:	mov	r2, #5
   127dc:	movt	r1, #1
   127e0:	bl	11578 <dcgettext@plt>
   127e4:	mov	r7, r0
   127e8:	movw	r0, #49628	; 0xc1dc
   127ec:	movt	r0, #2
   127f0:	ldr	r0, [r0]
   127f4:	bl	1779c <__assert_fail@plt+0x5f0c>
   127f8:	ldr	r9, [sp, #16]
   127fc:	movw	r3, #42118	; 0xa486
   12800:	str	r0, [sp]
   12804:	mov	r0, #0
   12808:	mov	r1, r4
   1280c:	mov	r2, r7
   12810:	movt	r3, #1
   12814:	bl	1162c <error@plt>
   12818:	b	12950 <__assert_fail@plt+0x10c0>
   1281c:	movw	r1, #42596	; 0xa664
   12820:	mov	r0, #0
   12824:	mov	r2, #5
   12828:	movt	r1, #1
   1282c:	bl	11578 <dcgettext@plt>
   12830:	mov	r5, r0
   12834:	mov	r0, #4
   12838:	mov	r1, sl
   1283c:	bl	17464 <__assert_fail@plt+0x5bd4>
   12840:	mov	r3, r0
   12844:	mov	r0, #0
   12848:	mov	r1, #0
   1284c:	b	12920 <__assert_fail@plt+0x1090>
   12850:	ldr	r0, [sp, #20]
   12854:	cmp	r0, #0
   12858:	beq	12948 <__assert_fail@plt+0x10b8>
   1285c:	mov	r0, r9
   12860:	bl	11824 <context_str@plt>
   12864:	ldr	r1, [sp, #32]
   12868:	mov	r7, r0
   1286c:	cmp	r1, #0
   12870:	beq	12458 <__assert_fail@plt+0xbc8>
   12874:	mov	r0, r7
   12878:	bl	114f4 <strcmp@plt>
   1287c:	cmp	r0, #0
   12880:	bne	12458 <__assert_fail@plt+0xbc8>
   12884:	mov	r4, #0
   12888:	movw	r0, #49640	; 0xc1e8
   1288c:	movt	r0, #2
   12890:	ldr	r0, [r0]
   12894:	cmp	r0, #0
   12898:	bne	128ac <__assert_fail@plt+0x101c>
   1289c:	mov	r0, r9
   128a0:	bl	1168c <context_free@plt>
   128a4:	ldr	r0, [sp, #32]
   128a8:	bl	11800 <freecon@plt>
   128ac:	eor	r4, r4, #1
   128b0:	b	12964 <__assert_fail@plt+0x10d4>
   128b4:	bl	11704 <__errno_location@plt>
   128b8:	ldr	r5, [r0]
   128bc:	movw	r1, #42682	; 0xa6ba
   128c0:	mov	r0, #0
   128c4:	mov	r2, #5
   128c8:	movt	r1, #1
   128cc:	bl	11578 <dcgettext@plt>
   128d0:	mov	r4, r0
   128d4:	mov	r0, r7
   128d8:	bl	1779c <__assert_fail@plt+0x5f0c>
   128dc:	mov	r3, r0
   128e0:	mov	r0, #0
   128e4:	mov	r1, r5
   128e8:	mov	r2, r4
   128ec:	b	12924 <__assert_fail@plt+0x1094>
   128f0:	movw	r1, #41546	; 0xa24a
   128f4:	mov	r0, #0
   128f8:	mov	r2, #5
   128fc:	movt	r1, #1
   12900:	bl	11578 <dcgettext@plt>
   12904:	mov	r5, r0
   12908:	mov	r0, #4
   1290c:	mov	r1, sl
   12910:	bl	17464 <__assert_fail@plt+0x5bd4>
   12914:	mov	r3, r0
   12918:	mov	r0, #0
   1291c:	mov	r1, r7
   12920:	mov	r2, r5
   12924:	bl	1162c <error@plt>
   12928:	b	12960 <__assert_fail@plt+0x10d0>
   1292c:	ldr	r0, [sp, #24]
   12930:	mov	r7, #1
   12934:	mov	r1, r8
   12938:	mov	r2, #1
   1293c:	str	r7, [r8, #16]
   12940:	bl	14934 <__assert_fail@plt+0x30a4>
   12944:	b	1298c <__assert_fail@plt+0x10fc>
   12948:	bl	11704 <__errno_location@plt>
   1294c:	mov	r5, r0
   12950:	ldr	r4, [r5]
   12954:	mov	r0, r9
   12958:	bl	1168c <context_free@plt>
   1295c:	str	r4, [r5]
   12960:	mov	r4, #0
   12964:	movw	r0, #49616	; 0xc1d0
   12968:	movt	r0, #2
   1296c:	ldrb	r0, [r0]
   12970:	cmp	r0, #0
   12974:	bne	12988 <__assert_fail@plt+0x10f8>
   12978:	ldr	r0, [sp, #24]
   1297c:	mov	r1, r8
   12980:	mov	r2, #4
   12984:	bl	14934 <__assert_fail@plt+0x30a4>
   12988:	mov	r7, r4
   1298c:	ldr	r0, [sp, #24]
   12990:	and	r6, r6, r7
   12994:	bl	13570 <__assert_fail@plt+0x1ce0>
   12998:	mov	r8, r0
   1299c:	cmp	r0, #0
   129a0:	bne	12190 <__assert_fail@plt+0x900>
   129a4:	bl	11704 <__errno_location@plt>
   129a8:	ldr	r4, [r0]
   129ac:	mov	r5, r0
   129b0:	cmp	r4, #0
   129b4:	beq	129e0 <__assert_fail@plt+0x1150>
   129b8:	movw	r1, #42150	; 0xa4a6
   129bc:	mov	r0, #0
   129c0:	mov	r2, #5
   129c4:	mov	r6, #0
   129c8:	movt	r1, #1
   129cc:	bl	11578 <dcgettext@plt>
   129d0:	mov	r2, r0
   129d4:	mov	r0, #0
   129d8:	mov	r1, r4
   129dc:	bl	1162c <error@plt>
   129e0:	ldr	r0, [sp, #24]
   129e4:	bl	133f0 <__assert_fail@plt+0x1b60>
   129e8:	cmp	r0, #0
   129ec:	beq	12a1c <__assert_fail@plt+0x118c>
   129f0:	ldr	r4, [r5]
   129f4:	movw	r1, #42166	; 0xa4b6
   129f8:	mov	r0, #0
   129fc:	mov	r2, #5
   12a00:	mov	r6, #0
   12a04:	movt	r1, #1
   12a08:	bl	11578 <dcgettext@plt>
   12a0c:	mov	r2, r0
   12a10:	mov	r0, #0
   12a14:	mov	r1, r4
   12a18:	bl	1162c <error@plt>
   12a1c:	eor	r0, r6, #1
   12a20:	sub	sp, fp, #28
   12a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a28:	cmn	r0, #3
   12a2c:	bne	12a84 <__assert_fail@plt+0x11f4>
   12a30:	movw	r0, #49512	; 0xc168
   12a34:	movw	r2, #41432	; 0xa1d8
   12a38:	mov	r1, #0
   12a3c:	movw	r7, #41418	; 0xa1ca
   12a40:	movt	r0, #2
   12a44:	movt	r2, #1
   12a48:	str	r1, [sp, #8]
   12a4c:	movw	r1, #41359	; 0xa18f
   12a50:	movt	r7, #1
   12a54:	ldr	r3, [r0]
   12a58:	movw	r0, #49604	; 0xc1c4
   12a5c:	str	r2, [sp, #4]
   12a60:	movw	r2, #41404	; 0xa1bc
   12a64:	movt	r1, #1
   12a68:	str	r7, [sp]
   12a6c:	movt	r0, #2
   12a70:	movt	r2, #1
   12a74:	ldr	r0, [r0]
   12a78:	bl	184bc <__assert_fail@plt+0x6c2c>
   12a7c:	mov	r0, #0
   12a80:	bl	116bc <exit@plt>
   12a84:	cmn	r0, #2
   12a88:	bne	12b3c <__assert_fail@plt+0x12ac>
   12a8c:	mov	r0, #0
   12a90:	bl	11990 <__assert_fail@plt+0x100>
   12a94:	cmp	r0, r5
   12a98:	bge	12b18 <__assert_fail@plt+0x1288>
   12a9c:	movw	r1, #41521	; 0xa231
   12aa0:	mov	r0, #0
   12aa4:	mov	r2, #5
   12aa8:	movt	r1, #1
   12aac:	bl	11578 <dcgettext@plt>
   12ab0:	mov	r6, r0
   12ab4:	add	r0, r4, r5, lsl #2
   12ab8:	ldr	r0, [r0, #-4]
   12abc:	bl	1779c <__assert_fail@plt+0x5f0c>
   12ac0:	mov	r3, r0
   12ac4:	mov	r0, #0
   12ac8:	mov	r1, #0
   12acc:	mov	r2, r6
   12ad0:	bl	1162c <error@plt>
   12ad4:	b	12b3c <__assert_fail@plt+0x12ac>
   12ad8:	bl	11704 <__errno_location@plt>
   12adc:	ldr	r4, [r0]
   12ae0:	movw	r1, #41546	; 0xa24a
   12ae4:	mov	r0, #0
   12ae8:	mov	r2, #5
   12aec:	movt	r1, #1
   12af0:	bl	11578 <dcgettext@plt>
   12af4:	mov	r5, r0
   12af8:	mov	r0, #4
   12afc:	mov	r1, r6
   12b00:	bl	17464 <__assert_fail@plt+0x5bd4>
   12b04:	mov	r3, r0
   12b08:	mov	r0, #1
   12b0c:	mov	r1, r4
   12b10:	mov	r2, r5
   12b14:	bl	1162c <error@plt>
   12b18:	movw	r1, #41505	; 0xa221
   12b1c:	movt	r1, #1
   12b20:	mov	r0, #0
   12b24:	mov	r2, #5
   12b28:	bl	11578 <dcgettext@plt>
   12b2c:	mov	r2, r0
   12b30:	mov	r0, #0
   12b34:	mov	r1, #0
   12b38:	bl	1162c <error@plt>
   12b3c:	mov	r0, #1
   12b40:	bl	11990 <__assert_fail@plt+0x100>
   12b44:	movw	r1, #41445	; 0xa1e5
   12b48:	movt	r1, #1
   12b4c:	b	12b58 <__assert_fail@plt+0x12c8>
   12b50:	movw	r1, #41487	; 0xa20f
   12b54:	movt	r1, #1
   12b58:	mov	r0, #0
   12b5c:	mov	r2, #5
   12b60:	bl	11578 <dcgettext@plt>
   12b64:	mov	r2, r0
   12b68:	mov	r0, #1
   12b6c:	mov	r1, #0
   12b70:	bl	1162c <error@plt>
   12b74:	bl	11704 <__errno_location@plt>
   12b78:	ldr	r4, [r0]
   12b7c:	movw	r1, #41583	; 0xa26f
   12b80:	mov	r0, #0
   12b84:	mov	r2, #5
   12b88:	movt	r1, #1
   12b8c:	bl	11578 <dcgettext@plt>
   12b90:	mov	r6, r0
   12b94:	ldr	r0, [r5]
   12b98:	bl	1779c <__assert_fail@plt+0x5f0c>
   12b9c:	mov	r3, r0
   12ba0:	mov	r0, #1
   12ba4:	mov	r1, r4
   12ba8:	mov	r2, r6
   12bac:	bl	1162c <error@plt>
   12bb0:	movw	r1, #49668	; 0xc204
   12bb4:	movt	r1, #2
   12bb8:	str	r0, [r1]
   12bbc:	bx	lr
   12bc0:	movw	r1, #49672	; 0xc208
   12bc4:	movt	r1, #2
   12bc8:	strb	r0, [r1]
   12bcc:	bx	lr
   12bd0:	push	{r4, r5, r6, sl, fp, lr}
   12bd4:	add	fp, sp, #16
   12bd8:	sub	sp, sp, #8
   12bdc:	movw	r0, #49604	; 0xc1c4
   12be0:	movt	r0, #2
   12be4:	ldr	r0, [r0]
   12be8:	bl	18ccc <__assert_fail@plt+0x743c>
   12bec:	cmp	r0, #0
   12bf0:	beq	12c18 <__assert_fail@plt+0x1388>
   12bf4:	movw	r0, #49672	; 0xc208
   12bf8:	movt	r0, #2
   12bfc:	ldrb	r0, [r0]
   12c00:	cmp	r0, #0
   12c04:	beq	12c38 <__assert_fail@plt+0x13a8>
   12c08:	bl	11704 <__errno_location@plt>
   12c0c:	ldr	r0, [r0]
   12c10:	cmp	r0, #32
   12c14:	bne	12c38 <__assert_fail@plt+0x13a8>
   12c18:	movw	r0, #49600	; 0xc1c0
   12c1c:	movt	r0, #2
   12c20:	ldr	r0, [r0]
   12c24:	bl	18ccc <__assert_fail@plt+0x743c>
   12c28:	cmp	r0, #0
   12c2c:	subeq	sp, fp, #16
   12c30:	popeq	{r4, r5, r6, sl, fp, pc}
   12c34:	b	12ca8 <__assert_fail@plt+0x1418>
   12c38:	movw	r1, #43071	; 0xa83f
   12c3c:	mov	r0, #0
   12c40:	mov	r2, #5
   12c44:	movt	r1, #1
   12c48:	bl	11578 <dcgettext@plt>
   12c4c:	mov	r4, r0
   12c50:	movw	r0, #49668	; 0xc204
   12c54:	movt	r0, #2
   12c58:	ldr	r6, [r0]
   12c5c:	bl	11704 <__errno_location@plt>
   12c60:	ldr	r5, [r0]
   12c64:	cmp	r6, #0
   12c68:	bne	12c84 <__assert_fail@plt+0x13f4>
   12c6c:	movw	r2, #43087	; 0xa84f
   12c70:	mov	r0, #0
   12c74:	mov	r1, r5
   12c78:	mov	r3, r4
   12c7c:	movt	r2, #1
   12c80:	b	12ca4 <__assert_fail@plt+0x1414>
   12c84:	mov	r0, r6
   12c88:	bl	1755c <__assert_fail@plt+0x5ccc>
   12c8c:	movw	r2, #43083	; 0xa84b
   12c90:	mov	r3, r0
   12c94:	str	r4, [sp]
   12c98:	mov	r0, #0
   12c9c:	mov	r1, r5
   12ca0:	movt	r2, #1
   12ca4:	bl	1162c <error@plt>
   12ca8:	movw	r0, #49516	; 0xc16c
   12cac:	movt	r0, #2
   12cb0:	ldr	r0, [r0]
   12cb4:	bl	11530 <_exit@plt>
   12cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cbc:	add	fp, sp, #28
   12cc0:	sub	sp, sp, #12
   12cc4:	cmp	r1, #4096	; 0x1000
   12cc8:	bcs	12ce4 <__assert_fail@plt+0x1454>
   12ccc:	mov	r6, r0
   12cd0:	and	r0, r1, #516	; 0x204
   12cd4:	mov	r5, r1
   12cd8:	cmp	r0, #516	; 0x204
   12cdc:	tstne	r5, #18
   12ce0:	bne	12d00 <__assert_fail@plt+0x1470>
   12ce4:	bl	11704 <__errno_location@plt>
   12ce8:	mov	r1, #22
   12cec:	str	r1, [r0]
   12cf0:	mov	r8, #0
   12cf4:	mov	r0, r8
   12cf8:	sub	sp, fp, #28
   12cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d00:	mov	r0, #1
   12d04:	mov	r1, #96	; 0x60
   12d08:	mov	r9, r2
   12d0c:	bl	18ad4 <__assert_fail@plt+0x7244>
   12d10:	cmp	r0, #0
   12d14:	beq	12cf0 <__assert_fail@plt+0x1460>
   12d18:	mov	r8, r0
   12d1c:	mvn	r0, #99	; 0x63
   12d20:	tst	r5, #2
   12d24:	mov	r1, r5
   12d28:	str	r0, [r8, #32]
   12d2c:	bic	r0, r5, #516	; 0x204
   12d30:	str	r9, [r8, #44]	; 0x2c
   12d34:	orrne	r1, r0, #4
   12d38:	str	r1, [r8, #48]	; 0x30
   12d3c:	ldr	r0, [r6]
   12d40:	cmp	r0, #0
   12d44:	beq	12d78 <__assert_fail@plt+0x14e8>
   12d48:	add	r4, r6, #4
   12d4c:	mov	r7, #0
   12d50:	bl	116e0 <strlen@plt>
   12d54:	cmp	r0, r7
   12d58:	movhi	r7, r0
   12d5c:	ldr	r0, [r4], #4
   12d60:	cmp	r0, #0
   12d64:	bne	12d50 <__assert_fail@plt+0x14c0>
   12d68:	add	r1, r7, #1
   12d6c:	cmp	r1, #4096	; 0x1000
   12d70:	movls	r1, #4096	; 0x1000
   12d74:	b	12d7c <__assert_fail@plt+0x14ec>
   12d78:	mov	r1, #4096	; 0x1000
   12d7c:	mov	r0, r8
   12d80:	bl	12fd4 <__assert_fail@plt+0x1744>
   12d84:	cmp	r0, #0
   12d88:	beq	12fc8 <__assert_fail@plt+0x1738>
   12d8c:	ldr	r0, [r6]
   12d90:	cmp	r0, #0
   12d94:	beq	12dc4 <__assert_fail@plt+0x1534>
   12d98:	movw	r1, #41259	; 0xa12b
   12d9c:	mov	r0, r8
   12da0:	mov	r2, #0
   12da4:	movt	r1, #1
   12da8:	bl	13048 <__assert_fail@plt+0x17b8>
   12dac:	cmp	r0, #0
   12db0:	beq	12fc0 <__assert_fail@plt+0x1730>
   12db4:	mov	r4, r0
   12db8:	mvn	r0, #0
   12dbc:	str	r0, [r4, #48]	; 0x30
   12dc0:	b	12dc8 <__assert_fail@plt+0x1538>
   12dc4:	mov	r4, #0
   12dc8:	cmp	r9, #0
   12dcc:	ldrbne	r0, [r8, #49]	; 0x31
   12dd0:	ubfxne	r0, r0, #2, #1
   12dd4:	ldr	r7, [r6]
   12dd8:	moveq	r0, #1
   12ddc:	cmp	r7, #0
   12de0:	beq	12f00 <__assert_fail@plt+0x1670>
   12de4:	eor	r0, r0, #1
   12de8:	and	r1, r5, #2048	; 0x800
   12dec:	mov	sl, #0
   12df0:	mov	r5, #0
   12df4:	str	r0, [sp, #4]
   12df8:	mov	r0, #0
   12dfc:	str	r1, [sp, #8]
   12e00:	str	r0, [sp]
   12e04:	mov	r0, r7
   12e08:	bl	116e0 <strlen@plt>
   12e0c:	mov	r2, r0
   12e10:	ldr	r0, [sp, #8]
   12e14:	cmp	r0, #0
   12e18:	bne	12e50 <__assert_fail@plt+0x15c0>
   12e1c:	cmp	r2, #3
   12e20:	bcc	12e50 <__assert_fail@plt+0x15c0>
   12e24:	add	r0, r7, r2
   12e28:	ldrb	r0, [r0, #-1]
   12e2c:	cmp	r0, #47	; 0x2f
   12e30:	bne	12e50 <__assert_fail@plt+0x15c0>
   12e34:	sub	r0, r7, #2
   12e38:	ldrb	r1, [r0, r2]
   12e3c:	cmp	r1, #47	; 0x2f
   12e40:	bne	12e50 <__assert_fail@plt+0x15c0>
   12e44:	sub	r2, r2, #1
   12e48:	cmp	r2, #1
   12e4c:	bhi	12e38 <__assert_fail@plt+0x15a8>
   12e50:	mov	r0, r8
   12e54:	mov	r1, r7
   12e58:	bl	13048 <__assert_fail@plt+0x17b8>
   12e5c:	cmp	r0, #0
   12e60:	beq	12fb0 <__assert_fail@plt+0x1720>
   12e64:	mov	r1, #0
   12e68:	ldr	r2, [sp, #4]
   12e6c:	str	r4, [r0, #4]
   12e70:	mov	r7, r0
   12e74:	str	r1, [r0, #48]	; 0x30
   12e78:	add	r0, r0, #168	; 0xa8
   12e7c:	str	r0, [r7, #24]
   12e80:	clz	r0, sl
   12e84:	lsr	r0, r0, #5
   12e88:	orrs	r0, r2, r0
   12e8c:	bne	12ea0 <__assert_fail@plt+0x1610>
   12e90:	mov	r0, #2
   12e94:	strd	r0, [r7, #112]	; 0x70
   12e98:	mov	r0, #11
   12e9c:	b	12eb4 <__assert_fail@plt+0x1624>
   12ea0:	mov	r0, r8
   12ea4:	mov	r1, r7
   12ea8:	mov	r2, #0
   12eac:	bl	130c8 <__assert_fail@plt+0x1838>
   12eb0:	mov	r1, #0
   12eb4:	cmp	r9, #0
   12eb8:	strh	r0, [r7, #56]	; 0x38
   12ebc:	beq	12ecc <__assert_fail@plt+0x163c>
   12ec0:	str	sl, [r7, #8]
   12ec4:	mov	sl, r7
   12ec8:	b	12ee4 <__assert_fail@plt+0x1654>
   12ecc:	cmp	sl, #0
   12ed0:	str	r1, [r7, #8]
   12ed4:	beq	12ef8 <__assert_fail@plt+0x1668>
   12ed8:	ldr	r0, [sp]
   12edc:	str	r7, [sp]
   12ee0:	str	r7, [r0, #8]
   12ee4:	ldr	r7, [r6, #4]!
   12ee8:	add	r5, r5, #1
   12eec:	cmp	r7, #0
   12ef0:	bne	12e04 <__assert_fail@plt+0x1574>
   12ef4:	b	12f08 <__assert_fail@plt+0x1678>
   12ef8:	str	r7, [sp]
   12efc:	b	12ec4 <__assert_fail@plt+0x1634>
   12f00:	mov	sl, #0
   12f04:	b	12f2c <__assert_fail@plt+0x169c>
   12f08:	cmp	r9, #0
   12f0c:	beq	12f2c <__assert_fail@plt+0x169c>
   12f10:	cmp	r5, #2
   12f14:	bcc	12f2c <__assert_fail@plt+0x169c>
   12f18:	mov	r0, r8
   12f1c:	mov	r1, sl
   12f20:	mov	r2, r5
   12f24:	bl	131fc <__assert_fail@plt+0x196c>
   12f28:	mov	sl, r0
   12f2c:	movw	r1, #41259	; 0xa12b
   12f30:	mov	r0, r8
   12f34:	mov	r2, #0
   12f38:	movt	r1, #1
   12f3c:	bl	13048 <__assert_fail@plt+0x17b8>
   12f40:	cmp	r0, #0
   12f44:	str	r0, [r8]
   12f48:	beq	12fb0 <__assert_fail@plt+0x1720>
   12f4c:	mov	r1, #9
   12f50:	strh	r1, [r0, #56]	; 0x38
   12f54:	mov	r1, #1
   12f58:	str	sl, [r0, #8]
   12f5c:	str	r1, [r0, #48]	; 0x30
   12f60:	mov	r0, r8
   12f64:	bl	132f4 <__assert_fail@plt+0x1a64>
   12f68:	cmp	r0, #0
   12f6c:	beq	12fb0 <__assert_fail@plt+0x1720>
   12f70:	ldrh	r0, [r8, #48]	; 0x30
   12f74:	tst	r0, #516	; 0x204
   12f78:	bne	12fa0 <__assert_fail@plt+0x1710>
   12f7c:	movw	r1, #43091	; 0xa853
   12f80:	mov	r0, r8
   12f84:	movt	r1, #1
   12f88:	bl	13380 <__assert_fail@plt+0x1af0>
   12f8c:	str	r0, [r8, #28]
   12f90:	cmn	r0, #1
   12f94:	ldrle	r0, [r8, #48]	; 0x30
   12f98:	orrle	r0, r0, #4
   12f9c:	strle	r0, [r8, #48]	; 0x30
   12fa0:	add	r0, r8, #60	; 0x3c
   12fa4:	mvn	r1, #0
   12fa8:	bl	15c18 <__assert_fail@plt+0x4388>
   12fac:	b	12cf4 <__assert_fail@plt+0x1464>
   12fb0:	mov	r0, sl
   12fb4:	bl	133b0 <__assert_fail@plt+0x1b20>
   12fb8:	mov	r0, r4
   12fbc:	bl	19150 <__assert_fail@plt+0x78c0>
   12fc0:	ldr	r0, [r8, #24]
   12fc4:	bl	19150 <__assert_fail@plt+0x78c0>
   12fc8:	mov	r0, r8
   12fcc:	bl	19150 <__assert_fail@plt+0x78c0>
   12fd0:	b	12cf0 <__assert_fail@plt+0x1460>
   12fd4:	push	{r4, r5, fp, lr}
   12fd8:	add	fp, sp, #8
   12fdc:	mov	r4, r0
   12fe0:	ldr	r0, [r0, #36]	; 0x24
   12fe4:	add	r1, r1, #256	; 0x100
   12fe8:	adds	r1, r1, r0
   12fec:	bcc	13010 <__assert_fail@plt+0x1780>
   12ff0:	ldr	r0, [r4, #24]
   12ff4:	bl	19150 <__assert_fail@plt+0x78c0>
   12ff8:	mov	r5, #0
   12ffc:	str	r5, [r4, #24]
   13000:	bl	11704 <__errno_location@plt>
   13004:	mov	r1, #36	; 0x24
   13008:	str	r1, [r0]
   1300c:	b	13040 <__assert_fail@plt+0x17b0>
   13010:	str	r1, [r4, #36]	; 0x24
   13014:	ldr	r0, [r4, #24]
   13018:	bl	18b58 <__assert_fail@plt+0x72c8>
   1301c:	cmp	r0, #0
   13020:	beq	13030 <__assert_fail@plt+0x17a0>
   13024:	mov	r5, #1
   13028:	str	r0, [r4, #24]
   1302c:	b	13040 <__assert_fail@plt+0x17b0>
   13030:	ldr	r0, [r4, #24]
   13034:	bl	19150 <__assert_fail@plt+0x78c0>
   13038:	mov	r5, #0
   1303c:	str	r5, [r4, #24]
   13040:	mov	r0, r5
   13044:	pop	{r4, r5, fp, pc}
   13048:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1304c:	add	fp, sp, #24
   13050:	mov	r5, r0
   13054:	add	r0, r2, #176	; 0xb0
   13058:	mov	r6, r2
   1305c:	mov	r8, r1
   13060:	bic	r0, r0, #7
   13064:	bl	18b28 <__assert_fail@plt+0x7298>
   13068:	cmp	r0, #0
   1306c:	beq	130bc <__assert_fail@plt+0x182c>
   13070:	add	r7, r0, #168	; 0xa8
   13074:	mov	r4, r0
   13078:	mov	r1, r8
   1307c:	mov	r2, r6
   13080:	mov	r0, r7
   13084:	bl	1153c <memcpy@plt>
   13088:	mov	r0, #0
   1308c:	mov	r2, #196608	; 0x30000
   13090:	strb	r0, [r7, r6]
   13094:	str	r6, [r4, #52]	; 0x34
   13098:	str	r5, [r4, #44]	; 0x2c
   1309c:	ldr	r1, [r5, #24]
   130a0:	str	r2, [r4, #58]	; 0x3a
   130a4:	str	r0, [r4, #12]
   130a8:	str	r0, [r4, #16]
   130ac:	str	r0, [r4, #20]
   130b0:	str	r1, [r4, #28]
   130b4:	str	r0, [r4, #32]
   130b8:	b	130c0 <__assert_fail@plt+0x1830>
   130bc:	mov	r4, #0
   130c0:	mov	r0, r4
   130c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130c8:	push	{r4, r5, r6, sl, fp, lr}
   130cc:	add	fp, sp, #16
   130d0:	mov	r4, r1
   130d4:	ldr	r1, [r0, #48]	; 0x30
   130d8:	ldr	r3, [r4, #48]	; 0x30
   130dc:	add	r5, r4, #64	; 0x40
   130e0:	cmp	r3, #0
   130e4:	andeq	r3, r1, #1
   130e8:	orreq	r2, r3, r2
   130ec:	cmp	r2, #0
   130f0:	andseq	r1, r1, #2
   130f4:	beq	13144 <__assert_fail@plt+0x18b4>
   130f8:	ldr	r0, [r4, #24]
   130fc:	mov	r1, r5
   13100:	bl	19a18 <__assert_fail@plt+0x8188>
   13104:	cmp	r0, #0
   13108:	beq	13188 <__assert_fail@plt+0x18f8>
   1310c:	bl	11704 <__errno_location@plt>
   13110:	mov	r6, r0
   13114:	ldr	r0, [r0]
   13118:	cmp	r0, #2
   1311c:	bne	1316c <__assert_fail@plt+0x18dc>
   13120:	ldr	r0, [r4, #24]
   13124:	mov	r1, r5
   13128:	bl	19a38 <__assert_fail@plt+0x81a8>
   1312c:	cmp	r0, #0
   13130:	bne	13168 <__assert_fail@plt+0x18d8>
   13134:	mov	r0, #0
   13138:	str	r0, [r6]
   1313c:	mov	r0, #13
   13140:	pop	{r4, r5, r6, sl, fp, pc}
   13144:	ldr	r1, [r4, #24]
   13148:	ldr	r0, [r0, #32]
   1314c:	mov	r2, r5
   13150:	mov	r3, #256	; 0x100
   13154:	bl	19a48 <__assert_fail@plt+0x81b8>
   13158:	cmp	r0, #0
   1315c:	beq	13188 <__assert_fail@plt+0x18f8>
   13160:	bl	11704 <__errno_location@plt>
   13164:	mov	r6, r0
   13168:	ldr	r0, [r6]
   1316c:	str	r0, [r4, #32]
   13170:	mov	r0, r5
   13174:	mov	r1, #0
   13178:	mov	r2, #104	; 0x68
   1317c:	bl	11728 <memset@plt>
   13180:	mov	r0, #10
   13184:	pop	{r4, r5, r6, sl, fp, pc}
   13188:	ldr	r0, [r4, #80]	; 0x50
   1318c:	and	r0, r0, #61440	; 0xf000
   13190:	cmp	r0, #40960	; 0xa000
   13194:	moveq	r0, #12
   13198:	popeq	{r4, r5, r6, sl, fp, pc}
   1319c:	cmp	r0, #32768	; 0x8000
   131a0:	moveq	r0, #8
   131a4:	popeq	{r4, r5, r6, sl, fp, pc}
   131a8:	cmp	r0, #16384	; 0x4000
   131ac:	bne	131e0 <__assert_fail@plt+0x1950>
   131b0:	ldrb	r1, [r4, #168]	; 0xa8
   131b4:	mov	r0, #1
   131b8:	cmp	r1, #46	; 0x2e
   131bc:	popne	{r4, r5, r6, sl, fp, pc}
   131c0:	ldrb	r1, [r4, #169]	; 0xa9
   131c4:	cmp	r1, #0
   131c8:	beq	131e8 <__assert_fail@plt+0x1958>
   131cc:	cmp	r1, #46	; 0x2e
   131d0:	ldrbeq	r1, [r4, #170]	; 0xaa
   131d4:	cmpeq	r1, #0
   131d8:	beq	131e8 <__assert_fail@plt+0x1958>
   131dc:	pop	{r4, r5, r6, sl, fp, pc}
   131e0:	mov	r0, #3
   131e4:	pop	{r4, r5, r6, sl, fp, pc}
   131e8:	ldr	r1, [r4, #48]	; 0x30
   131ec:	mov	r0, #5
   131f0:	cmp	r1, #0
   131f4:	movweq	r0, #1
   131f8:	pop	{r4, r5, r6, sl, fp, pc}
   131fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13200:	add	fp, sp, #24
   13204:	ldrd	r8, [r0, #40]	; 0x28
   13208:	mov	r5, r2
   1320c:	mov	r4, r1
   13210:	mov	r6, r0
   13214:	cmp	r8, r2
   13218:	bcs	13250 <__assert_fail@plt+0x19c0>
   1321c:	add	r1, r5, #40	; 0x28
   13220:	cmn	r1, #-1073741823	; 0xc0000001
   13224:	str	r1, [r6, #40]	; 0x28
   13228:	bhi	132d8 <__assert_fail@plt+0x1a48>
   1322c:	add	r7, r6, #8
   13230:	lsl	r1, r1, #2
   13234:	ldr	r0, [r7]
   13238:	bl	18b58 <__assert_fail@plt+0x72c8>
   1323c:	cmp	r0, #0
   13240:	beq	132d8 <__assert_fail@plt+0x1a48>
   13244:	mov	r6, r7
   13248:	str	r0, [r7]
   1324c:	b	13254 <__assert_fail@plt+0x19c4>
   13250:	ldr	r0, [r6, #8]!
   13254:	cmp	r4, #0
   13258:	beq	13270 <__assert_fail@plt+0x19e0>
   1325c:	str	r4, [r0], #4
   13260:	ldr	r4, [r4, #8]
   13264:	cmp	r4, #0
   13268:	bne	1325c <__assert_fail@plt+0x19cc>
   1326c:	ldr	r0, [r6]
   13270:	mov	r1, r5
   13274:	mov	r2, #4
   13278:	mov	r3, r9
   1327c:	bl	117f4 <qsort@plt>
   13280:	ldr	r7, [r6]
   13284:	subs	r0, r5, #1
   13288:	ldr	r4, [r7]
   1328c:	mov	r1, r4
   13290:	beq	132cc <__assert_fail@plt+0x1a3c>
   13294:	mov	r1, r7
   13298:	cmp	r5, #2
   1329c:	ldr	r2, [r1, #4]!
   132a0:	str	r2, [r4, #8]
   132a4:	beq	132c8 <__assert_fail@plt+0x1a38>
   132a8:	rsb	r3, r5, #2
   132ac:	mov	r2, r1
   132b0:	ldr	r6, [r2, #4]!
   132b4:	ldr	r1, [r1]
   132b8:	adds	r3, r3, #1
   132bc:	str	r6, [r1, #8]
   132c0:	mov	r1, r2
   132c4:	bne	132b0 <__assert_fail@plt+0x1a20>
   132c8:	ldr	r1, [r7, r0, lsl #2]
   132cc:	mov	r0, #0
   132d0:	str	r0, [r1, #8]
   132d4:	b	132ec <__assert_fail@plt+0x1a5c>
   132d8:	ldr	r0, [r6, #8]
   132dc:	bl	19150 <__assert_fail@plt+0x78c0>
   132e0:	mov	r0, #0
   132e4:	str	r0, [r6, #40]	; 0x28
   132e8:	str	r0, [r6, #8]
   132ec:	mov	r0, r4
   132f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   132f4:	push	{r4, r5, fp, lr}
   132f8:	add	fp, sp, #8
   132fc:	sub	sp, sp, #8
   13300:	mov	r4, r0
   13304:	ldrh	r0, [r0, #48]	; 0x30
   13308:	movw	r1, #258	; 0x102
   1330c:	tst	r0, r1
   13310:	beq	13350 <__assert_fail@plt+0x1ac0>
   13314:	movw	r0, #37200	; 0x9150
   13318:	movw	r2, #19140	; 0x4ac4
   1331c:	movw	r3, #19172	; 0x4ae4
   13320:	mov	r1, #0
   13324:	mov	r5, #0
   13328:	movt	r0, #1
   1332c:	movt	r2, #1
   13330:	movt	r3, #1
   13334:	str	r0, [sp]
   13338:	mov	r0, #31
   1333c:	bl	15140 <__assert_fail@plt+0x38b0>
   13340:	cmp	r0, #0
   13344:	str	r0, [r4, #56]	; 0x38
   13348:	movne	r5, #1
   1334c:	b	13374 <__assert_fail@plt+0x1ae4>
   13350:	mov	r0, #32
   13354:	bl	18b28 <__assert_fail@plt+0x7298>
   13358:	cmp	r0, #0
   1335c:	str	r0, [r4, #56]	; 0x38
   13360:	beq	13370 <__assert_fail@plt+0x1ae0>
   13364:	bl	18d4c <__assert_fail@plt+0x74bc>
   13368:	mov	r5, #1
   1336c:	b	13374 <__assert_fail@plt+0x1ae4>
   13370:	mov	r5, #0
   13374:	mov	r0, r5
   13378:	sub	sp, fp, #8
   1337c:	pop	{r4, r5, fp, pc}
   13380:	ldr	r3, [r0, #48]	; 0x30
   13384:	mov	r2, #32768	; 0x8000
   13388:	and	r2, r2, r3, lsl #11
   1338c:	tst	r3, #512	; 0x200
   13390:	orr	r2, r2, #18688	; 0x4900
   13394:	orr	r2, r2, #524288	; 0x80000
   13398:	bne	133a8 <__assert_fail@plt+0x1b18>
   1339c:	mov	r0, r1
   133a0:	mov	r1, r2
   133a4:	b	190ac <__assert_fail@plt+0x781c>
   133a8:	ldr	r0, [r0, #32]
   133ac:	b	15cf8 <__assert_fail@plt+0x4468>
   133b0:	push	{r4, r6, r7, sl, fp, lr}
   133b4:	add	fp, sp, #16
   133b8:	cmp	r0, #0
   133bc:	popeq	{r4, r6, r7, sl, fp, pc}
   133c0:	mov	r4, r0
   133c4:	ldrd	r6, [r4, #8]
   133c8:	cmp	r7, #0
   133cc:	beq	133d8 <__assert_fail@plt+0x1b48>
   133d0:	mov	r0, r7
   133d4:	bl	11878 <closedir@plt>
   133d8:	mov	r0, r4
   133dc:	bl	19150 <__assert_fail@plt+0x78c0>
   133e0:	cmp	r6, #0
   133e4:	mov	r4, r6
   133e8:	bne	133c4 <__assert_fail@plt+0x1b34>
   133ec:	pop	{r4, r6, r7, sl, fp, pc}
   133f0:	push	{r4, r5, fp, lr}
   133f4:	add	fp, sp, #8
   133f8:	mov	r4, r0
   133fc:	ldr	r0, [r0]
   13400:	cmp	r0, #0
   13404:	beq	13444 <__assert_fail@plt+0x1bb4>
   13408:	ldr	r1, [r0, #48]	; 0x30
   1340c:	cmp	r1, #0
   13410:	blt	13438 <__assert_fail@plt+0x1ba8>
   13414:	ldr	r5, [r0, #8]
   13418:	cmp	r5, #0
   1341c:	ldreq	r5, [r0, #4]
   13420:	bl	19150 <__assert_fail@plt+0x78c0>
   13424:	ldr	r0, [r5, #48]	; 0x30
   13428:	cmn	r0, #1
   1342c:	mov	r0, r5
   13430:	bgt	13414 <__assert_fail@plt+0x1b84>
   13434:	b	1343c <__assert_fail@plt+0x1bac>
   13438:	mov	r5, r0
   1343c:	mov	r0, r5
   13440:	bl	19150 <__assert_fail@plt+0x78c0>
   13444:	ldr	r0, [r4, #4]
   13448:	cmp	r0, #0
   1344c:	blne	133b0 <__assert_fail@plt+0x1b20>
   13450:	ldr	r0, [r4, #8]
   13454:	bl	19150 <__assert_fail@plt+0x78c0>
   13458:	ldr	r0, [r4, #24]
   1345c:	bl	19150 <__assert_fail@plt+0x78c0>
   13460:	ldr	r0, [r4, #48]	; 0x30
   13464:	tst	r0, #512	; 0x200
   13468:	bne	13494 <__assert_fail@plt+0x1c04>
   1346c:	mov	r5, #0
   13470:	tst	r0, #4
   13474:	bne	134d0 <__assert_fail@plt+0x1c40>
   13478:	ldr	r0, [r4, #28]
   1347c:	bl	117e8 <fchdir@plt>
   13480:	cmp	r0, #0
   13484:	beq	134ac <__assert_fail@plt+0x1c1c>
   13488:	bl	11704 <__errno_location@plt>
   1348c:	ldr	r5, [r0]
   13490:	b	134b0 <__assert_fail@plt+0x1c20>
   13494:	ldr	r0, [r4, #32]
   13498:	mov	r5, #0
   1349c:	cmp	r0, #0
   134a0:	blt	134d0 <__assert_fail@plt+0x1c40>
   134a4:	bl	11860 <close@plt>
   134a8:	b	134c0 <__assert_fail@plt+0x1c30>
   134ac:	mov	r5, #0
   134b0:	ldr	r0, [r4, #28]
   134b4:	bl	11860 <close@plt>
   134b8:	cmp	r5, #0
   134bc:	bne	134d0 <__assert_fail@plt+0x1c40>
   134c0:	cmp	r0, #0
   134c4:	beq	134d0 <__assert_fail@plt+0x1c40>
   134c8:	bl	11704 <__errno_location@plt>
   134cc:	ldr	r5, [r0]
   134d0:	add	r0, r4, #60	; 0x3c
   134d4:	bl	13514 <__assert_fail@plt+0x1c84>
   134d8:	ldr	r0, [r4, #52]	; 0x34
   134dc:	cmp	r0, #0
   134e0:	beq	134e8 <__assert_fail@plt+0x1c58>
   134e4:	bl	1546c <__assert_fail@plt+0x3bdc>
   134e8:	mov	r0, r4
   134ec:	bl	13548 <__assert_fail@plt+0x1cb8>
   134f0:	mov	r0, r4
   134f4:	bl	19150 <__assert_fail@plt+0x78c0>
   134f8:	cmp	r5, #0
   134fc:	moveq	r0, #0
   13500:	popeq	{r4, r5, fp, pc}
   13504:	bl	11704 <__errno_location@plt>
   13508:	str	r5, [r0]
   1350c:	mvn	r0, #0
   13510:	pop	{r4, r5, fp, pc}
   13514:	push	{r4, sl, fp, lr}
   13518:	add	fp, sp, #8
   1351c:	mov	r4, r0
   13520:	bl	15c4c <__assert_fail@plt+0x43bc>
   13524:	cmp	r0, #0
   13528:	popne	{r4, sl, fp, pc}
   1352c:	mov	r0, r4
   13530:	bl	15ca0 <__assert_fail@plt+0x4410>
   13534:	cmp	r0, #0
   13538:	blt	13540 <__assert_fail@plt+0x1cb0>
   1353c:	bl	11860 <close@plt>
   13540:	mov	r0, r4
   13544:	b	13520 <__assert_fail@plt+0x1c90>
   13548:	ldrh	r1, [r0, #48]	; 0x30
   1354c:	movw	r2, #258	; 0x102
   13550:	tst	r1, r2
   13554:	beq	13568 <__assert_fail@plt+0x1cd8>
   13558:	ldr	r0, [r0, #56]	; 0x38
   1355c:	cmp	r0, #0
   13560:	bxeq	lr
   13564:	b	1546c <__assert_fail@plt+0x3bdc>
   13568:	ldr	r0, [r0, #56]	; 0x38
   1356c:	b	19150 <__assert_fail@plt+0x78c0>
   13570:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13574:	add	fp, sp, #24
   13578:	ldr	r6, [r0]
   1357c:	mov	r5, #0
   13580:	cmp	r6, #0
   13584:	beq	13b78 <__assert_fail@plt+0x22e8>
   13588:	ldr	r1, [r0, #48]	; 0x30
   1358c:	mov	r4, r0
   13590:	tst	r1, #8192	; 0x2000
   13594:	bne	13b78 <__assert_fail@plt+0x22e8>
   13598:	ldrh	r0, [r6, #60]	; 0x3c
   1359c:	mov	r2, #3
   135a0:	strh	r2, [r6, #60]	; 0x3c
   135a4:	cmp	r0, #1
   135a8:	beq	135f8 <__assert_fail@plt+0x1d68>
   135ac:	mov	r7, r6
   135b0:	cmp	r0, #2
   135b4:	bne	13610 <__assert_fail@plt+0x1d80>
   135b8:	ldrh	r2, [r7, #56]!	; 0x38
   135bc:	movw	r3, #65534	; 0xfffe
   135c0:	and	r3, r2, r3
   135c4:	cmp	r3, #12
   135c8:	bne	13614 <__assert_fail@plt+0x1d84>
   135cc:	mov	r0, r4
   135d0:	mov	r1, r6
   135d4:	mov	r2, #1
   135d8:	bl	130c8 <__assert_fail@plt+0x1838>
   135dc:	strh	r0, [r6, #56]	; 0x38
   135e0:	cmp	r0, #1
   135e4:	ldrbeq	r0, [r4, #48]	; 0x30
   135e8:	tsteq	r0, #4
   135ec:	beq	137e0 <__assert_fail@plt+0x1f50>
   135f0:	mov	r5, r6
   135f4:	b	13908 <__assert_fail@plt+0x2078>
   135f8:	mov	r0, r4
   135fc:	mov	r1, r6
   13600:	mov	r2, #0
   13604:	bl	130c8 <__assert_fail@plt+0x1838>
   13608:	strh	r0, [r6, #56]	; 0x38
   1360c:	b	13664 <__assert_fail@plt+0x1dd4>
   13610:	ldrh	r2, [r7, #56]!	; 0x38
   13614:	cmp	r2, #1
   13618:	bne	1366c <__assert_fail@plt+0x1ddc>
   1361c:	cmp	r0, #4
   13620:	bne	136d8 <__assert_fail@plt+0x1e48>
   13624:	ldrb	r0, [r6, #58]	; 0x3a
   13628:	tst	r0, #2
   1362c:	beq	13638 <__assert_fail@plt+0x1da8>
   13630:	ldr	r0, [r6, #36]	; 0x24
   13634:	bl	11860 <close@plt>
   13638:	ldr	r0, [r4, #4]
   1363c:	cmp	r0, #0
   13640:	beq	13650 <__assert_fail@plt+0x1dc0>
   13644:	bl	133b0 <__assert_fail@plt+0x1b20>
   13648:	mov	r0, #0
   1364c:	str	r0, [r4, #4]
   13650:	mov	r0, #6
   13654:	strh	r0, [r6, #56]	; 0x38
   13658:	mov	r0, r4
   1365c:	mov	r1, r6
   13660:	bl	13b84 <__assert_fail@plt+0x22f4>
   13664:	mov	r5, r6
   13668:	b	13b78 <__assert_fail@plt+0x22e8>
   1366c:	ldr	r5, [r6, #8]
   13670:	cmp	r5, #0
   13674:	beq	13770 <__assert_fail@plt+0x1ee0>
   13678:	mov	r0, r6
   1367c:	str	r5, [r4]
   13680:	bl	19150 <__assert_fail@plt+0x78c0>
   13684:	ldr	r0, [r5, #48]	; 0x30
   13688:	cmp	r0, #0
   1368c:	beq	137bc <__assert_fail@plt+0x1f2c>
   13690:	ldrh	r0, [r5, #60]	; 0x3c
   13694:	mov	r6, r5
   13698:	cmp	r0, #4
   1369c:	beq	1366c <__assert_fail@plt+0x1ddc>
   136a0:	cmp	r0, #2
   136a4:	bne	138cc <__assert_fail@plt+0x203c>
   136a8:	mov	r0, r4
   136ac:	mov	r1, r5
   136b0:	mov	r2, #1
   136b4:	bl	130c8 <__assert_fail@plt+0x1838>
   136b8:	strh	r0, [r5, #56]	; 0x38
   136bc:	cmp	r0, #1
   136c0:	ldrbeq	r0, [r4, #48]	; 0x30
   136c4:	tsteq	r0, #4
   136c8:	beq	13adc <__assert_fail@plt+0x224c>
   136cc:	mov	r0, #3
   136d0:	strh	r0, [r5, #60]	; 0x3c
   136d4:	b	138cc <__assert_fail@plt+0x203c>
   136d8:	tst	r1, #64	; 0x40
   136dc:	beq	13700 <__assert_fail@plt+0x1e70>
   136e0:	ldr	r0, [r4, #16]
   136e4:	ldr	r3, [r4, #20]
   136e8:	ldr	r2, [r6, #64]	; 0x40
   136ec:	ldr	r5, [r6, #68]	; 0x44
   136f0:	eor	r3, r5, r3
   136f4:	eor	r0, r2, r0
   136f8:	orrs	r0, r0, r3
   136fc:	bne	13624 <__assert_fail@plt+0x1d94>
   13700:	ldr	r0, [r4, #4]
   13704:	cmp	r0, #0
   13708:	beq	138a8 <__assert_fail@plt+0x2018>
   1370c:	tst	r1, #4096	; 0x1000
   13710:	bne	13894 <__assert_fail@plt+0x2004>
   13714:	ldr	r3, [r6, #24]
   13718:	mov	r0, r4
   1371c:	mov	r1, r6
   13720:	mvn	r2, #0
   13724:	bl	13c50 <__assert_fail@plt+0x23c0>
   13728:	cmp	r0, #0
   1372c:	beq	138c0 <__assert_fail@plt+0x2030>
   13730:	bl	11704 <__errno_location@plt>
   13734:	ldr	r0, [r0]
   13738:	str	r0, [r6, #32]
   1373c:	ldrh	r0, [r6, #58]	; 0x3a
   13740:	orr	r0, r0, #1
   13744:	strh	r0, [r6, #58]	; 0x3a
   13748:	ldr	r0, [r4, #4]
   1374c:	cmp	r0, #0
   13750:	beq	138c0 <__assert_fail@plt+0x2030>
   13754:	ldmib	r0, {r1, r2}
   13758:	ldr	r1, [r1, #24]
   1375c:	cmp	r2, #0
   13760:	str	r1, [r0, #24]
   13764:	mov	r0, r2
   13768:	bne	13754 <__assert_fail@plt+0x1ec4>
   1376c:	b	138c0 <__assert_fail@plt+0x2030>
   13770:	ldr	r5, [r6, #4]
   13774:	ldr	r0, [r5, #12]
   13778:	cmp	r0, #0
   1377c:	beq	139c4 <__assert_fail@plt+0x2134>
   13780:	str	r5, [r4]
   13784:	ldr	r1, [r5, #40]	; 0x28
   13788:	ldr	r0, [r4, #24]
   1378c:	mov	r5, #0
   13790:	strb	r5, [r0, r1]
   13794:	mov	r0, r4
   13798:	mov	r1, #3
   1379c:	bl	13e28 <__assert_fail@plt+0x2598>
   137a0:	cmp	r0, #0
   137a4:	beq	139b4 <__assert_fail@plt+0x2124>
   137a8:	mov	r7, r0
   137ac:	mov	r0, r6
   137b0:	bl	19150 <__assert_fail@plt+0x78c0>
   137b4:	mov	r5, r7
   137b8:	b	138cc <__assert_fail@plt+0x203c>
   137bc:	mov	r0, r4
   137c0:	bl	147bc <__assert_fail@plt+0x2f2c>
   137c4:	cmp	r0, #0
   137c8:	beq	1380c <__assert_fail@plt+0x1f7c>
   137cc:	ldr	r0, [r4, #48]	; 0x30
   137d0:	mov	r5, #0
   137d4:	orr	r0, r0, #8192	; 0x2000
   137d8:	str	r0, [r4, #48]	; 0x30
   137dc:	b	13b78 <__assert_fail@plt+0x22e8>
   137e0:	movw	r1, #43091	; 0xa853
   137e4:	mov	r0, r4
   137e8:	movt	r1, #1
   137ec:	bl	13380 <__assert_fail@plt+0x1af0>
   137f0:	cmn	r0, #1
   137f4:	str	r0, [r6, #36]	; 0x24
   137f8:	ble	13a50 <__assert_fail@plt+0x21c0>
   137fc:	ldrh	r0, [r6, #58]	; 0x3a
   13800:	orr	r0, r0, #2
   13804:	strh	r0, [r6, #58]	; 0x3a
   13808:	b	135f0 <__assert_fail@plt+0x1d60>
   1380c:	mov	r0, r4
   13810:	bl	13548 <__assert_fail@plt+0x1cb8>
   13814:	ldr	r1, [r5, #52]	; 0x34
   13818:	add	r6, r5, #168	; 0xa8
   1381c:	str	r1, [r5, #40]	; 0x28
   13820:	add	r2, r1, #1
   13824:	mov	r1, r6
   13828:	ldr	r0, [r4, #24]
   1382c:	bl	11518 <memmove@plt>
   13830:	mov	r0, r6
   13834:	mov	r1, #47	; 0x2f
   13838:	bl	117ac <strrchr@plt>
   1383c:	cmp	r0, #0
   13840:	beq	1387c <__assert_fail@plt+0x1fec>
   13844:	cmp	r0, r6
   13848:	bne	13858 <__assert_fail@plt+0x1fc8>
   1384c:	ldrb	r1, [r5, #169]	; 0xa9
   13850:	cmp	r1, #0
   13854:	beq	1387c <__assert_fail@plt+0x1fec>
   13858:	add	r7, r0, #1
   1385c:	mov	r0, r7
   13860:	bl	116e0 <strlen@plt>
   13864:	mov	r8, r0
   13868:	add	r2, r0, #1
   1386c:	mov	r0, r6
   13870:	mov	r1, r7
   13874:	bl	11518 <memmove@plt>
   13878:	str	r8, [r5, #52]	; 0x34
   1387c:	ldr	r0, [r4, #24]
   13880:	str	r0, [r5, #24]
   13884:	str	r0, [r5, #28]
   13888:	mov	r0, r4
   1388c:	bl	132f4 <__assert_fail@plt+0x1a64>
   13890:	b	13908 <__assert_fail@plt+0x2078>
   13894:	bic	r1, r1, #4096	; 0x1000
   13898:	str	r1, [r4, #48]	; 0x30
   1389c:	bl	133b0 <__assert_fail@plt+0x1b20>
   138a0:	mov	r0, #0
   138a4:	str	r0, [r4, #4]
   138a8:	mov	r0, r4
   138ac:	mov	r1, #3
   138b0:	bl	13e28 <__assert_fail@plt+0x2598>
   138b4:	cmp	r0, #0
   138b8:	str	r0, [r4, #4]
   138bc:	beq	13988 <__assert_fail@plt+0x20f8>
   138c0:	ldr	r5, [r4, #4]
   138c4:	mov	r0, #0
   138c8:	str	r0, [r4, #4]
   138cc:	ldr	r0, [r5, #4]
   138d0:	ldr	r1, [r0, #28]
   138d4:	ldr	r0, [r0, #40]	; 0x28
   138d8:	sub	r2, r0, #1
   138dc:	ldrb	r1, [r1, r2]
   138e0:	cmp	r1, #47	; 0x2f
   138e4:	ldr	r1, [r4, #24]
   138e8:	moveq	r0, r2
   138ec:	mov	r2, #47	; 0x2f
   138f0:	strb	r2, [r1, r0]!
   138f4:	ldr	r2, [r5, #52]	; 0x34
   138f8:	add	r0, r1, #1
   138fc:	add	r1, r5, #168	; 0xa8
   13900:	add	r2, r2, #1
   13904:	bl	11518 <memmove@plt>
   13908:	str	r5, [r4]
   1390c:	ldrh	r0, [r5, #56]	; 0x38
   13910:	cmp	r0, #11
   13914:	bne	13948 <__assert_fail@plt+0x20b8>
   13918:	ldrd	r0, [r5, #112]	; 0x70
   1391c:	eor	r2, r0, #1
   13920:	orrs	r2, r2, r1
   13924:	beq	13b78 <__assert_fail@plt+0x22e8>
   13928:	eor	r0, r0, #2
   1392c:	orrs	r0, r0, r1
   13930:	bne	13b80 <__assert_fail@plt+0x22f0>
   13934:	mov	r0, r4
   13938:	mov	r1, r5
   1393c:	mov	r2, #0
   13940:	bl	130c8 <__assert_fail@plt+0x1838>
   13944:	strh	r0, [r5, #56]	; 0x38
   13948:	cmp	r0, #1
   1394c:	bne	13b78 <__assert_fail@plt+0x22e8>
   13950:	ldr	r0, [r5, #48]	; 0x30
   13954:	cmp	r0, #0
   13958:	ldrdeq	r0, [r5, #64]	; 0x40
   1395c:	strdeq	r0, [r4, #16]
   13960:	mov	r0, r4
   13964:	mov	r1, r5
   13968:	bl	14818 <__assert_fail@plt+0x2f88>
   1396c:	cmp	r0, #0
   13970:	bne	13b78 <__assert_fail@plt+0x22e8>
   13974:	bl	11704 <__errno_location@plt>
   13978:	mov	r1, #12
   1397c:	mov	r5, #0
   13980:	str	r1, [r0]
   13984:	b	13b78 <__assert_fail@plt+0x22e8>
   13988:	ldrb	r0, [r4, #49]	; 0x31
   1398c:	mov	r5, #0
   13990:	tst	r0, #32
   13994:	bne	13b78 <__assert_fail@plt+0x22e8>
   13998:	ldr	r0, [r6, #32]
   1399c:	cmp	r0, #0
   139a0:	ldrhne	r0, [r7]
   139a4:	cmpne	r0, #4
   139a8:	movne	r0, #7
   139ac:	strhne	r0, [r7]
   139b0:	b	13658 <__assert_fail@plt+0x1dc8>
   139b4:	ldrb	r0, [r4, #49]	; 0x31
   139b8:	tst	r0, #32
   139bc:	bne	13b78 <__assert_fail@plt+0x22e8>
   139c0:	ldr	r5, [r6, #4]
   139c4:	mov	r0, r6
   139c8:	str	r5, [r4]
   139cc:	bl	19150 <__assert_fail@plt+0x78c0>
   139d0:	ldr	r0, [r5, #48]	; 0x30
   139d4:	cmn	r0, #1
   139d8:	beq	13a34 <__assert_fail@plt+0x21a4>
   139dc:	ldrh	r0, [r5, #56]	; 0x38
   139e0:	cmp	r0, #11
   139e4:	beq	13b80 <__assert_fail@plt+0x22f0>
   139e8:	ldr	r0, [r5, #40]	; 0x28
   139ec:	ldr	r1, [r4, #24]
   139f0:	mov	r2, #0
   139f4:	strb	r2, [r1, r0]
   139f8:	ldr	r0, [r5, #48]	; 0x30
   139fc:	cmp	r0, #0
   13a00:	beq	13a68 <__assert_fail@plt+0x21d8>
   13a04:	ldrh	r0, [r5, #58]	; 0x3a
   13a08:	tst	r0, #2
   13a0c:	bne	13a94 <__assert_fail@plt+0x2204>
   13a10:	tst	r0, #1
   13a14:	bne	13b3c <__assert_fail@plt+0x22ac>
   13a18:	ldr	r1, [r5, #4]
   13a1c:	movw	r3, #43090	; 0xa852
   13a20:	mov	r0, r4
   13a24:	mvn	r2, #0
   13a28:	movt	r3, #1
   13a2c:	bl	13c50 <__assert_fail@plt+0x23c0>
   13a30:	b	13a70 <__assert_fail@plt+0x21e0>
   13a34:	mov	r0, r5
   13a38:	bl	19150 <__assert_fail@plt+0x78c0>
   13a3c:	bl	11704 <__errno_location@plt>
   13a40:	mov	r5, #0
   13a44:	str	r5, [r0]
   13a48:	str	r5, [r4]
   13a4c:	b	13b78 <__assert_fail@plt+0x22e8>
   13a50:	bl	11704 <__errno_location@plt>
   13a54:	ldr	r0, [r0]
   13a58:	mov	r1, #7
   13a5c:	strh	r1, [r6, #56]	; 0x38
   13a60:	str	r0, [r6, #32]
   13a64:	b	135f0 <__assert_fail@plt+0x1d60>
   13a68:	mov	r0, r4
   13a6c:	bl	147bc <__assert_fail@plt+0x2f2c>
   13a70:	cmp	r0, #0
   13a74:	beq	13b3c <__assert_fail@plt+0x22ac>
   13a78:	bl	11704 <__errno_location@plt>
   13a7c:	ldr	r0, [r0]
   13a80:	str	r0, [r5, #32]
   13a84:	ldr	r0, [r4, #48]	; 0x30
   13a88:	orr	r0, r0, #8192	; 0x2000
   13a8c:	str	r0, [r4, #48]	; 0x30
   13a90:	b	13b3c <__assert_fail@plt+0x22ac>
   13a94:	ldr	r0, [r4, #48]	; 0x30
   13a98:	tst	r0, #4
   13a9c:	bne	13b08 <__assert_fail@plt+0x2278>
   13aa0:	mov	r6, r5
   13aa4:	tst	r0, #512	; 0x200
   13aa8:	ldr	r1, [r6, #36]!	; 0x24
   13aac:	bne	13b28 <__assert_fail@plt+0x2298>
   13ab0:	mov	r0, r1
   13ab4:	bl	117e8 <fchdir@plt>
   13ab8:	cmp	r0, #0
   13abc:	beq	13b34 <__assert_fail@plt+0x22a4>
   13ac0:	bl	11704 <__errno_location@plt>
   13ac4:	ldr	r0, [r0]
   13ac8:	str	r0, [r5, #32]
   13acc:	ldr	r0, [r4, #48]	; 0x30
   13ad0:	orr	r0, r0, #8192	; 0x2000
   13ad4:	str	r0, [r4, #48]	; 0x30
   13ad8:	b	13b34 <__assert_fail@plt+0x22a4>
   13adc:	movw	r1, #43091	; 0xa853
   13ae0:	mov	r0, r4
   13ae4:	movt	r1, #1
   13ae8:	bl	13380 <__assert_fail@plt+0x1af0>
   13aec:	cmn	r0, #1
   13af0:	str	r0, [r5, #36]	; 0x24
   13af4:	ble	13b10 <__assert_fail@plt+0x2280>
   13af8:	ldrh	r0, [r5, #58]	; 0x3a
   13afc:	orr	r0, r0, #2
   13b00:	strh	r0, [r5, #58]	; 0x3a
   13b04:	b	136cc <__assert_fail@plt+0x1e3c>
   13b08:	add	r6, r5, #36	; 0x24
   13b0c:	b	13b34 <__assert_fail@plt+0x22a4>
   13b10:	bl	11704 <__errno_location@plt>
   13b14:	ldr	r0, [r0]
   13b18:	mov	r1, #7
   13b1c:	strh	r1, [r5, #56]	; 0x38
   13b20:	str	r0, [r5, #32]
   13b24:	b	136cc <__assert_fail@plt+0x1e3c>
   13b28:	mov	r0, r4
   13b2c:	mov	r2, #1
   13b30:	bl	148cc <__assert_fail@plt+0x303c>
   13b34:	ldr	r0, [r6]
   13b38:	bl	11860 <close@plt>
   13b3c:	ldrh	r0, [r5, #56]	; 0x38
   13b40:	cmp	r0, #2
   13b44:	beq	13b6c <__assert_fail@plt+0x22dc>
   13b48:	ldr	r0, [r5, #32]
   13b4c:	mov	r1, #7
   13b50:	cmp	r0, #0
   13b54:	movweq	r1, #6
   13b58:	strh	r1, [r5, #56]	; 0x38
   13b5c:	bne	13b6c <__assert_fail@plt+0x22dc>
   13b60:	mov	r0, r4
   13b64:	mov	r1, r5
   13b68:	bl	13b84 <__assert_fail@plt+0x22f4>
   13b6c:	ldrb	r0, [r4, #49]	; 0x31
   13b70:	tst	r0, #32
   13b74:	movne	r5, #0
   13b78:	mov	r0, r5
   13b7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b80:	bl	11854 <abort@plt>
   13b84:	push	{r4, r5, r6, r7, fp, lr}
   13b88:	add	fp, sp, #16
   13b8c:	sub	sp, sp, #24
   13b90:	ldrh	r2, [r0, #48]	; 0x30
   13b94:	movw	r3, #258	; 0x102
   13b98:	add	lr, r1, #64	; 0x40
   13b9c:	tst	r2, r3
   13ba0:	beq	13bd8 <__assert_fail@plt+0x2348>
   13ba4:	ldrd	r2, [lr]
   13ba8:	stm	sp, {r2, r3}
   13bac:	ldrd	r2, [r1, #160]	; 0xa0
   13bb0:	mov	r1, sp
   13bb4:	str	r3, [sp, #12]
   13bb8:	str	r2, [sp, #8]
   13bbc:	ldr	r0, [r0, #56]	; 0x38
   13bc0:	bl	15b08 <__assert_fail@plt+0x4278>
   13bc4:	cmp	r0, #0
   13bc8:	beq	13c4c <__assert_fail@plt+0x23bc>
   13bcc:	bl	19150 <__assert_fail@plt+0x78c0>
   13bd0:	sub	sp, fp, #16
   13bd4:	pop	{r4, r5, r6, r7, fp, pc}
   13bd8:	ldr	r2, [r1, #4]
   13bdc:	cmp	r2, #0
   13be0:	beq	13bd0 <__assert_fail@plt+0x2340>
   13be4:	ldr	r3, [r2, #48]	; 0x30
   13be8:	cmp	r3, #0
   13bec:	blt	13bd0 <__assert_fail@plt+0x2340>
   13bf0:	ldr	ip, [r0, #56]	; 0x38
   13bf4:	ldrd	r4, [ip, #16]
   13bf8:	orrs	r3, r4, r5
   13bfc:	beq	13c4c <__assert_fail@plt+0x23bc>
   13c00:	ldrd	r4, [r1, #160]	; 0xa0
   13c04:	ldrd	r6, [ip]
   13c08:	eor	r1, r7, r5
   13c0c:	eor	r3, r6, r4
   13c10:	orrs	r1, r3, r1
   13c14:	bne	13bd0 <__assert_fail@plt+0x2340>
   13c18:	ldr	r1, [ip, #8]!
   13c1c:	ldrd	r4, [lr]
   13c20:	ldr	r3, [ip, #4]
   13c24:	eor	r1, r1, r4
   13c28:	eor	r3, r3, r5
   13c2c:	orrs	r1, r1, r3
   13c30:	bne	13bd0 <__assert_fail@plt+0x2340>
   13c34:	ldrd	r4, [r2, #64]	; 0x40
   13c38:	strd	r4, [ip]
   13c3c:	ldr	r0, [r0, #56]	; 0x38
   13c40:	ldrd	r2, [r2, #160]	; 0xa0
   13c44:	strd	r2, [r0]
   13c48:	b	13bd0 <__assert_fail@plt+0x2340>
   13c4c:	bl	11854 <abort@plt>
   13c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c54:	add	fp, sp, #28
   13c58:	sub	sp, sp, #108	; 0x6c
   13c5c:	mov	r7, r3
   13c60:	mov	r4, r2
   13c64:	mov	r8, r1
   13c68:	mov	sl, r0
   13c6c:	cmp	r3, #0
   13c70:	beq	13c94 <__assert_fail@plt+0x2404>
   13c74:	movw	r1, #43090	; 0xa852
   13c78:	mov	r0, r7
   13c7c:	movt	r1, #1
   13c80:	bl	114f4 <strcmp@plt>
   13c84:	mov	r6, r0
   13c88:	cmp	r0, #0
   13c8c:	movwne	r6, #1
   13c90:	b	13c98 <__assert_fail@plt+0x2408>
   13c94:	mov	r6, #1
   13c98:	ldr	r0, [sl, #48]	; 0x30
   13c9c:	tst	r0, #4
   13ca0:	bne	13cf8 <__assert_fail@plt+0x2468>
   13ca4:	cmn	r4, #1
   13ca8:	mov	r1, #0
   13cac:	mov	r9, #0
   13cb0:	movwgt	r1, #1
   13cb4:	orrs	r1, r1, r6
   13cb8:	bne	13d18 <__assert_fail@plt+0x2488>
   13cbc:	ands	r0, r0, #512	; 0x200
   13cc0:	beq	13d18 <__assert_fail@plt+0x2488>
   13cc4:	add	r4, sl, #60	; 0x3c
   13cc8:	mov	r0, r4
   13ccc:	bl	15c4c <__assert_fail@plt+0x43bc>
   13cd0:	cmp	r0, #0
   13cd4:	bne	13d20 <__assert_fail@plt+0x2490>
   13cd8:	mov	r0, r4
   13cdc:	bl	15ca0 <__assert_fail@plt+0x4410>
   13ce0:	cmn	r0, #1
   13ce4:	ble	13d20 <__assert_fail@plt+0x2490>
   13ce8:	mov	r4, r0
   13cec:	mov	r9, #0
   13cf0:	mov	r7, #0
   13cf4:	b	13d3c <__assert_fail@plt+0x24ac>
   13cf8:	mov	r5, #0
   13cfc:	cmp	r4, #0
   13d00:	blt	13e1c <__assert_fail@plt+0x258c>
   13d04:	ands	r0, r0, #512	; 0x200
   13d08:	beq	13e1c <__assert_fail@plt+0x258c>
   13d0c:	mov	r0, r4
   13d10:	bl	11860 <close@plt>
   13d14:	b	13e1c <__assert_fail@plt+0x258c>
   13d18:	cmn	r4, #1
   13d1c:	bgt	13d3c <__assert_fail@plt+0x24ac>
   13d20:	mov	r0, sl
   13d24:	mov	r1, r7
   13d28:	bl	13380 <__assert_fail@plt+0x1af0>
   13d2c:	cmp	r0, #0
   13d30:	blt	13dcc <__assert_fail@plt+0x253c>
   13d34:	mov	r4, r0
   13d38:	mov	r9, #1
   13d3c:	ldr	r5, [sl, #48]	; 0x30
   13d40:	tst	r5, #2
   13d44:	bne	13d68 <__assert_fail@plt+0x24d8>
   13d48:	cmp	r7, #0
   13d4c:	beq	13db4 <__assert_fail@plt+0x2524>
   13d50:	movw	r1, #43090	; 0xa852
   13d54:	mov	r0, r7
   13d58:	movt	r1, #1
   13d5c:	bl	114f4 <strcmp@plt>
   13d60:	cmp	r0, #0
   13d64:	bne	13db4 <__assert_fail@plt+0x2524>
   13d68:	mov	r1, sp
   13d6c:	mov	r0, r4
   13d70:	bl	19a28 <__assert_fail@plt+0x8198>
   13d74:	cmp	r0, #0
   13d78:	bne	13df8 <__assert_fail@plt+0x2568>
   13d7c:	ldrd	r0, [r8, #64]	; 0x40
   13d80:	ldm	sp, {r2, r3}
   13d84:	eor	r1, r1, r3
   13d88:	eor	r0, r0, r2
   13d8c:	orrs	r0, r0, r1
   13d90:	bne	13dec <__assert_fail@plt+0x255c>
   13d94:	ldrd	r0, [r8, #160]	; 0xa0
   13d98:	ldr	r2, [sp, #96]	; 0x60
   13d9c:	ldr	r3, [sp, #100]	; 0x64
   13da0:	eor	r1, r1, r3
   13da4:	eor	r0, r0, r2
   13da8:	orrs	r0, r0, r1
   13dac:	bne	13dec <__assert_fail@plt+0x255c>
   13db0:	ldr	r5, [sl, #48]	; 0x30
   13db4:	tst	r5, #512	; 0x200
   13db8:	bne	13dd4 <__assert_fail@plt+0x2544>
   13dbc:	mov	r0, r4
   13dc0:	bl	117e8 <fchdir@plt>
   13dc4:	mov	r5, r0
   13dc8:	b	13dfc <__assert_fail@plt+0x256c>
   13dcc:	mvn	r5, #0
   13dd0:	b	13e1c <__assert_fail@plt+0x258c>
   13dd4:	mov	r0, sl
   13dd8:	mov	r1, r4
   13ddc:	mov	r2, r6
   13de0:	bl	148cc <__assert_fail@plt+0x303c>
   13de4:	mov	r5, #0
   13de8:	b	13e1c <__assert_fail@plt+0x258c>
   13dec:	bl	11704 <__errno_location@plt>
   13df0:	mov	r1, #2
   13df4:	str	r1, [r0]
   13df8:	mvn	r5, #0
   13dfc:	cmp	r9, #0
   13e00:	beq	13e1c <__assert_fail@plt+0x258c>
   13e04:	bl	11704 <__errno_location@plt>
   13e08:	ldr	r7, [r0]
   13e0c:	mov	r6, r0
   13e10:	mov	r0, r4
   13e14:	bl	11860 <close@plt>
   13e18:	str	r7, [r6]
   13e1c:	mov	r0, r5
   13e20:	sub	sp, fp, #28
   13e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e2c:	add	fp, sp, #28
   13e30:	sub	sp, sp, #68	; 0x44
   13e34:	ldr	r8, [r0]
   13e38:	mov	r4, r1
   13e3c:	mov	r6, r0
   13e40:	str	r0, [fp, #-40]	; 0xffffffd8
   13e44:	ldr	r5, [r8, #12]
   13e48:	cmp	r5, #0
   13e4c:	beq	13e90 <__assert_fail@plt+0x2600>
   13e50:	mov	r0, r5
   13e54:	bl	117dc <dirfd@plt>
   13e58:	cmn	r0, #1
   13e5c:	str	r0, [fp, #-32]	; 0xffffffe0
   13e60:	ble	13ecc <__assert_fail@plt+0x263c>
   13e64:	ldr	r0, [r6, #44]!	; 0x2c
   13e68:	mvn	r2, #0
   13e6c:	str	r5, [sp, #12]
   13e70:	cmp	r0, #0
   13e74:	str	r6, [sp, #44]	; 0x2c
   13e78:	add	r9, r6, #4
   13e7c:	mov	r6, #0
   13e80:	movweq	r2, #34464	; 0x86a0
   13e84:	movteq	r2, #1
   13e88:	str	r2, [sp, #24]
   13e8c:	b	140c0 <__assert_fail@plt+0x2830>
   13e90:	mov	r9, r6
   13e94:	mvn	r0, #99	; 0x63
   13e98:	mov	r2, #0
   13e9c:	str	r5, [sp, #12]
   13ea0:	ldr	r3, [r9, #48]!	; 0x30
   13ea4:	and	r1, r3, #516	; 0x204
   13ea8:	cmp	r1, #512	; 0x200
   13eac:	ldr	r1, [r8, #24]
   13eb0:	ldreq	r0, [r6, #32]
   13eb4:	tst	r3, #16
   13eb8:	beq	13eec <__assert_fail@plt+0x265c>
   13ebc:	tst	r3, #1
   13ec0:	bne	13ee0 <__assert_fail@plt+0x2650>
   13ec4:	mov	r2, #32768	; 0x8000
   13ec8:	b	13eec <__assert_fail@plt+0x265c>
   13ecc:	ldr	r0, [r8, #12]
   13ed0:	bl	11878 <closedir@plt>
   13ed4:	mov	r5, #0
   13ed8:	str	r5, [r8, #12]
   13edc:	b	13f28 <__assert_fail@plt+0x2698>
   13ee0:	ldr	r3, [r8, #48]	; 0x30
   13ee4:	cmp	r3, #0
   13ee8:	movne	r2, #32768	; 0x8000
   13eec:	sub	r3, fp, #32
   13ef0:	bl	15d3c <__assert_fail@plt+0x44ac>
   13ef4:	cmp	r0, #0
   13ef8:	str	r0, [r8, #12]
   13efc:	beq	13f24 <__assert_fail@plt+0x2694>
   13f00:	ldrh	r0, [r8, #56]	; 0x38
   13f04:	cmp	r0, #11
   13f08:	bne	13f48 <__assert_fail@plt+0x26b8>
   13f0c:	mov	r0, r6
   13f10:	mov	r1, r8
   13f14:	mov	r2, #0
   13f18:	bl	130c8 <__assert_fail@plt+0x1838>
   13f1c:	strh	r0, [r8, #56]	; 0x38
   13f20:	b	13f88 <__assert_fail@plt+0x26f8>
   13f24:	mov	r5, #0
   13f28:	cmp	r4, #3
   13f2c:	bne	14758 <__assert_fail@plt+0x2ec8>
   13f30:	mov	r0, #4
   13f34:	strh	r0, [r8, #56]	; 0x38
   13f38:	bl	11704 <__errno_location@plt>
   13f3c:	ldr	r0, [r0]
   13f40:	str	r0, [r8, #32]
   13f44:	b	14758 <__assert_fail@plt+0x2ec8>
   13f48:	ldrb	r0, [r9, #1]
   13f4c:	tst	r0, #1
   13f50:	beq	13f88 <__assert_fail@plt+0x26f8>
   13f54:	mov	r0, r6
   13f58:	mov	r1, r8
   13f5c:	bl	13b84 <__assert_fail@plt+0x22f4>
   13f60:	mov	r0, r6
   13f64:	mov	r1, r8
   13f68:	mov	r2, #0
   13f6c:	mov	r5, #0
   13f70:	bl	130c8 <__assert_fail@plt+0x1838>
   13f74:	mov	r0, r6
   13f78:	mov	r1, r8
   13f7c:	bl	14818 <__assert_fail@plt+0x2f88>
   13f80:	cmp	r0, #0
   13f84:	beq	1456c <__assert_fail@plt+0x2cdc>
   13f88:	mov	r1, r6
   13f8c:	mov	sl, r6
   13f90:	ldr	r0, [r1, #44]!	; 0x2c
   13f94:	str	r1, [sp, #44]	; 0x2c
   13f98:	mvn	r1, #0
   13f9c:	cmp	r0, #0
   13fa0:	movweq	r1, #34464	; 0x86a0
   13fa4:	movteq	r1, #1
   13fa8:	cmp	r4, #2
   13fac:	str	r1, [sp, #24]
   13fb0:	bne	13fd4 <__assert_fail@plt+0x2744>
   13fb4:	mov	r6, #1
   13fb8:	cmp	r4, #3
   13fbc:	bne	140c0 <__assert_fail@plt+0x2830>
   13fc0:	sub	r0, r4, #3
   13fc4:	mov	r7, r8
   13fc8:	mov	r8, r4
   13fcc:	mov	r5, #0
   13fd0:	b	13ffc <__assert_fail@plt+0x276c>
   13fd4:	ldr	r0, [r9]
   13fd8:	and	r0, r0, #56	; 0x38
   13fdc:	cmp	r0, #24
   13fe0:	ldreq	r0, [r8, #84]	; 0x54
   13fe4:	cmpeq	r0, #2
   13fe8:	beq	14764 <__assert_fail@plt+0x2ed4>
   13fec:	sub	r0, r4, #3
   13ff0:	mov	r7, r8
   13ff4:	mov	r8, r4
   13ff8:	mov	r5, #1
   13ffc:	clz	r0, r0
   14000:	lsr	r4, r0, #5
   14004:	ldrb	r0, [r9, #1]
   14008:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1400c:	tst	r0, #2
   14010:	beq	1402c <__assert_fail@plt+0x279c>
   14014:	mov	r0, r2
   14018:	movw	r1, #1030	; 0x406
   1401c:	mov	r2, #3
   14020:	bl	18ed4 <__assert_fail@plt+0x7644>
   14024:	mov	r2, r0
   14028:	str	r0, [fp, #-32]	; 0xffffffe0
   1402c:	cmp	r2, #0
   14030:	blt	1404c <__assert_fail@plt+0x27bc>
   14034:	mov	r0, sl
   14038:	mov	r1, r7
   1403c:	mov	r3, #0
   14040:	bl	13c50 <__assert_fail@plt+0x23c0>
   14044:	cmp	r0, #0
   14048:	beq	140b4 <__assert_fail@plt+0x2824>
   1404c:	and	r0, r4, r5
   14050:	cmp	r0, #1
   14054:	bne	14064 <__assert_fail@plt+0x27d4>
   14058:	bl	11704 <__errno_location@plt>
   1405c:	ldr	r0, [r0]
   14060:	str	r0, [r7, #32]
   14064:	ldrh	r0, [r7, #58]	; 0x3a
   14068:	orr	r0, r0, #1
   1406c:	strh	r0, [r7, #58]	; 0x3a
   14070:	ldr	r0, [r7, #12]
   14074:	bl	11878 <closedir@plt>
   14078:	mov	r4, #0
   1407c:	mov	r5, r7
   14080:	str	r4, [r7, #12]
   14084:	ldr	r0, [r9]
   14088:	tst	r0, #512	; 0x200
   1408c:	beq	140a0 <__assert_fail@plt+0x2810>
   14090:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14094:	cmp	r0, #0
   14098:	blt	140a0 <__assert_fail@plt+0x2810>
   1409c:	bl	11860 <close@plt>
   140a0:	str	r4, [r5, #12]
   140a4:	mov	r4, r8
   140a8:	mov	r6, #1
   140ac:	mov	r8, r5
   140b0:	b	140c0 <__assert_fail@plt+0x2830>
   140b4:	mov	r4, r8
   140b8:	mov	r6, #0
   140bc:	mov	r8, r7
   140c0:	ldr	r0, [r8, #40]	; 0x28
   140c4:	ldr	r1, [r8, #28]
   140c8:	mov	r5, #0
   140cc:	str	r4, [sp, #4]
   140d0:	sub	r2, r0, #1
   140d4:	ldrb	r1, [r1, r2]
   140d8:	cmp	r1, #47	; 0x2f
   140dc:	ldrb	r1, [r9]
   140e0:	moveq	r0, r2
   140e4:	tst	r1, #4
   140e8:	mov	r1, #0
   140ec:	str	r1, [sp, #36]	; 0x24
   140f0:	beq	1410c <__assert_fail@plt+0x287c>
   140f4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   140f8:	mov	r2, #47	; 0x2f
   140fc:	ldr	r1, [r1, #24]
   14100:	strb	r2, [r1, r0]!
   14104:	add	r1, r1, #1
   14108:	str	r1, [sp, #36]	; 0x24
   1410c:	ldr	r4, [r8, #12]
   14110:	add	r0, r0, #1
   14114:	str	r0, [sp, #48]	; 0x30
   14118:	cmp	r4, #0
   1411c:	beq	14444 <__assert_fail@plt+0x2bb4>
   14120:	mov	r1, r0
   14124:	ldr	r0, [r8, #48]	; 0x30
   14128:	str	r6, [sp]
   1412c:	mov	r6, #0
   14130:	add	r0, r0, #1
   14134:	str	r0, [sp, #20]
   14138:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1413c:	ldr	r0, [r0, #36]	; 0x24
   14140:	sub	r0, r0, r1
   14144:	str	r0, [fp, #-44]	; 0xffffffd4
   14148:	bl	11704 <__errno_location@plt>
   1414c:	str	r0, [sp, #28]
   14150:	mov	r0, #0
   14154:	mov	r5, #0
   14158:	mov	r7, #0
   1415c:	str	r8, [sp, #32]
   14160:	str	r9, [fp, #-36]	; 0xffffffdc
   14164:	str	r0, [sp, #40]	; 0x28
   14168:	mov	r0, #0
   1416c:	str	r0, [sp, #16]
   14170:	mov	r0, #0
   14174:	str	r0, [sp, #8]
   14178:	ldr	r0, [sp, #28]
   1417c:	str	r6, [r0]
   14180:	mov	r0, r4
   14184:	bl	117c4 <readdir64@plt>
   14188:	cmp	r0, #0
   1418c:	beq	144a4 <__assert_fail@plt+0x2c14>
   14190:	mov	sl, r0
   14194:	ldrb	r0, [r9]
   14198:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1419c:	add	r4, sl, #19
   141a0:	tst	r0, #32
   141a4:	ldrbeq	r0, [r4]
   141a8:	cmpeq	r0, #46	; 0x2e
   141ac:	beq	1424c <__assert_fail@plt+0x29bc>
   141b0:	mov	r0, r4
   141b4:	bl	116e0 <strlen@plt>
   141b8:	mov	r8, r0
   141bc:	mov	r0, r6
   141c0:	mov	r1, r4
   141c4:	mov	r2, r8
   141c8:	bl	13048 <__assert_fail@plt+0x17b8>
   141cc:	mov	r9, r0
   141d0:	cmp	r0, #0
   141d4:	beq	14458 <__assert_fail@plt+0x2bc8>
   141d8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   141dc:	cmp	r8, r1
   141e0:	bcs	141f4 <__assert_fail@plt+0x2964>
   141e4:	ldr	r2, [sp, #48]	; 0x30
   141e8:	add	r4, r8, r2
   141ec:	mov	r8, r6
   141f0:	b	14280 <__assert_fail@plt+0x29f0>
   141f4:	ldr	r1, [sp, #48]	; 0x30
   141f8:	add	r4, r8, r1
   141fc:	mov	r8, r6
   14200:	ldr	r6, [r6, #24]
   14204:	add	r1, r4, #1
   14208:	mov	r0, r8
   1420c:	bl	12fd4 <__assert_fail@plt+0x1744>
   14210:	cmp	r0, #0
   14214:	beq	14458 <__assert_fail@plt+0x2bc8>
   14218:	ldr	r0, [r8, #24]
   1421c:	cmp	r6, r0
   14220:	beq	14274 <__assert_fail@plt+0x29e4>
   14224:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14228:	ldr	r2, [sp, #48]	; 0x30
   1422c:	ldrb	r1, [r1]
   14230:	tst	r1, #4
   14234:	ldr	r1, [sp, #36]	; 0x24
   14238:	addne	r1, r0, r2
   1423c:	mov	r0, #1
   14240:	str	r1, [sp, #36]	; 0x24
   14244:	str	r0, [sp, #8]
   14248:	b	14278 <__assert_fail@plt+0x29e8>
   1424c:	ldrb	r0, [sl, #20]
   14250:	cmp	r0, #0
   14254:	beq	14268 <__assert_fail@plt+0x29d8>
   14258:	cmp	r0, #46	; 0x2e
   1425c:	ldrbeq	r0, [sl, #21]
   14260:	cmpeq	r0, #0
   14264:	bne	141b0 <__assert_fail@plt+0x2920>
   14268:	ldr	r8, [sp, #32]
   1426c:	mov	r6, #0
   14270:	b	1442c <__assert_fail@plt+0x2b9c>
   14274:	ldr	r2, [sp, #48]	; 0x30
   14278:	ldr	r0, [r8, #36]	; 0x24
   1427c:	sub	r1, r0, r2
   14280:	cmp	r4, r2
   14284:	bcc	144fc <__assert_fail@plt+0x2c6c>
   14288:	ldr	r0, [sp, #20]
   1428c:	str	r1, [fp, #-44]	; 0xffffffd4
   14290:	str	r0, [r9, #48]	; 0x30
   14294:	ldr	r0, [r8]
   14298:	str	r4, [r9, #40]	; 0x28
   1429c:	str	r0, [r9, #4]
   142a0:	ldrd	r0, [sl]
   142a4:	strd	r0, [r9, #160]	; 0xa0
   142a8:	ldrb	r0, [r8, #48]	; 0x30
   142ac:	tst	r0, #4
   142b0:	bne	142c0 <__assert_fail@plt+0x2a30>
   142b4:	add	r0, r9, #168	; 0xa8
   142b8:	str	r0, [r9, #24]
   142bc:	b	142dc <__assert_fail@plt+0x2a4c>
   142c0:	ldr	r0, [r9, #28]
   142c4:	ldr	r2, [r9, #52]	; 0x34
   142c8:	add	r1, r9, #168	; 0xa8
   142cc:	str	r0, [r9, #24]
   142d0:	ldr	r0, [sp, #36]	; 0x24
   142d4:	add	r2, r2, #1
   142d8:	bl	11518 <memmove@plt>
   142dc:	ldr	r0, [sp, #44]	; 0x2c
   142e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   142e4:	ldr	r0, [r0]
   142e8:	ldr	r2, [r1]
   142ec:	cmp	r0, #0
   142f0:	beq	14318 <__assert_fail@plt+0x2a88>
   142f4:	ands	r0, r2, #1024	; 0x400
   142f8:	bne	14318 <__assert_fail@plt+0x2a88>
   142fc:	mov	r0, r8
   14300:	mov	r1, r9
   14304:	mov	r2, #0
   14308:	bl	130c8 <__assert_fail@plt+0x1838>
   1430c:	mov	r6, #0
   14310:	strh	r0, [r9, #56]	; 0x38
   14314:	b	1438c <__assert_fail@plt+0x2afc>
   14318:	ldrb	r3, [sl, #18]
   1431c:	mov	r0, #0
   14320:	tst	r2, #8
   14324:	mov	r1, #0
   14328:	beq	1434c <__assert_fail@plt+0x2abc>
   1432c:	orr	r1, r3, #4
   14330:	cmp	r1, #4
   14334:	mov	r1, #0
   14338:	beq	1434c <__assert_fail@plt+0x2abc>
   1433c:	eor	r1, r3, #10
   14340:	and	r2, r2, #16
   14344:	orrs	r1, r2, r1
   14348:	movwne	r1, #1
   1434c:	mov	r2, #11
   14350:	mov	r6, #0
   14354:	strh	r2, [r9, #56]	; 0x38
   14358:	sub	r2, r3, #1
   1435c:	uxtb	r3, r2
   14360:	cmp	r3, #11
   14364:	sxtbls	r0, r2
   14368:	movwls	r2, #43104	; 0xa860
   1436c:	movtls	r2, #1
   14370:	ldrls	r0, [r2, r0, lsl #2]
   14374:	cmp	r1, #0
   14378:	str	r0, [r9, #80]	; 0x50
   1437c:	mov	r0, #2
   14380:	movwne	r0, #1
   14384:	str	r0, [r9, #112]	; 0x70
   14388:	str	r6, [r9, #116]	; 0x74
   1438c:	cmp	r5, #0
   14390:	mov	r4, r9
   14394:	str	r6, [r9, #8]
   14398:	ldrne	r0, [sp, #40]	; 0x28
   1439c:	movne	r4, r5
   143a0:	strne	r9, [r0, #8]
   143a4:	movw	r0, #10000	; 0x2710
   143a8:	cmp	r7, r0
   143ac:	bne	14400 <__assert_fail@plt+0x2b70>
   143b0:	ldr	r0, [sp, #44]	; 0x2c
   143b4:	ldr	r0, [r0]
   143b8:	cmp	r0, #0
   143bc:	bne	14400 <__assert_fail@plt+0x2b70>
   143c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   143c4:	ldr	r0, [sp, #32]
   143c8:	bl	14b64 <__assert_fail@plt+0x32d4>
   143cc:	mov	r1, #0
   143d0:	str	r1, [sp, #16]
   143d4:	movw	r1, #19778	; 0x4d42
   143d8:	movt	r1, #65363	; 0xff53
   143dc:	cmp	r0, r1
   143e0:	movwne	r1, #26985	; 0x6969
   143e4:	cmpne	r0, r1
   143e8:	beq	14400 <__assert_fail@plt+0x2b70>
   143ec:	movw	r1, #6548	; 0x1994
   143f0:	movt	r1, #258	; 0x102
   143f4:	cmp	r0, r1
   143f8:	movne	r0, #1
   143fc:	strne	r0, [sp, #16]
   14400:	ldr	r0, [sp, #24]
   14404:	add	r7, r7, #1
   14408:	cmp	r0, r7
   1440c:	mov	r0, #0
   14410:	movwls	r0, #15
   14414:	cmp	r0, #0
   14418:	bne	14548 <__assert_fail@plt+0x2cb8>
   1441c:	str	r9, [sp, #40]	; 0x28
   14420:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14424:	ldr	r8, [sp, #32]
   14428:	mov	r5, r4
   1442c:	ldr	r4, [r8, #12]
   14430:	cmp	r4, #0
   14434:	bne	14178 <__assert_fail@plt+0x28e8>
   14438:	ldr	r0, [sp, #8]
   1443c:	ldr	r4, [sp, #4]
   14440:	b	144ec <__assert_fail@plt+0x2c5c>
   14444:	ldr	r4, [sp, #4]
   14448:	mov	r7, #0
   1444c:	mov	r0, #0
   14450:	str	r0, [sp, #16]
   14454:	b	14614 <__assert_fail@plt+0x2d84>
   14458:	ldr	r4, [sp, #28]
   1445c:	mov	r0, r9
   14460:	ldr	r8, [r4]
   14464:	bl	19150 <__assert_fail@plt+0x78c0>
   14468:	mov	r0, r5
   1446c:	bl	133b0 <__assert_fail@plt+0x1b20>
   14470:	ldr	r6, [sp, #32]
   14474:	ldr	r0, [r6, #12]
   14478:	bl	11878 <closedir@plt>
   1447c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14480:	mov	r5, #0
   14484:	mov	r0, #7
   14488:	str	r5, [r6, #12]
   1448c:	strh	r0, [r6, #56]	; 0x38
   14490:	ldr	r0, [r7]
   14494:	orr	r0, r0, #8192	; 0x2000
   14498:	str	r0, [r7]
   1449c:	str	r8, [r4]
   144a0:	b	14758 <__assert_fail@plt+0x2ec8>
   144a4:	ldr	r0, [sp, #28]
   144a8:	ldr	r0, [r0]
   144ac:	cmp	r0, #0
   144b0:	beq	144cc <__assert_fail@plt+0x2c3c>
   144b4:	str	r0, [r8, #32]
   144b8:	ldr	r0, [sp, #12]
   144bc:	orrs	r0, r0, r7
   144c0:	mov	r0, #4
   144c4:	movwne	r0, #7
   144c8:	strh	r0, [r8, #56]	; 0x38
   144cc:	ldr	r0, [r8, #12]
   144d0:	ldr	r4, [sp, #4]
   144d4:	cmp	r0, #0
   144d8:	beq	1457c <__assert_fail@plt+0x2cec>
   144dc:	bl	11878 <closedir@plt>
   144e0:	mov	r0, #0
   144e4:	str	r0, [r8, #12]
   144e8:	ldr	r0, [sp, #8]
   144ec:	tst	r0, #1
   144f0:	ldr	r6, [sp]
   144f4:	bne	1458c <__assert_fail@plt+0x2cfc>
   144f8:	b	14614 <__assert_fail@plt+0x2d84>
   144fc:	mov	r0, r9
   14500:	bl	19150 <__assert_fail@plt+0x78c0>
   14504:	mov	r0, r5
   14508:	bl	133b0 <__assert_fail@plt+0x1b20>
   1450c:	ldr	r4, [sp, #32]
   14510:	ldr	r0, [r4, #12]
   14514:	bl	11878 <closedir@plt>
   14518:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1451c:	mov	r5, #0
   14520:	mov	r0, #7
   14524:	ldr	r1, [sp, #28]
   14528:	str	r5, [r4, #12]
   1452c:	strh	r0, [r4, #56]	; 0x38
   14530:	ldr	r0, [r7]
   14534:	orr	r0, r0, #8192	; 0x2000
   14538:	str	r0, [r7]
   1453c:	mov	r0, #36	; 0x24
   14540:	str	r0, [r1]
   14544:	b	14758 <__assert_fail@plt+0x2ec8>
   14548:	ldr	r6, [sp]
   1454c:	cmp	r0, #15
   14550:	bne	14754 <__assert_fail@plt+0x2ec4>
   14554:	mov	r5, r4
   14558:	ldr	r9, [fp, #-36]	; 0xffffffdc
   1455c:	ldr	r4, [sp, #4]
   14560:	ldr	r0, [sp, #8]
   14564:	ldr	r8, [sp, #32]
   14568:	b	14584 <__assert_fail@plt+0x2cf4>
   1456c:	bl	11704 <__errno_location@plt>
   14570:	mov	r1, #12
   14574:	str	r1, [r0]
   14578:	b	14758 <__assert_fail@plt+0x2ec8>
   1457c:	ldr	r6, [sp]
   14580:	ldr	r0, [sp, #8]
   14584:	tst	r0, #1
   14588:	beq	14614 <__assert_fail@plt+0x2d84>
   1458c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14590:	ldr	r1, [r0, #4]
   14594:	ldr	r0, [r0, #24]
   14598:	b	145c0 <__assert_fail@plt+0x2d30>
   1459c:	ldr	r2, [r1, #24]
   145a0:	add	r3, r1, #168	; 0xa8
   145a4:	cmp	r2, r3
   145a8:	ldrne	r3, [r1, #28]
   145ac:	subne	r2, r2, r3
   145b0:	addne	r2, r0, r2
   145b4:	strne	r2, [r1, #24]
   145b8:	str	r0, [r1, #28]
   145bc:	ldr	r1, [r1, #8]
   145c0:	cmp	r1, #0
   145c4:	bne	1459c <__assert_fail@plt+0x2d0c>
   145c8:	ldr	r1, [r5, #48]	; 0x30
   145cc:	cmp	r1, #0
   145d0:	blt	14614 <__assert_fail@plt+0x2d84>
   145d4:	mov	r1, r5
   145d8:	ldr	r2, [r1, #24]
   145dc:	add	r3, r1, #168	; 0xa8
   145e0:	cmp	r2, r3
   145e4:	ldrne	r3, [r1, #28]
   145e8:	subne	r2, r2, r3
   145ec:	addne	r2, r0, r2
   145f0:	strne	r2, [r1, #24]
   145f4:	str	r0, [r1, #28]
   145f8:	ldr	r2, [r1, #8]
   145fc:	cmp	r2, #0
   14600:	ldreq	r2, [r1, #4]
   14604:	ldr	r1, [r2, #48]	; 0x30
   14608:	cmn	r1, #1
   1460c:	mov	r1, r2
   14610:	bgt	145d8 <__assert_fail@plt+0x2d48>
   14614:	ldrb	r0, [r9]
   14618:	tst	r0, #4
   1461c:	beq	1464c <__assert_fail@plt+0x2dbc>
   14620:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14624:	ldr	r2, [sp, #36]	; 0x24
   14628:	ldr	r3, [sp, #48]	; 0x30
   1462c:	ldr	r0, [r0, #36]	; 0x24
   14630:	sub	r1, r2, #1
   14634:	cmp	r3, r0
   14638:	mov	r0, #0
   1463c:	moveq	r2, r1
   14640:	cmp	r7, #0
   14644:	moveq	r2, r1
   14648:	strb	r0, [r2]
   1464c:	ldr	r0, [sp, #12]
   14650:	cmp	r0, #0
   14654:	movwne	r0, #1
   14658:	orrs	r0, r0, r6
   1465c:	beq	14688 <__assert_fail@plt+0x2df8>
   14660:	cmp	r7, #0
   14664:	bne	146bc <__assert_fail@plt+0x2e2c>
   14668:	cmp	r4, #3
   1466c:	bne	1474c <__assert_fail@plt+0x2ebc>
   14670:	ldrh	r0, [r8, #56]	; 0x38
   14674:	cmp	r0, #4
   14678:	cmpne	r0, #7
   1467c:	movne	r0, #6
   14680:	strhne	r0, [r8, #56]	; 0x38
   14684:	b	1474c <__assert_fail@plt+0x2ebc>
   14688:	cmp	r4, #1
   1468c:	cmpne	r7, #0
   14690:	bne	146bc <__assert_fail@plt+0x2e2c>
   14694:	ldr	r0, [r8, #48]	; 0x30
   14698:	cmp	r0, #0
   1469c:	beq	14728 <__assert_fail@plt+0x2e98>
   146a0:	ldr	r1, [r8, #4]
   146a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   146a8:	movw	r3, #43090	; 0xa852
   146ac:	mvn	r2, #0
   146b0:	movt	r3, #1
   146b4:	bl	13c50 <__assert_fail@plt+0x23c0>
   146b8:	b	14730 <__assert_fail@plt+0x2ea0>
   146bc:	ldr	r0, [sp, #16]
   146c0:	tst	r0, #1
   146c4:	beq	146f8 <__assert_fail@plt+0x2e68>
   146c8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   146cc:	movw	r0, #19244	; 0x4b2c
   146d0:	mov	r1, r5
   146d4:	mov	r2, r7
   146d8:	movt	r0, #1
   146dc:	str	r0, [r4, #44]	; 0x2c
   146e0:	mov	r0, r4
   146e4:	bl	131fc <__assert_fail@plt+0x196c>
   146e8:	mov	r5, r0
   146ec:	mov	r0, #0
   146f0:	str	r0, [r4, #44]	; 0x2c
   146f4:	b	14758 <__assert_fail@plt+0x2ec8>
   146f8:	cmp	r7, #2
   146fc:	bcc	14758 <__assert_fail@plt+0x2ec8>
   14700:	ldr	r0, [sp, #44]	; 0x2c
   14704:	ldr	r0, [r0]
   14708:	cmp	r0, #0
   1470c:	beq	14758 <__assert_fail@plt+0x2ec8>
   14710:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14714:	mov	r1, r5
   14718:	mov	r2, r7
   1471c:	bl	131fc <__assert_fail@plt+0x196c>
   14720:	mov	r5, r0
   14724:	b	14758 <__assert_fail@plt+0x2ec8>
   14728:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1472c:	bl	147bc <__assert_fail@plt+0x2f2c>
   14730:	cmp	r0, #0
   14734:	beq	14660 <__assert_fail@plt+0x2dd0>
   14738:	mov	r0, #7
   1473c:	strh	r0, [r8, #56]	; 0x38
   14740:	ldr	r0, [r9]
   14744:	orr	r0, r0, #8192	; 0x2000
   14748:	str	r0, [r9]
   1474c:	mov	r0, r5
   14750:	bl	133b0 <__assert_fail@plt+0x1b20>
   14754:	mov	r5, #0
   14758:	mov	r0, r5
   1475c:	sub	sp, fp, #28
   14760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14764:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14768:	mov	r0, r8
   1476c:	bl	14b64 <__assert_fail@plt+0x32d4>
   14770:	movw	r1, #26984	; 0x6968
   14774:	cmp	r0, r1
   14778:	ble	147a4 <__assert_fail@plt+0x2f14>
   1477c:	movw	r1, #26985	; 0x6969
   14780:	cmp	r0, r1
   14784:	movwne	r1, #16719	; 0x414f
   14788:	movtne	r1, #21318	; 0x5346
   1478c:	cmpne	r0, r1
   14790:	beq	13fec <__assert_fail@plt+0x275c>
   14794:	movw	r1, #40864	; 0x9fa0
   14798:	cmp	r0, r1
   1479c:	beq	13fec <__assert_fail@plt+0x275c>
   147a0:	b	13fb4 <__assert_fail@plt+0x2724>
   147a4:	movw	r1, #19778	; 0x4d42
   147a8:	movt	r1, #65363	; 0xff53
   147ac:	cmp	r0, r1
   147b0:	cmpne	r0, #0
   147b4:	beq	13fec <__assert_fail@plt+0x275c>
   147b8:	b	13fb4 <__assert_fail@plt+0x2724>
   147bc:	push	{r4, r5, fp, lr}
   147c0:	add	fp, sp, #8
   147c4:	mov	r4, r0
   147c8:	ldr	r0, [r0, #48]	; 0x30
   147cc:	mov	r5, #0
   147d0:	tst	r0, #4
   147d4:	bne	14808 <__assert_fail@plt+0x2f78>
   147d8:	tst	r0, #512	; 0x200
   147dc:	bne	147f8 <__assert_fail@plt+0x2f68>
   147e0:	ldr	r0, [r4, #28]
   147e4:	bl	117e8 <fchdir@plt>
   147e8:	mov	r5, r0
   147ec:	cmp	r0, #0
   147f0:	movwne	r5, #1
   147f4:	b	14808 <__assert_fail@plt+0x2f78>
   147f8:	mov	r0, r4
   147fc:	mvn	r1, #99	; 0x63
   14800:	mov	r2, #1
   14804:	bl	148cc <__assert_fail@plt+0x303c>
   14808:	add	r0, r4, #60	; 0x3c
   1480c:	bl	13514 <__assert_fail@plt+0x1c84>
   14810:	mov	r0, r5
   14814:	pop	{r4, r5, fp, pc}
   14818:	push	{r4, r5, r6, r7, fp, lr}
   1481c:	add	fp, sp, #16
   14820:	mov	r6, r0
   14824:	ldrh	r0, [r0, #48]	; 0x30
   14828:	mov	r4, r1
   1482c:	movw	r1, #258	; 0x102
   14830:	tst	r0, r1
   14834:	beq	148a4 <__assert_fail@plt+0x3014>
   14838:	mov	r0, #24
   1483c:	bl	18b28 <__assert_fail@plt+0x7298>
   14840:	mov	r5, #0
   14844:	cmp	r0, #0
   14848:	beq	148c4 <__assert_fail@plt+0x3034>
   1484c:	mov	r7, r0
   14850:	ldrd	r0, [r4, #64]	; 0x40
   14854:	add	r2, r7, #8
   14858:	stm	r7, {r0, r1}
   1485c:	ldrd	r0, [r4, #160]	; 0xa0
   14860:	stm	r2, {r0, r1, r4}
   14864:	mov	r1, r7
   14868:	ldr	r0, [r6, #56]	; 0x38
   1486c:	bl	15ac8 <__assert_fail@plt+0x4238>
   14870:	cmp	r0, r7
   14874:	beq	1489c <__assert_fail@plt+0x300c>
   14878:	mov	r6, r0
   1487c:	mov	r0, r7
   14880:	bl	19150 <__assert_fail@plt+0x78c0>
   14884:	cmp	r6, #0
   14888:	beq	148c4 <__assert_fail@plt+0x3034>
   1488c:	ldr	r0, [r6, #16]
   14890:	mov	r1, #2
   14894:	strh	r1, [r4, #56]	; 0x38
   14898:	str	r0, [r4]
   1489c:	mov	r5, #1
   148a0:	b	148c4 <__assert_fail@plt+0x3034>
   148a4:	ldr	r0, [r6, #56]	; 0x38
   148a8:	add	r1, r4, #64	; 0x40
   148ac:	bl	18d68 <__assert_fail@plt+0x74d8>
   148b0:	cmp	r0, #0
   148b4:	mov	r5, #1
   148b8:	movne	r0, #2
   148bc:	strhne	r0, [r4, #56]	; 0x38
   148c0:	strne	r4, [r4]
   148c4:	mov	r0, r5
   148c8:	pop	{r4, r5, r6, r7, fp, pc}
   148cc:	push	{r4, r5, fp, lr}
   148d0:	add	fp, sp, #8
   148d4:	mov	r4, r1
   148d8:	ldr	r1, [r0, #32]
   148dc:	mov	r5, r0
   148e0:	cmp	r1, r4
   148e4:	bne	148f0 <__assert_fail@plt+0x3060>
   148e8:	cmn	r1, #100	; 0x64
   148ec:	bne	14930 <__assert_fail@plt+0x30a0>
   148f0:	cmp	r2, #0
   148f4:	beq	1490c <__assert_fail@plt+0x307c>
   148f8:	add	r0, r5, #60	; 0x3c
   148fc:	bl	15c54 <__assert_fail@plt+0x43c4>
   14900:	cmp	r0, #0
   14904:	bge	14924 <__assert_fail@plt+0x3094>
   14908:	b	14928 <__assert_fail@plt+0x3098>
   1490c:	cmp	r1, #0
   14910:	blt	14928 <__assert_fail@plt+0x3098>
   14914:	ldr	r0, [r5, #48]	; 0x30
   14918:	ands	r0, r0, #4
   1491c:	bne	14928 <__assert_fail@plt+0x3098>
   14920:	mov	r0, r1
   14924:	bl	11860 <close@plt>
   14928:	str	r4, [r5, #32]
   1492c:	pop	{r4, r5, fp, pc}
   14930:	bl	11854 <abort@plt>
   14934:	cmp	r2, #5
   14938:	movcc	r0, #0
   1493c:	strhcc	r2, [r1, #60]	; 0x3c
   14940:	bxcc	lr
   14944:	push	{fp, lr}
   14948:	mov	fp, sp
   1494c:	bl	11704 <__errno_location@plt>
   14950:	mov	r1, #22
   14954:	str	r1, [r0]
   14958:	mov	r0, #1
   1495c:	pop	{fp, pc}
   14960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14964:	add	fp, sp, #28
   14968:	sub	sp, sp, #4
   1496c:	mov	r5, r0
   14970:	orr	r0, r1, #4096	; 0x1000
   14974:	cmp	r0, #4096	; 0x1000
   14978:	bne	149b8 <__assert_fail@plt+0x3128>
   1497c:	ldr	r6, [r5]
   14980:	mov	r7, r1
   14984:	bl	11704 <__errno_location@plt>
   14988:	mov	r4, #0
   1498c:	mov	sl, r0
   14990:	str	r4, [r0]
   14994:	ldrb	r0, [r5, #49]	; 0x31
   14998:	tst	r0, #32
   1499c:	bne	149c8 <__assert_fail@plt+0x3138>
   149a0:	ldrh	r0, [r6, #56]	; 0x38
   149a4:	cmp	r0, #1
   149a8:	beq	149d4 <__assert_fail@plt+0x3144>
   149ac:	cmp	r0, #9
   149b0:	ldreq	r4, [r6, #8]
   149b4:	b	149c8 <__assert_fail@plt+0x3138>
   149b8:	bl	11704 <__errno_location@plt>
   149bc:	mov	r1, #22
   149c0:	mov	r4, #0
   149c4:	str	r1, [r0]
   149c8:	mov	r0, r4
   149cc:	sub	sp, fp, #28
   149d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d4:	ldr	r0, [r5, #4]
   149d8:	cmp	r0, #0
   149dc:	blne	133b0 <__assert_fail@plt+0x1b20>
   149e0:	cmp	r7, #4096	; 0x1000
   149e4:	mov	r9, #1
   149e8:	ldreq	r0, [r5, #48]	; 0x30
   149ec:	moveq	r9, #2
   149f0:	orreq	r0, r0, #4096	; 0x1000
   149f4:	streq	r0, [r5, #48]	; 0x30
   149f8:	ldr	r0, [r6, #48]	; 0x30
   149fc:	cmp	r0, #0
   14a00:	bne	14a7c <__assert_fail@plt+0x31ec>
   14a04:	ldr	r0, [r6, #24]
   14a08:	ldrb	r0, [r0]
   14a0c:	cmp	r0, #47	; 0x2f
   14a10:	beq	14a7c <__assert_fail@plt+0x31ec>
   14a14:	ldrb	r0, [r5, #48]	; 0x30
   14a18:	tst	r0, #4
   14a1c:	bne	14a7c <__assert_fail@plt+0x31ec>
   14a20:	movw	r1, #43091	; 0xa853
   14a24:	mov	r0, r5
   14a28:	movt	r1, #1
   14a2c:	bl	13380 <__assert_fail@plt+0x1af0>
   14a30:	cmn	r0, #1
   14a34:	ble	14a94 <__assert_fail@plt+0x3204>
   14a38:	mov	r8, r0
   14a3c:	mov	r0, r5
   14a40:	mov	r1, r9
   14a44:	bl	13e28 <__assert_fail@plt+0x2598>
   14a48:	str	r0, [r5, #4]
   14a4c:	ldrb	r0, [r5, #49]	; 0x31
   14a50:	tst	r0, #2
   14a54:	bne	14aa0 <__assert_fail@plt+0x3210>
   14a58:	mov	r0, r8
   14a5c:	bl	117e8 <fchdir@plt>
   14a60:	cmp	r0, #0
   14a64:	beq	14ab4 <__assert_fail@plt+0x3224>
   14a68:	ldr	r5, [sl]
   14a6c:	mov	r0, r8
   14a70:	bl	11860 <close@plt>
   14a74:	str	r5, [sl]
   14a78:	b	149c8 <__assert_fail@plt+0x3138>
   14a7c:	mov	r0, r5
   14a80:	mov	r1, r9
   14a84:	bl	13e28 <__assert_fail@plt+0x2598>
   14a88:	mov	r4, r0
   14a8c:	str	r0, [r5, #4]
   14a90:	b	149c8 <__assert_fail@plt+0x3138>
   14a94:	mov	r4, #0
   14a98:	str	r4, [r5, #4]
   14a9c:	b	149c8 <__assert_fail@plt+0x3138>
   14aa0:	mov	r0, r5
   14aa4:	mov	r1, r8
   14aa8:	mov	r2, #1
   14aac:	bl	148cc <__assert_fail@plt+0x303c>
   14ab0:	b	14abc <__assert_fail@plt+0x322c>
   14ab4:	mov	r0, r8
   14ab8:	bl	11860 <close@plt>
   14abc:	ldr	r4, [r5, #4]
   14ac0:	b	149c8 <__assert_fail@plt+0x3138>
   14ac4:	push	{fp, lr}
   14ac8:	mov	fp, sp
   14acc:	mov	r2, r1
   14ad0:	ldrd	r0, [r0, #8]
   14ad4:	mov	r3, #0
   14ad8:	bl	19828 <__assert_fail@plt+0x7f98>
   14adc:	mov	r0, r2
   14ae0:	pop	{fp, pc}
   14ae4:	push	{r4, r5, fp, lr}
   14ae8:	add	fp, sp, #8
   14aec:	ldrd	r2, [r1, #8]
   14af0:	ldrd	r4, [r0, #8]
   14af4:	eor	r3, r5, r3
   14af8:	eor	r2, r4, r2
   14afc:	orrs	r2, r2, r3
   14b00:	mov	r2, #0
   14b04:	bne	14b24 <__assert_fail@plt+0x3294>
   14b08:	ldrd	r2, [r1]
   14b0c:	ldrd	r0, [r0]
   14b10:	eor	r1, r1, r3
   14b14:	eor	r0, r0, r2
   14b18:	orr	r0, r0, r1
   14b1c:	clz	r0, r0
   14b20:	lsr	r2, r0, #5
   14b24:	mov	r0, r2
   14b28:	pop	{r4, r5, fp, pc}
   14b2c:	push	{r4, r5, fp, lr}
   14b30:	add	fp, sp, #8
   14b34:	ldr	r0, [r0]
   14b38:	ldrd	r2, [r0, #160]	; 0xa0
   14b3c:	ldr	r0, [r1]
   14b40:	ldrd	r4, [r0, #160]	; 0xa0
   14b44:	mov	r0, #0
   14b48:	subs	r1, r4, r2
   14b4c:	sbcs	r1, r5, r3
   14b50:	movwcc	r0, #1
   14b54:	subs	r1, r2, r4
   14b58:	sbcs	r1, r3, r5
   14b5c:	subcc	r0, r0, #1
   14b60:	pop	{r4, r5, fp, pc}
   14b64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b68:	add	fp, sp, #24
   14b6c:	sub	sp, sp, #96	; 0x60
   14b70:	ldr	r7, [r0, #44]	; 0x2c
   14b74:	mov	r4, r0
   14b78:	mov	r5, #0
   14b7c:	ldrb	r0, [r7, #49]	; 0x31
   14b80:	tst	r0, #2
   14b84:	beq	14c78 <__assert_fail@plt+0x33e8>
   14b88:	ldr	r6, [r7, #52]	; 0x34
   14b8c:	mov	r9, r1
   14b90:	cmp	r6, #0
   14b94:	bne	14bd4 <__assert_fail@plt+0x3344>
   14b98:	movw	r0, #37200	; 0x9150
   14b9c:	movw	r2, #19588	; 0x4c84
   14ba0:	movw	r3, #19620	; 0x4ca4
   14ba4:	mov	r1, #0
   14ba8:	mov	r8, #0
   14bac:	movt	r0, #1
   14bb0:	movt	r2, #1
   14bb4:	movt	r3, #1
   14bb8:	str	r0, [sp]
   14bbc:	mov	r0, #13
   14bc0:	bl	15140 <__assert_fail@plt+0x38b0>
   14bc4:	mov	r6, r0
   14bc8:	cmp	r0, #0
   14bcc:	str	r0, [r7, #52]	; 0x34
   14bd0:	beq	14c04 <__assert_fail@plt+0x3374>
   14bd4:	ldrd	r0, [r4, #64]	; 0x40
   14bd8:	str	r1, [sp, #12]
   14bdc:	str	r0, [sp, #8]
   14be0:	add	r1, sp, #8
   14be4:	mov	r0, r6
   14be8:	bl	14ea0 <__assert_fail@plt+0x3610>
   14bec:	cmp	r0, #0
   14bf0:	beq	14bfc <__assert_fail@plt+0x336c>
   14bf4:	ldr	r5, [r0, #8]
   14bf8:	b	14c78 <__assert_fail@plt+0x33e8>
   14bfc:	mov	r8, #1
   14c00:	b	14c08 <__assert_fail@plt+0x3378>
   14c04:	mov	r6, #0
   14c08:	cmp	r9, #0
   14c0c:	blt	14c78 <__assert_fail@plt+0x33e8>
   14c10:	add	r1, sp, #8
   14c14:	mov	r0, r9
   14c18:	bl	114b8 <fstatfs64@plt>
   14c1c:	cmp	r0, #0
   14c20:	bne	14c78 <__assert_fail@plt+0x33e8>
   14c24:	cmp	r8, #0
   14c28:	beq	14c74 <__assert_fail@plt+0x33e4>
   14c2c:	mov	r0, #16
   14c30:	bl	18b28 <__assert_fail@plt+0x7298>
   14c34:	cmp	r0, #0
   14c38:	beq	14c74 <__assert_fail@plt+0x33e4>
   14c3c:	mov	r5, r0
   14c40:	ldrd	r0, [r4, #64]	; 0x40
   14c44:	ldr	r2, [sp, #8]
   14c48:	stm	r5, {r0, r1, r2}
   14c4c:	mov	r0, r6
   14c50:	mov	r1, r5
   14c54:	bl	15ac8 <__assert_fail@plt+0x4238>
   14c58:	cmp	r0, #0
   14c5c:	beq	14c6c <__assert_fail@plt+0x33dc>
   14c60:	cmp	r0, r5
   14c64:	beq	14c74 <__assert_fail@plt+0x33e4>
   14c68:	bl	11854 <abort@plt>
   14c6c:	mov	r0, r5
   14c70:	bl	19150 <__assert_fail@plt+0x78c0>
   14c74:	ldr	r5, [sp, #8]
   14c78:	mov	r0, r5
   14c7c:	sub	sp, fp, #24
   14c80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c84:	push	{fp, lr}
   14c88:	mov	fp, sp
   14c8c:	mov	r2, r1
   14c90:	ldrd	r0, [r0]
   14c94:	mov	r3, #0
   14c98:	bl	19828 <__assert_fail@plt+0x7f98>
   14c9c:	mov	r0, r2
   14ca0:	pop	{fp, pc}
   14ca4:	ldrd	r2, [r1]
   14ca8:	ldrd	r0, [r0]
   14cac:	eor	r1, r1, r3
   14cb0:	eor	r0, r0, r2
   14cb4:	orr	r0, r0, r1
   14cb8:	clz	r0, r0
   14cbc:	lsr	r0, r0, #5
   14cc0:	bx	lr
   14cc4:	andeq	r0, r0, r0
   14cc8:	ldr	r0, [r0, #8]
   14ccc:	bx	lr
   14cd0:	ldr	r0, [r0, #12]
   14cd4:	bx	lr
   14cd8:	ldr	r0, [r0, #16]
   14cdc:	bx	lr
   14ce0:	ldm	r0, {r2, ip}
   14ce4:	mov	r0, #0
   14ce8:	cmp	r2, ip
   14cec:	bxcs	lr
   14cf0:	mov	r0, #0
   14cf4:	ldr	r1, [r2]
   14cf8:	cmp	r1, #0
   14cfc:	beq	14d20 <__assert_fail@plt+0x3490>
   14d00:	mov	r3, #0
   14d04:	mov	r1, r2
   14d08:	ldr	r1, [r1, #4]
   14d0c:	add	r3, r3, #1
   14d10:	cmp	r1, #0
   14d14:	bne	14d08 <__assert_fail@plt+0x3478>
   14d18:	cmp	r3, r0
   14d1c:	movhi	r0, r3
   14d20:	add	r2, r2, #8
   14d24:	cmp	r2, ip
   14d28:	bcc	14cf4 <__assert_fail@plt+0x3464>
   14d2c:	bx	lr
   14d30:	push	{fp, lr}
   14d34:	mov	fp, sp
   14d38:	ldm	r0, {r3, ip}
   14d3c:	mov	lr, #0
   14d40:	mov	r1, #0
   14d44:	cmp	r3, ip
   14d48:	bcs	14d84 <__assert_fail@plt+0x34f4>
   14d4c:	mov	r1, #0
   14d50:	mov	lr, #0
   14d54:	ldr	r2, [r3]
   14d58:	cmp	r2, #0
   14d5c:	beq	14d78 <__assert_fail@plt+0x34e8>
   14d60:	mov	r2, r3
   14d64:	ldr	r2, [r2, #4]
   14d68:	add	r1, r1, #1
   14d6c:	cmp	r2, #0
   14d70:	bne	14d64 <__assert_fail@plt+0x34d4>
   14d74:	add	lr, lr, #1
   14d78:	add	r3, r3, #8
   14d7c:	cmp	r3, ip
   14d80:	bcc	14d54 <__assert_fail@plt+0x34c4>
   14d84:	ldr	r2, [r0, #12]
   14d88:	cmp	lr, r2
   14d8c:	bne	14da4 <__assert_fail@plt+0x3514>
   14d90:	ldr	r2, [r0, #16]
   14d94:	mov	r0, #1
   14d98:	cmp	r1, r2
   14d9c:	movne	r0, #0
   14da0:	pop	{fp, pc}
   14da4:	mov	r0, #0
   14da8:	pop	{fp, pc}
   14dac:	nop	{0}
   14db0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14db4:	add	fp, sp, #24
   14db8:	sub	sp, sp, #8
   14dbc:	ldr	r6, [r0]
   14dc0:	ldmib	r0, {r2, r7, r8}
   14dc4:	ldr	r3, [r0, #16]
   14dc8:	mov	r4, r1
   14dcc:	mov	r5, #0
   14dd0:	cmp	r6, r2
   14dd4:	bcs	14e14 <__assert_fail@plt+0x3584>
   14dd8:	mov	r5, #0
   14ddc:	ldr	r0, [r6]
   14de0:	cmp	r0, #0
   14de4:	beq	14e08 <__assert_fail@plt+0x3578>
   14de8:	mov	r0, #0
   14dec:	mov	r1, r6
   14df0:	ldr	r1, [r1, #4]
   14df4:	add	r0, r0, #1
   14df8:	cmp	r1, #0
   14dfc:	bne	14df0 <__assert_fail@plt+0x3560>
   14e00:	cmp	r0, r5
   14e04:	movhi	r5, r0
   14e08:	add	r6, r6, #8
   14e0c:	cmp	r6, r2
   14e10:	bcc	14ddc <__assert_fail@plt+0x354c>
   14e14:	movw	r2, #43152	; 0xa890
   14e18:	mov	r0, r4
   14e1c:	mov	r1, #1
   14e20:	movt	r2, #1
   14e24:	bl	1174c <__fprintf_chk@plt>
   14e28:	movw	r2, #43176	; 0xa8a8
   14e2c:	mov	r0, r4
   14e30:	mov	r1, #1
   14e34:	mov	r3, r7
   14e38:	movt	r2, #1
   14e3c:	bl	1174c <__fprintf_chk@plt>
   14e40:	vldr	d16, [pc, #80]	; 14e98 <__assert_fail@plt+0x3608>
   14e44:	vmov	s0, r8
   14e48:	movw	r2, #43200	; 0xa8c0
   14e4c:	mov	r0, r4
   14e50:	mov	r1, #1
   14e54:	mov	r3, r8
   14e58:	vcvt.f64.u32	d17, s0
   14e5c:	vmov	s0, r7
   14e60:	movt	r2, #1
   14e64:	vcvt.f64.u32	d18, s0
   14e68:	vmul.f64	d16, d17, d16
   14e6c:	vdiv.f64	d16, d16, d18
   14e70:	vstr	d16, [sp]
   14e74:	bl	1174c <__fprintf_chk@plt>
   14e78:	movw	r2, #43233	; 0xa8e1
   14e7c:	mov	r0, r4
   14e80:	mov	r1, #1
   14e84:	mov	r3, r5
   14e88:	movt	r2, #1
   14e8c:	sub	sp, fp, #24
   14e90:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e94:	b	1174c <__fprintf_chk@plt>
   14e98:	andeq	r0, r0, r0
   14e9c:	subsmi	r0, r9, r0
   14ea0:	push	{r4, r5, r6, r7, fp, lr}
   14ea4:	add	fp, sp, #16
   14ea8:	mov	r4, r1
   14eac:	ldr	r1, [r0, #8]
   14eb0:	ldr	r2, [r0, #24]
   14eb4:	mov	r5, r0
   14eb8:	mov	r0, r4
   14ebc:	blx	r2
   14ec0:	ldr	r1, [r5, #8]
   14ec4:	cmp	r0, r1
   14ec8:	bcs	14f28 <__assert_fail@plt+0x3698>
   14ecc:	ldr	r7, [r5]
   14ed0:	mov	r6, #0
   14ed4:	ldr	r1, [r7, r0, lsl #3]!
   14ed8:	cmp	r1, #0
   14edc:	cmpne	r7, #0
   14ee0:	bne	14f10 <__assert_fail@plt+0x3680>
   14ee4:	mov	r0, r6
   14ee8:	pop	{r4, r5, r6, r7, fp, pc}
   14eec:	ldr	r2, [r5, #28]
   14ef0:	mov	r0, r4
   14ef4:	blx	r2
   14ef8:	cmp	r0, #0
   14efc:	bne	14f20 <__assert_fail@plt+0x3690>
   14f00:	ldr	r7, [r7, #4]
   14f04:	cmp	r7, #0
   14f08:	beq	14ee4 <__assert_fail@plt+0x3654>
   14f0c:	ldr	r1, [r7]
   14f10:	cmp	r1, r4
   14f14:	bne	14eec <__assert_fail@plt+0x365c>
   14f18:	mov	r6, r4
   14f1c:	b	14ee4 <__assert_fail@plt+0x3654>
   14f20:	ldr	r6, [r7]
   14f24:	b	14ee4 <__assert_fail@plt+0x3654>
   14f28:	bl	11854 <abort@plt>
   14f2c:	ldr	r1, [r0, #16]
   14f30:	cmp	r1, #0
   14f34:	moveq	r0, #0
   14f38:	bxeq	lr
   14f3c:	ldm	r0, {r1, r2}
   14f40:	b	14f50 <__assert_fail@plt+0x36c0>
   14f44:	ldr	r0, [r1], #8
   14f48:	cmp	r0, #0
   14f4c:	bxne	lr
   14f50:	cmp	r1, r2
   14f54:	bcc	14f44 <__assert_fail@plt+0x36b4>
   14f58:	push	{fp, lr}
   14f5c:	mov	fp, sp
   14f60:	bl	11854 <abort@plt>
   14f64:	push	{r4, r5, fp, lr}
   14f68:	add	fp, sp, #8
   14f6c:	mov	r5, r1
   14f70:	ldr	r1, [r0, #8]
   14f74:	ldr	r2, [r0, #24]
   14f78:	mov	r4, r0
   14f7c:	mov	r0, r5
   14f80:	blx	r2
   14f84:	ldr	r1, [r4, #8]
   14f88:	cmp	r0, r1
   14f8c:	bcs	14fe8 <__assert_fail@plt+0x3758>
   14f90:	ldr	r1, [r4]
   14f94:	add	r2, r1, r0, lsl #3
   14f98:	ldr	r3, [r2]
   14f9c:	ldr	r2, [r2, #4]
   14fa0:	cmp	r3, r5
   14fa4:	beq	14fb4 <__assert_fail@plt+0x3724>
   14fa8:	cmp	r2, #0
   14fac:	bne	14f98 <__assert_fail@plt+0x3708>
   14fb0:	b	14fc0 <__assert_fail@plt+0x3730>
   14fb4:	cmp	r2, #0
   14fb8:	ldrne	r0, [r2]
   14fbc:	popne	{r4, r5, fp, pc}
   14fc0:	ldr	r2, [r4, #4]
   14fc4:	add	r0, r1, r0, lsl #3
   14fc8:	add	r1, r0, #8
   14fcc:	cmp	r1, r2
   14fd0:	movcs	r0, #0
   14fd4:	popcs	{r4, r5, fp, pc}
   14fd8:	ldr	r0, [r1], #8
   14fdc:	cmp	r0, #0
   14fe0:	popne	{r4, r5, fp, pc}
   14fe4:	b	14fcc <__assert_fail@plt+0x373c>
   14fe8:	bl	11854 <abort@plt>
   14fec:	push	{r4, r5, fp, lr}
   14ff0:	add	fp, sp, #8
   14ff4:	ldm	r0, {r5, lr}
   14ff8:	mov	ip, r0
   14ffc:	mov	r0, #0
   15000:	cmp	r5, lr
   15004:	bcs	15050 <__assert_fail@plt+0x37c0>
   15008:	mov	r0, #0
   1500c:	ldr	r3, [r5]
   15010:	cmp	r3, #0
   15014:	cmpne	r5, #0
   15018:	beq	15044 <__assert_fail@plt+0x37b4>
   1501c:	mov	r3, r5
   15020:	cmp	r0, r2
   15024:	popcs	{r4, r5, fp, pc}
   15028:	ldr	r4, [r3]
   1502c:	str	r4, [r1, r0, lsl #2]
   15030:	add	r0, r0, #1
   15034:	ldr	r3, [r3, #4]
   15038:	cmp	r3, #0
   1503c:	bne	15020 <__assert_fail@plt+0x3790>
   15040:	ldr	lr, [ip, #4]
   15044:	add	r5, r5, #8
   15048:	cmp	r5, lr
   1504c:	bcc	1500c <__assert_fail@plt+0x377c>
   15050:	pop	{r4, r5, fp, pc}
   15054:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15058:	add	fp, sp, #24
   1505c:	mov	r5, r1
   15060:	ldr	r4, [r0]
   15064:	ldr	r1, [r0, #4]
   15068:	mov	r6, #0
   1506c:	cmp	r4, r1
   15070:	bcs	150e4 <__assert_fail@plt+0x3854>
   15074:	mov	r9, r2
   15078:	mov	r8, r0
   1507c:	mov	r6, #0
   15080:	b	150c8 <__assert_fail@plt+0x3838>
   15084:	mov	r1, r9
   15088:	blx	r5
   1508c:	cmp	r0, #0
   15090:	beq	150e4 <__assert_fail@plt+0x3854>
   15094:	mov	r7, r4
   15098:	ldr	r7, [r7, #4]
   1509c:	add	r6, r6, #1
   150a0:	cmp	r7, #0
   150a4:	beq	150c0 <__assert_fail@plt+0x3830>
   150a8:	ldr	r0, [r7]
   150ac:	mov	r1, r9
   150b0:	blx	r5
   150b4:	cmp	r0, #0
   150b8:	bne	15098 <__assert_fail@plt+0x3808>
   150bc:	b	150e4 <__assert_fail@plt+0x3854>
   150c0:	ldr	r1, [r8, #4]
   150c4:	b	150d8 <__assert_fail@plt+0x3848>
   150c8:	ldr	r0, [r4]
   150cc:	cmp	r0, #0
   150d0:	cmpne	r4, #0
   150d4:	bne	15084 <__assert_fail@plt+0x37f4>
   150d8:	add	r4, r4, #8
   150dc:	cmp	r4, r1
   150e0:	bcc	150c8 <__assert_fail@plt+0x3838>
   150e4:	mov	r0, r6
   150e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   150ec:	ldrb	r2, [r0]
   150f0:	cmp	r2, #0
   150f4:	moveq	r0, #0
   150f8:	bxeq	lr
   150fc:	add	r3, r0, #1
   15100:	mov	r0, #0
   15104:	rsb	r0, r0, r0, lsl #5
   15108:	uxtab	r0, r0, r2
   1510c:	udiv	r2, r0, r1
   15110:	mls	r0, r2, r1, r0
   15114:	ldrb	r2, [r3], #1
   15118:	cmp	r2, #0
   1511c:	bne	15104 <__assert_fail@plt+0x3874>
   15120:	bx	lr
   15124:	movw	r1, #43264	; 0xa900
   15128:	movt	r1, #1
   1512c:	vld1.32	{d16-d17}, [r1]!
   15130:	ldr	r1, [r1]
   15134:	vst1.32	{d16-d17}, [r0]!
   15138:	str	r1, [r0]
   1513c:	bx	lr
   15140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15144:	add	fp, sp, #28
   15148:	sub	sp, sp, #4
   1514c:	movw	sl, #21044	; 0x5234
   15150:	movw	r5, #21024	; 0x5220
   15154:	cmp	r3, #0
   15158:	mov	r8, r0
   1515c:	mov	r0, #40	; 0x28
   15160:	mov	r7, r1
   15164:	movt	sl, #1
   15168:	movt	r5, #1
   1516c:	movne	sl, r3
   15170:	cmp	r2, #0
   15174:	movne	r5, r2
   15178:	bl	18b28 <__assert_fail@plt+0x7298>
   1517c:	mov	r9, #0
   15180:	cmp	r0, #0
   15184:	beq	15214 <__assert_fail@plt+0x3984>
   15188:	movw	r6, #43264	; 0xa900
   1518c:	cmp	r7, #0
   15190:	mov	r4, r0
   15194:	movt	r6, #1
   15198:	movne	r6, r7
   1519c:	str	r6, [r0, #20]
   151a0:	bl	15244 <__assert_fail@plt+0x39b4>
   151a4:	cmp	r0, #0
   151a8:	beq	1520c <__assert_fail@plt+0x397c>
   151ac:	mov	r0, r8
   151b0:	mov	r1, r6
   151b4:	bl	152f0 <__assert_fail@plt+0x3a60>
   151b8:	cmp	r0, #0
   151bc:	str	r0, [r4, #8]
   151c0:	beq	1520c <__assert_fail@plt+0x397c>
   151c4:	mov	r1, #8
   151c8:	bl	18ad4 <__assert_fail@plt+0x7244>
   151cc:	cmp	r0, #0
   151d0:	str	r0, [r4]
   151d4:	beq	1520c <__assert_fail@plt+0x397c>
   151d8:	ldr	r1, [fp, #8]
   151dc:	mov	r2, #0
   151e0:	mov	r9, r4
   151e4:	str	r2, [r4, #12]
   151e8:	str	r2, [r4, #16]
   151ec:	str	r5, [r4, #24]
   151f0:	str	sl, [r4, #28]
   151f4:	str	r1, [r4, #32]
   151f8:	str	r2, [r4, #36]	; 0x24
   151fc:	ldr	r1, [r4, #8]
   15200:	add	r0, r0, r1, lsl #3
   15204:	str	r0, [r4, #4]
   15208:	b	15214 <__assert_fail@plt+0x3984>
   1520c:	mov	r0, r4
   15210:	bl	19150 <__assert_fail@plt+0x78c0>
   15214:	mov	r0, r9
   15218:	sub	sp, fp, #28
   1521c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15220:	ror	r2, r0, #3
   15224:	udiv	r2, r2, r1
   15228:	mul	r1, r2, r1
   1522c:	rsb	r0, r1, r0, ror #3
   15230:	bx	lr
   15234:	sub	r0, r0, r1
   15238:	clz	r0, r0
   1523c:	lsr	r0, r0, #5
   15240:	bx	lr
   15244:	ldr	r3, [r0, #20]
   15248:	movw	r2, #43264	; 0xa900
   1524c:	mov	r1, r0
   15250:	mov	r0, #1
   15254:	movt	r2, #1
   15258:	cmp	r3, r2
   1525c:	beq	152e0 <__assert_fail@plt+0x3a50>
   15260:	vldr	s2, [pc, #124]	; 152e4 <__assert_fail@plt+0x3a54>
   15264:	vldr	s0, [r3, #8]
   15268:	vcmpe.f32	s0, s2
   1526c:	vmrs	APSR_nzcv, fpscr
   15270:	ble	152d8 <__assert_fail@plt+0x3a48>
   15274:	vldr	s4, [pc, #108]	; 152e8 <__assert_fail@plt+0x3a58>
   15278:	vcmpe.f32	s0, s4
   1527c:	vmrs	APSR_nzcv, fpscr
   15280:	bpl	152d8 <__assert_fail@plt+0x3a48>
   15284:	vldr	s4, [pc, #96]	; 152ec <__assert_fail@plt+0x3a5c>
   15288:	vldr	s6, [r3, #12]
   1528c:	vcmpe.f32	s6, s4
   15290:	vmrs	APSR_nzcv, fpscr
   15294:	ble	152d8 <__assert_fail@plt+0x3a48>
   15298:	vldr	s4, [r3]
   1529c:	vcmpe.f32	s4, #0.0
   152a0:	vmrs	APSR_nzcv, fpscr
   152a4:	blt	152d8 <__assert_fail@plt+0x3a48>
   152a8:	vadd.f32	s2, s4, s2
   152ac:	vcmpe.f32	s2, s0
   152b0:	vmrs	APSR_nzcv, fpscr
   152b4:	bpl	152d8 <__assert_fail@plt+0x3a48>
   152b8:	vldr	s0, [r3, #4]
   152bc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   152c0:	vcmpe.f32	s0, s4
   152c4:	vmrs	APSR_nzcv, fpscr
   152c8:	bhi	152d8 <__assert_fail@plt+0x3a48>
   152cc:	vcmpe.f32	s2, s0
   152d0:	vmrs	APSR_nzcv, fpscr
   152d4:	bxmi	lr
   152d8:	mov	r0, #0
   152dc:	str	r2, [r1, #20]
   152e0:	bx	lr
   152e4:	stclcc	12, cr12, [ip, #820]	; 0x334
   152e8:	svccc	0x00666666
   152ec:	svccc	0x008ccccd
   152f0:	ldrb	r2, [r1, #16]
   152f4:	cmp	r2, #0
   152f8:	bne	15328 <__assert_fail@plt+0x3a98>
   152fc:	vldr	s0, [r1, #8]
   15300:	vldr	s4, [pc, #160]	; 153a8 <__assert_fail@plt+0x3b18>
   15304:	vmov	s2, r0
   15308:	mov	r0, #0
   1530c:	vcvt.f32.u32	s2, s2
   15310:	vdiv.f32	s2, s2, s0
   15314:	vcmpe.f32	s2, s4
   15318:	vcvt.u32.f32	s0, s2
   1531c:	vmrs	APSR_nzcv, fpscr
   15320:	bxge	lr
   15324:	vmov	r0, s0
   15328:	cmp	r0, #10
   1532c:	movls	r0, #10
   15330:	orr	r0, r0, #1
   15334:	b	1538c <__assert_fail@plt+0x3afc>
   15338:	mov	r1, #3
   1533c:	cmp	r0, #10
   15340:	bcc	15378 <__assert_fail@plt+0x3ae8>
   15344:	mov	r1, #3
   15348:	mov	ip, #9
   1534c:	mov	r2, #12
   15350:	udiv	r3, r0, r1
   15354:	mls	r3, r3, r1, r0
   15358:	cmp	r3, #0
   1535c:	beq	15378 <__assert_fail@plt+0x3ae8>
   15360:	add	r3, ip, r2
   15364:	add	r2, r2, #8
   15368:	add	r1, r1, #2
   1536c:	add	ip, r3, #4
   15370:	cmp	ip, r0
   15374:	bcc	15350 <__assert_fail@plt+0x3ac0>
   15378:	udiv	r2, r0, r1
   1537c:	mls	r1, r2, r1, r0
   15380:	cmp	r1, #0
   15384:	bne	1539c <__assert_fail@plt+0x3b0c>
   15388:	add	r0, r0, #2
   1538c:	cmn	r0, #1
   15390:	bne	15338 <__assert_fail@plt+0x3aa8>
   15394:	mov	r0, #0
   15398:	bx	lr
   1539c:	cmp	r0, #536870912	; 0x20000000
   153a0:	movcs	r0, #0
   153a4:	bx	lr
   153a8:	svcmi	0x00800000
   153ac:	push	{r4, r5, r6, r7, fp, lr}
   153b0:	add	fp, sp, #16
   153b4:	mov	r4, r0
   153b8:	ldr	r5, [r0]
   153bc:	ldr	r0, [r0, #4]
   153c0:	cmp	r5, r0
   153c4:	bcs	1545c <__assert_fail@plt+0x3bcc>
   153c8:	mov	r6, #0
   153cc:	ldr	r1, [r5]
   153d0:	cmp	r1, #0
   153d4:	beq	15450 <__assert_fail@plt+0x3bc0>
   153d8:	ldr	r1, [r4, #32]
   153dc:	ldr	r7, [r5, #4]
   153e0:	cmp	r1, #0
   153e4:	mov	r0, r1
   153e8:	movwne	r0, #1
   153ec:	cmp	r7, #0
   153f0:	beq	15434 <__assert_fail@plt+0x3ba4>
   153f4:	tst	r0, #1
   153f8:	beq	15408 <__assert_fail@plt+0x3b78>
   153fc:	ldr	r0, [r7]
   15400:	blx	r1
   15404:	ldr	r1, [r4, #32]
   15408:	str	r6, [r7]
   1540c:	cmp	r1, #0
   15410:	ldr	r0, [r4, #36]	; 0x24
   15414:	ldr	r2, [r7, #4]
   15418:	str	r0, [r7, #4]
   1541c:	mov	r0, r1
   15420:	str	r7, [r4, #36]	; 0x24
   15424:	mov	r7, r2
   15428:	movwne	r0, #1
   1542c:	cmp	r2, #0
   15430:	bne	153f4 <__assert_fail@plt+0x3b64>
   15434:	cmp	r0, #0
   15438:	beq	15444 <__assert_fail@plt+0x3bb4>
   1543c:	ldr	r0, [r5]
   15440:	blx	r1
   15444:	str	r6, [r5]
   15448:	str	r6, [r5, #4]
   1544c:	ldr	r0, [r4, #4]
   15450:	add	r5, r5, #8
   15454:	cmp	r5, r0
   15458:	bcc	153cc <__assert_fail@plt+0x3b3c>
   1545c:	mov	r0, #0
   15460:	str	r0, [r4, #12]
   15464:	str	r0, [r4, #16]
   15468:	pop	{r4, r5, r6, r7, fp, pc}
   1546c:	push	{r4, r5, r6, sl, fp, lr}
   15470:	add	fp, sp, #16
   15474:	mov	r4, r0
   15478:	ldr	r0, [r0, #32]
   1547c:	cmp	r0, #0
   15480:	ldrne	r0, [r4, #16]
   15484:	cmpne	r0, #0
   15488:	beq	154e0 <__assert_fail@plt+0x3c50>
   1548c:	ldr	r5, [r4]
   15490:	ldr	r1, [r4, #4]
   15494:	b	154d8 <__assert_fail@plt+0x3c48>
   15498:	ldr	r0, [r5]
   1549c:	cmp	r0, #0
   154a0:	cmpne	r5, #0
   154a4:	beq	154d4 <__assert_fail@plt+0x3c44>
   154a8:	ldr	r1, [r4, #32]
   154ac:	blx	r1
   154b0:	ldr	r6, [r5, #4]
   154b4:	b	154c8 <__assert_fail@plt+0x3c38>
   154b8:	ldr	r1, [r4, #32]
   154bc:	ldr	r0, [r6]
   154c0:	blx	r1
   154c4:	ldr	r6, [r6, #4]
   154c8:	cmp	r6, #0
   154cc:	bne	154b8 <__assert_fail@plt+0x3c28>
   154d0:	ldr	r1, [r4, #4]
   154d4:	add	r5, r5, #8
   154d8:	cmp	r5, r1
   154dc:	bcc	15498 <__assert_fail@plt+0x3c08>
   154e0:	ldr	r5, [r4]
   154e4:	ldr	r1, [r4, #4]
   154e8:	b	15514 <__assert_fail@plt+0x3c84>
   154ec:	ldr	r0, [r5, #4]
   154f0:	cmp	r0, #0
   154f4:	beq	15510 <__assert_fail@plt+0x3c80>
   154f8:	ldr	r6, [r0, #4]
   154fc:	bl	19150 <__assert_fail@plt+0x78c0>
   15500:	cmp	r6, #0
   15504:	mov	r0, r6
   15508:	bne	154f8 <__assert_fail@plt+0x3c68>
   1550c:	ldr	r1, [r4, #4]
   15510:	add	r5, r5, #8
   15514:	cmp	r5, r1
   15518:	bcc	154ec <__assert_fail@plt+0x3c5c>
   1551c:	ldr	r0, [r4, #36]	; 0x24
   15520:	cmp	r0, #0
   15524:	beq	1553c <__assert_fail@plt+0x3cac>
   15528:	ldr	r5, [r0, #4]
   1552c:	bl	19150 <__assert_fail@plt+0x78c0>
   15530:	cmp	r5, #0
   15534:	mov	r0, r5
   15538:	bne	15528 <__assert_fail@plt+0x3c98>
   1553c:	ldr	r0, [r4]
   15540:	bl	19150 <__assert_fail@plt+0x78c0>
   15544:	mov	r0, r4
   15548:	pop	{r4, r5, r6, sl, fp, lr}
   1554c:	b	19150 <__assert_fail@plt+0x78c0>
   15550:	push	{r4, r5, r6, r7, fp, lr}
   15554:	add	fp, sp, #16
   15558:	sub	sp, sp, #40	; 0x28
   1555c:	mov	r7, r0
   15560:	mov	r2, r1
   15564:	mov	r4, r0
   15568:	ldr	r1, [r7, #20]!
   1556c:	mov	r0, r2
   15570:	bl	152f0 <__assert_fail@plt+0x3a60>
   15574:	mov	r5, #0
   15578:	cmp	r0, #0
   1557c:	beq	15610 <__assert_fail@plt+0x3d80>
   15580:	mov	r6, r0
   15584:	ldr	r0, [r4, #8]
   15588:	cmp	r6, r0
   1558c:	beq	1560c <__assert_fail@plt+0x3d7c>
   15590:	mov	r0, r6
   15594:	mov	r1, #8
   15598:	bl	18ad4 <__assert_fail@plt+0x7244>
   1559c:	cmp	r0, #0
   155a0:	str	r0, [sp]
   155a4:	beq	15610 <__assert_fail@plt+0x3d80>
   155a8:	mov	r1, #0
   155ac:	add	r0, r0, r6, lsl #3
   155b0:	str	r6, [sp, #8]
   155b4:	mov	r5, sp
   155b8:	mov	r2, #0
   155bc:	str	r1, [sp, #12]
   155c0:	str	r1, [sp, #16]
   155c4:	str	r0, [sp, #4]
   155c8:	add	r0, r5, #20
   155cc:	mov	r1, r4
   155d0:	vld1.32	{d16-d17}, [r7]
   155d4:	vst1.32	{d16-d17}, [r0]
   155d8:	ldr	r0, [r4, #36]	; 0x24
   155dc:	str	r0, [sp, #36]	; 0x24
   155e0:	mov	r0, r5
   155e4:	bl	15668 <__assert_fail@plt+0x3dd8>
   155e8:	cmp	r0, #0
   155ec:	beq	1561c <__assert_fail@plt+0x3d8c>
   155f0:	ldr	r0, [r4]
   155f4:	bl	19150 <__assert_fail@plt+0x78c0>
   155f8:	mov	r0, #36	; 0x24
   155fc:	vld1.32	{d16-d17}, [r5], r0
   15600:	vst1.32	{d16-d17}, [r4], r0
   15604:	ldr	r0, [r5]
   15608:	str	r0, [r4]
   1560c:	mov	r5, #1
   15610:	mov	r0, r5
   15614:	sub	sp, fp, #16
   15618:	pop	{r4, r5, r6, r7, fp, pc}
   1561c:	ldr	r0, [sp, #36]	; 0x24
   15620:	mov	r1, sp
   15624:	mov	r2, #1
   15628:	str	r0, [r4, #36]	; 0x24
   1562c:	mov	r0, r4
   15630:	bl	15668 <__assert_fail@plt+0x3dd8>
   15634:	cmp	r0, #0
   15638:	beq	15664 <__assert_fail@plt+0x3dd4>
   1563c:	mov	r1, sp
   15640:	mov	r0, r4
   15644:	mov	r2, #0
   15648:	mov	r5, #0
   1564c:	bl	15668 <__assert_fail@plt+0x3dd8>
   15650:	cmp	r0, #0
   15654:	beq	15664 <__assert_fail@plt+0x3dd4>
   15658:	ldr	r0, [sp]
   1565c:	bl	19150 <__assert_fail@plt+0x78c0>
   15660:	b	15610 <__assert_fail@plt+0x3d80>
   15664:	bl	11854 <abort@plt>
   15668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1566c:	add	fp, sp, #28
   15670:	sub	sp, sp, #12
   15674:	ldr	sl, [r1]
   15678:	str	r1, [sp, #8]
   1567c:	ldr	r1, [r1, #4]
   15680:	mov	r7, r0
   15684:	mov	r0, #1
   15688:	str	r2, [sp, #4]
   1568c:	cmp	sl, r1
   15690:	bcs	157ec <__assert_fail@plt+0x3f5c>
   15694:	add	r8, r7, #36	; 0x24
   15698:	mov	r9, #0
   1569c:	ldr	r4, [sl]
   156a0:	cmp	r4, #0
   156a4:	beq	157d4 <__assert_fail@plt+0x3f44>
   156a8:	ldr	r5, [sl, #4]
   156ac:	cmp	r5, #0
   156b0:	beq	15728 <__assert_fail@plt+0x3e98>
   156b4:	ldr	r1, [r7, #8]
   156b8:	ldr	r4, [r5]
   156bc:	ldr	r2, [r7, #24]
   156c0:	mov	r0, r4
   156c4:	blx	r2
   156c8:	ldr	r1, [r7, #8]
   156cc:	cmp	r0, r1
   156d0:	bcs	157fc <__assert_fail@plt+0x3f6c>
   156d4:	ldr	r3, [r7]
   156d8:	ldr	r2, [r5, #4]
   156dc:	ldr	r6, [r3, r0, lsl #3]
   156e0:	cmp	r6, #0
   156e4:	beq	156f4 <__assert_fail@plt+0x3e64>
   156e8:	add	r0, r3, r0, lsl #3
   156ec:	add	r0, r0, #4
   156f0:	b	1570c <__assert_fail@plt+0x3e7c>
   156f4:	str	r4, [r3, r0, lsl #3]
   156f8:	ldr	r0, [r7, #12]
   156fc:	add	r0, r0, #1
   15700:	str	r0, [r7, #12]
   15704:	mov	r0, r8
   15708:	str	r9, [r5]
   1570c:	ldr	r3, [r0]
   15710:	cmp	r2, #0
   15714:	str	r3, [r5, #4]
   15718:	str	r5, [r0]
   1571c:	mov	r5, r2
   15720:	bne	156b8 <__assert_fail@plt+0x3e28>
   15724:	ldr	r4, [sl]
   15728:	ldr	r0, [sp, #4]
   1572c:	str	r9, [sl, #4]
   15730:	cmp	r0, #0
   15734:	bne	157d4 <__assert_fail@plt+0x3f44>
   15738:	ldr	r1, [r7, #8]
   1573c:	ldr	r2, [r7, #24]
   15740:	mov	r0, r4
   15744:	blx	r2
   15748:	mov	r5, r0
   1574c:	ldr	r0, [r7, #8]
   15750:	cmp	r5, r0
   15754:	bcs	157fc <__assert_fail@plt+0x3f6c>
   15758:	ldr	r6, [r7]
   1575c:	ldr	r0, [r6, r5, lsl #3]
   15760:	cmp	r0, #0
   15764:	beq	15784 <__assert_fail@plt+0x3ef4>
   15768:	ldr	r0, [r8]
   1576c:	cmp	r0, #0
   15770:	beq	15798 <__assert_fail@plt+0x3f08>
   15774:	mov	r1, r0
   15778:	ldr	r2, [r1, #4]!
   1577c:	str	r2, [r8]
   15780:	b	157ac <__assert_fail@plt+0x3f1c>
   15784:	str	r4, [r6, r5, lsl #3]
   15788:	ldr	r0, [r7, #12]
   1578c:	add	r0, r0, #1
   15790:	str	r0, [r7, #12]
   15794:	b	157c0 <__assert_fail@plt+0x3f30>
   15798:	mov	r0, #8
   1579c:	bl	18b28 <__assert_fail@plt+0x7298>
   157a0:	cmp	r0, #0
   157a4:	beq	157f4 <__assert_fail@plt+0x3f64>
   157a8:	add	r1, r0, #4
   157ac:	str	r4, [r0]
   157b0:	add	r2, r6, r5, lsl #3
   157b4:	ldr	r3, [r2, #4]
   157b8:	str	r3, [r1]
   157bc:	str	r0, [r2, #4]
   157c0:	ldr	r1, [sp, #8]
   157c4:	str	r9, [sl]
   157c8:	ldr	r0, [r1, #12]
   157cc:	sub	r0, r0, #1
   157d0:	str	r0, [r1, #12]
   157d4:	ldr	r0, [sp, #8]
   157d8:	add	sl, sl, #8
   157dc:	ldr	r0, [r0, #4]
   157e0:	cmp	sl, r0
   157e4:	bcc	1569c <__assert_fail@plt+0x3e0c>
   157e8:	mov	r0, #1
   157ec:	sub	sp, fp, #28
   157f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f4:	mov	r0, #0
   157f8:	b	157ec <__assert_fail@plt+0x3f5c>
   157fc:	bl	11854 <abort@plt>
   15800:	push	{r4, r5, r6, r7, fp, lr}
   15804:	add	fp, sp, #16
   15808:	sub	sp, sp, #8
   1580c:	cmp	r1, #0
   15810:	beq	15990 <__assert_fail@plt+0x4100>
   15814:	mov	r7, r2
   15818:	add	r2, sp, #4
   1581c:	mov	r3, #0
   15820:	mov	r5, r1
   15824:	mov	r4, r0
   15828:	mov	r6, #0
   1582c:	bl	15998 <__assert_fail@plt+0x4108>
   15830:	cmp	r0, #0
   15834:	beq	15844 <__assert_fail@plt+0x3fb4>
   15838:	cmp	r7, #0
   1583c:	strne	r0, [r7]
   15840:	b	1597c <__assert_fail@plt+0x40ec>
   15844:	ldr	r0, [r4, #20]
   15848:	vldr	s0, [r4, #8]
   1584c:	vldr	s2, [r4, #12]
   15850:	vldr	s4, [r0, #8]
   15854:	vcvt.f32.u32	s0, s0
   15858:	vcvt.f32.u32	s2, s2
   1585c:	vmul.f32	s0, s4, s0
   15860:	vcmpe.f32	s0, s2
   15864:	vmrs	APSR_nzcv, fpscr
   15868:	bpl	158fc <__assert_fail@plt+0x406c>
   1586c:	mov	r0, r4
   15870:	bl	15244 <__assert_fail@plt+0x39b4>
   15874:	vldr	s0, [r4, #8]
   15878:	ldr	r0, [r4, #20]
   1587c:	vldr	s4, [r4, #12]
   15880:	vcvt.f32.u32	s2, s0
   15884:	vldr	s0, [r0, #8]
   15888:	vcvt.f32.u32	s4, s4
   1588c:	vmul.f32	s6, s0, s2
   15890:	vcmpe.f32	s6, s4
   15894:	vmrs	APSR_nzcv, fpscr
   15898:	bpl	158fc <__assert_fail@plt+0x406c>
   1589c:	vldr	s4, [r0, #12]
   158a0:	ldrb	r0, [r0, #16]
   158a4:	mvn	r6, #0
   158a8:	vmul.f32	s2, s4, s2
   158ac:	vldr	s4, [pc, #224]	; 15994 <__assert_fail@plt+0x4104>
   158b0:	cmp	r0, #0
   158b4:	vmul.f32	s0, s0, s2
   158b8:	vseleq.f32	s0, s0, s2
   158bc:	vcmpe.f32	s0, s4
   158c0:	vmrs	APSR_nzcv, fpscr
   158c4:	bge	1597c <__assert_fail@plt+0x40ec>
   158c8:	vcvt.u32.f32	s0, s0
   158cc:	mov	r0, r4
   158d0:	vmov	r1, s0
   158d4:	bl	15550 <__assert_fail@plt+0x3cc0>
   158d8:	cmp	r0, #0
   158dc:	beq	1597c <__assert_fail@plt+0x40ec>
   158e0:	add	r2, sp, #4
   158e4:	mov	r0, r4
   158e8:	mov	r1, r5
   158ec:	mov	r3, #0
   158f0:	bl	15998 <__assert_fail@plt+0x4108>
   158f4:	cmp	r0, #0
   158f8:	bne	15990 <__assert_fail@plt+0x4100>
   158fc:	ldr	r6, [sp, #4]
   15900:	ldr	r0, [r6]
   15904:	cmp	r0, #0
   15908:	beq	15928 <__assert_fail@plt+0x4098>
   1590c:	ldr	r0, [r4, #36]	; 0x24
   15910:	cmp	r0, #0
   15914:	beq	15948 <__assert_fail@plt+0x40b8>
   15918:	mov	r1, r0
   1591c:	ldr	r2, [r1, #4]!
   15920:	str	r2, [r4, #36]	; 0x24
   15924:	b	1595c <__assert_fail@plt+0x40cc>
   15928:	str	r5, [r6]
   1592c:	ldr	r0, [r4, #12]
   15930:	ldr	r1, [r4, #16]
   15934:	add	r0, r0, #1
   15938:	add	r1, r1, #1
   1593c:	str	r0, [r4, #12]
   15940:	str	r1, [r4, #16]
   15944:	b	15978 <__assert_fail@plt+0x40e8>
   15948:	mov	r0, #8
   1594c:	bl	18b28 <__assert_fail@plt+0x7298>
   15950:	cmp	r0, #0
   15954:	beq	15988 <__assert_fail@plt+0x40f8>
   15958:	add	r1, r0, #4
   1595c:	str	r5, [r0]
   15960:	ldr	r2, [r6, #4]
   15964:	str	r2, [r1]
   15968:	str	r0, [r6, #4]
   1596c:	ldr	r0, [r4, #16]
   15970:	add	r0, r0, #1
   15974:	str	r0, [r4, #16]
   15978:	mov	r6, #1
   1597c:	mov	r0, r6
   15980:	sub	sp, fp, #16
   15984:	pop	{r4, r5, r6, r7, fp, pc}
   15988:	mvn	r6, #0
   1598c:	b	1597c <__assert_fail@plt+0x40ec>
   15990:	bl	11854 <abort@plt>
   15994:	svcmi	0x00800000
   15998:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1599c:	add	fp, sp, #24
   159a0:	mov	r7, r2
   159a4:	mov	r4, r1
   159a8:	ldr	r1, [r0, #8]
   159ac:	ldr	r2, [r0, #24]
   159b0:	mov	r5, r0
   159b4:	mov	r8, r3
   159b8:	mov	r0, r4
   159bc:	blx	r2
   159c0:	ldr	r1, [r5, #8]
   159c4:	cmp	r0, r1
   159c8:	bcs	15ac4 <__assert_fail@plt+0x4234>
   159cc:	ldr	r1, [r5]
   159d0:	add	r6, r1, r0, lsl #3
   159d4:	str	r6, [r7]
   159d8:	ldr	r1, [r1, r0, lsl #3]
   159dc:	cmp	r1, #0
   159e0:	beq	15a78 <__assert_fail@plt+0x41e8>
   159e4:	cmp	r1, r4
   159e8:	beq	15a04 <__assert_fail@plt+0x4174>
   159ec:	ldr	r2, [r5, #28]
   159f0:	mov	r0, r4
   159f4:	blx	r2
   159f8:	cmp	r0, #0
   159fc:	beq	15a38 <__assert_fail@plt+0x41a8>
   15a00:	ldr	r4, [r6]
   15a04:	cmp	r8, #0
   15a08:	beq	15a7c <__assert_fail@plt+0x41ec>
   15a0c:	ldr	r0, [r6, #4]
   15a10:	cmp	r0, #0
   15a14:	beq	15a84 <__assert_fail@plt+0x41f4>
   15a18:	ldm	r0, {r1, r2}
   15a1c:	stm	r6, {r1, r2}
   15a20:	mov	r1, #0
   15a24:	str	r1, [r0]
   15a28:	ldr	r1, [r5, #36]	; 0x24
   15a2c:	str	r1, [r0, #4]
   15a30:	str	r0, [r5, #36]	; 0x24
   15a34:	b	15a7c <__assert_fail@plt+0x41ec>
   15a38:	ldr	r0, [r6, #4]!
   15a3c:	cmp	r0, #0
   15a40:	beq	15a78 <__assert_fail@plt+0x41e8>
   15a44:	ldr	r1, [r0]
   15a48:	cmp	r1, r4
   15a4c:	beq	15a90 <__assert_fail@plt+0x4200>
   15a50:	ldr	r2, [r5, #28]
   15a54:	mov	r0, r4
   15a58:	blx	r2
   15a5c:	ldr	r1, [r6]
   15a60:	cmp	r0, #0
   15a64:	bne	15a98 <__assert_fail@plt+0x4208>
   15a68:	ldr	r0, [r1, #4]!
   15a6c:	cmp	r0, #0
   15a70:	mov	r6, r1
   15a74:	bne	15a44 <__assert_fail@plt+0x41b4>
   15a78:	mov	r4, #0
   15a7c:	mov	r0, r4
   15a80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a84:	mov	r0, #0
   15a88:	str	r0, [r6]
   15a8c:	b	15a7c <__assert_fail@plt+0x41ec>
   15a90:	mov	r1, r0
   15a94:	b	15a9c <__assert_fail@plt+0x420c>
   15a98:	ldr	r4, [r1]
   15a9c:	cmp	r8, #0
   15aa0:	beq	15a7c <__assert_fail@plt+0x41ec>
   15aa4:	ldr	r0, [r1, #4]
   15aa8:	str	r0, [r6]
   15aac:	mov	r0, #0
   15ab0:	str	r0, [r1]
   15ab4:	ldr	r0, [r5, #36]	; 0x24
   15ab8:	str	r0, [r1, #4]
   15abc:	str	r1, [r5, #36]	; 0x24
   15ac0:	b	15a7c <__assert_fail@plt+0x41ec>
   15ac4:	bl	11854 <abort@plt>
   15ac8:	push	{r4, sl, fp, lr}
   15acc:	add	fp, sp, #8
   15ad0:	sub	sp, sp, #8
   15ad4:	add	r2, sp, #4
   15ad8:	mov	r4, r1
   15adc:	bl	15800 <__assert_fail@plt+0x3f70>
   15ae0:	cmn	r0, #1
   15ae4:	beq	15af8 <__assert_fail@plt+0x4268>
   15ae8:	ldr	r1, [sp, #4]
   15aec:	cmp	r0, #0
   15af0:	moveq	r4, r1
   15af4:	b	15afc <__assert_fail@plt+0x426c>
   15af8:	mov	r4, #0
   15afc:	mov	r0, r4
   15b00:	sub	sp, fp, #8
   15b04:	pop	{r4, sl, fp, pc}
   15b08:	push	{r4, r5, r6, sl, fp, lr}
   15b0c:	add	fp, sp, #16
   15b10:	sub	sp, sp, #8
   15b14:	add	r2, sp, #4
   15b18:	mov	r3, #1
   15b1c:	mov	r4, r0
   15b20:	bl	15998 <__assert_fail@plt+0x4108>
   15b24:	mov	r5, r0
   15b28:	cmp	r0, #0
   15b2c:	beq	15c08 <__assert_fail@plt+0x4378>
   15b30:	ldr	r0, [r4, #16]
   15b34:	sub	r0, r0, #1
   15b38:	str	r0, [r4, #16]
   15b3c:	ldr	r0, [sp, #4]
   15b40:	ldr	r0, [r0]
   15b44:	cmp	r0, #0
   15b48:	bne	15c08 <__assert_fail@plt+0x4378>
   15b4c:	ldr	r0, [r4, #12]
   15b50:	vldr	s0, [r4, #8]
   15b54:	sub	r0, r0, #1
   15b58:	str	r0, [r4, #12]
   15b5c:	vmov	s4, r0
   15b60:	ldr	r1, [r4, #20]
   15b64:	vldr	s2, [r1]
   15b68:	vcvt.f32.u32	s0, s0
   15b6c:	vcvt.f32.u32	s4, s4
   15b70:	vmul.f32	s0, s2, s0
   15b74:	vcmpe.f32	s0, s4
   15b78:	vmrs	APSR_nzcv, fpscr
   15b7c:	ble	15c08 <__assert_fail@plt+0x4378>
   15b80:	mov	r0, r4
   15b84:	bl	15244 <__assert_fail@plt+0x39b4>
   15b88:	vldr	s0, [r4, #8]
   15b8c:	ldr	r0, [r4, #20]
   15b90:	vldr	s2, [r4, #12]
   15b94:	vcvt.f32.u32	s0, s0
   15b98:	vldr	s4, [r0]
   15b9c:	vcvt.f32.u32	s2, s2
   15ba0:	vmul.f32	s4, s4, s0
   15ba4:	vcmpe.f32	s4, s2
   15ba8:	vmrs	APSR_nzcv, fpscr
   15bac:	ble	15c08 <__assert_fail@plt+0x4378>
   15bb0:	ldrb	r1, [r0, #16]
   15bb4:	vldr	s2, [r0, #4]
   15bb8:	cmp	r1, #0
   15bbc:	vmul.f32	s0, s2, s0
   15bc0:	vldreq	s2, [r0, #8]
   15bc4:	mov	r0, r4
   15bc8:	vmuleq.f32	s0, s0, s2
   15bcc:	vcvt.u32.f32	s0, s0
   15bd0:	vmov	r1, s0
   15bd4:	bl	15550 <__assert_fail@plt+0x3cc0>
   15bd8:	cmp	r0, #0
   15bdc:	bne	15c08 <__assert_fail@plt+0x4378>
   15be0:	ldr	r0, [r4, #36]	; 0x24
   15be4:	cmp	r0, #0
   15be8:	beq	15c00 <__assert_fail@plt+0x4370>
   15bec:	ldr	r6, [r0, #4]
   15bf0:	bl	19150 <__assert_fail@plt+0x78c0>
   15bf4:	cmp	r6, #0
   15bf8:	mov	r0, r6
   15bfc:	bne	15bec <__assert_fail@plt+0x435c>
   15c00:	mov	r0, #0
   15c04:	str	r0, [r4, #36]	; 0x24
   15c08:	mov	r0, r5
   15c0c:	sub	sp, fp, #16
   15c10:	pop	{r4, r5, r6, sl, fp, pc}
   15c14:	b	15b08 <__assert_fail@plt+0x4278>
   15c18:	mov	r3, #1
   15c1c:	mov	r2, #0
   15c20:	vdup.32	q8, r1
   15c24:	strb	r3, [r0, #28]
   15c28:	str	r2, [r0, #20]
   15c2c:	str	r2, [r0, #24]
   15c30:	add	r3, r0, r2
   15c34:	add	r2, r2, #16
   15c38:	cmp	r2, #16
   15c3c:	vst1.32	{d16-d17}, [r3]
   15c40:	bne	15c30 <__assert_fail@plt+0x43a0>
   15c44:	str	r1, [r0, #16]
   15c48:	bx	lr
   15c4c:	ldrb	r0, [r0, #28]
   15c50:	bx	lr
   15c54:	push	{fp, lr}
   15c58:	mov	fp, sp
   15c5c:	ldrb	r3, [r0, #28]
   15c60:	ldr	r2, [r0, #20]
   15c64:	eor	lr, r3, #1
   15c68:	add	r2, r2, lr
   15c6c:	and	r3, r2, #3
   15c70:	ldr	ip, [r0, r3, lsl #2]
   15c74:	str	r1, [r0, r3, lsl #2]
   15c78:	str	r3, [r0, #20]
   15c7c:	ldr	r1, [r0, #24]
   15c80:	cmp	r3, r1
   15c84:	addeq	r1, r2, lr
   15c88:	andeq	r1, r1, #3
   15c8c:	streq	r1, [r0, #24]
   15c90:	mov	r1, #0
   15c94:	strb	r1, [r0, #28]
   15c98:	mov	r0, ip
   15c9c:	pop	{fp, pc}
   15ca0:	ldrb	r1, [r0, #28]
   15ca4:	cmp	r1, #0
   15ca8:	bne	15cec <__assert_fail@plt+0x445c>
   15cac:	ldr	r3, [r0, #20]
   15cb0:	ldr	r2, [r0, #16]
   15cb4:	ldr	r1, [r0, r3, lsl #2]
   15cb8:	str	r2, [r0, r3, lsl #2]
   15cbc:	ldr	r2, [r0, #20]
   15cc0:	ldr	r3, [r0, #24]
   15cc4:	cmp	r2, r3
   15cc8:	bne	15cd8 <__assert_fail@plt+0x4448>
   15ccc:	mov	r2, #1
   15cd0:	strb	r2, [r0, #28]
   15cd4:	b	15ce4 <__assert_fail@plt+0x4454>
   15cd8:	sub	r2, r2, #1
   15cdc:	and	r2, r2, #3
   15ce0:	str	r2, [r0, #20]
   15ce4:	mov	r0, r1
   15ce8:	bx	lr
   15cec:	push	{fp, lr}
   15cf0:	mov	fp, sp
   15cf4:	bl	11854 <abort@plt>
   15cf8:	sub	sp, sp, #4
   15cfc:	push	{fp, lr}
   15d00:	mov	fp, sp
   15d04:	sub	sp, sp, #4
   15d08:	str	r3, [fp, #8]
   15d0c:	mov	r3, #0
   15d10:	tst	r2, #64	; 0x40
   15d14:	addne	r3, fp, #8
   15d18:	addne	r3, r3, #4
   15d1c:	strne	r3, [sp]
   15d20:	ldrne	r3, [fp, #8]
   15d24:	bl	116ec <openat64@plt>
   15d28:	bl	180c4 <__assert_fail@plt+0x6834>
   15d2c:	mov	sp, fp
   15d30:	pop	{fp, lr}
   15d34:	add	sp, sp, #4
   15d38:	bx	lr
   15d3c:	push	{r4, r5, r6, sl, fp, lr}
   15d40:	add	fp, sp, #16
   15d44:	orr	r2, r2, #18688	; 0x4900
   15d48:	mov	r4, r3
   15d4c:	orr	r2, r2, #524288	; 0x80000
   15d50:	bl	15cf8 <__assert_fail@plt+0x4468>
   15d54:	mov	r5, r0
   15d58:	mov	r0, #0
   15d5c:	cmp	r5, #0
   15d60:	poplt	{r4, r5, r6, sl, fp, pc}
   15d64:	mov	r0, r5
   15d68:	bl	117d0 <fdopendir@plt>
   15d6c:	cmp	r0, #0
   15d70:	strne	r5, [r4]
   15d74:	popne	{r4, r5, r6, sl, fp, pc}
   15d78:	bl	11704 <__errno_location@plt>
   15d7c:	ldr	r6, [r0]
   15d80:	mov	r4, r0
   15d84:	mov	r0, r5
   15d88:	bl	11860 <close@plt>
   15d8c:	mov	r0, #0
   15d90:	str	r6, [r4]
   15d94:	pop	{r4, r5, r6, sl, fp, pc}
   15d98:	push	{r4, r5, fp, lr}
   15d9c:	add	fp, sp, #8
   15da0:	cmp	r0, #0
   15da4:	beq	15e38 <__assert_fail@plt+0x45a8>
   15da8:	mov	r1, #47	; 0x2f
   15dac:	mov	r4, r0
   15db0:	bl	117ac <strrchr@plt>
   15db4:	cmp	r0, #0
   15db8:	mov	r5, r4
   15dbc:	addne	r5, r0, #1
   15dc0:	sub	r0, r5, r4
   15dc4:	cmp	r0, #7
   15dc8:	blt	15e1c <__assert_fail@plt+0x458c>
   15dcc:	movw	r1, #43340	; 0xa94c
   15dd0:	sub	r0, r5, #7
   15dd4:	mov	r2, #7
   15dd8:	movt	r1, #1
   15ddc:	bl	11848 <strncmp@plt>
   15de0:	cmp	r0, #0
   15de4:	bne	15e1c <__assert_fail@plt+0x458c>
   15de8:	movw	r1, #43348	; 0xa954
   15dec:	mov	r0, r5
   15df0:	mov	r2, #3
   15df4:	movt	r1, #1
   15df8:	bl	11848 <strncmp@plt>
   15dfc:	cmp	r0, #0
   15e00:	beq	15e0c <__assert_fail@plt+0x457c>
   15e04:	mov	r4, r5
   15e08:	b	15e1c <__assert_fail@plt+0x458c>
   15e0c:	movw	r0, #49584	; 0xc1b0
   15e10:	add	r4, r5, #3
   15e14:	movt	r0, #2
   15e18:	str	r4, [r0]
   15e1c:	movw	r0, #49588	; 0xc1b4
   15e20:	movt	r0, #2
   15e24:	str	r4, [r0]
   15e28:	movw	r0, #49676	; 0xc20c
   15e2c:	movt	r0, #2
   15e30:	str	r4, [r0]
   15e34:	pop	{r4, r5, fp, pc}
   15e38:	movw	r0, #49600	; 0xc1c0
   15e3c:	movt	r0, #2
   15e40:	ldr	r1, [r0]
   15e44:	movw	r0, #43284	; 0xa914
   15e48:	movt	r0, #1
   15e4c:	bl	1183c <fputs@plt>
   15e50:	bl	11854 <abort@plt>
   15e54:	push	{r4, r5, r6, sl, fp, lr}
   15e58:	add	fp, sp, #16
   15e5c:	mov	r4, r0
   15e60:	movw	r0, #49680	; 0xc210
   15e64:	movt	r0, #2
   15e68:	cmp	r4, #0
   15e6c:	moveq	r4, r0
   15e70:	bl	11704 <__errno_location@plt>
   15e74:	ldr	r6, [r0]
   15e78:	mov	r5, r0
   15e7c:	mov	r0, r4
   15e80:	mov	r1, #48	; 0x30
   15e84:	bl	18914 <__assert_fail@plt+0x7084>
   15e88:	str	r6, [r5]
   15e8c:	pop	{r4, r5, r6, sl, fp, pc}
   15e90:	movw	r1, #49680	; 0xc210
   15e94:	cmp	r0, #0
   15e98:	movt	r1, #2
   15e9c:	movne	r1, r0
   15ea0:	ldr	r0, [r1]
   15ea4:	bx	lr
   15ea8:	movw	r2, #49680	; 0xc210
   15eac:	cmp	r0, #0
   15eb0:	movt	r2, #2
   15eb4:	movne	r2, r0
   15eb8:	str	r1, [r2]
   15ebc:	bx	lr
   15ec0:	movw	r3, #49680	; 0xc210
   15ec4:	cmp	r0, #0
   15ec8:	movt	r3, #2
   15ecc:	movne	r3, r0
   15ed0:	ubfx	r0, r1, #5, #3
   15ed4:	and	r1, r1, #31
   15ed8:	add	r0, r3, r0, lsl #2
   15edc:	ldr	r3, [r0, #8]
   15ee0:	eor	r2, r2, r3, lsr r1
   15ee4:	and	r2, r2, #1
   15ee8:	eor	r2, r3, r2, lsl r1
   15eec:	str	r2, [r0, #8]
   15ef0:	mov	r0, #1
   15ef4:	and	r0, r0, r3, lsr r1
   15ef8:	bx	lr
   15efc:	movw	r2, #49680	; 0xc210
   15f00:	cmp	r0, #0
   15f04:	movt	r2, #2
   15f08:	movne	r2, r0
   15f0c:	ldr	r0, [r2, #4]
   15f10:	str	r1, [r2, #4]
   15f14:	bx	lr
   15f18:	movw	r3, #49680	; 0xc210
   15f1c:	cmp	r0, #0
   15f20:	movt	r3, #2
   15f24:	movne	r3, r0
   15f28:	cmp	r1, #0
   15f2c:	mov	r0, #10
   15f30:	cmpne	r2, #0
   15f34:	str	r0, [r3]
   15f38:	bne	15f48 <__assert_fail@plt+0x46b8>
   15f3c:	push	{fp, lr}
   15f40:	mov	fp, sp
   15f44:	bl	11854 <abort@plt>
   15f48:	str	r1, [r3, #40]	; 0x28
   15f4c:	str	r2, [r3, #44]	; 0x2c
   15f50:	bx	lr
   15f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f58:	add	fp, sp, #28
   15f5c:	sub	sp, sp, #20
   15f60:	mov	r7, r0
   15f64:	ldr	r0, [fp, #8]
   15f68:	movw	r5, #49680	; 0xc210
   15f6c:	mov	r8, r3
   15f70:	mov	r9, r2
   15f74:	mov	sl, r1
   15f78:	movt	r5, #2
   15f7c:	cmp	r0, #0
   15f80:	movne	r5, r0
   15f84:	bl	11704 <__errno_location@plt>
   15f88:	mov	r4, r0
   15f8c:	ldm	r5, {r0, r1}
   15f90:	ldr	r2, [r5, #40]	; 0x28
   15f94:	ldr	r3, [r5, #44]	; 0x2c
   15f98:	add	r5, r5, #8
   15f9c:	ldr	r6, [r4]
   15fa0:	stm	sp, {r0, r1, r5}
   15fa4:	str	r2, [sp, #12]
   15fa8:	str	r3, [sp, #16]
   15fac:	mov	r0, r7
   15fb0:	mov	r1, sl
   15fb4:	mov	r2, r9
   15fb8:	mov	r3, r8
   15fbc:	bl	15fcc <__assert_fail@plt+0x473c>
   15fc0:	str	r6, [r4]
   15fc4:	sub	sp, fp, #28
   15fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fd0:	add	fp, sp, #28
   15fd4:	sub	sp, sp, #156	; 0x9c
   15fd8:	str	r0, [fp, #-56]	; 0xffffffc8
   15fdc:	ldr	r0, [fp, #12]
   15fe0:	mov	r4, r1
   15fe4:	str	r3, [sp, #80]	; 0x50
   15fe8:	str	r2, [fp, #-84]	; 0xffffffac
   15fec:	and	r1, r0, #4
   15ff0:	str	r1, [sp, #24]
   15ff4:	and	r1, r0, #1
   15ff8:	str	r1, [sp, #28]
   15ffc:	ubfx	r7, r0, #1, #1
   16000:	bl	115f0 <__ctype_get_mb_cur_max@plt>
   16004:	str	r0, [sp, #32]
   16008:	ldr	r0, [fp, #24]
   1600c:	ldr	r9, [fp, #8]
   16010:	mov	r2, #0
   16014:	mov	r1, #0
   16018:	mov	r5, #0
   1601c:	str	r2, [sp, #52]	; 0x34
   16020:	mov	r2, #1
   16024:	str	r0, [sp, #72]	; 0x48
   16028:	ldr	r0, [fp, #20]
   1602c:	str	r0, [sp, #64]	; 0x40
   16030:	mov	r0, #0
   16034:	str	r0, [sp, #92]	; 0x5c
   16038:	mov	r0, #0
   1603c:	str	r0, [fp, #-76]	; 0xffffffb4
   16040:	mov	r0, #0
   16044:	cmp	r9, #10
   16048:	str	r1, [sp, #68]	; 0x44
   1604c:	bhi	1704c <__assert_fail@plt+0x57bc>
   16050:	add	r1, pc, #28
   16054:	ldr	ip, [fp, #-84]	; 0xffffffac
   16058:	ldr	lr, [sp, #80]	; 0x50
   1605c:	mov	r6, r4
   16060:	mov	r8, #0
   16064:	mov	r3, #1
   16068:	mov	sl, #0
   1606c:	mov	r4, r2
   16070:	ldr	pc, [r1, r9, lsl #2]
   16074:	andeq	r6, r1, r4, asr #2
   16078:	andeq	r6, r1, r0, lsl #3
   1607c:	andeq	r6, r1, r4, asr r1
   16080:	andeq	r6, r1, ip, lsr r1
   16084:	andeq	r6, r1, r4, ror r1
   16088:	andeq	r6, r1, ip, asr #3
   1608c:	andeq	r6, r1, r4, ror #2
   16090:	andeq	r6, r1, ip, lsr #4
   16094:	andeq	r6, r1, r0, lsr #1
   16098:	andeq	r6, r1, r0, lsr #1
   1609c:	andeq	r6, r1, r8, asr #1
   160a0:	movw	r0, #43430	; 0xa9a6
   160a4:	mov	r1, r9
   160a8:	movt	r0, #1
   160ac:	bl	177b4 <__assert_fail@plt+0x5f24>
   160b0:	str	r0, [sp, #64]	; 0x40
   160b4:	movw	r0, #44777	; 0xaee9
   160b8:	mov	r1, r9
   160bc:	movt	r0, #1
   160c0:	bl	177b4 <__assert_fail@plt+0x5f24>
   160c4:	str	r0, [sp, #72]	; 0x48
   160c8:	mov	r8, #0
   160cc:	mov	sl, r7
   160d0:	tst	r7, #1
   160d4:	str	r5, [fp, #-48]	; 0xffffffd0
   160d8:	bne	16114 <__assert_fail@plt+0x4884>
   160dc:	ldr	r0, [sp, #64]	; 0x40
   160e0:	ldrb	r0, [r0]
   160e4:	cmp	r0, #0
   160e8:	beq	16114 <__assert_fail@plt+0x4884>
   160ec:	ldr	r1, [sp, #64]	; 0x40
   160f0:	mov	r8, #0
   160f4:	add	r1, r1, #1
   160f8:	cmp	r8, r6
   160fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16100:	strbcc	r0, [r2, r8]
   16104:	ldrb	r0, [r1, r8]
   16108:	add	r8, r8, #1
   1610c:	cmp	r0, #0
   16110:	bne	160f8 <__assert_fail@plt+0x4868>
   16114:	ldr	r7, [sp, #72]	; 0x48
   16118:	mov	r0, r7
   1611c:	bl	116e0 <strlen@plt>
   16120:	ldr	ip, [fp, #-84]	; 0xffffffac
   16124:	ldr	lr, [sp, #80]	; 0x50
   16128:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1612c:	str	r0, [fp, #-76]	; 0xffffffb4
   16130:	str	r7, [sp, #92]	; 0x5c
   16134:	mov	r3, #1
   16138:	b	1622c <__assert_fail@plt+0x499c>
   1613c:	mov	r0, #1
   16140:	b	16180 <__assert_fail@plt+0x48f0>
   16144:	mov	r9, #0
   16148:	mov	r8, #0
   1614c:	mov	r3, r0
   16150:	b	16228 <__assert_fail@plt+0x4998>
   16154:	tst	r7, #1
   16158:	bne	16180 <__assert_fail@plt+0x48f0>
   1615c:	mov	r3, r0
   16160:	b	161a8 <__assert_fail@plt+0x4918>
   16164:	mov	r0, #1
   16168:	mov	r8, #0
   1616c:	mov	r9, #5
   16170:	b	161e0 <__assert_fail@plt+0x4950>
   16174:	mov	r3, #1
   16178:	tst	r7, #1
   1617c:	beq	161a8 <__assert_fail@plt+0x4918>
   16180:	mov	r1, #1
   16184:	mov	r8, #0
   16188:	mov	r9, #2
   1618c:	mov	r3, r0
   16190:	mov	sl, #1
   16194:	str	r1, [fp, #-76]	; 0xffffffb4
   16198:	movw	r1, #44777	; 0xaee9
   1619c:	movt	r1, #1
   161a0:	str	r1, [sp, #92]	; 0x5c
   161a4:	b	1622c <__assert_fail@plt+0x499c>
   161a8:	cmp	r6, #0
   161ac:	mov	r8, #1
   161b0:	mov	r9, #2
   161b4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   161b8:	movne	r0, #39	; 0x27
   161bc:	strbne	r0, [r1]
   161c0:	movw	r0, #44777	; 0xaee9
   161c4:	movt	r0, #1
   161c8:	b	1621c <__assert_fail@plt+0x498c>
   161cc:	mov	r9, #5
   161d0:	tst	r7, #1
   161d4:	beq	161fc <__assert_fail@plt+0x496c>
   161d8:	mov	r0, #1
   161dc:	mov	r8, #0
   161e0:	str	r0, [fp, #-76]	; 0xffffffb4
   161e4:	movw	r0, #43428	; 0xa9a4
   161e8:	mov	r3, #1
   161ec:	mov	sl, #1
   161f0:	movt	r0, #1
   161f4:	str	r0, [sp, #92]	; 0x5c
   161f8:	b	1622c <__assert_fail@plt+0x499c>
   161fc:	cmp	r6, #0
   16200:	mov	r8, #1
   16204:	mov	r3, #1
   16208:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   1620c:	movne	r0, #34	; 0x22
   16210:	strbne	r0, [r1]
   16214:	movw	r0, #43428	; 0xa9a4
   16218:	movt	r0, #1
   1621c:	str	r0, [sp, #92]	; 0x5c
   16220:	mov	r0, #1
   16224:	str	r0, [fp, #-76]	; 0xffffffb4
   16228:	mov	sl, #0
   1622c:	ldr	r0, [fp, #16]
   16230:	mov	r7, #0
   16234:	str	r9, [fp, #-64]	; 0xffffffc0
   16238:	str	sl, [fp, #-72]	; 0xffffffb8
   1623c:	str	r3, [sp, #84]	; 0x54
   16240:	cmp	r0, #0
   16244:	movwne	r0, #1
   16248:	and	r0, r0, sl
   1624c:	str	r0, [fp, #-88]	; 0xffffffa8
   16250:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16254:	cmp	r0, #0
   16258:	movwne	r0, #1
   1625c:	subs	r2, r9, #2
   16260:	and	r1, r0, sl
   16264:	str	r2, [fp, #-80]	; 0xffffffb0
   16268:	and	r1, r3, r1
   1626c:	str	r1, [sp, #44]	; 0x2c
   16270:	clz	r1, r2
   16274:	lsr	r1, r1, #5
   16278:	and	r1, r1, sl
   1627c:	str	r1, [sp, #56]	; 0x38
   16280:	mov	r1, r2
   16284:	eor	r2, sl, #1
   16288:	movwne	r1, #1
   1628c:	str	r2, [sp, #88]	; 0x58
   16290:	orr	r2, r1, r2
   16294:	and	r1, r1, r3
   16298:	and	r0, r0, r1
   1629c:	str	r2, [sp, #60]	; 0x3c
   162a0:	str	r1, [fp, #-68]	; 0xffffffbc
   162a4:	str	r0, [fp, #-60]	; 0xffffffc4
   162a8:	eor	r0, r3, #1
   162ac:	str	r0, [sp, #48]	; 0x30
   162b0:	cmn	lr, #1
   162b4:	beq	162c4 <__assert_fail@plt+0x4a34>
   162b8:	cmp	r7, lr
   162bc:	bne	162d0 <__assert_fail@plt+0x4a40>
   162c0:	b	16e7c <__assert_fail@plt+0x55ec>
   162c4:	ldrb	r0, [ip, r7]
   162c8:	cmp	r0, #0
   162cc:	beq	16e84 <__assert_fail@plt+0x55f4>
   162d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   162d4:	mov	r9, #0
   162d8:	str	r5, [fp, #-48]	; 0xffffffd0
   162dc:	str	r6, [fp, #-52]	; 0xffffffcc
   162e0:	cmp	r0, #0
   162e4:	beq	16324 <__assert_fail@plt+0x4a94>
   162e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   162ec:	mov	r5, r4
   162f0:	add	r4, r7, r0
   162f4:	cmp	r0, #2
   162f8:	bcc	16314 <__assert_fail@plt+0x4a84>
   162fc:	cmn	lr, #1
   16300:	bne	16314 <__assert_fail@plt+0x4a84>
   16304:	mov	r0, ip
   16308:	bl	116e0 <strlen@plt>
   1630c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16310:	mov	lr, r0
   16314:	cmp	r4, lr
   16318:	bls	1632c <__assert_fail@plt+0x4a9c>
   1631c:	mov	r6, #0
   16320:	b	1636c <__assert_fail@plt+0x4adc>
   16324:	mov	r6, #0
   16328:	b	16370 <__assert_fail@plt+0x4ae0>
   1632c:	ldr	r1, [sp, #92]	; 0x5c
   16330:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16334:	add	r0, ip, r7
   16338:	mov	r4, lr
   1633c:	bl	11560 <memcmp@plt>
   16340:	ldr	r2, [sp, #88]	; 0x58
   16344:	cmp	r0, #0
   16348:	mov	r1, r0
   1634c:	movwne	r1, #1
   16350:	orr	r1, r1, r2
   16354:	tst	r1, #1
   16358:	beq	16f18 <__assert_fail@plt+0x5688>
   1635c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16360:	clz	r0, r0
   16364:	mov	lr, r4
   16368:	lsr	r6, r0, #5
   1636c:	mov	r4, r5
   16370:	ldrb	r5, [ip, r7]
   16374:	cmp	r5, #126	; 0x7e
   16378:	bhi	16740 <__assert_fail@plt+0x4eb0>
   1637c:	add	r3, pc, #16
   16380:	mov	sl, #1
   16384:	mov	r2, #110	; 0x6e
   16388:	mov	r0, #97	; 0x61
   1638c:	mov	r1, #0
   16390:	ldr	pc, [r3, r5, lsl #2]
   16394:	andeq	r6, r1, r4, lsr #12
   16398:	andeq	r6, r1, r0, asr #14
   1639c:	andeq	r6, r1, r0, asr #14
   163a0:	andeq	r6, r1, r0, asr #14
   163a4:	andeq	r6, r1, r0, asr #14
   163a8:	andeq	r6, r1, r0, asr #14
   163ac:	andeq	r6, r1, r0, asr #14
   163b0:	andeq	r6, r1, r4, ror #15
   163b4:	andeq	r6, r1, r4, lsl #12
   163b8:	strdeq	r6, [r1], -ip
   163bc:	andeq	r6, r1, r0, lsl r6
   163c0:	muleq	r1, r4, r6
   163c4:	strdeq	r6, [r1], -r4
   163c8:	andeq	r6, r1, ip, lsl #12
   163cc:	andeq	r6, r1, r0, asr #14
   163d0:	andeq	r6, r1, r0, asr #14
   163d4:	andeq	r6, r1, r0, asr #14
   163d8:	andeq	r6, r1, r0, asr #14
   163dc:	andeq	r6, r1, r0, asr #14
   163e0:	andeq	r6, r1, r0, asr #14
   163e4:	andeq	r6, r1, r0, asr #14
   163e8:	andeq	r6, r1, r0, asr #14
   163ec:	andeq	r6, r1, r0, asr #14
   163f0:	andeq	r6, r1, r0, asr #14
   163f4:	andeq	r6, r1, r0, asr #14
   163f8:	andeq	r6, r1, r0, asr #14
   163fc:	andeq	r6, r1, r0, asr #14
   16400:	andeq	r6, r1, r0, asr #14
   16404:	andeq	r6, r1, r0, asr #14
   16408:	andeq	r6, r1, r0, asr #14
   1640c:	andeq	r6, r1, r0, asr #14
   16410:	andeq	r6, r1, r0, asr #14
   16414:	andeq	r6, r1, r4, lsr #15
   16418:	andeq	r6, r1, r8, lsr #15
   1641c:	andeq	r6, r1, r8, lsr #15
   16420:	andeq	r6, r1, r4, lsr #11
   16424:	andeq	r6, r1, r8, lsr #15
   16428:	muleq	r1, r0, r5
   1642c:	andeq	r6, r1, r8, lsr #15
   16430:	muleq	r1, ip, r6
   16434:	andeq	r6, r1, r8, lsr #15
   16438:	andeq	r6, r1, r8, lsr #15
   1643c:	andeq	r6, r1, r8, lsr #15
   16440:	muleq	r1, r0, r5
   16444:	muleq	r1, r0, r5
   16448:	muleq	r1, r0, r5
   1644c:	muleq	r1, r0, r5
   16450:	muleq	r1, r0, r5
   16454:	muleq	r1, r0, r5
   16458:	muleq	r1, r0, r5
   1645c:	muleq	r1, r0, r5
   16460:	muleq	r1, r0, r5
   16464:	muleq	r1, r0, r5
   16468:	muleq	r1, r0, r5
   1646c:	muleq	r1, r0, r5
   16470:	muleq	r1, r0, r5
   16474:	muleq	r1, r0, r5
   16478:	muleq	r1, r0, r5
   1647c:	muleq	r1, r0, r5
   16480:	andeq	r6, r1, r8, lsr #15
   16484:	andeq	r6, r1, r8, lsr #15
   16488:	andeq	r6, r1, r8, lsr #15
   1648c:	andeq	r6, r1, r8, lsr #15
   16490:	andeq	r6, r1, r8, ror #12
   16494:	andeq	r6, r1, r0, asr #14
   16498:	muleq	r1, r0, r5
   1649c:	muleq	r1, r0, r5
   164a0:	muleq	r1, r0, r5
   164a4:	muleq	r1, r0, r5
   164a8:	muleq	r1, r0, r5
   164ac:	muleq	r1, r0, r5
   164b0:	muleq	r1, r0, r5
   164b4:	muleq	r1, r0, r5
   164b8:	muleq	r1, r0, r5
   164bc:	muleq	r1, r0, r5
   164c0:	muleq	r1, r0, r5
   164c4:	muleq	r1, r0, r5
   164c8:	muleq	r1, r0, r5
   164cc:	muleq	r1, r0, r5
   164d0:	muleq	r1, r0, r5
   164d4:	muleq	r1, r0, r5
   164d8:	muleq	r1, r0, r5
   164dc:	muleq	r1, r0, r5
   164e0:	muleq	r1, r0, r5
   164e4:	muleq	r1, r0, r5
   164e8:	muleq	r1, r0, r5
   164ec:	muleq	r1, r0, r5
   164f0:	muleq	r1, r0, r5
   164f4:	muleq	r1, r0, r5
   164f8:	muleq	r1, r0, r5
   164fc:	muleq	r1, r0, r5
   16500:	andeq	r6, r1, r8, lsr #15
   16504:	ldrdeq	r6, [r1], -r0
   16508:	muleq	r1, r0, r5
   1650c:	andeq	r6, r1, r8, lsr #15
   16510:	muleq	r1, r0, r5
   16514:	andeq	r6, r1, r8, lsr #15
   16518:	muleq	r1, r0, r5
   1651c:	muleq	r1, r0, r5
   16520:	muleq	r1, r0, r5
   16524:	muleq	r1, r0, r5
   16528:	muleq	r1, r0, r5
   1652c:	muleq	r1, r0, r5
   16530:	muleq	r1, r0, r5
   16534:	muleq	r1, r0, r5
   16538:	muleq	r1, r0, r5
   1653c:	muleq	r1, r0, r5
   16540:	muleq	r1, r0, r5
   16544:	muleq	r1, r0, r5
   16548:	muleq	r1, r0, r5
   1654c:	muleq	r1, r0, r5
   16550:	muleq	r1, r0, r5
   16554:	muleq	r1, r0, r5
   16558:	muleq	r1, r0, r5
   1655c:	muleq	r1, r0, r5
   16560:	muleq	r1, r0, r5
   16564:	muleq	r1, r0, r5
   16568:	muleq	r1, r0, r5
   1656c:	muleq	r1, r0, r5
   16570:	muleq	r1, r0, r5
   16574:	muleq	r1, r0, r5
   16578:	muleq	r1, r0, r5
   1657c:	muleq	r1, r0, r5
   16580:			; <UNDEFINED> instruction: 0x000165b4
   16584:	andeq	r6, r1, r8, lsr #15
   16588:			; <UNDEFINED> instruction: 0x000165b4
   1658c:	andeq	r6, r1, r4, lsr #11
   16590:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16594:	cmp	r0, #0
   16598:	beq	167f8 <__assert_fail@plt+0x4f68>
   1659c:	ldr	r0, [fp, #16]
   165a0:	b	167fc <__assert_fail@plt+0x4f6c>
   165a4:	mov	sl, #0
   165a8:	cmp	r7, #0
   165ac:	bne	16a14 <__assert_fail@plt+0x5184>
   165b0:	b	167a4 <__assert_fail@plt+0x4f14>
   165b4:	mov	sl, #0
   165b8:	cmn	lr, #1
   165bc:	beq	16790 <__assert_fail@plt+0x4f00>
   165c0:	cmp	r7, #0
   165c4:	cmpeq	lr, #1
   165c8:	bne	16a14 <__assert_fail@plt+0x5184>
   165cc:	b	167a4 <__assert_fail@plt+0x4f14>
   165d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   165d4:	cmp	r0, #2
   165d8:	bne	167c8 <__assert_fail@plt+0x4f38>
   165dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   165e0:	tst	r0, #1
   165e4:	bne	16f34 <__assert_fail@plt+0x56a4>
   165e8:	mov	r9, #0
   165ec:	mov	r0, #92	; 0x5c
   165f0:	b	167dc <__assert_fail@plt+0x4f4c>
   165f4:	mov	r0, #102	; 0x66
   165f8:	b	167e4 <__assert_fail@plt+0x4f54>
   165fc:	mov	r2, #116	; 0x74
   16600:	b	16610 <__assert_fail@plt+0x4d80>
   16604:	mov	r0, #98	; 0x62
   16608:	b	167e4 <__assert_fail@plt+0x4f54>
   1660c:	mov	r2, #114	; 0x72
   16610:	ldr	r0, [sp, #60]	; 0x3c
   16614:	tst	r0, #1
   16618:	mov	r0, r2
   1661c:	bne	167e4 <__assert_fail@plt+0x4f54>
   16620:	b	16f34 <__assert_fail@plt+0x56a4>
   16624:	ldr	r0, [sp, #84]	; 0x54
   16628:	tst	r0, #1
   1662c:	beq	168d0 <__assert_fail@plt+0x5040>
   16630:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16634:	tst	r0, #1
   16638:	bne	1703c <__assert_fail@plt+0x57ac>
   1663c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16640:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16644:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16648:	cmp	r0, #2
   1664c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16650:	movwne	r0, #1
   16654:	orr	r0, r0, r3
   16658:	tst	r0, #1
   1665c:	beq	16d50 <__assert_fail@plt+0x54c0>
   16660:	mov	r0, r8
   16664:	b	16d90 <__assert_fail@plt+0x5500>
   16668:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1666c:	mov	r9, #0
   16670:	mov	r5, #63	; 0x3f
   16674:	cmp	r0, #5
   16678:	beq	16a1c <__assert_fail@plt+0x518c>
   1667c:	cmp	r0, #2
   16680:	bne	16adc <__assert_fail@plt+0x524c>
   16684:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16688:	tst	r0, #1
   1668c:	beq	16ae0 <__assert_fail@plt+0x5250>
   16690:	b	16f34 <__assert_fail@plt+0x56a4>
   16694:	mov	r0, #118	; 0x76
   16698:	b	167e4 <__assert_fail@plt+0x4f54>
   1669c:	mov	r0, #1
   166a0:	mov	r5, #39	; 0x27
   166a4:	str	r0, [sp, #52]	; 0x34
   166a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   166ac:	cmp	r0, #2
   166b0:	bne	16738 <__assert_fail@plt+0x4ea8>
   166b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166b8:	tst	r0, #1
   166bc:	bne	16f34 <__assert_fail@plt+0x56a4>
   166c0:	ldr	r3, [sp, #68]	; 0x44
   166c4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   166c8:	mov	r9, #0
   166cc:	clz	r1, r2
   166d0:	cmp	r3, #0
   166d4:	mov	r0, r3
   166d8:	movwne	r0, #1
   166dc:	lsr	r1, r1, #5
   166e0:	orrs	r0, r0, r1
   166e4:	moveq	r3, r2
   166e8:	moveq	r2, r0
   166ec:	cmp	r8, r2
   166f0:	str	r3, [sp, #68]	; 0x44
   166f4:	str	r2, [fp, #-52]	; 0xffffffcc
   166f8:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   166fc:	movcc	r0, #39	; 0x27
   16700:	strbcc	r0, [r1, r8]
   16704:	add	r0, r8, #1
   16708:	cmp	r0, r2
   1670c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16710:	movcc	r1, #92	; 0x5c
   16714:	strbcc	r1, [r3, r0]
   16718:	add	r0, r8, #2
   1671c:	add	r8, r8, #3
   16720:	cmp	r0, r2
   16724:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16728:	movcc	r1, #39	; 0x27
   1672c:	strbcc	r1, [r2, r0]
   16730:	mov	r0, #0
   16734:	str	r0, [fp, #-48]	; 0xffffffd0
   16738:	mov	sl, #1
   1673c:	b	16590 <__assert_fail@plt+0x4d00>
   16740:	ldr	r0, [sp, #32]
   16744:	cmp	r0, #1
   16748:	bne	168f4 <__assert_fail@plt+0x5064>
   1674c:	str	lr, [sp, #80]	; 0x50
   16750:	bl	116a4 <__ctype_b_loc@plt>
   16754:	ldr	r0, [r0]
   16758:	ldr	ip, [fp, #-84]	; 0xffffffac
   1675c:	mov	r1, #1
   16760:	add	r0, r0, r5, lsl #1
   16764:	ldrb	r0, [r0, #1]
   16768:	ubfx	sl, r0, #6, #1
   1676c:	ldr	r0, [sp, #48]	; 0x30
   16770:	mov	r2, r1
   16774:	cmp	r1, #1
   16778:	orr	r0, sl, r0
   1677c:	bhi	16ae8 <__assert_fail@plt+0x5258>
   16780:	tst	r0, #1
   16784:	beq	16ae8 <__assert_fail@plt+0x5258>
   16788:	ldr	lr, [sp, #80]	; 0x50
   1678c:	b	16590 <__assert_fail@plt+0x4d00>
   16790:	cmp	r7, #0
   16794:	bne	16a10 <__assert_fail@plt+0x5180>
   16798:	ldrb	r0, [ip, #1]
   1679c:	cmp	r0, #0
   167a0:	bne	16a10 <__assert_fail@plt+0x5180>
   167a4:	mov	r1, #1
   167a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   167ac:	cmp	r0, #2
   167b0:	bne	167c0 <__assert_fail@plt+0x4f30>
   167b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   167b8:	tst	r0, #1
   167bc:	bne	16f34 <__assert_fail@plt+0x56a4>
   167c0:	mov	sl, r1
   167c4:	b	16590 <__assert_fail@plt+0x4d00>
   167c8:	ldr	r1, [sp, #44]	; 0x2c
   167cc:	mov	r9, #0
   167d0:	mov	r0, #92	; 0x5c
   167d4:	cmp	r1, #0
   167d8:	beq	167e4 <__assert_fail@plt+0x4f54>
   167dc:	mov	sl, #0
   167e0:	b	16cfc <__assert_fail@plt+0x546c>
   167e4:	ldr	r1, [sp, #84]	; 0x54
   167e8:	mov	sl, #0
   167ec:	mov	r9, #0
   167f0:	tst	r1, #1
   167f4:	bne	16830 <__assert_fail@plt+0x4fa0>
   167f8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   167fc:	cmp	r0, #0
   16800:	mov	r0, r5
   16804:	beq	16828 <__assert_fail@plt+0x4f98>
   16808:	ldr	r1, [fp, #16]
   1680c:	ubfx	r0, r5, #5, #3
   16810:	mov	r2, #1
   16814:	ldr	r0, [r1, r0, lsl #2]
   16818:	and	r1, r5, #31
   1681c:	tst	r0, r2, lsl r1
   16820:	mov	r0, r5
   16824:	bne	16830 <__assert_fail@plt+0x4fa0>
   16828:	cmp	r6, #0
   1682c:	beq	16cfc <__assert_fail@plt+0x546c>
   16830:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16834:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16838:	tst	r1, #1
   1683c:	bne	16f10 <__assert_fail@plt+0x5680>
   16840:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16844:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16848:	cmp	r1, #2
   1684c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16850:	movwne	r1, #1
   16854:	orr	r1, r1, r5
   16858:	tst	r1, #1
   1685c:	bne	168a0 <__assert_fail@plt+0x5010>
   16860:	cmp	r8, r6
   16864:	mov	r5, #1
   16868:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1686c:	movcc	r1, #39	; 0x27
   16870:	strbcc	r1, [r2, r8]
   16874:	add	r1, r8, #1
   16878:	cmp	r1, r6
   1687c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16880:	movcc	r2, #36	; 0x24
   16884:	strbcc	r2, [r3, r1]
   16888:	add	r1, r8, #2
   1688c:	add	r8, r8, #3
   16890:	cmp	r1, r6
   16894:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16898:	movcc	r2, #39	; 0x27
   1689c:	strbcc	r2, [r3, r1]
   168a0:	cmp	r8, r6
   168a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   168a8:	movcc	r1, #92	; 0x5c
   168ac:	strbcc	r1, [r2, r8]
   168b0:	add	r8, r8, #1
   168b4:	cmp	r8, r6
   168b8:	and	r4, r4, sl
   168bc:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   168c0:	strbcc	r0, [r1, r8]
   168c4:	add	r8, r8, #1
   168c8:	add	r7, r7, #1
   168cc:	b	162b0 <__assert_fail@plt+0x4a20>
   168d0:	ldr	r0, [sp, #28]
   168d4:	mov	sl, #0
   168d8:	mov	r9, #0
   168dc:	mov	r5, #0
   168e0:	cmp	r0, #0
   168e4:	beq	167f8 <__assert_fail@plt+0x4f68>
   168e8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   168ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   168f0:	b	168c8 <__assert_fail@plt+0x5038>
   168f4:	mov	r0, #0
   168f8:	cmn	lr, #1
   168fc:	str	r6, [sp, #76]	; 0x4c
   16900:	str	r4, [sp, #20]
   16904:	str	r0, [fp, #-36]	; 0xffffffdc
   16908:	str	r0, [fp, #-40]	; 0xffffffd8
   1690c:	bne	16920 <__assert_fail@plt+0x5090>
   16910:	mov	r0, ip
   16914:	bl	116e0 <strlen@plt>
   16918:	ldr	ip, [fp, #-84]	; 0xffffffac
   1691c:	mov	lr, r0
   16920:	add	r0, ip, r7
   16924:	mov	sl, #1
   16928:	mov	r6, #0
   1692c:	sub	r4, fp, #40	; 0x28
   16930:	str	lr, [sp, #80]	; 0x50
   16934:	str	r0, [sp, #36]	; 0x24
   16938:	str	r6, [sp, #40]	; 0x28
   1693c:	add	r6, r6, r7
   16940:	sub	r0, fp, #44	; 0x2c
   16944:	mov	r3, r4
   16948:	add	r1, ip, r6
   1694c:	sub	r2, lr, r6
   16950:	bl	19254 <__assert_fail@plt+0x79c4>
   16954:	cmp	r0, #0
   16958:	beq	16e64 <__assert_fail@plt+0x55d4>
   1695c:	cmn	r0, #1
   16960:	beq	16e24 <__assert_fail@plt+0x5594>
   16964:	ldr	lr, [sp, #80]	; 0x50
   16968:	cmn	r0, #2
   1696c:	beq	16e2c <__assert_fail@plt+0x559c>
   16970:	ldr	r2, [sp, #56]	; 0x38
   16974:	cmp	r0, #2
   16978:	mov	r1, #0
   1697c:	movwcc	r1, #1
   16980:	eor	r2, r2, #1
   16984:	orrs	r1, r2, r1
   16988:	bne	169d4 <__assert_fail@plt+0x5144>
   1698c:	ldr	r1, [sp, #40]	; 0x28
   16990:	ldr	r2, [sp, #36]	; 0x24
   16994:	add	ip, r2, r1
   16998:	mov	r2, #1
   1699c:	ldrb	r3, [ip, r2]
   169a0:	sub	r6, r3, #94	; 0x5e
   169a4:	cmp	r6, #30
   169a8:	bhi	169bc <__assert_fail@plt+0x512c>
   169ac:	mov	r4, #1
   169b0:	mov	r1, #1073741829	; 0x40000005
   169b4:	tst	r1, r4, lsl r6
   169b8:	bne	16f30 <__assert_fail@plt+0x56a0>
   169bc:	sub	r3, r3, #91	; 0x5b
   169c0:	cmp	r3, #2
   169c4:	bcc	16f30 <__assert_fail@plt+0x56a0>
   169c8:	add	r2, r2, #1
   169cc:	cmp	r2, r0
   169d0:	bcc	1699c <__assert_fail@plt+0x510c>
   169d4:	ldr	r6, [sp, #40]	; 0x28
   169d8:	add	r6, r0, r6
   169dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   169e0:	bl	115cc <iswprint@plt>
   169e4:	cmp	r0, #0
   169e8:	sub	r4, fp, #40	; 0x28
   169ec:	movwne	r0, #1
   169f0:	and	sl, sl, r0
   169f4:	mov	r0, r4
   169f8:	bl	11548 <mbsinit@plt>
   169fc:	ldr	lr, [sp, #80]	; 0x50
   16a00:	ldr	ip, [fp, #-84]	; 0xffffffac
   16a04:	cmp	r0, #0
   16a08:	beq	16938 <__assert_fail@plt+0x50a8>
   16a0c:	b	16e6c <__assert_fail@plt+0x55dc>
   16a10:	mvn	lr, #0
   16a14:	mov	r9, #0
   16a18:	b	16590 <__assert_fail@plt+0x4d00>
   16a1c:	ldr	r0, [sp, #24]
   16a20:	cmp	r0, #0
   16a24:	beq	16adc <__assert_fail@plt+0x524c>
   16a28:	add	r0, r7, #2
   16a2c:	cmp	r0, lr
   16a30:	bcs	16adc <__assert_fail@plt+0x524c>
   16a34:	add	r1, ip, r7
   16a38:	ldrb	r1, [r1, #1]
   16a3c:	cmp	r1, #63	; 0x3f
   16a40:	bne	16adc <__assert_fail@plt+0x524c>
   16a44:	ldrb	r5, [ip, r0]
   16a48:	sub	r1, r5, #33	; 0x21
   16a4c:	cmp	r1, #29
   16a50:	bhi	16adc <__assert_fail@plt+0x524c>
   16a54:	movw	r3, #20929	; 0x51c1
   16a58:	mov	r2, #1
   16a5c:	movt	r3, #14336	; 0x3800
   16a60:	tst	r3, r2, lsl r1
   16a64:	beq	16adc <__assert_fail@plt+0x524c>
   16a68:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16a6c:	tst	r1, #1
   16a70:	bne	17044 <__assert_fail@plt+0x57b4>
   16a74:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16a78:	mov	r7, r0
   16a7c:	cmp	r8, r1
   16a80:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16a84:	movcc	r1, #63	; 0x3f
   16a88:	strbcc	r1, [r2, r8]
   16a8c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16a90:	add	r1, r8, #1
   16a94:	cmp	r1, r2
   16a98:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16a9c:	movcc	r2, #34	; 0x22
   16aa0:	strbcc	r2, [r3, r1]
   16aa4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16aa8:	add	r1, r8, #2
   16aac:	cmp	r1, r2
   16ab0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16ab4:	movcc	r2, #34	; 0x22
   16ab8:	strbcc	r2, [r3, r1]
   16abc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16ac0:	add	r1, r8, #3
   16ac4:	add	r8, r8, #4
   16ac8:	cmp	r1, r2
   16acc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16ad0:	movcc	r2, #63	; 0x3f
   16ad4:	strbcc	r2, [r3, r1]
   16ad8:	b	16ae0 <__assert_fail@plt+0x5250>
   16adc:	mov	r5, #63	; 0x3f
   16ae0:	mov	sl, #0
   16ae4:	b	16590 <__assert_fail@plt+0x4d00>
   16ae8:	str	r0, [sp, #40]	; 0x28
   16aec:	add	r0, r2, r7
   16af0:	str	r6, [sp, #76]	; 0x4c
   16af4:	add	r1, r7, #1
   16af8:	ldr	lr, [sp, #80]	; 0x50
   16afc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16b00:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16b04:	mov	r3, #0
   16b08:	str	r0, [sp, #36]	; 0x24
   16b0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16b10:	b	16ba4 <__assert_fail@plt+0x5314>
   16b14:	str	r0, [sp, #76]	; 0x4c
   16b18:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16b1c:	cmp	r9, #0
   16b20:	movwne	r9, #1
   16b24:	mvn	r7, r0
   16b28:	orr	r7, r7, r9
   16b2c:	tst	r7, #1
   16b30:	bne	16b80 <__assert_fail@plt+0x52f0>
   16b34:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16b38:	cmp	r8, r6
   16b3c:	bcs	16b54 <__assert_fail@plt+0x52c4>
   16b40:	ldr	r7, [fp, #-56]	; 0xffffffc8
   16b44:	mov	r2, r4
   16b48:	mov	r4, #39	; 0x27
   16b4c:	strb	r4, [r7, r8]
   16b50:	mov	r4, r2
   16b54:	add	r7, r8, #1
   16b58:	cmp	r7, r6
   16b5c:	bcs	16b74 <__assert_fail@plt+0x52e4>
   16b60:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16b64:	mov	r2, r4
   16b68:	mov	r4, #39	; 0x27
   16b6c:	strb	r4, [r0, r7]
   16b70:	mov	r4, r2
   16b74:	add	r8, r8, #2
   16b78:	mov	r0, #0
   16b7c:	b	16b88 <__assert_fail@plt+0x52f8>
   16b80:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16b84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16b88:	cmp	r8, r6
   16b8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16b90:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16b94:	strbcc	r5, [r2, r8]
   16b98:	add	r8, r8, #1
   16b9c:	ldrb	r5, [ip, r1]
   16ba0:	add	r1, r1, #1
   16ba4:	ldr	r2, [sp, #40]	; 0x28
   16ba8:	tst	r2, #1
   16bac:	beq	16be8 <__assert_fail@plt+0x5358>
   16bb0:	ldr	r2, [sp, #76]	; 0x4c
   16bb4:	str	r0, [fp, #-48]	; 0xffffffd0
   16bb8:	tst	r2, #1
   16bbc:	beq	16be0 <__assert_fail@plt+0x5350>
   16bc0:	cmp	r8, r6
   16bc4:	bcs	16bdc <__assert_fail@plt+0x534c>
   16bc8:	ldr	r6, [fp, #-56]	; 0xffffffc8
   16bcc:	mov	r2, r4
   16bd0:	mov	r4, #92	; 0x5c
   16bd4:	strb	r4, [r6, r8]
   16bd8:	mov	r4, r2
   16bdc:	add	r8, r8, #1
   16be0:	mov	r0, #0
   16be4:	b	16cdc <__assert_fail@plt+0x544c>
   16be8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16bec:	tst	r2, #1
   16bf0:	bne	16f3c <__assert_fail@plt+0x56ac>
   16bf4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16bf8:	cmp	r7, #2
   16bfc:	movwne	r3, #1
   16c00:	orr	r3, r3, r0
   16c04:	tst	r3, #1
   16c08:	bne	16c64 <__assert_fail@plt+0x53d4>
   16c0c:	cmp	r8, r6
   16c10:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16c14:	movcc	r3, #39	; 0x27
   16c18:	strbcc	r3, [r2, r8]
   16c1c:	add	r3, r8, #1
   16c20:	cmp	r3, r6
   16c24:	bcs	16c3c <__assert_fail@plt+0x53ac>
   16c28:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16c2c:	mov	r7, r4
   16c30:	mov	r4, #36	; 0x24
   16c34:	strb	r4, [r2, r3]
   16c38:	mov	r4, r7
   16c3c:	add	r3, r8, #2
   16c40:	cmp	r3, r6
   16c44:	bcs	16c5c <__assert_fail@plt+0x53cc>
   16c48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16c4c:	mov	r7, r4
   16c50:	mov	r4, #39	; 0x27
   16c54:	strb	r4, [r2, r3]
   16c58:	mov	r4, r7
   16c5c:	add	r8, r8, #3
   16c60:	mov	r0, #1
   16c64:	cmp	r8, r6
   16c68:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16c6c:	movcc	r3, #92	; 0x5c
   16c70:	strbcc	r3, [r2, r8]
   16c74:	add	r3, r8, #1
   16c78:	cmp	r3, r6
   16c7c:	bcs	16c9c <__assert_fail@plt+0x540c>
   16c80:	mov	r2, r4
   16c84:	and	r7, r5, #192	; 0xc0
   16c88:	mov	r4, #48	; 0x30
   16c8c:	orr	r7, r4, r7, lsr #6
   16c90:	mov	r4, r2
   16c94:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16c98:	strb	r7, [r2, r3]
   16c9c:	add	r3, r8, #2
   16ca0:	cmp	r3, r6
   16ca4:	bcs	16cc4 <__assert_fail@plt+0x5434>
   16ca8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16cac:	mov	r6, r4
   16cb0:	lsr	r7, r5, #3
   16cb4:	mov	r4, #6
   16cb8:	bfi	r7, r4, #3, #29
   16cbc:	mov	r4, r6
   16cc0:	strb	r7, [r2, r3]
   16cc4:	str	r0, [fp, #-48]	; 0xffffffd0
   16cc8:	ldr	r0, [sp, #76]	; 0x4c
   16ccc:	mov	r3, #6
   16cd0:	add	r8, r8, #3
   16cd4:	bfi	r5, r3, #3, #29
   16cd8:	mov	r3, #1
   16cdc:	ldr	r2, [sp, #36]	; 0x24
   16ce0:	and	r9, r3, #1
   16ce4:	cmp	r2, r1
   16ce8:	bhi	16b14 <__assert_fail@plt+0x5284>
   16cec:	cmp	r9, #0
   16cf0:	sub	r7, r1, #1
   16cf4:	mov	r0, r5
   16cf8:	movwne	r9, #1
   16cfc:	cmp	r9, #0
   16d00:	bne	16d44 <__assert_fail@plt+0x54b4>
   16d04:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16d08:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16d0c:	tst	r5, #1
   16d10:	beq	168b4 <__assert_fail@plt+0x5024>
   16d14:	cmp	r8, r6
   16d18:	mov	r5, #0
   16d1c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16d20:	movcc	r1, #39	; 0x27
   16d24:	strbcc	r1, [r2, r8]
   16d28:	add	r1, r8, #1
   16d2c:	add	r8, r8, #2
   16d30:	cmp	r1, r6
   16d34:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16d38:	movcc	r2, #39	; 0x27
   16d3c:	strbcc	r2, [r3, r1]
   16d40:	b	168b4 <__assert_fail@plt+0x5024>
   16d44:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16d48:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16d4c:	b	168b4 <__assert_fail@plt+0x5024>
   16d50:	cmp	r8, r1
   16d54:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16d58:	movcc	r0, #39	; 0x27
   16d5c:	strbcc	r0, [r2, r8]
   16d60:	add	r0, r8, #1
   16d64:	cmp	r0, r1
   16d68:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16d6c:	movcc	r2, #36	; 0x24
   16d70:	strbcc	r2, [r3, r0]
   16d74:	add	r0, r8, #2
   16d78:	cmp	r0, r1
   16d7c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16d80:	movcc	r2, #39	; 0x27
   16d84:	strbcc	r2, [r3, r0]
   16d88:	add	r0, r8, #3
   16d8c:	mov	r3, #1
   16d90:	cmp	r0, r1
   16d94:	add	r8, r0, #1
   16d98:	str	r3, [fp, #-48]	; 0xffffffd0
   16d9c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16da0:	movcc	r1, #92	; 0x5c
   16da4:	strbcc	r1, [r2, r0]
   16da8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16dac:	cmp	r1, #2
   16db0:	beq	16e14 <__assert_fail@plt+0x5584>
   16db4:	add	r1, r7, #1
   16db8:	mov	sl, #0
   16dbc:	mov	r9, #1
   16dc0:	mov	r5, #48	; 0x30
   16dc4:	cmp	r1, lr
   16dc8:	bcs	16590 <__assert_fail@plt+0x4d00>
   16dcc:	ldrb	r1, [ip, r1]
   16dd0:	sub	r1, r1, #48	; 0x30
   16dd4:	uxtb	r1, r1
   16dd8:	cmp	r1, #9
   16ddc:	bhi	16590 <__assert_fail@plt+0x4d00>
   16de0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16de4:	cmp	r8, r1
   16de8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16dec:	movcc	r1, #48	; 0x30
   16df0:	strbcc	r1, [r2, r8]
   16df4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16df8:	add	r1, r0, #2
   16dfc:	add	r8, r0, #3
   16e00:	cmp	r1, r2
   16e04:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16e08:	movcc	r2, #48	; 0x30
   16e0c:	strbcc	r2, [r3, r1]
   16e10:	b	16590 <__assert_fail@plt+0x4d00>
   16e14:	mov	r0, #48	; 0x30
   16e18:	mov	r9, #1
   16e1c:	mov	sl, #0
   16e20:	b	16828 <__assert_fail@plt+0x4f98>
   16e24:	mov	sl, #0
   16e28:	b	16e64 <__assert_fail@plt+0x55d4>
   16e2c:	mov	sl, #0
   16e30:	cmp	lr, r6
   16e34:	bls	16e64 <__assert_fail@plt+0x55d4>
   16e38:	ldr	ip, [fp, #-84]	; 0xffffffac
   16e3c:	ldr	r6, [sp, #40]	; 0x28
   16e40:	ldr	r0, [sp, #36]	; 0x24
   16e44:	ldrb	r0, [r0, r6]
   16e48:	cmp	r0, #0
   16e4c:	beq	16e6c <__assert_fail@plt+0x55dc>
   16e50:	add	r6, r6, #1
   16e54:	add	r0, r7, r6
   16e58:	cmp	r0, lr
   16e5c:	bcc	16e40 <__assert_fail@plt+0x55b0>
   16e60:	b	16e6c <__assert_fail@plt+0x55dc>
   16e64:	ldr	ip, [fp, #-84]	; 0xffffffac
   16e68:	ldr	r6, [sp, #40]	; 0x28
   16e6c:	mov	r1, r6
   16e70:	ldr	r4, [sp, #20]
   16e74:	ldr	r6, [sp, #76]	; 0x4c
   16e78:	b	1676c <__assert_fail@plt+0x4edc>
   16e7c:	mov	lr, r7
   16e80:	b	16e88 <__assert_fail@plt+0x55f8>
   16e84:	mvn	lr, #0
   16e88:	ldr	r9, [fp, #-64]	; 0xffffffc0
   16e8c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16e90:	eor	r0, r9, #2
   16e94:	orr	r0, r0, r8
   16e98:	clz	r0, r0
   16e9c:	lsr	r0, r0, #5
   16ea0:	tst	r1, r0
   16ea4:	bne	16fa0 <__assert_fail@plt+0x5710>
   16ea8:	mov	r0, r1
   16eac:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16eb0:	cmp	r9, #2
   16eb4:	movwne	r1, #1
   16eb8:	orr	r0, r0, r1
   16ebc:	tst	r0, #1
   16ec0:	bne	16fe0 <__assert_fail@plt+0x5750>
   16ec4:	ldr	r0, [sp, #52]	; 0x34
   16ec8:	ldr	r1, [sp, #68]	; 0x44
   16ecc:	str	lr, [sp, #80]	; 0x50
   16ed0:	eor	r0, r0, #1
   16ed4:	tst	r0, #1
   16ed8:	bne	16fe0 <__assert_fail@plt+0x5750>
   16edc:	tst	r4, #1
   16ee0:	bne	16fa8 <__assert_fail@plt+0x5718>
   16ee4:	mov	r7, #0
   16ee8:	cmp	r1, #0
   16eec:	beq	16fd8 <__assert_fail@plt+0x5748>
   16ef0:	ldr	r0, [sp, #84]	; 0x54
   16ef4:	mov	r3, #0
   16ef8:	cmp	r6, #0
   16efc:	mov	r2, #0
   16f00:	mov	r4, r1
   16f04:	str	r3, [fp, #-72]	; 0xffffffb8
   16f08:	beq	16044 <__assert_fail@plt+0x47b4>
   16f0c:	b	16fe0 <__assert_fail@plt+0x5750>
   16f10:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16f14:	b	16f3c <__assert_fail@plt+0x56ac>
   16f18:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f1c:	mov	r2, #1
   16f20:	mov	lr, r4
   16f24:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16f28:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16f2c:	b	16f40 <__assert_fail@plt+0x56b0>
   16f30:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f34:	mov	r7, #2
   16f38:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16f3c:	ldr	r2, [sp, #84]	; 0x54
   16f40:	mov	r0, #0
   16f44:	ldr	r1, [fp, #12]
   16f48:	tst	r2, #1
   16f4c:	mov	r2, r7
   16f50:	mov	r3, lr
   16f54:	str	r0, [sp, #8]
   16f58:	ldr	r0, [sp, #64]	; 0x40
   16f5c:	movwne	r2, #4
   16f60:	cmp	r7, #2
   16f64:	movne	r2, r7
   16f68:	str	r2, [sp]
   16f6c:	mov	r2, ip
   16f70:	bic	r1, r1, #2
   16f74:	str	r0, [sp, #12]
   16f78:	ldr	r0, [sp, #72]	; 0x48
   16f7c:	str	r1, [sp, #4]
   16f80:	mov	r1, r6
   16f84:	str	r0, [sp, #16]
   16f88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16f8c:	bl	15fcc <__assert_fail@plt+0x473c>
   16f90:	mov	r8, r0
   16f94:	mov	r0, r8
   16f98:	sub	sp, fp, #28
   16f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fa0:	mov	r7, #2
   16fa4:	b	16f3c <__assert_fail@plt+0x56ac>
   16fa8:	mov	r0, #5
   16fac:	ldr	r2, [fp, #-84]	; 0xffffffac
   16fb0:	ldr	r3, [sp, #80]	; 0x50
   16fb4:	str	r0, [sp]
   16fb8:	ldr	r0, [fp, #12]
   16fbc:	str	r0, [sp, #4]
   16fc0:	ldr	r0, [fp, #16]
   16fc4:	str	r0, [sp, #8]
   16fc8:	ldr	r0, [sp, #64]	; 0x40
   16fcc:	str	r0, [sp, #12]
   16fd0:	ldr	r0, [sp, #72]	; 0x48
   16fd4:	b	16f84 <__assert_fail@plt+0x56f4>
   16fd8:	mov	r0, #0
   16fdc:	str	r0, [fp, #-72]	; 0xffffffb8
   16fe0:	ldr	r1, [sp, #92]	; 0x5c
   16fe4:	cmp	r1, #0
   16fe8:	beq	17028 <__assert_fail@plt+0x5798>
   16fec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ff0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ff4:	tst	r0, #1
   16ff8:	bne	1702c <__assert_fail@plt+0x579c>
   16ffc:	ldrb	r0, [r1]
   17000:	cmp	r0, #0
   17004:	beq	1702c <__assert_fail@plt+0x579c>
   17008:	add	r1, r1, #1
   1700c:	cmp	r8, r6
   17010:	strbcc	r0, [r2, r8]
   17014:	add	r8, r8, #1
   17018:	ldrb	r0, [r1], #1
   1701c:	cmp	r0, #0
   17020:	bne	1700c <__assert_fail@plt+0x577c>
   17024:	b	1702c <__assert_fail@plt+0x579c>
   17028:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1702c:	cmp	r8, r6
   17030:	movcc	r0, #0
   17034:	strbcc	r0, [r2, r8]
   17038:	b	16f94 <__assert_fail@plt+0x5704>
   1703c:	mov	r2, #1
   17040:	b	16f24 <__assert_fail@plt+0x5694>
   17044:	mov	r7, #5
   17048:	b	16f38 <__assert_fail@plt+0x56a8>
   1704c:	bl	11854 <abort@plt>
   17050:	mov	r3, r2
   17054:	mov	r2, #0
   17058:	b	1705c <__assert_fail@plt+0x57cc>
   1705c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17060:	add	fp, sp, #28
   17064:	sub	sp, sp, #36	; 0x24
   17068:	movw	r8, #49680	; 0xc210
   1706c:	cmp	r3, #0
   17070:	mov	r4, r2
   17074:	str	r2, [sp, #24]
   17078:	mov	r5, r1
   1707c:	mov	r6, r0
   17080:	str	r0, [sp, #20]
   17084:	movt	r8, #2
   17088:	movne	r8, r3
   1708c:	bl	11704 <__errno_location@plt>
   17090:	str	r0, [sp, #28]
   17094:	cmp	r4, #0
   17098:	add	sl, r8, #8
   1709c:	ldm	r8, {r3, r9}
   170a0:	ldr	r7, [r0]
   170a4:	ldr	r1, [r8, #40]	; 0x28
   170a8:	ldr	r2, [r8, #44]	; 0x2c
   170ac:	mov	r0, #0
   170b0:	orreq	r9, r9, #1
   170b4:	str	r7, [sp, #32]
   170b8:	mov	r7, r5
   170bc:	stm	sp, {r3, r9, sl}
   170c0:	str	r1, [sp, #12]
   170c4:	str	r2, [sp, #16]
   170c8:	mov	r1, #0
   170cc:	mov	r2, r6
   170d0:	mov	r3, r5
   170d4:	bl	15fcc <__assert_fail@plt+0x473c>
   170d8:	add	r4, r0, #1
   170dc:	mov	r5, r0
   170e0:	mov	r0, r4
   170e4:	bl	185f4 <__assert_fail@plt+0x6d64>
   170e8:	mov	r6, r0
   170ec:	ldr	r0, [r8]
   170f0:	ldr	r2, [r8, #44]	; 0x2c
   170f4:	ldr	r1, [r8, #40]	; 0x28
   170f8:	mov	r3, r7
   170fc:	stm	sp, {r0, r9, sl}
   17100:	str	r2, [sp, #16]
   17104:	str	r1, [sp, #12]
   17108:	mov	r0, r6
   1710c:	mov	r1, r4
   17110:	ldr	r2, [sp, #20]
   17114:	bl	15fcc <__assert_fail@plt+0x473c>
   17118:	ldr	r0, [sp, #24]
   1711c:	ldr	r1, [sp, #32]
   17120:	ldr	r2, [sp, #28]
   17124:	cmp	r0, #0
   17128:	str	r1, [r2]
   1712c:	strne	r5, [r0]
   17130:	mov	r0, r6
   17134:	sub	sp, fp, #28
   17138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1713c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17140:	add	fp, sp, #24
   17144:	movw	r5, #49524	; 0xc174
   17148:	movw	r8, #49520	; 0xc170
   1714c:	movt	r5, #2
   17150:	movt	r8, #2
   17154:	ldr	r0, [r5]
   17158:	ldr	r4, [r8]
   1715c:	cmp	r0, #2
   17160:	blt	1718c <__assert_fail@plt+0x58fc>
   17164:	add	r7, r4, #12
   17168:	mov	r6, #0
   1716c:	ldr	r0, [r7, r6, lsl #3]
   17170:	bl	19150 <__assert_fail@plt+0x78c0>
   17174:	ldr	r1, [r5]
   17178:	add	r2, r6, #2
   1717c:	add	r0, r6, #1
   17180:	mov	r6, r0
   17184:	cmp	r2, r1
   17188:	blt	1716c <__assert_fail@plt+0x58dc>
   1718c:	ldr	r0, [r4, #4]
   17190:	movw	r7, #49728	; 0xc240
   17194:	movt	r7, #2
   17198:	cmp	r0, r7
   1719c:	beq	171b4 <__assert_fail@plt+0x5924>
   171a0:	bl	19150 <__assert_fail@plt+0x78c0>
   171a4:	movw	r0, #49528	; 0xc178
   171a8:	mov	r6, #256	; 0x100
   171ac:	movt	r0, #2
   171b0:	strd	r6, [r0]
   171b4:	movw	r6, #49528	; 0xc178
   171b8:	movt	r6, #2
   171bc:	cmp	r4, r6
   171c0:	beq	171d0 <__assert_fail@plt+0x5940>
   171c4:	mov	r0, r4
   171c8:	bl	19150 <__assert_fail@plt+0x78c0>
   171cc:	str	r6, [r8]
   171d0:	mov	r0, #1
   171d4:	str	r0, [r5]
   171d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171dc:	movw	r3, #49680	; 0xc210
   171e0:	mvn	r2, #0
   171e4:	movt	r3, #2
   171e8:	b	171ec <__assert_fail@plt+0x595c>
   171ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171f0:	add	fp, sp, #28
   171f4:	sub	sp, sp, #44	; 0x2c
   171f8:	mov	r7, r3
   171fc:	str	r2, [sp, #36]	; 0x24
   17200:	str	r1, [sp, #32]
   17204:	mov	r5, r0
   17208:	bl	11704 <__errno_location@plt>
   1720c:	cmp	r5, #0
   17210:	blt	1737c <__assert_fail@plt+0x5aec>
   17214:	cmn	r5, #-2147483647	; 0x80000001
   17218:	beq	1737c <__assert_fail@plt+0x5aec>
   1721c:	movw	r8, #49524	; 0xc174
   17220:	movw	r4, #49520	; 0xc170
   17224:	str	r0, [sp, #28]
   17228:	ldr	r0, [r0]
   1722c:	movt	r8, #2
   17230:	movt	r4, #2
   17234:	ldr	r1, [r8]
   17238:	ldr	r6, [r4]
   1723c:	str	r0, [sp, #24]
   17240:	cmp	r1, r5
   17244:	ble	17250 <__assert_fail@plt+0x59c0>
   17248:	mov	sl, r6
   1724c:	b	172b8 <__assert_fail@plt+0x5a28>
   17250:	movw	r9, #49528	; 0xc178
   17254:	mov	r0, #8
   17258:	add	r2, r5, #1
   1725c:	str	r1, [fp, #-32]	; 0xffffffe0
   17260:	mvn	r3, #-2147483648	; 0x80000000
   17264:	movt	r9, #2
   17268:	str	r0, [sp]
   1726c:	sub	r2, r2, r1
   17270:	sub	r1, fp, #32
   17274:	subs	r0, r6, r9
   17278:	movne	r0, r6
   1727c:	bl	18724 <__assert_fail@plt+0x6e94>
   17280:	cmp	r6, r9
   17284:	mov	sl, r0
   17288:	str	r0, [r4]
   1728c:	ldrdeq	r0, [r9]
   17290:	stmeq	sl, {r0, r1}
   17294:	ldr	r1, [r8]
   17298:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1729c:	add	r0, sl, r1, lsl #3
   172a0:	sub	r1, r2, r1
   172a4:	lsl	r2, r1, #3
   172a8:	mov	r1, #0
   172ac:	bl	11728 <memset@plt>
   172b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172b4:	str	r0, [r8]
   172b8:	mov	r9, sl
   172bc:	ldr	r6, [r9, r5, lsl #3]!
   172c0:	ldr	r4, [r9, #4]!
   172c4:	ldm	r7, {r0, r1}
   172c8:	ldr	r2, [r7, #40]	; 0x28
   172cc:	ldr	r3, [r7, #44]	; 0x2c
   172d0:	orr	r8, r1, #1
   172d4:	add	r1, r7, #8
   172d8:	stm	sp, {r0, r8}
   172dc:	add	r0, sp, #8
   172e0:	str	r1, [sp, #20]
   172e4:	stm	r0, {r1, r2, r3}
   172e8:	mov	r0, r4
   172ec:	mov	r1, r6
   172f0:	ldr	r2, [sp, #32]
   172f4:	ldr	r3, [sp, #36]	; 0x24
   172f8:	bl	15fcc <__assert_fail@plt+0x473c>
   172fc:	cmp	r6, r0
   17300:	bhi	17364 <__assert_fail@plt+0x5ad4>
   17304:	add	r6, r0, #1
   17308:	movw	r0, #49728	; 0xc240
   1730c:	movt	r0, #2
   17310:	str	r6, [sl, r5, lsl #3]
   17314:	cmp	r4, r0
   17318:	beq	17324 <__assert_fail@plt+0x5a94>
   1731c:	mov	r0, r4
   17320:	bl	19150 <__assert_fail@plt+0x78c0>
   17324:	mov	r0, r6
   17328:	bl	185f4 <__assert_fail@plt+0x6d64>
   1732c:	str	r0, [r9]
   17330:	mov	r4, r0
   17334:	add	r3, sp, #8
   17338:	ldr	r0, [r7]
   1733c:	ldr	r1, [r7, #40]	; 0x28
   17340:	ldr	r2, [r7, #44]	; 0x2c
   17344:	stm	sp, {r0, r8}
   17348:	ldr	r0, [sp, #20]
   1734c:	stm	r3, {r0, r1, r2}
   17350:	mov	r0, r4
   17354:	mov	r1, r6
   17358:	ldr	r2, [sp, #32]
   1735c:	ldr	r3, [sp, #36]	; 0x24
   17360:	bl	15fcc <__assert_fail@plt+0x473c>
   17364:	ldr	r0, [sp, #28]
   17368:	ldr	r1, [sp, #24]
   1736c:	str	r1, [r0]
   17370:	mov	r0, r4
   17374:	sub	sp, fp, #28
   17378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1737c:	bl	11854 <abort@plt>
   17380:	movw	r3, #49680	; 0xc210
   17384:	movt	r3, #2
   17388:	b	171ec <__assert_fail@plt+0x595c>
   1738c:	movw	r3, #49680	; 0xc210
   17390:	mov	r1, r0
   17394:	mov	r0, #0
   17398:	mvn	r2, #0
   1739c:	movt	r3, #2
   173a0:	b	171ec <__assert_fail@plt+0x595c>
   173a4:	movw	r3, #49680	; 0xc210
   173a8:	mov	r2, r1
   173ac:	mov	r1, r0
   173b0:	mov	r0, #0
   173b4:	movt	r3, #2
   173b8:	b	171ec <__assert_fail@plt+0x595c>
   173bc:	push	{fp, lr}
   173c0:	mov	fp, sp
   173c4:	sub	sp, sp, #48	; 0x30
   173c8:	vmov.i32	q8, #0	; 0x00000000
   173cc:	mov	ip, #32
   173d0:	mov	r3, sp
   173d4:	mov	lr, r2
   173d8:	cmp	r1, #10
   173dc:	add	r2, r3, #16
   173e0:	vst1.64	{d16-d17}, [r3], ip
   173e4:	vst1.64	{d16-d17}, [r3]
   173e8:	vst1.64	{d16-d17}, [r2]
   173ec:	beq	1740c <__assert_fail@plt+0x5b7c>
   173f0:	str	r1, [sp]
   173f4:	mov	r3, sp
   173f8:	mov	r1, lr
   173fc:	mvn	r2, #0
   17400:	bl	171ec <__assert_fail@plt+0x595c>
   17404:	mov	sp, fp
   17408:	pop	{fp, pc}
   1740c:	bl	11854 <abort@plt>
   17410:	push	{r4, sl, fp, lr}
   17414:	add	fp, sp, #8
   17418:	sub	sp, sp, #48	; 0x30
   1741c:	mov	ip, r3
   17420:	mov	r3, sp
   17424:	vmov.i32	q8, #0	; 0x00000000
   17428:	mov	lr, #32
   1742c:	cmp	r1, #10
   17430:	add	r4, r3, #16
   17434:	vst1.64	{d16-d17}, [r3], lr
   17438:	vst1.64	{d16-d17}, [r3]
   1743c:	vst1.64	{d16-d17}, [r4]
   17440:	beq	17460 <__assert_fail@plt+0x5bd0>
   17444:	str	r1, [sp]
   17448:	mov	r1, r2
   1744c:	mov	r3, sp
   17450:	mov	r2, ip
   17454:	bl	171ec <__assert_fail@plt+0x595c>
   17458:	sub	sp, fp, #8
   1745c:	pop	{r4, sl, fp, pc}
   17460:	bl	11854 <abort@plt>
   17464:	mov	r2, r1
   17468:	mov	r1, r0
   1746c:	mov	r0, #0
   17470:	b	173bc <__assert_fail@plt+0x5b2c>
   17474:	mov	r3, r2
   17478:	mov	r2, r1
   1747c:	mov	r1, r0
   17480:	mov	r0, #0
   17484:	b	17410 <__assert_fail@plt+0x5b80>
   17488:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1748c:	add	fp, sp, #24
   17490:	sub	sp, sp, #48	; 0x30
   17494:	movw	r8, #49680	; 0xc210
   17498:	mov	lr, r0
   1749c:	mov	r3, sp
   174a0:	mov	ip, r1
   174a4:	movt	r8, #2
   174a8:	mov	r1, r3
   174ac:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   174b0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   174b4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   174b8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   174bc:	ubfx	r0, r2, #5, #3
   174c0:	and	r2, r2, #31
   174c4:	mov	r4, #1
   174c8:	add	r0, r3, r0, lsl #2
   174cc:	ldr	r1, [r0, #8]
   174d0:	bic	r4, r4, r1, lsr r2
   174d4:	eor	r1, r1, r4, lsl r2
   174d8:	mov	r2, ip
   174dc:	str	r1, [r0, #8]
   174e0:	mov	r0, #0
   174e4:	mov	r1, lr
   174e8:	bl	171ec <__assert_fail@plt+0x595c>
   174ec:	sub	sp, fp, #24
   174f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174f8:	add	fp, sp, #24
   174fc:	sub	sp, sp, #48	; 0x30
   17500:	movw	lr, #49680	; 0xc210
   17504:	mov	ip, r0
   17508:	mov	r3, sp
   1750c:	movt	lr, #2
   17510:	mov	r2, r3
   17514:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   17518:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1751c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   17520:	stm	r2, {r0, r4, r5, r6, r7, r8}
   17524:	ubfx	r0, r1, #5, #3
   17528:	and	r1, r1, #31
   1752c:	mov	r7, #1
   17530:	add	r0, r3, r0, lsl #2
   17534:	ldr	r2, [r0, #8]
   17538:	bic	r7, r7, r2, lsr r1
   1753c:	eor	r1, r2, r7, lsl r1
   17540:	mvn	r2, #0
   17544:	str	r1, [r0, #8]
   17548:	mov	r0, #0
   1754c:	mov	r1, ip
   17550:	bl	171ec <__assert_fail@plt+0x595c>
   17554:	sub	sp, fp, #24
   17558:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1755c:	push	{r4, r5, r6, r7, fp, lr}
   17560:	add	fp, sp, #16
   17564:	sub	sp, sp, #48	; 0x30
   17568:	movw	lr, #49680	; 0xc210
   1756c:	mov	ip, r0
   17570:	mov	r3, sp
   17574:	movt	lr, #2
   17578:	mov	r2, r3
   1757c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   17580:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17584:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17588:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1758c:	mov	r1, ip
   17590:	mvn	r2, #0
   17594:	ldr	r0, [sp, #12]
   17598:	orr	r0, r0, #67108864	; 0x4000000
   1759c:	str	r0, [sp, #12]
   175a0:	mov	r0, #0
   175a4:	bl	171ec <__assert_fail@plt+0x595c>
   175a8:	sub	sp, fp, #16
   175ac:	pop	{r4, r5, r6, r7, fp, pc}
   175b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   175b4:	add	fp, sp, #24
   175b8:	sub	sp, sp, #48	; 0x30
   175bc:	movw	r8, #49680	; 0xc210
   175c0:	mov	ip, r1
   175c4:	mov	lr, r0
   175c8:	mov	r3, sp
   175cc:	movt	r8, #2
   175d0:	mov	r2, r3
   175d4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   175d8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   175dc:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   175e0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   175e4:	mov	r1, lr
   175e8:	mov	r2, ip
   175ec:	ldr	r0, [sp, #12]
   175f0:	orr	r0, r0, #67108864	; 0x4000000
   175f4:	str	r0, [sp, #12]
   175f8:	mov	r0, #0
   175fc:	bl	171ec <__assert_fail@plt+0x595c>
   17600:	sub	sp, fp, #24
   17604:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17608:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1760c:	add	fp, sp, #24
   17610:	sub	sp, sp, #96	; 0x60
   17614:	mov	lr, sp
   17618:	vmov.i32	q8, #0	; 0x00000000
   1761c:	mov	ip, r2
   17620:	cmp	r1, #10
   17624:	add	r3, lr, #16
   17628:	mov	r2, lr
   1762c:	vst1.64	{d16-d17}, [r3]
   17630:	mov	r3, #28
   17634:	vst1.64	{d16-d17}, [r2], r3
   17638:	vst1.32	{d16-d17}, [r2]
   1763c:	beq	1767c <__assert_fail@plt+0x5dec>
   17640:	str	r1, [sp, #48]	; 0x30
   17644:	add	r3, sp, #48	; 0x30
   17648:	ldm	lr!, {r2, r4, r5, r6, r7}
   1764c:	add	r1, r3, #4
   17650:	stmia	r1!, {r2, r4, r5, r6, r7}
   17654:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   17658:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1765c:	mvn	r2, #0
   17660:	ldr	r1, [sp, #60]	; 0x3c
   17664:	orr	r1, r1, #67108864	; 0x4000000
   17668:	str	r1, [sp, #60]	; 0x3c
   1766c:	mov	r1, ip
   17670:	bl	171ec <__assert_fail@plt+0x595c>
   17674:	sub	sp, fp, #24
   17678:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1767c:	bl	11854 <abort@plt>
   17680:	push	{fp, lr}
   17684:	mov	fp, sp
   17688:	sub	sp, sp, #8
   1768c:	mvn	ip, #0
   17690:	str	ip, [sp]
   17694:	bl	176a0 <__assert_fail@plt+0x5e10>
   17698:	mov	sp, fp
   1769c:	pop	{fp, pc}
   176a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   176a4:	add	fp, sp, #24
   176a8:	sub	sp, sp, #48	; 0x30
   176ac:	movw	ip, #49680	; 0xc210
   176b0:	mov	lr, r3
   176b4:	mov	r3, sp
   176b8:	cmp	r1, #0
   176bc:	movt	ip, #2
   176c0:	cmpne	r2, #0
   176c4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   176c8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   176cc:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   176d0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   176d4:	mov	r3, #10
   176d8:	str	r3, [sp]
   176dc:	bne	176e4 <__assert_fail@plt+0x5e54>
   176e0:	bl	11854 <abort@plt>
   176e4:	ldr	ip, [fp, #8]
   176e8:	str	r2, [sp, #44]	; 0x2c
   176ec:	str	r1, [sp, #40]	; 0x28
   176f0:	mov	r3, sp
   176f4:	mov	r1, lr
   176f8:	mov	r2, ip
   176fc:	bl	171ec <__assert_fail@plt+0x595c>
   17700:	sub	sp, fp, #24
   17704:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17708:	push	{fp, lr}
   1770c:	mov	fp, sp
   17710:	sub	sp, sp, #8
   17714:	mov	r3, r2
   17718:	mov	r2, r1
   1771c:	mov	r1, r0
   17720:	mvn	r0, #0
   17724:	str	r0, [sp]
   17728:	mov	r0, #0
   1772c:	bl	176a0 <__assert_fail@plt+0x5e10>
   17730:	mov	sp, fp
   17734:	pop	{fp, pc}
   17738:	push	{fp, lr}
   1773c:	mov	fp, sp
   17740:	sub	sp, sp, #8
   17744:	mov	ip, r2
   17748:	mov	r2, r1
   1774c:	mov	r1, r0
   17750:	str	r3, [sp]
   17754:	mov	r0, #0
   17758:	mov	r3, ip
   1775c:	bl	176a0 <__assert_fail@plt+0x5e10>
   17760:	mov	sp, fp
   17764:	pop	{fp, pc}
   17768:	movw	r3, #49536	; 0xc180
   1776c:	movt	r3, #2
   17770:	b	171ec <__assert_fail@plt+0x595c>
   17774:	movw	r3, #49536	; 0xc180
   17778:	mov	r2, r1
   1777c:	mov	r1, r0
   17780:	mov	r0, #0
   17784:	movt	r3, #2
   17788:	b	171ec <__assert_fail@plt+0x595c>
   1778c:	movw	r3, #49536	; 0xc180
   17790:	mvn	r2, #0
   17794:	movt	r3, #2
   17798:	b	171ec <__assert_fail@plt+0x595c>
   1779c:	movw	r3, #49536	; 0xc180
   177a0:	mov	r1, r0
   177a4:	mov	r0, #0
   177a8:	mvn	r2, #0
   177ac:	movt	r3, #2
   177b0:	b	171ec <__assert_fail@plt+0x595c>
   177b4:	push	{r4, r5, fp, lr}
   177b8:	add	fp, sp, #8
   177bc:	mov	r5, r0
   177c0:	mov	r4, r1
   177c4:	mov	r0, #0
   177c8:	mov	r2, #5
   177cc:	mov	r1, r5
   177d0:	bl	11578 <dcgettext@plt>
   177d4:	cmp	r0, r5
   177d8:	popne	{r4, r5, fp, pc}
   177dc:	bl	1921c <__assert_fail@plt+0x798c>
   177e0:	ldrb	r1, [r0]
   177e4:	and	r1, r1, #223	; 0xdf
   177e8:	cmp	r1, #71	; 0x47
   177ec:	beq	17854 <__assert_fail@plt+0x5fc4>
   177f0:	cmp	r1, #85	; 0x55
   177f4:	bne	17878 <__assert_fail@plt+0x5fe8>
   177f8:	ldrb	r1, [r0, #1]
   177fc:	and	r1, r1, #223	; 0xdf
   17800:	cmp	r1, #84	; 0x54
   17804:	bne	17878 <__assert_fail@plt+0x5fe8>
   17808:	ldrb	r1, [r0, #2]
   1780c:	and	r1, r1, #223	; 0xdf
   17810:	cmp	r1, #70	; 0x46
   17814:	ldrbeq	r1, [r0, #3]
   17818:	cmpeq	r1, #45	; 0x2d
   1781c:	bne	17878 <__assert_fail@plt+0x5fe8>
   17820:	ldrb	r1, [r0, #4]
   17824:	cmp	r1, #56	; 0x38
   17828:	ldrbeq	r0, [r0, #5]
   1782c:	cmpeq	r0, #0
   17830:	bne	17878 <__assert_fail@plt+0x5fe8>
   17834:	ldrb	r1, [r5]
   17838:	movw	r2, #43432	; 0xa9a8
   1783c:	movw	r0, #43436	; 0xa9ac
   17840:	movt	r2, #1
   17844:	movt	r0, #1
   17848:	cmp	r1, #96	; 0x60
   1784c:	moveq	r0, r2
   17850:	pop	{r4, r5, fp, pc}
   17854:	ldrb	r1, [r0, #1]
   17858:	and	r1, r1, #223	; 0xdf
   1785c:	cmp	r1, #66	; 0x42
   17860:	bne	17878 <__assert_fail@plt+0x5fe8>
   17864:	ldrb	r1, [r0, #2]
   17868:	cmp	r1, #49	; 0x31
   1786c:	ldrbeq	r1, [r0, #3]
   17870:	cmpeq	r1, #56	; 0x38
   17874:	beq	17894 <__assert_fail@plt+0x6004>
   17878:	movw	r1, #43428	; 0xa9a4
   1787c:	movw	r0, #44777	; 0xaee9
   17880:	cmp	r4, #9
   17884:	movt	r1, #1
   17888:	movt	r0, #1
   1788c:	moveq	r0, r1
   17890:	pop	{r4, r5, fp, pc}
   17894:	ldrb	r1, [r0, #4]
   17898:	cmp	r1, #48	; 0x30
   1789c:	ldrbeq	r1, [r0, #5]
   178a0:	cmpeq	r1, #51	; 0x33
   178a4:	bne	17878 <__assert_fail@plt+0x5fe8>
   178a8:	ldrb	r1, [r0, #6]
   178ac:	cmp	r1, #48	; 0x30
   178b0:	ldrbeq	r0, [r0, #7]
   178b4:	cmpeq	r0, #0
   178b8:	bne	17878 <__assert_fail@plt+0x5fe8>
   178bc:	ldrb	r1, [r5]
   178c0:	movw	r2, #43440	; 0xa9b0
   178c4:	movw	r0, #43444	; 0xa9b4
   178c8:	movt	r2, #1
   178cc:	movt	r0, #1
   178d0:	b	17848 <__assert_fail@plt+0x5fb8>
   178d4:	push	{r4, sl, fp, lr}
   178d8:	add	fp, sp, #8
   178dc:	sub	sp, sp, #104	; 0x68
   178e0:	mov	r4, r0
   178e4:	movw	r0, #44501	; 0xadd5
   178e8:	mov	r1, sp
   178ec:	movt	r0, #1
   178f0:	bl	19a38 <__assert_fail@plt+0x81a8>
   178f4:	mov	r1, r0
   178f8:	mov	r0, #0
   178fc:	cmp	r1, #0
   17900:	bne	17918 <__assert_fail@plt+0x6088>
   17904:	ldr	r0, [sp, #96]	; 0x60
   17908:	ldr	r1, [sp, #100]	; 0x64
   1790c:	ldm	sp, {r2, r3}
   17910:	stm	r4, {r0, r1, r2, r3}
   17914:	mov	r0, r4
   17918:	sub	sp, fp, #8
   1791c:	pop	{r4, sl, fp, pc}
   17920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17924:	add	fp, sp, #28
   17928:	sub	sp, sp, #964	; 0x3c4
   1792c:	sub	sp, sp, #3072	; 0xc00
   17930:	mov	r4, r2
   17934:	mov	r5, r1
   17938:	cmn	r0, #100	; 0x64
   1793c:	beq	17950 <__assert_fail@plt+0x60c0>
   17940:	mov	r7, r0
   17944:	ldrb	r0, [r5]
   17948:	cmp	r0, #47	; 0x2f
   1794c:	bne	17964 <__assert_fail@plt+0x60d4>
   17950:	mov	r0, r5
   17954:	mov	r1, r4
   17958:	sub	sp, fp, #28
   1795c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17960:	b	18000 <__assert_fail@plt+0x6770>
   17964:	mov	sl, sp
   17968:	mov	r1, r7
   1796c:	mov	r2, r5
   17970:	mov	r0, sl
   17974:	bl	18ba8 <__assert_fail@plt+0x7318>
   17978:	cmp	r0, #0
   1797c:	beq	179f8 <__assert_fail@plt+0x6168>
   17980:	mov	r1, r4
   17984:	mov	r6, r0
   17988:	bl	18000 <__assert_fail@plt+0x6770>
   1798c:	mov	r9, r0
   17990:	bl	11704 <__errno_location@plt>
   17994:	ldr	r3, [r0]
   17998:	mov	r8, r0
   1799c:	cmp	r6, sl
   179a0:	beq	179b4 <__assert_fail@plt+0x6124>
   179a4:	mov	r0, r6
   179a8:	mov	r6, r3
   179ac:	bl	19150 <__assert_fail@plt+0x78c0>
   179b0:	mov	r3, r6
   179b4:	cmn	r9, #1
   179b8:	bne	17ab4 <__assert_fail@plt+0x6224>
   179bc:	sub	r0, r3, #13
   179c0:	cmp	r0, #25
   179c4:	bls	179e4 <__assert_fail@plt+0x6154>
   179c8:	sub	r0, r3, #1
   179cc:	cmp	r0, #2
   179d0:	bcc	179f8 <__assert_fail@plt+0x6168>
   179d4:	cmp	r3, #95	; 0x5f
   179d8:	beq	179f8 <__assert_fail@plt+0x6168>
   179dc:	str	r3, [r8]
   179e0:	b	17ab4 <__assert_fail@plt+0x6224>
   179e4:	movw	r2, #129	; 0x81
   179e8:	mov	r1, #1
   179ec:	movt	r2, #512	; 0x200
   179f0:	tst	r2, r1, lsl r0
   179f4:	beq	179c8 <__assert_fail@plt+0x6138>
   179f8:	mov	r0, sp
   179fc:	bl	19370 <__assert_fail@plt+0x7ae0>
   17a00:	cmp	r0, #0
   17a04:	bne	17ac0 <__assert_fail@plt+0x6230>
   17a08:	cmp	r7, #0
   17a0c:	blt	17a38 <__assert_fail@plt+0x61a8>
   17a10:	ldr	r0, [sp]
   17a14:	cmp	r0, r7
   17a18:	bne	17a38 <__assert_fail@plt+0x61a8>
   17a1c:	mov	r0, sp
   17a20:	bl	193e0 <__assert_fail@plt+0x7b50>
   17a24:	bl	11704 <__errno_location@plt>
   17a28:	mov	r1, #9
   17a2c:	mvn	r9, #0
   17a30:	str	r1, [r0]
   17a34:	b	17ab4 <__assert_fail@plt+0x6224>
   17a38:	mov	r0, r7
   17a3c:	bl	117e8 <fchdir@plt>
   17a40:	cmp	r0, #0
   17a44:	beq	17a68 <__assert_fail@plt+0x61d8>
   17a48:	bl	11704 <__errno_location@plt>
   17a4c:	ldr	r5, [r0]
   17a50:	mov	r4, r0
   17a54:	mov	r0, sp
   17a58:	bl	193e0 <__assert_fail@plt+0x7b50>
   17a5c:	str	r5, [r4]
   17a60:	mvn	r9, #0
   17a64:	b	17ab4 <__assert_fail@plt+0x6224>
   17a68:	mov	r0, r5
   17a6c:	mov	r1, r4
   17a70:	bl	18000 <__assert_fail@plt+0x6770>
   17a74:	mov	r9, r0
   17a78:	mov	r4, #0
   17a7c:	cmn	r0, #1
   17a80:	bne	17a8c <__assert_fail@plt+0x61fc>
   17a84:	bl	11704 <__errno_location@plt>
   17a88:	ldr	r4, [r0]
   17a8c:	mov	r0, sp
   17a90:	bl	193c4 <__assert_fail@plt+0x7b34>
   17a94:	cmp	r0, #0
   17a98:	bne	17acc <__assert_fail@plt+0x623c>
   17a9c:	mov	r0, sp
   17aa0:	bl	193e0 <__assert_fail@plt+0x7b50>
   17aa4:	cmp	r4, #0
   17aa8:	beq	17ab4 <__assert_fail@plt+0x6224>
   17aac:	bl	11704 <__errno_location@plt>
   17ab0:	str	r4, [r0]
   17ab4:	mov	r0, r9
   17ab8:	sub	sp, fp, #28
   17abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ac0:	bl	11704 <__errno_location@plt>
   17ac4:	ldr	r0, [r0]
   17ac8:	bl	192b4 <__assert_fail@plt+0x7a24>
   17acc:	bl	11704 <__errno_location@plt>
   17ad0:	ldr	r0, [r0]
   17ad4:	bl	192f4 <__assert_fail@plt+0x7a64>
   17ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17adc:	add	fp, sp, #28
   17ae0:	sub	sp, sp, #964	; 0x3c4
   17ae4:	sub	sp, sp, #3072	; 0xc00
   17ae8:	mov	r4, r2
   17aec:	mov	r5, r1
   17af0:	cmn	r0, #100	; 0x64
   17af4:	beq	17b08 <__assert_fail@plt+0x6278>
   17af8:	mov	r7, r0
   17afc:	ldrb	r0, [r5]
   17b00:	cmp	r0, #47	; 0x2f
   17b04:	bne	17b1c <__assert_fail@plt+0x628c>
   17b08:	mov	r0, r5
   17b0c:	mov	r1, r4
   17b10:	sub	sp, fp, #28
   17b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b18:	b	1808c <__assert_fail@plt+0x67fc>
   17b1c:	mov	sl, sp
   17b20:	mov	r1, r7
   17b24:	mov	r2, r5
   17b28:	mov	r0, sl
   17b2c:	bl	18ba8 <__assert_fail@plt+0x7318>
   17b30:	cmp	r0, #0
   17b34:	beq	17bb0 <__assert_fail@plt+0x6320>
   17b38:	mov	r1, r4
   17b3c:	mov	r6, r0
   17b40:	bl	1808c <__assert_fail@plt+0x67fc>
   17b44:	mov	r9, r0
   17b48:	bl	11704 <__errno_location@plt>
   17b4c:	ldr	r3, [r0]
   17b50:	mov	r8, r0
   17b54:	cmp	r6, sl
   17b58:	beq	17b6c <__assert_fail@plt+0x62dc>
   17b5c:	mov	r0, r6
   17b60:	mov	r6, r3
   17b64:	bl	19150 <__assert_fail@plt+0x78c0>
   17b68:	mov	r3, r6
   17b6c:	cmn	r9, #1
   17b70:	bne	17c6c <__assert_fail@plt+0x63dc>
   17b74:	sub	r0, r3, #13
   17b78:	cmp	r0, #25
   17b7c:	bls	17b9c <__assert_fail@plt+0x630c>
   17b80:	sub	r0, r3, #1
   17b84:	cmp	r0, #2
   17b88:	bcc	17bb0 <__assert_fail@plt+0x6320>
   17b8c:	cmp	r3, #95	; 0x5f
   17b90:	beq	17bb0 <__assert_fail@plt+0x6320>
   17b94:	str	r3, [r8]
   17b98:	b	17c6c <__assert_fail@plt+0x63dc>
   17b9c:	movw	r2, #129	; 0x81
   17ba0:	mov	r1, #1
   17ba4:	movt	r2, #512	; 0x200
   17ba8:	tst	r2, r1, lsl r0
   17bac:	beq	17b80 <__assert_fail@plt+0x62f0>
   17bb0:	mov	r0, sp
   17bb4:	bl	19370 <__assert_fail@plt+0x7ae0>
   17bb8:	cmp	r0, #0
   17bbc:	bne	17c78 <__assert_fail@plt+0x63e8>
   17bc0:	cmp	r7, #0
   17bc4:	blt	17bf0 <__assert_fail@plt+0x6360>
   17bc8:	ldr	r0, [sp]
   17bcc:	cmp	r0, r7
   17bd0:	bne	17bf0 <__assert_fail@plt+0x6360>
   17bd4:	mov	r0, sp
   17bd8:	bl	193e0 <__assert_fail@plt+0x7b50>
   17bdc:	bl	11704 <__errno_location@plt>
   17be0:	mov	r1, #9
   17be4:	mvn	r9, #0
   17be8:	str	r1, [r0]
   17bec:	b	17c6c <__assert_fail@plt+0x63dc>
   17bf0:	mov	r0, r7
   17bf4:	bl	117e8 <fchdir@plt>
   17bf8:	cmp	r0, #0
   17bfc:	beq	17c20 <__assert_fail@plt+0x6390>
   17c00:	bl	11704 <__errno_location@plt>
   17c04:	ldr	r5, [r0]
   17c08:	mov	r4, r0
   17c0c:	mov	r0, sp
   17c10:	bl	193e0 <__assert_fail@plt+0x7b50>
   17c14:	str	r5, [r4]
   17c18:	mvn	r9, #0
   17c1c:	b	17c6c <__assert_fail@plt+0x63dc>
   17c20:	mov	r0, r5
   17c24:	mov	r1, r4
   17c28:	bl	1808c <__assert_fail@plt+0x67fc>
   17c2c:	mov	r9, r0
   17c30:	mov	r4, #0
   17c34:	cmn	r0, #1
   17c38:	bne	17c44 <__assert_fail@plt+0x63b4>
   17c3c:	bl	11704 <__errno_location@plt>
   17c40:	ldr	r4, [r0]
   17c44:	mov	r0, sp
   17c48:	bl	193c4 <__assert_fail@plt+0x7b34>
   17c4c:	cmp	r0, #0
   17c50:	bne	17c84 <__assert_fail@plt+0x63f4>
   17c54:	mov	r0, sp
   17c58:	bl	193e0 <__assert_fail@plt+0x7b50>
   17c5c:	cmp	r4, #0
   17c60:	beq	17c6c <__assert_fail@plt+0x63dc>
   17c64:	bl	11704 <__errno_location@plt>
   17c68:	str	r4, [r0]
   17c6c:	mov	r0, r9
   17c70:	sub	sp, fp, #28
   17c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c78:	bl	11704 <__errno_location@plt>
   17c7c:	ldr	r0, [r0]
   17c80:	bl	192b4 <__assert_fail@plt+0x7a24>
   17c84:	bl	11704 <__errno_location@plt>
   17c88:	ldr	r0, [r0]
   17c8c:	bl	192f4 <__assert_fail@plt+0x7a64>
   17c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c94:	add	fp, sp, #28
   17c98:	sub	sp, sp, #964	; 0x3c4
   17c9c:	sub	sp, sp, #3072	; 0xc00
   17ca0:	mov	r4, r2
   17ca4:	mov	r5, r1
   17ca8:	cmn	r0, #100	; 0x64
   17cac:	beq	17cc0 <__assert_fail@plt+0x6430>
   17cb0:	mov	r7, r0
   17cb4:	ldrb	r0, [r5]
   17cb8:	cmp	r0, #47	; 0x2f
   17cbc:	bne	17cd4 <__assert_fail@plt+0x6444>
   17cc0:	mov	r0, r5
   17cc4:	mov	r1, r4
   17cc8:	sub	sp, fp, #28
   17ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd0:	b	11764 <setfilecon@plt>
   17cd4:	mov	sl, sp
   17cd8:	mov	r1, r7
   17cdc:	mov	r2, r5
   17ce0:	mov	r0, sl
   17ce4:	bl	18ba8 <__assert_fail@plt+0x7318>
   17ce8:	cmp	r0, #0
   17cec:	beq	17d68 <__assert_fail@plt+0x64d8>
   17cf0:	mov	r1, r4
   17cf4:	mov	r6, r0
   17cf8:	bl	11764 <setfilecon@plt>
   17cfc:	mov	r9, r0
   17d00:	bl	11704 <__errno_location@plt>
   17d04:	ldr	r3, [r0]
   17d08:	mov	r8, r0
   17d0c:	cmp	r6, sl
   17d10:	beq	17d24 <__assert_fail@plt+0x6494>
   17d14:	mov	r0, r6
   17d18:	mov	r6, r3
   17d1c:	bl	19150 <__assert_fail@plt+0x78c0>
   17d20:	mov	r3, r6
   17d24:	cmn	r9, #1
   17d28:	bne	17e24 <__assert_fail@plt+0x6594>
   17d2c:	sub	r0, r3, #13
   17d30:	cmp	r0, #25
   17d34:	bls	17d54 <__assert_fail@plt+0x64c4>
   17d38:	sub	r0, r3, #1
   17d3c:	cmp	r0, #2
   17d40:	bcc	17d68 <__assert_fail@plt+0x64d8>
   17d44:	cmp	r3, #95	; 0x5f
   17d48:	beq	17d68 <__assert_fail@plt+0x64d8>
   17d4c:	str	r3, [r8]
   17d50:	b	17e24 <__assert_fail@plt+0x6594>
   17d54:	movw	r2, #129	; 0x81
   17d58:	mov	r1, #1
   17d5c:	movt	r2, #512	; 0x200
   17d60:	tst	r2, r1, lsl r0
   17d64:	beq	17d38 <__assert_fail@plt+0x64a8>
   17d68:	mov	r0, sp
   17d6c:	bl	19370 <__assert_fail@plt+0x7ae0>
   17d70:	cmp	r0, #0
   17d74:	bne	17e30 <__assert_fail@plt+0x65a0>
   17d78:	cmp	r7, #0
   17d7c:	blt	17da8 <__assert_fail@plt+0x6518>
   17d80:	ldr	r0, [sp]
   17d84:	cmp	r0, r7
   17d88:	bne	17da8 <__assert_fail@plt+0x6518>
   17d8c:	mov	r0, sp
   17d90:	bl	193e0 <__assert_fail@plt+0x7b50>
   17d94:	bl	11704 <__errno_location@plt>
   17d98:	mov	r1, #9
   17d9c:	mvn	r9, #0
   17da0:	str	r1, [r0]
   17da4:	b	17e24 <__assert_fail@plt+0x6594>
   17da8:	mov	r0, r7
   17dac:	bl	117e8 <fchdir@plt>
   17db0:	cmp	r0, #0
   17db4:	beq	17dd8 <__assert_fail@plt+0x6548>
   17db8:	bl	11704 <__errno_location@plt>
   17dbc:	ldr	r5, [r0]
   17dc0:	mov	r4, r0
   17dc4:	mov	r0, sp
   17dc8:	bl	193e0 <__assert_fail@plt+0x7b50>
   17dcc:	str	r5, [r4]
   17dd0:	mvn	r9, #0
   17dd4:	b	17e24 <__assert_fail@plt+0x6594>
   17dd8:	mov	r0, r5
   17ddc:	mov	r1, r4
   17de0:	bl	11764 <setfilecon@plt>
   17de4:	mov	r9, r0
   17de8:	mov	r4, #0
   17dec:	cmn	r0, #1
   17df0:	bne	17dfc <__assert_fail@plt+0x656c>
   17df4:	bl	11704 <__errno_location@plt>
   17df8:	ldr	r4, [r0]
   17dfc:	mov	r0, sp
   17e00:	bl	193c4 <__assert_fail@plt+0x7b34>
   17e04:	cmp	r0, #0
   17e08:	bne	17e3c <__assert_fail@plt+0x65ac>
   17e0c:	mov	r0, sp
   17e10:	bl	193e0 <__assert_fail@plt+0x7b50>
   17e14:	cmp	r4, #0
   17e18:	beq	17e24 <__assert_fail@plt+0x6594>
   17e1c:	bl	11704 <__errno_location@plt>
   17e20:	str	r4, [r0]
   17e24:	mov	r0, r9
   17e28:	sub	sp, fp, #28
   17e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e30:	bl	11704 <__errno_location@plt>
   17e34:	ldr	r0, [r0]
   17e38:	bl	192b4 <__assert_fail@plt+0x7a24>
   17e3c:	bl	11704 <__errno_location@plt>
   17e40:	ldr	r0, [r0]
   17e44:	bl	192f4 <__assert_fail@plt+0x7a64>
   17e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e4c:	add	fp, sp, #28
   17e50:	sub	sp, sp, #964	; 0x3c4
   17e54:	sub	sp, sp, #3072	; 0xc00
   17e58:	mov	r4, r2
   17e5c:	mov	r5, r1
   17e60:	cmn	r0, #100	; 0x64
   17e64:	beq	17e78 <__assert_fail@plt+0x65e8>
   17e68:	mov	r7, r0
   17e6c:	ldrb	r0, [r5]
   17e70:	cmp	r0, #47	; 0x2f
   17e74:	bne	17e8c <__assert_fail@plt+0x65fc>
   17e78:	mov	r0, r5
   17e7c:	mov	r1, r4
   17e80:	sub	sp, fp, #28
   17e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e88:	b	1150c <lsetfilecon@plt>
   17e8c:	mov	sl, sp
   17e90:	mov	r1, r7
   17e94:	mov	r2, r5
   17e98:	mov	r0, sl
   17e9c:	bl	18ba8 <__assert_fail@plt+0x7318>
   17ea0:	cmp	r0, #0
   17ea4:	beq	17f20 <__assert_fail@plt+0x6690>
   17ea8:	mov	r1, r4
   17eac:	mov	r6, r0
   17eb0:	bl	1150c <lsetfilecon@plt>
   17eb4:	mov	r9, r0
   17eb8:	bl	11704 <__errno_location@plt>
   17ebc:	ldr	r3, [r0]
   17ec0:	mov	r8, r0
   17ec4:	cmp	r6, sl
   17ec8:	beq	17edc <__assert_fail@plt+0x664c>
   17ecc:	mov	r0, r6
   17ed0:	mov	r6, r3
   17ed4:	bl	19150 <__assert_fail@plt+0x78c0>
   17ed8:	mov	r3, r6
   17edc:	cmn	r9, #1
   17ee0:	bne	17fdc <__assert_fail@plt+0x674c>
   17ee4:	sub	r0, r3, #13
   17ee8:	cmp	r0, #25
   17eec:	bls	17f0c <__assert_fail@plt+0x667c>
   17ef0:	sub	r0, r3, #1
   17ef4:	cmp	r0, #2
   17ef8:	bcc	17f20 <__assert_fail@plt+0x6690>
   17efc:	cmp	r3, #95	; 0x5f
   17f00:	beq	17f20 <__assert_fail@plt+0x6690>
   17f04:	str	r3, [r8]
   17f08:	b	17fdc <__assert_fail@plt+0x674c>
   17f0c:	movw	r2, #129	; 0x81
   17f10:	mov	r1, #1
   17f14:	movt	r2, #512	; 0x200
   17f18:	tst	r2, r1, lsl r0
   17f1c:	beq	17ef0 <__assert_fail@plt+0x6660>
   17f20:	mov	r0, sp
   17f24:	bl	19370 <__assert_fail@plt+0x7ae0>
   17f28:	cmp	r0, #0
   17f2c:	bne	17fe8 <__assert_fail@plt+0x6758>
   17f30:	cmp	r7, #0
   17f34:	blt	17f60 <__assert_fail@plt+0x66d0>
   17f38:	ldr	r0, [sp]
   17f3c:	cmp	r0, r7
   17f40:	bne	17f60 <__assert_fail@plt+0x66d0>
   17f44:	mov	r0, sp
   17f48:	bl	193e0 <__assert_fail@plt+0x7b50>
   17f4c:	bl	11704 <__errno_location@plt>
   17f50:	mov	r1, #9
   17f54:	mvn	r9, #0
   17f58:	str	r1, [r0]
   17f5c:	b	17fdc <__assert_fail@plt+0x674c>
   17f60:	mov	r0, r7
   17f64:	bl	117e8 <fchdir@plt>
   17f68:	cmp	r0, #0
   17f6c:	beq	17f90 <__assert_fail@plt+0x6700>
   17f70:	bl	11704 <__errno_location@plt>
   17f74:	ldr	r5, [r0]
   17f78:	mov	r4, r0
   17f7c:	mov	r0, sp
   17f80:	bl	193e0 <__assert_fail@plt+0x7b50>
   17f84:	str	r5, [r4]
   17f88:	mvn	r9, #0
   17f8c:	b	17fdc <__assert_fail@plt+0x674c>
   17f90:	mov	r0, r5
   17f94:	mov	r1, r4
   17f98:	bl	1150c <lsetfilecon@plt>
   17f9c:	mov	r9, r0
   17fa0:	mov	r4, #0
   17fa4:	cmn	r0, #1
   17fa8:	bne	17fb4 <__assert_fail@plt+0x6724>
   17fac:	bl	11704 <__errno_location@plt>
   17fb0:	ldr	r4, [r0]
   17fb4:	mov	r0, sp
   17fb8:	bl	193c4 <__assert_fail@plt+0x7b34>
   17fbc:	cmp	r0, #0
   17fc0:	bne	17ff4 <__assert_fail@plt+0x6764>
   17fc4:	mov	r0, sp
   17fc8:	bl	193e0 <__assert_fail@plt+0x7b50>
   17fcc:	cmp	r4, #0
   17fd0:	beq	17fdc <__assert_fail@plt+0x674c>
   17fd4:	bl	11704 <__errno_location@plt>
   17fd8:	str	r4, [r0]
   17fdc:	mov	r0, r9
   17fe0:	sub	sp, fp, #28
   17fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fe8:	bl	11704 <__errno_location@plt>
   17fec:	ldr	r0, [r0]
   17ff0:	bl	192b4 <__assert_fail@plt+0x7a24>
   17ff4:	bl	11704 <__errno_location@plt>
   17ff8:	ldr	r0, [r0]
   17ffc:	bl	192f4 <__assert_fail@plt+0x7a64>
   18000:	push	{r4, sl, fp, lr}
   18004:	add	fp, sp, #8
   18008:	mov	r4, r1
   1800c:	bl	116d4 <getfilecon@plt>
   18010:	mov	r1, r4
   18014:	pop	{r4, sl, fp, lr}
   18018:	b	1801c <__assert_fail@plt+0x678c>
   1801c:	push	{r4, r5, fp, lr}
   18020:	add	fp, sp, #8
   18024:	cmp	r0, #10
   18028:	beq	18040 <__assert_fail@plt+0x67b0>
   1802c:	cmp	r0, #0
   18030:	bne	18088 <__assert_fail@plt+0x67f8>
   18034:	bl	11704 <__errno_location@plt>
   18038:	mov	r1, #95	; 0x5f
   1803c:	b	18080 <__assert_fail@plt+0x67f0>
   18040:	ldr	r5, [r1]
   18044:	mov	r4, r1
   18048:	movw	r1, #43532	; 0xaa0c
   1804c:	movt	r1, #1
   18050:	mov	r0, r5
   18054:	bl	114f4 <strcmp@plt>
   18058:	mov	r1, r0
   1805c:	mov	r0, #10
   18060:	cmp	r1, #0
   18064:	popne	{r4, r5, fp, pc}
   18068:	mov	r0, r5
   1806c:	bl	11800 <freecon@plt>
   18070:	mov	r0, #0
   18074:	str	r0, [r4]
   18078:	bl	11704 <__errno_location@plt>
   1807c:	mov	r1, #61	; 0x3d
   18080:	str	r1, [r0]
   18084:	mvn	r0, #0
   18088:	pop	{r4, r5, fp, pc}
   1808c:	push	{r4, sl, fp, lr}
   18090:	add	fp, sp, #8
   18094:	mov	r4, r1
   18098:	bl	11650 <lgetfilecon@plt>
   1809c:	mov	r1, r4
   180a0:	pop	{r4, sl, fp, lr}
   180a4:	b	1801c <__assert_fail@plt+0x678c>
   180a8:	push	{r4, sl, fp, lr}
   180ac:	add	fp, sp, #8
   180b0:	mov	r4, r1
   180b4:	bl	1159c <fgetfilecon@plt>
   180b8:	mov	r1, r4
   180bc:	pop	{r4, sl, fp, lr}
   180c0:	b	1801c <__assert_fail@plt+0x678c>
   180c4:	push	{r4, r5, r6, r7, fp, lr}
   180c8:	add	fp, sp, #16
   180cc:	mov	r4, r0
   180d0:	cmp	r0, #2
   180d4:	movhi	r0, r4
   180d8:	pophi	{r4, r5, r6, r7, fp, pc}
   180dc:	mov	r0, r4
   180e0:	bl	19408 <__assert_fail@plt+0x7b78>
   180e4:	mov	r5, r0
   180e8:	bl	11704 <__errno_location@plt>
   180ec:	ldr	r7, [r0]
   180f0:	mov	r6, r0
   180f4:	mov	r0, r4
   180f8:	bl	11860 <close@plt>
   180fc:	mov	r0, r5
   18100:	str	r7, [r6]
   18104:	pop	{r4, r5, r6, r7, fp, pc}
   18108:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1810c:	add	fp, sp, #24
   18110:	sub	sp, sp, #32
   18114:	ldr	r6, [fp, #12]
   18118:	ldr	r7, [fp, #8]
   1811c:	mov	r4, r2
   18120:	mov	r8, r0
   18124:	cmp	r1, #0
   18128:	beq	18150 <__assert_fail@plt+0x68c0>
   1812c:	movw	r2, #43542	; 0xaa16
   18130:	mov	r5, r1
   18134:	str	r3, [sp, #4]
   18138:	str	r4, [sp]
   1813c:	mov	r0, r8
   18140:	mov	r1, #1
   18144:	movt	r2, #1
   18148:	mov	r3, r5
   1814c:	b	18168 <__assert_fail@plt+0x68d8>
   18150:	movw	r2, #43554	; 0xaa22
   18154:	str	r3, [sp]
   18158:	mov	r0, r8
   1815c:	mov	r1, #1
   18160:	mov	r3, r4
   18164:	movt	r2, #1
   18168:	bl	1174c <__fprintf_chk@plt>
   1816c:	movw	r1, #43561	; 0xaa29
   18170:	mov	r0, #0
   18174:	mov	r2, #5
   18178:	movt	r1, #1
   1817c:	bl	11578 <dcgettext@plt>
   18180:	movw	r2, #44279	; 0xacf7
   18184:	mov	r3, r0
   18188:	movw	r0, #2022	; 0x7e6
   1818c:	mov	r1, #1
   18190:	str	r0, [sp]
   18194:	movt	r2, #1
   18198:	mov	r0, r8
   1819c:	bl	1174c <__fprintf_chk@plt>
   181a0:	movw	r4, #41258	; 0xa12a
   181a4:	mov	r1, r8
   181a8:	movt	r4, #1
   181ac:	mov	r0, r4
   181b0:	bl	114d0 <fputs_unlocked@plt>
   181b4:	movw	r1, #43565	; 0xaa2d
   181b8:	mov	r0, #0
   181bc:	mov	r2, #5
   181c0:	movt	r1, #1
   181c4:	bl	11578 <dcgettext@plt>
   181c8:	movw	r3, #43736	; 0xaad8
   181cc:	mov	r2, r0
   181d0:	mov	r0, r8
   181d4:	mov	r1, #1
   181d8:	movt	r3, #1
   181dc:	bl	1174c <__fprintf_chk@plt>
   181e0:	mov	r0, r4
   181e4:	mov	r1, r8
   181e8:	bl	114d0 <fputs_unlocked@plt>
   181ec:	cmp	r6, #9
   181f0:	bhi	18254 <__assert_fail@plt+0x69c4>
   181f4:	add	r0, pc, #0
   181f8:	ldr	pc, [r0, r6, lsl #2]
   181fc:	andeq	r8, r1, ip, lsr #8
   18200:	andeq	r8, r1, r4, lsr #4
   18204:	andeq	r8, r1, r0, ror #4
   18208:	andeq	r8, r1, r8, lsl #5
   1820c:			; <UNDEFINED> instruction: 0x000182b0
   18210:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18214:	andeq	r8, r1, r0, lsl #6
   18218:	andeq	r8, r1, r8, lsr r3
   1821c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18220:	andeq	r8, r1, r0, lsl #7
   18224:	movw	r1, #43770	; 0xaafa
   18228:	mov	r0, #0
   1822c:	mov	r2, #5
   18230:	movt	r1, #1
   18234:	bl	11578 <dcgettext@plt>
   18238:	ldr	r3, [r7]
   1823c:	mov	r2, r0
   18240:	mov	r0, r8
   18244:	mov	r1, #1
   18248:	sub	sp, fp, #24
   1824c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18250:	b	1174c <__fprintf_chk@plt>
   18254:	movw	r1, #44089	; 0xac39
   18258:	movt	r1, #1
   1825c:	b	18388 <__assert_fail@plt+0x6af8>
   18260:	movw	r1, #43786	; 0xab0a
   18264:	mov	r0, #0
   18268:	mov	r2, #5
   1826c:	movt	r1, #1
   18270:	bl	11578 <dcgettext@plt>
   18274:	mov	r2, r0
   18278:	ldr	r3, [r7]
   1827c:	ldr	r0, [r7, #4]
   18280:	str	r0, [sp]
   18284:	b	18374 <__assert_fail@plt+0x6ae4>
   18288:	movw	r1, #43809	; 0xab21
   1828c:	mov	r0, #0
   18290:	mov	r2, #5
   18294:	movt	r1, #1
   18298:	bl	11578 <dcgettext@plt>
   1829c:	ldr	r3, [r7]
   182a0:	mov	r2, r0
   182a4:	ldmib	r7, {r0, r1}
   182a8:	stm	sp, {r0, r1}
   182ac:	b	18374 <__assert_fail@plt+0x6ae4>
   182b0:	movw	r1, #43837	; 0xab3d
   182b4:	mov	r0, #0
   182b8:	mov	r2, #5
   182bc:	movt	r1, #1
   182c0:	bl	11578 <dcgettext@plt>
   182c4:	ldr	r3, [r7]
   182c8:	mov	r2, r0
   182cc:	ldmib	r7, {r0, r1, r7}
   182d0:	stm	sp, {r0, r1, r7}
   182d4:	b	18374 <__assert_fail@plt+0x6ae4>
   182d8:	movw	r1, #43869	; 0xab5d
   182dc:	mov	r0, #0
   182e0:	mov	r2, #5
   182e4:	movt	r1, #1
   182e8:	bl	11578 <dcgettext@plt>
   182ec:	ldr	r3, [r7]
   182f0:	mov	r2, r0
   182f4:	ldmib	r7, {r0, r1, r6, r7}
   182f8:	stm	sp, {r0, r1, r6, r7}
   182fc:	b	18374 <__assert_fail@plt+0x6ae4>
   18300:	movw	r1, #43905	; 0xab81
   18304:	mov	r0, #0
   18308:	mov	r2, #5
   1830c:	movt	r1, #1
   18310:	bl	11578 <dcgettext@plt>
   18314:	ldr	r3, [r7]
   18318:	mov	r2, r0
   1831c:	ldmib	r7, {r0, r1, r6}
   18320:	ldr	r5, [r7, #16]
   18324:	ldr	r7, [r7, #20]
   18328:	stm	sp, {r0, r1, r6}
   1832c:	str	r5, [sp, #12]
   18330:	str	r7, [sp, #16]
   18334:	b	18374 <__assert_fail@plt+0x6ae4>
   18338:	movw	r1, #43945	; 0xaba9
   1833c:	mov	r0, #0
   18340:	mov	r2, #5
   18344:	movt	r1, #1
   18348:	bl	11578 <dcgettext@plt>
   1834c:	ldr	r3, [r7]
   18350:	mov	r2, r0
   18354:	ldmib	r7, {r0, r1, r6}
   18358:	ldr	r5, [r7, #16]
   1835c:	ldr	r4, [r7, #20]
   18360:	ldr	r7, [r7, #24]
   18364:	stm	sp, {r0, r1, r6}
   18368:	str	r5, [sp, #12]
   1836c:	str	r4, [sp, #16]
   18370:	str	r7, [sp, #20]
   18374:	mov	r0, r8
   18378:	mov	r1, #1
   1837c:	b	18428 <__assert_fail@plt+0x6b98>
   18380:	movw	r1, #44037	; 0xac05
   18384:	movt	r1, #1
   18388:	mov	r0, #0
   1838c:	mov	r2, #5
   18390:	bl	11578 <dcgettext@plt>
   18394:	mov	ip, r0
   18398:	ldr	r3, [r7]
   1839c:	ldr	r0, [r7, #4]
   183a0:	ldr	r1, [r7, #8]
   183a4:	ldr	r6, [r7, #12]
   183a8:	ldr	r5, [r7, #16]
   183ac:	ldr	r4, [r7, #20]
   183b0:	ldr	r2, [r7, #24]
   183b4:	ldr	lr, [r7, #28]
   183b8:	ldr	r7, [r7, #32]
   183bc:	stm	sp, {r0, r1, r6}
   183c0:	str	r5, [sp, #12]
   183c4:	str	r4, [sp, #16]
   183c8:	str	r2, [sp, #20]
   183cc:	str	lr, [sp, #24]
   183d0:	str	r7, [sp, #28]
   183d4:	b	1841c <__assert_fail@plt+0x6b8c>
   183d8:	movw	r1, #43989	; 0xabd5
   183dc:	mov	r0, #0
   183e0:	mov	r2, #5
   183e4:	movt	r1, #1
   183e8:	bl	11578 <dcgettext@plt>
   183ec:	mov	ip, r0
   183f0:	ldr	r3, [r7]
   183f4:	ldmib	r7, {r0, r1, r6}
   183f8:	ldr	r5, [r7, #16]
   183fc:	ldr	r4, [r7, #20]
   18400:	ldr	r2, [r7, #24]
   18404:	ldr	r7, [r7, #28]
   18408:	stm	sp, {r0, r1, r6}
   1840c:	str	r5, [sp, #12]
   18410:	str	r4, [sp, #16]
   18414:	str	r2, [sp, #20]
   18418:	str	r7, [sp, #24]
   1841c:	mov	r0, r8
   18420:	mov	r1, #1
   18424:	mov	r2, ip
   18428:	bl	1174c <__fprintf_chk@plt>
   1842c:	sub	sp, fp, #24
   18430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18434:	push	{r4, sl, fp, lr}
   18438:	add	fp, sp, #8
   1843c:	sub	sp, sp, #8
   18440:	ldr	ip, [fp, #8]
   18444:	mov	lr, #0
   18448:	ldr	r4, [ip, lr, lsl #2]
   1844c:	add	lr, lr, #1
   18450:	cmp	r4, #0
   18454:	bne	18448 <__assert_fail@plt+0x6bb8>
   18458:	sub	r4, lr, #1
   1845c:	str	ip, [sp]
   18460:	str	r4, [sp, #4]
   18464:	bl	18108 <__assert_fail@plt+0x6878>
   18468:	sub	sp, fp, #8
   1846c:	pop	{r4, sl, fp, pc}
   18470:	push	{r4, r5, fp, lr}
   18474:	add	fp, sp, #8
   18478:	sub	sp, sp, #48	; 0x30
   1847c:	ldr	r4, [fp, #8]
   18480:	mov	ip, #0
   18484:	add	lr, sp, #8
   18488:	ldr	r5, [r4]
   1848c:	cmp	r5, #0
   18490:	str	r5, [lr, ip, lsl #2]
   18494:	beq	184a8 <__assert_fail@plt+0x6c18>
   18498:	add	ip, ip, #1
   1849c:	add	r4, r4, #4
   184a0:	cmp	ip, #10
   184a4:	bcc	18488 <__assert_fail@plt+0x6bf8>
   184a8:	str	lr, [sp]
   184ac:	str	ip, [sp, #4]
   184b0:	bl	18108 <__assert_fail@plt+0x6878>
   184b4:	sub	sp, fp, #8
   184b8:	pop	{r4, r5, fp, pc}
   184bc:	push	{fp, lr}
   184c0:	mov	fp, sp
   184c4:	sub	sp, sp, #8
   184c8:	add	ip, fp, #8
   184cc:	str	ip, [sp, #4]
   184d0:	str	ip, [sp]
   184d4:	bl	18470 <__assert_fail@plt+0x6be0>
   184d8:	mov	sp, fp
   184dc:	pop	{fp, pc}
   184e0:	push	{fp, lr}
   184e4:	mov	fp, sp
   184e8:	movw	r0, #49604	; 0xc1c4
   184ec:	movt	r0, #2
   184f0:	ldr	r1, [r0]
   184f4:	movw	r0, #41258	; 0xa12a
   184f8:	movt	r0, #1
   184fc:	bl	114d0 <fputs_unlocked@plt>
   18500:	movw	r1, #44149	; 0xac75
   18504:	mov	r0, #0
   18508:	mov	r2, #5
   1850c:	movt	r1, #1
   18510:	bl	11578 <dcgettext@plt>
   18514:	movw	r2, #44169	; 0xac89
   18518:	mov	r1, r0
   1851c:	mov	r0, #1
   18520:	movt	r2, #1
   18524:	bl	11734 <__printf_chk@plt>
   18528:	movw	r1, #44191	; 0xac9f
   1852c:	mov	r0, #0
   18530:	mov	r2, #5
   18534:	movt	r1, #1
   18538:	bl	11578 <dcgettext@plt>
   1853c:	movw	r2, #41404	; 0xa1bc
   18540:	movw	r3, #41873	; 0xa391
   18544:	mov	r1, r0
   18548:	mov	r0, #1
   1854c:	movt	r2, #1
   18550:	movt	r3, #1
   18554:	bl	11734 <__printf_chk@plt>
   18558:	movw	r1, #44211	; 0xacb3
   1855c:	mov	r0, #0
   18560:	mov	r2, #5
   18564:	movt	r1, #1
   18568:	bl	11578 <dcgettext@plt>
   1856c:	movw	r2, #44250	; 0xacda
   18570:	mov	r1, r0
   18574:	mov	r0, #1
   18578:	movt	r2, #1
   1857c:	pop	{fp, lr}
   18580:	b	11734 <__printf_chk@plt>
   18584:	b	18588 <__assert_fail@plt+0x6cf8>
   18588:	push	{r4, r5, r6, sl, fp, lr}
   1858c:	add	fp, sp, #16
   18590:	mov	r4, r2
   18594:	mov	r5, r1
   18598:	mov	r6, r0
   1859c:	bl	19334 <__assert_fail@plt+0x7aa4>
   185a0:	cmp	r0, #0
   185a4:	popne	{r4, r5, r6, sl, fp, pc}
   185a8:	cmp	r6, #0
   185ac:	beq	185c0 <__assert_fail@plt+0x6d30>
   185b0:	cmp	r5, #0
   185b4:	cmpne	r4, #0
   185b8:	bne	185c0 <__assert_fail@plt+0x6d30>
   185bc:	pop	{r4, r5, r6, sl, fp, pc}
   185c0:	bl	18a14 <__assert_fail@plt+0x7184>
   185c4:	push	{fp, lr}
   185c8:	mov	fp, sp
   185cc:	bl	18b28 <__assert_fail@plt+0x7298>
   185d0:	cmp	r0, #0
   185d4:	popne	{fp, pc}
   185d8:	bl	18a14 <__assert_fail@plt+0x7184>
   185dc:	push	{fp, lr}
   185e0:	mov	fp, sp
   185e4:	bl	18b28 <__assert_fail@plt+0x7298>
   185e8:	cmp	r0, #0
   185ec:	popne	{fp, pc}
   185f0:	bl	18a14 <__assert_fail@plt+0x7184>
   185f4:	push	{fp, lr}
   185f8:	mov	fp, sp
   185fc:	bl	18b28 <__assert_fail@plt+0x7298>
   18600:	cmp	r0, #0
   18604:	popne	{fp, pc}
   18608:	bl	18a14 <__assert_fail@plt+0x7184>
   1860c:	push	{r4, r5, fp, lr}
   18610:	add	fp, sp, #8
   18614:	mov	r4, r1
   18618:	mov	r5, r0
   1861c:	bl	18b58 <__assert_fail@plt+0x72c8>
   18620:	cmp	r0, #0
   18624:	popne	{r4, r5, fp, pc}
   18628:	cmp	r5, #0
   1862c:	beq	1863c <__assert_fail@plt+0x6dac>
   18630:	cmp	r4, #0
   18634:	bne	1863c <__assert_fail@plt+0x6dac>
   18638:	pop	{r4, r5, fp, pc}
   1863c:	bl	18a14 <__assert_fail@plt+0x7184>
   18640:	push	{fp, lr}
   18644:	mov	fp, sp
   18648:	cmp	r1, #0
   1864c:	orreq	r1, r1, #1
   18650:	bl	18b58 <__assert_fail@plt+0x72c8>
   18654:	cmp	r0, #0
   18658:	popne	{fp, pc}
   1865c:	bl	18a14 <__assert_fail@plt+0x7184>
   18660:	push	{fp, lr}
   18664:	mov	fp, sp
   18668:	clz	r3, r2
   1866c:	lsr	ip, r3, #5
   18670:	clz	r3, r1
   18674:	lsr	r3, r3, #5
   18678:	orrs	r3, r3, ip
   1867c:	movwne	r1, #1
   18680:	movwne	r2, #1
   18684:	bl	19334 <__assert_fail@plt+0x7aa4>
   18688:	cmp	r0, #0
   1868c:	popne	{fp, pc}
   18690:	bl	18a14 <__assert_fail@plt+0x7184>
   18694:	push	{fp, lr}
   18698:	mov	fp, sp
   1869c:	mov	r2, r1
   186a0:	mov	r1, r0
   186a4:	mov	r0, #0
   186a8:	bl	19334 <__assert_fail@plt+0x7aa4>
   186ac:	cmp	r0, #0
   186b0:	popne	{fp, pc}
   186b4:	bl	18a14 <__assert_fail@plt+0x7184>
   186b8:	mov	r2, r1
   186bc:	mov	r1, r0
   186c0:	mov	r0, #0
   186c4:	b	18660 <__assert_fail@plt+0x6dd0>
   186c8:	mov	r2, #1
   186cc:	b	186d0 <__assert_fail@plt+0x6e40>
   186d0:	push	{r4, r5, fp, lr}
   186d4:	add	fp, sp, #8
   186d8:	ldr	r5, [r1]
   186dc:	mov	r4, r1
   186e0:	cmp	r0, #0
   186e4:	beq	186fc <__assert_fail@plt+0x6e6c>
   186e8:	mov	r1, #1
   186ec:	add	r1, r1, r5, lsr #1
   186f0:	adds	r5, r5, r1
   186f4:	bcc	18714 <__assert_fail@plt+0x6e84>
   186f8:	bl	18a14 <__assert_fail@plt+0x7184>
   186fc:	cmp	r5, #0
   18700:	bne	18714 <__assert_fail@plt+0x6e84>
   18704:	mov	r1, #64	; 0x40
   18708:	cmp	r2, #64	; 0x40
   1870c:	udiv	r5, r1, r2
   18710:	addhi	r5, r5, #1
   18714:	mov	r1, r5
   18718:	bl	18588 <__assert_fail@plt+0x6cf8>
   1871c:	str	r5, [r4]
   18720:	pop	{r4, r5, fp, pc}
   18724:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18728:	add	fp, sp, #24
   1872c:	ldr	r6, [r1]
   18730:	mov	r8, r1
   18734:	ldr	r4, [fp, #8]
   18738:	add	r1, r6, r6, asr #1
   1873c:	cmp	r1, r6
   18740:	mvnvs	r1, #-2147483648	; 0x80000000
   18744:	cmp	r1, r3
   18748:	mov	r5, r1
   1874c:	movgt	r5, r3
   18750:	cmn	r3, #1
   18754:	movle	r5, r1
   18758:	cmn	r4, #1
   1875c:	ble	1877c <__assert_fail@plt+0x6eec>
   18760:	cmp	r4, #0
   18764:	beq	187d0 <__assert_fail@plt+0x6f40>
   18768:	cmn	r5, #1
   1876c:	ble	187a4 <__assert_fail@plt+0x6f14>
   18770:	mvn	r7, #-2147483648	; 0x80000000
   18774:	udiv	r1, r7, r4
   18778:	b	18798 <__assert_fail@plt+0x6f08>
   1877c:	cmn	r5, #1
   18780:	ble	187c0 <__assert_fail@plt+0x6f30>
   18784:	cmn	r4, #1
   18788:	beq	187d0 <__assert_fail@plt+0x6f40>
   1878c:	mov	r1, #-2147483648	; 0x80000000
   18790:	mvn	r7, #-2147483648	; 0x80000000
   18794:	sdiv	r1, r1, r4
   18798:	cmp	r1, r5
   1879c:	bge	187d0 <__assert_fail@plt+0x6f40>
   187a0:	b	187e0 <__assert_fail@plt+0x6f50>
   187a4:	beq	187d0 <__assert_fail@plt+0x6f40>
   187a8:	mov	r1, #-2147483648	; 0x80000000
   187ac:	mvn	r7, #-2147483648	; 0x80000000
   187b0:	sdiv	r1, r1, r5
   187b4:	cmp	r1, r4
   187b8:	bge	187d0 <__assert_fail@plt+0x6f40>
   187bc:	b	187e0 <__assert_fail@plt+0x6f50>
   187c0:	mvn	r7, #-2147483648	; 0x80000000
   187c4:	sdiv	r1, r7, r4
   187c8:	cmp	r5, r1
   187cc:	blt	187e0 <__assert_fail@plt+0x6f50>
   187d0:	mul	r1, r5, r4
   187d4:	mov	r7, #64	; 0x40
   187d8:	cmp	r1, #63	; 0x3f
   187dc:	bgt	187e8 <__assert_fail@plt+0x6f58>
   187e0:	sdiv	r5, r7, r4
   187e4:	mul	r1, r5, r4
   187e8:	cmp	r0, #0
   187ec:	moveq	r7, #0
   187f0:	streq	r7, [r8]
   187f4:	sub	r7, r5, r6
   187f8:	cmp	r7, r2
   187fc:	bge	188a0 <__assert_fail@plt+0x7010>
   18800:	add	r5, r6, r2
   18804:	mov	r2, #0
   18808:	mov	r1, #0
   1880c:	cmp	r5, r3
   18810:	movwgt	r2, #1
   18814:	cmn	r3, #1
   18818:	movwgt	r1, #1
   1881c:	cmp	r5, r6
   18820:	bvs	18888 <__assert_fail@plt+0x6ff8>
   18824:	ands	r1, r1, r2
   18828:	bne	18888 <__assert_fail@plt+0x6ff8>
   1882c:	cmn	r4, #1
   18830:	ble	18850 <__assert_fail@plt+0x6fc0>
   18834:	cmp	r4, #0
   18838:	beq	1889c <__assert_fail@plt+0x700c>
   1883c:	cmn	r5, #1
   18840:	ble	18874 <__assert_fail@plt+0x6fe4>
   18844:	mvn	r1, #-2147483648	; 0x80000000
   18848:	udiv	r1, r1, r4
   1884c:	b	18868 <__assert_fail@plt+0x6fd8>
   18850:	cmn	r5, #1
   18854:	ble	1888c <__assert_fail@plt+0x6ffc>
   18858:	cmn	r4, #1
   1885c:	beq	1889c <__assert_fail@plt+0x700c>
   18860:	mov	r1, #-2147483648	; 0x80000000
   18864:	sdiv	r1, r1, r4
   18868:	cmp	r1, r5
   1886c:	bge	1889c <__assert_fail@plt+0x700c>
   18870:	b	18888 <__assert_fail@plt+0x6ff8>
   18874:	beq	1889c <__assert_fail@plt+0x700c>
   18878:	mov	r1, #-2147483648	; 0x80000000
   1887c:	sdiv	r1, r1, r5
   18880:	cmp	r1, r4
   18884:	bge	1889c <__assert_fail@plt+0x700c>
   18888:	bl	18a14 <__assert_fail@plt+0x7184>
   1888c:	mvn	r1, #-2147483648	; 0x80000000
   18890:	sdiv	r1, r1, r4
   18894:	cmp	r5, r1
   18898:	blt	18888 <__assert_fail@plt+0x6ff8>
   1889c:	mul	r1, r5, r4
   188a0:	bl	1860c <__assert_fail@plt+0x6d7c>
   188a4:	str	r5, [r8]
   188a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   188ac:	push	{fp, lr}
   188b0:	mov	fp, sp
   188b4:	mov	r1, #1
   188b8:	bl	18ad4 <__assert_fail@plt+0x7244>
   188bc:	cmp	r0, #0
   188c0:	popne	{fp, pc}
   188c4:	bl	18a14 <__assert_fail@plt+0x7184>
   188c8:	push	{fp, lr}
   188cc:	mov	fp, sp
   188d0:	bl	18ad4 <__assert_fail@plt+0x7244>
   188d4:	cmp	r0, #0
   188d8:	popne	{fp, pc}
   188dc:	bl	18a14 <__assert_fail@plt+0x7184>
   188e0:	push	{fp, lr}
   188e4:	mov	fp, sp
   188e8:	mov	r1, #1
   188ec:	bl	18ad4 <__assert_fail@plt+0x7244>
   188f0:	cmp	r0, #0
   188f4:	popne	{fp, pc}
   188f8:	bl	18a14 <__assert_fail@plt+0x7184>
   188fc:	push	{fp, lr}
   18900:	mov	fp, sp
   18904:	bl	18ad4 <__assert_fail@plt+0x7244>
   18908:	cmp	r0, #0
   1890c:	popne	{fp, pc}
   18910:	bl	18a14 <__assert_fail@plt+0x7184>
   18914:	push	{r4, r5, r6, sl, fp, lr}
   18918:	add	fp, sp, #16
   1891c:	mov	r5, r0
   18920:	mov	r0, r1
   18924:	mov	r4, r1
   18928:	bl	18b28 <__assert_fail@plt+0x7298>
   1892c:	cmp	r0, #0
   18930:	beq	1894c <__assert_fail@plt+0x70bc>
   18934:	mov	r1, r5
   18938:	mov	r2, r4
   1893c:	mov	r6, r0
   18940:	bl	1153c <memcpy@plt>
   18944:	mov	r0, r6
   18948:	pop	{r4, r5, r6, sl, fp, pc}
   1894c:	bl	18a14 <__assert_fail@plt+0x7184>
   18950:	push	{r4, r5, r6, sl, fp, lr}
   18954:	add	fp, sp, #16
   18958:	mov	r5, r0
   1895c:	mov	r0, r1
   18960:	mov	r4, r1
   18964:	bl	18b28 <__assert_fail@plt+0x7298>
   18968:	cmp	r0, #0
   1896c:	beq	18988 <__assert_fail@plt+0x70f8>
   18970:	mov	r1, r5
   18974:	mov	r2, r4
   18978:	mov	r6, r0
   1897c:	bl	1153c <memcpy@plt>
   18980:	mov	r0, r6
   18984:	pop	{r4, r5, r6, sl, fp, pc}
   18988:	bl	18a14 <__assert_fail@plt+0x7184>
   1898c:	push	{r4, r5, r6, sl, fp, lr}
   18990:	add	fp, sp, #16
   18994:	mov	r5, r0
   18998:	add	r0, r1, #1
   1899c:	mov	r4, r1
   189a0:	bl	18b28 <__assert_fail@plt+0x7298>
   189a4:	cmp	r0, #0
   189a8:	beq	189d0 <__assert_fail@plt+0x7140>
   189ac:	mov	r6, r0
   189b0:	mov	r0, #0
   189b4:	mov	r1, r5
   189b8:	mov	r2, r4
   189bc:	strb	r0, [r6, r4]
   189c0:	mov	r0, r6
   189c4:	bl	1153c <memcpy@plt>
   189c8:	mov	r0, r6
   189cc:	pop	{r4, r5, r6, sl, fp, pc}
   189d0:	bl	18a14 <__assert_fail@plt+0x7184>
   189d4:	push	{r4, r5, r6, sl, fp, lr}
   189d8:	add	fp, sp, #16
   189dc:	mov	r4, r0
   189e0:	bl	116e0 <strlen@plt>
   189e4:	add	r5, r0, #1
   189e8:	mov	r0, r5
   189ec:	bl	18b28 <__assert_fail@plt+0x7298>
   189f0:	cmp	r0, #0
   189f4:	beq	18a10 <__assert_fail@plt+0x7180>
   189f8:	mov	r1, r4
   189fc:	mov	r2, r5
   18a00:	mov	r6, r0
   18a04:	bl	1153c <memcpy@plt>
   18a08:	mov	r0, r6
   18a0c:	pop	{r4, r5, r6, sl, fp, pc}
   18a10:	bl	18a14 <__assert_fail@plt+0x7184>
   18a14:	push	{fp, lr}
   18a18:	mov	fp, sp
   18a1c:	movw	r0, #49516	; 0xc16c
   18a20:	movw	r1, #44326	; 0xad26
   18a24:	mov	r2, #5
   18a28:	movt	r0, #2
   18a2c:	movt	r1, #1
   18a30:	ldr	r4, [r0]
   18a34:	mov	r0, #0
   18a38:	bl	11578 <dcgettext@plt>
   18a3c:	movw	r2, #43087	; 0xa84f
   18a40:	mov	r3, r0
   18a44:	mov	r0, r4
   18a48:	mov	r1, #0
   18a4c:	movt	r2, #1
   18a50:	bl	1162c <error@plt>
   18a54:	bl	11854 <abort@plt>
   18a58:	push	{fp, lr}
   18a5c:	mov	fp, sp
   18a60:	orr	r1, r1, #512	; 0x200
   18a64:	bl	12cb8 <__assert_fail@plt+0x1428>
   18a68:	cmp	r0, #0
   18a6c:	popne	{fp, pc}
   18a70:	bl	11704 <__errno_location@plt>
   18a74:	ldr	r0, [r0]
   18a78:	cmp	r0, #22
   18a7c:	bne	18aa0 <__assert_fail@plt+0x7210>
   18a80:	movw	r0, #44343	; 0xad37
   18a84:	movw	r1, #44359	; 0xad47
   18a88:	movw	r3, #44370	; 0xad52
   18a8c:	mov	r2, #41	; 0x29
   18a90:	movt	r0, #1
   18a94:	movt	r1, #1
   18a98:	movt	r3, #1
   18a9c:	bl	11890 <__assert_fail@plt>
   18aa0:	bl	18a14 <__assert_fail@plt+0x7184>
   18aa4:	ldr	r0, [r0, #48]	; 0x30
   18aa8:	and	r0, r0, #17
   18aac:	cmp	r0, #16
   18ab0:	moveq	r0, #1
   18ab4:	bxeq	lr
   18ab8:	cmp	r0, #17
   18abc:	movne	r0, #0
   18ac0:	bxne	lr
   18ac4:	ldr	r0, [r1, #48]	; 0x30
   18ac8:	cmp	r0, #0
   18acc:	movwne	r0, #1
   18ad0:	bx	lr
   18ad4:	clz	r2, r1
   18ad8:	clz	r3, r0
   18adc:	lsr	r2, r2, #5
   18ae0:	lsr	r3, r3, #5
   18ae4:	orrs	r2, r3, r2
   18ae8:	movwne	r1, #1
   18aec:	movwne	r0, #1
   18af0:	cmp	r1, #0
   18af4:	beq	18b24 <__assert_fail@plt+0x7294>
   18af8:	mvn	r2, #-2147483648	; 0x80000000
   18afc:	udiv	r2, r2, r1
   18b00:	cmp	r2, r0
   18b04:	bcs	18b24 <__assert_fail@plt+0x7294>
   18b08:	push	{fp, lr}
   18b0c:	mov	fp, sp
   18b10:	bl	11704 <__errno_location@plt>
   18b14:	mov	r1, #12
   18b18:	str	r1, [r0]
   18b1c:	mov	r0, #0
   18b20:	pop	{fp, pc}
   18b24:	b	114c4 <calloc@plt>
   18b28:	cmp	r0, #0
   18b2c:	movweq	r0, #1
   18b30:	cmn	r0, #1
   18b34:	ble	18b3c <__assert_fail@plt+0x72ac>
   18b38:	b	1165c <malloc@plt>
   18b3c:	push	{fp, lr}
   18b40:	mov	fp, sp
   18b44:	bl	11704 <__errno_location@plt>
   18b48:	mov	r1, #12
   18b4c:	str	r1, [r0]
   18b50:	mov	r0, #0
   18b54:	pop	{fp, pc}
   18b58:	push	{fp, lr}
   18b5c:	mov	fp, sp
   18b60:	cmp	r0, #0
   18b64:	beq	18b80 <__assert_fail@plt+0x72f0>
   18b68:	cmp	r1, #0
   18b6c:	beq	18b8c <__assert_fail@plt+0x72fc>
   18b70:	cmn	r1, #1
   18b74:	ble	18b94 <__assert_fail@plt+0x7304>
   18b78:	pop	{fp, lr}
   18b7c:	b	11590 <realloc@plt>
   18b80:	mov	r0, r1
   18b84:	pop	{fp, lr}
   18b88:	b	18b28 <__assert_fail@plt+0x7298>
   18b8c:	bl	19150 <__assert_fail@plt+0x78c0>
   18b90:	b	18ba0 <__assert_fail@plt+0x7310>
   18b94:	bl	11704 <__errno_location@plt>
   18b98:	mov	r1, #12
   18b9c:	str	r1, [r0]
   18ba0:	mov	r0, #0
   18ba4:	pop	{fp, pc}
   18ba8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18bac:	add	fp, sp, #24
   18bb0:	sub	sp, sp, #40	; 0x28
   18bb4:	mov	r5, r0
   18bb8:	ldrb	r0, [r2]
   18bbc:	cmp	r0, #0
   18bc0:	beq	18ca4 <__assert_fail@plt+0x7414>
   18bc4:	movw	r9, #49984	; 0xc340
   18bc8:	mov	r4, r2
   18bcc:	mov	r6, r1
   18bd0:	movt	r9, #2
   18bd4:	ldr	r0, [r9]
   18bd8:	cmp	r0, #0
   18bdc:	bne	18c48 <__assert_fail@plt+0x73b8>
   18be0:	movw	r0, #44448	; 0xada0
   18be4:	movw	r1, #18688	; 0x4900
   18be8:	movt	r0, #1
   18bec:	movt	r1, #8
   18bf0:	bl	11644 <open64@plt>
   18bf4:	cmn	r0, #1
   18bf8:	ble	18cbc <__assert_fail@plt+0x742c>
   18bfc:	movw	r3, #44462	; 0xadae
   18c00:	add	r8, sp, #8
   18c04:	mov	r7, r0
   18c08:	str	r0, [sp]
   18c0c:	mov	r1, #1
   18c10:	mov	r2, #32
   18c14:	movt	r3, #1
   18c18:	mov	r0, r8
   18c1c:	bl	11710 <__sprintf_chk@plt>
   18c20:	mov	r0, r8
   18c24:	mov	r1, #0
   18c28:	bl	11770 <access@plt>
   18c2c:	cmp	r0, #0
   18c30:	mvn	r1, #0
   18c34:	mov	r0, r7
   18c38:	movweq	r1, #1
   18c3c:	str	r1, [r9]
   18c40:	bl	11860 <close@plt>
   18c44:	ldr	r0, [r9]
   18c48:	mov	r7, #0
   18c4c:	cmp	r0, #0
   18c50:	blt	18cb0 <__assert_fail@plt+0x7420>
   18c54:	mov	r0, r4
   18c58:	bl	116e0 <strlen@plt>
   18c5c:	add	r0, r0, #27
   18c60:	cmp	r0, #4032	; 0xfc0
   18c64:	bls	18c78 <__assert_fail@plt+0x73e8>
   18c68:	bl	18b28 <__assert_fail@plt+0x7298>
   18c6c:	mov	r5, r0
   18c70:	cmp	r0, #0
   18c74:	beq	18cb0 <__assert_fail@plt+0x7420>
   18c78:	movw	r3, #44485	; 0xadc5
   18c7c:	mov	r0, r5
   18c80:	mov	r1, #1
   18c84:	mvn	r2, #0
   18c88:	str	r6, [sp]
   18c8c:	movt	r3, #1
   18c90:	bl	11710 <__sprintf_chk@plt>
   18c94:	add	r0, r5, r0
   18c98:	mov	r1, r4
   18c9c:	bl	115fc <strcpy@plt>
   18ca0:	b	18cac <__assert_fail@plt+0x741c>
   18ca4:	mov	r0, #0
   18ca8:	strb	r0, [r5]
   18cac:	mov	r7, r5
   18cb0:	mov	r0, r7
   18cb4:	sub	sp, fp, #24
   18cb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18cbc:	mvn	r0, #0
   18cc0:	mov	r7, #0
   18cc4:	str	r0, [r9]
   18cc8:	b	18cb0 <__assert_fail@plt+0x7420>
   18ccc:	push	{r4, r5, r6, sl, fp, lr}
   18cd0:	add	fp, sp, #16
   18cd4:	mov	r4, r0
   18cd8:	bl	11608 <__fpending@plt>
   18cdc:	mov	r5, r0
   18ce0:	mov	r0, r4
   18ce4:	bl	11614 <ferror_unlocked@plt>
   18ce8:	mov	r6, r0
   18cec:	mov	r0, r4
   18cf0:	bl	18e38 <__assert_fail@plt+0x75a8>
   18cf4:	cmp	r6, #0
   18cf8:	beq	18d18 <__assert_fail@plt+0x7488>
   18cfc:	mvn	r4, #0
   18d00:	cmp	r0, #0
   18d04:	bne	18d44 <__assert_fail@plt+0x74b4>
   18d08:	bl	11704 <__errno_location@plt>
   18d0c:	mov	r1, #0
   18d10:	str	r1, [r0]
   18d14:	b	18d44 <__assert_fail@plt+0x74b4>
   18d18:	cmp	r0, #0
   18d1c:	mov	r4, r0
   18d20:	mvnne	r4, #0
   18d24:	cmp	r5, #0
   18d28:	bne	18d44 <__assert_fail@plt+0x74b4>
   18d2c:	cmp	r0, #0
   18d30:	beq	18d44 <__assert_fail@plt+0x74b4>
   18d34:	bl	11704 <__errno_location@plt>
   18d38:	ldr	r0, [r0]
   18d3c:	subs	r4, r0, #9
   18d40:	mvnne	r4, #0
   18d44:	mov	r0, r4
   18d48:	pop	{r4, r5, r6, sl, fp, pc}
   18d4c:	movw	r2, #62998	; 0xf616
   18d50:	mov	r1, #0
   18d54:	movt	r2, #149	; 0x95
   18d58:	str	r1, [r0, #16]
   18d5c:	str	r1, [r0, #20]
   18d60:	str	r2, [r0, #24]
   18d64:	bx	lr
   18d68:	push	{r4, r5, r6, r7, fp, lr}
   18d6c:	add	fp, sp, #16
   18d70:	ldr	r2, [r0, #24]
   18d74:	movw	r3, #62998	; 0xf616
   18d78:	movt	r3, #149	; 0x95
   18d7c:	cmp	r2, r3
   18d80:	bne	18e18 <__assert_fail@plt+0x7588>
   18d84:	mov	r3, r0
   18d88:	ldr	r2, [r3, #16]!
   18d8c:	ldr	lr, [r3, #4]
   18d90:	orrs	r5, r2, lr
   18d94:	beq	18dcc <__assert_fail@plt+0x753c>
   18d98:	ldrd	r4, [r0]
   18d9c:	ldrd	r6, [r1, #96]	; 0x60
   18da0:	eor	r7, r7, r5
   18da4:	eor	r6, r6, r4
   18da8:	orrs	r7, r6, r7
   18dac:	bne	18dcc <__assert_fail@plt+0x753c>
   18db0:	ldrd	r4, [r0, #8]
   18db4:	ldrd	r6, [r1]
   18db8:	mov	ip, #1
   18dbc:	eor	r7, r7, r5
   18dc0:	eor	r6, r6, r4
   18dc4:	orrs	r7, r6, r7
   18dc8:	beq	18e10 <__assert_fail@plt+0x7580>
   18dcc:	adds	r4, r2, #1
   18dd0:	mov	ip, #0
   18dd4:	adc	r5, lr, #0
   18dd8:	and	r2, r4, r2
   18ddc:	strd	r4, [r3]
   18de0:	and	r3, r5, lr
   18de4:	orrs	r2, r2, r3
   18de8:	bne	18e10 <__assert_fail@plt+0x7580>
   18dec:	orrs	r2, r4, r5
   18df0:	beq	18e0c <__assert_fail@plt+0x757c>
   18df4:	ldrd	r2, [r1]
   18df8:	str	r3, [r0, #12]
   18dfc:	str	r2, [r0, #8]
   18e00:	ldrd	r2, [r1, #96]	; 0x60
   18e04:	stm	r0, {r2, r3}
   18e08:	b	18e10 <__assert_fail@plt+0x7580>
   18e0c:	mov	ip, #1
   18e10:	mov	r0, ip
   18e14:	pop	{r4, r5, r6, r7, fp, pc}
   18e18:	movw	r0, #44503	; 0xadd7
   18e1c:	movw	r1, #44527	; 0xadef
   18e20:	movw	r3, #44545	; 0xae01
   18e24:	mov	r2, #60	; 0x3c
   18e28:	movt	r0, #1
   18e2c:	movt	r1, #1
   18e30:	movt	r3, #1
   18e34:	bl	11890 <__assert_fail@plt>
   18e38:	push	{r4, r5, r6, sl, fp, lr}
   18e3c:	add	fp, sp, #16
   18e40:	sub	sp, sp, #8
   18e44:	mov	r4, r0
   18e48:	bl	11740 <fileno@plt>
   18e4c:	cmn	r0, #1
   18e50:	ble	18ec4 <__assert_fail@plt+0x7634>
   18e54:	mov	r0, r4
   18e58:	bl	11674 <__freading@plt>
   18e5c:	cmp	r0, #0
   18e60:	beq	18e8c <__assert_fail@plt+0x75fc>
   18e64:	mov	r0, r4
   18e68:	bl	11740 <fileno@plt>
   18e6c:	mov	r1, #1
   18e70:	mov	r2, #0
   18e74:	mov	r3, #0
   18e78:	str	r1, [sp]
   18e7c:	bl	115e4 <lseek64@plt>
   18e80:	and	r0, r0, r1
   18e84:	cmn	r0, #1
   18e88:	beq	18ec4 <__assert_fail@plt+0x7634>
   18e8c:	mov	r0, r4
   18e90:	bl	190f4 <__assert_fail@plt+0x7864>
   18e94:	cmp	r0, #0
   18e98:	beq	18ec4 <__assert_fail@plt+0x7634>
   18e9c:	bl	11704 <__errno_location@plt>
   18ea0:	ldr	r6, [r0]
   18ea4:	mov	r5, r0
   18ea8:	mov	r0, r4
   18eac:	bl	1177c <fclose@plt>
   18eb0:	cmp	r6, #0
   18eb4:	strne	r6, [r5]
   18eb8:	mvnne	r0, #0
   18ebc:	sub	sp, fp, #16
   18ec0:	pop	{r4, r5, r6, sl, fp, pc}
   18ec4:	mov	r0, r4
   18ec8:	sub	sp, fp, #16
   18ecc:	pop	{r4, r5, r6, sl, fp, lr}
   18ed0:	b	1177c <fclose@plt>
   18ed4:	sub	sp, sp, #8
   18ed8:	push	{r4, r5, r6, r7, fp, lr}
   18edc:	add	fp, sp, #16
   18ee0:	sub	sp, sp, #8
   18ee4:	mov	r5, r0
   18ee8:	add	r0, fp, #8
   18eec:	cmp	r1, #11
   18ef0:	str	r3, [fp, #12]
   18ef4:	str	r2, [fp, #8]
   18ef8:	str	r0, [sp, #4]
   18efc:	bhi	18f38 <__assert_fail@plt+0x76a8>
   18f00:	mov	r0, #1
   18f04:	movw	r2, #1300	; 0x514
   18f08:	tst	r2, r0, lsl r1
   18f0c:	bne	18ff0 <__assert_fail@plt+0x7760>
   18f10:	movw	r2, #2570	; 0xa0a
   18f14:	tst	r2, r0, lsl r1
   18f18:	bne	18f60 <__assert_fail@plt+0x76d0>
   18f1c:	cmp	r1, #0
   18f20:	bne	18f38 <__assert_fail@plt+0x76a8>
   18f24:	ldr	r0, [sp, #4]
   18f28:	add	r1, r0, #4
   18f2c:	str	r1, [sp, #4]
   18f30:	mov	r1, #0
   18f34:	b	18ffc <__assert_fail@plt+0x776c>
   18f38:	sub	r0, r1, #1024	; 0x400
   18f3c:	cmp	r0, #10
   18f40:	bhi	18ff0 <__assert_fail@plt+0x7760>
   18f44:	mov	r2, #1
   18f48:	movw	r3, #645	; 0x285
   18f4c:	tst	r3, r2, lsl r0
   18f50:	bne	18ff0 <__assert_fail@plt+0x7760>
   18f54:	movw	r3, #1282	; 0x502
   18f58:	tst	r3, r2, lsl r0
   18f5c:	beq	18f6c <__assert_fail@plt+0x76dc>
   18f60:	mov	r0, r5
   18f64:	bl	11794 <fcntl64@plt>
   18f68:	b	19008 <__assert_fail@plt+0x7778>
   18f6c:	cmp	r0, #6
   18f70:	bne	18ff0 <__assert_fail@plt+0x7760>
   18f74:	ldr	r0, [sp, #4]
   18f78:	movw	r7, #49988	; 0xc344
   18f7c:	movt	r7, #2
   18f80:	add	r1, r0, #4
   18f84:	str	r1, [sp, #4]
   18f88:	ldr	r6, [r0]
   18f8c:	ldr	r0, [r7]
   18f90:	cmp	r0, #0
   18f94:	blt	1902c <__assert_fail@plt+0x779c>
   18f98:	mov	r0, r5
   18f9c:	movw	r1, #1030	; 0x406
   18fa0:	mov	r2, r6
   18fa4:	bl	11794 <fcntl64@plt>
   18fa8:	mov	r4, r0
   18fac:	cmn	r0, #1
   18fb0:	bgt	19020 <__assert_fail@plt+0x7790>
   18fb4:	bl	11704 <__errno_location@plt>
   18fb8:	ldr	r0, [r0]
   18fbc:	cmp	r0, #22
   18fc0:	bne	19020 <__assert_fail@plt+0x7790>
   18fc4:	mov	r0, r5
   18fc8:	mov	r1, #0
   18fcc:	mov	r2, r6
   18fd0:	bl	11794 <fcntl64@plt>
   18fd4:	mov	r4, r0
   18fd8:	cmp	r0, #0
   18fdc:	blt	1900c <__assert_fail@plt+0x777c>
   18fe0:	mvn	r0, #0
   18fe4:	str	r0, [r7]
   18fe8:	mov	r0, #1
   18fec:	b	19050 <__assert_fail@plt+0x77c0>
   18ff0:	ldr	r0, [sp, #4]
   18ff4:	add	r2, r0, #4
   18ff8:	str	r2, [sp, #4]
   18ffc:	ldr	r2, [r0]
   19000:	mov	r0, r5
   19004:	bl	11794 <fcntl64@plt>
   19008:	mov	r4, r0
   1900c:	mov	r0, r4
   19010:	sub	sp, fp, #16
   19014:	pop	{r4, r5, r6, r7, fp, lr}
   19018:	add	sp, sp, #8
   1901c:	bx	lr
   19020:	mov	r0, #1
   19024:	str	r0, [r7]
   19028:	b	1900c <__assert_fail@plt+0x777c>
   1902c:	mov	r0, r5
   19030:	mov	r1, #0
   19034:	mov	r2, r6
   19038:	bl	11794 <fcntl64@plt>
   1903c:	mov	r4, r0
   19040:	ldr	r0, [r7]
   19044:	add	r0, r0, #1
   19048:	clz	r0, r0
   1904c:	lsr	r0, r0, #5
   19050:	cmp	r0, #0
   19054:	beq	1900c <__assert_fail@plt+0x777c>
   19058:	cmp	r4, #0
   1905c:	blt	1900c <__assert_fail@plt+0x777c>
   19060:	mov	r0, r4
   19064:	mov	r1, #1
   19068:	bl	11794 <fcntl64@plt>
   1906c:	cmp	r0, #0
   19070:	blt	1908c <__assert_fail@plt+0x77fc>
   19074:	orr	r2, r0, #1
   19078:	mov	r0, r4
   1907c:	mov	r1, #2
   19080:	bl	11794 <fcntl64@plt>
   19084:	cmn	r0, #1
   19088:	bne	1900c <__assert_fail@plt+0x777c>
   1908c:	bl	11704 <__errno_location@plt>
   19090:	ldr	r6, [r0]
   19094:	mov	r5, r0
   19098:	mov	r0, r4
   1909c:	bl	11860 <close@plt>
   190a0:	str	r6, [r5]
   190a4:	mvn	r4, #0
   190a8:	b	1900c <__assert_fail@plt+0x777c>
   190ac:	sub	sp, sp, #8
   190b0:	push	{fp, lr}
   190b4:	mov	fp, sp
   190b8:	sub	sp, sp, #8
   190bc:	str	r2, [fp, #8]
   190c0:	mov	r2, #0
   190c4:	tst	r1, #64	; 0x40
   190c8:	str	r3, [fp, #12]
   190cc:	addne	r2, fp, #8
   190d0:	orrne	r2, r2, #4
   190d4:	strne	r2, [sp, #4]
   190d8:	ldrne	r2, [fp, #8]
   190dc:	bl	11644 <open64@plt>
   190e0:	bl	180c4 <__assert_fail@plt+0x6834>
   190e4:	mov	sp, fp
   190e8:	pop	{fp, lr}
   190ec:	add	sp, sp, #8
   190f0:	bx	lr
   190f4:	push	{r4, sl, fp, lr}
   190f8:	add	fp, sp, #8
   190fc:	sub	sp, sp, #8
   19100:	mov	r4, r0
   19104:	cmp	r0, #0
   19108:	beq	19124 <__assert_fail@plt+0x7894>
   1910c:	mov	r0, r4
   19110:	bl	11674 <__freading@plt>
   19114:	cmp	r0, #0
   19118:	ldrbne	r0, [r4, #1]
   1911c:	tstne	r0, #1
   19120:	bne	19134 <__assert_fail@plt+0x78a4>
   19124:	mov	r0, r4
   19128:	sub	sp, fp, #8
   1912c:	pop	{r4, sl, fp, lr}
   19130:	b	11500 <fflush@plt>
   19134:	mov	r0, #1
   19138:	mov	r2, #0
   1913c:	mov	r3, #0
   19140:	str	r0, [sp]
   19144:	mov	r0, r4
   19148:	bl	19178 <__assert_fail@plt+0x78e8>
   1914c:	b	19124 <__assert_fail@plt+0x7894>
   19150:	push	{r4, r5, r6, sl, fp, lr}
   19154:	add	fp, sp, #16
   19158:	mov	r4, r0
   1915c:	bl	11704 <__errno_location@plt>
   19160:	ldr	r6, [r0]
   19164:	mov	r5, r0
   19168:	mov	r0, r4
   1916c:	bl	11524 <free@plt>
   19170:	str	r6, [r5]
   19174:	pop	{r4, r5, r6, sl, fp, pc}
   19178:	push	{r4, r5, r6, r7, fp, lr}
   1917c:	add	fp, sp, #16
   19180:	sub	sp, sp, #8
   19184:	mov	r4, r0
   19188:	ldr	r0, [r0, #4]
   1918c:	mov	r5, r3
   19190:	mov	r6, r2
   19194:	ldr	r1, [r4, #8]
   19198:	cmp	r1, r0
   1919c:	bne	191b8 <__assert_fail@plt+0x7928>
   191a0:	ldrd	r0, [r4, #16]
   191a4:	cmp	r1, r0
   191a8:	bne	191b8 <__assert_fail@plt+0x7928>
   191ac:	ldr	r0, [r4, #36]	; 0x24
   191b0:	cmp	r0, #0
   191b4:	beq	191d0 <__assert_fail@plt+0x7940>
   191b8:	mov	r0, r4
   191bc:	mov	r2, r6
   191c0:	mov	r3, r5
   191c4:	sub	sp, fp, #16
   191c8:	pop	{r4, r5, r6, r7, fp, lr}
   191cc:	b	11788 <fseeko64@plt>
   191d0:	ldr	r7, [fp, #8]
   191d4:	mov	r0, r4
   191d8:	bl	11740 <fileno@plt>
   191dc:	mov	r2, r6
   191e0:	mov	r3, r5
   191e4:	str	r7, [sp]
   191e8:	bl	115e4 <lseek64@plt>
   191ec:	and	r2, r0, r1
   191f0:	cmn	r2, #1
   191f4:	beq	19210 <__assert_fail@plt+0x7980>
   191f8:	strd	r0, [r4, #80]	; 0x50
   191fc:	ldr	r0, [r4]
   19200:	bic	r0, r0, #16
   19204:	str	r0, [r4]
   19208:	mov	r0, #0
   1920c:	b	19214 <__assert_fail@plt+0x7984>
   19210:	mvn	r0, #0
   19214:	sub	sp, fp, #16
   19218:	pop	{r4, r5, r6, r7, fp, pc}
   1921c:	push	{fp, lr}
   19220:	mov	fp, sp
   19224:	mov	r0, #14
   19228:	bl	117b8 <nl_langinfo@plt>
   1922c:	movw	r1, #41259	; 0xa12b
   19230:	cmp	r0, #0
   19234:	movt	r1, #1
   19238:	movne	r1, r0
   1923c:	movw	r0, #44612	; 0xae44
   19240:	ldrb	r2, [r1]
   19244:	movt	r0, #1
   19248:	cmp	r2, #0
   1924c:	movne	r0, r1
   19250:	pop	{fp, pc}
   19254:	push	{r4, r5, r6, r7, fp, lr}
   19258:	add	fp, sp, #16
   1925c:	sub	sp, sp, #8
   19260:	add	r5, sp, #4
   19264:	cmp	r0, #0
   19268:	mov	r7, r2
   1926c:	mov	r4, r1
   19270:	movne	r5, r0
   19274:	mov	r0, r5
   19278:	bl	11620 <mbrtowc@plt>
   1927c:	mov	r6, r0
   19280:	cmp	r7, #0
   19284:	beq	192a8 <__assert_fail@plt+0x7a18>
   19288:	cmn	r6, #2
   1928c:	bcc	192a8 <__assert_fail@plt+0x7a18>
   19290:	mov	r0, #0
   19294:	bl	19730 <__assert_fail@plt+0x7ea0>
   19298:	cmp	r0, #0
   1929c:	ldrbeq	r0, [r4]
   192a0:	moveq	r6, #1
   192a4:	streq	r0, [r5]
   192a8:	mov	r0, r6
   192ac:	sub	sp, fp, #16
   192b0:	pop	{r4, r5, r6, r7, fp, pc}
   192b4:	push	{fp, lr}
   192b8:	mov	fp, sp
   192bc:	mov	r4, r0
   192c0:	movw	r0, #49516	; 0xc16c
   192c4:	movw	r1, #44618	; 0xae4a
   192c8:	mov	r2, #5
   192cc:	movt	r0, #2
   192d0:	movt	r1, #1
   192d4:	ldr	r5, [r0]
   192d8:	mov	r0, #0
   192dc:	bl	11578 <dcgettext@plt>
   192e0:	mov	r2, r0
   192e4:	mov	r0, r5
   192e8:	mov	r1, r4
   192ec:	bl	1162c <error@plt>
   192f0:	bl	11854 <abort@plt>
   192f4:	push	{fp, lr}
   192f8:	mov	fp, sp
   192fc:	mov	r4, r0
   19300:	movw	r0, #49516	; 0xc16c
   19304:	movw	r1, #44661	; 0xae75
   19308:	mov	r2, #5
   1930c:	movt	r0, #2
   19310:	movt	r1, #1
   19314:	ldr	r5, [r0]
   19318:	mov	r0, #0
   1931c:	bl	11578 <dcgettext@plt>
   19320:	mov	r2, r0
   19324:	mov	r0, r5
   19328:	mov	r1, r4
   1932c:	bl	1162c <error@plt>
   19330:	bl	11854 <abort@plt>
   19334:	cmp	r2, #0
   19338:	beq	19368 <__assert_fail@plt+0x7ad8>
   1933c:	mvn	r3, #0
   19340:	udiv	r3, r3, r2
   19344:	cmp	r3, r1
   19348:	bcs	19368 <__assert_fail@plt+0x7ad8>
   1934c:	push	{fp, lr}
   19350:	mov	fp, sp
   19354:	bl	11704 <__errno_location@plt>
   19358:	mov	r1, #12
   1935c:	str	r1, [r0]
   19360:	mov	r0, #0
   19364:	pop	{fp, pc}
   19368:	mul	r1, r2, r1
   1936c:	b	18b58 <__assert_fail@plt+0x72c8>
   19370:	push	{r4, r5, fp, lr}
   19374:	add	fp, sp, #8
   19378:	mov	r4, #0
   1937c:	mov	r5, r0
   19380:	mov	r1, #524288	; 0x80000
   19384:	str	r4, [r0, #4]
   19388:	movw	r0, #43091	; 0xa853
   1938c:	movt	r0, #1
   19390:	bl	190ac <__assert_fail@plt+0x781c>
   19394:	cmn	r0, #1
   19398:	str	r0, [r5]
   1939c:	bgt	193bc <__assert_fail@plt+0x7b2c>
   193a0:	mov	r0, #0
   193a4:	mov	r1, #0
   193a8:	mov	r4, #0
   193ac:	bl	116b0 <getcwd@plt>
   193b0:	cmp	r0, #0
   193b4:	str	r0, [r5, #4]
   193b8:	mvneq	r4, #0
   193bc:	mov	r0, r4
   193c0:	pop	{r4, r5, fp, pc}
   193c4:	ldr	r1, [r0]
   193c8:	cmp	r1, #0
   193cc:	blt	193d8 <__assert_fail@plt+0x7b48>
   193d0:	mov	r0, r1
   193d4:	b	117e8 <fchdir@plt>
   193d8:	ldr	r0, [r0, #4]
   193dc:	b	19414 <__assert_fail@plt+0x7b84>
   193e0:	push	{r4, sl, fp, lr}
   193e4:	add	fp, sp, #8
   193e8:	mov	r4, r0
   193ec:	ldr	r0, [r0]
   193f0:	cmp	r0, #0
   193f4:	blt	193fc <__assert_fail@plt+0x7b6c>
   193f8:	bl	11860 <close@plt>
   193fc:	ldr	r0, [r4, #4]
   19400:	pop	{r4, sl, fp, lr}
   19404:	b	19150 <__assert_fail@plt+0x78c0>
   19408:	mov	r1, #0
   1940c:	mov	r2, #3
   19410:	b	18ed4 <__assert_fail@plt+0x7644>
   19414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19418:	add	fp, sp, #28
   1941c:	sub	sp, sp, #4
   19420:	mov	r5, r0
   19424:	bl	115b4 <chdir@plt>
   19428:	cmp	r0, #0
   1942c:	beq	19600 <__assert_fail@plt+0x7d70>
   19430:	mov	r6, r0
   19434:	bl	11704 <__errno_location@plt>
   19438:	mov	r9, r0
   1943c:	ldr	r0, [r0]
   19440:	cmp	r0, #36	; 0x24
   19444:	bne	19604 <__assert_fail@plt+0x7d74>
   19448:	mov	r0, r5
   1944c:	bl	116e0 <strlen@plt>
   19450:	mov	r6, r0
   19454:	mvn	r0, #99	; 0x63
   19458:	cmp	r6, #0
   1945c:	str	r0, [sp]
   19460:	beq	19630 <__assert_fail@plt+0x7da0>
   19464:	mov	r0, #0
   19468:	cmp	r0, r6, lsr #12
   1946c:	beq	19650 <__assert_fail@plt+0x7dc0>
   19470:	movw	r1, #44501	; 0xadd5
   19474:	mov	r0, r5
   19478:	movt	r1, #1
   1947c:	bl	11884 <strspn@plt>
   19480:	cmp	r0, #0
   19484:	mov	r7, r5
   19488:	beq	19510 <__assert_fail@plt+0x7c80>
   1948c:	mov	r4, r0
   19490:	cmp	r0, #2
   19494:	bne	194f4 <__assert_fail@plt+0x7c64>
   19498:	add	r0, r5, #3
   1949c:	sub	r2, r6, #3
   194a0:	mov	r1, #47	; 0x2f
   194a4:	mov	r7, #47	; 0x2f
   194a8:	bl	11758 <memchr@plt>
   194ac:	cmp	r0, #0
   194b0:	beq	195e8 <__assert_fail@plt+0x7d58>
   194b4:	mov	r4, r0
   194b8:	mov	r0, #0
   194bc:	mov	r1, r5
   194c0:	strb	r0, [r4]
   194c4:	mov	r0, sp
   194c8:	bl	196b0 <__assert_fail@plt+0x7e20>
   194cc:	cmp	r0, #0
   194d0:	strb	r7, [r4]
   194d4:	bne	195d4 <__assert_fail@plt+0x7d44>
   194d8:	movw	r1, #44501	; 0xadd5
   194dc:	add	r4, r4, #1
   194e0:	movt	r1, #1
   194e4:	mov	r0, r4
   194e8:	bl	11884 <strspn@plt>
   194ec:	add	r7, r4, r0
   194f0:	b	19510 <__assert_fail@plt+0x7c80>
   194f4:	movw	r1, #44501	; 0xadd5
   194f8:	mov	r0, sp
   194fc:	movt	r1, #1
   19500:	bl	196b0 <__assert_fail@plt+0x7e20>
   19504:	cmp	r0, #0
   19508:	bne	195d4 <__assert_fail@plt+0x7d44>
   1950c:	add	r7, r5, r4
   19510:	ldrb	r0, [r7]
   19514:	cmp	r0, #47	; 0x2f
   19518:	beq	19670 <__assert_fail@plt+0x7de0>
   1951c:	add	r5, r5, r6
   19520:	cmp	r7, r5
   19524:	bhi	19690 <__assert_fail@plt+0x7e00>
   19528:	sub	r0, r5, r7
   1952c:	cmp	r0, #4096	; 0x1000
   19530:	blt	195a8 <__assert_fail@plt+0x7d18>
   19534:	movw	r8, #44501	; 0xadd5
   19538:	mov	sl, sp
   1953c:	movt	r8, #1
   19540:	mov	r0, r7
   19544:	mov	r1, #47	; 0x2f
   19548:	mov	r2, #4096	; 0x1000
   1954c:	bl	116f8 <memrchr@plt>
   19550:	cmp	r0, #0
   19554:	beq	195e8 <__assert_fail@plt+0x7d58>
   19558:	mov	r1, #0
   1955c:	mov	r6, r0
   19560:	strb	r1, [r0], -r7
   19564:	cmp	r0, #4096	; 0x1000
   19568:	bge	19610 <__assert_fail@plt+0x7d80>
   1956c:	mov	r0, sl
   19570:	mov	r1, r7
   19574:	bl	196b0 <__assert_fail@plt+0x7e20>
   19578:	mov	r1, #47	; 0x2f
   1957c:	cmp	r0, #0
   19580:	strb	r1, [r6]
   19584:	bne	195d4 <__assert_fail@plt+0x7d44>
   19588:	add	r4, r6, #1
   1958c:	mov	r1, r8
   19590:	mov	r0, r4
   19594:	bl	11884 <strspn@plt>
   19598:	add	r7, r4, r0
   1959c:	sub	r0, r5, r7
   195a0:	cmp	r0, #4096	; 0x1000
   195a4:	bge	19540 <__assert_fail@plt+0x7cb0>
   195a8:	cmp	r7, r5
   195ac:	bcs	195c4 <__assert_fail@plt+0x7d34>
   195b0:	mov	r0, sp
   195b4:	mov	r1, r7
   195b8:	bl	196b0 <__assert_fail@plt+0x7e20>
   195bc:	cmp	r0, #0
   195c0:	bne	195d4 <__assert_fail@plt+0x7d44>
   195c4:	ldr	r0, [sp]
   195c8:	bl	117e8 <fchdir@plt>
   195cc:	cmp	r0, #0
   195d0:	beq	195f8 <__assert_fail@plt+0x7d68>
   195d4:	ldr	r4, [r9]
   195d8:	mov	r0, sp
   195dc:	bl	196ec <__assert_fail@plt+0x7e5c>
   195e0:	str	r4, [r9]
   195e4:	b	195f0 <__assert_fail@plt+0x7d60>
   195e8:	mov	r0, #36	; 0x24
   195ec:	str	r0, [r9]
   195f0:	mvn	r6, #0
   195f4:	b	19604 <__assert_fail@plt+0x7d74>
   195f8:	mov	r0, sp
   195fc:	bl	196ec <__assert_fail@plt+0x7e5c>
   19600:	mov	r6, #0
   19604:	mov	r0, r6
   19608:	sub	sp, fp, #28
   1960c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19610:	movw	r0, #44794	; 0xaefa
   19614:	movw	r1, #44715	; 0xaeab
   19618:	movw	r3, #44732	; 0xaebc
   1961c:	mov	r2, #179	; 0xb3
   19620:	movt	r0, #1
   19624:	movt	r1, #1
   19628:	movt	r3, #1
   1962c:	bl	11890 <__assert_fail@plt>
   19630:	movw	r0, #44707	; 0xaea3
   19634:	movw	r1, #44715	; 0xaeab
   19638:	movw	r3, #44732	; 0xaebc
   1963c:	mov	r2, #126	; 0x7e
   19640:	movt	r0, #1
   19644:	movt	r1, #1
   19648:	movt	r3, #1
   1964c:	bl	11890 <__assert_fail@plt>
   19650:	movw	r0, #44755	; 0xaed3
   19654:	movw	r1, #44715	; 0xaeab
   19658:	movw	r3, #44732	; 0xaebc
   1965c:	mov	r2, #127	; 0x7f
   19660:	movt	r0, #1
   19664:	movt	r1, #1
   19668:	movt	r3, #1
   1966c:	bl	11890 <__assert_fail@plt>
   19670:	movw	r0, #44767	; 0xaedf
   19674:	movw	r1, #44715	; 0xaeab
   19678:	movw	r3, #44732	; 0xaebc
   1967c:	mov	r2, #162	; 0xa2
   19680:	movt	r0, #1
   19684:	movt	r1, #1
   19688:	movt	r3, #1
   1968c:	bl	11890 <__assert_fail@plt>
   19690:	movw	r0, #44779	; 0xaeeb
   19694:	movw	r1, #44715	; 0xaeab
   19698:	movw	r3, #44732	; 0xaebc
   1969c:	mov	r2, #163	; 0xa3
   196a0:	movt	r0, #1
   196a4:	movt	r1, #1
   196a8:	movt	r3, #1
   196ac:	bl	11890 <__assert_fail@plt>
   196b0:	push	{r4, r5, fp, lr}
   196b4:	add	fp, sp, #8
   196b8:	mov	r4, r0
   196bc:	ldr	r0, [r0]
   196c0:	mov	r2, #18688	; 0x4900
   196c4:	bl	116ec <openat64@plt>
   196c8:	cmp	r0, #0
   196cc:	mvnlt	r0, #0
   196d0:	poplt	{r4, r5, fp, pc}
   196d4:	mov	r5, r0
   196d8:	mov	r0, r4
   196dc:	bl	196ec <__assert_fail@plt+0x7e5c>
   196e0:	mov	r0, #0
   196e4:	str	r5, [r4]
   196e8:	pop	{r4, r5, fp, pc}
   196ec:	push	{fp, lr}
   196f0:	mov	fp, sp
   196f4:	ldr	r0, [r0]
   196f8:	cmp	r0, #0
   196fc:	poplt	{fp, pc}
   19700:	bl	11860 <close@plt>
   19704:	cmp	r0, #0
   19708:	bne	19710 <__assert_fail@plt+0x7e80>
   1970c:	pop	{fp, pc}
   19710:	movw	r0, #44813	; 0xaf0d
   19714:	movw	r1, #44715	; 0xaeab
   19718:	movw	r3, #44826	; 0xaf1a
   1971c:	mov	r2, #64	; 0x40
   19720:	movt	r0, #1
   19724:	movt	r1, #1
   19728:	movt	r3, #1
   1972c:	bl	11890 <__assert_fail@plt>
   19730:	push	{r4, sl, fp, lr}
   19734:	add	fp, sp, #8
   19738:	sub	sp, sp, #264	; 0x108
   1973c:	add	r1, sp, #7
   19740:	movw	r2, #257	; 0x101
   19744:	bl	19794 <__assert_fail@plt+0x7f04>
   19748:	mov	r4, #0
   1974c:	cmp	r0, #0
   19750:	bne	19788 <__assert_fail@plt+0x7ef8>
   19754:	movw	r1, #44863	; 0xaf3f
   19758:	add	r0, sp, #7
   1975c:	movt	r1, #1
   19760:	bl	114f4 <strcmp@plt>
   19764:	cmp	r0, #0
   19768:	beq	19788 <__assert_fail@plt+0x7ef8>
   1976c:	movw	r1, #44865	; 0xaf41
   19770:	add	r0, sp, #7
   19774:	movt	r1, #1
   19778:	bl	114f4 <strcmp@plt>
   1977c:	mov	r4, r0
   19780:	cmp	r0, #0
   19784:	movwne	r4, #1
   19788:	mov	r0, r4
   1978c:	sub	sp, fp, #8
   19790:	pop	{r4, sl, fp, pc}
   19794:	push	{r4, r5, r6, r7, fp, lr}
   19798:	add	fp, sp, #16
   1979c:	mov	r4, r1
   197a0:	mov	r1, #0
   197a4:	mov	r6, r2
   197a8:	bl	117a0 <setlocale@plt>
   197ac:	cmp	r0, #0
   197b0:	beq	197dc <__assert_fail@plt+0x7f4c>
   197b4:	mov	r7, r0
   197b8:	bl	116e0 <strlen@plt>
   197bc:	cmp	r0, r6
   197c0:	bcs	197f0 <__assert_fail@plt+0x7f60>
   197c4:	add	r2, r0, #1
   197c8:	mov	r0, r4
   197cc:	mov	r1, r7
   197d0:	bl	1153c <memcpy@plt>
   197d4:	mov	r5, #0
   197d8:	b	19818 <__assert_fail@plt+0x7f88>
   197dc:	cmp	r6, #0
   197e0:	mov	r5, #22
   197e4:	movne	r0, #0
   197e8:	strbne	r0, [r4]
   197ec:	b	19818 <__assert_fail@plt+0x7f88>
   197f0:	mov	r5, #34	; 0x22
   197f4:	cmp	r6, #0
   197f8:	beq	19818 <__assert_fail@plt+0x7f88>
   197fc:	sub	r6, r6, #1
   19800:	mov	r0, r4
   19804:	mov	r1, r7
   19808:	mov	r2, r6
   1980c:	bl	1153c <memcpy@plt>
   19810:	mov	r0, #0
   19814:	strb	r0, [r4, r6]
   19818:	mov	r0, r5
   1981c:	pop	{r4, r5, r6, r7, fp, pc}
   19820:	mov	r1, #0
   19824:	b	117a0 <setlocale@plt>
   19828:	cmp	r3, #0
   1982c:	cmpeq	r2, #0
   19830:	bne	19848 <__assert_fail@plt+0x7fb8>
   19834:	cmp	r1, #0
   19838:	cmpeq	r0, #0
   1983c:	mvnne	r1, #0
   19840:	mvnne	r0, #0
   19844:	b	19864 <__assert_fail@plt+0x7fd4>
   19848:	sub	sp, sp, #8
   1984c:	push	{sp, lr}
   19850:	bl	19874 <__assert_fail@plt+0x7fe4>
   19854:	ldr	lr, [sp, #4]
   19858:	add	sp, sp, #8
   1985c:	pop	{r2, r3}
   19860:	bx	lr
   19864:	push	{r1, lr}
   19868:	mov	r0, #8
   1986c:	bl	114dc <raise@plt>
   19870:	pop	{r1, pc}
   19874:	cmp	r1, r3
   19878:	cmpeq	r0, r2
   1987c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19880:	mov	r4, r0
   19884:	movcc	r0, #0
   19888:	mov	r5, r1
   1988c:	ldr	lr, [sp, #36]	; 0x24
   19890:	movcc	r1, r0
   19894:	bcc	19990 <__assert_fail@plt+0x8100>
   19898:	cmp	r3, #0
   1989c:	clzeq	ip, r2
   198a0:	clzne	ip, r3
   198a4:	addeq	ip, ip, #32
   198a8:	cmp	r5, #0
   198ac:	clzeq	r1, r4
   198b0:	addeq	r1, r1, #32
   198b4:	clzne	r1, r5
   198b8:	sub	ip, ip, r1
   198bc:	sub	sl, ip, #32
   198c0:	lsl	r9, r3, ip
   198c4:	rsb	fp, ip, #32
   198c8:	orr	r9, r9, r2, lsl sl
   198cc:	orr	r9, r9, r2, lsr fp
   198d0:	lsl	r8, r2, ip
   198d4:	cmp	r5, r9
   198d8:	cmpeq	r4, r8
   198dc:	movcc	r0, #0
   198e0:	movcc	r1, r0
   198e4:	bcc	19900 <__assert_fail@plt+0x8070>
   198e8:	mov	r0, #1
   198ec:	subs	r4, r4, r8
   198f0:	lsl	r1, r0, sl
   198f4:	orr	r1, r1, r0, lsr fp
   198f8:	lsl	r0, r0, ip
   198fc:	sbc	r5, r5, r9
   19900:	cmp	ip, #0
   19904:	beq	19990 <__assert_fail@plt+0x8100>
   19908:	lsr	r6, r8, #1
   1990c:	orr	r6, r6, r9, lsl #31
   19910:	lsr	r7, r9, #1
   19914:	mov	r2, ip
   19918:	b	1993c <__assert_fail@plt+0x80ac>
   1991c:	subs	r3, r4, r6
   19920:	sbc	r8, r5, r7
   19924:	adds	r3, r3, r3
   19928:	adc	r8, r8, r8
   1992c:	adds	r4, r3, #1
   19930:	adc	r5, r8, #0
   19934:	subs	r2, r2, #1
   19938:	beq	19958 <__assert_fail@plt+0x80c8>
   1993c:	cmp	r5, r7
   19940:	cmpeq	r4, r6
   19944:	bcs	1991c <__assert_fail@plt+0x808c>
   19948:	adds	r4, r4, r4
   1994c:	adc	r5, r5, r5
   19950:	subs	r2, r2, #1
   19954:	bne	1993c <__assert_fail@plt+0x80ac>
   19958:	lsr	r3, r4, ip
   1995c:	orr	r3, r3, r5, lsl fp
   19960:	lsr	r2, r5, ip
   19964:	orr	r3, r3, r5, lsr sl
   19968:	adds	r0, r0, r4
   1996c:	mov	r4, r3
   19970:	lsl	r3, r2, ip
   19974:	orr	r3, r3, r4, lsl sl
   19978:	lsl	ip, r4, ip
   1997c:	orr	r3, r3, r4, lsr fp
   19980:	adc	r1, r1, r5
   19984:	subs	r0, r0, ip
   19988:	mov	r5, r2
   1998c:	sbc	r1, r1, r3
   19990:	cmp	lr, #0
   19994:	strdne	r4, [lr]
   19998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1999c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199a0:	mov	r7, r0
   199a4:	ldr	r6, [pc, #72]	; 199f4 <__assert_fail@plt+0x8164>
   199a8:	ldr	r5, [pc, #72]	; 199f8 <__assert_fail@plt+0x8168>
   199ac:	add	r6, pc, r6
   199b0:	add	r5, pc, r5
   199b4:	sub	r6, r6, r5
   199b8:	mov	r8, r1
   199bc:	mov	r9, r2
   199c0:	bl	11498 <fstatfs64@plt-0x20>
   199c4:	asrs	r6, r6, #2
   199c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   199cc:	mov	r4, #0
   199d0:	add	r4, r4, #1
   199d4:	ldr	r3, [r5], #4
   199d8:	mov	r2, r9
   199dc:	mov	r1, r8
   199e0:	mov	r0, r7
   199e4:	blx	r3
   199e8:	cmp	r6, r4
   199ec:	bne	199d0 <__assert_fail@plt+0x8140>
   199f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   199f4:	andeq	r2, r1, r0, asr r5
   199f8:	andeq	r2, r1, r8, asr #10
   199fc:	bx	lr
   19a00:	ldr	r3, [pc, #12]	; 19a14 <__assert_fail@plt+0x8184>
   19a04:	mov	r1, #0
   19a08:	add	r3, pc, r3
   19a0c:	ldr	r2, [r3]
   19a10:	b	1171c <__cxa_atexit@plt>
   19a14:	andeq	r2, r1, r4, asr r7
   19a18:	mov	r2, r1
   19a1c:	mov	r1, r0
   19a20:	mov	r0, #3
   19a24:	b	11830 <__xstat64@plt>
   19a28:	mov	r2, r1
   19a2c:	mov	r1, r0
   19a30:	mov	r0, #3
   19a34:	b	115d8 <__fxstat64@plt>
   19a38:	mov	r2, r1
   19a3c:	mov	r1, r0
   19a40:	mov	r0, #3
   19a44:	b	1186c <__lxstat64@plt>
   19a48:	push	{lr}		; (str lr, [sp, #-4]!)
   19a4c:	sub	sp, sp, #12
   19a50:	str	r3, [sp]
   19a54:	mov	r3, r2
   19a58:	mov	r2, r1
   19a5c:	mov	r1, r0
   19a60:	mov	r0, #3
   19a64:	bl	115c0 <__fxstatat64@plt>
   19a68:	add	sp, sp, #12
   19a6c:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019a70 <.fini>:
   19a70:	push	{r3, lr}
   19a74:	pop	{r3, pc}
