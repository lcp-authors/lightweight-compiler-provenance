
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

000110fc <.init>:
   110fc:	push	{r3, lr}
   11100:	bl	11ee8 <__assert_fail@plt+0xa30>
   11104:	pop	{r3, pc}

Disassembly of section .plt:

00011108 <fdopen@plt-0x14>:
   11108:	push	{lr}		; (str lr, [sp, #-4]!)
   1110c:	ldr	lr, [pc, #4]	; 11118 <fdopen@plt-0x4>
   11110:	add	lr, pc, lr
   11114:	ldr	pc, [lr, #8]!
   11118:	andeq	sp, r1, r8, ror #29

0001111c <fdopen@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #118784	; 0x1d000
   11124:	ldr	pc, [ip, #3816]!	; 0xee8

00011128 <calloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #118784	; 0x1d000
   11130:	ldr	pc, [ip, #3808]!	; 0xee0

00011134 <fputs_unlocked@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #118784	; 0x1d000
   1113c:	ldr	pc, [ip, #3800]!	; 0xed8

00011140 <raise@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #118784	; 0x1d000
   11148:	ldr	pc, [ip, #3792]!	; 0xed0

0001114c <fsync@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #118784	; 0x1d000
   11154:	ldr	pc, [ip, #3784]!	; 0xec8

00011158 <strcmp@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #118784	; 0x1d000
   11160:	ldr	pc, [ip, #3776]!	; 0xec0

00011164 <fflush@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #118784	; 0x1d000
   1116c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011170 <memmove@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #118784	; 0x1d000
   11178:	ldr	pc, [ip, #3760]!	; 0xeb0

0001117c <free@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #118784	; 0x1d000
   11184:	ldr	pc, [ip, #3752]!	; 0xea8

00011188 <_exit@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #118784	; 0x1d000
   11190:	ldr	pc, [ip, #3744]!	; 0xea0

00011194 <memcpy@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #118784	; 0x1d000
   1119c:	ldr	pc, [ip, #3736]!	; 0xe98

000111a0 <__strtoull_internal@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #118784	; 0x1d000
   111a8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ac <mbsinit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #118784	; 0x1d000
   111b4:	ldr	pc, [ip, #3720]!	; 0xe88

000111b8 <time@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #118784	; 0x1d000
   111c0:	ldr	pc, [ip, #3712]!	; 0xe80

000111c4 <ftruncate64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #118784	; 0x1d000
   111cc:	ldr	pc, [ip, #3704]!	; 0xe78

000111d0 <memcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #118784	; 0x1d000
   111d8:	ldr	pc, [ip, #3696]!	; 0xe70

000111dc <fputc_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #118784	; 0x1d000
   111e4:	ldr	pc, [ip, #3688]!	; 0xe68

000111e8 <dcgettext@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #118784	; 0x1d000
   111f0:	ldr	pc, [ip, #3680]!	; 0xe60

000111f4 <unlink@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #118784	; 0x1d000
   111fc:	ldr	pc, [ip, #3672]!	; 0xe58

00011200 <realloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #118784	; 0x1d000
   11208:	ldr	pc, [ip, #3664]!	; 0xe50

0001120c <textdomain@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #118784	; 0x1d000
   11214:	ldr	pc, [ip, #3656]!	; 0xe48

00011218 <__fxstatat64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #118784	; 0x1d000
   11220:	ldr	pc, [ip, #3648]!	; 0xe40

00011224 <iswprint@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #118784	; 0x1d000
   1122c:	ldr	pc, [ip, #3640]!	; 0xe38

00011230 <__fxstat64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #118784	; 0x1d000
   11238:	ldr	pc, [ip, #3632]!	; 0xe30

0001123c <__memcpy_chk@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #118784	; 0x1d000
   11244:	ldr	pc, [ip, #3624]!	; 0xe28

00011248 <fwrite@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #118784	; 0x1d000
   11250:	ldr	pc, [ip, #3616]!	; 0xe20

00011254 <ioctl@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #118784	; 0x1d000
   1125c:	ldr	pc, [ip, #3608]!	; 0xe18

00011260 <lseek64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #118784	; 0x1d000
   11268:	ldr	pc, [ip, #3600]!	; 0xe10

0001126c <__ctype_get_mb_cur_max@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #118784	; 0x1d000
   11274:	ldr	pc, [ip, #3592]!	; 0xe08

00011278 <__strcpy_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #118784	; 0x1d000
   11280:	ldr	pc, [ip, #3584]!	; 0xe00

00011284 <__fpending@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #118784	; 0x1d000
   1128c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011290 <mbrtowc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #118784	; 0x1d000
   11298:	ldr	pc, [ip, #3568]!	; 0xdf0

0001129c <error@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #118784	; 0x1d000
   112a4:	ldr	pc, [ip, #3560]!	; 0xde8

000112a8 <open64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #118784	; 0x1d000
   112b0:	ldr	pc, [ip, #3552]!	; 0xde0

000112b4 <getenv@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #118784	; 0x1d000
   112bc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112c0 <malloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #118784	; 0x1d000
   112c8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112cc <__libc_start_main@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #118784	; 0x1d000
   112d4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d8 <__freading@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #118784	; 0x1d000
   112e0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e4 <__gmon_start__@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #118784	; 0x1d000
   112ec:	ldr	pc, [ip, #3512]!	; 0xdb8

000112f0 <getopt_long@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #118784	; 0x1d000
   112f8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112fc <__ctype_b_loc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #118784	; 0x1d000
   11304:	ldr	pc, [ip, #3496]!	; 0xda8

00011308 <exit@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #118784	; 0x1d000
   11310:	ldr	pc, [ip, #3488]!	; 0xda0

00011314 <strlen@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #118784	; 0x1d000
   1131c:	ldr	pc, [ip, #3480]!	; 0xd98

00011320 <strchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #118784	; 0x1d000
   11328:	ldr	pc, [ip, #3472]!	; 0xd90

0001132c <getpagesize@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #118784	; 0x1d000
   11334:	ldr	pc, [ip, #3464]!	; 0xd88

00011338 <__errno_location@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #118784	; 0x1d000
   11340:	ldr	pc, [ip, #3456]!	; 0xd80

00011344 <__sprintf_chk@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #118784	; 0x1d000
   1134c:	ldr	pc, [ip, #3448]!	; 0xd78

00011350 <__cxa_atexit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #118784	; 0x1d000
   11358:	ldr	pc, [ip, #3440]!	; 0xd70

0001135c <setvbuf@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #118784	; 0x1d000
   11364:	ldr	pc, [ip, #3432]!	; 0xd68

00011368 <memset@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #118784	; 0x1d000
   11370:	ldr	pc, [ip, #3424]!	; 0xd60

00011374 <renameat2@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #118784	; 0x1d000
   1137c:	ldr	pc, [ip, #3416]!	; 0xd58

00011380 <__printf_chk@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #118784	; 0x1d000
   11388:	ldr	pc, [ip, #3408]!	; 0xd50

0001138c <write@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #118784	; 0x1d000
   11394:	ldr	pc, [ip, #3400]!	; 0xd48

00011398 <fileno@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #118784	; 0x1d000
   113a0:	ldr	pc, [ip, #3392]!	; 0xd40

000113a4 <__fprintf_chk@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #118784	; 0x1d000
   113ac:	ldr	pc, [ip, #3384]!	; 0xd38

000113b0 <fclose@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #118784	; 0x1d000
   113b8:	ldr	pc, [ip, #3376]!	; 0xd30

000113bc <fseeko64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #118784	; 0x1d000
   113c4:	ldr	pc, [ip, #3368]!	; 0xd28

000113c8 <fcntl64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #118784	; 0x1d000
   113d0:	ldr	pc, [ip, #3360]!	; 0xd20

000113d4 <__overflow@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #118784	; 0x1d000
   113dc:	ldr	pc, [ip, #3352]!	; 0xd18

000113e0 <setlocale@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #118784	; 0x1d000
   113e8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ec <__explicit_bzero_chk@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #118784	; 0x1d000
   113f4:	ldr	pc, [ip, #3336]!	; 0xd08

000113f8 <strrchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #118784	; 0x1d000
   11400:	ldr	pc, [ip, #3328]!	; 0xd00

00011404 <nl_langinfo@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #118784	; 0x1d000
   1140c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011410 <localeconv@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #118784	; 0x1d000
   11418:	ldr	pc, [ip, #3312]!	; 0xcf0

0001141c <fopen64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #118784	; 0x1d000
   11424:	ldr	pc, [ip, #3304]!	; 0xce8

00011428 <renameat@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #118784	; 0x1d000
   11430:	ldr	pc, [ip, #3296]!	; 0xce0

00011434 <bindtextdomain@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #118784	; 0x1d000
   1143c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011440 <fread_unlocked@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #118784	; 0x1d000
   11448:	ldr	pc, [ip, #3280]!	; 0xcd0

0001144c <getrandom@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #118784	; 0x1d000
   11454:	ldr	pc, [ip, #3272]!	; 0xcc8

00011458 <aligned_alloc@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #118784	; 0x1d000
   11460:	ldr	pc, [ip, #3264]!	; 0xcc0

00011464 <sync@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #118784	; 0x1d000
   1146c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011470 <chmod@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #118784	; 0x1d000
   11478:	ldr	pc, [ip, #3248]!	; 0xcb0

0001147c <isatty@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #118784	; 0x1d000
   11484:	ldr	pc, [ip, #3240]!	; 0xca8

00011488 <strncmp@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #118784	; 0x1d000
   11490:	ldr	pc, [ip, #3232]!	; 0xca0

00011494 <fdatasync@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #118784	; 0x1d000
   1149c:	ldr	pc, [ip, #3224]!	; 0xc98

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #118784	; 0x1d000
   114a8:	ldr	pc, [ip, #3216]!	; 0xc90

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #118784	; 0x1d000
   114b4:	ldr	pc, [ip, #3208]!	; 0xc88

000114b8 <__assert_fail@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #118784	; 0x1d000
   114c0:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

000114c8 <.text>:
   114c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114cc:	sub	sp, sp, #108	; 0x6c
   114d0:	mov	r4, #0
   114d4:	mov	r6, r0
   114d8:	ldr	r0, [r1]
   114dc:	mov	r5, r1
   114e0:	str	r4, [sp, #84]	; 0x54
   114e4:	str	r4, [sp, #80]	; 0x50
   114e8:	str	r4, [sp, #88]	; 0x58
   114ec:	str	r4, [sp, #92]	; 0x5c
   114f0:	str	r4, [sp, #96]	; 0x60
   114f4:	str	r4, [sp, #100]	; 0x64
   114f8:	bl	14f98 <__assert_fail@plt+0x3ae0>
   114fc:	ldr	r1, [pc, #2308]	; 11e08 <__assert_fail@plt+0x950>
   11500:	mov	r0, #6
   11504:	bl	113e0 <setlocale@plt>
   11508:	ldr	r1, [pc, #2300]	; 11e0c <__assert_fail@plt+0x954>
   1150c:	ldr	r0, [pc, #2300]	; 11e10 <__assert_fail@plt+0x958>
   11510:	bl	11434 <bindtextdomain@plt>
   11514:	ldr	sl, [pc, #2296]	; 11e14 <__assert_fail@plt+0x95c>
   11518:	ldr	r0, [pc, #2288]	; 11e10 <__assert_fail@plt+0x958>
   1151c:	bl	1120c <textdomain@plt>
   11520:	ldr	r7, [pc, #2288]	; 11e18 <__assert_fail@plt+0x960>
   11524:	ldr	r0, [pc, #2288]	; 11e1c <__assert_fail@plt+0x964>
   11528:	ldr	r9, [pc, #2288]	; 11e20 <__assert_fail@plt+0x968>
   1152c:	bl	1d014 <__assert_fail@plt+0xbb5c>
   11530:	add	r8, sl, #304	; 0x130
   11534:	mvn	r2, #0
   11538:	mvn	r3, #0
   1153c:	mov	r1, #3
   11540:	str	r4, [sp, #24]
   11544:	strd	r2, [sp, #88]	; 0x58
   11548:	str	r1, [sp, #84]	; 0x54
   1154c:	mov	r4, #0
   11550:	str	r4, [sp]
   11554:	mov	r3, r8
   11558:	mov	r2, r7
   1155c:	mov	r1, r5
   11560:	mov	r0, r6
   11564:	bl	112f0 <getopt_long@plt>
   11568:	cmn	r0, #1
   1156c:	beq	11770 <__assert_fail@plt+0x2b8>
   11570:	cmp	r0, #115	; 0x73
   11574:	beq	11724 <__assert_fail@plt+0x26c>
   11578:	ble	115a4 <__assert_fail@plt+0xec>
   1157c:	cmp	r0, #120	; 0x78
   11580:	beq	116e4 <__assert_fail@plt+0x22c>
   11584:	bgt	11608 <__assert_fail@plt+0x150>
   11588:	cmp	r0, #117	; 0x75
   1158c:	beq	1165c <__assert_fail@plt+0x1a4>
   11590:	cmp	r0, #118	; 0x76
   11594:	bne	1171c <__assert_fail@plt+0x264>
   11598:	mov	r3, #1
   1159c:	strb	r3, [sp, #100]	; 0x64
   115a0:	b	1154c <__assert_fail@plt+0x94>
   115a4:	cmn	r0, #2
   115a8:	beq	116f0 <__assert_fail@plt+0x238>
   115ac:	ble	116ac <__assert_fail@plt+0x1f4>
   115b0:	cmp	r0, #102	; 0x66
   115b4:	beq	11650 <__assert_fail@plt+0x198>
   115b8:	cmp	r0, #110	; 0x6e
   115bc:	bne	1171c <__assert_fail@plt+0x264>
   115c0:	mov	r2, #5
   115c4:	ldr	r1, [pc, #2136]	; 11e24 <__assert_fail@plt+0x96c>
   115c8:	mov	r0, r4
   115cc:	ldr	fp, [r9]
   115d0:	bl	111e8 <dcgettext@plt>
   115d4:	ldr	r1, [pc, #2092]	; 11e08 <__assert_fail@plt+0x950>
   115d8:	mvn	r2, #-1073741824	; 0xc0000000
   115dc:	mov	r3, #0
   115e0:	str	r4, [sp, #16]
   115e4:	strd	r2, [sp]
   115e8:	str	r1, [sp, #8]
   115ec:	mov	r2, #0
   115f0:	mov	r3, #0
   115f4:	str	r0, [sp, #12]
   115f8:	mov	r0, fp
   115fc:	bl	1b0b8 <__assert_fail@plt+0x9c00>
   11600:	str	r0, [sp, #84]	; 0x54
   11604:	b	1154c <__assert_fail@plt+0x94>
   11608:	cmp	r0, #122	; 0x7a
   1160c:	beq	11644 <__assert_fail@plt+0x18c>
   11610:	cmp	r0, #256	; 0x100
   11614:	bne	1171c <__assert_fail@plt+0x264>
   11618:	ldr	r3, [sp, #24]
   1161c:	cmp	r3, #0
   11620:	beq	11638 <__assert_fail@plt+0x180>
   11624:	mov	r0, r3
   11628:	ldr	r1, [r9]
   1162c:	bl	11158 <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	bne	11de8 <__assert_fail@plt+0x930>
   11638:	ldr	r3, [r9]
   1163c:	str	r3, [sp, #24]
   11640:	b	1154c <__assert_fail@plt+0x94>
   11644:	mov	r3, #1
   11648:	strb	r3, [sp, #102]	; 0x66
   1164c:	b	1154c <__assert_fail@plt+0x94>
   11650:	mov	r3, #1
   11654:	strb	r3, [sp, #80]	; 0x50
   11658:	b	1154c <__assert_fail@plt+0x94>
   1165c:	ldr	r1, [r9]
   11660:	cmp	r1, #0
   11664:	moveq	r3, #3
   11668:	streq	r3, [sp, #96]	; 0x60
   1166c:	beq	1154c <__assert_fail@plt+0x94>
   11670:	ldr	r3, [pc, #1968]	; 11e28 <__assert_fail@plt+0x970>
   11674:	mov	ip, #1
   11678:	mov	r0, #4
   1167c:	ldr	r2, [r3]
   11680:	ldr	r3, [pc, #1956]	; 11e2c <__assert_fail@plt+0x974>
   11684:	str	r2, [sp, #4]
   11688:	str	r0, [sp]
   1168c:	add	r2, r3, #12
   11690:	str	ip, [sp, #8]
   11694:	ldr	r0, [pc, #1940]	; 11e30 <__assert_fail@plt+0x978>
   11698:	bl	13720 <__assert_fail@plt+0x2268>
   1169c:	add	r0, sl, r0, lsl #2
   116a0:	ldr	r3, [r0, #276]	; 0x114
   116a4:	str	r3, [sp, #96]	; 0x60
   116a8:	b	1154c <__assert_fail@plt+0x94>
   116ac:	cmn	r0, #3
   116b0:	bne	1171c <__assert_fail@plt+0x264>
   116b4:	ldr	r1, [pc, #1912]	; 11e34 <__assert_fail@plt+0x97c>
   116b8:	ldr	r3, [pc, #1912]	; 11e38 <__assert_fail@plt+0x980>
   116bc:	ldr	r2, [pc, #1912]	; 11e3c <__assert_fail@plt+0x984>
   116c0:	str	r4, [sp, #4]
   116c4:	ldr	r0, [r1]
   116c8:	ldr	r3, [r3]
   116cc:	ldr	r1, [pc, #1900]	; 11e40 <__assert_fail@plt+0x988>
   116d0:	str	r2, [sp]
   116d4:	ldr	r2, [pc, #1896]	; 11e44 <__assert_fail@plt+0x98c>
   116d8:	bl	1a6f8 <__assert_fail@plt+0x9240>
   116dc:	mov	r0, r4
   116e0:	bl	11308 <exit@plt>
   116e4:	mov	r3, #1
   116e8:	strb	r3, [sp, #101]	; 0x65
   116ec:	b	1154c <__assert_fail@plt+0x94>
   116f0:	mov	r0, r4
   116f4:	bl	13090 <__assert_fail@plt+0x1bd8>
   116f8:	ldr	r4, [sp, #40]	; 0x28
   116fc:	mov	r2, #5
   11700:	ldr	r1, [pc, #1856]	; 11e48 <__assert_fail@plt+0x990>
   11704:	mov	r0, r4
   11708:	bl	111e8 <dcgettext@plt>
   1170c:	mov	r1, r4
   11710:	mov	r2, r0
   11714:	mov	r0, r4
   11718:	bl	1129c <error@plt>
   1171c:	mov	r0, #1
   11720:	bl	13090 <__assert_fail@plt+0x1bd8>
   11724:	mov	r2, #5
   11728:	ldr	r1, [pc, #1820]	; 11e4c <__assert_fail@plt+0x994>
   1172c:	mov	r0, r4
   11730:	ldr	fp, [r9]
   11734:	bl	111e8 <dcgettext@plt>
   11738:	ldr	r3, [pc, #1808]	; 11e50 <__assert_fail@plt+0x998>
   1173c:	mvn	r2, #0
   11740:	str	r3, [sp, #8]
   11744:	mvn	r3, #-2147483648	; 0x80000000
   11748:	str	r4, [sp, #16]
   1174c:	strd	r2, [sp]
   11750:	mov	r1, r4
   11754:	mov	r2, #0
   11758:	mov	r3, #0
   1175c:	str	r0, [sp, #12]
   11760:	mov	r0, fp
   11764:	bl	1af7c <__assert_fail@plt+0x9ac4>
   11768:	strd	r0, [sp, #88]	; 0x58
   1176c:	b	1154c <__assert_fail@plt+0x94>
   11770:	ldr	r3, [pc, #1756]	; 11e54 <__assert_fail@plt+0x99c>
   11774:	mov	fp, r0
   11778:	ldr	r3, [r3]
   1177c:	subs	r2, r6, r3
   11780:	str	r2, [sp, #40]	; 0x28
   11784:	lsl	r6, r3, #2
   11788:	beq	116f8 <__assert_fail@plt+0x240>
   1178c:	mov	r1, r0
   11790:	ldr	r0, [sp, #24]
   11794:	bl	1900c <__assert_fail@plt+0x7b54>
   11798:	ldr	r3, [pc, #1720]	; 11e58 <__assert_fail@plt+0x9a0>
   1179c:	cmp	r0, #0
   117a0:	mov	r7, r0
   117a4:	str	r0, [r3]
   117a8:	beq	11dac <__assert_fail@plt+0x8f4>
   117ac:	ldr	r0, [pc, #1704]	; 11e5c <__assert_fail@plt+0x9a4>
   117b0:	bl	1d014 <__assert_fail@plt+0xbb5c>
   117b4:	ldr	r3, [sp, #40]	; 0x28
   117b8:	cmp	r3, #0
   117bc:	mov	r3, #1
   117c0:	str	r3, [sp, #24]
   117c4:	ble	1198c <__assert_fail@plt+0x4d4>
   117c8:	add	r3, r5, r6
   117cc:	ldr	r9, [pc, #1676]	; 11e60 <__assert_fail@plt+0x9a8>
   117d0:	str	r3, [sp, #28]
   117d4:	mov	sl, r4
   117d8:	str	fp, [sp, #72]	; 0x48
   117dc:	b	1183c <__assert_fail@plt+0x384>
   117e0:	ldr	r3, [pc, #1648]	; 11e58 <__assert_fail@plt+0x9a0>
   117e4:	mov	r1, #3
   117e8:	mov	r0, #1
   117ec:	ldr	r5, [r3]
   117f0:	bl	13cec <__assert_fail@plt+0x2834>
   117f4:	cmp	r0, #0
   117f8:	blt	11cec <__assert_fail@plt+0x834>
   117fc:	tst	r0, #1024	; 0x400
   11800:	bne	118e4 <__assert_fail@plt+0x42c>
   11804:	mov	r2, r5
   11808:	add	r3, sp, #80	; 0x50
   1180c:	mov	r1, r7
   11810:	mov	r0, #1
   11814:	bl	12a68 <__assert_fail@plt+0x15b0>
   11818:	ldr	r3, [sp, #24]
   1181c:	and	r3, r3, r0
   11820:	str	r3, [sp, #24]
   11824:	mov	r0, r7
   11828:	bl	13ef8 <__assert_fail@plt+0x2a40>
   1182c:	ldr	r3, [sp, #40]	; 0x28
   11830:	add	sl, sl, #1
   11834:	cmp	r3, sl
   11838:	beq	1198c <__assert_fail@plt+0x4d4>
   1183c:	ldr	r4, [sp, #28]
   11840:	mov	r1, #3
   11844:	mov	r0, #0
   11848:	ldr	r2, [r4]
   1184c:	bl	17f70 <__assert_fail@plt+0x6ab8>
   11850:	bl	1af04 <__assert_fail@plt+0x9a4c>
   11854:	ldr	r5, [r4], #4
   11858:	ldr	r1, [pc, #1540]	; 11e64 <__assert_fail@plt+0x9ac>
   1185c:	str	r4, [sp, #28]
   11860:	mov	r7, r0
   11864:	mov	r0, r5
   11868:	bl	11158 <strcmp@plt>
   1186c:	subs	r4, r0, #0
   11870:	beq	117e0 <__assert_fail@plt+0x328>
   11874:	ldr	r3, [pc, #1500]	; 11e58 <__assert_fail@plt+0x9a0>
   11878:	ldr	r1, [pc, #1512]	; 11e68 <__assert_fail@plt+0x9b0>
   1187c:	mov	r0, r5
   11880:	ldr	r6, [r3]
   11884:	bl	13ec0 <__assert_fail@plt+0x2a08>
   11888:	subs	r4, r0, #0
   1188c:	blt	11910 <__assert_fail@plt+0x458>
   11890:	mov	r2, r6
   11894:	add	r3, sp, #80	; 0x50
   11898:	mov	r1, r7
   1189c:	mov	r0, r4
   118a0:	bl	12a68 <__assert_fail@plt+0x15b0>
   118a4:	str	r0, [sp, #32]
   118a8:	mov	r0, r4
   118ac:	bl	114ac <close@plt>
   118b0:	subs	r4, r0, #0
   118b4:	bne	11954 <__assert_fail@plt+0x49c>
   118b8:	ldr	r3, [sp, #32]
   118bc:	cmp	r3, #0
   118c0:	beq	118d0 <__assert_fail@plt+0x418>
   118c4:	ldr	r3, [sp, #96]	; 0x60
   118c8:	cmp	r3, #0
   118cc:	bne	1199c <__assert_fail@plt+0x4e4>
   118d0:	ldr	r2, [sp, #24]
   118d4:	ldr	r3, [sp, #32]
   118d8:	and	r3, r3, r2
   118dc:	str	r3, [sp, #24]
   118e0:	b	11824 <__assert_fail@plt+0x36c>
   118e4:	mov	r2, #5
   118e8:	ldr	r1, [pc, #1404]	; 11e6c <__assert_fail@plt+0x9b4>
   118ec:	mov	r0, r4
   118f0:	bl	111e8 <dcgettext@plt>
   118f4:	mov	r3, r7
   118f8:	mov	r1, r4
   118fc:	mov	r2, r0
   11900:	mov	r0, r4
   11904:	bl	1129c <error@plt>
   11908:	mov	r0, r4
   1190c:	b	11818 <__assert_fail@plt+0x360>
   11910:	bl	11338 <__errno_location@plt>
   11914:	ldr	r4, [r0]
   11918:	mov	r8, r0
   1191c:	cmp	r4, #13
   11920:	beq	11d20 <__assert_fail@plt+0x868>
   11924:	mov	r2, #5
   11928:	ldr	r1, [pc, #1344]	; 11e70 <__assert_fail@plt+0x9b8>
   1192c:	mov	r0, #0
   11930:	bl	111e8 <dcgettext@plt>
   11934:	mov	r3, r7
   11938:	mov	r1, r4
   1193c:	mov	r2, r0
   11940:	mov	r0, #0
   11944:	bl	1129c <error@plt>
   11948:	mov	r3, #0
   1194c:	str	r3, [sp, #32]
   11950:	b	118d0 <__assert_fail@plt+0x418>
   11954:	bl	11338 <__errno_location@plt>
   11958:	mov	r3, #0
   1195c:	mov	r2, #5
   11960:	ldr	r1, [pc, #1292]	; 11e74 <__assert_fail@plt+0x9bc>
   11964:	str	r3, [sp, #32]
   11968:	ldr	r4, [r0]
   1196c:	mov	r0, r3
   11970:	bl	111e8 <dcgettext@plt>
   11974:	mov	r3, r7
   11978:	mov	r1, r4
   1197c:	mov	r2, r0
   11980:	mov	r0, #0
   11984:	bl	1129c <error@plt>
   11988:	b	118d0 <__assert_fail@plt+0x418>
   1198c:	ldr	r3, [sp, #24]
   11990:	eor	r0, r3, #1
   11994:	add	sp, sp, #108	; 0x6c
   11998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199c:	mov	r0, r5
   119a0:	bl	1af04 <__assert_fail@plt+0x9a4c>
   119a4:	mov	r6, r0
   119a8:	str	r0, [sp, #36]	; 0x24
   119ac:	bl	139c8 <__assert_fail@plt+0x2510>
   119b0:	str	r0, [sp, #44]	; 0x2c
   119b4:	mov	r0, r6
   119b8:	bl	13b78 <__assert_fail@plt+0x26c0>
   119bc:	mov	r1, #3
   119c0:	mov	r2, r0
   119c4:	str	r0, [sp, #68]	; 0x44
   119c8:	mov	r0, r4
   119cc:	bl	17f70 <__assert_fail@plt+0x6ab8>
   119d0:	bl	1af04 <__assert_fail@plt+0x9a4c>
   119d4:	ldr	r3, [sp, #96]	; 0x60
   119d8:	cmp	r3, #3
   119dc:	ldrne	r3, [sp, #72]	; 0x48
   119e0:	strne	r3, [sp, #48]	; 0x30
   119e4:	str	r0, [sp, #60]	; 0x3c
   119e8:	beq	11d6c <__assert_fail@plt+0x8b4>
   119ec:	ldrb	r3, [sp, #100]	; 0x64
   119f0:	cmp	r3, #0
   119f4:	bne	11b84 <__assert_fail@plt+0x6cc>
   119f8:	ldr	r3, [sp, #96]	; 0x60
   119fc:	cmp	r3, #1
   11a00:	beq	11ae0 <__assert_fail@plt+0x628>
   11a04:	ldr	r4, [sp, #44]	; 0x2c
   11a08:	mov	r0, r4
   11a0c:	bl	13a24 <__assert_fail@plt+0x256c>
   11a10:	ldr	r1, [sp, #36]	; 0x24
   11a14:	str	r7, [sp, #64]	; 0x40
   11a18:	sub	r3, r4, r1
   11a1c:	add	r3, r5, r3
   11a20:	str	r3, [sp, #56]	; 0x38
   11a24:	ldr	r3, [sp, #32]
   11a28:	str	sl, [sp, #76]	; 0x4c
   11a2c:	str	r3, [sp, #52]	; 0x34
   11a30:	add	r1, r4, r0
   11a34:	mov	r6, r0
   11a38:	sub	r4, r4, #1
   11a3c:	mov	r7, r1
   11a40:	cmp	r6, #0
   11a44:	beq	11ad8 <__assert_fail@plt+0x620>
   11a48:	mov	r2, r6
   11a4c:	mov	r1, #48	; 0x30
   11a50:	ldr	r0, [sp, #44]	; 0x2c
   11a54:	mvn	fp, #99	; 0x63
   11a58:	mov	sl, #48	; 0x30
   11a5c:	bl	11368 <memset@plt>
   11a60:	mov	r3, #0
   11a64:	strb	r3, [r7], #-1
   11a68:	mov	r3, #1
   11a6c:	str	r3, [sp]
   11a70:	mov	r2, fp
   11a74:	ldr	r3, [sp, #36]	; 0x24
   11a78:	mov	r1, r5
   11a7c:	mvn	r0, #99	; 0x63
   11a80:	bl	19c78 <__assert_fail@plt+0x87c0>
   11a84:	cmp	r0, #0
   11a88:	beq	11be4 <__assert_fail@plt+0x72c>
   11a8c:	bl	11338 <__errno_location@plt>
   11a90:	ldr	r3, [r0]
   11a94:	cmp	r3, #17
   11a98:	bne	11ca8 <__assert_fail@plt+0x7f0>
   11a9c:	mov	r8, r7
   11aa0:	b	11ab0 <__assert_fail@plt+0x5f8>
   11aa4:	strb	sl, [r8], #-1
   11aa8:	cmp	r4, r8
   11aac:	beq	11ca8 <__assert_fail@plt+0x7f0>
   11ab0:	ldrb	r1, [r8]
   11ab4:	mov	r0, r9
   11ab8:	bl	11320 <strchr@plt>
   11abc:	cmp	r0, #0
   11ac0:	beq	11d80 <__assert_fail@plt+0x8c8>
   11ac4:	ldrb	r3, [r0, #1]
   11ac8:	cmp	r3, #0
   11acc:	beq	11aa4 <__assert_fail@plt+0x5ec>
   11ad0:	strb	r3, [r8]
   11ad4:	b	11a68 <__assert_fail@plt+0x5b0>
   11ad8:	ldr	r7, [sp, #64]	; 0x40
   11adc:	ldr	sl, [sp, #76]	; 0x4c
   11ae0:	mov	r0, r5
   11ae4:	bl	111f4 <unlink@plt>
   11ae8:	subs	r4, r0, #0
   11aec:	bne	11bac <__assert_fail@plt+0x6f4>
   11af0:	ldrb	r3, [sp, #100]	; 0x64
   11af4:	cmp	r3, #0
   11af8:	bne	11d48 <__assert_fail@plt+0x890>
   11afc:	ldr	r4, [sp, #48]	; 0x30
   11b00:	cmp	r4, #0
   11b04:	blt	11b68 <__assert_fail@plt+0x6b0>
   11b08:	ldr	r1, [sp, #60]	; 0x3c
   11b0c:	mov	r0, r4
   11b10:	bl	11fe8 <__assert_fail@plt+0xb30>
   11b14:	ldr	r3, [sp, #32]
   11b18:	cmp	r0, #0
   11b1c:	movne	r3, #0
   11b20:	mov	r0, r4
   11b24:	str	r3, [sp, #32]
   11b28:	bl	114ac <close@plt>
   11b2c:	cmp	r0, #0
   11b30:	beq	11b68 <__assert_fail@plt+0x6b0>
   11b34:	bl	11338 <__errno_location@plt>
   11b38:	mov	r3, #0
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #812]	; 11e74 <__assert_fail@plt+0x9bc>
   11b44:	str	r3, [sp, #32]
   11b48:	ldr	r4, [r0]
   11b4c:	mov	r0, r3
   11b50:	bl	111e8 <dcgettext@plt>
   11b54:	ldr	r3, [sp, #60]	; 0x3c
   11b58:	mov	r1, r4
   11b5c:	mov	r2, r0
   11b60:	mov	r0, #0
   11b64:	bl	1129c <error@plt>
   11b68:	ldr	r0, [sp, #36]	; 0x24
   11b6c:	bl	13ef8 <__assert_fail@plt+0x2a40>
   11b70:	ldr	r0, [sp, #68]	; 0x44
   11b74:	bl	13ef8 <__assert_fail@plt+0x2a40>
   11b78:	ldr	r0, [sp, #60]	; 0x3c
   11b7c:	bl	13ef8 <__assert_fail@plt+0x2a40>
   11b80:	b	118d0 <__assert_fail@plt+0x418>
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #744]	; 11e78 <__assert_fail@plt+0x9c0>
   11b8c:	mov	r0, #0
   11b90:	bl	111e8 <dcgettext@plt>
   11b94:	mov	r1, #0
   11b98:	mov	r3, r7
   11b9c:	mov	r2, r0
   11ba0:	mov	r0, r1
   11ba4:	bl	1129c <error@plt>
   11ba8:	b	119f8 <__assert_fail@plt+0x540>
   11bac:	bl	11338 <__errno_location@plt>
   11bb0:	mov	r3, #0
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #700]	; 11e7c <__assert_fail@plt+0x9c4>
   11bbc:	str	r3, [sp, #32]
   11bc0:	ldr	r4, [r0]
   11bc4:	mov	r0, r3
   11bc8:	bl	111e8 <dcgettext@plt>
   11bcc:	mov	r3, r7
   11bd0:	mov	r1, r4
   11bd4:	mov	r2, r0
   11bd8:	mov	r0, #0
   11bdc:	bl	1129c <error@plt>
   11be0:	b	11afc <__assert_fail@plt+0x644>
   11be4:	ldr	r3, [sp, #48]	; 0x30
   11be8:	cmp	r3, #0
   11bec:	blt	11c50 <__assert_fail@plt+0x798>
   11bf0:	mov	r0, r3
   11bf4:	bl	11494 <fdatasync@plt>
   11bf8:	cmp	r0, #0
   11bfc:	beq	11c50 <__assert_fail@plt+0x798>
   11c00:	bl	11338 <__errno_location@plt>
   11c04:	ldr	sl, [r0]
   11c08:	mov	r8, r0
   11c0c:	sub	fp, sl, #21
   11c10:	cmp	sl, #9
   11c14:	cmpne	fp, #1
   11c18:	movls	fp, #1
   11c1c:	movhi	fp, #0
   11c20:	movhi	r2, #5
   11c24:	ldrhi	r1, [pc, #596]	; 11e80 <__assert_fail@plt+0x9c8>
   11c28:	bls	11cb0 <__assert_fail@plt+0x7f8>
   11c2c:	mov	r0, #0
   11c30:	bl	111e8 <dcgettext@plt>
   11c34:	ldr	r3, [sp, #60]	; 0x3c
   11c38:	mov	r1, sl
   11c3c:	str	fp, [sp, #32]
   11c40:	mov	r2, r0
   11c44:	mov	r0, #0
   11c48:	bl	1129c <error@plt>
   11c4c:	str	sl, [r8]
   11c50:	ldrb	r3, [sp, #100]	; 0x64
   11c54:	cmp	r3, #0
   11c58:	beq	11c98 <__assert_fail@plt+0x7e0>
   11c5c:	mov	r2, #5
   11c60:	ldr	r1, [pc, #540]	; 11e84 <__assert_fail@plt+0x9cc>
   11c64:	mov	r0, #0
   11c68:	bl	111e8 <dcgettext@plt>
   11c6c:	ldr	r2, [sp, #52]	; 0x34
   11c70:	mov	r1, #0
   11c74:	cmp	r2, #0
   11c78:	ldr	r2, [sp, #36]	; 0x24
   11c7c:	ldr	r3, [sp, #64]	; 0x40
   11c80:	str	r2, [sp]
   11c84:	moveq	r3, r5
   11c88:	str	r1, [sp, #52]	; 0x34
   11c8c:	mov	r2, r0
   11c90:	mov	r0, r1
   11c94:	bl	1129c <error@plt>
   11c98:	add	r2, r6, #1
   11c9c:	ldr	r1, [sp, #44]	; 0x2c
   11ca0:	ldr	r0, [sp, #56]	; 0x38
   11ca4:	bl	11194 <memcpy@plt>
   11ca8:	sub	r6, r6, #1
   11cac:	b	11a40 <__assert_fail@plt+0x588>
   11cb0:	ldr	r0, [sp, #48]	; 0x30
   11cb4:	bl	1114c <fsync@plt>
   11cb8:	cmp	r0, #0
   11cbc:	beq	11c50 <__assert_fail@plt+0x798>
   11cc0:	ldr	sl, [r8]
   11cc4:	sub	fp, sl, #21
   11cc8:	cmp	sl, #9
   11ccc:	cmpne	fp, #1
   11cd0:	movls	fp, #1
   11cd4:	movhi	fp, #0
   11cd8:	movhi	r2, #5
   11cdc:	ldrhi	r1, [pc, #420]	; 11e88 <__assert_fail@plt+0x9d0>
   11ce0:	bhi	11c2c <__assert_fail@plt+0x774>
   11ce4:	bl	11464 <sync@plt>
   11ce8:	b	11c50 <__assert_fail@plt+0x798>
   11cec:	bl	11338 <__errno_location@plt>
   11cf0:	mov	r2, #5
   11cf4:	ldr	r1, [pc, #400]	; 11e8c <__assert_fail@plt+0x9d4>
   11cf8:	ldr	r5, [r0]
   11cfc:	mov	r0, r4
   11d00:	bl	111e8 <dcgettext@plt>
   11d04:	mov	r3, r7
   11d08:	mov	r1, r5
   11d0c:	mov	r2, r0
   11d10:	mov	r0, r4
   11d14:	bl	1129c <error@plt>
   11d18:	mov	r0, r4
   11d1c:	b	11818 <__assert_fail@plt+0x360>
   11d20:	ldrb	r3, [sp, #80]	; 0x50
   11d24:	cmp	r3, #0
   11d28:	beq	11924 <__assert_fail@plt+0x46c>
   11d2c:	mov	r1, #128	; 0x80
   11d30:	mov	r0, r5
   11d34:	bl	11470 <chmod@plt>
   11d38:	cmp	r0, #0
   11d3c:	beq	11d94 <__assert_fail@plt+0x8dc>
   11d40:	ldr	r4, [r8]
   11d44:	b	11924 <__assert_fail@plt+0x46c>
   11d48:	mov	r2, #5
   11d4c:	ldr	r1, [pc, #316]	; 11e90 <__assert_fail@plt+0x9d8>
   11d50:	bl	111e8 <dcgettext@plt>
   11d54:	mov	r3, r7
   11d58:	mov	r1, r4
   11d5c:	mov	r2, r0
   11d60:	mov	r0, r4
   11d64:	bl	1129c <error@plt>
   11d68:	b	11afc <__assert_fail@plt+0x644>
   11d6c:	mov	r1, #18688	; 0x4900
   11d70:	ldr	r0, [sp, #68]	; 0x44
   11d74:	bl	13ec0 <__assert_fail@plt+0x2a08>
   11d78:	str	r0, [sp, #48]	; 0x30
   11d7c:	b	119ec <__assert_fail@plt+0x534>
   11d80:	ldr	r3, [pc, #268]	; 11e94 <__assert_fail@plt+0x9dc>
   11d84:	mov	r2, #1000	; 0x3e8
   11d88:	ldr	r1, [pc, #264]	; 11e98 <__assert_fail@plt+0x9e0>
   11d8c:	ldr	r0, [pc, #264]	; 11e9c <__assert_fail@plt+0x9e4>
   11d90:	bl	114b8 <__assert_fail@plt>
   11d94:	ldr	r1, [pc, #204]	; 11e68 <__assert_fail@plt+0x9b0>
   11d98:	mov	r0, r5
   11d9c:	bl	13ec0 <__assert_fail@plt+0x2a08>
   11da0:	subs	r4, r0, #0
   11da4:	bge	11890 <__assert_fail@plt+0x3d8>
   11da8:	b	11d40 <__assert_fail@plt+0x888>
   11dac:	bl	11338 <__errno_location@plt>
   11db0:	ldr	r3, [sp, #24]
   11db4:	ldr	r2, [pc, #228]	; 11ea0 <__assert_fail@plt+0x9e8>
   11db8:	cmp	r3, #0
   11dbc:	moveq	r3, r2
   11dc0:	mov	r2, r3
   11dc4:	mov	r1, #3
   11dc8:	ldr	r4, [r0]
   11dcc:	mov	r0, r7
   11dd0:	bl	17f70 <__assert_fail@plt+0x6ab8>
   11dd4:	mov	r1, r4
   11dd8:	ldr	r2, [pc, #196]	; 11ea4 <__assert_fail@plt+0x9ec>
   11ddc:	mov	r3, r0
   11de0:	mov	r0, #1
   11de4:	bl	1129c <error@plt>
   11de8:	mov	r2, #5
   11dec:	ldr	r1, [pc, #180]	; 11ea8 <__assert_fail@plt+0x9f0>
   11df0:	mov	r0, r4
   11df4:	bl	111e8 <dcgettext@plt>
   11df8:	mov	r1, r4
   11dfc:	mov	r2, r0
   11e00:	mov	r0, #1
   11e04:	bl	1129c <error@plt>
   11e08:	andeq	sp, r1, ip, asr #19
   11e0c:	andeq	sp, r1, r8, ror #23
   11e10:	andeq	sp, r1, r4, lsr fp
   11e14:	andeq	sp, r1, r8, lsr r0
   11e18:	andeq	sp, r1, ip, ror ip
   11e1c:	muleq	r1, r4, sl
   11e20:			; <UNDEFINED> instruction: 0x0002f1b8
   11e24:	andeq	sp, r1, r0, lsl #24
   11e28:	andeq	pc, r2, r4, asr r1	; <UNPREDICTABLE>
   11e2c:	andeq	sp, r1, ip, asr #2
   11e30:	andeq	sp, r1, r0, asr #24
   11e34:			; <UNDEFINED> instruction: 0x0002f1b4
   11e38:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   11e3c:	andeq	sp, r1, r0, ror ip
   11e40:	andeq	sp, r1, r0, asr #7
   11e44:	andeq	sp, r1, r0, lsr fp
   11e48:	andeq	sp, r1, r8, lsl #25
   11e4c:	andeq	sp, r1, ip, asr #24
   11e50:	andeq	sp, r1, r0, ror #24
   11e54:	andeq	pc, r2, r8, lsr #3
   11e58:	andeq	pc, r2, r0, asr #3
   11e5c:	ldrdeq	r1, [r1], -r8
   11e60:	andeq	sp, r1, r8, lsl r2
   11e64:	andeq	sp, r1, r0, lsr #25
   11e68:	andeq	r0, r0, r1, lsl #2
   11e6c:			; <UNDEFINED> instruction: 0x0001dcb8
   11e70:	andeq	sp, r1, r8, ror #25
   11e74:	andeq	sp, r1, r8, lsl #26
   11e78:	andeq	sp, r1, ip, lsl sp
   11e7c:	andeq	sp, r1, r0, asr sp
   11e80:	andeq	sp, r1, r4, ror #4
   11e84:	andeq	sp, r1, ip, lsr sp
   11e88:	andeq	sp, r1, ip, ror r2
   11e8c:	andeq	sp, r1, r4, lsr #25
   11e90:	andeq	sp, r1, r8, ror #26
   11e94:	andeq	sp, r1, ip, asr r2
   11e98:	andeq	sp, r1, ip, lsr #26
   11e9c:	andeq	sp, r1, r8, lsr sp
   11ea0:	ldrdeq	sp, [r1], -ip
   11ea4:	ldrdeq	sp, [r1], -ip
   11ea8:	andeq	sp, r1, ip, lsl ip
   11eac:	mov	fp, #0
   11eb0:	mov	lr, #0
   11eb4:	pop	{r1}		; (ldr r1, [sp], #4)
   11eb8:	mov	r2, sp
   11ebc:	push	{r2}		; (str r2, [sp, #-4]!)
   11ec0:	push	{r0}		; (str r0, [sp, #-4]!)
   11ec4:	ldr	ip, [pc, #16]	; 11edc <__assert_fail@plt+0xa24>
   11ec8:	push	{ip}		; (str ip, [sp, #-4]!)
   11ecc:	ldr	r0, [pc, #12]	; 11ee0 <__assert_fail@plt+0xa28>
   11ed0:	ldr	r3, [pc, #12]	; 11ee4 <__assert_fail@plt+0xa2c>
   11ed4:	bl	112cc <__libc_start_main@plt>
   11ed8:	bl	114a0 <abort@plt>
   11edc:	andeq	sp, r1, r0, lsl r0
   11ee0:	andeq	r1, r1, r8, asr #9
   11ee4:			; <UNDEFINED> instruction: 0x0001cfb0
   11ee8:	ldr	r3, [pc, #20]	; 11f04 <__assert_fail@plt+0xa4c>
   11eec:	ldr	r2, [pc, #20]	; 11f08 <__assert_fail@plt+0xa50>
   11ef0:	add	r3, pc, r3
   11ef4:	ldr	r2, [r3, r2]
   11ef8:	cmp	r2, #0
   11efc:	bxeq	lr
   11f00:	b	112e4 <__gmon_start__@plt>
   11f04:	andeq	sp, r1, r8, lsl #2
   11f08:	andeq	r0, r0, r4, asr #2
   11f0c:	ldr	r3, [pc, #28]	; 11f30 <__assert_fail@plt+0xa78>
   11f10:	ldr	r0, [pc, #28]	; 11f34 <__assert_fail@plt+0xa7c>
   11f14:	sub	r3, r3, r0
   11f18:	cmp	r3, #6
   11f1c:	bxls	lr
   11f20:	ldr	r3, [pc, #16]	; 11f38 <__assert_fail@plt+0xa80>
   11f24:	cmp	r3, #0
   11f28:	bxeq	lr
   11f2c:	bx	r3
   11f30:	muleq	r2, pc, r1	; <UNPREDICTABLE>
   11f34:	muleq	r2, ip, r1
   11f38:	andeq	r0, r0, r0
   11f3c:	ldr	r1, [pc, #36]	; 11f68 <__assert_fail@plt+0xab0>
   11f40:	ldr	r0, [pc, #36]	; 11f6c <__assert_fail@plt+0xab4>
   11f44:	sub	r1, r1, r0
   11f48:	asr	r1, r1, #2
   11f4c:	add	r1, r1, r1, lsr #31
   11f50:	asrs	r1, r1, #1
   11f54:	bxeq	lr
   11f58:	ldr	r3, [pc, #16]	; 11f70 <__assert_fail@plt+0xab8>
   11f5c:	cmp	r3, #0
   11f60:	bxeq	lr
   11f64:	bx	r3
   11f68:	muleq	r2, ip, r1
   11f6c:	muleq	r2, ip, r1
   11f70:	andeq	r0, r0, r0
   11f74:	push	{r4, lr}
   11f78:	ldr	r4, [pc, #24]	; 11f98 <__assert_fail@plt+0xae0>
   11f7c:	ldrb	r3, [r4]
   11f80:	cmp	r3, #0
   11f84:	popne	{r4, pc}
   11f88:	bl	11f0c <__assert_fail@plt+0xa54>
   11f8c:	mov	r3, #1
   11f90:	strb	r3, [r4]
   11f94:	pop	{r4, pc}
   11f98:			; <UNDEFINED> instruction: 0x0002f1bc
   11f9c:	ldr	r0, [pc, #40]	; 11fcc <__assert_fail@plt+0xb14>
   11fa0:	ldr	r3, [r0]
   11fa4:	cmp	r3, #0
   11fa8:	bne	11fb0 <__assert_fail@plt+0xaf8>
   11fac:	b	11f3c <__assert_fail@plt+0xa84>
   11fb0:	ldr	r3, [pc, #24]	; 11fd0 <__assert_fail@plt+0xb18>
   11fb4:	cmp	r3, #0
   11fb8:	beq	11fac <__assert_fail@plt+0xaf4>
   11fbc:	push	{r4, lr}
   11fc0:	blx	r3
   11fc4:	pop	{r4, lr}
   11fc8:	b	11f3c <__assert_fail@plt+0xa84>
   11fcc:	andeq	lr, r2, r4, lsl pc
	...
   11fd8:	ldr	r3, [pc, #4]	; 11fe4 <__assert_fail@plt+0xb2c>
   11fdc:	ldr	r0, [r3]
   11fe0:	b	194bc <__assert_fail@plt+0x8004>
   11fe4:	andeq	pc, r2, r0, asr #3
   11fe8:	push	{r4, r5, r6, r7, r8, lr}
   11fec:	mov	r7, r1
   11ff0:	mov	r8, r0
   11ff4:	bl	11494 <fdatasync@plt>
   11ff8:	cmp	r0, #0
   11ffc:	beq	120b4 <__assert_fail@plt+0xbfc>
   12000:	bl	11338 <__errno_location@plt>
   12004:	ldr	r4, [r0]
   12008:	mov	r6, r0
   1200c:	sub	r0, r4, #21
   12010:	cmp	r4, #9
   12014:	cmpne	r0, #1
   12018:	movls	r5, #1
   1201c:	movhi	r5, #0
   12020:	bls	12054 <__assert_fail@plt+0xb9c>
   12024:	mov	r2, #5
   12028:	ldr	r1, [pc, #140]	; 120bc <__assert_fail@plt+0xc04>
   1202c:	mov	r0, r5
   12030:	bl	111e8 <dcgettext@plt>
   12034:	mov	r3, r7
   12038:	mov	r1, r4
   1203c:	mov	r2, r0
   12040:	mov	r0, r5
   12044:	bl	1129c <error@plt>
   12048:	str	r4, [r6]
   1204c:	mvn	r0, #0
   12050:	pop	{r4, r5, r6, r7, r8, pc}
   12054:	mov	r0, r8
   12058:	bl	1114c <fsync@plt>
   1205c:	cmp	r0, #0
   12060:	beq	120b4 <__assert_fail@plt+0xbfc>
   12064:	ldr	r4, [r6]
   12068:	sub	r0, r4, #21
   1206c:	cmp	r4, #9
   12070:	cmpne	r0, #1
   12074:	movls	r5, #1
   12078:	movhi	r5, #0
   1207c:	bls	120b0 <__assert_fail@plt+0xbf8>
   12080:	mov	r2, #5
   12084:	ldr	r1, [pc, #52]	; 120c0 <__assert_fail@plt+0xc08>
   12088:	mov	r0, r5
   1208c:	bl	111e8 <dcgettext@plt>
   12090:	mov	r3, r7
   12094:	mov	r1, r4
   12098:	mov	r2, r0
   1209c:	mov	r0, r5
   120a0:	bl	1129c <error@plt>
   120a4:	mvn	r0, #0
   120a8:	str	r4, [r6]
   120ac:	pop	{r4, r5, r6, r7, r8, pc}
   120b0:	bl	11464 <sync@plt>
   120b4:	mov	r0, #0
   120b8:	pop	{r4, r5, r6, r7, r8, pc}
   120bc:	andeq	sp, r1, r4, ror #4
   120c0:	andeq	sp, r1, ip, ror r2
   120c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120c8:	sub	sp, sp, #2064	; 0x810
   120cc:	sub	sp, sp, #4
   120d0:	mov	r4, r3
   120d4:	str	r3, [sp, #76]	; 0x4c
   120d8:	str	r2, [sp, #52]	; 0x34
   120dc:	mov	fp, r0
   120e0:	mov	r6, r1
   120e4:	bl	1132c <getpagesize@plt>
   120e8:	ldr	r3, [sp, #2104]	; 0x838
   120ec:	cmp	r3, #0
   120f0:	ldrd	r2, [r4]
   120f4:	strd	r2, [sp, #32]
   120f8:	ble	126f0 <__assert_fail@plt+0x1238>
   120fc:	ldr	r3, [sp, #2104]	; 0x838
   12100:	lsl	r3, r3, #20
   12104:	lsr	r3, r3, #20
   12108:	orr	r2, r3, r3, lsl #12
   1210c:	lsr	r3, r3, #4
   12110:	lsr	r1, r2, #8
   12114:	uxtb	r2, r2
   12118:	uxtb	r1, r1
   1211c:	cmp	r2, r3
   12120:	cmpeq	r1, r3
   12124:	beq	126f0 <__assert_fail@plt+0x1238>
   12128:	mov	r1, #61440	; 0xf000
   1212c:	mov	r8, #61440	; 0xf000
   12130:	mov	r9, #0
   12134:	mov	r5, r1
   12138:	mov	r4, #30720	; 0x7800
   1213c:	strd	r8, [sp, #64]	; 0x40
   12140:	str	r1, [sp, #72]	; 0x48
   12144:	bl	1a8ac <__assert_fail@plt+0x93f4>
   12148:	ldrd	r2, [sp, #32]
   1214c:	cmp	r2, #1
   12150:	sbcs	r1, r3, #0
   12154:	mov	sl, r0
   12158:	blt	121f8 <__assert_fail@plt+0xd40>
   1215c:	ldrd	r0, [sp, #64]	; 0x40
   12160:	cmp	r2, r0
   12164:	sbcs	r3, r3, r1
   12168:	movlt	r3, #1
   1216c:	strlt	r3, [sp, #56]	; 0x38
   12170:	bge	121f8 <__assert_fail@plt+0xd40>
   12174:	ldr	r3, [r6, #16]
   12178:	and	r3, r3, #61440	; 0xf000
   1217c:	cmp	r3, #8192	; 0x2000
   12180:	beq	1223c <__assert_fail@plt+0xd84>
   12184:	mov	r3, #0
   12188:	str	r3, [sp]
   1218c:	mov	r2, #0
   12190:	mov	r3, #0
   12194:	mov	r0, fp
   12198:	bl	11260 <lseek64@plt>
   1219c:	cmp	r0, #1
   121a0:	sbcs	r3, r1, #0
   121a4:	blt	12800 <__assert_fail@plt+0x1348>
   121a8:	bl	11338 <__errno_location@plt>
   121ac:	mov	r3, #22
   121b0:	mov	r4, r3
   121b4:	str	r3, [r0]
   121b8:	ldr	r1, [pc, #2016]	; 129a0 <__assert_fail@plt+0x14e8>
   121bc:	mov	r2, #5
   121c0:	mov	r0, #0
   121c4:	bl	111e8 <dcgettext@plt>
   121c8:	ldr	r3, [sp, #52]	; 0x34
   121cc:	mov	r1, r4
   121d0:	mov	r2, r0
   121d4:	mov	r0, #0
   121d8:	bl	1129c <error@plt>
   121dc:	mov	r0, sl
   121e0:	bl	13ef8 <__assert_fail@plt+0x2a40>
   121e4:	mvn	r4, #0
   121e8:	mov	r0, r4
   121ec:	add	sp, sp, #2064	; 0x810
   121f0:	add	sp, sp, #4
   121f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121f8:	mov	r1, #3
   121fc:	mov	r0, fp
   12200:	bl	13cec <__assert_fail@plt+0x2834>
   12204:	cmp	r0, #0
   12208:	ble	1271c <__assert_fail@plt+0x1264>
   1220c:	orr	r2, r0, #65536	; 0x10000
   12210:	cmp	r0, r2
   12214:	beq	1271c <__assert_fail@plt+0x1264>
   12218:	mov	r1, #4
   1221c:	mov	r0, fp
   12220:	bl	13cec <__assert_fail@plt+0x2834>
   12224:	mov	r3, #0
   12228:	str	r3, [sp, #56]	; 0x38
   1222c:	ldr	r3, [r6, #16]
   12230:	and	r3, r3, #61440	; 0xf000
   12234:	cmp	r3, #8192	; 0x2000
   12238:	bne	12184 <__assert_fail@plt+0xccc>
   1223c:	add	r3, sp, #1408	; 0x580
   12240:	add	r3, r3, #4
   12244:	mov	r1, #6
   12248:	mov	ip, #1
   1224c:	strh	r1, [r3]
   12250:	mov	r2, r3
   12254:	ldr	r1, [pc, #1864]	; 129a4 <__assert_fail@plt+0x14ec>
   12258:	mov	r0, fp
   1225c:	str	ip, [sp, #1416]	; 0x588
   12260:	bl	11254 <ioctl@plt>
   12264:	cmp	r0, #0
   12268:	bne	12184 <__assert_fail@plt+0xccc>
   1226c:	ldr	r3, [sp, #2104]	; 0x838
   12270:	cmp	r3, #0
   12274:	blt	12888 <__assert_fail@plt+0x13d0>
   12278:	ldrd	r2, [sp, #32]
   1227c:	cmp	r2, #0
   12280:	sbcs	r1, r3, #0
   12284:	blt	1229c <__assert_fail@plt+0xde4>
   12288:	cmp	r2, r8
   1228c:	sbcs	r1, r3, r9
   12290:	movlt	r3, r2
   12294:	movlt	r5, r2
   12298:	lsrlt	r4, r3, #1
   1229c:	ldr	r3, [sp, #2104]	; 0x838
   122a0:	cmp	r4, #2
   122a4:	mov	r6, #3
   122a8:	lsl	r3, r3, #20
   122ac:	lsr	r3, r3, #20
   122b0:	orr	r3, r3, r3, lsl #12
   122b4:	strb	r3, [sl, #2]
   122b8:	lsr	r2, r3, #4
   122bc:	lsr	r3, r3, #8
   122c0:	strb	r2, [sl]
   122c4:	strb	r3, [sl, #1]
   122c8:	bls	122e8 <__assert_fail@plt+0xe30>
   122cc:	mov	r2, r6
   122d0:	add	r0, sl, r6
   122d4:	mov	r1, sl
   122d8:	lsl	r6, r6, #1
   122dc:	bl	11194 <memcpy@plt>
   122e0:	cmp	r6, r4
   122e4:	bls	122cc <__assert_fail@plt+0xe14>
   122e8:	cmp	r5, r6
   122ec:	bhi	12874 <__assert_fail@plt+0x13bc>
   122f0:	ldr	r3, [sp, #2104]	; 0x838
   122f4:	tst	r3, #4096	; 0x1000
   122f8:	beq	12324 <__assert_fail@plt+0xe6c>
   122fc:	cmp	r5, #0
   12300:	beq	12324 <__assert_fail@plt+0xe6c>
   12304:	mov	r3, #0
   12308:	mvn	r1, #127	; 0x7f
   1230c:	ldrb	r2, [sl, r3]
   12310:	eor	r2, r2, r1
   12314:	strb	r2, [sl, r3]
   12318:	add	r3, r3, #512	; 0x200
   1231c:	cmp	r5, r3
   12320:	bhi	1230c <__assert_fail@plt+0xe54>
   12324:	ldrb	r1, [sl, #2]
   12328:	ldrb	r2, [sl, #1]
   1232c:	ldrb	r3, [sl]
   12330:	add	r0, sp, #112	; 0x70
   12334:	str	r0, [sp, #80]	; 0x50
   12338:	str	r1, [sp, #8]
   1233c:	str	r2, [sp, #4]
   12340:	str	r3, [sp]
   12344:	add	r0, sp, #100	; 0x64
   12348:	ldr	r3, [pc, #1624]	; 129a8 <__assert_fail@plt+0x14f0>
   1234c:	mov	r2, #7
   12350:	mov	r1, #1
   12354:	bl	11344 <__sprintf_chk@plt>
   12358:	ldr	r3, [sp, #2116]	; 0x844
   1235c:	cmp	r3, #0
   12360:	streq	r3, [sp, #92]	; 0x5c
   12364:	bne	12814 <__assert_fail@plt+0x135c>
   12368:	ldr	r2, [pc, #1596]	; 129ac <__assert_fail@plt+0x14f4>
   1236c:	mov	r3, #0
   12370:	str	r3, [sp, #44]	; 0x2c
   12374:	str	r2, [sp, #84]	; 0x54
   12378:	str	r3, [sp, #88]	; 0x58
   1237c:	mov	r2, #0
   12380:	mov	r3, #0
   12384:	strd	r2, [sp, #24]
   12388:	ldrd	r2, [sp, #32]
   1238c:	cmp	r2, #0
   12390:	sbcs	r1, r3, #0
   12394:	blt	12794 <__assert_fail@plt+0x12dc>
   12398:	ldrd	r4, [sp, #24]
   1239c:	ldrd	r6, [sp, #64]	; 0x40
   123a0:	mov	r0, r2
   123a4:	subs	r2, r2, r4
   123a8:	mov	r1, r3
   123ac:	sbc	r3, r3, r5
   123b0:	cmp	r2, r6
   123b4:	sbcs	r3, r3, r7
   123b8:	bge	12794 <__assert_fail@plt+0x12dc>
   123bc:	mov	r3, r1
   123c0:	cmp	r0, r4
   123c4:	sbcs	r1, r3, r5
   123c8:	blt	129d8 <__assert_fail@plt+0x1520>
   123cc:	subs	r6, r0, r4
   123d0:	beq	129d8 <__assert_fail@plt+0x1520>
   123d4:	ldr	r3, [sp, #2104]	; 0x838
   123d8:	cmp	r3, #0
   123dc:	blt	127a4 <__assert_fail@plt+0x12ec>
   123e0:	ldr	r3, [sp, #36]	; 0x24
   123e4:	mov	r4, #0
   123e8:	cmp	r3, r4
   123ec:	movlt	r3, #0
   123f0:	movge	r3, #1
   123f4:	mov	r8, r4
   123f8:	str	r3, [sp, #60]	; 0x3c
   123fc:	b	1240c <__assert_fail@plt+0xf54>
   12400:	add	r4, r4, r0
   12404:	cmp	r6, r4
   12408:	bls	12514 <__assert_fail@plt+0x105c>
   1240c:	sub	r2, r6, r4
   12410:	add	r1, sl, r4
   12414:	mov	r0, fp
   12418:	bl	1138c <write@plt>
   1241c:	cmp	r0, #0
   12420:	bgt	12400 <__assert_fail@plt+0xf48>
   12424:	ldrd	r2, [sp, #32]
   12428:	cmp	r2, #0
   1242c:	sbcs	r3, r3, #0
   12430:	blt	12728 <__assert_fail@plt+0x1270>
   12434:	bl	11338 <__errno_location@plt>
   12438:	ldr	r5, [r0]
   1243c:	mov	r9, r0
   12440:	ldr	r3, [sp, #56]	; 0x38
   12444:	eor	r7, r3, #1
   12448:	cmp	r5, #22
   1244c:	movne	r7, #0
   12450:	andeq	r7, r7, #1
   12454:	cmp	r7, #0
   12458:	bne	127c8 <__assert_fail@plt+0x1310>
   1245c:	mov	r2, #5
   12460:	ldr	r1, [pc, #1352]	; 129b0 <__assert_fail@plt+0x14f8>
   12464:	mov	r0, r8
   12468:	bl	111e8 <dcgettext@plt>
   1246c:	add	r2, sp, #1408	; 0x580
   12470:	add	r2, r2, #4
   12474:	str	r0, [sp, #48]	; 0x30
   12478:	ldrd	r0, [sp, #24]
   1247c:	adds	r0, r0, r4
   12480:	adc	r1, r1, #0
   12484:	bl	14f30 <__assert_fail@plt+0x3a78>
   12488:	ldr	r3, [sp, #60]	; 0x3c
   1248c:	mov	r1, r5
   12490:	cmp	r5, #5
   12494:	movne	r3, #0
   12498:	andeq	r3, r3, #1
   1249c:	str	r3, [sp, #44]	; 0x2c
   124a0:	ldr	r3, [sp, #48]	; 0x30
   124a4:	mov	r2, r3
   124a8:	ldr	r3, [sp, #52]	; 0x34
   124ac:	str	r0, [sp]
   124b0:	mov	r0, r8
   124b4:	bl	1129c <error@plt>
   124b8:	ldr	r3, [sp, #44]	; 0x2c
   124bc:	cmp	r3, #0
   124c0:	beq	121dc <__assert_fail@plt+0xd24>
   124c4:	mvn	r5, r4, lsr #9
   124c8:	mvn	r5, r5, lsl #9
   124cc:	cmp	r6, r5
   124d0:	bls	121dc <__assert_fail@plt+0xd24>
   124d4:	ldrd	r2, [sp, #24]
   124d8:	add	r5, r5, #1
   124dc:	str	r7, [sp]
   124e0:	adds	r2, r2, r5
   124e4:	adc	r3, r3, #0
   124e8:	mov	r0, fp
   124ec:	bl	11260 <lseek64@plt>
   124f0:	mvn	r3, #0
   124f4:	mvn	r2, #0
   124f8:	cmp	r1, r3
   124fc:	cmpeq	r0, r2
   12500:	beq	127b8 <__assert_fail@plt+0x1300>
   12504:	sub	r0, r5, r4
   12508:	add	r4, r4, r0
   1250c:	cmp	r6, r4
   12510:	bhi	1240c <__assert_fail@plt+0xf54>
   12514:	ldrd	r6, [sp, #24]
   12518:	mvn	r2, #0
   1251c:	mvn	r3, #-2147483648	; 0x80000000
   12520:	subs	r0, r2, r6
   12524:	sbc	r1, r3, r7
   12528:	mov	r3, r1
   1252c:	mov	r5, #0
   12530:	cmp	r0, r4
   12534:	sbcs	r3, r3, r5
   12538:	blt	1276c <__assert_fail@plt+0x12b4>
   1253c:	adds	r0, r6, r4
   12540:	ldr	r3, [sp, #2116]	; 0x844
   12544:	adc	r1, r7, r5
   12548:	cmp	r3, #0
   1254c:	strd	r0, [sp, #24]
   12550:	beq	12388 <__assert_fail@plt+0xed0>
   12554:	ldrd	r2, [sp, #32]
   12558:	cmp	r3, r1
   1255c:	cmpeq	r2, r0
   12560:	beq	128d4 <__assert_fail@plt+0x141c>
   12564:	mov	r0, #0
   12568:	bl	111b8 <time@plt>
   1256c:	ldr	r2, [sp, #92]	; 0x5c
   12570:	cmp	r2, r0
   12574:	str	r0, [sp, #88]	; 0x58
   12578:	bgt	12388 <__assert_fail@plt+0xed0>
   1257c:	ldrd	r6, [sp, #24]
   12580:	mov	r2, #1
   12584:	mov	r3, #0
   12588:	mov	r1, r7
   1258c:	strd	r2, [sp, #8]
   12590:	strd	r2, [sp]
   12594:	mov	r0, r6
   12598:	add	r2, sp, #760	; 0x2f8
   1259c:	ldr	r3, [pc, #1040]	; 129b4 <__assert_fail@plt+0x14fc>
   125a0:	bl	13f50 <__assert_fail@plt+0x2a98>
   125a4:	mov	r1, r0
   125a8:	mov	r4, r0
   125ac:	ldr	r0, [sp, #84]	; 0x54
   125b0:	bl	11158 <strcmp@plt>
   125b4:	cmp	r0, #0
   125b8:	beq	12388 <__assert_fail@plt+0xed0>
   125bc:	ldrd	r2, [sp, #32]
   125c0:	cmp	r2, #0
   125c4:	sbcs	r3, r3, #0
   125c8:	blt	12a18 <__assert_fail@plt+0x1560>
   125cc:	ldrd	r8, [sp, #32]
   125d0:	mov	r2, r8
   125d4:	mov	r3, r9
   125d8:	orrs	r3, r2, r3
   125dc:	moveq	r5, #100	; 0x64
   125e0:	beq	12614 <__assert_fail@plt+0x115c>
   125e4:	add	r1, pc, #940	; 0x3ac
   125e8:	ldrd	r0, [r1]
   125ec:	cmp	r7, r1
   125f0:	cmpeq	r6, r0
   125f4:	bhi	12964 <__assert_fail@plt+0x14ac>
   125f8:	mov	r3, #100	; 0x64
   125fc:	mov	r2, r8
   12600:	umull	r0, r1, r6, r3
   12604:	mla	r1, r3, r7, r1
   12608:	mov	r3, r9
   1260c:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   12610:	mov	r5, r0
   12614:	mov	r0, #1
   12618:	mov	r1, #0
   1261c:	add	r2, sp, #1408	; 0x580
   12620:	mov	r3, #432	; 0x1b0
   12624:	strd	r0, [sp, #8]
   12628:	strd	r0, [sp]
   1262c:	add	r2, r2, #4
   12630:	mov	r1, r9
   12634:	mov	r0, r8
   12638:	bl	13f50 <__assert_fail@plt+0x2a98>
   1263c:	mov	r2, #5
   12640:	mov	r6, r0
   12644:	ldrd	r0, [sp, #24]
   12648:	cmp	r9, r1
   1264c:	cmpeq	r8, r0
   12650:	ldr	r1, [pc, #864]	; 129b8 <__assert_fail@plt+0x1500>
   12654:	mov	r0, #0
   12658:	moveq	r4, r6
   1265c:	bl	111e8 <dcgettext@plt>
   12660:	ldr	r2, [sp, #2116]	; 0x844
   12664:	ldr	r3, [sp, #80]	; 0x50
   12668:	str	r2, [sp, #4]
   1266c:	ldr	r2, [sp, #2112]	; 0x840
   12670:	sub	r3, r3, #12
   12674:	mov	r1, #0
   12678:	str	r2, [sp]
   1267c:	str	r3, [sp, #8]
   12680:	str	r6, [sp, #16]
   12684:	str	r4, [sp, #12]
   12688:	str	r5, [sp, #20]
   1268c:	ldr	r3, [sp, #52]	; 0x34
   12690:	mov	r2, r0
   12694:	mov	r0, r1
   12698:	bl	1129c <error@plt>
   1269c:	mov	r1, r4
   126a0:	mov	r2, #652	; 0x28c
   126a4:	add	r0, sp, #108	; 0x6c
   126a8:	bl	11278 <__strcpy_chk@plt>
   126ac:	ldr	r1, [sp, #52]	; 0x34
   126b0:	mov	r0, fp
   126b4:	bl	11fe8 <__assert_fail@plt+0xb30>
   126b8:	ldr	r3, [sp, #88]	; 0x58
   126bc:	add	r3, r3, #5
   126c0:	str	r3, [sp, #92]	; 0x5c
   126c4:	cmp	r0, #0
   126c8:	beq	12958 <__assert_fail@plt+0x14a0>
   126cc:	bl	11338 <__errno_location@plt>
   126d0:	ldr	r3, [r0]
   126d4:	cmp	r3, #5
   126d8:	bne	121dc <__assert_fail@plt+0xd24>
   126dc:	add	r3, sp, #108	; 0x6c
   126e0:	str	r3, [sp, #84]	; 0x54
   126e4:	mov	r3, #1
   126e8:	str	r3, [sp, #44]	; 0x2c
   126ec:	b	12388 <__assert_fail@plt+0xed0>
   126f0:	mov	r3, #0
   126f4:	mov	r2, #65536	; 0x10000
   126f8:	ldr	r1, [pc, #700]	; 129bc <__assert_fail@plt+0x1504>
   126fc:	strd	r2, [sp, #64]	; 0x40
   12700:	mov	r3, #65536	; 0x10000
   12704:	ldr	r4, [pc, #692]	; 129c0 <__assert_fail@plt+0x1508>
   12708:	mov	r5, r1
   1270c:	ldr	r8, [pc, #680]	; 129bc <__assert_fail@plt+0x1504>
   12710:	mov	r9, #0
   12714:	str	r3, [sp, #72]	; 0x48
   12718:	b	12144 <__assert_fail@plt+0xc8c>
   1271c:	mov	r3, #0
   12720:	str	r3, [sp, #56]	; 0x38
   12724:	b	12174 <__assert_fail@plt+0xcbc>
   12728:	cmp	r0, #0
   1272c:	beq	12744 <__assert_fail@plt+0x128c>
   12730:	bl	11338 <__errno_location@plt>
   12734:	ldr	r5, [r0]
   12738:	mov	r9, r0
   1273c:	cmp	r5, #28
   12740:	bne	12440 <__assert_fail@plt+0xf88>
   12744:	ldrd	r0, [sp, #24]
   12748:	mvn	r2, #0
   1274c:	mvn	r3, #-2147483648	; 0x80000000
   12750:	subs	r0, r2, r0
   12754:	sbc	r1, r3, r1
   12758:	mov	r3, r1
   1275c:	mov	r5, #0
   12760:	cmp	r0, r4
   12764:	sbcs	r3, r3, r5
   12768:	bge	128ac <__assert_fail@plt+0x13f4>
   1276c:	mov	r2, #5
   12770:	ldr	r1, [pc, #588]	; 129c4 <__assert_fail@plt+0x150c>
   12774:	mov	r0, #0
   12778:	bl	111e8 <dcgettext@plt>
   1277c:	mov	r1, #0
   12780:	ldr	r3, [sp, #52]	; 0x34
   12784:	mov	r2, r0
   12788:	mov	r0, r1
   1278c:	bl	1129c <error@plt>
   12790:	b	121dc <__assert_fail@plt+0xd24>
   12794:	ldr	r3, [sp, #2104]	; 0x838
   12798:	ldr	r6, [sp, #72]	; 0x48
   1279c:	cmp	r3, #0
   127a0:	bge	123e0 <__assert_fail@plt+0xf28>
   127a4:	mov	r2, r6
   127a8:	mov	r1, sl
   127ac:	ldr	r0, [sp, #2108]	; 0x83c
   127b0:	bl	196d0 <__assert_fail@plt+0x8218>
   127b4:	b	123e0 <__assert_fail@plt+0xf28>
   127b8:	ldr	r4, [r9]
   127bc:	mov	r2, #5
   127c0:	ldr	r1, [pc, #512]	; 129c8 <__assert_fail@plt+0x1510>
   127c4:	b	121c0 <__assert_fail@plt+0xd08>
   127c8:	mov	r1, #3
   127cc:	mov	r0, fp
   127d0:	bl	13cec <__assert_fail@plt+0x2834>
   127d4:	cmp	r0, #0
   127d8:	ble	12868 <__assert_fail@plt+0x13b0>
   127dc:	bic	r2, r0, #65536	; 0x10000
   127e0:	cmp	r0, r2
   127e4:	beq	12868 <__assert_fail@plt+0x13b0>
   127e8:	mov	r1, #4
   127ec:	mov	r0, fp
   127f0:	str	r7, [sp, #56]	; 0x38
   127f4:	bl	13cec <__assert_fail@plt+0x2834>
   127f8:	mov	r0, r8
   127fc:	b	12400 <__assert_fail@plt+0xf48>
   12800:	orrs	r3, r0, r1
   12804:	beq	1226c <__assert_fail@plt+0xdb4>
   12808:	bl	11338 <__errno_location@plt>
   1280c:	ldr	r4, [r0]
   12810:	b	121b8 <__assert_fail@plt+0xd00>
   12814:	mov	r2, #5
   12818:	ldr	r1, [pc, #428]	; 129cc <__assert_fail@plt+0x1514>
   1281c:	mov	r0, #0
   12820:	bl	111e8 <dcgettext@plt>
   12824:	ldr	r2, [sp, #2116]	; 0x844
   12828:	ldr	r3, [sp, #80]	; 0x50
   1282c:	str	r2, [sp, #4]
   12830:	ldr	r2, [sp, #2112]	; 0x840
   12834:	mov	r1, #0
   12838:	sub	r3, r3, #12
   1283c:	str	r2, [sp]
   12840:	str	r3, [sp, #8]
   12844:	ldr	r3, [sp, #52]	; 0x34
   12848:	mov	r2, r0
   1284c:	mov	r0, r1
   12850:	bl	1129c <error@plt>
   12854:	mov	r0, #0
   12858:	bl	111b8 <time@plt>
   1285c:	add	r3, r0, #5
   12860:	str	r3, [sp, #92]	; 0x5c
   12864:	b	12368 <__assert_fail@plt+0xeb0>
   12868:	str	r7, [sp, #56]	; 0x38
   1286c:	mov	r0, r8
   12870:	b	12400 <__assert_fail@plt+0xf48>
   12874:	sub	r2, r5, r6
   12878:	add	r0, sl, r6
   1287c:	mov	r1, sl
   12880:	bl	11194 <memcpy@plt>
   12884:	b	122f0 <__assert_fail@plt+0xe38>
   12888:	ldr	r3, [pc, #320]	; 129d0 <__assert_fail@plt+0x1518>
   1288c:	add	r2, sp, #112	; 0x70
   12890:	str	r2, [sp, #80]	; 0x50
   12894:	ldm	r3, {r0, r1}
   12898:	lsr	r3, r1, #16
   1289c:	str	r0, [sp, #100]	; 0x64
   128a0:	strh	r1, [sp, #104]	; 0x68
   128a4:	strb	r3, [sp, #106]	; 0x6a
   128a8:	b	12358 <__assert_fail@plt+0xea0>
   128ac:	ldrd	r2, [sp, #24]
   128b0:	ldr	r1, [sp, #2116]	; 0x844
   128b4:	adds	r2, r2, r4
   128b8:	adc	r3, r3, r5
   128bc:	cmp	r1, #0
   128c0:	ldr	r1, [sp, #76]	; 0x4c
   128c4:	strd	r2, [sp, #24]
   128c8:	strd	r2, [sp, #32]
   128cc:	strd	r2, [r1]
   128d0:	beq	12388 <__assert_fail@plt+0xed0>
   128d4:	ldr	r3, [sp, #84]	; 0x54
   128d8:	ldrb	r0, [r3]
   128dc:	cmp	r0, #0
   128e0:	bne	12928 <__assert_fail@plt+0x1470>
   128e4:	bl	111b8 <time@plt>
   128e8:	ldr	r2, [sp, #92]	; 0x5c
   128ec:	cmp	r2, r0
   128f0:	str	r0, [sp, #88]	; 0x58
   128f4:	bgt	12388 <__assert_fail@plt+0xed0>
   128f8:	ldrd	r6, [sp, #32]
   128fc:	mov	r2, #1
   12900:	mov	r3, #0
   12904:	mov	r0, r6
   12908:	strd	r2, [sp, #8]
   1290c:	strd	r2, [sp]
   12910:	mov	r1, r7
   12914:	add	r2, sp, #760	; 0x2f8
   12918:	ldr	r3, [pc, #148]	; 129b4 <__assert_fail@plt+0x14fc>
   1291c:	bl	13f50 <__assert_fail@plt+0x2a98>
   12920:	mov	r4, r0
   12924:	b	125bc <__assert_fail@plt+0x1104>
   12928:	ldrd	r6, [sp, #24]
   1292c:	mov	r2, #1
   12930:	mov	r3, #0
   12934:	mov	r0, r6
   12938:	strd	r2, [sp, #8]
   1293c:	strd	r2, [sp]
   12940:	mov	r1, r7
   12944:	add	r2, sp, #760	; 0x2f8
   12948:	ldr	r3, [pc, #100]	; 129b4 <__assert_fail@plt+0x14fc>
   1294c:	bl	13f50 <__assert_fail@plt+0x2a98>
   12950:	mov	r4, r0
   12954:	b	125bc <__assert_fail@plt+0x1104>
   12958:	add	r3, sp, #108	; 0x6c
   1295c:	str	r3, [sp, #84]	; 0x54
   12960:	b	12388 <__assert_fail@plt+0xed0>
   12964:	mov	r0, r8
   12968:	mov	r1, r9
   1296c:	mov	r2, #100	; 0x64
   12970:	mov	r3, #0
   12974:	bl	1cd20 <__assert_fail@plt+0xb868>
   12978:	mov	r2, r0
   1297c:	mov	r3, r1
   12980:	mov	r0, r6
   12984:	mov	r1, r7
   12988:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   1298c:	ldrd	r8, [sp, #32]
   12990:	mov	r5, r0
   12994:	b	12614 <__assert_fail@plt+0x115c>
   12998:			; <UNDEFINED> instruction: 0xf5c28f5c
   1299c:	addeq	r5, pc, #40, 24	; 0x2800
   129a0:	muleq	r1, r0, r2
   129a4:	andmi	r6, r8, r1, lsl #26
   129a8:	andeq	sp, r1, r4, lsr #5
   129ac:	andeq	sp, r1, ip, asr #19
   129b0:	andeq	sp, r1, r4, ror #5
   129b4:			; <UNDEFINED> instruction: 0x000001b2
   129b8:	andeq	sp, r1, r4, lsr r3
   129bc:	andeq	r0, r1, r2
   129c0:	andeq	r8, r0, r1
   129c4:	ldrdeq	sp, [r1], -r0
   129c8:	andeq	sp, r1, r4, lsl #6
   129cc:			; <UNDEFINED> instruction: 0x0001d2b4
   129d0:	andeq	sp, r1, r8, asr r3
   129d4:	andeq	sp, r1, r8, lsl r3
   129d8:	ldr	r1, [sp, #52]	; 0x34
   129dc:	mov	r0, fp
   129e0:	bl	11fe8 <__assert_fail@plt+0xb30>
   129e4:	cmp	r0, #0
   129e8:	beq	12a60 <__assert_fail@plt+0x15a8>
   129ec:	bl	11338 <__errno_location@plt>
   129f0:	ldr	r3, [r0]
   129f4:	cmp	r3, #5
   129f8:	moveq	r4, #1
   129fc:	bne	121dc <__assert_fail@plt+0xd24>
   12a00:	mov	r0, sl
   12a04:	bl	13ef8 <__assert_fail@plt+0x2a40>
   12a08:	mov	r0, r4
   12a0c:	add	sp, sp, #2064	; 0x810
   12a10:	add	sp, sp, #4
   12a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a18:	mov	r2, #5
   12a1c:	ldr	r1, [pc, #-80]	; 129d4 <__assert_fail@plt+0x151c>
   12a20:	mov	r0, #0
   12a24:	bl	111e8 <dcgettext@plt>
   12a28:	ldr	r2, [sp, #2116]	; 0x844
   12a2c:	ldr	r3, [sp, #80]	; 0x50
   12a30:	str	r2, [sp, #4]
   12a34:	ldr	r2, [sp, #2112]	; 0x840
   12a38:	sub	r3, r3, #12
   12a3c:	mov	r1, #0
   12a40:	str	r2, [sp]
   12a44:	str	r3, [sp, #8]
   12a48:	str	r4, [sp, #12]
   12a4c:	ldr	r3, [sp, #52]	; 0x34
   12a50:	mov	r2, r0
   12a54:	mov	r0, r1
   12a58:	bl	1129c <error@plt>
   12a5c:	b	1269c <__assert_fail@plt+0x11e4>
   12a60:	ldr	r4, [sp, #44]	; 0x2c
   12a64:	b	12a00 <__assert_fail@plt+0x1548>
   12a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a6c:	mov	r5, r3
   12a70:	ldrb	r3, [r3, #20]
   12a74:	sub	sp, sp, #188	; 0xbc
   12a78:	mov	r7, r0
   12a7c:	cmp	r3, #0
   12a80:	str	r2, [sp, #44]	; 0x2c
   12a84:	ldrbne	r2, [r5, #22]
   12a88:	ldrne	r3, [r5, #4]
   12a8c:	str	r1, [sp, #20]
   12a90:	addne	r3, r2, r3
   12a94:	mov	r1, r0
   12a98:	add	r2, sp, #80	; 0x50
   12a9c:	mov	r0, #3
   12aa0:	str	r3, [sp, #56]	; 0x38
   12aa4:	bl	11230 <__fxstat64@plt>
   12aa8:	subs	r8, r0, #0
   12aac:	bne	12db4 <__assert_fail@plt+0x18fc>
   12ab0:	ldr	r3, [sp, #96]	; 0x60
   12ab4:	and	r3, r3, #61440	; 0xf000
   12ab8:	cmp	r3, #8192	; 0x2000
   12abc:	beq	12f50 <__assert_fail@plt+0x1a98>
   12ac0:	cmp	r3, #4096	; 0x1000
   12ac4:	cmpne	r3, #49152	; 0xc000
   12ac8:	moveq	r2, #1
   12acc:	movne	r2, #0
   12ad0:	str	r2, [sp, #24]
   12ad4:	beq	12be4 <__assert_fail@plt+0x172c>
   12ad8:	cmp	r3, #32768	; 0x8000
   12adc:	beq	12bc0 <__assert_fail@plt+0x1708>
   12ae0:	mov	r1, #4
   12ae4:	ldr	r0, [r5, #4]
   12ae8:	bl	1a9d8 <__assert_fail@plt+0x9520>
   12aec:	ldrd	r2, [r5, #8]
   12af0:	mov	r1, r3
   12af4:	mvn	r3, #0
   12af8:	cmp	r1, r3
   12afc:	ldr	r3, [sp, #96]	; 0x60
   12b00:	and	r3, r3, #61440	; 0xf000
   12b04:	mov	r9, r0
   12b08:	mov	r0, r2
   12b0c:	mvn	r2, #0
   12b10:	cmpeq	r0, r2
   12b14:	strd	r0, [sp, #32]
   12b18:	beq	12e84 <__assert_fail@plt+0x19cc>
   12b1c:	cmp	r3, #32768	; 0x8000
   12b20:	beq	12f6c <__assert_fail@plt+0x1ab4>
   12b24:	ldr	r3, [r5, #4]
   12b28:	cmp	r3, #0
   12b2c:	str	r3, [sp, #28]
   12b30:	beq	12e70 <__assert_fail@plt+0x19b8>
   12b34:	mov	r2, #0
   12b38:	mov	r3, #0
   12b3c:	strd	r2, [sp, #48]	; 0x30
   12b40:	mov	r3, #0
   12b44:	str	r5, [sp, #60]	; 0x3c
   12b48:	ldr	ip, [pc, #1320]	; 13078 <__assert_fail@plt+0x1bc0>
   12b4c:	mvn	r4, #1
   12b50:	ldr	r6, [sp, #28]
   12b54:	str	r9, [sp, #40]	; 0x28
   12b58:	mov	r5, r9
   12b5c:	mov	sl, r3
   12b60:	b	12b7c <__assert_fail@plt+0x16c4>
   12b64:	rsb	r2, r4, #0
   12b68:	cmp	r2, r6
   12b6c:	bcs	12fc0 <__assert_fail@plt+0x1b08>
   12b70:	sub	sl, sl, r4
   12b74:	add	r6, r6, r4
   12b78:	ldr	r4, [ip]
   12b7c:	cmp	r4, #0
   12b80:	mvneq	r4, #1
   12b84:	ldreq	ip, [pc, #1264]	; 1307c <__assert_fail@plt+0x1bc4>
   12b88:	beq	12b64 <__assert_fail@plt+0x16ac>
   12b8c:	lsl	r9, r4, #2
   12b90:	add	fp, ip, #4
   12b94:	mov	r0, r5
   12b98:	mov	r2, r9
   12b9c:	mov	r1, fp
   12ba0:	blt	13070 <__assert_fail@plt+0x1bb8>
   12ba4:	cmp	r4, r6
   12ba8:	bhi	12c1c <__assert_fail@plt+0x1764>
   12bac:	bl	11194 <memcpy@plt>
   12bb0:	add	r5, r5, r9
   12bb4:	add	ip, fp, r9
   12bb8:	sub	r6, r6, r4
   12bbc:	b	12b78 <__assert_fail@plt+0x16c0>
   12bc0:	ldrd	r2, [sp, #128]	; 0x80
   12bc4:	cmp	r2, #0
   12bc8:	sbcs	r3, r3, #0
   12bcc:	bge	12ae0 <__assert_fail@plt+0x1628>
   12bd0:	ldr	r4, [sp, #24]
   12bd4:	mov	r2, #5
   12bd8:	ldr	r1, [pc, #1184]	; 13080 <__assert_fail@plt+0x1bc8>
   12bdc:	mov	r0, r4
   12be0:	b	12dd0 <__assert_fail@plt+0x1918>
   12be4:	mov	r2, #5
   12be8:	ldr	r1, [pc, #1172]	; 13084 <__assert_fail@plt+0x1bcc>
   12bec:	mov	r0, #0
   12bf0:	bl	111e8 <dcgettext@plt>
   12bf4:	mov	r1, #0
   12bf8:	ldr	r3, [sp, #20]
   12bfc:	mov	r2, r0
   12c00:	mov	r0, r1
   12c04:	bl	1129c <error@plt>
   12c08:	mov	r3, #0
   12c0c:	mov	r0, r3
   12c10:	str	r3, [sp, #24]
   12c14:	add	sp, sp, #188	; 0xbc
   12c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c1c:	cmp	r6, #1
   12c20:	ldr	r9, [sp, #40]	; 0x28
   12c24:	str	sl, [sp, #40]	; 0x28
   12c28:	mov	sl, r5
   12c2c:	ldr	r5, [sp, #60]	; 0x3c
   12c30:	bls	12df4 <__assert_fail@plt+0x193c>
   12c34:	add	r3, r6, r6, lsl #1
   12c38:	cmp	r4, r3
   12c3c:	bhi	12df4 <__assert_fail@plt+0x193c>
   12c40:	subs	r0, r4, #1
   12c44:	asr	r3, r4, #31
   12c48:	sbc	r1, r3, #0
   12c4c:	str	r9, [sp, #60]	; 0x3c
   12c50:	str	r8, [sp, #64]	; 0x40
   12c54:	str	r7, [sp, #68]	; 0x44
   12c58:	add	fp, ip, #8
   12c5c:	sub	r4, r4, #1
   12c60:	mov	r8, r0
   12c64:	mov	r9, r1
   12c68:	ldr	r7, [sp, #44]	; 0x2c
   12c6c:	b	12c80 <__assert_fail@plt+0x17c8>
   12c70:	subs	r8, r8, #1
   12c74:	add	fp, fp, #4
   12c78:	sub	r4, r4, #1
   12c7c:	sbc	r9, r9, #0
   12c80:	add	r1, r4, #1
   12c84:	cmp	r6, r1
   12c88:	mov	r2, r8
   12c8c:	mov	r3, r9
   12c90:	mov	r0, r7
   12c94:	beq	12cac <__assert_fail@plt+0x17f4>
   12c98:	bl	1904c <__assert_fail@plt+0x7b94>
   12c9c:	mov	r3, #0
   12ca0:	cmp	r1, r3
   12ca4:	cmpeq	r0, r6
   12ca8:	bcs	12c70 <__assert_fail@plt+0x17b8>
   12cac:	ldr	r3, [fp, #-4]
   12cb0:	subs	r6, r6, #1
   12cb4:	str	r3, [sl]
   12cb8:	add	sl, sl, #4
   12cbc:	bne	12c70 <__assert_fail@plt+0x17b8>
   12cc0:	ldr	r9, [sp, #60]	; 0x3c
   12cc4:	ldr	r8, [sp, #64]	; 0x40
   12cc8:	ldr	r7, [sp, #68]	; 0x44
   12ccc:	ldr	r3, [sp, #40]	; 0x28
   12cd0:	sub	fp, r3, #1
   12cd4:	ldr	r2, [sp, #28]
   12cd8:	mov	sl, fp
   12cdc:	mov	r4, #0
   12ce0:	sub	r6, r2, r3
   12ce4:	sub	r3, r2, #1
   12ce8:	str	r3, [sp, #40]	; 0x28
   12cec:	ldr	r3, [sp, #40]	; 0x28
   12cf0:	cmp	sl, fp
   12cf4:	add	r3, r3, sl
   12cf8:	bhi	12e04 <__assert_fail@plt+0x194c>
   12cfc:	ldr	r2, [r9, r4, lsl #2]
   12d00:	sub	sl, r3, fp
   12d04:	mvn	r3, #0
   12d08:	str	r2, [r9, r6, lsl #2]
   12d0c:	str	r3, [r9, r4, lsl #2]
   12d10:	ldr	r3, [sp, #28]
   12d14:	add	r4, r4, #1
   12d18:	cmp	r4, r3
   12d1c:	add	r6, r6, #1
   12d20:	bcc	12cec <__assert_fail@plt+0x1834>
   12d24:	ldr	r0, [sp, #44]	; 0x2c
   12d28:	bl	19044 <__assert_fail@plt+0x7b8c>
   12d2c:	ldrd	r2, [sp, #48]	; 0x30
   12d30:	orrs	r1, r2, r3
   12d34:	mov	sl, r0
   12d38:	beq	12e48 <__assert_fail@plt+0x1990>
   12d3c:	mov	fp, #1
   12d40:	mov	r6, #0
   12d44:	strd	r2, [sp, #72]	; 0x48
   12d48:	mov	r4, #0
   12d4c:	ldrb	r3, [r5, #22]
   12d50:	ldr	r2, [r5, #4]
   12d54:	mov	r1, r8
   12d58:	add	r3, r3, r2
   12d5c:	cmp	r4, r3
   12d60:	bcs	12e4c <__assert_fail@plt+0x1994>
   12d64:	cmp	r4, r2
   12d68:	add	r3, sp, #72	; 0x48
   12d6c:	ldrcc	r1, [r9, r4, lsl #2]
   12d70:	add	r4, r4, #1
   12d74:	str	r4, [sp, #8]
   12d78:	stm	sp, {r1, sl}
   12d7c:	str	r6, [sp, #12]
   12d80:	ldr	r2, [sp, #20]
   12d84:	add	r1, sp, #80	; 0x50
   12d88:	mov	r0, r7
   12d8c:	bl	120c4 <__assert_fail@plt+0xc0c>
   12d90:	cmp	r0, #0
   12d94:	beq	12d4c <__assert_fail@plt+0x1894>
   12d98:	ldr	fp, [sp, #24]
   12d9c:	bge	12d4c <__assert_fail@plt+0x1894>
   12da0:	mov	r0, r9
   12da4:	bl	13ef8 <__assert_fail@plt+0x2a40>
   12da8:	ldr	r0, [sp, #24]
   12dac:	add	sp, sp, #188	; 0xbc
   12db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12db4:	bl	11338 <__errno_location@plt>
   12db8:	mov	r3, #0
   12dbc:	ldr	r1, [pc, #708]	; 13088 <__assert_fail@plt+0x1bd0>
   12dc0:	mov	r2, #5
   12dc4:	str	r3, [sp, #24]
   12dc8:	ldr	r4, [r0]
   12dcc:	mov	r0, r3
   12dd0:	bl	111e8 <dcgettext@plt>
   12dd4:	ldr	r3, [sp, #20]
   12dd8:	mov	r1, r4
   12ddc:	mov	r2, r0
   12de0:	mov	r0, #0
   12de4:	bl	1129c <error@plt>
   12de8:	ldr	r0, [sp, #24]
   12dec:	add	sp, sp, #188	; 0xbc
   12df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12df4:	ldr	r3, [sp, #40]	; 0x28
   12df8:	add	r3, r3, r6
   12dfc:	str	r3, [sp, #40]	; 0x28
   12e00:	b	12cd0 <__assert_fail@plt+0x1818>
   12e04:	sub	r2, r6, r4
   12e08:	subs	r2, r2, #1
   12e0c:	mov	r3, #0
   12e10:	sbc	r3, r3, #0
   12e14:	ldr	r0, [sp, #44]	; 0x2c
   12e18:	bl	1904c <__assert_fail@plt+0x7b94>
   12e1c:	ldr	r3, [r9, r4, lsl #2]
   12e20:	sub	sl, sl, fp
   12e24:	add	r0, r4, r0
   12e28:	ldr	r2, [r9, r0, lsl #2]
   12e2c:	str	r2, [r9, r4, lsl #2]
   12e30:	ldr	r2, [sp, #28]
   12e34:	add	r4, r4, #1
   12e38:	cmp	r4, r2
   12e3c:	str	r3, [r9, r0, lsl #2]
   12e40:	bcc	12cec <__assert_fail@plt+0x1834>
   12e44:	b	12d24 <__assert_fail@plt+0x186c>
   12e48:	mov	fp, #1
   12e4c:	ldrd	r2, [sp, #32]
   12e50:	orrs	r1, r2, r3
   12e54:	beq	12ffc <__assert_fail@plt+0x1b44>
   12e58:	strd	r2, [sp, #72]	; 0x48
   12e5c:	mov	r2, #0
   12e60:	mov	r3, #0
   12e64:	ldr	r6, [sp, #56]	; 0x38
   12e68:	strd	r2, [sp, #32]
   12e6c:	b	12d48 <__assert_fail@plt+0x1890>
   12e70:	ldr	r0, [sp, #44]	; 0x2c
   12e74:	bl	19044 <__assert_fail@plt+0x7b8c>
   12e78:	mov	fp, #1
   12e7c:	mov	sl, r0
   12e80:	b	12e4c <__assert_fail@plt+0x1994>
   12e84:	cmp	r3, #32768	; 0x8000
   12e88:	bne	12fd4 <__assert_fail@plt+0x1b1c>
   12e8c:	ldrb	r3, [r5, #21]
   12e90:	ldrd	r0, [sp, #128]	; 0x80
   12e94:	cmp	r3, #0
   12e98:	strd	r0, [sp, #32]
   12e9c:	bne	12b24 <__assert_fail@plt+0x166c>
   12ea0:	ldr	sl, [sp, #136]	; 0x88
   12ea4:	sub	r3, sl, #1
   12ea8:	cmn	r3, #-536870911	; 0xe0000001
   12eac:	movhi	sl, #512	; 0x200
   12eb0:	mov	r2, sl
   12eb4:	asr	fp, sl, #31
   12eb8:	mov	r3, fp
   12ebc:	bl	1cd20 <__assert_fail@plt+0xb868>
   12ec0:	ldr	ip, [sp, #32]
   12ec4:	mov	r0, r2
   12ec8:	mov	r1, r3
   12ecc:	ldrd	r2, [sp, #32]
   12ed0:	cmp	r2, sl
   12ed4:	ldr	r2, [sp, #36]	; 0x24
   12ed8:	sbcs	r3, r3, fp
   12edc:	movlt	r3, #1
   12ee0:	movge	r3, #0
   12ee4:	orrs	r2, ip, r2
   12ee8:	moveq	r3, #0
   12eec:	andne	r3, r3, #1
   12ef0:	cmp	r3, #0
   12ef4:	bne	13010 <__assert_fail@plt+0x1b58>
   12ef8:	mov	r2, #0
   12efc:	mov	r3, #0
   12f00:	strd	r2, [sp, #48]	; 0x30
   12f04:	orrs	r3, r0, r1
   12f08:	beq	12fac <__assert_fail@plt+0x1af4>
   12f0c:	subs	sl, sl, r0
   12f10:	sbc	fp, fp, r1
   12f14:	ldrd	r0, [sp, #32]
   12f18:	mvn	r2, #0
   12f1c:	mvn	r3, #-2147483648	; 0x80000000
   12f20:	subs	r0, r2, r0
   12f24:	sbc	r1, r3, r1
   12f28:	mov	r3, r1
   12f2c:	cmp	r0, sl
   12f30:	sbcs	r1, r3, fp
   12f34:	movlt	fp, r3
   12f38:	ldrd	r2, [sp, #32]
   12f3c:	movlt	sl, r0
   12f40:	adds	r2, r2, sl
   12f44:	adc	r3, r3, fp
   12f48:	strd	r2, [sp, #32]
   12f4c:	b	12fac <__assert_fail@plt+0x1af4>
   12f50:	mov	r0, r7
   12f54:	bl	1147c <isatty@plt>
   12f58:	cmp	r0, #0
   12f5c:	bne	12be4 <__assert_fail@plt+0x172c>
   12f60:	ldr	r3, [sp, #96]	; 0x60
   12f64:	and	r3, r3, #61440	; 0xf000
   12f68:	b	12ac0 <__assert_fail@plt+0x1608>
   12f6c:	ldr	r2, [sp, #136]	; 0x88
   12f70:	ldrd	r0, [sp, #128]	; 0x80
   12f74:	sub	r3, r2, #1
   12f78:	cmn	r3, #-536870911	; 0xe0000001
   12f7c:	strd	r0, [sp, #48]	; 0x30
   12f80:	ldrd	r0, [sp, #32]
   12f84:	movhi	r2, #512	; 0x200
   12f88:	cmp	r0, r2
   12f8c:	asr	r3, r2, #31
   12f90:	sbcs	ip, r1, r3
   12f94:	movlt	r3, r1
   12f98:	movlt	r2, r0
   12f9c:	ldrd	r0, [sp, #48]	; 0x30
   12fa0:	cmp	r0, r2
   12fa4:	sbcs	r3, r1, r3
   12fa8:	bge	12b24 <__assert_fail@plt+0x166c>
   12fac:	ldr	r3, [r5, #4]
   12fb0:	cmp	r3, #0
   12fb4:	str	r3, [sp, #28]
   12fb8:	bne	12b40 <__assert_fail@plt+0x1688>
   12fbc:	b	12d24 <__assert_fail@plt+0x186c>
   12fc0:	add	r3, sl, r6
   12fc4:	ldr	r9, [sp, #40]	; 0x28
   12fc8:	ldr	r5, [sp, #60]	; 0x3c
   12fcc:	str	r3, [sp, #40]	; 0x28
   12fd0:	b	12cd0 <__assert_fail@plt+0x1818>
   12fd4:	mov	r3, #2
   12fd8:	str	r3, [sp]
   12fdc:	mov	r2, #0
   12fe0:	mov	r3, #0
   12fe4:	mov	r0, r7
   12fe8:	bl	11260 <lseek64@plt>
   12fec:	cmp	r0, #1
   12ff0:	sbcs	r3, r1, #0
   12ff4:	strdge	r0, [sp, #32]
   12ff8:	b	12b24 <__assert_fail@plt+0x166c>
   12ffc:	ldr	r3, [r5, #16]
   13000:	cmp	r3, #0
   13004:	bne	1301c <__assert_fail@plt+0x1b64>
   13008:	str	fp, [sp, #24]
   1300c:	b	12da0 <__assert_fail@plt+0x18e8>
   13010:	ldrd	r2, [sp, #32]
   13014:	strd	r2, [sp, #48]	; 0x30
   13018:	b	12f04 <__assert_fail@plt+0x1a4c>
   1301c:	ldrd	r2, [sp, #32]
   13020:	mov	r0, r7
   13024:	bl	111c4 <ftruncate64@plt>
   13028:	cmp	r0, #0
   1302c:	beq	13008 <__assert_fail@plt+0x1b50>
   13030:	ldr	r3, [sp, #96]	; 0x60
   13034:	and	r3, r3, #61440	; 0xf000
   13038:	cmp	r3, #32768	; 0x8000
   1303c:	bne	13008 <__assert_fail@plt+0x1b50>
   13040:	bl	11338 <__errno_location@plt>
   13044:	mov	r2, #5
   13048:	ldr	r1, [pc, #60]	; 1308c <__assert_fail@plt+0x1bd4>
   1304c:	ldr	r4, [r0]
   13050:	mov	r0, #0
   13054:	bl	111e8 <dcgettext@plt>
   13058:	ldr	r3, [sp, #20]
   1305c:	mov	r1, r4
   13060:	mov	r2, r0
   13064:	mov	r0, #0
   13068:	bl	1129c <error@plt>
   1306c:	b	12da0 <__assert_fail@plt+0x18e8>
   13070:	mov	ip, fp
   13074:	b	12b64 <__assert_fail@plt+0x16ac>
   13078:	andeq	sp, r1, r8, lsr r0
   1307c:	andeq	sp, r1, ip, lsr r0
   13080:	andeq	sp, r1, ip, lsl #7
   13084:	andeq	sp, r1, r4, ror r3
   13088:	andeq	sp, r1, r0, ror #6
   1308c:	andeq	sp, r1, r8, lsr #7
   13090:	subs	r5, r0, #0
   13094:	push	{r7, lr}
   13098:	sub	sp, sp, #56	; 0x38
   1309c:	beq	130d8 <__assert_fail@plt+0x1c20>
   130a0:	ldr	r3, [pc, #764]	; 133a4 <__assert_fail@plt+0x1eec>
   130a4:	mov	r2, #5
   130a8:	ldr	r1, [pc, #760]	; 133a8 <__assert_fail@plt+0x1ef0>
   130ac:	mov	r0, #0
   130b0:	ldr	r4, [r3]
   130b4:	bl	111e8 <dcgettext@plt>
   130b8:	ldr	r3, [pc, #748]	; 133ac <__assert_fail@plt+0x1ef4>
   130bc:	mov	r1, #1
   130c0:	ldr	r3, [r3]
   130c4:	mov	r2, r0
   130c8:	mov	r0, r4
   130cc:	bl	113a4 <__fprintf_chk@plt>
   130d0:	mov	r0, r5
   130d4:	bl	11308 <exit@plt>
   130d8:	mov	r2, #5
   130dc:	ldr	r1, [pc, #716]	; 133b0 <__assert_fail@plt+0x1ef8>
   130e0:	bl	111e8 <dcgettext@plt>
   130e4:	ldr	r3, [pc, #704]	; 133ac <__assert_fail@plt+0x1ef4>
   130e8:	ldr	r7, [pc, #708]	; 133b4 <__assert_fail@plt+0x1efc>
   130ec:	ldr	r4, [pc, #708]	; 133b8 <__assert_fail@plt+0x1f00>
   130f0:	ldr	r2, [r3]
   130f4:	mov	r1, r0
   130f8:	mov	r0, #1
   130fc:	bl	11380 <__printf_chk@plt>
   13100:	mov	r2, #5
   13104:	ldr	r1, [pc, #688]	; 133bc <__assert_fail@plt+0x1f04>
   13108:	mov	r0, r5
   1310c:	bl	111e8 <dcgettext@plt>
   13110:	ldr	r1, [r7]
   13114:	bl	11134 <fputs_unlocked@plt>
   13118:	mov	r2, #5
   1311c:	ldr	r1, [pc, #668]	; 133c0 <__assert_fail@plt+0x1f08>
   13120:	mov	r0, r5
   13124:	bl	111e8 <dcgettext@plt>
   13128:	ldr	r1, [r7]
   1312c:	bl	11134 <fputs_unlocked@plt>
   13130:	mov	r2, #5
   13134:	ldr	r1, [pc, #648]	; 133c4 <__assert_fail@plt+0x1f0c>
   13138:	mov	r0, r5
   1313c:	bl	111e8 <dcgettext@plt>
   13140:	ldr	r1, [r7]
   13144:	bl	11134 <fputs_unlocked@plt>
   13148:	mov	r2, #5
   1314c:	ldr	r1, [pc, #628]	; 133c8 <__assert_fail@plt+0x1f10>
   13150:	mov	r0, r5
   13154:	bl	111e8 <dcgettext@plt>
   13158:	mov	r2, #3
   1315c:	mov	r1, r0
   13160:	mov	r0, #1
   13164:	bl	11380 <__printf_chk@plt>
   13168:	mov	r2, #5
   1316c:	ldr	r1, [pc, #600]	; 133cc <__assert_fail@plt+0x1f14>
   13170:	mov	r0, r5
   13174:	bl	111e8 <dcgettext@plt>
   13178:	ldr	r1, [r7]
   1317c:	bl	11134 <fputs_unlocked@plt>
   13180:	mov	r2, #5
   13184:	ldr	r1, [pc, #580]	; 133d0 <__assert_fail@plt+0x1f18>
   13188:	mov	r0, r5
   1318c:	bl	111e8 <dcgettext@plt>
   13190:	ldr	r1, [r7]
   13194:	bl	11134 <fputs_unlocked@plt>
   13198:	mov	r2, #5
   1319c:	ldr	r1, [pc, #560]	; 133d4 <__assert_fail@plt+0x1f1c>
   131a0:	mov	r0, r5
   131a4:	bl	111e8 <dcgettext@plt>
   131a8:	ldr	r1, [r7]
   131ac:	bl	11134 <fputs_unlocked@plt>
   131b0:	mov	r2, #5
   131b4:	ldr	r1, [pc, #540]	; 133d8 <__assert_fail@plt+0x1f20>
   131b8:	mov	r0, r5
   131bc:	bl	111e8 <dcgettext@plt>
   131c0:	ldr	r1, [r7]
   131c4:	bl	11134 <fputs_unlocked@plt>
   131c8:	mov	r2, #5
   131cc:	ldr	r1, [pc, #520]	; 133dc <__assert_fail@plt+0x1f24>
   131d0:	mov	r0, r5
   131d4:	bl	111e8 <dcgettext@plt>
   131d8:	ldr	r1, [r7]
   131dc:	bl	11134 <fputs_unlocked@plt>
   131e0:	ldm	r4!, {r0, r1, r2, r3}
   131e4:	mov	lr, sp
   131e8:	stmia	lr!, {r0, r1, r2, r3}
   131ec:	ldm	r4!, {r0, r1, r2, r3}
   131f0:	ldr	ip, [sp]
   131f4:	stmia	lr!, {r0, r1, r2, r3}
   131f8:	cmp	ip, #0
   131fc:	ldm	r4!, {r0, r1, r2, r3}
   13200:	stmia	lr!, {r0, r1, r2, r3}
   13204:	ldm	r4, {r0, r1}
   13208:	moveq	r4, sp
   1320c:	stm	lr, {r0, r1}
   13210:	beq	13240 <__assert_fail@plt+0x1d88>
   13214:	ldr	r6, [pc, #452]	; 133e0 <__assert_fail@plt+0x1f28>
   13218:	mov	r4, sp
   1321c:	b	1322c <__assert_fail@plt+0x1d74>
   13220:	ldr	ip, [r4, #8]!
   13224:	cmp	ip, #0
   13228:	beq	13240 <__assert_fail@plt+0x1d88>
   1322c:	mov	r1, ip
   13230:	mov	r0, r6
   13234:	bl	11158 <strcmp@plt>
   13238:	cmp	r0, #0
   1323c:	bne	13220 <__assert_fail@plt+0x1d68>
   13240:	ldr	r4, [r4, #4]
   13244:	mov	r2, #5
   13248:	cmp	r4, #0
   1324c:	ldr	r1, [pc, #400]	; 133e4 <__assert_fail@plt+0x1f2c>
   13250:	beq	132f8 <__assert_fail@plt+0x1e40>
   13254:	mov	r0, #0
   13258:	bl	111e8 <dcgettext@plt>
   1325c:	ldr	r3, [pc, #388]	; 133e8 <__assert_fail@plt+0x1f30>
   13260:	ldr	r2, [pc, #388]	; 133ec <__assert_fail@plt+0x1f34>
   13264:	mov	r1, r0
   13268:	mov	r0, #1
   1326c:	bl	11380 <__printf_chk@plt>
   13270:	mov	r1, #0
   13274:	mov	r0, #5
   13278:	bl	113e0 <setlocale@plt>
   1327c:	cmp	r0, #0
   13280:	ldreq	r6, [pc, #344]	; 133e0 <__assert_fail@plt+0x1f28>
   13284:	beq	132a0 <__assert_fail@plt+0x1de8>
   13288:	mov	r2, #3
   1328c:	ldr	r1, [pc, #348]	; 133f0 <__assert_fail@plt+0x1f38>
   13290:	bl	11488 <strncmp@plt>
   13294:	ldr	r6, [pc, #324]	; 133e0 <__assert_fail@plt+0x1f28>
   13298:	cmp	r0, #0
   1329c:	bne	13388 <__assert_fail@plt+0x1ed0>
   132a0:	mov	r2, #5
   132a4:	ldr	r1, [pc, #328]	; 133f4 <__assert_fail@plt+0x1f3c>
   132a8:	mov	r0, #0
   132ac:	bl	111e8 <dcgettext@plt>
   132b0:	ldr	r3, [pc, #296]	; 133e0 <__assert_fail@plt+0x1f28>
   132b4:	ldr	r2, [pc, #300]	; 133e8 <__assert_fail@plt+0x1f30>
   132b8:	mov	r1, r0
   132bc:	mov	r0, #1
   132c0:	bl	11380 <__printf_chk@plt>
   132c4:	mov	r2, #5
   132c8:	ldr	r1, [pc, #296]	; 133f8 <__assert_fail@plt+0x1f40>
   132cc:	mov	r0, #0
   132d0:	bl	111e8 <dcgettext@plt>
   132d4:	ldr	r2, [pc, #288]	; 133fc <__assert_fail@plt+0x1f44>
   132d8:	cmp	r4, r6
   132dc:	ldr	r3, [pc, #284]	; 13400 <__assert_fail@plt+0x1f48>
   132e0:	movne	r3, r2
   132e4:	mov	r1, r0
   132e8:	mov	r2, r4
   132ec:	mov	r0, #1
   132f0:	bl	11380 <__printf_chk@plt>
   132f4:	b	130d0 <__assert_fail@plt+0x1c18>
   132f8:	mov	r0, r4
   132fc:	bl	111e8 <dcgettext@plt>
   13300:	ldr	r3, [pc, #224]	; 133e8 <__assert_fail@plt+0x1f30>
   13304:	ldr	r2, [pc, #224]	; 133ec <__assert_fail@plt+0x1f34>
   13308:	mov	r1, r0
   1330c:	mov	r0, #1
   13310:	bl	11380 <__printf_chk@plt>
   13314:	mov	r1, r4
   13318:	mov	r0, #5
   1331c:	bl	113e0 <setlocale@plt>
   13320:	cmp	r0, #0
   13324:	beq	1333c <__assert_fail@plt+0x1e84>
   13328:	mov	r2, #3
   1332c:	ldr	r1, [pc, #188]	; 133f0 <__assert_fail@plt+0x1f38>
   13330:	bl	11488 <strncmp@plt>
   13334:	cmp	r0, #0
   13338:	bne	13380 <__assert_fail@plt+0x1ec8>
   1333c:	mov	r2, #5
   13340:	ldr	r1, [pc, #172]	; 133f4 <__assert_fail@plt+0x1f3c>
   13344:	mov	r0, #0
   13348:	bl	111e8 <dcgettext@plt>
   1334c:	ldr	r3, [pc, #140]	; 133e0 <__assert_fail@plt+0x1f28>
   13350:	ldr	r2, [pc, #144]	; 133e8 <__assert_fail@plt+0x1f30>
   13354:	mov	r4, r3
   13358:	mov	r1, r0
   1335c:	mov	r0, #1
   13360:	bl	11380 <__printf_chk@plt>
   13364:	ldr	r1, [pc, #140]	; 133f8 <__assert_fail@plt+0x1f40>
   13368:	mov	r2, #5
   1336c:	mov	r0, #0
   13370:	bl	111e8 <dcgettext@plt>
   13374:	ldr	r3, [pc, #132]	; 13400 <__assert_fail@plt+0x1f48>
   13378:	mov	r1, r0
   1337c:	b	132e8 <__assert_fail@plt+0x1e30>
   13380:	ldr	r6, [pc, #88]	; 133e0 <__assert_fail@plt+0x1f28>
   13384:	mov	r4, r6
   13388:	mov	r2, #5
   1338c:	ldr	r1, [pc, #112]	; 13404 <__assert_fail@plt+0x1f4c>
   13390:	mov	r0, #0
   13394:	bl	111e8 <dcgettext@plt>
   13398:	ldr	r1, [r7]
   1339c:	bl	11134 <fputs_unlocked@plt>
   133a0:	b	132a0 <__assert_fail@plt+0x1de8>
   133a4:			; <UNDEFINED> instruction: 0x0002f1b0
   133a8:	andeq	sp, r1, r8, asr #7
   133ac:	ldrdeq	pc, [r2], -r0
   133b0:	strdeq	sp, [r1], -r0
   133b4:			; <UNDEFINED> instruction: 0x0002f1b4
   133b8:	andeq	sp, r1, r4, lsl r1
   133bc:	andeq	sp, r1, r0, lsl r4
   133c0:	muleq	r1, r8, r4
   133c4:	andeq	sp, r1, r0, asr #9
   133c8:	andeq	sp, r1, ip, lsl #10
   133cc:	andeq	sp, r1, r4, lsl r6
   133d0:	andeq	sp, r1, r4, lsl #15
   133d4:			; <UNDEFINED> instruction: 0x0001d7b4
   133d8:	andeq	sp, r1, ip, ror #15
   133dc:	ldrdeq	sp, [r1], -r0
   133e0:	andeq	sp, r1, r0, asr #7
   133e4:	strdeq	sp, [r1], -r0
   133e8:	andeq	sp, r1, r8, lsl #22
   133ec:	andeq	sp, r1, r0, lsr fp
   133f0:	andeq	sp, r1, r0, asr #22
   133f4:	andeq	sp, r1, ip, lsl #23
   133f8:	andeq	sp, r1, r8, lsr #23
   133fc:	andeq	sp, r1, ip, asr #19
   13400:	andeq	sp, r1, ip, ror sp
   13404:	andeq	sp, r1, r4, asr #22
   13408:	mov	r0, #1
   1340c:	b	13090 <__assert_fail@plt+0x1bd8>
   13410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13414:	mov	r4, r1
   13418:	sub	sp, sp, #12
   1341c:	mov	r5, r2
   13420:	str	r2, [sp, #4]
   13424:	mov	r7, r3
   13428:	mov	sl, r0
   1342c:	bl	11314 <strlen@plt>
   13430:	ldr	fp, [r4]
   13434:	cmp	fp, #0
   13438:	beq	1354c <__assert_fail@plt+0x2094>
   1343c:	cmp	r5, #0
   13440:	mov	r8, r0
   13444:	mov	r3, r5
   13448:	beq	134f4 <__assert_fail@plt+0x203c>
   1344c:	mov	r2, #0
   13450:	mov	r5, r2
   13454:	mov	r6, r3
   13458:	mvn	r9, #0
   1345c:	str	r2, [sp]
   13460:	mov	r2, r8
   13464:	mov	r1, sl
   13468:	mov	r0, fp
   1346c:	bl	11488 <strncmp@plt>
   13470:	cmp	r0, #0
   13474:	mov	r0, fp
   13478:	bne	134b8 <__assert_fail@plt+0x2000>
   1347c:	bl	11314 <strlen@plt>
   13480:	ldr	r3, [sp, #4]
   13484:	mov	r2, r7
   13488:	mov	r1, r6
   1348c:	cmp	r8, r0
   13490:	mla	r0, r7, r9, r3
   13494:	beq	134e4 <__assert_fail@plt+0x202c>
   13498:	cmn	r9, #1
   1349c:	moveq	r9, r5
   134a0:	beq	134b8 <__assert_fail@plt+0x2000>
   134a4:	bl	111d0 <memcmp@plt>
   134a8:	ldr	r3, [sp]
   134ac:	cmp	r0, #0
   134b0:	movne	r3, #1
   134b4:	str	r3, [sp]
   134b8:	ldr	fp, [r4, #4]!
   134bc:	add	r5, r5, #1
   134c0:	cmp	fp, #0
   134c4:	add	r6, r6, r7
   134c8:	bne	13460 <__assert_fail@plt+0x1fa8>
   134cc:	ldr	r3, [sp]
   134d0:	cmp	r3, #0
   134d4:	mvnne	r9, #1
   134d8:	mov	r0, r9
   134dc:	add	sp, sp, #12
   134e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e4:	mov	r9, r5
   134e8:	mov	r0, r9
   134ec:	add	sp, sp, #12
   134f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f4:	mov	r6, r5
   134f8:	mvn	r9, #0
   134fc:	mov	r2, r8
   13500:	mov	r1, sl
   13504:	mov	r0, fp
   13508:	bl	11488 <strncmp@plt>
   1350c:	cmp	r0, #0
   13510:	mov	r0, fp
   13514:	bne	13530 <__assert_fail@plt+0x2078>
   13518:	bl	11314 <strlen@plt>
   1351c:	cmp	r8, r0
   13520:	beq	134e4 <__assert_fail@plt+0x202c>
   13524:	cmn	r9, #1
   13528:	moveq	r9, r5
   1352c:	movne	r6, #1
   13530:	ldr	fp, [r4, #4]!
   13534:	add	r5, r5, #1
   13538:	cmp	fp, #0
   1353c:	bne	134fc <__assert_fail@plt+0x2044>
   13540:	str	r6, [sp]
   13544:	mov	r3, r6
   13548:	b	134d0 <__assert_fail@plt+0x2018>
   1354c:	mvn	r9, #0
   13550:	b	134d8 <__assert_fail@plt+0x2020>
   13554:	push	{r4, r5, r6, lr}
   13558:	mov	r6, r0
   1355c:	ldr	r0, [r1]
   13560:	cmp	r0, #0
   13564:	beq	1359c <__assert_fail@plt+0x20e4>
   13568:	mov	r4, r1
   1356c:	mov	r5, #0
   13570:	b	13584 <__assert_fail@plt+0x20cc>
   13574:	ldr	r0, [r4, #4]!
   13578:	add	r5, r5, #1
   1357c:	cmp	r0, #0
   13580:	beq	1359c <__assert_fail@plt+0x20e4>
   13584:	mov	r1, r6
   13588:	bl	11158 <strcmp@plt>
   1358c:	cmp	r0, #0
   13590:	bne	13574 <__assert_fail@plt+0x20bc>
   13594:	mov	r0, r5
   13598:	pop	{r4, r5, r6, pc}
   1359c:	mvn	r0, #0
   135a0:	pop	{r4, r5, r6, pc}
   135a4:	cmn	r2, #1
   135a8:	push	{r4, r5, r6, lr}
   135ac:	mov	r2, #5
   135b0:	sub	sp, sp, #8
   135b4:	mov	r4, r1
   135b8:	mov	r5, r0
   135bc:	ldreq	r1, [pc, #76]	; 13610 <__assert_fail@plt+0x2158>
   135c0:	ldrne	r1, [pc, #76]	; 13614 <__assert_fail@plt+0x215c>
   135c4:	mov	r0, #0
   135c8:	bl	111e8 <dcgettext@plt>
   135cc:	mov	r2, r4
   135d0:	mov	r1, #8
   135d4:	mov	r6, r0
   135d8:	mov	r0, #0
   135dc:	bl	17114 <__assert_fail@plt+0x5c5c>
   135e0:	mov	r1, r5
   135e4:	mov	r4, r0
   135e8:	mov	r0, #1
   135ec:	bl	18cb0 <__assert_fail@plt+0x77f8>
   135f0:	mov	r1, #0
   135f4:	mov	r3, r4
   135f8:	mov	r2, r6
   135fc:	str	r0, [sp]
   13600:	mov	r0, r1
   13604:	bl	1129c <error@plt>
   13608:	add	sp, sp, #8
   1360c:	pop	{r4, r5, r6, pc}
   13610:	andeq	sp, r1, r8, ror #28
   13614:	andeq	sp, r1, r4, lsl #29
   13618:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1361c:	mov	r6, r0
   13620:	ldr	r9, [pc, #232]	; 13710 <__assert_fail@plt+0x2258>
   13624:	mov	r4, r1
   13628:	mov	r7, r2
   1362c:	ldr	r1, [pc, #224]	; 13714 <__assert_fail@plt+0x225c>
   13630:	mov	r2, #5
   13634:	mov	r0, #0
   13638:	bl	111e8 <dcgettext@plt>
   1363c:	ldr	r1, [r9]
   13640:	bl	11134 <fputs_unlocked@plt>
   13644:	ldr	fp, [r6]
   13648:	cmp	fp, #0
   1364c:	movne	r8, #0
   13650:	movne	r5, r8
   13654:	movne	sl, #1
   13658:	bne	13698 <__assert_fail@plt+0x21e0>
   1365c:	b	136dc <__assert_fail@plt+0x2224>
   13660:	mov	r0, fp
   13664:	ldr	r8, [r9]
   13668:	bl	18e64 <__assert_fail@plt+0x79ac>
   1366c:	ldr	r2, [pc, #164]	; 13718 <__assert_fail@plt+0x2260>
   13670:	mov	r1, sl
   13674:	mov	r3, r0
   13678:	mov	r0, r8
   1367c:	bl	113a4 <__fprintf_chk@plt>
   13680:	mov	r8, r4
   13684:	ldr	fp, [r6, #4]!
   13688:	add	r5, r5, #1
   1368c:	cmp	fp, #0
   13690:	add	r4, r4, r7
   13694:	beq	136dc <__assert_fail@plt+0x2224>
   13698:	cmp	r5, #0
   1369c:	mov	r1, r4
   136a0:	mov	r2, r7
   136a4:	mov	r0, r8
   136a8:	beq	13660 <__assert_fail@plt+0x21a8>
   136ac:	bl	111d0 <memcmp@plt>
   136b0:	cmp	r0, #0
   136b4:	bne	13660 <__assert_fail@plt+0x21a8>
   136b8:	mov	r0, fp
   136bc:	ldr	fp, [r9]
   136c0:	bl	18e64 <__assert_fail@plt+0x79ac>
   136c4:	ldr	r2, [pc, #80]	; 1371c <__assert_fail@plt+0x2264>
   136c8:	mov	r1, sl
   136cc:	mov	r3, r0
   136d0:	mov	r0, fp
   136d4:	bl	113a4 <__fprintf_chk@plt>
   136d8:	b	13684 <__assert_fail@plt+0x21cc>
   136dc:	ldr	r0, [r9]
   136e0:	ldr	r3, [r0, #20]
   136e4:	ldr	r2, [r0, #24]
   136e8:	cmp	r3, r2
   136ec:	bcs	13704 <__assert_fail@plt+0x224c>
   136f0:	add	r1, r3, #1
   136f4:	mov	r2, #10
   136f8:	str	r1, [r0, #20]
   136fc:	strb	r2, [r3]
   13700:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13704:	mov	r1, #10
   13708:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1370c:	b	113d4 <__overflow@plt>
   13710:			; <UNDEFINED> instruction: 0x0002f1b0
   13714:	andeq	sp, r1, r4, lsr #29
   13718:			; <UNDEFINED> instruction: 0x0001debc
   1371c:	andeq	sp, r1, r4, asr #29
   13720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13724:	sub	sp, sp, #36	; 0x24
   13728:	mov	r6, r1
   1372c:	ldrb	ip, [sp, #80]	; 0x50
   13730:	str	r0, [sp, #28]
   13734:	str	r2, [sp, #24]
   13738:	cmp	ip, #0
   1373c:	str	ip, [sp, #20]
   13740:	str	r3, [sp, #12]
   13744:	ldr	r7, [sp, #72]	; 0x48
   13748:	bne	13800 <__assert_fail@plt+0x2348>
   1374c:	ldr	r0, [r2]
   13750:	cmp	r0, #0
   13754:	movne	sl, ip
   13758:	movne	r4, r2
   1375c:	bne	137e4 <__assert_fail@plt+0x232c>
   13760:	mov	r2, #5
   13764:	ldr	r1, [pc, #512]	; 1396c <__assert_fail@plt+0x24b4>
   13768:	mov	r0, #0
   1376c:	bl	111e8 <dcgettext@plt>
   13770:	mov	r4, r0
   13774:	mov	r2, r6
   13778:	mov	r1, #8
   1377c:	mov	r0, #0
   13780:	bl	17114 <__assert_fail@plt+0x5c5c>
   13784:	ldr	r1, [sp, #28]
   13788:	mvn	sl, #0
   1378c:	mov	r5, r0
   13790:	mov	r0, #1
   13794:	bl	18cb0 <__assert_fail@plt+0x77f8>
   13798:	mov	r1, #0
   1379c:	mov	r3, r5
   137a0:	mov	r2, r4
   137a4:	str	r0, [sp]
   137a8:	mov	r0, r1
   137ac:	bl	1129c <error@plt>
   137b0:	ldr	r0, [sp, #24]
   137b4:	mov	r2, r7
   137b8:	ldr	r1, [sp, #12]
   137bc:	bl	13618 <__assert_fail@plt+0x2160>
   137c0:	ldr	r3, [sp, #76]	; 0x4c
   137c4:	blx	r3
   137c8:	mov	r0, sl
   137cc:	add	sp, sp, #36	; 0x24
   137d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137d4:	ldr	r0, [r4, #4]!
   137d8:	add	sl, sl, #1
   137dc:	cmp	r0, #0
   137e0:	beq	13760 <__assert_fail@plt+0x22a8>
   137e4:	mov	r1, r6
   137e8:	bl	11158 <strcmp@plt>
   137ec:	cmp	r0, #0
   137f0:	bne	137d4 <__assert_fail@plt+0x231c>
   137f4:	mov	r0, sl
   137f8:	add	sp, sp, #36	; 0x24
   137fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13800:	mov	r0, r1
   13804:	bl	11314 <strlen@plt>
   13808:	ldr	r3, [sp, #24]
   1380c:	ldr	fp, [r3]
   13810:	cmp	fp, #0
   13814:	mov	r9, r0
   13818:	beq	13760 <__assert_fail@plt+0x22a8>
   1381c:	ldr	r2, [sp, #12]
   13820:	cmp	r2, #0
   13824:	beq	138e0 <__assert_fail@plt+0x2428>
   13828:	mov	r1, #0
   1382c:	mov	r4, r1
   13830:	mov	r8, r3
   13834:	mov	r5, r2
   13838:	mvn	sl, #0
   1383c:	str	r1, [sp, #16]
   13840:	mov	r2, r9
   13844:	mov	r1, r6
   13848:	mov	r0, fp
   1384c:	bl	11488 <strncmp@plt>
   13850:	cmp	r0, #0
   13854:	mov	r0, fp
   13858:	bne	1389c <__assert_fail@plt+0x23e4>
   1385c:	bl	11314 <strlen@plt>
   13860:	ldr	r3, [sp, #12]
   13864:	mov	r2, r7
   13868:	mov	r1, r5
   1386c:	cmp	r9, r0
   13870:	mla	r0, r7, sl, r3
   13874:	beq	138d0 <__assert_fail@plt+0x2418>
   13878:	cmn	sl, #1
   1387c:	moveq	sl, r4
   13880:	beq	1389c <__assert_fail@plt+0x23e4>
   13884:	bl	111d0 <memcmp@plt>
   13888:	ldr	r2, [sp, #20]
   1388c:	ldr	r3, [sp, #16]
   13890:	cmp	r0, #0
   13894:	movne	r3, r2
   13898:	str	r3, [sp, #16]
   1389c:	ldr	fp, [r8, #4]!
   138a0:	add	r4, r4, #1
   138a4:	cmp	fp, #0
   138a8:	add	r5, r5, r7
   138ac:	bne	13840 <__assert_fail@plt+0x2388>
   138b0:	ldr	r3, [sp, #16]
   138b4:	cmp	r3, #0
   138b8:	bne	13954 <__assert_fail@plt+0x249c>
   138bc:	cmn	sl, #1
   138c0:	beq	13760 <__assert_fail@plt+0x22a8>
   138c4:	mov	r0, sl
   138c8:	add	sp, sp, #36	; 0x24
   138cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138d0:	mov	sl, r4
   138d4:	mov	r0, sl
   138d8:	add	sp, sp, #36	; 0x24
   138dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138e0:	mov	r5, r3
   138e4:	ldr	r3, [sp, #12]
   138e8:	str	r7, [sp, #72]	; 0x48
   138ec:	mov	r7, fp
   138f0:	ldr	fp, [sp, #20]
   138f4:	mov	r8, r3
   138f8:	mvn	sl, #0
   138fc:	mov	r4, r3
   13900:	mov	r2, r9
   13904:	mov	r1, r6
   13908:	mov	r0, r7
   1390c:	bl	11488 <strncmp@plt>
   13910:	cmp	r0, #0
   13914:	mov	r0, r7
   13918:	bne	13934 <__assert_fail@plt+0x247c>
   1391c:	bl	11314 <strlen@plt>
   13920:	cmp	r9, r0
   13924:	beq	138d0 <__assert_fail@plt+0x2418>
   13928:	cmn	sl, #1
   1392c:	moveq	sl, r4
   13930:	movne	r8, fp
   13934:	ldr	r7, [r5, #4]!
   13938:	add	r4, r4, #1
   1393c:	cmp	r7, #0
   13940:	bne	13900 <__assert_fail@plt+0x2448>
   13944:	str	r8, [sp, #16]
   13948:	ldr	r7, [sp, #72]	; 0x48
   1394c:	mov	r3, r8
   13950:	b	138b4 <__assert_fail@plt+0x23fc>
   13954:	mov	r2, #5
   13958:	ldr	r1, [pc, #16]	; 13970 <__assert_fail@plt+0x24b8>
   1395c:	mov	r0, #0
   13960:	bl	111e8 <dcgettext@plt>
   13964:	mov	r4, r0
   13968:	b	13774 <__assert_fail@plt+0x22bc>
   1396c:	andeq	sp, r1, r8, ror #28
   13970:	andeq	sp, r1, r4, lsl #29
   13974:	push	{r4, r5, r6, r7, r8, lr}
   13978:	ldr	r7, [r1]
   1397c:	cmp	r7, #0
   13980:	beq	139c0 <__assert_fail@plt+0x2508>
   13984:	mov	r6, r3
   13988:	mov	r8, r0
   1398c:	mov	r4, r2
   13990:	mov	r5, r1
   13994:	b	139a4 <__assert_fail@plt+0x24ec>
   13998:	ldr	r7, [r5, #4]!
   1399c:	cmp	r7, #0
   139a0:	beq	139c0 <__assert_fail@plt+0x2508>
   139a4:	mov	r1, r4
   139a8:	mov	r2, r6
   139ac:	mov	r0, r8
   139b0:	bl	111d0 <memcmp@plt>
   139b4:	add	r4, r4, r6
   139b8:	cmp	r0, #0
   139bc:	bne	13998 <__assert_fail@plt+0x24e0>
   139c0:	mov	r0, r7
   139c4:	pop	{r4, r5, r6, r7, r8, pc}
   139c8:	ldrb	r3, [r0]
   139cc:	cmp	r3, #47	; 0x2f
   139d0:	bne	139e0 <__assert_fail@plt+0x2528>
   139d4:	ldrb	r3, [r0, #1]!
   139d8:	cmp	r3, #47	; 0x2f
   139dc:	beq	139d4 <__assert_fail@plt+0x251c>
   139e0:	cmp	r3, #0
   139e4:	bxeq	lr
   139e8:	mov	r2, #0
   139ec:	push	{lr}		; (str lr, [sp, #-4]!)
   139f0:	mov	ip, r2
   139f4:	mov	r1, r0
   139f8:	mov	lr, #1
   139fc:	cmp	r3, #47	; 0x2f
   13a00:	moveq	r2, lr
   13a04:	beq	13a14 <__assert_fail@plt+0x255c>
   13a08:	cmp	r2, #0
   13a0c:	movne	r0, r1
   13a10:	movne	r2, ip
   13a14:	ldrb	r3, [r1, #1]!
   13a18:	cmp	r3, #0
   13a1c:	bne	139fc <__assert_fail@plt+0x2544>
   13a20:	pop	{pc}		; (ldr pc, [sp], #4)
   13a24:	push	{r4, lr}
   13a28:	mov	r4, r0
   13a2c:	bl	11314 <strlen@plt>
   13a30:	cmp	r0, #1
   13a34:	popls	{r4, pc}
   13a38:	sub	r3, r0, #1
   13a3c:	add	r2, r4, r3
   13a40:	ldrb	r1, [r4, r3]
   13a44:	cmp	r1, #47	; 0x2f
   13a48:	popne	{r4, pc}
   13a4c:	cmp	r3, #1
   13a50:	beq	13a64 <__assert_fail@plt+0x25ac>
   13a54:	ldrb	r1, [r2, #-1]!
   13a58:	sub	r0, r3, #1
   13a5c:	cmp	r1, #47	; 0x2f
   13a60:	beq	13a6c <__assert_fail@plt+0x25b4>
   13a64:	mov	r0, r3
   13a68:	pop	{r4, pc}
   13a6c:	mov	r3, r0
   13a70:	b	13a4c <__assert_fail@plt+0x2594>
   13a74:	ldr	r3, [pc, #4]	; 13a80 <__assert_fail@plt+0x25c8>
   13a78:	str	r0, [r3]
   13a7c:	bx	lr
   13a80:	andeq	pc, r2, r4, asr #3
   13a84:	ldr	r3, [pc, #4]	; 13a90 <__assert_fail@plt+0x25d8>
   13a88:	strb	r0, [r3, #4]
   13a8c:	bx	lr
   13a90:	andeq	pc, r2, r4, asr #3
   13a94:	ldr	r3, [pc, #192]	; 13b5c <__assert_fail@plt+0x26a4>
   13a98:	push	{r4, r5, r6, lr}
   13a9c:	sub	sp, sp, #8
   13aa0:	ldr	r0, [r3]
   13aa4:	bl	1c094 <__assert_fail@plt+0xabdc>
   13aa8:	cmp	r0, #0
   13aac:	beq	13ad0 <__assert_fail@plt+0x2618>
   13ab0:	ldr	r4, [pc, #168]	; 13b60 <__assert_fail@plt+0x26a8>
   13ab4:	ldrb	r3, [r4, #4]
   13ab8:	cmp	r3, #0
   13abc:	beq	13aec <__assert_fail@plt+0x2634>
   13ac0:	bl	11338 <__errno_location@plt>
   13ac4:	ldr	r3, [r0]
   13ac8:	cmp	r3, #32
   13acc:	bne	13aec <__assert_fail@plt+0x2634>
   13ad0:	ldr	r3, [pc, #140]	; 13b64 <__assert_fail@plt+0x26ac>
   13ad4:	ldr	r0, [r3]
   13ad8:	bl	1c094 <__assert_fail@plt+0xabdc>
   13adc:	cmp	r0, #0
   13ae0:	bne	13b34 <__assert_fail@plt+0x267c>
   13ae4:	add	sp, sp, #8
   13ae8:	pop	{r4, r5, r6, pc}
   13aec:	mov	r2, #5
   13af0:	ldr	r1, [pc, #112]	; 13b68 <__assert_fail@plt+0x26b0>
   13af4:	mov	r0, #0
   13af8:	bl	111e8 <dcgettext@plt>
   13afc:	ldr	r4, [r4]
   13b00:	cmp	r4, #0
   13b04:	mov	r5, r0
   13b08:	beq	13b40 <__assert_fail@plt+0x2688>
   13b0c:	bl	11338 <__errno_location@plt>
   13b10:	ldr	r6, [r0]
   13b14:	mov	r0, r4
   13b18:	bl	17c04 <__assert_fail@plt+0x674c>
   13b1c:	mov	r1, r6
   13b20:	str	r5, [sp]
   13b24:	ldr	r2, [pc, #64]	; 13b6c <__assert_fail@plt+0x26b4>
   13b28:	mov	r3, r0
   13b2c:	mov	r0, #0
   13b30:	bl	1129c <error@plt>
   13b34:	ldr	r3, [pc, #52]	; 13b70 <__assert_fail@plt+0x26b8>
   13b38:	ldr	r0, [r3]
   13b3c:	bl	11188 <_exit@plt>
   13b40:	bl	11338 <__errno_location@plt>
   13b44:	mov	r3, r5
   13b48:	ldr	r2, [pc, #36]	; 13b74 <__assert_fail@plt+0x26bc>
   13b4c:	ldr	r1, [r0]
   13b50:	mov	r0, r4
   13b54:	bl	1129c <error@plt>
   13b58:	b	13b34 <__assert_fail@plt+0x267c>
   13b5c:			; <UNDEFINED> instruction: 0x0002f1b4
   13b60:	andeq	pc, r2, r4, asr #3
   13b64:			; <UNDEFINED> instruction: 0x0002f1b0
   13b68:	andeq	sp, r1, ip, asr #29
   13b6c:	ldrdeq	sp, [r1], -r8
   13b70:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   13b74:	ldrdeq	sp, [r1], -ip
   13b78:	push	{r4, lr}
   13b7c:	bl	13c04 <__assert_fail@plt+0x274c>
   13b80:	cmp	r0, #0
   13b84:	popne	{r4, pc}
   13b88:	bl	1af3c <__assert_fail@plt+0x9a84>
   13b8c:	push	{r4, r5, r6, lr}
   13b90:	mov	r5, r0
   13b94:	ldrb	r4, [r0]
   13b98:	bl	139c8 <__assert_fail@plt+0x2510>
   13b9c:	sub	r4, r4, #47	; 0x2f
   13ba0:	clz	r4, r4
   13ba4:	lsr	r4, r4, #5
   13ba8:	sub	r0, r0, r5
   13bac:	cmp	r0, r4
   13bb0:	bls	13bfc <__assert_fail@plt+0x2744>
   13bb4:	sub	r3, r0, #1
   13bb8:	add	r2, r5, r3
   13bbc:	ldrb	r1, [r5, r3]
   13bc0:	cmp	r1, #47	; 0x2f
   13bc4:	beq	13be0 <__assert_fail@plt+0x2728>
   13bc8:	b	13bfc <__assert_fail@plt+0x2744>
   13bcc:	ldrb	r1, [r2, #-1]!
   13bd0:	sub	r0, r3, #1
   13bd4:	cmp	r1, #47	; 0x2f
   13bd8:	bne	13bf0 <__assert_fail@plt+0x2738>
   13bdc:	mov	r3, r0
   13be0:	cmp	r4, r3
   13be4:	bne	13bcc <__assert_fail@plt+0x2714>
   13be8:	mov	r0, r4
   13bec:	pop	{r4, r5, r6, pc}
   13bf0:	mov	r4, r3
   13bf4:	mov	r0, r4
   13bf8:	pop	{r4, r5, r6, pc}
   13bfc:	mov	r4, r0
   13c00:	b	13be8 <__assert_fail@plt+0x2730>
   13c04:	push	{r4, r5, r6, r7, r8, lr}
   13c08:	mov	r6, r0
   13c0c:	ldrb	r4, [r0]
   13c10:	bl	139c8 <__assert_fail@plt+0x2510>
   13c14:	sub	r4, r4, #47	; 0x2f
   13c18:	clz	r4, r4
   13c1c:	lsr	r4, r4, #5
   13c20:	sub	r5, r0, r6
   13c24:	cmp	r5, r4
   13c28:	bls	13ce4 <__assert_fail@plt+0x282c>
   13c2c:	sub	r3, r5, #1
   13c30:	add	r2, r6, r3
   13c34:	ldrb	r1, [r6, r3]
   13c38:	cmp	r1, #47	; 0x2f
   13c3c:	beq	13c58 <__assert_fail@plt+0x27a0>
   13c40:	b	13cb4 <__assert_fail@plt+0x27fc>
   13c44:	ldrb	r0, [r2, #-1]!
   13c48:	sub	ip, r3, #1
   13c4c:	cmp	r0, #47	; 0x2f
   13c50:	bne	13cb0 <__assert_fail@plt+0x27f8>
   13c54:	mov	r3, ip
   13c58:	cmp	r4, r3
   13c5c:	bne	13c44 <__assert_fail@plt+0x278c>
   13c60:	eor	r3, r4, #1
   13c64:	and	r3, r3, #1
   13c68:	add	r0, r4, #1
   13c6c:	add	r0, r0, r3
   13c70:	uxtb	r5, r3
   13c74:	bl	1c00c <__assert_fail@plt+0xab54>
   13c78:	subs	r7, r0, #0
   13c7c:	beq	13cdc <__assert_fail@plt+0x2824>
   13c80:	mov	r1, r6
   13c84:	mov	r2, r4
   13c88:	bl	11194 <memcpy@plt>
   13c8c:	cmp	r5, #0
   13c90:	movne	r5, #1
   13c94:	moveq	r5, r4
   13c98:	movne	r3, #46	; 0x2e
   13c9c:	strbne	r3, [r7]
   13ca0:	mov	r3, #0
   13ca4:	strb	r3, [r7, r5]
   13ca8:	mov	r0, r7
   13cac:	pop	{r4, r5, r6, r7, r8, pc}
   13cb0:	mov	r5, r3
   13cb4:	add	r0, r5, #1
   13cb8:	cmp	r5, #0
   13cbc:	addeq	r0, r0, #1
   13cc0:	bl	1c00c <__assert_fail@plt+0xab54>
   13cc4:	subs	r7, r0, #0
   13cc8:	beq	13cdc <__assert_fail@plt+0x2824>
   13ccc:	mov	r1, r6
   13cd0:	mov	r2, r5
   13cd4:	bl	11194 <memcpy@plt>
   13cd8:	b	13ca0 <__assert_fail@plt+0x27e8>
   13cdc:	mov	r7, #0
   13ce0:	b	13ca8 <__assert_fail@plt+0x27f0>
   13ce4:	mov	r4, r5
   13ce8:	b	13c60 <__assert_fail@plt+0x27a8>
   13cec:	push	{r1, r2, r3}
   13cf0:	push	{r4, r5, r6, r7, lr}
   13cf4:	sub	sp, sp, #8
   13cf8:	add	r3, sp, #32
   13cfc:	ldr	r1, [sp, #28]
   13d00:	str	r3, [sp, #4]
   13d04:	cmp	r1, #0
   13d08:	beq	13da0 <__assert_fail@plt+0x28e8>
   13d0c:	ldr	r2, [pc, #412]	; 13eb0 <__assert_fail@plt+0x29f8>
   13d10:	mov	r5, r0
   13d14:	cmp	r1, r2
   13d18:	bne	13d64 <__assert_fail@plt+0x28ac>
   13d1c:	ldr	r6, [pc, #400]	; 13eb4 <__assert_fail@plt+0x29fc>
   13d20:	ldr	r7, [r3]
   13d24:	add	r2, sp, #36	; 0x24
   13d28:	ldr	r3, [r6]
   13d2c:	str	r2, [sp, #4]
   13d30:	cmp	r3, #0
   13d34:	mov	r2, r7
   13d38:	blt	13e64 <__assert_fail@plt+0x29ac>
   13d3c:	bl	113c8 <fcntl64@plt>
   13d40:	subs	r4, r0, #0
   13d44:	blt	13de8 <__assert_fail@plt+0x2930>
   13d48:	mov	r3, #1
   13d4c:	str	r3, [r6]
   13d50:	mov	r0, r4
   13d54:	add	sp, sp, #8
   13d58:	pop	{r4, r5, r6, r7, lr}
   13d5c:	add	sp, sp, #12
   13d60:	bx	lr
   13d64:	cmp	r1, #11
   13d68:	beq	13d90 <__assert_fail@plt+0x28d8>
   13d6c:	bgt	13db0 <__assert_fail@plt+0x28f8>
   13d70:	cmp	r1, #3
   13d74:	beq	13d90 <__assert_fail@plt+0x28d8>
   13d78:	ble	13ea4 <__assert_fail@plt+0x29ec>
   13d7c:	cmp	r1, #8
   13d80:	beq	13dd0 <__assert_fail@plt+0x2918>
   13d84:	ble	13dd0 <__assert_fail@plt+0x2918>
   13d88:	cmp	r1, #9
   13d8c:	bne	13dd0 <__assert_fail@plt+0x2918>
   13d90:	mov	r0, r5
   13d94:	bl	113c8 <fcntl64@plt>
   13d98:	mov	r4, r0
   13d9c:	b	13d50 <__assert_fail@plt+0x2898>
   13da0:	ldr	r2, [sp, #32]
   13da4:	bl	113c8 <fcntl64@plt>
   13da8:	mov	r4, r0
   13dac:	b	13d50 <__assert_fail@plt+0x2898>
   13db0:	ldr	r3, [pc, #256]	; 13eb8 <__assert_fail@plt+0x2a00>
   13db4:	cmp	r1, r3
   13db8:	bgt	13e84 <__assert_fail@plt+0x29cc>
   13dbc:	cmp	r1, r2
   13dc0:	bge	13dd0 <__assert_fail@plt+0x2918>
   13dc4:	sub	r3, r3, #6
   13dc8:	cmp	r1, r3
   13dcc:	beq	13d90 <__assert_fail@plt+0x28d8>
   13dd0:	ldr	r3, [sp, #4]
   13dd4:	mov	r0, r5
   13dd8:	ldr	r2, [r3]
   13ddc:	bl	113c8 <fcntl64@plt>
   13de0:	mov	r4, r0
   13de4:	b	13d50 <__assert_fail@plt+0x2898>
   13de8:	bl	11338 <__errno_location@plt>
   13dec:	ldr	r3, [r0]
   13df0:	cmp	r3, #22
   13df4:	bne	13d48 <__assert_fail@plt+0x2890>
   13df8:	mov	r2, r7
   13dfc:	mov	r0, r5
   13e00:	mov	r1, #0
   13e04:	bl	113c8 <fcntl64@plt>
   13e08:	subs	r4, r0, #0
   13e0c:	blt	13d50 <__assert_fail@plt+0x2898>
   13e10:	mvn	r3, #0
   13e14:	str	r3, [r6]
   13e18:	mov	r1, #1
   13e1c:	mov	r0, r4
   13e20:	bl	113c8 <fcntl64@plt>
   13e24:	subs	r2, r0, #0
   13e28:	blt	13e44 <__assert_fail@plt+0x298c>
   13e2c:	orr	r2, r2, #1
   13e30:	mov	r1, #2
   13e34:	mov	r0, r4
   13e38:	bl	113c8 <fcntl64@plt>
   13e3c:	cmn	r0, #1
   13e40:	bne	13d50 <__assert_fail@plt+0x2898>
   13e44:	bl	11338 <__errno_location@plt>
   13e48:	mov	r5, r0
   13e4c:	mov	r0, r4
   13e50:	ldr	r6, [r5]
   13e54:	mvn	r4, #0
   13e58:	bl	114ac <close@plt>
   13e5c:	str	r6, [r5]
   13e60:	b	13d50 <__assert_fail@plt+0x2898>
   13e64:	mov	r1, #0
   13e68:	bl	113c8 <fcntl64@plt>
   13e6c:	subs	r4, r0, #0
   13e70:	blt	13d50 <__assert_fail@plt+0x2898>
   13e74:	ldr	r3, [r6]
   13e78:	cmn	r3, #1
   13e7c:	beq	13e18 <__assert_fail@plt+0x2960>
   13e80:	b	13d50 <__assert_fail@plt+0x2898>
   13e84:	ldr	r3, [pc, #48]	; 13ebc <__assert_fail@plt+0x2a04>
   13e88:	cmp	r1, r3
   13e8c:	beq	13dd0 <__assert_fail@plt+0x2918>
   13e90:	blt	13d90 <__assert_fail@plt+0x28d8>
   13e94:	add	r3, r3, #1
   13e98:	cmp	r1, r3
   13e9c:	bne	13dd0 <__assert_fail@plt+0x2918>
   13ea0:	b	13d90 <__assert_fail@plt+0x28d8>
   13ea4:	cmp	r1, #1
   13ea8:	bne	13dd0 <__assert_fail@plt+0x2918>
   13eac:	b	13d90 <__assert_fail@plt+0x28d8>
   13eb0:	andeq	r0, r0, r6, lsl #8
   13eb4:	andeq	pc, r2, ip, asr #3
   13eb8:	andeq	r0, r0, r7, lsl #8
   13ebc:	andeq	r0, r0, r9, lsl #8
   13ec0:	push	{r1, r2, r3}
   13ec4:	push	{lr}		; (str lr, [sp, #-4]!)
   13ec8:	sub	sp, sp, #8
   13ecc:	ldr	r1, [sp, #12]
   13ed0:	ands	r2, r1, #64	; 0x40
   13ed4:	addne	r3, sp, #16
   13ed8:	ldrne	r2, [sp, #16]
   13edc:	strne	r3, [sp, #4]
   13ee0:	bl	112a8 <open64@plt>
   13ee4:	bl	19e68 <__assert_fail@plt+0x89b0>
   13ee8:	add	sp, sp, #8
   13eec:	pop	{lr}		; (ldr lr, [sp], #4)
   13ef0:	add	sp, sp, #12
   13ef4:	bx	lr
   13ef8:	push	{r4, r5, lr}
   13efc:	sub	sp, sp, #12
   13f00:	mov	r5, r0
   13f04:	bl	11338 <__errno_location@plt>
   13f08:	mov	r2, #0
   13f0c:	mov	r4, r0
   13f10:	ldr	r3, [r0]
   13f14:	str	r2, [r4]
   13f18:	mov	r0, r5
   13f1c:	str	r3, [sp]
   13f20:	str	r3, [sp, #4]
   13f24:	bl	1117c <free@plt>
   13f28:	ldr	r3, [r4]
   13f2c:	add	r2, sp, #8
   13f30:	cmp	r3, #0
   13f34:	moveq	r3, #4
   13f38:	movne	r3, #0
   13f3c:	add	r3, r2, r3
   13f40:	ldr	r3, [r3, #-8]
   13f44:	str	r3, [r4]
   13f48:	add	sp, sp, #12
   13f4c:	pop	{r4, r5, pc}
   13f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f54:	vpush	{d8-d9}
   13f58:	mov	r4, r3
   13f5c:	ands	r3, r3, #32
   13f60:	mov	r9, r1
   13f64:	sub	sp, sp, #108	; 0x6c
   13f68:	mov	r8, r0
   13f6c:	str	r3, [sp, #36]	; 0x24
   13f70:	and	r3, r4, #3
   13f74:	str	r3, [sp, #8]
   13f78:	movne	r3, #1024	; 0x400
   13f7c:	moveq	r3, #1000	; 0x3e8
   13f80:	str	r2, [sp, #12]
   13f84:	strne	r3, [sp, #40]	; 0x28
   13f88:	movne	r2, #1024	; 0x400
   13f8c:	moveq	r2, #1000	; 0x3e8
   13f90:	strne	r3, [sp, #28]
   13f94:	streq	r3, [sp, #40]	; 0x28
   13f98:	streq	r3, [sp, #28]
   13f9c:	mov	r3, #0
   13fa0:	ldrd	r6, [sp, #160]	; 0xa0
   13fa4:	strd	r2, [sp, #16]
   13fa8:	bl	11410 <localeconv@plt>
   13fac:	ldr	r3, [sp, #12]
   13fb0:	add	r3, r3, #644	; 0x284
   13fb4:	str	r3, [sp, #24]
   13fb8:	ldr	fp, [r0]
   13fbc:	mov	r5, r0
   13fc0:	mov	r0, fp
   13fc4:	bl	11314 <strlen@plt>
   13fc8:	ldr	sl, [r5, #4]
   13fcc:	ldr	r1, [pc, #684]	; 14280 <__assert_fail@plt+0x2dc8>
   13fd0:	mov	r2, r0
   13fd4:	sub	r0, r0, #1
   13fd8:	cmp	r0, #16
   13fdc:	movcs	r2, #1
   13fe0:	str	r2, [sp, #48]	; 0x30
   13fe4:	mov	r0, sl
   13fe8:	movcc	r2, fp
   13fec:	movcs	r2, r1
   13ff0:	str	r2, [sp, #52]	; 0x34
   13ff4:	bl	11314 <strlen@plt>
   13ff8:	ldr	r3, [sp, #24]
   13ffc:	ldr	r2, [pc, #640]	; 14284 <__assert_fail@plt+0x2dcc>
   14000:	add	r3, r3, #3
   14004:	str	r3, [sp, #8]
   14008:	ldr	r5, [r5, #8]
   1400c:	cmp	r0, #16
   14010:	movhi	sl, r2
   14014:	ldrd	r2, [sp, #168]	; 0xa8
   14018:	str	sl, [sp, #32]
   1401c:	cmp	r3, r7
   14020:	cmpeq	r2, r6
   14024:	bhi	14290 <__assert_fail@plt+0x2dd8>
   14028:	mov	r0, r6
   1402c:	mov	r1, r7
   14030:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14034:	orrs	r3, r2, r3
   14038:	bne	1407c <__assert_fail@plt+0x2bc4>
   1403c:	ldrd	r2, [sp, #168]	; 0xa8
   14040:	mov	r0, r6
   14044:	mov	r1, r7
   14048:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   1404c:	mov	r2, r0
   14050:	mul	r0, r0, r9
   14054:	umull	sl, fp, r2, r8
   14058:	mla	r0, r8, r1, r0
   1405c:	mov	r3, r1
   14060:	add	fp, r0, fp
   14064:	mov	r1, fp
   14068:	mov	r0, sl
   1406c:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14070:	cmp	r9, r1
   14074:	cmpeq	r8, r0
   14078:	beq	14948 <__assert_fail@plt+0x3490>
   1407c:	mov	r0, r6
   14080:	mov	r1, r7
   14084:	bl	1ccac <__assert_fail@plt+0xb7f4>
   14088:	vmov	d9, r0, r1
   1408c:	ldrd	r0, [sp, #168]	; 0xa8
   14090:	bl	1ccac <__assert_fail@plt+0xb7f4>
   14094:	vmov	d7, r0, r1
   14098:	mov	r0, r8
   1409c:	mov	r1, r9
   140a0:	vdiv.f64	d8, d9, d7
   140a4:	bl	1ccac <__assert_fail@plt+0xb7f4>
   140a8:	ands	r8, r4, #16
   140ac:	vmov	d7, r0, r1
   140b0:	vmul.f64	d8, d8, d7
   140b4:	beq	146c0 <__assert_fail@plt+0x3208>
   140b8:	vldr	s15, [sp, #40]	; 0x28
   140bc:	vcvt.f64.s32	d7, s15
   140c0:	vmul.f64	d6, d7, d7
   140c4:	vcmpe.f64	d8, d6
   140c8:	vmrs	APSR_nzcv, fpscr
   140cc:	blt	14c20 <__assert_fail@plt+0x3768>
   140d0:	vmul.f64	d5, d7, d6
   140d4:	vcmpe.f64	d8, d5
   140d8:	vmrs	APSR_nzcv, fpscr
   140dc:	blt	14c2c <__assert_fail@plt+0x3774>
   140e0:	vmul.f64	d6, d7, d5
   140e4:	vcmpe.f64	d8, d6
   140e8:	vmrs	APSR_nzcv, fpscr
   140ec:	blt	14c34 <__assert_fail@plt+0x377c>
   140f0:	vmul.f64	d5, d7, d6
   140f4:	vcmpe.f64	d8, d5
   140f8:	vmrs	APSR_nzcv, fpscr
   140fc:	blt	14c40 <__assert_fail@plt+0x3788>
   14100:	vmul.f64	d6, d7, d5
   14104:	vcmpe.f64	d8, d6
   14108:	vmrs	APSR_nzcv, fpscr
   1410c:	blt	14c48 <__assert_fail@plt+0x3790>
   14110:	vmul.f64	d5, d7, d6
   14114:	vcmpe.f64	d8, d5
   14118:	vmrs	APSR_nzcv, fpscr
   1411c:	blt	14c54 <__assert_fail@plt+0x379c>
   14120:	vmul.f64	d6, d7, d5
   14124:	vcmpe.f64	d8, d6
   14128:	vmrs	APSR_nzcv, fpscr
   1412c:	blt	14c5c <__assert_fail@plt+0x37a4>
   14130:	mov	r9, #8
   14134:	and	r8, r4, #3
   14138:	cmp	r8, #1
   1413c:	vdiv.f64	d9, d8, d6
   14140:	beq	147ec <__assert_fail@plt+0x3334>
   14144:	vldr	d7, [pc, #292]	; 14270 <__assert_fail@plt+0x2db8>
   14148:	vmov	r0, r1, d9
   1414c:	vcmpe.f64	d9, d7
   14150:	vmrs	APSR_nzcv, fpscr
   14154:	bpl	1419c <__assert_fail@plt+0x2ce4>
   14158:	bl	1ce40 <__assert_fail@plt+0xb988>
   1415c:	cmp	r8, #0
   14160:	mov	r6, r0
   14164:	mov	r7, r1
   14168:	movne	r0, #0
   1416c:	bne	14188 <__assert_fail@plt+0x2cd0>
   14170:	bl	1ccac <__assert_fail@plt+0xb7f4>
   14174:	vmov	d7, r0, r1
   14178:	vcmp.f64	d7, d9
   1417c:	vmrs	APSR_nzcv, fpscr
   14180:	movne	r0, #1
   14184:	moveq	r0, #0
   14188:	adds	r2, r6, r0
   1418c:	adc	r3, r7, #0
   14190:	mov	r0, r2
   14194:	mov	r1, r3
   14198:	bl	1ccac <__assert_fail@plt+0xb7f4>
   1419c:	ldr	r6, [sp, #12]
   141a0:	strd	r0, [sp]
   141a4:	ldr	r3, [pc, #220]	; 14288 <__assert_fail@plt+0x2dd0>
   141a8:	mvn	r2, #0
   141ac:	mov	r1, #1
   141b0:	mov	r0, r6
   141b4:	bl	11344 <__sprintf_chk@plt>
   141b8:	ldr	r3, [sp, #48]	; 0x30
   141bc:	mov	r0, r6
   141c0:	add	r6, r3, #1
   141c4:	bl	11314 <strlen@plt>
   141c8:	ands	r3, r4, #32
   141cc:	cmp	r3, #0
   141d0:	movne	r3, #1
   141d4:	moveq	r3, #2
   141d8:	add	r3, r3, r6
   141dc:	cmp	r0, r3
   141e0:	mov	r7, r0
   141e4:	bls	14838 <__assert_fail@plt+0x3380>
   141e8:	vldr	d7, [pc, #136]	; 14278 <__assert_fail@plt+0x2dc0>
   141ec:	vmul.f64	d9, d9, d7
   141f0:	vldr	d7, [pc, #120]	; 14270 <__assert_fail@plt+0x2db8>
   141f4:	vcmpe.f64	d9, d7
   141f8:	vmrs	APSR_nzcv, fpscr
   141fc:	bpl	14238 <__assert_fail@plt+0x2d80>
   14200:	vmov	r0, r1, d9
   14204:	bl	1ce40 <__assert_fail@plt+0xb988>
   14208:	and	r3, r4, #3
   1420c:	cmp	r3, #0
   14210:	mov	r6, r0
   14214:	mov	r7, r1
   14218:	movne	r0, #0
   1421c:	beq	14b6c <__assert_fail@plt+0x36b4>
   14220:	adds	r2, r6, r0
   14224:	adc	r3, r7, #0
   14228:	mov	r0, r2
   1422c:	mov	r1, r3
   14230:	bl	1ccac <__assert_fail@plt+0xb7f4>
   14234:	vmov	d9, r0, r1
   14238:	vldr	d6, [pc, #56]	; 14278 <__assert_fail@plt+0x2dc0>
   1423c:	ldr	r7, [sp, #12]
   14240:	ldr	r3, [pc, #68]	; 1428c <__assert_fail@plt+0x2dd4>
   14244:	mvn	r2, #0
   14248:	vdiv.f64	d7, d9, d6
   1424c:	mov	r1, #1
   14250:	mov	r0, r7
   14254:	mov	r6, #0
   14258:	vstr	d7, [sp]
   1425c:	bl	11344 <__sprintf_chk@plt>
   14260:	mov	r0, r7
   14264:	bl	11314 <strlen@plt>
   14268:	mov	r7, r0
   1426c:	b	1470c <__assert_fail@plt+0x3254>
   14270:	andeq	r0, r0, r0
   14274:	mvnsmi	r0, #0
   14278:	andeq	r0, r0, r0
   1427c:	eormi	r0, r4, r0
   14280:	andeq	sp, r1, r0, lsl #30
   14284:	andeq	sp, r1, ip, asr #19
   14288:	andeq	sp, r1, ip, lsl #30
   1428c:	andeq	sp, r1, r4, lsl #30
   14290:	orrs	r3, r6, r7
   14294:	beq	1407c <__assert_fail@plt+0x2bc4>
   14298:	mov	r2, r6
   1429c:	mov	r3, r7
   142a0:	ldrd	r0, [sp, #168]	; 0xa8
   142a4:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   142a8:	orrs	r3, r2, r3
   142ac:	bne	1407c <__assert_fail@plt+0x2bc4>
   142b0:	mov	r2, r6
   142b4:	mov	r3, r7
   142b8:	ldrd	r0, [sp, #168]	; 0xa8
   142bc:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   142c0:	mov	sl, r0
   142c4:	mov	fp, r1
   142c8:	mov	r2, r0
   142cc:	mov	r3, r1
   142d0:	mov	r0, r8
   142d4:	mov	r1, r9
   142d8:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   142dc:	mov	r1, #10
   142e0:	umull	r6, r7, r2, r1
   142e4:	mla	r7, r1, r3, r7
   142e8:	mov	r2, sl
   142ec:	mov	r3, fp
   142f0:	mov	r0, r6
   142f4:	mov	r1, r7
   142f8:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   142fc:	mov	r0, r8
   14300:	mov	r1, r9
   14304:	strd	sl, [sp, #40]	; 0x28
   14308:	lsls	r8, r2, #1
   1430c:	adc	r9, r3, r3
   14310:	mov	r2, sl
   14314:	mov	r3, fp
   14318:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   1431c:	ldrd	r2, [sp, #40]	; 0x28
   14320:	mov	sl, r0
   14324:	mov	fp, r1
   14328:	mov	r0, r6
   1432c:	mov	r1, r7
   14330:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14334:	ldrd	r2, [sp, #40]	; 0x28
   14338:	cmp	r3, r9
   1433c:	cmpeq	r2, r8
   14340:	mov	r6, r0
   14344:	bls	14b50 <__assert_fail@plt+0x3698>
   14348:	orrs	r3, r8, r9
   1434c:	movne	r8, #1
   14350:	moveq	r8, #0
   14354:	ands	r3, r4, #16
   14358:	str	r3, [sp, #40]	; 0x28
   1435c:	beq	14a5c <__assert_fail@plt+0x35a4>
   14360:	ldrd	r2, [sp, #16]
   14364:	cmp	fp, r3
   14368:	cmpeq	sl, r2
   1436c:	bcc	14b5c <__assert_fail@plt+0x36a4>
   14370:	mov	r0, sl
   14374:	mov	r1, fp
   14378:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   1437c:	ldr	r1, [sp, #28]
   14380:	add	r2, r2, r2, lsl #2
   14384:	add	r7, r6, r2, lsl #1
   14388:	mov	r0, r7
   1438c:	bl	1c708 <__assert_fail@plt+0xb250>
   14390:	asr	r6, r8, #1
   14394:	ldrd	r2, [sp, #16]
   14398:	mov	r0, sl
   1439c:	add	r9, r6, r1, lsl #1
   143a0:	mov	r1, fp
   143a4:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   143a8:	mov	sl, r0
   143ac:	mov	fp, r1
   143b0:	mov	r0, r7
   143b4:	ldr	r1, [sp, #28]
   143b8:	bl	1c51c <__assert_fail@plt+0xb064>
   143bc:	ldr	r3, [sp, #28]
   143c0:	cmp	r3, r9
   143c4:	mov	r6, r0
   143c8:	bls	14b94 <__assert_fail@plt+0x36dc>
   143cc:	cmn	r8, r9
   143d0:	movne	r8, #1
   143d4:	moveq	r8, #0
   143d8:	ldrd	r2, [sp, #16]
   143dc:	cmp	r3, fp
   143e0:	cmpeq	r2, sl
   143e4:	bhi	14d08 <__assert_fail@plt+0x3850>
   143e8:	mov	r0, sl
   143ec:	mov	r1, fp
   143f0:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   143f4:	ldr	r1, [sp, #28]
   143f8:	add	r2, r2, r2, lsl #2
   143fc:	add	r7, r6, r2, lsl #1
   14400:	mov	r0, r7
   14404:	bl	1c708 <__assert_fail@plt+0xb250>
   14408:	asr	r6, r8, #1
   1440c:	ldrd	r2, [sp, #16]
   14410:	mov	r0, sl
   14414:	add	r9, r6, r1, lsl #1
   14418:	mov	r1, fp
   1441c:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14420:	mov	sl, r0
   14424:	mov	fp, r1
   14428:	mov	r0, r7
   1442c:	ldr	r1, [sp, #28]
   14430:	bl	1c51c <__assert_fail@plt+0xb064>
   14434:	ldr	r3, [sp, #28]
   14438:	cmp	r3, r9
   1443c:	mov	r6, r0
   14440:	mov	r7, r0
   14444:	bls	14bac <__assert_fail@plt+0x36f4>
   14448:	cmn	r8, r9
   1444c:	movne	r8, #1
   14450:	moveq	r8, #0
   14454:	ldrd	r2, [sp, #16]
   14458:	cmp	fp, r3
   1445c:	cmpeq	sl, r2
   14460:	bcc	14d10 <__assert_fail@plt+0x3858>
   14464:	mov	r0, sl
   14468:	mov	r1, fp
   1446c:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14470:	ldr	r9, [sp, #28]
   14474:	mov	r1, r9
   14478:	add	r2, r2, r2, lsl #2
   1447c:	add	r6, r7, r2, lsl #1
   14480:	mov	r0, r6
   14484:	bl	1c708 <__assert_fail@plt+0xb250>
   14488:	asr	r7, r8, #1
   1448c:	ldrd	r2, [sp, #16]
   14490:	mov	r0, sl
   14494:	add	r7, r7, r1, lsl #1
   14498:	mov	r1, fp
   1449c:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   144a0:	mov	sl, r0
   144a4:	mov	fp, r1
   144a8:	mov	r0, r6
   144ac:	mov	r1, r9
   144b0:	bl	1c51c <__assert_fail@plt+0xb064>
   144b4:	cmp	r9, r7
   144b8:	mov	r6, r0
   144bc:	mov	r9, r0
   144c0:	bls	14bc4 <__assert_fail@plt+0x370c>
   144c4:	cmn	r8, r7
   144c8:	movne	r8, #1
   144cc:	moveq	r8, #0
   144d0:	ldrd	r2, [sp, #16]
   144d4:	cmp	fp, r3
   144d8:	cmpeq	sl, r2
   144dc:	bcc	14d18 <__assert_fail@plt+0x3860>
   144e0:	mov	r0, sl
   144e4:	mov	r1, fp
   144e8:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   144ec:	ldr	r1, [sp, #28]
   144f0:	asr	r7, r8, #1
   144f4:	add	r2, r2, r2, lsl #2
   144f8:	add	r6, r9, r2, lsl #1
   144fc:	mov	r0, r6
   14500:	bl	1c708 <__assert_fail@plt+0xb250>
   14504:	ldrd	r2, [sp, #16]
   14508:	mov	r0, sl
   1450c:	add	r7, r7, r1, lsl #1
   14510:	mov	r1, fp
   14514:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14518:	ldr	r9, [sp, #28]
   1451c:	mov	sl, r0
   14520:	mov	fp, r1
   14524:	mov	r0, r6
   14528:	mov	r1, r9
   1452c:	bl	1c51c <__assert_fail@plt+0xb064>
   14530:	cmp	r9, r7
   14534:	mov	r6, r0
   14538:	mov	r9, r0
   1453c:	bls	14bdc <__assert_fail@plt+0x3724>
   14540:	cmn	r8, r7
   14544:	movne	r8, #1
   14548:	moveq	r8, #0
   1454c:	ldrd	r2, [sp, #16]
   14550:	cmp	fp, r3
   14554:	cmpeq	sl, r2
   14558:	bcc	14d50 <__assert_fail@plt+0x3898>
   1455c:	mov	r0, sl
   14560:	mov	r1, fp
   14564:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14568:	ldr	r1, [sp, #28]
   1456c:	asr	r7, r8, #1
   14570:	add	r2, r2, r2, lsl #2
   14574:	add	r6, r9, r2, lsl #1
   14578:	mov	r0, r6
   1457c:	bl	1c708 <__assert_fail@plt+0xb250>
   14580:	ldrd	r2, [sp, #16]
   14584:	mov	r0, sl
   14588:	add	r7, r7, r1, lsl #1
   1458c:	mov	r1, fp
   14590:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14594:	ldr	r9, [sp, #28]
   14598:	mov	sl, r0
   1459c:	mov	fp, r1
   145a0:	mov	r0, r6
   145a4:	mov	r1, r9
   145a8:	bl	1c51c <__assert_fail@plt+0xb064>
   145ac:	cmp	r9, r7
   145b0:	mov	r6, r0
   145b4:	mov	r9, r0
   145b8:	bls	14bf4 <__assert_fail@plt+0x373c>
   145bc:	cmn	r8, r7
   145c0:	movne	r8, #1
   145c4:	moveq	r8, #0
   145c8:	ldrd	r2, [sp, #16]
   145cc:	cmp	r3, fp
   145d0:	cmpeq	r2, sl
   145d4:	bhi	14d58 <__assert_fail@plt+0x38a0>
   145d8:	mov	r0, sl
   145dc:	mov	r1, fp
   145e0:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   145e4:	ldr	r1, [sp, #28]
   145e8:	asr	r7, r8, #1
   145ec:	add	r2, r2, r2, lsl #2
   145f0:	add	r6, r9, r2, lsl #1
   145f4:	mov	r0, r6
   145f8:	bl	1c708 <__assert_fail@plt+0xb250>
   145fc:	ldrd	r2, [sp, #16]
   14600:	mov	r0, sl
   14604:	add	r7, r7, r1, lsl #1
   14608:	mov	r1, fp
   1460c:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14610:	ldr	r9, [sp, #28]
   14614:	mov	sl, r0
   14618:	mov	fp, r1
   1461c:	mov	r0, r6
   14620:	mov	r1, r9
   14624:	bl	1c51c <__assert_fail@plt+0xb064>
   14628:	cmp	r9, r7
   1462c:	mov	r6, r0
   14630:	bls	14c0c <__assert_fail@plt+0x3754>
   14634:	cmn	r8, r7
   14638:	movne	r8, #1
   1463c:	moveq	r8, #0
   14640:	mov	r9, #6
   14644:	cmp	fp, #0
   14648:	cmpeq	sl, #9
   1464c:	bhi	14cfc <__assert_fail@plt+0x3844>
   14650:	and	r3, r4, #3
   14654:	cmp	r3, #1
   14658:	beq	14c90 <__assert_fail@plt+0x37d8>
   1465c:	cmp	r8, #0
   14660:	and	r3, r4, #3
   14664:	clz	r3, r3
   14668:	lsr	r3, r3, #5
   1466c:	moveq	r3, #0
   14670:	cmp	r3, #0
   14674:	beq	14c68 <__assert_fail@plt+0x37b0>
   14678:	add	r6, r6, #1
   1467c:	cmp	r6, #10
   14680:	beq	14ce0 <__assert_fail@plt+0x3828>
   14684:	add	r7, r6, #48	; 0x30
   14688:	uxtb	r3, r7
   1468c:	ldr	r2, [sp, #24]
   14690:	ldr	r0, [sp, #12]
   14694:	add	r7, r2, #2
   14698:	ldr	r2, [sp, #48]	; 0x30
   1469c:	strb	r3, [r0, #646]	; 0x286
   146a0:	sub	r1, r7, r2
   146a4:	str	r1, [sp, #24]
   146a8:	mov	r0, r1
   146ac:	mov	r8, #0
   146b0:	ldr	r1, [sp, #52]	; 0x34
   146b4:	bl	11194 <memcpy@plt>
   146b8:	mov	r6, r8
   146bc:	b	14a68 <__assert_fail@plt+0x35b0>
   146c0:	and	r9, r4, #3
   146c4:	cmp	r9, #1
   146c8:	beq	146dc <__assert_fail@plt+0x3224>
   146cc:	vldr	d7, [pc, #876]	; 14a40 <__assert_fail@plt+0x3588>
   146d0:	vcmpe.f64	d8, d7
   146d4:	vmrs	APSR_nzcv, fpscr
   146d8:	bmi	14904 <__assert_fail@plt+0x344c>
   146dc:	ldr	r6, [sp, #12]
   146e0:	ldr	r3, [pc, #872]	; 14a50 <__assert_fail@plt+0x3598>
   146e4:	mvn	r2, #0
   146e8:	mov	r1, #1
   146ec:	mov	r0, r6
   146f0:	vstr	d8, [sp]
   146f4:	bl	11344 <__sprintf_chk@plt>
   146f8:	mov	r0, r6
   146fc:	bl	11314 <strlen@plt>
   14700:	mov	r6, #0
   14704:	mvn	r9, #0
   14708:	mov	r7, r0
   1470c:	ldr	r3, [sp, #8]
   14710:	mov	r2, r7
   14714:	sub	r8, r3, r7
   14718:	mov	r0, r8
   1471c:	ldr	r1, [sp, #12]
   14720:	bl	11170 <memmove@plt>
   14724:	sub	r7, r7, r6
   14728:	add	r7, r8, r7
   1472c:	tst	r4, #4
   14730:	bne	1486c <__assert_fail@plt+0x33b4>
   14734:	tst	r4, #128	; 0x80
   14738:	beq	147d0 <__assert_fail@plt+0x3318>
   1473c:	cmn	r9, #1
   14740:	beq	14954 <__assert_fail@plt+0x349c>
   14744:	and	r3, r4, #256	; 0x100
   14748:	orrs	r2, r9, r3
   1474c:	beq	147d0 <__assert_fail@plt+0x3318>
   14750:	tst	r4, #64	; 0x40
   14754:	ldrne	r1, [sp, #12]
   14758:	addne	r2, r1, #648	; 0x288
   1475c:	strne	r2, [sp, #8]
   14760:	movne	r2, #32
   14764:	strbne	r2, [r1, #647]	; 0x287
   14768:	cmp	r9, #0
   1476c:	beq	14d60 <__assert_fail@plt+0x38a8>
   14770:	ldr	r2, [sp, #36]	; 0x24
   14774:	ldr	r0, [sp, #8]
   14778:	cmp	r2, #0
   1477c:	cmpeq	r9, #1
   14780:	ldr	r2, [sp, #8]
   14784:	ldrne	r1, [pc, #712]	; 14a54 <__assert_fail@plt+0x359c>
   14788:	moveq	r1, #107	; 0x6b
   1478c:	add	r2, r2, #1
   14790:	ldrbne	r1, [r1, r9]
   14794:	cmp	r3, #0
   14798:	streq	r2, [sp, #8]
   1479c:	strb	r1, [r0]
   147a0:	beq	147d0 <__assert_fail@plt+0x3318>
   147a4:	ldr	r3, [sp, #36]	; 0x24
   147a8:	cmp	r9, #0
   147ac:	cmpne	r3, #0
   147b0:	movne	r2, r0
   147b4:	movne	r3, #105	; 0x69
   147b8:	strbne	r3, [r2, #1]
   147bc:	addne	r2, r2, #2
   147c0:	mov	r3, #66	; 0x42
   147c4:	strb	r3, [r2]
   147c8:	add	r3, r2, #1
   147cc:	str	r3, [sp, #8]
   147d0:	ldr	r2, [sp, #8]
   147d4:	mov	r3, #0
   147d8:	mov	r0, r8
   147dc:	strb	r3, [r2]
   147e0:	add	sp, sp, #108	; 0x6c
   147e4:	vpop	{d8-d9}
   147e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147ec:	ldr	r6, [sp, #12]
   147f0:	ldr	r3, [pc, #608]	; 14a58 <__assert_fail@plt+0x35a0>
   147f4:	mvn	r2, #0
   147f8:	and	r1, r4, #3
   147fc:	mov	r0, r6
   14800:	vstr	d9, [sp]
   14804:	bl	11344 <__sprintf_chk@plt>
   14808:	ldr	r3, [sp, #48]	; 0x30
   1480c:	mov	r0, r6
   14810:	add	r6, r3, #1
   14814:	bl	11314 <strlen@plt>
   14818:	ands	r3, r4, #32
   1481c:	cmp	r3, #0
   14820:	movne	r3, #1
   14824:	moveq	r3, #2
   14828:	add	r3, r3, r6
   1482c:	cmp	r3, r0
   14830:	mov	r7, r0
   14834:	bcc	14b88 <__assert_fail@plt+0x36d0>
   14838:	tst	r4, #8
   1483c:	beq	1470c <__assert_fail@plt+0x3254>
   14840:	ldr	r3, [sp, #12]
   14844:	add	r3, r3, r7
   14848:	ldrb	r3, [r3, #-1]
   1484c:	cmp	r3, #48	; 0x30
   14850:	bne	1470c <__assert_fail@plt+0x3254>
   14854:	vldr	d7, [pc, #492]	; 14a48 <__assert_fail@plt+0x3590>
   14858:	and	r3, r4, #3
   1485c:	cmp	r3, #1
   14860:	vmul.f64	d9, d9, d7
   14864:	beq	14238 <__assert_fail@plt+0x2d80>
   14868:	b	141f0 <__assert_fail@plt+0x2d38>
   1486c:	ldr	r0, [sp, #32]
   14870:	bl	11314 <strlen@plt>
   14874:	sub	r6, r7, r8
   14878:	mov	r1, r8
   1487c:	mov	r2, r6
   14880:	mov	r3, #41	; 0x29
   14884:	mvn	sl, #0
   14888:	mov	fp, r0
   1488c:	add	r0, sp, #60	; 0x3c
   14890:	bl	1123c <__memcpy_chk@plt>
   14894:	ldr	r8, [sp, #32]
   14898:	b	148a0 <__assert_fail@plt+0x33e8>
   1489c:	bl	11194 <memcpy@plt>
   148a0:	ldrb	r3, [r5]
   148a4:	cmp	r3, #0
   148a8:	beq	148bc <__assert_fail@plt+0x3404>
   148ac:	cmp	r3, #255	; 0xff
   148b0:	movne	sl, r3
   148b4:	moveq	sl, r6
   148b8:	add	r5, r5, #1
   148bc:	cmp	sl, r6
   148c0:	movcs	sl, r6
   148c4:	sub	r3, r7, sl
   148c8:	sub	r6, r6, sl
   148cc:	add	r2, sp, #60	; 0x3c
   148d0:	add	r1, r2, r6
   148d4:	mov	r0, r3
   148d8:	mov	r2, sl
   148dc:	sub	r7, r3, fp
   148e0:	bl	11194 <memcpy@plt>
   148e4:	cmp	r6, #0
   148e8:	mov	r2, fp
   148ec:	mov	r1, r8
   148f0:	mov	r3, r0
   148f4:	mov	r0, r7
   148f8:	bne	1489c <__assert_fail@plt+0x33e4>
   148fc:	mov	r8, r3
   14900:	b	14734 <__assert_fail@plt+0x327c>
   14904:	vmov	r0, r1, d8
   14908:	bl	1ce40 <__assert_fail@plt+0xb988>
   1490c:	cmp	r9, #0
   14910:	mov	r6, r0
   14914:	mov	r7, r1
   14918:	bne	14934 <__assert_fail@plt+0x347c>
   1491c:	bl	1ccac <__assert_fail@plt+0xb7f4>
   14920:	vmov	d7, r0, r1
   14924:	vcmp.f64	d7, d8
   14928:	vmrs	APSR_nzcv, fpscr
   1492c:	movne	r8, #1
   14930:	moveq	r8, #0
   14934:	adds	r0, r6, r8
   14938:	adc	r1, r7, #0
   1493c:	bl	1ccac <__assert_fail@plt+0xb7f4>
   14940:	vmov	d8, r0, r1
   14944:	b	146dc <__assert_fail@plt+0x3224>
   14948:	mov	r8, #0
   1494c:	mov	r6, r8
   14950:	b	14354 <__assert_fail@plt+0x2e9c>
   14954:	ldrd	r2, [sp, #168]	; 0xa8
   14958:	cmp	r3, #0
   1495c:	cmpeq	r2, #1
   14960:	bls	14c80 <__assert_fail@plt+0x37c8>
   14964:	ldrd	r6, [sp, #16]
   14968:	mov	r1, r3
   1496c:	mov	r0, r2
   14970:	cmp	r1, r7
   14974:	cmpeq	r0, r6
   14978:	bls	14c88 <__assert_fail@plt+0x37d0>
   1497c:	mul	r1, r6, r7
   14980:	umull	r2, r3, r6, r6
   14984:	add	r3, r3, r1, lsl #1
   14988:	ldrd	r0, [sp, #168]	; 0xa8
   1498c:	cmp	r1, r3
   14990:	cmpeq	r0, r2
   14994:	bls	14ca8 <__assert_fail@plt+0x37f0>
   14998:	mul	r3, r6, r3
   1499c:	umull	r0, r1, r6, r2
   149a0:	mla	r2, r2, r7, r3
   149a4:	add	r1, r2, r1
   149a8:	ldrd	r2, [sp, #168]	; 0xa8
   149ac:	cmp	r3, r1
   149b0:	cmpeq	r2, r0
   149b4:	bls	14cb0 <__assert_fail@plt+0x37f8>
   149b8:	mul	r1, r6, r1
   149bc:	umull	r2, r3, r6, r0
   149c0:	mla	r0, r0, r7, r1
   149c4:	add	r3, r0, r3
   149c8:	ldrd	r0, [sp, #168]	; 0xa8
   149cc:	cmp	r1, r3
   149d0:	cmpeq	r0, r2
   149d4:	bls	14cb8 <__assert_fail@plt+0x3800>
   149d8:	mul	r3, r6, r3
   149dc:	umull	r0, r1, r6, r2
   149e0:	mla	r2, r2, r7, r3
   149e4:	add	r1, r2, r1
   149e8:	ldrd	r2, [sp, #168]	; 0xa8
   149ec:	cmp	r3, r1
   149f0:	cmpeq	r2, r0
   149f4:	bls	14cc0 <__assert_fail@plt+0x3808>
   149f8:	mul	r1, r6, r1
   149fc:	umull	r2, r3, r6, r0
   14a00:	mla	r0, r0, r7, r1
   14a04:	add	r3, r0, r3
   14a08:	ldrd	r0, [sp, #168]	; 0xa8
   14a0c:	cmp	r1, r3
   14a10:	cmpeq	r0, r2
   14a14:	bls	14cc8 <__assert_fail@plt+0x3810>
   14a18:	mul	r3, r6, r3
   14a1c:	umull	r0, r1, r6, r2
   14a20:	mla	r2, r2, r7, r3
   14a24:	add	r1, r2, r1
   14a28:	ldrd	r2, [sp, #168]	; 0xa8
   14a2c:	cmp	r3, r1
   14a30:	cmpeq	r2, r0
   14a34:	movhi	r9, #8
   14a38:	movls	r9, #7
   14a3c:	b	14744 <__assert_fail@plt+0x328c>
   14a40:	andeq	r0, r0, r0
   14a44:	mvnsmi	r0, #0
   14a48:	andeq	r0, r0, r0
   14a4c:	eormi	r0, r4, r0
   14a50:	andeq	sp, r1, r4, lsl #30
   14a54:	andeq	sp, r1, r0, ror #29
   14a58:	andeq	sp, r1, ip, lsl #30
   14a5c:	ldr	r3, [sp, #8]
   14a60:	mvn	r9, #0
   14a64:	str	r3, [sp, #24]
   14a68:	and	r3, r4, #3
   14a6c:	cmp	r3, #1
   14a70:	beq	14ad4 <__assert_fail@plt+0x361c>
   14a74:	and	r3, r4, #3
   14a78:	cmp	r3, #0
   14a7c:	bne	14afc <__assert_fail@plt+0x3644>
   14a80:	add	r7, r6, r8
   14a84:	cmp	r7, #0
   14a88:	ble	14afc <__assert_fail@plt+0x3644>
   14a8c:	adds	sl, sl, #1
   14a90:	adc	fp, fp, #0
   14a94:	ands	r3, r4, #16
   14a98:	cmp	r3, #0
   14a9c:	beq	14afc <__assert_fail@plt+0x3644>
   14aa0:	ldrd	r2, [sp, #16]
   14aa4:	cmp	fp, r3
   14aa8:	cmpeq	sl, r2
   14aac:	bne	14afc <__assert_fail@plt+0x3644>
   14ab0:	tst	r4, #8
   14ab4:	add	r9, r9, #1
   14ab8:	beq	14d20 <__assert_fail@plt+0x3868>
   14abc:	ldr	r2, [sp, #24]
   14ac0:	mov	r3, #49	; 0x31
   14ac4:	sub	r8, r2, #1
   14ac8:	strb	r3, [r2, #-1]
   14acc:	mov	r7, r2
   14ad0:	b	1472c <__assert_fail@plt+0x3274>
   14ad4:	and	r2, sl, #1
   14ad8:	adds	r2, r2, r8
   14adc:	mov	r3, #0
   14ae0:	adc	r3, r3, r8, asr #31
   14ae4:	orr	r7, r2, r3
   14ae8:	cmp	r7, #0
   14aec:	moveq	r7, r6
   14af0:	addne	r7, r6, #1
   14af4:	cmp	r7, #5
   14af8:	bgt	14a8c <__assert_fail@plt+0x35d4>
   14afc:	ldr	r8, [sp, #24]
   14b00:	mov	r6, #10
   14b04:	mov	r7, #0
   14b08:	mov	r0, sl
   14b0c:	mov	r1, fp
   14b10:	mov	r2, r6
   14b14:	mov	r3, r7
   14b18:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14b1c:	mov	r0, sl
   14b20:	mov	r1, fp
   14b24:	mov	r3, r7
   14b28:	add	r2, r2, #48	; 0x30
   14b2c:	strb	r2, [r8, #-1]!
   14b30:	mov	r2, r6
   14b34:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14b38:	mov	sl, r0
   14b3c:	mov	fp, r1
   14b40:	orrs	r3, sl, fp
   14b44:	bne	14b08 <__assert_fail@plt+0x3650>
   14b48:	ldr	r7, [sp, #24]
   14b4c:	b	1472c <__assert_fail@plt+0x3274>
   14b50:	movcc	r8, #3
   14b54:	movcs	r8, #2
   14b58:	b	14354 <__assert_fail@plt+0x2e9c>
   14b5c:	ldr	r3, [sp, #8]
   14b60:	mov	r9, #0
   14b64:	str	r3, [sp, #24]
   14b68:	b	14a68 <__assert_fail@plt+0x35b0>
   14b6c:	bl	1ccac <__assert_fail@plt+0xb7f4>
   14b70:	vmov	d7, r0, r1
   14b74:	vcmp.f64	d7, d9
   14b78:	vmrs	APSR_nzcv, fpscr
   14b7c:	movne	r0, #1
   14b80:	moveq	r0, #0
   14b84:	b	14220 <__assert_fail@plt+0x2d68>
   14b88:	vldr	d7, [pc, #480]	; 14d70 <__assert_fail@plt+0x38b8>
   14b8c:	vmul.f64	d9, d9, d7
   14b90:	b	14238 <__assert_fail@plt+0x2d80>
   14b94:	mov	r2, r3
   14b98:	add	r3, r8, r9
   14b9c:	cmp	r2, r3
   14ba0:	movcs	r8, #2
   14ba4:	movcc	r8, #3
   14ba8:	b	143d8 <__assert_fail@plt+0x2f20>
   14bac:	mov	r2, r3
   14bb0:	add	r3, r8, r9
   14bb4:	cmp	r2, r3
   14bb8:	movcs	r8, #2
   14bbc:	movcc	r8, #3
   14bc0:	b	14454 <__assert_fail@plt+0x2f9c>
   14bc4:	ldr	r3, [sp, #28]
   14bc8:	add	r7, r8, r7
   14bcc:	cmp	r3, r7
   14bd0:	movcs	r8, #2
   14bd4:	movcc	r8, #3
   14bd8:	b	144d0 <__assert_fail@plt+0x3018>
   14bdc:	ldr	r3, [sp, #28]
   14be0:	add	r7, r8, r7
   14be4:	cmp	r3, r7
   14be8:	movcs	r8, #2
   14bec:	movcc	r8, #3
   14bf0:	b	1454c <__assert_fail@plt+0x3094>
   14bf4:	ldr	r3, [sp, #28]
   14bf8:	add	r7, r8, r7
   14bfc:	cmp	r3, r7
   14c00:	movcs	r8, #2
   14c04:	movcc	r8, #3
   14c08:	b	145c8 <__assert_fail@plt+0x3110>
   14c0c:	add	r7, r8, r7
   14c10:	cmp	r9, r7
   14c14:	movcs	r8, #2
   14c18:	movcc	r8, #3
   14c1c:	b	14640 <__assert_fail@plt+0x3188>
   14c20:	vmov.f64	d6, d7
   14c24:	mov	r9, #1
   14c28:	b	14134 <__assert_fail@plt+0x2c7c>
   14c2c:	mov	r9, #2
   14c30:	b	14134 <__assert_fail@plt+0x2c7c>
   14c34:	vmov.f64	d6, d5
   14c38:	mov	r9, #3
   14c3c:	b	14134 <__assert_fail@plt+0x2c7c>
   14c40:	mov	r9, #4
   14c44:	b	14134 <__assert_fail@plt+0x2c7c>
   14c48:	vmov.f64	d6, d5
   14c4c:	mov	r9, #5
   14c50:	b	14134 <__assert_fail@plt+0x2c7c>
   14c54:	mov	r9, #6
   14c58:	b	14134 <__assert_fail@plt+0x2c7c>
   14c5c:	vmov.f64	d6, d5
   14c60:	mov	r9, #7
   14c64:	b	14134 <__assert_fail@plt+0x2c7c>
   14c68:	cmp	r6, #0
   14c6c:	bne	14684 <__assert_fail@plt+0x31cc>
   14c70:	tst	r4, #8
   14c74:	bne	14cd0 <__assert_fail@plt+0x3818>
   14c78:	mov	r3, #48	; 0x30
   14c7c:	b	1468c <__assert_fail@plt+0x31d4>
   14c80:	mov	r9, #0
   14c84:	b	14744 <__assert_fail@plt+0x328c>
   14c88:	mov	r9, #1
   14c8c:	b	14744 <__assert_fail@plt+0x328c>
   14c90:	and	r3, r6, #1
   14c94:	add	r3, r3, r8
   14c98:	cmp	r3, #2
   14c9c:	movle	r3, #0
   14ca0:	movgt	r3, #1
   14ca4:	b	14670 <__assert_fail@plt+0x31b8>
   14ca8:	mov	r9, #2
   14cac:	b	14744 <__assert_fail@plt+0x328c>
   14cb0:	mov	r9, #3
   14cb4:	b	14744 <__assert_fail@plt+0x328c>
   14cb8:	mov	r9, #4
   14cbc:	b	14744 <__assert_fail@plt+0x328c>
   14cc0:	mov	r9, #5
   14cc4:	b	14744 <__assert_fail@plt+0x328c>
   14cc8:	mov	r9, #6
   14ccc:	b	14744 <__assert_fail@plt+0x328c>
   14cd0:	ldr	r3, [sp, #8]
   14cd4:	mov	r6, #0
   14cd8:	str	r3, [sp, #24]
   14cdc:	b	14a68 <__assert_fail@plt+0x35b0>
   14ce0:	adds	sl, sl, #1
   14ce4:	adc	fp, fp, #0
   14ce8:	cmp	fp, #0
   14cec:	cmpeq	sl, #10
   14cf0:	mov	r8, #0
   14cf4:	moveq	r6, r8
   14cf8:	bne	14c70 <__assert_fail@plt+0x37b8>
   14cfc:	ldr	r3, [sp, #8]
   14d00:	str	r3, [sp, #24]
   14d04:	b	14a68 <__assert_fail@plt+0x35b0>
   14d08:	mov	r9, #1
   14d0c:	b	14644 <__assert_fail@plt+0x318c>
   14d10:	mov	r9, #2
   14d14:	b	14644 <__assert_fail@plt+0x318c>
   14d18:	mov	r9, #3
   14d1c:	b	14644 <__assert_fail@plt+0x318c>
   14d20:	ldr	ip, [sp, #48]	; 0x30
   14d24:	ldr	r1, [sp, #24]
   14d28:	mvn	r3, ip
   14d2c:	add	r3, r1, r3
   14d30:	mov	r2, #48	; 0x30
   14d34:	strb	r2, [r1, #-1]
   14d38:	mov	r0, r3
   14d3c:	ldr	r1, [sp, #52]	; 0x34
   14d40:	mov	r2, ip
   14d44:	str	r3, [sp, #24]
   14d48:	bl	11194 <memcpy@plt>
   14d4c:	b	14abc <__assert_fail@plt+0x3604>
   14d50:	mov	r9, #4
   14d54:	b	14644 <__assert_fail@plt+0x318c>
   14d58:	mov	r9, #5
   14d5c:	b	14644 <__assert_fail@plt+0x318c>
   14d60:	cmp	r3, #0
   14d64:	ldrne	r2, [sp, #8]
   14d68:	bne	147c0 <__assert_fail@plt+0x3308>
   14d6c:	b	147d0 <__assert_fail@plt+0x3318>
   14d70:	andeq	r0, r0, r0
   14d74:	eormi	r0, r4, r0
   14d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d7c:	subs	r4, r0, #0
   14d80:	sub	sp, sp, #20
   14d84:	mov	r8, r1
   14d88:	mov	r7, r2
   14d8c:	beq	14e9c <__assert_fail@plt+0x39e4>
   14d90:	ldrb	r3, [r4]
   14d94:	ldr	r5, [pc, #384]	; 14f1c <__assert_fail@plt+0x3a64>
   14d98:	cmp	r3, #39	; 0x27
   14d9c:	addeq	r4, r4, #1
   14da0:	mov	r3, #4
   14da4:	add	r2, r5, #12
   14da8:	add	r1, r5, #20
   14dac:	mov	r0, r4
   14db0:	moveq	r9, #164	; 0xa4
   14db4:	moveq	fp, #420	; 0x1a4
   14db8:	moveq	sl, #388	; 0x184
   14dbc:	moveq	r6, #4
   14dc0:	movne	r9, #160	; 0xa0
   14dc4:	movne	fp, #416	; 0x1a0
   14dc8:	movne	sl, #384	; 0x180
   14dcc:	movne	r6, #0
   14dd0:	bl	13410 <__assert_fail@plt+0x1f58>
   14dd4:	cmp	r0, #0
   14dd8:	blt	14e38 <__assert_fail@plt+0x3980>
   14ddc:	add	r5, r5, r0, lsl #2
   14de0:	mov	r1, #0
   14de4:	ldr	ip, [r5, #12]
   14de8:	mov	r0, #1
   14dec:	mov	r2, r0
   14df0:	orr	r6, r6, ip
   14df4:	mov	r3, r1
   14df8:	str	r0, [r7]
   14dfc:	str	r1, [r7, #4]
   14e00:	mov	r0, #0
   14e04:	str	r6, [r8]
   14e08:	orrs	r3, r2, r3
   14e0c:	bne	14e30 <__assert_fail@plt+0x3978>
   14e10:	ldr	r0, [pc, #264]	; 14f20 <__assert_fail@plt+0x3a68>
   14e14:	bl	112b4 <getenv@plt>
   14e18:	mov	r3, #0
   14e1c:	cmp	r0, #0
   14e20:	movne	r2, #512	; 0x200
   14e24:	moveq	r2, #1024	; 0x400
   14e28:	mov	r0, #4
   14e2c:	strd	r2, [r7]
   14e30:	add	sp, sp, #20
   14e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e38:	ldr	r2, [pc, #228]	; 14f24 <__assert_fail@plt+0x3a6c>
   14e3c:	mov	r3, r7
   14e40:	str	r2, [sp]
   14e44:	add	r1, sp, #12
   14e48:	mov	r2, #0
   14e4c:	mov	r0, r4
   14e50:	bl	1b1f8 <__assert_fail@plt+0x9d40>
   14e54:	cmp	r0, #0
   14e58:	bne	14ee0 <__assert_fail@plt+0x3a28>
   14e5c:	ldrb	r3, [r4]
   14e60:	sub	r3, r3, #48	; 0x30
   14e64:	cmp	r3, #9
   14e68:	bls	14e94 <__assert_fail@plt+0x39dc>
   14e6c:	ldr	r2, [sp, #12]
   14e70:	cmp	r4, r2
   14e74:	bne	14e84 <__assert_fail@plt+0x39cc>
   14e78:	b	14ef0 <__assert_fail@plt+0x3a38>
   14e7c:	cmp	r2, r4
   14e80:	beq	14ef0 <__assert_fail@plt+0x3a38>
   14e84:	ldrb	r3, [r4, #1]!
   14e88:	sub	r3, r3, #48	; 0x30
   14e8c:	cmp	r3, #9
   14e90:	bhi	14e7c <__assert_fail@plt+0x39c4>
   14e94:	ldrd	r2, [r7]
   14e98:	b	14e00 <__assert_fail@plt+0x3948>
   14e9c:	ldr	r0, [pc, #132]	; 14f28 <__assert_fail@plt+0x3a70>
   14ea0:	bl	112b4 <getenv@plt>
   14ea4:	subs	r4, r0, #0
   14ea8:	bne	14d90 <__assert_fail@plt+0x38d8>
   14eac:	ldr	r0, [pc, #120]	; 14f2c <__assert_fail@plt+0x3a74>
   14eb0:	bl	112b4 <getenv@plt>
   14eb4:	subs	r4, r0, #0
   14eb8:	bne	14d90 <__assert_fail@plt+0x38d8>
   14ebc:	ldr	r0, [pc, #92]	; 14f20 <__assert_fail@plt+0x3a68>
   14ec0:	bl	112b4 <getenv@plt>
   14ec4:	mov	r3, #0
   14ec8:	mov	r6, #0
   14ecc:	cmp	r0, #0
   14ed0:	movne	r2, #512	; 0x200
   14ed4:	moveq	r2, #1024	; 0x400
   14ed8:	strd	r2, [r7]
   14edc:	b	14e00 <__assert_fail@plt+0x3948>
   14ee0:	mov	r3, #0
   14ee4:	str	r3, [r8]
   14ee8:	ldrd	r2, [r7]
   14eec:	b	14e08 <__assert_fail@plt+0x3950>
   14ef0:	ldrb	r3, [r2, #-1]
   14ef4:	cmp	r3, #66	; 0x42
   14ef8:	beq	14f04 <__assert_fail@plt+0x3a4c>
   14efc:	mov	r6, r9
   14f00:	b	14e94 <__assert_fail@plt+0x39dc>
   14f04:	ldrb	r3, [r2, #-2]
   14f08:	cmp	r3, #105	; 0x69
   14f0c:	movne	r6, sl
   14f10:	bne	14e94 <__assert_fail@plt+0x39dc>
   14f14:	mov	r9, fp
   14f18:	b	14efc <__assert_fail@plt+0x3a44>
   14f1c:	andeq	sp, r1, r0, ror #29
   14f20:	andeq	sp, r1, ip, lsr #30
   14f24:	andeq	sp, r1, ip, lsr pc
   14f28:	andeq	sp, r1, r4, lsl pc
   14f2c:	andeq	sp, r1, r0, lsr #30
   14f30:	push	{r4, r5, r6, r8, r9, lr}
   14f34:	mov	r4, r0
   14f38:	mov	r5, r1
   14f3c:	add	r6, r2, #20
   14f40:	mov	r8, #10
   14f44:	mov	r9, #0
   14f48:	mov	r3, #0
   14f4c:	strb	r3, [r2, #20]
   14f50:	mov	r0, r4
   14f54:	mov	r1, r5
   14f58:	mov	r2, r8
   14f5c:	mov	r3, r9
   14f60:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14f64:	mov	r0, r4
   14f68:	mov	r1, r5
   14f6c:	mov	r3, r9
   14f70:	add	r2, r2, #48	; 0x30
   14f74:	strb	r2, [r6, #-1]!
   14f78:	mov	r2, r8
   14f7c:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   14f80:	mov	r4, r0
   14f84:	mov	r5, r1
   14f88:	orrs	r3, r4, r5
   14f8c:	bne	14f50 <__assert_fail@plt+0x3a98>
   14f90:	mov	r0, r6
   14f94:	pop	{r4, r5, r6, r8, r9, pc}
   14f98:	push	{r4, r5, r6, lr}
   14f9c:	subs	r4, r0, #0
   14fa0:	beq	15014 <__assert_fail@plt+0x3b5c>
   14fa4:	mov	r1, #47	; 0x2f
   14fa8:	bl	113f8 <strrchr@plt>
   14fac:	subs	r5, r0, #0
   14fb0:	beq	15000 <__assert_fail@plt+0x3b48>
   14fb4:	add	r6, r5, #1
   14fb8:	sub	r3, r6, r4
   14fbc:	cmp	r3, #6
   14fc0:	ble	15000 <__assert_fail@plt+0x3b48>
   14fc4:	mov	r2, #7
   14fc8:	ldr	r1, [pc, #96]	; 15030 <__assert_fail@plt+0x3b78>
   14fcc:	sub	r0, r5, #6
   14fd0:	bl	11488 <strncmp@plt>
   14fd4:	cmp	r0, #0
   14fd8:	bne	15000 <__assert_fail@plt+0x3b48>
   14fdc:	mov	r2, #3
   14fe0:	ldr	r1, [pc, #76]	; 15034 <__assert_fail@plt+0x3b7c>
   14fe4:	mov	r0, r6
   14fe8:	bl	11488 <strncmp@plt>
   14fec:	cmp	r0, #0
   14ff0:	movne	r4, r6
   14ff4:	ldreq	r3, [pc, #60]	; 15038 <__assert_fail@plt+0x3b80>
   14ff8:	addeq	r4, r5, #4
   14ffc:	streq	r4, [r3]
   15000:	ldr	r2, [pc, #52]	; 1503c <__assert_fail@plt+0x3b84>
   15004:	ldr	r3, [pc, #52]	; 15040 <__assert_fail@plt+0x3b88>
   15008:	str	r4, [r2]
   1500c:	str	r4, [r3]
   15010:	pop	{r4, r5, r6, pc}
   15014:	ldr	r3, [pc, #40]	; 15044 <__assert_fail@plt+0x3b8c>
   15018:	mov	r2, #55	; 0x37
   1501c:	mov	r1, #1
   15020:	ldr	r3, [r3]
   15024:	ldr	r0, [pc, #28]	; 15048 <__assert_fail@plt+0x3b90>
   15028:	bl	11248 <fwrite@plt>
   1502c:	bl	114a0 <abort@plt>
   15030:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   15034:	andeq	sp, r1, r4, lsr #31
   15038:	andeq	pc, r2, r0, lsr #3
   1503c:	ldrdeq	pc, [r2], -r0
   15040:	andeq	pc, r2, r4, lsr #3
   15044:			; <UNDEFINED> instruction: 0x0002f1b0
   15048:	andeq	sp, r1, r4, ror #30
   1504c:	push	{r4, r5, r6, lr}
   15050:	mov	r4, r0
   15054:	mov	r5, r1
   15058:	bl	1c348 <__assert_fail@plt+0xae90>
   1505c:	ldrb	r3, [r0]
   15060:	bic	r3, r3, #32
   15064:	cmp	r3, #85	; 0x55
   15068:	bne	150c8 <__assert_fail@plt+0x3c10>
   1506c:	ldrb	r3, [r0, #1]
   15070:	bic	r3, r3, #32
   15074:	cmp	r3, #84	; 0x54
   15078:	bne	15104 <__assert_fail@plt+0x3c4c>
   1507c:	ldrb	r3, [r0, #2]
   15080:	bic	r3, r3, #32
   15084:	cmp	r3, #70	; 0x46
   15088:	bne	15104 <__assert_fail@plt+0x3c4c>
   1508c:	ldrb	r3, [r0, #3]
   15090:	cmp	r3, #45	; 0x2d
   15094:	bne	15104 <__assert_fail@plt+0x3c4c>
   15098:	ldrb	r3, [r0, #4]
   1509c:	cmp	r3, #56	; 0x38
   150a0:	bne	15104 <__assert_fail@plt+0x3c4c>
   150a4:	ldrb	r3, [r0, #5]
   150a8:	cmp	r3, #0
   150ac:	bne	15104 <__assert_fail@plt+0x3c4c>
   150b0:	ldrb	r2, [r4]
   150b4:	ldr	r3, [pc, #152]	; 15154 <__assert_fail@plt+0x3c9c>
   150b8:	ldr	r0, [pc, #152]	; 15158 <__assert_fail@plt+0x3ca0>
   150bc:	cmp	r2, #96	; 0x60
   150c0:	movne	r0, r3
   150c4:	pop	{r4, r5, r6, pc}
   150c8:	cmp	r3, #71	; 0x47
   150cc:	bne	15104 <__assert_fail@plt+0x3c4c>
   150d0:	ldrb	r3, [r0, #1]
   150d4:	bic	r3, r3, #32
   150d8:	cmp	r3, #66	; 0x42
   150dc:	bne	15104 <__assert_fail@plt+0x3c4c>
   150e0:	ldrb	r3, [r0, #2]
   150e4:	cmp	r3, #49	; 0x31
   150e8:	bne	15104 <__assert_fail@plt+0x3c4c>
   150ec:	ldrb	r3, [r0, #3]
   150f0:	cmp	r3, #56	; 0x38
   150f4:	bne	15104 <__assert_fail@plt+0x3c4c>
   150f8:	ldrb	r3, [r0, #4]
   150fc:	cmp	r3, #48	; 0x30
   15100:	beq	15118 <__assert_fail@plt+0x3c60>
   15104:	ldr	r3, [pc, #80]	; 1515c <__assert_fail@plt+0x3ca4>
   15108:	cmp	r5, #9
   1510c:	ldr	r0, [pc, #76]	; 15160 <__assert_fail@plt+0x3ca8>
   15110:	movne	r0, r3
   15114:	pop	{r4, r5, r6, pc}
   15118:	ldrb	r3, [r0, #5]
   1511c:	cmp	r3, #51	; 0x33
   15120:	bne	15104 <__assert_fail@plt+0x3c4c>
   15124:	ldrb	r3, [r0, #6]
   15128:	cmp	r3, #48	; 0x30
   1512c:	bne	15104 <__assert_fail@plt+0x3c4c>
   15130:	ldrb	r3, [r0, #7]
   15134:	cmp	r3, #0
   15138:	bne	15104 <__assert_fail@plt+0x3c4c>
   1513c:	ldrb	r2, [r4]
   15140:	ldr	r3, [pc, #28]	; 15164 <__assert_fail@plt+0x3cac>
   15144:	ldr	r0, [pc, #28]	; 15168 <__assert_fail@plt+0x3cb0>
   15148:	cmp	r2, #96	; 0x60
   1514c:	movne	r0, r3
   15150:	pop	{r4, r5, r6, pc}
   15154:	andeq	lr, r1, r0
   15158:	strdeq	sp, [r1], -ip
   1515c:	andeq	lr, r1, r0, lsl r0
   15160:	andeq	lr, r1, ip
   15164:	andeq	lr, r1, r8
   15168:	andeq	lr, r1, r4
   1516c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15170:	sub	sp, sp, #140	; 0x8c
   15174:	mov	r9, r1
   15178:	str	r3, [sp, #24]
   1517c:	mov	r3, #1
   15180:	mov	sl, r0
   15184:	str	r2, [sp, #44]	; 0x2c
   15188:	str	r3, [sp, #28]
   1518c:	bl	1126c <__ctype_get_mb_cur_max@plt>
   15190:	ldr	r3, [sp, #180]	; 0xb4
   15194:	mov	fp, r9
   15198:	mov	r9, sl
   1519c:	lsr	r3, r3, #1
   151a0:	and	r3, r3, #1
   151a4:	str	r3, [sp, #40]	; 0x28
   151a8:	ldr	r3, [sp, #180]	; 0xb4
   151ac:	mov	r2, #0
   151b0:	and	r3, r3, #4
   151b4:	str	r3, [sp, #100]	; 0x64
   151b8:	ldr	r3, [sp, #180]	; 0xb4
   151bc:	str	r2, [sp, #76]	; 0x4c
   151c0:	and	r3, r3, #1
   151c4:	str	r3, [sp, #96]	; 0x60
   151c8:	str	r2, [sp, #36]	; 0x24
   151cc:	str	r2, [sp, #56]	; 0x38
   151d0:	str	r2, [sp, #68]	; 0x44
   151d4:	str	r2, [sp, #72]	; 0x48
   151d8:	str	r2, [sp, #84]	; 0x54
   151dc:	str	r0, [sp, #80]	; 0x50
   151e0:	ldr	r3, [sp, #176]	; 0xb0
   151e4:	cmp	r3, #10
   151e8:	ldrls	pc, [pc, r3, lsl #2]
   151ec:	b	163c4 <__assert_fail@plt+0x4f0c>
   151f0:	andeq	r5, r1, ip, lsl r2
   151f4:	andeq	r5, r1, ip, lsr r5
   151f8:	muleq	r1, r4, r6
   151fc:	andeq	r5, r1, r0, ror r5
   15200:	andeq	r5, r1, r8, ror #13
   15204:	andeq	r5, r1, r8, asr #13
   15208:	muleq	r1, r0, r5
   1520c:			; <UNDEFINED> instruction: 0x000155b4
   15210:	ldrdeq	r5, [r1], -ip
   15214:	ldrdeq	r5, [r1], -ip
   15218:	ldrdeq	r5, [r1], -ip
   1521c:	mov	r3, #0
   15220:	ldr	r1, [sp, #56]	; 0x38
   15224:	ldr	r2, [sp, #176]	; 0xb0
   15228:	ldr	lr, [sp, #176]	; 0xb0
   1522c:	mov	r8, r3
   15230:	mov	ip, r3
   15234:	str	r3, [sp, #40]	; 0x28
   15238:	mov	r3, r1
   1523c:	cmp	r2, #2
   15240:	moveq	r3, #0
   15244:	andne	r3, r3, #1
   15248:	mov	r0, r3
   1524c:	str	r3, [sp, #92]	; 0x5c
   15250:	ldr	r3, [sp, #68]	; 0x44
   15254:	sub	lr, lr, #2
   15258:	adds	r2, r3, #0
   1525c:	movne	r2, #1
   15260:	and	r3, r1, ip
   15264:	and	r3, r2, r3
   15268:	clz	lr, lr
   1526c:	str	r3, [sp, #88]	; 0x58
   15270:	lsr	lr, lr, #5
   15274:	mov	r3, ip
   15278:	and	r3, r3, lr
   1527c:	mov	sl, #0
   15280:	and	r0, r2, r0
   15284:	str	r3, [sp, #64]	; 0x40
   15288:	eor	r3, r1, #1
   1528c:	str	lr, [sp, #52]	; 0x34
   15290:	str	r0, [sp, #48]	; 0x30
   15294:	str	r3, [sp, #60]	; 0x3c
   15298:	ldr	r3, [sp, #24]
   1529c:	cmn	r3, #1
   152a0:	beq	157d0 <__assert_fail@plt+0x4318>
   152a4:	subs	r7, r3, sl
   152a8:	movne	r7, #1
   152ac:	cmp	r7, #0
   152b0:	beq	157e8 <__assert_fail@plt+0x4330>
   152b4:	ldr	r3, [sp, #48]	; 0x30
   152b8:	cmp	r3, #0
   152bc:	beq	15b54 <__assert_fail@plt+0x469c>
   152c0:	ldr	r2, [sp, #68]	; 0x44
   152c4:	ldr	r1, [sp, #24]
   152c8:	cmp	r2, #1
   152cc:	mov	r3, r2
   152d0:	movls	r3, #0
   152d4:	movhi	r3, #1
   152d8:	cmn	r1, #1
   152dc:	movne	r3, #0
   152e0:	cmp	r3, #0
   152e4:	add	r4, sl, r2
   152e8:	beq	152f8 <__assert_fail@plt+0x3e40>
   152ec:	ldr	r0, [sp, #44]	; 0x2c
   152f0:	bl	11314 <strlen@plt>
   152f4:	str	r0, [sp, #24]
   152f8:	ldr	r3, [sp, #24]
   152fc:	cmp	r3, r4
   15300:	ldr	r3, [sp, #44]	; 0x2c
   15304:	add	r5, r3, sl
   15308:	bcc	15b5c <__assert_fail@plt+0x46a4>
   1530c:	mov	r0, r5
   15310:	ldr	r2, [sp, #68]	; 0x44
   15314:	ldr	r1, [sp, #72]	; 0x48
   15318:	bl	111d0 <memcmp@plt>
   1531c:	cmp	r0, #0
   15320:	bne	15b5c <__assert_fail@plt+0x46a4>
   15324:	ldr	r3, [sp, #40]	; 0x28
   15328:	cmp	r3, #0
   1532c:	bne	16518 <__assert_fail@plt+0x5060>
   15330:	ldrb	r4, [r5]
   15334:	cmp	r4, #126	; 0x7e
   15338:	ldrls	pc, [pc, r4, lsl #2]
   1533c:	b	16454 <__assert_fail@plt+0x4f9c>
   15340:	andeq	r5, r1, r4, lsl sl
   15344:	andeq	r6, r1, r4, asr r4
   15348:	andeq	r6, r1, r4, asr r4
   1534c:	andeq	r6, r1, r4, asr r4
   15350:	andeq	r6, r1, r4, asr r4
   15354:	andeq	r6, r1, r4, asr r4
   15358:	andeq	r6, r1, r4, asr r4
   1535c:	andeq	r5, r1, r0, lsl #20
   15360:	andeq	r5, r1, ip, ror #19
   15364:	andeq	r5, r1, r8, asr #19
   15368:	andeq	r5, r1, r8, lsr #19
   1536c:	ldrdeq	r5, [r1], -r8
   15370:	andeq	r5, r1, r0, lsl r9
   15374:	andeq	r5, r1, r4, asr #22
   15378:	andeq	r6, r1, r4, asr r4
   1537c:	andeq	r6, r1, r4, asr r4
   15380:	andeq	r6, r1, r4, asr r4
   15384:	andeq	r6, r1, r4, asr r4
   15388:	andeq	r6, r1, r4, asr r4
   1538c:	andeq	r6, r1, r4, asr r4
   15390:	andeq	r6, r1, r4, asr r4
   15394:	andeq	r6, r1, r4, asr r4
   15398:	andeq	r6, r1, r4, asr r4
   1539c:	andeq	r6, r1, r4, asr r4
   153a0:	andeq	r6, r1, r4, asr r4
   153a4:	andeq	r6, r1, r4, asr r4
   153a8:	andeq	r6, r1, r4, asr r4
   153ac:	andeq	r6, r1, r4, asr r4
   153b0:	andeq	r6, r1, r4, asr r4
   153b4:	andeq	r6, r1, r4, asr r4
   153b8:	andeq	r6, r1, r4, asr r4
   153bc:	andeq	r6, r1, r4, asr r4
   153c0:	andeq	r5, r1, r4, lsr fp
   153c4:	andeq	r5, r1, r4, lsl fp
   153c8:	andeq	r5, r1, r4, lsl fp
   153cc:	strdeq	r5, [r1], -r4
   153d0:	andeq	r5, r1, r4, lsl fp
   153d4:	andeq	r5, r1, r0, lsl #18
   153d8:	andeq	r5, r1, r4, lsl fp
   153dc:	ldrdeq	r5, [r1], -ip
   153e0:	andeq	r5, r1, r4, lsl fp
   153e4:	andeq	r5, r1, r4, lsl fp
   153e8:	andeq	r5, r1, r4, lsl fp
   153ec:	andeq	r5, r1, r0, lsl #18
   153f0:	andeq	r5, r1, r0, lsl #18
   153f4:	andeq	r5, r1, r0, lsl #18
   153f8:	andeq	r5, r1, r0, lsl #18
   153fc:	andeq	r5, r1, r0, lsl #18
   15400:	andeq	r5, r1, r0, lsl #18
   15404:	andeq	r5, r1, r0, lsl #18
   15408:	andeq	r5, r1, r0, lsl #18
   1540c:	andeq	r5, r1, r0, lsl #18
   15410:	andeq	r5, r1, r0, lsl #18
   15414:	andeq	r5, r1, r0, lsl #18
   15418:	andeq	r5, r1, r0, lsl #18
   1541c:	andeq	r5, r1, r0, lsl #18
   15420:	andeq	r5, r1, r0, lsl #18
   15424:	andeq	r5, r1, r0, lsl #18
   15428:	andeq	r5, r1, r0, lsl #18
   1542c:	andeq	r5, r1, r4, lsl fp
   15430:	andeq	r5, r1, r4, lsl fp
   15434:	andeq	r5, r1, r4, lsl fp
   15438:	andeq	r5, r1, r4, lsl fp
   1543c:	andeq	r5, r1, ip, lsl #17
   15440:	andeq	r6, r1, r4, asr r4
   15444:	andeq	r5, r1, r0, lsl #18
   15448:	andeq	r5, r1, r0, lsl #18
   1544c:	andeq	r5, r1, r0, lsl #18
   15450:	andeq	r5, r1, r0, lsl #18
   15454:	andeq	r5, r1, r0, lsl #18
   15458:	andeq	r5, r1, r0, lsl #18
   1545c:	andeq	r5, r1, r0, lsl #18
   15460:	andeq	r5, r1, r0, lsl #18
   15464:	andeq	r5, r1, r0, lsl #18
   15468:	andeq	r5, r1, r0, lsl #18
   1546c:	andeq	r5, r1, r0, lsl #18
   15470:	andeq	r5, r1, r0, lsl #18
   15474:	andeq	r5, r1, r0, lsl #18
   15478:	andeq	r5, r1, r0, lsl #18
   1547c:	andeq	r5, r1, r0, lsl #18
   15480:	andeq	r5, r1, r0, lsl #18
   15484:	andeq	r5, r1, r0, lsl #18
   15488:	andeq	r5, r1, r0, lsl #18
   1548c:	andeq	r5, r1, r0, lsl #18
   15490:	andeq	r5, r1, r0, lsl #18
   15494:	andeq	r5, r1, r0, lsl #18
   15498:	andeq	r5, r1, r0, lsl #18
   1549c:	andeq	r5, r1, r0, lsl #18
   154a0:	andeq	r5, r1, r0, lsl #18
   154a4:	andeq	r5, r1, r0, lsl #18
   154a8:	andeq	r5, r1, r0, lsl #18
   154ac:	andeq	r5, r1, r4, lsl fp
   154b0:	andeq	r5, r1, r8, asr r8
   154b4:	andeq	r5, r1, r0, lsl #18
   154b8:	andeq	r5, r1, r4, lsl fp
   154bc:	andeq	r5, r1, r0, lsl #18
   154c0:	andeq	r5, r1, r4, lsl fp
   154c4:	andeq	r5, r1, r0, lsl #18
   154c8:	andeq	r5, r1, r0, lsl #18
   154cc:	andeq	r5, r1, r0, lsl #18
   154d0:	andeq	r5, r1, r0, lsl #18
   154d4:	andeq	r5, r1, r0, lsl #18
   154d8:	andeq	r5, r1, r0, lsl #18
   154dc:	andeq	r5, r1, r0, lsl #18
   154e0:	andeq	r5, r1, r0, lsl #18
   154e4:	andeq	r5, r1, r0, lsl #18
   154e8:	andeq	r5, r1, r0, lsl #18
   154ec:	andeq	r5, r1, r0, lsl #18
   154f0:	andeq	r5, r1, r0, lsl #18
   154f4:	andeq	r5, r1, r0, lsl #18
   154f8:	andeq	r5, r1, r0, lsl #18
   154fc:	andeq	r5, r1, r0, lsl #18
   15500:	andeq	r5, r1, r0, lsl #18
   15504:	andeq	r5, r1, r0, lsl #18
   15508:	andeq	r5, r1, r0, lsl #18
   1550c:	andeq	r5, r1, r0, lsl #18
   15510:	andeq	r5, r1, r0, lsl #18
   15514:	andeq	r5, r1, r0, lsl #18
   15518:	andeq	r5, r1, r0, lsl #18
   1551c:	andeq	r5, r1, r0, lsl #18
   15520:	andeq	r5, r1, r0, lsl #18
   15524:	andeq	r5, r1, r0, lsl #18
   15528:	andeq	r5, r1, r0, lsl #18
   1552c:	andeq	r5, r1, r0, lsl r7
   15530:	andeq	r5, r1, r4, lsl fp
   15534:	andeq	r5, r1, r0, lsl r7
   15538:	strdeq	r5, [r1], -r4
   1553c:	mov	r3, #1
   15540:	str	r3, [sp, #40]	; 0x28
   15544:	str	r3, [sp, #68]	; 0x44
   15548:	mov	r8, #0
   1554c:	ldr	r3, [pc, #4056]	; 1652c <__assert_fail@plt+0x5074>
   15550:	str	r3, [sp, #72]	; 0x48
   15554:	mov	r3, #2
   15558:	str	r3, [sp, #176]	; 0xb0
   1555c:	ldr	r1, [sp, #56]	; 0x38
   15560:	mov	r2, r3
   15564:	ldr	ip, [sp, #40]	; 0x28
   15568:	mov	lr, r3
   1556c:	b	15238 <__assert_fail@plt+0x3d80>
   15570:	mov	r3, #1
   15574:	str	r3, [sp, #56]	; 0x38
   15578:	str	r3, [sp, #68]	; 0x44
   1557c:	str	r3, [sp, #40]	; 0x28
   15580:	ldr	r3, [pc, #4004]	; 1652c <__assert_fail@plt+0x5074>
   15584:	mov	r8, #0
   15588:	str	r3, [sp, #72]	; 0x48
   1558c:	b	15554 <__assert_fail@plt+0x409c>
   15590:	mov	r3, #1
   15594:	str	r3, [sp, #56]	; 0x38
   15598:	str	r3, [sp, #68]	; 0x44
   1559c:	str	r3, [sp, #40]	; 0x28
   155a0:	ldr	r3, [pc, #3976]	; 16530 <__assert_fail@plt+0x5078>
   155a4:	mov	r8, #0
   155a8:	str	r3, [sp, #72]	; 0x48
   155ac:	mov	r3, #5
   155b0:	b	15558 <__assert_fail@plt+0x40a0>
   155b4:	mov	r3, #0
   155b8:	str	r3, [sp, #40]	; 0x28
   155bc:	mov	r3, #1
   155c0:	str	r3, [sp, #56]	; 0x38
   155c4:	mov	r8, #0
   155c8:	mov	r1, r3
   155cc:	ldr	r2, [sp, #176]	; 0xb0
   155d0:	ldr	ip, [sp, #40]	; 0x28
   155d4:	ldr	lr, [sp, #176]	; 0xb0
   155d8:	b	15238 <__assert_fail@plt+0x3d80>
   155dc:	ldr	r3, [sp, #176]	; 0xb0
   155e0:	cmp	r3, #10
   155e4:	beq	15628 <__assert_fail@plt+0x4170>
   155e8:	mov	r2, #5
   155ec:	ldr	r1, [pc, #3904]	; 16534 <__assert_fail@plt+0x507c>
   155f0:	mov	r0, #0
   155f4:	bl	111e8 <dcgettext@plt>
   155f8:	ldr	r2, [pc, #3892]	; 16534 <__assert_fail@plt+0x507c>
   155fc:	cmp	r0, r2
   15600:	str	r0, [sp, #188]	; 0xbc
   15604:	beq	166c0 <__assert_fail@plt+0x5208>
   15608:	mov	r2, #5
   1560c:	ldr	r1, [pc, #3864]	; 1652c <__assert_fail@plt+0x5074>
   15610:	mov	r0, #0
   15614:	bl	111e8 <dcgettext@plt>
   15618:	ldr	r2, [pc, #3852]	; 1652c <__assert_fail@plt+0x5074>
   1561c:	cmp	r0, r2
   15620:	str	r0, [sp, #192]	; 0xc0
   15624:	beq	166b0 <__assert_fail@plt+0x51f8>
   15628:	ldr	r8, [sp, #40]	; 0x28
   1562c:	cmp	r8, #0
   15630:	movne	r8, #0
   15634:	bne	15664 <__assert_fail@plt+0x41ac>
   15638:	ldr	r3, [sp, #188]	; 0xbc
   1563c:	ldrb	r3, [r3]
   15640:	cmp	r3, #0
   15644:	beq	15664 <__assert_fail@plt+0x41ac>
   15648:	ldr	r2, [sp, #188]	; 0xbc
   1564c:	cmp	fp, r8
   15650:	strbhi	r3, [r9, r8]
   15654:	ldrb	r3, [r2, #1]!
   15658:	add	r8, r8, #1
   1565c:	cmp	r3, #0
   15660:	bne	1564c <__assert_fail@plt+0x4194>
   15664:	ldr	r0, [sp, #192]	; 0xc0
   15668:	bl	11314 <strlen@plt>
   1566c:	ldr	r3, [sp, #192]	; 0xc0
   15670:	ldr	r2, [sp, #176]	; 0xb0
   15674:	str	r3, [sp, #72]	; 0x48
   15678:	mov	r3, #1
   1567c:	str	r3, [sp, #56]	; 0x38
   15680:	mov	r1, r3
   15684:	ldr	ip, [sp, #40]	; 0x28
   15688:	ldr	lr, [sp, #176]	; 0xb0
   1568c:	str	r0, [sp, #68]	; 0x44
   15690:	b	15238 <__assert_fail@plt+0x3d80>
   15694:	ldr	r3, [sp, #40]	; 0x28
   15698:	cmp	r3, #0
   1569c:	beq	16344 <__assert_fail@plt+0x4e8c>
   156a0:	mov	r3, #1
   156a4:	str	r3, [sp, #68]	; 0x44
   156a8:	ldr	r3, [pc, #3708]	; 1652c <__assert_fail@plt+0x5074>
   156ac:	str	r3, [sp, #72]	; 0x48
   156b0:	mov	r8, #0
   156b4:	ldr	r1, [sp, #56]	; 0x38
   156b8:	ldr	r2, [sp, #176]	; 0xb0
   156bc:	ldr	ip, [sp, #40]	; 0x28
   156c0:	ldr	lr, [sp, #176]	; 0xb0
   156c4:	b	15238 <__assert_fail@plt+0x3d80>
   156c8:	ldr	r3, [sp, #40]	; 0x28
   156cc:	cmp	r3, #0
   156d0:	beq	163c8 <__assert_fail@plt+0x4f10>
   156d4:	str	r3, [sp, #56]	; 0x38
   156d8:	mov	r3, #1
   156dc:	str	r3, [sp, #68]	; 0x44
   156e0:	ldr	r3, [pc, #3656]	; 16530 <__assert_fail@plt+0x5078>
   156e4:	b	156ac <__assert_fail@plt+0x41f4>
   156e8:	ldr	r3, [sp, #40]	; 0x28
   156ec:	cmp	r3, #0
   156f0:	mov	r3, #1
   156f4:	streq	r3, [sp, #56]	; 0x38
   156f8:	beq	16344 <__assert_fail@plt+0x4e8c>
   156fc:	str	r3, [sp, #68]	; 0x44
   15700:	ldr	r3, [pc, #3620]	; 1652c <__assert_fail@plt+0x5074>
   15704:	mov	r8, #0
   15708:	str	r3, [sp, #72]	; 0x48
   1570c:	b	15554 <__assert_fail@plt+0x409c>
   15710:	ldr	r3, [sp, #24]
   15714:	ldr	r6, [sp, #48]	; 0x30
   15718:	cmn	r3, #1
   1571c:	beq	15d78 <__assert_fail@plt+0x48c0>
   15720:	subs	r3, r3, #1
   15724:	movne	r3, #1
   15728:	cmp	r3, #0
   1572c:	beq	15af8 <__assert_fail@plt+0x4640>
   15730:	ldr	r1, [sp, #52]	; 0x34
   15734:	mov	r7, r3
   15738:	mov	r3, #0
   1573c:	str	r3, [sp, #32]
   15740:	ldr	r3, [sp, #60]	; 0x3c
   15744:	orr	r2, r1, r3
   15748:	ldr	r3, [sp, #40]	; 0x28
   1574c:	eor	r2, r2, #1
   15750:	orr	r2, r3, r2
   15754:	tst	r2, #255	; 0xff
   15758:	bne	1607c <__assert_fail@plt+0x4bc4>
   1575c:	cmp	r6, #0
   15760:	bne	1593c <__assert_fail@plt+0x4484>
   15764:	ldr	r3, [sp, #36]	; 0x24
   15768:	add	sl, sl, #1
   1576c:	and	r3, r3, r7
   15770:	uxtb	r6, r3
   15774:	cmp	r6, #0
   15778:	beq	157a4 <__assert_fail@plt+0x42ec>
   1577c:	cmp	fp, r8
   15780:	movhi	r3, #39	; 0x27
   15784:	strbhi	r3, [r9, r8]
   15788:	add	r3, r8, #1
   1578c:	cmp	fp, r3
   15790:	movhi	r2, #39	; 0x27
   15794:	add	r8, r8, #2
   15798:	strbhi	r2, [r9, r3]
   1579c:	mov	r3, #0
   157a0:	str	r3, [sp, #36]	; 0x24
   157a4:	ldr	r2, [sp, #32]
   157a8:	cmp	r8, fp
   157ac:	ldr	r3, [sp, #28]
   157b0:	strbcc	r4, [r9, r8]
   157b4:	cmp	r2, #0
   157b8:	moveq	r3, #0
   157bc:	str	r3, [sp, #28]
   157c0:	ldr	r3, [sp, #24]
   157c4:	add	r8, r8, #1
   157c8:	cmn	r3, #1
   157cc:	bne	152a4 <__assert_fail@plt+0x3dec>
   157d0:	ldr	r3, [sp, #44]	; 0x2c
   157d4:	ldrb	r3, [r3, sl]
   157d8:	adds	r7, r3, #0
   157dc:	movne	r7, #1
   157e0:	cmp	r7, #0
   157e4:	bne	152b4 <__assert_fail@plt+0x3dfc>
   157e8:	ldr	r3, [sp, #64]	; 0x40
   157ec:	cmp	r8, #0
   157f0:	movne	r3, #0
   157f4:	andeq	r3, r3, #1
   157f8:	cmp	r3, #0
   157fc:	str	r3, [sp, #64]	; 0x40
   15800:	bne	162a4 <__assert_fail@plt+0x4dec>
   15804:	ldr	r3, [sp, #40]	; 0x28
   15808:	ldr	r2, [sp, #52]	; 0x34
   1580c:	eor	r3, r3, #1
   15810:	ands	r2, r2, r3
   15814:	beq	166d0 <__assert_fail@plt+0x5218>
   15818:	ldr	r3, [sp, #76]	; 0x4c
   1581c:	cmp	r3, #0
   15820:	beq	166a0 <__assert_fail@plt+0x51e8>
   15824:	ldr	r3, [sp, #28]
   15828:	cmp	r3, #0
   1582c:	bne	1665c <__assert_fail@plt+0x51a4>
   15830:	ldr	r2, [sp, #84]	; 0x54
   15834:	clz	r3, fp
   15838:	cmp	r2, #0
   1583c:	lsr	r3, r3, #5
   15840:	moveq	r3, #0
   15844:	cmp	r3, #0
   15848:	beq	165fc <__assert_fail@plt+0x5144>
   1584c:	mov	fp, r2
   15850:	str	r3, [sp, #76]	; 0x4c
   15854:	b	151e0 <__assert_fail@plt+0x3d28>
   15858:	ldr	r3, [sp, #176]	; 0xb0
   1585c:	ldr	r6, [sp, #48]	; 0x30
   15860:	cmp	r3, #2
   15864:	beq	15d9c <__assert_fail@plt+0x48e4>
   15868:	ldr	r3, [sp, #88]	; 0x58
   1586c:	cmp	r3, #0
   15870:	beq	16320 <__assert_fail@plt+0x4e68>
   15874:	mov	r3, #0
   15878:	add	sl, sl, #1
   1587c:	ldr	r6, [sp, #36]	; 0x24
   15880:	str	r3, [sp, #32]
   15884:	mov	r4, #92	; 0x5c
   15888:	b	15774 <__assert_fail@plt+0x42bc>
   1588c:	ldr	r3, [sp, #176]	; 0xb0
   15890:	ldr	r6, [sp, #48]	; 0x30
   15894:	cmp	r3, #2
   15898:	beq	15dcc <__assert_fail@plt+0x4914>
   1589c:	cmp	r3, #5
   158a0:	bne	16330 <__assert_fail@plt+0x4e78>
   158a4:	ldr	r3, [sp, #100]	; 0x64
   158a8:	cmp	r3, #0
   158ac:	beq	16394 <__assert_fail@plt+0x4edc>
   158b0:	ldr	r2, [sp, #24]
   158b4:	add	r3, sl, #2
   158b8:	cmp	r2, r3
   158bc:	bls	158cc <__assert_fail@plt+0x4414>
   158c0:	ldrb	r4, [r5, #1]
   158c4:	cmp	r4, #63	; 0x3f
   158c8:	beq	1653c <__assert_fail@plt+0x5084>
   158cc:	mov	r1, #0
   158d0:	str	r1, [sp, #32]
   158d4:	mov	r4, #63	; 0x3f
   158d8:	b	15740 <__assert_fail@plt+0x4288>
   158dc:	ldr	r3, [sp, #176]	; 0xb0
   158e0:	ldr	r6, [sp, #48]	; 0x30
   158e4:	cmp	r3, #2
   158e8:	beq	15df8 <__assert_fail@plt+0x4940>
   158ec:	str	r7, [sp, #32]
   158f0:	str	r7, [sp, #76]	; 0x4c
   158f4:	mov	r1, #0
   158f8:	mov	r4, #39	; 0x27
   158fc:	b	15740 <__assert_fail@plt+0x4288>
   15900:	ldr	r6, [sp, #48]	; 0x30
   15904:	ldr	r1, [sp, #52]	; 0x34
   15908:	str	r7, [sp, #32]
   1590c:	b	15740 <__assert_fail@plt+0x4288>
   15910:	ldr	r6, [sp, #48]	; 0x30
   15914:	ldr	r1, [sp, #52]	; 0x34
   15918:	mov	r4, #12
   1591c:	mov	r3, #102	; 0x66
   15920:	ldr	r2, [sp, #56]	; 0x38
   15924:	cmp	r2, #0
   15928:	streq	r2, [sp, #32]
   1592c:	beq	15740 <__assert_fail@plt+0x4288>
   15930:	mov	r4, r3
   15934:	mov	r3, #0
   15938:	str	r3, [sp, #32]
   1593c:	ldr	r3, [sp, #40]	; 0x28
   15940:	cmp	r3, #0
   15944:	bne	160b4 <__assert_fail@plt+0x4bfc>
   15948:	ldr	r3, [sp, #36]	; 0x24
   1594c:	eor	r3, r3, #1
   15950:	and	r3, r3, r1
   15954:	ands	r3, r3, #255	; 0xff
   15958:	beq	15990 <__assert_fail@plt+0x44d8>
   1595c:	cmp	fp, r8
   15960:	movhi	r2, #39	; 0x27
   15964:	strbhi	r2, [r9, r8]
   15968:	add	r2, r8, #1
   1596c:	cmp	fp, r2
   15970:	movhi	r1, #36	; 0x24
   15974:	strbhi	r1, [r9, r2]
   15978:	add	r2, r8, #2
   1597c:	cmp	fp, r2
   15980:	add	r8, r8, #3
   15984:	movhi	r1, #39	; 0x27
   15988:	strbhi	r1, [r9, r2]
   1598c:	str	r3, [sp, #36]	; 0x24
   15990:	cmp	fp, r8
   15994:	movhi	r3, #92	; 0x5c
   15998:	strbhi	r3, [r9, r8]
   1599c:	add	sl, sl, #1
   159a0:	add	r8, r8, #1
   159a4:	b	157a4 <__assert_fail@plt+0x42ec>
   159a8:	ldr	r6, [sp, #48]	; 0x30
   159ac:	mov	r4, #10
   159b0:	mov	r3, #110	; 0x6e
   159b4:	ldr	r2, [sp, #64]	; 0x40
   159b8:	cmp	r2, #0
   159bc:	bne	1643c <__assert_fail@plt+0x4f84>
   159c0:	ldr	r1, [sp, #52]	; 0x34
   159c4:	b	15920 <__assert_fail@plt+0x4468>
   159c8:	ldr	r6, [sp, #48]	; 0x30
   159cc:	ldr	r1, [sp, #52]	; 0x34
   159d0:	mov	r3, #116	; 0x74
   159d4:	b	15920 <__assert_fail@plt+0x4468>
   159d8:	ldr	r6, [sp, #48]	; 0x30
   159dc:	ldr	r1, [sp, #52]	; 0x34
   159e0:	mov	r4, #11
   159e4:	mov	r3, #118	; 0x76
   159e8:	b	15920 <__assert_fail@plt+0x4468>
   159ec:	ldr	r6, [sp, #48]	; 0x30
   159f0:	ldr	r1, [sp, #52]	; 0x34
   159f4:	mov	r4, #8
   159f8:	mov	r3, #98	; 0x62
   159fc:	b	15920 <__assert_fail@plt+0x4468>
   15a00:	ldr	r6, [sp, #48]	; 0x30
   15a04:	ldr	r1, [sp, #52]	; 0x34
   15a08:	mov	r4, #7
   15a0c:	mov	r3, #97	; 0x61
   15a10:	b	15920 <__assert_fail@plt+0x4468>
   15a14:	ldr	r3, [sp, #56]	; 0x38
   15a18:	ldr	r6, [sp, #48]	; 0x30
   15a1c:	cmp	r3, #0
   15a20:	beq	15ee4 <__assert_fail@plt+0x4a2c>
   15a24:	ldr	r3, [sp, #40]	; 0x28
   15a28:	cmp	r3, #0
   15a2c:	bne	16518 <__assert_fail@plt+0x5060>
   15a30:	ldr	r3, [sp, #36]	; 0x24
   15a34:	ldr	r2, [sp, #52]	; 0x34
   15a38:	eor	r3, r3, #1
   15a3c:	ands	r3, r2, r3
   15a40:	moveq	r2, r8
   15a44:	beq	15a7c <__assert_fail@plt+0x45c4>
   15a48:	cmp	fp, r8
   15a4c:	movhi	r2, #39	; 0x27
   15a50:	strbhi	r2, [r9, r8]
   15a54:	add	r2, r8, #1
   15a58:	cmp	fp, r2
   15a5c:	movhi	r1, #36	; 0x24
   15a60:	strbhi	r1, [r9, r2]
   15a64:	add	r2, r8, #2
   15a68:	cmp	fp, r2
   15a6c:	movhi	r1, #39	; 0x27
   15a70:	strbhi	r1, [r9, r2]
   15a74:	add	r2, r8, #3
   15a78:	str	r3, [sp, #36]	; 0x24
   15a7c:	cmp	fp, r2
   15a80:	movhi	r3, #92	; 0x5c
   15a84:	strbhi	r3, [r9, r2]
   15a88:	ldr	r3, [sp, #92]	; 0x5c
   15a8c:	add	r8, r2, #1
   15a90:	cmp	r3, #0
   15a94:	beq	16418 <__assert_fail@plt+0x4f60>
   15a98:	ldr	r1, [sp, #24]
   15a9c:	add	r3, sl, #1
   15aa0:	cmp	r1, r3
   15aa4:	bls	15adc <__assert_fail@plt+0x4624>
   15aa8:	ldr	r1, [sp, #44]	; 0x2c
   15aac:	ldrb	r3, [r1, r3]
   15ab0:	sub	r3, r3, #48	; 0x30
   15ab4:	cmp	r3, #9
   15ab8:	bhi	15adc <__assert_fail@plt+0x4624>
   15abc:	cmp	fp, r8
   15ac0:	movhi	r3, #48	; 0x30
   15ac4:	strbhi	r3, [r9, r8]
   15ac8:	add	r3, r2, #2
   15acc:	cmp	fp, r3
   15ad0:	add	r8, r2, #3
   15ad4:	movhi	r1, #48	; 0x30
   15ad8:	strbhi	r1, [r9, r3]
   15adc:	ldr	r3, [sp, #40]	; 0x28
   15ae0:	ldr	r1, [sp, #52]	; 0x34
   15ae4:	mov	r7, r3
   15ae8:	str	r3, [sp, #32]
   15aec:	mov	r4, #48	; 0x30
   15af0:	b	15740 <__assert_fail@plt+0x4288>
   15af4:	ldr	r6, [sp, #48]	; 0x30
   15af8:	cmp	sl, #0
   15afc:	streq	r7, [sp, #32]
   15b00:	beq	15b20 <__assert_fail@plt+0x4668>
   15b04:	mov	r3, #0
   15b08:	ldr	r1, [sp, #52]	; 0x34
   15b0c:	str	r3, [sp, #32]
   15b10:	b	15740 <__assert_fail@plt+0x4288>
   15b14:	ldr	r6, [sp, #48]	; 0x30
   15b18:	mov	r3, #0
   15b1c:	str	r3, [sp, #32]
   15b20:	ldr	r3, [sp, #64]	; 0x40
   15b24:	cmp	r3, #0
   15b28:	bne	162a4 <__assert_fail@plt+0x4dec>
   15b2c:	ldr	r1, [sp, #52]	; 0x34
   15b30:	b	15740 <__assert_fail@plt+0x4288>
   15b34:	ldr	r3, [sp, #48]	; 0x30
   15b38:	mov	r6, r3
   15b3c:	str	r3, [sp, #32]
   15b40:	b	15b20 <__assert_fail@plt+0x4668>
   15b44:	ldr	r6, [sp, #48]	; 0x30
   15b48:	mov	r4, #13
   15b4c:	mov	r3, #114	; 0x72
   15b50:	b	159b4 <__assert_fail@plt+0x44fc>
   15b54:	ldr	r3, [sp, #44]	; 0x2c
   15b58:	add	r5, r3, sl
   15b5c:	ldrb	r4, [r5]
   15b60:	cmp	r4, #126	; 0x7e
   15b64:	ldrls	pc, [pc, r4, lsl #2]
   15b68:	b	15f04 <__assert_fail@plt+0x4a4c>
   15b6c:	ldrdeq	r5, [r1], -r4
   15b70:	andeq	r5, r1, r4, lsl #30
   15b74:	andeq	r5, r1, r4, lsl #30
   15b78:	andeq	r5, r1, r4, lsl #30
   15b7c:	andeq	r5, r1, r4, lsl #30
   15b80:	andeq	r5, r1, r4, lsl #30
   15b84:	andeq	r5, r1, r4, lsl #30
   15b88:	andeq	r5, r1, ip, asr #29
   15b8c:	andeq	r5, r1, r4, asr #29
   15b90:			; <UNDEFINED> instruction: 0x00015eb8
   15b94:			; <UNDEFINED> instruction: 0x00015eb0
   15b98:	andeq	r5, r1, r8, lsr #29
   15b9c:	andeq	r5, r1, r0, lsr #29
   15ba0:	muleq	r1, r8, lr
   15ba4:	andeq	r5, r1, r4, lsl #30
   15ba8:	andeq	r5, r1, r4, lsl #30
   15bac:	andeq	r5, r1, r4, lsl #30
   15bb0:	andeq	r5, r1, r4, lsl #30
   15bb4:	andeq	r5, r1, r4, lsl #30
   15bb8:	andeq	r5, r1, r4, lsl #30
   15bbc:	andeq	r5, r1, r4, lsl #30
   15bc0:	andeq	r5, r1, r4, lsl #30
   15bc4:	andeq	r5, r1, r4, lsl #30
   15bc8:	andeq	r5, r1, r4, lsl #30
   15bcc:	andeq	r5, r1, r4, lsl #30
   15bd0:	andeq	r5, r1, r4, lsl #30
   15bd4:	andeq	r5, r1, r4, lsl #30
   15bd8:	andeq	r5, r1, r4, lsl #30
   15bdc:	andeq	r5, r1, r4, lsl #30
   15be0:	andeq	r5, r1, r4, lsl #30
   15be4:	andeq	r5, r1, r4, lsl #30
   15be8:	andeq	r5, r1, r4, lsl #30
   15bec:	andeq	r5, r1, ip, lsl #29
   15bf0:	andeq	r5, r1, r4, lsl #29
   15bf4:	andeq	r5, r1, r4, lsl #29
   15bf8:	andeq	r5, r1, ip, ror lr
   15bfc:	andeq	r5, r1, r4, lsl #29
   15c00:	andeq	r5, r1, r4, ror lr
   15c04:	andeq	r5, r1, r4, lsl #29
   15c08:	andeq	r5, r1, r8, ror #27
   15c0c:	andeq	r5, r1, r4, lsl #29
   15c10:	andeq	r5, r1, r4, lsl #29
   15c14:	andeq	r5, r1, r4, lsl #29
   15c18:	andeq	r5, r1, r4, ror lr
   15c1c:	andeq	r5, r1, r4, ror lr
   15c20:	andeq	r5, r1, r4, ror lr
   15c24:	andeq	r5, r1, r4, ror lr
   15c28:	andeq	r5, r1, r4, ror lr
   15c2c:	andeq	r5, r1, r4, ror lr
   15c30:	andeq	r5, r1, r4, ror lr
   15c34:	andeq	r5, r1, r4, ror lr
   15c38:	andeq	r5, r1, r4, ror lr
   15c3c:	andeq	r5, r1, r4, ror lr
   15c40:	andeq	r5, r1, r4, ror lr
   15c44:	andeq	r5, r1, r4, ror lr
   15c48:	andeq	r5, r1, r4, ror lr
   15c4c:	andeq	r5, r1, r4, ror lr
   15c50:	andeq	r5, r1, r4, ror lr
   15c54:	andeq	r5, r1, r4, ror lr
   15c58:	andeq	r5, r1, r4, lsl #29
   15c5c:	andeq	r5, r1, r4, lsl #29
   15c60:	andeq	r5, r1, r4, lsl #29
   15c64:	andeq	r5, r1, r4, lsl #29
   15c68:			; <UNDEFINED> instruction: 0x00015dbc
   15c6c:	andeq	r5, r1, r4, lsl #30
   15c70:	andeq	r5, r1, r4, ror lr
   15c74:	andeq	r5, r1, r4, ror lr
   15c78:	andeq	r5, r1, r4, ror lr
   15c7c:	andeq	r5, r1, r4, ror lr
   15c80:	andeq	r5, r1, r4, ror lr
   15c84:	andeq	r5, r1, r4, ror lr
   15c88:	andeq	r5, r1, r4, ror lr
   15c8c:	andeq	r5, r1, r4, ror lr
   15c90:	andeq	r5, r1, r4, ror lr
   15c94:	andeq	r5, r1, r4, ror lr
   15c98:	andeq	r5, r1, r4, ror lr
   15c9c:	andeq	r5, r1, r4, ror lr
   15ca0:	andeq	r5, r1, r4, ror lr
   15ca4:	andeq	r5, r1, r4, ror lr
   15ca8:	andeq	r5, r1, r4, ror lr
   15cac:	andeq	r5, r1, r4, ror lr
   15cb0:	andeq	r5, r1, r4, ror lr
   15cb4:	andeq	r5, r1, r4, ror lr
   15cb8:	andeq	r5, r1, r4, ror lr
   15cbc:	andeq	r5, r1, r4, ror lr
   15cc0:	andeq	r5, r1, r4, ror lr
   15cc4:	andeq	r5, r1, r4, ror lr
   15cc8:	andeq	r5, r1, r4, ror lr
   15ccc:	andeq	r5, r1, r4, ror lr
   15cd0:	andeq	r5, r1, r4, ror lr
   15cd4:	andeq	r5, r1, r4, ror lr
   15cd8:	andeq	r5, r1, r4, lsl #29
   15cdc:	andeq	r5, r1, ip, lsl #27
   15ce0:	andeq	r5, r1, r4, ror lr
   15ce4:	andeq	r5, r1, r4, lsl #29
   15ce8:	andeq	r5, r1, r4, ror lr
   15cec:	andeq	r5, r1, r4, lsl #29
   15cf0:	andeq	r5, r1, r4, ror lr
   15cf4:	andeq	r5, r1, r4, ror lr
   15cf8:	andeq	r5, r1, r4, ror lr
   15cfc:	andeq	r5, r1, r4, ror lr
   15d00:	andeq	r5, r1, r4, ror lr
   15d04:	andeq	r5, r1, r4, ror lr
   15d08:	andeq	r5, r1, r4, ror lr
   15d0c:	andeq	r5, r1, r4, ror lr
   15d10:	andeq	r5, r1, r4, ror lr
   15d14:	andeq	r5, r1, r4, ror lr
   15d18:	andeq	r5, r1, r4, ror lr
   15d1c:	andeq	r5, r1, r4, ror lr
   15d20:	andeq	r5, r1, r4, ror lr
   15d24:	andeq	r5, r1, r4, ror lr
   15d28:	andeq	r5, r1, r4, ror lr
   15d2c:	andeq	r5, r1, r4, ror lr
   15d30:	andeq	r5, r1, r4, ror lr
   15d34:	andeq	r5, r1, r4, ror lr
   15d38:	andeq	r5, r1, r4, ror lr
   15d3c:	andeq	r5, r1, r4, ror lr
   15d40:	andeq	r5, r1, r4, ror lr
   15d44:	andeq	r5, r1, r4, ror lr
   15d48:	andeq	r5, r1, r4, ror lr
   15d4c:	andeq	r5, r1, r4, ror lr
   15d50:	andeq	r5, r1, r4, ror lr
   15d54:	andeq	r5, r1, r4, ror lr
   15d58:	andeq	r5, r1, r8, ror #26
   15d5c:	andeq	r5, r1, r4, lsl #29
   15d60:	andeq	r5, r1, r8, ror #26
   15d64:	andeq	r5, r1, ip, ror lr
   15d68:	ldr	r3, [sp, #24]
   15d6c:	mov	r6, #0
   15d70:	cmn	r3, #1
   15d74:	bne	15720 <__assert_fail@plt+0x4268>
   15d78:	ldr	r3, [sp, #44]	; 0x2c
   15d7c:	ldrb	r3, [r3, #1]
   15d80:	adds	r3, r3, #0
   15d84:	movne	r3, #1
   15d88:	b	15728 <__assert_fail@plt+0x4270>
   15d8c:	ldr	r3, [sp, #176]	; 0xb0
   15d90:	mov	r6, #0
   15d94:	cmp	r3, #2
   15d98:	bne	15868 <__assert_fail@plt+0x43b0>
   15d9c:	ldr	r3, [sp, #64]	; 0x40
   15da0:	cmp	r3, #0
   15da4:	bne	165dc <__assert_fail@plt+0x5124>
   15da8:	add	sl, sl, #1
   15dac:	ldr	r6, [sp, #36]	; 0x24
   15db0:	str	r3, [sp, #32]
   15db4:	mov	r4, #92	; 0x5c
   15db8:	b	15774 <__assert_fail@plt+0x42bc>
   15dbc:	ldr	r3, [sp, #176]	; 0xb0
   15dc0:	mov	r6, #0
   15dc4:	cmp	r3, #2
   15dc8:	bne	1589c <__assert_fail@plt+0x43e4>
   15dcc:	ldr	r3, [sp, #40]	; 0x28
   15dd0:	cmp	r3, #0
   15dd4:	bne	160b8 <__assert_fail@plt+0x4c00>
   15dd8:	mov	r1, r7
   15ddc:	str	r3, [sp, #32]
   15de0:	mov	r4, #63	; 0x3f
   15de4:	b	15740 <__assert_fail@plt+0x4288>
   15de8:	ldr	r3, [sp, #176]	; 0xb0
   15dec:	mov	r6, #0
   15df0:	cmp	r3, #2
   15df4:	bne	158ec <__assert_fail@plt+0x4434>
   15df8:	ldr	r3, [sp, #64]	; 0x40
   15dfc:	cmp	r3, #0
   15e00:	bne	165dc <__assert_fail@plt+0x5124>
   15e04:	ldr	r2, [sp, #84]	; 0x54
   15e08:	adds	r3, fp, #0
   15e0c:	movne	r3, #1
   15e10:	cmp	r2, #0
   15e14:	movne	r3, #0
   15e18:	cmp	r3, #0
   15e1c:	strne	fp, [sp, #84]	; 0x54
   15e20:	movne	fp, #0
   15e24:	bne	15e54 <__assert_fail@plt+0x499c>
   15e28:	cmp	fp, r8
   15e2c:	movhi	r3, #39	; 0x27
   15e30:	strbhi	r3, [r9, r8]
   15e34:	add	r3, r8, #1
   15e38:	cmp	fp, r3
   15e3c:	movhi	r2, #92	; 0x5c
   15e40:	strbhi	r2, [r9, r3]
   15e44:	add	r3, r8, #2
   15e48:	cmp	fp, r3
   15e4c:	movhi	r2, #39	; 0x27
   15e50:	strbhi	r2, [r9, r3]
   15e54:	ldr	r3, [sp, #64]	; 0x40
   15e58:	add	r8, r8, #3
   15e5c:	mov	r1, r7
   15e60:	str	r7, [sp, #32]
   15e64:	str	r7, [sp, #76]	; 0x4c
   15e68:	str	r3, [sp, #36]	; 0x24
   15e6c:	mov	r4, #39	; 0x27
   15e70:	b	15740 <__assert_fail@plt+0x4288>
   15e74:	mov	r6, #0
   15e78:	b	15904 <__assert_fail@plt+0x444c>
   15e7c:	mov	r6, #0
   15e80:	b	15af8 <__assert_fail@plt+0x4640>
   15e84:	mov	r6, #0
   15e88:	b	15b18 <__assert_fail@plt+0x4660>
   15e8c:	str	r7, [sp, #32]
   15e90:	mov	r6, #0
   15e94:	b	15b20 <__assert_fail@plt+0x4668>
   15e98:	mov	r6, #0
   15e9c:	b	15b48 <__assert_fail@plt+0x4690>
   15ea0:	mov	r6, #0
   15ea4:	b	15914 <__assert_fail@plt+0x445c>
   15ea8:	mov	r6, #0
   15eac:	b	159dc <__assert_fail@plt+0x4524>
   15eb0:	mov	r6, #0
   15eb4:	b	159ac <__assert_fail@plt+0x44f4>
   15eb8:	mov	r6, #0
   15ebc:	mov	r3, #116	; 0x74
   15ec0:	b	159b4 <__assert_fail@plt+0x44fc>
   15ec4:	mov	r6, #0
   15ec8:	b	159f0 <__assert_fail@plt+0x4538>
   15ecc:	mov	r6, #0
   15ed0:	b	15a04 <__assert_fail@plt+0x454c>
   15ed4:	ldr	r3, [sp, #56]	; 0x38
   15ed8:	mov	r6, #0
   15edc:	cmp	r3, #0
   15ee0:	bne	15a24 <__assert_fail@plt+0x456c>
   15ee4:	ldr	r3, [sp, #96]	; 0x60
   15ee8:	cmp	r3, #0
   15eec:	addne	sl, sl, #1
   15ef0:	bne	15298 <__assert_fail@plt+0x3de0>
   15ef4:	ldr	r1, [sp, #52]	; 0x34
   15ef8:	str	r3, [sp, #32]
   15efc:	mov	r4, r3
   15f00:	b	15740 <__assert_fail@plt+0x4288>
   15f04:	mov	r6, #0
   15f08:	ldr	r3, [sp, #80]	; 0x50
   15f0c:	cmp	r3, #1
   15f10:	bne	16100 <__assert_fail@plt+0x4c48>
   15f14:	bl	112fc <__ctype_b_loc@plt>
   15f18:	ldr	r2, [sp, #80]	; 0x50
   15f1c:	sxth	r3, r4
   15f20:	mov	r1, r2
   15f24:	lsl	r3, r3, #1
   15f28:	ldr	r2, [r0]
   15f2c:	ldrh	r3, [r2, r3]
   15f30:	and	r3, r3, #16384	; 0x4000
   15f34:	cmp	r3, #0
   15f38:	movne	r3, #1
   15f3c:	moveq	r3, #0
   15f40:	str	r3, [sp, #32]
   15f44:	moveq	r3, #1
   15f48:	movne	r3, #0
   15f4c:	ldr	r2, [sp, #56]	; 0x38
   15f50:	and	r3, r3, r2
   15f54:	ands	r3, r3, #255	; 0xff
   15f58:	beq	15b2c <__assert_fail@plt+0x4674>
   15f5c:	add	r1, sl, r1
   15f60:	mov	r0, #0
   15f64:	ldr	r7, [sp, #40]	; 0x28
   15f68:	ldr	r2, [sp, #36]	; 0x24
   15f6c:	ldr	lr, [sp, #52]	; 0x34
   15f70:	b	16020 <__assert_fail@plt+0x4b68>
   15f74:	cmp	r7, #0
   15f78:	bne	16374 <__assert_fail@plt+0x4ebc>
   15f7c:	eor	r0, r2, #1
   15f80:	ands	r0, lr, r0
   15f84:	beq	15fbc <__assert_fail@plt+0x4b04>
   15f88:	cmp	fp, r8
   15f8c:	movhi	r2, #39	; 0x27
   15f90:	strbhi	r2, [r9, r8]
   15f94:	add	r2, r8, #1
   15f98:	cmp	fp, r2
   15f9c:	movhi	ip, #36	; 0x24
   15fa0:	strbhi	ip, [r9, r2]
   15fa4:	add	r2, r8, #2
   15fa8:	cmp	fp, r2
   15fac:	movhi	ip, #39	; 0x27
   15fb0:	strbhi	ip, [r9, r2]
   15fb4:	add	r8, r8, #3
   15fb8:	mov	r2, r0
   15fbc:	cmp	fp, r8
   15fc0:	movhi	r0, #92	; 0x5c
   15fc4:	strbhi	r0, [r9, r8]
   15fc8:	add	r0, r8, #1
   15fcc:	cmp	fp, r0
   15fd0:	lsrhi	ip, r4, #6
   15fd4:	addhi	ip, ip, #48	; 0x30
   15fd8:	strbhi	ip, [r9, r0]
   15fdc:	add	ip, r8, #2
   15fe0:	cmp	fp, ip
   15fe4:	lsrhi	r0, r4, #3
   15fe8:	andhi	r0, r0, #7
   15fec:	addhi	r0, r0, #48	; 0x30
   15ff0:	add	sl, sl, #1
   15ff4:	strbhi	r0, [r9, ip]
   15ff8:	and	r4, r4, #7
   15ffc:	cmp	sl, r1
   16000:	add	r4, r4, #48	; 0x30
   16004:	add	r8, r8, #3
   16008:	bcs	1638c <__assert_fail@plt+0x4ed4>
   1600c:	mov	r0, r3
   16010:	cmp	fp, r8
   16014:	strbhi	r4, [r9, r8]
   16018:	ldrb	r4, [r5, #1]!
   1601c:	add	r8, r8, #1
   16020:	cmp	r3, #0
   16024:	bne	15f74 <__assert_fail@plt+0x4abc>
   16028:	cmp	r6, #0
   1602c:	bne	160d0 <__assert_fail@plt+0x4c18>
   16030:	eor	r6, r0, #1
   16034:	and	r6, r6, r2
   16038:	add	sl, sl, #1
   1603c:	cmp	r1, sl
   16040:	uxtb	r6, r6
   16044:	bls	160f8 <__assert_fail@plt+0x4c40>
   16048:	cmp	r6, #0
   1604c:	beq	16010 <__assert_fail@plt+0x4b58>
   16050:	cmp	fp, r8
   16054:	movhi	r2, #39	; 0x27
   16058:	strbhi	r2, [r9, r8]
   1605c:	add	r2, r8, #1
   16060:	cmp	fp, r2
   16064:	movhi	ip, #39	; 0x27
   16068:	strbhi	ip, [r9, r2]
   1606c:	add	r8, r8, #2
   16070:	mov	r6, r3
   16074:	mov	r2, r3
   16078:	b	16010 <__assert_fail@plt+0x4b58>
   1607c:	ldr	r3, [sp, #184]	; 0xb8
   16080:	cmp	r3, #0
   16084:	beq	1575c <__assert_fail@plt+0x42a4>
   16088:	lsr	r2, r4, #5
   1608c:	mov	r0, r3
   16090:	uxtb	r2, r2
   16094:	and	r3, r4, #31
   16098:	ldr	r2, [r0, r2, lsl #2]
   1609c:	lsr	r3, r2, r3
   160a0:	tst	r3, #1
   160a4:	beq	1575c <__assert_fail@plt+0x42a4>
   160a8:	ldr	r3, [sp, #40]	; 0x28
   160ac:	cmp	r3, #0
   160b0:	beq	15948 <__assert_fail@plt+0x4490>
   160b4:	mov	r3, r1
   160b8:	str	r3, [sp, #64]	; 0x40
   160bc:	mov	sl, r9
   160c0:	ldr	r3, [sp, #56]	; 0x38
   160c4:	mov	r9, fp
   160c8:	ldr	r2, [sp, #64]	; 0x40
   160cc:	b	162bc <__assert_fail@plt+0x4e04>
   160d0:	cmp	fp, r8
   160d4:	eor	r6, r0, #1
   160d8:	movhi	ip, #92	; 0x5c
   160dc:	and	r6, r6, r2
   160e0:	add	sl, sl, #1
   160e4:	strbhi	ip, [r9, r8]
   160e8:	cmp	r1, sl
   160ec:	add	r8, r8, #1
   160f0:	uxtb	r6, r6
   160f4:	bhi	16048 <__assert_fail@plt+0x4b90>
   160f8:	str	r2, [sp, #36]	; 0x24
   160fc:	b	15774 <__assert_fail@plt+0x42bc>
   16100:	ldr	r3, [sp, #24]
   16104:	cmn	r3, #1
   16108:	mov	r3, #0
   1610c:	str	r3, [sp, #128]	; 0x80
   16110:	str	r3, [sp, #132]	; 0x84
   16114:	beq	16408 <__assert_fail@plt+0x4f50>
   16118:	mov	r2, r7
   1611c:	mov	r3, #0
   16120:	str	r7, [sp, #104]	; 0x68
   16124:	str	r5, [sp, #116]	; 0x74
   16128:	mov	r7, r3
   1612c:	mov	r5, r2
   16130:	str	r4, [sp, #32]
   16134:	str	r6, [sp, #108]	; 0x6c
   16138:	str	r8, [sp, #112]	; 0x70
   1613c:	ldr	r3, [sp, #44]	; 0x2c
   16140:	add	r6, sl, r7
   16144:	add	r4, r3, r6
   16148:	ldr	r3, [sp, #24]
   1614c:	mov	r1, r4
   16150:	sub	r2, r3, r6
   16154:	add	r0, sp, #124	; 0x7c
   16158:	add	r3, sp, #128	; 0x80
   1615c:	bl	1c37c <__assert_fail@plt+0xaec4>
   16160:	subs	r8, r0, #0
   16164:	beq	164ec <__assert_fail@plt+0x5034>
   16168:	cmn	r8, #1
   1616c:	beq	164c4 <__assert_fail@plt+0x500c>
   16170:	cmn	r8, #2
   16174:	beq	1645c <__assert_fail@plt+0x4fa4>
   16178:	ldr	r3, [sp, #64]	; 0x40
   1617c:	cmp	r3, #0
   16180:	beq	16240 <__assert_fail@plt+0x4d88>
   16184:	cmp	r8, #1
   16188:	beq	16240 <__assert_fail@plt+0x4d88>
   1618c:	sub	r3, r8, #1
   16190:	add	r6, r3, r6
   16194:	ldr	r3, [sp, #44]	; 0x2c
   16198:	add	r6, r3, r6
   1619c:	ldrb	r3, [r4, #1]!
   161a0:	sub	r3, r3, #91	; 0x5b
   161a4:	cmp	r3, #33	; 0x21
   161a8:	ldrls	pc, [pc, r3, lsl #2]
   161ac:	b	16238 <__assert_fail@plt+0x4d80>
   161b0:	andeq	r6, r1, r4, lsr #5
   161b4:	andeq	r6, r1, r4, lsr #5
   161b8:	andeq	r6, r1, r8, lsr r2
   161bc:	andeq	r6, r1, r4, lsr #5
   161c0:	andeq	r6, r1, r8, lsr r2
   161c4:	andeq	r6, r1, r4, lsr #5
   161c8:	andeq	r6, r1, r8, lsr r2
   161cc:	andeq	r6, r1, r8, lsr r2
   161d0:	andeq	r6, r1, r8, lsr r2
   161d4:	andeq	r6, r1, r8, lsr r2
   161d8:	andeq	r6, r1, r8, lsr r2
   161dc:	andeq	r6, r1, r8, lsr r2
   161e0:	andeq	r6, r1, r8, lsr r2
   161e4:	andeq	r6, r1, r8, lsr r2
   161e8:	andeq	r6, r1, r8, lsr r2
   161ec:	andeq	r6, r1, r8, lsr r2
   161f0:	andeq	r6, r1, r8, lsr r2
   161f4:	andeq	r6, r1, r8, lsr r2
   161f8:	andeq	r6, r1, r8, lsr r2
   161fc:	andeq	r6, r1, r8, lsr r2
   16200:	andeq	r6, r1, r8, lsr r2
   16204:	andeq	r6, r1, r8, lsr r2
   16208:	andeq	r6, r1, r8, lsr r2
   1620c:	andeq	r6, r1, r8, lsr r2
   16210:	andeq	r6, r1, r8, lsr r2
   16214:	andeq	r6, r1, r8, lsr r2
   16218:	andeq	r6, r1, r8, lsr r2
   1621c:	andeq	r6, r1, r8, lsr r2
   16220:	andeq	r6, r1, r8, lsr r2
   16224:	andeq	r6, r1, r8, lsr r2
   16228:	andeq	r6, r1, r8, lsr r2
   1622c:	andeq	r6, r1, r8, lsr r2
   16230:	andeq	r6, r1, r8, lsr r2
   16234:	andeq	r6, r1, r4, lsr #5
   16238:	cmp	r6, r4
   1623c:	bne	1619c <__assert_fail@plt+0x4ce4>
   16240:	ldr	r0, [sp, #124]	; 0x7c
   16244:	bl	11224 <iswprint@plt>
   16248:	add	r7, r7, r8
   1624c:	cmp	r0, #0
   16250:	add	r0, sp, #128	; 0x80
   16254:	moveq	r5, #0
   16258:	bl	111ac <mbsinit@plt>
   1625c:	cmp	r0, #0
   16260:	beq	1613c <__assert_fail@plt+0x4c84>
   16264:	ldr	r4, [sp, #32]
   16268:	str	r5, [sp, #32]
   1626c:	ldr	r3, [sp, #32]
   16270:	mov	r1, r7
   16274:	eor	r3, r3, #1
   16278:	ldr	r7, [sp, #104]	; 0x68
   1627c:	ldr	r6, [sp, #108]	; 0x6c
   16280:	ldr	r8, [sp, #112]	; 0x70
   16284:	ldr	r5, [sp, #116]	; 0x74
   16288:	uxtb	r3, r3
   1628c:	cmp	r1, #1
   16290:	bls	15f4c <__assert_fail@plt+0x4a94>
   16294:	ldr	r2, [sp, #56]	; 0x38
   16298:	and	r3, r3, r2
   1629c:	uxtb	r3, r3
   162a0:	b	15f5c <__assert_fail@plt+0x4aa4>
   162a4:	mov	r3, #2
   162a8:	str	r3, [sp, #176]	; 0xb0
   162ac:	ldr	r2, [sp, #64]	; 0x40
   162b0:	ldr	r3, [sp, #56]	; 0x38
   162b4:	mov	sl, r9
   162b8:	mov	r9, fp
   162bc:	and	r3, r3, r2
   162c0:	tst	r3, #255	; 0xff
   162c4:	ldr	r3, [sp, #176]	; 0xb0
   162c8:	movne	r3, #4
   162cc:	str	r3, [sp, #176]	; 0xb0
   162d0:	ldr	r3, [sp, #180]	; 0xb4
   162d4:	mov	ip, #0
   162d8:	bic	r3, r3, #2
   162dc:	str	r3, [sp, #4]
   162e0:	ldr	r3, [sp, #192]	; 0xc0
   162e4:	ldr	r2, [sp, #44]	; 0x2c
   162e8:	str	r3, [sp, #16]
   162ec:	ldr	r3, [sp, #188]	; 0xbc
   162f0:	mov	r1, r9
   162f4:	str	r3, [sp, #12]
   162f8:	ldr	r3, [sp, #176]	; 0xb0
   162fc:	mov	r0, sl
   16300:	str	r3, [sp]
   16304:	str	ip, [sp, #8]
   16308:	ldr	r3, [sp, #24]
   1630c:	bl	1516c <__assert_fail@plt+0x3cb4>
   16310:	mov	fp, r0
   16314:	mov	r0, fp
   16318:	add	sp, sp, #140	; 0x8c
   1631c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16320:	mov	r4, #92	; 0x5c
   16324:	mov	r1, #0
   16328:	mov	r3, r4
   1632c:	b	15920 <__assert_fail@plt+0x4468>
   16330:	mov	r3, #0
   16334:	ldr	r1, [sp, #52]	; 0x34
   16338:	str	r3, [sp, #32]
   1633c:	mov	r4, #63	; 0x3f
   16340:	b	15740 <__assert_fail@plt+0x4288>
   16344:	cmp	fp, #0
   16348:	beq	163a4 <__assert_fail@plt+0x4eec>
   1634c:	mov	r3, #39	; 0x27
   16350:	strb	r3, [r9]
   16354:	mov	r3, #0
   16358:	str	r3, [sp, #40]	; 0x28
   1635c:	mov	r3, #1
   16360:	str	r3, [sp, #68]	; 0x44
   16364:	ldr	r3, [pc, #448]	; 1652c <__assert_fail@plt+0x5074>
   16368:	mov	r8, #1
   1636c:	str	r3, [sp, #72]	; 0x48
   16370:	b	15554 <__assert_fail@plt+0x409c>
   16374:	ldr	r3, [sp, #40]	; 0x28
   16378:	mov	sl, r9
   1637c:	str	r3, [sp, #56]	; 0x38
   16380:	mov	r9, fp
   16384:	ldr	r2, [sp, #64]	; 0x40
   16388:	b	162bc <__assert_fail@plt+0x4e04>
   1638c:	str	r2, [sp, #36]	; 0x24
   16390:	b	157a4 <__assert_fail@plt+0x42ec>
   16394:	mov	r1, #0
   16398:	str	r3, [sp, #32]
   1639c:	mov	r4, #63	; 0x3f
   163a0:	b	15740 <__assert_fail@plt+0x4288>
   163a4:	ldr	r3, [pc, #384]	; 1652c <__assert_fail@plt+0x5074>
   163a8:	str	r3, [sp, #72]	; 0x48
   163ac:	mov	r3, #0
   163b0:	str	r3, [sp, #40]	; 0x28
   163b4:	mov	r3, #1
   163b8:	str	r3, [sp, #68]	; 0x44
   163bc:	mov	r8, r3
   163c0:	b	15554 <__assert_fail@plt+0x409c>
   163c4:	bl	114a0 <abort@plt>
   163c8:	cmp	fp, #0
   163cc:	beq	1642c <__assert_fail@plt+0x4f74>
   163d0:	mov	r2, #1
   163d4:	mov	r3, #34	; 0x22
   163d8:	strb	r3, [r9]
   163dc:	mov	r8, r2
   163e0:	mov	r3, r2
   163e4:	str	r2, [sp, #68]	; 0x44
   163e8:	str	r3, [sp, #56]	; 0x38
   163ec:	ldr	r3, [pc, #316]	; 16530 <__assert_fail@plt+0x5078>
   163f0:	ldr	r1, [sp, #56]	; 0x38
   163f4:	str	r3, [sp, #72]	; 0x48
   163f8:	ldr	r2, [sp, #176]	; 0xb0
   163fc:	ldr	ip, [sp, #40]	; 0x28
   16400:	ldr	lr, [sp, #176]	; 0xb0
   16404:	b	15238 <__assert_fail@plt+0x3d80>
   16408:	ldr	r0, [sp, #44]	; 0x2c
   1640c:	bl	11314 <strlen@plt>
   16410:	str	r0, [sp, #24]
   16414:	b	16118 <__assert_fail@plt+0x4c60>
   16418:	mov	r7, #0
   1641c:	ldr	r1, [sp, #52]	; 0x34
   16420:	str	r3, [sp, #32]
   16424:	mov	r4, #48	; 0x30
   16428:	b	15740 <__assert_fail@plt+0x4288>
   1642c:	mov	r3, #1
   16430:	str	r3, [sp, #68]	; 0x44
   16434:	mov	r8, r3
   16438:	b	163e8 <__assert_fail@plt+0x4f30>
   1643c:	mov	r3, #2
   16440:	mov	sl, r9
   16444:	str	r3, [sp, #176]	; 0xb0
   16448:	mov	r9, fp
   1644c:	ldr	r3, [sp, #56]	; 0x38
   16450:	b	162bc <__assert_fail@plt+0x4e04>
   16454:	ldr	r6, [sp, #48]	; 0x30
   16458:	b	15f08 <__assert_fail@plt+0x4a50>
   1645c:	ldr	r0, [sp, #24]
   16460:	mov	ip, r6
   16464:	cmp	r0, ip
   16468:	mov	r1, r7
   1646c:	mov	r2, r4
   16470:	ldr	r7, [sp, #104]	; 0x68
   16474:	ldr	r4, [sp, #32]
   16478:	ldr	r6, [sp, #108]	; 0x6c
   1647c:	ldr	r8, [sp, #112]	; 0x70
   16480:	ldr	r5, [sp, #116]	; 0x74
   16484:	bls	164b4 <__assert_fail@plt+0x4ffc>
   16488:	ldrb	r3, [r2]
   1648c:	cmp	r3, #0
   16490:	bne	164a4 <__assert_fail@plt+0x4fec>
   16494:	b	165c4 <__assert_fail@plt+0x510c>
   16498:	ldrb	r3, [r2, #1]!
   1649c:	cmp	r3, #0
   164a0:	beq	165c4 <__assert_fail@plt+0x510c>
   164a4:	add	r1, r1, #1
   164a8:	add	r3, sl, r1
   164ac:	cmp	r0, r3
   164b0:	bhi	16498 <__assert_fail@plt+0x4fe0>
   164b4:	mov	r2, #0
   164b8:	mov	r3, r7
   164bc:	str	r2, [sp, #32]
   164c0:	b	1628c <__assert_fail@plt+0x4dd4>
   164c4:	mov	r1, r7
   164c8:	ldr	r7, [sp, #104]	; 0x68
   164cc:	mov	r2, #0
   164d0:	ldr	r4, [sp, #32]
   164d4:	ldr	r6, [sp, #108]	; 0x6c
   164d8:	ldr	r8, [sp, #112]	; 0x70
   164dc:	ldr	r5, [sp, #116]	; 0x74
   164e0:	mov	r3, r7
   164e4:	str	r2, [sp, #32]
   164e8:	b	1628c <__assert_fail@plt+0x4dd4>
   164ec:	mov	r3, r5
   164f0:	eor	r3, r3, #1
   164f4:	ldr	r4, [sp, #32]
   164f8:	mov	r1, r7
   164fc:	str	r5, [sp, #32]
   16500:	ldr	r7, [sp, #104]	; 0x68
   16504:	ldr	r6, [sp, #108]	; 0x6c
   16508:	ldr	r8, [sp, #112]	; 0x70
   1650c:	ldr	r5, [sp, #116]	; 0x74
   16510:	uxtb	r3, r3
   16514:	b	1628c <__assert_fail@plt+0x4dd4>
   16518:	mov	sl, r9
   1651c:	str	r3, [sp, #56]	; 0x38
   16520:	mov	r9, fp
   16524:	ldr	r2, [sp, #64]	; 0x40
   16528:	b	162bc <__assert_fail@plt+0x4e04>
   1652c:	andeq	lr, r1, r0, lsl r0
   16530:	andeq	lr, r1, ip
   16534:	andeq	lr, r1, r4, lsl r0
   16538:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1653c:	ldr	r2, [sp, #44]	; 0x2c
   16540:	ldrb	r1, [r2, r3]
   16544:	sub	r2, r1, #33	; 0x21
   16548:	uxtb	r2, r2
   1654c:	cmp	r2, #29
   16550:	bhi	165d0 <__assert_fail@plt+0x5118>
   16554:	ldr	r0, [pc, #-36]	; 16538 <__assert_fail@plt+0x5080>
   16558:	mov	ip, #1
   1655c:	ands	r2, r0, ip, lsl r2
   16560:	beq	165f0 <__assert_fail@plt+0x5138>
   16564:	ldr	r2, [sp, #40]	; 0x28
   16568:	cmp	r2, #0
   1656c:	bne	166e4 <__assert_fail@plt+0x522c>
   16570:	add	r2, r8, #1
   16574:	cmp	fp, r8
   16578:	strbhi	r4, [r9, r8]
   1657c:	cmp	fp, r2
   16580:	movhi	r0, #34	; 0x22
   16584:	strbhi	r0, [r9, r2]
   16588:	add	r2, r8, #2
   1658c:	cmp	fp, r2
   16590:	movhi	r0, #34	; 0x22
   16594:	strbhi	r0, [r9, r2]
   16598:	add	r2, r8, #3
   1659c:	cmp	fp, r2
   165a0:	mov	sl, r3
   165a4:	ldr	r3, [sp, #40]	; 0x28
   165a8:	movhi	r0, #63	; 0x3f
   165ac:	mov	r4, r1
   165b0:	strbhi	r0, [r9, r2]
   165b4:	add	r8, r8, #4
   165b8:	mov	r1, r3
   165bc:	str	r3, [sp, #32]
   165c0:	b	15740 <__assert_fail@plt+0x4288>
   165c4:	str	r3, [sp, #32]
   165c8:	mov	r3, r7
   165cc:	b	1628c <__assert_fail@plt+0x4dd4>
   165d0:	mov	r1, #0
   165d4:	str	r1, [sp, #32]
   165d8:	b	15740 <__assert_fail@plt+0x4288>
   165dc:	mov	sl, r9
   165e0:	ldr	r3, [sp, #56]	; 0x38
   165e4:	mov	r9, fp
   165e8:	ldr	r2, [sp, #64]	; 0x40
   165ec:	b	162bc <__assert_fail@plt+0x4e04>
   165f0:	str	r2, [sp, #32]
   165f4:	mov	r1, #0
   165f8:	b	15740 <__assert_fail@plt+0x4288>
   165fc:	ldr	r2, [sp, #76]	; 0x4c
   16600:	mov	sl, r9
   16604:	mov	r9, fp
   16608:	mov	fp, r8
   1660c:	ldr	r1, [sp, #72]	; 0x48
   16610:	cmp	r1, #0
   16614:	moveq	r3, #0
   16618:	andne	r3, r2, #1
   1661c:	cmp	r3, #0
   16620:	beq	1664c <__assert_fail@plt+0x5194>
   16624:	ldrb	r3, [r1]
   16628:	cmp	r3, #0
   1662c:	beq	1664c <__assert_fail@plt+0x5194>
   16630:	mov	r2, r1
   16634:	cmp	r9, fp
   16638:	strbhi	r3, [sl, fp]
   1663c:	ldrb	r3, [r2, #1]!
   16640:	add	fp, fp, #1
   16644:	cmp	r3, #0
   16648:	bne	16634 <__assert_fail@plt+0x517c>
   1664c:	cmp	r9, fp
   16650:	movhi	r3, #0
   16654:	strbhi	r3, [sl, fp]
   16658:	b	16314 <__assert_fail@plt+0x4e5c>
   1665c:	ldr	r3, [sp, #192]	; 0xc0
   16660:	mov	ip, #5
   16664:	str	r3, [sp, #16]
   16668:	ldr	r3, [sp, #188]	; 0xbc
   1666c:	ldr	r2, [sp, #44]	; 0x2c
   16670:	str	r3, [sp, #12]
   16674:	ldr	r3, [sp, #184]	; 0xb8
   16678:	ldr	r1, [sp, #84]	; 0x54
   1667c:	str	r3, [sp, #8]
   16680:	ldr	r3, [sp, #180]	; 0xb4
   16684:	mov	r0, r9
   16688:	str	r3, [sp, #4]
   1668c:	str	ip, [sp]
   16690:	ldr	r3, [sp, #24]
   16694:	bl	1516c <__assert_fail@plt+0x3cb4>
   16698:	mov	fp, r0
   1669c:	b	16314 <__assert_fail@plt+0x4e5c>
   166a0:	mov	sl, r9
   166a4:	mov	r9, fp
   166a8:	mov	fp, r8
   166ac:	b	1660c <__assert_fail@plt+0x5154>
   166b0:	ldr	r1, [sp, #176]	; 0xb0
   166b4:	bl	1504c <__assert_fail@plt+0x3b94>
   166b8:	str	r0, [sp, #192]	; 0xc0
   166bc:	b	15628 <__assert_fail@plt+0x4170>
   166c0:	ldr	r1, [sp, #176]	; 0xb0
   166c4:	bl	1504c <__assert_fail@plt+0x3b94>
   166c8:	str	r0, [sp, #188]	; 0xbc
   166cc:	b	15608 <__assert_fail@plt+0x4150>
   166d0:	mov	sl, r9
   166d4:	mov	r2, r3
   166d8:	mov	r9, fp
   166dc:	mov	fp, r8
   166e0:	b	1660c <__assert_fail@plt+0x5154>
   166e4:	mov	sl, r9
   166e8:	mov	r9, fp
   166ec:	b	162d0 <__assert_fail@plt+0x4e18>
   166f0:	push	{r4, r5, r6, lr}
   166f4:	mov	r5, r0
   166f8:	bl	11338 <__errno_location@plt>
   166fc:	cmp	r5, #0
   16700:	mov	r1, #48	; 0x30
   16704:	mov	r4, r0
   16708:	ldr	r0, [pc, #16]	; 16720 <__assert_fail@plt+0x5268>
   1670c:	ldr	r6, [r4]
   16710:	movne	r0, r5
   16714:	bl	1ae60 <__assert_fail@plt+0x99a8>
   16718:	str	r6, [r4]
   1671c:	pop	{r4, r5, r6, pc}
   16720:	ldrdeq	pc, [r2], -r4
   16724:	ldr	r3, [pc, #12]	; 16738 <__assert_fail@plt+0x5280>
   16728:	cmp	r0, #0
   1672c:	moveq	r0, r3
   16730:	ldr	r0, [r0]
   16734:	bx	lr
   16738:	ldrdeq	pc, [r2], -r4
   1673c:	ldr	r3, [pc, #12]	; 16750 <__assert_fail@plt+0x5298>
   16740:	cmp	r0, #0
   16744:	moveq	r0, r3
   16748:	str	r1, [r0]
   1674c:	bx	lr
   16750:	ldrdeq	pc, [r2], -r4
   16754:	ldr	r3, [pc, #52]	; 16790 <__assert_fail@plt+0x52d8>
   16758:	cmp	r0, #0
   1675c:	moveq	r0, r3
   16760:	add	r3, r0, #8
   16764:	push	{lr}		; (str lr, [sp, #-4]!)
   16768:	lsr	lr, r1, #5
   1676c:	and	r1, r1, #31
   16770:	ldr	ip, [r3, lr, lsl #2]
   16774:	lsr	r0, ip, r1
   16778:	eor	r2, r2, r0
   1677c:	and	r2, r2, #1
   16780:	and	r0, r0, #1
   16784:	eor	r1, ip, r2, lsl r1
   16788:	str	r1, [r3, lr, lsl #2]
   1678c:	pop	{pc}		; (ldr pc, [sp], #4)
   16790:	ldrdeq	pc, [r2], -r4
   16794:	ldr	r3, [pc, #16]	; 167ac <__assert_fail@plt+0x52f4>
   16798:	cmp	r0, #0
   1679c:	movne	r3, r0
   167a0:	ldr	r0, [r3, #4]
   167a4:	str	r1, [r3, #4]
   167a8:	bx	lr
   167ac:	ldrdeq	pc, [r2], -r4
   167b0:	ldr	r3, [pc, #44]	; 167e4 <__assert_fail@plt+0x532c>
   167b4:	cmp	r0, #0
   167b8:	moveq	r0, r3
   167bc:	mov	ip, #10
   167c0:	cmp	r2, #0
   167c4:	cmpne	r1, #0
   167c8:	str	ip, [r0]
   167cc:	beq	167dc <__assert_fail@plt+0x5324>
   167d0:	str	r1, [r0, #40]	; 0x28
   167d4:	str	r2, [r0, #44]	; 0x2c
   167d8:	bx	lr
   167dc:	push	{r4, lr}
   167e0:	bl	114a0 <abort@plt>
   167e4:	ldrdeq	pc, [r2], -r4
   167e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167ec:	sub	sp, sp, #24
   167f0:	ldr	ip, [pc, #108]	; 16864 <__assert_fail@plt+0x53ac>
   167f4:	ldr	r4, [sp, #56]	; 0x38
   167f8:	mov	r9, r2
   167fc:	cmp	r4, #0
   16800:	moveq	r4, ip
   16804:	mov	sl, r3
   16808:	mov	r7, r0
   1680c:	mov	r8, r1
   16810:	bl	11338 <__errno_location@plt>
   16814:	ldr	r3, [r4, #44]	; 0x2c
   16818:	mov	r1, r8
   1681c:	ldr	r6, [r0]
   16820:	str	r3, [sp, #16]
   16824:	ldr	r2, [r4, #40]	; 0x28
   16828:	add	r3, r4, #8
   1682c:	str	r3, [sp, #8]
   16830:	str	r2, [sp, #12]
   16834:	ldr	r2, [r4, #4]
   16838:	mov	r5, r0
   1683c:	str	r2, [sp, #4]
   16840:	ldr	ip, [r4]
   16844:	mov	r3, sl
   16848:	mov	r2, r9
   1684c:	mov	r0, r7
   16850:	str	ip, [sp]
   16854:	bl	1516c <__assert_fail@plt+0x3cb4>
   16858:	str	r6, [r5]
   1685c:	add	sp, sp, #24
   16860:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16864:	ldrdeq	pc, [r2], -r4
   16868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1686c:	cmp	r2, #0
   16870:	sub	sp, sp, #36	; 0x24
   16874:	ldr	r4, [pc, #164]	; 16920 <__assert_fail@plt+0x5468>
   16878:	mov	r8, r1
   1687c:	movne	r4, r2
   16880:	mov	r7, r0
   16884:	bl	11338 <__errno_location@plt>
   16888:	ldr	r3, [r4, #44]	; 0x2c
   1688c:	ldr	r5, [r4, #4]
   16890:	add	r9, r4, #8
   16894:	orr	r5, r5, #1
   16898:	mov	r1, #0
   1689c:	mov	r2, r7
   168a0:	ldr	fp, [r0]
   168a4:	str	r3, [sp, #16]
   168a8:	ldr	r3, [r4, #40]	; 0x28
   168ac:	stmib	sp, {r5, r9}
   168b0:	str	r3, [sp, #12]
   168b4:	ldr	r3, [r4]
   168b8:	mov	r6, r0
   168bc:	str	r3, [sp]
   168c0:	mov	r0, r1
   168c4:	mov	r3, r8
   168c8:	bl	1516c <__assert_fail@plt+0x3cb4>
   168cc:	add	r1, r0, #1
   168d0:	mov	r0, r1
   168d4:	str	r1, [sp, #28]
   168d8:	bl	1a91c <__assert_fail@plt+0x9464>
   168dc:	ldr	r3, [r4, #44]	; 0x2c
   168e0:	ldr	r1, [sp, #28]
   168e4:	str	r3, [sp, #16]
   168e8:	ldr	r3, [r4, #40]	; 0x28
   168ec:	str	r5, [sp, #4]
   168f0:	str	r3, [sp, #12]
   168f4:	str	r9, [sp, #8]
   168f8:	ldr	ip, [r4]
   168fc:	mov	r3, r8
   16900:	mov	r2, r7
   16904:	str	ip, [sp]
   16908:	mov	sl, r0
   1690c:	bl	1516c <__assert_fail@plt+0x3cb4>
   16910:	mov	r0, sl
   16914:	str	fp, [r6]
   16918:	add	sp, sp, #36	; 0x24
   1691c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16920:	ldrdeq	pc, [r2], -r4
   16924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16928:	cmp	r3, #0
   1692c:	sub	sp, sp, #44	; 0x2c
   16930:	ldr	r4, [pc, #192]	; 169f8 <__assert_fail@plt+0x5540>
   16934:	mov	r6, r2
   16938:	movne	r4, r3
   1693c:	mov	r9, r1
   16940:	mov	r8, r0
   16944:	bl	11338 <__errno_location@plt>
   16948:	ldr	r3, [r4, #44]	; 0x2c
   1694c:	ldr	r5, [r4, #4]
   16950:	add	sl, r4, #8
   16954:	cmp	r6, #0
   16958:	orreq	r5, r5, #1
   1695c:	mov	r1, #0
   16960:	ldr	r2, [r0]
   16964:	str	r3, [sp, #16]
   16968:	ldr	r3, [r4, #40]	; 0x28
   1696c:	stmib	sp, {r5, sl}
   16970:	str	r3, [sp, #12]
   16974:	ldr	r3, [r4]
   16978:	mov	r7, r0
   1697c:	str	r2, [sp, #28]
   16980:	str	r3, [sp]
   16984:	mov	r2, r8
   16988:	mov	r3, r9
   1698c:	mov	r0, r1
   16990:	bl	1516c <__assert_fail@plt+0x3cb4>
   16994:	add	r1, r0, #1
   16998:	mov	fp, r0
   1699c:	mov	r0, r1
   169a0:	str	r1, [sp, #36]	; 0x24
   169a4:	bl	1a91c <__assert_fail@plt+0x9464>
   169a8:	ldr	r3, [r4, #44]	; 0x2c
   169ac:	mov	r2, r8
   169b0:	str	r3, [sp, #16]
   169b4:	ldr	r3, [r4, #40]	; 0x28
   169b8:	str	r5, [sp, #4]
   169bc:	str	r3, [sp, #12]
   169c0:	str	sl, [sp, #8]
   169c4:	ldr	ip, [r4]
   169c8:	ldr	r1, [sp, #36]	; 0x24
   169cc:	mov	r3, r9
   169d0:	str	ip, [sp]
   169d4:	str	r0, [sp, #32]
   169d8:	bl	1516c <__assert_fail@plt+0x3cb4>
   169dc:	ldr	r2, [sp, #28]
   169e0:	cmp	r6, #0
   169e4:	str	r2, [r7]
   169e8:	ldr	r0, [sp, #32]
   169ec:	strne	fp, [r6]
   169f0:	add	sp, sp, #44	; 0x2c
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f8:	ldrdeq	pc, [r2], -r4
   169fc:	push	{r4, r5, r6, r7, r8, lr}
   16a00:	ldr	r6, [pc, #116]	; 16a7c <__assert_fail@plt+0x55c4>
   16a04:	ldr	r3, [r6, #4]
   16a08:	ldr	r7, [r6]
   16a0c:	cmp	r3, #1
   16a10:	movgt	r5, r7
   16a14:	movgt	r4, #1
   16a18:	ble	16a38 <__assert_fail@plt+0x5580>
   16a1c:	ldr	r0, [r5, #12]
   16a20:	bl	13ef8 <__assert_fail@plt+0x2a40>
   16a24:	ldr	r3, [r6, #4]
   16a28:	add	r4, r4, #1
   16a2c:	cmp	r3, r4
   16a30:	add	r5, r5, #8
   16a34:	bgt	16a1c <__assert_fail@plt+0x5564>
   16a38:	ldr	r0, [r7, #4]
   16a3c:	ldr	r4, [pc, #60]	; 16a80 <__assert_fail@plt+0x55c8>
   16a40:	cmp	r0, r4
   16a44:	beq	16a58 <__assert_fail@plt+0x55a0>
   16a48:	bl	13ef8 <__assert_fail@plt+0x2a40>
   16a4c:	mov	r3, #256	; 0x100
   16a50:	str	r4, [r6, #12]
   16a54:	str	r3, [r6, #8]
   16a58:	ldr	r4, [pc, #36]	; 16a84 <__assert_fail@plt+0x55cc>
   16a5c:	cmp	r7, r4
   16a60:	beq	16a70 <__assert_fail@plt+0x55b8>
   16a64:	mov	r0, r7
   16a68:	bl	13ef8 <__assert_fail@plt+0x2a40>
   16a6c:	str	r4, [r6]
   16a70:	mov	r3, #1
   16a74:	str	r3, [r6, #4]
   16a78:	pop	{r4, r5, r6, r7, r8, pc}
   16a7c:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   16a80:	andeq	pc, r2, r4, lsl #4
   16a84:	andeq	pc, r2, r4, ror #2
   16a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a8c:	sub	sp, sp, #44	; 0x2c
   16a90:	mov	r5, r0
   16a94:	mov	sl, r1
   16a98:	bl	11338 <__errno_location@plt>
   16a9c:	ldr	r4, [pc, #400]	; 16c34 <__assert_fail@plt+0x577c>
   16aa0:	cmn	r5, #-2147483647	; 0x80000001
   16aa4:	ldr	r6, [r4]
   16aa8:	mov	r8, r0
   16aac:	movne	r0, #0
   16ab0:	moveq	r0, #1
   16ab4:	ldr	r3, [r8]
   16ab8:	orrs	r0, r0, r5, lsr #31
   16abc:	str	r3, [sp, #24]
   16ac0:	bne	16c30 <__assert_fail@plt+0x5778>
   16ac4:	ldr	r2, [r4, #4]
   16ac8:	cmp	r5, r2
   16acc:	blt	16b2c <__assert_fail@plt+0x5674>
   16ad0:	add	r7, r4, #8
   16ad4:	cmp	r6, r7
   16ad8:	str	r2, [sp, #36]	; 0x24
   16adc:	beq	16c00 <__assert_fail@plt+0x5748>
   16ae0:	mov	r3, #8
   16ae4:	sub	r2, r5, r2
   16ae8:	mov	r0, r6
   16aec:	str	r3, [sp]
   16af0:	add	r2, r2, #1
   16af4:	mvn	r3, #-2147483648	; 0x80000000
   16af8:	add	r1, sp, #36	; 0x24
   16afc:	bl	1ab38 <__assert_fail@plt+0x9680>
   16b00:	mov	r6, r0
   16b04:	str	r0, [r4]
   16b08:	ldr	r0, [r4, #4]
   16b0c:	ldr	r2, [sp, #36]	; 0x24
   16b10:	mov	r1, #0
   16b14:	sub	r2, r2, r0
   16b18:	add	r0, r6, r0, lsl #3
   16b1c:	lsl	r2, r2, #3
   16b20:	bl	11368 <memset@plt>
   16b24:	ldr	r3, [sp, #36]	; 0x24
   16b28:	str	r3, [r4, #4]
   16b2c:	ldr	r4, [pc, #260]	; 16c38 <__assert_fail@plt+0x5780>
   16b30:	add	fp, r6, r5, lsl #3
   16b34:	ldr	r9, [r6, r5, lsl #3]
   16b38:	ldr	r0, [r4, #4]
   16b3c:	ldr	r3, [r4]
   16b40:	ldr	r7, [fp, #4]
   16b44:	ldr	r1, [r4, #44]	; 0x2c
   16b48:	ldr	r2, [r4, #40]	; 0x28
   16b4c:	orr	r0, r0, #1
   16b50:	str	r3, [sp]
   16b54:	add	r3, r4, #8
   16b58:	str	r0, [sp, #28]
   16b5c:	str	r0, [sp, #4]
   16b60:	str	r1, [sp, #16]
   16b64:	str	r2, [sp, #12]
   16b68:	str	r3, [sp, #8]
   16b6c:	mov	r0, r7
   16b70:	mov	r1, r9
   16b74:	mvn	r3, #0
   16b78:	mov	r2, sl
   16b7c:	bl	1516c <__assert_fail@plt+0x3cb4>
   16b80:	cmp	r9, r0
   16b84:	bhi	16bec <__assert_fail@plt+0x5734>
   16b88:	add	r3, r4, #48	; 0x30
   16b8c:	add	r9, r0, #1
   16b90:	cmp	r7, r3
   16b94:	str	r9, [r6, r5, lsl #3]
   16b98:	beq	16ba4 <__assert_fail@plt+0x56ec>
   16b9c:	mov	r0, r7
   16ba0:	bl	13ef8 <__assert_fail@plt+0x2a40>
   16ba4:	mov	r0, r9
   16ba8:	bl	1a91c <__assert_fail@plt+0x9464>
   16bac:	ldr	ip, [r4, #44]	; 0x2c
   16bb0:	ldr	r3, [r4]
   16bb4:	ldr	lr, [r4, #40]	; 0x28
   16bb8:	ldr	r4, [pc, #124]	; 16c3c <__assert_fail@plt+0x5784>
   16bbc:	mov	r2, sl
   16bc0:	mov	r1, r9
   16bc4:	str	r0, [fp, #4]
   16bc8:	str	r4, [sp, #8]
   16bcc:	ldr	r4, [sp, #28]
   16bd0:	str	r3, [sp]
   16bd4:	str	r4, [sp, #4]
   16bd8:	str	ip, [sp, #16]
   16bdc:	str	lr, [sp, #12]
   16be0:	mvn	r3, #0
   16be4:	mov	r7, r0
   16be8:	bl	1516c <__assert_fail@plt+0x3cb4>
   16bec:	ldr	r3, [sp, #24]
   16bf0:	mov	r0, r7
   16bf4:	str	r3, [r8]
   16bf8:	add	sp, sp, #44	; 0x2c
   16bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c00:	mov	r3, #8
   16c04:	sub	r2, r5, r2
   16c08:	str	r3, [sp]
   16c0c:	add	r1, sp, #36	; 0x24
   16c10:	add	r2, r2, #1
   16c14:	mvn	r3, #-2147483648	; 0x80000000
   16c18:	bl	1ab38 <__assert_fail@plt+0x9680>
   16c1c:	mov	r6, r0
   16c20:	ldm	r7, {r0, r1}
   16c24:	str	r6, [r4]
   16c28:	stm	r6, {r0, r1}
   16c2c:	b	16b08 <__assert_fail@plt+0x5650>
   16c30:	bl	114a0 <abort@plt>
   16c34:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   16c38:	ldrdeq	pc, [r2], -r4
   16c3c:	ldrdeq	pc, [r2], -ip
   16c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c44:	sub	sp, sp, #52	; 0x34
   16c48:	mov	r5, r0
   16c4c:	mov	sl, r1
   16c50:	mov	fp, r2
   16c54:	bl	11338 <__errno_location@plt>
   16c58:	ldr	r4, [pc, #408]	; 16df8 <__assert_fail@plt+0x5940>
   16c5c:	cmn	r5, #-2147483647	; 0x80000001
   16c60:	ldr	r6, [r4]
   16c64:	mov	r8, r0
   16c68:	movne	r0, #0
   16c6c:	moveq	r0, #1
   16c70:	ldr	r3, [r8]
   16c74:	orrs	r0, r0, r5, lsr #31
   16c78:	str	r3, [sp, #28]
   16c7c:	bne	16df4 <__assert_fail@plt+0x593c>
   16c80:	ldr	r2, [r4, #4]
   16c84:	cmp	r5, r2
   16c88:	blt	16ce8 <__assert_fail@plt+0x5830>
   16c8c:	add	r7, r4, #8
   16c90:	cmp	r6, r7
   16c94:	str	r2, [sp, #44]	; 0x2c
   16c98:	beq	16dc4 <__assert_fail@plt+0x590c>
   16c9c:	mov	r3, #8
   16ca0:	sub	r2, r5, r2
   16ca4:	mov	r0, r6
   16ca8:	str	r3, [sp]
   16cac:	add	r2, r2, #1
   16cb0:	mvn	r3, #-2147483648	; 0x80000000
   16cb4:	add	r1, sp, #44	; 0x2c
   16cb8:	bl	1ab38 <__assert_fail@plt+0x9680>
   16cbc:	mov	r6, r0
   16cc0:	str	r0, [r4]
   16cc4:	ldr	r0, [r4, #4]
   16cc8:	ldr	r2, [sp, #44]	; 0x2c
   16ccc:	mov	r1, #0
   16cd0:	sub	r2, r2, r0
   16cd4:	add	r0, r6, r0, lsl #3
   16cd8:	lsl	r2, r2, #3
   16cdc:	bl	11368 <memset@plt>
   16ce0:	ldr	r3, [sp, #44]	; 0x2c
   16ce4:	str	r3, [r4, #4]
   16ce8:	ldr	r4, [pc, #268]	; 16dfc <__assert_fail@plt+0x5944>
   16cec:	add	r3, r6, r5, lsl #3
   16cf0:	str	r3, [sp, #32]
   16cf4:	ldr	r7, [r3, #4]
   16cf8:	ldr	r0, [r4, #4]
   16cfc:	ldr	r3, [r4]
   16d00:	ldr	r9, [r6, r5, lsl #3]
   16d04:	ldr	r1, [r4, #44]	; 0x2c
   16d08:	ldr	r2, [r4, #40]	; 0x28
   16d0c:	orr	r0, r0, #1
   16d10:	str	r3, [sp]
   16d14:	add	r3, r4, #8
   16d18:	str	r0, [sp, #36]	; 0x24
   16d1c:	str	r0, [sp, #4]
   16d20:	str	r1, [sp, #16]
   16d24:	str	r2, [sp, #12]
   16d28:	str	r3, [sp, #8]
   16d2c:	mov	r0, r7
   16d30:	mov	r1, r9
   16d34:	mov	r3, fp
   16d38:	mov	r2, sl
   16d3c:	bl	1516c <__assert_fail@plt+0x3cb4>
   16d40:	cmp	r9, r0
   16d44:	bhi	16db0 <__assert_fail@plt+0x58f8>
   16d48:	add	r3, r4, #48	; 0x30
   16d4c:	add	r9, r0, #1
   16d50:	cmp	r7, r3
   16d54:	str	r9, [r6, r5, lsl #3]
   16d58:	beq	16d64 <__assert_fail@plt+0x58ac>
   16d5c:	mov	r0, r7
   16d60:	bl	13ef8 <__assert_fail@plt+0x2a40>
   16d64:	mov	r0, r9
   16d68:	bl	1a91c <__assert_fail@plt+0x9464>
   16d6c:	ldr	ip, [sp, #32]
   16d70:	ldr	lr, [r4, #44]	; 0x2c
   16d74:	ldr	r5, [r4, #40]	; 0x28
   16d78:	mov	r3, fp
   16d7c:	mov	r2, sl
   16d80:	mov	r1, r9
   16d84:	str	r0, [ip, #4]
   16d88:	ldr	ip, [r4]
   16d8c:	ldr	r4, [pc, #108]	; 16e00 <__assert_fail@plt+0x5948>
   16d90:	str	lr, [sp, #16]
   16d94:	str	r4, [sp, #8]
   16d98:	ldr	r4, [sp, #36]	; 0x24
   16d9c:	str	r5, [sp, #12]
   16da0:	str	r4, [sp, #4]
   16da4:	str	ip, [sp]
   16da8:	mov	r7, r0
   16dac:	bl	1516c <__assert_fail@plt+0x3cb4>
   16db0:	ldr	r3, [sp, #28]
   16db4:	mov	r0, r7
   16db8:	str	r3, [r8]
   16dbc:	add	sp, sp, #52	; 0x34
   16dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc4:	mov	r3, #8
   16dc8:	sub	r2, r5, r2
   16dcc:	str	r3, [sp]
   16dd0:	add	r1, sp, #44	; 0x2c
   16dd4:	add	r2, r2, #1
   16dd8:	mvn	r3, #-2147483648	; 0x80000000
   16ddc:	bl	1ab38 <__assert_fail@plt+0x9680>
   16de0:	mov	r6, r0
   16de4:	ldm	r7, {r0, r1}
   16de8:	str	r6, [r4]
   16dec:	stm	r6, {r0, r1}
   16df0:	b	16cc4 <__assert_fail@plt+0x580c>
   16df4:	bl	114a0 <abort@plt>
   16df8:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   16dfc:	ldrdeq	pc, [r2], -r4
   16e00:	ldrdeq	pc, [r2], -ip
   16e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e08:	sub	sp, sp, #44	; 0x2c
   16e0c:	mov	sl, r0
   16e10:	bl	11338 <__errno_location@plt>
   16e14:	ldr	r4, [pc, #352]	; 16f7c <__assert_fail@plt+0x5ac4>
   16e18:	ldr	r2, [r4, #4]
   16e1c:	ldr	r5, [r4]
   16e20:	cmp	r2, #0
   16e24:	ldr	r3, [r0]
   16e28:	mov	r8, r0
   16e2c:	str	r3, [sp, #28]
   16e30:	bgt	16e8c <__assert_fail@plt+0x59d4>
   16e34:	add	r6, r4, #8
   16e38:	cmp	r5, r6
   16e3c:	str	r2, [sp, #36]	; 0x24
   16e40:	beq	16f4c <__assert_fail@plt+0x5a94>
   16e44:	mov	r3, #8
   16e48:	mov	r0, r5
   16e4c:	str	r3, [sp]
   16e50:	rsb	r2, r2, #1
   16e54:	mvn	r3, #-2147483648	; 0x80000000
   16e58:	add	r1, sp, #36	; 0x24
   16e5c:	bl	1ab38 <__assert_fail@plt+0x9680>
   16e60:	mov	r5, r0
   16e64:	str	r0, [r4]
   16e68:	ldr	r0, [r4, #4]
   16e6c:	ldr	r2, [sp, #36]	; 0x24
   16e70:	mov	r1, #0
   16e74:	sub	r2, r2, r0
   16e78:	add	r0, r5, r0, lsl #3
   16e7c:	lsl	r2, r2, #3
   16e80:	bl	11368 <memset@plt>
   16e84:	ldr	r3, [sp, #36]	; 0x24
   16e88:	str	r3, [r4, #4]
   16e8c:	ldr	r4, [pc, #236]	; 16f80 <__assert_fail@plt+0x5ac8>
   16e90:	ldr	r9, [r5]
   16e94:	ldr	r6, [r5, #4]
   16e98:	ldr	r7, [r4, #4]
   16e9c:	ldr	r1, [r4, #44]	; 0x2c
   16ea0:	ldr	r2, [r4, #40]	; 0x28
   16ea4:	ldr	r3, [r4]
   16ea8:	orr	r7, r7, #1
   16eac:	add	fp, r4, #8
   16eb0:	str	r1, [sp, #16]
   16eb4:	str	r2, [sp, #12]
   16eb8:	str	r3, [sp]
   16ebc:	str	r7, [sp, #4]
   16ec0:	str	fp, [sp, #8]
   16ec4:	mov	r1, r9
   16ec8:	mov	r0, r6
   16ecc:	mvn	r3, #0
   16ed0:	mov	r2, sl
   16ed4:	bl	1516c <__assert_fail@plt+0x3cb4>
   16ed8:	cmp	r9, r0
   16edc:	bhi	16f38 <__assert_fail@plt+0x5a80>
   16ee0:	add	r3, r4, #48	; 0x30
   16ee4:	add	r9, r0, #1
   16ee8:	cmp	r6, r3
   16eec:	str	r9, [r5]
   16ef0:	beq	16efc <__assert_fail@plt+0x5a44>
   16ef4:	mov	r0, r6
   16ef8:	bl	13ef8 <__assert_fail@plt+0x2a40>
   16efc:	mov	r0, r9
   16f00:	bl	1a91c <__assert_fail@plt+0x9464>
   16f04:	ldr	ip, [r4, #44]	; 0x2c
   16f08:	ldr	r3, [r4]
   16f0c:	ldr	lr, [r4, #40]	; 0x28
   16f10:	mov	r2, sl
   16f14:	mov	r1, r9
   16f18:	str	r0, [r5, #4]
   16f1c:	str	r3, [sp]
   16f20:	stmib	sp, {r7, fp}
   16f24:	str	ip, [sp, #16]
   16f28:	str	lr, [sp, #12]
   16f2c:	mvn	r3, #0
   16f30:	mov	r6, r0
   16f34:	bl	1516c <__assert_fail@plt+0x3cb4>
   16f38:	ldr	r3, [sp, #28]
   16f3c:	mov	r0, r6
   16f40:	str	r3, [r8]
   16f44:	add	sp, sp, #44	; 0x2c
   16f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f4c:	mov	r3, #8
   16f50:	str	r3, [sp]
   16f54:	add	r1, sp, #36	; 0x24
   16f58:	rsb	r2, r2, #1
   16f5c:	mvn	r3, #-2147483648	; 0x80000000
   16f60:	mov	r0, #0
   16f64:	bl	1ab38 <__assert_fail@plt+0x9680>
   16f68:	mov	r5, r0
   16f6c:	ldm	r6, {r0, r1}
   16f70:	str	r5, [r4]
   16f74:	stm	r5, {r0, r1}
   16f78:	b	16e68 <__assert_fail@plt+0x59b0>
   16f7c:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   16f80:	ldrdeq	pc, [r2], -r4
   16f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f88:	sub	sp, sp, #44	; 0x2c
   16f8c:	mov	r9, r0
   16f90:	mov	sl, r1
   16f94:	bl	11338 <__errno_location@plt>
   16f98:	ldr	r4, [pc, #364]	; 1710c <__assert_fail@plt+0x5c54>
   16f9c:	ldr	r2, [r4, #4]
   16fa0:	ldr	r5, [r4]
   16fa4:	cmp	r2, #0
   16fa8:	ldr	r3, [r0]
   16fac:	mov	r7, r0
   16fb0:	str	r3, [sp, #24]
   16fb4:	bgt	17010 <__assert_fail@plt+0x5b58>
   16fb8:	add	r6, r4, #8
   16fbc:	cmp	r5, r6
   16fc0:	str	r2, [sp, #36]	; 0x24
   16fc4:	beq	170dc <__assert_fail@plt+0x5c24>
   16fc8:	mov	r3, #8
   16fcc:	mov	r0, r5
   16fd0:	str	r3, [sp]
   16fd4:	rsb	r2, r2, #1
   16fd8:	mvn	r3, #-2147483648	; 0x80000000
   16fdc:	add	r1, sp, #36	; 0x24
   16fe0:	bl	1ab38 <__assert_fail@plt+0x9680>
   16fe4:	mov	r5, r0
   16fe8:	str	r0, [r4]
   16fec:	ldr	r0, [r4, #4]
   16ff0:	ldr	r2, [sp, #36]	; 0x24
   16ff4:	mov	r1, #0
   16ff8:	sub	r2, r2, r0
   16ffc:	add	r0, r5, r0, lsl #3
   17000:	lsl	r2, r2, #3
   17004:	bl	11368 <memset@plt>
   17008:	ldr	r3, [sp, #36]	; 0x24
   1700c:	str	r3, [r4, #4]
   17010:	ldr	r4, [pc, #248]	; 17110 <__assert_fail@plt+0x5c58>
   17014:	ldr	r8, [r5]
   17018:	ldr	r6, [r5, #4]
   1701c:	ldr	r0, [r4, #4]
   17020:	ldr	r1, [r4, #44]	; 0x2c
   17024:	ldr	r2, [r4, #40]	; 0x28
   17028:	ldr	r3, [r4]
   1702c:	orr	r0, r0, #1
   17030:	add	fp, r4, #8
   17034:	str	r0, [sp, #28]
   17038:	str	r0, [sp, #4]
   1703c:	str	r1, [sp, #16]
   17040:	str	r2, [sp, #12]
   17044:	str	r3, [sp]
   17048:	str	fp, [sp, #8]
   1704c:	mov	r1, r8
   17050:	mov	r0, r6
   17054:	mov	r3, sl
   17058:	mov	r2, r9
   1705c:	bl	1516c <__assert_fail@plt+0x3cb4>
   17060:	cmp	r8, r0
   17064:	bhi	170c8 <__assert_fail@plt+0x5c10>
   17068:	add	r3, r4, #48	; 0x30
   1706c:	add	r8, r0, #1
   17070:	cmp	r6, r3
   17074:	str	r8, [r5]
   17078:	beq	17084 <__assert_fail@plt+0x5bcc>
   1707c:	mov	r0, r6
   17080:	bl	13ef8 <__assert_fail@plt+0x2a40>
   17084:	mov	r0, r8
   17088:	bl	1a91c <__assert_fail@plt+0x9464>
   1708c:	ldr	lr, [r4, #44]	; 0x2c
   17090:	ldr	ip, [r4]
   17094:	mov	r3, sl
   17098:	mov	r2, r9
   1709c:	mov	r1, r8
   170a0:	str	r0, [r5, #4]
   170a4:	ldr	r5, [r4, #40]	; 0x28
   170a8:	ldr	r4, [sp, #28]
   170ac:	str	fp, [sp, #8]
   170b0:	str	r4, [sp, #4]
   170b4:	str	lr, [sp, #16]
   170b8:	str	r5, [sp, #12]
   170bc:	str	ip, [sp]
   170c0:	mov	r6, r0
   170c4:	bl	1516c <__assert_fail@plt+0x3cb4>
   170c8:	ldr	r3, [sp, #24]
   170cc:	mov	r0, r6
   170d0:	str	r3, [r7]
   170d4:	add	sp, sp, #44	; 0x2c
   170d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170dc:	mov	r3, #8
   170e0:	str	r3, [sp]
   170e4:	add	r1, sp, #36	; 0x24
   170e8:	rsb	r2, r2, #1
   170ec:	mvn	r3, #-2147483648	; 0x80000000
   170f0:	mov	r0, #0
   170f4:	bl	1ab38 <__assert_fail@plt+0x9680>
   170f8:	mov	r5, r0
   170fc:	ldm	r6, {r0, r1}
   17100:	str	r5, [r4]
   17104:	stm	r5, {r0, r1}
   17108:	b	16fec <__assert_fail@plt+0x5b34>
   1710c:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   17110:	ldrdeq	pc, [r2], -r4
   17114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17118:	sub	sp, sp, #132	; 0x84
   1711c:	mov	r5, r1
   17120:	mov	r4, r0
   17124:	mov	r9, r2
   17128:	add	r0, sp, #80	; 0x50
   1712c:	mov	r2, #48	; 0x30
   17130:	mov	r1, #0
   17134:	bl	11368 <memset@plt>
   17138:	cmp	r5, #10
   1713c:	beq	172f4 <__assert_fail@plt+0x5e3c>
   17140:	add	lr, sp, #80	; 0x50
   17144:	str	r5, [sp, #80]	; 0x50
   17148:	ldm	lr!, {r0, r1, r2, r3}
   1714c:	add	ip, sp, #32
   17150:	ldr	r6, [pc, #416]	; 172f8 <__assert_fail@plt+0x5e40>
   17154:	stmia	ip!, {r0, r1, r2, r3}
   17158:	ldm	lr!, {r0, r1, r2, r3}
   1715c:	stmia	ip!, {r0, r1, r2, r3}
   17160:	ldm	lr, {r0, r1, r2, r3}
   17164:	stm	ip, {r0, r1, r2, r3}
   17168:	bl	11338 <__errno_location@plt>
   1716c:	cmn	r4, #-2147483647	; 0x80000001
   17170:	ldr	r5, [r6]
   17174:	mov	r7, r0
   17178:	movne	r0, #0
   1717c:	moveq	r0, #1
   17180:	ldr	r3, [r7]
   17184:	orrs	r0, r0, r4, lsr #31
   17188:	str	r3, [sp, #24]
   1718c:	bne	172f4 <__assert_fail@plt+0x5e3c>
   17190:	ldr	r2, [r6, #4]
   17194:	cmp	r4, r2
   17198:	blt	171f8 <__assert_fail@plt+0x5d40>
   1719c:	add	r8, r6, #8
   171a0:	cmp	r5, r8
   171a4:	str	r2, [sp, #80]	; 0x50
   171a8:	beq	172c4 <__assert_fail@plt+0x5e0c>
   171ac:	mov	r3, #8
   171b0:	sub	r2, r4, r2
   171b4:	mov	r0, r5
   171b8:	str	r3, [sp]
   171bc:	add	r2, r2, #1
   171c0:	add	r1, sp, #80	; 0x50
   171c4:	mvn	r3, #-2147483648	; 0x80000000
   171c8:	bl	1ab38 <__assert_fail@plt+0x9680>
   171cc:	mov	r5, r0
   171d0:	str	r0, [r6]
   171d4:	ldr	r0, [r6, #4]
   171d8:	ldr	r2, [sp, #80]	; 0x50
   171dc:	mov	r1, #0
   171e0:	sub	r2, r2, r0
   171e4:	add	r0, r5, r0, lsl #3
   171e8:	lsl	r2, r2, #3
   171ec:	bl	11368 <memset@plt>
   171f0:	ldr	r3, [sp, #80]	; 0x50
   171f4:	str	r3, [r6, #4]
   171f8:	add	fp, r5, r4, lsl #3
   171fc:	ldr	r1, [sp, #36]	; 0x24
   17200:	ldr	r8, [r5, r4, lsl #3]
   17204:	ldr	r6, [fp, #4]
   17208:	ldr	r2, [sp, #72]	; 0x48
   1720c:	ldr	r3, [sp, #32]
   17210:	ldr	ip, [sp, #76]	; 0x4c
   17214:	orr	r1, r1, #1
   17218:	add	sl, sp, #40	; 0x28
   1721c:	str	r1, [sp, #28]
   17220:	str	r1, [sp, #4]
   17224:	str	r2, [sp, #12]
   17228:	str	r3, [sp]
   1722c:	mov	r0, r6
   17230:	mov	r1, r8
   17234:	str	ip, [sp, #16]
   17238:	str	sl, [sp, #8]
   1723c:	mvn	r3, #0
   17240:	mov	r2, r9
   17244:	bl	1516c <__assert_fail@plt+0x3cb4>
   17248:	cmp	r8, r0
   1724c:	bhi	172b0 <__assert_fail@plt+0x5df8>
   17250:	ldr	r3, [pc, #164]	; 172fc <__assert_fail@plt+0x5e44>
   17254:	add	r8, r0, #1
   17258:	cmp	r6, r3
   1725c:	str	r8, [r5, r4, lsl #3]
   17260:	beq	1726c <__assert_fail@plt+0x5db4>
   17264:	mov	r0, r6
   17268:	bl	13ef8 <__assert_fail@plt+0x2a40>
   1726c:	mov	r0, r8
   17270:	bl	1a91c <__assert_fail@plt+0x9464>
   17274:	ldr	lr, [sp, #76]	; 0x4c
   17278:	ldr	r3, [sp, #32]
   1727c:	ldr	ip, [sp, #72]	; 0x48
   17280:	ldr	r4, [sp, #28]
   17284:	mov	r2, r9
   17288:	mov	r1, r8
   1728c:	str	r0, [fp, #4]
   17290:	str	r3, [sp]
   17294:	str	sl, [sp, #8]
   17298:	str	r4, [sp, #4]
   1729c:	str	lr, [sp, #16]
   172a0:	str	ip, [sp, #12]
   172a4:	mvn	r3, #0
   172a8:	mov	r6, r0
   172ac:	bl	1516c <__assert_fail@plt+0x3cb4>
   172b0:	ldr	r3, [sp, #24]
   172b4:	mov	r0, r6
   172b8:	str	r3, [r7]
   172bc:	add	sp, sp, #132	; 0x84
   172c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172c4:	mov	r3, #8
   172c8:	sub	r2, r4, r2
   172cc:	add	r1, sp, #80	; 0x50
   172d0:	str	r3, [sp]
   172d4:	add	r2, r2, #1
   172d8:	mvn	r3, #-2147483648	; 0x80000000
   172dc:	bl	1ab38 <__assert_fail@plt+0x9680>
   172e0:	mov	r5, r0
   172e4:	ldm	r8, {r0, r1}
   172e8:	str	r5, [r6]
   172ec:	stm	r5, {r0, r1}
   172f0:	b	171d4 <__assert_fail@plt+0x5d1c>
   172f4:	bl	114a0 <abort@plt>
   172f8:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   172fc:	andeq	pc, r2, r4, lsl #4
   17300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17304:	sub	sp, sp, #132	; 0x84
   17308:	mov	r5, r1
   1730c:	mov	r4, r0
   17310:	mov	r9, r2
   17314:	add	r0, sp, #80	; 0x50
   17318:	mov	r2, #48	; 0x30
   1731c:	mov	r1, #0
   17320:	mov	sl, r3
   17324:	bl	11368 <memset@plt>
   17328:	cmp	r5, #10
   1732c:	beq	174e8 <__assert_fail@plt+0x6030>
   17330:	add	lr, sp, #80	; 0x50
   17334:	str	r5, [sp, #80]	; 0x50
   17338:	ldm	lr!, {r0, r1, r2, r3}
   1733c:	add	ip, sp, #32
   17340:	ldr	r6, [pc, #420]	; 174ec <__assert_fail@plt+0x6034>
   17344:	stmia	ip!, {r0, r1, r2, r3}
   17348:	ldm	lr!, {r0, r1, r2, r3}
   1734c:	stmia	ip!, {r0, r1, r2, r3}
   17350:	ldm	lr, {r0, r1, r2, r3}
   17354:	stm	ip, {r0, r1, r2, r3}
   17358:	bl	11338 <__errno_location@plt>
   1735c:	cmn	r4, #-2147483647	; 0x80000001
   17360:	ldr	r5, [r6]
   17364:	mov	r7, r0
   17368:	movne	r0, #0
   1736c:	moveq	r0, #1
   17370:	ldr	r3, [r7]
   17374:	orrs	r0, r0, r4, lsr #31
   17378:	str	r3, [sp, #24]
   1737c:	bne	174e8 <__assert_fail@plt+0x6030>
   17380:	ldr	r2, [r6, #4]
   17384:	cmp	r4, r2
   17388:	blt	173e8 <__assert_fail@plt+0x5f30>
   1738c:	add	r8, r6, #8
   17390:	cmp	r5, r8
   17394:	str	r2, [sp, #80]	; 0x50
   17398:	beq	174b8 <__assert_fail@plt+0x6000>
   1739c:	mov	r3, #8
   173a0:	sub	r2, r4, r2
   173a4:	mov	r0, r5
   173a8:	str	r3, [sp]
   173ac:	add	r2, r2, #1
   173b0:	add	r1, sp, #80	; 0x50
   173b4:	mvn	r3, #-2147483648	; 0x80000000
   173b8:	bl	1ab38 <__assert_fail@plt+0x9680>
   173bc:	mov	r5, r0
   173c0:	str	r0, [r6]
   173c4:	ldr	r0, [r6, #4]
   173c8:	ldr	r2, [sp, #80]	; 0x50
   173cc:	mov	r1, #0
   173d0:	sub	r2, r2, r0
   173d4:	add	r0, r5, r0, lsl #3
   173d8:	lsl	r2, r2, #3
   173dc:	bl	11368 <memset@plt>
   173e0:	ldr	r3, [sp, #80]	; 0x50
   173e4:	str	r3, [r6, #4]
   173e8:	add	fp, r5, r4, lsl #3
   173ec:	ldr	r3, [sp, #32]
   173f0:	ldr	r1, [sp, #36]	; 0x24
   173f4:	ldr	r8, [r5, r4, lsl #3]
   173f8:	ldr	r6, [fp, #4]
   173fc:	ldr	r2, [sp, #72]	; 0x48
   17400:	ldr	ip, [sp, #76]	; 0x4c
   17404:	orr	r1, r1, #1
   17408:	str	r3, [sp]
   1740c:	add	r3, sp, #40	; 0x28
   17410:	str	r1, [sp, #28]
   17414:	str	r1, [sp, #4]
   17418:	str	r2, [sp, #12]
   1741c:	str	r3, [sp, #8]
   17420:	mov	r0, r6
   17424:	mov	r1, r8
   17428:	str	ip, [sp, #16]
   1742c:	mov	r3, sl
   17430:	mov	r2, r9
   17434:	bl	1516c <__assert_fail@plt+0x3cb4>
   17438:	cmp	r8, r0
   1743c:	bhi	174a4 <__assert_fail@plt+0x5fec>
   17440:	ldr	r3, [pc, #168]	; 174f0 <__assert_fail@plt+0x6038>
   17444:	add	r8, r0, #1
   17448:	cmp	r6, r3
   1744c:	str	r8, [r5, r4, lsl #3]
   17450:	beq	1745c <__assert_fail@plt+0x5fa4>
   17454:	mov	r0, r6
   17458:	bl	13ef8 <__assert_fail@plt+0x2a40>
   1745c:	mov	r0, r8
   17460:	bl	1a91c <__assert_fail@plt+0x9464>
   17464:	add	lr, sp, #40	; 0x28
   17468:	ldr	ip, [sp, #76]	; 0x4c
   1746c:	ldr	r4, [sp, #72]	; 0x48
   17470:	ldr	r5, [sp, #28]
   17474:	mov	r3, sl
   17478:	mov	r2, r9
   1747c:	mov	r1, r8
   17480:	str	r0, [fp, #4]
   17484:	str	lr, [sp, #8]
   17488:	ldr	lr, [sp, #32]
   1748c:	str	r5, [sp, #4]
   17490:	str	ip, [sp, #16]
   17494:	str	r4, [sp, #12]
   17498:	str	lr, [sp]
   1749c:	mov	r6, r0
   174a0:	bl	1516c <__assert_fail@plt+0x3cb4>
   174a4:	ldr	r3, [sp, #24]
   174a8:	mov	r0, r6
   174ac:	str	r3, [r7]
   174b0:	add	sp, sp, #132	; 0x84
   174b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174b8:	mov	r3, #8
   174bc:	sub	r2, r4, r2
   174c0:	add	r1, sp, #80	; 0x50
   174c4:	str	r3, [sp]
   174c8:	add	r2, r2, #1
   174cc:	mvn	r3, #-2147483648	; 0x80000000
   174d0:	bl	1ab38 <__assert_fail@plt+0x9680>
   174d4:	mov	r5, r0
   174d8:	ldm	r8, {r0, r1}
   174dc:	str	r5, [r6]
   174e0:	stm	r5, {r0, r1}
   174e4:	b	173c4 <__assert_fail@plt+0x5f0c>
   174e8:	bl	114a0 <abort@plt>
   174ec:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   174f0:	andeq	pc, r2, r4, lsl #4
   174f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174f8:	sub	sp, sp, #124	; 0x7c
   174fc:	mov	r4, r0
   17500:	mov	r9, r1
   17504:	add	r0, sp, #72	; 0x48
   17508:	mov	r2, #48	; 0x30
   1750c:	mov	r1, #0
   17510:	bl	11368 <memset@plt>
   17514:	cmp	r4, #10
   17518:	beq	176a4 <__assert_fail@plt+0x61ec>
   1751c:	add	lr, sp, #72	; 0x48
   17520:	str	r4, [sp, #72]	; 0x48
   17524:	ldm	lr!, {r0, r1, r2, r3}
   17528:	add	ip, sp, #24
   1752c:	ldr	r5, [pc, #372]	; 176a8 <__assert_fail@plt+0x61f0>
   17530:	stmia	ip!, {r0, r1, r2, r3}
   17534:	ldm	lr!, {r0, r1, r2, r3}
   17538:	stmia	ip!, {r0, r1, r2, r3}
   1753c:	ldm	lr, {r0, r1, r2, r3}
   17540:	stm	ip, {r0, r1, r2, r3}
   17544:	bl	11338 <__errno_location@plt>
   17548:	ldr	r2, [r5, #4]
   1754c:	ldr	r4, [r5]
   17550:	cmp	r2, #0
   17554:	mov	r7, r0
   17558:	ldr	fp, [r0]
   1755c:	bgt	175b8 <__assert_fail@plt+0x6100>
   17560:	add	r6, r5, #8
   17564:	cmp	r4, r6
   17568:	str	r2, [sp, #72]	; 0x48
   1756c:	beq	17674 <__assert_fail@plt+0x61bc>
   17570:	mov	r3, #8
   17574:	mov	r0, r4
   17578:	str	r3, [sp]
   1757c:	rsb	r2, r2, #1
   17580:	add	r1, sp, #72	; 0x48
   17584:	mvn	r3, #-2147483648	; 0x80000000
   17588:	bl	1ab38 <__assert_fail@plt+0x9680>
   1758c:	mov	r4, r0
   17590:	str	r0, [r5]
   17594:	ldr	r0, [r5, #4]
   17598:	ldr	r2, [sp, #72]	; 0x48
   1759c:	mov	r1, #0
   175a0:	sub	r2, r2, r0
   175a4:	add	r0, r4, r0, lsl #3
   175a8:	lsl	r2, r2, #3
   175ac:	bl	11368 <memset@plt>
   175b0:	ldr	r3, [sp, #72]	; 0x48
   175b4:	str	r3, [r5, #4]
   175b8:	ldr	r6, [sp, #28]
   175bc:	ldr	r8, [r4]
   175c0:	ldr	r5, [r4, #4]
   175c4:	ldr	r2, [sp, #64]	; 0x40
   175c8:	ldr	r3, [sp, #24]
   175cc:	ldr	ip, [sp, #68]	; 0x44
   175d0:	orr	r6, r6, #1
   175d4:	add	sl, sp, #32
   175d8:	str	r2, [sp, #12]
   175dc:	str	r3, [sp]
   175e0:	str	r6, [sp, #4]
   175e4:	mov	r1, r8
   175e8:	mov	r0, r5
   175ec:	str	ip, [sp, #16]
   175f0:	str	sl, [sp, #8]
   175f4:	mvn	r3, #0
   175f8:	mov	r2, r9
   175fc:	bl	1516c <__assert_fail@plt+0x3cb4>
   17600:	cmp	r8, r0
   17604:	bhi	17664 <__assert_fail@plt+0x61ac>
   17608:	ldr	r3, [pc, #156]	; 176ac <__assert_fail@plt+0x61f4>
   1760c:	add	r8, r0, #1
   17610:	cmp	r5, r3
   17614:	str	r8, [r4]
   17618:	beq	17624 <__assert_fail@plt+0x616c>
   1761c:	mov	r0, r5
   17620:	bl	13ef8 <__assert_fail@plt+0x2a40>
   17624:	mov	r0, r8
   17628:	bl	1a91c <__assert_fail@plt+0x9464>
   1762c:	ldr	lr, [sp, #68]	; 0x44
   17630:	ldr	r3, [sp, #24]
   17634:	ldr	ip, [sp, #64]	; 0x40
   17638:	mov	r2, r9
   1763c:	mov	r1, r8
   17640:	str	r0, [r4, #4]
   17644:	str	r3, [sp]
   17648:	str	sl, [sp, #8]
   1764c:	str	r6, [sp, #4]
   17650:	str	lr, [sp, #16]
   17654:	str	ip, [sp, #12]
   17658:	mvn	r3, #0
   1765c:	mov	r5, r0
   17660:	bl	1516c <__assert_fail@plt+0x3cb4>
   17664:	mov	r0, r5
   17668:	str	fp, [r7]
   1766c:	add	sp, sp, #124	; 0x7c
   17670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17674:	mov	r3, #8
   17678:	add	r1, sp, #72	; 0x48
   1767c:	str	r3, [sp]
   17680:	rsb	r2, r2, #1
   17684:	mvn	r3, #-2147483648	; 0x80000000
   17688:	mov	r0, #0
   1768c:	bl	1ab38 <__assert_fail@plt+0x9680>
   17690:	mov	r4, r0
   17694:	ldm	r6, {r0, r1}
   17698:	str	r4, [r5]
   1769c:	stm	r4, {r0, r1}
   176a0:	b	17594 <__assert_fail@plt+0x60dc>
   176a4:	bl	114a0 <abort@plt>
   176a8:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   176ac:	andeq	pc, r2, r4, lsl #4
   176b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b4:	sub	sp, sp, #132	; 0x84
   176b8:	mov	r4, r0
   176bc:	mov	r9, r1
   176c0:	mov	sl, r2
   176c4:	add	r0, sp, #80	; 0x50
   176c8:	mov	r2, #48	; 0x30
   176cc:	mov	r1, #0
   176d0:	bl	11368 <memset@plt>
   176d4:	cmp	r4, #10
   176d8:	beq	1786c <__assert_fail@plt+0x63b4>
   176dc:	add	lr, sp, #80	; 0x50
   176e0:	str	r4, [sp, #80]	; 0x50
   176e4:	ldm	lr!, {r0, r1, r2, r3}
   176e8:	add	ip, sp, #32
   176ec:	ldr	r5, [pc, #380]	; 17870 <__assert_fail@plt+0x63b8>
   176f0:	stmia	ip!, {r0, r1, r2, r3}
   176f4:	ldm	lr!, {r0, r1, r2, r3}
   176f8:	stmia	ip!, {r0, r1, r2, r3}
   176fc:	ldm	lr, {r0, r1, r2, r3}
   17700:	stm	ip, {r0, r1, r2, r3}
   17704:	bl	11338 <__errno_location@plt>
   17708:	ldr	r2, [r5, #4]
   1770c:	ldr	r4, [r5]
   17710:	cmp	r2, #0
   17714:	ldr	r3, [r0]
   17718:	mov	r7, r0
   1771c:	str	r3, [sp, #28]
   17720:	bgt	1777c <__assert_fail@plt+0x62c4>
   17724:	add	r6, r5, #8
   17728:	cmp	r4, r6
   1772c:	str	r2, [sp, #80]	; 0x50
   17730:	beq	1783c <__assert_fail@plt+0x6384>
   17734:	mov	r3, #8
   17738:	mov	r0, r4
   1773c:	str	r3, [sp]
   17740:	rsb	r2, r2, #1
   17744:	add	r1, sp, #80	; 0x50
   17748:	mvn	r3, #-2147483648	; 0x80000000
   1774c:	bl	1ab38 <__assert_fail@plt+0x9680>
   17750:	mov	r4, r0
   17754:	str	r0, [r5]
   17758:	ldr	r0, [r5, #4]
   1775c:	ldr	r2, [sp, #80]	; 0x50
   17760:	mov	r1, #0
   17764:	sub	r2, r2, r0
   17768:	add	r0, r4, r0, lsl #3
   1776c:	lsl	r2, r2, #3
   17770:	bl	11368 <memset@plt>
   17774:	ldr	r3, [sp, #80]	; 0x50
   17778:	str	r3, [r5, #4]
   1777c:	ldr	r6, [sp, #36]	; 0x24
   17780:	ldr	r8, [r4]
   17784:	ldr	r5, [r4, #4]
   17788:	ldr	r2, [sp, #72]	; 0x48
   1778c:	ldr	r3, [sp, #32]
   17790:	ldr	ip, [sp, #76]	; 0x4c
   17794:	orr	r6, r6, #1
   17798:	add	fp, sp, #40	; 0x28
   1779c:	str	r2, [sp, #12]
   177a0:	str	r3, [sp]
   177a4:	str	r6, [sp, #4]
   177a8:	mov	r1, r8
   177ac:	mov	r0, r5
   177b0:	str	ip, [sp, #16]
   177b4:	str	fp, [sp, #8]
   177b8:	mov	r3, sl
   177bc:	mov	r2, r9
   177c0:	bl	1516c <__assert_fail@plt+0x3cb4>
   177c4:	cmp	r8, r0
   177c8:	bhi	17828 <__assert_fail@plt+0x6370>
   177cc:	ldr	r3, [pc, #160]	; 17874 <__assert_fail@plt+0x63bc>
   177d0:	add	r8, r0, #1
   177d4:	cmp	r5, r3
   177d8:	str	r8, [r4]
   177dc:	beq	177e8 <__assert_fail@plt+0x6330>
   177e0:	mov	r0, r5
   177e4:	bl	13ef8 <__assert_fail@plt+0x2a40>
   177e8:	mov	r0, r8
   177ec:	bl	1a91c <__assert_fail@plt+0x9464>
   177f0:	ldr	ip, [sp, #76]	; 0x4c
   177f4:	ldr	lr, [sp, #32]
   177f8:	mov	r3, sl
   177fc:	mov	r2, r9
   17800:	mov	r1, r8
   17804:	str	r0, [r4, #4]
   17808:	ldr	r4, [sp, #72]	; 0x48
   1780c:	str	fp, [sp, #8]
   17810:	str	r6, [sp, #4]
   17814:	str	ip, [sp, #16]
   17818:	str	r4, [sp, #12]
   1781c:	str	lr, [sp]
   17820:	mov	r5, r0
   17824:	bl	1516c <__assert_fail@plt+0x3cb4>
   17828:	ldr	r3, [sp, #28]
   1782c:	mov	r0, r5
   17830:	str	r3, [r7]
   17834:	add	sp, sp, #132	; 0x84
   17838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1783c:	mov	r3, #8
   17840:	add	r1, sp, #80	; 0x50
   17844:	str	r3, [sp]
   17848:	rsb	r2, r2, #1
   1784c:	mvn	r3, #-2147483648	; 0x80000000
   17850:	mov	r0, #0
   17854:	bl	1ab38 <__assert_fail@plt+0x9680>
   17858:	mov	r4, r0
   1785c:	ldm	r6, {r0, r1}
   17860:	str	r4, [r5]
   17864:	stm	r4, {r0, r1}
   17868:	b	17758 <__assert_fail@plt+0x62a0>
   1786c:	bl	114a0 <abort@plt>
   17870:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   17874:	andeq	pc, r2, r4, lsl #4
   17878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1787c:	mov	r4, r2
   17880:	ldr	lr, [pc, #432]	; 17a38 <__assert_fail@plt+0x6580>
   17884:	mov	sl, r0
   17888:	mov	fp, r1
   1788c:	ldm	lr!, {r0, r1, r2, r3}
   17890:	sub	sp, sp, #92	; 0x5c
   17894:	add	ip, sp, #40	; 0x28
   17898:	lsr	r7, r4, #5
   1789c:	stmia	ip!, {r0, r1, r2, r3}
   178a0:	add	r6, sp, #48	; 0x30
   178a4:	ldm	lr!, {r0, r1, r2, r3}
   178a8:	and	r4, r4, #31
   178ac:	ldr	r5, [pc, #392]	; 17a3c <__assert_fail@plt+0x6584>
   178b0:	stmia	ip!, {r0, r1, r2, r3}
   178b4:	ldm	lr, {r0, r1, r2, r3}
   178b8:	stm	ip, {r0, r1, r2, r3}
   178bc:	ldr	r2, [r6, r7, lsl #2]
   178c0:	lsr	r3, r2, r4
   178c4:	eor	r3, r3, #1
   178c8:	and	r3, r3, #1
   178cc:	eor	r4, r2, r3, lsl r4
   178d0:	str	r4, [r6, r7, lsl #2]
   178d4:	bl	11338 <__errno_location@plt>
   178d8:	ldr	r2, [r5, #4]
   178dc:	ldr	r4, [r5]
   178e0:	cmp	r2, #0
   178e4:	ldr	r3, [r0]
   178e8:	mov	r8, r0
   178ec:	str	r3, [sp, #28]
   178f0:	bgt	1794c <__assert_fail@plt+0x6494>
   178f4:	add	r7, r5, #8
   178f8:	cmp	r4, r7
   178fc:	str	r2, [sp, #36]	; 0x24
   17900:	beq	17a08 <__assert_fail@plt+0x6550>
   17904:	mov	r3, #8
   17908:	mov	r0, r4
   1790c:	str	r3, [sp]
   17910:	rsb	r2, r2, #1
   17914:	mvn	r3, #-2147483648	; 0x80000000
   17918:	add	r1, sp, #36	; 0x24
   1791c:	bl	1ab38 <__assert_fail@plt+0x9680>
   17920:	mov	r4, r0
   17924:	str	r0, [r5]
   17928:	ldr	r0, [r5, #4]
   1792c:	ldr	r2, [sp, #36]	; 0x24
   17930:	mov	r1, #0
   17934:	sub	r2, r2, r0
   17938:	add	r0, r4, r0, lsl #3
   1793c:	lsl	r2, r2, #3
   17940:	bl	11368 <memset@plt>
   17944:	ldr	r3, [sp, #36]	; 0x24
   17948:	str	r3, [r5, #4]
   1794c:	ldr	r7, [sp, #44]	; 0x2c
   17950:	ldr	r9, [r4]
   17954:	ldr	r5, [r4, #4]
   17958:	ldr	r2, [sp, #80]	; 0x50
   1795c:	ldr	r3, [sp, #40]	; 0x28
   17960:	ldr	ip, [sp, #84]	; 0x54
   17964:	orr	r7, r7, #1
   17968:	str	r2, [sp, #12]
   1796c:	str	r3, [sp]
   17970:	str	r7, [sp, #4]
   17974:	str	r6, [sp, #8]
   17978:	mov	r1, r9
   1797c:	mov	r0, r5
   17980:	str	ip, [sp, #16]
   17984:	mov	r3, fp
   17988:	mov	r2, sl
   1798c:	bl	1516c <__assert_fail@plt+0x3cb4>
   17990:	cmp	r9, r0
   17994:	bhi	179f4 <__assert_fail@plt+0x653c>
   17998:	ldr	r3, [pc, #160]	; 17a40 <__assert_fail@plt+0x6588>
   1799c:	add	r9, r0, #1
   179a0:	cmp	r5, r3
   179a4:	str	r9, [r4]
   179a8:	beq	179b4 <__assert_fail@plt+0x64fc>
   179ac:	mov	r0, r5
   179b0:	bl	13ef8 <__assert_fail@plt+0x2a40>
   179b4:	mov	r0, r9
   179b8:	bl	1a91c <__assert_fail@plt+0x9464>
   179bc:	ldr	ip, [sp, #84]	; 0x54
   179c0:	ldr	lr, [sp, #40]	; 0x28
   179c4:	mov	r3, fp
   179c8:	mov	r2, sl
   179cc:	mov	r1, r9
   179d0:	str	r0, [r4, #4]
   179d4:	ldr	r4, [sp, #80]	; 0x50
   179d8:	str	r6, [sp, #8]
   179dc:	str	r7, [sp, #4]
   179e0:	str	ip, [sp, #16]
   179e4:	str	r4, [sp, #12]
   179e8:	str	lr, [sp]
   179ec:	mov	r5, r0
   179f0:	bl	1516c <__assert_fail@plt+0x3cb4>
   179f4:	ldr	r3, [sp, #28]
   179f8:	mov	r0, r5
   179fc:	str	r3, [r8]
   17a00:	add	sp, sp, #92	; 0x5c
   17a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a08:	mov	r3, #8
   17a0c:	str	r3, [sp]
   17a10:	add	r1, sp, #36	; 0x24
   17a14:	rsb	r2, r2, #1
   17a18:	mvn	r3, #-2147483648	; 0x80000000
   17a1c:	mov	r0, #0
   17a20:	bl	1ab38 <__assert_fail@plt+0x9680>
   17a24:	mov	r4, r0
   17a28:	ldm	r7, {r0, r1}
   17a2c:	str	r4, [r5]
   17a30:	stm	r4, {r0, r1}
   17a34:	b	17928 <__assert_fail@plt+0x6470>
   17a38:	ldrdeq	pc, [r2], -r4
   17a3c:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   17a40:	andeq	pc, r2, r4, lsl #4
   17a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a48:	mov	r4, r1
   17a4c:	ldr	lr, [pc, #420]	; 17bf8 <__assert_fail@plt+0x6740>
   17a50:	mov	r6, r0
   17a54:	sub	sp, sp, #84	; 0x54
   17a58:	ldm	lr!, {r0, r1, r2, r3}
   17a5c:	add	ip, sp, #32
   17a60:	lsr	r8, r4, #5
   17a64:	add	r5, sp, #40	; 0x28
   17a68:	stmia	ip!, {r0, r1, r2, r3}
   17a6c:	and	r4, r4, #31
   17a70:	ldm	lr!, {r0, r1, r2, r3}
   17a74:	ldr	r7, [pc, #384]	; 17bfc <__assert_fail@plt+0x6744>
   17a78:	stmia	ip!, {r0, r1, r2, r3}
   17a7c:	ldm	lr, {r0, r1, r2, r3}
   17a80:	stm	ip, {r0, r1, r2, r3}
   17a84:	ldr	r2, [r5, r8, lsl #2]
   17a88:	lsr	r3, r2, r4
   17a8c:	eor	r3, r3, #1
   17a90:	and	r3, r3, #1
   17a94:	eor	r4, r2, r3, lsl r4
   17a98:	str	r4, [r5, r8, lsl #2]
   17a9c:	bl	11338 <__errno_location@plt>
   17aa0:	ldr	r2, [r7, #4]
   17aa4:	ldr	r4, [r7]
   17aa8:	cmp	r2, #0
   17aac:	mov	r9, r0
   17ab0:	ldr	sl, [r0]
   17ab4:	bgt	17b10 <__assert_fail@plt+0x6658>
   17ab8:	add	r8, r7, #8
   17abc:	cmp	r4, r8
   17ac0:	str	r2, [sp, #28]
   17ac4:	beq	17bc8 <__assert_fail@plt+0x6710>
   17ac8:	mov	r3, #8
   17acc:	mov	r0, r4
   17ad0:	str	r3, [sp]
   17ad4:	rsb	r2, r2, #1
   17ad8:	mvn	r3, #-2147483648	; 0x80000000
   17adc:	add	r1, sp, #28
   17ae0:	bl	1ab38 <__assert_fail@plt+0x9680>
   17ae4:	mov	r4, r0
   17ae8:	str	r0, [r7]
   17aec:	ldr	r0, [r7, #4]
   17af0:	ldr	r2, [sp, #28]
   17af4:	mov	r1, #0
   17af8:	sub	r2, r2, r0
   17afc:	add	r0, r4, r0, lsl #3
   17b00:	lsl	r2, r2, #3
   17b04:	bl	11368 <memset@plt>
   17b08:	ldr	r3, [sp, #28]
   17b0c:	str	r3, [r7, #4]
   17b10:	ldr	r8, [sp, #36]	; 0x24
   17b14:	ldr	fp, [r4]
   17b18:	ldr	r7, [r4, #4]
   17b1c:	ldr	r2, [sp, #72]	; 0x48
   17b20:	ldr	r3, [sp, #32]
   17b24:	ldr	ip, [sp, #76]	; 0x4c
   17b28:	orr	r8, r8, #1
   17b2c:	str	r2, [sp, #12]
   17b30:	str	r3, [sp]
   17b34:	str	r8, [sp, #4]
   17b38:	str	r5, [sp, #8]
   17b3c:	mov	r1, fp
   17b40:	mov	r0, r7
   17b44:	str	ip, [sp, #16]
   17b48:	mvn	r3, #0
   17b4c:	mov	r2, r6
   17b50:	bl	1516c <__assert_fail@plt+0x3cb4>
   17b54:	cmp	fp, r0
   17b58:	bhi	17bb8 <__assert_fail@plt+0x6700>
   17b5c:	ldr	r3, [pc, #156]	; 17c00 <__assert_fail@plt+0x6748>
   17b60:	add	fp, r0, #1
   17b64:	cmp	r7, r3
   17b68:	str	fp, [r4]
   17b6c:	beq	17b78 <__assert_fail@plt+0x66c0>
   17b70:	mov	r0, r7
   17b74:	bl	13ef8 <__assert_fail@plt+0x2a40>
   17b78:	mov	r0, fp
   17b7c:	bl	1a91c <__assert_fail@plt+0x9464>
   17b80:	ldr	lr, [sp, #76]	; 0x4c
   17b84:	ldr	r3, [sp, #32]
   17b88:	ldr	ip, [sp, #72]	; 0x48
   17b8c:	mov	r2, r6
   17b90:	mov	r1, fp
   17b94:	str	r0, [r4, #4]
   17b98:	str	r3, [sp]
   17b9c:	str	r5, [sp, #8]
   17ba0:	str	r8, [sp, #4]
   17ba4:	str	lr, [sp, #16]
   17ba8:	str	ip, [sp, #12]
   17bac:	mvn	r3, #0
   17bb0:	mov	r7, r0
   17bb4:	bl	1516c <__assert_fail@plt+0x3cb4>
   17bb8:	mov	r0, r7
   17bbc:	str	sl, [r9]
   17bc0:	add	sp, sp, #84	; 0x54
   17bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bc8:	mov	r3, #8
   17bcc:	str	r3, [sp]
   17bd0:	add	r1, sp, #28
   17bd4:	rsb	r2, r2, #1
   17bd8:	mvn	r3, #-2147483648	; 0x80000000
   17bdc:	mov	r0, #0
   17be0:	bl	1ab38 <__assert_fail@plt+0x9680>
   17be4:	mov	r4, r0
   17be8:	ldm	r8, {r0, r1}
   17bec:	str	r4, [r7]
   17bf0:	stm	r4, {r0, r1}
   17bf4:	b	17aec <__assert_fail@plt+0x6634>
   17bf8:	ldrdeq	pc, [r2], -r4
   17bfc:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   17c00:	andeq	pc, r2, r4, lsl #4
   17c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c08:	mov	r6, r0
   17c0c:	ldr	lr, [pc, #404]	; 17da8 <__assert_fail@plt+0x68f0>
   17c10:	sub	sp, sp, #84	; 0x54
   17c14:	add	ip, sp, #32
   17c18:	ldm	lr!, {r0, r1, r2, r3}
   17c1c:	ldr	r5, [pc, #392]	; 17dac <__assert_fail@plt+0x68f4>
   17c20:	stmia	ip!, {r0, r1, r2, r3}
   17c24:	ldm	lr!, {r0, r1, r2, r3}
   17c28:	ldr	r4, [sp, #44]	; 0x2c
   17c2c:	stmia	ip!, {r0, r1, r2, r3}
   17c30:	ldm	lr, {r0, r1, r2, r3}
   17c34:	mvn	lr, r4
   17c38:	and	lr, lr, #67108864	; 0x4000000
   17c3c:	eor	lr, lr, r4
   17c40:	stm	ip, {r0, r1, r2, r3}
   17c44:	str	lr, [sp, #44]	; 0x2c
   17c48:	bl	11338 <__errno_location@plt>
   17c4c:	ldr	r2, [r5, #4]
   17c50:	ldr	r4, [r5]
   17c54:	cmp	r2, #0
   17c58:	mov	r8, r0
   17c5c:	ldr	sl, [r0]
   17c60:	bgt	17cbc <__assert_fail@plt+0x6804>
   17c64:	add	r7, r5, #8
   17c68:	cmp	r4, r7
   17c6c:	str	r2, [sp, #28]
   17c70:	beq	17d78 <__assert_fail@plt+0x68c0>
   17c74:	mov	r3, #8
   17c78:	mov	r0, r4
   17c7c:	str	r3, [sp]
   17c80:	rsb	r2, r2, #1
   17c84:	mvn	r3, #-2147483648	; 0x80000000
   17c88:	add	r1, sp, #28
   17c8c:	bl	1ab38 <__assert_fail@plt+0x9680>
   17c90:	mov	r4, r0
   17c94:	str	r0, [r5]
   17c98:	ldr	r0, [r5, #4]
   17c9c:	ldr	r2, [sp, #28]
   17ca0:	mov	r1, #0
   17ca4:	sub	r2, r2, r0
   17ca8:	add	r0, r4, r0, lsl #3
   17cac:	lsl	r2, r2, #3
   17cb0:	bl	11368 <memset@plt>
   17cb4:	ldr	r3, [sp, #28]
   17cb8:	str	r3, [r5, #4]
   17cbc:	ldr	r7, [sp, #36]	; 0x24
   17cc0:	ldr	r9, [r4]
   17cc4:	ldr	r5, [r4, #4]
   17cc8:	ldr	r2, [sp, #72]	; 0x48
   17ccc:	ldr	r3, [sp, #32]
   17cd0:	ldr	ip, [sp, #76]	; 0x4c
   17cd4:	orr	r7, r7, #1
   17cd8:	add	fp, sp, #40	; 0x28
   17cdc:	str	r2, [sp, #12]
   17ce0:	str	r3, [sp]
   17ce4:	str	r7, [sp, #4]
   17ce8:	mov	r1, r9
   17cec:	mov	r0, r5
   17cf0:	str	ip, [sp, #16]
   17cf4:	str	fp, [sp, #8]
   17cf8:	mvn	r3, #0
   17cfc:	mov	r2, r6
   17d00:	bl	1516c <__assert_fail@plt+0x3cb4>
   17d04:	cmp	r9, r0
   17d08:	bhi	17d68 <__assert_fail@plt+0x68b0>
   17d0c:	ldr	r3, [pc, #156]	; 17db0 <__assert_fail@plt+0x68f8>
   17d10:	add	r9, r0, #1
   17d14:	cmp	r5, r3
   17d18:	str	r9, [r4]
   17d1c:	beq	17d28 <__assert_fail@plt+0x6870>
   17d20:	mov	r0, r5
   17d24:	bl	13ef8 <__assert_fail@plt+0x2a40>
   17d28:	mov	r0, r9
   17d2c:	bl	1a91c <__assert_fail@plt+0x9464>
   17d30:	ldr	lr, [sp, #76]	; 0x4c
   17d34:	ldr	r3, [sp, #32]
   17d38:	ldr	ip, [sp, #72]	; 0x48
   17d3c:	mov	r2, r6
   17d40:	mov	r1, r9
   17d44:	str	r0, [r4, #4]
   17d48:	str	r3, [sp]
   17d4c:	str	fp, [sp, #8]
   17d50:	str	r7, [sp, #4]
   17d54:	str	lr, [sp, #16]
   17d58:	str	ip, [sp, #12]
   17d5c:	mvn	r3, #0
   17d60:	mov	r5, r0
   17d64:	bl	1516c <__assert_fail@plt+0x3cb4>
   17d68:	mov	r0, r5
   17d6c:	str	sl, [r8]
   17d70:	add	sp, sp, #84	; 0x54
   17d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d78:	mov	r3, #8
   17d7c:	str	r3, [sp]
   17d80:	add	r1, sp, #28
   17d84:	rsb	r2, r2, #1
   17d88:	mvn	r3, #-2147483648	; 0x80000000
   17d8c:	mov	r0, #0
   17d90:	bl	1ab38 <__assert_fail@plt+0x9680>
   17d94:	mov	r4, r0
   17d98:	ldm	r7, {r0, r1}
   17d9c:	str	r4, [r5]
   17da0:	stm	r4, {r0, r1}
   17da4:	b	17c98 <__assert_fail@plt+0x67e0>
   17da8:	ldrdeq	pc, [r2], -r4
   17dac:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   17db0:	andeq	pc, r2, r4, lsl #4
   17db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17db8:	mov	r9, r0
   17dbc:	ldr	lr, [pc, #416]	; 17f64 <__assert_fail@plt+0x6aac>
   17dc0:	mov	sl, r1
   17dc4:	sub	sp, sp, #92	; 0x5c
   17dc8:	ldm	lr!, {r0, r1, r2, r3}
   17dcc:	add	ip, sp, #40	; 0x28
   17dd0:	ldr	r5, [pc, #400]	; 17f68 <__assert_fail@plt+0x6ab0>
   17dd4:	stmia	ip!, {r0, r1, r2, r3}
   17dd8:	ldm	lr!, {r0, r1, r2, r3}
   17ddc:	ldr	r4, [sp, #52]	; 0x34
   17de0:	stmia	ip!, {r0, r1, r2, r3}
   17de4:	ldm	lr, {r0, r1, r2, r3}
   17de8:	mvn	lr, r4
   17dec:	and	lr, lr, #67108864	; 0x4000000
   17df0:	eor	lr, lr, r4
   17df4:	stm	ip, {r0, r1, r2, r3}
   17df8:	str	lr, [sp, #52]	; 0x34
   17dfc:	bl	11338 <__errno_location@plt>
   17e00:	ldr	r2, [r5, #4]
   17e04:	ldr	r4, [r5]
   17e08:	cmp	r2, #0
   17e0c:	ldr	r3, [r0]
   17e10:	mov	r7, r0
   17e14:	str	r3, [sp, #28]
   17e18:	bgt	17e74 <__assert_fail@plt+0x69bc>
   17e1c:	add	r6, r5, #8
   17e20:	cmp	r4, r6
   17e24:	str	r2, [sp, #36]	; 0x24
   17e28:	beq	17f34 <__assert_fail@plt+0x6a7c>
   17e2c:	mov	r3, #8
   17e30:	mov	r0, r4
   17e34:	str	r3, [sp]
   17e38:	rsb	r2, r2, #1
   17e3c:	mvn	r3, #-2147483648	; 0x80000000
   17e40:	add	r1, sp, #36	; 0x24
   17e44:	bl	1ab38 <__assert_fail@plt+0x9680>
   17e48:	mov	r4, r0
   17e4c:	str	r0, [r5]
   17e50:	ldr	r0, [r5, #4]
   17e54:	ldr	r2, [sp, #36]	; 0x24
   17e58:	mov	r1, #0
   17e5c:	sub	r2, r2, r0
   17e60:	add	r0, r4, r0, lsl #3
   17e64:	lsl	r2, r2, #3
   17e68:	bl	11368 <memset@plt>
   17e6c:	ldr	r3, [sp, #36]	; 0x24
   17e70:	str	r3, [r5, #4]
   17e74:	ldr	r6, [sp, #44]	; 0x2c
   17e78:	ldr	r8, [r4]
   17e7c:	ldr	r5, [r4, #4]
   17e80:	ldr	r2, [sp, #80]	; 0x50
   17e84:	ldr	r3, [sp, #40]	; 0x28
   17e88:	ldr	ip, [sp, #84]	; 0x54
   17e8c:	orr	r6, r6, #1
   17e90:	add	fp, sp, #48	; 0x30
   17e94:	str	r2, [sp, #12]
   17e98:	str	r3, [sp]
   17e9c:	str	r6, [sp, #4]
   17ea0:	mov	r1, r8
   17ea4:	mov	r0, r5
   17ea8:	str	ip, [sp, #16]
   17eac:	str	fp, [sp, #8]
   17eb0:	mov	r3, sl
   17eb4:	mov	r2, r9
   17eb8:	bl	1516c <__assert_fail@plt+0x3cb4>
   17ebc:	cmp	r8, r0
   17ec0:	bhi	17f20 <__assert_fail@plt+0x6a68>
   17ec4:	ldr	r3, [pc, #160]	; 17f6c <__assert_fail@plt+0x6ab4>
   17ec8:	add	r8, r0, #1
   17ecc:	cmp	r5, r3
   17ed0:	str	r8, [r4]
   17ed4:	beq	17ee0 <__assert_fail@plt+0x6a28>
   17ed8:	mov	r0, r5
   17edc:	bl	13ef8 <__assert_fail@plt+0x2a40>
   17ee0:	mov	r0, r8
   17ee4:	bl	1a91c <__assert_fail@plt+0x9464>
   17ee8:	ldr	ip, [sp, #84]	; 0x54
   17eec:	ldr	lr, [sp, #40]	; 0x28
   17ef0:	mov	r3, sl
   17ef4:	mov	r2, r9
   17ef8:	mov	r1, r8
   17efc:	str	r0, [r4, #4]
   17f00:	ldr	r4, [sp, #80]	; 0x50
   17f04:	str	fp, [sp, #8]
   17f08:	str	r6, [sp, #4]
   17f0c:	str	ip, [sp, #16]
   17f10:	str	r4, [sp, #12]
   17f14:	str	lr, [sp]
   17f18:	mov	r5, r0
   17f1c:	bl	1516c <__assert_fail@plt+0x3cb4>
   17f20:	ldr	r3, [sp, #28]
   17f24:	mov	r0, r5
   17f28:	str	r3, [r7]
   17f2c:	add	sp, sp, #92	; 0x5c
   17f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f34:	mov	r3, #8
   17f38:	str	r3, [sp]
   17f3c:	add	r1, sp, #36	; 0x24
   17f40:	rsb	r2, r2, #1
   17f44:	mvn	r3, #-2147483648	; 0x80000000
   17f48:	mov	r0, #0
   17f4c:	bl	1ab38 <__assert_fail@plt+0x9680>
   17f50:	mov	r4, r0
   17f54:	ldm	r6, {r0, r1}
   17f58:	str	r4, [r5]
   17f5c:	stm	r4, {r0, r1}
   17f60:	b	17e50 <__assert_fail@plt+0x6998>
   17f64:	ldrdeq	pc, [r2], -r4
   17f68:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   17f6c:	andeq	pc, r2, r4, lsl #4
   17f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f74:	sub	sp, sp, #180	; 0xb4
   17f78:	mov	r6, r1
   17f7c:	mov	r4, r0
   17f80:	mov	r9, r2
   17f84:	add	r0, sp, #80	; 0x50
   17f88:	mov	r2, #48	; 0x30
   17f8c:	mov	r1, #0
   17f90:	bl	11368 <memset@plt>
   17f94:	cmp	r6, #10
   17f98:	beq	18178 <__assert_fail@plt+0x6cc0>
   17f9c:	add	r5, sp, #80	; 0x50
   17fa0:	str	r6, [sp, #80]	; 0x50
   17fa4:	ldm	r5!, {r0, r1, r2, r3}
   17fa8:	add	ip, sp, #128	; 0x80
   17fac:	mov	r7, ip
   17fb0:	add	lr, sp, #32
   17fb4:	stmia	ip!, {r0, r1, r2, r3}
   17fb8:	mov	r8, #67108864	; 0x4000000
   17fbc:	ldm	r5!, {r0, r1, r2, r3}
   17fc0:	ldr	r6, [pc, #436]	; 1817c <__assert_fail@plt+0x6cc4>
   17fc4:	stmia	ip!, {r0, r1, r2, r3}
   17fc8:	ldm	r5, {r0, r1, r2, r3}
   17fcc:	stm	ip, {r0, r1, r2, r3}
   17fd0:	ldm	r7!, {r0, r1, r2, r3}
   17fd4:	stmia	lr!, {r0, r1, r2, r3}
   17fd8:	ldm	r7!, {r0, r1, r2, r3}
   17fdc:	str	r8, [sp, #44]	; 0x2c
   17fe0:	stmia	lr!, {r0, r1, r2, r3}
   17fe4:	ldm	ip, {r0, r1, r2, r3}
   17fe8:	stm	lr, {r0, r1, r2, r3}
   17fec:	bl	11338 <__errno_location@plt>
   17ff0:	cmn	r4, #-2147483647	; 0x80000001
   17ff4:	ldr	r5, [r6]
   17ff8:	mov	r7, r0
   17ffc:	movne	r0, #0
   18000:	moveq	r0, #1
   18004:	ldr	r3, [r7]
   18008:	orrs	r0, r0, r4, lsr #31
   1800c:	str	r3, [sp, #24]
   18010:	bne	18178 <__assert_fail@plt+0x6cc0>
   18014:	ldr	r2, [r6, #4]
   18018:	cmp	r4, r2
   1801c:	blt	1807c <__assert_fail@plt+0x6bc4>
   18020:	add	r8, r6, #8
   18024:	cmp	r5, r8
   18028:	str	r2, [sp, #80]	; 0x50
   1802c:	beq	18148 <__assert_fail@plt+0x6c90>
   18030:	mov	r3, #8
   18034:	sub	r2, r4, r2
   18038:	mov	r0, r5
   1803c:	str	r3, [sp]
   18040:	add	r2, r2, #1
   18044:	add	r1, sp, #80	; 0x50
   18048:	mvn	r3, #-2147483648	; 0x80000000
   1804c:	bl	1ab38 <__assert_fail@plt+0x9680>
   18050:	mov	r5, r0
   18054:	str	r0, [r6]
   18058:	ldr	r0, [r6, #4]
   1805c:	ldr	r2, [sp, #80]	; 0x50
   18060:	mov	r1, #0
   18064:	sub	r2, r2, r0
   18068:	add	r0, r5, r0, lsl #3
   1806c:	lsl	r2, r2, #3
   18070:	bl	11368 <memset@plt>
   18074:	ldr	r3, [sp, #80]	; 0x50
   18078:	str	r3, [r6, #4]
   1807c:	add	fp, r5, r4, lsl #3
   18080:	ldr	r1, [sp, #36]	; 0x24
   18084:	ldr	r8, [r5, r4, lsl #3]
   18088:	ldr	r6, [fp, #4]
   1808c:	ldr	r2, [sp, #72]	; 0x48
   18090:	ldr	r3, [sp, #32]
   18094:	ldr	ip, [sp, #76]	; 0x4c
   18098:	orr	r1, r1, #1
   1809c:	add	sl, sp, #40	; 0x28
   180a0:	str	r1, [sp, #28]
   180a4:	str	r1, [sp, #4]
   180a8:	str	r2, [sp, #12]
   180ac:	str	r3, [sp]
   180b0:	mov	r0, r6
   180b4:	mov	r1, r8
   180b8:	str	ip, [sp, #16]
   180bc:	str	sl, [sp, #8]
   180c0:	mvn	r3, #0
   180c4:	mov	r2, r9
   180c8:	bl	1516c <__assert_fail@plt+0x3cb4>
   180cc:	cmp	r8, r0
   180d0:	bhi	18134 <__assert_fail@plt+0x6c7c>
   180d4:	ldr	r3, [pc, #164]	; 18180 <__assert_fail@plt+0x6cc8>
   180d8:	add	r8, r0, #1
   180dc:	cmp	r6, r3
   180e0:	str	r8, [r5, r4, lsl #3]
   180e4:	beq	180f0 <__assert_fail@plt+0x6c38>
   180e8:	mov	r0, r6
   180ec:	bl	13ef8 <__assert_fail@plt+0x2a40>
   180f0:	mov	r0, r8
   180f4:	bl	1a91c <__assert_fail@plt+0x9464>
   180f8:	ldr	lr, [sp, #76]	; 0x4c
   180fc:	ldr	r3, [sp, #32]
   18100:	ldr	ip, [sp, #72]	; 0x48
   18104:	ldr	r4, [sp, #28]
   18108:	mov	r2, r9
   1810c:	mov	r1, r8
   18110:	str	r0, [fp, #4]
   18114:	str	r3, [sp]
   18118:	str	sl, [sp, #8]
   1811c:	str	r4, [sp, #4]
   18120:	str	lr, [sp, #16]
   18124:	str	ip, [sp, #12]
   18128:	mvn	r3, #0
   1812c:	mov	r6, r0
   18130:	bl	1516c <__assert_fail@plt+0x3cb4>
   18134:	ldr	r3, [sp, #24]
   18138:	mov	r0, r6
   1813c:	str	r3, [r7]
   18140:	add	sp, sp, #180	; 0xb4
   18144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18148:	mov	r3, #8
   1814c:	sub	r2, r4, r2
   18150:	add	r1, sp, #80	; 0x50
   18154:	str	r3, [sp]
   18158:	add	r2, r2, #1
   1815c:	mvn	r3, #-2147483648	; 0x80000000
   18160:	bl	1ab38 <__assert_fail@plt+0x9680>
   18164:	mov	r5, r0
   18168:	ldm	r8, {r0, r1}
   1816c:	str	r5, [r6]
   18170:	stm	r5, {r0, r1}
   18174:	b	18058 <__assert_fail@plt+0x6ba0>
   18178:	bl	114a0 <abort@plt>
   1817c:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18180:	andeq	pc, r2, r4, lsl #4
   18184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18188:	mov	r7, r1
   1818c:	ldr	lr, [pc, #492]	; 18380 <__assert_fail@plt+0x6ec8>
   18190:	mov	r8, r2
   18194:	mov	r4, r0
   18198:	mov	fp, r3
   1819c:	ldm	lr!, {r0, r1, r2, r3}
   181a0:	sub	sp, sp, #100	; 0x64
   181a4:	add	ip, sp, #48	; 0x30
   181a8:	mov	sl, #10
   181ac:	stmia	ip!, {r0, r1, r2, r3}
   181b0:	cmp	r8, #0
   181b4:	cmpne	r7, #0
   181b8:	ldm	lr!, {r0, r1, r2, r3}
   181bc:	str	sl, [sp, #48]	; 0x30
   181c0:	stmia	ip!, {r0, r1, r2, r3}
   181c4:	ldm	lr, {r0, r1, r2, r3}
   181c8:	stm	ip, {r0, r1, r2, r3}
   181cc:	beq	1837c <__assert_fail@plt+0x6ec4>
   181d0:	str	r7, [sp, #88]	; 0x58
   181d4:	str	r8, [sp, #92]	; 0x5c
   181d8:	bl	11338 <__errno_location@plt>
   181dc:	ldr	r6, [pc, #416]	; 18384 <__assert_fail@plt+0x6ecc>
   181e0:	cmn	r4, #-2147483647	; 0x80000001
   181e4:	ldr	r5, [r6]
   181e8:	mov	r9, r0
   181ec:	movne	r0, #0
   181f0:	moveq	r0, #1
   181f4:	ldr	r3, [r9]
   181f8:	orrs	r0, r0, r4, lsr #31
   181fc:	str	r3, [sp, #28]
   18200:	bne	1837c <__assert_fail@plt+0x6ec4>
   18204:	ldr	r2, [r6, #4]
   18208:	cmp	r4, r2
   1820c:	movlt	r3, sl
   18210:	blt	1827c <__assert_fail@plt+0x6dc4>
   18214:	add	r7, r6, #8
   18218:	cmp	r5, r7
   1821c:	str	r2, [sp, #44]	; 0x2c
   18220:	beq	1834c <__assert_fail@plt+0x6e94>
   18224:	mov	r3, #8
   18228:	sub	r2, r4, r2
   1822c:	mov	r0, r5
   18230:	str	r3, [sp]
   18234:	add	r2, r2, #1
   18238:	mvn	r3, #-2147483648	; 0x80000000
   1823c:	add	r1, sp, #44	; 0x2c
   18240:	bl	1ab38 <__assert_fail@plt+0x9680>
   18244:	mov	r5, r0
   18248:	str	r0, [r6]
   1824c:	ldr	r0, [r6, #4]
   18250:	ldr	r2, [sp, #44]	; 0x2c
   18254:	mov	r1, #0
   18258:	sub	r2, r2, r0
   1825c:	add	r0, r5, r0, lsl #3
   18260:	lsl	r2, r2, #3
   18264:	bl	11368 <memset@plt>
   18268:	ldr	r3, [sp, #48]	; 0x30
   1826c:	ldr	r7, [sp, #88]	; 0x58
   18270:	ldr	r8, [sp, #92]	; 0x5c
   18274:	ldr	r2, [sp, #44]	; 0x2c
   18278:	str	r2, [r6, #4]
   1827c:	add	r2, r5, r4, lsl #3
   18280:	mov	r1, r2
   18284:	str	r2, [sp, #32]
   18288:	ldr	r2, [sp, #52]	; 0x34
   1828c:	ldr	r6, [r1, #4]
   18290:	ldr	sl, [r5, r4, lsl #3]
   18294:	orr	r2, r2, #1
   18298:	str	r3, [sp]
   1829c:	add	r3, sp, #56	; 0x38
   182a0:	str	r2, [sp, #36]	; 0x24
   182a4:	str	r2, [sp, #4]
   182a8:	str	r3, [sp, #8]
   182ac:	mov	r0, r6
   182b0:	str	r8, [sp, #16]
   182b4:	str	r7, [sp, #12]
   182b8:	mov	r1, sl
   182bc:	mvn	r3, #0
   182c0:	mov	r2, fp
   182c4:	bl	1516c <__assert_fail@plt+0x3cb4>
   182c8:	cmp	sl, r0
   182cc:	bhi	18338 <__assert_fail@plt+0x6e80>
   182d0:	ldr	r3, [pc, #176]	; 18388 <__assert_fail@plt+0x6ed0>
   182d4:	add	r7, r0, #1
   182d8:	cmp	r6, r3
   182dc:	str	r7, [r5, r4, lsl #3]
   182e0:	beq	182ec <__assert_fail@plt+0x6e34>
   182e4:	mov	r0, r6
   182e8:	bl	13ef8 <__assert_fail@plt+0x2a40>
   182ec:	mov	r0, r7
   182f0:	bl	1a91c <__assert_fail@plt+0x9464>
   182f4:	ldr	r3, [sp, #32]
   182f8:	ldr	lr, [sp, #92]	; 0x5c
   182fc:	ldr	ip, [sp, #88]	; 0x58
   18300:	ldr	r4, [sp, #36]	; 0x24
   18304:	mov	r2, fp
   18308:	mov	r1, r7
   1830c:	str	r0, [r3, #4]
   18310:	add	r3, sp, #56	; 0x38
   18314:	str	r3, [sp, #8]
   18318:	ldr	r3, [sp, #48]	; 0x30
   1831c:	str	r4, [sp, #4]
   18320:	str	r3, [sp]
   18324:	str	lr, [sp, #16]
   18328:	str	ip, [sp, #12]
   1832c:	mvn	r3, #0
   18330:	mov	r6, r0
   18334:	bl	1516c <__assert_fail@plt+0x3cb4>
   18338:	ldr	r3, [sp, #28]
   1833c:	mov	r0, r6
   18340:	str	r3, [r9]
   18344:	add	sp, sp, #100	; 0x64
   18348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1834c:	mov	r3, #8
   18350:	sub	r2, r4, r2
   18354:	str	r3, [sp]
   18358:	add	r1, sp, #44	; 0x2c
   1835c:	add	r2, r2, #1
   18360:	mvn	r3, #-2147483648	; 0x80000000
   18364:	bl	1ab38 <__assert_fail@plt+0x9680>
   18368:	mov	r5, r0
   1836c:	ldm	r7, {r0, r1}
   18370:	str	r5, [r6]
   18374:	stm	r5, {r0, r1}
   18378:	b	1824c <__assert_fail@plt+0x6d94>
   1837c:	bl	114a0 <abort@plt>
   18380:	ldrdeq	pc, [r2], -r4
   18384:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18388:	andeq	pc, r2, r4, lsl #4
   1838c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18390:	mov	r7, r1
   18394:	ldr	lr, [pc, #492]	; 18588 <__assert_fail@plt+0x70d0>
   18398:	mov	r8, r2
   1839c:	mov	r4, r0
   183a0:	mov	fp, r3
   183a4:	ldm	lr!, {r0, r1, r2, r3}
   183a8:	sub	sp, sp, #100	; 0x64
   183ac:	add	ip, sp, #48	; 0x30
   183b0:	mov	sl, #10
   183b4:	stmia	ip!, {r0, r1, r2, r3}
   183b8:	cmp	r8, #0
   183bc:	cmpne	r7, #0
   183c0:	ldm	lr!, {r0, r1, r2, r3}
   183c4:	str	sl, [sp, #48]	; 0x30
   183c8:	stmia	ip!, {r0, r1, r2, r3}
   183cc:	ldm	lr, {r0, r1, r2, r3}
   183d0:	stm	ip, {r0, r1, r2, r3}
   183d4:	beq	18584 <__assert_fail@plt+0x70cc>
   183d8:	str	r7, [sp, #88]	; 0x58
   183dc:	str	r8, [sp, #92]	; 0x5c
   183e0:	bl	11338 <__errno_location@plt>
   183e4:	ldr	r6, [pc, #416]	; 1858c <__assert_fail@plt+0x70d4>
   183e8:	cmn	r4, #-2147483647	; 0x80000001
   183ec:	ldr	r5, [r6]
   183f0:	mov	r9, r0
   183f4:	movne	r0, #0
   183f8:	moveq	r0, #1
   183fc:	ldr	r3, [r9]
   18400:	orrs	r0, r0, r4, lsr #31
   18404:	str	r3, [sp, #28]
   18408:	bne	18584 <__assert_fail@plt+0x70cc>
   1840c:	ldr	r2, [r6, #4]
   18410:	cmp	r4, r2
   18414:	movlt	r3, sl
   18418:	blt	18484 <__assert_fail@plt+0x6fcc>
   1841c:	add	r7, r6, #8
   18420:	cmp	r5, r7
   18424:	str	r2, [sp, #44]	; 0x2c
   18428:	beq	18554 <__assert_fail@plt+0x709c>
   1842c:	mov	r3, #8
   18430:	sub	r2, r4, r2
   18434:	mov	r0, r5
   18438:	str	r3, [sp]
   1843c:	add	r2, r2, #1
   18440:	mvn	r3, #-2147483648	; 0x80000000
   18444:	add	r1, sp, #44	; 0x2c
   18448:	bl	1ab38 <__assert_fail@plt+0x9680>
   1844c:	mov	r5, r0
   18450:	str	r0, [r6]
   18454:	ldr	r0, [r6, #4]
   18458:	ldr	r2, [sp, #44]	; 0x2c
   1845c:	mov	r1, #0
   18460:	sub	r2, r2, r0
   18464:	add	r0, r5, r0, lsl #3
   18468:	lsl	r2, r2, #3
   1846c:	bl	11368 <memset@plt>
   18470:	ldr	r3, [sp, #48]	; 0x30
   18474:	ldr	r7, [sp, #88]	; 0x58
   18478:	ldr	r8, [sp, #92]	; 0x5c
   1847c:	ldr	r2, [sp, #44]	; 0x2c
   18480:	str	r2, [r6, #4]
   18484:	add	r2, r5, r4, lsl #3
   18488:	mov	r1, r2
   1848c:	str	r2, [sp, #32]
   18490:	ldr	r2, [sp, #52]	; 0x34
   18494:	ldr	r6, [r1, #4]
   18498:	ldr	sl, [r5, r4, lsl #3]
   1849c:	orr	r2, r2, #1
   184a0:	str	r3, [sp]
   184a4:	add	r3, sp, #56	; 0x38
   184a8:	str	r2, [sp, #36]	; 0x24
   184ac:	str	r2, [sp, #4]
   184b0:	str	r3, [sp, #8]
   184b4:	mov	r0, r6
   184b8:	str	r8, [sp, #16]
   184bc:	str	r7, [sp, #12]
   184c0:	mov	r1, sl
   184c4:	ldr	r3, [sp, #136]	; 0x88
   184c8:	mov	r2, fp
   184cc:	bl	1516c <__assert_fail@plt+0x3cb4>
   184d0:	cmp	sl, r0
   184d4:	bhi	18540 <__assert_fail@plt+0x7088>
   184d8:	ldr	r3, [pc, #176]	; 18590 <__assert_fail@plt+0x70d8>
   184dc:	add	r7, r0, #1
   184e0:	cmp	r6, r3
   184e4:	str	r7, [r5, r4, lsl #3]
   184e8:	beq	184f4 <__assert_fail@plt+0x703c>
   184ec:	mov	r0, r6
   184f0:	bl	13ef8 <__assert_fail@plt+0x2a40>
   184f4:	mov	r0, r7
   184f8:	bl	1a91c <__assert_fail@plt+0x9464>
   184fc:	ldr	r3, [sp, #32]
   18500:	ldr	lr, [sp, #92]	; 0x5c
   18504:	ldr	ip, [sp, #88]	; 0x58
   18508:	ldr	r4, [sp, #36]	; 0x24
   1850c:	mov	r2, fp
   18510:	mov	r1, r7
   18514:	str	r0, [r3, #4]
   18518:	add	r3, sp, #56	; 0x38
   1851c:	str	r3, [sp, #8]
   18520:	ldr	r3, [sp, #48]	; 0x30
   18524:	str	r4, [sp, #4]
   18528:	str	r3, [sp]
   1852c:	str	lr, [sp, #16]
   18530:	str	ip, [sp, #12]
   18534:	ldr	r3, [sp, #136]	; 0x88
   18538:	mov	r6, r0
   1853c:	bl	1516c <__assert_fail@plt+0x3cb4>
   18540:	ldr	r3, [sp, #28]
   18544:	mov	r0, r6
   18548:	str	r3, [r9]
   1854c:	add	sp, sp, #100	; 0x64
   18550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18554:	mov	r3, #8
   18558:	sub	r2, r4, r2
   1855c:	str	r3, [sp]
   18560:	add	r1, sp, #44	; 0x2c
   18564:	add	r2, r2, #1
   18568:	mvn	r3, #-2147483648	; 0x80000000
   1856c:	bl	1ab38 <__assert_fail@plt+0x9680>
   18570:	mov	r5, r0
   18574:	ldm	r7, {r0, r1}
   18578:	str	r5, [r6]
   1857c:	stm	r5, {r0, r1}
   18580:	b	18454 <__assert_fail@plt+0x6f9c>
   18584:	bl	114a0 <abort@plt>
   18588:	ldrdeq	pc, [r2], -r4
   1858c:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18590:	andeq	pc, r2, r4, lsl #4
   18594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18598:	mov	r5, r0
   1859c:	ldr	lr, [pc, #452]	; 18768 <__assert_fail@plt+0x72b0>
   185a0:	mov	r6, r1
   185a4:	mov	sl, r2
   185a8:	ldm	lr!, {r0, r1, r2, r3}
   185ac:	sub	sp, sp, #92	; 0x5c
   185b0:	add	ip, sp, #40	; 0x28
   185b4:	cmp	r6, #0
   185b8:	cmpne	r5, #0
   185bc:	stmia	ip!, {r0, r1, r2, r3}
   185c0:	mov	r9, #10
   185c4:	ldm	lr!, {r0, r1, r2, r3}
   185c8:	moveq	fp, #1
   185cc:	movne	fp, #0
   185d0:	str	r9, [sp, #40]	; 0x28
   185d4:	stmia	ip!, {r0, r1, r2, r3}
   185d8:	ldm	lr, {r0, r1, r2, r3}
   185dc:	stm	ip, {r0, r1, r2, r3}
   185e0:	beq	18764 <__assert_fail@plt+0x72ac>
   185e4:	str	r5, [sp, #80]	; 0x50
   185e8:	str	r6, [sp, #84]	; 0x54
   185ec:	bl	11338 <__errno_location@plt>
   185f0:	ldr	r7, [pc, #372]	; 1876c <__assert_fail@plt+0x72b4>
   185f4:	ldr	r2, [r7, #4]
   185f8:	ldr	r4, [r7]
   185fc:	cmp	r2, #0
   18600:	ldr	r3, [r0]
   18604:	mov	r8, r0
   18608:	str	r3, [sp, #24]
   1860c:	movgt	r3, r9
   18610:	bgt	18678 <__assert_fail@plt+0x71c0>
   18614:	add	r5, r7, #8
   18618:	cmp	r4, r5
   1861c:	str	r2, [sp, #36]	; 0x24
   18620:	beq	18734 <__assert_fail@plt+0x727c>
   18624:	mov	r3, #8
   18628:	mov	r0, r4
   1862c:	str	r3, [sp]
   18630:	rsb	r2, r2, #1
   18634:	mvn	r3, #-2147483648	; 0x80000000
   18638:	add	r1, sp, #36	; 0x24
   1863c:	bl	1ab38 <__assert_fail@plt+0x9680>
   18640:	mov	r4, r0
   18644:	str	r0, [r7]
   18648:	ldr	r0, [r7, #4]
   1864c:	ldr	r2, [sp, #36]	; 0x24
   18650:	mov	r1, #0
   18654:	sub	r2, r2, r0
   18658:	add	r0, r4, r0, lsl #3
   1865c:	lsl	r2, r2, #3
   18660:	bl	11368 <memset@plt>
   18664:	ldr	r3, [sp, #40]	; 0x28
   18668:	ldr	r5, [sp, #80]	; 0x50
   1866c:	ldr	r6, [sp, #84]	; 0x54
   18670:	ldr	r2, [sp, #36]	; 0x24
   18674:	str	r2, [r7, #4]
   18678:	ldr	r2, [sp, #44]	; 0x2c
   1867c:	ldr	r9, [r4]
   18680:	ldr	r7, [r4, #4]
   18684:	orr	r2, r2, #1
   18688:	add	fp, sp, #48	; 0x30
   1868c:	str	r2, [sp, #28]
   18690:	str	r2, [sp, #4]
   18694:	str	r3, [sp]
   18698:	str	r6, [sp, #16]
   1869c:	str	r5, [sp, #12]
   186a0:	mov	r1, r9
   186a4:	mov	r0, r7
   186a8:	str	fp, [sp, #8]
   186ac:	mvn	r3, #0
   186b0:	mov	r2, sl
   186b4:	bl	1516c <__assert_fail@plt+0x3cb4>
   186b8:	cmp	r9, r0
   186bc:	bhi	18720 <__assert_fail@plt+0x7268>
   186c0:	ldr	r3, [pc, #168]	; 18770 <__assert_fail@plt+0x72b8>
   186c4:	add	r5, r0, #1
   186c8:	cmp	r7, r3
   186cc:	str	r5, [r4]
   186d0:	beq	186dc <__assert_fail@plt+0x7224>
   186d4:	mov	r0, r7
   186d8:	bl	13ef8 <__assert_fail@plt+0x2a40>
   186dc:	mov	r0, r5
   186e0:	bl	1a91c <__assert_fail@plt+0x9464>
   186e4:	ldr	lr, [sp, #84]	; 0x54
   186e8:	ldr	r3, [sp, #40]	; 0x28
   186ec:	ldr	ip, [sp, #80]	; 0x50
   186f0:	mov	r2, sl
   186f4:	mov	r1, r5
   186f8:	str	r0, [r4, #4]
   186fc:	ldr	r4, [sp, #28]
   18700:	str	r3, [sp]
   18704:	str	fp, [sp, #8]
   18708:	str	r4, [sp, #4]
   1870c:	str	lr, [sp, #16]
   18710:	str	ip, [sp, #12]
   18714:	mvn	r3, #0
   18718:	mov	r7, r0
   1871c:	bl	1516c <__assert_fail@plt+0x3cb4>
   18720:	ldr	r3, [sp, #24]
   18724:	mov	r0, r7
   18728:	str	r3, [r8]
   1872c:	add	sp, sp, #92	; 0x5c
   18730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18734:	mov	r3, #8
   18738:	str	r3, [sp]
   1873c:	add	r1, sp, #36	; 0x24
   18740:	rsb	r2, r2, #1
   18744:	mov	r0, fp
   18748:	mvn	r3, #-2147483648	; 0x80000000
   1874c:	bl	1ab38 <__assert_fail@plt+0x9680>
   18750:	mov	r4, r0
   18754:	ldm	r5, {r0, r1}
   18758:	str	r4, [r7]
   1875c:	stm	r4, {r0, r1}
   18760:	b	18648 <__assert_fail@plt+0x7190>
   18764:	bl	114a0 <abort@plt>
   18768:	ldrdeq	pc, [r2], -r4
   1876c:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18770:	andeq	pc, r2, r4, lsl #4
   18774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18778:	mov	r5, r0
   1877c:	ldr	lr, [pc, #464]	; 18954 <__assert_fail@plt+0x749c>
   18780:	mov	r6, r1
   18784:	mov	sl, r2
   18788:	mov	fp, r3
   1878c:	ldm	lr!, {r0, r1, r2, r3}
   18790:	sub	sp, sp, #92	; 0x5c
   18794:	add	ip, sp, #40	; 0x28
   18798:	cmp	r6, #0
   1879c:	cmpne	r5, #0
   187a0:	stmia	ip!, {r0, r1, r2, r3}
   187a4:	moveq	r4, #1
   187a8:	ldm	lr!, {r0, r1, r2, r3}
   187ac:	movne	r4, #0
   187b0:	mov	r9, #10
   187b4:	str	r4, [sp, #28]
   187b8:	stmia	ip!, {r0, r1, r2, r3}
   187bc:	ldm	lr, {r0, r1, r2, r3}
   187c0:	str	r9, [sp, #40]	; 0x28
   187c4:	stm	ip, {r0, r1, r2, r3}
   187c8:	beq	18950 <__assert_fail@plt+0x7498>
   187cc:	str	r5, [sp, #80]	; 0x50
   187d0:	str	r6, [sp, #84]	; 0x54
   187d4:	bl	11338 <__errno_location@plt>
   187d8:	ldr	r7, [pc, #376]	; 18958 <__assert_fail@plt+0x74a0>
   187dc:	ldr	r2, [r7, #4]
   187e0:	ldr	r4, [r7]
   187e4:	cmp	r2, #0
   187e8:	ldr	r3, [r0]
   187ec:	mov	r8, r0
   187f0:	str	r3, [sp, #24]
   187f4:	movgt	r3, r9
   187f8:	bgt	18860 <__assert_fail@plt+0x73a8>
   187fc:	add	r5, r7, #8
   18800:	cmp	r4, r5
   18804:	str	r2, [sp, #36]	; 0x24
   18808:	beq	18920 <__assert_fail@plt+0x7468>
   1880c:	mov	r3, #8
   18810:	mov	r0, r4
   18814:	str	r3, [sp]
   18818:	rsb	r2, r2, #1
   1881c:	mvn	r3, #-2147483648	; 0x80000000
   18820:	add	r1, sp, #36	; 0x24
   18824:	bl	1ab38 <__assert_fail@plt+0x9680>
   18828:	mov	r4, r0
   1882c:	str	r0, [r7]
   18830:	ldr	r0, [r7, #4]
   18834:	ldr	r2, [sp, #36]	; 0x24
   18838:	mov	r1, #0
   1883c:	sub	r2, r2, r0
   18840:	add	r0, r4, r0, lsl #3
   18844:	lsl	r2, r2, #3
   18848:	bl	11368 <memset@plt>
   1884c:	ldr	r3, [sp, #40]	; 0x28
   18850:	ldr	r5, [sp, #80]	; 0x50
   18854:	ldr	r6, [sp, #84]	; 0x54
   18858:	ldr	r2, [sp, #36]	; 0x24
   1885c:	str	r2, [r7, #4]
   18860:	ldr	r2, [sp, #44]	; 0x2c
   18864:	ldr	r9, [r4]
   18868:	ldr	r7, [r4, #4]
   1886c:	orr	r2, r2, #1
   18870:	str	r3, [sp]
   18874:	add	r3, sp, #48	; 0x30
   18878:	str	r2, [sp, #28]
   1887c:	str	r2, [sp, #4]
   18880:	str	r3, [sp, #8]
   18884:	str	r6, [sp, #16]
   18888:	str	r5, [sp, #12]
   1888c:	mov	r1, r9
   18890:	mov	r0, r7
   18894:	mov	r3, fp
   18898:	mov	r2, sl
   1889c:	bl	1516c <__assert_fail@plt+0x3cb4>
   188a0:	cmp	r9, r0
   188a4:	bhi	1890c <__assert_fail@plt+0x7454>
   188a8:	ldr	r3, [pc, #172]	; 1895c <__assert_fail@plt+0x74a4>
   188ac:	add	r5, r0, #1
   188b0:	cmp	r7, r3
   188b4:	str	r5, [r4]
   188b8:	beq	188c4 <__assert_fail@plt+0x740c>
   188bc:	mov	r0, r7
   188c0:	bl	13ef8 <__assert_fail@plt+0x2a40>
   188c4:	mov	r0, r5
   188c8:	bl	1a91c <__assert_fail@plt+0x9464>
   188cc:	add	lr, sp, #48	; 0x30
   188d0:	ldr	ip, [sp, #84]	; 0x54
   188d4:	mov	r1, r5
   188d8:	ldr	r5, [sp, #28]
   188dc:	mov	r3, fp
   188e0:	mov	r2, sl
   188e4:	str	r0, [r4, #4]
   188e8:	ldr	r4, [sp, #80]	; 0x50
   188ec:	str	lr, [sp, #8]
   188f0:	ldr	lr, [sp, #40]	; 0x28
   188f4:	str	r5, [sp, #4]
   188f8:	str	ip, [sp, #16]
   188fc:	str	r4, [sp, #12]
   18900:	str	lr, [sp]
   18904:	mov	r7, r0
   18908:	bl	1516c <__assert_fail@plt+0x3cb4>
   1890c:	ldr	r3, [sp, #24]
   18910:	mov	r0, r7
   18914:	str	r3, [r8]
   18918:	add	sp, sp, #92	; 0x5c
   1891c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18920:	mov	r3, #8
   18924:	str	r3, [sp]
   18928:	add	r1, sp, #36	; 0x24
   1892c:	rsb	r2, r2, #1
   18930:	ldr	r0, [sp, #28]
   18934:	mvn	r3, #-2147483648	; 0x80000000
   18938:	bl	1ab38 <__assert_fail@plt+0x9680>
   1893c:	mov	r4, r0
   18940:	ldm	r5, {r0, r1}
   18944:	str	r4, [r7]
   18948:	stm	r4, {r0, r1}
   1894c:	b	18830 <__assert_fail@plt+0x7378>
   18950:	bl	114a0 <abort@plt>
   18954:	ldrdeq	pc, [r2], -r4
   18958:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   1895c:	andeq	pc, r2, r4, lsl #4
   18960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18964:	sub	sp, sp, #52	; 0x34
   18968:	mov	r5, r0
   1896c:	mov	sl, r1
   18970:	mov	fp, r2
   18974:	bl	11338 <__errno_location@plt>
   18978:	ldr	r4, [pc, #404]	; 18b14 <__assert_fail@plt+0x765c>
   1897c:	cmn	r5, #-2147483647	; 0x80000001
   18980:	ldr	r6, [r4]
   18984:	mov	r8, r0
   18988:	movne	r0, #0
   1898c:	moveq	r0, #1
   18990:	ldr	r3, [r8]
   18994:	orrs	r0, r0, r5, lsr #31
   18998:	str	r3, [sp, #28]
   1899c:	bne	18b10 <__assert_fail@plt+0x7658>
   189a0:	ldr	r2, [r4, #4]
   189a4:	cmp	r5, r2
   189a8:	blt	18a08 <__assert_fail@plt+0x7550>
   189ac:	add	r7, r4, #8
   189b0:	cmp	r6, r7
   189b4:	str	r2, [sp, #44]	; 0x2c
   189b8:	beq	18ae0 <__assert_fail@plt+0x7628>
   189bc:	mov	r3, #8
   189c0:	sub	r2, r5, r2
   189c4:	mov	r0, r6
   189c8:	str	r3, [sp]
   189cc:	add	r2, r2, #1
   189d0:	mvn	r3, #-2147483648	; 0x80000000
   189d4:	add	r1, sp, #44	; 0x2c
   189d8:	bl	1ab38 <__assert_fail@plt+0x9680>
   189dc:	mov	r6, r0
   189e0:	str	r0, [r4]
   189e4:	ldr	r0, [r4, #4]
   189e8:	ldr	r2, [sp, #44]	; 0x2c
   189ec:	mov	r1, #0
   189f0:	sub	r2, r2, r0
   189f4:	add	r0, r6, r0, lsl #3
   189f8:	lsl	r2, r2, #3
   189fc:	bl	11368 <memset@plt>
   18a00:	ldr	r3, [sp, #44]	; 0x2c
   18a04:	str	r3, [r4, #4]
   18a08:	ldr	r2, [r4, #56]	; 0x38
   18a0c:	add	r3, r6, r5, lsl #3
   18a10:	ldr	r1, [r4, #20]
   18a14:	ldr	r7, [r3, #4]
   18a18:	ldr	r9, [r6, r5, lsl #3]
   18a1c:	ldr	ip, [r4, #60]	; 0x3c
   18a20:	str	r3, [sp, #32]
   18a24:	ldr	r3, [r4, #16]
   18a28:	str	r2, [sp, #12]
   18a2c:	ldr	r2, [pc, #228]	; 18b18 <__assert_fail@plt+0x7660>
   18a30:	orr	r1, r1, #1
   18a34:	str	r1, [sp, #36]	; 0x24
   18a38:	str	r1, [sp, #4]
   18a3c:	str	r2, [sp, #8]
   18a40:	str	r3, [sp]
   18a44:	mov	r0, r7
   18a48:	mov	r1, r9
   18a4c:	str	ip, [sp, #16]
   18a50:	mov	r3, fp
   18a54:	mov	r2, sl
   18a58:	bl	1516c <__assert_fail@plt+0x3cb4>
   18a5c:	cmp	r9, r0
   18a60:	bhi	18acc <__assert_fail@plt+0x7614>
   18a64:	ldr	r3, [pc, #176]	; 18b1c <__assert_fail@plt+0x7664>
   18a68:	add	r9, r0, #1
   18a6c:	cmp	r7, r3
   18a70:	str	r9, [r6, r5, lsl #3]
   18a74:	beq	18a80 <__assert_fail@plt+0x75c8>
   18a78:	mov	r0, r7
   18a7c:	bl	13ef8 <__assert_fail@plt+0x2a40>
   18a80:	mov	r0, r9
   18a84:	bl	1a91c <__assert_fail@plt+0x9464>
   18a88:	ldr	ip, [sp, #32]
   18a8c:	ldr	lr, [r4, #60]	; 0x3c
   18a90:	ldr	r5, [r4, #56]	; 0x38
   18a94:	mov	r3, fp
   18a98:	mov	r2, sl
   18a9c:	mov	r1, r9
   18aa0:	str	r0, [ip, #4]
   18aa4:	ldr	ip, [r4, #16]
   18aa8:	ldr	r4, [pc, #104]	; 18b18 <__assert_fail@plt+0x7660>
   18aac:	str	lr, [sp, #16]
   18ab0:	str	r4, [sp, #8]
   18ab4:	ldr	r4, [sp, #36]	; 0x24
   18ab8:	str	r5, [sp, #12]
   18abc:	str	r4, [sp, #4]
   18ac0:	str	ip, [sp]
   18ac4:	mov	r7, r0
   18ac8:	bl	1516c <__assert_fail@plt+0x3cb4>
   18acc:	ldr	r3, [sp, #28]
   18ad0:	mov	r0, r7
   18ad4:	str	r3, [r8]
   18ad8:	add	sp, sp, #52	; 0x34
   18adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ae0:	mov	r3, #8
   18ae4:	sub	r2, r5, r2
   18ae8:	str	r3, [sp]
   18aec:	add	r1, sp, #44	; 0x2c
   18af0:	add	r2, r2, #1
   18af4:	mvn	r3, #-2147483648	; 0x80000000
   18af8:	bl	1ab38 <__assert_fail@plt+0x9680>
   18afc:	mov	r6, r0
   18b00:	ldm	r7, {r0, r1}
   18b04:	str	r6, [r4]
   18b08:	stm	r6, {r0, r1}
   18b0c:	b	189e4 <__assert_fail@plt+0x752c>
   18b10:	bl	114a0 <abort@plt>
   18b14:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18b18:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18b1c:	andeq	pc, r2, r4, lsl #4
   18b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b24:	sub	sp, sp, #44	; 0x2c
   18b28:	mov	r9, r0
   18b2c:	mov	sl, r1
   18b30:	bl	11338 <__errno_location@plt>
   18b34:	ldr	r4, [pc, #360]	; 18ca4 <__assert_fail@plt+0x77ec>
   18b38:	ldr	r2, [r4, #4]
   18b3c:	ldr	r5, [r4]
   18b40:	cmp	r2, #0
   18b44:	ldr	r3, [r0]
   18b48:	mov	r7, r0
   18b4c:	str	r3, [sp, #24]
   18b50:	bgt	18bac <__assert_fail@plt+0x76f4>
   18b54:	add	r6, r4, #8
   18b58:	cmp	r5, r6
   18b5c:	str	r2, [sp, #36]	; 0x24
   18b60:	beq	18c74 <__assert_fail@plt+0x77bc>
   18b64:	mov	r3, #8
   18b68:	mov	r0, r5
   18b6c:	str	r3, [sp]
   18b70:	rsb	r2, r2, #1
   18b74:	mvn	r3, #-2147483648	; 0x80000000
   18b78:	add	r1, sp, #36	; 0x24
   18b7c:	bl	1ab38 <__assert_fail@plt+0x9680>
   18b80:	mov	r5, r0
   18b84:	str	r0, [r4]
   18b88:	ldr	r0, [r4, #4]
   18b8c:	ldr	r2, [sp, #36]	; 0x24
   18b90:	mov	r1, #0
   18b94:	sub	r2, r2, r0
   18b98:	add	r0, r5, r0, lsl #3
   18b9c:	lsl	r2, r2, #3
   18ba0:	bl	11368 <memset@plt>
   18ba4:	ldr	r3, [sp, #36]	; 0x24
   18ba8:	str	r3, [r4, #4]
   18bac:	ldr	r1, [r4, #20]
   18bb0:	ldr	r8, [r5]
   18bb4:	ldr	r6, [r5, #4]
   18bb8:	ldr	r2, [r4, #56]	; 0x38
   18bbc:	ldr	r3, [r4, #16]
   18bc0:	ldr	ip, [r4, #60]	; 0x3c
   18bc4:	ldr	fp, [pc, #220]	; 18ca8 <__assert_fail@plt+0x77f0>
   18bc8:	orr	r1, r1, #1
   18bcc:	str	r1, [sp, #28]
   18bd0:	str	r1, [sp, #4]
   18bd4:	str	r2, [sp, #12]
   18bd8:	str	r3, [sp]
   18bdc:	mov	r1, r8
   18be0:	mov	r0, r6
   18be4:	str	ip, [sp, #16]
   18be8:	str	fp, [sp, #8]
   18bec:	mov	r3, sl
   18bf0:	mov	r2, r9
   18bf4:	bl	1516c <__assert_fail@plt+0x3cb4>
   18bf8:	cmp	r8, r0
   18bfc:	bhi	18c60 <__assert_fail@plt+0x77a8>
   18c00:	ldr	r3, [pc, #164]	; 18cac <__assert_fail@plt+0x77f4>
   18c04:	add	r8, r0, #1
   18c08:	cmp	r6, r3
   18c0c:	str	r8, [r5]
   18c10:	beq	18c1c <__assert_fail@plt+0x7764>
   18c14:	mov	r0, r6
   18c18:	bl	13ef8 <__assert_fail@plt+0x2a40>
   18c1c:	mov	r0, r8
   18c20:	bl	1a91c <__assert_fail@plt+0x9464>
   18c24:	ldr	lr, [r4, #60]	; 0x3c
   18c28:	ldr	ip, [r4, #16]
   18c2c:	mov	r3, sl
   18c30:	mov	r2, r9
   18c34:	mov	r1, r8
   18c38:	str	r0, [r5, #4]
   18c3c:	ldr	r5, [r4, #56]	; 0x38
   18c40:	ldr	r4, [sp, #28]
   18c44:	str	fp, [sp, #8]
   18c48:	str	r4, [sp, #4]
   18c4c:	str	lr, [sp, #16]
   18c50:	str	r5, [sp, #12]
   18c54:	str	ip, [sp]
   18c58:	mov	r6, r0
   18c5c:	bl	1516c <__assert_fail@plt+0x3cb4>
   18c60:	ldr	r3, [sp, #24]
   18c64:	mov	r0, r6
   18c68:	str	r3, [r7]
   18c6c:	add	sp, sp, #44	; 0x2c
   18c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c74:	mov	r3, #8
   18c78:	str	r3, [sp]
   18c7c:	add	r1, sp, #36	; 0x24
   18c80:	rsb	r2, r2, #1
   18c84:	mvn	r3, #-2147483648	; 0x80000000
   18c88:	mov	r0, #0
   18c8c:	bl	1ab38 <__assert_fail@plt+0x9680>
   18c90:	mov	r5, r0
   18c94:	ldm	r6, {r0, r1}
   18c98:	str	r5, [r4]
   18c9c:	stm	r5, {r0, r1}
   18ca0:	b	18b88 <__assert_fail@plt+0x76d0>
   18ca4:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18ca8:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18cac:	andeq	pc, r2, r4, lsl #4
   18cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cb4:	sub	sp, sp, #44	; 0x2c
   18cb8:	mov	r5, r0
   18cbc:	mov	sl, r1
   18cc0:	bl	11338 <__errno_location@plt>
   18cc4:	ldr	r4, [pc, #396]	; 18e58 <__assert_fail@plt+0x79a0>
   18cc8:	cmn	r5, #-2147483647	; 0x80000001
   18ccc:	ldr	r6, [r4]
   18cd0:	mov	r8, r0
   18cd4:	movne	r0, #0
   18cd8:	moveq	r0, #1
   18cdc:	ldr	r3, [r8]
   18ce0:	orrs	r0, r0, r5, lsr #31
   18ce4:	str	r3, [sp, #24]
   18ce8:	bne	18e54 <__assert_fail@plt+0x799c>
   18cec:	ldr	r2, [r4, #4]
   18cf0:	cmp	r5, r2
   18cf4:	blt	18d54 <__assert_fail@plt+0x789c>
   18cf8:	add	r7, r4, #8
   18cfc:	cmp	r6, r7
   18d00:	str	r2, [sp, #36]	; 0x24
   18d04:	beq	18e24 <__assert_fail@plt+0x796c>
   18d08:	mov	r3, #8
   18d0c:	sub	r2, r5, r2
   18d10:	mov	r0, r6
   18d14:	str	r3, [sp]
   18d18:	add	r2, r2, #1
   18d1c:	mvn	r3, #-2147483648	; 0x80000000
   18d20:	add	r1, sp, #36	; 0x24
   18d24:	bl	1ab38 <__assert_fail@plt+0x9680>
   18d28:	mov	r6, r0
   18d2c:	str	r0, [r4]
   18d30:	ldr	r0, [r4, #4]
   18d34:	ldr	r2, [sp, #36]	; 0x24
   18d38:	mov	r1, #0
   18d3c:	sub	r2, r2, r0
   18d40:	add	r0, r6, r0, lsl #3
   18d44:	lsl	r2, r2, #3
   18d48:	bl	11368 <memset@plt>
   18d4c:	ldr	r3, [sp, #36]	; 0x24
   18d50:	str	r3, [r4, #4]
   18d54:	ldr	r2, [r4, #56]	; 0x38
   18d58:	add	fp, r6, r5, lsl #3
   18d5c:	ldr	r1, [r4, #20]
   18d60:	ldr	r9, [r6, r5, lsl #3]
   18d64:	ldr	r7, [fp, #4]
   18d68:	ldr	r3, [r4, #16]
   18d6c:	ldr	ip, [r4, #60]	; 0x3c
   18d70:	str	r2, [sp, #12]
   18d74:	ldr	r2, [pc, #224]	; 18e5c <__assert_fail@plt+0x79a4>
   18d78:	orr	r1, r1, #1
   18d7c:	str	r1, [sp, #28]
   18d80:	str	r1, [sp, #4]
   18d84:	str	r2, [sp, #8]
   18d88:	str	r3, [sp]
   18d8c:	mov	r0, r7
   18d90:	mov	r1, r9
   18d94:	str	ip, [sp, #16]
   18d98:	mvn	r3, #0
   18d9c:	mov	r2, sl
   18da0:	bl	1516c <__assert_fail@plt+0x3cb4>
   18da4:	cmp	r9, r0
   18da8:	bhi	18e10 <__assert_fail@plt+0x7958>
   18dac:	ldr	r3, [pc, #172]	; 18e60 <__assert_fail@plt+0x79a8>
   18db0:	add	r9, r0, #1
   18db4:	cmp	r7, r3
   18db8:	str	r9, [r6, r5, lsl #3]
   18dbc:	beq	18dc8 <__assert_fail@plt+0x7910>
   18dc0:	mov	r0, r7
   18dc4:	bl	13ef8 <__assert_fail@plt+0x2a40>
   18dc8:	mov	r0, r9
   18dcc:	bl	1a91c <__assert_fail@plt+0x9464>
   18dd0:	ldr	ip, [r4, #60]	; 0x3c
   18dd4:	ldr	r3, [r4, #16]
   18dd8:	ldr	lr, [r4, #56]	; 0x38
   18ddc:	ldr	r4, [pc, #120]	; 18e5c <__assert_fail@plt+0x79a4>
   18de0:	mov	r2, sl
   18de4:	mov	r1, r9
   18de8:	str	r0, [fp, #4]
   18dec:	str	r4, [sp, #8]
   18df0:	ldr	r4, [sp, #28]
   18df4:	str	r3, [sp]
   18df8:	str	r4, [sp, #4]
   18dfc:	str	ip, [sp, #16]
   18e00:	str	lr, [sp, #12]
   18e04:	mvn	r3, #0
   18e08:	mov	r7, r0
   18e0c:	bl	1516c <__assert_fail@plt+0x3cb4>
   18e10:	ldr	r3, [sp, #24]
   18e14:	mov	r0, r7
   18e18:	str	r3, [r8]
   18e1c:	add	sp, sp, #44	; 0x2c
   18e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e24:	mov	r3, #8
   18e28:	sub	r2, r5, r2
   18e2c:	str	r3, [sp]
   18e30:	add	r1, sp, #36	; 0x24
   18e34:	add	r2, r2, #1
   18e38:	mvn	r3, #-2147483648	; 0x80000000
   18e3c:	bl	1ab38 <__assert_fail@plt+0x9680>
   18e40:	mov	r6, r0
   18e44:	ldm	r7, {r0, r1}
   18e48:	str	r6, [r4]
   18e4c:	stm	r6, {r0, r1}
   18e50:	b	18d30 <__assert_fail@plt+0x7878>
   18e54:	bl	114a0 <abort@plt>
   18e58:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18e5c:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18e60:	andeq	pc, r2, r4, lsl #4
   18e64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e68:	sub	sp, sp, #44	; 0x2c
   18e6c:	mov	sl, r0
   18e70:	bl	11338 <__errno_location@plt>
   18e74:	ldr	r4, [pc, #348]	; 18fd8 <__assert_fail@plt+0x7b20>
   18e78:	ldr	r2, [r4, #4]
   18e7c:	ldr	r5, [r4]
   18e80:	cmp	r2, #0
   18e84:	ldr	r3, [r0]
   18e88:	mov	r8, r0
   18e8c:	str	r3, [sp, #28]
   18e90:	bgt	18eec <__assert_fail@plt+0x7a34>
   18e94:	add	r6, r4, #8
   18e98:	cmp	r5, r6
   18e9c:	str	r2, [sp, #36]	; 0x24
   18ea0:	beq	18fa8 <__assert_fail@plt+0x7af0>
   18ea4:	mov	r3, #8
   18ea8:	mov	r0, r5
   18eac:	str	r3, [sp]
   18eb0:	rsb	r2, r2, #1
   18eb4:	mvn	r3, #-2147483648	; 0x80000000
   18eb8:	add	r1, sp, #36	; 0x24
   18ebc:	bl	1ab38 <__assert_fail@plt+0x9680>
   18ec0:	mov	r5, r0
   18ec4:	str	r0, [r4]
   18ec8:	ldr	r0, [r4, #4]
   18ecc:	ldr	r2, [sp, #36]	; 0x24
   18ed0:	mov	r1, #0
   18ed4:	sub	r2, r2, r0
   18ed8:	add	r0, r5, r0, lsl #3
   18edc:	lsl	r2, r2, #3
   18ee0:	bl	11368 <memset@plt>
   18ee4:	ldr	r3, [sp, #36]	; 0x24
   18ee8:	str	r3, [r4, #4]
   18eec:	ldr	r7, [r4, #20]
   18ef0:	ldr	r9, [r5]
   18ef4:	ldr	r6, [r5, #4]
   18ef8:	ldr	r2, [r4, #56]	; 0x38
   18efc:	ldr	r3, [r4, #16]
   18f00:	ldr	ip, [r4, #60]	; 0x3c
   18f04:	ldr	fp, [pc, #208]	; 18fdc <__assert_fail@plt+0x7b24>
   18f08:	orr	r7, r7, #1
   18f0c:	str	r2, [sp, #12]
   18f10:	str	r3, [sp]
   18f14:	str	r7, [sp, #4]
   18f18:	mov	r1, r9
   18f1c:	mov	r0, r6
   18f20:	str	ip, [sp, #16]
   18f24:	str	fp, [sp, #8]
   18f28:	mvn	r3, #0
   18f2c:	mov	r2, sl
   18f30:	bl	1516c <__assert_fail@plt+0x3cb4>
   18f34:	cmp	r9, r0
   18f38:	bhi	18f94 <__assert_fail@plt+0x7adc>
   18f3c:	ldr	r3, [pc, #156]	; 18fe0 <__assert_fail@plt+0x7b28>
   18f40:	add	r9, r0, #1
   18f44:	cmp	r6, r3
   18f48:	str	r9, [r5]
   18f4c:	beq	18f58 <__assert_fail@plt+0x7aa0>
   18f50:	mov	r0, r6
   18f54:	bl	13ef8 <__assert_fail@plt+0x2a40>
   18f58:	mov	r0, r9
   18f5c:	bl	1a91c <__assert_fail@plt+0x9464>
   18f60:	ldr	ip, [r4, #60]	; 0x3c
   18f64:	ldr	r3, [r4, #16]
   18f68:	ldr	lr, [r4, #56]	; 0x38
   18f6c:	mov	r2, sl
   18f70:	mov	r1, r9
   18f74:	str	r0, [r5, #4]
   18f78:	str	r3, [sp]
   18f7c:	stmib	sp, {r7, fp}
   18f80:	str	ip, [sp, #16]
   18f84:	str	lr, [sp, #12]
   18f88:	mvn	r3, #0
   18f8c:	mov	r6, r0
   18f90:	bl	1516c <__assert_fail@plt+0x3cb4>
   18f94:	ldr	r3, [sp, #28]
   18f98:	mov	r0, r6
   18f9c:	str	r3, [r8]
   18fa0:	add	sp, sp, #44	; 0x2c
   18fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fa8:	mov	r3, #8
   18fac:	str	r3, [sp]
   18fb0:	add	r1, sp, #36	; 0x24
   18fb4:	rsb	r2, r2, #1
   18fb8:	mvn	r3, #-2147483648	; 0x80000000
   18fbc:	mov	r0, #0
   18fc0:	bl	1ab38 <__assert_fail@plt+0x9680>
   18fc4:	mov	r5, r0
   18fc8:	ldm	r6, {r0, r1}
   18fcc:	str	r5, [r4]
   18fd0:	stm	r5, {r0, r1}
   18fd4:	b	18ec8 <__assert_fail@plt+0x7a10>
   18fd8:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   18fdc:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18fe0:	andeq	pc, r2, r4, lsl #4
   18fe4:	push	{r4, r5, r6, lr}
   18fe8:	mov	r6, r0
   18fec:	mov	r0, #24
   18ff0:	bl	1a8f4 <__assert_fail@plt+0x943c>
   18ff4:	mov	r4, #0
   18ff8:	mov	r5, #0
   18ffc:	str	r6, [r0]
   19000:	strd	r4, [r0, #16]
   19004:	strd	r4, [r0, #8]
   19008:	pop	{r4, r5, r6, pc}
   1900c:	push	{r4, lr}
   19010:	bl	19568 <__assert_fail@plt+0x80b0>
   19014:	subs	r4, r0, #0
   19018:	beq	1903c <__assert_fail@plt+0x7b84>
   1901c:	mov	r0, #24
   19020:	bl	1a8f4 <__assert_fail@plt+0x943c>
   19024:	mov	r2, #0
   19028:	mov	r3, #0
   1902c:	str	r4, [r0]
   19030:	strd	r2, [r0, #16]
   19034:	strd	r2, [r0, #8]
   19038:	pop	{r4, pc}
   1903c:	mov	r0, r4
   19040:	pop	{r4, pc}
   19044:	ldr	r0, [r0]
   19048:	bx	lr
   1904c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19050:	mov	r8, r2
   19054:	sub	sp, sp, #164	; 0xa4
   19058:	ldr	r2, [r0]
   1905c:	mov	r9, r3
   19060:	str	r2, [sp, #144]	; 0x90
   19064:	ldrd	r4, [r0, #8]
   19068:	adds	r2, r8, #1
   1906c:	ldrd	sl, [r0, #16]
   19070:	adc	r3, r9, #0
   19074:	str	r0, [sp, #148]	; 0x94
   19078:	strd	r2, [sp, #128]	; 0x80
   1907c:	cmp	fp, r9
   19080:	cmpeq	sl, r8
   19084:	bcs	193b8 <__assert_fail@plt+0x7f00>
   19088:	mov	r0, sl
   1908c:	mov	r1, fp
   19090:	mov	r2, #0
   19094:	lsl	r7, r1, #8
   19098:	lsl	r6, r0, #8
   1909c:	orr	r7, r7, r0, lsr #24
   190a0:	adds	r0, r6, #255	; 0xff
   190a4:	adc	r1, r7, #0
   190a8:	cmp	r9, r1
   190ac:	cmpeq	r8, r0
   190b0:	add	r2, r2, #1
   190b4:	bhi	19094 <__assert_fail@plt+0x7bdc>
   190b8:	lsl	r3, fp, #8
   190bc:	orr	r3, r3, sl, lsr #24
   190c0:	str	r3, [sp, #28]
   190c4:	lsl	r3, r5, #8
   190c8:	str	r3, [sp, #20]
   190cc:	lsl	r3, sl, #8
   190d0:	str	r3, [sp, #24]
   190d4:	ldr	r3, [sp, #20]
   190d8:	add	r1, sp, #152	; 0x98
   190dc:	orr	r3, r3, r4, lsr #24
   190e0:	str	r3, [sp, #20]
   190e4:	ldr	r0, [sp, #144]	; 0x90
   190e8:	lsl	r3, r4, #8
   190ec:	str	r3, [sp, #16]
   190f0:	bl	196d0 <__assert_fail@plt+0x8218>
   190f4:	ldrd	sl, [sp, #24]
   190f8:	ldrb	r4, [sp, #152]	; 0x98
   190fc:	ldrd	r2, [sp, #16]
   19100:	adds	sl, sl, #255	; 0xff
   19104:	adc	fp, fp, #0
   19108:	mov	r5, #0
   1910c:	adds	r2, r2, r4
   19110:	adc	r3, r3, r5
   19114:	cmp	r9, fp
   19118:	cmpeq	r8, sl
   1911c:	mov	r4, r2
   19120:	mov	r5, r3
   19124:	bls	193b8 <__assert_fail@plt+0x7f00>
   19128:	lsl	r3, fp, #8
   1912c:	orr	r3, r3, sl, lsr #24
   19130:	str	r3, [sp, #44]	; 0x2c
   19134:	lsl	r3, r5, #8
   19138:	str	r3, [sp, #36]	; 0x24
   1913c:	lsl	r3, sl, #8
   19140:	str	r3, [sp, #40]	; 0x28
   19144:	ldr	r3, [sp, #36]	; 0x24
   19148:	ldrd	sl, [sp, #40]	; 0x28
   1914c:	orr	r3, r3, r2, lsr #24
   19150:	str	r3, [sp, #36]	; 0x24
   19154:	lsl	r3, r2, #8
   19158:	str	r3, [sp, #32]
   1915c:	ldrb	r4, [sp, #153]	; 0x99
   19160:	ldrd	r2, [sp, #32]
   19164:	adds	sl, sl, #255	; 0xff
   19168:	adc	fp, fp, #0
   1916c:	mov	r5, #0
   19170:	adds	r2, r2, r4
   19174:	adc	r3, r3, r5
   19178:	cmp	r9, fp
   1917c:	cmpeq	r8, sl
   19180:	mov	r4, r2
   19184:	mov	r5, r3
   19188:	bls	193b8 <__assert_fail@plt+0x7f00>
   1918c:	lsl	r3, fp, #8
   19190:	orr	r3, r3, sl, lsr #24
   19194:	str	r3, [sp, #60]	; 0x3c
   19198:	lsl	r3, r5, #8
   1919c:	str	r3, [sp, #52]	; 0x34
   191a0:	lsl	r3, sl, #8
   191a4:	str	r3, [sp, #56]	; 0x38
   191a8:	ldr	r3, [sp, #52]	; 0x34
   191ac:	ldrd	sl, [sp, #56]	; 0x38
   191b0:	orr	r3, r3, r2, lsr #24
   191b4:	str	r3, [sp, #52]	; 0x34
   191b8:	lsl	r3, r2, #8
   191bc:	str	r3, [sp, #48]	; 0x30
   191c0:	ldrb	r4, [sp, #154]	; 0x9a
   191c4:	ldrd	r2, [sp, #48]	; 0x30
   191c8:	adds	sl, sl, #255	; 0xff
   191cc:	adc	fp, fp, #0
   191d0:	mov	r5, #0
   191d4:	adds	r2, r2, r4
   191d8:	adc	r3, r3, r5
   191dc:	cmp	r9, fp
   191e0:	cmpeq	r8, sl
   191e4:	mov	r4, r2
   191e8:	mov	r5, r3
   191ec:	bls	193b8 <__assert_fail@plt+0x7f00>
   191f0:	lsl	r3, fp, #8
   191f4:	orr	r3, r3, sl, lsr #24
   191f8:	str	r3, [sp, #76]	; 0x4c
   191fc:	lsl	r3, r5, #8
   19200:	str	r3, [sp, #68]	; 0x44
   19204:	lsl	r3, sl, #8
   19208:	str	r3, [sp, #72]	; 0x48
   1920c:	ldr	r3, [sp, #68]	; 0x44
   19210:	ldrd	sl, [sp, #72]	; 0x48
   19214:	orr	r3, r3, r2, lsr #24
   19218:	str	r3, [sp, #68]	; 0x44
   1921c:	lsl	r3, r2, #8
   19220:	str	r3, [sp, #64]	; 0x40
   19224:	ldrb	r4, [sp, #155]	; 0x9b
   19228:	ldrd	r2, [sp, #64]	; 0x40
   1922c:	adds	sl, sl, #255	; 0xff
   19230:	adc	fp, fp, #0
   19234:	mov	r5, #0
   19238:	adds	r2, r2, r4
   1923c:	adc	r3, r3, r5
   19240:	cmp	r9, fp
   19244:	cmpeq	r8, sl
   19248:	mov	r4, r2
   1924c:	mov	r5, r3
   19250:	bls	193b8 <__assert_fail@plt+0x7f00>
   19254:	lsl	r3, fp, #8
   19258:	orr	r3, r3, sl, lsr #24
   1925c:	str	r3, [sp, #92]	; 0x5c
   19260:	lsl	r3, r5, #8
   19264:	str	r3, [sp, #84]	; 0x54
   19268:	lsl	r3, sl, #8
   1926c:	str	r3, [sp, #88]	; 0x58
   19270:	ldr	r3, [sp, #84]	; 0x54
   19274:	ldrd	sl, [sp, #88]	; 0x58
   19278:	orr	r3, r3, r2, lsr #24
   1927c:	str	r3, [sp, #84]	; 0x54
   19280:	lsl	r3, r2, #8
   19284:	str	r3, [sp, #80]	; 0x50
   19288:	ldrb	r4, [sp, #156]	; 0x9c
   1928c:	ldrd	r2, [sp, #80]	; 0x50
   19290:	adds	sl, sl, #255	; 0xff
   19294:	adc	fp, fp, #0
   19298:	mov	r5, #0
   1929c:	adds	r2, r2, r4
   192a0:	adc	r3, r3, r5
   192a4:	cmp	r9, fp
   192a8:	cmpeq	r8, sl
   192ac:	mov	r4, r2
   192b0:	mov	r5, r3
   192b4:	bls	193b8 <__assert_fail@plt+0x7f00>
   192b8:	lsl	r3, fp, #8
   192bc:	orr	r3, r3, sl, lsr #24
   192c0:	str	r3, [sp, #108]	; 0x6c
   192c4:	lsl	r3, r5, #8
   192c8:	str	r3, [sp, #100]	; 0x64
   192cc:	lsl	r3, sl, #8
   192d0:	str	r3, [sp, #104]	; 0x68
   192d4:	ldr	r3, [sp, #100]	; 0x64
   192d8:	ldrd	sl, [sp, #104]	; 0x68
   192dc:	orr	r3, r3, r2, lsr #24
   192e0:	str	r3, [sp, #100]	; 0x64
   192e4:	lsl	r3, r2, #8
   192e8:	str	r3, [sp, #96]	; 0x60
   192ec:	ldrb	r4, [sp, #157]	; 0x9d
   192f0:	ldrd	r2, [sp, #96]	; 0x60
   192f4:	adds	sl, sl, #255	; 0xff
   192f8:	adc	fp, fp, #0
   192fc:	mov	r5, #0
   19300:	adds	r2, r2, r4
   19304:	adc	r3, r3, r5
   19308:	cmp	r9, fp
   1930c:	cmpeq	r8, sl
   19310:	mov	r4, r2
   19314:	mov	r5, r3
   19318:	bls	193b8 <__assert_fail@plt+0x7f00>
   1931c:	lsl	r3, fp, #8
   19320:	orr	r3, r3, sl, lsr #24
   19324:	str	r3, [sp, #124]	; 0x7c
   19328:	lsl	r3, r5, #8
   1932c:	str	r3, [sp, #116]	; 0x74
   19330:	lsl	r3, sl, #8
   19334:	str	r3, [sp, #120]	; 0x78
   19338:	ldr	r3, [sp, #116]	; 0x74
   1933c:	ldrd	sl, [sp, #120]	; 0x78
   19340:	orr	r3, r3, r2, lsr #24
   19344:	str	r3, [sp, #116]	; 0x74
   19348:	lsl	r3, r2, #8
   1934c:	str	r3, [sp, #112]	; 0x70
   19350:	ldrb	r4, [sp, #158]	; 0x9e
   19354:	ldrd	r2, [sp, #112]	; 0x70
   19358:	adds	sl, sl, #255	; 0xff
   1935c:	adc	fp, fp, #0
   19360:	mov	r5, #0
   19364:	adds	r2, r2, r4
   19368:	adc	r3, r3, r5
   1936c:	cmp	r9, fp
   19370:	cmpeq	r8, sl
   19374:	mov	r4, r2
   19378:	mov	r5, r3
   1937c:	bls	193b8 <__assert_fail@plt+0x7f00>
   19380:	lsl	r3, r3, #8
   19384:	orr	r3, r3, r2, lsr #24
   19388:	str	r3, [sp, #12]
   1938c:	lsl	r3, r2, #8
   19390:	str	r3, [sp, #8]
   19394:	ldrb	r4, [sp, #159]	; 0x9f
   19398:	ldrd	r2, [sp, #8]
   1939c:	mov	r5, #0
   193a0:	mvn	sl, #0
   193a4:	adds	r2, r2, r4
   193a8:	adc	r3, r3, r5
   193ac:	mov	fp, sl
   193b0:	mov	r4, r2
   193b4:	mov	r5, r3
   193b8:	cmp	fp, r9
   193bc:	cmpeq	sl, r8
   193c0:	beq	19424 <__assert_fail@plt+0x7f6c>
   193c4:	subs	r2, sl, r8
   193c8:	sbc	r3, fp, r9
   193cc:	mov	r0, r2
   193d0:	strd	r2, [sp, #136]	; 0x88
   193d4:	mov	r1, r3
   193d8:	ldrd	r2, [sp, #128]	; 0x80
   193dc:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   193e0:	mov	r0, r4
   193e4:	mov	r1, r5
   193e8:	strd	r2, [sp]
   193ec:	ldrd	r2, [sp, #128]	; 0x80
   193f0:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   193f4:	ldrd	r0, [sp]
   193f8:	subs	r0, sl, r0
   193fc:	sbc	r1, fp, r1
   19400:	cmp	r5, r1
   19404:	cmpeq	r4, r0
   19408:	bls	19448 <__assert_fail@plt+0x7f90>
   1940c:	ldrd	sl, [sp]
   19410:	mov	r4, r2
   19414:	mov	r5, r3
   19418:	subs	sl, sl, #1
   1941c:	sbc	fp, fp, #0
   19420:	b	1907c <__assert_fail@plt+0x7bc4>
   19424:	ldr	r1, [sp, #148]	; 0x94
   19428:	mov	r2, #0
   1942c:	mov	r3, #0
   19430:	mov	r0, r4
   19434:	strd	r2, [r1, #16]
   19438:	strd	r2, [r1, #8]
   1943c:	mov	r1, r5
   19440:	add	sp, sp, #164	; 0xa4
   19444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19448:	mov	r0, r4
   1944c:	mov	r1, r5
   19450:	ldrd	r4, [sp, #128]	; 0x80
   19454:	mov	r8, r2
   19458:	mov	r7, r3
   1945c:	mov	r2, r4
   19460:	mov	r3, r5
   19464:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   19468:	ldr	r6, [sp, #148]	; 0x94
   1946c:	mov	r2, r4
   19470:	mov	r3, r5
   19474:	mov	r4, r8
   19478:	mov	r5, r7
   1947c:	strd	r0, [r6, #8]
   19480:	ldrd	r0, [sp, #136]	; 0x88
   19484:	bl	1cdf4 <__assert_fail@plt+0xb93c>
   19488:	strd	r0, [r6, #16]
   1948c:	mov	r0, r4
   19490:	mov	r1, r5
   19494:	add	sp, sp, #164	; 0xa4
   19498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1949c:	push	{r4, lr}
   194a0:	mvn	r2, #0
   194a4:	mov	r4, r0
   194a8:	mov	r1, #24
   194ac:	bl	113ec <__explicit_bzero_chk@plt>
   194b0:	mov	r0, r4
   194b4:	pop	{r4, lr}
   194b8:	b	13ef8 <__assert_fail@plt+0x2a40>
   194bc:	push	{r4, r5, r6, r7, r8, lr}
   194c0:	mov	r4, r0
   194c4:	ldr	r0, [r0]
   194c8:	bl	19828 <__assert_fail@plt+0x8370>
   194cc:	mov	r6, r0
   194d0:	bl	11338 <__errno_location@plt>
   194d4:	mvn	r2, #0
   194d8:	mov	r1, #24
   194dc:	ldr	r7, [r0]
   194e0:	mov	r5, r0
   194e4:	mov	r0, r4
   194e8:	bl	113ec <__explicit_bzero_chk@plt>
   194ec:	mov	r0, r4
   194f0:	bl	13ef8 <__assert_fail@plt+0x2a40>
   194f4:	str	r7, [r5]
   194f8:	mov	r0, r6
   194fc:	pop	{r4, r5, r6, r7, r8, pc}
   19500:	subs	r5, r0, #0
   19504:	push	{r7, lr}
   19508:	beq	19558 <__assert_fail@plt+0x80a0>
   1950c:	ldr	r3, [pc, #72]	; 1955c <__assert_fail@plt+0x80a4>
   19510:	ldr	r6, [r3]
   19514:	bl	11338 <__errno_location@plt>
   19518:	mov	r2, #5
   1951c:	ldr	r4, [r0]
   19520:	cmp	r4, #0
   19524:	moveq	r0, r4
   19528:	ldreq	r1, [pc, #48]	; 19560 <__assert_fail@plt+0x80a8>
   1952c:	ldrne	r1, [pc, #48]	; 19564 <__assert_fail@plt+0x80ac>
   19530:	movne	r0, #0
   19534:	bl	111e8 <dcgettext@plt>
   19538:	mov	r7, r0
   1953c:	mov	r0, r5
   19540:	bl	18e64 <__assert_fail@plt+0x79ac>
   19544:	mov	r2, r7
   19548:	mov	r1, r4
   1954c:	mov	r3, r0
   19550:	mov	r0, r6
   19554:	bl	1129c <error@plt>
   19558:	bl	114a0 <abort@plt>
   1955c:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   19560:	andeq	lr, r1, ip, ror r0
   19564:	andeq	lr, r1, ip, lsl #1
   19568:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1956c:	subs	r5, r1, #0
   19570:	beq	195d0 <__assert_fail@plt+0x8118>
   19574:	cmp	r0, #0
   19578:	mov	r4, r0
   1957c:	beq	195f0 <__assert_fail@plt+0x8138>
   19580:	ldr	r1, [pc, #300]	; 196b4 <__assert_fail@plt+0x81fc>
   19584:	bl	1c210 <__assert_fail@plt+0xad58>
   19588:	subs	r6, r0, #0
   1958c:	beq	1969c <__assert_fail@plt+0x81e4>
   19590:	ldr	r0, [pc, #288]	; 196b8 <__assert_fail@plt+0x8200>
   19594:	bl	1a8f4 <__assert_fail@plt+0x943c>
   19598:	ldr	r2, [pc, #284]	; 196bc <__assert_fail@plt+0x8204>
   1959c:	cmp	r5, #2048	; 0x800
   195a0:	movcc	r3, r5
   195a4:	movcs	r3, #2048	; 0x800
   195a8:	mov	r7, r0
   195ac:	str	r6, [r0]
   195b0:	str	r4, [r0, #8]
   195b4:	add	r1, r7, #12
   195b8:	str	r2, [r7, #4]
   195bc:	mov	r0, r6
   195c0:	mov	r2, #0
   195c4:	bl	1135c <setvbuf@plt>
   195c8:	mov	r0, r7
   195cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195d0:	ldr	r0, [pc, #224]	; 196b8 <__assert_fail@plt+0x8200>
   195d4:	bl	1a8f4 <__assert_fail@plt+0x943c>
   195d8:	ldr	r3, [pc, #220]	; 196bc <__assert_fail@plt+0x8204>
   195dc:	mov	r7, r0
   195e0:	str	r5, [r0]
   195e4:	stmib	r0, {r3, r5}
   195e8:	mov	r0, r7
   195ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195f0:	ldr	r0, [pc, #192]	; 196b8 <__assert_fail@plt+0x8200>
   195f4:	bl	1a8f4 <__assert_fail@plt+0x943c>
   195f8:	ldr	r3, [pc, #188]	; 196bc <__assert_fail@plt+0x8204>
   195fc:	add	r8, r0, #16
   19600:	cmp	r5, #1024	; 0x400
   19604:	addls	r5, r8, r5
   19608:	addhi	r5, r8, #1024	; 0x400
   1960c:	cmp	r8, r5
   19610:	mov	r7, r0
   19614:	str	r4, [r0]
   19618:	str	r4, [r0, #8]
   1961c:	str	r4, [r0, #12]
   19620:	str	r3, [r0, #4]
   19624:	bcs	196a4 <__assert_fail@plt+0x81ec>
   19628:	mov	r6, r4
   1962c:	mov	r4, r8
   19630:	b	1963c <__assert_fail@plt+0x8184>
   19634:	cmp	r5, r4
   19638:	bls	196a4 <__assert_fail@plt+0x81ec>
   1963c:	sub	r1, r5, r4
   19640:	mov	r0, r4
   19644:	mov	r2, r6
   19648:	bl	1144c <getrandom@plt>
   1964c:	cmp	r0, #0
   19650:	addge	r4, r4, r0
   19654:	bge	19634 <__assert_fail@plt+0x817c>
   19658:	bl	11338 <__errno_location@plt>
   1965c:	ldr	sl, [r0]
   19660:	mov	r9, r0
   19664:	cmp	sl, #4
   19668:	beq	19634 <__assert_fail@plt+0x817c>
   1966c:	ldr	r2, [pc, #68]	; 196b8 <__assert_fail@plt+0x8200>
   19670:	ldr	r4, [r7]
   19674:	mov	r1, r2
   19678:	mov	r0, r7
   1967c:	bl	113ec <__explicit_bzero_chk@plt>
   19680:	mov	r0, r7
   19684:	bl	13ef8 <__assert_fail@plt+0x2a40>
   19688:	cmp	r4, #0
   1968c:	beq	19698 <__assert_fail@plt+0x81e0>
   19690:	mov	r0, r4
   19694:	bl	1c110 <__assert_fail@plt+0xac58>
   19698:	str	sl, [r9]
   1969c:	mov	r7, #0
   196a0:	b	195c8 <__assert_fail@plt+0x8110>
   196a4:	mov	r0, r8
   196a8:	bl	19a84 <__assert_fail@plt+0x85cc>
   196ac:	mov	r0, r7
   196b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196b4:	muleq	r1, ip, r0
   196b8:	andeq	r0, r0, ip, lsl r8
   196bc:	andeq	r9, r1, r0, lsl #10
   196c0:	str	r1, [r0, #4]
   196c4:	bx	lr
   196c8:	str	r1, [r0, #8]
   196cc:	bx	lr
   196d0:	ldr	r3, [r0]
   196d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   196d8:	sub	sp, sp, #8
   196dc:	cmp	r3, #0
   196e0:	mov	r6, r0
   196e4:	mov	r5, r1
   196e8:	mov	r4, r2
   196ec:	str	r3, [sp, #4]
   196f0:	beq	19754 <__assert_fail@plt+0x829c>
   196f4:	bl	11338 <__errno_location@plt>
   196f8:	mov	r8, #1
   196fc:	ldr	r3, [sp, #4]
   19700:	mov	r7, r0
   19704:	b	1972c <__assert_fail@plt+0x8274>
   19708:	ldr	r3, [r6]
   1970c:	ldr	r1, [r6, #4]
   19710:	ldr	r0, [r6, #8]
   19714:	ldr	r3, [r3]
   19718:	ands	r3, r3, #32
   1971c:	movne	r3, r2
   19720:	str	r3, [r7]
   19724:	blx	r1
   19728:	ldr	r3, [r6]
   1972c:	mov	r2, r4
   19730:	mov	r0, r5
   19734:	mov	r1, r8
   19738:	bl	11440 <fread_unlocked@plt>
   1973c:	ldr	r2, [r7]
   19740:	subs	r4, r4, r0
   19744:	add	r5, r5, r0
   19748:	bne	19708 <__assert_fail@plt+0x8250>
   1974c:	add	sp, sp, #8
   19750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19754:	ldr	r7, [r0, #12]
   19758:	add	r9, r0, #12
   1975c:	cmp	r2, r7
   19760:	add	r9, r9, #1040	; 0x410
   19764:	addhi	r8, r0, #16
   19768:	movhi	sl, #1024	; 0x400
   1976c:	bls	1981c <__assert_fail@plt+0x8364>
   19770:	rsb	r1, r7, #1024	; 0x400
   19774:	mov	r0, r5
   19778:	add	r1, r9, r1
   1977c:	mov	r2, r7
   19780:	add	r5, r5, r7
   19784:	bl	11194 <memcpy@plt>
   19788:	tst	r5, #3
   1978c:	sub	r4, r4, r7
   19790:	bne	19800 <__assert_fail@plt+0x8348>
   19794:	ldr	r7, [pc, #136]	; 19824 <__assert_fail@plt+0x836c>
   19798:	cmp	r4, r7
   1979c:	bhi	197ac <__assert_fail@plt+0x82f4>
   197a0:	b	197d0 <__assert_fail@plt+0x8318>
   197a4:	cmp	r4, r7
   197a8:	bls	197d0 <__assert_fail@plt+0x8318>
   197ac:	mov	r1, r5
   197b0:	mov	r0, r8
   197b4:	bl	19860 <__assert_fail@plt+0x83a8>
   197b8:	subs	r4, r4, #1024	; 0x400
   197bc:	add	r5, r5, #1024	; 0x400
   197c0:	bne	197a4 <__assert_fail@plt+0x82ec>
   197c4:	str	r4, [r6, #12]
   197c8:	add	sp, sp, #8
   197cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   197d0:	mov	r0, r8
   197d4:	mov	r1, r9
   197d8:	bl	19860 <__assert_fail@plt+0x83a8>
   197dc:	mov	r1, #0
   197e0:	mov	r7, #1024	; 0x400
   197e4:	mov	r2, r4
   197e8:	add	r1, r9, r1
   197ec:	mov	r0, r5
   197f0:	sub	r4, r7, r4
   197f4:	bl	11194 <memcpy@plt>
   197f8:	str	r4, [r6, #12]
   197fc:	b	1974c <__assert_fail@plt+0x8294>
   19800:	mov	r1, r9
   19804:	mov	r0, r8
   19808:	bl	19860 <__assert_fail@plt+0x83a8>
   1980c:	cmp	r4, #1024	; 0x400
   19810:	mov	r7, sl
   19814:	bhi	19770 <__assert_fail@plt+0x82b8>
   19818:	b	197dc <__assert_fail@plt+0x8324>
   1981c:	rsb	r1, r7, #1024	; 0x400
   19820:	b	197e4 <__assert_fail@plt+0x832c>
   19824:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19828:	push	{r4, r5, r6, lr}
   1982c:	mvn	r2, #0
   19830:	ldr	r5, [r0]
   19834:	mov	r4, r0
   19838:	ldr	r1, [pc, #28]	; 1985c <__assert_fail@plt+0x83a4>
   1983c:	bl	113ec <__explicit_bzero_chk@plt>
   19840:	mov	r0, r4
   19844:	bl	13ef8 <__assert_fail@plt+0x2a40>
   19848:	subs	r0, r5, #0
   1984c:	beq	19858 <__assert_fail@plt+0x83a0>
   19850:	pop	{r4, r5, r6, lr}
   19854:	b	1c110 <__assert_fail@plt+0xac58>
   19858:	pop	{r4, r5, r6, pc}
   1985c:	andeq	r0, r0, ip, lsl r8
   19860:	ldr	r2, [r0, #1032]	; 0x408
   19864:	push	{r4, r5, r6, r7, r8, lr}
   19868:	add	r2, r2, #1
   1986c:	ldr	r5, [r0, #1028]	; 0x404
   19870:	ldr	r3, [r0, #1024]	; 0x400
   19874:	add	r1, r1, #16
   19878:	add	r5, r5, r2
   1987c:	add	r4, r0, #512	; 0x200
   19880:	add	ip, r0, #16
   19884:	str	r2, [r0, #1032]	; 0x408
   19888:	ldr	lr, [ip, #-16]
   1988c:	ldr	r6, [ip, #496]	; 0x1f0
   19890:	and	r2, lr, #1020	; 0x3fc
   19894:	eor	r3, r3, r3, lsl #13
   19898:	ldr	r2, [r0, r2]
   1989c:	add	r3, r3, r6
   198a0:	add	r2, r3, r2
   198a4:	add	r5, r2, r5
   198a8:	str	r5, [ip, #-16]
   198ac:	lsr	r5, r5, #8
   198b0:	and	r5, r5, #1020	; 0x3fc
   198b4:	eor	r3, r3, r3, lsr #6
   198b8:	ldr	r6, [r0, r5]
   198bc:	cmp	r4, ip
   198c0:	add	r6, lr, r6
   198c4:	str	r6, [r1, #-16]
   198c8:	ldr	r5, [ip, #-12]
   198cc:	ldr	r7, [ip, #500]	; 0x1f4
   198d0:	and	lr, r5, #1020	; 0x3fc
   198d4:	add	r3, r3, r7
   198d8:	ldr	r7, [r0, lr]
   198dc:	eor	lr, r3, r3, lsl #2
   198e0:	add	r3, r3, r7
   198e4:	add	r3, r3, r6
   198e8:	str	r3, [ip, #-12]
   198ec:	lsr	r3, r3, #8
   198f0:	and	r3, r3, #1020	; 0x3fc
   198f4:	mov	r2, ip
   198f8:	ldr	r3, [r0, r3]
   198fc:	add	ip, ip, #16
   19900:	add	r5, r5, r3
   19904:	str	r5, [r1, #-12]
   19908:	ldr	r7, [ip, #-24]	; 0xffffffe8
   1990c:	ldr	r8, [ip, #488]	; 0x1e8
   19910:	and	r3, r7, #1020	; 0x3fc
   19914:	add	lr, lr, r8
   19918:	ldr	r8, [r0, r3]
   1991c:	eor	r3, lr, lr, lsr #16
   19920:	add	lr, lr, r8
   19924:	add	lr, lr, r5
   19928:	str	lr, [ip, #-24]	; 0xffffffe8
   1992c:	lsr	lr, lr, #8
   19930:	and	lr, lr, #1020	; 0x3fc
   19934:	add	r1, r1, #16
   19938:	ldr	lr, [r0, lr]
   1993c:	add	r7, r7, lr
   19940:	str	r7, [r1, #-24]	; 0xffffffe8
   19944:	ldr	r5, [ip, #-20]	; 0xffffffec
   19948:	ldr	r8, [ip, #492]	; 0x1ec
   1994c:	and	lr, r5, #1020	; 0x3fc
   19950:	add	r3, r3, r8
   19954:	ldr	lr, [r0, lr]
   19958:	add	lr, r3, lr
   1995c:	add	lr, lr, r7
   19960:	str	lr, [ip, #-20]	; 0xffffffec
   19964:	lsr	lr, lr, #8
   19968:	and	lr, lr, #1020	; 0x3fc
   1996c:	ldr	lr, [r0, lr]
   19970:	add	r5, r5, lr
   19974:	str	r5, [r1, #-20]	; 0xffffffec
   19978:	bhi	19888 <__assert_fail@plt+0x83d0>
   1997c:	mov	ip, r1
   19980:	add	r2, r2, #16
   19984:	add	lr, r0, #1024	; 0x400
   19988:	ldr	r4, [r2, #-16]
   1998c:	ldr	r6, [r2, #-528]	; 0xfffffdf0
   19990:	and	r1, r4, #1020	; 0x3fc
   19994:	eor	r3, r3, r3, lsl #13
   19998:	ldr	r1, [r0, r1]
   1999c:	add	r3, r3, r6
   199a0:	add	r1, r3, r1
   199a4:	add	r5, r1, r5
   199a8:	str	r5, [r2, #-16]
   199ac:	lsr	r5, r5, #8
   199b0:	and	r5, r5, #1020	; 0x3fc
   199b4:	eor	r3, r3, r3, lsr #6
   199b8:	ldr	r1, [r0, r5]
   199bc:	cmp	r2, lr
   199c0:	add	r4, r4, r1
   199c4:	str	r4, [ip, #-16]
   199c8:	ldr	r5, [r2, #-12]
   199cc:	ldr	r7, [r2, #-524]	; 0xfffffdf4
   199d0:	and	r1, r5, #1020	; 0x3fc
   199d4:	add	r3, r3, r7
   199d8:	ldr	r7, [r0, r1]
   199dc:	eor	r1, r3, r3, lsl #2
   199e0:	add	r3, r3, r7
   199e4:	add	r3, r3, r4
   199e8:	str	r3, [r2, #-12]
   199ec:	lsr	r3, r3, #8
   199f0:	and	r3, r3, #1020	; 0x3fc
   199f4:	add	r2, r2, #16
   199f8:	ldr	r3, [r0, r3]
   199fc:	add	ip, ip, #16
   19a00:	add	r5, r5, r3
   19a04:	str	r5, [ip, #-28]	; 0xffffffe4
   19a08:	ldr	r4, [r2, #-24]	; 0xffffffe8
   19a0c:	ldr	r6, [r2, #-536]	; 0xfffffde8
   19a10:	and	r3, r4, #1020	; 0x3fc
   19a14:	add	r1, r1, r6
   19a18:	ldr	r6, [r0, r3]
   19a1c:	eor	r3, r1, r1, lsr #16
   19a20:	add	r1, r1, r6
   19a24:	add	r1, r1, r5
   19a28:	str	r1, [r2, #-24]	; 0xffffffe8
   19a2c:	lsr	r1, r1, #8
   19a30:	and	r1, r1, #1020	; 0x3fc
   19a34:	ldr	r1, [r0, r1]
   19a38:	add	r4, r4, r1
   19a3c:	str	r4, [ip, #-24]	; 0xffffffe8
   19a40:	ldr	r5, [r2, #-20]	; 0xffffffec
   19a44:	ldr	r6, [r2, #-532]	; 0xfffffdec
   19a48:	and	r1, r5, #1020	; 0x3fc
   19a4c:	add	r3, r3, r6
   19a50:	ldr	r1, [r0, r1]
   19a54:	add	r1, r3, r1
   19a58:	add	r1, r1, r4
   19a5c:	str	r1, [r2, #-20]	; 0xffffffec
   19a60:	lsr	r1, r1, #8
   19a64:	and	r1, r1, #1020	; 0x3fc
   19a68:	ldr	r1, [r0, r1]
   19a6c:	add	r5, r5, r1
   19a70:	str	r5, [ip, #-20]	; 0xffffffec
   19a74:	bcc	19988 <__assert_fail@plt+0x84d0>
   19a78:	str	r3, [r0, #1024]	; 0x400
   19a7c:	str	r5, [r0, #1028]	; 0x404
   19a80:	pop	{r4, r5, r6, r7, r8, pc}
   19a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a88:	mov	r2, r0
   19a8c:	ldr	r8, [pc, #452]	; 19c58 <__assert_fail@plt+0x87a0>
   19a90:	ldr	r7, [pc, #452]	; 19c5c <__assert_fail@plt+0x87a4>
   19a94:	ldr	r6, [pc, #452]	; 19c60 <__assert_fail@plt+0x87a8>
   19a98:	ldr	r4, [pc, #452]	; 19c64 <__assert_fail@plt+0x87ac>
   19a9c:	ldr	lr, [pc, #452]	; 19c68 <__assert_fail@plt+0x87b0>
   19aa0:	ldr	ip, [pc, #452]	; 19c6c <__assert_fail@plt+0x87b4>
   19aa4:	ldr	r1, [pc, #452]	; 19c70 <__assert_fail@plt+0x87b8>
   19aa8:	ldr	r9, [pc, #452]	; 19c74 <__assert_fail@plt+0x87bc>
   19aac:	add	fp, r0, #1024	; 0x400
   19ab0:	mov	r3, r0
   19ab4:	ldm	r3, {r5, sl}
   19ab8:	add	r3, r3, #32
   19abc:	add	r1, r1, sl
   19ac0:	add	r9, r9, r5
   19ac4:	ldr	sl, [r3, #-24]	; 0xffffffe8
   19ac8:	ldr	r5, [r3, #-20]	; 0xffffffec
   19acc:	eor	r9, r9, r1, lsl #11
   19ad0:	add	ip, ip, sl
   19ad4:	add	r5, r9, r5
   19ad8:	ldr	sl, [r3, #-16]
   19adc:	add	lr, r5, lr
   19ae0:	add	r1, r1, ip
   19ae4:	ldr	r5, [r3, #-12]
   19ae8:	eor	r1, r1, ip, lsr #2
   19aec:	add	ip, ip, lr
   19af0:	add	sl, r1, sl
   19af4:	eor	ip, ip, lr, lsl #8
   19af8:	add	r4, sl, r4
   19afc:	add	r5, ip, r5
   19b00:	add	r6, r5, r6
   19b04:	add	lr, lr, r4
   19b08:	ldr	r5, [r3, #-8]
   19b0c:	eor	lr, lr, r4, lsr #16
   19b10:	ldr	sl, [r3, #-4]
   19b14:	add	r4, r4, r6
   19b18:	add	r5, lr, r5
   19b1c:	eor	r4, r4, r6, lsl #10
   19b20:	add	r7, r5, r7
   19b24:	add	r6, r6, r7
   19b28:	add	sl, r4, sl
   19b2c:	add	r8, sl, r8
   19b30:	eor	r6, r6, r7, lsr #4
   19b34:	add	r9, r9, r6
   19b38:	add	r7, r7, r8
   19b3c:	eor	r7, r7, r8, lsl #8
   19b40:	add	r8, r8, r9
   19b44:	eor	r8, r8, r9, lsr #9
   19b48:	add	r1, r1, r7
   19b4c:	add	r9, r9, r1
   19b50:	add	ip, ip, r8
   19b54:	str	r4, [r3, #-16]
   19b58:	str	lr, [r3, #-20]	; 0xffffffec
   19b5c:	str	r1, [r3, #-28]	; 0xffffffe4
   19b60:	str	r9, [r3, #-32]	; 0xffffffe0
   19b64:	str	ip, [r3, #-24]	; 0xffffffe8
   19b68:	str	r7, [r3, #-8]
   19b6c:	str	r8, [r3, #-4]
   19b70:	str	r6, [r3, #-12]
   19b74:	cmp	fp, r3
   19b78:	bne	19ab4 <__assert_fail@plt+0x85fc>
   19b7c:	ldm	r2, {r5, sl}
   19b80:	add	r2, r2, #32
   19b84:	add	r1, r1, sl
   19b88:	ldr	sl, [r2, #-24]	; 0xffffffe8
   19b8c:	add	r9, r9, r5
   19b90:	ldr	r5, [r2, #-20]	; 0xffffffec
   19b94:	add	ip, ip, sl
   19b98:	eor	r9, r9, r1, lsl #11
   19b9c:	ldr	sl, [r2, #-16]
   19ba0:	add	r5, r9, r5
   19ba4:	add	r1, r1, ip
   19ba8:	add	lr, r5, lr
   19bac:	eor	r1, r1, ip, lsr #2
   19bb0:	ldr	r5, [r2, #-12]
   19bb4:	add	sl, r1, sl
   19bb8:	add	ip, ip, lr
   19bbc:	add	r4, sl, r4
   19bc0:	eor	ip, ip, lr, lsl #8
   19bc4:	ldr	sl, [r2, #-8]
   19bc8:	add	r5, ip, r5
   19bcc:	add	lr, lr, r4
   19bd0:	add	r6, r5, r6
   19bd4:	eor	lr, lr, r4, lsr #16
   19bd8:	ldr	r5, [r2, #-4]
   19bdc:	add	r4, r4, r6
   19be0:	add	sl, lr, sl
   19be4:	eor	r4, r4, r6, lsl #10
   19be8:	add	r7, sl, r7
   19bec:	add	r6, r6, r7
   19bf0:	add	r5, r4, r5
   19bf4:	add	r8, r5, r8
   19bf8:	eor	r6, r6, r7, lsr #4
   19bfc:	add	r9, r9, r6
   19c00:	add	r7, r7, r8
   19c04:	eor	r7, r7, r8, lsl #8
   19c08:	add	r8, r8, r9
   19c0c:	eor	r8, r8, r9, lsr #9
   19c10:	add	r1, r1, r7
   19c14:	add	r9, r9, r1
   19c18:	add	ip, ip, r8
   19c1c:	str	r4, [r2, #-16]
   19c20:	str	lr, [r2, #-20]	; 0xffffffec
   19c24:	str	r1, [r2, #-28]	; 0xffffffe4
   19c28:	str	r9, [r2, #-32]	; 0xffffffe0
   19c2c:	str	ip, [r2, #-24]	; 0xffffffe8
   19c30:	str	r7, [r2, #-8]
   19c34:	str	r8, [r2, #-4]
   19c38:	str	r6, [r2, #-12]
   19c3c:	cmp	r3, r2
   19c40:	bne	19b7c <__assert_fail@plt+0x86c4>
   19c44:	mov	r3, #0
   19c48:	str	r3, [r0, #1032]	; 0x408
   19c4c:	str	r3, [r0, #1028]	; 0x404
   19c50:	str	r3, [r0, #1024]	; 0x400
   19c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c58:	rsbcc	r9, r0, r9, lsl r1
   19c5c:	strbtgt	lr, [pc], #2587	; 19c64 <__assert_fail@plt+0x87ac>
   19c60:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   19c64:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   19c68:	svceq	0x00421ad8
   19c6c:	tstgt	r6, #1200	; 0x4b0
   19c70:	ldrbls	r0, [r9, #89]	; 0x59
   19c74:	cmnne	r7, #360	; 0x168
   19c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c7c:	sub	sp, sp, #220	; 0xdc
   19c80:	mov	r8, r1
   19c84:	ldr	r5, [sp, #256]	; 0x100
   19c88:	mov	r9, r2
   19c8c:	str	r5, [sp]
   19c90:	mov	r7, r3
   19c94:	mov	sl, r0
   19c98:	bl	11374 <renameat2@plt>
   19c9c:	mov	r4, r0
   19ca0:	bl	11338 <__errno_location@plt>
   19ca4:	cmp	r4, #0
   19ca8:	blt	19cb8 <__assert_fail@plt+0x8800>
   19cac:	mov	r0, r4
   19cb0:	add	sp, sp, #220	; 0xdc
   19cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cb8:	ldr	r2, [r0]
   19cbc:	mov	r6, r0
   19cc0:	sub	r3, r2, #22
   19cc4:	bic	r3, r3, #16
   19cc8:	cmp	r2, #95	; 0x5f
   19ccc:	cmpne	r3, #0
   19cd0:	movne	fp, #1
   19cd4:	moveq	fp, #0
   19cd8:	bne	19cac <__assert_fail@plt+0x87f4>
   19cdc:	cmp	r5, #0
   19ce0:	beq	19d30 <__assert_fail@plt+0x8878>
   19ce4:	cmp	r5, #1
   19ce8:	bne	19e20 <__assert_fail@plt+0x8968>
   19cec:	mov	r3, #256	; 0x100
   19cf0:	str	r3, [sp]
   19cf4:	mov	r2, r7
   19cf8:	add	r3, sp, #112	; 0x70
   19cfc:	mov	r1, r9
   19d00:	mov	r0, #3
   19d04:	bl	11218 <__fxstatat64@plt>
   19d08:	cmp	r0, #0
   19d0c:	beq	19db8 <__assert_fail@plt+0x8900>
   19d10:	ldr	r3, [r6]
   19d14:	cmp	r3, #75	; 0x4b
   19d18:	beq	19db8 <__assert_fail@plt+0x8900>
   19d1c:	cmp	r3, #2
   19d20:	beq	19d2c <__assert_fail@plt+0x8874>
   19d24:	mvn	r4, #0
   19d28:	b	19cac <__assert_fail@plt+0x87f4>
   19d2c:	mov	fp, r5
   19d30:	mov	r0, r8
   19d34:	bl	11314 <strlen@plt>
   19d38:	mov	r4, r0
   19d3c:	mov	r0, r7
   19d40:	bl	11314 <strlen@plt>
   19d44:	cmp	r0, #0
   19d48:	cmpne	r4, #0
   19d4c:	beq	19e04 <__assert_fail@plt+0x894c>
   19d50:	add	r4, r8, r4
   19d54:	add	r0, r7, r0
   19d58:	ldrb	r2, [r4, #-1]
   19d5c:	ldrb	r3, [r0, #-1]
   19d60:	cmp	r2, #47	; 0x2f
   19d64:	cmpne	r3, #47	; 0x2f
   19d68:	bne	19e04 <__assert_fail@plt+0x894c>
   19d6c:	mov	r4, #256	; 0x100
   19d70:	str	r4, [sp]
   19d74:	add	r3, sp, #8
   19d78:	mov	r2, r8
   19d7c:	mov	r1, sl
   19d80:	mov	r0, #3
   19d84:	bl	11218 <__fxstatat64@plt>
   19d88:	cmp	r0, #0
   19d8c:	bne	19d24 <__assert_fail@plt+0x886c>
   19d90:	cmp	fp, #0
   19d94:	beq	19dc8 <__assert_fail@plt+0x8910>
   19d98:	ldr	r3, [sp, #24]
   19d9c:	and	r3, r3, #61440	; 0xf000
   19da0:	cmp	r3, #16384	; 0x4000
   19da4:	beq	19e04 <__assert_fail@plt+0x894c>
   19da8:	mov	r3, #2
   19dac:	str	r3, [r6]
   19db0:	mvn	r4, #0
   19db4:	b	19cac <__assert_fail@plt+0x87f4>
   19db8:	mov	r3, #17
   19dbc:	str	r3, [r6]
   19dc0:	mvn	r4, #0
   19dc4:	b	19cac <__assert_fail@plt+0x87f4>
   19dc8:	str	r4, [sp]
   19dcc:	add	r3, sp, #112	; 0x70
   19dd0:	mov	r2, r7
   19dd4:	mov	r1, r9
   19dd8:	mov	r0, #3
   19ddc:	bl	11218 <__fxstatat64@plt>
   19de0:	cmp	r0, #0
   19de4:	beq	19e30 <__assert_fail@plt+0x8978>
   19de8:	ldr	r3, [r6]
   19dec:	cmp	r3, #2
   19df0:	bne	19d24 <__assert_fail@plt+0x886c>
   19df4:	ldr	r3, [sp, #24]
   19df8:	and	r3, r3, #61440	; 0xf000
   19dfc:	cmp	r3, #16384	; 0x4000
   19e00:	bne	19d24 <__assert_fail@plt+0x886c>
   19e04:	mov	r3, r7
   19e08:	mov	r2, r9
   19e0c:	mov	r1, r8
   19e10:	mov	r0, sl
   19e14:	bl	11428 <renameat@plt>
   19e18:	mov	r4, r0
   19e1c:	b	19cac <__assert_fail@plt+0x87f4>
   19e20:	mov	r3, #95	; 0x5f
   19e24:	str	r3, [r0]
   19e28:	mvn	r4, #0
   19e2c:	b	19cac <__assert_fail@plt+0x87f4>
   19e30:	ldr	r3, [sp, #128]	; 0x80
   19e34:	and	r3, r3, #61440	; 0xf000
   19e38:	cmp	r3, #16384	; 0x4000
   19e3c:	movne	r3, #20
   19e40:	strne	r3, [r6]
   19e44:	bne	19d24 <__assert_fail@plt+0x886c>
   19e48:	ldr	r3, [sp, #24]
   19e4c:	and	r3, r3, #61440	; 0xf000
   19e50:	cmp	r3, #16384	; 0x4000
   19e54:	beq	19e04 <__assert_fail@plt+0x894c>
   19e58:	mov	r3, #21
   19e5c:	str	r3, [r6]
   19e60:	mvn	r4, #0
   19e64:	b	19cac <__assert_fail@plt+0x87f4>
   19e68:	cmp	r0, #2
   19e6c:	push	{r4, r5, r6, r7, r8, lr}
   19e70:	mov	r4, r0
   19e74:	bhi	19e9c <__assert_fail@plt+0x89e4>
   19e78:	bl	1c41c <__assert_fail@plt+0xaf64>
   19e7c:	mov	r7, r0
   19e80:	bl	11338 <__errno_location@plt>
   19e84:	mov	r5, r0
   19e88:	mov	r0, r4
   19e8c:	ldr	r6, [r5]
   19e90:	mov	r4, r7
   19e94:	bl	114ac <close@plt>
   19e98:	str	r6, [r5]
   19e9c:	mov	r0, r4
   19ea0:	pop	{r4, r5, r6, r7, r8, pc}
   19ea4:	push	{r4, r5, r6, lr}
   19ea8:	sub	sp, sp, #32
   19eac:	cmp	r1, #0
   19eb0:	mov	r4, r0
   19eb4:	ldr	r5, [sp, #48]	; 0x30
   19eb8:	ldr	r6, [sp, #52]	; 0x34
   19ebc:	beq	1a1d4 <__assert_fail@plt+0x8d1c>
   19ec0:	stm	sp, {r2, r3}
   19ec4:	mov	r3, r1
   19ec8:	ldr	r2, [pc, #808]	; 1a1f8 <__assert_fail@plt+0x8d40>
   19ecc:	mov	r1, #1
   19ed0:	bl	113a4 <__fprintf_chk@plt>
   19ed4:	mov	r2, #5
   19ed8:	ldr	r1, [pc, #796]	; 1a1fc <__assert_fail@plt+0x8d44>
   19edc:	mov	r0, #0
   19ee0:	bl	111e8 <dcgettext@plt>
   19ee4:	ldr	r3, [pc, #788]	; 1a200 <__assert_fail@plt+0x8d48>
   19ee8:	ldr	r2, [pc, #788]	; 1a204 <__assert_fail@plt+0x8d4c>
   19eec:	str	r3, [sp]
   19ef0:	mov	r1, #1
   19ef4:	mov	r3, r0
   19ef8:	mov	r0, r4
   19efc:	bl	113a4 <__fprintf_chk@plt>
   19f00:	mov	r1, r4
   19f04:	mov	r0, #10
   19f08:	bl	111dc <fputc_unlocked@plt>
   19f0c:	mov	r2, #5
   19f10:	ldr	r1, [pc, #752]	; 1a208 <__assert_fail@plt+0x8d50>
   19f14:	mov	r0, #0
   19f18:	bl	111e8 <dcgettext@plt>
   19f1c:	mov	r1, #1
   19f20:	ldr	r3, [pc, #740]	; 1a20c <__assert_fail@plt+0x8d54>
   19f24:	mov	r2, r0
   19f28:	mov	r0, r4
   19f2c:	bl	113a4 <__fprintf_chk@plt>
   19f30:	mov	r1, r4
   19f34:	mov	r0, #10
   19f38:	bl	111dc <fputc_unlocked@plt>
   19f3c:	cmp	r6, #9
   19f40:	ldrls	pc, [pc, r6, lsl #2]
   19f44:	b	1a1ec <__assert_fail@plt+0x8d34>
   19f48:	andeq	r9, r1, ip, asr #31
   19f4c:	ldrdeq	r9, [r1], -r4
   19f50:	andeq	sl, r1, r0
   19f54:	andeq	sl, r1, r4, lsr r0
   19f58:	andeq	sl, r1, r0, ror r0
   19f5c:	andeq	sl, r1, ip, lsr #1
   19f60:	andeq	sl, r1, r8, ror #1
   19f64:	andeq	sl, r1, ip, lsr #2
   19f68:	andeq	sl, r1, ip, ror r1
   19f6c:	andeq	r9, r1, r0, ror pc
   19f70:	ldr	r1, [pc, #664]	; 1a210 <__assert_fail@plt+0x8d58>
   19f74:	mov	r2, #5
   19f78:	mov	r0, #0
   19f7c:	bl	111e8 <dcgettext@plt>
   19f80:	ldr	ip, [r5, #32]
   19f84:	ldr	r1, [r5, #28]
   19f88:	ldr	r2, [r5, #24]
   19f8c:	ldr	r3, [r5]
   19f90:	ldr	r6, [r5, #20]
   19f94:	str	ip, [sp, #28]
   19f98:	ldr	lr, [r5, #16]
   19f9c:	str	r1, [sp, #24]
   19fa0:	ldr	ip, [r5, #12]
   19fa4:	str	r2, [sp, #20]
   19fa8:	ldr	r1, [r5, #8]
   19fac:	ldr	r2, [r5, #4]
   19fb0:	str	r6, [sp, #16]
   19fb4:	stmib	sp, {r1, ip, lr}
   19fb8:	mov	r1, #1
   19fbc:	str	r2, [sp]
   19fc0:	mov	r2, r0
   19fc4:	mov	r0, r4
   19fc8:	bl	113a4 <__fprintf_chk@plt>
   19fcc:	add	sp, sp, #32
   19fd0:	pop	{r4, r5, r6, pc}
   19fd4:	mov	r2, #5
   19fd8:	ldr	r1, [pc, #564]	; 1a214 <__assert_fail@plt+0x8d5c>
   19fdc:	mov	r0, #0
   19fe0:	bl	111e8 <dcgettext@plt>
   19fe4:	ldr	r3, [r5]
   19fe8:	mov	r1, #1
   19fec:	mov	r2, r0
   19ff0:	mov	r0, r4
   19ff4:	add	sp, sp, #32
   19ff8:	pop	{r4, r5, r6, lr}
   19ffc:	b	113a4 <__fprintf_chk@plt>
   1a000:	mov	r2, #5
   1a004:	ldr	r1, [pc, #524]	; 1a218 <__assert_fail@plt+0x8d60>
   1a008:	mov	r0, #0
   1a00c:	bl	111e8 <dcgettext@plt>
   1a010:	ldr	r2, [r5, #4]
   1a014:	ldr	r3, [r5]
   1a018:	mov	r1, #1
   1a01c:	str	r2, [sp, #48]	; 0x30
   1a020:	mov	r2, r0
   1a024:	mov	r0, r4
   1a028:	add	sp, sp, #32
   1a02c:	pop	{r4, r5, r6, lr}
   1a030:	b	113a4 <__fprintf_chk@plt>
   1a034:	mov	r2, #5
   1a038:	ldr	r1, [pc, #476]	; 1a21c <__assert_fail@plt+0x8d64>
   1a03c:	mov	r0, #0
   1a040:	bl	111e8 <dcgettext@plt>
   1a044:	ldr	r1, [r5, #8]
   1a048:	ldr	r2, [r5, #4]
   1a04c:	ldr	r3, [r5]
   1a050:	str	r1, [sp, #52]	; 0x34
   1a054:	str	r2, [sp, #48]	; 0x30
   1a058:	mov	r1, #1
   1a05c:	mov	r2, r0
   1a060:	mov	r0, r4
   1a064:	add	sp, sp, #32
   1a068:	pop	{r4, r5, r6, lr}
   1a06c:	b	113a4 <__fprintf_chk@plt>
   1a070:	mov	r2, #5
   1a074:	ldr	r1, [pc, #420]	; 1a220 <__assert_fail@plt+0x8d68>
   1a078:	mov	r0, #0
   1a07c:	bl	111e8 <dcgettext@plt>
   1a080:	ldr	r1, [r5, #8]
   1a084:	ldr	ip, [r5, #12]
   1a088:	ldr	r2, [r5, #4]
   1a08c:	ldr	r3, [r5]
   1a090:	stmib	sp, {r1, ip}
   1a094:	str	r2, [sp]
   1a098:	mov	r1, #1
   1a09c:	mov	r2, r0
   1a0a0:	mov	r0, r4
   1a0a4:	bl	113a4 <__fprintf_chk@plt>
   1a0a8:	b	19fcc <__assert_fail@plt+0x8b14>
   1a0ac:	mov	r2, #5
   1a0b0:	ldr	r1, [pc, #364]	; 1a224 <__assert_fail@plt+0x8d6c>
   1a0b4:	mov	r0, #0
   1a0b8:	bl	111e8 <dcgettext@plt>
   1a0bc:	add	r1, r5, #8
   1a0c0:	ldr	r2, [r5, #4]
   1a0c4:	ldm	r1, {r1, ip, lr}
   1a0c8:	ldr	r3, [r5]
   1a0cc:	str	r2, [sp]
   1a0d0:	stmib	sp, {r1, ip, lr}
   1a0d4:	mov	r1, #1
   1a0d8:	mov	r2, r0
   1a0dc:	mov	r0, r4
   1a0e0:	bl	113a4 <__fprintf_chk@plt>
   1a0e4:	b	19fcc <__assert_fail@plt+0x8b14>
   1a0e8:	mov	r2, #5
   1a0ec:	ldr	r1, [pc, #308]	; 1a228 <__assert_fail@plt+0x8d70>
   1a0f0:	mov	r0, #0
   1a0f4:	bl	111e8 <dcgettext@plt>
   1a0f8:	add	r1, r5, #8
   1a0fc:	ldr	r2, [r5, #4]
   1a100:	ldm	r1, {r1, ip, lr}
   1a104:	ldr	r6, [r5, #20]
   1a108:	ldr	r3, [r5]
   1a10c:	stmib	sp, {r1, ip, lr}
   1a110:	mov	r1, #1
   1a114:	str	r2, [sp]
   1a118:	str	r6, [sp, #16]
   1a11c:	mov	r2, r0
   1a120:	mov	r0, r4
   1a124:	bl	113a4 <__fprintf_chk@plt>
   1a128:	b	19fcc <__assert_fail@plt+0x8b14>
   1a12c:	mov	r2, #5
   1a130:	ldr	r1, [pc, #244]	; 1a22c <__assert_fail@plt+0x8d74>
   1a134:	mov	r0, #0
   1a138:	bl	111e8 <dcgettext@plt>
   1a13c:	ldr	r2, [r5, #24]
   1a140:	ldr	r3, [r5]
   1a144:	ldr	r6, [r5, #20]
   1a148:	ldr	lr, [r5, #16]
   1a14c:	ldr	ip, [r5, #12]
   1a150:	str	r2, [sp, #20]
   1a154:	ldr	r1, [r5, #8]
   1a158:	ldr	r2, [r5, #4]
   1a15c:	str	r6, [sp, #16]
   1a160:	stmib	sp, {r1, ip, lr}
   1a164:	mov	r1, #1
   1a168:	str	r2, [sp]
   1a16c:	mov	r2, r0
   1a170:	mov	r0, r4
   1a174:	bl	113a4 <__fprintf_chk@plt>
   1a178:	b	19fcc <__assert_fail@plt+0x8b14>
   1a17c:	mov	r2, #5
   1a180:	ldr	r1, [pc, #168]	; 1a230 <__assert_fail@plt+0x8d78>
   1a184:	mov	r0, #0
   1a188:	bl	111e8 <dcgettext@plt>
   1a18c:	ldr	r1, [r5, #28]
   1a190:	ldr	r2, [r5, #24]
   1a194:	ldr	r3, [r5]
   1a198:	ldr	r6, [r5, #20]
   1a19c:	ldr	lr, [r5, #16]
   1a1a0:	str	r1, [sp, #24]
   1a1a4:	ldr	ip, [r5, #12]
   1a1a8:	str	r2, [sp, #20]
   1a1ac:	ldr	r1, [r5, #8]
   1a1b0:	ldr	r2, [r5, #4]
   1a1b4:	str	r6, [sp, #16]
   1a1b8:	stmib	sp, {r1, ip, lr}
   1a1bc:	mov	r1, #1
   1a1c0:	str	r2, [sp]
   1a1c4:	mov	r2, r0
   1a1c8:	mov	r0, r4
   1a1cc:	bl	113a4 <__fprintf_chk@plt>
   1a1d0:	b	19fcc <__assert_fail@plt+0x8b14>
   1a1d4:	str	r3, [sp]
   1a1d8:	mov	r1, #1
   1a1dc:	mov	r3, r2
   1a1e0:	ldr	r2, [pc, #76]	; 1a234 <__assert_fail@plt+0x8d7c>
   1a1e4:	bl	113a4 <__fprintf_chk@plt>
   1a1e8:	b	19ed4 <__assert_fail@plt+0x8a1c>
   1a1ec:	mov	r2, #5
   1a1f0:	ldr	r1, [pc, #64]	; 1a238 <__assert_fail@plt+0x8d80>
   1a1f4:	b	19f78 <__assert_fail@plt+0x8ac0>
   1a1f8:	andeq	lr, r1, r0, lsr #1
   1a1fc:	strheq	lr, [r1], -r4
   1a200:	andeq	r0, r0, r6, ror #15
   1a204:	andeq	lr, r1, ip, lsl #7
   1a208:	strheq	lr, [r1], -r8
   1a20c:	andeq	lr, r1, r4, ror #2
   1a210:	muleq	r1, r4, r2
   1a214:	andeq	lr, r1, r8, lsl #3
   1a218:	muleq	r1, r8, r1
   1a21c:			; <UNDEFINED> instruction: 0x0001e1b0
   1a220:	andeq	lr, r1, ip, asr #3
   1a224:	andeq	lr, r1, ip, ror #3
   1a228:	andeq	lr, r1, r0, lsl r2
   1a22c:	andeq	lr, r1, r8, lsr r2
   1a230:	andeq	lr, r1, r4, ror #4
   1a234:	andeq	lr, r1, ip, lsr #1
   1a238:	andeq	lr, r1, r8, asr #5
   1a23c:	push	{r4, r5, lr}
   1a240:	sub	sp, sp, #12
   1a244:	ldr	r5, [sp, #24]
   1a248:	ldr	ip, [r5]
   1a24c:	cmp	ip, #0
   1a250:	beq	1a26c <__assert_fail@plt+0x8db4>
   1a254:	mov	lr, r5
   1a258:	mov	ip, #0
   1a25c:	ldr	r4, [lr, #4]!
   1a260:	add	ip, ip, #1
   1a264:	cmp	r4, #0
   1a268:	bne	1a25c <__assert_fail@plt+0x8da4>
   1a26c:	stm	sp, {r5, ip}
   1a270:	bl	19ea4 <__assert_fail@plt+0x89ec>
   1a274:	add	sp, sp, #12
   1a278:	pop	{r4, r5, pc}
   1a27c:	push	{r4, r5, lr}
   1a280:	sub	sp, sp, #76	; 0x4c
   1a284:	mov	r5, r0
   1a288:	ldr	ip, [sp, #88]	; 0x58
   1a28c:	ldr	r0, [ip]
   1a290:	cmp	r0, #0
   1a294:	str	r0, [sp, #32]
   1a298:	beq	1a66c <__assert_fail@plt+0x91b4>
   1a29c:	ldr	r0, [ip, #4]
   1a2a0:	cmp	r0, #0
   1a2a4:	str	r0, [sp, #36]	; 0x24
   1a2a8:	beq	1a674 <__assert_fail@plt+0x91bc>
   1a2ac:	ldr	r0, [ip, #8]
   1a2b0:	cmp	r0, #0
   1a2b4:	str	r0, [sp, #40]	; 0x28
   1a2b8:	beq	1a67c <__assert_fail@plt+0x91c4>
   1a2bc:	ldr	r0, [ip, #12]
   1a2c0:	cmp	r0, #0
   1a2c4:	str	r0, [sp, #44]	; 0x2c
   1a2c8:	beq	1a684 <__assert_fail@plt+0x91cc>
   1a2cc:	ldr	r0, [ip, #16]
   1a2d0:	cmp	r0, #0
   1a2d4:	str	r0, [sp, #48]	; 0x30
   1a2d8:	beq	1a68c <__assert_fail@plt+0x91d4>
   1a2dc:	ldr	r0, [ip, #20]
   1a2e0:	cmp	r0, #0
   1a2e4:	str	r0, [sp, #52]	; 0x34
   1a2e8:	beq	1a694 <__assert_fail@plt+0x91dc>
   1a2ec:	ldr	r0, [ip, #24]
   1a2f0:	cmp	r0, #0
   1a2f4:	str	r0, [sp, #56]	; 0x38
   1a2f8:	beq	1a69c <__assert_fail@plt+0x91e4>
   1a2fc:	ldr	r0, [ip, #28]
   1a300:	cmp	r0, #0
   1a304:	str	r0, [sp, #60]	; 0x3c
   1a308:	beq	1a6a4 <__assert_fail@plt+0x91ec>
   1a30c:	ldr	r0, [ip, #32]
   1a310:	cmp	r0, #0
   1a314:	str	r0, [sp, #64]	; 0x40
   1a318:	beq	1a6ac <__assert_fail@plt+0x91f4>
   1a31c:	ldr	r0, [ip, #36]	; 0x24
   1a320:	cmp	r0, #0
   1a324:	movne	r4, #10
   1a328:	moveq	r4, #9
   1a32c:	cmp	r1, #0
   1a330:	beq	1a644 <__assert_fail@plt+0x918c>
   1a334:	stm	sp, {r2, r3}
   1a338:	mov	r0, r5
   1a33c:	mov	r3, r1
   1a340:	ldr	r2, [pc, #876]	; 1a6b4 <__assert_fail@plt+0x91fc>
   1a344:	mov	r1, #1
   1a348:	bl	113a4 <__fprintf_chk@plt>
   1a34c:	mov	r2, #5
   1a350:	ldr	r1, [pc, #864]	; 1a6b8 <__assert_fail@plt+0x9200>
   1a354:	mov	r0, #0
   1a358:	bl	111e8 <dcgettext@plt>
   1a35c:	ldr	r3, [pc, #856]	; 1a6bc <__assert_fail@plt+0x9204>
   1a360:	ldr	r2, [pc, #856]	; 1a6c0 <__assert_fail@plt+0x9208>
   1a364:	str	r3, [sp]
   1a368:	mov	r1, #1
   1a36c:	mov	r3, r0
   1a370:	mov	r0, r5
   1a374:	bl	113a4 <__fprintf_chk@plt>
   1a378:	mov	r1, r5
   1a37c:	mov	r0, #10
   1a380:	bl	111dc <fputc_unlocked@plt>
   1a384:	mov	r2, #5
   1a388:	ldr	r1, [pc, #820]	; 1a6c4 <__assert_fail@plt+0x920c>
   1a38c:	mov	r0, #0
   1a390:	bl	111e8 <dcgettext@plt>
   1a394:	mov	r1, #1
   1a398:	ldr	r3, [pc, #808]	; 1a6c8 <__assert_fail@plt+0x9210>
   1a39c:	mov	r2, r0
   1a3a0:	mov	r0, r5
   1a3a4:	bl	113a4 <__fprintf_chk@plt>
   1a3a8:	mov	r1, r5
   1a3ac:	mov	r0, #10
   1a3b0:	bl	111dc <fputc_unlocked@plt>
   1a3b4:	cmp	r4, #9
   1a3b8:	ldrls	pc, [pc, r4, lsl #2]
   1a3bc:	b	1a660 <__assert_fail@plt+0x91a8>
   1a3c0:	andeq	sl, r1, r4, asr #8
   1a3c4:	andeq	sl, r1, ip, asr #8
   1a3c8:	andeq	sl, r1, r8, ror r4
   1a3cc:	andeq	sl, r1, ip, lsr #9
   1a3d0:	andeq	sl, r1, r4, ror #9
   1a3d4:	andeq	sl, r1, r0, lsr #10
   1a3d8:	andeq	sl, r1, ip, asr r5
   1a3dc:	andeq	sl, r1, r0, lsr #11
   1a3e0:	andeq	sl, r1, ip, ror #11
   1a3e4:	andeq	sl, r1, r8, ror #7
   1a3e8:	ldr	r1, [pc, #732]	; 1a6cc <__assert_fail@plt+0x9214>
   1a3ec:	mov	r2, #5
   1a3f0:	mov	r0, #0
   1a3f4:	bl	111e8 <dcgettext@plt>
   1a3f8:	ldr	ip, [sp, #64]	; 0x40
   1a3fc:	ldr	r1, [sp, #60]	; 0x3c
   1a400:	ldr	r2, [sp, #56]	; 0x38
   1a404:	ldr	lr, [sp, #48]	; 0x30
   1a408:	str	ip, [sp, #28]
   1a40c:	str	r1, [sp, #24]
   1a410:	ldr	ip, [sp, #44]	; 0x2c
   1a414:	ldr	r1, [sp, #40]	; 0x28
   1a418:	ldr	r4, [sp, #52]	; 0x34
   1a41c:	str	r2, [sp, #20]
   1a420:	ldr	r2, [sp, #36]	; 0x24
   1a424:	stmib	sp, {r1, ip, lr}
   1a428:	mov	r1, #1
   1a42c:	str	r2, [sp]
   1a430:	ldr	r3, [sp, #32]
   1a434:	str	r4, [sp, #16]
   1a438:	mov	r2, r0
   1a43c:	mov	r0, r5
   1a440:	bl	113a4 <__fprintf_chk@plt>
   1a444:	add	sp, sp, #76	; 0x4c
   1a448:	pop	{r4, r5, pc}
   1a44c:	mov	r2, #5
   1a450:	ldr	r1, [pc, #632]	; 1a6d0 <__assert_fail@plt+0x9218>
   1a454:	mov	r0, #0
   1a458:	bl	111e8 <dcgettext@plt>
   1a45c:	ldr	r3, [sp, #32]
   1a460:	mov	r1, #1
   1a464:	mov	r2, r0
   1a468:	mov	r0, r5
   1a46c:	add	sp, sp, #76	; 0x4c
   1a470:	pop	{r4, r5, lr}
   1a474:	b	113a4 <__fprintf_chk@plt>
   1a478:	mov	r2, #5
   1a47c:	ldr	r1, [pc, #592]	; 1a6d4 <__assert_fail@plt+0x921c>
   1a480:	mov	r0, #0
   1a484:	bl	111e8 <dcgettext@plt>
   1a488:	ldr	r2, [sp, #36]	; 0x24
   1a48c:	ldr	r3, [sp, #32]
   1a490:	str	r2, [sp, #88]	; 0x58
   1a494:	mov	r1, #1
   1a498:	mov	r2, r0
   1a49c:	mov	r0, r5
   1a4a0:	add	sp, sp, #76	; 0x4c
   1a4a4:	pop	{r4, r5, lr}
   1a4a8:	b	113a4 <__fprintf_chk@plt>
   1a4ac:	mov	r2, #5
   1a4b0:	ldr	r1, [pc, #544]	; 1a6d8 <__assert_fail@plt+0x9220>
   1a4b4:	mov	r0, #0
   1a4b8:	bl	111e8 <dcgettext@plt>
   1a4bc:	ldr	r1, [sp, #40]	; 0x28
   1a4c0:	ldr	r2, [sp, #36]	; 0x24
   1a4c4:	str	r1, [sp, #4]
   1a4c8:	str	r2, [sp]
   1a4cc:	ldr	r3, [sp, #32]
   1a4d0:	mov	r1, #1
   1a4d4:	mov	r2, r0
   1a4d8:	mov	r0, r5
   1a4dc:	bl	113a4 <__fprintf_chk@plt>
   1a4e0:	b	1a444 <__assert_fail@plt+0x8f8c>
   1a4e4:	mov	r2, #5
   1a4e8:	ldr	r1, [pc, #492]	; 1a6dc <__assert_fail@plt+0x9224>
   1a4ec:	mov	r0, #0
   1a4f0:	bl	111e8 <dcgettext@plt>
   1a4f4:	ldr	r1, [sp, #40]	; 0x28
   1a4f8:	ldr	ip, [sp, #44]	; 0x2c
   1a4fc:	ldr	r2, [sp, #36]	; 0x24
   1a500:	ldr	r3, [sp, #32]
   1a504:	stmib	sp, {r1, ip}
   1a508:	str	r2, [sp]
   1a50c:	mov	r1, #1
   1a510:	mov	r2, r0
   1a514:	mov	r0, r5
   1a518:	bl	113a4 <__fprintf_chk@plt>
   1a51c:	b	1a444 <__assert_fail@plt+0x8f8c>
   1a520:	mov	r2, #5
   1a524:	ldr	r1, [pc, #436]	; 1a6e0 <__assert_fail@plt+0x9228>
   1a528:	mov	r0, #0
   1a52c:	bl	111e8 <dcgettext@plt>
   1a530:	add	r1, sp, #40	; 0x28
   1a534:	ldr	r2, [sp, #36]	; 0x24
   1a538:	ldm	r1, {r1, ip, lr}
   1a53c:	ldr	r3, [sp, #32]
   1a540:	str	r2, [sp]
   1a544:	stmib	sp, {r1, ip, lr}
   1a548:	mov	r1, #1
   1a54c:	mov	r2, r0
   1a550:	mov	r0, r5
   1a554:	bl	113a4 <__fprintf_chk@plt>
   1a558:	b	1a444 <__assert_fail@plt+0x8f8c>
   1a55c:	mov	r2, #5
   1a560:	ldr	r1, [pc, #380]	; 1a6e4 <__assert_fail@plt+0x922c>
   1a564:	mov	r0, #0
   1a568:	bl	111e8 <dcgettext@plt>
   1a56c:	add	r1, sp, #40	; 0x28
   1a570:	ldr	r2, [sp, #36]	; 0x24
   1a574:	ldm	r1, {r1, ip, lr}
   1a578:	ldr	r4, [sp, #52]	; 0x34
   1a57c:	str	r2, [sp]
   1a580:	stmib	sp, {r1, ip, lr}
   1a584:	mov	r1, #1
   1a588:	ldr	r3, [sp, #32]
   1a58c:	str	r4, [sp, #16]
   1a590:	mov	r2, r0
   1a594:	mov	r0, r5
   1a598:	bl	113a4 <__fprintf_chk@plt>
   1a59c:	b	1a444 <__assert_fail@plt+0x8f8c>
   1a5a0:	mov	r2, #5
   1a5a4:	ldr	r1, [pc, #316]	; 1a6e8 <__assert_fail@plt+0x9230>
   1a5a8:	mov	r0, #0
   1a5ac:	bl	111e8 <dcgettext@plt>
   1a5b0:	add	r1, sp, #40	; 0x28
   1a5b4:	ldr	r2, [sp, #56]	; 0x38
   1a5b8:	ldm	r1, {r1, ip, lr}
   1a5bc:	ldr	r4, [sp, #52]	; 0x34
   1a5c0:	str	r2, [sp, #20]
   1a5c4:	ldr	r2, [sp, #36]	; 0x24
   1a5c8:	stmib	sp, {r1, ip, lr}
   1a5cc:	mov	r1, #1
   1a5d0:	str	r2, [sp]
   1a5d4:	ldr	r3, [sp, #32]
   1a5d8:	str	r4, [sp, #16]
   1a5dc:	mov	r2, r0
   1a5e0:	mov	r0, r5
   1a5e4:	bl	113a4 <__fprintf_chk@plt>
   1a5e8:	b	1a444 <__assert_fail@plt+0x8f8c>
   1a5ec:	mov	r2, #5
   1a5f0:	ldr	r1, [pc, #244]	; 1a6ec <__assert_fail@plt+0x9234>
   1a5f4:	mov	r0, #0
   1a5f8:	bl	111e8 <dcgettext@plt>
   1a5fc:	ldr	r1, [sp, #60]	; 0x3c
   1a600:	ldr	r2, [sp, #56]	; 0x38
   1a604:	ldr	lr, [sp, #48]	; 0x30
   1a608:	ldr	ip, [sp, #44]	; 0x2c
   1a60c:	str	r1, [sp, #24]
   1a610:	ldr	r1, [sp, #40]	; 0x28
   1a614:	ldr	r4, [sp, #52]	; 0x34
   1a618:	str	r2, [sp, #20]
   1a61c:	ldr	r2, [sp, #36]	; 0x24
   1a620:	stmib	sp, {r1, ip, lr}
   1a624:	mov	r1, #1
   1a628:	str	r2, [sp]
   1a62c:	ldr	r3, [sp, #32]
   1a630:	str	r4, [sp, #16]
   1a634:	mov	r2, r0
   1a638:	mov	r0, r5
   1a63c:	bl	113a4 <__fprintf_chk@plt>
   1a640:	b	1a444 <__assert_fail@plt+0x8f8c>
   1a644:	str	r3, [sp]
   1a648:	mov	r1, #1
   1a64c:	mov	r3, r2
   1a650:	mov	r0, r5
   1a654:	ldr	r2, [pc, #148]	; 1a6f0 <__assert_fail@plt+0x9238>
   1a658:	bl	113a4 <__fprintf_chk@plt>
   1a65c:	b	1a34c <__assert_fail@plt+0x8e94>
   1a660:	mov	r2, #5
   1a664:	ldr	r1, [pc, #136]	; 1a6f4 <__assert_fail@plt+0x923c>
   1a668:	b	1a3f0 <__assert_fail@plt+0x8f38>
   1a66c:	mov	r4, r0
   1a670:	b	1a32c <__assert_fail@plt+0x8e74>
   1a674:	mov	r4, #1
   1a678:	b	1a32c <__assert_fail@plt+0x8e74>
   1a67c:	mov	r4, #2
   1a680:	b	1a32c <__assert_fail@plt+0x8e74>
   1a684:	mov	r4, #3
   1a688:	b	1a32c <__assert_fail@plt+0x8e74>
   1a68c:	mov	r4, #4
   1a690:	b	1a32c <__assert_fail@plt+0x8e74>
   1a694:	mov	r4, #5
   1a698:	b	1a32c <__assert_fail@plt+0x8e74>
   1a69c:	mov	r4, #6
   1a6a0:	b	1a32c <__assert_fail@plt+0x8e74>
   1a6a4:	mov	r4, #7
   1a6a8:	b	1a32c <__assert_fail@plt+0x8e74>
   1a6ac:	mov	r4, #8
   1a6b0:	b	1a32c <__assert_fail@plt+0x8e74>
   1a6b4:	andeq	lr, r1, r0, lsr #1
   1a6b8:	strheq	lr, [r1], -r4
   1a6bc:	andeq	r0, r0, r6, ror #15
   1a6c0:	andeq	lr, r1, ip, lsl #7
   1a6c4:	strheq	lr, [r1], -r8
   1a6c8:	andeq	lr, r1, r4, ror #2
   1a6cc:	muleq	r1, r4, r2
   1a6d0:	andeq	lr, r1, r8, lsl #3
   1a6d4:	muleq	r1, r8, r1
   1a6d8:			; <UNDEFINED> instruction: 0x0001e1b0
   1a6dc:	andeq	lr, r1, ip, asr #3
   1a6e0:	andeq	lr, r1, ip, ror #3
   1a6e4:	andeq	lr, r1, r0, lsl r2
   1a6e8:	andeq	lr, r1, r8, lsr r2
   1a6ec:	andeq	lr, r1, r4, ror #4
   1a6f0:	andeq	lr, r1, ip, lsr #1
   1a6f4:	andeq	lr, r1, r8, asr #5
   1a6f8:	push	{r3}		; (str r3, [sp, #-4]!)
   1a6fc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a700:	sub	sp, sp, #56	; 0x38
   1a704:	add	r3, sp, #64	; 0x40
   1a708:	ldr	ip, [sp, #64]	; 0x40
   1a70c:	str	r3, [sp, #12]
   1a710:	cmp	ip, #0
   1a714:	str	ip, [sp, #16]
   1a718:	beq	1a7b0 <__assert_fail@plt+0x92f8>
   1a71c:	ldr	ip, [sp, #68]	; 0x44
   1a720:	cmp	ip, #0
   1a724:	str	ip, [sp, #20]
   1a728:	beq	1a7d0 <__assert_fail@plt+0x9318>
   1a72c:	ldr	ip, [sp, #72]	; 0x48
   1a730:	cmp	ip, #0
   1a734:	str	ip, [sp, #24]
   1a738:	beq	1a7d8 <__assert_fail@plt+0x9320>
   1a73c:	ldr	ip, [sp, #76]	; 0x4c
   1a740:	cmp	ip, #0
   1a744:	str	ip, [sp, #28]
   1a748:	beq	1a7e0 <__assert_fail@plt+0x9328>
   1a74c:	ldr	ip, [sp, #80]	; 0x50
   1a750:	cmp	ip, #0
   1a754:	str	ip, [sp, #32]
   1a758:	beq	1a7e8 <__assert_fail@plt+0x9330>
   1a75c:	ldr	ip, [sp, #84]	; 0x54
   1a760:	cmp	ip, #0
   1a764:	str	ip, [sp, #36]	; 0x24
   1a768:	beq	1a7f0 <__assert_fail@plt+0x9338>
   1a76c:	ldr	ip, [sp, #88]	; 0x58
   1a770:	cmp	ip, #0
   1a774:	str	ip, [sp, #40]	; 0x28
   1a778:	beq	1a7f8 <__assert_fail@plt+0x9340>
   1a77c:	ldr	ip, [sp, #92]	; 0x5c
   1a780:	cmp	ip, #0
   1a784:	str	ip, [sp, #44]	; 0x2c
   1a788:	beq	1a800 <__assert_fail@plt+0x9348>
   1a78c:	ldr	ip, [sp, #96]	; 0x60
   1a790:	cmp	ip, #0
   1a794:	str	ip, [sp, #48]	; 0x30
   1a798:	beq	1a808 <__assert_fail@plt+0x9350>
   1a79c:	ldr	ip, [sp, #100]	; 0x64
   1a7a0:	cmp	ip, #0
   1a7a4:	str	ip, [sp, #52]	; 0x34
   1a7a8:	movne	ip, #10
   1a7ac:	moveq	ip, #9
   1a7b0:	add	r3, sp, #16
   1a7b4:	stm	sp, {r3, ip}
   1a7b8:	ldr	r3, [sp, #60]	; 0x3c
   1a7bc:	bl	19ea4 <__assert_fail@plt+0x89ec>
   1a7c0:	add	sp, sp, #56	; 0x38
   1a7c4:	pop	{lr}		; (ldr lr, [sp], #4)
   1a7c8:	add	sp, sp, #4
   1a7cc:	bx	lr
   1a7d0:	mov	ip, #1
   1a7d4:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a7d8:	mov	ip, #2
   1a7dc:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a7e0:	mov	ip, #3
   1a7e4:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a7e8:	mov	ip, #4
   1a7ec:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a7f0:	mov	ip, #5
   1a7f4:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a7f8:	mov	ip, #6
   1a7fc:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a800:	mov	ip, #7
   1a804:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a808:	mov	ip, #8
   1a80c:	b	1a7b0 <__assert_fail@plt+0x92f8>
   1a810:	ldr	r3, [pc, #116]	; 1a88c <__assert_fail@plt+0x93d4>
   1a814:	push	{r4, lr}
   1a818:	mov	r0, #10
   1a81c:	ldr	r1, [r3]
   1a820:	bl	111dc <fputc_unlocked@plt>
   1a824:	mov	r2, #5
   1a828:	ldr	r1, [pc, #96]	; 1a890 <__assert_fail@plt+0x93d8>
   1a82c:	mov	r0, #0
   1a830:	bl	111e8 <dcgettext@plt>
   1a834:	ldr	r2, [pc, #88]	; 1a894 <__assert_fail@plt+0x93dc>
   1a838:	mov	r1, r0
   1a83c:	mov	r0, #1
   1a840:	bl	11380 <__printf_chk@plt>
   1a844:	mov	r2, #5
   1a848:	ldr	r1, [pc, #72]	; 1a898 <__assert_fail@plt+0x93e0>
   1a84c:	mov	r0, #0
   1a850:	bl	111e8 <dcgettext@plt>
   1a854:	ldr	r3, [pc, #64]	; 1a89c <__assert_fail@plt+0x93e4>
   1a858:	ldr	r2, [pc, #64]	; 1a8a0 <__assert_fail@plt+0x93e8>
   1a85c:	mov	r1, r0
   1a860:	mov	r0, #1
   1a864:	bl	11380 <__printf_chk@plt>
   1a868:	mov	r2, #5
   1a86c:	ldr	r1, [pc, #48]	; 1a8a4 <__assert_fail@plt+0x93ec>
   1a870:	mov	r0, #0
   1a874:	bl	111e8 <dcgettext@plt>
   1a878:	ldr	r2, [pc, #40]	; 1a8a8 <__assert_fail@plt+0x93f0>
   1a87c:	pop	{r4, lr}
   1a880:	mov	r1, r0
   1a884:	mov	r0, #1
   1a888:	b	11380 <__printf_chk@plt>
   1a88c:			; <UNDEFINED> instruction: 0x0002f1b4
   1a890:	andeq	lr, r1, r4, lsl #6
   1a894:	andeq	lr, r1, r8, lsl r3
   1a898:	andeq	lr, r1, r0, lsr r3
   1a89c:	andeq	sp, r1, r8, lsl #22
   1a8a0:	andeq	sp, r1, r0, lsr fp
   1a8a4:	andeq	lr, r1, r4, asr #6
   1a8a8:	andeq	lr, r1, ip, ror #6
   1a8ac:	push	{r4, lr}
   1a8b0:	bl	11458 <aligned_alloc@plt>
   1a8b4:	cmp	r0, #0
   1a8b8:	popne	{r4, pc}
   1a8bc:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a8c0:	push	{r4, r5, r6, lr}
   1a8c4:	mov	r6, r0
   1a8c8:	mov	r5, r1
   1a8cc:	mov	r4, r2
   1a8d0:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1a8d4:	cmp	r0, #0
   1a8d8:	popne	{r4, r5, r6, pc}
   1a8dc:	cmp	r6, #0
   1a8e0:	beq	1a8f0 <__assert_fail@plt+0x9438>
   1a8e4:	cmp	r5, #0
   1a8e8:	cmpne	r4, #0
   1a8ec:	popeq	{r4, r5, r6, pc}
   1a8f0:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a8f4:	push	{r4, lr}
   1a8f8:	bl	1c00c <__assert_fail@plt+0xab54>
   1a8fc:	cmp	r0, #0
   1a900:	popne	{r4, pc}
   1a904:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a908:	push	{r4, lr}
   1a90c:	bl	1c00c <__assert_fail@plt+0xab54>
   1a910:	cmp	r0, #0
   1a914:	popne	{r4, pc}
   1a918:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a91c:	push	{r4, lr}
   1a920:	bl	1c00c <__assert_fail@plt+0xab54>
   1a924:	cmp	r0, #0
   1a928:	popne	{r4, pc}
   1a92c:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a930:	push	{r4, r5, r6, lr}
   1a934:	mov	r5, r0
   1a938:	mov	r4, r1
   1a93c:	bl	1c038 <__assert_fail@plt+0xab80>
   1a940:	cmp	r0, #0
   1a944:	popne	{r4, r5, r6, pc}
   1a948:	adds	r4, r4, #0
   1a94c:	movne	r4, #1
   1a950:	cmp	r5, #0
   1a954:	orreq	r4, r4, #1
   1a958:	cmp	r4, #0
   1a95c:	popeq	{r4, r5, r6, pc}
   1a960:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a964:	push	{r4, lr}
   1a968:	cmp	r1, #0
   1a96c:	orreq	r1, r1, #1
   1a970:	bl	1c038 <__assert_fail@plt+0xab80>
   1a974:	cmp	r0, #0
   1a978:	popne	{r4, pc}
   1a97c:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a980:	push	{r4, r5, r6, lr}
   1a984:	mov	r6, r0
   1a988:	mov	r5, r1
   1a98c:	mov	r4, r2
   1a990:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1a994:	cmp	r0, #0
   1a998:	popne	{r4, r5, r6, pc}
   1a99c:	cmp	r6, #0
   1a9a0:	beq	1a9b0 <__assert_fail@plt+0x94f8>
   1a9a4:	cmp	r5, #0
   1a9a8:	cmpne	r4, #0
   1a9ac:	popeq	{r4, r5, r6, pc}
   1a9b0:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a9b4:	cmp	r2, #0
   1a9b8:	cmpne	r1, #0
   1a9bc:	moveq	r2, #1
   1a9c0:	moveq	r1, r2
   1a9c4:	push	{r4, lr}
   1a9c8:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1a9cc:	cmp	r0, #0
   1a9d0:	popne	{r4, pc}
   1a9d4:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a9d8:	push	{r4, lr}
   1a9dc:	mov	r2, r1
   1a9e0:	mov	r1, r0
   1a9e4:	mov	r0, #0
   1a9e8:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1a9ec:	cmp	r0, #0
   1a9f0:	popne	{r4, pc}
   1a9f4:	bl	1af3c <__assert_fail@plt+0x9a84>
   1a9f8:	cmp	r1, #0
   1a9fc:	cmpne	r0, #0
   1aa00:	moveq	r2, #1
   1aa04:	movne	r2, r1
   1aa08:	moveq	r1, r2
   1aa0c:	movne	r1, r0
   1aa10:	push	{r4, lr}
   1aa14:	mov	r0, #0
   1aa18:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1aa1c:	cmp	r0, #0
   1aa20:	popne	{r4, pc}
   1aa24:	bl	1af3c <__assert_fail@plt+0x9a84>
   1aa28:	cmp	r0, #0
   1aa2c:	push	{r4, r5, r6, lr}
   1aa30:	mov	r5, r1
   1aa34:	ldr	r4, [r1]
   1aa38:	beq	1aa74 <__assert_fail@plt+0x95bc>
   1aa3c:	lsr	r2, r4, #1
   1aa40:	add	r3, r2, #1
   1aa44:	mvn	r3, r3
   1aa48:	cmp	r4, r3
   1aa4c:	bhi	1aa90 <__assert_fail@plt+0x95d8>
   1aa50:	add	r4, r4, #1
   1aa54:	add	r4, r4, r2
   1aa58:	mov	r1, r4
   1aa5c:	mov	r2, #1
   1aa60:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1aa64:	cmp	r0, #0
   1aa68:	beq	1aa94 <__assert_fail@plt+0x95dc>
   1aa6c:	str	r4, [r5]
   1aa70:	pop	{r4, r5, r6, pc}
   1aa74:	cmp	r4, #0
   1aa78:	moveq	r4, #64	; 0x40
   1aa7c:	mov	r1, r4
   1aa80:	mov	r2, #1
   1aa84:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1aa88:	cmp	r0, #0
   1aa8c:	bne	1aa6c <__assert_fail@plt+0x95b4>
   1aa90:	bl	1af3c <__assert_fail@plt+0x9a84>
   1aa94:	cmp	r4, #0
   1aa98:	bne	1aa90 <__assert_fail@plt+0x95d8>
   1aa9c:	str	r4, [r5]
   1aaa0:	pop	{r4, r5, r6, pc}
   1aaa4:	cmp	r0, #0
   1aaa8:	push	{r4, r5, r6, lr}
   1aaac:	mov	r5, r1
   1aab0:	ldr	r4, [r1]
   1aab4:	mov	r6, r2
   1aab8:	beq	1aafc <__assert_fail@plt+0x9644>
   1aabc:	lsr	r1, r4, #1
   1aac0:	add	r3, r1, #1
   1aac4:	mvn	r3, r3
   1aac8:	cmp	r4, r3
   1aacc:	bhi	1ab34 <__assert_fail@plt+0x967c>
   1aad0:	add	r4, r4, #1
   1aad4:	add	r4, r4, r1
   1aad8:	mov	r1, r4
   1aadc:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1aae0:	cmp	r0, #0
   1aae4:	bne	1aaf4 <__assert_fail@plt+0x963c>
   1aae8:	cmp	r4, #0
   1aaec:	cmpne	r6, #0
   1aaf0:	bne	1ab34 <__assert_fail@plt+0x967c>
   1aaf4:	str	r4, [r5]
   1aaf8:	pop	{r4, r5, r6, pc}
   1aafc:	cmp	r4, #0
   1ab00:	bne	1ab1c <__assert_fail@plt+0x9664>
   1ab04:	mov	r1, r2
   1ab08:	mov	r0, #64	; 0x40
   1ab0c:	bl	1c51c <__assert_fail@plt+0xb064>
   1ab10:	cmp	r0, #0
   1ab14:	movne	r4, r0
   1ab18:	addeq	r4, r0, #1
   1ab1c:	mov	r2, r6
   1ab20:	mov	r1, r4
   1ab24:	mov	r0, #0
   1ab28:	bl	1c3d0 <__assert_fail@plt+0xaf18>
   1ab2c:	cmp	r0, #0
   1ab30:	bne	1aaf4 <__assert_fail@plt+0x963c>
   1ab34:	bl	1af3c <__assert_fail@plt+0x9a84>
   1ab38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab3c:	sub	sp, sp, #12
   1ab40:	ldr	r6, [r1]
   1ab44:	mov	r8, r1
   1ab48:	mov	r9, r0
   1ab4c:	asrs	r4, r6, #1
   1ab50:	mov	sl, r2
   1ab54:	mov	fp, r3
   1ab58:	ldr	r7, [sp, #48]	; 0x30
   1ab5c:	bmi	1acd8 <__assert_fail@plt+0x9820>
   1ab60:	mvn	r1, #-2147483648	; 0x80000000
   1ab64:	sub	r1, r1, r4
   1ab68:	cmp	r6, r1
   1ab6c:	movle	r1, #0
   1ab70:	movgt	r1, #1
   1ab74:	mvn	r3, fp
   1ab78:	cmp	r1, #0
   1ab7c:	addeq	r4, r4, r6
   1ab80:	mvnne	r4, #-2147483648	; 0x80000000
   1ab84:	lsr	r3, r3, #31
   1ab88:	cmp	fp, r4
   1ab8c:	movge	r2, #0
   1ab90:	andlt	r2, r3, #1
   1ab94:	cmp	r2, #0
   1ab98:	beq	1ac88 <__assert_fail@plt+0x97d0>
   1ab9c:	cmp	r7, #0
   1aba0:	blt	1ad70 <__assert_fail@plt+0x98b8>
   1aba4:	bne	1ad68 <__assert_fail@plt+0x98b0>
   1aba8:	mov	r5, #64	; 0x40
   1abac:	mov	r1, r7
   1abb0:	mov	r0, r5
   1abb4:	str	r3, [sp, #4]
   1abb8:	bl	1c728 <__assert_fail@plt+0xb270>
   1abbc:	mov	r1, r7
   1abc0:	mov	r4, r0
   1abc4:	mov	r0, r5
   1abc8:	bl	1c948 <__assert_fail@plt+0xb490>
   1abcc:	ldr	r3, [sp, #4]
   1abd0:	sub	r5, r5, r1
   1abd4:	cmp	r9, #0
   1abd8:	sub	r2, r4, r6
   1abdc:	streq	r9, [r8]
   1abe0:	cmp	r2, sl
   1abe4:	bge	1ac68 <__assert_fail@plt+0x97b0>
   1abe8:	cmp	sl, #0
   1abec:	blt	1ad08 <__assert_fail@plt+0x9850>
   1abf0:	cmp	r6, #0
   1abf4:	blt	1ac14 <__assert_fail@plt+0x975c>
   1abf8:	mvn	r2, #-2147483648	; 0x80000000
   1abfc:	sub	r2, r2, sl
   1ac00:	cmp	r6, r2
   1ac04:	movle	r2, #0
   1ac08:	movgt	r2, #1
   1ac0c:	cmp	r2, #0
   1ac10:	bne	1ad04 <__assert_fail@plt+0x984c>
   1ac14:	add	r6, r6, sl
   1ac18:	cmp	fp, r6
   1ac1c:	movge	r3, #0
   1ac20:	andlt	r3, r3, #1
   1ac24:	cmp	r3, #0
   1ac28:	mov	r4, r6
   1ac2c:	bne	1ad04 <__assert_fail@plt+0x984c>
   1ac30:	cmp	r7, #0
   1ac34:	blt	1ad1c <__assert_fail@plt+0x9864>
   1ac38:	beq	1ac64 <__assert_fail@plt+0x97ac>
   1ac3c:	cmp	r6, #0
   1ac40:	blt	1adc0 <__assert_fail@plt+0x9908>
   1ac44:	mov	r1, r7
   1ac48:	mvn	r0, #-2147483648	; 0x80000000
   1ac4c:	bl	1c728 <__assert_fail@plt+0xb270>
   1ac50:	cmp	r6, r0
   1ac54:	movle	r0, #0
   1ac58:	movgt	r0, #1
   1ac5c:	cmp	r0, #0
   1ac60:	bne	1ad04 <__assert_fail@plt+0x984c>
   1ac64:	mul	r5, r6, r7
   1ac68:	mov	r1, r5
   1ac6c:	mov	r0, r9
   1ac70:	bl	1c038 <__assert_fail@plt+0xab80>
   1ac74:	cmp	r0, #0
   1ac78:	beq	1acec <__assert_fail@plt+0x9834>
   1ac7c:	str	r4, [r8]
   1ac80:	add	sp, sp, #12
   1ac84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac88:	cmp	r7, #0
   1ac8c:	blt	1ad48 <__assert_fail@plt+0x9890>
   1ac90:	beq	1aba8 <__assert_fail@plt+0x96f0>
   1ac94:	cmp	r4, #0
   1ac98:	blt	1ad78 <__assert_fail@plt+0x98c0>
   1ac9c:	mov	r1, r7
   1aca0:	mvn	r0, #-2147483648	; 0x80000000
   1aca4:	str	r3, [sp, #4]
   1aca8:	bl	1c728 <__assert_fail@plt+0xb270>
   1acac:	ldr	r3, [sp, #4]
   1acb0:	cmp	r0, r4
   1acb4:	movge	r0, #0
   1acb8:	movlt	r0, #1
   1acbc:	cmp	r0, #0
   1acc0:	mvnne	r5, #-2147483648	; 0x80000000
   1acc4:	bne	1abac <__assert_fail@plt+0x96f4>
   1acc8:	mul	r5, r7, r4
   1accc:	cmp	r5, #63	; 0x3f
   1acd0:	bgt	1abd4 <__assert_fail@plt+0x971c>
   1acd4:	b	1aba8 <__assert_fail@plt+0x96f0>
   1acd8:	rsb	r1, r4, #-2147483648	; 0x80000000
   1acdc:	cmp	r6, r1
   1ace0:	movge	r1, #0
   1ace4:	movlt	r1, #1
   1ace8:	b	1ab74 <__assert_fail@plt+0x96bc>
   1acec:	adds	r5, r5, #0
   1acf0:	movne	r5, #1
   1acf4:	cmp	r9, #0
   1acf8:	orreq	r5, r5, #1
   1acfc:	cmp	r5, #0
   1ad00:	beq	1ac7c <__assert_fail@plt+0x97c4>
   1ad04:	bl	1af3c <__assert_fail@plt+0x9a84>
   1ad08:	rsb	r2, sl, #-2147483648	; 0x80000000
   1ad0c:	cmp	r6, r2
   1ad10:	movge	r2, #0
   1ad14:	movlt	r2, #1
   1ad18:	b	1ac0c <__assert_fail@plt+0x9754>
   1ad1c:	cmp	r6, #0
   1ad20:	blt	1ada4 <__assert_fail@plt+0x98ec>
   1ad24:	cmn	r7, #1
   1ad28:	beq	1ac64 <__assert_fail@plt+0x97ac>
   1ad2c:	mov	r1, r7
   1ad30:	mov	r0, #-2147483648	; 0x80000000
   1ad34:	bl	1c728 <__assert_fail@plt+0xb270>
   1ad38:	cmp	r6, r0
   1ad3c:	movle	r0, #0
   1ad40:	movgt	r0, #1
   1ad44:	b	1ac5c <__assert_fail@plt+0x97a4>
   1ad48:	cmp	r4, #0
   1ad4c:	blt	1ade4 <__assert_fail@plt+0x992c>
   1ad50:	cmn	r7, #1
   1ad54:	beq	1acc8 <__assert_fail@plt+0x9810>
   1ad58:	str	r3, [sp, #4]
   1ad5c:	mov	r1, r7
   1ad60:	mov	r0, #-2147483648	; 0x80000000
   1ad64:	b	1aca8 <__assert_fail@plt+0x97f0>
   1ad68:	mov	r4, fp
   1ad6c:	b	1ac9c <__assert_fail@plt+0x97e4>
   1ad70:	mov	r4, fp
   1ad74:	b	1ad50 <__assert_fail@plt+0x9898>
   1ad78:	cmn	r4, #1
   1ad7c:	beq	1acc8 <__assert_fail@plt+0x9810>
   1ad80:	mov	r1, r4
   1ad84:	mov	r0, #-2147483648	; 0x80000000
   1ad88:	str	r3, [sp, #4]
   1ad8c:	bl	1c728 <__assert_fail@plt+0xb270>
   1ad90:	ldr	r3, [sp, #4]
   1ad94:	cmp	r7, r0
   1ad98:	movle	r0, #0
   1ad9c:	movgt	r0, #1
   1ada0:	b	1acbc <__assert_fail@plt+0x9804>
   1ada4:	mov	r1, r7
   1ada8:	mvn	r0, #-2147483648	; 0x80000000
   1adac:	bl	1c728 <__assert_fail@plt+0xb270>
   1adb0:	cmp	r6, r0
   1adb4:	movge	r0, #0
   1adb8:	movlt	r0, #1
   1adbc:	b	1ac5c <__assert_fail@plt+0x97a4>
   1adc0:	cmn	r6, #1
   1adc4:	beq	1ac64 <__assert_fail@plt+0x97ac>
   1adc8:	mov	r1, r6
   1adcc:	mov	r0, #-2147483648	; 0x80000000
   1add0:	bl	1c728 <__assert_fail@plt+0xb270>
   1add4:	cmp	r7, r0
   1add8:	movle	r0, #0
   1addc:	movgt	r0, #1
   1ade0:	b	1ac5c <__assert_fail@plt+0x97a4>
   1ade4:	mov	r1, r7
   1ade8:	mvn	r0, #-2147483648	; 0x80000000
   1adec:	str	r3, [sp, #4]
   1adf0:	bl	1c728 <__assert_fail@plt+0xb270>
   1adf4:	ldr	r3, [sp, #4]
   1adf8:	cmp	r0, r4
   1adfc:	movle	r0, #0
   1ae00:	movgt	r0, #1
   1ae04:	b	1acbc <__assert_fail@plt+0x9804>
   1ae08:	push	{r4, lr}
   1ae0c:	mov	r1, #1
   1ae10:	bl	1bfc4 <__assert_fail@plt+0xab0c>
   1ae14:	cmp	r0, #0
   1ae18:	popne	{r4, pc}
   1ae1c:	bl	1af3c <__assert_fail@plt+0x9a84>
   1ae20:	push	{r4, lr}
   1ae24:	mov	r1, #1
   1ae28:	bl	1bfc4 <__assert_fail@plt+0xab0c>
   1ae2c:	cmp	r0, #0
   1ae30:	popne	{r4, pc}
   1ae34:	bl	1af3c <__assert_fail@plt+0x9a84>
   1ae38:	push	{r4, lr}
   1ae3c:	bl	1bfc4 <__assert_fail@plt+0xab0c>
   1ae40:	cmp	r0, #0
   1ae44:	popne	{r4, pc}
   1ae48:	bl	1af3c <__assert_fail@plt+0x9a84>
   1ae4c:	push	{r4, lr}
   1ae50:	bl	1bfc4 <__assert_fail@plt+0xab0c>
   1ae54:	cmp	r0, #0
   1ae58:	popne	{r4, pc}
   1ae5c:	bl	1af3c <__assert_fail@plt+0x9a84>
   1ae60:	push	{r4, r5, r6, lr}
   1ae64:	mov	r6, r0
   1ae68:	mov	r0, r1
   1ae6c:	mov	r4, r1
   1ae70:	bl	1c00c <__assert_fail@plt+0xab54>
   1ae74:	subs	r5, r0, #0
   1ae78:	beq	1ae90 <__assert_fail@plt+0x99d8>
   1ae7c:	mov	r2, r4
   1ae80:	mov	r1, r6
   1ae84:	bl	11194 <memcpy@plt>
   1ae88:	mov	r0, r5
   1ae8c:	pop	{r4, r5, r6, pc}
   1ae90:	bl	1af3c <__assert_fail@plt+0x9a84>
   1ae94:	push	{r4, r5, r6, lr}
   1ae98:	mov	r6, r0
   1ae9c:	mov	r0, r1
   1aea0:	mov	r4, r1
   1aea4:	bl	1c00c <__assert_fail@plt+0xab54>
   1aea8:	subs	r5, r0, #0
   1aeac:	beq	1aec4 <__assert_fail@plt+0x9a0c>
   1aeb0:	mov	r2, r4
   1aeb4:	mov	r1, r6
   1aeb8:	bl	11194 <memcpy@plt>
   1aebc:	mov	r0, r5
   1aec0:	pop	{r4, r5, r6, pc}
   1aec4:	bl	1af3c <__assert_fail@plt+0x9a84>
   1aec8:	push	{r4, r5, r6, lr}
   1aecc:	mov	r6, r0
   1aed0:	add	r0, r1, #1
   1aed4:	mov	r4, r1
   1aed8:	bl	1c00c <__assert_fail@plt+0xab54>
   1aedc:	subs	r5, r0, #0
   1aee0:	beq	1af00 <__assert_fail@plt+0x9a48>
   1aee4:	mov	r3, #0
   1aee8:	mov	r1, r6
   1aeec:	strb	r3, [r5, r4]
   1aef0:	mov	r2, r4
   1aef4:	bl	11194 <memcpy@plt>
   1aef8:	mov	r0, r5
   1aefc:	pop	{r4, r5, r6, pc}
   1af00:	bl	1af3c <__assert_fail@plt+0x9a84>
   1af04:	push	{r4, r5, r6, lr}
   1af08:	mov	r6, r0
   1af0c:	bl	11314 <strlen@plt>
   1af10:	add	r4, r0, #1
   1af14:	mov	r0, r4
   1af18:	bl	1c00c <__assert_fail@plt+0xab54>
   1af1c:	subs	r5, r0, #0
   1af20:	beq	1af38 <__assert_fail@plt+0x9a80>
   1af24:	mov	r2, r4
   1af28:	mov	r1, r6
   1af2c:	bl	11194 <memcpy@plt>
   1af30:	mov	r0, r5
   1af34:	pop	{r4, r5, r6, pc}
   1af38:	bl	1af3c <__assert_fail@plt+0x9a84>
   1af3c:	ldr	r3, [pc, #44]	; 1af70 <__assert_fail@plt+0x9ab8>
   1af40:	push	{r4, lr}
   1af44:	mov	r2, #5
   1af48:	ldr	r1, [pc, #36]	; 1af74 <__assert_fail@plt+0x9abc>
   1af4c:	mov	r0, #0
   1af50:	ldr	r4, [r3]
   1af54:	bl	111e8 <dcgettext@plt>
   1af58:	ldr	r2, [pc, #24]	; 1af78 <__assert_fail@plt+0x9ac0>
   1af5c:	mov	r1, #0
   1af60:	mov	r3, r0
   1af64:	mov	r0, r4
   1af68:	bl	1129c <error@plt>
   1af6c:	bl	114a0 <abort@plt>
   1af70:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   1af74:			; <UNDEFINED> instruction: 0x0001e3bc
   1af78:	ldrdeq	sp, [r1], -ip
   1af7c:	push	{r4, r5, r6, r7, lr}
   1af80:	sub	sp, sp, #20
   1af84:	mov	r6, r2
   1af88:	ldr	ip, [sp, #48]	; 0x30
   1af8c:	mov	r2, r1
   1af90:	mov	r7, r3
   1af94:	str	ip, [sp]
   1af98:	add	r3, sp, #8
   1af9c:	mov	r1, #0
   1afa0:	mov	r5, r0
   1afa4:	ldr	r4, [sp, #56]	; 0x38
   1afa8:	bl	1b1f8 <__assert_fail@plt+0x9d40>
   1afac:	cmp	r0, #0
   1afb0:	bne	1b034 <__assert_fail@plt+0x9b7c>
   1afb4:	ldrd	r0, [sp, #8]
   1afb8:	cmp	r1, r7
   1afbc:	cmpeq	r0, r6
   1afc0:	ldrd	r6, [sp, #40]	; 0x28
   1afc4:	movcc	r3, #1
   1afc8:	movcs	r3, #0
   1afcc:	cmp	r1, r7
   1afd0:	cmpeq	r0, r6
   1afd4:	orrhi	r3, r3, #1
   1afd8:	cmp	r3, #0
   1afdc:	beq	1b02c <__assert_fail@plt+0x9b74>
   1afe0:	mov	r3, #0
   1afe4:	mvn	r2, #-1073741824	; 0xc0000000
   1afe8:	cmp	r1, r3
   1afec:	cmpeq	r0, r2
   1aff0:	bhi	1b060 <__assert_fail@plt+0x9ba8>
   1aff4:	bl	11338 <__errno_location@plt>
   1aff8:	mov	r3, #34	; 0x22
   1affc:	mov	r6, r3
   1b000:	str	r3, [r0]
   1b004:	cmp	r4, #0
   1b008:	moveq	r4, #1
   1b00c:	mov	r0, r5
   1b010:	bl	18e64 <__assert_fail@plt+0x79ac>
   1b014:	mov	r1, r6
   1b018:	ldr	r3, [sp, #52]	; 0x34
   1b01c:	ldr	r2, [pc, #144]	; 1b0b4 <__assert_fail@plt+0x9bfc>
   1b020:	str	r0, [sp]
   1b024:	mov	r0, r4
   1b028:	bl	1129c <error@plt>
   1b02c:	add	sp, sp, #20
   1b030:	pop	{r4, r5, r6, r7, pc}
   1b034:	cmp	r0, #1
   1b038:	beq	1b074 <__assert_fail@plt+0x9bbc>
   1b03c:	cmp	r0, #3
   1b040:	beq	1b0a4 <__assert_fail@plt+0x9bec>
   1b044:	cmp	r4, #0
   1b048:	beq	1b094 <__assert_fail@plt+0x9bdc>
   1b04c:	bl	11338 <__errno_location@plt>
   1b050:	ldr	r6, [r0]
   1b054:	cmp	r6, #22
   1b058:	moveq	r6, #0
   1b05c:	b	1b00c <__assert_fail@plt+0x9b54>
   1b060:	bl	11338 <__errno_location@plt>
   1b064:	mov	r3, #75	; 0x4b
   1b068:	mov	r6, r3
   1b06c:	str	r3, [r0]
   1b070:	b	1b004 <__assert_fail@plt+0x9b4c>
   1b074:	bl	11338 <__errno_location@plt>
   1b078:	mov	r3, #75	; 0x4b
   1b07c:	mov	r6, r3
   1b080:	str	r3, [r0]
   1b084:	cmp	r4, #0
   1b088:	moveq	r4, #1
   1b08c:	bne	1b054 <__assert_fail@plt+0x9b9c>
   1b090:	b	1b00c <__assert_fail@plt+0x9b54>
   1b094:	bl	11338 <__errno_location@plt>
   1b098:	mov	r4, #1
   1b09c:	ldr	r6, [r0]
   1b0a0:	b	1b054 <__assert_fail@plt+0x9b9c>
   1b0a4:	bl	11338 <__errno_location@plt>
   1b0a8:	mov	r6, #0
   1b0ac:	str	r6, [r0]
   1b0b0:	b	1b084 <__assert_fail@plt+0x9bcc>
   1b0b4:	ldrdeq	sp, [r1], -r8
   1b0b8:	push	{r4, r5, r6, r7, lr}
   1b0bc:	sub	sp, sp, #20
   1b0c0:	mov	r6, r2
   1b0c4:	ldr	r1, [sp, #48]	; 0x30
   1b0c8:	mov	r7, r3
   1b0cc:	str	r1, [sp]
   1b0d0:	add	r3, sp, #8
   1b0d4:	mov	r2, #10
   1b0d8:	mov	r1, #0
   1b0dc:	mov	r5, r0
   1b0e0:	ldr	r4, [sp, #56]	; 0x38
   1b0e4:	bl	1b1f8 <__assert_fail@plt+0x9d40>
   1b0e8:	cmp	r0, #0
   1b0ec:	bne	1b170 <__assert_fail@plt+0x9cb8>
   1b0f0:	ldrd	r0, [sp, #8]
   1b0f4:	cmp	r7, r1
   1b0f8:	cmpeq	r6, r0
   1b0fc:	ldrd	r6, [sp, #40]	; 0x28
   1b100:	movhi	r3, #1
   1b104:	movls	r3, #0
   1b108:	cmp	r7, r1
   1b10c:	cmpeq	r6, r0
   1b110:	orrcc	r3, r3, #1
   1b114:	cmp	r3, #0
   1b118:	beq	1b168 <__assert_fail@plt+0x9cb0>
   1b11c:	mov	r3, #0
   1b120:	mvn	r2, #-1073741824	; 0xc0000000
   1b124:	cmp	r1, r3
   1b128:	cmpeq	r0, r2
   1b12c:	bhi	1b19c <__assert_fail@plt+0x9ce4>
   1b130:	bl	11338 <__errno_location@plt>
   1b134:	mov	r3, #34	; 0x22
   1b138:	mov	r6, r3
   1b13c:	str	r3, [r0]
   1b140:	cmp	r4, #0
   1b144:	moveq	r4, #1
   1b148:	mov	r0, r5
   1b14c:	bl	18e64 <__assert_fail@plt+0x79ac>
   1b150:	mov	r1, r6
   1b154:	ldr	r3, [sp, #52]	; 0x34
   1b158:	ldr	r2, [pc, #144]	; 1b1f0 <__assert_fail@plt+0x9d38>
   1b15c:	str	r0, [sp]
   1b160:	mov	r0, r4
   1b164:	bl	1129c <error@plt>
   1b168:	add	sp, sp, #20
   1b16c:	pop	{r4, r5, r6, r7, pc}
   1b170:	cmp	r0, #1
   1b174:	beq	1b1b0 <__assert_fail@plt+0x9cf8>
   1b178:	cmp	r0, #3
   1b17c:	beq	1b1e0 <__assert_fail@plt+0x9d28>
   1b180:	cmp	r4, #0
   1b184:	beq	1b1d0 <__assert_fail@plt+0x9d18>
   1b188:	bl	11338 <__errno_location@plt>
   1b18c:	ldr	r6, [r0]
   1b190:	cmp	r6, #22
   1b194:	moveq	r6, #0
   1b198:	b	1b148 <__assert_fail@plt+0x9c90>
   1b19c:	bl	11338 <__errno_location@plt>
   1b1a0:	mov	r3, #75	; 0x4b
   1b1a4:	mov	r6, r3
   1b1a8:	str	r3, [r0]
   1b1ac:	b	1b140 <__assert_fail@plt+0x9c88>
   1b1b0:	bl	11338 <__errno_location@plt>
   1b1b4:	mov	r3, #75	; 0x4b
   1b1b8:	mov	r6, r3
   1b1bc:	str	r3, [r0]
   1b1c0:	cmp	r4, #0
   1b1c4:	moveq	r4, #1
   1b1c8:	bne	1b190 <__assert_fail@plt+0x9cd8>
   1b1cc:	b	1b148 <__assert_fail@plt+0x9c90>
   1b1d0:	bl	11338 <__errno_location@plt>
   1b1d4:	mov	r4, #1
   1b1d8:	ldr	r6, [r0]
   1b1dc:	b	1b190 <__assert_fail@plt+0x9cd8>
   1b1e0:	bl	11338 <__errno_location@plt>
   1b1e4:	mov	r6, #0
   1b1e8:	str	r6, [r0]
   1b1ec:	b	1b1c0 <__assert_fail@plt+0x9d08>
   1b1f0:	ldrdeq	sp, [r1], -r8
   1b1f4:	andeq	r0, r0, r0
   1b1f8:	cmp	r2, #36	; 0x24
   1b1fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b200:	sub	sp, sp, #52	; 0x34
   1b204:	bhi	1bf94 <__assert_fail@plt+0xaadc>
   1b208:	cmp	r1, #0
   1b20c:	mov	r6, r2
   1b210:	mov	sl, r0
   1b214:	mov	r5, r1
   1b218:	mov	r8, r3
   1b21c:	addeq	r5, sp, #44	; 0x2c
   1b220:	bl	11338 <__errno_location@plt>
   1b224:	mov	r3, #0
   1b228:	str	r3, [r0]
   1b22c:	mov	fp, r0
   1b230:	bl	112fc <__ctype_b_loc@plt>
   1b234:	ldrb	r3, [sl]
   1b238:	mov	r2, sl
   1b23c:	ldr	r0, [r0]
   1b240:	b	1b248 <__assert_fail@plt+0x9d90>
   1b244:	ldrb	r3, [r2, #1]!
   1b248:	lsl	r1, r3, #1
   1b24c:	ldrh	r4, [r0, r1]
   1b250:	ands	r4, r4, #8192	; 0x2000
   1b254:	bne	1b244 <__assert_fail@plt+0x9d8c>
   1b258:	cmp	r3, #45	; 0x2d
   1b25c:	bne	1b270 <__assert_fail@plt+0x9db8>
   1b260:	mov	r4, #4
   1b264:	mov	r0, r4
   1b268:	add	sp, sp, #52	; 0x34
   1b26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b270:	mov	r2, r6
   1b274:	mov	r3, r4
   1b278:	mov	r1, r5
   1b27c:	mov	r0, sl
   1b280:	bl	111a0 <__strtoull_internal@plt>
   1b284:	ldr	r9, [r5]
   1b288:	cmp	sl, r9
   1b28c:	mov	r6, r0
   1b290:	mov	r7, r1
   1b294:	beq	1b2dc <__assert_fail@plt+0x9e24>
   1b298:	ldr	r4, [fp]
   1b29c:	cmp	r4, #0
   1b2a0:	bne	1b2cc <__assert_fail@plt+0x9e14>
   1b2a4:	ldr	r3, [sp, #88]	; 0x58
   1b2a8:	cmp	r3, #0
   1b2ac:	beq	1b2bc <__assert_fail@plt+0x9e04>
   1b2b0:	ldrb	sl, [r9]
   1b2b4:	cmp	sl, #0
   1b2b8:	bne	1b310 <__assert_fail@plt+0x9e58>
   1b2bc:	mov	r0, r4
   1b2c0:	strd	r6, [r8]
   1b2c4:	add	sp, sp, #52	; 0x34
   1b2c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2cc:	cmp	r4, #34	; 0x22
   1b2d0:	bne	1b260 <__assert_fail@plt+0x9da8>
   1b2d4:	mov	r4, #1
   1b2d8:	b	1b2a4 <__assert_fail@plt+0x9dec>
   1b2dc:	ldr	r3, [sp, #88]	; 0x58
   1b2e0:	cmp	r3, #0
   1b2e4:	beq	1b260 <__assert_fail@plt+0x9da8>
   1b2e8:	ldrb	sl, [r9]
   1b2ec:	cmp	sl, #0
   1b2f0:	beq	1b260 <__assert_fail@plt+0x9da8>
   1b2f4:	mov	r1, sl
   1b2f8:	mov	r0, r3
   1b2fc:	bl	11320 <strchr@plt>
   1b300:	cmp	r0, #0
   1b304:	movne	r6, #1
   1b308:	movne	r7, #0
   1b30c:	beq	1b260 <__assert_fail@plt+0x9da8>
   1b310:	mov	r1, sl
   1b314:	ldr	r0, [sp, #88]	; 0x58
   1b318:	bl	11320 <strchr@plt>
   1b31c:	cmp	r0, #0
   1b320:	beq	1be80 <__assert_fail@plt+0xa9c8>
   1b324:	sub	r3, sl, #69	; 0x45
   1b328:	cmp	r3, #47	; 0x2f
   1b32c:	ldrls	pc, [pc, r3, lsl #2]
   1b330:	b	1b424 <__assert_fail@plt+0x9f6c>
   1b334:	strdeq	fp, [r1], -r4
   1b338:	andeq	fp, r1, r4, lsr #8
   1b33c:	strdeq	fp, [r1], -r4
   1b340:	andeq	fp, r1, r4, lsr #8
   1b344:	andeq	fp, r1, r4, lsr #8
   1b348:	andeq	fp, r1, r4, lsr #8
   1b34c:	strdeq	fp, [r1], -r4
   1b350:	andeq	fp, r1, r4, lsr #8
   1b354:	strdeq	fp, [r1], -r4
   1b358:	andeq	fp, r1, r4, lsr #8
   1b35c:	andeq	fp, r1, r4, lsr #8
   1b360:	strdeq	fp, [r1], -r4
   1b364:	andeq	fp, r1, r4, lsr #8
   1b368:	andeq	fp, r1, r4, lsr #8
   1b36c:	andeq	fp, r1, r4, lsr #8
   1b370:	strdeq	fp, [r1], -r4
   1b374:	andeq	fp, r1, r4, lsr #8
   1b378:	andeq	fp, r1, r4, lsr #8
   1b37c:	andeq	fp, r1, r4, lsr #8
   1b380:	andeq	fp, r1, r4, lsr #8
   1b384:	strdeq	fp, [r1], -r4
   1b388:	strdeq	fp, [r1], -r4
   1b38c:	andeq	fp, r1, r4, lsr #8
   1b390:	andeq	fp, r1, r4, lsr #8
   1b394:	andeq	fp, r1, r4, lsr #8
   1b398:	andeq	fp, r1, r4, lsr #8
   1b39c:	andeq	fp, r1, r4, lsr #8
   1b3a0:	andeq	fp, r1, r4, lsr #8
   1b3a4:	andeq	fp, r1, r4, lsr #8
   1b3a8:	andeq	fp, r1, r4, lsr #8
   1b3ac:	andeq	fp, r1, r4, lsr #8
   1b3b0:	andeq	fp, r1, r4, lsr #8
   1b3b4:	andeq	fp, r1, r4, lsr #8
   1b3b8:	andeq	fp, r1, r4, lsr #8
   1b3bc:	strdeq	fp, [r1], -r4
   1b3c0:	andeq	fp, r1, r4, lsr #8
   1b3c4:	andeq	fp, r1, r4, lsr #8
   1b3c8:	andeq	fp, r1, r4, lsr #8
   1b3cc:	strdeq	fp, [r1], -r4
   1b3d0:	andeq	fp, r1, r4, lsr #8
   1b3d4:	strdeq	fp, [r1], -r4
   1b3d8:	andeq	fp, r1, r4, lsr #8
   1b3dc:	andeq	fp, r1, r4, lsr #8
   1b3e0:	andeq	fp, r1, r4, lsr #8
   1b3e4:	andeq	fp, r1, r4, lsr #8
   1b3e8:	andeq	fp, r1, r4, lsr #8
   1b3ec:	andeq	fp, r1, r4, lsr #8
   1b3f0:	strdeq	fp, [r1], -r4
   1b3f4:	mov	r1, #48	; 0x30
   1b3f8:	ldr	r0, [sp, #88]	; 0x58
   1b3fc:	bl	11320 <strchr@plt>
   1b400:	cmp	r0, #0
   1b404:	beq	1bf14 <__assert_fail@plt+0xaa5c>
   1b408:	ldrb	r3, [r9, #1]
   1b40c:	cmp	r3, #68	; 0x44
   1b410:	beq	1bef4 <__assert_fail@plt+0xaa3c>
   1b414:	cmp	r3, #105	; 0x69
   1b418:	beq	1bec4 <__assert_fail@plt+0xaa0c>
   1b41c:	cmp	r3, #66	; 0x42
   1b420:	beq	1bef4 <__assert_fail@plt+0xaa3c>
   1b424:	ldr	r3, [pc, #2948]	; 1bfb0 <__assert_fail@plt+0xaaf8>
   1b428:	mvn	r2, #0
   1b42c:	mov	r1, #1024	; 0x400
   1b430:	mov	lr, #0
   1b434:	strd	r2, [sp]
   1b438:	mov	r3, #1
   1b43c:	str	r3, [sp, #12]
   1b440:	sub	sl, sl, #66	; 0x42
   1b444:	cmp	sl, #53	; 0x35
   1b448:	ldrls	pc, [pc, sl, lsl #2]
   1b44c:	b	1be80 <__assert_fail@plt+0xa9c8>
   1b450:	andeq	fp, r1, r0, asr lr
   1b454:	andeq	fp, r1, r0, lsl #29
   1b458:	andeq	fp, r1, r0, lsl #29
   1b45c:	andeq	fp, r1, ip, asr #25
   1b460:	andeq	fp, r1, r0, lsl #29
   1b464:	andeq	fp, r1, r8, lsl #24
   1b468:	andeq	fp, r1, r0, lsl #29
   1b46c:	andeq	fp, r1, r0, lsl #29
   1b470:	andeq	fp, r1, r0, lsl #29
   1b474:	andeq	fp, r1, ip, lsl #29
   1b478:	andeq	fp, r1, r0, lsl #29
   1b47c:	andeq	fp, r1, r8, lsr #10
   1b480:	andeq	fp, r1, r0, lsl #29
   1b484:	andeq	fp, r1, r0, lsl #29
   1b488:			; <UNDEFINED> instruction: 0x0001b5b4
   1b48c:	andeq	fp, r1, r0, lsl #29
   1b490:	andeq	fp, r1, r0, lsl #29
   1b494:	andeq	fp, r1, r0, lsl #29
   1b498:	andeq	fp, r1, r4, lsr r9
   1b49c:	andeq	fp, r1, r0, lsl #29
   1b4a0:	andeq	fp, r1, r0, lsl #29
   1b4a4:	andeq	fp, r1, r0, lsl #29
   1b4a8:	andeq	fp, r1, r0, lsl #29
   1b4ac:	andeq	fp, r1, ip, lsl #14
   1b4b0:	andeq	fp, r1, r8, ror #20
   1b4b4:	andeq	fp, r1, r0, lsl #29
   1b4b8:	andeq	fp, r1, r0, lsl #29
   1b4bc:	andeq	fp, r1, r0, lsl #29
   1b4c0:	andeq	fp, r1, r0, lsl #29
   1b4c4:	andeq	fp, r1, r0, lsl #29
   1b4c8:	andeq	fp, r1, r0, lsl #29
   1b4cc:	andeq	fp, r1, r0, lsl #29
   1b4d0:	andeq	fp, r1, r8, lsr sl
   1b4d4:	andeq	fp, r1, r0, lsr sl
   1b4d8:	andeq	fp, r1, r0, lsl #29
   1b4dc:	andeq	fp, r1, r0, lsl #29
   1b4e0:	andeq	fp, r1, r0, lsl #29
   1b4e4:	andeq	fp, r1, r8, lsl #24
   1b4e8:	andeq	fp, r1, r0, lsl #29
   1b4ec:	andeq	fp, r1, r0, lsl #29
   1b4f0:	andeq	fp, r1, r0, lsl #29
   1b4f4:	andeq	fp, r1, ip, lsl #29
   1b4f8:	andeq	fp, r1, r0, lsl #29
   1b4fc:	andeq	fp, r1, r8, lsr #10
   1b500:	andeq	fp, r1, r0, lsl #29
   1b504:	andeq	fp, r1, r0, lsl #29
   1b508:	andeq	fp, r1, r0, lsl #29
   1b50c:	andeq	fp, r1, r0, lsl #29
   1b510:	andeq	fp, r1, r0, lsl #29
   1b514:	andeq	fp, r1, r0, lsl #29
   1b518:	andeq	fp, r1, r4, lsr r9
   1b51c:	andeq	fp, r1, r0, lsl #29
   1b520:	andeq	fp, r1, r0, lsl #29
   1b524:	andeq	fp, r1, r4, lsl sl
   1b528:	mul	r0, r6, lr
   1b52c:	ldrd	sl, [sp]
   1b530:	umull	r2, r3, r6, r1
   1b534:	mla	r0, r1, r7, r0
   1b538:	cmp	r7, fp
   1b53c:	cmpeq	r6, sl
   1b540:	add	r3, r0, r3
   1b544:	mvnhi	r3, #0
   1b548:	mvnhi	r2, #0
   1b54c:	mul	r6, r1, r3
   1b550:	umull	r0, r1, r1, r2
   1b554:	mla	lr, lr, r2, r6
   1b558:	ldrd	r6, [sp]
   1b55c:	movhi	ip, #1
   1b560:	movls	ip, #0
   1b564:	cmp	r7, r3
   1b568:	cmpeq	r6, r2
   1b56c:	mvncc	r0, #0
   1b570:	add	r1, lr, r1
   1b574:	mov	sl, r6
   1b578:	movcc	r1, r0
   1b57c:	mov	fp, r7
   1b580:	cmp	fp, r3
   1b584:	cmpeq	sl, r2
   1b588:	mov	r6, r0
   1b58c:	mov	r7, r1
   1b590:	orrcc	ip, ip, #1
   1b594:	ldr	r2, [sp, #12]
   1b598:	orr	r4, r4, ip
   1b59c:	add	r3, r9, r2
   1b5a0:	str	r3, [r5]
   1b5a4:	ldrb	r3, [r9, r2]
   1b5a8:	cmp	r3, #0
   1b5ac:	orrne	r4, r4, #2
   1b5b0:	b	1b2bc <__assert_fail@plt+0x9e04>
   1b5b4:	ldrd	sl, [sp]
   1b5b8:	umull	r2, r3, r6, r1
   1b5bc:	mul	r0, r6, lr
   1b5c0:	cmp	r7, fp
   1b5c4:	cmpeq	r6, sl
   1b5c8:	mvnhi	r2, #0
   1b5cc:	mla	r0, r1, r7, r0
   1b5d0:	umull	sl, fp, r2, r1
   1b5d4:	add	r3, r0, r3
   1b5d8:	mul	r0, lr, r2
   1b5dc:	mvnhi	r3, #0
   1b5e0:	strd	sl, [sp, #16]
   1b5e4:	ldrd	sl, [sp]
   1b5e8:	mla	r0, r1, r3, r0
   1b5ec:	ldr	ip, [sp, #20]
   1b5f0:	cmp	r3, fp
   1b5f4:	add	r0, r0, ip
   1b5f8:	cmpeq	r2, sl
   1b5fc:	str	r0, [sp, #20]
   1b600:	bls	1b618 <__assert_fail@plt+0xa160>
   1b604:	mvn	sl, #0
   1b608:	mvn	fp, #0
   1b60c:	strd	sl, [sp, #16]
   1b610:	ldr	r0, [sp, #20]
   1b614:	ldrd	sl, [sp]
   1b618:	cmp	r7, fp
   1b61c:	cmpeq	r6, sl
   1b620:	mul	r0, r1, r0
   1b624:	ldrd	r6, [sp, #16]
   1b628:	mla	ip, lr, r6, r0
   1b62c:	mov	r0, r6
   1b630:	movhi	r0, #1
   1b634:	movls	r0, #0
   1b638:	cmp	r3, fp
   1b63c:	cmpeq	r2, sl
   1b640:	ldrd	r2, [sp, #16]
   1b644:	umull	r6, r7, r1, r6
   1b648:	orrhi	r0, r0, #1
   1b64c:	cmp	fp, r3
   1b650:	cmpeq	sl, r2
   1b654:	add	r7, ip, r7
   1b658:	bcc	1bf64 <__assert_fail@plt+0xaaac>
   1b65c:	mov	sl, r6
   1b660:	mov	fp, r7
   1b664:	strd	r6, [sp, #24]
   1b668:	mul	r3, r1, fp
   1b66c:	umull	r6, r7, r1, sl
   1b670:	mla	ip, lr, sl, r3
   1b674:	ldrd	sl, [sp]
   1b678:	ldrd	r2, [sp, #16]
   1b67c:	add	r7, ip, r7
   1b680:	cmp	fp, r3
   1b684:	cmpeq	sl, r2
   1b688:	mov	r3, fp
   1b68c:	mov	r2, sl
   1b690:	ldrd	sl, [sp, #24]
   1b694:	orrcc	r0, r0, #1
   1b698:	str	r0, [sp, #16]
   1b69c:	cmp	r3, fp
   1b6a0:	cmpeq	r2, sl
   1b6a4:	bcs	1bbfc <__assert_fail@plt+0xa744>
   1b6a8:	mvn	r2, #0
   1b6ac:	mvn	r3, #0
   1b6b0:	mul	ip, lr, r2
   1b6b4:	ldrd	sl, [sp]
   1b6b8:	mla	ip, r1, r3, ip
   1b6bc:	umull	r6, r7, r2, r1
   1b6c0:	ldrd	r0, [sp, #24]
   1b6c4:	add	r7, ip, r7
   1b6c8:	cmp	fp, r1
   1b6cc:	ldr	r1, [sp, #16]
   1b6d0:	cmpeq	sl, r0
   1b6d4:	orrcc	r1, r1, #1
   1b6d8:	cmp	r3, fp
   1b6dc:	cmpeq	r2, sl
   1b6e0:	mvnhi	r0, #0
   1b6e4:	movls	ip, r7
   1b6e8:	movhi	ip, r0
   1b6ec:	movls	r0, r6
   1b6f0:	cmp	r3, fp
   1b6f4:	cmpeq	r2, sl
   1b6f8:	mov	r7, ip
   1b6fc:	mov	r6, r0
   1b700:	movls	ip, r1
   1b704:	orrhi	ip, r1, #1
   1b708:	b	1b594 <__assert_fail@plt+0xa0dc>
   1b70c:	ldrd	sl, [sp]
   1b710:	umull	r2, r3, r6, r1
   1b714:	mul	r0, r6, lr
   1b718:	cmp	r7, fp
   1b71c:	cmpeq	r6, sl
   1b720:	mvnhi	r2, #0
   1b724:	mla	r0, r1, r7, r0
   1b728:	umull	sl, fp, r2, r1
   1b72c:	add	r3, r0, r3
   1b730:	mul	r0, lr, r2
   1b734:	mvnhi	r3, #0
   1b738:	strd	sl, [sp, #16]
   1b73c:	ldrd	sl, [sp]
   1b740:	mla	r0, r1, r3, r0
   1b744:	ldr	ip, [sp, #20]
   1b748:	cmp	r3, fp
   1b74c:	add	r0, r0, ip
   1b750:	cmpeq	r2, sl
   1b754:	str	r0, [sp, #20]
   1b758:	mvnhi	sl, #0
   1b75c:	mvnhi	fp, #0
   1b760:	strdhi	sl, [sp, #16]
   1b764:	ldrdhi	sl, [sp]
   1b768:	ldr	r0, [sp, #16]
   1b76c:	cmp	r3, fp
   1b770:	ldr	r3, [sp, #20]
   1b774:	mul	r0, lr, r0
   1b778:	cmpeq	r2, sl
   1b77c:	mla	r0, r1, r3, r0
   1b780:	ldr	r3, [sp, #16]
   1b784:	umull	r2, r3, r3, r1
   1b788:	strd	r2, [sp, #24]
   1b78c:	movhi	r3, #1
   1b790:	movls	r3, #0
   1b794:	cmp	r7, fp
   1b798:	cmpeq	r6, sl
   1b79c:	ldrd	r6, [sp, #16]
   1b7a0:	ldr	r2, [sp, #28]
   1b7a4:	movls	ip, r3
   1b7a8:	orrhi	ip, r3, #1
   1b7ac:	cmp	r7, fp
   1b7b0:	add	r2, r0, r2
   1b7b4:	cmpeq	r6, sl
   1b7b8:	str	r2, [sp, #28]
   1b7bc:	mvnhi	r2, #0
   1b7c0:	mvnhi	r3, #0
   1b7c4:	strdhi	r2, [sp, #24]
   1b7c8:	ldrd	r6, [sp, #24]
   1b7cc:	mul	r2, r1, r7
   1b7d0:	umull	sl, fp, r1, r6
   1b7d4:	mla	r3, lr, r6, r2
   1b7d8:	ldrd	r6, [sp]
   1b7dc:	str	r3, [sp, #32]
   1b7e0:	ldrd	r2, [sp, #16]
   1b7e4:	cmp	r3, r7
   1b7e8:	cmpeq	r2, r6
   1b7ec:	ldrd	r2, [sp, #24]
   1b7f0:	orrhi	ip, ip, #1
   1b7f4:	cmp	r3, r7
   1b7f8:	ldr	r3, [sp, #32]
   1b7fc:	cmpeq	r2, r6
   1b800:	add	r2, r3, fp
   1b804:	mov	fp, r2
   1b808:	bhi	1bf4c <__assert_fail@plt+0xaa94>
   1b80c:	strd	sl, [sp, #16]
   1b810:	mul	r2, r1, fp
   1b814:	umull	r6, r7, r1, sl
   1b818:	mla	r3, lr, sl, r2
   1b81c:	ldrd	sl, [sp]
   1b820:	str	r3, [sp, #32]
   1b824:	ldrd	r2, [sp, #24]
   1b828:	cmp	r3, fp
   1b82c:	cmpeq	r2, sl
   1b830:	ldrd	r2, [sp, #16]
   1b834:	orrhi	ip, ip, #1
   1b838:	cmp	fp, r3
   1b83c:	ldr	r3, [sp, #32]
   1b840:	cmpeq	sl, r2
   1b844:	add	r2, r3, r7
   1b848:	mov	r7, r2
   1b84c:	mvncc	r7, #0
   1b850:	mvncc	r6, #0
   1b854:	mul	r2, r1, r7
   1b858:	mov	sl, r6
   1b85c:	strd	r6, [sp, #24]
   1b860:	mla	r0, lr, sl, r2
   1b864:	ldrd	r2, [sp, #16]
   1b868:	ldrd	sl, [sp]
   1b86c:	umull	r6, r7, r1, r6
   1b870:	cmp	fp, r3
   1b874:	cmpeq	sl, r2
   1b878:	mov	r3, fp
   1b87c:	mov	r2, sl
   1b880:	ldrd	sl, [sp, #24]
   1b884:	orrcc	ip, ip, #1
   1b888:	add	r7, r0, r7
   1b88c:	cmp	r3, fp
   1b890:	cmpeq	r2, sl
   1b894:	mvncc	r6, #0
   1b898:	mvncc	r7, #0
   1b89c:	umull	sl, fp, r1, r6
   1b8a0:	mul	r3, r1, r7
   1b8a4:	strd	sl, [sp, #16]
   1b8a8:	mla	r0, lr, r6, r3
   1b8ac:	ldrd	sl, [sp, #24]
   1b8b0:	ldrd	r2, [sp]
   1b8b4:	cmp	r3, fp
   1b8b8:	cmpeq	r2, sl
   1b8bc:	orrcc	ip, ip, #1
   1b8c0:	cmp	r3, r7
   1b8c4:	ldr	r3, [sp, #20]
   1b8c8:	cmpeq	r2, r6
   1b8cc:	add	r3, r0, r3
   1b8d0:	str	r3, [sp, #20]
   1b8d4:	mvncc	r2, #0
   1b8d8:	mvncc	r3, #0
   1b8dc:	ldrdcs	r2, [sp, #16]
   1b8e0:	ldrd	sl, [sp]
   1b8e4:	mul	r0, r1, r3
   1b8e8:	cmp	fp, r7
   1b8ec:	str	r0, [sp, #16]
   1b8f0:	cmpeq	sl, r6
   1b8f4:	ldr	r6, [sp, #16]
   1b8f8:	umull	r0, r1, r1, r2
   1b8fc:	mla	lr, lr, r2, r6
   1b900:	orrcc	ip, ip, #1
   1b904:	cmp	r3, fp
   1b908:	cmpeq	r2, sl
   1b90c:	add	r1, lr, r1
   1b910:	bls	1b91c <__assert_fail@plt+0xa464>
   1b914:	mvn	r0, #0
   1b918:	mov	r1, r0
   1b91c:	cmp	r3, fp
   1b920:	cmpeq	r2, sl
   1b924:	mov	r6, r0
   1b928:	mov	r7, r1
   1b92c:	orrhi	ip, ip, #1
   1b930:	b	1b594 <__assert_fail@plt+0xa0dc>
   1b934:	ldrd	sl, [sp]
   1b938:	umull	r2, r3, r6, r1
   1b93c:	mul	r0, r6, lr
   1b940:	cmp	r7, fp
   1b944:	cmpeq	r6, sl
   1b948:	mvnhi	r2, #0
   1b94c:	mla	r0, r1, r7, r0
   1b950:	umull	sl, fp, r1, r2
   1b954:	add	r3, r0, r3
   1b958:	mvnhi	r3, #0
   1b95c:	strd	sl, [sp, #16]
   1b960:	mul	r0, r1, r3
   1b964:	ldrd	sl, [sp]
   1b968:	mla	r0, lr, r2, r0
   1b96c:	ldr	ip, [sp, #20]
   1b970:	cmp	fp, r3
   1b974:	add	r0, r0, ip
   1b978:	cmpeq	sl, r2
   1b97c:	str	r0, [sp, #20]
   1b980:	mvncc	sl, #0
   1b984:	mvncc	fp, #0
   1b988:	strdcc	sl, [sp, #16]
   1b98c:	ldrdcc	sl, [sp]
   1b990:	ldr	r0, [sp, #16]
   1b994:	cmp	fp, r3
   1b998:	cmpeq	sl, r2
   1b99c:	mul	r0, lr, r0
   1b9a0:	ldr	r2, [sp, #20]
   1b9a4:	ldr	r3, [sp, #16]
   1b9a8:	movcc	ip, #1
   1b9ac:	movcs	ip, #0
   1b9b0:	cmp	r7, fp
   1b9b4:	cmpeq	r6, sl
   1b9b8:	ldrd	r6, [sp, #16]
   1b9bc:	mla	r0, r1, r2, r0
   1b9c0:	umull	r2, r3, r3, r1
   1b9c4:	orrhi	ip, ip, #1
   1b9c8:	cmp	r7, fp
   1b9cc:	cmpeq	r6, sl
   1b9d0:	add	r3, r0, r3
   1b9d4:	mvnhi	r3, #0
   1b9d8:	mvnhi	r2, #0
   1b9dc:	mul	r0, r1, r3
   1b9e0:	cmp	r7, fp
   1b9e4:	str	r0, [sp, #24]
   1b9e8:	cmpeq	r6, sl
   1b9ec:	ldr	r6, [sp, #24]
   1b9f0:	umull	r0, r1, r1, r2
   1b9f4:	mla	lr, lr, r2, r6
   1b9f8:	orrhi	ip, ip, #1
   1b9fc:	cmp	fp, r3
   1ba00:	cmpeq	sl, r2
   1ba04:	mvncc	r0, #0
   1ba08:	add	r1, lr, r1
   1ba0c:	movcc	r1, r0
   1ba10:	b	1b580 <__assert_fail@plt+0xa0c8>
   1ba14:	cmp	r6, #0
   1ba18:	sbcs	r3, r7, #0
   1ba1c:	blt	1beb4 <__assert_fail@plt+0xa9fc>
   1ba20:	adds	r6, r6, r6
   1ba24:	adc	r7, r7, r7
   1ba28:	mov	ip, #0
   1ba2c:	b	1b594 <__assert_fail@plt+0xa0dc>
   1ba30:	mov	ip, #0
   1ba34:	b	1b594 <__assert_fail@plt+0xa0dc>
   1ba38:	ldr	r3, [pc, #1396]	; 1bfb4 <__assert_fail@plt+0xaafc>
   1ba3c:	mvn	r2, #0
   1ba40:	cmp	r7, r3
   1ba44:	cmpeq	r6, r2
   1ba48:	bhi	1beb4 <__assert_fail@plt+0xa9fc>
   1ba4c:	lsl	r3, r7, #9
   1ba50:	orr	r3, r3, r6, lsr #23
   1ba54:	lsl	r2, r6, #9
   1ba58:	mov	r6, r2
   1ba5c:	mov	r7, r3
   1ba60:	mov	ip, #0
   1ba64:	b	1b594 <__assert_fail@plt+0xa0dc>
   1ba68:	ldrd	sl, [sp]
   1ba6c:	umull	r2, r3, r6, r1
   1ba70:	mul	r0, r6, lr
   1ba74:	cmp	r7, fp
   1ba78:	cmpeq	r6, sl
   1ba7c:	mvnhi	r2, #0
   1ba80:	mla	r0, r1, r7, r0
   1ba84:	umull	sl, fp, r2, r1
   1ba88:	add	r3, r0, r3
   1ba8c:	mul	r0, lr, r2
   1ba90:	mvnhi	r3, #0
   1ba94:	strd	sl, [sp, #16]
   1ba98:	ldrd	sl, [sp]
   1ba9c:	mla	r0, r1, r3, r0
   1baa0:	ldr	ip, [sp, #20]
   1baa4:	cmp	r3, fp
   1baa8:	add	r0, r0, ip
   1baac:	cmpeq	r2, sl
   1bab0:	str	r0, [sp, #20]
   1bab4:	mvnhi	sl, #0
   1bab8:	mvnhi	fp, #0
   1babc:	strdhi	sl, [sp, #16]
   1bac0:	ldrdhi	sl, [sp]
   1bac4:	ldr	r0, [sp, #16]
   1bac8:	cmp	r3, fp
   1bacc:	ldr	r3, [sp, #20]
   1bad0:	mul	r0, lr, r0
   1bad4:	cmpeq	r2, sl
   1bad8:	mla	r0, r1, r3, r0
   1badc:	ldr	r3, [sp, #16]
   1bae0:	umull	r2, r3, r3, r1
   1bae4:	strd	r2, [sp, #24]
   1bae8:	movhi	r3, #1
   1baec:	movls	r3, #0
   1baf0:	cmp	r7, fp
   1baf4:	cmpeq	r6, sl
   1baf8:	ldrd	r6, [sp, #16]
   1bafc:	ldr	r2, [sp, #28]
   1bb00:	movls	ip, r3
   1bb04:	orrhi	ip, r3, #1
   1bb08:	cmp	r7, fp
   1bb0c:	add	r2, r0, r2
   1bb10:	cmpeq	r6, sl
   1bb14:	str	r2, [sp, #28]
   1bb18:	mvnhi	r2, #0
   1bb1c:	mvnhi	r3, #0
   1bb20:	strdhi	r2, [sp, #24]
   1bb24:	ldrd	r6, [sp, #24]
   1bb28:	mul	r2, lr, r6
   1bb2c:	umull	sl, fp, r6, r1
   1bb30:	mla	r3, r1, r7, r2
   1bb34:	ldrd	r6, [sp]
   1bb38:	str	r3, [sp, #32]
   1bb3c:	ldrd	r2, [sp, #16]
   1bb40:	cmp	r3, r7
   1bb44:	cmpeq	r2, r6
   1bb48:	ldrd	r2, [sp, #24]
   1bb4c:	orrhi	ip, ip, #1
   1bb50:	cmp	r3, r7
   1bb54:	ldr	r3, [sp, #32]
   1bb58:	cmpeq	r2, r6
   1bb5c:	add	r2, r3, fp
   1bb60:	mov	fp, r2
   1bb64:	bhi	1bf7c <__assert_fail@plt+0xaac4>
   1bb68:	strd	sl, [sp, #16]
   1bb6c:	mul	r2, lr, sl
   1bb70:	umull	r6, r7, sl, r1
   1bb74:	mla	r3, r1, fp, r2
   1bb78:	ldrd	sl, [sp]
   1bb7c:	str	r3, [sp, #32]
   1bb80:	ldrd	r2, [sp, #24]
   1bb84:	cmp	r3, fp
   1bb88:	cmpeq	r2, sl
   1bb8c:	ldrd	r2, [sp, #16]
   1bb90:	orrhi	ip, ip, #1
   1bb94:	cmp	r3, fp
   1bb98:	ldr	r3, [sp, #32]
   1bb9c:	cmpeq	r2, sl
   1bba0:	add	r2, r3, r7
   1bba4:	mov	r7, r2
   1bba8:	mvnhi	r7, #0
   1bbac:	mvnhi	r6, #0
   1bbb0:	mul	r2, r1, r7
   1bbb4:	mov	sl, r6
   1bbb8:	strd	r6, [sp, #24]
   1bbbc:	mla	r0, lr, sl, r2
   1bbc0:	ldrd	sl, [sp]
   1bbc4:	ldrd	r2, [sp, #16]
   1bbc8:	umull	r6, r7, r1, r6
   1bbcc:	cmp	r3, fp
   1bbd0:	cmpeq	r2, sl
   1bbd4:	mov	r3, ip
   1bbd8:	orrhi	r3, r3, #1
   1bbdc:	mov	r2, sl
   1bbe0:	str	r3, [sp, #16]
   1bbe4:	mov	r3, fp
   1bbe8:	ldrd	sl, [sp, #24]
   1bbec:	add	r7, r0, r7
   1bbf0:	cmp	r3, fp
   1bbf4:	cmpeq	r2, sl
   1bbf8:	bcc	1b6a8 <__assert_fail@plt+0xa1f0>
   1bbfc:	mov	r2, r6
   1bc00:	mov	r3, r7
   1bc04:	b	1b6b0 <__assert_fail@plt+0xa1f8>
   1bc08:	ldrd	sl, [sp]
   1bc0c:	umull	r2, r3, r6, r1
   1bc10:	mul	r0, r6, lr
   1bc14:	cmp	r7, fp
   1bc18:	cmpeq	r6, sl
   1bc1c:	mvnhi	r2, #0
   1bc20:	mla	r0, r1, r7, r0
   1bc24:	umull	sl, fp, r2, r1
   1bc28:	add	r3, r0, r3
   1bc2c:	mul	r0, lr, r2
   1bc30:	mvnhi	r3, #0
   1bc34:	strd	sl, [sp, #16]
   1bc38:	ldrd	sl, [sp]
   1bc3c:	mla	r0, r1, r3, r0
   1bc40:	ldr	ip, [sp, #20]
   1bc44:	cmp	r3, fp
   1bc48:	add	r0, r0, ip
   1bc4c:	cmpeq	r2, sl
   1bc50:	str	r0, [sp, #20]
   1bc54:	mvnhi	sl, #0
   1bc58:	mvnhi	fp, #0
   1bc5c:	strdhi	sl, [sp, #16]
   1bc60:	ldrdhi	sl, [sp]
   1bc64:	ldr	r0, [sp, #16]
   1bc68:	cmp	r3, fp
   1bc6c:	ldr	ip, [sp, #20]
   1bc70:	mul	r0, lr, r0
   1bc74:	ldr	r3, [sp, #16]
   1bc78:	cmpeq	r2, sl
   1bc7c:	mla	r0, r1, ip, r0
   1bc80:	umull	r2, r3, r3, r1
   1bc84:	movhi	r1, #1
   1bc88:	movls	r1, #0
   1bc8c:	cmp	r7, fp
   1bc90:	cmpeq	r6, sl
   1bc94:	ldrd	r6, [sp, #16]
   1bc98:	movls	ip, r1
   1bc9c:	orrhi	ip, r1, #1
   1bca0:	cmp	r7, fp
   1bca4:	cmpeq	r6, sl
   1bca8:	mvnhi	r2, #0
   1bcac:	add	r3, r0, r3
   1bcb0:	movhi	r3, r2
   1bcb4:	cmp	r7, fp
   1bcb8:	cmpeq	r6, sl
   1bcbc:	mov	r7, r3
   1bcc0:	mov	r6, r2
   1bcc4:	orrhi	ip, ip, #1
   1bcc8:	b	1b594 <__assert_fail@plt+0xa0dc>
   1bccc:	ldrd	sl, [sp]
   1bcd0:	umull	r2, r3, r6, r1
   1bcd4:	mul	r0, r6, lr
   1bcd8:	cmp	r7, fp
   1bcdc:	cmpeq	r6, sl
   1bce0:	mvnhi	r2, #0
   1bce4:	mla	r0, r1, r7, r0
   1bce8:	umull	sl, fp, r1, r2
   1bcec:	add	r3, r0, r3
   1bcf0:	mvnhi	r3, #0
   1bcf4:	strd	sl, [sp, #16]
   1bcf8:	mul	r0, r1, r3
   1bcfc:	ldrd	sl, [sp]
   1bd00:	mla	r0, lr, r2, r0
   1bd04:	ldr	ip, [sp, #20]
   1bd08:	cmp	fp, r3
   1bd0c:	add	r0, r0, ip
   1bd10:	cmpeq	sl, r2
   1bd14:	str	r0, [sp, #20]
   1bd18:	mvncc	sl, #0
   1bd1c:	mvncc	fp, #0
   1bd20:	strdcc	sl, [sp, #16]
   1bd24:	ldrdcc	sl, [sp]
   1bd28:	ldr	r0, [sp, #16]
   1bd2c:	cmp	fp, r3
   1bd30:	ldr	r3, [sp, #20]
   1bd34:	mul	r0, lr, r0
   1bd38:	cmpeq	sl, r2
   1bd3c:	mla	r0, r1, r3, r0
   1bd40:	ldr	r3, [sp, #16]
   1bd44:	umull	r2, r3, r3, r1
   1bd48:	strd	r2, [sp, #24]
   1bd4c:	movcc	r3, #1
   1bd50:	movcs	r3, #0
   1bd54:	cmp	r7, fp
   1bd58:	cmpeq	r6, sl
   1bd5c:	movls	ip, r3
   1bd60:	orrhi	ip, r3, #1
   1bd64:	ldrd	r2, [sp, #16]
   1bd68:	cmp	r3, fp
   1bd6c:	ldr	r3, [sp, #28]
   1bd70:	cmpeq	r2, sl
   1bd74:	add	r3, r0, r3
   1bd78:	str	r3, [sp, #28]
   1bd7c:	bhi	1bf34 <__assert_fail@plt+0xaa7c>
   1bd80:	ldrd	r2, [sp, #24]
   1bd84:	mov	sl, r2
   1bd88:	mov	fp, r3
   1bd8c:	mul	r2, lr, sl
   1bd90:	umull	r6, r7, sl, r1
   1bd94:	mla	r0, r1, fp, r2
   1bd98:	ldrd	r2, [sp]
   1bd9c:	add	r7, r0, r7
   1bda0:	mov	sl, r2
   1bda4:	mov	fp, r3
   1bda8:	strd	r2, [sp, #32]
   1bdac:	ldrd	r2, [sp, #16]
   1bdb0:	cmp	r3, fp
   1bdb4:	cmpeq	r2, sl
   1bdb8:	ldrd	r2, [sp, #32]
   1bdbc:	ldrd	sl, [sp, #24]
   1bdc0:	orrhi	ip, ip, #1
   1bdc4:	cmp	fp, r3
   1bdc8:	cmpeq	sl, r2
   1bdcc:	mvnhi	r6, #0
   1bdd0:	mvnhi	r7, #0
   1bdd4:	umull	sl, fp, r6, r1
   1bdd8:	mul	r3, lr, r6
   1bddc:	strd	sl, [sp, #16]
   1bde0:	mla	r0, r1, r7, r3
   1bde4:	ldrd	sl, [sp, #24]
   1bde8:	ldrd	r2, [sp]
   1bdec:	cmp	fp, r3
   1bdf0:	cmpeq	sl, r2
   1bdf4:	orrhi	ip, ip, #1
   1bdf8:	cmp	r7, r3
   1bdfc:	ldr	r3, [sp, #20]
   1be00:	cmpeq	r6, r2
   1be04:	add	r3, r0, r3
   1be08:	str	r3, [sp, #20]
   1be0c:	mvnhi	r2, #0
   1be10:	mvnhi	r3, #0
   1be14:	ldrdls	r2, [sp, #16]
   1be18:	ldrd	sl, [sp]
   1be1c:	mul	r0, r1, r3
   1be20:	cmp	r7, fp
   1be24:	str	r0, [sp, #16]
   1be28:	cmpeq	r6, sl
   1be2c:	ldr	r6, [sp, #16]
   1be30:	umull	r0, r1, r1, r2
   1be34:	mla	lr, lr, r2, r6
   1be38:	orrhi	ip, ip, #1
   1be3c:	cmp	r3, fp
   1be40:	cmpeq	r2, sl
   1be44:	add	r1, lr, r1
   1be48:	bls	1b91c <__assert_fail@plt+0xa464>
   1be4c:	b	1b914 <__assert_fail@plt+0xa45c>
   1be50:	ldr	r3, [pc, #344]	; 1bfb0 <__assert_fail@plt+0xaaf8>
   1be54:	mvn	r2, #0
   1be58:	cmp	r7, r3
   1be5c:	cmpeq	r6, r2
   1be60:	bhi	1beb4 <__assert_fail@plt+0xa9fc>
   1be64:	lsl	r3, r7, #10
   1be68:	orr	r3, r3, r6, lsr #22
   1be6c:	lsl	r2, r6, #10
   1be70:	mov	r6, r2
   1be74:	mov	r7, r3
   1be78:	mov	ip, #0
   1be7c:	b	1b594 <__assert_fail@plt+0xa0dc>
   1be80:	strd	r6, [r8]
   1be84:	orr	r4, r4, #2
   1be88:	b	1b264 <__assert_fail@plt+0x9dac>
   1be8c:	ldrd	r2, [sp]
   1be90:	cmp	r7, r3
   1be94:	cmpeq	r6, r2
   1be98:	bhi	1beb4 <__assert_fail@plt+0xa9fc>
   1be9c:	mul	r3, r6, lr
   1bea0:	mov	ip, #0
   1bea4:	mla	r3, r1, r7, r3
   1bea8:	umull	r6, r7, r6, r1
   1beac:	add	r7, r3, r7
   1beb0:	b	1b594 <__assert_fail@plt+0xa0dc>
   1beb4:	mvn	r6, #0
   1beb8:	mvn	r7, #0
   1bebc:	mov	ip, #1
   1bec0:	b	1b594 <__assert_fail@plt+0xa0dc>
   1bec4:	ldrb	r3, [r9, #2]
   1bec8:	mvn	r2, #0
   1becc:	mov	r1, #1024	; 0x400
   1bed0:	cmp	r3, #66	; 0x42
   1bed4:	ldr	r3, [pc, #212]	; 1bfb0 <__assert_fail@plt+0xaaf8>
   1bed8:	mov	lr, #0
   1bedc:	strd	r2, [sp]
   1bee0:	moveq	r3, #3
   1bee4:	streq	r3, [sp, #12]
   1bee8:	movne	r3, #1
   1beec:	strne	r3, [sp, #12]
   1bef0:	b	1b440 <__assert_fail@plt+0x9f88>
   1bef4:	add	r3, pc, #172	; 0xac
   1bef8:	ldrd	r2, [r3]
   1befc:	mov	r1, #1000	; 0x3e8
   1bf00:	mov	lr, #0
   1bf04:	strd	r2, [sp]
   1bf08:	mov	r3, #2
   1bf0c:	str	r3, [sp, #12]
   1bf10:	b	1b440 <__assert_fail@plt+0x9f88>
   1bf14:	ldr	r3, [pc, #148]	; 1bfb0 <__assert_fail@plt+0xaaf8>
   1bf18:	mvn	r2, #0
   1bf1c:	mov	lr, r0
   1bf20:	strd	r2, [sp]
   1bf24:	mov	r3, #1
   1bf28:	mov	r1, #1024	; 0x400
   1bf2c:	str	r3, [sp, #12]
   1bf30:	b	1b440 <__assert_fail@plt+0x9f88>
   1bf34:	mvn	r2, #0
   1bf38:	mvn	r3, #0
   1bf3c:	mov	sl, r2
   1bf40:	strd	r2, [sp, #24]
   1bf44:	mov	fp, r3
   1bf48:	b	1bd8c <__assert_fail@plt+0xa8d4>
   1bf4c:	mvn	r2, #0
   1bf50:	mvn	r3, #0
   1bf54:	mov	sl, r2
   1bf58:	strd	r2, [sp, #16]
   1bf5c:	mov	fp, r3
   1bf60:	b	1b810 <__assert_fail@plt+0xa358>
   1bf64:	mvn	r2, #0
   1bf68:	mvn	r3, #0
   1bf6c:	mov	sl, r2
   1bf70:	strd	r2, [sp, #24]
   1bf74:	mov	fp, r3
   1bf78:	b	1b668 <__assert_fail@plt+0xa1b0>
   1bf7c:	mvn	r2, #0
   1bf80:	mvn	r3, #0
   1bf84:	mov	sl, r2
   1bf88:	strd	r2, [sp, #16]
   1bf8c:	mov	fp, r3
   1bf90:	b	1bb6c <__assert_fail@plt+0xa6b4>
   1bf94:	ldr	r3, [pc, #28]	; 1bfb8 <__assert_fail@plt+0xab00>
   1bf98:	mov	r2, #85	; 0x55
   1bf9c:	ldr	r1, [pc, #24]	; 1bfbc <__assert_fail@plt+0xab04>
   1bfa0:	ldr	r0, [pc, #24]	; 1bfc0 <__assert_fail@plt+0xab08>
   1bfa4:	bl	114b8 <__assert_fail@plt>
   1bfa8:	blmi	ff1c5f6c <optarg@@GLIBC_2.4+0xff196db4>
   1bfac:	subeq	r8, r1, r7, lsr r9
   1bfb0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1bfb4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1bfb8:	ldrdeq	lr, [r1], -r0
   1bfbc:	ldrdeq	lr, [r1], -ip
   1bfc0:	andeq	lr, r1, ip, ror #7
   1bfc4:	cmp	r1, #0
   1bfc8:	cmpne	r0, #0
   1bfcc:	moveq	r1, #1
   1bfd0:	moveq	r0, r1
   1bfd4:	umull	r2, r3, r0, r1
   1bfd8:	adds	r3, r3, #0
   1bfdc:	movne	r3, #1
   1bfe0:	cmp	r2, #0
   1bfe4:	blt	1bff4 <__assert_fail@plt+0xab3c>
   1bfe8:	cmp	r3, #0
   1bfec:	bne	1bff4 <__assert_fail@plt+0xab3c>
   1bff0:	b	11128 <calloc@plt>
   1bff4:	push	{r4, lr}
   1bff8:	bl	11338 <__errno_location@plt>
   1bffc:	mov	r3, #12
   1c000:	str	r3, [r0]
   1c004:	mov	r0, #0
   1c008:	pop	{r4, pc}
   1c00c:	cmp	r0, #0
   1c010:	moveq	r0, #1
   1c014:	cmp	r0, #0
   1c018:	blt	1c020 <__assert_fail@plt+0xab68>
   1c01c:	b	112c0 <malloc@plt>
   1c020:	push	{r4, lr}
   1c024:	bl	11338 <__errno_location@plt>
   1c028:	mov	r3, #12
   1c02c:	str	r3, [r0]
   1c030:	mov	r0, #0
   1c034:	pop	{r4, pc}
   1c038:	cmp	r0, #0
   1c03c:	beq	1c060 <__assert_fail@plt+0xaba8>
   1c040:	cmp	r1, #0
   1c044:	push	{lr}		; (str lr, [sp, #-4]!)
   1c048:	sub	sp, sp, #12
   1c04c:	beq	1c068 <__assert_fail@plt+0xabb0>
   1c050:	blt	1c080 <__assert_fail@plt+0xabc8>
   1c054:	add	sp, sp, #12
   1c058:	pop	{lr}		; (ldr lr, [sp], #4)
   1c05c:	b	11200 <realloc@plt>
   1c060:	mov	r0, r1
   1c064:	b	1c00c <__assert_fail@plt+0xab54>
   1c068:	str	r1, [sp, #4]
   1c06c:	bl	13ef8 <__assert_fail@plt+0x2a40>
   1c070:	ldr	r3, [sp, #4]
   1c074:	mov	r0, r3
   1c078:	add	sp, sp, #12
   1c07c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c080:	bl	11338 <__errno_location@plt>
   1c084:	mov	r2, #12
   1c088:	mov	r3, #0
   1c08c:	str	r2, [r0]
   1c090:	b	1c074 <__assert_fail@plt+0xabbc>
   1c094:	push	{r4, r5, r6, lr}
   1c098:	mov	r4, r0
   1c09c:	bl	11284 <__fpending@plt>
   1c0a0:	ldr	r5, [r4]
   1c0a4:	and	r5, r5, #32
   1c0a8:	mov	r6, r0
   1c0ac:	mov	r0, r4
   1c0b0:	bl	1c110 <__assert_fail@plt+0xac58>
   1c0b4:	cmp	r5, #0
   1c0b8:	mov	r4, r0
   1c0bc:	bne	1c0dc <__assert_fail@plt+0xac24>
   1c0c0:	cmp	r0, #0
   1c0c4:	beq	1c0d4 <__assert_fail@plt+0xac1c>
   1c0c8:	cmp	r6, #0
   1c0cc:	beq	1c0f8 <__assert_fail@plt+0xac40>
   1c0d0:	mvn	r4, #0
   1c0d4:	mov	r0, r4
   1c0d8:	pop	{r4, r5, r6, pc}
   1c0dc:	cmp	r0, #0
   1c0e0:	bne	1c0d0 <__assert_fail@plt+0xac18>
   1c0e4:	bl	11338 <__errno_location@plt>
   1c0e8:	str	r4, [r0]
   1c0ec:	mvn	r4, #0
   1c0f0:	mov	r0, r4
   1c0f4:	pop	{r4, r5, r6, pc}
   1c0f8:	bl	11338 <__errno_location@plt>
   1c0fc:	ldr	r4, [r0]
   1c100:	subs	r4, r4, #9
   1c104:	mvnne	r4, #0
   1c108:	mov	r0, r4
   1c10c:	pop	{r4, r5, r6, pc}
   1c110:	push	{r4, r5, lr}
   1c114:	sub	sp, sp, #12
   1c118:	mov	r4, r0
   1c11c:	bl	11398 <fileno@plt>
   1c120:	cmp	r0, #0
   1c124:	mov	r0, r4
   1c128:	blt	1c1a4 <__assert_fail@plt+0xacec>
   1c12c:	bl	112d8 <__freading@plt>
   1c130:	cmp	r0, #0
   1c134:	bne	1c170 <__assert_fail@plt+0xacb8>
   1c138:	mov	r0, r4
   1c13c:	bl	1c1b0 <__assert_fail@plt+0xacf8>
   1c140:	cmp	r0, #0
   1c144:	beq	1c1a0 <__assert_fail@plt+0xace8>
   1c148:	bl	11338 <__errno_location@plt>
   1c14c:	mov	r5, r0
   1c150:	mov	r0, r4
   1c154:	ldr	r4, [r5]
   1c158:	bl	113b0 <fclose@plt>
   1c15c:	cmp	r4, #0
   1c160:	mvnne	r0, #0
   1c164:	strne	r4, [r5]
   1c168:	add	sp, sp, #12
   1c16c:	pop	{r4, r5, pc}
   1c170:	mov	r0, r4
   1c174:	bl	11398 <fileno@plt>
   1c178:	mov	r3, #1
   1c17c:	str	r3, [sp]
   1c180:	mov	r2, #0
   1c184:	mov	r3, #0
   1c188:	bl	11260 <lseek64@plt>
   1c18c:	mvn	r3, #0
   1c190:	mvn	r2, #0
   1c194:	cmp	r1, r3
   1c198:	cmpeq	r0, r2
   1c19c:	bne	1c138 <__assert_fail@plt+0xac80>
   1c1a0:	mov	r0, r4
   1c1a4:	add	sp, sp, #12
   1c1a8:	pop	{r4, r5, lr}
   1c1ac:	b	113b0 <fclose@plt>
   1c1b0:	push	{r4, lr}
   1c1b4:	subs	r4, r0, #0
   1c1b8:	sub	sp, sp, #8
   1c1bc:	beq	1c1d8 <__assert_fail@plt+0xad20>
   1c1c0:	bl	112d8 <__freading@plt>
   1c1c4:	cmp	r0, #0
   1c1c8:	beq	1c1d8 <__assert_fail@plt+0xad20>
   1c1cc:	ldr	r3, [r4]
   1c1d0:	tst	r3, #256	; 0x100
   1c1d4:	bne	1c1e8 <__assert_fail@plt+0xad30>
   1c1d8:	mov	r0, r4
   1c1dc:	add	sp, sp, #8
   1c1e0:	pop	{r4, lr}
   1c1e4:	b	11164 <fflush@plt>
   1c1e8:	mov	r3, #1
   1c1ec:	str	r3, [sp]
   1c1f0:	mov	r2, #0
   1c1f4:	mov	r3, #0
   1c1f8:	mov	r0, r4
   1c1fc:	bl	1c2a8 <__assert_fail@plt+0xadf0>
   1c200:	mov	r0, r4
   1c204:	add	sp, sp, #8
   1c208:	pop	{r4, lr}
   1c20c:	b	11164 <fflush@plt>
   1c210:	push	{r4, r5, r6, lr}
   1c214:	mov	r5, r1
   1c218:	bl	1141c <fopen64@plt>
   1c21c:	subs	r4, r0, #0
   1c220:	beq	1c230 <__assert_fail@plt+0xad78>
   1c224:	bl	11398 <fileno@plt>
   1c228:	cmp	r0, #2
   1c22c:	bls	1c238 <__assert_fail@plt+0xad80>
   1c230:	mov	r0, r4
   1c234:	pop	{r4, r5, r6, pc}
   1c238:	bl	1c41c <__assert_fail@plt+0xaf64>
   1c23c:	subs	r6, r0, #0
   1c240:	blt	1c288 <__assert_fail@plt+0xadd0>
   1c244:	mov	r0, r4
   1c248:	bl	1c110 <__assert_fail@plt+0xac58>
   1c24c:	cmp	r0, #0
   1c250:	bne	1c268 <__assert_fail@plt+0xadb0>
   1c254:	mov	r1, r5
   1c258:	mov	r0, r6
   1c25c:	bl	1111c <fdopen@plt>
   1c260:	subs	r4, r0, #0
   1c264:	bne	1c230 <__assert_fail@plt+0xad78>
   1c268:	bl	11338 <__errno_location@plt>
   1c26c:	mov	r4, #0
   1c270:	mov	r5, r0
   1c274:	mov	r0, r6
   1c278:	ldr	r6, [r5]
   1c27c:	bl	114ac <close@plt>
   1c280:	str	r6, [r5]
   1c284:	b	1c230 <__assert_fail@plt+0xad78>
   1c288:	bl	11338 <__errno_location@plt>
   1c28c:	mov	r5, r0
   1c290:	mov	r0, r4
   1c294:	ldr	r6, [r5]
   1c298:	mov	r4, #0
   1c29c:	bl	1c110 <__assert_fail@plt+0xac58>
   1c2a0:	str	r6, [r5]
   1c2a4:	b	1c230 <__assert_fail@plt+0xad78>
   1c2a8:	push	{r4, r5, r6, r7, r8, lr}
   1c2ac:	sub	sp, sp, #8
   1c2b0:	ldmib	r0, {ip, lr}
   1c2b4:	mov	r4, r0
   1c2b8:	ldr	r5, [sp, #32]
   1c2bc:	cmp	lr, ip
   1c2c0:	beq	1c2d8 <__assert_fail@plt+0xae20>
   1c2c4:	str	r5, [sp, #32]
   1c2c8:	mov	r0, r4
   1c2cc:	add	sp, sp, #8
   1c2d0:	pop	{r4, r5, r6, r7, r8, lr}
   1c2d4:	b	113bc <fseeko64@plt>
   1c2d8:	ldr	lr, [r0, #20]
   1c2dc:	ldr	ip, [r0, #16]
   1c2e0:	cmp	lr, ip
   1c2e4:	bne	1c2c4 <__assert_fail@plt+0xae0c>
   1c2e8:	ldr	r8, [r0, #36]	; 0x24
   1c2ec:	cmp	r8, #0
   1c2f0:	bne	1c2c4 <__assert_fail@plt+0xae0c>
   1c2f4:	mov	r6, r2
   1c2f8:	mov	r7, r3
   1c2fc:	bl	11398 <fileno@plt>
   1c300:	mov	r2, r6
   1c304:	mov	r3, r7
   1c308:	str	r5, [sp]
   1c30c:	bl	11260 <lseek64@plt>
   1c310:	mvn	r3, #0
   1c314:	mvn	r2, #0
   1c318:	cmp	r1, r3
   1c31c:	cmpeq	r0, r2
   1c320:	beq	1c340 <__assert_fail@plt+0xae88>
   1c324:	ldr	r3, [r4]
   1c328:	strd	r0, [r4, #80]	; 0x50
   1c32c:	mov	r0, r8
   1c330:	bic	r3, r3, #16
   1c334:	str	r3, [r4]
   1c338:	add	sp, sp, #8
   1c33c:	pop	{r4, r5, r6, r7, r8, pc}
   1c340:	mvn	r0, #0
   1c344:	b	1c338 <__assert_fail@plt+0xae80>
   1c348:	push	{r4, lr}
   1c34c:	mov	r0, #14
   1c350:	bl	11404 <nl_langinfo@plt>
   1c354:	cmp	r0, #0
   1c358:	beq	1c370 <__assert_fail@plt+0xaeb8>
   1c35c:	ldrb	r2, [r0]
   1c360:	ldr	r3, [pc, #16]	; 1c378 <__assert_fail@plt+0xaec0>
   1c364:	cmp	r2, #0
   1c368:	moveq	r0, r3
   1c36c:	pop	{r4, pc}
   1c370:	ldr	r0, [pc]	; 1c378 <__assert_fail@plt+0xaec0>
   1c374:	pop	{r4, pc}
   1c378:	andeq	lr, r1, r4, lsl r4
   1c37c:	push	{r4, r5, r6, r7, lr}
   1c380:	subs	r6, r0, #0
   1c384:	sub	sp, sp, #12
   1c388:	addeq	r6, sp, #4
   1c38c:	mov	r0, r6
   1c390:	mov	r5, r2
   1c394:	mov	r7, r1
   1c398:	bl	11290 <mbrtowc@plt>
   1c39c:	cmp	r5, #0
   1c3a0:	cmnne	r0, #3
   1c3a4:	mov	r4, r0
   1c3a8:	bls	1c3c4 <__assert_fail@plt+0xaf0c>
   1c3ac:	mov	r0, #0
   1c3b0:	bl	1c428 <__assert_fail@plt+0xaf70>
   1c3b4:	cmp	r0, #0
   1c3b8:	moveq	r4, #1
   1c3bc:	ldrbeq	r3, [r7]
   1c3c0:	streq	r3, [r6]
   1c3c4:	mov	r0, r4
   1c3c8:	add	sp, sp, #12
   1c3cc:	pop	{r4, r5, r6, r7, pc}
   1c3d0:	push	{r4, r5, r6, lr}
   1c3d4:	subs	r4, r2, #0
   1c3d8:	mov	r6, r0
   1c3dc:	mov	r5, r1
   1c3e0:	beq	1c40c <__assert_fail@plt+0xaf54>
   1c3e4:	mov	r1, r4
   1c3e8:	mvn	r0, #0
   1c3ec:	bl	1c51c <__assert_fail@plt+0xb064>
   1c3f0:	cmp	r0, r5
   1c3f4:	bcs	1c40c <__assert_fail@plt+0xaf54>
   1c3f8:	bl	11338 <__errno_location@plt>
   1c3fc:	mov	r3, #12
   1c400:	str	r3, [r0]
   1c404:	mov	r0, #0
   1c408:	pop	{r4, r5, r6, pc}
   1c40c:	mul	r1, r5, r4
   1c410:	mov	r0, r6
   1c414:	pop	{r4, r5, r6, lr}
   1c418:	b	1c038 <__assert_fail@plt+0xab80>
   1c41c:	mov	r2, #3
   1c420:	mov	r1, #0
   1c424:	b	13cec <__assert_fail@plt+0x2834>
   1c428:	push	{lr}		; (str lr, [sp, #-4]!)
   1c42c:	sub	sp, sp, #268	; 0x10c
   1c430:	add	r1, sp, #4
   1c434:	ldr	r2, [pc, #60]	; 1c478 <__assert_fail@plt+0xafc0>
   1c438:	bl	1c484 <__assert_fail@plt+0xafcc>
   1c43c:	cmp	r0, #0
   1c440:	movne	r0, #0
   1c444:	bne	1c470 <__assert_fail@plt+0xafb8>
   1c448:	ldr	r1, [pc, #44]	; 1c47c <__assert_fail@plt+0xafc4>
   1c44c:	add	r0, sp, #4
   1c450:	bl	11158 <strcmp@plt>
   1c454:	cmp	r0, #0
   1c458:	beq	1c470 <__assert_fail@plt+0xafb8>
   1c45c:	add	r0, sp, #4
   1c460:	ldr	r1, [pc, #24]	; 1c480 <__assert_fail@plt+0xafc8>
   1c464:	bl	11158 <strcmp@plt>
   1c468:	adds	r0, r0, #0
   1c46c:	movne	r0, #1
   1c470:	add	sp, sp, #268	; 0x10c
   1c474:	pop	{pc}		; (ldr pc, [sp], #4)
   1c478:	andeq	r0, r0, r1, lsl #2
   1c47c:	andeq	lr, r1, ip, lsl r4
   1c480:	andeq	lr, r1, r0, lsr #8
   1c484:	push	{r4, r5, r6, lr}
   1c488:	mov	r5, r1
   1c48c:	mov	r1, #0
   1c490:	mov	r4, r2
   1c494:	bl	113e0 <setlocale@plt>
   1c498:	subs	r6, r0, #0
   1c49c:	beq	1c4f8 <__assert_fail@plt+0xb040>
   1c4a0:	bl	11314 <strlen@plt>
   1c4a4:	cmp	r4, r0
   1c4a8:	bhi	1c4e0 <__assert_fail@plt+0xb028>
   1c4ac:	cmp	r4, #0
   1c4b0:	bne	1c4bc <__assert_fail@plt+0xb004>
   1c4b4:	mov	r0, #34	; 0x22
   1c4b8:	pop	{r4, r5, r6, pc}
   1c4bc:	sub	r4, r4, #1
   1c4c0:	mov	r1, r6
   1c4c4:	mov	r2, r4
   1c4c8:	mov	r0, r5
   1c4cc:	bl	11194 <memcpy@plt>
   1c4d0:	mov	r3, #0
   1c4d4:	strb	r3, [r5, r4]
   1c4d8:	mov	r0, #34	; 0x22
   1c4dc:	pop	{r4, r5, r6, pc}
   1c4e0:	add	r2, r0, #1
   1c4e4:	mov	r1, r6
   1c4e8:	mov	r0, r5
   1c4ec:	bl	11194 <memcpy@plt>
   1c4f0:	mov	r0, #0
   1c4f4:	pop	{r4, r5, r6, pc}
   1c4f8:	cmp	r4, #0
   1c4fc:	beq	1c50c <__assert_fail@plt+0xb054>
   1c500:	strb	r6, [r5]
   1c504:	mov	r0, #22
   1c508:	pop	{r4, r5, r6, pc}
   1c50c:	mov	r0, #22
   1c510:	pop	{r4, r5, r6, pc}
   1c514:	mov	r1, #0
   1c518:	b	113e0 <setlocale@plt>
   1c51c:	subs	r2, r1, #1
   1c520:	bxeq	lr
   1c524:	bcc	1c6fc <__assert_fail@plt+0xb244>
   1c528:	cmp	r0, r1
   1c52c:	bls	1c6e0 <__assert_fail@plt+0xb228>
   1c530:	tst	r1, r2
   1c534:	beq	1c6ec <__assert_fail@plt+0xb234>
   1c538:	clz	r3, r0
   1c53c:	clz	r2, r1
   1c540:	sub	r3, r2, r3
   1c544:	rsbs	r3, r3, #31
   1c548:	addne	r3, r3, r3, lsl #1
   1c54c:	mov	r2, #0
   1c550:	addne	pc, pc, r3, lsl #2
   1c554:	nop			; (mov r0, r0)
   1c558:	cmp	r0, r1, lsl #31
   1c55c:	adc	r2, r2, r2
   1c560:	subcs	r0, r0, r1, lsl #31
   1c564:	cmp	r0, r1, lsl #30
   1c568:	adc	r2, r2, r2
   1c56c:	subcs	r0, r0, r1, lsl #30
   1c570:	cmp	r0, r1, lsl #29
   1c574:	adc	r2, r2, r2
   1c578:	subcs	r0, r0, r1, lsl #29
   1c57c:	cmp	r0, r1, lsl #28
   1c580:	adc	r2, r2, r2
   1c584:	subcs	r0, r0, r1, lsl #28
   1c588:	cmp	r0, r1, lsl #27
   1c58c:	adc	r2, r2, r2
   1c590:	subcs	r0, r0, r1, lsl #27
   1c594:	cmp	r0, r1, lsl #26
   1c598:	adc	r2, r2, r2
   1c59c:	subcs	r0, r0, r1, lsl #26
   1c5a0:	cmp	r0, r1, lsl #25
   1c5a4:	adc	r2, r2, r2
   1c5a8:	subcs	r0, r0, r1, lsl #25
   1c5ac:	cmp	r0, r1, lsl #24
   1c5b0:	adc	r2, r2, r2
   1c5b4:	subcs	r0, r0, r1, lsl #24
   1c5b8:	cmp	r0, r1, lsl #23
   1c5bc:	adc	r2, r2, r2
   1c5c0:	subcs	r0, r0, r1, lsl #23
   1c5c4:	cmp	r0, r1, lsl #22
   1c5c8:	adc	r2, r2, r2
   1c5cc:	subcs	r0, r0, r1, lsl #22
   1c5d0:	cmp	r0, r1, lsl #21
   1c5d4:	adc	r2, r2, r2
   1c5d8:	subcs	r0, r0, r1, lsl #21
   1c5dc:	cmp	r0, r1, lsl #20
   1c5e0:	adc	r2, r2, r2
   1c5e4:	subcs	r0, r0, r1, lsl #20
   1c5e8:	cmp	r0, r1, lsl #19
   1c5ec:	adc	r2, r2, r2
   1c5f0:	subcs	r0, r0, r1, lsl #19
   1c5f4:	cmp	r0, r1, lsl #18
   1c5f8:	adc	r2, r2, r2
   1c5fc:	subcs	r0, r0, r1, lsl #18
   1c600:	cmp	r0, r1, lsl #17
   1c604:	adc	r2, r2, r2
   1c608:	subcs	r0, r0, r1, lsl #17
   1c60c:	cmp	r0, r1, lsl #16
   1c610:	adc	r2, r2, r2
   1c614:	subcs	r0, r0, r1, lsl #16
   1c618:	cmp	r0, r1, lsl #15
   1c61c:	adc	r2, r2, r2
   1c620:	subcs	r0, r0, r1, lsl #15
   1c624:	cmp	r0, r1, lsl #14
   1c628:	adc	r2, r2, r2
   1c62c:	subcs	r0, r0, r1, lsl #14
   1c630:	cmp	r0, r1, lsl #13
   1c634:	adc	r2, r2, r2
   1c638:	subcs	r0, r0, r1, lsl #13
   1c63c:	cmp	r0, r1, lsl #12
   1c640:	adc	r2, r2, r2
   1c644:	subcs	r0, r0, r1, lsl #12
   1c648:	cmp	r0, r1, lsl #11
   1c64c:	adc	r2, r2, r2
   1c650:	subcs	r0, r0, r1, lsl #11
   1c654:	cmp	r0, r1, lsl #10
   1c658:	adc	r2, r2, r2
   1c65c:	subcs	r0, r0, r1, lsl #10
   1c660:	cmp	r0, r1, lsl #9
   1c664:	adc	r2, r2, r2
   1c668:	subcs	r0, r0, r1, lsl #9
   1c66c:	cmp	r0, r1, lsl #8
   1c670:	adc	r2, r2, r2
   1c674:	subcs	r0, r0, r1, lsl #8
   1c678:	cmp	r0, r1, lsl #7
   1c67c:	adc	r2, r2, r2
   1c680:	subcs	r0, r0, r1, lsl #7
   1c684:	cmp	r0, r1, lsl #6
   1c688:	adc	r2, r2, r2
   1c68c:	subcs	r0, r0, r1, lsl #6
   1c690:	cmp	r0, r1, lsl #5
   1c694:	adc	r2, r2, r2
   1c698:	subcs	r0, r0, r1, lsl #5
   1c69c:	cmp	r0, r1, lsl #4
   1c6a0:	adc	r2, r2, r2
   1c6a4:	subcs	r0, r0, r1, lsl #4
   1c6a8:	cmp	r0, r1, lsl #3
   1c6ac:	adc	r2, r2, r2
   1c6b0:	subcs	r0, r0, r1, lsl #3
   1c6b4:	cmp	r0, r1, lsl #2
   1c6b8:	adc	r2, r2, r2
   1c6bc:	subcs	r0, r0, r1, lsl #2
   1c6c0:	cmp	r0, r1, lsl #1
   1c6c4:	adc	r2, r2, r2
   1c6c8:	subcs	r0, r0, r1, lsl #1
   1c6cc:	cmp	r0, r1
   1c6d0:	adc	r2, r2, r2
   1c6d4:	subcs	r0, r0, r1
   1c6d8:	mov	r0, r2
   1c6dc:	bx	lr
   1c6e0:	moveq	r0, #1
   1c6e4:	movne	r0, #0
   1c6e8:	bx	lr
   1c6ec:	clz	r2, r1
   1c6f0:	rsb	r2, r2, #31
   1c6f4:	lsr	r0, r0, r2
   1c6f8:	bx	lr
   1c6fc:	cmp	r0, #0
   1c700:	mvnne	r0, #0
   1c704:	b	1ce30 <__assert_fail@plt+0xb978>
   1c708:	cmp	r1, #0
   1c70c:	beq	1c6fc <__assert_fail@plt+0xb244>
   1c710:	push	{r0, r1, lr}
   1c714:	bl	1c51c <__assert_fail@plt+0xb064>
   1c718:	pop	{r1, r2, lr}
   1c71c:	mul	r3, r2, r0
   1c720:	sub	r1, r1, r3
   1c724:	bx	lr
   1c728:	cmp	r1, #0
   1c72c:	beq	1c938 <__assert_fail@plt+0xb480>
   1c730:	eor	ip, r0, r1
   1c734:	rsbmi	r1, r1, #0
   1c738:	subs	r2, r1, #1
   1c73c:	beq	1c904 <__assert_fail@plt+0xb44c>
   1c740:	movs	r3, r0
   1c744:	rsbmi	r3, r0, #0
   1c748:	cmp	r3, r1
   1c74c:	bls	1c910 <__assert_fail@plt+0xb458>
   1c750:	tst	r1, r2
   1c754:	beq	1c920 <__assert_fail@plt+0xb468>
   1c758:	clz	r2, r3
   1c75c:	clz	r0, r1
   1c760:	sub	r2, r0, r2
   1c764:	rsbs	r2, r2, #31
   1c768:	addne	r2, r2, r2, lsl #1
   1c76c:	mov	r0, #0
   1c770:	addne	pc, pc, r2, lsl #2
   1c774:	nop			; (mov r0, r0)
   1c778:	cmp	r3, r1, lsl #31
   1c77c:	adc	r0, r0, r0
   1c780:	subcs	r3, r3, r1, lsl #31
   1c784:	cmp	r3, r1, lsl #30
   1c788:	adc	r0, r0, r0
   1c78c:	subcs	r3, r3, r1, lsl #30
   1c790:	cmp	r3, r1, lsl #29
   1c794:	adc	r0, r0, r0
   1c798:	subcs	r3, r3, r1, lsl #29
   1c79c:	cmp	r3, r1, lsl #28
   1c7a0:	adc	r0, r0, r0
   1c7a4:	subcs	r3, r3, r1, lsl #28
   1c7a8:	cmp	r3, r1, lsl #27
   1c7ac:	adc	r0, r0, r0
   1c7b0:	subcs	r3, r3, r1, lsl #27
   1c7b4:	cmp	r3, r1, lsl #26
   1c7b8:	adc	r0, r0, r0
   1c7bc:	subcs	r3, r3, r1, lsl #26
   1c7c0:	cmp	r3, r1, lsl #25
   1c7c4:	adc	r0, r0, r0
   1c7c8:	subcs	r3, r3, r1, lsl #25
   1c7cc:	cmp	r3, r1, lsl #24
   1c7d0:	adc	r0, r0, r0
   1c7d4:	subcs	r3, r3, r1, lsl #24
   1c7d8:	cmp	r3, r1, lsl #23
   1c7dc:	adc	r0, r0, r0
   1c7e0:	subcs	r3, r3, r1, lsl #23
   1c7e4:	cmp	r3, r1, lsl #22
   1c7e8:	adc	r0, r0, r0
   1c7ec:	subcs	r3, r3, r1, lsl #22
   1c7f0:	cmp	r3, r1, lsl #21
   1c7f4:	adc	r0, r0, r0
   1c7f8:	subcs	r3, r3, r1, lsl #21
   1c7fc:	cmp	r3, r1, lsl #20
   1c800:	adc	r0, r0, r0
   1c804:	subcs	r3, r3, r1, lsl #20
   1c808:	cmp	r3, r1, lsl #19
   1c80c:	adc	r0, r0, r0
   1c810:	subcs	r3, r3, r1, lsl #19
   1c814:	cmp	r3, r1, lsl #18
   1c818:	adc	r0, r0, r0
   1c81c:	subcs	r3, r3, r1, lsl #18
   1c820:	cmp	r3, r1, lsl #17
   1c824:	adc	r0, r0, r0
   1c828:	subcs	r3, r3, r1, lsl #17
   1c82c:	cmp	r3, r1, lsl #16
   1c830:	adc	r0, r0, r0
   1c834:	subcs	r3, r3, r1, lsl #16
   1c838:	cmp	r3, r1, lsl #15
   1c83c:	adc	r0, r0, r0
   1c840:	subcs	r3, r3, r1, lsl #15
   1c844:	cmp	r3, r1, lsl #14
   1c848:	adc	r0, r0, r0
   1c84c:	subcs	r3, r3, r1, lsl #14
   1c850:	cmp	r3, r1, lsl #13
   1c854:	adc	r0, r0, r0
   1c858:	subcs	r3, r3, r1, lsl #13
   1c85c:	cmp	r3, r1, lsl #12
   1c860:	adc	r0, r0, r0
   1c864:	subcs	r3, r3, r1, lsl #12
   1c868:	cmp	r3, r1, lsl #11
   1c86c:	adc	r0, r0, r0
   1c870:	subcs	r3, r3, r1, lsl #11
   1c874:	cmp	r3, r1, lsl #10
   1c878:	adc	r0, r0, r0
   1c87c:	subcs	r3, r3, r1, lsl #10
   1c880:	cmp	r3, r1, lsl #9
   1c884:	adc	r0, r0, r0
   1c888:	subcs	r3, r3, r1, lsl #9
   1c88c:	cmp	r3, r1, lsl #8
   1c890:	adc	r0, r0, r0
   1c894:	subcs	r3, r3, r1, lsl #8
   1c898:	cmp	r3, r1, lsl #7
   1c89c:	adc	r0, r0, r0
   1c8a0:	subcs	r3, r3, r1, lsl #7
   1c8a4:	cmp	r3, r1, lsl #6
   1c8a8:	adc	r0, r0, r0
   1c8ac:	subcs	r3, r3, r1, lsl #6
   1c8b0:	cmp	r3, r1, lsl #5
   1c8b4:	adc	r0, r0, r0
   1c8b8:	subcs	r3, r3, r1, lsl #5
   1c8bc:	cmp	r3, r1, lsl #4
   1c8c0:	adc	r0, r0, r0
   1c8c4:	subcs	r3, r3, r1, lsl #4
   1c8c8:	cmp	r3, r1, lsl #3
   1c8cc:	adc	r0, r0, r0
   1c8d0:	subcs	r3, r3, r1, lsl #3
   1c8d4:	cmp	r3, r1, lsl #2
   1c8d8:	adc	r0, r0, r0
   1c8dc:	subcs	r3, r3, r1, lsl #2
   1c8e0:	cmp	r3, r1, lsl #1
   1c8e4:	adc	r0, r0, r0
   1c8e8:	subcs	r3, r3, r1, lsl #1
   1c8ec:	cmp	r3, r1
   1c8f0:	adc	r0, r0, r0
   1c8f4:	subcs	r3, r3, r1
   1c8f8:	cmp	ip, #0
   1c8fc:	rsbmi	r0, r0, #0
   1c900:	bx	lr
   1c904:	teq	ip, r0
   1c908:	rsbmi	r0, r0, #0
   1c90c:	bx	lr
   1c910:	movcc	r0, #0
   1c914:	asreq	r0, ip, #31
   1c918:	orreq	r0, r0, #1
   1c91c:	bx	lr
   1c920:	clz	r2, r1
   1c924:	rsb	r2, r2, #31
   1c928:	cmp	ip, #0
   1c92c:	lsr	r0, r3, r2
   1c930:	rsbmi	r0, r0, #0
   1c934:	bx	lr
   1c938:	cmp	r0, #0
   1c93c:	mvngt	r0, #-2147483648	; 0x80000000
   1c940:	movlt	r0, #-2147483648	; 0x80000000
   1c944:	b	1ce30 <__assert_fail@plt+0xb978>
   1c948:	cmp	r1, #0
   1c94c:	beq	1c938 <__assert_fail@plt+0xb480>
   1c950:	push	{r0, r1, lr}
   1c954:	bl	1c730 <__assert_fail@plt+0xb278>
   1c958:	pop	{r1, r2, lr}
   1c95c:	mul	r3, r2, r0
   1c960:	sub	r1, r1, r3
   1c964:	bx	lr
   1c968:	eor	r1, r1, #-2147483648	; 0x80000000
   1c96c:	b	1c974 <__assert_fail@plt+0xb4bc>
   1c970:	eor	r3, r3, #-2147483648	; 0x80000000
   1c974:	push	{r4, r5, lr}
   1c978:	lsl	r4, r1, #1
   1c97c:	lsl	r5, r3, #1
   1c980:	teq	r4, r5
   1c984:	teqeq	r0, r2
   1c988:	orrsne	ip, r4, r0
   1c98c:	orrsne	ip, r5, r2
   1c990:	mvnsne	ip, r4, asr #21
   1c994:	mvnsne	ip, r5, asr #21
   1c998:	beq	1cb84 <__assert_fail@plt+0xb6cc>
   1c99c:	lsr	r4, r4, #21
   1c9a0:	rsbs	r5, r4, r5, lsr #21
   1c9a4:	rsblt	r5, r5, #0
   1c9a8:	ble	1c9c8 <__assert_fail@plt+0xb510>
   1c9ac:	add	r4, r4, r5
   1c9b0:	eor	r2, r0, r2
   1c9b4:	eor	r3, r1, r3
   1c9b8:	eor	r0, r2, r0
   1c9bc:	eor	r1, r3, r1
   1c9c0:	eor	r2, r0, r2
   1c9c4:	eor	r3, r1, r3
   1c9c8:	cmp	r5, #54	; 0x36
   1c9cc:	pophi	{r4, r5, pc}
   1c9d0:	tst	r1, #-2147483648	; 0x80000000
   1c9d4:	lsl	r1, r1, #12
   1c9d8:	mov	ip, #1048576	; 0x100000
   1c9dc:	orr	r1, ip, r1, lsr #12
   1c9e0:	beq	1c9ec <__assert_fail@plt+0xb534>
   1c9e4:	rsbs	r0, r0, #0
   1c9e8:	rsc	r1, r1, #0
   1c9ec:	tst	r3, #-2147483648	; 0x80000000
   1c9f0:	lsl	r3, r3, #12
   1c9f4:	orr	r3, ip, r3, lsr #12
   1c9f8:	beq	1ca04 <__assert_fail@plt+0xb54c>
   1c9fc:	rsbs	r2, r2, #0
   1ca00:	rsc	r3, r3, #0
   1ca04:	teq	r4, r5
   1ca08:	beq	1cb6c <__assert_fail@plt+0xb6b4>
   1ca0c:	sub	r4, r4, #1
   1ca10:	rsbs	lr, r5, #32
   1ca14:	blt	1ca30 <__assert_fail@plt+0xb578>
   1ca18:	lsl	ip, r2, lr
   1ca1c:	adds	r0, r0, r2, lsr r5
   1ca20:	adc	r1, r1, #0
   1ca24:	adds	r0, r0, r3, lsl lr
   1ca28:	adcs	r1, r1, r3, asr r5
   1ca2c:	b	1ca4c <__assert_fail@plt+0xb594>
   1ca30:	sub	r5, r5, #32
   1ca34:	add	lr, lr, #32
   1ca38:	cmp	r2, #1
   1ca3c:	lsl	ip, r3, lr
   1ca40:	orrcs	ip, ip, #2
   1ca44:	adds	r0, r0, r3, asr r5
   1ca48:	adcs	r1, r1, r3, asr #31
   1ca4c:	and	r5, r1, #-2147483648	; 0x80000000
   1ca50:	bpl	1ca60 <__assert_fail@plt+0xb5a8>
   1ca54:	rsbs	ip, ip, #0
   1ca58:	rscs	r0, r0, #0
   1ca5c:	rsc	r1, r1, #0
   1ca60:	cmp	r1, #1048576	; 0x100000
   1ca64:	bcc	1caa4 <__assert_fail@plt+0xb5ec>
   1ca68:	cmp	r1, #2097152	; 0x200000
   1ca6c:	bcc	1ca8c <__assert_fail@plt+0xb5d4>
   1ca70:	lsrs	r1, r1, #1
   1ca74:	rrxs	r0, r0
   1ca78:	rrx	ip, ip
   1ca7c:	add	r4, r4, #1
   1ca80:	lsl	r2, r4, #21
   1ca84:	cmn	r2, #4194304	; 0x400000
   1ca88:	bcs	1cbe4 <__assert_fail@plt+0xb72c>
   1ca8c:	cmp	ip, #-2147483648	; 0x80000000
   1ca90:	lsrseq	ip, r0, #1
   1ca94:	adcs	r0, r0, #0
   1ca98:	adc	r1, r1, r4, lsl #20
   1ca9c:	orr	r1, r1, r5
   1caa0:	pop	{r4, r5, pc}
   1caa4:	lsls	ip, ip, #1
   1caa8:	adcs	r0, r0, r0
   1caac:	adc	r1, r1, r1
   1cab0:	tst	r1, #1048576	; 0x100000
   1cab4:	sub	r4, r4, #1
   1cab8:	bne	1ca8c <__assert_fail@plt+0xb5d4>
   1cabc:	teq	r1, #0
   1cac0:	moveq	r1, r0
   1cac4:	moveq	r0, #0
   1cac8:	clz	r3, r1
   1cacc:	addeq	r3, r3, #32
   1cad0:	sub	r3, r3, #11
   1cad4:	subs	r2, r3, #32
   1cad8:	bge	1cafc <__assert_fail@plt+0xb644>
   1cadc:	adds	r2, r2, #12
   1cae0:	ble	1caf8 <__assert_fail@plt+0xb640>
   1cae4:	add	ip, r2, #20
   1cae8:	rsb	r2, r2, #12
   1caec:	lsl	r0, r1, ip
   1caf0:	lsr	r1, r1, r2
   1caf4:	b	1cb0c <__assert_fail@plt+0xb654>
   1caf8:	add	r2, r2, #20
   1cafc:	rsble	ip, r2, #32
   1cb00:	lsl	r1, r1, r2
   1cb04:	orrle	r1, r1, r0, lsr ip
   1cb08:	lslle	r0, r0, r2
   1cb0c:	subs	r4, r4, r3
   1cb10:	addge	r1, r1, r4, lsl #20
   1cb14:	orrge	r1, r1, r5
   1cb18:	popge	{r4, r5, pc}
   1cb1c:	mvn	r4, r4
   1cb20:	subs	r4, r4, #31
   1cb24:	bge	1cb60 <__assert_fail@plt+0xb6a8>
   1cb28:	adds	r4, r4, #12
   1cb2c:	bgt	1cb48 <__assert_fail@plt+0xb690>
   1cb30:	add	r4, r4, #20
   1cb34:	rsb	r2, r4, #32
   1cb38:	lsr	r0, r0, r4
   1cb3c:	orr	r0, r0, r1, lsl r2
   1cb40:	orr	r1, r5, r1, lsr r4
   1cb44:	pop	{r4, r5, pc}
   1cb48:	rsb	r4, r4, #12
   1cb4c:	rsb	r2, r4, #32
   1cb50:	lsr	r0, r0, r2
   1cb54:	orr	r0, r0, r1, lsl r4
   1cb58:	mov	r1, r5
   1cb5c:	pop	{r4, r5, pc}
   1cb60:	lsr	r0, r1, r4
   1cb64:	mov	r1, r5
   1cb68:	pop	{r4, r5, pc}
   1cb6c:	teq	r4, #0
   1cb70:	eor	r3, r3, #1048576	; 0x100000
   1cb74:	eoreq	r1, r1, #1048576	; 0x100000
   1cb78:	addeq	r4, r4, #1
   1cb7c:	subne	r5, r5, #1
   1cb80:	b	1ca0c <__assert_fail@plt+0xb554>
   1cb84:	mvns	ip, r4, asr #21
   1cb88:	mvnsne	ip, r5, asr #21
   1cb8c:	beq	1cbf4 <__assert_fail@plt+0xb73c>
   1cb90:	teq	r4, r5
   1cb94:	teqeq	r0, r2
   1cb98:	beq	1cbac <__assert_fail@plt+0xb6f4>
   1cb9c:	orrs	ip, r4, r0
   1cba0:	moveq	r1, r3
   1cba4:	moveq	r0, r2
   1cba8:	pop	{r4, r5, pc}
   1cbac:	teq	r1, r3
   1cbb0:	movne	r1, #0
   1cbb4:	movne	r0, #0
   1cbb8:	popne	{r4, r5, pc}
   1cbbc:	lsrs	ip, r4, #21
   1cbc0:	bne	1cbd4 <__assert_fail@plt+0xb71c>
   1cbc4:	lsls	r0, r0, #1
   1cbc8:	adcs	r1, r1, r1
   1cbcc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1cbd0:	pop	{r4, r5, pc}
   1cbd4:	adds	r4, r4, #4194304	; 0x400000
   1cbd8:	addcc	r1, r1, #1048576	; 0x100000
   1cbdc:	popcc	{r4, r5, pc}
   1cbe0:	and	r5, r1, #-2147483648	; 0x80000000
   1cbe4:	orr	r1, r5, #2130706432	; 0x7f000000
   1cbe8:	orr	r1, r1, #15728640	; 0xf00000
   1cbec:	mov	r0, #0
   1cbf0:	pop	{r4, r5, pc}
   1cbf4:	mvns	ip, r4, asr #21
   1cbf8:	movne	r1, r3
   1cbfc:	movne	r0, r2
   1cc00:	mvnseq	ip, r5, asr #21
   1cc04:	movne	r3, r1
   1cc08:	movne	r2, r0
   1cc0c:	orrs	r4, r0, r1, lsl #12
   1cc10:	orrseq	r5, r2, r3, lsl #12
   1cc14:	teqeq	r1, r3
   1cc18:	orrne	r1, r1, #524288	; 0x80000
   1cc1c:	pop	{r4, r5, pc}
   1cc20:	teq	r0, #0
   1cc24:	moveq	r1, #0
   1cc28:	bxeq	lr
   1cc2c:	push	{r4, r5, lr}
   1cc30:	mov	r4, #1024	; 0x400
   1cc34:	add	r4, r4, #50	; 0x32
   1cc38:	mov	r5, #0
   1cc3c:	mov	r1, #0
   1cc40:	b	1cabc <__assert_fail@plt+0xb604>
   1cc44:	teq	r0, #0
   1cc48:	moveq	r1, #0
   1cc4c:	bxeq	lr
   1cc50:	push	{r4, r5, lr}
   1cc54:	mov	r4, #1024	; 0x400
   1cc58:	add	r4, r4, #50	; 0x32
   1cc5c:	ands	r5, r0, #-2147483648	; 0x80000000
   1cc60:	rsbmi	r0, r0, #0
   1cc64:	mov	r1, #0
   1cc68:	b	1cabc <__assert_fail@plt+0xb604>
   1cc6c:	lsls	r2, r0, #1
   1cc70:	asr	r1, r2, #3
   1cc74:	rrx	r1, r1
   1cc78:	lsl	r0, r2, #28
   1cc7c:	andsne	r3, r2, #-16777216	; 0xff000000
   1cc80:	teqne	r3, #-16777216	; 0xff000000
   1cc84:	eorne	r1, r1, #939524096	; 0x38000000
   1cc88:	bxne	lr
   1cc8c:	teq	r2, #0
   1cc90:	teqne	r3, #-16777216	; 0xff000000
   1cc94:	bxeq	lr
   1cc98:	push	{r4, r5, lr}
   1cc9c:	mov	r4, #896	; 0x380
   1cca0:	and	r5, r1, #-2147483648	; 0x80000000
   1cca4:	bic	r1, r1, #-2147483648	; 0x80000000
   1cca8:	b	1cabc <__assert_fail@plt+0xb604>
   1ccac:	orrs	r2, r0, r1
   1ccb0:	bxeq	lr
   1ccb4:	push	{r4, r5, lr}
   1ccb8:	mov	r5, #0
   1ccbc:	b	1ccdc <__assert_fail@plt+0xb824>
   1ccc0:	orrs	r2, r0, r1
   1ccc4:	bxeq	lr
   1ccc8:	push	{r4, r5, lr}
   1cccc:	ands	r5, r1, #-2147483648	; 0x80000000
   1ccd0:	bpl	1ccdc <__assert_fail@plt+0xb824>
   1ccd4:	rsbs	r0, r0, #0
   1ccd8:	rsc	r1, r1, #0
   1ccdc:	mov	r4, #1024	; 0x400
   1cce0:	add	r4, r4, #50	; 0x32
   1cce4:	lsrs	ip, r1, #22
   1cce8:	beq	1ca60 <__assert_fail@plt+0xb5a8>
   1ccec:	mov	r2, #3
   1ccf0:	lsrs	ip, ip, #3
   1ccf4:	addne	r2, r2, #3
   1ccf8:	lsrs	ip, ip, #3
   1ccfc:	addne	r2, r2, #3
   1cd00:	add	r2, r2, ip, lsr #3
   1cd04:	rsb	r3, r2, #32
   1cd08:	lsl	ip, r0, r3
   1cd0c:	lsr	r0, r0, r2
   1cd10:	orr	r0, r0, r1, lsl r3
   1cd14:	lsr	r1, r1, r2
   1cd18:	add	r4, r4, r2
   1cd1c:	b	1ca60 <__assert_fail@plt+0xb5a8>
   1cd20:	cmp	r3, #0
   1cd24:	cmpeq	r2, #0
   1cd28:	bne	1cd4c <__assert_fail@plt+0xb894>
   1cd2c:	cmp	r1, #0
   1cd30:	movlt	r1, #-2147483648	; 0x80000000
   1cd34:	movlt	r0, #0
   1cd38:	blt	1cd48 <__assert_fail@plt+0xb890>
   1cd3c:	cmpeq	r0, #0
   1cd40:	mvnne	r1, #-2147483648	; 0x80000000
   1cd44:	mvnne	r0, #0
   1cd48:	b	1ce30 <__assert_fail@plt+0xb978>
   1cd4c:	sub	sp, sp, #8
   1cd50:	push	{sp, lr}
   1cd54:	cmp	r1, #0
   1cd58:	blt	1cd78 <__assert_fail@plt+0xb8c0>
   1cd5c:	cmp	r3, #0
   1cd60:	blt	1cdac <__assert_fail@plt+0xb8f4>
   1cd64:	bl	1ce88 <__assert_fail@plt+0xb9d0>
   1cd68:	ldr	lr, [sp, #4]
   1cd6c:	add	sp, sp, #8
   1cd70:	pop	{r2, r3}
   1cd74:	bx	lr
   1cd78:	rsbs	r0, r0, #0
   1cd7c:	sbc	r1, r1, r1, lsl #1
   1cd80:	cmp	r3, #0
   1cd84:	blt	1cdd0 <__assert_fail@plt+0xb918>
   1cd88:	bl	1ce88 <__assert_fail@plt+0xb9d0>
   1cd8c:	ldr	lr, [sp, #4]
   1cd90:	add	sp, sp, #8
   1cd94:	pop	{r2, r3}
   1cd98:	rsbs	r0, r0, #0
   1cd9c:	sbc	r1, r1, r1, lsl #1
   1cda0:	rsbs	r2, r2, #0
   1cda4:	sbc	r3, r3, r3, lsl #1
   1cda8:	bx	lr
   1cdac:	rsbs	r2, r2, #0
   1cdb0:	sbc	r3, r3, r3, lsl #1
   1cdb4:	bl	1ce88 <__assert_fail@plt+0xb9d0>
   1cdb8:	ldr	lr, [sp, #4]
   1cdbc:	add	sp, sp, #8
   1cdc0:	pop	{r2, r3}
   1cdc4:	rsbs	r0, r0, #0
   1cdc8:	sbc	r1, r1, r1, lsl #1
   1cdcc:	bx	lr
   1cdd0:	rsbs	r2, r2, #0
   1cdd4:	sbc	r3, r3, r3, lsl #1
   1cdd8:	bl	1ce88 <__assert_fail@plt+0xb9d0>
   1cddc:	ldr	lr, [sp, #4]
   1cde0:	add	sp, sp, #8
   1cde4:	pop	{r2, r3}
   1cde8:	rsbs	r2, r2, #0
   1cdec:	sbc	r3, r3, r3, lsl #1
   1cdf0:	bx	lr
   1cdf4:	cmp	r3, #0
   1cdf8:	cmpeq	r2, #0
   1cdfc:	bne	1ce14 <__assert_fail@plt+0xb95c>
   1ce00:	cmp	r1, #0
   1ce04:	cmpeq	r0, #0
   1ce08:	mvnne	r1, #0
   1ce0c:	mvnne	r0, #0
   1ce10:	b	1ce30 <__assert_fail@plt+0xb978>
   1ce14:	sub	sp, sp, #8
   1ce18:	push	{sp, lr}
   1ce1c:	bl	1ce88 <__assert_fail@plt+0xb9d0>
   1ce20:	ldr	lr, [sp, #4]
   1ce24:	add	sp, sp, #8
   1ce28:	pop	{r2, r3}
   1ce2c:	bx	lr
   1ce30:	push	{r1, lr}
   1ce34:	mov	r0, #8
   1ce38:	bl	11140 <raise@plt>
   1ce3c:	pop	{r1, pc}
   1ce40:	vmov	d7, r0, r1
   1ce44:	vldr	d6, [pc, #44]	; 1ce78 <__assert_fail@plt+0xb9c0>
   1ce48:	vldr	d5, [pc, #48]	; 1ce80 <__assert_fail@plt+0xb9c8>
   1ce4c:	mov	r0, #0
   1ce50:	vmul.f64	d6, d7, d6
   1ce54:	vcvt.u32.f64	s12, d6
   1ce58:	vcvt.f64.u32	d4, s12
   1ce5c:	vmov	r1, s12
   1ce60:	vmls.f64	d7, d4, d5
   1ce64:	vcvt.u32.f64	s14, d7
   1ce68:	vmov	r3, s14
   1ce6c:	orr	r0, r0, r3
   1ce70:	bx	lr
   1ce74:	nop			; (mov r0, r0)
   1ce78:	andeq	r0, r0, r0
   1ce7c:	ldclcc	0, cr0, [r0]
   1ce80:	andeq	r0, r0, r0
   1ce84:	mvnsmi	r0, r0
   1ce88:	cmp	r1, r3
   1ce8c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ce90:	cmpeq	r0, r2
   1ce94:	mov	r4, r0
   1ce98:	mov	r5, r1
   1ce9c:	ldr	r9, [sp, #28]
   1cea0:	movcc	r0, #0
   1cea4:	movcc	r1, #0
   1cea8:	bcc	1cfa0 <__assert_fail@plt+0xbae8>
   1ceac:	cmp	r3, #0
   1ceb0:	clzeq	ip, r2
   1ceb4:	clzne	ip, r3
   1ceb8:	addeq	ip, ip, #32
   1cebc:	cmp	r5, #0
   1cec0:	clzeq	r1, r4
   1cec4:	addeq	r1, r1, #32
   1cec8:	clzne	r1, r5
   1cecc:	sub	ip, ip, r1
   1ced0:	sub	lr, ip, #32
   1ced4:	lsl	r7, r3, ip
   1ced8:	rsb	r8, ip, #32
   1cedc:	orr	r7, r7, r2, lsl lr
   1cee0:	orr	r7, r7, r2, lsr r8
   1cee4:	lsl	r6, r2, ip
   1cee8:	cmp	r5, r7
   1ceec:	cmpeq	r4, r6
   1cef0:	movcc	r0, #0
   1cef4:	movcc	r1, #0
   1cef8:	bcc	1cf14 <__assert_fail@plt+0xba5c>
   1cefc:	mov	r3, #1
   1cf00:	subs	r4, r4, r6
   1cf04:	lsl	r1, r3, lr
   1cf08:	lsl	r0, r3, ip
   1cf0c:	orr	r1, r1, r3, lsr r8
   1cf10:	sbc	r5, r5, r7
   1cf14:	cmp	ip, #0
   1cf18:	beq	1cfa0 <__assert_fail@plt+0xbae8>
   1cf1c:	lsrs	r3, r7, #1
   1cf20:	rrx	r2, r6
   1cf24:	mov	r6, ip
   1cf28:	b	1cf4c <__assert_fail@plt+0xba94>
   1cf2c:	subs	r4, r4, r2
   1cf30:	sbc	r5, r5, r3
   1cf34:	adds	r4, r4, r4
   1cf38:	adc	r5, r5, r5
   1cf3c:	adds	r4, r4, #1
   1cf40:	adc	r5, r5, #0
   1cf44:	subs	r6, r6, #1
   1cf48:	beq	1cf68 <__assert_fail@plt+0xbab0>
   1cf4c:	cmp	r5, r3
   1cf50:	cmpeq	r4, r2
   1cf54:	bcs	1cf2c <__assert_fail@plt+0xba74>
   1cf58:	adds	r4, r4, r4
   1cf5c:	adc	r5, r5, r5
   1cf60:	subs	r6, r6, #1
   1cf64:	bne	1cf4c <__assert_fail@plt+0xba94>
   1cf68:	lsr	r6, r4, ip
   1cf6c:	lsr	r7, r5, ip
   1cf70:	orr	r6, r6, r5, lsl r8
   1cf74:	adds	r2, r0, r4
   1cf78:	orr	r6, r6, r5, lsr lr
   1cf7c:	adc	r3, r1, r5
   1cf80:	lsl	r1, r7, ip
   1cf84:	orr	r1, r1, r6, lsl lr
   1cf88:	lsl	r0, r6, ip
   1cf8c:	orr	r1, r1, r6, lsr r8
   1cf90:	subs	r0, r2, r0
   1cf94:	mov	r4, r6
   1cf98:	mov	r5, r7
   1cf9c:	sbc	r1, r3, r1
   1cfa0:	cmp	r9, #0
   1cfa4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1cfa8:	strd	r4, [r9]
   1cfac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cfb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cfb4:	mov	r7, r0
   1cfb8:	ldr	r6, [pc, #72]	; 1d008 <__assert_fail@plt+0xbb50>
   1cfbc:	ldr	r5, [pc, #72]	; 1d00c <__assert_fail@plt+0xbb54>
   1cfc0:	add	r6, pc, r6
   1cfc4:	add	r5, pc, r5
   1cfc8:	sub	r6, r6, r5
   1cfcc:	mov	r8, r1
   1cfd0:	mov	r9, r2
   1cfd4:	bl	110fc <fdopen@plt-0x20>
   1cfd8:	asrs	r6, r6, #2
   1cfdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cfe0:	mov	r4, #0
   1cfe4:	add	r4, r4, #1
   1cfe8:	ldr	r3, [r5], #4
   1cfec:	mov	r2, r9
   1cff0:	mov	r1, r8
   1cff4:	mov	r0, r7
   1cff8:	blx	r3
   1cffc:	cmp	r6, r4
   1d000:	bne	1cfe4 <__assert_fail@plt+0xbb2c>
   1d004:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d008:	andeq	r1, r1, r8, asr #30
   1d00c:	andeq	r1, r1, r0, asr #30
   1d010:	bx	lr
   1d014:	ldr	r3, [pc, #12]	; 1d028 <__assert_fail@plt+0xbb70>
   1d018:	mov	r1, #0
   1d01c:	add	r3, pc, r3
   1d020:	ldr	r2, [r3]
   1d024:	b	11350 <__cxa_atexit@plt>
   1d028:	andeq	r2, r1, r8, lsr #2

Disassembly of section .fini:

0001d02c <.fini>:
   1d02c:	push	{r3, lr}
   1d030:	pop	{r3, pc}
