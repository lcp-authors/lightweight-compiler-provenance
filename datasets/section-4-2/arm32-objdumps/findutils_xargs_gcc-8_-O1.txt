
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	115b8 <__assert_fail@plt+0x48>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <fdopen@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <fdopen@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	ip, r1, ip, ror #28

00011198 <fdopen@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <calloc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <strcmp@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <strtol@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <printf@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <read@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <fflush@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <wcwidth@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <free@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <ferror@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <_exit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <memcpy@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <execvp@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <mbsinit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <signal@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <memcmp@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <dcgettext@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <sysconf@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <dup2@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <getrlimit64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <realloc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <textdomain@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <iswcntrl@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <iswprint@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <poll@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <sigaction@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <fwrite@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <lseek64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <waitpid@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <__ctype_get_mb_cur_max@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <strcpy@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <__fpending@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <mbrtowc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <error@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <opendir@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <open64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <getenv@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <malloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <__libc_start_main@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__freading@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <__gmon_start__@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <getopt_long@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <__ctype_b_loc@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <getpid@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <exit@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <strtoul@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <strlen@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <strchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <setenv@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <fprintf@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <__errno_location@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <snprintf@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <__cxa_atexit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <memset@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strncpy@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <write@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <fileno@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <memchr@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <fclose@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <strnlen@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <pipe@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <fseeko64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fcntl64@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <setlocale@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <sigemptyset@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fork@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <strrchr@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <nl_langinfo@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <fputc@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <readdir64@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <fdopendir@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <putc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <dirfd@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <bindtextdomain@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <isatty@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <unsetenv@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <fputs@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <strncmp@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #28, 20	; 0x1c000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <abort@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #28, 20	; 0x1c000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <getc@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #28, 20	; 0x1c000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <close@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #28, 20	; 0x1c000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

00011564 <closedir@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #28, 20	; 0x1c000
   1156c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011570 <__assert_fail@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #28, 20	; 0x1c000
   11578:	ldr	pc, [ip, #3036]!	; 0xbdc

Disassembly of section .text:

0001157c <.text>:
   1157c:	mov	fp, #0
   11580:	mov	lr, #0
   11584:	pop	{r1}		; (ldr r1, [sp], #4)
   11588:	mov	r2, sp
   1158c:	push	{r2}		; (str r2, [sp, #-4]!)
   11590:	push	{r0}		; (str r0, [sp, #-4]!)
   11594:	ldr	ip, [pc, #16]	; 115ac <__assert_fail@plt+0x3c>
   11598:	push	{ip}		; (str ip, [sp, #-4]!)
   1159c:	ldr	r0, [pc, #12]	; 115b0 <__assert_fail@plt+0x40>
   115a0:	ldr	r3, [pc, #12]	; 115b4 <__assert_fail@plt+0x44>
   115a4:	bl	11360 <__libc_start_main@plt>
   115a8:	bl	11540 <abort@plt>
   115ac:	andeq	fp, r1, r8, lsr r6
   115b0:	andeq	r2, r1, ip, ror pc
   115b4:	ldrdeq	fp, [r1], -r8
   115b8:	ldr	r3, [pc, #20]	; 115d4 <__assert_fail@plt+0x64>
   115bc:	ldr	r2, [pc, #20]	; 115d8 <__assert_fail@plt+0x68>
   115c0:	add	r3, pc, r3
   115c4:	ldr	r2, [r3, r2]
   115c8:	cmp	r2, #0
   115cc:	bxeq	lr
   115d0:	b	11378 <__gmon_start__@plt>
   115d4:	andeq	ip, r1, r8, lsr sl
   115d8:	andeq	r0, r0, r8, asr r1
   115dc:	ldr	r0, [pc, #24]	; 115fc <__assert_fail@plt+0x8c>
   115e0:	ldr	r3, [pc, #24]	; 11600 <__assert_fail@plt+0x90>
   115e4:	cmp	r3, r0
   115e8:	bxeq	lr
   115ec:	ldr	r3, [pc, #16]	; 11604 <__assert_fail@plt+0x94>
   115f0:	cmp	r3, #0
   115f4:	bxeq	lr
   115f8:	bx	r3
   115fc:			; <UNDEFINED> instruction: 0x0002e1b4
   11600:			; <UNDEFINED> instruction: 0x0002e1b4
   11604:	andeq	r0, r0, r0
   11608:	ldr	r0, [pc, #36]	; 11634 <__assert_fail@plt+0xc4>
   1160c:	ldr	r1, [pc, #36]	; 11638 <__assert_fail@plt+0xc8>
   11610:	sub	r1, r1, r0
   11614:	asr	r1, r1, #2
   11618:	add	r1, r1, r1, lsr #31
   1161c:	asrs	r1, r1, #1
   11620:	bxeq	lr
   11624:	ldr	r3, [pc, #16]	; 1163c <__assert_fail@plt+0xcc>
   11628:	cmp	r3, #0
   1162c:	bxeq	lr
   11630:	bx	r3
   11634:			; <UNDEFINED> instruction: 0x0002e1b4
   11638:			; <UNDEFINED> instruction: 0x0002e1b4
   1163c:	andeq	r0, r0, r0
   11640:	push	{r4, lr}
   11644:	ldr	r4, [pc, #24]	; 11664 <__assert_fail@plt+0xf4>
   11648:	ldrb	r3, [r4]
   1164c:	cmp	r3, #0
   11650:	popne	{r4, pc}
   11654:	bl	115dc <__assert_fail@plt+0x6c>
   11658:	mov	r3, #1
   1165c:	strb	r3, [r4]
   11660:	pop	{r4, pc}
   11664:	andeq	lr, r2, r4, ror #3
   11668:	b	11608 <__assert_fail@plt+0x98>
   1166c:	bx	lr
   11670:	movw	r3, #57700	; 0xe164
   11674:	movt	r3, #2
   11678:	ldr	r3, [r3]
   1167c:	cmn	r3, #-2147483647	; 0x80000001
   11680:	beq	11698 <__assert_fail@plt+0x128>
   11684:	movw	r3, #57700	; 0xe164
   11688:	movt	r3, #2
   1168c:	ldr	r2, [r3]
   11690:	add	r2, r2, #1
   11694:	str	r2, [r3]
   11698:	movw	r3, #57832	; 0xe1e8
   1169c:	movt	r3, #2
   116a0:	mov	r2, #1
   116a4:	str	r2, [r3]
   116a8:	bx	lr
   116ac:	movw	r3, #57700	; 0xe164
   116b0:	movt	r3, #2
   116b4:	ldr	r3, [r3]
   116b8:	cmp	r3, #1
   116bc:	ble	116d4 <__assert_fail@plt+0x164>
   116c0:	movw	r3, #57700	; 0xe164
   116c4:	movt	r3, #2
   116c8:	ldr	r2, [r3]
   116cc:	sub	r2, r2, #1
   116d0:	str	r2, [r3]
   116d4:	bx	lr
   116d8:	strd	r4, [sp, #-12]!
   116dc:	str	lr, [sp, #8]
   116e0:	sub	sp, sp, #12
   116e4:	mov	r5, r0
   116e8:	mov	r4, r1
   116ec:	mov	r2, #5
   116f0:	movw	r1, #47032	; 0xb7b8
   116f4:	movt	r1, #1
   116f8:	mov	r0, #0
   116fc:	bl	11258 <dcgettext@plt>
   11700:	str	r4, [sp, #4]
   11704:	str	r5, [sp]
   11708:	mov	r3, r4
   1170c:	mov	r2, r0
   11710:	mov	r1, #0
   11714:	mov	r0, r1
   11718:	bl	11324 <error@plt>
   1171c:	add	sp, sp, #12
   11720:	ldrd	r4, [sp]
   11724:	add	sp, sp, #8
   11728:	pop	{pc}		; (ldr pc, [sp], #4)
   1172c:	str	r4, [sp, #-8]!
   11730:	str	lr, [sp, #4]
   11734:	mov	r2, #5
   11738:	movw	r1, #47112	; 0xb808
   1173c:	movt	r1, #1
   11740:	mov	r0, #0
   11744:	bl	11258 <dcgettext@plt>
   11748:	mov	r2, r0
   1174c:	mov	r1, #0
   11750:	mov	r0, #1
   11754:	bl	11324 <error@plt>
   11758:	movw	r3, #57832	; 0xe1e8
   1175c:	movt	r3, #2
   11760:	ldr	r3, [r3, #28]
   11764:	cmp	r3, #0
   11768:	bxne	lr
   1176c:	movw	r3, #57700	; 0xe164
   11770:	movt	r3, #2
   11774:	ldrb	r3, [r3, #4]
   11778:	cmp	r3, #0
   1177c:	bxne	lr
   11780:	movw	r3, #57832	; 0xe1e8
   11784:	movt	r3, #2
   11788:	ldr	r2, [r3, #48]	; 0x30
   1178c:	ldr	r3, [r3, #32]
   11790:	cmp	r2, r3
   11794:	bxeq	lr
   11798:	movw	r3, #57832	; 0xe1e8
   1179c:	movt	r3, #2
   117a0:	ldr	r3, [r3, #4]
   117a4:	cmp	r3, #0
   117a8:	bxne	lr
   117ac:	str	r4, [sp, #-8]!
   117b0:	str	lr, [sp, #4]
   117b4:	movw	r0, #57832	; 0xe1e8
   117b8:	movt	r0, #2
   117bc:	add	r1, r0, #48	; 0x30
   117c0:	add	r0, r0, #4
   117c4:	bl	1489c <__assert_fail@plt+0x332c>
   117c8:	ldr	r4, [sp]
   117cc:	add	sp, sp, #4
   117d0:	pop	{pc}		; (ldr pc, [sp], #4)
   117d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   117d8:	strd	r6, [sp, #8]
   117dc:	str	lr, [sp, #16]
   117e0:	sub	sp, sp, #20
   117e4:	movw	r3, #57832	; 0xe1e8
   117e8:	movt	r3, #2
   117ec:	ldr	r5, [r3, #92]	; 0x5c
   117f0:	ldr	r7, [r3, #16]
   117f4:	sub	r7, r7, #1
   117f8:	ldr	r2, [r3, #68]	; 0x44
   117fc:	sub	r7, r7, r2
   11800:	add	r7, r5, r7
   11804:	ldrb	r3, [r3, #96]	; 0x60
   11808:	cmp	r3, #0
   1180c:	bne	11964 <__assert_fail@plt+0x3f4>
   11810:	movw	r6, #57832	; 0xe1e8
   11814:	movt	r6, #2
   11818:	ldr	r0, [r6, #100]	; 0x64
   1181c:	bl	1154c <getc@plt>
   11820:	mov	r4, r0
   11824:	cmn	r0, #1
   11828:	beq	11848 <__assert_fail@plt+0x2d8>
   1182c:	ldrb	r3, [r6, #104]	; 0x68
   11830:	cmp	r3, r0
   11834:	beq	118d4 <__assert_fail@plt+0x364>
   11838:	cmp	r5, r7
   1183c:	bcs	1193c <__assert_fail@plt+0x3cc>
   11840:	strb	r0, [r5], #1
   11844:	b	11818 <__assert_fail@plt+0x2a8>
   11848:	movw	r3, #57832	; 0xe1e8
   1184c:	movt	r3, #2
   11850:	mov	r2, #1
   11854:	strb	r2, [r3, #96]	; 0x60
   11858:	ldr	r2, [r3, #92]	; 0x5c
   1185c:	cmp	r2, r5
   11860:	beq	11884 <__assert_fail@plt+0x314>
   11864:	mov	r3, #0
   11868:	strb	r3, [r5], #1
   1186c:	sub	r4, r5, r2
   11870:	movw	r3, #57832	; 0xe1e8
   11874:	movt	r3, #2
   11878:	ldr	r3, [r3, #28]
   1187c:	cmp	r3, #0
   11880:	beq	1189c <__assert_fail@plt+0x32c>
   11884:	mov	r0, r4
   11888:	add	sp, sp, #20
   1188c:	ldrd	r4, [sp]
   11890:	ldrd	r6, [sp, #8]
   11894:	add	sp, sp, #16
   11898:	pop	{pc}		; (ldr pc, [sp], #4)
   1189c:	movw	r0, #57832	; 0xe1e8
   118a0:	movt	r0, #2
   118a4:	movw	r3, #57700	; 0xe164
   118a8:	movt	r3, #2
   118ac:	ldrb	r3, [r3, #4]
   118b0:	str	r3, [sp, #8]
   118b4:	mov	r3, #0
   118b8:	str	r3, [sp, #4]
   118bc:	str	r3, [sp]
   118c0:	mov	r3, r4
   118c4:	add	r1, r0, #48	; 0x30
   118c8:	add	r0, r0, #4
   118cc:	bl	14404 <__assert_fail@plt+0x2e94>
   118d0:	b	11884 <__assert_fail@plt+0x314>
   118d4:	movw	r3, #57832	; 0xe1e8
   118d8:	movt	r3, #2
   118dc:	ldr	r2, [r3, #108]	; 0x6c
   118e0:	add	r2, r2, #1
   118e4:	str	r2, [r3, #108]	; 0x6c
   118e8:	mov	r2, #0
   118ec:	strb	r2, [r5], #1
   118f0:	ldr	r2, [r3, #92]	; 0x5c
   118f4:	sub	r4, r5, r2
   118f8:	ldr	r3, [r3, #28]
   118fc:	cmp	r3, #0
   11900:	bne	11884 <__assert_fail@plt+0x314>
   11904:	movw	r0, #57832	; 0xe1e8
   11908:	movt	r0, #2
   1190c:	movw	r3, #57700	; 0xe164
   11910:	movt	r3, #2
   11914:	ldrb	r3, [r3, #4]
   11918:	str	r3, [sp, #8]
   1191c:	mov	r3, #0
   11920:	str	r3, [sp, #4]
   11924:	str	r3, [sp]
   11928:	mov	r3, r4
   1192c:	add	r1, r0, #48	; 0x30
   11930:	add	r0, r0, #4
   11934:	bl	14404 <__assert_fail@plt+0x2e94>
   11938:	b	11884 <__assert_fail@plt+0x314>
   1193c:	bl	11758 <__assert_fail@plt+0x1e8>
   11940:	mov	r2, #5
   11944:	movw	r1, #47148	; 0xb82c
   11948:	movt	r1, #1
   1194c:	mov	r0, #0
   11950:	bl	11258 <dcgettext@plt>
   11954:	mov	r2, r0
   11958:	mov	r1, #0
   1195c:	mov	r0, #1
   11960:	bl	11324 <error@plt>
   11964:	mvn	r4, #0
   11968:	b	11884 <__assert_fail@plt+0x314>
   1196c:	movw	r3, #57832	; 0xe1e8
   11970:	movt	r3, #2
   11974:	ldr	r3, [r3, #112]	; 0x70
   11978:	cmp	r3, #0
   1197c:	bxeq	lr
   11980:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11984:	strd	r6, [sp, #8]
   11988:	strd	r8, [sp, #16]
   1198c:	strd	sl, [sp, #24]
   11990:	str	lr, [sp, #32]
   11994:	sub	sp, sp, #28
   11998:	mov	sl, r1
   1199c:	mov	r8, r0
   119a0:	mov	r9, #0
   119a4:	movw	r6, #57832	; 0xe1e8
   119a8:	movt	r6, #2
   119ac:	mov	fp, r9
   119b0:	movw	r3, #47248	; 0xb890
   119b4:	movt	r3, #1
   119b8:	str	r3, [sp, #8]
   119bc:	movw	r3, #47288	; 0xb8b8
   119c0:	movt	r3, #1
   119c4:	str	r3, [sp, #12]
   119c8:	b	11b30 <__assert_fail@plt+0x5c0>
   119cc:	bl	113f0 <__errno_location@plt>
   119d0:	ldr	r7, [r0]
   119d4:	cmp	r7, #4
   119d8:	bne	11a68 <__assert_fail@plt+0x4f8>
   119dc:	ldr	r3, [r6]
   119e0:	cmp	r3, #0
   119e4:	movne	r3, r8
   119e8:	orreq	r3, r8, #1
   119ec:	cmp	r3, #0
   119f0:	moveq	r4, #1
   119f4:	mov	r2, r4
   119f8:	add	r1, sp, #20
   119fc:	mov	r0, r5
   11a00:	bl	112e8 <waitpid@plt>
   11a04:	cmn	r0, #1
   11a08:	beq	119cc <__assert_fail@plt+0x45c>
   11a0c:	cmp	r0, #0
   11a10:	bne	11a8c <__assert_fail@plt+0x51c>
   11a14:	cmp	r4, #0
   11a18:	bne	11a4c <__assert_fail@plt+0x4dc>
   11a1c:	mov	r2, #5
   11a20:	movw	r1, #47204	; 0xb864
   11a24:	movt	r1, #1
   11a28:	mov	r0, #0
   11a2c:	bl	11258 <dcgettext@plt>
   11a30:	movw	r3, #57832	; 0xe1e8
   11a34:	movt	r3, #2
   11a38:	ldr	r3, [r3, #112]	; 0x70
   11a3c:	mov	r2, r0
   11a40:	mov	r1, #0
   11a44:	mov	r0, r1
   11a48:	bl	11324 <error@plt>
   11a4c:	add	sp, sp, #28
   11a50:	ldrd	r4, [sp]
   11a54:	ldrd	r6, [sp, #8]
   11a58:	ldrd	r8, [sp, #16]
   11a5c:	ldrd	sl, [sp, #24]
   11a60:	add	sp, sp, #32
   11a64:	pop	{pc}		; (ldr pc, [sp], #4)
   11a68:	mov	r2, #5
   11a6c:	movw	r1, #47172	; 0xb844
   11a70:	movt	r1, #1
   11a74:	mov	r0, #0
   11a78:	bl	11258 <dcgettext@plt>
   11a7c:	mov	r2, r0
   11a80:	mov	r1, r7
   11a84:	mov	r0, #1
   11a88:	bl	11324 <error@plt>
   11a8c:	ldr	ip, [r6, #116]	; 0x74
   11a90:	cmp	ip, #0
   11a94:	beq	119f4 <__assert_fail@plt+0x484>
   11a98:	ldr	r2, [r6, #120]	; 0x78
   11a9c:	ldr	r3, [r2]
   11aa0:	cmp	r0, r3
   11aa4:	beq	11be8 <__assert_fail@plt+0x678>
   11aa8:	mov	r3, #0
   11aac:	add	r3, r3, #1
   11ab0:	cmp	r3, ip
   11ab4:	beq	119f4 <__assert_fail@plt+0x484>
   11ab8:	ldr	r1, [r2, #4]!
   11abc:	cmp	r1, r0
   11ac0:	bne	11aac <__assert_fail@plt+0x53c>
   11ac4:	ldr	r2, [r6, #120]	; 0x78
   11ac8:	mov	r1, #0
   11acc:	str	r1, [r2, r3, lsl #2]
   11ad0:	ldr	r3, [r6, #112]	; 0x70
   11ad4:	sub	r3, r3, #1
   11ad8:	str	r3, [r6, #112]	; 0x70
   11adc:	add	r9, r9, #1
   11ae0:	ldrb	r3, [sp, #21]
   11ae4:	cmp	r3, #255	; 0xff
   11ae8:	beq	11b4c <__assert_fail@plt+0x5dc>
   11aec:	ldrb	r3, [sp, #20]
   11af0:	cmp	r3, #127	; 0x7f
   11af4:	beq	11b78 <__assert_fail@plt+0x608>
   11af8:	ldr	r3, [sp, #20]
   11afc:	and	r3, r3, #127	; 0x7f
   11b00:	add	r3, r3, #1
   11b04:	sbfx	r3, r3, #1, #7
   11b08:	sxtb	r3, r3
   11b0c:	cmp	r3, #0
   11b10:	bgt	11bac <__assert_fail@plt+0x63c>
   11b14:	ldrb	r3, [sp, #21]
   11b18:	cmp	r3, #0
   11b1c:	movne	r3, #123	; 0x7b
   11b20:	strne	r3, [r6, #124]	; 0x7c
   11b24:	ldr	r3, [r6, #112]	; 0x70
   11b28:	cmp	r3, #0
   11b2c:	beq	11a4c <__assert_fail@plt+0x4dc>
   11b30:	eor	r4, r8, #1
   11b34:	cmp	sl, r9
   11b38:	movhi	r4, #0
   11b3c:	andls	r4, r4, #1
   11b40:	str	fp, [r6]
   11b44:	mvn	r5, #0
   11b48:	b	119f4 <__assert_fail@plt+0x484>
   11b4c:	mov	r2, #5
   11b50:	ldr	r1, [sp, #8]
   11b54:	mov	r0, #0
   11b58:	bl	11258 <dcgettext@plt>
   11b5c:	ldr	r3, [r6, #52]	; 0x34
   11b60:	ldr	r3, [r3]
   11b64:	mov	r2, r0
   11b68:	mov	r1, #0
   11b6c:	mov	r0, #124	; 0x7c
   11b70:	bl	11324 <error@plt>
   11b74:	b	11aec <__assert_fail@plt+0x57c>
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [sp, #12]
   11b80:	mov	r0, #0
   11b84:	bl	11258 <dcgettext@plt>
   11b88:	ldr	r3, [r6, #52]	; 0x34
   11b8c:	ldr	r3, [r3]
   11b90:	ldrb	r2, [sp, #21]
   11b94:	str	r2, [sp]
   11b98:	mov	r2, r0
   11b9c:	mov	r1, #0
   11ba0:	mov	r0, #125	; 0x7d
   11ba4:	bl	11324 <error@plt>
   11ba8:	b	11af8 <__assert_fail@plt+0x588>
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #47316	; 0xb8d4
   11bb4:	movt	r1, #1
   11bb8:	mov	r0, #0
   11bbc:	bl	11258 <dcgettext@plt>
   11bc0:	ldr	r3, [r6, #52]	; 0x34
   11bc4:	ldr	r3, [r3]
   11bc8:	ldr	r2, [sp, #20]
   11bcc:	and	r2, r2, #127	; 0x7f
   11bd0:	str	r2, [sp]
   11bd4:	mov	r2, r0
   11bd8:	mov	r1, #0
   11bdc:	mov	r0, #125	; 0x7d
   11be0:	bl	11324 <error@plt>
   11be4:	b	11b14 <__assert_fail@plt+0x5a4>
   11be8:	mov	r3, #0
   11bec:	b	11ac4 <__assert_fail@plt+0x554>
   11bf0:	str	r4, [sp, #-8]!
   11bf4:	str	lr, [sp, #4]
   11bf8:	bl	1139c <getpid@plt>
   11bfc:	movw	r3, #57832	; 0xe1e8
   11c00:	movt	r3, #2
   11c04:	ldr	r3, [r3, #128]	; 0x80
   11c08:	cmp	r0, r3
   11c0c:	bne	11c30 <__assert_fail@plt+0x6c0>
   11c10:	movw	r3, #57832	; 0xe1e8
   11c14:	movt	r3, #2
   11c18:	ldrb	r3, [r3, #132]	; 0x84
   11c1c:	cmp	r3, #0
   11c20:	beq	11c50 <__assert_fail@plt+0x6e0>
   11c24:	ldr	r4, [sp]
   11c28:	add	sp, sp, #4
   11c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c30:	movw	r3, #46688	; 0xb660
   11c34:	movt	r3, #1
   11c38:	movw	r2, #1605	; 0x645
   11c3c:	movw	r1, #47344	; 0xb8f0
   11c40:	movt	r1, #1
   11c44:	movw	r0, #47352	; 0xb8f8
   11c48:	movt	r0, #1
   11c4c:	bl	11570 <__assert_fail@plt>
   11c50:	movw	r4, #57832	; 0xe1e8
   11c54:	movt	r4, #2
   11c58:	mov	r0, #1
   11c5c:	strb	r0, [r4, #132]	; 0x84
   11c60:	mov	r1, #0
   11c64:	bl	1196c <__assert_fail@plt+0x3fc>
   11c68:	mov	r3, #0
   11c6c:	strb	r3, [r4, #132]	; 0x84
   11c70:	ldr	r2, [r4, #136]	; 0x88
   11c74:	ldr	r3, [r4, #124]	; 0x7c
   11c78:	cmp	r2, r3
   11c7c:	beq	11c24 <__assert_fail@plt+0x6b4>
   11c80:	ldr	r0, [r4, #124]	; 0x7c
   11c84:	bl	11210 <_exit@plt>
   11c88:	strd	r4, [sp, #-16]!
   11c8c:	str	r6, [sp, #8]
   11c90:	str	lr, [sp, #12]
   11c94:	mov	r5, r0
   11c98:	movw	r3, #57832	; 0xe1e8
   11c9c:	movt	r3, #2
   11ca0:	ldr	r4, [r3, #116]	; 0x74
   11ca4:	cmp	r4, #0
   11ca8:	beq	11d2c <__assert_fail@plt+0x7bc>
   11cac:	movw	r3, #57832	; 0xe1e8
   11cb0:	movt	r3, #2
   11cb4:	ldr	r3, [r3, #120]	; 0x78
   11cb8:	ldr	r2, [r3]
   11cbc:	cmp	r2, #0
   11cc0:	beq	11da4 <__assert_fail@plt+0x834>
   11cc4:	mov	r0, #0
   11cc8:	add	r0, r0, #1
   11ccc:	cmp	r0, r4
   11cd0:	beq	11d2c <__assert_fail@plt+0x7bc>
   11cd4:	ldr	r2, [r3, #4]!
   11cd8:	cmp	r2, #0
   11cdc:	bne	11cc8 <__assert_fail@plt+0x758>
   11ce0:	movw	r3, #57832	; 0xe1e8
   11ce4:	movt	r3, #2
   11ce8:	ldr	r3, [r3, #120]	; 0x78
   11cec:	add	r2, r3, r0, lsl #2
   11cf0:	ldr	r3, [r3, r0, lsl #2]
   11cf4:	cmp	r3, #0
   11cf8:	bne	11d88 <__assert_fail@plt+0x818>
   11cfc:	str	r5, [r2]
   11d00:	movw	r3, #57832	; 0xe1e8
   11d04:	movt	r3, #2
   11d08:	ldr	r2, [r3, #112]	; 0x70
   11d0c:	add	r2, r2, #1
   11d10:	str	r2, [r3, #112]	; 0x70
   11d14:	mov	r2, #1
   11d18:	strb	r2, [r3, #140]	; 0x8c
   11d1c:	ldrd	r4, [sp]
   11d20:	ldr	r6, [sp, #8]
   11d24:	add	sp, sp, #12
   11d28:	pop	{pc}		; (ldr pc, [sp], #4)
   11d2c:	movw	r6, #57832	; 0xe1e8
   11d30:	movt	r6, #2
   11d34:	mov	r2, #4
   11d38:	add	r1, r6, #116	; 0x74
   11d3c:	ldr	r0, [r6, #120]	; 0x78
   11d40:	bl	1a218 <__assert_fail@plt+0x8ca8>
   11d44:	str	r0, [r6, #120]	; 0x78
   11d48:	ldr	r3, [r6, #116]	; 0x74
   11d4c:	cmp	r4, r3
   11d50:	bcs	11d80 <__assert_fail@plt+0x810>
   11d54:	add	r0, r0, r4, lsl #2
   11d58:	mov	r3, r4
   11d5c:	mov	ip, #0
   11d60:	mov	r1, r6
   11d64:	str	ip, [r0], #4
   11d68:	add	r3, r3, #1
   11d6c:	ldr	r2, [r1, #116]	; 0x74
   11d70:	cmp	r2, r3
   11d74:	bhi	11d64 <__assert_fail@plt+0x7f4>
   11d78:	mov	r0, r4
   11d7c:	b	11ce0 <__assert_fail@plt+0x770>
   11d80:	mov	r0, r4
   11d84:	b	11ce0 <__assert_fail@plt+0x770>
   11d88:	ldr	r3, [pc, #40]	; 11db8 <__assert_fail@plt+0x848>
   11d8c:	movw	r2, #1477	; 0x5c5
   11d90:	movw	r1, #47344	; 0xb8f0
   11d94:	movt	r1, #1
   11d98:	movw	r0, #47372	; 0xb90c
   11d9c:	movt	r0, #1
   11da0:	bl	11570 <__assert_fail@plt>
   11da4:	movw	r3, #57832	; 0xe1e8
   11da8:	movt	r3, #2
   11dac:	ldr	r2, [r3, #120]	; 0x78
   11db0:	mov	r0, #0
   11db4:	b	11cfc <__assert_fail@plt+0x78c>
   11db8:	andeq	fp, r1, r4, ror r6
   11dbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11dc0:	strd	r6, [sp, #8]
   11dc4:	strd	r8, [sp, #16]
   11dc8:	strd	sl, [sp, #24]
   11dcc:	str	lr, [sp, #32]
   11dd0:	sub	sp, sp, #36	; 0x24
   11dd4:	movw	r3, #57832	; 0xe1e8
   11dd8:	movt	r3, #2
   11ddc:	ldr	r5, [r3, #92]	; 0x5c
   11de0:	ldr	r9, [r3, #16]
   11de4:	sub	r9, r9, #1
   11de8:	ldr	r2, [r3, #68]	; 0x44
   11dec:	sub	r9, r9, r2
   11df0:	add	r9, r5, r9
   11df4:	ldrb	sl, [r3, #141]	; 0x8d
   11df8:	str	sl, [sp, #24]
   11dfc:	cmp	sl, #0
   11e00:	bne	122c8 <__assert_fail@plt+0xd58>
   11e04:	mov	r3, #1
   11e08:	str	r3, [sp, #20]
   11e0c:	mvn	r8, #0
   11e10:	mov	fp, #0
   11e14:	mov	r6, r3
   11e18:	movw	r7, #57832	; 0xe1e8
   11e1c:	movt	r7, #2
   11e20:	movw	r3, #47492	; 0xb984
   11e24:	movt	r3, #1
   11e28:	str	r3, [sp, #16]
   11e2c:	add	r3, r7, #48	; 0x30
   11e30:	str	r3, [sp, #28]
   11e34:	b	11f9c <__assert_fail@plt+0xa2c>
   11e38:	mov	r6, #1
   11e3c:	b	11f98 <__assert_fail@plt+0xa28>
   11e40:	mov	fp, r4
   11e44:	mov	sl, #1
   11e48:	mov	r6, #2
   11e4c:	b	11f98 <__assert_fail@plt+0xa28>
   11e50:	mov	sl, #1
   11e54:	mov	r6, #3
   11e58:	b	11f98 <__assert_fail@plt+0xa28>
   11e5c:	mov	fp, r4
   11e60:	mov	sl, #1
   11e64:	mov	r6, #2
   11e68:	b	11f98 <__assert_fail@plt+0xa28>
   11e6c:	movw	r3, #57832	; 0xe1e8
   11e70:	movt	r3, #2
   11e74:	mov	r2, #1
   11e78:	strb	r2, [r3, #141]	; 0x8d
   11e7c:	ldr	r7, [r3, #92]	; 0x5c
   11e80:	cmp	r7, r5
   11e84:	beq	122d0 <__assert_fail@plt+0xd60>
   11e88:	mov	r3, #0
   11e8c:	strb	r3, [r5], #1
   11e90:	sub	r5, r5, r7
   11e94:	cmp	r6, #2
   11e98:	beq	11f2c <__assert_fail@plt+0x9bc>
   11e9c:	ldr	r3, [sp, #20]
   11ea0:	cmp	r3, #0
   11ea4:	beq	11edc <__assert_fail@plt+0x96c>
   11ea8:	movw	r3, #57832	; 0xe1e8
   11eac:	movt	r3, #2
   11eb0:	ldr	r0, [r3, #144]	; 0x90
   11eb4:	cmp	r0, #0
   11eb8:	beq	11edc <__assert_fail@plt+0x96c>
   11ebc:	ldrb	r2, [r0]
   11ec0:	ldrb	r3, [r7]
   11ec4:	cmp	r2, r3
   11ec8:	bne	11edc <__assert_fail@plt+0x96c>
   11ecc:	mov	r1, r7
   11ed0:	bl	111b0 <strcmp@plt>
   11ed4:	cmp	r0, #0
   11ed8:	beq	122d8 <__assert_fail@plt+0xd68>
   11edc:	movw	r3, #57832	; 0xe1e8
   11ee0:	movt	r3, #2
   11ee4:	ldr	r3, [r3, #28]
   11ee8:	cmp	r3, #0
   11eec:	bne	120e4 <__assert_fail@plt+0xb74>
   11ef0:	movw	r0, #57832	; 0xe1e8
   11ef4:	movt	r0, #2
   11ef8:	movw	r3, #57700	; 0xe164
   11efc:	movt	r3, #2
   11f00:	ldrb	r3, [r3, #4]
   11f04:	str	r3, [sp, #8]
   11f08:	mov	r3, #0
   11f0c:	str	r3, [sp, #4]
   11f10:	str	r3, [sp]
   11f14:	mov	r3, r5
   11f18:	mov	r2, r7
   11f1c:	add	r1, r0, #48	; 0x30
   11f20:	add	r0, r0, #4
   11f24:	bl	14404 <__assert_fail@plt+0x2e94>
   11f28:	b	120e4 <__assert_fail@plt+0xb74>
   11f2c:	bl	11758 <__assert_fail@plt+0x1e8>
   11f30:	mov	r2, #5
   11f34:	movw	r1, #47388	; 0xb91c
   11f38:	movt	r1, #1
   11f3c:	mov	r0, #0
   11f40:	bl	11258 <dcgettext@plt>
   11f44:	mov	r4, r0
   11f48:	cmp	fp, #34	; 0x22
   11f4c:	mov	r2, #5
   11f50:	movweq	r1, #47476	; 0xb974
   11f54:	movteq	r1, #1
   11f58:	movwne	r1, #47484	; 0xb97c
   11f5c:	movtne	r1, #1
   11f60:	mov	r0, #0
   11f64:	bl	11258 <dcgettext@plt>
   11f68:	mov	r3, r0
   11f6c:	mov	r2, r4
   11f70:	mov	r1, #0
   11f74:	mov	r0, #1
   11f78:	bl	11324 <error@plt>
   11f7c:	mov	r6, #0
   11f80:	ldr	r3, [r7, #148]	; 0x94
   11f84:	orrs	r3, r4, r3
   11f88:	beq	12274 <__assert_fail@plt+0xd04>
   11f8c:	cmp	r5, r9
   11f90:	bcs	122a0 <__assert_fail@plt+0xd30>
   11f94:	strb	r4, [r5], #1
   11f98:	mov	r8, r4
   11f9c:	ldr	r0, [r7, #100]	; 0x64
   11fa0:	bl	1154c <getc@plt>
   11fa4:	mov	r4, r0
   11fa8:	cmn	r0, #1
   11fac:	beq	11e6c <__assert_fail@plt+0x8fc>
   11fb0:	cmp	r6, #3
   11fb4:	ldrls	pc, [pc, r6, lsl #2]
   11fb8:	b	11f80 <__assert_fail@plt+0xa10>
   11fbc:	andeq	r2, r1, r8, lsr #32
   11fc0:	andeq	r1, r1, ip, asr #31
   11fc4:	andeq	r2, r1, r4, lsl #4
   11fc8:	andeq	r1, r1, ip, ror pc
   11fcc:	bics	r3, r0, #127	; 0x7f
   11fd0:	bne	11fec <__assert_fail@plt+0xa7c>
   11fd4:	bl	11390 <__ctype_b_loc@plt>
   11fd8:	ldr	r2, [r0]
   11fdc:	lsl	r3, r4, #1
   11fe0:	ldrh	r3, [r2, r3]
   11fe4:	tst	r3, #1
   11fe8:	bne	11f98 <__assert_fail@plt+0xa28>
   11fec:	sub	r3, r4, #10
   11ff0:	cmp	r3, #3
   11ff4:	bls	11f98 <__assert_fail@plt+0xa28>
   11ff8:	ldr	r3, [r7, #28]
   11ffc:	cmp	r3, #0
   12000:	beq	12140 <__assert_fail@plt+0xbd0>
   12004:	cmp	r4, #39	; 0x27
   12008:	beq	11e40 <__assert_fail@plt+0x8d0>
   1200c:	cmp	r4, #92	; 0x5c
   12010:	beq	11e50 <__assert_fail@plt+0x8e0>
   12014:	cmp	r4, #34	; 0x22
   12018:	beq	11e5c <__assert_fail@plt+0x8ec>
   1201c:	mov	sl, #1
   12020:	mov	r6, #0
   12024:	b	11f80 <__assert_fail@plt+0xa10>
   12028:	cmp	r0, #10
   1202c:	bne	11ff8 <__assert_fail@plt+0xa88>
   12030:	bics	r3, r8, #127	; 0x7f
   12034:	bne	12050 <__assert_fail@plt+0xae0>
   12038:	bl	11390 <__ctype_b_loc@plt>
   1203c:	ldr	r3, [r0]
   12040:	lsl	r8, r8, #1
   12044:	ldrh	r3, [r3, r8]
   12048:	tst	r3, #1
   1204c:	bne	1205c <__assert_fail@plt+0xaec>
   12050:	ldr	r3, [r7, #108]	; 0x6c
   12054:	add	r3, r3, #1
   12058:	str	r3, [r7, #108]	; 0x6c
   1205c:	ldr	r6, [r7, #92]	; 0x5c
   12060:	cmp	r6, r5
   12064:	orrne	sl, sl, #1
   12068:	cmp	sl, #0
   1206c:	beq	11e38 <__assert_fail@plt+0x8c8>
   12070:	mov	r3, #0
   12074:	strb	r3, [r5], #1
   12078:	sub	r5, r5, r6
   1207c:	movw	r3, #57832	; 0xe1e8
   12080:	movt	r3, #2
   12084:	ldr	r0, [r3, #144]	; 0x90
   12088:	cmp	r0, #0
   1208c:	beq	120d0 <__assert_fail@plt+0xb60>
   12090:	ldrb	r2, [r0]
   12094:	ldrb	r3, [r6]
   12098:	cmp	r2, r3
   1209c:	bne	120d0 <__assert_fail@plt+0xb60>
   120a0:	mov	r1, r6
   120a4:	bl	111b0 <strcmp@plt>
   120a8:	cmp	r0, #0
   120ac:	bne	120d0 <__assert_fail@plt+0xb60>
   120b0:	movw	r3, #57832	; 0xe1e8
   120b4:	movt	r3, #2
   120b8:	mov	r2, #1
   120bc:	strb	r2, [r3, #141]	; 0x8d
   120c0:	ldr	r3, [sp, #20]
   120c4:	cmp	r3, #0
   120c8:	mvnne	r5, #0
   120cc:	b	120e4 <__assert_fail@plt+0xb74>
   120d0:	movw	r3, #57832	; 0xe1e8
   120d4:	movt	r3, #2
   120d8:	ldr	r3, [r3, #28]
   120dc:	cmp	r3, #0
   120e0:	beq	12104 <__assert_fail@plt+0xb94>
   120e4:	mov	r0, r5
   120e8:	add	sp, sp, #36	; 0x24
   120ec:	ldrd	r4, [sp]
   120f0:	ldrd	r6, [sp, #8]
   120f4:	ldrd	r8, [sp, #16]
   120f8:	ldrd	sl, [sp, #24]
   120fc:	add	sp, sp, #32
   12100:	pop	{pc}		; (ldr pc, [sp], #4)
   12104:	movw	r0, #57832	; 0xe1e8
   12108:	movt	r0, #2
   1210c:	movw	r3, #57700	; 0xe164
   12110:	movt	r3, #2
   12114:	ldrb	r3, [r3, #4]
   12118:	str	r3, [sp, #8]
   1211c:	mov	r3, #0
   12120:	str	r3, [sp, #4]
   12124:	str	r3, [sp]
   12128:	mov	r3, r5
   1212c:	mov	r2, r6
   12130:	add	r1, r0, #48	; 0x30
   12134:	add	r0, r0, #4
   12138:	bl	14404 <__assert_fail@plt+0x2e94>
   1213c:	b	120e4 <__assert_fail@plt+0xb74>
   12140:	bics	r3, r4, #127	; 0x7f
   12144:	bne	12004 <__assert_fail@plt+0xa94>
   12148:	bl	11390 <__ctype_b_loc@plt>
   1214c:	ldr	r2, [r0]
   12150:	lsl	r3, r4, #1
   12154:	ldrh	r3, [r2, r3]
   12158:	tst	r3, #1
   1215c:	beq	12004 <__assert_fail@plt+0xa94>
   12160:	mov	r3, #0
   12164:	strb	r3, [r5], #1
   12168:	ldr	r6, [r7, #92]	; 0x5c
   1216c:	sub	r5, r5, r6
   12170:	ldr	r0, [r7, #144]	; 0x90
   12174:	cmp	r0, r3
   12178:	beq	121bc <__assert_fail@plt+0xc4c>
   1217c:	ldrb	r2, [r0]
   12180:	ldrb	r3, [r6]
   12184:	cmp	r2, r3
   12188:	bne	121bc <__assert_fail@plt+0xc4c>
   1218c:	mov	r1, r6
   12190:	bl	111b0 <strcmp@plt>
   12194:	cmp	r0, #0
   12198:	bne	121bc <__assert_fail@plt+0xc4c>
   1219c:	movw	r3, #57832	; 0xe1e8
   121a0:	movt	r3, #2
   121a4:	mov	r2, #1
   121a8:	strb	r2, [r3, #141]	; 0x8d
   121ac:	ldr	r3, [sp, #20]
   121b0:	cmp	r3, #0
   121b4:	mvnne	r5, #0
   121b8:	b	120e4 <__assert_fail@plt+0xb74>
   121bc:	movw	r3, #57700	; 0xe164
   121c0:	movt	r3, #2
   121c4:	ldrb	r3, [r3, #4]
   121c8:	str	r3, [sp, #8]
   121cc:	mov	r3, #0
   121d0:	str	r3, [sp, #4]
   121d4:	str	r3, [sp]
   121d8:	mov	r3, r5
   121dc:	mov	r2, r6
   121e0:	ldr	r1, [sp, #28]
   121e4:	add	r0, r7, #4
   121e8:	bl	14404 <__assert_fail@plt+0x2e94>
   121ec:	ldr	r5, [r7, #92]	; 0x5c
   121f0:	ldr	r3, [sp, #24]
   121f4:	str	r3, [sp, #20]
   121f8:	mov	sl, #1
   121fc:	mov	r6, sl
   12200:	b	11f98 <__assert_fail@plt+0xa28>
   12204:	cmp	r0, #10
   12208:	beq	12224 <__assert_fail@plt+0xcb4>
   1220c:	cmp	fp, r0
   12210:	bne	11f80 <__assert_fail@plt+0xa10>
   12214:	mov	fp, r4
   12218:	mov	sl, #1
   1221c:	mov	r6, #0
   12220:	b	11f98 <__assert_fail@plt+0xa28>
   12224:	bl	11758 <__assert_fail@plt+0x1e8>
   12228:	mov	r2, #5
   1222c:	movw	r1, #47388	; 0xb91c
   12230:	movt	r1, #1
   12234:	mov	r0, #0
   12238:	bl	11258 <dcgettext@plt>
   1223c:	mov	r4, r0
   12240:	cmp	fp, #34	; 0x22
   12244:	mov	r2, #5
   12248:	movweq	r1, #47476	; 0xb974
   1224c:	movteq	r1, #1
   12250:	movwne	r1, #47484	; 0xb97c
   12254:	movtne	r1, #1
   12258:	mov	r0, #0
   1225c:	bl	11258 <dcgettext@plt>
   12260:	mov	r3, r0
   12264:	mov	r2, r4
   12268:	mov	r1, #0
   1226c:	mov	r0, #1
   12270:	bl	11324 <error@plt>
   12274:	mov	r2, #5
   12278:	ldr	r1, [sp, #16]
   1227c:	mov	r0, #0
   12280:	bl	11258 <dcgettext@plt>
   12284:	mov	r2, r0
   12288:	mov	r1, #0
   1228c:	mov	r0, r1
   12290:	bl	11324 <error@plt>
   12294:	mov	r3, #1
   12298:	str	r3, [r7, #148]	; 0x94
   1229c:	b	11f8c <__assert_fail@plt+0xa1c>
   122a0:	bl	11758 <__assert_fail@plt+0x1e8>
   122a4:	mov	r2, #5
   122a8:	movw	r1, #47148	; 0xb82c
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	bl	11258 <dcgettext@plt>
   122b8:	mov	r2, r0
   122bc:	mov	r1, #0
   122c0:	mov	r0, #1
   122c4:	bl	11324 <error@plt>
   122c8:	mvn	r5, #0
   122cc:	b	120e4 <__assert_fail@plt+0xb74>
   122d0:	mov	r5, r0
   122d4:	b	120e4 <__assert_fail@plt+0xb74>
   122d8:	mov	r5, r4
   122dc:	b	120e4 <__assert_fail@plt+0xb74>
   122e0:	str	r4, [sp, #-8]!
   122e4:	str	lr, [sp, #4]
   122e8:	subs	r4, r0, #0
   122ec:	beq	12330 <__assert_fail@plt+0xdc0>
   122f0:	movw	r3, #57808	; 0xe1d0
   122f4:	movt	r3, #2
   122f8:	ldr	r5, [r3]
   122fc:	mov	r2, #5
   12300:	movw	r1, #47632	; 0xba10
   12304:	movt	r1, #1
   12308:	mov	r0, #0
   1230c:	bl	11258 <dcgettext@plt>
   12310:	movw	r3, #58032	; 0xe2b0
   12314:	movt	r3, #2
   12318:	ldr	r2, [r3]
   1231c:	mov	r1, r0
   12320:	mov	r0, r5
   12324:	bl	113e4 <fprintf@plt>
   12328:	mov	r0, r4
   1232c:	bl	113a8 <exit@plt>
   12330:	movw	r4, #57820	; 0xe1dc
   12334:	movt	r4, #2
   12338:	ldr	r6, [r4]
   1233c:	mov	r2, #5
   12340:	movw	r1, #47672	; 0xba38
   12344:	movt	r1, #1
   12348:	mov	r0, #0
   1234c:	bl	11258 <dcgettext@plt>
   12350:	movw	r5, #58032	; 0xe2b0
   12354:	movt	r5, #2
   12358:	ldr	r2, [r5]
   1235c:	mov	r1, r0
   12360:	mov	r0, r6
   12364:	bl	113e4 <fprintf@plt>
   12368:	mov	r2, #5
   1236c:	movw	r1, #47724	; 0xba6c
   12370:	movt	r1, #1
   12374:	mov	r0, #0
   12378:	bl	11258 <dcgettext@plt>
   1237c:	ldr	r1, [r4]
   12380:	bl	11528 <fputs@plt>
   12384:	mov	r2, #5
   12388:	movw	r1, #47804	; 0xbabc
   1238c:	movt	r1, #1
   12390:	mov	r0, #0
   12394:	bl	11258 <dcgettext@plt>
   12398:	ldr	r1, [r4]
   1239c:	bl	11528 <fputs@plt>
   123a0:	mov	r2, #5
   123a4:	movw	r1, #47924	; 0xbb34
   123a8:	movt	r1, #1
   123ac:	mov	r0, #0
   123b0:	bl	11258 <dcgettext@plt>
   123b4:	ldr	r1, [r4]
   123b8:	bl	11528 <fputs@plt>
   123bc:	mov	r2, #5
   123c0:	movw	r1, #48136	; 0xbc08
   123c4:	movt	r1, #1
   123c8:	mov	r0, #0
   123cc:	bl	11258 <dcgettext@plt>
   123d0:	ldr	r1, [r4]
   123d4:	bl	11528 <fputs@plt>
   123d8:	mov	r2, #5
   123dc:	movw	r1, #48216	; 0xbc58
   123e0:	movt	r1, #1
   123e4:	mov	r0, #0
   123e8:	bl	11258 <dcgettext@plt>
   123ec:	ldr	r1, [r4]
   123f0:	bl	11528 <fputs@plt>
   123f4:	mov	r2, #5
   123f8:	movw	r1, #48452	; 0xbd44
   123fc:	movt	r1, #1
   12400:	mov	r0, #0
   12404:	bl	11258 <dcgettext@plt>
   12408:	ldr	r1, [r4]
   1240c:	bl	11528 <fputs@plt>
   12410:	mov	r2, #5
   12414:	movw	r1, #48680	; 0xbe28
   12418:	movt	r1, #1
   1241c:	mov	r0, #0
   12420:	bl	11258 <dcgettext@plt>
   12424:	ldr	r1, [r4]
   12428:	bl	11528 <fputs@plt>
   1242c:	mov	r2, #5
   12430:	movw	r1, #48832	; 0xbec0
   12434:	movt	r1, #1
   12438:	mov	r0, #0
   1243c:	bl	11258 <dcgettext@plt>
   12440:	ldr	r1, [r4]
   12444:	bl	11528 <fputs@plt>
   12448:	mov	r2, #5
   1244c:	movw	r1, #48884	; 0xbef4
   12450:	movt	r1, #1
   12454:	mov	r0, #0
   12458:	bl	11258 <dcgettext@plt>
   1245c:	ldr	r1, [r4]
   12460:	bl	11528 <fputs@plt>
   12464:	mov	r2, #5
   12468:	movw	r1, #49096	; 0xbfc8
   1246c:	movt	r1, #1
   12470:	mov	r0, #0
   12474:	bl	11258 <dcgettext@plt>
   12478:	ldr	r1, [r4]
   1247c:	bl	11528 <fputs@plt>
   12480:	mov	r2, #5
   12484:	movw	r1, #49224	; 0xc048
   12488:	movt	r1, #1
   1248c:	mov	r0, #0
   12490:	bl	11258 <dcgettext@plt>
   12494:	ldr	r1, [r4]
   12498:	bl	11528 <fputs@plt>
   1249c:	mov	r2, #5
   124a0:	movw	r1, #49384	; 0xc0e8
   124a4:	movt	r1, #1
   124a8:	mov	r0, #0
   124ac:	bl	11258 <dcgettext@plt>
   124b0:	ldr	r1, [r4]
   124b4:	bl	11528 <fputs@plt>
   124b8:	mov	r2, #5
   124bc:	movw	r1, #49464	; 0xc138
   124c0:	movt	r1, #1
   124c4:	mov	r0, #0
   124c8:	bl	11258 <dcgettext@plt>
   124cc:	ldr	r1, [r4]
   124d0:	bl	11528 <fputs@plt>
   124d4:	mov	r2, #5
   124d8:	movw	r1, #49680	; 0xc210
   124dc:	movt	r1, #1
   124e0:	mov	r0, #0
   124e4:	bl	11258 <dcgettext@plt>
   124e8:	ldr	r1, [r4]
   124ec:	bl	11528 <fputs@plt>
   124f0:	mov	r2, #5
   124f4:	movw	r1, #49756	; 0xc25c
   124f8:	movt	r1, #1
   124fc:	mov	r0, #0
   12500:	bl	11258 <dcgettext@plt>
   12504:	ldr	r1, [r4]
   12508:	bl	11528 <fputs@plt>
   1250c:	mov	r2, #5
   12510:	movw	r1, #49820	; 0xc29c
   12514:	movt	r1, #1
   12518:	mov	r0, #0
   1251c:	bl	11258 <dcgettext@plt>
   12520:	ldr	r1, [r4]
   12524:	bl	11528 <fputs@plt>
   12528:	mov	r2, #5
   1252c:	movw	r1, #49900	; 0xc2ec
   12530:	movt	r1, #1
   12534:	mov	r0, #0
   12538:	bl	11258 <dcgettext@plt>
   1253c:	ldr	r1, [r4]
   12540:	bl	11528 <fputs@plt>
   12544:	mov	r2, #5
   12548:	movw	r1, #50116	; 0xc3c4
   1254c:	movt	r1, #1
   12550:	mov	r0, #0
   12554:	bl	11258 <dcgettext@plt>
   12558:	ldr	r1, [r4]
   1255c:	bl	11528 <fputs@plt>
   12560:	mov	r2, #5
   12564:	movw	r1, #50192	; 0xc410
   12568:	movt	r1, #1
   1256c:	mov	r0, #0
   12570:	bl	11258 <dcgettext@plt>
   12574:	ldr	r1, [r4]
   12578:	bl	11528 <fputs@plt>
   1257c:	mov	r2, #5
   12580:	movw	r1, #50260	; 0xc454
   12584:	movt	r1, #1
   12588:	mov	r0, #0
   1258c:	bl	11258 <dcgettext@plt>
   12590:	ldr	r1, [r4]
   12594:	bl	11528 <fputs@plt>
   12598:	mov	r2, #5
   1259c:	movw	r1, #50332	; 0xc49c
   125a0:	movt	r1, #1
   125a4:	mov	r0, #0
   125a8:	bl	11258 <dcgettext@plt>
   125ac:	ldr	r1, [r4]
   125b0:	bl	11528 <fputs@plt>
   125b4:	mov	r2, #5
   125b8:	movw	r1, #50404	; 0xc4e4
   125bc:	movt	r1, #1
   125c0:	mov	r0, #0
   125c4:	bl	11258 <dcgettext@plt>
   125c8:	ldr	r1, [r4]
   125cc:	bl	11528 <fputs@plt>
   125d0:	mov	r2, #5
   125d4:	movw	r1, #50464	; 0xc520
   125d8:	movt	r1, #1
   125dc:	mov	r0, #0
   125e0:	bl	11258 <dcgettext@plt>
   125e4:	ldr	r1, [r4]
   125e8:	bl	11528 <fputs@plt>
   125ec:	ldr	r1, [r5]
   125f0:	ldr	r0, [r4]
   125f4:	bl	15644 <__assert_fail@plt+0x40d4>
   125f8:	mov	r0, #0
   125fc:	bl	113a8 <exit@plt>
   12600:	strd	r4, [sp, #-20]!	; 0xffffffec
   12604:	strd	r6, [sp, #8]
   12608:	str	lr, [sp, #16]
   1260c:	sub	sp, sp, #20
   12610:	mov	r6, r0
   12614:	mov	r7, r1
   12618:	mov	r5, r2
   1261c:	mov	r4, r3
   12620:	mov	r2, #10
   12624:	add	r1, sp, #12
   12628:	bl	111bc <strtol@plt>
   1262c:	ldr	r3, [sp, #12]
   12630:	cmp	r3, r6
   12634:	beq	1266c <__assert_fail@plt+0x10fc>
   12638:	ldrb	r3, [r3]
   1263c:	cmp	r3, #0
   12640:	bne	1266c <__assert_fail@plt+0x10fc>
   12644:	cmp	r0, r5
   12648:	blt	126b4 <__assert_fail@plt+0x1144>
   1264c:	cmp	r4, #0
   12650:	cmpge	r0, r4
   12654:	bgt	12710 <__assert_fail@plt+0x11a0>
   12658:	add	sp, sp, #20
   1265c:	ldrd	r4, [sp]
   12660:	ldrd	r6, [sp, #8]
   12664:	add	sp, sp, #16
   12668:	pop	{pc}		; (ldr pc, [sp], #4)
   1266c:	movw	r3, #57808	; 0xe1d0
   12670:	movt	r3, #2
   12674:	ldr	r4, [r3]
   12678:	mov	r2, #5
   1267c:	movw	r1, #50536	; 0xc568
   12680:	movt	r1, #1
   12684:	mov	r0, #0
   12688:	bl	11258 <dcgettext@plt>
   1268c:	movw	r2, #58032	; 0xe2b0
   12690:	movt	r2, #2
   12694:	str	r7, [sp]
   12698:	mov	r3, r6
   1269c:	ldr	r2, [r2]
   126a0:	mov	r1, r0
   126a4:	mov	r0, r4
   126a8:	bl	113e4 <fprintf@plt>
   126ac:	mov	r0, #1
   126b0:	bl	122e0 <__assert_fail@plt+0xd70>
   126b4:	movw	r3, #57808	; 0xe1d0
   126b8:	movt	r3, #2
   126bc:	ldr	r4, [r3]
   126c0:	mov	r2, #5
   126c4:	movw	r1, #50576	; 0xc590
   126c8:	movt	r1, #1
   126cc:	mov	r0, #0
   126d0:	bl	11258 <dcgettext@plt>
   126d4:	movw	r2, #58032	; 0xe2b0
   126d8:	movt	r2, #2
   126dc:	str	r5, [sp, #4]
   126e0:	str	r7, [sp]
   126e4:	mov	r3, r6
   126e8:	ldr	r2, [r2]
   126ec:	mov	r1, r0
   126f0:	mov	r0, r4
   126f4:	bl	113e4 <fprintf@plt>
   126f8:	ldr	r3, [sp, #40]	; 0x28
   126fc:	cmp	r3, #0
   12700:	moveq	r0, r5
   12704:	beq	12658 <__assert_fail@plt+0x10e8>
   12708:	mov	r0, #1
   1270c:	bl	122e0 <__assert_fail@plt+0xd70>
   12710:	movw	r3, #57808	; 0xe1d0
   12714:	movt	r3, #2
   12718:	ldr	r5, [r3]
   1271c:	mov	r2, #5
   12720:	movw	r1, #50624	; 0xc5c0
   12724:	movt	r1, #1
   12728:	mov	r0, #0
   1272c:	bl	11258 <dcgettext@plt>
   12730:	movw	r2, #58032	; 0xe2b0
   12734:	movt	r2, #2
   12738:	str	r4, [sp, #4]
   1273c:	str	r7, [sp]
   12740:	mov	r3, r6
   12744:	ldr	r2, [r2]
   12748:	mov	r1, r0
   1274c:	mov	r0, r5
   12750:	bl	113e4 <fprintf@plt>
   12754:	ldr	r3, [sp, #40]	; 0x28
   12758:	cmp	r3, #0
   1275c:	moveq	r0, r4
   12760:	beq	12658 <__assert_fail@plt+0x10e8>
   12764:	mov	r0, #1
   12768:	bl	122e0 <__assert_fail@plt+0xd70>
   1276c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12770:	strd	r6, [sp, #8]
   12774:	str	r8, [sp, #16]
   12778:	str	lr, [sp, #20]
   1277c:	mov	r1, #0
   12780:	bl	15234 <__assert_fail@plt+0x3cc4>
   12784:	subs	r5, r0, #0
   12788:	movlt	r4, #0
   1278c:	blt	127a8 <__assert_fail@plt+0x1238>
   12790:	movw	r1, #52164	; 0xcbc4
   12794:	movt	r1, #1
   12798:	mov	r0, r5
   1279c:	bl	11198 <fdopen@plt>
   127a0:	subs	r4, r0, #0
   127a4:	beq	127c0 <__assert_fail@plt+0x1250>
   127a8:	mov	r0, r4
   127ac:	ldrd	r4, [sp]
   127b0:	ldrd	r6, [sp, #8]
   127b4:	ldr	r8, [sp, #16]
   127b8:	add	sp, sp, #20
   127bc:	pop	{pc}		; (ldr pc, [sp], #4)
   127c0:	bl	113f0 <__errno_location@plt>
   127c4:	mov	r6, r0
   127c8:	ldr	r7, [r0]
   127cc:	mov	r0, r5
   127d0:	bl	11558 <close@plt>
   127d4:	str	r7, [r6]
   127d8:	b	127a8 <__assert_fail@plt+0x1238>
   127dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   127e0:	strd	r6, [sp, #8]
   127e4:	strd	r8, [sp, #16]
   127e8:	str	sl, [sp, #24]
   127ec:	str	lr, [sp, #28]
   127f0:	mov	r9, r0
   127f4:	movw	r3, #57832	; 0xe1e8
   127f8:	movt	r3, #2
   127fc:	ldr	r3, [r3, #48]	; 0x30
   12800:	cmp	r3, #1
   12804:	beq	128c4 <__assert_fail@plt+0x1354>
   12808:	movw	r3, #57808	; 0xe1d0
   1280c:	movt	r3, #2
   12810:	ldr	sl, [r3]
   12814:	mov	r5, #0
   12818:	movw	r4, #50532	; 0xc564
   1281c:	movt	r4, #1
   12820:	movw	r6, #57832	; 0xe1e8
   12824:	movt	r6, #2
   12828:	movw	r7, #50676	; 0xc5f4
   1282c:	movt	r7, #1
   12830:	mov	r8, r3
   12834:	ldr	r3, [r6, #52]	; 0x34
   12838:	ldr	r2, [r3, r5, lsl #2]
   1283c:	mov	r1, #3
   12840:	mov	r0, #0
   12844:	bl	195bc <__assert_fail@plt+0x804c>
   12848:	mov	r3, r0
   1284c:	mov	r2, r4
   12850:	mov	r1, r7
   12854:	mov	r0, sl
   12858:	bl	113e4 <fprintf@plt>
   1285c:	cmp	r0, #0
   12860:	blt	12898 <__assert_fail@plt+0x1328>
   12864:	add	r5, r5, #1
   12868:	ldr	r3, [r6, #48]	; 0x30
   1286c:	sub	r3, r3, #1
   12870:	cmp	r3, r5
   12874:	bls	128c4 <__assert_fail@plt+0x1354>
   12878:	ldr	sl, [r8]
   1287c:	movw	r3, #50532	; 0xc564
   12880:	movt	r3, #1
   12884:	movw	r4, #50672	; 0xc5f0
   12888:	movt	r4, #1
   1288c:	cmp	r5, #0
   12890:	moveq	r4, r3
   12894:	b	12834 <__assert_fail@plt+0x12c4>
   12898:	bl	113f0 <__errno_location@plt>
   1289c:	ldr	r4, [r0]
   128a0:	mov	r2, #5
   128a4:	movw	r1, #50684	; 0xc5fc
   128a8:	movt	r1, #1
   128ac:	mov	r0, #0
   128b0:	bl	11258 <dcgettext@plt>
   128b4:	mov	r2, r0
   128b8:	mov	r1, r4
   128bc:	mov	r0, #1
   128c0:	bl	11324 <error@plt>
   128c4:	cmp	r9, #0
   128c8:	beq	12a20 <__assert_fail@plt+0x14b0>
   128cc:	movw	r3, #57832	; 0xe1e8
   128d0:	movt	r3, #2
   128d4:	ldr	r3, [r3, #152]	; 0x98
   128d8:	cmp	r3, #0
   128dc:	beq	1297c <__assert_fail@plt+0x140c>
   128e0:	movw	r4, #57808	; 0xe1d0
   128e4:	movt	r4, #2
   128e8:	ldr	r3, [r4]
   128ec:	mov	r2, #4
   128f0:	mov	r1, #1
   128f4:	movw	r0, #50760	; 0xc648
   128f8:	movt	r0, #1
   128fc:	bl	112d0 <fwrite@plt>
   12900:	ldr	r0, [r4]
   12904:	bl	1ad4c <__assert_fail@plt+0x97dc>
   12908:	cmp	r0, #0
   1290c:	bne	129c8 <__assert_fail@plt+0x1458>
   12910:	movw	r3, #57832	; 0xe1e8
   12914:	movt	r3, #2
   12918:	ldr	r0, [r3, #152]	; 0x98
   1291c:	bl	1154c <getc@plt>
   12920:	mov	r4, r0
   12924:	cmp	r0, #10
   12928:	cmnne	r0, #1
   1292c:	beq	1294c <__assert_fail@plt+0x13dc>
   12930:	movw	r5, #57832	; 0xe1e8
   12934:	movt	r5, #2
   12938:	ldr	r0, [r5, #152]	; 0x98
   1293c:	bl	1154c <getc@plt>
   12940:	cmp	r0, #10
   12944:	cmnne	r0, #1
   12948:	bne	12938 <__assert_fail@plt+0x13c8>
   1294c:	cmn	r0, #1
   12950:	beq	129f4 <__assert_fail@plt+0x1484>
   12954:	bic	r0, r4, #32
   12958:	cmp	r0, #89	; 0x59
   1295c:	movne	r0, #0
   12960:	moveq	r0, #1
   12964:	ldrd	r4, [sp]
   12968:	ldrd	r6, [sp, #8]
   1296c:	ldrd	r8, [sp, #16]
   12970:	ldr	sl, [sp, #24]
   12974:	add	sp, sp, #28
   12978:	pop	{pc}		; (ldr pc, [sp], #4)
   1297c:	movw	r0, #50712	; 0xc618
   12980:	movt	r0, #1
   12984:	bl	1276c <__assert_fail@plt+0x11fc>
   12988:	movw	r3, #57832	; 0xe1e8
   1298c:	movt	r3, #2
   12990:	str	r0, [r3, #152]	; 0x98
   12994:	cmp	r0, #0
   12998:	bne	128e0 <__assert_fail@plt+0x1370>
   1299c:	bl	113f0 <__errno_location@plt>
   129a0:	ldr	r4, [r0]
   129a4:	mov	r2, #5
   129a8:	movw	r1, #50724	; 0xc624
   129ac:	movt	r1, #1
   129b0:	mov	r0, #0
   129b4:	bl	11258 <dcgettext@plt>
   129b8:	mov	r2, r0
   129bc:	mov	r1, r4
   129c0:	mov	r0, #1
   129c4:	bl	11324 <error@plt>
   129c8:	bl	113f0 <__errno_location@plt>
   129cc:	ldr	r4, [r0]
   129d0:	mov	r2, #5
   129d4:	movw	r1, #50684	; 0xc5fc
   129d8:	movt	r1, #1
   129dc:	mov	r0, #0
   129e0:	bl	11258 <dcgettext@plt>
   129e4:	mov	r2, r0
   129e8:	mov	r1, r4
   129ec:	mov	r0, #1
   129f0:	bl	11324 <error@plt>
   129f4:	bl	113f0 <__errno_location@plt>
   129f8:	ldr	r4, [r0]
   129fc:	mov	r2, #5
   12a00:	movw	r1, #50768	; 0xc650
   12a04:	movt	r1, #1
   12a08:	mov	r0, #0
   12a0c:	bl	11258 <dcgettext@plt>
   12a10:	mov	r2, r0
   12a14:	mov	r1, r4
   12a18:	mov	r0, #1
   12a1c:	bl	11324 <error@plt>
   12a20:	movw	r3, #57808	; 0xe1d0
   12a24:	movt	r3, #2
   12a28:	ldr	r1, [r3]
   12a2c:	mov	r0, #10
   12a30:	bl	114ec <putc@plt>
   12a34:	mov	r0, r9
   12a38:	b	12964 <__assert_fail@plt+0x13f4>
   12a3c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12a40:	strd	r6, [sp, #8]
   12a44:	strd	r8, [sp, #16]
   12a48:	str	lr, [sp, #24]
   12a4c:	sub	sp, sp, #36	; 0x24
   12a50:	mov	r7, r3
   12a54:	movw	r3, #57700	; 0xe164
   12a58:	movt	r3, #2
   12a5c:	ldr	r3, [r3]
   12a60:	cmp	r3, #0
   12a64:	beq	12ab8 <__assert_fail@plt+0x1548>
   12a68:	movw	r3, #57700	; 0xe164
   12a6c:	movt	r3, #2
   12a70:	ldr	r2, [r3]
   12a74:	movw	r3, #57832	; 0xe1e8
   12a78:	movt	r3, #2
   12a7c:	ldr	r3, [r3, #112]	; 0x70
   12a80:	cmp	r3, r2
   12a84:	bcc	12ab8 <__assert_fail@plt+0x1548>
   12a88:	mov	r6, #1
   12a8c:	movw	r5, #57700	; 0xe164
   12a90:	movt	r5, #2
   12a94:	movw	r4, #57832	; 0xe1e8
   12a98:	movt	r4, #2
   12a9c:	mov	r1, r6
   12aa0:	mov	r0, #0
   12aa4:	bl	1196c <__assert_fail@plt+0x3fc>
   12aa8:	ldr	r3, [r5]
   12aac:	ldr	r2, [r4, #112]	; 0x70
   12ab0:	cmp	r2, r3
   12ab4:	bcs	12a9c <__assert_fail@plt+0x152c>
   12ab8:	movw	r3, #57832	; 0xe1e8
   12abc:	movt	r3, #2
   12ac0:	ldrb	r3, [r3, #156]	; 0x9c
   12ac4:	cmp	r3, #0
   12ac8:	bne	12aec <__assert_fail@plt+0x157c>
   12acc:	movw	r3, #57832	; 0xe1e8
   12ad0:	movt	r3, #2
   12ad4:	ldrb	r3, [r3, #157]	; 0x9d
   12ad8:	cmp	r3, #0
   12adc:	beq	12b10 <__assert_fail@plt+0x15a0>
   12ae0:	mov	r0, #0
   12ae4:	bl	127dc <__assert_fail@plt+0x126c>
   12ae8:	b	12b10 <__assert_fail@plt+0x15a0>
   12aec:	mov	r0, #1
   12af0:	bl	127dc <__assert_fail@plt+0x126c>
   12af4:	cmp	r0, #0
   12af8:	beq	12f74 <__assert_fail@plt+0x1a04>
   12afc:	movw	r3, #57832	; 0xe1e8
   12b00:	movt	r3, #2
   12b04:	ldrb	r3, [r3, #156]	; 0x9c
   12b08:	cmp	r3, #0
   12b0c:	beq	12acc <__assert_fail@plt+0x155c>
   12b10:	mov	r1, #0
   12b14:	mov	r0, r1
   12b18:	bl	1196c <__assert_fail@plt+0x3fc>
   12b1c:	add	r0, sp, #24
   12b20:	bl	19a8c <__assert_fail@plt+0x851c>
   12b24:	subs	r9, r0, #0
   12b28:	bne	12b50 <__assert_fail@plt+0x15e0>
   12b2c:	mov	r2, #1
   12b30:	mov	r1, #2
   12b34:	ldr	r0, [sp, #28]
   12b38:	bl	1aae0 <__assert_fail@plt+0x9570>
   12b3c:	movw	r5, #57832	; 0xe1e8
   12b40:	movt	r5, #2
   12b44:	mov	r8, #1
   12b48:	mov	r6, #0
   12b4c:	b	12b88 <__assert_fail@plt+0x1618>
   12b50:	bl	113f0 <__errno_location@plt>
   12b54:	ldr	r4, [r0]
   12b58:	mov	r2, #5
   12b5c:	movw	r1, #50808	; 0xc678
   12b60:	movt	r1, #1
   12b64:	mov	r0, #0
   12b68:	bl	11258 <dcgettext@plt>
   12b6c:	mov	r2, r0
   12b70:	mov	r1, r4
   12b74:	mov	r0, #1
   12b78:	bl	11324 <error@plt>
   12b7c:	mov	r1, r8
   12b80:	mov	r0, r6
   12b84:	bl	1196c <__assert_fail@plt+0x3fc>
   12b88:	bl	114a4 <fork@plt>
   12b8c:	subs	r4, r0, #0
   12b90:	bge	12bb0 <__assert_fail@plt+0x1640>
   12b94:	bl	113f0 <__errno_location@plt>
   12b98:	ldr	r3, [r0]
   12b9c:	cmp	r3, #11
   12ba0:	bne	12bb0 <__assert_fail@plt+0x1640>
   12ba4:	ldr	r3, [r5, #112]	; 0x70
   12ba8:	cmp	r3, #0
   12bac:	bne	12b7c <__assert_fail@plt+0x160c>
   12bb0:	cmn	r4, #1
   12bb4:	beq	12c24 <__assert_fail@plt+0x16b4>
   12bb8:	cmp	r4, #0
   12bbc:	beq	12c50 <__assert_fail@plt+0x16e0>
   12bc0:	ldr	r0, [sp, #28]
   12bc4:	bl	11558 <close@plt>
   12bc8:	mov	r2, #4
   12bcc:	add	r1, sp, #20
   12bd0:	ldr	r0, [sp, #24]
   12bd4:	bl	19958 <__assert_fail@plt+0x83e8>
   12bd8:	mov	r5, r0
   12bdc:	cmp	r0, #4
   12be0:	beq	12f2c <__assert_fail@plt+0x19bc>
   12be4:	cmn	r0, #1
   12be8:	beq	12ed0 <__assert_fail@plt+0x1960>
   12bec:	cmp	r0, #0
   12bf0:	beq	12f68 <__assert_fail@plt+0x19f8>
   12bf4:	bl	113f0 <__errno_location@plt>
   12bf8:	ldr	r4, [r0]
   12bfc:	mov	r2, #5
   12c00:	movw	r1, #51048	; 0xc768
   12c04:	movt	r1, #1
   12c08:	mov	r0, #0
   12c0c:	bl	11258 <dcgettext@plt>
   12c10:	mov	r3, r5
   12c14:	mov	r2, r0
   12c18:	mov	r1, r4
   12c1c:	mov	r0, #1
   12c20:	bl	11324 <error@plt>
   12c24:	bl	113f0 <__errno_location@plt>
   12c28:	ldr	r4, [r0]
   12c2c:	mov	r2, #5
   12c30:	movw	r1, #50844	; 0xc69c
   12c34:	movt	r1, #1
   12c38:	mov	r0, #0
   12c3c:	bl	11258 <dcgettext@plt>
   12c40:	mov	r2, r0
   12c44:	mov	r1, r4
   12c48:	mov	r0, #1
   12c4c:	bl	11324 <error@plt>
   12c50:	ldr	r0, [sp, #24]
   12c54:	bl	11558 <close@plt>
   12c58:	movw	r3, #57832	; 0xe1e8
   12c5c:	movt	r3, #2
   12c60:	mov	r2, #0
   12c64:	str	r2, [r3, #124]	; 0x7c
   12c68:	bl	15358 <__assert_fail@plt+0x3de8>
   12c6c:	cmp	r0, #0
   12c70:	bne	12cf4 <__assert_fail@plt+0x1784>
   12c74:	mov	r0, #0
   12c78:	bl	11c88 <__assert_fail@plt+0x718>
   12c7c:	mov	r3, r0
   12c80:	movw	r2, #50856	; 0xc6a8
   12c84:	movt	r2, #1
   12c88:	mov	r1, #19
   12c8c:	mov	r0, sp
   12c90:	bl	113fc <snprintf@plt>
   12c94:	movw	r3, #57832	; 0xe1e8
   12c98:	movt	r3, #2
   12c9c:	ldr	r4, [r3, #160]	; 0xa0
   12ca0:	cmp	r4, #0
   12ca4:	beq	12cc0 <__assert_fail@plt+0x1750>
   12ca8:	mov	r2, #1
   12cac:	mov	r1, sp
   12cb0:	mov	r0, r4
   12cb4:	bl	113d8 <setenv@plt>
   12cb8:	cmp	r0, #0
   12cbc:	blt	12cfc <__assert_fail@plt+0x178c>
   12cc0:	movw	r3, #57832	; 0xe1e8
   12cc4:	movt	r3, #2
   12cc8:	ldr	r3, [r3, #164]	; 0xa4
   12ccc:	cmp	r3, #0
   12cd0:	beq	12d30 <__assert_fail@plt+0x17c0>
   12cd4:	movw	r3, #57832	; 0xe1e8
   12cd8:	movt	r3, #2
   12cdc:	ldrb	r3, [r3, #168]	; 0xa8
   12ce0:	cmp	r3, #0
   12ce4:	beq	12d94 <__assert_fail@plt+0x1824>
   12ce8:	movw	r4, #50712	; 0xc618
   12cec:	movt	r4, #1
   12cf0:	b	12d54 <__assert_fail@plt+0x17e4>
   12cf4:	bl	15380 <__assert_fail@plt+0x3e10>
   12cf8:	b	12c74 <__assert_fail@plt+0x1704>
   12cfc:	bl	113f0 <__errno_location@plt>
   12d00:	ldr	r5, [r0]
   12d04:	mov	r2, #5
   12d08:	movw	r1, #50860	; 0xc6ac
   12d0c:	movt	r1, #1
   12d10:	mov	r0, #0
   12d14:	bl	11258 <dcgettext@plt>
   12d18:	mov	r3, r4
   12d1c:	mov	r2, r0
   12d20:	mov	r1, r5
   12d24:	mov	r0, #0
   12d28:	bl	11324 <error@plt>
   12d2c:	b	12cc0 <__assert_fail@plt+0x1750>
   12d30:	movw	r3, #57832	; 0xe1e8
   12d34:	movt	r3, #2
   12d38:	ldrb	r2, [r3, #168]	; 0xa8
   12d3c:	movw	r4, #50712	; 0xc618
   12d40:	movt	r4, #1
   12d44:	movw	r3, #50796	; 0xc66c
   12d48:	movt	r3, #1
   12d4c:	cmp	r2, #0
   12d50:	moveq	r4, r3
   12d54:	mov	r0, #0
   12d58:	bl	11558 <close@plt>
   12d5c:	mov	r1, #0
   12d60:	mov	r0, r4
   12d64:	bl	15bc0 <__assert_fail@plt+0x4650>
   12d68:	subs	r5, r0, #0
   12d6c:	blt	12de0 <__assert_fail@plt+0x1870>
   12d70:	cmp	r5, #0
   12d74:	ble	12d94 <__assert_fail@plt+0x1824>
   12d78:	mov	r1, #0
   12d7c:	mov	r0, r5
   12d80:	bl	11270 <dup2@plt>
   12d84:	cmp	r0, #0
   12d88:	bne	12e58 <__assert_fail@plt+0x18e8>
   12d8c:	mov	r0, r5
   12d90:	bl	11558 <close@plt>
   12d94:	mov	r0, r7
   12d98:	bl	14dcc <__assert_fail@plt+0x385c>
   12d9c:	cmp	r0, #0
   12da0:	beq	12e84 <__assert_fail@plt+0x1914>
   12da4:	bl	113f0 <__errno_location@plt>
   12da8:	mov	r3, #7
   12dac:	str	r3, [r0]
   12db0:	bl	113f0 <__errno_location@plt>
   12db4:	mov	r4, r0
   12db8:	ldr	r3, [r0]
   12dbc:	cmp	r3, #0
   12dc0:	bne	12e94 <__assert_fail@plt+0x1924>
   12dc4:	ldr	r0, [sp, #28]
   12dc8:	bl	11558 <close@plt>
   12dcc:	ldr	r1, [r4]
   12dd0:	cmp	r1, #7
   12dd4:	moveq	r0, #126	; 0x7e
   12dd8:	bne	12ea8 <__assert_fail@plt+0x1938>
   12ddc:	bl	11210 <_exit@plt>
   12de0:	movw	r3, #57832	; 0xe1e8
   12de4:	movt	r3, #2
   12de8:	ldrb	r3, [r3, #168]	; 0xa8
   12dec:	cmp	r3, #0
   12df0:	bne	12e28 <__assert_fail@plt+0x18b8>
   12df4:	bl	113f0 <__errno_location@plt>
   12df8:	ldr	r5, [r0]
   12dfc:	mov	r2, r4
   12e00:	mov	r1, #8
   12e04:	mov	r0, #0
   12e08:	bl	195bc <__assert_fail@plt+0x804c>
   12e0c:	mov	r3, r0
   12e10:	movw	r2, #54428	; 0xd49c
   12e14:	movt	r2, #1
   12e18:	mov	r1, r5
   12e1c:	mov	r0, #0
   12e20:	bl	11324 <error@plt>
   12e24:	b	12d94 <__assert_fail@plt+0x1824>
   12e28:	bl	113f0 <__errno_location@plt>
   12e2c:	ldr	r5, [r0]
   12e30:	mov	r2, r4
   12e34:	mov	r1, #8
   12e38:	mov	r0, #0
   12e3c:	bl	195bc <__assert_fail@plt+0x804c>
   12e40:	mov	r3, r0
   12e44:	movw	r2, #54428	; 0xd49c
   12e48:	movt	r2, #1
   12e4c:	mov	r1, r5
   12e50:	mov	r0, #1
   12e54:	bl	11324 <error@plt>
   12e58:	bl	113f0 <__errno_location@plt>
   12e5c:	ldr	r4, [r0]
   12e60:	mov	r2, #5
   12e64:	movw	r1, #50900	; 0xc6d4
   12e68:	movt	r1, #1
   12e6c:	mov	r0, #0
   12e70:	bl	11258 <dcgettext@plt>
   12e74:	mov	r2, r0
   12e78:	mov	r1, r4
   12e7c:	mov	r0, #1
   12e80:	bl	11324 <error@plt>
   12e84:	mov	r1, r7
   12e88:	ldr	r0, [r7]
   12e8c:	bl	11228 <execvp@plt>
   12e90:	b	12db0 <__assert_fail@plt+0x1840>
   12e94:	mov	r2, #4
   12e98:	mov	r1, r0
   12e9c:	ldr	r0, [sp, #28]
   12ea0:	bl	1142c <write@plt>
   12ea4:	b	12dc4 <__assert_fail@plt+0x1854>
   12ea8:	ldr	r3, [r7]
   12eac:	movw	r2, #54428	; 0xd49c
   12eb0:	movt	r2, #1
   12eb4:	mov	r0, #0
   12eb8:	bl	11324 <error@plt>
   12ebc:	ldr	r3, [r4]
   12ec0:	cmp	r3, #2
   12ec4:	moveq	r0, #127	; 0x7f
   12ec8:	movne	r0, #126	; 0x7e
   12ecc:	b	12ddc <__assert_fail@plt+0x186c>
   12ed0:	ldr	r0, [sp, #24]
   12ed4:	bl	11558 <close@plt>
   12ed8:	bl	113f0 <__errno_location@plt>
   12edc:	ldr	r4, [r0]
   12ee0:	mov	r2, #5
   12ee4:	movw	r1, #50956	; 0xc70c
   12ee8:	movt	r1, #1
   12eec:	mov	r0, #0
   12ef0:	bl	11258 <dcgettext@plt>
   12ef4:	mov	r2, r0
   12ef8:	mov	r1, r4
   12efc:	mov	r0, #0
   12f00:	bl	11324 <error@plt>
   12f04:	ldr	r0, [sp, #24]
   12f08:	bl	11558 <close@plt>
   12f0c:	mov	r9, #1
   12f10:	mov	r0, r9
   12f14:	add	sp, sp, #36	; 0x24
   12f18:	ldrd	r4, [sp]
   12f1c:	ldrd	r6, [sp, #8]
   12f20:	ldrd	r8, [sp, #16]
   12f24:	add	sp, sp, #24
   12f28:	pop	{pc}		; (ldr pc, [sp], #4)
   12f2c:	ldr	r0, [sp, #24]
   12f30:	bl	11558 <close@plt>
   12f34:	mov	r2, #0
   12f38:	mov	r1, sp
   12f3c:	mov	r0, r4
   12f40:	bl	112e8 <waitpid@plt>
   12f44:	ldr	r3, [sp, #20]
   12f48:	cmp	r3, #7
   12f4c:	beq	12f10 <__assert_fail@plt+0x19a0>
   12f50:	cmp	r3, #2
   12f54:	beq	12f60 <__assert_fail@plt+0x19f0>
   12f58:	mov	r0, #126	; 0x7e
   12f5c:	bl	113a8 <exit@plt>
   12f60:	mov	r0, #127	; 0x7f
   12f64:	bl	113a8 <exit@plt>
   12f68:	mov	r0, r4
   12f6c:	bl	11c88 <__assert_fail@plt+0x718>
   12f70:	b	12f04 <__assert_fail@plt+0x1994>
   12f74:	mov	r9, #1
   12f78:	b	12f10 <__assert_fail@plt+0x19a0>
   12f7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f80:	strd	r6, [sp, #8]
   12f84:	strd	r8, [sp, #16]
   12f88:	strd	sl, [sp, #24]
   12f8c:	str	lr, [sp, #32]
   12f90:	sub	sp, sp, #212	; 0xd4
   12f94:	str	r0, [sp, #24]
   12f98:	str	r1, [sp, #28]
   12f9c:	movw	r3, #52876	; 0xce8c
   12fa0:	movt	r3, #1
   12fa4:	ldr	r2, [r3]
   12fa8:	str	r2, [sp, #196]	; 0xc4
   12fac:	ldrb	r3, [r3, #4]
   12fb0:	strb	r3, [sp, #200]	; 0xc8
   12fb4:	ldr	r0, [r1]
   12fb8:	cmp	r0, #0
   12fbc:	movweq	r0, #51136	; 0xc7c0
   12fc0:	movteq	r0, #1
   12fc4:	bl	1763c <__assert_fail@plt+0x60cc>
   12fc8:	bl	151d8 <__assert_fail@plt+0x3c68>
   12fcc:	bl	1139c <getpid@plt>
   12fd0:	movw	r3, #57832	; 0xe1e8
   12fd4:	movt	r3, #2
   12fd8:	str	r0, [r3, #128]	; 0x80
   12fdc:	mov	r2, #0
   12fe0:	str	r2, [r3, #136]	; 0x88
   12fe4:	movw	r1, #50532	; 0xc564
   12fe8:	movt	r1, #1
   12fec:	mov	r0, #6
   12ff0:	bl	1148c <setlocale@plt>
   12ff4:	movw	r4, #53948	; 0xd2bc
   12ff8:	movt	r4, #1
   12ffc:	movw	r1, #51144	; 0xc7c8
   13000:	movt	r1, #1
   13004:	mov	r0, r4
   13008:	bl	11504 <bindtextdomain@plt>
   1300c:	mov	r0, r4
   13010:	bl	11294 <textdomain@plt>
   13014:	movw	r0, #22712	; 0x58b8
   13018:	movt	r0, #1
   1301c:	bl	1b63c <__assert_fail@plt+0xa0cc>
   13020:	cmp	r0, #0
   13024:	bne	13410 <__assert_fail@plt+0x1ea0>
   13028:	movw	r0, #7152	; 0x1bf0
   1302c:	movt	r0, #1
   13030:	bl	1b63c <__assert_fail@plt+0xa0cc>
   13034:	subs	r3, r0, #0
   13038:	str	r3, [sp, #32]
   1303c:	bne	13410 <__assert_fail@plt+0x1ea0>
   13040:	mov	r1, #2048	; 0x800
   13044:	ldr	r0, [pc, #3860]	; 13f60 <__assert_fail@plt+0x29f0>
   13048:	bl	14c14 <__assert_fail@plt+0x36a4>
   1304c:	str	r0, [sp, #44]	; 0x2c
   13050:	sub	r3, r0, #1
   13054:	cmp	r3, #1
   13058:	movwls	r6, #5932	; 0x172c
   1305c:	movtls	r6, #1
   13060:	bhi	1343c <__assert_fail@plt+0x1ecc>
   13064:	ldr	r3, [sp, #32]
   13068:	str	r3, [sp, #36]	; 0x24
   1306c:	movw	sl, #7612	; 0x1dbc
   13070:	movt	sl, #1
   13074:	movw	r9, #51132	; 0xc7bc
   13078:	movt	r9, #1
   1307c:	mov	r3, #1
   13080:	str	r3, [sp, #40]	; 0x28
   13084:	ldr	fp, [pc, #3800]	; 13f64 <__assert_fail@plt+0x29f4>
   13088:	movw	r4, #52012	; 0xcb2c
   1308c:	movt	r4, #1
   13090:	movw	r5, #57824	; 0xe1e0
   13094:	movt	r5, #2
   13098:	add	r3, sp, #204	; 0xcc
   1309c:	str	r3, [sp]
   130a0:	mov	r3, fp
   130a4:	mov	r2, r4
   130a8:	ldr	r1, [sp, #28]
   130ac:	ldr	r0, [sp, #24]
   130b0:	bl	11384 <getopt_long@plt>
   130b4:	cmn	r0, #1
   130b8:	beq	13c28 <__assert_fail@plt+0x26b8>
   130bc:	sub	r0, r0, #48	; 0x30
   130c0:	cmp	r0, #208	; 0xd0
   130c4:	ldrls	pc, [pc, r0, lsl #2]
   130c8:	b	13c14 <__assert_fail@plt+0x26a4>
   130cc:	strdeq	r3, [r1], -r0
   130d0:	andeq	r3, r1, r4, lsl ip
   130d4:	andeq	r3, r1, r4, lsl ip
   130d8:	andeq	r3, r1, r4, lsl ip
   130dc:	andeq	r3, r1, r4, lsl ip
   130e0:	andeq	r3, r1, r4, lsl ip
   130e4:	andeq	r3, r1, r4, lsl ip
   130e8:	andeq	r3, r1, r4, lsl ip
   130ec:	andeq	r3, r1, r4, lsl ip
   130f0:	andeq	r3, r1, r4, lsl ip
   130f4:	andeq	r3, r1, r4, lsl ip
   130f8:	andeq	r3, r1, r4, lsl ip
   130fc:	andeq	r3, r1, r4, lsl ip
   13100:	andeq	r3, r1, r4, lsl ip
   13104:	andeq	r3, r1, r4, lsl ip
   13108:	andeq	r3, r1, r4, lsl ip
   1310c:	andeq	r3, r1, r4, lsl ip
   13110:	andeq	r3, r1, r4, lsl ip
   13114:	andeq	r3, r1, r4, lsl ip
   13118:	andeq	r3, r1, r4, lsl ip
   1311c:	andeq	r3, r1, r4, lsl ip
   13120:	andeq	r3, r1, ip, asr r7
   13124:	andeq	r3, r1, r4, lsl ip
   13128:	andeq	r3, r1, r4, lsl ip
   1312c:	andeq	r3, r1, r4, lsl ip
   13130:	andeq	r3, r1, r0, lsr #15
   13134:	andeq	r3, r1, r4, lsl ip
   13138:	andeq	r3, r1, r4, lsl ip
   1313c:	andeq	r3, r1, r0, lsr r8
   13140:	andeq	r3, r1, r4, lsl ip
   13144:	andeq	r3, r1, r4, lsl ip
   13148:	andeq	r3, r1, r4, lsl ip
   1314c:	andeq	r3, r1, r8, lsl fp
   13150:	andeq	r3, r1, r4, lsl ip
   13154:	andeq	r3, r1, r4, lsl ip
   13158:	andeq	r3, r1, ip, lsl ip
   1315c:	andeq	r3, r1, r4, lsl ip
   13160:	andeq	r3, r1, r4, lsl ip
   13164:	andeq	r3, r1, r4, lsl ip
   13168:	andeq	r3, r1, r4, lsl ip
   1316c:	andeq	r3, r1, r4, lsl ip
   13170:	andeq	r3, r1, r4, lsl ip
   13174:	andeq	r3, r1, r4, lsl ip
   13178:	andeq	r3, r1, r4, lsl ip
   1317c:	andeq	r3, r1, r4, lsl ip
   13180:	andeq	r3, r1, r4, lsl ip
   13184:	andeq	r3, r1, r4, lsl ip
   13188:	andeq	r3, r1, r4, lsl ip
   1318c:	andeq	r3, r1, r4, lsl ip
   13190:	andeq	r3, r1, r4, asr #22
   13194:	andeq	r3, r1, r4, lsl ip
   13198:	andeq	r3, r1, r4, lsl ip
   1319c:	andeq	r3, r1, ip, lsl #10
   131a0:	andeq	r3, r1, ip, asr r7
   131a4:	andeq	r3, r1, r4, lsl ip
   131a8:	andeq	r3, r1, r4, lsl ip
   131ac:	muleq	r1, r8, r7
   131b0:	andeq	r3, r1, r0, lsr #15
   131b4:	andeq	r3, r1, r4, lsl ip
   131b8:	andeq	r3, r1, r4, lsl ip
   131bc:	andeq	r3, r1, r4, asr #17
   131c0:	andeq	r3, r1, r4, lsl ip
   131c4:	andeq	r3, r1, ip, ror r9
   131c8:	andeq	r3, r1, ip, ror #21
   131cc:	andeq	r3, r1, r0, lsl #22
   131d0:	andeq	r3, r1, r4, lsl ip
   131d4:	andeq	r3, r1, r4, ror #9
   131d8:	andeq	r3, r1, r8, lsr sl
   131dc:	andeq	r3, r1, r4, asr #21
   131e0:	andeq	r3, r1, r4, lsl ip
   131e4:	andeq	r3, r1, ip, asr #22
   131e8:	andeq	r3, r1, r4, lsl ip
   131ec:	ldrdeq	r3, [r1], -r8
   131f0:	andeq	r3, r1, r4, lsl ip
   131f4:	andeq	r3, r1, r4, lsl ip
   131f8:	andeq	r3, r1, r4, lsl ip
   131fc:	andeq	r3, r1, r4, lsl ip
   13200:	andeq	r3, r1, r4, lsl ip
   13204:	andeq	r3, r1, r4, lsl ip
   13208:	andeq	r3, r1, r4, lsl ip
   1320c:	andeq	r3, r1, r4, lsl ip
   13210:	andeq	r3, r1, r4, lsl ip
   13214:	andeq	r3, r1, r4, lsl ip
   13218:	andeq	r3, r1, r4, lsl ip
   1321c:	andeq	r3, r1, r4, lsl ip
   13220:	andeq	r3, r1, r4, lsl ip
   13224:	andeq	r3, r1, r4, lsl ip
   13228:	andeq	r3, r1, r4, lsl ip
   1322c:	andeq	r3, r1, r4, lsl ip
   13230:	andeq	r3, r1, r4, lsl ip
   13234:	andeq	r3, r1, r4, lsl ip
   13238:	andeq	r3, r1, r4, lsl ip
   1323c:	andeq	r3, r1, r4, lsl ip
   13240:	andeq	r3, r1, r4, lsl ip
   13244:	andeq	r3, r1, r4, lsl ip
   13248:	andeq	r3, r1, r4, lsl ip
   1324c:	andeq	r3, r1, r4, lsl ip
   13250:	andeq	r3, r1, r4, lsl ip
   13254:	andeq	r3, r1, r4, lsl ip
   13258:	andeq	r3, r1, r4, lsl ip
   1325c:	andeq	r3, r1, r4, lsl ip
   13260:	andeq	r3, r1, r4, lsl ip
   13264:	andeq	r3, r1, r4, lsl ip
   13268:	andeq	r3, r1, r4, lsl ip
   1326c:	andeq	r3, r1, r4, lsl ip
   13270:	andeq	r3, r1, r4, lsl ip
   13274:	andeq	r3, r1, r4, lsl ip
   13278:	andeq	r3, r1, r4, lsl ip
   1327c:	andeq	r3, r1, r4, lsl ip
   13280:	andeq	r3, r1, r4, lsl ip
   13284:	andeq	r3, r1, r4, lsl ip
   13288:	andeq	r3, r1, r4, lsl ip
   1328c:	andeq	r3, r1, r4, lsl ip
   13290:	andeq	r3, r1, r4, lsl ip
   13294:	andeq	r3, r1, r4, lsl ip
   13298:	andeq	r3, r1, r4, lsl ip
   1329c:	andeq	r3, r1, r4, lsl ip
   132a0:	andeq	r3, r1, r4, lsl ip
   132a4:	andeq	r3, r1, r4, lsl ip
   132a8:	andeq	r3, r1, r4, lsl ip
   132ac:	andeq	r3, r1, r4, lsl ip
   132b0:	andeq	r3, r1, r4, lsl ip
   132b4:	andeq	r3, r1, r4, lsl ip
   132b8:	andeq	r3, r1, r4, lsl ip
   132bc:	andeq	r3, r1, r4, lsl ip
   132c0:	andeq	r3, r1, r4, lsl ip
   132c4:	andeq	r3, r1, r4, lsl ip
   132c8:	andeq	r3, r1, r4, lsl ip
   132cc:	andeq	r3, r1, r4, lsl ip
   132d0:	andeq	r3, r1, r4, lsl ip
   132d4:	andeq	r3, r1, r4, lsl ip
   132d8:	andeq	r3, r1, r4, lsl ip
   132dc:	andeq	r3, r1, r4, lsl ip
   132e0:	andeq	r3, r1, r4, lsl ip
   132e4:	andeq	r3, r1, r4, lsl ip
   132e8:	andeq	r3, r1, r4, lsl ip
   132ec:	andeq	r3, r1, r4, lsl ip
   132f0:	andeq	r3, r1, r4, lsl ip
   132f4:	andeq	r3, r1, r4, lsl ip
   132f8:	andeq	r3, r1, r4, lsl ip
   132fc:	andeq	r3, r1, r4, lsl ip
   13300:	andeq	r3, r1, r4, lsl ip
   13304:	andeq	r3, r1, r4, lsl ip
   13308:	andeq	r3, r1, r4, lsl ip
   1330c:	andeq	r3, r1, r4, lsl ip
   13310:	andeq	r3, r1, r4, lsl ip
   13314:	andeq	r3, r1, r4, lsl ip
   13318:	andeq	r3, r1, r4, lsl ip
   1331c:	andeq	r3, r1, r4, lsl ip
   13320:	andeq	r3, r1, r4, lsl ip
   13324:	andeq	r3, r1, r4, lsl ip
   13328:	andeq	r3, r1, r4, lsl ip
   1332c:	andeq	r3, r1, r4, lsl ip
   13330:	andeq	r3, r1, r4, lsl ip
   13334:	andeq	r3, r1, r4, lsl ip
   13338:	andeq	r3, r1, r4, lsl ip
   1333c:	andeq	r3, r1, r4, lsl ip
   13340:	andeq	r3, r1, r4, lsl ip
   13344:	andeq	r3, r1, r4, lsl ip
   13348:	andeq	r3, r1, r4, lsl ip
   1334c:	andeq	r3, r1, r4, lsl ip
   13350:	andeq	r3, r1, r4, lsl ip
   13354:	andeq	r3, r1, r4, lsl ip
   13358:	andeq	r3, r1, r4, lsl ip
   1335c:	andeq	r3, r1, r4, lsl ip
   13360:	andeq	r3, r1, r4, lsl ip
   13364:	andeq	r3, r1, r4, lsl ip
   13368:	andeq	r3, r1, r4, lsl ip
   1336c:	andeq	r3, r1, r4, lsl ip
   13370:	andeq	r3, r1, r4, lsl ip
   13374:	andeq	r3, r1, r4, lsl ip
   13378:	andeq	r3, r1, r4, lsl ip
   1337c:	andeq	r3, r1, r4, lsl ip
   13380:	andeq	r3, r1, r4, lsl ip
   13384:	andeq	r3, r1, r4, lsl ip
   13388:	andeq	r3, r1, r4, lsl ip
   1338c:	andeq	r3, r1, r4, lsl ip
   13390:	andeq	r3, r1, r4, lsl ip
   13394:	andeq	r3, r1, r4, lsl ip
   13398:	andeq	r3, r1, r4, lsl ip
   1339c:	andeq	r3, r1, r4, lsl ip
   133a0:	andeq	r3, r1, r4, lsl ip
   133a4:	andeq	r3, r1, r4, lsl ip
   133a8:	andeq	r3, r1, r4, lsl ip
   133ac:	andeq	r3, r1, r4, lsl ip
   133b0:	andeq	r3, r1, r4, lsl ip
   133b4:	andeq	r3, r1, r4, lsl ip
   133b8:	andeq	r3, r1, r4, lsl ip
   133bc:	andeq	r3, r1, r4, lsl ip
   133c0:	andeq	r3, r1, r4, lsl ip
   133c4:	andeq	r3, r1, r4, lsl ip
   133c8:	andeq	r3, r1, r4, lsl ip
   133cc:	andeq	r3, r1, r4, lsl ip
   133d0:	andeq	r3, r1, r4, lsl ip
   133d4:	andeq	r3, r1, r4, lsl ip
   133d8:	andeq	r3, r1, r4, lsl ip
   133dc:	andeq	r3, r1, r4, lsl ip
   133e0:	andeq	r3, r1, r4, lsl ip
   133e4:	andeq	r3, r1, r4, lsl ip
   133e8:	andeq	r3, r1, r4, lsl ip
   133ec:	andeq	r3, r1, r4, lsl ip
   133f0:	andeq	r3, r1, r4, lsl ip
   133f4:	andeq	r3, r1, r4, lsl ip
   133f8:	andeq	r3, r1, r4, lsl ip
   133fc:	andeq	r3, r1, r4, lsl ip
   13400:	andeq	r3, r1, r4, lsl ip
   13404:	andeq	r3, r1, r4, lsl ip
   13408:	andeq	r3, r1, r4, lsl ip
   1340c:	andeq	r3, r1, r8, ror fp
   13410:	bl	113f0 <__errno_location@plt>
   13414:	ldr	r4, [r0]
   13418:	mov	r2, #5
   1341c:	movw	r1, #51168	; 0xc7e0
   13420:	movt	r1, #1
   13424:	mov	r0, #0
   13428:	bl	11258 <dcgettext@plt>
   1342c:	mov	r2, r0
   13430:	mov	r1, r4
   13434:	mov	r0, #1
   13438:	bl	11324 <error@plt>
   1343c:	mov	r0, #0
   13440:	bl	11264 <sysconf@plt>
   13444:	cmp	r0, #0
   13448:	ble	13470 <__assert_fail@plt+0x1f00>
   1344c:	cmp	r0, #2048	; 0x800
   13450:	ble	134ac <__assert_fail@plt+0x1f3c>
   13454:	movw	r3, #57832	; 0xe1e8
   13458:	movt	r3, #2
   1345c:	sub	r0, r0, #2048	; 0x800
   13460:	ldr	r2, [r3, #16]
   13464:	cmp	r2, r0
   13468:	movcc	r0, r2
   1346c:	str	r0, [r3, #16]
   13470:	movw	r3, #57832	; 0xe1e8
   13474:	movt	r3, #2
   13478:	ldr	r3, [r3, #16]
   1347c:	cmp	r3, #2048	; 0x800
   13480:	bcc	134c8 <__assert_fail@plt+0x1f58>
   13484:	movw	r0, #57832	; 0xe1e8
   13488:	movt	r0, #2
   1348c:	movw	r3, #10812	; 0x2a3c
   13490:	movt	r3, #1
   13494:	str	r3, [r0, #36]	; 0x24
   13498:	add	r0, r0, #4
   1349c:	bl	14ce4 <__assert_fail@plt+0x3774>
   134a0:	movw	r6, #5740	; 0x166c
   134a4:	movt	r6, #1
   134a8:	b	13064 <__assert_fail@plt+0x1af4>
   134ac:	ldr	r3, [pc, #2740]	; 13f68 <__assert_fail@plt+0x29f8>
   134b0:	movw	r2, #483	; 0x1e3
   134b4:	movw	r1, #47344	; 0xb8f0
   134b8:	movt	r1, #1
   134bc:	movw	r0, #51204	; 0xc804
   134c0:	movt	r0, #1
   134c4:	bl	11570 <__assert_fail@plt>
   134c8:	ldr	r3, [pc, #2712]	; 13f68 <__assert_fail@plt+0x29f8>
   134cc:	movw	r2, #511	; 0x1ff
   134d0:	movw	r1, #47344	; 0xb8f0
   134d4:	movt	r1, #1
   134d8:	movw	r0, #51232	; 0xc820
   134dc:	movt	r0, #1
   134e0:	bl	11570 <__assert_fail@plt>
   134e4:	ldr	r3, [sp, #32]
   134e8:	str	r3, [sp, #40]	; 0x28
   134ec:	b	13098 <__assert_fail@plt+0x1b28>
   134f0:	movw	r3, #57832	; 0xe1e8
   134f4:	movt	r3, #2
   134f8:	mov	r2, #0
   134fc:	strb	r2, [r3, #104]	; 0x68
   13500:	movw	sl, #6100	; 0x17d4
   13504:	movt	sl, #1
   13508:	b	13098 <__assert_fail@plt+0x1b28>
   1350c:	ldr	r7, [r5]
   13510:	mov	r0, r7
   13514:	bl	113c0 <strlen@plt>
   13518:	cmp	r0, #1
   1351c:	ldrbeq	r8, [r7]
   13520:	beq	13744 <__assert_fail@plt+0x21d4>
   13524:	ldrb	r3, [r7]
   13528:	cmp	r3, #92	; 0x5c
   1352c:	bne	13710 <__assert_fail@plt+0x21a0>
   13530:	ldrb	r8, [r7, #1]
   13534:	sub	r3, r8, #92	; 0x5c
   13538:	cmp	r3, #26
   1353c:	ldrls	pc, [pc, r3, lsl #2]
   13540:	b	135d8 <__assert_fail@plt+0x2068>
   13544:	andeq	r3, r1, r4, asr #14
   13548:	ldrdeq	r3, [r1], -r8
   1354c:	ldrdeq	r3, [r1], -r8
   13550:	ldrdeq	r3, [r1], -r8
   13554:	ldrdeq	r3, [r1], -r8
   13558:	andeq	r3, r1, r8, lsr r7
   1355c:			; <UNDEFINED> instruction: 0x000135b0
   13560:	ldrdeq	r3, [r1], -r8
   13564:	ldrdeq	r3, [r1], -r8
   13568:	ldrdeq	r3, [r1], -r8
   1356c:	andeq	r3, r1, r0, asr #14
   13570:	ldrdeq	r3, [r1], -r8
   13574:	ldrdeq	r3, [r1], -r8
   13578:	ldrdeq	r3, [r1], -r8
   1357c:	ldrdeq	r3, [r1], -r8
   13580:	ldrdeq	r3, [r1], -r8
   13584:	ldrdeq	r3, [r1], -r8
   13588:	ldrdeq	r3, [r1], -r8
   1358c:			; <UNDEFINED> instruction: 0x000135b8
   13590:	ldrdeq	r3, [r1], -r8
   13594:	ldrdeq	r3, [r1], -r8
   13598:	ldrdeq	r3, [r1], -r8
   1359c:	andeq	r3, r1, r0, asr #11
   135a0:	ldrdeq	r3, [r1], -r8
   135a4:	andeq	r3, r1, r8, asr #11
   135a8:	ldrdeq	r3, [r1], -r8
   135ac:	ldrdeq	r3, [r1], -r0
   135b0:	mov	r8, #8
   135b4:	b	13744 <__assert_fail@plt+0x21d4>
   135b8:	mov	r8, #10
   135bc:	b	13744 <__assert_fail@plt+0x21d4>
   135c0:	mov	r8, #13
   135c4:	b	13744 <__assert_fail@plt+0x21d4>
   135c8:	mov	r8, #9
   135cc:	b	13744 <__assert_fail@plt+0x21d4>
   135d0:	mov	r8, #11
   135d4:	b	13744 <__assert_fail@plt+0x21d4>
   135d8:	cmp	r8, #120	; 0x78
   135dc:	addeq	r8, r7, #2
   135e0:	moveq	sl, #16
   135e4:	beq	13608 <__assert_fail@plt+0x2098>
   135e8:	bl	11390 <__ctype_b_loc@plt>
   135ec:	ldr	r3, [r0]
   135f0:	lsl	r8, r8, #1
   135f4:	ldrh	r3, [r3, r8]
   135f8:	tst	r3, #2048	; 0x800
   135fc:	beq	13650 <__assert_fail@plt+0x20e0>
   13600:	add	r8, r7, #1
   13604:	mov	sl, #8
   13608:	bl	113f0 <__errno_location@plt>
   1360c:	mov	r3, #0
   13610:	str	r3, [r0]
   13614:	str	r3, [sp, #48]	; 0x30
   13618:	mov	r2, sl
   1361c:	add	r1, sp, #48	; 0x30
   13620:	mov	r0, r8
   13624:	bl	113b4 <strtoul@plt>
   13628:	cmn	r0, #1
   1362c:	beq	13678 <__assert_fail@plt+0x2108>
   13630:	cmp	r0, #255	; 0xff
   13634:	bhi	13678 <__assert_fail@plt+0x2108>
   13638:	ldr	r3, [sp, #48]	; 0x30
   1363c:	ldrb	r3, [r3]
   13640:	cmp	r3, #0
   13644:	bne	136e0 <__assert_fail@plt+0x2170>
   13648:	uxtb	r8, r0
   1364c:	b	13744 <__assert_fail@plt+0x21d4>
   13650:	mov	r2, #5
   13654:	movw	r1, #51260	; 0xc83c
   13658:	movt	r1, #1
   1365c:	mov	r0, #0
   13660:	bl	11258 <dcgettext@plt>
   13664:	mov	r3, r7
   13668:	mov	r2, r0
   1366c:	mov	r1, #0
   13670:	mov	r0, #1
   13674:	bl	11324 <error@plt>
   13678:	cmp	sl, #16
   1367c:	beq	136b0 <__assert_fail@plt+0x2140>
   13680:	mov	r2, #5
   13684:	movw	r1, #51424	; 0xc8e0
   13688:	movt	r1, #1
   1368c:	mov	r0, #0
   13690:	bl	11258 <dcgettext@plt>
   13694:	mov	r3, #255	; 0xff
   13698:	str	r3, [sp]
   1369c:	mov	r3, r7
   136a0:	mov	r2, r0
   136a4:	mov	r1, #0
   136a8:	mov	r0, #1
   136ac:	bl	11324 <error@plt>
   136b0:	mov	r2, #5
   136b4:	movw	r1, #51324	; 0xc87c
   136b8:	movt	r1, #1
   136bc:	mov	r0, #0
   136c0:	bl	11258 <dcgettext@plt>
   136c4:	mov	r3, #255	; 0xff
   136c8:	str	r3, [sp]
   136cc:	mov	r3, r7
   136d0:	mov	r2, r0
   136d4:	mov	r1, #0
   136d8:	mov	r0, #1
   136dc:	bl	11324 <error@plt>
   136e0:	mov	r2, #5
   136e4:	movw	r1, #51524	; 0xc944
   136e8:	movt	r1, #1
   136ec:	mov	r0, #0
   136f0:	bl	11258 <dcgettext@plt>
   136f4:	ldr	r3, [sp, #48]	; 0x30
   136f8:	str	r3, [sp]
   136fc:	mov	r3, r7
   13700:	mov	r2, r0
   13704:	mov	r1, #0
   13708:	mov	r0, #1
   1370c:	bl	11324 <error@plt>
   13710:	mov	r2, #5
   13714:	movw	r1, #51624	; 0xc9a8
   13718:	movt	r1, #1
   1371c:	mov	r0, #0
   13720:	bl	11258 <dcgettext@plt>
   13724:	mov	r3, r7
   13728:	mov	r2, r0
   1372c:	mov	r1, #0
   13730:	mov	r0, #1
   13734:	bl	11324 <error@plt>
   13738:	mov	r8, #7
   1373c:	b	13744 <__assert_fail@plt+0x21d4>
   13740:	mov	r8, #12
   13744:	movw	r3, #57832	; 0xe1e8
   13748:	movt	r3, #2
   1374c:	strb	r8, [r3, #104]	; 0x68
   13750:	movw	sl, #6100	; 0x17d4
   13754:	movt	sl, #1
   13758:	b	13098 <__assert_fail@plt+0x1b28>
   1375c:	ldr	r3, [r5]
   13760:	cmp	r3, #0
   13764:	beq	13784 <__assert_fail@plt+0x2214>
   13768:	ldrb	r2, [r3]
   1376c:	cmp	r2, #0
   13770:	beq	13784 <__assert_fail@plt+0x2214>
   13774:	movw	r2, #57832	; 0xe1e8
   13778:	movt	r2, #2
   1377c:	str	r3, [r2, #144]	; 0x90
   13780:	b	13098 <__assert_fail@plt+0x1b28>
   13784:	movw	r3, #57832	; 0xe1e8
   13788:	movt	r3, #2
   1378c:	mov	r2, #0
   13790:	str	r2, [r3, #144]	; 0x90
   13794:	b	13098 <__assert_fail@plt+0x1b28>
   13798:	mov	r0, #0
   1379c:	bl	122e0 <__assert_fail@plt+0xd70>
   137a0:	ldr	r2, [r5]
   137a4:	movw	r3, #51128	; 0xc7b8
   137a8:	movt	r3, #1
   137ac:	cmp	r2, #0
   137b0:	moveq	r2, r3
   137b4:	movw	r3, #57832	; 0xe1e8
   137b8:	movt	r3, #2
   137bc:	str	r2, [r3, #28]
   137c0:	ldr	r3, [r3, #44]	; 0x2c
   137c4:	cmp	r3, #0
   137c8:	bne	13808 <__assert_fail@plt+0x2298>
   137cc:	movw	r3, #57832	; 0xe1e8
   137d0:	movt	r3, #2
   137d4:	ldr	r3, [r3, #40]	; 0x28
   137d8:	cmp	r3, #0
   137dc:	beq	13098 <__assert_fail@plt+0x1b28>
   137e0:	movw	r1, #51784	; 0xca48
   137e4:	movt	r1, #1
   137e8:	movw	r0, #51768	; 0xca38
   137ec:	movt	r0, #1
   137f0:	bl	116d8 <__assert_fail@plt+0x168>
   137f4:	movw	r3, #57832	; 0xe1e8
   137f8:	movt	r3, #2
   137fc:	mov	r2, #0
   13800:	str	r2, [r3, #40]	; 0x28
   13804:	b	13098 <__assert_fail@plt+0x1b28>
   13808:	movw	r1, #51756	; 0xca2c
   1380c:	movt	r1, #1
   13810:	movw	r0, #51768	; 0xca38
   13814:	movt	r0, #1
   13818:	bl	116d8 <__assert_fail@plt+0x168>
   1381c:	movw	r3, #57832	; 0xe1e8
   13820:	movt	r3, #2
   13824:	mov	r2, #0
   13828:	str	r2, [r3, #44]	; 0x2c
   1382c:	b	137cc <__assert_fail@plt+0x225c>
   13830:	mov	r2, #1
   13834:	str	r2, [sp]
   13838:	mvn	r3, #0
   1383c:	mov	r1, #76	; 0x4c
   13840:	ldr	r0, [r5]
   13844:	bl	12600 <__assert_fail@plt+0x1090>
   13848:	movw	r3, #57832	; 0xe1e8
   1384c:	movt	r3, #2
   13850:	str	r0, [r3, #40]	; 0x28
   13854:	ldr	r3, [r3, #44]	; 0x2c
   13858:	cmp	r3, #0
   1385c:	bne	1389c <__assert_fail@plt+0x232c>
   13860:	movw	r3, #57832	; 0xe1e8
   13864:	movt	r3, #2
   13868:	ldr	r3, [r3, #28]
   1386c:	cmp	r3, #0
   13870:	beq	13098 <__assert_fail@plt+0x1b28>
   13874:	movw	r1, #51800	; 0xca58
   13878:	movt	r1, #1
   1387c:	movw	r0, #51796	; 0xca54
   13880:	movt	r0, #1
   13884:	bl	116d8 <__assert_fail@plt+0x168>
   13888:	movw	r3, #57832	; 0xe1e8
   1388c:	movt	r3, #2
   13890:	mov	r2, #0
   13894:	str	r2, [r3, #28]
   13898:	b	13098 <__assert_fail@plt+0x1b28>
   1389c:	movw	r1, #51756	; 0xca2c
   138a0:	movt	r1, #1
   138a4:	movw	r0, #51796	; 0xca54
   138a8:	movt	r0, #1
   138ac:	bl	116d8 <__assert_fail@plt+0x168>
   138b0:	movw	r3, #57832	; 0xe1e8
   138b4:	movt	r3, #2
   138b8:	mov	r2, #0
   138bc:	str	r2, [r3, #44]	; 0x2c
   138c0:	b	13860 <__assert_fail@plt+0x22f0>
   138c4:	ldr	r0, [r5]
   138c8:	cmp	r0, #0
   138cc:	beq	13940 <__assert_fail@plt+0x23d0>
   138d0:	mov	r2, #1
   138d4:	str	r2, [sp]
   138d8:	mvn	r3, #0
   138dc:	mov	r1, #108	; 0x6c
   138e0:	bl	12600 <__assert_fail@plt+0x1090>
   138e4:	movw	r3, #57832	; 0xe1e8
   138e8:	movt	r3, #2
   138ec:	str	r0, [r3, #40]	; 0x28
   138f0:	movw	r3, #57832	; 0xe1e8
   138f4:	movt	r3, #2
   138f8:	ldr	r3, [r3, #44]	; 0x2c
   138fc:	cmp	r3, #0
   13900:	bne	13954 <__assert_fail@plt+0x23e4>
   13904:	movw	r3, #57832	; 0xe1e8
   13908:	movt	r3, #2
   1390c:	ldr	r3, [r3, #28]
   13910:	cmp	r3, #0
   13914:	beq	13098 <__assert_fail@plt+0x1b28>
   13918:	movw	r1, #51800	; 0xca58
   1391c:	movt	r1, #1
   13920:	movw	r0, #51812	; 0xca64
   13924:	movt	r0, #1
   13928:	bl	116d8 <__assert_fail@plt+0x168>
   1392c:	movw	r3, #57832	; 0xe1e8
   13930:	movt	r3, #2
   13934:	mov	r2, #0
   13938:	str	r2, [r3, #28]
   1393c:	b	13098 <__assert_fail@plt+0x1b28>
   13940:	movw	r3, #57832	; 0xe1e8
   13944:	movt	r3, #2
   13948:	mov	r2, #1
   1394c:	str	r2, [r3, #40]	; 0x28
   13950:	b	138f0 <__assert_fail@plt+0x2380>
   13954:	movw	r1, #51756	; 0xca2c
   13958:	movt	r1, #1
   1395c:	movw	r0, #51812	; 0xca64
   13960:	movt	r0, #1
   13964:	bl	116d8 <__assert_fail@plt+0x168>
   13968:	movw	r3, #57832	; 0xe1e8
   1396c:	movt	r3, #2
   13970:	mov	r2, #0
   13974:	str	r2, [r3, #44]	; 0x2c
   13978:	b	13904 <__assert_fail@plt+0x2394>
   1397c:	mov	r2, #1
   13980:	str	r2, [sp]
   13984:	mvn	r3, #0
   13988:	mov	r1, #110	; 0x6e
   1398c:	ldr	r0, [r5]
   13990:	bl	12600 <__assert_fail@plt+0x1090>
   13994:	movw	r3, #57832	; 0xe1e8
   13998:	movt	r3, #2
   1399c:	str	r0, [r3, #44]	; 0x2c
   139a0:	ldr	r3, [r3, #40]	; 0x28
   139a4:	cmp	r3, #0
   139a8:	bne	139e8 <__assert_fail@plt+0x2478>
   139ac:	movw	r3, #57832	; 0xe1e8
   139b0:	movt	r3, #2
   139b4:	ldr	r3, [r3, #28]
   139b8:	cmp	r3, #0
   139bc:	beq	13098 <__assert_fail@plt+0x1b28>
   139c0:	movw	r3, #57832	; 0xe1e8
   139c4:	movt	r3, #2
   139c8:	ldr	r3, [r3, #44]	; 0x2c
   139cc:	cmp	r3, #1
   139d0:	bne	13a10 <__assert_fail@plt+0x24a0>
   139d4:	movw	r3, #57832	; 0xe1e8
   139d8:	movt	r3, #2
   139dc:	mov	r2, #0
   139e0:	str	r2, [r3, #44]	; 0x2c
   139e4:	b	13098 <__assert_fail@plt+0x1b28>
   139e8:	movw	r1, #51784	; 0xca48
   139ec:	movt	r1, #1
   139f0:	movw	r0, #51828	; 0xca74
   139f4:	movt	r0, #1
   139f8:	bl	116d8 <__assert_fail@plt+0x168>
   139fc:	movw	r3, #57832	; 0xe1e8
   13a00:	movt	r3, #2
   13a04:	mov	r2, #0
   13a08:	str	r2, [r3, #40]	; 0x28
   13a0c:	b	139ac <__assert_fail@plt+0x243c>
   13a10:	movw	r1, #51800	; 0xca58
   13a14:	movt	r1, #1
   13a18:	movw	r0, #51828	; 0xca74
   13a1c:	movt	r0, #1
   13a20:	bl	116d8 <__assert_fail@plt+0x168>
   13a24:	movw	r3, #57832	; 0xe1e8
   13a28:	movt	r3, #2
   13a2c:	mov	r2, #0
   13a30:	str	r2, [r3, #28]
   13a34:	b	13098 <__assert_fail@plt+0x1b28>
   13a38:	blx	r6
   13a3c:	movw	r7, #57832	; 0xe1e8
   13a40:	movt	r7, #2
   13a44:	mov	r3, #0
   13a48:	str	r3, [sp]
   13a4c:	ldr	r3, [r7, #8]
   13a50:	mov	r2, #1
   13a54:	mov	r1, #115	; 0x73
   13a58:	ldr	r0, [r5]
   13a5c:	bl	12600 <__assert_fail@plt+0x1090>
   13a60:	mov	r8, r0
   13a64:	mov	r2, r0
   13a68:	ldr	r3, [r7, #8]
   13a6c:	cmp	r3, r0
   13a70:	bcc	13a84 <__assert_fail@plt+0x2514>
   13a74:	movw	r3, #57832	; 0xe1e8
   13a78:	movt	r3, #2
   13a7c:	str	r2, [r3, #16]
   13a80:	b	13098 <__assert_fail@plt+0x1b28>
   13a84:	mov	r2, #5
   13a88:	movw	r1, #51844	; 0xca84
   13a8c:	movt	r1, #1
   13a90:	mov	r0, #0
   13a94:	bl	11258 <dcgettext@plt>
   13a98:	movw	r7, #57832	; 0xe1e8
   13a9c:	movt	r7, #2
   13aa0:	ldr	r3, [r7, #8]
   13aa4:	str	r3, [sp]
   13aa8:	mov	r3, r8
   13aac:	mov	r2, r0
   13ab0:	mov	r1, #0
   13ab4:	mov	r0, r1
   13ab8:	bl	11324 <error@plt>
   13abc:	ldr	r2, [r7, #8]
   13ac0:	b	13a74 <__assert_fail@plt+0x2504>
   13ac4:	movw	r3, #57832	; 0xe1e8
   13ac8:	movt	r3, #2
   13acc:	mov	r2, #1
   13ad0:	strb	r2, [r3, #157]	; 0x9d
   13ad4:	b	13098 <__assert_fail@plt+0x1b28>
   13ad8:	movw	r3, #57832	; 0xe1e8
   13adc:	movt	r3, #2
   13ae0:	mov	r2, #1
   13ae4:	str	r2, [r3, #4]
   13ae8:	b	13098 <__assert_fail@plt+0x1b28>
   13aec:	movw	r3, #57832	; 0xe1e8
   13af0:	movt	r3, #2
   13af4:	mov	r2, #1
   13af8:	strb	r2, [r3, #168]	; 0xa8
   13afc:	b	13098 <__assert_fail@plt+0x1b28>
   13b00:	movw	r3, #57832	; 0xe1e8
   13b04:	movt	r3, #2
   13b08:	mov	r2, #1
   13b0c:	strb	r2, [r3, #156]	; 0x9c
   13b10:	strb	r2, [r3, #157]	; 0x9d
   13b14:	b	13098 <__assert_fail@plt+0x1b28>
   13b18:	mov	r3, #1
   13b1c:	str	r3, [sp]
   13b20:	mvn	r3, #-2147483648	; 0x80000000
   13b24:	mov	r2, #0
   13b28:	mov	r1, #80	; 0x50
   13b2c:	ldr	r0, [r5]
   13b30:	bl	12600 <__assert_fail@plt+0x1090>
   13b34:	movw	r3, #57700	; 0xe164
   13b38:	movt	r3, #2
   13b3c:	str	r0, [r3]
   13b40:	b	13098 <__assert_fail@plt+0x1b28>
   13b44:	ldr	r9, [r5]
   13b48:	b	13098 <__assert_fail@plt+0x1b28>
   13b4c:	movw	r0, #51136	; 0xc7c0
   13b50:	movt	r0, #1
   13b54:	bl	15438 <__assert_fail@plt+0x3ec8>
   13b58:	ldr	r0, [sp, #32]
   13b5c:	add	sp, sp, #212	; 0xd4
   13b60:	ldrd	r4, [sp]
   13b64:	ldrd	r6, [sp, #8]
   13b68:	ldrd	r8, [sp, #16]
   13b6c:	ldrd	sl, [sp, #24]
   13b70:	add	sp, sp, #32
   13b74:	pop	{pc}		; (ldr pc, [sp], #4)
   13b78:	ldr	r7, [r5]
   13b7c:	mov	r1, #61	; 0x3d
   13b80:	mov	r0, r7
   13b84:	bl	113cc <strchr@plt>
   13b88:	cmp	r0, #0
   13b8c:	bne	13bdc <__assert_fail@plt+0x266c>
   13b90:	movw	r3, #57832	; 0xe1e8
   13b94:	movt	r3, #2
   13b98:	str	r7, [r3, #160]	; 0xa0
   13b9c:	mov	r0, r7
   13ba0:	bl	1151c <unsetenv@plt>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13098 <__assert_fail@plt+0x1b28>
   13bac:	bl	113f0 <__errno_location@plt>
   13bb0:	ldr	r4, [r0]
   13bb4:	mov	r2, #5
   13bb8:	movw	r1, #51972	; 0xcb04
   13bbc:	movt	r1, #1
   13bc0:	mov	r0, #0
   13bc4:	bl	11258 <dcgettext@plt>
   13bc8:	mov	r3, r7
   13bcc:	mov	r2, r0
   13bd0:	mov	r1, r4
   13bd4:	mov	r0, #1
   13bd8:	bl	11324 <error@plt>
   13bdc:	mov	r2, #5
   13be0:	movw	r1, #51912	; 0xcac8
   13be4:	movt	r1, #1
   13be8:	mov	r0, #0
   13bec:	bl	11258 <dcgettext@plt>
   13bf0:	movw	r3, #46688	; 0xb660
   13bf4:	movt	r3, #1
   13bf8:	ldr	r2, [sp, #204]	; 0xcc
   13bfc:	add	r3, r3, r2, lsl #4
   13c00:	ldr	r3, [r3, #40]	; 0x28
   13c04:	mov	r2, r0
   13c08:	mov	r1, #0
   13c0c:	mov	r0, #1
   13c10:	bl	11324 <error@plt>
   13c14:	mov	r0, #1
   13c18:	bl	122e0 <__assert_fail@plt+0xd70>
   13c1c:	mov	r3, #1
   13c20:	str	r3, [sp, #36]	; 0x24
   13c24:	b	13098 <__assert_fail@plt+0x1b28>
   13c28:	movw	r3, #57832	; 0xe1e8
   13c2c:	movt	r3, #2
   13c30:	ldr	r2, [r3, #144]	; 0x90
   13c34:	movw	r3, #6100	; 0x17d4
   13c38:	movt	r3, #1
   13c3c:	cmp	sl, r3
   13c40:	movne	r3, #0
   13c44:	moveq	r3, #1
   13c48:	cmp	r2, #0
   13c4c:	moveq	r3, #0
   13c50:	cmp	r3, #0
   13c54:	bne	13e10 <__assert_fail@plt+0x28a0>
   13c58:	blx	r6
   13c5c:	ldr	r3, [sp, #44]	; 0x2c
   13c60:	cmp	r3, #0
   13c64:	bne	13e38 <__assert_fail@plt+0x28c8>
   13c68:	movw	r3, #5744	; 0x1670
   13c6c:	movt	r3, #1
   13c70:	str	r3, [sp, #52]	; 0x34
   13c74:	add	r0, sp, #56	; 0x38
   13c78:	bl	11498 <sigemptyset@plt>
   13c7c:	mov	r2, #0
   13c80:	str	r2, [sp, #184]	; 0xb8
   13c84:	add	r1, sp, #52	; 0x34
   13c88:	mov	r0, #10
   13c8c:	bl	112c4 <sigaction@plt>
   13c90:	cmp	r0, #0
   13c94:	bne	13e54 <__assert_fail@plt+0x28e4>
   13c98:	movw	r3, #5804	; 0x16ac
   13c9c:	movt	r3, #1
   13ca0:	str	r3, [sp, #52]	; 0x34
   13ca4:	add	r0, sp, #56	; 0x38
   13ca8:	bl	11498 <sigemptyset@plt>
   13cac:	mov	r2, #0
   13cb0:	str	r2, [sp, #184]	; 0xb8
   13cb4:	add	r1, sp, #52	; 0x34
   13cb8:	mov	r0, #12
   13cbc:	bl	112c4 <sigaction@plt>
   13cc0:	cmp	r0, #0
   13cc4:	bne	13e84 <__assert_fail@plt+0x2914>
   13cc8:	movw	r1, #51132	; 0xc7bc
   13ccc:	movt	r1, #1
   13cd0:	mov	r0, r9
   13cd4:	bl	111b0 <strcmp@plt>
   13cd8:	cmp	r0, #0
   13cdc:	bne	13eb4 <__assert_fail@plt+0x2944>
   13ce0:	movw	r3, #57832	; 0xe1e8
   13ce4:	movt	r3, #2
   13ce8:	movw	r2, #57816	; 0xe1d8
   13cec:	movt	r2, #2
   13cf0:	ldr	r2, [r2]
   13cf4:	str	r2, [r3, #100]	; 0x64
   13cf8:	movw	r3, #57832	; 0xe1e8
   13cfc:	movt	r3, #2
   13d00:	ldr	r3, [r3, #28]
   13d04:	cmp	r3, #0
   13d08:	beq	13f1c <__assert_fail@plt+0x29ac>
   13d0c:	movw	r3, #57832	; 0xe1e8
   13d10:	movt	r3, #2
   13d14:	mov	r2, #1
   13d18:	str	r2, [r3, #4]
   13d1c:	movw	r3, #57800	; 0xe1c8
   13d20:	movt	r3, #2
   13d24:	ldr	r3, [r3]
   13d28:	ldr	r2, [sp, #24]
   13d2c:	cmp	r3, r2
   13d30:	beq	13f34 <__assert_fail@plt+0x29c4>
   13d34:	ldr	r3, [sp, #36]	; 0x24
   13d38:	cmp	r3, #0
   13d3c:	bne	13f6c <__assert_fail@plt+0x29fc>
   13d40:	movw	r4, #57832	; 0xe1e8
   13d44:	movt	r4, #2
   13d48:	ldr	r0, [r4, #16]
   13d4c:	add	r0, r0, #1
   13d50:	bl	1a050 <__assert_fail@plt+0x8ae0>
   13d54:	str	r0, [r4, #92]	; 0x5c
   13d58:	ldr	r0, [r4, #16]
   13d5c:	add	r0, r0, #1
   13d60:	bl	1a050 <__assert_fail@plt+0x8ae0>
   13d64:	str	r0, [r4, #60]	; 0x3c
   13d68:	mov	r1, #0
   13d6c:	mov	r0, #17
   13d70:	bl	11240 <signal@plt>
   13d74:	ldr	r3, [r4, #28]
   13d78:	cmp	r3, #0
   13d7c:	beq	14128 <__assert_fail@plt+0x2bb8>
   13d80:	ldr	r4, [sp, #24]
   13d84:	lsl	r6, r4, #2
   13d88:	mov	r0, r6
   13d8c:	bl	1a050 <__assert_fail@plt+0x8ae0>
   13d90:	str	r0, [sp, #32]
   13d94:	movw	r3, #57800	; 0xe1c8
   13d98:	movt	r3, #2
   13d9c:	ldr	r3, [r3]
   13da0:	cmp	r4, r3
   13da4:	ble	13dd0 <__assert_fail@plt+0x2860>
   13da8:	lsl	r3, r3, #2
   13dac:	ldr	r2, [sp, #28]
   13db0:	add	r4, r2, r3
   13db4:	add	r5, r0, r3
   13db8:	add	r7, r2, r6
   13dbc:	ldr	r0, [r4], #4
   13dc0:	bl	113c0 <strlen@plt>
   13dc4:	str	r0, [r5], #4
   13dc8:	cmp	r4, r7
   13dcc:	bne	13dbc <__assert_fail@plt+0x284c>
   13dd0:	movw	r4, #57832	; 0xe1e8
   13dd4:	movt	r4, #2
   13dd8:	ldr	r0, [r4, #28]
   13ddc:	bl	113c0 <strlen@plt>
   13de0:	str	r0, [r4, #24]
   13de4:	ldr	r3, [sp, #28]
   13de8:	sub	r8, r3, #4
   13dec:	add	r8, r8, r6
   13df0:	mov	r6, r4
   13df4:	add	r2, r4, #48	; 0x30
   13df8:	str	r2, [sp, #28]
   13dfc:	movw	r9, #57800	; 0xe1c8
   13e00:	movt	r9, #2
   13e04:	str	sl, [sp, #36]	; 0x24
   13e08:	mov	sl, r3
   13e0c:	b	1428c <__assert_fail@plt+0x2d1c>
   13e10:	mov	r2, #5
   13e14:	movw	r1, #52048	; 0xcb50
   13e18:	movt	r1, #1
   13e1c:	mov	r0, #0
   13e20:	bl	11258 <dcgettext@plt>
   13e24:	mov	r2, r0
   13e28:	mov	r1, #0
   13e2c:	mov	r0, r1
   13e30:	bl	11324 <error@plt>
   13e34:	b	13c58 <__assert_fail@plt+0x26e8>
   13e38:	ldr	r3, [pc, #296]	; 13f68 <__assert_fail@plt+0x29f8>
   13e3c:	movw	r2, #723	; 0x2d3
   13e40:	movw	r1, #47344	; 0xb8f0
   13e44:	movt	r1, #1
   13e48:	movw	r0, #52108	; 0xcb8c
   13e4c:	movt	r0, #1
   13e50:	bl	11570 <__assert_fail@plt>
   13e54:	bl	113f0 <__errno_location@plt>
   13e58:	ldr	r4, [r0]
   13e5c:	mov	r2, #5
   13e60:	movw	r1, #52132	; 0xcba4
   13e64:	movt	r1, #1
   13e68:	mov	r0, #0
   13e6c:	bl	11258 <dcgettext@plt>
   13e70:	mov	r2, r0
   13e74:	mov	r1, r4
   13e78:	mov	r0, #0
   13e7c:	bl	11324 <error@plt>
   13e80:	b	13c98 <__assert_fail@plt+0x2728>
   13e84:	bl	113f0 <__errno_location@plt>
   13e88:	ldr	r4, [r0]
   13e8c:	mov	r2, #5
   13e90:	movw	r1, #52168	; 0xcbc8
   13e94:	movt	r1, #1
   13e98:	mov	r0, #0
   13e9c:	bl	11258 <dcgettext@plt>
   13ea0:	mov	r2, r0
   13ea4:	mov	r1, r4
   13ea8:	mov	r0, #0
   13eac:	bl	11324 <error@plt>
   13eb0:	b	13cc8 <__assert_fail@plt+0x2758>
   13eb4:	movw	r4, #57832	; 0xe1e8
   13eb8:	movt	r4, #2
   13ebc:	mov	r3, #1
   13ec0:	str	r3, [r4, #164]	; 0xa4
   13ec4:	mov	r0, r9
   13ec8:	bl	1276c <__assert_fail@plt+0x11fc>
   13ecc:	str	r0, [r4, #100]	; 0x64
   13ed0:	cmp	r0, #0
   13ed4:	bne	13cf8 <__assert_fail@plt+0x2788>
   13ed8:	bl	113f0 <__errno_location@plt>
   13edc:	ldr	r4, [r0]
   13ee0:	mov	r2, #5
   13ee4:	movw	r1, #52204	; 0xcbec
   13ee8:	movt	r1, #1
   13eec:	mov	r0, #0
   13ef0:	bl	11258 <dcgettext@plt>
   13ef4:	mov	r5, r0
   13ef8:	mov	r2, r9
   13efc:	mov	r1, #8
   13f00:	mov	r0, #0
   13f04:	bl	195bc <__assert_fail@plt+0x804c>
   13f08:	mov	r3, r0
   13f0c:	mov	r2, r5
   13f10:	mov	r1, r4
   13f14:	mov	r0, #1
   13f18:	bl	11324 <error@plt>
   13f1c:	movw	r3, #57832	; 0xe1e8
   13f20:	movt	r3, #2
   13f24:	ldr	r3, [r3, #40]	; 0x28
   13f28:	cmp	r3, #0
   13f2c:	beq	13d1c <__assert_fail@plt+0x27ac>
   13f30:	b	13d0c <__assert_fail@plt+0x279c>
   13f34:	movw	r3, #57800	; 0xe1c8
   13f38:	movt	r3, #2
   13f3c:	mov	r2, #0
   13f40:	str	r2, [r3]
   13f44:	add	r3, sp, #196	; 0xc4
   13f48:	str	r3, [sp, #192]	; 0xc0
   13f4c:	add	r3, sp, #192	; 0xc0
   13f50:	str	r3, [sp, #28]
   13f54:	mov	r3, #1
   13f58:	str	r3, [sp, #24]
   13f5c:	b	13d34 <__assert_fail@plt+0x27c4>
   13f60:	andeq	lr, r2, ip, ror #3
   13f64:	andeq	fp, r1, r8, lsl #13
   13f68:	andeq	fp, r1, r0, lsl #13
   13f6c:	movw	r5, #57808	; 0xe1d0
   13f70:	movt	r5, #2
   13f74:	ldr	r6, [r5]
   13f78:	mov	r2, #5
   13f7c:	movw	r1, #52232	; 0xcc08
   13f80:	movt	r1, #1
   13f84:	mov	r0, #0
   13f88:	bl	11258 <dcgettext@plt>
   13f8c:	mov	r7, r0
   13f90:	bl	14bb8 <__assert_fail@plt+0x3648>
   13f94:	mov	r4, #0
   13f98:	mov	r2, r0
   13f9c:	mov	r3, r4
   13fa0:	mov	r1, r7
   13fa4:	mov	r0, r6
   13fa8:	bl	113e4 <fprintf@plt>
   13fac:	ldr	r7, [r5]
   13fb0:	mov	r2, #5
   13fb4:	movw	r1, #52280	; 0xcc38
   13fb8:	movt	r1, #1
   13fbc:	mov	r0, r4
   13fc0:	bl	11258 <dcgettext@plt>
   13fc4:	movw	r6, #57832	; 0xe1e8
   13fc8:	movt	r6, #2
   13fcc:	ldr	r2, [r6, #8]
   13fd0:	mov	r3, r4
   13fd4:	mov	r1, r0
   13fd8:	mov	r0, r7
   13fdc:	bl	113e4 <fprintf@plt>
   13fe0:	ldr	r7, [r5]
   13fe4:	mov	r2, #5
   13fe8:	movw	r1, #52340	; 0xcc74
   13fec:	movt	r1, #1
   13ff0:	mov	r0, r4
   13ff4:	bl	11258 <dcgettext@plt>
   13ff8:	ldr	r2, [r6, #12]
   13ffc:	mov	r3, r4
   14000:	mov	r1, r0
   14004:	mov	r0, r7
   14008:	bl	113e4 <fprintf@plt>
   1400c:	ldr	r7, [r5]
   14010:	mov	r2, #5
   14014:	movw	r1, #52420	; 0xccc4
   14018:	movt	r1, #1
   1401c:	mov	r0, r4
   14020:	bl	11258 <dcgettext@plt>
   14024:	mov	r9, r0
   14028:	ldr	r8, [r6, #8]
   1402c:	bl	14bb8 <__assert_fail@plt+0x3648>
   14030:	sub	r2, r8, r0
   14034:	mov	r3, r4
   14038:	mov	r1, r9
   1403c:	mov	r0, r7
   14040:	bl	113e4 <fprintf@plt>
   14044:	ldr	r7, [r5]
   14048:	mov	r2, #5
   1404c:	movw	r1, #52476	; 0xccfc
   14050:	movt	r1, #1
   14054:	mov	r0, r4
   14058:	bl	11258 <dcgettext@plt>
   1405c:	ldr	r2, [r6, #16]
   14060:	mov	r3, r4
   14064:	mov	r1, r0
   14068:	mov	r0, r7
   1406c:	bl	113e4 <fprintf@plt>
   14070:	ldr	r5, [r5]
   14074:	mov	r2, #5
   14078:	movw	r1, #52528	; 0xcd30
   1407c:	movt	r1, #1
   14080:	mov	r0, r4
   14084:	bl	11258 <dcgettext@plt>
   14088:	mvn	r2, #-2147483648	; 0x80000000
   1408c:	mov	r3, #0
   14090:	mov	r1, r0
   14094:	mov	r0, r5
   14098:	bl	113e4 <fprintf@plt>
   1409c:	mov	r0, r4
   140a0:	bl	11510 <isatty@plt>
   140a4:	cmp	r0, r4
   140a8:	beq	13d40 <__assert_fail@plt+0x27d0>
   140ac:	movw	r3, #57808	; 0xe1d0
   140b0:	movt	r3, #2
   140b4:	ldr	r4, [r3]
   140b8:	mov	r2, #5
   140bc:	movw	r1, #52588	; 0xcd6c
   140c0:	movt	r1, #1
   140c4:	mov	r0, #0
   140c8:	bl	11258 <dcgettext@plt>
   140cc:	mov	r1, r0
   140d0:	mov	r0, r4
   140d4:	bl	113e4 <fprintf@plt>
   140d8:	ldr	r3, [sp, #40]	; 0x28
   140dc:	cmp	r3, #0
   140e0:	beq	13d40 <__assert_fail@plt+0x27d0>
   140e4:	movw	r3, #57808	; 0xe1d0
   140e8:	movt	r3, #2
   140ec:	ldr	r4, [r3]
   140f0:	mov	r2, #5
   140f4:	movw	r1, #52764	; 0xce1c
   140f8:	movt	r1, #1
   140fc:	mov	r0, #0
   14100:	bl	11258 <dcgettext@plt>
   14104:	movw	r3, #57800	; 0xe1c8
   14108:	movt	r3, #2
   1410c:	ldr	r3, [r3]
   14110:	ldr	r2, [sp, #28]
   14114:	ldr	r2, [r2, r3, lsl #2]
   14118:	mov	r1, r0
   1411c:	mov	r0, r4
   14120:	bl	113e4 <fprintf@plt>
   14124:	b	13d40 <__assert_fail@plt+0x27d0>
   14128:	movw	r3, #57800	; 0xe1c8
   1412c:	movt	r3, #2
   14130:	ldr	r3, [r3]
   14134:	ldr	r7, [sp, #24]
   14138:	cmp	r3, r7
   1413c:	bge	141a8 <__assert_fail@plt+0x2c38>
   14140:	movw	r4, #57832	; 0xe1e8
   14144:	movt	r4, #2
   14148:	add	r6, r4, #48	; 0x30
   1414c:	movw	r5, #57700	; 0xe164
   14150:	movt	r5, #2
   14154:	ldr	r8, [sp, #28]
   14158:	ldr	r9, [r8, r3, lsl #2]
   1415c:	mov	r0, r9
   14160:	bl	113c0 <strlen@plt>
   14164:	ldrb	r3, [r5, #4]
   14168:	str	r3, [sp, #8]
   1416c:	mov	r3, #0
   14170:	str	r3, [sp, #4]
   14174:	str	r3, [sp]
   14178:	add	r3, r0, #1
   1417c:	mov	r2, r9
   14180:	mov	r1, r6
   14184:	add	r0, r4, #4
   14188:	bl	14404 <__assert_fail@plt+0x2e94>
   1418c:	movw	r2, #57800	; 0xe1c8
   14190:	movt	r2, #2
   14194:	ldr	r3, [r2]
   14198:	add	r3, r3, #1
   1419c:	str	r3, [r2]
   141a0:	cmp	r3, r7
   141a4:	blt	14158 <__assert_fail@plt+0x2be8>
   141a8:	movw	r3, #57700	; 0xe164
   141ac:	movt	r3, #2
   141b0:	mov	r2, #0
   141b4:	strb	r2, [r3, #4]
   141b8:	movw	r3, #57832	; 0xe1e8
   141bc:	movt	r3, #2
   141c0:	ldr	r2, [r3, #48]	; 0x30
   141c4:	str	r2, [r3, #32]
   141c8:	ldr	r2, [r3, #64]	; 0x40
   141cc:	str	r2, [r3, #68]	; 0x44
   141d0:	mov	r4, r3
   141d4:	add	r6, r3, #48	; 0x30
   141d8:	add	r5, r3, #4
   141dc:	blx	sl
   141e0:	cmn	r0, #1
   141e4:	beq	14218 <__assert_fail@plt+0x2ca8>
   141e8:	ldr	r3, [r4, #40]	; 0x28
   141ec:	cmp	r3, #0
   141f0:	beq	141dc <__assert_fail@plt+0x2c6c>
   141f4:	ldr	r2, [r4, #108]	; 0x6c
   141f8:	cmp	r3, r2
   141fc:	bhi	141dc <__assert_fail@plt+0x2c6c>
   14200:	mov	r1, r6
   14204:	mov	r0, r5
   14208:	bl	1489c <__assert_fail@plt+0x332c>
   1420c:	mov	r3, #0
   14210:	str	r3, [r4, #108]	; 0x6c
   14214:	b	141dc <__assert_fail@plt+0x2c6c>
   14218:	movw	r3, #57832	; 0xe1e8
   1421c:	movt	r3, #2
   14220:	ldr	r2, [r3, #48]	; 0x30
   14224:	ldr	r3, [r3, #32]
   14228:	cmp	r2, r3
   1422c:	bne	14250 <__assert_fail@plt+0x2ce0>
   14230:	ldr	r3, [sp, #40]	; 0x28
   14234:	cmp	r3, #0
   14238:	beq	14264 <__assert_fail@plt+0x2cf4>
   1423c:	movw	r3, #57832	; 0xe1e8
   14240:	movt	r3, #2
   14244:	ldrb	r3, [r3, #140]	; 0x8c
   14248:	cmp	r3, #0
   1424c:	bne	14264 <__assert_fail@plt+0x2cf4>
   14250:	movw	r0, #57832	; 0xe1e8
   14254:	movt	r0, #2
   14258:	add	r1, r0, #48	; 0x30
   1425c:	add	r0, r0, #4
   14260:	bl	1489c <__assert_fail@plt+0x332c>
   14264:	movw	r3, #57832	; 0xe1e8
   14268:	movt	r3, #2
   1426c:	ldr	r2, [r3, #124]	; 0x7c
   14270:	str	r2, [r3, #136]	; 0x88
   14274:	ldr	r3, [r3, #124]	; 0x7c
   14278:	str	r3, [sp, #32]
   1427c:	b	13b58 <__assert_fail@plt+0x25e8>
   14280:	ldr	r1, [sp, #28]
   14284:	add	r0, r6, #4
   14288:	bl	1489c <__assert_fail@plt+0x332c>
   1428c:	ldr	r3, [sp, #36]	; 0x24
   14290:	blx	r3
   14294:	mov	r7, r0
   14298:	cmn	r0, #1
   1429c:	beq	14264 <__assert_fail@plt+0x2cf4>
   142a0:	add	fp, r6, #4
   142a4:	ldr	r1, [sp, #28]
   142a8:	mov	r0, fp
   142ac:	bl	14da8 <__assert_fail@plt+0x3838>
   142b0:	mov	r5, #0
   142b4:	str	r5, [r6, #64]	; 0x40
   142b8:	ldr	r2, [r9]
   142bc:	ldr	r3, [sp, #32]
   142c0:	ldr	r3, [r3, r2, lsl #2]
   142c4:	ldr	r2, [sl, r2, lsl #2]
   142c8:	movw	r4, #57700	; 0xe164
   142cc:	movt	r4, #2
   142d0:	ldrb	r1, [r4, #4]
   142d4:	str	r1, [sp, #8]
   142d8:	str	r5, [sp, #4]
   142dc:	str	r5, [sp]
   142e0:	add	r3, r3, #1
   142e4:	ldr	r1, [sp, #28]
   142e8:	mov	r0, fp
   142ec:	bl	14404 <__assert_fail@plt+0x2e94>
   142f0:	sub	r7, r7, #1
   142f4:	strb	r5, [r4, #4]
   142f8:	ldr	r5, [r9]
   142fc:	add	r3, r5, #1
   14300:	ldr	r2, [sp, #24]
   14304:	cmp	r2, r3
   14308:	ble	14280 <__assert_fail@plt+0x2d10>
   1430c:	lsl	r5, r5, #2
   14310:	add	r4, sl, r5
   14314:	ldr	r3, [sp, #32]
   14318:	add	r5, r3, r5
   1431c:	movw	fp, #57700	; 0xe164
   14320:	movt	fp, #2
   14324:	ldr	r2, [r4, #4]!
   14328:	ldrb	r3, [fp, #4]
   1432c:	str	r3, [sp, #16]
   14330:	str	r7, [sp, #12]
   14334:	ldr	r3, [r6, #92]	; 0x5c
   14338:	str	r3, [sp, #8]
   1433c:	mov	r3, #0
   14340:	str	r3, [sp, #4]
   14344:	str	r3, [sp]
   14348:	ldr	r3, [r5, #4]!
   1434c:	ldr	r1, [sp, #28]
   14350:	add	r0, r6, #4
   14354:	bl	146dc <__assert_fail@plt+0x316c>
   14358:	cmp	r4, r8
   1435c:	bne	14324 <__assert_fail@plt+0x2db4>
   14360:	b	14280 <__assert_fail@plt+0x2d10>
   14364:	mov	r0, #0
   14368:	bx	lr
   1436c:	strd	r4, [sp, #-12]!
   14370:	str	lr, [sp, #8]
   14374:	sub	sp, sp, #20
   14378:	mov	r5, r0
   1437c:	mov	r4, r1
   14380:	bl	11348 <getenv@plt>
   14384:	cmp	r0, #0
   14388:	beq	143fc <__assert_fail@plt+0x2e8c>
   1438c:	mov	r3, #0
   14390:	str	r3, [sp]
   14394:	add	r3, sp, #12
   14398:	mov	r2, #10
   1439c:	add	r1, sp, #8
   143a0:	bl	1a58c <__assert_fail@plt+0x901c>
   143a4:	cmp	r0, #0
   143a8:	bne	143cc <__assert_fail@plt+0x2e5c>
   143ac:	ldr	r0, [sp, #12]
   143b0:	cmp	r0, r4
   143b4:	movcs	r0, #0
   143b8:	movcc	r0, #1
   143bc:	add	sp, sp, #20
   143c0:	ldrd	r4, [sp]
   143c4:	add	sp, sp, #8
   143c8:	pop	{pc}		; (ldr pc, [sp], #4)
   143cc:	bl	113f0 <__errno_location@plt>
   143d0:	ldr	r4, [r0]
   143d4:	mov	r2, #5
   143d8:	movw	r1, #53152	; 0xcfa0
   143dc:	movt	r1, #1
   143e0:	mov	r0, #0
   143e4:	bl	11258 <dcgettext@plt>
   143e8:	mov	r3, r5
   143ec:	mov	r2, r0
   143f0:	mov	r1, r4
   143f4:	mov	r0, #1
   143f8:	bl	11324 <error@plt>
   143fc:	mov	r0, #0
   14400:	b	143bc <__assert_fail@plt+0x2e4c>
   14404:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14408:	strd	r6, [sp, #8]
   1440c:	strd	r8, [sp, #16]
   14410:	str	sl, [sp, #24]
   14414:	str	lr, [sp, #28]
   14418:	ldr	r9, [sp, #36]	; 0x24
   1441c:	ldr	r7, [sp, #40]	; 0x28
   14420:	subs	r6, r2, #0
   14424:	beq	144e4 <__assert_fail@plt+0x2f74>
   14428:	mov	r5, r0
   1442c:	mov	r4, r1
   14430:	mov	r8, r3
   14434:	movw	r3, #53240	; 0xcff8
   14438:	movt	r3, #1
   1443c:	cmp	r6, r3
   14440:	beq	14570 <__assert_fail@plt+0x3000>
   14444:	add	r3, r8, r9
   14448:	ldr	r2, [r1, #16]
   1444c:	add	r3, r3, r2
   14450:	ldr	r2, [r0, #12]
   14454:	cmp	r3, r2
   14458:	bls	1454c <__assert_fail@plt+0x2fdc>
   1445c:	cmp	r7, #0
   14460:	bne	14504 <__assert_fail@plt+0x2f94>
   14464:	ldr	r2, [r1]
   14468:	ldr	r3, [r0, #28]
   1446c:	cmp	r2, r3
   14470:	beq	14504 <__assert_fail@plt+0x2f94>
   14474:	ldr	r3, [r0, #24]
   14478:	cmp	r3, #0
   1447c:	bne	14528 <__assert_fail@plt+0x2fb8>
   14480:	ldr	r3, [r0]
   14484:	cmp	r3, #0
   14488:	beq	144a4 <__assert_fail@plt+0x2f34>
   1448c:	ldr	r3, [r0, #36]	; 0x24
   14490:	cmp	r3, #0
   14494:	bne	14528 <__assert_fail@plt+0x2fb8>
   14498:	ldr	r3, [r0, #40]	; 0x28
   1449c:	cmp	r3, #0
   144a0:	bne	14528 <__assert_fail@plt+0x2fb8>
   144a4:	mov	r1, r4
   144a8:	mov	r0, r5
   144ac:	bl	1489c <__assert_fail@plt+0x332c>
   144b0:	ldr	r3, [r5, #40]	; 0x28
   144b4:	cmp	r3, #0
   144b8:	beq	144d0 <__assert_fail@plt+0x2f60>
   144bc:	ldr	r2, [r4]
   144c0:	ldr	r1, [r5, #28]
   144c4:	sub	r2, r2, r1
   144c8:	cmp	r3, r2
   144cc:	beq	14564 <__assert_fail@plt+0x2ff4>
   144d0:	ldr	r2, [r4]
   144d4:	ldr	r3, [r5, #16]
   144d8:	cmp	r2, r3
   144dc:	bne	14570 <__assert_fail@plt+0x3000>
   144e0:	b	14564 <__assert_fail@plt+0x2ff4>
   144e4:	movw	r3, #53080	; 0xcf58
   144e8:	movt	r3, #1
   144ec:	movw	r2, #341	; 0x155
   144f0:	movw	r1, #53216	; 0xcfe0
   144f4:	movt	r1, #1
   144f8:	movw	r0, #53228	; 0xcfec
   144fc:	movt	r0, #1
   14500:	bl	11570 <__assert_fail@plt>
   14504:	mov	r2, #5
   14508:	movw	r1, #53252	; 0xd004
   1450c:	movt	r1, #1
   14510:	mov	r0, #0
   14514:	bl	11258 <dcgettext@plt>
   14518:	mov	r2, r0
   1451c:	mov	r1, #0
   14520:	mov	r0, #1
   14524:	bl	11324 <error@plt>
   14528:	mov	r2, #5
   1452c:	movw	r1, #53312	; 0xd040
   14530:	movt	r1, #1
   14534:	mov	r0, #0
   14538:	bl	11258 <dcgettext@plt>
   1453c:	mov	r2, r0
   14540:	mov	r1, #0
   14544:	mov	r0, #1
   14548:	bl	11324 <error@plt>
   1454c:	cmp	r7, #0
   14550:	beq	144b0 <__assert_fail@plt+0x2f40>
   14554:	ldr	r2, [r1]
   14558:	ldr	r3, [r0, #16]
   1455c:	cmp	r2, r3
   14560:	bne	1457c <__assert_fail@plt+0x300c>
   14564:	mov	r1, r4
   14568:	mov	r0, r5
   1456c:	bl	1489c <__assert_fail@plt+0x332c>
   14570:	cmp	r7, #0
   14574:	moveq	r3, #1
   14578:	streq	r3, [r4, #28]
   1457c:	ldr	r1, [r4, #8]
   14580:	ldr	r3, [r4]
   14584:	cmp	r3, r1
   14588:	bcc	145ac <__assert_fail@plt+0x303c>
   1458c:	ldr	r0, [r4, #4]
   14590:	cmp	r0, #0
   14594:	beq	14664 <__assert_fail@plt+0x30f4>
   14598:	lsl	r3, r1, #1
   1459c:	str	r3, [r4, #8]
   145a0:	lsl	r1, r1, #3
   145a4:	bl	1a0b0 <__assert_fail@plt+0x8b40>
   145a8:	str	r0, [r4, #4]
   145ac:	movw	r3, #53240	; 0xcff8
   145b0:	movt	r3, #1
   145b4:	cmp	r6, r3
   145b8:	beq	1467c <__assert_fail@plt+0x310c>
   145bc:	ldr	r3, [r4, #12]
   145c0:	ldr	r0, [r4, #16]
   145c4:	ldr	r1, [r4, #4]
   145c8:	ldr	r2, [r4]
   145cc:	add	ip, r2, #1
   145d0:	str	ip, [r4]
   145d4:	add	r3, r3, r0
   145d8:	str	r3, [r1, r2, lsl #2]
   145dc:	ldr	r3, [sp, #32]
   145e0:	cmp	r3, #0
   145e4:	beq	14608 <__assert_fail@plt+0x3098>
   145e8:	ldr	r0, [r4, #12]
   145ec:	ldr	r3, [r4, #16]
   145f0:	ldr	r1, [sp, #32]
   145f4:	add	r0, r0, r3
   145f8:	bl	11300 <strcpy@plt>
   145fc:	ldr	r3, [r4, #16]
   14600:	add	r9, r3, r9
   14604:	str	r9, [r4, #16]
   14608:	ldr	r0, [r4, #12]
   1460c:	ldr	r3, [r4, #16]
   14610:	mov	r1, r6
   14614:	add	r0, r0, r3
   14618:	bl	11300 <strcpy@plt>
   1461c:	ldr	r3, [r4, #16]
   14620:	add	r3, r3, r8
   14624:	str	r3, [r4, #16]
   14628:	cmp	r7, #0
   1462c:	bne	146bc <__assert_fail@plt+0x314c>
   14630:	ldr	r3, [r5, #40]	; 0x28
   14634:	cmp	r3, #0
   14638:	beq	14650 <__assert_fail@plt+0x30e0>
   1463c:	ldr	r2, [r4]
   14640:	ldr	r1, [r5, #28]
   14644:	sub	r2, r2, r1
   14648:	cmp	r3, r2
   1464c:	beq	146cc <__assert_fail@plt+0x315c>
   14650:	ldr	r2, [r4]
   14654:	ldr	r3, [r5, #16]
   14658:	cmp	r2, r3
   1465c:	bne	146a4 <__assert_fail@plt+0x3134>
   14660:	b	146cc <__assert_fail@plt+0x315c>
   14664:	mov	r3, #64	; 0x40
   14668:	str	r3, [r4, #8]
   1466c:	mov	r0, #256	; 0x100
   14670:	bl	1a050 <__assert_fail@plt+0x8ae0>
   14674:	str	r0, [r4, #4]
   14678:	b	145ac <__assert_fail@plt+0x303c>
   1467c:	ldr	r2, [r4, #4]
   14680:	ldr	r3, [r4]
   14684:	add	r1, r3, #1
   14688:	str	r1, [r4]
   1468c:	mov	r1, #0
   14690:	str	r1, [r2, r3, lsl #2]
   14694:	cmp	r7, #0
   14698:	beq	146a4 <__assert_fail@plt+0x3134>
   1469c:	ldr	r3, [r4, #16]
   146a0:	str	r3, [r4, #20]
   146a4:	ldrd	r4, [sp]
   146a8:	ldrd	r6, [sp, #8]
   146ac:	ldrd	r8, [sp, #16]
   146b0:	ldr	sl, [sp, #24]
   146b4:	add	sp, sp, #28
   146b8:	pop	{pc}		; (ldr pc, [sp], #4)
   146bc:	ldr	r2, [r4]
   146c0:	ldr	r3, [r5, #16]
   146c4:	cmp	r2, r3
   146c8:	bne	1469c <__assert_fail@plt+0x312c>
   146cc:	mov	r1, r4
   146d0:	mov	r0, r5
   146d4:	bl	1489c <__assert_fail@plt+0x332c>
   146d8:	b	14694 <__assert_fail@plt+0x3124>
   146dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   146e0:	strd	r6, [sp, #8]
   146e4:	strd	r8, [sp, #16]
   146e8:	strd	sl, [sp, #24]
   146ec:	str	lr, [sp, #32]
   146f0:	sub	sp, sp, #28
   146f4:	mov	sl, r0
   146f8:	str	r1, [sp, #20]
   146fc:	mov	r6, r2
   14700:	mov	r5, r3
   14704:	ldr	r0, [r0, #12]
   14708:	sub	r7, r0, #1
   1470c:	movw	r3, #58004	; 0xe294
   14710:	movt	r3, #2
   14714:	ldr	r3, [r3]
   14718:	cmp	r3, #0
   1471c:	beq	14744 <__assert_fail@plt+0x31d4>
   14720:	movw	r3, #58004	; 0xe294
   14724:	movt	r3, #2
   14728:	ldr	r3, [r3]
   1472c:	str	r3, [sp, #16]
   14730:	mov	r4, r3
   14734:	ldr	r3, [sp, #76]	; 0x4c
   14738:	ldr	r2, [sp, #68]	; 0x44
   1473c:	add	fp, r3, r2
   14740:	b	1478c <__assert_fail@plt+0x321c>
   14744:	add	r0, r0, #1
   14748:	bl	1a050 <__assert_fail@plt+0x8ae0>
   1474c:	movw	r3, #58004	; 0xe294
   14750:	movt	r3, #2
   14754:	str	r0, [r3]
   14758:	b	14720 <__assert_fail@plt+0x31b0>
   1475c:	ldr	r1, [sp, #72]	; 0x48
   14760:	mov	r0, r4
   14764:	bl	11300 <strcpy@plt>
   14768:	ldr	r3, [sp, #76]	; 0x4c
   1476c:	add	r4, r4, r3
   14770:	ldr	r3, [sl, #20]
   14774:	add	r6, r9, r3
   14778:	sub	r5, r5, r3
   1477c:	sub	r5, r5, r8
   14780:	ldrb	r3, [r6]
   14784:	cmp	r3, #0
   14788:	beq	14804 <__assert_fail@plt+0x3294>
   1478c:	ldr	r1, [sl, #24]
   14790:	mov	r0, r6
   14794:	bl	166fc <__assert_fail@plt+0x518c>
   14798:	subs	r9, r0, #0
   1479c:	beq	14870 <__assert_fail@plt+0x3300>
   147a0:	sub	r8, r9, r6
   147a4:	cmp	r7, r8
   147a8:	bls	147f8 <__assert_fail@plt+0x3288>
   147ac:	sub	r7, r7, r8
   147b0:	mov	r2, r8
   147b4:	mov	r1, r6
   147b8:	mov	r0, r4
   147bc:	bl	11420 <strncpy@plt>
   147c0:	add	r4, r4, r8
   147c4:	cmp	fp, r7
   147c8:	bcs	147f4 <__assert_fail@plt+0x3284>
   147cc:	sub	r7, r7, fp
   147d0:	ldr	r3, [sp, #64]	; 0x40
   147d4:	cmp	r3, #0
   147d8:	beq	1475c <__assert_fail@plt+0x31ec>
   147dc:	mov	r1, r3
   147e0:	mov	r0, r4
   147e4:	bl	11300 <strcpy@plt>
   147e8:	ldr	r3, [sp, #68]	; 0x44
   147ec:	add	r4, r4, r3
   147f0:	b	1475c <__assert_fail@plt+0x31ec>
   147f4:	mov	r6, r9
   147f8:	ldrb	r3, [r6]
   147fc:	cmp	r3, #0
   14800:	bne	1484c <__assert_fail@plt+0x32dc>
   14804:	mov	r3, #0
   14808:	strb	r3, [r4], #1
   1480c:	ldr	r2, [sp, #80]	; 0x50
   14810:	str	r2, [sp, #8]
   14814:	str	r3, [sp, #4]
   14818:	str	r3, [sp]
   1481c:	ldr	r2, [sp, #16]
   14820:	sub	r3, r4, r2
   14824:	ldr	r1, [sp, #20]
   14828:	mov	r0, sl
   1482c:	bl	14404 <__assert_fail@plt+0x2e94>
   14830:	add	sp, sp, #28
   14834:	ldrd	r4, [sp]
   14838:	ldrd	r6, [sp, #8]
   1483c:	ldrd	r8, [sp, #16]
   14840:	ldrd	sl, [sp, #24]
   14844:	add	sp, sp, #32
   14848:	pop	{pc}		; (ldr pc, [sp], #4)
   1484c:	mov	r2, #5
   14850:	movw	r1, #53336	; 0xd058
   14854:	movt	r1, #1
   14858:	mov	r0, #0
   1485c:	bl	11258 <dcgettext@plt>
   14860:	mov	r2, r0
   14864:	mov	r1, #0
   14868:	mov	r0, #1
   1486c:	bl	11324 <error@plt>
   14870:	cmp	r5, r7
   14874:	bcs	147f8 <__assert_fail@plt+0x3288>
   14878:	sub	r7, r7, r5
   1487c:	mov	r2, r5
   14880:	mov	r1, r6
   14884:	mov	r0, r4
   14888:	bl	11420 <strncpy@plt>
   1488c:	add	r4, r4, r5
   14890:	add	r6, r6, r5
   14894:	mov	r5, #0
   14898:	b	14780 <__assert_fail@plt+0x3210>
   1489c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   148a0:	strd	r6, [sp, #8]
   148a4:	strd	r8, [sp, #16]
   148a8:	strd	sl, [sp, #24]
   148ac:	str	lr, [sp, #32]
   148b0:	sub	sp, sp, #20
   148b4:	mov	r7, r0
   148b8:	mov	r6, r1
   148bc:	mov	r3, #0
   148c0:	str	r3, [sp, #8]
   148c4:	str	r3, [sp, #4]
   148c8:	str	r3, [sp]
   148cc:	movw	r2, #53240	; 0xcff8
   148d0:	movt	r2, #1
   148d4:	bl	14404 <__assert_fail@plt+0x2e94>
   148d8:	ldr	r3, [r6]
   148dc:	cmp	r3, #0
   148e0:	beq	14918 <__assert_fail@plt+0x33a8>
   148e4:	sub	r3, r3, #-1073741823	; 0xc0000001
   148e8:	lsl	r0, r3, #2
   148ec:	ldr	r2, [r6, #4]
   148f0:	ldr	r3, [r2, r3, lsl #2]
   148f4:	cmp	r3, #0
   148f8:	bne	14934 <__assert_fail@plt+0x33c4>
   148fc:	add	r0, r0, #8
   14900:	bl	1a050 <__assert_fail@plt+0x8ae0>
   14904:	mov	r8, r0
   14908:	ldr	r4, [r6]
   1490c:	mov	r9, #0
   14910:	mov	sl, r9
   14914:	b	14a4c <__assert_fail@plt+0x34dc>
   14918:	ldr	r3, [pc, #620]	; 14b8c <__assert_fail@plt+0x361c>
   1491c:	movw	r2, #261	; 0x105
   14920:	movw	r1, #53216	; 0xcfe0
   14924:	movt	r1, #1
   14928:	movw	r0, #53356	; 0xd06c
   1492c:	movt	r0, #1
   14930:	bl	11570 <__assert_fail@plt>
   14934:	ldr	r3, [pc, #592]	; 14b8c <__assert_fail@plt+0x361c>
   14938:	movw	r2, #262	; 0x106
   1493c:	movw	r1, #53216	; 0xcfe0
   14940:	movt	r1, #1
   14944:	movw	r0, #53376	; 0xd080
   14948:	movt	r0, #1
   1494c:	bl	11570 <__assert_fail@plt>
   14950:	ldr	r3, [pc, #568]	; 14b90 <__assert_fail@plt+0x3620>
   14954:	mov	r2, #242	; 0xf2
   14958:	movw	r1, #53216	; 0xcfe0
   1495c:	movt	r1, #1
   14960:	movw	r0, #53420	; 0xd0ac
   14964:	movt	r0, #1
   14968:	bl	11570 <__assert_fail@plt>
   1496c:	mov	r5, r3
   14970:	b	14acc <__assert_fail@plt+0x355c>
   14974:	ldr	r3, [r6, #36]	; 0x24
   14978:	cmp	r4, r3
   1497c:	strhi	r4, [r6, #36]	; 0x24
   14980:	ldr	r3, [r6, #36]	; 0x24
   14984:	cmp	r3, #0
   14988:	beq	14998 <__assert_fail@plt+0x3428>
   1498c:	ldr	r2, [r6, #40]	; 0x28
   14990:	cmp	r3, r2
   14994:	bcc	149cc <__assert_fail@plt+0x345c>
   14998:	cmn	r4, #1
   1499c:	addne	r4, r4, #1
   149a0:	ldr	r3, [r7, #28]
   149a4:	cmp	r3, #0
   149a8:	beq	149c0 <__assert_fail@plt+0x3450>
   149ac:	add	r2, r3, #1
   149b0:	cmp	r4, r2
   149b4:	movcc	r4, r2
   149b8:	cmp	r4, #0
   149bc:	moveq	r4, #1
   149c0:	add	r9, r9, r5
   149c4:	sub	r9, r9, r3
   149c8:	b	14a34 <__assert_fail@plt+0x34c4>
   149cc:	sub	r3, r2, r3
   149d0:	cmp	r3, #1
   149d4:	addhi	r4, r4, r3, lsr #1
   149d8:	addls	r4, r4, #1
   149dc:	ldr	r3, [r7, #28]
   149e0:	cmp	r3, #0
   149e4:	beq	149b8 <__assert_fail@plt+0x3448>
   149e8:	b	149ac <__assert_fail@plt+0x343c>
   149ec:	mov	r2, #5
   149f0:	movw	r1, #53452	; 0xd0cc
   149f4:	movt	r1, #1
   149f8:	mov	r0, #0
   149fc:	bl	11258 <dcgettext@plt>
   14a00:	mov	r2, r0
   14a04:	mov	r1, #0
   14a08:	mov	r0, #1
   14a0c:	bl	11324 <error@plt>
   14a10:	lsr	r4, r4, #1
   14a14:	ldr	r3, [r7, #28]
   14a18:	cmp	r3, #0
   14a1c:	beq	14a2c <__assert_fail@plt+0x34bc>
   14a20:	add	r3, r3, #1
   14a24:	cmp	r4, r3
   14a28:	movcc	r4, r3
   14a2c:	cmp	r4, #0
   14a30:	moveq	r4, #1
   14a34:	add	r2, r9, #1
   14a38:	ldr	r3, [r6]
   14a3c:	ldr	r1, [r7, #28]
   14a40:	sub	r3, r3, r1
   14a44:	cmp	r2, r3
   14a48:	bcs	14b48 <__assert_fail@plt+0x35d8>
   14a4c:	ldr	r3, [r7, #28]
   14a50:	cmp	r3, #0
   14a54:	beq	14a74 <__assert_fail@plt+0x3504>
   14a58:	ldr	r2, [r6, #4]
   14a5c:	sub	r1, r8, #4
   14a60:	add	ip, r2, r3, lsl #2
   14a64:	ldr	r0, [r2], #4
   14a68:	str	r0, [r1, #4]!
   14a6c:	cmp	r2, ip
   14a70:	bne	14a64 <__assert_fail@plt+0x34f4>
   14a74:	add	r0, r9, r3
   14a78:	ldr	r1, [r6]
   14a7c:	cmp	r0, r1
   14a80:	movcs	r2, #0
   14a84:	movcc	r2, #1
   14a88:	cmp	r4, r3
   14a8c:	movls	r2, #0
   14a90:	cmp	r2, #0
   14a94:	beq	1496c <__assert_fail@plt+0x33fc>
   14a98:	ldr	r2, [r6, #4]
   14a9c:	add	r2, r2, r0, lsl #2
   14aa0:	add	r0, r8, r3, lsl #2
   14aa4:	mov	r5, r3
   14aa8:	add	r5, r5, #1
   14aac:	ldr	ip, [r2], #4
   14ab0:	str	ip, [r0], #4
   14ab4:	add	ip, r9, r5
   14ab8:	cmp	r1, ip
   14abc:	cmphi	r4, r5
   14ac0:	bhi	14aa8 <__assert_fail@plt+0x3538>
   14ac4:	cmp	r3, r5
   14ac8:	bhi	14950 <__assert_fail@plt+0x33e0>
   14acc:	str	sl, [r8, r5, lsl #2]
   14ad0:	ldr	fp, [r7, #32]
   14ad4:	mov	r3, r8
   14ad8:	mov	r2, r5
   14adc:	ldr	r1, [r6, #24]
   14ae0:	mov	r0, r7
   14ae4:	blx	fp
   14ae8:	cmp	r0, #0
   14aec:	bne	14974 <__assert_fail@plt+0x3404>
   14af0:	ldr	r3, [r7, #28]
   14af4:	add	r3, r3, #1
   14af8:	cmp	r3, r4
   14afc:	bcs	149ec <__assert_fail@plt+0x347c>
   14b00:	ldr	r2, [r6, #40]	; 0x28
   14b04:	clz	r3, r2
   14b08:	lsr	r3, r3, #5
   14b0c:	cmp	r4, r2
   14b10:	orrcc	r3, r3, #1
   14b14:	cmp	r3, #0
   14b18:	strne	r4, [r6, #40]	; 0x28
   14b1c:	ldr	r3, [r6, #36]	; 0x24
   14b20:	cmp	r3, #0
   14b24:	beq	14a10 <__assert_fail@plt+0x34a0>
   14b28:	ldr	r2, [r6, #40]	; 0x28
   14b2c:	cmp	r3, r2
   14b30:	bcs	14a10 <__assert_fail@plt+0x34a0>
   14b34:	sub	r3, r2, r3
   14b38:	cmp	r3, #1
   14b3c:	subhi	r4, r4, r3, lsr #1
   14b40:	subls	r4, r4, #1
   14b44:	b	14a14 <__assert_fail@plt+0x34a4>
   14b48:	mov	r0, r8
   14b4c:	bl	1ae00 <__assert_fail@plt+0x9890>
   14b50:	ldr	r3, [r7, #28]
   14b54:	str	r3, [r6]
   14b58:	ldr	r3, [r6, #20]
   14b5c:	str	r3, [r6, #16]
   14b60:	mov	r3, #0
   14b64:	str	r3, [r6, #28]
   14b68:	mvn	r3, #0
   14b6c:	str	r3, [r6, #32]
   14b70:	add	sp, sp, #20
   14b74:	ldrd	r4, [sp]
   14b78:	ldrd	r6, [sp, #8]
   14b7c:	ldrd	r8, [sp, #16]
   14b80:	ldrd	sl, [sp, #24]
   14b84:	add	sp, sp, #32
   14b88:	pop	{pc}		; (ldr pc, [sp], #4)
   14b8c:	andeq	ip, r1, r4, ror #30
   14b90:	andeq	ip, r1, r0, ror pc
   14b94:	str	r4, [sp, #-8]!
   14b98:	str	lr, [sp, #4]
   14b9c:	mov	r0, #0
   14ba0:	bl	11264 <sysconf@plt>
   14ba4:	cmp	r0, #0
   14ba8:	mvnle	r0, #-2147483648	; 0x80000000
   14bac:	ldr	r4, [sp]
   14bb0:	add	sp, sp, #4
   14bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bb8:	strd	r4, [sp, #-16]!
   14bbc:	str	r6, [sp, #8]
   14bc0:	str	lr, [sp, #12]
   14bc4:	movw	r3, #57788	; 0xe1bc
   14bc8:	movt	r3, #2
   14bcc:	ldr	r4, [r3]
   14bd0:	ldr	r0, [r4]
   14bd4:	cmp	r0, #0
   14bd8:	beq	14c0c <__assert_fail@plt+0x369c>
   14bdc:	mov	r5, #0
   14be0:	bl	113c0 <strlen@plt>
   14be4:	add	r0, r0, #1
   14be8:	add	r5, r5, r0
   14bec:	ldr	r0, [r4, #4]!
   14bf0:	cmp	r0, #0
   14bf4:	bne	14be0 <__assert_fail@plt+0x3670>
   14bf8:	mov	r0, r5
   14bfc:	ldrd	r4, [sp]
   14c00:	ldr	r6, [sp, #8]
   14c04:	add	sp, sp, #12
   14c08:	pop	{pc}		; (ldr pc, [sp], #4)
   14c0c:	mov	r5, #0
   14c10:	b	14bf8 <__assert_fail@plt+0x3688>
   14c14:	strd	r4, [sp, #-16]!
   14c18:	str	r6, [sp, #8]
   14c1c:	str	lr, [sp, #12]
   14c20:	mov	r4, r0
   14c24:	mov	r6, r1
   14c28:	bl	14bb8 <__assert_fail@plt+0x3648>
   14c2c:	mov	r5, r0
   14c30:	mov	r3, #4096	; 0x1000
   14c34:	str	r3, [r4, #8]
   14c38:	bl	14b94 <__assert_fail@plt+0x3624>
   14c3c:	str	r0, [r4, #4]
   14c40:	mov	r3, #0
   14c44:	str	r3, [r4]
   14c48:	cmp	r0, r5
   14c4c:	bcc	14cd0 <__assert_fail@plt+0x3760>
   14c50:	add	r3, r5, r6
   14c54:	cmp	r0, r3
   14c58:	bls	14cd8 <__assert_fail@plt+0x3768>
   14c5c:	sub	r0, r0, r6
   14c60:	sub	r1, r0, r5
   14c64:	str	r1, [r4, #4]
   14c68:	lsr	r3, r1, #2
   14c6c:	sub	r3, r3, #2
   14c70:	str	r3, [r4, #16]
   14c74:	cmp	r3, #0
   14c78:	beq	14cb4 <__assert_fail@plt+0x3744>
   14c7c:	mov	r0, #0
   14c80:	str	r0, [r4, #20]
   14c84:	str	r0, [r4, #24]
   14c88:	str	r0, [r4, #28]
   14c8c:	movw	r3, #17252	; 0x4364
   14c90:	movt	r3, #1
   14c94:	str	r3, [r4, #32]
   14c98:	str	r0, [r4, #36]	; 0x24
   14c9c:	str	r0, [r4, #40]	; 0x28
   14ca0:	str	r1, [r4, #12]
   14ca4:	ldrd	r4, [sp]
   14ca8:	ldr	r6, [sp, #8]
   14cac:	add	sp, sp, #12
   14cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb4:	ldr	r3, [pc, #36]	; 14ce0 <__assert_fail@plt+0x3770>
   14cb8:	movw	r2, #518	; 0x206
   14cbc:	movw	r1, #53216	; 0xcfe0
   14cc0:	movt	r1, #1
   14cc4:	movw	r0, #53504	; 0xd100
   14cc8:	movt	r0, #1
   14ccc:	bl	11570 <__assert_fail@plt>
   14cd0:	mov	r0, #1
   14cd4:	b	14ca4 <__assert_fail@plt+0x3734>
   14cd8:	mov	r0, #2
   14cdc:	b	14ca4 <__assert_fail@plt+0x3734>
   14ce0:	andeq	ip, r1, ip, ror pc
   14ce4:	ldr	r3, [r0, #4]
   14ce8:	cmp	r3, #131072	; 0x20000
   14cec:	bcs	14cf8 <__assert_fail@plt+0x3788>
   14cf0:	str	r3, [r0, #12]
   14cf4:	bx	lr
   14cf8:	ldr	r3, [r0, #8]
   14cfc:	cmp	r3, #131072	; 0x20000
   14d00:	movls	r3, #131072	; 0x20000
   14d04:	str	r3, [r0, #12]
   14d08:	bx	lr
   14d0c:	strd	r4, [sp, #-16]!
   14d10:	str	r6, [sp, #8]
   14d14:	str	lr, [sp, #12]
   14d18:	mov	r3, #0
   14d1c:	str	r3, [r1]
   14d20:	str	r3, [r1, #16]
   14d24:	str	r3, [r1, #4]
   14d28:	str	r3, [r1, #8]
   14d2c:	str	r3, [r1, #36]	; 0x24
   14d30:	str	r3, [r1, #40]	; 0x28
   14d34:	ldr	r0, [r0, #12]
   14d38:	movw	r3, #63487	; 0xf7ff
   14d3c:	movt	r3, #32767	; 0x7fff
   14d40:	cmp	r0, r3
   14d44:	bhi	14d88 <__assert_fail@plt+0x3818>
   14d48:	mov	r4, r1
   14d4c:	mov	r5, r2
   14d50:	add	r0, r0, #1
   14d54:	bl	1a050 <__assert_fail@plt+0x8ae0>
   14d58:	str	r0, [r4, #12]
   14d5c:	mov	r3, #0
   14d60:	str	r3, [r4, #20]
   14d64:	str	r3, [r4, #16]
   14d68:	str	r3, [r4, #28]
   14d6c:	mvn	r3, #0
   14d70:	str	r3, [r4, #32]
   14d74:	str	r5, [r4, #24]
   14d78:	ldrd	r4, [sp]
   14d7c:	ldr	r6, [sp, #8]
   14d80:	add	sp, sp, #12
   14d84:	pop	{pc}		; (ldr pc, [sp], #4)
   14d88:	ldr	r3, [pc, #20]	; 14da4 <__assert_fail@plt+0x3834>
   14d8c:	mov	r2, #572	; 0x23c
   14d90:	movw	r1, #53216	; 0xcfe0
   14d94:	movt	r1, #1
   14d98:	movw	r0, #53528	; 0xd118
   14d9c:	movt	r0, #1
   14da0:	bl	11570 <__assert_fail@plt>
   14da4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14da8:	ldr	r3, [r0, #28]
   14dac:	str	r3, [r1]
   14db0:	ldr	r3, [r1, #20]
   14db4:	str	r3, [r1, #16]
   14db8:	mov	r3, #0
   14dbc:	str	r3, [r1, #28]
   14dc0:	mvn	r3, #0
   14dc4:	str	r3, [r1, #32]
   14dc8:	bx	lr
   14dcc:	strd	r4, [sp, #-16]!
   14dd0:	str	r6, [sp, #8]
   14dd4:	str	lr, [sp, #12]
   14dd8:	mov	r5, r0
   14ddc:	ldr	r0, [r0]
   14de0:	cmp	r0, #0
   14de4:	beq	14e34 <__assert_fail@plt+0x38c4>
   14de8:	mov	r4, #0
   14dec:	mov	r6, r4
   14df0:	add	r4, r4, #1
   14df4:	bl	113c0 <strlen@plt>
   14df8:	add	r6, r6, r0
   14dfc:	ldr	r0, [r5, #4]!
   14e00:	cmp	r0, #0
   14e04:	bne	14df0 <__assert_fail@plt+0x3880>
   14e08:	mov	r1, r4
   14e0c:	movw	r0, #53564	; 0xd13c
   14e10:	movt	r0, #1
   14e14:	bl	1436c <__assert_fail@plt+0x2dfc>
   14e18:	cmp	r0, #0
   14e1c:	movne	r0, #1
   14e20:	beq	14e40 <__assert_fail@plt+0x38d0>
   14e24:	ldrd	r4, [sp]
   14e28:	ldr	r6, [sp, #8]
   14e2c:	add	sp, sp, #12
   14e30:	pop	{pc}		; (ldr pc, [sp], #4)
   14e34:	mov	r4, #0
   14e38:	mov	r6, r4
   14e3c:	b	14e08 <__assert_fail@plt+0x3898>
   14e40:	mov	r1, r6
   14e44:	movw	r0, #53604	; 0xd164
   14e48:	movt	r0, #1
   14e4c:	bl	1436c <__assert_fail@plt+0x2dfc>
   14e50:	adds	r0, r0, #0
   14e54:	movne	r0, #1
   14e58:	b	14e24 <__assert_fail@plt+0x38b4>
   14e5c:	strd	r4, [sp, #-16]!
   14e60:	str	r6, [sp, #8]
   14e64:	str	lr, [sp, #12]
   14e68:	mov	r6, r0
   14e6c:	mov	r4, r1
   14e70:	mov	r1, #1
   14e74:	bl	1aae0 <__assert_fail@plt+0x9570>
   14e78:	ands	r5, r0, #1
   14e7c:	movne	r5, #0
   14e80:	beq	14e98 <__assert_fail@plt+0x3928>
   14e84:	mov	r0, r5
   14e88:	ldrd	r4, [sp]
   14e8c:	ldr	r6, [sp, #8]
   14e90:	add	sp, sp, #12
   14e94:	pop	{pc}		; (ldr pc, [sp], #4)
   14e98:	ldr	r1, [r4, #4]
   14e9c:	add	r1, r1, #1
   14ea0:	add	r2, r4, #8
   14ea4:	lsl	r1, r1, #2
   14ea8:	ldr	r0, [r4]
   14eac:	bl	156b8 <__assert_fail@plt+0x4148>
   14eb0:	cmp	r0, #0
   14eb4:	beq	14ed4 <__assert_fail@plt+0x3964>
   14eb8:	str	r0, [r4]
   14ebc:	ldr	r3, [r4, #4]
   14ec0:	str	r6, [r0, r3, lsl #2]
   14ec4:	ldr	r3, [r4, #4]
   14ec8:	add	r3, r3, #1
   14ecc:	str	r3, [r4, #4]
   14ed0:	b	14e84 <__assert_fail@plt+0x3914>
   14ed4:	mvn	r5, #0
   14ed8:	b	14e84 <__assert_fail@plt+0x3914>
   14edc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14ee0:	strd	r6, [sp, #8]
   14ee4:	strd	r8, [sp, #16]
   14ee8:	str	lr, [sp, #24]
   14eec:	sub	sp, sp, #20
   14ef0:	movw	r0, #53672	; 0xd1a8
   14ef4:	movt	r0, #1
   14ef8:	bl	15b1c <__assert_fail@plt+0x45ac>
   14efc:	subs	r5, r0, #0
   14f00:	beq	14f94 <__assert_fail@plt+0x3a24>
   14f04:	bl	113f0 <__errno_location@plt>
   14f08:	mov	r7, r0
   14f0c:	mov	r8, #0
   14f10:	mvn	r4, #0
   14f14:	mov	r6, r8
   14f18:	mov	r9, #1
   14f1c:	b	14ff4 <__assert_fail@plt+0x3a84>
   14f20:	ldr	r6, [r7]
   14f24:	cmp	r6, #0
   14f28:	bne	14f60 <__assert_fail@plt+0x39f0>
   14f2c:	mov	r0, r5
   14f30:	bl	11564 <closedir@plt>
   14f34:	cmp	r8, #0
   14f38:	beq	14f94 <__assert_fail@plt+0x3a24>
   14f3c:	cmp	r4, #0
   14f40:	blt	14f94 <__assert_fail@plt+0x3a24>
   14f44:	mov	r0, r4
   14f48:	add	sp, sp, #20
   14f4c:	ldrd	r4, [sp]
   14f50:	ldrd	r6, [sp, #8]
   14f54:	ldrd	r8, [sp, #16]
   14f58:	add	sp, sp, #24
   14f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f60:	movw	r2, #53672	; 0xd1a8
   14f64:	movt	r2, #1
   14f68:	mov	r1, #8
   14f6c:	mov	r0, #0
   14f70:	bl	195bc <__assert_fail@plt+0x804c>
   14f74:	mov	r3, r0
   14f78:	movw	r2, #54428	; 0xd49c
   14f7c:	movt	r2, #1
   14f80:	mov	r1, r6
   14f84:	mov	r0, #0
   14f88:	bl	11324 <error@plt>
   14f8c:	mov	r0, r5
   14f90:	bl	11564 <closedir@plt>
   14f94:	mov	r0, #4
   14f98:	bl	11264 <sysconf@plt>
   14f9c:	mov	r4, r0
   14fa0:	cmn	r0, #1
   14fa4:	movne	r4, r0
   14fa8:	moveq	r4, #20
   14fac:	mov	r1, sp
   14fb0:	mov	r0, #7
   14fb4:	bl	1127c <getrlimit64@plt>
   14fb8:	cmp	r0, #0
   14fbc:	bne	14f44 <__assert_fail@plt+0x39d4>
   14fc0:	ldrd	r2, [sp]
   14fc4:	mvn	r0, #0
   14fc8:	mvn	r1, #0
   14fcc:	cmp	r3, r1
   14fd0:	cmpeq	r2, r0
   14fd4:	movne	r4, r2
   14fd8:	b	14f44 <__assert_fail@plt+0x39d4>
   14fdc:	mov	r1, r6
   14fe0:	add	r0, r0, #19
   14fe4:	bl	15500 <__assert_fail@plt+0x3f90>
   14fe8:	cmp	r4, r0
   14fec:	movlt	r4, r0
   14ff0:	mov	r8, r9
   14ff4:	str	r6, [r7]
   14ff8:	mov	r0, r5
   14ffc:	bl	114d4 <readdir64@plt>
   15000:	cmp	r0, #0
   15004:	beq	14f20 <__assert_fail@plt+0x39b0>
   15008:	ldrb	r3, [r0, #19]
   1500c:	cmp	r3, #46	; 0x2e
   15010:	bne	14fdc <__assert_fail@plt+0x3a6c>
   15014:	ldrb	r3, [r0, #20]
   15018:	cmp	r3, #0
   1501c:	beq	14ff4 <__assert_fail@plt+0x3a84>
   15020:	ldrh	r3, [r0, #20]
   15024:	cmp	r3, #46	; 0x2e
   15028:	bne	14fdc <__assert_fail@plt+0x3a6c>
   1502c:	b	14ff4 <__assert_fail@plt+0x3a84>
   15030:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15034:	strd	r6, [sp, #8]
   15038:	strd	r8, [sp, #16]
   1503c:	strd	sl, [sp, #24]
   15040:	str	lr, [sp, #32]
   15044:	sub	sp, sp, #524	; 0x20c
   15048:	str	r3, [sp, #4]
   1504c:	cmp	r0, r1
   15050:	bge	150c0 <__assert_fail@plt+0x3b50>
   15054:	mov	r7, r0
   15058:	mov	fp, r1
   1505c:	mov	sl, r2
   15060:	mov	r8, #0
   15064:	mov	r9, #5
   15068:	b	150ec <__assert_fail@plt+0x3b7c>
   1506c:	add	r5, r5, #1
   15070:	add	r4, r4, #8
   15074:	cmp	r5, r6
   15078:	bge	150e0 <__assert_fail@plt+0x3b70>
   1507c:	ldrsh	r3, [r4, #6]
   15080:	cmp	r3, #32
   15084:	beq	1506c <__assert_fail@plt+0x3afc>
   15088:	ldr	r1, [sp, #4]
   1508c:	ldr	r0, [r4]
   15090:	blx	sl
   15094:	cmp	r0, #0
   15098:	beq	1506c <__assert_fail@plt+0x3afc>
   1509c:	add	sp, sp, #524	; 0x20c
   150a0:	ldrd	r4, [sp]
   150a4:	ldrd	r6, [sp, #8]
   150a8:	ldrd	r8, [sp, #16]
   150ac:	ldrd	sl, [sp, #24]
   150b0:	add	sp, sp, #32
   150b4:	pop	{pc}		; (ldr pc, [sp], #4)
   150b8:	mov	r0, #0
   150bc:	b	1509c <__assert_fail@plt+0x3b2c>
   150c0:	mov	r0, #0
   150c4:	b	1509c <__assert_fail@plt+0x3b2c>
   150c8:	mov	r2, r8
   150cc:	mov	r1, r6
   150d0:	add	r0, sp, #8
   150d4:	bl	112b8 <poll@plt>
   150d8:	cmn	r0, #1
   150dc:	beq	1509c <__assert_fail@plt+0x3b2c>
   150e0:	add	r7, r7, r6
   150e4:	cmp	fp, r7
   150e8:	ble	150b8 <__assert_fail@plt+0x3b48>
   150ec:	sub	r3, fp, r7
   150f0:	cmp	r3, #64	; 0x40
   150f4:	movlt	r6, r3
   150f8:	movge	r6, #64	; 0x40
   150fc:	cmp	r3, #0
   15100:	ble	150c8 <__assert_fail@plt+0x3b58>
   15104:	add	r4, sp, #8
   15108:	mov	r2, r4
   1510c:	mov	r3, #0
   15110:	strh	r9, [r2, #4]
   15114:	strh	r8, [r2, #6]
   15118:	add	r1, r7, r3
   1511c:	str	r1, [r2], #8
   15120:	add	r3, r3, #1
   15124:	cmp	r3, r6
   15128:	blt	15110 <__assert_fail@plt+0x3ba0>
   1512c:	mov	r2, r8
   15130:	mov	r1, r6
   15134:	add	r0, sp, #8
   15138:	bl	112b8 <poll@plt>
   1513c:	cmn	r0, #1
   15140:	beq	1509c <__assert_fail@plt+0x3b2c>
   15144:	mov	r5, #0
   15148:	b	1507c <__assert_fail@plt+0x3b0c>
   1514c:	strd	r4, [sp, #-16]!
   15150:	str	r6, [sp, #8]
   15154:	str	lr, [sp, #12]
   15158:	mov	r5, r0
   1515c:	mov	r4, r1
   15160:	mov	r1, #1
   15164:	bl	1aae0 <__assert_fail@plt+0x9570>
   15168:	ands	r0, r0, #1
   1516c:	movne	r0, #0
   15170:	bne	151c8 <__assert_fail@plt+0x3c58>
   15174:	ldr	r3, [r4, #8]
   15178:	ldr	ip, [r4, #4]
   1517c:	cmp	r3, ip
   15180:	bcs	151c0 <__assert_fail@plt+0x3c50>
   15184:	ldr	r1, [r4]
   15188:	add	r2, r1, r3, lsl #2
   1518c:	ldr	r1, [r1, r3, lsl #2]
   15190:	cmp	r5, r1
   15194:	ble	151b8 <__assert_fail@plt+0x3c48>
   15198:	add	r3, r3, #1
   1519c:	str	r3, [r4, #8]
   151a0:	cmp	r3, ip
   151a4:	beq	151c0 <__assert_fail@plt+0x3c50>
   151a8:	ldr	r1, [r2, #4]!
   151ac:	add	r3, r3, #1
   151b0:	cmp	r1, r5
   151b4:	blt	1519c <__assert_fail@plt+0x3c2c>
   151b8:	cmp	r5, r1
   151bc:	beq	151c8 <__assert_fail@plt+0x3c58>
   151c0:	str	r5, [r4, #12]
   151c4:	mvn	r0, #0
   151c8:	ldrd	r4, [sp]
   151cc:	ldr	r6, [sp, #8]
   151d0:	add	sp, sp, #12
   151d4:	pop	{pc}		; (ldr pc, [sp], #4)
   151d8:	push	{lr}		; (str lr, [sp, #-4]!)
   151dc:	sub	sp, sp, #20
   151e0:	bl	14edc <__assert_fail@plt+0x396c>
   151e4:	mov	r1, r0
   151e8:	mov	r3, #0
   151ec:	str	r3, [sp, #4]
   151f0:	str	r3, [sp, #12]
   151f4:	str	r3, [sp, #8]
   151f8:	cmn	r0, #-2147483647	; 0x80000001
   151fc:	addne	r1, r0, #1
   15200:	add	r3, sp, #4
   15204:	movw	r2, #20060	; 0x4e5c
   15208:	movt	r2, #1
   1520c:	mov	r0, #0
   15210:	bl	15030 <__assert_fail@plt+0x3ac0>
   15214:	movw	r3, #58008	; 0xe298
   15218:	movt	r3, #2
   1521c:	ldr	r2, [sp, #4]
   15220:	str	r2, [r3]
   15224:	ldr	r2, [sp, #8]
   15228:	str	r2, [r3, #4]
   1522c:	add	sp, sp, #20
   15230:	pop	{pc}		; (ldr pc, [sp], #4)
   15234:	push	{r1, r2, r3}
   15238:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1523c:	strd	r6, [sp, #8]
   15240:	str	r8, [sp, #16]
   15244:	str	lr, [sp, #20]
   15248:	sub	sp, sp, #12
   1524c:	mov	r6, r0
   15250:	ldr	r4, [sp, #36]	; 0x24
   15254:	tst	r4, #64	; 0x40
   15258:	addne	r3, sp, #44	; 0x2c
   1525c:	strne	r3, [sp, #4]
   15260:	ldrne	r7, [sp, #40]	; 0x28
   15264:	moveq	r7, #0
   15268:	movw	r3, #58008	; 0xe298
   1526c:	movt	r3, #2
   15270:	ldrb	r5, [r3, #8]
   15274:	cmp	r5, #0
   15278:	beq	152cc <__assert_fail@plt+0x3d5c>
   1527c:	mov	r2, r7
   15280:	orr	r1, r4, #524288	; 0x80000
   15284:	mov	r0, r6
   15288:	bl	15bc0 <__assert_fail@plt+0x4650>
   1528c:	subs	r4, r0, #0
   15290:	blt	152a8 <__assert_fail@plt+0x3d38>
   15294:	movw	r3, #58008	; 0xe298
   15298:	movt	r3, #2
   1529c:	ldrb	r3, [r3, #9]
   152a0:	cmp	r3, #0
   152a4:	beq	15318 <__assert_fail@plt+0x3da8>
   152a8:	mov	r0, r4
   152ac:	add	sp, sp, #12
   152b0:	ldrd	r4, [sp]
   152b4:	ldrd	r6, [sp, #8]
   152b8:	ldr	r8, [sp, #16]
   152bc:	ldr	lr, [sp, #20]
   152c0:	add	sp, sp, #24
   152c4:	add	sp, sp, #12
   152c8:	bx	lr
   152cc:	mov	r1, #524288	; 0x80000
   152d0:	movw	r0, #53688	; 0xd1b8
   152d4:	movt	r0, #1
   152d8:	bl	15bc0 <__assert_fail@plt+0x4650>
   152dc:	subs	r8, r0, #0
   152e0:	bge	152fc <__assert_fail@plt+0x3d8c>
   152e4:	movw	r3, #58008	; 0xe298
   152e8:	movt	r3, #2
   152ec:	strb	r5, [r3, #9]
   152f0:	mov	r2, #1
   152f4:	strb	r2, [r3, #8]
   152f8:	b	1527c <__assert_fail@plt+0x3d0c>
   152fc:	mov	r1, #1
   15300:	mov	r0, r8
   15304:	bl	1aae0 <__assert_fail@plt+0x9570>
   15308:	and	r5, r0, #1
   1530c:	mov	r0, r8
   15310:	bl	11558 <close@plt>
   15314:	b	152e4 <__assert_fail@plt+0x3d74>
   15318:	mov	r1, #1
   1531c:	mov	r0, r4
   15320:	bl	15814 <__assert_fail@plt+0x42a4>
   15324:	b	152a8 <__assert_fail@plt+0x3d38>
   15328:	str	r4, [sp, #-8]!
   1532c:	str	lr, [sp, #4]
   15330:	movw	r4, #58008	; 0xe298
   15334:	movt	r4, #2
   15338:	ldr	r0, [r4]
   1533c:	bl	1ae00 <__assert_fail@plt+0x9890>
   15340:	mov	r3, #0
   15344:	str	r3, [r4]
   15348:	str	r3, [r4, #4]
   1534c:	ldr	r4, [sp]
   15350:	add	sp, sp, #4
   15354:	pop	{pc}		; (ldr pc, [sp], #4)
   15358:	str	r4, [sp, #-8]!
   1535c:	str	lr, [sp, #4]
   15360:	movw	r0, #53692	; 0xd1bc
   15364:	movt	r0, #1
   15368:	bl	11348 <getenv@plt>
   1536c:	adds	r0, r0, #0
   15370:	movne	r0, #1
   15374:	ldr	r4, [sp]
   15378:	add	sp, sp, #4
   1537c:	pop	{pc}		; (ldr pc, [sp], #4)
   15380:	strd	r4, [sp, #-12]!
   15384:	str	lr, [sp, #8]
   15388:	sub	sp, sp, #20
   1538c:	movw	r3, #58008	; 0xe298
   15390:	movt	r3, #2
   15394:	ldr	r5, [r3]
   15398:	ldr	r4, [r3, #4]
   1539c:	bl	14edc <__assert_fail@plt+0x396c>
   153a0:	mov	r1, r0
   153a4:	cmn	r0, #-2147483647	; 0x80000001
   153a8:	addne	r1, r0, #1
   153ac:	str	r5, [sp]
   153b0:	str	r4, [sp, #4]
   153b4:	mov	r0, #0
   153b8:	str	r0, [sp, #8]
   153bc:	mvn	r3, #0
   153c0:	str	r3, [sp, #12]
   153c4:	mov	r3, sp
   153c8:	movw	r2, #20812	; 0x514c
   153cc:	movt	r2, #1
   153d0:	bl	15030 <__assert_fail@plt+0x3ac0>
   153d4:	ldr	r4, [sp, #12]
   153d8:	cmp	r4, #0
   153dc:	bge	153f0 <__assert_fail@plt+0x3e80>
   153e0:	add	sp, sp, #20
   153e4:	ldrd	r4, [sp]
   153e8:	add	sp, sp, #8
   153ec:	pop	{pc}		; (ldr pc, [sp], #4)
   153f0:	mov	r2, #5
   153f4:	movw	r1, #53720	; 0xd1d8
   153f8:	movt	r1, #1
   153fc:	mov	r0, #0
   15400:	bl	11258 <dcgettext@plt>
   15404:	mov	r3, r4
   15408:	mov	r2, r0
   1540c:	mov	r1, #0
   15410:	mov	r0, r1
   15414:	bl	11324 <error@plt>
   15418:	movw	r3, #53644	; 0xd18c
   1541c:	movt	r3, #1
   15420:	mov	r2, #396	; 0x18c
   15424:	movw	r1, #53872	; 0xd270
   15428:	movt	r1, #1
   1542c:	movw	r0, #53884	; 0xd27c
   15430:	movt	r0, #1
   15434:	bl	11570 <__assert_fail@plt>
   15438:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1543c:	strd	r6, [sp, #8]
   15440:	str	r8, [sp, #16]
   15444:	str	lr, [sp, #20]
   15448:	sub	sp, sp, #16
   1544c:	mov	r5, r0
   15450:	movw	r3, #57808	; 0xe1d0
   15454:	movt	r3, #2
   15458:	ldr	r0, [r3]
   1545c:	bl	1ad4c <__assert_fail@plt+0x97dc>
   15460:	movw	r3, #57820	; 0xe1dc
   15464:	movt	r3, #2
   15468:	ldr	r4, [r3]
   1546c:	movw	r3, #57708	; 0xe16c
   15470:	movt	r3, #2
   15474:	ldr	r6, [r3]
   15478:	mov	r2, #5
   1547c:	movw	r1, #53896	; 0xd288
   15480:	movt	r1, #1
   15484:	mov	r0, #0
   15488:	bl	11258 <dcgettext@plt>
   1548c:	mov	r7, r0
   15490:	mov	r2, #5
   15494:	movw	r1, #53912	; 0xd298
   15498:	movt	r1, #1
   1549c:	mov	r0, #0
   154a0:	bl	11258 <dcgettext@plt>
   154a4:	mov	r8, r0
   154a8:	mov	r2, #5
   154ac:	movw	r1, #53928	; 0xd2a8
   154b0:	movt	r1, #1
   154b4:	mov	r0, #0
   154b8:	bl	11258 <dcgettext@plt>
   154bc:	mov	r3, #0
   154c0:	str	r3, [sp, #12]
   154c4:	str	r0, [sp, #8]
   154c8:	str	r8, [sp, #4]
   154cc:	str	r7, [sp]
   154d0:	mov	r3, r6
   154d4:	movw	r2, #53944	; 0xd2b8
   154d8:	movt	r2, #1
   154dc:	mov	r1, r5
   154e0:	mov	r0, r4
   154e4:	bl	19f90 <__assert_fail@plt+0x8a20>
   154e8:	add	sp, sp, #16
   154ec:	ldrd	r4, [sp]
   154f0:	ldrd	r6, [sp, #8]
   154f4:	ldr	r8, [sp, #16]
   154f8:	add	sp, sp, #20
   154fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15500:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15504:	strd	r6, [sp, #8]
   15508:	str	r8, [sp, #16]
   1550c:	str	lr, [sp, #20]
   15510:	sub	sp, sp, #16
   15514:	mov	r4, r0
   15518:	mov	r7, r1
   1551c:	bl	113f0 <__errno_location@plt>
   15520:	mov	r5, r0
   15524:	mov	r3, #0
   15528:	str	r3, [r0]
   1552c:	mov	r2, #10
   15530:	add	r1, sp, #12
   15534:	mov	r0, r4
   15538:	bl	111bc <strtol@plt>
   1553c:	sub	r3, r0, #-2147483647	; 0x80000001
   15540:	cmn	r3, #3
   15544:	bls	1557c <__assert_fail@plt+0x400c>
   15548:	ldr	r1, [r5]
   1554c:	cmp	r1, #34	; 0x22
   15550:	beq	15568 <__assert_fail@plt+0x3ff8>
   15554:	mov	r3, r4
   15558:	movw	r2, #54428	; 0xd49c
   1555c:	movt	r2, #1
   15560:	mov	r0, #1
   15564:	bl	11324 <error@plt>
   15568:	mov	r3, r4
   1556c:	movw	r2, #54428	; 0xd49c
   15570:	movt	r2, #1
   15574:	mov	r0, #1
   15578:	bl	11324 <error@plt>
   1557c:	ldr	r6, [sp, #12]
   15580:	ldrb	r3, [r6]
   15584:	cmp	r3, #0
   15588:	bne	155ac <__assert_fail@plt+0x403c>
   1558c:	cmp	r4, r6
   15590:	beq	15604 <__assert_fail@plt+0x4094>
   15594:	add	sp, sp, #16
   15598:	ldrd	r4, [sp]
   1559c:	ldrd	r6, [sp, #8]
   155a0:	ldr	r8, [sp, #16]
   155a4:	add	sp, sp, #20
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	ldr	r5, [r5]
   155b0:	mov	r2, #5
   155b4:	movw	r1, #53976	; 0xd2d8
   155b8:	movt	r1, #1
   155bc:	mov	r0, #0
   155c0:	bl	11258 <dcgettext@plt>
   155c4:	mov	r6, r0
   155c8:	ldr	r2, [sp, #12]
   155cc:	mov	r1, r7
   155d0:	mov	r0, #0
   155d4:	bl	195bc <__assert_fail@plt+0x804c>
   155d8:	mov	r8, r0
   155dc:	mov	r2, r4
   155e0:	mov	r1, r7
   155e4:	mov	r0, #1
   155e8:	bl	195bc <__assert_fail@plt+0x804c>
   155ec:	str	r0, [sp]
   155f0:	mov	r3, r8
   155f4:	mov	r2, r6
   155f8:	mov	r1, r5
   155fc:	mov	r0, #1
   15600:	bl	11324 <error@plt>
   15604:	ldr	r4, [r5]
   15608:	mov	r2, #5
   1560c:	movw	r1, #54004	; 0xd2f4
   15610:	movt	r1, #1
   15614:	mov	r0, #0
   15618:	bl	11258 <dcgettext@plt>
   1561c:	mov	r5, r0
   15620:	mov	r2, r6
   15624:	mov	r1, r7
   15628:	mov	r0, #0
   1562c:	bl	195bc <__assert_fail@plt+0x804c>
   15630:	mov	r3, r0
   15634:	mov	r2, r5
   15638:	mov	r1, r4
   1563c:	mov	r0, #1
   15640:	bl	11324 <error@plt>
   15644:	strd	r4, [sp, #-12]!
   15648:	str	lr, [sp, #8]
   1564c:	sub	sp, sp, #20
   15650:	mov	r4, r0
   15654:	mov	r5, r1
   15658:	mov	r2, #5
   1565c:	movw	r1, #54028	; 0xd30c
   15660:	movt	r1, #1
   15664:	mov	r0, #0
   15668:	bl	11258 <dcgettext@plt>
   1566c:	movw	r3, #54276	; 0xd404
   15670:	movt	r3, #1
   15674:	str	r3, [sp, #8]
   15678:	movw	r3, #54300	; 0xd41c
   1567c:	movt	r3, #1
   15680:	str	r3, [sp, #4]
   15684:	movw	r3, #53944	; 0xd2b8
   15688:	movt	r3, #1
   1568c:	str	r3, [sp]
   15690:	mov	r3, r5
   15694:	movw	r2, #54236	; 0xd3dc
   15698:	movt	r2, #1
   1569c:	mov	r1, r0
   156a0:	mov	r0, r4
   156a4:	bl	113e4 <fprintf@plt>
   156a8:	add	sp, sp, #20
   156ac:	ldrd	r4, [sp]
   156b0:	add	sp, sp, #8
   156b4:	pop	{pc}		; (ldr pc, [sp], #4)
   156b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156bc:	strd	r6, [sp, #8]
   156c0:	str	r8, [sp, #16]
   156c4:	str	lr, [sp, #20]
   156c8:	mov	r4, r0
   156cc:	mov	r5, r1
   156d0:	mov	r8, r2
   156d4:	bl	113f0 <__errno_location@plt>
   156d8:	ldr	r7, [r0]
   156dc:	cmp	r5, #0
   156e0:	beq	15714 <__assert_fail@plt+0x41a4>
   156e4:	mov	r6, r0
   156e8:	ldr	r3, [r8]
   156ec:	cmp	r3, #0
   156f0:	beq	157b8 <__assert_fail@plt+0x4248>
   156f4:	cmp	r3, r5
   156f8:	movcs	r0, r4
   156fc:	bcs	15750 <__assert_fail@plt+0x41e0>
   15700:	lsl	r0, r3, #1
   15704:	cmp	r3, r0
   15708:	bls	157c8 <__assert_fail@plt+0x4258>
   1570c:	mov	r0, r5
   15710:	b	1579c <__assert_fail@plt+0x422c>
   15714:	movw	r3, #54348	; 0xd44c
   15718:	movt	r3, #1
   1571c:	mov	r2, #71	; 0x47
   15720:	movw	r1, #54360	; 0xd458
   15724:	movt	r1, #1
   15728:	movw	r0, #54372	; 0xd464
   1572c:	movt	r0, #1
   15730:	bl	11570 <__assert_fail@plt>
   15734:	mov	r0, r5
   15738:	cmp	r3, #0
   1573c:	bne	15790 <__assert_fail@plt+0x4220>
   15740:	cmp	r4, #0
   15744:	bne	15770 <__assert_fail@plt+0x4200>
   15748:	str	r0, [r8]
   1574c:	bl	1af20 <__assert_fail@plt+0x99b0>
   15750:	cmp	r0, #0
   15754:	beq	1575c <__assert_fail@plt+0x41ec>
   15758:	str	r7, [r6]
   1575c:	ldrd	r4, [sp]
   15760:	ldrd	r6, [sp, #8]
   15764:	ldr	r8, [sp, #16]
   15768:	add	sp, sp, #20
   1576c:	pop	{pc}		; (ldr pc, [sp], #4)
   15770:	movw	r3, #54348	; 0xd44c
   15774:	movt	r3, #1
   15778:	mov	r2, #79	; 0x4f
   1577c:	movw	r1, #54360	; 0xd458
   15780:	movt	r1, #1
   15784:	movw	r0, #54384	; 0xd470
   15788:	movt	r0, #1
   1578c:	bl	11570 <__assert_fail@plt>
   15790:	cmp	r3, r0
   15794:	moveq	r0, r4
   15798:	beq	15750 <__assert_fail@plt+0x41e0>
   1579c:	str	r0, [r8]
   157a0:	mov	r1, r0
   157a4:	mov	r0, r4
   157a8:	bl	1afcc <__assert_fail@plt+0x9a5c>
   157ac:	cmp	r0, #0
   157b0:	bne	15758 <__assert_fail@plt+0x41e8>
   157b4:	b	1575c <__assert_fail@plt+0x41ec>
   157b8:	cmp	r5, #16
   157bc:	movls	r0, #16
   157c0:	bls	15740 <__assert_fail@plt+0x41d0>
   157c4:	mov	r0, #32
   157c8:	cmp	r5, r0
   157cc:	bls	15738 <__assert_fail@plt+0x41c8>
   157d0:	lsl	r2, r0, #1
   157d4:	cmp	r2, r0
   157d8:	bcc	15734 <__assert_fail@plt+0x41c4>
   157dc:	mov	r0, r2
   157e0:	b	157c8 <__assert_fail@plt+0x4258>
   157e4:	str	r4, [sp, #-8]!
   157e8:	str	lr, [sp, #4]
   157ec:	mov	r4, r0
   157f0:	bl	156b8 <__assert_fail@plt+0x4148>
   157f4:	cmp	r0, #0
   157f8:	beq	15808 <__assert_fail@plt+0x4298>
   157fc:	ldr	r4, [sp]
   15800:	add	sp, sp, #4
   15804:	pop	{pc}		; (ldr pc, [sp], #4)
   15808:	mov	r0, r4
   1580c:	bl	1ae00 <__assert_fail@plt+0x9890>
   15810:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   15814:	strd	r4, [sp, #-16]!
   15818:	str	r6, [sp, #8]
   1581c:	str	lr, [sp, #12]
   15820:	mov	r5, r0
   15824:	mov	r4, r1
   15828:	mov	r2, #0
   1582c:	mov	r1, #1
   15830:	bl	1aae0 <__assert_fail@plt+0x9570>
   15834:	cmp	r0, #0
   15838:	blt	15880 <__assert_fail@plt+0x4310>
   1583c:	cmp	r4, #0
   15840:	orrne	r2, r0, #1
   15844:	biceq	r2, r0, #1
   15848:	cmp	r2, r0
   1584c:	moveq	r0, #0
   15850:	beq	15870 <__assert_fail@plt+0x4300>
   15854:	mov	r1, #2
   15858:	mov	r0, r5
   1585c:	bl	1aae0 <__assert_fail@plt+0x9570>
   15860:	cmn	r0, #1
   15864:	movne	r0, #0
   15868:	moveq	r0, #1
   1586c:	rsb	r0, r0, #0
   15870:	ldrd	r4, [sp]
   15874:	ldr	r6, [sp, #8]
   15878:	add	sp, sp, #12
   1587c:	pop	{pc}		; (ldr pc, [sp], #4)
   15880:	mvn	r0, #0
   15884:	b	15870 <__assert_fail@plt+0x4300>
   15888:	str	r4, [sp, #-8]!
   1588c:	str	lr, [sp, #4]
   15890:	mov	r2, #0
   15894:	movw	r1, #1030	; 0x406
   15898:	bl	1aae0 <__assert_fail@plt+0x9570>
   1589c:	ldr	r4, [sp]
   158a0:	add	sp, sp, #4
   158a4:	pop	{pc}		; (ldr pc, [sp], #4)
   158a8:	movw	r3, #58020	; 0xe2a4
   158ac:	movt	r3, #2
   158b0:	str	r0, [r3]
   158b4:	bx	lr
   158b8:	strd	r4, [sp, #-16]!
   158bc:	str	r6, [sp, #8]
   158c0:	str	lr, [sp, #12]
   158c4:	sub	sp, sp, #8
   158c8:	movw	r3, #57816	; 0xe1d8
   158cc:	movt	r3, #2
   158d0:	ldr	r4, [r3]
   158d4:	mov	r0, r4
   158d8:	bl	1adbc <__assert_fail@plt+0x984c>
   158dc:	cmp	r0, #0
   158e0:	bne	15968 <__assert_fail@plt+0x43f8>
   158e4:	movw	r3, #57816	; 0xe1d8
   158e8:	movt	r3, #2
   158ec:	ldr	r0, [r3]
   158f0:	bl	1b064 <__assert_fail@plt+0x9af4>
   158f4:	cmp	r0, #0
   158f8:	beq	159b4 <__assert_fail@plt+0x4444>
   158fc:	mov	r2, #5
   15900:	movw	r1, #54404	; 0xd484
   15904:	movt	r1, #1
   15908:	mov	r0, #0
   1590c:	bl	11258 <dcgettext@plt>
   15910:	mov	r5, r0
   15914:	movw	r3, #58020	; 0xe2a4
   15918:	movt	r3, #2
   1591c:	ldr	r4, [r3]
   15920:	cmp	r4, #0
   15924:	beq	159cc <__assert_fail@plt+0x445c>
   15928:	bl	113f0 <__errno_location@plt>
   1592c:	ldr	r6, [r0]
   15930:	mov	r0, r4
   15934:	bl	19734 <__assert_fail@plt+0x81c4>
   15938:	str	r5, [sp]
   1593c:	mov	r3, r0
   15940:	movw	r2, #54424	; 0xd498
   15944:	movt	r2, #1
   15948:	mov	r1, r6
   1594c:	mov	r0, #0
   15950:	bl	11324 <error@plt>
   15954:	bl	15a0c <__assert_fail@plt+0x449c>
   15958:	movw	r3, #57712	; 0xe170
   1595c:	movt	r3, #2
   15960:	ldr	r0, [r3]
   15964:	bl	11210 <_exit@plt>
   15968:	mov	r3, #1
   1596c:	str	r3, [sp]
   15970:	mov	r2, #0
   15974:	mov	r3, #0
   15978:	mov	r0, r4
   1597c:	bl	1ae60 <__assert_fail@plt+0x98f0>
   15980:	cmp	r0, #0
   15984:	bne	158e4 <__assert_fail@plt+0x4374>
   15988:	movw	r4, #57816	; 0xe1d8
   1598c:	movt	r4, #2
   15990:	ldr	r0, [r4]
   15994:	bl	1ad4c <__assert_fail@plt+0x97dc>
   15998:	mov	r5, r0
   1599c:	ldr	r0, [r4]
   159a0:	bl	1b064 <__assert_fail@plt+0x9af4>
   159a4:	cmp	r0, #0
   159a8:	bne	158fc <__assert_fail@plt+0x438c>
   159ac:	cmp	r5, #0
   159b0:	bne	158fc <__assert_fail@plt+0x438c>
   159b4:	bl	15a0c <__assert_fail@plt+0x449c>
   159b8:	add	sp, sp, #8
   159bc:	ldrd	r4, [sp]
   159c0:	ldr	r6, [sp, #8]
   159c4:	add	sp, sp, #12
   159c8:	pop	{pc}		; (ldr pc, [sp], #4)
   159cc:	bl	113f0 <__errno_location@plt>
   159d0:	mov	r3, r5
   159d4:	movw	r2, #54428	; 0xd49c
   159d8:	movt	r2, #1
   159dc:	ldr	r1, [r0]
   159e0:	mov	r0, #0
   159e4:	bl	11324 <error@plt>
   159e8:	b	15954 <__assert_fail@plt+0x43e4>
   159ec:	movw	r3, #58024	; 0xe2a8
   159f0:	movt	r3, #2
   159f4:	str	r0, [r3]
   159f8:	bx	lr
   159fc:	movw	r3, #58024	; 0xe2a8
   15a00:	movt	r3, #2
   15a04:	strb	r0, [r3, #4]
   15a08:	bx	lr
   15a0c:	strd	r4, [sp, #-16]!
   15a10:	str	r6, [sp, #8]
   15a14:	str	lr, [sp, #12]
   15a18:	sub	sp, sp, #8
   15a1c:	movw	r3, #57820	; 0xe1dc
   15a20:	movt	r3, #2
   15a24:	ldr	r0, [r3]
   15a28:	bl	1b064 <__assert_fail@plt+0x9af4>
   15a2c:	cmp	r0, #0
   15a30:	beq	15a58 <__assert_fail@plt+0x44e8>
   15a34:	movw	r3, #58024	; 0xe2a8
   15a38:	movt	r3, #2
   15a3c:	ldrb	r3, [r3, #4]
   15a40:	cmp	r3, #0
   15a44:	beq	15a84 <__assert_fail@plt+0x4514>
   15a48:	bl	113f0 <__errno_location@plt>
   15a4c:	ldr	r3, [r0]
   15a50:	cmp	r3, #32
   15a54:	bne	15a84 <__assert_fail@plt+0x4514>
   15a58:	movw	r3, #57808	; 0xe1d0
   15a5c:	movt	r3, #2
   15a60:	ldr	r0, [r3]
   15a64:	bl	1b064 <__assert_fail@plt+0x9af4>
   15a68:	cmp	r0, #0
   15a6c:	bne	15b0c <__assert_fail@plt+0x459c>
   15a70:	add	sp, sp, #8
   15a74:	ldrd	r4, [sp]
   15a78:	ldr	r6, [sp, #8]
   15a7c:	add	sp, sp, #12
   15a80:	pop	{pc}		; (ldr pc, [sp], #4)
   15a84:	mov	r2, #5
   15a88:	movw	r1, #54432	; 0xd4a0
   15a8c:	movt	r1, #1
   15a90:	mov	r0, #0
   15a94:	bl	11258 <dcgettext@plt>
   15a98:	mov	r4, r0
   15a9c:	movw	r3, #58024	; 0xe2a8
   15aa0:	movt	r3, #2
   15aa4:	ldr	r5, [r3]
   15aa8:	cmp	r5, #0
   15aac:	beq	15aec <__assert_fail@plt+0x457c>
   15ab0:	bl	113f0 <__errno_location@plt>
   15ab4:	ldr	r6, [r0]
   15ab8:	mov	r0, r5
   15abc:	bl	19734 <__assert_fail@plt+0x81c4>
   15ac0:	str	r4, [sp]
   15ac4:	mov	r3, r0
   15ac8:	movw	r2, #54424	; 0xd498
   15acc:	movt	r2, #1
   15ad0:	mov	r1, r6
   15ad4:	mov	r0, #0
   15ad8:	bl	11324 <error@plt>
   15adc:	movw	r3, #57712	; 0xe170
   15ae0:	movt	r3, #2
   15ae4:	ldr	r0, [r3]
   15ae8:	bl	11210 <_exit@plt>
   15aec:	bl	113f0 <__errno_location@plt>
   15af0:	mov	r3, r4
   15af4:	movw	r2, #54428	; 0xd49c
   15af8:	movt	r2, #1
   15afc:	ldr	r1, [r0]
   15b00:	mov	r0, #0
   15b04:	bl	11324 <error@plt>
   15b08:	b	15adc <__assert_fail@plt+0x456c>
   15b0c:	movw	r3, #57712	; 0xe170
   15b10:	movt	r3, #2
   15b14:	ldr	r0, [r3]
   15b18:	bl	11210 <_exit@plt>
   15b1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b20:	strd	r6, [sp, #8]
   15b24:	str	r8, [sp, #16]
   15b28:	str	lr, [sp, #20]
   15b2c:	bl	11330 <opendir@plt>
   15b30:	subs	r4, r0, #0
   15b34:	beq	15b48 <__assert_fail@plt+0x45d8>
   15b38:	mov	r0, r4
   15b3c:	bl	114f8 <dirfd@plt>
   15b40:	cmp	r0, #2
   15b44:	bls	15b60 <__assert_fail@plt+0x45f0>
   15b48:	mov	r0, r4
   15b4c:	ldrd	r4, [sp]
   15b50:	ldrd	r6, [sp, #8]
   15b54:	ldr	r8, [sp, #16]
   15b58:	add	sp, sp, #20
   15b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b60:	mov	r2, #3
   15b64:	movw	r1, #1030	; 0x406
   15b68:	bl	1aae0 <__assert_fail@plt+0x9570>
   15b6c:	subs	r7, r0, #0
   15b70:	bge	15b98 <__assert_fail@plt+0x4628>
   15b74:	bl	113f0 <__errno_location@plt>
   15b78:	ldr	r6, [r0]
   15b7c:	mov	r5, #0
   15b80:	mov	r0, r4
   15b84:	bl	11564 <closedir@plt>
   15b88:	bl	113f0 <__errno_location@plt>
   15b8c:	str	r6, [r0]
   15b90:	mov	r4, r5
   15b94:	b	15b48 <__assert_fail@plt+0x45d8>
   15b98:	mov	r0, r7
   15b9c:	bl	114e0 <fdopendir@plt>
   15ba0:	mov	r5, r0
   15ba4:	bl	113f0 <__errno_location@plt>
   15ba8:	ldr	r6, [r0]
   15bac:	cmp	r5, #0
   15bb0:	bne	15b80 <__assert_fail@plt+0x4610>
   15bb4:	mov	r0, r7
   15bb8:	bl	11558 <close@plt>
   15bbc:	b	15b80 <__assert_fail@plt+0x4610>
   15bc0:	push	{r1, r2, r3}
   15bc4:	push	{lr}		; (str lr, [sp, #-4]!)
   15bc8:	sub	sp, sp, #8
   15bcc:	ldr	r1, [sp, #12]
   15bd0:	tst	r1, #64	; 0x40
   15bd4:	addne	r3, sp, #20
   15bd8:	strne	r3, [sp, #4]
   15bdc:	ldrne	r2, [sp, #16]
   15be0:	moveq	r2, #0
   15be4:	bl	1133c <open64@plt>
   15be8:	bl	19a30 <__assert_fail@plt+0x84c0>
   15bec:	add	sp, sp, #8
   15bf0:	pop	{lr}		; (ldr lr, [sp], #4)
   15bf4:	add	sp, sp, #12
   15bf8:	bx	lr
   15bfc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15c00:	strd	r6, [sp, #8]
   15c04:	strd	r8, [sp, #16]
   15c08:	str	fp, [sp, #24]
   15c0c:	str	lr, [sp, #28]
   15c10:	add	fp, sp, #28
   15c14:	mov	r7, r3
   15c18:	lsl	r3, r2, #2
   15c1c:	lsr	r8, r2, #30
   15c20:	adds	r8, r8, #0
   15c24:	movne	r8, #1
   15c28:	cmp	r3, #0
   15c2c:	movlt	r8, #1
   15c30:	cmp	r8, #0
   15c34:	movne	r8, #0
   15c38:	bne	15d54 <__assert_fail@plt+0x47e4>
   15c3c:	mov	r6, r0
   15c40:	mov	r4, r1
   15c44:	mov	r5, r2
   15c48:	mov	r0, r3
   15c4c:	cmp	r3, #4016	; 0xfb0
   15c50:	bhi	15c90 <__assert_fail@plt+0x4720>
   15c54:	add	r3, r3, #22
   15c58:	bic	r3, r3, #7
   15c5c:	sub	sp, sp, r3
   15c60:	add	r0, sp, #15
   15c64:	bic	r0, r0, #15
   15c68:	cmp	r0, #0
   15c6c:	beq	15d54 <__assert_fail@plt+0x47e4>
   15c70:	mov	r3, #1
   15c74:	str	r3, [r0, #4]
   15c78:	cmp	r5, #2
   15c7c:	bls	15cf0 <__assert_fail@plt+0x4780>
   15c80:	mov	lr, r4
   15c84:	mov	r3, #0
   15c88:	mov	ip, #2
   15c8c:	b	15cb0 <__assert_fail@plt+0x4740>
   15c90:	bl	1b194 <__assert_fail@plt+0x9c24>
   15c94:	b	15c68 <__assert_fail@plt+0x46f8>
   15c98:	add	r3, r3, #1
   15c9c:	sub	r2, ip, r3
   15ca0:	str	r2, [r0, ip, lsl #2]
   15ca4:	add	ip, ip, #1
   15ca8:	cmp	r5, ip
   15cac:	beq	15cf0 <__assert_fail@plt+0x4780>
   15cb0:	ldrb	r1, [lr, #1]!
   15cb4:	ldrb	r2, [r4, r3]
   15cb8:	cmp	r2, r1
   15cbc:	beq	15c98 <__assert_fail@plt+0x4728>
   15cc0:	cmp	r3, #0
   15cc4:	beq	15ce4 <__assert_fail@plt+0x4774>
   15cc8:	ldr	r2, [r0, r3, lsl #2]
   15ccc:	sub	r3, r3, r2
   15cd0:	ldrb	r2, [r4, r3]
   15cd4:	cmp	r2, r1
   15cd8:	beq	15c98 <__assert_fail@plt+0x4728>
   15cdc:	cmp	r3, #0
   15ce0:	bne	15cc8 <__assert_fail@plt+0x4758>
   15ce4:	str	ip, [r0, ip, lsl #2]
   15ce8:	mov	r3, #0
   15cec:	b	15ca4 <__assert_fail@plt+0x4734>
   15cf0:	mov	r3, #0
   15cf4:	str	r3, [r7]
   15cf8:	mov	r1, r6
   15cfc:	b	15d10 <__assert_fail@plt+0x47a0>
   15d00:	add	r3, r3, #1
   15d04:	add	r1, r1, #1
   15d08:	cmp	r5, r3
   15d0c:	beq	15d48 <__assert_fail@plt+0x47d8>
   15d10:	ldrb	r2, [r1]
   15d14:	cmp	r2, #0
   15d18:	beq	15d4c <__assert_fail@plt+0x47dc>
   15d1c:	ldrb	ip, [r4, r3]
   15d20:	cmp	ip, r2
   15d24:	beq	15d00 <__assert_fail@plt+0x4790>
   15d28:	cmp	r3, #0
   15d2c:	addeq	r6, r6, #1
   15d30:	addeq	r1, r1, #1
   15d34:	beq	15d10 <__assert_fail@plt+0x47a0>
   15d38:	ldr	r2, [r0, r3, lsl #2]
   15d3c:	add	r6, r6, r2
   15d40:	sub	r3, r3, r2
   15d44:	b	15d10 <__assert_fail@plt+0x47a0>
   15d48:	str	r6, [r7]
   15d4c:	bl	1b1fc <__assert_fail@plt+0x9c8c>
   15d50:	mov	r8, #1
   15d54:	mov	r0, r8
   15d58:	sub	sp, fp, #28
   15d5c:	ldrd	r4, [sp]
   15d60:	ldrd	r6, [sp, #8]
   15d64:	ldrd	r8, [sp, #16]
   15d68:	ldr	fp, [sp, #24]
   15d6c:	add	sp, sp, #28
   15d70:	pop	{pc}		; (ldr pc, [sp], #4)
   15d74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d78:	strd	r6, [sp, #8]
   15d7c:	strd	r8, [sp, #16]
   15d80:	strd	sl, [sp, #24]
   15d84:	str	lr, [sp, #32]
   15d88:	add	fp, sp, #32
   15d8c:	sub	sp, sp, #140	; 0x8c
   15d90:	str	r0, [fp, #-164]	; 0xffffff5c
   15d94:	mov	r4, r1
   15d98:	str	r2, [fp, #-160]	; 0xffffff60
   15d9c:	mov	r0, r1
   15da0:	bl	1b2f4 <__assert_fail@plt+0x9d84>
   15da4:	str	r0, [fp, #-152]	; 0xffffff68
   15da8:	mov	r2, #44	; 0x2c
   15dac:	umull	r6, r7, r0, r2
   15db0:	adds	r3, r7, #0
   15db4:	movne	r3, #1
   15db8:	cmp	r6, #0
   15dbc:	movlt	r3, #1
   15dc0:	str	r3, [fp, #-156]	; 0xffffff64
   15dc4:	cmp	r3, #0
   15dc8:	bne	16618 <__assert_fail@plt+0x50a8>
   15dcc:	mov	r1, r0
   15dd0:	mul	r0, r2, r1
   15dd4:	cmp	r0, #4016	; 0xfb0
   15dd8:	bhi	15e34 <__assert_fail@plt+0x48c4>
   15ddc:	add	r3, r0, #22
   15de0:	bic	r3, r3, #7
   15de4:	sub	sp, sp, r3
   15de8:	add	r8, sp, #15
   15dec:	bic	r8, r8, #15
   15df0:	cmp	r8, #0
   15df4:	beq	16174 <__assert_fail@plt+0x4c04>
   15df8:	ldr	r3, [fp, #-152]	; 0xffffff68
   15dfc:	add	r9, r3, r3, lsl #2
   15e00:	add	r9, r8, r9, lsl #3
   15e04:	str	r4, [fp, #-76]	; 0xffffffb4
   15e08:	mov	r3, #0
   15e0c:	strb	r3, [fp, #-92]	; 0xffffffa4
   15e10:	mov	r0, #0
   15e14:	mov	r1, #0
   15e18:	strd	r0, [fp, #-88]	; 0xffffffa8
   15e1c:	strb	r3, [fp, #-80]	; 0xffffffb0
   15e20:	add	r4, r8, #16
   15e24:	mov	r5, #1
   15e28:	movw	r7, #55700	; 0xd994
   15e2c:	movt	r7, #1
   15e30:	b	15f58 <__assert_fail@plt+0x49e8>
   15e34:	bl	1b194 <__assert_fail@plt+0x9c24>
   15e38:	mov	r8, r0
   15e3c:	b	15df0 <__assert_fail@plt+0x4880>
   15e40:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15e44:	sub	r1, fp, #60	; 0x3c
   15e48:	mov	r0, r4
   15e4c:	bl	1121c <memcpy@plt>
   15e50:	str	r4, [r4, #-16]
   15e54:	b	15f24 <__assert_fail@plt+0x49b4>
   15e58:	sub	r0, fp, #88	; 0x58
   15e5c:	bl	11234 <mbsinit@plt>
   15e60:	cmp	r0, #0
   15e64:	beq	15fa4 <__assert_fail@plt+0x4a34>
   15e68:	strb	r5, [fp, #-92]	; 0xffffffa4
   15e6c:	ldr	r6, [fp, #-76]	; 0xffffffb4
   15e70:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   15e74:	mov	r1, r0
   15e78:	mov	r0, r6
   15e7c:	bl	199f0 <__assert_fail@plt+0x8480>
   15e80:	sub	r3, fp, #88	; 0x58
   15e84:	mov	r2, r0
   15e88:	mov	r1, r6
   15e8c:	sub	r0, fp, #64	; 0x40
   15e90:	bl	1af5c <__assert_fail@plt+0x99ec>
   15e94:	str	r0, [fp, #-72]	; 0xffffffb8
   15e98:	cmn	r0, #1
   15e9c:	streq	r5, [fp, #-72]	; 0xffffffb8
   15ea0:	moveq	r3, #0
   15ea4:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   15ea8:	beq	15ef4 <__assert_fail@plt+0x4984>
   15eac:	cmn	r0, #2
   15eb0:	beq	15fc4 <__assert_fail@plt+0x4a54>
   15eb4:	cmp	r0, #0
   15eb8:	bne	15edc <__assert_fail@plt+0x496c>
   15ebc:	str	r5, [fp, #-72]	; 0xffffffb8
   15ec0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15ec4:	ldrb	r3, [r3]
   15ec8:	cmp	r3, #0
   15ecc:	bne	15fdc <__assert_fail@plt+0x4a6c>
   15ed0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15ed4:	cmp	r3, #0
   15ed8:	bne	15ffc <__assert_fail@plt+0x4a8c>
   15edc:	strb	r5, [fp, #-68]	; 0xffffffbc
   15ee0:	sub	r0, fp, #88	; 0x58
   15ee4:	bl	11234 <mbsinit@plt>
   15ee8:	cmp	r0, #0
   15eec:	movne	r3, #0
   15ef0:	strbne	r3, [fp, #-92]	; 0xffffffa4
   15ef4:	strb	r5, [fp, #-80]	; 0xffffffb0
   15ef8:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15efc:	cmp	r3, #0
   15f00:	beq	15f10 <__assert_fail@plt+0x49a0>
   15f04:	ldr	r6, [fp, #-64]	; 0xffffffc0
   15f08:	cmp	r6, #0
   15f0c:	beq	1601c <__assert_fail@plt+0x4aac>
   15f10:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15f14:	sub	r2, fp, #60	; 0x3c
   15f18:	cmp	r3, r2
   15f1c:	strne	r3, [r4, #-16]
   15f20:	beq	15e40 <__assert_fail@plt+0x48d0>
   15f24:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15f28:	str	r2, [r4, #-12]
   15f2c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15f30:	strb	r3, [r4, #-8]
   15f34:	cmp	r3, #0
   15f38:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   15f3c:	strne	r3, [r4, #-4]
   15f40:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15f44:	add	r3, r3, r2
   15f48:	str	r3, [fp, #-76]	; 0xffffffb4
   15f4c:	mov	r3, #0
   15f50:	strb	r3, [fp, #-80]	; 0xffffffb0
   15f54:	add	r4, r4, #40	; 0x28
   15f58:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15f5c:	cmp	r3, #0
   15f60:	bne	15ef8 <__assert_fail@plt+0x4988>
   15f64:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15f68:	cmp	r3, #0
   15f6c:	bne	15e6c <__assert_fail@plt+0x48fc>
   15f70:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15f74:	ldrb	r3, [r1]
   15f78:	lsr	r2, r3, #5
   15f7c:	and	r3, r3, #31
   15f80:	ldr	r2, [r7, r2, lsl #2]
   15f84:	lsr	r3, r2, r3
   15f88:	tst	r3, #1
   15f8c:	beq	15e58 <__assert_fail@plt+0x48e8>
   15f90:	str	r5, [fp, #-72]	; 0xffffffb8
   15f94:	ldrb	r3, [r1]
   15f98:	str	r3, [fp, #-64]	; 0xffffffc0
   15f9c:	strb	r5, [fp, #-68]	; 0xffffffbc
   15fa0:	b	15ef4 <__assert_fail@plt+0x4984>
   15fa4:	movw	r3, #54444	; 0xd4ac
   15fa8:	movt	r3, #1
   15fac:	mov	r2, #143	; 0x8f
   15fb0:	movw	r1, #54464	; 0xd4c0
   15fb4:	movt	r1, #1
   15fb8:	movw	r0, #54476	; 0xd4cc
   15fbc:	movt	r0, #1
   15fc0:	bl	11570 <__assert_fail@plt>
   15fc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15fc8:	bl	113c0 <strlen@plt>
   15fcc:	str	r0, [fp, #-72]	; 0xffffffb8
   15fd0:	mov	r3, #0
   15fd4:	strb	r3, [fp, #-68]	; 0xffffffbc
   15fd8:	b	15ef4 <__assert_fail@plt+0x4984>
   15fdc:	movw	r3, #54444	; 0xd4ac
   15fe0:	movt	r3, #1
   15fe4:	mov	r2, #171	; 0xab
   15fe8:	movw	r1, #54464	; 0xd4c0
   15fec:	movt	r1, #1
   15ff0:	movw	r0, #54500	; 0xd4e4
   15ff4:	movt	r0, #1
   15ff8:	bl	11570 <__assert_fail@plt>
   15ffc:	movw	r3, #54444	; 0xd4ac
   16000:	movt	r3, #1
   16004:	mov	r2, #172	; 0xac
   16008:	movw	r1, #54464	; 0xd4c0
   1600c:	movt	r1, #1
   16010:	movw	r0, #54524	; 0xd4fc
   16014:	movt	r0, #1
   16018:	bl	11570 <__assert_fail@plt>
   1601c:	str	r3, [fp, #-156]	; 0xffffff64
   16020:	mov	r3, #1
   16024:	str	r3, [r9, #4]
   16028:	ldr	r3, [fp, #-152]	; 0xffffff68
   1602c:	cmp	r3, #2
   16030:	bls	16100 <__assert_fail@plt+0x4b90>
   16034:	mov	r7, r8
   16038:	mov	r4, r6
   1603c:	mov	sl, #2
   16040:	str	r6, [fp, #-168]	; 0xffffff58
   16044:	b	160e8 <__assert_fail@plt+0x4b78>
   16048:	ldr	r2, [r5, #44]	; 0x2c
   1604c:	add	r3, r4, r4, lsl #2
   16050:	add	r1, r8, r3, lsl #3
   16054:	ldr	r1, [r1, #4]
   16058:	cmp	r2, r1
   1605c:	movne	r0, #0
   16060:	beq	160b0 <__assert_fail@plt+0x4b40>
   16064:	cmp	r0, #0
   16068:	bne	160c8 <__assert_fail@plt+0x4b58>
   1606c:	cmp	r4, #0
   16070:	beq	160f4 <__assert_fail@plt+0x4b84>
   16074:	ldr	r3, [r9, r4, lsl #2]
   16078:	sub	r4, r4, r3
   1607c:	cmp	r6, #0
   16080:	beq	16048 <__assert_fail@plt+0x4ad8>
   16084:	add	r3, r4, r4, lsl #2
   16088:	add	r3, r8, r3, lsl #3
   1608c:	ldrb	r2, [r3, #8]
   16090:	cmp	r2, #0
   16094:	beq	16048 <__assert_fail@plt+0x4ad8>
   16098:	ldr	r0, [r5, #52]	; 0x34
   1609c:	ldr	r3, [r3, #12]
   160a0:	cmp	r0, r3
   160a4:	movne	r0, #0
   160a8:	moveq	r0, #1
   160ac:	b	16064 <__assert_fail@plt+0x4af4>
   160b0:	ldr	r1, [r8, r3, lsl #3]
   160b4:	ldr	r0, [r5, #40]	; 0x28
   160b8:	bl	1124c <memcmp@plt>
   160bc:	clz	r0, r0
   160c0:	lsr	r0, r0, #5
   160c4:	b	16064 <__assert_fail@plt+0x4af4>
   160c8:	add	r4, r4, #1
   160cc:	sub	r3, sl, r4
   160d0:	str	r3, [r9, sl, lsl #2]
   160d4:	add	sl, sl, #1
   160d8:	add	r7, r7, #40	; 0x28
   160dc:	ldr	r3, [fp, #-152]	; 0xffffff68
   160e0:	cmp	r3, sl
   160e4:	beq	160fc <__assert_fail@plt+0x4b8c>
   160e8:	mov	r5, r7
   160ec:	ldrb	r6, [r7, #48]	; 0x30
   160f0:	b	1607c <__assert_fail@plt+0x4b0c>
   160f4:	str	sl, [r9, sl, lsl #2]
   160f8:	b	160d4 <__assert_fail@plt+0x4b64>
   160fc:	ldr	r6, [fp, #-168]	; 0xffffff58
   16100:	mov	r3, #0
   16104:	ldr	r2, [fp, #-160]	; 0xffffff60
   16108:	str	r3, [r2]
   1610c:	ldr	r2, [fp, #-164]	; 0xffffff5c
   16110:	str	r2, [fp, #-132]	; 0xffffff7c
   16114:	strb	r3, [fp, #-148]	; 0xffffff6c
   16118:	mov	r0, #0
   1611c:	mov	r1, #0
   16120:	strd	r0, [fp, #-144]	; 0xffffff70
   16124:	strb	r3, [fp, #-136]	; 0xffffff78
   16128:	str	r2, [fp, #-76]	; 0xffffffb4
   1612c:	strb	r3, [fp, #-92]	; 0xffffffa4
   16130:	strd	r0, [fp, #-88]	; 0xffffffa8
   16134:	strb	r3, [fp, #-80]	; 0xffffffb0
   16138:	mov	r5, #1
   1613c:	movw	sl, #55700	; 0xd994
   16140:	movt	sl, #1
   16144:	b	16670 <__assert_fail@plt+0x5100>
   16148:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1614c:	ldr	r0, [r3]
   16150:	bl	1124c <memcmp@plt>
   16154:	clz	r0, r0
   16158:	lsr	r0, r0, #5
   1615c:	b	16640 <__assert_fail@plt+0x50d0>
   16160:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16164:	ldr	r2, [fp, #-160]	; 0xffffff60
   16168:	str	r3, [r2]
   1616c:	mov	r0, r8
   16170:	bl	1b1fc <__assert_fail@plt+0x9c8c>
   16174:	ldr	r0, [fp, #-156]	; 0xffffff64
   16178:	sub	sp, fp, #32
   1617c:	ldrd	r4, [sp]
   16180:	ldrd	r6, [sp, #8]
   16184:	ldrd	r8, [sp, #16]
   16188:	ldrd	sl, [sp, #24]
   1618c:	add	sp, sp, #32
   16190:	pop	{pc}		; (ldr pc, [sp], #4)
   16194:	cmp	r6, #0
   16198:	bne	16230 <__assert_fail@plt+0x4cc0>
   1619c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   161a0:	cmp	r3, #0
   161a4:	bne	161e8 <__assert_fail@plt+0x4c78>
   161a8:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   161ac:	cmp	r3, #0
   161b0:	bne	163f8 <__assert_fail@plt+0x4e88>
   161b4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   161b8:	ldrb	r3, [r1]
   161bc:	lsr	r2, r3, #5
   161c0:	and	r3, r3, #31
   161c4:	ldr	r2, [sl, r2, lsl #2]
   161c8:	lsr	r3, r2, r3
   161cc:	tst	r3, #1
   161d0:	beq	163e4 <__assert_fail@plt+0x4e74>
   161d4:	str	r5, [fp, #-128]	; 0xffffff80
   161d8:	ldrb	r3, [r1]
   161dc:	str	r3, [fp, #-120]	; 0xffffff88
   161e0:	strb	r5, [fp, #-124]	; 0xffffff84
   161e4:	strb	r5, [fp, #-136]	; 0xffffff78
   161e8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   161ec:	cmp	r3, #0
   161f0:	beq	16200 <__assert_fail@plt+0x4c90>
   161f4:	ldr	r3, [fp, #-120]	; 0xffffff88
   161f8:	cmp	r3, #0
   161fc:	beq	164fc <__assert_fail@plt+0x4f8c>
   16200:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16204:	ldr	r2, [fp, #-128]	; 0xffffff80
   16208:	add	r3, r3, r2
   1620c:	str	r3, [fp, #-132]	; 0xffffff7c
   16210:	mov	r2, #0
   16214:	strb	r2, [fp, #-136]	; 0xffffff78
   16218:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1621c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16220:	add	r3, r3, r1
   16224:	str	r3, [fp, #-76]	; 0xffffffb4
   16228:	strb	r2, [fp, #-80]	; 0xffffffb0
   1622c:	b	16670 <__assert_fail@plt+0x5100>
   16230:	ldr	r4, [r9, r6, lsl #2]
   16234:	sub	r6, r6, r4
   16238:	cmp	r4, #0
   1623c:	bne	1631c <__assert_fail@plt+0x4dac>
   16240:	b	16670 <__assert_fail@plt+0x5100>
   16244:	sub	r0, fp, #144	; 0x90
   16248:	bl	11234 <mbsinit@plt>
   1624c:	cmp	r0, #0
   16250:	beq	16368 <__assert_fail@plt+0x4df8>
   16254:	strb	r5, [fp, #-148]	; 0xffffff6c
   16258:	ldr	r7, [fp, #-132]	; 0xffffff7c
   1625c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16260:	mov	r1, r0
   16264:	mov	r0, r7
   16268:	bl	199f0 <__assert_fail@plt+0x8480>
   1626c:	sub	r3, fp, #144	; 0x90
   16270:	mov	r2, r0
   16274:	mov	r1, r7
   16278:	sub	r0, fp, #120	; 0x78
   1627c:	bl	1af5c <__assert_fail@plt+0x99ec>
   16280:	str	r0, [fp, #-128]	; 0xffffff80
   16284:	cmn	r0, #1
   16288:	streq	r5, [fp, #-128]	; 0xffffff80
   1628c:	moveq	r3, #0
   16290:	strbeq	r3, [fp, #-124]	; 0xffffff84
   16294:	beq	162e0 <__assert_fail@plt+0x4d70>
   16298:	cmn	r0, #2
   1629c:	beq	16388 <__assert_fail@plt+0x4e18>
   162a0:	cmp	r0, #0
   162a4:	bne	162c8 <__assert_fail@plt+0x4d58>
   162a8:	str	r5, [fp, #-128]	; 0xffffff80
   162ac:	ldr	r3, [fp, #-132]	; 0xffffff7c
   162b0:	ldrb	r3, [r3]
   162b4:	cmp	r3, #0
   162b8:	bne	163a0 <__assert_fail@plt+0x4e30>
   162bc:	ldr	r3, [fp, #-120]	; 0xffffff88
   162c0:	cmp	r3, #0
   162c4:	bne	163c0 <__assert_fail@plt+0x4e50>
   162c8:	strb	r5, [fp, #-124]	; 0xffffff84
   162cc:	sub	r0, fp, #144	; 0x90
   162d0:	bl	11234 <mbsinit@plt>
   162d4:	cmp	r0, #0
   162d8:	movne	r3, #0
   162dc:	strbne	r3, [fp, #-148]	; 0xffffff6c
   162e0:	strb	r5, [fp, #-136]	; 0xffffff78
   162e4:	ldrb	r3, [fp, #-124]	; 0xffffff84
   162e8:	cmp	r3, #0
   162ec:	beq	162fc <__assert_fail@plt+0x4d8c>
   162f0:	ldr	r3, [fp, #-120]	; 0xffffff88
   162f4:	cmp	r3, #0
   162f8:	beq	163e0 <__assert_fail@plt+0x4e70>
   162fc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16300:	ldr	r2, [fp, #-128]	; 0xffffff80
   16304:	add	r3, r3, r2
   16308:	str	r3, [fp, #-132]	; 0xffffff7c
   1630c:	mov	r3, #0
   16310:	strb	r3, [fp, #-136]	; 0xffffff78
   16314:	subs	r4, r4, #1
   16318:	beq	16670 <__assert_fail@plt+0x5100>
   1631c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   16320:	cmp	r3, #0
   16324:	bne	162e4 <__assert_fail@plt+0x4d74>
   16328:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1632c:	cmp	r3, #0
   16330:	bne	16258 <__assert_fail@plt+0x4ce8>
   16334:	ldr	r1, [fp, #-132]	; 0xffffff7c
   16338:	ldrb	r3, [r1]
   1633c:	lsr	r2, r3, #5
   16340:	and	r3, r3, #31
   16344:	ldr	r2, [sl, r2, lsl #2]
   16348:	lsr	r3, r2, r3
   1634c:	tst	r3, #1
   16350:	beq	16244 <__assert_fail@plt+0x4cd4>
   16354:	str	r5, [fp, #-128]	; 0xffffff80
   16358:	ldrb	r3, [r1]
   1635c:	str	r3, [fp, #-120]	; 0xffffff88
   16360:	strb	r5, [fp, #-124]	; 0xffffff84
   16364:	b	162e0 <__assert_fail@plt+0x4d70>
   16368:	movw	r3, #54444	; 0xd4ac
   1636c:	movt	r3, #1
   16370:	mov	r2, #143	; 0x8f
   16374:	movw	r1, #54464	; 0xd4c0
   16378:	movt	r1, #1
   1637c:	movw	r0, #54476	; 0xd4cc
   16380:	movt	r0, #1
   16384:	bl	11570 <__assert_fail@plt>
   16388:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1638c:	bl	113c0 <strlen@plt>
   16390:	str	r0, [fp, #-128]	; 0xffffff80
   16394:	mov	r3, #0
   16398:	strb	r3, [fp, #-124]	; 0xffffff84
   1639c:	b	162e0 <__assert_fail@plt+0x4d70>
   163a0:	movw	r3, #54444	; 0xd4ac
   163a4:	movt	r3, #1
   163a8:	mov	r2, #171	; 0xab
   163ac:	movw	r1, #54464	; 0xd4c0
   163b0:	movt	r1, #1
   163b4:	movw	r0, #54500	; 0xd4e4
   163b8:	movt	r0, #1
   163bc:	bl	11570 <__assert_fail@plt>
   163c0:	movw	r3, #54444	; 0xd4ac
   163c4:	movt	r3, #1
   163c8:	mov	r2, #172	; 0xac
   163cc:	movw	r1, #54464	; 0xd4c0
   163d0:	movt	r1, #1
   163d4:	movw	r0, #54524	; 0xd4fc
   163d8:	movt	r0, #1
   163dc:	bl	11570 <__assert_fail@plt>
   163e0:	bl	11540 <abort@plt>
   163e4:	sub	r0, fp, #144	; 0x90
   163e8:	bl	11234 <mbsinit@plt>
   163ec:	cmp	r0, #0
   163f0:	beq	16484 <__assert_fail@plt+0x4f14>
   163f4:	strb	r5, [fp, #-148]	; 0xffffff6c
   163f8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   163fc:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16400:	mov	r1, r0
   16404:	mov	r0, r4
   16408:	bl	199f0 <__assert_fail@plt+0x8480>
   1640c:	sub	r3, fp, #144	; 0x90
   16410:	mov	r2, r0
   16414:	mov	r1, r4
   16418:	sub	r0, fp, #120	; 0x78
   1641c:	bl	1af5c <__assert_fail@plt+0x99ec>
   16420:	str	r0, [fp, #-128]	; 0xffffff80
   16424:	cmn	r0, #1
   16428:	streq	r5, [fp, #-128]	; 0xffffff80
   1642c:	moveq	r3, #0
   16430:	strbeq	r3, [fp, #-124]	; 0xffffff84
   16434:	beq	161e4 <__assert_fail@plt+0x4c74>
   16438:	cmn	r0, #2
   1643c:	beq	164a4 <__assert_fail@plt+0x4f34>
   16440:	cmp	r0, #0
   16444:	bne	16468 <__assert_fail@plt+0x4ef8>
   16448:	str	r5, [fp, #-128]	; 0xffffff80
   1644c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16450:	ldrb	r3, [r3]
   16454:	cmp	r3, #0
   16458:	bne	164bc <__assert_fail@plt+0x4f4c>
   1645c:	ldr	r3, [fp, #-120]	; 0xffffff88
   16460:	cmp	r3, #0
   16464:	bne	164dc <__assert_fail@plt+0x4f6c>
   16468:	strb	r5, [fp, #-124]	; 0xffffff84
   1646c:	sub	r0, fp, #144	; 0x90
   16470:	bl	11234 <mbsinit@plt>
   16474:	cmp	r0, #0
   16478:	movne	r3, #0
   1647c:	strbne	r3, [fp, #-148]	; 0xffffff6c
   16480:	b	161e4 <__assert_fail@plt+0x4c74>
   16484:	movw	r3, #54444	; 0xd4ac
   16488:	movt	r3, #1
   1648c:	mov	r2, #143	; 0x8f
   16490:	movw	r1, #54464	; 0xd4c0
   16494:	movt	r1, #1
   16498:	movw	r0, #54476	; 0xd4cc
   1649c:	movt	r0, #1
   164a0:	bl	11570 <__assert_fail@plt>
   164a4:	ldr	r0, [fp, #-132]	; 0xffffff7c
   164a8:	bl	113c0 <strlen@plt>
   164ac:	str	r0, [fp, #-128]	; 0xffffff80
   164b0:	mov	r3, #0
   164b4:	strb	r3, [fp, #-124]	; 0xffffff84
   164b8:	b	161e4 <__assert_fail@plt+0x4c74>
   164bc:	movw	r3, #54444	; 0xd4ac
   164c0:	movt	r3, #1
   164c4:	mov	r2, #171	; 0xab
   164c8:	movw	r1, #54464	; 0xd4c0
   164cc:	movt	r1, #1
   164d0:	movw	r0, #54500	; 0xd4e4
   164d4:	movt	r0, #1
   164d8:	bl	11570 <__assert_fail@plt>
   164dc:	movw	r3, #54444	; 0xd4ac
   164e0:	movt	r3, #1
   164e4:	mov	r2, #172	; 0xac
   164e8:	movw	r1, #54464	; 0xd4c0
   164ec:	movt	r1, #1
   164f0:	movw	r0, #54524	; 0xd4fc
   164f4:	movt	r0, #1
   164f8:	bl	11570 <__assert_fail@plt>
   164fc:	bl	11540 <abort@plt>
   16500:	sub	r0, fp, #88	; 0x58
   16504:	bl	11234 <mbsinit@plt>
   16508:	cmp	r0, #0
   1650c:	beq	165a0 <__assert_fail@plt+0x5030>
   16510:	strb	r5, [fp, #-92]	; 0xffffffa4
   16514:	ldr	r4, [fp, #-76]	; 0xffffffb4
   16518:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1651c:	mov	r1, r0
   16520:	mov	r0, r4
   16524:	bl	199f0 <__assert_fail@plt+0x8480>
   16528:	sub	r3, fp, #88	; 0x58
   1652c:	mov	r2, r0
   16530:	mov	r1, r4
   16534:	sub	r0, fp, #64	; 0x40
   16538:	bl	1af5c <__assert_fail@plt+0x99ec>
   1653c:	str	r0, [fp, #-72]	; 0xffffffb8
   16540:	cmn	r0, #1
   16544:	streq	r5, [fp, #-72]	; 0xffffffb8
   16548:	moveq	r3, #0
   1654c:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   16550:	beq	166b8 <__assert_fail@plt+0x5148>
   16554:	cmn	r0, #2
   16558:	beq	165c0 <__assert_fail@plt+0x5050>
   1655c:	cmp	r0, #0
   16560:	bne	16584 <__assert_fail@plt+0x5014>
   16564:	str	r5, [fp, #-72]	; 0xffffffb8
   16568:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1656c:	ldrb	r3, [r3]
   16570:	cmp	r3, #0
   16574:	bne	165d8 <__assert_fail@plt+0x5068>
   16578:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1657c:	cmp	r3, #0
   16580:	bne	165f8 <__assert_fail@plt+0x5088>
   16584:	strb	r5, [fp, #-68]	; 0xffffffbc
   16588:	sub	r0, fp, #88	; 0x58
   1658c:	bl	11234 <mbsinit@plt>
   16590:	cmp	r0, #0
   16594:	movne	r3, #0
   16598:	strbne	r3, [fp, #-92]	; 0xffffffa4
   1659c:	b	166b8 <__assert_fail@plt+0x5148>
   165a0:	movw	r3, #54444	; 0xd4ac
   165a4:	movt	r3, #1
   165a8:	mov	r2, #143	; 0x8f
   165ac:	movw	r1, #54464	; 0xd4c0
   165b0:	movt	r1, #1
   165b4:	movw	r0, #54476	; 0xd4cc
   165b8:	movt	r0, #1
   165bc:	bl	11570 <__assert_fail@plt>
   165c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   165c4:	bl	113c0 <strlen@plt>
   165c8:	str	r0, [fp, #-72]	; 0xffffffb8
   165cc:	mov	r3, #0
   165d0:	strb	r3, [fp, #-68]	; 0xffffffbc
   165d4:	b	166b8 <__assert_fail@plt+0x5148>
   165d8:	movw	r3, #54444	; 0xd4ac
   165dc:	movt	r3, #1
   165e0:	mov	r2, #171	; 0xab
   165e4:	movw	r1, #54464	; 0xd4c0
   165e8:	movt	r1, #1
   165ec:	movw	r0, #54500	; 0xd4e4
   165f0:	movt	r0, #1
   165f4:	bl	11570 <__assert_fail@plt>
   165f8:	movw	r3, #54444	; 0xd4ac
   165fc:	movt	r3, #1
   16600:	mov	r2, #172	; 0xac
   16604:	movw	r1, #54464	; 0xd4c0
   16608:	movt	r1, #1
   1660c:	movw	r0, #54524	; 0xd4fc
   16610:	movt	r0, #1
   16614:	bl	11570 <__assert_fail@plt>
   16618:	mov	r3, #0
   1661c:	str	r3, [fp, #-156]	; 0xffffff64
   16620:	b	16174 <__assert_fail@plt+0x4c04>
   16624:	add	r3, r6, r6, lsl #2
   16628:	add	r3, r8, r3, lsl #3
   1662c:	ldr	r2, [r3, #4]
   16630:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16634:	cmp	r2, r1
   16638:	movne	r0, #0
   1663c:	beq	16148 <__assert_fail@plt+0x4bd8>
   16640:	cmp	r0, #0
   16644:	beq	16194 <__assert_fail@plt+0x4c24>
   16648:	add	r6, r6, #1
   1664c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16650:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16654:	add	r3, r3, r2
   16658:	str	r3, [fp, #-76]	; 0xffffffb4
   1665c:	mov	r3, #0
   16660:	strb	r3, [fp, #-80]	; 0xffffffb0
   16664:	ldr	r3, [fp, #-152]	; 0xffffff68
   16668:	cmp	r3, r6
   1666c:	beq	16160 <__assert_fail@plt+0x4bf0>
   16670:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   16674:	cmp	r3, #0
   16678:	bne	166bc <__assert_fail@plt+0x514c>
   1667c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   16680:	cmp	r3, #0
   16684:	bne	16514 <__assert_fail@plt+0x4fa4>
   16688:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1668c:	ldrb	r3, [r1]
   16690:	lsr	r2, r3, #5
   16694:	and	r3, r3, #31
   16698:	ldr	r2, [sl, r2, lsl #2]
   1669c:	lsr	r3, r2, r3
   166a0:	tst	r3, #1
   166a4:	beq	16500 <__assert_fail@plt+0x4f90>
   166a8:	str	r5, [fp, #-72]	; 0xffffffb8
   166ac:	ldrb	r3, [r1]
   166b0:	str	r3, [fp, #-64]	; 0xffffffc0
   166b4:	strb	r5, [fp, #-68]	; 0xffffffbc
   166b8:	strb	r5, [fp, #-80]	; 0xffffffb0
   166bc:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   166c0:	cmp	r3, #0
   166c4:	beq	16624 <__assert_fail@plt+0x50b4>
   166c8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   166cc:	cmp	r2, #0
   166d0:	beq	1616c <__assert_fail@plt+0x4bfc>
   166d4:	add	r3, r6, r6, lsl #2
   166d8:	add	r3, r8, r3, lsl #3
   166dc:	ldrb	r1, [r3, #8]
   166e0:	cmp	r1, #0
   166e4:	beq	1662c <__assert_fail@plt+0x50bc>
   166e8:	ldr	r0, [r3, #12]
   166ec:	cmp	r0, r2
   166f0:	movne	r0, #0
   166f4:	moveq	r0, #1
   166f8:	b	16640 <__assert_fail@plt+0x50d0>
   166fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16700:	strd	r6, [sp, #8]
   16704:	strd	r8, [sp, #16]
   16708:	strd	sl, [sp, #24]
   1670c:	str	lr, [sp, #32]
   16710:	sub	sp, sp, #292	; 0x124
   16714:	mov	r5, r0
   16718:	mov	r7, r1
   1671c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16720:	cmp	r0, #1
   16724:	bhi	16764 <__assert_fail@plt+0x51f4>
   16728:	ldrb	r8, [r7]
   1672c:	cmp	r8, #0
   16730:	moveq	r0, r5
   16734:	beq	17110 <__assert_fail@plt+0x5ba0>
   16738:	add	r3, r7, #1
   1673c:	str	r3, [sp, #4]
   16740:	ldrb	r3, [r5]
   16744:	cmp	r3, #0
   16748:	beq	174b8 <__assert_fail@plt+0x5f48>
   1674c:	mov	sl, r7
   16750:	mov	ip, #0
   16754:	mov	r6, ip
   16758:	mov	r9, ip
   1675c:	mov	lr, #1
   16760:	b	173b0 <__assert_fail@plt+0x5e40>
   16764:	str	r7, [sp, #24]
   16768:	mov	r3, #0
   1676c:	strb	r3, [sp, #8]
   16770:	mov	r0, #0
   16774:	mov	r1, #0
   16778:	strd	r0, [sp, #12]
   1677c:	strb	r3, [sp, #20]
   16780:	ldrb	r1, [r7]
   16784:	movw	r2, #55700	; 0xd994
   16788:	movt	r2, #1
   1678c:	lsr	r3, r1, #5
   16790:	and	r0, r1, #31
   16794:	ldr	r3, [r2, r3, lsl #2]
   16798:	lsr	r3, r3, r0
   1679c:	tst	r3, #1
   167a0:	beq	16818 <__assert_fail@plt+0x52a8>
   167a4:	mov	r3, #1
   167a8:	str	r3, [sp, #28]
   167ac:	str	r1, [sp, #36]	; 0x24
   167b0:	strb	r3, [sp, #32]
   167b4:	mov	r3, #1
   167b8:	strb	r3, [sp, #20]
   167bc:	ldrb	r3, [sp, #32]
   167c0:	cmp	r3, #0
   167c4:	beq	167d4 <__assert_fail@plt+0x5264>
   167c8:	ldr	r3, [sp, #36]	; 0x24
   167cc:	cmp	r3, #0
   167d0:	beq	17398 <__assert_fail@plt+0x5e28>
   167d4:	str	r7, [sp, #80]	; 0x50
   167d8:	mov	r6, #0
   167dc:	strb	r6, [sp, #64]	; 0x40
   167e0:	mov	r2, #0
   167e4:	mov	r3, #0
   167e8:	strd	r2, [sp, #68]	; 0x44
   167ec:	strb	r6, [sp, #76]	; 0x4c
   167f0:	str	r5, [sp, #136]	; 0x88
   167f4:	strb	r6, [sp, #120]	; 0x78
   167f8:	strd	r2, [sp, #124]	; 0x7c
   167fc:	strb	r6, [sp, #132]	; 0x84
   16800:	mov	sl, r6
   16804:	str	r6, [sp]
   16808:	mov	fp, #1
   1680c:	movw	r8, #55700	; 0xd994
   16810:	movt	r8, #1
   16814:	b	17554 <__assert_fail@plt+0x5fe4>
   16818:	add	r0, sp, #12
   1681c:	bl	11234 <mbsinit@plt>
   16820:	cmp	r0, #0
   16824:	beq	168b4 <__assert_fail@plt+0x5344>
   16828:	mov	r3, #1
   1682c:	strb	r3, [sp, #8]
   16830:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16834:	mov	r1, r0
   16838:	mov	r0, r7
   1683c:	bl	199f0 <__assert_fail@plt+0x8480>
   16840:	add	r3, sp, #12
   16844:	mov	r2, r0
   16848:	mov	r1, r7
   1684c:	add	r0, sp, #36	; 0x24
   16850:	bl	1af5c <__assert_fail@plt+0x99ec>
   16854:	str	r0, [sp, #28]
   16858:	cmn	r0, #1
   1685c:	beq	168d4 <__assert_fail@plt+0x5364>
   16860:	cmn	r0, #2
   16864:	beq	168e8 <__assert_fail@plt+0x5378>
   16868:	cmp	r0, #0
   1686c:	bne	16894 <__assert_fail@plt+0x5324>
   16870:	mov	r3, #1
   16874:	str	r3, [sp, #28]
   16878:	ldr	r3, [sp, #24]
   1687c:	ldrb	r3, [r3]
   16880:	cmp	r3, #0
   16884:	bne	16900 <__assert_fail@plt+0x5390>
   16888:	ldr	r3, [sp, #36]	; 0x24
   1688c:	cmp	r3, #0
   16890:	bne	16920 <__assert_fail@plt+0x53b0>
   16894:	mov	r3, #1
   16898:	strb	r3, [sp, #32]
   1689c:	add	r0, sp, #12
   168a0:	bl	11234 <mbsinit@plt>
   168a4:	cmp	r0, #0
   168a8:	movne	r3, #0
   168ac:	strbne	r3, [sp, #8]
   168b0:	b	167b4 <__assert_fail@plt+0x5244>
   168b4:	movw	r3, #54444	; 0xd4ac
   168b8:	movt	r3, #1
   168bc:	mov	r2, #143	; 0x8f
   168c0:	movw	r1, #54464	; 0xd4c0
   168c4:	movt	r1, #1
   168c8:	movw	r0, #54476	; 0xd4cc
   168cc:	movt	r0, #1
   168d0:	bl	11570 <__assert_fail@plt>
   168d4:	mov	r3, #1
   168d8:	str	r3, [sp, #28]
   168dc:	mov	r3, #0
   168e0:	strb	r3, [sp, #32]
   168e4:	b	167b4 <__assert_fail@plt+0x5244>
   168e8:	ldr	r0, [sp, #24]
   168ec:	bl	113c0 <strlen@plt>
   168f0:	str	r0, [sp, #28]
   168f4:	mov	r3, #0
   168f8:	strb	r3, [sp, #32]
   168fc:	b	167b4 <__assert_fail@plt+0x5244>
   16900:	movw	r3, #54444	; 0xd4ac
   16904:	movt	r3, #1
   16908:	mov	r2, #171	; 0xab
   1690c:	movw	r1, #54464	; 0xd4c0
   16910:	movt	r1, #1
   16914:	movw	r0, #54500	; 0xd4e4
   16918:	movt	r0, #1
   1691c:	bl	11570 <__assert_fail@plt>
   16920:	movw	r3, #54444	; 0xd4ac
   16924:	movt	r3, #1
   16928:	mov	r2, #172	; 0xac
   1692c:	movw	r1, #54464	; 0xd4c0
   16930:	movt	r1, #1
   16934:	movw	r0, #54524	; 0xd4fc
   16938:	movt	r0, #1
   1693c:	bl	11570 <__assert_fail@plt>
   16940:	add	r0, sp, #124	; 0x7c
   16944:	bl	11234 <mbsinit@plt>
   16948:	cmp	r0, #0
   1694c:	beq	169e0 <__assert_fail@plt+0x5470>
   16950:	mov	r3, #1
   16954:	strb	r3, [sp, #120]	; 0x78
   16958:	ldr	r4, [sp, #136]	; 0x88
   1695c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16960:	mov	r1, r0
   16964:	mov	r0, r4
   16968:	bl	199f0 <__assert_fail@plt+0x8480>
   1696c:	add	r3, sp, #124	; 0x7c
   16970:	mov	r2, r0
   16974:	mov	r1, r4
   16978:	add	r0, sp, #148	; 0x94
   1697c:	bl	1af5c <__assert_fail@plt+0x99ec>
   16980:	str	r0, [sp, #140]	; 0x8c
   16984:	cmn	r0, #1
   16988:	beq	16a00 <__assert_fail@plt+0x5490>
   1698c:	cmn	r0, #2
   16990:	beq	16a14 <__assert_fail@plt+0x54a4>
   16994:	cmp	r0, #0
   16998:	bne	169c0 <__assert_fail@plt+0x5450>
   1699c:	mov	r3, #1
   169a0:	str	r3, [sp, #140]	; 0x8c
   169a4:	ldr	r3, [sp, #136]	; 0x88
   169a8:	ldrb	r3, [r3]
   169ac:	cmp	r3, #0
   169b0:	bne	16a2c <__assert_fail@plt+0x54bc>
   169b4:	ldr	r3, [sp, #148]	; 0x94
   169b8:	cmp	r3, #0
   169bc:	bne	16a4c <__assert_fail@plt+0x54dc>
   169c0:	mov	r3, #1
   169c4:	strb	r3, [sp, #144]	; 0x90
   169c8:	add	r0, sp, #124	; 0x7c
   169cc:	bl	11234 <mbsinit@plt>
   169d0:	cmp	r0, #0
   169d4:	movne	r3, #0
   169d8:	strbne	r3, [sp, #120]	; 0x78
   169dc:	b	175a0 <__assert_fail@plt+0x6030>
   169e0:	movw	r3, #54444	; 0xd4ac
   169e4:	movt	r3, #1
   169e8:	mov	r2, #143	; 0x8f
   169ec:	movw	r1, #54464	; 0xd4c0
   169f0:	movt	r1, #1
   169f4:	movw	r0, #54476	; 0xd4cc
   169f8:	movt	r0, #1
   169fc:	bl	11570 <__assert_fail@plt>
   16a00:	mov	r3, #1
   16a04:	str	r3, [sp, #140]	; 0x8c
   16a08:	mov	r3, #0
   16a0c:	strb	r3, [sp, #144]	; 0x90
   16a10:	b	175a0 <__assert_fail@plt+0x6030>
   16a14:	ldr	r0, [sp, #136]	; 0x88
   16a18:	bl	113c0 <strlen@plt>
   16a1c:	str	r0, [sp, #140]	; 0x8c
   16a20:	mov	r3, #0
   16a24:	strb	r3, [sp, #144]	; 0x90
   16a28:	b	175a0 <__assert_fail@plt+0x6030>
   16a2c:	movw	r3, #54444	; 0xd4ac
   16a30:	movt	r3, #1
   16a34:	mov	r2, #171	; 0xab
   16a38:	movw	r1, #54464	; 0xd4c0
   16a3c:	movt	r1, #1
   16a40:	movw	r0, #54500	; 0xd4e4
   16a44:	movt	r0, #1
   16a48:	bl	11570 <__assert_fail@plt>
   16a4c:	movw	r3, #54444	; 0xd4ac
   16a50:	movt	r3, #1
   16a54:	mov	r2, #172	; 0xac
   16a58:	movw	r1, #54464	; 0xd4c0
   16a5c:	movt	r1, #1
   16a60:	movw	r0, #54524	; 0xd4fc
   16a64:	movt	r0, #1
   16a68:	bl	11570 <__assert_fail@plt>
   16a6c:	mov	r0, #0
   16a70:	b	17110 <__assert_fail@plt+0x5ba0>
   16a74:	add	r0, sp, #68	; 0x44
   16a78:	bl	11234 <mbsinit@plt>
   16a7c:	cmp	r0, #0
   16a80:	beq	16b98 <__assert_fail@plt+0x5628>
   16a84:	strb	r9, [sp, #64]	; 0x40
   16a88:	ldr	fp, [sp, #80]	; 0x50
   16a8c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16a90:	mov	r1, r0
   16a94:	mov	r0, fp
   16a98:	bl	199f0 <__assert_fail@plt+0x8480>
   16a9c:	add	r3, sp, #68	; 0x44
   16aa0:	mov	r2, r0
   16aa4:	mov	r1, fp
   16aa8:	add	r0, sp, #92	; 0x5c
   16aac:	bl	1af5c <__assert_fail@plt+0x99ec>
   16ab0:	str	r0, [sp, #84]	; 0x54
   16ab4:	cmn	r0, #1
   16ab8:	streq	r9, [sp, #84]	; 0x54
   16abc:	moveq	r3, #0
   16ac0:	strbeq	r3, [sp, #88]	; 0x58
   16ac4:	beq	16b10 <__assert_fail@plt+0x55a0>
   16ac8:	cmn	r0, #2
   16acc:	beq	16bb8 <__assert_fail@plt+0x5648>
   16ad0:	cmp	r0, #0
   16ad4:	bne	16af8 <__assert_fail@plt+0x5588>
   16ad8:	str	r9, [sp, #84]	; 0x54
   16adc:	ldr	r3, [sp, #80]	; 0x50
   16ae0:	ldrb	r3, [r3]
   16ae4:	cmp	r3, #0
   16ae8:	bne	16bd0 <__assert_fail@plt+0x5660>
   16aec:	ldr	r3, [sp, #92]	; 0x5c
   16af0:	cmp	r3, #0
   16af4:	bne	16bf0 <__assert_fail@plt+0x5680>
   16af8:	strb	r9, [sp, #88]	; 0x58
   16afc:	add	r0, sp, #68	; 0x44
   16b00:	bl	11234 <mbsinit@plt>
   16b04:	cmp	r0, #0
   16b08:	movne	r3, #0
   16b0c:	strbne	r3, [sp, #64]	; 0x40
   16b10:	strb	r9, [sp, #76]	; 0x4c
   16b14:	ldrb	r3, [sp, #88]	; 0x58
   16b18:	cmp	r3, #0
   16b1c:	beq	16b2c <__assert_fail@plt+0x55bc>
   16b20:	ldr	r3, [sp, #92]	; 0x5c
   16b24:	cmp	r3, #0
   16b28:	beq	174d8 <__assert_fail@plt+0x5f68>
   16b2c:	ldr	r3, [sp, #80]	; 0x50
   16b30:	ldr	r2, [sp, #84]	; 0x54
   16b34:	add	r3, r3, r2
   16b38:	str	r3, [sp, #80]	; 0x50
   16b3c:	mov	r3, #0
   16b40:	strb	r3, [sp, #76]	; 0x4c
   16b44:	subs	r4, r4, #1
   16b48:	beq	16c1c <__assert_fail@plt+0x56ac>
   16b4c:	ldrb	r3, [sp, #76]	; 0x4c
   16b50:	cmp	r3, #0
   16b54:	bne	16b14 <__assert_fail@plt+0x55a4>
   16b58:	ldrb	r3, [sp, #64]	; 0x40
   16b5c:	cmp	r3, #0
   16b60:	bne	16a88 <__assert_fail@plt+0x5518>
   16b64:	ldr	r1, [sp, #80]	; 0x50
   16b68:	ldrb	r3, [r1]
   16b6c:	lsr	r2, r3, #5
   16b70:	and	r3, r3, #31
   16b74:	ldr	r2, [r8, r2, lsl #2]
   16b78:	lsr	r3, r2, r3
   16b7c:	tst	r3, #1
   16b80:	beq	16a74 <__assert_fail@plt+0x5504>
   16b84:	str	r9, [sp, #84]	; 0x54
   16b88:	ldrb	r3, [r1]
   16b8c:	str	r3, [sp, #92]	; 0x5c
   16b90:	strb	r9, [sp, #88]	; 0x58
   16b94:	b	16b10 <__assert_fail@plt+0x55a0>
   16b98:	movw	r3, #54444	; 0xd4ac
   16b9c:	movt	r3, #1
   16ba0:	mov	r2, #143	; 0x8f
   16ba4:	movw	r1, #54464	; 0xd4c0
   16ba8:	movt	r1, #1
   16bac:	movw	r0, #54476	; 0xd4cc
   16bb0:	movt	r0, #1
   16bb4:	bl	11570 <__assert_fail@plt>
   16bb8:	ldr	r0, [sp, #80]	; 0x50
   16bbc:	bl	113c0 <strlen@plt>
   16bc0:	str	r0, [sp, #84]	; 0x54
   16bc4:	mov	r3, #0
   16bc8:	strb	r3, [sp, #88]	; 0x58
   16bcc:	b	16b10 <__assert_fail@plt+0x55a0>
   16bd0:	movw	r3, #54444	; 0xd4ac
   16bd4:	movt	r3, #1
   16bd8:	mov	r2, #171	; 0xab
   16bdc:	movw	r1, #54464	; 0xd4c0
   16be0:	movt	r1, #1
   16be4:	movw	r0, #54500	; 0xd4e4
   16be8:	movt	r0, #1
   16bec:	bl	11570 <__assert_fail@plt>
   16bf0:	movw	r3, #54444	; 0xd4ac
   16bf4:	movt	r3, #1
   16bf8:	mov	r2, #172	; 0xac
   16bfc:	movw	r1, #54464	; 0xd4c0
   16c00:	movt	r1, #1
   16c04:	movw	r0, #54524	; 0xd4fc
   16c08:	movt	r0, #1
   16c0c:	bl	11570 <__assert_fail@plt>
   16c10:	ldrb	r3, [sp, #76]	; 0x4c
   16c14:	cmp	r3, #0
   16c18:	bne	16c64 <__assert_fail@plt+0x56f4>
   16c1c:	ldrb	r3, [sp, #64]	; 0x40
   16c20:	cmp	r3, #0
   16c24:	bne	16ca8 <__assert_fail@plt+0x5738>
   16c28:	ldr	r1, [sp, #80]	; 0x50
   16c2c:	ldrb	r3, [r1]
   16c30:	lsr	r2, r3, #5
   16c34:	and	r3, r3, #31
   16c38:	ldr	r2, [r8, r2, lsl #2]
   16c3c:	lsr	r3, r2, r3
   16c40:	tst	r3, #1
   16c44:	beq	16c90 <__assert_fail@plt+0x5720>
   16c48:	mov	r3, #1
   16c4c:	str	r3, [sp, #84]	; 0x54
   16c50:	ldrb	r2, [r1]
   16c54:	str	r2, [sp, #92]	; 0x5c
   16c58:	strb	r3, [sp, #88]	; 0x58
   16c5c:	mov	r3, #1
   16c60:	strb	r3, [sp, #76]	; 0x4c
   16c64:	ldrb	fp, [sp, #88]	; 0x58
   16c68:	cmp	fp, #0
   16c6c:	moveq	fp, #1
   16c70:	bne	16dbc <__assert_fail@plt+0x584c>
   16c74:	add	r2, r6, #1
   16c78:	ldrb	r3, [sp, #144]	; 0x90
   16c7c:	cmp	r3, #0
   16c80:	beq	16dcc <__assert_fail@plt+0x585c>
   16c84:	str	r6, [sp]
   16c88:	mov	r6, r2
   16c8c:	b	175d8 <__assert_fail@plt+0x6068>
   16c90:	add	r0, sp, #68	; 0x44
   16c94:	bl	11234 <mbsinit@plt>
   16c98:	cmp	r0, #0
   16c9c:	beq	16d30 <__assert_fail@plt+0x57c0>
   16ca0:	mov	r3, #1
   16ca4:	strb	r3, [sp, #64]	; 0x40
   16ca8:	ldr	r4, [sp, #80]	; 0x50
   16cac:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16cb0:	mov	r1, r0
   16cb4:	mov	r0, r4
   16cb8:	bl	199f0 <__assert_fail@plt+0x8480>
   16cbc:	add	r3, sp, #68	; 0x44
   16cc0:	mov	r2, r0
   16cc4:	mov	r1, r4
   16cc8:	add	r0, sp, #92	; 0x5c
   16ccc:	bl	1af5c <__assert_fail@plt+0x99ec>
   16cd0:	str	r0, [sp, #84]	; 0x54
   16cd4:	cmn	r0, #1
   16cd8:	beq	16d50 <__assert_fail@plt+0x57e0>
   16cdc:	cmn	r0, #2
   16ce0:	beq	16d64 <__assert_fail@plt+0x57f4>
   16ce4:	cmp	r0, #0
   16ce8:	bne	16d10 <__assert_fail@plt+0x57a0>
   16cec:	mov	r3, #1
   16cf0:	str	r3, [sp, #84]	; 0x54
   16cf4:	ldr	r3, [sp, #80]	; 0x50
   16cf8:	ldrb	r3, [r3]
   16cfc:	cmp	r3, #0
   16d00:	bne	16d7c <__assert_fail@plt+0x580c>
   16d04:	ldr	r3, [sp, #92]	; 0x5c
   16d08:	cmp	r3, #0
   16d0c:	bne	16d9c <__assert_fail@plt+0x582c>
   16d10:	mov	r3, #1
   16d14:	strb	r3, [sp, #88]	; 0x58
   16d18:	add	r0, sp, #68	; 0x44
   16d1c:	bl	11234 <mbsinit@plt>
   16d20:	cmp	r0, #0
   16d24:	movne	r3, #0
   16d28:	strbne	r3, [sp, #64]	; 0x40
   16d2c:	b	16c5c <__assert_fail@plt+0x56ec>
   16d30:	movw	r3, #54444	; 0xd4ac
   16d34:	movt	r3, #1
   16d38:	mov	r2, #143	; 0x8f
   16d3c:	movw	r1, #54464	; 0xd4c0
   16d40:	movt	r1, #1
   16d44:	movw	r0, #54476	; 0xd4cc
   16d48:	movt	r0, #1
   16d4c:	bl	11570 <__assert_fail@plt>
   16d50:	mov	r3, #1
   16d54:	str	r3, [sp, #84]	; 0x54
   16d58:	mov	r3, #0
   16d5c:	strb	r3, [sp, #88]	; 0x58
   16d60:	b	16c5c <__assert_fail@plt+0x56ec>
   16d64:	ldr	r0, [sp, #80]	; 0x50
   16d68:	bl	113c0 <strlen@plt>
   16d6c:	str	r0, [sp, #84]	; 0x54
   16d70:	mov	r3, #0
   16d74:	strb	r3, [sp, #88]	; 0x58
   16d78:	b	16c5c <__assert_fail@plt+0x56ec>
   16d7c:	movw	r3, #54444	; 0xd4ac
   16d80:	movt	r3, #1
   16d84:	mov	r2, #171	; 0xab
   16d88:	movw	r1, #54464	; 0xd4c0
   16d8c:	movt	r1, #1
   16d90:	movw	r0, #54500	; 0xd4e4
   16d94:	movt	r0, #1
   16d98:	bl	11570 <__assert_fail@plt>
   16d9c:	movw	r3, #54444	; 0xd4ac
   16da0:	movt	r3, #1
   16da4:	mov	r2, #172	; 0xac
   16da8:	movw	r1, #54464	; 0xd4c0
   16dac:	movt	r1, #1
   16db0:	movw	r0, #54524	; 0xd4fc
   16db4:	movt	r0, #1
   16db8:	bl	11570 <__assert_fail@plt>
   16dbc:	ldr	r3, [sp, #92]	; 0x5c
   16dc0:	cmp	r3, #0
   16dc4:	bne	16c74 <__assert_fail@plt+0x5704>
   16dc8:	b	174e4 <__assert_fail@plt+0x5f74>
   16dcc:	str	r6, [sp]
   16dd0:	mov	r6, r2
   16dd4:	b	1751c <__assert_fail@plt+0x5fac>
   16dd8:	ldr	r1, [sp, #24]
   16ddc:	ldr	r0, [sp, #136]	; 0x88
   16de0:	bl	1124c <memcmp@plt>
   16de4:	clz	r0, r0
   16de8:	lsr	r0, r0, #5
   16dec:	b	17530 <__assert_fail@plt+0x5fc0>
   16df0:	ldrd	r2, [sp, #120]	; 0x78
   16df4:	strd	r2, [sp, #176]	; 0xb0
   16df8:	ldrd	r2, [sp, #128]	; 0x80
   16dfc:	strd	r2, [sp, #184]	; 0xb8
   16e00:	ldr	r1, [sp, #136]	; 0x88
   16e04:	ldr	r3, [sp, #140]	; 0x8c
   16e08:	str	r3, [sp, #196]	; 0xc4
   16e0c:	ldrd	r2, [sp, #144]	; 0x90
   16e10:	strd	r2, [sp, #200]	; 0xc8
   16e14:	ldrd	r2, [sp, #152]	; 0x98
   16e18:	strd	r2, [sp, #208]	; 0xd0
   16e1c:	ldrd	r2, [sp, #160]	; 0xa0
   16e20:	strd	r2, [sp, #216]	; 0xd8
   16e24:	ldrd	r2, [sp, #168]	; 0xa8
   16e28:	strd	r2, [sp, #224]	; 0xe0
   16e2c:	ldr	r3, [sp, #196]	; 0xc4
   16e30:	add	r1, r3, r1
   16e34:	str	r1, [sp, #192]	; 0xc0
   16e38:	mov	r3, #0
   16e3c:	strb	r3, [sp, #188]	; 0xbc
   16e40:	str	r7, [sp, #248]	; 0xf8
   16e44:	strb	r3, [sp, #232]	; 0xe8
   16e48:	mov	r0, #0
   16e4c:	mov	r1, #0
   16e50:	strd	r0, [sp, #236]	; 0xec
   16e54:	strb	r3, [sp, #244]	; 0xf4
   16e58:	ldrb	r2, [r7]
   16e5c:	lsr	r3, r2, #5
   16e60:	and	r1, r2, #31
   16e64:	ldr	r3, [r8, r3, lsl #2]
   16e68:	lsr	r3, r3, r1
   16e6c:	tst	r3, #1
   16e70:	beq	16ec8 <__assert_fail@plt+0x5958>
   16e74:	mov	r3, #1
   16e78:	str	r3, [sp, #252]	; 0xfc
   16e7c:	str	r2, [sp, #260]	; 0x104
   16e80:	strb	r3, [sp, #256]	; 0x100
   16e84:	mov	r3, #1
   16e88:	strb	r3, [sp, #244]	; 0xf4
   16e8c:	ldrb	r3, [sp, #256]	; 0x100
   16e90:	cmp	r3, #0
   16e94:	beq	16ea4 <__assert_fail@plt+0x5934>
   16e98:	ldr	r3, [sp, #260]	; 0x104
   16e9c:	cmp	r3, #0
   16ea0:	beq	16ff0 <__assert_fail@plt+0x5a80>
   16ea4:	ldr	r3, [sp, #248]	; 0xf8
   16ea8:	ldr	r2, [sp, #252]	; 0xfc
   16eac:	add	r3, r3, r2
   16eb0:	str	r3, [sp, #248]	; 0xf8
   16eb4:	mov	r3, #0
   16eb8:	strb	r3, [sp, #244]	; 0xf4
   16ebc:	add	r6, r6, #1
   16ec0:	mov	r4, #1
   16ec4:	b	17240 <__assert_fail@plt+0x5cd0>
   16ec8:	add	r0, sp, #236	; 0xec
   16ecc:	bl	11234 <mbsinit@plt>
   16ed0:	cmp	r0, #0
   16ed4:	beq	16f64 <__assert_fail@plt+0x59f4>
   16ed8:	mov	r3, #1
   16edc:	strb	r3, [sp, #232]	; 0xe8
   16ee0:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16ee4:	mov	r1, r0
   16ee8:	mov	r0, r7
   16eec:	bl	199f0 <__assert_fail@plt+0x8480>
   16ef0:	add	r3, sp, #236	; 0xec
   16ef4:	mov	r2, r0
   16ef8:	mov	r1, r7
   16efc:	add	r0, sp, #260	; 0x104
   16f00:	bl	1af5c <__assert_fail@plt+0x99ec>
   16f04:	str	r0, [sp, #252]	; 0xfc
   16f08:	cmn	r0, #1
   16f0c:	beq	16f84 <__assert_fail@plt+0x5a14>
   16f10:	cmn	r0, #2
   16f14:	beq	16f98 <__assert_fail@plt+0x5a28>
   16f18:	cmp	r0, #0
   16f1c:	bne	16f44 <__assert_fail@plt+0x59d4>
   16f20:	mov	r3, #1
   16f24:	str	r3, [sp, #252]	; 0xfc
   16f28:	ldr	r3, [sp, #248]	; 0xf8
   16f2c:	ldrb	r3, [r3]
   16f30:	cmp	r3, #0
   16f34:	bne	16fb0 <__assert_fail@plt+0x5a40>
   16f38:	ldr	r3, [sp, #260]	; 0x104
   16f3c:	cmp	r3, #0
   16f40:	bne	16fd0 <__assert_fail@plt+0x5a60>
   16f44:	mov	r3, #1
   16f48:	strb	r3, [sp, #256]	; 0x100
   16f4c:	add	r0, sp, #236	; 0xec
   16f50:	bl	11234 <mbsinit@plt>
   16f54:	cmp	r0, #0
   16f58:	movne	r3, #0
   16f5c:	strbne	r3, [sp, #232]	; 0xe8
   16f60:	b	16e84 <__assert_fail@plt+0x5914>
   16f64:	movw	r3, #54444	; 0xd4ac
   16f68:	movt	r3, #1
   16f6c:	mov	r2, #143	; 0x8f
   16f70:	movw	r1, #54464	; 0xd4c0
   16f74:	movt	r1, #1
   16f78:	movw	r0, #54476	; 0xd4cc
   16f7c:	movt	r0, #1
   16f80:	bl	11570 <__assert_fail@plt>
   16f84:	mov	r3, #1
   16f88:	str	r3, [sp, #252]	; 0xfc
   16f8c:	mov	r3, #0
   16f90:	strb	r3, [sp, #256]	; 0x100
   16f94:	b	16e84 <__assert_fail@plt+0x5914>
   16f98:	ldr	r0, [sp, #248]	; 0xf8
   16f9c:	bl	113c0 <strlen@plt>
   16fa0:	str	r0, [sp, #252]	; 0xfc
   16fa4:	mov	r3, #0
   16fa8:	strb	r3, [sp, #256]	; 0x100
   16fac:	b	16e84 <__assert_fail@plt+0x5914>
   16fb0:	movw	r3, #54444	; 0xd4ac
   16fb4:	movt	r3, #1
   16fb8:	mov	r2, #171	; 0xab
   16fbc:	movw	r1, #54464	; 0xd4c0
   16fc0:	movt	r1, #1
   16fc4:	movw	r0, #54500	; 0xd4e4
   16fc8:	movt	r0, #1
   16fcc:	bl	11570 <__assert_fail@plt>
   16fd0:	movw	r3, #54444	; 0xd4ac
   16fd4:	movt	r3, #1
   16fd8:	mov	r2, #172	; 0xac
   16fdc:	movw	r1, #54464	; 0xd4c0
   16fe0:	movt	r1, #1
   16fe4:	movw	r0, #54524	; 0xd4fc
   16fe8:	movt	r0, #1
   16fec:	bl	11570 <__assert_fail@plt>
   16ff0:	bl	11540 <abort@plt>
   16ff4:	add	r0, sp, #236	; 0xec
   16ff8:	bl	11234 <mbsinit@plt>
   16ffc:	cmp	r0, #0
   17000:	beq	17094 <__assert_fail@plt+0x5b24>
   17004:	strb	r4, [sp, #232]	; 0xe8
   17008:	ldr	r9, [sp, #248]	; 0xf8
   1700c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   17010:	mov	r1, r0
   17014:	mov	r0, r9
   17018:	bl	199f0 <__assert_fail@plt+0x8480>
   1701c:	add	r3, sp, #236	; 0xec
   17020:	mov	r2, r0
   17024:	mov	r1, r9
   17028:	add	r0, sp, #260	; 0x104
   1702c:	bl	1af5c <__assert_fail@plt+0x99ec>
   17030:	str	r0, [sp, #252]	; 0xfc
   17034:	cmn	r0, #1
   17038:	streq	r4, [sp, #252]	; 0xfc
   1703c:	moveq	r3, #0
   17040:	strbeq	r3, [sp, #256]	; 0x100
   17044:	beq	17288 <__assert_fail@plt+0x5d18>
   17048:	cmn	r0, #2
   1704c:	beq	170b4 <__assert_fail@plt+0x5b44>
   17050:	cmp	r0, #0
   17054:	bne	17078 <__assert_fail@plt+0x5b08>
   17058:	str	r4, [sp, #252]	; 0xfc
   1705c:	ldr	r3, [sp, #248]	; 0xf8
   17060:	ldrb	r3, [r3]
   17064:	cmp	r3, #0
   17068:	bne	170cc <__assert_fail@plt+0x5b5c>
   1706c:	ldr	r3, [sp, #260]	; 0x104
   17070:	cmp	r3, #0
   17074:	bne	170ec <__assert_fail@plt+0x5b7c>
   17078:	strb	r4, [sp, #256]	; 0x100
   1707c:	add	r0, sp, #236	; 0xec
   17080:	bl	11234 <mbsinit@plt>
   17084:	cmp	r0, #0
   17088:	movne	r3, #0
   1708c:	strbne	r3, [sp, #232]	; 0xe8
   17090:	b	17288 <__assert_fail@plt+0x5d18>
   17094:	movw	r3, #54444	; 0xd4ac
   17098:	movt	r3, #1
   1709c:	mov	r2, #143	; 0x8f
   170a0:	movw	r1, #54464	; 0xd4c0
   170a4:	movt	r1, #1
   170a8:	movw	r0, #54476	; 0xd4cc
   170ac:	movt	r0, #1
   170b0:	bl	11570 <__assert_fail@plt>
   170b4:	ldr	r0, [sp, #248]	; 0xf8
   170b8:	bl	113c0 <strlen@plt>
   170bc:	str	r0, [sp, #252]	; 0xfc
   170c0:	mov	r3, #0
   170c4:	strb	r3, [sp, #256]	; 0x100
   170c8:	b	17288 <__assert_fail@plt+0x5d18>
   170cc:	movw	r3, #54444	; 0xd4ac
   170d0:	movt	r3, #1
   170d4:	mov	r2, #171	; 0xab
   170d8:	movw	r1, #54464	; 0xd4c0
   170dc:	movt	r1, #1
   170e0:	movw	r0, #54500	; 0xd4e4
   170e4:	movt	r0, #1
   170e8:	bl	11570 <__assert_fail@plt>
   170ec:	movw	r3, #54444	; 0xd4ac
   170f0:	movt	r3, #1
   170f4:	mov	r2, #172	; 0xac
   170f8:	movw	r1, #54464	; 0xd4c0
   170fc:	movt	r1, #1
   17100:	movw	r0, #54524	; 0xd4fc
   17104:	movt	r0, #1
   17108:	bl	11570 <__assert_fail@plt>
   1710c:	ldr	r0, [sp, #136]	; 0x88
   17110:	add	sp, sp, #292	; 0x124
   17114:	ldrd	r4, [sp]
   17118:	ldrd	r6, [sp, #8]
   1711c:	ldrd	r8, [sp, #16]
   17120:	ldrd	sl, [sp, #24]
   17124:	add	sp, sp, #32
   17128:	pop	{pc}		; (ldr pc, [sp], #4)
   1712c:	add	r0, sp, #180	; 0xb4
   17130:	bl	11234 <mbsinit@plt>
   17134:	cmp	r0, #0
   17138:	beq	172f0 <__assert_fail@plt+0x5d80>
   1713c:	strb	r4, [sp, #176]	; 0xb0
   17140:	ldr	r9, [sp, #192]	; 0xc0
   17144:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   17148:	mov	r1, r0
   1714c:	mov	r0, r9
   17150:	bl	199f0 <__assert_fail@plt+0x8480>
   17154:	add	r3, sp, #180	; 0xb4
   17158:	mov	r2, r0
   1715c:	mov	r1, r9
   17160:	add	r0, sp, #204	; 0xcc
   17164:	bl	1af5c <__assert_fail@plt+0x99ec>
   17168:	str	r0, [sp, #196]	; 0xc4
   1716c:	cmn	r0, #1
   17170:	streq	r4, [sp, #196]	; 0xc4
   17174:	moveq	r3, #0
   17178:	strbeq	r3, [sp, #200]	; 0xc8
   1717c:	beq	171c8 <__assert_fail@plt+0x5c58>
   17180:	cmn	r0, #2
   17184:	beq	17310 <__assert_fail@plt+0x5da0>
   17188:	cmp	r0, #0
   1718c:	bne	171b0 <__assert_fail@plt+0x5c40>
   17190:	str	r4, [sp, #196]	; 0xc4
   17194:	ldr	r3, [sp, #192]	; 0xc0
   17198:	ldrb	r3, [r3]
   1719c:	cmp	r3, #0
   171a0:	bne	17328 <__assert_fail@plt+0x5db8>
   171a4:	ldr	r3, [sp, #204]	; 0xcc
   171a8:	cmp	r3, #0
   171ac:	bne	17348 <__assert_fail@plt+0x5dd8>
   171b0:	strb	r4, [sp, #200]	; 0xc8
   171b4:	add	r0, sp, #180	; 0xb4
   171b8:	bl	11234 <mbsinit@plt>
   171bc:	cmp	r0, #0
   171c0:	movne	r3, #0
   171c4:	strbne	r3, [sp, #176]	; 0xb0
   171c8:	strb	r4, [sp, #188]	; 0xbc
   171cc:	ldrb	r3, [sp, #200]	; 0xc8
   171d0:	cmp	r3, #0
   171d4:	beq	171f0 <__assert_fail@plt+0x5c80>
   171d8:	ldr	r3, [sp, #204]	; 0xcc
   171dc:	cmp	r3, #0
   171e0:	beq	17368 <__assert_fail@plt+0x5df8>
   171e4:	ldrb	r2, [sp, #256]	; 0x100
   171e8:	cmp	r2, #0
   171ec:	bne	17370 <__assert_fail@plt+0x5e00>
   171f0:	ldr	r2, [sp, #196]	; 0xc4
   171f4:	ldr	r3, [sp, #252]	; 0xfc
   171f8:	cmp	r2, r3
   171fc:	movne	r0, r4
   17200:	beq	17380 <__assert_fail@plt+0x5e10>
   17204:	add	r1, r6, #1
   17208:	cmp	r0, #0
   1720c:	bne	17538 <__assert_fail@plt+0x5fc8>
   17210:	ldr	r3, [sp, #192]	; 0xc0
   17214:	ldr	r2, [sp, #196]	; 0xc4
   17218:	add	r3, r3, r2
   1721c:	str	r3, [sp, #192]	; 0xc0
   17220:	mov	r2, #0
   17224:	strb	r2, [sp, #188]	; 0xbc
   17228:	ldr	r3, [sp, #248]	; 0xf8
   1722c:	ldr	r0, [sp, #252]	; 0xfc
   17230:	add	r3, r3, r0
   17234:	str	r3, [sp, #248]	; 0xf8
   17238:	strb	r2, [sp, #244]	; 0xf4
   1723c:	mov	r6, r1
   17240:	ldrb	r3, [sp, #244]	; 0xf4
   17244:	cmp	r3, #0
   17248:	bne	1728c <__assert_fail@plt+0x5d1c>
   1724c:	ldrb	r3, [sp, #232]	; 0xe8
   17250:	cmp	r3, #0
   17254:	bne	17008 <__assert_fail@plt+0x5a98>
   17258:	ldr	r1, [sp, #248]	; 0xf8
   1725c:	ldrb	r3, [r1]
   17260:	lsr	r2, r3, #5
   17264:	and	r3, r3, #31
   17268:	ldr	r2, [r8, r2, lsl #2]
   1726c:	lsr	r3, r2, r3
   17270:	tst	r3, #1
   17274:	beq	16ff4 <__assert_fail@plt+0x5a84>
   17278:	str	r4, [sp, #252]	; 0xfc
   1727c:	ldrb	r3, [r1]
   17280:	str	r3, [sp, #260]	; 0x104
   17284:	strb	r4, [sp, #256]	; 0x100
   17288:	strb	r4, [sp, #244]	; 0xf4
   1728c:	ldrb	r3, [sp, #256]	; 0x100
   17290:	cmp	r3, #0
   17294:	beq	172a4 <__assert_fail@plt+0x5d34>
   17298:	ldr	r3, [sp, #260]	; 0x104
   1729c:	cmp	r3, #0
   172a0:	beq	1710c <__assert_fail@plt+0x5b9c>
   172a4:	ldrb	r3, [sp, #188]	; 0xbc
   172a8:	cmp	r3, #0
   172ac:	bne	171cc <__assert_fail@plt+0x5c5c>
   172b0:	ldrb	r3, [sp, #176]	; 0xb0
   172b4:	cmp	r3, #0
   172b8:	bne	17140 <__assert_fail@plt+0x5bd0>
   172bc:	ldr	r1, [sp, #192]	; 0xc0
   172c0:	ldrb	r3, [r1]
   172c4:	lsr	r2, r3, #5
   172c8:	and	r3, r3, #31
   172cc:	ldr	r2, [r8, r2, lsl #2]
   172d0:	lsr	r3, r2, r3
   172d4:	tst	r3, #1
   172d8:	beq	1712c <__assert_fail@plt+0x5bbc>
   172dc:	str	r4, [sp, #196]	; 0xc4
   172e0:	ldrb	r3, [r1]
   172e4:	str	r3, [sp, #204]	; 0xcc
   172e8:	strb	r4, [sp, #200]	; 0xc8
   172ec:	b	171c8 <__assert_fail@plt+0x5c58>
   172f0:	movw	r3, #54444	; 0xd4ac
   172f4:	movt	r3, #1
   172f8:	mov	r2, #143	; 0x8f
   172fc:	movw	r1, #54464	; 0xd4c0
   17300:	movt	r1, #1
   17304:	movw	r0, #54476	; 0xd4cc
   17308:	movt	r0, #1
   1730c:	bl	11570 <__assert_fail@plt>
   17310:	ldr	r0, [sp, #192]	; 0xc0
   17314:	bl	113c0 <strlen@plt>
   17318:	str	r0, [sp, #196]	; 0xc4
   1731c:	mov	r3, #0
   17320:	strb	r3, [sp, #200]	; 0xc8
   17324:	b	171c8 <__assert_fail@plt+0x5c58>
   17328:	movw	r3, #54444	; 0xd4ac
   1732c:	movt	r3, #1
   17330:	mov	r2, #171	; 0xab
   17334:	movw	r1, #54464	; 0xd4c0
   17338:	movt	r1, #1
   1733c:	movw	r0, #54500	; 0xd4e4
   17340:	movt	r0, #1
   17344:	bl	11570 <__assert_fail@plt>
   17348:	movw	r3, #54444	; 0xd4ac
   1734c:	movt	r3, #1
   17350:	mov	r2, #172	; 0xac
   17354:	movw	r1, #54464	; 0xd4c0
   17358:	movt	r1, #1
   1735c:	movw	r0, #54524	; 0xd4fc
   17360:	movt	r0, #1
   17364:	bl	11570 <__assert_fail@plt>
   17368:	mov	r0, #0
   1736c:	b	17110 <__assert_fail@plt+0x5ba0>
   17370:	ldr	r0, [sp, #260]	; 0x104
   17374:	subs	r0, r0, r3
   17378:	movne	r0, #1
   1737c:	b	17204 <__assert_fail@plt+0x5c94>
   17380:	ldr	r1, [sp, #248]	; 0xf8
   17384:	ldr	r0, [sp, #192]	; 0xc0
   17388:	bl	1124c <memcmp@plt>
   1738c:	adds	r0, r0, #0
   17390:	movne	r0, #1
   17394:	b	17204 <__assert_fail@plt+0x5c94>
   17398:	mov	r0, r5
   1739c:	b	17110 <__assert_fail@plt+0x5ba0>
   173a0:	ldr	r0, [sp, #232]	; 0xe8
   173a4:	b	17110 <__assert_fail@plt+0x5ba0>
   173a8:	mov	lr, fp
   173ac:	mov	ip, r4
   173b0:	mov	r0, r5
   173b4:	add	r6, r6, #1
   173b8:	add	r4, ip, #1
   173bc:	add	r5, r5, #1
   173c0:	ldrb	r3, [r0]
   173c4:	cmp	r3, r8
   173c8:	beq	17458 <__assert_fail@plt+0x5ee8>
   173cc:	str	r5, [sp]
   173d0:	ldrb	r3, [r5]
   173d4:	cmp	r3, #0
   173d8:	beq	174d0 <__assert_fail@plt+0x5f60>
   173dc:	cmp	r6, #9
   173e0:	movls	fp, #0
   173e4:	andhi	fp, lr, #1
   173e8:	cmp	fp, #0
   173ec:	beq	173ac <__assert_fail@plt+0x5e3c>
   173f0:	add	r3, r6, r6, lsl #2
   173f4:	cmp	r3, r4
   173f8:	bhi	173a8 <__assert_fail@plt+0x5e38>
   173fc:	cmp	sl, #0
   17400:	beq	17420 <__assert_fail@plt+0x5eb0>
   17404:	sub	r1, r4, r9
   17408:	mov	r0, sl
   1740c:	bl	1145c <strnlen@plt>
   17410:	ldrb	r3, [sl, r0]!
   17414:	cmp	r3, #0
   17418:	bne	1744c <__assert_fail@plt+0x5edc>
   1741c:	mov	r9, r4
   17420:	mov	r0, r7
   17424:	bl	113c0 <strlen@plt>
   17428:	add	r3, sp, #232	; 0xe8
   1742c:	mov	r2, r0
   17430:	mov	r1, r7
   17434:	ldr	r0, [sp]
   17438:	bl	15bfc <__assert_fail@plt+0x468c>
   1743c:	subs	lr, r0, #0
   17440:	bne	173a0 <__assert_fail@plt+0x5e30>
   17444:	mov	sl, #0
   17448:	b	173ac <__assert_fail@plt+0x5e3c>
   1744c:	mov	r9, r4
   17450:	mov	lr, fp
   17454:	b	173ac <__assert_fail@plt+0x5e3c>
   17458:	ldrb	r3, [r7, #1]
   1745c:	cmp	r3, #0
   17460:	beq	17110 <__assert_fail@plt+0x5ba0>
   17464:	str	r5, [sp]
   17468:	ldrb	r2, [r5]
   1746c:	cmp	r2, #0
   17470:	beq	174c0 <__assert_fail@plt+0x5f50>
   17474:	add	r4, ip, #2
   17478:	cmp	r3, r2
   1747c:	bne	173dc <__assert_fail@plt+0x5e6c>
   17480:	mov	fp, r5
   17484:	ldr	r3, [sp, #4]
   17488:	ldrb	r2, [r3, #1]!
   1748c:	cmp	r2, #0
   17490:	beq	17110 <__assert_fail@plt+0x5ba0>
   17494:	ldrb	r1, [fp, #1]!
   17498:	cmp	r1, #0
   1749c:	beq	174c8 <__assert_fail@plt+0x5f58>
   174a0:	add	r4, r3, #1
   174a4:	sub	r4, r4, r7
   174a8:	add	r4, r4, ip
   174ac:	cmp	r2, r1
   174b0:	beq	17488 <__assert_fail@plt+0x5f18>
   174b4:	b	173dc <__assert_fail@plt+0x5e6c>
   174b8:	mov	r0, #0
   174bc:	b	17110 <__assert_fail@plt+0x5ba0>
   174c0:	mov	r0, #0
   174c4:	b	17110 <__assert_fail@plt+0x5ba0>
   174c8:	mov	r0, #0
   174cc:	b	17110 <__assert_fail@plt+0x5ba0>
   174d0:	mov	r0, #0
   174d4:	b	17110 <__assert_fail@plt+0x5ba0>
   174d8:	ldrb	r3, [sp, #76]	; 0x4c
   174dc:	cmp	r3, #0
   174e0:	beq	16c1c <__assert_fail@plt+0x56ac>
   174e4:	add	r2, sp, #232	; 0xe8
   174e8:	mov	r1, r7
   174ec:	mov	r0, r5
   174f0:	bl	15d74 <__assert_fail@plt+0x4804>
   174f4:	subs	fp, r0, #0
   174f8:	beq	16c74 <__assert_fail@plt+0x5704>
   174fc:	ldr	r0, [sp, #232]	; 0xe8
   17500:	b	17110 <__assert_fail@plt+0x5ba0>
   17504:	cmp	sl, #9
   17508:	movls	r3, #0
   1750c:	andhi	r3, fp, #1
   17510:	cmp	r3, #0
   17514:	bne	17614 <__assert_fail@plt+0x60a4>
   17518:	add	r6, r6, #1
   1751c:	ldr	r2, [sp, #140]	; 0x8c
   17520:	ldr	r3, [sp, #28]
   17524:	cmp	r2, r3
   17528:	movne	r0, #0
   1752c:	beq	16dd8 <__assert_fail@plt+0x5868>
   17530:	cmp	r0, #0
   17534:	bne	16df0 <__assert_fail@plt+0x5880>
   17538:	ldr	r3, [sp, #136]	; 0x88
   1753c:	ldr	r2, [sp, #140]	; 0x8c
   17540:	add	r3, r3, r2
   17544:	str	r3, [sp, #136]	; 0x88
   17548:	mov	r3, #0
   1754c:	strb	r3, [sp, #132]	; 0x84
   17550:	add	sl, sl, #1
   17554:	ldrb	r3, [sp, #132]	; 0x84
   17558:	cmp	r3, #0
   1755c:	bne	175a8 <__assert_fail@plt+0x6038>
   17560:	ldrb	r3, [sp, #120]	; 0x78
   17564:	cmp	r3, #0
   17568:	bne	16958 <__assert_fail@plt+0x53e8>
   1756c:	ldr	r1, [sp, #136]	; 0x88
   17570:	ldrb	r3, [r1]
   17574:	lsr	r2, r3, #5
   17578:	and	r3, r3, #31
   1757c:	ldr	r2, [r8, r2, lsl #2]
   17580:	lsr	r3, r2, r3
   17584:	tst	r3, #1
   17588:	beq	16940 <__assert_fail@plt+0x53d0>
   1758c:	mov	r3, #1
   17590:	str	r3, [sp, #140]	; 0x8c
   17594:	ldrb	r2, [r1]
   17598:	str	r2, [sp, #148]	; 0x94
   1759c:	strb	r3, [sp, #144]	; 0x90
   175a0:	mov	r3, #1
   175a4:	strb	r3, [sp, #132]	; 0x84
   175a8:	ldrb	r3, [sp, #144]	; 0x90
   175ac:	cmp	r3, #0
   175b0:	beq	17504 <__assert_fail@plt+0x5f94>
   175b4:	ldr	r3, [sp, #148]	; 0x94
   175b8:	cmp	r3, #0
   175bc:	beq	16a6c <__assert_fail@plt+0x54fc>
   175c0:	cmp	sl, #9
   175c4:	movls	r3, #0
   175c8:	andhi	r3, fp, #1
   175cc:	cmp	r3, #0
   175d0:	addeq	r6, r6, #1
   175d4:	bne	175fc <__assert_fail@plt+0x608c>
   175d8:	ldrb	r3, [sp, #32]
   175dc:	cmp	r3, #0
   175e0:	beq	1751c <__assert_fail@plt+0x5fac>
   175e4:	ldr	r0, [sp, #148]	; 0x94
   175e8:	ldr	r3, [sp, #36]	; 0x24
   175ec:	cmp	r0, r3
   175f0:	movne	r0, #0
   175f4:	moveq	r0, #1
   175f8:	b	17530 <__assert_fail@plt+0x5fc0>
   175fc:	add	r2, sl, sl, lsl #2
   17600:	cmp	r6, r2
   17604:	addcc	r6, r6, #1
   17608:	movcc	fp, r3
   1760c:	bcc	175d8 <__assert_fail@plt+0x6068>
   17610:	b	17628 <__assert_fail@plt+0x60b8>
   17614:	add	r2, sl, sl, lsl #2
   17618:	cmp	r2, r6
   1761c:	addhi	r6, r6, #1
   17620:	movhi	fp, r3
   17624:	bhi	1751c <__assert_fail@plt+0x5fac>
   17628:	ldr	r3, [sp]
   1762c:	subs	r4, r6, r3
   17630:	beq	16c10 <__assert_fail@plt+0x56a0>
   17634:	mov	r9, #1
   17638:	b	16b4c <__assert_fail@plt+0x55dc>
   1763c:	strd	r4, [sp, #-16]!
   17640:	str	r6, [sp, #8]
   17644:	str	lr, [sp, #12]
   17648:	subs	r4, r0, #0
   1764c:	beq	176e8 <__assert_fail@plt+0x6178>
   17650:	mov	r1, #47	; 0x2f
   17654:	mov	r0, r4
   17658:	bl	114b0 <strrchr@plt>
   1765c:	subs	r5, r0, #0
   17660:	beq	176c0 <__assert_fail@plt+0x6150>
   17664:	add	r6, r5, #1
   17668:	sub	r3, r6, r4
   1766c:	cmp	r3, #6
   17670:	ble	176c0 <__assert_fail@plt+0x6150>
   17674:	mov	r2, #7
   17678:	movw	r1, #54600	; 0xd548
   1767c:	movt	r1, #1
   17680:	sub	r0, r5, #6
   17684:	bl	11534 <strncmp@plt>
   17688:	cmp	r0, #0
   1768c:	bne	176c0 <__assert_fail@plt+0x6150>
   17690:	mov	r2, #3
   17694:	movw	r1, #54608	; 0xd550
   17698:	movt	r1, #1
   1769c:	mov	r0, r6
   176a0:	bl	11534 <strncmp@plt>
   176a4:	cmp	r0, #0
   176a8:	movne	r4, r6
   176ac:	bne	176c0 <__assert_fail@plt+0x6150>
   176b0:	add	r4, r5, #4
   176b4:	movw	r3, #57784	; 0xe1b8
   176b8:	movt	r3, #2
   176bc:	str	r4, [r3]
   176c0:	movw	r3, #58032	; 0xe2b0
   176c4:	movt	r3, #2
   176c8:	str	r4, [r3]
   176cc:	movw	r3, #57792	; 0xe1c0
   176d0:	movt	r3, #2
   176d4:	str	r4, [r3]
   176d8:	ldrd	r4, [sp]
   176dc:	ldr	r6, [sp, #8]
   176e0:	add	sp, sp, #12
   176e4:	pop	{pc}		; (ldr pc, [sp], #4)
   176e8:	movw	r3, #57808	; 0xe1d0
   176ec:	movt	r3, #2
   176f0:	ldr	r3, [r3]
   176f4:	mov	r2, #55	; 0x37
   176f8:	mov	r1, #1
   176fc:	movw	r0, #54544	; 0xd510
   17700:	movt	r0, #1
   17704:	bl	112d0 <fwrite@plt>
   17708:	bl	11540 <abort@plt>
   1770c:	mov	r2, #0
   17710:	mov	r3, #0
   17714:	strd	r2, [r0]
   17718:	strd	r2, [r0, #8]
   1771c:	strd	r2, [r0, #16]
   17720:	strd	r2, [r0, #24]
   17724:	strd	r2, [r0, #32]
   17728:	strd	r2, [r0, #40]	; 0x28
   1772c:	cmp	r1, #10
   17730:	beq	1773c <__assert_fail@plt+0x61cc>
   17734:	str	r1, [r0]
   17738:	bx	lr
   1773c:	str	r4, [sp, #-8]!
   17740:	str	lr, [sp, #4]
   17744:	bl	11540 <abort@plt>
   17748:	strd	r4, [sp, #-16]!
   1774c:	str	r6, [sp, #8]
   17750:	str	lr, [sp, #12]
   17754:	mov	r5, r0
   17758:	mov	r6, r1
   1775c:	mov	r2, #5
   17760:	mov	r1, r0
   17764:	mov	r0, #0
   17768:	bl	11258 <dcgettext@plt>
   1776c:	mov	r4, r0
   17770:	cmp	r5, r0
   17774:	beq	1778c <__assert_fail@plt+0x621c>
   17778:	mov	r0, r4
   1777c:	ldrd	r4, [sp]
   17780:	ldr	r6, [sp, #8]
   17784:	add	sp, sp, #12
   17788:	pop	{pc}		; (ldr pc, [sp], #4)
   1778c:	bl	1b150 <__assert_fail@plt+0x9be0>
   17790:	ldrb	r3, [r0]
   17794:	bic	r3, r3, #32
   17798:	cmp	r3, #85	; 0x55
   1779c:	bne	17820 <__assert_fail@plt+0x62b0>
   177a0:	ldrb	r3, [r0, #1]
   177a4:	bic	r3, r3, #32
   177a8:	cmp	r3, #84	; 0x54
   177ac:	bne	177e4 <__assert_fail@plt+0x6274>
   177b0:	ldrb	r3, [r0, #2]
   177b4:	bic	r3, r3, #32
   177b8:	cmp	r3, #70	; 0x46
   177bc:	bne	177e4 <__assert_fail@plt+0x6274>
   177c0:	ldrb	r3, [r0, #3]
   177c4:	cmp	r3, #45	; 0x2d
   177c8:	bne	177e4 <__assert_fail@plt+0x6274>
   177cc:	ldrb	r3, [r0, #4]
   177d0:	cmp	r3, #56	; 0x38
   177d4:	bne	177e4 <__assert_fail@plt+0x6274>
   177d8:	ldrb	r3, [r0, #5]
   177dc:	cmp	r3, #0
   177e0:	beq	17800 <__assert_fail@plt+0x6290>
   177e4:	movw	r4, #54696	; 0xd5a8
   177e8:	movt	r4, #1
   177ec:	movw	r3, #54716	; 0xd5bc
   177f0:	movt	r3, #1
   177f4:	cmp	r6, #9
   177f8:	movne	r4, r3
   177fc:	b	17778 <__assert_fail@plt+0x6208>
   17800:	ldrb	r2, [r4]
   17804:	movw	r4, #54712	; 0xd5b8
   17808:	movt	r4, #1
   1780c:	movw	r3, #54700	; 0xd5ac
   17810:	movt	r3, #1
   17814:	cmp	r2, #96	; 0x60
   17818:	movne	r4, r3
   1781c:	b	17778 <__assert_fail@plt+0x6208>
   17820:	cmp	r3, #71	; 0x47
   17824:	bne	177e4 <__assert_fail@plt+0x6274>
   17828:	ldrb	r3, [r0, #1]
   1782c:	bic	r3, r3, #32
   17830:	cmp	r3, #66	; 0x42
   17834:	bne	177e4 <__assert_fail@plt+0x6274>
   17838:	ldrb	r3, [r0, #2]
   1783c:	cmp	r3, #49	; 0x31
   17840:	bne	177e4 <__assert_fail@plt+0x6274>
   17844:	ldrb	r3, [r0, #3]
   17848:	cmp	r3, #56	; 0x38
   1784c:	bne	177e4 <__assert_fail@plt+0x6274>
   17850:	ldrb	r3, [r0, #4]
   17854:	cmp	r3, #48	; 0x30
   17858:	bne	177e4 <__assert_fail@plt+0x6274>
   1785c:	ldrb	r3, [r0, #5]
   17860:	cmp	r3, #51	; 0x33
   17864:	bne	177e4 <__assert_fail@plt+0x6274>
   17868:	ldrb	r3, [r0, #6]
   1786c:	cmp	r3, #48	; 0x30
   17870:	bne	177e4 <__assert_fail@plt+0x6274>
   17874:	ldrb	r3, [r0, #7]
   17878:	cmp	r3, #0
   1787c:	bne	177e4 <__assert_fail@plt+0x6274>
   17880:	ldrb	r2, [r4]
   17884:	movw	r4, #54708	; 0xd5b4
   17888:	movt	r4, #1
   1788c:	movw	r3, #54704	; 0xd5b0
   17890:	movt	r3, #1
   17894:	cmp	r2, #96	; 0x60
   17898:	movne	r4, r3
   1789c:	b	17778 <__assert_fail@plt+0x6208>
   178a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178a4:	strd	r6, [sp, #8]
   178a8:	strd	r8, [sp, #16]
   178ac:	strd	sl, [sp, #24]
   178b0:	str	lr, [sp, #32]
   178b4:	sub	sp, sp, #116	; 0x74
   178b8:	str	r0, [sp, #64]	; 0x40
   178bc:	mov	r8, r1
   178c0:	str	r2, [sp, #48]	; 0x30
   178c4:	str	r3, [sp, #24]
   178c8:	ldr	r7, [sp, #152]	; 0x98
   178cc:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   178d0:	str	r0, [sp, #76]	; 0x4c
   178d4:	ldr	r3, [sp, #156]	; 0x9c
   178d8:	ubfx	r3, r3, #1, #1
   178dc:	str	r3, [sp, #32]
   178e0:	mov	r3, #1
   178e4:	str	r3, [sp, #40]	; 0x28
   178e8:	mov	r3, #0
   178ec:	str	r3, [sp, #68]	; 0x44
   178f0:	str	r3, [sp, #36]	; 0x24
   178f4:	str	r3, [sp, #28]
   178f8:	str	r3, [sp, #52]	; 0x34
   178fc:	str	r3, [sp, #60]	; 0x3c
   17900:	str	r3, [sp, #72]	; 0x48
   17904:	movw	r3, #54720	; 0xd5c0
   17908:	movt	r3, #1
   1790c:	str	r3, [sp, #80]	; 0x50
   17910:	mov	r9, r8
   17914:	mov	sl, r7
   17918:	cmp	sl, #10
   1791c:	ldrls	pc, [pc, sl, lsl #2]
   17920:	b	17ae4 <__assert_fail@plt+0x6574>
   17924:	andeq	r7, r1, r4, lsl #19
   17928:	andeq	r7, r1, r8, asr r9
   1792c:			; <UNDEFINED> instruction: 0x00017abc
   17930:	andeq	r7, r1, r0, asr r9
   17934:	andeq	r7, r1, r0, ror sl
   17938:	muleq	r1, r4, r9
   1793c:	andeq	r8, r1, r0, ror #26
   17940:	andeq	r7, r1, r8, ror #21
   17944:	ldrdeq	r7, [r1], -r0
   17948:	ldrdeq	r7, [r1], -r0
   1794c:	ldrdeq	r7, [r1], -r0
   17950:	mov	r3, #1
   17954:	str	r3, [sp, #28]
   17958:	mov	r3, #1
   1795c:	str	r3, [sp, #32]
   17960:	str	r3, [sp, #52]	; 0x34
   17964:	movw	r3, #54716	; 0xd5bc
   17968:	movt	r3, #1
   1796c:	str	r3, [sp, #60]	; 0x3c
   17970:	mov	fp, #0
   17974:	mov	sl, #2
   17978:	mov	r6, #0
   1797c:	ldr	r8, [sp, #64]	; 0x40
   17980:	b	181f8 <__assert_fail@plt+0x6c88>
   17984:	mov	fp, sl
   17988:	mov	r3, #0
   1798c:	str	r3, [sp, #32]
   17990:	b	17978 <__assert_fail@plt+0x6408>
   17994:	ldr	r3, [sp, #32]
   17998:	cmp	r3, #0
   1799c:	bne	17afc <__assert_fail@plt+0x658c>
   179a0:	cmp	r9, #0
   179a4:	beq	17b20 <__assert_fail@plt+0x65b0>
   179a8:	mov	r3, #34	; 0x22
   179ac:	ldr	r2, [sp, #64]	; 0x40
   179b0:	strb	r3, [r2]
   179b4:	mov	fp, #1
   179b8:	str	fp, [sp, #28]
   179bc:	str	fp, [sp, #52]	; 0x34
   179c0:	movw	r3, #54696	; 0xd5a8
   179c4:	movt	r3, #1
   179c8:	str	r3, [sp, #60]	; 0x3c
   179cc:	b	17978 <__assert_fail@plt+0x6408>
   179d0:	cmp	sl, #10
   179d4:	bne	17a08 <__assert_fail@plt+0x6498>
   179d8:	ldr	r3, [sp, #32]
   179dc:	cmp	r3, #0
   179e0:	movne	fp, #0
   179e4:	beq	17a30 <__assert_fail@plt+0x64c0>
   179e8:	ldr	r0, [sp, #168]	; 0xa8
   179ec:	bl	113c0 <strlen@plt>
   179f0:	str	r0, [sp, #52]	; 0x34
   179f4:	ldr	r3, [sp, #168]	; 0xa8
   179f8:	str	r3, [sp, #60]	; 0x3c
   179fc:	mov	r3, #1
   17a00:	str	r3, [sp, #28]
   17a04:	b	17978 <__assert_fail@plt+0x6408>
   17a08:	mov	r1, sl
   17a0c:	ldr	r0, [sp, #80]	; 0x50
   17a10:	bl	17748 <__assert_fail@plt+0x61d8>
   17a14:	str	r0, [sp, #164]	; 0xa4
   17a18:	mov	r1, sl
   17a1c:	movw	r0, #54716	; 0xd5bc
   17a20:	movt	r0, #1
   17a24:	bl	17748 <__assert_fail@plt+0x61d8>
   17a28:	str	r0, [sp, #168]	; 0xa8
   17a2c:	b	179d8 <__assert_fail@plt+0x6468>
   17a30:	ldr	r3, [sp, #164]	; 0xa4
   17a34:	ldrb	r3, [r3]
   17a38:	cmp	r3, #0
   17a3c:	beq	17a68 <__assert_fail@plt+0x64f8>
   17a40:	ldr	r2, [sp, #164]	; 0xa4
   17a44:	mov	fp, #0
   17a48:	ldr	r1, [sp, #64]	; 0x40
   17a4c:	cmp	r9, fp
   17a50:	strbhi	r3, [r1, fp]
   17a54:	add	fp, fp, #1
   17a58:	ldrb	r3, [r2, #1]!
   17a5c:	cmp	r3, #0
   17a60:	bne	17a4c <__assert_fail@plt+0x64dc>
   17a64:	b	179e8 <__assert_fail@plt+0x6478>
   17a68:	mov	fp, #0
   17a6c:	b	179e8 <__assert_fail@plt+0x6478>
   17a70:	ldr	r3, [sp, #32]
   17a74:	cmp	r3, #0
   17a78:	bne	17958 <__assert_fail@plt+0x63e8>
   17a7c:	mov	r3, #1
   17a80:	str	r3, [sp, #28]
   17a84:	cmp	r9, #0
   17a88:	beq	17b3c <__assert_fail@plt+0x65cc>
   17a8c:	mov	r3, #39	; 0x27
   17a90:	ldr	r2, [sp, #64]	; 0x40
   17a94:	strb	r3, [r2]
   17a98:	mov	r3, #0
   17a9c:	str	r3, [sp, #32]
   17aa0:	mov	fp, #1
   17aa4:	str	fp, [sp, #52]	; 0x34
   17aa8:	movw	r3, #54716	; 0xd5bc
   17aac:	movt	r3, #1
   17ab0:	str	r3, [sp, #60]	; 0x3c
   17ab4:	mov	sl, #2
   17ab8:	b	17978 <__assert_fail@plt+0x6408>
   17abc:	ldr	r3, [sp, #32]
   17ac0:	cmp	r3, #0
   17ac4:	beq	17a84 <__assert_fail@plt+0x6514>
   17ac8:	mov	r3, #1
   17acc:	str	r3, [sp, #52]	; 0x34
   17ad0:	movw	r3, #54716	; 0xd5bc
   17ad4:	movt	r3, #1
   17ad8:	str	r3, [sp, #60]	; 0x3c
   17adc:	mov	fp, #0
   17ae0:	b	17978 <__assert_fail@plt+0x6408>
   17ae4:	bl	11540 <abort@plt>
   17ae8:	mov	fp, #0
   17aec:	str	fp, [sp, #32]
   17af0:	mov	r3, #1
   17af4:	str	r3, [sp, #28]
   17af8:	b	17978 <__assert_fail@plt+0x6408>
   17afc:	ldr	r3, [sp, #32]
   17b00:	str	r3, [sp, #28]
   17b04:	mov	r3, #1
   17b08:	str	r3, [sp, #52]	; 0x34
   17b0c:	movw	r3, #54696	; 0xd5a8
   17b10:	movt	r3, #1
   17b14:	str	r3, [sp, #60]	; 0x3c
   17b18:	mov	fp, #0
   17b1c:	b	17978 <__assert_fail@plt+0x6408>
   17b20:	mov	fp, #1
   17b24:	str	fp, [sp, #28]
   17b28:	str	fp, [sp, #52]	; 0x34
   17b2c:	movw	r3, #54696	; 0xd5a8
   17b30:	movt	r3, #1
   17b34:	str	r3, [sp, #60]	; 0x3c
   17b38:	b	17978 <__assert_fail@plt+0x6408>
   17b3c:	mov	r3, #0
   17b40:	str	r3, [sp, #32]
   17b44:	mov	fp, #1
   17b48:	str	fp, [sp, #52]	; 0x34
   17b4c:	movw	r3, #54716	; 0xd5bc
   17b50:	movt	r3, #1
   17b54:	str	r3, [sp, #60]	; 0x3c
   17b58:	mov	sl, #2
   17b5c:	b	17978 <__assert_fail@plt+0x6408>
   17b60:	mov	r3, r2
   17b64:	add	r4, r6, r2
   17b68:	ldr	r2, [sp, #24]
   17b6c:	cmp	r3, #1
   17b70:	movls	r3, #0
   17b74:	movhi	r3, #1
   17b78:	cmn	r2, #1
   17b7c:	movne	r3, #0
   17b80:	cmp	r3, #0
   17b84:	beq	17b94 <__assert_fail@plt+0x6624>
   17b88:	ldr	r0, [sp, #48]	; 0x30
   17b8c:	bl	113c0 <strlen@plt>
   17b90:	str	r0, [sp, #24]
   17b94:	ldr	r3, [sp, #24]
   17b98:	cmp	r4, r3
   17b9c:	bhi	18d88 <__assert_fail@plt+0x7818>
   17ba0:	ldr	r3, [sp, #48]	; 0x30
   17ba4:	add	r4, r3, r6
   17ba8:	ldr	r2, [sp, #52]	; 0x34
   17bac:	ldr	r1, [sp, #60]	; 0x3c
   17bb0:	mov	r0, r4
   17bb4:	bl	1124c <memcmp@plt>
   17bb8:	cmp	r0, #0
   17bbc:	bne	18d88 <__assert_fail@plt+0x7818>
   17bc0:	ldr	r3, [sp, #32]
   17bc4:	cmp	r3, #0
   17bc8:	bne	17dd8 <__assert_fail@plt+0x6868>
   17bcc:	ldrb	r4, [r4]
   17bd0:	cmp	r4, #126	; 0x7e
   17bd4:	ldrls	pc, [pc, r4, lsl #2]
   17bd8:	b	1868c <__assert_fail@plt+0x711c>
   17bdc:	andeq	r7, r1, ip, lsl lr
   17be0:	andeq	r8, r1, ip, lsl #13
   17be4:	andeq	r8, r1, ip, lsl #13
   17be8:	andeq	r8, r1, ip, lsl #13
   17bec:	andeq	r8, r1, ip, lsl #13
   17bf0:	andeq	r8, r1, ip, lsl #13
   17bf4:	andeq	r8, r1, ip, lsl #13
   17bf8:	andeq	r8, r1, r4, lsr r5
   17bfc:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17c00:	andeq	r8, r1, ip, asr r4
   17c04:	andeq	r8, r1, r8, lsl #10
   17c08:	andeq	r8, r1, r0, ror r4
   17c0c:	andeq	r8, r1, ip, asr #1
   17c10:	andeq	r8, r1, r0, ror #1
   17c14:	andeq	r8, r1, ip, lsl #13
   17c18:	andeq	r8, r1, ip, lsl #13
   17c1c:	andeq	r8, r1, ip, lsl #13
   17c20:	andeq	r8, r1, ip, lsl #13
   17c24:	andeq	r8, r1, ip, lsl #13
   17c28:	andeq	r8, r1, ip, lsl #13
   17c2c:	andeq	r8, r1, ip, lsl #13
   17c30:	andeq	r8, r1, ip, lsl #13
   17c34:	andeq	r8, r1, ip, lsl #13
   17c38:	andeq	r8, r1, ip, lsl #13
   17c3c:	andeq	r8, r1, ip, lsl #13
   17c40:	andeq	r8, r1, ip, lsl #13
   17c44:	andeq	r8, r1, ip, lsl #13
   17c48:	andeq	r8, r1, ip, lsl #13
   17c4c:	andeq	r8, r1, ip, lsl #13
   17c50:	andeq	r8, r1, ip, lsl #13
   17c54:	andeq	r8, r1, ip, lsl #13
   17c58:	andeq	r8, r1, ip, lsl #13
   17c5c:	andeq	r8, r1, r8, lsr #11
   17c60:	andeq	r8, r1, ip, asr #11
   17c64:	andeq	r8, r1, ip, asr #11
   17c68:	andeq	r8, r1, r4, ror #10
   17c6c:	andeq	r8, r1, ip, asr #11
   17c70:	andeq	r8, r1, ip, ror #21
   17c74:	andeq	r8, r1, ip, asr #11
   17c78:	andeq	r8, r1, ip, ror #11
   17c7c:	andeq	r8, r1, ip, asr #11
   17c80:	andeq	r8, r1, ip, asr #11
   17c84:	andeq	r8, r1, ip, asr #11
   17c88:	andeq	r8, r1, ip, ror #21
   17c8c:	andeq	r8, r1, ip, ror #21
   17c90:	andeq	r8, r1, ip, ror #21
   17c94:	andeq	r8, r1, ip, ror #21
   17c98:	andeq	r8, r1, ip, ror #21
   17c9c:	andeq	r8, r1, ip, ror #21
   17ca0:	andeq	r8, r1, ip, ror #21
   17ca4:	andeq	r8, r1, ip, ror #21
   17ca8:	andeq	r8, r1, ip, ror #21
   17cac:	andeq	r8, r1, ip, ror #21
   17cb0:	andeq	r8, r1, ip, ror #21
   17cb4:	andeq	r8, r1, ip, ror #21
   17cb8:	andeq	r8, r1, ip, ror #21
   17cbc:	andeq	r8, r1, ip, ror #21
   17cc0:	andeq	r8, r1, ip, ror #21
   17cc4:	andeq	r8, r1, ip, ror #21
   17cc8:	andeq	r8, r1, ip, asr #11
   17ccc:	andeq	r8, r1, ip, asr #11
   17cd0:	andeq	r8, r1, ip, asr #11
   17cd4:	andeq	r8, r1, ip, asr #11
   17cd8:	andeq	r7, r1, ip, asr #30
   17cdc:	andeq	r8, r1, ip, lsl #13
   17ce0:	andeq	r8, r1, ip, ror #21
   17ce4:	andeq	r8, r1, ip, ror #21
   17ce8:	andeq	r8, r1, ip, ror #21
   17cec:	andeq	r8, r1, ip, ror #21
   17cf0:	andeq	r8, r1, ip, ror #21
   17cf4:	andeq	r8, r1, ip, ror #21
   17cf8:	andeq	r8, r1, ip, ror #21
   17cfc:	andeq	r8, r1, ip, ror #21
   17d00:	andeq	r8, r1, ip, ror #21
   17d04:	andeq	r8, r1, ip, ror #21
   17d08:	andeq	r8, r1, ip, ror #21
   17d0c:	andeq	r8, r1, ip, ror #21
   17d10:	andeq	r8, r1, ip, ror #21
   17d14:	andeq	r8, r1, ip, ror #21
   17d18:	andeq	r8, r1, ip, ror #21
   17d1c:	andeq	r8, r1, ip, ror #21
   17d20:	andeq	r8, r1, ip, ror #21
   17d24:	andeq	r8, r1, ip, ror #21
   17d28:	andeq	r8, r1, ip, ror #21
   17d2c:	andeq	r8, r1, ip, ror #21
   17d30:	andeq	r8, r1, ip, ror #21
   17d34:	andeq	r8, r1, ip, ror #21
   17d38:	andeq	r8, r1, ip, ror #21
   17d3c:	andeq	r8, r1, ip, ror #21
   17d40:	andeq	r8, r1, ip, ror #21
   17d44:	andeq	r8, r1, ip, ror #21
   17d48:	andeq	r8, r1, ip, asr #11
   17d4c:	andeq	r8, r1, r4, lsl #9
   17d50:	andeq	r8, r1, ip, ror #21
   17d54:	andeq	r8, r1, ip, asr #11
   17d58:	andeq	r8, r1, ip, ror #21
   17d5c:	andeq	r8, r1, ip, asr #11
   17d60:	andeq	r8, r1, ip, ror #21
   17d64:	andeq	r8, r1, ip, ror #21
   17d68:	andeq	r8, r1, ip, ror #21
   17d6c:	andeq	r8, r1, ip, ror #21
   17d70:	andeq	r8, r1, ip, ror #21
   17d74:	andeq	r8, r1, ip, ror #21
   17d78:	andeq	r8, r1, ip, ror #21
   17d7c:	andeq	r8, r1, ip, ror #21
   17d80:	andeq	r8, r1, ip, ror #21
   17d84:	andeq	r8, r1, ip, ror #21
   17d88:	andeq	r8, r1, ip, ror #21
   17d8c:	andeq	r8, r1, ip, ror #21
   17d90:	andeq	r8, r1, ip, ror #21
   17d94:	andeq	r8, r1, ip, ror #21
   17d98:	andeq	r8, r1, ip, ror #21
   17d9c:	andeq	r8, r1, ip, ror #21
   17da0:	andeq	r8, r1, ip, ror #21
   17da4:	andeq	r8, r1, ip, ror #21
   17da8:	andeq	r8, r1, ip, ror #21
   17dac:	andeq	r8, r1, ip, ror #21
   17db0:	andeq	r8, r1, ip, ror #21
   17db4:	andeq	r8, r1, ip, ror #21
   17db8:	andeq	r8, r1, ip, ror #21
   17dbc:	andeq	r8, r1, ip, ror #21
   17dc0:	andeq	r8, r1, ip, ror #21
   17dc4:	andeq	r8, r1, ip, ror #21
   17dc8:	andeq	r8, r1, r4, asr #10
   17dcc:	andeq	r8, r1, ip, asr #11
   17dd0:	andeq	r8, r1, r4, asr #10
   17dd4:	andeq	r8, r1, r4, ror #10
   17dd8:	mov	r8, r9
   17ddc:	mov	r7, sl
   17de0:	b	18ce0 <__assert_fail@plt+0x7770>
   17de4:	ldr	r3, [sp, #28]
   17de8:	cmp	r3, #0
   17dec:	bne	17e0c <__assert_fail@plt+0x689c>
   17df0:	ldr	r3, [sp, #156]	; 0x9c
   17df4:	tst	r3, #1
   17df8:	bne	181f4 <__assert_fail@plt+0x6c84>
   17dfc:	ldr	r3, [sp, #28]
   17e00:	str	r3, [sp, #44]	; 0x2c
   17e04:	mov	r5, r3
   17e08:	b	18114 <__assert_fail@plt+0x6ba4>
   17e0c:	ldr	r3, [sp, #32]
   17e10:	cmp	r3, #0
   17e14:	bne	18c90 <__assert_fail@plt+0x7720>
   17e18:	str	r3, [sp, #44]	; 0x2c
   17e1c:	ldr	r3, [sp, #36]	; 0x24
   17e20:	eor	r3, r3, #1
   17e24:	cmp	sl, #2
   17e28:	movne	r3, #0
   17e2c:	andeq	r3, r3, #1
   17e30:	cmp	r3, #0
   17e34:	beq	17e8c <__assert_fail@plt+0x691c>
   17e38:	cmp	r9, fp
   17e3c:	movhi	r2, #39	; 0x27
   17e40:	strbhi	r2, [r8, fp]
   17e44:	add	r2, fp, #1
   17e48:	cmp	r9, r2
   17e4c:	movhi	r1, #36	; 0x24
   17e50:	strbhi	r1, [r8, r2]
   17e54:	add	r2, fp, #2
   17e58:	cmp	r9, r2
   17e5c:	movhi	r1, #39	; 0x27
   17e60:	strbhi	r1, [r8, r2]
   17e64:	add	r2, fp, #3
   17e68:	cmp	r9, r2
   17e6c:	bls	18d4c <__assert_fail@plt+0x77dc>
   17e70:	mov	r1, #92	; 0x5c
   17e74:	strb	r1, [r8, r2]
   17e78:	add	fp, fp, #4
   17e7c:	str	r3, [sp, #36]	; 0x24
   17e80:	mov	r5, #0
   17e84:	mov	r4, #48	; 0x30
   17e88:	b	18160 <__assert_fail@plt+0x6bf0>
   17e8c:	cmp	r9, fp
   17e90:	bhi	17eb8 <__assert_fail@plt+0x6948>
   17e94:	add	r1, fp, #1
   17e98:	ldr	r2, [sp, #56]	; 0x38
   17e9c:	cmp	r2, #0
   17ea0:	bne	17ee0 <__assert_fail@plt+0x6970>
   17ea4:	mov	r3, r5
   17ea8:	ldr	r5, [sp, #56]	; 0x38
   17eac:	mov	fp, r1
   17eb0:	mov	r4, #48	; 0x30
   17eb4:	b	18114 <__assert_fail@plt+0x6ba4>
   17eb8:	mov	r2, #92	; 0x5c
   17ebc:	strb	r2, [r8, fp]
   17ec0:	add	r1, fp, #1
   17ec4:	ldr	r2, [sp, #56]	; 0x38
   17ec8:	cmp	r2, #0
   17ecc:	moveq	r3, r5
   17ed0:	moveq	r5, r2
   17ed4:	moveq	fp, r1
   17ed8:	moveq	r4, #48	; 0x30
   17edc:	beq	18160 <__assert_fail@plt+0x6bf0>
   17ee0:	add	r2, r6, #1
   17ee4:	ldr	r0, [sp, #24]
   17ee8:	cmp	r2, r0
   17eec:	bcs	17f08 <__assert_fail@plt+0x6998>
   17ef0:	ldr	r0, [sp, #48]	; 0x30
   17ef4:	ldrb	r2, [r0, r2]
   17ef8:	sub	r2, r2, #48	; 0x30
   17efc:	uxtb	r2, r2
   17f00:	cmp	r2, #9
   17f04:	bls	17f20 <__assert_fail@plt+0x69b0>
   17f08:	mov	r2, r3
   17f0c:	mov	r3, r5
   17f10:	mov	r5, r2
   17f14:	mov	fp, r1
   17f18:	mov	r4, #48	; 0x30
   17f1c:	b	18138 <__assert_fail@plt+0x6bc8>
   17f20:	cmp	r9, r1
   17f24:	movhi	r2, #48	; 0x30
   17f28:	strbhi	r2, [r8, r1]
   17f2c:	add	r2, fp, #2
   17f30:	cmp	r9, r2
   17f34:	movhi	r1, #48	; 0x30
   17f38:	strbhi	r1, [r8, r2]
   17f3c:	add	r1, fp, #3
   17f40:	b	17f08 <__assert_fail@plt+0x6998>
   17f44:	mov	r3, #0
   17f48:	str	r3, [sp, #44]	; 0x2c
   17f4c:	cmp	sl, #2
   17f50:	beq	17f6c <__assert_fail@plt+0x69fc>
   17f54:	cmp	sl, #5
   17f58:	beq	17f84 <__assert_fail@plt+0x6a14>
   17f5c:	mov	r5, #0
   17f60:	mov	r3, r5
   17f64:	mov	r4, #63	; 0x3f
   17f68:	b	18114 <__assert_fail@plt+0x6ba4>
   17f6c:	ldr	r3, [sp, #32]
   17f70:	cmp	r3, #0
   17f74:	bne	18c9c <__assert_fail@plt+0x772c>
   17f78:	mov	r5, r3
   17f7c:	mov	r4, #63	; 0x3f
   17f80:	b	1867c <__assert_fail@plt+0x710c>
   17f84:	ldr	r3, [sp, #156]	; 0x9c
   17f88:	tst	r3, #4
   17f8c:	beq	18ab4 <__assert_fail@plt+0x7544>
   17f90:	add	r2, r6, #2
   17f94:	ldr	r3, [sp, #24]
   17f98:	cmp	r2, r3
   17f9c:	bcs	18ac4 <__assert_fail@plt+0x7554>
   17fa0:	ldr	r3, [sp, #48]	; 0x30
   17fa4:	add	r3, r3, r6
   17fa8:	ldrb	r4, [r3, #1]
   17fac:	cmp	r4, #63	; 0x3f
   17fb0:	movne	r5, #0
   17fb4:	movne	r3, r5
   17fb8:	movne	r4, #63	; 0x3f
   17fbc:	bne	18114 <__assert_fail@plt+0x6ba4>
   17fc0:	ldr	r3, [sp, #48]	; 0x30
   17fc4:	ldrb	r1, [r3, r2]
   17fc8:	sub	r3, r1, #33	; 0x21
   17fcc:	cmp	r3, #29
   17fd0:	ldrls	pc, [pc, r3, lsl #2]
   17fd4:	b	18ad4 <__assert_fail@plt+0x7564>
   17fd8:	andeq	r8, r1, r0, asr r0
   17fdc:	ldrdeq	r8, [r1], -r4
   17fe0:	ldrdeq	r8, [r1], -r4
   17fe4:	ldrdeq	r8, [r1], -r4
   17fe8:	ldrdeq	r8, [r1], -r4
   17fec:	ldrdeq	r8, [r1], -r4
   17ff0:	andeq	r8, r1, r0, asr r0
   17ff4:	andeq	r8, r1, r0, asr r0
   17ff8:	andeq	r8, r1, r0, asr r0
   17ffc:	ldrdeq	r8, [r1], -r4
   18000:	ldrdeq	r8, [r1], -r4
   18004:	ldrdeq	r8, [r1], -r4
   18008:	andeq	r8, r1, r0, asr r0
   1800c:	ldrdeq	r8, [r1], -r4
   18010:	andeq	r8, r1, r0, asr r0
   18014:	ldrdeq	r8, [r1], -r4
   18018:	ldrdeq	r8, [r1], -r4
   1801c:	ldrdeq	r8, [r1], -r4
   18020:	ldrdeq	r8, [r1], -r4
   18024:	ldrdeq	r8, [r1], -r4
   18028:	ldrdeq	r8, [r1], -r4
   1802c:	ldrdeq	r8, [r1], -r4
   18030:	ldrdeq	r8, [r1], -r4
   18034:	ldrdeq	r8, [r1], -r4
   18038:	ldrdeq	r8, [r1], -r4
   1803c:	ldrdeq	r8, [r1], -r4
   18040:	ldrdeq	r8, [r1], -r4
   18044:	andeq	r8, r1, r0, asr r0
   18048:	andeq	r8, r1, r0, asr r0
   1804c:	andeq	r8, r1, r0, asr r0
   18050:	ldr	r3, [sp, #32]
   18054:	cmp	r3, #0
   18058:	bne	18d40 <__assert_fail@plt+0x77d0>
   1805c:	cmp	r9, fp
   18060:	movhi	r3, #63	; 0x3f
   18064:	strbhi	r3, [r8, fp]
   18068:	add	r3, fp, #1
   1806c:	cmp	r9, r3
   18070:	movhi	r0, #34	; 0x22
   18074:	strbhi	r0, [r8, r3]
   18078:	add	r3, fp, #2
   1807c:	cmp	r9, r3
   18080:	movhi	r0, #34	; 0x22
   18084:	strbhi	r0, [r8, r3]
   18088:	add	r3, fp, #3
   1808c:	cmp	r9, r3
   18090:	movhi	r0, #63	; 0x3f
   18094:	strbhi	r0, [r8, r3]
   18098:	add	fp, fp, #4
   1809c:	ldr	r3, [sp, #32]
   180a0:	mov	r5, r3
   180a4:	mov	r4, r1
   180a8:	mov	r6, r2
   180ac:	b	18114 <__assert_fail@plt+0x6ba4>
   180b0:	mov	r3, #0
   180b4:	str	r3, [sp, #44]	; 0x2c
   180b8:	mov	r4, #8
   180bc:	mov	r3, #98	; 0x62
   180c0:	b	18100 <__assert_fail@plt+0x6b90>
   180c4:	mov	r3, #0
   180c8:	str	r3, [sp, #44]	; 0x2c
   180cc:	mov	r4, #12
   180d0:	mov	r3, #102	; 0x66
   180d4:	b	18100 <__assert_fail@plt+0x6b90>
   180d8:	mov	r3, #0
   180dc:	str	r3, [sp, #44]	; 0x2c
   180e0:	mov	r4, #13
   180e4:	mov	r3, #114	; 0x72
   180e8:	ldr	r2, [sp, #32]
   180ec:	cmp	sl, #2
   180f0:	movne	r2, #0
   180f4:	andeq	r2, r2, #1
   180f8:	cmp	r2, #0
   180fc:	bne	18520 <__assert_fail@plt+0x6fb0>
   18100:	ldr	r2, [sp, #28]
   18104:	cmp	r2, #0
   18108:	bne	18b08 <__assert_fail@plt+0x7598>
   1810c:	mov	r5, r2
   18110:	mov	r3, r2
   18114:	ldr	r2, [sp, #28]
   18118:	eor	r2, r2, #1
   1811c:	cmp	sl, #2
   18120:	orreq	r2, r2, #1
   18124:	eor	r2, r2, #1
   18128:	ldr	r1, [sp, #32]
   1812c:	orr	r2, r1, r2
   18130:	tst	r2, #255	; 0xff
   18134:	beq	18160 <__assert_fail@plt+0x6bf0>
   18138:	ldr	r2, [sp, #160]	; 0xa0
   1813c:	cmp	r2, #0
   18140:	beq	18160 <__assert_fail@plt+0x6bf0>
   18144:	ubfx	r1, r4, #5, #8
   18148:	and	r2, r4, #31
   1814c:	ldr	r0, [sp, #160]	; 0xa0
   18150:	ldr	r1, [r0, r1, lsl #2]
   18154:	lsr	r2, r1, r2
   18158:	tst	r2, #1
   1815c:	bne	1816c <__assert_fail@plt+0x6bfc>
   18160:	ldr	r2, [sp, #44]	; 0x2c
   18164:	cmp	r2, #0
   18168:	beq	184c0 <__assert_fail@plt+0x6f50>
   1816c:	ldr	r3, [sp, #32]
   18170:	cmp	r3, #0
   18174:	bne	18cc0 <__assert_fail@plt+0x7750>
   18178:	ldr	r3, [sp, #36]	; 0x24
   1817c:	eor	r3, r3, #1
   18180:	cmp	sl, #2
   18184:	movne	r3, #0
   18188:	andeq	r3, r3, #1
   1818c:	cmp	r3, #0
   18190:	beq	181c8 <__assert_fail@plt+0x6c58>
   18194:	cmp	r9, fp
   18198:	movhi	r2, #39	; 0x27
   1819c:	strbhi	r2, [r8, fp]
   181a0:	add	r2, fp, #1
   181a4:	cmp	r9, r2
   181a8:	movhi	r1, #36	; 0x24
   181ac:	strbhi	r1, [r8, r2]
   181b0:	add	r2, fp, #2
   181b4:	cmp	r9, r2
   181b8:	movhi	r1, #39	; 0x27
   181bc:	strbhi	r1, [r8, r2]
   181c0:	add	fp, fp, #3
   181c4:	str	r3, [sp, #36]	; 0x24
   181c8:	cmp	r9, fp
   181cc:	movhi	r3, #92	; 0x5c
   181d0:	strbhi	r3, [r8, fp]
   181d4:	add	fp, fp, #1
   181d8:	cmp	fp, r9
   181dc:	strbcc	r4, [r8, fp]
   181e0:	add	fp, fp, #1
   181e4:	cmp	r5, #0
   181e8:	ldr	r3, [sp, #40]	; 0x28
   181ec:	moveq	r3, r5
   181f0:	str	r3, [sp, #40]	; 0x28
   181f4:	add	r6, r6, #1
   181f8:	ldr	r3, [sp, #24]
   181fc:	cmn	r3, #1
   18200:	beq	18b30 <__assert_fail@plt+0x75c0>
   18204:	ldr	r3, [sp, #24]
   18208:	subs	r5, r3, r6
   1820c:	movne	r5, #1
   18210:	cmp	r5, #0
   18214:	beq	18b44 <__assert_fail@plt+0x75d4>
   18218:	ldr	r3, [sp, #28]
   1821c:	cmp	sl, #2
   18220:	moveq	r3, #0
   18224:	andne	r3, r3, #1
   18228:	str	r3, [sp, #56]	; 0x38
   1822c:	ldr	r2, [sp, #52]	; 0x34
   18230:	adds	r7, r2, #0
   18234:	movne	r7, #1
   18238:	ands	r3, r3, r7
   1823c:	str	r3, [sp, #44]	; 0x2c
   18240:	bne	17b60 <__assert_fail@plt+0x65f0>
   18244:	ldr	r3, [sp, #48]	; 0x30
   18248:	ldrb	r4, [r3, r6]
   1824c:	cmp	r4, #126	; 0x7e
   18250:	ldrls	pc, [pc, r4, lsl #2]
   18254:	b	1868c <__assert_fail@plt+0x711c>
   18258:	andeq	r7, r1, r4, ror #27
   1825c:	andeq	r8, r1, ip, lsl #13
   18260:	andeq	r8, r1, ip, lsl #13
   18264:	andeq	r8, r1, ip, lsl #13
   18268:	andeq	r8, r1, ip, lsl #13
   1826c:	andeq	r8, r1, ip, lsl #13
   18270:	andeq	r8, r1, ip, lsl #13
   18274:	andeq	r8, r1, ip, lsr #10
   18278:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1827c:	andeq	r8, r1, ip, asr r4
   18280:	andeq	r8, r1, r0, lsl #10
   18284:	andeq	r8, r1, r0, ror r4
   18288:	andeq	r8, r1, ip, asr #1
   1828c:	andeq	r8, r1, r0, ror #1
   18290:	andeq	r8, r1, ip, lsl #13
   18294:	andeq	r8, r1, ip, lsl #13
   18298:	andeq	r8, r1, ip, lsl #13
   1829c:	andeq	r8, r1, ip, lsl #13
   182a0:	andeq	r8, r1, ip, lsl #13
   182a4:	andeq	r8, r1, ip, lsl #13
   182a8:	andeq	r8, r1, ip, lsl #13
   182ac:	andeq	r8, r1, ip, lsl #13
   182b0:	andeq	r8, r1, ip, lsl #13
   182b4:	andeq	r8, r1, ip, lsl #13
   182b8:	andeq	r8, r1, ip, lsl #13
   182bc:	andeq	r8, r1, ip, lsl #13
   182c0:	andeq	r8, r1, ip, lsl #13
   182c4:	andeq	r8, r1, ip, lsl #13
   182c8:	andeq	r8, r1, ip, lsl #13
   182cc:	andeq	r8, r1, ip, lsl #13
   182d0:	andeq	r8, r1, ip, lsl #13
   182d4:	andeq	r8, r1, ip, lsl #13
   182d8:	andeq	r8, r1, r8, lsr #11
   182dc:	andeq	r8, r1, r4, lsr #11
   182e0:	andeq	r8, r1, r4, lsr #11
   182e4:	andeq	r8, r1, r4, ror #10
   182e8:	andeq	r8, r1, r4, lsr #11
   182ec:	andeq	r8, r1, ip, lsr #21
   182f0:	andeq	r8, r1, r4, lsr #11
   182f4:	andeq	r8, r1, ip, ror #11
   182f8:	andeq	r8, r1, r4, lsr #11
   182fc:	andeq	r8, r1, r4, lsr #11
   18300:	andeq	r8, r1, r4, lsr #11
   18304:	andeq	r8, r1, ip, lsr #21
   18308:	andeq	r8, r1, ip, lsr #21
   1830c:	andeq	r8, r1, ip, lsr #21
   18310:	andeq	r8, r1, ip, lsr #21
   18314:	andeq	r8, r1, ip, lsr #21
   18318:	andeq	r8, r1, ip, lsr #21
   1831c:	andeq	r8, r1, ip, lsr #21
   18320:	andeq	r8, r1, ip, lsr #21
   18324:	andeq	r8, r1, ip, lsr #21
   18328:	andeq	r8, r1, ip, lsr #21
   1832c:	andeq	r8, r1, ip, lsr #21
   18330:	andeq	r8, r1, ip, lsr #21
   18334:	andeq	r8, r1, ip, lsr #21
   18338:	andeq	r8, r1, ip, lsr #21
   1833c:	andeq	r8, r1, ip, lsr #21
   18340:	andeq	r8, r1, ip, lsr #21
   18344:	andeq	r8, r1, r4, lsr #11
   18348:	andeq	r8, r1, r4, lsr #11
   1834c:	andeq	r8, r1, r4, lsr #11
   18350:	andeq	r8, r1, r4, lsr #11
   18354:	andeq	r7, r1, ip, asr #30
   18358:	andeq	r8, r1, ip, lsl #13
   1835c:	andeq	r8, r1, ip, lsr #21
   18360:	andeq	r8, r1, ip, lsr #21
   18364:	andeq	r8, r1, ip, lsr #21
   18368:	andeq	r8, r1, ip, lsr #21
   1836c:	andeq	r8, r1, ip, lsr #21
   18370:	andeq	r8, r1, ip, lsr #21
   18374:	andeq	r8, r1, ip, lsr #21
   18378:	andeq	r8, r1, ip, lsr #21
   1837c:	andeq	r8, r1, ip, lsr #21
   18380:	andeq	r8, r1, ip, lsr #21
   18384:	andeq	r8, r1, ip, lsr #21
   18388:	andeq	r8, r1, ip, lsr #21
   1838c:	andeq	r8, r1, ip, lsr #21
   18390:	andeq	r8, r1, ip, lsr #21
   18394:	andeq	r8, r1, ip, lsr #21
   18398:	andeq	r8, r1, ip, lsr #21
   1839c:	andeq	r8, r1, ip, lsr #21
   183a0:	andeq	r8, r1, ip, lsr #21
   183a4:	andeq	r8, r1, ip, lsr #21
   183a8:	andeq	r8, r1, ip, lsr #21
   183ac:	andeq	r8, r1, ip, lsr #21
   183b0:	andeq	r8, r1, ip, lsr #21
   183b4:	andeq	r8, r1, ip, lsr #21
   183b8:	andeq	r8, r1, ip, lsr #21
   183bc:	andeq	r8, r1, ip, lsr #21
   183c0:	andeq	r8, r1, ip, lsr #21
   183c4:	andeq	r8, r1, r4, lsr #11
   183c8:	andeq	r8, r1, r4, lsl #9
   183cc:	andeq	r8, r1, ip, lsr #21
   183d0:	andeq	r8, r1, r4, lsr #11
   183d4:	andeq	r8, r1, ip, lsr #21
   183d8:	andeq	r8, r1, r4, lsr #11
   183dc:	andeq	r8, r1, ip, lsr #21
   183e0:	andeq	r8, r1, ip, lsr #21
   183e4:	andeq	r8, r1, ip, lsr #21
   183e8:	andeq	r8, r1, ip, lsr #21
   183ec:	andeq	r8, r1, ip, lsr #21
   183f0:	andeq	r8, r1, ip, lsr #21
   183f4:	andeq	r8, r1, ip, lsr #21
   183f8:	andeq	r8, r1, ip, lsr #21
   183fc:	andeq	r8, r1, ip, lsr #21
   18400:	andeq	r8, r1, ip, lsr #21
   18404:	andeq	r8, r1, ip, lsr #21
   18408:	andeq	r8, r1, ip, lsr #21
   1840c:	andeq	r8, r1, ip, lsr #21
   18410:	andeq	r8, r1, ip, lsr #21
   18414:	andeq	r8, r1, ip, lsr #21
   18418:	andeq	r8, r1, ip, lsr #21
   1841c:	andeq	r8, r1, ip, lsr #21
   18420:	andeq	r8, r1, ip, lsr #21
   18424:	andeq	r8, r1, ip, lsr #21
   18428:	andeq	r8, r1, ip, lsr #21
   1842c:	andeq	r8, r1, ip, lsr #21
   18430:	andeq	r8, r1, ip, lsr #21
   18434:	andeq	r8, r1, ip, lsr #21
   18438:	andeq	r8, r1, ip, lsr #21
   1843c:	andeq	r8, r1, ip, lsr #21
   18440:	andeq	r8, r1, ip, lsr #21
   18444:	andeq	r8, r1, r4, asr #10
   18448:	andeq	r8, r1, r4, lsr #11
   1844c:	andeq	r8, r1, r4, asr #10
   18450:	andeq	r8, r1, r4, ror #10
   18454:	mov	r3, #0
   18458:	str	r3, [sp, #44]	; 0x2c
   1845c:	mov	r4, #9
   18460:	mov	r3, #116	; 0x74
   18464:	b	180e8 <__assert_fail@plt+0x6b78>
   18468:	mov	r3, #0
   1846c:	str	r3, [sp, #44]	; 0x2c
   18470:	mov	r4, #11
   18474:	mov	r3, #118	; 0x76
   18478:	b	18100 <__assert_fail@plt+0x6b90>
   1847c:	mov	r3, #0
   18480:	str	r3, [sp, #44]	; 0x2c
   18484:	cmp	sl, #2
   18488:	beq	184ac <__assert_fail@plt+0x6f3c>
   1848c:	ldr	r3, [sp, #28]
   18490:	ldr	r2, [sp, #32]
   18494:	and	r3, r3, r2
   18498:	tst	r7, r3
   1849c:	bne	18b20 <__assert_fail@plt+0x75b0>
   184a0:	mov	r4, #92	; 0x5c
   184a4:	mov	r3, r4
   184a8:	b	18100 <__assert_fail@plt+0x6b90>
   184ac:	ldr	r3, [sp, #32]
   184b0:	cmp	r3, #0
   184b4:	bne	18ca8 <__assert_fail@plt+0x7738>
   184b8:	mov	r5, r3
   184bc:	mov	r4, #92	; 0x5c
   184c0:	eor	r3, r3, #1
   184c4:	ldr	r2, [sp, #36]	; 0x24
   184c8:	and	r3, r3, r2
   184cc:	tst	r3, #255	; 0xff
   184d0:	beq	181d8 <__assert_fail@plt+0x6c68>
   184d4:	cmp	r9, fp
   184d8:	movhi	r3, #39	; 0x27
   184dc:	strbhi	r3, [r8, fp]
   184e0:	add	r3, fp, #1
   184e4:	cmp	r9, r3
   184e8:	movhi	r2, #39	; 0x27
   184ec:	strbhi	r2, [r8, r3]
   184f0:	add	fp, fp, #2
   184f4:	mov	r3, #0
   184f8:	str	r3, [sp, #36]	; 0x24
   184fc:	b	181d8 <__assert_fail@plt+0x6c68>
   18500:	mov	r3, #110	; 0x6e
   18504:	b	180e8 <__assert_fail@plt+0x6b78>
   18508:	mov	r3, #110	; 0x6e
   1850c:	b	180e8 <__assert_fail@plt+0x6b78>
   18510:	mov	r3, #0
   18514:	str	r3, [sp, #44]	; 0x2c
   18518:	mov	r3, #110	; 0x6e
   1851c:	b	180e8 <__assert_fail@plt+0x6b78>
   18520:	mov	r8, r9
   18524:	mov	r7, #2
   18528:	b	18cc8 <__assert_fail@plt+0x7758>
   1852c:	mov	r3, #97	; 0x61
   18530:	b	18100 <__assert_fail@plt+0x6b90>
   18534:	mov	r3, #97	; 0x61
   18538:	b	18100 <__assert_fail@plt+0x6b90>
   1853c:	mov	r3, #0
   18540:	str	r3, [sp, #44]	; 0x2c
   18544:	ldr	r3, [sp, #24]
   18548:	cmn	r3, #1
   1854c:	beq	18578 <__assert_fail@plt+0x7008>
   18550:	ldr	r3, [sp, #24]
   18554:	subs	r3, r3, #1
   18558:	movne	r3, #1
   1855c:	cmp	r3, #0
   18560:	bne	18ae0 <__assert_fail@plt+0x7570>
   18564:	cmp	r6, #0
   18568:	beq	185a8 <__assert_fail@plt+0x7038>
   1856c:	mov	r5, #0
   18570:	mov	r3, r5
   18574:	b	18114 <__assert_fail@plt+0x6ba4>
   18578:	ldr	r3, [sp, #48]	; 0x30
   1857c:	ldrb	r3, [r3, #1]
   18580:	adds	r3, r3, #0
   18584:	movne	r3, #1
   18588:	b	1855c <__assert_fail@plt+0x6fec>
   1858c:	mov	r3, #0
   18590:	str	r3, [sp, #44]	; 0x2c
   18594:	b	18564 <__assert_fail@plt+0x6ff4>
   18598:	mov	r3, #0
   1859c:	str	r3, [sp, #44]	; 0x2c
   185a0:	b	185a8 <__assert_fail@plt+0x7038>
   185a4:	ldr	r5, [sp, #44]	; 0x2c
   185a8:	ldr	r3, [sp, #32]
   185ac:	cmp	sl, #2
   185b0:	movne	r3, #0
   185b4:	andeq	r3, r3, #1
   185b8:	cmp	r3, #0
   185bc:	beq	18114 <__assert_fail@plt+0x6ba4>
   185c0:	mov	r8, r9
   185c4:	mov	r7, #2
   185c8:	b	18cc8 <__assert_fail@plt+0x7758>
   185cc:	ldr	r5, [sp, #32]
   185d0:	b	185a8 <__assert_fail@plt+0x7038>
   185d4:	mov	r3, #0
   185d8:	str	r3, [sp, #44]	; 0x2c
   185dc:	mov	r5, r3
   185e0:	b	185a8 <__assert_fail@plt+0x7038>
   185e4:	mov	r3, #0
   185e8:	str	r3, [sp, #44]	; 0x2c
   185ec:	cmp	sl, #2
   185f0:	strne	r5, [sp, #68]	; 0x44
   185f4:	movne	r3, #0
   185f8:	movne	r4, #39	; 0x27
   185fc:	bne	18114 <__assert_fail@plt+0x6ba4>
   18600:	ldr	r3, [sp, #32]
   18604:	cmp	r3, #0
   18608:	bne	18cb4 <__assert_fail@plt+0x7744>
   1860c:	ldr	r3, [sp, #72]	; 0x48
   18610:	clz	r3, r3
   18614:	lsr	r3, r3, #5
   18618:	cmp	r9, #0
   1861c:	moveq	r3, #0
   18620:	cmp	r3, #0
   18624:	movne	r3, #0
   18628:	bne	18650 <__assert_fail@plt+0x70e0>
   1862c:	cmp	r9, fp
   18630:	movhi	r3, #39	; 0x27
   18634:	strbhi	r3, [r8, fp]
   18638:	add	r3, fp, #1
   1863c:	cmp	r9, r3
   18640:	movhi	r2, #92	; 0x5c
   18644:	strbhi	r2, [r8, r3]
   18648:	mov	r3, r9
   1864c:	ldr	r9, [sp, #72]	; 0x48
   18650:	add	r2, fp, #2
   18654:	cmp	r2, r3
   18658:	movcc	r1, #39	; 0x27
   1865c:	strbcc	r1, [r8, r2]
   18660:	add	fp, fp, #3
   18664:	str	r5, [sp, #68]	; 0x44
   18668:	ldr	r2, [sp, #32]
   1866c:	str	r2, [sp, #36]	; 0x24
   18670:	str	r9, [sp, #72]	; 0x48
   18674:	mov	r9, r3
   18678:	mov	r4, #39	; 0x27
   1867c:	mov	r3, #0
   18680:	b	18160 <__assert_fail@plt+0x6bf0>
   18684:	mov	r3, #0
   18688:	str	r3, [sp, #44]	; 0x2c
   1868c:	ldr	r7, [sp, #76]	; 0x4c
   18690:	cmp	r7, #1
   18694:	bne	186cc <__assert_fail@plt+0x715c>
   18698:	bl	11390 <__ctype_b_loc@plt>
   1869c:	ldr	r2, [r0]
   186a0:	lsl	r3, r4, #1
   186a4:	ldrh	r5, [r2, r3]
   186a8:	ubfx	r5, r5, #14, #1
   186ac:	mov	ip, r7
   186b0:	eor	r3, r5, #1
   186b4:	ldr	r2, [sp, #28]
   186b8:	and	r3, r3, r2
   186bc:	ands	r3, r3, #255	; 0xff
   186c0:	beq	18114 <__assert_fail@plt+0x6ba4>
   186c4:	mov	r5, #0
   186c8:	b	18928 <__assert_fail@plt+0x73b8>
   186cc:	mov	r2, #0
   186d0:	mov	r3, #0
   186d4:	strd	r2, [sp, #104]	; 0x68
   186d8:	ldr	r3, [sp, #24]
   186dc:	cmn	r3, #1
   186e0:	beq	18704 <__assert_fail@plt+0x7194>
   186e4:	mov	r3, #0
   186e8:	str	r4, [sp, #88]	; 0x58
   186ec:	str	fp, [sp, #92]	; 0x5c
   186f0:	str	r8, [sp, #56]	; 0x38
   186f4:	mov	r8, r3
   186f8:	str	r9, [sp, #84]	; 0x54
   186fc:	ldr	r9, [sp, #48]	; 0x30
   18700:	b	18850 <__assert_fail@plt+0x72e0>
   18704:	ldr	r0, [sp, #48]	; 0x30
   18708:	bl	113c0 <strlen@plt>
   1870c:	str	r0, [sp, #24]
   18710:	b	186e4 <__assert_fail@plt+0x7174>
   18714:	mov	r1, fp
   18718:	ldr	r4, [sp, #88]	; 0x58
   1871c:	mov	r2, r8
   18720:	mov	ip, r8
   18724:	ldr	fp, [sp, #92]	; 0x5c
   18728:	ldr	r8, [sp, #56]	; 0x38
   1872c:	ldr	r9, [sp, #84]	; 0x54
   18730:	ldr	r0, [sp, #24]
   18734:	cmp	r7, r0
   18738:	bcs	188f0 <__assert_fail@plt+0x7380>
   1873c:	ldrb	r3, [r1]
   18740:	cmp	r3, #0
   18744:	beq	188f8 <__assert_fail@plt+0x7388>
   18748:	mov	r3, r1
   1874c:	add	r2, r2, #1
   18750:	add	r1, r6, r2
   18754:	cmp	r0, r1
   18758:	bls	18900 <__assert_fail@plt+0x7390>
   1875c:	ldrb	r1, [r3, #1]!
   18760:	cmp	r1, #0
   18764:	bne	1874c <__assert_fail@plt+0x71dc>
   18768:	mov	ip, r2
   1876c:	mov	r5, #0
   18770:	b	18920 <__assert_fail@plt+0x73b0>
   18774:	ldr	r3, [sp, #56]	; 0x38
   18778:	str	r3, [sp, #64]	; 0x40
   1877c:	ldr	r8, [sp, #84]	; 0x54
   18780:	mov	r7, #2
   18784:	b	18cc8 <__assert_fail@plt+0x7758>
   18788:	cmp	r2, r7
   1878c:	beq	1882c <__assert_fail@plt+0x72bc>
   18790:	ldrb	r3, [r2], #1
   18794:	sub	r3, r3, #91	; 0x5b
   18798:	cmp	r3, #33	; 0x21
   1879c:	ldrls	pc, [pc, r3, lsl #2]
   187a0:	b	18788 <__assert_fail@plt+0x7218>
   187a4:	andeq	r8, r1, r4, ror r7
   187a8:	andeq	r8, r1, r4, ror r7
   187ac:	andeq	r8, r1, r8, lsl #15
   187b0:	andeq	r8, r1, r4, ror r7
   187b4:	andeq	r8, r1, r8, lsl #15
   187b8:	andeq	r8, r1, r4, ror r7
   187bc:	andeq	r8, r1, r8, lsl #15
   187c0:	andeq	r8, r1, r8, lsl #15
   187c4:	andeq	r8, r1, r8, lsl #15
   187c8:	andeq	r8, r1, r8, lsl #15
   187cc:	andeq	r8, r1, r8, lsl #15
   187d0:	andeq	r8, r1, r8, lsl #15
   187d4:	andeq	r8, r1, r8, lsl #15
   187d8:	andeq	r8, r1, r8, lsl #15
   187dc:	andeq	r8, r1, r8, lsl #15
   187e0:	andeq	r8, r1, r8, lsl #15
   187e4:	andeq	r8, r1, r8, lsl #15
   187e8:	andeq	r8, r1, r8, lsl #15
   187ec:	andeq	r8, r1, r8, lsl #15
   187f0:	andeq	r8, r1, r8, lsl #15
   187f4:	andeq	r8, r1, r8, lsl #15
   187f8:	andeq	r8, r1, r8, lsl #15
   187fc:	andeq	r8, r1, r8, lsl #15
   18800:	andeq	r8, r1, r8, lsl #15
   18804:	andeq	r8, r1, r8, lsl #15
   18808:	andeq	r8, r1, r8, lsl #15
   1880c:	andeq	r8, r1, r8, lsl #15
   18810:	andeq	r8, r1, r8, lsl #15
   18814:	andeq	r8, r1, r8, lsl #15
   18818:	andeq	r8, r1, r8, lsl #15
   1881c:	andeq	r8, r1, r8, lsl #15
   18820:	andeq	r8, r1, r8, lsl #15
   18824:	andeq	r8, r1, r8, lsl #15
   18828:	andeq	r8, r1, r4, ror r7
   1882c:	ldr	r0, [sp, #100]	; 0x64
   18830:	bl	112ac <iswprint@plt>
   18834:	cmp	r0, #0
   18838:	moveq	r5, #0
   1883c:	add	r8, r8, r4
   18840:	add	r0, sp, #104	; 0x68
   18844:	bl	11234 <mbsinit@plt>
   18848:	cmp	r0, #0
   1884c:	bne	188bc <__assert_fail@plt+0x734c>
   18850:	add	r7, r6, r8
   18854:	add	fp, r9, r7
   18858:	add	r3, sp, #104	; 0x68
   1885c:	ldr	r2, [sp, #24]
   18860:	sub	r2, r2, r7
   18864:	mov	r1, fp
   18868:	add	r0, sp, #100	; 0x64
   1886c:	bl	1af5c <__assert_fail@plt+0x99ec>
   18870:	subs	r4, r0, #0
   18874:	beq	1890c <__assert_fail@plt+0x739c>
   18878:	cmn	r4, #1
   1887c:	beq	188d4 <__assert_fail@plt+0x7364>
   18880:	cmn	r4, #2
   18884:	beq	18714 <__assert_fail@plt+0x71a4>
   18888:	ldr	r3, [sp, #32]
   1888c:	cmp	sl, #2
   18890:	movne	r3, #0
   18894:	andeq	r3, r3, #1
   18898:	cmp	r3, #0
   1889c:	beq	1882c <__assert_fail@plt+0x72bc>
   188a0:	cmp	r4, #1
   188a4:	bls	1882c <__assert_fail@plt+0x72bc>
   188a8:	add	r2, r7, #1
   188ac:	add	r2, r9, r2
   188b0:	add	r3, r9, r4
   188b4:	add	r7, r3, r7
   188b8:	b	18790 <__assert_fail@plt+0x7220>
   188bc:	ldr	r4, [sp, #88]	; 0x58
   188c0:	mov	ip, r8
   188c4:	ldr	fp, [sp, #92]	; 0x5c
   188c8:	ldr	r8, [sp, #56]	; 0x38
   188cc:	ldr	r9, [sp, #84]	; 0x54
   188d0:	b	18920 <__assert_fail@plt+0x73b0>
   188d4:	ldr	r4, [sp, #88]	; 0x58
   188d8:	mov	ip, r8
   188dc:	ldr	fp, [sp, #92]	; 0x5c
   188e0:	ldr	r8, [sp, #56]	; 0x38
   188e4:	ldr	r9, [sp, #84]	; 0x54
   188e8:	mov	r5, #0
   188ec:	b	18920 <__assert_fail@plt+0x73b0>
   188f0:	mov	r5, #0
   188f4:	b	18920 <__assert_fail@plt+0x73b0>
   188f8:	mov	r5, #0
   188fc:	b	18920 <__assert_fail@plt+0x73b0>
   18900:	mov	ip, r2
   18904:	mov	r5, #0
   18908:	b	18920 <__assert_fail@plt+0x73b0>
   1890c:	ldr	r4, [sp, #88]	; 0x58
   18910:	mov	ip, r8
   18914:	ldr	fp, [sp, #92]	; 0x5c
   18918:	ldr	r8, [sp, #56]	; 0x38
   1891c:	ldr	r9, [sp, #84]	; 0x54
   18920:	cmp	ip, #1
   18924:	bls	186b0 <__assert_fail@plt+0x7140>
   18928:	add	lr, r6, ip
   1892c:	ldr	r3, [sp, #48]	; 0x30
   18930:	add	r1, r3, r6
   18934:	mov	r3, #0
   18938:	eor	r0, r5, #1
   1893c:	ldr	r2, [sp, #28]
   18940:	and	r0, r0, r2
   18944:	uxtb	r0, r0
   18948:	str	r0, [sp, #56]	; 0x38
   1894c:	mov	r7, #92	; 0x5c
   18950:	ldr	ip, [sp, #36]	; 0x24
   18954:	str	r5, [sp, #84]	; 0x54
   18958:	ldr	r2, [sp, #44]	; 0x2c
   1895c:	b	189cc <__assert_fail@plt+0x745c>
   18960:	cmp	r2, #0
   18964:	beq	18974 <__assert_fail@plt+0x7404>
   18968:	cmp	r9, fp
   1896c:	strbhi	r7, [r8, fp]
   18970:	add	fp, fp, #1
   18974:	add	r5, r6, #1
   18978:	cmp	r5, lr
   1897c:	bcs	18a88 <__assert_fail@plt+0x7518>
   18980:	eor	r2, r3, #1
   18984:	and	r2, r2, ip
   18988:	ands	r2, r2, #255	; 0xff
   1898c:	beq	18aa4 <__assert_fail@plt+0x7534>
   18990:	cmp	r9, fp
   18994:	movhi	r2, #39	; 0x27
   18998:	strbhi	r2, [r8, fp]
   1899c:	add	r2, fp, #1
   189a0:	cmp	r9, r2
   189a4:	movhi	ip, #39	; 0x27
   189a8:	strbhi	ip, [r8, r2]
   189ac:	add	fp, fp, #2
   189b0:	ldr	ip, [sp, #56]	; 0x38
   189b4:	mov	r2, ip
   189b8:	mov	r6, r5
   189bc:	cmp	r9, fp
   189c0:	strbhi	r4, [r8, fp]
   189c4:	add	fp, fp, #1
   189c8:	ldrb	r4, [r1, #1]!
   189cc:	cmp	r0, #0
   189d0:	beq	18960 <__assert_fail@plt+0x73f0>
   189d4:	ldr	r3, [sp, #32]
   189d8:	cmp	r3, #0
   189dc:	bne	18c70 <__assert_fail@plt+0x7700>
   189e0:	eor	r3, ip, #1
   189e4:	cmp	sl, #2
   189e8:	movne	r3, #0
   189ec:	andeq	r3, r3, #1
   189f0:	cmp	r3, #0
   189f4:	beq	18a2c <__assert_fail@plt+0x74bc>
   189f8:	cmp	r9, fp
   189fc:	movhi	ip, #39	; 0x27
   18a00:	strbhi	ip, [r8, fp]
   18a04:	add	ip, fp, #1
   18a08:	cmp	r9, ip
   18a0c:	movhi	r5, #36	; 0x24
   18a10:	strbhi	r5, [r8, ip]
   18a14:	add	ip, fp, #2
   18a18:	cmp	r9, ip
   18a1c:	movhi	r5, #39	; 0x27
   18a20:	strbhi	r5, [r8, ip]
   18a24:	add	fp, fp, #3
   18a28:	mov	ip, r3
   18a2c:	cmp	r9, fp
   18a30:	strbhi	r7, [r8, fp]
   18a34:	add	r3, fp, #1
   18a38:	cmp	r9, r3
   18a3c:	bls	18a4c <__assert_fail@plt+0x74dc>
   18a40:	lsr	r5, r4, #6
   18a44:	add	r5, r5, #48	; 0x30
   18a48:	strb	r5, [r8, r3]
   18a4c:	add	r3, fp, #2
   18a50:	cmp	r9, r3
   18a54:	bls	18a64 <__assert_fail@plt+0x74f4>
   18a58:	ubfx	r5, r4, #3, #3
   18a5c:	add	r5, r5, #48	; 0x30
   18a60:	strb	r5, [r8, r3]
   18a64:	add	fp, fp, #3
   18a68:	and	r4, r4, #7
   18a6c:	add	r4, r4, #48	; 0x30
   18a70:	add	r5, r6, #1
   18a74:	cmp	r5, lr
   18a78:	bcs	18a94 <__assert_fail@plt+0x7524>
   18a7c:	ldr	r3, [sp, #56]	; 0x38
   18a80:	mov	r6, r5
   18a84:	b	189bc <__assert_fail@plt+0x744c>
   18a88:	str	ip, [sp, #36]	; 0x24
   18a8c:	ldr	r5, [sp, #84]	; 0x54
   18a90:	b	184c0 <__assert_fail@plt+0x6f50>
   18a94:	str	ip, [sp, #36]	; 0x24
   18a98:	ldr	r5, [sp, #84]	; 0x54
   18a9c:	mov	r3, r0
   18aa0:	b	184c0 <__assert_fail@plt+0x6f50>
   18aa4:	mov	r6, r5
   18aa8:	b	189bc <__assert_fail@plt+0x744c>
   18aac:	ldr	r3, [sp, #44]	; 0x2c
   18ab0:	b	18114 <__assert_fail@plt+0x6ba4>
   18ab4:	mov	r5, #0
   18ab8:	mov	r3, r5
   18abc:	mov	r4, #63	; 0x3f
   18ac0:	b	18114 <__assert_fail@plt+0x6ba4>
   18ac4:	mov	r5, #0
   18ac8:	mov	r3, r5
   18acc:	mov	r4, #63	; 0x3f
   18ad0:	b	18114 <__assert_fail@plt+0x6ba4>
   18ad4:	mov	r5, #0
   18ad8:	mov	r3, r5
   18adc:	b	18114 <__assert_fail@plt+0x6ba4>
   18ae0:	mov	r5, #0
   18ae4:	mov	r3, r5
   18ae8:	b	18114 <__assert_fail@plt+0x6ba4>
   18aec:	ldr	r5, [sp, #44]	; 0x2c
   18af0:	ldr	r3, [sp, #32]
   18af4:	b	18114 <__assert_fail@plt+0x6ba4>
   18af8:	ldr	r5, [sp, #44]	; 0x2c
   18afc:	mov	r3, #0
   18b00:	str	r3, [sp, #44]	; 0x2c
   18b04:	b	18114 <__assert_fail@plt+0x6ba4>
   18b08:	mov	r4, r3
   18b0c:	mov	r5, #0
   18b10:	b	1816c <__assert_fail@plt+0x6bfc>
   18b14:	mov	r5, #0
   18b18:	mov	r4, #97	; 0x61
   18b1c:	b	1816c <__assert_fail@plt+0x6bfc>
   18b20:	mov	r5, #0
   18b24:	mov	r3, r5
   18b28:	mov	r4, #92	; 0x5c
   18b2c:	b	184c0 <__assert_fail@plt+0x6f50>
   18b30:	ldr	r3, [sp, #48]	; 0x30
   18b34:	ldrb	r5, [r3, r6]
   18b38:	adds	r5, r5, #0
   18b3c:	movne	r5, #1
   18b40:	b	18210 <__assert_fail@plt+0x6ca0>
   18b44:	cmp	sl, #2
   18b48:	movne	r3, #0
   18b4c:	moveq	r3, #1
   18b50:	ldr	r1, [sp, #32]
   18b54:	cmp	fp, #0
   18b58:	andeq	r2, r3, r1
   18b5c:	movne	r2, #0
   18b60:	cmp	r2, #0
   18b64:	bne	18c84 <__assert_fail@plt+0x7714>
   18b68:	eor	r2, r1, #1
   18b6c:	uxtb	r2, r2
   18b70:	and	r3, r3, r2
   18b74:	ldr	r1, [sp, #68]	; 0x44
   18b78:	ands	r3, r1, r3
   18b7c:	beq	18c10 <__assert_fail@plt+0x76a0>
   18b80:	ldr	r2, [sp, #40]	; 0x28
   18b84:	cmp	r2, #0
   18b88:	bne	18bc0 <__assert_fail@plt+0x7650>
   18b8c:	ldr	r2, [sp, #72]	; 0x48
   18b90:	adds	r2, r2, #0
   18b94:	movne	r2, #1
   18b98:	cmp	r9, #0
   18b9c:	movne	r2, #0
   18ba0:	str	r2, [sp, #68]	; 0x44
   18ba4:	mov	sl, #2
   18ba8:	ldr	r1, [sp, #40]	; 0x28
   18bac:	str	r1, [sp, #32]
   18bb0:	cmp	r2, #0
   18bb4:	beq	18c04 <__assert_fail@plt+0x7694>
   18bb8:	ldr	r9, [sp, #72]	; 0x48
   18bbc:	b	17918 <__assert_fail@plt+0x63a8>
   18bc0:	ldr	r3, [sp, #168]	; 0xa8
   18bc4:	str	r3, [sp, #16]
   18bc8:	ldr	r3, [sp, #164]	; 0xa4
   18bcc:	str	r3, [sp, #12]
   18bd0:	ldr	r3, [sp, #160]	; 0xa0
   18bd4:	str	r3, [sp, #8]
   18bd8:	ldr	r3, [sp, #156]	; 0x9c
   18bdc:	str	r3, [sp, #4]
   18be0:	mov	r3, #5
   18be4:	str	r3, [sp]
   18be8:	ldr	r3, [sp, #24]
   18bec:	ldr	r2, [sp, #48]	; 0x30
   18bf0:	ldr	r1, [sp, #72]	; 0x48
   18bf4:	ldr	r0, [sp, #64]	; 0x40
   18bf8:	bl	178a0 <__assert_fail@plt+0x6330>
   18bfc:	mov	fp, r0
   18c00:	b	18d20 <__assert_fail@plt+0x77b0>
   18c04:	mov	r8, r9
   18c08:	mov	r2, r3
   18c0c:	b	18c14 <__assert_fail@plt+0x76a4>
   18c10:	mov	r8, r9
   18c14:	ldr	r3, [sp, #60]	; 0x3c
   18c18:	cmp	r3, #0
   18c1c:	moveq	r2, #0
   18c20:	andne	r2, r2, #1
   18c24:	cmp	r2, #0
   18c28:	beq	18c58 <__assert_fail@plt+0x76e8>
   18c2c:	mov	r2, r3
   18c30:	ldrb	r3, [r3]
   18c34:	cmp	r3, #0
   18c38:	beq	18c58 <__assert_fail@plt+0x76e8>
   18c3c:	ldr	r1, [sp, #64]	; 0x40
   18c40:	cmp	r8, fp
   18c44:	strbhi	r3, [r1, fp]
   18c48:	add	fp, fp, #1
   18c4c:	ldrb	r3, [r2, #1]!
   18c50:	cmp	r3, #0
   18c54:	bne	18c40 <__assert_fail@plt+0x76d0>
   18c58:	cmp	r8, fp
   18c5c:	bls	18d20 <__assert_fail@plt+0x77b0>
   18c60:	mov	r3, #0
   18c64:	ldr	r2, [sp, #64]	; 0x40
   18c68:	strb	r3, [r2, fp]
   18c6c:	b	18d20 <__assert_fail@plt+0x77b0>
   18c70:	mov	r8, r9
   18c74:	mov	r7, sl
   18c78:	ldr	r3, [sp, #32]
   18c7c:	str	r3, [sp, #28]
   18c80:	b	18cc8 <__assert_fail@plt+0x7758>
   18c84:	mov	r8, r9
   18c88:	mov	r7, #2
   18c8c:	b	18cc8 <__assert_fail@plt+0x7758>
   18c90:	mov	r8, r9
   18c94:	mov	r7, sl
   18c98:	b	18cc8 <__assert_fail@plt+0x7758>
   18c9c:	mov	r8, r9
   18ca0:	mov	r7, sl
   18ca4:	b	18cc8 <__assert_fail@plt+0x7758>
   18ca8:	mov	r8, r9
   18cac:	mov	r7, sl
   18cb0:	b	18cc8 <__assert_fail@plt+0x7758>
   18cb4:	mov	r8, r9
   18cb8:	mov	r7, sl
   18cbc:	b	18cc8 <__assert_fail@plt+0x7758>
   18cc0:	mov	r8, r9
   18cc4:	mov	r7, sl
   18cc8:	ldr	r3, [sp, #28]
   18ccc:	cmp	r7, #2
   18cd0:	movne	r3, #0
   18cd4:	andeq	r3, r3, #1
   18cd8:	cmp	r3, #0
   18cdc:	movne	r7, #4
   18ce0:	ldr	r3, [sp, #168]	; 0xa8
   18ce4:	str	r3, [sp, #16]
   18ce8:	ldr	r3, [sp, #164]	; 0xa4
   18cec:	str	r3, [sp, #12]
   18cf0:	mov	r3, #0
   18cf4:	str	r3, [sp, #8]
   18cf8:	ldr	r3, [sp, #156]	; 0x9c
   18cfc:	bic	r3, r3, #2
   18d00:	str	r3, [sp, #4]
   18d04:	str	r7, [sp]
   18d08:	ldr	r3, [sp, #24]
   18d0c:	ldr	r2, [sp, #48]	; 0x30
   18d10:	mov	r1, r8
   18d14:	ldr	r0, [sp, #64]	; 0x40
   18d18:	bl	178a0 <__assert_fail@plt+0x6330>
   18d1c:	mov	fp, r0
   18d20:	mov	r0, fp
   18d24:	add	sp, sp, #116	; 0x74
   18d28:	ldrd	r4, [sp]
   18d2c:	ldrd	r6, [sp, #8]
   18d30:	ldrd	r8, [sp, #16]
   18d34:	ldrd	sl, [sp, #24]
   18d38:	add	sp, sp, #32
   18d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d40:	mov	r8, r9
   18d44:	mov	r7, sl
   18d48:	b	18ce0 <__assert_fail@plt+0x7770>
   18d4c:	add	fp, fp, #4
   18d50:	str	r3, [sp, #36]	; 0x24
   18d54:	mov	r5, #0
   18d58:	mov	r4, #48	; 0x30
   18d5c:	b	18114 <__assert_fail@plt+0x6ba4>
   18d60:	mov	r3, #1
   18d64:	str	r3, [sp, #32]
   18d68:	str	r3, [sp, #28]
   18d6c:	str	r3, [sp, #52]	; 0x34
   18d70:	movw	r3, #54696	; 0xd5a8
   18d74:	movt	r3, #1
   18d78:	str	r3, [sp, #60]	; 0x3c
   18d7c:	mov	fp, #0
   18d80:	mov	sl, #5
   18d84:	b	17978 <__assert_fail@plt+0x6408>
   18d88:	ldr	r3, [sp, #48]	; 0x30
   18d8c:	ldrb	r4, [r3, r6]
   18d90:	cmp	r4, #126	; 0x7e
   18d94:	ldrls	pc, [pc, r4, lsl #2]
   18d98:	b	18684 <__assert_fail@plt+0x7114>
   18d9c:	andeq	r7, r1, ip, lsl #28
   18da0:	andeq	r8, r1, r4, lsl #13
   18da4:	andeq	r8, r1, r4, lsl #13
   18da8:	andeq	r8, r1, r4, lsl #13
   18dac:	andeq	r8, r1, r4, lsl #13
   18db0:	andeq	r8, r1, r4, lsl #13
   18db4:	andeq	r8, r1, r4, lsl #13
   18db8:	andeq	r8, r1, r4, lsl fp
   18dbc:	strheq	r8, [r1], -r0
   18dc0:	andeq	r8, r1, r4, asr r4
   18dc4:	andeq	r8, r1, r0, lsl r5
   18dc8:	andeq	r8, r1, r8, ror #8
   18dcc:	andeq	r8, r1, r4, asr #1
   18dd0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dd4:	andeq	r8, r1, r4, lsl #13
   18dd8:	andeq	r8, r1, r4, lsl #13
   18ddc:	andeq	r8, r1, r4, lsl #13
   18de0:	andeq	r8, r1, r4, lsl #13
   18de4:	andeq	r8, r1, r4, lsl #13
   18de8:	andeq	r8, r1, r4, lsl #13
   18dec:	andeq	r8, r1, r4, lsl #13
   18df0:	andeq	r8, r1, r4, lsl #13
   18df4:	andeq	r8, r1, r4, lsl #13
   18df8:	andeq	r8, r1, r4, lsl #13
   18dfc:	andeq	r8, r1, r4, lsl #13
   18e00:	andeq	r8, r1, r4, lsl #13
   18e04:	andeq	r8, r1, r4, lsl #13
   18e08:	andeq	r8, r1, r4, lsl #13
   18e0c:	andeq	r8, r1, r4, lsl #13
   18e10:	andeq	r8, r1, r4, lsl #13
   18e14:	andeq	r8, r1, r4, lsl #13
   18e18:	andeq	r8, r1, r4, lsl #13
   18e1c:	muleq	r1, r8, r5
   18e20:	ldrdeq	r8, [r1], -r4
   18e24:	ldrdeq	r8, [r1], -r4
   18e28:	andeq	r8, r1, ip, lsl #11
   18e2c:	ldrdeq	r8, [r1], -r4
   18e30:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e34:	ldrdeq	r8, [r1], -r4
   18e38:	andeq	r8, r1, r4, ror #11
   18e3c:	ldrdeq	r8, [r1], -r4
   18e40:	ldrdeq	r8, [r1], -r4
   18e44:	ldrdeq	r8, [r1], -r4
   18e48:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e4c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e50:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e54:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e58:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e5c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e60:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e64:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e68:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e6c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e70:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e74:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e78:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e7c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e80:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e84:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e88:	ldrdeq	r8, [r1], -r4
   18e8c:	ldrdeq	r8, [r1], -r4
   18e90:	ldrdeq	r8, [r1], -r4
   18e94:	ldrdeq	r8, [r1], -r4
   18e98:	andeq	r7, r1, r4, asr #30
   18e9c:	andeq	r8, r1, r4, lsl #13
   18ea0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ea4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ea8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ebc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ecc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18edc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ef0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ef4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ef8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18efc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f00:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f08:	ldrdeq	r8, [r1], -r4
   18f0c:	andeq	r8, r1, ip, ror r4
   18f10:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f14:	ldrdeq	r8, [r1], -r4
   18f18:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f1c:	ldrdeq	r8, [r1], -r4
   18f20:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f24:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f28:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f2c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f30:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f34:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f38:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f3c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f40:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f44:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f48:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f4c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f50:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f54:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f58:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f5c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f60:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f64:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f68:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f6c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f70:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f74:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f78:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f7c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f80:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f84:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f88:	andeq	r8, r1, ip, lsr r5
   18f8c:	ldrdeq	r8, [r1], -r4
   18f90:	andeq	r8, r1, ip, lsr r5
   18f94:	andeq	r8, r1, ip, lsl #11
   18f98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18f9c:	strd	r6, [sp, #8]
   18fa0:	strd	r8, [sp, #16]
   18fa4:	strd	sl, [sp, #24]
   18fa8:	str	lr, [sp, #32]
   18fac:	sub	sp, sp, #52	; 0x34
   18fb0:	mov	r5, r0
   18fb4:	str	r1, [sp, #24]
   18fb8:	str	r2, [sp, #28]
   18fbc:	mov	r4, r3
   18fc0:	bl	113f0 <__errno_location@plt>
   18fc4:	str	r0, [sp, #32]
   18fc8:	ldr	r3, [r0]
   18fcc:	str	r3, [sp, #36]	; 0x24
   18fd0:	movw	r3, #57716	; 0xe174
   18fd4:	movt	r3, #2
   18fd8:	ldr	r6, [r3]
   18fdc:	cmn	r5, #-2147483647	; 0x80000001
   18fe0:	movne	r3, #0
   18fe4:	moveq	r3, #1
   18fe8:	orrs	r3, r3, r5, lsr #31
   18fec:	bne	19150 <__assert_fail@plt+0x7be0>
   18ff0:	movw	r3, #57716	; 0xe174
   18ff4:	movt	r3, #2
   18ff8:	ldr	r2, [r3, #4]
   18ffc:	cmp	r2, r5
   19000:	bgt	19070 <__assert_fail@plt+0x7b00>
   19004:	str	r2, [sp, #44]	; 0x2c
   19008:	add	r3, r3, #8
   1900c:	cmp	r6, r3
   19010:	beq	19154 <__assert_fail@plt+0x7be4>
   19014:	sub	r2, r5, r2
   19018:	mov	r3, #8
   1901c:	str	r3, [sp]
   19020:	mvn	r3, #-2147483648	; 0x80000000
   19024:	add	r2, r2, #1
   19028:	add	r1, sp, #44	; 0x2c
   1902c:	mov	r0, r6
   19030:	bl	1a29c <__assert_fail@plt+0x8d2c>
   19034:	mov	r6, r0
   19038:	movw	r3, #57716	; 0xe174
   1903c:	movt	r3, #2
   19040:	str	r0, [r3]
   19044:	movw	r7, #57716	; 0xe174
   19048:	movt	r7, #2
   1904c:	ldr	r0, [r7, #4]
   19050:	ldr	r2, [sp, #44]	; 0x2c
   19054:	sub	r2, r2, r0
   19058:	lsl	r2, r2, #3
   1905c:	mov	r1, #0
   19060:	add	r0, r6, r0, lsl #3
   19064:	bl	11414 <memset@plt>
   19068:	ldr	r3, [sp, #44]	; 0x2c
   1906c:	str	r3, [r7, #4]
   19070:	add	fp, r6, r5, lsl #3
   19074:	ldr	r8, [r6, r5, lsl #3]
   19078:	ldr	r7, [fp, #4]
   1907c:	ldr	r3, [r4, #4]
   19080:	orr	r9, r3, #1
   19084:	add	sl, r4, #8
   19088:	ldr	r3, [r4, #44]	; 0x2c
   1908c:	str	r3, [sp, #16]
   19090:	ldr	r3, [r4, #40]	; 0x28
   19094:	str	r3, [sp, #12]
   19098:	str	sl, [sp, #8]
   1909c:	str	r9, [sp, #4]
   190a0:	ldr	r3, [r4]
   190a4:	str	r3, [sp]
   190a8:	ldr	r3, [sp, #28]
   190ac:	ldr	r2, [sp, #24]
   190b0:	mov	r1, r8
   190b4:	mov	r0, r7
   190b8:	bl	178a0 <__assert_fail@plt+0x6330>
   190bc:	cmp	r8, r0
   190c0:	bhi	19124 <__assert_fail@plt+0x7bb4>
   190c4:	add	r8, r0, #1
   190c8:	str	r8, [r6, r5, lsl #3]
   190cc:	movw	r3, #58036	; 0xe2b4
   190d0:	movt	r3, #2
   190d4:	cmp	r7, r3
   190d8:	beq	190e4 <__assert_fail@plt+0x7b74>
   190dc:	mov	r0, r7
   190e0:	bl	1ae00 <__assert_fail@plt+0x9890>
   190e4:	mov	r0, r8
   190e8:	bl	1a098 <__assert_fail@plt+0x8b28>
   190ec:	mov	r7, r0
   190f0:	str	r0, [fp, #4]
   190f4:	ldr	r3, [r4, #44]	; 0x2c
   190f8:	str	r3, [sp, #16]
   190fc:	ldr	r3, [r4, #40]	; 0x28
   19100:	str	r3, [sp, #12]
   19104:	str	sl, [sp, #8]
   19108:	str	r9, [sp, #4]
   1910c:	ldr	r3, [r4]
   19110:	str	r3, [sp]
   19114:	ldr	r3, [sp, #28]
   19118:	ldr	r2, [sp, #24]
   1911c:	mov	r1, r8
   19120:	bl	178a0 <__assert_fail@plt+0x6330>
   19124:	ldr	r3, [sp, #32]
   19128:	ldr	r2, [sp, #36]	; 0x24
   1912c:	str	r2, [r3]
   19130:	mov	r0, r7
   19134:	add	sp, sp, #52	; 0x34
   19138:	ldrd	r4, [sp]
   1913c:	ldrd	r6, [sp, #8]
   19140:	ldrd	r8, [sp, #16]
   19144:	ldrd	sl, [sp, #24]
   19148:	add	sp, sp, #32
   1914c:	pop	{pc}		; (ldr pc, [sp], #4)
   19150:	bl	11540 <abort@plt>
   19154:	sub	r2, r5, r2
   19158:	mov	r3, #8
   1915c:	str	r3, [sp]
   19160:	mvn	r3, #-2147483648	; 0x80000000
   19164:	add	r2, r2, #1
   19168:	add	r1, sp, #44	; 0x2c
   1916c:	mov	r0, #0
   19170:	bl	1a29c <__assert_fail@plt+0x8d2c>
   19174:	mov	r6, r0
   19178:	movw	r3, #57716	; 0xe174
   1917c:	movt	r3, #2
   19180:	str	r0, [r3]
   19184:	ldrd	r2, [r3, #8]
   19188:	strd	r2, [r0]
   1918c:	b	19044 <__assert_fail@plt+0x7ad4>
   19190:	strd	r4, [sp, #-16]!
   19194:	str	r6, [sp, #8]
   19198:	str	lr, [sp, #12]
   1919c:	mov	r4, r0
   191a0:	bl	113f0 <__errno_location@plt>
   191a4:	mov	r5, r0
   191a8:	ldr	r6, [r0]
   191ac:	cmp	r4, #0
   191b0:	ldr	r3, [pc, #32]	; 191d8 <__assert_fail@plt+0x7c68>
   191b4:	moveq	r4, r3
   191b8:	mov	r1, #48	; 0x30
   191bc:	mov	r0, r4
   191c0:	bl	1a40c <__assert_fail@plt+0x8e9c>
   191c4:	str	r6, [r5]
   191c8:	ldrd	r4, [sp]
   191cc:	ldr	r6, [sp, #8]
   191d0:	add	sp, sp, #12
   191d4:	pop	{pc}		; (ldr pc, [sp], #4)
   191d8:			; <UNDEFINED> instruction: 0x0002e3b4
   191dc:	subs	r3, r0, #0
   191e0:	ldr	r2, [pc, #8]	; 191f0 <__assert_fail@plt+0x7c80>
   191e4:	moveq	r3, r2
   191e8:	ldr	r0, [r3]
   191ec:	bx	lr
   191f0:			; <UNDEFINED> instruction: 0x0002e3b4
   191f4:	subs	r3, r0, #0
   191f8:	ldr	r2, [pc, #8]	; 19208 <__assert_fail@plt+0x7c98>
   191fc:	moveq	r3, r2
   19200:	str	r1, [r3]
   19204:	bx	lr
   19208:			; <UNDEFINED> instruction: 0x0002e3b4
   1920c:	push	{lr}		; (str lr, [sp, #-4]!)
   19210:	subs	r3, r0, #0
   19214:	ldr	r0, [pc, #44]	; 19248 <__assert_fail@plt+0x7cd8>
   19218:	moveq	r3, r0
   1921c:	add	r3, r3, #8
   19220:	lsr	lr, r1, #5
   19224:	and	r1, r1, #31
   19228:	ldr	ip, [r3, lr, lsl #2]
   1922c:	lsr	r0, ip, r1
   19230:	eor	r2, r2, r0
   19234:	and	r2, r2, #1
   19238:	eor	r1, ip, r2, lsl r1
   1923c:	str	r1, [r3, lr, lsl #2]
   19240:	and	r0, r0, #1
   19244:	pop	{pc}		; (ldr pc, [sp], #4)
   19248:			; <UNDEFINED> instruction: 0x0002e3b4
   1924c:	subs	r3, r0, #0
   19250:	ldr	r2, [pc, #12]	; 19264 <__assert_fail@plt+0x7cf4>
   19254:	moveq	r3, r2
   19258:	ldr	r0, [r3, #4]
   1925c:	str	r1, [r3, #4]
   19260:	bx	lr
   19264:			; <UNDEFINED> instruction: 0x0002e3b4
   19268:	subs	r3, r0, #0
   1926c:	ldr	r0, [pc, #44]	; 192a0 <__assert_fail@plt+0x7d30>
   19270:	moveq	r3, r0
   19274:	mov	r0, #10
   19278:	str	r0, [r3]
   1927c:	cmp	r2, #0
   19280:	cmpne	r1, #0
   19284:	beq	19294 <__assert_fail@plt+0x7d24>
   19288:	str	r1, [r3, #40]	; 0x28
   1928c:	str	r2, [r3, #44]	; 0x2c
   19290:	bx	lr
   19294:	str	r4, [sp, #-8]!
   19298:	str	lr, [sp, #4]
   1929c:	bl	11540 <abort@plt>
   192a0:			; <UNDEFINED> instruction: 0x0002e3b4
   192a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   192a8:	strd	r6, [sp, #8]
   192ac:	strd	r8, [sp, #16]
   192b0:	str	sl, [sp, #24]
   192b4:	str	lr, [sp, #28]
   192b8:	sub	sp, sp, #24
   192bc:	mov	r7, r0
   192c0:	mov	r8, r1
   192c4:	mov	r9, r2
   192c8:	mov	sl, r3
   192cc:	ldr	r4, [sp, #56]	; 0x38
   192d0:	cmp	r4, #0
   192d4:	ldr	r3, [pc, #104]	; 19344 <__assert_fail@plt+0x7dd4>
   192d8:	moveq	r4, r3
   192dc:	bl	113f0 <__errno_location@plt>
   192e0:	mov	r5, r0
   192e4:	ldr	r6, [r0]
   192e8:	ldr	r3, [r4, #44]	; 0x2c
   192ec:	str	r3, [sp, #16]
   192f0:	ldr	r3, [r4, #40]	; 0x28
   192f4:	str	r3, [sp, #12]
   192f8:	add	r3, r4, #8
   192fc:	str	r3, [sp, #8]
   19300:	ldr	r3, [r4, #4]
   19304:	str	r3, [sp, #4]
   19308:	ldr	r3, [r4]
   1930c:	str	r3, [sp]
   19310:	mov	r3, sl
   19314:	mov	r2, r9
   19318:	mov	r1, r8
   1931c:	mov	r0, r7
   19320:	bl	178a0 <__assert_fail@plt+0x6330>
   19324:	str	r6, [r5]
   19328:	add	sp, sp, #24
   1932c:	ldrd	r4, [sp]
   19330:	ldrd	r6, [sp, #8]
   19334:	ldrd	r8, [sp, #16]
   19338:	ldr	sl, [sp, #24]
   1933c:	add	sp, sp, #28
   19340:	pop	{pc}		; (ldr pc, [sp], #4)
   19344:			; <UNDEFINED> instruction: 0x0002e3b4
   19348:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1934c:	strd	r6, [sp, #8]
   19350:	strd	r8, [sp, #16]
   19354:	strd	sl, [sp, #24]
   19358:	str	lr, [sp, #32]
   1935c:	sub	sp, sp, #44	; 0x2c
   19360:	mov	r8, r0
   19364:	mov	sl, r1
   19368:	mov	r6, r2
   1936c:	subs	r4, r3, #0
   19370:	ldr	r3, [pc, #200]	; 19440 <__assert_fail@plt+0x7ed0>
   19374:	moveq	r4, r3
   19378:	bl	113f0 <__errno_location@plt>
   1937c:	mov	r7, r0
   19380:	ldr	fp, [r0]
   19384:	ldr	r5, [r4, #4]
   19388:	cmp	r6, #0
   1938c:	orreq	r5, r5, #1
   19390:	add	r9, r4, #8
   19394:	ldr	r3, [r4, #44]	; 0x2c
   19398:	str	r3, [sp, #16]
   1939c:	ldr	r3, [r4, #40]	; 0x28
   193a0:	str	r3, [sp, #12]
   193a4:	str	r9, [sp, #8]
   193a8:	str	r5, [sp, #4]
   193ac:	ldr	r3, [r4]
   193b0:	str	r3, [sp]
   193b4:	str	sl, [sp, #36]	; 0x24
   193b8:	mov	r3, sl
   193bc:	str	r8, [sp, #32]
   193c0:	mov	r2, r8
   193c4:	mov	r1, #0
   193c8:	mov	r0, r1
   193cc:	bl	178a0 <__assert_fail@plt+0x6330>
   193d0:	mov	sl, r0
   193d4:	add	r8, r0, #1
   193d8:	mov	r0, r8
   193dc:	bl	1a098 <__assert_fail@plt+0x8b28>
   193e0:	str	r0, [sp, #28]
   193e4:	ldr	r3, [r4, #44]	; 0x2c
   193e8:	str	r3, [sp, #16]
   193ec:	ldr	r3, [r4, #40]	; 0x28
   193f0:	str	r3, [sp, #12]
   193f4:	str	r9, [sp, #8]
   193f8:	str	r5, [sp, #4]
   193fc:	ldr	r3, [r4]
   19400:	str	r3, [sp]
   19404:	ldr	r3, [sp, #36]	; 0x24
   19408:	ldr	r2, [sp, #32]
   1940c:	mov	r1, r8
   19410:	bl	178a0 <__assert_fail@plt+0x6330>
   19414:	str	fp, [r7]
   19418:	cmp	r6, #0
   1941c:	strne	sl, [r6]
   19420:	ldr	r0, [sp, #28]
   19424:	add	sp, sp, #44	; 0x2c
   19428:	ldrd	r4, [sp]
   1942c:	ldrd	r6, [sp, #8]
   19430:	ldrd	r8, [sp, #16]
   19434:	ldrd	sl, [sp, #24]
   19438:	add	sp, sp, #32
   1943c:	pop	{pc}		; (ldr pc, [sp], #4)
   19440:			; <UNDEFINED> instruction: 0x0002e3b4
   19444:	str	r4, [sp, #-8]!
   19448:	str	lr, [sp, #4]
   1944c:	mov	r3, r2
   19450:	mov	r2, #0
   19454:	bl	19348 <__assert_fail@plt+0x7dd8>
   19458:	ldr	r4, [sp]
   1945c:	add	sp, sp, #4
   19460:	pop	{pc}		; (ldr pc, [sp], #4)
   19464:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19468:	strd	r6, [sp, #8]
   1946c:	str	r8, [sp, #16]
   19470:	str	lr, [sp, #20]
   19474:	movw	r3, #57716	; 0xe174
   19478:	movt	r3, #2
   1947c:	ldr	r7, [r3]
   19480:	ldr	r3, [r3, #4]
   19484:	cmp	r3, #1
   19488:	ble	194b4 <__assert_fail@plt+0x7f44>
   1948c:	mov	r4, #1
   19490:	add	r6, r7, #4
   19494:	movw	r5, #57716	; 0xe174
   19498:	movt	r5, #2
   1949c:	ldr	r0, [r6, r4, lsl #3]
   194a0:	bl	1ae00 <__assert_fail@plt+0x9890>
   194a4:	add	r4, r4, #1
   194a8:	ldr	r3, [r5, #4]
   194ac:	cmp	r3, r4
   194b0:	bgt	1949c <__assert_fail@plt+0x7f2c>
   194b4:	ldr	r0, [r7, #4]
   194b8:	movw	r3, #58036	; 0xe2b4
   194bc:	movt	r3, #2
   194c0:	cmp	r0, r3
   194c4:	beq	194e8 <__assert_fail@plt+0x7f78>
   194c8:	bl	1ae00 <__assert_fail@plt+0x9890>
   194cc:	movw	r3, #57716	; 0xe174
   194d0:	movt	r3, #2
   194d4:	mov	r2, #256	; 0x100
   194d8:	str	r2, [r3, #8]
   194dc:	movw	r2, #58036	; 0xe2b4
   194e0:	movt	r2, #2
   194e4:	str	r2, [r3, #12]
   194e8:	ldr	r3, [pc, #64]	; 19530 <__assert_fail@plt+0x7fc0>
   194ec:	cmp	r7, r3
   194f0:	beq	1950c <__assert_fail@plt+0x7f9c>
   194f4:	mov	r0, r7
   194f8:	bl	1ae00 <__assert_fail@plt+0x9890>
   194fc:	movw	r3, #57716	; 0xe174
   19500:	movt	r3, #2
   19504:	add	r2, r3, #8
   19508:	str	r2, [r3]
   1950c:	movw	r3, #57716	; 0xe174
   19510:	movt	r3, #2
   19514:	mov	r2, #1
   19518:	str	r2, [r3, #4]
   1951c:	ldrd	r4, [sp]
   19520:	ldrd	r6, [sp, #8]
   19524:	ldr	r8, [sp, #16]
   19528:	add	sp, sp, #20
   1952c:	pop	{pc}		; (ldr pc, [sp], #4)
   19530:	andeq	lr, r2, ip, ror r1
   19534:	str	r4, [sp, #-8]!
   19538:	str	lr, [sp, #4]
   1953c:	ldr	r3, [pc, #16]	; 19554 <__assert_fail@plt+0x7fe4>
   19540:	mvn	r2, #0
   19544:	bl	18f98 <__assert_fail@plt+0x7a28>
   19548:	ldr	r4, [sp]
   1954c:	add	sp, sp, #4
   19550:	pop	{pc}		; (ldr pc, [sp], #4)
   19554:			; <UNDEFINED> instruction: 0x0002e3b4
   19558:	str	r4, [sp, #-8]!
   1955c:	str	lr, [sp, #4]
   19560:	ldr	r3, [pc, #12]	; 19574 <__assert_fail@plt+0x8004>
   19564:	bl	18f98 <__assert_fail@plt+0x7a28>
   19568:	ldr	r4, [sp]
   1956c:	add	sp, sp, #4
   19570:	pop	{pc}		; (ldr pc, [sp], #4)
   19574:			; <UNDEFINED> instruction: 0x0002e3b4
   19578:	str	r4, [sp, #-8]!
   1957c:	str	lr, [sp, #4]
   19580:	mov	r1, r0
   19584:	mov	r0, #0
   19588:	bl	19534 <__assert_fail@plt+0x7fc4>
   1958c:	ldr	r4, [sp]
   19590:	add	sp, sp, #4
   19594:	pop	{pc}		; (ldr pc, [sp], #4)
   19598:	str	r4, [sp, #-8]!
   1959c:	str	lr, [sp, #4]
   195a0:	mov	r2, r1
   195a4:	mov	r1, r0
   195a8:	mov	r0, #0
   195ac:	bl	19558 <__assert_fail@plt+0x7fe8>
   195b0:	ldr	r4, [sp]
   195b4:	add	sp, sp, #4
   195b8:	pop	{pc}		; (ldr pc, [sp], #4)
   195bc:	strd	r4, [sp, #-12]!
   195c0:	str	lr, [sp, #8]
   195c4:	sub	sp, sp, #52	; 0x34
   195c8:	mov	r4, r0
   195cc:	mov	r5, r2
   195d0:	mov	r0, sp
   195d4:	bl	1770c <__assert_fail@plt+0x619c>
   195d8:	mov	r3, sp
   195dc:	mvn	r2, #0
   195e0:	mov	r1, r5
   195e4:	mov	r0, r4
   195e8:	bl	18f98 <__assert_fail@plt+0x7a28>
   195ec:	add	sp, sp, #52	; 0x34
   195f0:	ldrd	r4, [sp]
   195f4:	add	sp, sp, #8
   195f8:	pop	{pc}		; (ldr pc, [sp], #4)
   195fc:	strd	r4, [sp, #-16]!
   19600:	str	r6, [sp, #8]
   19604:	str	lr, [sp, #12]
   19608:	sub	sp, sp, #48	; 0x30
   1960c:	mov	r4, r0
   19610:	mov	r5, r2
   19614:	mov	r6, r3
   19618:	mov	r0, sp
   1961c:	bl	1770c <__assert_fail@plt+0x619c>
   19620:	mov	r3, sp
   19624:	mov	r2, r6
   19628:	mov	r1, r5
   1962c:	mov	r0, r4
   19630:	bl	18f98 <__assert_fail@plt+0x7a28>
   19634:	add	sp, sp, #48	; 0x30
   19638:	ldrd	r4, [sp]
   1963c:	ldr	r6, [sp, #8]
   19640:	add	sp, sp, #12
   19644:	pop	{pc}		; (ldr pc, [sp], #4)
   19648:	str	r4, [sp, #-8]!
   1964c:	str	lr, [sp, #4]
   19650:	mov	r2, r1
   19654:	mov	r1, r0
   19658:	mov	r0, #0
   1965c:	bl	195bc <__assert_fail@plt+0x804c>
   19660:	ldr	r4, [sp]
   19664:	add	sp, sp, #4
   19668:	pop	{pc}		; (ldr pc, [sp], #4)
   1966c:	str	r4, [sp, #-8]!
   19670:	str	lr, [sp, #4]
   19674:	mov	r3, r2
   19678:	mov	r2, r1
   1967c:	mov	r1, r0
   19680:	mov	r0, #0
   19684:	bl	195fc <__assert_fail@plt+0x808c>
   19688:	ldr	r4, [sp]
   1968c:	add	sp, sp, #4
   19690:	pop	{pc}		; (ldr pc, [sp], #4)
   19694:	strd	r4, [sp, #-12]!
   19698:	str	lr, [sp, #8]
   1969c:	sub	sp, sp, #52	; 0x34
   196a0:	mov	r4, r0
   196a4:	mov	r5, r1
   196a8:	mov	r1, r2
   196ac:	ldr	r0, [pc, #92]	; 19710 <__assert_fail@plt+0x81a0>
   196b0:	ldrd	r2, [r0]
   196b4:	strd	r2, [sp]
   196b8:	ldrd	r2, [r0, #8]
   196bc:	strd	r2, [sp, #8]
   196c0:	ldrd	r2, [r0, #16]
   196c4:	strd	r2, [sp, #16]
   196c8:	ldrd	r2, [r0, #24]
   196cc:	strd	r2, [sp, #24]
   196d0:	ldrd	r2, [r0, #32]
   196d4:	strd	r2, [sp, #32]
   196d8:	ldrd	r2, [r0, #40]	; 0x28
   196dc:	strd	r2, [sp, #40]	; 0x28
   196e0:	mov	r2, #1
   196e4:	mov	r0, sp
   196e8:	bl	1920c <__assert_fail@plt+0x7c9c>
   196ec:	mov	r3, sp
   196f0:	mov	r2, r5
   196f4:	mov	r1, r4
   196f8:	mov	r0, #0
   196fc:	bl	18f98 <__assert_fail@plt+0x7a28>
   19700:	add	sp, sp, #52	; 0x34
   19704:	ldrd	r4, [sp]
   19708:	add	sp, sp, #8
   1970c:	pop	{pc}		; (ldr pc, [sp], #4)
   19710:			; <UNDEFINED> instruction: 0x0002e3b4
   19714:	str	r4, [sp, #-8]!
   19718:	str	lr, [sp, #4]
   1971c:	mov	r2, r1
   19720:	mvn	r1, #0
   19724:	bl	19694 <__assert_fail@plt+0x8124>
   19728:	ldr	r4, [sp]
   1972c:	add	sp, sp, #4
   19730:	pop	{pc}		; (ldr pc, [sp], #4)
   19734:	str	r4, [sp, #-8]!
   19738:	str	lr, [sp, #4]
   1973c:	mov	r1, #58	; 0x3a
   19740:	bl	19714 <__assert_fail@plt+0x81a4>
   19744:	ldr	r4, [sp]
   19748:	add	sp, sp, #4
   1974c:	pop	{pc}		; (ldr pc, [sp], #4)
   19750:	str	r4, [sp, #-8]!
   19754:	str	lr, [sp, #4]
   19758:	mov	r2, #58	; 0x3a
   1975c:	bl	19694 <__assert_fail@plt+0x8124>
   19760:	ldr	r4, [sp]
   19764:	add	sp, sp, #4
   19768:	pop	{pc}		; (ldr pc, [sp], #4)
   1976c:	strd	r4, [sp, #-12]!
   19770:	str	lr, [sp, #8]
   19774:	sub	sp, sp, #100	; 0x64
   19778:	mov	r4, r0
   1977c:	mov	r5, r2
   19780:	mov	r0, sp
   19784:	bl	1770c <__assert_fail@plt+0x619c>
   19788:	ldrd	r2, [sp]
   1978c:	strd	r2, [sp, #48]	; 0x30
   19790:	ldrd	r2, [sp, #8]
   19794:	strd	r2, [sp, #56]	; 0x38
   19798:	ldrd	r2, [sp, #16]
   1979c:	strd	r2, [sp, #64]	; 0x40
   197a0:	ldrd	r2, [sp, #24]
   197a4:	strd	r2, [sp, #72]	; 0x48
   197a8:	ldrd	r2, [sp, #32]
   197ac:	strd	r2, [sp, #80]	; 0x50
   197b0:	ldrd	r2, [sp, #40]	; 0x28
   197b4:	strd	r2, [sp, #88]	; 0x58
   197b8:	mov	r2, #1
   197bc:	mov	r1, #58	; 0x3a
   197c0:	add	r0, sp, #48	; 0x30
   197c4:	bl	1920c <__assert_fail@plt+0x7c9c>
   197c8:	add	r3, sp, #48	; 0x30
   197cc:	mvn	r2, #0
   197d0:	mov	r1, r5
   197d4:	mov	r0, r4
   197d8:	bl	18f98 <__assert_fail@plt+0x7a28>
   197dc:	add	sp, sp, #100	; 0x64
   197e0:	ldrd	r4, [sp]
   197e4:	add	sp, sp, #8
   197e8:	pop	{pc}		; (ldr pc, [sp], #4)
   197ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   197f0:	strd	r6, [sp, #8]
   197f4:	str	lr, [sp, #16]
   197f8:	sub	sp, sp, #52	; 0x34
   197fc:	mov	r4, r0
   19800:	mov	r5, r3
   19804:	ldr	r3, [pc, #92]	; 19868 <__assert_fail@plt+0x82f8>
   19808:	ldrd	r6, [r3]
   1980c:	strd	r6, [sp]
   19810:	ldrd	r6, [r3, #8]
   19814:	strd	r6, [sp, #8]
   19818:	ldrd	r6, [r3, #16]
   1981c:	strd	r6, [sp, #16]
   19820:	ldrd	r6, [r3, #24]
   19824:	strd	r6, [sp, #24]
   19828:	ldrd	r6, [r3, #32]
   1982c:	strd	r6, [sp, #32]
   19830:	ldrd	r6, [r3, #40]	; 0x28
   19834:	strd	r6, [sp, #40]	; 0x28
   19838:	mov	r0, sp
   1983c:	bl	19268 <__assert_fail@plt+0x7cf8>
   19840:	mov	r3, sp
   19844:	ldr	r2, [sp, #72]	; 0x48
   19848:	mov	r1, r5
   1984c:	mov	r0, r4
   19850:	bl	18f98 <__assert_fail@plt+0x7a28>
   19854:	add	sp, sp, #52	; 0x34
   19858:	ldrd	r4, [sp]
   1985c:	ldrd	r6, [sp, #8]
   19860:	add	sp, sp, #16
   19864:	pop	{pc}		; (ldr pc, [sp], #4)
   19868:			; <UNDEFINED> instruction: 0x0002e3b4
   1986c:	push	{lr}		; (str lr, [sp, #-4]!)
   19870:	sub	sp, sp, #12
   19874:	mvn	ip, #0
   19878:	str	ip, [sp]
   1987c:	bl	197ec <__assert_fail@plt+0x827c>
   19880:	add	sp, sp, #12
   19884:	pop	{pc}		; (ldr pc, [sp], #4)
   19888:	str	r4, [sp, #-8]!
   1988c:	str	lr, [sp, #4]
   19890:	mov	r3, r2
   19894:	mov	r2, r1
   19898:	mov	r1, r0
   1989c:	mov	r0, #0
   198a0:	bl	1986c <__assert_fail@plt+0x82fc>
   198a4:	ldr	r4, [sp]
   198a8:	add	sp, sp, #4
   198ac:	pop	{pc}		; (ldr pc, [sp], #4)
   198b0:	push	{lr}		; (str lr, [sp, #-4]!)
   198b4:	sub	sp, sp, #12
   198b8:	str	r3, [sp]
   198bc:	mov	r3, r2
   198c0:	mov	r2, r1
   198c4:	mov	r1, r0
   198c8:	mov	r0, #0
   198cc:	bl	197ec <__assert_fail@plt+0x827c>
   198d0:	add	sp, sp, #12
   198d4:	pop	{pc}		; (ldr pc, [sp], #4)
   198d8:	str	r4, [sp, #-8]!
   198dc:	str	lr, [sp, #4]
   198e0:	ldr	r3, [pc, #12]	; 198f4 <__assert_fail@plt+0x8384>
   198e4:	bl	18f98 <__assert_fail@plt+0x7a28>
   198e8:	ldr	r4, [sp]
   198ec:	add	sp, sp, #4
   198f0:	pop	{pc}		; (ldr pc, [sp], #4)
   198f4:	andeq	lr, r2, r4, lsl #3
   198f8:	str	r4, [sp, #-8]!
   198fc:	str	lr, [sp, #4]
   19900:	mov	r2, r1
   19904:	mov	r1, r0
   19908:	mov	r0, #0
   1990c:	bl	198d8 <__assert_fail@plt+0x8368>
   19910:	ldr	r4, [sp]
   19914:	add	sp, sp, #4
   19918:	pop	{pc}		; (ldr pc, [sp], #4)
   1991c:	str	r4, [sp, #-8]!
   19920:	str	lr, [sp, #4]
   19924:	mvn	r2, #0
   19928:	bl	198d8 <__assert_fail@plt+0x8368>
   1992c:	ldr	r4, [sp]
   19930:	add	sp, sp, #4
   19934:	pop	{pc}		; (ldr pc, [sp], #4)
   19938:	str	r4, [sp, #-8]!
   1993c:	str	lr, [sp, #4]
   19940:	mov	r1, r0
   19944:	mov	r0, #0
   19948:	bl	1991c <__assert_fail@plt+0x83ac>
   1994c:	ldr	r4, [sp]
   19950:	add	sp, sp, #4
   19954:	pop	{pc}		; (ldr pc, [sp], #4)
   19958:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1995c:	strd	r6, [sp, #8]
   19960:	strd	r8, [sp, #16]
   19964:	str	sl, [sp, #24]
   19968:	str	lr, [sp, #28]
   1996c:	mov	r8, r0
   19970:	mov	r7, r1
   19974:	mov	r9, r2
   19978:	mov	r5, #0
   1997c:	movt	r5, #32752	; 0x7ff0
   19980:	b	19988 <__assert_fail@plt+0x8418>
   19984:	mov	r9, r5
   19988:	mov	r2, r9
   1998c:	mov	r1, r7
   19990:	mov	r0, r8
   19994:	bl	111d4 <read@plt>
   19998:	subs	r6, r0, #0
   1999c:	bge	199e8 <__assert_fail@plt+0x8478>
   199a0:	bl	113f0 <__errno_location@plt>
   199a4:	ldr	r3, [r0]
   199a8:	cmp	r3, #4
   199ac:	beq	19988 <__assert_fail@plt+0x8418>
   199b0:	cmp	r9, r5
   199b4:	movls	r4, #0
   199b8:	movhi	r4, #1
   199bc:	cmp	r3, #22
   199c0:	movne	r4, #0
   199c4:	cmp	r4, #0
   199c8:	bne	19984 <__assert_fail@plt+0x8414>
   199cc:	mov	r0, r6
   199d0:	ldrd	r4, [sp]
   199d4:	ldrd	r6, [sp, #8]
   199d8:	ldrd	r8, [sp, #16]
   199dc:	ldr	sl, [sp, #24]
   199e0:	add	sp, sp, #28
   199e4:	pop	{pc}		; (ldr pc, [sp], #4)
   199e8:	mov	r0, r6
   199ec:	b	199d0 <__assert_fail@plt+0x8460>
   199f0:	strd	r4, [sp, #-16]!
   199f4:	str	r6, [sp, #8]
   199f8:	str	lr, [sp, #12]
   199fc:	mov	r5, r0
   19a00:	mov	r4, r1
   19a04:	mov	r2, r1
   19a08:	mov	r1, #0
   19a0c:	bl	11444 <memchr@plt>
   19a10:	cmp	r0, #0
   19a14:	subne	r0, r0, r5
   19a18:	addne	r0, r0, #1
   19a1c:	moveq	r0, r4
   19a20:	ldrd	r4, [sp]
   19a24:	ldr	r6, [sp, #8]
   19a28:	add	sp, sp, #12
   19a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a34:	strd	r6, [sp, #8]
   19a38:	str	r8, [sp, #16]
   19a3c:	str	lr, [sp, #20]
   19a40:	mov	r4, r0
   19a44:	cmp	r0, #2
   19a48:	bls	19a64 <__assert_fail@plt+0x84f4>
   19a4c:	mov	r0, r4
   19a50:	ldrd	r4, [sp]
   19a54:	ldrd	r6, [sp, #8]
   19a58:	ldr	r8, [sp, #16]
   19a5c:	add	sp, sp, #20
   19a60:	pop	{pc}		; (ldr pc, [sp], #4)
   19a64:	bl	1b5b8 <__assert_fail@plt+0xa048>
   19a68:	mov	r6, r0
   19a6c:	bl	113f0 <__errno_location@plt>
   19a70:	mov	r5, r0
   19a74:	ldr	r7, [r0]
   19a78:	mov	r0, r4
   19a7c:	bl	11558 <close@plt>
   19a80:	str	r7, [r5]
   19a84:	mov	r4, r6
   19a88:	b	19a4c <__assert_fail@plt+0x84dc>
   19a8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a90:	strd	r6, [sp, #8]
   19a94:	str	r8, [sp, #16]
   19a98:	str	lr, [sp, #20]
   19a9c:	mov	r4, r0
   19aa0:	bl	11468 <pipe@plt>
   19aa4:	subs	r5, r0, #0
   19aa8:	bne	19b14 <__assert_fail@plt+0x85a4>
   19aac:	ldr	r0, [r4]
   19ab0:	bl	19a30 <__assert_fail@plt+0x84c0>
   19ab4:	str	r0, [r4]
   19ab8:	cmp	r0, #0
   19abc:	blt	19af0 <__assert_fail@plt+0x8580>
   19ac0:	ldr	r0, [r4, #4]
   19ac4:	bl	19a30 <__assert_fail@plt+0x84c0>
   19ac8:	str	r0, [r4, #4]
   19acc:	cmp	r0, #0
   19ad0:	blt	19aec <__assert_fail@plt+0x857c>
   19ad4:	mov	r0, r5
   19ad8:	ldrd	r4, [sp]
   19adc:	ldrd	r6, [sp, #8]
   19ae0:	ldr	r8, [sp, #16]
   19ae4:	add	sp, sp, #20
   19ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   19aec:	mov	r5, #1
   19af0:	bl	113f0 <__errno_location@plt>
   19af4:	mov	r6, r0
   19af8:	ldr	r7, [r0]
   19afc:	rsb	r5, r5, #1
   19b00:	ldr	r0, [r4, r5, lsl #2]
   19b04:	bl	11558 <close@plt>
   19b08:	str	r7, [r6]
   19b0c:	mvn	r5, #0
   19b10:	b	19ad4 <__assert_fail@plt+0x8564>
   19b14:	mvn	r5, #0
   19b18:	b	19ad4 <__assert_fail@plt+0x8564>
   19b1c:	strd	r4, [sp, #-16]!
   19b20:	str	r6, [sp, #8]
   19b24:	str	lr, [sp, #12]
   19b28:	sub	sp, sp, #32
   19b2c:	mov	r4, r0
   19b30:	ldr	r5, [sp, #48]	; 0x30
   19b34:	ldr	r6, [sp, #52]	; 0x34
   19b38:	cmp	r1, #0
   19b3c:	beq	19bf8 <__assert_fail@plt+0x8688>
   19b40:	str	r3, [sp]
   19b44:	mov	r3, r2
   19b48:	mov	r2, r1
   19b4c:	movw	r1, #54824	; 0xd628
   19b50:	movt	r1, #1
   19b54:	bl	113e4 <fprintf@plt>
   19b58:	mov	r2, #5
   19b5c:	movw	r1, #54844	; 0xd63c
   19b60:	movt	r1, #1
   19b64:	mov	r0, #0
   19b68:	bl	11258 <dcgettext@plt>
   19b6c:	movw	r3, #2022	; 0x7e6
   19b70:	mov	r2, r0
   19b74:	movw	r1, #55548	; 0xd8fc
   19b78:	movt	r1, #1
   19b7c:	mov	r0, r4
   19b80:	bl	113e4 <fprintf@plt>
   19b84:	mov	r1, r4
   19b88:	mov	r0, #10
   19b8c:	bl	114c8 <fputc@plt>
   19b90:	mov	r2, #5
   19b94:	movw	r1, #54848	; 0xd640
   19b98:	movt	r1, #1
   19b9c:	mov	r0, #0
   19ba0:	bl	11258 <dcgettext@plt>
   19ba4:	movw	r2, #55020	; 0xd6ec
   19ba8:	movt	r2, #1
   19bac:	mov	r1, r0
   19bb0:	mov	r0, r4
   19bb4:	bl	113e4 <fprintf@plt>
   19bb8:	mov	r1, r4
   19bbc:	mov	r0, #10
   19bc0:	bl	114c8 <fputc@plt>
   19bc4:	cmp	r6, #9
   19bc8:	ldrls	pc, [pc, r6, lsl #2]
   19bcc:	b	19e80 <__assert_fail@plt+0x8910>
   19bd0:	andeq	r9, r1, ip, lsr #24
   19bd4:	andeq	r9, r1, r8, lsl #24
   19bd8:	andeq	r9, r1, r0, asr #24
   19bdc:	andeq	r9, r1, ip, ror #24
   19be0:	andeq	r9, r1, r0, lsr #25
   19be4:	ldrdeq	r9, [r1], -ip
   19be8:	andeq	r9, r1, r0, lsr #26
   19bec:	andeq	r9, r1, ip, ror #26
   19bf0:	andeq	r9, r1, r0, asr #27
   19bf4:	andeq	r9, r1, ip, lsl lr
   19bf8:	movw	r1, #54836	; 0xd634
   19bfc:	movt	r1, #1
   19c00:	bl	113e4 <fprintf@plt>
   19c04:	b	19b58 <__assert_fail@plt+0x85e8>
   19c08:	mov	r2, #5
   19c0c:	movw	r1, #55056	; 0xd710
   19c10:	movt	r1, #1
   19c14:	mov	r0, #0
   19c18:	bl	11258 <dcgettext@plt>
   19c1c:	ldr	r2, [r5]
   19c20:	mov	r1, r0
   19c24:	mov	r0, r4
   19c28:	bl	113e4 <fprintf@plt>
   19c2c:	add	sp, sp, #32
   19c30:	ldrd	r4, [sp]
   19c34:	ldr	r6, [sp, #8]
   19c38:	add	sp, sp, #12
   19c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c40:	mov	r2, #5
   19c44:	movw	r1, #55072	; 0xd720
   19c48:	movt	r1, #1
   19c4c:	mov	r0, #0
   19c50:	bl	11258 <dcgettext@plt>
   19c54:	ldr	r3, [r5, #4]
   19c58:	ldr	r2, [r5]
   19c5c:	mov	r1, r0
   19c60:	mov	r0, r4
   19c64:	bl	113e4 <fprintf@plt>
   19c68:	b	19c2c <__assert_fail@plt+0x86bc>
   19c6c:	mov	r2, #5
   19c70:	movw	r1, #55096	; 0xd738
   19c74:	movt	r1, #1
   19c78:	mov	r0, #0
   19c7c:	bl	11258 <dcgettext@plt>
   19c80:	ldr	r3, [r5, #8]
   19c84:	str	r3, [sp]
   19c88:	ldr	r3, [r5, #4]
   19c8c:	ldr	r2, [r5]
   19c90:	mov	r1, r0
   19c94:	mov	r0, r4
   19c98:	bl	113e4 <fprintf@plt>
   19c9c:	b	19c2c <__assert_fail@plt+0x86bc>
   19ca0:	mov	r2, #5
   19ca4:	movw	r1, #55124	; 0xd754
   19ca8:	movt	r1, #1
   19cac:	mov	r0, #0
   19cb0:	bl	11258 <dcgettext@plt>
   19cb4:	ldr	r3, [r5, #12]
   19cb8:	str	r3, [sp, #4]
   19cbc:	ldr	r3, [r5, #8]
   19cc0:	str	r3, [sp]
   19cc4:	ldr	r3, [r5, #4]
   19cc8:	ldr	r2, [r5]
   19ccc:	mov	r1, r0
   19cd0:	mov	r0, r4
   19cd4:	bl	113e4 <fprintf@plt>
   19cd8:	b	19c2c <__assert_fail@plt+0x86bc>
   19cdc:	mov	r2, #5
   19ce0:	movw	r1, #55156	; 0xd774
   19ce4:	movt	r1, #1
   19ce8:	mov	r0, #0
   19cec:	bl	11258 <dcgettext@plt>
   19cf0:	ldr	r3, [r5, #16]
   19cf4:	str	r3, [sp, #8]
   19cf8:	ldr	r3, [r5, #12]
   19cfc:	str	r3, [sp, #4]
   19d00:	ldr	r3, [r5, #8]
   19d04:	str	r3, [sp]
   19d08:	ldr	r3, [r5, #4]
   19d0c:	ldr	r2, [r5]
   19d10:	mov	r1, r0
   19d14:	mov	r0, r4
   19d18:	bl	113e4 <fprintf@plt>
   19d1c:	b	19c2c <__assert_fail@plt+0x86bc>
   19d20:	mov	r2, #5
   19d24:	movw	r1, #55192	; 0xd798
   19d28:	movt	r1, #1
   19d2c:	mov	r0, #0
   19d30:	bl	11258 <dcgettext@plt>
   19d34:	ldr	r3, [r5, #20]
   19d38:	str	r3, [sp, #12]
   19d3c:	ldr	r3, [r5, #16]
   19d40:	str	r3, [sp, #8]
   19d44:	ldr	r3, [r5, #12]
   19d48:	str	r3, [sp, #4]
   19d4c:	ldr	r3, [r5, #8]
   19d50:	str	r3, [sp]
   19d54:	ldr	r3, [r5, #4]
   19d58:	ldr	r2, [r5]
   19d5c:	mov	r1, r0
   19d60:	mov	r0, r4
   19d64:	bl	113e4 <fprintf@plt>
   19d68:	b	19c2c <__assert_fail@plt+0x86bc>
   19d6c:	mov	r2, #5
   19d70:	movw	r1, #55232	; 0xd7c0
   19d74:	movt	r1, #1
   19d78:	mov	r0, #0
   19d7c:	bl	11258 <dcgettext@plt>
   19d80:	ldr	r3, [r5, #24]
   19d84:	str	r3, [sp, #16]
   19d88:	ldr	r3, [r5, #20]
   19d8c:	str	r3, [sp, #12]
   19d90:	ldr	r3, [r5, #16]
   19d94:	str	r3, [sp, #8]
   19d98:	ldr	r3, [r5, #12]
   19d9c:	str	r3, [sp, #4]
   19da0:	ldr	r3, [r5, #8]
   19da4:	str	r3, [sp]
   19da8:	ldr	r3, [r5, #4]
   19dac:	ldr	r2, [r5]
   19db0:	mov	r1, r0
   19db4:	mov	r0, r4
   19db8:	bl	113e4 <fprintf@plt>
   19dbc:	b	19c2c <__assert_fail@plt+0x86bc>
   19dc0:	mov	r2, #5
   19dc4:	movw	r1, #55276	; 0xd7ec
   19dc8:	movt	r1, #1
   19dcc:	mov	r0, #0
   19dd0:	bl	11258 <dcgettext@plt>
   19dd4:	ldr	r3, [r5, #28]
   19dd8:	str	r3, [sp, #20]
   19ddc:	ldr	r3, [r5, #24]
   19de0:	str	r3, [sp, #16]
   19de4:	ldr	r3, [r5, #20]
   19de8:	str	r3, [sp, #12]
   19dec:	ldr	r3, [r5, #16]
   19df0:	str	r3, [sp, #8]
   19df4:	ldr	r3, [r5, #12]
   19df8:	str	r3, [sp, #4]
   19dfc:	ldr	r3, [r5, #8]
   19e00:	str	r3, [sp]
   19e04:	ldr	r3, [r5, #4]
   19e08:	ldr	r2, [r5]
   19e0c:	mov	r1, r0
   19e10:	mov	r0, r4
   19e14:	bl	113e4 <fprintf@plt>
   19e18:	b	19c2c <__assert_fail@plt+0x86bc>
   19e1c:	mov	r2, #5
   19e20:	movw	r1, #55324	; 0xd81c
   19e24:	movt	r1, #1
   19e28:	mov	r0, #0
   19e2c:	bl	11258 <dcgettext@plt>
   19e30:	ldr	r3, [r5, #32]
   19e34:	str	r3, [sp, #24]
   19e38:	ldr	r3, [r5, #28]
   19e3c:	str	r3, [sp, #20]
   19e40:	ldr	r3, [r5, #24]
   19e44:	str	r3, [sp, #16]
   19e48:	ldr	r3, [r5, #20]
   19e4c:	str	r3, [sp, #12]
   19e50:	ldr	r3, [r5, #16]
   19e54:	str	r3, [sp, #8]
   19e58:	ldr	r3, [r5, #12]
   19e5c:	str	r3, [sp, #4]
   19e60:	ldr	r3, [r5, #8]
   19e64:	str	r3, [sp]
   19e68:	ldr	r3, [r5, #4]
   19e6c:	ldr	r2, [r5]
   19e70:	mov	r1, r0
   19e74:	mov	r0, r4
   19e78:	bl	113e4 <fprintf@plt>
   19e7c:	b	19c2c <__assert_fail@plt+0x86bc>
   19e80:	mov	r2, #5
   19e84:	movw	r1, #55376	; 0xd850
   19e88:	movt	r1, #1
   19e8c:	mov	r0, #0
   19e90:	bl	11258 <dcgettext@plt>
   19e94:	ldr	r3, [r5, #32]
   19e98:	str	r3, [sp, #24]
   19e9c:	ldr	r3, [r5, #28]
   19ea0:	str	r3, [sp, #20]
   19ea4:	ldr	r3, [r5, #24]
   19ea8:	str	r3, [sp, #16]
   19eac:	ldr	r3, [r5, #20]
   19eb0:	str	r3, [sp, #12]
   19eb4:	ldr	r3, [r5, #16]
   19eb8:	str	r3, [sp, #8]
   19ebc:	ldr	r3, [r5, #12]
   19ec0:	str	r3, [sp, #4]
   19ec4:	ldr	r3, [r5, #8]
   19ec8:	str	r3, [sp]
   19ecc:	ldr	r3, [r5, #4]
   19ed0:	ldr	r2, [r5]
   19ed4:	mov	r1, r0
   19ed8:	mov	r0, r4
   19edc:	bl	113e4 <fprintf@plt>
   19ee0:	b	19c2c <__assert_fail@plt+0x86bc>
   19ee4:	strd	r4, [sp, #-12]!
   19ee8:	str	lr, [sp, #8]
   19eec:	sub	sp, sp, #12
   19ef0:	ldr	r5, [sp, #24]
   19ef4:	ldr	ip, [r5]
   19ef8:	cmp	ip, #0
   19efc:	beq	19f34 <__assert_fail@plt+0x89c4>
   19f00:	mov	lr, r5
   19f04:	mov	ip, #0
   19f08:	add	ip, ip, #1
   19f0c:	ldr	r4, [lr, #4]!
   19f10:	cmp	r4, #0
   19f14:	bne	19f08 <__assert_fail@plt+0x8998>
   19f18:	str	ip, [sp, #4]
   19f1c:	str	r5, [sp]
   19f20:	bl	19b1c <__assert_fail@plt+0x85ac>
   19f24:	add	sp, sp, #12
   19f28:	ldrd	r4, [sp]
   19f2c:	add	sp, sp, #8
   19f30:	pop	{pc}		; (ldr pc, [sp], #4)
   19f34:	mov	ip, #0
   19f38:	b	19f18 <__assert_fail@plt+0x89a8>
   19f3c:	strd	r4, [sp, #-12]!
   19f40:	str	lr, [sp, #8]
   19f44:	sub	sp, sp, #52	; 0x34
   19f48:	ldr	r5, [sp, #64]	; 0x40
   19f4c:	add	r4, sp, #8
   19f50:	mov	ip, #0
   19f54:	ldr	lr, [r5], #4
   19f58:	str	lr, [r4], #4
   19f5c:	cmp	lr, #0
   19f60:	beq	19f70 <__assert_fail@plt+0x8a00>
   19f64:	add	ip, ip, #1
   19f68:	cmp	ip, #10
   19f6c:	bne	19f54 <__assert_fail@plt+0x89e4>
   19f70:	str	ip, [sp, #4]
   19f74:	add	ip, sp, #8
   19f78:	str	ip, [sp]
   19f7c:	bl	19b1c <__assert_fail@plt+0x85ac>
   19f80:	add	sp, sp, #52	; 0x34
   19f84:	ldrd	r4, [sp]
   19f88:	add	sp, sp, #8
   19f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f90:	push	{r3}		; (str r3, [sp, #-4]!)
   19f94:	push	{lr}		; (str lr, [sp, #-4]!)
   19f98:	sub	sp, sp, #16
   19f9c:	add	r3, sp, #24
   19fa0:	str	r3, [sp, #12]
   19fa4:	str	r3, [sp]
   19fa8:	ldr	r3, [sp, #20]
   19fac:	bl	19f3c <__assert_fail@plt+0x89cc>
   19fb0:	add	sp, sp, #16
   19fb4:	pop	{lr}		; (ldr lr, [sp], #4)
   19fb8:	add	sp, sp, #4
   19fbc:	bx	lr
   19fc0:	str	r4, [sp, #-8]!
   19fc4:	str	lr, [sp, #4]
   19fc8:	movw	r3, #57820	; 0xe1dc
   19fcc:	movt	r3, #2
   19fd0:	ldr	r1, [r3]
   19fd4:	mov	r0, #10
   19fd8:	bl	114c8 <fputc@plt>
   19fdc:	mov	r2, #5
   19fe0:	movw	r1, #55436	; 0xd88c
   19fe4:	movt	r1, #1
   19fe8:	mov	r0, #0
   19fec:	bl	11258 <dcgettext@plt>
   19ff0:	movw	r1, #54276	; 0xd404
   19ff4:	movt	r1, #1
   19ff8:	bl	111c8 <printf@plt>
   19ffc:	mov	r2, #5
   1a000:	movw	r1, #55456	; 0xd8a0
   1a004:	movt	r1, #1
   1a008:	mov	r0, #0
   1a00c:	bl	11258 <dcgettext@plt>
   1a010:	movw	r2, #54236	; 0xd3dc
   1a014:	movt	r2, #1
   1a018:	movw	r1, #53944	; 0xd2b8
   1a01c:	movt	r1, #1
   1a020:	bl	111c8 <printf@plt>
   1a024:	mov	r2, #5
   1a028:	movw	r1, #55476	; 0xd8b4
   1a02c:	movt	r1, #1
   1a030:	mov	r0, #0
   1a034:	bl	11258 <dcgettext@plt>
   1a038:	movw	r1, #55516	; 0xd8dc
   1a03c:	movt	r1, #1
   1a040:	bl	111c8 <printf@plt>
   1a044:	ldr	r4, [sp]
   1a048:	add	sp, sp, #4
   1a04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a050:	str	r4, [sp, #-8]!
   1a054:	str	lr, [sp, #4]
   1a058:	bl	1af20 <__assert_fail@plt+0x99b0>
   1a05c:	cmp	r0, #0
   1a060:	beq	1a070 <__assert_fail@plt+0x8b00>
   1a064:	ldr	r4, [sp]
   1a068:	add	sp, sp, #4
   1a06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a070:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a074:	str	r4, [sp, #-8]!
   1a078:	str	lr, [sp, #4]
   1a07c:	bl	1af20 <__assert_fail@plt+0x99b0>
   1a080:	cmp	r0, #0
   1a084:	beq	1a094 <__assert_fail@plt+0x8b24>
   1a088:	ldr	r4, [sp]
   1a08c:	add	sp, sp, #4
   1a090:	pop	{pc}		; (ldr pc, [sp], #4)
   1a094:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a098:	str	r4, [sp, #-8]!
   1a09c:	str	lr, [sp, #4]
   1a0a0:	bl	1a050 <__assert_fail@plt+0x8ae0>
   1a0a4:	ldr	r4, [sp]
   1a0a8:	add	sp, sp, #4
   1a0ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0b0:	strd	r4, [sp, #-16]!
   1a0b4:	str	r6, [sp, #8]
   1a0b8:	str	lr, [sp, #12]
   1a0bc:	mov	r5, r0
   1a0c0:	mov	r4, r1
   1a0c4:	bl	1afcc <__assert_fail@plt+0x9a5c>
   1a0c8:	cmp	r0, #0
   1a0cc:	beq	1a0e0 <__assert_fail@plt+0x8b70>
   1a0d0:	ldrd	r4, [sp]
   1a0d4:	ldr	r6, [sp, #8]
   1a0d8:	add	sp, sp, #12
   1a0dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0e0:	adds	r4, r4, #0
   1a0e4:	movne	r4, #1
   1a0e8:	cmp	r5, #0
   1a0ec:	moveq	r4, #1
   1a0f0:	cmp	r4, #0
   1a0f4:	beq	1a0d0 <__assert_fail@plt+0x8b60>
   1a0f8:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a0fc:	str	r4, [sp, #-8]!
   1a100:	str	lr, [sp, #4]
   1a104:	cmp	r1, #0
   1a108:	orreq	r1, r1, #1
   1a10c:	bl	1afcc <__assert_fail@plt+0x9a5c>
   1a110:	cmp	r0, #0
   1a114:	beq	1a124 <__assert_fail@plt+0x8bb4>
   1a118:	ldr	r4, [sp]
   1a11c:	add	sp, sp, #4
   1a120:	pop	{pc}		; (ldr pc, [sp], #4)
   1a124:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a128:	strd	r4, [sp, #-16]!
   1a12c:	str	r6, [sp, #8]
   1a130:	str	lr, [sp, #12]
   1a134:	mov	r4, r0
   1a138:	mov	r6, r1
   1a13c:	mov	r5, r2
   1a140:	bl	1b028 <__assert_fail@plt+0x9ab8>
   1a144:	cmp	r0, #0
   1a148:	beq	1a15c <__assert_fail@plt+0x8bec>
   1a14c:	ldrd	r4, [sp]
   1a150:	ldr	r6, [sp, #8]
   1a154:	add	sp, sp, #12
   1a158:	pop	{pc}		; (ldr pc, [sp], #4)
   1a15c:	cmp	r4, #0
   1a160:	beq	1a170 <__assert_fail@plt+0x8c00>
   1a164:	cmp	r6, #0
   1a168:	cmpne	r5, #0
   1a16c:	beq	1a14c <__assert_fail@plt+0x8bdc>
   1a170:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a174:	str	r4, [sp, #-8]!
   1a178:	str	lr, [sp, #4]
   1a17c:	bl	1a128 <__assert_fail@plt+0x8bb8>
   1a180:	ldr	r4, [sp]
   1a184:	add	sp, sp, #4
   1a188:	pop	{pc}		; (ldr pc, [sp], #4)
   1a18c:	str	r4, [sp, #-8]!
   1a190:	str	lr, [sp, #4]
   1a194:	mov	ip, r1
   1a198:	mov	r3, r2
   1a19c:	cmp	r2, #0
   1a1a0:	cmpne	r1, #0
   1a1a4:	moveq	r3, #1
   1a1a8:	moveq	ip, r3
   1a1ac:	mov	r2, r3
   1a1b0:	mov	r1, ip
   1a1b4:	bl	1b028 <__assert_fail@plt+0x9ab8>
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a1cc <__assert_fail@plt+0x8c5c>
   1a1c0:	ldr	r4, [sp]
   1a1c4:	add	sp, sp, #4
   1a1c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1cc:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a1d0:	str	r4, [sp, #-8]!
   1a1d4:	str	lr, [sp, #4]
   1a1d8:	mov	r2, r1
   1a1dc:	mov	r1, r0
   1a1e0:	mov	r0, #0
   1a1e4:	bl	1a128 <__assert_fail@plt+0x8bb8>
   1a1e8:	ldr	r4, [sp]
   1a1ec:	add	sp, sp, #4
   1a1f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1f4:	str	r4, [sp, #-8]!
   1a1f8:	str	lr, [sp, #4]
   1a1fc:	mov	r2, r1
   1a200:	mov	r1, r0
   1a204:	mov	r0, #0
   1a208:	bl	1a18c <__assert_fail@plt+0x8c1c>
   1a20c:	ldr	r4, [sp]
   1a210:	add	sp, sp, #4
   1a214:	pop	{pc}		; (ldr pc, [sp], #4)
   1a218:	strd	r4, [sp, #-16]!
   1a21c:	str	r6, [sp, #8]
   1a220:	str	lr, [sp, #12]
   1a224:	mov	r5, r1
   1a228:	ldr	r4, [r1]
   1a22c:	cmp	r0, #0
   1a230:	beq	1a260 <__assert_fail@plt+0x8cf0>
   1a234:	lsr	r3, r4, #1
   1a238:	add	r3, r3, #1
   1a23c:	adds	r4, r4, r3
   1a240:	bcs	1a27c <__assert_fail@plt+0x8d0c>
   1a244:	mov	r1, r4
   1a248:	bl	1a128 <__assert_fail@plt+0x8bb8>
   1a24c:	str	r4, [r5]
   1a250:	ldrd	r4, [sp]
   1a254:	ldr	r6, [sp, #8]
   1a258:	add	sp, sp, #12
   1a25c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a260:	cmp	r4, #0
   1a264:	bne	1a244 <__assert_fail@plt+0x8cd4>
   1a268:	mov	r4, #64	; 0x40
   1a26c:	udiv	r4, r4, r2
   1a270:	cmp	r2, #64	; 0x40
   1a274:	addhi	r4, r4, #1
   1a278:	b	1a244 <__assert_fail@plt+0x8cd4>
   1a27c:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a280:	str	r4, [sp, #-8]!
   1a284:	str	lr, [sp, #4]
   1a288:	mov	r2, #1
   1a28c:	bl	1a218 <__assert_fail@plt+0x8ca8>
   1a290:	ldr	r4, [sp]
   1a294:	add	sp, sp, #4
   1a298:	pop	{pc}		; (ldr pc, [sp], #4)
   1a29c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a2a0:	strd	r6, [sp, #8]
   1a2a4:	str	r8, [sp, #16]
   1a2a8:	str	lr, [sp, #20]
   1a2ac:	mov	r5, r1
   1a2b0:	ldr	lr, [sp, #24]
   1a2b4:	ldr	ip, [r1]
   1a2b8:	asr	r4, ip, #1
   1a2bc:	adds	r4, ip, r4
   1a2c0:	movvs	r1, #1
   1a2c4:	movvc	r1, #0
   1a2c8:	cmp	r1, #0
   1a2cc:	mvnne	r4, #-2147483648	; 0x80000000
   1a2d0:	mvn	r8, r3
   1a2d4:	lsr	r8, r8, #31
   1a2d8:	cmp	r3, r4
   1a2dc:	movge	r1, #0
   1a2e0:	andlt	r1, r8, #1
   1a2e4:	cmp	r1, #0
   1a2e8:	movne	r4, r3
   1a2ec:	smull	r6, r7, r4, lr
   1a2f0:	asr	r1, r6, #31
   1a2f4:	cmp	r1, r7
   1a2f8:	bne	1a310 <__assert_fail@plt+0x8da0>
   1a2fc:	mov	r1, r6
   1a300:	cmp	r6, #63	; 0x3f
   1a304:	movle	r1, #64	; 0x40
   1a308:	ble	1a314 <__assert_fail@plt+0x8da4>
   1a30c:	b	1a320 <__assert_fail@plt+0x8db0>
   1a310:	mvn	r1, #-2147483648	; 0x80000000
   1a314:	sdiv	r4, r1, lr
   1a318:	mls	r6, lr, r4, r1
   1a31c:	sub	r1, r1, r6
   1a320:	cmp	r0, #0
   1a324:	moveq	r6, #0
   1a328:	streq	r6, [r5]
   1a32c:	sub	r6, r4, ip
   1a330:	cmp	r6, r2
   1a334:	bge	1a36c <__assert_fail@plt+0x8dfc>
   1a338:	adds	r2, ip, r2
   1a33c:	mov	r4, r2
   1a340:	bvs	1a388 <__assert_fail@plt+0x8e18>
   1a344:	cmp	r2, r3
   1a348:	movle	r3, #0
   1a34c:	andgt	r3, r8, #1
   1a350:	cmp	r3, #0
   1a354:	bne	1a388 <__assert_fail@plt+0x8e18>
   1a358:	smull	r2, r3, r2, lr
   1a35c:	asr	ip, r2, #31
   1a360:	mov	r1, r2
   1a364:	cmp	ip, r3
   1a368:	bne	1a388 <__assert_fail@plt+0x8e18>
   1a36c:	bl	1a0b0 <__assert_fail@plt+0x8b40>
   1a370:	str	r4, [r5]
   1a374:	ldrd	r4, [sp]
   1a378:	ldrd	r6, [sp, #8]
   1a37c:	ldr	r8, [sp, #16]
   1a380:	add	sp, sp, #20
   1a384:	pop	{pc}		; (ldr pc, [sp], #4)
   1a388:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a38c:	str	r4, [sp, #-8]!
   1a390:	str	lr, [sp, #4]
   1a394:	bl	1aa6c <__assert_fail@plt+0x94fc>
   1a398:	cmp	r0, #0
   1a39c:	beq	1a3ac <__assert_fail@plt+0x8e3c>
   1a3a0:	ldr	r4, [sp]
   1a3a4:	add	sp, sp, #4
   1a3a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3ac:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a3b0:	str	r4, [sp, #-8]!
   1a3b4:	str	lr, [sp, #4]
   1a3b8:	mov	r1, #1
   1a3bc:	bl	1a38c <__assert_fail@plt+0x8e1c>
   1a3c0:	ldr	r4, [sp]
   1a3c4:	add	sp, sp, #4
   1a3c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3cc:	str	r4, [sp, #-8]!
   1a3d0:	str	lr, [sp, #4]
   1a3d4:	bl	1aa6c <__assert_fail@plt+0x94fc>
   1a3d8:	cmp	r0, #0
   1a3dc:	beq	1a3ec <__assert_fail@plt+0x8e7c>
   1a3e0:	ldr	r4, [sp]
   1a3e4:	add	sp, sp, #4
   1a3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3ec:	bl	1a4e4 <__assert_fail@plt+0x8f74>
   1a3f0:	str	r4, [sp, #-8]!
   1a3f4:	str	lr, [sp, #4]
   1a3f8:	mov	r1, #1
   1a3fc:	bl	1a3cc <__assert_fail@plt+0x8e5c>
   1a400:	ldr	r4, [sp]
   1a404:	add	sp, sp, #4
   1a408:	pop	{pc}		; (ldr pc, [sp], #4)
   1a40c:	strd	r4, [sp, #-16]!
   1a410:	str	r6, [sp, #8]
   1a414:	str	lr, [sp, #12]
   1a418:	mov	r5, r0
   1a41c:	mov	r4, r1
   1a420:	mov	r0, r1
   1a424:	bl	1a050 <__assert_fail@plt+0x8ae0>
   1a428:	mov	r2, r4
   1a42c:	mov	r1, r5
   1a430:	bl	1121c <memcpy@plt>
   1a434:	ldrd	r4, [sp]
   1a438:	ldr	r6, [sp, #8]
   1a43c:	add	sp, sp, #12
   1a440:	pop	{pc}		; (ldr pc, [sp], #4)
   1a444:	strd	r4, [sp, #-16]!
   1a448:	str	r6, [sp, #8]
   1a44c:	str	lr, [sp, #12]
   1a450:	mov	r5, r0
   1a454:	mov	r4, r1
   1a458:	mov	r0, r1
   1a45c:	bl	1a074 <__assert_fail@plt+0x8b04>
   1a460:	mov	r2, r4
   1a464:	mov	r1, r5
   1a468:	bl	1121c <memcpy@plt>
   1a46c:	ldrd	r4, [sp]
   1a470:	ldr	r6, [sp, #8]
   1a474:	add	sp, sp, #12
   1a478:	pop	{pc}		; (ldr pc, [sp], #4)
   1a47c:	strd	r4, [sp, #-16]!
   1a480:	str	r6, [sp, #8]
   1a484:	str	lr, [sp, #12]
   1a488:	mov	r5, r0
   1a48c:	mov	r4, r1
   1a490:	add	r0, r1, #1
   1a494:	bl	1a074 <__assert_fail@plt+0x8b04>
   1a498:	mov	r2, #0
   1a49c:	strb	r2, [r0, r4]
   1a4a0:	mov	r2, r4
   1a4a4:	mov	r1, r5
   1a4a8:	bl	1121c <memcpy@plt>
   1a4ac:	ldrd	r4, [sp]
   1a4b0:	ldr	r6, [sp, #8]
   1a4b4:	add	sp, sp, #12
   1a4b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4bc:	str	r4, [sp, #-8]!
   1a4c0:	str	lr, [sp, #4]
   1a4c4:	mov	r4, r0
   1a4c8:	bl	113c0 <strlen@plt>
   1a4cc:	add	r1, r0, #1
   1a4d0:	mov	r0, r4
   1a4d4:	bl	1a40c <__assert_fail@plt+0x8e9c>
   1a4d8:	ldr	r4, [sp]
   1a4dc:	add	sp, sp, #4
   1a4e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4e4:	str	r4, [sp, #-8]!
   1a4e8:	str	lr, [sp, #4]
   1a4ec:	movw	r3, #57712	; 0xe170
   1a4f0:	movt	r3, #2
   1a4f4:	ldr	r4, [r3]
   1a4f8:	mov	r2, #5
   1a4fc:	movw	r1, #55596	; 0xd92c
   1a500:	movt	r1, #1
   1a504:	mov	r0, #0
   1a508:	bl	11258 <dcgettext@plt>
   1a50c:	mov	r3, r0
   1a510:	movw	r2, #54428	; 0xd49c
   1a514:	movt	r2, #1
   1a518:	mov	r1, #0
   1a51c:	mov	r0, r4
   1a520:	bl	11324 <error@plt>
   1a524:	bl	11540 <abort@plt>
   1a528:	cmp	r2, #0
   1a52c:	beq	1a584 <__assert_fail@plt+0x9014>
   1a530:	str	r4, [sp, #-8]!
   1a534:	str	lr, [sp, #4]
   1a538:	mov	r4, r0
   1a53c:	sub	ip, r2, #1
   1a540:	ldr	r2, [r0]
   1a544:	mov	r0, #0
   1a548:	umull	lr, r3, r1, r2
   1a54c:	adds	r3, r3, #0
   1a550:	movne	r3, #1
   1a554:	mov	lr, r3
   1a558:	cmp	r3, #0
   1a55c:	muleq	r2, r1, r2
   1a560:	mvnne	r2, #0
   1a564:	orr	r0, r0, r3
   1a568:	sub	ip, ip, #1
   1a56c:	cmn	ip, #1
   1a570:	bne	1a548 <__assert_fail@plt+0x8fd8>
   1a574:	str	r2, [r4]
   1a578:	ldr	r4, [sp]
   1a57c:	add	sp, sp, #4
   1a580:	pop	{pc}		; (ldr pc, [sp], #4)
   1a584:	mov	r0, #0
   1a588:	bx	lr
   1a58c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a590:	strd	r6, [sp, #8]
   1a594:	strd	r8, [sp, #16]
   1a598:	str	lr, [sp, #24]
   1a59c:	sub	sp, sp, #12
   1a5a0:	cmp	r2, #36	; 0x24
   1a5a4:	bhi	1a5f8 <__assert_fail@plt+0x9088>
   1a5a8:	mov	r5, r0
   1a5ac:	mov	r6, r1
   1a5b0:	mov	r7, r2
   1a5b4:	mov	r9, r3
   1a5b8:	cmp	r1, #0
   1a5bc:	addeq	r6, sp, #4
   1a5c0:	bl	113f0 <__errno_location@plt>
   1a5c4:	mov	r8, r0
   1a5c8:	mov	r3, #0
   1a5cc:	str	r3, [r0]
   1a5d0:	ldrb	r4, [r5]
   1a5d4:	bl	11390 <__ctype_b_loc@plt>
   1a5d8:	ldr	r1, [r0]
   1a5dc:	mov	r2, r5
   1a5e0:	lsl	r3, r4, #1
   1a5e4:	ldrh	r3, [r1, r3]
   1a5e8:	tst	r3, #8192	; 0x2000
   1a5ec:	beq	1a618 <__assert_fail@plt+0x90a8>
   1a5f0:	ldrb	r4, [r2, #1]!
   1a5f4:	b	1a5e0 <__assert_fail@plt+0x9070>
   1a5f8:	movw	r3, #55616	; 0xd940
   1a5fc:	movt	r3, #1
   1a600:	mov	r2, #84	; 0x54
   1a604:	movw	r1, #55628	; 0xd94c
   1a608:	movt	r1, #1
   1a60c:	movw	r0, #55640	; 0xd958
   1a610:	movt	r0, #1
   1a614:	bl	11570 <__assert_fail@plt>
   1a618:	cmp	r4, #45	; 0x2d
   1a61c:	moveq	r4, #4
   1a620:	beq	1a7ac <__assert_fail@plt+0x923c>
   1a624:	mov	r2, r7
   1a628:	mov	r1, r6
   1a62c:	mov	r0, r5
   1a630:	bl	113b4 <strtoul@plt>
   1a634:	str	r0, [sp]
   1a638:	ldr	r7, [r6]
   1a63c:	cmp	r7, r5
   1a640:	beq	1a664 <__assert_fail@plt+0x90f4>
   1a644:	ldr	r3, [r8]
   1a648:	cmp	r3, #0
   1a64c:	beq	1a784 <__assert_fail@plt+0x9214>
   1a650:	cmp	r3, #34	; 0x22
   1a654:	moveq	r4, #1
   1a658:	beq	1a788 <__assert_fail@plt+0x9218>
   1a65c:	mov	r4, #4
   1a660:	b	1a7ac <__assert_fail@plt+0x923c>
   1a664:	ldr	r3, [sp, #40]	; 0x28
   1a668:	cmp	r3, #0
   1a66c:	beq	1aa5c <__assert_fail@plt+0x94ec>
   1a670:	ldrb	r1, [r5]
   1a674:	cmp	r1, #0
   1a678:	moveq	r4, #4
   1a67c:	beq	1a7ac <__assert_fail@plt+0x923c>
   1a680:	mov	r0, r3
   1a684:	bl	113cc <strchr@plt>
   1a688:	cmp	r0, #0
   1a68c:	beq	1aa64 <__assert_fail@plt+0x94f4>
   1a690:	mov	r3, #1
   1a694:	str	r3, [sp]
   1a698:	ldrb	r5, [r7]
   1a69c:	mov	r4, #0
   1a6a0:	mov	r1, r5
   1a6a4:	ldr	r0, [sp, #40]	; 0x28
   1a6a8:	bl	113cc <strchr@plt>
   1a6ac:	cmp	r0, #0
   1a6b0:	beq	1a7c8 <__assert_fail@plt+0x9258>
   1a6b4:	sub	r3, r5, #69	; 0x45
   1a6b8:	cmp	r3, #47	; 0x2f
   1a6bc:	ldrls	pc, [pc, r3, lsl #2]
   1a6c0:	b	1a914 <__assert_fail@plt+0x93a4>
   1a6c4:	ldrdeq	sl, [r1], -r8
   1a6c8:	andeq	sl, r1, r4, lsl r9
   1a6cc:	ldrdeq	sl, [r1], -r8
   1a6d0:	andeq	sl, r1, r4, lsl r9
   1a6d4:	andeq	sl, r1, r4, lsl r9
   1a6d8:	andeq	sl, r1, r4, lsl r9
   1a6dc:	ldrdeq	sl, [r1], -r8
   1a6e0:	andeq	sl, r1, r4, lsl r9
   1a6e4:	ldrdeq	sl, [r1], -r8
   1a6e8:	andeq	sl, r1, r4, lsl r9
   1a6ec:	andeq	sl, r1, r4, lsl r9
   1a6f0:	ldrdeq	sl, [r1], -r8
   1a6f4:	andeq	sl, r1, r4, lsl r9
   1a6f8:	andeq	sl, r1, r4, lsl r9
   1a6fc:	andeq	sl, r1, r4, lsl r9
   1a700:	ldrdeq	sl, [r1], -r8
   1a704:	andeq	sl, r1, r4, lsl r9
   1a708:	andeq	sl, r1, r4, lsl r9
   1a70c:	andeq	sl, r1, r4, lsl r9
   1a710:	andeq	sl, r1, r4, lsl r9
   1a714:	ldrdeq	sl, [r1], -r8
   1a718:	ldrdeq	sl, [r1], -r8
   1a71c:	andeq	sl, r1, r4, lsl r9
   1a720:	andeq	sl, r1, r4, lsl r9
   1a724:	andeq	sl, r1, r4, lsl r9
   1a728:	andeq	sl, r1, r4, lsl r9
   1a72c:	andeq	sl, r1, r4, lsl r9
   1a730:	andeq	sl, r1, r4, lsl r9
   1a734:	andeq	sl, r1, r4, lsl r9
   1a738:	andeq	sl, r1, r4, lsl r9
   1a73c:	andeq	sl, r1, r4, lsl r9
   1a740:	andeq	sl, r1, r4, lsl r9
   1a744:	andeq	sl, r1, r4, lsl r9
   1a748:	andeq	sl, r1, r4, lsl r9
   1a74c:	ldrdeq	sl, [r1], -r8
   1a750:	andeq	sl, r1, r4, lsl r9
   1a754:	andeq	sl, r1, r4, lsl r9
   1a758:	andeq	sl, r1, r4, lsl r9
   1a75c:	ldrdeq	sl, [r1], -r8
   1a760:	andeq	sl, r1, r4, lsl r9
   1a764:	ldrdeq	sl, [r1], -r8
   1a768:	andeq	sl, r1, r4, lsl r9
   1a76c:	andeq	sl, r1, r4, lsl r9
   1a770:	andeq	sl, r1, r4, lsl r9
   1a774:	andeq	sl, r1, r4, lsl r9
   1a778:	andeq	sl, r1, r4, lsl r9
   1a77c:	andeq	sl, r1, r4, lsl r9
   1a780:	ldrdeq	sl, [r1], -r8
   1a784:	mov	r4, #0
   1a788:	ldr	r3, [sp, #40]	; 0x28
   1a78c:	cmp	r3, #0
   1a790:	streq	r0, [r9]
   1a794:	beq	1a7ac <__assert_fail@plt+0x923c>
   1a798:	ldrb	r5, [r7]
   1a79c:	cmp	r5, #0
   1a7a0:	bne	1a6a0 <__assert_fail@plt+0x9130>
   1a7a4:	ldr	r3, [sp]
   1a7a8:	str	r3, [r9]
   1a7ac:	mov	r0, r4
   1a7b0:	add	sp, sp, #12
   1a7b4:	ldrd	r4, [sp]
   1a7b8:	ldrd	r6, [sp, #8]
   1a7bc:	ldrd	r8, [sp, #16]
   1a7c0:	add	sp, sp, #24
   1a7c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7c8:	ldr	r3, [sp]
   1a7cc:	str	r3, [r9]
   1a7d0:	orr	r4, r4, #2
   1a7d4:	b	1a7ac <__assert_fail@plt+0x923c>
   1a7d8:	mov	r1, #48	; 0x30
   1a7dc:	ldr	r0, [sp, #40]	; 0x28
   1a7e0:	bl	113cc <strchr@plt>
   1a7e4:	cmp	r0, #0
   1a7e8:	beq	1a920 <__assert_fail@plt+0x93b0>
   1a7ec:	ldrb	r3, [r7, #1]
   1a7f0:	cmp	r3, #68	; 0x44
   1a7f4:	beq	1a92c <__assert_fail@plt+0x93bc>
   1a7f8:	cmp	r3, #105	; 0x69
   1a7fc:	beq	1a8fc <__assert_fail@plt+0x938c>
   1a800:	cmp	r3, #66	; 0x42
   1a804:	moveq	r7, #2
   1a808:	movne	r7, #1
   1a80c:	moveq	r1, #1000	; 0x3e8
   1a810:	movne	r1, #1024	; 0x400
   1a814:	sub	r5, r5, #66	; 0x42
   1a818:	cmp	r5, #53	; 0x35
   1a81c:	ldrls	pc, [pc, r5, lsl #2]
   1a820:	b	1aa28 <__assert_fail@plt+0x94b8>
   1a824:	andeq	sl, r1, r0, ror #18
   1a828:	andeq	sl, r1, r8, lsr #20
   1a82c:	andeq	sl, r1, r8, lsr #20
   1a830:	andeq	sl, r1, r8, lsl #19
   1a834:	andeq	sl, r1, r8, lsr #20
   1a838:	muleq	r1, r8, r9
   1a83c:	andeq	sl, r1, r8, lsr #20
   1a840:	andeq	sl, r1, r8, lsr #20
   1a844:	andeq	sl, r1, r8, lsr #20
   1a848:	andeq	sl, r1, r8, lsr #19
   1a84c:	andeq	sl, r1, r8, lsr #20
   1a850:			; <UNDEFINED> instruction: 0x0001a9b8
   1a854:	andeq	sl, r1, r8, lsr #20
   1a858:	andeq	sl, r1, r8, lsr #20
   1a85c:	andeq	sl, r1, r8, asr #19
   1a860:	andeq	sl, r1, r8, lsr #20
   1a864:	andeq	sl, r1, r8, lsr #20
   1a868:	andeq	sl, r1, r8, lsr #20
   1a86c:	ldrdeq	sl, [r1], -r8
   1a870:	andeq	sl, r1, r8, lsr #20
   1a874:	andeq	sl, r1, r8, lsr #20
   1a878:	andeq	sl, r1, r8, lsr #20
   1a87c:	andeq	sl, r1, r8, lsr #20
   1a880:	andeq	sl, r1, r8, lsl #20
   1a884:	andeq	sl, r1, r8, lsl sl
   1a888:	andeq	sl, r1, r8, lsr #20
   1a88c:	andeq	sl, r1, r8, lsr #20
   1a890:	andeq	sl, r1, r8, lsr #20
   1a894:	andeq	sl, r1, r8, lsr #20
   1a898:	andeq	sl, r1, r8, lsr #20
   1a89c:	andeq	sl, r1, r8, lsr #20
   1a8a0:	andeq	sl, r1, r8, lsr #20
   1a8a4:	andeq	sl, r1, r8, lsr r9
   1a8a8:	andeq	sl, r1, r8, lsr sl
   1a8ac:	andeq	sl, r1, r8, lsr #20
   1a8b0:	andeq	sl, r1, r8, lsr #20
   1a8b4:	andeq	sl, r1, r8, lsr #20
   1a8b8:	muleq	r1, r8, r9
   1a8bc:	andeq	sl, r1, r8, lsr #20
   1a8c0:	andeq	sl, r1, r8, lsr #20
   1a8c4:	andeq	sl, r1, r8, lsr #20
   1a8c8:	andeq	sl, r1, r8, lsr #19
   1a8cc:	andeq	sl, r1, r8, lsr #20
   1a8d0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8d4:	andeq	sl, r1, r8, lsr #20
   1a8d8:	andeq	sl, r1, r8, lsr #20
   1a8dc:	andeq	sl, r1, r8, lsr #20
   1a8e0:	andeq	sl, r1, r8, lsr #20
   1a8e4:	andeq	sl, r1, r8, lsr #20
   1a8e8:	andeq	sl, r1, r8, lsr #20
   1a8ec:	ldrdeq	sl, [r1], -r8
   1a8f0:	andeq	sl, r1, r8, lsr #20
   1a8f4:	andeq	sl, r1, r8, lsr #20
   1a8f8:	andeq	sl, r1, r8, ror #19
   1a8fc:	ldrb	r3, [r7, #2]
   1a900:	cmp	r3, #66	; 0x42
   1a904:	movne	r7, #1
   1a908:	moveq	r7, #3
   1a90c:	mov	r1, #1024	; 0x400
   1a910:	b	1a814 <__assert_fail@plt+0x92a4>
   1a914:	mov	r7, #1
   1a918:	mov	r1, #1024	; 0x400
   1a91c:	b	1a814 <__assert_fail@plt+0x92a4>
   1a920:	mov	r7, #1
   1a924:	mov	r1, #1024	; 0x400
   1a928:	b	1a814 <__assert_fail@plt+0x92a4>
   1a92c:	mov	r7, #2
   1a930:	mov	r1, #1000	; 0x3e8
   1a934:	b	1a814 <__assert_fail@plt+0x92a4>
   1a938:	ldr	r3, [sp]
   1a93c:	lsr	r2, r3, #23
   1a940:	adds	r2, r2, #0
   1a944:	movne	r2, #1
   1a948:	mov	r0, r2
   1a94c:	cmp	r2, #0
   1a950:	mvnne	r3, #0
   1a954:	lsleq	r3, r3, #9
   1a958:	str	r3, [sp]
   1a95c:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a960:	ldr	r3, [sp]
   1a964:	lsr	r2, r3, #22
   1a968:	adds	r2, r2, #0
   1a96c:	movne	r2, #1
   1a970:	mov	r0, r2
   1a974:	cmp	r2, #0
   1a978:	mvnne	r3, #0
   1a97c:	lsleq	r3, r3, #10
   1a980:	str	r3, [sp]
   1a984:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a988:	mov	r2, #6
   1a98c:	mov	r0, sp
   1a990:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1a994:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a998:	mov	r2, #3
   1a99c:	mov	r0, sp
   1a9a0:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1a9a4:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a9a8:	mov	r2, #1
   1a9ac:	mov	r0, sp
   1a9b0:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1a9b4:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a9b8:	mov	r2, #2
   1a9bc:	mov	r0, sp
   1a9c0:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1a9c4:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a9c8:	mov	r2, #5
   1a9cc:	mov	r0, sp
   1a9d0:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1a9d4:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a9d8:	mov	r2, #4
   1a9dc:	mov	r0, sp
   1a9e0:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1a9e4:	b	1aa3c <__assert_fail@plt+0x94cc>
   1a9e8:	ldr	r3, [sp]
   1a9ec:	lsr	r2, r3, #31
   1a9f0:	mov	r0, r2
   1a9f4:	cmp	r2, #0
   1a9f8:	mvnne	r3, #0
   1a9fc:	lsleq	r3, r3, #1
   1aa00:	str	r3, [sp]
   1aa04:	b	1aa3c <__assert_fail@plt+0x94cc>
   1aa08:	mov	r2, #8
   1aa0c:	mov	r0, sp
   1aa10:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1aa14:	b	1aa3c <__assert_fail@plt+0x94cc>
   1aa18:	mov	r2, #7
   1aa1c:	mov	r0, sp
   1aa20:	bl	1a528 <__assert_fail@plt+0x8fb8>
   1aa24:	b	1aa3c <__assert_fail@plt+0x94cc>
   1aa28:	ldr	r3, [sp]
   1aa2c:	str	r3, [r9]
   1aa30:	orr	r4, r4, #2
   1aa34:	b	1a7ac <__assert_fail@plt+0x923c>
   1aa38:	mov	r0, #0
   1aa3c:	orr	r4, r4, r0
   1aa40:	ldr	r3, [r6]
   1aa44:	add	r2, r3, r7
   1aa48:	str	r2, [r6]
   1aa4c:	ldrb	r3, [r3, r7]
   1aa50:	cmp	r3, #0
   1aa54:	orrne	r4, r4, #2
   1aa58:	b	1a7a4 <__assert_fail@plt+0x9234>
   1aa5c:	mov	r4, #4
   1aa60:	b	1a7ac <__assert_fail@plt+0x923c>
   1aa64:	mov	r4, #4
   1aa68:	b	1a7ac <__assert_fail@plt+0x923c>
   1aa6c:	strd	r4, [sp, #-16]!
   1aa70:	str	r6, [sp, #8]
   1aa74:	str	lr, [sp, #12]
   1aa78:	cmp	r1, #0
   1aa7c:	cmpne	r0, #0
   1aa80:	beq	1aabc <__assert_fail@plt+0x954c>
   1aa84:	mov	r2, r0
   1aa88:	mov	r3, r1
   1aa8c:	umull	r4, r5, r0, r1
   1aa90:	adds	r1, r5, #0
   1aa94:	movne	r1, #1
   1aa98:	cmp	r4, #0
   1aa9c:	movlt	r1, #1
   1aaa0:	cmp	r1, #0
   1aaa4:	beq	1aac4 <__assert_fail@plt+0x9554>
   1aaa8:	bl	113f0 <__errno_location@plt>
   1aaac:	mov	r3, #12
   1aab0:	str	r3, [r0]
   1aab4:	mov	r0, #0
   1aab8:	b	1aad0 <__assert_fail@plt+0x9560>
   1aabc:	mov	r3, #1
   1aac0:	mov	r2, r3
   1aac4:	mov	r1, r3
   1aac8:	mov	r0, r2
   1aacc:	bl	111a4 <calloc@plt>
   1aad0:	ldrd	r4, [sp]
   1aad4:	ldr	r6, [sp, #8]
   1aad8:	add	sp, sp, #12
   1aadc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aae0:	push	{r1, r2, r3}
   1aae4:	strd	r4, [sp, #-16]!
   1aae8:	str	r6, [sp, #8]
   1aaec:	str	lr, [sp, #12]
   1aaf0:	sub	sp, sp, #12
   1aaf4:	mov	r5, r0
   1aaf8:	ldr	r1, [sp, #28]
   1aafc:	add	r3, sp, #32
   1ab00:	str	r3, [sp, #4]
   1ab04:	cmp	r1, #0
   1ab08:	beq	1ab50 <__assert_fail@plt+0x95e0>
   1ab0c:	movw	r3, #1030	; 0x406
   1ab10:	cmp	r1, r3
   1ab14:	beq	1ab8c <__assert_fail@plt+0x961c>
   1ab18:	cmp	r1, #11
   1ab1c:	beq	1ad3c <__assert_fail@plt+0x97cc>
   1ab20:	bgt	1acc8 <__assert_fail@plt+0x9758>
   1ab24:	cmp	r1, #3
   1ab28:	beq	1ad3c <__assert_fail@plt+0x97cc>
   1ab2c:	ble	1ac88 <__assert_fail@plt+0x9718>
   1ab30:	cmp	r1, #8
   1ab34:	beq	1aca8 <__assert_fail@plt+0x9738>
   1ab38:	ble	1aca0 <__assert_fail@plt+0x9730>
   1ab3c:	cmp	r1, #9
   1ab40:	beq	1ad3c <__assert_fail@plt+0x97cc>
   1ab44:	cmp	r1, #10
   1ab48:	bne	1ad00 <__assert_fail@plt+0x9790>
   1ab4c:	b	1aca8 <__assert_fail@plt+0x9738>
   1ab50:	ldr	r3, [sp, #4]
   1ab54:	add	r2, r3, #4
   1ab58:	str	r2, [sp, #4]
   1ab5c:	ldr	r2, [r3]
   1ab60:	mov	r1, #0
   1ab64:	bl	11480 <fcntl64@plt>
   1ab68:	mov	r4, r0
   1ab6c:	mov	r0, r4
   1ab70:	add	sp, sp, #12
   1ab74:	ldrd	r4, [sp]
   1ab78:	ldr	r6, [sp, #8]
   1ab7c:	ldr	lr, [sp, #12]
   1ab80:	add	sp, sp, #16
   1ab84:	add	sp, sp, #12
   1ab88:	bx	lr
   1ab8c:	ldr	r3, [sp, #4]
   1ab90:	add	r2, r3, #4
   1ab94:	str	r2, [sp, #4]
   1ab98:	ldr	r6, [r3]
   1ab9c:	movw	r3, #58340	; 0xe3e4
   1aba0:	movt	r3, #2
   1aba4:	ldr	r3, [r3]
   1aba8:	cmp	r3, #0
   1abac:	blt	1ac14 <__assert_fail@plt+0x96a4>
   1abb0:	mov	r2, r6
   1abb4:	movw	r1, #1030	; 0x406
   1abb8:	bl	11480 <fcntl64@plt>
   1abbc:	subs	r4, r0, #0
   1abc0:	blt	1abd8 <__assert_fail@plt+0x9668>
   1abc4:	movw	r3, #58340	; 0xe3e4
   1abc8:	movt	r3, #2
   1abcc:	mov	r2, #1
   1abd0:	str	r2, [r3]
   1abd4:	b	1ab6c <__assert_fail@plt+0x95fc>
   1abd8:	bl	113f0 <__errno_location@plt>
   1abdc:	ldr	r3, [r0]
   1abe0:	cmp	r3, #22
   1abe4:	bne	1abc4 <__assert_fail@plt+0x9654>
   1abe8:	mov	r2, r6
   1abec:	mov	r1, #0
   1abf0:	mov	r0, r5
   1abf4:	bl	11480 <fcntl64@plt>
   1abf8:	subs	r4, r0, #0
   1abfc:	blt	1ab6c <__assert_fail@plt+0x95fc>
   1ac00:	movw	r3, #58340	; 0xe3e4
   1ac04:	movt	r3, #2
   1ac08:	mvn	r2, #0
   1ac0c:	str	r2, [r3]
   1ac10:	b	1ac3c <__assert_fail@plt+0x96cc>
   1ac14:	mov	r2, r6
   1ac18:	mov	r1, #0
   1ac1c:	bl	11480 <fcntl64@plt>
   1ac20:	subs	r4, r0, #0
   1ac24:	blt	1ab6c <__assert_fail@plt+0x95fc>
   1ac28:	movw	r3, #58340	; 0xe3e4
   1ac2c:	movt	r3, #2
   1ac30:	ldr	r3, [r3]
   1ac34:	cmn	r3, #1
   1ac38:	bne	1ab6c <__assert_fail@plt+0x95fc>
   1ac3c:	mov	r1, #1
   1ac40:	mov	r0, r4
   1ac44:	bl	11480 <fcntl64@plt>
   1ac48:	subs	r2, r0, #0
   1ac4c:	blt	1ac68 <__assert_fail@plt+0x96f8>
   1ac50:	orr	r2, r2, #1
   1ac54:	mov	r1, #2
   1ac58:	mov	r0, r4
   1ac5c:	bl	11480 <fcntl64@plt>
   1ac60:	cmn	r0, #1
   1ac64:	bne	1ab6c <__assert_fail@plt+0x95fc>
   1ac68:	bl	113f0 <__errno_location@plt>
   1ac6c:	mov	r5, r0
   1ac70:	ldr	r6, [r0]
   1ac74:	mov	r0, r4
   1ac78:	bl	11558 <close@plt>
   1ac7c:	str	r6, [r5]
   1ac80:	mvn	r4, #0
   1ac84:	b	1ab6c <__assert_fail@plt+0x95fc>
   1ac88:	cmp	r1, #1
   1ac8c:	beq	1ad3c <__assert_fail@plt+0x97cc>
   1ac90:	bgt	1aca8 <__assert_fail@plt+0x9738>
   1ac94:	cmp	r1, #0
   1ac98:	bne	1ad00 <__assert_fail@plt+0x9790>
   1ac9c:	b	1aca8 <__assert_fail@plt+0x9738>
   1aca0:	cmp	r1, #4
   1aca4:	bne	1ad00 <__assert_fail@plt+0x9790>
   1aca8:	ldr	r3, [sp, #4]
   1acac:	add	r2, r3, #4
   1acb0:	str	r2, [sp, #4]
   1acb4:	ldr	r2, [r3]
   1acb8:	mov	r0, r5
   1acbc:	bl	11480 <fcntl64@plt>
   1acc0:	mov	r4, r0
   1acc4:	b	1ab6c <__assert_fail@plt+0x95fc>
   1acc8:	movw	r3, #1031	; 0x407
   1accc:	cmp	r1, r3
   1acd0:	bgt	1ad20 <__assert_fail@plt+0x97b0>
   1acd4:	movw	r3, #1030	; 0x406
   1acd8:	cmp	r1, r3
   1acdc:	bge	1aca8 <__assert_fail@plt+0x9738>
   1ace0:	movw	r3, #1025	; 0x401
   1ace4:	cmp	r1, r3
   1ace8:	beq	1ad3c <__assert_fail@plt+0x97cc>
   1acec:	movw	r3, #1026	; 0x402
   1acf0:	cmp	r1, r3
   1acf4:	beq	1aca8 <__assert_fail@plt+0x9738>
   1acf8:	cmp	r1, #1024	; 0x400
   1acfc:	beq	1aca8 <__assert_fail@plt+0x9738>
   1ad00:	ldr	r3, [sp, #4]
   1ad04:	add	r2, r3, #4
   1ad08:	str	r2, [sp, #4]
   1ad0c:	ldr	r2, [r3]
   1ad10:	mov	r0, r5
   1ad14:	bl	11480 <fcntl64@plt>
   1ad18:	mov	r4, r0
   1ad1c:	b	1ab6c <__assert_fail@plt+0x95fc>
   1ad20:	movw	r3, #1033	; 0x409
   1ad24:	cmp	r1, r3
   1ad28:	beq	1aca8 <__assert_fail@plt+0x9738>
   1ad2c:	blt	1ad3c <__assert_fail@plt+0x97cc>
   1ad30:	movw	r3, #1034	; 0x40a
   1ad34:	cmp	r1, r3
   1ad38:	bne	1ad00 <__assert_fail@plt+0x9790>
   1ad3c:	mov	r0, r5
   1ad40:	bl	11480 <fcntl64@plt>
   1ad44:	mov	r4, r0
   1ad48:	b	1ab6c <__assert_fail@plt+0x95fc>
   1ad4c:	str	r4, [sp, #-8]!
   1ad50:	str	lr, [sp, #4]
   1ad54:	sub	sp, sp, #8
   1ad58:	subs	r4, r0, #0
   1ad5c:	beq	1ad70 <__assert_fail@plt+0x9800>
   1ad60:	mov	r0, r4
   1ad64:	bl	1136c <__freading@plt>
   1ad68:	cmp	r0, #0
   1ad6c:	bne	1ad88 <__assert_fail@plt+0x9818>
   1ad70:	mov	r0, r4
   1ad74:	bl	111e0 <fflush@plt>
   1ad78:	add	sp, sp, #8
   1ad7c:	ldr	r4, [sp]
   1ad80:	add	sp, sp, #4
   1ad84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad88:	ldr	r3, [r4]
   1ad8c:	tst	r3, #256	; 0x100
   1ad90:	bne	1ada0 <__assert_fail@plt+0x9830>
   1ad94:	mov	r0, r4
   1ad98:	bl	111e0 <fflush@plt>
   1ad9c:	b	1ad78 <__assert_fail@plt+0x9808>
   1ada0:	mov	r3, #1
   1ada4:	str	r3, [sp]
   1ada8:	mov	r2, #0
   1adac:	mov	r3, #0
   1adb0:	mov	r0, r4
   1adb4:	bl	1ae60 <__assert_fail@plt+0x98f0>
   1adb8:	b	1ad94 <__assert_fail@plt+0x9824>
   1adbc:	ldr	r2, [r0, #20]
   1adc0:	ldr	r3, [r0, #16]
   1adc4:	cmp	r2, r3
   1adc8:	bhi	1adf8 <__assert_fail@plt+0x9888>
   1adcc:	ldr	r3, [r0, #8]
   1add0:	ldr	r2, [r0, #4]
   1add4:	sub	r3, r3, r2
   1add8:	ldr	r2, [r0]
   1addc:	ands	r2, r2, #256	; 0x100
   1ade0:	beq	1adf0 <__assert_fail@plt+0x9880>
   1ade4:	ldr	r2, [r0, #44]	; 0x2c
   1ade8:	ldr	r0, [r0, #36]	; 0x24
   1adec:	sub	r2, r2, r0
   1adf0:	add	r0, r3, r2
   1adf4:	bx	lr
   1adf8:	mov	r0, #0
   1adfc:	bx	lr
   1ae00:	strd	r4, [sp, #-12]!
   1ae04:	str	lr, [sp, #8]
   1ae08:	sub	sp, sp, #12
   1ae0c:	mov	r5, r0
   1ae10:	bl	113f0 <__errno_location@plt>
   1ae14:	mov	r4, r0
   1ae18:	ldr	r3, [r0]
   1ae1c:	str	r3, [sp]
   1ae20:	str	r3, [sp, #4]
   1ae24:	mov	r3, #0
   1ae28:	str	r3, [r0]
   1ae2c:	mov	r0, r5
   1ae30:	bl	111f8 <free@plt>
   1ae34:	ldr	r3, [r4]
   1ae38:	clz	r3, r3
   1ae3c:	lsr	r3, r3, #5
   1ae40:	add	r2, sp, #8
   1ae44:	add	r3, r2, r3, lsl #2
   1ae48:	ldr	r3, [r3, #-8]
   1ae4c:	str	r3, [r4]
   1ae50:	add	sp, sp, #12
   1ae54:	ldrd	r4, [sp]
   1ae58:	add	sp, sp, #8
   1ae5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae60:	str	r4, [sp, #-16]!
   1ae64:	strd	r6, [sp, #4]
   1ae68:	str	lr, [sp, #12]
   1ae6c:	sub	sp, sp, #8
   1ae70:	mov	r4, r0
   1ae74:	mov	r6, r2
   1ae78:	mov	r7, r3
   1ae7c:	ldr	r2, [r0, #8]
   1ae80:	ldr	r3, [r0, #4]
   1ae84:	cmp	r2, r3
   1ae88:	beq	1aeb8 <__assert_fail@plt+0x9948>
   1ae8c:	ldr	r3, [sp, #24]
   1ae90:	str	r3, [sp]
   1ae94:	mov	r2, r6
   1ae98:	mov	r3, r7
   1ae9c:	mov	r0, r4
   1aea0:	bl	11474 <fseeko64@plt>
   1aea4:	add	sp, sp, #8
   1aea8:	ldr	r4, [sp]
   1aeac:	ldrd	r6, [sp, #4]
   1aeb0:	add	sp, sp, #12
   1aeb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aeb8:	ldr	r2, [r0, #20]
   1aebc:	ldr	r3, [r0, #16]
   1aec0:	cmp	r2, r3
   1aec4:	bne	1ae8c <__assert_fail@plt+0x991c>
   1aec8:	ldr	r3, [r0, #36]	; 0x24
   1aecc:	cmp	r3, #0
   1aed0:	bne	1ae8c <__assert_fail@plt+0x991c>
   1aed4:	bl	11438 <fileno@plt>
   1aed8:	ldr	r3, [sp, #24]
   1aedc:	str	r3, [sp]
   1aee0:	mov	r2, r6
   1aee4:	mov	r3, r7
   1aee8:	bl	112dc <lseek64@plt>
   1aeec:	mvn	r2, #0
   1aef0:	mvn	r3, #0
   1aef4:	cmp	r1, r3
   1aef8:	cmpeq	r0, r2
   1aefc:	beq	1af18 <__assert_fail@plt+0x99a8>
   1af00:	ldr	r3, [r4]
   1af04:	bic	r3, r3, #16
   1af08:	str	r3, [r4]
   1af0c:	strd	r0, [r4, #80]	; 0x50
   1af10:	mov	r0, #0
   1af14:	b	1aea4 <__assert_fail@plt+0x9934>
   1af18:	mvn	r0, #0
   1af1c:	b	1aea4 <__assert_fail@plt+0x9934>
   1af20:	str	r4, [sp, #-8]!
   1af24:	str	lr, [sp, #4]
   1af28:	cmp	r0, #0
   1af2c:	beq	1af48 <__assert_fail@plt+0x99d8>
   1af30:	bge	1af4c <__assert_fail@plt+0x99dc>
   1af34:	bl	113f0 <__errno_location@plt>
   1af38:	mov	r3, #12
   1af3c:	str	r3, [r0]
   1af40:	mov	r0, #0
   1af44:	b	1af50 <__assert_fail@plt+0x99e0>
   1af48:	mov	r0, #1
   1af4c:	bl	11354 <malloc@plt>
   1af50:	ldr	r4, [sp]
   1af54:	add	sp, sp, #4
   1af58:	pop	{pc}		; (ldr pc, [sp], #4)
   1af5c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1af60:	strd	r6, [sp, #8]
   1af64:	str	lr, [sp, #16]
   1af68:	sub	sp, sp, #12
   1af6c:	mov	r7, r1
   1af70:	mov	r5, r2
   1af74:	subs	r6, r0, #0
   1af78:	addeq	r6, sp, #4
   1af7c:	mov	r0, r6
   1af80:	bl	11318 <mbrtowc@plt>
   1af84:	mov	r4, r0
   1af88:	cmp	r5, #0
   1af8c:	cmnne	r0, #3
   1af90:	bhi	1afac <__assert_fail@plt+0x9a3c>
   1af94:	mov	r0, r4
   1af98:	add	sp, sp, #12
   1af9c:	ldrd	r4, [sp]
   1afa0:	ldrd	r6, [sp, #8]
   1afa4:	add	sp, sp, #16
   1afa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1afac:	mov	r0, #0
   1afb0:	bl	1b0f4 <__assert_fail@plt+0x9b84>
   1afb4:	cmp	r0, #0
   1afb8:	bne	1af94 <__assert_fail@plt+0x9a24>
   1afbc:	ldrb	r3, [r7]
   1afc0:	str	r3, [r6]
   1afc4:	mov	r4, #1
   1afc8:	b	1af94 <__assert_fail@plt+0x9a24>
   1afcc:	str	r4, [sp, #-8]!
   1afd0:	str	lr, [sp, #4]
   1afd4:	cmp	r0, #0
   1afd8:	beq	1affc <__assert_fail@plt+0x9a8c>
   1afdc:	cmp	r1, #0
   1afe0:	beq	1b008 <__assert_fail@plt+0x9a98>
   1afe4:	cmp	r1, #0
   1afe8:	blt	1b014 <__assert_fail@plt+0x9aa4>
   1afec:	bl	11288 <realloc@plt>
   1aff0:	ldr	r4, [sp]
   1aff4:	add	sp, sp, #4
   1aff8:	pop	{pc}		; (ldr pc, [sp], #4)
   1affc:	mov	r0, r1
   1b000:	bl	1af20 <__assert_fail@plt+0x99b0>
   1b004:	b	1aff0 <__assert_fail@plt+0x9a80>
   1b008:	bl	1ae00 <__assert_fail@plt+0x9890>
   1b00c:	mov	r0, #0
   1b010:	b	1aff0 <__assert_fail@plt+0x9a80>
   1b014:	bl	113f0 <__errno_location@plt>
   1b018:	mov	r3, #12
   1b01c:	str	r3, [r0]
   1b020:	mov	r0, #0
   1b024:	b	1aff0 <__assert_fail@plt+0x9a80>
   1b028:	str	r4, [sp, #-8]!
   1b02c:	str	lr, [sp, #4]
   1b030:	umull	r2, r3, r1, r2
   1b034:	cmp	r3, #0
   1b038:	bne	1b050 <__assert_fail@plt+0x9ae0>
   1b03c:	mov	r1, r2
   1b040:	bl	1afcc <__assert_fail@plt+0x9a5c>
   1b044:	ldr	r4, [sp]
   1b048:	add	sp, sp, #4
   1b04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b050:	bl	113f0 <__errno_location@plt>
   1b054:	mov	r3, #12
   1b058:	str	r3, [r0]
   1b05c:	mov	r0, #0
   1b060:	b	1b044 <__assert_fail@plt+0x9ad4>
   1b064:	strd	r4, [sp, #-16]!
   1b068:	str	r6, [sp, #8]
   1b06c:	str	lr, [sp, #12]
   1b070:	mov	r4, r0
   1b074:	bl	1130c <__fpending@plt>
   1b078:	mov	r6, r0
   1b07c:	mov	r0, r4
   1b080:	bl	11204 <ferror@plt>
   1b084:	mov	r5, r0
   1b088:	mov	r0, r4
   1b08c:	bl	11450 <fclose@plt>
   1b090:	cmp	r5, #0
   1b094:	bne	1b0c8 <__assert_fail@plt+0x9b58>
   1b098:	cmp	r0, #0
   1b09c:	beq	1b0b8 <__assert_fail@plt+0x9b48>
   1b0a0:	cmp	r6, #0
   1b0a4:	bne	1b0e4 <__assert_fail@plt+0x9b74>
   1b0a8:	bl	113f0 <__errno_location@plt>
   1b0ac:	ldr	r0, [r0]
   1b0b0:	subs	r0, r0, #9
   1b0b4:	mvnne	r0, #0
   1b0b8:	ldrd	r4, [sp]
   1b0bc:	ldr	r6, [sp, #8]
   1b0c0:	add	sp, sp, #12
   1b0c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0c8:	cmp	r0, #0
   1b0cc:	bne	1b0ec <__assert_fail@plt+0x9b7c>
   1b0d0:	bl	113f0 <__errno_location@plt>
   1b0d4:	mov	r3, #0
   1b0d8:	str	r3, [r0]
   1b0dc:	mvn	r0, #0
   1b0e0:	b	1b0b8 <__assert_fail@plt+0x9b48>
   1b0e4:	mvn	r0, #0
   1b0e8:	b	1b0b8 <__assert_fail@plt+0x9b48>
   1b0ec:	mvn	r0, #0
   1b0f0:	b	1b0b8 <__assert_fail@plt+0x9b48>
   1b0f4:	push	{lr}		; (str lr, [sp, #-4]!)
   1b0f8:	sub	sp, sp, #268	; 0x10c
   1b0fc:	movw	r2, #257	; 0x101
   1b100:	add	r1, sp, #4
   1b104:	bl	1b4f8 <__assert_fail@plt+0x9f88>
   1b108:	cmp	r0, #0
   1b10c:	movne	r0, #0
   1b110:	bne	1b148 <__assert_fail@plt+0x9bd8>
   1b114:	movw	r1, #55680	; 0xd980
   1b118:	movt	r1, #1
   1b11c:	add	r0, sp, #4
   1b120:	bl	111b0 <strcmp@plt>
   1b124:	cmp	r0, #0
   1b128:	beq	1b144 <__assert_fail@plt+0x9bd4>
   1b12c:	movw	r1, #55684	; 0xd984
   1b130:	movt	r1, #1
   1b134:	add	r0, sp, #4
   1b138:	bl	111b0 <strcmp@plt>
   1b13c:	adds	r0, r0, #0
   1b140:	movne	r0, #1
   1b144:	and	r0, r0, #1
   1b148:	add	sp, sp, #268	; 0x10c
   1b14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b150:	str	r4, [sp, #-8]!
   1b154:	str	lr, [sp, #4]
   1b158:	mov	r0, #14
   1b15c:	bl	114bc <nl_langinfo@plt>
   1b160:	cmp	r0, #0
   1b164:	beq	1b188 <__assert_fail@plt+0x9c18>
   1b168:	ldrb	r2, [r0]
   1b16c:	movw	r3, #55692	; 0xd98c
   1b170:	movt	r3, #1
   1b174:	cmp	r2, #0
   1b178:	moveq	r0, r3
   1b17c:	ldr	r4, [sp]
   1b180:	add	sp, sp, #4
   1b184:	pop	{pc}		; (ldr pc, [sp], #4)
   1b188:	movw	r0, #55692	; 0xd98c
   1b18c:	movt	r0, #1
   1b190:	b	1b17c <__assert_fail@plt+0x9c0c>
   1b194:	adds	r3, r0, #16
   1b198:	bmi	1b1ec <__assert_fail@plt+0x9c7c>
   1b19c:	mov	r2, #0
   1b1a0:	cmp	r3, r0
   1b1a4:	bcc	1b1ec <__assert_fail@plt+0x9c7c>
   1b1a8:	cmp	r2, #0
   1b1ac:	bne	1b1f4 <__assert_fail@plt+0x9c84>
   1b1b0:	str	r4, [sp, #-8]!
   1b1b4:	str	lr, [sp, #4]
   1b1b8:	mov	r0, r3
   1b1bc:	bl	11354 <malloc@plt>
   1b1c0:	cmp	r0, #0
   1b1c4:	beq	1b1e0 <__assert_fail@plt+0x9c70>
   1b1c8:	add	r3, r0, #8
   1b1cc:	bic	r3, r3, #15
   1b1d0:	rsb	r2, r0, #8
   1b1d4:	add	r3, r3, r2
   1b1d8:	add	r0, r0, r3
   1b1dc:	strb	r3, [r0, #-1]
   1b1e0:	ldr	r4, [sp]
   1b1e4:	add	sp, sp, #4
   1b1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1ec:	mov	r2, #1
   1b1f0:	b	1b1a8 <__assert_fail@plt+0x9c38>
   1b1f4:	mov	r0, #0
   1b1f8:	bx	lr
   1b1fc:	str	r4, [sp, #-8]!
   1b200:	str	lr, [sp, #4]
   1b204:	tst	r0, #7
   1b208:	bne	1b220 <__assert_fail@plt+0x9cb0>
   1b20c:	tst	r0, #8
   1b210:	bne	1b224 <__assert_fail@plt+0x9cb4>
   1b214:	ldr	r4, [sp]
   1b218:	add	sp, sp, #4
   1b21c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b220:	bl	11540 <abort@plt>
   1b224:	ldrb	r3, [r0, #-1]
   1b228:	sub	r0, r0, r3
   1b22c:	bl	1ae00 <__assert_fail@plt+0x9890>
   1b230:	b	1b214 <__assert_fail@plt+0x9ca4>
   1b234:	str	r4, [sp, #-8]!
   1b238:	str	lr, [sp, #4]
   1b23c:	mov	r4, r0
   1b240:	bl	111ec <wcwidth@plt>
   1b244:	cmp	r0, #0
   1b248:	blt	1b258 <__assert_fail@plt+0x9ce8>
   1b24c:	ldr	r4, [sp]
   1b250:	add	sp, sp, #4
   1b254:	pop	{pc}		; (ldr pc, [sp], #4)
   1b258:	mov	r0, r4
   1b25c:	bl	112a0 <iswcntrl@plt>
   1b260:	clz	r0, r0
   1b264:	lsr	r0, r0, #5
   1b268:	b	1b24c <__assert_fail@plt+0x9cdc>
   1b26c:	strd	r4, [sp, #-16]!
   1b270:	str	r6, [sp, #8]
   1b274:	str	lr, [sp, #12]
   1b278:	mov	r5, r0
   1b27c:	mov	r4, r1
   1b280:	ldr	r3, [r1], #16
   1b284:	cmp	r3, r1
   1b288:	strne	r3, [r0]
   1b28c:	beq	1b2bc <__assert_fail@plt+0x9d4c>
   1b290:	ldr	r3, [r4, #4]
   1b294:	str	r3, [r5, #4]
   1b298:	ldrb	r3, [r4, #8]
   1b29c:	strb	r3, [r5, #8]
   1b2a0:	cmp	r3, #0
   1b2a4:	ldrne	r3, [r4, #12]
   1b2a8:	strne	r3, [r5, #12]
   1b2ac:	ldrd	r4, [sp]
   1b2b0:	ldr	r6, [sp, #8]
   1b2b4:	add	sp, sp, #12
   1b2b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2bc:	add	r6, r0, #16
   1b2c0:	ldr	r2, [r4, #4]
   1b2c4:	mov	r0, r6
   1b2c8:	bl	1121c <memcpy@plt>
   1b2cc:	str	r6, [r5]
   1b2d0:	b	1b290 <__assert_fail@plt+0x9d20>
   1b2d4:	movw	r3, #55700	; 0xd994
   1b2d8:	movt	r3, #1
   1b2dc:	lsr	r2, r0, #5
   1b2e0:	and	r0, r0, #31
   1b2e4:	ldr	r3, [r3, r2, lsl #2]
   1b2e8:	lsr	r0, r3, r0
   1b2ec:	and	r0, r0, #1
   1b2f0:	bx	lr
   1b2f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b2f8:	strd	r6, [sp, #8]
   1b2fc:	str	lr, [sp, #16]
   1b300:	sub	sp, sp, #60	; 0x3c
   1b304:	mov	r4, r0
   1b308:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1b30c:	cmp	r0, #1
   1b310:	bhi	1b338 <__assert_fail@plt+0x9dc8>
   1b314:	mov	r0, r4
   1b318:	bl	113c0 <strlen@plt>
   1b31c:	mov	r4, r0
   1b320:	mov	r0, r4
   1b324:	add	sp, sp, #60	; 0x3c
   1b328:	ldrd	r4, [sp]
   1b32c:	ldrd	r6, [sp, #8]
   1b330:	add	sp, sp, #16
   1b334:	pop	{pc}		; (ldr pc, [sp], #4)
   1b338:	str	r4, [sp, #16]
   1b33c:	mov	r4, #0
   1b340:	strb	r4, [sp]
   1b344:	mov	r2, #0
   1b348:	mov	r3, #0
   1b34c:	strd	r2, [sp, #4]
   1b350:	strb	r4, [sp, #12]
   1b354:	mov	r5, #1
   1b358:	movw	r6, #55700	; 0xd994
   1b35c:	movt	r6, #1
   1b360:	b	1b434 <__assert_fail@plt+0x9ec4>
   1b364:	add	r0, sp, #4
   1b368:	bl	11234 <mbsinit@plt>
   1b36c:	cmp	r0, #0
   1b370:	beq	1b480 <__assert_fail@plt+0x9f10>
   1b374:	strb	r5, [sp]
   1b378:	ldr	r7, [sp, #16]
   1b37c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1b380:	mov	r1, r0
   1b384:	mov	r0, r7
   1b388:	bl	199f0 <__assert_fail@plt+0x8480>
   1b38c:	add	r3, sp, #4
   1b390:	mov	r2, r0
   1b394:	mov	r1, r7
   1b398:	add	r0, sp, #28
   1b39c:	bl	1af5c <__assert_fail@plt+0x99ec>
   1b3a0:	str	r0, [sp, #20]
   1b3a4:	cmn	r0, #1
   1b3a8:	streq	r5, [sp, #20]
   1b3ac:	moveq	r3, #0
   1b3b0:	strbeq	r3, [sp, #24]
   1b3b4:	beq	1b400 <__assert_fail@plt+0x9e90>
   1b3b8:	cmn	r0, #2
   1b3bc:	beq	1b4a0 <__assert_fail@plt+0x9f30>
   1b3c0:	cmp	r0, #0
   1b3c4:	bne	1b3e8 <__assert_fail@plt+0x9e78>
   1b3c8:	str	r5, [sp, #20]
   1b3cc:	ldr	r3, [sp, #16]
   1b3d0:	ldrb	r3, [r3]
   1b3d4:	cmp	r3, #0
   1b3d8:	bne	1b4b8 <__assert_fail@plt+0x9f48>
   1b3dc:	ldr	r3, [sp, #28]
   1b3e0:	cmp	r3, #0
   1b3e4:	bne	1b4d8 <__assert_fail@plt+0x9f68>
   1b3e8:	strb	r5, [sp, #24]
   1b3ec:	add	r0, sp, #4
   1b3f0:	bl	11234 <mbsinit@plt>
   1b3f4:	cmp	r0, #0
   1b3f8:	movne	r3, #0
   1b3fc:	strbne	r3, [sp]
   1b400:	ldrb	r3, [sp, #24]
   1b404:	cmp	r3, #0
   1b408:	beq	1b418 <__assert_fail@plt+0x9ea8>
   1b40c:	ldr	r3, [sp, #28]
   1b410:	cmp	r3, #0
   1b414:	beq	1b320 <__assert_fail@plt+0x9db0>
   1b418:	add	r4, r4, #1
   1b41c:	ldr	r3, [sp, #16]
   1b420:	ldr	r2, [sp, #20]
   1b424:	add	r3, r3, r2
   1b428:	str	r3, [sp, #16]
   1b42c:	mov	r3, #0
   1b430:	strb	r3, [sp, #12]
   1b434:	ldrb	r3, [sp, #12]
   1b438:	cmp	r3, #0
   1b43c:	bne	1b400 <__assert_fail@plt+0x9e90>
   1b440:	ldrb	r3, [sp]
   1b444:	cmp	r3, #0
   1b448:	bne	1b378 <__assert_fail@plt+0x9e08>
   1b44c:	ldr	r1, [sp, #16]
   1b450:	ldrb	r3, [r1]
   1b454:	lsr	r2, r3, #5
   1b458:	and	r3, r3, #31
   1b45c:	ldr	r2, [r6, r2, lsl #2]
   1b460:	lsr	r3, r2, r3
   1b464:	tst	r3, #1
   1b468:	beq	1b364 <__assert_fail@plt+0x9df4>
   1b46c:	str	r5, [sp, #20]
   1b470:	ldrb	r3, [r1]
   1b474:	str	r3, [sp, #28]
   1b478:	strb	r5, [sp, #24]
   1b47c:	b	1b400 <__assert_fail@plt+0x9e90>
   1b480:	movw	r3, #55732	; 0xd9b4
   1b484:	movt	r3, #1
   1b488:	mov	r2, #143	; 0x8f
   1b48c:	movw	r1, #54464	; 0xd4c0
   1b490:	movt	r1, #1
   1b494:	movw	r0, #54476	; 0xd4cc
   1b498:	movt	r0, #1
   1b49c:	bl	11570 <__assert_fail@plt>
   1b4a0:	ldr	r0, [sp, #16]
   1b4a4:	bl	113c0 <strlen@plt>
   1b4a8:	str	r0, [sp, #20]
   1b4ac:	mov	r3, #0
   1b4b0:	strb	r3, [sp, #24]
   1b4b4:	b	1b400 <__assert_fail@plt+0x9e90>
   1b4b8:	movw	r3, #55732	; 0xd9b4
   1b4bc:	movt	r3, #1
   1b4c0:	mov	r2, #171	; 0xab
   1b4c4:	movw	r1, #54464	; 0xd4c0
   1b4c8:	movt	r1, #1
   1b4cc:	movw	r0, #54500	; 0xd4e4
   1b4d0:	movt	r0, #1
   1b4d4:	bl	11570 <__assert_fail@plt>
   1b4d8:	movw	r3, #55732	; 0xd9b4
   1b4dc:	movt	r3, #1
   1b4e0:	mov	r2, #172	; 0xac
   1b4e4:	movw	r1, #54464	; 0xd4c0
   1b4e8:	movt	r1, #1
   1b4ec:	movw	r0, #54524	; 0xd4fc
   1b4f0:	movt	r0, #1
   1b4f4:	bl	11570 <__assert_fail@plt>
   1b4f8:	strd	r4, [sp, #-16]!
   1b4fc:	str	r6, [sp, #8]
   1b500:	str	lr, [sp, #12]
   1b504:	mov	r6, r1
   1b508:	mov	r4, r2
   1b50c:	mov	r1, #0
   1b510:	bl	1148c <setlocale@plt>
   1b514:	subs	r5, r0, #0
   1b518:	beq	1b55c <__assert_fail@plt+0x9fec>
   1b51c:	mov	r0, r5
   1b520:	bl	113c0 <strlen@plt>
   1b524:	cmp	r4, r0
   1b528:	bhi	1b578 <__assert_fail@plt+0xa008>
   1b52c:	cmp	r4, #0
   1b530:	moveq	r0, #34	; 0x22
   1b534:	beq	1b58c <__assert_fail@plt+0xa01c>
   1b538:	sub	r4, r4, #1
   1b53c:	mov	r2, r4
   1b540:	mov	r1, r5
   1b544:	mov	r0, r6
   1b548:	bl	1121c <memcpy@plt>
   1b54c:	mov	r3, #0
   1b550:	strb	r3, [r6, r4]
   1b554:	mov	r0, #34	; 0x22
   1b558:	b	1b58c <__assert_fail@plt+0xa01c>
   1b55c:	cmp	r4, #0
   1b560:	moveq	r0, #22
   1b564:	beq	1b58c <__assert_fail@plt+0xa01c>
   1b568:	mov	r3, #0
   1b56c:	strb	r3, [r6]
   1b570:	mov	r0, #22
   1b574:	b	1b58c <__assert_fail@plt+0xa01c>
   1b578:	add	r2, r0, #1
   1b57c:	mov	r1, r5
   1b580:	mov	r0, r6
   1b584:	bl	1121c <memcpy@plt>
   1b588:	mov	r0, #0
   1b58c:	ldrd	r4, [sp]
   1b590:	ldr	r6, [sp, #8]
   1b594:	add	sp, sp, #12
   1b598:	pop	{pc}		; (ldr pc, [sp], #4)
   1b59c:	str	r4, [sp, #-8]!
   1b5a0:	str	lr, [sp, #4]
   1b5a4:	mov	r1, #0
   1b5a8:	bl	1148c <setlocale@plt>
   1b5ac:	ldr	r4, [sp]
   1b5b0:	add	sp, sp, #4
   1b5b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5b8:	str	r4, [sp, #-8]!
   1b5bc:	str	lr, [sp, #4]
   1b5c0:	mov	r2, #3
   1b5c4:	mov	r1, #0
   1b5c8:	bl	1aae0 <__assert_fail@plt+0x9570>
   1b5cc:	ldr	r4, [sp]
   1b5d0:	add	sp, sp, #4
   1b5d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b5dc:	mov	r7, r0
   1b5e0:	ldr	r6, [pc, #72]	; 1b630 <__assert_fail@plt+0xa0c0>
   1b5e4:	ldr	r5, [pc, #72]	; 1b634 <__assert_fail@plt+0xa0c4>
   1b5e8:	add	r6, pc, r6
   1b5ec:	add	r5, pc, r5
   1b5f0:	sub	r6, r6, r5
   1b5f4:	mov	r8, r1
   1b5f8:	mov	r9, r2
   1b5fc:	bl	11178 <fdopen@plt-0x20>
   1b600:	asrs	r6, r6, #2
   1b604:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b608:	mov	r4, #0
   1b60c:	add	r4, r4, #1
   1b610:	ldr	r3, [r5], #4
   1b614:	mov	r2, r9
   1b618:	mov	r1, r8
   1b61c:	mov	r0, r7
   1b620:	blx	r3
   1b624:	cmp	r6, r4
   1b628:	bne	1b60c <__assert_fail@plt+0xa09c>
   1b62c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b630:	andeq	r2, r1, r4, lsr #18
   1b634:	andeq	r2, r1, ip, lsl r9
   1b638:	bx	lr
   1b63c:	ldr	r3, [pc, #12]	; 1b650 <__assert_fail@plt+0xa0e0>
   1b640:	mov	r1, #0
   1b644:	add	r3, pc, r3
   1b648:	ldr	r2, [r3]
   1b64c:	b	11408 <__cxa_atexit@plt>
   1b650:	andeq	r2, r1, r4, lsl fp

Disassembly of section .fini:

0001b654 <.fini>:
   1b654:	push	{r3, lr}
   1b658:	pop	{r3, pc}
