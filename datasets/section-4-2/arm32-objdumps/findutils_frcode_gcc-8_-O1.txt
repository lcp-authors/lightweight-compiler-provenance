
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b1c <.init>:
   10b1c:	push	{r3, lr}
   10b20:	bl	10d94 <__assert_fail@plt+0x48>
   10b24:	pop	{r3, pc}

Disassembly of section .plt:

00010b28 <calloc@plt-0x14>:
   10b28:	push	{lr}		; (str lr, [sp, #-4]!)
   10b2c:	ldr	lr, [pc, #4]	; 10b38 <calloc@plt-0x4>
   10b30:	add	lr, pc, lr
   10b34:	ldr	pc, [lr, #8]!
   10b38:	andeq	r5, r1, r8, asr #9

00010b3c <calloc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #86016	; 0x15000
   10b44:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b48 <strcmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #86016	; 0x15000
   10b50:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b54 <strtol@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #86016	; 0x15000
   10b5c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b60 <printf@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #86016	; 0x15000
   10b68:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b6c <fflush@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #86016	; 0x15000
   10b74:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b78 <free@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #86016	; 0x15000
   10b80:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b84 <ferror@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #86016	; 0x15000
   10b8c:	ldr	pc, [ip, #1176]!	; 0x498

00010b90 <_exit@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #86016	; 0x15000
   10b98:	ldr	pc, [ip, #1168]!	; 0x490

00010b9c <memcpy@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #86016	; 0x15000
   10ba4:	ldr	pc, [ip, #1160]!	; 0x488

00010ba8 <mbsinit@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #86016	; 0x15000
   10bb0:	ldr	pc, [ip, #1152]!	; 0x480

00010bb4 <memcmp@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #86016	; 0x15000
   10bbc:	ldr	pc, [ip, #1144]!	; 0x478

00010bc0 <dcgettext@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #86016	; 0x15000
   10bc8:	ldr	pc, [ip, #1136]!	; 0x470

00010bcc <realloc@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #86016	; 0x15000
   10bd4:	ldr	pc, [ip, #1128]!	; 0x468

00010bd8 <iswprint@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #86016	; 0x15000
   10be0:	ldr	pc, [ip, #1120]!	; 0x460

00010be4 <fwrite@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #86016	; 0x15000
   10bec:	ldr	pc, [ip, #1112]!	; 0x458

00010bf0 <lseek64@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #86016	; 0x15000
   10bf8:	ldr	pc, [ip, #1104]!	; 0x450

00010bfc <__ctype_get_mb_cur_max@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #86016	; 0x15000
   10c04:	ldr	pc, [ip, #1096]!	; 0x448

00010c08 <__fpending@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #86016	; 0x15000
   10c10:	ldr	pc, [ip, #1088]!	; 0x440

00010c14 <mbrtowc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #86016	; 0x15000
   10c1c:	ldr	pc, [ip, #1080]!	; 0x438

00010c20 <error@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #86016	; 0x15000
   10c28:	ldr	pc, [ip, #1072]!	; 0x430

00010c2c <malloc@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #86016	; 0x15000
   10c34:	ldr	pc, [ip, #1064]!	; 0x428

00010c38 <__libc_start_main@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #86016	; 0x15000
   10c40:	ldr	pc, [ip, #1056]!	; 0x420

00010c44 <__freading@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #1048]!	; 0x418

00010c50 <__gmon_start__@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #1040]!	; 0x410

00010c5c <getopt_long@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #1032]!	; 0x408

00010c68 <__ctype_b_loc@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #1024]!	; 0x400

00010c74 <exit@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c80 <strlen@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c8c <fprintf@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c98 <__errno_location@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca4 <__cxa_atexit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb0 <memset@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cbc <fileno@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc8 <fclose@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd4 <fseeko64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce0 <setlocale@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cec <strrchr@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #936]!	; 0x3a8

00010cf8 <nl_langinfo@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #928]!	; 0x3a0

00010d04 <fputc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #920]!	; 0x398

00010d10 <putc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #912]!	; 0x390

00010d1c <getdelim@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #904]!	; 0x388

00010d28 <fputs@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #896]!	; 0x380

00010d34 <strncmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #888]!	; 0x378

00010d40 <abort@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #880]!	; 0x370

00010d4c <__assert_fail@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #872]!	; 0x368

Disassembly of section .text:

00010d58 <.text>:
   10d58:	mov	fp, #0
   10d5c:	mov	lr, #0
   10d60:	pop	{r1}		; (ldr r1, [sp], #4)
   10d64:	mov	r2, sp
   10d68:	push	{r2}		; (str r2, [sp, #-4]!)
   10d6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d70:	ldr	ip, [pc, #16]	; 10d88 <__assert_fail@plt+0x3c>
   10d74:	push	{ip}		; (str ip, [sp, #-4]!)
   10d78:	ldr	r0, [pc, #12]	; 10d8c <__assert_fail@plt+0x40>
   10d7c:	ldr	r3, [pc, #12]	; 10d90 <__assert_fail@plt+0x44>
   10d80:	bl	10c38 <__libc_start_main@plt>
   10d84:	bl	10d40 <abort@plt>
   10d88:	andeq	r4, r1, r4, asr #19
   10d8c:	andeq	r0, r1, r8, lsl pc
   10d90:	andeq	r4, r1, r4, ror #18
   10d94:	ldr	r3, [pc, #20]	; 10db0 <__assert_fail@plt+0x64>
   10d98:	ldr	r2, [pc, #20]	; 10db4 <__assert_fail@plt+0x68>
   10d9c:	add	r3, pc, r3
   10da0:	ldr	r2, [r3, r2]
   10da4:	cmp	r2, #0
   10da8:	bxeq	lr
   10dac:	b	10c50 <__gmon_start__@plt>
   10db0:	andeq	r5, r1, ip, asr r2
   10db4:	andeq	r0, r0, r0, asr #1
   10db8:	ldr	r0, [pc, #24]	; 10dd8 <__assert_fail@plt+0x8c>
   10dbc:	ldr	r3, [pc, #24]	; 10ddc <__assert_fail@plt+0x90>
   10dc0:	cmp	r3, r0
   10dc4:	bxeq	lr
   10dc8:	ldr	r3, [pc, #16]	; 10de0 <__assert_fail@plt+0x94>
   10dcc:	cmp	r3, #0
   10dd0:	bxeq	lr
   10dd4:	bx	r3
   10dd8:	andeq	r6, r2, r4, lsl r1
   10ddc:	andeq	r6, r2, r4, lsl r1
   10de0:	andeq	r0, r0, r0
   10de4:	ldr	r0, [pc, #36]	; 10e10 <__assert_fail@plt+0xc4>
   10de8:	ldr	r1, [pc, #36]	; 10e14 <__assert_fail@plt+0xc8>
   10dec:	sub	r1, r1, r0
   10df0:	asr	r1, r1, #2
   10df4:	add	r1, r1, r1, lsr #31
   10df8:	asrs	r1, r1, #1
   10dfc:	bxeq	lr
   10e00:	ldr	r3, [pc, #16]	; 10e18 <__assert_fail@plt+0xcc>
   10e04:	cmp	r3, #0
   10e08:	bxeq	lr
   10e0c:	bx	r3
   10e10:	andeq	r6, r2, r4, lsl r1
   10e14:	andeq	r6, r2, r4, lsl r1
   10e18:	andeq	r0, r0, r0
   10e1c:	push	{r4, lr}
   10e20:	ldr	r4, [pc, #24]	; 10e40 <__assert_fail@plt+0xf4>
   10e24:	ldrb	r3, [r4]
   10e28:	cmp	r3, #0
   10e2c:	popne	{r4, pc}
   10e30:	bl	10db8 <__assert_fail@plt+0x6c>
   10e34:	mov	r3, #1
   10e38:	strb	r3, [r4]
   10e3c:	pop	{r4, pc}
   10e40:	andeq	r6, r2, ip, lsr r1
   10e44:	b	10de4 <__assert_fail@plt+0x98>
   10e48:	str	r4, [sp, #-8]!
   10e4c:	str	lr, [sp, #4]
   10e50:	bl	10c98 <__errno_location@plt>
   10e54:	ldr	r4, [r0]
   10e58:	mov	r2, #5
   10e5c:	movw	r1, #19012	; 0x4a44
   10e60:	movt	r1, #1
   10e64:	mov	r0, #0
   10e68:	bl	10bc0 <dcgettext@plt>
   10e6c:	mov	r2, r0
   10e70:	mov	r1, r4
   10e74:	mov	r0, #1
   10e78:	bl	10c20 <error@plt>
   10e7c:	str	r4, [sp, #-8]!
   10e80:	str	lr, [sp, #4]
   10e84:	subs	r4, r0, #0
   10e88:	beq	10ecc <__assert_fail@plt+0x180>
   10e8c:	movw	r3, #24872	; 0x6128
   10e90:	movt	r3, #2
   10e94:	ldr	r5, [r3]
   10e98:	mov	r2, #5
   10e9c:	movw	r1, #19024	; 0x4a50
   10ea0:	movt	r1, #1
   10ea4:	mov	r0, #0
   10ea8:	bl	10bc0 <dcgettext@plt>
   10eac:	movw	r3, #24904	; 0x6148
   10eb0:	movt	r3, #2
   10eb4:	ldr	r2, [r3]
   10eb8:	mov	r1, r0
   10ebc:	mov	r0, r5
   10ec0:	bl	10c8c <fprintf@plt>
   10ec4:	mov	r0, r4
   10ec8:	bl	10c74 <exit@plt>
   10ecc:	movw	r4, #24884	; 0x6134
   10ed0:	movt	r4, #2
   10ed4:	ldr	r6, [r4]
   10ed8:	mov	r2, #5
   10edc:	movw	r1, #19064	; 0x4a78
   10ee0:	movt	r1, #1
   10ee4:	mov	r0, #0
   10ee8:	bl	10bc0 <dcgettext@plt>
   10eec:	movw	r5, #24904	; 0x6148
   10ef0:	movt	r5, #2
   10ef4:	ldr	r2, [r5]
   10ef8:	mov	r1, r0
   10efc:	mov	r0, r6
   10f00:	bl	10c8c <fprintf@plt>
   10f04:	ldr	r1, [r5]
   10f08:	ldr	r0, [r4]
   10f0c:	bl	11560 <__assert_fail@plt+0x814>
   10f10:	mov	r0, #0
   10f14:	bl	10c74 <exit@plt>
   10f18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f1c:	strd	r6, [sp, #8]
   10f20:	strd	r8, [sp, #16]
   10f24:	strd	sl, [sp, #24]
   10f28:	str	lr, [sp, #32]
   10f2c:	sub	sp, sp, #44	; 0x2c
   10f30:	str	r0, [sp, #16]
   10f34:	str	r1, [sp, #20]
   10f38:	ldr	r0, [r1]
   10f3c:	cmp	r0, #0
   10f40:	movweq	r0, #19112	; 0x4aa8
   10f44:	movteq	r0, #1
   10f48:	bl	11704 <__assert_fail@plt+0x9b8>
   10f4c:	movw	r0, #5620	; 0x15f4
   10f50:	movt	r0, #1
   10f54:	bl	149c8 <__assert_fail@plt+0x3c7c>
   10f58:	subs	r3, r0, #0
   10f5c:	str	r3, [sp, #12]
   10f60:	bne	10fb8 <__assert_fail@plt+0x26c>
   10f64:	movw	r4, #1026	; 0x402
   10f68:	str	r4, [sp, #32]
   10f6c:	mov	r0, r4
   10f70:	bl	13f54 <__assert_fail@plt+0x3208>
   10f74:	str	r0, [sp, #36]	; 0x24
   10f78:	mov	r0, r4
   10f7c:	bl	13f54 <__assert_fail@plt+0x3208>
   10f80:	mov	r5, r0
   10f84:	mov	r3, #0
   10f88:	strb	r3, [r0]
   10f8c:	ldr	r8, [sp, #12]
   10f90:	mov	sl, r8
   10f94:	mov	fp, #10
   10f98:	movw	r6, #18924	; 0x49ec
   10f9c:	movt	r6, #1
   10fa0:	movw	r4, #19356	; 0x4b9c
   10fa4:	movt	r4, #1
   10fa8:	movw	r9, #24888	; 0x6138
   10fac:	movt	r9, #2
   10fb0:	mov	r7, #0
   10fb4:	b	10ff0 <__assert_fail@plt+0x2a4>
   10fb8:	bl	10c98 <__errno_location@plt>
   10fbc:	ldr	r4, [r0]
   10fc0:	mov	r2, #5
   10fc4:	movw	r1, #19120	; 0x4ab0
   10fc8:	movt	r1, #1
   10fcc:	mov	r0, #0
   10fd0:	bl	10bc0 <dcgettext@plt>
   10fd4:	mov	r2, r0
   10fd8:	mov	r1, r4
   10fdc:	mov	r0, #1
   10fe0:	bl	10c20 <error@plt>
   10fe4:	ldr	fp, [sp, #12]
   10fe8:	cmp	r0, #48	; 0x30
   10fec:	bne	11194 <__assert_fail@plt+0x448>
   10ff0:	str	r7, [sp]
   10ff4:	mov	r3, r6
   10ff8:	mov	r2, r4
   10ffc:	ldr	r1, [sp, #20]
   11000:	ldr	r0, [sp, #16]
   11004:	bl	10c5c <getopt_long@plt>
   11008:	cmn	r0, #1
   1100c:	beq	1119c <__assert_fail@plt+0x450>
   11010:	cmp	r0, #83	; 0x53
   11014:	beq	11058 <__assert_fail@plt+0x30c>
   11018:	ble	10fe4 <__assert_fail@plt+0x298>
   1101c:	cmp	r0, #104	; 0x68
   11020:	beq	1118c <__assert_fail@plt+0x440>
   11024:	cmp	r0, #118	; 0x76
   11028:	bne	11194 <__assert_fail@plt+0x448>
   1102c:	movw	r0, #19112	; 0x4aa8
   11030:	movt	r0, #1
   11034:	bl	11498 <__assert_fail@plt+0x74c>
   11038:	mov	r0, #0
   1103c:	add	sp, sp, #44	; 0x2c
   11040:	ldrd	r4, [sp]
   11044:	ldrd	r6, [sp, #8]
   11048:	ldrd	r8, [sp, #16]
   1104c:	ldrd	sl, [sp, #24]
   11050:	add	sp, sp, #32
   11054:	pop	{pc}		; (ldr pc, [sp], #4)
   11058:	ldr	r8, [r9]
   1105c:	bl	10c98 <__errno_location@plt>
   11060:	mov	r7, r0
   11064:	mov	r3, #0
   11068:	str	r3, [r0]
   1106c:	mov	r2, #10
   11070:	add	r1, sp, #28
   11074:	mov	r0, r8
   11078:	bl	10b54 <strtol@plt>
   1107c:	subs	sl, r0, #0
   11080:	bne	110cc <__assert_fail@plt+0x380>
   11084:	ldr	r3, [r9]
   11088:	ldr	r2, [sp, #28]
   1108c:	cmp	r2, r3
   11090:	beq	110ac <__assert_fail@plt+0x360>
   11094:	ldr	r3, [sp, #28]
   11098:	ldrb	r3, [r3]
   1109c:	cmp	r3, #0
   110a0:	bne	110f4 <__assert_fail@plt+0x3a8>
   110a4:	mov	r8, #1
   110a8:	b	10fb0 <__assert_fail@plt+0x264>
   110ac:	mov	r2, #5
   110b0:	movw	r1, #19156	; 0x4ad4
   110b4:	movt	r1, #1
   110b8:	bl	10bc0 <dcgettext@plt>
   110bc:	mov	r2, r0
   110c0:	mov	r1, #0
   110c4:	mov	r0, #1
   110c8:	bl	10c20 <error@plt>
   110cc:	sub	r2, sl, #-2147483647	; 0x80000001
   110d0:	cmn	r2, #3
   110d4:	bls	1114c <__assert_fail@plt+0x400>
   110d8:	ldr	r3, [r7]
   110dc:	cmp	r3, #0
   110e0:	bne	11124 <__assert_fail@plt+0x3d8>
   110e4:	ldr	r3, [sp, #28]
   110e8:	ldrb	r3, [r3]
   110ec:	cmp	r3, #0
   110f0:	beq	11164 <__assert_fail@plt+0x418>
   110f4:	mov	r2, #5
   110f8:	movw	r1, #19268	; 0x4b44
   110fc:	movt	r1, #1
   11100:	mov	r0, #0
   11104:	bl	10bc0 <dcgettext@plt>
   11108:	ldr	r3, [sp, #28]
   1110c:	str	r3, [sp]
   11110:	mov	r3, r8
   11114:	mov	r2, r0
   11118:	mov	r1, #0
   1111c:	mov	r0, #1
   11120:	bl	10c20 <error@plt>
   11124:	mov	r2, #5
   11128:	movw	r1, #19216	; 0x4b10
   1112c:	movt	r1, #1
   11130:	mov	r0, #0
   11134:	bl	10bc0 <dcgettext@plt>
   11138:	mov	r3, r8
   1113c:	mov	r2, r0
   11140:	mov	r1, #0
   11144:	mov	r0, #1
   11148:	bl	10c20 <error@plt>
   1114c:	ldr	r2, [sp, #28]
   11150:	ldrb	r2, [r2]
   11154:	cmp	r2, #0
   11158:	bne	110f4 <__assert_fail@plt+0x3a8>
   1115c:	cmp	sl, #1
   11160:	bls	110a4 <__assert_fail@plt+0x358>
   11164:	mov	r2, #5
   11168:	movw	r1, #19312	; 0x4b70
   1116c:	movt	r1, #1
   11170:	mov	r0, #0
   11174:	bl	10bc0 <dcgettext@plt>
   11178:	mov	r3, sl
   1117c:	mov	r2, r0
   11180:	mov	r1, #0
   11184:	mov	r0, #1
   11188:	bl	10c20 <error@plt>
   1118c:	mov	r0, #0
   11190:	bl	10e7c <__assert_fail@plt+0x130>
   11194:	mov	r0, #1
   11198:	bl	10e7c <__assert_fail@plt+0x130>
   1119c:	movw	r3, #24864	; 0x6120
   111a0:	movt	r3, #2
   111a4:	ldr	r3, [r3]
   111a8:	ldr	r2, [sp, #16]
   111ac:	cmp	r3, r2
   111b0:	bne	11210 <__assert_fail@plt+0x4c4>
   111b4:	cmp	r8, #0
   111b8:	beq	1123c <__assert_fail@plt+0x4f0>
   111bc:	cmp	sl, #0
   111c0:	movw	r4, #24884	; 0x6134
   111c4:	movt	r4, #2
   111c8:	ldr	r1, [r4]
   111cc:	movne	r0, #49	; 0x31
   111d0:	moveq	r0, #48	; 0x30
   111d4:	bl	10d04 <fputc@plt>
   111d8:	ldr	r1, [r4]
   111dc:	mov	r0, #0
   111e0:	bl	10d04 <fputc@plt>
   111e4:	ldr	r9, [sp, #12]
   111e8:	movw	sl, #1026	; 0x402
   111ec:	movw	r3, #24880	; 0x6130
   111f0:	movt	r3, #2
   111f4:	str	r3, [sp, #16]
   111f8:	movw	r3, #19424	; 0x4be0
   111fc:	movt	r3, #1
   11200:	str	r3, [sp, #20]
   11204:	movw	r7, #24884	; 0x6134
   11208:	movt	r7, #2
   1120c:	b	1136c <__assert_fail@plt+0x620>
   11210:	mov	r2, #5
   11214:	movw	r1, #19364	; 0x4ba4
   11218:	movt	r1, #1
   1121c:	mov	r0, #0
   11220:	bl	10bc0 <dcgettext@plt>
   11224:	mov	r2, r0
   11228:	mov	r1, #0
   1122c:	mov	r0, r1
   11230:	bl	10c20 <error@plt>
   11234:	mov	r0, #1
   11238:	bl	10e7c <__assert_fail@plt+0x130>
   1123c:	movw	r3, #24884	; 0x6134
   11240:	movt	r3, #2
   11244:	ldr	r3, [r3]
   11248:	mov	r2, #10
   1124c:	mov	r1, #1
   11250:	ldr	r0, [pc, #568]	; 11490 <__assert_fail@plt+0x744>
   11254:	bl	10be4 <fwrite@plt>
   11258:	cmp	r0, #10
   1125c:	beq	111e4 <__assert_fail@plt+0x498>
   11260:	bl	10c98 <__errno_location@plt>
   11264:	ldr	r4, [r0]
   11268:	mov	r2, #5
   1126c:	movw	r1, #19388	; 0x4bbc
   11270:	movt	r1, #1
   11274:	mov	r0, #0
   11278:	bl	10bc0 <dcgettext@plt>
   1127c:	mov	r2, r0
   11280:	mov	r1, r4
   11284:	mov	r0, #1
   11288:	bl	10c20 <error@plt>
   1128c:	mov	r2, #5
   11290:	ldr	r1, [sp, #20]
   11294:	mov	r0, #0
   11298:	bl	10bc0 <dcgettext@plt>
   1129c:	mov	r2, r0
   112a0:	mov	r1, #0
   112a4:	mov	r0, r1
   112a8:	bl	10c20 <error@plt>
   112ac:	b	113a8 <__assert_fail@plt+0x65c>
   112b0:	mov	r4, r5
   112b4:	b	11408 <__assert_fail@plt+0x6bc>
   112b8:	bl	10e48 <__assert_fail@plt+0xfc>
   112bc:	ldr	r3, [pc, #464]	; 11494 <__assert_fail@plt+0x748>
   112c0:	mov	r2, #104	; 0x68
   112c4:	movw	r1, #19472	; 0x4c10
   112c8:	movt	r1, #1
   112cc:	movw	r0, #19484	; 0x4c1c
   112d0:	movt	r0, #1
   112d4:	bl	10d4c <__assert_fail@plt>
   112d8:	ldr	r3, [pc, #436]	; 11494 <__assert_fail@plt+0x748>
   112dc:	mov	r2, #105	; 0x69
   112e0:	movw	r1, #19472	; 0x4c10
   112e4:	movt	r1, #1
   112e8:	movw	r0, #19500	; 0x4c2c
   112ec:	movt	r0, #1
   112f0:	bl	10d4c <__assert_fail@plt>
   112f4:	mov	r1, r8
   112f8:	mov	r0, r6
   112fc:	bl	10d10 <putc@plt>
   11300:	cmn	r0, #1
   11304:	bne	11320 <__assert_fail@plt+0x5d4>
   11308:	b	11470 <__assert_fail@plt+0x724>
   1130c:	ldr	r1, [r7]
   11310:	mov	r0, r6
   11314:	bl	10d10 <putc@plt>
   11318:	cmn	r0, #1
   1131c:	beq	11474 <__assert_fail@plt+0x728>
   11320:	ldr	r1, [r7]
   11324:	ldr	r0, [sp, #36]	; 0x24
   11328:	add	r0, r0, r4
   1132c:	bl	10d28 <fputs@plt>
   11330:	cmn	r0, #1
   11334:	beq	11478 <__assert_fail@plt+0x72c>
   11338:	ldr	r1, [r7]
   1133c:	mov	r0, #0
   11340:	bl	10d10 <putc@plt>
   11344:	cmn	r0, #1
   11348:	beq	11478 <__assert_fail@plt+0x72c>
   1134c:	ldr	r3, [sp, #36]	; 0x24
   11350:	ldr	r2, [sp, #32]
   11354:	str	r5, [sp, #36]	; 0x24
   11358:	str	sl, [sp, #32]
   1135c:	ldr	r8, [sp, #12]
   11360:	mov	r9, r4
   11364:	mov	sl, r2
   11368:	mov	r5, r3
   1136c:	ldr	r3, [sp, #16]
   11370:	ldr	r3, [r3]
   11374:	mov	r2, fp
   11378:	add	r1, sp, #32
   1137c:	add	r0, sp, #36	; 0x24
   11380:	bl	10d1c <getdelim@plt>
   11384:	cmp	r0, #0
   11388:	ble	1147c <__assert_fail@plt+0x730>
   1138c:	sub	r0, r0, #1
   11390:	ldr	r3, [sp, #36]	; 0x24
   11394:	ldrb	r2, [r3, r0]
   11398:	cmp	r2, fp
   1139c:	moveq	r2, #0
   113a0:	strbeq	r2, [r3, r0]
   113a4:	bne	1128c <__assert_fail@plt+0x540>
   113a8:	ldr	r3, [sp, #36]	; 0x24
   113ac:	ldrb	r1, [r5]
   113b0:	ldrb	r0, [r3]
   113b4:	cmp	r0, r1
   113b8:	movne	r2, #0
   113bc:	moveq	r2, #1
   113c0:	cmp	r1, #0
   113c4:	moveq	r2, #0
   113c8:	cmp	r2, #0
   113cc:	beq	112b0 <__assert_fail@plt+0x564>
   113d0:	sub	r0, r5, #-2147483646	; 0x80000002
   113d4:	mov	r4, r5
   113d8:	ldrb	r1, [r4, #1]!
   113dc:	ldrb	ip, [r3, #1]!
   113e0:	cmp	ip, r1
   113e4:	movne	r2, #0
   113e8:	moveq	r2, #1
   113ec:	cmp	r1, #0
   113f0:	moveq	r2, #0
   113f4:	cmp	r2, #0
   113f8:	beq	11408 <__assert_fail@plt+0x6bc>
   113fc:	cmp	r4, r0
   11400:	bne	113d8 <__assert_fail@plt+0x68c>
   11404:	mov	r4, r0
   11408:	sub	r4, r4, r5
   1140c:	sub	r6, r4, r9
   11410:	add	r3, r6, #32768	; 0x8000
   11414:	cmp	r3, #65536	; 0x10000
   11418:	rsbcs	r6, r9, #0
   1141c:	ldrcs	r4, [sp, #12]
   11420:	cmp	r8, #0
   11424:	bne	11320 <__assert_fail@plt+0x5d4>
   11428:	add	r3, r6, #127	; 0x7f
   1142c:	cmp	r3, #254	; 0xfe
   11430:	bls	1130c <__assert_fail@plt+0x5c0>
   11434:	ldr	r1, [r7]
   11438:	mov	r0, #128	; 0x80
   1143c:	bl	10d10 <putc@plt>
   11440:	cmn	r0, #1
   11444:	beq	112b8 <__assert_fail@plt+0x56c>
   11448:	ldr	r8, [r7]
   1144c:	cmp	r6, #32768	; 0x8000
   11450:	bge	112bc <__assert_fail@plt+0x570>
   11454:	cmn	r6, #32768	; 0x8000
   11458:	blt	112d8 <__assert_fail@plt+0x58c>
   1145c:	mov	r1, r8
   11460:	asr	r0, r6, #8
   11464:	bl	10d10 <putc@plt>
   11468:	cmn	r0, #1
   1146c:	bne	112f4 <__assert_fail@plt+0x5a8>
   11470:	bl	10e48 <__assert_fail@plt+0xfc>
   11474:	bl	10e48 <__assert_fail@plt+0xfc>
   11478:	bl	10e48 <__assert_fail@plt+0xfc>
   1147c:	ldr	r0, [sp, #36]	; 0x24
   11480:	bl	14510 <__assert_fail@plt+0x37c4>
   11484:	mov	r0, r5
   11488:	bl	14510 <__assert_fail@plt+0x37c4>
   1148c:	b	11038 <__assert_fail@plt+0x2ec>
   11490:	andeq	r4, r1, ip, lsr #20
   11494:	andeq	r4, r1, r8, lsr sl
   11498:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1149c:	strd	r6, [sp, #8]
   114a0:	str	r8, [sp, #16]
   114a4:	str	lr, [sp, #20]
   114a8:	sub	sp, sp, #16
   114ac:	mov	r5, r0
   114b0:	movw	r3, #24872	; 0x6128
   114b4:	movt	r3, #2
   114b8:	ldr	r0, [r3]
   114bc:	bl	144a0 <__assert_fail@plt+0x3754>
   114c0:	movw	r3, #24884	; 0x6134
   114c4:	movt	r3, #2
   114c8:	ldr	r4, [r3]
   114cc:	movw	r3, #24780	; 0x60cc
   114d0:	movt	r3, #2
   114d4:	ldr	r6, [r3]
   114d8:	mov	r2, #5
   114dc:	movw	r1, #19540	; 0x4c54
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	bl	10bc0 <dcgettext@plt>
   114ec:	mov	r7, r0
   114f0:	mov	r2, #5
   114f4:	movw	r1, #19556	; 0x4c64
   114f8:	movt	r1, #1
   114fc:	mov	r0, #0
   11500:	bl	10bc0 <dcgettext@plt>
   11504:	mov	r8, r0
   11508:	mov	r2, #5
   1150c:	movw	r1, #19572	; 0x4c74
   11510:	movt	r1, #1
   11514:	mov	r0, #0
   11518:	bl	10bc0 <dcgettext@plt>
   1151c:	mov	r3, #0
   11520:	str	r3, [sp, #12]
   11524:	str	r0, [sp, #8]
   11528:	str	r8, [sp, #4]
   1152c:	str	r7, [sp]
   11530:	mov	r3, r6
   11534:	movw	r2, #19588	; 0x4c84
   11538:	movt	r2, #1
   1153c:	mov	r1, r5
   11540:	mov	r0, r4
   11544:	bl	13e94 <__assert_fail@plt+0x3148>
   11548:	add	sp, sp, #16
   1154c:	ldrd	r4, [sp]
   11550:	ldrd	r6, [sp, #8]
   11554:	ldr	r8, [sp, #16]
   11558:	add	sp, sp, #20
   1155c:	pop	{pc}		; (ldr pc, [sp], #4)
   11560:	strd	r4, [sp, #-12]!
   11564:	str	lr, [sp, #8]
   11568:	sub	sp, sp, #20
   1156c:	mov	r4, r0
   11570:	mov	r5, r1
   11574:	mov	r2, #5
   11578:	movw	r1, #19620	; 0x4ca4
   1157c:	movt	r1, #1
   11580:	mov	r0, #0
   11584:	bl	10bc0 <dcgettext@plt>
   11588:	movw	r3, #19868	; 0x4d9c
   1158c:	movt	r3, #1
   11590:	str	r3, [sp, #8]
   11594:	movw	r3, #19892	; 0x4db4
   11598:	movt	r3, #1
   1159c:	str	r3, [sp, #4]
   115a0:	movw	r3, #19588	; 0x4c84
   115a4:	movt	r3, #1
   115a8:	str	r3, [sp]
   115ac:	mov	r3, r5
   115b0:	movw	r2, #19828	; 0x4d74
   115b4:	movt	r2, #1
   115b8:	mov	r1, r0
   115bc:	mov	r0, r4
   115c0:	bl	10c8c <fprintf@plt>
   115c4:	add	sp, sp, #20
   115c8:	ldrd	r4, [sp]
   115cc:	add	sp, sp, #8
   115d0:	pop	{pc}		; (ldr pc, [sp], #4)
   115d4:	movw	r3, #24896	; 0x6140
   115d8:	movt	r3, #2
   115dc:	str	r0, [r3]
   115e0:	bx	lr
   115e4:	movw	r3, #24896	; 0x6140
   115e8:	movt	r3, #2
   115ec:	strb	r0, [r3, #4]
   115f0:	bx	lr
   115f4:	strd	r4, [sp, #-16]!
   115f8:	str	r6, [sp, #8]
   115fc:	str	lr, [sp, #12]
   11600:	sub	sp, sp, #8
   11604:	movw	r3, #24884	; 0x6134
   11608:	movt	r3, #2
   1160c:	ldr	r0, [r3]
   11610:	bl	14774 <__assert_fail@plt+0x3a28>
   11614:	cmp	r0, #0
   11618:	beq	11640 <__assert_fail@plt+0x8f4>
   1161c:	movw	r3, #24896	; 0x6140
   11620:	movt	r3, #2
   11624:	ldrb	r3, [r3, #4]
   11628:	cmp	r3, #0
   1162c:	beq	1166c <__assert_fail@plt+0x920>
   11630:	bl	10c98 <__errno_location@plt>
   11634:	ldr	r3, [r0]
   11638:	cmp	r3, #32
   1163c:	bne	1166c <__assert_fail@plt+0x920>
   11640:	movw	r3, #24872	; 0x6128
   11644:	movt	r3, #2
   11648:	ldr	r0, [r3]
   1164c:	bl	14774 <__assert_fail@plt+0x3a28>
   11650:	cmp	r0, #0
   11654:	bne	116f4 <__assert_fail@plt+0x9a8>
   11658:	add	sp, sp, #8
   1165c:	ldrd	r4, [sp]
   11660:	ldr	r6, [sp, #8]
   11664:	add	sp, sp, #12
   11668:	pop	{pc}		; (ldr pc, [sp], #4)
   1166c:	mov	r2, #5
   11670:	movw	r1, #19012	; 0x4a44
   11674:	movt	r1, #1
   11678:	mov	r0, #0
   1167c:	bl	10bc0 <dcgettext@plt>
   11680:	mov	r4, r0
   11684:	movw	r3, #24896	; 0x6140
   11688:	movt	r3, #2
   1168c:	ldr	r5, [r3]
   11690:	cmp	r5, #0
   11694:	beq	116d4 <__assert_fail@plt+0x988>
   11698:	bl	10c98 <__errno_location@plt>
   1169c:	ldr	r6, [r0]
   116a0:	mov	r0, r5
   116a4:	bl	137fc <__assert_fail@plt+0x2ab0>
   116a8:	str	r4, [sp]
   116ac:	mov	r3, r0
   116b0:	movw	r2, #19940	; 0x4de4
   116b4:	movt	r2, #1
   116b8:	mov	r1, r6
   116bc:	mov	r0, #0
   116c0:	bl	10c20 <error@plt>
   116c4:	movw	r3, #24784	; 0x60d0
   116c8:	movt	r3, #2
   116cc:	ldr	r0, [r3]
   116d0:	bl	10b90 <_exit@plt>
   116d4:	bl	10c98 <__errno_location@plt>
   116d8:	mov	r3, r4
   116dc:	movw	r2, #19944	; 0x4de8
   116e0:	movt	r2, #1
   116e4:	ldr	r1, [r0]
   116e8:	mov	r0, #0
   116ec:	bl	10c20 <error@plt>
   116f0:	b	116c4 <__assert_fail@plt+0x978>
   116f4:	movw	r3, #24784	; 0x60d0
   116f8:	movt	r3, #2
   116fc:	ldr	r0, [r3]
   11700:	bl	10b90 <_exit@plt>
   11704:	strd	r4, [sp, #-16]!
   11708:	str	r6, [sp, #8]
   1170c:	str	lr, [sp, #12]
   11710:	subs	r4, r0, #0
   11714:	beq	117b0 <__assert_fail@plt+0xa64>
   11718:	mov	r1, #47	; 0x2f
   1171c:	mov	r0, r4
   11720:	bl	10cec <strrchr@plt>
   11724:	subs	r5, r0, #0
   11728:	beq	11788 <__assert_fail@plt+0xa3c>
   1172c:	add	r6, r5, #1
   11730:	sub	r3, r6, r4
   11734:	cmp	r3, #6
   11738:	ble	11788 <__assert_fail@plt+0xa3c>
   1173c:	mov	r2, #7
   11740:	movw	r1, #20004	; 0x4e24
   11744:	movt	r1, #1
   11748:	sub	r0, r5, #6
   1174c:	bl	10d34 <strncmp@plt>
   11750:	cmp	r0, #0
   11754:	bne	11788 <__assert_fail@plt+0xa3c>
   11758:	mov	r2, #3
   1175c:	movw	r1, #20012	; 0x4e2c
   11760:	movt	r1, #1
   11764:	mov	r0, r6
   11768:	bl	10d34 <strncmp@plt>
   1176c:	cmp	r0, #0
   11770:	movne	r4, r6
   11774:	bne	11788 <__assert_fail@plt+0xa3c>
   11778:	add	r4, r5, #4
   1177c:	movw	r3, #24856	; 0x6118
   11780:	movt	r3, #2
   11784:	str	r4, [r3]
   11788:	movw	r3, #24904	; 0x6148
   1178c:	movt	r3, #2
   11790:	str	r4, [r3]
   11794:	movw	r3, #24860	; 0x611c
   11798:	movt	r3, #2
   1179c:	str	r4, [r3]
   117a0:	ldrd	r4, [sp]
   117a4:	ldr	r6, [sp, #8]
   117a8:	add	sp, sp, #12
   117ac:	pop	{pc}		; (ldr pc, [sp], #4)
   117b0:	movw	r3, #24872	; 0x6128
   117b4:	movt	r3, #2
   117b8:	ldr	r3, [r3]
   117bc:	mov	r2, #55	; 0x37
   117c0:	mov	r1, #1
   117c4:	movw	r0, #19948	; 0x4dec
   117c8:	movt	r0, #1
   117cc:	bl	10be4 <fwrite@plt>
   117d0:	bl	10d40 <abort@plt>
   117d4:	mov	r2, #0
   117d8:	mov	r3, #0
   117dc:	strd	r2, [r0]
   117e0:	strd	r2, [r0, #8]
   117e4:	strd	r2, [r0, #16]
   117e8:	strd	r2, [r0, #24]
   117ec:	strd	r2, [r0, #32]
   117f0:	strd	r2, [r0, #40]	; 0x28
   117f4:	cmp	r1, #10
   117f8:	beq	11804 <__assert_fail@plt+0xab8>
   117fc:	str	r1, [r0]
   11800:	bx	lr
   11804:	str	r4, [sp, #-8]!
   11808:	str	lr, [sp, #4]
   1180c:	bl	10d40 <abort@plt>
   11810:	strd	r4, [sp, #-16]!
   11814:	str	r6, [sp, #8]
   11818:	str	lr, [sp, #12]
   1181c:	mov	r5, r0
   11820:	mov	r6, r1
   11824:	mov	r2, #5
   11828:	mov	r1, r0
   1182c:	mov	r0, #0
   11830:	bl	10bc0 <dcgettext@plt>
   11834:	mov	r4, r0
   11838:	cmp	r5, r0
   1183c:	beq	11854 <__assert_fail@plt+0xb08>
   11840:	mov	r0, r4
   11844:	ldrd	r4, [sp]
   11848:	ldr	r6, [sp, #8]
   1184c:	add	sp, sp, #12
   11850:	pop	{pc}		; (ldr pc, [sp], #4)
   11854:	bl	14860 <__assert_fail@plt+0x3b14>
   11858:	ldrb	r3, [r0]
   1185c:	bic	r3, r3, #32
   11860:	cmp	r3, #85	; 0x55
   11864:	bne	118e8 <__assert_fail@plt+0xb9c>
   11868:	ldrb	r3, [r0, #1]
   1186c:	bic	r3, r3, #32
   11870:	cmp	r3, #84	; 0x54
   11874:	bne	118ac <__assert_fail@plt+0xb60>
   11878:	ldrb	r3, [r0, #2]
   1187c:	bic	r3, r3, #32
   11880:	cmp	r3, #70	; 0x46
   11884:	bne	118ac <__assert_fail@plt+0xb60>
   11888:	ldrb	r3, [r0, #3]
   1188c:	cmp	r3, #45	; 0x2d
   11890:	bne	118ac <__assert_fail@plt+0xb60>
   11894:	ldrb	r3, [r0, #4]
   11898:	cmp	r3, #56	; 0x38
   1189c:	bne	118ac <__assert_fail@plt+0xb60>
   118a0:	ldrb	r3, [r0, #5]
   118a4:	cmp	r3, #0
   118a8:	beq	118c8 <__assert_fail@plt+0xb7c>
   118ac:	movw	r4, #20100	; 0x4e84
   118b0:	movt	r4, #1
   118b4:	movw	r3, #20120	; 0x4e98
   118b8:	movt	r3, #1
   118bc:	cmp	r6, #9
   118c0:	movne	r4, r3
   118c4:	b	11840 <__assert_fail@plt+0xaf4>
   118c8:	ldrb	r2, [r4]
   118cc:	movw	r4, #20116	; 0x4e94
   118d0:	movt	r4, #1
   118d4:	movw	r3, #20104	; 0x4e88
   118d8:	movt	r3, #1
   118dc:	cmp	r2, #96	; 0x60
   118e0:	movne	r4, r3
   118e4:	b	11840 <__assert_fail@plt+0xaf4>
   118e8:	cmp	r3, #71	; 0x47
   118ec:	bne	118ac <__assert_fail@plt+0xb60>
   118f0:	ldrb	r3, [r0, #1]
   118f4:	bic	r3, r3, #32
   118f8:	cmp	r3, #66	; 0x42
   118fc:	bne	118ac <__assert_fail@plt+0xb60>
   11900:	ldrb	r3, [r0, #2]
   11904:	cmp	r3, #49	; 0x31
   11908:	bne	118ac <__assert_fail@plt+0xb60>
   1190c:	ldrb	r3, [r0, #3]
   11910:	cmp	r3, #56	; 0x38
   11914:	bne	118ac <__assert_fail@plt+0xb60>
   11918:	ldrb	r3, [r0, #4]
   1191c:	cmp	r3, #48	; 0x30
   11920:	bne	118ac <__assert_fail@plt+0xb60>
   11924:	ldrb	r3, [r0, #5]
   11928:	cmp	r3, #51	; 0x33
   1192c:	bne	118ac <__assert_fail@plt+0xb60>
   11930:	ldrb	r3, [r0, #6]
   11934:	cmp	r3, #48	; 0x30
   11938:	bne	118ac <__assert_fail@plt+0xb60>
   1193c:	ldrb	r3, [r0, #7]
   11940:	cmp	r3, #0
   11944:	bne	118ac <__assert_fail@plt+0xb60>
   11948:	ldrb	r2, [r4]
   1194c:	movw	r4, #20112	; 0x4e90
   11950:	movt	r4, #1
   11954:	movw	r3, #20108	; 0x4e8c
   11958:	movt	r3, #1
   1195c:	cmp	r2, #96	; 0x60
   11960:	movne	r4, r3
   11964:	b	11840 <__assert_fail@plt+0xaf4>
   11968:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1196c:	strd	r6, [sp, #8]
   11970:	strd	r8, [sp, #16]
   11974:	strd	sl, [sp, #24]
   11978:	str	lr, [sp, #32]
   1197c:	sub	sp, sp, #116	; 0x74
   11980:	str	r0, [sp, #64]	; 0x40
   11984:	mov	r8, r1
   11988:	str	r2, [sp, #48]	; 0x30
   1198c:	str	r3, [sp, #24]
   11990:	ldr	r7, [sp, #152]	; 0x98
   11994:	bl	10bfc <__ctype_get_mb_cur_max@plt>
   11998:	str	r0, [sp, #76]	; 0x4c
   1199c:	ldr	r3, [sp, #156]	; 0x9c
   119a0:	ubfx	r3, r3, #1, #1
   119a4:	str	r3, [sp, #32]
   119a8:	mov	r3, #1
   119ac:	str	r3, [sp, #40]	; 0x28
   119b0:	mov	r3, #0
   119b4:	str	r3, [sp, #68]	; 0x44
   119b8:	str	r3, [sp, #36]	; 0x24
   119bc:	str	r3, [sp, #28]
   119c0:	str	r3, [sp, #52]	; 0x34
   119c4:	str	r3, [sp, #60]	; 0x3c
   119c8:	str	r3, [sp, #72]	; 0x48
   119cc:	movw	r3, #20124	; 0x4e9c
   119d0:	movt	r3, #1
   119d4:	str	r3, [sp, #80]	; 0x50
   119d8:	mov	r9, r8
   119dc:	mov	sl, r7
   119e0:	cmp	sl, #10
   119e4:	ldrls	pc, [pc, sl, lsl #2]
   119e8:	b	11bac <__assert_fail@plt+0xe60>
   119ec:	andeq	r1, r1, ip, asr #20
   119f0:	andeq	r1, r1, r0, lsr #20
   119f4:	andeq	r1, r1, r4, lsl #23
   119f8:	andeq	r1, r1, r8, lsl sl
   119fc:	andeq	r1, r1, r8, lsr fp
   11a00:	andeq	r1, r1, ip, asr sl
   11a04:	andeq	r2, r1, r8, lsr #28
   11a08:			; <UNDEFINED> instruction: 0x00011bb0
   11a0c:	muleq	r1, r8, sl
   11a10:	muleq	r1, r8, sl
   11a14:	muleq	r1, r8, sl
   11a18:	mov	r3, #1
   11a1c:	str	r3, [sp, #28]
   11a20:	mov	r3, #1
   11a24:	str	r3, [sp, #32]
   11a28:	str	r3, [sp, #52]	; 0x34
   11a2c:	movw	r3, #20120	; 0x4e98
   11a30:	movt	r3, #1
   11a34:	str	r3, [sp, #60]	; 0x3c
   11a38:	mov	fp, #0
   11a3c:	mov	sl, #2
   11a40:	mov	r6, #0
   11a44:	ldr	r8, [sp, #64]	; 0x40
   11a48:	b	122c0 <__assert_fail@plt+0x1574>
   11a4c:	mov	fp, sl
   11a50:	mov	r3, #0
   11a54:	str	r3, [sp, #32]
   11a58:	b	11a40 <__assert_fail@plt+0xcf4>
   11a5c:	ldr	r3, [sp, #32]
   11a60:	cmp	r3, #0
   11a64:	bne	11bc4 <__assert_fail@plt+0xe78>
   11a68:	cmp	r9, #0
   11a6c:	beq	11be8 <__assert_fail@plt+0xe9c>
   11a70:	mov	r3, #34	; 0x22
   11a74:	ldr	r2, [sp, #64]	; 0x40
   11a78:	strb	r3, [r2]
   11a7c:	mov	fp, #1
   11a80:	str	fp, [sp, #28]
   11a84:	str	fp, [sp, #52]	; 0x34
   11a88:	movw	r3, #20100	; 0x4e84
   11a8c:	movt	r3, #1
   11a90:	str	r3, [sp, #60]	; 0x3c
   11a94:	b	11a40 <__assert_fail@plt+0xcf4>
   11a98:	cmp	sl, #10
   11a9c:	bne	11ad0 <__assert_fail@plt+0xd84>
   11aa0:	ldr	r3, [sp, #32]
   11aa4:	cmp	r3, #0
   11aa8:	movne	fp, #0
   11aac:	beq	11af8 <__assert_fail@plt+0xdac>
   11ab0:	ldr	r0, [sp, #168]	; 0xa8
   11ab4:	bl	10c80 <strlen@plt>
   11ab8:	str	r0, [sp, #52]	; 0x34
   11abc:	ldr	r3, [sp, #168]	; 0xa8
   11ac0:	str	r3, [sp, #60]	; 0x3c
   11ac4:	mov	r3, #1
   11ac8:	str	r3, [sp, #28]
   11acc:	b	11a40 <__assert_fail@plt+0xcf4>
   11ad0:	mov	r1, sl
   11ad4:	ldr	r0, [sp, #80]	; 0x50
   11ad8:	bl	11810 <__assert_fail@plt+0xac4>
   11adc:	str	r0, [sp, #164]	; 0xa4
   11ae0:	mov	r1, sl
   11ae4:	movw	r0, #20120	; 0x4e98
   11ae8:	movt	r0, #1
   11aec:	bl	11810 <__assert_fail@plt+0xac4>
   11af0:	str	r0, [sp, #168]	; 0xa8
   11af4:	b	11aa0 <__assert_fail@plt+0xd54>
   11af8:	ldr	r3, [sp, #164]	; 0xa4
   11afc:	ldrb	r3, [r3]
   11b00:	cmp	r3, #0
   11b04:	beq	11b30 <__assert_fail@plt+0xde4>
   11b08:	ldr	r2, [sp, #164]	; 0xa4
   11b0c:	mov	fp, #0
   11b10:	ldr	r1, [sp, #64]	; 0x40
   11b14:	cmp	r9, fp
   11b18:	strbhi	r3, [r1, fp]
   11b1c:	add	fp, fp, #1
   11b20:	ldrb	r3, [r2, #1]!
   11b24:	cmp	r3, #0
   11b28:	bne	11b14 <__assert_fail@plt+0xdc8>
   11b2c:	b	11ab0 <__assert_fail@plt+0xd64>
   11b30:	mov	fp, #0
   11b34:	b	11ab0 <__assert_fail@plt+0xd64>
   11b38:	ldr	r3, [sp, #32]
   11b3c:	cmp	r3, #0
   11b40:	bne	11a20 <__assert_fail@plt+0xcd4>
   11b44:	mov	r3, #1
   11b48:	str	r3, [sp, #28]
   11b4c:	cmp	r9, #0
   11b50:	beq	11c04 <__assert_fail@plt+0xeb8>
   11b54:	mov	r3, #39	; 0x27
   11b58:	ldr	r2, [sp, #64]	; 0x40
   11b5c:	strb	r3, [r2]
   11b60:	mov	r3, #0
   11b64:	str	r3, [sp, #32]
   11b68:	mov	fp, #1
   11b6c:	str	fp, [sp, #52]	; 0x34
   11b70:	movw	r3, #20120	; 0x4e98
   11b74:	movt	r3, #1
   11b78:	str	r3, [sp, #60]	; 0x3c
   11b7c:	mov	sl, #2
   11b80:	b	11a40 <__assert_fail@plt+0xcf4>
   11b84:	ldr	r3, [sp, #32]
   11b88:	cmp	r3, #0
   11b8c:	beq	11b4c <__assert_fail@plt+0xe00>
   11b90:	mov	r3, #1
   11b94:	str	r3, [sp, #52]	; 0x34
   11b98:	movw	r3, #20120	; 0x4e98
   11b9c:	movt	r3, #1
   11ba0:	str	r3, [sp, #60]	; 0x3c
   11ba4:	mov	fp, #0
   11ba8:	b	11a40 <__assert_fail@plt+0xcf4>
   11bac:	bl	10d40 <abort@plt>
   11bb0:	mov	fp, #0
   11bb4:	str	fp, [sp, #32]
   11bb8:	mov	r3, #1
   11bbc:	str	r3, [sp, #28]
   11bc0:	b	11a40 <__assert_fail@plt+0xcf4>
   11bc4:	ldr	r3, [sp, #32]
   11bc8:	str	r3, [sp, #28]
   11bcc:	mov	r3, #1
   11bd0:	str	r3, [sp, #52]	; 0x34
   11bd4:	movw	r3, #20100	; 0x4e84
   11bd8:	movt	r3, #1
   11bdc:	str	r3, [sp, #60]	; 0x3c
   11be0:	mov	fp, #0
   11be4:	b	11a40 <__assert_fail@plt+0xcf4>
   11be8:	mov	fp, #1
   11bec:	str	fp, [sp, #28]
   11bf0:	str	fp, [sp, #52]	; 0x34
   11bf4:	movw	r3, #20100	; 0x4e84
   11bf8:	movt	r3, #1
   11bfc:	str	r3, [sp, #60]	; 0x3c
   11c00:	b	11a40 <__assert_fail@plt+0xcf4>
   11c04:	mov	r3, #0
   11c08:	str	r3, [sp, #32]
   11c0c:	mov	fp, #1
   11c10:	str	fp, [sp, #52]	; 0x34
   11c14:	movw	r3, #20120	; 0x4e98
   11c18:	movt	r3, #1
   11c1c:	str	r3, [sp, #60]	; 0x3c
   11c20:	mov	sl, #2
   11c24:	b	11a40 <__assert_fail@plt+0xcf4>
   11c28:	mov	r3, r2
   11c2c:	add	r4, r6, r2
   11c30:	ldr	r2, [sp, #24]
   11c34:	cmp	r3, #1
   11c38:	movls	r3, #0
   11c3c:	movhi	r3, #1
   11c40:	cmn	r2, #1
   11c44:	movne	r3, #0
   11c48:	cmp	r3, #0
   11c4c:	beq	11c5c <__assert_fail@plt+0xf10>
   11c50:	ldr	r0, [sp, #48]	; 0x30
   11c54:	bl	10c80 <strlen@plt>
   11c58:	str	r0, [sp, #24]
   11c5c:	ldr	r3, [sp, #24]
   11c60:	cmp	r4, r3
   11c64:	bhi	12e50 <__assert_fail@plt+0x2104>
   11c68:	ldr	r3, [sp, #48]	; 0x30
   11c6c:	add	r4, r3, r6
   11c70:	ldr	r2, [sp, #52]	; 0x34
   11c74:	ldr	r1, [sp, #60]	; 0x3c
   11c78:	mov	r0, r4
   11c7c:	bl	10bb4 <memcmp@plt>
   11c80:	cmp	r0, #0
   11c84:	bne	12e50 <__assert_fail@plt+0x2104>
   11c88:	ldr	r3, [sp, #32]
   11c8c:	cmp	r3, #0
   11c90:	bne	11ea0 <__assert_fail@plt+0x1154>
   11c94:	ldrb	r4, [r4]
   11c98:	cmp	r4, #126	; 0x7e
   11c9c:	ldrls	pc, [pc, r4, lsl #2]
   11ca0:	b	12754 <__assert_fail@plt+0x1a08>
   11ca4:	andeq	r1, r1, r4, ror #29
   11ca8:	andeq	r2, r1, r4, asr r7
   11cac:	andeq	r2, r1, r4, asr r7
   11cb0:	andeq	r2, r1, r4, asr r7
   11cb4:	andeq	r2, r1, r4, asr r7
   11cb8:	andeq	r2, r1, r4, asr r7
   11cbc:	andeq	r2, r1, r4, asr r7
   11cc0:	strdeq	r2, [r1], -ip
   11cc4:	andeq	r2, r1, r0, lsl #3
   11cc8:	andeq	r2, r1, r4, lsr #10
   11ccc:	ldrdeq	r2, [r1], -r0
   11cd0:	andeq	r2, r1, r8, lsr r5
   11cd4:	muleq	r1, r4, r1
   11cd8:	andeq	r2, r1, r8, lsr #3
   11cdc:	andeq	r2, r1, r4, asr r7
   11ce0:	andeq	r2, r1, r4, asr r7
   11ce4:	andeq	r2, r1, r4, asr r7
   11ce8:	andeq	r2, r1, r4, asr r7
   11cec:	andeq	r2, r1, r4, asr r7
   11cf0:	andeq	r2, r1, r4, asr r7
   11cf4:	andeq	r2, r1, r4, asr r7
   11cf8:	andeq	r2, r1, r4, asr r7
   11cfc:	andeq	r2, r1, r4, asr r7
   11d00:	andeq	r2, r1, r4, asr r7
   11d04:	andeq	r2, r1, r4, asr r7
   11d08:	andeq	r2, r1, r4, asr r7
   11d0c:	andeq	r2, r1, r4, asr r7
   11d10:	andeq	r2, r1, r4, asr r7
   11d14:	andeq	r2, r1, r4, asr r7
   11d18:	andeq	r2, r1, r4, asr r7
   11d1c:	andeq	r2, r1, r4, asr r7
   11d20:	andeq	r2, r1, r4, asr r7
   11d24:	andeq	r2, r1, r0, ror r6
   11d28:	muleq	r1, r4, r6
   11d2c:	muleq	r1, r4, r6
   11d30:	andeq	r2, r1, ip, lsr #12
   11d34:	muleq	r1, r4, r6
   11d38:			; <UNDEFINED> instruction: 0x00012bb4
   11d3c:	muleq	r1, r4, r6
   11d40:			; <UNDEFINED> instruction: 0x000126b4
   11d44:	muleq	r1, r4, r6
   11d48:	muleq	r1, r4, r6
   11d4c:	muleq	r1, r4, r6
   11d50:			; <UNDEFINED> instruction: 0x00012bb4
   11d54:			; <UNDEFINED> instruction: 0x00012bb4
   11d58:			; <UNDEFINED> instruction: 0x00012bb4
   11d5c:			; <UNDEFINED> instruction: 0x00012bb4
   11d60:			; <UNDEFINED> instruction: 0x00012bb4
   11d64:			; <UNDEFINED> instruction: 0x00012bb4
   11d68:			; <UNDEFINED> instruction: 0x00012bb4
   11d6c:			; <UNDEFINED> instruction: 0x00012bb4
   11d70:			; <UNDEFINED> instruction: 0x00012bb4
   11d74:			; <UNDEFINED> instruction: 0x00012bb4
   11d78:			; <UNDEFINED> instruction: 0x00012bb4
   11d7c:			; <UNDEFINED> instruction: 0x00012bb4
   11d80:			; <UNDEFINED> instruction: 0x00012bb4
   11d84:			; <UNDEFINED> instruction: 0x00012bb4
   11d88:			; <UNDEFINED> instruction: 0x00012bb4
   11d8c:			; <UNDEFINED> instruction: 0x00012bb4
   11d90:	muleq	r1, r4, r6
   11d94:	muleq	r1, r4, r6
   11d98:	muleq	r1, r4, r6
   11d9c:	muleq	r1, r4, r6
   11da0:	andeq	r2, r1, r4, lsl r0
   11da4:	andeq	r2, r1, r4, asr r7
   11da8:			; <UNDEFINED> instruction: 0x00012bb4
   11dac:			; <UNDEFINED> instruction: 0x00012bb4
   11db0:			; <UNDEFINED> instruction: 0x00012bb4
   11db4:			; <UNDEFINED> instruction: 0x00012bb4
   11db8:			; <UNDEFINED> instruction: 0x00012bb4
   11dbc:			; <UNDEFINED> instruction: 0x00012bb4
   11dc0:			; <UNDEFINED> instruction: 0x00012bb4
   11dc4:			; <UNDEFINED> instruction: 0x00012bb4
   11dc8:			; <UNDEFINED> instruction: 0x00012bb4
   11dcc:			; <UNDEFINED> instruction: 0x00012bb4
   11dd0:			; <UNDEFINED> instruction: 0x00012bb4
   11dd4:			; <UNDEFINED> instruction: 0x00012bb4
   11dd8:			; <UNDEFINED> instruction: 0x00012bb4
   11ddc:			; <UNDEFINED> instruction: 0x00012bb4
   11de0:			; <UNDEFINED> instruction: 0x00012bb4
   11de4:			; <UNDEFINED> instruction: 0x00012bb4
   11de8:			; <UNDEFINED> instruction: 0x00012bb4
   11dec:			; <UNDEFINED> instruction: 0x00012bb4
   11df0:			; <UNDEFINED> instruction: 0x00012bb4
   11df4:			; <UNDEFINED> instruction: 0x00012bb4
   11df8:			; <UNDEFINED> instruction: 0x00012bb4
   11dfc:			; <UNDEFINED> instruction: 0x00012bb4
   11e00:			; <UNDEFINED> instruction: 0x00012bb4
   11e04:			; <UNDEFINED> instruction: 0x00012bb4
   11e08:			; <UNDEFINED> instruction: 0x00012bb4
   11e0c:			; <UNDEFINED> instruction: 0x00012bb4
   11e10:	muleq	r1, r4, r6
   11e14:	andeq	r2, r1, ip, asr #10
   11e18:			; <UNDEFINED> instruction: 0x00012bb4
   11e1c:	muleq	r1, r4, r6
   11e20:			; <UNDEFINED> instruction: 0x00012bb4
   11e24:	muleq	r1, r4, r6
   11e28:			; <UNDEFINED> instruction: 0x00012bb4
   11e2c:			; <UNDEFINED> instruction: 0x00012bb4
   11e30:			; <UNDEFINED> instruction: 0x00012bb4
   11e34:			; <UNDEFINED> instruction: 0x00012bb4
   11e38:			; <UNDEFINED> instruction: 0x00012bb4
   11e3c:			; <UNDEFINED> instruction: 0x00012bb4
   11e40:			; <UNDEFINED> instruction: 0x00012bb4
   11e44:			; <UNDEFINED> instruction: 0x00012bb4
   11e48:			; <UNDEFINED> instruction: 0x00012bb4
   11e4c:			; <UNDEFINED> instruction: 0x00012bb4
   11e50:			; <UNDEFINED> instruction: 0x00012bb4
   11e54:			; <UNDEFINED> instruction: 0x00012bb4
   11e58:			; <UNDEFINED> instruction: 0x00012bb4
   11e5c:			; <UNDEFINED> instruction: 0x00012bb4
   11e60:			; <UNDEFINED> instruction: 0x00012bb4
   11e64:			; <UNDEFINED> instruction: 0x00012bb4
   11e68:			; <UNDEFINED> instruction: 0x00012bb4
   11e6c:			; <UNDEFINED> instruction: 0x00012bb4
   11e70:			; <UNDEFINED> instruction: 0x00012bb4
   11e74:			; <UNDEFINED> instruction: 0x00012bb4
   11e78:			; <UNDEFINED> instruction: 0x00012bb4
   11e7c:			; <UNDEFINED> instruction: 0x00012bb4
   11e80:			; <UNDEFINED> instruction: 0x00012bb4
   11e84:			; <UNDEFINED> instruction: 0x00012bb4
   11e88:			; <UNDEFINED> instruction: 0x00012bb4
   11e8c:			; <UNDEFINED> instruction: 0x00012bb4
   11e90:	andeq	r2, r1, ip, lsl #12
   11e94:	muleq	r1, r4, r6
   11e98:	andeq	r2, r1, ip, lsl #12
   11e9c:	andeq	r2, r1, ip, lsr #12
   11ea0:	mov	r8, r9
   11ea4:	mov	r7, sl
   11ea8:	b	12da8 <__assert_fail@plt+0x205c>
   11eac:	ldr	r3, [sp, #28]
   11eb0:	cmp	r3, #0
   11eb4:	bne	11ed4 <__assert_fail@plt+0x1188>
   11eb8:	ldr	r3, [sp, #156]	; 0x9c
   11ebc:	tst	r3, #1
   11ec0:	bne	122bc <__assert_fail@plt+0x1570>
   11ec4:	ldr	r3, [sp, #28]
   11ec8:	str	r3, [sp, #44]	; 0x2c
   11ecc:	mov	r5, r3
   11ed0:	b	121dc <__assert_fail@plt+0x1490>
   11ed4:	ldr	r3, [sp, #32]
   11ed8:	cmp	r3, #0
   11edc:	bne	12d58 <__assert_fail@plt+0x200c>
   11ee0:	str	r3, [sp, #44]	; 0x2c
   11ee4:	ldr	r3, [sp, #36]	; 0x24
   11ee8:	eor	r3, r3, #1
   11eec:	cmp	sl, #2
   11ef0:	movne	r3, #0
   11ef4:	andeq	r3, r3, #1
   11ef8:	cmp	r3, #0
   11efc:	beq	11f54 <__assert_fail@plt+0x1208>
   11f00:	cmp	r9, fp
   11f04:	movhi	r2, #39	; 0x27
   11f08:	strbhi	r2, [r8, fp]
   11f0c:	add	r2, fp, #1
   11f10:	cmp	r9, r2
   11f14:	movhi	r1, #36	; 0x24
   11f18:	strbhi	r1, [r8, r2]
   11f1c:	add	r2, fp, #2
   11f20:	cmp	r9, r2
   11f24:	movhi	r1, #39	; 0x27
   11f28:	strbhi	r1, [r8, r2]
   11f2c:	add	r2, fp, #3
   11f30:	cmp	r9, r2
   11f34:	bls	12e14 <__assert_fail@plt+0x20c8>
   11f38:	mov	r1, #92	; 0x5c
   11f3c:	strb	r1, [r8, r2]
   11f40:	add	fp, fp, #4
   11f44:	str	r3, [sp, #36]	; 0x24
   11f48:	mov	r5, #0
   11f4c:	mov	r4, #48	; 0x30
   11f50:	b	12228 <__assert_fail@plt+0x14dc>
   11f54:	cmp	r9, fp
   11f58:	bhi	11f80 <__assert_fail@plt+0x1234>
   11f5c:	add	r1, fp, #1
   11f60:	ldr	r2, [sp, #56]	; 0x38
   11f64:	cmp	r2, #0
   11f68:	bne	11fa8 <__assert_fail@plt+0x125c>
   11f6c:	mov	r3, r5
   11f70:	ldr	r5, [sp, #56]	; 0x38
   11f74:	mov	fp, r1
   11f78:	mov	r4, #48	; 0x30
   11f7c:	b	121dc <__assert_fail@plt+0x1490>
   11f80:	mov	r2, #92	; 0x5c
   11f84:	strb	r2, [r8, fp]
   11f88:	add	r1, fp, #1
   11f8c:	ldr	r2, [sp, #56]	; 0x38
   11f90:	cmp	r2, #0
   11f94:	moveq	r3, r5
   11f98:	moveq	r5, r2
   11f9c:	moveq	fp, r1
   11fa0:	moveq	r4, #48	; 0x30
   11fa4:	beq	12228 <__assert_fail@plt+0x14dc>
   11fa8:	add	r2, r6, #1
   11fac:	ldr	r0, [sp, #24]
   11fb0:	cmp	r2, r0
   11fb4:	bcs	11fd0 <__assert_fail@plt+0x1284>
   11fb8:	ldr	r0, [sp, #48]	; 0x30
   11fbc:	ldrb	r2, [r0, r2]
   11fc0:	sub	r2, r2, #48	; 0x30
   11fc4:	uxtb	r2, r2
   11fc8:	cmp	r2, #9
   11fcc:	bls	11fe8 <__assert_fail@plt+0x129c>
   11fd0:	mov	r2, r3
   11fd4:	mov	r3, r5
   11fd8:	mov	r5, r2
   11fdc:	mov	fp, r1
   11fe0:	mov	r4, #48	; 0x30
   11fe4:	b	12200 <__assert_fail@plt+0x14b4>
   11fe8:	cmp	r9, r1
   11fec:	movhi	r2, #48	; 0x30
   11ff0:	strbhi	r2, [r8, r1]
   11ff4:	add	r2, fp, #2
   11ff8:	cmp	r9, r2
   11ffc:	movhi	r1, #48	; 0x30
   12000:	strbhi	r1, [r8, r2]
   12004:	add	r1, fp, #3
   12008:	b	11fd0 <__assert_fail@plt+0x1284>
   1200c:	mov	r3, #0
   12010:	str	r3, [sp, #44]	; 0x2c
   12014:	cmp	sl, #2
   12018:	beq	12034 <__assert_fail@plt+0x12e8>
   1201c:	cmp	sl, #5
   12020:	beq	1204c <__assert_fail@plt+0x1300>
   12024:	mov	r5, #0
   12028:	mov	r3, r5
   1202c:	mov	r4, #63	; 0x3f
   12030:	b	121dc <__assert_fail@plt+0x1490>
   12034:	ldr	r3, [sp, #32]
   12038:	cmp	r3, #0
   1203c:	bne	12d64 <__assert_fail@plt+0x2018>
   12040:	mov	r5, r3
   12044:	mov	r4, #63	; 0x3f
   12048:	b	12744 <__assert_fail@plt+0x19f8>
   1204c:	ldr	r3, [sp, #156]	; 0x9c
   12050:	tst	r3, #4
   12054:	beq	12b7c <__assert_fail@plt+0x1e30>
   12058:	add	r2, r6, #2
   1205c:	ldr	r3, [sp, #24]
   12060:	cmp	r2, r3
   12064:	bcs	12b8c <__assert_fail@plt+0x1e40>
   12068:	ldr	r3, [sp, #48]	; 0x30
   1206c:	add	r3, r3, r6
   12070:	ldrb	r4, [r3, #1]
   12074:	cmp	r4, #63	; 0x3f
   12078:	movne	r5, #0
   1207c:	movne	r3, r5
   12080:	movne	r4, #63	; 0x3f
   12084:	bne	121dc <__assert_fail@plt+0x1490>
   12088:	ldr	r3, [sp, #48]	; 0x30
   1208c:	ldrb	r1, [r3, r2]
   12090:	sub	r3, r1, #33	; 0x21
   12094:	cmp	r3, #29
   12098:	ldrls	pc, [pc, r3, lsl #2]
   1209c:	b	12b9c <__assert_fail@plt+0x1e50>
   120a0:	andeq	r2, r1, r8, lsl r1
   120a4:	muleq	r1, ip, fp
   120a8:	muleq	r1, ip, fp
   120ac:	muleq	r1, ip, fp
   120b0:	muleq	r1, ip, fp
   120b4:	muleq	r1, ip, fp
   120b8:	andeq	r2, r1, r8, lsl r1
   120bc:	andeq	r2, r1, r8, lsl r1
   120c0:	andeq	r2, r1, r8, lsl r1
   120c4:	muleq	r1, ip, fp
   120c8:	muleq	r1, ip, fp
   120cc:	muleq	r1, ip, fp
   120d0:	andeq	r2, r1, r8, lsl r1
   120d4:	muleq	r1, ip, fp
   120d8:	andeq	r2, r1, r8, lsl r1
   120dc:	muleq	r1, ip, fp
   120e0:	muleq	r1, ip, fp
   120e4:	muleq	r1, ip, fp
   120e8:	muleq	r1, ip, fp
   120ec:	muleq	r1, ip, fp
   120f0:	muleq	r1, ip, fp
   120f4:	muleq	r1, ip, fp
   120f8:	muleq	r1, ip, fp
   120fc:	muleq	r1, ip, fp
   12100:	muleq	r1, ip, fp
   12104:	muleq	r1, ip, fp
   12108:	muleq	r1, ip, fp
   1210c:	andeq	r2, r1, r8, lsl r1
   12110:	andeq	r2, r1, r8, lsl r1
   12114:	andeq	r2, r1, r8, lsl r1
   12118:	ldr	r3, [sp, #32]
   1211c:	cmp	r3, #0
   12120:	bne	12e08 <__assert_fail@plt+0x20bc>
   12124:	cmp	r9, fp
   12128:	movhi	r3, #63	; 0x3f
   1212c:	strbhi	r3, [r8, fp]
   12130:	add	r3, fp, #1
   12134:	cmp	r9, r3
   12138:	movhi	r0, #34	; 0x22
   1213c:	strbhi	r0, [r8, r3]
   12140:	add	r3, fp, #2
   12144:	cmp	r9, r3
   12148:	movhi	r0, #34	; 0x22
   1214c:	strbhi	r0, [r8, r3]
   12150:	add	r3, fp, #3
   12154:	cmp	r9, r3
   12158:	movhi	r0, #63	; 0x3f
   1215c:	strbhi	r0, [r8, r3]
   12160:	add	fp, fp, #4
   12164:	ldr	r3, [sp, #32]
   12168:	mov	r5, r3
   1216c:	mov	r4, r1
   12170:	mov	r6, r2
   12174:	b	121dc <__assert_fail@plt+0x1490>
   12178:	mov	r3, #0
   1217c:	str	r3, [sp, #44]	; 0x2c
   12180:	mov	r4, #8
   12184:	mov	r3, #98	; 0x62
   12188:	b	121c8 <__assert_fail@plt+0x147c>
   1218c:	mov	r3, #0
   12190:	str	r3, [sp, #44]	; 0x2c
   12194:	mov	r4, #12
   12198:	mov	r3, #102	; 0x66
   1219c:	b	121c8 <__assert_fail@plt+0x147c>
   121a0:	mov	r3, #0
   121a4:	str	r3, [sp, #44]	; 0x2c
   121a8:	mov	r4, #13
   121ac:	mov	r3, #114	; 0x72
   121b0:	ldr	r2, [sp, #32]
   121b4:	cmp	sl, #2
   121b8:	movne	r2, #0
   121bc:	andeq	r2, r2, #1
   121c0:	cmp	r2, #0
   121c4:	bne	125e8 <__assert_fail@plt+0x189c>
   121c8:	ldr	r2, [sp, #28]
   121cc:	cmp	r2, #0
   121d0:	bne	12bd0 <__assert_fail@plt+0x1e84>
   121d4:	mov	r5, r2
   121d8:	mov	r3, r2
   121dc:	ldr	r2, [sp, #28]
   121e0:	eor	r2, r2, #1
   121e4:	cmp	sl, #2
   121e8:	orreq	r2, r2, #1
   121ec:	eor	r2, r2, #1
   121f0:	ldr	r1, [sp, #32]
   121f4:	orr	r2, r1, r2
   121f8:	tst	r2, #255	; 0xff
   121fc:	beq	12228 <__assert_fail@plt+0x14dc>
   12200:	ldr	r2, [sp, #160]	; 0xa0
   12204:	cmp	r2, #0
   12208:	beq	12228 <__assert_fail@plt+0x14dc>
   1220c:	ubfx	r1, r4, #5, #8
   12210:	and	r2, r4, #31
   12214:	ldr	r0, [sp, #160]	; 0xa0
   12218:	ldr	r1, [r0, r1, lsl #2]
   1221c:	lsr	r2, r1, r2
   12220:	tst	r2, #1
   12224:	bne	12234 <__assert_fail@plt+0x14e8>
   12228:	ldr	r2, [sp, #44]	; 0x2c
   1222c:	cmp	r2, #0
   12230:	beq	12588 <__assert_fail@plt+0x183c>
   12234:	ldr	r3, [sp, #32]
   12238:	cmp	r3, #0
   1223c:	bne	12d88 <__assert_fail@plt+0x203c>
   12240:	ldr	r3, [sp, #36]	; 0x24
   12244:	eor	r3, r3, #1
   12248:	cmp	sl, #2
   1224c:	movne	r3, #0
   12250:	andeq	r3, r3, #1
   12254:	cmp	r3, #0
   12258:	beq	12290 <__assert_fail@plt+0x1544>
   1225c:	cmp	r9, fp
   12260:	movhi	r2, #39	; 0x27
   12264:	strbhi	r2, [r8, fp]
   12268:	add	r2, fp, #1
   1226c:	cmp	r9, r2
   12270:	movhi	r1, #36	; 0x24
   12274:	strbhi	r1, [r8, r2]
   12278:	add	r2, fp, #2
   1227c:	cmp	r9, r2
   12280:	movhi	r1, #39	; 0x27
   12284:	strbhi	r1, [r8, r2]
   12288:	add	fp, fp, #3
   1228c:	str	r3, [sp, #36]	; 0x24
   12290:	cmp	r9, fp
   12294:	movhi	r3, #92	; 0x5c
   12298:	strbhi	r3, [r8, fp]
   1229c:	add	fp, fp, #1
   122a0:	cmp	fp, r9
   122a4:	strbcc	r4, [r8, fp]
   122a8:	add	fp, fp, #1
   122ac:	cmp	r5, #0
   122b0:	ldr	r3, [sp, #40]	; 0x28
   122b4:	moveq	r3, r5
   122b8:	str	r3, [sp, #40]	; 0x28
   122bc:	add	r6, r6, #1
   122c0:	ldr	r3, [sp, #24]
   122c4:	cmn	r3, #1
   122c8:	beq	12bf8 <__assert_fail@plt+0x1eac>
   122cc:	ldr	r3, [sp, #24]
   122d0:	subs	r5, r3, r6
   122d4:	movne	r5, #1
   122d8:	cmp	r5, #0
   122dc:	beq	12c0c <__assert_fail@plt+0x1ec0>
   122e0:	ldr	r3, [sp, #28]
   122e4:	cmp	sl, #2
   122e8:	moveq	r3, #0
   122ec:	andne	r3, r3, #1
   122f0:	str	r3, [sp, #56]	; 0x38
   122f4:	ldr	r2, [sp, #52]	; 0x34
   122f8:	adds	r7, r2, #0
   122fc:	movne	r7, #1
   12300:	ands	r3, r3, r7
   12304:	str	r3, [sp, #44]	; 0x2c
   12308:	bne	11c28 <__assert_fail@plt+0xedc>
   1230c:	ldr	r3, [sp, #48]	; 0x30
   12310:	ldrb	r4, [r3, r6]
   12314:	cmp	r4, #126	; 0x7e
   12318:	ldrls	pc, [pc, r4, lsl #2]
   1231c:	b	12754 <__assert_fail@plt+0x1a08>
   12320:	andeq	r1, r1, ip, lsr #29
   12324:	andeq	r2, r1, r4, asr r7
   12328:	andeq	r2, r1, r4, asr r7
   1232c:	andeq	r2, r1, r4, asr r7
   12330:	andeq	r2, r1, r4, asr r7
   12334:	andeq	r2, r1, r4, asr r7
   12338:	andeq	r2, r1, r4, asr r7
   1233c:	strdeq	r2, [r1], -r4
   12340:	andeq	r2, r1, r0, lsl #3
   12344:	andeq	r2, r1, r4, lsr #10
   12348:	andeq	r2, r1, r8, asr #11
   1234c:	andeq	r2, r1, r8, lsr r5
   12350:	muleq	r1, r4, r1
   12354:	andeq	r2, r1, r8, lsr #3
   12358:	andeq	r2, r1, r4, asr r7
   1235c:	andeq	r2, r1, r4, asr r7
   12360:	andeq	r2, r1, r4, asr r7
   12364:	andeq	r2, r1, r4, asr r7
   12368:	andeq	r2, r1, r4, asr r7
   1236c:	andeq	r2, r1, r4, asr r7
   12370:	andeq	r2, r1, r4, asr r7
   12374:	andeq	r2, r1, r4, asr r7
   12378:	andeq	r2, r1, r4, asr r7
   1237c:	andeq	r2, r1, r4, asr r7
   12380:	andeq	r2, r1, r4, asr r7
   12384:	andeq	r2, r1, r4, asr r7
   12388:	andeq	r2, r1, r4, asr r7
   1238c:	andeq	r2, r1, r4, asr r7
   12390:	andeq	r2, r1, r4, asr r7
   12394:	andeq	r2, r1, r4, asr r7
   12398:	andeq	r2, r1, r4, asr r7
   1239c:	andeq	r2, r1, r4, asr r7
   123a0:	andeq	r2, r1, r0, ror r6
   123a4:	andeq	r2, r1, ip, ror #12
   123a8:	andeq	r2, r1, ip, ror #12
   123ac:	andeq	r2, r1, ip, lsr #12
   123b0:	andeq	r2, r1, ip, ror #12
   123b4:	andeq	r2, r1, r4, ror fp
   123b8:	andeq	r2, r1, ip, ror #12
   123bc:			; <UNDEFINED> instruction: 0x000126b4
   123c0:	andeq	r2, r1, ip, ror #12
   123c4:	andeq	r2, r1, ip, ror #12
   123c8:	andeq	r2, r1, ip, ror #12
   123cc:	andeq	r2, r1, r4, ror fp
   123d0:	andeq	r2, r1, r4, ror fp
   123d4:	andeq	r2, r1, r4, ror fp
   123d8:	andeq	r2, r1, r4, ror fp
   123dc:	andeq	r2, r1, r4, ror fp
   123e0:	andeq	r2, r1, r4, ror fp
   123e4:	andeq	r2, r1, r4, ror fp
   123e8:	andeq	r2, r1, r4, ror fp
   123ec:	andeq	r2, r1, r4, ror fp
   123f0:	andeq	r2, r1, r4, ror fp
   123f4:	andeq	r2, r1, r4, ror fp
   123f8:	andeq	r2, r1, r4, ror fp
   123fc:	andeq	r2, r1, r4, ror fp
   12400:	andeq	r2, r1, r4, ror fp
   12404:	andeq	r2, r1, r4, ror fp
   12408:	andeq	r2, r1, r4, ror fp
   1240c:	andeq	r2, r1, ip, ror #12
   12410:	andeq	r2, r1, ip, ror #12
   12414:	andeq	r2, r1, ip, ror #12
   12418:	andeq	r2, r1, ip, ror #12
   1241c:	andeq	r2, r1, r4, lsl r0
   12420:	andeq	r2, r1, r4, asr r7
   12424:	andeq	r2, r1, r4, ror fp
   12428:	andeq	r2, r1, r4, ror fp
   1242c:	andeq	r2, r1, r4, ror fp
   12430:	andeq	r2, r1, r4, ror fp
   12434:	andeq	r2, r1, r4, ror fp
   12438:	andeq	r2, r1, r4, ror fp
   1243c:	andeq	r2, r1, r4, ror fp
   12440:	andeq	r2, r1, r4, ror fp
   12444:	andeq	r2, r1, r4, ror fp
   12448:	andeq	r2, r1, r4, ror fp
   1244c:	andeq	r2, r1, r4, ror fp
   12450:	andeq	r2, r1, r4, ror fp
   12454:	andeq	r2, r1, r4, ror fp
   12458:	andeq	r2, r1, r4, ror fp
   1245c:	andeq	r2, r1, r4, ror fp
   12460:	andeq	r2, r1, r4, ror fp
   12464:	andeq	r2, r1, r4, ror fp
   12468:	andeq	r2, r1, r4, ror fp
   1246c:	andeq	r2, r1, r4, ror fp
   12470:	andeq	r2, r1, r4, ror fp
   12474:	andeq	r2, r1, r4, ror fp
   12478:	andeq	r2, r1, r4, ror fp
   1247c:	andeq	r2, r1, r4, ror fp
   12480:	andeq	r2, r1, r4, ror fp
   12484:	andeq	r2, r1, r4, ror fp
   12488:	andeq	r2, r1, r4, ror fp
   1248c:	andeq	r2, r1, ip, ror #12
   12490:	andeq	r2, r1, ip, asr #10
   12494:	andeq	r2, r1, r4, ror fp
   12498:	andeq	r2, r1, ip, ror #12
   1249c:	andeq	r2, r1, r4, ror fp
   124a0:	andeq	r2, r1, ip, ror #12
   124a4:	andeq	r2, r1, r4, ror fp
   124a8:	andeq	r2, r1, r4, ror fp
   124ac:	andeq	r2, r1, r4, ror fp
   124b0:	andeq	r2, r1, r4, ror fp
   124b4:	andeq	r2, r1, r4, ror fp
   124b8:	andeq	r2, r1, r4, ror fp
   124bc:	andeq	r2, r1, r4, ror fp
   124c0:	andeq	r2, r1, r4, ror fp
   124c4:	andeq	r2, r1, r4, ror fp
   124c8:	andeq	r2, r1, r4, ror fp
   124cc:	andeq	r2, r1, r4, ror fp
   124d0:	andeq	r2, r1, r4, ror fp
   124d4:	andeq	r2, r1, r4, ror fp
   124d8:	andeq	r2, r1, r4, ror fp
   124dc:	andeq	r2, r1, r4, ror fp
   124e0:	andeq	r2, r1, r4, ror fp
   124e4:	andeq	r2, r1, r4, ror fp
   124e8:	andeq	r2, r1, r4, ror fp
   124ec:	andeq	r2, r1, r4, ror fp
   124f0:	andeq	r2, r1, r4, ror fp
   124f4:	andeq	r2, r1, r4, ror fp
   124f8:	andeq	r2, r1, r4, ror fp
   124fc:	andeq	r2, r1, r4, ror fp
   12500:	andeq	r2, r1, r4, ror fp
   12504:	andeq	r2, r1, r4, ror fp
   12508:	andeq	r2, r1, r4, ror fp
   1250c:	andeq	r2, r1, ip, lsl #12
   12510:	andeq	r2, r1, ip, ror #12
   12514:	andeq	r2, r1, ip, lsl #12
   12518:	andeq	r2, r1, ip, lsr #12
   1251c:	mov	r3, #0
   12520:	str	r3, [sp, #44]	; 0x2c
   12524:	mov	r4, #9
   12528:	mov	r3, #116	; 0x74
   1252c:	b	121b0 <__assert_fail@plt+0x1464>
   12530:	mov	r3, #0
   12534:	str	r3, [sp, #44]	; 0x2c
   12538:	mov	r4, #11
   1253c:	mov	r3, #118	; 0x76
   12540:	b	121c8 <__assert_fail@plt+0x147c>
   12544:	mov	r3, #0
   12548:	str	r3, [sp, #44]	; 0x2c
   1254c:	cmp	sl, #2
   12550:	beq	12574 <__assert_fail@plt+0x1828>
   12554:	ldr	r3, [sp, #28]
   12558:	ldr	r2, [sp, #32]
   1255c:	and	r3, r3, r2
   12560:	tst	r7, r3
   12564:	bne	12be8 <__assert_fail@plt+0x1e9c>
   12568:	mov	r4, #92	; 0x5c
   1256c:	mov	r3, r4
   12570:	b	121c8 <__assert_fail@plt+0x147c>
   12574:	ldr	r3, [sp, #32]
   12578:	cmp	r3, #0
   1257c:	bne	12d70 <__assert_fail@plt+0x2024>
   12580:	mov	r5, r3
   12584:	mov	r4, #92	; 0x5c
   12588:	eor	r3, r3, #1
   1258c:	ldr	r2, [sp, #36]	; 0x24
   12590:	and	r3, r3, r2
   12594:	tst	r3, #255	; 0xff
   12598:	beq	122a0 <__assert_fail@plt+0x1554>
   1259c:	cmp	r9, fp
   125a0:	movhi	r3, #39	; 0x27
   125a4:	strbhi	r3, [r8, fp]
   125a8:	add	r3, fp, #1
   125ac:	cmp	r9, r3
   125b0:	movhi	r2, #39	; 0x27
   125b4:	strbhi	r2, [r8, r3]
   125b8:	add	fp, fp, #2
   125bc:	mov	r3, #0
   125c0:	str	r3, [sp, #36]	; 0x24
   125c4:	b	122a0 <__assert_fail@plt+0x1554>
   125c8:	mov	r3, #110	; 0x6e
   125cc:	b	121b0 <__assert_fail@plt+0x1464>
   125d0:	mov	r3, #110	; 0x6e
   125d4:	b	121b0 <__assert_fail@plt+0x1464>
   125d8:	mov	r3, #0
   125dc:	str	r3, [sp, #44]	; 0x2c
   125e0:	mov	r3, #110	; 0x6e
   125e4:	b	121b0 <__assert_fail@plt+0x1464>
   125e8:	mov	r8, r9
   125ec:	mov	r7, #2
   125f0:	b	12d90 <__assert_fail@plt+0x2044>
   125f4:	mov	r3, #97	; 0x61
   125f8:	b	121c8 <__assert_fail@plt+0x147c>
   125fc:	mov	r3, #97	; 0x61
   12600:	b	121c8 <__assert_fail@plt+0x147c>
   12604:	mov	r3, #0
   12608:	str	r3, [sp, #44]	; 0x2c
   1260c:	ldr	r3, [sp, #24]
   12610:	cmn	r3, #1
   12614:	beq	12640 <__assert_fail@plt+0x18f4>
   12618:	ldr	r3, [sp, #24]
   1261c:	subs	r3, r3, #1
   12620:	movne	r3, #1
   12624:	cmp	r3, #0
   12628:	bne	12ba8 <__assert_fail@plt+0x1e5c>
   1262c:	cmp	r6, #0
   12630:	beq	12670 <__assert_fail@plt+0x1924>
   12634:	mov	r5, #0
   12638:	mov	r3, r5
   1263c:	b	121dc <__assert_fail@plt+0x1490>
   12640:	ldr	r3, [sp, #48]	; 0x30
   12644:	ldrb	r3, [r3, #1]
   12648:	adds	r3, r3, #0
   1264c:	movne	r3, #1
   12650:	b	12624 <__assert_fail@plt+0x18d8>
   12654:	mov	r3, #0
   12658:	str	r3, [sp, #44]	; 0x2c
   1265c:	b	1262c <__assert_fail@plt+0x18e0>
   12660:	mov	r3, #0
   12664:	str	r3, [sp, #44]	; 0x2c
   12668:	b	12670 <__assert_fail@plt+0x1924>
   1266c:	ldr	r5, [sp, #44]	; 0x2c
   12670:	ldr	r3, [sp, #32]
   12674:	cmp	sl, #2
   12678:	movne	r3, #0
   1267c:	andeq	r3, r3, #1
   12680:	cmp	r3, #0
   12684:	beq	121dc <__assert_fail@plt+0x1490>
   12688:	mov	r8, r9
   1268c:	mov	r7, #2
   12690:	b	12d90 <__assert_fail@plt+0x2044>
   12694:	ldr	r5, [sp, #32]
   12698:	b	12670 <__assert_fail@plt+0x1924>
   1269c:	mov	r3, #0
   126a0:	str	r3, [sp, #44]	; 0x2c
   126a4:	mov	r5, r3
   126a8:	b	12670 <__assert_fail@plt+0x1924>
   126ac:	mov	r3, #0
   126b0:	str	r3, [sp, #44]	; 0x2c
   126b4:	cmp	sl, #2
   126b8:	strne	r5, [sp, #68]	; 0x44
   126bc:	movne	r3, #0
   126c0:	movne	r4, #39	; 0x27
   126c4:	bne	121dc <__assert_fail@plt+0x1490>
   126c8:	ldr	r3, [sp, #32]
   126cc:	cmp	r3, #0
   126d0:	bne	12d7c <__assert_fail@plt+0x2030>
   126d4:	ldr	r3, [sp, #72]	; 0x48
   126d8:	clz	r3, r3
   126dc:	lsr	r3, r3, #5
   126e0:	cmp	r9, #0
   126e4:	moveq	r3, #0
   126e8:	cmp	r3, #0
   126ec:	movne	r3, #0
   126f0:	bne	12718 <__assert_fail@plt+0x19cc>
   126f4:	cmp	r9, fp
   126f8:	movhi	r3, #39	; 0x27
   126fc:	strbhi	r3, [r8, fp]
   12700:	add	r3, fp, #1
   12704:	cmp	r9, r3
   12708:	movhi	r2, #92	; 0x5c
   1270c:	strbhi	r2, [r8, r3]
   12710:	mov	r3, r9
   12714:	ldr	r9, [sp, #72]	; 0x48
   12718:	add	r2, fp, #2
   1271c:	cmp	r2, r3
   12720:	movcc	r1, #39	; 0x27
   12724:	strbcc	r1, [r8, r2]
   12728:	add	fp, fp, #3
   1272c:	str	r5, [sp, #68]	; 0x44
   12730:	ldr	r2, [sp, #32]
   12734:	str	r2, [sp, #36]	; 0x24
   12738:	str	r9, [sp, #72]	; 0x48
   1273c:	mov	r9, r3
   12740:	mov	r4, #39	; 0x27
   12744:	mov	r3, #0
   12748:	b	12228 <__assert_fail@plt+0x14dc>
   1274c:	mov	r3, #0
   12750:	str	r3, [sp, #44]	; 0x2c
   12754:	ldr	r7, [sp, #76]	; 0x4c
   12758:	cmp	r7, #1
   1275c:	bne	12794 <__assert_fail@plt+0x1a48>
   12760:	bl	10c68 <__ctype_b_loc@plt>
   12764:	ldr	r2, [r0]
   12768:	lsl	r3, r4, #1
   1276c:	ldrh	r5, [r2, r3]
   12770:	ubfx	r5, r5, #14, #1
   12774:	mov	ip, r7
   12778:	eor	r3, r5, #1
   1277c:	ldr	r2, [sp, #28]
   12780:	and	r3, r3, r2
   12784:	ands	r3, r3, #255	; 0xff
   12788:	beq	121dc <__assert_fail@plt+0x1490>
   1278c:	mov	r5, #0
   12790:	b	129f0 <__assert_fail@plt+0x1ca4>
   12794:	mov	r2, #0
   12798:	mov	r3, #0
   1279c:	strd	r2, [sp, #104]	; 0x68
   127a0:	ldr	r3, [sp, #24]
   127a4:	cmn	r3, #1
   127a8:	beq	127cc <__assert_fail@plt+0x1a80>
   127ac:	mov	r3, #0
   127b0:	str	r4, [sp, #88]	; 0x58
   127b4:	str	fp, [sp, #92]	; 0x5c
   127b8:	str	r8, [sp, #56]	; 0x38
   127bc:	mov	r8, r3
   127c0:	str	r9, [sp, #84]	; 0x54
   127c4:	ldr	r9, [sp, #48]	; 0x30
   127c8:	b	12918 <__assert_fail@plt+0x1bcc>
   127cc:	ldr	r0, [sp, #48]	; 0x30
   127d0:	bl	10c80 <strlen@plt>
   127d4:	str	r0, [sp, #24]
   127d8:	b	127ac <__assert_fail@plt+0x1a60>
   127dc:	mov	r1, fp
   127e0:	ldr	r4, [sp, #88]	; 0x58
   127e4:	mov	r2, r8
   127e8:	mov	ip, r8
   127ec:	ldr	fp, [sp, #92]	; 0x5c
   127f0:	ldr	r8, [sp, #56]	; 0x38
   127f4:	ldr	r9, [sp, #84]	; 0x54
   127f8:	ldr	r0, [sp, #24]
   127fc:	cmp	r7, r0
   12800:	bcs	129b8 <__assert_fail@plt+0x1c6c>
   12804:	ldrb	r3, [r1]
   12808:	cmp	r3, #0
   1280c:	beq	129c0 <__assert_fail@plt+0x1c74>
   12810:	mov	r3, r1
   12814:	add	r2, r2, #1
   12818:	add	r1, r6, r2
   1281c:	cmp	r0, r1
   12820:	bls	129c8 <__assert_fail@plt+0x1c7c>
   12824:	ldrb	r1, [r3, #1]!
   12828:	cmp	r1, #0
   1282c:	bne	12814 <__assert_fail@plt+0x1ac8>
   12830:	mov	ip, r2
   12834:	mov	r5, #0
   12838:	b	129e8 <__assert_fail@plt+0x1c9c>
   1283c:	ldr	r3, [sp, #56]	; 0x38
   12840:	str	r3, [sp, #64]	; 0x40
   12844:	ldr	r8, [sp, #84]	; 0x54
   12848:	mov	r7, #2
   1284c:	b	12d90 <__assert_fail@plt+0x2044>
   12850:	cmp	r2, r7
   12854:	beq	128f4 <__assert_fail@plt+0x1ba8>
   12858:	ldrb	r3, [r2], #1
   1285c:	sub	r3, r3, #91	; 0x5b
   12860:	cmp	r3, #33	; 0x21
   12864:	ldrls	pc, [pc, r3, lsl #2]
   12868:	b	12850 <__assert_fail@plt+0x1b04>
   1286c:	andeq	r2, r1, ip, lsr r8
   12870:	andeq	r2, r1, ip, lsr r8
   12874:	andeq	r2, r1, r0, asr r8
   12878:	andeq	r2, r1, ip, lsr r8
   1287c:	andeq	r2, r1, r0, asr r8
   12880:	andeq	r2, r1, ip, lsr r8
   12884:	andeq	r2, r1, r0, asr r8
   12888:	andeq	r2, r1, r0, asr r8
   1288c:	andeq	r2, r1, r0, asr r8
   12890:	andeq	r2, r1, r0, asr r8
   12894:	andeq	r2, r1, r0, asr r8
   12898:	andeq	r2, r1, r0, asr r8
   1289c:	andeq	r2, r1, r0, asr r8
   128a0:	andeq	r2, r1, r0, asr r8
   128a4:	andeq	r2, r1, r0, asr r8
   128a8:	andeq	r2, r1, r0, asr r8
   128ac:	andeq	r2, r1, r0, asr r8
   128b0:	andeq	r2, r1, r0, asr r8
   128b4:	andeq	r2, r1, r0, asr r8
   128b8:	andeq	r2, r1, r0, asr r8
   128bc:	andeq	r2, r1, r0, asr r8
   128c0:	andeq	r2, r1, r0, asr r8
   128c4:	andeq	r2, r1, r0, asr r8
   128c8:	andeq	r2, r1, r0, asr r8
   128cc:	andeq	r2, r1, r0, asr r8
   128d0:	andeq	r2, r1, r0, asr r8
   128d4:	andeq	r2, r1, r0, asr r8
   128d8:	andeq	r2, r1, r0, asr r8
   128dc:	andeq	r2, r1, r0, asr r8
   128e0:	andeq	r2, r1, r0, asr r8
   128e4:	andeq	r2, r1, r0, asr r8
   128e8:	andeq	r2, r1, r0, asr r8
   128ec:	andeq	r2, r1, r0, asr r8
   128f0:	andeq	r2, r1, ip, lsr r8
   128f4:	ldr	r0, [sp, #100]	; 0x64
   128f8:	bl	10bd8 <iswprint@plt>
   128fc:	cmp	r0, #0
   12900:	moveq	r5, #0
   12904:	add	r8, r8, r4
   12908:	add	r0, sp, #104	; 0x68
   1290c:	bl	10ba8 <mbsinit@plt>
   12910:	cmp	r0, #0
   12914:	bne	12984 <__assert_fail@plt+0x1c38>
   12918:	add	r7, r6, r8
   1291c:	add	fp, r9, r7
   12920:	add	r3, sp, #104	; 0x68
   12924:	ldr	r2, [sp, #24]
   12928:	sub	r2, r2, r7
   1292c:	mov	r1, fp
   12930:	add	r0, sp, #100	; 0x64
   12934:	bl	1466c <__assert_fail@plt+0x3920>
   12938:	subs	r4, r0, #0
   1293c:	beq	129d4 <__assert_fail@plt+0x1c88>
   12940:	cmn	r4, #1
   12944:	beq	1299c <__assert_fail@plt+0x1c50>
   12948:	cmn	r4, #2
   1294c:	beq	127dc <__assert_fail@plt+0x1a90>
   12950:	ldr	r3, [sp, #32]
   12954:	cmp	sl, #2
   12958:	movne	r3, #0
   1295c:	andeq	r3, r3, #1
   12960:	cmp	r3, #0
   12964:	beq	128f4 <__assert_fail@plt+0x1ba8>
   12968:	cmp	r4, #1
   1296c:	bls	128f4 <__assert_fail@plt+0x1ba8>
   12970:	add	r2, r7, #1
   12974:	add	r2, r9, r2
   12978:	add	r3, r9, r4
   1297c:	add	r7, r3, r7
   12980:	b	12858 <__assert_fail@plt+0x1b0c>
   12984:	ldr	r4, [sp, #88]	; 0x58
   12988:	mov	ip, r8
   1298c:	ldr	fp, [sp, #92]	; 0x5c
   12990:	ldr	r8, [sp, #56]	; 0x38
   12994:	ldr	r9, [sp, #84]	; 0x54
   12998:	b	129e8 <__assert_fail@plt+0x1c9c>
   1299c:	ldr	r4, [sp, #88]	; 0x58
   129a0:	mov	ip, r8
   129a4:	ldr	fp, [sp, #92]	; 0x5c
   129a8:	ldr	r8, [sp, #56]	; 0x38
   129ac:	ldr	r9, [sp, #84]	; 0x54
   129b0:	mov	r5, #0
   129b4:	b	129e8 <__assert_fail@plt+0x1c9c>
   129b8:	mov	r5, #0
   129bc:	b	129e8 <__assert_fail@plt+0x1c9c>
   129c0:	mov	r5, #0
   129c4:	b	129e8 <__assert_fail@plt+0x1c9c>
   129c8:	mov	ip, r2
   129cc:	mov	r5, #0
   129d0:	b	129e8 <__assert_fail@plt+0x1c9c>
   129d4:	ldr	r4, [sp, #88]	; 0x58
   129d8:	mov	ip, r8
   129dc:	ldr	fp, [sp, #92]	; 0x5c
   129e0:	ldr	r8, [sp, #56]	; 0x38
   129e4:	ldr	r9, [sp, #84]	; 0x54
   129e8:	cmp	ip, #1
   129ec:	bls	12778 <__assert_fail@plt+0x1a2c>
   129f0:	add	lr, r6, ip
   129f4:	ldr	r3, [sp, #48]	; 0x30
   129f8:	add	r1, r3, r6
   129fc:	mov	r3, #0
   12a00:	eor	r0, r5, #1
   12a04:	ldr	r2, [sp, #28]
   12a08:	and	r0, r0, r2
   12a0c:	uxtb	r0, r0
   12a10:	str	r0, [sp, #56]	; 0x38
   12a14:	mov	r7, #92	; 0x5c
   12a18:	ldr	ip, [sp, #36]	; 0x24
   12a1c:	str	r5, [sp, #84]	; 0x54
   12a20:	ldr	r2, [sp, #44]	; 0x2c
   12a24:	b	12a94 <__assert_fail@plt+0x1d48>
   12a28:	cmp	r2, #0
   12a2c:	beq	12a3c <__assert_fail@plt+0x1cf0>
   12a30:	cmp	r9, fp
   12a34:	strbhi	r7, [r8, fp]
   12a38:	add	fp, fp, #1
   12a3c:	add	r5, r6, #1
   12a40:	cmp	r5, lr
   12a44:	bcs	12b50 <__assert_fail@plt+0x1e04>
   12a48:	eor	r2, r3, #1
   12a4c:	and	r2, r2, ip
   12a50:	ands	r2, r2, #255	; 0xff
   12a54:	beq	12b6c <__assert_fail@plt+0x1e20>
   12a58:	cmp	r9, fp
   12a5c:	movhi	r2, #39	; 0x27
   12a60:	strbhi	r2, [r8, fp]
   12a64:	add	r2, fp, #1
   12a68:	cmp	r9, r2
   12a6c:	movhi	ip, #39	; 0x27
   12a70:	strbhi	ip, [r8, r2]
   12a74:	add	fp, fp, #2
   12a78:	ldr	ip, [sp, #56]	; 0x38
   12a7c:	mov	r2, ip
   12a80:	mov	r6, r5
   12a84:	cmp	r9, fp
   12a88:	strbhi	r4, [r8, fp]
   12a8c:	add	fp, fp, #1
   12a90:	ldrb	r4, [r1, #1]!
   12a94:	cmp	r0, #0
   12a98:	beq	12a28 <__assert_fail@plt+0x1cdc>
   12a9c:	ldr	r3, [sp, #32]
   12aa0:	cmp	r3, #0
   12aa4:	bne	12d38 <__assert_fail@plt+0x1fec>
   12aa8:	eor	r3, ip, #1
   12aac:	cmp	sl, #2
   12ab0:	movne	r3, #0
   12ab4:	andeq	r3, r3, #1
   12ab8:	cmp	r3, #0
   12abc:	beq	12af4 <__assert_fail@plt+0x1da8>
   12ac0:	cmp	r9, fp
   12ac4:	movhi	ip, #39	; 0x27
   12ac8:	strbhi	ip, [r8, fp]
   12acc:	add	ip, fp, #1
   12ad0:	cmp	r9, ip
   12ad4:	movhi	r5, #36	; 0x24
   12ad8:	strbhi	r5, [r8, ip]
   12adc:	add	ip, fp, #2
   12ae0:	cmp	r9, ip
   12ae4:	movhi	r5, #39	; 0x27
   12ae8:	strbhi	r5, [r8, ip]
   12aec:	add	fp, fp, #3
   12af0:	mov	ip, r3
   12af4:	cmp	r9, fp
   12af8:	strbhi	r7, [r8, fp]
   12afc:	add	r3, fp, #1
   12b00:	cmp	r9, r3
   12b04:	bls	12b14 <__assert_fail@plt+0x1dc8>
   12b08:	lsr	r5, r4, #6
   12b0c:	add	r5, r5, #48	; 0x30
   12b10:	strb	r5, [r8, r3]
   12b14:	add	r3, fp, #2
   12b18:	cmp	r9, r3
   12b1c:	bls	12b2c <__assert_fail@plt+0x1de0>
   12b20:	ubfx	r5, r4, #3, #3
   12b24:	add	r5, r5, #48	; 0x30
   12b28:	strb	r5, [r8, r3]
   12b2c:	add	fp, fp, #3
   12b30:	and	r4, r4, #7
   12b34:	add	r4, r4, #48	; 0x30
   12b38:	add	r5, r6, #1
   12b3c:	cmp	r5, lr
   12b40:	bcs	12b5c <__assert_fail@plt+0x1e10>
   12b44:	ldr	r3, [sp, #56]	; 0x38
   12b48:	mov	r6, r5
   12b4c:	b	12a84 <__assert_fail@plt+0x1d38>
   12b50:	str	ip, [sp, #36]	; 0x24
   12b54:	ldr	r5, [sp, #84]	; 0x54
   12b58:	b	12588 <__assert_fail@plt+0x183c>
   12b5c:	str	ip, [sp, #36]	; 0x24
   12b60:	ldr	r5, [sp, #84]	; 0x54
   12b64:	mov	r3, r0
   12b68:	b	12588 <__assert_fail@plt+0x183c>
   12b6c:	mov	r6, r5
   12b70:	b	12a84 <__assert_fail@plt+0x1d38>
   12b74:	ldr	r3, [sp, #44]	; 0x2c
   12b78:	b	121dc <__assert_fail@plt+0x1490>
   12b7c:	mov	r5, #0
   12b80:	mov	r3, r5
   12b84:	mov	r4, #63	; 0x3f
   12b88:	b	121dc <__assert_fail@plt+0x1490>
   12b8c:	mov	r5, #0
   12b90:	mov	r3, r5
   12b94:	mov	r4, #63	; 0x3f
   12b98:	b	121dc <__assert_fail@plt+0x1490>
   12b9c:	mov	r5, #0
   12ba0:	mov	r3, r5
   12ba4:	b	121dc <__assert_fail@plt+0x1490>
   12ba8:	mov	r5, #0
   12bac:	mov	r3, r5
   12bb0:	b	121dc <__assert_fail@plt+0x1490>
   12bb4:	ldr	r5, [sp, #44]	; 0x2c
   12bb8:	ldr	r3, [sp, #32]
   12bbc:	b	121dc <__assert_fail@plt+0x1490>
   12bc0:	ldr	r5, [sp, #44]	; 0x2c
   12bc4:	mov	r3, #0
   12bc8:	str	r3, [sp, #44]	; 0x2c
   12bcc:	b	121dc <__assert_fail@plt+0x1490>
   12bd0:	mov	r4, r3
   12bd4:	mov	r5, #0
   12bd8:	b	12234 <__assert_fail@plt+0x14e8>
   12bdc:	mov	r5, #0
   12be0:	mov	r4, #97	; 0x61
   12be4:	b	12234 <__assert_fail@plt+0x14e8>
   12be8:	mov	r5, #0
   12bec:	mov	r3, r5
   12bf0:	mov	r4, #92	; 0x5c
   12bf4:	b	12588 <__assert_fail@plt+0x183c>
   12bf8:	ldr	r3, [sp, #48]	; 0x30
   12bfc:	ldrb	r5, [r3, r6]
   12c00:	adds	r5, r5, #0
   12c04:	movne	r5, #1
   12c08:	b	122d8 <__assert_fail@plt+0x158c>
   12c0c:	cmp	sl, #2
   12c10:	movne	r3, #0
   12c14:	moveq	r3, #1
   12c18:	ldr	r1, [sp, #32]
   12c1c:	cmp	fp, #0
   12c20:	andeq	r2, r3, r1
   12c24:	movne	r2, #0
   12c28:	cmp	r2, #0
   12c2c:	bne	12d4c <__assert_fail@plt+0x2000>
   12c30:	eor	r2, r1, #1
   12c34:	uxtb	r2, r2
   12c38:	and	r3, r3, r2
   12c3c:	ldr	r1, [sp, #68]	; 0x44
   12c40:	ands	r3, r1, r3
   12c44:	beq	12cd8 <__assert_fail@plt+0x1f8c>
   12c48:	ldr	r2, [sp, #40]	; 0x28
   12c4c:	cmp	r2, #0
   12c50:	bne	12c88 <__assert_fail@plt+0x1f3c>
   12c54:	ldr	r2, [sp, #72]	; 0x48
   12c58:	adds	r2, r2, #0
   12c5c:	movne	r2, #1
   12c60:	cmp	r9, #0
   12c64:	movne	r2, #0
   12c68:	str	r2, [sp, #68]	; 0x44
   12c6c:	mov	sl, #2
   12c70:	ldr	r1, [sp, #40]	; 0x28
   12c74:	str	r1, [sp, #32]
   12c78:	cmp	r2, #0
   12c7c:	beq	12ccc <__assert_fail@plt+0x1f80>
   12c80:	ldr	r9, [sp, #72]	; 0x48
   12c84:	b	119e0 <__assert_fail@plt+0xc94>
   12c88:	ldr	r3, [sp, #168]	; 0xa8
   12c8c:	str	r3, [sp, #16]
   12c90:	ldr	r3, [sp, #164]	; 0xa4
   12c94:	str	r3, [sp, #12]
   12c98:	ldr	r3, [sp, #160]	; 0xa0
   12c9c:	str	r3, [sp, #8]
   12ca0:	ldr	r3, [sp, #156]	; 0x9c
   12ca4:	str	r3, [sp, #4]
   12ca8:	mov	r3, #5
   12cac:	str	r3, [sp]
   12cb0:	ldr	r3, [sp, #24]
   12cb4:	ldr	r2, [sp, #48]	; 0x30
   12cb8:	ldr	r1, [sp, #72]	; 0x48
   12cbc:	ldr	r0, [sp, #64]	; 0x40
   12cc0:	bl	11968 <__assert_fail@plt+0xc1c>
   12cc4:	mov	fp, r0
   12cc8:	b	12de8 <__assert_fail@plt+0x209c>
   12ccc:	mov	r8, r9
   12cd0:	mov	r2, r3
   12cd4:	b	12cdc <__assert_fail@plt+0x1f90>
   12cd8:	mov	r8, r9
   12cdc:	ldr	r3, [sp, #60]	; 0x3c
   12ce0:	cmp	r3, #0
   12ce4:	moveq	r2, #0
   12ce8:	andne	r2, r2, #1
   12cec:	cmp	r2, #0
   12cf0:	beq	12d20 <__assert_fail@plt+0x1fd4>
   12cf4:	mov	r2, r3
   12cf8:	ldrb	r3, [r3]
   12cfc:	cmp	r3, #0
   12d00:	beq	12d20 <__assert_fail@plt+0x1fd4>
   12d04:	ldr	r1, [sp, #64]	; 0x40
   12d08:	cmp	r8, fp
   12d0c:	strbhi	r3, [r1, fp]
   12d10:	add	fp, fp, #1
   12d14:	ldrb	r3, [r2, #1]!
   12d18:	cmp	r3, #0
   12d1c:	bne	12d08 <__assert_fail@plt+0x1fbc>
   12d20:	cmp	r8, fp
   12d24:	bls	12de8 <__assert_fail@plt+0x209c>
   12d28:	mov	r3, #0
   12d2c:	ldr	r2, [sp, #64]	; 0x40
   12d30:	strb	r3, [r2, fp]
   12d34:	b	12de8 <__assert_fail@plt+0x209c>
   12d38:	mov	r8, r9
   12d3c:	mov	r7, sl
   12d40:	ldr	r3, [sp, #32]
   12d44:	str	r3, [sp, #28]
   12d48:	b	12d90 <__assert_fail@plt+0x2044>
   12d4c:	mov	r8, r9
   12d50:	mov	r7, #2
   12d54:	b	12d90 <__assert_fail@plt+0x2044>
   12d58:	mov	r8, r9
   12d5c:	mov	r7, sl
   12d60:	b	12d90 <__assert_fail@plt+0x2044>
   12d64:	mov	r8, r9
   12d68:	mov	r7, sl
   12d6c:	b	12d90 <__assert_fail@plt+0x2044>
   12d70:	mov	r8, r9
   12d74:	mov	r7, sl
   12d78:	b	12d90 <__assert_fail@plt+0x2044>
   12d7c:	mov	r8, r9
   12d80:	mov	r7, sl
   12d84:	b	12d90 <__assert_fail@plt+0x2044>
   12d88:	mov	r8, r9
   12d8c:	mov	r7, sl
   12d90:	ldr	r3, [sp, #28]
   12d94:	cmp	r7, #2
   12d98:	movne	r3, #0
   12d9c:	andeq	r3, r3, #1
   12da0:	cmp	r3, #0
   12da4:	movne	r7, #4
   12da8:	ldr	r3, [sp, #168]	; 0xa8
   12dac:	str	r3, [sp, #16]
   12db0:	ldr	r3, [sp, #164]	; 0xa4
   12db4:	str	r3, [sp, #12]
   12db8:	mov	r3, #0
   12dbc:	str	r3, [sp, #8]
   12dc0:	ldr	r3, [sp, #156]	; 0x9c
   12dc4:	bic	r3, r3, #2
   12dc8:	str	r3, [sp, #4]
   12dcc:	str	r7, [sp]
   12dd0:	ldr	r3, [sp, #24]
   12dd4:	ldr	r2, [sp, #48]	; 0x30
   12dd8:	mov	r1, r8
   12ddc:	ldr	r0, [sp, #64]	; 0x40
   12de0:	bl	11968 <__assert_fail@plt+0xc1c>
   12de4:	mov	fp, r0
   12de8:	mov	r0, fp
   12dec:	add	sp, sp, #116	; 0x74
   12df0:	ldrd	r4, [sp]
   12df4:	ldrd	r6, [sp, #8]
   12df8:	ldrd	r8, [sp, #16]
   12dfc:	ldrd	sl, [sp, #24]
   12e00:	add	sp, sp, #32
   12e04:	pop	{pc}		; (ldr pc, [sp], #4)
   12e08:	mov	r8, r9
   12e0c:	mov	r7, sl
   12e10:	b	12da8 <__assert_fail@plt+0x205c>
   12e14:	add	fp, fp, #4
   12e18:	str	r3, [sp, #36]	; 0x24
   12e1c:	mov	r5, #0
   12e20:	mov	r4, #48	; 0x30
   12e24:	b	121dc <__assert_fail@plt+0x1490>
   12e28:	mov	r3, #1
   12e2c:	str	r3, [sp, #32]
   12e30:	str	r3, [sp, #28]
   12e34:	str	r3, [sp, #52]	; 0x34
   12e38:	movw	r3, #20100	; 0x4e84
   12e3c:	movt	r3, #1
   12e40:	str	r3, [sp, #60]	; 0x3c
   12e44:	mov	fp, #0
   12e48:	mov	sl, #5
   12e4c:	b	11a40 <__assert_fail@plt+0xcf4>
   12e50:	ldr	r3, [sp, #48]	; 0x30
   12e54:	ldrb	r4, [r3, r6]
   12e58:	cmp	r4, #126	; 0x7e
   12e5c:	ldrls	pc, [pc, r4, lsl #2]
   12e60:	b	1274c <__assert_fail@plt+0x1a00>
   12e64:	ldrdeq	r1, [r1], -r4
   12e68:	andeq	r2, r1, ip, asr #14
   12e6c:	andeq	r2, r1, ip, asr #14
   12e70:	andeq	r2, r1, ip, asr #14
   12e74:	andeq	r2, r1, ip, asr #14
   12e78:	andeq	r2, r1, ip, asr #14
   12e7c:	andeq	r2, r1, ip, asr #14
   12e80:	ldrdeq	r2, [r1], -ip
   12e84:	andeq	r2, r1, r8, ror r1
   12e88:	andeq	r2, r1, ip, lsl r5
   12e8c:	ldrdeq	r2, [r1], -r8
   12e90:	andeq	r2, r1, r0, lsr r5
   12e94:	andeq	r2, r1, ip, lsl #3
   12e98:	andeq	r2, r1, r0, lsr #3
   12e9c:	andeq	r2, r1, ip, asr #14
   12ea0:	andeq	r2, r1, ip, asr #14
   12ea4:	andeq	r2, r1, ip, asr #14
   12ea8:	andeq	r2, r1, ip, asr #14
   12eac:	andeq	r2, r1, ip, asr #14
   12eb0:	andeq	r2, r1, ip, asr #14
   12eb4:	andeq	r2, r1, ip, asr #14
   12eb8:	andeq	r2, r1, ip, asr #14
   12ebc:	andeq	r2, r1, ip, asr #14
   12ec0:	andeq	r2, r1, ip, asr #14
   12ec4:	andeq	r2, r1, ip, asr #14
   12ec8:	andeq	r2, r1, ip, asr #14
   12ecc:	andeq	r2, r1, ip, asr #14
   12ed0:	andeq	r2, r1, ip, asr #14
   12ed4:	andeq	r2, r1, ip, asr #14
   12ed8:	andeq	r2, r1, ip, asr #14
   12edc:	andeq	r2, r1, ip, asr #14
   12ee0:	andeq	r2, r1, ip, asr #14
   12ee4:	andeq	r2, r1, r0, ror #12
   12ee8:	muleq	r1, ip, r6
   12eec:	muleq	r1, ip, r6
   12ef0:	andeq	r2, r1, r4, asr r6
   12ef4:	muleq	r1, ip, r6
   12ef8:	andeq	r2, r1, r0, asr #23
   12efc:	muleq	r1, ip, r6
   12f00:	andeq	r2, r1, ip, lsr #13
   12f04:	muleq	r1, ip, r6
   12f08:	muleq	r1, ip, r6
   12f0c:	muleq	r1, ip, r6
   12f10:	andeq	r2, r1, r0, asr #23
   12f14:	andeq	r2, r1, r0, asr #23
   12f18:	andeq	r2, r1, r0, asr #23
   12f1c:	andeq	r2, r1, r0, asr #23
   12f20:	andeq	r2, r1, r0, asr #23
   12f24:	andeq	r2, r1, r0, asr #23
   12f28:	andeq	r2, r1, r0, asr #23
   12f2c:	andeq	r2, r1, r0, asr #23
   12f30:	andeq	r2, r1, r0, asr #23
   12f34:	andeq	r2, r1, r0, asr #23
   12f38:	andeq	r2, r1, r0, asr #23
   12f3c:	andeq	r2, r1, r0, asr #23
   12f40:	andeq	r2, r1, r0, asr #23
   12f44:	andeq	r2, r1, r0, asr #23
   12f48:	andeq	r2, r1, r0, asr #23
   12f4c:	andeq	r2, r1, r0, asr #23
   12f50:	muleq	r1, ip, r6
   12f54:	muleq	r1, ip, r6
   12f58:	muleq	r1, ip, r6
   12f5c:	muleq	r1, ip, r6
   12f60:	andeq	r2, r1, ip
   12f64:	andeq	r2, r1, ip, asr #14
   12f68:	andeq	r2, r1, r0, asr #23
   12f6c:	andeq	r2, r1, r0, asr #23
   12f70:	andeq	r2, r1, r0, asr #23
   12f74:	andeq	r2, r1, r0, asr #23
   12f78:	andeq	r2, r1, r0, asr #23
   12f7c:	andeq	r2, r1, r0, asr #23
   12f80:	andeq	r2, r1, r0, asr #23
   12f84:	andeq	r2, r1, r0, asr #23
   12f88:	andeq	r2, r1, r0, asr #23
   12f8c:	andeq	r2, r1, r0, asr #23
   12f90:	andeq	r2, r1, r0, asr #23
   12f94:	andeq	r2, r1, r0, asr #23
   12f98:	andeq	r2, r1, r0, asr #23
   12f9c:	andeq	r2, r1, r0, asr #23
   12fa0:	andeq	r2, r1, r0, asr #23
   12fa4:	andeq	r2, r1, r0, asr #23
   12fa8:	andeq	r2, r1, r0, asr #23
   12fac:	andeq	r2, r1, r0, asr #23
   12fb0:	andeq	r2, r1, r0, asr #23
   12fb4:	andeq	r2, r1, r0, asr #23
   12fb8:	andeq	r2, r1, r0, asr #23
   12fbc:	andeq	r2, r1, r0, asr #23
   12fc0:	andeq	r2, r1, r0, asr #23
   12fc4:	andeq	r2, r1, r0, asr #23
   12fc8:	andeq	r2, r1, r0, asr #23
   12fcc:	andeq	r2, r1, r0, asr #23
   12fd0:	muleq	r1, ip, r6
   12fd4:	andeq	r2, r1, r4, asr #10
   12fd8:	andeq	r2, r1, r0, asr #23
   12fdc:	muleq	r1, ip, r6
   12fe0:	andeq	r2, r1, r0, asr #23
   12fe4:	muleq	r1, ip, r6
   12fe8:	andeq	r2, r1, r0, asr #23
   12fec:	andeq	r2, r1, r0, asr #23
   12ff0:	andeq	r2, r1, r0, asr #23
   12ff4:	andeq	r2, r1, r0, asr #23
   12ff8:	andeq	r2, r1, r0, asr #23
   12ffc:	andeq	r2, r1, r0, asr #23
   13000:	andeq	r2, r1, r0, asr #23
   13004:	andeq	r2, r1, r0, asr #23
   13008:	andeq	r2, r1, r0, asr #23
   1300c:	andeq	r2, r1, r0, asr #23
   13010:	andeq	r2, r1, r0, asr #23
   13014:	andeq	r2, r1, r0, asr #23
   13018:	andeq	r2, r1, r0, asr #23
   1301c:	andeq	r2, r1, r0, asr #23
   13020:	andeq	r2, r1, r0, asr #23
   13024:	andeq	r2, r1, r0, asr #23
   13028:	andeq	r2, r1, r0, asr #23
   1302c:	andeq	r2, r1, r0, asr #23
   13030:	andeq	r2, r1, r0, asr #23
   13034:	andeq	r2, r1, r0, asr #23
   13038:	andeq	r2, r1, r0, asr #23
   1303c:	andeq	r2, r1, r0, asr #23
   13040:	andeq	r2, r1, r0, asr #23
   13044:	andeq	r2, r1, r0, asr #23
   13048:	andeq	r2, r1, r0, asr #23
   1304c:	andeq	r2, r1, r0, asr #23
   13050:	andeq	r2, r1, r4, lsl #12
   13054:	muleq	r1, ip, r6
   13058:	andeq	r2, r1, r4, lsl #12
   1305c:	andeq	r2, r1, r4, asr r6
   13060:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13064:	strd	r6, [sp, #8]
   13068:	strd	r8, [sp, #16]
   1306c:	strd	sl, [sp, #24]
   13070:	str	lr, [sp, #32]
   13074:	sub	sp, sp, #52	; 0x34
   13078:	mov	r5, r0
   1307c:	str	r1, [sp, #24]
   13080:	str	r2, [sp, #28]
   13084:	mov	r4, r3
   13088:	bl	10c98 <__errno_location@plt>
   1308c:	str	r0, [sp, #32]
   13090:	ldr	r3, [r0]
   13094:	str	r3, [sp, #36]	; 0x24
   13098:	movw	r3, #24788	; 0x60d4
   1309c:	movt	r3, #2
   130a0:	ldr	r6, [r3]
   130a4:	cmn	r5, #-2147483647	; 0x80000001
   130a8:	movne	r3, #0
   130ac:	moveq	r3, #1
   130b0:	orrs	r3, r3, r5, lsr #31
   130b4:	bne	13218 <__assert_fail@plt+0x24cc>
   130b8:	movw	r3, #24788	; 0x60d4
   130bc:	movt	r3, #2
   130c0:	ldr	r2, [r3, #4]
   130c4:	cmp	r2, r5
   130c8:	bgt	13138 <__assert_fail@plt+0x23ec>
   130cc:	str	r2, [sp, #44]	; 0x2c
   130d0:	add	r3, r3, #8
   130d4:	cmp	r6, r3
   130d8:	beq	1321c <__assert_fail@plt+0x24d0>
   130dc:	sub	r2, r5, r2
   130e0:	mov	r3, #8
   130e4:	str	r3, [sp]
   130e8:	mvn	r3, #-2147483648	; 0x80000000
   130ec:	add	r2, r2, #1
   130f0:	add	r1, sp, #44	; 0x2c
   130f4:	mov	r0, r6
   130f8:	bl	141a0 <__assert_fail@plt+0x3454>
   130fc:	mov	r6, r0
   13100:	movw	r3, #24788	; 0x60d4
   13104:	movt	r3, #2
   13108:	str	r0, [r3]
   1310c:	movw	r7, #24788	; 0x60d4
   13110:	movt	r7, #2
   13114:	ldr	r0, [r7, #4]
   13118:	ldr	r2, [sp, #44]	; 0x2c
   1311c:	sub	r2, r2, r0
   13120:	lsl	r2, r2, #3
   13124:	mov	r1, #0
   13128:	add	r0, r6, r0, lsl #3
   1312c:	bl	10cb0 <memset@plt>
   13130:	ldr	r3, [sp, #44]	; 0x2c
   13134:	str	r3, [r7, #4]
   13138:	add	fp, r6, r5, lsl #3
   1313c:	ldr	r8, [r6, r5, lsl #3]
   13140:	ldr	r7, [fp, #4]
   13144:	ldr	r3, [r4, #4]
   13148:	orr	r9, r3, #1
   1314c:	add	sl, r4, #8
   13150:	ldr	r3, [r4, #44]	; 0x2c
   13154:	str	r3, [sp, #16]
   13158:	ldr	r3, [r4, #40]	; 0x28
   1315c:	str	r3, [sp, #12]
   13160:	str	sl, [sp, #8]
   13164:	str	r9, [sp, #4]
   13168:	ldr	r3, [r4]
   1316c:	str	r3, [sp]
   13170:	ldr	r3, [sp, #28]
   13174:	ldr	r2, [sp, #24]
   13178:	mov	r1, r8
   1317c:	mov	r0, r7
   13180:	bl	11968 <__assert_fail@plt+0xc1c>
   13184:	cmp	r8, r0
   13188:	bhi	131ec <__assert_fail@plt+0x24a0>
   1318c:	add	r8, r0, #1
   13190:	str	r8, [r6, r5, lsl #3]
   13194:	movw	r3, #24908	; 0x614c
   13198:	movt	r3, #2
   1319c:	cmp	r7, r3
   131a0:	beq	131ac <__assert_fail@plt+0x2460>
   131a4:	mov	r0, r7
   131a8:	bl	14510 <__assert_fail@plt+0x37c4>
   131ac:	mov	r0, r8
   131b0:	bl	13f9c <__assert_fail@plt+0x3250>
   131b4:	mov	r7, r0
   131b8:	str	r0, [fp, #4]
   131bc:	ldr	r3, [r4, #44]	; 0x2c
   131c0:	str	r3, [sp, #16]
   131c4:	ldr	r3, [r4, #40]	; 0x28
   131c8:	str	r3, [sp, #12]
   131cc:	str	sl, [sp, #8]
   131d0:	str	r9, [sp, #4]
   131d4:	ldr	r3, [r4]
   131d8:	str	r3, [sp]
   131dc:	ldr	r3, [sp, #28]
   131e0:	ldr	r2, [sp, #24]
   131e4:	mov	r1, r8
   131e8:	bl	11968 <__assert_fail@plt+0xc1c>
   131ec:	ldr	r3, [sp, #32]
   131f0:	ldr	r2, [sp, #36]	; 0x24
   131f4:	str	r2, [r3]
   131f8:	mov	r0, r7
   131fc:	add	sp, sp, #52	; 0x34
   13200:	ldrd	r4, [sp]
   13204:	ldrd	r6, [sp, #8]
   13208:	ldrd	r8, [sp, #16]
   1320c:	ldrd	sl, [sp, #24]
   13210:	add	sp, sp, #32
   13214:	pop	{pc}		; (ldr pc, [sp], #4)
   13218:	bl	10d40 <abort@plt>
   1321c:	sub	r2, r5, r2
   13220:	mov	r3, #8
   13224:	str	r3, [sp]
   13228:	mvn	r3, #-2147483648	; 0x80000000
   1322c:	add	r2, r2, #1
   13230:	add	r1, sp, #44	; 0x2c
   13234:	mov	r0, #0
   13238:	bl	141a0 <__assert_fail@plt+0x3454>
   1323c:	mov	r6, r0
   13240:	movw	r3, #24788	; 0x60d4
   13244:	movt	r3, #2
   13248:	str	r0, [r3]
   1324c:	ldrd	r2, [r3, #8]
   13250:	strd	r2, [r0]
   13254:	b	1310c <__assert_fail@plt+0x23c0>
   13258:	strd	r4, [sp, #-16]!
   1325c:	str	r6, [sp, #8]
   13260:	str	lr, [sp, #12]
   13264:	mov	r4, r0
   13268:	bl	10c98 <__errno_location@plt>
   1326c:	mov	r5, r0
   13270:	ldr	r6, [r0]
   13274:	cmp	r4, #0
   13278:	ldr	r3, [pc, #32]	; 132a0 <__assert_fail@plt+0x2554>
   1327c:	moveq	r4, r3
   13280:	mov	r1, #48	; 0x30
   13284:	mov	r0, r4
   13288:	bl	14310 <__assert_fail@plt+0x35c4>
   1328c:	str	r6, [r5]
   13290:	ldrd	r4, [sp]
   13294:	ldr	r6, [sp, #8]
   13298:	add	sp, sp, #12
   1329c:	pop	{pc}		; (ldr pc, [sp], #4)
   132a0:	andeq	r6, r2, ip, asr #4
   132a4:	subs	r3, r0, #0
   132a8:	ldr	r2, [pc, #8]	; 132b8 <__assert_fail@plt+0x256c>
   132ac:	moveq	r3, r2
   132b0:	ldr	r0, [r3]
   132b4:	bx	lr
   132b8:	andeq	r6, r2, ip, asr #4
   132bc:	subs	r3, r0, #0
   132c0:	ldr	r2, [pc, #8]	; 132d0 <__assert_fail@plt+0x2584>
   132c4:	moveq	r3, r2
   132c8:	str	r1, [r3]
   132cc:	bx	lr
   132d0:	andeq	r6, r2, ip, asr #4
   132d4:	push	{lr}		; (str lr, [sp, #-4]!)
   132d8:	subs	r3, r0, #0
   132dc:	ldr	r0, [pc, #44]	; 13310 <__assert_fail@plt+0x25c4>
   132e0:	moveq	r3, r0
   132e4:	add	r3, r3, #8
   132e8:	lsr	lr, r1, #5
   132ec:	and	r1, r1, #31
   132f0:	ldr	ip, [r3, lr, lsl #2]
   132f4:	lsr	r0, ip, r1
   132f8:	eor	r2, r2, r0
   132fc:	and	r2, r2, #1
   13300:	eor	r1, ip, r2, lsl r1
   13304:	str	r1, [r3, lr, lsl #2]
   13308:	and	r0, r0, #1
   1330c:	pop	{pc}		; (ldr pc, [sp], #4)
   13310:	andeq	r6, r2, ip, asr #4
   13314:	subs	r3, r0, #0
   13318:	ldr	r2, [pc, #12]	; 1332c <__assert_fail@plt+0x25e0>
   1331c:	moveq	r3, r2
   13320:	ldr	r0, [r3, #4]
   13324:	str	r1, [r3, #4]
   13328:	bx	lr
   1332c:	andeq	r6, r2, ip, asr #4
   13330:	subs	r3, r0, #0
   13334:	ldr	r0, [pc, #44]	; 13368 <__assert_fail@plt+0x261c>
   13338:	moveq	r3, r0
   1333c:	mov	r0, #10
   13340:	str	r0, [r3]
   13344:	cmp	r2, #0
   13348:	cmpne	r1, #0
   1334c:	beq	1335c <__assert_fail@plt+0x2610>
   13350:	str	r1, [r3, #40]	; 0x28
   13354:	str	r2, [r3, #44]	; 0x2c
   13358:	bx	lr
   1335c:	str	r4, [sp, #-8]!
   13360:	str	lr, [sp, #4]
   13364:	bl	10d40 <abort@plt>
   13368:	andeq	r6, r2, ip, asr #4
   1336c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13370:	strd	r6, [sp, #8]
   13374:	strd	r8, [sp, #16]
   13378:	str	sl, [sp, #24]
   1337c:	str	lr, [sp, #28]
   13380:	sub	sp, sp, #24
   13384:	mov	r7, r0
   13388:	mov	r8, r1
   1338c:	mov	r9, r2
   13390:	mov	sl, r3
   13394:	ldr	r4, [sp, #56]	; 0x38
   13398:	cmp	r4, #0
   1339c:	ldr	r3, [pc, #104]	; 1340c <__assert_fail@plt+0x26c0>
   133a0:	moveq	r4, r3
   133a4:	bl	10c98 <__errno_location@plt>
   133a8:	mov	r5, r0
   133ac:	ldr	r6, [r0]
   133b0:	ldr	r3, [r4, #44]	; 0x2c
   133b4:	str	r3, [sp, #16]
   133b8:	ldr	r3, [r4, #40]	; 0x28
   133bc:	str	r3, [sp, #12]
   133c0:	add	r3, r4, #8
   133c4:	str	r3, [sp, #8]
   133c8:	ldr	r3, [r4, #4]
   133cc:	str	r3, [sp, #4]
   133d0:	ldr	r3, [r4]
   133d4:	str	r3, [sp]
   133d8:	mov	r3, sl
   133dc:	mov	r2, r9
   133e0:	mov	r1, r8
   133e4:	mov	r0, r7
   133e8:	bl	11968 <__assert_fail@plt+0xc1c>
   133ec:	str	r6, [r5]
   133f0:	add	sp, sp, #24
   133f4:	ldrd	r4, [sp]
   133f8:	ldrd	r6, [sp, #8]
   133fc:	ldrd	r8, [sp, #16]
   13400:	ldr	sl, [sp, #24]
   13404:	add	sp, sp, #28
   13408:	pop	{pc}		; (ldr pc, [sp], #4)
   1340c:	andeq	r6, r2, ip, asr #4
   13410:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13414:	strd	r6, [sp, #8]
   13418:	strd	r8, [sp, #16]
   1341c:	strd	sl, [sp, #24]
   13420:	str	lr, [sp, #32]
   13424:	sub	sp, sp, #44	; 0x2c
   13428:	mov	r8, r0
   1342c:	mov	sl, r1
   13430:	mov	r6, r2
   13434:	subs	r4, r3, #0
   13438:	ldr	r3, [pc, #200]	; 13508 <__assert_fail@plt+0x27bc>
   1343c:	moveq	r4, r3
   13440:	bl	10c98 <__errno_location@plt>
   13444:	mov	r7, r0
   13448:	ldr	fp, [r0]
   1344c:	ldr	r5, [r4, #4]
   13450:	cmp	r6, #0
   13454:	orreq	r5, r5, #1
   13458:	add	r9, r4, #8
   1345c:	ldr	r3, [r4, #44]	; 0x2c
   13460:	str	r3, [sp, #16]
   13464:	ldr	r3, [r4, #40]	; 0x28
   13468:	str	r3, [sp, #12]
   1346c:	str	r9, [sp, #8]
   13470:	str	r5, [sp, #4]
   13474:	ldr	r3, [r4]
   13478:	str	r3, [sp]
   1347c:	str	sl, [sp, #36]	; 0x24
   13480:	mov	r3, sl
   13484:	str	r8, [sp, #32]
   13488:	mov	r2, r8
   1348c:	mov	r1, #0
   13490:	mov	r0, r1
   13494:	bl	11968 <__assert_fail@plt+0xc1c>
   13498:	mov	sl, r0
   1349c:	add	r8, r0, #1
   134a0:	mov	r0, r8
   134a4:	bl	13f9c <__assert_fail@plt+0x3250>
   134a8:	str	r0, [sp, #28]
   134ac:	ldr	r3, [r4, #44]	; 0x2c
   134b0:	str	r3, [sp, #16]
   134b4:	ldr	r3, [r4, #40]	; 0x28
   134b8:	str	r3, [sp, #12]
   134bc:	str	r9, [sp, #8]
   134c0:	str	r5, [sp, #4]
   134c4:	ldr	r3, [r4]
   134c8:	str	r3, [sp]
   134cc:	ldr	r3, [sp, #36]	; 0x24
   134d0:	ldr	r2, [sp, #32]
   134d4:	mov	r1, r8
   134d8:	bl	11968 <__assert_fail@plt+0xc1c>
   134dc:	str	fp, [r7]
   134e0:	cmp	r6, #0
   134e4:	strne	sl, [r6]
   134e8:	ldr	r0, [sp, #28]
   134ec:	add	sp, sp, #44	; 0x2c
   134f0:	ldrd	r4, [sp]
   134f4:	ldrd	r6, [sp, #8]
   134f8:	ldrd	r8, [sp, #16]
   134fc:	ldrd	sl, [sp, #24]
   13500:	add	sp, sp, #32
   13504:	pop	{pc}		; (ldr pc, [sp], #4)
   13508:	andeq	r6, r2, ip, asr #4
   1350c:	str	r4, [sp, #-8]!
   13510:	str	lr, [sp, #4]
   13514:	mov	r3, r2
   13518:	mov	r2, #0
   1351c:	bl	13410 <__assert_fail@plt+0x26c4>
   13520:	ldr	r4, [sp]
   13524:	add	sp, sp, #4
   13528:	pop	{pc}		; (ldr pc, [sp], #4)
   1352c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13530:	strd	r6, [sp, #8]
   13534:	str	r8, [sp, #16]
   13538:	str	lr, [sp, #20]
   1353c:	movw	r3, #24788	; 0x60d4
   13540:	movt	r3, #2
   13544:	ldr	r7, [r3]
   13548:	ldr	r3, [r3, #4]
   1354c:	cmp	r3, #1
   13550:	ble	1357c <__assert_fail@plt+0x2830>
   13554:	mov	r4, #1
   13558:	add	r6, r7, #4
   1355c:	movw	r5, #24788	; 0x60d4
   13560:	movt	r5, #2
   13564:	ldr	r0, [r6, r4, lsl #3]
   13568:	bl	14510 <__assert_fail@plt+0x37c4>
   1356c:	add	r4, r4, #1
   13570:	ldr	r3, [r5, #4]
   13574:	cmp	r3, r4
   13578:	bgt	13564 <__assert_fail@plt+0x2818>
   1357c:	ldr	r0, [r7, #4]
   13580:	movw	r3, #24908	; 0x614c
   13584:	movt	r3, #2
   13588:	cmp	r0, r3
   1358c:	beq	135b0 <__assert_fail@plt+0x2864>
   13590:	bl	14510 <__assert_fail@plt+0x37c4>
   13594:	movw	r3, #24788	; 0x60d4
   13598:	movt	r3, #2
   1359c:	mov	r2, #256	; 0x100
   135a0:	str	r2, [r3, #8]
   135a4:	movw	r2, #24908	; 0x614c
   135a8:	movt	r2, #2
   135ac:	str	r2, [r3, #12]
   135b0:	ldr	r3, [pc, #64]	; 135f8 <__assert_fail@plt+0x28ac>
   135b4:	cmp	r7, r3
   135b8:	beq	135d4 <__assert_fail@plt+0x2888>
   135bc:	mov	r0, r7
   135c0:	bl	14510 <__assert_fail@plt+0x37c4>
   135c4:	movw	r3, #24788	; 0x60d4
   135c8:	movt	r3, #2
   135cc:	add	r2, r3, #8
   135d0:	str	r2, [r3]
   135d4:	movw	r3, #24788	; 0x60d4
   135d8:	movt	r3, #2
   135dc:	mov	r2, #1
   135e0:	str	r2, [r3, #4]
   135e4:	ldrd	r4, [sp]
   135e8:	ldrd	r6, [sp, #8]
   135ec:	ldr	r8, [sp, #16]
   135f0:	add	sp, sp, #20
   135f4:	pop	{pc}		; (ldr pc, [sp], #4)
   135f8:	ldrdeq	r6, [r2], -ip
   135fc:	str	r4, [sp, #-8]!
   13600:	str	lr, [sp, #4]
   13604:	ldr	r3, [pc, #16]	; 1361c <__assert_fail@plt+0x28d0>
   13608:	mvn	r2, #0
   1360c:	bl	13060 <__assert_fail@plt+0x2314>
   13610:	ldr	r4, [sp]
   13614:	add	sp, sp, #4
   13618:	pop	{pc}		; (ldr pc, [sp], #4)
   1361c:	andeq	r6, r2, ip, asr #4
   13620:	str	r4, [sp, #-8]!
   13624:	str	lr, [sp, #4]
   13628:	ldr	r3, [pc, #12]	; 1363c <__assert_fail@plt+0x28f0>
   1362c:	bl	13060 <__assert_fail@plt+0x2314>
   13630:	ldr	r4, [sp]
   13634:	add	sp, sp, #4
   13638:	pop	{pc}		; (ldr pc, [sp], #4)
   1363c:	andeq	r6, r2, ip, asr #4
   13640:	str	r4, [sp, #-8]!
   13644:	str	lr, [sp, #4]
   13648:	mov	r1, r0
   1364c:	mov	r0, #0
   13650:	bl	135fc <__assert_fail@plt+0x28b0>
   13654:	ldr	r4, [sp]
   13658:	add	sp, sp, #4
   1365c:	pop	{pc}		; (ldr pc, [sp], #4)
   13660:	str	r4, [sp, #-8]!
   13664:	str	lr, [sp, #4]
   13668:	mov	r2, r1
   1366c:	mov	r1, r0
   13670:	mov	r0, #0
   13674:	bl	13620 <__assert_fail@plt+0x28d4>
   13678:	ldr	r4, [sp]
   1367c:	add	sp, sp, #4
   13680:	pop	{pc}		; (ldr pc, [sp], #4)
   13684:	strd	r4, [sp, #-12]!
   13688:	str	lr, [sp, #8]
   1368c:	sub	sp, sp, #52	; 0x34
   13690:	mov	r4, r0
   13694:	mov	r5, r2
   13698:	mov	r0, sp
   1369c:	bl	117d4 <__assert_fail@plt+0xa88>
   136a0:	mov	r3, sp
   136a4:	mvn	r2, #0
   136a8:	mov	r1, r5
   136ac:	mov	r0, r4
   136b0:	bl	13060 <__assert_fail@plt+0x2314>
   136b4:	add	sp, sp, #52	; 0x34
   136b8:	ldrd	r4, [sp]
   136bc:	add	sp, sp, #8
   136c0:	pop	{pc}		; (ldr pc, [sp], #4)
   136c4:	strd	r4, [sp, #-16]!
   136c8:	str	r6, [sp, #8]
   136cc:	str	lr, [sp, #12]
   136d0:	sub	sp, sp, #48	; 0x30
   136d4:	mov	r4, r0
   136d8:	mov	r5, r2
   136dc:	mov	r6, r3
   136e0:	mov	r0, sp
   136e4:	bl	117d4 <__assert_fail@plt+0xa88>
   136e8:	mov	r3, sp
   136ec:	mov	r2, r6
   136f0:	mov	r1, r5
   136f4:	mov	r0, r4
   136f8:	bl	13060 <__assert_fail@plt+0x2314>
   136fc:	add	sp, sp, #48	; 0x30
   13700:	ldrd	r4, [sp]
   13704:	ldr	r6, [sp, #8]
   13708:	add	sp, sp, #12
   1370c:	pop	{pc}		; (ldr pc, [sp], #4)
   13710:	str	r4, [sp, #-8]!
   13714:	str	lr, [sp, #4]
   13718:	mov	r2, r1
   1371c:	mov	r1, r0
   13720:	mov	r0, #0
   13724:	bl	13684 <__assert_fail@plt+0x2938>
   13728:	ldr	r4, [sp]
   1372c:	add	sp, sp, #4
   13730:	pop	{pc}		; (ldr pc, [sp], #4)
   13734:	str	r4, [sp, #-8]!
   13738:	str	lr, [sp, #4]
   1373c:	mov	r3, r2
   13740:	mov	r2, r1
   13744:	mov	r1, r0
   13748:	mov	r0, #0
   1374c:	bl	136c4 <__assert_fail@plt+0x2978>
   13750:	ldr	r4, [sp]
   13754:	add	sp, sp, #4
   13758:	pop	{pc}		; (ldr pc, [sp], #4)
   1375c:	strd	r4, [sp, #-12]!
   13760:	str	lr, [sp, #8]
   13764:	sub	sp, sp, #52	; 0x34
   13768:	mov	r4, r0
   1376c:	mov	r5, r1
   13770:	mov	r1, r2
   13774:	ldr	r0, [pc, #92]	; 137d8 <__assert_fail@plt+0x2a8c>
   13778:	ldrd	r2, [r0]
   1377c:	strd	r2, [sp]
   13780:	ldrd	r2, [r0, #8]
   13784:	strd	r2, [sp, #8]
   13788:	ldrd	r2, [r0, #16]
   1378c:	strd	r2, [sp, #16]
   13790:	ldrd	r2, [r0, #24]
   13794:	strd	r2, [sp, #24]
   13798:	ldrd	r2, [r0, #32]
   1379c:	strd	r2, [sp, #32]
   137a0:	ldrd	r2, [r0, #40]	; 0x28
   137a4:	strd	r2, [sp, #40]	; 0x28
   137a8:	mov	r2, #1
   137ac:	mov	r0, sp
   137b0:	bl	132d4 <__assert_fail@plt+0x2588>
   137b4:	mov	r3, sp
   137b8:	mov	r2, r5
   137bc:	mov	r1, r4
   137c0:	mov	r0, #0
   137c4:	bl	13060 <__assert_fail@plt+0x2314>
   137c8:	add	sp, sp, #52	; 0x34
   137cc:	ldrd	r4, [sp]
   137d0:	add	sp, sp, #8
   137d4:	pop	{pc}		; (ldr pc, [sp], #4)
   137d8:	andeq	r6, r2, ip, asr #4
   137dc:	str	r4, [sp, #-8]!
   137e0:	str	lr, [sp, #4]
   137e4:	mov	r2, r1
   137e8:	mvn	r1, #0
   137ec:	bl	1375c <__assert_fail@plt+0x2a10>
   137f0:	ldr	r4, [sp]
   137f4:	add	sp, sp, #4
   137f8:	pop	{pc}		; (ldr pc, [sp], #4)
   137fc:	str	r4, [sp, #-8]!
   13800:	str	lr, [sp, #4]
   13804:	mov	r1, #58	; 0x3a
   13808:	bl	137dc <__assert_fail@plt+0x2a90>
   1380c:	ldr	r4, [sp]
   13810:	add	sp, sp, #4
   13814:	pop	{pc}		; (ldr pc, [sp], #4)
   13818:	str	r4, [sp, #-8]!
   1381c:	str	lr, [sp, #4]
   13820:	mov	r2, #58	; 0x3a
   13824:	bl	1375c <__assert_fail@plt+0x2a10>
   13828:	ldr	r4, [sp]
   1382c:	add	sp, sp, #4
   13830:	pop	{pc}		; (ldr pc, [sp], #4)
   13834:	strd	r4, [sp, #-12]!
   13838:	str	lr, [sp, #8]
   1383c:	sub	sp, sp, #100	; 0x64
   13840:	mov	r4, r0
   13844:	mov	r5, r2
   13848:	mov	r0, sp
   1384c:	bl	117d4 <__assert_fail@plt+0xa88>
   13850:	ldrd	r2, [sp]
   13854:	strd	r2, [sp, #48]	; 0x30
   13858:	ldrd	r2, [sp, #8]
   1385c:	strd	r2, [sp, #56]	; 0x38
   13860:	ldrd	r2, [sp, #16]
   13864:	strd	r2, [sp, #64]	; 0x40
   13868:	ldrd	r2, [sp, #24]
   1386c:	strd	r2, [sp, #72]	; 0x48
   13870:	ldrd	r2, [sp, #32]
   13874:	strd	r2, [sp, #80]	; 0x50
   13878:	ldrd	r2, [sp, #40]	; 0x28
   1387c:	strd	r2, [sp, #88]	; 0x58
   13880:	mov	r2, #1
   13884:	mov	r1, #58	; 0x3a
   13888:	add	r0, sp, #48	; 0x30
   1388c:	bl	132d4 <__assert_fail@plt+0x2588>
   13890:	add	r3, sp, #48	; 0x30
   13894:	mvn	r2, #0
   13898:	mov	r1, r5
   1389c:	mov	r0, r4
   138a0:	bl	13060 <__assert_fail@plt+0x2314>
   138a4:	add	sp, sp, #100	; 0x64
   138a8:	ldrd	r4, [sp]
   138ac:	add	sp, sp, #8
   138b0:	pop	{pc}		; (ldr pc, [sp], #4)
   138b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   138b8:	strd	r6, [sp, #8]
   138bc:	str	lr, [sp, #16]
   138c0:	sub	sp, sp, #52	; 0x34
   138c4:	mov	r4, r0
   138c8:	mov	r5, r3
   138cc:	ldr	r3, [pc, #92]	; 13930 <__assert_fail@plt+0x2be4>
   138d0:	ldrd	r6, [r3]
   138d4:	strd	r6, [sp]
   138d8:	ldrd	r6, [r3, #8]
   138dc:	strd	r6, [sp, #8]
   138e0:	ldrd	r6, [r3, #16]
   138e4:	strd	r6, [sp, #16]
   138e8:	ldrd	r6, [r3, #24]
   138ec:	strd	r6, [sp, #24]
   138f0:	ldrd	r6, [r3, #32]
   138f4:	strd	r6, [sp, #32]
   138f8:	ldrd	r6, [r3, #40]	; 0x28
   138fc:	strd	r6, [sp, #40]	; 0x28
   13900:	mov	r0, sp
   13904:	bl	13330 <__assert_fail@plt+0x25e4>
   13908:	mov	r3, sp
   1390c:	ldr	r2, [sp, #72]	; 0x48
   13910:	mov	r1, r5
   13914:	mov	r0, r4
   13918:	bl	13060 <__assert_fail@plt+0x2314>
   1391c:	add	sp, sp, #52	; 0x34
   13920:	ldrd	r4, [sp]
   13924:	ldrd	r6, [sp, #8]
   13928:	add	sp, sp, #16
   1392c:	pop	{pc}		; (ldr pc, [sp], #4)
   13930:	andeq	r6, r2, ip, asr #4
   13934:	push	{lr}		; (str lr, [sp, #-4]!)
   13938:	sub	sp, sp, #12
   1393c:	mvn	ip, #0
   13940:	str	ip, [sp]
   13944:	bl	138b4 <__assert_fail@plt+0x2b68>
   13948:	add	sp, sp, #12
   1394c:	pop	{pc}		; (ldr pc, [sp], #4)
   13950:	str	r4, [sp, #-8]!
   13954:	str	lr, [sp, #4]
   13958:	mov	r3, r2
   1395c:	mov	r2, r1
   13960:	mov	r1, r0
   13964:	mov	r0, #0
   13968:	bl	13934 <__assert_fail@plt+0x2be8>
   1396c:	ldr	r4, [sp]
   13970:	add	sp, sp, #4
   13974:	pop	{pc}		; (ldr pc, [sp], #4)
   13978:	push	{lr}		; (str lr, [sp, #-4]!)
   1397c:	sub	sp, sp, #12
   13980:	str	r3, [sp]
   13984:	mov	r3, r2
   13988:	mov	r2, r1
   1398c:	mov	r1, r0
   13990:	mov	r0, #0
   13994:	bl	138b4 <__assert_fail@plt+0x2b68>
   13998:	add	sp, sp, #12
   1399c:	pop	{pc}		; (ldr pc, [sp], #4)
   139a0:	str	r4, [sp, #-8]!
   139a4:	str	lr, [sp, #4]
   139a8:	ldr	r3, [pc, #12]	; 139bc <__assert_fail@plt+0x2c70>
   139ac:	bl	13060 <__assert_fail@plt+0x2314>
   139b0:	ldr	r4, [sp]
   139b4:	add	sp, sp, #4
   139b8:	pop	{pc}		; (ldr pc, [sp], #4)
   139bc:	andeq	r6, r2, r4, ror #1
   139c0:	str	r4, [sp, #-8]!
   139c4:	str	lr, [sp, #4]
   139c8:	mov	r2, r1
   139cc:	mov	r1, r0
   139d0:	mov	r0, #0
   139d4:	bl	139a0 <__assert_fail@plt+0x2c54>
   139d8:	ldr	r4, [sp]
   139dc:	add	sp, sp, #4
   139e0:	pop	{pc}		; (ldr pc, [sp], #4)
   139e4:	str	r4, [sp, #-8]!
   139e8:	str	lr, [sp, #4]
   139ec:	mvn	r2, #0
   139f0:	bl	139a0 <__assert_fail@plt+0x2c54>
   139f4:	ldr	r4, [sp]
   139f8:	add	sp, sp, #4
   139fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13a00:	str	r4, [sp, #-8]!
   13a04:	str	lr, [sp, #4]
   13a08:	mov	r1, r0
   13a0c:	mov	r0, #0
   13a10:	bl	139e4 <__assert_fail@plt+0x2c98>
   13a14:	ldr	r4, [sp]
   13a18:	add	sp, sp, #4
   13a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a20:	strd	r4, [sp, #-16]!
   13a24:	str	r6, [sp, #8]
   13a28:	str	lr, [sp, #12]
   13a2c:	sub	sp, sp, #32
   13a30:	mov	r4, r0
   13a34:	ldr	r5, [sp, #48]	; 0x30
   13a38:	ldr	r6, [sp, #52]	; 0x34
   13a3c:	cmp	r1, #0
   13a40:	beq	13afc <__assert_fail@plt+0x2db0>
   13a44:	str	r3, [sp]
   13a48:	mov	r3, r2
   13a4c:	mov	r2, r1
   13a50:	movw	r1, #20232	; 0x4f08
   13a54:	movt	r1, #1
   13a58:	bl	10c8c <fprintf@plt>
   13a5c:	mov	r2, #5
   13a60:	movw	r1, #20252	; 0x4f1c
   13a64:	movt	r1, #1
   13a68:	mov	r0, #0
   13a6c:	bl	10bc0 <dcgettext@plt>
   13a70:	movw	r3, #2022	; 0x7e6
   13a74:	mov	r2, r0
   13a78:	movw	r1, #20956	; 0x51dc
   13a7c:	movt	r1, #1
   13a80:	mov	r0, r4
   13a84:	bl	10c8c <fprintf@plt>
   13a88:	mov	r1, r4
   13a8c:	mov	r0, #10
   13a90:	bl	10d04 <fputc@plt>
   13a94:	mov	r2, #5
   13a98:	movw	r1, #20256	; 0x4f20
   13a9c:	movt	r1, #1
   13aa0:	mov	r0, #0
   13aa4:	bl	10bc0 <dcgettext@plt>
   13aa8:	movw	r2, #20428	; 0x4fcc
   13aac:	movt	r2, #1
   13ab0:	mov	r1, r0
   13ab4:	mov	r0, r4
   13ab8:	bl	10c8c <fprintf@plt>
   13abc:	mov	r1, r4
   13ac0:	mov	r0, #10
   13ac4:	bl	10d04 <fputc@plt>
   13ac8:	cmp	r6, #9
   13acc:	ldrls	pc, [pc, r6, lsl #2]
   13ad0:	b	13d84 <__assert_fail@plt+0x3038>
   13ad4:	andeq	r3, r1, r0, lsr fp
   13ad8:	andeq	r3, r1, ip, lsl #22
   13adc:	andeq	r3, r1, r4, asr #22
   13ae0:	andeq	r3, r1, r0, ror fp
   13ae4:	andeq	r3, r1, r4, lsr #23
   13ae8:	andeq	r3, r1, r0, ror #23
   13aec:	andeq	r3, r1, r4, lsr #24
   13af0:	andeq	r3, r1, r0, ror ip
   13af4:	andeq	r3, r1, r4, asr #25
   13af8:	andeq	r3, r1, r0, lsr #26
   13afc:	movw	r1, #20244	; 0x4f14
   13b00:	movt	r1, #1
   13b04:	bl	10c8c <fprintf@plt>
   13b08:	b	13a5c <__assert_fail@plt+0x2d10>
   13b0c:	mov	r2, #5
   13b10:	movw	r1, #20464	; 0x4ff0
   13b14:	movt	r1, #1
   13b18:	mov	r0, #0
   13b1c:	bl	10bc0 <dcgettext@plt>
   13b20:	ldr	r2, [r5]
   13b24:	mov	r1, r0
   13b28:	mov	r0, r4
   13b2c:	bl	10c8c <fprintf@plt>
   13b30:	add	sp, sp, #32
   13b34:	ldrd	r4, [sp]
   13b38:	ldr	r6, [sp, #8]
   13b3c:	add	sp, sp, #12
   13b40:	pop	{pc}		; (ldr pc, [sp], #4)
   13b44:	mov	r2, #5
   13b48:	movw	r1, #20480	; 0x5000
   13b4c:	movt	r1, #1
   13b50:	mov	r0, #0
   13b54:	bl	10bc0 <dcgettext@plt>
   13b58:	ldr	r3, [r5, #4]
   13b5c:	ldr	r2, [r5]
   13b60:	mov	r1, r0
   13b64:	mov	r0, r4
   13b68:	bl	10c8c <fprintf@plt>
   13b6c:	b	13b30 <__assert_fail@plt+0x2de4>
   13b70:	mov	r2, #5
   13b74:	movw	r1, #20504	; 0x5018
   13b78:	movt	r1, #1
   13b7c:	mov	r0, #0
   13b80:	bl	10bc0 <dcgettext@plt>
   13b84:	ldr	r3, [r5, #8]
   13b88:	str	r3, [sp]
   13b8c:	ldr	r3, [r5, #4]
   13b90:	ldr	r2, [r5]
   13b94:	mov	r1, r0
   13b98:	mov	r0, r4
   13b9c:	bl	10c8c <fprintf@plt>
   13ba0:	b	13b30 <__assert_fail@plt+0x2de4>
   13ba4:	mov	r2, #5
   13ba8:	movw	r1, #20532	; 0x5034
   13bac:	movt	r1, #1
   13bb0:	mov	r0, #0
   13bb4:	bl	10bc0 <dcgettext@plt>
   13bb8:	ldr	r3, [r5, #12]
   13bbc:	str	r3, [sp, #4]
   13bc0:	ldr	r3, [r5, #8]
   13bc4:	str	r3, [sp]
   13bc8:	ldr	r3, [r5, #4]
   13bcc:	ldr	r2, [r5]
   13bd0:	mov	r1, r0
   13bd4:	mov	r0, r4
   13bd8:	bl	10c8c <fprintf@plt>
   13bdc:	b	13b30 <__assert_fail@plt+0x2de4>
   13be0:	mov	r2, #5
   13be4:	movw	r1, #20564	; 0x5054
   13be8:	movt	r1, #1
   13bec:	mov	r0, #0
   13bf0:	bl	10bc0 <dcgettext@plt>
   13bf4:	ldr	r3, [r5, #16]
   13bf8:	str	r3, [sp, #8]
   13bfc:	ldr	r3, [r5, #12]
   13c00:	str	r3, [sp, #4]
   13c04:	ldr	r3, [r5, #8]
   13c08:	str	r3, [sp]
   13c0c:	ldr	r3, [r5, #4]
   13c10:	ldr	r2, [r5]
   13c14:	mov	r1, r0
   13c18:	mov	r0, r4
   13c1c:	bl	10c8c <fprintf@plt>
   13c20:	b	13b30 <__assert_fail@plt+0x2de4>
   13c24:	mov	r2, #5
   13c28:	movw	r1, #20600	; 0x5078
   13c2c:	movt	r1, #1
   13c30:	mov	r0, #0
   13c34:	bl	10bc0 <dcgettext@plt>
   13c38:	ldr	r3, [r5, #20]
   13c3c:	str	r3, [sp, #12]
   13c40:	ldr	r3, [r5, #16]
   13c44:	str	r3, [sp, #8]
   13c48:	ldr	r3, [r5, #12]
   13c4c:	str	r3, [sp, #4]
   13c50:	ldr	r3, [r5, #8]
   13c54:	str	r3, [sp]
   13c58:	ldr	r3, [r5, #4]
   13c5c:	ldr	r2, [r5]
   13c60:	mov	r1, r0
   13c64:	mov	r0, r4
   13c68:	bl	10c8c <fprintf@plt>
   13c6c:	b	13b30 <__assert_fail@plt+0x2de4>
   13c70:	mov	r2, #5
   13c74:	movw	r1, #20640	; 0x50a0
   13c78:	movt	r1, #1
   13c7c:	mov	r0, #0
   13c80:	bl	10bc0 <dcgettext@plt>
   13c84:	ldr	r3, [r5, #24]
   13c88:	str	r3, [sp, #16]
   13c8c:	ldr	r3, [r5, #20]
   13c90:	str	r3, [sp, #12]
   13c94:	ldr	r3, [r5, #16]
   13c98:	str	r3, [sp, #8]
   13c9c:	ldr	r3, [r5, #12]
   13ca0:	str	r3, [sp, #4]
   13ca4:	ldr	r3, [r5, #8]
   13ca8:	str	r3, [sp]
   13cac:	ldr	r3, [r5, #4]
   13cb0:	ldr	r2, [r5]
   13cb4:	mov	r1, r0
   13cb8:	mov	r0, r4
   13cbc:	bl	10c8c <fprintf@plt>
   13cc0:	b	13b30 <__assert_fail@plt+0x2de4>
   13cc4:	mov	r2, #5
   13cc8:	movw	r1, #20684	; 0x50cc
   13ccc:	movt	r1, #1
   13cd0:	mov	r0, #0
   13cd4:	bl	10bc0 <dcgettext@plt>
   13cd8:	ldr	r3, [r5, #28]
   13cdc:	str	r3, [sp, #20]
   13ce0:	ldr	r3, [r5, #24]
   13ce4:	str	r3, [sp, #16]
   13ce8:	ldr	r3, [r5, #20]
   13cec:	str	r3, [sp, #12]
   13cf0:	ldr	r3, [r5, #16]
   13cf4:	str	r3, [sp, #8]
   13cf8:	ldr	r3, [r5, #12]
   13cfc:	str	r3, [sp, #4]
   13d00:	ldr	r3, [r5, #8]
   13d04:	str	r3, [sp]
   13d08:	ldr	r3, [r5, #4]
   13d0c:	ldr	r2, [r5]
   13d10:	mov	r1, r0
   13d14:	mov	r0, r4
   13d18:	bl	10c8c <fprintf@plt>
   13d1c:	b	13b30 <__assert_fail@plt+0x2de4>
   13d20:	mov	r2, #5
   13d24:	movw	r1, #20732	; 0x50fc
   13d28:	movt	r1, #1
   13d2c:	mov	r0, #0
   13d30:	bl	10bc0 <dcgettext@plt>
   13d34:	ldr	r3, [r5, #32]
   13d38:	str	r3, [sp, #24]
   13d3c:	ldr	r3, [r5, #28]
   13d40:	str	r3, [sp, #20]
   13d44:	ldr	r3, [r5, #24]
   13d48:	str	r3, [sp, #16]
   13d4c:	ldr	r3, [r5, #20]
   13d50:	str	r3, [sp, #12]
   13d54:	ldr	r3, [r5, #16]
   13d58:	str	r3, [sp, #8]
   13d5c:	ldr	r3, [r5, #12]
   13d60:	str	r3, [sp, #4]
   13d64:	ldr	r3, [r5, #8]
   13d68:	str	r3, [sp]
   13d6c:	ldr	r3, [r5, #4]
   13d70:	ldr	r2, [r5]
   13d74:	mov	r1, r0
   13d78:	mov	r0, r4
   13d7c:	bl	10c8c <fprintf@plt>
   13d80:	b	13b30 <__assert_fail@plt+0x2de4>
   13d84:	mov	r2, #5
   13d88:	movw	r1, #20784	; 0x5130
   13d8c:	movt	r1, #1
   13d90:	mov	r0, #0
   13d94:	bl	10bc0 <dcgettext@plt>
   13d98:	ldr	r3, [r5, #32]
   13d9c:	str	r3, [sp, #24]
   13da0:	ldr	r3, [r5, #28]
   13da4:	str	r3, [sp, #20]
   13da8:	ldr	r3, [r5, #24]
   13dac:	str	r3, [sp, #16]
   13db0:	ldr	r3, [r5, #20]
   13db4:	str	r3, [sp, #12]
   13db8:	ldr	r3, [r5, #16]
   13dbc:	str	r3, [sp, #8]
   13dc0:	ldr	r3, [r5, #12]
   13dc4:	str	r3, [sp, #4]
   13dc8:	ldr	r3, [r5, #8]
   13dcc:	str	r3, [sp]
   13dd0:	ldr	r3, [r5, #4]
   13dd4:	ldr	r2, [r5]
   13dd8:	mov	r1, r0
   13ddc:	mov	r0, r4
   13de0:	bl	10c8c <fprintf@plt>
   13de4:	b	13b30 <__assert_fail@plt+0x2de4>
   13de8:	strd	r4, [sp, #-12]!
   13dec:	str	lr, [sp, #8]
   13df0:	sub	sp, sp, #12
   13df4:	ldr	r5, [sp, #24]
   13df8:	ldr	ip, [r5]
   13dfc:	cmp	ip, #0
   13e00:	beq	13e38 <__assert_fail@plt+0x30ec>
   13e04:	mov	lr, r5
   13e08:	mov	ip, #0
   13e0c:	add	ip, ip, #1
   13e10:	ldr	r4, [lr, #4]!
   13e14:	cmp	r4, #0
   13e18:	bne	13e0c <__assert_fail@plt+0x30c0>
   13e1c:	str	ip, [sp, #4]
   13e20:	str	r5, [sp]
   13e24:	bl	13a20 <__assert_fail@plt+0x2cd4>
   13e28:	add	sp, sp, #12
   13e2c:	ldrd	r4, [sp]
   13e30:	add	sp, sp, #8
   13e34:	pop	{pc}		; (ldr pc, [sp], #4)
   13e38:	mov	ip, #0
   13e3c:	b	13e1c <__assert_fail@plt+0x30d0>
   13e40:	strd	r4, [sp, #-12]!
   13e44:	str	lr, [sp, #8]
   13e48:	sub	sp, sp, #52	; 0x34
   13e4c:	ldr	r5, [sp, #64]	; 0x40
   13e50:	add	r4, sp, #8
   13e54:	mov	ip, #0
   13e58:	ldr	lr, [r5], #4
   13e5c:	str	lr, [r4], #4
   13e60:	cmp	lr, #0
   13e64:	beq	13e74 <__assert_fail@plt+0x3128>
   13e68:	add	ip, ip, #1
   13e6c:	cmp	ip, #10
   13e70:	bne	13e58 <__assert_fail@plt+0x310c>
   13e74:	str	ip, [sp, #4]
   13e78:	add	ip, sp, #8
   13e7c:	str	ip, [sp]
   13e80:	bl	13a20 <__assert_fail@plt+0x2cd4>
   13e84:	add	sp, sp, #52	; 0x34
   13e88:	ldrd	r4, [sp]
   13e8c:	add	sp, sp, #8
   13e90:	pop	{pc}		; (ldr pc, [sp], #4)
   13e94:	push	{r3}		; (str r3, [sp, #-4]!)
   13e98:	push	{lr}		; (str lr, [sp, #-4]!)
   13e9c:	sub	sp, sp, #16
   13ea0:	add	r3, sp, #24
   13ea4:	str	r3, [sp, #12]
   13ea8:	str	r3, [sp]
   13eac:	ldr	r3, [sp, #20]
   13eb0:	bl	13e40 <__assert_fail@plt+0x30f4>
   13eb4:	add	sp, sp, #16
   13eb8:	pop	{lr}		; (ldr lr, [sp], #4)
   13ebc:	add	sp, sp, #4
   13ec0:	bx	lr
   13ec4:	str	r4, [sp, #-8]!
   13ec8:	str	lr, [sp, #4]
   13ecc:	movw	r3, #24884	; 0x6134
   13ed0:	movt	r3, #2
   13ed4:	ldr	r1, [r3]
   13ed8:	mov	r0, #10
   13edc:	bl	10d04 <fputc@plt>
   13ee0:	mov	r2, #5
   13ee4:	movw	r1, #20844	; 0x516c
   13ee8:	movt	r1, #1
   13eec:	mov	r0, #0
   13ef0:	bl	10bc0 <dcgettext@plt>
   13ef4:	movw	r1, #19868	; 0x4d9c
   13ef8:	movt	r1, #1
   13efc:	bl	10b60 <printf@plt>
   13f00:	mov	r2, #5
   13f04:	movw	r1, #20864	; 0x5180
   13f08:	movt	r1, #1
   13f0c:	mov	r0, #0
   13f10:	bl	10bc0 <dcgettext@plt>
   13f14:	movw	r2, #19828	; 0x4d74
   13f18:	movt	r2, #1
   13f1c:	movw	r1, #19588	; 0x4c84
   13f20:	movt	r1, #1
   13f24:	bl	10b60 <printf@plt>
   13f28:	mov	r2, #5
   13f2c:	movw	r1, #20884	; 0x5194
   13f30:	movt	r1, #1
   13f34:	mov	r0, #0
   13f38:	bl	10bc0 <dcgettext@plt>
   13f3c:	movw	r1, #20924	; 0x51bc
   13f40:	movt	r1, #1
   13f44:	bl	10b60 <printf@plt>
   13f48:	ldr	r4, [sp]
   13f4c:	add	sp, sp, #4
   13f50:	pop	{pc}		; (ldr pc, [sp], #4)
   13f54:	str	r4, [sp, #-8]!
   13f58:	str	lr, [sp, #4]
   13f5c:	bl	14630 <__assert_fail@plt+0x38e4>
   13f60:	cmp	r0, #0
   13f64:	beq	13f74 <__assert_fail@plt+0x3228>
   13f68:	ldr	r4, [sp]
   13f6c:	add	sp, sp, #4
   13f70:	pop	{pc}		; (ldr pc, [sp], #4)
   13f74:	bl	143e8 <__assert_fail@plt+0x369c>
   13f78:	str	r4, [sp, #-8]!
   13f7c:	str	lr, [sp, #4]
   13f80:	bl	14630 <__assert_fail@plt+0x38e4>
   13f84:	cmp	r0, #0
   13f88:	beq	13f98 <__assert_fail@plt+0x324c>
   13f8c:	ldr	r4, [sp]
   13f90:	add	sp, sp, #4
   13f94:	pop	{pc}		; (ldr pc, [sp], #4)
   13f98:	bl	143e8 <__assert_fail@plt+0x369c>
   13f9c:	str	r4, [sp, #-8]!
   13fa0:	str	lr, [sp, #4]
   13fa4:	bl	13f54 <__assert_fail@plt+0x3208>
   13fa8:	ldr	r4, [sp]
   13fac:	add	sp, sp, #4
   13fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb4:	strd	r4, [sp, #-16]!
   13fb8:	str	r6, [sp, #8]
   13fbc:	str	lr, [sp, #12]
   13fc0:	mov	r5, r0
   13fc4:	mov	r4, r1
   13fc8:	bl	146dc <__assert_fail@plt+0x3990>
   13fcc:	cmp	r0, #0
   13fd0:	beq	13fe4 <__assert_fail@plt+0x3298>
   13fd4:	ldrd	r4, [sp]
   13fd8:	ldr	r6, [sp, #8]
   13fdc:	add	sp, sp, #12
   13fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe4:	adds	r4, r4, #0
   13fe8:	movne	r4, #1
   13fec:	cmp	r5, #0
   13ff0:	moveq	r4, #1
   13ff4:	cmp	r4, #0
   13ff8:	beq	13fd4 <__assert_fail@plt+0x3288>
   13ffc:	bl	143e8 <__assert_fail@plt+0x369c>
   14000:	str	r4, [sp, #-8]!
   14004:	str	lr, [sp, #4]
   14008:	cmp	r1, #0
   1400c:	orreq	r1, r1, #1
   14010:	bl	146dc <__assert_fail@plt+0x3990>
   14014:	cmp	r0, #0
   14018:	beq	14028 <__assert_fail@plt+0x32dc>
   1401c:	ldr	r4, [sp]
   14020:	add	sp, sp, #4
   14024:	pop	{pc}		; (ldr pc, [sp], #4)
   14028:	bl	143e8 <__assert_fail@plt+0x369c>
   1402c:	strd	r4, [sp, #-16]!
   14030:	str	r6, [sp, #8]
   14034:	str	lr, [sp, #12]
   14038:	mov	r4, r0
   1403c:	mov	r6, r1
   14040:	mov	r5, r2
   14044:	bl	14738 <__assert_fail@plt+0x39ec>
   14048:	cmp	r0, #0
   1404c:	beq	14060 <__assert_fail@plt+0x3314>
   14050:	ldrd	r4, [sp]
   14054:	ldr	r6, [sp, #8]
   14058:	add	sp, sp, #12
   1405c:	pop	{pc}		; (ldr pc, [sp], #4)
   14060:	cmp	r4, #0
   14064:	beq	14074 <__assert_fail@plt+0x3328>
   14068:	cmp	r6, #0
   1406c:	cmpne	r5, #0
   14070:	beq	14050 <__assert_fail@plt+0x3304>
   14074:	bl	143e8 <__assert_fail@plt+0x369c>
   14078:	str	r4, [sp, #-8]!
   1407c:	str	lr, [sp, #4]
   14080:	bl	1402c <__assert_fail@plt+0x32e0>
   14084:	ldr	r4, [sp]
   14088:	add	sp, sp, #4
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	str	r4, [sp, #-8]!
   14094:	str	lr, [sp, #4]
   14098:	mov	ip, r1
   1409c:	mov	r3, r2
   140a0:	cmp	r2, #0
   140a4:	cmpne	r1, #0
   140a8:	moveq	r3, #1
   140ac:	moveq	ip, r3
   140b0:	mov	r2, r3
   140b4:	mov	r1, ip
   140b8:	bl	14738 <__assert_fail@plt+0x39ec>
   140bc:	cmp	r0, #0
   140c0:	beq	140d0 <__assert_fail@plt+0x3384>
   140c4:	ldr	r4, [sp]
   140c8:	add	sp, sp, #4
   140cc:	pop	{pc}		; (ldr pc, [sp], #4)
   140d0:	bl	143e8 <__assert_fail@plt+0x369c>
   140d4:	str	r4, [sp, #-8]!
   140d8:	str	lr, [sp, #4]
   140dc:	mov	r2, r1
   140e0:	mov	r1, r0
   140e4:	mov	r0, #0
   140e8:	bl	1402c <__assert_fail@plt+0x32e0>
   140ec:	ldr	r4, [sp]
   140f0:	add	sp, sp, #4
   140f4:	pop	{pc}		; (ldr pc, [sp], #4)
   140f8:	str	r4, [sp, #-8]!
   140fc:	str	lr, [sp, #4]
   14100:	mov	r2, r1
   14104:	mov	r1, r0
   14108:	mov	r0, #0
   1410c:	bl	14090 <__assert_fail@plt+0x3344>
   14110:	ldr	r4, [sp]
   14114:	add	sp, sp, #4
   14118:	pop	{pc}		; (ldr pc, [sp], #4)
   1411c:	strd	r4, [sp, #-16]!
   14120:	str	r6, [sp, #8]
   14124:	str	lr, [sp, #12]
   14128:	mov	r5, r1
   1412c:	ldr	r4, [r1]
   14130:	cmp	r0, #0
   14134:	beq	14164 <__assert_fail@plt+0x3418>
   14138:	lsr	r3, r4, #1
   1413c:	add	r3, r3, #1
   14140:	adds	r4, r4, r3
   14144:	bcs	14180 <__assert_fail@plt+0x3434>
   14148:	mov	r1, r4
   1414c:	bl	1402c <__assert_fail@plt+0x32e0>
   14150:	str	r4, [r5]
   14154:	ldrd	r4, [sp]
   14158:	ldr	r6, [sp, #8]
   1415c:	add	sp, sp, #12
   14160:	pop	{pc}		; (ldr pc, [sp], #4)
   14164:	cmp	r4, #0
   14168:	bne	14148 <__assert_fail@plt+0x33fc>
   1416c:	mov	r4, #64	; 0x40
   14170:	udiv	r4, r4, r2
   14174:	cmp	r2, #64	; 0x40
   14178:	addhi	r4, r4, #1
   1417c:	b	14148 <__assert_fail@plt+0x33fc>
   14180:	bl	143e8 <__assert_fail@plt+0x369c>
   14184:	str	r4, [sp, #-8]!
   14188:	str	lr, [sp, #4]
   1418c:	mov	r2, #1
   14190:	bl	1411c <__assert_fail@plt+0x33d0>
   14194:	ldr	r4, [sp]
   14198:	add	sp, sp, #4
   1419c:	pop	{pc}		; (ldr pc, [sp], #4)
   141a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141a4:	strd	r6, [sp, #8]
   141a8:	str	r8, [sp, #16]
   141ac:	str	lr, [sp, #20]
   141b0:	mov	r5, r1
   141b4:	ldr	lr, [sp, #24]
   141b8:	ldr	ip, [r1]
   141bc:	asr	r4, ip, #1
   141c0:	adds	r4, ip, r4
   141c4:	movvs	r1, #1
   141c8:	movvc	r1, #0
   141cc:	cmp	r1, #0
   141d0:	mvnne	r4, #-2147483648	; 0x80000000
   141d4:	mvn	r8, r3
   141d8:	lsr	r8, r8, #31
   141dc:	cmp	r3, r4
   141e0:	movge	r1, #0
   141e4:	andlt	r1, r8, #1
   141e8:	cmp	r1, #0
   141ec:	movne	r4, r3
   141f0:	smull	r6, r7, r4, lr
   141f4:	asr	r1, r6, #31
   141f8:	cmp	r1, r7
   141fc:	bne	14214 <__assert_fail@plt+0x34c8>
   14200:	mov	r1, r6
   14204:	cmp	r6, #63	; 0x3f
   14208:	movle	r1, #64	; 0x40
   1420c:	ble	14218 <__assert_fail@plt+0x34cc>
   14210:	b	14224 <__assert_fail@plt+0x34d8>
   14214:	mvn	r1, #-2147483648	; 0x80000000
   14218:	sdiv	r4, r1, lr
   1421c:	mls	r6, lr, r4, r1
   14220:	sub	r1, r1, r6
   14224:	cmp	r0, #0
   14228:	moveq	r6, #0
   1422c:	streq	r6, [r5]
   14230:	sub	r6, r4, ip
   14234:	cmp	r6, r2
   14238:	bge	14270 <__assert_fail@plt+0x3524>
   1423c:	adds	r2, ip, r2
   14240:	mov	r4, r2
   14244:	bvs	1428c <__assert_fail@plt+0x3540>
   14248:	cmp	r2, r3
   1424c:	movle	r3, #0
   14250:	andgt	r3, r8, #1
   14254:	cmp	r3, #0
   14258:	bne	1428c <__assert_fail@plt+0x3540>
   1425c:	smull	r2, r3, r2, lr
   14260:	asr	ip, r2, #31
   14264:	mov	r1, r2
   14268:	cmp	ip, r3
   1426c:	bne	1428c <__assert_fail@plt+0x3540>
   14270:	bl	13fb4 <__assert_fail@plt+0x3268>
   14274:	str	r4, [r5]
   14278:	ldrd	r4, [sp]
   1427c:	ldrd	r6, [sp, #8]
   14280:	ldr	r8, [sp, #16]
   14284:	add	sp, sp, #20
   14288:	pop	{pc}		; (ldr pc, [sp], #4)
   1428c:	bl	143e8 <__assert_fail@plt+0x369c>
   14290:	str	r4, [sp, #-8]!
   14294:	str	lr, [sp, #4]
   14298:	bl	1442c <__assert_fail@plt+0x36e0>
   1429c:	cmp	r0, #0
   142a0:	beq	142b0 <__assert_fail@plt+0x3564>
   142a4:	ldr	r4, [sp]
   142a8:	add	sp, sp, #4
   142ac:	pop	{pc}		; (ldr pc, [sp], #4)
   142b0:	bl	143e8 <__assert_fail@plt+0x369c>
   142b4:	str	r4, [sp, #-8]!
   142b8:	str	lr, [sp, #4]
   142bc:	mov	r1, #1
   142c0:	bl	14290 <__assert_fail@plt+0x3544>
   142c4:	ldr	r4, [sp]
   142c8:	add	sp, sp, #4
   142cc:	pop	{pc}		; (ldr pc, [sp], #4)
   142d0:	str	r4, [sp, #-8]!
   142d4:	str	lr, [sp, #4]
   142d8:	bl	1442c <__assert_fail@plt+0x36e0>
   142dc:	cmp	r0, #0
   142e0:	beq	142f0 <__assert_fail@plt+0x35a4>
   142e4:	ldr	r4, [sp]
   142e8:	add	sp, sp, #4
   142ec:	pop	{pc}		; (ldr pc, [sp], #4)
   142f0:	bl	143e8 <__assert_fail@plt+0x369c>
   142f4:	str	r4, [sp, #-8]!
   142f8:	str	lr, [sp, #4]
   142fc:	mov	r1, #1
   14300:	bl	142d0 <__assert_fail@plt+0x3584>
   14304:	ldr	r4, [sp]
   14308:	add	sp, sp, #4
   1430c:	pop	{pc}		; (ldr pc, [sp], #4)
   14310:	strd	r4, [sp, #-16]!
   14314:	str	r6, [sp, #8]
   14318:	str	lr, [sp, #12]
   1431c:	mov	r5, r0
   14320:	mov	r4, r1
   14324:	mov	r0, r1
   14328:	bl	13f54 <__assert_fail@plt+0x3208>
   1432c:	mov	r2, r4
   14330:	mov	r1, r5
   14334:	bl	10b9c <memcpy@plt>
   14338:	ldrd	r4, [sp]
   1433c:	ldr	r6, [sp, #8]
   14340:	add	sp, sp, #12
   14344:	pop	{pc}		; (ldr pc, [sp], #4)
   14348:	strd	r4, [sp, #-16]!
   1434c:	str	r6, [sp, #8]
   14350:	str	lr, [sp, #12]
   14354:	mov	r5, r0
   14358:	mov	r4, r1
   1435c:	mov	r0, r1
   14360:	bl	13f78 <__assert_fail@plt+0x322c>
   14364:	mov	r2, r4
   14368:	mov	r1, r5
   1436c:	bl	10b9c <memcpy@plt>
   14370:	ldrd	r4, [sp]
   14374:	ldr	r6, [sp, #8]
   14378:	add	sp, sp, #12
   1437c:	pop	{pc}		; (ldr pc, [sp], #4)
   14380:	strd	r4, [sp, #-16]!
   14384:	str	r6, [sp, #8]
   14388:	str	lr, [sp, #12]
   1438c:	mov	r5, r0
   14390:	mov	r4, r1
   14394:	add	r0, r1, #1
   14398:	bl	13f78 <__assert_fail@plt+0x322c>
   1439c:	mov	r2, #0
   143a0:	strb	r2, [r0, r4]
   143a4:	mov	r2, r4
   143a8:	mov	r1, r5
   143ac:	bl	10b9c <memcpy@plt>
   143b0:	ldrd	r4, [sp]
   143b4:	ldr	r6, [sp, #8]
   143b8:	add	sp, sp, #12
   143bc:	pop	{pc}		; (ldr pc, [sp], #4)
   143c0:	str	r4, [sp, #-8]!
   143c4:	str	lr, [sp, #4]
   143c8:	mov	r4, r0
   143cc:	bl	10c80 <strlen@plt>
   143d0:	add	r1, r0, #1
   143d4:	mov	r0, r4
   143d8:	bl	14310 <__assert_fail@plt+0x35c4>
   143dc:	ldr	r4, [sp]
   143e0:	add	sp, sp, #4
   143e4:	pop	{pc}		; (ldr pc, [sp], #4)
   143e8:	str	r4, [sp, #-8]!
   143ec:	str	lr, [sp, #4]
   143f0:	movw	r3, #24784	; 0x60d0
   143f4:	movt	r3, #2
   143f8:	ldr	r4, [r3]
   143fc:	mov	r2, #5
   14400:	movw	r1, #21004	; 0x520c
   14404:	movt	r1, #1
   14408:	mov	r0, #0
   1440c:	bl	10bc0 <dcgettext@plt>
   14410:	mov	r3, r0
   14414:	movw	r2, #19944	; 0x4de8
   14418:	movt	r2, #1
   1441c:	mov	r1, #0
   14420:	mov	r0, r4
   14424:	bl	10c20 <error@plt>
   14428:	bl	10d40 <abort@plt>
   1442c:	strd	r4, [sp, #-16]!
   14430:	str	r6, [sp, #8]
   14434:	str	lr, [sp, #12]
   14438:	cmp	r1, #0
   1443c:	cmpne	r0, #0
   14440:	beq	1447c <__assert_fail@plt+0x3730>
   14444:	mov	r2, r0
   14448:	mov	r3, r1
   1444c:	umull	r4, r5, r0, r1
   14450:	adds	r1, r5, #0
   14454:	movne	r1, #1
   14458:	cmp	r4, #0
   1445c:	movlt	r1, #1
   14460:	cmp	r1, #0
   14464:	beq	14484 <__assert_fail@plt+0x3738>
   14468:	bl	10c98 <__errno_location@plt>
   1446c:	mov	r3, #12
   14470:	str	r3, [r0]
   14474:	mov	r0, #0
   14478:	b	14490 <__assert_fail@plt+0x3744>
   1447c:	mov	r3, #1
   14480:	mov	r2, r3
   14484:	mov	r1, r3
   14488:	mov	r0, r2
   1448c:	bl	10b3c <calloc@plt>
   14490:	ldrd	r4, [sp]
   14494:	ldr	r6, [sp, #8]
   14498:	add	sp, sp, #12
   1449c:	pop	{pc}		; (ldr pc, [sp], #4)
   144a0:	str	r4, [sp, #-8]!
   144a4:	str	lr, [sp, #4]
   144a8:	sub	sp, sp, #8
   144ac:	subs	r4, r0, #0
   144b0:	beq	144c4 <__assert_fail@plt+0x3778>
   144b4:	mov	r0, r4
   144b8:	bl	10c44 <__freading@plt>
   144bc:	cmp	r0, #0
   144c0:	bne	144dc <__assert_fail@plt+0x3790>
   144c4:	mov	r0, r4
   144c8:	bl	10b6c <fflush@plt>
   144cc:	add	sp, sp, #8
   144d0:	ldr	r4, [sp]
   144d4:	add	sp, sp, #4
   144d8:	pop	{pc}		; (ldr pc, [sp], #4)
   144dc:	ldr	r3, [r4]
   144e0:	tst	r3, #256	; 0x100
   144e4:	bne	144f4 <__assert_fail@plt+0x37a8>
   144e8:	mov	r0, r4
   144ec:	bl	10b6c <fflush@plt>
   144f0:	b	144cc <__assert_fail@plt+0x3780>
   144f4:	mov	r3, #1
   144f8:	str	r3, [sp]
   144fc:	mov	r2, #0
   14500:	mov	r3, #0
   14504:	mov	r0, r4
   14508:	bl	14570 <__assert_fail@plt+0x3824>
   1450c:	b	144e8 <__assert_fail@plt+0x379c>
   14510:	strd	r4, [sp, #-12]!
   14514:	str	lr, [sp, #8]
   14518:	sub	sp, sp, #12
   1451c:	mov	r5, r0
   14520:	bl	10c98 <__errno_location@plt>
   14524:	mov	r4, r0
   14528:	ldr	r3, [r0]
   1452c:	str	r3, [sp]
   14530:	str	r3, [sp, #4]
   14534:	mov	r3, #0
   14538:	str	r3, [r0]
   1453c:	mov	r0, r5
   14540:	bl	10b78 <free@plt>
   14544:	ldr	r3, [r4]
   14548:	clz	r3, r3
   1454c:	lsr	r3, r3, #5
   14550:	add	r2, sp, #8
   14554:	add	r3, r2, r3, lsl #2
   14558:	ldr	r3, [r3, #-8]
   1455c:	str	r3, [r4]
   14560:	add	sp, sp, #12
   14564:	ldrd	r4, [sp]
   14568:	add	sp, sp, #8
   1456c:	pop	{pc}		; (ldr pc, [sp], #4)
   14570:	str	r4, [sp, #-16]!
   14574:	strd	r6, [sp, #4]
   14578:	str	lr, [sp, #12]
   1457c:	sub	sp, sp, #8
   14580:	mov	r4, r0
   14584:	mov	r6, r2
   14588:	mov	r7, r3
   1458c:	ldr	r2, [r0, #8]
   14590:	ldr	r3, [r0, #4]
   14594:	cmp	r2, r3
   14598:	beq	145c8 <__assert_fail@plt+0x387c>
   1459c:	ldr	r3, [sp, #24]
   145a0:	str	r3, [sp]
   145a4:	mov	r2, r6
   145a8:	mov	r3, r7
   145ac:	mov	r0, r4
   145b0:	bl	10cd4 <fseeko64@plt>
   145b4:	add	sp, sp, #8
   145b8:	ldr	r4, [sp]
   145bc:	ldrd	r6, [sp, #4]
   145c0:	add	sp, sp, #12
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	ldr	r2, [r0, #20]
   145cc:	ldr	r3, [r0, #16]
   145d0:	cmp	r2, r3
   145d4:	bne	1459c <__assert_fail@plt+0x3850>
   145d8:	ldr	r3, [r0, #36]	; 0x24
   145dc:	cmp	r3, #0
   145e0:	bne	1459c <__assert_fail@plt+0x3850>
   145e4:	bl	10cbc <fileno@plt>
   145e8:	ldr	r3, [sp, #24]
   145ec:	str	r3, [sp]
   145f0:	mov	r2, r6
   145f4:	mov	r3, r7
   145f8:	bl	10bf0 <lseek64@plt>
   145fc:	mvn	r2, #0
   14600:	mvn	r3, #0
   14604:	cmp	r1, r3
   14608:	cmpeq	r0, r2
   1460c:	beq	14628 <__assert_fail@plt+0x38dc>
   14610:	ldr	r3, [r4]
   14614:	bic	r3, r3, #16
   14618:	str	r3, [r4]
   1461c:	strd	r0, [r4, #80]	; 0x50
   14620:	mov	r0, #0
   14624:	b	145b4 <__assert_fail@plt+0x3868>
   14628:	mvn	r0, #0
   1462c:	b	145b4 <__assert_fail@plt+0x3868>
   14630:	str	r4, [sp, #-8]!
   14634:	str	lr, [sp, #4]
   14638:	cmp	r0, #0
   1463c:	beq	14658 <__assert_fail@plt+0x390c>
   14640:	bge	1465c <__assert_fail@plt+0x3910>
   14644:	bl	10c98 <__errno_location@plt>
   14648:	mov	r3, #12
   1464c:	str	r3, [r0]
   14650:	mov	r0, #0
   14654:	b	14660 <__assert_fail@plt+0x3914>
   14658:	mov	r0, #1
   1465c:	bl	10c2c <malloc@plt>
   14660:	ldr	r4, [sp]
   14664:	add	sp, sp, #4
   14668:	pop	{pc}		; (ldr pc, [sp], #4)
   1466c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14670:	strd	r6, [sp, #8]
   14674:	str	lr, [sp, #16]
   14678:	sub	sp, sp, #12
   1467c:	mov	r7, r1
   14680:	mov	r5, r2
   14684:	subs	r6, r0, #0
   14688:	addeq	r6, sp, #4
   1468c:	mov	r0, r6
   14690:	bl	10c14 <mbrtowc@plt>
   14694:	mov	r4, r0
   14698:	cmp	r5, #0
   1469c:	cmnne	r0, #3
   146a0:	bhi	146bc <__assert_fail@plt+0x3970>
   146a4:	mov	r0, r4
   146a8:	add	sp, sp, #12
   146ac:	ldrd	r4, [sp]
   146b0:	ldrd	r6, [sp, #8]
   146b4:	add	sp, sp, #16
   146b8:	pop	{pc}		; (ldr pc, [sp], #4)
   146bc:	mov	r0, #0
   146c0:	bl	14804 <__assert_fail@plt+0x3ab8>
   146c4:	cmp	r0, #0
   146c8:	bne	146a4 <__assert_fail@plt+0x3958>
   146cc:	ldrb	r3, [r7]
   146d0:	str	r3, [r6]
   146d4:	mov	r4, #1
   146d8:	b	146a4 <__assert_fail@plt+0x3958>
   146dc:	str	r4, [sp, #-8]!
   146e0:	str	lr, [sp, #4]
   146e4:	cmp	r0, #0
   146e8:	beq	1470c <__assert_fail@plt+0x39c0>
   146ec:	cmp	r1, #0
   146f0:	beq	14718 <__assert_fail@plt+0x39cc>
   146f4:	cmp	r1, #0
   146f8:	blt	14724 <__assert_fail@plt+0x39d8>
   146fc:	bl	10bcc <realloc@plt>
   14700:	ldr	r4, [sp]
   14704:	add	sp, sp, #4
   14708:	pop	{pc}		; (ldr pc, [sp], #4)
   1470c:	mov	r0, r1
   14710:	bl	14630 <__assert_fail@plt+0x38e4>
   14714:	b	14700 <__assert_fail@plt+0x39b4>
   14718:	bl	14510 <__assert_fail@plt+0x37c4>
   1471c:	mov	r0, #0
   14720:	b	14700 <__assert_fail@plt+0x39b4>
   14724:	bl	10c98 <__errno_location@plt>
   14728:	mov	r3, #12
   1472c:	str	r3, [r0]
   14730:	mov	r0, #0
   14734:	b	14700 <__assert_fail@plt+0x39b4>
   14738:	str	r4, [sp, #-8]!
   1473c:	str	lr, [sp, #4]
   14740:	umull	r2, r3, r1, r2
   14744:	cmp	r3, #0
   14748:	bne	14760 <__assert_fail@plt+0x3a14>
   1474c:	mov	r1, r2
   14750:	bl	146dc <__assert_fail@plt+0x3990>
   14754:	ldr	r4, [sp]
   14758:	add	sp, sp, #4
   1475c:	pop	{pc}		; (ldr pc, [sp], #4)
   14760:	bl	10c98 <__errno_location@plt>
   14764:	mov	r3, #12
   14768:	str	r3, [r0]
   1476c:	mov	r0, #0
   14770:	b	14754 <__assert_fail@plt+0x3a08>
   14774:	strd	r4, [sp, #-16]!
   14778:	str	r6, [sp, #8]
   1477c:	str	lr, [sp, #12]
   14780:	mov	r4, r0
   14784:	bl	10c08 <__fpending@plt>
   14788:	mov	r6, r0
   1478c:	mov	r0, r4
   14790:	bl	10b84 <ferror@plt>
   14794:	mov	r5, r0
   14798:	mov	r0, r4
   1479c:	bl	10cc8 <fclose@plt>
   147a0:	cmp	r5, #0
   147a4:	bne	147d8 <__assert_fail@plt+0x3a8c>
   147a8:	cmp	r0, #0
   147ac:	beq	147c8 <__assert_fail@plt+0x3a7c>
   147b0:	cmp	r6, #0
   147b4:	bne	147f4 <__assert_fail@plt+0x3aa8>
   147b8:	bl	10c98 <__errno_location@plt>
   147bc:	ldr	r0, [r0]
   147c0:	subs	r0, r0, #9
   147c4:	mvnne	r0, #0
   147c8:	ldrd	r4, [sp]
   147cc:	ldr	r6, [sp, #8]
   147d0:	add	sp, sp, #12
   147d4:	pop	{pc}		; (ldr pc, [sp], #4)
   147d8:	cmp	r0, #0
   147dc:	bne	147fc <__assert_fail@plt+0x3ab0>
   147e0:	bl	10c98 <__errno_location@plt>
   147e4:	mov	r3, #0
   147e8:	str	r3, [r0]
   147ec:	mvn	r0, #0
   147f0:	b	147c8 <__assert_fail@plt+0x3a7c>
   147f4:	mvn	r0, #0
   147f8:	b	147c8 <__assert_fail@plt+0x3a7c>
   147fc:	mvn	r0, #0
   14800:	b	147c8 <__assert_fail@plt+0x3a7c>
   14804:	push	{lr}		; (str lr, [sp, #-4]!)
   14808:	sub	sp, sp, #268	; 0x10c
   1480c:	movw	r2, #257	; 0x101
   14810:	add	r1, sp, #4
   14814:	bl	148a4 <__assert_fail@plt+0x3b58>
   14818:	cmp	r0, #0
   1481c:	movne	r0, #0
   14820:	bne	14858 <__assert_fail@plt+0x3b0c>
   14824:	movw	r1, #21024	; 0x5220
   14828:	movt	r1, #1
   1482c:	add	r0, sp, #4
   14830:	bl	10b48 <strcmp@plt>
   14834:	cmp	r0, #0
   14838:	beq	14854 <__assert_fail@plt+0x3b08>
   1483c:	movw	r1, #21028	; 0x5224
   14840:	movt	r1, #1
   14844:	add	r0, sp, #4
   14848:	bl	10b48 <strcmp@plt>
   1484c:	adds	r0, r0, #0
   14850:	movne	r0, #1
   14854:	and	r0, r0, #1
   14858:	add	sp, sp, #268	; 0x10c
   1485c:	pop	{pc}		; (ldr pc, [sp], #4)
   14860:	str	r4, [sp, #-8]!
   14864:	str	lr, [sp, #4]
   14868:	mov	r0, #14
   1486c:	bl	10cf8 <nl_langinfo@plt>
   14870:	cmp	r0, #0
   14874:	beq	14898 <__assert_fail@plt+0x3b4c>
   14878:	ldrb	r2, [r0]
   1487c:	movw	r3, #21036	; 0x522c
   14880:	movt	r3, #1
   14884:	cmp	r2, #0
   14888:	moveq	r0, r3
   1488c:	ldr	r4, [sp]
   14890:	add	sp, sp, #4
   14894:	pop	{pc}		; (ldr pc, [sp], #4)
   14898:	movw	r0, #21036	; 0x522c
   1489c:	movt	r0, #1
   148a0:	b	1488c <__assert_fail@plt+0x3b40>
   148a4:	strd	r4, [sp, #-16]!
   148a8:	str	r6, [sp, #8]
   148ac:	str	lr, [sp, #12]
   148b0:	mov	r6, r1
   148b4:	mov	r4, r2
   148b8:	mov	r1, #0
   148bc:	bl	10ce0 <setlocale@plt>
   148c0:	subs	r5, r0, #0
   148c4:	beq	14908 <__assert_fail@plt+0x3bbc>
   148c8:	mov	r0, r5
   148cc:	bl	10c80 <strlen@plt>
   148d0:	cmp	r4, r0
   148d4:	bhi	14924 <__assert_fail@plt+0x3bd8>
   148d8:	cmp	r4, #0
   148dc:	moveq	r0, #34	; 0x22
   148e0:	beq	14938 <__assert_fail@plt+0x3bec>
   148e4:	sub	r4, r4, #1
   148e8:	mov	r2, r4
   148ec:	mov	r1, r5
   148f0:	mov	r0, r6
   148f4:	bl	10b9c <memcpy@plt>
   148f8:	mov	r3, #0
   148fc:	strb	r3, [r6, r4]
   14900:	mov	r0, #34	; 0x22
   14904:	b	14938 <__assert_fail@plt+0x3bec>
   14908:	cmp	r4, #0
   1490c:	moveq	r0, #22
   14910:	beq	14938 <__assert_fail@plt+0x3bec>
   14914:	mov	r3, #0
   14918:	strb	r3, [r6]
   1491c:	mov	r0, #22
   14920:	b	14938 <__assert_fail@plt+0x3bec>
   14924:	add	r2, r0, #1
   14928:	mov	r1, r5
   1492c:	mov	r0, r6
   14930:	bl	10b9c <memcpy@plt>
   14934:	mov	r0, #0
   14938:	ldrd	r4, [sp]
   1493c:	ldr	r6, [sp, #8]
   14940:	add	sp, sp, #12
   14944:	pop	{pc}		; (ldr pc, [sp], #4)
   14948:	str	r4, [sp, #-8]!
   1494c:	str	lr, [sp, #4]
   14950:	mov	r1, #0
   14954:	bl	10ce0 <setlocale@plt>
   14958:	ldr	r4, [sp]
   1495c:	add	sp, sp, #4
   14960:	pop	{pc}		; (ldr pc, [sp], #4)
   14964:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14968:	mov	r7, r0
   1496c:	ldr	r6, [pc, #72]	; 149bc <__assert_fail@plt+0x3c70>
   14970:	ldr	r5, [pc, #72]	; 149c0 <__assert_fail@plt+0x3c74>
   14974:	add	r6, pc, r6
   14978:	add	r5, pc, r5
   1497c:	sub	r6, r6, r5
   14980:	mov	r8, r1
   14984:	mov	r9, r2
   14988:	bl	10b1c <calloc@plt-0x20>
   1498c:	asrs	r6, r6, #2
   14990:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14994:	mov	r4, #0
   14998:	add	r4, r4, #1
   1499c:	ldr	r3, [r5], #4
   149a0:	mov	r2, r9
   149a4:	mov	r1, r8
   149a8:	mov	r0, r7
   149ac:	blx	r3
   149b0:	cmp	r6, r4
   149b4:	bne	14998 <__assert_fail@plt+0x3c4c>
   149b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149bc:	muleq	r1, r8, r5
   149c0:	muleq	r1, r0, r5
   149c4:	bx	lr
   149c8:	ldr	r3, [pc, #12]	; 149dc <__assert_fail@plt+0x3c90>
   149cc:	mov	r1, #0
   149d0:	add	r3, pc, r3
   149d4:	ldr	r2, [r3]
   149d8:	b	10ca4 <__cxa_atexit@plt>
   149dc:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

000149e0 <.fini>:
   149e0:	push	{r3, lr}
   149e4:	pop	{r3, pc}
