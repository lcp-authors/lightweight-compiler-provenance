
../repos/charybdis/authd/.libs/authd:     file format elf32-littlearm


Disassembly of section .init:

00011488 <.init>:
   11488:	push	{r3, lr}
   1148c:	bl	118d4 <sprintf@plt+0x48>
   11490:	pop	{r3, pc}

Disassembly of section .plt:

00011494 <sigemptyset@plt-0x14>:
   11494:	push	{lr}		; (str lr, [sp, #-4]!)
   11498:	ldr	lr, [pc, #4]	; 114a4 <sigemptyset@plt-0x4>
   1149c:	add	lr, pc, lr
   114a0:	ldr	pc, [lr, #8]!
   114a4:	andeq	r8, r1, ip, asr fp

000114a8 <sigemptyset@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #24, 20	; 0x18000
   114b0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114b4 <strerror@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #24, 20	; 0x18000
   114bc:	ldr	pc, [ip, #2900]!	; 0xb54

000114c0 <rb_helper_loop@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #24, 20	; 0x18000
   114c8:	ldr	pc, [ip, #2892]!	; 0xb4c

000114cc <abort@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #24, 20	; 0x18000
   114d4:	ldr	pc, [ip, #2884]!	; 0xb44

000114d8 <rb_event_addish@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #24, 20	; 0x18000
   114e0:	ldr	pc, [ip, #2876]!	; 0xb3c

000114e4 <getsockname@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #24, 20	; 0x18000
   114ec:	ldr	pc, [ip, #2868]!	; 0xb34

000114f0 <rb_ignore_errno@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #24, 20	; 0x18000
   114f8:	ldr	pc, [ip, #2860]!	; 0xb2c

000114fc <rb_connect_tcp_ssl@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #24, 20	; 0x18000
   11504:	ldr	pc, [ip, #2852]!	; 0xb24

00011508 <rb_connect_tcp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #24, 20	; 0x18000
   11510:	ldr	pc, [ip, #2844]!	; 0xb1c

00011514 <memcmp@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #24, 20	; 0x18000
   1151c:	ldr	pc, [ip, #2836]!	; 0xb14

00011520 <__libc_start_main@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #24, 20	; 0x18000
   11528:	ldr	pc, [ip, #2828]!	; 0xb0c

0001152c <rb_event_delete@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #24, 20	; 0x18000
   11534:	ldr	pc, [ip, #2820]!	; 0xb04

00011538 <rb_setselect@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #24, 20	; 0x18000
   11540:	ldr	pc, [ip, #2812]!	; 0xafc

00011544 <rb_get_fd@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #24, 20	; 0x18000
   1154c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011550 <__gmon_start__@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #24, 20	; 0x18000
   11558:	ldr	pc, [ip, #2796]!	; 0xaec

0001155c <vsnprintf@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #24, 20	; 0x18000
   11564:	ldr	pc, [ip, #2788]!	; 0xae4

00011568 <rb_socket@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #24, 20	; 0x18000
   11570:	ldr	pc, [ip, #2780]!	; 0xadc

00011574 <fclose@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #24, 20	; 0x18000
   1157c:	ldr	pc, [ip, #2772]!	; 0xad4

00011580 <rb_strtok_r@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #24, 20	; 0x18000
   11588:	ldr	pc, [ip, #2764]!	; 0xacc

0001158c <strchr@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #24, 20	; 0x18000
   11594:	ldr	pc, [ip, #2756]!	; 0xac4

00011598 <rb_dictionary_foreach_cur@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #24, 20	; 0x18000
   115a0:	ldr	pc, [ip, #2748]!	; 0xabc

000115a4 <strcasecmp@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #24, 20	; 0x18000
   115ac:	ldr	pc, [ip, #2740]!	; 0xab4

000115b0 <calloc@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #24, 20	; 0x18000
   115b8:	ldr	pc, [ip, #2732]!	; 0xaac

000115bc <rb_helper_child@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #24, 20	; 0x18000
   115c4:	ldr	pc, [ip, #2724]!	; 0xaa4

000115c8 <sendto@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #24, 20	; 0x18000
   115d0:	ldr	pc, [ip, #2716]!	; 0xa9c

000115d4 <fopen@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #24, 20	; 0x18000
   115dc:	ldr	pc, [ip, #2708]!	; 0xa94

000115e0 <memset@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #24, 20	; 0x18000
   115e8:	ldr	pc, [ip, #2700]!	; 0xa8c

000115ec <freeaddrinfo@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #24, 20	; 0x18000
   115f4:	ldr	pc, [ip, #2692]!	; 0xa84

000115f8 <strrchr@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #24, 20	; 0x18000
   11600:	ldr	pc, [ip, #2684]!	; 0xa7c

00011604 <rb_write@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #24, 20	; 0x18000
   1160c:	ldr	pc, [ip, #2676]!	; 0xa74

00011610 <__assert_fail@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #24, 20	; 0x18000
   11618:	ldr	pc, [ip, #2668]!	; 0xa6c

0001161c <fgets_unlocked@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #24, 20	; 0x18000
   11624:	ldr	pc, [ip, #2660]!	; 0xa64

00011628 <rb_strlcpy@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #24, 20	; 0x18000
   11630:	ldr	pc, [ip, #2652]!	; 0xa5c

00011634 <strtoull@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #24, 20	; 0x18000
   1163c:	ldr	pc, [ip, #2644]!	; 0xa54

00011640 <rb_dictionary_foreach_next@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #24, 20	; 0x18000
   11648:	ldr	pc, [ip, #2636]!	; 0xa4c

0001164c <free@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #24, 20	; 0x18000
   11654:	ldr	pc, [ip, #2628]!	; 0xa44

00011658 <rb_string_to_array@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #24, 20	; 0x18000
   11660:	ldr	pc, [ip, #2620]!	; 0xa3c

00011664 <rb_read@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #24, 20	; 0x18000
   1166c:	ldr	pc, [ip, #2612]!	; 0xa34

00011670 <rb_strcasecmp@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #24, 20	; 0x18000
   11678:	ldr	pc, [ip, #2604]!	; 0xa2c

0001167c <getaddrinfo@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #24, 20	; 0x18000
   11684:	ldr	pc, [ip, #2596]!	; 0xa24

00011688 <rb_dictionary_foreach_start@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #24, 20	; 0x18000
   11690:	ldr	pc, [ip, #2588]!	; 0xa1c

00011694 <rb_inet_pton_sock@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #24, 20	; 0x18000
   1169c:	ldr	pc, [ip, #2580]!	; 0xa14

000116a0 <strlen@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #24, 20	; 0x18000
   116a8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116ac <rb_current_time@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #24, 20	; 0x18000
   116b4:	ldr	pc, [ip, #2564]!	; 0xa04

000116b8 <rb_dictionary_delete@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #24, 20	; 0x18000
   116c0:	ldr	pc, [ip, #2556]!	; 0x9fc

000116c4 <memcpy@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #24, 20	; 0x18000
   116cc:	ldr	pc, [ip, #2548]!	; 0x9f4

000116d0 <rb_free_rb_dlink_node@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #24, 20	; 0x18000
   116d8:	ldr	pc, [ip, #2540]!	; 0x9ec

000116dc <rb_close@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #24, 20	; 0x18000
   116e4:	ldr	pc, [ip, #2532]!	; 0x9e4

000116e8 <strtol@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #24, 20	; 0x18000
   116f0:	ldr	pc, [ip, #2524]!	; 0x9dc

000116f4 <sigaddset@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #24, 20	; 0x18000
   116fc:	ldr	pc, [ip, #2516]!	; 0x9d4

00011700 <strcpy@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #24, 20	; 0x18000
   11708:	ldr	pc, [ip, #2508]!	; 0x9cc

0001170c <rb_dictionary_destroy@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #24, 20	; 0x18000
   11714:	ldr	pc, [ip, #2500]!	; 0x9c4

00011718 <bind@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #24, 20	; 0x18000
   11720:	ldr	pc, [ip, #2492]!	; 0x9bc

00011724 <strstr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #24, 20	; 0x18000
   1172c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011730 <fwrite@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #24, 20	; 0x18000
   11738:	ldr	pc, [ip, #2476]!	; 0x9ac

0001173c <rb_init_prng@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #24, 20	; 0x18000
   11744:	ldr	pc, [ip, #2468]!	; 0x9a4

00011748 <rb_dictionary_retrieve@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #24, 20	; 0x18000
   11750:	ldr	pc, [ip, #2460]!	; 0x99c

00011754 <rb_outofmemory@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #24, 20	; 0x18000
   1175c:	ldr	pc, [ip, #2452]!	; 0x994

00011760 <__ctype_b_loc@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #24, 20	; 0x18000
   11768:	ldr	pc, [ip, #2444]!	; 0x98c

0001176c <rb_dictionary_add@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #24, 20	; 0x18000
   11774:	ldr	pc, [ip, #2436]!	; 0x984

00011778 <rb_set_time@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #24, 20	; 0x18000
   11780:	ldr	pc, [ip, #2428]!	; 0x97c

00011784 <malloc@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #24, 20	; 0x18000
   1178c:	ldr	pc, [ip, #2420]!	; 0x974

00011790 <sigaction@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #24, 20	; 0x18000
   11798:	ldr	pc, [ip, #2412]!	; 0x96c

0001179c <rb_helper_read@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #24, 20	; 0x18000
   117a4:	ldr	pc, [ip, #2404]!	; 0x964

000117a8 <rb_inet_ntop_sock@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #24, 20	; 0x18000
   117b0:	ldr	pc, [ip, #2396]!	; 0x95c

000117b4 <rb_dictionary_find@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #24, 20	; 0x18000
   117bc:	ldr	pc, [ip, #2388]!	; 0x954

000117c0 <rb_dictionary_create@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #24, 20	; 0x18000
   117c8:	ldr	pc, [ip, #2380]!	; 0x94c

000117cc <memmove@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #24, 20	; 0x18000
   117d4:	ldr	pc, [ip, #2372]!	; 0x944

000117d8 <rb_accept_tcp@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #24, 20	; 0x18000
   117e0:	ldr	pc, [ip, #2364]!	; 0x93c

000117e4 <rb_helper_write@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #24, 20	; 0x18000
   117ec:	ldr	pc, [ip, #2356]!	; 0x934

000117f0 <rb_event_add@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #24, 20	; 0x18000
   117f8:	ldr	pc, [ip, #2348]!	; 0x92c

000117fc <rb_get_random@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #24, 20	; 0x18000
   11804:	ldr	pc, [ip, #2340]!	; 0x924

00011808 <rb_make_rb_dlink_node@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #24, 20	; 0x18000
   11810:	ldr	pc, [ip, #2332]!	; 0x91c

00011814 <snprintf@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #24, 20	; 0x18000
   1181c:	ldr	pc, [ip, #2324]!	; 0x914

00011820 <rb_listen@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #24, 20	; 0x18000
   11828:	ldr	pc, [ip, #2316]!	; 0x90c

0001182c <strncmp@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #24, 20	; 0x18000
   11834:	ldr	pc, [ip, #2308]!	; 0x904

00011838 <recvfrom@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #24, 20	; 0x18000
   11840:	ldr	pc, [ip, #2300]!	; 0x8fc

00011844 <setsockopt@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #24, 20	; 0x18000
   1184c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011850 <strpbrk@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #24, 20	; 0x18000
   11858:	ldr	pc, [ip, #2284]!	; 0x8ec

0001185c <memchr@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #24, 20	; 0x18000
   11864:	ldr	pc, [ip, #2276]!	; 0x8e4

00011868 <strcmp@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #24, 20	; 0x18000
   11870:	ldr	pc, [ip, #2268]!	; 0x8dc

00011874 <exit@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #24, 20	; 0x18000
   1187c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011880 <__errno_location@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #24, 20	; 0x18000
   11888:	ldr	pc, [ip, #2252]!	; 0x8cc

0001188c <sprintf@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #24, 20	; 0x18000
   11894:	ldr	pc, [ip, #2244]!	; 0x8c4

Disassembly of section .text:

00011898 <.text>:
   11898:	mov	fp, #0
   1189c:	mov	lr, #0
   118a0:	pop	{r1}		; (ldr r1, [sp], #4)
   118a4:	mov	r2, sp
   118a8:	push	{r2}		; (str r2, [sp, #-4]!)
   118ac:	push	{r0}		; (str r0, [sp, #-4]!)
   118b0:	ldr	ip, [pc, #16]	; 118c8 <sprintf@plt+0x3c>
   118b4:	push	{ip}		; (str ip, [sp, #-4]!)
   118b8:	ldr	r0, [pc, #12]	; 118cc <sprintf@plt+0x40>
   118bc:	ldr	r3, [pc, #12]	; 118d0 <sprintf@plt+0x44>
   118c0:	bl	11520 <__libc_start_main@plt>
   118c4:	bl	114cc <abort@plt>
   118c8:	andeq	r8, r1, ip, asr #27
   118cc:	andeq	r1, r1, r8, lsr #22
   118d0:	andeq	r8, r1, ip, ror #26
   118d4:	ldr	r3, [pc, #20]	; 118f0 <sprintf@plt+0x64>
   118d8:	ldr	r2, [pc, #20]	; 118f4 <sprintf@plt+0x68>
   118dc:	add	r3, pc, r3
   118e0:	ldr	r2, [r3, r2]
   118e4:	cmp	r2, #0
   118e8:	bxeq	lr
   118ec:	b	11550 <__gmon_start__@plt>
   118f0:	andeq	r8, r1, ip, lsl r7
   118f4:	andeq	r0, r0, r0, ror #2
   118f8:	ldr	r0, [pc, #24]	; 11918 <sprintf@plt+0x8c>
   118fc:	ldr	r3, [pc, #24]	; 1191c <sprintf@plt+0x90>
   11900:	cmp	r3, r0
   11904:	bxeq	lr
   11908:	ldr	r3, [pc, #16]	; 11920 <sprintf@plt+0x94>
   1190c:	cmp	r3, #0
   11910:	bxeq	lr
   11914:	bx	r3
   11918:	andeq	sl, r2, ip, lsl #31
   1191c:	andeq	sl, r2, ip, lsl #31
   11920:	andeq	r0, r0, r0
   11924:	ldr	r0, [pc, #36]	; 11950 <sprintf@plt+0xc4>
   11928:	ldr	r1, [pc, #36]	; 11954 <sprintf@plt+0xc8>
   1192c:	sub	r1, r1, r0
   11930:	asr	r1, r1, #2
   11934:	add	r1, r1, r1, lsr #31
   11938:	asrs	r1, r1, #1
   1193c:	bxeq	lr
   11940:	ldr	r3, [pc, #16]	; 11958 <sprintf@plt+0xcc>
   11944:	cmp	r3, #0
   11948:	bxeq	lr
   1194c:	bx	r3
   11950:	andeq	sl, r2, ip, lsl #31
   11954:	andeq	sl, r2, ip, lsl #31
   11958:	andeq	r0, r0, r0
   1195c:	push	{r4, lr}
   11960:	ldr	r4, [pc, #24]	; 11980 <sprintf@plt+0xf4>
   11964:	ldrb	r3, [r4]
   11968:	cmp	r3, #0
   1196c:	popne	{r4, pc}
   11970:	bl	118f8 <sprintf@plt+0x6c>
   11974:	mov	r3, #1
   11978:	strb	r3, [r4]
   1197c:	pop	{r4, pc}
   11980:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   11984:	b	11924 <sprintf@plt+0x98>
   11988:	push	{r4, r5, fp, lr}
   1198c:	add	fp, sp, #8
   11990:	mov	r4, r0
   11994:	cmp	r0, #1
   11998:	bgt	119b4 <sprintf@plt+0x128>
   1199c:	ldr	r1, [pc, #136]	; 11a2c <sprintf@plt+0x1a0>
   119a0:	mov	r0, #67	; 0x43
   119a4:	mov	r2, r4
   119a8:	add	r1, pc, r1
   119ac:	pop	{r4, r5, fp, lr}
   119b0:	b	124e8 <sprintf@plt+0xc5c>
   119b4:	mov	r5, r1
   119b8:	ldr	r1, [r1, #4]
   119bc:	ldr	r0, [pc, #100]	; 11a28 <sprintf@plt+0x19c>
   119c0:	ldr	r0, [pc, r0]
   119c4:	ldr	r0, [r0]
   119c8:	bl	11748 <rb_dictionary_retrieve@plt>
   119cc:	cmp	r0, #0
   119d0:	beq	119fc <sprintf@plt+0x170>
   119d4:	ldr	r2, [r0, #4]
   119d8:	sub	r1, r4, #2
   119dc:	cmp	r1, r2
   119e0:	bge	11a14 <sprintf@plt+0x188>
   119e4:	ldr	r1, [pc, #72]	; 11a34 <sprintf@plt+0x1a8>
   119e8:	mov	r0, #67	; 0x43
   119ec:	mov	r3, r4
   119f0:	add	r1, pc, r1
   119f4:	pop	{r4, r5, fp, lr}
   119f8:	b	124e8 <sprintf@plt+0xc5c>
   119fc:	ldr	r2, [r5, #4]
   11a00:	ldr	r1, [pc, #40]	; 11a30 <sprintf@plt+0x1a4>
   11a04:	mov	r0, #67	; 0x43
   11a08:	add	r1, pc, r1
   11a0c:	pop	{r4, r5, fp, lr}
   11a10:	b	124e8 <sprintf@plt+0xc5c>
   11a14:	ldr	r3, [r0, #8]
   11a18:	ldr	r0, [r5, #4]
   11a1c:	add	r2, r5, #8
   11a20:	pop	{r4, r5, fp, lr}
   11a24:	bx	r3
   11a28:			; <UNDEFINED> instruction: 0x000187bc
   11a2c:	andeq	r7, r0, pc, ror #9
   11a30:	ldrdeq	r7, [r0], -sp
   11a34:	andeq	r7, r0, r2, lsr #10
   11a38:	push	{r4, r5, fp, lr}
   11a3c:	add	fp, sp, #8
   11a40:	cmp	r0, #2
   11a44:	bgt	11a78 <sprintf@plt+0x1ec>
   11a48:	ldr	r5, [pc, #76]	; 11a9c <sprintf@plt+0x210>
   11a4c:	mov	r4, #0
   11a50:	ldr	r5, [pc, r5]
   11a54:	ldr	r1, [r5, r4, lsl #2]
   11a58:	cmp	r1, #0
   11a5c:	beq	11a68 <sprintf@plt+0x1dc>
   11a60:	mov	r0, #0
   11a64:	blx	r1
   11a68:	add	r4, r4, #1
   11a6c:	cmp	r4, #256	; 0x100
   11a70:	bne	11a54 <sprintf@plt+0x1c8>
   11a74:	pop	{r4, r5, fp, pc}
   11a78:	ldr	r0, [r1, #4]
   11a7c:	ldrb	r0, [r0]
   11a80:	ldr	r1, [pc, #24]	; 11aa0 <sprintf@plt+0x214>
   11a84:	ldr	r1, [pc, r1]
   11a88:	ldr	r1, [r1, r0, lsl #2]
   11a8c:	cmp	r1, #0
   11a90:	popeq	{r4, r5, fp, pc}
   11a94:	pop	{r4, r5, fp, lr}
   11a98:	bx	r1
   11a9c:	andeq	r8, r1, r8, lsr r7
   11aa0:	andeq	r8, r1, r4, lsl #14
   11aa4:	push	{r4, sl, fp, lr}
   11aa8:	add	fp, sp, #8
   11aac:	cmp	r0, #2
   11ab0:	bgt	11ac4 <sprintf@plt+0x238>
   11ab4:	ldr	r1, [pc, #96]	; 11b1c <sprintf@plt+0x290>
   11ab8:	mov	r2, r0
   11abc:	add	r1, pc, r1
   11ac0:	b	11aec <sprintf@plt+0x260>
   11ac4:	ldr	r0, [r1, #4]
   11ac8:	mov	r4, r1
   11acc:	mov	r1, #0
   11ad0:	mov	r2, #16
   11ad4:	bl	11634 <strtoull@plt>
   11ad8:	cmp	r1, #0
   11adc:	beq	11af8 <sprintf@plt+0x26c>
   11ae0:	ldr	r2, [r4, #4]
   11ae4:	ldr	r1, [pc, #52]	; 11b20 <sprintf@plt+0x294>
   11ae8:	add	r1, pc, r1
   11aec:	mov	r0, #67	; 0x43
   11af0:	pop	{r4, sl, fp, lr}
   11af4:	b	124e8 <sprintf@plt+0xc5c>
   11af8:	ldr	r1, [r4, #8]
   11afc:	ldrb	r1, [r1]
   11b00:	ldr	r2, [pc, #28]	; 11b24 <sprintf@plt+0x298>
   11b04:	ldr	r2, [pc, r2]
   11b08:	ldr	r2, [r2, r1, lsl #2]
   11b0c:	cmp	r2, #0
   11b10:	popeq	{r4, sl, fp, pc}
   11b14:	pop	{r4, sl, fp, lr}
   11b18:	bx	r2
   11b1c:	andeq	r7, r0, lr, asr r3
   11b20:	andeq	r7, r0, sp, ror r3
   11b24:	muleq	r1, r0, r6
   11b28:	push	{fp, lr}
   11b2c:	mov	fp, sp
   11b30:	sub	sp, sp, #16
   11b34:	bl	11c10 <sprintf@plt+0x384>
   11b38:	mov	r0, #256	; 0x100
   11b3c:	mov	r1, #0
   11b40:	mov	r2, #0
   11b44:	mov	r3, #0
   11b48:	str	r1, [sp]
   11b4c:	str	r0, [sp, #4]
   11b50:	str	r0, [sp, #8]
   11b54:	str	r0, [sp, #12]
   11b58:	ldr	r0, [pc, #144]	; 11bf0 <sprintf@plt+0x364>
   11b5c:	ldr	r1, [pc, #144]	; 11bf4 <sprintf@plt+0x368>
   11b60:	add	r0, pc, r0
   11b64:	add	r1, pc, r1
   11b68:	bl	115bc <rb_helper_child@plt>
   11b6c:	ldr	r4, [pc, #132]	; 11bf8 <sprintf@plt+0x36c>
   11b70:	cmp	r0, #0
   11b74:	ldr	r4, [pc, r4]
   11b78:	str	r0, [r4]
   11b7c:	bne	11ba8 <sprintf@plt+0x31c>
   11b80:	ldr	r0, [pc, #116]	; 11bfc <sprintf@plt+0x370>
   11b84:	mov	r1, #46	; 0x2e
   11b88:	mov	r2, #1
   11b8c:	ldr	r0, [pc, r0]
   11b90:	ldr	r3, [r0]
   11b94:	ldr	r0, [pc, #100]	; 11c00 <sprintf@plt+0x374>
   11b98:	add	r0, pc, r0
   11b9c:	bl	11730 <fwrite@plt>
   11ba0:	mov	r0, #1
   11ba4:	bl	11874 <exit@plt>
   11ba8:	bl	11778 <rb_set_time@plt>
   11bac:	bl	11c10 <sprintf@plt+0x384>
   11bb0:	ldr	r1, [pc, #76]	; 11c04 <sprintf@plt+0x378>
   11bb4:	ldr	r1, [pc, r1]
   11bb8:	ldr	r0, [pc, #72]	; 11c08 <sprintf@plt+0x37c>
   11bbc:	add	r0, pc, r0
   11bc0:	bl	117c0 <rb_dictionary_create@plt>
   11bc4:	ldr	r1, [pc, #64]	; 11c0c <sprintf@plt+0x380>
   11bc8:	ldr	r1, [pc, r1]
   11bcc:	str	r0, [r1]
   11bd0:	bl	13648 <sprintf@plt+0x1dbc>
   11bd4:	bl	12664 <sprintf@plt+0xdd8>
   11bd8:	mov	r0, #0
   11bdc:	mov	r1, #1
   11be0:	bl	1173c <rb_init_prng@plt>
   11be4:	ldr	r0, [r4]
   11be8:	mov	r1, #0
   11bec:	bl	114c0 <rb_helper_loop@plt>
   11bf0:	andeq	r0, r0, ip, asr r1
   11bf4:	strdeq	r0, [r0], -ip
   11bf8:	andeq	r8, r1, ip, lsl r6
   11bfc:	andeq	r8, r1, r0, lsl #12
   11c00:	andeq	r7, r0, ip, lsr r2
   11c04:	andeq	r8, r1, r4, asr #11
   11c08:	andeq	r7, r0, r7, asr #4
   11c0c:			; <UNDEFINED> instruction: 0x000185b4
   11c10:	push	{r4, r5, fp, lr}
   11c14:	add	fp, sp, #8
   11c18:	sub	sp, sp, #144	; 0x90
   11c1c:	mov	r0, #1
   11c20:	add	r4, sp, #4
   11c24:	str	r0, [sp, #4]
   11c28:	mov	r0, #0
   11c2c:	add	r5, r4, #4
   11c30:	str	r0, [sp, #136]	; 0x88
   11c34:	mov	r0, r5
   11c38:	bl	114a8 <sigemptyset@plt>
   11c3c:	mov	r0, r5
   11c40:	mov	r1, #13
   11c44:	bl	116f4 <sigaddset@plt>
   11c48:	mov	r0, r5
   11c4c:	mov	r1, #14
   11c50:	bl	116f4 <sigaddset@plt>
   11c54:	mov	r0, r5
   11c58:	mov	r1, #5
   11c5c:	bl	116f4 <sigaddset@plt>
   11c60:	mov	r0, r5
   11c64:	mov	r1, #28
   11c68:	bl	116f4 <sigaddset@plt>
   11c6c:	mov	r0, #28
   11c70:	mov	r1, r4
   11c74:	mov	r2, #0
   11c78:	bl	11790 <sigaction@plt>
   11c7c:	mov	r0, #13
   11c80:	mov	r1, r4
   11c84:	mov	r2, #0
   11c88:	bl	11790 <sigaction@plt>
   11c8c:	mov	r0, #5
   11c90:	mov	r1, r4
   11c94:	mov	r2, #0
   11c98:	bl	11790 <sigaction@plt>
   11c9c:	ldr	r0, [pc, #28]	; 11cc0 <sprintf@plt+0x434>
   11ca0:	mov	r1, r4
   11ca4:	mov	r2, #0
   11ca8:	add	r0, pc, r0
   11cac:	str	r0, [sp, #4]
   11cb0:	mov	r0, #14
   11cb4:	bl	11790 <sigaction@plt>
   11cb8:	sub	sp, fp, #8
   11cbc:	pop	{r4, r5, fp, pc}
   11cc0:	andeq	r0, r0, r8, asr #1
   11cc4:	push	{r4, r5, r6, r7, fp, lr}
   11cc8:	add	fp, sp, #16
   11ccc:	ldr	r1, [pc, #128]	; 11d54 <sprintf@plt+0x4c8>
   11cd0:	mov	r2, #16384	; 0x4000
   11cd4:	mov	r4, r0
   11cd8:	add	r1, pc, r1
   11cdc:	bl	1179c <rb_helper_read@plt>
   11ce0:	cmp	r0, #1
   11ce4:	poplt	{r4, r5, r6, r7, fp, pc}
   11ce8:	ldr	r5, [pc, #104]	; 11d58 <sprintf@plt+0x4cc>
   11cec:	ldr	r6, [pc, #104]	; 11d5c <sprintf@plt+0x4d0>
   11cf0:	ldr	r7, [pc, #104]	; 11d60 <sprintf@plt+0x4d4>
   11cf4:	ldr	r7, [pc, r7]
   11cf8:	add	r5, pc, r5
   11cfc:	add	r6, pc, r6
   11d00:	mov	r0, r5
   11d04:	mov	r1, r6
   11d08:	mov	r2, #10
   11d0c:	bl	11658 <rb_string_to_array@plt>
   11d10:	cmp	r0, #1
   11d14:	blt	11d38 <sprintf@plt+0x4ac>
   11d18:	ldr	r1, [pc, #68]	; 11d64 <sprintf@plt+0x4d8>
   11d1c:	ldr	r1, [pc, r1]
   11d20:	ldrb	r1, [r1]
   11d24:	ldr	r2, [r7, r1, lsl #2]
   11d28:	cmp	r2, #0
   11d2c:	beq	11d38 <sprintf@plt+0x4ac>
   11d30:	mov	r1, r6
   11d34:	blx	r2
   11d38:	mov	r0, r4
   11d3c:	mov	r1, r5
   11d40:	mov	r2, #16384	; 0x4000
   11d44:	bl	1179c <rb_helper_read@plt>
   11d48:	cmp	r0, #0
   11d4c:	bgt	11d00 <sprintf@plt+0x474>
   11d50:	pop	{r4, r5, r6, r7, fp, pc}
   11d54:	andeq	r9, r1, r4, ror #5
   11d58:	andeq	r9, r1, r4, asr #5
   11d5c:	muleq	r1, r4, r2
   11d60:	andeq	r8, r1, r8, ror #8
   11d64:	andeq	r9, r1, r4, ror r2
   11d68:	push	{fp, lr}
   11d6c:	mov	fp, sp
   11d70:	mov	r0, #1
   11d74:	bl	11874 <exit@plt>
   11d78:	bx	lr
   11d7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d80:	add	fp, sp, #24
   11d84:	mov	r6, r1
   11d88:	mov	r8, r0
   11d8c:	mov	r0, #1
   11d90:	mov	r1, #160	; 0xa0
   11d94:	mov	r9, r3
   11d98:	mov	r7, r2
   11d9c:	mov	r5, #1
   11da0:	bl	115b0 <calloc@plt>
   11da4:	cmp	r0, #0
   11da8:	beq	11e34 <sprintf@plt+0x5a8>
   11dac:	mov	r4, r0
   11db0:	cmp	r6, #2
   11db4:	beq	11dcc <sprintf@plt+0x540>
   11db8:	cmp	r6, #10
   11dbc:	bne	11e20 <sprintf@plt+0x594>
   11dc0:	mov	r5, #28
   11dc4:	mov	r0, #54	; 0x36
   11dc8:	b	11dd0 <sprintf@plt+0x544>
   11dcc:	mov	r0, #52	; 0x34
   11dd0:	str	r0, [r4, #8]
   11dd4:	ldr	r0, [pc, #92]	; 11e38 <sprintf@plt+0x5ac>
   11dd8:	ldr	r0, [pc, r0]
   11ddc:	ldrd	r2, [r0]
   11de0:	adds	r6, r2, #1
   11de4:	adc	r1, r3, #0
   11de8:	str	r6, [r0]
   11dec:	str	r1, [r0, #4]
   11df0:	add	r0, r4, #144	; 0x90
   11df4:	mov	r1, r4
   11df8:	stm	r0, {r2, r3, r7, r9}
   11dfc:	mov	r2, r5
   11e00:	ldr	r0, [pc, #52]	; 11e3c <sprintf@plt+0x5b0>
   11e04:	add	r0, pc, r0
   11e08:	str	r0, [r4, #4]
   11e0c:	mov	r0, r8
   11e10:	str	r4, [r4]
   11e14:	bl	13838 <sprintf@plt+0x1fac>
   11e18:	mov	r0, r4
   11e1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e20:	mov	r0, r4
   11e24:	bl	1164c <free@plt>
   11e28:	mov	r4, #0
   11e2c:	mov	r0, r4
   11e30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e34:	bl	11754 <rb_outofmemory@plt>
   11e38:	andeq	r8, r1, r0, asr #7
   11e3c:	andeq	r0, r0, r4, lsr r0
   11e40:	push	{r4, r5, fp, lr}
   11e44:	add	fp, sp, #8
   11e48:	sub	sp, sp, #56	; 0x38
   11e4c:	mov	r4, r0
   11e50:	mov	r0, sp
   11e54:	vmov.i32	q8, #0	; 0x00000000
   11e58:	add	r2, r0, #33	; 0x21
   11e5c:	cmp	r4, #0
   11e60:	vst1.8	{d16-d17}, [r2]
   11e64:	add	r2, r0, #17
   11e68:	orr	r0, r0, #1
   11e6c:	vst1.8	{d16-d17}, [r0]
   11e70:	mov	r0, #0
   11e74:	vst1.8	{d16-d17}, [r2]
   11e78:	str	r0, [sp, #49]	; 0x31
   11e7c:	mov	r0, #42	; 0x2a
   11e80:	strb	r0, [sp]
   11e84:	beq	11f4c <sprintf@plt+0x6c0>
   11e88:	cmp	r1, #0
   11e8c:	beq	11f14 <sprintf@plt+0x688>
   11e90:	ldr	r2, [r4, #8]
   11e94:	cmp	r2, #54	; 0x36
   11e98:	beq	11ec8 <sprintf@plt+0x63c>
   11e9c:	cmp	r2, #52	; 0x34
   11ea0:	bne	11f64 <sprintf@plt+0x6d8>
   11ea4:	ldrh	r0, [r1, #4]!
   11ea8:	cmp	r0, #2
   11eac:	bne	11f14 <sprintf@plt+0x688>
   11eb0:	mov	r2, sp
   11eb4:	mov	r0, r1
   11eb8:	mov	r1, r2
   11ebc:	mov	r2, #53	; 0x35
   11ec0:	bl	117a8 <rb_inet_ntop_sock@plt>
   11ec4:	b	11f14 <sprintf@plt+0x688>
   11ec8:	ldrh	r0, [r1, #4]!
   11ecc:	cmp	r0, #10
   11ed0:	bne	11f14 <sprintf@plt+0x688>
   11ed4:	mov	r5, sp
   11ed8:	mov	r0, r1
   11edc:	mov	r2, #53	; 0x35
   11ee0:	mov	r1, r5
   11ee4:	bl	117a8 <rb_inet_ntop_sock@plt>
   11ee8:	ldrb	r0, [sp]
   11eec:	cmp	r0, #58	; 0x3a
   11ef0:	bne	11f14 <sprintf@plt+0x688>
   11ef4:	mov	r0, r5
   11ef8:	bl	116a0 <strlen@plt>
   11efc:	mov	r2, r0
   11f00:	orr	r0, r5, #1
   11f04:	mov	r1, r5
   11f08:	bl	117cc <memmove@plt>
   11f0c:	mov	r0, #48	; 0x30
   11f10:	strb	r0, [sp]
   11f14:	ldr	r5, [r4, #152]	; 0x98
   11f18:	cmp	r5, #0
   11f1c:	beq	11f3c <sprintf@plt+0x6b0>
   11f20:	ldrb	r0, [sp]
   11f24:	ldr	r2, [r4, #8]
   11f28:	ldr	r3, [r4, #156]	; 0x9c
   11f2c:	subs	r1, r0, #42	; 0x2a
   11f30:	mov	r0, sp
   11f34:	movwne	r1, #1
   11f38:	blx	r5
   11f3c:	mov	r0, r4
   11f40:	bl	1164c <free@plt>
   11f44:	sub	sp, fp, #8
   11f48:	pop	{r4, r5, fp, pc}
   11f4c:	ldr	r1, [pc, #40]	; 11f7c <sprintf@plt+0x6f0>
   11f50:	mov	r0, #67	; 0x43
   11f54:	add	r1, pc, r1
   11f58:	bl	124e8 <sprintf@plt+0xc5c>
   11f5c:	mov	r0, #2
   11f60:	bl	11874 <exit@plt>
   11f64:	ldr	r1, [pc, #20]	; 11f80 <sprintf@plt+0x6f4>
   11f68:	mov	r0, #67	; 0x43
   11f6c:	add	r1, pc, r1
   11f70:	bl	124e8 <sprintf@plt+0xc5c>
   11f74:	mov	r0, #2
   11f78:	bl	11874 <exit@plt>
   11f7c:	andeq	r7, r0, sp, lsl #1
   11f80:	andeq	r7, r0, r1, lsr #1
   11f84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f88:	add	fp, sp, #24
   11f8c:	mov	r6, r1
   11f90:	mov	r5, r0
   11f94:	mov	r0, #1
   11f98:	mov	r1, #160	; 0xa0
   11f9c:	mov	r8, r2
   11fa0:	bl	115b0 <calloc@plt>
   11fa4:	cmp	r0, #0
   11fa8:	beq	12044 <sprintf@plt+0x7b8>
   11fac:	add	r7, r0, #12
   11fb0:	mov	r4, r0
   11fb4:	mov	r0, r5
   11fb8:	mov	r1, r7
   11fbc:	bl	11694 <rb_inet_pton_sock@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fe4 <sprintf@plt+0x758>
   11fc8:	ldrh	r0, [r7]
   11fcc:	cmp	r0, #2
   11fd0:	beq	11ff8 <sprintf@plt+0x76c>
   11fd4:	cmp	r0, #10
   11fd8:	bne	11fe4 <sprintf@plt+0x758>
   11fdc:	mov	r0, #83	; 0x53
   11fe0:	b	11ffc <sprintf@plt+0x770>
   11fe4:	mov	r0, r4
   11fe8:	bl	1164c <free@plt>
   11fec:	mov	r4, #0
   11ff0:	mov	r0, r4
   11ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ff8:	mov	r0, #82	; 0x52
   11ffc:	str	r0, [r4, #8]
   12000:	ldr	r0, [pc, #64]	; 12048 <sprintf@plt+0x7bc>
   12004:	ldr	r0, [pc, r0]
   12008:	ldrd	r2, [r0]
   1200c:	adds	r1, r2, #1
   12010:	adc	r5, r3, #0
   12014:	stm	r0, {r1, r5}
   12018:	add	r0, r4, #144	; 0x90
   1201c:	mov	r1, r4
   12020:	stm	r0, {r2, r3, r6, r8}
   12024:	ldr	r0, [pc, #32]	; 1204c <sprintf@plt+0x7c0>
   12028:	add	r0, pc, r0
   1202c:	str	r0, [r4, #4]
   12030:	mov	r0, r7
   12034:	str	r4, [r4]
   12038:	bl	13928 <sprintf@plt+0x209c>
   1203c:	mov	r0, r4
   12040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12044:	bl	11754 <rb_outofmemory@plt>
   12048:	muleq	r1, r4, r1
   1204c:	andeq	r0, r0, r0, lsr #32
   12050:	push	{r4, r5, r6, sl, fp, lr}
   12054:	add	fp, sp, #16
   12058:	cmp	r0, #0
   1205c:	beq	120ec <sprintf@plt+0x860>
   12060:	mov	r6, r1
   12064:	mov	r4, r0
   12068:	mov	r5, #0
   1206c:	cmp	r1, #0
   12070:	beq	120b8 <sprintf@plt+0x82c>
   12074:	ldr	r2, [r4, #8]
   12078:	cmp	r2, #83	; 0x53
   1207c:	beq	1209c <sprintf@plt+0x810>
   12080:	cmp	r2, #82	; 0x52
   12084:	bne	12104 <sprintf@plt+0x878>
   12088:	ldr	r0, [r6, #8]
   1208c:	ldr	r1, [r4, #16]
   12090:	cmp	r1, r0
   12094:	ldreq	r5, [r6]
   12098:	b	120b8 <sprintf@plt+0x82c>
   1209c:	add	r0, r4, #20
   120a0:	add	r1, r6, #12
   120a4:	mov	r2, #16
   120a8:	bl	11514 <memcmp@plt>
   120ac:	cmp	r0, #0
   120b0:	bne	120b8 <sprintf@plt+0x82c>
   120b4:	ldr	r5, [r6]
   120b8:	ldr	r6, [r4, #152]	; 0x98
   120bc:	cmp	r6, #0
   120c0:	beq	120e0 <sprintf@plt+0x854>
   120c4:	ldr	r2, [r4, #8]
   120c8:	ldr	r3, [r4, #156]	; 0x9c
   120cc:	cmp	r5, #0
   120d0:	mov	r1, r5
   120d4:	mov	r0, r5
   120d8:	movwne	r1, #1
   120dc:	blx	r6
   120e0:	mov	r0, r4
   120e4:	pop	{r4, r5, r6, sl, fp, lr}
   120e8:	b	1164c <free@plt>
   120ec:	ldr	r1, [pc, #40]	; 1211c <sprintf@plt+0x890>
   120f0:	mov	r0, #67	; 0x43
   120f4:	add	r1, pc, r1
   120f8:	bl	124e8 <sprintf@plt+0xc5c>
   120fc:	mov	r0, #2
   12100:	bl	11874 <exit@plt>
   12104:	ldr	r1, [pc, #20]	; 12120 <sprintf@plt+0x894>
   12108:	mov	r0, #67	; 0x43
   1210c:	add	r1, pc, r1
   12110:	bl	124e8 <sprintf@plt+0xc5c>
   12114:	mov	r0, #2
   12118:	bl	11874 <exit@plt>
   1211c:	andeq	r6, r0, ip, asr #30
   12120:	andeq	r6, r0, r6, ror #30
   12124:	mov	r1, #0
   12128:	str	r1, [r0, #152]	; 0x98
   1212c:	str	r1, [r0, #156]	; 0x9c
   12130:	bx	lr
   12134:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   12138:	add	fp, sp, #24
   1213c:	ldr	r6, [r1, #4]
   12140:	mov	r5, r1
   12144:	mov	r0, r6
   12148:	bl	116a0 <strlen@plt>
   1214c:	add	r0, r0, #1
   12150:	bl	11784 <malloc@plt>
   12154:	cmp	r0, #0
   12158:	beq	1224c <sprintf@plt+0x9c0>
   1215c:	mov	r1, r6
   12160:	mov	r4, r0
   12164:	bl	11700 <strcpy@plt>
   12168:	ldr	r0, [r5, #8]
   1216c:	ldr	r5, [r5, #12]
   12170:	ldrb	r2, [r0]
   12174:	sub	r0, r2, #82	; 0x52
   12178:	cmp	r0, #2
   1217c:	bcc	12218 <sprintf@plt+0x98c>
   12180:	mov	r6, #0
   12184:	cmp	r2, #52	; 0x34
   12188:	beq	12198 <sprintf@plt+0x90c>
   1218c:	cmp	r2, #54	; 0x36
   12190:	bne	12250 <sprintf@plt+0x9c4>
   12194:	mov	r6, #8
   12198:	mov	r0, #1
   1219c:	mov	r1, #160	; 0xa0
   121a0:	bl	115b0 <calloc@plt>
   121a4:	cmp	r0, #0
   121a8:	beq	1224c <sprintf@plt+0x9c0>
   121ac:	mov	r1, r0
   121b0:	mov	r0, #54	; 0x36
   121b4:	cmp	r6, #0
   121b8:	movweq	r0, #52	; 0x34
   121bc:	str	r0, [r1, #8]
   121c0:	ldr	r0, [pc, #160]	; 12268 <sprintf@plt+0x9dc>
   121c4:	ldr	r0, [pc, r0]
   121c8:	ldrd	r2, [r0]
   121cc:	adds	r8, r2, #1
   121d0:	adc	r9, r3, #0
   121d4:	cmp	r6, #0
   121d8:	strd	r8, [r0]
   121dc:	ldr	r0, [pc, #136]	; 1226c <sprintf@plt+0x9e0>
   121e0:	str	r2, [r1, #144]	; 0x90
   121e4:	str	r3, [r1, #148]	; 0x94
   121e8:	mov	r2, #28
   121ec:	movweq	r2, #1
   121f0:	add	r0, pc, r0
   121f4:	str	r0, [r1, #152]	; 0x98
   121f8:	str	r4, [r1, #156]	; 0x9c
   121fc:	ldr	r0, [pc, #108]	; 12270 <sprintf@plt+0x9e4>
   12200:	add	r0, pc, r0
   12204:	str	r0, [r1, #4]
   12208:	str	r1, [r1]
   1220c:	mov	r0, r5
   12210:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   12214:	b	13838 <sprintf@plt+0x1fac>
   12218:	ldr	r1, [pc, #84]	; 12274 <sprintf@plt+0x9e8>
   1221c:	mov	r0, r5
   12220:	mov	r2, r4
   12224:	add	r1, pc, r1
   12228:	bl	11f84 <sprintf@plt+0x6f8>
   1222c:	cmp	r0, #0
   12230:	popne	{r4, r5, r6, r8, r9, sl, fp, pc}
   12234:	ldr	r1, [pc, #60]	; 12278 <sprintf@plt+0x9ec>
   12238:	mov	r0, #67	; 0x43
   1223c:	add	r1, pc, r1
   12240:	bl	124e8 <sprintf@plt+0xc5c>
   12244:	mov	r0, #2
   12248:	bl	11874 <exit@plt>
   1224c:	bl	11754 <rb_outofmemory@plt>
   12250:	ldr	r1, [pc, #36]	; 1227c <sprintf@plt+0x9f0>
   12254:	mov	r0, #67	; 0x43
   12258:	add	r1, pc, r1
   1225c:	bl	124e8 <sprintf@plt+0xc5c>
   12260:	mov	r0, #2
   12264:	bl	11874 <exit@plt>
   12268:	ldrdeq	r7, [r1], -r4
   1226c:	andeq	r0, r0, r8, lsl #1
   12270:			; <UNDEFINED> instruction: 0xfffffc38
   12274:	andeq	r0, r0, r4, asr r0
   12278:	andeq	r6, r0, pc, ror #28
   1227c:	andeq	r6, r0, r9, lsl #26
   12280:	push	{r4, sl, fp, lr}
   12284:	add	fp, sp, #8
   12288:	sub	sp, sp, #8
   1228c:	cmp	r2, #0
   12290:	movne	r4, r3
   12294:	cmpne	r3, #0
   12298:	bne	122b4 <sprintf@plt+0xa28>
   1229c:	ldr	r1, [pc, #108]	; 12310 <sprintf@plt+0xa84>
   122a0:	mov	r0, #67	; 0x43
   122a4:	add	r1, pc, r1
   122a8:	bl	124e8 <sprintf@plt+0xc5c>
   122ac:	mov	r0, #2
   122b0:	bl	11874 <exit@plt>
   122b4:	mov	r3, r2
   122b8:	ldr	r2, [pc, #68]	; 12304 <sprintf@plt+0xa78>
   122bc:	cmp	r0, #0
   122c0:	cmpne	r1, #0
   122c4:	ldr	r2, [pc, r2]
   122c8:	ldr	r2, [r2]
   122cc:	bne	122dc <sprintf@plt+0xa50>
   122d0:	ldr	r1, [pc, #48]	; 12308 <sprintf@plt+0xa7c>
   122d4:	add	r1, pc, r1
   122d8:	b	122e8 <sprintf@plt+0xa5c>
   122dc:	str	r0, [sp]
   122e0:	ldr	r1, [pc, #36]	; 1230c <sprintf@plt+0xa80>
   122e4:	add	r1, pc, r1
   122e8:	mov	r0, r2
   122ec:	mov	r2, r4
   122f0:	bl	117e4 <rb_helper_write@plt>
   122f4:	mov	r0, r4
   122f8:	sub	sp, fp, #8
   122fc:	pop	{r4, sl, fp, lr}
   12300:	b	1164c <free@plt>
   12304:	andeq	r7, r1, ip, asr #29
   12308:	andeq	r6, r0, r2, lsl #28
   1230c:	strdeq	r6, [r0], -lr
   12310:	andeq	r6, r0, r7, lsl #28
   12314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12318:	add	fp, sp, #28
   1231c:	sub	sp, sp, #612	; 0x264
   12320:	mov	r5, r0
   12324:	ldr	r0, [pc, #288]	; 1244c <sprintf@plt+0xbc0>
   12328:	mov	r4, r1
   1232c:	ldr	r0, [pc, r0]
   12330:	ldr	r0, [r0]
   12334:	cmp	r0, #0
   12338:	beq	12428 <sprintf@plt+0xb9c>
   1233c:	cmp	r0, #1
   12340:	blt	123e0 <sprintf@plt+0xb54>
   12344:	str	r5, [sp, #4]
   12348:	str	r4, [sp, #8]
   1234c:	mov	r9, #0
   12350:	add	r7, sp, #15
   12354:	add	r8, sp, #68	; 0x44
   12358:	mov	sl, #0
   1235c:	ldr	r6, [pc, #236]	; 12450 <sprintf@plt+0xbc4>
   12360:	ldr	r6, [pc, r6]
   12364:	ldr	r4, [pc, #232]	; 12454 <sprintf@plt+0xbc8>
   12368:	add	r4, pc, r4
   1236c:	mov	r0, r6
   12370:	mov	r1, r7
   12374:	mov	r2, #53	; 0x35
   12378:	bl	117a8 <rb_inet_ntop_sock@plt>
   1237c:	ldrb	r0, [sp, #15]
   12380:	cmp	r0, #0
   12384:	beq	12400 <sprintf@plt+0xb74>
   12388:	mov	r0, r7
   1238c:	bl	116a0 <strlen@plt>
   12390:	mov	r5, r0
   12394:	add	r0, r8, r9
   12398:	rsb	r1, r9, #540	; 0x21c
   1239c:	mov	r2, r4
   123a0:	mov	r3, r7
   123a4:	bl	11814 <snprintf@plt>
   123a8:	ldr	r1, [pc, #184]	; 12468 <sprintf@plt+0xbdc>
   123ac:	add	r0, r9, r5
   123b0:	add	sl, sl, #1
   123b4:	add	r6, r6, #128	; 0x80
   123b8:	add	r9, r0, #1
   123bc:	ldr	r1, [pc, r1]
   123c0:	ldr	r1, [r1]
   123c4:	cmp	sl, r1
   123c8:	blt	1236c <sprintf@plt+0xae0>
   123cc:	ldr	r4, [sp, #8]
   123d0:	ldr	r5, [sp, #4]
   123d4:	cmp	r9, #0
   123d8:	movne	r1, #0
   123dc:	strbne	r1, [r8, r0]
   123e0:	ldr	r2, [pc, #132]	; 1246c <sprintf@plt+0xbe0>
   123e4:	add	r3, sp, #68	; 0x44
   123e8:	mov	r0, r5
   123ec:	mov	r1, r4
   123f0:	add	r2, pc, r2
   123f4:	bl	1255c <sprintf@plt+0xcd0>
   123f8:	sub	sp, fp, #28
   123fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12400:	ldr	r1, [pc, #80]	; 12458 <sprintf@plt+0xbcc>
   12404:	mov	r0, #67	; 0x43
   12408:	add	r1, pc, r1
   1240c:	bl	124e8 <sprintf@plt+0xc5c>
   12410:	ldr	r2, [pc, #68]	; 1245c <sprintf@plt+0xbd0>
   12414:	ldmib	sp, {r0, r1}
   12418:	add	r2, pc, r2
   1241c:	bl	125cc <sprintf@plt+0xd40>
   12420:	mov	r0, #2
   12424:	bl	11874 <exit@plt>
   12428:	ldr	r1, [pc, #48]	; 12460 <sprintf@plt+0xbd4>
   1242c:	mov	r0, #67	; 0x43
   12430:	add	r1, pc, r1
   12434:	bl	124e8 <sprintf@plt+0xc5c>
   12438:	ldr	r2, [pc, #36]	; 12464 <sprintf@plt+0xbd8>
   1243c:	mov	r0, r5
   12440:	mov	r1, r4
   12444:	add	r2, pc, r2
   12448:	b	1241c <sprintf@plt+0xb90>
   1244c:	andeq	r7, r1, ip, lsr lr
   12450:	andeq	r7, r1, r4, lsl lr
   12454:	andeq	r6, r0, r5, ror ip
   12458:	andeq	r6, r0, lr, lsr #23
   1245c:			; <UNDEFINED> instruction: 0x00006bb3
   12460:	andeq	r6, r0, r2, ror #22
   12464:	andeq	r6, r0, r4, ror #22
   12468:	andeq	r7, r1, ip, lsr #27
   1246c:	andeq	r7, r0, sp, asr #19
   12470:	b	1372c <sprintf@plt+0x1ea0>
   12474:	sub	sp, sp, #8
   12478:	push	{r4, r5, r6, r7, fp, lr}
   1247c:	add	fp, sp, #16
   12480:	sub	sp, sp, #520	; 0x208
   12484:	mov	ip, r1
   12488:	add	r5, sp, #8
   1248c:	mov	r4, r0
   12490:	str	r3, [fp, #12]
   12494:	str	r2, [fp, #8]
   12498:	add	r3, fp, #8
   1249c:	mov	r1, #512	; 0x200
   124a0:	mov	r0, r5
   124a4:	mov	r2, ip
   124a8:	str	r3, [sp, #4]
   124ac:	bl	1155c <vsnprintf@plt>
   124b0:	ldr	r0, [pc, #40]	; 124e0 <sprintf@plt+0xc54>
   124b4:	mov	r2, r4
   124b8:	mov	r3, r5
   124bc:	ldr	r0, [pc, r0]
   124c0:	ldr	r0, [r0]
   124c4:	ldr	r1, [pc, #24]	; 124e4 <sprintf@plt+0xc58>
   124c8:	add	r1, pc, r1
   124cc:	bl	117e4 <rb_helper_write@plt>
   124d0:	sub	sp, fp, #16
   124d4:	pop	{r4, r5, r6, r7, fp, lr}
   124d8:	add	sp, sp, #8
   124dc:	bx	lr
   124e0:	ldrdeq	r7, [r1], -r4
   124e4:	andeq	r6, r0, r7, lsr #24
   124e8:	sub	sp, sp, #8
   124ec:	push	{r4, r5, r6, r7, fp, lr}
   124f0:	add	fp, sp, #16
   124f4:	sub	sp, sp, #520	; 0x208
   124f8:	mov	ip, r1
   124fc:	add	r5, sp, #8
   12500:	mov	r4, r0
   12504:	str	r3, [fp, #12]
   12508:	str	r2, [fp, #8]
   1250c:	add	r3, fp, #8
   12510:	mov	r1, #512	; 0x200
   12514:	mov	r0, r5
   12518:	mov	r2, ip
   1251c:	str	r3, [sp, #4]
   12520:	bl	1155c <vsnprintf@plt>
   12524:	ldr	r0, [pc, #40]	; 12554 <sprintf@plt+0xcc8>
   12528:	mov	r2, r4
   1252c:	mov	r3, r5
   12530:	ldr	r0, [pc, r0]
   12534:	ldr	r0, [r0]
   12538:	ldr	r1, [pc, #24]	; 12558 <sprintf@plt+0xccc>
   1253c:	add	r1, pc, r1
   12540:	bl	117e4 <rb_helper_write@plt>
   12544:	sub	sp, fp, #16
   12548:	pop	{r4, r5, r6, r7, fp, lr}
   1254c:	add	sp, sp, #8
   12550:	bx	lr
   12554:	andeq	r7, r1, r0, ror #24
   12558:			; <UNDEFINED> instruction: 0x00006bbc
   1255c:	sub	sp, sp, #4
   12560:	push	{r4, r5, r6, sl, fp, lr}
   12564:	add	fp, sp, #16
   12568:	sub	sp, sp, #524	; 0x20c
   1256c:	add	r6, sp, #12
   12570:	mov	r4, r1
   12574:	mov	r5, r0
   12578:	str	r3, [fp, #8]
   1257c:	add	r3, fp, #8
   12580:	mov	r1, #512	; 0x200
   12584:	mov	r0, r6
   12588:	str	r3, [sp, #8]
   1258c:	bl	1155c <vsnprintf@plt>
   12590:	ldr	r0, [pc, #44]	; 125c4 <sprintf@plt+0xd38>
   12594:	mov	r2, r5
   12598:	mov	r3, r4
   1259c:	ldr	r0, [pc, r0]
   125a0:	str	r6, [sp]
   125a4:	ldr	r0, [r0]
   125a8:	ldr	r1, [pc, #24]	; 125c8 <sprintf@plt+0xd3c>
   125ac:	add	r1, pc, r1
   125b0:	bl	117e4 <rb_helper_write@plt>
   125b4:	sub	sp, fp, #16
   125b8:	pop	{r4, r5, r6, sl, fp, lr}
   125bc:	add	sp, sp, #4
   125c0:	bx	lr
   125c4:	strdeq	r7, [r1], -r4
   125c8:	andeq	r6, r0, r5, asr fp
   125cc:	sub	sp, sp, #4
   125d0:	push	{r4, r5, r6, sl, fp, lr}
   125d4:	add	fp, sp, #16
   125d8:	sub	sp, sp, #524	; 0x20c
   125dc:	add	r6, sp, #12
   125e0:	mov	r4, r1
   125e4:	mov	r5, r0
   125e8:	str	r3, [fp, #8]
   125ec:	add	r3, fp, #8
   125f0:	mov	r1, #512	; 0x200
   125f4:	mov	r0, r6
   125f8:	str	r3, [sp, #8]
   125fc:	bl	1155c <vsnprintf@plt>
   12600:	ldr	r0, [pc, #44]	; 12634 <sprintf@plt+0xda8>
   12604:	mov	r2, r5
   12608:	mov	r3, r4
   1260c:	ldr	r0, [pc, r0]
   12610:	str	r6, [sp]
   12614:	ldr	r0, [r0]
   12618:	ldr	r1, [pc, #24]	; 12638 <sprintf@plt+0xdac>
   1261c:	add	r1, pc, r1
   12620:	bl	117e4 <rb_helper_write@plt>
   12624:	sub	sp, fp, #16
   12628:	pop	{r4, r5, r6, sl, fp, lr}
   1262c:	add	sp, sp, #4
   12630:	bx	lr
   12634:	andeq	r7, r1, r4, lsl #23
   12638:	strdeq	r6, [r0], -r0
   1263c:	mov	r2, r0
   12640:	ldr	r0, [pc, #20]	; 1265c <sprintf@plt+0xdd0>
   12644:	mov	r3, r1
   12648:	ldr	r0, [pc, r0]
   1264c:	ldr	r0, [r0]
   12650:	ldr	r1, [pc, #8]	; 12660 <sprintf@plt+0xdd4>
   12654:	add	r1, pc, r1
   12658:	b	117e4 <rb_helper_write@plt>
   1265c:	andeq	r7, r1, r8, asr #22
   12660:	andeq	r6, r0, r3, asr #21
   12664:	push	{fp, lr}
   12668:	mov	fp, sp
   1266c:	ldr	r0, [pc, #116]	; 126e8 <sprintf@plt+0xe5c>
   12670:	ldr	r1, [pc, #116]	; 126ec <sprintf@plt+0xe60>
   12674:	add	r0, pc, r0
   12678:	add	r1, pc, r1
   1267c:	bl	117c0 <rb_dictionary_create@plt>
   12680:	ldr	r1, [pc, #104]	; 126f0 <sprintf@plt+0xe64>
   12684:	mov	r2, #0
   12688:	mov	r3, #1
   1268c:	ldr	r1, [pc, r1]
   12690:	str	r0, [r1]
   12694:	ldr	r0, [pc, #88]	; 126f4 <sprintf@plt+0xe68>
   12698:	ldr	r1, [pc, #88]	; 126f8 <sprintf@plt+0xe6c>
   1269c:	add	r0, pc, r0
   126a0:	add	r1, pc, r1
   126a4:	bl	114d8 <rb_event_addish@plt>
   126a8:	ldr	r1, [pc, #76]	; 126fc <sprintf@plt+0xe70>
   126ac:	add	r1, pc, r1
   126b0:	str	r0, [r1]
   126b4:	ldr	r0, [pc, #68]	; 12700 <sprintf@plt+0xe74>
   126b8:	ldr	r0, [pc, r0]
   126bc:	bl	12838 <sprintf@plt+0xfac>
   126c0:	ldr	r0, [pc, #60]	; 12704 <sprintf@plt+0xe78>
   126c4:	ldr	r0, [pc, r0]
   126c8:	bl	12838 <sprintf@plt+0xfac>
   126cc:	ldr	r0, [pc, #52]	; 12708 <sprintf@plt+0xe7c>
   126d0:	ldr	r0, [pc, r0]
   126d4:	bl	12838 <sprintf@plt+0xfac>
   126d8:	ldr	r0, [pc, #44]	; 1270c <sprintf@plt+0xe80>
   126dc:	ldr	r0, [pc, r0]
   126e0:	pop	{fp, lr}
   126e4:	b	12838 <sprintf@plt+0xfac>
   126e8:	andeq	r6, r0, fp, lsr #21
   126ec:	muleq	r0, r0, r0
   126f0:	andeq	r7, r1, r8, asr #21
   126f4:	muleq	r0, r8, sl
   126f8:	andeq	r0, r0, r0, ror r0
   126fc:	andeq	ip, r1, ip, lsl r9
   12700:	andeq	r7, r1, ip, asr #21
   12704:			; <UNDEFINED> instruction: 0x00017abc
   12708:	muleq	r1, r4, sl
   1270c:	andeq	r7, r1, r4, lsl #21
   12710:	sub	r0, r1, r0
   12714:	bx	lr
   12718:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1271c:	add	fp, sp, #24
   12720:	sub	sp, sp, #8
   12724:	bl	116ac <rb_current_time@plt>
   12728:	ldr	r7, [pc, #256]	; 12830 <sprintf@plt+0xfa4>
   1272c:	mov	r4, r0
   12730:	mov	r5, sp
   12734:	mov	r1, r5
   12738:	ldr	r7, [pc, r7]
   1273c:	ldr	r0, [r7]
   12740:	bl	11688 <rb_dictionary_foreach_start@plt>
   12744:	ldr	r0, [r7]
   12748:	mov	r1, r5
   1274c:	bl	11598 <rb_dictionary_foreach_cur@plt>
   12750:	cmp	r0, #0
   12754:	beq	12828 <sprintf@plt+0xf9c>
   12758:	ldr	r8, [pc, #212]	; 12834 <sprintf@plt+0xfa8>
   1275c:	mov	r6, r0
   12760:	mov	r9, sp
   12764:	ldr	r8, [pc, r8]
   12768:	ldr	r0, [r6, #460]	; 0x1cc
   1276c:	add	r0, r0, #1
   12770:	str	r0, [r6, #460]	; 0x1cc
   12774:	ldr	r5, [r8]
   12778:	cmp	r5, #0
   1277c:	beq	127d4 <sprintf@plt+0xf48>
   12780:	ldr	r0, [r5]
   12784:	ldr	r1, [r6, #464]	; 0x1d0
   12788:	ldr	r2, [r0, #12]
   1278c:	add	r1, r1, r2, lsl #4
   12790:	ldr	r2, [r1, #12]
   12794:	cmp	r2, #1
   12798:	bne	127c4 <sprintf@plt+0xf38>
   1279c:	ldr	r1, [r1, #4]
   127a0:	cmp	r1, r4
   127a4:	bge	127c4 <sprintf@plt+0xf38>
   127a8:	cmp	r1, #1
   127ac:	blt	127c4 <sprintf@plt+0xf38>
   127b0:	ldr	r1, [r0, #40]	; 0x28
   127b4:	cmp	r1, #0
   127b8:	beq	127c4 <sprintf@plt+0xf38>
   127bc:	mov	r0, r6
   127c0:	blx	r1
   127c4:	ldr	r5, [r5, #8]
   127c8:	cmp	r5, #0
   127cc:	bne	12780 <sprintf@plt+0xef4>
   127d0:	ldr	r0, [r6, #460]	; 0x1cc
   127d4:	subs	r0, r0, #1
   127d8:	str	r0, [r6, #460]	; 0x1cc
   127dc:	bne	12804 <sprintf@plt+0xf78>
   127e0:	ldr	r1, [r6]
   127e4:	ldr	r0, [r7]
   127e8:	bl	116b8 <rb_dictionary_delete@plt>
   127ec:	ldr	r0, [r6, #464]	; 0x1d0
   127f0:	cmp	r0, #0
   127f4:	beq	127fc <sprintf@plt+0xf70>
   127f8:	bl	1164c <free@plt>
   127fc:	mov	r0, r6
   12800:	bl	1164c <free@plt>
   12804:	ldr	r0, [r7]
   12808:	mov	r1, r9
   1280c:	bl	11640 <rb_dictionary_foreach_next@plt>
   12810:	ldr	r0, [r7]
   12814:	mov	r1, r9
   12818:	bl	11598 <rb_dictionary_foreach_cur@plt>
   1281c:	mov	r6, r0
   12820:	cmp	r0, #0
   12824:	bne	12768 <sprintf@plt+0xedc>
   12828:	sub	sp, fp, #24
   1282c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12830:	andeq	r7, r1, ip, lsl sl
   12834:	andeq	r7, r1, r8, lsr sl
   12838:	push	{r4, r5, r6, sl, fp, lr}
   1283c:	add	fp, sp, #16
   12840:	ldr	r6, [pc, #384]	; 129c8 <sprintf@plt+0x113c>
   12844:	mov	r4, r0
   12848:	add	r6, pc, r6
   1284c:	ldr	r2, [r6, #8]
   12850:	cmp	r2, #0
   12854:	beq	12944 <sprintf@plt+0x10b8>
   12858:	ldr	r0, [pc, #364]	; 129cc <sprintf@plt+0x1140>
   1285c:	ldr	r0, [pc, r0]
   12860:	ldr	r3, [r0]
   12864:	cmp	r0, #0
   12868:	str	r3, [r4, #12]
   1286c:	beq	129a8 <sprintf@plt+0x111c>
   12870:	ldr	r3, [r0, #8]
   12874:	ldr	r5, [r0, #4]
   12878:	mov	r1, r6
   1287c:	cmp	r3, #0
   12880:	streq	r5, [r6, #4]
   12884:	strne	r5, [r3, #4]
   12888:	ldrne	r5, [r0, #4]
   1288c:	cmp	r5, #0
   12890:	addne	r1, r5, #8
   12894:	cmp	r5, #0
   12898:	str	r3, [r1]
   1289c:	mov	r1, #0
   128a0:	str	r1, [r0, #4]
   128a4:	str	r1, [r0, #8]
   128a8:	sub	r1, r2, #1
   128ac:	moveq	r0, r3
   128b0:	str	r1, [r6, #8]
   128b4:	bl	116d0 <rb_free_rb_dlink_node@plt>
   128b8:	ldr	r5, [r4, #56]	; 0x38
   128bc:	cmp	r5, #0
   128c0:	ldrne	r1, [r5]
   128c4:	cmpne	r1, #0
   128c8:	beq	128ec <sprintf@plt+0x1060>
   128cc:	ldr	r6, [pc, #260]	; 129d8 <sprintf@plt+0x114c>
   128d0:	ldr	r6, [pc, r6]
   128d4:	ldr	r0, [r6]
   128d8:	mov	r2, r5
   128dc:	bl	1176c <rb_dictionary_add@plt>
   128e0:	ldr	r1, [r5, #12]!
   128e4:	cmp	r1, #0
   128e8:	bne	128d4 <sprintf@plt+0x1048>
   128ec:	ldrb	r0, [r4, #48]	; 0x30
   128f0:	cmp	r0, #0
   128f4:	ldrne	r1, [r4, #52]	; 0x34
   128f8:	ldrne	r2, [pc, #220]	; 129dc <sprintf@plt+0x1150>
   128fc:	ldrne	r2, [pc, r2]
   12900:	strne	r1, [r2, r0, lsl #2]
   12904:	ldr	r0, [r4, #24]
   12908:	cmp	r0, #0
   1290c:	beq	12914 <sprintf@plt+0x1088>
   12910:	blx	r0
   12914:	mov	r0, #0
   12918:	str	r0, [r4, #4]
   1291c:	str	r4, [r4]
   12920:	ldr	r0, [pc, #184]	; 129e0 <sprintf@plt+0x1154>
   12924:	ldr	r0, [pc, r0]
   12928:	ldr	r1, [r0]
   1292c:	cmp	r1, #0
   12930:	str	r1, [r4, #8]
   12934:	beq	1296c <sprintf@plt+0x10e0>
   12938:	add	r1, r1, #4
   1293c:	str	r4, [r1]
   12940:	b	1297c <sprintf@plt+0x10f0>
   12944:	ldr	r0, [pc, #132]	; 129d0 <sprintf@plt+0x1144>
   12948:	ldr	r0, [pc, r0]
   1294c:	cmp	r0, #32
   12950:	cmnne	r0, #1
   12954:	bne	12990 <sprintf@plt+0x1104>
   12958:	ldr	r1, [pc, #144]	; 129f0 <sprintf@plt+0x1164>
   1295c:	mov	r0, #87	; 0x57
   12960:	add	r1, pc, r1
   12964:	pop	{r4, r5, r6, sl, fp, lr}
   12968:	b	124e8 <sprintf@plt+0xc5c>
   1296c:	mov	r1, r0
   12970:	ldr	r2, [r1, #4]!
   12974:	cmp	r2, #0
   12978:	streq	r4, [r1]
   1297c:	str	r4, [r0]
   12980:	ldr	r1, [r0, #8]
   12984:	add	r1, r1, #1
   12988:	str	r1, [r0, #8]
   1298c:	pop	{r4, r5, r6, sl, fp, pc}
   12990:	ldr	r2, [pc, #60]	; 129d4 <sprintf@plt+0x1148>
   12994:	add	r1, r0, #1
   12998:	add	r2, pc, r2
   1299c:	str	r1, [r2]
   129a0:	str	r0, [r4, #12]
   129a4:	b	128b8 <sprintf@plt+0x102c>
   129a8:	ldr	r0, [pc, #52]	; 129e4 <sprintf@plt+0x1158>
   129ac:	ldr	r1, [pc, #52]	; 129e8 <sprintf@plt+0x115c>
   129b0:	ldr	r3, [pc, #52]	; 129ec <sprintf@plt+0x1160>
   129b4:	mov	r2, #235	; 0xeb
   129b8:	add	r0, pc, r0
   129bc:	add	r1, pc, r1
   129c0:	add	r3, pc, r3
   129c4:	bl	11610 <__assert_fail@plt>
   129c8:	andeq	ip, r1, r4, lsl #15
   129cc:	andeq	ip, r1, r0, ror r7
   129d0:	muleq	r1, r0, r6
   129d4:	andeq	ip, r1, r0, asr #12
   129d8:	andeq	r7, r1, ip, lsr #17
   129dc:	muleq	r1, r8, r8
   129e0:	andeq	r7, r1, r8, ror r8
   129e4:	andeq	r6, r0, r4, lsl #18
   129e8:	andeq	r6, r0, sl, lsl #18
   129ec:	andeq	r6, r0, r2, lsr #18
   129f0:	andeq	r6, r0, r6, lsr r8
   129f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129f8:	add	fp, sp, #24
   129fc:	sub	sp, sp, #8
   12a00:	ldr	r9, [pc, #336]	; 12b58 <sprintf@plt+0x12cc>
   12a04:	mov	r5, sp
   12a08:	mov	r1, r5
   12a0c:	ldr	r9, [pc, r9]
   12a10:	ldr	r0, [r9]
   12a14:	bl	11688 <rb_dictionary_foreach_start@plt>
   12a18:	ldr	r0, [r9]
   12a1c:	mov	r1, r5
   12a20:	bl	11598 <rb_dictionary_foreach_cur@plt>
   12a24:	cmp	r0, #0
   12a28:	beq	12abc <sprintf@plt+0x1230>
   12a2c:	ldr	r8, [pc, #296]	; 12b5c <sprintf@plt+0x12d0>
   12a30:	ldr	r5, [pc, #296]	; 12b60 <sprintf@plt+0x12d4>
   12a34:	mov	r7, r0
   12a38:	mov	r6, sp
   12a3c:	add	r8, pc, r8
   12a40:	add	r5, pc, r5
   12a44:	ldr	r0, [r7, #460]	; 0x1cc
   12a48:	mvn	r1, #0
   12a4c:	mov	r2, r8
   12a50:	mov	r3, r5
   12a54:	add	r0, r0, #1
   12a58:	str	r0, [r7, #460]	; 0x1cc
   12a5c:	mov	r0, r7
   12a60:	bl	12b6c <sprintf@plt+0x12e0>
   12a64:	ldr	r0, [r7, #460]	; 0x1cc
   12a68:	subs	r0, r0, #1
   12a6c:	str	r0, [r7, #460]	; 0x1cc
   12a70:	bne	12a98 <sprintf@plt+0x120c>
   12a74:	ldr	r1, [r7]
   12a78:	ldr	r0, [r9]
   12a7c:	bl	116b8 <rb_dictionary_delete@plt>
   12a80:	ldr	r0, [r7, #464]	; 0x1d0
   12a84:	cmp	r0, #0
   12a88:	beq	12a90 <sprintf@plt+0x1204>
   12a8c:	bl	1164c <free@plt>
   12a90:	mov	r0, r7
   12a94:	bl	1164c <free@plt>
   12a98:	ldr	r0, [r9]
   12a9c:	mov	r1, r6
   12aa0:	bl	11640 <rb_dictionary_foreach_next@plt>
   12aa4:	ldr	r0, [r9]
   12aa8:	mov	r1, r6
   12aac:	bl	11598 <rb_dictionary_foreach_cur@plt>
   12ab0:	mov	r7, r0
   12ab4:	cmp	r0, #0
   12ab8:	bne	12a44 <sprintf@plt+0x11b8>
   12abc:	ldr	r5, [pc, #160]	; 12b64 <sprintf@plt+0x12d8>
   12ac0:	ldr	r5, [pc, r5]
   12ac4:	ldr	r7, [r5]
   12ac8:	cmp	r7, #0
   12acc:	beq	12b34 <sprintf@plt+0x12a8>
   12ad0:	mov	r6, #0
   12ad4:	ldr	r0, [r7]
   12ad8:	ldr	r4, [r7, #8]
   12adc:	ldr	r0, [r0, #28]
   12ae0:	cmp	r0, #0
   12ae4:	beq	12aec <sprintf@plt+0x1260>
   12ae8:	blx	r0
   12aec:	ldr	r0, [r7, #8]
   12af0:	ldr	r1, [r7, #4]
   12af4:	mov	r2, r5
   12af8:	cmp	r0, #0
   12afc:	streq	r1, [r5, #4]
   12b00:	strne	r1, [r0, #4]
   12b04:	ldrne	r1, [r7, #4]
   12b08:	cmp	r1, #0
   12b0c:	addne	r2, r1, #8
   12b10:	cmp	r4, #0
   12b14:	str	r0, [r2]
   12b18:	str	r6, [r7, #4]
   12b1c:	str	r6, [r7, #8]
   12b20:	mov	r7, r4
   12b24:	ldr	r0, [r5, #8]
   12b28:	sub	r0, r0, #1
   12b2c:	str	r0, [r5, #8]
   12b30:	bne	12ad4 <sprintf@plt+0x1248>
   12b34:	ldr	r0, [r9]
   12b38:	mov	r1, #0
   12b3c:	mov	r2, #0
   12b40:	bl	1170c <rb_dictionary_destroy@plt>
   12b44:	ldr	r0, [pc, #28]	; 12b68 <sprintf@plt+0x12dc>
   12b48:	ldr	r0, [pc, r0]
   12b4c:	bl	1152c <rb_event_delete@plt>
   12b50:	sub	sp, fp, #24
   12b54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12b58:	andeq	r7, r1, r8, asr #14
   12b5c:	andeq	r6, r0, pc, lsl #14
   12b60:	andeq	r6, r0, r3, lsl r7
   12b64:	ldrdeq	r7, [r1], -ip
   12b68:	andeq	ip, r1, r0, lsl #9
   12b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b70:	add	fp, sp, #24
   12b74:	sub	sp, sp, #536	; 0x218
   12b78:	mov	r6, r3
   12b7c:	add	r8, sp, #24
   12b80:	mov	r7, r2
   12b84:	mov	r5, r1
   12b88:	mov	r4, r0
   12b8c:	add	r3, fp, #8
   12b90:	mov	r1, #512	; 0x200
   12b94:	mov	r0, r8
   12b98:	mov	r2, r6
   12b9c:	str	r3, [sp, #20]
   12ba0:	bl	1155c <vsnprintf@plt>
   12ba4:	ldr	r2, [r4]
   12ba8:	ldr	r0, [pc, #288]	; 12cd0 <sprintf@plt+0x1444>
   12bac:	cmn	r5, #1
   12bb0:	ldr	r0, [pc, r0]
   12bb4:	ldr	r0, [r0]
   12bb8:	beq	12c18 <sprintf@plt+0x138c>
   12bbc:	ldr	r1, [r4, #464]	; 0x1d0
   12bc0:	cmp	r7, #0
   12bc4:	add	r6, r4, #440	; 0x1b8
   12bc8:	ldr	r1, [r1, r5, lsl #4]
   12bcc:	ldrb	r3, [r1, #20]
   12bd0:	ldr	r1, [pc, #252]	; 12cd4 <sprintf@plt+0x1448>
   12bd4:	add	r1, pc, r1
   12bd8:	movne	r1, r7
   12bdc:	add	r7, r4, #376	; 0x178
   12be0:	stm	sp, {r6, r7}
   12be4:	str	r1, [sp, #8]
   12be8:	str	r8, [sp, #12]
   12bec:	ldr	r1, [pc, #228]	; 12cd8 <sprintf@plt+0x144c>
   12bf0:	add	r1, pc, r1
   12bf4:	bl	117e4 <rb_helper_write@plt>
   12bf8:	ldr	r0, [r4, #464]	; 0x1d0
   12bfc:	mov	r1, #2
   12c00:	add	r0, r0, r5, lsl #4
   12c04:	str	r1, [r0, #12]
   12c08:	ldr	r0, [r4, #456]	; 0x1c8
   12c0c:	sub	r0, r0, #1
   12c10:	str	r0, [r4, #456]	; 0x1c8
   12c14:	b	12c50 <sprintf@plt+0x13c4>
   12c18:	ldr	r1, [pc, #188]	; 12cdc <sprintf@plt+0x1450>
   12c1c:	cmp	r7, #0
   12c20:	add	r3, r4, #376	; 0x178
   12c24:	str	r8, [sp, #12]
   12c28:	str	r3, [sp, #4]
   12c2c:	mov	r3, #42	; 0x2a
   12c30:	add	r1, pc, r1
   12c34:	movne	r1, r7
   12c38:	add	r7, r4, #440	; 0x1b8
   12c3c:	str	r7, [sp]
   12c40:	str	r1, [sp, #8]
   12c44:	ldr	r1, [pc, #148]	; 12ce0 <sprintf@plt+0x1454>
   12c48:	add	r1, pc, r1
   12c4c:	bl	117e4 <rb_helper_write@plt>
   12c50:	ldrb	r0, [r4, #452]	; 0x1c4
   12c54:	cmp	r0, #0
   12c58:	bne	12cc8 <sprintf@plt+0x143c>
   12c5c:	mov	r0, #1
   12c60:	strb	r0, [r4, #452]	; 0x1c4
   12c64:	ldr	r0, [r4, #456]	; 0x1c8
   12c68:	cmp	r0, #0
   12c6c:	beq	12cc8 <sprintf@plt+0x143c>
   12c70:	ldr	r0, [pc, #108]	; 12ce4 <sprintf@plt+0x1458>
   12c74:	ldr	r0, [pc, r0]
   12c78:	ldr	r5, [r0]
   12c7c:	cmp	r5, #0
   12c80:	bne	12c94 <sprintf@plt+0x1408>
   12c84:	b	12cc8 <sprintf@plt+0x143c>
   12c88:	ldr	r5, [r5, #8]
   12c8c:	cmp	r5, #0
   12c90:	beq	12cc8 <sprintf@plt+0x143c>
   12c94:	ldr	r0, [r5]
   12c98:	ldr	r1, [r0, #36]	; 0x24
   12c9c:	cmp	r1, #0
   12ca0:	beq	12c88 <sprintf@plt+0x13fc>
   12ca4:	ldr	r0, [r0, #12]
   12ca8:	ldr	r2, [r4, #464]	; 0x1d0
   12cac:	add	r0, r2, r0, lsl #4
   12cb0:	ldr	r0, [r0, #12]
   12cb4:	cmp	r0, #1
   12cb8:	bne	12c88 <sprintf@plt+0x13fc>
   12cbc:	mov	r0, r4
   12cc0:	blx	r1
   12cc4:	b	12c88 <sprintf@plt+0x13fc>
   12cc8:	sub	sp, fp, #24
   12ccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cd0:	andeq	r7, r1, r0, ror #11
   12cd4:	andeq	r6, r0, ip, lsl #10
   12cd8:	ldrdeq	r6, [r0], -r4
   12cdc:			; <UNDEFINED> instruction: 0x000064b0
   12ce0:	andeq	r6, r0, ip, ror r5
   12ce4:	andeq	r7, r1, r8, lsr #10
   12ce8:	push	{r4, r5, r6, sl, fp, lr}
   12cec:	add	fp, sp, #16
   12cf0:	mov	r4, r0
   12cf4:	ldr	r0, [r0, #56]	; 0x38
   12cf8:	cmp	r0, #0
   12cfc:	ldrne	r1, [r0]
   12d00:	cmpne	r1, #0
   12d04:	beq	12d28 <sprintf@plt+0x149c>
   12d08:	ldr	r6, [pc, #332]	; 12e5c <sprintf@plt+0x15d0>
   12d0c:	add	r5, r0, #12
   12d10:	ldr	r6, [pc, r6]
   12d14:	ldr	r0, [r6]
   12d18:	bl	116b8 <rb_dictionary_delete@plt>
   12d1c:	ldr	r1, [r5], #12
   12d20:	cmp	r1, #0
   12d24:	bne	12d14 <sprintf@plt+0x1488>
   12d28:	ldrb	r0, [r4, #48]	; 0x30
   12d2c:	cmp	r0, #0
   12d30:	ldrne	r1, [pc, #296]	; 12e60 <sprintf@plt+0x15d4>
   12d34:	movne	r2, #0
   12d38:	ldrne	r1, [pc, r1]
   12d3c:	strne	r2, [r1, r0, lsl #2]
   12d40:	ldr	r0, [r4, #28]
   12d44:	cmp	r0, #0
   12d48:	beq	12d50 <sprintf@plt+0x14c4>
   12d4c:	blx	r0
   12d50:	ldr	r0, [r4, #8]
   12d54:	ldr	r1, [r4, #4]
   12d58:	cmp	r0, #0
   12d5c:	beq	12d6c <sprintf@plt+0x14e0>
   12d60:	str	r1, [r0, #4]
   12d64:	ldr	r1, [r4, #4]
   12d68:	b	12d78 <sprintf@plt+0x14ec>
   12d6c:	ldr	r2, [pc, #240]	; 12e64 <sprintf@plt+0x15d8>
   12d70:	ldr	r2, [pc, r2]
   12d74:	str	r1, [r2, #4]
   12d78:	ldr	r2, [pc, #232]	; 12e68 <sprintf@plt+0x15dc>
   12d7c:	cmp	r1, #0
   12d80:	ldr	r2, [pc, r2]
   12d84:	mov	r3, r2
   12d88:	addne	r3, r1, #8
   12d8c:	str	r0, [r3]
   12d90:	mov	r0, #0
   12d94:	str	r0, [r4, #4]
   12d98:	str	r0, [r4, #8]
   12d9c:	ldr	r0, [r2, #8]
   12da0:	sub	r0, r0, #1
   12da4:	str	r0, [r2, #8]
   12da8:	ldr	r4, [r4, #12]
   12dac:	bl	11808 <rb_make_rb_dlink_node@plt>
   12db0:	cmp	r4, #0
   12db4:	beq	12e1c <sprintf@plt+0x1590>
   12db8:	cmp	r0, #0
   12dbc:	beq	12e3c <sprintf@plt+0x15b0>
   12dc0:	mov	r1, #0
   12dc4:	str	r1, [r0, #4]
   12dc8:	str	r4, [r0]
   12dcc:	ldr	r1, [pc, #152]	; 12e6c <sprintf@plt+0x15e0>
   12dd0:	ldr	r1, [pc, r1]
   12dd4:	cmp	r1, #0
   12dd8:	str	r1, [r0, #8]
   12ddc:	beq	12dec <sprintf@plt+0x1560>
   12de0:	add	r1, r1, #4
   12de4:	str	r0, [r1]
   12de8:	b	12e00 <sprintf@plt+0x1574>
   12dec:	ldr	r1, [pc, #124]	; 12e70 <sprintf@plt+0x15e4>
   12df0:	add	r1, pc, r1
   12df4:	ldr	r2, [r1, #4]!
   12df8:	cmp	r2, #0
   12dfc:	streq	r0, [r1]
   12e00:	ldr	r1, [pc, #108]	; 12e74 <sprintf@plt+0x15e8>
   12e04:	add	r1, pc, r1
   12e08:	str	r0, [r1]
   12e0c:	ldr	r0, [r1, #8]
   12e10:	add	r0, r0, #1
   12e14:	str	r0, [r1, #8]
   12e18:	pop	{r4, r5, r6, sl, fp, pc}
   12e1c:	ldr	r0, [pc, #84]	; 12e78 <sprintf@plt+0x15ec>
   12e20:	ldr	r1, [pc, #84]	; 12e7c <sprintf@plt+0x15f0>
   12e24:	ldr	r3, [pc, #84]	; 12e80 <sprintf@plt+0x15f4>
   12e28:	mov	r2, #143	; 0x8f
   12e2c:	add	r0, pc, r0
   12e30:	add	r1, pc, r1
   12e34:	add	r3, pc, r3
   12e38:	bl	11610 <__assert_fail@plt>
   12e3c:	ldr	r0, [pc, #64]	; 12e84 <sprintf@plt+0x15f8>
   12e40:	ldr	r1, [pc, #64]	; 12e88 <sprintf@plt+0x15fc>
   12e44:	ldr	r3, [pc, #64]	; 12e8c <sprintf@plt+0x1600>
   12e48:	mov	r2, #144	; 0x90
   12e4c:	add	r0, pc, r0
   12e50:	add	r1, pc, r1
   12e54:	add	r3, pc, r3
   12e58:	bl	11610 <__assert_fail@plt>
   12e5c:	andeq	r7, r1, ip, ror #8
   12e60:	andeq	r7, r1, ip, asr r4
   12e64:	andeq	r7, r1, ip, lsr #8
   12e68:	andeq	r7, r1, ip, lsl r4
   12e6c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12e70:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12e74:	andeq	ip, r1, r8, asr #3
   12e78:	andeq	r6, r0, ip, ror #9
   12e7c:	muleq	r0, r6, r4
   12e80:	strdeq	r6, [r0], -r1
   12e84:	andeq	r6, r0, r0, ror r4
   12e88:	andeq	r6, r0, r6, ror r4
   12e8c:	ldrdeq	r6, [r0], -r1
   12e90:	push	{r4, sl, fp, lr}
   12e94:	add	fp, sp, #8
   12e98:	mov	r4, r0
   12e9c:	ldr	r1, [r0]
   12ea0:	ldr	r0, [pc, #36]	; 12ecc <sprintf@plt+0x1640>
   12ea4:	ldr	r0, [pc, r0]
   12ea8:	ldr	r0, [r0]
   12eac:	bl	116b8 <rb_dictionary_delete@plt>
   12eb0:	ldr	r0, [r4, #464]	; 0x1d0
   12eb4:	cmp	r0, #0
   12eb8:	beq	12ec0 <sprintf@plt+0x1634>
   12ebc:	bl	1164c <free@plt>
   12ec0:	mov	r0, r4
   12ec4:	pop	{r4, sl, fp, lr}
   12ec8:	b	1164c <free@plt>
   12ecc:			; <UNDEFINED> instruction: 0x000172b0
   12ed0:	push	{r4, r5, fp, lr}
   12ed4:	add	fp, sp, #8
   12ed8:	mov	r4, r0
   12edc:	ldrb	r0, [r0, #452]	; 0x1c4
   12ee0:	cmp	r0, #0
   12ee4:	beq	12eec <sprintf@plt+0x1660>
   12ee8:	pop	{r4, r5, fp, pc}
   12eec:	mov	r0, #1
   12ef0:	strb	r0, [r4, #452]	; 0x1c4
   12ef4:	ldr	r0, [r4, #456]	; 0x1c8
   12ef8:	cmp	r0, #0
   12efc:	beq	12ee8 <sprintf@plt+0x165c>
   12f00:	ldr	r0, [pc, #72]	; 12f50 <sprintf@plt+0x16c4>
   12f04:	ldr	r0, [pc, r0]
   12f08:	ldr	r5, [r0]
   12f0c:	b	12f14 <sprintf@plt+0x1688>
   12f10:	ldr	r5, [r5, #8]
   12f14:	cmp	r5, #0
   12f18:	popeq	{r4, r5, fp, pc}
   12f1c:	ldr	r0, [r5]
   12f20:	ldr	r1, [r0, #36]	; 0x24
   12f24:	cmp	r1, #0
   12f28:	beq	12f10 <sprintf@plt+0x1684>
   12f2c:	ldr	r0, [r0, #12]
   12f30:	ldr	r2, [r4, #464]	; 0x1d0
   12f34:	add	r0, r2, r0, lsl #4
   12f38:	ldr	r0, [r0, #12]
   12f3c:	cmp	r0, #1
   12f40:	bne	12f10 <sprintf@plt+0x1684>
   12f44:	mov	r0, r4
   12f48:	blx	r1
   12f4c:	b	12f10 <sprintf@plt+0x1684>
   12f50:	muleq	r1, r8, r2
   12f54:	push	{r4, r5, r6, sl, fp, lr}
   12f58:	add	fp, sp, #16
   12f5c:	sub	sp, sp, #8
   12f60:	mov	r4, r0
   12f64:	ldr	r0, [r0, #464]	; 0x1d0
   12f68:	mov	r5, r1
   12f6c:	add	r0, r0, r1, lsl #4
   12f70:	mov	r1, #2
   12f74:	str	r1, [r0, #12]
   12f78:	ldr	r0, [r4, #456]	; 0x1c8
   12f7c:	subs	r0, r0, #1
   12f80:	str	r0, [r4, #456]	; 0x1c8
   12f84:	bne	12f94 <sprintf@plt+0x1708>
   12f88:	ldrb	r0, [r4, #451]	; 0x1c3
   12f8c:	cmp	r0, #0
   12f90:	beq	12ff0 <sprintf@plt+0x1764>
   12f94:	ldr	r0, [pc, #264]	; 130a4 <sprintf@plt+0x1818>
   12f98:	ldr	r0, [pc, r0]
   12f9c:	ldr	r6, [r0]
   12fa0:	cmp	r6, #0
   12fa4:	bne	12fb8 <sprintf@plt+0x172c>
   12fa8:	b	13090 <sprintf@plt+0x1804>
   12fac:	ldr	r6, [r6, #8]
   12fb0:	cmp	r6, #0
   12fb4:	beq	13090 <sprintf@plt+0x1804>
   12fb8:	ldr	r0, [r6]
   12fbc:	ldr	r2, [r0, #44]	; 0x2c
   12fc0:	cmp	r2, #0
   12fc4:	beq	12fac <sprintf@plt+0x1720>
   12fc8:	ldr	r0, [r0, #12]
   12fcc:	ldr	r1, [r4, #464]	; 0x1d0
   12fd0:	add	r0, r1, r0, lsl #4
   12fd4:	ldr	r0, [r0, #12]
   12fd8:	cmp	r0, #1
   12fdc:	bne	12fac <sprintf@plt+0x1720>
   12fe0:	mov	r0, r4
   12fe4:	mov	r1, r5
   12fe8:	blx	r2
   12fec:	b	12fac <sprintf@plt+0x1720>
   12ff0:	ldr	r2, [r4]
   12ff4:	ldr	r0, [pc, #156]	; 13098 <sprintf@plt+0x180c>
   12ff8:	add	r1, r4, #376	; 0x178
   12ffc:	add	r3, r4, #440	; 0x1b8
   13000:	ldr	r0, [pc, r0]
   13004:	str	r1, [sp]
   13008:	ldr	r0, [r0]
   1300c:	ldr	r1, [pc, #136]	; 1309c <sprintf@plt+0x1810>
   13010:	add	r1, pc, r1
   13014:	bl	117e4 <rb_helper_write@plt>
   13018:	ldrb	r0, [r4, #452]	; 0x1c4
   1301c:	cmp	r0, #0
   13020:	bne	13090 <sprintf@plt+0x1804>
   13024:	mov	r0, #1
   13028:	strb	r0, [r4, #452]	; 0x1c4
   1302c:	ldr	r0, [r4, #456]	; 0x1c8
   13030:	cmp	r0, #0
   13034:	beq	13090 <sprintf@plt+0x1804>
   13038:	ldr	r0, [pc, #96]	; 130a0 <sprintf@plt+0x1814>
   1303c:	ldr	r0, [pc, r0]
   13040:	ldr	r5, [r0]
   13044:	cmp	r5, #0
   13048:	bne	1305c <sprintf@plt+0x17d0>
   1304c:	b	13090 <sprintf@plt+0x1804>
   13050:	ldr	r5, [r5, #8]
   13054:	cmp	r5, #0
   13058:	beq	13090 <sprintf@plt+0x1804>
   1305c:	ldr	r0, [r5]
   13060:	ldr	r1, [r0, #36]	; 0x24
   13064:	cmp	r1, #0
   13068:	beq	13050 <sprintf@plt+0x17c4>
   1306c:	ldr	r0, [r0, #12]
   13070:	ldr	r2, [r4, #464]	; 0x1d0
   13074:	add	r0, r2, r0, lsl #4
   13078:	ldr	r0, [r0, #12]
   1307c:	cmp	r0, #1
   13080:	bne	13050 <sprintf@plt+0x17c4>
   13084:	mov	r0, r4
   13088:	blx	r1
   1308c:	b	13050 <sprintf@plt+0x17c4>
   13090:	sub	sp, fp, #16
   13094:	pop	{r4, r5, r6, sl, fp, pc}
   13098:	muleq	r1, r0, r1
   1309c:	andeq	r6, r0, r9, asr #3
   130a0:	andeq	r7, r1, r0, ror #2
   130a4:	andeq	r7, r1, r4, lsl #4
   130a8:	push	{r4, r5, fp, lr}
   130ac:	add	fp, sp, #8
   130b0:	sub	sp, sp, #8
   130b4:	mov	r4, r0
   130b8:	ldr	r2, [r0]
   130bc:	ldr	r0, [pc, #156]	; 13160 <sprintf@plt+0x18d4>
   130c0:	add	r1, r4, #376	; 0x178
   130c4:	add	r3, r4, #440	; 0x1b8
   130c8:	ldr	r0, [pc, r0]
   130cc:	str	r1, [sp]
   130d0:	ldr	r0, [r0]
   130d4:	ldr	r1, [pc, #136]	; 13164 <sprintf@plt+0x18d8>
   130d8:	add	r1, pc, r1
   130dc:	bl	117e4 <rb_helper_write@plt>
   130e0:	ldrb	r0, [r4, #452]	; 0x1c4
   130e4:	cmp	r0, #0
   130e8:	bne	13158 <sprintf@plt+0x18cc>
   130ec:	mov	r0, #1
   130f0:	strb	r0, [r4, #452]	; 0x1c4
   130f4:	ldr	r0, [r4, #456]	; 0x1c8
   130f8:	cmp	r0, #0
   130fc:	beq	13158 <sprintf@plt+0x18cc>
   13100:	ldr	r0, [pc, #96]	; 13168 <sprintf@plt+0x18dc>
   13104:	ldr	r0, [pc, r0]
   13108:	ldr	r5, [r0]
   1310c:	cmp	r5, #0
   13110:	bne	13124 <sprintf@plt+0x1898>
   13114:	b	13158 <sprintf@plt+0x18cc>
   13118:	ldr	r5, [r5, #8]
   1311c:	cmp	r5, #0
   13120:	beq	13158 <sprintf@plt+0x18cc>
   13124:	ldr	r0, [r5]
   13128:	ldr	r1, [r0, #36]	; 0x24
   1312c:	cmp	r1, #0
   13130:	beq	13118 <sprintf@plt+0x188c>
   13134:	ldr	r0, [r0, #12]
   13138:	ldr	r2, [r4, #464]	; 0x1d0
   1313c:	add	r0, r2, r0, lsl #4
   13140:	ldr	r0, [r0, #12]
   13144:	cmp	r0, #1
   13148:	bne	13118 <sprintf@plt+0x188c>
   1314c:	mov	r0, r4
   13150:	blx	r1
   13154:	b	13118 <sprintf@plt+0x188c>
   13158:	sub	sp, fp, #8
   1315c:	pop	{r4, r5, fp, pc}
   13160:	andeq	r7, r1, r8, asr #1
   13164:	andeq	r6, r0, r1, lsl #2
   13168:	muleq	r1, r8, r0
   1316c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13170:	add	fp, sp, #28
   13174:	sub	sp, sp, #28
   13178:	mov	r2, r0
   1317c:	cmp	r0, #5
   13180:	ble	13498 <sprintf@plt+0x1c0c>
   13184:	cmp	r2, #6
   13188:	ldr	sl, [r1, #4]
   1318c:	ldr	r9, [r1, #8]
   13190:	ldr	r7, [r1, #12]
   13194:	ldr	r5, [r1, #16]
   13198:	ldr	r4, [r1, #20]
   1319c:	mov	r2, #16
   131a0:	ldrne	r6, [r1, #24]
   131a4:	mov	r1, #0
   131a8:	mov	r0, sl
   131ac:	ldreq	r6, [pc, #792]	; 134cc <sprintf@plt+0x1c40>
   131b0:	addeq	r6, pc, r6
   131b4:	bl	11634 <strtoull@plt>
   131b8:	mov	r8, r0
   131bc:	subs	r0, r0, #1
   131c0:	mvn	r2, #1
   131c4:	sbc	r1, r1, #0
   131c8:	subs	r0, r2, r0
   131cc:	rscs	r0, r1, #0
   131d0:	bcc	13464 <sprintf@plt+0x1bd8>
   131d4:	mov	r0, #1
   131d8:	mov	r1, #468	; 0x1d4
   131dc:	str	r6, [sp, #8]
   131e0:	str	r9, [sp, #12]
   131e4:	str	r5, [sp, #16]
   131e8:	str	r7, [sp, #20]
   131ec:	str	r4, [sp, #24]
   131f0:	mov	r5, #1
   131f4:	bl	115b0 <calloc@plt>
   131f8:	cmp	r0, #0
   131fc:	beq	134a8 <sprintf@plt+0x1c1c>
   13200:	str	r8, [r0]
   13204:	str	r5, [r0, #460]	; 0x1cc
   13208:	mov	r4, r0
   1320c:	mov	r1, r8
   13210:	ldr	r9, [pc, #696]	; 134d0 <sprintf@plt+0x1c44>
   13214:	ldr	r9, [pc, r9]
   13218:	ldr	r0, [r9]
   1321c:	bl	117b4 <rb_dictionary_find@plt>
   13220:	cmp	r0, #0
   13224:	bne	134ac <sprintf@plt+0x1c20>
   13228:	ldr	r1, [r4]
   1322c:	ldr	r0, [r9]
   13230:	mov	r2, r4
   13234:	bl	1176c <rb_dictionary_add@plt>
   13238:	ldr	r0, [sp, #8]
   1323c:	mov	r1, #0
   13240:	mov	r2, #16
   13244:	bl	11634 <strtoull@plt>
   13248:	ldr	r5, [sp, #12]
   1324c:	str	r0, [r4, #4]
   13250:	add	r0, r4, #8
   13254:	mov	r2, #54	; 0x36
   13258:	mov	r1, r5
   1325c:	bl	11628 <rb_strlcpy@plt>
   13260:	ldr	r0, [sp, #20]
   13264:	mov	r1, #0
   13268:	mov	r2, #10
   1326c:	bl	116e8 <strtol@plt>
   13270:	strh	r0, [r4, #62]	; 0x3e
   13274:	add	r1, r4, #64	; 0x40
   13278:	mov	r0, r5
   1327c:	bl	11694 <rb_inet_pton_sock@plt>
   13280:	ldrh	r0, [r4, #62]	; 0x3e
   13284:	ldr	r5, [sp, #16]
   13288:	mov	r2, #54	; 0x36
   1328c:	rev16	r0, r0
   13290:	mov	r1, r5
   13294:	strh	r0, [r4, #66]	; 0x42
   13298:	add	r0, r4, #192	; 0xc0
   1329c:	bl	11628 <rb_strlcpy@plt>
   132a0:	ldr	r0, [sp, #24]
   132a4:	mov	r1, #0
   132a8:	mov	r2, #10
   132ac:	bl	116e8 <strtol@plt>
   132b0:	strh	r0, [r4, #246]	; 0xf6
   132b4:	add	r1, r4, #248	; 0xf8
   132b8:	mov	r0, r5
   132bc:	bl	11694 <rb_inet_pton_sock@plt>
   132c0:	ldrh	r0, [r4, #246]	; 0xf6
   132c4:	add	r9, r4, #376	; 0x178
   132c8:	mov	r2, #64	; 0x40
   132cc:	rev16	r0, r0
   132d0:	strh	r0, [r4, #250]	; 0xfa
   132d4:	mov	r0, r9
   132d8:	ldr	r7, [pc, #500]	; 134d4 <sprintf@plt+0x1c48>
   132dc:	add	r7, pc, r7
   132e0:	mov	r1, r7
   132e4:	bl	11628 <rb_strlcpy@plt>
   132e8:	add	r6, r4, #440	; 0x1b8
   132ec:	mov	r1, r7
   132f0:	mov	r2, #11
   132f4:	mov	r0, r6
   132f8:	bl	11628 <rb_strlcpy@plt>
   132fc:	ldr	r0, [pc, #468]	; 134d8 <sprintf@plt+0x1c4c>
   13300:	mov	r5, #1
   13304:	ldr	r0, [pc, r0]
   13308:	lsl	r1, r0, #4
   1330c:	mov	r0, #1
   13310:	bl	115b0 <calloc@plt>
   13314:	cmp	r0, #0
   13318:	beq	134a8 <sprintf@plt+0x1c1c>
   1331c:	strb	r5, [r4, #451]	; 0x1c3
   13320:	str	r0, [r4, #464]	; 0x1d0
   13324:	ldr	r8, [pc, #432]	; 134dc <sprintf@plt+0x1c50>
   13328:	ldr	r8, [pc, r8]
   1332c:	ldr	r7, [r8]
   13330:	ldr	sl, [pc, #424]	; 134e0 <sprintf@plt+0x1c54>
   13334:	ldr	sl, [pc, sl]
   13338:	cmp	r7, #0
   1333c:	beq	133ac <sprintf@plt+0x1b20>
   13340:	ldr	r1, [r7]
   13344:	mov	r5, #1
   13348:	ldr	r2, [r1, #12]
   1334c:	str	r1, [r0, r2, lsl #4]!
   13350:	ldr	r2, [r4, #456]	; 0x1c8
   13354:	add	r2, r2, #1
   13358:	str	r2, [r4, #456]	; 0x1c8
   1335c:	b	1337c <sprintf@plt+0x1af0>
   13360:	ldr	r1, [r7]
   13364:	ldr	r0, [r4, #464]	; 0x1d0
   13368:	ldr	r2, [r1, #12]
   1336c:	str	r1, [r0, r2, lsl #4]!
   13370:	ldr	r2, [r4, #456]	; 0x1c8
   13374:	add	r2, r2, #1
   13378:	str	r2, [r4, #456]	; 0x1c8
   1337c:	str	r5, [r0, #12]
   13380:	mov	r0, r4
   13384:	ldr	r1, [r1, #32]
   13388:	blx	r1
   1338c:	cmp	r0, #0
   13390:	beq	13454 <sprintf@plt+0x1bc8>
   13394:	ldrb	r0, [r4, #452]	; 0x1c4
   13398:	cmp	r0, #0
   1339c:	bne	133ac <sprintf@plt+0x1b20>
   133a0:	ldr	r7, [r7, #8]
   133a4:	cmp	r7, #0
   133a8:	bne	13360 <sprintf@plt+0x1ad4>
   133ac:	mov	r0, #0
   133b0:	strb	r0, [r4, #451]	; 0x1c3
   133b4:	ldr	r0, [r4, #456]	; 0x1c8
   133b8:	cmp	r0, #0
   133bc:	bne	13454 <sprintf@plt+0x1bc8>
   133c0:	ldr	r2, [r4]
   133c4:	ldr	r0, [pc, #284]	; 134e8 <sprintf@plt+0x1c5c>
   133c8:	mov	r3, r6
   133cc:	ldr	r0, [pc, r0]
   133d0:	ldr	r0, [r0]
   133d4:	str	r9, [sp]
   133d8:	ldr	r1, [pc, #268]	; 134ec <sprintf@plt+0x1c60>
   133dc:	add	r1, pc, r1
   133e0:	bl	117e4 <rb_helper_write@plt>
   133e4:	ldrb	r0, [r4, #452]	; 0x1c4
   133e8:	cmp	r0, #0
   133ec:	bne	13454 <sprintf@plt+0x1bc8>
   133f0:	mov	r0, #1
   133f4:	strb	r0, [r4, #452]	; 0x1c4
   133f8:	ldr	r0, [r4, #456]	; 0x1c8
   133fc:	cmp	r0, #0
   13400:	beq	13454 <sprintf@plt+0x1bc8>
   13404:	ldr	r5, [r8]
   13408:	cmp	r5, #0
   1340c:	bne	13420 <sprintf@plt+0x1b94>
   13410:	b	13454 <sprintf@plt+0x1bc8>
   13414:	ldr	r5, [r5, #8]
   13418:	cmp	r5, #0
   1341c:	beq	13454 <sprintf@plt+0x1bc8>
   13420:	ldr	r0, [r5]
   13424:	ldr	r1, [r0, #36]	; 0x24
   13428:	cmp	r1, #0
   1342c:	beq	13414 <sprintf@plt+0x1b88>
   13430:	ldr	r0, [r0, #12]
   13434:	ldr	r2, [r4, #464]	; 0x1d0
   13438:	add	r0, r2, r0, lsl #4
   1343c:	ldr	r0, [r0, #12]
   13440:	cmp	r0, #1
   13444:	bne	13414 <sprintf@plt+0x1b88>
   13448:	mov	r0, r4
   1344c:	blx	r1
   13450:	b	13414 <sprintf@plt+0x1b88>
   13454:	ldr	r0, [r4, #460]	; 0x1cc
   13458:	subs	r0, r0, #1
   1345c:	str	r0, [r4, #460]	; 0x1cc
   13460:	beq	1346c <sprintf@plt+0x1be0>
   13464:	sub	sp, fp, #28
   13468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1346c:	ldr	r1, [r4]
   13470:	ldr	r0, [sl]
   13474:	bl	116b8 <rb_dictionary_delete@plt>
   13478:	ldr	r0, [r4, #464]	; 0x1d0
   1347c:	cmp	r0, #0
   13480:	beq	13488 <sprintf@plt+0x1bfc>
   13484:	bl	1164c <free@plt>
   13488:	mov	r0, r4
   1348c:	sub	sp, fp, #28
   13490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13494:	b	1164c <free@plt>
   13498:	ldr	r1, [pc, #40]	; 134c8 <sprintf@plt+0x1c3c>
   1349c:	mov	r0, #67	; 0x43
   134a0:	add	r1, pc, r1
   134a4:	b	134bc <sprintf@plt+0x1c30>
   134a8:	bl	11754 <rb_outofmemory@plt>
   134ac:	ldr	r1, [pc, #48]	; 134e4 <sprintf@plt+0x1c58>
   134b0:	mov	r0, #67	; 0x43
   134b4:	mov	r2, sl
   134b8:	add	r1, pc, r1
   134bc:	bl	124e8 <sprintf@plt+0xc5c>
   134c0:	mov	r0, #3
   134c4:	bl	11874 <exit@plt>
   134c8:	andeq	r5, r0, r4, asr #26
   134cc:	andeq	r6, r0, ip, ror #3
   134d0:	andeq	r6, r1, r0, asr #30
   134d4:	andeq	r5, r0, r4, lsl #28
   134d8:	ldrdeq	fp, [r1], -r4
   134dc:	andeq	r6, r1, r4, ror lr
   134e0:	andeq	r6, r1, r0, lsr #28
   134e4:	andeq	r5, r0, r8, lsr #29
   134e8:	andeq	r6, r1, r4, asr #27
   134ec:	strdeq	r5, [r0], -sp
   134f0:	push	{r4, r5, r6, sl, fp, lr}
   134f4:	add	fp, sp, #16
   134f8:	cmp	r0, #1
   134fc:	ble	1360c <sprintf@plt+0x1d80>
   13500:	ldr	r0, [r1, #4]
   13504:	mov	r4, r1
   13508:	mov	r1, #0
   1350c:	mov	r2, #16
   13510:	bl	11634 <strtoull@plt>
   13514:	mov	r2, r0
   13518:	subs	r0, r0, #1
   1351c:	mvn	r3, #0
   13520:	sbc	r1, r1, #0
   13524:	subs	r0, r0, r3
   13528:	sbcs	r0, r1, #0
   1352c:	bcs	1361c <sprintf@plt+0x1d90>
   13530:	ldr	r5, [pc, #264]	; 13640 <sprintf@plt+0x1db4>
   13534:	mov	r1, r2
   13538:	ldr	r5, [pc, r5]
   1353c:	ldr	r0, [r5]
   13540:	bl	11748 <rb_dictionary_retrieve@plt>
   13544:	cmp	r0, #0
   13548:	beq	1359c <sprintf@plt+0x1d10>
   1354c:	mov	r4, r0
   13550:	ldr	r0, [r0, #460]	; 0x1cc
   13554:	add	r0, r0, #1
   13558:	str	r0, [r4, #460]	; 0x1cc
   1355c:	ldrb	r1, [r4, #452]	; 0x1c4
   13560:	cmp	r1, #0
   13564:	beq	135a0 <sprintf@plt+0x1d14>
   13568:	subs	r0, r0, #1
   1356c:	str	r0, [r4, #460]	; 0x1cc
   13570:	popne	{r4, r5, r6, sl, fp, pc}
   13574:	ldr	r1, [r4]
   13578:	ldr	r0, [r5]
   1357c:	bl	116b8 <rb_dictionary_delete@plt>
   13580:	ldr	r0, [r4, #464]	; 0x1d0
   13584:	cmp	r0, #0
   13588:	beq	13590 <sprintf@plt+0x1d04>
   1358c:	bl	1164c <free@plt>
   13590:	mov	r0, r4
   13594:	pop	{r4, r5, r6, sl, fp, lr}
   13598:	b	1164c <free@plt>
   1359c:	pop	{r4, r5, r6, sl, fp, pc}
   135a0:	mov	r1, #1
   135a4:	strb	r1, [r4, #452]	; 0x1c4
   135a8:	ldr	r1, [r4, #456]	; 0x1c8
   135ac:	cmp	r1, #0
   135b0:	beq	13568 <sprintf@plt+0x1cdc>
   135b4:	ldr	r1, [pc, #136]	; 13644 <sprintf@plt+0x1db8>
   135b8:	ldr	r1, [pc, r1]
   135bc:	ldr	r6, [r1]
   135c0:	cmp	r6, #0
   135c4:	beq	13568 <sprintf@plt+0x1cdc>
   135c8:	ldr	r0, [r6]
   135cc:	ldr	r1, [r0, #36]	; 0x24
   135d0:	cmp	r1, #0
   135d4:	beq	135f8 <sprintf@plt+0x1d6c>
   135d8:	ldr	r0, [r0, #12]
   135dc:	ldr	r2, [r4, #464]	; 0x1d0
   135e0:	add	r0, r2, r0, lsl #4
   135e4:	ldr	r0, [r0, #12]
   135e8:	cmp	r0, #1
   135ec:	bne	135f8 <sprintf@plt+0x1d6c>
   135f0:	mov	r0, r4
   135f4:	blx	r1
   135f8:	ldr	r6, [r6, #8]
   135fc:	cmp	r6, #0
   13600:	bne	135c8 <sprintf@plt+0x1d3c>
   13604:	ldr	r0, [r4, #460]	; 0x1cc
   13608:	b	13568 <sprintf@plt+0x1cdc>
   1360c:	ldr	r1, [pc, #36]	; 13638 <sprintf@plt+0x1dac>
   13610:	mov	r2, r0
   13614:	add	r1, pc, r1
   13618:	b	13628 <sprintf@plt+0x1d9c>
   1361c:	ldr	r2, [r4, #4]
   13620:	ldr	r1, [pc, #20]	; 1363c <sprintf@plt+0x1db0>
   13624:	add	r1, pc, r1
   13628:	mov	r0, #67	; 0x43
   1362c:	bl	124e8 <sprintf@plt+0xc5c>
   13630:	mov	r0, #3
   13634:	bl	11874 <exit@plt>
   13638:	andeq	r5, r0, sl, lsl ip
   1363c:	andeq	r5, r0, r4, asr ip
   13640:	andeq	r6, r1, ip, lsl ip
   13644:	andeq	r6, r1, r4, ror #23
   13648:	push	{fp, lr}
   1364c:	mov	fp, sp
   13650:	bl	14774 <sprintf@plt+0x2ee8>
   13654:	ldr	r0, [pc, #168]	; 13704 <sprintf@plt+0x1e78>
   13658:	ldr	r0, [pc, r0]
   1365c:	ldr	r0, [r0]
   13660:	cmp	r0, #1
   13664:	blt	1367c <sprintf@plt+0x1df0>
   13668:	lsl	r2, r0, #2
   1366c:	ldr	r0, [pc, #148]	; 13708 <sprintf@plt+0x1e7c>
   13670:	mov	r1, #0
   13674:	add	r0, pc, r0
   13678:	bl	115e0 <memset@plt>
   1367c:	ldr	r0, [pc, #136]	; 1370c <sprintf@plt+0x1e80>
   13680:	ldr	r0, [pc, r0]
   13684:	cmp	r0, #0
   13688:	beq	13690 <sprintf@plt+0x1e04>
   1368c:	pop	{fp, pc}
   13690:	ldr	r0, [pc, #120]	; 13710 <sprintf@plt+0x1e84>
   13694:	mov	r1, #2
   13698:	mov	r2, #0
   1369c:	ldr	r0, [pc, r0]
   136a0:	ldrh	r0, [r0]
   136a4:	ldr	r3, [pc, #104]	; 13714 <sprintf@plt+0x1e88>
   136a8:	add	r3, pc, r3
   136ac:	bl	11568 <rb_socket@plt>
   136b0:	ldr	r1, [pc, #96]	; 13718 <sprintf@plt+0x1e8c>
   136b4:	cmp	r0, #0
   136b8:	add	r1, pc, r1
   136bc:	str	r0, [r1]
   136c0:	popeq	{fp, pc}
   136c4:	ldr	r2, [pc, #80]	; 1371c <sprintf@plt+0x1e90>
   136c8:	mov	r1, #1
   136cc:	mov	r3, #0
   136d0:	add	r2, pc, r2
   136d4:	bl	11538 <rb_setselect@plt>
   136d8:	ldr	r0, [pc, #64]	; 13720 <sprintf@plt+0x1e94>
   136dc:	ldr	r1, [pc, #64]	; 13724 <sprintf@plt+0x1e98>
   136e0:	mov	r2, #0
   136e4:	mov	r3, #1
   136e8:	add	r0, pc, r0
   136ec:	add	r1, pc, r1
   136f0:	bl	117f0 <rb_event_add@plt>
   136f4:	ldr	r1, [pc, #44]	; 13728 <sprintf@plt+0x1e9c>
   136f8:	add	r1, pc, r1
   136fc:	str	r0, [r1]
   13700:	pop	{fp, pc}
   13704:	andeq	r6, r1, r0, lsl fp
   13708:	andeq	fp, r1, r4, ror r9
   1370c:	andeq	fp, r1, r0, ror #18
   13710:	ldrdeq	r6, [r1], -r8
   13714:	andeq	r5, r0, r3, asr #27
   13718:	andeq	fp, r1, r8, lsr #18
   1371c:			; <UNDEFINED> instruction: 0x000004bc
   13720:	muleq	r0, r7, sp
   13724:	ldrdeq	r0, [r0], -ip
   13728:	andeq	fp, r1, ip, ror #17
   1372c:	push	{r4, sl, fp, lr}
   13730:	add	fp, sp, #8
   13734:	ldr	r0, [pc, #204]	; 13808 <sprintf@plt+0x1f7c>
   13738:	ldr	r0, [pc, r0]
   1373c:	bl	116dc <rb_close@plt>
   13740:	ldr	r4, [pc, #196]	; 1380c <sprintf@plt+0x1f80>
   13744:	mov	r0, #0
   13748:	add	r4, pc, r4
   1374c:	str	r0, [r4]
   13750:	ldr	r0, [pc, #184]	; 13810 <sprintf@plt+0x1f84>
   13754:	ldr	r0, [pc, r0]
   13758:	bl	1152c <rb_event_delete@plt>
   1375c:	bl	14774 <sprintf@plt+0x2ee8>
   13760:	ldr	r0, [pc, #172]	; 13814 <sprintf@plt+0x1f88>
   13764:	ldr	r0, [pc, r0]
   13768:	ldr	r0, [r0]
   1376c:	cmp	r0, #1
   13770:	blt	13788 <sprintf@plt+0x1efc>
   13774:	lsl	r2, r0, #2
   13778:	ldr	r0, [pc, #152]	; 13818 <sprintf@plt+0x1f8c>
   1377c:	mov	r1, #0
   13780:	add	r0, pc, r0
   13784:	bl	115e0 <memset@plt>
   13788:	ldr	r0, [pc, #140]	; 1381c <sprintf@plt+0x1f90>
   1378c:	ldr	r0, [pc, r0]
   13790:	cmp	r0, #0
   13794:	beq	1379c <sprintf@plt+0x1f10>
   13798:	pop	{r4, sl, fp, pc}
   1379c:	ldr	r0, [pc, #124]	; 13820 <sprintf@plt+0x1f94>
   137a0:	mov	r1, #2
   137a4:	mov	r2, #0
   137a8:	ldr	r0, [pc, r0]
   137ac:	ldrh	r0, [r0]
   137b0:	ldr	r3, [pc, #108]	; 13824 <sprintf@plt+0x1f98>
   137b4:	add	r3, pc, r3
   137b8:	bl	11568 <rb_socket@plt>
   137bc:	cmp	r0, #0
   137c0:	str	r0, [r4]
   137c4:	popeq	{r4, sl, fp, pc}
   137c8:	ldr	r2, [pc, #88]	; 13828 <sprintf@plt+0x1f9c>
   137cc:	mov	r1, #1
   137d0:	mov	r3, #0
   137d4:	add	r2, pc, r2
   137d8:	bl	11538 <rb_setselect@plt>
   137dc:	ldr	r0, [pc, #72]	; 1382c <sprintf@plt+0x1fa0>
   137e0:	ldr	r1, [pc, #72]	; 13830 <sprintf@plt+0x1fa4>
   137e4:	mov	r2, #0
   137e8:	mov	r3, #1
   137ec:	add	r0, pc, r0
   137f0:	add	r1, pc, r1
   137f4:	bl	117f0 <rb_event_add@plt>
   137f8:	ldr	r1, [pc, #52]	; 13834 <sprintf@plt+0x1fa8>
   137fc:	add	r1, pc, r1
   13800:	str	r0, [r1]
   13804:	pop	{r4, sl, fp, pc}
   13808:	andeq	fp, r1, r8, lsr #17
   1380c:	muleq	r1, r8, r8
   13810:	muleq	r1, r0, r8
   13814:	andeq	r6, r1, r4, lsl #20
   13818:	andeq	fp, r1, r8, ror #16
   1381c:	andeq	fp, r1, r4, asr r8
   13820:	andeq	r6, r1, ip, asr #19
   13824:			; <UNDEFINED> instruction: 0x00005cb7
   13828:			; <UNDEFINED> instruction: 0x000003b8
   1382c:	muleq	r0, r3, ip
   13830:	ldrdeq	r0, [r0], -r8
   13834:	andeq	fp, r1, r8, ror #15
   13838:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1383c:	add	fp, sp, #24
   13840:	sub	sp, sp, #256	; 0x100
   13844:	cmp	r0, #0
   13848:	beq	138f0 <sprintf@plt+0x2064>
   1384c:	mov	r6, sp
   13850:	mov	r4, r2
   13854:	mov	r5, r1
   13858:	mov	r1, r0
   1385c:	mov	r2, #256	; 0x100
   13860:	mov	r0, r6
   13864:	bl	11628 <rb_strlcpy@plt>
   13868:	mov	r0, r6
   1386c:	mov	r1, #46	; 0x2e
   13870:	bl	1158c <strchr@plt>
   13874:	cmp	r0, #0
   13878:	bne	138d4 <sprintf@plt+0x2048>
   1387c:	ldr	r0, [pc, #140]	; 13910 <sprintf@plt+0x2084>
   13880:	ldr	r0, [pc, r0]
   13884:	ldrb	r0, [r0]
   13888:	cmp	r0, #0
   1388c:	beq	138d4 <sprintf@plt+0x2048>
   13890:	mov	r6, sp
   13894:	mov	r0, r6
   13898:	bl	116a0 <strlen@plt>
   1389c:	mov	r7, r0
   138a0:	ldr	r0, [pc, #108]	; 13914 <sprintf@plt+0x2088>
   138a4:	ldr	r0, [pc, r0]
   138a8:	bl	116a0 <strlen@plt>
   138ac:	add	r0, r7, r0
   138b0:	add	r0, r0, #2
   138b4:	cmp	r0, #254	; 0xfe
   138b8:	bhi	138d4 <sprintf@plt+0x2048>
   138bc:	add	r0, r6, r7
   138c0:	mov	r1, #46	; 0x2e
   138c4:	strb	r1, [r0], #1
   138c8:	ldr	r1, [pc, #72]	; 13918 <sprintf@plt+0x208c>
   138cc:	ldr	r1, [pc, r1]
   138d0:	bl	11700 <strcpy@plt>
   138d4:	mov	r1, sp
   138d8:	mov	r0, r5
   138dc:	mov	r2, #0
   138e0:	mov	r3, r4
   138e4:	bl	143d4 <sprintf@plt+0x2b48>
   138e8:	sub	sp, fp, #24
   138ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138f0:	ldr	r0, [pc, #36]	; 1391c <sprintf@plt+0x2090>
   138f4:	ldr	r1, [pc, #36]	; 13920 <sprintf@plt+0x2094>
   138f8:	ldr	r3, [pc, #36]	; 13924 <sprintf@plt+0x2098>
   138fc:	mov	r2, #412	; 0x19c
   13900:	add	r0, pc, r0
   13904:	add	r1, pc, r1
   13908:	add	r3, pc, r3
   1390c:	bl	11610 <__assert_fail@plt>
   13910:	andeq	r6, r1, ip, ror #17
   13914:	andeq	r6, r1, r8, asr #17
   13918:	andeq	r6, r1, r0, lsr #17
   1391c:	muleq	r0, r4, sl
   13920:	muleq	r0, sl, sl
   13924:	muleq	r0, ip, sl
   13928:	push	{r4, r5, fp, lr}
   1392c:	add	fp, sp, #8
   13930:	mov	r5, r0
   13934:	mov	r0, r1
   13938:	bl	14444 <sprintf@plt+0x2bb8>
   1393c:	mov	r4, r0
   13940:	add	r0, r0, #292	; 0x124
   13944:	mov	r1, r5
   13948:	mov	r2, #128	; 0x80
   1394c:	bl	116c4 <memcpy@plt>
   13950:	mov	r0, #1
   13954:	mov	r1, #256	; 0x100
   13958:	bl	115b0 <calloc@plt>
   1395c:	cmp	r0, #0
   13960:	beq	13990 <sprintf@plt+0x2104>
   13964:	str	r0, [r4, #420]	; 0x1a4
   13968:	add	r0, r4, #21
   1396c:	mov	r1, #256	; 0x100
   13970:	mov	r2, r5
   13974:	mov	r3, #0
   13978:	bl	13994 <sprintf@plt+0x2108>
   1397c:	mov	r0, #12
   13980:	strb	r0, [r4, #20]
   13984:	mov	r0, r4
   13988:	pop	{r4, r5, fp, lr}
   1398c:	b	14548 <sprintf@plt+0x2cbc>
   13990:	bl	11754 <rb_outofmemory@plt>
   13994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13998:	add	fp, sp, #28
   1399c:	sub	sp, sp, #172	; 0xac
   139a0:	ldrh	r7, [r2]
   139a4:	cmp	r7, #10
   139a8:	beq	139e8 <sprintf@plt+0x215c>
   139ac:	cmp	r7, #2
   139b0:	subne	sp, fp, #28
   139b4:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b8:	ldr	r7, [pc, #452]	; 13b84 <sprintf@plt+0x22f8>
   139bc:	ldrb	r6, [r2, #4]
   139c0:	ldrb	r5, [r2, #5]
   139c4:	ldrb	r4, [r2, #6]
   139c8:	cmp	r3, #0
   139cc:	add	r7, pc, r7
   139d0:	movne	r7, r3
   139d4:	ldrb	r3, [r2, #7]
   139d8:	stm	sp, {r4, r5, r6, r7}
   139dc:	ldr	r2, [pc, #420]	; 13b88 <sprintf@plt+0x22fc>
   139e0:	add	r2, pc, r2
   139e4:	b	13b78 <sprintf@plt+0x22ec>
   139e8:	ldr	r5, [pc, #412]	; 13b8c <sprintf@plt+0x2300>
   139ec:	cmp	r3, #0
   139f0:	ldrb	r8, [r2, #8]
   139f4:	ldrb	r6, [r2, #15]
   139f8:	ldrb	ip, [r2, #13]
   139fc:	ldrb	lr, [r2, #12]
   13a00:	ldrb	r9, [r2, #9]
   13a04:	ldrb	sl, [r2, #10]
   13a08:	str	r0, [fp, #-52]	; 0xffffffcc
   13a0c:	str	r1, [fp, #-44]	; 0xffffffd4
   13a10:	add	r5, pc, r5
   13a14:	lsr	r4, r8, #4
   13a18:	lsr	r0, sl, #4
   13a1c:	lsr	r1, r9, #4
   13a20:	and	r8, r8, #15
   13a24:	and	r9, r9, #15
   13a28:	and	sl, sl, #15
   13a2c:	movne	r5, r3
   13a30:	ldrb	r3, [r2, #23]
   13a34:	str	r3, [fp, #-32]	; 0xffffffe0
   13a38:	ldrb	r3, [r2, #22]
   13a3c:	str	r3, [fp, #-36]	; 0xffffffdc
   13a40:	ldrb	r3, [r2, #21]
   13a44:	str	r3, [fp, #-40]	; 0xffffffd8
   13a48:	ldrb	r3, [r2, #20]
   13a4c:	str	r3, [fp, #-48]	; 0xffffffd0
   13a50:	ldrb	r3, [r2, #19]
   13a54:	str	r3, [fp, #-56]	; 0xffffffc8
   13a58:	ldrb	r3, [r2, #18]
   13a5c:	str	r3, [fp, #-60]	; 0xffffffc4
   13a60:	ldrb	r3, [r2, #17]
   13a64:	str	r3, [fp, #-64]	; 0xffffffc0
   13a68:	ldrb	r3, [r2, #16]
   13a6c:	str	r3, [fp, #-68]	; 0xffffffbc
   13a70:	ldrb	r3, [r2, #14]
   13a74:	ldrb	r2, [r2, #11]
   13a78:	str	r0, [sp, #104]	; 0x68
   13a7c:	str	r4, [sp, #120]	; 0x78
   13a80:	str	r5, [sp, #124]	; 0x7c
   13a84:	mov	r0, r6
   13a88:	lsr	r6, r6, #4
   13a8c:	and	r5, ip, #15
   13a90:	str	r1, [sp, #112]	; 0x70
   13a94:	str	r8, [sp, #116]	; 0x74
   13a98:	str	sl, [sp, #100]	; 0x64
   13a9c:	str	r9, [sp, #108]	; 0x6c
   13aa0:	lsr	r1, lr, #4
   13aa4:	str	r6, [sp, #64]	; 0x40
   13aa8:	lsr	r7, r2, #4
   13aac:	lsr	r4, r3, #4
   13ab0:	and	r3, r3, #15
   13ab4:	and	r8, r2, #15
   13ab8:	and	r2, lr, #15
   13abc:	add	lr, sp, #32
   13ac0:	str	r7, [sp, #96]	; 0x60
   13ac4:	lsr	r7, ip, #4
   13ac8:	add	ip, sp, #68	; 0x44
   13acc:	stm	ip, {r3, r4, r5, r7}
   13ad0:	and	ip, r0, #15
   13ad4:	str	r2, [sp, #84]	; 0x54
   13ad8:	str	r1, [sp, #88]	; 0x58
   13adc:	str	r8, [sp, #92]	; 0x5c
   13ae0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ae4:	lsr	r1, r0, #4
   13ae8:	and	r2, r0, #15
   13aec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13af0:	lsr	r3, r0, #4
   13af4:	and	r7, r0, #15
   13af8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13afc:	lsr	r6, r0, #4
   13b00:	and	r5, r0, #15
   13b04:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13b08:	lsr	r4, r0, #4
   13b0c:	stm	lr, {r4, r5, r6, r7}
   13b10:	str	ip, [sp, #60]	; 0x3c
   13b14:	and	ip, r0, #15
   13b18:	str	r2, [sp, #52]	; 0x34
   13b1c:	str	r1, [sp, #56]	; 0x38
   13b20:	str	r3, [sp, #48]	; 0x30
   13b24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b28:	lsr	r1, r0, #4
   13b2c:	and	r2, r0, #15
   13b30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13b34:	lsr	r3, r0, #4
   13b38:	and	r7, r0, #15
   13b3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13b40:	lsr	r6, r0, #4
   13b44:	and	r5, r0, #15
   13b48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b4c:	lsr	r4, r0, #4
   13b50:	stm	sp, {r4, r5, r6, r7}
   13b54:	str	r3, [sp, #16]
   13b58:	str	r2, [sp, #20]
   13b5c:	str	r1, [sp, #24]
   13b60:	str	ip, [sp, #28]
   13b64:	and	r3, r0, #15
   13b68:	ldr	r2, [pc, #32]	; 13b90 <sprintf@plt+0x2304>
   13b6c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b70:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13b74:	add	r2, pc, r2
   13b78:	bl	11814 <snprintf@plt>
   13b7c:	sub	sp, fp, #28
   13b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b84:	andeq	r5, r0, r6, lsr #20
   13b88:	andeq	r5, r0, r3, lsl #20
   13b8c:	andeq	r5, r0, r2, asr sl
   13b90:	andeq	r5, r0, fp, lsl #17
   13b94:	push	{r4, sl, fp, lr}
   13b98:	add	fp, sp, #8
   13b9c:	mov	r4, r0
   13ba0:	mov	r0, r4
   13ba4:	bl	13c48 <sprintf@plt+0x23bc>
   13ba8:	cmp	r0, #0
   13bac:	bne	13ba0 <sprintf@plt+0x2314>
   13bb0:	ldr	r2, [pc, #20]	; 13bcc <sprintf@plt+0x2340>
   13bb4:	mov	r0, r4
   13bb8:	mov	r1, #1
   13bbc:	mov	r3, #0
   13bc0:	add	r2, pc, r2
   13bc4:	pop	{r4, sl, fp, lr}
   13bc8:	b	11538 <rb_setselect@plt>
   13bcc:			; <UNDEFINED> instruction: 0xffffffcc
   13bd0:	push	{r4, r5, r6, sl, fp, lr}
   13bd4:	add	fp, sp, #16
   13bd8:	bl	116ac <rb_current_time@plt>
   13bdc:	ldr	r5, [pc, #92]	; 13c40 <sprintf@plt+0x23b4>
   13be0:	ldr	r5, [pc, r5]
   13be4:	cmp	r5, #0
   13be8:	popeq	{r4, r5, r6, sl, fp, pc}
   13bec:	ldr	r6, [pc, #80]	; 13c44 <sprintf@plt+0x23b8>
   13bf0:	mov	r4, r0
   13bf4:	add	r6, pc, r6
   13bf8:	ldr	r0, [r5]
   13bfc:	ldr	r5, [r5, #8]
   13c00:	ldr	r2, [r0, #280]	; 0x118
   13c04:	ldr	r1, [r0, #284]	; 0x11c
   13c08:	add	r2, r1, r2
   13c0c:	cmp	r2, r4
   13c10:	bgt	13c34 <sprintf@plt+0x23a8>
   13c14:	ldr	r2, [r0, #288]	; 0x120
   13c18:	lsl	r1, r1, #1
   13c1c:	ldr	r3, [r6, r2, lsl #2]
   13c20:	add	r3, r3, #1
   13c24:	str	r3, [r6, r2, lsl #2]
   13c28:	str	r4, [r0, #280]	; 0x118
   13c2c:	str	r1, [r0, #284]	; 0x11c
   13c30:	bl	142d4 <sprintf@plt+0x2a48>
   13c34:	cmp	r5, #0
   13c38:	bne	13bf8 <sprintf@plt+0x236c>
   13c3c:	pop	{r4, r5, r6, sl, fp, pc}
   13c40:	andeq	fp, r1, r0, lsr r4
   13c44:	strdeq	fp, [r1], -r4
   13c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c4c:	add	fp, sp, #28
   13c50:	sub	sp, sp, #532	; 0x214
   13c54:	sub	sp, sp, #1024	; 0x400
   13c58:	mov	r1, #128	; 0x80
   13c5c:	str	r1, [sp, #156]	; 0x9c
   13c60:	bl	11544 <rb_get_fd@plt>
   13c64:	add	r1, sp, #156	; 0x9c
   13c68:	add	r4, sp, #28
   13c6c:	movw	r2, #1036	; 0x40c
   13c70:	mov	r3, #0
   13c74:	mov	sl, #0
   13c78:	str	r1, [sp, #4]
   13c7c:	add	r1, sp, #160	; 0xa0
   13c80:	str	r4, [sp]
   13c84:	bl	11838 <recvfrom@plt>
   13c88:	mov	r6, r0
   13c8c:	add	r0, r0, #1
   13c90:	cmp	r0, #2
   13c94:	bcc	14278 <sprintf@plt+0x29ec>
   13c98:	mov	sl, #1
   13c9c:	cmp	r6, #13
   13ca0:	blt	14278 <sprintf@plt+0x29ec>
   13ca4:	ldr	r0, [sp, #168]	; 0xa8
   13ca8:	ldr	r3, [sp, #164]	; 0xa4
   13cac:	lsr	r2, r0, #16
   13cb0:	rev	r1, r0
   13cb4:	rev	r2, r2
   13cb8:	orr	r1, r2, r1, lsr #16
   13cbc:	str	r1, [sp, #168]	; 0xa8
   13cc0:	lsr	r1, r3, #16
   13cc4:	orr	r0, r1, r0, lsl #16
   13cc8:	rev	r1, r3
   13ccc:	rev	r0, r0
   13cd0:	pkhtb	r0, r0, r1, asr #16
   13cd4:	str	r0, [sp, #164]	; 0xa4
   13cd8:	ldr	r0, [pc, #1472]	; 142a0 <sprintf@plt+0x2a14>
   13cdc:	ldr	r0, [pc, r0]
   13ce0:	cmp	r0, #0
   13ce4:	beq	14278 <sprintf@plt+0x29ec>
   13ce8:	ldrh	r1, [sp, #160]	; 0xa0
   13cec:	ldr	r5, [r0]
   13cf0:	ldr	r2, [r5, #12]
   13cf4:	cmp	r2, r1
   13cf8:	beq	13d0c <sprintf@plt+0x2480>
   13cfc:	ldr	r0, [r0, #8]
   13d00:	cmp	r0, #0
   13d04:	bne	13cec <sprintf@plt+0x2460>
   13d08:	b	14278 <sprintf@plt+0x29ec>
   13d0c:	cmp	r5, #0
   13d10:	beq	14278 <sprintf@plt+0x29ec>
   13d14:	str	r3, [sp, #24]
   13d18:	ldr	r0, [pc, #1412]	; 142a4 <sprintf@plt+0x2a18>
   13d1c:	ldr	r0, [pc, r0]
   13d20:	ldr	r8, [r0]
   13d24:	cmp	r8, #1
   13d28:	blt	13e0c <sprintf@plt+0x2580>
   13d2c:	add	r0, r4, #8
   13d30:	mov	r9, #0
   13d34:	str	r0, [sp, #20]
   13d38:	ldr	r0, [pc, #1384]	; 142a8 <sprintf@plt+0x2a1c>
   13d3c:	ldr	r0, [pc, r0]
   13d40:	ldrh	r7, [sp, #28]
   13d44:	ldrh	r3, [sp, #30]
   13d48:	add	sl, r0, #4
   13d4c:	ldr	r0, [sp, #32]
   13d50:	str	r7, [sp, #12]
   13d54:	str	r0, [sp, #16]
   13d58:	ldrh	r0, [sl, #-4]
   13d5c:	cmp	r0, #2
   13d60:	beq	13dcc <sprintf@plt+0x2540>
   13d64:	cmp	r0, #10
   13d68:	bne	13ddc <sprintf@plt+0x2550>
   13d6c:	cmp	r7, #10
   13d70:	ldrheq	r0, [sl, #-2]
   13d74:	cmpeq	r0, r3
   13d78:	bne	13ddc <sprintf@plt+0x2550>
   13d7c:	ldr	r1, [sp, #20]
   13d80:	add	r4, sl, #4
   13d84:	mov	r2, #16
   13d88:	mov	r7, r3
   13d8c:	mov	r0, r4
   13d90:	bl	11514 <memcmp@plt>
   13d94:	mov	r2, #1
   13d98:	cmp	r0, #0
   13d9c:	beq	13e10 <sprintf@plt+0x2584>
   13da0:	ldr	r1, [pc, #1284]	; 142ac <sprintf@plt+0x2a20>
   13da4:	mov	r0, r4
   13da8:	mov	r2, #16
   13dac:	ldr	r1, [pc, r1]
   13db0:	bl	11514 <memcmp@plt>
   13db4:	mov	r3, r7
   13db8:	ldr	r7, [sp, #12]
   13dbc:	mov	r2, #1
   13dc0:	cmp	r0, #0
   13dc4:	bne	13ddc <sprintf@plt+0x2550>
   13dc8:	b	13e10 <sprintf@plt+0x2584>
   13dcc:	cmp	r7, #2
   13dd0:	ldrheq	r0, [sl, #-2]
   13dd4:	cmpeq	r0, r3
   13dd8:	beq	13df0 <sprintf@plt+0x2564>
   13ddc:	add	r9, r9, #1
   13de0:	add	sl, sl, #128	; 0x80
   13de4:	cmp	r9, r8
   13de8:	blt	13d58 <sprintf@plt+0x24cc>
   13dec:	b	13e0c <sprintf@plt+0x2580>
   13df0:	ldr	r0, [sl]
   13df4:	mov	r2, #1
   13df8:	cmp	r0, #0
   13dfc:	ldrne	r1, [sp, #16]
   13e00:	cmpne	r0, r1
   13e04:	beq	13e10 <sprintf@plt+0x2584>
   13e08:	b	13ddc <sprintf@plt+0x2550>
   13e0c:	mov	r2, #0
   13e10:	ldr	r0, [r5, #288]	; 0x120
   13e14:	cmp	r2, r0
   13e18:	beq	13e30 <sprintf@plt+0x25a4>
   13e1c:	ldr	r0, [pc, #1164]	; 142b0 <sprintf@plt+0x2a24>
   13e20:	add	r0, pc, r0
   13e24:	ldr	r1, [r0, r2, lsl #2]
   13e28:	add	r1, r1, #3
   13e2c:	str	r1, [r0, r2, lsl #2]
   13e30:	ldr	r0, [sp, #24]
   13e34:	mov	sl, #1
   13e38:	str	r2, [sp, #20]
   13e3c:	uxth	r0, r0
   13e40:	cmp	r0, #256	; 0x100
   13e44:	add	r0, sp, #160	; 0xa0
   13e48:	bne	14278 <sprintf@plt+0x29ec>
   13e4c:	add	r4, r0, r6
   13e50:	mov	r1, #256	; 0x100
   13e54:	add	r6, r0, #12
   13e58:	sub	lr, fp, #256	; 0x100
   13e5c:	str	r1, [sp]
   13e60:	sub	r3, lr, #131	; 0x83
   13e64:	mov	r1, r4
   13e68:	mov	r2, r6
   13e6c:	bl	14a90 <sprintf@plt+0x3204>
   13e70:	cmp	r0, #0
   13e74:	ble	14278 <sprintf@plt+0x29ec>
   13e78:	sub	lr, fp, #256	; 0x100
   13e7c:	add	r1, r5, #21
   13e80:	sub	r0, lr, #131	; 0x83
   13e84:	bl	11670 <rb_strcasecmp@plt>
   13e88:	cmp	r0, #0
   13e8c:	bne	14278 <sprintf@plt+0x29ec>
   13e90:	ldr	r1, [sp, #160]	; 0xa0
   13e94:	tst	r1, #251658240	; 0xf000000
   13e98:	bne	13ef8 <sprintf@plt+0x266c>
   13e9c:	ldr	r2, [sp, #164]	; 0xa4
   13ea0:	mov	r0, r2
   13ea4:	bfc	r0, #0, #16
   13ea8:	cmp	r0, #0
   13eac:	beq	13ef8 <sprintf@plt+0x266c>
   13eb0:	movw	r8, #65535	; 0xffff
   13eb4:	tst	r2, r8
   13eb8:	beq	13f34 <sprintf@plt+0x26a8>
   13ebc:	mov	r0, r6
   13ec0:	mov	r1, r4
   13ec4:	bl	150c0 <sprintf@plt+0x3834>
   13ec8:	cmp	r0, #0
   13ecc:	blt	14258 <sprintf@plt+0x29cc>
   13ed0:	add	r3, sp, #160	; 0xa0
   13ed4:	add	r0, r6, r0
   13ed8:	ldm	r3, {r1, r2, r3}
   13edc:	add	r6, r0, #4
   13ee0:	sub	r7, r2, #1
   13ee4:	pkhbt	r2, r7, r2
   13ee8:	tst	r7, r8
   13eec:	str	r2, [sp, #164]	; 0xa4
   13ef0:	bne	13ebc <sprintf@plt+0x2630>
   13ef4:	b	13f38 <sprintf@plt+0x26ac>
   13ef8:	ubfx	r0, r1, #24, #4
   13efc:	ldr	r3, [sp, #20]
   13f00:	sub	r1, r0, #4
   13f04:	cmp	r1, #2
   13f08:	bcc	13f1c <sprintf@plt+0x2690>
   13f0c:	cmp	r0, #3
   13f10:	beq	140b8 <sprintf@plt+0x282c>
   13f14:	cmp	r0, #2
   13f18:	bne	140d4 <sprintf@plt+0x2848>
   13f1c:	ldr	r0, [pc, #912]	; 142b4 <sprintf@plt+0x2a28>
   13f20:	add	r0, pc, r0
   13f24:	ldr	r1, [r0, r3, lsl #2]
   13f28:	add	r1, r1, #1
   13f2c:	str	r1, [r0, r3, lsl #2]
   13f30:	b	14270 <sprintf@plt+0x29e4>
   13f34:	ldr	r3, [sp, #168]	; 0xa8
   13f38:	cmp	r6, r4
   13f3c:	bcs	1401c <sprintf@plt+0x2790>
   13f40:	lsr	r0, r2, #16
   13f44:	orr	r0, r0, r3, lsl #16
   13f48:	uxth	r7, r0
   13f4c:	cmp	r7, #0
   13f50:	beq	1401c <sprintf@plt+0x2790>
   13f54:	movw	r8, #0
   13f58:	movt	r8, #65535	; 0xffff
   13f5c:	str	r1, [sp, #160]	; 0xa0
   13f60:	uxth	r1, r2
   13f64:	add	r0, r8, r0, lsl #16
   13f68:	sub	lr, fp, #256	; 0x100
   13f6c:	str	r3, [sp, #168]	; 0xa8
   13f70:	mov	r2, r6
   13f74:	orr	r0, r0, r1
   13f78:	mov	r1, r4
   13f7c:	sub	r3, lr, #131	; 0x83
   13f80:	str	r0, [sp, #164]	; 0xa4
   13f84:	movw	r0, #355	; 0x163
   13f88:	str	r0, [sp]
   13f8c:	add	r0, sp, #160	; 0xa0
   13f90:	bl	14a90 <sprintf@plt+0x3204>
   13f94:	cmp	r0, #1
   13f98:	blt	14258 <sprintf@plt+0x29cc>
   13f9c:	add	r9, r6, r0
   13fa0:	mov	r1, #0
   13fa4:	add	r6, r9, #10
   13fa8:	strb	r1, [fp, #-132]	; 0xffffff7c
   13fac:	cmp	r6, r4
   13fb0:	bcs	1401c <sprintf@plt+0x2790>
   13fb4:	mov	r0, r9
   13fb8:	bl	1515c <sprintf@plt+0x38d0>
   13fbc:	mov	r7, r0
   13fc0:	add	r0, r9, #2
   13fc4:	bl	1515c <sprintf@plt+0x38d0>
   13fc8:	add	r0, r9, #4
   13fcc:	bl	1516c <sprintf@plt+0x38e0>
   13fd0:	str	r0, [r5, #16]
   13fd4:	add	r0, r9, #8
   13fd8:	bl	1515c <sprintf@plt+0x38d0>
   13fdc:	cmp	r7, #28
   13fe0:	beq	1421c <sprintf@plt+0x2990>
   13fe4:	cmp	r7, #12
   13fe8:	beq	141d0 <sprintf@plt+0x2944>
   13fec:	cmp	r7, #1
   13ff0:	beq	14248 <sprintf@plt+0x29bc>
   13ff4:	add	r6, r6, r0
   13ff8:	cmp	r6, r4
   13ffc:	bcs	1401c <sprintf@plt+0x2790>
   14000:	add	r3, sp, #160	; 0xa0
   14004:	ldm	r3, {r1, r2, r3}
   14008:	lsr	r0, r2, #16
   1400c:	orr	r0, r0, r3, lsl #16
   14010:	uxth	r7, r0
   14014:	cmp	r7, #0
   14018:	bne	13f5c <sprintf@plt+0x26d0>
   1401c:	ldrb	r0, [r5, #20]
   14020:	cmp	r0, #12
   14024:	bne	14058 <sprintf@plt+0x27cc>
   14028:	ldr	r1, [r5, #420]	; 0x1a4
   1402c:	cmp	r1, #0
   14030:	beq	14258 <sprintf@plt+0x29cc>
   14034:	mov	r0, #292	; 0x124
   14038:	ldrh	r2, [r5, r0]
   1403c:	ldr	r0, [r5, #424]	; 0x1a8
   14040:	cmp	r2, #10
   14044:	mov	r2, #0
   14048:	movne	r3, #1
   1404c:	moveq	r3, #28
   14050:	bl	143d4 <sprintf@plt+0x2b48>
   14054:	b	1409c <sprintf@plt+0x2810>
   14058:	mov	r0, #1
   1405c:	mov	r1, #132	; 0x84
   14060:	bl	115b0 <calloc@plt>
   14064:	cmp	r0, #0
   14068:	beq	1429c <sprintf@plt+0x2a10>
   1406c:	ldr	r1, [r5, #420]	; 0x1a4
   14070:	mov	r6, r0
   14074:	mov	r2, #128	; 0x80
   14078:	str	r1, [r0], #4
   1407c:	add	r1, r5, #292	; 0x124
   14080:	bl	116c4 <memcpy@plt>
   14084:	ldr	r1, [r5, #424]	; 0x1a8
   14088:	ldm	r1, {r0, r2}
   1408c:	mov	r1, r6
   14090:	blx	r2
   14094:	mov	r0, r6
   14098:	bl	1164c <free@plt>
   1409c:	ldr	r0, [r5, #8]
   140a0:	ldr	r1, [r5, #4]
   140a4:	cmp	r0, #0
   140a8:	beq	14100 <sprintf@plt+0x2874>
   140ac:	str	r1, [r0, #4]
   140b0:	ldr	r1, [r5, #4]
   140b4:	b	1410c <sprintf@plt+0x2880>
   140b8:	ldr	r0, [pc, #504]	; 142b8 <sprintf@plt+0x2a2c>
   140bc:	add	r0, pc, r0
   140c0:	ldr	r1, [r0, r3, lsl #2]
   140c4:	asr	r2, r1, #31
   140c8:	add	r1, r1, r2, lsr #30
   140cc:	asr	r1, r1, #2
   140d0:	str	r1, [r0, r3, lsl #2]
   140d4:	ldr	r1, [r5, #424]	; 0x1a8
   140d8:	ldm	r1, {r0, r2}
   140dc:	mov	r1, #0
   140e0:	blx	r2
   140e4:	ldr	r0, [r5, #8]
   140e8:	ldr	r1, [r5, #4]
   140ec:	cmp	r0, #0
   140f0:	beq	14178 <sprintf@plt+0x28ec>
   140f4:	str	r1, [r0, #4]
   140f8:	ldr	r1, [r5, #4]
   140fc:	b	14184 <sprintf@plt+0x28f8>
   14100:	ldr	r2, [pc, #444]	; 142c4 <sprintf@plt+0x2a38>
   14104:	add	r2, pc, r2
   14108:	str	r1, [r2, #4]
   1410c:	ldr	r2, [pc, #436]	; 142c8 <sprintf@plt+0x2a3c>
   14110:	cmp	r1, #0
   14114:	add	r2, pc, r2
   14118:	mov	r3, r2
   1411c:	addne	r3, r1, #8
   14120:	str	r0, [r3]
   14124:	mov	r0, #0
   14128:	str	r0, [r5, #4]
   1412c:	str	r0, [r5, #8]
   14130:	ldr	r0, [r2, #8]
   14134:	sub	r0, r0, #1
   14138:	str	r0, [r2, #8]
   1413c:	ldr	r0, [r5, #420]	; 0x1a4
   14140:	cmp	r0, #0
   14144:	beq	1414c <sprintf@plt+0x28c0>
   14148:	bl	1164c <free@plt>
   1414c:	mov	r0, r5
   14150:	bl	1164c <free@plt>
   14154:	ldr	r0, [pc, #368]	; 142cc <sprintf@plt+0x2a40>
   14158:	ldr	r3, [sp, #20]
   1415c:	add	r0, pc, r0
   14160:	ldr	r1, [r0, r3, lsl #2]
   14164:	asr	r2, r1, #31
   14168:	add	r1, r1, r2, lsr #30
   1416c:	asr	r1, r1, #2
   14170:	str	r1, [r0, r3, lsl #2]
   14174:	b	14278 <sprintf@plt+0x29ec>
   14178:	ldr	r2, [pc, #316]	; 142bc <sprintf@plt+0x2a30>
   1417c:	add	r2, pc, r2
   14180:	str	r1, [r2, #4]
   14184:	ldr	r2, [pc, #308]	; 142c0 <sprintf@plt+0x2a34>
   14188:	cmp	r1, #0
   1418c:	add	r2, pc, r2
   14190:	mov	r3, r2
   14194:	addne	r3, r1, #8
   14198:	str	r0, [r3]
   1419c:	mov	r0, #0
   141a0:	str	r0, [r5, #4]
   141a4:	str	r0, [r5, #8]
   141a8:	ldr	r0, [r2, #8]
   141ac:	sub	r0, r0, #1
   141b0:	str	r0, [r2, #8]
   141b4:	ldr	r0, [r5, #420]	; 0x1a4
   141b8:	cmp	r0, #0
   141bc:	beq	141c4 <sprintf@plt+0x2938>
   141c0:	bl	1164c <free@plt>
   141c4:	mov	r0, r5
   141c8:	bl	1164c <free@plt>
   141cc:	b	14278 <sprintf@plt+0x29ec>
   141d0:	ldrb	r0, [r5, #20]
   141d4:	cmp	r0, #12
   141d8:	bne	14258 <sprintf@plt+0x29cc>
   141dc:	movw	r0, #355	; 0x163
   141e0:	sub	lr, fp, #256	; 0x100
   141e4:	mov	r1, r4
   141e8:	mov	r2, r6
   141ec:	str	r0, [sp]
   141f0:	add	r0, sp, #160	; 0xa0
   141f4:	sub	r3, lr, #131	; 0x83
   141f8:	bl	14a90 <sprintf@plt+0x3204>
   141fc:	cmp	r0, #1
   14200:	blt	14258 <sprintf@plt+0x29cc>
   14204:	ldr	r0, [r5, #420]	; 0x1a4
   14208:	sub	lr, fp, #256	; 0x100
   1420c:	mov	r2, #256	; 0x100
   14210:	sub	r1, lr, #131	; 0x83
   14214:	bl	11628 <rb_strlcpy@plt>
   14218:	b	1401c <sprintf@plt+0x2790>
   1421c:	cmp	r0, #16
   14220:	ldrbeq	r0, [r5, #20]
   14224:	cmpeq	r0, #28
   14228:	bne	14258 <sprintf@plt+0x29cc>
   1422c:	mov	r0, #292	; 0x124
   14230:	mov	r1, #10
   14234:	strh	r1, [r5, r0]
   14238:	add	r0, r5, #300	; 0x12c
   1423c:	vld1.8	{d16-d17}, [r6]
   14240:	vst1.8	{d16-d17}, [r0]
   14244:	b	1401c <sprintf@plt+0x2790>
   14248:	cmp	r0, #4
   1424c:	ldrbeq	r0, [r5, #20]
   14250:	cmpeq	r0, #1
   14254:	beq	14284 <sprintf@plt+0x29f8>
   14258:	ldr	r0, [pc, #112]	; 142d0 <sprintf@plt+0x2a44>
   1425c:	ldr	r2, [sp, #20]
   14260:	add	r0, pc, r0
   14264:	ldr	r1, [r0, r2, lsl #2]
   14268:	add	r1, r1, #1
   1426c:	str	r1, [r0, r2, lsl #2]
   14270:	mov	r0, r5
   14274:	bl	142d4 <sprintf@plt+0x2a48>
   14278:	mov	r0, sl
   1427c:	sub	sp, fp, #28
   14280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14284:	mov	r0, #292	; 0x124
   14288:	mov	r1, #2
   1428c:	strh	r1, [r5, r0]
   14290:	ldr	r0, [r6]
   14294:	str	r0, [r5, #296]	; 0x128
   14298:	b	1401c <sprintf@plt+0x2790>
   1429c:	bl	11754 <rb_outofmemory@plt>
   142a0:	andeq	fp, r1, r4, lsr r3
   142a4:	andeq	r6, r1, ip, asr #8
   142a8:	andeq	r6, r1, r8, lsr r4
   142ac:	andeq	r6, r1, r4, asr #7
   142b0:	andeq	fp, r1, r8, asr #3
   142b4:	andeq	fp, r1, r8, asr #1
   142b8:	andeq	sl, r1, ip, lsr #30
   142bc:	muleq	r1, r4, lr
   142c0:	andeq	sl, r1, r4, lsl #29
   142c4:	andeq	sl, r1, ip, lsl #30
   142c8:	strdeq	sl, [r1], -ip
   142cc:	andeq	sl, r1, ip, lsl #29
   142d0:	andeq	sl, r1, r8, lsl #27
   142d4:	push	{r4, sl, fp, lr}
   142d8:	add	fp, sp, #8
   142dc:	mov	r4, r0
   142e0:	ldrb	r0, [r0, #277]	; 0x115
   142e4:	sub	r0, r0, #1
   142e8:	tst	r0, #255	; 0xff
   142ec:	strb	r0, [r4, #277]	; 0x115
   142f0:	beq	14318 <sprintf@plt+0x2a8c>
   142f4:	ldrb	r3, [r4, #20]
   142f8:	cmp	r3, #1
   142fc:	cmpne	r3, #28
   14300:	bne	14344 <sprintf@plt+0x2ab8>
   14304:	ldr	r1, [r4, #420]	; 0x1a4
   14308:	mov	r0, #0
   1430c:	mov	r2, r4
   14310:	pop	{r4, sl, fp, lr}
   14314:	b	143d4 <sprintf@plt+0x2b48>
   14318:	ldr	r1, [r4, #424]	; 0x1a8
   1431c:	ldm	r1, {r0, r2}
   14320:	mov	r1, #0
   14324:	blx	r2
   14328:	ldr	r0, [r4, #8]
   1432c:	ldr	r1, [r4, #4]
   14330:	cmp	r0, #0
   14334:	beq	14374 <sprintf@plt+0x2ae8>
   14338:	str	r1, [r0, #4]
   1433c:	ldr	r1, [r4, #4]
   14340:	b	14380 <sprintf@plt+0x2af4>
   14344:	cmp	r3, #12
   14348:	popne	{r4, sl, fp, pc}
   1434c:	add	r0, r4, #21
   14350:	add	r2, r4, #292	; 0x124
   14354:	mov	r1, #256	; 0x100
   14358:	mov	r3, #0
   1435c:	bl	13994 <sprintf@plt+0x2108>
   14360:	mov	r0, #12
   14364:	strb	r0, [r4, #20]
   14368:	mov	r0, r4
   1436c:	pop	{r4, sl, fp, lr}
   14370:	b	14548 <sprintf@plt+0x2cbc>
   14374:	ldr	r2, [pc, #80]	; 143cc <sprintf@plt+0x2b40>
   14378:	add	r2, pc, r2
   1437c:	str	r1, [r2, #4]
   14380:	ldr	r2, [pc, #72]	; 143d0 <sprintf@plt+0x2b44>
   14384:	cmp	r1, #0
   14388:	add	r2, pc, r2
   1438c:	mov	r3, r2
   14390:	addne	r3, r1, #8
   14394:	str	r0, [r3]
   14398:	mov	r0, #0
   1439c:	str	r0, [r4, #4]
   143a0:	str	r0, [r4, #8]
   143a4:	ldr	r0, [r2, #8]
   143a8:	sub	r0, r0, #1
   143ac:	str	r0, [r2, #8]
   143b0:	ldr	r0, [r4, #420]	; 0x1a4
   143b4:	cmp	r0, #0
   143b8:	beq	143c0 <sprintf@plt+0x2b34>
   143bc:	bl	1164c <free@plt>
   143c0:	mov	r0, r4
   143c4:	pop	{r4, sl, fp, lr}
   143c8:	b	1164c <free@plt>
   143cc:	muleq	r1, r8, ip
   143d0:	andeq	sl, r1, r8, lsl #25
   143d4:	push	{r4, r5, r6, r7, fp, lr}
   143d8:	add	fp, sp, #16
   143dc:	mov	r4, r3
   143e0:	mov	r5, r2
   143e4:	mov	r6, r1
   143e8:	cmp	r2, #0
   143ec:	bne	14420 <sprintf@plt+0x2b94>
   143f0:	bl	14444 <sprintf@plt+0x2bb8>
   143f4:	mov	r5, r0
   143f8:	mov	r0, r6
   143fc:	bl	116a0 <strlen@plt>
   14400:	add	r0, r0, #1
   14404:	bl	11784 <malloc@plt>
   14408:	cmp	r0, #0
   1440c:	beq	14440 <sprintf@plt+0x2bb4>
   14410:	mov	r1, r6
   14414:	mov	r7, r0
   14418:	bl	11700 <strcpy@plt>
   1441c:	str	r7, [r5, #420]	; 0x1a4
   14420:	add	r0, r5, #21
   14424:	mov	r1, r6
   14428:	mov	r2, #256	; 0x100
   1442c:	bl	11628 <rb_strlcpy@plt>
   14430:	strb	r4, [r5, #20]
   14434:	mov	r0, r5
   14438:	pop	{r4, r5, r6, r7, fp, lr}
   1443c:	b	14548 <sprintf@plt+0x2cbc>
   14440:	bl	11754 <rb_outofmemory@plt>
   14444:	push	{r4, r5, r6, sl, fp, lr}
   14448:	add	fp, sp, #16
   1444c:	sub	sp, sp, #8
   14450:	mov	r5, r0
   14454:	mov	r0, #1
   14458:	mov	r1, #428	; 0x1ac
   1445c:	bl	115b0 <calloc@plt>
   14460:	cmp	r0, #0
   14464:	beq	14538 <sprintf@plt+0x2cac>
   14468:	mov	r4, r0
   1446c:	bl	116ac <rb_current_time@plt>
   14470:	mov	r1, #3
   14474:	add	r6, sp, #6
   14478:	strb	r1, [r4, #277]	; 0x115
   1447c:	mov	r1, #4
   14480:	str	r0, [r4, #280]	; 0x118
   14484:	str	r1, [r4, #284]	; 0x11c
   14488:	str	r5, [r4, #424]	; 0x1a8
   1448c:	mov	r0, r6
   14490:	mov	r1, #2
   14494:	bl	117fc <rb_get_random@plt>
   14498:	ldr	r0, [pc, #156]	; 1453c <sprintf@plt+0x2cb0>
   1449c:	ldr	r0, [pc, r0]
   144a0:	ldrh	r1, [sp, #6]
   144a4:	cmp	r0, #0
   144a8:	mov	r2, r0
   144ac:	beq	144d8 <sprintf@plt+0x2c4c>
   144b0:	ldr	r3, [r2]
   144b4:	ldr	r5, [r3, #12]
   144b8:	cmp	r5, r1
   144bc:	beq	144d0 <sprintf@plt+0x2c44>
   144c0:	ldr	r2, [r2, #8]
   144c4:	cmp	r2, #0
   144c8:	bne	144b0 <sprintf@plt+0x2c24>
   144cc:	b	144d8 <sprintf@plt+0x2c4c>
   144d0:	cmp	r3, #0
   144d4:	bne	1448c <sprintf@plt+0x2c00>
   144d8:	cmp	r0, #0
   144dc:	mov	r2, #0
   144e0:	str	r4, [r4]
   144e4:	str	r2, [r4, #4]
   144e8:	str	r0, [r4, #8]
   144ec:	str	r1, [r4, #12]
   144f0:	beq	14500 <sprintf@plt+0x2c74>
   144f4:	add	r0, r0, #4
   144f8:	str	r4, [r0]
   144fc:	b	14514 <sprintf@plt+0x2c88>
   14500:	ldr	r0, [pc, #56]	; 14540 <sprintf@plt+0x2cb4>
   14504:	add	r0, pc, r0
   14508:	ldr	r1, [r0, #4]!
   1450c:	cmp	r1, #0
   14510:	streq	r4, [r0]
   14514:	ldr	r0, [pc, #40]	; 14544 <sprintf@plt+0x2cb8>
   14518:	add	r0, pc, r0
   1451c:	str	r4, [r0]
   14520:	ldr	r1, [r0, #8]
   14524:	add	r1, r1, #1
   14528:	str	r1, [r0, #8]
   1452c:	mov	r0, r4
   14530:	sub	sp, fp, #16
   14534:	pop	{r4, r5, r6, sl, fp, pc}
   14538:	bl	11754 <rb_outofmemory@plt>
   1453c:	andeq	sl, r1, r4, ror fp
   14540:	andeq	sl, r1, ip, lsl #22
   14544:	strdeq	sl, [r1], -r8
   14548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1454c:	add	fp, sp, #28
   14550:	sub	sp, sp, #12
   14554:	sub	sp, sp, #1024	; 0x400
   14558:	add	r5, sp, #8
   1455c:	mov	r9, r0
   14560:	mov	r1, #0
   14564:	mov	r2, #1024	; 0x400
   14568:	mov	r4, #1024	; 0x400
   1456c:	mov	r0, r5
   14570:	bl	115e0 <memset@plt>
   14574:	ldrb	r2, [r9, #20]
   14578:	add	r0, r9, #21
   1457c:	mov	r1, #1
   14580:	mov	r3, r5
   14584:	str	r4, [sp]
   14588:	bl	151a8 <sprintf@plt+0x391c>
   1458c:	cmp	r0, #1
   14590:	blt	1472c <sprintf@plt+0x2ea0>
   14594:	ldr	r1, [sp, #8]
   14598:	mov	r5, r0
   1459c:	ldrh	r0, [r9, #12]
   145a0:	bfc	r1, #0, #16
   145a4:	orr	r0, r1, r0
   145a8:	str	r0, [sp, #8]
   145ac:	ldrb	r0, [r9, #278]	; 0x116
   145b0:	add	r1, r0, #1
   145b4:	strb	r1, [r9, #278]	; 0x116
   145b8:	ldr	r0, [pc, #388]	; 14744 <sprintf@plt+0x2eb8>
   145bc:	ldr	r0, [pc, r0]
   145c0:	ldr	r2, [pc, #384]	; 14748 <sprintf@plt+0x2ebc>
   145c4:	add	r0, r0, #1
   145c8:	add	r2, pc, r2
   145cc:	str	r0, [r2]
   145d0:	ldr	r0, [pc, #372]	; 1474c <sprintf@plt+0x2ec0>
   145d4:	ldr	r0, [pc, r0]
   145d8:	ldr	r0, [r0]
   145dc:	cmp	r0, #1
   145e0:	blt	1472c <sprintf@plt+0x2ea0>
   145e4:	ldr	r4, [pc, #356]	; 14750 <sprintf@plt+0x2ec4>
   145e8:	mvn	r2, #0
   145ec:	mov	r8, #0
   145f0:	add	r6, sp, #8
   145f4:	uxtab	r7, r2, r1
   145f8:	add	r4, pc, r4
   145fc:	add	r1, r7, r8
   14600:	sdiv	r2, r1, r0
   14604:	mls	sl, r2, r0, r1
   14608:	ldr	r1, [r4, sl, lsl #2]
   1460c:	cmp	r1, #0
   14610:	beq	14644 <sprintf@plt+0x2db8>
   14614:	sub	r3, r1, #1
   14618:	ldr	r1, [pc, #308]	; 14754 <sprintf@plt+0x2ec8>
   1461c:	mov	r2, #243	; 0xf3
   14620:	cmp	r3, #3
   14624:	ldr	r1, [pc, r1]
   14628:	ldrls	r2, [pc, #296]	; 14758 <sprintf@plt+0x2ecc>
   1462c:	addls	r2, pc, r2
   14630:	ldrls	r2, [r2, r3, lsl #2]
   14634:	sdiv	r3, r1, r2
   14638:	mls	r1, r3, r2, r1
   1463c:	cmp	r1, #0
   14640:	bne	14698 <sprintf@plt+0x2e0c>
   14644:	ldr	r0, [pc, #272]	; 1475c <sprintf@plt+0x2ed0>
   14648:	ldr	r0, [pc, r0]
   1464c:	bl	11544 <rb_get_fd@plt>
   14650:	ldr	r2, [pc, #264]	; 14760 <sprintf@plt+0x2ed4>
   14654:	lsl	r1, sl, #7
   14658:	mov	r3, #0
   1465c:	ldr	r2, [pc, r2]
   14660:	ldrh	r1, [r2, r1]!	; <UNPREDICTABLE>
   14664:	cmp	r1, #2
   14668:	mov	r1, #28
   1466c:	str	r2, [sp]
   14670:	mov	r2, r5
   14674:	movweq	r1, #16
   14678:	str	r1, [sp, #4]
   1467c:	mov	r1, r6
   14680:	bl	115c8 <sendto@plt>
   14684:	cmp	r0, r5
   14688:	beq	14734 <sprintf@plt+0x2ea8>
   1468c:	ldr	r0, [pc, #208]	; 14764 <sprintf@plt+0x2ed8>
   14690:	ldr	r0, [pc, r0]
   14694:	ldr	r0, [r0]
   14698:	add	r8, r8, #1
   1469c:	cmp	r8, r0
   146a0:	blt	145fc <sprintf@plt+0x2d70>
   146a4:	cmp	r0, #1
   146a8:	blt	1472c <sprintf@plt+0x2ea0>
   146ac:	mov	r6, #0
   146b0:	add	r8, sp, #8
   146b4:	add	r1, r7, r6
   146b8:	sdiv	r2, r1, r0
   146bc:	mls	sl, r2, r0, r1
   146c0:	ldr	r1, [r4, sl, lsl #2]
   146c4:	cmp	r1, #0
   146c8:	beq	14720 <sprintf@plt+0x2e94>
   146cc:	ldr	r0, [pc, #148]	; 14768 <sprintf@plt+0x2edc>
   146d0:	ldr	r0, [pc, r0]
   146d4:	bl	11544 <rb_get_fd@plt>
   146d8:	ldr	r2, [pc, #140]	; 1476c <sprintf@plt+0x2ee0>
   146dc:	lsl	r1, sl, #7
   146e0:	mov	r3, #0
   146e4:	ldr	r2, [pc, r2]
   146e8:	ldrh	r1, [r2, r1]!	; <UNPREDICTABLE>
   146ec:	cmp	r1, #2
   146f0:	mov	r1, #28
   146f4:	str	r2, [sp]
   146f8:	mov	r2, r5
   146fc:	movweq	r1, #16
   14700:	str	r1, [sp, #4]
   14704:	mov	r1, r8
   14708:	bl	115c8 <sendto@plt>
   1470c:	cmp	r0, r5
   14710:	beq	14734 <sprintf@plt+0x2ea8>
   14714:	ldr	r0, [pc, #84]	; 14770 <sprintf@plt+0x2ee4>
   14718:	ldr	r0, [pc, r0]
   1471c:	ldr	r0, [r0]
   14720:	add	r6, r6, #1
   14724:	cmp	r6, r0
   14728:	blt	146b4 <sprintf@plt+0x2e28>
   1472c:	sub	sp, fp, #28
   14730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14734:	cmn	sl, #1
   14738:	strne	sl, [r9, #288]	; 0x120
   1473c:	sub	sp, fp, #28
   14740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14744:	andeq	sl, r1, r0, ror #20
   14748:	andeq	sl, r1, r4, asr sl
   1474c:	muleq	r1, r4, fp
   14750:	strdeq	sl, [r1], -r0
   14754:	strdeq	sl, [r1], -r8
   14758:	andeq	r4, r0, r4, ror #28
   1475c:	muleq	r1, r8, r9
   14760:	andeq	r5, r1, r8, lsl fp
   14764:	ldrdeq	r5, [r1], -r8
   14768:	andeq	sl, r1, r0, lsl r9
   1476c:	muleq	r1, r0, sl
   14770:	andeq	r5, r1, r0, asr sl
   14774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14778:	add	fp, sp, #28
   1477c:	sub	sp, sp, #4
   14780:	vpush	{d8-d9}
   14784:	sub	sp, sp, #168	; 0xa8
   14788:	ldr	r6, [pc, #700]	; 14a4c <sprintf@plt+0x31c0>
   1478c:	mov	r0, #0
   14790:	ldr	r6, [pc, r6]
   14794:	str	r0, [r6]
   14798:	ldr	r0, [pc, #688]	; 14a50 <sprintf@plt+0x31c4>
   1479c:	ldr	r1, [pc, #688]	; 14a54 <sprintf@plt+0x31c8>
   147a0:	add	r0, pc, r0
   147a4:	add	r1, pc, r1
   147a8:	bl	115d4 <fopen@plt>
   147ac:	cmp	r0, #0
   147b0:	beq	149ac <sprintf@plt+0x3120>
   147b4:	mov	r4, r0
   147b8:	add	r5, sp, #4
   147bc:	mov	r1, #128	; 0x80
   147c0:	mov	r0, r5
   147c4:	mov	r2, r4
   147c8:	bl	1161c <fgets_unlocked@plt>
   147cc:	cmp	r0, #0
   147d0:	beq	1499c <sprintf@plt+0x3110>
   147d4:	sub	r0, fp, #80	; 0x50
   147d8:	sub	r9, r5, #1
   147dc:	mov	r6, #0
   147e0:	vmov.i32	q4, #0	; 0x00000000
   147e4:	add	r0, r0, #4
   147e8:	str	r0, [sp]
   147ec:	ldr	r7, [pc, #612]	; 14a58 <sprintf@plt+0x31cc>
   147f0:	add	r7, pc, r7
   147f4:	b	14944 <sprintf@plt+0x30b8>
   147f8:	cmp	r2, #59	; 0x3b
   147fc:	mov	r8, sl
   14800:	beq	14984 <sprintf@plt+0x30f8>
   14804:	ldrb	r2, [r8, #1]!
   14808:	cmp	r2, #0
   1480c:	beq	14820 <sprintf@plt+0x2f94>
   14810:	add	r3, r1, r2, lsl #1
   14814:	ldrh	r3, [r3]
   14818:	ands	r3, r3, #8192	; 0x2000
   1481c:	beq	14804 <sprintf@plt+0x2f78>
   14820:	cmp	r2, #0
   14824:	beq	14984 <sprintf@plt+0x30f8>
   14828:	strb	r6, [r8]
   1482c:	ldr	r0, [r0]
   14830:	ldrb	r1, [r8, #1]!
   14834:	add	r1, r0, r1, lsl #1
   14838:	ldrb	r1, [r1, #1]
   1483c:	tst	r1, #32
   14840:	bne	14830 <sprintf@plt+0x2fa4>
   14844:	ldr	r1, [pc, #544]	; 14a6c <sprintf@plt+0x31e0>
   14848:	mov	r0, r8
   1484c:	add	r1, pc, r1
   14850:	bl	11850 <strpbrk@plt>
   14854:	cmp	r0, #0
   14858:	strbne	r6, [r0]
   1485c:	mov	r0, sl
   14860:	ldr	r1, [pc, #520]	; 14a70 <sprintf@plt+0x31e4>
   14864:	add	r1, pc, r1
   14868:	bl	11670 <rb_strcasecmp@plt>
   1486c:	cmp	r0, #0
   14870:	beq	1492c <sprintf@plt+0x30a0>
   14874:	ldr	r1, [pc, #508]	; 14a78 <sprintf@plt+0x31ec>
   14878:	mov	r0, sl
   1487c:	add	r1, pc, r1
   14880:	bl	11670 <rb_strcasecmp@plt>
   14884:	cmp	r0, #0
   14888:	bne	14984 <sprintf@plt+0x30f8>
   1488c:	ldr	r0, [pc, #488]	; 14a7c <sprintf@plt+0x31f0>
   14890:	ldr	r0, [pc, r0]
   14894:	ldr	r0, [r0]
   14898:	cmp	r0, #9
   1489c:	bgt	14984 <sprintf@plt+0x30f8>
   148a0:	ldr	r0, [sp]
   148a4:	mov	r1, #12
   148a8:	sub	r2, fp, #80	; 0x50
   148ac:	sub	r3, fp, #84	; 0x54
   148b0:	vst1.32	{d8-d9}, [r0], r1
   148b4:	vst1.32	{d8-d9}, [r0]
   148b8:	mov	r0, #5
   148bc:	str	r0, [fp, #-80]	; 0xffffffb0
   148c0:	mov	r0, #2
   148c4:	str	r0, [fp, #-72]	; 0xffffffb8
   148c8:	mov	r0, r8
   148cc:	ldr	r1, [pc, #428]	; 14a80 <sprintf@plt+0x31f4>
   148d0:	add	r1, pc, r1
   148d4:	bl	1167c <getaddrinfo@plt>
   148d8:	cmp	r0, #0
   148dc:	bne	14984 <sprintf@plt+0x30f8>
   148e0:	ldr	r8, [fp, #-84]	; 0xffffffac
   148e4:	cmp	r8, #0
   148e8:	beq	14984 <sprintf@plt+0x30f8>
   148ec:	ldr	r0, [pc, #400]	; 14a84 <sprintf@plt+0x31f8>
   148f0:	ldr	r0, [pc, r0]
   148f4:	ldr	sl, [r0]
   148f8:	ldr	r0, [pc, #392]	; 14a88 <sprintf@plt+0x31fc>
   148fc:	ldr	r0, [pc, r0]
   14900:	ldr	r2, [r8, #16]
   14904:	ldr	r1, [r8, #20]
   14908:	add	r0, r0, sl, lsl #7
   1490c:	bl	116c4 <memcpy@plt>
   14910:	ldr	r1, [pc, #372]	; 14a8c <sprintf@plt+0x3200>
   14914:	add	r0, sl, #1
   14918:	ldr	r1, [pc, r1]
   1491c:	str	r0, [r1]
   14920:	mov	r0, r8
   14924:	bl	115ec <freeaddrinfo@plt>
   14928:	b	14984 <sprintf@plt+0x30f8>
   1492c:	ldr	r0, [pc, #320]	; 14a74 <sprintf@plt+0x31e8>
   14930:	mov	r1, r8
   14934:	mov	r2, #256	; 0x100
   14938:	ldr	r0, [pc, r0]
   1493c:	bl	11628 <rb_strlcpy@plt>
   14940:	b	14984 <sprintf@plt+0x30f8>
   14944:	mov	r0, r5
   14948:	mov	r1, r7
   1494c:	bl	11850 <strpbrk@plt>
   14950:	cmp	r0, #0
   14954:	strbne	r6, [r0]
   14958:	bl	11760 <__ctype_b_loc@plt>
   1495c:	ldr	r1, [r0]
   14960:	mov	sl, r9
   14964:	ldrb	r2, [sl, #1]!
   14968:	add	r3, r1, r2, lsl #1
   1496c:	ldrb	r3, [r3, #1]
   14970:	tst	r3, #32
   14974:	bne	14964 <sprintf@plt+0x30d8>
   14978:	cmp	r2, #0
   1497c:	cmpne	r2, #35	; 0x23
   14980:	bne	147f8 <sprintf@plt+0x2f6c>
   14984:	mov	r0, r5
   14988:	mov	r1, #128	; 0x80
   1498c:	mov	r2, r4
   14990:	bl	1161c <fgets_unlocked@plt>
   14994:	cmp	r0, #0
   14998:	bne	14944 <sprintf@plt+0x30b8>
   1499c:	mov	r0, r4
   149a0:	bl	11574 <fclose@plt>
   149a4:	ldr	r6, [pc, #176]	; 14a5c <sprintf@plt+0x31d0>
   149a8:	ldr	r6, [pc, r6]
   149ac:	ldr	r0, [r6]
   149b0:	cmp	r0, #0
   149b4:	bne	14a38 <sprintf@plt+0x31ac>
   149b8:	add	r2, sp, #4
   149bc:	vmov.i32	q8, #0	; 0x00000000
   149c0:	sub	r3, fp, #80	; 0x50
   149c4:	add	r0, r2, #4
   149c8:	vst1.32	{d16-d17}, [r0]
   149cc:	add	r0, r2, #16
   149d0:	vst1.32	{d16-d17}, [r0]
   149d4:	mov	r0, #5
   149d8:	str	r0, [sp, #4]
   149dc:	mov	r0, #2
   149e0:	str	r0, [sp, #12]
   149e4:	ldr	r0, [pc, #116]	; 14a60 <sprintf@plt+0x31d4>
   149e8:	ldr	r1, [pc, #116]	; 14a64 <sprintf@plt+0x31d8>
   149ec:	add	r0, pc, r0
   149f0:	add	r1, pc, r1
   149f4:	bl	1167c <getaddrinfo@plt>
   149f8:	cmp	r0, #0
   149fc:	bne	14a38 <sprintf@plt+0x31ac>
   14a00:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14a04:	cmp	r4, #0
   14a08:	beq	14a38 <sprintf@plt+0x31ac>
   14a0c:	ldr	r5, [r6]
   14a10:	ldr	r0, [pc, #80]	; 14a68 <sprintf@plt+0x31dc>
   14a14:	ldr	r0, [pc, r0]
   14a18:	ldr	r2, [r4, #16]
   14a1c:	ldr	r1, [r4, #20]
   14a20:	add	r0, r0, r5, lsl #7
   14a24:	bl	116c4 <memcpy@plt>
   14a28:	add	r0, r5, #1
   14a2c:	str	r0, [r6]
   14a30:	mov	r0, r4
   14a34:	bl	115ec <freeaddrinfo@plt>
   14a38:	mov	r0, #0
   14a3c:	sub	sp, fp, #48	; 0x30
   14a40:	vpop	{d8-d9}
   14a44:	add	sp, sp, #4
   14a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a4c:	ldrdeq	r5, [r1], -r8
   14a50:	andeq	r4, r0, sl, lsl #26
   14a54:	andeq	r5, r0, ip, lsr #5
   14a58:	ldrdeq	r5, [r0], -sl
   14a5c:	andeq	r5, r1, r0, asr #15
   14a60:			; <UNDEFINED> instruction: 0x00004ab4
   14a64:	andeq	r4, r0, lr, asr #21
   14a68:	andeq	r5, r1, r0, ror #14
   14a6c:	andeq	r4, r0, pc, ror #24
   14a70:	andeq	r4, r0, sl, asr ip
   14a74:	andeq	r5, r1, r4, lsr r8
   14a78:	andeq	r4, r0, r9, asr #24
   14a7c:	ldrdeq	r5, [r1], -r8
   14a80:	andeq	r4, r0, lr, ror #23
   14a84:	andeq	r5, r1, r8, ror r8
   14a88:	andeq	r5, r1, r8, ror r8
   14a8c:	andeq	r5, r1, r0, asr r8
   14a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a94:	add	fp, sp, #28
   14a98:	sub	sp, sp, #284	; 0x11c
   14a9c:	cmp	r2, r0
   14aa0:	bcc	15084 <sprintf@plt+0x37f8>
   14aa4:	mov	ip, r1
   14aa8:	cmp	r2, r1
   14aac:	bcs	15084 <sprintf@plt+0x37f8>
   14ab0:	ldrb	r6, [r2]
   14ab4:	ldr	r1, [fp, #8]
   14ab8:	mov	r5, r3
   14abc:	cmp	r6, #0
   14ac0:	beq	15018 <sprintf@plt+0x378c>
   14ac4:	str	r0, [sp, #20]
   14ac8:	sub	r0, ip, r0
   14acc:	add	r7, sp, #25
   14ad0:	str	r2, [sp, #4]
   14ad4:	add	r1, r2, #1
   14ad8:	mvn	r4, #0
   14adc:	mov	r8, #0
   14ae0:	mov	sl, #0
   14ae4:	str	r5, [sp, #8]
   14ae8:	str	r0, [sp, #16]
   14aec:	rsb	r0, r2, #1
   14af0:	mov	r2, r7
   14af4:	str	r0, [sp, #12]
   14af8:	ands	r3, r6, #192	; 0xc0
   14afc:	beq	14b34 <sprintf@plt+0x32a8>
   14b00:	cmp	r3, #192	; 0xc0
   14b04:	beq	14b7c <sprintf@plt+0x32f0>
   14b08:	cmp	r3, #64	; 0x40
   14b0c:	uxtbeq	r3, r6
   14b10:	cmpeq	r3, #65	; 0x41
   14b14:	bne	15084 <sprintf@plt+0x37f8>
   14b18:	ldrb	r3, [r1]
   14b1c:	mov	r0, #1
   14b20:	add	r5, r3, #7
   14b24:	cmp	r3, #0
   14b28:	add	r5, r0, r5, lsr #3
   14b2c:	movweq	r5, #33	; 0x21
   14b30:	b	14b38 <sprintf@plt+0x32ac>
   14b34:	uxtb	r5, r6
   14b38:	add	r3, sl, #1
   14b3c:	add	sl, r5, r3
   14b40:	cmp	sl, #254	; 0xfe
   14b44:	bgt	15084 <sprintf@plt+0x37f8>
   14b48:	add	r9, r1, r5
   14b4c:	cmp	r9, ip
   14b50:	bcs	15084 <sprintf@plt+0x37f8>
   14b54:	strb	r6, [r2]
   14b58:	add	r0, r7, r3
   14b5c:	mov	r2, r5
   14b60:	mov	r6, ip
   14b64:	bl	116c4 <memcpy@plt>
   14b68:	add	r0, r8, r5
   14b6c:	mov	ip, r6
   14b70:	mov	r1, r9
   14b74:	add	r8, r0, #1
   14b78:	b	14bbc <sprintf@plt+0x3330>
   14b7c:	cmp	r1, ip
   14b80:	ldrbcc	r2, [r1]
   14b84:	andcc	r0, r6, #63	; 0x3f
   14b88:	orrcc	r0, r2, r0, lsl #8
   14b8c:	ldrcc	r2, [sp, #20]
   14b90:	addcc	r0, r2, r0
   14b94:	cmpcc	r0, ip
   14b98:	bcs	15084 <sprintf@plt+0x37f8>
   14b9c:	ldr	r2, [sp, #12]
   14ba0:	cmp	r4, #0
   14ba4:	add	r8, r8, #2
   14ba8:	addlt	r4, r2, r1
   14bac:	ldr	r1, [sp, #16]
   14bb0:	cmp	r8, r1
   14bb4:	mov	r1, r0
   14bb8:	bge	15084 <sprintf@plt+0x37f8>
   14bbc:	ldrb	r6, [r1], #1
   14bc0:	add	r2, r7, sl
   14bc4:	cmp	r6, #0
   14bc8:	bne	14af8 <sprintf@plt+0x326c>
   14bcc:	ldr	r5, [sp, #8]
   14bd0:	mov	r0, #0
   14bd4:	cmn	r4, #1
   14bd8:	strb	r0, [r2]
   14bdc:	mov	r0, r4
   14be0:	bgt	14bf4 <sprintf@plt+0x3368>
   14be4:	ldr	r0, [sp, #4]
   14be8:	sub	r0, r1, r0
   14bec:	cmn	r0, #1
   14bf0:	beq	15090 <sprintf@plt+0x3804>
   14bf4:	ldr	r2, [fp, #8]
   14bf8:	ldrb	r7, [sp, #25]
   14bfc:	add	sl, r5, r2
   14c00:	cmp	r7, #0
   14c04:	beq	15078 <sprintf@plt+0x37ec>
   14c08:	str	r0, [sp, #12]
   14c0c:	add	r9, sp, #25
   14c10:	mov	ip, #92	; 0x5c
   14c14:	mov	r8, #46	; 0x2e
   14c18:	mov	r4, r5
   14c1c:	ldr	r1, [pc, #1156]	; 150a8 <sprintf@plt+0x381c>
   14c20:	add	r1, pc, r1
   14c24:	uxtb	r2, r7
   14c28:	cmp	r2, #192	; 0xc0
   14c2c:	bcs	15084 <sprintf@plt+0x37f8>
   14c30:	cmp	r4, r5
   14c34:	mov	r3, r7
   14c38:	mov	r6, r5
   14c3c:	beq	14c54 <sprintf@plt+0x33c8>
   14c40:	cmp	r4, sl
   14c44:	bcs	15084 <sprintf@plt+0x37f8>
   14c48:	strb	r8, [r4], #1
   14c4c:	ldrb	r3, [r9]
   14c50:	mov	r6, r4
   14c54:	and	r0, r3, #192	; 0xc0
   14c58:	add	lr, r9, #1
   14c5c:	cmp	r0, #64	; 0x40
   14c60:	beq	14c74 <sprintf@plt+0x33e8>
   14c64:	cmp	r0, #192	; 0xc0
   14c68:	beq	15084 <sprintf@plt+0x37f8>
   14c6c:	uxtb	r0, r3
   14c70:	b	14c98 <sprintf@plt+0x340c>
   14c74:	uxtb	r0, r3
   14c78:	cmp	r0, #65	; 0x41
   14c7c:	bne	15084 <sprintf@plt+0x37f8>
   14c80:	ldrb	r3, [lr]
   14c84:	mov	r4, #1
   14c88:	add	r0, r3, #7
   14c8c:	cmp	r3, #0
   14c90:	add	r0, r4, r0, lsr #3
   14c94:	movweq	r0, #33	; 0x21
   14c98:	add	r3, r6, r0
   14c9c:	cmp	r3, sl
   14ca0:	bcs	15084 <sprintf@plt+0x37f8>
   14ca4:	and	r3, r7, #192	; 0xc0
   14ca8:	cmp	r3, #64	; 0x40
   14cac:	bne	14d78 <sprintf@plt+0x34ec>
   14cb0:	cmp	r2, #65	; 0x41
   14cb4:	bne	1509c <sprintf@plt+0x3810>
   14cb8:	ldrb	r4, [lr]
   14cbc:	mov	r0, #7
   14cc0:	cmp	r4, #0
   14cc4:	movweq	r4, #256	; 0x100
   14cc8:	cmp	r4, #9
   14ccc:	add	r2, r4, #3
   14cd0:	movwhi	r0, #8
   14cd4:	cmp	r4, #99	; 0x63
   14cd8:	movwhi	r0, #9
   14cdc:	add	r0, r0, r2, lsr #2
   14ce0:	add	r0, r6, r0
   14ce4:	cmp	r0, sl
   14ce8:	bcs	15084 <sprintf@plt+0x37f8>
   14cec:	movw	r0, #23388	; 0x5b5c
   14cf0:	mov	r7, r6
   14cf4:	add	r9, r9, #2
   14cf8:	cmp	r4, #8
   14cfc:	movt	r0, #120	; 0x78
   14d00:	str	r0, [r7], #3
   14d04:	bcc	14f54 <sprintf@plt+0x36c8>
   14d08:	mvn	r0, r4
   14d0c:	add	r8, r4, #8
   14d10:	str	r6, [sp, #20]
   14d14:	mov	r6, lr
   14d18:	cmn	r0, #16
   14d1c:	mvnls	r0, #15
   14d20:	add	r5, r8, r0
   14d24:	lsr	r0, r5, #3
   14d28:	str	r0, [sp, #16]
   14d2c:	ldrb	r2, [r9], #1
   14d30:	mov	r0, r7
   14d34:	bl	1188c <sprintf@plt>
   14d38:	ldr	r1, [pc, #876]	; 150ac <sprintf@plt+0x3820>
   14d3c:	sub	r8, r8, #8
   14d40:	add	r7, r7, r0
   14d44:	cmp	r8, #15
   14d48:	add	r1, pc, r1
   14d4c:	bgt	14d2c <sprintf@plt+0x34a0>
   14d50:	bic	r0, r5, #7
   14d54:	sub	r2, r4, #8
   14d58:	ldr	r5, [sp, #8]
   14d5c:	sub	r0, r2, r0
   14d60:	ldr	r2, [sp, #16]
   14d64:	add	r2, r6, r2
   14d68:	ldr	r6, [sp, #20]
   14d6c:	add	r9, r2, #2
   14d70:	add	lr, r2, #1
   14d74:	b	14f58 <sprintf@plt+0x36cc>
   14d78:	cmp	r0, #1
   14d7c:	blt	14fec <sprintf@plt+0x3760>
   14d80:	add	r0, r0, #1
   14d84:	mov	r4, r6
   14d88:	mov	r9, lr
   14d8c:	b	14e24 <sprintf@plt+0x3598>
   14d90:	sub	r3, r2, #33	; 0x21
   14d94:	cmp	r3, #94	; 0x5e
   14d98:	bcc	14e14 <sprintf@plt+0x3588>
   14d9c:	add	r3, r4, #3
   14da0:	cmp	r3, sl
   14da4:	bcs	15084 <sprintf@plt+0x37f8>
   14da8:	movw	r3, #34079	; 0x851f
   14dac:	strb	ip, [r4]
   14db0:	movw	r8, #52429	; 0xcccd
   14db4:	movt	r3, #20971	; 0x51eb
   14db8:	movt	r8, #52428	; 0xcccc
   14dbc:	umull	r3, r7, r2, r3
   14dc0:	ldr	r3, [pc, #756]	; 150bc <sprintf@plt+0x3830>
   14dc4:	add	r3, pc, r3
   14dc8:	mov	lr, r3
   14dcc:	ldrb	r3, [r3, r7, lsr #5]
   14dd0:	strb	r3, [r4, #1]
   14dd4:	umull	r3, r6, r2, r8
   14dd8:	lsr	r3, r6, #3
   14ddc:	mov	r6, #100	; 0x64
   14de0:	add	r3, r3, r3, lsl #2
   14de4:	sub	r3, r2, r3, lsl #1
   14de8:	ldrb	r3, [lr, r3]
   14dec:	strb	r3, [r4, #3]
   14df0:	lsr	r3, r7, #5
   14df4:	mls	r2, r3, r6, r2
   14df8:	uxtb	r2, r2
   14dfc:	umull	r2, r3, r2, r8
   14e00:	mov	r8, #46	; 0x2e
   14e04:	ldrb	r2, [lr, r3, lsr #3]
   14e08:	strb	r2, [r4, #2]
   14e0c:	add	r4, r4, #4
   14e10:	b	14f44 <sprintf@plt+0x36b8>
   14e14:	cmp	r4, sl
   14e18:	bcs	15084 <sprintf@plt+0x37f8>
   14e1c:	strb	r2, [r4], #1
   14e20:	b	14f44 <sprintf@plt+0x36b8>
   14e24:	ldrb	r2, [r9], #1
   14e28:	sub	r3, r2, #34	; 0x22
   14e2c:	cmp	r3, #58	; 0x3a
   14e30:	bhi	14d90 <sprintf@plt+0x3504>
   14e34:	add	r7, pc, #4
   14e38:	ldr	r3, [r7, r3, lsl #2]
   14e3c:	add	pc, r7, r3
   14e40:	andeq	r0, r0, ip, ror #1
   14e44:			; <UNDEFINED> instruction: 0xffffff50
   14e48:	andeq	r0, r0, ip, ror #1
   14e4c:			; <UNDEFINED> instruction: 0xffffff50
   14e50:			; <UNDEFINED> instruction: 0xffffff50
   14e54:			; <UNDEFINED> instruction: 0xffffff50
   14e58:	andeq	r0, r0, ip, ror #1
   14e5c:	andeq	r0, r0, ip, ror #1
   14e60:			; <UNDEFINED> instruction: 0xffffff50
   14e64:			; <UNDEFINED> instruction: 0xffffff50
   14e68:			; <UNDEFINED> instruction: 0xffffff50
   14e6c:			; <UNDEFINED> instruction: 0xffffff50
   14e70:	andeq	r0, r0, ip, ror #1
   14e74:			; <UNDEFINED> instruction: 0xffffff50
   14e78:			; <UNDEFINED> instruction: 0xffffff50
   14e7c:			; <UNDEFINED> instruction: 0xffffff50
   14e80:			; <UNDEFINED> instruction: 0xffffff50
   14e84:			; <UNDEFINED> instruction: 0xffffff50
   14e88:			; <UNDEFINED> instruction: 0xffffff50
   14e8c:			; <UNDEFINED> instruction: 0xffffff50
   14e90:			; <UNDEFINED> instruction: 0xffffff50
   14e94:			; <UNDEFINED> instruction: 0xffffff50
   14e98:			; <UNDEFINED> instruction: 0xffffff50
   14e9c:			; <UNDEFINED> instruction: 0xffffff50
   14ea0:			; <UNDEFINED> instruction: 0xffffff50
   14ea4:	andeq	r0, r0, ip, ror #1
   14ea8:			; <UNDEFINED> instruction: 0xffffff50
   14eac:			; <UNDEFINED> instruction: 0xffffff50
   14eb0:			; <UNDEFINED> instruction: 0xffffff50
   14eb4:			; <UNDEFINED> instruction: 0xffffff50
   14eb8:	andeq	r0, r0, ip, ror #1
   14ebc:			; <UNDEFINED> instruction: 0xffffff50
   14ec0:			; <UNDEFINED> instruction: 0xffffff50
   14ec4:			; <UNDEFINED> instruction: 0xffffff50
   14ec8:			; <UNDEFINED> instruction: 0xffffff50
   14ecc:			; <UNDEFINED> instruction: 0xffffff50
   14ed0:			; <UNDEFINED> instruction: 0xffffff50
   14ed4:			; <UNDEFINED> instruction: 0xffffff50
   14ed8:			; <UNDEFINED> instruction: 0xffffff50
   14edc:			; <UNDEFINED> instruction: 0xffffff50
   14ee0:			; <UNDEFINED> instruction: 0xffffff50
   14ee4:			; <UNDEFINED> instruction: 0xffffff50
   14ee8:			; <UNDEFINED> instruction: 0xffffff50
   14eec:			; <UNDEFINED> instruction: 0xffffff50
   14ef0:			; <UNDEFINED> instruction: 0xffffff50
   14ef4:			; <UNDEFINED> instruction: 0xffffff50
   14ef8:			; <UNDEFINED> instruction: 0xffffff50
   14efc:			; <UNDEFINED> instruction: 0xffffff50
   14f00:			; <UNDEFINED> instruction: 0xffffff50
   14f04:			; <UNDEFINED> instruction: 0xffffff50
   14f08:			; <UNDEFINED> instruction: 0xffffff50
   14f0c:			; <UNDEFINED> instruction: 0xffffff50
   14f10:			; <UNDEFINED> instruction: 0xffffff50
   14f14:			; <UNDEFINED> instruction: 0xffffff50
   14f18:			; <UNDEFINED> instruction: 0xffffff50
   14f1c:			; <UNDEFINED> instruction: 0xffffff50
   14f20:			; <UNDEFINED> instruction: 0xffffff50
   14f24:			; <UNDEFINED> instruction: 0xffffff50
   14f28:	andeq	r0, r0, ip, ror #1
   14f2c:	add	r3, r4, #1
   14f30:	cmp	r3, sl
   14f34:	bcs	15084 <sprintf@plt+0x37f8>
   14f38:	strb	r2, [r4, #1]
   14f3c:	strb	ip, [r4]
   14f40:	add	r4, r4, #2
   14f44:	sub	r0, r0, #1
   14f48:	cmp	r0, #1
   14f4c:	bgt	14e24 <sprintf@plt+0x3598>
   14f50:	b	14ff4 <sprintf@plt+0x3768>
   14f54:	mov	r0, r4
   14f58:	mov	r8, r6
   14f5c:	cmp	r0, #5
   14f60:	blt	14f78 <sprintf@plt+0x36ec>
   14f64:	ldrb	ip, [r9]
   14f68:	mov	r6, lr
   14f6c:	mov	r3, #255	; 0xff
   14f70:	mov	r2, #8
   14f74:	b	14f9c <sprintf@plt+0x3710>
   14f78:	cmp	r0, #1
   14f7c:	blt	14fb4 <sprintf@plt+0x3728>
   14f80:	ldrb	r1, [r9]
   14f84:	mov	r6, lr
   14f88:	mov	r3, #15
   14f8c:	mov	r2, #4
   14f90:	lsr	ip, r1, #4
   14f94:	ldr	r1, [pc, #276]	; 150b0 <sprintf@plt+0x3824>
   14f98:	add	r1, pc, r1
   14f9c:	sub	r0, r2, r0
   14fa0:	and	r2, ip, r3, lsl r0
   14fa4:	mov	r0, r7
   14fa8:	bl	1188c <sprintf@plt>
   14fac:	add	r7, r7, r0
   14fb0:	add	r9, r6, #2
   14fb4:	ldr	r1, [pc, #248]	; 150b4 <sprintf@plt+0x3828>
   14fb8:	mov	r0, r7
   14fbc:	mov	r2, r4
   14fc0:	add	r1, pc, r1
   14fc4:	bl	1188c <sprintf@plt>
   14fc8:	add	r4, r7, r0
   14fcc:	mov	ip, #92	; 0x5c
   14fd0:	sub	r1, r4, r8
   14fd4:	mov	r8, #46	; 0x2e
   14fd8:	cmp	r1, #0
   14fdc:	ldr	r1, [pc, #212]	; 150b8 <sprintf@plt+0x382c>
   14fe0:	add	r1, pc, r1
   14fe4:	bge	14ff4 <sprintf@plt+0x3768>
   14fe8:	b	15084 <sprintf@plt+0x37f8>
   14fec:	mov	r9, lr
   14ff0:	mov	r4, r6
   14ff4:	ldrb	r7, [r9]
   14ff8:	cmp	r7, #0
   14ffc:	bne	14c24 <sprintf@plt+0x3398>
   15000:	ldr	r2, [fp, #8]
   15004:	ldr	r0, [sp, #12]
   15008:	cmp	r4, r5
   1500c:	mov	r1, r2
   15010:	bne	1503c <sprintf@plt+0x37b0>
   15014:	b	15028 <sprintf@plt+0x379c>
   15018:	mov	r0, #0
   1501c:	add	sl, r5, r1
   15020:	strb	r0, [sp, #25]
   15024:	mov	r0, #1
   15028:	cmp	r1, #0
   1502c:	ble	15084 <sprintf@plt+0x37f8>
   15030:	mov	r1, #46	; 0x2e
   15034:	mov	r4, r5
   15038:	strb	r1, [r4], #1
   1503c:	cmp	r4, sl
   15040:	bcs	15084 <sprintf@plt+0x37f8>
   15044:	mov	r1, #0
   15048:	strb	r1, [r4], #1
   1504c:	sub	r1, r4, r5
   15050:	cmn	r1, #1
   15054:	beq	15090 <sprintf@plt+0x3804>
   15058:	cmp	r0, #1
   1505c:	blt	15070 <sprintf@plt+0x37e4>
   15060:	ldrb	r1, [r5]
   15064:	cmp	r1, #46	; 0x2e
   15068:	moveq	r1, #0
   1506c:	strbeq	r1, [r5]
   15070:	sub	sp, fp, #28
   15074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15078:	mov	r1, r2
   1507c:	cmp	r1, #0
   15080:	bgt	15030 <sprintf@plt+0x37a4>
   15084:	bl	11880 <__errno_location@plt>
   15088:	mov	r1, #90	; 0x5a
   1508c:	str	r1, [r0]
   15090:	mvn	r0, #0
   15094:	sub	sp, fp, #28
   15098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1509c:	bl	11880 <__errno_location@plt>
   150a0:	mov	r1, #22
   150a4:	b	1508c <sprintf@plt+0x3800>
   150a8:			; <UNDEFINED> instruction: 0x000048b0
   150ac:	andeq	r4, r0, r8, lsl #15
   150b0:	andeq	r4, r0, sp, lsr r5
   150b4:	andeq	r4, r0, r9, lsl r5
   150b8:	strdeq	r4, [r0], -r0
   150bc:	andeq	r4, r0, sl, lsl r7
   150c0:	push	{r4, sl, fp, lr}
   150c4:	add	fp, sp, #8
   150c8:	cmp	r0, r1
   150cc:	mov	lr, r0
   150d0:	bcs	1513c <sprintf@plt+0x38b0>
   150d4:	mov	ip, #1
   150d8:	mov	lr, r0
   150dc:	mov	r2, lr
   150e0:	ldrb	r3, [r2], #1
   150e4:	cmp	r3, #0
   150e8:	beq	15128 <sprintf@plt+0x389c>
   150ec:	ands	r4, r3, #192	; 0xc0
   150f0:	beq	15118 <sprintf@plt+0x388c>
   150f4:	cmp	r4, #64	; 0x40
   150f8:	bne	15130 <sprintf@plt+0x38a4>
   150fc:	cmp	r3, #65	; 0x41
   15100:	bne	15148 <sprintf@plt+0x38bc>
   15104:	ldrb	r4, [r2]
   15108:	add	r3, r4, #7
   1510c:	cmp	r4, #0
   15110:	add	r3, ip, r3, lsr #3
   15114:	movweq	r3, #33	; 0x21
   15118:	add	lr, r2, r3
   1511c:	cmp	lr, r1
   15120:	bcc	150dc <sprintf@plt+0x3850>
   15124:	b	1513c <sprintf@plt+0x38b0>
   15128:	mov	lr, r2
   1512c:	b	1513c <sprintf@plt+0x38b0>
   15130:	cmp	r4, #192	; 0xc0
   15134:	bne	15148 <sprintf@plt+0x38bc>
   15138:	add	lr, lr, #2
   1513c:	cmp	lr, r1
   15140:	subls	r0, lr, r0
   15144:	popls	{r4, sl, fp, pc}
   15148:	bl	11880 <__errno_location@plt>
   1514c:	mov	r1, #90	; 0x5a
   15150:	str	r1, [r0]
   15154:	mvn	r0, #0
   15158:	pop	{r4, sl, fp, pc}
   1515c:	ldrb	r1, [r0]
   15160:	ldrb	r0, [r0, #1]
   15164:	orr	r0, r0, r1, lsl #8
   15168:	bx	lr
   1516c:	ldr	r0, [r0]
   15170:	rev	r0, r0
   15174:	bx	lr
   15178:	strb	r0, [r1, #1]
   1517c:	lsr	r0, r0, #8
   15180:	strb	r0, [r1]
   15184:	bx	lr
   15188:	lsr	r2, r0, #16
   1518c:	strb	r0, [r1, #3]
   15190:	strb	r2, [r1, #1]
   15194:	lsr	r2, r0, #24
   15198:	lsr	r0, r0, #8
   1519c:	strb	r2, [r1]
   151a0:	strb	r0, [r1, #2]
   151a4:	bx	lr
   151a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151ac:	add	fp, sp, #28
   151b0:	sub	sp, sp, #396	; 0x18c
   151b4:	mov	r7, r0
   151b8:	mvn	r0, #0
   151bc:	cmp	r3, #0
   151c0:	beq	151f0 <sprintf@plt+0x3964>
   151c4:	ldr	r4, [fp, #8]
   151c8:	cmp	r4, #12
   151cc:	blt	151f0 <sprintf@plt+0x3964>
   151d0:	cmp	r4, #16
   151d4:	mov	r6, #0
   151d8:	mov	r5, #65536	; 0x10000
   151dc:	stm	r3, {r5, r6}
   151e0:	str	r6, [r3, #8]
   151e4:	str	r6, [sp, #52]	; 0x34
   151e8:	str	r3, [sp, #48]	; 0x30
   151ec:	bge	151f8 <sprintf@plt+0x396c>
   151f0:	sub	sp, fp, #28
   151f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f8:	add	r4, sp, #129	; 0x81
   151fc:	str	r1, [sp, #40]	; 0x28
   15200:	str	r2, [sp, #28]
   15204:	str	r3, [sp, #36]	; 0x24
   15208:	add	r0, r4, #1
   1520c:	add	r1, r4, #255	; 0xff
   15210:	str	r0, [fp, #-40]	; 0xffffffd8
   15214:	str	r1, [sp, #44]	; 0x2c
   15218:	ldrb	r1, [r7]
   1521c:	cmp	r1, #0
   15220:	beq	155c4 <sprintf@plt+0x3d38>
   15224:	sub	r0, fp, #40	; 0x28
   15228:	add	r3, r0, #4
   1522c:	str	r3, [sp, #24]
   15230:	str	r4, [sp, #32]
   15234:	mov	r0, #0
   15238:	ldr	r5, [pc, #2128]	; 15a90 <sprintf@plt+0x4204>
   1523c:	add	r5, pc, r5
   15240:	uxtb	r9, r1
   15244:	add	r8, r7, #1
   15248:	cmp	r0, #0
   1524c:	beq	152f0 <sprintf@plt+0x3a64>
   15250:	cmp	r9, #91	; 0x5b
   15254:	beq	15338 <sprintf@plt+0x3aac>
   15258:	mov	r0, r5
   1525c:	mov	r1, r9
   15260:	mov	r2, #11
   15264:	bl	1185c <memchr@plt>
   15268:	cmp	r0, #0
   1526c:	beq	15304 <sprintf@plt+0x3a78>
   15270:	ldrb	r1, [r7, #1]
   15274:	mov	r6, #90	; 0x5a
   15278:	cmp	r1, #0
   1527c:	beq	15998 <sprintf@plt+0x410c>
   15280:	mov	sl, r0
   15284:	mov	r0, r5
   15288:	mov	r2, #11
   1528c:	bl	1185c <memchr@plt>
   15290:	cmp	r0, #0
   15294:	ldrbne	r1, [r7, #2]
   15298:	cmpne	r1, #0
   1529c:	beq	15998 <sprintf@plt+0x410c>
   152a0:	ldr	r5, [pc, #2032]	; 15a98 <sprintf@plt+0x420c>
   152a4:	mov	r4, r0
   152a8:	mov	r2, #11
   152ac:	add	r5, pc, r5
   152b0:	mov	r0, r5
   152b4:	bl	1185c <memchr@plt>
   152b8:	cmp	r0, #0
   152bc:	beq	15998 <sprintf@plt+0x410c>
   152c0:	sub	r1, sl, r5
   152c4:	mov	r2, #100	; 0x64
   152c8:	sub	r0, r0, r5
   152cc:	mul	r1, r1, r2
   152d0:	sub	r2, r4, r5
   152d4:	add	r2, r2, r2, lsl #2
   152d8:	add	r1, r1, r2, lsl #1
   152dc:	add	r9, r1, r0
   152e0:	cmp	r9, #255	; 0xff
   152e4:	bgt	15998 <sprintf@plt+0x410c>
   152e8:	add	r8, r7, #3
   152ec:	b	15304 <sprintf@plt+0x3a78>
   152f0:	mov	r0, #1
   152f4:	cmp	r9, #92	; 0x5c
   152f8:	beq	15324 <sprintf@plt+0x3a98>
   152fc:	cmp	r9, #46	; 0x2e
   15300:	beq	153dc <sprintf@plt+0x3b50>
   15304:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15308:	ldr	r1, [sp, #44]	; 0x2c
   1530c:	cmp	r0, r1
   15310:	bcs	15994 <sprintf@plt+0x4108>
   15314:	add	r1, r0, #1
   15318:	str	r1, [fp, #-40]	; 0xffffffd8
   1531c:	strb	r9, [r0]
   15320:	mov	r0, #0
   15324:	ldrb	r1, [r8]
   15328:	mov	r7, r8
   1532c:	cmp	r1, #0
   15330:	bne	15240 <sprintf@plt+0x39b4>
   15334:	b	15988 <sprintf@plt+0x40fc>
   15338:	mov	r0, r8
   1533c:	mov	r1, #93	; 0x5d
   15340:	bl	1158c <strchr@plt>
   15344:	cmp	r0, #0
   15348:	beq	159b8 <sprintf@plt+0x412c>
   1534c:	mov	r4, r0
   15350:	mov	r0, #0
   15354:	add	r9, r4, #2
   15358:	str	r0, [fp, #-36]	; 0xffffffdc
   1535c:	sub	r0, r9, r8
   15360:	cmp	r0, #2
   15364:	blt	159b8 <sprintf@plt+0x412c>
   15368:	ldrb	r0, [r7, #1]
   1536c:	cmp	r0, #120	; 0x78
   15370:	bne	159b8 <sprintf@plt+0x412c>
   15374:	add	r8, r7, #2
   15378:	bl	11760 <__ctype_b_loc@plt>
   1537c:	ldrb	r1, [r8]
   15380:	ldr	r2, [r0]
   15384:	add	r2, r2, r1, lsl #1
   15388:	ldrb	r2, [r2, #1]
   1538c:	tst	r2, #16
   15390:	beq	159b8 <sprintf@plt+0x412c>
   15394:	ldr	r2, [sp, #44]	; 0x2c
   15398:	ldr	r3, [sp, #24]
   1539c:	mov	r5, #0
   153a0:	cmp	r2, r3
   153a4:	bls	154d8 <sprintf@plt+0x3c4c>
   153a8:	cmp	r7, r4
   153ac:	mov	sl, #0
   153b0:	mov	r4, r3
   153b4:	mov	r2, #0
   153b8:	bcs	154e4 <sprintf@plt+0x3c58>
   153bc:	ldr	r4, [sp, #24]
   153c0:	add	r8, r7, #3
   153c4:	mov	sl, #0
   153c8:	mov	r6, #0
   153cc:	mov	r5, #0
   153d0:	mov	r7, #0
   153d4:	mov	r3, #0
   153d8:	b	15434 <sprintf@plt+0x3ba8>
   153dc:	ldr	r2, [sp, #32]
   153e0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   153e4:	mov	r6, #90	; 0x5a
   153e8:	mvn	r0, r2
   153ec:	add	r0, r1, r0
   153f0:	tst	r0, #192	; 0xc0
   153f4:	bne	15998 <sprintf@plt+0x410c>
   153f8:	ldr	r1, [sp, #44]	; 0x2c
   153fc:	cmp	r1, r2
   15400:	bls	15998 <sprintf@plt+0x410c>
   15404:	strb	r0, [r2]
   15408:	ldrb	r1, [r8]
   1540c:	cmp	r1, #0
   15410:	beq	15a50 <sprintf@plt+0x41c4>
   15414:	cmp	r0, #0
   15418:	cmpne	r1, #46	; 0x2e
   1541c:	beq	15998 <sprintf@plt+0x410c>
   15420:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15424:	add	r0, r4, #1
   15428:	str	r0, [fp, #-40]	; 0xffffffd8
   1542c:	b	15564 <sprintf@plt+0x3cd8>
   15430:	ldrb	r1, [r8], #1
   15434:	uxtb	r1, r1
   15438:	cmp	r1, #47	; 0x2f
   1543c:	beq	1547c <sprintf@plt+0x3bf0>
   15440:	cmp	r1, #93	; 0x5d
   15444:	beq	15578 <sprintf@plt+0x3cec>
   15448:	ldr	r2, [r0]
   1544c:	cmp	r3, #0
   15450:	add	r2, r2, r1, lsl #1
   15454:	ldrh	r2, [r2]
   15458:	beq	15484 <sprintf@plt+0x3bf8>
   1545c:	tst	r2, #2048	; 0x800
   15460:	beq	159b8 <sprintf@plt+0x412c>
   15464:	cmp	r7, #0
   15468:	bne	154c0 <sprintf@plt+0x3c34>
   1546c:	cmp	r1, #48	; 0x30
   15470:	beq	159b8 <sprintf@plt+0x412c>
   15474:	sub	r7, r8, #1
   15478:	b	154c0 <sprintf@plt+0x3c34>
   1547c:	mov	r3, #1
   15480:	b	154c0 <sprintf@plt+0x3c34>
   15484:	tst	r2, #4096	; 0x1000
   15488:	beq	159b8 <sprintf@plt+0x412c>
   1548c:	cmp	sl, #252	; 0xfc
   15490:	bgt	159b8 <sprintf@plt+0x412c>
   15494:	ldr	r2, [pc, #1528]	; 15a94 <sprintf@plt+0x4208>
   15498:	add	r6, r6, #4
   1549c:	mov	r3, #0
   154a0:	add	sl, sl, #4
   154a4:	cmp	r6, #8
   154a8:	moveq	r3, #0
   154ac:	moveq	r6, #0
   154b0:	add	r2, pc, r2
   154b4:	ldrb	r1, [r2, r1]
   154b8:	add	r5, r1, r5, lsl #4
   154bc:	strbeq	r5, [r4], #1
   154c0:	cmp	r8, r9
   154c4:	mov	r2, #0
   154c8:	ldrcc	r1, [sp, #44]	; 0x2c
   154cc:	cmpcc	r4, r1
   154d0:	bcs	154e4 <sprintf@plt+0x3c58>
   154d4:	b	15430 <sprintf@plt+0x3ba4>
   154d8:	mov	sl, #0
   154dc:	mov	r4, r3
   154e0:	mov	r2, #0
   154e4:	mov	r6, #90	; 0x5a
   154e8:	cmp	r8, r9
   154ec:	bcs	15998 <sprintf@plt+0x410c>
   154f0:	ldr	r0, [sp, #44]	; 0x2c
   154f4:	ldr	r1, [sp, #32]
   154f8:	cmp	r4, r0
   154fc:	bcs	15998 <sprintf@plt+0x410c>
   15500:	cmp	r2, #1
   15504:	blt	15534 <sprintf@plt+0x3ca8>
   15508:	add	r0, r2, #3
   1550c:	bic	r0, r0, #3
   15510:	cmp	r0, sl
   15514:	bne	159b8 <sprintf@plt+0x412c>
   15518:	rsb	r0, sl, #8
   1551c:	mov	r7, #255	; 0xff
   15520:	mov	r6, #22
   15524:	add	r0, r0, r2
   15528:	tst	r5, r7, lsr r0
   1552c:	beq	15538 <sprintf@plt+0x3cac>
   15530:	b	15998 <sprintf@plt+0x410c>
   15534:	mov	r2, sl
   15538:	mov	r0, #65	; 0x41
   1553c:	strb	r0, [r1]
   15540:	subs	r0, r2, #256	; 0x100
   15544:	ldr	r1, [fp, #-40]	; 0xffffffd8
   15548:	movne	r0, r2
   1554c:	strb	r0, [r1]
   15550:	add	r0, r4, #1
   15554:	str	r0, [fp, #-40]	; 0xffffffd8
   15558:	ldrb	r1, [r8], #1
   1555c:	cmp	r1, #46	; 0x2e
   15560:	bne	159e8 <sprintf@plt+0x415c>
   15564:	ldrb	r1, [r8]
   15568:	mov	r7, r8
   1556c:	cmp	r1, #0
   15570:	bne	15230 <sprintf@plt+0x39a4>
   15574:	b	155c8 <sprintf@plt+0x3d3c>
   15578:	cmp	r3, #0
   1557c:	beq	155b0 <sprintf@plt+0x3d24>
   15580:	cmp	r7, #0
   15584:	beq	159b8 <sprintf@plt+0x412c>
   15588:	mov	r0, r7
   1558c:	sub	r1, fp, #36	; 0x24
   15590:	mov	r2, #10
   15594:	bl	116e8 <strtol@plt>
   15598:	mov	r2, r0
   1559c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   155a0:	ldrb	r0, [r0]
   155a4:	cmp	r0, #93	; 0x5d
   155a8:	beq	155b4 <sprintf@plt+0x3d28>
   155ac:	b	159b8 <sprintf@plt+0x412c>
   155b0:	mov	r2, #0
   155b4:	cmp	r6, #0
   155b8:	lslne	r0, r5, #4
   155bc:	strbne	r0, [r4], #1
   155c0:	b	154e4 <sprintf@plt+0x3c58>
   155c4:	add	r4, sp, #129	; 0x81
   155c8:	mvn	r1, r4
   155cc:	mov	r6, #90	; 0x5a
   155d0:	add	r0, r0, r1
   155d4:	tst	r0, #192	; 0xc0
   155d8:	bne	15998 <sprintf@plt+0x410c>
   155dc:	ldr	r1, [sp, #44]	; 0x2c
   155e0:	mov	r2, r4
   155e4:	mov	r6, #90	; 0x5a
   155e8:	cmp	r4, r1
   155ec:	bcs	15998 <sprintf@plt+0x410c>
   155f0:	cmp	r0, #0
   155f4:	strb	r0, [r2]
   155f8:	beq	1561c <sprintf@plt+0x3d90>
   155fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15600:	ldr	r1, [sp, #44]	; 0x2c
   15604:	cmp	r0, r1
   15608:	bcs	15998 <sprintf@plt+0x410c>
   1560c:	add	r1, r0, #1
   15610:	str	r1, [fp, #-40]	; 0xffffffd8
   15614:	mov	r1, #0
   15618:	strb	r1, [r0]
   1561c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15620:	add	r1, sp, #129	; 0x81
   15624:	sub	r0, r0, r1
   15628:	cmp	r0, #256	; 0x100
   1562c:	bge	15998 <sprintf@plt+0x410c>
   15630:	ldr	r0, [sp, #36]	; 0x24
   15634:	ldr	r9, [sp, #48]	; 0x30
   15638:	ldr	r8, [sp, #40]	; 0x28
   1563c:	add	r1, sp, #48	; 0x30
   15640:	mov	r7, #0
   15644:	add	r5, r0, #12
   15648:	ldr	r0, [fp, #8]
   1564c:	cmp	r9, #0
   15650:	sub	r2, r0, #16
   15654:	mov	r0, #0
   15658:	beq	1566c <sprintf@plt+0x3de0>
   1565c:	mov	r7, r1
   15660:	ldr	r3, [r7, #4]!
   15664:	cmp	r3, #0
   15668:	bne	15660 <sprintf@plt+0x3dd4>
   1566c:	add	ip, r1, #4
   15670:	add	r1, r5, r2
   15674:	mov	r2, #1
   15678:	str	r1, [sp, #32]
   1567c:	add	r1, sp, #129	; 0x81
   15680:	ldrb	r3, [r1]
   15684:	cmp	r3, #192	; 0xc0
   15688:	bcs	159d8 <sprintf@plt+0x414c>
   1568c:	and	r6, r3, #192	; 0xc0
   15690:	cmp	r6, #64	; 0x40
   15694:	beq	156a8 <sprintf@plt+0x3e1c>
   15698:	cmp	r6, #192	; 0xc0
   1569c:	mov	r6, r3
   156a0:	bne	156c4 <sprintf@plt+0x3e38>
   156a4:	b	159ac <sprintf@plt+0x4120>
   156a8:	cmp	r3, #65	; 0x41
   156ac:	bne	159ac <sprintf@plt+0x4120>
   156b0:	ldrb	r4, [r1, #1]
   156b4:	add	r6, r4, #7
   156b8:	cmp	r4, #0
   156bc:	add	r6, r2, r6, lsr #3
   156c0:	movweq	r6, #33	; 0x21
   156c4:	add	r6, r6, #1
   156c8:	add	r0, r6, r0
   156cc:	cmp	r0, #256	; 0x100
   156d0:	bge	159d8 <sprintf@plt+0x414c>
   156d4:	add	r1, r1, r6
   156d8:	cmp	r3, #0
   156dc:	bne	15680 <sprintf@plt+0x3df4>
   156e0:	add	r0, sp, #48	; 0x30
   156e4:	mov	r3, r5
   156e8:	add	sl, sp, #129	; 0x81
   156ec:	str	ip, [sp, #12]
   156f0:	str	r5, [sp]
   156f4:	str	r7, [sp, #16]
   156f8:	add	r0, r0, #76	; 0x4c
   156fc:	str	r0, [sp, #8]
   15700:	mov	r0, #1
   15704:	ldrb	r4, [sl]
   15708:	cmp	r9, #0
   1570c:	str	r0, [sp, #44]	; 0x2c
   15710:	cmpne	r4, #0
   15714:	bne	15760 <sprintf@plt+0x3ed4>
   15718:	cmp	r4, #191	; 0xbf
   1571c:	bhi	159cc <sprintf@plt+0x4140>
   15720:	ldrb	r0, [sl]
   15724:	mvn	r6, #0
   15728:	and	r1, r0, #192	; 0xc0
   1572c:	cmp	r1, #192	; 0xc0
   15730:	beq	1589c <sprintf@plt+0x4010>
   15734:	cmp	r1, #64	; 0x40
   15738:	bne	15898 <sprintf@plt+0x400c>
   1573c:	cmp	r0, #65	; 0x41
   15740:	bne	1589c <sprintf@plt+0x4010>
   15744:	ldrb	r0, [sl, #1]
   15748:	mov	r2, #1
   1574c:	add	r1, r0, #7
   15750:	cmp	r0, #0
   15754:	add	r6, r2, r1, lsr #3
   15758:	movweq	r6, #33	; 0x21
   1575c:	b	1589c <sprintf@plt+0x4010>
   15760:	ldr	r0, [sp, #12]
   15764:	mov	r6, #2
   15768:	str	r3, [sp, #24]
   1576c:	cmp	r0, r7
   15770:	bcs	158f0 <sprintf@plt+0x4064>
   15774:	str	r4, [sp, #4]
   15778:	ldr	lr, [r0]
   1577c:	str	r0, [sp, #20]
   15780:	ldrb	r8, [lr]
   15784:	sub	r2, r8, #1
   15788:	uxtb	r2, r2
   1578c:	cmp	r2, #62	; 0x3e
   15790:	bhi	15878 <sprintf@plt+0x3fec>
   15794:	sub	r5, lr, r9
   15798:	cmp	r5, #16384	; 0x4000
   1579c:	bge	15878 <sprintf@plt+0x3fec>
   157a0:	mov	r2, r8
   157a4:	mov	r4, sl
   157a8:	mov	r6, lr
   157ac:	tst	r2, #255	; 0xff
   157b0:	beq	15860 <sprintf@plt+0x3fd4>
   157b4:	and	r3, r2, #192	; 0xc0
   157b8:	add	r6, r6, #1
   157bc:	cmp	r3, #192	; 0xc0
   157c0:	bne	157e4 <sprintf@plt+0x3f58>
   157c4:	ldrb	r0, [r6]
   157c8:	and	r1, r2, #63	; 0x3f
   157cc:	mov	r6, r9
   157d0:	orr	r0, r0, r1, lsl #8
   157d4:	ldrb	r2, [r6, r0]!
   157d8:	cmp	r2, #0
   157dc:	bne	157b4 <sprintf@plt+0x3f28>
   157e0:	b	15860 <sprintf@plt+0x3fd4>
   157e4:	cmp	r3, #0
   157e8:	bne	158e4 <sprintf@plt+0x4058>
   157ec:	ldrb	r3, [r4]
   157f0:	uxtb	ip, r2
   157f4:	cmp	ip, r3
   157f8:	bne	15860 <sprintf@plt+0x3fd4>
   157fc:	ldrb	r3, [r4, #1]
   15800:	add	r2, r4, #2
   15804:	rsb	r4, ip, #0
   15808:	mvn	r0, #64	; 0x40
   1580c:	uxtb	r1, r3
   15810:	uxtab	r0, r0, r3
   15814:	cmp	r0, #26
   15818:	mov	r0, #32
   1581c:	uxtabcc	r1, r0, r3
   15820:	ldrb	r0, [r6]
   15824:	sub	r3, r0, #65	; 0x41
   15828:	cmp	r3, #26
   1582c:	addcc	r0, r0, #32
   15830:	cmp	r1, r0
   15834:	bne	15860 <sprintf@plt+0x3fd4>
   15838:	ldrb	r3, [r2], #1
   1583c:	adds	r4, r4, #1
   15840:	add	r6, r6, #1
   15844:	bne	15808 <sprintf@plt+0x3f7c>
   15848:	sub	r4, r2, #1
   1584c:	ldrb	r2, [r6]
   15850:	cmp	r3, #0
   15854:	bne	157ac <sprintf@plt+0x3f20>
   15858:	cmp	r2, #0
   1585c:	beq	1594c <sprintf@plt+0x40c0>
   15860:	uxtab	lr, lr, r8
   15864:	ldrb	r8, [lr, #1]!
   15868:	sub	r0, r8, #1
   1586c:	uxtb	r0, r0
   15870:	cmp	r0, #63	; 0x3f
   15874:	bcc	15794 <sprintf@plt+0x3f08>
   15878:	ldr	r0, [sp, #20]
   1587c:	add	r0, r0, #4
   15880:	cmp	r0, r7
   15884:	bcc	15778 <sprintf@plt+0x3eec>
   15888:	ldr	r8, [sp, #40]	; 0x28
   1588c:	ldr	r4, [sp, #4]
   15890:	mov	r6, #2
   15894:	b	158f0 <sprintf@plt+0x4064>
   15898:	mov	r6, r0
   1589c:	ldr	r1, [sp, #32]
   158a0:	add	r0, r3, r6
   158a4:	add	r0, r0, #1
   158a8:	cmp	r0, r1
   158ac:	bcs	159cc <sprintf@plt+0x4140>
   158b0:	add	r4, r6, #1
   158b4:	mov	r0, r3
   158b8:	mov	r1, sl
   158bc:	mov	r5, r3
   158c0:	mov	r2, r4
   158c4:	bl	116c4 <memcpy@plt>
   158c8:	ldr	r0, [sp, #44]	; 0x2c
   158cc:	mov	r3, r5
   158d0:	add	sl, sl, r4
   158d4:	cmp	r6, #0
   158d8:	add	r3, r5, r4
   158dc:	bne	15704 <sprintf@plt+0x3e78>
   158e0:	b	159c0 <sprintf@plt+0x4134>
   158e4:	ldr	r8, [sp, #40]	; 0x28
   158e8:	ldr	r4, [sp, #4]
   158ec:	mov	r6, #90	; 0x5a
   158f0:	bl	11880 <__errno_location@plt>
   158f4:	str	r6, [r0]
   158f8:	ldr	r0, [sp, #8]
   158fc:	ldr	r1, [sp, #16]
   15900:	ldr	r3, [sp, #24]
   15904:	cmp	r1, r0
   15908:	bcs	15718 <sprintf@plt+0x3e8c>
   1590c:	sub	r0, r3, r9
   15910:	cmp	r0, #16384	; 0x4000
   15914:	bge	15718 <sprintf@plt+0x3e8c>
   15918:	ldr	r0, [sp, #44]	; 0x2c
   1591c:	cmp	r0, #0
   15920:	beq	15718 <sprintf@plt+0x3e8c>
   15924:	ldr	r0, [sp, #16]
   15928:	mov	r2, #0
   1592c:	mov	r1, #0
   15930:	str	r1, [sp, #44]	; 0x2c
   15934:	str	r3, [r0]
   15938:	str	r2, [r0, #4]!
   1593c:	str	r0, [sp, #16]
   15940:	cmp	r4, #191	; 0xbf
   15944:	bls	15720 <sprintf@plt+0x3e94>
   15948:	b	159cc <sprintf@plt+0x4140>
   1594c:	ldr	r8, [sp, #40]	; 0x28
   15950:	ldr	r4, [sp, #4]
   15954:	cmp	r5, #0
   15958:	blt	158f8 <sprintf@plt+0x406c>
   1595c:	ldr	r3, [sp, #24]
   15960:	ldr	r1, [sp, #32]
   15964:	add	r0, r3, #1
   15968:	cmp	r0, r1
   1596c:	bcs	159cc <sprintf@plt+0x4140>
   15970:	mov	r0, #192	; 0xc0
   15974:	strb	r5, [r3, #1]
   15978:	orr	r0, r0, r5, lsr #8
   1597c:	strb	r0, [r3]
   15980:	add	r3, r3, #2
   15984:	b	159fc <sprintf@plt+0x4170>
   15988:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1598c:	ldr	r4, [sp, #32]
   15990:	b	155c8 <sprintf@plt+0x3d3c>
   15994:	mov	r6, #90	; 0x5a
   15998:	bl	11880 <__errno_location@plt>
   1599c:	str	r6, [r0]
   159a0:	mvn	r0, #0
   159a4:	sub	sp, fp, #28
   159a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159ac:	bl	11880 <__errno_location@plt>
   159b0:	mov	r1, #22
   159b4:	b	159e0 <sprintf@plt+0x4154>
   159b8:	mov	r6, #22
   159bc:	b	15998 <sprintf@plt+0x410c>
   159c0:	ldr	r0, [sp, #32]
   159c4:	cmp	r3, r0
   159c8:	bls	159fc <sprintf@plt+0x4170>
   159cc:	cmp	r9, #0
   159d0:	movne	r0, #0
   159d4:	strne	r0, [r7]
   159d8:	bl	11880 <__errno_location@plt>
   159dc:	mov	r1, #90	; 0x5a
   159e0:	str	r1, [r0]
   159e4:	b	159a0 <sprintf@plt+0x4114>
   159e8:	mov	r6, #22
   159ec:	cmp	r1, #0
   159f0:	bne	15998 <sprintf@plt+0x410c>
   159f4:	mov	r0, #0
   159f8:	b	155dc <sprintf@plt+0x3d50>
   159fc:	ldr	r0, [sp]
   15a00:	sub	r0, r3, r0
   15a04:	cmp	r0, #0
   15a08:	mvn	r0, #0
   15a0c:	blt	151f0 <sprintf@plt+0x3964>
   15a10:	ldr	r0, [sp, #28]
   15a14:	ldr	r2, [sp, #36]	; 0x24
   15a18:	mov	r1, #256	; 0x100
   15a1c:	strb	r0, [r3, #1]
   15a20:	lsr	r0, r0, #8
   15a24:	strb	r8, [r3, #3]
   15a28:	strb	r0, [r3]
   15a2c:	lsr	r0, r8, #8
   15a30:	strb	r0, [r3, #2]
   15a34:	ldr	r0, [r2, #4]
   15a38:	bfi	r0, r1, #0, #16
   15a3c:	str	r0, [r2, #4]
   15a40:	add	r0, r3, #4
   15a44:	sub	r0, r0, r2
   15a48:	sub	sp, fp, #28
   15a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a50:	cmp	r0, #0
   15a54:	beq	15a78 <sprintf@plt+0x41ec>
   15a58:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15a5c:	ldr	r1, [sp, #44]	; 0x2c
   15a60:	cmp	r0, r1
   15a64:	bcs	15998 <sprintf@plt+0x410c>
   15a68:	add	r1, r0, #1
   15a6c:	str	r1, [fp, #-40]	; 0xffffffd8
   15a70:	mov	r1, #0
   15a74:	strb	r1, [r0]
   15a78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15a7c:	add	r1, sp, #129	; 0x81
   15a80:	sub	r0, r0, r1
   15a84:	cmp	r0, #255	; 0xff
   15a88:	ble	15630 <sprintf@plt+0x3da4>
   15a8c:	b	15998 <sprintf@plt+0x410c>
   15a90:	andeq	r4, r0, r2, lsr #5
   15a94:	andeq	r4, r0, r9, lsr r0
   15a98:	andeq	r4, r0, r2, lsr r2
   15a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aa0:	add	fp, sp, #28
   15aa4:	sub	sp, sp, #20
   15aa8:	ldr	r4, [r2, #8]
   15aac:	mov	r5, r2
   15ab0:	mov	r0, r4
   15ab4:	bl	116a0 <strlen@plt>
   15ab8:	add	r0, r0, #1
   15abc:	bl	11784 <malloc@plt>
   15ac0:	cmp	r0, #0
   15ac4:	beq	15e04 <sprintf@plt+0x4578>
   15ac8:	mov	r1, r4
   15acc:	mov	r6, r0
   15ad0:	str	r5, [sp, #4]
   15ad4:	bl	11700 <strcpy@plt>
   15ad8:	ldrb	r0, [r6]
   15adc:	mov	r4, #0
   15ae0:	str	r6, [sp]
   15ae4:	cmp	r0, #42	; 0x2a
   15ae8:	bne	15afc <sprintf@plt+0x4270>
   15aec:	mov	r0, #0
   15af0:	mov	r8, #0
   15af4:	str	r0, [sp, #8]
   15af8:	b	15c2c <sprintf@plt+0x43a0>
   15afc:	ldr	r1, [pc, #816]	; 15e34 <sprintf@plt+0x45a8>
   15b00:	add	r2, sp, #16
   15b04:	mov	r0, r6
   15b08:	add	r1, pc, r1
   15b0c:	bl	11580 <rb_strtok_r@plt>
   15b10:	mov	sl, r0
   15b14:	cmp	r0, #0
   15b18:	mov	r0, #0
   15b1c:	mov	r8, #0
   15b20:	str	r0, [sp, #8]
   15b24:	beq	15c2c <sprintf@plt+0x43a0>
   15b28:	mov	r0, #0
   15b2c:	mov	r8, #0
   15b30:	mov	r4, #0
   15b34:	str	r0, [sp, #8]
   15b38:	mov	r0, #1
   15b3c:	mov	r1, #72	; 0x48
   15b40:	bl	115b0 <calloc@plt>
   15b44:	cmp	r0, #0
   15b48:	beq	15e04 <sprintf@plt+0x4578>
   15b4c:	str	r4, [sp, #12]
   15b50:	mov	r5, r0
   15b54:	mov	r9, #2
   15b58:	mov	r7, #0
   15b5c:	mov	r4, sl
   15b60:	b	15b68 <sprintf@plt+0x42dc>
   15b64:	add	r4, r4, #1
   15b68:	ldrb	r6, [r4]
   15b6c:	cmp	r6, #46	; 0x2e
   15b70:	beq	15b98 <sprintf@plt+0x430c>
   15b74:	cmp	r6, #0
   15b78:	beq	15bac <sprintf@plt+0x4320>
   15b7c:	bl	11760 <__ctype_b_loc@plt>
   15b80:	ldr	r0, [r0]
   15b84:	add	r0, r0, r6, lsl #1
   15b88:	ldrb	r0, [r0, #1]
   15b8c:	tst	r0, #8
   15b90:	bne	15b64 <sprintf@plt+0x42d8>
   15b94:	b	15ddc <sprintf@plt+0x4550>
   15b98:	cmp	r7, #3
   15b9c:	bge	15df8 <sprintf@plt+0x456c>
   15ba0:	add	r7, r7, #1
   15ba4:	mov	r9, #1
   15ba8:	b	15b64 <sprintf@plt+0x42d8>
   15bac:	sub	r0, r7, #1
   15bb0:	cmp	r0, #2
   15bb4:	bcc	15e08 <sprintf@plt+0x457c>
   15bb8:	add	r0, r5, #4
   15bbc:	mov	r1, sl
   15bc0:	mov	r2, #53	; 0x35
   15bc4:	str	r9, [r5]
   15bc8:	bl	11628 <rb_strlcpy@plt>
   15bcc:	ldr	r4, [sp, #12]
   15bd0:	mov	r0, #0
   15bd4:	str	r5, [r5, #60]	; 0x3c
   15bd8:	cmp	r8, #0
   15bdc:	str	r0, [r5, #64]	; 0x40
   15be0:	add	r0, r5, #60	; 0x3c
   15be4:	str	r8, [r5, #68]	; 0x44
   15be8:	beq	15bf4 <sprintf@plt+0x4368>
   15bec:	str	r0, [r8, #4]
   15bf0:	b	15c04 <sprintf@plt+0x4378>
   15bf4:	ldr	r1, [sp, #8]
   15bf8:	cmp	r1, #0
   15bfc:	moveq	r1, r0
   15c00:	str	r1, [sp, #8]
   15c04:	ldr	r1, [pc, #568]	; 15e44 <sprintf@plt+0x45b8>
   15c08:	mov	r8, r0
   15c0c:	mov	r0, #0
   15c10:	add	r2, sp, #16
   15c14:	add	r1, pc, r1
   15c18:	bl	11580 <rb_strtok_r@plt>
   15c1c:	mov	sl, r0
   15c20:	add	r4, r4, #1
   15c24:	cmp	r0, #0
   15c28:	bne	15b38 <sprintf@plt+0x42ac>
   15c2c:	ldr	r0, [sp]
   15c30:	str	r4, [sp, #12]
   15c34:	bl	1164c <free@plt>
   15c38:	ldr	r4, [sp, #4]
   15c3c:	mov	r1, #0
   15c40:	mov	r2, #10
   15c44:	ldr	r0, [r4, #4]
   15c48:	bl	116e8 <strtol@plt>
   15c4c:	ands	r9, r0, #3
   15c50:	beq	15c68 <sprintf@plt+0x43dc>
   15c54:	ldr	r6, [r4]
   15c58:	cmp	r6, #0
   15c5c:	ldrne	r5, [r4, #12]
   15c60:	cmpne	r5, #0
   15c64:	bne	15c80 <sprintf@plt+0x43f4>
   15c68:	ldr	r1, [pc, #488]	; 15e58 <sprintf@plt+0x45cc>
   15c6c:	add	r1, pc, r1
   15c70:	mov	r0, #67	; 0x43
   15c74:	bl	124e8 <sprintf@plt+0xc5c>
   15c78:	mov	r0, #3
   15c7c:	bl	11874 <exit@plt>
   15c80:	ldr	r7, [pc, #448]	; 15e48 <sprintf@plt+0x45bc>
   15c84:	ldr	r7, [pc, r7]
   15c88:	cmp	r7, #0
   15c8c:	bne	15ca0 <sprintf@plt+0x4414>
   15c90:	b	15ccc <sprintf@plt+0x4440>
   15c94:	ldr	r7, [r7, #8]
   15c98:	cmp	r7, #0
   15c9c:	beq	15ccc <sprintf@plt+0x4440>
   15ca0:	ldr	r4, [r7]
   15ca4:	mov	r1, r6
   15ca8:	mov	r0, r4
   15cac:	bl	115a4 <strcasecmp@plt>
   15cb0:	cmp	r0, #0
   15cb4:	bne	15c94 <sprintf@plt+0x4408>
   15cb8:	cmp	r4, #0
   15cbc:	beq	15ccc <sprintf@plt+0x4440>
   15cc0:	mov	r0, #0
   15cc4:	strb	r0, [r4, #784]	; 0x310
   15cc8:	b	15d48 <sprintf@plt+0x44bc>
   15ccc:	mov	r0, #1
   15cd0:	mov	r1, #800	; 0x320
   15cd4:	bl	115b0 <calloc@plt>
   15cd8:	cmp	r0, #0
   15cdc:	beq	15e04 <sprintf@plt+0x4578>
   15ce0:	mov	r4, r0
   15ce4:	bl	11808 <rb_make_rb_dlink_node@plt>
   15ce8:	cmp	r0, #0
   15cec:	beq	15e14 <sprintf@plt+0x4588>
   15cf0:	mov	r1, #0
   15cf4:	str	r1, [r0, #4]
   15cf8:	str	r4, [r0]
   15cfc:	ldr	r1, [pc, #328]	; 15e4c <sprintf@plt+0x45c0>
   15d00:	ldr	r1, [pc, r1]
   15d04:	cmp	r1, #0
   15d08:	str	r1, [r0, #8]
   15d0c:	beq	15d1c <sprintf@plt+0x4490>
   15d10:	add	r1, r1, #4
   15d14:	str	r0, [r1]
   15d18:	b	15d30 <sprintf@plt+0x44a4>
   15d1c:	ldr	r1, [pc, #300]	; 15e50 <sprintf@plt+0x45c4>
   15d20:	add	r1, pc, r1
   15d24:	ldr	r2, [r1, #4]!
   15d28:	cmp	r2, #0
   15d2c:	streq	r0, [r1]
   15d30:	ldr	r1, [pc, #284]	; 15e54 <sprintf@plt+0x45c8>
   15d34:	add	r1, pc, r1
   15d38:	str	r0, [r1]
   15d3c:	ldr	r0, [r1, #8]
   15d40:	add	r0, r0, #1
   15d44:	str	r0, [r1, #8]
   15d48:	mov	r0, r4
   15d4c:	mov	r1, r6
   15d50:	mov	r2, #256	; 0x100
   15d54:	bl	11628 <rb_strlcpy@plt>
   15d58:	add	r0, r4, #256	; 0x100
   15d5c:	mov	r1, r5
   15d60:	mov	r2, #512	; 0x200
   15d64:	bl	11628 <rb_strlcpy@plt>
   15d68:	cmp	r8, #0
   15d6c:	strb	r9, [r4, #768]	; 0x300
   15d70:	beq	15da0 <sprintf@plt+0x4514>
   15d74:	ldr	r0, [r4, #772]	; 0x304
   15d78:	cmp	r0, #0
   15d7c:	beq	15db8 <sprintf@plt+0x452c>
   15d80:	ldr	r1, [sp, #8]
   15d84:	str	r0, [r1, #8]
   15d88:	str	r1, [r0, #4]
   15d8c:	str	r8, [r4, #772]	; 0x304
   15d90:	ldr	r1, [sp, #12]
   15d94:	ldr	r0, [r4, #780]	; 0x30c
   15d98:	add	r0, r0, r1
   15d9c:	b	15dc8 <sprintf@plt+0x453c>
   15da0:	mov	r0, #0
   15da4:	cmp	r4, #0
   15da8:	str	r0, [r4, #796]	; 0x31c
   15dac:	beq	15c68 <sprintf@plt+0x43dc>
   15db0:	sub	sp, fp, #28
   15db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15db8:	ldr	r0, [sp, #8]
   15dbc:	str	r8, [r4, #772]	; 0x304
   15dc0:	str	r0, [r4, #776]	; 0x308
   15dc4:	ldr	r0, [sp, #12]
   15dc8:	str	r0, [r4, #780]	; 0x30c
   15dcc:	mov	r0, #0
   15dd0:	str	r0, [r4, #796]	; 0x31c
   15dd4:	sub	sp, fp, #28
   15dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ddc:	ldr	r1, [pc, #92]	; 15e40 <sprintf@plt+0x45b4>
   15de0:	mov	r0, #67	; 0x43
   15de4:	mov	r2, r6
   15de8:	add	r1, pc, r1
   15dec:	bl	124e8 <sprintf@plt+0xc5c>
   15df0:	mov	r0, #3
   15df4:	bl	11874 <exit@plt>
   15df8:	ldr	r1, [pc, #60]	; 15e3c <sprintf@plt+0x45b0>
   15dfc:	add	r1, pc, r1
   15e00:	b	15c70 <sprintf@plt+0x43e4>
   15e04:	bl	11754 <rb_outofmemory@plt>
   15e08:	ldr	r1, [pc, #40]	; 15e38 <sprintf@plt+0x45ac>
   15e0c:	add	r1, pc, r1
   15e10:	b	15c70 <sprintf@plt+0x43e4>
   15e14:	ldr	r0, [pc, #64]	; 15e5c <sprintf@plt+0x45d0>
   15e18:	ldr	r1, [pc, #64]	; 15e60 <sprintf@plt+0x45d4>
   15e1c:	ldr	r3, [pc, #64]	; 15e64 <sprintf@plt+0x45d8>
   15e20:	mov	r2, #144	; 0x90
   15e24:	add	r0, pc, r0
   15e28:	add	r1, pc, r1
   15e2c:	add	r3, pc, r3
   15e30:	bl	11610 <__assert_fail@plt>
   15e34:	andeq	r3, r0, r5, lsl #22
   15e38:	andeq	r3, r0, sp, lsl #17
   15e3c:	andeq	r3, r0, r3, lsl r8
   15e40:	andeq	r3, r0, r1, ror #16
   15e44:	strdeq	r3, [r0], -r9
   15e48:	andeq	r9, r1, r0, lsr #7
   15e4c:	andeq	r9, r1, r4, lsr #6
   15e50:	andeq	r9, r1, r4, lsl #6
   15e54:	strdeq	r9, [r1], -r0
   15e58:	andeq	r3, r0, fp, ror #20
   15e5c:	muleq	r0, r8, r4
   15e60:	muleq	r0, lr, r4
   15e64:	strdeq	r3, [r0], -r9
   15e68:	push	{r4, r5, r6, r7, fp, lr}
   15e6c:	add	fp, sp, #16
   15e70:	ldr	r5, [r2]
   15e74:	ldr	r6, [pc, #232]	; 15f64 <sprintf@plt+0x46d8>
   15e78:	ldr	r6, [pc, r6]
   15e7c:	cmp	r6, #0
   15e80:	beq	15f00 <sprintf@plt+0x4674>
   15e84:	mov	r7, r6
   15e88:	ldr	r4, [r7]
   15e8c:	mov	r1, r5
   15e90:	mov	r0, r4
   15e94:	bl	115a4 <strcasecmp@plt>
   15e98:	cmp	r0, #0
   15e9c:	beq	15eb0 <sprintf@plt+0x4624>
   15ea0:	ldr	r7, [r7, #8]
   15ea4:	cmp	r7, #0
   15ea8:	bne	15e88 <sprintf@plt+0x45fc>
   15eac:	b	15f00 <sprintf@plt+0x4674>
   15eb0:	cmp	r4, #0
   15eb4:	beq	15f00 <sprintf@plt+0x4674>
   15eb8:	ldr	r0, [r4, #788]	; 0x314
   15ebc:	cmp	r0, #0
   15ec0:	movgt	r0, #1
   15ec4:	strbgt	r0, [r4, #784]	; 0x310
   15ec8:	popgt	{r4, r5, r6, r7, fp, pc}
   15ecc:	cmp	r6, #0
   15ed0:	beq	15f58 <sprintf@plt+0x46cc>
   15ed4:	ldr	r1, [r6]
   15ed8:	mov	r0, r6
   15edc:	ldr	r6, [r6, #8]
   15ee0:	cmp	r1, r4
   15ee4:	bne	15ecc <sprintf@plt+0x4640>
   15ee8:	ldr	r1, [r0, #4]
   15eec:	cmp	r6, #0
   15ef0:	beq	15f18 <sprintf@plt+0x468c>
   15ef4:	str	r1, [r6, #4]
   15ef8:	ldr	r1, [r0, #4]
   15efc:	b	15f24 <sprintf@plt+0x4698>
   15f00:	ldr	r1, [pc, #104]	; 15f70 <sprintf@plt+0x46e4>
   15f04:	mov	r0, #87	; 0x57
   15f08:	mov	r2, r5
   15f0c:	add	r1, pc, r1
   15f10:	pop	{r4, r5, r6, r7, fp, lr}
   15f14:	b	124e8 <sprintf@plt+0xc5c>
   15f18:	ldr	r2, [pc, #72]	; 15f68 <sprintf@plt+0x46dc>
   15f1c:	add	r2, pc, r2
   15f20:	str	r1, [r2, #4]
   15f24:	ldr	r2, [pc, #64]	; 15f6c <sprintf@plt+0x46e0>
   15f28:	cmp	r1, #0
   15f2c:	add	r2, pc, r2
   15f30:	mov	r3, r2
   15f34:	addne	r3, r1, #8
   15f38:	mov	r1, #0
   15f3c:	str	r6, [r3]
   15f40:	str	r1, [r0, #4]
   15f44:	str	r1, [r0, #8]
   15f48:	ldr	r1, [r2, #8]
   15f4c:	sub	r1, r1, #1
   15f50:	str	r1, [r2, #8]
   15f54:	bl	116d0 <rb_free_rb_dlink_node@plt>
   15f58:	mov	r0, r4
   15f5c:	pop	{r4, r5, r6, r7, fp, lr}
   15f60:	b	1164c <free@plt>
   15f64:	andeq	r9, r1, ip, lsr #3
   15f68:	andeq	r9, r1, r8, lsl #2
   15f6c:	strdeq	r9, [r1], -r8
   15f70:	strdeq	r3, [r0], -r8
   15f74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f78:	add	fp, sp, #24
   15f7c:	ldr	r5, [pc, #176]	; 16034 <sprintf@plt+0x47a8>
   15f80:	ldr	r5, [pc, r5]
   15f84:	cmp	r5, #0
   15f88:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f8c:	ldr	r7, [pc, #164]	; 16038 <sprintf@plt+0x47ac>
   15f90:	mov	r6, #1
   15f94:	mov	r8, #0
   15f98:	add	r7, pc, r7
   15f9c:	ldr	r4, [r5]
   15fa0:	ldr	r5, [r5, #8]
   15fa4:	ldr	r0, [r4, #788]	; 0x314
   15fa8:	cmp	r0, #1
   15fac:	blt	15fc0 <sprintf@plt+0x4734>
   15fb0:	strb	r6, [r4, #784]	; 0x310
   15fb4:	cmp	r5, #0
   15fb8:	bne	15f9c <sprintf@plt+0x4710>
   15fbc:	b	16030 <sprintf@plt+0x47a4>
   15fc0:	ldr	r1, [pc, #116]	; 1603c <sprintf@plt+0x47b0>
   15fc4:	ldr	r1, [pc, r1]
   15fc8:	cmp	r1, #0
   15fcc:	beq	16020 <sprintf@plt+0x4794>
   15fd0:	ldr	r2, [r1]
   15fd4:	mov	r0, r1
   15fd8:	ldr	r1, [r1, #8]
   15fdc:	cmp	r2, r4
   15fe0:	bne	15fc8 <sprintf@plt+0x473c>
   15fe4:	ldr	r2, [r0, #4]
   15fe8:	cmp	r1, #0
   15fec:	mov	r3, r7
   15ff0:	streq	r2, [r7, #4]
   15ff4:	strne	r2, [r1, #4]
   15ff8:	ldrne	r2, [r0, #4]
   15ffc:	cmp	r2, #0
   16000:	addne	r3, r2, #8
   16004:	str	r1, [r3]
   16008:	str	r8, [r0, #4]
   1600c:	str	r8, [r0, #8]
   16010:	ldr	r1, [r7, #8]
   16014:	sub	r1, r1, #1
   16018:	str	r1, [r7, #8]
   1601c:	bl	116d0 <rb_free_rb_dlink_node@plt>
   16020:	mov	r0, r4
   16024:	bl	1164c <free@plt>
   16028:	cmp	r5, #0
   1602c:	bne	15f9c <sprintf@plt+0x4710>
   16030:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16034:	andeq	r9, r1, r4, lsr #1
   16038:	andeq	r9, r1, ip, lsl #1
   1603c:	andeq	r9, r1, r0, rrx
   16040:	push	{fp, lr}
   16044:	mov	fp, sp
   16048:	ldr	r0, [r2]
   1604c:	mov	r1, #0
   16050:	mov	r2, #10
   16054:	bl	116e8 <strtol@plt>
   16058:	cmn	r0, #1
   1605c:	mov	r2, r0
   16060:	ldrgt	r0, [pc, #32]	; 16088 <sprintf@plt+0x47fc>
   16064:	addgt	r0, pc, r0
   16068:	strgt	r2, [r0]
   1606c:	popgt	{fp, pc}
   16070:	ldr	r1, [pc, #20]	; 1608c <sprintf@plt+0x4800>
   16074:	mov	r0, #67	; 0x43
   16078:	add	r1, pc, r1
   1607c:	bl	124e8 <sprintf@plt+0xc5c>
   16080:	mov	r0, #3
   16084:	bl	11874 <exit@plt>
   16088:			; <UNDEFINED> instruction: 0x00014dbc
   1608c:			; <UNDEFINED> instruction: 0x000036b8
   16090:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16094:	add	fp, sp, #24
   16098:	sub	sp, sp, #8
   1609c:	ldr	r6, [pc, #276]	; 161b8 <sprintf@plt+0x492c>
   160a0:	mov	r4, sp
   160a4:	mov	r1, r4
   160a8:	ldr	r6, [pc, r6]
   160ac:	ldr	r0, [r6]
   160b0:	bl	11688 <rb_dictionary_foreach_start@plt>
   160b4:	ldr	r0, [r6]
   160b8:	mov	r1, r4
   160bc:	bl	11598 <rb_dictionary_foreach_cur@plt>
   160c0:	cmp	r0, #0
   160c4:	beq	160fc <sprintf@plt+0x4870>
   160c8:	ldr	r4, [pc, #236]	; 161bc <sprintf@plt+0x4930>
   160cc:	mov	r5, sp
   160d0:	add	r4, pc, r4
   160d4:	mov	r1, r4
   160d8:	bl	169c8 <sprintf@plt+0x513c>
   160dc:	ldr	r0, [r6]
   160e0:	mov	r1, r5
   160e4:	bl	11640 <rb_dictionary_foreach_next@plt>
   160e8:	ldr	r0, [r6]
   160ec:	mov	r1, r5
   160f0:	bl	11598 <rb_dictionary_foreach_cur@plt>
   160f4:	cmp	r0, #0
   160f8:	bne	160d4 <sprintf@plt+0x4848>
   160fc:	ldr	r5, [pc, #188]	; 161c0 <sprintf@plt+0x4934>
   16100:	ldr	r5, [pc, r5]
   16104:	cmp	r5, #0
   16108:	beq	161b0 <sprintf@plt+0x4924>
   1610c:	ldr	r7, [pc, #176]	; 161c4 <sprintf@plt+0x4938>
   16110:	mov	r6, #1
   16114:	mov	r8, #0
   16118:	add	r7, pc, r7
   1611c:	ldr	r4, [r5]
   16120:	ldr	r5, [r5, #8]
   16124:	ldr	r0, [r4, #788]	; 0x314
   16128:	cmp	r0, #1
   1612c:	blt	16140 <sprintf@plt+0x48b4>
   16130:	strb	r6, [r4, #784]	; 0x310
   16134:	cmp	r5, #0
   16138:	bne	1611c <sprintf@plt+0x4890>
   1613c:	b	161b0 <sprintf@plt+0x4924>
   16140:	ldr	r1, [pc, #128]	; 161c8 <sprintf@plt+0x493c>
   16144:	ldr	r1, [pc, r1]
   16148:	cmp	r1, #0
   1614c:	beq	161a0 <sprintf@plt+0x4914>
   16150:	ldr	r2, [r1]
   16154:	mov	r0, r1
   16158:	ldr	r1, [r1, #8]
   1615c:	cmp	r2, r4
   16160:	bne	16148 <sprintf@plt+0x48bc>
   16164:	ldr	r2, [r0, #4]
   16168:	cmp	r1, #0
   1616c:	mov	r3, r7
   16170:	streq	r2, [r7, #4]
   16174:	strne	r2, [r1, #4]
   16178:	ldrne	r2, [r0, #4]
   1617c:	cmp	r2, #0
   16180:	addne	r3, r2, #8
   16184:	str	r1, [r3]
   16188:	str	r8, [r0, #4]
   1618c:	str	r8, [r0, #8]
   16190:	ldr	r1, [r7, #8]
   16194:	sub	r1, r1, #1
   16198:	str	r1, [r7, #8]
   1619c:	bl	116d0 <rb_free_rb_dlink_node@plt>
   161a0:	mov	r0, r4
   161a4:	bl	1164c <free@plt>
   161a8:	cmp	r5, #0
   161ac:	bne	1611c <sprintf@plt+0x4890>
   161b0:	sub	sp, fp, #24
   161b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161b8:	andeq	r4, r1, ip, lsr #1
   161bc:	andeq	r3, r0, ip, asr r7
   161c0:	andeq	r8, r1, r4, lsr #30
   161c4:	andeq	r8, r1, ip, lsl #30
   161c8:	andeq	r8, r1, r0, ror #29
   161cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   161d0:	add	fp, sp, #24
   161d4:	mov	r9, r0
   161d8:	ldr	r0, [pc, #312]	; 16318 <sprintf@plt+0x4a8c>
   161dc:	add	r0, pc, r0
   161e0:	ldr	r0, [r0, #8]
   161e4:	cmp	r0, #0
   161e8:	beq	1626c <sprintf@plt+0x49e0>
   161ec:	ldr	r0, [r9, #460]	; 0x1cc
   161f0:	mov	r1, #16
   161f4:	add	r0, r0, #1
   161f8:	str	r0, [r9, #460]	; 0x1cc
   161fc:	ldr	r0, [pc, #284]	; 16320 <sprintf@plt+0x4a94>
   16200:	ldr	r0, [pc, r0]
   16204:	ldr	r5, [r0, #12]
   16208:	mov	r0, #1
   1620c:	bl	115b0 <calloc@plt>
   16210:	cmp	r0, #0
   16214:	beq	16314 <sprintf@plt+0x4a88>
   16218:	ldr	r8, [r9, #464]	; 0x1d0
   1621c:	add	r1, r8, r5, lsl #4
   16220:	str	r0, [r1, #8]
   16224:	ldr	r0, [pc, #248]	; 16324 <sprintf@plt+0x4a98>
   16228:	ldr	r0, [pc, r0]
   1622c:	ldr	r6, [r0]
   16230:	cmp	r6, #0
   16234:	beq	162ec <sprintf@plt+0x4a60>
   16238:	ldr	r5, [pc, #232]	; 16328 <sprintf@plt+0x4a9c>
   1623c:	mov	r7, r6
   16240:	add	r5, pc, r5
   16244:	ldr	r4, [r7]
   16248:	mov	r1, r5
   1624c:	ldr	r0, [r4, #16]
   16250:	bl	115a4 <strcasecmp@plt>
   16254:	cmp	r0, #0
   16258:	beq	16288 <sprintf@plt+0x49fc>
   1625c:	ldr	r7, [r7, #8]
   16260:	cmp	r7, #0
   16264:	bne	16244 <sprintf@plt+0x49b8>
   16268:	b	162a4 <sprintf@plt+0x4a18>
   1626c:	ldr	r0, [pc, #168]	; 1631c <sprintf@plt+0x4a90>
   16270:	ldr	r0, [pc, r0]
   16274:	ldr	r1, [r0, #12]
   16278:	mov	r0, r9
   1627c:	bl	12f54 <sprintf@plt+0x16c8>
   16280:	mov	r0, #1
   16284:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16288:	cmp	r4, #0
   1628c:	beq	162a4 <sprintf@plt+0x4a18>
   16290:	ldr	r0, [r4, #12]
   16294:	add	r0, r8, r0, lsl #4
   16298:	ldr	r0, [r0, #12]
   1629c:	cmp	r0, #2
   162a0:	bne	1630c <sprintf@plt+0x4a80>
   162a4:	ldr	r5, [r6]
   162a8:	ldr	r0, [r5, #16]
   162ac:	ldr	r1, [pc, #120]	; 1632c <sprintf@plt+0x4aa0>
   162b0:	add	r1, pc, r1
   162b4:	bl	115a4 <strcasecmp@plt>
   162b8:	cmp	r0, #0
   162bc:	beq	162d0 <sprintf@plt+0x4a44>
   162c0:	ldr	r6, [r6, #8]
   162c4:	cmp	r6, #0
   162c8:	bne	162a4 <sprintf@plt+0x4a18>
   162cc:	b	162ec <sprintf@plt+0x4a60>
   162d0:	cmp	r5, #0
   162d4:	beq	162ec <sprintf@plt+0x4a60>
   162d8:	ldr	r0, [r5, #12]
   162dc:	add	r0, r8, r0, lsl #4
   162e0:	ldr	r0, [r0, #12]
   162e4:	cmp	r0, #2
   162e8:	bne	1630c <sprintf@plt+0x4a80>
   162ec:	mov	r0, r9
   162f0:	bl	16474 <sprintf@plt+0x4be8>
   162f4:	cmp	r0, #0
   162f8:	bne	1630c <sprintf@plt+0x4a80>
   162fc:	ldr	r1, [pc, #44]	; 16330 <sprintf@plt+0x4aa4>
   16300:	mov	r0, r9
   16304:	add	r1, pc, r1
   16308:	bl	169c8 <sprintf@plt+0x513c>
   1630c:	mov	r0, #1
   16310:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16314:	bl	11754 <rb_outofmemory@plt>
   16318:	andeq	r8, r1, r8, asr #28
   1631c:	andeq	r3, r1, r4, lsl pc
   16320:	andeq	r3, r1, r4, lsl #31
   16324:	andeq	r3, r1, r4, ror pc
   16328:	andeq	r3, r0, r5, lsl r5
   1632c:	andeq	r3, r0, r5, lsl #13
   16330:	andeq	r3, r0, sp, lsl #10
   16334:	ldr	r1, [pc, #4]	; 16340 <sprintf@plt+0x4ab4>
   16338:	add	r1, pc, r1
   1633c:	b	169c8 <sprintf@plt+0x513c>
   16340:	strdeq	r3, [r0], -r4
   16344:	ldr	r1, [pc, #4]	; 16350 <sprintf@plt+0x4ac4>
   16348:	add	r1, pc, r1
   1634c:	b	169c8 <sprintf@plt+0x513c>
   16350:	strdeq	r3, [r0], -lr
   16354:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16358:	add	fp, sp, #24
   1635c:	mov	r8, r0
   16360:	ldr	r9, [r0, #464]	; 0x1d0
   16364:	ldr	r0, [pc, #244]	; 16460 <sprintf@plt+0x4bd4>
   16368:	ldr	r0, [pc, r0]
   1636c:	ldr	r0, [r0, #12]
   16370:	add	r0, r9, r0, lsl #4
   16374:	ldr	r0, [r0, #8]
   16378:	cmp	r0, #0
   1637c:	beq	16448 <sprintf@plt+0x4bbc>
   16380:	ldrb	r0, [r0]
   16384:	cmp	r0, #0
   16388:	bne	16448 <sprintf@plt+0x4bbc>
   1638c:	ldr	r0, [pc, #208]	; 16464 <sprintf@plt+0x4bd8>
   16390:	ldr	r0, [pc, r0]
   16394:	ldr	r4, [r0]
   16398:	cmp	r4, #0
   1639c:	beq	16438 <sprintf@plt+0x4bac>
   163a0:	ldr	r5, [pc, #192]	; 16468 <sprintf@plt+0x4bdc>
   163a4:	mov	r7, r4
   163a8:	add	r5, pc, r5
   163ac:	ldr	r6, [r7]
   163b0:	mov	r1, r5
   163b4:	ldr	r0, [r6, #16]
   163b8:	bl	115a4 <strcasecmp@plt>
   163bc:	cmp	r0, #0
   163c0:	beq	163d4 <sprintf@plt+0x4b48>
   163c4:	ldr	r7, [r7, #8]
   163c8:	cmp	r7, #0
   163cc:	bne	163ac <sprintf@plt+0x4b20>
   163d0:	b	163f0 <sprintf@plt+0x4b64>
   163d4:	cmp	r6, #0
   163d8:	beq	163f0 <sprintf@plt+0x4b64>
   163dc:	ldr	r0, [r6, #12]
   163e0:	add	r0, r9, r0, lsl #4
   163e4:	ldr	r0, [r0, #12]
   163e8:	cmp	r0, #2
   163ec:	bne	16448 <sprintf@plt+0x4bbc>
   163f0:	ldr	r5, [r4]
   163f4:	ldr	r0, [r5, #16]
   163f8:	ldr	r1, [pc, #108]	; 1646c <sprintf@plt+0x4be0>
   163fc:	add	r1, pc, r1
   16400:	bl	115a4 <strcasecmp@plt>
   16404:	cmp	r0, #0
   16408:	beq	1641c <sprintf@plt+0x4b90>
   1640c:	ldr	r4, [r4, #8]
   16410:	cmp	r4, #0
   16414:	bne	163f0 <sprintf@plt+0x4b64>
   16418:	b	16438 <sprintf@plt+0x4bac>
   1641c:	cmp	r5, #0
   16420:	beq	16438 <sprintf@plt+0x4bac>
   16424:	ldr	r0, [r5, #12]
   16428:	add	r0, r9, r0, lsl #4
   1642c:	ldr	r0, [r0, #12]
   16430:	cmp	r0, #2
   16434:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   16438:	mov	r0, r8
   1643c:	bl	16474 <sprintf@plt+0x4be8>
   16440:	cmp	r0, #0
   16444:	beq	1644c <sprintf@plt+0x4bc0>
   16448:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1644c:	ldr	r1, [pc, #28]	; 16470 <sprintf@plt+0x4be4>
   16450:	mov	r0, r8
   16454:	add	r1, pc, r1
   16458:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1645c:	b	169c8 <sprintf@plt+0x513c>
   16460:	andeq	r3, r1, ip, lsl lr
   16464:	andeq	r3, r1, ip, lsl #28
   16468:	andeq	r3, r0, sp, lsr #7
   1646c:	andeq	r3, r0, r9, lsr r5
   16470:			; <UNDEFINED> instruction: 0x000033bd
   16474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16478:	add	fp, sp, #28
   1647c:	sub	sp, sp, #268	; 0x10c
   16480:	mov	r4, r0
   16484:	ldr	r0, [r0, #464]	; 0x1d0
   16488:	ldr	r1, [pc, #468]	; 16664 <sprintf@plt+0x4dd8>
   1648c:	mov	r2, #1
   16490:	mov	r9, #1
   16494:	ldr	r1, [pc, r1]
   16498:	ldr	r1, [r1, #12]
   1649c:	add	r0, r0, r1, lsl #4
   164a0:	ldrh	r1, [r4, #248]	; 0xf8
   164a4:	ldr	r3, [r0, #8]
   164a8:	mov	r0, #0
   164ac:	cmp	r1, #2
   164b0:	beq	164c0 <sprintf@plt+0x4c34>
   164b4:	cmp	r1, #10
   164b8:	bne	16658 <sprintf@plt+0x4dcc>
   164bc:	mov	r9, #2
   164c0:	strb	r2, [r3]
   164c4:	str	r3, [sp]
   164c8:	ldr	r0, [r4]
   164cc:	ldr	r1, [pc, #404]	; 16668 <sprintf@plt+0x4ddc>
   164d0:	add	r1, pc, r1
   164d4:	bl	12474 <sprintf@plt+0xbe8>
   164d8:	ldr	r8, [pc, #396]	; 1666c <sprintf@plt+0x4de0>
   164dc:	ldr	r8, [pc, r8]
   164e0:	cmp	r8, #0
   164e4:	beq	16618 <sprintf@plt+0x4d8c>
   164e8:	add	r0, r4, #248	; 0xf8
   164ec:	str	r0, [sp, #4]
   164f0:	b	165fc <sprintf@plt+0x4d70>
   164f4:	ldrb	r0, [r5, #768]	; 0x300
   164f8:	tst	r9, r0
   164fc:	beq	1660c <sprintf@plt+0x4d80>
   16500:	mov	r0, #1
   16504:	mov	r1, #24
   16508:	bl	115b0 <calloc@plt>
   1650c:	cmp	r0, #0
   16510:	beq	16660 <sprintf@plt+0x4dd4>
   16514:	mov	r7, r0
   16518:	ldr	r0, [r4, #464]	; 0x1d0
   1651c:	ldr	r1, [pc, #332]	; 16670 <sprintf@plt+0x4de4>
   16520:	ldr	r1, [pc, r1]
   16524:	ldr	r1, [r1, #12]
   16528:	add	r0, r0, r1, lsl #4
   1652c:	ldr	sl, [r0, #8]
   16530:	str	r5, [r7]
   16534:	str	r4, [r7, #4]
   16538:	ldrh	r0, [r4, #248]	; 0xf8
   1653c:	cmp	r0, #10
   16540:	beq	165b4 <sprintf@plt+0x4d28>
   16544:	cmp	r0, #2
   16548:	ldrbeq	r0, [r5, #768]	; 0x300
   1654c:	tsteq	r0, #1
   16550:	beq	165c0 <sprintf@plt+0x4d34>
   16554:	ldr	r2, [sp, #4]
   16558:	add	r6, sp, #8
   1655c:	mov	r1, #256	; 0x100
   16560:	mov	r3, r5
   16564:	mov	r0, r6
   16568:	bl	13994 <sprintf@plt+0x2108>
   1656c:	ldr	r2, [pc, #256]	; 16674 <sprintf@plt+0x4de8>
   16570:	mov	r0, r6
   16574:	mov	r1, #2
   16578:	mov	r3, r7
   1657c:	add	r2, pc, r2
   16580:	bl	11d7c <sprintf@plt+0x4f0>
   16584:	str	r0, [r7, #8]
   16588:	mov	r0, #0
   1658c:	str	r0, [r7, #16]
   16590:	str	r7, [r7, #12]
   16594:	add	r0, r7, #12
   16598:	ldr	r1, [sl, #4]
   1659c:	cmp	r1, #0
   165a0:	str	r1, [r7, #20]
   165a4:	beq	165cc <sprintf@plt+0x4d40>
   165a8:	add	r1, r1, #4
   165ac:	str	r0, [r1]
   165b0:	b	165dc <sprintf@plt+0x4d50>
   165b4:	ldrb	r0, [r5, #768]	; 0x300
   165b8:	tst	r0, #2
   165bc:	bne	16554 <sprintf@plt+0x4cc8>
   165c0:	mov	r0, r7
   165c4:	bl	1164c <free@plt>
   165c8:	b	1660c <sprintf@plt+0x4d80>
   165cc:	mov	r1, sl
   165d0:	ldr	r2, [r1, #8]!
   165d4:	cmp	r2, #0
   165d8:	streq	r0, [r1]
   165dc:	str	r0, [sl, #4]
   165e0:	ldr	r0, [sl, #12]
   165e4:	add	r0, r0, #1
   165e8:	str	r0, [sl, #12]
   165ec:	ldr	r0, [r5, #788]	; 0x314
   165f0:	add	r0, r0, #1
   165f4:	str	r0, [r5, #788]	; 0x314
   165f8:	b	1660c <sprintf@plt+0x4d80>
   165fc:	ldr	r5, [r8]
   16600:	ldrb	r0, [r5, #784]	; 0x310
   16604:	cmp	r0, #0
   16608:	beq	164f4 <sprintf@plt+0x4c68>
   1660c:	ldr	r8, [r8, #8]
   16610:	cmp	r8, #0
   16614:	bne	165fc <sprintf@plt+0x4d70>
   16618:	ldr	r0, [sp]
   1661c:	ldr	r0, [r0, #12]
   16620:	cmp	r0, #0
   16624:	mov	r0, #0
   16628:	beq	16658 <sprintf@plt+0x4dcc>
   1662c:	ldr	r0, [pc, #68]	; 16678 <sprintf@plt+0x4dec>
   16630:	ldr	r0, [pc, r0]
   16634:	ldr	r5, [r0, #12]
   16638:	ldr	r6, [pc, #60]	; 1667c <sprintf@plt+0x4df0>
   1663c:	ldr	r6, [pc, r6]
   16640:	bl	116ac <rb_current_time@plt>
   16644:	ldr	r1, [r4, #464]	; 0x1d0
   16648:	add	r0, r0, r6
   1664c:	add	r1, r1, r5, lsl #4
   16650:	str	r0, [r1, #4]
   16654:	mov	r0, #1
   16658:	sub	sp, fp, #28
   1665c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16660:	bl	11754 <rb_outofmemory@plt>
   16664:	strdeq	r3, [r1], -r0
   16668:	andeq	r3, r0, sl, lsl #5
   1666c:	andeq	r8, r1, r8, asr #22
   16670:	andeq	r3, r1, r4, ror #24
   16674:	strdeq	r0, [r0], -ip
   16678:	andeq	r3, r1, r4, asr fp
   1667c:	andeq	r4, r1, r4, ror #15
   16680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16684:	add	fp, sp, #28
   16688:	sub	sp, sp, #4
   1668c:	mov	r4, r0
   16690:	ldr	r0, [pc, #508]	; 16894 <sprintf@plt+0x5008>
   16694:	ldr	r0, [pc, r0]
   16698:	ldr	r8, [r3, #4]
   1669c:	ldr	r7, [r0, #12]
   166a0:	ldr	r0, [r8, #464]	; 0x1d0
   166a4:	add	r0, r0, r7, lsl #4
   166a8:	ldr	r5, [r0, #8]
   166ac:	cmp	r5, #0
   166b0:	beq	16778 <sprintf@plt+0x4eec>
   166b4:	ldr	r9, [r3]
   166b8:	cmp	r4, #0
   166bc:	mov	r6, r3
   166c0:	cmpne	r1, #0
   166c4:	bne	16780 <sprintf@plt+0x4ef4>
   166c8:	mov	r0, r9
   166cc:	bl	168ac <sprintf@plt+0x5020>
   166d0:	ldr	r0, [r6, #8]
   166d4:	bl	12124 <sprintf@plt+0x898>
   166d8:	ldr	r0, [r6, #20]
   166dc:	ldr	r1, [r6, #16]
   166e0:	mov	r4, #0
   166e4:	cmp	r0, #0
   166e8:	streq	r1, [r5, #8]
   166ec:	strne	r1, [r0, #4]
   166f0:	ldrne	r1, [r6, #16]
   166f4:	ldr	r7, [pc, #420]	; 168a0 <sprintf@plt+0x5014>
   166f8:	add	r2, r1, #8
   166fc:	cmp	r1, #0
   16700:	ldr	r7, [pc, r7]
   16704:	addeq	r2, r5, #4
   16708:	str	r0, [r2]
   1670c:	str	r4, [r6, #16]
   16710:	str	r4, [r6, #20]
   16714:	ldr	r0, [r5, #12]
   16718:	sub	r0, r0, #1
   1671c:	str	r0, [r5, #12]
   16720:	mov	r0, r6
   16724:	bl	1164c <free@plt>
   16728:	ldr	r0, [r5, #12]
   1672c:	cmp	r0, #0
   16730:	bne	16778 <sprintf@plt+0x4eec>
   16734:	ldr	r0, [r8]
   16738:	ldr	r1, [pc, #356]	; 168a4 <sprintf@plt+0x5018>
   1673c:	add	r1, pc, r1
   16740:	bl	12474 <sprintf@plt+0xbe8>
   16744:	mov	r0, r5
   16748:	bl	1164c <free@plt>
   1674c:	ldr	r1, [r7, #12]
   16750:	ldr	r0, [r8, #464]	; 0x1d0
   16754:	add	r0, r0, r1, lsl #4
   16758:	str	r4, [r0, #4]
   1675c:	str	r4, [r0, #8]
   16760:	mov	r0, r8
   16764:	bl	12f54 <sprintf@plt+0x16c8>
   16768:	ldr	r0, [r8, #460]	; 0x1cc
   1676c:	subs	r0, r0, #1
   16770:	str	r0, [r8, #460]	; 0x1cc
   16774:	beq	167e0 <sprintf@plt+0x4f54>
   16778:	sub	sp, fp, #28
   1677c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16780:	ldr	r0, [r9, #780]	; 0x30c
   16784:	cmp	r0, #0
   16788:	beq	16840 <sprintf@plt+0x4fb4>
   1678c:	mov	r0, r4
   16790:	mov	r1, #46	; 0x2e
   16794:	bl	115f8 <strrchr@plt>
   16798:	cmp	r0, #0
   1679c:	ldrbne	r1, [r0, #1]!
   167a0:	cmpne	r1, #0
   167a4:	bne	167f0 <sprintf@plt+0x4f64>
   167a8:	ldr	r0, [r9, #796]	; 0x31c
   167ac:	add	r7, r0, #3600	; 0xe10
   167b0:	bl	116ac <rb_current_time@plt>
   167b4:	cmp	r7, r0
   167b8:	bge	166c8 <sprintf@plt+0x4e3c>
   167bc:	ldr	r1, [pc, #216]	; 1689c <sprintf@plt+0x5010>
   167c0:	mov	r0, #87	; 0x57
   167c4:	mov	r2, r9
   167c8:	mov	r3, r4
   167cc:	add	r1, pc, r1
   167d0:	bl	124e8 <sprintf@plt+0xc5c>
   167d4:	bl	116ac <rb_current_time@plt>
   167d8:	str	r0, [r9, #796]	; 0x31c
   167dc:	b	166c8 <sprintf@plt+0x4e3c>
   167e0:	mov	r0, r8
   167e4:	sub	sp, fp, #28
   167e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167ec:	b	12e90 <sprintf@plt+0x1604>
   167f0:	ldr	sl, [r9, #772]	; 0x304
   167f4:	str	r0, [sp]
   167f8:	cmp	sl, #0
   167fc:	bne	16810 <sprintf@plt+0x4f84>
   16800:	b	166c8 <sprintf@plt+0x4e3c>
   16804:	ldr	sl, [sl, #8]
   16808:	cmp	sl, #0
   1680c:	beq	166c8 <sprintf@plt+0x4e3c>
   16810:	ldr	r1, [sl]
   16814:	mov	r0, r4
   16818:	ldr	r3, [r1]
   1681c:	cmp	r3, #1
   16820:	beq	16830 <sprintf@plt+0x4fa4>
   16824:	ldr	r0, [sp]
   16828:	cmp	r3, #2
   1682c:	bne	16878 <sprintf@plt+0x4fec>
   16830:	add	r1, r1, #4
   16834:	bl	11868 <strcmp@plt>
   16838:	cmp	r0, #0
   1683c:	bne	16804 <sprintf@plt+0x4f78>
   16840:	ldr	r0, [r9, #792]	; 0x318
   16844:	add	r3, r9, #256	; 0x100
   16848:	mov	r1, r7
   1684c:	mov	r2, r9
   16850:	add	r0, r0, #1
   16854:	str	r0, [r9, #792]	; 0x318
   16858:	mov	r0, r8
   1685c:	bl	12b6c <sprintf@plt+0x12e0>
   16860:	ldr	r1, [pc, #48]	; 16898 <sprintf@plt+0x500c>
   16864:	mov	r0, r8
   16868:	add	r1, pc, r1
   1686c:	sub	sp, fp, #28
   16870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16874:	b	169c8 <sprintf@plt+0x513c>
   16878:	ldr	r1, [pc, #40]	; 168a8 <sprintf@plt+0x501c>
   1687c:	mov	r0, #67	; 0x43
   16880:	mov	r2, r9
   16884:	add	r1, pc, r1
   16888:	bl	124e8 <sprintf@plt+0xc5c>
   1688c:	mov	r0, #3
   16890:	bl	11874 <exit@plt>
   16894:	strdeq	r3, [r1], -r0
   16898:	andeq	r2, r0, r4, asr #31
   1689c:	andeq	r3, r0, r6
   168a0:	andeq	r3, r1, r4, lsl #21
   168a4:	andeq	r3, r0, r2, asr #32
   168a8:	andeq	r2, r0, pc, lsl pc
   168ac:	push	{r4, r5, r6, r7, fp, lr}
   168b0:	add	fp, sp, #16
   168b4:	mov	r4, r0
   168b8:	ldr	r0, [r0, #788]	; 0x314
   168bc:	subs	r0, r0, #1
   168c0:	str	r0, [r4, #788]	; 0x314
   168c4:	bgt	1696c <sprintf@plt+0x50e0>
   168c8:	ldrb	r0, [r4, #784]	; 0x310
   168cc:	cmp	r0, #0
   168d0:	popeq	{r4, r5, r6, r7, fp, pc}
   168d4:	mov	r5, r4
   168d8:	ldr	r0, [r5, #772]!	; 0x304
   168dc:	cmp	r0, #0
   168e0:	beq	16930 <sprintf@plt+0x50a4>
   168e4:	mov	r6, #0
   168e8:	ldmib	r0, {r1, r7}
   168ec:	mov	r2, r5
   168f0:	cmp	r7, #0
   168f4:	streq	r1, [r4, #776]	; 0x308
   168f8:	strne	r1, [r7, #4]
   168fc:	ldrne	r1, [r0, #4]
   16900:	cmp	r1, #0
   16904:	addne	r2, r1, #8
   16908:	str	r7, [r2]
   1690c:	str	r6, [r0, #4]
   16910:	str	r6, [r0, #8]
   16914:	ldr	r1, [r4, #780]	; 0x30c
   16918:	sub	r1, r1, #1
   1691c:	str	r1, [r4, #780]	; 0x30c
   16920:	bl	1164c <free@plt>
   16924:	cmp	r7, #0
   16928:	mov	r0, r7
   1692c:	bne	168e8 <sprintf@plt+0x505c>
   16930:	ldr	r1, [pc, #132]	; 169bc <sprintf@plt+0x5130>
   16934:	ldr	r1, [pc, r1]
   16938:	cmp	r1, #0
   1693c:	beq	169b0 <sprintf@plt+0x5124>
   16940:	ldr	r2, [r1]
   16944:	mov	r0, r1
   16948:	ldr	r1, [r1, #8]
   1694c:	cmp	r2, r4
   16950:	bne	16938 <sprintf@plt+0x50ac>
   16954:	ldr	r2, [r0, #4]
   16958:	cmp	r1, #0
   1695c:	beq	16970 <sprintf@plt+0x50e4>
   16960:	str	r2, [r1, #4]
   16964:	ldr	r2, [r0, #4]
   16968:	b	1697c <sprintf@plt+0x50f0>
   1696c:	pop	{r4, r5, r6, r7, fp, pc}
   16970:	ldr	r3, [pc, #72]	; 169c0 <sprintf@plt+0x5134>
   16974:	add	r3, pc, r3
   16978:	str	r2, [r3, #4]
   1697c:	ldr	r7, [pc, #64]	; 169c4 <sprintf@plt+0x5138>
   16980:	cmp	r2, #0
   16984:	add	r7, pc, r7
   16988:	mov	r3, r7
   1698c:	addne	r3, r2, #8
   16990:	str	r1, [r3]
   16994:	mov	r1, #0
   16998:	str	r1, [r0, #4]
   1699c:	str	r1, [r0, #8]
   169a0:	ldr	r1, [r7, #8]
   169a4:	sub	r1, r1, #1
   169a8:	str	r1, [r7, #8]
   169ac:	bl	116d0 <rb_free_rb_dlink_node@plt>
   169b0:	mov	r0, r4
   169b4:	pop	{r4, r5, r6, r7, fp, lr}
   169b8:	b	1164c <free@plt>
   169bc:	strdeq	r8, [r1], -r0
   169c0:			; <UNDEFINED> instruction: 0x000186b0
   169c4:	andeq	r8, r1, r0, lsr #13
   169c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169cc:	add	fp, sp, #28
   169d0:	sub	sp, sp, #4
   169d4:	mov	r9, r0
   169d8:	ldr	r0, [r0, #464]	; 0x1d0
   169dc:	ldr	r8, [pc, #248]	; 16adc <sprintf@plt+0x5250>
   169e0:	ldr	r8, [pc, r8]
   169e4:	ldr	r2, [r8, #12]
   169e8:	add	r0, r0, r2, lsl #4
   169ec:	ldr	r5, [r0, #8]
   169f0:	cmp	r5, #0
   169f4:	beq	16ac4 <sprintf@plt+0x5238>
   169f8:	ldr	r0, [r5, #12]
   169fc:	cmp	r0, #0
   16a00:	beq	16a8c <sprintf@plt+0x5200>
   16a04:	ldr	r0, [r9]
   16a08:	add	sl, r5, #4
   16a0c:	bl	12474 <sprintf@plt+0xbe8>
   16a10:	ldr	r4, [sl]
   16a14:	cmp	r4, #0
   16a18:	beq	16a8c <sprintf@plt+0x5200>
   16a1c:	mov	r7, #0
   16a20:	ldr	r6, [r4]
   16a24:	ldr	r4, [r4, #8]
   16a28:	ldr	r0, [r6, #8]
   16a2c:	bl	12124 <sprintf@plt+0x898>
   16a30:	ldr	r0, [r6]
   16a34:	bl	168ac <sprintf@plt+0x5020>
   16a38:	ldr	r0, [r6, #20]
   16a3c:	ldr	r1, [r6, #16]
   16a40:	mov	r2, sl
   16a44:	cmp	r0, #0
   16a48:	streq	r1, [r5, #8]
   16a4c:	strne	r1, [r0, #4]
   16a50:	ldrne	r1, [r6, #16]
   16a54:	cmp	r1, #0
   16a58:	addne	r2, r1, #8
   16a5c:	cmp	r6, #0
   16a60:	str	r0, [r2]
   16a64:	str	r7, [r6, #16]
   16a68:	str	r7, [r6, #20]
   16a6c:	ldr	r0, [r5, #12]
   16a70:	sub	r0, r0, #1
   16a74:	str	r0, [r5, #12]
   16a78:	beq	16a84 <sprintf@plt+0x51f8>
   16a7c:	mov	r0, r6
   16a80:	bl	1164c <free@plt>
   16a84:	cmp	r4, #0
   16a88:	bne	16a20 <sprintf@plt+0x5194>
   16a8c:	mov	r0, r5
   16a90:	bl	1164c <free@plt>
   16a94:	ldr	r0, [r9, #464]	; 0x1d0
   16a98:	ldr	r1, [r8, #12]
   16a9c:	mov	r2, #0
   16aa0:	add	r0, r0, r1, lsl #4
   16aa4:	str	r2, [r0, #4]
   16aa8:	str	r2, [r0, #8]
   16aac:	mov	r0, r9
   16ab0:	bl	12f54 <sprintf@plt+0x16c8>
   16ab4:	ldr	r0, [r9, #460]	; 0x1cc
   16ab8:	subs	r0, r0, #1
   16abc:	str	r0, [r9, #460]	; 0x1cc
   16ac0:	beq	16acc <sprintf@plt+0x5240>
   16ac4:	sub	sp, fp, #28
   16ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16acc:	mov	r0, r9
   16ad0:	sub	sp, fp, #28
   16ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad8:	b	12e90 <sprintf@plt+0x1604>
   16adc:	andeq	r3, r1, r4, lsr #15
   16ae0:	push	{fp, lr}
   16ae4:	mov	fp, sp
   16ae8:	ldr	r0, [r2]
   16aec:	mov	r1, #0
   16af0:	mov	r2, #10
   16af4:	bl	116e8 <strtol@plt>
   16af8:	cmn	r0, #1
   16afc:	mov	r2, r0
   16b00:	ldrgt	r0, [pc, #32]	; 16b28 <sprintf@plt+0x529c>
   16b04:	addgt	r0, pc, r0
   16b08:	strgt	r2, [r0]
   16b0c:	popgt	{fp, pc}
   16b10:	ldr	r1, [pc, #20]	; 16b2c <sprintf@plt+0x52a0>
   16b14:	mov	r0, #67	; 0x43
   16b18:	add	r1, pc, r1
   16b1c:	bl	124e8 <sprintf@plt+0xc5c>
   16b20:	mov	r0, #3
   16b24:	bl	11874 <exit@plt>
   16b28:	andeq	r4, r1, r0, lsl #7
   16b2c:	andeq	r2, r0, r6, ror #26
   16b30:	ldr	r0, [r2]
   16b34:	ldrb	r0, [r0]
   16b38:	ldr	r1, [pc, #20]	; 16b54 <sprintf@plt+0x52c8>
   16b3c:	sub	r0, r0, #49	; 0x31
   16b40:	add	r1, pc, r1
   16b44:	clz	r0, r0
   16b48:	lsr	r0, r0, #5
   16b4c:	strb	r0, [r1]
   16b50:	bx	lr
   16b54:	andeq	r4, r1, r8, asr #6
   16b58:	push	{r4, r5, r6, sl, fp, lr}
   16b5c:	add	fp, sp, #16
   16b60:	sub	sp, sp, #8
   16b64:	ldr	r5, [pc, #116]	; 16be0 <sprintf@plt+0x5354>
   16b68:	mov	r4, sp
   16b6c:	mov	r1, r4
   16b70:	ldr	r5, [pc, r5]
   16b74:	ldr	r0, [r5]
   16b78:	bl	11688 <rb_dictionary_foreach_start@plt>
   16b7c:	ldr	r0, [r5]
   16b80:	mov	r1, r4
   16b84:	bl	11598 <rb_dictionary_foreach_cur@plt>
   16b88:	cmp	r0, #0
   16b8c:	beq	16bd8 <sprintf@plt+0x534c>
   16b90:	ldr	r6, [pc, #76]	; 16be4 <sprintf@plt+0x5358>
   16b94:	mov	r4, sp
   16b98:	ldr	r6, [pc, r6]
   16b9c:	ldr	r1, [r0, #464]	; 0x1d0
   16ba0:	ldr	r2, [r6, #12]
   16ba4:	add	r1, r1, r2, lsl #4
   16ba8:	ldr	r1, [r1, #8]
   16bac:	cmp	r1, #0
   16bb0:	movne	r1, #2
   16bb4:	blne	16dc8 <sprintf@plt+0x553c>
   16bb8:	ldr	r0, [r5]
   16bbc:	mov	r1, r4
   16bc0:	bl	11640 <rb_dictionary_foreach_next@plt>
   16bc4:	ldr	r0, [r5]
   16bc8:	mov	r1, r4
   16bcc:	bl	11598 <rb_dictionary_foreach_cur@plt>
   16bd0:	cmp	r0, #0
   16bd4:	bne	16b9c <sprintf@plt+0x5310>
   16bd8:	sub	sp, fp, #16
   16bdc:	pop	{r4, r5, r6, sl, fp, pc}
   16be0:	andeq	r3, r1, r4, ror #11
   16be4:	andeq	r3, r1, r8, asr #11
   16be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16bec:	add	fp, sp, #24
   16bf0:	sub	sp, sp, #264	; 0x108
   16bf4:	mov	r4, r0
   16bf8:	mov	r0, #1
   16bfc:	mov	r1, #4
   16c00:	bl	115b0 <calloc@plt>
   16c04:	cmp	r0, #0
   16c08:	beq	16d70 <sprintf@plt+0x54e4>
   16c0c:	mov	r5, r0
   16c10:	ldr	r0, [pc, #348]	; 16d74 <sprintf@plt+0x54e8>
   16c14:	add	r0, pc, r0
   16c18:	ldrb	r0, [r0]
   16c1c:	cmp	r0, #0
   16c20:	beq	16d08 <sprintf@plt+0x547c>
   16c24:	ldr	r1, [r4, #460]	; 0x1cc
   16c28:	ldr	r0, [r4]
   16c2c:	add	r1, r1, #1
   16c30:	str	r1, [r4, #460]	; 0x1cc
   16c34:	ldrh	r8, [r4, #248]	; 0xf8
   16c38:	ldr	r1, [pc, #320]	; 16d80 <sprintf@plt+0x54f4>
   16c3c:	add	r1, pc, r1
   16c40:	bl	12474 <sprintf@plt+0xbe8>
   16c44:	ldr	r0, [pc, #312]	; 16d84 <sprintf@plt+0x54f8>
   16c48:	ldr	r0, [pc, r0]
   16c4c:	ldr	r7, [r0, #12]
   16c50:	ldr	r0, [r4, #464]	; 0x1d0
   16c54:	add	r0, r0, r7, lsl #4
   16c58:	str	r5, [r0, #8]
   16c5c:	ldr	r6, [pc, #292]	; 16d88 <sprintf@plt+0x54fc>
   16c60:	ldr	r6, [pc, r6]
   16c64:	bl	116ac <rb_current_time@plt>
   16c68:	ldr	r1, [r4, #464]	; 0x1d0
   16c6c:	add	r0, r0, r6
   16c70:	add	r1, r1, r7, lsl #4
   16c74:	str	r0, [r1, #4]
   16c78:	mov	r0, r8
   16c7c:	mov	r1, #1
   16c80:	ldr	r2, [r4, #4]
   16c84:	ldr	r3, [pc, #256]	; 16d8c <sprintf@plt+0x5500>
   16c88:	add	r3, pc, r3
   16c8c:	bl	11568 <rb_socket@plt>
   16c90:	cmp	r0, #0
   16c94:	str	r0, [r5]
   16c98:	beq	16d38 <sprintf@plt+0x54ac>
   16c9c:	add	r8, sp, #136	; 0x88
   16ca0:	mov	r6, r0
   16ca4:	add	r1, r4, #64	; 0x40
   16ca8:	mov	r2, #128	; 0x80
   16cac:	add	r5, r4, #248	; 0xf8
   16cb0:	mov	r0, r8
   16cb4:	bl	116c4 <memcpy@plt>
   16cb8:	add	r7, sp, #8
   16cbc:	mov	r1, r5
   16cc0:	mov	r2, #128	; 0x80
   16cc4:	mov	r0, r7
   16cc8:	bl	116c4 <memcpy@plt>
   16ccc:	mov	r0, #0
   16cd0:	mov	r1, r7
   16cd4:	mov	r2, r8
   16cd8:	strh	r0, [sp, #138]	; 0x8a
   16cdc:	mov	r0, #28928	; 0x7100
   16ce0:	strh	r0, [sp, #10]
   16ce4:	ldr	r0, [pc, #168]	; 16d94 <sprintf@plt+0x5508>
   16ce8:	ldr	r0, [pc, r0]
   16cec:	str	r4, [sp]
   16cf0:	str	r0, [sp, #4]
   16cf4:	mov	r0, r6
   16cf8:	ldr	r3, [pc, #152]	; 16d98 <sprintf@plt+0x550c>
   16cfc:	add	r3, pc, r3
   16d00:	bl	11508 <rb_connect_tcp@plt>
   16d04:	b	16d64 <sprintf@plt+0x54d8>
   16d08:	mov	r0, r5
   16d0c:	bl	1164c <free@plt>
   16d10:	ldr	r0, [r4]
   16d14:	ldr	r1, [pc, #92]	; 16d78 <sprintf@plt+0x54ec>
   16d18:	add	r1, pc, r1
   16d1c:	bl	12474 <sprintf@plt+0xbe8>
   16d20:	ldr	r0, [pc, #84]	; 16d7c <sprintf@plt+0x54f0>
   16d24:	ldr	r0, [pc, r0]
   16d28:	ldr	r1, [r0, #12]
   16d2c:	mov	r0, r4
   16d30:	bl	12f54 <sprintf@plt+0x16c8>
   16d34:	b	16d64 <sprintf@plt+0x54d8>
   16d38:	bl	11880 <__errno_location@plt>
   16d3c:	ldr	r0, [r0]
   16d40:	bl	114b4 <strerror@plt>
   16d44:	ldr	r1, [pc, #68]	; 16d90 <sprintf@plt+0x5504>
   16d48:	mov	r2, r0
   16d4c:	mov	r0, #68	; 0x44
   16d50:	add	r1, pc, r1
   16d54:	bl	124e8 <sprintf@plt+0xc5c>
   16d58:	mov	r0, r4
   16d5c:	mov	r1, #2
   16d60:	bl	16dc8 <sprintf@plt+0x553c>
   16d64:	mov	r0, #1
   16d68:	sub	sp, fp, #24
   16d6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16d70:	bl	11754 <rb_outofmemory@plt>
   16d74:	andeq	r4, r1, r4, ror r2
   16d78:	strdeq	r2, [r0], -ip
   16d7c:	andeq	r3, r1, ip, lsr r4
   16d80:	andeq	r2, r0, r7, ror #24
   16d84:	andeq	r3, r1, r8, lsl r5
   16d88:	andeq	r4, r1, r4, lsr #4
   16d8c:	andeq	r2, r0, sp, lsr #25
   16d90:	andeq	r2, r0, fp, ror #23
   16d94:	muleq	r1, ip, r1
   16d98:	andeq	r0, r0, r0, lsl #3
   16d9c:	ldr	r1, [r0, #464]	; 0x1d0
   16da0:	ldr	r2, [pc, #28]	; 16dc4 <sprintf@plt+0x5538>
   16da4:	ldr	r2, [pc, r2]
   16da8:	ldr	r2, [r2, #12]
   16dac:	add	r1, r1, r2, lsl #4
   16db0:	ldr	r1, [r1, #8]
   16db4:	cmp	r1, #0
   16db8:	bxeq	lr
   16dbc:	mov	r1, #2
   16dc0:	b	16dc8 <sprintf@plt+0x553c>
   16dc4:			; <UNDEFINED> instruction: 0x000133bc
   16dc8:	push	{r4, r5, r6, r7, fp, lr}
   16dcc:	add	fp, sp, #16
   16dd0:	mov	r4, r0
   16dd4:	ldr	r0, [r0, #464]	; 0x1d0
   16dd8:	ldr	r7, [pc, #152]	; 16e78 <sprintf@plt+0x55ec>
   16ddc:	mov	r5, r1
   16de0:	mov	r2, #11
   16de4:	ldr	r7, [pc, r7]
   16de8:	ldr	r1, [r7, #12]
   16dec:	add	r0, r0, r1, lsl #4
   16df0:	ldr	r6, [r0, #8]
   16df4:	ldr	r1, [pc, #128]	; 16e7c <sprintf@plt+0x55f0>
   16df8:	add	r0, r4, #440	; 0x1b8
   16dfc:	add	r1, pc, r1
   16e00:	bl	11628 <rb_strlcpy@plt>
   16e04:	ldr	r0, [r6]
   16e08:	cmp	r0, #0
   16e0c:	beq	16e14 <sprintf@plt+0x5588>
   16e10:	bl	116dc <rb_close@plt>
   16e14:	cmp	r6, #0
   16e18:	beq	16e24 <sprintf@plt+0x5598>
   16e1c:	mov	r0, r6
   16e20:	bl	1164c <free@plt>
   16e24:	ldr	r0, [r4, #464]	; 0x1d0
   16e28:	ldr	r1, [r7, #12]
   16e2c:	add	r0, r0, r1, lsl #4
   16e30:	mov	r1, #0
   16e34:	str	r1, [r0, #4]
   16e38:	str	r1, [r0, #8]
   16e3c:	ldr	r0, [pc, #60]	; 16e80 <sprintf@plt+0x55f4>
   16e40:	add	r0, pc, r0
   16e44:	ldr	r1, [r0, r5, lsl #2]
   16e48:	ldr	r0, [r4]
   16e4c:	bl	12474 <sprintf@plt+0xbe8>
   16e50:	ldr	r1, [r7, #12]
   16e54:	mov	r0, r4
   16e58:	bl	12f54 <sprintf@plt+0x16c8>
   16e5c:	ldr	r0, [r4, #460]	; 0x1cc
   16e60:	subs	r0, r0, #1
   16e64:	str	r0, [r4, #460]	; 0x1cc
   16e68:	popne	{r4, r5, r6, r7, fp, pc}
   16e6c:	mov	r0, r4
   16e70:	pop	{r4, r5, r6, r7, fp, lr}
   16e74:	b	12e90 <sprintf@plt+0x1604>
   16e78:	andeq	r3, r1, ip, ror r3
   16e7c:	andeq	r2, r0, r4, ror #5
   16e80:	muleq	r1, r0, r0
   16e84:	push	{r4, r5, r6, r7, fp, lr}
   16e88:	add	fp, sp, #16
   16e8c:	sub	sp, sp, #40	; 0x28
   16e90:	mov	r4, r2
   16e94:	cmp	r1, #0
   16e98:	bne	16f10 <sprintf@plt+0x5684>
   16e9c:	ldr	r0, [r4, #464]	; 0x1d0
   16ea0:	ldr	r1, [pc, #124]	; 16f24 <sprintf@plt+0x5698>
   16ea4:	add	r5, sp, #8
   16ea8:	ldr	r1, [pc, r1]
   16eac:	ldrh	r3, [r4, #246]	; 0xf6
   16eb0:	ldr	r1, [r1, #12]
   16eb4:	add	r0, r0, r1, lsl #4
   16eb8:	mov	r1, #32
   16ebc:	ldr	r7, [r0, #8]
   16ec0:	ldrh	r0, [r4, #62]	; 0x3e
   16ec4:	str	r0, [sp]
   16ec8:	mov	r0, r5
   16ecc:	ldr	r2, [pc, #84]	; 16f28 <sprintf@plt+0x569c>
   16ed0:	add	r2, pc, r2
   16ed4:	bl	11814 <snprintf@plt>
   16ed8:	mov	r0, r5
   16edc:	bl	116a0 <strlen@plt>
   16ee0:	mov	r6, r0
   16ee4:	ldr	r0, [r7]
   16ee8:	mov	r1, r5
   16eec:	mov	r2, r6
   16ef0:	bl	11604 <rb_write@plt>
   16ef4:	cmp	r0, r6
   16ef8:	bne	16f10 <sprintf@plt+0x5684>
   16efc:	ldr	r0, [r7]
   16f00:	mov	r1, r4
   16f04:	bl	16f2c <sprintf@plt+0x56a0>
   16f08:	sub	sp, fp, #16
   16f0c:	pop	{r4, r5, r6, r7, fp, pc}
   16f10:	mov	r0, r4
   16f14:	mov	r1, #2
   16f18:	bl	16dc8 <sprintf@plt+0x553c>
   16f1c:	sub	sp, fp, #16
   16f20:	pop	{r4, r5, r6, r7, fp, pc}
   16f24:			; <UNDEFINED> instruction: 0x000132b8
   16f28:	andeq	r2, r0, sp, lsl #21
   16f2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16f30:	add	fp, sp, #24
   16f34:	sub	sp, sp, #136	; 0x88
   16f38:	mov	r4, sp
   16f3c:	mov	r8, r1
   16f40:	mov	r5, r0
   16f44:	mov	r1, #0
   16f48:	mov	r2, #129	; 0x81
   16f4c:	mov	r0, r4
   16f50:	bl	115e0 <memset@plt>
   16f54:	mov	r0, r5
   16f58:	mov	r1, r4
   16f5c:	mov	r2, #128	; 0x80
   16f60:	bl	11664 <rb_read@plt>
   16f64:	cmn	r0, #1
   16f68:	ble	1714c <sprintf@plt+0x58c0>
   16f6c:	cmp	r0, #0
   16f70:	beq	17180 <sprintf@plt+0x58f4>
   16f74:	mov	r0, sp
   16f78:	mov	r1, #58	; 0x3a
   16f7c:	bl	1158c <strchr@plt>
   16f80:	mov	r5, #3
   16f84:	cmp	r0, #0
   16f88:	beq	17184 <sprintf@plt+0x58f8>
   16f8c:	mov	r6, r0
   16f90:	mov	r4, #0
   16f94:	mov	r1, #58	; 0x3a
   16f98:	strb	r4, [r6], #1
   16f9c:	mov	r0, r6
   16fa0:	bl	1158c <strchr@plt>
   16fa4:	cmp	r0, #0
   16fa8:	beq	17184 <sprintf@plt+0x58f8>
   16fac:	mov	r7, r0
   16fb0:	mov	r0, sp
   16fb4:	mov	r1, #44	; 0x2c
   16fb8:	strb	r4, [r7], #1
   16fbc:	bl	1158c <strchr@plt>
   16fc0:	cmp	r0, #0
   16fc4:	beq	17184 <sprintf@plt+0x58f8>
   16fc8:	mov	r4, r0
   16fcc:	mov	r0, #0
   16fd0:	mov	r1, #0
   16fd4:	mov	r2, #10
   16fd8:	strb	r0, [r4]
   16fdc:	mov	r0, sp
   16fe0:	bl	116e8 <strtol@plt>
   16fe4:	cmp	r0, #0
   16fe8:	beq	17184 <sprintf@plt+0x58f8>
   16fec:	add	r0, r4, #1
   16ff0:	mov	r1, #0
   16ff4:	mov	r2, #10
   16ff8:	bl	116e8 <strtol@plt>
   16ffc:	cmp	r0, #0
   17000:	beq	17184 <sprintf@plt+0x58f8>
   17004:	ldr	r1, [pc, #400]	; 1719c <sprintf@plt+0x5910>
   17008:	mov	r0, r6
   1700c:	add	r1, pc, r1
   17010:	bl	11724 <strstr@plt>
   17014:	cmp	r0, #0
   17018:	beq	17184 <sprintf@plt+0x58f8>
   1701c:	mov	r0, r7
   17020:	mov	r1, #58	; 0x3a
   17024:	bl	1158c <strchr@plt>
   17028:	cmp	r0, #0
   1702c:	beq	17184 <sprintf@plt+0x58f8>
   17030:	mov	r1, #0
   17034:	strb	r1, [r0]
   17038:	mov	r1, r0
   1703c:	ldrb	r7, [r0, #1]!
   17040:	orr	r2, r7, #32
   17044:	cmp	r2, #126	; 0x7e
   17048:	beq	17038 <sprintf@plt+0x57ac>
   1704c:	add	r0, r8, #440	; 0x1b8
   17050:	cmp	r7, #0
   17054:	beq	170b8 <sprintf@plt+0x582c>
   17058:	mov	r2, #10
   1705c:	mov	r3, #2
   17060:	uxtb	r6, r7
   17064:	cmp	r6, #57	; 0x39
   17068:	ble	17084 <sprintf@plt+0x57f8>
   1706c:	cmp	r6, #58	; 0x3a
   17070:	cmpne	r6, #91	; 0x5b
   17074:	beq	170a4 <sprintf@plt+0x5818>
   17078:	cmp	r6, #64	; 0x40
   1707c:	bne	1709c <sprintf@plt+0x5810>
   17080:	b	170b8 <sprintf@plt+0x582c>
   17084:	cmp	r6, #32
   17088:	beq	170a4 <sprintf@plt+0x5818>
   1708c:	cmp	r6, #10
   17090:	beq	170b8 <sprintf@plt+0x582c>
   17094:	cmp	r6, #13
   17098:	beq	170b8 <sprintf@plt+0x582c>
   1709c:	strb	r7, [r0], #1
   170a0:	sub	r2, r2, #1
   170a4:	ldrb	r7, [r1, r3]
   170a8:	cmp	r7, #0
   170ac:	addne	r3, r3, #1
   170b0:	cmpne	r2, #0
   170b4:	bne	17060 <sprintf@plt+0x57d4>
   170b8:	mov	r1, #0
   170bc:	strb	r1, [r0]
   170c0:	ldr	r0, [r8, #464]	; 0x1d0
   170c4:	ldr	r5, [pc, #212]	; 171a0 <sprintf@plt+0x5914>
   170c8:	ldr	r5, [pc, r5]
   170cc:	ldr	r1, [r5, #12]
   170d0:	add	r0, r0, r1, lsl #4
   170d4:	ldr	r4, [r0, #8]
   170d8:	ldr	r0, [r4]
   170dc:	cmp	r0, #0
   170e0:	beq	170e8 <sprintf@plt+0x585c>
   170e4:	bl	116dc <rb_close@plt>
   170e8:	cmp	r4, #0
   170ec:	beq	170f8 <sprintf@plt+0x586c>
   170f0:	mov	r0, r4
   170f4:	bl	1164c <free@plt>
   170f8:	ldr	r0, [r8, #464]	; 0x1d0
   170fc:	ldr	r1, [r5, #12]
   17100:	add	r0, r0, r1, lsl #4
   17104:	mov	r1, #0
   17108:	str	r1, [r0, #4]
   1710c:	str	r1, [r0, #8]
   17110:	ldr	r0, [r8]
   17114:	ldr	r1, [pc, #136]	; 171a4 <sprintf@plt+0x5918>
   17118:	add	r1, pc, r1
   1711c:	bl	12474 <sprintf@plt+0xbe8>
   17120:	ldr	r1, [r5, #12]
   17124:	mov	r0, r8
   17128:	bl	12f54 <sprintf@plt+0x16c8>
   1712c:	ldr	r0, [r8, #460]	; 0x1cc
   17130:	subs	r0, r0, #1
   17134:	str	r0, [r8, #460]	; 0x1cc
   17138:	bne	17144 <sprintf@plt+0x58b8>
   1713c:	mov	r0, r8
   17140:	bl	12e90 <sprintf@plt+0x1604>
   17144:	sub	sp, fp, #24
   17148:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1714c:	bl	11880 <__errno_location@plt>
   17150:	ldr	r0, [r0]
   17154:	bl	114f0 <rb_ignore_errno@plt>
   17158:	cmp	r0, #0
   1715c:	beq	17180 <sprintf@plt+0x58f4>
   17160:	ldr	r2, [pc, #48]	; 17198 <sprintf@plt+0x590c>
   17164:	mov	r0, r5
   17168:	mov	r1, #1
   1716c:	mov	r3, r8
   17170:	add	r2, pc, r2
   17174:	bl	11538 <rb_setselect@plt>
   17178:	sub	sp, fp, #24
   1717c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17180:	mov	r5, #2
   17184:	mov	r0, r8
   17188:	mov	r1, r5
   1718c:	bl	16dc8 <sprintf@plt+0x553c>
   17190:	sub	sp, fp, #24
   17194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17198:			; <UNDEFINED> instruction: 0xfffffdb4
   1719c:	andeq	r2, r0, fp, asr r9
   171a0:	muleq	r1, r8, r0
   171a4:	muleq	r0, lr, r7
   171a8:	push	{fp, lr}
   171ac:	mov	fp, sp
   171b0:	ldr	r0, [r2]
   171b4:	mov	r1, #0
   171b8:	mov	r2, #10
   171bc:	bl	116e8 <strtol@plt>
   171c0:	cmn	r0, #1
   171c4:	mov	r2, r0
   171c8:	ldrgt	r0, [pc, #32]	; 171f0 <sprintf@plt+0x5964>
   171cc:	addgt	r0, pc, r0
   171d0:	strgt	r2, [r0]
   171d4:	popgt	{fp, pc}
   171d8:	ldr	r1, [pc, #20]	; 171f4 <sprintf@plt+0x5968>
   171dc:	mov	r0, #67	; 0x43
   171e0:	add	r1, pc, r1
   171e4:	bl	124e8 <sprintf@plt+0xc5c>
   171e8:	mov	r0, #3
   171ec:	bl	11874 <exit@plt>
   171f0:	andeq	r3, r1, r4, lsl sp
   171f4:	muleq	r0, fp, r7
   171f8:	push	{r4, r5, r6, sl, fp, lr}
   171fc:	add	fp, sp, #16
   17200:	sub	sp, sp, #8
   17204:	ldr	r5, [pc, #116]	; 17280 <sprintf@plt+0x59f4>
   17208:	mov	r4, sp
   1720c:	mov	r1, r4
   17210:	ldr	r5, [pc, r5]
   17214:	ldr	r0, [r5]
   17218:	bl	11688 <rb_dictionary_foreach_start@plt>
   1721c:	ldr	r0, [r5]
   17220:	mov	r1, r4
   17224:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17228:	cmp	r0, #0
   1722c:	beq	17278 <sprintf@plt+0x59ec>
   17230:	ldr	r6, [pc, #76]	; 17284 <sprintf@plt+0x59f8>
   17234:	mov	r4, sp
   17238:	ldr	r6, [pc, r6]
   1723c:	ldr	r1, [r0, #464]	; 0x1d0
   17240:	ldr	r2, [r6, #12]
   17244:	add	r1, r1, r2, lsl #4
   17248:	ldr	r1, [r1, #8]
   1724c:	cmp	r1, #0
   17250:	movne	r1, #1
   17254:	blne	1735c <sprintf@plt+0x5ad0>
   17258:	ldr	r0, [r5]
   1725c:	mov	r1, r4
   17260:	bl	11640 <rb_dictionary_foreach_next@plt>
   17264:	ldr	r0, [r5]
   17268:	mov	r1, r4
   1726c:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17270:	cmp	r0, #0
   17274:	bne	1723c <sprintf@plt+0x59b0>
   17278:	sub	sp, fp, #16
   1727c:	pop	{r4, r5, r6, sl, fp, pc}
   17280:	andeq	r2, r1, r4, asr #30
   17284:	andeq	r2, r1, ip, lsr #30
   17288:	push	{r4, r5, r6, r7, fp, lr}
   1728c:	add	fp, sp, #16
   17290:	mov	r4, r0
   17294:	mov	r0, #1
   17298:	mov	r1, #4
   1729c:	bl	115b0 <calloc@plt>
   172a0:	cmp	r0, #0
   172a4:	beq	1731c <sprintf@plt+0x5a90>
   172a8:	mov	r5, r0
   172ac:	ldr	r0, [r4, #460]	; 0x1cc
   172b0:	ldr	r1, [r4, #464]	; 0x1d0
   172b4:	add	r0, r0, #1
   172b8:	str	r0, [r4, #460]	; 0x1cc
   172bc:	ldr	r0, [pc, #92]	; 17320 <sprintf@plt+0x5a94>
   172c0:	ldr	r0, [pc, r0]
   172c4:	ldr	r6, [r0, #12]
   172c8:	add	r0, r1, r6, lsl #4
   172cc:	str	r5, [r0, #8]
   172d0:	ldr	r7, [pc, #76]	; 17324 <sprintf@plt+0x5a98>
   172d4:	ldr	r7, [pc, r7]
   172d8:	bl	116ac <rb_current_time@plt>
   172dc:	ldr	r1, [r4, #464]	; 0x1d0
   172e0:	add	r0, r0, r7
   172e4:	mov	r2, r4
   172e8:	add	r1, r1, r6, lsl #4
   172ec:	str	r0, [r1, #4]
   172f0:	add	r0, r4, #192	; 0xc0
   172f4:	ldr	r1, [pc, #44]	; 17328 <sprintf@plt+0x5a9c>
   172f8:	add	r1, pc, r1
   172fc:	bl	11f84 <sprintf@plt+0x6f8>
   17300:	str	r0, [r5]
   17304:	ldr	r0, [r4]
   17308:	ldr	r1, [pc, #28]	; 1732c <sprintf@plt+0x5aa0>
   1730c:	add	r1, pc, r1
   17310:	bl	12474 <sprintf@plt+0xbe8>
   17314:	mov	r0, #1
   17318:	pop	{r4, r5, r6, r7, fp, pc}
   1731c:	bl	11754 <rb_outofmemory@plt>
   17320:	andeq	r2, r1, r4, lsr #29
   17324:	andeq	r3, r1, ip, lsl #24
   17328:	andeq	r0, r0, ip, lsl #2
   1732c:	muleq	r0, r1, r6
   17330:	ldr	r1, [r0, #464]	; 0x1d0
   17334:	ldr	r2, [pc, #28]	; 17358 <sprintf@plt+0x5acc>
   17338:	ldr	r2, [pc, r2]
   1733c:	ldr	r2, [r2, #12]
   17340:	add	r1, r1, r2, lsl #4
   17344:	ldr	r1, [r1, #8]
   17348:	cmp	r1, #0
   1734c:	bxeq	lr
   17350:	mov	r1, #1
   17354:	b	1735c <sprintf@plt+0x5ad0>
   17358:	andeq	r2, r1, ip, lsr #28
   1735c:	push	{r4, r5, r6, r7, fp, lr}
   17360:	add	fp, sp, #16
   17364:	mov	r4, r0
   17368:	ldr	r0, [r0, #464]	; 0x1d0
   1736c:	ldr	r7, [pc, #140]	; 17400 <sprintf@plt+0x5b74>
   17370:	mov	r6, r1
   17374:	mov	r2, #64	; 0x40
   17378:	ldr	r7, [pc, r7]
   1737c:	ldr	r1, [r7, #12]
   17380:	add	r0, r0, r1, lsl #4
   17384:	ldr	r5, [r0, #8]
   17388:	ldr	r1, [pc, #116]	; 17404 <sprintf@plt+0x5b78>
   1738c:	add	r0, r4, #376	; 0x178
   17390:	add	r1, pc, r1
   17394:	bl	11628 <rb_strlcpy@plt>
   17398:	ldr	r0, [pc, #104]	; 17408 <sprintf@plt+0x5b7c>
   1739c:	add	r0, pc, r0
   173a0:	ldr	r1, [r0, r6, lsl #2]
   173a4:	ldr	r0, [r4]
   173a8:	bl	12474 <sprintf@plt+0xbe8>
   173ac:	ldr	r0, [r5]
   173b0:	bl	12124 <sprintf@plt+0x898>
   173b4:	cmp	r5, #0
   173b8:	beq	173c4 <sprintf@plt+0x5b38>
   173bc:	mov	r0, r5
   173c0:	bl	1164c <free@plt>
   173c4:	ldr	r0, [r4, #464]	; 0x1d0
   173c8:	ldr	r1, [r7, #12]
   173cc:	mov	r2, #0
   173d0:	add	r0, r0, r1, lsl #4
   173d4:	str	r2, [r0, #4]
   173d8:	str	r2, [r0, #8]
   173dc:	mov	r0, r4
   173e0:	bl	12f54 <sprintf@plt+0x16c8>
   173e4:	ldr	r0, [r4, #460]	; 0x1cc
   173e8:	subs	r0, r0, #1
   173ec:	str	r0, [r4, #460]	; 0x1cc
   173f0:	popne	{r4, r5, r6, r7, fp, pc}
   173f4:	mov	r0, r4
   173f8:	pop	{r4, r5, r6, r7, fp, lr}
   173fc:	b	12e90 <sprintf@plt+0x1604>
   17400:	andeq	r2, r1, ip, ror #27
   17404:	andeq	r1, r0, r0, asr sp
   17408:	andeq	r2, r1, r8, asr #22
   1740c:	push	{r4, r5, r6, r7, fp, lr}
   17410:	add	fp, sp, #16
   17414:	cmp	r0, #0
   17418:	mov	r4, r3
   1741c:	cmpne	r1, #0
   17420:	bne	17434 <sprintf@plt+0x5ba8>
   17424:	mov	r0, r4
   17428:	mov	r1, #1
   1742c:	pop	{r4, r5, r6, r7, fp, lr}
   17430:	b	1735c <sprintf@plt+0x5ad0>
   17434:	mov	r5, r0
   17438:	bl	116a0 <strlen@plt>
   1743c:	cmp	r0, #64	; 0x40
   17440:	bcc	17454 <sprintf@plt+0x5bc8>
   17444:	mov	r0, r4
   17448:	mov	r1, #2
   1744c:	pop	{r4, r5, r6, r7, fp, lr}
   17450:	b	1735c <sprintf@plt+0x5ad0>
   17454:	add	r6, r4, #376	; 0x178
   17458:	mov	r1, r5
   1745c:	mov	r2, #64	; 0x40
   17460:	mov	r0, r6
   17464:	bl	11628 <rb_strlcpy@plt>
   17468:	ldr	r7, [pc, #120]	; 174e8 <sprintf@plt+0x5c5c>
   1746c:	ldr	r7, [pc, r7]
   17470:	ldr	r2, [r4, #464]	; 0x1d0
   17474:	ldr	r0, [r4]
   17478:	ldr	r1, [r7, #12]
   1747c:	add	r1, r2, r1, lsl #4
   17480:	mov	r2, r6
   17484:	ldr	r5, [r1, #8]
   17488:	ldr	r1, [pc, #92]	; 174ec <sprintf@plt+0x5c60>
   1748c:	add	r1, pc, r1
   17490:	bl	12474 <sprintf@plt+0xbe8>
   17494:	ldr	r0, [r5]
   17498:	bl	12124 <sprintf@plt+0x898>
   1749c:	cmp	r5, #0
   174a0:	beq	174ac <sprintf@plt+0x5c20>
   174a4:	mov	r0, r5
   174a8:	bl	1164c <free@plt>
   174ac:	ldr	r0, [r4, #464]	; 0x1d0
   174b0:	ldr	r1, [r7, #12]
   174b4:	mov	r2, #0
   174b8:	add	r0, r0, r1, lsl #4
   174bc:	str	r2, [r0, #4]
   174c0:	str	r2, [r0, #8]
   174c4:	mov	r0, r4
   174c8:	bl	12f54 <sprintf@plt+0x16c8>
   174cc:	ldr	r0, [r4, #460]	; 0x1cc
   174d0:	subs	r0, r0, #1
   174d4:	str	r0, [r4, #460]	; 0x1cc
   174d8:	popne	{r4, r5, r6, r7, fp, pc}
   174dc:	mov	r0, r4
   174e0:	pop	{r4, r5, r6, r7, fp, lr}
   174e4:	b	12e90 <sprintf@plt+0x1604>
   174e8:	strdeq	r2, [r1], -r8
   174ec:	andeq	r2, r0, r5, lsl #11
   174f0:	push	{fp, lr}
   174f4:	mov	fp, sp
   174f8:	ldr	r0, [r2]
   174fc:	mov	r1, #0
   17500:	mov	r2, #10
   17504:	bl	116e8 <strtol@plt>
   17508:	cmn	r0, #1
   1750c:	mov	r2, r0
   17510:	ldrgt	r0, [pc, #28]	; 17534 <sprintf@plt+0x5ca8>
   17514:	addgt	r0, pc, r0
   17518:	strgt	r2, [r0]
   1751c:	popgt	{fp, pc}
   17520:	ldr	r1, [pc, #16]	; 17538 <sprintf@plt+0x5cac>
   17524:	mov	r0, #67	; 0x43
   17528:	add	r1, pc, r1
   1752c:	pop	{fp, lr}
   17530:	b	124e8 <sprintf@plt+0xc5c>
   17534:	andeq	r3, r1, ip, ror #20
   17538:	andeq	r2, r0, r3, ror r5
   1753c:	push	{r4, r5, r6, sl, fp, lr}
   17540:	add	fp, sp, #16
   17544:	sub	sp, sp, #8
   17548:	ldr	r0, [r2]
   1754c:	ldrb	r0, [r0]
   17550:	ldr	r4, [pc, #268]	; 17664 <sprintf@plt+0x5dd8>
   17554:	subs	r0, r0, #49	; 0x31
   17558:	add	r4, pc, r4
   1755c:	clz	r0, r0
   17560:	lsr	r5, r0, #5
   17564:	bne	175a4 <sprintf@plt+0x5d18>
   17568:	ldrb	r0, [r4]
   1756c:	cmp	r0, #0
   17570:	ldrhne	r1, [r4, #54]	; 0x36
   17574:	cmpne	r1, #0
   17578:	bne	17648 <sprintf@plt+0x5dbc>
   1757c:	ldrb	r0, [r4, #188]	; 0xbc
   17580:	cmp	r0, #0
   17584:	ldrhne	r1, [r4, #242]	; 0xf2
   17588:	cmpne	r1, #0
   1758c:	beq	17634 <sprintf@plt+0x5da8>
   17590:	ldr	r0, [r4, #372]	; 0x174
   17594:	cmp	r0, #0
   17598:	addeq	r0, r4, #188	; 0xbc
   1759c:	bleq	18194 <sprintf@plt+0x6908>
   175a0:	b	17634 <sprintf@plt+0x5da8>
   175a4:	ldr	r1, [r4, #184]	; 0xb8
   175a8:	ldr	r0, [r4, #372]	; 0x174
   175ac:	orrs	r2, r1, r0
   175b0:	beq	17634 <sprintf@plt+0x5da8>
   175b4:	cmp	r1, #0
   175b8:	beq	175c8 <sprintf@plt+0x5d3c>
   175bc:	mov	r0, r1
   175c0:	bl	116dc <rb_close@plt>
   175c4:	ldr	r0, [r4, #372]	; 0x174
   175c8:	cmp	r0, #0
   175cc:	beq	175d4 <sprintf@plt+0x5d48>
   175d0:	bl	116dc <rb_close@plt>
   175d4:	mov	r0, #0
   175d8:	str	r0, [r4, #184]	; 0xb8
   175dc:	str	r0, [r4, #372]	; 0x174
   175e0:	mov	r4, sp
   175e4:	ldr	r6, [pc, #124]	; 17668 <sprintf@plt+0x5ddc>
   175e8:	mov	r1, r4
   175ec:	ldr	r6, [pc, r6]
   175f0:	ldr	r0, [r6]
   175f4:	bl	11688 <rb_dictionary_foreach_start@plt>
   175f8:	ldr	r0, [r6]
   175fc:	mov	r1, r4
   17600:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17604:	cmp	r0, #0
   17608:	beq	17634 <sprintf@plt+0x5da8>
   1760c:	mov	r4, sp
   17610:	bl	17fc8 <sprintf@plt+0x673c>
   17614:	ldr	r0, [r6]
   17618:	mov	r1, r4
   1761c:	bl	11640 <rb_dictionary_foreach_next@plt>
   17620:	ldr	r0, [r6]
   17624:	mov	r1, r4
   17628:	bl	11598 <rb_dictionary_foreach_cur@plt>
   1762c:	cmp	r0, #0
   17630:	bne	17610 <sprintf@plt+0x5d84>
   17634:	ldr	r0, [pc, #52]	; 17670 <sprintf@plt+0x5de4>
   17638:	add	r0, pc, r0
   1763c:	strb	r5, [r0]
   17640:	sub	sp, fp, #16
   17644:	pop	{r4, r5, r6, sl, fp, pc}
   17648:	ldr	r0, [r4, #184]	; 0xb8
   1764c:	cmp	r0, #0
   17650:	bne	1757c <sprintf@plt+0x5cf0>
   17654:	ldr	r0, [pc, #16]	; 1766c <sprintf@plt+0x5de0>
   17658:	add	r0, pc, r0
   1765c:	bl	18194 <sprintf@plt+0x6908>
   17660:	b	1757c <sprintf@plt+0x5cf0>
   17664:	ldrdeq	r7, [r1], -r8
   17668:	andeq	r2, r1, r8, ror #22
   1766c:	ldrdeq	r7, [r1], -r8
   17670:	andeq	r7, r1, r0, ror fp
   17674:	push	{r4, r5, fp, lr}
   17678:	add	fp, sp, #8
   1767c:	ldm	r2, {r4, r5}
   17680:	mov	r1, #0
   17684:	mov	r2, #10
   17688:	mov	r0, r5
   1768c:	bl	116e8 <strtol@plt>
   17690:	sub	r1, r0, #1
   17694:	movw	r2, #65535	; 0xffff
   17698:	cmp	r1, r2
   1769c:	bcs	176b0 <sprintf@plt+0x5e24>
   176a0:	uxth	r1, r0
   176a4:	mov	r0, r4
   176a8:	pop	{r4, r5, fp, lr}
   176ac:	b	18194 <sprintf@plt+0x6908>
   176b0:	ldr	r1, [pc, #24]	; 176d0 <sprintf@plt+0x5e44>
   176b4:	mov	r0, #67	; 0x43
   176b8:	mov	r2, r4
   176bc:	mov	r3, r5
   176c0:	add	r1, pc, r1
   176c4:	bl	124e8 <sprintf@plt+0xc5c>
   176c8:	mov	r0, #3
   176cc:	bl	11874 <exit@plt>
   176d0:	strdeq	r2, [r0], -r5
   176d4:	push	{r4, sl, fp, lr}
   176d8:	add	fp, sp, #8
   176dc:	ldr	r4, [pc, #56]	; 1771c <sprintf@plt+0x5e90>
   176e0:	add	r4, pc, r4
   176e4:	ldr	r0, [r4, #184]	; 0xb8
   176e8:	cmp	r0, #0
   176ec:	beq	176f4 <sprintf@plt+0x5e68>
   176f0:	bl	116dc <rb_close@plt>
   176f4:	ldr	r0, [r4, #372]	; 0x174
   176f8:	cmp	r0, #0
   176fc:	beq	17704 <sprintf@plt+0x5e78>
   17700:	bl	116dc <rb_close@plt>
   17704:	ldr	r0, [pc, #20]	; 17720 <sprintf@plt+0x5e94>
   17708:	mov	r1, #0
   1770c:	mov	r2, #376	; 0x178
   17710:	add	r0, pc, r0
   17714:	pop	{r4, sl, fp, lr}
   17718:	b	115e0 <memset@plt>
   1771c:	andeq	r7, r1, r0, asr r9
   17720:	andeq	r7, r1, r0, lsr #18
   17724:	push	{r4, r5, r6, r7, fp, lr}
   17728:	add	fp, sp, #16
   1772c:	ldr	r0, [r2, #4]
   17730:	mov	r4, r2
   17734:	mov	r1, #0
   17738:	mov	r2, #10
   1773c:	bl	116e8 <strtol@plt>
   17740:	mov	r6, r0
   17744:	mov	r0, #1
   17748:	mov	r1, #40	; 0x28
   1774c:	bl	115b0 <calloc@plt>
   17750:	cmp	r0, #0
   17754:	beq	17968 <sprintf@plt+0x60dc>
   17758:	mov	r5, r0
   1775c:	sub	r0, r6, #1
   17760:	movw	r1, #65535	; 0xffff
   17764:	cmp	r0, r1
   17768:	bcs	1796c <sprintf@plt+0x60e0>
   1776c:	strh	r6, [r5, #20]
   17770:	ldr	r7, [r4]
   17774:	ldr	r1, [pc, #548]	; 179a0 <sprintf@plt+0x6114>
   17778:	add	r1, pc, r1
   1777c:	mov	r0, r7
   17780:	bl	115a4 <strcasecmp@plt>
   17784:	cmp	r0, #0
   17788:	beq	17814 <sprintf@plt+0x5f88>
   1778c:	ldr	r1, [pc, #536]	; 179ac <sprintf@plt+0x6120>
   17790:	mov	r0, r7
   17794:	add	r1, pc, r1
   17798:	bl	115a4 <strcasecmp@plt>
   1779c:	cmp	r0, #0
   177a0:	beq	17848 <sprintf@plt+0x5fbc>
   177a4:	ldr	r1, [pc, #524]	; 179b8 <sprintf@plt+0x612c>
   177a8:	mov	r0, r7
   177ac:	add	r1, pc, r1
   177b0:	bl	115a4 <strcasecmp@plt>
   177b4:	cmp	r0, #0
   177b8:	beq	1787c <sprintf@plt+0x5ff0>
   177bc:	ldr	r1, [pc, #512]	; 179c4 <sprintf@plt+0x6138>
   177c0:	mov	r0, r7
   177c4:	add	r1, pc, r1
   177c8:	bl	115a4 <strcasecmp@plt>
   177cc:	clz	r1, r0
   177d0:	uxth	r3, r6
   177d4:	cmp	r0, #0
   177d8:	lsr	r1, r1, #5
   177dc:	lsl	r1, r1, #2
   177e0:	str	r1, [r5, #16]
   177e4:	bne	17980 <sprintf@plt+0x60f4>
   177e8:	ldr	r2, [pc, #472]	; 179c8 <sprintf@plt+0x613c>
   177ec:	mov	r0, r5
   177f0:	mov	r1, #16
   177f4:	add	r2, pc, r2
   177f8:	bl	11814 <snprintf@plt>
   177fc:	ldr	r0, [pc, #456]	; 179cc <sprintf@plt+0x6140>
   17800:	add	r0, pc, r0
   17804:	str	r0, [r5, #24]
   17808:	mov	r0, #1
   1780c:	strb	r0, [r5, #22]
   17810:	b	178b0 <sprintf@plt+0x6024>
   17814:	mov	r0, #1
   17818:	uxth	r3, r6
   1781c:	mov	r1, #16
   17820:	str	r0, [r5, #16]
   17824:	mov	r0, r5
   17828:	ldr	r2, [pc, #372]	; 179a4 <sprintf@plt+0x6118>
   1782c:	add	r2, pc, r2
   17830:	bl	11814 <snprintf@plt>
   17834:	mov	r0, #0
   17838:	strb	r0, [r5, #22]
   1783c:	ldr	r0, [pc, #356]	; 179a8 <sprintf@plt+0x611c>
   17840:	add	r0, pc, r0
   17844:	b	178ac <sprintf@plt+0x6020>
   17848:	mov	r0, #2
   1784c:	uxth	r3, r6
   17850:	mov	r1, #16
   17854:	str	r0, [r5, #16]
   17858:	mov	r0, r5
   1785c:	ldr	r2, [pc, #332]	; 179b0 <sprintf@plt+0x6124>
   17860:	add	r2, pc, r2
   17864:	bl	11814 <snprintf@plt>
   17868:	mov	r0, #0
   1786c:	strb	r0, [r5, #22]
   17870:	ldr	r0, [pc, #316]	; 179b4 <sprintf@plt+0x6128>
   17874:	add	r0, pc, r0
   17878:	b	178ac <sprintf@plt+0x6020>
   1787c:	mov	r0, #3
   17880:	uxth	r3, r6
   17884:	mov	r1, #16
   17888:	str	r0, [r5, #16]
   1788c:	mov	r0, r5
   17890:	ldr	r2, [pc, #292]	; 179bc <sprintf@plt+0x6130>
   17894:	add	r2, pc, r2
   17898:	bl	11814 <snprintf@plt>
   1789c:	mov	r0, #0
   178a0:	strb	r0, [r5, #22]
   178a4:	ldr	r0, [pc, #276]	; 179c0 <sprintf@plt+0x6134>
   178a8:	add	r0, pc, r0
   178ac:	str	r0, [r5, #24]
   178b0:	ldr	r0, [pc, #280]	; 179d0 <sprintf@plt+0x6144>
   178b4:	ldr	r0, [pc, r0]
   178b8:	cmp	r0, #0
   178bc:	beq	178f0 <sprintf@plt+0x6064>
   178c0:	ldrh	r3, [r5, #20]
   178c4:	ldr	r1, [r5, #16]
   178c8:	mov	r2, r0
   178cc:	ldr	r7, [r2]
   178d0:	ldr	r6, [r7, #16]
   178d4:	cmp	r6, r1
   178d8:	ldrheq	r7, [r7, #20]
   178dc:	cmpeq	r7, r3
   178e0:	beq	17948 <sprintf@plt+0x60bc>
   178e4:	ldr	r2, [r2, #8]
   178e8:	cmp	r2, #0
   178ec:	bne	178cc <sprintf@plt+0x6040>
   178f0:	mov	r1, #0
   178f4:	str	r5, [r5, #28]
   178f8:	cmp	r0, #0
   178fc:	str	r1, [r5, #32]
   17900:	add	r1, r5, #28
   17904:	str	r0, [r5, #36]	; 0x24
   17908:	beq	17918 <sprintf@plt+0x608c>
   1790c:	add	r0, r0, #4
   17910:	str	r1, [r0]
   17914:	b	1792c <sprintf@plt+0x60a0>
   17918:	ldr	r0, [pc, #188]	; 179dc <sprintf@plt+0x6150>
   1791c:	add	r0, pc, r0
   17920:	ldr	r2, [r0, #4]!
   17924:	cmp	r2, #0
   17928:	streq	r1, [r0]
   1792c:	ldr	r0, [pc, #172]	; 179e0 <sprintf@plt+0x6154>
   17930:	add	r0, pc, r0
   17934:	str	r1, [r0]
   17938:	ldr	r1, [r0, #8]
   1793c:	add	r1, r1, #1
   17940:	str	r1, [r0, #8]
   17944:	pop	{r4, r5, r6, r7, fp, pc}
   17948:	ldr	r2, [r4]
   1794c:	ldr	r1, [pc, #132]	; 179d8 <sprintf@plt+0x614c>
   17950:	mov	r0, #67	; 0x43
   17954:	add	r1, pc, r1
   17958:	bl	124e8 <sprintf@plt+0xc5c>
   1795c:	mov	r0, r5
   17960:	pop	{r4, r5, r6, r7, fp, lr}
   17964:	b	1164c <free@plt>
   17968:	bl	11754 <rb_outofmemory@plt>
   1796c:	ldm	r4, {r2, r3}
   17970:	ldr	r1, [pc, #36]	; 1799c <sprintf@plt+0x6110>
   17974:	mov	r0, #67	; 0x43
   17978:	add	r1, pc, r1
   1797c:	b	17990 <sprintf@plt+0x6104>
   17980:	ldr	r1, [pc, #76]	; 179d4 <sprintf@plt+0x6148>
   17984:	mov	r0, #67	; 0x43
   17988:	mov	r2, r7
   1798c:	add	r1, pc, r1
   17990:	bl	124e8 <sprintf@plt+0xc5c>
   17994:	mov	r0, #3
   17998:	bl	11874 <exit@plt>
   1799c:	andeq	r2, r0, ip, asr r2
   179a0:	andeq	r2, r0, r2, lsl r5
   179a4:	andeq	r2, r0, sp, asr #7
   179a8:	andeq	r0, r0, r8, lsl #30
   179ac:	strdeq	r2, [r0], -sp
   179b0:	andeq	r2, r0, r4, lsr #7
   179b4:	andeq	r0, r0, r8, asr #30
   179b8:	andeq	r2, r0, ip, ror #9
   179bc:	andeq	r2, r0, fp, ror r3
   179c0:	andeq	r0, r0, r0, ror #31
   179c4:	andeq	r2, r0, r0, ror #9
   179c8:	andeq	r2, r0, fp, lsr #8
   179cc:	andeq	r1, r0, r8, lsl #1
   179d0:	strdeq	r7, [r1], -r8
   179d4:	andeq	r2, r0, r4, lsr #5
   179d8:	andeq	r2, r0, sl, lsl #6
   179dc:	muleq	r1, r0, r8
   179e0:	andeq	r7, r1, ip, ror r8
   179e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e8:	add	fp, sp, #28
   179ec:	sub	sp, sp, #12
   179f0:	ldr	r4, [r2]
   179f4:	ldr	r1, [pc, #716]	; 17cc8 <sprintf@plt+0x643c>
   179f8:	mov	r5, r2
   179fc:	add	r1, pc, r1
   17a00:	mov	r0, r4
   17a04:	bl	115a4 <strcasecmp@plt>
   17a08:	cmp	r0, #0
   17a0c:	beq	17a60 <sprintf@plt+0x61d4>
   17a10:	ldr	r1, [pc, #692]	; 17ccc <sprintf@plt+0x6440>
   17a14:	mov	r0, r4
   17a18:	add	r1, pc, r1
   17a1c:	bl	115a4 <strcasecmp@plt>
   17a20:	cmp	r0, #0
   17a24:	beq	17a68 <sprintf@plt+0x61dc>
   17a28:	ldr	r1, [pc, #672]	; 17cd0 <sprintf@plt+0x6444>
   17a2c:	mov	r0, r4
   17a30:	add	r1, pc, r1
   17a34:	bl	115a4 <strcasecmp@plt>
   17a38:	cmp	r0, #0
   17a3c:	beq	17a70 <sprintf@plt+0x61e4>
   17a40:	ldr	r1, [pc, #652]	; 17cd4 <sprintf@plt+0x6448>
   17a44:	mov	r0, r4
   17a48:	add	r1, pc, r1
   17a4c:	bl	115a4 <strcasecmp@plt>
   17a50:	clz	r0, r0
   17a54:	lsr	r0, r0, #5
   17a58:	lsl	r6, r0, #2
   17a5c:	b	17a74 <sprintf@plt+0x61e8>
   17a60:	mov	r6, #1
   17a64:	b	17a74 <sprintf@plt+0x61e8>
   17a68:	mov	r6, #2
   17a6c:	b	17a74 <sprintf@plt+0x61e8>
   17a70:	mov	r6, #3
   17a74:	ldr	r0, [r5, #4]
   17a78:	mov	r1, #0
   17a7c:	mov	r2, #10
   17a80:	bl	116e8 <strtol@plt>
   17a84:	mov	r3, r0
   17a88:	sub	r0, r0, #1
   17a8c:	movw	r1, #65535	; 0xffff
   17a90:	cmp	r0, r1
   17a94:	bcs	17ca8 <sprintf@plt+0x641c>
   17a98:	cmp	r6, #0
   17a9c:	beq	17cb8 <sprintf@plt+0x642c>
   17aa0:	ldr	r0, [pc, #568]	; 17ce0 <sprintf@plt+0x6454>
   17aa4:	ldr	r0, [pc, r0]
   17aa8:	cmp	r0, #0
   17aac:	beq	17ad8 <sprintf@plt+0x624c>
   17ab0:	uxth	r1, r3
   17ab4:	ldr	r4, [r0]
   17ab8:	ldr	r2, [r4, #16]
   17abc:	cmp	r2, r6
   17ac0:	ldrheq	r2, [r4, #20]
   17ac4:	cmpeq	r2, r1
   17ac8:	beq	17af4 <sprintf@plt+0x6268>
   17acc:	ldr	r0, [r0, #8]
   17ad0:	cmp	r0, #0
   17ad4:	bne	17ab4 <sprintf@plt+0x6228>
   17ad8:	ldr	r2, [r5]
   17adc:	ldr	r1, [pc, #512]	; 17ce4 <sprintf@plt+0x6458>
   17ae0:	add	r1, pc, r1
   17ae4:	mov	r0, #67	; 0x43
   17ae8:	bl	124e8 <sprintf@plt+0xc5c>
   17aec:	mov	r0, #3
   17af0:	bl	11874 <exit@plt>
   17af4:	ldr	sl, [pc, #492]	; 17ce8 <sprintf@plt+0x645c>
   17af8:	add	r5, sp, #4
   17afc:	mov	r1, r5
   17b00:	ldr	sl, [pc, sl]
   17b04:	ldr	r0, [sl]
   17b08:	bl	11688 <rb_dictionary_foreach_start@plt>
   17b0c:	ldr	r0, [sl]
   17b10:	mov	r1, r5
   17b14:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17b18:	cmp	r0, #0
   17b1c:	beq	17c2c <sprintf@plt+0x63a0>
   17b20:	ldr	r8, [pc, #452]	; 17cec <sprintf@plt+0x6460>
   17b24:	mov	r6, r0
   17b28:	add	r9, sp, #4
   17b2c:	ldr	r8, [pc, r8]
   17b30:	ldr	r0, [r6, #464]	; 0x1d0
   17b34:	ldr	r1, [r8, #12]
   17b38:	add	r0, r0, r1, lsl #4
   17b3c:	ldr	r7, [r0, #8]
   17b40:	cmp	r7, #0
   17b44:	beq	17c08 <sprintf@plt+0x637c>
   17b48:	ldr	r0, [r6, #460]	; 0x1cc
   17b4c:	add	r0, r0, #1
   17b50:	str	r0, [r6, #460]	; 0x1cc
   17b54:	ldr	r1, [r7]
   17b58:	cmp	r1, #0
   17b5c:	beq	17bf0 <sprintf@plt+0x6364>
   17b60:	ldrh	r2, [r4, #20]
   17b64:	ldr	r0, [r1]
   17b68:	ldr	r3, [r0, #8]
   17b6c:	ldrh	r5, [r3, #20]
   17b70:	cmp	r5, r2
   17b74:	bne	17b88 <sprintf@plt+0x62fc>
   17b78:	ldr	r5, [r4, #16]
   17b7c:	ldr	r3, [r3, #16]
   17b80:	cmp	r3, r5
   17b84:	beq	17b98 <sprintf@plt+0x630c>
   17b88:	ldr	r1, [r1, #8]
   17b8c:	cmp	r1, #0
   17b90:	bne	17b64 <sprintf@plt+0x62d8>
   17b94:	b	17bf0 <sprintf@plt+0x6364>
   17b98:	ldr	r1, [r0, #24]
   17b9c:	ldr	r2, [r0, #20]
   17ba0:	mov	r3, r7
   17ba4:	cmp	r1, #0
   17ba8:	streq	r2, [r7, #4]
   17bac:	strne	r2, [r1, #4]
   17bb0:	ldrne	r2, [r0, #20]
   17bb4:	cmp	r2, #0
   17bb8:	addne	r3, r2, #8
   17bbc:	str	r1, [r3]
   17bc0:	mov	r1, #0
   17bc4:	str	r1, [r0, #20]
   17bc8:	str	r1, [r0, #24]
   17bcc:	ldr	r1, [r7, #8]
   17bd0:	sub	r1, r1, #1
   17bd4:	str	r1, [r7, #8]
   17bd8:	bl	1164c <free@plt>
   17bdc:	ldr	r0, [r7, #8]
   17be0:	cmp	r0, #0
   17be4:	bne	17bf0 <sprintf@plt+0x6364>
   17be8:	mov	r0, r6
   17bec:	bl	17fc8 <sprintf@plt+0x673c>
   17bf0:	ldr	r0, [r6, #460]	; 0x1cc
   17bf4:	subs	r0, r0, #1
   17bf8:	str	r0, [r6, #460]	; 0x1cc
   17bfc:	bne	17c08 <sprintf@plt+0x637c>
   17c00:	mov	r0, r6
   17c04:	bl	12e90 <sprintf@plt+0x1604>
   17c08:	ldr	r0, [sl]
   17c0c:	mov	r1, r9
   17c10:	bl	11640 <rb_dictionary_foreach_next@plt>
   17c14:	ldr	r0, [sl]
   17c18:	mov	r1, r9
   17c1c:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17c20:	mov	r6, r0
   17c24:	cmp	r0, #0
   17c28:	bne	17b30 <sprintf@plt+0x62a4>
   17c2c:	ldr	r0, [r4, #36]	; 0x24
   17c30:	ldr	r1, [r4, #32]
   17c34:	cmp	r0, #0
   17c38:	beq	17c48 <sprintf@plt+0x63bc>
   17c3c:	str	r1, [r0, #4]
   17c40:	ldr	r1, [r4, #32]
   17c44:	b	17c54 <sprintf@plt+0x63c8>
   17c48:	ldr	r2, [pc, #160]	; 17cf0 <sprintf@plt+0x6464>
   17c4c:	add	r2, pc, r2
   17c50:	str	r1, [r2, #4]
   17c54:	ldr	r6, [pc, #152]	; 17cf4 <sprintf@plt+0x6468>
   17c58:	cmp	r1, #0
   17c5c:	mov	r5, #0
   17c60:	add	r6, pc, r6
   17c64:	mov	r2, r6
   17c68:	addne	r2, r1, #8
   17c6c:	str	r0, [r2]
   17c70:	str	r5, [r4, #32]
   17c74:	str	r5, [r4, #36]	; 0x24
   17c78:	ldr	r0, [r6, #8]
   17c7c:	sub	r0, r0, #1
   17c80:	str	r0, [r6, #8]
   17c84:	mov	r0, r4
   17c88:	bl	1164c <free@plt>
   17c8c:	ldr	r0, [r6, #8]
   17c90:	cmp	r0, #0
   17c94:	ldreq	r0, [pc, #92]	; 17cf8 <sprintf@plt+0x646c>
   17c98:	addeq	r0, pc, r0
   17c9c:	strbeq	r5, [r0]
   17ca0:	sub	sp, fp, #28
   17ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ca8:	ldm	r5, {r2, r3}
   17cac:	ldr	r1, [pc, #36]	; 17cd8 <sprintf@plt+0x644c>
   17cb0:	add	r1, pc, r1
   17cb4:	b	17ae4 <sprintf@plt+0x6258>
   17cb8:	ldr	r2, [r5]
   17cbc:	ldr	r1, [pc, #24]	; 17cdc <sprintf@plt+0x6450>
   17cc0:	add	r1, pc, r1
   17cc4:	b	17ae4 <sprintf@plt+0x6258>
   17cc8:	andeq	r2, r0, lr, lsl #5
   17ccc:	andeq	r2, r0, r9, ror r2
   17cd0:	andeq	r2, r0, r8, ror #4
   17cd4:	andeq	r2, r0, ip, asr r2
   17cd8:	andeq	r2, r0, sl, lsr #32
   17cdc:	andeq	r2, r0, r9, asr #32
   17ce0:	andeq	r7, r1, r8, lsl #14
   17ce4:	andeq	r2, r0, r0, ror #4
   17ce8:	andeq	r2, r1, r4, asr r6
   17cec:	andeq	r2, r1, r4, asr r6
   17cf0:	andeq	r7, r1, r0, ror #10
   17cf4:	andeq	r7, r1, ip, asr #10
   17cf8:	andeq	r7, r1, r0, lsl r5
   17cfc:	push	{r4, r5, r6, r7, fp, lr}
   17d00:	add	fp, sp, #16
   17d04:	sub	sp, sp, #8
   17d08:	ldr	r5, [pc, #220]	; 17dec <sprintf@plt+0x6560>
   17d0c:	ldr	r5, [pc, r5]
   17d10:	cmp	r5, #0
   17d14:	beq	17d80 <sprintf@plt+0x64f4>
   17d18:	ldr	r4, [pc, #208]	; 17df0 <sprintf@plt+0x6564>
   17d1c:	mov	r6, #0
   17d20:	add	r4, pc, r4
   17d24:	ldr	r0, [r5]
   17d28:	ldr	r7, [r5, #8]
   17d2c:	cmp	r0, #0
   17d30:	beq	17d38 <sprintf@plt+0x64ac>
   17d34:	bl	1164c <free@plt>
   17d38:	ldr	r0, [r5, #8]
   17d3c:	ldr	r1, [r5, #4]
   17d40:	mov	r2, r4
   17d44:	cmp	r0, #0
   17d48:	streq	r1, [r4, #4]
   17d4c:	strne	r1, [r0, #4]
   17d50:	ldrne	r1, [r5, #4]
   17d54:	cmp	r1, #0
   17d58:	addne	r2, r1, #8
   17d5c:	cmp	r7, #0
   17d60:	str	r0, [r2]
   17d64:	str	r6, [r5, #4]
   17d68:	str	r6, [r5, #8]
   17d6c:	mov	r5, r7
   17d70:	ldr	r0, [r4, #8]
   17d74:	sub	r0, r0, #1
   17d78:	str	r0, [r4, #8]
   17d7c:	bne	17d24 <sprintf@plt+0x6498>
   17d80:	ldr	r5, [pc, #108]	; 17df4 <sprintf@plt+0x6568>
   17d84:	mov	r4, sp
   17d88:	mov	r1, r4
   17d8c:	ldr	r5, [pc, r5]
   17d90:	ldr	r0, [r5]
   17d94:	bl	11688 <rb_dictionary_foreach_start@plt>
   17d98:	ldr	r0, [r5]
   17d9c:	mov	r1, r4
   17da0:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17da4:	cmp	r0, #0
   17da8:	beq	17dd4 <sprintf@plt+0x6548>
   17dac:	mov	r4, sp
   17db0:	bl	17fc8 <sprintf@plt+0x673c>
   17db4:	ldr	r0, [r5]
   17db8:	mov	r1, r4
   17dbc:	bl	11640 <rb_dictionary_foreach_next@plt>
   17dc0:	ldr	r0, [r5]
   17dc4:	mov	r1, r4
   17dc8:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17dcc:	cmp	r0, #0
   17dd0:	bne	17db0 <sprintf@plt+0x6524>
   17dd4:	ldr	r0, [pc, #28]	; 17df8 <sprintf@plt+0x656c>
   17dd8:	mov	r1, #0
   17ddc:	add	r0, pc, r0
   17de0:	strb	r1, [r0]
   17de4:	sub	sp, fp, #16
   17de8:	pop	{r4, r5, r6, r7, fp, pc}
   17dec:	andeq	r7, r1, r0, lsr #9
   17df0:	andeq	r7, r1, ip, lsl #9
   17df4:	andeq	r2, r1, r8, asr #7
   17df8:	andeq	r7, r1, ip, asr #7
   17dfc:	push	{r4, r5, fp, lr}
   17e00:	add	fp, sp, #8
   17e04:	sub	sp, sp, #8
   17e08:	ldr	r5, [pc, #84]	; 17e64 <sprintf@plt+0x65d8>
   17e0c:	mov	r4, sp
   17e10:	mov	r1, r4
   17e14:	ldr	r5, [pc, r5]
   17e18:	ldr	r0, [r5]
   17e1c:	bl	11688 <rb_dictionary_foreach_start@plt>
   17e20:	ldr	r0, [r5]
   17e24:	mov	r1, r4
   17e28:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17e2c:	cmp	r0, #0
   17e30:	beq	17e5c <sprintf@plt+0x65d0>
   17e34:	mov	r4, sp
   17e38:	bl	17fc8 <sprintf@plt+0x673c>
   17e3c:	ldr	r0, [r5]
   17e40:	mov	r1, r4
   17e44:	bl	11640 <rb_dictionary_foreach_next@plt>
   17e48:	ldr	r0, [r5]
   17e4c:	mov	r1, r4
   17e50:	bl	11598 <rb_dictionary_foreach_cur@plt>
   17e54:	cmp	r0, #0
   17e58:	bne	17e38 <sprintf@plt+0x65ac>
   17e5c:	sub	sp, fp, #8
   17e60:	pop	{r4, r5, fp, pc}
   17e64:	andeq	r2, r1, r0, asr #6
   17e68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17e6c:	add	fp, sp, #24
   17e70:	mov	r9, r0
   17e74:	ldr	r0, [pc, #304]	; 17fac <sprintf@plt+0x6720>
   17e78:	add	r0, pc, r0
   17e7c:	ldrb	r0, [r0]
   17e80:	cmp	r0, #0
   17e84:	ldrne	r0, [pc, #292]	; 17fb0 <sprintf@plt+0x6724>
   17e88:	addne	r0, pc, r0
   17e8c:	ldrne	r0, [r0, #8]
   17e90:	cmpne	r0, #0
   17e94:	bne	17eb4 <sprintf@plt+0x6628>
   17e98:	ldr	r0, [pc, #276]	; 17fb4 <sprintf@plt+0x6728>
   17e9c:	ldr	r0, [pc, r0]
   17ea0:	ldr	r1, [r0, #12]
   17ea4:	mov	r0, r9
   17ea8:	bl	12f54 <sprintf@plt+0x16c8>
   17eac:	mov	r0, #1
   17eb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17eb4:	ldr	r0, [r9, #460]	; 0x1cc
   17eb8:	mov	r1, #16
   17ebc:	add	r0, r0, #1
   17ec0:	str	r0, [r9, #460]	; 0x1cc
   17ec4:	ldr	r0, [pc, #236]	; 17fb8 <sprintf@plt+0x672c>
   17ec8:	ldr	r0, [pc, r0]
   17ecc:	ldr	r5, [r0, #12]
   17ed0:	mov	r0, #1
   17ed4:	bl	115b0 <calloc@plt>
   17ed8:	cmp	r0, #0
   17edc:	beq	17fa8 <sprintf@plt+0x671c>
   17ee0:	ldr	r8, [r9, #464]	; 0x1d0
   17ee4:	add	r1, r8, r5, lsl #4
   17ee8:	str	r0, [r1, #8]
   17eec:	ldr	r0, [pc, #200]	; 17fbc <sprintf@plt+0x6730>
   17ef0:	ldr	r0, [pc, r0]
   17ef4:	ldr	r6, [r0]
   17ef8:	cmp	r6, #0
   17efc:	beq	17f98 <sprintf@plt+0x670c>
   17f00:	ldr	r5, [pc, #184]	; 17fc0 <sprintf@plt+0x6734>
   17f04:	mov	r7, r6
   17f08:	add	r5, pc, r5
   17f0c:	ldr	r4, [r7]
   17f10:	mov	r1, r5
   17f14:	ldr	r0, [r4, #16]
   17f18:	bl	115a4 <strcasecmp@plt>
   17f1c:	cmp	r0, #0
   17f20:	beq	17f34 <sprintf@plt+0x66a8>
   17f24:	ldr	r7, [r7, #8]
   17f28:	cmp	r7, #0
   17f2c:	bne	17f0c <sprintf@plt+0x6680>
   17f30:	b	17f50 <sprintf@plt+0x66c4>
   17f34:	cmp	r4, #0
   17f38:	beq	17f50 <sprintf@plt+0x66c4>
   17f3c:	ldr	r0, [r4, #12]
   17f40:	add	r0, r8, r0, lsl #4
   17f44:	ldr	r0, [r0, #12]
   17f48:	cmp	r0, #2
   17f4c:	bne	17fa0 <sprintf@plt+0x6714>
   17f50:	ldr	r5, [r6]
   17f54:	ldr	r0, [r5, #16]
   17f58:	ldr	r1, [pc, #100]	; 17fc4 <sprintf@plt+0x6738>
   17f5c:	add	r1, pc, r1
   17f60:	bl	115a4 <strcasecmp@plt>
   17f64:	cmp	r0, #0
   17f68:	beq	17f7c <sprintf@plt+0x66f0>
   17f6c:	ldr	r6, [r6, #8]
   17f70:	cmp	r6, #0
   17f74:	bne	17f50 <sprintf@plt+0x66c4>
   17f78:	b	17f98 <sprintf@plt+0x670c>
   17f7c:	cmp	r5, #0
   17f80:	beq	17f98 <sprintf@plt+0x670c>
   17f84:	ldr	r0, [r5, #12]
   17f88:	add	r0, r8, r0, lsl #4
   17f8c:	ldr	r0, [r0, #12]
   17f90:	cmp	r0, #2
   17f94:	bne	17fa0 <sprintf@plt+0x6714>
   17f98:	mov	r0, r9
   17f9c:	bl	18930 <sprintf@plt+0x70a4>
   17fa0:	mov	r0, #1
   17fa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17fa8:	bl	11754 <rb_outofmemory@plt>
   17fac:	andeq	r7, r1, r0, lsr r3
   17fb0:	andeq	r7, r1, r4, lsr #6
   17fb4:	andeq	r2, r1, r4, ror #5
   17fb8:			; <UNDEFINED> instruction: 0x000122b8
   17fbc:	andeq	r2, r1, ip, lsr #5
   17fc0:	andeq	r1, r0, sp, asr #16
   17fc4:	ldrdeq	r1, [r0], -r9
   17fc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17fcc:	add	fp, sp, #24
   17fd0:	mov	r4, r0
   17fd4:	ldr	r0, [r0, #464]	; 0x1d0
   17fd8:	ldr	r8, [pc, #168]	; 18088 <sprintf@plt+0x67fc>
   17fdc:	ldr	r8, [pc, r8]
   17fe0:	ldr	r1, [r8, #12]
   17fe4:	add	r0, r0, r1, lsl #4
   17fe8:	ldr	r5, [r0, #8]
   17fec:	cmp	r5, #0
   17ff0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ff4:	ldr	r0, [r4]
   17ff8:	ldr	r1, [pc, #140]	; 1808c <sprintf@plt+0x6800>
   17ffc:	add	r1, pc, r1
   18000:	bl	12474 <sprintf@plt+0xbe8>
   18004:	ldr	r7, [r5]
   18008:	cmp	r7, #0
   1800c:	bne	18024 <sprintf@plt+0x6798>
   18010:	b	18040 <sprintf@plt+0x67b4>
   18014:	mov	r0, r6
   18018:	bl	1164c <free@plt>
   1801c:	cmp	r7, #0
   18020:	beq	18040 <sprintf@plt+0x67b4>
   18024:	ldr	r6, [r7]
   18028:	ldr	r7, [r7, #8]
   1802c:	ldr	r0, [r6, #4]
   18030:	bl	116dc <rb_close@plt>
   18034:	cmp	r6, #0
   18038:	bne	18014 <sprintf@plt+0x6788>
   1803c:	b	1801c <sprintf@plt+0x6790>
   18040:	mov	r0, r5
   18044:	bl	1164c <free@plt>
   18048:	ldr	r0, [r4, #464]	; 0x1d0
   1804c:	ldr	r1, [r8, #12]
   18050:	mov	r2, #0
   18054:	add	r0, r0, r1, lsl #4
   18058:	str	r2, [r0, #4]
   1805c:	str	r2, [r0, #8]
   18060:	mov	r0, r4
   18064:	bl	12f54 <sprintf@plt+0x16c8>
   18068:	ldr	r0, [r4, #460]	; 0x1cc
   1806c:	subs	r0, r0, #1
   18070:	str	r0, [r4, #460]	; 0x1cc
   18074:	beq	1807c <sprintf@plt+0x67f0>
   18078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1807c:	mov	r0, r4
   18080:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18084:	b	12e90 <sprintf@plt+0x1604>
   18088:	andeq	r2, r1, r4, lsr #3
   1808c:	andeq	r1, r0, r4, asr #27
   18090:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18094:	add	fp, sp, #24
   18098:	mov	r8, r0
   1809c:	ldr	r9, [r0, #464]	; 0x1d0
   180a0:	ldr	r0, [pc, #220]	; 18184 <sprintf@plt+0x68f8>
   180a4:	ldr	r0, [pc, r0]
   180a8:	ldr	r0, [r0, #12]
   180ac:	add	r0, r9, r0, lsl #4
   180b0:	ldr	r0, [r0, #8]
   180b4:	cmp	r0, #0
   180b8:	beq	18180 <sprintf@plt+0x68f4>
   180bc:	ldrb	r0, [r0, #12]
   180c0:	cmp	r0, #0
   180c4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   180c8:	ldr	r0, [pc, #184]	; 18188 <sprintf@plt+0x68fc>
   180cc:	ldr	r0, [pc, r0]
   180d0:	ldr	r4, [r0]
   180d4:	cmp	r4, #0
   180d8:	beq	18174 <sprintf@plt+0x68e8>
   180dc:	ldr	r5, [pc, #168]	; 1818c <sprintf@plt+0x6900>
   180e0:	mov	r7, r4
   180e4:	add	r5, pc, r5
   180e8:	ldr	r6, [r7]
   180ec:	mov	r1, r5
   180f0:	ldr	r0, [r6, #16]
   180f4:	bl	115a4 <strcasecmp@plt>
   180f8:	cmp	r0, #0
   180fc:	beq	18110 <sprintf@plt+0x6884>
   18100:	ldr	r7, [r7, #8]
   18104:	cmp	r7, #0
   18108:	bne	180e8 <sprintf@plt+0x685c>
   1810c:	b	1812c <sprintf@plt+0x68a0>
   18110:	cmp	r6, #0
   18114:	beq	1812c <sprintf@plt+0x68a0>
   18118:	ldr	r0, [r6, #12]
   1811c:	add	r0, r9, r0, lsl #4
   18120:	ldr	r0, [r0, #12]
   18124:	cmp	r0, #2
   18128:	bne	18180 <sprintf@plt+0x68f4>
   1812c:	ldr	r5, [r4]
   18130:	ldr	r0, [r5, #16]
   18134:	ldr	r1, [pc, #84]	; 18190 <sprintf@plt+0x6904>
   18138:	add	r1, pc, r1
   1813c:	bl	115a4 <strcasecmp@plt>
   18140:	cmp	r0, #0
   18144:	beq	18158 <sprintf@plt+0x68cc>
   18148:	ldr	r4, [r4, #8]
   1814c:	cmp	r4, #0
   18150:	bne	1812c <sprintf@plt+0x68a0>
   18154:	b	18174 <sprintf@plt+0x68e8>
   18158:	cmp	r5, #0
   1815c:	beq	18174 <sprintf@plt+0x68e8>
   18160:	ldr	r0, [r5, #12]
   18164:	add	r0, r9, r0, lsl #4
   18168:	ldr	r0, [r0, #12]
   1816c:	cmp	r0, #2
   18170:	bne	18180 <sprintf@plt+0x68f4>
   18174:	mov	r0, r8
   18178:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1817c:	b	18930 <sprintf@plt+0x70a4>
   18180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18184:	ldrdeq	r2, [r1], -ip
   18188:	ldrdeq	r2, [r1], -r0
   1818c:	andeq	r1, r0, r1, ror r6
   18190:	strdeq	r1, [r0], -sp
   18194:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18198:	add	fp, sp, #24
   1819c:	sub	sp, sp, #144	; 0x90
   181a0:	mov	r5, r0
   181a4:	mov	r0, #1
   181a8:	mov	r8, r1
   181ac:	add	r1, sp, #16
   181b0:	str	r0, [sp, #4]
   181b4:	mov	r0, r5
   181b8:	bl	11694 <rb_inet_pton_sock@plt>
   181bc:	cmp	r0, #0
   181c0:	beq	18414 <sprintf@plt+0x6b88>
   181c4:	rev16	r1, r8
   181c8:	strh	r1, [sp, #18]
   181cc:	ldrh	r0, [sp, #16]
   181d0:	cmp	r0, #10
   181d4:	bne	18244 <sprintf@plt+0x69b8>
   181d8:	ldr	r2, [pc, #664]	; 18478 <sprintf@plt+0x6bec>
   181dc:	ldr	r7, [sp, #24]
   181e0:	add	r2, pc, r2
   181e4:	ldr	r3, [r2, #252]	; 0xfc
   181e8:	add	r6, r2, #188	; 0xbc
   181ec:	cmp	r7, r3
   181f0:	bne	18288 <sprintf@plt+0x69fc>
   181f4:	ldr	r3, [r2, #256]	; 0x100
   181f8:	ldr	r7, [sp, #28]
   181fc:	cmp	r7, r3
   18200:	bne	18288 <sprintf@plt+0x69fc>
   18204:	ldr	r3, [r2, #260]	; 0x104
   18208:	ldr	r7, [sp, #32]
   1820c:	cmp	r7, r3
   18210:	bne	18288 <sprintf@plt+0x69fc>
   18214:	ldr	r3, [r2, #264]	; 0x108
   18218:	ldr	r7, [sp, #36]	; 0x24
   1821c:	cmp	r7, r3
   18220:	bne	18288 <sprintf@plt+0x69fc>
   18224:	ldrh	r3, [r2, #246]	; 0xf6
   18228:	uxth	r1, r1
   1822c:	cmp	r1, r3
   18230:	bne	18288 <sprintf@plt+0x69fc>
   18234:	ldr	r1, [r2, #372]	; 0x174
   18238:	cmp	r1, #0
   1823c:	bne	18280 <sprintf@plt+0x69f4>
   18240:	b	18288 <sprintf@plt+0x69fc>
   18244:	ldr	r6, [pc, #560]	; 1847c <sprintf@plt+0x6bf0>
   18248:	ldr	r3, [sp, #20]
   1824c:	add	r6, pc, r6
   18250:	ldr	r2, [r6, #60]	; 0x3c
   18254:	cmp	r3, r2
   18258:	bne	18288 <sprintf@plt+0x69fc>
   1825c:	ldr	r6, [pc, #540]	; 18480 <sprintf@plt+0x6bf4>
   18260:	uxth	r1, r1
   18264:	add	r6, pc, r6
   18268:	ldrh	r2, [r6, #58]	; 0x3a
   1826c:	cmp	r1, r2
   18270:	bne	18288 <sprintf@plt+0x69fc>
   18274:	ldr	r1, [r6, #184]	; 0xb8
   18278:	cmp	r1, #0
   1827c:	beq	18288 <sprintf@plt+0x69fc>
   18280:	sub	sp, fp, #24
   18284:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18288:	ldr	r3, [pc, #500]	; 18484 <sprintf@plt+0x6bf8>
   1828c:	mov	r1, #1
   18290:	mov	r2, #0
   18294:	add	r3, pc, r3
   18298:	bl	11568 <rb_socket@plt>
   1829c:	cmp	r0, #0
   182a0:	beq	18434 <sprintf@plt+0x6ba8>
   182a4:	mov	r7, r0
   182a8:	bl	11544 <rb_get_fd@plt>
   182ac:	mov	r1, #4
   182b0:	add	r3, sp, #4
   182b4:	mov	r2, #2
   182b8:	str	r1, [sp]
   182bc:	mov	r1, #1
   182c0:	bl	11844 <setsockopt@plt>
   182c4:	cmp	r0, #0
   182c8:	bne	18450 <sprintf@plt+0x6bc4>
   182cc:	mov	r0, r7
   182d0:	bl	11544 <rb_get_fd@plt>
   182d4:	ldrh	r1, [sp, #16]
   182d8:	mov	r2, #28
   182dc:	cmp	r1, #2
   182e0:	add	r1, sp, #16
   182e4:	movweq	r2, #16
   182e8:	bl	11718 <bind@plt>
   182ec:	cmp	r0, #0
   182f0:	beq	18310 <sprintf@plt+0x6a84>
   182f4:	bl	11880 <__errno_location@plt>
   182f8:	ldr	r0, [r0]
   182fc:	bl	114b4 <strerror@plt>
   18300:	ldr	r1, [pc, #392]	; 18490 <sprintf@plt+0x6c04>
   18304:	mov	r2, r0
   18308:	add	r1, pc, r1
   1830c:	b	18340 <sprintf@plt+0x6ab4>
   18310:	mov	r0, r7
   18314:	mov	r1, #128	; 0x80
   18318:	mov	r2, #0
   1831c:	bl	11820 <rb_listen@plt>
   18320:	cmp	r0, #0
   18324:	beq	18358 <sprintf@plt+0x6acc>
   18328:	bl	11880 <__errno_location@plt>
   1832c:	ldr	r0, [r0]
   18330:	bl	114b4 <strerror@plt>
   18334:	ldr	r1, [pc, #344]	; 18494 <sprintf@plt+0x6c08>
   18338:	mov	r2, r0
   1833c:	add	r1, pc, r1
   18340:	mov	r0, #87	; 0x57
   18344:	bl	124e8 <sprintf@plt+0xc5c>
   18348:	mov	r0, r7
   1834c:	bl	116dc <rb_close@plt>
   18350:	sub	sp, fp, #24
   18354:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18358:	ldr	r0, [r6, #184]	; 0xb8
   1835c:	cmp	r0, #0
   18360:	beq	18368 <sprintf@plt+0x6adc>
   18364:	bl	116dc <rb_close@plt>
   18368:	str	r7, [r6, #184]	; 0xb8
   1836c:	add	r7, sp, #8
   18370:	ldr	r4, [pc, #288]	; 18498 <sprintf@plt+0x6c0c>
   18374:	mov	r1, r7
   18378:	ldr	r4, [pc, r4]
   1837c:	ldr	r0, [r4]
   18380:	bl	11688 <rb_dictionary_foreach_start@plt>
   18384:	ldr	r0, [r4]
   18388:	mov	r1, r7
   1838c:	bl	11598 <rb_dictionary_foreach_cur@plt>
   18390:	cmp	r0, #0
   18394:	beq	183c0 <sprintf@plt+0x6b34>
   18398:	add	r7, sp, #8
   1839c:	bl	17fc8 <sprintf@plt+0x673c>
   183a0:	ldr	r0, [r4]
   183a4:	mov	r1, r7
   183a8:	bl	11640 <rb_dictionary_foreach_next@plt>
   183ac:	ldr	r0, [r4]
   183b0:	mov	r1, r7
   183b4:	bl	11598 <rb_dictionary_foreach_cur@plt>
   183b8:	cmp	r0, #0
   183bc:	bne	1839c <sprintf@plt+0x6b10>
   183c0:	mov	r0, r6
   183c4:	mov	r1, r5
   183c8:	mov	r2, #53	; 0x35
   183cc:	bl	11628 <rb_strlcpy@plt>
   183d0:	add	r0, r6, #56	; 0x38
   183d4:	add	r1, sp, #16
   183d8:	mov	r2, #128	; 0x80
   183dc:	strh	r8, [r6, #54]	; 0x36
   183e0:	bl	116c4 <memcpy@plt>
   183e4:	ldr	r0, [pc, #176]	; 1849c <sprintf@plt+0x6c10>
   183e8:	mov	r1, #1
   183ec:	mov	r3, r6
   183f0:	add	r0, pc, r0
   183f4:	strb	r1, [r0]
   183f8:	ldr	r0, [r6, #184]	; 0xb8
   183fc:	mov	r1, #0
   18400:	ldr	r2, [pc, #152]	; 184a0 <sprintf@plt+0x6c14>
   18404:	add	r2, pc, r2
   18408:	bl	117d8 <rb_accept_tcp@plt>
   1840c:	sub	sp, fp, #24
   18410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18414:	ldr	r1, [pc, #136]	; 184a4 <sprintf@plt+0x6c18>
   18418:	mov	r0, #67	; 0x43
   1841c:	mov	r2, r5
   18420:	mov	r3, r8
   18424:	add	r1, pc, r1
   18428:	bl	124e8 <sprintf@plt+0xc5c>
   1842c:	mov	r0, #3
   18430:	bl	11874 <exit@plt>
   18434:	bl	11880 <__errno_location@plt>
   18438:	ldr	r0, [r0]
   1843c:	bl	114b4 <strerror@plt>
   18440:	ldr	r1, [pc, #64]	; 18488 <sprintf@plt+0x6bfc>
   18444:	mov	r2, r0
   18448:	add	r1, pc, r1
   1844c:	b	18468 <sprintf@plt+0x6bdc>
   18450:	bl	11880 <__errno_location@plt>
   18454:	ldr	r0, [r0]
   18458:	bl	114b4 <strerror@plt>
   1845c:	ldr	r1, [pc, #40]	; 1848c <sprintf@plt+0x6c00>
   18460:	mov	r2, r0
   18464:	add	r1, pc, r1
   18468:	mov	r0, #67	; 0x43
   1846c:	bl	124e8 <sprintf@plt+0xc5c>
   18470:	mov	r0, #3
   18474:	bl	11874 <exit@plt>
   18478:	andeq	r6, r1, r0, asr lr
   1847c:	andeq	r6, r1, r4, ror #27
   18480:	andeq	r6, r1, ip, asr #27
   18484:	andeq	r1, r0, r8, asr #16
   18488:	andeq	r1, r0, r8, lsr #13
   1848c:	andeq	r1, r0, sl, lsr #13
   18490:	andeq	r1, r0, ip, lsr #16
   18494:	andeq	r1, r0, r7, lsl r8
   18498:	ldrdeq	r1, [r1], -ip
   1849c:			; <UNDEFINED> instruction: 0x00016db8
   184a0:	muleq	r0, ip, r0
   184a4:	muleq	r0, r8, r6
   184a8:	push	{r4, r5, r6, sl, fp, lr}
   184ac:	add	fp, sp, #16
   184b0:	sub	sp, sp, #144	; 0x90
   184b4:	mov	r4, r0
   184b8:	mov	r0, #128	; 0x80
   184bc:	cmp	r1, #0
   184c0:	str	r0, [sp, #12]
   184c4:	bne	185bc <sprintf@plt+0x6d30>
   184c8:	ldr	r0, [fp, #8]
   184cc:	cmp	r0, #0
   184d0:	beq	185bc <sprintf@plt+0x6d30>
   184d4:	mov	r0, r4
   184d8:	bl	11544 <rb_get_fd@plt>
   184dc:	add	r1, sp, #16
   184e0:	add	r2, sp, #12
   184e4:	bl	114e4 <getsockname@plt>
   184e8:	cmp	r0, #0
   184ec:	bne	185bc <sprintf@plt+0x6d30>
   184f0:	ldr	r6, [pc, #264]	; 18600 <sprintf@plt+0x6d74>
   184f4:	add	r5, sp, #4
   184f8:	mov	r1, r5
   184fc:	ldr	r6, [pc, r6]
   18500:	ldr	r0, [r6]
   18504:	bl	11688 <rb_dictionary_foreach_start@plt>
   18508:	ldr	r0, [r6]
   1850c:	mov	r1, r5
   18510:	bl	11598 <rb_dictionary_foreach_cur@plt>
   18514:	cmp	r0, #0
   18518:	beq	185bc <sprintf@plt+0x6d30>
   1851c:	mov	r3, r0
   18520:	add	r5, sp, #4
   18524:	ldrh	r0, [r3, #248]	; 0xf8
   18528:	ldrh	r1, [sp, #16]
   1852c:	cmp	r0, r1
   18530:	bne	18598 <sprintf@plt+0x6d0c>
   18534:	cmp	r0, #10
   18538:	beq	18558 <sprintf@plt+0x6ccc>
   1853c:	cmp	r0, #2
   18540:	bne	185e8 <sprintf@plt+0x6d5c>
   18544:	ldr	r0, [r3, #252]	; 0xfc
   18548:	ldr	r1, [sp, #20]
   1854c:	cmp	r1, r0
   18550:	bne	18598 <sprintf@plt+0x6d0c>
   18554:	b	185cc <sprintf@plt+0x6d40>
   18558:	ldr	r0, [r3, #256]	; 0x100
   1855c:	ldr	r1, [sp, #24]
   18560:	cmp	r1, r0
   18564:	bne	18598 <sprintf@plt+0x6d0c>
   18568:	ldr	r0, [r3, #260]	; 0x104
   1856c:	ldr	r1, [sp, #28]
   18570:	cmp	r1, r0
   18574:	bne	18598 <sprintf@plt+0x6d0c>
   18578:	ldr	r0, [r3, #264]	; 0x108
   1857c:	ldr	r1, [sp, #32]
   18580:	cmp	r1, r0
   18584:	bne	18598 <sprintf@plt+0x6d0c>
   18588:	ldr	r0, [r3, #268]	; 0x10c
   1858c:	ldr	r1, [sp, #36]	; 0x24
   18590:	cmp	r1, r0
   18594:	beq	185cc <sprintf@plt+0x6d40>
   18598:	ldr	r0, [r6]
   1859c:	mov	r1, r5
   185a0:	bl	11640 <rb_dictionary_foreach_next@plt>
   185a4:	ldr	r0, [r6]
   185a8:	mov	r1, r5
   185ac:	bl	11598 <rb_dictionary_foreach_cur@plt>
   185b0:	mov	r3, r0
   185b4:	cmp	r0, #0
   185b8:	bne	18524 <sprintf@plt+0x6c98>
   185bc:	mov	r0, r4
   185c0:	bl	116dc <rb_close@plt>
   185c4:	sub	sp, fp, #16
   185c8:	pop	{r4, r5, r6, sl, fp, pc}
   185cc:	ldr	r2, [pc, #48]	; 18604 <sprintf@plt+0x6d78>
   185d0:	mov	r0, r4
   185d4:	mov	r1, #1
   185d8:	add	r2, pc, r2
   185dc:	bl	11538 <rb_setselect@plt>
   185e0:	sub	sp, fp, #16
   185e4:	pop	{r4, r5, r6, sl, fp, pc}
   185e8:	ldr	r1, [pc, #24]	; 18608 <sprintf@plt+0x6d7c>
   185ec:	mov	r0, #67	; 0x43
   185f0:	add	r1, pc, r1
   185f4:	bl	124e8 <sprintf@plt+0xc5c>
   185f8:	mov	r0, #3
   185fc:	bl	11874 <exit@plt>
   18600:	andeq	r1, r1, r8, asr ip
   18604:	andeq	r0, r0, ip, lsr #32
   18608:	andeq	r1, r0, r4, lsl #11
   1860c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18610:	add	fp, sp, #28
   18614:	sub	sp, sp, #132	; 0x84
   18618:	mov	r4, r0
   1861c:	ldr	r0, [r1, #464]	; 0x1d0
   18620:	ldr	r9, [pc, #280]	; 18740 <sprintf@plt+0x6eb4>
   18624:	mov	sl, r1
   18628:	mov	r2, #128	; 0x80
   1862c:	ldr	r9, [pc, r9]
   18630:	ldr	r1, [r9, #12]
   18634:	add	r0, r0, r1, lsl #4
   18638:	add	r1, sp, #4
   1863c:	ldr	r8, [r0, #8]
   18640:	mov	r0, r4
   18644:	bl	11664 <rb_read@plt>
   18648:	cmn	r0, #1
   1864c:	ble	186a0 <sprintf@plt+0x6e14>
   18650:	cmp	r0, #0
   18654:	beq	18730 <sprintf@plt+0x6ea4>
   18658:	ldr	r5, [pc, #232]	; 18748 <sprintf@plt+0x6ebc>
   1865c:	ldr	r5, [pc, r5]
   18660:	cmp	r5, #0
   18664:	beq	18730 <sprintf@plt+0x6ea4>
   18668:	add	r7, sp, #4
   1866c:	ldr	r6, [r5]
   18670:	mov	r0, r6
   18674:	bl	116a0 <strlen@plt>
   18678:	mov	r2, r0
   1867c:	mov	r0, r6
   18680:	mov	r1, r7
   18684:	bl	1182c <strncmp@plt>
   18688:	cmp	r0, #0
   1868c:	beq	186d4 <sprintf@plt+0x6e48>
   18690:	ldr	r5, [r5, #8]
   18694:	cmp	r5, #0
   18698:	bne	1866c <sprintf@plt+0x6de0>
   1869c:	b	18730 <sprintf@plt+0x6ea4>
   186a0:	bl	11880 <__errno_location@plt>
   186a4:	ldr	r0, [r0]
   186a8:	bl	114f0 <rb_ignore_errno@plt>
   186ac:	cmp	r0, #0
   186b0:	beq	18730 <sprintf@plt+0x6ea4>
   186b4:	ldr	r2, [pc, #136]	; 18744 <sprintf@plt+0x6eb8>
   186b8:	mov	r0, r4
   186bc:	mov	r1, #1
   186c0:	mov	r3, sl
   186c4:	add	r2, pc, r2
   186c8:	bl	11538 <rb_setselect@plt>
   186cc:	sub	sp, fp, #28
   186d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186d4:	ldr	r5, [r8]
   186d8:	cmp	r5, #0
   186dc:	beq	18710 <sprintf@plt+0x6e84>
   186e0:	ldr	r7, [r5]
   186e4:	ldr	r5, [r5, #8]
   186e8:	ldr	r0, [r7, #4]
   186ec:	bl	116dc <rb_close@plt>
   186f0:	cmp	r7, #0
   186f4:	beq	18700 <sprintf@plt+0x6e74>
   186f8:	mov	r0, r7
   186fc:	bl	1164c <free@plt>
   18700:	cmp	r5, #0
   18704:	bne	186e0 <sprintf@plt+0x6e54>
   18708:	cmp	r8, #0
   1870c:	beq	18718 <sprintf@plt+0x6e8c>
   18710:	mov	r0, r8
   18714:	bl	1164c <free@plt>
   18718:	ldr	r1, [r9, #12]
   1871c:	ldr	r3, [pc, #40]	; 1874c <sprintf@plt+0x6ec0>
   18720:	add	r2, sp, #4
   18724:	mov	r0, sl
   18728:	add	r3, pc, r3
   1872c:	bl	12b6c <sprintf@plt+0x12e0>
   18730:	mov	r0, r4
   18734:	bl	116dc <rb_close@plt>
   18738:	sub	sp, fp, #28
   1873c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18740:	andeq	r1, r1, r4, asr fp
   18744:			; <UNDEFINED> instruction: 0xffffff40
   18748:	andeq	r6, r1, r0, asr fp
   1874c:	andeq	r1, r0, r9, ror r4
   18750:	push	{r4, r5, fp, lr}
   18754:	add	fp, sp, #8
   18758:	sub	sp, sp, #16
   1875c:	mov	r4, r0
   18760:	mov	r0, #260	; 0x104
   18764:	mov	r2, #9
   18768:	strh	r0, [sp, #6]
   1876c:	ldr	r0, [r4, #12]
   18770:	ldrh	r1, [r0, #58]	; 0x3a
   18774:	strh	r1, [sp, #8]
   18778:	mov	r1, #0
   1877c:	ldr	r0, [r0, #60]	; 0x3c
   18780:	strb	r1, [sp, #14]
   18784:	add	r1, sp, #6
   18788:	str	r0, [sp, #10]
   1878c:	ldr	r0, [r4, #4]
   18790:	bl	11604 <rb_write@plt>
   18794:	cmp	r0, #0
   18798:	blt	187bc <sprintf@plt+0x6f30>
   1879c:	ldr	r5, [r4, #4]
   187a0:	ldr	r4, [r4, #8]
   187a4:	mov	r0, r4
   187a8:	bl	116a0 <strlen@plt>
   187ac:	add	r2, r0, #1
   187b0:	mov	r0, r5
   187b4:	mov	r1, r4
   187b8:	bl	11604 <rb_write@plt>
   187bc:	sub	sp, fp, #8
   187c0:	pop	{r4, r5, fp, pc}
   187c4:	push	{r4, r5, fp, lr}
   187c8:	add	fp, sp, #8
   187cc:	sub	sp, sp, #32
   187d0:	mov	r4, r0
   187d4:	ldr	r0, [r0]
   187d8:	mov	r1, #1
   187dc:	strh	r1, [sp, #4]
   187e0:	movw	r1, #261	; 0x105
   187e4:	movt	r1, #1280	; 0x500
   187e8:	str	r1, [sp]
   187ec:	ldrh	r0, [r0, #248]	; 0xf8
   187f0:	cmp	r0, #10
   187f4:	beq	18820 <sprintf@plt+0x6f94>
   187f8:	cmp	r0, #2
   187fc:	bne	18888 <sprintf@plt+0x6ffc>
   18800:	mov	r0, #1
   18804:	mvn	r2, #12
   18808:	mov	r3, #11
   1880c:	strb	r0, [sp, #6]
   18810:	ldr	r0, [r4, #12]
   18814:	ldr	r1, [r0, #60]	; 0x3c
   18818:	str	r1, [sp, #7]
   1881c:	b	18848 <sprintf@plt+0x6fbc>
   18820:	mov	r0, #4
   18824:	mvn	r2, #24
   18828:	mov	r3, #23
   1882c:	strb	r0, [sp, #6]
   18830:	ldr	r0, [r4, #12]
   18834:	add	r1, r0, #64	; 0x40
   18838:	vld1.8	{d16-d17}, [r1]
   1883c:	mov	r1, sp
   18840:	orr	r1, r1, #7
   18844:	vst1.8	{d16-d17}, [r1]
   18848:	ldrh	r0, [r0, #58]	; 0x3a
   1884c:	mov	r1, sp
   18850:	add	r3, r1, r3
   18854:	strh	r0, [r3]
   18858:	ldr	r0, [r4, #4]
   1885c:	bl	11604 <rb_write@plt>
   18860:	cmp	r0, #1
   18864:	blt	18888 <sprintf@plt+0x6ffc>
   18868:	ldr	r5, [r4, #4]
   1886c:	ldr	r4, [r4, #8]
   18870:	mov	r0, r4
   18874:	bl	116a0 <strlen@plt>
   18878:	add	r2, r0, #1
   1887c:	mov	r0, r5
   18880:	mov	r1, r4
   18884:	bl	11604 <rb_write@plt>
   18888:	sub	sp, fp, #8
   1888c:	pop	{r4, r5, fp, pc}
   18890:	push	{r4, r5, r6, sl, fp, lr}
   18894:	add	fp, sp, #16
   18898:	sub	sp, sp, #136	; 0x88
   1889c:	ldr	r3, [r0, #12]
   188a0:	mov	r4, r0
   188a4:	add	r5, sp, #8
   188a8:	mov	r1, #128	; 0x80
   188ac:	ldrh	r0, [r3, #54]	; 0x36
   188b0:	str	r0, [sp]
   188b4:	mov	r0, r5
   188b8:	ldr	r2, [pc, #104]	; 18928 <sprintf@plt+0x709c>
   188bc:	add	r2, pc, r2
   188c0:	bl	11814 <snprintf@plt>
   188c4:	ldr	r6, [r4, #4]
   188c8:	mov	r0, r5
   188cc:	bl	116a0 <strlen@plt>
   188d0:	mov	r2, r0
   188d4:	mov	r0, r6
   188d8:	mov	r1, r5
   188dc:	bl	11604 <rb_write@plt>
   188e0:	cmp	r0, #1
   188e4:	blt	18920 <sprintf@plt+0x7094>
   188e8:	ldmib	r4, {r5, r6}
   188ec:	mov	r0, r6
   188f0:	bl	116a0 <strlen@plt>
   188f4:	add	r2, r0, #1
   188f8:	mov	r0, r5
   188fc:	mov	r1, r6
   18900:	bl	11604 <rb_write@plt>
   18904:	cmp	r0, #1
   18908:	blt	18920 <sprintf@plt+0x7094>
   1890c:	ldr	r0, [r4, #4]
   18910:	ldr	r1, [pc, #20]	; 1892c <sprintf@plt+0x70a0>
   18914:	mov	r2, #2
   18918:	add	r1, pc, r1
   1891c:	bl	11604 <rb_write@plt>
   18920:	sub	sp, fp, #16
   18924:	pop	{r4, r5, r6, sl, fp, pc}
   18928:	strdeq	r1, [r0], -r5
   1892c:			; <UNDEFINED> instruction: 0x000013b2
   18930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18934:	add	fp, sp, #28
   18938:	sub	sp, sp, #284	; 0x11c
   1893c:	mov	sl, r0
   18940:	ldr	r0, [r0, #464]	; 0x1d0
   18944:	ldr	r1, [pc, #684]	; 18bf8 <sprintf@plt+0x736c>
   18948:	ldr	r1, [pc, r1]
   1894c:	ldr	r4, [r1, #12]
   18950:	add	r0, r0, r4, lsl #4
   18954:	ldr	r5, [r0, #8]
   18958:	ldr	r6, [pc, #668]	; 18bfc <sprintf@plt+0x7370>
   1895c:	ldr	r6, [pc, r6]
   18960:	bl	116ac <rb_current_time@plt>
   18964:	add	r1, r0, r6
   18968:	ldr	r0, [sl, #464]	; 0x1d0
   1896c:	add	r2, r0, r4, lsl #4
   18970:	str	r1, [r2, #4]
   18974:	mov	r1, #1
   18978:	strb	r1, [r5, #12]
   1897c:	ldr	r7, [pc, #636]	; 18c00 <sprintf@plt+0x7374>
   18980:	ldr	r7, [pc, r7]
   18984:	cmp	r7, #0
   18988:	beq	18bc0 <sprintf@plt+0x7334>
   1898c:	ldr	r1, [pc, #624]	; 18c04 <sprintf@plt+0x7378>
   18990:	ldr	r1, [pc, r1]
   18994:	ldr	r9, [r7]
   18998:	ldr	r1, [r1, #12]
   1899c:	add	r0, r0, r1, lsl #4
   189a0:	mov	r1, #28
   189a4:	ldr	r4, [r0, #8]
   189a8:	mov	r0, #1
   189ac:	bl	115b0 <calloc@plt>
   189b0:	cmp	r0, #0
   189b4:	beq	18bbc <sprintf@plt+0x7330>
   189b8:	mov	r8, r0
   189bc:	add	r0, sl, #248	; 0xf8
   189c0:	str	r0, [sp, #16]
   189c4:	ldr	r0, [pc, #572]	; 18c08 <sprintf@plt+0x737c>
   189c8:	str	sl, [sp, #8]
   189cc:	add	r0, pc, r0
   189d0:	add	r0, r0, #188	; 0xbc
   189d4:	str	r0, [sp, #12]
   189d8:	mov	r0, #1
   189dc:	str	r0, [sp, #20]
   189e0:	ldr	r0, [sp, #16]
   189e4:	ldrh	r6, [r0]
   189e8:	ldr	r5, [pc, #540]	; 18c0c <sprintf@plt+0x7380>
   189ec:	cmp	r6, #10
   189f0:	add	r5, pc, r5
   189f4:	bne	18a08 <sprintf@plt+0x717c>
   189f8:	ldr	r0, [r9, #16]
   189fc:	ldr	r5, [sp, #12]
   18a00:	cmp	r0, #1
   18a04:	beq	18ac4 <sprintf@plt+0x7238>
   18a08:	ldr	r0, [r5, #184]	; 0xb8
   18a0c:	cmp	r0, #0
   18a10:	beq	18ac4 <sprintf@plt+0x7238>
   18a14:	ldr	r1, [sp, #16]
   18a18:	add	r0, sp, #152	; 0x98
   18a1c:	mov	r2, #128	; 0x80
   18a20:	bl	116c4 <memcpy@plt>
   18a24:	add	r1, r5, #56	; 0x38
   18a28:	add	r0, sp, #24
   18a2c:	mov	r2, #128	; 0x80
   18a30:	bl	116c4 <memcpy@plt>
   18a34:	mov	r0, r6
   18a38:	mov	r1, #1
   18a3c:	mov	r2, #0
   18a40:	mov	r3, r9
   18a44:	str	sl, [r8]
   18a48:	str	r9, [r8, #8]
   18a4c:	str	r5, [r8, #12]
   18a50:	bl	11568 <rb_socket@plt>
   18a54:	cmp	r0, #0
   18a58:	str	r0, [r8, #4]
   18a5c:	beq	18ad0 <sprintf@plt+0x7244>
   18a60:	mov	sl, r0
   18a64:	bl	11544 <rb_get_fd@plt>
   18a68:	mov	r1, #4
   18a6c:	mov	r2, #1
   18a70:	add	r3, sp, #20
   18a74:	str	r1, [sp]
   18a78:	mov	r1, #6
   18a7c:	bl	11844 <setsockopt@plt>
   18a80:	mov	r1, #0
   18a84:	cmp	r4, #0
   18a88:	strh	r1, [sp, #26]
   18a8c:	ldrh	r0, [r9, #20]
   18a90:	rev16	r0, r0
   18a94:	strh	r0, [sp, #154]	; 0x9a
   18a98:	beq	18bd8 <sprintf@plt+0x734c>
   18a9c:	str	r1, [r8, #20]
   18aa0:	str	r8, [r8, #16]
   18aa4:	add	r0, r8, #16
   18aa8:	ldr	r1, [r4]
   18aac:	cmp	r1, #0
   18ab0:	str	r1, [r8, #24]
   18ab4:	beq	18b00 <sprintf@plt+0x7274>
   18ab8:	add	r1, r1, #4
   18abc:	str	r0, [r1]
   18ac0:	b	18b10 <sprintf@plt+0x7284>
   18ac4:	mov	r0, r8
   18ac8:	bl	1164c <free@plt>
   18acc:	b	18b7c <sprintf@plt+0x72f0>
   18ad0:	bl	11880 <__errno_location@plt>
   18ad4:	ldr	r0, [r0]
   18ad8:	bl	114b4 <strerror@plt>
   18adc:	ldr	r1, [pc, #300]	; 18c10 <sprintf@plt+0x7384>
   18ae0:	mov	r3, r0
   18ae4:	mov	r0, #87	; 0x57
   18ae8:	mov	r2, r9
   18aec:	add	r1, pc, r1
   18af0:	bl	124e8 <sprintf@plt+0xc5c>
   18af4:	mov	r0, r8
   18af8:	bl	1164c <free@plt>
   18afc:	b	18b78 <sprintf@plt+0x72ec>
   18b00:	mov	r1, r4
   18b04:	ldr	r2, [r1, #4]!
   18b08:	cmp	r2, #0
   18b0c:	streq	r0, [r1]
   18b10:	str	r0, [r4]
   18b14:	ldr	r0, [r4, #8]
   18b18:	add	r0, r0, #1
   18b1c:	str	r0, [r4, #8]
   18b20:	ldrb	r1, [r9, #22]
   18b24:	ldr	r0, [pc, #232]	; 18c14 <sprintf@plt+0x7388>
   18b28:	ldr	r0, [pc, r0]
   18b2c:	cmp	r1, #0
   18b30:	beq	18b58 <sprintf@plt+0x72cc>
   18b34:	str	r0, [sp, #4]
   18b38:	str	r8, [sp]
   18b3c:	mov	r0, sl
   18b40:	add	r1, sp, #152	; 0x98
   18b44:	add	r2, sp, #24
   18b48:	ldr	r3, [pc, #204]	; 18c1c <sprintf@plt+0x7390>
   18b4c:	add	r3, pc, r3
   18b50:	bl	114fc <rb_connect_tcp_ssl@plt>
   18b54:	b	18b78 <sprintf@plt+0x72ec>
   18b58:	str	r0, [sp, #4]
   18b5c:	str	r8, [sp]
   18b60:	mov	r0, sl
   18b64:	add	r1, sp, #152	; 0x98
   18b68:	add	r2, sp, #24
   18b6c:	ldr	r3, [pc, #164]	; 18c18 <sprintf@plt+0x738c>
   18b70:	add	r3, pc, r3
   18b74:	bl	11508 <rb_connect_tcp@plt>
   18b78:	ldr	sl, [sp, #8]
   18b7c:	ldr	r7, [r7, #8]
   18b80:	cmp	r7, #0
   18b84:	beq	18bc0 <sprintf@plt+0x7334>
   18b88:	ldr	r0, [sl, #464]	; 0x1d0
   18b8c:	ldr	r1, [pc, #140]	; 18c20 <sprintf@plt+0x7394>
   18b90:	ldr	r1, [pc, r1]
   18b94:	ldr	r9, [r7]
   18b98:	ldr	r1, [r1, #12]
   18b9c:	add	r0, r0, r1, lsl #4
   18ba0:	mov	r1, #28
   18ba4:	ldr	r4, [r0, #8]
   18ba8:	mov	r0, #1
   18bac:	bl	115b0 <calloc@plt>
   18bb0:	mov	r8, r0
   18bb4:	cmp	r0, #0
   18bb8:	bne	189d8 <sprintf@plt+0x714c>
   18bbc:	bl	11754 <rb_outofmemory@plt>
   18bc0:	ldr	r0, [sl]
   18bc4:	ldr	r1, [pc, #88]	; 18c24 <sprintf@plt+0x7398>
   18bc8:	add	r1, pc, r1
   18bcc:	bl	12474 <sprintf@plt+0xbe8>
   18bd0:	sub	sp, fp, #28
   18bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bd8:	ldr	r0, [pc, #72]	; 18c28 <sprintf@plt+0x739c>
   18bdc:	ldr	r1, [pc, #72]	; 18c2c <sprintf@plt+0x73a0>
   18be0:	ldr	r3, [pc, #72]	; 18c30 <sprintf@plt+0x73a4>
   18be4:	mov	r2, #145	; 0x91
   18be8:	add	r0, pc, r0
   18bec:	add	r1, pc, r1
   18bf0:	add	r3, pc, r3
   18bf4:	bl	11610 <__assert_fail@plt>
   18bf8:	andeq	r1, r1, r8, lsr r8
   18bfc:	andeq	r2, r1, r4, lsr #12
   18c00:	andeq	r6, r1, ip, lsr #16
   18c04:	strdeq	r1, [r1], -r0
   18c08:	andeq	r6, r1, r4, ror #12
   18c0c:	andeq	r6, r1, r0, asr #12
   18c10:	andeq	r1, r0, r4, lsr #5
   18c14:	andeq	r2, r1, r8, asr r4
   18c18:	strheq	r0, [r0], -ip
   18c1c:	andeq	r0, r0, r0, ror #1
   18c20:	strdeq	r1, [r1], -r0
   18c24:	andeq	r1, r0, r7, lsr #3
   18c28:	andeq	r1, r0, r5, ror #1
   18c2c:	ldrdeq	r0, [r0], -sl
   18c30:	andeq	r0, r0, r5, lsr r7
   18c34:	push	{r4, r5, fp, lr}
   18c38:	add	fp, sp, #8
   18c3c:	ldr	r0, [pc, #268]	; 18d50 <sprintf@plt+0x74c4>
   18c40:	mov	r4, r2
   18c44:	cmp	r1, #0
   18c48:	ldr	r0, [pc, r0]
   18c4c:	ldr	r2, [r2]
   18c50:	ldr	r0, [r0, #12]
   18c54:	ldr	r3, [r2, #464]	; 0x1d0
   18c58:	add	r0, r3, r0, lsl #4
   18c5c:	ldr	r5, [r0, #8]
   18c60:	bne	18cd4 <sprintf@plt+0x7448>
   18c64:	ldr	r0, [pc, #232]	; 18d54 <sprintf@plt+0x74c8>
   18c68:	add	r0, pc, r0
   18c6c:	ldrb	r0, [r0]
   18c70:	cmp	r0, #0
   18c74:	beq	18cd4 <sprintf@plt+0x7448>
   18c78:	ldrh	r1, [r2, #248]	; 0xf8
   18c7c:	ldr	r0, [r4, #8]
   18c80:	cmp	r1, #10
   18c84:	beq	18ca8 <sprintf@plt+0x741c>
   18c88:	cmp	r1, #2
   18c8c:	bne	18cd4 <sprintf@plt+0x7448>
   18c90:	ldr	r1, [pc, #192]	; 18d58 <sprintf@plt+0x74cc>
   18c94:	add	r1, pc, r1
   18c98:	ldr	r1, [r1, #184]	; 0xb8
   18c9c:	cmp	r1, #0
   18ca0:	bne	18cc8 <sprintf@plt+0x743c>
   18ca4:	b	18cd4 <sprintf@plt+0x7448>
   18ca8:	ldrb	r1, [r0, #23]
   18cac:	cmp	r1, #0
   18cb0:	beq	18cd4 <sprintf@plt+0x7448>
   18cb4:	ldr	r1, [pc, #160]	; 18d5c <sprintf@plt+0x74d0>
   18cb8:	add	r1, pc, r1
   18cbc:	ldr	r1, [r1, #372]	; 0x174
   18cc0:	cmp	r1, #0
   18cc4:	beq	18cd4 <sprintf@plt+0x7448>
   18cc8:	ldr	r1, [r0, #24]
   18ccc:	mov	r0, r4
   18cd0:	blx	r1
   18cd4:	ldr	r0, [r4, #4]
   18cd8:	bl	116dc <rb_close@plt>
   18cdc:	cmp	r5, #0
   18ce0:	beq	18d30 <sprintf@plt+0x74a4>
   18ce4:	ldr	r0, [r4, #24]
   18ce8:	ldr	r1, [r4, #20]
   18cec:	mov	r2, r5
   18cf0:	cmp	r0, #0
   18cf4:	streq	r1, [r5, #4]
   18cf8:	strne	r1, [r0, #4]
   18cfc:	ldrne	r1, [r4, #20]
   18d00:	cmp	r1, #0
   18d04:	addne	r2, r1, #8
   18d08:	str	r0, [r2]
   18d0c:	mov	r0, #0
   18d10:	str	r0, [r4, #20]
   18d14:	str	r0, [r4, #24]
   18d18:	ldr	r0, [r5, #8]
   18d1c:	sub	r0, r0, #1
   18d20:	str	r0, [r5, #8]
   18d24:	mov	r0, r4
   18d28:	pop	{r4, r5, fp, lr}
   18d2c:	b	1164c <free@plt>
   18d30:	ldr	r0, [pc, #40]	; 18d60 <sprintf@plt+0x74d4>
   18d34:	ldr	r1, [pc, #40]	; 18d64 <sprintf@plt+0x74d8>
   18d38:	ldr	r3, [pc, #40]	; 18d68 <sprintf@plt+0x74dc>
   18d3c:	mov	r2, #236	; 0xec
   18d40:	add	r0, pc, r0
   18d44:	add	r1, pc, r1
   18d48:	add	r3, pc, r3
   18d4c:	bl	11610 <__assert_fail@plt>
   18d50:	andeq	r1, r1, r8, lsr r5
   18d54:	andeq	r6, r1, r0, asr #10
   18d58:	muleq	r1, ip, r3
   18d5c:	andeq	r6, r1, r8, ror r3
   18d60:	andeq	r0, r0, sp, lsl #31
   18d64:	andeq	r0, r0, r2, lsl #11
   18d68:	muleq	r0, sl, r5
   18d6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d70:	mov	r7, r0
   18d74:	ldr	r6, [pc, #72]	; 18dc4 <sprintf@plt+0x7538>
   18d78:	ldr	r5, [pc, #72]	; 18dc8 <sprintf@plt+0x753c>
   18d7c:	add	r6, pc, r6
   18d80:	add	r5, pc, r5
   18d84:	sub	r6, r6, r5
   18d88:	mov	r8, r1
   18d8c:	mov	r9, r2
   18d90:	bl	11488 <sigemptyset@plt-0x20>
   18d94:	asrs	r6, r6, #2
   18d98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d9c:	mov	r4, #0
   18da0:	add	r4, r4, #1
   18da4:	ldr	r3, [r5], #4
   18da8:	mov	r2, r9
   18dac:	mov	r1, r8
   18db0:	mov	r0, r7
   18db4:	blx	r3
   18db8:	cmp	r6, r4
   18dbc:	bne	18da0 <sprintf@plt+0x7514>
   18dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18dc4:	andeq	r1, r1, r0, asr r1
   18dc8:	andeq	r1, r1, r8, asr #2
   18dcc:	bx	lr

Disassembly of section .fini:

00018dd0 <.fini>:
   18dd0:	push	{r3, lr}
   18dd4:	pop	{r3, pc}
