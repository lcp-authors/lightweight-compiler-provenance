
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	1118c <__assert_fail@plt+0x48>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <calloc@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <calloc@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	r6, r1, r4, asr r1

00010eb0 <calloc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <fputs_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <raise@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <strcmp@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <fflush@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <free@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <execvp@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <mbsinit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <dcgettext@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <realloc@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <textdomain@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <iswprint@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <readlink@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <fwrite@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <lseek64@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <__ctype_get_mb_cur_max@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <__fpending@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <ferror_unlocked@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <mbrtowc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <error@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <__asprintf_chk@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <getenv@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <malloc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <__libc_start_main@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <__freading@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <__gmon_start__@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <getopt_long@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <__ctype_b_loc@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <strlen@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <strchr@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <__errno_location@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__cxa_atexit@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <memset@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <__printf_chk@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <fileno@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <strtoumax@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__fprintf_chk@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #20]!

0001109c <access@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <fclose@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <fseeko64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <strtok@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <setlocale@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <putenv@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <toupper@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <strrchr@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <nl_langinfo@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

00011108 <bindtextdomain@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #4036]!	; 0xfc4

00011114 <__xstat64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011120 <strncmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #4020]!	; 0xfb4

0001112c <abort@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #4012]!	; 0xfac

00011138 <__mempcpy_chk@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #4004]!	; 0xfa4

00011144 <__assert_fail@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3996]!	; 0xf9c

Disassembly of section .text:

00011150 <.text>:
   11150:	mov	fp, #0
   11154:	mov	lr, #0
   11158:	pop	{r1}		; (ldr r1, [sp], #4)
   1115c:	mov	r2, sp
   11160:	push	{r2}		; (str r2, [sp, #-4]!)
   11164:	push	{r0}		; (str r0, [sp, #-4]!)
   11168:	ldr	ip, [pc, #16]	; 11180 <__assert_fail@plt+0x3c>
   1116c:	push	{ip}		; (str ip, [sp, #-4]!)
   11170:	ldr	r0, [pc, #12]	; 11184 <__assert_fail@plt+0x40>
   11174:	ldr	r3, [pc, #12]	; 11188 <__assert_fail@plt+0x44>
   11178:	bl	10fe8 <__libc_start_main@plt>
   1117c:	bl	1112c <abort@plt>
   11180:	andeq	r5, r1, r4, ror r7
   11184:	andeq	r1, r1, r0, ror r5
   11188:	andeq	r5, r1, r4, lsl r7
   1118c:	ldr	r3, [pc, #20]	; 111a8 <__assert_fail@plt+0x64>
   11190:	ldr	r2, [pc, #20]	; 111ac <__assert_fail@plt+0x68>
   11194:	add	r3, pc, r3
   11198:	ldr	r2, [r3, r2]
   1119c:	cmp	r2, #0
   111a0:	bxeq	lr
   111a4:	b	11000 <__gmon_start__@plt>
   111a8:	andeq	r5, r1, r4, ror #28
   111ac:	andeq	r0, r0, ip, ror #1
   111b0:	ldr	r0, [pc, #24]	; 111d0 <__assert_fail@plt+0x8c>
   111b4:	ldr	r3, [pc, #24]	; 111d4 <__assert_fail@plt+0x90>
   111b8:	cmp	r3, r0
   111bc:	bxeq	lr
   111c0:	ldr	r3, [pc, #16]	; 111d8 <__assert_fail@plt+0x94>
   111c4:	cmp	r3, #0
   111c8:	bxeq	lr
   111cc:	bx	r3
   111d0:	andeq	r7, r2, r0, asr #2
   111d4:	andeq	r7, r2, r0, asr #2
   111d8:	andeq	r0, r0, r0
   111dc:	ldr	r0, [pc, #36]	; 11208 <__assert_fail@plt+0xc4>
   111e0:	ldr	r1, [pc, #36]	; 1120c <__assert_fail@plt+0xc8>
   111e4:	sub	r1, r1, r0
   111e8:	asr	r1, r1, #2
   111ec:	add	r1, r1, r1, lsr #31
   111f0:	asrs	r1, r1, #1
   111f4:	bxeq	lr
   111f8:	ldr	r3, [pc, #16]	; 11210 <__assert_fail@plt+0xcc>
   111fc:	cmp	r3, #0
   11200:	bxeq	lr
   11204:	bx	r3
   11208:	andeq	r7, r2, r0, asr #2
   1120c:	andeq	r7, r2, r0, asr #2
   11210:	andeq	r0, r0, r0
   11214:	push	{r4, lr}
   11218:	ldr	r4, [pc, #24]	; 11238 <__assert_fail@plt+0xf4>
   1121c:	ldrb	r3, [r4]
   11220:	cmp	r3, #0
   11224:	popne	{r4, pc}
   11228:	bl	111b0 <__assert_fail@plt+0x6c>
   1122c:	mov	r3, #1
   11230:	strb	r3, [r4]
   11234:	pop	{r4, pc}
   11238:	andeq	r7, r2, ip, asr r1
   1123c:	b	111dc <__assert_fail@plt+0x98>
   11240:	push	{fp, lr}
   11244:	mov	fp, sp
   11248:	mov	r4, r0
   1124c:	cmp	r0, #0
   11250:	bne	11378 <__assert_fail@plt+0x234>
   11254:	movw	r1, #22483	; 0x57d3
   11258:	movt	r1, #1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	bl	10f34 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	movw	r0, #29072	; 0x7190
   11270:	movt	r0, #2
   11274:	ldr	r2, [r0]
   11278:	mov	r0, #1
   1127c:	bl	1106c <__printf_chk@plt>
   11280:	movw	r1, #22512	; 0x57f0
   11284:	movt	r1, #1
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	bl	10f34 <dcgettext@plt>
   11294:	movw	r5, #29012	; 0x7154
   11298:	movt	r5, #2
   1129c:	ldr	r1, [r5]
   112a0:	bl	10ebc <fputs_unlocked@plt>
   112a4:	bl	113bc <__assert_fail@plt+0x278>
   112a8:	movw	r1, #22587	; 0x583b
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10f34 <dcgettext@plt>
   112bc:	ldr	r1, [r5]
   112c0:	bl	10ebc <fputs_unlocked@plt>
   112c4:	movw	r1, #22769	; 0x58f1
   112c8:	movt	r1, #1
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	bl	10f34 <dcgettext@plt>
   112d8:	ldr	r1, [r5]
   112dc:	bl	10ebc <fputs_unlocked@plt>
   112e0:	movw	r1, #22814	; 0x591e
   112e4:	movt	r1, #1
   112e8:	mov	r0, #0
   112ec:	mov	r2, #5
   112f0:	bl	10f34 <dcgettext@plt>
   112f4:	ldr	r1, [r5]
   112f8:	bl	10ebc <fputs_unlocked@plt>
   112fc:	movw	r1, #22868	; 0x5954
   11300:	movt	r1, #1
   11304:	mov	r0, #0
   11308:	mov	r2, #5
   1130c:	bl	10f34 <dcgettext@plt>
   11310:	ldr	r1, [r5]
   11314:	bl	10ebc <fputs_unlocked@plt>
   11318:	movw	r1, #22977	; 0x59c1
   1131c:	movt	r1, #1
   11320:	mov	r0, #0
   11324:	mov	r2, #5
   11328:	bl	10f34 <dcgettext@plt>
   1132c:	ldr	r1, [r5]
   11330:	bl	10ebc <fputs_unlocked@plt>
   11334:	movw	r1, #23039	; 0x59ff
   11338:	movt	r1, #1
   1133c:	mov	r0, #0
   11340:	mov	r2, #5
   11344:	bl	10f34 <dcgettext@plt>
   11348:	ldr	r1, [r5]
   1134c:	bl	10ebc <fputs_unlocked@plt>
   11350:	movw	r1, #23351	; 0x5b37
   11354:	movt	r1, #1
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	bl	10f34 <dcgettext@plt>
   11364:	ldr	r1, [r5]
   11368:	bl	10ebc <fputs_unlocked@plt>
   1136c:	bl	113ec <__assert_fail@plt+0x2a8>
   11370:	mov	r0, r4
   11374:	bl	11024 <exit@plt>
   11378:	movw	r0, #29008	; 0x7150
   1137c:	movt	r0, #2
   11380:	ldr	r5, [r0]
   11384:	movw	r1, #22444	; 0x57ac
   11388:	movt	r1, #1
   1138c:	mov	r0, #0
   11390:	mov	r2, #5
   11394:	bl	10f34 <dcgettext@plt>
   11398:	mov	r2, r0
   1139c:	movw	r0, #29072	; 0x7190
   113a0:	movt	r0, #2
   113a4:	ldr	r3, [r0]
   113a8:	mov	r0, r5
   113ac:	mov	r1, #1
   113b0:	bl	11090 <__fprintf_chk@plt>
   113b4:	mov	r0, r4
   113b8:	bl	11024 <exit@plt>
   113bc:	push	{fp, lr}
   113c0:	mov	fp, sp
   113c4:	movw	r1, #23939	; 0x5d83
   113c8:	movt	r1, #1
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	bl	10f34 <dcgettext@plt>
   113d8:	movw	r1, #29012	; 0x7154
   113dc:	movt	r1, #2
   113e0:	ldr	r1, [r1]
   113e4:	pop	{fp, lr}
   113e8:	b	10ebc <fputs_unlocked@plt>
   113ec:	push	{r4, r5, fp, lr}
   113f0:	add	fp, sp, #8
   113f4:	sub	sp, sp, #56	; 0x38
   113f8:	movw	r0, #24640	; 0x6040
   113fc:	movt	r0, #1
   11400:	add	r1, r0, #32
   11404:	mov	r5, sp
   11408:	mov	r2, #48	; 0x30
   1140c:	vld1.64	{d16-d17}, [r1]
   11410:	add	r1, r5, #32
   11414:	add	r3, r0, #16
   11418:	vld1.64	{d18-d19}, [r0], r2
   1141c:	vld1.64	{d20-d21}, [r3]
   11420:	vldr	d22, [r0]
   11424:	vst1.64	{d16-d17}, [r1]
   11428:	add	r0, r5, #16
   1142c:	vst1.64	{d20-d21}, [r0]
   11430:	mov	r0, r5
   11434:	vst1.64	{d18-d19}, [r0], r2
   11438:	vstr	d22, [r0]
   1143c:	ldr	r1, [sp]
   11440:	cmp	r1, #0
   11444:	beq	1146c <__assert_fail@plt+0x328>
   11448:	mov	r5, sp
   1144c:	movw	r4, #23618	; 0x5c42
   11450:	movt	r4, #1
   11454:	mov	r0, r4
   11458:	bl	10ed4 <strcmp@plt>
   1145c:	cmp	r0, #0
   11460:	ldrne	r1, [r5, #8]!
   11464:	cmpne	r1, #0
   11468:	bne	11454 <__assert_fail@plt+0x310>
   1146c:	ldr	r4, [r5, #4]
   11470:	movw	r1, #24109	; 0x5e2d
   11474:	movt	r1, #1
   11478:	mov	r0, #0
   1147c:	mov	r2, #5
   11480:	bl	10f34 <dcgettext@plt>
   11484:	mov	r1, r0
   11488:	movw	r2, #23804	; 0x5cfc
   1148c:	movt	r2, #1
   11490:	movw	r3, #24132	; 0x5e44
   11494:	movt	r3, #1
   11498:	mov	r0, #1
   1149c:	bl	1106c <__printf_chk@plt>
   114a0:	movw	r5, #23618	; 0x5c42
   114a4:	movt	r5, #1
   114a8:	cmp	r4, #0
   114ac:	moveq	r4, r5
   114b0:	mov	r0, #5
   114b4:	mov	r1, #0
   114b8:	bl	110cc <setlocale@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	11500 <__assert_fail@plt+0x3bc>
   114c4:	movw	r1, #24172	; 0x5e6c
   114c8:	movt	r1, #1
   114cc:	mov	r2, #3
   114d0:	bl	11120 <strncmp@plt>
   114d4:	cmp	r0, #0
   114d8:	beq	11500 <__assert_fail@plt+0x3bc>
   114dc:	movw	r1, #24176	; 0x5e70
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	mov	r2, #5
   114ec:	bl	10f34 <dcgettext@plt>
   114f0:	movw	r1, #29012	; 0x7154
   114f4:	movt	r1, #2
   114f8:	ldr	r1, [r1]
   114fc:	bl	10ebc <fputs_unlocked@plt>
   11500:	movw	r1, #24247	; 0x5eb7
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	bl	10f34 <dcgettext@plt>
   11514:	mov	r1, r0
   11518:	movw	r2, #24132	; 0x5e44
   1151c:	movt	r2, #1
   11520:	mov	r0, #1
   11524:	mov	r3, r5
   11528:	bl	1106c <__printf_chk@plt>
   1152c:	movw	r1, #24274	; 0x5ed2
   11530:	movt	r1, #1
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	bl	10f34 <dcgettext@plt>
   11540:	mov	r1, r0
   11544:	movw	r0, #24042	; 0x5dea
   11548:	movt	r0, #1
   1154c:	movw	r3, #24324	; 0x5f04
   11550:	movt	r3, #1
   11554:	cmp	r4, r5
   11558:	moveq	r3, r0
   1155c:	mov	r0, #1
   11560:	mov	r2, r4
   11564:	bl	1106c <__printf_chk@plt>
   11568:	sub	sp, fp, #8
   1156c:	pop	{r4, r5, fp, pc}
   11570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11574:	add	fp, sp, #28
   11578:	sub	sp, sp, #12
   1157c:	mov	r4, r1
   11580:	mov	r5, r0
   11584:	ldr	r0, [r1]
   11588:	bl	12338 <__assert_fail@plt+0x11f4>
   1158c:	movw	r1, #24324	; 0x5f04
   11590:	movt	r1, #1
   11594:	mov	r0, #6
   11598:	bl	110cc <setlocale@plt>
   1159c:	movw	r6, #23808	; 0x5d00
   115a0:	movt	r6, #1
   115a4:	movw	r1, #23625	; 0x5c49
   115a8:	movt	r1, #1
   115ac:	mov	r0, r6
   115b0:	bl	11108 <bindtextdomain@plt>
   115b4:	mov	r0, r6
   115b8:	bl	10f4c <textdomain@plt>
   115bc:	bl	11880 <__assert_fail@plt+0x73c>
   115c0:	movw	r0, #8304	; 0x2070
   115c4:	movt	r0, #1
   115c8:	bl	15778 <__assert_fail@plt+0x4634>
   115cc:	movw	sl, #24544	; 0x5fe0
   115d0:	movt	sl, #1
   115d4:	movw	r9, #29016	; 0x7158
   115d8:	movt	r9, #2
   115dc:	mov	r0, #0
   115e0:	str	r0, [sp]
   115e4:	mov	r0, r5
   115e8:	mov	r1, r4
   115ec:	movw	r2, #23649	; 0x5c61
   115f0:	movt	r2, #1
   115f4:	mov	r3, sl
   115f8:	bl	1100c <getopt_long@plt>
   115fc:	mov	r6, r0
   11600:	cmp	r0, #100	; 0x64
   11604:	ble	116ec <__assert_fail@plt+0x5a8>
   11608:	sub	r0, r6, #101	; 0x65
   1160c:	cmp	r0, #10
   11610:	bhi	11814 <__assert_fail@plt+0x6d0>
   11614:	mov	r1, #1
   11618:	movw	r2, #1041	; 0x411
   1161c:	tst	r2, r1, lsl r0
   11620:	beq	11814 <__assert_fail@plt+0x6d0>
   11624:	mov	r0, r6
   11628:	bl	11894 <__assert_fail@plt+0x750>
   1162c:	cmp	r0, #3
   11630:	bcs	1181c <__assert_fail@plt+0x6d8>
   11634:	add	r0, r0, r0, lsl #1
   11638:	movw	r1, #29024	; 0x7160
   1163c:	movt	r1, #2
   11640:	add	r7, r1, r0, lsl #2
   11644:	str	r6, [r7, #4]
   11648:	ldr	r0, [r9]
   1164c:	ldrb	r0, [r0]
   11650:	b	11660 <__assert_fail@plt+0x51c>
   11654:	add	r0, r8, #1
   11658:	str	r0, [r9]
   1165c:	ldrb	r0, [r8, #1]
   11660:	bl	11fb8 <__assert_fail@plt+0xe74>
   11664:	ldr	r8, [r9]
   11668:	cmp	r0, #0
   1166c:	bne	11654 <__assert_fail@plt+0x510>
   11670:	str	r8, [r7, #8]
   11674:	cmp	r6, #105	; 0x69
   11678:	ldrbeq	r0, [r8]
   1167c:	cmpeq	r0, #76	; 0x4c
   11680:	beq	1183c <__assert_fail@plt+0x6f8>
   11684:	mov	r0, r8
   11688:	movw	r1, #24367	; 0x5f2f
   1168c:	movt	r1, #1
   11690:	bl	10ed4 <strcmp@plt>
   11694:	cmp	r0, #0
   11698:	beq	115dc <__assert_fail@plt+0x498>
   1169c:	mov	r0, r8
   116a0:	mov	r1, r7
   116a4:	bl	118c8 <__assert_fail@plt+0x784>
   116a8:	cmn	r0, #1
   116ac:	bne	115dc <__assert_fail@plt+0x498>
   116b0:	bl	11048 <__errno_location@plt>
   116b4:	ldr	r4, [r0]
   116b8:	movw	r1, #23788	; 0x5cec
   116bc:	movt	r1, #1
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	bl	10f34 <dcgettext@plt>
   116cc:	mov	r5, r0
   116d0:	ldr	r0, [r9]
   116d4:	bl	13b70 <__assert_fail@plt+0x2a2c>
   116d8:	mov	r3, r0
   116dc:	mov	r0, #125	; 0x7d
   116e0:	mov	r1, r4
   116e4:	mov	r2, r5
   116e8:	bl	10fb8 <error@plt>
   116ec:	cmn	r6, #1
   116f0:	bne	117b4 <__assert_fail@plt+0x670>
   116f4:	movw	r0, #29000	; 0x7148
   116f8:	movt	r0, #2
   116fc:	ldr	r6, [r0]
   11700:	cmp	r6, r5
   11704:	bge	11848 <__assert_fail@plt+0x704>
   11708:	bl	11960 <__assert_fail@plt+0x81c>
   1170c:	cmp	r0, #0
   11710:	beq	11854 <__assert_fail@plt+0x710>
   11714:	add	r4, r4, r6, lsl #2
   11718:	movw	r0, #29072	; 0x7190
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	bl	11a70 <__assert_fail@plt+0x92c>
   11728:	movw	r5, #29060	; 0x7184
   1172c:	movt	r5, #2
   11730:	ldr	r0, [r5]
   11734:	cmp	r0, #0
   11738:	bne	1174c <__assert_fail@plt+0x608>
   1173c:	movw	r0, #23889	; 0x5d51
   11740:	movt	r0, #1
   11744:	bl	147d8 <__assert_fail@plt+0x3694>
   11748:	str	r0, [r5]
   1174c:	bl	11b78 <__assert_fail@plt+0xa34>
   11750:	ldr	r0, [r5]
   11754:	bl	12310 <__assert_fail@plt+0x11cc>
   11758:	ldr	r0, [r4]
   1175c:	mov	r1, r4
   11760:	bl	10f10 <execvp@plt>
   11764:	bl	11048 <__errno_location@plt>
   11768:	ldr	r5, [r0]
   1176c:	movw	r1, #23914	; 0x5d6a
   11770:	movt	r1, #1
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	bl	10f34 <dcgettext@plt>
   11780:	mov	r6, r0
   11784:	ldr	r0, [r4]
   11788:	bl	13b70 <__assert_fail@plt+0x2a2c>
   1178c:	mov	r3, r0
   11790:	mov	r0, #0
   11794:	mov	r1, r5
   11798:	mov	r2, r6
   1179c:	bl	10fb8 <error@plt>
   117a0:	mov	r0, #126	; 0x7e
   117a4:	cmp	r5, #2
   117a8:	movweq	r0, #127	; 0x7f
   117ac:	sub	sp, fp, #28
   117b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117b4:	cmn	r6, #3
   117b8:	bne	11804 <__assert_fail@plt+0x6c0>
   117bc:	movw	r0, #28920	; 0x70f8
   117c0:	movt	r0, #2
   117c4:	ldr	r3, [r0]
   117c8:	movw	r0, #29012	; 0x7154
   117cc:	movt	r0, #2
   117d0:	ldr	r0, [r0]
   117d4:	mov	r1, #0
   117d8:	movw	r2, #23818	; 0x5d0a
   117dc:	movt	r2, #1
   117e0:	str	r2, [sp]
   117e4:	str	r1, [sp, #4]
   117e8:	movw	r1, #23618	; 0x5c42
   117ec:	movt	r1, #1
   117f0:	movw	r2, #23804	; 0x5cfc
   117f4:	movt	r2, #1
   117f8:	bl	14340 <__assert_fail@plt+0x31fc>
   117fc:	mov	r0, #0
   11800:	bl	11024 <exit@plt>
   11804:	cmn	r6, #2
   11808:	bne	11814 <__assert_fail@plt+0x6d0>
   1180c:	mov	r0, #0
   11810:	bl	11240 <__assert_fail@plt+0xfc>
   11814:	mov	r0, #125	; 0x7d
   11818:	bl	11240 <__assert_fail@plt+0xfc>
   1181c:	movw	r0, #23657	; 0x5c69
   11820:	movt	r0, #1
   11824:	movw	r1, #23716	; 0x5ca4
   11828:	movt	r1, #1
   1182c:	movw	r3, #23729	; 0x5cb1
   11830:	movt	r3, #1
   11834:	mov	r2, #336	; 0x150
   11838:	bl	11144 <__assert_fail@plt>
   1183c:	movw	r1, #23752	; 0x5cc8
   11840:	movt	r1, #1
   11844:	b	1185c <__assert_fail@plt+0x718>
   11848:	movw	r1, #23832	; 0x5d18
   1184c:	movt	r1, #1
   11850:	b	1185c <__assert_fail@plt+0x718>
   11854:	movw	r1, #23848	; 0x5d28
   11858:	movt	r1, #1
   1185c:	mov	r0, #0
   11860:	mov	r2, #5
   11864:	bl	10f34 <dcgettext@plt>
   11868:	mov	r2, r0
   1186c:	mov	r0, #0
   11870:	mov	r1, #0
   11874:	bl	10fb8 <error@plt>
   11878:	mov	r0, #125	; 0x7d
   1187c:	bl	11240 <__assert_fail@plt+0xfc>
   11880:	movw	r0, #28924	; 0x70fc
   11884:	movt	r0, #2
   11888:	mov	r1, #125	; 0x7d
   1188c:	str	r1, [r0]
   11890:	bx	lr
   11894:	cmp	r0, #111	; 0x6f
   11898:	beq	118c0 <__assert_fail@plt+0x77c>
   1189c:	mov	r1, r0
   118a0:	cmp	r0, #105	; 0x69
   118a4:	moveq	r0, #0
   118a8:	bxeq	lr
   118ac:	mvn	r0, #0
   118b0:	cmp	r1, #101	; 0x65
   118b4:	moveq	r0, #2
   118b8:	bxeq	lr
   118bc:	bx	lr
   118c0:	mov	r0, #1
   118c4:	bx	lr
   118c8:	push	{r4, r5, fp, lr}
   118cc:	add	fp, sp, #8
   118d0:	sub	sp, sp, #16
   118d4:	mov	r4, r1
   118d8:	movw	r1, #24351	; 0x5f1f
   118dc:	movt	r1, #1
   118e0:	str	r1, [sp]
   118e4:	add	r3, sp, #8
   118e8:	mov	r1, #0
   118ec:	mov	r2, #10
   118f0:	bl	14870 <__assert_fail@plt+0x372c>
   118f4:	ldr	r1, [sp, #12]
   118f8:	cmp	r1, #0
   118fc:	mov	r1, r0
   11900:	movwne	r1, #1
   11904:	cmp	r0, #0
   11908:	movne	r1, r0
   1190c:	cmp	r1, #1
   11910:	beq	1193c <__assert_fail@plt+0x7f8>
   11914:	cmp	r1, #0
   11918:	bne	11944 <__assert_fail@plt+0x800>
   1191c:	ldr	r5, [sp, #8]
   11920:	bl	11048 <__errno_location@plt>
   11924:	mov	r1, r0
   11928:	mov	r0, #0
   1192c:	str	r0, [r1]
   11930:	str	r5, [r4]
   11934:	sub	sp, fp, #8
   11938:	pop	{r4, r5, fp, pc}
   1193c:	mov	r4, #75	; 0x4b
   11940:	b	1194c <__assert_fail@plt+0x808>
   11944:	bl	11048 <__errno_location@plt>
   11948:	ldr	r4, [r0]
   1194c:	bl	11048 <__errno_location@plt>
   11950:	str	r4, [r0]
   11954:	mvn	r0, #0
   11958:	sub	sp, fp, #8
   1195c:	pop	{r4, r5, fp, pc}
   11960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11964:	add	fp, sp, #28
   11968:	sub	sp, sp, #20
   1196c:	movw	r0, #29024	; 0x7160
   11970:	movt	r0, #2
   11974:	add	r5, r0, #4
   11978:	add	r4, sp, #16
   1197c:	movw	r8, #24362	; 0x5f2a
   11980:	movt	r8, #1
   11984:	movw	r6, #24369	; 0x5f31
   11988:	movt	r6, #1
   1198c:	movw	sl, #24378	; 0x5f3a
   11990:	movt	sl, #1
   11994:	mov	r0, #0
   11998:	mov	r7, #0
   1199c:	ldr	r1, [r5, #4]
   119a0:	cmp	r1, #0
   119a4:	beq	11a14 <__assert_fail@plt+0x8d0>
   119a8:	ldrb	r9, [r1]
   119ac:	ldr	r0, [r5]
   119b0:	bl	110e4 <toupper@plt>
   119b4:	cmp	r9, #76	; 0x4c
   119b8:	bne	119d0 <__assert_fail@plt+0x88c>
   119bc:	str	r0, [sp]
   119c0:	mov	r0, r4
   119c4:	mov	r1, #1
   119c8:	mov	r2, r8
   119cc:	b	119f0 <__assert_fail@plt+0x8ac>
   119d0:	ldr	r1, [r5, #-4]
   119d4:	str	r1, [sp, #8]
   119d8:	mov	r1, #0
   119dc:	str	r1, [sp, #12]
   119e0:	str	r0, [sp]
   119e4:	mov	r0, r4
   119e8:	mov	r1, #1
   119ec:	mov	r2, sl
   119f0:	mov	r3, r6
   119f4:	bl	10fc4 <__asprintf_chk@plt>
   119f8:	cmn	r0, #1
   119fc:	ble	11a30 <__assert_fail@plt+0x8ec>
   11a00:	ldr	r0, [sp, #16]
   11a04:	bl	110d8 <putenv@plt>
   11a08:	cmp	r0, #0
   11a0c:	bne	11a34 <__assert_fail@plt+0x8f0>
   11a10:	mov	r0, #1
   11a14:	add	r5, r5, #12
   11a18:	add	r7, r7, #1
   11a1c:	cmp	r7, #3
   11a20:	bcc	1199c <__assert_fail@plt+0x858>
   11a24:	and	r0, r0, #1
   11a28:	sub	sp, fp, #28
   11a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a30:	bl	147f8 <__assert_fail@plt+0x36b4>
   11a34:	bl	11048 <__errno_location@plt>
   11a38:	ldr	r4, [r0]
   11a3c:	movw	r1, #24388	; 0x5f44
   11a40:	movt	r1, #1
   11a44:	mov	r0, #0
   11a48:	mov	r2, #5
   11a4c:	bl	10f34 <dcgettext@plt>
   11a50:	mov	r5, r0
   11a54:	ldr	r0, [sp, #16]
   11a58:	bl	13b70 <__assert_fail@plt+0x2a2c>
   11a5c:	mov	r3, r0
   11a60:	mov	r0, #125	; 0x7d
   11a64:	mov	r1, r4
   11a68:	mov	r2, r5
   11a6c:	bl	10fb8 <error@plt>
   11a70:	push	{r4, r5, r6, r7, fp, lr}
   11a74:	add	fp, sp, #16
   11a78:	mov	r5, r0
   11a7c:	mov	r1, #47	; 0x2f
   11a80:	bl	1103c <strchr@plt>
   11a84:	cmp	r0, #0
   11a88:	beq	11aa4 <__assert_fail@plt+0x960>
   11a8c:	mov	r0, r5
   11a90:	bl	12158 <__assert_fail@plt+0x1014>
   11a94:	movw	r1, #29060	; 0x7184
   11a98:	movt	r1, #2
   11a9c:	str	r0, [r1]
   11aa0:	pop	{r4, r5, r6, r7, fp, pc}
   11aa4:	movw	r0, #24429	; 0x5f6d
   11aa8:	movt	r0, #1
   11aac:	bl	1483c <__assert_fail@plt+0x36f8>
   11ab0:	cmp	r0, #0
   11ab4:	beq	11ad8 <__assert_fail@plt+0x994>
   11ab8:	mov	r4, r0
   11abc:	bl	12158 <__assert_fail@plt+0x1014>
   11ac0:	movw	r1, #29060	; 0x7184
   11ac4:	movt	r1, #2
   11ac8:	str	r0, [r1]
   11acc:	mov	r0, r4
   11ad0:	pop	{r4, r5, r6, r7, fp, lr}
   11ad4:	b	12310 <__assert_fail@plt+0x11cc>
   11ad8:	movw	r0, #24444	; 0x5f7c
   11adc:	movt	r0, #1
   11ae0:	bl	10fd0 <getenv@plt>
   11ae4:	cmp	r0, #0
   11ae8:	beq	11b50 <__assert_fail@plt+0xa0c>
   11aec:	bl	147d8 <__assert_fail@plt+0x3694>
   11af0:	mov	r4, r0
   11af4:	movw	r1, #23655	; 0x5c67
   11af8:	movt	r1, #1
   11afc:	bl	110c0 <strtok@plt>
   11b00:	cmp	r0, #0
   11b04:	beq	11acc <__assert_fail@plt+0x988>
   11b08:	movw	r6, #23655	; 0x5c67
   11b0c:	movt	r6, #1
   11b10:	mov	r1, r5
   11b14:	mov	r2, #0
   11b18:	bl	12218 <__assert_fail@plt+0x10d4>
   11b1c:	mov	r7, r0
   11b20:	mov	r1, #1
   11b24:	bl	1109c <access@plt>
   11b28:	cmp	r0, #0
   11b2c:	beq	11b58 <__assert_fail@plt+0xa14>
   11b30:	mov	r0, r7
   11b34:	bl	12310 <__assert_fail@plt+0x11cc>
   11b38:	mov	r0, #0
   11b3c:	mov	r1, r6
   11b40:	bl	110c0 <strtok@plt>
   11b44:	cmp	r0, #0
   11b48:	bne	11b10 <__assert_fail@plt+0x9cc>
   11b4c:	b	11acc <__assert_fail@plt+0x988>
   11b50:	mov	r4, #0
   11b54:	b	11acc <__assert_fail@plt+0x988>
   11b58:	mov	r0, r7
   11b5c:	bl	12158 <__assert_fail@plt+0x1014>
   11b60:	movw	r1, #29060	; 0x7184
   11b64:	movt	r1, #2
   11b68:	str	r0, [r1]
   11b6c:	mov	r0, r7
   11b70:	bl	12310 <__assert_fail@plt+0x11cc>
   11b74:	b	11acc <__assert_fail@plt+0x988>
   11b78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b7c:	add	fp, sp, #24
   11b80:	sub	sp, sp, #128	; 0x80
   11b84:	movw	r0, #24449	; 0x5f81
   11b88:	movt	r0, #1
   11b8c:	bl	10fd0 <getenv@plt>
   11b90:	mov	r8, r0
   11b94:	movw	r0, #24460	; 0x5f8c
   11b98:	movt	r0, #1
   11b9c:	str	r0, [fp, #-32]	; 0xffffffe0
   11ba0:	mov	r0, #0
   11ba4:	str	r0, [fp, #-28]	; 0xffffffe4
   11ba8:	movw	r0, #29060	; 0x7184
   11bac:	movt	r0, #2
   11bb0:	ldr	r0, [r0]
   11bb4:	str	r0, [fp, #-36]	; 0xffffffdc
   11bb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11bbc:	ldrb	r0, [r3]
   11bc0:	cmp	r0, #0
   11bc4:	beq	11c3c <__assert_fail@plt+0xaf8>
   11bc8:	sub	r0, fp, #36	; 0x24
   11bcc:	add	r4, r0, #4
   11bd0:	movw	r9, #24489	; 0x5fa9
   11bd4:	movt	r9, #1
   11bd8:	sub	r5, fp, #40	; 0x28
   11bdc:	movw	r6, #24502	; 0x5fb6
   11be0:	movt	r6, #1
   11be4:	add	r7, sp, #8
   11be8:	str	r9, [sp]
   11bec:	mov	r0, r5
   11bf0:	mov	r1, #1
   11bf4:	mov	r2, r6
   11bf8:	bl	10fc4 <__asprintf_chk@plt>
   11bfc:	cmn	r0, #1
   11c00:	ble	11cf0 <__assert_fail@plt+0xbac>
   11c04:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c08:	mov	r1, r7
   11c0c:	bl	15790 <__assert_fail@plt+0x464c>
   11c10:	cmp	r0, #0
   11c14:	beq	11c4c <__assert_fail@plt+0xb08>
   11c18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c1c:	bl	12310 <__assert_fail@plt+0x11cc>
   11c20:	ldr	r0, [r4]
   11c24:	cmp	r0, #0
   11c28:	beq	11cf4 <__assert_fail@plt+0xbb0>
   11c2c:	ldr	r3, [r4], #4
   11c30:	ldrb	r0, [r3]
   11c34:	cmp	r0, #0
   11c38:	bne	11be8 <__assert_fail@plt+0xaa4>
   11c3c:	movw	r0, #24489	; 0x5fa9
   11c40:	movt	r0, #1
   11c44:	bl	147d8 <__assert_fail@plt+0x3694>
   11c48:	str	r0, [fp, #-40]	; 0xffffffd8
   11c4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c50:	cmp	r8, #0
   11c54:	beq	11c70 <__assert_fail@plt+0xb2c>
   11c58:	str	r8, [sp]
   11c5c:	str	r0, [sp, #4]
   11c60:	add	r0, sp, #8
   11c64:	movw	r2, #24526	; 0x5fce
   11c68:	movt	r2, #1
   11c6c:	b	11c80 <__assert_fail@plt+0xb3c>
   11c70:	str	r0, [sp]
   11c74:	add	r0, sp, #8
   11c78:	movw	r2, #24535	; 0x5fd7
   11c7c:	movt	r2, #1
   11c80:	movw	r3, #24449	; 0x5f81
   11c84:	movt	r3, #1
   11c88:	mov	r1, #1
   11c8c:	bl	10fc4 <__asprintf_chk@plt>
   11c90:	cmn	r0, #1
   11c94:	ble	11cf0 <__assert_fail@plt+0xbac>
   11c98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c9c:	bl	12310 <__assert_fail@plt+0x11cc>
   11ca0:	ldr	r0, [sp, #8]
   11ca4:	bl	110d8 <putenv@plt>
   11ca8:	cmp	r0, #0
   11cac:	subeq	sp, fp, #24
   11cb0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11cb4:	bl	11048 <__errno_location@plt>
   11cb8:	ldr	r4, [r0]
   11cbc:	movw	r1, #24388	; 0x5f44
   11cc0:	movt	r1, #1
   11cc4:	mov	r0, #0
   11cc8:	mov	r2, #5
   11ccc:	bl	10f34 <dcgettext@plt>
   11cd0:	mov	r5, r0
   11cd4:	ldr	r0, [sp, #8]
   11cd8:	bl	13b70 <__assert_fail@plt+0x2a2c>
   11cdc:	mov	r3, r0
   11ce0:	mov	r0, #125	; 0x7d
   11ce4:	mov	r1, r4
   11ce8:	mov	r2, r5
   11cec:	bl	10fb8 <error@plt>
   11cf0:	bl	147f8 <__assert_fail@plt+0x36b4>
   11cf4:	movw	r1, #24508	; 0x5fbc
   11cf8:	movt	r1, #1
   11cfc:	mov	r0, #0
   11d00:	mov	r2, #5
   11d04:	bl	10f34 <dcgettext@plt>
   11d08:	mov	r4, r0
   11d0c:	movw	r0, #24489	; 0x5fa9
   11d10:	movt	r0, #1
   11d14:	bl	13b70 <__assert_fail@plt+0x2a2c>
   11d18:	mov	r3, r0
   11d1c:	mov	r0, #125	; 0x7d
   11d20:	mov	r1, #0
   11d24:	mov	r2, r4
   11d28:	bl	10fb8 <error@plt>
   11d2c:	mov	r1, r0
   11d30:	sub	r2, r0, #65	; 0x41
   11d34:	mov	r0, #1
   11d38:	cmp	r2, #26
   11d3c:	subcs	r2, r1, #97	; 0x61
   11d40:	cmpcs	r2, #26
   11d44:	bcs	11d4c <__assert_fail@plt+0xc08>
   11d48:	bx	lr
   11d4c:	sub	r1, r1, #48	; 0x30
   11d50:	cmp	r1, #10
   11d54:	movcs	r0, #0
   11d58:	bx	lr
   11d5c:	mov	r1, r0
   11d60:	sub	r2, r0, #65	; 0x41
   11d64:	mov	r0, #1
   11d68:	cmp	r2, #26
   11d6c:	subcs	r1, r1, #97	; 0x61
   11d70:	cmpcs	r1, #26
   11d74:	movcs	r0, #0
   11d78:	bx	lr
   11d7c:	mov	r1, #0
   11d80:	cmp	r0, #128	; 0x80
   11d84:	movwcc	r1, #1
   11d88:	mov	r0, r1
   11d8c:	bx	lr
   11d90:	sub	r1, r0, #9
   11d94:	clz	r1, r1
   11d98:	lsr	r1, r1, #5
   11d9c:	sub	r0, r0, #32
   11da0:	clz	r0, r0
   11da4:	lsr	r0, r0, #5
   11da8:	orr	r0, r0, r1
   11dac:	bx	lr
   11db0:	mov	r1, r0
   11db4:	mov	r0, #1
   11db8:	cmp	r1, #32
   11dbc:	bxcc	lr
   11dc0:	cmp	r1, #127	; 0x7f
   11dc4:	movne	r0, #0
   11dc8:	bx	lr
   11dcc:	sub	r1, r0, #48	; 0x30
   11dd0:	mov	r0, #0
   11dd4:	cmp	r1, #10
   11dd8:	movwcc	r0, #1
   11ddc:	bx	lr
   11de0:	sub	r1, r0, #33	; 0x21
   11de4:	mov	r0, #0
   11de8:	cmp	r1, #94	; 0x5e
   11dec:	movwcc	r0, #1
   11df0:	bx	lr
   11df4:	sub	r1, r0, #97	; 0x61
   11df8:	mov	r0, #0
   11dfc:	cmp	r1, #26
   11e00:	movwcc	r0, #1
   11e04:	bx	lr
   11e08:	sub	r1, r0, #32
   11e0c:	mov	r0, #0
   11e10:	cmp	r1, #95	; 0x5f
   11e14:	movwcc	r0, #1
   11e18:	bx	lr
   11e1c:	sub	r1, r0, #33	; 0x21
   11e20:	cmp	r1, #93	; 0x5d
   11e24:	bhi	11fb0 <__assert_fail@plt+0xe6c>
   11e28:	mov	r0, #1
   11e2c:	add	r2, pc, #0
   11e30:	ldr	pc, [r2, r1, lsl #2]
   11e34:	andeq	r1, r1, ip, lsr #31
   11e38:	andeq	r1, r1, ip, lsr #31
   11e3c:	andeq	r1, r1, ip, lsr #31
   11e40:	andeq	r1, r1, ip, lsr #31
   11e44:	andeq	r1, r1, ip, lsr #31
   11e48:	andeq	r1, r1, ip, lsr #31
   11e4c:	andeq	r1, r1, ip, lsr #31
   11e50:	andeq	r1, r1, ip, lsr #31
   11e54:	andeq	r1, r1, ip, lsr #31
   11e58:	andeq	r1, r1, ip, lsr #31
   11e5c:	andeq	r1, r1, ip, lsr #31
   11e60:	andeq	r1, r1, ip, lsr #31
   11e64:	andeq	r1, r1, ip, lsr #31
   11e68:	andeq	r1, r1, ip, lsr #31
   11e6c:	andeq	r1, r1, ip, lsr #31
   11e70:			; <UNDEFINED> instruction: 0x00011fb0
   11e74:			; <UNDEFINED> instruction: 0x00011fb0
   11e78:			; <UNDEFINED> instruction: 0x00011fb0
   11e7c:			; <UNDEFINED> instruction: 0x00011fb0
   11e80:			; <UNDEFINED> instruction: 0x00011fb0
   11e84:			; <UNDEFINED> instruction: 0x00011fb0
   11e88:			; <UNDEFINED> instruction: 0x00011fb0
   11e8c:			; <UNDEFINED> instruction: 0x00011fb0
   11e90:			; <UNDEFINED> instruction: 0x00011fb0
   11e94:			; <UNDEFINED> instruction: 0x00011fb0
   11e98:	andeq	r1, r1, ip, lsr #31
   11e9c:	andeq	r1, r1, ip, lsr #31
   11ea0:	andeq	r1, r1, ip, lsr #31
   11ea4:	andeq	r1, r1, ip, lsr #31
   11ea8:	andeq	r1, r1, ip, lsr #31
   11eac:	andeq	r1, r1, ip, lsr #31
   11eb0:	andeq	r1, r1, ip, lsr #31
   11eb4:			; <UNDEFINED> instruction: 0x00011fb0
   11eb8:			; <UNDEFINED> instruction: 0x00011fb0
   11ebc:			; <UNDEFINED> instruction: 0x00011fb0
   11ec0:			; <UNDEFINED> instruction: 0x00011fb0
   11ec4:			; <UNDEFINED> instruction: 0x00011fb0
   11ec8:			; <UNDEFINED> instruction: 0x00011fb0
   11ecc:			; <UNDEFINED> instruction: 0x00011fb0
   11ed0:			; <UNDEFINED> instruction: 0x00011fb0
   11ed4:			; <UNDEFINED> instruction: 0x00011fb0
   11ed8:			; <UNDEFINED> instruction: 0x00011fb0
   11edc:			; <UNDEFINED> instruction: 0x00011fb0
   11ee0:			; <UNDEFINED> instruction: 0x00011fb0
   11ee4:			; <UNDEFINED> instruction: 0x00011fb0
   11ee8:			; <UNDEFINED> instruction: 0x00011fb0
   11eec:			; <UNDEFINED> instruction: 0x00011fb0
   11ef0:			; <UNDEFINED> instruction: 0x00011fb0
   11ef4:			; <UNDEFINED> instruction: 0x00011fb0
   11ef8:			; <UNDEFINED> instruction: 0x00011fb0
   11efc:			; <UNDEFINED> instruction: 0x00011fb0
   11f00:			; <UNDEFINED> instruction: 0x00011fb0
   11f04:			; <UNDEFINED> instruction: 0x00011fb0
   11f08:			; <UNDEFINED> instruction: 0x00011fb0
   11f0c:			; <UNDEFINED> instruction: 0x00011fb0
   11f10:			; <UNDEFINED> instruction: 0x00011fb0
   11f14:			; <UNDEFINED> instruction: 0x00011fb0
   11f18:			; <UNDEFINED> instruction: 0x00011fb0
   11f1c:	andeq	r1, r1, ip, lsr #31
   11f20:	andeq	r1, r1, ip, lsr #31
   11f24:	andeq	r1, r1, ip, lsr #31
   11f28:	andeq	r1, r1, ip, lsr #31
   11f2c:	andeq	r1, r1, ip, lsr #31
   11f30:	andeq	r1, r1, ip, lsr #31
   11f34:			; <UNDEFINED> instruction: 0x00011fb0
   11f38:			; <UNDEFINED> instruction: 0x00011fb0
   11f3c:			; <UNDEFINED> instruction: 0x00011fb0
   11f40:			; <UNDEFINED> instruction: 0x00011fb0
   11f44:			; <UNDEFINED> instruction: 0x00011fb0
   11f48:			; <UNDEFINED> instruction: 0x00011fb0
   11f4c:			; <UNDEFINED> instruction: 0x00011fb0
   11f50:			; <UNDEFINED> instruction: 0x00011fb0
   11f54:			; <UNDEFINED> instruction: 0x00011fb0
   11f58:			; <UNDEFINED> instruction: 0x00011fb0
   11f5c:			; <UNDEFINED> instruction: 0x00011fb0
   11f60:			; <UNDEFINED> instruction: 0x00011fb0
   11f64:			; <UNDEFINED> instruction: 0x00011fb0
   11f68:			; <UNDEFINED> instruction: 0x00011fb0
   11f6c:			; <UNDEFINED> instruction: 0x00011fb0
   11f70:			; <UNDEFINED> instruction: 0x00011fb0
   11f74:			; <UNDEFINED> instruction: 0x00011fb0
   11f78:			; <UNDEFINED> instruction: 0x00011fb0
   11f7c:			; <UNDEFINED> instruction: 0x00011fb0
   11f80:			; <UNDEFINED> instruction: 0x00011fb0
   11f84:			; <UNDEFINED> instruction: 0x00011fb0
   11f88:			; <UNDEFINED> instruction: 0x00011fb0
   11f8c:			; <UNDEFINED> instruction: 0x00011fb0
   11f90:			; <UNDEFINED> instruction: 0x00011fb0
   11f94:			; <UNDEFINED> instruction: 0x00011fb0
   11f98:			; <UNDEFINED> instruction: 0x00011fb0
   11f9c:	andeq	r1, r1, ip, lsr #31
   11fa0:	andeq	r1, r1, ip, lsr #31
   11fa4:	andeq	r1, r1, ip, lsr #31
   11fa8:	andeq	r1, r1, ip, lsr #31
   11fac:	bx	lr
   11fb0:	mov	r0, #0
   11fb4:	bx	lr
   11fb8:	sub	r0, r0, #9
   11fbc:	cmp	r0, #23
   11fc0:	movhi	r0, #0
   11fc4:	bxhi	lr
   11fc8:	bic	r0, r0, #-16777216	; 0xff000000
   11fcc:	movw	r1, #31
   11fd0:	movt	r1, #128	; 0x80
   11fd4:	mov	r2, #1
   11fd8:	and	r0, r2, r1, lsr r0
   11fdc:	bx	lr
   11fe0:	sub	r1, r0, #65	; 0x41
   11fe4:	mov	r0, #0
   11fe8:	cmp	r1, #26
   11fec:	movwcc	r0, #1
   11ff0:	bx	lr
   11ff4:	mov	r1, r0
   11ff8:	sub	r2, r0, #48	; 0x30
   11ffc:	mov	r0, #1
   12000:	cmp	r2, #22
   12004:	bhi	1201c <__assert_fail@plt+0xed8>
   12008:	mov	ip, #1
   1200c:	movw	r3, #1023	; 0x3ff
   12010:	movt	r3, #126	; 0x7e
   12014:	tst	r3, ip, lsl r2
   12018:	bxne	lr
   1201c:	sub	r1, r1, #97	; 0x61
   12020:	cmp	r1, #6
   12024:	movcs	r0, #0
   12028:	bxcs	lr
   1202c:	bx	lr
   12030:	sub	r1, r0, #65	; 0x41
   12034:	cmp	r1, #26
   12038:	addcc	r0, r0, #32
   1203c:	bx	lr
   12040:	sub	r1, r0, #97	; 0x61
   12044:	cmp	r1, #26
   12048:	subcc	r0, r0, #32
   1204c:	bx	lr
   12050:	movw	r1, #29064	; 0x7188
   12054:	movt	r1, #2
   12058:	str	r0, [r1]
   1205c:	bx	lr
   12060:	movw	r1, #29068	; 0x718c
   12064:	movt	r1, #2
   12068:	strb	r0, [r1]
   1206c:	bx	lr
   12070:	push	{r4, r5, r6, sl, fp, lr}
   12074:	add	fp, sp, #16
   12078:	sub	sp, sp, #8
   1207c:	movw	r0, #29012	; 0x7154
   12080:	movt	r0, #2
   12084:	ldr	r0, [r0]
   12088:	bl	1513c <__assert_fail@plt+0x3ff8>
   1208c:	cmp	r0, #0
   12090:	beq	120b8 <__assert_fail@plt+0xf74>
   12094:	movw	r0, #29068	; 0x718c
   12098:	movt	r0, #2
   1209c:	ldrb	r0, [r0]
   120a0:	cmp	r0, #0
   120a4:	beq	120d8 <__assert_fail@plt+0xf94>
   120a8:	bl	11048 <__errno_location@plt>
   120ac:	ldr	r0, [r0]
   120b0:	cmp	r0, #32
   120b4:	bne	120d8 <__assert_fail@plt+0xf94>
   120b8:	movw	r0, #29008	; 0x7150
   120bc:	movt	r0, #2
   120c0:	ldr	r0, [r0]
   120c4:	bl	1513c <__assert_fail@plt+0x3ff8>
   120c8:	cmp	r0, #0
   120cc:	subeq	sp, fp, #16
   120d0:	popeq	{r4, r5, r6, sl, fp, pc}
   120d4:	b	12148 <__assert_fail@plt+0x1004>
   120d8:	movw	r1, #24711	; 0x6087
   120dc:	movt	r1, #1
   120e0:	mov	r0, #0
   120e4:	mov	r2, #5
   120e8:	bl	10f34 <dcgettext@plt>
   120ec:	mov	r4, r0
   120f0:	movw	r0, #29064	; 0x7188
   120f4:	movt	r0, #2
   120f8:	ldr	r6, [r0]
   120fc:	bl	11048 <__errno_location@plt>
   12100:	ldr	r5, [r0]
   12104:	cmp	r6, #0
   12108:	bne	12124 <__assert_fail@plt+0xfe0>
   1210c:	movw	r2, #24727	; 0x6097
   12110:	movt	r2, #1
   12114:	mov	r0, #0
   12118:	mov	r1, r5
   1211c:	mov	r3, r4
   12120:	b	12144 <__assert_fail@plt+0x1000>
   12124:	mov	r0, r6
   12128:	bl	13a20 <__assert_fail@plt+0x28dc>
   1212c:	mov	r3, r0
   12130:	str	r4, [sp]
   12134:	movw	r2, #24723	; 0x6093
   12138:	movt	r2, #1
   1213c:	mov	r0, #0
   12140:	mov	r1, r5
   12144:	bl	10fb8 <error@plt>
   12148:	movw	r0, #28924	; 0x70fc
   1214c:	movt	r0, #2
   12150:	ldr	r0, [r0]
   12154:	bl	10ef8 <_exit@plt>
   12158:	push	{fp, lr}
   1215c:	mov	fp, sp
   12160:	bl	121b8 <__assert_fail@plt+0x1074>
   12164:	cmp	r0, #0
   12168:	popne	{fp, pc}
   1216c:	bl	147f8 <__assert_fail@plt+0x36b4>
   12170:	push	{r4, r5, r6, sl, fp, lr}
   12174:	add	fp, sp, #16
   12178:	mov	r4, r0
   1217c:	mov	r5, r0
   12180:	ldrb	r6, [r5], #-1
   12184:	bl	14edc <__assert_fail@plt+0x3d98>
   12188:	sub	r2, r0, r4
   1218c:	sub	r0, r6, #47	; 0x2f
   12190:	clz	r0, r0
   12194:	lsr	r1, r0, #5
   12198:	mov	r0, r2
   1219c:	cmp	r2, r1
   121a0:	popls	{r4, r5, r6, sl, fp, pc}
   121a4:	ldrb	r3, [r5, r0]
   121a8:	sub	r2, r0, #1
   121ac:	cmp	r3, #47	; 0x2f
   121b0:	beq	12198 <__assert_fail@plt+0x1054>
   121b4:	pop	{r4, r5, r6, sl, fp, pc}
   121b8:	push	{r4, r5, r6, sl, fp, lr}
   121bc:	add	fp, sp, #16
   121c0:	mov	r6, r0
   121c4:	bl	12170 <__assert_fail@plt+0x102c>
   121c8:	mov	r4, r0
   121cc:	cmp	r0, #0
   121d0:	addeq	r0, r0, #1
   121d4:	add	r0, r0, #1
   121d8:	bl	14df8 <__assert_fail@plt+0x3cb4>
   121dc:	mov	r5, r0
   121e0:	cmp	r0, #0
   121e4:	beq	12210 <__assert_fail@plt+0x10cc>
   121e8:	mov	r0, r5
   121ec:	mov	r1, r6
   121f0:	mov	r2, r4
   121f4:	bl	10f04 <memcpy@plt>
   121f8:	cmp	r4, #0
   121fc:	moveq	r0, #46	; 0x2e
   12200:	strbeq	r0, [r5, r4]
   12204:	moveq	r4, #1
   12208:	mov	r0, #0
   1220c:	strb	r0, [r5, r4]
   12210:	mov	r0, r5
   12214:	pop	{r4, r5, r6, sl, fp, pc}
   12218:	push	{fp, lr}
   1221c:	mov	fp, sp
   12220:	bl	12230 <__assert_fail@plt+0x10ec>
   12224:	cmp	r0, #0
   12228:	popne	{fp, pc}
   1222c:	bl	147f8 <__assert_fail@plt+0x36b4>
   12230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12234:	add	fp, sp, #28
   12238:	push	{r2}		; (str r2, [sp, #-4]!)
   1223c:	mov	sl, r1
   12240:	mov	r7, r0
   12244:	bl	14edc <__assert_fail@plt+0x3d98>
   12248:	sub	r4, r0, r7
   1224c:	bl	14f28 <__assert_fail@plt+0x3de4>
   12250:	mov	r6, r0
   12254:	add	r5, r4, r0
   12258:	mov	r0, sl
   1225c:	bl	11030 <strlen@plt>
   12260:	mov	r9, r0
   12264:	cmp	r6, #0
   12268:	beq	12290 <__assert_fail@plt+0x114c>
   1226c:	add	r0, r7, r5
   12270:	ldrb	r0, [r0, #-1]
   12274:	mov	r4, #0
   12278:	cmp	r0, #47	; 0x2f
   1227c:	beq	122a0 <__assert_fail@plt+0x115c>
   12280:	ldrb	r0, [sl]
   12284:	subs	r4, r0, #47	; 0x2f
   12288:	movwne	r4, #47	; 0x2f
   1228c:	b	122a0 <__assert_fail@plt+0x115c>
   12290:	ldrb	r0, [sl]
   12294:	mov	r4, #0
   12298:	cmp	r0, #47	; 0x2f
   1229c:	movweq	r4, #46	; 0x2e
   122a0:	add	r0, r9, r5
   122a4:	uxtb	r8, r4
   122a8:	cmp	r8, #0
   122ac:	movwne	r8, #1
   122b0:	add	r0, r0, r8
   122b4:	add	r0, r0, #1
   122b8:	bl	14df8 <__assert_fail@plt+0x3cb4>
   122bc:	mov	r6, r0
   122c0:	cmp	r0, #0
   122c4:	beq	12304 <__assert_fail@plt+0x11c0>
   122c8:	mov	r0, r6
   122cc:	mov	r1, r7
   122d0:	mov	r2, r5
   122d4:	mvn	r3, #0
   122d8:	bl	11138 <__mempcpy_chk@plt>
   122dc:	strb	r4, [r0], r8
   122e0:	ldr	r1, [sp]
   122e4:	cmp	r1, #0
   122e8:	strne	r0, [r1]
   122ec:	mov	r1, sl
   122f0:	mov	r2, r9
   122f4:	mvn	r3, #0
   122f8:	bl	11138 <__mempcpy_chk@plt>
   122fc:	mov	r1, #0
   12300:	strb	r1, [r0]
   12304:	mov	r0, r6
   12308:	sub	sp, fp, #28
   1230c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12310:	push	{r4, r5, r6, sl, fp, lr}
   12314:	add	fp, sp, #16
   12318:	mov	r4, r0
   1231c:	bl	11048 <__errno_location@plt>
   12320:	mov	r5, r0
   12324:	ldr	r6, [r0]
   12328:	mov	r0, r4
   1232c:	bl	10eec <free@plt>
   12330:	str	r6, [r5]
   12334:	pop	{r4, r5, r6, sl, fp, pc}
   12338:	push	{r4, r5, fp, lr}
   1233c:	add	fp, sp, #8
   12340:	cmp	r0, #0
   12344:	beq	123d8 <__assert_fail@plt+0x1294>
   12348:	mov	r4, r0
   1234c:	mov	r1, #47	; 0x2f
   12350:	bl	110f0 <strrchr@plt>
   12354:	cmp	r0, #0
   12358:	mov	r5, r4
   1235c:	addne	r5, r0, #1
   12360:	sub	r0, r5, r4
   12364:	cmp	r0, #7
   12368:	blt	123bc <__assert_fail@plt+0x1278>
   1236c:	sub	r0, r5, #7
   12370:	movw	r1, #24786	; 0x60d2
   12374:	movt	r1, #1
   12378:	mov	r2, #7
   1237c:	bl	11120 <strncmp@plt>
   12380:	cmp	r0, #0
   12384:	bne	123bc <__assert_fail@plt+0x1278>
   12388:	movw	r1, #24794	; 0x60da
   1238c:	movt	r1, #1
   12390:	mov	r0, r5
   12394:	mov	r2, #3
   12398:	bl	11120 <strncmp@plt>
   1239c:	cmp	r0, #0
   123a0:	beq	123ac <__assert_fail@plt+0x1268>
   123a4:	mov	r4, r5
   123a8:	b	123bc <__assert_fail@plt+0x1278>
   123ac:	add	r4, r5, #3
   123b0:	movw	r0, #28992	; 0x7140
   123b4:	movt	r0, #2
   123b8:	str	r4, [r0]
   123bc:	movw	r0, #28996	; 0x7144
   123c0:	movt	r0, #2
   123c4:	str	r4, [r0]
   123c8:	movw	r0, #29072	; 0x7190
   123cc:	movt	r0, #2
   123d0:	str	r4, [r0]
   123d4:	pop	{r4, r5, fp, pc}
   123d8:	movw	r0, #29008	; 0x7150
   123dc:	movt	r0, #2
   123e0:	ldr	r3, [r0]
   123e4:	movw	r0, #24730	; 0x609a
   123e8:	movt	r0, #1
   123ec:	mov	r1, #55	; 0x37
   123f0:	mov	r2, #1
   123f4:	bl	10f70 <fwrite@plt>
   123f8:	bl	1112c <abort@plt>
   123fc:	push	{r4, r5, r6, sl, fp, lr}
   12400:	add	fp, sp, #16
   12404:	mov	r4, r0
   12408:	movw	r0, #29080	; 0x7198
   1240c:	movt	r0, #2
   12410:	cmp	r4, #0
   12414:	moveq	r4, r0
   12418:	bl	11048 <__errno_location@plt>
   1241c:	mov	r5, r0
   12420:	ldr	r6, [r0]
   12424:	mov	r0, r4
   12428:	mov	r1, #48	; 0x30
   1242c:	bl	1473c <__assert_fail@plt+0x35f8>
   12430:	str	r6, [r5]
   12434:	pop	{r4, r5, r6, sl, fp, pc}
   12438:	movw	r1, #29080	; 0x7198
   1243c:	movt	r1, #2
   12440:	cmp	r0, #0
   12444:	movne	r1, r0
   12448:	ldr	r0, [r1]
   1244c:	bx	lr
   12450:	movw	r2, #29080	; 0x7198
   12454:	movt	r2, #2
   12458:	cmp	r0, #0
   1245c:	movne	r2, r0
   12460:	str	r1, [r2]
   12464:	bx	lr
   12468:	movw	r3, #29080	; 0x7198
   1246c:	movt	r3, #2
   12470:	cmp	r0, #0
   12474:	movne	r3, r0
   12478:	ubfx	r0, r1, #5, #3
   1247c:	add	r0, r3, r0, lsl #2
   12480:	ldr	r3, [r0, #8]
   12484:	and	r1, r1, #31
   12488:	eor	r2, r2, r3, lsr r1
   1248c:	and	r2, r2, #1
   12490:	eor	r2, r3, r2, lsl r1
   12494:	str	r2, [r0, #8]
   12498:	mov	r0, #1
   1249c:	and	r0, r0, r3, lsr r1
   124a0:	bx	lr
   124a4:	movw	r2, #29080	; 0x7198
   124a8:	movt	r2, #2
   124ac:	cmp	r0, #0
   124b0:	movne	r2, r0
   124b4:	ldr	r0, [r2, #4]
   124b8:	str	r1, [r2, #4]
   124bc:	bx	lr
   124c0:	movw	r3, #29080	; 0x7198
   124c4:	movt	r3, #2
   124c8:	cmp	r0, #0
   124cc:	movne	r3, r0
   124d0:	mov	r0, #10
   124d4:	str	r0, [r3]
   124d8:	cmp	r1, #0
   124dc:	cmpne	r2, #0
   124e0:	bne	124f0 <__assert_fail@plt+0x13ac>
   124e4:	push	{fp, lr}
   124e8:	mov	fp, sp
   124ec:	bl	1112c <abort@plt>
   124f0:	str	r1, [r3, #40]	; 0x28
   124f4:	str	r2, [r3, #44]	; 0x2c
   124f8:	bx	lr
   124fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12500:	add	fp, sp, #28
   12504:	sub	sp, sp, #20
   12508:	mov	r8, r3
   1250c:	mov	r9, r2
   12510:	mov	sl, r1
   12514:	mov	r7, r0
   12518:	ldr	r0, [fp, #8]
   1251c:	movw	r5, #29080	; 0x7198
   12520:	movt	r5, #2
   12524:	cmp	r0, #0
   12528:	movne	r5, r0
   1252c:	bl	11048 <__errno_location@plt>
   12530:	mov	r4, r0
   12534:	ldm	r5, {r0, r1}
   12538:	ldr	r2, [r5, #40]	; 0x28
   1253c:	ldr	r3, [r5, #44]	; 0x2c
   12540:	ldr	r6, [r4]
   12544:	add	r5, r5, #8
   12548:	stm	sp, {r0, r1, r5}
   1254c:	str	r2, [sp, #12]
   12550:	str	r3, [sp, #16]
   12554:	mov	r0, r7
   12558:	mov	r1, sl
   1255c:	mov	r2, r9
   12560:	mov	r3, r8
   12564:	bl	12574 <__assert_fail@plt+0x1430>
   12568:	str	r6, [r4]
   1256c:	sub	sp, fp, #28
   12570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12578:	add	fp, sp, #28
   1257c:	sub	sp, sp, #156	; 0x9c
   12580:	mov	r9, r3
   12584:	str	r2, [fp, #-84]	; 0xffffffac
   12588:	mov	r6, r1
   1258c:	mov	r7, r0
   12590:	ldr	r0, [fp, #12]
   12594:	and	r1, r0, #4
   12598:	str	r1, [sp, #32]
   1259c:	and	r1, r0, #1
   125a0:	str	r1, [sp, #36]	; 0x24
   125a4:	ubfx	sl, r0, #1, #1
   125a8:	bl	10f88 <__ctype_get_mb_cur_max@plt>
   125ac:	str	r0, [sp, #40]	; 0x28
   125b0:	ldr	r0, [fp, #24]
   125b4:	str	r0, [sp, #76]	; 0x4c
   125b8:	ldr	r0, [fp, #20]
   125bc:	str	r0, [sp, #68]	; 0x44
   125c0:	ldr	r0, [fp, #8]
   125c4:	str	r0, [fp, #-60]	; 0xffffffc4
   125c8:	mov	r0, #0
   125cc:	str	r0, [sp, #72]	; 0x48
   125d0:	mov	r0, #0
   125d4:	str	r0, [sp, #92]	; 0x5c
   125d8:	mov	r0, #0
   125dc:	str	r0, [fp, #-72]	; 0xffffffb8
   125e0:	mov	r0, #0
   125e4:	mov	r1, #0
   125e8:	str	r1, [fp, #-56]	; 0xffffffc8
   125ec:	mov	r1, #0
   125f0:	str	r1, [sp, #56]	; 0x38
   125f4:	mov	r5, #1
   125f8:	str	r7, [sp, #80]	; 0x50
   125fc:	mov	r4, r6
   12600:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12604:	cmp	r6, #10
   12608:	bhi	13570 <__assert_fail@plt+0x242c>
   1260c:	add	r1, pc, #20
   12610:	mov	r8, #0
   12614:	mov	r2, #1
   12618:	mov	r3, #0
   1261c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12620:	mov	lr, r9
   12624:	ldr	pc, [r1, r6, lsl #2]
   12628:	andeq	r2, r1, r0, lsl #14
   1262c:	andeq	r2, r1, r0, lsr r7
   12630:	strdeq	r2, [r1], -r0
   12634:	andeq	r2, r1, r8, ror #13
   12638:	andeq	r2, r1, r4, lsr #14
   1263c:	andeq	r2, r1, r4, lsl #15
   12640:	andeq	r2, r1, r0, lsl r7
   12644:	andeq	r2, r1, r0, ror #15
   12648:	andeq	r2, r1, r4, asr r6
   1264c:	andeq	r2, r1, r4, asr r6
   12650:	andeq	r2, r1, ip, ror r6
   12654:	movw	r0, #24876	; 0x612c
   12658:	movt	r0, #1
   1265c:	mov	r1, r6
   12660:	bl	13b7c <__assert_fail@plt+0x2a38>
   12664:	str	r0, [sp, #68]	; 0x44
   12668:	movw	r0, #24878	; 0x612e
   1266c:	movt	r0, #1
   12670:	mov	r1, r6
   12674:	bl	13b7c <__assert_fail@plt+0x2a38>
   12678:	str	r0, [sp, #76]	; 0x4c
   1267c:	mov	r8, #0
   12680:	tst	sl, #1
   12684:	bne	126bc <__assert_fail@plt+0x1578>
   12688:	ldr	r0, [sp, #68]	; 0x44
   1268c:	ldrb	r0, [r0]
   12690:	cmp	r0, #0
   12694:	beq	126bc <__assert_fail@plt+0x1578>
   12698:	ldr	r1, [sp, #68]	; 0x44
   1269c:	add	r1, r1, #1
   126a0:	mov	r8, #0
   126a4:	cmp	r8, r4
   126a8:	strbcc	r0, [r7, r8]
   126ac:	ldrb	r0, [r1, r8]
   126b0:	add	r8, r8, #1
   126b4:	cmp	r0, #0
   126b8:	bne	126a4 <__assert_fail@plt+0x1560>
   126bc:	ldr	r6, [sp, #76]	; 0x4c
   126c0:	mov	r0, r6
   126c4:	bl	11030 <strlen@plt>
   126c8:	str	r0, [fp, #-72]	; 0xffffffb8
   126cc:	str	r6, [sp, #92]	; 0x5c
   126d0:	mov	r2, #1
   126d4:	mov	r3, sl
   126d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   126dc:	mov	lr, r9
   126e0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   126e4:	b	127e0 <__assert_fail@plt+0x169c>
   126e8:	mov	r0, #1
   126ec:	b	12730 <__assert_fail@plt+0x15ec>
   126f0:	tst	sl, #1
   126f4:	bne	12730 <__assert_fail@plt+0x15ec>
   126f8:	mov	r2, r0
   126fc:	b	12758 <__assert_fail@plt+0x1614>
   12700:	mov	r6, #0
   12704:	mov	r8, #0
   12708:	mov	r2, r0
   1270c:	b	127dc <__assert_fail@plt+0x1698>
   12710:	mov	r0, #1
   12714:	str	r0, [fp, #-72]	; 0xffffffb8
   12718:	mov	r8, #0
   1271c:	mov	r6, #5
   12720:	b	1279c <__assert_fail@plt+0x1658>
   12724:	mov	r2, #1
   12728:	tst	sl, #1
   1272c:	beq	12758 <__assert_fail@plt+0x1614>
   12730:	mov	r1, #1
   12734:	str	r1, [fp, #-72]	; 0xffffffb8
   12738:	mov	r8, #0
   1273c:	mov	r6, #2
   12740:	movw	r1, #24878	; 0x612e
   12744:	movt	r1, #1
   12748:	str	r1, [sp, #92]	; 0x5c
   1274c:	mov	r2, r0
   12750:	mov	r3, #1
   12754:	b	127e0 <__assert_fail@plt+0x169c>
   12758:	mov	r8, #1
   1275c:	mov	r6, #2
   12760:	cmp	r4, #0
   12764:	movne	r0, #39	; 0x27
   12768:	strbne	r0, [r7]
   1276c:	movw	r0, #24878	; 0x612e
   12770:	movt	r0, #1
   12774:	str	r0, [sp, #92]	; 0x5c
   12778:	mov	r0, #1
   1277c:	str	r0, [fp, #-72]	; 0xffffffb8
   12780:	b	127dc <__assert_fail@plt+0x1698>
   12784:	mov	r6, #5
   12788:	tst	sl, #1
   1278c:	beq	127b4 <__assert_fail@plt+0x1670>
   12790:	mov	r0, #1
   12794:	str	r0, [fp, #-72]	; 0xffffffb8
   12798:	mov	r8, #0
   1279c:	movw	r0, #24874	; 0x612a
   127a0:	movt	r0, #1
   127a4:	str	r0, [sp, #92]	; 0x5c
   127a8:	mov	r2, #1
   127ac:	mov	r3, #1
   127b0:	b	127e0 <__assert_fail@plt+0x169c>
   127b4:	cmp	r4, #0
   127b8:	movne	r0, #34	; 0x22
   127bc:	strbne	r0, [r7]
   127c0:	mov	r8, #1
   127c4:	movw	r0, #24874	; 0x612a
   127c8:	movt	r0, #1
   127cc:	str	r0, [sp, #92]	; 0x5c
   127d0:	mov	r0, #1
   127d4:	str	r0, [fp, #-72]	; 0xffffffb8
   127d8:	mov	r2, #1
   127dc:	mov	r3, #0
   127e0:	ldr	r0, [fp, #16]
   127e4:	cmp	r0, #0
   127e8:	movwne	r0, #1
   127ec:	and	r0, r0, r3
   127f0:	str	r0, [fp, #-88]	; 0xffffffa8
   127f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127f8:	cmp	r0, #0
   127fc:	movwne	r0, #1
   12800:	and	r1, r0, r3
   12804:	and	r1, r2, r1
   12808:	str	r1, [sp, #48]	; 0x30
   1280c:	str	r6, [fp, #-60]	; 0xffffffc4
   12810:	subs	r6, r6, #2
   12814:	clz	r1, r6
   12818:	lsr	r1, r1, #5
   1281c:	and	r1, r1, r3
   12820:	str	r1, [sp, #60]	; 0x3c
   12824:	str	r6, [fp, #-80]	; 0xffffffb0
   12828:	mov	r1, r6
   1282c:	movwne	r1, #1
   12830:	str	r3, [fp, #-76]	; 0xffffffb4
   12834:	eor	r3, r3, #1
   12838:	str	r3, [sp, #88]	; 0x58
   1283c:	orr	r3, r1, r3
   12840:	str	r3, [sp, #64]	; 0x40
   12844:	and	r1, r1, r2
   12848:	str	r1, [fp, #-68]	; 0xffffffbc
   1284c:	and	r0, r0, r1
   12850:	str	r0, [fp, #-64]	; 0xffffffc0
   12854:	str	r2, [sp, #84]	; 0x54
   12858:	eor	r0, r2, #1
   1285c:	str	r0, [sp, #52]	; 0x34
   12860:	mov	r6, #0
   12864:	cmn	lr, #1
   12868:	beq	12878 <__assert_fail@plt+0x1734>
   1286c:	cmp	r6, lr
   12870:	bne	12884 <__assert_fail@plt+0x1740>
   12874:	b	133f0 <__assert_fail@plt+0x22ac>
   12878:	ldrb	r0, [ip, r6]
   1287c:	cmp	r0, #0
   12880:	beq	133f0 <__assert_fail@plt+0x22ac>
   12884:	str	r5, [fp, #-48]	; 0xffffffd0
   12888:	mov	sl, #0
   1288c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12890:	cmp	r0, #0
   12894:	beq	128c8 <__assert_fail@plt+0x1784>
   12898:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1289c:	add	r5, r6, r0
   128a0:	cmp	r0, #2
   128a4:	bcc	128c0 <__assert_fail@plt+0x177c>
   128a8:	cmn	lr, #1
   128ac:	bne	128c0 <__assert_fail@plt+0x177c>
   128b0:	mov	r0, ip
   128b4:	bl	11030 <strlen@plt>
   128b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   128bc:	mov	lr, r0
   128c0:	cmp	r5, lr
   128c4:	bls	128d4 <__assert_fail@plt+0x1790>
   128c8:	mov	r0, #0
   128cc:	str	r0, [fp, #-52]	; 0xffffffcc
   128d0:	b	12920 <__assert_fail@plt+0x17dc>
   128d4:	mov	r5, r4
   128d8:	mov	r4, lr
   128dc:	add	r0, ip, r6
   128e0:	ldr	r1, [sp, #92]	; 0x5c
   128e4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   128e8:	bl	10f28 <memcmp@plt>
   128ec:	cmp	r0, #0
   128f0:	mov	r1, r0
   128f4:	movwne	r1, #1
   128f8:	ldr	r2, [sp, #88]	; 0x58
   128fc:	orr	r1, r1, r2
   12900:	tst	r1, #1
   12904:	beq	134b4 <__assert_fail@plt+0x2370>
   12908:	clz	r0, r0
   1290c:	lsr	r0, r0, #5
   12910:	str	r0, [fp, #-52]	; 0xffffffcc
   12914:	ldr	ip, [fp, #-84]	; 0xffffffac
   12918:	mov	lr, r4
   1291c:	mov	r4, r5
   12920:	ldrb	r5, [ip, r6]
   12924:	cmp	r5, #126	; 0x7e
   12928:	bhi	12ce4 <__assert_fail@plt+0x1ba0>
   1292c:	mov	r9, #1
   12930:	mov	r2, #110	; 0x6e
   12934:	mov	r0, #97	; 0x61
   12938:	add	r3, pc, #4
   1293c:	mov	r1, #0
   12940:	ldr	pc, [r3, r5, lsl #2]
   12944:	ldrdeq	r2, [r1], -ip
   12948:	andeq	r2, r1, r4, ror #25
   1294c:	andeq	r2, r1, r4, ror #25
   12950:	andeq	r2, r1, r4, ror #25
   12954:	andeq	r2, r1, r4, ror #25
   12958:	andeq	r2, r1, r4, ror #25
   1295c:	andeq	r2, r1, r4, ror #25
   12960:	andeq	r2, r1, r8, lsr #27
   12964:			; <UNDEFINED> instruction: 0x00012bbc
   12968:			; <UNDEFINED> instruction: 0x00012bb4
   1296c:	andeq	r2, r1, r8, asr #23
   12970:	andeq	r2, r1, ip, asr #24
   12974:	andeq	r2, r1, ip, lsr #23
   12978:	andeq	r2, r1, r4, asr #23
   1297c:	andeq	r2, r1, r4, ror #25
   12980:	andeq	r2, r1, r4, ror #25
   12984:	andeq	r2, r1, r4, ror #25
   12988:	andeq	r2, r1, r4, ror #25
   1298c:	andeq	r2, r1, r4, ror #25
   12990:	andeq	r2, r1, r4, ror #25
   12994:	andeq	r2, r1, r4, ror #25
   12998:	andeq	r2, r1, r4, ror #25
   1299c:	andeq	r2, r1, r4, ror #25
   129a0:	andeq	r2, r1, r4, ror #25
   129a4:	andeq	r2, r1, r4, ror #25
   129a8:	andeq	r2, r1, r4, ror #25
   129ac:	andeq	r2, r1, r4, ror #25
   129b0:	andeq	r2, r1, r4, ror #25
   129b4:	andeq	r2, r1, r4, ror #25
   129b8:	andeq	r2, r1, r4, ror #25
   129bc:	andeq	r2, r1, r4, ror #25
   129c0:	andeq	r2, r1, r4, ror #25
   129c4:	andeq	r2, r1, r8, asr sp
   129c8:	andeq	r2, r1, ip, asr sp
   129cc:	andeq	r2, r1, ip, asr sp
   129d0:	andeq	r2, r1, r4, asr fp
   129d4:	andeq	r2, r1, ip, asr sp
   129d8:	andeq	r2, r1, r0, asr #22
   129dc:	andeq	r2, r1, ip, asr sp
   129e0:	andeq	r2, r1, r4, asr ip
   129e4:	andeq	r2, r1, ip, asr sp
   129e8:	andeq	r2, r1, ip, asr sp
   129ec:	andeq	r2, r1, ip, asr sp
   129f0:	andeq	r2, r1, r0, asr #22
   129f4:	andeq	r2, r1, r0, asr #22
   129f8:	andeq	r2, r1, r0, asr #22
   129fc:	andeq	r2, r1, r0, asr #22
   12a00:	andeq	r2, r1, r0, asr #22
   12a04:	andeq	r2, r1, r0, asr #22
   12a08:	andeq	r2, r1, r0, asr #22
   12a0c:	andeq	r2, r1, r0, asr #22
   12a10:	andeq	r2, r1, r0, asr #22
   12a14:	andeq	r2, r1, r0, asr #22
   12a18:	andeq	r2, r1, r0, asr #22
   12a1c:	andeq	r2, r1, r0, asr #22
   12a20:	andeq	r2, r1, r0, asr #22
   12a24:	andeq	r2, r1, r0, asr #22
   12a28:	andeq	r2, r1, r0, asr #22
   12a2c:	andeq	r2, r1, r0, asr #22
   12a30:	andeq	r2, r1, ip, asr sp
   12a34:	andeq	r2, r1, ip, asr sp
   12a38:	andeq	r2, r1, ip, asr sp
   12a3c:	andeq	r2, r1, ip, asr sp
   12a40:	andeq	r2, r1, ip, lsl ip
   12a44:	andeq	r2, r1, r4, ror #25
   12a48:	andeq	r2, r1, r0, asr #22
   12a4c:	andeq	r2, r1, r0, asr #22
   12a50:	andeq	r2, r1, r0, asr #22
   12a54:	andeq	r2, r1, r0, asr #22
   12a58:	andeq	r2, r1, r0, asr #22
   12a5c:	andeq	r2, r1, r0, asr #22
   12a60:	andeq	r2, r1, r0, asr #22
   12a64:	andeq	r2, r1, r0, asr #22
   12a68:	andeq	r2, r1, r0, asr #22
   12a6c:	andeq	r2, r1, r0, asr #22
   12a70:	andeq	r2, r1, r0, asr #22
   12a74:	andeq	r2, r1, r0, asr #22
   12a78:	andeq	r2, r1, r0, asr #22
   12a7c:	andeq	r2, r1, r0, asr #22
   12a80:	andeq	r2, r1, r0, asr #22
   12a84:	andeq	r2, r1, r0, asr #22
   12a88:	andeq	r2, r1, r0, asr #22
   12a8c:	andeq	r2, r1, r0, asr #22
   12a90:	andeq	r2, r1, r0, asr #22
   12a94:	andeq	r2, r1, r0, asr #22
   12a98:	andeq	r2, r1, r0, asr #22
   12a9c:	andeq	r2, r1, r0, asr #22
   12aa0:	andeq	r2, r1, r0, asr #22
   12aa4:	andeq	r2, r1, r0, asr #22
   12aa8:	andeq	r2, r1, r0, asr #22
   12aac:	andeq	r2, r1, r0, asr #22
   12ab0:	andeq	r2, r1, ip, asr sp
   12ab4:	andeq	r2, r1, r8, lsl #23
   12ab8:	andeq	r2, r1, r0, asr #22
   12abc:	andeq	r2, r1, ip, asr sp
   12ac0:	andeq	r2, r1, r0, asr #22
   12ac4:	andeq	r2, r1, ip, asr sp
   12ac8:	andeq	r2, r1, r0, asr #22
   12acc:	andeq	r2, r1, r0, asr #22
   12ad0:	andeq	r2, r1, r0, asr #22
   12ad4:	andeq	r2, r1, r0, asr #22
   12ad8:	andeq	r2, r1, r0, asr #22
   12adc:	andeq	r2, r1, r0, asr #22
   12ae0:	andeq	r2, r1, r0, asr #22
   12ae4:	andeq	r2, r1, r0, asr #22
   12ae8:	andeq	r2, r1, r0, asr #22
   12aec:	andeq	r2, r1, r0, asr #22
   12af0:	andeq	r2, r1, r0, asr #22
   12af4:	andeq	r2, r1, r0, asr #22
   12af8:	andeq	r2, r1, r0, asr #22
   12afc:	andeq	r2, r1, r0, asr #22
   12b00:	andeq	r2, r1, r0, asr #22
   12b04:	andeq	r2, r1, r0, asr #22
   12b08:	andeq	r2, r1, r0, asr #22
   12b0c:	andeq	r2, r1, r0, asr #22
   12b10:	andeq	r2, r1, r0, asr #22
   12b14:	andeq	r2, r1, r0, asr #22
   12b18:	andeq	r2, r1, r0, asr #22
   12b1c:	andeq	r2, r1, r0, asr #22
   12b20:	andeq	r2, r1, r0, asr #22
   12b24:	andeq	r2, r1, r0, asr #22
   12b28:	andeq	r2, r1, r0, asr #22
   12b2c:	andeq	r2, r1, r0, asr #22
   12b30:	andeq	r2, r1, r8, ror #22
   12b34:	andeq	r2, r1, ip, asr sp
   12b38:	andeq	r2, r1, r8, ror #22
   12b3c:	andeq	r2, r1, r4, asr fp
   12b40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b44:	cmp	r0, #0
   12b48:	beq	12dbc <__assert_fail@plt+0x1c78>
   12b4c:	ldr	r0, [fp, #16]
   12b50:	b	12dc0 <__assert_fail@plt+0x1c7c>
   12b54:	mov	r9, #0
   12b58:	cmp	r6, #0
   12b5c:	beq	12d58 <__assert_fail@plt+0x1c14>
   12b60:	mov	sl, #0
   12b64:	b	12b40 <__assert_fail@plt+0x19fc>
   12b68:	mov	r9, #0
   12b6c:	cmn	lr, #1
   12b70:	beq	12d3c <__assert_fail@plt+0x1bf8>
   12b74:	cmp	r6, #0
   12b78:	bne	12b60 <__assert_fail@plt+0x1a1c>
   12b7c:	cmp	lr, #1
   12b80:	beq	12d58 <__assert_fail@plt+0x1c14>
   12b84:	b	12b60 <__assert_fail@plt+0x1a1c>
   12b88:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b8c:	cmp	r0, #2
   12b90:	bne	12d84 <__assert_fail@plt+0x1c40>
   12b94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b98:	tst	r0, #1
   12b9c:	bne	134cc <__assert_fail@plt+0x2388>
   12ba0:	mov	sl, #0
   12ba4:	mov	r0, #92	; 0x5c
   12ba8:	b	12d98 <__assert_fail@plt+0x1c54>
   12bac:	mov	r0, #102	; 0x66
   12bb0:	b	12da8 <__assert_fail@plt+0x1c64>
   12bb4:	mov	r2, #116	; 0x74
   12bb8:	b	12bc8 <__assert_fail@plt+0x1a84>
   12bbc:	mov	r0, #98	; 0x62
   12bc0:	b	12da8 <__assert_fail@plt+0x1c64>
   12bc4:	mov	r2, #114	; 0x72
   12bc8:	ldr	r0, [sp, #64]	; 0x40
   12bcc:	tst	r0, #1
   12bd0:	mov	r0, r2
   12bd4:	bne	12da8 <__assert_fail@plt+0x1c64>
   12bd8:	b	134cc <__assert_fail@plt+0x2388>
   12bdc:	ldr	r0, [sp, #84]	; 0x54
   12be0:	tst	r0, #1
   12be4:	beq	12e98 <__assert_fail@plt+0x1d54>
   12be8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bec:	tst	r0, #1
   12bf0:	bne	134cc <__assert_fail@plt+0x2388>
   12bf4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12bf8:	cmp	r0, #2
   12bfc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12c00:	movwne	r0, #1
   12c04:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c08:	orr	r0, r0, r2
   12c0c:	tst	r0, #1
   12c10:	beq	1328c <__assert_fail@plt+0x2148>
   12c14:	mov	r0, r8
   12c18:	b	132c0 <__assert_fail@plt+0x217c>
   12c1c:	mov	sl, #0
   12c20:	mov	r5, #63	; 0x3f
   12c24:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c28:	cmp	r0, #5
   12c2c:	beq	1304c <__assert_fail@plt+0x1f08>
   12c30:	cmp	r0, #2
   12c34:	bne	130ec <__assert_fail@plt+0x1fa8>
   12c38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c3c:	tst	r0, #1
   12c40:	mov	r9, #0
   12c44:	beq	12b40 <__assert_fail@plt+0x19fc>
   12c48:	b	134cc <__assert_fail@plt+0x2388>
   12c4c:	mov	r0, #118	; 0x76
   12c50:	b	12da8 <__assert_fail@plt+0x1c64>
   12c54:	mov	r5, #39	; 0x27
   12c58:	mov	r0, #1
   12c5c:	str	r0, [sp, #56]	; 0x38
   12c60:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c64:	cmp	r0, #2
   12c68:	bne	12eb8 <__assert_fail@plt+0x1d74>
   12c6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c70:	tst	r0, #1
   12c74:	bne	134cc <__assert_fail@plt+0x2388>
   12c78:	ldr	r2, [sp, #72]	; 0x48
   12c7c:	cmp	r2, #0
   12c80:	mov	r0, r2
   12c84:	movwne	r0, #1
   12c88:	clz	r1, r4
   12c8c:	lsr	r1, r1, #5
   12c90:	orrs	r0, r0, r1
   12c94:	moveq	r2, r4
   12c98:	str	r2, [sp, #72]	; 0x48
   12c9c:	moveq	r4, r0
   12ca0:	cmp	r8, r4
   12ca4:	movcc	r0, #39	; 0x27
   12ca8:	strbcc	r0, [r7, r8]
   12cac:	add	r0, r8, #1
   12cb0:	cmp	r0, r4
   12cb4:	movcc	r1, #92	; 0x5c
   12cb8:	strbcc	r1, [r7, r0]
   12cbc:	add	r0, r8, #2
   12cc0:	cmp	r0, r4
   12cc4:	movcc	r1, #39	; 0x27
   12cc8:	strbcc	r1, [r7, r0]
   12ccc:	add	r8, r8, #3
   12cd0:	mov	r0, #0
   12cd4:	str	r0, [fp, #-56]	; 0xffffffc8
   12cd8:	mov	sl, #0
   12cdc:	mov	r9, #1
   12ce0:	b	12b40 <__assert_fail@plt+0x19fc>
   12ce4:	str	r4, [sp, #24]
   12ce8:	ldr	r0, [sp, #40]	; 0x28
   12cec:	cmp	r0, #1
   12cf0:	bne	12ec0 <__assert_fail@plt+0x1d7c>
   12cf4:	str	lr, [sp, #28]
   12cf8:	bl	11018 <__ctype_b_loc@plt>
   12cfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d00:	ldr	r0, [r0]
   12d04:	add	r0, r0, r5, lsl #1
   12d08:	ldrb	r0, [r0, #1]
   12d0c:	ubfx	r9, r0, #6, #1
   12d10:	mov	r1, #1
   12d14:	ldr	r4, [sp, #24]
   12d18:	ldr	r0, [sp, #52]	; 0x34
   12d1c:	orr	r0, r9, r0
   12d20:	mov	r2, r1
   12d24:	cmp	r1, #1
   12d28:	bhi	130f4 <__assert_fail@plt+0x1fb0>
   12d2c:	tst	r0, #1
   12d30:	beq	130f4 <__assert_fail@plt+0x1fb0>
   12d34:	ldr	lr, [sp, #28]
   12d38:	b	12b40 <__assert_fail@plt+0x19fc>
   12d3c:	cmp	r6, #0
   12d40:	ldrbeq	r0, [ip, #1]
   12d44:	cmpeq	r0, #0
   12d48:	beq	12d58 <__assert_fail@plt+0x1c14>
   12d4c:	mvn	lr, #0
   12d50:	mov	sl, #0
   12d54:	b	12b40 <__assert_fail@plt+0x19fc>
   12d58:	mov	r1, #1
   12d5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12d60:	cmp	r0, #2
   12d64:	bne	12d7c <__assert_fail@plt+0x1c38>
   12d68:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d6c:	tst	r0, #1
   12d70:	mov	r9, r1
   12d74:	beq	12b40 <__assert_fail@plt+0x19fc>
   12d78:	b	134cc <__assert_fail@plt+0x2388>
   12d7c:	mov	r9, r1
   12d80:	b	12b40 <__assert_fail@plt+0x19fc>
   12d84:	mov	sl, #0
   12d88:	mov	r0, #92	; 0x5c
   12d8c:	ldr	r1, [sp, #48]	; 0x30
   12d90:	cmp	r1, #0
   12d94:	beq	12da8 <__assert_fail@plt+0x1c64>
   12d98:	mov	r9, #0
   12d9c:	cmp	sl, #0
   12da0:	beq	13358 <__assert_fail@plt+0x2214>
   12da4:	b	13394 <__assert_fail@plt+0x2250>
   12da8:	mov	r9, #0
   12dac:	ldr	r1, [sp, #84]	; 0x54
   12db0:	tst	r1, #1
   12db4:	mov	sl, #0
   12db8:	bne	12df8 <__assert_fail@plt+0x1cb4>
   12dbc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12dc0:	cmp	r0, #0
   12dc4:	mov	r0, r5
   12dc8:	beq	12dec <__assert_fail@plt+0x1ca8>
   12dcc:	ubfx	r0, r5, #5, #3
   12dd0:	ldr	r1, [fp, #16]
   12dd4:	ldr	r0, [r1, r0, lsl #2]
   12dd8:	and	r1, r5, #31
   12ddc:	mov	r2, #1
   12de0:	tst	r0, r2, lsl r1
   12de4:	mov	r0, r5
   12de8:	bne	12df8 <__assert_fail@plt+0x1cb4>
   12dec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12df0:	cmp	r1, #0
   12df4:	beq	13350 <__assert_fail@plt+0x220c>
   12df8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12dfc:	tst	r1, #1
   12e00:	bne	134cc <__assert_fail@plt+0x2388>
   12e04:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12e08:	cmp	r1, #2
   12e0c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12e10:	movwne	r1, #1
   12e14:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12e18:	orr	r1, r1, r2
   12e1c:	tst	r1, #1
   12e20:	beq	12e2c <__assert_fail@plt+0x1ce8>
   12e24:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e28:	b	12e68 <__assert_fail@plt+0x1d24>
   12e2c:	cmp	r8, r4
   12e30:	movcc	r1, #39	; 0x27
   12e34:	strbcc	r1, [r7, r8]
   12e38:	add	r1, r8, #1
   12e3c:	cmp	r1, r4
   12e40:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e44:	movcc	r2, #36	; 0x24
   12e48:	strbcc	r2, [r7, r1]
   12e4c:	add	r1, r8, #2
   12e50:	cmp	r1, r4
   12e54:	movcc	r2, #39	; 0x27
   12e58:	strbcc	r2, [r7, r1]
   12e5c:	add	r8, r8, #3
   12e60:	mov	r1, #1
   12e64:	str	r1, [fp, #-56]	; 0xffffffc8
   12e68:	cmp	r8, r4
   12e6c:	movcc	r1, #92	; 0x5c
   12e70:	strbcc	r1, [r7, r8]
   12e74:	add	r8, r8, #1
   12e78:	cmp	r8, r4
   12e7c:	strbcc	r0, [r7, r8]
   12e80:	and	r5, r5, r9
   12e84:	add	r8, r8, #1
   12e88:	add	r6, r6, #1
   12e8c:	cmn	lr, #1
   12e90:	bne	1286c <__assert_fail@plt+0x1728>
   12e94:	b	12878 <__assert_fail@plt+0x1734>
   12e98:	mov	r9, #0
   12e9c:	ldr	r0, [sp, #36]	; 0x24
   12ea0:	cmp	r0, #0
   12ea4:	mov	sl, #0
   12ea8:	mov	r5, #0
   12eac:	beq	12dbc <__assert_fail@plt+0x1c78>
   12eb0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12eb4:	b	12e88 <__assert_fail@plt+0x1d44>
   12eb8:	mov	r9, #1
   12ebc:	b	12b40 <__assert_fail@plt+0x19fc>
   12ec0:	mov	r0, #0
   12ec4:	str	r0, [fp, #-36]	; 0xffffffdc
   12ec8:	str	r0, [fp, #-40]	; 0xffffffd8
   12ecc:	cmn	lr, #1
   12ed0:	bne	12ee4 <__assert_fail@plt+0x1da0>
   12ed4:	mov	r0, ip
   12ed8:	bl	11030 <strlen@plt>
   12edc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ee0:	mov	lr, r0
   12ee4:	add	r0, ip, r6
   12ee8:	str	r0, [sp, #20]
   12eec:	mov	r9, #1
   12ef0:	mov	r7, #0
   12ef4:	sub	r4, fp, #40	; 0x28
   12ef8:	str	lr, [sp, #28]
   12efc:	str	r7, [sp, #44]	; 0x2c
   12f00:	add	r7, r7, r6
   12f04:	add	r1, ip, r7
   12f08:	sub	r2, lr, r7
   12f0c:	sub	r0, fp, #44	; 0x2c
   12f10:	mov	r3, r4
   12f14:	bl	153f8 <__assert_fail@plt+0x42b4>
   12f18:	cmp	r0, #0
   12f1c:	beq	133dc <__assert_fail@plt+0x2298>
   12f20:	cmn	r0, #1
   12f24:	beq	1339c <__assert_fail@plt+0x2258>
   12f28:	cmn	r0, #2
   12f2c:	ldr	lr, [sp, #28]
   12f30:	beq	133a4 <__assert_fail@plt+0x2260>
   12f34:	cmp	r0, #2
   12f38:	mov	r1, #0
   12f3c:	movwcc	r1, #1
   12f40:	ldr	r2, [sp, #60]	; 0x3c
   12f44:	eor	r2, r2, #1
   12f48:	orrs	r1, r2, r1
   12f4c:	ldr	r4, [sp, #24]
   12f50:	bne	13010 <__assert_fail@plt+0x1ecc>
   12f54:	ldr	r1, [sp, #44]	; 0x2c
   12f58:	ldr	r2, [sp, #20]
   12f5c:	add	r1, r2, r1
   12f60:	mov	r2, #1
   12f64:	ldrb	r3, [r1, r2]
   12f68:	sub	r3, r3, #91	; 0x5b
   12f6c:	cmp	r3, #33	; 0x21
   12f70:	bhi	13004 <__assert_fail@plt+0x1ec0>
   12f74:	add	r7, pc, #0
   12f78:	ldr	pc, [r7, r3, lsl #2]
   12f7c:	andeq	r3, r1, r4, asr #9
   12f80:	andeq	r3, r1, r4, asr #9
   12f84:	andeq	r3, r1, r4
   12f88:	andeq	r3, r1, r4, asr #9
   12f8c:	andeq	r3, r1, r4
   12f90:	andeq	r3, r1, r4, asr #9
   12f94:	andeq	r3, r1, r4
   12f98:	andeq	r3, r1, r4
   12f9c:	andeq	r3, r1, r4
   12fa0:	andeq	r3, r1, r4
   12fa4:	andeq	r3, r1, r4
   12fa8:	andeq	r3, r1, r4
   12fac:	andeq	r3, r1, r4
   12fb0:	andeq	r3, r1, r4
   12fb4:	andeq	r3, r1, r4
   12fb8:	andeq	r3, r1, r4
   12fbc:	andeq	r3, r1, r4
   12fc0:	andeq	r3, r1, r4
   12fc4:	andeq	r3, r1, r4
   12fc8:	andeq	r3, r1, r4
   12fcc:	andeq	r3, r1, r4
   12fd0:	andeq	r3, r1, r4
   12fd4:	andeq	r3, r1, r4
   12fd8:	andeq	r3, r1, r4
   12fdc:	andeq	r3, r1, r4
   12fe0:	andeq	r3, r1, r4
   12fe4:	andeq	r3, r1, r4
   12fe8:	andeq	r3, r1, r4
   12fec:	andeq	r3, r1, r4
   12ff0:	andeq	r3, r1, r4
   12ff4:	andeq	r3, r1, r4
   12ff8:	andeq	r3, r1, r4
   12ffc:	andeq	r3, r1, r4
   13000:	andeq	r3, r1, r4, asr #9
   13004:	add	r2, r2, #1
   13008:	cmp	r2, r0
   1300c:	bcc	12f64 <__assert_fail@plt+0x1e20>
   13010:	ldr	r7, [sp, #44]	; 0x2c
   13014:	add	r7, r0, r7
   13018:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1301c:	bl	10f58 <iswprint@plt>
   13020:	cmp	r0, #0
   13024:	movwne	r0, #1
   13028:	and	r9, r9, r0
   1302c:	sub	r4, fp, #40	; 0x28
   13030:	mov	r0, r4
   13034:	bl	10f1c <mbsinit@plt>
   13038:	ldr	lr, [sp, #28]
   1303c:	cmp	r0, #0
   13040:	ldr	ip, [fp, #-84]	; 0xffffffac
   13044:	beq	12efc <__assert_fail@plt+0x1db8>
   13048:	b	133e4 <__assert_fail@plt+0x22a0>
   1304c:	ldr	r0, [sp, #32]
   13050:	cmp	r0, #0
   13054:	beq	130ec <__assert_fail@plt+0x1fa8>
   13058:	add	r0, r6, #2
   1305c:	cmp	r0, lr
   13060:	bcs	130ec <__assert_fail@plt+0x1fa8>
   13064:	add	r1, ip, r6
   13068:	ldrb	r1, [r1, #1]
   1306c:	cmp	r1, #63	; 0x3f
   13070:	bne	130ec <__assert_fail@plt+0x1fa8>
   13074:	ldrb	r9, [ip, r0]
   13078:	sub	r2, r9, #33	; 0x21
   1307c:	cmp	r2, #29
   13080:	bhi	130ec <__assert_fail@plt+0x1fa8>
   13084:	mov	r3, #1
   13088:	movw	r1, #20929	; 0x51c1
   1308c:	movt	r1, #14336	; 0x3800
   13090:	tst	r1, r3, lsl r2
   13094:	beq	130ec <__assert_fail@plt+0x1fa8>
   13098:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1309c:	tst	r1, #1
   130a0:	bne	134cc <__assert_fail@plt+0x2388>
   130a4:	cmp	r8, r4
   130a8:	movcc	r1, #63	; 0x3f
   130ac:	strbcc	r1, [r7, r8]
   130b0:	add	r2, r8, #1
   130b4:	cmp	r2, r4
   130b8:	movcc	r1, #34	; 0x22
   130bc:	strbcc	r1, [r7, r2]
   130c0:	add	r2, r8, #2
   130c4:	cmp	r2, r4
   130c8:	movcc	r1, #34	; 0x22
   130cc:	strbcc	r1, [r7, r2]
   130d0:	add	r2, r8, #3
   130d4:	cmp	r2, r4
   130d8:	movcc	r1, #63	; 0x3f
   130dc:	strbcc	r1, [r7, r2]
   130e0:	add	r8, r8, #4
   130e4:	mov	r6, r0
   130e8:	mov	r5, r9
   130ec:	mov	r9, #0
   130f0:	b	12b40 <__assert_fail@plt+0x19fc>
   130f4:	add	r1, r2, r6
   130f8:	str	r1, [sp, #44]	; 0x2c
   130fc:	add	r1, r6, #1
   13100:	mov	r3, #0
   13104:	ldr	lr, [sp, #28]
   13108:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1310c:	tst	r0, #1
   13110:	bne	13204 <__assert_fail@plt+0x20c0>
   13114:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13118:	tst	r2, #1
   1311c:	bne	134cc <__assert_fail@plt+0x2388>
   13120:	cmp	r6, #2
   13124:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13128:	movwne	r3, #1
   1312c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13130:	orr	r3, r3, r2
   13134:	tst	r3, #1
   13138:	bne	13174 <__assert_fail@plt+0x2030>
   1313c:	cmp	r8, r4
   13140:	movcc	r2, #39	; 0x27
   13144:	strbcc	r2, [r7, r8]
   13148:	add	r3, r8, #1
   1314c:	cmp	r3, r4
   13150:	movcc	r2, #36	; 0x24
   13154:	strbcc	r2, [r7, r3]
   13158:	add	r3, r8, #2
   1315c:	cmp	r3, r4
   13160:	movcc	r2, #39	; 0x27
   13164:	strbcc	r2, [r7, r3]
   13168:	add	r8, r8, #3
   1316c:	mov	r2, #1
   13170:	str	r2, [fp, #-56]	; 0xffffffc8
   13174:	cmp	r8, r4
   13178:	movcc	r2, #92	; 0x5c
   1317c:	strbcc	r2, [r7, r8]
   13180:	add	r3, r8, #1
   13184:	cmp	r3, r4
   13188:	bcs	131a8 <__assert_fail@plt+0x2064>
   1318c:	and	r7, r5, #192	; 0xc0
   13190:	mov	r2, #48	; 0x30
   13194:	orr	r7, r2, r7, lsr #6
   13198:	ldr	r6, [sp, #80]	; 0x50
   1319c:	strb	r7, [r6, r3]
   131a0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   131a4:	ldr	r7, [sp, #80]	; 0x50
   131a8:	add	r3, r8, #2
   131ac:	cmp	r3, r4
   131b0:	bcs	131d0 <__assert_fail@plt+0x208c>
   131b4:	lsr	r7, r5, #3
   131b8:	mov	r2, #6
   131bc:	bfi	r7, r2, #3, #29
   131c0:	ldr	r6, [sp, #80]	; 0x50
   131c4:	strb	r7, [r6, r3]
   131c8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   131cc:	ldr	r7, [sp, #80]	; 0x50
   131d0:	mov	r2, #6
   131d4:	bfi	r5, r2, #3, #29
   131d8:	add	r8, r8, #3
   131dc:	mov	r3, #1
   131e0:	b	13228 <__assert_fail@plt+0x20e4>
   131e4:	ldr	r7, [sp, #80]	; 0x50
   131e8:	cmp	r8, r4
   131ec:	strbcc	r5, [r7, r8]
   131f0:	ldrb	r5, [ip, r1]
   131f4:	add	r1, r1, #1
   131f8:	add	r8, r8, #1
   131fc:	tst	r0, #1
   13200:	beq	13114 <__assert_fail@plt+0x1fd0>
   13204:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13208:	tst	r2, #1
   1320c:	beq	13220 <__assert_fail@plt+0x20dc>
   13210:	cmp	r8, r4
   13214:	movcc	r2, #92	; 0x5c
   13218:	strbcc	r2, [r7, r8]
   1321c:	add	r8, r8, #1
   13220:	mov	r2, #0
   13224:	str	r2, [fp, #-52]	; 0xffffffcc
   13228:	and	sl, r3, #1
   1322c:	ldr	r2, [sp, #44]	; 0x2c
   13230:	cmp	r2, r1
   13234:	bls	13340 <__assert_fail@plt+0x21fc>
   13238:	cmp	sl, #0
   1323c:	movwne	sl, #1
   13240:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13244:	mvn	r7, r2
   13248:	orr	r7, r7, sl
   1324c:	tst	r7, #1
   13250:	bne	131e4 <__assert_fail@plt+0x20a0>
   13254:	cmp	r8, r4
   13258:	ldrcc	r7, [sp, #80]	; 0x50
   1325c:	movcc	r2, #39	; 0x27
   13260:	strbcc	r2, [r7, r8]
   13264:	add	r7, r8, #1
   13268:	cmp	r7, r4
   1326c:	ldrcc	r6, [sp, #80]	; 0x50
   13270:	movcc	r2, #39	; 0x27
   13274:	strbcc	r2, [r6, r7]
   13278:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   1327c:	add	r8, r8, #2
   13280:	mov	r2, #0
   13284:	str	r2, [fp, #-56]	; 0xffffffc8
   13288:	b	131e4 <__assert_fail@plt+0x20a0>
   1328c:	cmp	r8, r4
   13290:	movcc	r0, #39	; 0x27
   13294:	strbcc	r0, [r7, r8]
   13298:	add	r0, r8, #1
   1329c:	cmp	r0, r4
   132a0:	movcc	r1, #36	; 0x24
   132a4:	strbcc	r1, [r7, r0]
   132a8:	add	r0, r8, #2
   132ac:	cmp	r0, r4
   132b0:	movcc	r1, #39	; 0x27
   132b4:	strbcc	r1, [r7, r0]
   132b8:	add	r0, r8, #3
   132bc:	mov	r2, #1
   132c0:	cmp	r0, r4
   132c4:	movcc	r1, #92	; 0x5c
   132c8:	strbcc	r1, [r7, r0]
   132cc:	str	r2, [fp, #-56]	; 0xffffffc8
   132d0:	add	r8, r0, #1
   132d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   132d8:	cmp	r1, #2
   132dc:	beq	13330 <__assert_fail@plt+0x21ec>
   132e0:	add	r1, r6, #1
   132e4:	mov	r9, #0
   132e8:	mov	sl, #1
   132ec:	mov	r5, #48	; 0x30
   132f0:	cmp	r1, lr
   132f4:	bcs	12b40 <__assert_fail@plt+0x19fc>
   132f8:	ldrb	r1, [ip, r1]
   132fc:	sub	r1, r1, #48	; 0x30
   13300:	uxtb	r1, r1
   13304:	cmp	r1, #9
   13308:	bhi	12b40 <__assert_fail@plt+0x19fc>
   1330c:	cmp	r8, r4
   13310:	movcc	r1, #48	; 0x30
   13314:	strbcc	r1, [r7, r8]
   13318:	add	r1, r0, #2
   1331c:	cmp	r1, r4
   13320:	movcc	r2, #48	; 0x30
   13324:	strbcc	r2, [r7, r1]
   13328:	add	r8, r0, #3
   1332c:	b	12b40 <__assert_fail@plt+0x19fc>
   13330:	mov	r0, #48	; 0x30
   13334:	mov	sl, #1
   13338:	mov	r9, #0
   1333c:	b	12dec <__assert_fail@plt+0x1ca8>
   13340:	sub	r6, r1, #1
   13344:	cmp	sl, #0
   13348:	movwne	sl, #1
   1334c:	mov	r0, r5
   13350:	cmp	sl, #0
   13354:	bne	13394 <__assert_fail@plt+0x2250>
   13358:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1335c:	tst	r1, #1
   13360:	beq	13394 <__assert_fail@plt+0x2250>
   13364:	cmp	r8, r4
   13368:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1336c:	movcc	r1, #39	; 0x27
   13370:	strbcc	r1, [r7, r8]
   13374:	add	r1, r8, #1
   13378:	cmp	r1, r4
   1337c:	movcc	r2, #39	; 0x27
   13380:	strbcc	r2, [r7, r1]
   13384:	add	r8, r8, #2
   13388:	mov	r1, #0
   1338c:	str	r1, [fp, #-56]	; 0xffffffc8
   13390:	b	12e78 <__assert_fail@plt+0x1d34>
   13394:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13398:	b	12e78 <__assert_fail@plt+0x1d34>
   1339c:	mov	r9, #0
   133a0:	b	133dc <__assert_fail@plt+0x2298>
   133a4:	mov	r9, #0
   133a8:	cmp	r7, lr
   133ac:	bcs	133dc <__assert_fail@plt+0x2298>
   133b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   133b4:	ldr	r7, [sp, #44]	; 0x2c
   133b8:	ldr	r0, [sp, #20]
   133bc:	ldrb	r0, [r0, r7]
   133c0:	cmp	r0, #0
   133c4:	beq	133e4 <__assert_fail@plt+0x22a0>
   133c8:	add	r7, r7, #1
   133cc:	add	r0, r6, r7
   133d0:	cmp	r0, lr
   133d4:	bcc	133b8 <__assert_fail@plt+0x2274>
   133d8:	b	133e4 <__assert_fail@plt+0x22a0>
   133dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   133e0:	ldr	r7, [sp, #44]	; 0x2c
   133e4:	mov	r1, r7
   133e8:	ldr	r7, [sp, #80]	; 0x50
   133ec:	b	12d14 <__assert_fail@plt+0x1bd0>
   133f0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   133f4:	eor	r0, r1, #2
   133f8:	orr	r0, r0, r8
   133fc:	clz	r0, r0
   13400:	lsr	r0, r0, #5
   13404:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13408:	tst	r2, r0
   1340c:	bne	134cc <__assert_fail@plt+0x2388>
   13410:	cmp	r1, #2
   13414:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13418:	movwne	r0, #1
   1341c:	orr	r0, r2, r0
   13420:	tst	r0, #1
   13424:	ldreq	r0, [sp, #56]	; 0x38
   13428:	eoreq	r0, r0, #1
   1342c:	tsteq	r0, #1
   13430:	bne	13464 <__assert_fail@plt+0x2320>
   13434:	mov	r9, lr
   13438:	tst	r5, #1
   1343c:	bne	13534 <__assert_fail@plt+0x23f0>
   13440:	ldr	r0, [sp, #72]	; 0x48
   13444:	cmp	r0, #0
   13448:	beq	13464 <__assert_fail@plt+0x2320>
   1344c:	mov	r5, #0
   13450:	cmp	r4, #0
   13454:	ldr	r0, [sp, #84]	; 0x54
   13458:	mov	sl, r2
   1345c:	ldr	r6, [sp, #72]	; 0x48
   13460:	beq	125fc <__assert_fail@plt+0x14b8>
   13464:	ldr	r1, [sp, #92]	; 0x5c
   13468:	clz	r0, r1
   1346c:	lsr	r0, r0, #5
   13470:	orr	r0, r0, r2
   13474:	tst	r0, #1
   13478:	bne	134a4 <__assert_fail@plt+0x2360>
   1347c:	ldrb	r0, [r1]
   13480:	cmp	r0, #0
   13484:	beq	134a4 <__assert_fail@plt+0x2360>
   13488:	add	r1, r1, #1
   1348c:	cmp	r8, r4
   13490:	strbcc	r0, [r7, r8]
   13494:	add	r8, r8, #1
   13498:	ldrb	r0, [r1], #1
   1349c:	cmp	r0, #0
   134a0:	bne	1348c <__assert_fail@plt+0x2348>
   134a4:	cmp	r8, r4
   134a8:	movcc	r0, #0
   134ac:	strbcc	r0, [r7, r8]
   134b0:	b	13528 <__assert_fail@plt+0x23e4>
   134b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   134b8:	mov	lr, r4
   134bc:	mov	r4, r5
   134c0:	b	134cc <__assert_fail@plt+0x2388>
   134c4:	ldr	r7, [sp, #80]	; 0x50
   134c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   134cc:	mov	r0, #0
   134d0:	ldr	r1, [fp, #12]
   134d4:	bic	r1, r1, #2
   134d8:	ldr	r2, [sp, #84]	; 0x54
   134dc:	tst	r2, #1
   134e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   134e4:	mov	r2, r3
   134e8:	movwne	r2, #4
   134ec:	cmp	r3, #2
   134f0:	movne	r2, r3
   134f4:	str	r2, [sp]
   134f8:	str	r1, [sp, #4]
   134fc:	str	r0, [sp, #8]
   13500:	ldr	r0, [sp, #68]	; 0x44
   13504:	str	r0, [sp, #12]
   13508:	ldr	r0, [sp, #76]	; 0x4c
   1350c:	str	r0, [sp, #16]
   13510:	mov	r0, r7
   13514:	mov	r1, r4
   13518:	mov	r2, ip
   1351c:	mov	r3, lr
   13520:	bl	12574 <__assert_fail@plt+0x1430>
   13524:	mov	r8, r0
   13528:	mov	r0, r8
   1352c:	sub	sp, fp, #28
   13530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13534:	mov	r0, #5
   13538:	str	r0, [sp]
   1353c:	ldr	r0, [fp, #12]
   13540:	str	r0, [sp, #4]
   13544:	ldr	r0, [fp, #16]
   13548:	str	r0, [sp, #8]
   1354c:	ldr	r0, [sp, #68]	; 0x44
   13550:	str	r0, [sp, #12]
   13554:	ldr	r0, [sp, #76]	; 0x4c
   13558:	str	r0, [sp, #16]
   1355c:	mov	r0, r7
   13560:	ldr	r1, [sp, #72]	; 0x48
   13564:	ldr	r2, [fp, #-84]	; 0xffffffac
   13568:	mov	r3, r9
   1356c:	b	13520 <__assert_fail@plt+0x23dc>
   13570:	bl	1112c <abort@plt>
   13574:	mov	r3, r2
   13578:	mov	r2, #0
   1357c:	b	13580 <__assert_fail@plt+0x243c>
   13580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13584:	add	fp, sp, #28
   13588:	sub	sp, sp, #36	; 0x24
   1358c:	mov	r4, r2
   13590:	str	r2, [sp, #24]
   13594:	mov	r5, r1
   13598:	mov	r6, r0
   1359c:	str	r0, [sp, #20]
   135a0:	movw	r8, #29080	; 0x7198
   135a4:	movt	r8, #2
   135a8:	cmp	r3, #0
   135ac:	movne	r8, r3
   135b0:	bl	11048 <__errno_location@plt>
   135b4:	str	r0, [sp, #28]
   135b8:	ldm	r8, {r3, r9}
   135bc:	ldr	r1, [r8, #40]	; 0x28
   135c0:	ldr	r2, [r8, #44]	; 0x2c
   135c4:	ldr	r7, [r0]
   135c8:	str	r7, [sp, #32]
   135cc:	add	sl, r8, #8
   135d0:	cmp	r4, #0
   135d4:	orreq	r9, r9, #1
   135d8:	stm	sp, {r3, r9, sl}
   135dc:	str	r1, [sp, #12]
   135e0:	str	r2, [sp, #16]
   135e4:	mov	r0, #0
   135e8:	mov	r1, #0
   135ec:	mov	r2, r6
   135f0:	mov	r3, r5
   135f4:	mov	r7, r5
   135f8:	bl	12574 <__assert_fail@plt+0x1430>
   135fc:	mov	r5, r0
   13600:	add	r4, r0, #1
   13604:	mov	r0, r4
   13608:	bl	14484 <__assert_fail@plt+0x3340>
   1360c:	mov	r6, r0
   13610:	ldr	r0, [r8]
   13614:	ldr	r1, [r8, #40]	; 0x28
   13618:	ldr	r2, [r8, #44]	; 0x2c
   1361c:	stm	sp, {r0, r9, sl}
   13620:	str	r1, [sp, #12]
   13624:	str	r2, [sp, #16]
   13628:	mov	r0, r6
   1362c:	mov	r1, r4
   13630:	ldr	r2, [sp, #20]
   13634:	mov	r3, r7
   13638:	bl	12574 <__assert_fail@plt+0x1430>
   1363c:	ldr	r0, [sp, #24]
   13640:	ldr	r1, [sp, #32]
   13644:	ldr	r2, [sp, #28]
   13648:	str	r1, [r2]
   1364c:	cmp	r0, #0
   13650:	strne	r5, [r0]
   13654:	mov	r0, r6
   13658:	sub	sp, fp, #28
   1365c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13660:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13664:	add	fp, sp, #24
   13668:	movw	r8, #28928	; 0x7100
   1366c:	movt	r8, #2
   13670:	ldr	r4, [r8]
   13674:	movw	r5, #28932	; 0x7104
   13678:	movt	r5, #2
   1367c:	ldr	r0, [r5]
   13680:	cmp	r0, #2
   13684:	blt	136b0 <__assert_fail@plt+0x256c>
   13688:	add	r7, r4, #12
   1368c:	mov	r6, #0
   13690:	ldr	r0, [r7, r6, lsl #3]
   13694:	bl	12310 <__assert_fail@plt+0x11cc>
   13698:	add	r0, r6, #1
   1369c:	ldr	r1, [r5]
   136a0:	add	r2, r6, #2
   136a4:	cmp	r2, r1
   136a8:	mov	r6, r0
   136ac:	blt	13690 <__assert_fail@plt+0x254c>
   136b0:	ldr	r0, [r4, #4]
   136b4:	movw	r7, #29128	; 0x71c8
   136b8:	movt	r7, #2
   136bc:	cmp	r0, r7
   136c0:	beq	136d8 <__assert_fail@plt+0x2594>
   136c4:	bl	12310 <__assert_fail@plt+0x11cc>
   136c8:	movw	r0, #28936	; 0x7108
   136cc:	movt	r0, #2
   136d0:	mov	r6, #256	; 0x100
   136d4:	strd	r6, [r0]
   136d8:	movw	r6, #28936	; 0x7108
   136dc:	movt	r6, #2
   136e0:	cmp	r4, r6
   136e4:	beq	136f4 <__assert_fail@plt+0x25b0>
   136e8:	mov	r0, r4
   136ec:	bl	12310 <__assert_fail@plt+0x11cc>
   136f0:	str	r6, [r8]
   136f4:	mov	r0, #1
   136f8:	str	r0, [r5]
   136fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13700:	movw	r3, #29080	; 0x7198
   13704:	movt	r3, #2
   13708:	mvn	r2, #0
   1370c:	b	13710 <__assert_fail@plt+0x25cc>
   13710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13714:	add	fp, sp, #28
   13718:	sub	sp, sp, #44	; 0x2c
   1371c:	mov	r7, r3
   13720:	str	r2, [sp, #36]	; 0x24
   13724:	str	r1, [sp, #32]
   13728:	mov	r5, r0
   1372c:	bl	11048 <__errno_location@plt>
   13730:	cmp	r5, #0
   13734:	blt	138a0 <__assert_fail@plt+0x275c>
   13738:	cmn	r5, #-2147483647	; 0x80000001
   1373c:	beq	138a0 <__assert_fail@plt+0x275c>
   13740:	movw	r4, #28928	; 0x7100
   13744:	movt	r4, #2
   13748:	ldr	r6, [r4]
   1374c:	str	r0, [sp, #28]
   13750:	ldr	r0, [r0]
   13754:	str	r0, [sp, #24]
   13758:	movw	r8, #28932	; 0x7104
   1375c:	movt	r8, #2
   13760:	ldr	r1, [r8]
   13764:	cmp	r1, r5
   13768:	ble	13774 <__assert_fail@plt+0x2630>
   1376c:	mov	sl, r6
   13770:	b	137dc <__assert_fail@plt+0x2698>
   13774:	str	r1, [fp, #-32]	; 0xffffffe0
   13778:	mov	r0, #8
   1377c:	str	r0, [sp]
   13780:	movw	r9, #28936	; 0x7108
   13784:	movt	r9, #2
   13788:	subs	r0, r6, r9
   1378c:	movne	r0, r6
   13790:	add	r2, r5, #1
   13794:	sub	r2, r2, r1
   13798:	sub	r1, fp, #32
   1379c:	mvn	r3, #-2147483648	; 0x80000000
   137a0:	bl	1456c <__assert_fail@plt+0x3428>
   137a4:	mov	sl, r0
   137a8:	str	r0, [r4]
   137ac:	cmp	r6, r9
   137b0:	ldrdeq	r0, [r9]
   137b4:	stmeq	sl, {r0, r1}
   137b8:	ldr	r1, [r8]
   137bc:	add	r0, sl, r1, lsl #3
   137c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   137c4:	sub	r1, r2, r1
   137c8:	lsl	r2, r1, #3
   137cc:	mov	r1, #0
   137d0:	bl	11060 <memset@plt>
   137d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   137d8:	str	r0, [r8]
   137dc:	mov	r9, sl
   137e0:	ldr	r6, [r9, r5, lsl #3]!
   137e4:	ldr	r4, [r9, #4]!
   137e8:	ldm	r7, {r0, r1}
   137ec:	ldr	r2, [r7, #40]	; 0x28
   137f0:	ldr	r3, [r7, #44]	; 0x2c
   137f4:	orr	r8, r1, #1
   137f8:	add	r1, r7, #8
   137fc:	stm	sp, {r0, r8}
   13800:	str	r1, [sp, #20]
   13804:	add	r0, sp, #8
   13808:	stm	r0, {r1, r2, r3}
   1380c:	mov	r0, r4
   13810:	mov	r1, r6
   13814:	ldr	r2, [sp, #32]
   13818:	ldr	r3, [sp, #36]	; 0x24
   1381c:	bl	12574 <__assert_fail@plt+0x1430>
   13820:	cmp	r6, r0
   13824:	bhi	13888 <__assert_fail@plt+0x2744>
   13828:	add	r6, r0, #1
   1382c:	str	r6, [sl, r5, lsl #3]
   13830:	movw	r0, #29128	; 0x71c8
   13834:	movt	r0, #2
   13838:	cmp	r4, r0
   1383c:	beq	13848 <__assert_fail@plt+0x2704>
   13840:	mov	r0, r4
   13844:	bl	12310 <__assert_fail@plt+0x11cc>
   13848:	mov	r0, r6
   1384c:	bl	14484 <__assert_fail@plt+0x3340>
   13850:	mov	r4, r0
   13854:	str	r0, [r9]
   13858:	ldr	r0, [r7]
   1385c:	ldr	r1, [r7, #40]	; 0x28
   13860:	ldr	r2, [r7, #44]	; 0x2c
   13864:	stm	sp, {r0, r8}
   13868:	ldr	r0, [sp, #20]
   1386c:	add	r3, sp, #8
   13870:	stm	r3, {r0, r1, r2}
   13874:	mov	r0, r4
   13878:	mov	r1, r6
   1387c:	ldr	r2, [sp, #32]
   13880:	ldr	r3, [sp, #36]	; 0x24
   13884:	bl	12574 <__assert_fail@plt+0x1430>
   13888:	ldr	r0, [sp, #28]
   1388c:	ldr	r1, [sp, #24]
   13890:	str	r1, [r0]
   13894:	mov	r0, r4
   13898:	sub	sp, fp, #28
   1389c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a0:	bl	1112c <abort@plt>
   138a4:	movw	r3, #29080	; 0x7198
   138a8:	movt	r3, #2
   138ac:	b	13710 <__assert_fail@plt+0x25cc>
   138b0:	mov	r1, r0
   138b4:	mov	r0, #0
   138b8:	b	13700 <__assert_fail@plt+0x25bc>
   138bc:	mov	r2, r1
   138c0:	mov	r1, r0
   138c4:	mov	r0, #0
   138c8:	b	138a4 <__assert_fail@plt+0x2760>
   138cc:	push	{r4, r5, r6, sl, fp, lr}
   138d0:	add	fp, sp, #16
   138d4:	sub	sp, sp, #48	; 0x30
   138d8:	mov	r4, r2
   138dc:	mov	r5, r0
   138e0:	mov	r6, sp
   138e4:	mov	r0, r6
   138e8:	bl	13908 <__assert_fail@plt+0x27c4>
   138ec:	mov	r0, r5
   138f0:	mov	r1, r4
   138f4:	mvn	r2, #0
   138f8:	mov	r3, r6
   138fc:	bl	13710 <__assert_fail@plt+0x25cc>
   13900:	sub	sp, fp, #16
   13904:	pop	{r4, r5, r6, sl, fp, pc}
   13908:	vmov.i32	q8, #0	; 0x00000000
   1390c:	mov	r2, #32
   13910:	mov	r3, r0
   13914:	vst1.32	{d16-d17}, [r3], r2
   13918:	vst1.32	{d16-d17}, [r3]
   1391c:	add	r2, r0, #16
   13920:	vst1.32	{d16-d17}, [r2]
   13924:	cmp	r1, #10
   13928:	strne	r1, [r0]
   1392c:	bxne	lr
   13930:	push	{fp, lr}
   13934:	mov	fp, sp
   13938:	bl	1112c <abort@plt>
   1393c:	push	{r4, r5, r6, r7, fp, lr}
   13940:	add	fp, sp, #16
   13944:	sub	sp, sp, #48	; 0x30
   13948:	mov	r4, r3
   1394c:	mov	r5, r2
   13950:	mov	r6, r0
   13954:	mov	r7, sp
   13958:	mov	r0, r7
   1395c:	bl	13908 <__assert_fail@plt+0x27c4>
   13960:	mov	r0, r6
   13964:	mov	r1, r5
   13968:	mov	r2, r4
   1396c:	mov	r3, r7
   13970:	bl	13710 <__assert_fail@plt+0x25cc>
   13974:	sub	sp, fp, #16
   13978:	pop	{r4, r5, r6, r7, fp, pc}
   1397c:	mov	r2, r1
   13980:	mov	r1, r0
   13984:	mov	r0, #0
   13988:	b	138cc <__assert_fail@plt+0x2788>
   1398c:	mov	r3, r2
   13990:	mov	r2, r1
   13994:	mov	r1, r0
   13998:	mov	r0, #0
   1399c:	b	1393c <__assert_fail@plt+0x27f8>
   139a0:	push	{r4, r5, r6, sl, fp, lr}
   139a4:	add	fp, sp, #16
   139a8:	sub	sp, sp, #48	; 0x30
   139ac:	mov	r4, r1
   139b0:	mov	r5, r0
   139b4:	mov	r0, #32
   139b8:	movw	r1, #29080	; 0x7198
   139bc:	movt	r1, #2
   139c0:	add	r3, r1, #16
   139c4:	vld1.64	{d16-d17}, [r1], r0
   139c8:	mov	r6, sp
   139cc:	vld1.64	{d18-d19}, [r3]
   139d0:	add	r3, r6, #16
   139d4:	vld1.64	{d20-d21}, [r1]
   139d8:	vst1.64	{d18-d19}, [r3]
   139dc:	mov	r1, r6
   139e0:	vst1.64	{d16-d17}, [r1], r0
   139e4:	vst1.64	{d20-d21}, [r1]
   139e8:	mov	r0, r6
   139ec:	mov	r1, r2
   139f0:	mov	r2, #1
   139f4:	bl	12468 <__assert_fail@plt+0x1324>
   139f8:	mov	r0, #0
   139fc:	mov	r1, r5
   13a00:	mov	r2, r4
   13a04:	mov	r3, r6
   13a08:	bl	13710 <__assert_fail@plt+0x25cc>
   13a0c:	sub	sp, fp, #16
   13a10:	pop	{r4, r5, r6, sl, fp, pc}
   13a14:	mov	r2, r1
   13a18:	mvn	r1, #0
   13a1c:	b	139a0 <__assert_fail@plt+0x285c>
   13a20:	mov	r1, #58	; 0x3a
   13a24:	b	13a14 <__assert_fail@plt+0x28d0>
   13a28:	mov	r2, #58	; 0x3a
   13a2c:	b	139a0 <__assert_fail@plt+0x285c>
   13a30:	push	{r4, r5, r6, sl, fp, lr}
   13a34:	add	fp, sp, #16
   13a38:	sub	sp, sp, #48	; 0x30
   13a3c:	mov	r4, r2
   13a40:	mov	r5, r0
   13a44:	mov	r6, sp
   13a48:	mov	r0, r6
   13a4c:	bl	13908 <__assert_fail@plt+0x27c4>
   13a50:	mov	r0, r6
   13a54:	mov	r1, #58	; 0x3a
   13a58:	mov	r2, #1
   13a5c:	bl	12468 <__assert_fail@plt+0x1324>
   13a60:	mov	r0, r5
   13a64:	mov	r1, r4
   13a68:	mvn	r2, #0
   13a6c:	mov	r3, r6
   13a70:	bl	13710 <__assert_fail@plt+0x25cc>
   13a74:	sub	sp, fp, #16
   13a78:	pop	{r4, r5, r6, sl, fp, pc}
   13a7c:	push	{fp, lr}
   13a80:	mov	fp, sp
   13a84:	sub	sp, sp, #8
   13a88:	mvn	ip, #0
   13a8c:	str	ip, [sp]
   13a90:	bl	13a9c <__assert_fail@plt+0x2958>
   13a94:	mov	sp, fp
   13a98:	pop	{fp, pc}
   13a9c:	push	{r4, r5, r6, r7, fp, lr}
   13aa0:	add	fp, sp, #16
   13aa4:	sub	sp, sp, #48	; 0x30
   13aa8:	mov	r7, r3
   13aac:	mov	r5, r0
   13ab0:	mov	r0, #32
   13ab4:	movw	r3, #29080	; 0x7198
   13ab8:	movt	r3, #2
   13abc:	add	r4, r3, #16
   13ac0:	vld1.64	{d16-d17}, [r3], r0
   13ac4:	mov	r6, sp
   13ac8:	vld1.64	{d18-d19}, [r4]
   13acc:	add	r4, r6, #16
   13ad0:	vld1.64	{d20-d21}, [r3]
   13ad4:	vst1.64	{d18-d19}, [r4]
   13ad8:	mov	r3, r6
   13adc:	vst1.64	{d16-d17}, [r3], r0
   13ae0:	vst1.64	{d20-d21}, [r3]
   13ae4:	mov	r0, r6
   13ae8:	bl	124c0 <__assert_fail@plt+0x137c>
   13aec:	ldr	r2, [fp, #8]
   13af0:	mov	r0, r5
   13af4:	mov	r1, r7
   13af8:	mov	r3, r6
   13afc:	bl	13710 <__assert_fail@plt+0x25cc>
   13b00:	sub	sp, fp, #16
   13b04:	pop	{r4, r5, r6, r7, fp, pc}
   13b08:	mov	r3, r2
   13b0c:	mov	r2, r1
   13b10:	mov	r1, r0
   13b14:	mov	r0, #0
   13b18:	b	13a7c <__assert_fail@plt+0x2938>
   13b1c:	push	{fp, lr}
   13b20:	mov	fp, sp
   13b24:	sub	sp, sp, #8
   13b28:	mov	ip, r2
   13b2c:	mov	r2, r1
   13b30:	mov	r1, r0
   13b34:	str	r3, [sp]
   13b38:	mov	r0, #0
   13b3c:	mov	r3, ip
   13b40:	bl	13a9c <__assert_fail@plt+0x2958>
   13b44:	mov	sp, fp
   13b48:	pop	{fp, pc}
   13b4c:	movw	r3, #28944	; 0x7110
   13b50:	movt	r3, #2
   13b54:	b	13710 <__assert_fail@plt+0x25cc>
   13b58:	mov	r2, r1
   13b5c:	mov	r1, r0
   13b60:	mov	r0, #0
   13b64:	b	13b4c <__assert_fail@plt+0x2a08>
   13b68:	mvn	r2, #0
   13b6c:	b	13b4c <__assert_fail@plt+0x2a08>
   13b70:	mov	r1, r0
   13b74:	mov	r0, #0
   13b78:	b	13b68 <__assert_fail@plt+0x2a24>
   13b7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b80:	add	fp, sp, #24
   13b84:	sub	sp, sp, #16
   13b88:	mov	r4, r1
   13b8c:	mov	r5, r0
   13b90:	mov	r7, #0
   13b94:	mov	r0, #0
   13b98:	mov	r1, r5
   13b9c:	mov	r2, #5
   13ba0:	bl	10f34 <dcgettext@plt>
   13ba4:	cmp	r0, r5
   13ba8:	beq	13bb4 <__assert_fail@plt+0x2a70>
   13bac:	sub	sp, fp, #24
   13bb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bb4:	bl	153c0 <__assert_fail@plt+0x427c>
   13bb8:	mov	r6, r0
   13bbc:	mov	r8, #56	; 0x38
   13bc0:	mov	r0, #45	; 0x2d
   13bc4:	stm	sp, {r0, r8}
   13bc8:	str	r7, [sp, #8]
   13bcc:	str	r7, [sp, #12]
   13bd0:	mov	r0, r6
   13bd4:	mov	r1, #85	; 0x55
   13bd8:	mov	r2, #84	; 0x54
   13bdc:	mov	r3, #70	; 0x46
   13be0:	bl	13c78 <__assert_fail@plt+0x2b34>
   13be4:	cmp	r0, #0
   13be8:	beq	13c04 <__assert_fail@plt+0x2ac0>
   13bec:	ldrb	r1, [r5]
   13bf0:	movw	r2, #24880	; 0x6130
   13bf4:	movt	r2, #1
   13bf8:	movw	r0, #24884	; 0x6134
   13bfc:	movt	r0, #1
   13c00:	b	13c48 <__assert_fail@plt+0x2b04>
   13c04:	mov	r0, #48	; 0x30
   13c08:	mov	r1, #51	; 0x33
   13c0c:	str	r8, [sp]
   13c10:	stmib	sp, {r0, r1}
   13c14:	str	r0, [sp, #12]
   13c18:	mov	r0, r6
   13c1c:	mov	r1, #71	; 0x47
   13c20:	mov	r2, #66	; 0x42
   13c24:	mov	r3, #49	; 0x31
   13c28:	bl	13c78 <__assert_fail@plt+0x2b34>
   13c2c:	cmp	r0, #0
   13c30:	beq	13c58 <__assert_fail@plt+0x2b14>
   13c34:	ldrb	r1, [r5]
   13c38:	movw	r2, #24888	; 0x6138
   13c3c:	movt	r2, #1
   13c40:	movw	r0, #24892	; 0x613c
   13c44:	movt	r0, #1
   13c48:	cmp	r1, #96	; 0x60
   13c4c:	moveq	r0, r2
   13c50:	sub	sp, fp, #24
   13c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c58:	movw	r1, #24874	; 0x612a
   13c5c:	movt	r1, #1
   13c60:	movw	r0, #24878	; 0x612e
   13c64:	movt	r0, #1
   13c68:	cmp	r4, #9
   13c6c:	moveq	r0, r1
   13c70:	sub	sp, fp, #24
   13c74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c78:	push	{r4, r5, r6, r7, fp, lr}
   13c7c:	add	fp, sp, #16
   13c80:	sub	sp, sp, #16
   13c84:	mov	r4, r3
   13c88:	mov	r5, r2
   13c8c:	mov	r7, r1
   13c90:	mov	r6, r0
   13c94:	mov	r0, r1
   13c98:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13c9c:	ldrb	r1, [r6]
   13ca0:	cmp	r0, #0
   13ca4:	andne	r1, r1, #223	; 0xdf
   13ca8:	mov	r0, #0
   13cac:	cmp	r1, r7
   13cb0:	bne	13cf0 <__assert_fail@plt+0x2bac>
   13cb4:	cmp	r7, #0
   13cb8:	moveq	r0, #1
   13cbc:	subeq	sp, fp, #16
   13cc0:	popeq	{r4, r5, r6, r7, fp, pc}
   13cc4:	ldr	r0, [fp, #20]
   13cc8:	ldr	r1, [fp, #16]
   13ccc:	ldr	r2, [fp, #12]
   13cd0:	ldr	r3, [fp, #8]
   13cd4:	str	r2, [sp]
   13cd8:	str	r1, [sp, #4]
   13cdc:	str	r0, [sp, #8]
   13ce0:	mov	r0, r6
   13ce4:	mov	r1, r5
   13ce8:	mov	r2, r4
   13cec:	bl	13cf8 <__assert_fail@plt+0x2bb4>
   13cf0:	sub	sp, fp, #16
   13cf4:	pop	{r4, r5, r6, r7, fp, pc}
   13cf8:	push	{r4, r5, r6, r7, fp, lr}
   13cfc:	add	fp, sp, #16
   13d00:	sub	sp, sp, #8
   13d04:	mov	r4, r3
   13d08:	mov	r5, r2
   13d0c:	mov	r7, r1
   13d10:	mov	r6, r0
   13d14:	mov	r0, r1
   13d18:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13d1c:	ldrb	r1, [r6, #1]
   13d20:	cmp	r0, #0
   13d24:	andne	r1, r1, #223	; 0xdf
   13d28:	mov	r0, #0
   13d2c:	cmp	r1, r7
   13d30:	bne	13d68 <__assert_fail@plt+0x2c24>
   13d34:	cmp	r7, #0
   13d38:	moveq	r0, #1
   13d3c:	subeq	sp, fp, #16
   13d40:	popeq	{r4, r5, r6, r7, fp, pc}
   13d44:	ldr	r0, [fp, #16]
   13d48:	ldr	r1, [fp, #12]
   13d4c:	ldr	r3, [fp, #8]
   13d50:	str	r1, [sp]
   13d54:	str	r0, [sp, #4]
   13d58:	mov	r0, r6
   13d5c:	mov	r1, r5
   13d60:	mov	r2, r4
   13d64:	bl	13d70 <__assert_fail@plt+0x2c2c>
   13d68:	sub	sp, fp, #16
   13d6c:	pop	{r4, r5, r6, r7, fp, pc}
   13d70:	push	{r4, r5, r6, r7, fp, lr}
   13d74:	add	fp, sp, #16
   13d78:	sub	sp, sp, #8
   13d7c:	mov	r4, r3
   13d80:	mov	r5, r2
   13d84:	mov	r7, r1
   13d88:	mov	r6, r0
   13d8c:	mov	r0, r1
   13d90:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13d94:	ldrb	r1, [r6, #2]
   13d98:	cmp	r0, #0
   13d9c:	andne	r1, r1, #223	; 0xdf
   13da0:	mov	r0, #0
   13da4:	cmp	r1, r7
   13da8:	bne	13dd8 <__assert_fail@plt+0x2c94>
   13dac:	cmp	r7, #0
   13db0:	moveq	r0, #1
   13db4:	subeq	sp, fp, #16
   13db8:	popeq	{r4, r5, r6, r7, fp, pc}
   13dbc:	ldr	r0, [fp, #12]
   13dc0:	ldr	r3, [fp, #8]
   13dc4:	str	r0, [sp]
   13dc8:	mov	r0, r6
   13dcc:	mov	r1, r5
   13dd0:	mov	r2, r4
   13dd4:	bl	13de0 <__assert_fail@plt+0x2c9c>
   13dd8:	sub	sp, fp, #16
   13ddc:	pop	{r4, r5, r6, r7, fp, pc}
   13de0:	push	{r4, r5, r6, r7, fp, lr}
   13de4:	add	fp, sp, #16
   13de8:	mov	r4, r3
   13dec:	mov	r5, r2
   13df0:	mov	r7, r1
   13df4:	mov	r6, r0
   13df8:	mov	r0, r1
   13dfc:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13e00:	ldrb	r1, [r6, #3]
   13e04:	ldr	r3, [fp, #8]
   13e08:	cmp	r0, #0
   13e0c:	andne	r1, r1, #223	; 0xdf
   13e10:	mov	r0, #0
   13e14:	cmp	r1, r7
   13e18:	popne	{r4, r5, r6, r7, fp, pc}
   13e1c:	cmp	r7, #0
   13e20:	beq	13e38 <__assert_fail@plt+0x2cf4>
   13e24:	mov	r0, r6
   13e28:	mov	r1, r5
   13e2c:	mov	r2, r4
   13e30:	pop	{r4, r5, r6, r7, fp, lr}
   13e34:	b	13e40 <__assert_fail@plt+0x2cfc>
   13e38:	mov	r0, #1
   13e3c:	pop	{r4, r5, r6, r7, fp, pc}
   13e40:	push	{r4, r5, r6, r7, fp, lr}
   13e44:	add	fp, sp, #16
   13e48:	mov	r4, r3
   13e4c:	mov	r5, r2
   13e50:	mov	r7, r1
   13e54:	mov	r6, r0
   13e58:	mov	r0, r1
   13e5c:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13e60:	ldrb	r1, [r6, #4]
   13e64:	cmp	r0, #0
   13e68:	andne	r1, r1, #223	; 0xdf
   13e6c:	mov	r0, #0
   13e70:	cmp	r1, r7
   13e74:	popne	{r4, r5, r6, r7, fp, pc}
   13e78:	cmp	r7, #0
   13e7c:	beq	13e94 <__assert_fail@plt+0x2d50>
   13e80:	mov	r0, r6
   13e84:	mov	r1, r5
   13e88:	mov	r2, r4
   13e8c:	pop	{r4, r5, r6, r7, fp, lr}
   13e90:	b	13e9c <__assert_fail@plt+0x2d58>
   13e94:	mov	r0, #1
   13e98:	pop	{r4, r5, r6, r7, fp, pc}
   13e9c:	push	{r4, r5, r6, sl, fp, lr}
   13ea0:	add	fp, sp, #16
   13ea4:	mov	r4, r2
   13ea8:	mov	r6, r1
   13eac:	mov	r5, r0
   13eb0:	mov	r0, r1
   13eb4:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13eb8:	ldrb	r1, [r5, #5]
   13ebc:	cmp	r0, #0
   13ec0:	andne	r1, r1, #223	; 0xdf
   13ec4:	mov	r0, #0
   13ec8:	cmp	r1, r6
   13ecc:	popne	{r4, r5, r6, sl, fp, pc}
   13ed0:	cmp	r6, #0
   13ed4:	beq	13ee8 <__assert_fail@plt+0x2da4>
   13ed8:	mov	r0, r5
   13edc:	mov	r1, r4
   13ee0:	pop	{r4, r5, r6, sl, fp, lr}
   13ee4:	b	13ef0 <__assert_fail@plt+0x2dac>
   13ee8:	mov	r0, #1
   13eec:	pop	{r4, r5, r6, sl, fp, pc}
   13ef0:	push	{r4, r5, fp, lr}
   13ef4:	add	fp, sp, #8
   13ef8:	mov	r5, r1
   13efc:	mov	r4, r0
   13f00:	mov	r0, r1
   13f04:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13f08:	ldrb	r1, [r4, #6]
   13f0c:	cmp	r0, #0
   13f10:	andne	r1, r1, #223	; 0xdf
   13f14:	mov	r0, #0
   13f18:	cmp	r1, r5
   13f1c:	popne	{r4, r5, fp, pc}
   13f20:	cmp	r5, #0
   13f24:	beq	13f34 <__assert_fail@plt+0x2df0>
   13f28:	mov	r0, r4
   13f2c:	pop	{r4, r5, fp, lr}
   13f30:	b	13f3c <__assert_fail@plt+0x2df8>
   13f34:	mov	r0, #1
   13f38:	pop	{r4, r5, fp, pc}
   13f3c:	push	{r4, sl, fp, lr}
   13f40:	add	fp, sp, #8
   13f44:	mov	r4, r0
   13f48:	mov	r0, #0
   13f4c:	bl	11fe0 <__assert_fail@plt+0xe9c>
   13f50:	ldrb	r1, [r4, #7]
   13f54:	cmp	r0, #0
   13f58:	beq	13f70 <__assert_fail@plt+0x2e2c>
   13f5c:	tst	r1, #223	; 0xdf
   13f60:	moveq	r0, #1
   13f64:	popeq	{r4, sl, fp, pc}
   13f68:	mov	r0, #0
   13f6c:	pop	{r4, sl, fp, pc}
   13f70:	cmp	r1, #0
   13f74:	moveq	r0, #1
   13f78:	popeq	{r4, sl, fp, pc}
   13f7c:	mov	r0, #0
   13f80:	pop	{r4, sl, fp, pc}
   13f84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f88:	add	fp, sp, #24
   13f8c:	sub	sp, sp, #32
   13f90:	mov	r4, r2
   13f94:	mov	r8, r0
   13f98:	ldr	r6, [fp, #12]
   13f9c:	ldr	r7, [fp, #8]
   13fa0:	cmp	r1, #0
   13fa4:	beq	13fcc <__assert_fail@plt+0x2e88>
   13fa8:	mov	r5, r1
   13fac:	str	r4, [sp]
   13fb0:	str	r3, [sp, #4]
   13fb4:	movw	r2, #24980	; 0x6194
   13fb8:	movt	r2, #1
   13fbc:	mov	r0, r8
   13fc0:	mov	r1, #1
   13fc4:	mov	r3, r5
   13fc8:	b	13fe4 <__assert_fail@plt+0x2ea0>
   13fcc:	str	r3, [sp]
   13fd0:	movw	r2, #24992	; 0x61a0
   13fd4:	movt	r2, #1
   13fd8:	mov	r0, r8
   13fdc:	mov	r1, #1
   13fe0:	mov	r3, r4
   13fe4:	bl	11090 <__fprintf_chk@plt>
   13fe8:	movw	r1, #24999	; 0x61a7
   13fec:	movt	r1, #1
   13ff0:	mov	r0, #0
   13ff4:	mov	r2, #5
   13ff8:	bl	10f34 <dcgettext@plt>
   13ffc:	mov	r3, r0
   14000:	movw	r0, #2022	; 0x7e6
   14004:	str	r0, [sp]
   14008:	movw	r2, #25717	; 0x6475
   1400c:	movt	r2, #1
   14010:	mov	r0, r8
   14014:	mov	r1, #1
   14018:	bl	11090 <__fprintf_chk@plt>
   1401c:	movw	r4, #24323	; 0x5f03
   14020:	movt	r4, #1
   14024:	mov	r0, r4
   14028:	mov	r1, r8
   1402c:	bl	10ebc <fputs_unlocked@plt>
   14030:	movw	r1, #25003	; 0x61ab
   14034:	movt	r1, #1
   14038:	mov	r0, #0
   1403c:	mov	r2, #5
   14040:	bl	10f34 <dcgettext@plt>
   14044:	mov	r2, r0
   14048:	movw	r3, #25174	; 0x6256
   1404c:	movt	r3, #1
   14050:	mov	r0, r8
   14054:	mov	r1, #1
   14058:	bl	11090 <__fprintf_chk@plt>
   1405c:	mov	r0, r4
   14060:	mov	r1, r8
   14064:	bl	10ebc <fputs_unlocked@plt>
   14068:	cmp	r6, #9
   1406c:	bhi	140a8 <__assert_fail@plt+0x2f64>
   14070:	add	r0, pc, #0
   14074:	ldr	pc, [r0, r6, lsl #2]
   14078:	andeq	r4, r1, r0, lsr #1
   1407c:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   14080:	andeq	r4, r1, r4, ror #1
   14084:	andeq	r4, r1, ip, lsl #2
   14088:	andeq	r4, r1, r4, lsr r1
   1408c:	andeq	r4, r1, ip, asr r1
   14090:	andeq	r4, r1, r4, lsl #3
   14094:			; <UNDEFINED> instruction: 0x000141bc
   14098:	andeq	r4, r1, ip, asr r2
   1409c:	andeq	r4, r1, r4, lsl #4
   140a0:	sub	sp, fp, #24
   140a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140a8:	movw	r1, #25527	; 0x63b7
   140ac:	movt	r1, #1
   140b0:	b	1420c <__assert_fail@plt+0x30c8>
   140b4:	movw	r1, #25208	; 0x6278
   140b8:	movt	r1, #1
   140bc:	mov	r0, #0
   140c0:	mov	r2, #5
   140c4:	bl	10f34 <dcgettext@plt>
   140c8:	mov	r2, r0
   140cc:	ldr	r3, [r7]
   140d0:	mov	r0, r8
   140d4:	mov	r1, #1
   140d8:	sub	sp, fp, #24
   140dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   140e0:	b	11090 <__fprintf_chk@plt>
   140e4:	movw	r1, #25224	; 0x6288
   140e8:	movt	r1, #1
   140ec:	mov	r0, #0
   140f0:	mov	r2, #5
   140f4:	bl	10f34 <dcgettext@plt>
   140f8:	mov	r2, r0
   140fc:	ldr	r3, [r7]
   14100:	ldr	r0, [r7, #4]
   14104:	str	r0, [sp]
   14108:	b	141f8 <__assert_fail@plt+0x30b4>
   1410c:	movw	r1, #25247	; 0x629f
   14110:	movt	r1, #1
   14114:	mov	r0, #0
   14118:	mov	r2, #5
   1411c:	bl	10f34 <dcgettext@plt>
   14120:	mov	r2, r0
   14124:	ldr	r3, [r7]
   14128:	ldmib	r7, {r0, r1}
   1412c:	stm	sp, {r0, r1}
   14130:	b	141f8 <__assert_fail@plt+0x30b4>
   14134:	movw	r1, #25275	; 0x62bb
   14138:	movt	r1, #1
   1413c:	mov	r0, #0
   14140:	mov	r2, #5
   14144:	bl	10f34 <dcgettext@plt>
   14148:	mov	r2, r0
   1414c:	ldr	r3, [r7]
   14150:	ldmib	r7, {r0, r1, r7}
   14154:	stm	sp, {r0, r1, r7}
   14158:	b	141f8 <__assert_fail@plt+0x30b4>
   1415c:	movw	r1, #25307	; 0x62db
   14160:	movt	r1, #1
   14164:	mov	r0, #0
   14168:	mov	r2, #5
   1416c:	bl	10f34 <dcgettext@plt>
   14170:	mov	r2, r0
   14174:	ldr	r3, [r7]
   14178:	ldmib	r7, {r0, r1, r6, r7}
   1417c:	stm	sp, {r0, r1, r6, r7}
   14180:	b	141f8 <__assert_fail@plt+0x30b4>
   14184:	movw	r1, #25343	; 0x62ff
   14188:	movt	r1, #1
   1418c:	mov	r0, #0
   14190:	mov	r2, #5
   14194:	bl	10f34 <dcgettext@plt>
   14198:	mov	r2, r0
   1419c:	ldr	r3, [r7]
   141a0:	ldmib	r7, {r0, r1, r6}
   141a4:	ldr	r5, [r7, #16]
   141a8:	ldr	r7, [r7, #20]
   141ac:	stm	sp, {r0, r1, r6}
   141b0:	str	r5, [sp, #12]
   141b4:	str	r7, [sp, #16]
   141b8:	b	141f8 <__assert_fail@plt+0x30b4>
   141bc:	movw	r1, #25383	; 0x6327
   141c0:	movt	r1, #1
   141c4:	mov	r0, #0
   141c8:	mov	r2, #5
   141cc:	bl	10f34 <dcgettext@plt>
   141d0:	mov	r2, r0
   141d4:	ldr	r3, [r7]
   141d8:	ldmib	r7, {r0, r1, r6}
   141dc:	ldr	r5, [r7, #16]
   141e0:	ldr	r4, [r7, #20]
   141e4:	ldr	r7, [r7, #24]
   141e8:	stm	sp, {r0, r1, r6}
   141ec:	str	r5, [sp, #12]
   141f0:	str	r4, [sp, #16]
   141f4:	str	r7, [sp, #20]
   141f8:	mov	r0, r8
   141fc:	mov	r1, #1
   14200:	b	142ac <__assert_fail@plt+0x3168>
   14204:	movw	r1, #25475	; 0x6383
   14208:	movt	r1, #1
   1420c:	mov	r0, #0
   14210:	mov	r2, #5
   14214:	bl	10f34 <dcgettext@plt>
   14218:	mov	ip, r0
   1421c:	ldr	r3, [r7]
   14220:	ldr	r0, [r7, #4]
   14224:	ldr	r1, [r7, #8]
   14228:	ldr	r6, [r7, #12]
   1422c:	ldr	r5, [r7, #16]
   14230:	ldr	r4, [r7, #20]
   14234:	ldr	r2, [r7, #24]
   14238:	ldr	lr, [r7, #28]
   1423c:	ldr	r7, [r7, #32]
   14240:	stm	sp, {r0, r1, r6}
   14244:	str	r5, [sp, #12]
   14248:	str	r4, [sp, #16]
   1424c:	str	r2, [sp, #20]
   14250:	str	lr, [sp, #24]
   14254:	str	r7, [sp, #28]
   14258:	b	142a0 <__assert_fail@plt+0x315c>
   1425c:	movw	r1, #25427	; 0x6353
   14260:	movt	r1, #1
   14264:	mov	r0, #0
   14268:	mov	r2, #5
   1426c:	bl	10f34 <dcgettext@plt>
   14270:	mov	ip, r0
   14274:	ldr	r3, [r7]
   14278:	ldmib	r7, {r0, r1, r6}
   1427c:	ldr	r5, [r7, #16]
   14280:	ldr	r4, [r7, #20]
   14284:	ldr	r2, [r7, #24]
   14288:	ldr	r7, [r7, #28]
   1428c:	stm	sp, {r0, r1, r6}
   14290:	str	r5, [sp, #12]
   14294:	str	r4, [sp, #16]
   14298:	str	r2, [sp, #20]
   1429c:	str	r7, [sp, #24]
   142a0:	mov	r0, r8
   142a4:	mov	r1, #1
   142a8:	mov	r2, ip
   142ac:	bl	11090 <__fprintf_chk@plt>
   142b0:	sub	sp, fp, #24
   142b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142b8:	push	{r4, sl, fp, lr}
   142bc:	add	fp, sp, #8
   142c0:	sub	sp, sp, #8
   142c4:	mov	lr, #0
   142c8:	ldr	ip, [fp, #8]
   142cc:	ldr	r4, [ip, lr, lsl #2]
   142d0:	add	lr, lr, #1
   142d4:	cmp	r4, #0
   142d8:	bne	142cc <__assert_fail@plt+0x3188>
   142dc:	sub	r4, lr, #1
   142e0:	str	ip, [sp]
   142e4:	str	r4, [sp, #4]
   142e8:	bl	13f84 <__assert_fail@plt+0x2e40>
   142ec:	sub	sp, fp, #8
   142f0:	pop	{r4, sl, fp, pc}
   142f4:	push	{r4, r5, fp, lr}
   142f8:	add	fp, sp, #8
   142fc:	sub	sp, sp, #48	; 0x30
   14300:	mov	ip, #0
   14304:	ldr	r4, [fp, #8]
   14308:	add	lr, sp, #8
   1430c:	ldr	r5, [r4]
   14310:	str	r5, [lr, ip, lsl #2]
   14314:	cmp	r5, #0
   14318:	beq	1432c <__assert_fail@plt+0x31e8>
   1431c:	add	ip, ip, #1
   14320:	add	r4, r4, #4
   14324:	cmp	ip, #10
   14328:	bcc	1430c <__assert_fail@plt+0x31c8>
   1432c:	str	lr, [sp]
   14330:	str	ip, [sp, #4]
   14334:	bl	13f84 <__assert_fail@plt+0x2e40>
   14338:	sub	sp, fp, #8
   1433c:	pop	{r4, r5, fp, pc}
   14340:	push	{fp, lr}
   14344:	mov	fp, sp
   14348:	sub	sp, sp, #8
   1434c:	add	ip, fp, #8
   14350:	str	ip, [sp, #4]
   14354:	str	ip, [sp]
   14358:	bl	142f4 <__assert_fail@plt+0x31b0>
   1435c:	mov	sp, fp
   14360:	pop	{fp, pc}
   14364:	push	{fp, lr}
   14368:	mov	fp, sp
   1436c:	movw	r0, #29012	; 0x7154
   14370:	movt	r0, #2
   14374:	ldr	r1, [r0]
   14378:	movw	r0, #24323	; 0x5f03
   1437c:	movt	r0, #1
   14380:	bl	10ebc <fputs_unlocked@plt>
   14384:	movw	r1, #25587	; 0x63f3
   14388:	movt	r1, #1
   1438c:	mov	r0, #0
   14390:	mov	r2, #5
   14394:	bl	10f34 <dcgettext@plt>
   14398:	mov	r1, r0
   1439c:	movw	r2, #25607	; 0x6407
   143a0:	movt	r2, #1
   143a4:	mov	r0, #1
   143a8:	bl	1106c <__printf_chk@plt>
   143ac:	movw	r1, #25629	; 0x641d
   143b0:	movt	r1, #1
   143b4:	mov	r0, #0
   143b8:	mov	r2, #5
   143bc:	bl	10f34 <dcgettext@plt>
   143c0:	mov	r1, r0
   143c4:	movw	r2, #23804	; 0x5cfc
   143c8:	movt	r2, #1
   143cc:	movw	r3, #24132	; 0x5e44
   143d0:	movt	r3, #1
   143d4:	mov	r0, #1
   143d8:	bl	1106c <__printf_chk@plt>
   143dc:	movw	r1, #25649	; 0x6431
   143e0:	movt	r1, #1
   143e4:	mov	r0, #0
   143e8:	mov	r2, #5
   143ec:	bl	10f34 <dcgettext@plt>
   143f0:	mov	r1, r0
   143f4:	movw	r2, #25688	; 0x6458
   143f8:	movt	r2, #1
   143fc:	mov	r0, #1
   14400:	pop	{fp, lr}
   14404:	b	1106c <__printf_chk@plt>
   14408:	b	1440c <__assert_fail@plt+0x32c8>
   1440c:	push	{r4, r5, r6, sl, fp, lr}
   14410:	add	fp, sp, #16
   14414:	mov	r4, r2
   14418:	mov	r5, r1
   1441c:	mov	r6, r0
   14420:	bl	15458 <__assert_fail@plt+0x4314>
   14424:	cmp	r0, #0
   14428:	popne	{r4, r5, r6, sl, fp, pc}
   1442c:	cmp	r6, #0
   14430:	beq	14444 <__assert_fail@plt+0x3300>
   14434:	cmp	r5, #0
   14438:	cmpne	r4, #0
   1443c:	bne	14444 <__assert_fail@plt+0x3300>
   14440:	pop	{r4, r5, r6, sl, fp, pc}
   14444:	bl	147f8 <__assert_fail@plt+0x36b4>
   14448:	push	{fp, lr}
   1444c:	mov	fp, sp
   14450:	bl	14df8 <__assert_fail@plt+0x3cb4>
   14454:	bl	1445c <__assert_fail@plt+0x3318>
   14458:	pop	{fp, pc}
   1445c:	cmp	r0, #0
   14460:	bxne	lr
   14464:	push	{fp, lr}
   14468:	mov	fp, sp
   1446c:	bl	147f8 <__assert_fail@plt+0x36b4>
   14470:	push	{fp, lr}
   14474:	mov	fp, sp
   14478:	bl	1538c <__assert_fail@plt+0x4248>
   1447c:	bl	1445c <__assert_fail@plt+0x3318>
   14480:	pop	{fp, pc}
   14484:	b	14448 <__assert_fail@plt+0x3304>
   14488:	push	{r4, r5, fp, lr}
   1448c:	add	fp, sp, #8
   14490:	mov	r4, r1
   14494:	mov	r5, r0
   14498:	bl	14e28 <__assert_fail@plt+0x3ce4>
   1449c:	cmp	r0, #0
   144a0:	popne	{r4, r5, fp, pc}
   144a4:	cmp	r5, #0
   144a8:	beq	144b8 <__assert_fail@plt+0x3374>
   144ac:	cmp	r4, #0
   144b0:	bne	144b8 <__assert_fail@plt+0x3374>
   144b4:	pop	{r4, r5, fp, pc}
   144b8:	bl	147f8 <__assert_fail@plt+0x36b4>
   144bc:	push	{fp, lr}
   144c0:	mov	fp, sp
   144c4:	bl	15390 <__assert_fail@plt+0x424c>
   144c8:	bl	1445c <__assert_fail@plt+0x3318>
   144cc:	pop	{fp, pc}
   144d0:	push	{fp, lr}
   144d4:	mov	fp, sp
   144d8:	bl	153a0 <__assert_fail@plt+0x425c>
   144dc:	bl	1445c <__assert_fail@plt+0x3318>
   144e0:	pop	{fp, pc}
   144e4:	push	{fp, lr}
   144e8:	mov	fp, sp
   144ec:	mov	r2, r1
   144f0:	mov	r1, r0
   144f4:	mov	r0, #0
   144f8:	bl	1440c <__assert_fail@plt+0x32c8>
   144fc:	pop	{fp, pc}
   14500:	mov	r2, r1
   14504:	mov	r1, r0
   14508:	mov	r0, #0
   1450c:	b	144d0 <__assert_fail@plt+0x338c>
   14510:	mov	r2, #1
   14514:	b	14518 <__assert_fail@plt+0x33d4>
   14518:	push	{r4, r5, fp, lr}
   1451c:	add	fp, sp, #8
   14520:	mov	r4, r1
   14524:	ldr	r5, [r1]
   14528:	cmp	r0, #0
   1452c:	beq	14544 <__assert_fail@plt+0x3400>
   14530:	mov	r1, #1
   14534:	add	r1, r1, r5, lsr #1
   14538:	adds	r5, r5, r1
   1453c:	bcc	1455c <__assert_fail@plt+0x3418>
   14540:	bl	147f8 <__assert_fail@plt+0x36b4>
   14544:	cmp	r5, #0
   14548:	bne	1455c <__assert_fail@plt+0x3418>
   1454c:	mov	r1, #64	; 0x40
   14550:	udiv	r5, r1, r2
   14554:	cmp	r2, #64	; 0x40
   14558:	addhi	r5, r5, #1
   1455c:	mov	r1, r5
   14560:	bl	1440c <__assert_fail@plt+0x32c8>
   14564:	str	r5, [r4]
   14568:	pop	{r4, r5, fp, pc}
   1456c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14570:	add	fp, sp, #24
   14574:	mov	r8, r1
   14578:	ldr	r6, [r1]
   1457c:	add	r1, r6, r6, asr #1
   14580:	cmp	r1, r6
   14584:	mvnvs	r1, #-2147483648	; 0x80000000
   14588:	cmp	r1, r3
   1458c:	mov	r5, r1
   14590:	movgt	r5, r3
   14594:	cmn	r3, #1
   14598:	movle	r5, r1
   1459c:	ldr	r4, [fp, #8]
   145a0:	cmn	r4, #1
   145a4:	ble	145cc <__assert_fail@plt+0x3488>
   145a8:	cmp	r4, #0
   145ac:	beq	14620 <__assert_fail@plt+0x34dc>
   145b0:	cmn	r5, #1
   145b4:	ble	145f4 <__assert_fail@plt+0x34b0>
   145b8:	mvn	r7, #-2147483648	; 0x80000000
   145bc:	udiv	r1, r7, r4
   145c0:	cmp	r1, r5
   145c4:	bge	14620 <__assert_fail@plt+0x34dc>
   145c8:	b	14630 <__assert_fail@plt+0x34ec>
   145cc:	cmn	r5, #1
   145d0:	ble	14610 <__assert_fail@plt+0x34cc>
   145d4:	cmn	r4, #1
   145d8:	beq	14620 <__assert_fail@plt+0x34dc>
   145dc:	mov	r1, #-2147483648	; 0x80000000
   145e0:	sdiv	r1, r1, r4
   145e4:	mvn	r7, #-2147483648	; 0x80000000
   145e8:	cmp	r1, r5
   145ec:	bge	14620 <__assert_fail@plt+0x34dc>
   145f0:	b	14630 <__assert_fail@plt+0x34ec>
   145f4:	beq	14620 <__assert_fail@plt+0x34dc>
   145f8:	mov	r1, #-2147483648	; 0x80000000
   145fc:	sdiv	r1, r1, r5
   14600:	mvn	r7, #-2147483648	; 0x80000000
   14604:	cmp	r1, r4
   14608:	bge	14620 <__assert_fail@plt+0x34dc>
   1460c:	b	14630 <__assert_fail@plt+0x34ec>
   14610:	mvn	r7, #-2147483648	; 0x80000000
   14614:	sdiv	r1, r7, r4
   14618:	cmp	r5, r1
   1461c:	blt	14630 <__assert_fail@plt+0x34ec>
   14620:	mul	r1, r5, r4
   14624:	mov	r7, #64	; 0x40
   14628:	cmp	r1, #63	; 0x3f
   1462c:	bgt	14638 <__assert_fail@plt+0x34f4>
   14630:	sdiv	r5, r7, r4
   14634:	mul	r1, r5, r4
   14638:	cmp	r0, #0
   1463c:	moveq	r7, #0
   14640:	streq	r7, [r8]
   14644:	sub	r7, r5, r6
   14648:	cmp	r7, r2
   1464c:	bge	146f8 <__assert_fail@plt+0x35b4>
   14650:	add	r5, r6, r2
   14654:	mov	r1, #0
   14658:	cmp	r5, r3
   1465c:	mov	r2, #0
   14660:	movwgt	r2, #1
   14664:	cmn	r3, #1
   14668:	movwgt	r1, #1
   1466c:	cmp	r5, r6
   14670:	bvs	146e0 <__assert_fail@plt+0x359c>
   14674:	ands	r1, r1, r2
   14678:	bne	146e0 <__assert_fail@plt+0x359c>
   1467c:	cmn	r4, #1
   14680:	ble	146a8 <__assert_fail@plt+0x3564>
   14684:	cmp	r4, #0
   14688:	beq	146f4 <__assert_fail@plt+0x35b0>
   1468c:	cmn	r5, #1
   14690:	ble	146cc <__assert_fail@plt+0x3588>
   14694:	mvn	r1, #-2147483648	; 0x80000000
   14698:	udiv	r1, r1, r4
   1469c:	cmp	r1, r5
   146a0:	bge	146f4 <__assert_fail@plt+0x35b0>
   146a4:	b	146e0 <__assert_fail@plt+0x359c>
   146a8:	cmn	r5, #1
   146ac:	ble	146e4 <__assert_fail@plt+0x35a0>
   146b0:	cmn	r4, #1
   146b4:	beq	146f4 <__assert_fail@plt+0x35b0>
   146b8:	mov	r1, #-2147483648	; 0x80000000
   146bc:	sdiv	r1, r1, r4
   146c0:	cmp	r1, r5
   146c4:	bge	146f4 <__assert_fail@plt+0x35b0>
   146c8:	b	146e0 <__assert_fail@plt+0x359c>
   146cc:	beq	146f4 <__assert_fail@plt+0x35b0>
   146d0:	mov	r1, #-2147483648	; 0x80000000
   146d4:	sdiv	r1, r1, r5
   146d8:	cmp	r1, r4
   146dc:	bge	146f4 <__assert_fail@plt+0x35b0>
   146e0:	bl	147f8 <__assert_fail@plt+0x36b4>
   146e4:	mvn	r1, #-2147483648	; 0x80000000
   146e8:	sdiv	r1, r1, r4
   146ec:	cmp	r5, r1
   146f0:	blt	146e0 <__assert_fail@plt+0x359c>
   146f4:	mul	r1, r5, r4
   146f8:	bl	14488 <__assert_fail@plt+0x3344>
   146fc:	str	r5, [r8]
   14700:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14704:	mov	r1, #1
   14708:	b	1470c <__assert_fail@plt+0x35c8>
   1470c:	push	{fp, lr}
   14710:	mov	fp, sp
   14714:	bl	14da4 <__assert_fail@plt+0x3c60>
   14718:	bl	1445c <__assert_fail@plt+0x3318>
   1471c:	pop	{fp, pc}
   14720:	mov	r1, #1
   14724:	b	14728 <__assert_fail@plt+0x35e4>
   14728:	push	{fp, lr}
   1472c:	mov	fp, sp
   14730:	bl	1539c <__assert_fail@plt+0x4258>
   14734:	bl	1445c <__assert_fail@plt+0x3318>
   14738:	pop	{fp, pc}
   1473c:	push	{r4, r5, r6, sl, fp, lr}
   14740:	add	fp, sp, #16
   14744:	mov	r4, r1
   14748:	mov	r5, r0
   1474c:	mov	r0, r1
   14750:	bl	14448 <__assert_fail@plt+0x3304>
   14754:	mov	r6, r0
   14758:	mov	r1, r5
   1475c:	mov	r2, r4
   14760:	bl	10f04 <memcpy@plt>
   14764:	mov	r0, r6
   14768:	pop	{r4, r5, r6, sl, fp, pc}
   1476c:	push	{r4, r5, r6, sl, fp, lr}
   14770:	add	fp, sp, #16
   14774:	mov	r4, r1
   14778:	mov	r5, r0
   1477c:	mov	r0, r1
   14780:	bl	14470 <__assert_fail@plt+0x332c>
   14784:	mov	r6, r0
   14788:	mov	r1, r5
   1478c:	mov	r2, r4
   14790:	bl	10f04 <memcpy@plt>
   14794:	mov	r0, r6
   14798:	pop	{r4, r5, r6, sl, fp, pc}
   1479c:	push	{r4, r5, r6, sl, fp, lr}
   147a0:	add	fp, sp, #16
   147a4:	mov	r4, r1
   147a8:	mov	r5, r0
   147ac:	add	r0, r1, #1
   147b0:	bl	14470 <__assert_fail@plt+0x332c>
   147b4:	mov	r6, r0
   147b8:	mov	r0, #0
   147bc:	strb	r0, [r6, r4]
   147c0:	mov	r0, r6
   147c4:	mov	r1, r5
   147c8:	mov	r2, r4
   147cc:	bl	10f04 <memcpy@plt>
   147d0:	mov	r0, r6
   147d4:	pop	{r4, r5, r6, sl, fp, pc}
   147d8:	push	{r4, sl, fp, lr}
   147dc:	add	fp, sp, #8
   147e0:	mov	r4, r0
   147e4:	bl	11030 <strlen@plt>
   147e8:	add	r1, r0, #1
   147ec:	mov	r0, r4
   147f0:	pop	{r4, sl, fp, lr}
   147f4:	b	1473c <__assert_fail@plt+0x35f8>
   147f8:	push	{fp, lr}
   147fc:	mov	fp, sp
   14800:	movw	r0, #28924	; 0x70fc
   14804:	movt	r0, #2
   14808:	ldr	r4, [r0]
   1480c:	movw	r1, #25764	; 0x64a4
   14810:	movt	r1, #1
   14814:	mov	r0, #0
   14818:	mov	r2, #5
   1481c:	bl	10f34 <dcgettext@plt>
   14820:	mov	r3, r0
   14824:	movw	r2, #24727	; 0x6097
   14828:	movt	r2, #1
   1482c:	mov	r0, r4
   14830:	mov	r1, #0
   14834:	bl	10fb8 <error@plt>
   14838:	bl	1112c <abort@plt>
   1483c:	push	{r4, sl, fp, lr}
   14840:	add	fp, sp, #8
   14844:	bl	14e7c <__assert_fail@plt+0x3d38>
   14848:	mov	r4, r0
   1484c:	cmp	r0, #0
   14850:	bne	14864 <__assert_fail@plt+0x3720>
   14854:	bl	11048 <__errno_location@plt>
   14858:	ldr	r0, [r0]
   1485c:	cmp	r0, #12
   14860:	beq	1486c <__assert_fail@plt+0x3728>
   14864:	mov	r0, r4
   14868:	pop	{r4, sl, fp, pc}
   1486c:	bl	147f8 <__assert_fail@plt+0x36b4>
   14870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14874:	add	fp, sp, #28
   14878:	sub	sp, sp, #20
   1487c:	cmp	r2, #37	; 0x25
   14880:	bcs	14cb0 <__assert_fail@plt+0x3b6c>
   14884:	mov	r5, r2
   14888:	mov	r6, r1
   1488c:	mov	r4, r0
   14890:	str	r3, [sp, #4]
   14894:	ldr	sl, [fp, #8]
   14898:	bl	11048 <__errno_location@plt>
   1489c:	mov	r7, r0
   148a0:	mov	r0, #0
   148a4:	str	r0, [r7]
   148a8:	bl	11018 <__ctype_b_loc@plt>
   148ac:	ldr	r1, [r0]
   148b0:	mov	r2, r4
   148b4:	ldrb	r0, [r2], #1
   148b8:	add	r3, r1, r0, lsl #1
   148bc:	ldrb	r3, [r3, #1]
   148c0:	tst	r3, #32
   148c4:	bne	148b4 <__assert_fail@plt+0x3770>
   148c8:	add	r9, sp, #16
   148cc:	cmp	r6, #0
   148d0:	movne	r9, r6
   148d4:	mov	r8, #4
   148d8:	cmp	r0, #45	; 0x2d
   148dc:	beq	14ca4 <__assert_fail@plt+0x3b60>
   148e0:	mov	r0, r4
   148e4:	mov	r1, r9
   148e8:	mov	r2, r5
   148ec:	bl	11084 <strtoumax@plt>
   148f0:	str	r1, [sp, #12]
   148f4:	str	r0, [sp, #8]
   148f8:	ldr	r6, [r9]
   148fc:	cmp	r6, r4
   14900:	beq	14928 <__assert_fail@plt+0x37e4>
   14904:	ldr	r0, [r7]
   14908:	cmp	r0, #0
   1490c:	beq	1495c <__assert_fail@plt+0x3818>
   14910:	cmp	r0, #34	; 0x22
   14914:	bne	14ca4 <__assert_fail@plt+0x3b60>
   14918:	mov	r8, #1
   1491c:	cmp	sl, #0
   14920:	bne	14968 <__assert_fail@plt+0x3824>
   14924:	b	14c94 <__assert_fail@plt+0x3b50>
   14928:	cmp	sl, #0
   1492c:	ldrbne	r1, [r6]
   14930:	cmpne	r1, #0
   14934:	beq	14ca4 <__assert_fail@plt+0x3b60>
   14938:	mov	r0, sl
   1493c:	bl	1103c <strchr@plt>
   14940:	cmp	r0, #0
   14944:	beq	14ca4 <__assert_fail@plt+0x3b60>
   14948:	mov	r8, #0
   1494c:	str	r8, [sp, #12]
   14950:	mov	r0, #1
   14954:	str	r0, [sp, #8]
   14958:	b	14968 <__assert_fail@plt+0x3824>
   1495c:	mov	r8, r0
   14960:	cmp	sl, #0
   14964:	beq	14c94 <__assert_fail@plt+0x3b50>
   14968:	ldrb	r4, [r6]
   1496c:	cmp	r4, #0
   14970:	beq	14c94 <__assert_fail@plt+0x3b50>
   14974:	mov	r0, sl
   14978:	mov	r1, r4
   1497c:	bl	1103c <strchr@plt>
   14980:	cmp	r0, #0
   14984:	beq	14b94 <__assert_fail@plt+0x3a50>
   14988:	sub	r0, r4, #69	; 0x45
   1498c:	mov	r7, #1
   14990:	mov	r5, #1024	; 0x400
   14994:	cmp	r0, #47	; 0x2f
   14998:	bhi	14a90 <__assert_fail@plt+0x394c>
   1499c:	add	r1, pc, #0
   149a0:	ldr	pc, [r1, r0, lsl #2]
   149a4:	andeq	r4, r1, r4, ror #20
   149a8:	muleq	r1, r0, sl
   149ac:	andeq	r4, r1, r4, ror #20
   149b0:	muleq	r1, r0, sl
   149b4:	muleq	r1, r0, sl
   149b8:	muleq	r1, r0, sl
   149bc:	andeq	r4, r1, r4, ror #20
   149c0:	muleq	r1, r0, sl
   149c4:	andeq	r4, r1, r4, ror #20
   149c8:	muleq	r1, r0, sl
   149cc:	muleq	r1, r0, sl
   149d0:	andeq	r4, r1, r4, ror #20
   149d4:	muleq	r1, r0, sl
   149d8:	muleq	r1, r0, sl
   149dc:	muleq	r1, r0, sl
   149e0:	andeq	r4, r1, r4, ror #20
   149e4:	muleq	r1, r0, sl
   149e8:	muleq	r1, r0, sl
   149ec:	muleq	r1, r0, sl
   149f0:	muleq	r1, r0, sl
   149f4:	andeq	r4, r1, r4, ror #20
   149f8:	andeq	r4, r1, r4, ror #20
   149fc:	muleq	r1, r0, sl
   14a00:	muleq	r1, r0, sl
   14a04:	muleq	r1, r0, sl
   14a08:	muleq	r1, r0, sl
   14a0c:	muleq	r1, r0, sl
   14a10:	muleq	r1, r0, sl
   14a14:	muleq	r1, r0, sl
   14a18:	muleq	r1, r0, sl
   14a1c:	muleq	r1, r0, sl
   14a20:	muleq	r1, r0, sl
   14a24:	muleq	r1, r0, sl
   14a28:	muleq	r1, r0, sl
   14a2c:	andeq	r4, r1, r4, ror #20
   14a30:	muleq	r1, r0, sl
   14a34:	muleq	r1, r0, sl
   14a38:	muleq	r1, r0, sl
   14a3c:	andeq	r4, r1, r4, ror #20
   14a40:	muleq	r1, r0, sl
   14a44:	andeq	r4, r1, r4, ror #20
   14a48:	muleq	r1, r0, sl
   14a4c:	muleq	r1, r0, sl
   14a50:	muleq	r1, r0, sl
   14a54:	muleq	r1, r0, sl
   14a58:	muleq	r1, r0, sl
   14a5c:	muleq	r1, r0, sl
   14a60:	andeq	r4, r1, r4, ror #20
   14a64:	mov	r0, sl
   14a68:	mov	r1, #48	; 0x30
   14a6c:	bl	1103c <strchr@plt>
   14a70:	cmp	r0, #0
   14a74:	beq	14a90 <__assert_fail@plt+0x394c>
   14a78:	ldrb	r0, [r6, #1]
   14a7c:	cmp	r0, #66	; 0x42
   14a80:	cmpne	r0, #68	; 0x44
   14a84:	bne	14bac <__assert_fail@plt+0x3a68>
   14a88:	mov	r7, #2
   14a8c:	mov	r5, #1000	; 0x3e8
   14a90:	sub	r1, r4, #66	; 0x42
   14a94:	cmp	r1, #53	; 0x35
   14a98:	bhi	14b94 <__assert_fail@plt+0x3a50>
   14a9c:	mov	r0, #0
   14aa0:	add	r2, pc, #0
   14aa4:	ldr	pc, [r2, r1, lsl #2]
   14aa8:	andeq	r4, r1, r8, lsl ip
   14aac:	muleq	r1, r4, fp
   14ab0:	muleq	r1, r4, fp
   14ab4:	andeq	r4, r1, r4, lsr #24
   14ab8:	muleq	r1, r4, fp
   14abc:	andeq	r4, r1, r0, lsl #23
   14ac0:	muleq	r1, r4, fp
   14ac4:	muleq	r1, r4, fp
   14ac8:	muleq	r1, r4, fp
   14acc:	andeq	r4, r1, r8, asr #23
   14ad0:	muleq	r1, r4, fp
   14ad4:	ldrdeq	r4, [r1], -ip
   14ad8:	muleq	r1, r4, fp
   14adc:	muleq	r1, r4, fp
   14ae0:	andeq	r4, r1, r8, lsr ip
   14ae4:	muleq	r1, r4, fp
   14ae8:	muleq	r1, r4, fp
   14aec:	muleq	r1, r4, fp
   14af0:	strdeq	r4, [r1], -r0
   14af4:	muleq	r1, r4, fp
   14af8:	muleq	r1, r4, fp
   14afc:	muleq	r1, r4, fp
   14b00:	muleq	r1, r4, fp
   14b04:	andeq	r4, r1, ip, asr #24
   14b08:	andeq	r4, r1, r4, lsl #24
   14b0c:	muleq	r1, r4, fp
   14b10:	muleq	r1, r4, fp
   14b14:	muleq	r1, r4, fp
   14b18:	muleq	r1, r4, fp
   14b1c:	muleq	r1, r4, fp
   14b20:	muleq	r1, r4, fp
   14b24:	muleq	r1, r4, fp
   14b28:	andeq	r4, r1, r0, ror #24
   14b2c:	andeq	r4, r1, r8, ror ip
   14b30:	muleq	r1, r4, fp
   14b34:	muleq	r1, r4, fp
   14b38:	muleq	r1, r4, fp
   14b3c:	andeq	r4, r1, r0, lsl #23
   14b40:	muleq	r1, r4, fp
   14b44:	muleq	r1, r4, fp
   14b48:	muleq	r1, r4, fp
   14b4c:	andeq	r4, r1, r8, asr #23
   14b50:	muleq	r1, r4, fp
   14b54:	ldrdeq	r4, [r1], -ip
   14b58:	muleq	r1, r4, fp
   14b5c:	muleq	r1, r4, fp
   14b60:	muleq	r1, r4, fp
   14b64:	muleq	r1, r4, fp
   14b68:	muleq	r1, r4, fp
   14b6c:	muleq	r1, r4, fp
   14b70:	strdeq	r4, [r1], -r0
   14b74:	muleq	r1, r4, fp
   14b78:	muleq	r1, r4, fp
   14b7c:	andeq	r4, r1, ip, ror #24
   14b80:	add	r0, sp, #8
   14b84:	mov	r1, r5
   14b88:	mov	r2, #3
   14b8c:	bl	14d5c <__assert_fail@plt+0x3c18>
   14b90:	b	14c78 <__assert_fail@plt+0x3b34>
   14b94:	ldr	r0, [sp, #8]
   14b98:	ldr	r1, [sp, #12]
   14b9c:	ldr	r2, [sp, #4]
   14ba0:	strd	r0, [r2]
   14ba4:	orr	r8, r8, #2
   14ba8:	b	14ca4 <__assert_fail@plt+0x3b60>
   14bac:	cmp	r0, #105	; 0x69
   14bb0:	bne	14a90 <__assert_fail@plt+0x394c>
   14bb4:	ldrb	r0, [r6, #2]
   14bb8:	mov	r7, #1
   14bbc:	cmp	r0, #66	; 0x42
   14bc0:	movweq	r7, #3
   14bc4:	b	14a90 <__assert_fail@plt+0x394c>
   14bc8:	add	r0, sp, #8
   14bcc:	mov	r1, r5
   14bd0:	mov	r2, #1
   14bd4:	bl	14d5c <__assert_fail@plt+0x3c18>
   14bd8:	b	14c78 <__assert_fail@plt+0x3b34>
   14bdc:	add	r0, sp, #8
   14be0:	mov	r1, r5
   14be4:	mov	r2, #2
   14be8:	bl	14d5c <__assert_fail@plt+0x3c18>
   14bec:	b	14c78 <__assert_fail@plt+0x3b34>
   14bf0:	add	r0, sp, #8
   14bf4:	mov	r1, r5
   14bf8:	mov	r2, #4
   14bfc:	bl	14d5c <__assert_fail@plt+0x3c18>
   14c00:	b	14c78 <__assert_fail@plt+0x3b34>
   14c04:	add	r0, sp, #8
   14c08:	mov	r1, r5
   14c0c:	mov	r2, #7
   14c10:	bl	14d5c <__assert_fail@plt+0x3c18>
   14c14:	b	14c78 <__assert_fail@plt+0x3b34>
   14c18:	add	r0, sp, #8
   14c1c:	mov	r1, #1024	; 0x400
   14c20:	b	14c74 <__assert_fail@plt+0x3b30>
   14c24:	add	r0, sp, #8
   14c28:	mov	r1, r5
   14c2c:	mov	r2, #6
   14c30:	bl	14d5c <__assert_fail@plt+0x3c18>
   14c34:	b	14c78 <__assert_fail@plt+0x3b34>
   14c38:	add	r0, sp, #8
   14c3c:	mov	r1, r5
   14c40:	mov	r2, #5
   14c44:	bl	14d5c <__assert_fail@plt+0x3c18>
   14c48:	b	14c78 <__assert_fail@plt+0x3b34>
   14c4c:	add	r0, sp, #8
   14c50:	mov	r1, r5
   14c54:	mov	r2, #8
   14c58:	bl	14d5c <__assert_fail@plt+0x3c18>
   14c5c:	b	14c78 <__assert_fail@plt+0x3b34>
   14c60:	add	r0, sp, #8
   14c64:	mov	r1, #512	; 0x200
   14c68:	b	14c74 <__assert_fail@plt+0x3b30>
   14c6c:	add	r0, sp, #8
   14c70:	mov	r1, #2
   14c74:	bl	14cd0 <__assert_fail@plt+0x3b8c>
   14c78:	ldr	r1, [r9]
   14c7c:	add	r2, r1, r7
   14c80:	str	r2, [r9]
   14c84:	ldrb	r1, [r1, r7]
   14c88:	orr	r8, r0, r8
   14c8c:	cmp	r1, #0
   14c90:	orrne	r8, r8, #2
   14c94:	ldr	r0, [sp, #8]
   14c98:	ldr	r1, [sp, #12]
   14c9c:	ldr	r2, [sp, #4]
   14ca0:	strd	r0, [r2]
   14ca4:	mov	r0, r8
   14ca8:	sub	sp, fp, #28
   14cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb0:	movw	r0, #25781	; 0x64b5
   14cb4:	movt	r0, #1
   14cb8:	movw	r1, #25819	; 0x64db
   14cbc:	movt	r1, #1
   14cc0:	movw	r3, #25835	; 0x64eb
   14cc4:	movt	r3, #1
   14cc8:	mov	r2, #85	; 0x55
   14ccc:	bl	11144 <__assert_fail@plt>
   14cd0:	push	{r4, r5, r6, r7, fp, lr}
   14cd4:	add	fp, sp, #16
   14cd8:	mov	r5, r1
   14cdc:	mov	r4, r0
   14ce0:	cmn	r1, #1
   14ce4:	ble	14d1c <__assert_fail@plt+0x3bd8>
   14ce8:	cmp	r5, #0
   14cec:	beq	14d3c <__assert_fail@plt+0x3bf8>
   14cf0:	asr	r3, r5, #31
   14cf4:	mvn	r6, #0
   14cf8:	mvn	r0, #0
   14cfc:	mvn	r1, #0
   14d00:	mov	r2, r5
   14d04:	bl	155a0 <__assert_fail@plt+0x445c>
   14d08:	ldrd	r2, [r4]
   14d0c:	subs	r0, r0, r2
   14d10:	sbcs	r0, r1, r3
   14d14:	bcc	14d2c <__assert_fail@plt+0x3be8>
   14d18:	b	14d3c <__assert_fail@plt+0x3bf8>
   14d1c:	ldrd	r0, [r4]
   14d20:	orrs	r0, r0, r1
   14d24:	beq	14d3c <__assert_fail@plt+0x3bf8>
   14d28:	mvn	r6, #0
   14d2c:	mov	r0, #1
   14d30:	mvn	r7, #0
   14d34:	strd	r6, [r4]
   14d38:	pop	{r4, r5, r6, r7, fp, pc}
   14d3c:	ldrd	r0, [r4]
   14d40:	umull	r6, r2, r0, r5
   14d44:	asr	r3, r5, #31
   14d48:	mla	r0, r0, r3, r2
   14d4c:	mla	r7, r1, r5, r0
   14d50:	mov	r0, #0
   14d54:	strd	r6, [r4]
   14d58:	pop	{r4, r5, r6, r7, fp, pc}
   14d5c:	push	{r4, r5, r6, r7, fp, lr}
   14d60:	add	fp, sp, #16
   14d64:	cmp	r2, #0
   14d68:	moveq	r6, #0
   14d6c:	moveq	r0, r6
   14d70:	popeq	{r4, r5, r6, r7, fp, pc}
   14d74:	mov	r4, r2
   14d78:	mov	r5, r1
   14d7c:	mov	r7, r0
   14d80:	mov	r6, #0
   14d84:	mov	r0, r7
   14d88:	mov	r1, r5
   14d8c:	bl	14cd0 <__assert_fail@plt+0x3b8c>
   14d90:	orr	r6, r0, r6
   14d94:	subs	r4, r4, #1
   14d98:	bne	14d84 <__assert_fail@plt+0x3c40>
   14d9c:	mov	r0, r6
   14da0:	pop	{r4, r5, r6, r7, fp, pc}
   14da4:	clz	r2, r1
   14da8:	lsr	r2, r2, #5
   14dac:	clz	r3, r0
   14db0:	lsr	r3, r3, #5
   14db4:	orrs	r2, r3, r2
   14db8:	movwne	r1, #1
   14dbc:	movwne	r0, #1
   14dc0:	cmp	r1, #0
   14dc4:	beq	14df4 <__assert_fail@plt+0x3cb0>
   14dc8:	mvn	r2, #-2147483648	; 0x80000000
   14dcc:	udiv	r2, r2, r1
   14dd0:	cmp	r2, r0
   14dd4:	bcs	14df4 <__assert_fail@plt+0x3cb0>
   14dd8:	push	{fp, lr}
   14ddc:	mov	fp, sp
   14de0:	bl	11048 <__errno_location@plt>
   14de4:	mov	r1, #12
   14de8:	str	r1, [r0]
   14dec:	mov	r0, #0
   14df0:	pop	{fp, pc}
   14df4:	b	10eb0 <calloc@plt>
   14df8:	cmp	r0, #0
   14dfc:	movweq	r0, #1
   14e00:	cmn	r0, #1
   14e04:	ble	14e0c <__assert_fail@plt+0x3cc8>
   14e08:	b	10fdc <malloc@plt>
   14e0c:	push	{fp, lr}
   14e10:	mov	fp, sp
   14e14:	bl	11048 <__errno_location@plt>
   14e18:	mov	r1, #12
   14e1c:	str	r1, [r0]
   14e20:	mov	r0, #0
   14e24:	pop	{fp, pc}
   14e28:	push	{fp, lr}
   14e2c:	mov	fp, sp
   14e30:	cmp	r0, #0
   14e34:	beq	14e50 <__assert_fail@plt+0x3d0c>
   14e38:	cmp	r1, #0
   14e3c:	beq	14e5c <__assert_fail@plt+0x3d18>
   14e40:	cmn	r1, #1
   14e44:	ble	14e68 <__assert_fail@plt+0x3d24>
   14e48:	pop	{fp, lr}
   14e4c:	b	10f40 <realloc@plt>
   14e50:	mov	r0, r1
   14e54:	pop	{fp, lr}
   14e58:	b	14df8 <__assert_fail@plt+0x3cb4>
   14e5c:	bl	12310 <__assert_fail@plt+0x11cc>
   14e60:	mov	r0, #0
   14e64:	pop	{fp, pc}
   14e68:	bl	11048 <__errno_location@plt>
   14e6c:	mov	r1, #12
   14e70:	str	r1, [r0]
   14e74:	mov	r0, #0
   14e78:	pop	{fp, pc}
   14e7c:	push	{fp, lr}
   14e80:	mov	fp, sp
   14e84:	sub	sp, sp, #8
   14e88:	mov	r1, r0
   14e8c:	movw	r0, #20152	; 0x4eb8
   14e90:	movt	r0, #1
   14e94:	mov	r2, #0
   14e98:	str	r2, [sp]
   14e9c:	str	r0, [sp, #4]
   14ea0:	mvn	r0, #99	; 0x63
   14ea4:	mov	r2, #0
   14ea8:	mov	r3, #0
   14eac:	bl	14f60 <__assert_fail@plt+0x3e1c>
   14eb0:	mov	sp, fp
   14eb4:	pop	{fp, pc}
   14eb8:	cmn	r0, #100	; 0x64
   14ebc:	bne	14ed0 <__assert_fail@plt+0x3d8c>
   14ec0:	mov	r0, r1
   14ec4:	mov	r1, r2
   14ec8:	mov	r2, r3
   14ecc:	b	10f64 <readlink@plt>
   14ed0:	push	{fp, lr}
   14ed4:	mov	fp, sp
   14ed8:	bl	1112c <abort@plt>
   14edc:	sub	r0, r0, #1
   14ee0:	ldrb	r3, [r0, #1]!
   14ee4:	cmp	r3, #47	; 0x2f
   14ee8:	beq	14ee0 <__assert_fail@plt+0x3d9c>
   14eec:	mov	r2, #0
   14ef0:	mov	r1, r0
   14ef4:	b	14f10 <__assert_fail@plt+0x3dcc>
   14ef8:	cmp	r3, #0
   14efc:	bxeq	lr
   14f00:	tst	r2, #1
   14f04:	movne	r0, r1
   14f08:	mov	r2, #0
   14f0c:	ldrb	r3, [r1, #1]!
   14f10:	uxtb	r3, r3
   14f14:	cmp	r3, #47	; 0x2f
   14f18:	bne	14ef8 <__assert_fail@plt+0x3db4>
   14f1c:	mov	r2, #1
   14f20:	ldrb	r3, [r1, #1]!
   14f24:	b	14f10 <__assert_fail@plt+0x3dcc>
   14f28:	push	{r4, sl, fp, lr}
   14f2c:	add	fp, sp, #8
   14f30:	mov	r4, r0
   14f34:	bl	11030 <strlen@plt>
   14f38:	mov	r1, r0
   14f3c:	sub	r2, r4, #1
   14f40:	mov	r0, r1
   14f44:	cmp	r1, #2
   14f48:	popcc	{r4, sl, fp, pc}
   14f4c:	ldrb	r3, [r2, r0]
   14f50:	sub	r1, r0, #1
   14f54:	cmp	r3, #47	; 0x2f
   14f58:	beq	14f40 <__assert_fail@plt+0x3dfc>
   14f5c:	pop	{r4, sl, fp, pc}
   14f60:	push	{r4, r5, fp, lr}
   14f64:	add	fp, sp, #8
   14f68:	sub	sp, sp, #1040	; 0x410
   14f6c:	add	ip, sp, #16
   14f70:	str	ip, [sp, #8]
   14f74:	ldr	ip, [fp, #12]
   14f78:	str	ip, [sp, #4]
   14f7c:	ldr	ip, [fp, #8]
   14f80:	str	ip, [sp]
   14f84:	bl	14f90 <__assert_fail@plt+0x3e4c>
   14f88:	sub	sp, fp, #8
   14f8c:	pop	{r4, r5, fp, pc}
   14f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f94:	add	fp, sp, #28
   14f98:	sub	sp, sp, #4
   14f9c:	mov	r4, r3
   14fa0:	mov	r6, r2
   14fa4:	mov	r9, r0
   14fa8:	cmp	r2, #0
   14fac:	movweq	r4, #1024	; 0x400
   14fb0:	cmn	r4, #-2147483647	; 0x80000001
   14fb4:	mvncs	r4, #-2147483648	; 0x80000000
   14fb8:	ldr	r0, [fp, #16]
   14fbc:	cmp	r2, #0
   14fc0:	moveq	r6, r0
   14fc4:	ldr	r0, [fp, #8]
   14fc8:	movw	r7, #25920	; 0x6540
   14fcc:	movt	r7, #1
   14fd0:	cmp	r0, #0
   14fd4:	movne	r7, r0
   14fd8:	cmp	r6, #0
   14fdc:	beq	1504c <__assert_fail@plt+0x3f08>
   14fe0:	mov	r8, r1
   14fe4:	ldr	sl, [fp, #12]
   14fe8:	mov	r5, r6
   14fec:	mov	r0, r9
   14ff0:	mov	r1, r8
   14ff4:	mov	r2, r5
   14ff8:	mov	r3, r4
   14ffc:	blx	sl
   15000:	cmn	r0, #1
   15004:	ble	1506c <__assert_fail@plt+0x3f28>
   15008:	cmp	r0, r4
   1500c:	blt	15098 <__assert_fail@plt+0x3f54>
   15010:	cmp	r5, r6
   15014:	beq	15024 <__assert_fail@plt+0x3ee0>
   15018:	ldr	r1, [r7, #8]
   1501c:	mov	r0, r5
   15020:	blx	r1
   15024:	cmn	r4, #-1073741823	; 0xc0000001
   15028:	bge	150e8 <__assert_fail@plt+0x3fa4>
   1502c:	mov	r0, #1
   15030:	orr	r4, r0, r4, lsl #1
   15034:	ldr	r1, [r7]
   15038:	mov	r0, r4
   1503c:	blx	r1
   15040:	mov	r5, r0
   15044:	cmp	r0, #0
   15048:	bne	14fec <__assert_fail@plt+0x3ea8>
   1504c:	ldr	r1, [r7, #12]
   15050:	cmp	r1, #0
   15054:	beq	15060 <__assert_fail@plt+0x3f1c>
   15058:	mov	r0, r4
   1505c:	blx	r1
   15060:	bl	11048 <__errno_location@plt>
   15064:	mov	r1, #12
   15068:	b	150f0 <__assert_fail@plt+0x3fac>
   1506c:	mov	r4, #0
   15070:	cmp	r5, r6
   15074:	beq	150f8 <__assert_fail@plt+0x3fb4>
   15078:	bl	11048 <__errno_location@plt>
   1507c:	mov	r6, r0
   15080:	ldr	r8, [r0]
   15084:	ldr	r1, [r7, #8]
   15088:	mov	r0, r5
   1508c:	blx	r1
   15090:	str	r8, [r6]
   15094:	b	150f8 <__assert_fail@plt+0x3fb4>
   15098:	mov	r1, #0
   1509c:	strb	r1, [r5, r0]
   150a0:	add	r8, r0, #1
   150a4:	ldr	r0, [fp, #16]
   150a8:	cmp	r5, r0
   150ac:	beq	1510c <__assert_fail@plt+0x3fc8>
   150b0:	cmp	r5, r6
   150b4:	beq	15104 <__assert_fail@plt+0x3fc0>
   150b8:	cmp	r8, r4
   150bc:	bge	15104 <__assert_fail@plt+0x3fc0>
   150c0:	ldr	r2, [r7, #4]
   150c4:	cmp	r2, #0
   150c8:	beq	15104 <__assert_fail@plt+0x3fc0>
   150cc:	mov	r0, r5
   150d0:	mov	r1, r8
   150d4:	blx	r2
   150d8:	cmp	r0, #0
   150dc:	moveq	r0, r5
   150e0:	sub	sp, fp, #28
   150e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	bl	11048 <__errno_location@plt>
   150ec:	mov	r1, #36	; 0x24
   150f0:	str	r1, [r0]
   150f4:	mov	r4, #0
   150f8:	mov	r0, r4
   150fc:	sub	sp, fp, #28
   15100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15104:	mov	r4, r5
   15108:	b	150f8 <__assert_fail@plt+0x3fb4>
   1510c:	ldr	r1, [r7]
   15110:	mov	r0, r8
   15114:	blx	r1
   15118:	cmp	r0, #0
   1511c:	beq	15134 <__assert_fail@plt+0x3ff0>
   15120:	mov	r4, r0
   15124:	mov	r1, r5
   15128:	mov	r2, r8
   1512c:	bl	10f04 <memcpy@plt>
   15130:	b	150f8 <__assert_fail@plt+0x3fb4>
   15134:	mov	r4, r8
   15138:	b	1504c <__assert_fail@plt+0x3f08>
   1513c:	push	{r4, r5, r6, sl, fp, lr}
   15140:	add	fp, sp, #16
   15144:	mov	r4, r0
   15148:	bl	10f94 <__fpending@plt>
   1514c:	mov	r5, r0
   15150:	mov	r0, r4
   15154:	bl	10fa0 <ferror_unlocked@plt>
   15158:	mov	r6, r0
   1515c:	mov	r0, r4
   15160:	bl	151c4 <__assert_fail@plt+0x4080>
   15164:	cmp	r6, #0
   15168:	beq	15188 <__assert_fail@plt+0x4044>
   1516c:	mvn	r4, #0
   15170:	cmp	r0, #0
   15174:	bne	151bc <__assert_fail@plt+0x4078>
   15178:	bl	11048 <__errno_location@plt>
   1517c:	mov	r1, #0
   15180:	str	r1, [r0]
   15184:	b	151bc <__assert_fail@plt+0x4078>
   15188:	cmp	r0, #0
   1518c:	mov	r4, r0
   15190:	mvnne	r4, #0
   15194:	cmp	r5, #0
   15198:	bne	151bc <__assert_fail@plt+0x4078>
   1519c:	cmp	r0, #0
   151a0:	beq	151bc <__assert_fail@plt+0x4078>
   151a4:	bl	11048 <__errno_location@plt>
   151a8:	ldr	r0, [r0]
   151ac:	subs	r4, r0, #9
   151b0:	mvnne	r4, #0
   151b4:	mov	r0, r4
   151b8:	pop	{r4, r5, r6, sl, fp, pc}
   151bc:	mov	r0, r4
   151c0:	pop	{r4, r5, r6, sl, fp, pc}
   151c4:	push	{r4, r5, fp, lr}
   151c8:	add	fp, sp, #8
   151cc:	sub	sp, sp, #8
   151d0:	mov	r4, r0
   151d4:	bl	11078 <fileno@plt>
   151d8:	cmn	r0, #1
   151dc:	ble	15254 <__assert_fail@plt+0x4110>
   151e0:	mov	r0, r4
   151e4:	bl	10ff4 <__freading@plt>
   151e8:	cmp	r0, #0
   151ec:	beq	15218 <__assert_fail@plt+0x40d4>
   151f0:	mov	r0, r4
   151f4:	bl	11078 <fileno@plt>
   151f8:	mov	r1, #1
   151fc:	str	r1, [sp]
   15200:	mov	r2, #0
   15204:	mov	r3, #0
   15208:	bl	10f7c <lseek64@plt>
   1520c:	and	r0, r0, r1
   15210:	cmn	r0, #1
   15214:	beq	15254 <__assert_fail@plt+0x4110>
   15218:	mov	r0, r4
   1521c:	bl	15264 <__assert_fail@plt+0x4120>
   15220:	cmp	r0, #0
   15224:	beq	15254 <__assert_fail@plt+0x4110>
   15228:	bl	11048 <__errno_location@plt>
   1522c:	ldr	r5, [r0]
   15230:	mov	r0, r4
   15234:	bl	110a8 <fclose@plt>
   15238:	cmp	r5, #0
   1523c:	beq	1524c <__assert_fail@plt+0x4108>
   15240:	bl	11048 <__errno_location@plt>
   15244:	str	r5, [r0]
   15248:	mvn	r0, #0
   1524c:	sub	sp, fp, #8
   15250:	pop	{r4, r5, fp, pc}
   15254:	mov	r0, r4
   15258:	sub	sp, fp, #8
   1525c:	pop	{r4, r5, fp, lr}
   15260:	b	110a8 <fclose@plt>
   15264:	push	{r4, sl, fp, lr}
   15268:	add	fp, sp, #8
   1526c:	mov	r4, r0
   15270:	cmp	r0, #0
   15274:	beq	1528c <__assert_fail@plt+0x4148>
   15278:	mov	r0, r4
   1527c:	bl	10ff4 <__freading@plt>
   15280:	cmp	r0, #0
   15284:	movne	r0, r4
   15288:	blne	15298 <__assert_fail@plt+0x4154>
   1528c:	mov	r0, r4
   15290:	pop	{r4, sl, fp, lr}
   15294:	b	10ee0 <fflush@plt>
   15298:	ldrb	r1, [r0, #1]
   1529c:	tst	r1, #1
   152a0:	bxeq	lr
   152a4:	push	{fp, lr}
   152a8:	mov	fp, sp
   152ac:	sub	sp, sp, #8
   152b0:	mov	r1, #1
   152b4:	str	r1, [sp]
   152b8:	mov	r2, #0
   152bc:	mov	r3, #0
   152c0:	bl	152cc <__assert_fail@plt+0x4188>
   152c4:	mov	sp, fp
   152c8:	pop	{fp, pc}
   152cc:	push	{r4, r5, r6, r7, fp, lr}
   152d0:	add	fp, sp, #16
   152d4:	sub	sp, sp, #8
   152d8:	mov	r5, r3
   152dc:	mov	r6, r2
   152e0:	mov	r4, r0
   152e4:	ldr	r0, [r0, #4]
   152e8:	ldr	r1, [r4, #8]
   152ec:	cmp	r1, r0
   152f0:	bne	1530c <__assert_fail@plt+0x41c8>
   152f4:	ldrd	r0, [r4, #16]
   152f8:	cmp	r1, r0
   152fc:	bne	1530c <__assert_fail@plt+0x41c8>
   15300:	ldr	r0, [r4, #36]	; 0x24
   15304:	cmp	r0, #0
   15308:	beq	15324 <__assert_fail@plt+0x41e0>
   1530c:	mov	r0, r4
   15310:	mov	r2, r6
   15314:	mov	r3, r5
   15318:	sub	sp, fp, #16
   1531c:	pop	{r4, r5, r6, r7, fp, lr}
   15320:	b	110b4 <fseeko64@plt>
   15324:	ldr	r7, [fp, #8]
   15328:	mov	r0, r4
   1532c:	bl	11078 <fileno@plt>
   15330:	str	r7, [sp]
   15334:	mov	r2, r6
   15338:	mov	r3, r5
   1533c:	bl	10f7c <lseek64@plt>
   15340:	and	r2, r0, r1
   15344:	cmn	r2, #1
   15348:	mvneq	r0, #0
   1534c:	subeq	sp, fp, #16
   15350:	popeq	{r4, r5, r6, r7, fp, pc}
   15354:	strd	r0, [r4, #80]	; 0x50
   15358:	ldr	r0, [r4]
   1535c:	bic	r0, r0, #16
   15360:	str	r0, [r4]
   15364:	mov	r0, #0
   15368:	sub	sp, fp, #16
   1536c:	pop	{r4, r5, r6, r7, fp, pc}
   15370:	push	{fp, lr}
   15374:	mov	fp, sp
   15378:	bl	11048 <__errno_location@plt>
   1537c:	mov	r1, #12
   15380:	str	r1, [r0]
   15384:	mov	r0, #0
   15388:	pop	{fp, pc}
   1538c:	b	14df8 <__assert_fail@plt+0x3cb4>
   15390:	cmp	r1, #0
   15394:	orreq	r1, r1, #1
   15398:	b	14e28 <__assert_fail@plt+0x3ce4>
   1539c:	b	14da4 <__assert_fail@plt+0x3c60>
   153a0:	clz	r3, r2
   153a4:	lsr	ip, r3, #5
   153a8:	clz	r3, r1
   153ac:	lsr	r3, r3, #5
   153b0:	orrs	r3, r3, ip
   153b4:	movwne	r1, #1
   153b8:	movwne	r2, #1
   153bc:	b	15458 <__assert_fail@plt+0x4314>
   153c0:	push	{fp, lr}
   153c4:	mov	fp, sp
   153c8:	mov	r0, #14
   153cc:	bl	110fc <nl_langinfo@plt>
   153d0:	movw	r1, #24324	; 0x5f04
   153d4:	movt	r1, #1
   153d8:	cmp	r0, #0
   153dc:	movne	r1, r0
   153e0:	ldrb	r2, [r1]
   153e4:	movw	r0, #25914	; 0x653a
   153e8:	movt	r0, #1
   153ec:	cmp	r2, #0
   153f0:	movne	r0, r1
   153f4:	pop	{fp, pc}
   153f8:	push	{r4, r5, r6, r7, fp, lr}
   153fc:	add	fp, sp, #16
   15400:	sub	sp, sp, #8
   15404:	mov	r7, r2
   15408:	mov	r4, r1
   1540c:	add	r5, sp, #4
   15410:	cmp	r0, #0
   15414:	movne	r5, r0
   15418:	mov	r0, r5
   1541c:	bl	10fac <mbrtowc@plt>
   15420:	mov	r6, r0
   15424:	cmp	r7, #0
   15428:	beq	1544c <__assert_fail@plt+0x4308>
   1542c:	cmn	r6, #2
   15430:	bcc	1544c <__assert_fail@plt+0x4308>
   15434:	mov	r0, #0
   15438:	bl	15494 <__assert_fail@plt+0x4350>
   1543c:	cmp	r0, #0
   15440:	ldrbeq	r0, [r4]
   15444:	streq	r0, [r5]
   15448:	moveq	r6, #1
   1544c:	mov	r0, r6
   15450:	sub	sp, fp, #16
   15454:	pop	{r4, r5, r6, r7, fp, pc}
   15458:	cmp	r2, #0
   1545c:	beq	1548c <__assert_fail@plt+0x4348>
   15460:	mvn	r3, #0
   15464:	udiv	r3, r3, r2
   15468:	cmp	r3, r1
   1546c:	bcs	1548c <__assert_fail@plt+0x4348>
   15470:	push	{fp, lr}
   15474:	mov	fp, sp
   15478:	bl	11048 <__errno_location@plt>
   1547c:	mov	r1, #12
   15480:	str	r1, [r0]
   15484:	mov	r0, #0
   15488:	pop	{fp, pc}
   1548c:	mul	r1, r2, r1
   15490:	b	14e28 <__assert_fail@plt+0x3ce4>
   15494:	push	{r4, sl, fp, lr}
   15498:	add	fp, sp, #8
   1549c:	sub	sp, sp, #264	; 0x108
   154a0:	add	r1, sp, #7
   154a4:	movw	r2, #257	; 0x101
   154a8:	bl	154f8 <__assert_fail@plt+0x43b4>
   154ac:	mov	r4, #0
   154b0:	cmp	r0, #0
   154b4:	bne	154ec <__assert_fail@plt+0x43a8>
   154b8:	add	r0, sp, #7
   154bc:	movw	r1, #25936	; 0x6550
   154c0:	movt	r1, #1
   154c4:	bl	10ed4 <strcmp@plt>
   154c8:	cmp	r0, #0
   154cc:	beq	154ec <__assert_fail@plt+0x43a8>
   154d0:	add	r0, sp, #7
   154d4:	movw	r1, #25938	; 0x6552
   154d8:	movt	r1, #1
   154dc:	bl	10ed4 <strcmp@plt>
   154e0:	mov	r4, r0
   154e4:	cmp	r0, #0
   154e8:	movwne	r4, #1
   154ec:	mov	r0, r4
   154f0:	sub	sp, fp, #8
   154f4:	pop	{r4, sl, fp, pc}
   154f8:	b	154fc <__assert_fail@plt+0x43b8>
   154fc:	push	{r4, r5, r6, r7, fp, lr}
   15500:	add	fp, sp, #16
   15504:	mov	r6, r2
   15508:	mov	r4, r1
   1550c:	bl	15598 <__assert_fail@plt+0x4454>
   15510:	cmp	r0, #0
   15514:	beq	15544 <__assert_fail@plt+0x4400>
   15518:	mov	r7, r0
   1551c:	bl	11030 <strlen@plt>
   15520:	cmp	r0, r6
   15524:	bcs	15564 <__assert_fail@plt+0x4420>
   15528:	add	r2, r0, #1
   1552c:	mov	r0, r4
   15530:	mov	r1, r7
   15534:	bl	10f04 <memcpy@plt>
   15538:	mov	r5, #0
   1553c:	mov	r0, r5
   15540:	pop	{r4, r5, r6, r7, fp, pc}
   15544:	mov	r5, #22
   15548:	cmp	r6, #0
   1554c:	movne	r0, #0
   15550:	strbne	r0, [r4]
   15554:	movne	r0, r5
   15558:	popne	{r4, r5, r6, r7, fp, pc}
   1555c:	mov	r0, r5
   15560:	pop	{r4, r5, r6, r7, fp, pc}
   15564:	mov	r5, #34	; 0x22
   15568:	cmp	r6, #0
   1556c:	beq	1558c <__assert_fail@plt+0x4448>
   15570:	sub	r6, r6, #1
   15574:	mov	r0, r4
   15578:	mov	r1, r7
   1557c:	mov	r2, r6
   15580:	bl	10f04 <memcpy@plt>
   15584:	mov	r0, #0
   15588:	strb	r0, [r4, r6]
   1558c:	mov	r0, r5
   15590:	pop	{r4, r5, r6, r7, fp, pc}
   15594:	b	15598 <__assert_fail@plt+0x4454>
   15598:	mov	r1, #0
   1559c:	b	110cc <setlocale@plt>
   155a0:	cmp	r3, #0
   155a4:	cmpeq	r2, #0
   155a8:	bne	155c0 <__assert_fail@plt+0x447c>
   155ac:	cmp	r1, #0
   155b0:	cmpeq	r0, #0
   155b4:	mvnne	r1, #0
   155b8:	mvnne	r0, #0
   155bc:	b	155dc <__assert_fail@plt+0x4498>
   155c0:	sub	sp, sp, #8
   155c4:	push	{sp, lr}
   155c8:	bl	155ec <__assert_fail@plt+0x44a8>
   155cc:	ldr	lr, [sp, #4]
   155d0:	add	sp, sp, #8
   155d4:	pop	{r2, r3}
   155d8:	bx	lr
   155dc:	push	{r1, lr}
   155e0:	mov	r0, #8
   155e4:	bl	10ec8 <raise@plt>
   155e8:	pop	{r1, pc}
   155ec:	cmp	r1, r3
   155f0:	cmpeq	r0, r2
   155f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f8:	mov	r4, r0
   155fc:	movcc	r0, #0
   15600:	mov	r5, r1
   15604:	ldr	lr, [sp, #36]	; 0x24
   15608:	movcc	r1, r0
   1560c:	bcc	15708 <__assert_fail@plt+0x45c4>
   15610:	cmp	r3, #0
   15614:	clzeq	ip, r2
   15618:	clzne	ip, r3
   1561c:	addeq	ip, ip, #32
   15620:	cmp	r5, #0
   15624:	clzeq	r1, r4
   15628:	addeq	r1, r1, #32
   1562c:	clzne	r1, r5
   15630:	sub	ip, ip, r1
   15634:	sub	sl, ip, #32
   15638:	lsl	r9, r3, ip
   1563c:	rsb	fp, ip, #32
   15640:	orr	r9, r9, r2, lsl sl
   15644:	orr	r9, r9, r2, lsr fp
   15648:	lsl	r8, r2, ip
   1564c:	cmp	r5, r9
   15650:	cmpeq	r4, r8
   15654:	movcc	r0, #0
   15658:	movcc	r1, r0
   1565c:	bcc	15678 <__assert_fail@plt+0x4534>
   15660:	mov	r0, #1
   15664:	subs	r4, r4, r8
   15668:	lsl	r1, r0, sl
   1566c:	orr	r1, r1, r0, lsr fp
   15670:	lsl	r0, r0, ip
   15674:	sbc	r5, r5, r9
   15678:	cmp	ip, #0
   1567c:	beq	15708 <__assert_fail@plt+0x45c4>
   15680:	lsr	r6, r8, #1
   15684:	orr	r6, r6, r9, lsl #31
   15688:	lsr	r7, r9, #1
   1568c:	mov	r2, ip
   15690:	b	156b4 <__assert_fail@plt+0x4570>
   15694:	subs	r3, r4, r6
   15698:	sbc	r8, r5, r7
   1569c:	adds	r3, r3, r3
   156a0:	adc	r8, r8, r8
   156a4:	adds	r4, r3, #1
   156a8:	adc	r5, r8, #0
   156ac:	subs	r2, r2, #1
   156b0:	beq	156d0 <__assert_fail@plt+0x458c>
   156b4:	cmp	r5, r7
   156b8:	cmpeq	r4, r6
   156bc:	bcs	15694 <__assert_fail@plt+0x4550>
   156c0:	adds	r4, r4, r4
   156c4:	adc	r5, r5, r5
   156c8:	subs	r2, r2, #1
   156cc:	bne	156b4 <__assert_fail@plt+0x4570>
   156d0:	lsr	r3, r4, ip
   156d4:	orr	r3, r3, r5, lsl fp
   156d8:	lsr	r2, r5, ip
   156dc:	orr	r3, r3, r5, lsr sl
   156e0:	adds	r0, r0, r4
   156e4:	mov	r4, r3
   156e8:	lsl	r3, r2, ip
   156ec:	orr	r3, r3, r4, lsl sl
   156f0:	lsl	ip, r4, ip
   156f4:	orr	r3, r3, r4, lsr fp
   156f8:	adc	r1, r1, r5
   156fc:	subs	r0, r0, ip
   15700:	mov	r5, r2
   15704:	sbc	r1, r1, r3
   15708:	cmp	lr, #0
   1570c:	strdne	r4, [lr]
   15710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15718:	mov	r7, r0
   1571c:	ldr	r6, [pc, #72]	; 1576c <__assert_fail@plt+0x4628>
   15720:	ldr	r5, [pc, #72]	; 15770 <__assert_fail@plt+0x462c>
   15724:	add	r6, pc, r6
   15728:	add	r5, pc, r5
   1572c:	sub	r6, r6, r5
   15730:	mov	r8, r1
   15734:	mov	r9, r2
   15738:	bl	10e90 <calloc@plt-0x20>
   1573c:	asrs	r6, r6, #2
   15740:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15744:	mov	r4, #0
   15748:	add	r4, r4, #1
   1574c:	ldr	r3, [r5], #4
   15750:	mov	r2, r9
   15754:	mov	r1, r8
   15758:	mov	r0, r7
   1575c:	blx	r3
   15760:	cmp	r6, r4
   15764:	bne	15748 <__assert_fail@plt+0x4604>
   15768:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1576c:	andeq	r1, r1, r0, ror #15
   15770:	ldrdeq	r1, [r1], -r8
   15774:	bx	lr
   15778:	ldr	r3, [pc, #12]	; 1578c <__assert_fail@plt+0x4648>
   1577c:	mov	r1, #0
   15780:	add	r3, pc, r3
   15784:	ldr	r2, [r3]
   15788:	b	11054 <__cxa_atexit@plt>
   1578c:	andeq	r1, r1, ip, ror #18
   15790:	mov	r2, r1
   15794:	mov	r1, r0
   15798:	mov	r0, #3
   1579c:	b	11114 <__xstat64@plt>

Disassembly of section .fini:

000157a0 <.fini>:
   157a0:	push	{r3, lr}
   157a4:	pop	{r3, pc}
