
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

00011710 <.init>:
   11710:	push	{r3, lr}
   11714:	bl	11b9c <__assert_fail@plt+0x4c>
   11718:	pop	{r3, pc}

Disassembly of section .plt:

0001171c <fstatfs64@plt-0x14>:
   1171c:	push	{lr}		; (str lr, [sp, #-4]!)
   11720:	ldr	lr, [pc, #4]	; 1172c <fstatfs64@plt-0x4>
   11724:	add	lr, pc, lr
   11728:	ldr	pc, [lr, #8]!
   1172c:	ldrdeq	sl, [r1], -r4

00011730 <fstatfs64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2260]!	; 0x8d4

0001173c <selabel_lookup@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2252]!	; 0x8cc

00011748 <calloc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #2244]!	; 0x8c4

00011754 <fputs_unlocked@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011760 <raise@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #2228]!	; 0x8b4

0001176c <is_selinux_enabled@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #2220]!	; 0x8ac

00011778 <strcmp@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #2212]!	; 0x8a4

00011784 <context_type_get@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #2204]!	; 0x89c

00011790 <fflush@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #2196]!	; 0x894

0001179c <lsetfilecon@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #2188]!	; 0x88c

000117a8 <memmove@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #2180]!	; 0x884

000117b4 <free@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #2172]!	; 0x87c

000117c0 <faccessat@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #2164]!	; 0x874

000117cc <_exit@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #2156]!	; 0x86c

000117d8 <memcpy@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #2148]!	; 0x864

000117e4 <mbsinit@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2140]!	; 0x85c

000117f0 <context_new@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2132]!	; 0x854

000117fc <dcgettext@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2124]!	; 0x84c

00011808 <context_type_set@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2116]!	; 0x844

00011814 <realloc@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2108]!	; 0x83c

00011820 <fgetfilecon@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2100]!	; 0x834

0001182c <textdomain@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2092]!	; 0x82c

00011838 <rawmemchr@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #106496	; 0x1a000
   11840:	ldr	pc, [ip, #2084]!	; 0x824

00011844 <__fxstatat64@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #106496	; 0x1a000
   1184c:	ldr	pc, [ip, #2076]!	; 0x81c

00011850 <iswprint@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #106496	; 0x1a000
   11858:	ldr	pc, [ip, #2068]!	; 0x814

0001185c <__fxstat64@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #106496	; 0x1a000
   11864:	ldr	pc, [ip, #2060]!	; 0x80c

00011868 <readlink@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #106496	; 0x1a000
   11870:	ldr	pc, [ip, #2052]!	; 0x804

00011874 <fwrite@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #106496	; 0x1a000
   1187c:	ldr	pc, [ip, #2044]!	; 0x7fc

00011880 <lseek64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #106496	; 0x1a000
   11888:	ldr	pc, [ip, #2036]!	; 0x7f4

0001188c <__ctype_get_mb_cur_max@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #106496	; 0x1a000
   11894:	ldr	pc, [ip, #2028]!	; 0x7ec

00011898 <getcon@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #106496	; 0x1a000
   118a0:	ldr	pc, [ip, #2020]!	; 0x7e4

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #106496	; 0x1a000
   118ac:	ldr	pc, [ip, #2012]!	; 0x7dc

000118b0 <ferror_unlocked@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #106496	; 0x1a000
   118b8:	ldr	pc, [ip, #2004]!	; 0x7d4

000118bc <mbrtowc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #106496	; 0x1a000
   118c4:	ldr	pc, [ip, #1996]!	; 0x7cc

000118c8 <error@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #106496	; 0x1a000
   118d0:	ldr	pc, [ip, #1988]!	; 0x7c4

000118d4 <open64@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #106496	; 0x1a000
   118dc:	ldr	pc, [ip, #1980]!	; 0x7bc

000118e0 <lgetfilecon@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #106496	; 0x1a000
   118e8:	ldr	pc, [ip, #1972]!	; 0x7b4

000118ec <malloc@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #106496	; 0x1a000
   118f4:	ldr	pc, [ip, #1964]!	; 0x7ac

000118f8 <__libc_start_main@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #106496	; 0x1a000
   11900:	ldr	pc, [ip, #1956]!	; 0x7a4

00011904 <__freading@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #106496	; 0x1a000
   1190c:	ldr	pc, [ip, #1948]!	; 0x79c

00011910 <__gmon_start__@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #106496	; 0x1a000
   11918:	ldr	pc, [ip, #1940]!	; 0x794

0001191c <context_free@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #106496	; 0x1a000
   11924:	ldr	pc, [ip, #1932]!	; 0x78c

00011928 <getopt_long@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #106496	; 0x1a000
   11930:	ldr	pc, [ip, #1924]!	; 0x784

00011934 <__ctype_b_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #106496	; 0x1a000
   1193c:	ldr	pc, [ip, #1916]!	; 0x77c

00011940 <getcwd@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #106496	; 0x1a000
   11948:	ldr	pc, [ip, #1908]!	; 0x774

0001194c <exit@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #106496	; 0x1a000
   11954:	ldr	pc, [ip, #1900]!	; 0x76c

00011958 <getfilecon@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #106496	; 0x1a000
   11960:	ldr	pc, [ip, #1892]!	; 0x764

00011964 <bcmp@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #106496	; 0x1a000
   1196c:	ldr	pc, [ip, #1884]!	; 0x75c

00011970 <strlen@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #106496	; 0x1a000
   11978:	ldr	pc, [ip, #1876]!	; 0x754

0001197c <selabel_open@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #106496	; 0x1a000
   11984:	ldr	pc, [ip, #1868]!	; 0x74c

00011988 <openat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #106496	; 0x1a000
   11990:	ldr	pc, [ip, #1860]!	; 0x744

00011994 <setfscreatecon@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #106496	; 0x1a000
   1199c:	ldr	pc, [ip, #1852]!	; 0x73c

000119a0 <__errno_location@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #106496	; 0x1a000
   119a8:	ldr	pc, [ip, #1844]!	; 0x734

000119ac <__sprintf_chk@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #106496	; 0x1a000
   119b4:	ldr	pc, [ip, #1836]!	; 0x72c

000119b8 <__cxa_atexit@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #106496	; 0x1a000
   119c0:	ldr	pc, [ip, #1828]!	; 0x724

000119c4 <memset@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #106496	; 0x1a000
   119cc:	ldr	pc, [ip, #1820]!	; 0x71c

000119d0 <__printf_chk@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #106496	; 0x1a000
   119d8:	ldr	pc, [ip, #1812]!	; 0x714

000119dc <fileno@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #106496	; 0x1a000
   119e4:	ldr	pc, [ip, #1804]!	; 0x70c

000119e8 <__fprintf_chk@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #106496	; 0x1a000
   119f0:	ldr	pc, [ip, #1796]!	; 0x704

000119f4 <fclose@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #106496	; 0x1a000
   119fc:	ldr	pc, [ip, #1788]!	; 0x6fc

00011a00 <fseeko64@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #106496	; 0x1a000
   11a08:	ldr	pc, [ip, #1780]!	; 0x6f4

00011a0c <fcntl64@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #106496	; 0x1a000
   11a14:	ldr	pc, [ip, #1772]!	; 0x6ec

00011a18 <setlocale@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #106496	; 0x1a000
   11a20:	ldr	pc, [ip, #1764]!	; 0x6e4

00011a24 <fsetfilecon@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #106496	; 0x1a000
   11a2c:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a30 <strrchr@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #106496	; 0x1a000
   11a38:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a3c <nl_langinfo@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #106496	; 0x1a000
   11a44:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a48 <readdir64@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #106496	; 0x1a000
   11a50:	ldr	pc, [ip, #1732]!	; 0x6c4

00011a54 <fdopendir@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #106496	; 0x1a000
   11a5c:	ldr	pc, [ip, #1724]!	; 0x6bc

00011a60 <security_compute_create@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #106496	; 0x1a000
   11a68:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a6c <dirfd@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #106496	; 0x1a000
   11a74:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a78 <fchdir@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #106496	; 0x1a000
   11a80:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a84 <qsort@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #106496	; 0x1a000
   11a8c:	ldr	pc, [ip, #1692]!	; 0x69c

00011a90 <freecon@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #106496	; 0x1a000
   11a98:	ldr	pc, [ip, #1684]!	; 0x694

00011a9c <bindtextdomain@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #106496	; 0x1a000
   11aa4:	ldr	pc, [ip, #1676]!	; 0x68c

00011aa8 <getfscreatecon@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #106496	; 0x1a000
   11ab0:	ldr	pc, [ip, #1668]!	; 0x684

00011ab4 <umask@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #106496	; 0x1a000
   11abc:	ldr	pc, [ip, #1660]!	; 0x67c

00011ac0 <context_str@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #106496	; 0x1a000
   11ac8:	ldr	pc, [ip, #1652]!	; 0x674

00011acc <chmod@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #106496	; 0x1a000
   11ad4:	ldr	pc, [ip, #1644]!	; 0x66c

00011ad8 <__xstat64@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #106496	; 0x1a000
   11ae0:	ldr	pc, [ip, #1636]!	; 0x664

00011ae4 <strncmp@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #106496	; 0x1a000
   11aec:	ldr	pc, [ip, #1628]!	; 0x65c

00011af0 <abort@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #106496	; 0x1a000
   11af8:	ldr	pc, [ip, #1620]!	; 0x654

00011afc <close@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #106496	; 0x1a000
   11b04:	ldr	pc, [ip, #1612]!	; 0x64c

00011b08 <__lxstat64@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #106496	; 0x1a000
   11b10:	ldr	pc, [ip, #1604]!	; 0x644

00011b14 <mkfifo@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #106496	; 0x1a000
   11b1c:	ldr	pc, [ip, #1596]!	; 0x63c

00011b20 <mode_to_security_class@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #106496	; 0x1a000
   11b28:	ldr	pc, [ip, #1588]!	; 0x634

00011b2c <closedir@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #106496	; 0x1a000
   11b34:	ldr	pc, [ip, #1580]!	; 0x62c

00011b38 <strspn@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #106496	; 0x1a000
   11b40:	ldr	pc, [ip, #1572]!	; 0x624

00011b44 <__mempcpy_chk@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #106496	; 0x1a000
   11b4c:	ldr	pc, [ip, #1564]!	; 0x61c

00011b50 <__assert_fail@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #106496	; 0x1a000
   11b58:	ldr	pc, [ip, #1556]!	; 0x614

Disassembly of section .text:

00011b60 <lchmod@@Base-0x49bc>:
   11b60:	mov	fp, #0
   11b64:	mov	lr, #0
   11b68:	pop	{r1}		; (ldr r1, [sp], #4)
   11b6c:	mov	r2, sp
   11b70:	push	{r2}		; (str r2, [sp, #-4]!)
   11b74:	push	{r0}		; (str r0, [sp, #-4]!)
   11b78:	ldr	ip, [pc, #16]	; 11b90 <__assert_fail@plt+0x40>
   11b7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11b80:	ldr	r0, [pc, #12]	; 11b94 <__assert_fail@plt+0x44>
   11b84:	ldr	r3, [pc, #12]	; 11b98 <__assert_fail@plt+0x48>
   11b88:	bl	118f8 <__libc_start_main@plt>
   11b8c:	bl	11af0 <abort@plt>
   11b90:	ldrdeq	sl, [r1], -r4
   11b94:	andeq	r1, r1, r0, lsr pc
   11b98:	andeq	sl, r1, r4, ror r3
   11b9c:	ldr	r3, [pc, #20]	; 11bb8 <__assert_fail@plt+0x68>
   11ba0:	ldr	r2, [pc, #20]	; 11bbc <__assert_fail@plt+0x6c>
   11ba4:	add	r3, pc, r3
   11ba8:	ldr	r2, [r3, r2]
   11bac:	cmp	r2, #0
   11bb0:	bxeq	lr
   11bb4:	b	11910 <__gmon_start__@plt>
   11bb8:	andeq	sl, r1, r4, asr r4
   11bbc:	andeq	r0, r0, r0, ror r1
   11bc0:	ldr	r0, [pc, #24]	; 11be0 <__assert_fail@plt+0x90>
   11bc4:	ldr	r3, [pc, #24]	; 11be4 <__assert_fail@plt+0x94>
   11bc8:	cmp	r3, r0
   11bcc:	bxeq	lr
   11bd0:	ldr	r3, [pc, #16]	; 11be8 <__assert_fail@plt+0x98>
   11bd4:	cmp	r3, #0
   11bd8:	bxeq	lr
   11bdc:	bx	r3
   11be0:	andeq	ip, r2, r8, asr #3
   11be4:	andeq	ip, r2, r8, asr #3
   11be8:	andeq	r0, r0, r0
   11bec:	ldr	r0, [pc, #36]	; 11c18 <__assert_fail@plt+0xc8>
   11bf0:	ldr	r1, [pc, #36]	; 11c1c <__assert_fail@plt+0xcc>
   11bf4:	sub	r1, r1, r0
   11bf8:	asr	r1, r1, #2
   11bfc:	add	r1, r1, r1, lsr #31
   11c00:	asrs	r1, r1, #1
   11c04:	bxeq	lr
   11c08:	ldr	r3, [pc, #16]	; 11c20 <__assert_fail@plt+0xd0>
   11c0c:	cmp	r3, #0
   11c10:	bxeq	lr
   11c14:	bx	r3
   11c18:	andeq	ip, r2, r8, asr #3
   11c1c:	andeq	ip, r2, r8, asr #3
   11c20:	andeq	r0, r0, r0
   11c24:	push	{r4, lr}
   11c28:	ldr	r4, [pc, #24]	; 11c48 <__assert_fail@plt+0xf8>
   11c2c:	ldrb	r3, [r4]
   11c30:	cmp	r3, #0
   11c34:	popne	{r4, pc}
   11c38:	bl	11bc0 <__assert_fail@plt+0x70>
   11c3c:	mov	r3, #1
   11c40:	strb	r3, [r4]
   11c44:	pop	{r4, pc}
   11c48:	andeq	ip, r2, r4, ror #3
   11c4c:	b	11bec <__assert_fail@plt+0x9c>
   11c50:	push	{fp, lr}
   11c54:	mov	fp, sp
   11c58:	mov	r4, r0
   11c5c:	cmp	r0, #0
   11c60:	bne	11d34 <__assert_fail@plt+0x1e4>
   11c64:	movw	r1, #42107	; 0xa47b
   11c68:	movt	r1, #1
   11c6c:	mov	r0, #0
   11c70:	mov	r2, #5
   11c74:	bl	117fc <dcgettext@plt>
   11c78:	mov	r1, r0
   11c7c:	movw	r0, #49648	; 0xc1f0
   11c80:	movt	r0, #2
   11c84:	ldr	r2, [r0]
   11c88:	mov	r0, #1
   11c8c:	bl	119d0 <__printf_chk@plt>
   11c90:	movw	r1, #42138	; 0xa49a
   11c94:	movt	r1, #1
   11c98:	mov	r0, #0
   11c9c:	mov	r2, #5
   11ca0:	bl	117fc <dcgettext@plt>
   11ca4:	movw	r5, #49628	; 0xc1dc
   11ca8:	movt	r5, #2
   11cac:	ldr	r1, [r5]
   11cb0:	bl	11754 <fputs_unlocked@plt>
   11cb4:	bl	11d78 <__assert_fail@plt+0x228>
   11cb8:	movw	r1, #42188	; 0xa4cc
   11cbc:	movt	r1, #1
   11cc0:	mov	r0, #0
   11cc4:	mov	r2, #5
   11cc8:	bl	117fc <dcgettext@plt>
   11ccc:	ldr	r1, [r5]
   11cd0:	bl	11754 <fputs_unlocked@plt>
   11cd4:	movw	r1, #42261	; 0xa515
   11cd8:	movt	r1, #1
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	bl	117fc <dcgettext@plt>
   11ce8:	ldr	r1, [r5]
   11cec:	bl	11754 <fputs_unlocked@plt>
   11cf0:	movw	r1, #42468	; 0xa5e4
   11cf4:	movt	r1, #1
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	bl	117fc <dcgettext@plt>
   11d04:	ldr	r1, [r5]
   11d08:	bl	11754 <fputs_unlocked@plt>
   11d0c:	movw	r1, #42513	; 0xa611
   11d10:	movt	r1, #1
   11d14:	mov	r0, #0
   11d18:	mov	r2, #5
   11d1c:	bl	117fc <dcgettext@plt>
   11d20:	ldr	r1, [r5]
   11d24:	bl	11754 <fputs_unlocked@plt>
   11d28:	bl	11da8 <__assert_fail@plt+0x258>
   11d2c:	mov	r0, r4
   11d30:	bl	1194c <exit@plt>
   11d34:	movw	r0, #49624	; 0xc1d8
   11d38:	movt	r0, #2
   11d3c:	ldr	r5, [r0]
   11d40:	movw	r1, #42068	; 0xa454
   11d44:	movt	r1, #1
   11d48:	mov	r0, #0
   11d4c:	mov	r2, #5
   11d50:	bl	117fc <dcgettext@plt>
   11d54:	mov	r2, r0
   11d58:	movw	r0, #49648	; 0xc1f0
   11d5c:	movt	r0, #2
   11d60:	ldr	r3, [r0]
   11d64:	mov	r0, r5
   11d68:	mov	r1, #1
   11d6c:	bl	119e8 <__fprintf_chk@plt>
   11d70:	mov	r0, r4
   11d74:	bl	1194c <exit@plt>
   11d78:	push	{fp, lr}
   11d7c:	mov	fp, sp
   11d80:	movw	r1, #42907	; 0xa79b
   11d84:	movt	r1, #1
   11d88:	mov	r0, #0
   11d8c:	mov	r2, #5
   11d90:	bl	117fc <dcgettext@plt>
   11d94:	movw	r1, #49628	; 0xc1dc
   11d98:	movt	r1, #2
   11d9c:	ldr	r1, [r1]
   11da0:	pop	{fp, lr}
   11da4:	b	11754 <fputs_unlocked@plt>
   11da8:	push	{r4, r5, r6, sl, fp, lr}
   11dac:	add	fp, sp, #16
   11db0:	sub	sp, sp, #56	; 0x38
   11db4:	movw	r0, #43392	; 0xa980
   11db8:	movt	r0, #1
   11dbc:	add	r1, r0, #32
   11dc0:	mov	r2, #48	; 0x30
   11dc4:	vld1.64	{d16-d17}, [r1]
   11dc8:	mov	r6, sp
   11dcc:	add	r1, r6, #32
   11dd0:	add	r3, r0, #16
   11dd4:	vld1.64	{d18-d19}, [r0], r2
   11dd8:	vld1.64	{d20-d21}, [r3]
   11ddc:	vldr	d22, [r0]
   11de0:	vst1.64	{d16-d17}, [r1]
   11de4:	add	r0, r6, #16
   11de8:	vst1.64	{d20-d21}, [r0]
   11dec:	mov	r0, r6
   11df0:	vst1.64	{d18-d19}, [r0], r2
   11df4:	vstr	d22, [r0]
   11df8:	ldr	r1, [sp]
   11dfc:	cmp	r1, #0
   11e00:	movw	r4, #42567	; 0xa647
   11e04:	movt	r4, #1
   11e08:	beq	11e30 <__assert_fail@plt+0x2e0>
   11e0c:	mov	r6, sp
   11e10:	movw	r5, #42567	; 0xa647
   11e14:	movt	r5, #1
   11e18:	mov	r0, r5
   11e1c:	bl	11778 <strcmp@plt>
   11e20:	cmp	r0, #0
   11e24:	ldrne	r1, [r6, #8]!
   11e28:	cmpne	r1, #0
   11e2c:	bne	11e18 <__assert_fail@plt+0x2c8>
   11e30:	ldr	r5, [r6, #4]
   11e34:	movw	r1, #43077	; 0xa845
   11e38:	movt	r1, #1
   11e3c:	mov	r0, #0
   11e40:	mov	r2, #5
   11e44:	bl	117fc <dcgettext@plt>
   11e48:	mov	r1, r0
   11e4c:	movw	r2, #42703	; 0xa6cf
   11e50:	movt	r2, #1
   11e54:	movw	r3, #43100	; 0xa85c
   11e58:	movt	r3, #1
   11e5c:	mov	r0, #1
   11e60:	bl	119d0 <__printf_chk@plt>
   11e64:	cmp	r5, #0
   11e68:	moveq	r5, r4
   11e6c:	mov	r0, #5
   11e70:	mov	r1, #0
   11e74:	bl	11a18 <setlocale@plt>
   11e78:	cmp	r0, #0
   11e7c:	beq	11ebc <__assert_fail@plt+0x36c>
   11e80:	movw	r1, #43140	; 0xa884
   11e84:	movt	r1, #1
   11e88:	mov	r2, #3
   11e8c:	bl	11ae4 <strncmp@plt>
   11e90:	cmp	r0, #0
   11e94:	beq	11ebc <__assert_fail@plt+0x36c>
   11e98:	movw	r1, #43144	; 0xa888
   11e9c:	movt	r1, #1
   11ea0:	mov	r0, #0
   11ea4:	mov	r2, #5
   11ea8:	bl	117fc <dcgettext@plt>
   11eac:	movw	r1, #49628	; 0xc1dc
   11eb0:	movt	r1, #2
   11eb4:	ldr	r1, [r1]
   11eb8:	bl	11754 <fputs_unlocked@plt>
   11ebc:	movw	r1, #43215	; 0xa8cf
   11ec0:	movt	r1, #1
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	bl	117fc <dcgettext@plt>
   11ed0:	mov	r1, r0
   11ed4:	movw	r2, #43100	; 0xa85c
   11ed8:	movt	r2, #1
   11edc:	mov	r0, #1
   11ee0:	mov	r3, r4
   11ee4:	bl	119d0 <__printf_chk@plt>
   11ee8:	movw	r0, #43010	; 0xa802
   11eec:	movt	r0, #1
   11ef0:	movw	r6, #43292	; 0xa91c
   11ef4:	movt	r6, #1
   11ef8:	cmp	r5, r4
   11efc:	moveq	r6, r0
   11f00:	movw	r1, #43242	; 0xa8ea
   11f04:	movt	r1, #1
   11f08:	mov	r0, #0
   11f0c:	mov	r2, #5
   11f10:	bl	117fc <dcgettext@plt>
   11f14:	mov	r1, r0
   11f18:	mov	r0, #1
   11f1c:	mov	r2, r5
   11f20:	mov	r3, r6
   11f24:	sub	sp, fp, #16
   11f28:	pop	{r4, r5, r6, sl, fp, lr}
   11f2c:	b	119d0 <__printf_chk@plt>
   11f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f34:	add	fp, sp, #28
   11f38:	sub	sp, sp, #20
   11f3c:	mov	r4, r1
   11f40:	str	r0, [sp, #16]
   11f44:	ldr	r0, [r1]
   11f48:	bl	16c8c <lchmod@@Base+0x770>
   11f4c:	movw	r1, #43292	; 0xa91c
   11f50:	movt	r1, #1
   11f54:	mov	r0, #6
   11f58:	bl	11a18 <setlocale@plt>
   11f5c:	movw	r6, #42707	; 0xa6d3
   11f60:	movt	r6, #1
   11f64:	movw	r1, #42574	; 0xa64e
   11f68:	movt	r1, #1
   11f6c:	mov	r0, r6
   11f70:	bl	11a9c <bindtextdomain@plt>
   11f74:	mov	r0, r6
   11f78:	bl	1182c <textdomain@plt>
   11f7c:	movw	r0, #12456	; 0x30a8
   11f80:	movt	r0, #1
   11f84:	bl	1a3d8 <lchmod@@Base+0x3ebc>
   11f88:	mov	r7, #0
   11f8c:	movw	r5, #42598	; 0xa666
   11f90:	movt	r5, #1
   11f94:	movw	r6, #43312	; 0xa930
   11f98:	movt	r6, #1
   11f9c:	movw	r9, #49632	; 0xc1e0
   11fa0:	movt	r9, #2
   11fa4:	mov	r8, #0
   11fa8:	mov	sl, #0
   11fac:	mov	r0, #0
   11fb0:	str	r0, [sp, #12]
   11fb4:	str	r7, [sp]
   11fb8:	ldr	r0, [sp, #16]
   11fbc:	mov	r1, r4
   11fc0:	mov	r2, r5
   11fc4:	mov	r3, r6
   11fc8:	bl	11928 <getopt_long@plt>
   11fcc:	cmp	r0, #89	; 0x59
   11fd0:	ble	12090 <__assert_fail@plt+0x540>
   11fd4:	cmp	r0, #90	; 0x5a
   11fd8:	bne	12080 <__assert_fail@plt+0x530>
   11fdc:	bl	1176c <is_selinux_enabled@plt>
   11fe0:	ldr	r1, [r9]
   11fe4:	cmp	r0, #1
   11fe8:	bge	1201c <__assert_fail@plt+0x4cc>
   11fec:	cmp	r1, #0
   11ff0:	beq	11fb4 <__assert_fail@plt+0x464>
   11ff4:	mov	r0, #0
   11ff8:	movw	r1, #42630	; 0xa686
   11ffc:	movt	r1, #1
   12000:	mov	r2, #5
   12004:	bl	117fc <dcgettext@plt>
   12008:	mov	r2, r0
   1200c:	mov	r0, #0
   12010:	mov	r1, #0
   12014:	bl	118c8 <error@plt>
   12018:	b	11fb4 <__assert_fail@plt+0x464>
   1201c:	cmp	r1, #0
   12020:	bne	12078 <__assert_fail@plt+0x528>
   12024:	mov	r0, #0
   12028:	mov	r1, #0
   1202c:	mov	r2, #0
   12030:	bl	1197c <selabel_open@plt>
   12034:	mov	sl, r0
   12038:	cmp	r0, #0
   1203c:	bne	11fb4 <__assert_fail@plt+0x464>
   12040:	bl	119a0 <__errno_location@plt>
   12044:	ldr	r0, [r0]
   12048:	str	r0, [sp, #8]
   1204c:	mov	sl, #0
   12050:	mov	r0, #0
   12054:	movw	r1, #42602	; 0xa66a
   12058:	movt	r1, #1
   1205c:	mov	r2, #5
   12060:	bl	117fc <dcgettext@plt>
   12064:	mov	r2, r0
   12068:	mov	r0, #0
   1206c:	ldr	r1, [sp, #8]
   12070:	bl	118c8 <error@plt>
   12074:	b	11fb4 <__assert_fail@plt+0x464>
   12078:	mov	r8, r1
   1207c:	b	11fb4 <__assert_fail@plt+0x464>
   12080:	cmp	r0, #109	; 0x6d
   12084:	bne	12290 <__assert_fail@plt+0x740>
   12088:	ldr	r0, [r9]
   1208c:	b	11fb0 <__assert_fail@plt+0x460>
   12090:	cmn	r0, #1
   12094:	bne	12230 <__assert_fail@plt+0x6e0>
   12098:	movw	r9, #49616	; 0xc1d0
   1209c:	movt	r9, #2
   120a0:	ldr	r0, [r9]
   120a4:	ldr	r1, [sp, #16]
   120a8:	cmp	r0, r1
   120ac:	beq	12298 <__assert_fail@plt+0x748>
   120b0:	cmp	r8, #0
   120b4:	beq	120c8 <__assert_fail@plt+0x578>
   120b8:	mov	r0, r8
   120bc:	bl	11994 <setfscreatecon@plt>
   120c0:	cmn	r0, #1
   120c4:	ble	122c4 <__assert_fail@plt+0x774>
   120c8:	ldr	r0, [sp, #12]
   120cc:	cmp	r0, #0
   120d0:	beq	12130 <__assert_fail@plt+0x5e0>
   120d4:	bl	16638 <lchmod@@Base+0x11c>
   120d8:	cmp	r0, #0
   120dc:	beq	12300 <__assert_fail@plt+0x7b0>
   120e0:	mov	r8, r0
   120e4:	mov	r5, #0
   120e8:	mov	r0, #0
   120ec:	bl	11ab4 <umask@plt>
   120f0:	mov	r6, r0
   120f4:	bl	11ab4 <umask@plt>
   120f8:	str	r5, [sp]
   120fc:	movw	r0, #438	; 0x1b6
   12100:	mov	r1, #0
   12104:	mov	r2, r6
   12108:	mov	r3, r8
   1210c:	bl	16aec <lchmod@@Base+0x5d0>
   12110:	mov	r6, r0
   12114:	mov	r0, r8
   12118:	bl	1331c <__assert_fail@plt+0x17cc>
   1211c:	cmp	r6, #512	; 0x200
   12120:	bcc	12134 <__assert_fail@plt+0x5e4>
   12124:	movw	r1, #42812	; 0xa73c
   12128:	movt	r1, #1
   1212c:	b	12308 <__assert_fail@plt+0x7b8>
   12130:	movw	r6, #438	; 0x1b6
   12134:	ldr	r0, [r9]
   12138:	mov	r8, #0
   1213c:	ldr	r1, [sp, #16]
   12140:	cmp	r0, r1
   12144:	bge	12224 <__assert_fail@plt+0x6d4>
   12148:	mov	r8, #0
   1214c:	cmp	sl, #0
   12150:	bne	121c0 <__assert_fail@plt+0x670>
   12154:	b	121d0 <__assert_fail@plt+0x680>
   12158:	bl	119a0 <__errno_location@plt>
   1215c:	ldr	r5, [r0]
   12160:	mov	r0, #0
   12164:	movw	r1, #42856	; 0xa768
   12168:	movt	r1, #1
   1216c:	mov	r2, #5
   12170:	bl	117fc <dcgettext@plt>
   12174:	mov	r7, r0
   12178:	ldr	r0, [r9]
   1217c:	ldr	r1, [r4, r0, lsl #2]
   12180:	mov	r0, #4
   12184:	bl	1828c <lchmod@@Base+0x1d70>
   12188:	mov	r3, r0
   1218c:	mov	r0, #0
   12190:	mov	r1, r5
   12194:	mov	r2, r7
   12198:	bl	118c8 <error@plt>
   1219c:	mov	r8, #1
   121a0:	ldr	r0, [r9]
   121a4:	add	r0, r0, #1
   121a8:	str	r0, [r9]
   121ac:	ldr	r1, [sp, #16]
   121b0:	cmp	r0, r1
   121b4:	bge	12224 <__assert_fail@plt+0x6d4>
   121b8:	cmp	sl, #0
   121bc:	beq	121d0 <__assert_fail@plt+0x680>
   121c0:	ldr	r1, [r4, r0, lsl #2]
   121c4:	mov	r0, sl
   121c8:	mov	r2, #4096	; 0x1000
   121cc:	bl	12324 <__assert_fail@plt+0x7d4>
   121d0:	ldr	r0, [r9]
   121d4:	ldr	r0, [r4, r0, lsl #2]
   121d8:	mov	r1, r6
   121dc:	bl	11b14 <mkfifo@plt>
   121e0:	cmp	r0, #0
   121e4:	bne	12158 <__assert_fail@plt+0x608>
   121e8:	ldr	r0, [sp, #12]
   121ec:	cmp	r0, #0
   121f0:	beq	121a0 <__assert_fail@plt+0x650>
   121f4:	ldr	r0, [r9]
   121f8:	ldr	r0, [r4, r0, lsl #2]
   121fc:	mov	r1, r6
   12200:	bl	1651c <lchmod@@Base>
   12204:	cmp	r0, #0
   12208:	beq	121a0 <__assert_fail@plt+0x650>
   1220c:	bl	119a0 <__errno_location@plt>
   12210:	ldr	r5, [r0]
   12214:	mov	r0, #0
   12218:	movw	r1, #42878	; 0xa77e
   1221c:	movt	r1, #1
   12220:	b	1216c <__assert_fail@plt+0x61c>
   12224:	mov	r0, r8
   12228:	sub	sp, fp, #28
   1222c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12230:	cmn	r0, #3
   12234:	bne	12280 <__assert_fail@plt+0x730>
   12238:	movw	r0, #49536	; 0xc180
   1223c:	movt	r0, #2
   12240:	ldr	r3, [r0]
   12244:	movw	r0, #49628	; 0xc1dc
   12248:	movt	r0, #2
   1224c:	ldr	r0, [r0]
   12250:	mov	r1, #0
   12254:	movw	r2, #42717	; 0xa6dd
   12258:	movt	r2, #1
   1225c:	str	r2, [sp]
   12260:	str	r1, [sp, #4]
   12264:	movw	r1, #42567	; 0xa647
   12268:	movt	r1, #1
   1226c:	movw	r2, #42703	; 0xa6cf
   12270:	movt	r2, #1
   12274:	bl	18f00 <lchmod@@Base+0x29e4>
   12278:	mov	r0, #0
   1227c:	bl	1194c <exit@plt>
   12280:	cmn	r0, #2
   12284:	bne	12290 <__assert_fail@plt+0x740>
   12288:	mov	r0, #0
   1228c:	bl	11c50 <__assert_fail@plt+0x100>
   12290:	mov	r0, #1
   12294:	bl	11c50 <__assert_fail@plt+0x100>
   12298:	movw	r1, #42733	; 0xa6ed
   1229c:	movt	r1, #1
   122a0:	mov	r0, #0
   122a4:	mov	r2, #5
   122a8:	bl	117fc <dcgettext@plt>
   122ac:	mov	r2, r0
   122b0:	mov	r0, #0
   122b4:	mov	r1, #0
   122b8:	bl	118c8 <error@plt>
   122bc:	mov	r0, #1
   122c0:	bl	11c50 <__assert_fail@plt+0x100>
   122c4:	bl	119a0 <__errno_location@plt>
   122c8:	ldr	r4, [r0]
   122cc:	movw	r1, #42749	; 0xa6fd
   122d0:	movt	r1, #1
   122d4:	mov	r0, #0
   122d8:	mov	r2, #5
   122dc:	bl	117fc <dcgettext@plt>
   122e0:	mov	r5, r0
   122e4:	mov	r0, r8
   122e8:	bl	18480 <lchmod@@Base+0x1f64>
   122ec:	mov	r3, r0
   122f0:	mov	r0, #1
   122f4:	mov	r1, r4
   122f8:	mov	r2, r5
   122fc:	bl	118c8 <error@plt>
   12300:	movw	r1, #42799	; 0xa72f
   12304:	movt	r1, #1
   12308:	mov	r0, #0
   1230c:	mov	r2, #5
   12310:	bl	117fc <dcgettext@plt>
   12314:	mov	r2, r0
   12318:	mov	r0, #1
   1231c:	mov	r1, #0
   12320:	bl	118c8 <error@plt>
   12324:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12328:	add	fp, sp, #24
   1232c:	sub	sp, sp, #8
   12330:	mov	r5, r2
   12334:	mov	r6, r1
   12338:	mov	r7, r0
   1233c:	mov	r4, #0
   12340:	str	r4, [sp, #4]
   12344:	str	r4, [sp]
   12348:	ldrb	r0, [r1]
   1234c:	cmp	r0, #47	; 0x2f
   12350:	beq	12370 <__assert_fail@plt+0x820>
   12354:	mov	r0, r6
   12358:	mov	r1, #2
   1235c:	bl	128d4 <__assert_fail@plt+0xd84>
   12360:	mov	r4, r0
   12364:	cmp	r0, #0
   12368:	mov	r6, r0
   1236c:	beq	12440 <__assert_fail@plt+0x8f0>
   12370:	add	r1, sp, #4
   12374:	mov	r0, r7
   12378:	mov	r2, r6
   1237c:	mov	r3, r5
   12380:	bl	1173c <selabel_lookup@plt>
   12384:	cmn	r0, #1
   12388:	ble	1241c <__assert_fail@plt+0x8cc>
   1238c:	mov	r2, sp
   12390:	mov	r0, r6
   12394:	mov	r1, r5
   12398:	bl	1249c <__assert_fail@plt+0x94c>
   1239c:	mvn	r8, #0
   123a0:	cmp	r0, #0
   123a4:	bmi	12410 <__assert_fail@plt+0x8c0>
   123a8:	ldr	r0, [sp, #4]
   123ac:	bl	117f0 <context_new@plt>
   123b0:	cmp	r0, #0
   123b4:	beq	12410 <__assert_fail@plt+0x8c0>
   123b8:	mov	r7, r0
   123bc:	ldr	r0, [sp]
   123c0:	bl	117f0 <context_new@plt>
   123c4:	cmp	r0, #0
   123c8:	beq	12454 <__assert_fail@plt+0x904>
   123cc:	mov	r9, r0
   123d0:	mov	r0, r7
   123d4:	bl	11784 <context_type_get@plt>
   123d8:	cmp	r0, #0
   123dc:	beq	12458 <__assert_fail@plt+0x908>
   123e0:	mov	r1, r0
   123e4:	mov	r0, r9
   123e8:	bl	11808 <context_type_set@plt>
   123ec:	cmp	r0, #0
   123f0:	bne	12458 <__assert_fail@plt+0x908>
   123f4:	mov	r0, r9
   123f8:	bl	11ac0 <context_str@plt>
   123fc:	cmp	r0, #0
   12400:	beq	12458 <__assert_fail@plt+0x908>
   12404:	bl	11994 <setfscreatecon@plt>
   12408:	mov	r8, r0
   1240c:	b	12458 <__assert_fail@plt+0x908>
   12410:	mov	r9, #0
   12414:	mov	r7, #0
   12418:	b	12458 <__assert_fail@plt+0x908>
   1241c:	bl	119a0 <__errno_location@plt>
   12420:	ldr	r1, [r0]
   12424:	mvn	r8, #0
   12428:	mov	r9, #0
   1242c:	cmp	r1, #2
   12430:	moveq	r1, #61	; 0x3d
   12434:	streq	r1, [r0]
   12438:	mov	r7, #0
   1243c:	b	12458 <__assert_fail@plt+0x908>
   12440:	mov	r9, #0
   12444:	mvn	r8, #0
   12448:	mov	r7, #0
   1244c:	mov	r4, #0
   12450:	b	12458 <__assert_fail@plt+0x908>
   12454:	mov	r9, #0
   12458:	bl	119a0 <__errno_location@plt>
   1245c:	mov	r5, r0
   12460:	ldr	r6, [r0]
   12464:	mov	r0, r7
   12468:	bl	1191c <context_free@plt>
   1246c:	mov	r0, r9
   12470:	bl	1191c <context_free@plt>
   12474:	ldr	r0, [sp, #4]
   12478:	bl	11a90 <freecon@plt>
   1247c:	ldr	r0, [sp]
   12480:	bl	11a90 <freecon@plt>
   12484:	mov	r0, r4
   12488:	bl	1331c <__assert_fail@plt+0x17cc>
   1248c:	str	r6, [r5]
   12490:	mov	r0, r8
   12494:	sub	sp, fp, #24
   12498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1249c:	push	{r4, r5, r6, r7, fp, lr}
   124a0:	add	fp, sp, #16
   124a4:	sub	sp, sp, #8
   124a8:	mov	r6, r2
   124ac:	mov	r7, r1
   124b0:	mov	r1, #0
   124b4:	str	r1, [sp, #4]
   124b8:	str	r1, [sp]
   124bc:	bl	13190 <__assert_fail@plt+0x1640>
   124c0:	mov	r4, r0
   124c4:	add	r0, sp, #4
   124c8:	bl	11898 <getcon@plt>
   124cc:	mvn	r5, #0
   124d0:	cmp	r0, #0
   124d4:	bmi	12514 <__assert_fail@plt+0x9c4>
   124d8:	mov	r1, sp
   124dc:	mov	r0, r4
   124e0:	bl	18a34 <lchmod@@Base+0x2518>
   124e4:	cmp	r0, #0
   124e8:	bmi	12514 <__assert_fail@plt+0x9c4>
   124ec:	mov	r0, r7
   124f0:	bl	11b20 <mode_to_security_class@plt>
   124f4:	cmp	r0, #0
   124f8:	beq	12514 <__assert_fail@plt+0x9c4>
   124fc:	mov	r2, r0
   12500:	ldr	r1, [sp]
   12504:	ldr	r0, [sp, #4]
   12508:	mov	r3, r6
   1250c:	bl	11a60 <security_compute_create@plt>
   12510:	mov	r5, r0
   12514:	bl	119a0 <__errno_location@plt>
   12518:	mov	r6, r0
   1251c:	ldr	r7, [r0]
   12520:	mov	r0, r4
   12524:	bl	1331c <__assert_fail@plt+0x17cc>
   12528:	ldr	r0, [sp, #4]
   1252c:	bl	11a90 <freecon@plt>
   12530:	ldr	r0, [sp]
   12534:	bl	11a90 <freecon@plt>
   12538:	str	r7, [r6]
   1253c:	mov	r0, r5
   12540:	sub	sp, fp, #16
   12544:	pop	{r4, r5, r6, r7, fp, pc}
   12548:	push	{r4, r5, r6, r7, fp, lr}
   1254c:	add	fp, sp, #16
   12550:	sub	sp, sp, #8
   12554:	mov	r6, r2
   12558:	mov	r5, r0
   1255c:	ldrb	r0, [r1]
   12560:	mov	r4, #0
   12564:	cmp	r0, #47	; 0x2f
   12568:	beq	12588 <__assert_fail@plt+0xa38>
   1256c:	mov	r0, r1
   12570:	mov	r1, #2
   12574:	bl	128d4 <__assert_fail@plt+0xd84>
   12578:	mov	r4, r0
   1257c:	cmp	r0, #0
   12580:	mov	r1, r0
   12584:	beq	12664 <__assert_fail@plt+0xb14>
   12588:	cmp	r6, #0
   1258c:	beq	125f0 <__assert_fail@plt+0xaa0>
   12590:	mov	r7, #0
   12594:	stm	sp, {r1, r7}
   12598:	mov	r0, sp
   1259c:	mov	r1, #16
   125a0:	mov	r2, #0
   125a4:	bl	193d4 <lchmod@@Base+0x2eb8>
   125a8:	mov	r6, r0
   125ac:	bl	13ca4 <__assert_fail@plt+0x2154>
   125b0:	cmp	r0, #0
   125b4:	beq	12628 <__assert_fail@plt+0xad8>
   125b8:	mov	r7, #0
   125bc:	b	125d0 <__assert_fail@plt+0xa80>
   125c0:	mov	r0, r6
   125c4:	bl	13ca4 <__assert_fail@plt+0x2154>
   125c8:	cmp	r0, #0
   125cc:	beq	12628 <__assert_fail@plt+0xad8>
   125d0:	ldr	r1, [r6, #24]
   125d4:	mov	r0, r5
   125d8:	bl	12670 <__assert_fail@plt+0xb20>
   125dc:	cmn	r0, #1
   125e0:	bgt	125c0 <__assert_fail@plt+0xa70>
   125e4:	bl	119a0 <__errno_location@plt>
   125e8:	ldr	r7, [r0]
   125ec:	b	125c0 <__assert_fail@plt+0xa70>
   125f0:	mov	r0, r5
   125f4:	bl	12670 <__assert_fail@plt+0xb20>
   125f8:	mov	r5, r0
   125fc:	bl	119a0 <__errno_location@plt>
   12600:	mov	r6, r0
   12604:	ldr	r7, [r0]
   12608:	mov	r0, r4
   1260c:	bl	1331c <__assert_fail@plt+0x17cc>
   12610:	str	r7, [r6]
   12614:	mvn	r0, #0
   12618:	subs	r0, r5, r0
   1261c:	movwne	r0, #1
   12620:	sub	sp, fp, #16
   12624:	pop	{r4, r5, r6, r7, fp, pc}
   12628:	bl	119a0 <__errno_location@plt>
   1262c:	mov	r5, r0
   12630:	ldr	r0, [r0]
   12634:	cmp	r0, #0
   12638:	movne	r7, r0
   1263c:	mov	r0, r6
   12640:	bl	13b10 <__assert_fail@plt+0x1fc0>
   12644:	cmp	r0, #0
   12648:	ldrne	r7, [r5]
   1264c:	mov	r0, r4
   12650:	bl	1331c <__assert_fail@plt+0x17cc>
   12654:	clz	r0, r7
   12658:	lsr	r0, r0, #5
   1265c:	sub	sp, fp, #16
   12660:	pop	{r4, r5, r6, r7, fp, pc}
   12664:	mov	r0, #0
   12668:	sub	sp, fp, #16
   1266c:	pop	{r4, r5, r6, r7, fp, pc}
   12670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12674:	add	fp, sp, #28
   12678:	sub	sp, sp, #116	; 0x74
   1267c:	mov	r7, r1
   12680:	mov	r5, r0
   12684:	mov	r0, #0
   12688:	str	r0, [sp, #4]
   1268c:	str	r0, [sp]
   12690:	cmp	r5, #0
   12694:	beq	126e4 <__assert_fail@plt+0xb94>
   12698:	mov	r0, r7
   1269c:	mov	r1, #32768	; 0x8000
   126a0:	bl	118d4 <open64@plt>
   126a4:	mov	r4, r0
   126a8:	cmn	r0, #1
   126ac:	beq	1272c <__assert_fail@plt+0xbdc>
   126b0:	add	r1, sp, #8
   126b4:	mov	r0, r4
   126b8:	bl	1a400 <lchmod@@Base+0x3ee4>
   126bc:	mov	r9, #1
   126c0:	cmn	r0, #1
   126c4:	bgt	12754 <__assert_fail@plt+0xc04>
   126c8:	bl	119a0 <__errno_location@plt>
   126cc:	mov	r7, r0
   126d0:	ldr	r6, [r0]
   126d4:	mov	r8, #0
   126d8:	mvn	r5, #0
   126dc:	mov	sl, #0
   126e0:	b	1288c <__assert_fail@plt+0xd3c>
   126e4:	mov	r0, sp
   126e8:	bl	11aa8 <getfscreatecon@plt>
   126ec:	mvn	r5, #0
   126f0:	cmp	r0, #0
   126f4:	bmi	128b8 <__assert_fail@plt+0xd68>
   126f8:	ldr	r1, [sp]
   126fc:	cmp	r1, #0
   12700:	beq	127e8 <__assert_fail@plt+0xc98>
   12704:	mov	r0, r7
   12708:	bl	1179c <lsetfilecon@plt>
   1270c:	mov	r5, r0
   12710:	bl	119a0 <__errno_location@plt>
   12714:	mov	r4, r0
   12718:	ldr	r6, [r0]
   1271c:	ldr	r0, [sp]
   12720:	bl	11a90 <freecon@plt>
   12724:	str	r6, [r4]
   12728:	b	128b8 <__assert_fail@plt+0xd68>
   1272c:	bl	119a0 <__errno_location@plt>
   12730:	ldr	r0, [r0]
   12734:	cmp	r0, #40	; 0x28
   12738:	bne	127a8 <__assert_fail@plt+0xc58>
   1273c:	add	r1, sp, #8
   12740:	mov	r0, r7
   12744:	bl	1a410 <lchmod@@Base+0x3ef4>
   12748:	mov	r9, #0
   1274c:	cmp	r0, #0
   12750:	bmi	127a8 <__assert_fail@plt+0xc58>
   12754:	ldr	r3, [sp, #24]
   12758:	add	r1, sp, #4
   1275c:	mov	r0, r5
   12760:	mov	r2, r7
   12764:	bl	1173c <selabel_lookup@plt>
   12768:	cmn	r0, #1
   1276c:	ble	127c4 <__assert_fail@plt+0xc74>
   12770:	ldr	r0, [sp, #4]
   12774:	bl	117f0 <context_new@plt>
   12778:	mvn	r5, #0
   1277c:	cmp	r0, #0
   12780:	beq	127f8 <__assert_fail@plt+0xca8>
   12784:	mov	r8, r0
   12788:	mov	r1, sp
   1278c:	cmp	r9, #0
   12790:	beq	12804 <__assert_fail@plt+0xcb4>
   12794:	mov	r0, r4
   12798:	bl	18adc <lchmod@@Base+0x25c0>
   1279c:	cmp	r0, #0
   127a0:	bpl	12814 <__assert_fail@plt+0xcc4>
   127a4:	b	12874 <__assert_fail@plt+0xd24>
   127a8:	bl	119a0 <__errno_location@plt>
   127ac:	mov	r7, r0
   127b0:	ldr	r6, [r0]
   127b4:	mov	r8, #0
   127b8:	mvn	r5, #0
   127bc:	mov	sl, #0
   127c0:	b	12894 <__assert_fail@plt+0xd44>
   127c4:	bl	119a0 <__errno_location@plt>
   127c8:	ldr	r1, [r0]
   127cc:	mvn	r5, #0
   127d0:	mov	sl, #0
   127d4:	cmp	r1, #2
   127d8:	moveq	r1, #61	; 0x3d
   127dc:	streq	r1, [r0]
   127e0:	mov	r8, #0
   127e4:	b	12878 <__assert_fail@plt+0xd28>
   127e8:	bl	119a0 <__errno_location@plt>
   127ec:	mov	r1, #61	; 0x3d
   127f0:	str	r1, [r0]
   127f4:	b	128b8 <__assert_fail@plt+0xd68>
   127f8:	mov	sl, #0
   127fc:	mov	r8, #0
   12800:	b	12878 <__assert_fail@plt+0xd28>
   12804:	mov	r0, r7
   12808:	bl	18ac0 <lchmod@@Base+0x25a4>
   1280c:	cmp	r0, #0
   12810:	bmi	12874 <__assert_fail@plt+0xd24>
   12814:	ldr	r0, [sp]
   12818:	bl	117f0 <context_new@plt>
   1281c:	cmp	r0, #0
   12820:	beq	12874 <__assert_fail@plt+0xd24>
   12824:	mov	sl, r0
   12828:	mov	r0, r8
   1282c:	bl	11784 <context_type_get@plt>
   12830:	cmp	r0, #0
   12834:	beq	12878 <__assert_fail@plt+0xd28>
   12838:	mov	r1, r0
   1283c:	mov	r0, sl
   12840:	bl	11808 <context_type_set@plt>
   12844:	cmp	r0, #0
   12848:	bne	12878 <__assert_fail@plt+0xd28>
   1284c:	mov	r0, sl
   12850:	bl	11ac0 <context_str@plt>
   12854:	cmp	r0, #0
   12858:	beq	12878 <__assert_fail@plt+0xd28>
   1285c:	mov	r1, r0
   12860:	cmp	r9, #0
   12864:	beq	128c4 <__assert_fail@plt+0xd74>
   12868:	mov	r0, r4
   1286c:	bl	11a24 <fsetfilecon@plt>
   12870:	b	128cc <__assert_fail@plt+0xd7c>
   12874:	mov	sl, #0
   12878:	bl	119a0 <__errno_location@plt>
   1287c:	mov	r7, r0
   12880:	ldr	r6, [r0]
   12884:	cmn	r4, #1
   12888:	beq	12894 <__assert_fail@plt+0xd44>
   1288c:	mov	r0, r4
   12890:	bl	11afc <close@plt>
   12894:	mov	r0, r8
   12898:	bl	1191c <context_free@plt>
   1289c:	mov	r0, sl
   128a0:	bl	1191c <context_free@plt>
   128a4:	ldr	r0, [sp, #4]
   128a8:	bl	11a90 <freecon@plt>
   128ac:	ldr	r0, [sp]
   128b0:	bl	11a90 <freecon@plt>
   128b4:	str	r6, [r7]
   128b8:	mov	r0, r5
   128bc:	sub	sp, fp, #28
   128c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128c4:	mov	r0, r7
   128c8:	bl	1179c <lsetfilecon@plt>
   128cc:	mov	r5, r0
   128d0:	b	12878 <__assert_fail@plt+0xd28>
   128d4:	push	{r4, r5, fp, lr}
   128d8:	add	fp, sp, #8
   128dc:	sub	sp, sp, #8
   128e0:	sub	sp, sp, #1024	; 0x400
   128e4:	mov	r2, sp
   128e8:	bl	128f4 <__assert_fail@plt+0xda4>
   128ec:	sub	sp, fp, #8
   128f0:	pop	{r4, r5, fp, pc}
   128f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f8:	add	fp, sp, #28
   128fc:	sub	sp, sp, #164	; 0xa4
   12900:	sub	sp, sp, #2048	; 0x800
   12904:	mov	sl, r2
   12908:	mov	r5, r1
   1290c:	mov	r9, r0
   12910:	mov	r6, #0
   12914:	str	r6, [fp, #-36]	; 0xffffffdc
   12918:	and	r0, r1, #3
   1291c:	str	r0, [sp, #28]
   12920:	bl	12efc <__assert_fail@plt+0x13ac>
   12924:	cmp	r0, #0
   12928:	beq	1293c <__assert_fail@plt+0xdec>
   1292c:	bl	119a0 <__errno_location@plt>
   12930:	mov	r1, #22
   12934:	str	r1, [r0]
   12938:	b	12ed4 <__assert_fail@plt+0x1384>
   1293c:	cmp	r9, #0
   12940:	beq	1299c <__assert_fail@plt+0xe4c>
   12944:	ldrb	r0, [r9]
   12948:	cmp	r0, #0
   1294c:	beq	129a8 <__assert_fail@plt+0xe58>
   12950:	sub	r0, fp, #1072	; 0x430
   12954:	bl	12f0c <__assert_fail@plt+0x13bc>
   12958:	add	r0, sp, #136	; 0x88
   1295c:	bl	12f0c <__assert_fail@plt+0x13bc>
   12960:	mov	r0, sl
   12964:	bl	12f0c <__assert_fail@plt+0x13bc>
   12968:	ldr	r4, [sl]
   1296c:	ldrb	r0, [r9]
   12970:	cmp	r0, #47	; 0x2f
   12974:	bne	129bc <__assert_fail@plt+0xe6c>
   12978:	mov	r0, r4
   1297c:	mov	r1, r9
   12980:	mov	r2, #0
   12984:	mvn	r3, #0
   12988:	bl	11b44 <__mempcpy_chk@plt>
   1298c:	mov	r6, r0
   12990:	mov	r0, #47	; 0x2f
   12994:	strb	r0, [r6], #1
   12998:	b	129e0 <__assert_fail@plt+0xe90>
   1299c:	bl	119a0 <__errno_location@plt>
   129a0:	mov	r1, #22
   129a4:	b	129b0 <__assert_fail@plt+0xe60>
   129a8:	bl	119a0 <__errno_location@plt>
   129ac:	mov	r1, #2
   129b0:	str	r1, [r0]
   129b4:	mov	r6, #0
   129b8:	b	12ed4 <__assert_fail@plt+0x1384>
   129bc:	ldr	r1, [sl, #4]
   129c0:	mov	r0, r4
   129c4:	bl	11940 <getcwd@plt>
   129c8:	cmp	r0, #0
   129cc:	beq	12e2c <__assert_fail@plt+0x12dc>
   129d0:	mov	r0, r4
   129d4:	mov	r1, #0
   129d8:	bl	11838 <rawmemchr@plt>
   129dc:	mov	r6, r0
   129e0:	ldrb	r0, [r9]
   129e4:	cmp	r0, #0
   129e8:	beq	12e08 <__assert_fail@plt+0x12b8>
   129ec:	and	r1, r5, #4
   129f0:	str	r1, [sp, #24]
   129f4:	mov	r1, #0
   129f8:	str	r1, [sp, #4]
   129fc:	mov	r1, #0
   12a00:	str	r1, [sp, #12]
   12a04:	str	sl, [sp, #20]
   12a08:	uxtb	r1, r0
   12a0c:	cmp	r1, #47	; 0x2f
   12a10:	bne	12a20 <__assert_fail@plt+0xed0>
   12a14:	ldrb	r0, [r9, #1]!
   12a18:	cmp	r0, #47	; 0x2f
   12a1c:	beq	12a14 <__assert_fail@plt+0xec4>
   12a20:	mov	r8, r9
   12a24:	b	12a2c <__assert_fail@plt+0xedc>
   12a28:	add	r8, r8, #1
   12a2c:	ldrb	r1, [r8]
   12a30:	cmp	r1, #0
   12a34:	cmpne	r1, #47	; 0x2f
   12a38:	bne	12a28 <__assert_fail@plt+0xed8>
   12a3c:	sub	r7, r8, r9
   12a40:	cmp	r7, #1
   12a44:	beq	12a5c <__assert_fail@plt+0xf0c>
   12a48:	cmp	r7, #2
   12a4c:	beq	12a6c <__assert_fail@plt+0xf1c>
   12a50:	cmp	r7, #0
   12a54:	bne	12ab4 <__assert_fail@plt+0xf64>
   12a58:	b	12e08 <__assert_fail@plt+0x12b8>
   12a5c:	uxtb	r0, r0
   12a60:	cmp	r0, #46	; 0x2e
   12a64:	bne	12ab4 <__assert_fail@plt+0xf64>
   12a68:	b	12da4 <__assert_fail@plt+0x1254>
   12a6c:	uxtb	r0, r0
   12a70:	cmp	r0, #46	; 0x2e
   12a74:	bne	12ab4 <__assert_fail@plt+0xf64>
   12a78:	ldrb	r0, [r9, #1]
   12a7c:	cmp	r0, #46	; 0x2e
   12a80:	bne	12ab4 <__assert_fail@plt+0xf64>
   12a84:	add	r0, r4, #1
   12a88:	cmp	r6, r0
   12a8c:	bls	12da4 <__assert_fail@plt+0x1254>
   12a90:	sub	r0, r6, #1
   12a94:	mov	r6, r0
   12a98:	cmp	r0, r4
   12a9c:	bls	12da4 <__assert_fail@plt+0x1254>
   12aa0:	mov	r0, r6
   12aa4:	ldrb	r1, [r0, #-1]!
   12aa8:	cmp	r1, #47	; 0x2f
   12aac:	bne	12a94 <__assert_fail@plt+0xf44>
   12ab0:	b	12da4 <__assert_fail@plt+0x1254>
   12ab4:	ldrb	r0, [r6, #-1]
   12ab8:	cmp	r0, #47	; 0x2f
   12abc:	movne	r0, #47	; 0x2f
   12ac0:	strbne	r0, [r6], #1
   12ac4:	ldr	r0, [sl, #4]
   12ac8:	add	r0, r4, r0
   12acc:	sub	r0, r0, r6
   12ad0:	add	r5, r7, #2
   12ad4:	cmp	r0, r5
   12ad8:	bcs	12b0c <__assert_fail@plt+0xfbc>
   12adc:	mov	r0, sl
   12ae0:	bl	18988 <lchmod@@Base+0x246c>
   12ae4:	cmp	r0, #0
   12ae8:	beq	12ef8 <__assert_fail@plt+0x13a8>
   12aec:	sub	r0, r6, r4
   12af0:	ldr	r4, [sl]
   12af4:	ldr	r1, [sl, #4]
   12af8:	add	r6, r4, r0
   12afc:	add	r0, r4, r1
   12b00:	sub	r0, r0, r6
   12b04:	cmp	r0, r5
   12b08:	bcc	12adc <__assert_fail@plt+0xf8c>
   12b0c:	mov	r0, r6
   12b10:	mov	r1, r9
   12b14:	str	r7, [sp, #16]
   12b18:	mov	r2, r7
   12b1c:	mvn	r3, #0
   12b20:	bl	11b44 <__mempcpy_chk@plt>
   12b24:	mov	r6, r0
   12b28:	mov	r0, #0
   12b2c:	strb	r0, [r6]
   12b30:	ldr	r0, [sp, #24]
   12b34:	cmp	r0, #0
   12b38:	bne	12b98 <__assert_fail@plt+0x1048>
   12b3c:	ldr	r5, [sp, #136]	; 0x88
   12b40:	ldr	r0, [sp, #140]	; 0x8c
   12b44:	sub	r7, r0, #1
   12b48:	mov	r0, r4
   12b4c:	mov	r1, r5
   12b50:	mov	r2, r7
   12b54:	bl	11868 <readlink@plt>
   12b58:	cmp	r0, r7
   12b5c:	blt	12b74 <__assert_fail@plt+0x1024>
   12b60:	add	r0, sp, #136	; 0x88
   12b64:	bl	18904 <lchmod@@Base+0x23e8>
   12b68:	cmp	r0, #0
   12b6c:	bne	12b3c <__assert_fail@plt+0xfec>
   12b70:	b	12ef8 <__assert_fail@plt+0x13a8>
   12b74:	mov	sl, r0
   12b78:	cmp	r0, #0
   12b7c:	bmi	12b98 <__assert_fail@plt+0x1048>
   12b80:	ldr	r0, [sp, #4]
   12b84:	cmp	r0, #19
   12b88:	bgt	12c08 <__assert_fail@plt+0x10b8>
   12b8c:	add	r0, r0, #1
   12b90:	str	r0, [sp, #4]
   12b94:	b	12c80 <__assert_fail@plt+0x1130>
   12b98:	ldr	r0, [sp, #28]
   12b9c:	cmp	r0, #2
   12ba0:	bne	12bb0 <__assert_fail@plt+0x1060>
   12ba4:	mov	r9, r8
   12ba8:	ldr	sl, [sp, #20]
   12bac:	b	12dfc <__assert_fail@plt+0x12ac>
   12bb0:	mov	r0, r8
   12bb4:	bl	12fb8 <__assert_fail@plt+0x1468>
   12bb8:	cmp	r0, #0
   12bbc:	beq	12bdc <__assert_fail@plt+0x108c>
   12bc0:	mov	r0, r4
   12bc4:	mov	r1, r6
   12bc8:	bl	13040 <__assert_fail@plt+0x14f0>
   12bcc:	cmp	r0, #0
   12bd0:	ldr	sl, [sp, #20]
   12bd4:	bne	12da4 <__assert_fail@plt+0x1254>
   12bd8:	b	12dbc <__assert_fail@plt+0x126c>
   12bdc:	ldr	r0, [sp, #24]
   12be0:	cmp	r0, #0
   12be4:	ldr	sl, [sp, #20]
   12be8:	beq	12d94 <__assert_fail@plt+0x1244>
   12bec:	ldrb	r0, [r8]
   12bf0:	cmp	r0, #0
   12bf4:	beq	12dac <__assert_fail@plt+0x125c>
   12bf8:	mov	r9, r8
   12bfc:	cmp	r0, #0
   12c00:	bne	12a08 <__assert_fail@plt+0xeb8>
   12c04:	b	12e08 <__assert_fail@plt+0x12b8>
   12c08:	ldrb	r0, [r9]
   12c0c:	cmp	r0, #0
   12c10:	beq	12c80 <__assert_fail@plt+0x1130>
   12c14:	mov	r0, #0
   12c18:	ldr	r7, [sp, #16]
   12c1c:	strb	r0, [r6, -r7]
   12c20:	ldrb	r0, [r4]
   12c24:	cmp	r0, #0
   12c28:	mov	r0, r4
   12c2c:	movw	r1, #43483	; 0xa9db
   12c30:	movt	r1, #1
   12c34:	moveq	r0, r1
   12c38:	add	r1, sp, #32
   12c3c:	bl	1a3f0 <lchmod@@Base+0x3ed4>
   12c40:	cmp	r0, #0
   12c44:	bne	12eec <__assert_fail@plt+0x139c>
   12c48:	rsb	r0, r7, #0
   12c4c:	ldrb	r1, [r9]
   12c50:	strb	r1, [r6, r0]
   12c54:	sub	r0, fp, #36	; 0x24
   12c58:	mov	r1, r9
   12c5c:	add	r2, sp, #32
   12c60:	bl	12f20 <__assert_fail@plt+0x13d0>
   12c64:	cmp	r0, #0
   12c68:	beq	12c80 <__assert_fail@plt+0x1130>
   12c6c:	ldr	r0, [sp, #28]
   12c70:	cmp	r0, #2
   12c74:	ldr	sl, [sp, #20]
   12c78:	beq	12da4 <__assert_fail@plt+0x1254>
   12c7c:	b	12ee0 <__assert_fail@plt+0x1390>
   12c80:	mov	r0, #0
   12c84:	strb	r0, [r5, sl]
   12c88:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   12c8c:	ldr	r0, [sp, #12]
   12c90:	tst	r0, #1
   12c94:	ldr	r0, [sp, #8]
   12c98:	subne	r0, r8, r9
   12c9c:	str	r0, [sp, #8]
   12ca0:	mov	r0, r8
   12ca4:	bl	11970 <strlen@plt>
   12ca8:	mvn	r1, sl
   12cac:	cmp	r0, r1
   12cb0:	bhi	12ef8 <__assert_fail@plt+0x13a8>
   12cb4:	str	r0, [sp, #16]
   12cb8:	add	r7, r0, sl
   12cbc:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   12cc0:	cmp	r0, r7
   12cc4:	bhi	12ce8 <__assert_fail@plt+0x1198>
   12cc8:	sub	r0, fp, #1072	; 0x430
   12ccc:	bl	18988 <lchmod@@Base+0x246c>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12ef8 <__assert_fail@plt+0x13a8>
   12cd8:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   12cdc:	cmp	r0, r7
   12ce0:	bls	12cc8 <__assert_fail@plt+0x1178>
   12ce4:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   12ce8:	ldr	r0, [sp, #12]
   12cec:	tst	r0, #1
   12cf0:	ldr	r0, [sp, #8]
   12cf4:	addne	r8, r9, r0
   12cf8:	add	r0, r9, sl
   12cfc:	ldr	r1, [sp, #16]
   12d00:	add	r2, r1, #1
   12d04:	mov	r1, r8
   12d08:	bl	117a8 <memmove@plt>
   12d0c:	mov	r0, r9
   12d10:	mov	r1, r5
   12d14:	mov	r2, sl
   12d18:	bl	117d8 <memcpy@plt>
   12d1c:	ldrb	r0, [r5]
   12d20:	cmp	r0, #47	; 0x2f
   12d24:	bne	12d58 <__assert_fail@plt+0x1208>
   12d28:	mov	r0, r4
   12d2c:	mov	r1, r5
   12d30:	mov	r2, #0
   12d34:	mvn	r3, #0
   12d38:	bl	11b44 <__mempcpy_chk@plt>
   12d3c:	mov	r6, r0
   12d40:	mov	r0, #47	; 0x2f
   12d44:	strb	r0, [r6], #1
   12d48:	mov	r0, #1
   12d4c:	str	r0, [sp, #12]
   12d50:	ldr	sl, [sp, #20]
   12d54:	b	12dfc <__assert_fail@plt+0x12ac>
   12d58:	add	r0, r4, #1
   12d5c:	mov	r1, #1
   12d60:	str	r1, [sp, #12]
   12d64:	cmp	r6, r0
   12d68:	ldr	sl, [sp, #20]
   12d6c:	bls	12dfc <__assert_fail@plt+0x12ac>
   12d70:	sub	r0, r6, #1
   12d74:	mov	r6, r0
   12d78:	cmp	r0, r4
   12d7c:	bls	12dfc <__assert_fail@plt+0x12ac>
   12d80:	mov	r0, r6
   12d84:	ldrb	r1, [r0, #-1]!
   12d88:	cmp	r1, #47	; 0x2f
   12d8c:	bne	12d74 <__assert_fail@plt+0x1224>
   12d90:	b	12dfc <__assert_fail@plt+0x12ac>
   12d94:	bl	119a0 <__errno_location@plt>
   12d98:	ldr	r0, [r0]
   12d9c:	cmp	r0, #22
   12da0:	bne	12dbc <__assert_fail@plt+0x126c>
   12da4:	mov	r9, r8
   12da8:	b	12dfc <__assert_fail@plt+0x12ac>
   12dac:	mov	r0, r4
   12db0:	bl	1304c <__assert_fail@plt+0x14fc>
   12db4:	cmp	r0, #0
   12db8:	bne	12da4 <__assert_fail@plt+0x1254>
   12dbc:	mov	r5, #1
   12dc0:	ldr	r0, [sp, #28]
   12dc4:	cmp	r0, #1
   12dc8:	bne	12e7c <__assert_fail@plt+0x132c>
   12dcc:	bl	119a0 <__errno_location@plt>
   12dd0:	ldr	r0, [r0]
   12dd4:	cmp	r0, #2
   12dd8:	bne	12e7c <__assert_fail@plt+0x132c>
   12ddc:	mov	r0, r8
   12de0:	movw	r1, #44681	; 0xae89
   12de4:	movt	r1, #1
   12de8:	bl	11b38 <strspn@plt>
   12dec:	ldrb	r0, [r8, r0]
   12df0:	cmp	r0, #0
   12df4:	mov	r9, r8
   12df8:	bne	12e7c <__assert_fail@plt+0x132c>
   12dfc:	ldrb	r0, [r9]
   12e00:	cmp	r0, #0
   12e04:	bne	12a08 <__assert_fail@plt+0xeb8>
   12e08:	add	r0, r4, #1
   12e0c:	mov	r5, #0
   12e10:	cmp	r6, r0
   12e14:	bls	12e7c <__assert_fail@plt+0x132c>
   12e18:	mov	r0, r6
   12e1c:	ldrb	r1, [r0, #-1]!
   12e20:	cmp	r1, #47	; 0x2f
   12e24:	moveq	r6, r0
   12e28:	b	12e7c <__assert_fail@plt+0x132c>
   12e2c:	bl	119a0 <__errno_location@plt>
   12e30:	mov	r6, r0
   12e34:	ldr	r0, [r6]
   12e38:	cmp	r0, #34	; 0x22
   12e3c:	bne	12e6c <__assert_fail@plt+0x131c>
   12e40:	mov	r0, sl
   12e44:	bl	18904 <lchmod@@Base+0x23e8>
   12e48:	cmp	r0, #0
   12e4c:	beq	12ef8 <__assert_fail@plt+0x13a8>
   12e50:	ldr	r4, [sl]
   12e54:	ldr	r1, [sl, #4]
   12e58:	mov	r0, r4
   12e5c:	bl	11940 <getcwd@plt>
   12e60:	cmp	r0, #0
   12e64:	beq	12e34 <__assert_fail@plt+0x12e4>
   12e68:	b	129d0 <__assert_fail@plt+0xe80>
   12e6c:	cmp	r0, #12
   12e70:	beq	12ef8 <__assert_fail@plt+0x13a8>
   12e74:	mov	r5, #1
   12e78:	mov	r6, r4
   12e7c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12e80:	cmp	r0, #0
   12e84:	beq	12e8c <__assert_fail@plt+0x133c>
   12e88:	bl	15bc8 <__assert_fail@plt+0x4078>
   12e8c:	sub	r0, fp, #1072	; 0x430
   12e90:	bl	13074 <__assert_fail@plt+0x1524>
   12e94:	add	r0, sp, #136	; 0x88
   12e98:	bl	13074 <__assert_fail@plt+0x1524>
   12e9c:	cmp	r5, #0
   12ea0:	beq	12eb4 <__assert_fail@plt+0x1364>
   12ea4:	mov	r0, sl
   12ea8:	bl	13074 <__assert_fail@plt+0x1524>
   12eac:	mov	r6, #0
   12eb0:	b	12ed4 <__assert_fail@plt+0x1384>
   12eb4:	mov	r0, #0
   12eb8:	strb	r0, [r6], -r4
   12ebc:	add	r1, r6, #1
   12ec0:	mov	r0, sl
   12ec4:	bl	18898 <lchmod@@Base+0x237c>
   12ec8:	mov	r6, r0
   12ecc:	cmp	r0, #0
   12ed0:	beq	12ef8 <__assert_fail@plt+0x13a8>
   12ed4:	mov	r0, r6
   12ed8:	sub	sp, fp, #28
   12edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee0:	bl	119a0 <__errno_location@plt>
   12ee4:	mov	r1, #40	; 0x28
   12ee8:	str	r1, [r0]
   12eec:	mov	r5, #1
   12ef0:	ldr	sl, [sp, #20]
   12ef4:	b	12e7c <__assert_fail@plt+0x132c>
   12ef8:	bl	19390 <lchmod@@Base+0x2e74>
   12efc:	sub	r1, r0, #1
   12f00:	ands	r0, r0, r1
   12f04:	movwne	r0, #1
   12f08:	bx	lr
   12f0c:	mov	r1, #1024	; 0x400
   12f10:	add	r2, r0, #8
   12f14:	str	r2, [r0]
   12f18:	str	r1, [r0, #4]
   12f1c:	bx	lr
   12f20:	push	{r4, r5, r6, sl, fp, lr}
   12f24:	add	fp, sp, #16
   12f28:	sub	sp, sp, #8
   12f2c:	mov	r4, r2
   12f30:	mov	r5, r1
   12f34:	mov	r6, r0
   12f38:	ldr	r0, [r0]
   12f3c:	cmp	r0, #0
   12f40:	bne	12f78 <__assert_fail@plt+0x1428>
   12f44:	movw	r0, #25652	; 0x6434
   12f48:	movt	r0, #1
   12f4c:	str	r0, [sp]
   12f50:	movw	r2, #25492	; 0x6394
   12f54:	movt	r2, #1
   12f58:	movw	r3, #25548	; 0x63cc
   12f5c:	movt	r3, #1
   12f60:	mov	r0, #7
   12f64:	mov	r1, #0
   12f68:	bl	158ec <__assert_fail@plt+0x3d9c>
   12f6c:	str	r0, [r6]
   12f70:	cmp	r0, #0
   12f74:	beq	12fb4 <__assert_fail@plt+0x1464>
   12f78:	ldr	r0, [r6]
   12f7c:	mov	r1, r5
   12f80:	mov	r2, r4
   12f84:	bl	132cc <__assert_fail@plt+0x177c>
   12f88:	mov	r1, r0
   12f8c:	mov	r0, #1
   12f90:	cmp	r1, #0
   12f94:	bne	12fac <__assert_fail@plt+0x145c>
   12f98:	ldr	r0, [r6]
   12f9c:	mov	r1, r5
   12fa0:	mov	r2, r4
   12fa4:	bl	13250 <__assert_fail@plt+0x1700>
   12fa8:	mov	r0, #0
   12fac:	sub	sp, fp, #16
   12fb0:	pop	{r4, r5, r6, sl, fp, pc}
   12fb4:	bl	19390 <lchmod@@Base+0x2e74>
   12fb8:	mov	r1, r0
   12fbc:	ldrb	r2, [r0]
   12fc0:	mov	r0, #0
   12fc4:	cmp	r2, #47	; 0x2f
   12fc8:	bxne	lr
   12fcc:	mov	r0, #1
   12fd0:	mov	ip, #0
   12fd4:	mov	r3, r1
   12fd8:	ldrb	r2, [r1, #1]!
   12fdc:	cmp	r2, #47	; 0x2f
   12fe0:	beq	12fd4 <__assert_fail@plt+0x1484>
   12fe4:	cmp	r2, #46	; 0x2e
   12fe8:	bne	13028 <__assert_fail@plt+0x14d8>
   12fec:	add	r1, r3, #2
   12ff0:	ldrb	r2, [r1]
   12ff4:	cmp	r2, #47	; 0x2f
   12ff8:	beq	12fd4 <__assert_fail@plt+0x1484>
   12ffc:	cmp	r2, #0
   13000:	moveq	ip, #1
   13004:	moveq	r0, ip
   13008:	bxeq	lr
   1300c:	cmp	r2, #46	; 0x2e
   13010:	bne	13038 <__assert_fail@plt+0x14e8>
   13014:	ldrb	r1, [r3, #3]
   13018:	cmp	r1, #0
   1301c:	cmpne	r1, #47	; 0x2f
   13020:	bne	13038 <__assert_fail@plt+0x14e8>
   13024:	bx	lr
   13028:	cmp	r2, #0
   1302c:	movne	r0, ip
   13030:	bxne	lr
   13034:	bx	lr
   13038:	mov	r0, #0
   1303c:	bx	lr
   13040:	mov	r2, #47	; 0x2f
   13044:	strh	r2, [r1]
   13048:	b	1304c <__assert_fail@plt+0x14fc>
   1304c:	push	{fp, lr}
   13050:	mov	fp, sp
   13054:	mov	r1, r0
   13058:	mvn	r0, #99	; 0x63
   1305c:	mov	r2, #0
   13060:	mov	r3, #512	; 0x200
   13064:	bl	117c0 <faccessat@plt>
   13068:	clz	r0, r0
   1306c:	lsr	r0, r0, #5
   13070:	pop	{fp, pc}
   13074:	mov	r1, r0
   13078:	ldr	r0, [r1], #8
   1307c:	cmp	r0, r1
   13080:	bxeq	lr
   13084:	b	1331c <__assert_fail@plt+0x17cc>
   13088:	movw	r1, #49640	; 0xc1e8
   1308c:	movt	r1, #2
   13090:	str	r0, [r1]
   13094:	bx	lr
   13098:	movw	r1, #49644	; 0xc1ec
   1309c:	movt	r1, #2
   130a0:	strb	r0, [r1]
   130a4:	bx	lr
   130a8:	push	{r4, r5, r6, sl, fp, lr}
   130ac:	add	fp, sp, #16
   130b0:	sub	sp, sp, #8
   130b4:	movw	r0, #49628	; 0xc1dc
   130b8:	movt	r0, #2
   130bc:	ldr	r0, [r0]
   130c0:	bl	19a18 <lchmod@@Base+0x34fc>
   130c4:	cmp	r0, #0
   130c8:	beq	130f0 <__assert_fail@plt+0x15a0>
   130cc:	movw	r0, #49644	; 0xc1ec
   130d0:	movt	r0, #2
   130d4:	ldrb	r0, [r0]
   130d8:	cmp	r0, #0
   130dc:	beq	13110 <__assert_fail@plt+0x15c0>
   130e0:	bl	119a0 <__errno_location@plt>
   130e4:	ldr	r0, [r0]
   130e8:	cmp	r0, #32
   130ec:	bne	13110 <__assert_fail@plt+0x15c0>
   130f0:	movw	r0, #49624	; 0xc1d8
   130f4:	movt	r0, #2
   130f8:	ldr	r0, [r0]
   130fc:	bl	19a18 <lchmod@@Base+0x34fc>
   13100:	cmp	r0, #0
   13104:	subeq	sp, fp, #16
   13108:	popeq	{r4, r5, r6, sl, fp, pc}
   1310c:	b	13180 <__assert_fail@plt+0x1630>
   13110:	movw	r1, #43463	; 0xa9c7
   13114:	movt	r1, #1
   13118:	mov	r0, #0
   1311c:	mov	r2, #5
   13120:	bl	117fc <dcgettext@plt>
   13124:	mov	r4, r0
   13128:	movw	r0, #49640	; 0xc1e8
   1312c:	movt	r0, #2
   13130:	ldr	r6, [r0]
   13134:	bl	119a0 <__errno_location@plt>
   13138:	ldr	r5, [r0]
   1313c:	cmp	r6, #0
   13140:	bne	1315c <__assert_fail@plt+0x160c>
   13144:	movw	r2, #43479	; 0xa9d7
   13148:	movt	r2, #1
   1314c:	mov	r0, #0
   13150:	mov	r1, r5
   13154:	mov	r3, r4
   13158:	b	1317c <__assert_fail@plt+0x162c>
   1315c:	mov	r0, r6
   13160:	bl	18330 <lchmod@@Base+0x1e14>
   13164:	mov	r3, r0
   13168:	str	r4, [sp]
   1316c:	movw	r2, #43475	; 0xa9d3
   13170:	movt	r2, #1
   13174:	mov	r0, #0
   13178:	mov	r1, r5
   1317c:	bl	118c8 <error@plt>
   13180:	movw	r0, #49540	; 0xc184
   13184:	movt	r0, #2
   13188:	ldr	r0, [r0]
   1318c:	bl	117cc <_exit@plt>
   13190:	push	{fp, lr}
   13194:	mov	fp, sp
   13198:	bl	131f0 <__assert_fail@plt+0x16a0>
   1319c:	cmp	r0, #0
   131a0:	popne	{fp, pc}
   131a4:	bl	19390 <lchmod@@Base+0x2e74>
   131a8:	push	{r4, r5, r6, sl, fp, lr}
   131ac:	add	fp, sp, #16
   131b0:	mov	r4, r0
   131b4:	mov	r5, r0
   131b8:	ldrb	r6, [r5], #-1
   131bc:	bl	19528 <lchmod@@Base+0x300c>
   131c0:	sub	r2, r0, r4
   131c4:	sub	r0, r6, #47	; 0x2f
   131c8:	clz	r0, r0
   131cc:	lsr	r1, r0, #5
   131d0:	mov	r0, r2
   131d4:	cmp	r2, r1
   131d8:	bls	131ec <__assert_fail@plt+0x169c>
   131dc:	ldrb	r3, [r5, r0]
   131e0:	sub	r2, r0, #1
   131e4:	cmp	r3, #47	; 0x2f
   131e8:	beq	131d0 <__assert_fail@plt+0x1680>
   131ec:	pop	{r4, r5, r6, sl, fp, pc}
   131f0:	push	{r4, r5, r6, sl, fp, lr}
   131f4:	add	fp, sp, #16
   131f8:	mov	r6, r0
   131fc:	bl	131a8 <__assert_fail@plt+0x1658>
   13200:	mov	r4, r0
   13204:	cmp	r0, #0
   13208:	addeq	r0, r0, #1
   1320c:	add	r0, r0, #1
   13210:	bl	194a4 <lchmod@@Base+0x2f88>
   13214:	mov	r5, r0
   13218:	cmp	r0, #0
   1321c:	beq	13248 <__assert_fail@plt+0x16f8>
   13220:	mov	r0, r5
   13224:	mov	r1, r6
   13228:	mov	r2, r4
   1322c:	bl	117d8 <memcpy@plt>
   13230:	cmp	r4, #0
   13234:	moveq	r0, #46	; 0x2e
   13238:	strbeq	r0, [r5, r4]
   1323c:	moveq	r4, #1
   13240:	mov	r0, #0
   13244:	strb	r0, [r5, r4]
   13248:	mov	r0, r5
   1324c:	pop	{r4, r5, r6, sl, fp, pc}
   13250:	push	{r4, r5, r6, r7, fp, lr}
   13254:	add	fp, sp, #16
   13258:	cmp	r0, #0
   1325c:	beq	132c4 <__assert_fail@plt+0x1774>
   13260:	mov	r6, r2
   13264:	mov	r7, r1
   13268:	mov	r5, r0
   1326c:	mov	r0, #24
   13270:	bl	19008 <lchmod@@Base+0x2aec>
   13274:	mov	r4, r0
   13278:	mov	r0, r7
   1327c:	bl	19370 <lchmod@@Base+0x2e54>
   13280:	str	r0, [r4]
   13284:	ldrd	r0, [r6, #96]	; 0x60
   13288:	str	r0, [r4, #8]
   1328c:	str	r1, [r4, #12]
   13290:	ldrd	r0, [r6]
   13294:	str	r1, [r4, #20]
   13298:	str	r0, [r4, #16]
   1329c:	mov	r0, r5
   132a0:	mov	r1, r4
   132a4:	bl	16188 <__assert_fail@plt+0x4638>
   132a8:	cmp	r0, #0
   132ac:	beq	132c8 <__assert_fail@plt+0x1778>
   132b0:	cmp	r0, r4
   132b4:	beq	132c4 <__assert_fail@plt+0x1774>
   132b8:	mov	r0, r4
   132bc:	pop	{r4, r5, r6, r7, fp, lr}
   132c0:	b	16434 <__assert_fail@plt+0x48e4>
   132c4:	pop	{r4, r5, r6, r7, fp, pc}
   132c8:	bl	19390 <lchmod@@Base+0x2e74>
   132cc:	cmp	r0, #0
   132d0:	moveq	r0, #0
   132d4:	bxeq	lr
   132d8:	push	{r4, r5, fp, lr}
   132dc:	add	fp, sp, #8
   132e0:	sub	sp, sp, #24
   132e4:	mov	ip, sp
   132e8:	add	r3, ip, #8
   132ec:	add	ip, ip, #16
   132f0:	str	r1, [sp]
   132f4:	ldrd	r4, [r2, #96]	; 0x60
   132f8:	strd	r4, [r3]
   132fc:	ldrd	r2, [r2]
   13300:	strd	r2, [ip]
   13304:	mov	r1, sp
   13308:	bl	15640 <__assert_fail@plt+0x3af0>
   1330c:	cmp	r0, #0
   13310:	movwne	r0, #1
   13314:	sub	sp, fp, #8
   13318:	pop	{r4, r5, fp, pc}
   1331c:	push	{r4, r5, r6, sl, fp, lr}
   13320:	add	fp, sp, #16
   13324:	mov	r4, r0
   13328:	bl	119a0 <__errno_location@plt>
   1332c:	mov	r5, r0
   13330:	ldr	r6, [r0]
   13334:	mov	r0, r4
   13338:	bl	117b4 <free@plt>
   1333c:	str	r6, [r5]
   13340:	pop	{r4, r5, r6, sl, fp, pc}
   13344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13348:	add	fp, sp, #28
   1334c:	sub	sp, sp, #12
   13350:	cmp	r1, #4096	; 0x1000
   13354:	bcs	13370 <__assert_fail@plt+0x1820>
   13358:	mov	r6, r1
   1335c:	mov	r7, r0
   13360:	and	r0, r1, #516	; 0x204
   13364:	cmp	r0, #516	; 0x204
   13368:	tstne	r6, #18
   1336c:	bne	1338c <__assert_fail@plt+0x183c>
   13370:	bl	119a0 <__errno_location@plt>
   13374:	mov	r1, #22
   13378:	str	r1, [r0]
   1337c:	mov	r4, #0
   13380:	mov	r0, r4
   13384:	sub	sp, fp, #28
   13388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1338c:	mov	sl, r2
   13390:	mov	r0, #1
   13394:	mov	r1, #96	; 0x60
   13398:	bl	19450 <lchmod@@Base+0x2f34>
   1339c:	cmp	r0, #0
   133a0:	beq	1337c <__assert_fail@plt+0x182c>
   133a4:	mov	r4, r0
   133a8:	mvn	r0, #99	; 0x63
   133ac:	str	r0, [r4, #32]
   133b0:	bic	r0, r6, #516	; 0x204
   133b4:	tst	r6, #2
   133b8:	mov	r1, r6
   133bc:	orrne	r1, r0, #4
   133c0:	str	sl, [r4, #44]	; 0x2c
   133c4:	str	r1, [r4, #48]	; 0x30
   133c8:	mov	r0, r7
   133cc:	bl	13650 <__assert_fail@plt+0x1b00>
   133d0:	mov	r1, r0
   133d4:	cmp	r0, #4096	; 0x1000
   133d8:	movls	r1, #4096	; 0x1000
   133dc:	mov	r0, r4
   133e0:	bl	13698 <__assert_fail@plt+0x1b48>
   133e4:	cmp	r0, #0
   133e8:	beq	13644 <__assert_fail@plt+0x1af4>
   133ec:	ldr	r0, [r7]
   133f0:	cmp	r0, #0
   133f4:	beq	13434 <__assert_fail@plt+0x18e4>
   133f8:	movw	r1, #43292	; 0xa91c
   133fc:	movt	r1, #1
   13400:	mov	r0, r4
   13404:	mov	r2, #0
   13408:	bl	13714 <__assert_fail@plt+0x1bc4>
   1340c:	cmp	r0, #0
   13410:	beq	1363c <__assert_fail@plt+0x1aec>
   13414:	mov	r8, r0
   13418:	mvn	r0, #0
   1341c:	str	r0, [r8, #48]	; 0x30
   13420:	cmp	sl, #0
   13424:	beq	13440 <__assert_fail@plt+0x18f0>
   13428:	ldrb	r0, [r4, #49]	; 0x31
   1342c:	ubfx	r0, r0, #2, #1
   13430:	b	13444 <__assert_fail@plt+0x18f4>
   13434:	mov	r8, #0
   13438:	cmp	sl, #0
   1343c:	bne	13428 <__assert_fail@plt+0x18d8>
   13440:	mov	r0, #1
   13444:	ldr	r5, [r7]
   13448:	cmp	r5, #0
   1344c:	beq	13578 <__assert_fail@plt+0x1a28>
   13450:	and	r1, r6, #2048	; 0x800
   13454:	str	r1, [sp, #8]
   13458:	eor	r0, r0, #1
   1345c:	str	r0, [sp, #4]
   13460:	mov	r9, #0
   13464:	mov	r0, #0
   13468:	str	r0, [sp]
   1346c:	mov	r6, #0
   13470:	b	134a8 <__assert_fail@plt+0x1958>
   13474:	mov	r0, r4
   13478:	mov	r1, r5
   1347c:	mov	r2, #0
   13480:	bl	137c8 <__assert_fail@plt+0x1c78>
   13484:	strh	r0, [r5, #56]	; 0x38
   13488:	cmp	sl, #0
   1348c:	beq	13550 <__assert_fail@plt+0x1a00>
   13490:	str	r9, [r5, #8]
   13494:	mov	r9, r5
   13498:	add	r6, r6, #1
   1349c:	ldr	r5, [r7, #4]!
   134a0:	cmp	r5, #0
   134a4:	beq	13580 <__assert_fail@plt+0x1a30>
   134a8:	mov	r0, r5
   134ac:	bl	11970 <strlen@plt>
   134b0:	mov	r2, r0
   134b4:	ldr	r0, [sp, #8]
   134b8:	cmp	r0, #0
   134bc:	bne	134f4 <__assert_fail@plt+0x19a4>
   134c0:	cmp	r2, #3
   134c4:	bcc	134f4 <__assert_fail@plt+0x19a4>
   134c8:	add	r0, r2, r5
   134cc:	ldrb	r0, [r0, #-1]
   134d0:	cmp	r0, #47	; 0x2f
   134d4:	bne	134f4 <__assert_fail@plt+0x19a4>
   134d8:	sub	r0, r5, #2
   134dc:	ldrb	r1, [r0, r2]
   134e0:	cmp	r1, #47	; 0x2f
   134e4:	bne	134f4 <__assert_fail@plt+0x19a4>
   134e8:	sub	r2, r2, #1
   134ec:	cmp	r2, #1
   134f0:	bhi	134dc <__assert_fail@plt+0x198c>
   134f4:	mov	r0, r4
   134f8:	mov	r1, r5
   134fc:	bl	13714 <__assert_fail@plt+0x1bc4>
   13500:	cmp	r0, #0
   13504:	beq	1362c <__assert_fail@plt+0x1adc>
   13508:	mov	r5, r0
   1350c:	str	r8, [r0, #4]
   13510:	mov	r0, #0
   13514:	str	r0, [r5, #48]	; 0x30
   13518:	add	r0, r5, #168	; 0xa8
   1351c:	str	r0, [r5, #24]
   13520:	clz	r0, r9
   13524:	lsr	r0, r0, #5
   13528:	ldr	r1, [sp, #4]
   1352c:	orrs	r0, r1, r0
   13530:	bne	13474 <__assert_fail@plt+0x1924>
   13534:	mov	r0, #11
   13538:	strh	r0, [r5, #56]	; 0x38
   1353c:	mov	r0, r5
   13540:	mov	r1, #1
   13544:	bl	13798 <__assert_fail@plt+0x1c48>
   13548:	cmp	sl, #0
   1354c:	bne	13490 <__assert_fail@plt+0x1940>
   13550:	mov	r0, #0
   13554:	str	r0, [r5, #8]
   13558:	cmp	r9, #0
   1355c:	beq	13570 <__assert_fail@plt+0x1a20>
   13560:	ldr	r0, [sp]
   13564:	str	r5, [r0, #8]
   13568:	str	r5, [sp]
   1356c:	b	13498 <__assert_fail@plt+0x1948>
   13570:	str	r5, [sp]
   13574:	b	13494 <__assert_fail@plt+0x1944>
   13578:	mov	r9, #0
   1357c:	b	135a4 <__assert_fail@plt+0x1a54>
   13580:	cmp	sl, #0
   13584:	beq	135a4 <__assert_fail@plt+0x1a54>
   13588:	cmp	r6, #2
   1358c:	bcc	135a4 <__assert_fail@plt+0x1a54>
   13590:	mov	r0, r4
   13594:	mov	r1, r9
   13598:	mov	r2, r6
   1359c:	bl	1393c <__assert_fail@plt+0x1dec>
   135a0:	mov	r9, r0
   135a4:	movw	r1, #43292	; 0xa91c
   135a8:	movt	r1, #1
   135ac:	mov	r0, r4
   135b0:	mov	r2, #0
   135b4:	bl	13714 <__assert_fail@plt+0x1bc4>
   135b8:	str	r0, [r4]
   135bc:	cmp	r0, #0
   135c0:	beq	1362c <__assert_fail@plt+0x1adc>
   135c4:	mov	r1, #9
   135c8:	strh	r1, [r0, #56]	; 0x38
   135cc:	str	r9, [r0, #8]
   135d0:	mov	r1, #1
   135d4:	str	r1, [r0, #48]	; 0x30
   135d8:	mov	r0, r4
   135dc:	bl	13a0c <__assert_fail@plt+0x1ebc>
   135e0:	cmp	r0, #0
   135e4:	beq	1362c <__assert_fail@plt+0x1adc>
   135e8:	ldrh	r0, [r4, #48]	; 0x30
   135ec:	tst	r0, #516	; 0x204
   135f0:	bne	1361c <__assert_fail@plt+0x1acc>
   135f4:	movw	r1, #43483	; 0xa9db
   135f8:	movt	r1, #1
   135fc:	mov	r0, r4
   13600:	bl	13a98 <__assert_fail@plt+0x1f48>
   13604:	str	r0, [r4, #28]
   13608:	cmn	r0, #1
   1360c:	bgt	1361c <__assert_fail@plt+0x1acc>
   13610:	ldr	r0, [r4, #48]	; 0x30
   13614:	orr	r0, r0, #4
   13618:	str	r0, [r4, #48]	; 0x30
   1361c:	add	r0, r4, #60	; 0x3c
   13620:	mvn	r1, #0
   13624:	bl	16454 <__assert_fail@plt+0x4904>
   13628:	b	13380 <__assert_fail@plt+0x1830>
   1362c:	mov	r0, r9
   13630:	bl	13ac8 <__assert_fail@plt+0x1f78>
   13634:	mov	r0, r8
   13638:	bl	1331c <__assert_fail@plt+0x17cc>
   1363c:	ldr	r0, [r4, #24]
   13640:	bl	1331c <__assert_fail@plt+0x17cc>
   13644:	mov	r0, r4
   13648:	bl	1331c <__assert_fail@plt+0x17cc>
   1364c:	b	1337c <__assert_fail@plt+0x182c>
   13650:	push	{r4, r5, fp, lr}
   13654:	add	fp, sp, #8
   13658:	mov	r1, r0
   1365c:	ldr	r0, [r0]
   13660:	cmp	r0, #0
   13664:	beq	13690 <__assert_fail@plt+0x1b40>
   13668:	add	r5, r1, #4
   1366c:	mov	r4, #0
   13670:	bl	11970 <strlen@plt>
   13674:	cmp	r0, r4
   13678:	movhi	r4, r0
   1367c:	ldr	r0, [r5], #4
   13680:	cmp	r0, #0
   13684:	bne	13670 <__assert_fail@plt+0x1b20>
   13688:	add	r0, r4, #1
   1368c:	pop	{r4, r5, fp, pc}
   13690:	mov	r0, #1
   13694:	pop	{r4, r5, fp, pc}
   13698:	push	{r4, r5, fp, lr}
   1369c:	add	fp, sp, #8
   136a0:	mov	r4, r0
   136a4:	ldr	r0, [r0, #36]	; 0x24
   136a8:	add	r1, r1, #256	; 0x100
   136ac:	adds	r1, r1, r0
   136b0:	bcc	136d8 <__assert_fail@plt+0x1b88>
   136b4:	ldr	r0, [r4, #24]
   136b8:	bl	1331c <__assert_fail@plt+0x17cc>
   136bc:	mov	r5, #0
   136c0:	str	r5, [r4, #24]
   136c4:	bl	119a0 <__errno_location@plt>
   136c8:	mov	r1, #36	; 0x24
   136cc:	str	r1, [r0]
   136d0:	mov	r0, r5
   136d4:	pop	{r4, r5, fp, pc}
   136d8:	str	r1, [r4, #36]	; 0x24
   136dc:	ldr	r0, [r4, #24]
   136e0:	bl	194d4 <lchmod@@Base+0x2fb8>
   136e4:	cmp	r0, #0
   136e8:	beq	136fc <__assert_fail@plt+0x1bac>
   136ec:	str	r0, [r4, #24]
   136f0:	mov	r5, #1
   136f4:	mov	r0, r5
   136f8:	pop	{r4, r5, fp, pc}
   136fc:	ldr	r0, [r4, #24]
   13700:	bl	1331c <__assert_fail@plt+0x17cc>
   13704:	mov	r5, #0
   13708:	str	r5, [r4, #24]
   1370c:	mov	r0, r5
   13710:	pop	{r4, r5, fp, pc}
   13714:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13718:	add	fp, sp, #24
   1371c:	mov	r6, r2
   13720:	mov	r8, r1
   13724:	mov	r5, r0
   13728:	add	r0, r2, #176	; 0xb0
   1372c:	bic	r0, r0, #7
   13730:	bl	194a4 <lchmod@@Base+0x2f88>
   13734:	cmp	r0, #0
   13738:	beq	1378c <__assert_fail@plt+0x1c3c>
   1373c:	mov	r4, r0
   13740:	add	r7, r0, #168	; 0xa8
   13744:	mov	r0, r7
   13748:	mov	r1, r8
   1374c:	mov	r2, r6
   13750:	bl	117d8 <memcpy@plt>
   13754:	mov	r0, #0
   13758:	strb	r0, [r7, r6]
   1375c:	str	r6, [r4, #52]	; 0x34
   13760:	str	r5, [r4, #44]	; 0x2c
   13764:	ldr	r1, [r5, #24]
   13768:	str	r0, [r4, #12]
   1376c:	str	r0, [r4, #16]
   13770:	str	r0, [r4, #20]
   13774:	mov	r2, #196608	; 0x30000
   13778:	str	r2, [r4, #58]	; 0x3a
   1377c:	str	r1, [r4, #28]
   13780:	str	r0, [r4, #32]
   13784:	mov	r0, r4
   13788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1378c:	mov	r4, #0
   13790:	mov	r0, r4
   13794:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13798:	push	{fp, lr}
   1379c:	mov	fp, sp
   137a0:	ldrh	r2, [r0, #56]	; 0x38
   137a4:	cmp	r2, #11
   137a8:	bne	137c4 <__assert_fail@plt+0x1c74>
   137ac:	mov	r3, #0
   137b0:	mov	r2, #1
   137b4:	cmp	r1, #0
   137b8:	movwne	r2, #2
   137bc:	strd	r2, [r0, #112]	; 0x70
   137c0:	pop	{fp, pc}
   137c4:	bl	11af0 <abort@plt>
   137c8:	push	{r4, r5, r6, sl, fp, lr}
   137cc:	add	fp, sp, #16
   137d0:	mov	r4, r1
   137d4:	ldr	r1, [r1, #48]	; 0x30
   137d8:	cmp	r1, #0
   137dc:	bne	137ec <__assert_fail@plt+0x1c9c>
   137e0:	ldrb	r1, [r0, #48]	; 0x30
   137e4:	and	r1, r1, #1
   137e8:	orr	r2, r1, r2
   137ec:	add	r5, r4, #64	; 0x40
   137f0:	cmp	r2, #0
   137f4:	ldreq	r1, [r0, #48]	; 0x30
   137f8:	andseq	r1, r1, #2
   137fc:	beq	1384c <__assert_fail@plt+0x1cfc>
   13800:	ldr	r0, [r4, #24]
   13804:	mov	r1, r5
   13808:	bl	1a3f0 <lchmod@@Base+0x3ed4>
   1380c:	cmp	r0, #0
   13810:	beq	138c0 <__assert_fail@plt+0x1d70>
   13814:	bl	119a0 <__errno_location@plt>
   13818:	mov	r6, r0
   1381c:	ldr	r0, [r0]
   13820:	cmp	r0, #2
   13824:	bne	13870 <__assert_fail@plt+0x1d20>
   13828:	ldr	r0, [r4, #24]
   1382c:	mov	r1, r5
   13830:	bl	1a410 <lchmod@@Base+0x3ef4>
   13834:	cmp	r0, #0
   13838:	bne	13870 <__assert_fail@plt+0x1d20>
   1383c:	mov	r0, #0
   13840:	str	r0, [r6]
   13844:	mov	r0, #13
   13848:	pop	{r4, r5, r6, sl, fp, pc}
   1384c:	ldr	r1, [r4, #24]
   13850:	ldr	r0, [r0, #32]
   13854:	mov	r2, r5
   13858:	mov	r3, #256	; 0x100
   1385c:	bl	1a420 <lchmod@@Base+0x3f04>
   13860:	cmp	r0, #0
   13864:	beq	138c0 <__assert_fail@plt+0x1d70>
   13868:	bl	119a0 <__errno_location@plt>
   1386c:	mov	r6, r0
   13870:	ldr	r0, [r6]
   13874:	str	r0, [r4, #32]
   13878:	mov	r0, #0
   1387c:	vmov.i32	q8, #0	; 0x00000000
   13880:	str	r0, [r5, #96]	; 0x60
   13884:	add	r1, r5, #80	; 0x50
   13888:	vst1.64	{d16-d17}, [r1]
   1388c:	add	r1, r5, #64	; 0x40
   13890:	vst1.64	{d16-d17}, [r1]
   13894:	add	r1, r5, #48	; 0x30
   13898:	vst1.64	{d16-d17}, [r1]
   1389c:	add	r1, r5, #32
   138a0:	vst1.64	{d16-d17}, [r1]
   138a4:	add	r1, r5, #16
   138a8:	vst1.64	{d16-d17}, [r1]
   138ac:	mov	r1, #100	; 0x64
   138b0:	vst1.64	{d16-d17}, [r5], r1
   138b4:	str	r0, [r5]
   138b8:	mov	r0, #10
   138bc:	pop	{r4, r5, r6, sl, fp, pc}
   138c0:	ldr	r0, [r4, #80]	; 0x50
   138c4:	and	r0, r0, #61440	; 0xf000
   138c8:	cmp	r0, #40960	; 0xa000
   138cc:	beq	13924 <__assert_fail@plt+0x1dd4>
   138d0:	cmp	r0, #32768	; 0x8000
   138d4:	beq	1392c <__assert_fail@plt+0x1ddc>
   138d8:	cmp	r0, #16384	; 0x4000
   138dc:	bne	13934 <__assert_fail@plt+0x1de4>
   138e0:	ldrb	r1, [r4, #168]	; 0xa8
   138e4:	mov	r0, #1
   138e8:	cmp	r1, #46	; 0x2e
   138ec:	bne	13938 <__assert_fail@plt+0x1de8>
   138f0:	ldrb	r1, [r4, #169]	; 0xa9
   138f4:	cmp	r1, #0
   138f8:	beq	13910 <__assert_fail@plt+0x1dc0>
   138fc:	cmp	r1, #46	; 0x2e
   13900:	bne	13938 <__assert_fail@plt+0x1de8>
   13904:	ldrb	r1, [r4, #170]	; 0xaa
   13908:	cmp	r1, #0
   1390c:	popne	{r4, r5, r6, sl, fp, pc}
   13910:	ldr	r1, [r4, #48]	; 0x30
   13914:	mov	r0, #5
   13918:	cmp	r1, #0
   1391c:	movweq	r0, #1
   13920:	pop	{r4, r5, r6, sl, fp, pc}
   13924:	mov	r0, #12
   13928:	pop	{r4, r5, r6, sl, fp, pc}
   1392c:	mov	r0, #8
   13930:	pop	{r4, r5, r6, sl, fp, pc}
   13934:	mov	r0, #3
   13938:	pop	{r4, r5, r6, sl, fp, pc}
   1393c:	push	{r4, r5, r6, r7, fp, lr}
   13940:	add	fp, sp, #16
   13944:	mov	r6, r2
   13948:	mov	r4, r1
   1394c:	mov	r5, r0
   13950:	ldr	r7, [r0, #44]	; 0x2c
   13954:	ldr	r0, [r0, #40]	; 0x28
   13958:	cmp	r0, r2
   1395c:	bcs	13988 <__assert_fail@plt+0x1e38>
   13960:	add	r1, r6, #40	; 0x28
   13964:	str	r1, [r5, #40]	; 0x28
   13968:	cmn	r1, #-1073741823	; 0xc0000001
   1396c:	bhi	139f0 <__assert_fail@plt+0x1ea0>
   13970:	ldr	r0, [r5, #8]
   13974:	lsl	r1, r1, #2
   13978:	bl	194d4 <lchmod@@Base+0x2fb8>
   1397c:	cmp	r0, #0
   13980:	beq	139f0 <__assert_fail@plt+0x1ea0>
   13984:	str	r0, [r5, #8]
   13988:	cmp	r4, #0
   1398c:	beq	139a4 <__assert_fail@plt+0x1e54>
   13990:	ldr	r0, [r5, #8]
   13994:	str	r4, [r0], #4
   13998:	ldr	r4, [r4, #8]
   1399c:	cmp	r4, #0
   139a0:	bne	13994 <__assert_fail@plt+0x1e44>
   139a4:	ldr	r0, [r5, #8]
   139a8:	mov	r1, r6
   139ac:	mov	r2, #4
   139b0:	mov	r3, r7
   139b4:	bl	11a84 <qsort@plt>
   139b8:	subs	r1, r6, #1
   139bc:	ldr	r0, [r5, #8]
   139c0:	ldr	r4, [r0]
   139c4:	beq	139dc <__assert_fail@plt+0x1e8c>
   139c8:	ldr	r2, [r0]
   139cc:	ldr	r3, [r0, #4]!
   139d0:	str	r3, [r2, #8]
   139d4:	subs	r1, r1, #1
   139d8:	bne	139c8 <__assert_fail@plt+0x1e78>
   139dc:	ldr	r0, [r0]
   139e0:	mov	r1, #0
   139e4:	str	r1, [r0, #8]
   139e8:	mov	r0, r4
   139ec:	pop	{r4, r5, r6, r7, fp, pc}
   139f0:	ldr	r0, [r5, #8]
   139f4:	bl	1331c <__assert_fail@plt+0x17cc>
   139f8:	mov	r0, #0
   139fc:	str	r0, [r5, #40]	; 0x28
   13a00:	str	r0, [r5, #8]
   13a04:	mov	r0, r4
   13a08:	pop	{r4, r5, r6, r7, fp, pc}
   13a0c:	push	{r4, r5, fp, lr}
   13a10:	add	fp, sp, #8
   13a14:	sub	sp, sp, #8
   13a18:	mov	r4, r0
   13a1c:	ldrh	r0, [r0, #48]	; 0x30
   13a20:	movw	r1, #258	; 0x102
   13a24:	tst	r0, r1
   13a28:	beq	13a68 <__assert_fail@plt+0x1f18>
   13a2c:	movw	r0, #13084	; 0x331c
   13a30:	movt	r0, #1
   13a34:	str	r0, [sp]
   13a38:	mov	r5, #0
   13a3c:	movw	r2, #20716	; 0x50ec
   13a40:	movt	r2, #1
   13a44:	movw	r3, #20748	; 0x510c
   13a48:	movt	r3, #1
   13a4c:	mov	r0, #31
   13a50:	mov	r1, #0
   13a54:	bl	158ec <__assert_fail@plt+0x3d9c>
   13a58:	str	r0, [r4, #56]	; 0x38
   13a5c:	cmp	r0, #0
   13a60:	movne	r5, #1
   13a64:	b	13a8c <__assert_fail@plt+0x1f3c>
   13a68:	mov	r0, #32
   13a6c:	bl	194a4 <lchmod@@Base+0x2f88>
   13a70:	str	r0, [r4, #56]	; 0x38
   13a74:	cmp	r0, #0
   13a78:	beq	13a88 <__assert_fail@plt+0x1f38>
   13a7c:	bl	19a9c <lchmod@@Base+0x3580>
   13a80:	mov	r5, #1
   13a84:	b	13a8c <__assert_fail@plt+0x1f3c>
   13a88:	mov	r5, #0
   13a8c:	mov	r0, r5
   13a90:	sub	sp, fp, #8
   13a94:	pop	{r4, r5, fp, pc}
   13a98:	ldr	r3, [r0, #48]	; 0x30
   13a9c:	mov	r2, #32768	; 0x8000
   13aa0:	and	r2, r2, r3, lsl #11
   13aa4:	orr	r2, r2, #18688	; 0x4900
   13aa8:	orr	r2, r2, #524288	; 0x80000
   13aac:	tst	r3, #512	; 0x200
   13ab0:	bne	13ac0 <__assert_fail@plt+0x1f70>
   13ab4:	mov	r0, r1
   13ab8:	mov	r1, r2
   13abc:	b	19e34 <lchmod@@Base+0x3918>
   13ac0:	ldr	r0, [r0, #32]
   13ac4:	b	16bf4 <lchmod@@Base+0x6d8>
   13ac8:	push	{r4, r6, r7, sl, fp, lr}
   13acc:	add	fp, sp, #16
   13ad0:	cmp	r0, #0
   13ad4:	beq	13b0c <__assert_fail@plt+0x1fbc>
   13ad8:	mov	r4, r0
   13adc:	b	13af4 <__assert_fail@plt+0x1fa4>
   13ae0:	mov	r0, r4
   13ae4:	bl	1331c <__assert_fail@plt+0x17cc>
   13ae8:	cmp	r6, #0
   13aec:	mov	r4, r6
   13af0:	beq	13b0c <__assert_fail@plt+0x1fbc>
   13af4:	ldrd	r6, [r4, #8]
   13af8:	cmp	r7, #0
   13afc:	beq	13ae0 <__assert_fail@plt+0x1f90>
   13b00:	mov	r0, r7
   13b04:	bl	11b2c <closedir@plt>
   13b08:	b	13ae0 <__assert_fail@plt+0x1f90>
   13b0c:	pop	{r4, r6, r7, sl, fp, pc}
   13b10:	push	{r4, r5, fp, lr}
   13b14:	add	fp, sp, #8
   13b18:	mov	r4, r0
   13b1c:	ldr	r0, [r0]
   13b20:	cmp	r0, #0
   13b24:	beq	13b64 <__assert_fail@plt+0x2014>
   13b28:	ldr	r1, [r0, #48]	; 0x30
   13b2c:	cmp	r1, #0
   13b30:	bmi	13b58 <__assert_fail@plt+0x2008>
   13b34:	ldr	r5, [r0, #8]
   13b38:	cmp	r5, #0
   13b3c:	ldreq	r5, [r0, #4]
   13b40:	bl	1331c <__assert_fail@plt+0x17cc>
   13b44:	ldr	r0, [r5, #48]	; 0x30
   13b48:	cmn	r0, #1
   13b4c:	mov	r0, r5
   13b50:	bgt	13b34 <__assert_fail@plt+0x1fe4>
   13b54:	b	13b5c <__assert_fail@plt+0x200c>
   13b58:	mov	r5, r0
   13b5c:	mov	r0, r5
   13b60:	bl	1331c <__assert_fail@plt+0x17cc>
   13b64:	ldr	r0, [r4, #4]
   13b68:	cmp	r0, #0
   13b6c:	blne	13ac8 <__assert_fail@plt+0x1f78>
   13b70:	ldr	r0, [r4, #8]
   13b74:	bl	1331c <__assert_fail@plt+0x17cc>
   13b78:	ldr	r0, [r4, #24]
   13b7c:	bl	1331c <__assert_fail@plt+0x17cc>
   13b80:	ldr	r0, [r4, #48]	; 0x30
   13b84:	tst	r0, #512	; 0x200
   13b88:	bne	13bb4 <__assert_fail@plt+0x2064>
   13b8c:	mov	r5, #0
   13b90:	tst	r0, #4
   13b94:	bne	13bf8 <__assert_fail@plt+0x20a8>
   13b98:	ldr	r0, [r4, #28]
   13b9c:	bl	11a78 <fchdir@plt>
   13ba0:	cmp	r0, #0
   13ba4:	beq	13bd4 <__assert_fail@plt+0x2084>
   13ba8:	bl	119a0 <__errno_location@plt>
   13bac:	ldr	r5, [r0]
   13bb0:	b	13bd8 <__assert_fail@plt+0x2088>
   13bb4:	ldr	r0, [r4, #32]
   13bb8:	mov	r5, #0
   13bbc:	cmp	r0, #0
   13bc0:	bmi	13bf8 <__assert_fail@plt+0x20a8>
   13bc4:	bl	11afc <close@plt>
   13bc8:	cmp	r0, #0
   13bcc:	bne	13bf0 <__assert_fail@plt+0x20a0>
   13bd0:	b	13bf8 <__assert_fail@plt+0x20a8>
   13bd4:	mov	r5, #0
   13bd8:	ldr	r0, [r4, #28]
   13bdc:	bl	11afc <close@plt>
   13be0:	cmp	r5, #0
   13be4:	bne	13bf8 <__assert_fail@plt+0x20a8>
   13be8:	cmp	r0, #0
   13bec:	beq	13bf8 <__assert_fail@plt+0x20a8>
   13bf0:	bl	119a0 <__errno_location@plt>
   13bf4:	ldr	r5, [r0]
   13bf8:	add	r0, r4, #60	; 0x3c
   13bfc:	bl	13c40 <__assert_fail@plt+0x20f0>
   13c00:	ldr	r0, [r4, #52]	; 0x34
   13c04:	cmp	r0, #0
   13c08:	beq	13c10 <__assert_fail@plt+0x20c0>
   13c0c:	bl	15bc8 <__assert_fail@plt+0x4078>
   13c10:	mov	r0, r4
   13c14:	bl	13c7c <__assert_fail@plt+0x212c>
   13c18:	mov	r0, r4
   13c1c:	bl	1331c <__assert_fail@plt+0x17cc>
   13c20:	cmp	r5, #0
   13c24:	beq	13c38 <__assert_fail@plt+0x20e8>
   13c28:	bl	119a0 <__errno_location@plt>
   13c2c:	str	r5, [r0]
   13c30:	mvn	r0, #0
   13c34:	pop	{r4, r5, fp, pc}
   13c38:	mov	r0, #0
   13c3c:	pop	{r4, r5, fp, pc}
   13c40:	push	{r4, sl, fp, lr}
   13c44:	add	fp, sp, #8
   13c48:	mov	r4, r0
   13c4c:	b	13c54 <__assert_fail@plt+0x2104>
   13c50:	mov	r0, r4
   13c54:	bl	16480 <__assert_fail@plt+0x4930>
   13c58:	cmp	r0, #0
   13c5c:	bne	13c78 <__assert_fail@plt+0x2128>
   13c60:	mov	r0, r4
   13c64:	bl	164cc <__assert_fail@plt+0x497c>
   13c68:	cmp	r0, #0
   13c6c:	bmi	13c50 <__assert_fail@plt+0x2100>
   13c70:	bl	11afc <close@plt>
   13c74:	b	13c50 <__assert_fail@plt+0x2100>
   13c78:	pop	{r4, sl, fp, pc}
   13c7c:	ldrh	r1, [r0, #48]	; 0x30
   13c80:	movw	r2, #258	; 0x102
   13c84:	tst	r1, r2
   13c88:	beq	13c9c <__assert_fail@plt+0x214c>
   13c8c:	ldr	r0, [r0, #56]	; 0x38
   13c90:	cmp	r0, #0
   13c94:	bxeq	lr
   13c98:	b	15bc8 <__assert_fail@plt+0x4078>
   13c9c:	ldr	r0, [r0, #56]	; 0x38
   13ca0:	b	1331c <__assert_fail@plt+0x17cc>
   13ca4:	push	{r4, r5, r6, r7, fp, lr}
   13ca8:	add	fp, sp, #16
   13cac:	ldr	r6, [r0]
   13cb0:	mov	r5, #0
   13cb4:	cmp	r6, #0
   13cb8:	beq	1425c <__assert_fail@plt+0x270c>
   13cbc:	mov	r4, r0
   13cc0:	ldr	r1, [r0, #48]	; 0x30
   13cc4:	tst	r1, #8192	; 0x2000
   13cc8:	bne	1425c <__assert_fail@plt+0x270c>
   13ccc:	ldrh	r0, [r6, #60]	; 0x3c
   13cd0:	mov	r2, #3
   13cd4:	strh	r2, [r6, #60]	; 0x3c
   13cd8:	cmp	r0, #2
   13cdc:	beq	13d04 <__assert_fail@plt+0x21b4>
   13ce0:	cmp	r0, #1
   13ce4:	bne	13d6c <__assert_fail@plt+0x221c>
   13ce8:	mov	r0, r4
   13cec:	mov	r1, r6
   13cf0:	mov	r2, #0
   13cf4:	bl	137c8 <__assert_fail@plt+0x1c78>
   13cf8:	strh	r0, [r6, #56]	; 0x38
   13cfc:	mov	r0, r6
   13d00:	pop	{r4, r5, r6, r7, fp, pc}
   13d04:	ldrh	r2, [r6, #56]	; 0x38
   13d08:	bic	r2, r2, #1
   13d0c:	cmp	r2, #12
   13d10:	bne	13d6c <__assert_fail@plt+0x221c>
   13d14:	mov	r0, r4
   13d18:	mov	r1, r6
   13d1c:	mov	r2, #1
   13d20:	bl	137c8 <__assert_fail@plt+0x1c78>
   13d24:	strh	r0, [r6, #56]	; 0x38
   13d28:	cmp	r0, #1
   13d2c:	bne	13e58 <__assert_fail@plt+0x2308>
   13d30:	ldrb	r0, [r4, #48]	; 0x30
   13d34:	tst	r0, #4
   13d38:	bne	13e58 <__assert_fail@plt+0x2308>
   13d3c:	movw	r1, #43483	; 0xa9db
   13d40:	movt	r1, #1
   13d44:	mov	r0, r4
   13d48:	bl	13a98 <__assert_fail@plt+0x1f48>
   13d4c:	str	r0, [r6, #36]	; 0x24
   13d50:	cmn	r0, #1
   13d54:	ble	14098 <__assert_fail@plt+0x2548>
   13d58:	ldrh	r0, [r6, #58]	; 0x3a
   13d5c:	orr	r0, r0, #2
   13d60:	strh	r0, [r6, #58]	; 0x3a
   13d64:	mov	r5, r6
   13d68:	b	1417c <__assert_fail@plt+0x262c>
   13d6c:	ldrh	r2, [r6, #56]	; 0x38
   13d70:	cmp	r2, #1
   13d74:	bne	13dc8 <__assert_fail@plt+0x2278>
   13d78:	cmp	r0, #4
   13d7c:	bne	13e60 <__assert_fail@plt+0x2310>
   13d80:	ldrb	r0, [r6, #58]	; 0x3a
   13d84:	tst	r0, #2
   13d88:	beq	13d94 <__assert_fail@plt+0x2244>
   13d8c:	ldr	r0, [r6, #36]	; 0x24
   13d90:	bl	11afc <close@plt>
   13d94:	ldr	r0, [r4, #4]
   13d98:	cmp	r0, #0
   13d9c:	beq	13dac <__assert_fail@plt+0x225c>
   13da0:	bl	13ac8 <__assert_fail@plt+0x1f78>
   13da4:	mov	r0, #0
   13da8:	str	r0, [r4, #4]
   13dac:	mov	r0, #6
   13db0:	strh	r0, [r6, #56]	; 0x38
   13db4:	mov	r0, r4
   13db8:	mov	r1, r6
   13dbc:	bl	14268 <__assert_fail@plt+0x2718>
   13dc0:	mov	r0, r6
   13dc4:	pop	{r4, r5, r6, r7, fp, pc}
   13dc8:	ldr	r5, [r6, #8]
   13dcc:	cmp	r5, #0
   13dd0:	beq	13ef8 <__assert_fail@plt+0x23a8>
   13dd4:	str	r5, [r4]
   13dd8:	mov	r0, r6
   13ddc:	bl	1331c <__assert_fail@plt+0x17cc>
   13de0:	ldr	r0, [r5, #48]	; 0x30
   13de4:	cmp	r0, #0
   13de8:	beq	13f44 <__assert_fail@plt+0x23f4>
   13dec:	ldrh	r0, [r5, #60]	; 0x3c
   13df0:	cmp	r0, #4
   13df4:	mov	r6, r5
   13df8:	beq	13dc8 <__assert_fail@plt+0x2278>
   13dfc:	cmp	r0, #2
   13e00:	bne	14140 <__assert_fail@plt+0x25f0>
   13e04:	mov	r0, r4
   13e08:	mov	r1, r5
   13e0c:	mov	r2, #1
   13e10:	bl	137c8 <__assert_fail@plt+0x1c78>
   13e14:	strh	r0, [r5, #56]	; 0x38
   13e18:	cmp	r0, #1
   13e1c:	bne	14138 <__assert_fail@plt+0x25e8>
   13e20:	ldrb	r0, [r4, #48]	; 0x30
   13e24:	tst	r0, #4
   13e28:	bne	14138 <__assert_fail@plt+0x25e8>
   13e2c:	movw	r1, #43483	; 0xa9db
   13e30:	movt	r1, #1
   13e34:	mov	r0, r4
   13e38:	bl	13a98 <__assert_fail@plt+0x1f48>
   13e3c:	str	r0, [r5, #36]	; 0x24
   13e40:	cmn	r0, #1
   13e44:	ble	14124 <__assert_fail@plt+0x25d4>
   13e48:	ldrh	r0, [r5, #58]	; 0x3a
   13e4c:	orr	r0, r0, #2
   13e50:	strh	r0, [r5, #58]	; 0x3a
   13e54:	b	14138 <__assert_fail@plt+0x25e8>
   13e58:	mov	r5, r6
   13e5c:	b	1417c <__assert_fail@plt+0x262c>
   13e60:	tst	r1, #64	; 0x40
   13e64:	beq	13e88 <__assert_fail@plt+0x2338>
   13e68:	ldr	r0, [r4, #16]
   13e6c:	ldr	r3, [r4, #20]
   13e70:	ldr	r2, [r6, #64]	; 0x40
   13e74:	ldr	r5, [r6, #68]	; 0x44
   13e78:	eor	r3, r5, r3
   13e7c:	eor	r0, r2, r0
   13e80:	orrs	r0, r0, r3
   13e84:	bne	13d80 <__assert_fail@plt+0x2230>
   13e88:	ldr	r0, [r4, #4]
   13e8c:	cmp	r0, #0
   13e90:	beq	13f98 <__assert_fail@plt+0x2448>
   13e94:	tst	r1, #4096	; 0x1000
   13e98:	bne	13f84 <__assert_fail@plt+0x2434>
   13e9c:	ldr	r3, [r6, #24]
   13ea0:	mov	r0, r4
   13ea4:	mov	r1, r6
   13ea8:	mvn	r2, #0
   13eac:	bl	14344 <__assert_fail@plt+0x27f4>
   13eb0:	cmp	r0, #0
   13eb4:	beq	13fb0 <__assert_fail@plt+0x2460>
   13eb8:	bl	119a0 <__errno_location@plt>
   13ebc:	ldr	r0, [r0]
   13ec0:	str	r0, [r6, #32]
   13ec4:	ldrh	r0, [r6, #58]	; 0x3a
   13ec8:	orr	r0, r0, #1
   13ecc:	strh	r0, [r6, #58]	; 0x3a
   13ed0:	ldr	r0, [r4, #4]
   13ed4:	cmp	r0, #0
   13ed8:	beq	13fb0 <__assert_fail@plt+0x2460>
   13edc:	ldmib	r0, {r1, r2}
   13ee0:	ldr	r1, [r1, #24]
   13ee4:	str	r1, [r0, #24]
   13ee8:	cmp	r2, #0
   13eec:	mov	r0, r2
   13ef0:	bne	13edc <__assert_fail@plt+0x238c>
   13ef4:	b	13fb0 <__assert_fail@plt+0x2460>
   13ef8:	ldr	r0, [r6, #4]
   13efc:	ldr	r1, [r0, #12]
   13f00:	cmp	r1, #0
   13f04:	beq	13ffc <__assert_fail@plt+0x24ac>
   13f08:	str	r0, [r4]
   13f0c:	ldr	r1, [r4, #24]
   13f10:	ldr	r0, [r0, #40]	; 0x28
   13f14:	mov	r5, #0
   13f18:	strb	r5, [r1, r0]
   13f1c:	mov	r0, r4
   13f20:	mov	r1, #3
   13f24:	bl	1452c <__assert_fail@plt+0x29dc>
   13f28:	cmp	r0, #0
   13f2c:	beq	13ff0 <__assert_fail@plt+0x24a0>
   13f30:	mov	r7, r0
   13f34:	mov	r0, r6
   13f38:	bl	1331c <__assert_fail@plt+0x17cc>
   13f3c:	mov	r5, r7
   13f40:	b	14140 <__assert_fail@plt+0x25f0>
   13f44:	mov	r0, r4
   13f48:	bl	14d48 <__assert_fail@plt+0x31f8>
   13f4c:	cmp	r0, #0
   13f50:	beq	13f64 <__assert_fail@plt+0x2414>
   13f54:	ldr	r0, [r4, #48]	; 0x30
   13f58:	orr	r0, r0, #8192	; 0x2000
   13f5c:	str	r0, [r4, #48]	; 0x30
   13f60:	b	14200 <__assert_fail@plt+0x26b0>
   13f64:	mov	r0, r4
   13f68:	bl	13c7c <__assert_fail@plt+0x212c>
   13f6c:	mov	r0, r4
   13f70:	mov	r1, r5
   13f74:	bl	14da4 <__assert_fail@plt+0x3254>
   13f78:	mov	r0, r4
   13f7c:	bl	13a0c <__assert_fail@plt+0x1ebc>
   13f80:	b	1417c <__assert_fail@plt+0x262c>
   13f84:	bic	r1, r1, #4096	; 0x1000
   13f88:	str	r1, [r4, #48]	; 0x30
   13f8c:	bl	13ac8 <__assert_fail@plt+0x1f78>
   13f90:	mov	r0, #0
   13f94:	str	r0, [r4, #4]
   13f98:	mov	r0, r4
   13f9c:	mov	r1, #3
   13fa0:	bl	1452c <__assert_fail@plt+0x29dc>
   13fa4:	str	r0, [r4, #4]
   13fa8:	cmp	r0, #0
   13fac:	beq	13fc0 <__assert_fail@plt+0x2470>
   13fb0:	ldr	r5, [r4, #4]
   13fb4:	mov	r0, #0
   13fb8:	str	r0, [r4, #4]
   13fbc:	b	14140 <__assert_fail@plt+0x25f0>
   13fc0:	ldrb	r0, [r4, #49]	; 0x31
   13fc4:	tst	r0, #32
   13fc8:	mov	r5, #0
   13fcc:	bne	1425c <__assert_fail@plt+0x270c>
   13fd0:	ldr	r0, [r6, #32]
   13fd4:	cmp	r0, #0
   13fd8:	beq	13db4 <__assert_fail@plt+0x2264>
   13fdc:	ldrh	r0, [r6, #56]	; 0x38
   13fe0:	cmp	r0, #4
   13fe4:	beq	13db4 <__assert_fail@plt+0x2264>
   13fe8:	mov	r0, #7
   13fec:	b	13db0 <__assert_fail@plt+0x2260>
   13ff0:	ldrb	r0, [r4, #49]	; 0x31
   13ff4:	tst	r0, #32
   13ff8:	bne	1425c <__assert_fail@plt+0x270c>
   13ffc:	ldr	r5, [r6, #4]
   14000:	str	r5, [r4]
   14004:	mov	r0, r6
   14008:	bl	1331c <__assert_fail@plt+0x17cc>
   1400c:	ldr	r0, [r5, #48]	; 0x30
   14010:	cmn	r0, #1
   14014:	beq	14078 <__assert_fail@plt+0x2528>
   14018:	ldrh	r0, [r5, #56]	; 0x38
   1401c:	cmp	r0, #11
   14020:	beq	14264 <__assert_fail@plt+0x2714>
   14024:	ldr	r0, [r5, #40]	; 0x28
   14028:	ldr	r1, [r4, #24]
   1402c:	mov	r2, #0
   14030:	strb	r2, [r1, r0]
   14034:	ldr	r0, [r5, #48]	; 0x30
   14038:	cmp	r0, #0
   1403c:	beq	140b4 <__assert_fail@plt+0x2564>
   14040:	ldrh	r0, [r5, #58]	; 0x3a
   14044:	tst	r0, #2
   14048:	bne	140e0 <__assert_fail@plt+0x2590>
   1404c:	tst	r0, #1
   14050:	bne	14220 <__assert_fail@plt+0x26d0>
   14054:	ldr	r1, [r5, #4]
   14058:	movw	r3, #43482	; 0xa9da
   1405c:	movt	r3, #1
   14060:	mov	r0, r4
   14064:	mvn	r2, #0
   14068:	bl	14344 <__assert_fail@plt+0x27f4>
   1406c:	cmp	r0, #0
   14070:	bne	140c4 <__assert_fail@plt+0x2574>
   14074:	b	14220 <__assert_fail@plt+0x26d0>
   14078:	mov	r0, r5
   1407c:	bl	1331c <__assert_fail@plt+0x17cc>
   14080:	bl	119a0 <__errno_location@plt>
   14084:	mov	r5, #0
   14088:	str	r5, [r0]
   1408c:	str	r5, [r4]
   14090:	mov	r0, r5
   14094:	pop	{r4, r5, r6, r7, fp, pc}
   14098:	bl	119a0 <__errno_location@plt>
   1409c:	ldr	r0, [r0]
   140a0:	mov	r1, #7
   140a4:	strh	r1, [r6, #56]	; 0x38
   140a8:	str	r0, [r6, #32]
   140ac:	mov	r5, r6
   140b0:	b	1417c <__assert_fail@plt+0x262c>
   140b4:	mov	r0, r4
   140b8:	bl	14d48 <__assert_fail@plt+0x31f8>
   140bc:	cmp	r0, #0
   140c0:	beq	14220 <__assert_fail@plt+0x26d0>
   140c4:	bl	119a0 <__errno_location@plt>
   140c8:	ldr	r0, [r0]
   140cc:	str	r0, [r5, #32]
   140d0:	ldr	r0, [r4, #48]	; 0x30
   140d4:	orr	r0, r0, #8192	; 0x2000
   140d8:	str	r0, [r4, #48]	; 0x30
   140dc:	b	14220 <__assert_fail@plt+0x26d0>
   140e0:	ldr	r0, [r4, #48]	; 0x30
   140e4:	tst	r0, #4
   140e8:	bne	14218 <__assert_fail@plt+0x26c8>
   140ec:	ldr	r1, [r5, #36]	; 0x24
   140f0:	tst	r0, #512	; 0x200
   140f4:	bne	1420c <__assert_fail@plt+0x26bc>
   140f8:	mov	r0, r1
   140fc:	bl	11a78 <fchdir@plt>
   14100:	cmp	r0, #0
   14104:	beq	14218 <__assert_fail@plt+0x26c8>
   14108:	bl	119a0 <__errno_location@plt>
   1410c:	ldr	r0, [r0]
   14110:	str	r0, [r5, #32]
   14114:	ldr	r0, [r4, #48]	; 0x30
   14118:	orr	r0, r0, #8192	; 0x2000
   1411c:	str	r0, [r4, #48]	; 0x30
   14120:	b	14218 <__assert_fail@plt+0x26c8>
   14124:	bl	119a0 <__errno_location@plt>
   14128:	ldr	r0, [r0]
   1412c:	mov	r1, #7
   14130:	strh	r1, [r5, #56]	; 0x38
   14134:	str	r0, [r5, #32]
   14138:	mov	r0, #3
   1413c:	strh	r0, [r5, #60]	; 0x3c
   14140:	ldr	r0, [r5, #4]
   14144:	ldr	r1, [r0, #28]
   14148:	ldr	r0, [r0, #40]	; 0x28
   1414c:	sub	r2, r0, #1
   14150:	ldrb	r1, [r1, r2]
   14154:	cmp	r1, #47	; 0x2f
   14158:	moveq	r0, r2
   1415c:	ldr	r1, [r4, #24]
   14160:	mov	r2, #47	; 0x2f
   14164:	strb	r2, [r1, r0]!
   14168:	add	r0, r1, #1
   1416c:	add	r1, r5, #168	; 0xa8
   14170:	ldr	r2, [r5, #52]	; 0x34
   14174:	add	r2, r2, #1
   14178:	bl	117a8 <memmove@plt>
   1417c:	str	r5, [r4]
   14180:	ldrh	r0, [r5, #56]	; 0x38
   14184:	cmp	r0, #11
   14188:	bne	141c0 <__assert_fail@plt+0x2670>
   1418c:	add	r0, r5, #112	; 0x70
   14190:	ldrd	r0, [r0]
   14194:	eor	r2, r0, #1
   14198:	orrs	r2, r2, r1
   1419c:	beq	1425c <__assert_fail@plt+0x270c>
   141a0:	eor	r0, r0, #2
   141a4:	orrs	r0, r0, r1
   141a8:	bne	14264 <__assert_fail@plt+0x2714>
   141ac:	mov	r0, r4
   141b0:	mov	r1, r5
   141b4:	mov	r2, #0
   141b8:	bl	137c8 <__assert_fail@plt+0x1c78>
   141bc:	strh	r0, [r5, #56]	; 0x38
   141c0:	cmp	r0, #1
   141c4:	bne	1425c <__assert_fail@plt+0x270c>
   141c8:	ldr	r0, [r5, #48]	; 0x30
   141cc:	cmp	r0, #0
   141d0:	bne	141e0 <__assert_fail@plt+0x2690>
   141d4:	add	r0, r5, #64	; 0x40
   141d8:	ldrd	r0, [r0]
   141dc:	strd	r0, [r4, #16]
   141e0:	mov	r0, r4
   141e4:	mov	r1, r5
   141e8:	bl	14e2c <__assert_fail@plt+0x32dc>
   141ec:	cmp	r0, #0
   141f0:	bne	1425c <__assert_fail@plt+0x270c>
   141f4:	bl	119a0 <__errno_location@plt>
   141f8:	mov	r1, #12
   141fc:	str	r1, [r0]
   14200:	mov	r5, #0
   14204:	mov	r0, r5
   14208:	pop	{r4, r5, r6, r7, fp, pc}
   1420c:	mov	r0, r4
   14210:	mov	r2, #1
   14214:	bl	14eec <__assert_fail@plt+0x339c>
   14218:	ldr	r0, [r5, #36]	; 0x24
   1421c:	bl	11afc <close@plt>
   14220:	ldrh	r0, [r5, #56]	; 0x38
   14224:	cmp	r0, #2
   14228:	beq	14250 <__assert_fail@plt+0x2700>
   1422c:	ldr	r0, [r5, #32]
   14230:	mov	r1, #7
   14234:	cmp	r0, #0
   14238:	movweq	r1, #6
   1423c:	strh	r1, [r5, #56]	; 0x38
   14240:	bne	14250 <__assert_fail@plt+0x2700>
   14244:	mov	r0, r4
   14248:	mov	r1, r5
   1424c:	bl	14268 <__assert_fail@plt+0x2718>
   14250:	ldrb	r0, [r4, #49]	; 0x31
   14254:	tst	r0, #32
   14258:	movne	r5, #0
   1425c:	mov	r0, r5
   14260:	pop	{r4, r5, r6, r7, fp, pc}
   14264:	bl	11af0 <abort@plt>
   14268:	push	{r4, r5, r7, sl, fp, lr}
   1426c:	add	fp, sp, #16
   14270:	sub	sp, sp, #24
   14274:	add	lr, r1, #64	; 0x40
   14278:	add	r4, r1, #160	; 0xa0
   1427c:	ldrh	r2, [r0, #48]	; 0x30
   14280:	movw	r3, #258	; 0x102
   14284:	tst	r2, r3
   14288:	beq	142c0 <__assert_fail@plt+0x2770>
   1428c:	ldrd	r2, [lr]
   14290:	stm	sp, {r2, r3}
   14294:	ldrd	r2, [r4]
   14298:	str	r3, [sp, #12]
   1429c:	str	r2, [sp, #8]
   142a0:	ldr	r0, [r0, #56]	; 0x38
   142a4:	mov	r1, sp
   142a8:	bl	161c8 <__assert_fail@plt+0x4678>
   142ac:	cmp	r0, #0
   142b0:	beq	14340 <__assert_fail@plt+0x27f0>
   142b4:	bl	1331c <__assert_fail@plt+0x17cc>
   142b8:	sub	sp, fp, #16
   142bc:	pop	{r4, r5, r7, sl, fp, pc}
   142c0:	ldr	r1, [r1, #4]
   142c4:	cmp	r1, #0
   142c8:	beq	14338 <__assert_fail@plt+0x27e8>
   142cc:	ldr	r2, [r1, #48]	; 0x30
   142d0:	cmp	r2, #0
   142d4:	bmi	14338 <__assert_fail@plt+0x27e8>
   142d8:	ldr	ip, [r0, #56]	; 0x38
   142dc:	ldrd	r2, [ip, #16]
   142e0:	orrs	r2, r2, r3
   142e4:	beq	14340 <__assert_fail@plt+0x27f0>
   142e8:	ldrd	r2, [r4]
   142ec:	ldrd	r4, [ip]
   142f0:	eor	r3, r5, r3
   142f4:	eor	r2, r4, r2
   142f8:	orrs	r2, r2, r3
   142fc:	bne	14338 <__assert_fail@plt+0x27e8>
   14300:	add	r3, ip, #8
   14304:	ldm	lr, {r2, r5}
   14308:	ldm	r3, {r4, r7}
   1430c:	eor	r7, r7, r5
   14310:	eor	r2, r4, r2
   14314:	orrs	r2, r2, r7
   14318:	bne	14338 <__assert_fail@plt+0x27e8>
   1431c:	add	r2, r1, #64	; 0x40
   14320:	add	r1, r1, #160	; 0xa0
   14324:	ldm	r2, {r2, r5}
   14328:	stm	r3, {r2, r5}
   1432c:	ldr	r0, [r0, #56]	; 0x38
   14330:	ldrd	r2, [r1]
   14334:	strd	r2, [r0]
   14338:	sub	sp, fp, #16
   1433c:	pop	{r4, r5, r7, sl, fp, pc}
   14340:	bl	11af0 <abort@plt>
   14344:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14348:	add	fp, sp, #24
   1434c:	sub	sp, sp, #104	; 0x68
   14350:	mov	r7, r3
   14354:	mov	r4, r2
   14358:	mov	r8, r1
   1435c:	mov	r5, r0
   14360:	cmp	r3, #0
   14364:	beq	14388 <__assert_fail@plt+0x2838>
   14368:	movw	r1, #43482	; 0xa9da
   1436c:	movt	r1, #1
   14370:	mov	r0, r7
   14374:	bl	11778 <strcmp@plt>
   14378:	mov	r6, r0
   1437c:	cmp	r0, #0
   14380:	movwne	r6, #1
   14384:	b	1438c <__assert_fail@plt+0x283c>
   14388:	mov	r6, #1
   1438c:	ldr	r0, [r5, #48]	; 0x30
   14390:	tst	r0, #4
   14394:	bne	143ec <__assert_fail@plt+0x289c>
   14398:	mov	r9, #0
   1439c:	cmn	r4, #1
   143a0:	mov	r1, #0
   143a4:	movwgt	r1, #1
   143a8:	orrs	r1, r1, r6
   143ac:	bne	1440c <__assert_fail@plt+0x28bc>
   143b0:	ands	r0, r0, #512	; 0x200
   143b4:	beq	1440c <__assert_fail@plt+0x28bc>
   143b8:	add	r4, r5, #60	; 0x3c
   143bc:	mov	r0, r4
   143c0:	bl	16480 <__assert_fail@plt+0x4930>
   143c4:	cmp	r0, #0
   143c8:	bne	14414 <__assert_fail@plt+0x28c4>
   143cc:	mov	r0, r4
   143d0:	bl	164cc <__assert_fail@plt+0x497c>
   143d4:	cmn	r0, #1
   143d8:	ble	14414 <__assert_fail@plt+0x28c4>
   143dc:	mov	r4, r0
   143e0:	mov	r9, #0
   143e4:	mov	r7, #0
   143e8:	b	14430 <__assert_fail@plt+0x28e0>
   143ec:	mov	r5, #0
   143f0:	cmp	r4, #0
   143f4:	bmi	14520 <__assert_fail@plt+0x29d0>
   143f8:	ands	r0, r0, #512	; 0x200
   143fc:	beq	14520 <__assert_fail@plt+0x29d0>
   14400:	mov	r0, r4
   14404:	bl	11afc <close@plt>
   14408:	b	14520 <__assert_fail@plt+0x29d0>
   1440c:	cmn	r4, #1
   14410:	bgt	14430 <__assert_fail@plt+0x28e0>
   14414:	mov	r0, r5
   14418:	mov	r1, r7
   1441c:	bl	13a98 <__assert_fail@plt+0x1f48>
   14420:	cmp	r0, #0
   14424:	bmi	144d0 <__assert_fail@plt+0x2980>
   14428:	mov	r4, r0
   1442c:	mov	r9, #1
   14430:	ldrb	r0, [r5, #48]	; 0x30
   14434:	tst	r0, #2
   14438:	bne	1445c <__assert_fail@plt+0x290c>
   1443c:	cmp	r7, #0
   14440:	beq	144ac <__assert_fail@plt+0x295c>
   14444:	movw	r1, #43482	; 0xa9da
   14448:	movt	r1, #1
   1444c:	mov	r0, r7
   14450:	bl	11778 <strcmp@plt>
   14454:	cmp	r0, #0
   14458:	bne	144ac <__assert_fail@plt+0x295c>
   1445c:	mov	r1, sp
   14460:	mov	r0, r4
   14464:	bl	1a400 <lchmod@@Base+0x3ee4>
   14468:	cmp	r0, #0
   1446c:	bne	144fc <__assert_fail@plt+0x29ac>
   14470:	add	r0, r8, #64	; 0x40
   14474:	ldrd	r0, [r0]
   14478:	ldm	sp, {r2, r3}
   1447c:	eor	r1, r1, r3
   14480:	eor	r0, r0, r2
   14484:	orrs	r0, r0, r1
   14488:	bne	144f0 <__assert_fail@plt+0x29a0>
   1448c:	add	r0, r8, #160	; 0xa0
   14490:	ldrd	r0, [r0]
   14494:	ldr	r2, [sp, #96]	; 0x60
   14498:	ldr	r3, [sp, #100]	; 0x64
   1449c:	eor	r1, r1, r3
   144a0:	eor	r0, r0, r2
   144a4:	orrs	r0, r0, r1
   144a8:	bne	144f0 <__assert_fail@plt+0x29a0>
   144ac:	ldrb	r0, [r5, #49]	; 0x31
   144b0:	tst	r0, #2
   144b4:	bne	144d8 <__assert_fail@plt+0x2988>
   144b8:	mov	r0, r4
   144bc:	bl	11a78 <fchdir@plt>
   144c0:	mov	r5, r0
   144c4:	cmp	r9, #0
   144c8:	bne	14508 <__assert_fail@plt+0x29b8>
   144cc:	b	14520 <__assert_fail@plt+0x29d0>
   144d0:	mvn	r5, #0
   144d4:	b	14520 <__assert_fail@plt+0x29d0>
   144d8:	mov	r0, r5
   144dc:	mov	r1, r4
   144e0:	mov	r2, r6
   144e4:	bl	14eec <__assert_fail@plt+0x339c>
   144e8:	mov	r5, #0
   144ec:	b	14520 <__assert_fail@plt+0x29d0>
   144f0:	bl	119a0 <__errno_location@plt>
   144f4:	mov	r1, #2
   144f8:	str	r1, [r0]
   144fc:	mvn	r5, #0
   14500:	cmp	r9, #0
   14504:	beq	14520 <__assert_fail@plt+0x29d0>
   14508:	bl	119a0 <__errno_location@plt>
   1450c:	mov	r6, r0
   14510:	ldr	r7, [r0]
   14514:	mov	r0, r4
   14518:	bl	11afc <close@plt>
   1451c:	str	r7, [r6]
   14520:	mov	r0, r5
   14524:	sub	sp, fp, #24
   14528:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1452c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14530:	add	fp, sp, #28
   14534:	sub	sp, sp, #68	; 0x44
   14538:	mov	r4, r1
   1453c:	mov	r6, r0
   14540:	ldr	sl, [r0]
   14544:	ldr	r7, [sl, #12]
   14548:	cmp	r7, #0
   1454c:	beq	148a8 <__assert_fail@plt+0x2d58>
   14550:	mov	r0, r7
   14554:	bl	11a6c <dirfd@plt>
   14558:	str	r0, [fp, #-32]	; 0xffffffe0
   1455c:	cmn	r0, #1
   14560:	ble	148dc <__assert_fail@plt+0x2d8c>
   14564:	mov	r1, r6
   14568:	ldr	r0, [r1, #44]!	; 0x2c
   1456c:	str	r1, [fp, #-40]	; 0xffffffd8
   14570:	mvn	r1, #0
   14574:	cmp	r0, #0
   14578:	movweq	r1, #34464	; 0x86a0
   1457c:	movteq	r1, #1
   14580:	str	r1, [sp, #28]
   14584:	mov	r0, #1
   14588:	str	r0, [sp, #4]
   1458c:	str	r4, [sp, #8]
   14590:	ldr	r1, [sl, #28]
   14594:	ldr	r0, [sl, #40]	; 0x28
   14598:	sub	r2, r0, #1
   1459c:	ldrb	r1, [r1, r2]
   145a0:	cmp	r1, #47	; 0x2f
   145a4:	moveq	r0, r2
   145a8:	ldrb	r1, [r6, #48]	; 0x30
   145ac:	mov	r9, #0
   145b0:	tst	r1, #4
   145b4:	mov	r1, #0
   145b8:	str	r1, [sp, #44]	; 0x2c
   145bc:	beq	145d4 <__assert_fail@plt+0x2a84>
   145c0:	ldr	r1, [r6, #24]
   145c4:	mov	r2, #47	; 0x2f
   145c8:	strb	r2, [r1, r0]!
   145cc:	add	r1, r1, #1
   145d0:	str	r1, [sp, #44]	; 0x2c
   145d4:	add	r1, r0, #1
   145d8:	ldr	r4, [sl, #12]
   145dc:	cmp	r4, #0
   145e0:	str	r1, [fp, #-36]	; 0xffffffdc
   145e4:	str	r7, [sp, #12]
   145e8:	beq	148f8 <__assert_fail@plt+0x2da8>
   145ec:	ldr	r0, [sl, #48]	; 0x30
   145f0:	add	r0, r0, #1
   145f4:	str	r0, [sp, #24]
   145f8:	str	r6, [sp, #36]	; 0x24
   145fc:	ldr	r0, [r6, #36]	; 0x24
   14600:	sub	r0, r0, r1
   14604:	str	r0, [sp, #48]	; 0x30
   14608:	mov	r6, #0
   1460c:	bl	119a0 <__errno_location@plt>
   14610:	str	r0, [sp, #40]	; 0x28
   14614:	mov	r9, #0
   14618:	mov	r7, #0
   1461c:	mov	r0, #0
   14620:	str	r0, [fp, #-44]	; 0xffffffd4
   14624:	mov	r0, #0
   14628:	str	r0, [sp, #20]
   1462c:	mov	r0, #0
   14630:	str	r0, [sp, #16]
   14634:	str	sl, [sp, #32]
   14638:	ldr	r0, [sp, #40]	; 0x28
   1463c:	str	r6, [r0]
   14640:	mov	r0, r4
   14644:	bl	11a48 <readdir64@plt>
   14648:	cmp	r0, #0
   1464c:	beq	14b28 <__assert_fail@plt+0x2fd8>
   14650:	mov	r8, r0
   14654:	mov	r5, r9
   14658:	ldr	r6, [sp, #36]	; 0x24
   1465c:	ldrb	r0, [r6, #48]	; 0x30
   14660:	tst	r0, #32
   14664:	bne	14694 <__assert_fail@plt+0x2b44>
   14668:	ldrb	r0, [r8, #19]
   1466c:	cmp	r0, #46	; 0x2e
   14670:	bne	14694 <__assert_fail@plt+0x2b44>
   14674:	ldrb	r0, [r8, #20]
   14678:	cmp	r0, #0
   1467c:	beq	14898 <__assert_fail@plt+0x2d48>
   14680:	cmp	r0, #46	; 0x2e
   14684:	bne	14694 <__assert_fail@plt+0x2b44>
   14688:	ldrb	r0, [r8, #21]
   1468c:	cmp	r0, #0
   14690:	beq	14898 <__assert_fail@plt+0x2d48>
   14694:	add	r4, r8, #19
   14698:	mov	r0, r4
   1469c:	bl	11970 <strlen@plt>
   146a0:	mov	sl, r0
   146a4:	mov	r0, r6
   146a8:	mov	r1, r4
   146ac:	mov	r2, sl
   146b0:	bl	13714 <__assert_fail@plt+0x1bc4>
   146b4:	mov	r9, r0
   146b8:	cmp	r0, #0
   146bc:	beq	1490c <__assert_fail@plt+0x2dbc>
   146c0:	ldr	r0, [sp, #48]	; 0x30
   146c4:	cmp	sl, r0
   146c8:	bcs	146dc <__assert_fail@plt+0x2b8c>
   146cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   146d0:	adds	r0, sl, r2
   146d4:	bcc	14744 <__assert_fail@plt+0x2bf4>
   146d8:	b	14b84 <__assert_fail@plt+0x3034>
   146dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   146e0:	add	r0, sl, r0
   146e4:	add	r1, r0, #1
   146e8:	ldr	r4, [r6, #24]
   146ec:	mov	r0, r6
   146f0:	bl	13698 <__assert_fail@plt+0x1b48>
   146f4:	cmp	r0, #0
   146f8:	beq	1490c <__assert_fail@plt+0x2dbc>
   146fc:	ldr	r0, [r6, #24]
   14700:	cmp	r4, r0
   14704:	beq	1472c <__assert_fail@plt+0x2bdc>
   14708:	ldrb	r1, [r6, #48]	; 0x30
   1470c:	tst	r1, #4
   14710:	ldr	r1, [sp, #44]	; 0x2c
   14714:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14718:	addne	r1, r0, r2
   1471c:	str	r1, [sp, #44]	; 0x2c
   14720:	mov	r0, #1
   14724:	str	r0, [sp, #16]
   14728:	b	14730 <__assert_fail@plt+0x2be0>
   1472c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14730:	ldr	r0, [r6, #36]	; 0x24
   14734:	sub	r0, r0, r2
   14738:	str	r0, [sp, #48]	; 0x30
   1473c:	adds	r0, sl, r2
   14740:	bcs	14b84 <__assert_fail@plt+0x3034>
   14744:	ldr	r1, [sp, #24]
   14748:	str	r1, [r9, #48]	; 0x30
   1474c:	ldr	r1, [r6]
   14750:	str	r0, [r9, #40]	; 0x28
   14754:	str	r1, [r9, #4]
   14758:	ldrd	r0, [r8]
   1475c:	strd	r0, [r9, #160]	; 0xa0
   14760:	ldrb	r0, [r6, #48]	; 0x30
   14764:	tst	r0, #4
   14768:	bne	14778 <__assert_fail@plt+0x2c28>
   1476c:	add	r0, r9, #168	; 0xa8
   14770:	str	r0, [r9, #24]
   14774:	b	14794 <__assert_fail@plt+0x2c44>
   14778:	ldr	r0, [r9, #28]
   1477c:	ldr	r2, [r9, #52]	; 0x34
   14780:	str	r0, [r9, #24]
   14784:	add	r1, r9, #168	; 0xa8
   14788:	add	r2, r2, #1
   1478c:	ldr	r0, [sp, #44]	; 0x2c
   14790:	bl	117a8 <memmove@plt>
   14794:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14798:	ldr	r0, [r0]
   1479c:	cmp	r0, #0
   147a0:	beq	147cc <__assert_fail@plt+0x2c7c>
   147a4:	ldrb	r0, [r6, #49]	; 0x31
   147a8:	tst	r0, #4
   147ac:	bne	147cc <__assert_fail@plt+0x2c7c>
   147b0:	mov	r0, r6
   147b4:	mov	r1, r9
   147b8:	mov	r2, #0
   147bc:	bl	137c8 <__assert_fail@plt+0x1c78>
   147c0:	strh	r0, [r9, #56]	; 0x38
   147c4:	ldr	sl, [sp, #32]
   147c8:	b	14828 <__assert_fail@plt+0x2cd8>
   147cc:	add	r0, r9, #64	; 0x40
   147d0:	ldr	r1, [r6, #48]	; 0x30
   147d4:	mov	r4, #0
   147d8:	tst	r1, #8
   147dc:	bne	147e8 <__assert_fail@plt+0x2c98>
   147e0:	ldr	sl, [sp, #32]
   147e4:	b	1480c <__assert_fail@plt+0x2cbc>
   147e8:	ldrb	r2, [r8, #18]
   147ec:	orr	r3, r2, #4
   147f0:	cmp	r3, #4
   147f4:	ldr	sl, [sp, #32]
   147f8:	beq	1480c <__assert_fail@plt+0x2cbc>
   147fc:	eor	r2, r2, #10
   14800:	and	r1, r1, #16
   14804:	orrs	r4, r1, r2
   14808:	movwne	r4, #1
   1480c:	mov	r1, #11
   14810:	strh	r1, [r9, #56]	; 0x38
   14814:	ldrb	r1, [r8, #18]
   14818:	bl	151bc <__assert_fail@plt+0x366c>
   1481c:	eor	r1, r4, #1
   14820:	mov	r0, r9
   14824:	bl	13798 <__assert_fail@plt+0x1c48>
   14828:	mov	r6, #0
   1482c:	str	r6, [r9, #8]
   14830:	cmp	r5, #0
   14834:	mov	r4, r9
   14838:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   1483c:	strne	r9, [r0, #8]
   14840:	movne	r4, r5
   14844:	movw	r0, #10000	; 0x2710
   14848:	cmp	r7, r0
   1484c:	bne	14870 <__assert_fail@plt+0x2d20>
   14850:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14854:	ldr	r0, [r0]
   14858:	cmp	r0, #0
   1485c:	bne	14870 <__assert_fail@plt+0x2d20>
   14860:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14864:	mov	r0, sl
   14868:	bl	151e0 <__assert_fail@plt+0x3690>
   1486c:	str	r0, [sp, #20]
   14870:	add	r7, r7, #1
   14874:	ldr	r0, [sp, #28]
   14878:	cmp	r0, r7
   1487c:	bls	14bcc <__assert_fail@plt+0x307c>
   14880:	str	r9, [fp, #-44]	; 0xffffffd4
   14884:	mov	r9, r4
   14888:	ldr	r4, [sl, #12]
   1488c:	cmp	r4, #0
   14890:	bne	14638 <__assert_fail@plt+0x2ae8>
   14894:	b	14b78 <__assert_fail@plt+0x3028>
   14898:	ldr	sl, [sp, #32]
   1489c:	mov	r9, r5
   148a0:	mov	r6, #0
   148a4:	b	14888 <__assert_fail@plt+0x2d38>
   148a8:	ldr	r3, [r6, #48]	; 0x30
   148ac:	and	r1, r3, #516	; 0x204
   148b0:	mvn	r0, #99	; 0x63
   148b4:	cmp	r1, #512	; 0x200
   148b8:	ldreq	r0, [r6, #32]
   148bc:	ldr	r1, [sl, #24]
   148c0:	mov	r2, #0
   148c4:	tst	r3, #16
   148c8:	beq	14960 <__assert_fail@plt+0x2e10>
   148cc:	tst	r3, #1
   148d0:	bne	14954 <__assert_fail@plt+0x2e04>
   148d4:	mov	r2, #32768	; 0x8000
   148d8:	b	14960 <__assert_fail@plt+0x2e10>
   148dc:	ldr	r0, [sl, #12]
   148e0:	bl	11b2c <closedir@plt>
   148e4:	mov	r9, #0
   148e8:	str	r9, [sl, #12]
   148ec:	cmp	r4, #3
   148f0:	beq	149a4 <__assert_fail@plt+0x2e54>
   148f4:	b	14d3c <__assert_fail@plt+0x31ec>
   148f8:	mov	r7, #0
   148fc:	mov	r0, #0
   14900:	str	r0, [sp, #20]
   14904:	ldr	r4, [sp, #8]
   14908:	b	14bec <__assert_fail@plt+0x309c>
   1490c:	ldr	r7, [sp, #40]	; 0x28
   14910:	ldr	r4, [r7]
   14914:	mov	r0, r9
   14918:	bl	1331c <__assert_fail@plt+0x17cc>
   1491c:	mov	r0, r5
   14920:	bl	13ac8 <__assert_fail@plt+0x1f78>
   14924:	ldr	r5, [sp, #32]
   14928:	ldr	r0, [r5, #12]
   1492c:	bl	11b2c <closedir@plt>
   14930:	mov	r0, #7
   14934:	strh	r0, [r5, #56]	; 0x38
   14938:	mov	r9, #0
   1493c:	str	r9, [r5, #12]
   14940:	ldr	r0, [r6, #48]	; 0x30
   14944:	orr	r0, r0, #8192	; 0x2000
   14948:	str	r0, [r6, #48]	; 0x30
   1494c:	str	r4, [r7]
   14950:	b	14d3c <__assert_fail@plt+0x31ec>
   14954:	ldr	r3, [sl, #48]	; 0x30
   14958:	cmp	r3, #0
   1495c:	movne	r2, #32768	; 0x8000
   14960:	sub	r3, fp, #32
   14964:	bl	16c2c <lchmod@@Base+0x710>
   14968:	str	r0, [sl, #12]
   1496c:	cmp	r0, #0
   14970:	beq	14998 <__assert_fail@plt+0x2e48>
   14974:	ldrh	r0, [sl, #56]	; 0x38
   14978:	cmp	r0, #11
   1497c:	bne	149bc <__assert_fail@plt+0x2e6c>
   14980:	mov	r0, r6
   14984:	mov	r1, sl
   14988:	mov	r2, #0
   1498c:	bl	137c8 <__assert_fail@plt+0x1c78>
   14990:	strh	r0, [sl, #56]	; 0x38
   14994:	b	149fc <__assert_fail@plt+0x2eac>
   14998:	mov	r9, #0
   1499c:	cmp	r4, #3
   149a0:	bne	14d3c <__assert_fail@plt+0x31ec>
   149a4:	mov	r0, #4
   149a8:	strh	r0, [sl, #56]	; 0x38
   149ac:	bl	119a0 <__errno_location@plt>
   149b0:	ldr	r0, [r0]
   149b4:	str	r0, [sl, #32]
   149b8:	b	14d3c <__assert_fail@plt+0x31ec>
   149bc:	ldrb	r0, [r6, #49]	; 0x31
   149c0:	tst	r0, #1
   149c4:	beq	149fc <__assert_fail@plt+0x2eac>
   149c8:	mov	r0, r6
   149cc:	mov	r1, sl
   149d0:	bl	14268 <__assert_fail@plt+0x2718>
   149d4:	mov	r9, #0
   149d8:	mov	r0, r6
   149dc:	mov	r1, sl
   149e0:	mov	r2, #0
   149e4:	bl	137c8 <__assert_fail@plt+0x1c78>
   149e8:	mov	r0, r6
   149ec:	mov	r1, sl
   149f0:	bl	14e2c <__assert_fail@plt+0x32dc>
   149f4:	cmp	r0, #0
   149f8:	beq	14cfc <__assert_fail@plt+0x31ac>
   149fc:	mov	r1, r6
   14a00:	ldr	r0, [r1, #44]!	; 0x2c
   14a04:	str	r1, [fp, #-40]	; 0xffffffd8
   14a08:	mvn	r1, #0
   14a0c:	cmp	r0, #0
   14a10:	movweq	r1, #34464	; 0x86a0
   14a14:	movteq	r1, #1
   14a18:	str	r1, [sp, #28]
   14a1c:	mov	r5, #0
   14a20:	cmp	r4, #2
   14a24:	beq	14a60 <__assert_fail@plt+0x2f10>
   14a28:	ldr	r0, [r6, #48]	; 0x30
   14a2c:	and	r1, r0, #56	; 0x38
   14a30:	mov	r0, #0
   14a34:	cmp	r1, #24
   14a38:	bne	14a5c <__assert_fail@plt+0x2f0c>
   14a3c:	ldr	r1, [sl, #84]	; 0x54
   14a40:	cmp	r1, #2
   14a44:	bne	14a5c <__assert_fail@plt+0x2f0c>
   14a48:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14a4c:	mov	r0, sl
   14a50:	bl	15154 <__assert_fail@plt+0x3604>
   14a54:	cmp	r0, #0
   14a58:	movwne	r0, #1
   14a5c:	eor	r5, r0, #1
   14a60:	cmp	r4, #3
   14a64:	beq	14a78 <__assert_fail@plt+0x2f28>
   14a68:	cmp	r5, #0
   14a6c:	bne	14a78 <__assert_fail@plt+0x2f28>
   14a70:	str	r5, [sp, #4]
   14a74:	b	1458c <__assert_fail@plt+0x2a3c>
   14a78:	ldrb	r0, [r6, #49]	; 0x31
   14a7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a80:	tst	r0, #2
   14a84:	beq	14aa0 <__assert_fail@plt+0x2f50>
   14a88:	mov	r0, r2
   14a8c:	movw	r1, #1030	; 0x406
   14a90:	mov	r2, #3
   14a94:	bl	19c50 <lchmod@@Base+0x3734>
   14a98:	mov	r2, r0
   14a9c:	str	r0, [fp, #-32]	; 0xffffffe0
   14aa0:	cmp	r2, #0
   14aa4:	bmi	14ac0 <__assert_fail@plt+0x2f70>
   14aa8:	mov	r0, r6
   14aac:	mov	r1, sl
   14ab0:	mov	r3, #0
   14ab4:	bl	14344 <__assert_fail@plt+0x27f4>
   14ab8:	cmp	r0, #0
   14abc:	beq	14584 <__assert_fail@plt+0x2a34>
   14ac0:	subs	r0, r4, #3
   14ac4:	movwne	r0, #1
   14ac8:	eor	r1, r5, #1
   14acc:	orrs	r0, r0, r1
   14ad0:	bne	14ae0 <__assert_fail@plt+0x2f90>
   14ad4:	bl	119a0 <__errno_location@plt>
   14ad8:	ldr	r0, [r0]
   14adc:	str	r0, [sl, #32]
   14ae0:	ldrh	r0, [sl, #58]	; 0x3a
   14ae4:	orr	r0, r0, #1
   14ae8:	strh	r0, [sl, #58]	; 0x3a
   14aec:	ldr	r0, [sl, #12]
   14af0:	bl	11b2c <closedir@plt>
   14af4:	mov	r5, #0
   14af8:	str	r5, [sl, #12]
   14afc:	ldrb	r0, [r6, #49]	; 0x31
   14b00:	tst	r0, #2
   14b04:	beq	14b18 <__assert_fail@plt+0x2fc8>
   14b08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b0c:	cmp	r0, #0
   14b10:	bmi	14b18 <__assert_fail@plt+0x2fc8>
   14b14:	bl	11afc <close@plt>
   14b18:	mov	r0, #0
   14b1c:	str	r0, [sp, #4]
   14b20:	str	r5, [sl, #12]
   14b24:	b	1458c <__assert_fail@plt+0x2a3c>
   14b28:	ldr	r0, [sp, #40]	; 0x28
   14b2c:	ldr	r0, [r0]
   14b30:	cmp	r0, #0
   14b34:	beq	14b50 <__assert_fail@plt+0x3000>
   14b38:	str	r0, [sl, #32]
   14b3c:	ldr	r0, [sp, #12]
   14b40:	orrs	r0, r0, r7
   14b44:	mov	r0, #4
   14b48:	movwne	r0, #7
   14b4c:	strh	r0, [sl, #56]	; 0x38
   14b50:	ldr	r0, [sl, #12]
   14b54:	cmp	r0, #0
   14b58:	ldr	r4, [sp, #8]
   14b5c:	beq	14b6c <__assert_fail@plt+0x301c>
   14b60:	bl	11b2c <closedir@plt>
   14b64:	mov	r0, #0
   14b68:	str	r0, [sl, #12]
   14b6c:	ldr	r0, [sp, #16]
   14b70:	tst	r0, #1
   14b74:	b	14bdc <__assert_fail@plt+0x308c>
   14b78:	ldr	r0, [sp, #16]
   14b7c:	tst	r0, #1
   14b80:	b	14bd8 <__assert_fail@plt+0x3088>
   14b84:	mov	r0, r9
   14b88:	bl	1331c <__assert_fail@plt+0x17cc>
   14b8c:	mov	r0, r5
   14b90:	bl	13ac8 <__assert_fail@plt+0x1f78>
   14b94:	ldr	r4, [sp, #32]
   14b98:	ldr	r0, [r4, #12]
   14b9c:	bl	11b2c <closedir@plt>
   14ba0:	mov	r0, #7
   14ba4:	strh	r0, [r4, #56]	; 0x38
   14ba8:	mov	r9, #0
   14bac:	str	r9, [r4, #12]
   14bb0:	ldr	r0, [r6, #48]	; 0x30
   14bb4:	orr	r0, r0, #8192	; 0x2000
   14bb8:	str	r0, [r6, #48]	; 0x30
   14bbc:	mov	r0, #36	; 0x24
   14bc0:	ldr	r1, [sp, #40]	; 0x28
   14bc4:	str	r0, [r1]
   14bc8:	b	14d3c <__assert_fail@plt+0x31ec>
   14bcc:	ldr	r0, [sp, #16]
   14bd0:	tst	r0, #1
   14bd4:	mov	r9, r4
   14bd8:	ldr	r4, [sp, #8]
   14bdc:	ldr	r6, [sp, #36]	; 0x24
   14be0:	movne	r0, r6
   14be4:	movne	r1, r9
   14be8:	blne	15224 <__assert_fail@plt+0x36d4>
   14bec:	ldrb	r0, [r6, #48]	; 0x30
   14bf0:	tst	r0, #4
   14bf4:	beq	14c20 <__assert_fail@plt+0x30d0>
   14bf8:	ldr	r0, [r6, #36]	; 0x24
   14bfc:	ldr	r2, [sp, #44]	; 0x2c
   14c00:	sub	r1, r2, #1
   14c04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14c08:	cmp	r3, r0
   14c0c:	moveq	r2, r1
   14c10:	cmp	r7, #0
   14c14:	moveq	r2, r1
   14c18:	mov	r0, #0
   14c1c:	strb	r0, [r2]
   14c20:	ldr	r0, [sp, #12]
   14c24:	cmp	r0, #0
   14c28:	ldreq	r0, [sp, #4]
   14c2c:	eorseq	r0, r0, #1
   14c30:	beq	14c5c <__assert_fail@plt+0x310c>
   14c34:	cmp	r7, #0
   14c38:	bne	14c98 <__assert_fail@plt+0x3148>
   14c3c:	cmp	r4, #3
   14c40:	bne	14d30 <__assert_fail@plt+0x31e0>
   14c44:	ldrh	r0, [sl, #56]	; 0x38
   14c48:	cmp	r0, #4
   14c4c:	cmpne	r0, #7
   14c50:	movne	r0, #6
   14c54:	strhne	r0, [sl, #56]	; 0x38
   14c58:	b	14d30 <__assert_fail@plt+0x31e0>
   14c5c:	cmp	r4, #1
   14c60:	cmpne	r7, #0
   14c64:	bne	14c98 <__assert_fail@plt+0x3148>
   14c68:	ldr	r0, [sl, #48]	; 0x30
   14c6c:	cmp	r0, #0
   14c70:	beq	14d0c <__assert_fail@plt+0x31bc>
   14c74:	ldr	r1, [sl, #4]
   14c78:	movw	r3, #43482	; 0xa9da
   14c7c:	movt	r3, #1
   14c80:	mov	r0, r6
   14c84:	mvn	r2, #0
   14c88:	bl	14344 <__assert_fail@plt+0x27f4>
   14c8c:	cmp	r0, #0
   14c90:	bne	14d1c <__assert_fail@plt+0x31cc>
   14c94:	b	14c34 <__assert_fail@plt+0x30e4>
   14c98:	ldr	r0, [sp, #20]
   14c9c:	tst	r0, #1
   14ca0:	beq	14ccc <__assert_fail@plt+0x317c>
   14ca4:	movw	r0, #21188	; 0x52c4
   14ca8:	movt	r0, #1
   14cac:	str	r0, [r6, #44]	; 0x2c
   14cb0:	mov	r0, r6
   14cb4:	mov	r1, r9
   14cb8:	mov	r2, r7
   14cbc:	bl	1393c <__assert_fail@plt+0x1dec>
   14cc0:	mov	r9, r0
   14cc4:	mov	r0, #0
   14cc8:	str	r0, [r6, #44]	; 0x2c
   14ccc:	cmp	r7, #2
   14cd0:	bcc	14d3c <__assert_fail@plt+0x31ec>
   14cd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14cd8:	ldr	r0, [r0]
   14cdc:	cmp	r0, #0
   14ce0:	beq	14d3c <__assert_fail@plt+0x31ec>
   14ce4:	mov	r0, r6
   14ce8:	mov	r1, r9
   14cec:	mov	r2, r7
   14cf0:	bl	1393c <__assert_fail@plt+0x1dec>
   14cf4:	mov	r9, r0
   14cf8:	b	14d3c <__assert_fail@plt+0x31ec>
   14cfc:	bl	119a0 <__errno_location@plt>
   14d00:	mov	r1, #12
   14d04:	str	r1, [r0]
   14d08:	b	14d3c <__assert_fail@plt+0x31ec>
   14d0c:	mov	r0, r6
   14d10:	bl	14d48 <__assert_fail@plt+0x31f8>
   14d14:	cmp	r0, #0
   14d18:	beq	14c34 <__assert_fail@plt+0x30e4>
   14d1c:	mov	r0, #7
   14d20:	strh	r0, [sl, #56]	; 0x38
   14d24:	ldr	r0, [r6, #48]	; 0x30
   14d28:	orr	r0, r0, #8192	; 0x2000
   14d2c:	str	r0, [r6, #48]	; 0x30
   14d30:	mov	r0, r9
   14d34:	bl	13ac8 <__assert_fail@plt+0x1f78>
   14d38:	mov	r9, #0
   14d3c:	mov	r0, r9
   14d40:	sub	sp, fp, #28
   14d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d48:	push	{r4, r5, fp, lr}
   14d4c:	add	fp, sp, #8
   14d50:	mov	r4, r0
   14d54:	ldr	r0, [r0, #48]	; 0x30
   14d58:	mov	r5, #0
   14d5c:	tst	r0, #4
   14d60:	bne	14d94 <__assert_fail@plt+0x3244>
   14d64:	tst	r0, #512	; 0x200
   14d68:	bne	14d84 <__assert_fail@plt+0x3234>
   14d6c:	ldr	r0, [r4, #28]
   14d70:	bl	11a78 <fchdir@plt>
   14d74:	mov	r5, r0
   14d78:	cmp	r0, #0
   14d7c:	movwne	r5, #1
   14d80:	b	14d94 <__assert_fail@plt+0x3244>
   14d84:	mov	r0, r4
   14d88:	mvn	r1, #99	; 0x63
   14d8c:	mov	r2, #1
   14d90:	bl	14eec <__assert_fail@plt+0x339c>
   14d94:	add	r0, r4, #60	; 0x3c
   14d98:	bl	13c40 <__assert_fail@plt+0x20f0>
   14d9c:	mov	r0, r5
   14da0:	pop	{r4, r5, fp, pc}
   14da4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14da8:	add	fp, sp, #24
   14dac:	mov	r4, r1
   14db0:	mov	r8, r0
   14db4:	ldr	r1, [r1, #52]	; 0x34
   14db8:	str	r1, [r4, #40]	; 0x28
   14dbc:	ldr	r0, [r0, #24]
   14dc0:	add	r6, r4, #168	; 0xa8
   14dc4:	add	r2, r1, #1
   14dc8:	mov	r1, r6
   14dcc:	bl	117a8 <memmove@plt>
   14dd0:	mov	r0, r6
   14dd4:	mov	r1, #47	; 0x2f
   14dd8:	bl	11a30 <strrchr@plt>
   14ddc:	cmp	r0, #0
   14de0:	beq	14e1c <__assert_fail@plt+0x32cc>
   14de4:	cmp	r0, r6
   14de8:	bne	14df8 <__assert_fail@plt+0x32a8>
   14dec:	ldrb	r1, [r0, #1]
   14df0:	cmp	r1, #0
   14df4:	beq	14e1c <__assert_fail@plt+0x32cc>
   14df8:	add	r7, r0, #1
   14dfc:	mov	r0, r7
   14e00:	bl	11970 <strlen@plt>
   14e04:	mov	r5, r0
   14e08:	add	r2, r0, #1
   14e0c:	mov	r0, r6
   14e10:	mov	r1, r7
   14e14:	bl	117a8 <memmove@plt>
   14e18:	str	r5, [r4, #52]	; 0x34
   14e1c:	ldr	r0, [r8, #24]
   14e20:	str	r0, [r4, #24]
   14e24:	str	r0, [r4, #28]
   14e28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e30:	add	fp, sp, #24
   14e34:	mov	r4, r1
   14e38:	mov	r6, r0
   14e3c:	add	r5, r1, #64	; 0x40
   14e40:	ldrh	r0, [r0, #48]	; 0x30
   14e44:	movw	r1, #258	; 0x102
   14e48:	tst	r0, r1
   14e4c:	beq	14ec4 <__assert_fail@plt+0x3374>
   14e50:	mov	r0, #24
   14e54:	bl	194a4 <lchmod@@Base+0x2f88>
   14e58:	mov	r8, #0
   14e5c:	cmp	r0, #0
   14e60:	beq	14ee4 <__assert_fail@plt+0x3394>
   14e64:	mov	r7, r0
   14e68:	add	r0, r4, #160	; 0xa0
   14e6c:	ldrd	r2, [r5]
   14e70:	stm	r7, {r2, r3}
   14e74:	ldrd	r0, [r0]
   14e78:	add	r2, r7, #8
   14e7c:	stm	r2, {r0, r1, r4}
   14e80:	ldr	r0, [r6, #56]	; 0x38
   14e84:	mov	r1, r7
   14e88:	bl	16188 <__assert_fail@plt+0x4638>
   14e8c:	cmp	r0, r7
   14e90:	beq	14eb8 <__assert_fail@plt+0x3368>
   14e94:	mov	r5, r0
   14e98:	mov	r0, r7
   14e9c:	bl	1331c <__assert_fail@plt+0x17cc>
   14ea0:	cmp	r5, #0
   14ea4:	beq	14ee4 <__assert_fail@plt+0x3394>
   14ea8:	ldr	r0, [r5, #16]
   14eac:	mov	r1, #2
   14eb0:	strh	r1, [r4, #56]	; 0x38
   14eb4:	str	r0, [r4]
   14eb8:	mov	r8, #1
   14ebc:	mov	r0, r8
   14ec0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ec4:	ldr	r0, [r6, #56]	; 0x38
   14ec8:	mov	r1, r5
   14ecc:	bl	19ab8 <lchmod@@Base+0x359c>
   14ed0:	mov	r8, #1
   14ed4:	cmp	r0, #0
   14ed8:	movne	r0, #2
   14edc:	strhne	r0, [r4, #56]	; 0x38
   14ee0:	strne	r4, [r4]
   14ee4:	mov	r0, r8
   14ee8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14eec:	push	{r4, r5, fp, lr}
   14ef0:	add	fp, sp, #8
   14ef4:	mov	r4, r1
   14ef8:	mov	r5, r0
   14efc:	ldr	r1, [r0, #32]
   14f00:	cmp	r1, r4
   14f04:	bne	14f10 <__assert_fail@plt+0x33c0>
   14f08:	cmn	r1, #100	; 0x64
   14f0c:	bne	14f50 <__assert_fail@plt+0x3400>
   14f10:	cmp	r2, #0
   14f14:	beq	14f2c <__assert_fail@plt+0x33dc>
   14f18:	add	r0, r5, #60	; 0x3c
   14f1c:	bl	16488 <__assert_fail@plt+0x4938>
   14f20:	cmp	r0, #0
   14f24:	bpl	14f44 <__assert_fail@plt+0x33f4>
   14f28:	b	14f48 <__assert_fail@plt+0x33f8>
   14f2c:	cmp	r1, #0
   14f30:	bmi	14f48 <__assert_fail@plt+0x33f8>
   14f34:	ldr	r0, [r5, #48]	; 0x30
   14f38:	ands	r0, r0, #4
   14f3c:	bne	14f48 <__assert_fail@plt+0x33f8>
   14f40:	mov	r0, r1
   14f44:	bl	11afc <close@plt>
   14f48:	str	r4, [r5, #32]
   14f4c:	pop	{r4, r5, fp, pc}
   14f50:	bl	11af0 <abort@plt>
   14f54:	push	{fp, lr}
   14f58:	mov	fp, sp
   14f5c:	cmp	r2, #5
   14f60:	bcc	14f78 <__assert_fail@plt+0x3428>
   14f64:	bl	119a0 <__errno_location@plt>
   14f68:	mov	r1, #22
   14f6c:	str	r1, [r0]
   14f70:	mov	r0, #1
   14f74:	pop	{fp, pc}
   14f78:	strh	r2, [r1, #60]	; 0x3c
   14f7c:	mov	r0, #0
   14f80:	pop	{fp, pc}
   14f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f88:	add	fp, sp, #28
   14f8c:	sub	sp, sp, #4
   14f90:	mov	r5, r0
   14f94:	mvn	r0, #4096	; 0x1000
   14f98:	tst	r1, r0
   14f9c:	beq	14fb4 <__assert_fail@plt+0x3464>
   14fa0:	bl	119a0 <__errno_location@plt>
   14fa4:	mov	r1, #22
   14fa8:	str	r1, [r0]
   14fac:	mov	r4, #0
   14fb0:	b	150b0 <__assert_fail@plt+0x3560>
   14fb4:	mov	r7, r1
   14fb8:	ldr	r6, [r5]
   14fbc:	bl	119a0 <__errno_location@plt>
   14fc0:	mov	sl, r0
   14fc4:	mov	r4, #0
   14fc8:	str	r4, [r0]
   14fcc:	ldrb	r0, [r5, #49]	; 0x31
   14fd0:	tst	r0, #32
   14fd4:	bne	150b0 <__assert_fail@plt+0x3560>
   14fd8:	ldrh	r0, [r6, #56]	; 0x38
   14fdc:	cmp	r0, #1
   14fe0:	beq	14ff0 <__assert_fail@plt+0x34a0>
   14fe4:	cmp	r0, #9
   14fe8:	ldreq	r4, [r6, #8]
   14fec:	b	150b0 <__assert_fail@plt+0x3560>
   14ff0:	ldr	r0, [r5, #4]
   14ff4:	cmp	r0, #0
   14ff8:	blne	13ac8 <__assert_fail@plt+0x1f78>
   14ffc:	mov	r9, #1
   15000:	cmp	r7, #4096	; 0x1000
   15004:	bne	15018 <__assert_fail@plt+0x34c8>
   15008:	ldr	r0, [r5, #48]	; 0x30
   1500c:	orr	r0, r0, #4096	; 0x1000
   15010:	str	r0, [r5, #48]	; 0x30
   15014:	mov	r9, #2
   15018:	ldr	r0, [r6, #48]	; 0x30
   1501c:	cmp	r0, #0
   15020:	bne	1509c <__assert_fail@plt+0x354c>
   15024:	ldr	r0, [r6, #24]
   15028:	ldrb	r0, [r0]
   1502c:	cmp	r0, #47	; 0x2f
   15030:	beq	1509c <__assert_fail@plt+0x354c>
   15034:	ldrb	r0, [r5, #48]	; 0x30
   15038:	tst	r0, #4
   1503c:	bne	1509c <__assert_fail@plt+0x354c>
   15040:	movw	r1, #43483	; 0xa9db
   15044:	movt	r1, #1
   15048:	mov	r0, r5
   1504c:	bl	13a98 <__assert_fail@plt+0x1f48>
   15050:	cmn	r0, #1
   15054:	ble	150bc <__assert_fail@plt+0x356c>
   15058:	mov	r8, r0
   1505c:	mov	r0, r5
   15060:	mov	r1, r9
   15064:	bl	1452c <__assert_fail@plt+0x29dc>
   15068:	str	r0, [r5, #4]
   1506c:	ldrb	r0, [r5, #49]	; 0x31
   15070:	tst	r0, #2
   15074:	bne	150c8 <__assert_fail@plt+0x3578>
   15078:	mov	r0, r8
   1507c:	bl	11a78 <fchdir@plt>
   15080:	cmp	r0, #0
   15084:	beq	150dc <__assert_fail@plt+0x358c>
   15088:	ldr	r5, [sl]
   1508c:	mov	r0, r8
   15090:	bl	11afc <close@plt>
   15094:	str	r5, [sl]
   15098:	b	150b0 <__assert_fail@plt+0x3560>
   1509c:	mov	r0, r5
   150a0:	mov	r1, r9
   150a4:	bl	1452c <__assert_fail@plt+0x29dc>
   150a8:	mov	r4, r0
   150ac:	str	r0, [r5, #4]
   150b0:	mov	r0, r4
   150b4:	sub	sp, fp, #28
   150b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150bc:	mov	r4, #0
   150c0:	str	r4, [r5, #4]
   150c4:	b	150b0 <__assert_fail@plt+0x3560>
   150c8:	mov	r0, r5
   150cc:	mov	r1, r8
   150d0:	mov	r2, #1
   150d4:	bl	14eec <__assert_fail@plt+0x339c>
   150d8:	b	150e4 <__assert_fail@plt+0x3594>
   150dc:	mov	r0, r8
   150e0:	bl	11afc <close@plt>
   150e4:	ldr	r4, [r5, #4]
   150e8:	b	150b0 <__assert_fail@plt+0x3560>
   150ec:	push	{fp, lr}
   150f0:	mov	fp, sp
   150f4:	mov	r2, r1
   150f8:	ldrd	r0, [r0, #8]
   150fc:	mov	r3, #0
   15100:	bl	1a200 <lchmod@@Base+0x3ce4>
   15104:	mov	r0, r2
   15108:	pop	{fp, pc}
   1510c:	push	{r4, r5, fp, lr}
   15110:	add	fp, sp, #8
   15114:	ldrd	r2, [r1, #8]
   15118:	ldrd	r4, [r0, #8]
   1511c:	eor	r3, r5, r3
   15120:	eor	r2, r4, r2
   15124:	orrs	r2, r2, r3
   15128:	mov	r2, #0
   1512c:	bne	1514c <__assert_fail@plt+0x35fc>
   15130:	ldrd	r2, [r1]
   15134:	ldrd	r0, [r0]
   15138:	eor	r1, r1, r3
   1513c:	eor	r0, r0, r2
   15140:	orr	r0, r0, r1
   15144:	clz	r0, r0
   15148:	lsr	r2, r0, #5
   1514c:	mov	r0, r2
   15150:	pop	{r4, r5, fp, pc}
   15154:	push	{fp, lr}
   15158:	mov	fp, sp
   1515c:	bl	152fc <__assert_fail@plt+0x37ac>
   15160:	mov	r1, r0
   15164:	mov	r0, #0
   15168:	movw	r2, #26984	; 0x6968
   1516c:	cmp	r1, r2
   15170:	ble	151a0 <__assert_fail@plt+0x3650>
   15174:	movw	r2, #26985	; 0x6969
   15178:	cmp	r1, r2
   1517c:	movwne	r2, #40864	; 0x9fa0
   15180:	cmpne	r1, r2
   15184:	beq	151b8 <__assert_fail@plt+0x3668>
   15188:	movw	r2, #16719	; 0x414f
   1518c:	movt	r2, #21318	; 0x5346
   15190:	cmp	r1, r2
   15194:	popeq	{fp, pc}
   15198:	mov	r0, #1
   1519c:	pop	{fp, pc}
   151a0:	movw	r2, #19778	; 0x4d42
   151a4:	movt	r2, #65363	; 0xff53
   151a8:	cmp	r1, r2
   151ac:	beq	151b8 <__assert_fail@plt+0x3668>
   151b0:	cmp	r1, #0
   151b4:	movne	r0, #1
   151b8:	pop	{fp, pc}
   151bc:	sub	r2, r1, #1
   151c0:	mov	r1, #0
   151c4:	cmp	r2, #11
   151c8:	bhi	151d8 <__assert_fail@plt+0x3688>
   151cc:	movw	r1, #43488	; 0xa9e0
   151d0:	movt	r1, #1
   151d4:	ldr	r1, [r1, r2, lsl #2]
   151d8:	str	r1, [r0, #16]
   151dc:	bx	lr
   151e0:	push	{fp, lr}
   151e4:	mov	fp, sp
   151e8:	bl	152fc <__assert_fail@plt+0x37ac>
   151ec:	mov	r1, r0
   151f0:	mov	r0, #0
   151f4:	movw	r2, #19778	; 0x4d42
   151f8:	movt	r2, #65363	; 0xff53
   151fc:	cmp	r1, r2
   15200:	movwne	r2, #26985	; 0x6969
   15204:	cmpne	r1, r2
   15208:	bne	15210 <__assert_fail@plt+0x36c0>
   1520c:	pop	{fp, pc}
   15210:	movw	r2, #6548	; 0x1994
   15214:	movt	r2, #258	; 0x102
   15218:	cmp	r1, r2
   1521c:	movne	r0, #1
   15220:	pop	{fp, pc}
   15224:	ldr	r2, [r0, #4]
   15228:	ldr	ip, [r0, #24]
   1522c:	cmp	r2, #0
   15230:	bne	15248 <__assert_fail@plt+0x36f8>
   15234:	b	1526c <__assert_fail@plt+0x371c>
   15238:	str	ip, [r2, #28]
   1523c:	ldr	r2, [r2, #8]
   15240:	cmp	r2, #0
   15244:	beq	1526c <__assert_fail@plt+0x371c>
   15248:	ldr	r3, [r2, #24]
   1524c:	add	r0, r2, #168	; 0xa8
   15250:	cmp	r3, r0
   15254:	beq	15238 <__assert_fail@plt+0x36e8>
   15258:	ldr	r0, [r2, #28]
   1525c:	sub	r0, r3, r0
   15260:	add	r0, ip, r0
   15264:	str	r0, [r2, #24]
   15268:	b	15238 <__assert_fail@plt+0x36e8>
   1526c:	ldr	r2, [r1, #48]	; 0x30
   15270:	cmp	r2, #0
   15274:	bxmi	lr
   15278:	b	1529c <__assert_fail@plt+0x374c>
   1527c:	str	ip, [r1, #28]
   15280:	ldr	r2, [r1, #8]
   15284:	cmp	r2, #0
   15288:	ldreq	r2, [r1, #4]
   1528c:	ldr	r0, [r2, #48]	; 0x30
   15290:	cmn	r0, #1
   15294:	mov	r1, r2
   15298:	ble	152c0 <__assert_fail@plt+0x3770>
   1529c:	ldr	r2, [r1, #24]
   152a0:	add	r0, r1, #168	; 0xa8
   152a4:	cmp	r2, r0
   152a8:	beq	1527c <__assert_fail@plt+0x372c>
   152ac:	ldr	r0, [r1, #28]
   152b0:	sub	r0, r2, r0
   152b4:	add	r0, ip, r0
   152b8:	str	r0, [r1, #24]
   152bc:	b	1527c <__assert_fail@plt+0x372c>
   152c0:	bx	lr
   152c4:	push	{r4, r5, fp, lr}
   152c8:	add	fp, sp, #8
   152cc:	ldr	r0, [r0]
   152d0:	ldrd	r2, [r0, #160]	; 0xa0
   152d4:	ldr	r0, [r1]
   152d8:	ldrd	r4, [r0, #160]	; 0xa0
   152dc:	mov	r0, #0
   152e0:	subs	r1, r4, r2
   152e4:	sbcs	r1, r5, r3
   152e8:	movwcc	r0, #1
   152ec:	subs	r1, r2, r4
   152f0:	sbcs	r1, r3, r5
   152f4:	subcc	r0, r0, #1
   152f8:	pop	{r4, r5, fp, pc}
   152fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15300:	add	fp, sp, #24
   15304:	sub	sp, sp, #96	; 0x60
   15308:	mov	r4, r0
   1530c:	ldr	r7, [r0, #44]	; 0x2c
   15310:	ldrb	r0, [r7, #49]	; 0x31
   15314:	mov	r5, #0
   15318:	tst	r0, #2
   1531c:	beq	15418 <__assert_fail@plt+0x38c8>
   15320:	mov	r9, r1
   15324:	ldr	r6, [r7, #52]	; 0x34
   15328:	cmp	r6, #0
   1532c:	bne	1536c <__assert_fail@plt+0x381c>
   15330:	movw	r0, #13084	; 0x331c
   15334:	movt	r0, #1
   15338:	str	r0, [sp]
   1533c:	mov	r8, #0
   15340:	movw	r2, #21540	; 0x5424
   15344:	movt	r2, #1
   15348:	movw	r3, #21572	; 0x5444
   1534c:	movt	r3, #1
   15350:	mov	r0, #13
   15354:	mov	r1, #0
   15358:	bl	158ec <__assert_fail@plt+0x3d9c>
   1535c:	mov	r6, r0
   15360:	str	r0, [r7, #52]	; 0x34
   15364:	cmp	r0, #0
   15368:	beq	153a4 <__assert_fail@plt+0x3854>
   1536c:	ldrd	r0, [r4, #64]	; 0x40
   15370:	str	r1, [sp, #12]
   15374:	str	r0, [sp, #8]
   15378:	add	r1, sp, #8
   1537c:	mov	r0, r6
   15380:	bl	15640 <__assert_fail@plt+0x3af0>
   15384:	cmp	r0, #0
   15388:	beq	15394 <__assert_fail@plt+0x3844>
   1538c:	ldr	r5, [r0, #8]
   15390:	b	15418 <__assert_fail@plt+0x38c8>
   15394:	mov	r8, #1
   15398:	cmp	r9, #0
   1539c:	bpl	153b0 <__assert_fail@plt+0x3860>
   153a0:	b	15418 <__assert_fail@plt+0x38c8>
   153a4:	mov	r6, #0
   153a8:	cmp	r9, #0
   153ac:	bmi	15418 <__assert_fail@plt+0x38c8>
   153b0:	add	r1, sp, #8
   153b4:	mov	r0, r9
   153b8:	bl	11730 <fstatfs64@plt>
   153bc:	cmp	r0, #0
   153c0:	bne	15418 <__assert_fail@plt+0x38c8>
   153c4:	cmp	r8, #0
   153c8:	beq	15414 <__assert_fail@plt+0x38c4>
   153cc:	mov	r0, #16
   153d0:	bl	194a4 <lchmod@@Base+0x2f88>
   153d4:	cmp	r0, #0
   153d8:	beq	15414 <__assert_fail@plt+0x38c4>
   153dc:	mov	r5, r0
   153e0:	ldrd	r0, [r4, #64]	; 0x40
   153e4:	ldr	r2, [sp, #8]
   153e8:	stm	r5, {r0, r1, r2}
   153ec:	mov	r0, r6
   153f0:	mov	r1, r5
   153f4:	bl	16188 <__assert_fail@plt+0x4638>
   153f8:	cmp	r0, #0
   153fc:	beq	1540c <__assert_fail@plt+0x38bc>
   15400:	cmp	r0, r5
   15404:	beq	15414 <__assert_fail@plt+0x38c4>
   15408:	bl	11af0 <abort@plt>
   1540c:	mov	r0, r5
   15410:	bl	1331c <__assert_fail@plt+0x17cc>
   15414:	ldr	r5, [sp, #8]
   15418:	mov	r0, r5
   1541c:	sub	sp, fp, #24
   15420:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15424:	push	{fp, lr}
   15428:	mov	fp, sp
   1542c:	mov	r2, r1
   15430:	ldrd	r0, [r0]
   15434:	mov	r3, #0
   15438:	bl	1a200 <lchmod@@Base+0x3ce4>
   1543c:	mov	r0, r2
   15440:	pop	{fp, pc}
   15444:	ldrd	r2, [r1]
   15448:	ldrd	r0, [r0]
   1544c:	eor	r1, r1, r3
   15450:	eor	r0, r0, r2
   15454:	orr	r0, r0, r1
   15458:	clz	r0, r0
   1545c:	lsr	r0, r0, #5
   15460:	bx	lr
   15464:	andeq	r0, r0, r0
   15468:	ldr	r0, [r0, #8]
   1546c:	bx	lr
   15470:	ldr	r0, [r0, #12]
   15474:	bx	lr
   15478:	ldr	r0, [r0, #16]
   1547c:	bx	lr
   15480:	mov	r2, r0
   15484:	ldm	r0, {r1, r3}
   15488:	mov	r0, #0
   1548c:	cmp	r1, r3
   15490:	bxcs	lr
   15494:	ldr	ip, [r2, #4]
   15498:	mov	r0, #0
   1549c:	b	154ac <__assert_fail@plt+0x395c>
   154a0:	add	r1, r1, #8
   154a4:	cmp	r1, ip
   154a8:	bcs	154dc <__assert_fail@plt+0x398c>
   154ac:	ldr	r2, [r1]
   154b0:	cmp	r2, #0
   154b4:	beq	154a0 <__assert_fail@plt+0x3950>
   154b8:	mov	r3, #0
   154bc:	mov	r2, r1
   154c0:	add	r3, r3, #1
   154c4:	ldr	r2, [r2, #4]
   154c8:	cmp	r2, #0
   154cc:	bne	154c0 <__assert_fail@plt+0x3970>
   154d0:	cmp	r3, r0
   154d4:	movhi	r0, r3
   154d8:	b	154a0 <__assert_fail@plt+0x3950>
   154dc:	bx	lr
   154e0:	push	{fp, lr}
   154e4:	mov	fp, sp
   154e8:	ldr	r3, [r0]
   154ec:	ldr	r1, [r0, #4]
   154f0:	mov	lr, #0
   154f4:	cmp	r3, r1
   154f8:	mov	r1, #0
   154fc:	bcs	15544 <__assert_fail@plt+0x39f4>
   15500:	ldr	ip, [r0, #4]
   15504:	mov	r1, #0
   15508:	mov	lr, #0
   1550c:	b	1551c <__assert_fail@plt+0x39cc>
   15510:	add	r3, r3, #8
   15514:	cmp	r3, ip
   15518:	bcs	15544 <__assert_fail@plt+0x39f4>
   1551c:	ldr	r2, [r3]
   15520:	cmp	r2, #0
   15524:	beq	15510 <__assert_fail@plt+0x39c0>
   15528:	mov	r2, r3
   1552c:	add	r1, r1, #1
   15530:	ldr	r2, [r2, #4]
   15534:	cmp	r2, #0
   15538:	bne	1552c <__assert_fail@plt+0x39dc>
   1553c:	add	lr, lr, #1
   15540:	b	15510 <__assert_fail@plt+0x39c0>
   15544:	ldr	r2, [r0, #12]
   15548:	cmp	lr, r2
   1554c:	bne	15564 <__assert_fail@plt+0x3a14>
   15550:	ldr	r2, [r0, #16]
   15554:	mov	r0, #1
   15558:	cmp	r1, r2
   1555c:	movne	r0, #0
   15560:	pop	{fp, pc}
   15564:	mov	r0, #0
   15568:	pop	{fp, pc}
   1556c:	nop	{0}
   15570:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15574:	add	fp, sp, #24
   15578:	sub	sp, sp, #8
   1557c:	mov	r4, r1
   15580:	mov	r5, r0
   15584:	bl	15478 <__assert_fail@plt+0x3928>
   15588:	mov	r8, r0
   1558c:	mov	r0, r5
   15590:	bl	15468 <__assert_fail@plt+0x3918>
   15594:	mov	r7, r0
   15598:	mov	r0, r5
   1559c:	bl	15470 <__assert_fail@plt+0x3920>
   155a0:	mov	r6, r0
   155a4:	mov	r0, r5
   155a8:	bl	15480 <__assert_fail@plt+0x3930>
   155ac:	mov	r5, r0
   155b0:	movw	r2, #43536	; 0xaa10
   155b4:	movt	r2, #1
   155b8:	mov	r0, r4
   155bc:	mov	r1, #1
   155c0:	mov	r3, r8
   155c4:	bl	119e8 <__fprintf_chk@plt>
   155c8:	movw	r2, #43560	; 0xaa28
   155cc:	movt	r2, #1
   155d0:	mov	r0, r4
   155d4:	mov	r1, #1
   155d8:	mov	r3, r7
   155dc:	bl	119e8 <__fprintf_chk@plt>
   155e0:	vldr	d16, [pc, #80]	; 15638 <__assert_fail@plt+0x3ae8>
   155e4:	vmov	s0, r6
   155e8:	vmov	s2, r7
   155ec:	vcvt.f64.u32	d17, s0
   155f0:	vcvt.f64.u32	d18, s2
   155f4:	vmul.f64	d16, d17, d16
   155f8:	vdiv.f64	d16, d16, d18
   155fc:	vstr	d16, [sp]
   15600:	movw	r2, #43584	; 0xaa40
   15604:	movt	r2, #1
   15608:	mov	r0, r4
   1560c:	mov	r1, #1
   15610:	mov	r3, r6
   15614:	bl	119e8 <__fprintf_chk@plt>
   15618:	movw	r2, #43617	; 0xaa61
   1561c:	movt	r2, #1
   15620:	mov	r0, r4
   15624:	mov	r1, #1
   15628:	mov	r3, r5
   1562c:	sub	sp, fp, #24
   15630:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15634:	b	119e8 <__fprintf_chk@plt>
   15638:	andeq	r0, r0, r0
   1563c:	subsmi	r0, r9, r0
   15640:	push	{r4, r5, r6, r7, fp, lr}
   15644:	add	fp, sp, #16
   15648:	mov	r5, r1
   1564c:	mov	r6, r0
   15650:	bl	156b0 <__assert_fail@plt+0x3b60>
   15654:	mov	r7, r0
   15658:	ldr	r0, [r0]
   1565c:	mov	r4, #0
   15660:	cmp	r0, #0
   15664:	beq	1569c <__assert_fail@plt+0x3b4c>
   15668:	cmp	r7, #0
   1566c:	beq	1569c <__assert_fail@plt+0x3b4c>
   15670:	ldr	r1, [r7]
   15674:	cmp	r1, r5
   15678:	beq	156a4 <__assert_fail@plt+0x3b54>
   1567c:	ldr	r2, [r6, #28]
   15680:	mov	r0, r5
   15684:	blx	r2
   15688:	cmp	r0, #0
   1568c:	bne	156a4 <__assert_fail@plt+0x3b54>
   15690:	ldr	r7, [r7, #4]
   15694:	cmp	r7, #0
   15698:	bne	15670 <__assert_fail@plt+0x3b20>
   1569c:	mov	r0, r4
   156a0:	pop	{r4, r5, r6, r7, fp, pc}
   156a4:	ldr	r4, [r7]
   156a8:	mov	r0, r4
   156ac:	pop	{r4, r5, r6, r7, fp, pc}
   156b0:	push	{r4, sl, fp, lr}
   156b4:	add	fp, sp, #8
   156b8:	mov	r2, r1
   156bc:	mov	r4, r0
   156c0:	ldr	r1, [r0, #8]
   156c4:	ldr	r3, [r0, #24]
   156c8:	mov	r0, r2
   156cc:	blx	r3
   156d0:	ldr	r1, [r4, #8]
   156d4:	cmp	r0, r1
   156d8:	ldrcc	r1, [r4]
   156dc:	addcc	r0, r1, r0, lsl #3
   156e0:	popcc	{r4, sl, fp, pc}
   156e4:	bl	11af0 <abort@plt>
   156e8:	push	{fp, lr}
   156ec:	mov	fp, sp
   156f0:	ldr	r1, [r0, #16]
   156f4:	cmp	r1, #0
   156f8:	beq	15720 <__assert_fail@plt+0x3bd0>
   156fc:	ldr	r2, [r0]
   15700:	ldr	r1, [r0, #4]
   15704:	cmp	r2, r1
   15708:	bcs	1572c <__assert_fail@plt+0x3bdc>
   1570c:	ldr	r1, [r2], #8
   15710:	cmp	r1, #0
   15714:	beq	15700 <__assert_fail@plt+0x3bb0>
   15718:	mov	r0, r1
   1571c:	pop	{fp, pc}
   15720:	mov	r1, #0
   15724:	mov	r0, r1
   15728:	pop	{fp, pc}
   1572c:	bl	11af0 <abort@plt>
   15730:	push	{r4, r5, fp, lr}
   15734:	add	fp, sp, #8
   15738:	mov	r5, r1
   1573c:	mov	r4, r0
   15740:	bl	156b0 <__assert_fail@plt+0x3b60>
   15744:	mov	r1, r0
   15748:	b	15758 <__assert_fail@plt+0x3c08>
   1574c:	ldr	r1, [r1, #4]
   15750:	cmp	r1, #0
   15754:	beq	15778 <__assert_fail@plt+0x3c28>
   15758:	ldr	r2, [r1]
   1575c:	cmp	r2, r5
   15760:	bne	1574c <__assert_fail@plt+0x3bfc>
   15764:	ldr	r2, [r1, #4]
   15768:	cmp	r2, #0
   1576c:	beq	1574c <__assert_fail@plt+0x3bfc>
   15770:	ldr	r0, [r2]
   15774:	pop	{r4, r5, fp, pc}
   15778:	add	r1, r0, #8
   1577c:	ldr	r2, [r4, #4]
   15780:	cmp	r1, r2
   15784:	bcs	15798 <__assert_fail@plt+0x3c48>
   15788:	ldr	r0, [r1], #8
   1578c:	cmp	r0, #0
   15790:	beq	15780 <__assert_fail@plt+0x3c30>
   15794:	pop	{r4, r5, fp, pc}
   15798:	mov	r0, #0
   1579c:	pop	{r4, r5, fp, pc}
   157a0:	push	{r4, sl, fp, lr}
   157a4:	add	fp, sp, #8
   157a8:	mov	ip, r0
   157ac:	ldr	lr, [r0]
   157b0:	ldr	r3, [r0, #4]
   157b4:	mov	r0, #0
   157b8:	cmp	lr, r3
   157bc:	popcs	{r4, sl, fp, pc}
   157c0:	mov	r0, #0
   157c4:	b	157d8 <__assert_fail@plt+0x3c88>
   157c8:	ldr	r3, [ip, #4]
   157cc:	add	lr, lr, #8
   157d0:	cmp	lr, r3
   157d4:	bcs	15810 <__assert_fail@plt+0x3cc0>
   157d8:	ldr	r3, [lr]
   157dc:	cmp	r3, #0
   157e0:	cmpne	lr, #0
   157e4:	beq	157c8 <__assert_fail@plt+0x3c78>
   157e8:	mov	r3, lr
   157ec:	cmp	r0, r2
   157f0:	bcs	15810 <__assert_fail@plt+0x3cc0>
   157f4:	ldr	r4, [r3]
   157f8:	str	r4, [r1, r0, lsl #2]
   157fc:	add	r0, r0, #1
   15800:	ldr	r3, [r3, #4]
   15804:	cmp	r3, #0
   15808:	bne	157ec <__assert_fail@plt+0x3c9c>
   1580c:	b	157c8 <__assert_fail@plt+0x3c78>
   15810:	pop	{r4, sl, fp, pc}
   15814:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15818:	add	fp, sp, #24
   1581c:	mov	r8, r0
   15820:	ldr	r9, [r0]
   15824:	ldr	r0, [r0, #4]
   15828:	mov	r6, #0
   1582c:	cmp	r9, r0
   15830:	bcs	15890 <__assert_fail@plt+0x3d40>
   15834:	mov	r4, r2
   15838:	mov	r5, r1
   1583c:	mov	r6, #0
   15840:	b	15854 <__assert_fail@plt+0x3d04>
   15844:	ldr	r0, [r8, #4]
   15848:	add	r9, r9, #8
   1584c:	cmp	r9, r0
   15850:	bcs	15890 <__assert_fail@plt+0x3d40>
   15854:	ldr	r0, [r9]
   15858:	cmp	r0, #0
   1585c:	cmpne	r9, #0
   15860:	beq	15844 <__assert_fail@plt+0x3cf4>
   15864:	mov	r7, r9
   15868:	ldr	r0, [r7]
   1586c:	mov	r1, r4
   15870:	blx	r5
   15874:	cmp	r0, #0
   15878:	beq	15890 <__assert_fail@plt+0x3d40>
   1587c:	add	r6, r6, #1
   15880:	ldr	r7, [r7, #4]
   15884:	cmp	r7, #0
   15888:	bne	15868 <__assert_fail@plt+0x3d18>
   1588c:	b	15844 <__assert_fail@plt+0x3cf4>
   15890:	mov	r0, r6
   15894:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15898:	ldrb	r2, [r0]
   1589c:	cmp	r2, #0
   158a0:	moveq	r0, #0
   158a4:	bxeq	lr
   158a8:	add	r3, r0, #1
   158ac:	mov	r0, #0
   158b0:	rsb	r0, r0, r0, lsl #5
   158b4:	uxtab	r0, r0, r2
   158b8:	udiv	r2, r0, r1
   158bc:	mls	r0, r2, r1, r0
   158c0:	ldrb	r2, [r3], #1
   158c4:	cmp	r2, #0
   158c8:	bne	158b0 <__assert_fail@plt+0x3d60>
   158cc:	bx	lr
   158d0:	movw	r1, #43648	; 0xaa80
   158d4:	movt	r1, #1
   158d8:	vld1.32	{d16-d17}, [r1]!
   158dc:	vst1.32	{d16-d17}, [r0]!
   158e0:	ldr	r1, [r1]
   158e4:	str	r1, [r0]
   158e8:	bx	lr
   158ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158f0:	add	fp, sp, #28
   158f4:	sub	sp, sp, #4
   158f8:	mov	r7, r1
   158fc:	mov	r8, r0
   15900:	movw	sl, #23020	; 0x59ec
   15904:	movt	sl, #1
   15908:	cmp	r3, #0
   1590c:	movne	sl, r3
   15910:	movw	r5, #22988	; 0x59cc
   15914:	movt	r5, #1
   15918:	cmp	r2, #0
   1591c:	movne	r5, r2
   15920:	mov	r0, #40	; 0x28
   15924:	bl	194a4 <lchmod@@Base+0x2f88>
   15928:	mov	r9, #0
   1592c:	cmp	r0, #0
   15930:	beq	159c0 <__assert_fail@plt+0x3e70>
   15934:	mov	r4, r0
   15938:	movw	r6, #43648	; 0xaa80
   1593c:	movt	r6, #1
   15940:	cmp	r7, #0
   15944:	movne	r6, r7
   15948:	str	r6, [r0, #20]
   1594c:	bl	159fc <__assert_fail@plt+0x3eac>
   15950:	cmp	r0, #0
   15954:	beq	159b8 <__assert_fail@plt+0x3e68>
   15958:	mov	r0, r8
   1595c:	mov	r1, r6
   15960:	bl	15aa8 <__assert_fail@plt+0x3f58>
   15964:	str	r0, [r4, #8]
   15968:	cmp	r0, #0
   1596c:	beq	159b8 <__assert_fail@plt+0x3e68>
   15970:	mov	r1, #8
   15974:	bl	19450 <lchmod@@Base+0x2f34>
   15978:	str	r0, [r4]
   1597c:	cmp	r0, #0
   15980:	beq	159b8 <__assert_fail@plt+0x3e68>
   15984:	ldr	r1, [fp, #8]
   15988:	mov	r2, #0
   1598c:	str	r5, [r4, #24]
   15990:	str	sl, [r4, #28]
   15994:	str	r1, [r4, #32]
   15998:	str	r2, [r4, #36]	; 0x24
   1599c:	str	r2, [r4, #12]
   159a0:	str	r2, [r4, #16]
   159a4:	ldr	r1, [r4, #8]
   159a8:	add	r0, r0, r1, lsl #3
   159ac:	str	r0, [r4, #4]
   159b0:	mov	r9, r4
   159b4:	b	159c0 <__assert_fail@plt+0x3e70>
   159b8:	mov	r0, r4
   159bc:	bl	1331c <__assert_fail@plt+0x17cc>
   159c0:	mov	r0, r9
   159c4:	sub	sp, fp, #28
   159c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159cc:	push	{r4, sl, fp, lr}
   159d0:	add	fp, sp, #8
   159d4:	mov	r4, r1
   159d8:	mov	r1, #3
   159dc:	bl	1967c <lchmod@@Base+0x3160>
   159e0:	udiv	r1, r0, r4
   159e4:	mls	r0, r1, r4, r0
   159e8:	pop	{r4, sl, fp, pc}
   159ec:	sub	r0, r0, r1
   159f0:	clz	r0, r0
   159f4:	lsr	r0, r0, #5
   159f8:	bx	lr
   159fc:	mov	r1, r0
   15a00:	ldr	r3, [r0, #20]
   15a04:	mov	r0, #1
   15a08:	movw	r2, #43648	; 0xaa80
   15a0c:	movt	r2, #1
   15a10:	cmp	r3, r2
   15a14:	beq	15a98 <__assert_fail@plt+0x3f48>
   15a18:	vldr	s2, [pc, #124]	; 15a9c <__assert_fail@plt+0x3f4c>
   15a1c:	vldr	s0, [r3, #8]
   15a20:	vcmpe.f32	s0, s2
   15a24:	vmrs	APSR_nzcv, fpscr
   15a28:	ble	15a90 <__assert_fail@plt+0x3f40>
   15a2c:	vldr	s4, [pc, #108]	; 15aa0 <__assert_fail@plt+0x3f50>
   15a30:	vcmpe.f32	s0, s4
   15a34:	vmrs	APSR_nzcv, fpscr
   15a38:	bpl	15a90 <__assert_fail@plt+0x3f40>
   15a3c:	vldr	s4, [pc, #96]	; 15aa4 <__assert_fail@plt+0x3f54>
   15a40:	vldr	s6, [r3, #12]
   15a44:	vcmpe.f32	s6, s4
   15a48:	vmrs	APSR_nzcv, fpscr
   15a4c:	ble	15a90 <__assert_fail@plt+0x3f40>
   15a50:	vldr	s4, [r3]
   15a54:	vcmpe.f32	s4, #0.0
   15a58:	vmrs	APSR_nzcv, fpscr
   15a5c:	blt	15a90 <__assert_fail@plt+0x3f40>
   15a60:	vadd.f32	s2, s4, s2
   15a64:	vcmpe.f32	s2, s0
   15a68:	vmrs	APSR_nzcv, fpscr
   15a6c:	bpl	15a90 <__assert_fail@plt+0x3f40>
   15a70:	vldr	s0, [r3, #4]
   15a74:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15a78:	vcmpe.f32	s0, s4
   15a7c:	vmrs	APSR_nzcv, fpscr
   15a80:	bhi	15a90 <__assert_fail@plt+0x3f40>
   15a84:	vcmpe.f32	s2, s0
   15a88:	vmrs	APSR_nzcv, fpscr
   15a8c:	bxmi	lr
   15a90:	str	r2, [r1, #20]
   15a94:	mov	r0, #0
   15a98:	bx	lr
   15a9c:	stclcc	12, cr12, [ip, #820]	; 0x334
   15aa0:	svccc	0x00666666
   15aa4:	svccc	0x008ccccd
   15aa8:	push	{fp, lr}
   15aac:	mov	fp, sp
   15ab0:	ldrb	r2, [r1, #16]
   15ab4:	cmp	r2, #0
   15ab8:	bne	15ae8 <__assert_fail@plt+0x3f98>
   15abc:	vldr	s0, [r1, #8]
   15ac0:	vmov	s2, r0
   15ac4:	vcvt.f32.u32	s2, s2
   15ac8:	vdiv.f32	s2, s2, s0
   15acc:	vcvt.u32.f32	s0, s2
   15ad0:	vldr	s4, [pc, #32]	; 15af8 <__assert_fail@plt+0x3fa8>
   15ad4:	mov	r0, #0
   15ad8:	vcmpe.f32	s2, s4
   15adc:	vmrs	APSR_nzcv, fpscr
   15ae0:	popge	{fp, pc}
   15ae4:	vmov	r0, s0
   15ae8:	bl	162dc <__assert_fail@plt+0x478c>
   15aec:	cmn	r0, #-536870911	; 0xe0000001
   15af0:	movwhi	r0, #0
   15af4:	pop	{fp, pc}
   15af8:	svcmi	0x00800000
   15afc:	push	{r4, r5, r6, r7, fp, lr}
   15b00:	add	fp, sp, #16
   15b04:	mov	r4, r0
   15b08:	ldr	r5, [r0]
   15b0c:	ldr	r0, [r0, #4]
   15b10:	cmp	r5, r0
   15b14:	bcs	15bb8 <__assert_fail@plt+0x4068>
   15b18:	mov	r6, #0
   15b1c:	b	15b38 <__assert_fail@plt+0x3fe8>
   15b20:	str	r6, [r5]
   15b24:	str	r6, [r5, #4]
   15b28:	ldr	r0, [r4, #4]
   15b2c:	add	r5, r5, #8
   15b30:	cmp	r5, r0
   15b34:	bcs	15bb8 <__assert_fail@plt+0x4068>
   15b38:	ldr	r0, [r5]
   15b3c:	cmp	r0, #0
   15b40:	beq	15b28 <__assert_fail@plt+0x3fd8>
   15b44:	ldr	r7, [r5, #4]
   15b48:	ldr	r1, [r4, #32]
   15b4c:	cmp	r1, #0
   15b50:	mov	r0, r1
   15b54:	movwne	r0, #1
   15b58:	cmp	r7, #0
   15b5c:	bne	15ba4 <__assert_fail@plt+0x4054>
   15b60:	cmp	r0, #0
   15b64:	beq	15b20 <__assert_fail@plt+0x3fd0>
   15b68:	ldr	r0, [r5]
   15b6c:	blx	r1
   15b70:	b	15b20 <__assert_fail@plt+0x3fd0>
   15b74:	str	r6, [r7]
   15b78:	ldr	r2, [r7, #4]
   15b7c:	ldr	r0, [r4, #36]	; 0x24
   15b80:	str	r0, [r7, #4]
   15b84:	str	r7, [r4, #36]	; 0x24
   15b88:	ldr	r1, [r4, #32]
   15b8c:	cmp	r1, #0
   15b90:	mov	r0, r1
   15b94:	movwne	r0, #1
   15b98:	cmp	r2, #0
   15b9c:	mov	r7, r2
   15ba0:	beq	15b60 <__assert_fail@plt+0x4010>
   15ba4:	tst	r0, #1
   15ba8:	beq	15b74 <__assert_fail@plt+0x4024>
   15bac:	ldr	r0, [r7]
   15bb0:	blx	r1
   15bb4:	b	15b74 <__assert_fail@plt+0x4024>
   15bb8:	mov	r0, #0
   15bbc:	str	r0, [r4, #12]
   15bc0:	str	r0, [r4, #16]
   15bc4:	pop	{r4, r5, r6, r7, fp, pc}
   15bc8:	push	{r4, r5, r6, sl, fp, lr}
   15bcc:	add	fp, sp, #16
   15bd0:	mov	r4, r0
   15bd4:	ldr	r0, [r0, #32]
   15bd8:	cmp	r0, #0
   15bdc:	beq	15c40 <__assert_fail@plt+0x40f0>
   15be0:	ldr	r0, [r4, #16]
   15be4:	cmp	r0, #0
   15be8:	beq	15c40 <__assert_fail@plt+0x40f0>
   15bec:	ldr	r5, [r4]
   15bf0:	ldr	r0, [r4, #4]
   15bf4:	cmp	r5, r0
   15bf8:	bcc	15c10 <__assert_fail@plt+0x40c0>
   15bfc:	b	15c40 <__assert_fail@plt+0x40f0>
   15c00:	ldr	r0, [r4, #4]
   15c04:	add	r5, r5, #8
   15c08:	cmp	r5, r0
   15c0c:	bcs	15c40 <__assert_fail@plt+0x40f0>
   15c10:	ldr	r0, [r5]
   15c14:	cmp	r0, #0
   15c18:	cmpne	r5, #0
   15c1c:	beq	15c00 <__assert_fail@plt+0x40b0>
   15c20:	mov	r6, r5
   15c24:	ldr	r0, [r6]
   15c28:	ldr	r1, [r4, #32]
   15c2c:	blx	r1
   15c30:	ldr	r6, [r6, #4]
   15c34:	cmp	r6, #0
   15c38:	bne	15c24 <__assert_fail@plt+0x40d4>
   15c3c:	b	15c00 <__assert_fail@plt+0x40b0>
   15c40:	ldr	r5, [r4]
   15c44:	ldr	r0, [r4, #4]
   15c48:	cmp	r5, r0
   15c4c:	bcc	15c64 <__assert_fail@plt+0x4114>
   15c50:	b	15c88 <__assert_fail@plt+0x4138>
   15c54:	ldr	r0, [r4, #4]
   15c58:	add	r5, r5, #8
   15c5c:	cmp	r5, r0
   15c60:	bcs	15c88 <__assert_fail@plt+0x4138>
   15c64:	ldr	r0, [r5, #4]
   15c68:	cmp	r0, #0
   15c6c:	beq	15c54 <__assert_fail@plt+0x4104>
   15c70:	ldr	r6, [r0, #4]
   15c74:	bl	1331c <__assert_fail@plt+0x17cc>
   15c78:	cmp	r6, #0
   15c7c:	mov	r0, r6
   15c80:	bne	15c70 <__assert_fail@plt+0x4120>
   15c84:	b	15c54 <__assert_fail@plt+0x4104>
   15c88:	ldr	r0, [r4, #36]	; 0x24
   15c8c:	cmp	r0, #0
   15c90:	beq	15ca8 <__assert_fail@plt+0x4158>
   15c94:	ldr	r5, [r0, #4]
   15c98:	bl	1331c <__assert_fail@plt+0x17cc>
   15c9c:	cmp	r5, #0
   15ca0:	mov	r0, r5
   15ca4:	bne	15c94 <__assert_fail@plt+0x4144>
   15ca8:	ldr	r0, [r4]
   15cac:	bl	1331c <__assert_fail@plt+0x17cc>
   15cb0:	mov	r0, r4
   15cb4:	pop	{r4, r5, r6, sl, fp, lr}
   15cb8:	b	1331c <__assert_fail@plt+0x17cc>
   15cbc:	push	{r4, r5, r6, sl, fp, lr}
   15cc0:	add	fp, sp, #16
   15cc4:	sub	sp, sp, #40	; 0x28
   15cc8:	mov	r2, r1
   15ccc:	mov	r4, r0
   15cd0:	ldr	r1, [r0, #20]
   15cd4:	mov	r0, r2
   15cd8:	bl	15aa8 <__assert_fail@plt+0x3f58>
   15cdc:	mov	r5, #0
   15ce0:	cmp	r0, #0
   15ce4:	beq	15dc0 <__assert_fail@plt+0x4270>
   15ce8:	mov	r6, r0
   15cec:	ldr	r0, [r4, #8]
   15cf0:	cmp	r6, r0
   15cf4:	bne	15d00 <__assert_fail@plt+0x41b0>
   15cf8:	mov	r5, #1
   15cfc:	b	15dc0 <__assert_fail@plt+0x4270>
   15d00:	mov	r0, r6
   15d04:	mov	r1, #8
   15d08:	bl	19450 <lchmod@@Base+0x2f34>
   15d0c:	str	r0, [sp]
   15d10:	cmp	r0, #0
   15d14:	beq	15dc0 <__assert_fail@plt+0x4270>
   15d18:	mov	r0, #0
   15d1c:	str	r0, [sp, #16]
   15d20:	str	r0, [sp, #12]
   15d24:	str	r6, [sp, #8]
   15d28:	ldr	r0, [sp]
   15d2c:	add	r0, r0, r6, lsl #3
   15d30:	str	r0, [sp, #4]
   15d34:	add	r6, r4, #20
   15d38:	ldm	r6, {r0, r1, r2, r3, r6}
   15d3c:	add	ip, sp, #20
   15d40:	stm	ip, {r0, r1, r2, r3, r6}
   15d44:	mov	r0, sp
   15d48:	mov	r1, r4
   15d4c:	mov	r2, #0
   15d50:	bl	15dd0 <__assert_fail@plt+0x4280>
   15d54:	cmp	r0, #0
   15d58:	beq	15d7c <__assert_fail@plt+0x422c>
   15d5c:	ldr	r0, [r4]
   15d60:	bl	1331c <__assert_fail@plt+0x17cc>
   15d64:	ldm	sp, {r0, r1, r2, r3}
   15d68:	stm	r4, {r0, r1, r2, r3}
   15d6c:	ldr	r0, [sp, #36]	; 0x24
   15d70:	str	r0, [r4, #36]	; 0x24
   15d74:	mov	r5, #1
   15d78:	b	15dc0 <__assert_fail@plt+0x4270>
   15d7c:	ldr	r0, [sp, #36]	; 0x24
   15d80:	str	r0, [r4, #36]	; 0x24
   15d84:	mov	r1, sp
   15d88:	mov	r0, r4
   15d8c:	mov	r2, #1
   15d90:	bl	15dd0 <__assert_fail@plt+0x4280>
   15d94:	cmp	r0, #0
   15d98:	beq	15dcc <__assert_fail@plt+0x427c>
   15d9c:	mov	r1, sp
   15da0:	mov	r5, #0
   15da4:	mov	r0, r4
   15da8:	mov	r2, #0
   15dac:	bl	15dd0 <__assert_fail@plt+0x4280>
   15db0:	cmp	r0, #0
   15db4:	beq	15dcc <__assert_fail@plt+0x427c>
   15db8:	ldr	r0, [sp]
   15dbc:	bl	1331c <__assert_fail@plt+0x17cc>
   15dc0:	mov	r0, r5
   15dc4:	sub	sp, fp, #16
   15dc8:	pop	{r4, r5, r6, sl, fp, pc}
   15dcc:	bl	11af0 <abort@plt>
   15dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dd4:	add	fp, sp, #28
   15dd8:	sub	sp, sp, #4
   15ddc:	mov	r7, r0
   15de0:	ldr	r6, [r1]
   15de4:	ldr	r0, [r1, #4]
   15de8:	cmp	r6, r0
   15dec:	bcs	15ef8 <__assert_fail@plt+0x43a8>
   15df0:	mov	r9, r2
   15df4:	mov	sl, r1
   15df8:	b	15e30 <__assert_fail@plt+0x42e0>
   15dfc:	str	r4, [r5]
   15e00:	ldr	r0, [r7, #12]
   15e04:	add	r0, r0, #1
   15e08:	str	r0, [r7, #12]
   15e0c:	mov	r0, #0
   15e10:	str	r0, [r6]
   15e14:	ldr	r0, [sl, #12]
   15e18:	sub	r0, r0, #1
   15e1c:	str	r0, [sl, #12]
   15e20:	add	r6, r6, #8
   15e24:	ldr	r0, [sl, #4]
   15e28:	cmp	r6, r0
   15e2c:	bcs	15ef8 <__assert_fail@plt+0x43a8>
   15e30:	ldr	r0, [r6]
   15e34:	cmp	r0, #0
   15e38:	beq	15e20 <__assert_fail@plt+0x42d0>
   15e3c:	ldr	r4, [r6, #4]
   15e40:	cmp	r4, #0
   15e44:	bne	15e74 <__assert_fail@plt+0x4324>
   15e48:	b	15ea4 <__assert_fail@plt+0x4354>
   15e4c:	str	r5, [r0]
   15e50:	ldr	r0, [r7, #12]
   15e54:	add	r0, r0, #1
   15e58:	str	r0, [r7, #12]
   15e5c:	mov	r0, r7
   15e60:	mov	r1, r4
   15e64:	bl	1637c <__assert_fail@plt+0x482c>
   15e68:	cmp	r8, #0
   15e6c:	mov	r4, r8
   15e70:	beq	15ea4 <__assert_fail@plt+0x4354>
   15e74:	ldr	r5, [r4]
   15e78:	mov	r0, r7
   15e7c:	mov	r1, r5
   15e80:	bl	156b0 <__assert_fail@plt+0x3b60>
   15e84:	ldr	r1, [r0]
   15e88:	ldr	r8, [r4, #4]
   15e8c:	cmp	r1, #0
   15e90:	beq	15e4c <__assert_fail@plt+0x42fc>
   15e94:	ldr	r1, [r0, #4]
   15e98:	str	r1, [r4, #4]
   15e9c:	str	r4, [r0, #4]
   15ea0:	b	15e68 <__assert_fail@plt+0x4318>
   15ea4:	mov	r0, #0
   15ea8:	str	r0, [r6, #4]
   15eac:	cmp	r9, #0
   15eb0:	bne	15e20 <__assert_fail@plt+0x42d0>
   15eb4:	ldr	r4, [r6]
   15eb8:	mov	r0, r7
   15ebc:	mov	r1, r4
   15ec0:	bl	156b0 <__assert_fail@plt+0x3b60>
   15ec4:	mov	r5, r0
   15ec8:	ldr	r0, [r0]
   15ecc:	cmp	r0, #0
   15ed0:	beq	15dfc <__assert_fail@plt+0x42ac>
   15ed4:	mov	r0, r7
   15ed8:	bl	16168 <__assert_fail@plt+0x4618>
   15edc:	cmp	r0, #0
   15ee0:	beq	15f04 <__assert_fail@plt+0x43b4>
   15ee4:	str	r4, [r0]
   15ee8:	ldr	r1, [r5, #4]
   15eec:	str	r1, [r0, #4]
   15ef0:	str	r0, [r5, #4]
   15ef4:	b	15e0c <__assert_fail@plt+0x42bc>
   15ef8:	mov	r0, #1
   15efc:	sub	sp, fp, #28
   15f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f04:	mov	r0, #0
   15f08:	sub	sp, fp, #28
   15f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f10:	push	{r4, r5, r6, r7, fp, lr}
   15f14:	add	fp, sp, #16
   15f18:	sub	sp, sp, #8
   15f1c:	cmp	r1, #0
   15f20:	beq	16080 <__assert_fail@plt+0x4530>
   15f24:	mov	r7, r2
   15f28:	mov	r5, r1
   15f2c:	mov	r4, r0
   15f30:	add	r2, sp, #4
   15f34:	mov	r6, #0
   15f38:	mov	r3, #0
   15f3c:	bl	16088 <__assert_fail@plt+0x4538>
   15f40:	cmp	r0, #0
   15f44:	beq	15f54 <__assert_fail@plt+0x4404>
   15f48:	cmp	r7, #0
   15f4c:	strne	r0, [r7]
   15f50:	b	16074 <__assert_fail@plt+0x4524>
   15f54:	vldr	s0, [r4, #8]
   15f58:	vldr	s2, [r4, #12]
   15f5c:	ldr	r0, [r4, #20]
   15f60:	vldr	s4, [r0, #8]
   15f64:	vcvt.f32.u32	s0, s0
   15f68:	vcvt.f32.u32	s2, s2
   15f6c:	vmul.f32	s0, s4, s0
   15f70:	vcmpe.f32	s0, s2
   15f74:	vmrs	APSR_nzcv, fpscr
   15f78:	bpl	1600c <__assert_fail@plt+0x44bc>
   15f7c:	mov	r0, r4
   15f80:	bl	159fc <__assert_fail@plt+0x3eac>
   15f84:	vldr	s0, [r4, #8]
   15f88:	vldr	s4, [r4, #12]
   15f8c:	ldr	r0, [r4, #20]
   15f90:	vcvt.f32.u32	s2, s0
   15f94:	vldr	s0, [r0, #8]
   15f98:	vcvt.f32.u32	s4, s4
   15f9c:	vmul.f32	s6, s0, s2
   15fa0:	vcmpe.f32	s6, s4
   15fa4:	vmrs	APSR_nzcv, fpscr
   15fa8:	bpl	1600c <__assert_fail@plt+0x44bc>
   15fac:	vldr	s4, [r0, #12]
   15fb0:	vmul.f32	s2, s4, s2
   15fb4:	ldrb	r0, [r0, #16]
   15fb8:	vmul.f32	s0, s0, s2
   15fbc:	mvn	r6, #0
   15fc0:	vldr	s4, [pc, #188]	; 16084 <__assert_fail@plt+0x4534>
   15fc4:	cmp	r0, #0
   15fc8:	vseleq.f32	s0, s0, s2
   15fcc:	vcmpe.f32	s0, s4
   15fd0:	vmrs	APSR_nzcv, fpscr
   15fd4:	bge	16074 <__assert_fail@plt+0x4524>
   15fd8:	vcvt.u32.f32	s0, s0
   15fdc:	vmov	r1, s0
   15fe0:	mov	r0, r4
   15fe4:	bl	15cbc <__assert_fail@plt+0x416c>
   15fe8:	cmp	r0, #0
   15fec:	beq	16074 <__assert_fail@plt+0x4524>
   15ff0:	add	r2, sp, #4
   15ff4:	mov	r0, r4
   15ff8:	mov	r1, r5
   15ffc:	mov	r3, #0
   16000:	bl	16088 <__assert_fail@plt+0x4538>
   16004:	cmp	r0, #0
   16008:	bne	16080 <__assert_fail@plt+0x4530>
   1600c:	ldr	r6, [sp, #4]
   16010:	ldr	r0, [r6]
   16014:	cmp	r0, #0
   16018:	beq	1604c <__assert_fail@plt+0x44fc>
   1601c:	mov	r0, r4
   16020:	bl	16168 <__assert_fail@plt+0x4618>
   16024:	cmp	r0, #0
   16028:	beq	16070 <__assert_fail@plt+0x4520>
   1602c:	str	r5, [r0]
   16030:	ldr	r1, [r6, #4]
   16034:	str	r1, [r0, #4]
   16038:	str	r0, [r6, #4]
   1603c:	ldr	r0, [r4, #16]
   16040:	add	r0, r0, #1
   16044:	str	r0, [r4, #16]
   16048:	b	16068 <__assert_fail@plt+0x4518>
   1604c:	str	r5, [r6]
   16050:	ldr	r0, [r4, #12]
   16054:	ldr	r1, [r4, #16]
   16058:	add	r1, r1, #1
   1605c:	add	r0, r0, #1
   16060:	str	r0, [r4, #12]
   16064:	str	r1, [r4, #16]
   16068:	mov	r6, #1
   1606c:	b	16074 <__assert_fail@plt+0x4524>
   16070:	mvn	r6, #0
   16074:	mov	r0, r6
   16078:	sub	sp, fp, #16
   1607c:	pop	{r4, r5, r6, r7, fp, pc}
   16080:	bl	11af0 <abort@plt>
   16084:	svcmi	0x00800000
   16088:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1608c:	add	fp, sp, #24
   16090:	mov	r8, r3
   16094:	mov	r4, r2
   16098:	mov	r7, r1
   1609c:	mov	r5, r0
   160a0:	bl	156b0 <__assert_fail@plt+0x3b60>
   160a4:	str	r0, [r4]
   160a8:	ldr	r1, [r0]
   160ac:	mov	r4, #0
   160b0:	cmp	r1, #0
   160b4:	beq	16160 <__assert_fail@plt+0x4610>
   160b8:	mov	r6, r0
   160bc:	cmp	r1, r7
   160c0:	beq	160d8 <__assert_fail@plt+0x4588>
   160c4:	ldr	r2, [r5, #28]
   160c8:	mov	r0, r7
   160cc:	blx	r2
   160d0:	cmp	r0, #0
   160d4:	beq	160fc <__assert_fail@plt+0x45ac>
   160d8:	ldr	r4, [r6]
   160dc:	cmp	r8, #0
   160e0:	beq	16160 <__assert_fail@plt+0x4610>
   160e4:	ldr	r1, [r6, #4]
   160e8:	cmp	r1, #0
   160ec:	beq	16158 <__assert_fail@plt+0x4608>
   160f0:	ldm	r1, {r0, r2}
   160f4:	stm	r6, {r0, r2}
   160f8:	b	16148 <__assert_fail@plt+0x45f8>
   160fc:	ldr	r0, [r6, #4]!
   16100:	cmp	r0, #0
   16104:	beq	16160 <__assert_fail@plt+0x4610>
   16108:	ldr	r1, [r0]
   1610c:	cmp	r1, r7
   16110:	beq	16130 <__assert_fail@plt+0x45e0>
   16114:	ldr	r2, [r5, #28]
   16118:	mov	r0, r7
   1611c:	blx	r2
   16120:	cmp	r0, #0
   16124:	bne	16130 <__assert_fail@plt+0x45e0>
   16128:	ldr	r6, [r6]
   1612c:	b	160fc <__assert_fail@plt+0x45ac>
   16130:	ldr	r1, [r6]
   16134:	ldr	r4, [r1]
   16138:	cmp	r8, #0
   1613c:	beq	16160 <__assert_fail@plt+0x4610>
   16140:	ldr	r0, [r1, #4]
   16144:	str	r0, [r6]
   16148:	mov	r0, r5
   1614c:	bl	1637c <__assert_fail@plt+0x482c>
   16150:	mov	r0, r4
   16154:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16158:	mov	r0, #0
   1615c:	str	r0, [r6]
   16160:	mov	r0, r4
   16164:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16168:	mov	r1, r0
   1616c:	ldr	r0, [r0, #36]	; 0x24
   16170:	cmp	r0, #0
   16174:	ldrne	r2, [r0, #4]
   16178:	strne	r2, [r1, #36]	; 0x24
   1617c:	bxne	lr
   16180:	mov	r0, #8
   16184:	b	194a4 <lchmod@@Base+0x2f88>
   16188:	push	{r4, sl, fp, lr}
   1618c:	add	fp, sp, #8
   16190:	sub	sp, sp, #8
   16194:	mov	r4, r1
   16198:	add	r2, sp, #4
   1619c:	bl	15f10 <__assert_fail@plt+0x43c0>
   161a0:	cmn	r0, #1
   161a4:	beq	161b8 <__assert_fail@plt+0x4668>
   161a8:	ldr	r1, [sp, #4]
   161ac:	cmp	r0, #0
   161b0:	moveq	r4, r1
   161b4:	b	161bc <__assert_fail@plt+0x466c>
   161b8:	mov	r4, #0
   161bc:	mov	r0, r4
   161c0:	sub	sp, fp, #8
   161c4:	pop	{r4, sl, fp, pc}
   161c8:	push	{r4, r5, r6, sl, fp, lr}
   161cc:	add	fp, sp, #16
   161d0:	sub	sp, sp, #8
   161d4:	mov	r4, r0
   161d8:	add	r2, sp, #4
   161dc:	mov	r3, #1
   161e0:	bl	16088 <__assert_fail@plt+0x4538>
   161e4:	mov	r5, r0
   161e8:	cmp	r0, #0
   161ec:	beq	162cc <__assert_fail@plt+0x477c>
   161f0:	ldr	r0, [r4, #16]
   161f4:	sub	r0, r0, #1
   161f8:	str	r0, [r4, #16]
   161fc:	ldr	r0, [sp, #4]
   16200:	ldr	r0, [r0]
   16204:	cmp	r0, #0
   16208:	bne	162cc <__assert_fail@plt+0x477c>
   1620c:	ldr	r0, [r4, #12]
   16210:	sub	r0, r0, #1
   16214:	vldr	s0, [r4, #8]
   16218:	str	r0, [r4, #12]
   1621c:	ldr	r1, [r4, #20]
   16220:	vldr	s2, [r1]
   16224:	vcvt.f32.u32	s0, s0
   16228:	vmov	s4, r0
   1622c:	vcvt.f32.u32	s4, s4
   16230:	vmul.f32	s0, s2, s0
   16234:	vcmpe.f32	s0, s4
   16238:	vmrs	APSR_nzcv, fpscr
   1623c:	ble	162cc <__assert_fail@plt+0x477c>
   16240:	mov	r0, r4
   16244:	bl	159fc <__assert_fail@plt+0x3eac>
   16248:	vldr	s0, [r4, #8]
   1624c:	vldr	s2, [r4, #12]
   16250:	ldr	r0, [r4, #20]
   16254:	vcvt.f32.u32	s0, s0
   16258:	vldr	s4, [r0]
   1625c:	vcvt.f32.u32	s2, s2
   16260:	vmul.f32	s4, s4, s0
   16264:	vcmpe.f32	s4, s2
   16268:	vmrs	APSR_nzcv, fpscr
   1626c:	ble	162cc <__assert_fail@plt+0x477c>
   16270:	vldr	s2, [r0, #4]
   16274:	ldrb	r1, [r0, #16]
   16278:	vmul.f32	s0, s2, s0
   1627c:	cmp	r1, #0
   16280:	bne	1628c <__assert_fail@plt+0x473c>
   16284:	vldr	s2, [r0, #8]
   16288:	vmul.f32	s0, s0, s2
   1628c:	vcvt.u32.f32	s0, s0
   16290:	vmov	r1, s0
   16294:	mov	r0, r4
   16298:	bl	15cbc <__assert_fail@plt+0x416c>
   1629c:	cmp	r0, #0
   162a0:	bne	162cc <__assert_fail@plt+0x477c>
   162a4:	ldr	r0, [r4, #36]	; 0x24
   162a8:	cmp	r0, #0
   162ac:	beq	162c4 <__assert_fail@plt+0x4774>
   162b0:	ldr	r6, [r0, #4]
   162b4:	bl	1331c <__assert_fail@plt+0x17cc>
   162b8:	cmp	r6, #0
   162bc:	mov	r0, r6
   162c0:	bne	162b0 <__assert_fail@plt+0x4760>
   162c4:	mov	r0, #0
   162c8:	str	r0, [r4, #36]	; 0x24
   162cc:	mov	r0, r5
   162d0:	sub	sp, fp, #16
   162d4:	pop	{r4, r5, r6, sl, fp, pc}
   162d8:	b	161c8 <__assert_fail@plt+0x4678>
   162dc:	push	{r4, r5, fp, lr}
   162e0:	add	fp, sp, #8
   162e4:	cmp	r0, #10
   162e8:	movls	r0, #10
   162ec:	orr	r5, r0, #1
   162f0:	mvn	r4, #0
   162f4:	cmn	r5, #1
   162f8:	beq	16318 <__assert_fail@plt+0x47c8>
   162fc:	mov	r0, r5
   16300:	bl	1632c <__assert_fail@plt+0x47dc>
   16304:	cmp	r0, #0
   16308:	bne	16320 <__assert_fail@plt+0x47d0>
   1630c:	add	r5, r5, #2
   16310:	cmn	r5, #1
   16314:	bne	162fc <__assert_fail@plt+0x47ac>
   16318:	mov	r0, r4
   1631c:	pop	{r4, r5, fp, pc}
   16320:	mov	r4, r5
   16324:	mov	r0, r4
   16328:	pop	{r4, r5, fp, pc}
   1632c:	mov	ip, #3
   16330:	cmp	r0, #10
   16334:	bcc	16368 <__assert_fail@plt+0x4818>
   16338:	mov	ip, #3
   1633c:	mov	r2, #9
   16340:	mov	r3, #16
   16344:	udiv	r1, r0, ip
   16348:	mls	r1, r1, ip, r0
   1634c:	cmp	r1, #0
   16350:	beq	16368 <__assert_fail@plt+0x4818>
   16354:	add	r2, r3, r2
   16358:	add	r3, r3, #8
   1635c:	add	ip, ip, #2
   16360:	cmp	r2, r0
   16364:	bcc	16344 <__assert_fail@plt+0x47f4>
   16368:	udiv	r1, r0, ip
   1636c:	mls	r0, r1, ip, r0
   16370:	cmp	r0, #0
   16374:	movwne	r0, #1
   16378:	bx	lr
   1637c:	mov	r2, #0
   16380:	str	r2, [r1]
   16384:	ldr	r2, [r0, #36]	; 0x24
   16388:	str	r2, [r1, #4]
   1638c:	str	r1, [r0, #36]	; 0x24
   16390:	bx	lr
   16394:	push	{r4, r5, fp, lr}
   16398:	add	fp, sp, #8
   1639c:	mov	r4, r1
   163a0:	mov	r5, r0
   163a4:	ldr	r0, [r0]
   163a8:	bl	19f80 <lchmod@@Base+0x3a64>
   163ac:	ldrd	r2, [r5, #8]
   163b0:	eor	r0, r2, r0
   163b4:	mov	r1, r3
   163b8:	mov	r2, r4
   163bc:	mov	r3, #0
   163c0:	bl	1a200 <lchmod@@Base+0x3ce4>
   163c4:	mov	r0, r2
   163c8:	pop	{r4, r5, fp, pc}
   163cc:	push	{r4, r5, fp, lr}
   163d0:	add	fp, sp, #8
   163d4:	mov	lr, r1
   163d8:	ldr	ip, [lr, #8]!
   163dc:	mov	r2, r0
   163e0:	ldr	r3, [r2, #8]!
   163e4:	eor	ip, r3, ip
   163e8:	ldr	r3, [lr, #4]
   163ec:	ldr	r4, [r2, #4]
   163f0:	eor	r3, r4, r3
   163f4:	orrs	r3, ip, r3
   163f8:	mov	ip, #0
   163fc:	bne	1642c <__assert_fail@plt+0x48dc>
   16400:	ldrd	r4, [lr, #8]
   16404:	ldrd	r2, [r2, #8]
   16408:	eor	r3, r3, r5
   1640c:	eor	r2, r2, r4
   16410:	orrs	r2, r2, r3
   16414:	bne	1642c <__assert_fail@plt+0x48dc>
   16418:	ldr	r1, [r1]
   1641c:	ldr	r0, [r0]
   16420:	bl	11778 <strcmp@plt>
   16424:	clz	r0, r0
   16428:	lsr	ip, r0, #5
   1642c:	mov	r0, ip
   16430:	pop	{r4, r5, fp, pc}
   16434:	push	{r4, sl, fp, lr}
   16438:	add	fp, sp, #8
   1643c:	mov	r4, r0
   16440:	ldr	r0, [r0]
   16444:	bl	1331c <__assert_fail@plt+0x17cc>
   16448:	mov	r0, r4
   1644c:	pop	{r4, sl, fp, lr}
   16450:	b	1331c <__assert_fail@plt+0x17cc>
   16454:	mov	r2, #0
   16458:	str	r2, [r0, #20]
   1645c:	str	r2, [r0, #24]
   16460:	mov	r3, #1
   16464:	strb	r3, [r0, #28]
   16468:	str	r1, [r0, r2, lsl #2]
   1646c:	add	r2, r2, #1
   16470:	cmp	r2, #4
   16474:	bne	16468 <__assert_fail@plt+0x4918>
   16478:	str	r1, [r0, #16]
   1647c:	bx	lr
   16480:	ldrb	r0, [r0, #28]
   16484:	bx	lr
   16488:	ldr	r2, [r0, #20]
   1648c:	ldrb	r3, [r0, #28]
   16490:	eor	r3, r3, #1
   16494:	add	r2, r2, r3
   16498:	and	r2, r2, #3
   1649c:	ldr	ip, [r0, r2, lsl #2]
   164a0:	str	r1, [r0, r2, lsl #2]
   164a4:	str	r2, [r0, #20]
   164a8:	ldr	r1, [r0, #24]
   164ac:	cmp	r2, r1
   164b0:	addeq	r1, r1, r3
   164b4:	andeq	r1, r1, #3
   164b8:	streq	r1, [r0, #24]
   164bc:	mov	r1, #0
   164c0:	strb	r1, [r0, #28]
   164c4:	mov	r0, ip
   164c8:	bx	lr
   164cc:	push	{r4, sl, fp, lr}
   164d0:	add	fp, sp, #8
   164d4:	mov	r4, r0
   164d8:	bl	16480 <__assert_fail@plt+0x4930>
   164dc:	cmp	r0, #0
   164e0:	bne	16518 <__assert_fail@plt+0x49c8>
   164e4:	ldr	r1, [r4, #16]
   164e8:	ldr	r2, [r4, #20]
   164ec:	ldr	r0, [r4, r2, lsl #2]
   164f0:	str	r1, [r4, r2, lsl #2]
   164f4:	ldr	r1, [r4, #20]
   164f8:	ldr	r2, [r4, #24]
   164fc:	cmp	r1, r2
   16500:	moveq	r1, #1
   16504:	strbeq	r1, [r4, #28]
   16508:	subne	r1, r1, #1
   1650c:	andne	r1, r1, #3
   16510:	strne	r1, [r4, #20]
   16514:	pop	{r4, sl, fp, pc}
   16518:	bl	11af0 <abort@plt>

0001651c <lchmod@@Base>:
   1651c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16520:	add	fp, sp, #24
   16524:	sub	sp, sp, #136	; 0x88
   16528:	mov	r4, r1
   1652c:	mov	r5, r0
   16530:	mov	r1, #2654208	; 0x288000
   16534:	bl	118d4 <open64@plt>
   16538:	mov	r6, r0
   1653c:	cmp	r0, #0
   16540:	bmi	16584 <lchmod@@Base+0x68>
   16544:	movw	r1, #43292	; 0xa91c
   16548:	movt	r1, #1
   1654c:	add	r2, sp, #32
   16550:	mov	r0, r6
   16554:	mov	r3, #4096	; 0x1000
   16558:	bl	1a420 <lchmod@@Base+0x3f04>
   1655c:	cmp	r0, #0
   16560:	beq	1658c <lchmod@@Base+0x70>
   16564:	bl	119a0 <__errno_location@plt>
   16568:	mov	r4, r0
   1656c:	ldr	r5, [r0]
   16570:	mov	r0, r6
   16574:	bl	11afc <close@plt>
   16578:	str	r5, [r4]
   1657c:	mvn	r7, #0
   16580:	b	1662c <lchmod@@Base+0x110>
   16584:	mov	r7, r6
   16588:	b	1662c <lchmod@@Base+0x110>
   1658c:	ldr	r0, [sp, #48]	; 0x30
   16590:	and	r0, r0, #61440	; 0xf000
   16594:	cmp	r0, #40960	; 0xa000
   16598:	bne	165b8 <lchmod@@Base+0x9c>
   1659c:	mov	r0, r6
   165a0:	bl	11afc <close@plt>
   165a4:	bl	119a0 <__errno_location@plt>
   165a8:	mov	r1, #95	; 0x5f
   165ac:	str	r1, [r0]
   165b0:	mvn	r7, #0
   165b4:	b	1662c <lchmod@@Base+0x110>
   165b8:	str	r6, [sp]
   165bc:	add	r7, sp, #6
   165c0:	movw	r3, #43668	; 0xaa94
   165c4:	movt	r3, #1
   165c8:	mov	r0, r7
   165cc:	mov	r1, #1
   165d0:	mov	r2, #26
   165d4:	bl	119ac <__sprintf_chk@plt>
   165d8:	mov	r0, r7
   165dc:	mov	r1, r4
   165e0:	bl	11acc <chmod@plt>
   165e4:	mov	r7, r0
   165e8:	bl	119a0 <__errno_location@plt>
   165ec:	mov	r8, r0
   165f0:	ldr	r9, [r0]
   165f4:	mov	r0, r6
   165f8:	bl	11afc <close@plt>
   165fc:	cmp	r7, #0
   16600:	beq	16620 <lchmod@@Base+0x104>
   16604:	cmp	r9, #2
   16608:	bne	16628 <lchmod@@Base+0x10c>
   1660c:	mov	r0, r5
   16610:	mov	r1, r4
   16614:	bl	11acc <chmod@plt>
   16618:	mov	r7, r0
   1661c:	b	1662c <lchmod@@Base+0x110>
   16620:	mov	r7, #0
   16624:	b	1662c <lchmod@@Base+0x110>
   16628:	str	r9, [r8]
   1662c:	mov	r0, r7
   16630:	sub	sp, fp, #24
   16634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1663c:	add	fp, sp, #28
   16640:	sub	sp, sp, #4
   16644:	mov	r5, r0
   16648:	ldrb	r7, [r0]
   1664c:	and	r0, r7, #248	; 0xf8
   16650:	cmp	r0, #48	; 0x30
   16654:	bne	166c0 <lchmod@@Base+0x1a4>
   16658:	mov	r4, #0
   1665c:	mov	r0, #0
   16660:	mov	r1, r5
   16664:	mov	r6, r5
   16668:	ldrb	r2, [r6], #1
   1666c:	add	r0, r2, r0, lsl #3
   16670:	sub	r0, r0, #48	; 0x30
   16674:	cmp	r4, r0, lsr #12
   16678:	bne	16a54 <lchmod@@Base+0x538>
   1667c:	ldrb	r2, [r1, #1]
   16680:	and	r1, r2, #248	; 0xf8
   16684:	cmp	r1, #48	; 0x30
   16688:	mov	r1, r6
   1668c:	beq	16668 <lchmod@@Base+0x14c>
   16690:	cmp	r2, #0
   16694:	bne	16a54 <lchmod@@Base+0x538>
   16698:	bl	16a70 <lchmod@@Base+0x554>
   1669c:	sub	r2, r6, r5
   166a0:	and	r3, r0, #3072	; 0xc00
   166a4:	movw	r7, #1023	; 0x3ff
   166a8:	movw	r1, #4095	; 0xfff
   166ac:	cmp	r2, #5
   166b0:	orrlt	r1, r3, r7
   166b4:	sub	sp, fp, #28
   166b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166bc:	b	16a74 <lchmod@@Base+0x558>
   166c0:	mov	r1, #1
   166c4:	mvn	r2, #42	; 0x2a
   166c8:	movw	r8, #5
   166cc:	movt	r8, #4
   166d0:	mov	r3, #1
   166d4:	mov	r0, #1
   166d8:	b	166f4 <lchmod@@Base+0x1d8>
   166dc:	cmp	r7, #0
   166e0:	beq	16714 <lchmod@@Base+0x1f8>
   166e4:	mov	r6, #0
   166e8:	add	r0, r6, r0
   166ec:	ldrb	r7, [r5, r3]
   166f0:	add	r3, r3, #1
   166f4:	uxtab	r6, r2, r7
   166f8:	uxtb	r7, r7
   166fc:	cmp	r6, #18
   16700:	bhi	166dc <lchmod@@Base+0x1c0>
   16704:	tst	r8, r1, lsl r6
   16708:	mov	r6, #1
   1670c:	bne	166e8 <lchmod@@Base+0x1cc>
   16710:	b	166dc <lchmod@@Base+0x1c0>
   16714:	mov	r1, #16
   16718:	bl	190a4 <lchmod@@Base+0x2b88>
   1671c:	mov	r4, r0
   16720:	mov	r9, #0
   16724:	mov	ip, #1
   16728:	mvn	lr, #87	; 0x57
   1672c:	mov	sl, #0
   16730:	mov	r1, #0
   16734:	b	16744 <lchmod@@Base+0x228>
   16738:	movw	r0, #4095	; 0xfff
   1673c:	orr	r1, r1, r0
   16740:	add	r5, r5, #1
   16744:	ldrb	r0, [r5]
   16748:	sub	r2, r0, #97	; 0x61
   1674c:	cmp	r2, #20
   16750:	bhi	167c4 <lchmod@@Base+0x2a8>
   16754:	mov	r0, #2496	; 0x9c0
   16758:	add	r3, pc, #0
   1675c:	ldr	pc, [r3, r2, lsl #2]
   16760:	andeq	r6, r1, r8, lsr r7
   16764:	andeq	r6, r1, r8, asr #20
   16768:	andeq	r6, r1, r8, asr #20
   1676c:	andeq	r6, r1, r8, asr #20
   16770:	andeq	r6, r1, r8, asr #20
   16774:	andeq	r6, r1, r8, asr #20
   16778:			; <UNDEFINED> instruction: 0x000167b4
   1677c:	andeq	r6, r1, r8, asr #20
   16780:	andeq	r6, r1, r8, asr #20
   16784:	andeq	r6, r1, r8, asr #20
   16788:	andeq	r6, r1, r8, asr #20
   1678c:	andeq	r6, r1, r8, asr #20
   16790:	andeq	r6, r1, r8, asr #20
   16794:	andeq	r6, r1, r8, asr #20
   16798:			; <UNDEFINED> instruction: 0x000167bc
   1679c:	andeq	r6, r1, r8, asr #20
   167a0:	andeq	r6, r1, r8, asr #20
   167a4:	andeq	r6, r1, r8, asr #20
   167a8:	andeq	r6, r1, r8, asr #20
   167ac:	andeq	r6, r1, r8, asr #20
   167b0:	andeq	r6, r1, ip, lsr r7
   167b4:	movw	r0, #1080	; 0x438
   167b8:	b	1673c <lchmod@@Base+0x220>
   167bc:	movw	r0, #519	; 0x207
   167c0:	b	1673c <lchmod@@Base+0x220>
   167c4:	sub	r0, r0, #43	; 0x2b
   167c8:	cmp	r0, #18
   167cc:	bhi	16a48 <lchmod@@Base+0x52c>
   167d0:	tst	r8, ip, lsl r0
   167d4:	beq	16a48 <lchmod@@Base+0x52c>
   167d8:	ldrb	r6, [r5]
   167dc:	mov	r2, r5
   167e0:	ldrb	r7, [r2, #1]!
   167e4:	sub	r0, r7, #48	; 0x30
   167e8:	cmp	r0, #8
   167ec:	bcs	16854 <lchmod@@Base+0x338>
   167f0:	mov	r0, #0
   167f4:	mov	r5, r2
   167f8:	ldrb	r3, [r5], #1
   167fc:	add	r0, r3, r0, lsl #3
   16800:	sub	r0, r0, #48	; 0x30
   16804:	cmp	r9, r0, lsr #12
   16808:	bne	16a48 <lchmod@@Base+0x52c>
   1680c:	ldrb	r3, [r2, #1]
   16810:	and	r2, r3, #248	; 0xf8
   16814:	cmp	r2, #48	; 0x30
   16818:	mov	r2, r5
   1681c:	beq	167f8 <lchmod@@Base+0x2dc>
   16820:	cmp	r1, #0
   16824:	bne	16a48 <lchmod@@Base+0x52c>
   16828:	cmp	r3, #44	; 0x2c
   1682c:	cmpne	r3, #0
   16830:	bne	16a48 <lchmod@@Base+0x52c>
   16834:	str	r6, [sp]
   16838:	bl	16a70 <lchmod@@Base+0x554>
   1683c:	mvn	lr, #87	; 0x57
   16840:	mov	ip, #1
   16844:	mov	r6, #1
   16848:	movw	r1, #4095	; 0xfff
   1684c:	movw	r3, #4095	; 0xfff
   16850:	b	16990 <lchmod@@Base+0x474>
   16854:	cmp	r7, #103	; 0x67
   16858:	str	r6, [sp]
   1685c:	beq	16884 <lchmod@@Base+0x368>
   16860:	cmp	r7, #111	; 0x6f
   16864:	beq	16898 <lchmod@@Base+0x37c>
   16868:	cmp	r7, #117	; 0x75
   1686c:	bne	168ac <lchmod@@Base+0x390>
   16870:	add	r5, r5, #2
   16874:	mov	r6, #3
   16878:	mov	r3, #0
   1687c:	mov	r0, #448	; 0x1c0
   16880:	b	16990 <lchmod@@Base+0x474>
   16884:	add	r5, r5, #2
   16888:	mov	r6, #3
   1688c:	mov	r3, #0
   16890:	mov	r0, #56	; 0x38
   16894:	b	16990 <lchmod@@Base+0x474>
   16898:	add	r5, r5, #2
   1689c:	mov	r6, #3
   168a0:	mov	r3, #0
   168a4:	mov	r0, #7
   168a8:	b	16990 <lchmod@@Base+0x474>
   168ac:	add	r3, r5, #2
   168b0:	mov	r2, #1
   168b4:	mov	r0, #0
   168b8:	b	168c8 <lchmod@@Base+0x3ac>
   168bc:	orr	r0, r0, #512	; 0x200
   168c0:	mov	r2, r6
   168c4:	ldrb	r7, [r3], #1
   168c8:	mov	r6, r2
   168cc:	uxtab	r7, lr, r7
   168d0:	cmp	r7, #32
   168d4:	bhi	16988 <lchmod@@Base+0x46c>
   168d8:	mov	r2, #2
   168dc:	add	r5, pc, #0
   168e0:	ldr	pc, [r5, r7, lsl #2]
   168e4:	andeq	r6, r1, r4, asr #17
   168e8:	andeq	r6, r1, r8, lsl #19
   168ec:	andeq	r6, r1, r8, lsl #19
   168f0:	andeq	r6, r1, r8, lsl #19
   168f4:	andeq	r6, r1, r8, lsl #19
   168f8:	andeq	r6, r1, r8, lsl #19
   168fc:	andeq	r6, r1, r8, lsl #19
   16900:	andeq	r6, r1, r8, lsl #19
   16904:	andeq	r6, r1, r8, lsl #19
   16908:	andeq	r6, r1, r8, lsl #19
   1690c:	andeq	r6, r1, r8, lsl #19
   16910:	andeq	r6, r1, r8, lsl #19
   16914:	andeq	r6, r1, r8, lsl #19
   16918:	andeq	r6, r1, r8, lsl #19
   1691c:	andeq	r6, r1, r8, lsl #19
   16920:	andeq	r6, r1, r8, lsl #19
   16924:	andeq	r6, r1, r8, lsl #19
   16928:	andeq	r6, r1, r8, lsl #19
   1692c:	andeq	r6, r1, r8, lsl #19
   16930:	andeq	r6, r1, r8, lsl #19
   16934:	andeq	r6, r1, r8, lsl #19
   16938:	andeq	r6, r1, r8, lsl #19
   1693c:	andeq	r6, r1, r8, lsl #19
   16940:	andeq	r6, r1, r8, lsl #19
   16944:	andeq	r6, r1, r8, lsl #19
   16948:	andeq	r6, r1, r8, lsl #19
   1694c:	andeq	r6, r1, r8, ror #18
   16950:	andeq	r6, r1, r0, ror r9
   16954:			; <UNDEFINED> instruction: 0x000168bc
   16958:	andeq	r6, r1, r8, lsl #19
   1695c:	andeq	r6, r1, r8, lsl #19
   16960:	andeq	r6, r1, r8, ror r9
   16964:	andeq	r6, r1, r0, lsl #19
   16968:	orr	r0, r0, #292	; 0x124
   1696c:	b	168c0 <lchmod@@Base+0x3a4>
   16970:	orr	r0, r0, #3072	; 0xc00
   16974:	b	168c0 <lchmod@@Base+0x3a4>
   16978:	orr	r0, r0, #146	; 0x92
   1697c:	b	168c0 <lchmod@@Base+0x3a4>
   16980:	orr	r0, r0, #73	; 0x49
   16984:	b	168c0 <lchmod@@Base+0x3a4>
   16988:	sub	r5, r3, #1
   1698c:	mov	r3, #0
   16990:	mov	r2, r4
   16994:	ldr	r7, [sp]
   16998:	strb	r7, [r2, sl, lsl #4]!
   1699c:	str	r1, [r2, #4]
   169a0:	str	r0, [r2, #8]
   169a4:	strb	r6, [r2, #1]
   169a8:	cmp	r3, #0
   169ac:	bne	169bc <lchmod@@Base+0x4a0>
   169b0:	cmp	r1, #0
   169b4:	andne	r0, r0, r1
   169b8:	mov	r3, r0
   169bc:	add	r0, sl, #1
   169c0:	add	r2, r4, sl, lsl #4
   169c4:	str	r3, [r2, #12]
   169c8:	ldrb	r2, [r5]
   169cc:	sub	r2, r2, #43	; 0x2b
   169d0:	cmp	r2, #18
   169d4:	bhi	16a3c <lchmod@@Base+0x520>
   169d8:	add	r3, pc, #4
   169dc:	mov	sl, r0
   169e0:	ldr	pc, [r3, r2, lsl #2]
   169e4:	ldrdeq	r6, [r1], -r8
   169e8:	andeq	r6, r1, r0, lsr sl
   169ec:	ldrdeq	r6, [r1], -r8
   169f0:	andeq	r6, r1, ip, lsr sl
   169f4:	andeq	r6, r1, ip, lsr sl
   169f8:	andeq	r6, r1, ip, lsr sl
   169fc:	andeq	r6, r1, ip, lsr sl
   16a00:	andeq	r6, r1, ip, lsr sl
   16a04:	andeq	r6, r1, ip, lsr sl
   16a08:	andeq	r6, r1, ip, lsr sl
   16a0c:	andeq	r6, r1, ip, lsr sl
   16a10:	andeq	r6, r1, ip, lsr sl
   16a14:	andeq	r6, r1, ip, lsr sl
   16a18:	andeq	r6, r1, ip, lsr sl
   16a1c:	andeq	r6, r1, ip, lsr sl
   16a20:	andeq	r6, r1, ip, lsr sl
   16a24:	andeq	r6, r1, ip, lsr sl
   16a28:	andeq	r6, r1, ip, lsr sl
   16a2c:	ldrdeq	r6, [r1], -r8
   16a30:	add	r5, r5, #1
   16a34:	mov	sl, r0
   16a38:	b	16730 <lchmod@@Base+0x214>
   16a3c:	ldrb	r1, [r5]
   16a40:	cmp	r1, #0
   16a44:	beq	16a60 <lchmod@@Base+0x544>
   16a48:	mov	r0, r4
   16a4c:	bl	1331c <__assert_fail@plt+0x17cc>
   16a50:	mov	r4, #0
   16a54:	mov	r0, r4
   16a58:	sub	sp, fp, #28
   16a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a60:	add	r0, r4, r0, lsl #4
   16a64:	mov	r1, #0
   16a68:	strb	r1, [r0, #1]
   16a6c:	b	16a54 <lchmod@@Base+0x538>
   16a70:	bx	lr
   16a74:	push	{r4, r5, fp, lr}
   16a78:	add	fp, sp, #8
   16a7c:	mov	r4, r1
   16a80:	mov	r5, r0
   16a84:	mov	r0, #32
   16a88:	bl	19008 <lchmod@@Base+0x2aec>
   16a8c:	mov	r1, #0
   16a90:	strb	r1, [r0, #17]
   16a94:	movw	r1, #4095	; 0xfff
   16a98:	stmib	r0, {r1, r5}
   16a9c:	str	r4, [r0, #12]
   16aa0:	movw	r1, #317	; 0x13d
   16aa4:	strh	r1, [r0]
   16aa8:	pop	{r4, r5, fp, pc}
   16aac:	push	{fp, lr}
   16ab0:	mov	fp, sp
   16ab4:	sub	sp, sp, #104	; 0x68
   16ab8:	mov	r1, sp
   16abc:	bl	1a3f0 <lchmod@@Base+0x3ed4>
   16ac0:	mov	r1, r0
   16ac4:	mov	r0, #0
   16ac8:	cmp	r1, #0
   16acc:	beq	16ad8 <lchmod@@Base+0x5bc>
   16ad0:	mov	sp, fp
   16ad4:	pop	{fp, pc}
   16ad8:	ldr	r0, [sp, #16]
   16adc:	movw	r1, #4095	; 0xfff
   16ae0:	bl	16a74 <lchmod@@Base+0x558>
   16ae4:	mov	sp, fp
   16ae8:	pop	{fp, pc}
   16aec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16af0:	add	fp, sp, #24
   16af4:	bfc	r0, #12, #20
   16af8:	ldrb	r4, [r3, #1]
   16afc:	ldr	ip, [fp, #8]
   16b00:	cmp	r4, #0
   16b04:	beq	16be4 <lchmod@@Base+0x6c8>
   16b08:	add	r3, r3, #8
   16b0c:	cmp	r1, #0
   16b10:	mov	lr, r1
   16b14:	movwne	lr, #3072	; 0xc00
   16b18:	mov	r9, #0
   16b1c:	movw	r8, #4095	; 0xfff
   16b20:	b	16b3c <lchmod@@Base+0x620>
   16b24:	bic	r0, r0, r3
   16b28:	orr	r9, r3, r9
   16b2c:	add	r3, r5, #16
   16b30:	ldrb	r4, [r5, #9]
   16b34:	cmp	r4, #0
   16b38:	beq	16be8 <lchmod@@Base+0x6cc>
   16b3c:	mov	r5, r3
   16b40:	ldr	r7, [r3, #-4]
   16b44:	ldr	r3, [r3]
   16b48:	ldr	r6, [r5, #4]
   16b4c:	bic	r6, lr, r6
   16b50:	uxtb	r4, r4
   16b54:	cmp	r4, #2
   16b58:	beq	16b84 <lchmod@@Base+0x668>
   16b5c:	cmp	r4, #3
   16b60:	bne	16b90 <lchmod@@Base+0x674>
   16b64:	and	r4, r3, r0
   16b68:	tst	r4, #146	; 0x92
   16b6c:	mov	r3, r4
   16b70:	orrne	r3, r3, #146	; 0x92
   16b74:	tst	r4, #292	; 0x124
   16b78:	orrne	r3, r3, #292	; 0x124
   16b7c:	tst	r4, #73	; 0x49
   16b80:	b	16b8c <lchmod@@Base+0x670>
   16b84:	and	r4, r0, #73	; 0x49
   16b88:	orrs	r4, r4, r1
   16b8c:	orrne	r3, r3, #73	; 0x49
   16b90:	cmp	r7, #0
   16b94:	mov	r4, r7
   16b98:	mvneq	r4, r2
   16b9c:	bic	r4, r4, r6
   16ba0:	and	r3, r4, r3
   16ba4:	ldrb	r4, [r5, #-8]
   16ba8:	cmp	r4, #43	; 0x2b
   16bac:	beq	16bdc <lchmod@@Base+0x6c0>
   16bb0:	cmp	r4, #45	; 0x2d
   16bb4:	beq	16b24 <lchmod@@Base+0x608>
   16bb8:	cmp	r4, #61	; 0x3d
   16bbc:	bne	16b2c <lchmod@@Base+0x610>
   16bc0:	mvn	r4, r7
   16bc4:	cmp	r7, #0
   16bc8:	orrne	r6, r6, r4
   16bcc:	and	r0, r6, r0
   16bd0:	orr	r0, r3, r0
   16bd4:	bic	r3, r8, r6
   16bd8:	b	16b28 <lchmod@@Base+0x60c>
   16bdc:	orr	r0, r3, r0
   16be0:	b	16b28 <lchmod@@Base+0x60c>
   16be4:	mov	r9, #0
   16be8:	cmp	ip, #0
   16bec:	strne	r9, [ip]
   16bf0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16bf4:	sub	sp, sp, #4
   16bf8:	push	{fp, lr}
   16bfc:	mov	fp, sp
   16c00:	sub	sp, sp, #4
   16c04:	str	r3, [fp, #8]
   16c08:	mov	r3, #0
   16c0c:	tst	r2, #64	; 0x40
   16c10:	ldrne	r3, [fp, #8]
   16c14:	bl	11988 <openat64@plt>
   16c18:	bl	18af8 <lchmod@@Base+0x25dc>
   16c1c:	mov	sp, fp
   16c20:	pop	{fp, lr}
   16c24:	add	sp, sp, #4
   16c28:	bx	lr
   16c2c:	push	{r4, r5, r6, sl, fp, lr}
   16c30:	add	fp, sp, #16
   16c34:	mov	r4, r3
   16c38:	orr	r2, r2, #18688	; 0x4900
   16c3c:	orr	r2, r2, #524288	; 0x80000
   16c40:	bl	16bf4 <lchmod@@Base+0x6d8>
   16c44:	mov	r5, r0
   16c48:	mov	r0, #0
   16c4c:	cmp	r5, #0
   16c50:	bmi	16c88 <lchmod@@Base+0x76c>
   16c54:	mov	r0, r5
   16c58:	bl	11a54 <fdopendir@plt>
   16c5c:	cmp	r0, #0
   16c60:	beq	16c6c <lchmod@@Base+0x750>
   16c64:	str	r5, [r4]
   16c68:	pop	{r4, r5, r6, sl, fp, pc}
   16c6c:	bl	119a0 <__errno_location@plt>
   16c70:	mov	r4, r0
   16c74:	ldr	r6, [r0]
   16c78:	mov	r0, r5
   16c7c:	bl	11afc <close@plt>
   16c80:	str	r6, [r4]
   16c84:	mov	r0, #0
   16c88:	pop	{r4, r5, r6, sl, fp, pc}
   16c8c:	push	{r4, r5, fp, lr}
   16c90:	add	fp, sp, #8
   16c94:	cmp	r0, #0
   16c98:	beq	16d2c <lchmod@@Base+0x810>
   16c9c:	mov	r4, r0
   16ca0:	mov	r1, #47	; 0x2f
   16ca4:	bl	11a30 <strrchr@plt>
   16ca8:	cmp	r0, #0
   16cac:	mov	r5, r4
   16cb0:	addne	r5, r0, #1
   16cb4:	sub	r0, r5, r4
   16cb8:	cmp	r0, #7
   16cbc:	blt	16d10 <lchmod@@Base+0x7f4>
   16cc0:	sub	r0, r5, #7
   16cc4:	movw	r1, #43741	; 0xaadd
   16cc8:	movt	r1, #1
   16ccc:	mov	r2, #7
   16cd0:	bl	11ae4 <strncmp@plt>
   16cd4:	cmp	r0, #0
   16cd8:	bne	16d10 <lchmod@@Base+0x7f4>
   16cdc:	movw	r1, #43749	; 0xaae5
   16ce0:	movt	r1, #1
   16ce4:	mov	r0, r5
   16ce8:	mov	r2, #3
   16cec:	bl	11ae4 <strncmp@plt>
   16cf0:	cmp	r0, #0
   16cf4:	beq	16d00 <lchmod@@Base+0x7e4>
   16cf8:	mov	r4, r5
   16cfc:	b	16d10 <lchmod@@Base+0x7f4>
   16d00:	add	r4, r5, #3
   16d04:	movw	r0, #49608	; 0xc1c8
   16d08:	movt	r0, #2
   16d0c:	str	r4, [r0]
   16d10:	movw	r0, #49612	; 0xc1cc
   16d14:	movt	r0, #2
   16d18:	str	r4, [r0]
   16d1c:	movw	r0, #49648	; 0xc1f0
   16d20:	movt	r0, #2
   16d24:	str	r4, [r0]
   16d28:	pop	{r4, r5, fp, pc}
   16d2c:	movw	r0, #49624	; 0xc1d8
   16d30:	movt	r0, #2
   16d34:	ldr	r3, [r0]
   16d38:	movw	r0, #43685	; 0xaaa5
   16d3c:	movt	r0, #1
   16d40:	mov	r1, #55	; 0x37
   16d44:	mov	r2, #1
   16d48:	bl	11874 <fwrite@plt>
   16d4c:	bl	11af0 <abort@plt>
   16d50:	push	{r4, r5, r6, sl, fp, lr}
   16d54:	add	fp, sp, #16
   16d58:	mov	r4, r0
   16d5c:	movw	r0, #49656	; 0xc1f8
   16d60:	movt	r0, #2
   16d64:	cmp	r4, #0
   16d68:	moveq	r4, r0
   16d6c:	bl	119a0 <__errno_location@plt>
   16d70:	mov	r5, r0
   16d74:	ldr	r6, [r0]
   16d78:	mov	r0, r4
   16d7c:	mov	r1, #48	; 0x30
   16d80:	bl	192f0 <lchmod@@Base+0x2dd4>
   16d84:	str	r6, [r5]
   16d88:	pop	{r4, r5, r6, sl, fp, pc}
   16d8c:	movw	r1, #49656	; 0xc1f8
   16d90:	movt	r1, #2
   16d94:	cmp	r0, #0
   16d98:	movne	r1, r0
   16d9c:	ldr	r0, [r1]
   16da0:	bx	lr
   16da4:	movw	r2, #49656	; 0xc1f8
   16da8:	movt	r2, #2
   16dac:	cmp	r0, #0
   16db0:	movne	r2, r0
   16db4:	str	r1, [r2]
   16db8:	bx	lr
   16dbc:	movw	r3, #49656	; 0xc1f8
   16dc0:	movt	r3, #2
   16dc4:	cmp	r0, #0
   16dc8:	movne	r3, r0
   16dcc:	ubfx	r0, r1, #5, #3
   16dd0:	add	ip, r3, r0, lsl #2
   16dd4:	ldr	r3, [ip, #8]
   16dd8:	and	r1, r1, #31
   16ddc:	mov	r0, #1
   16de0:	and	r0, r0, r3, lsr r1
   16de4:	and	r2, r2, #1
   16de8:	eor	r2, r0, r2
   16dec:	eor	r1, r3, r2, lsl r1
   16df0:	str	r1, [ip, #8]
   16df4:	bx	lr
   16df8:	movw	r2, #49656	; 0xc1f8
   16dfc:	movt	r2, #2
   16e00:	cmp	r0, #0
   16e04:	movne	r2, r0
   16e08:	ldr	r0, [r2, #4]
   16e0c:	str	r1, [r2, #4]
   16e10:	bx	lr
   16e14:	push	{fp, lr}
   16e18:	mov	fp, sp
   16e1c:	movw	r3, #49656	; 0xc1f8
   16e20:	movt	r3, #2
   16e24:	cmp	r0, #0
   16e28:	movne	r3, r0
   16e2c:	mov	r0, #10
   16e30:	str	r0, [r3]
   16e34:	cmp	r1, #0
   16e38:	cmpne	r2, #0
   16e3c:	bne	16e44 <lchmod@@Base+0x928>
   16e40:	bl	11af0 <abort@plt>
   16e44:	str	r1, [r3, #40]	; 0x28
   16e48:	str	r2, [r3, #44]	; 0x2c
   16e4c:	pop	{fp, pc}
   16e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e54:	add	fp, sp, #28
   16e58:	sub	sp, sp, #20
   16e5c:	mov	r8, r3
   16e60:	mov	r9, r2
   16e64:	mov	sl, r1
   16e68:	mov	r7, r0
   16e6c:	ldr	r0, [fp, #8]
   16e70:	movw	r5, #49656	; 0xc1f8
   16e74:	movt	r5, #2
   16e78:	cmp	r0, #0
   16e7c:	movne	r5, r0
   16e80:	bl	119a0 <__errno_location@plt>
   16e84:	mov	r4, r0
   16e88:	ldm	r5, {r0, r1}
   16e8c:	ldr	r2, [r5, #40]	; 0x28
   16e90:	ldr	r3, [r5, #44]	; 0x2c
   16e94:	ldr	r6, [r4]
   16e98:	add	r5, r5, #8
   16e9c:	stm	sp, {r0, r1, r5}
   16ea0:	str	r2, [sp, #12]
   16ea4:	str	r3, [sp, #16]
   16ea8:	mov	r0, r7
   16eac:	mov	r1, sl
   16eb0:	mov	r2, r9
   16eb4:	mov	r3, r8
   16eb8:	bl	16ec8 <lchmod@@Base+0x9ac>
   16ebc:	str	r6, [r4]
   16ec0:	sub	sp, fp, #28
   16ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ecc:	add	fp, sp, #28
   16ed0:	sub	sp, sp, #156	; 0x9c
   16ed4:	mov	r9, r3
   16ed8:	mov	r7, r1
   16edc:	mov	r6, r0
   16ee0:	str	r2, [fp, #-80]	; 0xffffffb0
   16ee4:	add	r0, r2, #1
   16ee8:	str	r0, [sp, #76]	; 0x4c
   16eec:	ldr	r0, [fp, #12]
   16ef0:	and	r1, r0, #1
   16ef4:	str	r1, [sp, #40]	; 0x28
   16ef8:	and	r1, r0, #4
   16efc:	str	r1, [sp, #36]	; 0x24
   16f00:	ubfx	r4, r0, #1, #1
   16f04:	bl	1188c <__ctype_get_mb_cur_max@plt>
   16f08:	str	r0, [sp, #44]	; 0x2c
   16f0c:	ldr	r0, [fp, #24]
   16f10:	str	r0, [sp, #88]	; 0x58
   16f14:	ldr	r0, [fp, #20]
   16f18:	str	r0, [sp, #80]	; 0x50
   16f1c:	ldr	r1, [fp, #8]
   16f20:	mov	r0, #0
   16f24:	str	r0, [sp, #84]	; 0x54
   16f28:	mov	r0, #0
   16f2c:	str	r0, [fp, #-84]	; 0xffffffac
   16f30:	mov	r0, #0
   16f34:	str	r0, [fp, #-72]	; 0xffffffb8
   16f38:	mov	r0, #0
   16f3c:	mov	r2, #0
   16f40:	str	r2, [fp, #-56]	; 0xffffffc8
   16f44:	mov	r2, #0
   16f48:	str	r2, [sp, #64]	; 0x40
   16f4c:	mov	r2, #1
   16f50:	str	r2, [fp, #-48]	; 0xffffffd0
   16f54:	cmp	r1, #10
   16f58:	bhi	17e84 <lchmod@@Base+0x1968>
   16f5c:	mov	sl, r7
   16f60:	mov	r7, r1
   16f64:	add	r1, pc, #24
   16f68:	mov	r8, #0
   16f6c:	mov	r2, #1
   16f70:	mov	r3, #0
   16f74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16f78:	mov	lr, r9
   16f7c:	mov	r5, r6
   16f80:	ldr	pc, [r1, r7, lsl #2]
   16f84:	andeq	r7, r1, r8, asr r0
   16f88:	muleq	r1, r8, r0
   16f8c:	andeq	r7, r1, r8, rrx
   16f90:	andeq	r7, r1, r0, asr r0
   16f94:	andeq	r7, r1, ip, lsl #1
   16f98:	andeq	r7, r1, ip, ror #1
   16f9c:	andeq	r7, r1, r8, ror r0
   16fa0:	andeq	r7, r1, r8, asr #2
   16fa4:			; <UNDEFINED> instruction: 0x00016fb0
   16fa8:			; <UNDEFINED> instruction: 0x00016fb0
   16fac:	ldrdeq	r6, [r1], -ip
   16fb0:	movw	r0, #43831	; 0xab37
   16fb4:	movt	r0, #1
   16fb8:	mov	r1, r7
   16fbc:	bl	1848c <lchmod@@Base+0x1f70>
   16fc0:	str	r0, [sp, #80]	; 0x50
   16fc4:	movw	r0, #43833	; 0xab39
   16fc8:	movt	r0, #1
   16fcc:	mov	r1, r7
   16fd0:	bl	1848c <lchmod@@Base+0x1f70>
   16fd4:	mov	r5, r6
   16fd8:	str	r0, [sp, #88]	; 0x58
   16fdc:	mov	r8, #0
   16fe0:	tst	r4, #1
   16fe4:	str	r7, [fp, #-64]	; 0xffffffc0
   16fe8:	bne	17020 <lchmod@@Base+0xb04>
   16fec:	ldr	r0, [sp, #80]	; 0x50
   16ff0:	ldrb	r0, [r0]
   16ff4:	cmp	r0, #0
   16ff8:	beq	17020 <lchmod@@Base+0xb04>
   16ffc:	ldr	r1, [sp, #80]	; 0x50
   17000:	add	r1, r1, #1
   17004:	mov	r8, #0
   17008:	cmp	r8, sl
   1700c:	strbcc	r0, [r5, r8]
   17010:	ldrb	r0, [r1, r8]
   17014:	add	r8, r8, #1
   17018:	cmp	r0, #0
   1701c:	bne	17008 <lchmod@@Base+0xaec>
   17020:	ldr	r7, [sp, #88]	; 0x58
   17024:	mov	r0, r7
   17028:	bl	11970 <strlen@plt>
   1702c:	mov	r5, r6
   17030:	str	r0, [fp, #-72]	; 0xffffffb8
   17034:	str	r7, [fp, #-84]	; 0xffffffac
   17038:	mov	r2, #1
   1703c:	mov	r3, r4
   17040:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17044:	mov	lr, r9
   17048:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1704c:	b	17148 <lchmod@@Base+0xc2c>
   17050:	mov	r0, #1
   17054:	b	17098 <lchmod@@Base+0xb7c>
   17058:	mov	r7, #0
   1705c:	mov	r8, #0
   17060:	mov	r2, r0
   17064:	b	17144 <lchmod@@Base+0xc28>
   17068:	tst	r4, #1
   1706c:	bne	17098 <lchmod@@Base+0xb7c>
   17070:	mov	r2, r0
   17074:	b	170c0 <lchmod@@Base+0xba4>
   17078:	mov	r0, #1
   1707c:	str	r0, [fp, #-72]	; 0xffffffb8
   17080:	mov	r8, #0
   17084:	mov	r7, #5
   17088:	b	17104 <lchmod@@Base+0xbe8>
   1708c:	mov	r2, #1
   17090:	tst	r4, #1
   17094:	beq	170c0 <lchmod@@Base+0xba4>
   17098:	mov	r1, #1
   1709c:	str	r1, [fp, #-72]	; 0xffffffb8
   170a0:	mov	r8, #0
   170a4:	mov	r7, #2
   170a8:	movw	r1, #43833	; 0xab39
   170ac:	movt	r1, #1
   170b0:	str	r1, [fp, #-84]	; 0xffffffac
   170b4:	mov	r2, r0
   170b8:	mov	r3, #1
   170bc:	b	17148 <lchmod@@Base+0xc2c>
   170c0:	mov	r8, #1
   170c4:	mov	r7, #2
   170c8:	cmp	sl, #0
   170cc:	movne	r0, #39	; 0x27
   170d0:	strbne	r0, [r5]
   170d4:	movw	r0, #43833	; 0xab39
   170d8:	movt	r0, #1
   170dc:	str	r0, [fp, #-84]	; 0xffffffac
   170e0:	mov	r0, #1
   170e4:	str	r0, [fp, #-72]	; 0xffffffb8
   170e8:	b	17144 <lchmod@@Base+0xc28>
   170ec:	mov	r7, #5
   170f0:	tst	r4, #1
   170f4:	beq	1711c <lchmod@@Base+0xc00>
   170f8:	mov	r0, #1
   170fc:	str	r0, [fp, #-72]	; 0xffffffb8
   17100:	mov	r8, #0
   17104:	movw	r0, #43829	; 0xab35
   17108:	movt	r0, #1
   1710c:	str	r0, [fp, #-84]	; 0xffffffac
   17110:	mov	r2, #1
   17114:	mov	r3, #1
   17118:	b	17148 <lchmod@@Base+0xc2c>
   1711c:	cmp	sl, #0
   17120:	movne	r0, #34	; 0x22
   17124:	strbne	r0, [r5]
   17128:	mov	r8, #1
   1712c:	movw	r0, #43829	; 0xab35
   17130:	movt	r0, #1
   17134:	str	r0, [fp, #-84]	; 0xffffffac
   17138:	mov	r0, #1
   1713c:	str	r0, [fp, #-72]	; 0xffffffb8
   17140:	mov	r2, #1
   17144:	mov	r3, #0
   17148:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1714c:	cmp	r0, #0
   17150:	movwne	r0, #1
   17154:	and	r1, r0, r3
   17158:	and	r1, r2, r1
   1715c:	str	r1, [sp, #56]	; 0x38
   17160:	sub	r1, r7, #2
   17164:	clz	r1, r1
   17168:	lsr	r1, r1, #5
   1716c:	and	r1, r1, r3
   17170:	str	r1, [sp, #68]	; 0x44
   17174:	str	r7, [fp, #-64]	; 0xffffffc0
   17178:	subs	r1, r7, #2
   1717c:	movwne	r1, #1
   17180:	eor	r4, r3, #1
   17184:	str	r4, [fp, #-88]	; 0xffffffa8
   17188:	orr	r4, r1, r4
   1718c:	str	r4, [sp, #72]	; 0x48
   17190:	and	r1, r1, r2
   17194:	and	r0, r0, r1
   17198:	str	r0, [fp, #-60]	; 0xffffffc4
   1719c:	str	r3, [fp, #-76]	; 0xffffffb4
   171a0:	orr	r0, r1, r3
   171a4:	eor	r0, r0, #1
   171a8:	ldr	r1, [fp, #16]
   171ac:	clz	r1, r1
   171b0:	lsr	r1, r1, #5
   171b4:	orr	r0, r1, r0
   171b8:	str	r0, [fp, #-68]	; 0xffffffbc
   171bc:	str	r2, [sp, #92]	; 0x5c
   171c0:	eor	r0, r2, #1
   171c4:	str	r0, [sp, #60]	; 0x3c
   171c8:	mov	r7, #0
   171cc:	cmn	lr, #1
   171d0:	beq	171e0 <lchmod@@Base+0xcc4>
   171d4:	cmp	r7, lr
   171d8:	bne	171ec <lchmod@@Base+0xcd0>
   171dc:	b	17cf8 <lchmod@@Base+0x17dc>
   171e0:	ldrb	r0, [ip, r7]
   171e4:	cmp	r0, #0
   171e8:	beq	17cf8 <lchmod@@Base+0x17dc>
   171ec:	mov	r9, #0
   171f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171f4:	cmp	r0, #0
   171f8:	beq	1722c <lchmod@@Base+0xd10>
   171fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17200:	add	r4, r7, r0
   17204:	cmp	r0, #2
   17208:	bcc	17224 <lchmod@@Base+0xd08>
   1720c:	cmn	lr, #1
   17210:	bne	17224 <lchmod@@Base+0xd08>
   17214:	mov	r0, ip
   17218:	bl	11970 <strlen@plt>
   1721c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17220:	mov	lr, r0
   17224:	cmp	r4, lr
   17228:	bls	17238 <lchmod@@Base+0xd1c>
   1722c:	mov	r0, #0
   17230:	str	r0, [fp, #-52]	; 0xffffffcc
   17234:	b	1727c <lchmod@@Base+0xd60>
   17238:	mov	r4, lr
   1723c:	add	r0, ip, r7
   17240:	ldr	r1, [fp, #-84]	; 0xffffffac
   17244:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17248:	bl	11964 <bcmp@plt>
   1724c:	cmp	r0, #0
   17250:	mov	r1, r0
   17254:	movwne	r1, #1
   17258:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1725c:	orr	r1, r1, r2
   17260:	tst	r1, #1
   17264:	beq	17dcc <lchmod@@Base+0x18b0>
   17268:	clz	r0, r0
   1726c:	lsr	r0, r0, #5
   17270:	str	r0, [fp, #-52]	; 0xffffffcc
   17274:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17278:	mov	lr, r4
   1727c:	ldrb	r4, [ip, r7]
   17280:	cmp	r4, #126	; 0x7e
   17284:	bhi	177b4 <lchmod@@Base+0x1298>
   17288:	mov	r6, #1
   1728c:	mov	r2, #110	; 0x6e
   17290:	mov	r0, #97	; 0x61
   17294:	add	r3, pc, #4
   17298:	mov	r1, #0
   1729c:	ldr	pc, [r3, r4, lsl #2]
   172a0:	andeq	r7, r1, r4, lsl r6
   172a4:			; <UNDEFINED> instruction: 0x000177b4
   172a8:			; <UNDEFINED> instruction: 0x000177b4
   172ac:			; <UNDEFINED> instruction: 0x000177b4
   172b0:			; <UNDEFINED> instruction: 0x000177b4
   172b4:			; <UNDEFINED> instruction: 0x000177b4
   172b8:			; <UNDEFINED> instruction: 0x000177b4
   172bc:	andeq	r7, r1, r8, lsl #17
   172c0:	strdeq	r7, [r1], -r4
   172c4:	andeq	r7, r1, ip, ror #11
   172c8:	andeq	r7, r1, r0, lsl #12
   172cc:	andeq	r7, r1, ip, lsl r7
   172d0:	andeq	r7, r1, r4, ror #11
   172d4:	strdeq	r7, [r1], -ip
   172d8:			; <UNDEFINED> instruction: 0x000177b4
   172dc:			; <UNDEFINED> instruction: 0x000177b4
   172e0:			; <UNDEFINED> instruction: 0x000177b4
   172e4:			; <UNDEFINED> instruction: 0x000177b4
   172e8:			; <UNDEFINED> instruction: 0x000177b4
   172ec:			; <UNDEFINED> instruction: 0x000177b4
   172f0:			; <UNDEFINED> instruction: 0x000177b4
   172f4:			; <UNDEFINED> instruction: 0x000177b4
   172f8:			; <UNDEFINED> instruction: 0x000177b4
   172fc:			; <UNDEFINED> instruction: 0x000177b4
   17300:			; <UNDEFINED> instruction: 0x000177b4
   17304:			; <UNDEFINED> instruction: 0x000177b4
   17308:			; <UNDEFINED> instruction: 0x000177b4
   1730c:			; <UNDEFINED> instruction: 0x000177b4
   17310:			; <UNDEFINED> instruction: 0x000177b4
   17314:			; <UNDEFINED> instruction: 0x000177b4
   17318:			; <UNDEFINED> instruction: 0x000177b4
   1731c:			; <UNDEFINED> instruction: 0x000177b4
   17320:	muleq	r1, r8, r5
   17324:	muleq	r1, ip, r5
   17328:	muleq	r1, ip, r5
   1732c:	andeq	r7, r1, r4, lsl #11
   17330:	muleq	r1, ip, r5
   17334:	muleq	r1, ip, r4
   17338:	muleq	r1, ip, r5
   1733c:	andeq	r7, r1, r4, lsr #14
   17340:	muleq	r1, ip, r5
   17344:	muleq	r1, ip, r5
   17348:	muleq	r1, ip, r5
   1734c:	muleq	r1, ip, r4
   17350:	muleq	r1, ip, r4
   17354:	muleq	r1, ip, r4
   17358:	muleq	r1, ip, r4
   1735c:	muleq	r1, ip, r4
   17360:	muleq	r1, ip, r4
   17364:	muleq	r1, ip, r4
   17368:	muleq	r1, ip, r4
   1736c:	muleq	r1, ip, r4
   17370:	muleq	r1, ip, r4
   17374:	muleq	r1, ip, r4
   17378:	muleq	r1, ip, r4
   1737c:	muleq	r1, ip, r4
   17380:	muleq	r1, ip, r4
   17384:	muleq	r1, ip, r4
   17388:	muleq	r1, ip, r4
   1738c:	muleq	r1, ip, r5
   17390:	muleq	r1, ip, r5
   17394:	muleq	r1, ip, r5
   17398:	muleq	r1, ip, r5
   1739c:	andeq	r7, r1, ip, ror #13
   173a0:			; <UNDEFINED> instruction: 0x000177b4
   173a4:	muleq	r1, ip, r4
   173a8:	muleq	r1, ip, r4
   173ac:	muleq	r1, ip, r4
   173b0:	muleq	r1, ip, r4
   173b4:	muleq	r1, ip, r4
   173b8:	muleq	r1, ip, r4
   173bc:	muleq	r1, ip, r4
   173c0:	muleq	r1, ip, r4
   173c4:	muleq	r1, ip, r4
   173c8:	muleq	r1, ip, r4
   173cc:	muleq	r1, ip, r4
   173d0:	muleq	r1, ip, r4
   173d4:	muleq	r1, ip, r4
   173d8:	muleq	r1, ip, r4
   173dc:	muleq	r1, ip, r4
   173e0:	muleq	r1, ip, r4
   173e4:	muleq	r1, ip, r4
   173e8:	muleq	r1, ip, r4
   173ec:	muleq	r1, ip, r4
   173f0:	muleq	r1, ip, r4
   173f4:	muleq	r1, ip, r4
   173f8:	muleq	r1, ip, r4
   173fc:	muleq	r1, ip, r4
   17400:	muleq	r1, ip, r4
   17404:	muleq	r1, ip, r4
   17408:	muleq	r1, ip, r4
   1740c:	muleq	r1, ip, r5
   17410:	andeq	r7, r1, r4, asr #11
   17414:	muleq	r1, ip, r4
   17418:	muleq	r1, ip, r5
   1741c:	muleq	r1, ip, r4
   17420:	muleq	r1, ip, r5
   17424:	muleq	r1, ip, r4
   17428:	muleq	r1, ip, r4
   1742c:	muleq	r1, ip, r4
   17430:	muleq	r1, ip, r4
   17434:	muleq	r1, ip, r4
   17438:	muleq	r1, ip, r4
   1743c:	muleq	r1, ip, r4
   17440:	muleq	r1, ip, r4
   17444:	muleq	r1, ip, r4
   17448:	muleq	r1, ip, r4
   1744c:	muleq	r1, ip, r4
   17450:	muleq	r1, ip, r4
   17454:	muleq	r1, ip, r4
   17458:	muleq	r1, ip, r4
   1745c:	muleq	r1, ip, r4
   17460:	muleq	r1, ip, r4
   17464:	muleq	r1, ip, r4
   17468:	muleq	r1, ip, r4
   1746c:	muleq	r1, ip, r4
   17470:	muleq	r1, ip, r4
   17474:	muleq	r1, ip, r4
   17478:	muleq	r1, ip, r4
   1747c:	muleq	r1, ip, r4
   17480:	muleq	r1, ip, r4
   17484:	muleq	r1, ip, r4
   17488:	muleq	r1, ip, r4
   1748c:	andeq	r7, r1, r8, asr r5
   17490:	muleq	r1, ip, r5
   17494:	andeq	r7, r1, r8, asr r5
   17498:	andeq	r7, r1, r4, lsl #11
   1749c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   174a0:	tst	r0, #1
   174a4:	bne	174d0 <lchmod@@Base+0xfb4>
   174a8:	ubfx	r0, r4, #5, #3
   174ac:	ldr	r1, [fp, #16]
   174b0:	ldr	r0, [r1, r0, lsl #2]
   174b4:	and	r1, r4, #31
   174b8:	mov	r2, #1
   174bc:	tst	r0, r2, lsl r1
   174c0:	beq	174d0 <lchmod@@Base+0xfb4>
   174c4:	mov	r0, r4
   174c8:	mov	r1, r6
   174cc:	b	174e4 <lchmod@@Base+0xfc8>
   174d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   174d4:	cmp	r0, #0
   174d8:	mov	r0, r4
   174dc:	mov	r1, r6
   174e0:	beq	1781c <lchmod@@Base+0x1300>
   174e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   174e8:	tst	r2, #1
   174ec:	bne	17de0 <lchmod@@Base+0x18c4>
   174f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   174f4:	subs	r2, r2, #2
   174f8:	movwne	r2, #1
   174fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17500:	orr	r2, r2, r3
   17504:	tst	r2, #1
   17508:	bne	17544 <lchmod@@Base+0x1028>
   1750c:	cmp	r8, sl
   17510:	movcc	r2, #39	; 0x27
   17514:	strbcc	r2, [r5, r8]
   17518:	add	r2, r8, #1
   1751c:	cmp	r2, sl
   17520:	movcc	r3, #36	; 0x24
   17524:	strbcc	r3, [r5, r2]
   17528:	add	r2, r8, #2
   1752c:	cmp	r2, sl
   17530:	movcc	r3, #39	; 0x27
   17534:	strbcc	r3, [r5, r2]
   17538:	add	r8, r8, #3
   1753c:	mov	r2, #1
   17540:	str	r2, [fp, #-56]	; 0xffffffc8
   17544:	cmp	r8, sl
   17548:	movcc	r2, #92	; 0x5c
   1754c:	strbcc	r2, [r5, r8]
   17550:	add	r8, r8, #1
   17554:	b	17860 <lchmod@@Base+0x1344>
   17558:	cmp	lr, #1
   1755c:	beq	17584 <lchmod@@Base+0x1068>
   17560:	mov	r6, #0
   17564:	cmn	lr, #1
   17568:	bne	17590 <lchmod@@Base+0x1074>
   1756c:	ldrb	r0, [ip, #1]
   17570:	cmp	r0, #0
   17574:	beq	17584 <lchmod@@Base+0x1068>
   17578:	mvn	lr, #0
   1757c:	mov	r9, #0
   17580:	b	1749c <lchmod@@Base+0xf80>
   17584:	mov	r6, #0
   17588:	cmp	r7, #0
   1758c:	beq	17598 <lchmod@@Base+0x107c>
   17590:	mov	r9, #0
   17594:	b	1749c <lchmod@@Base+0xf80>
   17598:	mov	r1, #1
   1759c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   175a0:	cmp	r0, #2
   175a4:	bne	175bc <lchmod@@Base+0x10a0>
   175a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   175ac:	tst	r0, #1
   175b0:	mov	r6, r1
   175b4:	beq	1749c <lchmod@@Base+0xf80>
   175b8:	b	17de0 <lchmod@@Base+0x18c4>
   175bc:	mov	r6, r1
   175c0:	b	1749c <lchmod@@Base+0xf80>
   175c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   175c8:	cmp	r0, #2
   175cc:	bne	17800 <lchmod@@Base+0x12e4>
   175d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   175d4:	tst	r0, #1
   175d8:	bne	17de0 <lchmod@@Base+0x18c4>
   175dc:	mov	r9, #0
   175e0:	b	17814 <lchmod@@Base+0x12f8>
   175e4:	mov	r0, #102	; 0x66
   175e8:	b	17888 <lchmod@@Base+0x136c>
   175ec:	mov	r2, #116	; 0x74
   175f0:	b	17600 <lchmod@@Base+0x10e4>
   175f4:	mov	r0, #98	; 0x62
   175f8:	b	17888 <lchmod@@Base+0x136c>
   175fc:	mov	r2, #114	; 0x72
   17600:	ldr	r0, [sp, #72]	; 0x48
   17604:	tst	r0, #1
   17608:	mov	r0, r2
   1760c:	bne	17888 <lchmod@@Base+0x136c>
   17610:	b	17de0 <lchmod@@Base+0x18c4>
   17614:	ldr	r0, [sp, #92]	; 0x5c
   17618:	tst	r0, #1
   1761c:	beq	178a4 <lchmod@@Base+0x1388>
   17620:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17624:	tst	r0, #1
   17628:	bne	17de0 <lchmod@@Base+0x18c4>
   1762c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17630:	subs	r0, r0, #2
   17634:	movwne	r0, #1
   17638:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1763c:	orr	r0, r0, r1
   17640:	tst	r0, #1
   17644:	bne	17680 <lchmod@@Base+0x1164>
   17648:	cmp	r8, sl
   1764c:	movcc	r0, #39	; 0x27
   17650:	strbcc	r0, [r5, r8]
   17654:	add	r0, r8, #1
   17658:	cmp	r0, sl
   1765c:	movcc	r1, #36	; 0x24
   17660:	strbcc	r1, [r5, r0]
   17664:	add	r0, r8, #2
   17668:	cmp	r0, sl
   1766c:	movcc	r1, #39	; 0x27
   17670:	strbcc	r1, [r5, r0]
   17674:	add	r8, r8, #3
   17678:	mov	r0, #1
   1767c:	str	r0, [fp, #-56]	; 0xffffffc8
   17680:	cmp	r8, sl
   17684:	movcc	r0, #92	; 0x5c
   17688:	strbcc	r0, [r5, r8]
   1768c:	add	r0, r8, #1
   17690:	mov	r6, #0
   17694:	mov	r9, #1
   17698:	mov	r4, #48	; 0x30
   1769c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   176a0:	cmp	r1, #2
   176a4:	beq	17a68 <lchmod@@Base+0x154c>
   176a8:	add	r1, r7, #1
   176ac:	cmp	r1, lr
   176b0:	bcs	17a68 <lchmod@@Base+0x154c>
   176b4:	ldrb	r1, [ip, r1]
   176b8:	sub	r1, r1, #48	; 0x30
   176bc:	uxtb	r1, r1
   176c0:	cmp	r1, #9
   176c4:	bhi	17a68 <lchmod@@Base+0x154c>
   176c8:	cmp	r0, sl
   176cc:	movcc	r1, #48	; 0x30
   176d0:	strbcc	r1, [r5, r0]
   176d4:	add	r0, r8, #2
   176d8:	cmp	r0, sl
   176dc:	movcc	r1, #48	; 0x30
   176e0:	strbcc	r1, [r5, r0]
   176e4:	add	r8, r8, #3
   176e8:	b	1749c <lchmod@@Base+0xf80>
   176ec:	mov	r9, #0
   176f0:	mov	r4, #63	; 0x3f
   176f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   176f8:	cmp	r0, #5
   176fc:	beq	17a70 <lchmod@@Base+0x1554>
   17700:	cmp	r0, #2
   17704:	bne	17b18 <lchmod@@Base+0x15fc>
   17708:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1770c:	tst	r0, #1
   17710:	mov	r6, #0
   17714:	beq	1749c <lchmod@@Base+0xf80>
   17718:	b	17de0 <lchmod@@Base+0x18c4>
   1771c:	mov	r0, #118	; 0x76
   17720:	b	17888 <lchmod@@Base+0x136c>
   17724:	mov	r4, #39	; 0x27
   17728:	mov	r0, #1
   1772c:	str	r0, [sp, #64]	; 0x40
   17730:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17734:	cmp	r0, #2
   17738:	bne	178c0 <lchmod@@Base+0x13a4>
   1773c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17740:	tst	r0, #1
   17744:	bne	17de0 <lchmod@@Base+0x18c4>
   17748:	ldr	r2, [sp, #84]	; 0x54
   1774c:	cmp	r2, #0
   17750:	mov	r0, r2
   17754:	movwne	r0, #1
   17758:	clz	r1, sl
   1775c:	lsr	r1, r1, #5
   17760:	orrs	r0, r0, r1
   17764:	moveq	r2, sl
   17768:	str	r2, [sp, #84]	; 0x54
   1776c:	moveq	sl, r0
   17770:	cmp	r8, sl
   17774:	movcc	r0, #39	; 0x27
   17778:	strbcc	r0, [r5, r8]
   1777c:	add	r0, r8, #1
   17780:	cmp	r0, sl
   17784:	movcc	r1, #92	; 0x5c
   17788:	strbcc	r1, [r5, r0]
   1778c:	add	r0, r8, #2
   17790:	cmp	r0, sl
   17794:	movcc	r1, #39	; 0x27
   17798:	strbcc	r1, [r5, r0]
   1779c:	add	r8, r8, #3
   177a0:	mov	r0, #0
   177a4:	str	r0, [fp, #-56]	; 0xffffffc8
   177a8:	mov	r9, #0
   177ac:	mov	r6, #1
   177b0:	b	1749c <lchmod@@Base+0xf80>
   177b4:	ldr	r0, [sp, #44]	; 0x2c
   177b8:	cmp	r0, #1
   177bc:	bne	178c8 <lchmod@@Base+0x13ac>
   177c0:	str	lr, [sp, #32]
   177c4:	bl	11934 <__ctype_b_loc@plt>
   177c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   177cc:	ldr	r0, [r0]
   177d0:	add	r0, r0, r4, lsl #1
   177d4:	ldrb	r0, [r0, #1]
   177d8:	ubfx	r6, r0, #6, #1
   177dc:	mov	r2, #1
   177e0:	ldr	r0, [sp, #60]	; 0x3c
   177e4:	orr	r1, r6, r0
   177e8:	cmp	r2, #1
   177ec:	bhi	17b20 <lchmod@@Base+0x1604>
   177f0:	tst	r1, #1
   177f4:	beq	17b20 <lchmod@@Base+0x1604>
   177f8:	ldr	lr, [sp, #32]
   177fc:	b	1749c <lchmod@@Base+0xf80>
   17800:	mov	r9, #0
   17804:	mov	r0, #92	; 0x5c
   17808:	ldr	r1, [sp, #56]	; 0x38
   1780c:	cmp	r1, #0
   17810:	beq	17888 <lchmod@@Base+0x136c>
   17814:	mov	r4, #92	; 0x5c
   17818:	mov	r6, #0
   1781c:	cmp	r9, #0
   17820:	bne	17858 <lchmod@@Base+0x133c>
   17824:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17828:	tst	r0, #1
   1782c:	beq	17858 <lchmod@@Base+0x133c>
   17830:	cmp	r8, sl
   17834:	movcc	r0, #39	; 0x27
   17838:	strbcc	r0, [r5, r8]
   1783c:	add	r0, r8, #1
   17840:	cmp	r0, sl
   17844:	movcc	r1, #39	; 0x27
   17848:	strbcc	r1, [r5, r0]
   1784c:	add	r8, r8, #2
   17850:	mov	r0, #0
   17854:	str	r0, [fp, #-56]	; 0xffffffc8
   17858:	mov	r1, r6
   1785c:	mov	r0, r4
   17860:	cmp	r8, sl
   17864:	strbcc	r0, [r5, r8]
   17868:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1786c:	and	r0, r0, r1
   17870:	str	r0, [fp, #-48]	; 0xffffffd0
   17874:	add	r8, r8, #1
   17878:	add	r7, r7, #1
   1787c:	cmn	lr, #1
   17880:	bne	171d4 <lchmod@@Base+0xcb8>
   17884:	b	171e0 <lchmod@@Base+0xcc4>
   17888:	mov	r9, #0
   1788c:	ldr	r1, [sp, #92]	; 0x5c
   17890:	tst	r1, #1
   17894:	mov	r6, #0
   17898:	mov	r1, #0
   1789c:	beq	1749c <lchmod@@Base+0xf80>
   178a0:	b	174e4 <lchmod@@Base+0xfc8>
   178a4:	mov	r4, #0
   178a8:	ldr	r0, [sp, #40]	; 0x28
   178ac:	cmp	r0, #0
   178b0:	mov	r9, #0
   178b4:	mov	r6, #0
   178b8:	beq	1749c <lchmod@@Base+0xf80>
   178bc:	b	17878 <lchmod@@Base+0x135c>
   178c0:	mov	r6, #1
   178c4:	b	1749c <lchmod@@Base+0xf80>
   178c8:	mov	r0, #0
   178cc:	str	r0, [fp, #-36]	; 0xffffffdc
   178d0:	str	r0, [fp, #-40]	; 0xffffffd8
   178d4:	cmn	lr, #1
   178d8:	bne	178ec <lchmod@@Base+0x13d0>
   178dc:	mov	r0, ip
   178e0:	bl	11970 <strlen@plt>
   178e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   178e8:	mov	lr, r0
   178ec:	ldr	r0, [sp, #76]	; 0x4c
   178f0:	add	r0, r0, r7
   178f4:	str	r0, [sp, #24]
   178f8:	mov	r6, #1
   178fc:	mov	r2, #0
   17900:	sub	r0, fp, #40	; 0x28
   17904:	mov	r3, r0
   17908:	str	r5, [sp, #28]
   1790c:	str	lr, [sp, #32]
   17910:	b	17954 <lchmod@@Base+0x1438>
   17914:	ldr	r5, [sp, #52]	; 0x34
   17918:	add	r5, r0, r5
   1791c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17920:	bl	11850 <iswprint@plt>
   17924:	cmp	r0, #0
   17928:	movwne	r0, #1
   1792c:	and	r6, r6, r0
   17930:	sub	r0, fp, #40	; 0x28
   17934:	bl	117e4 <mbsinit@plt>
   17938:	sub	r3, fp, #40	; 0x28
   1793c:	mov	r2, r5
   17940:	ldr	lr, [sp, #32]
   17944:	cmp	r0, #0
   17948:	ldr	r5, [sp, #28]
   1794c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17950:	bne	177e0 <lchmod@@Base+0x12c4>
   17954:	str	r2, [sp, #52]	; 0x34
   17958:	add	r0, r2, r7
   1795c:	add	r1, ip, r0
   17960:	str	r0, [sp, #48]	; 0x30
   17964:	sub	r2, lr, r0
   17968:	sub	r0, fp, #44	; 0x2c
   1796c:	bl	1a044 <lchmod@@Base+0x3b28>
   17970:	cmp	r0, #0
   17974:	beq	17cec <lchmod@@Base+0x17d0>
   17978:	cmn	r0, #1
   1797c:	beq	17ca8 <lchmod@@Base+0x178c>
   17980:	cmn	r0, #2
   17984:	ldr	lr, [sp, #32]
   17988:	beq	17cb0 <lchmod@@Base+0x1794>
   1798c:	cmp	r0, #2
   17990:	mov	r1, #0
   17994:	movwcc	r1, #1
   17998:	ldr	r2, [sp, #68]	; 0x44
   1799c:	eor	r2, r2, #1
   179a0:	orrs	r1, r2, r1
   179a4:	bne	17914 <lchmod@@Base+0x13f8>
   179a8:	ldr	r1, [sp, #52]	; 0x34
   179ac:	ldr	r2, [sp, #24]
   179b0:	add	r1, r2, r1
   179b4:	sub	r2, r0, #1
   179b8:	b	179c8 <lchmod@@Base+0x14ac>
   179bc:	add	r1, r1, #1
   179c0:	subs	r2, r2, #1
   179c4:	beq	17914 <lchmod@@Base+0x13f8>
   179c8:	ldrb	r3, [r1]
   179cc:	sub	r3, r3, #91	; 0x5b
   179d0:	cmp	r3, #33	; 0x21
   179d4:	bhi	179bc <lchmod@@Base+0x14a0>
   179d8:	add	r5, pc, #0
   179dc:	ldr	pc, [r5, r3, lsl #2]
   179e0:	ldrdeq	r7, [r1], -r8
   179e4:	ldrdeq	r7, [r1], -r8
   179e8:			; <UNDEFINED> instruction: 0x000179bc
   179ec:	ldrdeq	r7, [r1], -r8
   179f0:			; <UNDEFINED> instruction: 0x000179bc
   179f4:	ldrdeq	r7, [r1], -r8
   179f8:			; <UNDEFINED> instruction: 0x000179bc
   179fc:			; <UNDEFINED> instruction: 0x000179bc
   17a00:			; <UNDEFINED> instruction: 0x000179bc
   17a04:			; <UNDEFINED> instruction: 0x000179bc
   17a08:			; <UNDEFINED> instruction: 0x000179bc
   17a0c:			; <UNDEFINED> instruction: 0x000179bc
   17a10:			; <UNDEFINED> instruction: 0x000179bc
   17a14:			; <UNDEFINED> instruction: 0x000179bc
   17a18:			; <UNDEFINED> instruction: 0x000179bc
   17a1c:			; <UNDEFINED> instruction: 0x000179bc
   17a20:			; <UNDEFINED> instruction: 0x000179bc
   17a24:			; <UNDEFINED> instruction: 0x000179bc
   17a28:			; <UNDEFINED> instruction: 0x000179bc
   17a2c:			; <UNDEFINED> instruction: 0x000179bc
   17a30:			; <UNDEFINED> instruction: 0x000179bc
   17a34:			; <UNDEFINED> instruction: 0x000179bc
   17a38:			; <UNDEFINED> instruction: 0x000179bc
   17a3c:			; <UNDEFINED> instruction: 0x000179bc
   17a40:			; <UNDEFINED> instruction: 0x000179bc
   17a44:			; <UNDEFINED> instruction: 0x000179bc
   17a48:			; <UNDEFINED> instruction: 0x000179bc
   17a4c:			; <UNDEFINED> instruction: 0x000179bc
   17a50:			; <UNDEFINED> instruction: 0x000179bc
   17a54:			; <UNDEFINED> instruction: 0x000179bc
   17a58:			; <UNDEFINED> instruction: 0x000179bc
   17a5c:			; <UNDEFINED> instruction: 0x000179bc
   17a60:			; <UNDEFINED> instruction: 0x000179bc
   17a64:	ldrdeq	r7, [r1], -r8
   17a68:	mov	r8, r0
   17a6c:	b	1749c <lchmod@@Base+0xf80>
   17a70:	ldr	r0, [sp, #36]	; 0x24
   17a74:	cmp	r0, #0
   17a78:	beq	17b18 <lchmod@@Base+0x15fc>
   17a7c:	add	r0, r7, #2
   17a80:	cmp	r0, lr
   17a84:	bcs	17b18 <lchmod@@Base+0x15fc>
   17a88:	add	r1, r7, ip
   17a8c:	ldrb	r1, [r1, #1]
   17a90:	cmp	r1, #63	; 0x3f
   17a94:	bne	17b18 <lchmod@@Base+0x15fc>
   17a98:	ldrb	r1, [ip, r0]
   17a9c:	sub	r2, r1, #33	; 0x21
   17aa0:	cmp	r2, #29
   17aa4:	bhi	17b18 <lchmod@@Base+0x15fc>
   17aa8:	mov	r3, #1
   17aac:	movw	r6, #20929	; 0x51c1
   17ab0:	movt	r6, #14336	; 0x3800
   17ab4:	tst	r6, r3, lsl r2
   17ab8:	beq	17b18 <lchmod@@Base+0x15fc>
   17abc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17ac0:	tst	r2, #1
   17ac4:	bne	17de0 <lchmod@@Base+0x18c4>
   17ac8:	cmp	r8, sl
   17acc:	movcc	r2, #63	; 0x3f
   17ad0:	strbcc	r2, [r5, r8]
   17ad4:	add	r2, r8, #1
   17ad8:	cmp	r2, sl
   17adc:	movcc	r3, #34	; 0x22
   17ae0:	strbcc	r3, [r5, r2]
   17ae4:	add	r2, r8, #2
   17ae8:	cmp	r2, sl
   17aec:	movcc	r3, #34	; 0x22
   17af0:	strbcc	r3, [r5, r2]
   17af4:	add	r2, r8, #3
   17af8:	cmp	r2, sl
   17afc:	movcc	r3, #63	; 0x3f
   17b00:	strbcc	r3, [r5, r2]
   17b04:	add	r8, r8, #4
   17b08:	mov	r7, r0
   17b0c:	mov	r4, r1
   17b10:	mov	r6, #0
   17b14:	b	1749c <lchmod@@Base+0xf80>
   17b18:	mov	r6, #0
   17b1c:	b	1749c <lchmod@@Base+0xf80>
   17b20:	add	r0, r2, r7
   17b24:	str	r0, [sp, #52]	; 0x34
   17b28:	mov	r2, #0
   17b2c:	ldr	lr, [sp, #32]
   17b30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17b34:	str	r1, [sp, #48]	; 0x30
   17b38:	tst	r1, #1
   17b3c:	bne	17c18 <lchmod@@Base+0x16fc>
   17b40:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17b44:	tst	r1, #1
   17b48:	bne	17de0 <lchmod@@Base+0x18c4>
   17b4c:	mov	r3, r0
   17b50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b54:	subs	r1, r0, #2
   17b58:	movwne	r1, #1
   17b5c:	orr	r1, r1, r3
   17b60:	tst	r1, #1
   17b64:	bne	17b9c <lchmod@@Base+0x1680>
   17b68:	cmp	r8, sl
   17b6c:	movcc	r0, #39	; 0x27
   17b70:	strbcc	r0, [r5, r8]
   17b74:	add	r2, r8, #1
   17b78:	cmp	r2, sl
   17b7c:	movcc	r0, #36	; 0x24
   17b80:	strbcc	r0, [r5, r2]
   17b84:	add	r2, r8, #2
   17b88:	cmp	r2, sl
   17b8c:	movcc	r0, #39	; 0x27
   17b90:	strbcc	r0, [r5, r2]
   17b94:	add	r8, r8, #3
   17b98:	mov	r3, #1
   17b9c:	cmp	r8, sl
   17ba0:	movcc	r1, #92	; 0x5c
   17ba4:	strbcc	r1, [r5, r8]
   17ba8:	add	r2, r8, #1
   17bac:	cmp	r2, sl
   17bb0:	bcs	17bc4 <lchmod@@Base+0x16a8>
   17bb4:	uxtb	r1, r4
   17bb8:	mov	r0, #48	; 0x30
   17bbc:	orr	r1, r0, r1, lsr #6
   17bc0:	strb	r1, [r5, r2]
   17bc4:	add	r2, r8, #2
   17bc8:	cmp	r2, sl
   17bcc:	lsrcc	r1, r4, #3
   17bd0:	movcc	r0, #6
   17bd4:	bficc	r1, r0, #3, #29
   17bd8:	strbcc	r1, [r5, r2]
   17bdc:	mov	r0, #6
   17be0:	bfi	r4, r0, #3, #29
   17be4:	add	r8, r8, #3
   17be8:	mov	r2, #1
   17bec:	mov	r0, r3
   17bf0:	b	17c3c <lchmod@@Base+0x1720>
   17bf4:	cmp	r8, sl
   17bf8:	strbcc	r4, [r5, r8]
   17bfc:	ldr	r1, [sp, #76]	; 0x4c
   17c00:	ldrb	r4, [r1, r7]
   17c04:	add	r8, r8, #1
   17c08:	mov	r7, r3
   17c0c:	ldr	r1, [sp, #48]	; 0x30
   17c10:	tst	r1, #1
   17c14:	beq	17b40 <lchmod@@Base+0x1624>
   17c18:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17c1c:	tst	r1, #1
   17c20:	beq	17c34 <lchmod@@Base+0x1718>
   17c24:	cmp	r8, sl
   17c28:	movcc	r1, #92	; 0x5c
   17c2c:	strbcc	r1, [r5, r8]
   17c30:	add	r8, r8, #1
   17c34:	mov	r1, #0
   17c38:	str	r1, [fp, #-52]	; 0xffffffcc
   17c3c:	and	r9, r2, #1
   17c40:	add	r3, r7, #1
   17c44:	ldr	r1, [sp, #52]	; 0x34
   17c48:	cmp	r1, r3
   17c4c:	bls	17c90 <lchmod@@Base+0x1774>
   17c50:	cmp	r9, #0
   17c54:	movwne	r9, #1
   17c58:	mvn	r1, r0
   17c5c:	orr	r1, r1, r9
   17c60:	tst	r1, #1
   17c64:	bne	17bf4 <lchmod@@Base+0x16d8>
   17c68:	cmp	r8, sl
   17c6c:	movcc	r1, #39	; 0x27
   17c70:	strbcc	r1, [r5, r8]
   17c74:	add	r1, r8, #1
   17c78:	cmp	r1, sl
   17c7c:	movcc	r0, #39	; 0x27
   17c80:	strbcc	r0, [r5, r1]
   17c84:	add	r8, r8, #2
   17c88:	mov	r0, #0
   17c8c:	b	17bf4 <lchmod@@Base+0x16d8>
   17c90:	str	r0, [fp, #-56]	; 0xffffffc8
   17c94:	cmp	r9, #0
   17c98:	movwne	r9, #1
   17c9c:	cmp	r9, #0
   17ca0:	beq	17824 <lchmod@@Base+0x1308>
   17ca4:	b	17858 <lchmod@@Base+0x133c>
   17ca8:	mov	r6, #0
   17cac:	b	17cec <lchmod@@Base+0x17d0>
   17cb0:	mov	r6, #0
   17cb4:	ldr	r0, [sp, #48]	; 0x30
   17cb8:	cmp	r0, lr
   17cbc:	bcs	17cec <lchmod@@Base+0x17d0>
   17cc0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17cc4:	add	r0, ip, r7
   17cc8:	ldr	r2, [sp, #52]	; 0x34
   17ccc:	ldrb	r1, [r0, r2]
   17cd0:	cmp	r1, #0
   17cd4:	beq	177e0 <lchmod@@Base+0x12c4>
   17cd8:	add	r2, r2, #1
   17cdc:	add	r1, r7, r2
   17ce0:	cmp	r1, lr
   17ce4:	bcc	17ccc <lchmod@@Base+0x17b0>
   17ce8:	b	177e0 <lchmod@@Base+0x12c4>
   17cec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17cf0:	ldr	r2, [sp, #52]	; 0x34
   17cf4:	b	177e0 <lchmod@@Base+0x12c4>
   17cf8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17cfc:	eor	r0, r1, #2
   17d00:	orr	r0, r0, r8
   17d04:	clz	r0, r0
   17d08:	lsr	r0, r0, #5
   17d0c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17d10:	tst	r3, r0
   17d14:	bne	17de0 <lchmod@@Base+0x18c4>
   17d18:	mov	r6, r5
   17d1c:	subs	r0, r1, #2
   17d20:	movwne	r0, #1
   17d24:	orr	r0, r3, r0
   17d28:	tst	r0, #1
   17d2c:	ldr	r2, [sp, #92]	; 0x5c
   17d30:	ldreq	r0, [sp, #64]	; 0x40
   17d34:	eoreq	r0, r0, #1
   17d38:	tsteq	r0, #1
   17d3c:	bne	17d7c <lchmod@@Base+0x1860>
   17d40:	mov	r9, lr
   17d44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17d48:	tst	r0, #1
   17d4c:	bne	17e48 <lchmod@@Base+0x192c>
   17d50:	ldr	r0, [sp, #84]	; 0x54
   17d54:	cmp	r0, #0
   17d58:	beq	17d7c <lchmod@@Base+0x1860>
   17d5c:	mov	r0, #0
   17d60:	str	r0, [fp, #-48]	; 0xffffffd0
   17d64:	mov	r1, #2
   17d68:	cmp	sl, #0
   17d6c:	mov	r0, r2
   17d70:	mov	r4, r3
   17d74:	ldr	r7, [sp, #84]	; 0x54
   17d78:	beq	16f54 <lchmod@@Base+0xa38>
   17d7c:	ldr	r1, [fp, #-84]	; 0xffffffac
   17d80:	clz	r0, r1
   17d84:	lsr	r0, r0, #5
   17d88:	orr	r0, r0, r3
   17d8c:	tst	r0, #1
   17d90:	bne	17dbc <lchmod@@Base+0x18a0>
   17d94:	ldrb	r0, [r1]
   17d98:	cmp	r0, #0
   17d9c:	beq	17dbc <lchmod@@Base+0x18a0>
   17da0:	add	r1, r1, #1
   17da4:	cmp	r8, sl
   17da8:	strbcc	r0, [r6, r8]
   17dac:	add	r8, r8, #1
   17db0:	ldrb	r0, [r1], #1
   17db4:	cmp	r0, #0
   17db8:	bne	17da4 <lchmod@@Base+0x1888>
   17dbc:	cmp	r8, sl
   17dc0:	movcc	r0, #0
   17dc4:	strbcc	r0, [r6, r8]
   17dc8:	b	17e3c <lchmod@@Base+0x1920>
   17dcc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17dd0:	mov	lr, r4
   17dd4:	b	17de0 <lchmod@@Base+0x18c4>
   17dd8:	ldr	r5, [sp, #28]
   17ddc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17de0:	mov	r0, #0
   17de4:	ldr	r1, [fp, #12]
   17de8:	bic	r1, r1, #2
   17dec:	mov	r2, #2
   17df0:	ldr	r3, [sp, #92]	; 0x5c
   17df4:	tst	r3, #1
   17df8:	movwne	r2, #4
   17dfc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17e00:	cmp	r3, #2
   17e04:	movne	r2, r3
   17e08:	str	r2, [sp]
   17e0c:	str	r1, [sp, #4]
   17e10:	str	r0, [sp, #8]
   17e14:	ldr	r0, [sp, #80]	; 0x50
   17e18:	str	r0, [sp, #12]
   17e1c:	ldr	r0, [sp, #88]	; 0x58
   17e20:	str	r0, [sp, #16]
   17e24:	mov	r0, r5
   17e28:	mov	r1, sl
   17e2c:	mov	r2, ip
   17e30:	mov	r3, lr
   17e34:	bl	16ec8 <lchmod@@Base+0x9ac>
   17e38:	mov	r8, r0
   17e3c:	mov	r0, r8
   17e40:	sub	sp, fp, #28
   17e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e48:	mov	r0, #5
   17e4c:	str	r0, [sp]
   17e50:	ldr	r0, [fp, #12]
   17e54:	str	r0, [sp, #4]
   17e58:	ldr	r0, [fp, #16]
   17e5c:	str	r0, [sp, #8]
   17e60:	ldr	r0, [sp, #80]	; 0x50
   17e64:	str	r0, [sp, #12]
   17e68:	ldr	r0, [sp, #88]	; 0x58
   17e6c:	str	r0, [sp, #16]
   17e70:	mov	r0, r6
   17e74:	ldr	r1, [sp, #84]	; 0x54
   17e78:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17e7c:	mov	r3, r9
   17e80:	b	17e34 <lchmod@@Base+0x1918>
   17e84:	bl	11af0 <abort@plt>
   17e88:	mov	r3, r2
   17e8c:	mov	r2, #0
   17e90:	b	17e94 <lchmod@@Base+0x1978>
   17e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e98:	add	fp, sp, #28
   17e9c:	sub	sp, sp, #36	; 0x24
   17ea0:	mov	r4, r2
   17ea4:	str	r2, [sp, #24]
   17ea8:	mov	r5, r1
   17eac:	mov	r6, r0
   17eb0:	str	r0, [sp, #20]
   17eb4:	movw	r8, #49656	; 0xc1f8
   17eb8:	movt	r8, #2
   17ebc:	cmp	r3, #0
   17ec0:	movne	r8, r3
   17ec4:	bl	119a0 <__errno_location@plt>
   17ec8:	str	r0, [sp, #28]
   17ecc:	ldm	r8, {r3, r9}
   17ed0:	ldr	r1, [r8, #40]	; 0x28
   17ed4:	ldr	r2, [r8, #44]	; 0x2c
   17ed8:	ldr	r7, [r0]
   17edc:	str	r7, [sp, #32]
   17ee0:	add	sl, r8, #8
   17ee4:	cmp	r4, #0
   17ee8:	orreq	r9, r9, #1
   17eec:	stm	sp, {r3, r9, sl}
   17ef0:	str	r1, [sp, #12]
   17ef4:	str	r2, [sp, #16]
   17ef8:	mov	r0, #0
   17efc:	mov	r1, #0
   17f00:	mov	r2, r6
   17f04:	mov	r3, r5
   17f08:	mov	r7, r5
   17f0c:	bl	16ec8 <lchmod@@Base+0x9ac>
   17f10:	mov	r5, r0
   17f14:	add	r4, r0, #1
   17f18:	mov	r0, r4
   17f1c:	bl	19044 <lchmod@@Base+0x2b28>
   17f20:	mov	r6, r0
   17f24:	ldr	r0, [r8]
   17f28:	ldr	r1, [r8, #40]	; 0x28
   17f2c:	ldr	r2, [r8, #44]	; 0x2c
   17f30:	stm	sp, {r0, r9, sl}
   17f34:	str	r1, [sp, #12]
   17f38:	str	r2, [sp, #16]
   17f3c:	mov	r0, r6
   17f40:	mov	r1, r4
   17f44:	ldr	r2, [sp, #20]
   17f48:	mov	r3, r7
   17f4c:	bl	16ec8 <lchmod@@Base+0x9ac>
   17f50:	ldr	r0, [sp, #24]
   17f54:	ldr	r1, [sp, #32]
   17f58:	ldr	r2, [sp, #28]
   17f5c:	str	r1, [r2]
   17f60:	cmp	r0, #0
   17f64:	strne	r5, [r0]
   17f68:	mov	r0, r6
   17f6c:	sub	sp, fp, #28
   17f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17f78:	add	fp, sp, #24
   17f7c:	movw	r8, #49544	; 0xc188
   17f80:	movt	r8, #2
   17f84:	ldr	r4, [r8]
   17f88:	movw	r5, #49548	; 0xc18c
   17f8c:	movt	r5, #2
   17f90:	ldr	r0, [r5]
   17f94:	cmp	r0, #2
   17f98:	blt	17fc4 <lchmod@@Base+0x1aa8>
   17f9c:	add	r7, r4, #12
   17fa0:	mov	r6, #0
   17fa4:	ldr	r0, [r7, r6, lsl #3]
   17fa8:	bl	1331c <__assert_fail@plt+0x17cc>
   17fac:	add	r0, r6, #1
   17fb0:	ldr	r1, [r5]
   17fb4:	add	r2, r6, #2
   17fb8:	cmp	r2, r1
   17fbc:	mov	r6, r0
   17fc0:	blt	17fa4 <lchmod@@Base+0x1a88>
   17fc4:	ldr	r0, [r4, #4]
   17fc8:	movw	r9, #49704	; 0xc228
   17fcc:	movt	r9, #2
   17fd0:	cmp	r0, r9
   17fd4:	movw	r7, #49552	; 0xc190
   17fd8:	movt	r7, #2
   17fdc:	beq	17fec <lchmod@@Base+0x1ad0>
   17fe0:	bl	1331c <__assert_fail@plt+0x17cc>
   17fe4:	mov	r0, #256	; 0x100
   17fe8:	stm	r7, {r0, r9}
   17fec:	cmp	r4, r7
   17ff0:	beq	18000 <lchmod@@Base+0x1ae4>
   17ff4:	mov	r0, r4
   17ff8:	bl	1331c <__assert_fail@plt+0x17cc>
   17ffc:	str	r7, [r8]
   18000:	mov	r0, #1
   18004:	str	r0, [r5]
   18008:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1800c:	movw	r3, #49656	; 0xc1f8
   18010:	movt	r3, #2
   18014:	mvn	r2, #0
   18018:	b	1801c <lchmod@@Base+0x1b00>
   1801c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18020:	add	fp, sp, #28
   18024:	sub	sp, sp, #44	; 0x2c
   18028:	mov	r7, r3
   1802c:	str	r2, [sp, #36]	; 0x24
   18030:	str	r1, [sp, #32]
   18034:	mov	r5, r0
   18038:	bl	119a0 <__errno_location@plt>
   1803c:	cmp	r5, #0
   18040:	bmi	181b0 <lchmod@@Base+0x1c94>
   18044:	cmn	r5, #-2147483647	; 0x80000001
   18048:	beq	181b0 <lchmod@@Base+0x1c94>
   1804c:	movw	r4, #49544	; 0xc188
   18050:	movt	r4, #2
   18054:	ldr	r6, [r4]
   18058:	str	r0, [sp, #28]
   1805c:	ldr	r0, [r0]
   18060:	str	r0, [sp, #24]
   18064:	movw	r8, #49548	; 0xc18c
   18068:	movt	r8, #2
   1806c:	ldr	r1, [r8]
   18070:	cmp	r1, r5
   18074:	ble	18080 <lchmod@@Base+0x1b64>
   18078:	mov	sl, r6
   1807c:	b	180ec <lchmod@@Base+0x1bd0>
   18080:	str	r1, [fp, #-32]	; 0xffffffe0
   18084:	mov	r0, #8
   18088:	str	r0, [sp]
   1808c:	movw	r9, #49552	; 0xc190
   18090:	movt	r9, #2
   18094:	subs	r0, r6, r9
   18098:	movne	r0, r6
   1809c:	sub	r1, r5, r1
   180a0:	add	r2, r1, #1
   180a4:	sub	r1, fp, #32
   180a8:	mvn	r3, #-2147483648	; 0x80000000
   180ac:	bl	19120 <lchmod@@Base+0x2c04>
   180b0:	mov	sl, r0
   180b4:	str	r0, [r4]
   180b8:	cmp	r6, r9
   180bc:	bne	180c8 <lchmod@@Base+0x1bac>
   180c0:	ldrd	r0, [r9]
   180c4:	stm	sl, {r0, r1}
   180c8:	ldr	r1, [r8]
   180cc:	add	r0, sl, r1, lsl #3
   180d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   180d4:	sub	r1, r2, r1
   180d8:	lsl	r2, r1, #3
   180dc:	mov	r1, #0
   180e0:	bl	119c4 <memset@plt>
   180e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   180e8:	str	r0, [r8]
   180ec:	mov	r9, sl
   180f0:	ldr	r6, [r9, r5, lsl #3]!
   180f4:	ldr	r4, [r9, #4]!
   180f8:	ldm	r7, {r0, r1}
   180fc:	ldr	r2, [r7, #40]	; 0x28
   18100:	ldr	r3, [r7, #44]	; 0x2c
   18104:	orr	r8, r1, #1
   18108:	add	r1, r7, #8
   1810c:	stm	sp, {r0, r8}
   18110:	str	r1, [sp, #20]
   18114:	add	r0, sp, #8
   18118:	stm	r0, {r1, r2, r3}
   1811c:	mov	r0, r4
   18120:	mov	r1, r6
   18124:	ldr	r2, [sp, #32]
   18128:	ldr	r3, [sp, #36]	; 0x24
   1812c:	bl	16ec8 <lchmod@@Base+0x9ac>
   18130:	cmp	r6, r0
   18134:	bhi	18198 <lchmod@@Base+0x1c7c>
   18138:	add	r6, r0, #1
   1813c:	str	r6, [sl, r5, lsl #3]
   18140:	movw	r0, #49704	; 0xc228
   18144:	movt	r0, #2
   18148:	cmp	r4, r0
   1814c:	beq	18158 <lchmod@@Base+0x1c3c>
   18150:	mov	r0, r4
   18154:	bl	1331c <__assert_fail@plt+0x17cc>
   18158:	mov	r0, r6
   1815c:	bl	19044 <lchmod@@Base+0x2b28>
   18160:	mov	r4, r0
   18164:	str	r0, [r9]
   18168:	ldr	r0, [r7]
   1816c:	ldr	r1, [r7, #40]	; 0x28
   18170:	ldr	r2, [r7, #44]	; 0x2c
   18174:	stm	sp, {r0, r8}
   18178:	ldr	r0, [sp, #20]
   1817c:	add	r3, sp, #8
   18180:	stm	r3, {r0, r1, r2}
   18184:	mov	r0, r4
   18188:	mov	r1, r6
   1818c:	ldr	r2, [sp, #32]
   18190:	ldr	r3, [sp, #36]	; 0x24
   18194:	bl	16ec8 <lchmod@@Base+0x9ac>
   18198:	ldr	r0, [sp, #28]
   1819c:	ldr	r1, [sp, #24]
   181a0:	str	r1, [r0]
   181a4:	mov	r0, r4
   181a8:	sub	sp, fp, #28
   181ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181b0:	bl	11af0 <abort@plt>
   181b4:	movw	r3, #49656	; 0xc1f8
   181b8:	movt	r3, #2
   181bc:	b	1801c <lchmod@@Base+0x1b00>
   181c0:	mov	r1, r0
   181c4:	mov	r0, #0
   181c8:	b	1800c <lchmod@@Base+0x1af0>
   181cc:	mov	r2, r1
   181d0:	mov	r1, r0
   181d4:	mov	r0, #0
   181d8:	b	181b4 <lchmod@@Base+0x1c98>
   181dc:	push	{r4, r5, r6, sl, fp, lr}
   181e0:	add	fp, sp, #16
   181e4:	sub	sp, sp, #48	; 0x30
   181e8:	mov	r4, r2
   181ec:	mov	r5, r0
   181f0:	mov	r6, sp
   181f4:	mov	r0, r6
   181f8:	bl	18218 <lchmod@@Base+0x1cfc>
   181fc:	mov	r0, r5
   18200:	mov	r1, r4
   18204:	mvn	r2, #0
   18208:	mov	r3, r6
   1820c:	bl	1801c <lchmod@@Base+0x1b00>
   18210:	sub	sp, fp, #16
   18214:	pop	{r4, r5, r6, sl, fp, pc}
   18218:	push	{fp, lr}
   1821c:	mov	fp, sp
   18220:	vmov.i32	q8, #0	; 0x00000000
   18224:	mov	r2, #32
   18228:	mov	r3, r0
   1822c:	vst1.32	{d16-d17}, [r3], r2
   18230:	vst1.32	{d16-d17}, [r3]
   18234:	add	r2, r0, #16
   18238:	vst1.32	{d16-d17}, [r2]
   1823c:	cmp	r1, #10
   18240:	strne	r1, [r0]
   18244:	popne	{fp, pc}
   18248:	bl	11af0 <abort@plt>
   1824c:	push	{r4, r5, r6, r7, fp, lr}
   18250:	add	fp, sp, #16
   18254:	sub	sp, sp, #48	; 0x30
   18258:	mov	r4, r3
   1825c:	mov	r5, r2
   18260:	mov	r6, r0
   18264:	mov	r7, sp
   18268:	mov	r0, r7
   1826c:	bl	18218 <lchmod@@Base+0x1cfc>
   18270:	mov	r0, r6
   18274:	mov	r1, r5
   18278:	mov	r2, r4
   1827c:	mov	r3, r7
   18280:	bl	1801c <lchmod@@Base+0x1b00>
   18284:	sub	sp, fp, #16
   18288:	pop	{r4, r5, r6, r7, fp, pc}
   1828c:	mov	r2, r1
   18290:	mov	r1, r0
   18294:	mov	r0, #0
   18298:	b	181dc <lchmod@@Base+0x1cc0>
   1829c:	mov	r3, r2
   182a0:	mov	r2, r1
   182a4:	mov	r1, r0
   182a8:	mov	r0, #0
   182ac:	b	1824c <lchmod@@Base+0x1d30>
   182b0:	push	{r4, r5, r6, sl, fp, lr}
   182b4:	add	fp, sp, #16
   182b8:	sub	sp, sp, #48	; 0x30
   182bc:	mov	r4, r1
   182c0:	mov	r5, r0
   182c4:	movw	r0, #49656	; 0xc1f8
   182c8:	movt	r0, #2
   182cc:	add	r1, r0, #16
   182d0:	mov	r3, #32
   182d4:	vld1.64	{d16-d17}, [r0], r3
   182d8:	vld1.64	{d18-d19}, [r1]
   182dc:	mov	r6, sp
   182e0:	add	r1, r6, #16
   182e4:	vld1.64	{d20-d21}, [r0]
   182e8:	vst1.64	{d18-d19}, [r1]
   182ec:	mov	r0, r6
   182f0:	vst1.64	{d16-d17}, [r0], r3
   182f4:	vst1.64	{d20-d21}, [r0]
   182f8:	mov	r0, r6
   182fc:	mov	r1, r2
   18300:	mov	r2, #1
   18304:	bl	16dbc <lchmod@@Base+0x8a0>
   18308:	mov	r0, #0
   1830c:	mov	r1, r5
   18310:	mov	r2, r4
   18314:	mov	r3, r6
   18318:	bl	1801c <lchmod@@Base+0x1b00>
   1831c:	sub	sp, fp, #16
   18320:	pop	{r4, r5, r6, sl, fp, pc}
   18324:	mov	r2, r1
   18328:	mvn	r1, #0
   1832c:	b	182b0 <lchmod@@Base+0x1d94>
   18330:	mov	r1, #58	; 0x3a
   18334:	b	18324 <lchmod@@Base+0x1e08>
   18338:	mov	r2, #58	; 0x3a
   1833c:	b	182b0 <lchmod@@Base+0x1d94>
   18340:	push	{r4, r5, r6, sl, fp, lr}
   18344:	add	fp, sp, #16
   18348:	sub	sp, sp, #48	; 0x30
   1834c:	mov	r4, r2
   18350:	mov	r5, r0
   18354:	mov	r6, sp
   18358:	mov	r0, r6
   1835c:	bl	18218 <lchmod@@Base+0x1cfc>
   18360:	mov	r0, r6
   18364:	mov	r1, #58	; 0x3a
   18368:	mov	r2, #1
   1836c:	bl	16dbc <lchmod@@Base+0x8a0>
   18370:	mov	r0, r5
   18374:	mov	r1, r4
   18378:	mvn	r2, #0
   1837c:	mov	r3, r6
   18380:	bl	1801c <lchmod@@Base+0x1b00>
   18384:	sub	sp, fp, #16
   18388:	pop	{r4, r5, r6, sl, fp, pc}
   1838c:	push	{fp, lr}
   18390:	mov	fp, sp
   18394:	sub	sp, sp, #8
   18398:	mvn	ip, #0
   1839c:	str	ip, [sp]
   183a0:	bl	183ac <lchmod@@Base+0x1e90>
   183a4:	mov	sp, fp
   183a8:	pop	{fp, pc}
   183ac:	push	{r4, r5, r6, r7, fp, lr}
   183b0:	add	fp, sp, #16
   183b4:	sub	sp, sp, #48	; 0x30
   183b8:	mov	r7, r3
   183bc:	mov	r5, r0
   183c0:	movw	r0, #49656	; 0xc1f8
   183c4:	movt	r0, #2
   183c8:	add	r3, r0, #16
   183cc:	mov	r4, #32
   183d0:	vld1.64	{d16-d17}, [r0], r4
   183d4:	vld1.64	{d18-d19}, [r3]
   183d8:	mov	r6, sp
   183dc:	add	r3, r6, #16
   183e0:	vld1.64	{d20-d21}, [r0]
   183e4:	vst1.64	{d18-d19}, [r3]
   183e8:	mov	r0, r6
   183ec:	vst1.64	{d16-d17}, [r0], r4
   183f0:	vst1.64	{d20-d21}, [r0]
   183f4:	mov	r0, r6
   183f8:	bl	16e14 <lchmod@@Base+0x8f8>
   183fc:	ldr	r2, [fp, #8]
   18400:	mov	r0, r5
   18404:	mov	r1, r7
   18408:	mov	r3, r6
   1840c:	bl	1801c <lchmod@@Base+0x1b00>
   18410:	sub	sp, fp, #16
   18414:	pop	{r4, r5, r6, r7, fp, pc}
   18418:	mov	r3, r2
   1841c:	mov	r2, r1
   18420:	mov	r1, r0
   18424:	mov	r0, #0
   18428:	b	1838c <lchmod@@Base+0x1e70>
   1842c:	push	{fp, lr}
   18430:	mov	fp, sp
   18434:	sub	sp, sp, #8
   18438:	mov	ip, r2
   1843c:	mov	r2, r1
   18440:	mov	r1, r0
   18444:	str	r3, [sp]
   18448:	mov	r0, #0
   1844c:	mov	r3, ip
   18450:	bl	183ac <lchmod@@Base+0x1e90>
   18454:	mov	sp, fp
   18458:	pop	{fp, pc}
   1845c:	movw	r3, #49560	; 0xc198
   18460:	movt	r3, #2
   18464:	b	1801c <lchmod@@Base+0x1b00>
   18468:	mov	r2, r1
   1846c:	mov	r1, r0
   18470:	mov	r0, #0
   18474:	b	1845c <lchmod@@Base+0x1f40>
   18478:	mvn	r2, #0
   1847c:	b	1845c <lchmod@@Base+0x1f40>
   18480:	mov	r1, r0
   18484:	mov	r0, #0
   18488:	b	18478 <lchmod@@Base+0x1f5c>
   1848c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18490:	add	fp, sp, #24
   18494:	sub	sp, sp, #16
   18498:	mov	r4, r1
   1849c:	mov	r5, r0
   184a0:	mov	r7, #0
   184a4:	mov	r0, #0
   184a8:	mov	r1, r5
   184ac:	mov	r2, #5
   184b0:	bl	117fc <dcgettext@plt>
   184b4:	cmp	r0, r5
   184b8:	beq	184c4 <lchmod@@Base+0x1fa8>
   184bc:	sub	sp, fp, #24
   184c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   184c4:	bl	1a00c <lchmod@@Base+0x3af0>
   184c8:	mov	r6, r0
   184cc:	mov	r8, #56	; 0x38
   184d0:	mov	r0, #45	; 0x2d
   184d4:	stm	sp, {r0, r8}
   184d8:	str	r7, [sp, #8]
   184dc:	str	r7, [sp, #12]
   184e0:	mov	r0, r6
   184e4:	mov	r1, #85	; 0x55
   184e8:	mov	r2, #84	; 0x54
   184ec:	mov	r3, #70	; 0x46
   184f0:	bl	18588 <lchmod@@Base+0x206c>
   184f4:	cmp	r0, #0
   184f8:	beq	18514 <lchmod@@Base+0x1ff8>
   184fc:	ldrb	r1, [r5]
   18500:	movw	r2, #43835	; 0xab3b
   18504:	movt	r2, #1
   18508:	movw	r0, #43839	; 0xab3f
   1850c:	movt	r0, #1
   18510:	b	18558 <lchmod@@Base+0x203c>
   18514:	mov	r0, #48	; 0x30
   18518:	mov	r1, #51	; 0x33
   1851c:	str	r8, [sp]
   18520:	stmib	sp, {r0, r1}
   18524:	str	r0, [sp, #12]
   18528:	mov	r0, r6
   1852c:	mov	r1, #71	; 0x47
   18530:	mov	r2, #66	; 0x42
   18534:	mov	r3, #49	; 0x31
   18538:	bl	18588 <lchmod@@Base+0x206c>
   1853c:	cmp	r0, #0
   18540:	beq	18568 <lchmod@@Base+0x204c>
   18544:	ldrb	r1, [r5]
   18548:	movw	r2, #43843	; 0xab43
   1854c:	movt	r2, #1
   18550:	movw	r0, #43847	; 0xab47
   18554:	movt	r0, #1
   18558:	cmp	r1, #96	; 0x60
   1855c:	moveq	r0, r2
   18560:	sub	sp, fp, #24
   18564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18568:	movw	r1, #43829	; 0xab35
   1856c:	movt	r1, #1
   18570:	movw	r0, #43833	; 0xab39
   18574:	movt	r0, #1
   18578:	cmp	r4, #9
   1857c:	moveq	r0, r1
   18580:	sub	sp, fp, #24
   18584:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18588:	push	{r4, r5, r6, r7, fp, lr}
   1858c:	add	fp, sp, #16
   18590:	sub	sp, sp, #16
   18594:	mov	r4, r3
   18598:	mov	r5, r2
   1859c:	mov	r7, r1
   185a0:	mov	r6, r0
   185a4:	mov	r0, r1
   185a8:	bl	199a8 <lchmod@@Base+0x348c>
   185ac:	ldrb	r1, [r6]
   185b0:	cmp	r0, #0
   185b4:	andne	r1, r1, #223	; 0xdf
   185b8:	mov	r0, #0
   185bc:	cmp	r1, r7
   185c0:	bne	185f8 <lchmod@@Base+0x20dc>
   185c4:	cmp	r7, #0
   185c8:	beq	18600 <lchmod@@Base+0x20e4>
   185cc:	ldr	r0, [fp, #20]
   185d0:	ldr	r1, [fp, #16]
   185d4:	ldr	r2, [fp, #12]
   185d8:	ldr	r3, [fp, #8]
   185dc:	str	r2, [sp]
   185e0:	str	r1, [sp, #4]
   185e4:	str	r0, [sp, #8]
   185e8:	mov	r0, r6
   185ec:	mov	r1, r5
   185f0:	mov	r2, r4
   185f4:	bl	1860c <lchmod@@Base+0x20f0>
   185f8:	sub	sp, fp, #16
   185fc:	pop	{r4, r5, r6, r7, fp, pc}
   18600:	mov	r0, #1
   18604:	sub	sp, fp, #16
   18608:	pop	{r4, r5, r6, r7, fp, pc}
   1860c:	push	{r4, r5, r6, r7, fp, lr}
   18610:	add	fp, sp, #16
   18614:	sub	sp, sp, #8
   18618:	mov	r4, r3
   1861c:	mov	r5, r2
   18620:	mov	r7, r1
   18624:	mov	r6, r0
   18628:	mov	r0, r1
   1862c:	bl	199a8 <lchmod@@Base+0x348c>
   18630:	ldrb	r1, [r6, #1]
   18634:	cmp	r0, #0
   18638:	andne	r1, r1, #223	; 0xdf
   1863c:	mov	r0, #0
   18640:	cmp	r1, r7
   18644:	bne	18674 <lchmod@@Base+0x2158>
   18648:	cmp	r7, #0
   1864c:	beq	1867c <lchmod@@Base+0x2160>
   18650:	ldr	r0, [fp, #16]
   18654:	ldr	r1, [fp, #12]
   18658:	ldr	r3, [fp, #8]
   1865c:	str	r1, [sp]
   18660:	str	r0, [sp, #4]
   18664:	mov	r0, r6
   18668:	mov	r1, r5
   1866c:	mov	r2, r4
   18670:	bl	18688 <lchmod@@Base+0x216c>
   18674:	sub	sp, fp, #16
   18678:	pop	{r4, r5, r6, r7, fp, pc}
   1867c:	mov	r0, #1
   18680:	sub	sp, fp, #16
   18684:	pop	{r4, r5, r6, r7, fp, pc}
   18688:	push	{r4, r5, r6, r7, fp, lr}
   1868c:	add	fp, sp, #16
   18690:	sub	sp, sp, #8
   18694:	mov	r4, r3
   18698:	mov	r5, r2
   1869c:	mov	r7, r1
   186a0:	mov	r6, r0
   186a4:	mov	r0, r1
   186a8:	bl	199a8 <lchmod@@Base+0x348c>
   186ac:	ldrb	r1, [r6, #2]
   186b0:	cmp	r0, #0
   186b4:	andne	r1, r1, #223	; 0xdf
   186b8:	mov	r0, #0
   186bc:	cmp	r1, r7
   186c0:	bne	186e8 <lchmod@@Base+0x21cc>
   186c4:	cmp	r7, #0
   186c8:	beq	186f0 <lchmod@@Base+0x21d4>
   186cc:	ldr	r0, [fp, #12]
   186d0:	ldr	r3, [fp, #8]
   186d4:	str	r0, [sp]
   186d8:	mov	r0, r6
   186dc:	mov	r1, r5
   186e0:	mov	r2, r4
   186e4:	bl	186fc <lchmod@@Base+0x21e0>
   186e8:	sub	sp, fp, #16
   186ec:	pop	{r4, r5, r6, r7, fp, pc}
   186f0:	mov	r0, #1
   186f4:	sub	sp, fp, #16
   186f8:	pop	{r4, r5, r6, r7, fp, pc}
   186fc:	push	{r4, r5, r6, r7, fp, lr}
   18700:	add	fp, sp, #16
   18704:	mov	r4, r3
   18708:	mov	r5, r2
   1870c:	mov	r7, r1
   18710:	mov	r6, r0
   18714:	mov	r0, r1
   18718:	bl	199a8 <lchmod@@Base+0x348c>
   1871c:	ldrb	r1, [r6, #3]
   18720:	ldr	r3, [fp, #8]
   18724:	cmp	r0, #0
   18728:	andne	r1, r1, #223	; 0xdf
   1872c:	mov	r0, #0
   18730:	cmp	r1, r7
   18734:	bne	18758 <lchmod@@Base+0x223c>
   18738:	cmp	r7, #0
   1873c:	beq	18754 <lchmod@@Base+0x2238>
   18740:	mov	r0, r6
   18744:	mov	r1, r5
   18748:	mov	r2, r4
   1874c:	pop	{r4, r5, r6, r7, fp, lr}
   18750:	b	1875c <lchmod@@Base+0x2240>
   18754:	mov	r0, #1
   18758:	pop	{r4, r5, r6, r7, fp, pc}
   1875c:	push	{r4, r5, r6, r7, fp, lr}
   18760:	add	fp, sp, #16
   18764:	mov	r4, r3
   18768:	mov	r5, r2
   1876c:	mov	r7, r1
   18770:	mov	r6, r0
   18774:	mov	r0, r1
   18778:	bl	199a8 <lchmod@@Base+0x348c>
   1877c:	ldrb	r1, [r6, #4]
   18780:	cmp	r0, #0
   18784:	andne	r1, r1, #223	; 0xdf
   18788:	mov	r0, #0
   1878c:	cmp	r1, r7
   18790:	bne	187b4 <lchmod@@Base+0x2298>
   18794:	cmp	r7, #0
   18798:	beq	187b0 <lchmod@@Base+0x2294>
   1879c:	mov	r0, r6
   187a0:	mov	r1, r5
   187a4:	mov	r2, r4
   187a8:	pop	{r4, r5, r6, r7, fp, lr}
   187ac:	b	187b8 <lchmod@@Base+0x229c>
   187b0:	mov	r0, #1
   187b4:	pop	{r4, r5, r6, r7, fp, pc}
   187b8:	push	{r4, r5, r6, sl, fp, lr}
   187bc:	add	fp, sp, #16
   187c0:	mov	r4, r2
   187c4:	mov	r6, r1
   187c8:	mov	r5, r0
   187cc:	mov	r0, r1
   187d0:	bl	199a8 <lchmod@@Base+0x348c>
   187d4:	ldrb	r1, [r5, #5]
   187d8:	cmp	r0, #0
   187dc:	andne	r1, r1, #223	; 0xdf
   187e0:	mov	r0, #0
   187e4:	cmp	r1, r6
   187e8:	bne	18808 <lchmod@@Base+0x22ec>
   187ec:	cmp	r6, #0
   187f0:	beq	18804 <lchmod@@Base+0x22e8>
   187f4:	mov	r0, r5
   187f8:	mov	r1, r4
   187fc:	pop	{r4, r5, r6, sl, fp, lr}
   18800:	b	1880c <lchmod@@Base+0x22f0>
   18804:	mov	r0, #1
   18808:	pop	{r4, r5, r6, sl, fp, pc}
   1880c:	push	{r4, r5, fp, lr}
   18810:	add	fp, sp, #8
   18814:	mov	r5, r1
   18818:	mov	r4, r0
   1881c:	mov	r0, r1
   18820:	bl	199a8 <lchmod@@Base+0x348c>
   18824:	ldrb	r1, [r4, #6]
   18828:	cmp	r0, #0
   1882c:	andne	r1, r1, #223	; 0xdf
   18830:	mov	r0, #0
   18834:	cmp	r1, r5
   18838:	popne	{r4, r5, fp, pc}
   1883c:	cmp	r5, #0
   18840:	beq	18850 <lchmod@@Base+0x2334>
   18844:	mov	r0, r4
   18848:	pop	{r4, r5, fp, lr}
   1884c:	b	18858 <lchmod@@Base+0x233c>
   18850:	mov	r0, #1
   18854:	pop	{r4, r5, fp, pc}
   18858:	push	{r4, sl, fp, lr}
   1885c:	add	fp, sp, #8
   18860:	mov	r4, r0
   18864:	mov	r0, #0
   18868:	bl	199a8 <lchmod@@Base+0x348c>
   1886c:	ldrb	r1, [r4, #7]
   18870:	cmp	r0, #0
   18874:	beq	18888 <lchmod@@Base+0x236c>
   18878:	tst	r1, #223	; 0xdf
   1887c:	bne	18890 <lchmod@@Base+0x2374>
   18880:	mov	r0, #1
   18884:	pop	{r4, sl, fp, pc}
   18888:	cmp	r1, #0
   1888c:	beq	18880 <lchmod@@Base+0x2364>
   18890:	mov	r0, #0
   18894:	pop	{r4, sl, fp, pc}
   18898:	push	{r4, r5, r6, sl, fp, lr}
   1889c:	add	fp, sp, #16
   188a0:	mov	r5, r1
   188a4:	ldr	r4, [r0], #8
   188a8:	cmp	r4, r0
   188ac:	beq	188d0 <lchmod@@Base+0x23b4>
   188b0:	mov	r0, r4
   188b4:	mov	r1, r5
   188b8:	bl	194d4 <lchmod@@Base+0x2fb8>
   188bc:	mov	r6, r0
   188c0:	cmp	r0, #0
   188c4:	moveq	r6, r4
   188c8:	mov	r0, r6
   188cc:	pop	{r4, r5, r6, sl, fp, pc}
   188d0:	mov	r0, r5
   188d4:	bl	194a4 <lchmod@@Base+0x2f88>
   188d8:	cmp	r0, #0
   188dc:	beq	188f8 <lchmod@@Base+0x23dc>
   188e0:	mov	r6, r0
   188e4:	mov	r1, r4
   188e8:	mov	r2, r5
   188ec:	bl	117d8 <memcpy@plt>
   188f0:	mov	r0, r6
   188f4:	pop	{r4, r5, r6, sl, fp, pc}
   188f8:	mov	r6, #0
   188fc:	mov	r0, r6
   18900:	pop	{r4, r5, r6, sl, fp, pc}
   18904:	push	{r4, r5, fp, lr}
   18908:	add	fp, sp, #8
   1890c:	mov	r4, r0
   18910:	ldr	r5, [r0, #4]
   18914:	bl	18960 <lchmod@@Base+0x2444>
   18918:	ldr	r0, [r4, #4]
   1891c:	cmp	r0, r5, lsl #1
   18920:	bhi	18944 <lchmod@@Base+0x2428>
   18924:	lsl	r5, r5, #1
   18928:	mov	r0, r5
   1892c:	bl	194a4 <lchmod@@Base+0x2f88>
   18930:	cmp	r0, #0
   18934:	stmne	r4, {r0, r5}
   18938:	movne	r0, #1
   1893c:	popne	{r4, r5, fp, pc}
   18940:	b	18950 <lchmod@@Base+0x2434>
   18944:	bl	119a0 <__errno_location@plt>
   18948:	mov	r1, #12
   1894c:	str	r1, [r0]
   18950:	mov	r0, r4
   18954:	bl	18974 <lchmod@@Base+0x2458>
   18958:	mov	r0, #0
   1895c:	pop	{r4, r5, fp, pc}
   18960:	mov	r1, r0
   18964:	ldr	r0, [r1], #8
   18968:	cmp	r0, r1
   1896c:	bxeq	lr
   18970:	b	1331c <__assert_fail@plt+0x17cc>
   18974:	mov	r1, #1024	; 0x400
   18978:	add	r2, r0, #8
   1897c:	str	r2, [r0]
   18980:	str	r1, [r0, #4]
   18984:	bx	lr
   18988:	push	{r4, r5, r6, r7, fp, lr}
   1898c:	add	fp, sp, #16
   18990:	mov	r4, r0
   18994:	add	r5, r0, #8
   18998:	ldrd	r0, [r0]
   1899c:	lsl	r7, r1, #1
   189a0:	cmp	r0, r5
   189a4:	beq	189c8 <lchmod@@Base+0x24ac>
   189a8:	cmp	r7, r1
   189ac:	bcc	189fc <lchmod@@Base+0x24e0>
   189b0:	mov	r1, r7
   189b4:	bl	194d4 <lchmod@@Base+0x2fb8>
   189b8:	mov	r6, r0
   189bc:	cmp	r0, #0
   189c0:	bne	189e8 <lchmod@@Base+0x24cc>
   189c4:	b	18a08 <lchmod@@Base+0x24ec>
   189c8:	mov	r0, r7
   189cc:	bl	194a4 <lchmod@@Base+0x2f88>
   189d0:	cmp	r0, #0
   189d4:	beq	189f4 <lchmod@@Base+0x24d8>
   189d8:	mov	r6, r0
   189dc:	ldr	r2, [r4, #4]
   189e0:	mov	r1, r5
   189e4:	bl	117d8 <memcpy@plt>
   189e8:	strd	r6, [r4]
   189ec:	mov	r0, #1
   189f0:	pop	{r4, r5, r6, r7, fp, pc}
   189f4:	mov	r0, #0
   189f8:	pop	{r4, r5, r6, r7, fp, pc}
   189fc:	bl	119a0 <__errno_location@plt>
   18a00:	mov	r1, #12
   18a04:	str	r1, [r0]
   18a08:	ldr	r0, [r4]
   18a0c:	bl	1331c <__assert_fail@plt+0x17cc>
   18a10:	mov	r0, r4
   18a14:	bl	18a20 <lchmod@@Base+0x2504>
   18a18:	mov	r0, #0
   18a1c:	pop	{r4, r5, r6, r7, fp, pc}
   18a20:	mov	r1, #1024	; 0x400
   18a24:	add	r2, r0, #8
   18a28:	str	r2, [r0]
   18a2c:	str	r1, [r0, #4]
   18a30:	bx	lr
   18a34:	push	{r4, sl, fp, lr}
   18a38:	add	fp, sp, #8
   18a3c:	mov	r4, r1
   18a40:	bl	11958 <getfilecon@plt>
   18a44:	mov	r1, r4
   18a48:	pop	{r4, sl, fp, lr}
   18a4c:	b	18a50 <lchmod@@Base+0x2534>
   18a50:	push	{r4, r5, fp, lr}
   18a54:	add	fp, sp, #8
   18a58:	cmp	r0, #10
   18a5c:	beq	18a74 <lchmod@@Base+0x2558>
   18a60:	cmp	r0, #0
   18a64:	bne	18abc <lchmod@@Base+0x25a0>
   18a68:	bl	119a0 <__errno_location@plt>
   18a6c:	mov	r1, #95	; 0x5f
   18a70:	b	18ab4 <lchmod@@Base+0x2598>
   18a74:	mov	r4, r1
   18a78:	ldr	r5, [r1]
   18a7c:	movw	r1, #43936	; 0xaba0
   18a80:	movt	r1, #1
   18a84:	mov	r0, r5
   18a88:	bl	11778 <strcmp@plt>
   18a8c:	mov	r1, r0
   18a90:	mov	r0, #10
   18a94:	cmp	r1, #0
   18a98:	popne	{r4, r5, fp, pc}
   18a9c:	mov	r0, r5
   18aa0:	bl	11a90 <freecon@plt>
   18aa4:	mov	r0, #0
   18aa8:	str	r0, [r4]
   18aac:	bl	119a0 <__errno_location@plt>
   18ab0:	mov	r1, #61	; 0x3d
   18ab4:	str	r1, [r0]
   18ab8:	mvn	r0, #0
   18abc:	pop	{r4, r5, fp, pc}
   18ac0:	push	{r4, sl, fp, lr}
   18ac4:	add	fp, sp, #8
   18ac8:	mov	r4, r1
   18acc:	bl	118e0 <lgetfilecon@plt>
   18ad0:	mov	r1, r4
   18ad4:	pop	{r4, sl, fp, lr}
   18ad8:	b	18a50 <lchmod@@Base+0x2534>
   18adc:	push	{r4, sl, fp, lr}
   18ae0:	add	fp, sp, #8
   18ae4:	mov	r4, r1
   18ae8:	bl	11820 <fgetfilecon@plt>
   18aec:	mov	r1, r4
   18af0:	pop	{r4, sl, fp, lr}
   18af4:	b	18a50 <lchmod@@Base+0x2534>
   18af8:	push	{r4, r5, r6, r7, fp, lr}
   18afc:	add	fp, sp, #16
   18b00:	mov	r4, r0
   18b04:	cmp	r0, #2
   18b08:	bhi	18b38 <lchmod@@Base+0x261c>
   18b0c:	mov	r0, r4
   18b10:	bl	1a0e4 <lchmod@@Base+0x3bc8>
   18b14:	mov	r5, r0
   18b18:	bl	119a0 <__errno_location@plt>
   18b1c:	mov	r6, r0
   18b20:	ldr	r7, [r0]
   18b24:	mov	r0, r4
   18b28:	bl	11afc <close@plt>
   18b2c:	str	r7, [r6]
   18b30:	mov	r0, r5
   18b34:	pop	{r4, r5, r6, r7, fp, pc}
   18b38:	mov	r0, r4
   18b3c:	pop	{r4, r5, r6, r7, fp, pc}
   18b40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b44:	add	fp, sp, #24
   18b48:	sub	sp, sp, #32
   18b4c:	mov	r4, r2
   18b50:	mov	r8, r0
   18b54:	ldr	r6, [fp, #12]
   18b58:	ldr	r7, [fp, #8]
   18b5c:	cmp	r1, #0
   18b60:	beq	18b88 <lchmod@@Base+0x266c>
   18b64:	mov	r5, r1
   18b68:	str	r4, [sp]
   18b6c:	str	r3, [sp, #4]
   18b70:	movw	r2, #43946	; 0xabaa
   18b74:	movt	r2, #1
   18b78:	mov	r0, r8
   18b7c:	mov	r1, #1
   18b80:	mov	r3, r5
   18b84:	b	18ba0 <lchmod@@Base+0x2684>
   18b88:	str	r3, [sp]
   18b8c:	movw	r2, #43958	; 0xabb6
   18b90:	movt	r2, #1
   18b94:	mov	r0, r8
   18b98:	mov	r1, #1
   18b9c:	mov	r3, r4
   18ba0:	bl	119e8 <__fprintf_chk@plt>
   18ba4:	movw	r1, #43965	; 0xabbd
   18ba8:	movt	r1, #1
   18bac:	mov	r0, #0
   18bb0:	mov	r2, #5
   18bb4:	bl	117fc <dcgettext@plt>
   18bb8:	mov	r3, r0
   18bbc:	movw	r0, #2022	; 0x7e6
   18bc0:	str	r0, [sp]
   18bc4:	movw	r2, #44683	; 0xae8b
   18bc8:	movt	r2, #1
   18bcc:	mov	r0, r8
   18bd0:	mov	r1, #1
   18bd4:	bl	119e8 <__fprintf_chk@plt>
   18bd8:	movw	r4, #43291	; 0xa91b
   18bdc:	movt	r4, #1
   18be0:	mov	r0, r4
   18be4:	mov	r1, r8
   18be8:	bl	11754 <fputs_unlocked@plt>
   18bec:	movw	r1, #43969	; 0xabc1
   18bf0:	movt	r1, #1
   18bf4:	mov	r0, #0
   18bf8:	mov	r2, #5
   18bfc:	bl	117fc <dcgettext@plt>
   18c00:	mov	r2, r0
   18c04:	movw	r3, #44140	; 0xac6c
   18c08:	movt	r3, #1
   18c0c:	mov	r0, r8
   18c10:	mov	r1, #1
   18c14:	bl	119e8 <__fprintf_chk@plt>
   18c18:	mov	r0, r4
   18c1c:	mov	r1, r8
   18c20:	bl	11754 <fputs_unlocked@plt>
   18c24:	cmp	r6, #9
   18c28:	bhi	18c64 <lchmod@@Base+0x2748>
   18c2c:	add	r0, pc, #0
   18c30:	ldr	pc, [r0, r6, lsl #2]
   18c34:	andeq	r8, r1, ip, asr ip
   18c38:	andeq	r8, r1, r0, ror ip
   18c3c:	andeq	r8, r1, r0, lsr #25
   18c40:	andeq	r8, r1, r8, asr #25
   18c44:	strdeq	r8, [r1], -r0
   18c48:	andeq	r8, r1, r8, lsl sp
   18c4c:	andeq	r8, r1, r0, asr #26
   18c50:	andeq	r8, r1, r8, ror sp
   18c54:	andeq	r8, r1, r8, lsl lr
   18c58:	andeq	r8, r1, r0, asr #27
   18c5c:	sub	sp, fp, #24
   18c60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c64:	movw	r1, #44493	; 0xadcd
   18c68:	movt	r1, #1
   18c6c:	b	18dc8 <lchmod@@Base+0x28ac>
   18c70:	movw	r1, #44174	; 0xac8e
   18c74:	movt	r1, #1
   18c78:	mov	r0, #0
   18c7c:	mov	r2, #5
   18c80:	bl	117fc <dcgettext@plt>
   18c84:	mov	r2, r0
   18c88:	ldr	r3, [r7]
   18c8c:	mov	r0, r8
   18c90:	mov	r1, #1
   18c94:	sub	sp, fp, #24
   18c98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c9c:	b	119e8 <__fprintf_chk@plt>
   18ca0:	movw	r1, #44190	; 0xac9e
   18ca4:	movt	r1, #1
   18ca8:	mov	r0, #0
   18cac:	mov	r2, #5
   18cb0:	bl	117fc <dcgettext@plt>
   18cb4:	mov	r2, r0
   18cb8:	ldr	r3, [r7]
   18cbc:	ldr	r0, [r7, #4]
   18cc0:	str	r0, [sp]
   18cc4:	b	18db4 <lchmod@@Base+0x2898>
   18cc8:	movw	r1, #44213	; 0xacb5
   18ccc:	movt	r1, #1
   18cd0:	mov	r0, #0
   18cd4:	mov	r2, #5
   18cd8:	bl	117fc <dcgettext@plt>
   18cdc:	mov	r2, r0
   18ce0:	ldr	r3, [r7]
   18ce4:	ldmib	r7, {r0, r1}
   18ce8:	stm	sp, {r0, r1}
   18cec:	b	18db4 <lchmod@@Base+0x2898>
   18cf0:	movw	r1, #44241	; 0xacd1
   18cf4:	movt	r1, #1
   18cf8:	mov	r0, #0
   18cfc:	mov	r2, #5
   18d00:	bl	117fc <dcgettext@plt>
   18d04:	mov	r2, r0
   18d08:	ldr	r3, [r7]
   18d0c:	ldmib	r7, {r0, r1, r7}
   18d10:	stm	sp, {r0, r1, r7}
   18d14:	b	18db4 <lchmod@@Base+0x2898>
   18d18:	movw	r1, #44273	; 0xacf1
   18d1c:	movt	r1, #1
   18d20:	mov	r0, #0
   18d24:	mov	r2, #5
   18d28:	bl	117fc <dcgettext@plt>
   18d2c:	mov	r2, r0
   18d30:	ldr	r3, [r7]
   18d34:	ldmib	r7, {r0, r1, r6, r7}
   18d38:	stm	sp, {r0, r1, r6, r7}
   18d3c:	b	18db4 <lchmod@@Base+0x2898>
   18d40:	movw	r1, #44309	; 0xad15
   18d44:	movt	r1, #1
   18d48:	mov	r0, #0
   18d4c:	mov	r2, #5
   18d50:	bl	117fc <dcgettext@plt>
   18d54:	mov	r2, r0
   18d58:	ldr	r3, [r7]
   18d5c:	ldmib	r7, {r0, r1, r6}
   18d60:	ldr	r5, [r7, #16]
   18d64:	ldr	r7, [r7, #20]
   18d68:	stm	sp, {r0, r1, r6}
   18d6c:	str	r5, [sp, #12]
   18d70:	str	r7, [sp, #16]
   18d74:	b	18db4 <lchmod@@Base+0x2898>
   18d78:	movw	r1, #44349	; 0xad3d
   18d7c:	movt	r1, #1
   18d80:	mov	r0, #0
   18d84:	mov	r2, #5
   18d88:	bl	117fc <dcgettext@plt>
   18d8c:	mov	r2, r0
   18d90:	ldr	r3, [r7]
   18d94:	ldmib	r7, {r0, r1, r6}
   18d98:	ldr	r5, [r7, #16]
   18d9c:	ldr	r4, [r7, #20]
   18da0:	ldr	r7, [r7, #24]
   18da4:	stm	sp, {r0, r1, r6}
   18da8:	str	r5, [sp, #12]
   18dac:	str	r4, [sp, #16]
   18db0:	str	r7, [sp, #20]
   18db4:	mov	r0, r8
   18db8:	mov	r1, #1
   18dbc:	b	18e68 <lchmod@@Base+0x294c>
   18dc0:	movw	r1, #44441	; 0xad99
   18dc4:	movt	r1, #1
   18dc8:	mov	r0, #0
   18dcc:	mov	r2, #5
   18dd0:	bl	117fc <dcgettext@plt>
   18dd4:	mov	ip, r0
   18dd8:	ldr	r3, [r7]
   18ddc:	ldr	r0, [r7, #4]
   18de0:	ldr	r1, [r7, #8]
   18de4:	ldr	r6, [r7, #12]
   18de8:	ldr	r5, [r7, #16]
   18dec:	ldr	r4, [r7, #20]
   18df0:	ldr	r2, [r7, #24]
   18df4:	ldr	lr, [r7, #28]
   18df8:	ldr	r7, [r7, #32]
   18dfc:	stm	sp, {r0, r1, r6}
   18e00:	str	r5, [sp, #12]
   18e04:	str	r4, [sp, #16]
   18e08:	str	r2, [sp, #20]
   18e0c:	str	lr, [sp, #24]
   18e10:	str	r7, [sp, #28]
   18e14:	b	18e5c <lchmod@@Base+0x2940>
   18e18:	movw	r1, #44393	; 0xad69
   18e1c:	movt	r1, #1
   18e20:	mov	r0, #0
   18e24:	mov	r2, #5
   18e28:	bl	117fc <dcgettext@plt>
   18e2c:	mov	ip, r0
   18e30:	ldr	r3, [r7]
   18e34:	ldmib	r7, {r0, r1, r6}
   18e38:	ldr	r5, [r7, #16]
   18e3c:	ldr	r4, [r7, #20]
   18e40:	ldr	r2, [r7, #24]
   18e44:	ldr	r7, [r7, #28]
   18e48:	stm	sp, {r0, r1, r6}
   18e4c:	str	r5, [sp, #12]
   18e50:	str	r4, [sp, #16]
   18e54:	str	r2, [sp, #20]
   18e58:	str	r7, [sp, #24]
   18e5c:	mov	r0, r8
   18e60:	mov	r1, #1
   18e64:	mov	r2, ip
   18e68:	bl	119e8 <__fprintf_chk@plt>
   18e6c:	sub	sp, fp, #24
   18e70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e74:	push	{r4, sl, fp, lr}
   18e78:	add	fp, sp, #8
   18e7c:	sub	sp, sp, #8
   18e80:	mov	lr, #0
   18e84:	ldr	ip, [fp, #8]
   18e88:	ldr	r4, [ip, lr, lsl #2]
   18e8c:	add	lr, lr, #1
   18e90:	cmp	r4, #0
   18e94:	bne	18e88 <lchmod@@Base+0x296c>
   18e98:	sub	r4, lr, #1
   18e9c:	str	ip, [sp]
   18ea0:	str	r4, [sp, #4]
   18ea4:	bl	18b40 <lchmod@@Base+0x2624>
   18ea8:	sub	sp, fp, #8
   18eac:	pop	{r4, sl, fp, pc}
   18eb0:	push	{r4, r5, fp, lr}
   18eb4:	add	fp, sp, #8
   18eb8:	sub	sp, sp, #48	; 0x30
   18ebc:	mov	ip, #0
   18ec0:	ldr	r4, [fp, #8]
   18ec4:	add	lr, sp, #8
   18ec8:	ldr	r5, [r4]
   18ecc:	str	r5, [lr, ip, lsl #2]
   18ed0:	cmp	r5, #0
   18ed4:	beq	18eec <lchmod@@Base+0x29d0>
   18ed8:	add	ip, ip, #1
   18edc:	add	r4, r4, #4
   18ee0:	cmp	ip, #10
   18ee4:	bne	18ec8 <lchmod@@Base+0x29ac>
   18ee8:	mov	ip, #10
   18eec:	str	lr, [sp]
   18ef0:	str	ip, [sp, #4]
   18ef4:	bl	18b40 <lchmod@@Base+0x2624>
   18ef8:	sub	sp, fp, #8
   18efc:	pop	{r4, r5, fp, pc}
   18f00:	push	{fp, lr}
   18f04:	mov	fp, sp
   18f08:	sub	sp, sp, #8
   18f0c:	add	ip, fp, #8
   18f10:	str	ip, [sp, #4]
   18f14:	str	ip, [sp]
   18f18:	bl	18eb0 <lchmod@@Base+0x2994>
   18f1c:	mov	sp, fp
   18f20:	pop	{fp, pc}
   18f24:	push	{fp, lr}
   18f28:	mov	fp, sp
   18f2c:	movw	r0, #49628	; 0xc1dc
   18f30:	movt	r0, #2
   18f34:	ldr	r1, [r0]
   18f38:	movw	r0, #43291	; 0xa91b
   18f3c:	movt	r0, #1
   18f40:	bl	11754 <fputs_unlocked@plt>
   18f44:	movw	r1, #44553	; 0xae09
   18f48:	movt	r1, #1
   18f4c:	mov	r0, #0
   18f50:	mov	r2, #5
   18f54:	bl	117fc <dcgettext@plt>
   18f58:	mov	r1, r0
   18f5c:	movw	r2, #44573	; 0xae1d
   18f60:	movt	r2, #1
   18f64:	mov	r0, #1
   18f68:	bl	119d0 <__printf_chk@plt>
   18f6c:	movw	r1, #44595	; 0xae33
   18f70:	movt	r1, #1
   18f74:	mov	r0, #0
   18f78:	mov	r2, #5
   18f7c:	bl	117fc <dcgettext@plt>
   18f80:	mov	r1, r0
   18f84:	movw	r2, #42703	; 0xa6cf
   18f88:	movt	r2, #1
   18f8c:	movw	r3, #43100	; 0xa85c
   18f90:	movt	r3, #1
   18f94:	mov	r0, #1
   18f98:	bl	119d0 <__printf_chk@plt>
   18f9c:	movw	r1, #44615	; 0xae47
   18fa0:	movt	r1, #1
   18fa4:	mov	r0, #0
   18fa8:	mov	r2, #5
   18fac:	bl	117fc <dcgettext@plt>
   18fb0:	mov	r1, r0
   18fb4:	movw	r2, #44654	; 0xae6e
   18fb8:	movt	r2, #1
   18fbc:	mov	r0, #1
   18fc0:	pop	{fp, lr}
   18fc4:	b	119d0 <__printf_chk@plt>
   18fc8:	b	18fcc <lchmod@@Base+0x2ab0>
   18fcc:	push	{r4, r5, r6, sl, fp, lr}
   18fd0:	add	fp, sp, #16
   18fd4:	mov	r4, r2
   18fd8:	mov	r5, r1
   18fdc:	mov	r6, r0
   18fe0:	bl	1a0a8 <lchmod@@Base+0x3b8c>
   18fe4:	cmp	r0, #0
   18fe8:	popne	{r4, r5, r6, sl, fp, pc}
   18fec:	cmp	r6, #0
   18ff0:	beq	19004 <lchmod@@Base+0x2ae8>
   18ff4:	cmp	r5, #0
   18ff8:	cmpne	r4, #0
   18ffc:	bne	19004 <lchmod@@Base+0x2ae8>
   19000:	pop	{r4, r5, r6, sl, fp, pc}
   19004:	bl	19390 <lchmod@@Base+0x2e74>
   19008:	push	{fp, lr}
   1900c:	mov	fp, sp
   19010:	bl	194a4 <lchmod@@Base+0x2f88>
   19014:	pop	{fp, lr}
   19018:	b	1901c <lchmod@@Base+0x2b00>
   1901c:	cmp	r0, #0
   19020:	bxne	lr
   19024:	push	{fp, lr}
   19028:	mov	fp, sp
   1902c:	bl	19390 <lchmod@@Base+0x2e74>
   19030:	push	{fp, lr}
   19034:	mov	fp, sp
   19038:	bl	19fd8 <lchmod@@Base+0x3abc>
   1903c:	pop	{fp, lr}
   19040:	b	1901c <lchmod@@Base+0x2b00>
   19044:	b	19008 <lchmod@@Base+0x2aec>
   19048:	push	{r4, r5, fp, lr}
   1904c:	add	fp, sp, #8
   19050:	mov	r4, r1
   19054:	mov	r5, r0
   19058:	bl	194d4 <lchmod@@Base+0x2fb8>
   1905c:	cmp	r0, #0
   19060:	popne	{r4, r5, fp, pc}
   19064:	cmp	r5, #0
   19068:	beq	19078 <lchmod@@Base+0x2b5c>
   1906c:	cmp	r4, #0
   19070:	bne	19078 <lchmod@@Base+0x2b5c>
   19074:	pop	{r4, r5, fp, pc}
   19078:	bl	19390 <lchmod@@Base+0x2e74>
   1907c:	push	{fp, lr}
   19080:	mov	fp, sp
   19084:	bl	19fdc <lchmod@@Base+0x3ac0>
   19088:	pop	{fp, lr}
   1908c:	b	1901c <lchmod@@Base+0x2b00>
   19090:	push	{fp, lr}
   19094:	mov	fp, sp
   19098:	bl	19fec <lchmod@@Base+0x3ad0>
   1909c:	pop	{fp, lr}
   190a0:	b	1901c <lchmod@@Base+0x2b00>
   190a4:	mov	r2, r1
   190a8:	mov	r1, r0
   190ac:	mov	r0, #0
   190b0:	b	18fcc <lchmod@@Base+0x2ab0>
   190b4:	mov	r2, r1
   190b8:	mov	r1, r0
   190bc:	mov	r0, #0
   190c0:	b	19090 <lchmod@@Base+0x2b74>
   190c4:	mov	r2, #1
   190c8:	b	190cc <lchmod@@Base+0x2bb0>
   190cc:	push	{r4, r5, fp, lr}
   190d0:	add	fp, sp, #8
   190d4:	mov	r4, r1
   190d8:	ldr	r5, [r1]
   190dc:	cmp	r0, #0
   190e0:	beq	190f8 <lchmod@@Base+0x2bdc>
   190e4:	mov	r1, #1
   190e8:	add	r1, r1, r5, lsr #1
   190ec:	adds	r5, r5, r1
   190f0:	bcc	19110 <lchmod@@Base+0x2bf4>
   190f4:	bl	19390 <lchmod@@Base+0x2e74>
   190f8:	cmp	r5, #0
   190fc:	bne	19110 <lchmod@@Base+0x2bf4>
   19100:	mov	r1, #64	; 0x40
   19104:	udiv	r5, r1, r2
   19108:	cmp	r2, #64	; 0x40
   1910c:	addhi	r5, r5, #1
   19110:	mov	r1, r5
   19114:	bl	18fcc <lchmod@@Base+0x2ab0>
   19118:	str	r5, [r4]
   1911c:	pop	{r4, r5, fp, pc}
   19120:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19124:	add	fp, sp, #24
   19128:	mov	r8, r1
   1912c:	ldr	r6, [r1]
   19130:	add	r1, r6, r6, asr #1
   19134:	cmp	r1, r6
   19138:	mvnvs	r1, #-2147483648	; 0x80000000
   1913c:	cmp	r1, r3
   19140:	mov	r5, r1
   19144:	movgt	r5, r3
   19148:	cmn	r3, #1
   1914c:	movle	r5, r1
   19150:	ldr	r4, [fp, #8]
   19154:	cmn	r4, #1
   19158:	ble	19180 <lchmod@@Base+0x2c64>
   1915c:	cmp	r4, #0
   19160:	beq	191d4 <lchmod@@Base+0x2cb8>
   19164:	cmn	r5, #1
   19168:	ble	191a8 <lchmod@@Base+0x2c8c>
   1916c:	mvn	r7, #-2147483648	; 0x80000000
   19170:	udiv	r1, r7, r4
   19174:	cmp	r1, r5
   19178:	bge	191d4 <lchmod@@Base+0x2cb8>
   1917c:	b	191e4 <lchmod@@Base+0x2cc8>
   19180:	cmn	r5, #1
   19184:	ble	191c4 <lchmod@@Base+0x2ca8>
   19188:	cmn	r4, #1
   1918c:	beq	191d4 <lchmod@@Base+0x2cb8>
   19190:	mov	r1, #-2147483648	; 0x80000000
   19194:	sdiv	r1, r1, r4
   19198:	mvn	r7, #-2147483648	; 0x80000000
   1919c:	cmp	r1, r5
   191a0:	bge	191d4 <lchmod@@Base+0x2cb8>
   191a4:	b	191e4 <lchmod@@Base+0x2cc8>
   191a8:	beq	191d4 <lchmod@@Base+0x2cb8>
   191ac:	mov	r1, #-2147483648	; 0x80000000
   191b0:	sdiv	r1, r1, r5
   191b4:	mvn	r7, #-2147483648	; 0x80000000
   191b8:	cmp	r1, r4
   191bc:	bge	191d4 <lchmod@@Base+0x2cb8>
   191c0:	b	191e4 <lchmod@@Base+0x2cc8>
   191c4:	mvn	r7, #-2147483648	; 0x80000000
   191c8:	sdiv	r1, r7, r4
   191cc:	cmp	r5, r1
   191d0:	blt	191e4 <lchmod@@Base+0x2cc8>
   191d4:	mul	r1, r5, r4
   191d8:	mov	r7, #64	; 0x40
   191dc:	cmp	r1, #63	; 0x3f
   191e0:	bgt	191ec <lchmod@@Base+0x2cd0>
   191e4:	sdiv	r5, r7, r4
   191e8:	mul	r1, r5, r4
   191ec:	cmp	r0, #0
   191f0:	moveq	r7, #0
   191f4:	streq	r7, [r8]
   191f8:	sub	r7, r5, r6
   191fc:	cmp	r7, r2
   19200:	bge	192ac <lchmod@@Base+0x2d90>
   19204:	add	r5, r6, r2
   19208:	mov	r1, #0
   1920c:	cmp	r5, r3
   19210:	mov	r2, #0
   19214:	movwgt	r2, #1
   19218:	cmn	r3, #1
   1921c:	movwgt	r1, #1
   19220:	cmp	r5, r6
   19224:	bvs	19294 <lchmod@@Base+0x2d78>
   19228:	ands	r1, r1, r2
   1922c:	bne	19294 <lchmod@@Base+0x2d78>
   19230:	cmn	r4, #1
   19234:	ble	1925c <lchmod@@Base+0x2d40>
   19238:	cmp	r4, #0
   1923c:	beq	192a8 <lchmod@@Base+0x2d8c>
   19240:	cmn	r5, #1
   19244:	ble	19280 <lchmod@@Base+0x2d64>
   19248:	mvn	r1, #-2147483648	; 0x80000000
   1924c:	udiv	r1, r1, r4
   19250:	cmp	r1, r5
   19254:	bge	192a8 <lchmod@@Base+0x2d8c>
   19258:	b	19294 <lchmod@@Base+0x2d78>
   1925c:	cmn	r5, #1
   19260:	ble	19298 <lchmod@@Base+0x2d7c>
   19264:	cmn	r4, #1
   19268:	beq	192a8 <lchmod@@Base+0x2d8c>
   1926c:	mov	r1, #-2147483648	; 0x80000000
   19270:	sdiv	r1, r1, r4
   19274:	cmp	r1, r5
   19278:	bge	192a8 <lchmod@@Base+0x2d8c>
   1927c:	b	19294 <lchmod@@Base+0x2d78>
   19280:	beq	192a8 <lchmod@@Base+0x2d8c>
   19284:	mov	r1, #-2147483648	; 0x80000000
   19288:	sdiv	r1, r1, r5
   1928c:	cmp	r1, r4
   19290:	bge	192a8 <lchmod@@Base+0x2d8c>
   19294:	bl	19390 <lchmod@@Base+0x2e74>
   19298:	mvn	r1, #-2147483648	; 0x80000000
   1929c:	sdiv	r1, r1, r4
   192a0:	cmp	r5, r1
   192a4:	blt	19294 <lchmod@@Base+0x2d78>
   192a8:	mul	r1, r5, r4
   192ac:	bl	19048 <lchmod@@Base+0x2b2c>
   192b0:	str	r5, [r8]
   192b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192b8:	mov	r1, #1
   192bc:	b	192c0 <lchmod@@Base+0x2da4>
   192c0:	push	{fp, lr}
   192c4:	mov	fp, sp
   192c8:	bl	19450 <lchmod@@Base+0x2f34>
   192cc:	pop	{fp, lr}
   192d0:	b	1901c <lchmod@@Base+0x2b00>
   192d4:	mov	r1, #1
   192d8:	b	192dc <lchmod@@Base+0x2dc0>
   192dc:	push	{fp, lr}
   192e0:	mov	fp, sp
   192e4:	bl	19fe8 <lchmod@@Base+0x3acc>
   192e8:	pop	{fp, lr}
   192ec:	b	1901c <lchmod@@Base+0x2b00>
   192f0:	push	{r4, r5, fp, lr}
   192f4:	add	fp, sp, #8
   192f8:	mov	r4, r1
   192fc:	mov	r5, r0
   19300:	mov	r0, r1
   19304:	bl	19008 <lchmod@@Base+0x2aec>
   19308:	mov	r1, r5
   1930c:	mov	r2, r4
   19310:	pop	{r4, r5, fp, lr}
   19314:	b	117d8 <memcpy@plt>
   19318:	push	{r4, r5, fp, lr}
   1931c:	add	fp, sp, #8
   19320:	mov	r4, r1
   19324:	mov	r5, r0
   19328:	mov	r0, r1
   1932c:	bl	19030 <lchmod@@Base+0x2b14>
   19330:	mov	r1, r5
   19334:	mov	r2, r4
   19338:	pop	{r4, r5, fp, lr}
   1933c:	b	117d8 <memcpy@plt>
   19340:	push	{r4, r5, fp, lr}
   19344:	add	fp, sp, #8
   19348:	mov	r4, r1
   1934c:	mov	r5, r0
   19350:	add	r0, r1, #1
   19354:	bl	19030 <lchmod@@Base+0x2b14>
   19358:	mov	r1, #0
   1935c:	strb	r1, [r0, r4]
   19360:	mov	r1, r5
   19364:	mov	r2, r4
   19368:	pop	{r4, r5, fp, lr}
   1936c:	b	117d8 <memcpy@plt>
   19370:	push	{r4, sl, fp, lr}
   19374:	add	fp, sp, #8
   19378:	mov	r4, r0
   1937c:	bl	11970 <strlen@plt>
   19380:	add	r1, r0, #1
   19384:	mov	r0, r4
   19388:	pop	{r4, sl, fp, lr}
   1938c:	b	192f0 <lchmod@@Base+0x2dd4>
   19390:	push	{fp, lr}
   19394:	mov	fp, sp
   19398:	movw	r0, #49540	; 0xc184
   1939c:	movt	r0, #2
   193a0:	ldr	r4, [r0]
   193a4:	movw	r1, #44730	; 0xaeba
   193a8:	movt	r1, #1
   193ac:	mov	r0, #0
   193b0:	mov	r2, #5
   193b4:	bl	117fc <dcgettext@plt>
   193b8:	mov	r3, r0
   193bc:	movw	r2, #43479	; 0xa9d7
   193c0:	movt	r2, #1
   193c4:	mov	r0, r4
   193c8:	mov	r1, #0
   193cc:	bl	118c8 <error@plt>
   193d0:	bl	11af0 <abort@plt>
   193d4:	push	{fp, lr}
   193d8:	mov	fp, sp
   193dc:	orr	r1, r1, #512	; 0x200
   193e0:	bl	13344 <__assert_fail@plt+0x17f4>
   193e4:	cmp	r0, #0
   193e8:	popne	{fp, pc}
   193ec:	bl	119a0 <__errno_location@plt>
   193f0:	ldr	r0, [r0]
   193f4:	cmp	r0, #22
   193f8:	bne	1941c <lchmod@@Base+0x2f00>
   193fc:	movw	r0, #44747	; 0xaecb
   19400:	movt	r0, #1
   19404:	movw	r1, #44763	; 0xaedb
   19408:	movt	r1, #1
   1940c:	movw	r3, #44774	; 0xaee6
   19410:	movt	r3, #1
   19414:	mov	r2, #41	; 0x29
   19418:	bl	11b50 <__assert_fail@plt>
   1941c:	bl	19390 <lchmod@@Base+0x2e74>
   19420:	ldr	r0, [r0, #48]	; 0x30
   19424:	and	r2, r0, #17
   19428:	mov	r0, #1
   1942c:	cmp	r2, #16
   19430:	beq	1944c <lchmod@@Base+0x2f30>
   19434:	mov	r0, #0
   19438:	cmp	r2, #17
   1943c:	bxne	lr
   19440:	ldr	r0, [r1, #48]	; 0x30
   19444:	cmp	r0, #0
   19448:	movwne	r0, #1
   1944c:	bx	lr
   19450:	clz	r2, r1
   19454:	lsr	r2, r2, #5
   19458:	clz	r3, r0
   1945c:	lsr	r3, r3, #5
   19460:	orrs	r2, r3, r2
   19464:	movwne	r1, #1
   19468:	movwne	r0, #1
   1946c:	cmp	r1, #0
   19470:	beq	194a0 <lchmod@@Base+0x2f84>
   19474:	mvn	r2, #-2147483648	; 0x80000000
   19478:	udiv	r2, r2, r1
   1947c:	cmp	r2, r0
   19480:	bcs	194a0 <lchmod@@Base+0x2f84>
   19484:	push	{fp, lr}
   19488:	mov	fp, sp
   1948c:	bl	119a0 <__errno_location@plt>
   19490:	mov	r1, #12
   19494:	str	r1, [r0]
   19498:	mov	r0, #0
   1949c:	pop	{fp, pc}
   194a0:	b	11748 <calloc@plt>
   194a4:	cmp	r0, #0
   194a8:	movweq	r0, #1
   194ac:	cmn	r0, #1
   194b0:	ble	194b8 <lchmod@@Base+0x2f9c>
   194b4:	b	118ec <malloc@plt>
   194b8:	push	{fp, lr}
   194bc:	mov	fp, sp
   194c0:	bl	119a0 <__errno_location@plt>
   194c4:	mov	r1, #12
   194c8:	str	r1, [r0]
   194cc:	mov	r0, #0
   194d0:	pop	{fp, pc}
   194d4:	push	{fp, lr}
   194d8:	mov	fp, sp
   194dc:	cmp	r0, #0
   194e0:	beq	194fc <lchmod@@Base+0x2fe0>
   194e4:	cmp	r1, #0
   194e8:	beq	19508 <lchmod@@Base+0x2fec>
   194ec:	cmn	r1, #1
   194f0:	ble	19514 <lchmod@@Base+0x2ff8>
   194f4:	pop	{fp, lr}
   194f8:	b	11814 <realloc@plt>
   194fc:	mov	r0, r1
   19500:	pop	{fp, lr}
   19504:	b	194a4 <lchmod@@Base+0x2f88>
   19508:	bl	1331c <__assert_fail@plt+0x17cc>
   1950c:	mov	r0, #0
   19510:	pop	{fp, pc}
   19514:	bl	119a0 <__errno_location@plt>
   19518:	mov	r1, #12
   1951c:	str	r1, [r0]
   19520:	mov	r0, #0
   19524:	pop	{fp, pc}
   19528:	sub	r0, r0, #1
   1952c:	ldrb	r3, [r0, #1]!
   19530:	cmp	r3, #47	; 0x2f
   19534:	beq	1952c <lchmod@@Base+0x3010>
   19538:	mov	r2, #0
   1953c:	mov	r1, r0
   19540:	b	1954c <lchmod@@Base+0x3030>
   19544:	mov	r2, #1
   19548:	ldrb	r3, [r1, #1]!
   1954c:	uxtb	r3, r3
   19550:	cmp	r3, #47	; 0x2f
   19554:	beq	19544 <lchmod@@Base+0x3028>
   19558:	cmp	r3, #0
   1955c:	bxeq	lr
   19560:	tst	r2, #1
   19564:	movne	r0, r1
   19568:	mov	r2, #0
   1956c:	ldrb	r3, [r1, #1]!
   19570:	b	1954c <lchmod@@Base+0x3030>
   19574:	push	{r4, sl, fp, lr}
   19578:	add	fp, sp, #8
   1957c:	mov	r4, r0
   19580:	bl	11970 <strlen@plt>
   19584:	mov	r1, r0
   19588:	sub	r2, r4, #1
   1958c:	mov	r0, r1
   19590:	cmp	r1, #2
   19594:	bcc	195a8 <lchmod@@Base+0x308c>
   19598:	ldrb	r3, [r2, r0]
   1959c:	sub	r1, r0, #1
   195a0:	cmp	r3, #47	; 0x2f
   195a4:	beq	1958c <lchmod@@Base+0x3070>
   195a8:	pop	{r4, sl, fp, pc}
   195ac:	push	{r4, r5, r6, sl, fp, lr}
   195b0:	add	fp, sp, #16
   195b4:	rsb	lr, r2, #64	; 0x40
   195b8:	lsr	ip, r0, lr
   195bc:	rsb	r3, lr, #32
   195c0:	orr	r3, ip, r1, lsl r3
   195c4:	rsbs	r5, r2, #32
   195c8:	lsrpl	r3, r1, r5
   195cc:	lsl	r4, r0, r2
   195d0:	subs	r6, r2, #32
   195d4:	movwpl	r4, #0
   195d8:	orr	ip, r3, r4
   195dc:	lsr	r3, r0, r5
   195e0:	orr	r2, r3, r1, lsl r2
   195e4:	lslpl	r2, r0, r6
   195e8:	lsr	r0, r1, lr
   195ec:	cmp	r5, #0
   195f0:	movwpl	r0, #0
   195f4:	orr	r1, r0, r2
   195f8:	mov	r0, ip
   195fc:	pop	{r4, r5, r6, sl, fp, pc}
   19600:	push	{r4, r5, fp, lr}
   19604:	add	fp, sp, #8
   19608:	lsr	ip, r0, r2
   1960c:	rsb	r3, r2, #32
   19610:	orr	ip, ip, r1, lsl r3
   19614:	subs	lr, r2, #32
   19618:	lsrpl	ip, r1, lr
   1961c:	rsb	r4, r2, #64	; 0x40
   19620:	lsl	r5, r0, r4
   19624:	cmp	r3, #0
   19628:	movwpl	r5, #0
   1962c:	orr	ip, r5, ip
   19630:	rsb	r5, r4, #32
   19634:	lsr	r5, r0, r5
   19638:	orr	r4, r5, r1, lsl r4
   1963c:	cmp	r3, #0
   19640:	lslpl	r4, r0, r3
   19644:	lsr	r0, r1, r2
   19648:	cmp	lr, #0
   1964c:	movwpl	r0, #0
   19650:	orr	r1, r4, r0
   19654:	mov	r0, ip
   19658:	pop	{r4, r5, fp, pc}
   1965c:	rsb	r1, r1, #32
   19660:	ror	r0, r0, r1
   19664:	bx	lr
   19668:	ror	r0, r0, r1
   1966c:	bx	lr
   19670:	rsb	r1, r1, #32
   19674:	ror	r0, r0, r1
   19678:	bx	lr
   1967c:	ror	r0, r0, r1
   19680:	bx	lr
   19684:	and	r2, r1, #15
   19688:	lsl	r2, r0, r2
   1968c:	rsb	r1, r1, #0
   19690:	and	r1, r1, #15
   19694:	orr	r0, r2, r0, lsr r1
   19698:	uxth	r0, r0
   1969c:	bx	lr
   196a0:	rsb	r2, r1, #0
   196a4:	and	r2, r2, #15
   196a8:	lsl	r2, r0, r2
   196ac:	and	r1, r1, #15
   196b0:	orr	r0, r2, r0, lsr r1
   196b4:	uxth	r0, r0
   196b8:	bx	lr
   196bc:	and	r2, r1, #7
   196c0:	lsl	r2, r0, r2
   196c4:	rsb	r1, r1, #0
   196c8:	and	r1, r1, #7
   196cc:	orr	r0, r2, r0, lsr r1
   196d0:	uxtb	r0, r0
   196d4:	bx	lr
   196d8:	rsb	r2, r1, #0
   196dc:	and	r2, r2, #7
   196e0:	lsl	r2, r0, r2
   196e4:	and	r1, r1, #7
   196e8:	orr	r0, r2, r0, lsr r1
   196ec:	uxtb	r0, r0
   196f0:	bx	lr
   196f4:	mov	r1, r0
   196f8:	sub	r2, r0, #65	; 0x41
   196fc:	mov	r0, #1
   19700:	cmp	r2, #26
   19704:	subcs	r2, r1, #97	; 0x61
   19708:	cmpcs	r2, #26
   1970c:	bcs	19714 <lchmod@@Base+0x31f8>
   19710:	bx	lr
   19714:	sub	r1, r1, #48	; 0x30
   19718:	cmp	r1, #10
   1971c:	movcs	r0, #0
   19720:	bx	lr
   19724:	mov	r1, r0
   19728:	sub	r2, r0, #65	; 0x41
   1972c:	mov	r0, #1
   19730:	cmp	r2, #26
   19734:	subcs	r1, r1, #97	; 0x61
   19738:	cmpcs	r1, #26
   1973c:	movcs	r0, #0
   19740:	bx	lr
   19744:	mov	r1, #0
   19748:	cmp	r0, #128	; 0x80
   1974c:	movwcc	r1, #1
   19750:	mov	r0, r1
   19754:	bx	lr
   19758:	sub	r1, r0, #9
   1975c:	clz	r1, r1
   19760:	lsr	r1, r1, #5
   19764:	sub	r0, r0, #32
   19768:	clz	r0, r0
   1976c:	lsr	r0, r0, #5
   19770:	orr	r0, r0, r1
   19774:	bx	lr
   19778:	mov	r1, r0
   1977c:	mov	r0, #1
   19780:	cmp	r1, #32
   19784:	bxcc	lr
   19788:	cmp	r1, #127	; 0x7f
   1978c:	movne	r0, #0
   19790:	bx	lr
   19794:	sub	r1, r0, #48	; 0x30
   19798:	mov	r0, #0
   1979c:	cmp	r1, #10
   197a0:	movwcc	r0, #1
   197a4:	bx	lr
   197a8:	sub	r1, r0, #33	; 0x21
   197ac:	mov	r0, #0
   197b0:	cmp	r1, #94	; 0x5e
   197b4:	movwcc	r0, #1
   197b8:	bx	lr
   197bc:	sub	r1, r0, #97	; 0x61
   197c0:	mov	r0, #0
   197c4:	cmp	r1, #26
   197c8:	movwcc	r0, #1
   197cc:	bx	lr
   197d0:	sub	r1, r0, #32
   197d4:	mov	r0, #0
   197d8:	cmp	r1, #95	; 0x5f
   197dc:	movwcc	r0, #1
   197e0:	bx	lr
   197e4:	sub	r1, r0, #33	; 0x21
   197e8:	cmp	r1, #93	; 0x5d
   197ec:	bhi	19978 <lchmod@@Base+0x345c>
   197f0:	mov	r0, #1
   197f4:	add	r2, pc, #0
   197f8:	ldr	pc, [r2, r1, lsl #2]
   197fc:	andeq	r9, r1, r4, ror r9
   19800:	andeq	r9, r1, r4, ror r9
   19804:	andeq	r9, r1, r4, ror r9
   19808:	andeq	r9, r1, r4, ror r9
   1980c:	andeq	r9, r1, r4, ror r9
   19810:	andeq	r9, r1, r4, ror r9
   19814:	andeq	r9, r1, r4, ror r9
   19818:	andeq	r9, r1, r4, ror r9
   1981c:	andeq	r9, r1, r4, ror r9
   19820:	andeq	r9, r1, r4, ror r9
   19824:	andeq	r9, r1, r4, ror r9
   19828:	andeq	r9, r1, r4, ror r9
   1982c:	andeq	r9, r1, r4, ror r9
   19830:	andeq	r9, r1, r4, ror r9
   19834:	andeq	r9, r1, r4, ror r9
   19838:	andeq	r9, r1, r8, ror r9
   1983c:	andeq	r9, r1, r8, ror r9
   19840:	andeq	r9, r1, r8, ror r9
   19844:	andeq	r9, r1, r8, ror r9
   19848:	andeq	r9, r1, r8, ror r9
   1984c:	andeq	r9, r1, r8, ror r9
   19850:	andeq	r9, r1, r8, ror r9
   19854:	andeq	r9, r1, r8, ror r9
   19858:	andeq	r9, r1, r8, ror r9
   1985c:	andeq	r9, r1, r8, ror r9
   19860:	andeq	r9, r1, r4, ror r9
   19864:	andeq	r9, r1, r4, ror r9
   19868:	andeq	r9, r1, r4, ror r9
   1986c:	andeq	r9, r1, r4, ror r9
   19870:	andeq	r9, r1, r4, ror r9
   19874:	andeq	r9, r1, r4, ror r9
   19878:	andeq	r9, r1, r4, ror r9
   1987c:	andeq	r9, r1, r8, ror r9
   19880:	andeq	r9, r1, r8, ror r9
   19884:	andeq	r9, r1, r8, ror r9
   19888:	andeq	r9, r1, r8, ror r9
   1988c:	andeq	r9, r1, r8, ror r9
   19890:	andeq	r9, r1, r8, ror r9
   19894:	andeq	r9, r1, r8, ror r9
   19898:	andeq	r9, r1, r8, ror r9
   1989c:	andeq	r9, r1, r8, ror r9
   198a0:	andeq	r9, r1, r8, ror r9
   198a4:	andeq	r9, r1, r8, ror r9
   198a8:	andeq	r9, r1, r8, ror r9
   198ac:	andeq	r9, r1, r8, ror r9
   198b0:	andeq	r9, r1, r8, ror r9
   198b4:	andeq	r9, r1, r8, ror r9
   198b8:	andeq	r9, r1, r8, ror r9
   198bc:	andeq	r9, r1, r8, ror r9
   198c0:	andeq	r9, r1, r8, ror r9
   198c4:	andeq	r9, r1, r8, ror r9
   198c8:	andeq	r9, r1, r8, ror r9
   198cc:	andeq	r9, r1, r8, ror r9
   198d0:	andeq	r9, r1, r8, ror r9
   198d4:	andeq	r9, r1, r8, ror r9
   198d8:	andeq	r9, r1, r8, ror r9
   198dc:	andeq	r9, r1, r8, ror r9
   198e0:	andeq	r9, r1, r8, ror r9
   198e4:	andeq	r9, r1, r4, ror r9
   198e8:	andeq	r9, r1, r4, ror r9
   198ec:	andeq	r9, r1, r4, ror r9
   198f0:	andeq	r9, r1, r4, ror r9
   198f4:	andeq	r9, r1, r4, ror r9
   198f8:	andeq	r9, r1, r4, ror r9
   198fc:	andeq	r9, r1, r8, ror r9
   19900:	andeq	r9, r1, r8, ror r9
   19904:	andeq	r9, r1, r8, ror r9
   19908:	andeq	r9, r1, r8, ror r9
   1990c:	andeq	r9, r1, r8, ror r9
   19910:	andeq	r9, r1, r8, ror r9
   19914:	andeq	r9, r1, r8, ror r9
   19918:	andeq	r9, r1, r8, ror r9
   1991c:	andeq	r9, r1, r8, ror r9
   19920:	andeq	r9, r1, r8, ror r9
   19924:	andeq	r9, r1, r8, ror r9
   19928:	andeq	r9, r1, r8, ror r9
   1992c:	andeq	r9, r1, r8, ror r9
   19930:	andeq	r9, r1, r8, ror r9
   19934:	andeq	r9, r1, r8, ror r9
   19938:	andeq	r9, r1, r8, ror r9
   1993c:	andeq	r9, r1, r8, ror r9
   19940:	andeq	r9, r1, r8, ror r9
   19944:	andeq	r9, r1, r8, ror r9
   19948:	andeq	r9, r1, r8, ror r9
   1994c:	andeq	r9, r1, r8, ror r9
   19950:	andeq	r9, r1, r8, ror r9
   19954:	andeq	r9, r1, r8, ror r9
   19958:	andeq	r9, r1, r8, ror r9
   1995c:	andeq	r9, r1, r8, ror r9
   19960:	andeq	r9, r1, r8, ror r9
   19964:	andeq	r9, r1, r4, ror r9
   19968:	andeq	r9, r1, r4, ror r9
   1996c:	andeq	r9, r1, r4, ror r9
   19970:	andeq	r9, r1, r4, ror r9
   19974:	bx	lr
   19978:	mov	r0, #0
   1997c:	bx	lr
   19980:	sub	r0, r0, #9
   19984:	cmp	r0, #23
   19988:	movhi	r0, #0
   1998c:	bxhi	lr
   19990:	bic	r0, r0, #-16777216	; 0xff000000
   19994:	movw	r1, #31
   19998:	movt	r1, #128	; 0x80
   1999c:	mov	r2, #1
   199a0:	and	r0, r2, r1, lsr r0
   199a4:	bx	lr
   199a8:	sub	r1, r0, #65	; 0x41
   199ac:	mov	r0, #0
   199b0:	cmp	r1, #26
   199b4:	movwcc	r0, #1
   199b8:	bx	lr
   199bc:	mov	r1, r0
   199c0:	sub	r2, r0, #48	; 0x30
   199c4:	mov	r0, #1
   199c8:	cmp	r2, #22
   199cc:	bhi	199e4 <lchmod@@Base+0x34c8>
   199d0:	mov	ip, #1
   199d4:	movw	r3, #1023	; 0x3ff
   199d8:	movt	r3, #126	; 0x7e
   199dc:	tst	r3, ip, lsl r2
   199e0:	bxne	lr
   199e4:	sub	r1, r1, #97	; 0x61
   199e8:	cmp	r1, #6
   199ec:	movcs	r0, #0
   199f0:	bxcs	lr
   199f4:	bx	lr
   199f8:	sub	r1, r0, #65	; 0x41
   199fc:	cmp	r1, #26
   19a00:	addcc	r0, r0, #32
   19a04:	bx	lr
   19a08:	sub	r1, r0, #97	; 0x61
   19a0c:	cmp	r1, #26
   19a10:	subcc	r0, r0, #32
   19a14:	bx	lr
   19a18:	push	{r4, r5, r6, sl, fp, lr}
   19a1c:	add	fp, sp, #16
   19a20:	mov	r4, r0
   19a24:	bl	118a4 <__fpending@plt>
   19a28:	mov	r5, r0
   19a2c:	mov	r0, r4
   19a30:	bl	118b0 <ferror_unlocked@plt>
   19a34:	mov	r6, r0
   19a38:	mov	r0, r4
   19a3c:	bl	19bb0 <lchmod@@Base+0x3694>
   19a40:	cmp	r6, #0
   19a44:	beq	19a68 <lchmod@@Base+0x354c>
   19a48:	mvn	r4, #0
   19a4c:	cmp	r0, #0
   19a50:	bne	19a94 <lchmod@@Base+0x3578>
   19a54:	bl	119a0 <__errno_location@plt>
   19a58:	mov	r1, #0
   19a5c:	str	r1, [r0]
   19a60:	mov	r0, r4
   19a64:	pop	{r4, r5, r6, sl, fp, pc}
   19a68:	cmp	r0, #0
   19a6c:	mov	r4, r0
   19a70:	mvnne	r4, #0
   19a74:	cmp	r5, #0
   19a78:	bne	19a94 <lchmod@@Base+0x3578>
   19a7c:	cmp	r0, #0
   19a80:	beq	19a94 <lchmod@@Base+0x3578>
   19a84:	bl	119a0 <__errno_location@plt>
   19a88:	ldr	r0, [r0]
   19a8c:	subs	r4, r0, #9
   19a90:	mvnne	r4, #0
   19a94:	mov	r0, r4
   19a98:	pop	{r4, r5, r6, sl, fp, pc}
   19a9c:	mov	r1, #0
   19aa0:	movw	r2, #62998	; 0xf616
   19aa4:	movt	r2, #149	; 0x95
   19aa8:	str	r1, [r0, #16]
   19aac:	str	r1, [r0, #20]
   19ab0:	str	r2, [r0, #24]
   19ab4:	bx	lr
   19ab8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19abc:	add	fp, sp, #24
   19ac0:	mov	r5, r1
   19ac4:	mov	r4, r0
   19ac8:	ldr	r0, [r0, #24]
   19acc:	movw	r1, #62998	; 0xf616
   19ad0:	movt	r1, #149	; 0x95
   19ad4:	cmp	r0, r1
   19ad8:	bne	19b70 <lchmod@@Base+0x3654>
   19adc:	add	r6, r4, #8
   19ae0:	add	r1, r4, #16
   19ae4:	ldrd	r2, [r1]
   19ae8:	orrs	r0, r2, r3
   19aec:	beq	19b24 <lchmod@@Base+0x3608>
   19af0:	ldm	r4, {r0, r7}
   19af4:	ldrd	r8, [r5, #96]	; 0x60
   19af8:	eor	r7, r9, r7
   19afc:	eor	r0, r8, r0
   19b00:	orrs	r0, r0, r7
   19b04:	bne	19b24 <lchmod@@Base+0x3608>
   19b08:	ldm	r6, {r0, r7}
   19b0c:	ldrd	r8, [r5]
   19b10:	eor	r7, r9, r7
   19b14:	eor	r0, r8, r0
   19b18:	orrs	r0, r0, r7
   19b1c:	mov	r0, #1
   19b20:	beq	19b64 <lchmod@@Base+0x3648>
   19b24:	adds	r8, r2, #1
   19b28:	adc	r9, r3, #0
   19b2c:	strd	r8, [r1]
   19b30:	mov	r0, r8
   19b34:	mov	r1, r9
   19b38:	bl	19b90 <lchmod@@Base+0x3674>
   19b3c:	mov	r1, r0
   19b40:	mov	r0, #0
   19b44:	cmp	r1, #0
   19b48:	beq	19b64 <lchmod@@Base+0x3648>
   19b4c:	orrs	r1, r8, r9
   19b50:	beq	19b68 <lchmod@@Base+0x364c>
   19b54:	ldrd	r2, [r5]
   19b58:	strd	r2, [r6]
   19b5c:	ldrd	r2, [r5, #96]	; 0x60
   19b60:	strd	r2, [r4]
   19b64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b68:	mov	r0, #1
   19b6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b70:	movw	r0, #44852	; 0xaf34
   19b74:	movt	r0, #1
   19b78:	movw	r1, #44876	; 0xaf4c
   19b7c:	movt	r1, #1
   19b80:	movw	r3, #44894	; 0xaf5e
   19b84:	movt	r3, #1
   19b88:	mov	r2, #60	; 0x3c
   19b8c:	bl	11b50 <__assert_fail@plt>
   19b90:	subs	r2, r0, #1
   19b94:	and	r0, r0, r2
   19b98:	sbc	r2, r1, #0
   19b9c:	and	r1, r1, r2
   19ba0:	orr	r0, r0, r1
   19ba4:	clz	r0, r0
   19ba8:	lsr	r0, r0, #5
   19bac:	bx	lr
   19bb0:	push	{r4, r5, fp, lr}
   19bb4:	add	fp, sp, #8
   19bb8:	sub	sp, sp, #8
   19bbc:	mov	r4, r0
   19bc0:	bl	119dc <fileno@plt>
   19bc4:	cmn	r0, #1
   19bc8:	ble	19c40 <lchmod@@Base+0x3724>
   19bcc:	mov	r0, r4
   19bd0:	bl	11904 <__freading@plt>
   19bd4:	cmp	r0, #0
   19bd8:	beq	19c04 <lchmod@@Base+0x36e8>
   19bdc:	mov	r0, r4
   19be0:	bl	119dc <fileno@plt>
   19be4:	mov	r1, #1
   19be8:	str	r1, [sp]
   19bec:	mov	r2, #0
   19bf0:	mov	r3, #0
   19bf4:	bl	11880 <lseek64@plt>
   19bf8:	and	r0, r0, r1
   19bfc:	cmn	r0, #1
   19c00:	beq	19c40 <lchmod@@Base+0x3724>
   19c04:	mov	r0, r4
   19c08:	bl	19e70 <lchmod@@Base+0x3954>
   19c0c:	cmp	r0, #0
   19c10:	beq	19c40 <lchmod@@Base+0x3724>
   19c14:	bl	119a0 <__errno_location@plt>
   19c18:	ldr	r5, [r0]
   19c1c:	mov	r0, r4
   19c20:	bl	119f4 <fclose@plt>
   19c24:	cmp	r5, #0
   19c28:	beq	19c38 <lchmod@@Base+0x371c>
   19c2c:	bl	119a0 <__errno_location@plt>
   19c30:	str	r5, [r0]
   19c34:	mvn	r0, #0
   19c38:	sub	sp, fp, #8
   19c3c:	pop	{r4, r5, fp, pc}
   19c40:	mov	r0, r4
   19c44:	sub	sp, fp, #8
   19c48:	pop	{r4, r5, fp, lr}
   19c4c:	b	119f4 <fclose@plt>
   19c50:	sub	sp, sp, #8
   19c54:	push	{fp, lr}
   19c58:	mov	fp, sp
   19c5c:	sub	sp, sp, #8
   19c60:	str	r2, [fp, #8]
   19c64:	str	r3, [fp, #12]
   19c68:	add	r2, fp, #8
   19c6c:	str	r2, [sp, #4]
   19c70:	cmp	r1, #11
   19c74:	bhi	19cb4 <lchmod@@Base+0x3798>
   19c78:	mov	r2, #1
   19c7c:	movw	r3, #1300	; 0x514
   19c80:	tst	r3, r2, lsl r1
   19c84:	bne	19d04 <lchmod@@Base+0x37e8>
   19c88:	movw	r3, #2570	; 0xa0a
   19c8c:	tst	r3, r2, lsl r1
   19c90:	bne	19cdc <lchmod@@Base+0x37c0>
   19c94:	cmp	r1, #0
   19c98:	bne	19cb4 <lchmod@@Base+0x3798>
   19c9c:	ldr	r1, [sp, #4]
   19ca0:	add	r2, r1, #4
   19ca4:	str	r2, [sp, #4]
   19ca8:	ldr	r1, [r1]
   19cac:	bl	19d28 <lchmod@@Base+0x380c>
   19cb0:	b	19d18 <lchmod@@Base+0x37fc>
   19cb4:	sub	r2, r1, #1024	; 0x400
   19cb8:	cmp	r2, #10
   19cbc:	bhi	19d04 <lchmod@@Base+0x37e8>
   19cc0:	mov	ip, #1
   19cc4:	movw	r3, #645	; 0x285
   19cc8:	tst	r3, ip, lsl r2
   19ccc:	bne	19d04 <lchmod@@Base+0x37e8>
   19cd0:	movw	r3, #1282	; 0x502
   19cd4:	tst	r3, ip, lsl r2
   19cd8:	beq	19ce4 <lchmod@@Base+0x37c8>
   19cdc:	bl	11a0c <fcntl64@plt>
   19ce0:	b	19d18 <lchmod@@Base+0x37fc>
   19ce4:	cmp	r2, #6
   19ce8:	bne	19d04 <lchmod@@Base+0x37e8>
   19cec:	ldr	r1, [sp, #4]
   19cf0:	add	r2, r1, #4
   19cf4:	str	r2, [sp, #4]
   19cf8:	ldr	r1, [r1]
   19cfc:	bl	19d34 <lchmod@@Base+0x3818>
   19d00:	b	19d18 <lchmod@@Base+0x37fc>
   19d04:	ldr	r2, [sp, #4]
   19d08:	add	r3, r2, #4
   19d0c:	str	r3, [sp, #4]
   19d10:	ldr	r2, [r2]
   19d14:	bl	11a0c <fcntl64@plt>
   19d18:	mov	sp, fp
   19d1c:	pop	{fp, lr}
   19d20:	add	sp, sp, #8
   19d24:	bx	lr
   19d28:	mov	r2, r1
   19d2c:	mov	r1, #0
   19d30:	b	11a0c <fcntl64@plt>
   19d34:	push	{r4, r5, r6, r7, fp, lr}
   19d38:	add	fp, sp, #16
   19d3c:	mov	r5, r1
   19d40:	mov	r6, r0
   19d44:	movw	r7, #49960	; 0xc328
   19d48:	movt	r7, #2
   19d4c:	ldr	r0, [r7]
   19d50:	cmp	r0, #0
   19d54:	bmi	19db8 <lchmod@@Base+0x389c>
   19d58:	mov	r0, r6
   19d5c:	movw	r1, #1030	; 0x406
   19d60:	mov	r2, r5
   19d64:	bl	11a0c <fcntl64@plt>
   19d68:	mov	r4, r0
   19d6c:	cmn	r0, #1
   19d70:	bgt	19da4 <lchmod@@Base+0x3888>
   19d74:	bl	119a0 <__errno_location@plt>
   19d78:	ldr	r0, [r0]
   19d7c:	cmp	r0, #22
   19d80:	bne	19da4 <lchmod@@Base+0x3888>
   19d84:	mov	r0, r6
   19d88:	mov	r1, r5
   19d8c:	bl	19d28 <lchmod@@Base+0x380c>
   19d90:	mov	r4, r0
   19d94:	cmp	r0, #0
   19d98:	bmi	19e08 <lchmod@@Base+0x38ec>
   19d9c:	mvn	r0, #0
   19da0:	b	19da8 <lchmod@@Base+0x388c>
   19da4:	mov	r0, #1
   19da8:	str	r0, [r7]
   19dac:	cmp	r4, #0
   19db0:	bpl	19dd0 <lchmod@@Base+0x38b4>
   19db4:	b	19e08 <lchmod@@Base+0x38ec>
   19db8:	mov	r0, r6
   19dbc:	mov	r1, r5
   19dc0:	bl	19d28 <lchmod@@Base+0x380c>
   19dc4:	mov	r4, r0
   19dc8:	cmp	r4, #0
   19dcc:	bmi	19e08 <lchmod@@Base+0x38ec>
   19dd0:	ldr	r0, [r7]
   19dd4:	cmn	r0, #1
   19dd8:	bne	19e08 <lchmod@@Base+0x38ec>
   19ddc:	mov	r0, r4
   19de0:	mov	r1, #1
   19de4:	bl	11a0c <fcntl64@plt>
   19de8:	cmp	r0, #0
   19dec:	bmi	19e10 <lchmod@@Base+0x38f4>
   19df0:	orr	r2, r0, #1
   19df4:	mov	r0, r4
   19df8:	mov	r1, #2
   19dfc:	bl	11a0c <fcntl64@plt>
   19e00:	cmn	r0, #1
   19e04:	beq	19e10 <lchmod@@Base+0x38f4>
   19e08:	mov	r0, r4
   19e0c:	pop	{r4, r5, r6, r7, fp, pc}
   19e10:	bl	119a0 <__errno_location@plt>
   19e14:	mov	r5, r0
   19e18:	ldr	r6, [r0]
   19e1c:	mov	r0, r4
   19e20:	bl	11afc <close@plt>
   19e24:	str	r6, [r5]
   19e28:	mvn	r4, #0
   19e2c:	mov	r0, r4
   19e30:	pop	{r4, r5, r6, r7, fp, pc}
   19e34:	sub	sp, sp, #8
   19e38:	push	{fp, lr}
   19e3c:	mov	fp, sp
   19e40:	sub	sp, sp, #8
   19e44:	str	r2, [fp, #8]
   19e48:	str	r3, [fp, #12]
   19e4c:	mov	r2, #0
   19e50:	tst	r1, #64	; 0x40
   19e54:	ldrne	r2, [fp, #8]
   19e58:	bl	118d4 <open64@plt>
   19e5c:	bl	18af8 <lchmod@@Base+0x25dc>
   19e60:	mov	sp, fp
   19e64:	pop	{fp, lr}
   19e68:	add	sp, sp, #8
   19e6c:	bx	lr
   19e70:	push	{r4, sl, fp, lr}
   19e74:	add	fp, sp, #8
   19e78:	mov	r4, r0
   19e7c:	cmp	r0, #0
   19e80:	beq	19e98 <lchmod@@Base+0x397c>
   19e84:	mov	r0, r4
   19e88:	bl	11904 <__freading@plt>
   19e8c:	cmp	r0, #0
   19e90:	movne	r0, r4
   19e94:	blne	19ea4 <lchmod@@Base+0x3988>
   19e98:	mov	r0, r4
   19e9c:	pop	{r4, sl, fp, lr}
   19ea0:	b	11790 <fflush@plt>
   19ea4:	push	{fp, lr}
   19ea8:	mov	fp, sp
   19eac:	sub	sp, sp, #8
   19eb0:	ldrb	r1, [r0, #1]
   19eb4:	tst	r1, #1
   19eb8:	beq	19ed0 <lchmod@@Base+0x39b4>
   19ebc:	mov	r1, #1
   19ec0:	str	r1, [sp]
   19ec4:	mov	r2, #0
   19ec8:	mov	r3, #0
   19ecc:	bl	19ed8 <lchmod@@Base+0x39bc>
   19ed0:	mov	sp, fp
   19ed4:	pop	{fp, pc}
   19ed8:	push	{r4, r5, r6, r7, fp, lr}
   19edc:	add	fp, sp, #16
   19ee0:	sub	sp, sp, #8
   19ee4:	mov	r5, r3
   19ee8:	mov	r6, r2
   19eec:	mov	r4, r0
   19ef0:	ldr	r0, [r0, #4]
   19ef4:	ldr	r1, [r4, #8]
   19ef8:	cmp	r1, r0
   19efc:	bne	19f18 <lchmod@@Base+0x39fc>
   19f00:	ldrd	r0, [r4, #16]
   19f04:	cmp	r1, r0
   19f08:	bne	19f18 <lchmod@@Base+0x39fc>
   19f0c:	ldr	r0, [r4, #36]	; 0x24
   19f10:	cmp	r0, #0
   19f14:	beq	19f30 <lchmod@@Base+0x3a14>
   19f18:	mov	r0, r4
   19f1c:	mov	r2, r6
   19f20:	mov	r3, r5
   19f24:	sub	sp, fp, #16
   19f28:	pop	{r4, r5, r6, r7, fp, lr}
   19f2c:	b	11a00 <fseeko64@plt>
   19f30:	ldr	r7, [fp, #8]
   19f34:	mov	r0, r4
   19f38:	bl	119dc <fileno@plt>
   19f3c:	str	r7, [sp]
   19f40:	mov	r2, r6
   19f44:	mov	r3, r5
   19f48:	bl	11880 <lseek64@plt>
   19f4c:	and	r2, r0, r1
   19f50:	cmn	r2, #1
   19f54:	beq	19f74 <lchmod@@Base+0x3a58>
   19f58:	strd	r0, [r4, #80]	; 0x50
   19f5c:	ldr	r0, [r4]
   19f60:	bic	r0, r0, #16
   19f64:	str	r0, [r4]
   19f68:	mov	r0, #0
   19f6c:	sub	sp, fp, #16
   19f70:	pop	{r4, r5, r6, r7, fp, pc}
   19f74:	mvn	r0, #0
   19f78:	sub	sp, fp, #16
   19f7c:	pop	{r4, r5, r6, r7, fp, pc}
   19f80:	ldrb	r2, [r0]
   19f84:	cmp	r2, #0
   19f88:	beq	19fac <lchmod@@Base+0x3a90>
   19f8c:	add	r3, r0, #1
   19f90:	mov	r0, #0
   19f94:	ror	r0, r0, #23
   19f98:	uxtab	r0, r0, r2
   19f9c:	ldrb	r2, [r3], #1
   19fa0:	cmp	r2, #0
   19fa4:	bne	19f94 <lchmod@@Base+0x3a78>
   19fa8:	b	19fb0 <lchmod@@Base+0x3a94>
   19fac:	mov	r0, #0
   19fb0:	udiv	r2, r0, r1
   19fb4:	mls	r0, r2, r1, r0
   19fb8:	bx	lr
   19fbc:	push	{fp, lr}
   19fc0:	mov	fp, sp
   19fc4:	bl	119a0 <__errno_location@plt>
   19fc8:	mov	r1, #12
   19fcc:	str	r1, [r0]
   19fd0:	mov	r0, #0
   19fd4:	pop	{fp, pc}
   19fd8:	b	194a4 <lchmod@@Base+0x2f88>
   19fdc:	cmp	r1, #0
   19fe0:	orreq	r1, r1, #1
   19fe4:	b	194d4 <lchmod@@Base+0x2fb8>
   19fe8:	b	19450 <lchmod@@Base+0x2f34>
   19fec:	clz	r3, r2
   19ff0:	lsr	ip, r3, #5
   19ff4:	clz	r3, r1
   19ff8:	lsr	r3, r3, #5
   19ffc:	orrs	r3, r3, ip
   1a000:	movwne	r1, #1
   1a004:	movwne	r2, #1
   1a008:	b	1a0a8 <lchmod@@Base+0x3b8c>
   1a00c:	push	{fp, lr}
   1a010:	mov	fp, sp
   1a014:	mov	r0, #14
   1a018:	bl	11a3c <nl_langinfo@plt>
   1a01c:	movw	r1, #43292	; 0xa91c
   1a020:	movt	r1, #1
   1a024:	cmp	r0, #0
   1a028:	movne	r1, r0
   1a02c:	ldrb	r2, [r1]
   1a030:	movw	r0, #44961	; 0xafa1
   1a034:	movt	r0, #1
   1a038:	cmp	r2, #0
   1a03c:	movne	r0, r1
   1a040:	pop	{fp, pc}
   1a044:	push	{r4, r5, r6, r7, fp, lr}
   1a048:	add	fp, sp, #16
   1a04c:	sub	sp, sp, #8
   1a050:	mov	r7, r2
   1a054:	mov	r4, r1
   1a058:	add	r5, sp, #4
   1a05c:	cmp	r0, #0
   1a060:	movne	r5, r0
   1a064:	mov	r0, r5
   1a068:	bl	118bc <mbrtowc@plt>
   1a06c:	mov	r6, r0
   1a070:	cmp	r7, #0
   1a074:	beq	1a09c <lchmod@@Base+0x3b80>
   1a078:	cmn	r6, #2
   1a07c:	bcc	1a09c <lchmod@@Base+0x3b80>
   1a080:	mov	r0, #0
   1a084:	bl	1a0f0 <lchmod@@Base+0x3bd4>
   1a088:	cmp	r0, #0
   1a08c:	bne	1a09c <lchmod@@Base+0x3b80>
   1a090:	ldrb	r0, [r4]
   1a094:	str	r0, [r5]
   1a098:	mov	r6, #1
   1a09c:	mov	r0, r6
   1a0a0:	sub	sp, fp, #16
   1a0a4:	pop	{r4, r5, r6, r7, fp, pc}
   1a0a8:	cmp	r2, #0
   1a0ac:	beq	1a0dc <lchmod@@Base+0x3bc0>
   1a0b0:	mvn	r3, #0
   1a0b4:	udiv	r3, r3, r2
   1a0b8:	cmp	r3, r1
   1a0bc:	bcs	1a0dc <lchmod@@Base+0x3bc0>
   1a0c0:	push	{fp, lr}
   1a0c4:	mov	fp, sp
   1a0c8:	bl	119a0 <__errno_location@plt>
   1a0cc:	mov	r1, #12
   1a0d0:	str	r1, [r0]
   1a0d4:	mov	r0, #0
   1a0d8:	pop	{fp, pc}
   1a0dc:	mul	r1, r2, r1
   1a0e0:	b	194d4 <lchmod@@Base+0x2fb8>
   1a0e4:	mov	r1, #0
   1a0e8:	mov	r2, #3
   1a0ec:	b	19c50 <lchmod@@Base+0x3734>
   1a0f0:	push	{r4, sl, fp, lr}
   1a0f4:	add	fp, sp, #8
   1a0f8:	sub	sp, sp, #264	; 0x108
   1a0fc:	add	r1, sp, #7
   1a100:	movw	r2, #257	; 0x101
   1a104:	bl	1a15c <lchmod@@Base+0x3c40>
   1a108:	mov	r4, #0
   1a10c:	cmp	r0, #0
   1a110:	bne	1a150 <lchmod@@Base+0x3c34>
   1a114:	add	r0, sp, #7
   1a118:	movw	r1, #44967	; 0xafa7
   1a11c:	movt	r1, #1
   1a120:	mov	r2, #2
   1a124:	bl	11964 <bcmp@plt>
   1a128:	cmp	r0, #0
   1a12c:	beq	1a150 <lchmod@@Base+0x3c34>
   1a130:	add	r0, sp, #7
   1a134:	movw	r1, #44969	; 0xafa9
   1a138:	movt	r1, #1
   1a13c:	mov	r2, #6
   1a140:	bl	11964 <bcmp@plt>
   1a144:	mov	r4, r0
   1a148:	cmp	r0, #0
   1a14c:	movwne	r4, #1
   1a150:	mov	r0, r4
   1a154:	sub	sp, fp, #8
   1a158:	pop	{r4, sl, fp, pc}
   1a15c:	b	1a160 <lchmod@@Base+0x3c44>
   1a160:	push	{r4, r5, r6, r7, fp, lr}
   1a164:	add	fp, sp, #16
   1a168:	mov	r6, r2
   1a16c:	mov	r4, r1
   1a170:	bl	1a1f8 <lchmod@@Base+0x3cdc>
   1a174:	cmp	r0, #0
   1a178:	beq	1a1a8 <lchmod@@Base+0x3c8c>
   1a17c:	mov	r7, r0
   1a180:	bl	11970 <strlen@plt>
   1a184:	cmp	r0, r6
   1a188:	bcs	1a1c4 <lchmod@@Base+0x3ca8>
   1a18c:	add	r2, r0, #1
   1a190:	mov	r0, r4
   1a194:	mov	r1, r7
   1a198:	bl	117d8 <memcpy@plt>
   1a19c:	mov	r5, #0
   1a1a0:	mov	r0, r5
   1a1a4:	pop	{r4, r5, r6, r7, fp, pc}
   1a1a8:	mov	r5, #22
   1a1ac:	cmp	r6, #0
   1a1b0:	beq	1a1ec <lchmod@@Base+0x3cd0>
   1a1b4:	mov	r0, #0
   1a1b8:	strb	r0, [r4]
   1a1bc:	mov	r0, r5
   1a1c0:	pop	{r4, r5, r6, r7, fp, pc}
   1a1c4:	mov	r5, #34	; 0x22
   1a1c8:	cmp	r6, #0
   1a1cc:	beq	1a1ec <lchmod@@Base+0x3cd0>
   1a1d0:	sub	r6, r6, #1
   1a1d4:	mov	r0, r4
   1a1d8:	mov	r1, r7
   1a1dc:	mov	r2, r6
   1a1e0:	bl	117d8 <memcpy@plt>
   1a1e4:	mov	r0, #0
   1a1e8:	strb	r0, [r4, r6]
   1a1ec:	mov	r0, r5
   1a1f0:	pop	{r4, r5, r6, r7, fp, pc}
   1a1f4:	b	1a1f8 <lchmod@@Base+0x3cdc>
   1a1f8:	mov	r1, #0
   1a1fc:	b	11a18 <setlocale@plt>
   1a200:	cmp	r3, #0
   1a204:	cmpeq	r2, #0
   1a208:	bne	1a220 <lchmod@@Base+0x3d04>
   1a20c:	cmp	r1, #0
   1a210:	cmpeq	r0, #0
   1a214:	mvnne	r1, #0
   1a218:	mvnne	r0, #0
   1a21c:	b	1a23c <lchmod@@Base+0x3d20>
   1a220:	sub	sp, sp, #8
   1a224:	push	{sp, lr}
   1a228:	bl	1a24c <lchmod@@Base+0x3d30>
   1a22c:	ldr	lr, [sp, #4]
   1a230:	add	sp, sp, #8
   1a234:	pop	{r2, r3}
   1a238:	bx	lr
   1a23c:	push	{r1, lr}
   1a240:	mov	r0, #8
   1a244:	bl	11760 <raise@plt>
   1a248:	pop	{r1, pc}
   1a24c:	cmp	r1, r3
   1a250:	cmpeq	r0, r2
   1a254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a258:	mov	r4, r0
   1a25c:	movcc	r0, #0
   1a260:	mov	r5, r1
   1a264:	ldr	lr, [sp, #36]	; 0x24
   1a268:	movcc	r1, r0
   1a26c:	bcc	1a368 <lchmod@@Base+0x3e4c>
   1a270:	cmp	r3, #0
   1a274:	clzeq	ip, r2
   1a278:	clzne	ip, r3
   1a27c:	addeq	ip, ip, #32
   1a280:	cmp	r5, #0
   1a284:	clzeq	r1, r4
   1a288:	addeq	r1, r1, #32
   1a28c:	clzne	r1, r5
   1a290:	sub	ip, ip, r1
   1a294:	sub	sl, ip, #32
   1a298:	lsl	r9, r3, ip
   1a29c:	rsb	fp, ip, #32
   1a2a0:	orr	r9, r9, r2, lsl sl
   1a2a4:	orr	r9, r9, r2, lsr fp
   1a2a8:	lsl	r8, r2, ip
   1a2ac:	cmp	r5, r9
   1a2b0:	cmpeq	r4, r8
   1a2b4:	movcc	r0, #0
   1a2b8:	movcc	r1, r0
   1a2bc:	bcc	1a2d8 <lchmod@@Base+0x3dbc>
   1a2c0:	mov	r0, #1
   1a2c4:	subs	r4, r4, r8
   1a2c8:	lsl	r1, r0, sl
   1a2cc:	orr	r1, r1, r0, lsr fp
   1a2d0:	lsl	r0, r0, ip
   1a2d4:	sbc	r5, r5, r9
   1a2d8:	cmp	ip, #0
   1a2dc:	beq	1a368 <lchmod@@Base+0x3e4c>
   1a2e0:	lsr	r6, r8, #1
   1a2e4:	orr	r6, r6, r9, lsl #31
   1a2e8:	lsr	r7, r9, #1
   1a2ec:	mov	r2, ip
   1a2f0:	b	1a314 <lchmod@@Base+0x3df8>
   1a2f4:	subs	r3, r4, r6
   1a2f8:	sbc	r8, r5, r7
   1a2fc:	adds	r3, r3, r3
   1a300:	adc	r8, r8, r8
   1a304:	adds	r4, r3, #1
   1a308:	adc	r5, r8, #0
   1a30c:	subs	r2, r2, #1
   1a310:	beq	1a330 <lchmod@@Base+0x3e14>
   1a314:	cmp	r5, r7
   1a318:	cmpeq	r4, r6
   1a31c:	bcs	1a2f4 <lchmod@@Base+0x3dd8>
   1a320:	adds	r4, r4, r4
   1a324:	adc	r5, r5, r5
   1a328:	subs	r2, r2, #1
   1a32c:	bne	1a314 <lchmod@@Base+0x3df8>
   1a330:	lsr	r3, r4, ip
   1a334:	orr	r3, r3, r5, lsl fp
   1a338:	lsr	r2, r5, ip
   1a33c:	orr	r3, r3, r5, lsr sl
   1a340:	adds	r0, r0, r4
   1a344:	mov	r4, r3
   1a348:	lsl	r3, r2, ip
   1a34c:	orr	r3, r3, r4, lsl sl
   1a350:	lsl	ip, r4, ip
   1a354:	orr	r3, r3, r4, lsr fp
   1a358:	adc	r1, r1, r5
   1a35c:	subs	r0, r0, ip
   1a360:	mov	r5, r2
   1a364:	sbc	r1, r1, r3
   1a368:	cmp	lr, #0
   1a36c:	strdne	r4, [lr]
   1a370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a374:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a378:	mov	r7, r0
   1a37c:	ldr	r6, [pc, #72]	; 1a3cc <lchmod@@Base+0x3eb0>
   1a380:	ldr	r5, [pc, #72]	; 1a3d0 <lchmod@@Base+0x3eb4>
   1a384:	add	r6, pc, r6
   1a388:	add	r5, pc, r5
   1a38c:	sub	r6, r6, r5
   1a390:	mov	r8, r1
   1a394:	mov	r9, r2
   1a398:	bl	11710 <fstatfs64@plt-0x20>
   1a39c:	asrs	r6, r6, #2
   1a3a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a3a4:	mov	r4, #0
   1a3a8:	add	r4, r4, #1
   1a3ac:	ldr	r3, [r5], #4
   1a3b0:	mov	r2, r9
   1a3b4:	mov	r1, r8
   1a3b8:	mov	r0, r7
   1a3bc:	blx	r3
   1a3c0:	cmp	r6, r4
   1a3c4:	bne	1a3a8 <lchmod@@Base+0x3e8c>
   1a3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a3cc:	andeq	r1, r1, r8, ror fp
   1a3d0:	andeq	r1, r1, r0, ror fp
   1a3d4:	bx	lr
   1a3d8:	ldr	r3, [pc, #12]	; 1a3ec <lchmod@@Base+0x3ed0>
   1a3dc:	mov	r1, #0
   1a3e0:	add	r3, pc, r3
   1a3e4:	ldr	r2, [r3]
   1a3e8:	b	119b8 <__cxa_atexit@plt>
   1a3ec:	muleq	r1, r4, sp
   1a3f0:	mov	r2, r1
   1a3f4:	mov	r1, r0
   1a3f8:	mov	r0, #3
   1a3fc:	b	11ad8 <__xstat64@plt>
   1a400:	mov	r2, r1
   1a404:	mov	r1, r0
   1a408:	mov	r0, #3
   1a40c:	b	1185c <__fxstat64@plt>
   1a410:	mov	r2, r1
   1a414:	mov	r1, r0
   1a418:	mov	r0, #3
   1a41c:	b	11b08 <__lxstat64@plt>
   1a420:	push	{lr}		; (str lr, [sp, #-4]!)
   1a424:	sub	sp, sp, #12
   1a428:	str	r3, [sp]
   1a42c:	mov	r3, r2
   1a430:	mov	r2, r1
   1a434:	mov	r1, r0
   1a438:	mov	r0, #3
   1a43c:	bl	11844 <__fxstatat64@plt>
   1a440:	add	sp, sp, #12
   1a444:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001a448 <.fini>:
   1a448:	push	{r3, lr}
   1a44c:	pop	{r3, pc}
