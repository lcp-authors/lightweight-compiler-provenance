
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010b1c <.init>:
   10b1c:	push	{r3, lr}
   10b20:	bl	10d34 <__assert_fail@plt+0x48>
   10b24:	pop	{r3, pc}

Disassembly of section .plt:

00010b28 <calloc@plt-0x14>:
   10b28:	push	{lr}		; (str lr, [sp, #-4]!)
   10b2c:	ldr	lr, [pc, #4]	; 10b38 <calloc@plt-0x4>
   10b30:	add	lr, pc, lr
   10b34:	ldr	pc, [lr, #8]!
   10b38:	andeq	r7, r1, r8, asr #9

00010b3c <calloc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #94208	; 0x17000
   10b44:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b48 <strcmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #94208	; 0x17000
   10b50:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b54 <strtol@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #94208	; 0x17000
   10b5c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b60 <printf@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b6c <fopen@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b78 <free@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b84 <utf8proc_get_property@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1176]!	; 0x498

00010b90 <fgets@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1168]!	; 0x490

00010b9c <utf8proc_encode_char@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1160]!	; 0x488

00010ba8 <strdup@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1152]!	; 0x480

00010bb4 <rewind@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1144]!	; 0x478

00010bc0 <unlink@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1136]!	; 0x470

00010bcc <utf8proc_tolower@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1128]!	; 0x468

00010bd8 <__xstat@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1120]!	; 0x460

00010be4 <fwrite@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1112]!	; 0x458

00010bf0 <fread@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1104]!	; 0x450

00010bfc <utf8proc_iterate@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1096]!	; 0x448

00010c08 <malloc@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1088]!	; 0x440

00010c14 <__libc_start_main@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1080]!	; 0x438

00010c20 <__sysv_signal@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1072]!	; 0x430

00010c2c <__gmon_start__@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1064]!	; 0x428

00010c38 <getpid@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1056]!	; 0x420

00010c44 <exit@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1048]!	; 0x418

00010c50 <utf8proc_category@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1040]!	; 0x410

00010c5c <strlen@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1032]!	; 0x408

00010c68 <fprintf@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1024]!	; 0x400

00010c74 <__isoc99_sscanf@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c80 <fclose@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c8c <utf8proc_NFC@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c98 <fputc@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca4 <sprintf@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb0 <utf8proc_errmsg@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cbc <fputs@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc8 <strncmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd4 <abort@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce0 <getc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cec <__assert_fail@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #936]!	; 0x3a8

Disassembly of section .text:

00010cf8 <error@@Base-0x1fc0>:
   10cf8:	mov	fp, #0
   10cfc:	mov	lr, #0
   10d00:	pop	{r1}		; (ldr r1, [sp], #4)
   10d04:	mov	r2, sp
   10d08:	push	{r2}		; (str r2, [sp, #-4]!)
   10d0c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d10:	ldr	ip, [pc, #16]	; 10d28 <__assert_fail@plt+0x3c>
   10d14:	push	{ip}		; (str ip, [sp, #-4]!)
   10d18:	ldr	r0, [pc, #12]	; 10d2c <__assert_fail@plt+0x40>
   10d1c:	ldr	r3, [pc, #12]	; 10d30 <__assert_fail@plt+0x44>
   10d20:	bl	10c14 <__libc_start_main@plt>
   10d24:	bl	10cd4 <abort@plt>
   10d28:	andeq	r3, r1, ip, asr #19
   10d2c:	andeq	r1, r1, r8, lsl r0
   10d30:	andeq	r3, r1, ip, ror #18
   10d34:	ldr	r3, [pc, #20]	; 10d50 <__assert_fail@plt+0x64>
   10d38:	ldr	r2, [pc, #20]	; 10d54 <__assert_fail@plt+0x68>
   10d3c:	add	r3, pc, r3
   10d40:	ldr	r2, [r3, r2]
   10d44:	cmp	r2, #0
   10d48:	bxeq	lr
   10d4c:	b	10c2c <__gmon_start__@plt>
   10d50:			; <UNDEFINED> instruction: 0x000172bc
   10d54:	andeq	r0, r0, r0, lsr #1
   10d58:	ldr	r0, [pc, #24]	; 10d78 <__assert_fail@plt+0x8c>
   10d5c:	ldr	r3, [pc, #24]	; 10d7c <__assert_fail@plt+0x90>
   10d60:	cmp	r3, r0
   10d64:	bxeq	lr
   10d68:	ldr	r3, [pc, #16]	; 10d80 <__assert_fail@plt+0x94>
   10d6c:	cmp	r3, #0
   10d70:	bxeq	lr
   10d74:	bx	r3
   10d78:	andeq	r8, r2, r0, asr #1
   10d7c:	andeq	r8, r2, r0, asr #1
   10d80:	andeq	r0, r0, r0
   10d84:	ldr	r0, [pc, #36]	; 10db0 <__assert_fail@plt+0xc4>
   10d88:	ldr	r1, [pc, #36]	; 10db4 <__assert_fail@plt+0xc8>
   10d8c:	sub	r1, r1, r0
   10d90:	asr	r1, r1, #2
   10d94:	add	r1, r1, r1, lsr #31
   10d98:	asrs	r1, r1, #1
   10d9c:	bxeq	lr
   10da0:	ldr	r3, [pc, #16]	; 10db8 <__assert_fail@plt+0xcc>
   10da4:	cmp	r3, #0
   10da8:	bxeq	lr
   10dac:	bx	r3
   10db0:	andeq	r8, r2, r0, asr #1
   10db4:	andeq	r8, r2, r0, asr #1
   10db8:	andeq	r0, r0, r0
   10dbc:	push	{r4, lr}
   10dc0:	ldr	r4, [pc, #24]	; 10de0 <__assert_fail@plt+0xf4>
   10dc4:	ldrb	r3, [r4]
   10dc8:	cmp	r3, #0
   10dcc:	popne	{r4, pc}
   10dd0:	bl	10d58 <__assert_fail@plt+0x6c>
   10dd4:	mov	r3, #1
   10dd8:	strb	r3, [r4]
   10ddc:	pop	{r4, pc}
   10de0:	ldrdeq	r8, [r2], -r0
   10de4:	b	10d84 <__assert_fail@plt+0x98>
   10de8:	push	{fp, lr}
   10dec:	mov	fp, sp
   10df0:	bl	11c6c <__assert_fail@plt+0xf80>
   10df4:	cmp	r0, #0
   10df8:	popeq	{fp, pc}
   10dfc:	movw	r2, #33096	; 0x8148
   10e00:	ldr	r1, [r0, #12]
   10e04:	ldr	r0, [r0, #16]
   10e08:	movt	r2, #2
   10e0c:	ldr	r3, [r2]
   10e10:	sub	r1, r3, r1
   10e14:	str	r1, [r2]
   10e18:	movw	r1, #50236	; 0xc43c
   10e1c:	movt	r1, #2
   10e20:	ldr	r2, [r1]
   10e24:	sub	r0, r2, r0
   10e28:	str	r0, [r1]
   10e2c:	pop	{fp, pc}
   10e30:	movw	r0, #50236	; 0xc43c
   10e34:	movw	r1, #33096	; 0x8148
   10e38:	movw	r3, #32980	; 0x80d4
   10e3c:	vldr	d16, [pc, #76]	; 10e90 <__assert_fail@plt+0x1a4>
   10e40:	movt	r0, #2
   10e44:	movt	r1, #2
   10e48:	movt	r3, #2
   10e4c:	ldr	r2, [r1]
   10e50:	ldr	r0, [r0]
   10e54:	ldr	r1, [r3]
   10e58:	sub	r0, r2, r0
   10e5c:	vmov	s2, r2
   10e60:	vmov	s0, r0
   10e64:	add	r0, r1, #1
   10e68:	vcvt.f64.s32	d17, s0
   10e6c:	vcvt.f64.s32	d18, s2
   10e70:	str	r0, [r3]
   10e74:	movw	r0, #14812	; 0x39dc
   10e78:	vmul.f64	d16, d17, d16
   10e7c:	movt	r0, #1
   10e80:	vdiv.f64	d16, d16, d18
   10e84:	vmov	r2, r3, d16
   10e88:	b	10b60 <printf@plt>
   10e8c:	nop	{0}
   10e90:	andeq	r0, r0, r0
   10e94:	subsmi	r0, r9, r0
   10e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	add	fp, sp, #28
   10ea0:	sub	sp, sp, #4
   10ea4:	vpush	{d8}
   10ea8:	movw	r5, #33132	; 0x816c
   10eac:	movw	r7, #33096	; 0x8148
   10eb0:	movw	r6, #50236	; 0xc43c
   10eb4:	movt	r5, #2
   10eb8:	movt	r7, #2
   10ebc:	movt	r6, #2
   10ec0:	ldm	r5, {r0, r1}
   10ec4:	cmp	r0, #0
   10ec8:	str	r0, [r7]
   10ecc:	str	r1, [r6]
   10ed0:	beq	11004 <__assert_fail@plt+0x318>
   10ed4:	movw	r9, #32980	; 0x80d4
   10ed8:	sub	r2, r0, r1
   10edc:	vldr	d8, [pc, #300]	; 11010 <__assert_fail@plt+0x324>
   10ee0:	vmov	s2, r0
   10ee4:	movt	r9, #2
   10ee8:	vmov	s0, r2
   10eec:	ldr	r1, [r9]
   10ef0:	vcvt.f64.s32	d16, s0
   10ef4:	vcvt.f64.s32	d17, s2
   10ef8:	vmul.f64	d16, d16, d8
   10efc:	vdiv.f64	d16, d16, d17
   10f00:	add	r0, r1, #1
   10f04:	vmov	r2, r3, d16
   10f08:	str	r0, [r9]
   10f0c:	movw	r0, #14812	; 0x39dc
   10f10:	movt	r0, #1
   10f14:	bl	10b60 <printf@plt>
   10f18:	movw	r0, #33116	; 0x815c
   10f1c:	movt	r0, #2
   10f20:	ldr	r4, [r0]
   10f24:	cmp	r4, #0
   10f28:	beq	11004 <__assert_fail@plt+0x318>
   10f2c:	movw	r8, #14812	; 0x39dc
   10f30:	movw	r0, #9048	; 0x2358
   10f34:	add	sl, r5, #992	; 0x3e0
   10f38:	add	r5, r5, r0
   10f3c:	movt	r8, #1
   10f40:	ldr	r1, [r4, #8]
   10f44:	mov	r0, sl
   10f48:	bl	11c6c <__assert_fail@plt+0xf80>
   10f4c:	cmp	r0, #0
   10f50:	beq	10f74 <__assert_fail@plt+0x288>
   10f54:	ldr	r1, [r0, #12]
   10f58:	ldr	r2, [r7]
   10f5c:	ldr	r0, [r0, #16]
   10f60:	sub	r1, r2, r1
   10f64:	str	r1, [r7]
   10f68:	ldr	r1, [r6]
   10f6c:	sub	r0, r1, r0
   10f70:	str	r0, [r6]
   10f74:	ldr	r1, [r4, #8]
   10f78:	mov	r0, r5
   10f7c:	bl	11c6c <__assert_fail@plt+0xf80>
   10f80:	cmp	r0, #0
   10f84:	beq	10fb4 <__assert_fail@plt+0x2c8>
   10f88:	ldr	r1, [r0, #12]
   10f8c:	ldr	r2, [r0, #16]
   10f90:	ldr	r0, [r7]
   10f94:	sub	r0, r0, r1
   10f98:	ldr	r1, [r6]
   10f9c:	str	r0, [r7]
   10fa0:	sub	r1, r1, r2
   10fa4:	str	r1, [r6]
   10fa8:	cmp	r0, #0
   10fac:	bne	10fc0 <__assert_fail@plt+0x2d4>
   10fb0:	b	11004 <__assert_fail@plt+0x318>
   10fb4:	ldr	r0, [r7]
   10fb8:	cmp	r0, #0
   10fbc:	beq	11004 <__assert_fail@plt+0x318>
   10fc0:	ldr	r1, [r6]
   10fc4:	vmov	s2, r0
   10fc8:	sub	r2, r0, r1
   10fcc:	ldr	r1, [r9]
   10fd0:	vmov	s0, r2
   10fd4:	vcvt.f64.s32	d16, s0
   10fd8:	vcvt.f64.s32	d17, s2
   10fdc:	vmul.f64	d16, d16, d8
   10fe0:	add	r0, r1, #1
   10fe4:	vdiv.f64	d16, d16, d17
   10fe8:	str	r0, [r9]
   10fec:	vmov	r2, r3, d16
   10ff0:	mov	r0, r8
   10ff4:	bl	10b60 <printf@plt>
   10ff8:	ldr	r4, [r4, #4]
   10ffc:	cmp	r4, #0
   11000:	bne	10f40 <__assert_fail@plt+0x254>
   11004:	vpop	{d8}
   11008:	add	sp, sp, #4
   1100c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11010:	andeq	r0, r0, r0
   11014:	subsmi	r0, r9, r0
   11018:	push	{fp, lr}
   1101c:	mov	fp, sp
   11020:	sub	sp, sp, #8
   11024:	movw	r2, #14824	; 0x39e8
   11028:	str	r0, [sp, #4]
   1102c:	add	r0, sp, #4
   11030:	mov	r3, #0
   11034:	mov	r4, r1
   11038:	movt	r2, #1
   1103c:	bl	129bc <__assert_fail@plt+0x1cd0>
   11040:	ldr	r0, [sp, #4]
   11044:	cmp	r0, #2
   11048:	bne	11090 <__assert_fail@plt+0x3a4>
   1104c:	ldr	r1, [r4]
   11050:	movw	r5, #33100	; 0x814c
   11054:	movw	r2, #32940	; 0x80ac
   11058:	movt	r5, #2
   1105c:	movt	r2, #2
   11060:	mov	r0, r5
   11064:	bl	12ec8 <error@@Base+0x210>
   11068:	movw	r0, #33116	; 0x815c
   1106c:	mov	r1, r5
   11070:	movt	r0, #2
   11074:	bl	11ef8 <__assert_fail@plt+0x120c>
   11078:	ldr	r1, [r4, #4]
   1107c:	movw	r0, #33132	; 0x816c
   11080:	movt	r0, #2
   11084:	bl	11120 <__assert_fail@plt+0x434>
   11088:	bl	10e98 <__assert_fail@plt+0x1ac>
   1108c:	bl	12c78 <__assert_fail@plt+0x1f8c>
   11090:	movw	r0, #14860	; 0x3a0c
   11094:	movt	r0, #1
   11098:	bl	12cb8 <error@@Base>
   1109c:	andeq	r0, r0, r0
   110a0:	ldm	r0, {r3, ip}
   110a4:	add	r1, r3, r1
   110a8:	add	r2, ip, r2
   110ac:	stm	r0, {r1, r2}
   110b0:	bx	lr
   110b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   110b8:	add	fp, sp, #24
   110bc:	mov	r8, r3
   110c0:	mov	r5, r2
   110c4:	mov	r4, r1
   110c8:	mov	r6, r0
   110cc:	bl	11c6c <__assert_fail@plt+0xf80>
   110d0:	mov	r7, r0
   110d4:	cmp	r0, #0
   110d8:	bne	11104 <__assert_fail@plt+0x418>
   110dc:	mov	r0, #1
   110e0:	mov	r1, #20
   110e4:	bl	127ac <__assert_fail@plt+0x1ac0>
   110e8:	mov	r7, r0
   110ec:	mov	r0, r4
   110f0:	bl	10ba8 <strdup@plt>
   110f4:	str	r0, [r7, #8]
   110f8:	mov	r0, r6
   110fc:	mov	r1, r7
   11100:	bl	11cfc <__assert_fail@plt+0x1010>
   11104:	ldr	r0, [r7, #12]
   11108:	ldr	r1, [r7, #16]
   1110c:	add	r0, r0, r5
   11110:	add	r1, r1, r8
   11114:	str	r0, [r7, #12]
   11118:	str	r1, [r7, #16]
   1111c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11120:	push	{r4, r5, r6, r7, fp, lr}
   11124:	add	fp, sp, #16
   11128:	sub	sp, sp, #8
   1112c:	mov	r6, r1
   11130:	movw	r1, #28745	; 0x7049
   11134:	mov	r5, r0
   11138:	movt	r1, #1
   1113c:	mov	r0, r6
   11140:	bl	12848 <__assert_fail@plt+0x1b5c>
   11144:	mov	r4, r0
   11148:	movw	r0, #32984	; 0x80d8
   1114c:	mov	r1, #99	; 0x63
   11150:	movt	r0, #2
   11154:	mov	r2, r4
   11158:	bl	10b90 <fgets@plt>
   1115c:	cmp	r0, #0
   11160:	beq	11304 <__assert_fail@plt+0x618>
   11164:	movw	r0, #32984	; 0x80d8
   11168:	movw	r1, #14884	; 0x3a24
   1116c:	mov	r2, #45	; 0x2d
   11170:	movt	r0, #2
   11174:	movt	r1, #1
   11178:	bl	10cc8 <strncmp@plt>
   1117c:	cmp	r0, #0
   11180:	bne	11304 <__assert_fail@plt+0x618>
   11184:	movw	r0, #32984	; 0x80d8
   11188:	mov	r1, #99	; 0x63
   1118c:	mov	r2, r4
   11190:	movt	r0, #2
   11194:	bl	10b90 <fgets@plt>
   11198:	cmp	r0, #0
   1119c:	beq	11304 <__assert_fail@plt+0x618>
   111a0:	movw	r0, #32984	; 0x80d8
   111a4:	movw	r1, #28675	; 0x7003
   111a8:	movt	r0, #2
   111ac:	movt	r1, #1
   111b0:	bl	10b48 <strcmp@plt>
   111b4:	cmp	r0, #0
   111b8:	bne	11304 <__assert_fail@plt+0x618>
   111bc:	movw	r0, #32984	; 0x80d8
   111c0:	mov	r1, #99	; 0x63
   111c4:	mov	r2, r4
   111c8:	movt	r0, #2
   111cc:	bl	10b90 <fgets@plt>
   111d0:	cmp	r0, #0
   111d4:	beq	11304 <__assert_fail@plt+0x618>
   111d8:	movw	r0, #32984	; 0x80d8
   111dc:	movw	r1, #15065	; 0x3ad9
   111e0:	add	r2, sp, #4
   111e4:	movt	r0, #2
   111e8:	movt	r1, #1
   111ec:	bl	10c74 <__isoc99_sscanf@plt>
   111f0:	cmp	r0, #1
   111f4:	bne	11304 <__assert_fail@plt+0x618>
   111f8:	movw	r0, #32984	; 0x80d8
   111fc:	mov	r1, #99	; 0x63
   11200:	mov	r2, r4
   11204:	movt	r0, #2
   11208:	bl	10b90 <fgets@plt>
   1120c:	cmp	r0, #0
   11210:	beq	11304 <__assert_fail@plt+0x618>
   11214:	movw	r0, #32984	; 0x80d8
   11218:	movw	r1, #15065	; 0x3ad9
   1121c:	mov	r2, sp
   11220:	movt	r0, #2
   11224:	movt	r1, #1
   11228:	bl	10c74 <__isoc99_sscanf@plt>
   1122c:	cmp	r0, #1
   11230:	bne	11304 <__assert_fail@plt+0x618>
   11234:	movw	r0, #32984	; 0x80d8
   11238:	mov	r1, #99	; 0x63
   1123c:	mov	r2, r4
   11240:	movt	r0, #2
   11244:	bl	10b90 <fgets@plt>
   11248:	cmp	r0, #0
   1124c:	beq	11304 <__assert_fail@plt+0x618>
   11250:	movw	r0, #32984	; 0x80d8
   11254:	mov	r1, #99	; 0x63
   11258:	mov	r2, r4
   1125c:	movt	r0, #2
   11260:	bl	10b90 <fgets@plt>
   11264:	cmp	r0, #0
   11268:	beq	11304 <__assert_fail@plt+0x618>
   1126c:	ldm	r5, {r0, r1}
   11270:	ldr	r2, [sp, #4]
   11274:	add	r0, r0, r2
   11278:	ldr	r2, [sp]
   1127c:	add	r1, r1, r2
   11280:	stm	r5, {r0, r1}
   11284:	add	r1, r5, #8
   11288:	mov	r0, r4
   1128c:	bl	11320 <__assert_fail@plt+0x634>
   11290:	mov	r7, r0
   11294:	add	r1, r5, #416	; 0x1a0
   11298:	mov	r0, r4
   1129c:	bl	11320 <__assert_fail@plt+0x634>
   112a0:	mov	r6, r0
   112a4:	add	r1, r5, #824	; 0x338
   112a8:	mov	r0, r4
   112ac:	bl	11320 <__assert_fail@plt+0x634>
   112b0:	ldr	r0, [sp, #4]
   112b4:	cmp	r0, #1
   112b8:	blt	112f4 <__assert_fail@plt+0x608>
   112bc:	add	r1, r5, #920	; 0x398
   112c0:	mov	r0, r4
   112c4:	bl	11320 <__assert_fail@plt+0x634>
   112c8:	cmp	r7, #1
   112cc:	blt	112dc <__assert_fail@plt+0x5f0>
   112d0:	add	r1, r5, #992	; 0x3e0
   112d4:	mov	r0, r4
   112d8:	bl	11444 <__assert_fail@plt+0x758>
   112dc:	cmp	r6, #1
   112e0:	blt	112f4 <__assert_fail@plt+0x608>
   112e4:	movw	r0, #9048	; 0x2358
   112e8:	add	r1, r5, r0
   112ec:	mov	r0, r4
   112f0:	bl	11444 <__assert_fail@plt+0x758>
   112f4:	mov	r0, r4
   112f8:	bl	128c0 <__assert_fail@plt+0x1bd4>
   112fc:	sub	sp, fp, #16
   11300:	pop	{r4, r5, r6, r7, fp, pc}
   11304:	movw	r1, #14950	; 0x3a66
   11308:	movw	r0, #14932	; 0x3a54
   1130c:	cmp	r6, #0
   11310:	movt	r1, #1
   11314:	movt	r0, #1
   11318:	movne	r1, r6
   1131c:	bl	12cf8 <error@@Base+0x40>
   11320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11324:	add	fp, sp, #28
   11328:	sub	sp, sp, #12
   1132c:	mov	r5, r0
   11330:	movw	r0, #32984	; 0x80d8
   11334:	mov	r4, r1
   11338:	mov	r1, #99	; 0x63
   1133c:	movt	r0, #2
   11340:	mov	r2, r5
   11344:	bl	10b90 <fgets@plt>
   11348:	mov	r6, #0
   1134c:	cmp	r0, #0
   11350:	beq	11438 <__assert_fail@plt+0x74c>
   11354:	movw	r0, #32984	; 0x80d8
   11358:	mov	r1, #99	; 0x63
   1135c:	mov	r2, r5
   11360:	movt	r0, #2
   11364:	bl	10b90 <fgets@plt>
   11368:	cmp	r0, #0
   1136c:	beq	11438 <__assert_fail@plt+0x74c>
   11370:	movw	r7, #32984	; 0x80d8
   11374:	mov	r1, #99	; 0x63
   11378:	mov	r2, r5
   1137c:	movt	r7, #2
   11380:	mov	r0, r7
   11384:	bl	10b90 <fgets@plt>
   11388:	cmp	r0, #0
   1138c:	beq	11438 <__assert_fail@plt+0x74c>
   11390:	mov	r6, #0
   11394:	add	r9, sp, #8
   11398:	add	sl, sp, #4
   1139c:	add	r8, r7, #29
   113a0:	movw	r1, #15061	; 0x3ad5
   113a4:	mov	r0, r7
   113a8:	mov	r2, r9
   113ac:	mov	r3, sl
   113b0:	movt	r1, #1
   113b4:	bl	10c74 <__isoc99_sscanf@plt>
   113b8:	cmp	r0, #2
   113bc:	bne	11438 <__assert_fail@plt+0x74c>
   113c0:	mov	r0, r8
   113c4:	mov	r1, #0
   113c8:	mov	r2, #10
   113cc:	bl	10b54 <strtol@plt>
   113d0:	cmp	r0, #0
   113d4:	beq	113e0 <__assert_fail@plt+0x6f4>
   113d8:	ldr	r1, [sp, #8]
   113dc:	b	11400 <__assert_fail@plt+0x714>
   113e0:	movw	r1, #15053	; 0x3acd
   113e4:	mov	r0, r8
   113e8:	movt	r1, #1
   113ec:	bl	10b48 <strcmp@plt>
   113f0:	ldr	r1, [sp, #8]
   113f4:	cmp	r0, #0
   113f8:	movwne	r0, #11
   113fc:	moveq	r6, r1
   11400:	mov	r2, r4
   11404:	ldr	r0, [r2, r0, lsl #3]!
   11408:	add	r0, r0, r1
   1140c:	ldr	r1, [sp, #4]
   11410:	str	r0, [r2]
   11414:	ldr	r0, [r2, #4]
   11418:	add	r0, r0, r1
   1141c:	mov	r1, #99	; 0x63
   11420:	str	r0, [r2, #4]
   11424:	mov	r0, r7
   11428:	mov	r2, r5
   1142c:	bl	10b90 <fgets@plt>
   11430:	cmp	r0, #0
   11434:	bne	113a0 <__assert_fail@plt+0x6b4>
   11438:	mov	r0, r6
   1143c:	sub	sp, fp, #28
   11440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11448:	add	fp, sp, #28
   1144c:	sub	sp, sp, #12
   11450:	mov	r5, r0
   11454:	movw	r0, #32984	; 0x80d8
   11458:	mov	r4, r1
   1145c:	mov	r1, #99	; 0x63
   11460:	movt	r0, #2
   11464:	mov	r2, r5
   11468:	bl	10b90 <fgets@plt>
   1146c:	cmp	r0, #0
   11470:	beq	11560 <__assert_fail@plt+0x874>
   11474:	movw	r0, #32984	; 0x80d8
   11478:	mov	r1, #99	; 0x63
   1147c:	mov	r2, r5
   11480:	movt	r0, #2
   11484:	bl	10b90 <fgets@plt>
   11488:	cmp	r0, #0
   1148c:	beq	11560 <__assert_fail@plt+0x874>
   11490:	movw	r6, #32984	; 0x80d8
   11494:	mov	r1, #99	; 0x63
   11498:	mov	r2, r5
   1149c:	movt	r6, #2
   114a0:	mov	r0, r6
   114a4:	bl	10b90 <fgets@plt>
   114a8:	cmp	r0, #0
   114ac:	beq	11560 <__assert_fail@plt+0x874>
   114b0:	add	r7, r6, #29
   114b4:	movw	r1, #15061	; 0x3ad5
   114b8:	mov	r0, r6
   114bc:	add	r2, sp, #8
   114c0:	add	r3, sp, #4
   114c4:	movt	r1, #1
   114c8:	bl	10c74 <__isoc99_sscanf@plt>
   114cc:	cmp	r0, #2
   114d0:	bne	11560 <__assert_fail@plt+0x874>
   114d4:	mov	r0, r6
   114d8:	bl	10c5c <strlen@plt>
   114dc:	ldr	r9, [sp, #8]
   114e0:	ldr	sl, [sp, #4]
   114e4:	add	r0, r6, r0
   114e8:	mov	r1, #0
   114ec:	strb	r1, [r0, #-1]
   114f0:	mov	r0, r4
   114f4:	mov	r1, r7
   114f8:	bl	11c6c <__assert_fail@plt+0xf80>
   114fc:	mov	r8, r0
   11500:	cmp	r0, #0
   11504:	bne	11530 <__assert_fail@plt+0x844>
   11508:	mov	r0, #1
   1150c:	mov	r1, #20
   11510:	bl	127ac <__assert_fail@plt+0x1ac0>
   11514:	mov	r8, r0
   11518:	mov	r0, r7
   1151c:	bl	10ba8 <strdup@plt>
   11520:	str	r0, [r8, #8]
   11524:	mov	r0, r4
   11528:	mov	r1, r8
   1152c:	bl	11cfc <__assert_fail@plt+0x1010>
   11530:	ldr	r0, [r8, #12]
   11534:	ldr	r1, [r8, #16]
   11538:	mov	r2, r5
   1153c:	add	r0, r0, r9
   11540:	add	r1, r1, sl
   11544:	str	r0, [r8, #12]
   11548:	str	r1, [r8, #16]
   1154c:	mov	r0, r6
   11550:	mov	r1, #99	; 0x63
   11554:	bl	10b90 <fgets@plt>
   11558:	cmp	r0, #0
   1155c:	bne	114b4 <__assert_fail@plt+0x7c8>
   11560:	sub	sp, fp, #28
   11564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11568:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1156c:	add	fp, sp, #24
   11570:	sub	sp, sp, #8
   11574:	mov	r2, r1
   11578:	movw	r1, #14956	; 0x3a6c
   1157c:	mov	r5, r0
   11580:	movt	r1, #1
   11584:	mov	r0, r2
   11588:	bl	12848 <__assert_fail@plt+0x1b5c>
   1158c:	movw	r1, #14958	; 0x3a6e
   11590:	movw	r2, #14884	; 0x3a24
   11594:	movw	r3, #28675	; 0x7003
   11598:	mov	r4, r0
   1159c:	movt	r1, #1
   115a0:	movt	r2, #1
   115a4:	movt	r3, #1
   115a8:	bl	10c68 <fprintf@plt>
   115ac:	ldr	r2, [r5]
   115b0:	movw	r1, #14963	; 0x3a73
   115b4:	mov	r0, r4
   115b8:	movt	r1, #1
   115bc:	bl	10c68 <fprintf@plt>
   115c0:	ldr	r2, [r5, #4]
   115c4:	movw	r1, #14977	; 0x3a81
   115c8:	mov	r0, r4
   115cc:	movt	r1, #1
   115d0:	bl	10c68 <fprintf@plt>
   115d4:	ldr	r0, [r5]
   115d8:	cmp	r0, #0
   115dc:	beq	1161c <__assert_fail@plt+0x930>
   115e0:	ldr	r1, [r5, #4]
   115e4:	vldr	d16, [pc, #332]	; 11738 <__assert_fail@plt+0xa4c>
   115e8:	vmov	s2, r0
   115ec:	sub	r1, r0, r1
   115f0:	mov	r0, r4
   115f4:	vmov	s0, r1
   115f8:	movw	r1, #15078	; 0x3ae6
   115fc:	vcvt.f64.s32	d17, s0
   11600:	vcvt.f64.s32	d18, s2
   11604:	movt	r1, #1
   11608:	vmul.f64	d16, d17, d16
   1160c:	vdiv.f64	d16, d16, d18
   11610:	vmov	r2, r3, d16
   11614:	bl	10c68 <fprintf@plt>
   11618:	b	11634 <__assert_fail@plt+0x948>
   1161c:	movw	r0, #15069	; 0x3add
   11620:	mov	r1, #8
   11624:	mov	r2, #1
   11628:	mov	r3, r4
   1162c:	movt	r0, #1
   11630:	bl	10be4 <fwrite@plt>
   11634:	movw	r0, #14999	; 0x3a97
   11638:	mov	r1, #12
   1163c:	mov	r2, #1
   11640:	mov	r3, r4
   11644:	mov	r7, #1
   11648:	movt	r0, #1
   1164c:	bl	10be4 <fwrite@plt>
   11650:	movw	r3, #15012	; 0x3aa4
   11654:	mov	r8, #0
   11658:	add	r1, r5, #8
   1165c:	mov	r0, r4
   11660:	mov	r2, #50	; 0x32
   11664:	str	r7, [sp, #4]
   11668:	movt	r3, #1
   1166c:	str	r8, [sp]
   11670:	bl	11740 <__assert_fail@plt+0xa54>
   11674:	movw	r3, #15031	; 0x3ab7
   11678:	add	r6, r5, #416	; 0x1a0
   1167c:	mov	r0, r4
   11680:	mov	r2, #50	; 0x32
   11684:	str	r8, [sp]
   11688:	str	r7, [sp, #4]
   1168c:	movt	r3, #1
   11690:	mov	r1, r6
   11694:	bl	11740 <__assert_fail@plt+0xa54>
   11698:	movw	r3, #15022	; 0x3aae
   1169c:	add	r1, r5, #824	; 0x338
   116a0:	mov	r0, r4
   116a4:	mov	r2, #10
   116a8:	str	r7, [sp]
   116ac:	str	r7, [sp, #4]
   116b0:	movt	r3, #1
   116b4:	bl	11740 <__assert_fail@plt+0xa54>
   116b8:	ldr	r0, [r5]
   116bc:	cmp	r0, #1
   116c0:	blt	11728 <__assert_fail@plt+0xa3c>
   116c4:	movw	r3, #15045	; 0x3ac5
   116c8:	add	r1, r5, #920	; 0x398
   116cc:	mov	r0, r4
   116d0:	mov	r2, #8
   116d4:	str	r8, [sp]
   116d8:	str	r8, [sp, #4]
   116dc:	movt	r3, #1
   116e0:	bl	11740 <__assert_fail@plt+0xa54>
   116e4:	ldr	r0, [r5, #8]
   116e8:	cmp	r0, #1
   116ec:	blt	11704 <__assert_fail@plt+0xa18>
   116f0:	movw	r2, #15012	; 0x3aa4
   116f4:	add	r1, r5, #992	; 0x3e0
   116f8:	mov	r0, r4
   116fc:	movt	r2, #1
   11700:	bl	11aa0 <__assert_fail@plt+0xdb4>
   11704:	ldr	r0, [r6]
   11708:	cmp	r0, #1
   1170c:	blt	11728 <__assert_fail@plt+0xa3c>
   11710:	movw	r2, #15031	; 0x3ab7
   11714:	movw	r0, #9048	; 0x2358
   11718:	add	r1, r5, r0
   1171c:	movt	r2, #1
   11720:	mov	r0, r4
   11724:	bl	11aa0 <__assert_fail@plt+0xdb4>
   11728:	mov	r0, r4
   1172c:	sub	sp, fp, #24
   11730:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11734:	b	128c0 <__assert_fail@plt+0x1bd4>
   11738:	andeq	r0, r0, r0
   1173c:	subsmi	r0, r9, r0
   11740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11744:	add	fp, sp, #28
   11748:	sub	sp, sp, #4
   1174c:	vpush	{d8}
   11750:	sub	sp, sp, #8
   11754:	mov	r5, r1
   11758:	movw	r1, #15084	; 0x3aec
   1175c:	mov	r8, r2
   11760:	mov	r2, r3
   11764:	mov	r4, r0
   11768:	movt	r1, #1
   1176c:	bl	10c68 <fprintf@plt>
   11770:	movw	r0, #15132	; 0x3b1c
   11774:	mov	r1, #26
   11778:	mov	r2, #1
   1177c:	mov	r3, r4
   11780:	mov	r7, #1
   11784:	movt	r0, #1
   11788:	bl	10be4 <fwrite@plt>
   1178c:	movw	r0, #15159	; 0x3b37
   11790:	mov	r1, #3
   11794:	mov	r2, #1
   11798:	mov	r3, r4
   1179c:	movt	r0, #1
   117a0:	bl	10be4 <fwrite@plt>
   117a4:	ldrb	r1, [fp, #8]
   117a8:	movw	r0, #15089	; 0x3af1
   117ac:	movw	r2, #15096	; 0x3af8
   117b0:	movt	r0, #1
   117b4:	movt	r2, #1
   117b8:	cmp	r1, #0
   117bc:	str	r1, [sp]
   117c0:	movw	r1, #15085	; 0x3aed
   117c4:	movne	r2, r0
   117c8:	movt	r1, #1
   117cc:	mov	r0, r4
   117d0:	bl	10c68 <fprintf@plt>
   117d4:	ldr	r1, [fp, #12]
   117d8:	lsl	r0, r8, #16
   117dc:	sxth	r6, r8
   117e0:	cmp	r0, #65536	; 0x10000
   117e4:	str	r1, [sp, #4]
   117e8:	blt	118d0 <__assert_fail@plt+0xbe4>
   117ec:	vldr	d8, [pc, #676]	; 11a98 <__assert_fail@plt+0xdac>
   117f0:	movw	sl, #15103	; 0x3aff
   117f4:	mov	r8, #1
   117f8:	movt	sl, #1
   117fc:	mov	r0, r5
   11800:	ldr	r2, [r0, r7, lsl #3]!
   11804:	cmp	r2, #1
   11808:	blt	118c0 <__assert_fail@plt+0xbd4>
   1180c:	cmp	r0, #0
   11810:	beq	11870 <__assert_fail@plt+0xb84>
   11814:	add	r9, r5, r7, lsl #3
   11818:	movw	r1, #15121	; 0x3b11
   1181c:	mov	r0, r4
   11820:	ldr	r3, [r9, #4]!
   11824:	movt	r1, #1
   11828:	bl	10c68 <fprintf@plt>
   1182c:	ldr	r0, [r5, r7, lsl #3]
   11830:	cmp	r0, #0
   11834:	beq	11880 <__assert_fail@plt+0xb94>
   11838:	ldr	r1, [r9]
   1183c:	vmov	s2, r0
   11840:	sub	r1, r0, r1
   11844:	mov	r0, r4
   11848:	vmov	s0, r1
   1184c:	movw	r1, #15078	; 0x3ae6
   11850:	vcvt.f64.s32	d16, s0
   11854:	vcvt.f64.s32	d17, s2
   11858:	movt	r1, #1
   1185c:	vmul.f64	d16, d16, d8
   11860:	vdiv.f64	d16, d16, d17
   11864:	vmov	r2, r3, d16
   11868:	bl	10c68 <fprintf@plt>
   1186c:	b	11898 <__assert_fail@plt+0xbac>
   11870:	movw	r0, #15132	; 0x3b1c
   11874:	mov	r1, #26
   11878:	movt	r0, #1
   1187c:	b	1188c <__assert_fail@plt+0xba0>
   11880:	movw	r0, #15069	; 0x3add
   11884:	mov	r1, #8
   11888:	movt	r0, #1
   1188c:	mov	r2, #1
   11890:	mov	r3, r4
   11894:	bl	10be4 <fwrite@plt>
   11898:	movw	r0, #15159	; 0x3b37
   1189c:	mov	r1, #3
   118a0:	mov	r2, #1
   118a4:	mov	r3, r4
   118a8:	movt	r0, #1
   118ac:	bl	10be4 <fwrite@plt>
   118b0:	mov	r0, r4
   118b4:	mov	r1, sl
   118b8:	mov	r2, r7
   118bc:	bl	10c68 <fprintf@plt>
   118c0:	add	r8, r8, #1
   118c4:	sxth	r7, r8
   118c8:	cmp	r6, r7
   118cc:	bge	117fc <__assert_fail@plt+0xb10>
   118d0:	ldr	r0, [sp]
   118d4:	cmp	r0, #0
   118d8:	beq	119ac <__assert_fail@plt+0xcc0>
   118dc:	add	r7, r6, #1
   118e0:	mov	r0, r5
   118e4:	ldr	r2, [r0, r7, lsl #3]!
   118e8:	cmp	r2, #1
   118ec:	blt	119ac <__assert_fail@plt+0xcc0>
   118f0:	cmp	r0, #0
   118f4:	beq	11958 <__assert_fail@plt+0xc6c>
   118f8:	add	r8, r5, r7, lsl #3
   118fc:	movw	r1, #15121	; 0x3b11
   11900:	mov	r0, r4
   11904:	ldr	r3, [r8, #4]!
   11908:	movt	r1, #1
   1190c:	bl	10c68 <fprintf@plt>
   11910:	ldr	r0, [r5, r7, lsl #3]
   11914:	cmp	r0, #0
   11918:	beq	11968 <__assert_fail@plt+0xc7c>
   1191c:	ldr	r1, [r8]
   11920:	vldr	d16, [pc, #368]	; 11a98 <__assert_fail@plt+0xdac>
   11924:	vmov	s2, r0
   11928:	sub	r1, r0, r1
   1192c:	mov	r0, r4
   11930:	vmov	s0, r1
   11934:	movw	r1, #15078	; 0x3ae6
   11938:	vcvt.f64.s32	d17, s0
   1193c:	vcvt.f64.s32	d18, s2
   11940:	movt	r1, #1
   11944:	vmul.f64	d16, d17, d16
   11948:	vdiv.f64	d16, d16, d18
   1194c:	vmov	r2, r3, d16
   11950:	bl	10c68 <fprintf@plt>
   11954:	b	11980 <__assert_fail@plt+0xc94>
   11958:	movw	r0, #15132	; 0x3b1c
   1195c:	mov	r1, #26
   11960:	movt	r0, #1
   11964:	b	11974 <__assert_fail@plt+0xc88>
   11968:	movw	r0, #15069	; 0x3add
   1196c:	mov	r1, #8
   11970:	movt	r0, #1
   11974:	mov	r2, #1
   11978:	mov	r3, r4
   1197c:	bl	10be4 <fwrite@plt>
   11980:	movw	r0, #15159	; 0x3b37
   11984:	mov	r1, #3
   11988:	mov	r2, #1
   1198c:	mov	r3, r4
   11990:	movt	r0, #1
   11994:	bl	10be4 <fwrite@plt>
   11998:	movw	r1, #15112	; 0x3b08
   1199c:	mov	r0, r4
   119a0:	mov	r2, r6
   119a4:	movt	r1, #1
   119a8:	bl	10c68 <fprintf@plt>
   119ac:	ldr	r0, [sp, #4]
   119b0:	tst	r0, #255	; 0xff
   119b4:	beq	11a1c <__assert_fail@plt+0xd30>
   119b8:	cmp	r5, #0
   119bc:	beq	11a2c <__assert_fail@plt+0xd40>
   119c0:	ldm	r5, {r2, r3}
   119c4:	movw	r1, #15121	; 0x3b11
   119c8:	mov	r0, r4
   119cc:	movt	r1, #1
   119d0:	bl	10c68 <fprintf@plt>
   119d4:	ldr	r0, [r5]
   119d8:	cmp	r0, #0
   119dc:	beq	11a3c <__assert_fail@plt+0xd50>
   119e0:	ldr	r1, [r5, #4]
   119e4:	vldr	d16, [pc, #172]	; 11a98 <__assert_fail@plt+0xdac>
   119e8:	vmov	s2, r0
   119ec:	sub	r1, r0, r1
   119f0:	mov	r0, r4
   119f4:	vmov	s0, r1
   119f8:	movw	r1, #15078	; 0x3ae6
   119fc:	vcvt.f64.s32	d17, s0
   11a00:	vcvt.f64.s32	d18, s2
   11a04:	movt	r1, #1
   11a08:	vmul.f64	d16, d17, d16
   11a0c:	vdiv.f64	d16, d16, d18
   11a10:	vmov	r2, r3, d16
   11a14:	bl	10c68 <fprintf@plt>
   11a18:	b	11a54 <__assert_fail@plt+0xd68>
   11a1c:	sub	sp, fp, #40	; 0x28
   11a20:	vpop	{d8}
   11a24:	add	sp, sp, #4
   11a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a2c:	movw	r0, #15132	; 0x3b1c
   11a30:	mov	r1, #26
   11a34:	movt	r0, #1
   11a38:	b	11a48 <__assert_fail@plt+0xd5c>
   11a3c:	movw	r0, #15069	; 0x3add
   11a40:	mov	r1, #8
   11a44:	movt	r0, #1
   11a48:	mov	r2, #1
   11a4c:	mov	r3, r4
   11a50:	bl	10be4 <fwrite@plt>
   11a54:	movw	r0, #15159	; 0x3b37
   11a58:	mov	r1, #3
   11a5c:	mov	r2, #1
   11a60:	mov	r3, r4
   11a64:	movt	r0, #1
   11a68:	bl	10be4 <fwrite@plt>
   11a6c:	movw	r0, #15053	; 0x3acd
   11a70:	mov	r1, #7
   11a74:	mov	r2, #1
   11a78:	mov	r3, r4
   11a7c:	movt	r0, #1
   11a80:	sub	sp, fp, #40	; 0x28
   11a84:	vpop	{d8}
   11a88:	add	sp, sp, #4
   11a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a90:	b	10be4 <fwrite@plt>
   11a94:	nop	{0}
   11a98:	andeq	r0, r0, r0
   11a9c:	subsmi	r0, r9, r0
   11aa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aa4:	add	fp, sp, #28
   11aa8:	sub	sp, sp, #4
   11aac:	vpush	{d8}
   11ab0:	mov	r5, r0
   11ab4:	mov	r0, r1
   11ab8:	mov	r6, r2
   11abc:	mov	r8, r1
   11ac0:	bl	11e1c <__assert_fail@plt+0x1130>
   11ac4:	movw	r0, #8052	; 0x1f74
   11ac8:	movw	r2, #7200	; 0x1c20
   11acc:	ldr	r0, [r8, r0]!
   11ad0:	movt	r2, #1
   11ad4:	mov	r4, r8
   11ad8:	ldr	r1, [r4, #-4]!
   11adc:	bl	13864 <error@@Base+0xbac>
   11ae0:	movw	r1, #15084	; 0x3aec
   11ae4:	mov	r0, r5
   11ae8:	mov	r2, r6
   11aec:	movt	r1, #1
   11af0:	bl	10c68 <fprintf@plt>
   11af4:	movw	r0, #15132	; 0x3b1c
   11af8:	mov	r1, #26
   11afc:	mov	r2, #1
   11b00:	mov	r3, r5
   11b04:	movt	r0, #1
   11b08:	bl	10be4 <fwrite@plt>
   11b0c:	movw	r0, #15159	; 0x3b37
   11b10:	mov	r1, #3
   11b14:	mov	r2, #1
   11b18:	mov	r3, r5
   11b1c:	movt	r0, #1
   11b20:	bl	10be4 <fwrite@plt>
   11b24:	mov	r0, #10
   11b28:	mov	r1, r5
   11b2c:	bl	10c98 <fputc@plt>
   11b30:	ldr	r0, [r8]
   11b34:	cmp	r0, #1
   11b38:	blt	11c0c <__assert_fail@plt+0xf20>
   11b3c:	vldr	d8, [pc, #212]	; 11c18 <__assert_fail@plt+0xf2c>
   11b40:	movw	r7, #15159	; 0x3b37
   11b44:	movw	r6, #15085	; 0x3aed
   11b48:	mov	sl, #0
   11b4c:	movt	r7, #1
   11b50:	movt	r6, #1
   11b54:	ldr	r0, [r4]
   11b58:	movw	r1, #15121	; 0x3b11
   11b5c:	movt	r1, #1
   11b60:	ldr	r9, [r0, sl, lsl #2]
   11b64:	mov	r0, r5
   11b68:	ldr	r2, [r9, #12]
   11b6c:	ldr	r3, [r9, #16]
   11b70:	bl	10c68 <fprintf@plt>
   11b74:	ldr	r0, [r9, #12]
   11b78:	cmp	r0, #0
   11b7c:	beq	11bb8 <__assert_fail@plt+0xecc>
   11b80:	ldr	r1, [r9, #16]
   11b84:	vmov	s2, r0
   11b88:	sub	r1, r0, r1
   11b8c:	mov	r0, r5
   11b90:	vmov	s0, r1
   11b94:	movw	r1, #15078	; 0x3ae6
   11b98:	vcvt.f64.s32	d16, s0
   11b9c:	vcvt.f64.s32	d17, s2
   11ba0:	movt	r1, #1
   11ba4:	vmul.f64	d16, d16, d8
   11ba8:	vdiv.f64	d16, d16, d17
   11bac:	vmov	r2, r3, d16
   11bb0:	bl	10c68 <fprintf@plt>
   11bb4:	b	11bd0 <__assert_fail@plt+0xee4>
   11bb8:	movw	r0, #15069	; 0x3add
   11bbc:	mov	r1, #8
   11bc0:	mov	r2, #1
   11bc4:	mov	r3, r5
   11bc8:	movt	r0, #1
   11bcc:	bl	10be4 <fwrite@plt>
   11bd0:	mov	r0, r7
   11bd4:	mov	r1, #3
   11bd8:	mov	r2, #1
   11bdc:	mov	r3, r5
   11be0:	bl	10be4 <fwrite@plt>
   11be4:	ldr	r0, [r4]
   11be8:	mov	r1, r6
   11bec:	ldr	r0, [r0, sl, lsl #2]
   11bf0:	ldr	r2, [r0, #8]
   11bf4:	mov	r0, r5
   11bf8:	bl	10c68 <fprintf@plt>
   11bfc:	ldr	r0, [r8]
   11c00:	add	sl, sl, #1
   11c04:	cmp	sl, r0
   11c08:	blt	11b54 <__assert_fail@plt+0xe68>
   11c0c:	vpop	{d8}
   11c10:	add	sp, sp, #4
   11c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c18:	andeq	r0, r0, r0
   11c1c:	subsmi	r0, r9, r0
   11c20:	ldr	r1, [r1, #8]
   11c24:	ldr	r0, [r0, #8]
   11c28:	b	127cc <__assert_fail@plt+0x1ae0>
   11c2c:	push	{r4, r5, r6, sl, fp, lr}
   11c30:	add	fp, sp, #16
   11c34:	mov	r4, r0
   11c38:	movw	r6, #503	; 0x1f7
   11c3c:	mov	r5, r0
   11c40:	mov	r0, r5
   11c44:	bl	135c4 <error@@Base+0x90c>
   11c48:	subs	r6, r6, #1
   11c4c:	add	r5, r5, #16
   11c50:	bne	11c40 <__assert_fail@plt+0xf54>
   11c54:	movw	r0, #8052	; 0x1f74
   11c58:	mov	r1, #0
   11c5c:	str	r1, [r4, r0]
   11c60:	movw	r0, #8048	; 0x1f70
   11c64:	str	r1, [r4, r0]
   11c68:	pop	{r4, r5, r6, sl, fp, pc}
   11c6c:	push	{r4, r5, r6, sl, fp, lr}
   11c70:	add	fp, sp, #16
   11c74:	mov	r5, r1
   11c78:	ldrb	r1, [r1]
   11c7c:	mov	r4, #0
   11c80:	mov	r2, #0
   11c84:	cmp	r1, #0
   11c88:	beq	11cbc <__assert_fail@plt+0xfd0>
   11c8c:	add	r3, r5, #1
   11c90:	mov	r2, #0
   11c94:	uxtab	r2, r2, r1
   11c98:	ldrb	r1, [r3], #1
   11c9c:	cmp	r1, #0
   11ca0:	bne	11c94 <__assert_fail@plt+0xfa8>
   11ca4:	movw	r1, #20065	; 0x4e61
   11ca8:	movt	r1, #33354	; 0x824a
   11cac:	umull	r1, r3, r2, r1
   11cb0:	lsr	r1, r3, #8
   11cb4:	movw	r3, #503	; 0x1f7
   11cb8:	mls	r2, r1, r3, r2
   11cbc:	ldr	r6, [r0, r2, lsl #4]
   11cc0:	cmp	r6, #0
   11cc4:	bne	11cdc <__assert_fail@plt+0xff0>
   11cc8:	mov	r0, r4
   11ccc:	pop	{r4, r5, r6, sl, fp, pc}
   11cd0:	ldr	r6, [r6, #4]
   11cd4:	cmp	r6, #0
   11cd8:	beq	11cc8 <__assert_fail@plt+0xfdc>
   11cdc:	ldr	r1, [r6, #8]
   11ce0:	mov	r0, r5
   11ce4:	bl	10b48 <strcmp@plt>
   11ce8:	cmp	r0, #0
   11cec:	bne	11cd0 <__assert_fail@plt+0xfe4>
   11cf0:	mov	r4, r6
   11cf4:	mov	r0, r4
   11cf8:	pop	{r4, r5, r6, sl, fp, pc}
   11cfc:	push	{r4, r5, fp, lr}
   11d00:	add	fp, sp, #8
   11d04:	mov	r4, r0
   11d08:	ldr	r0, [r1, #8]
   11d0c:	ldrb	r2, [r0]
   11d10:	cmp	r2, #0
   11d14:	beq	11d4c <__assert_fail@plt+0x1060>
   11d18:	add	r3, r0, #1
   11d1c:	mov	r0, #0
   11d20:	uxtab	r0, r0, r2
   11d24:	ldrb	r2, [r3], #1
   11d28:	cmp	r2, #0
   11d2c:	bne	11d20 <__assert_fail@plt+0x1034>
   11d30:	movw	r2, #20065	; 0x4e61
   11d34:	movt	r2, #33354	; 0x824a
   11d38:	umull	r2, r3, r0, r2
   11d3c:	lsr	r2, r3, #8
   11d40:	movw	r3, #503	; 0x1f7
   11d44:	mls	r0, r2, r3, r0
   11d48:	b	11d50 <__assert_fail@plt+0x1064>
   11d4c:	mov	r0, #0
   11d50:	add	r0, r4, r0, lsl #4
   11d54:	bl	135d0 <error@@Base+0x918>
   11d58:	movw	r0, #8048	; 0x1f70
   11d5c:	mov	r5, r4
   11d60:	ldr	r0, [r5, r0]!
   11d64:	cmp	r0, #0
   11d68:	beq	11d78 <__assert_fail@plt+0x108c>
   11d6c:	bl	10b78 <free@plt>
   11d70:	mov	r0, #0
   11d74:	str	r0, [r5]
   11d78:	movw	r0, #8052	; 0x1f74
   11d7c:	ldr	r0, [r4, r0]!
   11d80:	add	r0, r0, #1
   11d84:	str	r0, [r4]
   11d88:	pop	{r4, r5, fp, pc}
   11d8c:	push	{r4, r5, fp, lr}
   11d90:	add	fp, sp, #8
   11d94:	mov	r4, r0
   11d98:	ldr	r0, [r1, #8]
   11d9c:	ldrb	r2, [r0]
   11da0:	cmp	r2, #0
   11da4:	beq	11ddc <__assert_fail@plt+0x10f0>
   11da8:	add	r3, r0, #1
   11dac:	mov	r0, #0
   11db0:	uxtab	r0, r0, r2
   11db4:	ldrb	r2, [r3], #1
   11db8:	cmp	r2, #0
   11dbc:	bne	11db0 <__assert_fail@plt+0x10c4>
   11dc0:	movw	r2, #20065	; 0x4e61
   11dc4:	movt	r2, #33354	; 0x824a
   11dc8:	umull	r2, r3, r0, r2
   11dcc:	lsr	r2, r3, #8
   11dd0:	movw	r3, #503	; 0x1f7
   11dd4:	mls	r0, r2, r3, r0
   11dd8:	b	11de0 <__assert_fail@plt+0x10f4>
   11ddc:	mov	r0, #0
   11de0:	add	r0, r4, r0, lsl #4
   11de4:	bl	13718 <error@@Base+0xa60>
   11de8:	movw	r0, #8048	; 0x1f70
   11dec:	mov	r5, r4
   11df0:	ldr	r0, [r5, r0]!
   11df4:	cmp	r0, #0
   11df8:	beq	11e08 <__assert_fail@plt+0x111c>
   11dfc:	bl	10b78 <free@plt>
   11e00:	mov	r0, #0
   11e04:	str	r0, [r5]
   11e08:	movw	r0, #8052	; 0x1f74
   11e0c:	ldr	r0, [r4, r0]!
   11e10:	sub	r0, r0, #1
   11e14:	str	r0, [r4]
   11e18:	pop	{r4, r5, fp, pc}
   11e1c:	push	{r4, r5, fp, lr}
   11e20:	add	fp, sp, #8
   11e24:	mov	r4, r0
   11e28:	movw	r0, #8048	; 0x1f70
   11e2c:	mov	r5, r4
   11e30:	ldr	r0, [r5, r0]!
   11e34:	cmp	r0, #0
   11e38:	bne	11e94 <__assert_fail@plt+0x11a8>
   11e3c:	movw	r0, #8052	; 0x1f74
   11e40:	ldr	r0, [r4, r0]
   11e44:	cmp	r0, #0
   11e48:	popeq	{r4, r5, fp, pc}
   11e4c:	mov	r1, #4
   11e50:	bl	127ac <__assert_fail@plt+0x1ac0>
   11e54:	str	r0, [r5]
   11e58:	mov	r0, #0
   11e5c:	movw	ip, #503	; 0x1f7
   11e60:	mov	r2, #0
   11e64:	ldr	r3, [r4, r2, lsl #4]
   11e68:	cmp	r3, #0
   11e6c:	beq	11e88 <__assert_fail@plt+0x119c>
   11e70:	ldr	r1, [r5]
   11e74:	str	r3, [r1, r0, lsl #2]
   11e78:	add	r0, r0, #1
   11e7c:	ldr	r3, [r3, #4]
   11e80:	cmp	r3, #0
   11e84:	bne	11e70 <__assert_fail@plt+0x1184>
   11e88:	add	r2, r2, #1
   11e8c:	cmp	r2, ip
   11e90:	bne	11e64 <__assert_fail@plt+0x1178>
   11e94:	pop	{r4, r5, fp, pc}
   11e98:	push	{r4, r5, r6, r7, fp, lr}
   11e9c:	add	fp, sp, #16
   11ea0:	mov	r5, r1
   11ea4:	mov	r4, r0
   11ea8:	movw	r7, #503	; 0x1f7
   11eac:	mov	r6, r0
   11eb0:	mov	r0, r6
   11eb4:	mov	r1, r5
   11eb8:	bl	137e4 <error@@Base+0xb2c>
   11ebc:	subs	r7, r7, #1
   11ec0:	add	r6, r6, #16
   11ec4:	bne	11eb0 <__assert_fail@plt+0x11c4>
   11ec8:	movw	r0, #8048	; 0x1f70
   11ecc:	mov	r5, r4
   11ed0:	ldr	r0, [r5, r0]!
   11ed4:	cmp	r0, #0
   11ed8:	beq	11ee8 <__assert_fail@plt+0x11fc>
   11edc:	bl	10b78 <free@plt>
   11ee0:	mov	r0, #0
   11ee4:	str	r0, [r5]
   11ee8:	movw	r0, #8052	; 0x1f74
   11eec:	mov	r1, #0
   11ef0:	str	r1, [r4, r0]
   11ef4:	pop	{r4, r5, r6, r7, fp, pc}
   11ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11efc:	add	fp, sp, #28
   11f00:	sub	sp, sp, #28
   11f04:	ldr	r8, [r1]
   11f08:	str	r0, [sp, #4]
   11f0c:	cmp	r8, #0
   11f10:	str	r8, [sp, #16]
   11f14:	beq	12724 <__assert_fail@plt+0x1a38>
   11f18:	movw	sl, #15164	; 0x3b3c
   11f1c:	add	r9, sp, #12
   11f20:	movt	sl, #1
   11f24:	mov	r0, #17
   11f28:	mov	r1, r8
   11f2c:	mov	r5, r9
   11f30:	mov	lr, r0
   11f34:	mov	r9, #18
   11f38:	cmp	r5, #0
   11f3c:	beq	120a8 <__assert_fail@plt+0x13bc>
   11f40:	mov	r5, r1
   11f44:	ldr	r0, [r5, #12]
   11f48:	mov	r2, #0
   11f4c:	movw	r1, #1092	; 0x444
   11f50:	sub	r3, r1, r2
   11f54:	add	r3, r2, r3, lsr #1
   11f58:	add	r7, r3, r3, lsl #1
   11f5c:	ldr	r6, [sl, r7, lsl #2]
   11f60:	cmp	r6, r0
   11f64:	bls	11f78 <__assert_fail@plt+0x128c>
   11f68:	sub	r1, r3, #1
   11f6c:	cmp	r1, r2
   11f70:	bcs	11f50 <__assert_fail@plt+0x1264>
   11f74:	b	11fc4 <__assert_fail@plt+0x12d8>
   11f78:	add	r2, sl, r7, lsl #2
   11f7c:	ldr	r7, [r2, #4]
   11f80:	cmp	r7, r0
   11f84:	bcs	11f98 <__assert_fail@plt+0x12ac>
   11f88:	add	r2, r3, #1
   11f8c:	cmp	r1, r2
   11f90:	bcs	11f50 <__assert_fail@plt+0x1264>
   11f94:	b	11fc4 <__assert_fail@plt+0x12d8>
   11f98:	ldr	r1, [r2, #8]
   11f9c:	orr	r1, r1, #2
   11fa0:	cmp	r1, #6
   11fa4:	bne	11fc4 <__assert_fail@plt+0x12d8>
   11fa8:	ldr	r5, [r5, #4]
   11fac:	cmp	r5, #0
   11fb0:	bne	11f44 <__assert_fail@plt+0x1258>
   11fb4:	mov	r2, #18
   11fb8:	mov	ip, #18
   11fbc:	mov	r5, #0
   11fc0:	b	122f0 <__assert_fail@plt+0x1604>
   11fc4:	cmp	r5, #0
   11fc8:	beq	120a8 <__assert_fail@plt+0x13bc>
   11fcc:	mov	r2, #0
   11fd0:	movw	r1, #1092	; 0x444
   11fd4:	sub	r3, r1, r2
   11fd8:	add	r3, r2, r3, lsr #1
   11fdc:	add	r7, r3, r3, lsl #1
   11fe0:	ldr	r6, [sl, r7, lsl #2]
   11fe4:	cmp	r6, r0
   11fe8:	bls	11ffc <__assert_fail@plt+0x1310>
   11fec:	sub	r1, r3, #1
   11ff0:	cmp	r1, r2
   11ff4:	bcs	11fd4 <__assert_fail@plt+0x12e8>
   11ff8:	b	12018 <__assert_fail@plt+0x132c>
   11ffc:	add	r2, sl, r7, lsl #2
   12000:	ldr	r7, [r2, #4]
   12004:	cmp	r7, r0
   12008:	bcs	122dc <__assert_fail@plt+0x15f0>
   1200c:	add	r2, r3, #1
   12010:	cmp	r1, r2
   12014:	bcs	11fd4 <__assert_fail@plt+0x12e8>
   12018:	mov	ip, #0
   1201c:	ldr	r6, [r5, #4]
   12020:	cmp	r6, #0
   12024:	beq	122ec <__assert_fail@plt+0x1600>
   12028:	mov	r2, r6
   1202c:	str	r5, [sp, #8]
   12030:	ldr	r0, [r2, #12]
   12034:	mov	r4, #0
   12038:	movw	r3, #1092	; 0x444
   1203c:	sub	r7, r3, r4
   12040:	add	r7, r4, r7, lsr #1
   12044:	add	r5, r7, r7, lsl #1
   12048:	ldr	r1, [sl, r5, lsl #2]
   1204c:	cmp	r1, r0
   12050:	bls	12064 <__assert_fail@plt+0x1378>
   12054:	sub	r3, r7, #1
   12058:	cmp	r3, r4
   1205c:	bcs	1203c <__assert_fail@plt+0x1350>
   12060:	b	120b8 <__assert_fail@plt+0x13cc>
   12064:	add	r5, sl, r5, lsl #2
   12068:	ldr	r1, [r5, #4]
   1206c:	cmp	r1, r0
   12070:	bcs	12084 <__assert_fail@plt+0x1398>
   12074:	add	r4, r7, #1
   12078:	cmp	r3, r4
   1207c:	bcs	1203c <__assert_fail@plt+0x1350>
   12080:	b	120b8 <__assert_fail@plt+0x13cc>
   12084:	ldr	r1, [r5, #8]
   12088:	orr	r1, r1, #2
   1208c:	cmp	r1, #6
   12090:	bne	120b8 <__assert_fail@plt+0x13cc>
   12094:	ldr	r2, [r2, #4]
   12098:	cmp	r2, #0
   1209c:	bne	12030 <__assert_fail@plt+0x1344>
   120a0:	mov	r2, #18
   120a4:	b	12120 <__assert_fail@plt+0x1434>
   120a8:	mov	r5, #0
   120ac:	mov	r2, #18
   120b0:	mov	ip, #18
   120b4:	b	122f0 <__assert_fail@plt+0x1604>
   120b8:	cmp	r2, #0
   120bc:	beq	1211c <__assert_fail@plt+0x1430>
   120c0:	mov	r3, #0
   120c4:	movw	r2, #1092	; 0x444
   120c8:	sub	r1, r2, r3
   120cc:	add	r7, r3, r1, lsr #1
   120d0:	add	r5, r7, r7, lsl #1
   120d4:	ldr	r1, [sl, r5, lsl #2]
   120d8:	cmp	r1, r0
   120dc:	bls	120f0 <__assert_fail@plt+0x1404>
   120e0:	sub	r2, r7, #1
   120e4:	cmp	r2, r3
   120e8:	bcs	120c8 <__assert_fail@plt+0x13dc>
   120ec:	b	12114 <__assert_fail@plt+0x1428>
   120f0:	add	r3, sl, r5, lsl #2
   120f4:	ldr	r1, [r3, #4]
   120f8:	cmp	r1, r0
   120fc:	bcs	12480 <__assert_fail@plt+0x1794>
   12100:	add	r3, r7, #1
   12104:	cmp	r2, r3
   12108:	bcs	120c8 <__assert_fail@plt+0x13dc>
   1210c:	mov	r2, #0
   12110:	b	12120 <__assert_fail@plt+0x1434>
   12114:	mov	r2, #0
   12118:	b	12120 <__assert_fail@plt+0x1434>
   1211c:	mov	r2, #18
   12120:	ldr	r0, [r6, #12]
   12124:	mov	r4, #0
   12128:	movw	r3, #1092	; 0x444
   1212c:	sub	r1, r3, r4
   12130:	add	r7, r4, r1, lsr #1
   12134:	add	r5, r7, r7, lsl #1
   12138:	ldr	r1, [sl, r5, lsl #2]
   1213c:	cmp	r1, r0
   12140:	bls	12154 <__assert_fail@plt+0x1468>
   12144:	sub	r3, r7, #1
   12148:	cmp	r3, r4
   1214c:	bcs	1212c <__assert_fail@plt+0x1440>
   12150:	b	121ac <__assert_fail@plt+0x14c0>
   12154:	add	r5, sl, r5, lsl #2
   12158:	ldr	r1, [r5, #4]
   1215c:	cmp	r1, r0
   12160:	bcs	12174 <__assert_fail@plt+0x1488>
   12164:	add	r4, r7, #1
   12168:	cmp	r3, r4
   1216c:	bcs	1212c <__assert_fail@plt+0x1440>
   12170:	b	121ac <__assert_fail@plt+0x14c0>
   12174:	ldr	r0, [r5, #8]
   12178:	orr	r0, r0, #2
   1217c:	cmp	r0, #6
   12180:	bne	121ac <__assert_fail@plt+0x14c0>
   12184:	ldr	r6, [r6, #4]
   12188:	cmp	r6, #0
   1218c:	bne	12120 <__assert_fail@plt+0x1434>
   12190:	ldr	r5, [sp, #8]
   12194:	mov	r9, #18
   12198:	cmp	ip, #1
   1219c:	moveq	r0, #1
   121a0:	cmpeq	r2, #2
   121a4:	bne	122f0 <__assert_fail@plt+0x1604>
   121a8:	b	12400 <__assert_fail@plt+0x1714>
   121ac:	mov	r9, #18
   121b0:	cmp	r6, #0
   121b4:	beq	122ac <__assert_fail@plt+0x15c0>
   121b8:	ldr	r6, [r6, #4]
   121bc:	cmp	r6, #0
   121c0:	beq	12234 <__assert_fail@plt+0x1548>
   121c4:	ldr	r0, [r6, #12]
   121c8:	mov	r3, #0
   121cc:	movw	r4, #1092	; 0x444
   121d0:	sub	r1, r4, r3
   121d4:	add	r7, r3, r1, lsr #1
   121d8:	add	r5, r7, r7, lsl #1
   121dc:	ldr	r1, [sl, r5, lsl #2]
   121e0:	cmp	r1, r0
   121e4:	bls	121f8 <__assert_fail@plt+0x150c>
   121e8:	sub	r4, r7, #1
   121ec:	cmp	r4, r3
   121f0:	bcs	121d0 <__assert_fail@plt+0x14e4>
   121f4:	b	1224c <__assert_fail@plt+0x1560>
   121f8:	add	r3, sl, r5, lsl #2
   121fc:	ldr	r1, [r3, #4]
   12200:	cmp	r1, r0
   12204:	bcs	12218 <__assert_fail@plt+0x152c>
   12208:	add	r3, r7, #1
   1220c:	cmp	r4, r3
   12210:	bcs	121d0 <__assert_fail@plt+0x14e4>
   12214:	b	1224c <__assert_fail@plt+0x1560>
   12218:	ldr	r1, [r3, #8]
   1221c:	orr	r1, r1, #2
   12220:	cmp	r1, #6
   12224:	bne	1224c <__assert_fail@plt+0x1560>
   12228:	ldr	r6, [r6, #4]
   1222c:	cmp	r6, #0
   12230:	bne	121c4 <__assert_fail@plt+0x14d8>
   12234:	ldr	r5, [sp, #8]
   12238:	cmp	ip, #1
   1223c:	moveq	r0, #1
   12240:	cmpeq	r2, #2
   12244:	bne	122f0 <__assert_fail@plt+0x1604>
   12248:	b	12400 <__assert_fail@plt+0x1714>
   1224c:	ldr	r5, [sp, #8]
   12250:	cmp	r6, #0
   12254:	beq	122b0 <__assert_fail@plt+0x15c4>
   12258:	mov	r4, #0
   1225c:	movw	r6, #1092	; 0x444
   12260:	sub	r1, r6, r4
   12264:	add	r3, r4, r1, lsr #1
   12268:	add	r7, r3, r3, lsl #1
   1226c:	ldr	r1, [sl, r7, lsl #2]
   12270:	cmp	r1, r0
   12274:	bls	12288 <__assert_fail@plt+0x159c>
   12278:	sub	r6, r3, #1
   1227c:	cmp	r6, r4
   12280:	bcs	12260 <__assert_fail@plt+0x1574>
   12284:	b	122c4 <__assert_fail@plt+0x15d8>
   12288:	add	r7, sl, r7, lsl #2
   1228c:	ldr	r1, [r7, #4]
   12290:	cmp	r1, r0
   12294:	bcs	12540 <__assert_fail@plt+0x1854>
   12298:	add	r4, r3, #1
   1229c:	mov	r9, #0
   122a0:	cmp	r6, r4
   122a4:	bcs	12260 <__assert_fail@plt+0x1574>
   122a8:	b	122b0 <__assert_fail@plt+0x15c4>
   122ac:	ldr	r5, [sp, #8]
   122b0:	cmp	ip, #1
   122b4:	moveq	r0, #1
   122b8:	cmpeq	r2, #2
   122bc:	bne	122f0 <__assert_fail@plt+0x1604>
   122c0:	b	12400 <__assert_fail@plt+0x1714>
   122c4:	mov	r9, #0
   122c8:	cmp	ip, #1
   122cc:	moveq	r0, #1
   122d0:	cmpeq	r2, #2
   122d4:	bne	122f0 <__assert_fail@plt+0x1604>
   122d8:	b	12400 <__assert_fail@plt+0x1714>
   122dc:	ldr	ip, [r2, #8]
   122e0:	ldr	r6, [r5, #4]
   122e4:	cmp	r6, #0
   122e8:	bne	12028 <__assert_fail@plt+0x133c>
   122ec:	mov	r2, #18
   122f0:	sub	r0, r2, #1
   122f4:	cmp	r0, #3
   122f8:	subcs	r0, ip, #1
   122fc:	cmpcs	r0, #3
   12300:	bcc	12568 <__assert_fail@plt+0x187c>
   12304:	orr	r6, r2, #1
   12308:	orr	r4, ip, #1
   1230c:	cmp	r6, #9
   12310:	cmpeq	r4, #9
   12314:	beq	123fc <__assert_fail@plt+0x1710>
   12318:	cmp	r4, #9
   1231c:	bne	12358 <__assert_fail@plt+0x166c>
   12320:	cmp	r2, #13
   12324:	bhi	12358 <__assert_fail@plt+0x166c>
   12328:	mov	r0, #1
   1232c:	mov	r1, #13312	; 0x3400
   12330:	tst	r1, r0, lsl r2
   12334:	beq	12358 <__assert_fail@plt+0x166c>
   12338:	orr	r0, r9, #1
   1233c:	cmp	r0, #9
   12340:	bne	12358 <__assert_fail@plt+0x166c>
   12344:	mov	r0, ip
   12348:	ldr	r1, [r5, #4]
   1234c:	cmp	r1, #0
   12350:	bne	11f30 <__assert_fail@plt+0x1244>
   12354:	b	12568 <__assert_fail@plt+0x187c>
   12358:	orr	r0, lr, #1
   1235c:	cmp	r0, #9
   12360:	bne	12398 <__assert_fail@plt+0x16ac>
   12364:	cmp	ip, #13
   12368:	bhi	12398 <__assert_fail@plt+0x16ac>
   1236c:	mov	r0, #1
   12370:	mov	r1, #13312	; 0x3400
   12374:	tst	r1, r0, lsl ip
   12378:	beq	12398 <__assert_fail@plt+0x16ac>
   1237c:	cmp	r6, #9
   12380:	bne	12398 <__assert_fail@plt+0x16ac>
   12384:	mov	r0, ip
   12388:	ldr	r1, [r5, #4]
   1238c:	cmp	r1, #0
   12390:	bne	11f30 <__assert_fail@plt+0x1244>
   12394:	b	12568 <__assert_fail@plt+0x187c>
   12398:	cmp	r2, #10
   1239c:	mov	r0, #8
   123a0:	cmpeq	ip, #8
   123a4:	beq	12400 <__assert_fail@plt+0x1714>
   123a8:	cmp	r9, #8
   123ac:	cmpeq	r2, #11
   123b0:	beq	12410 <__assert_fail@plt+0x1724>
   123b4:	cmp	r2, #8
   123b8:	cmpeq	lr, #8
   123bc:	beq	1241c <__assert_fail@plt+0x1730>
   123c0:	sub	r0, r4, #9
   123c4:	cmp	r2, #15
   123c8:	clz	r0, r0
   123cc:	lsr	r1, r0, #5
   123d0:	bne	1242c <__assert_fail@plt+0x1740>
   123d4:	sub	r0, ip, #15
   123d8:	clz	r0, r0
   123dc:	lsr	r0, r0, #5
   123e0:	orrs	r0, r0, r1
   123e4:	beq	1242c <__assert_fail@plt+0x1740>
   123e8:	mov	r0, ip
   123ec:	ldr	r1, [r5, #4]
   123f0:	cmp	r1, #0
   123f4:	bne	11f30 <__assert_fail@plt+0x1244>
   123f8:	b	12568 <__assert_fail@plt+0x187c>
   123fc:	mov	r0, ip
   12400:	ldr	r1, [r5, #4]
   12404:	cmp	r1, #0
   12408:	bne	11f30 <__assert_fail@plt+0x1244>
   1240c:	b	12568 <__assert_fail@plt+0x187c>
   12410:	cmp	ip, #8
   12414:	beq	12400 <__assert_fail@plt+0x1714>
   12418:	b	123b4 <__assert_fail@plt+0x16c8>
   1241c:	mov	r0, #11
   12420:	cmp	ip, #11
   12424:	beq	12400 <__assert_fail@plt+0x1714>
   12428:	b	123c0 <__assert_fail@plt+0x16d4>
   1242c:	cmp	ip, #15
   12430:	mov	r0, #15
   12434:	cmpeq	r6, #9
   12438:	beq	12400 <__assert_fail@plt+0x1714>
   1243c:	cmp	lr, #15
   12440:	cmpeq	r2, #15
   12444:	beq	124dc <__assert_fail@plt+0x17f0>
   12448:	cmp	ip, #15
   1244c:	bne	12488 <__assert_fail@plt+0x179c>
   12450:	cmp	r9, #15
   12454:	bne	12498 <__assert_fail@plt+0x17ac>
   12458:	orr	r7, r2, #2
   1245c:	sub	r3, r2, #10
   12460:	sub	r7, r7, #14
   12464:	clz	r3, r3
   12468:	clz	r7, r7
   1246c:	lsr	r3, r3, #5
   12470:	lsr	r7, r7, #5
   12474:	orrs	r3, r3, r7
   12478:	bne	12400 <__assert_fail@plt+0x1714>
   1247c:	b	12498 <__assert_fail@plt+0x17ac>
   12480:	ldr	r2, [r3, #8]
   12484:	b	12120 <__assert_fail@plt+0x1434>
   12488:	cmp	r2, #7
   1248c:	moveq	r0, #7
   12490:	cmpeq	ip, #7
   12494:	beq	12400 <__assert_fail@plt+0x1714>
   12498:	cmp	r2, #16
   1249c:	bne	12514 <__assert_fail@plt+0x1828>
   124a0:	orr	r0, ip, #8
   124a4:	sub	r0, r0, #15
   124a8:	clz	r0, r0
   124ac:	lsr	r0, r0, #5
   124b0:	orr	r0, r0, r1
   124b4:	sub	r1, ip, #16
   124b8:	clz	r1, r1
   124bc:	lsr	r1, r1, #5
   124c0:	orrs	r0, r1, r0
   124c4:	beq	12514 <__assert_fail@plt+0x1828>
   124c8:	mov	r0, ip
   124cc:	ldr	r1, [r5, #4]
   124d0:	cmp	r1, #0
   124d4:	bne	11f30 <__assert_fail@plt+0x1244>
   124d8:	b	12568 <__assert_fail@plt+0x187c>
   124dc:	orr	r7, ip, #2
   124e0:	sub	r3, ip, #10
   124e4:	sub	r7, r7, #14
   124e8:	clz	r3, r3
   124ec:	clz	r7, r7
   124f0:	lsr	r3, r3, #5
   124f4:	lsr	r7, r7, #5
   124f8:	orrs	r3, r3, r7
   124fc:	beq	12448 <__assert_fail@plt+0x175c>
   12500:	mov	r0, ip
   12504:	ldr	r1, [r5, #4]
   12508:	cmp	r1, #0
   1250c:	bne	11f30 <__assert_fail@plt+0x1244>
   12510:	b	12568 <__assert_fail@plt+0x187c>
   12514:	cmp	ip, #16
   12518:	bne	12558 <__assert_fail@plt+0x186c>
   1251c:	cmp	r2, #16
   12520:	bhi	12568 <__assert_fail@plt+0x187c>
   12524:	movw	r3, #33664	; 0x8380
   12528:	mov	r1, #1
   1252c:	mov	r0, #16
   12530:	movt	r3, #1
   12534:	tst	r3, r1, lsl r2
   12538:	bne	12400 <__assert_fail@plt+0x1714>
   1253c:	b	12568 <__assert_fail@plt+0x187c>
   12540:	ldr	r9, [r7, #8]
   12544:	cmp	ip, #1
   12548:	moveq	r0, #1
   1254c:	cmpeq	r2, #2
   12550:	bne	122f0 <__assert_fail@plt+0x1604>
   12554:	b	12400 <__assert_fail@plt+0x1714>
   12558:	cmp	r2, #5
   1255c:	moveq	r0, #5
   12560:	cmpeq	ip, #5
   12564:	beq	12400 <__assert_fail@plt+0x1714>
   12568:	cmp	r5, #0
   1256c:	add	r9, sp, #12
   12570:	beq	12724 <__assert_fail@plt+0x1a38>
   12574:	ldr	r1, [r5, #4]
   12578:	cmp	r1, #0
   1257c:	beq	12610 <__assert_fail@plt+0x1924>
   12580:	mov	r0, r1
   12584:	ldr	r1, [r1, #12]
   12588:	mov	r4, r5
   1258c:	mov	r3, #0
   12590:	movw	r2, #1092	; 0x444
   12594:	sub	r7, r2, r3
   12598:	add	r7, r3, r7, lsr #1
   1259c:	add	r6, r7, r7, lsl #1
   125a0:	ldr	r5, [sl, r6, lsl #2]
   125a4:	cmp	r5, r1
   125a8:	bls	125bc <__assert_fail@plt+0x18d0>
   125ac:	sub	r2, r7, #1
   125b0:	cmp	r2, r3
   125b4:	bcs	12594 <__assert_fail@plt+0x18a8>
   125b8:	b	12600 <__assert_fail@plt+0x1914>
   125bc:	add	r3, sl, r6, lsl #2
   125c0:	ldr	r6, [r3, #4]
   125c4:	cmp	r6, r1
   125c8:	bcs	125dc <__assert_fail@plt+0x18f0>
   125cc:	add	r3, r7, #1
   125d0:	cmp	r2, r3
   125d4:	bcs	12594 <__assert_fail@plt+0x18a8>
   125d8:	b	12600 <__assert_fail@plt+0x1914>
   125dc:	ldr	r1, [r3, #8]
   125e0:	orr	r1, r1, #2
   125e4:	cmp	r1, #6
   125e8:	bne	12600 <__assert_fail@plt+0x1914>
   125ec:	ldr	r1, [r0, #4]
   125f0:	mov	r5, r0
   125f4:	cmp	r1, #0
   125f8:	bne	12580 <__assert_fail@plt+0x1894>
   125fc:	b	12614 <__assert_fail@plt+0x1928>
   12600:	mov	r5, r4
   12604:	cmp	r4, #0
   12608:	bne	12618 <__assert_fail@plt+0x192c>
   1260c:	b	12724 <__assert_fail@plt+0x1a38>
   12610:	mov	r0, r5
   12614:	mov	r5, r0
   12618:	ldr	r0, [r8, #12]
   1261c:	bl	10b84 <utf8proc_get_property@plt>
   12620:	ldrsh	r0, [r0]
   12624:	sub	r1, r0, #1
   12628:	cmp	r1, #12
   1262c:	bcs	12708 <__assert_fail@plt+0x1a1c>
   12630:	ldr	r4, [r5, #4]!
   12634:	cmp	r8, r4
   12638:	beq	126a8 <__assert_fail@plt+0x19bc>
   1263c:	mov	r6, #0
   12640:	mov	r7, r8
   12644:	cmp	r7, #0
   12648:	beq	1272c <__assert_fail@plt+0x1a40>
   1264c:	ldr	r0, [r7, #12]
   12650:	mov	r1, r9
   12654:	bl	10b9c <utf8proc_encode_char@plt>
   12658:	cmp	r0, #0
   1265c:	beq	1274c <__assert_fail@plt+0x1a60>
   12660:	ldr	r7, [r7, #4]
   12664:	add	r6, r0, r6
   12668:	cmp	r7, r4
   1266c:	bne	12644 <__assert_fail@plt+0x1958>
   12670:	add	r0, r6, #1
   12674:	bl	10c08 <malloc@plt>
   12678:	mov	r6, r0
   1267c:	mov	r9, #0
   12680:	cmp	r8, #0
   12684:	beq	1276c <__assert_fail@plt+0x1a80>
   12688:	ldr	r0, [r8, #12]
   1268c:	add	r1, r6, r9
   12690:	bl	10b9c <utf8proc_encode_char@plt>
   12694:	ldr	r8, [r8, #4]
   12698:	add	r9, r0, r9
   1269c:	cmp	r8, r4
   126a0:	bne	12680 <__assert_fail@plt+0x1994>
   126a4:	b	126b8 <__assert_fail@plt+0x19cc>
   126a8:	mov	r0, #1
   126ac:	bl	10c08 <malloc@plt>
   126b0:	mov	r6, r0
   126b4:	mov	r9, #0
   126b8:	mov	r0, #0
   126bc:	mov	r1, #12
   126c0:	strb	r0, [r6, r9]
   126c4:	mov	r0, #1
   126c8:	bl	127ac <__assert_fail@plt+0x1ac0>
   126cc:	mov	r7, r0
   126d0:	mov	r0, r6
   126d4:	bl	10c8c <utf8proc_NFC@plt>
   126d8:	str	r0, [r7, #8]
   126dc:	ldr	r0, [sp, #4]
   126e0:	mov	r1, r7
   126e4:	bl	13620 <error@@Base+0x968>
   126e8:	mov	r0, r6
   126ec:	bl	10b78 <free@plt>
   126f0:	add	r9, sp, #12
   126f4:	ldr	r8, [r5]
   126f8:	cmp	r8, #0
   126fc:	str	r8, [sp, #16]
   12700:	bne	11f24 <__assert_fail@plt+0x1238>
   12704:	b	12724 <__assert_fail@plt+0x1a38>
   12708:	cmp	r0, #29
   1270c:	beq	12630 <__assert_fail@plt+0x1944>
   12710:	add	r5, r5, #4
   12714:	ldr	r8, [r5]
   12718:	cmp	r8, #0
   1271c:	str	r8, [sp, #16]
   12720:	bne	11f24 <__assert_fail@plt+0x1238>
   12724:	sub	sp, fp, #28
   12728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1272c:	movw	r0, #28287	; 0x6e7f
   12730:	movw	r1, #28280	; 0x6e78
   12734:	movw	r3, #28303	; 0x6e8f
   12738:	mov	r2, #249	; 0xf9
   1273c:	movt	r0, #1
   12740:	movt	r1, #1
   12744:	movt	r3, #1
   12748:	bl	10cec <__assert_fail@plt>
   1274c:	movw	r0, #28329	; 0x6ea9
   12750:	movw	r1, #28280	; 0x6e78
   12754:	movw	r3, #28303	; 0x6e8f
   12758:	mov	r2, #253	; 0xfd
   1275c:	movt	r0, #1
   12760:	movt	r1, #1
   12764:	movt	r3, #1
   12768:	bl	10cec <__assert_fail@plt>
   1276c:	movw	r0, #28287	; 0x6e7f
   12770:	movw	r1, #28280	; 0x6e78
   12774:	movw	r3, #28348	; 0x6ebc
   12778:	movw	r2, #269	; 0x10d
   1277c:	movt	r0, #1
   12780:	movt	r1, #1
   12784:	movt	r3, #1
   12788:	bl	10cec <__assert_fail@plt>
   1278c:	push	{r4, sl, fp, lr}
   12790:	add	fp, sp, #8
   12794:	mov	r4, r0
   12798:	ldr	r0, [r0, #8]
   1279c:	bl	10b78 <free@plt>
   127a0:	mov	r0, r4
   127a4:	pop	{r4, sl, fp, lr}
   127a8:	b	10b78 <free@plt>
   127ac:	push	{fp, lr}
   127b0:	mov	fp, sp
   127b4:	bl	10b3c <calloc@plt>
   127b8:	cmp	r0, #0
   127bc:	popne	{fp, pc}
   127c0:	movw	r0, #28372	; 0x6ed4
   127c4:	movt	r0, #1
   127c8:	bl	12cb8 <error@@Base>
   127cc:	push	{r4, r5, r6, sl, fp, lr}
   127d0:	add	fp, sp, #16
   127d4:	ldrb	r3, [r0]
   127d8:	ldrb	ip, [r1]
   127dc:	mov	r2, r0
   127e0:	mov	r0, #0
   127e4:	cmp	r3, #0
   127e8:	beq	12820 <__assert_fail@plt+0x1b34>
   127ec:	add	r6, r2, #1
   127f0:	add	lr, r1, #1
   127f4:	mov	r2, #0
   127f8:	uxtb	r4, ip
   127fc:	uxtb	r5, r3
   12800:	cmp	r5, r4
   12804:	bne	12830 <__assert_fail@plt+0x1b44>
   12808:	ldrb	r3, [r6, r2]
   1280c:	ldrb	ip, [lr, r2]
   12810:	add	r2, r2, #1
   12814:	cmp	r3, #0
   12818:	bne	127f8 <__assert_fail@plt+0x1b0c>
   1281c:	b	12824 <__assert_fail@plt+0x1b38>
   12820:	mov	r2, #0
   12824:	cmp	ip, #0
   12828:	popeq	{r4, r5, r6, sl, fp, pc}
   1282c:	mov	r3, #0
   12830:	ldrb	r1, [r1, r2]
   12834:	uxtb	r2, r3
   12838:	mov	r0, #1
   1283c:	cmp	r2, r1
   12840:	mvncc	r0, #0
   12844:	pop	{r4, r5, r6, sl, fp, pc}
   12848:	push	{r4, r5, fp, lr}
   1284c:	add	fp, sp, #8
   12850:	mov	r5, r1
   12854:	cmp	r0, #0
   12858:	beq	1288c <__assert_fail@plt+0x1ba0>
   1285c:	mov	r1, r5
   12860:	mov	r4, r0
   12864:	bl	10b6c <fopen@plt>
   12868:	cmp	r0, #0
   1286c:	popne	{r4, r5, fp, pc}
   12870:	ldrb	r0, [r5]
   12874:	cmp	r0, #119	; 0x77
   12878:	bne	128b0 <__assert_fail@plt+0x1bc4>
   1287c:	movw	r0, #28398	; 0x6eee
   12880:	mov	r1, r4
   12884:	movt	r0, #1
   12888:	bl	12cf8 <error@@Base+0x40>
   1288c:	ldrb	r0, [r5]
   12890:	movw	r1, #32968	; 0x80c8
   12894:	movw	r2, #32972	; 0x80cc
   12898:	movt	r1, #2
   1289c:	movt	r2, #2
   128a0:	cmp	r0, #114	; 0x72
   128a4:	moveq	r2, r1
   128a8:	ldr	r0, [r2]
   128ac:	pop	{r4, r5, fp, pc}
   128b0:	movw	r0, #28420	; 0x6f04
   128b4:	mov	r1, r4
   128b8:	movt	r0, #1
   128bc:	bl	12cf8 <error@@Base+0x40>
   128c0:	movw	r1, #32968	; 0x80c8
   128c4:	movt	r1, #2
   128c8:	ldr	r1, [r1]
   128cc:	cmp	r1, r0
   128d0:	movwne	r1, #32972	; 0x80cc
   128d4:	movtne	r1, #2
   128d8:	ldrne	r1, [r1]
   128dc:	cmpne	r1, r0
   128e0:	bxeq	lr
   128e4:	b	10c80 <fclose@plt>
   128e8:	push	{fp, lr}
   128ec:	mov	fp, sp
   128f0:	sub	sp, sp, #88	; 0x58
   128f4:	mov	r1, r0
   128f8:	mov	r2, sp
   128fc:	mov	r0, #3
   12900:	bl	10bd8 <__xstat@plt>
   12904:	clz	r0, r0
   12908:	lsr	r0, r0, #5
   1290c:	mov	sp, fp
   12910:	pop	{fp, pc}
   12914:	push	{r4, r5, fp, lr}
   12918:	add	fp, sp, #8
   1291c:	sub	sp, sp, #104	; 0x68
   12920:	movw	r0, #33084	; 0x813c
   12924:	movt	r0, #2
   12928:	ldrh	r1, [r0]
   1292c:	add	r5, r1, #1
   12930:	strh	r5, [r0]
   12934:	movw	r0, #50244	; 0xc444
   12938:	movt	r0, #2
   1293c:	ldr	r4, [r0]
   12940:	bl	10c38 <getpid@plt>
   12944:	movw	r1, #28461	; 0x6f2d
   12948:	mov	r3, r0
   1294c:	sxth	r0, r5
   12950:	add	r5, sp, #4
   12954:	mov	r2, r4
   12958:	str	r0, [sp]
   1295c:	movt	r1, #1
   12960:	mov	r0, r5
   12964:	bl	10ca4 <sprintf@plt>
   12968:	mov	r0, r5
   1296c:	bl	10ba8 <strdup@plt>
   12970:	mov	r4, r0
   12974:	bl	10bc0 <unlink@plt>
   12978:	mov	r0, r4
   1297c:	sub	sp, fp, #8
   12980:	pop	{r4, r5, fp, pc}
   12984:	push	{r4, sl, fp, lr}
   12988:	add	fp, sp, #8
   1298c:	mov	r4, r0
   12990:	bl	10c5c <strlen@plt>
   12994:	sub	r0, r0, #1
   12998:	sxth	r0, r0
   1299c:	cmp	r0, #0
   129a0:	blt	129b0 <__assert_fail@plt+0x1cc4>
   129a4:	ldrb	r1, [r4, r0]
   129a8:	cmp	r1, #47	; 0x2f
   129ac:	bne	12994 <__assert_fail@plt+0x1ca8>
   129b0:	add	r0, r4, r0
   129b4:	add	r0, r0, #1
   129b8:	pop	{r4, sl, fp, pc}
   129bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c0:	add	fp, sp, #28
   129c4:	sub	sp, sp, #12
   129c8:	ldr	r4, [r1]
   129cc:	str	r0, [sp, #8]
   129d0:	mov	r7, r3
   129d4:	str	r2, [sp]
   129d8:	str	r1, [sp, #4]
   129dc:	mov	r0, r4
   129e0:	bl	10c5c <strlen@plt>
   129e4:	sub	r0, r0, #1
   129e8:	sxth	r0, r0
   129ec:	cmp	r0, #0
   129f0:	blt	12a00 <__assert_fail@plt+0x1d14>
   129f4:	ldrb	r1, [r4, r0]
   129f8:	cmp	r1, #47	; 0x2f
   129fc:	bne	129e4 <__assert_fail@plt+0x1cf8>
   12a00:	add	r0, r4, r0
   12a04:	movw	r1, #50244	; 0xc444
   12a08:	movw	r4, #11648	; 0x2d80
   12a0c:	add	r0, r0, #1
   12a10:	movt	r1, #2
   12a14:	movt	r4, #1
   12a18:	str	r0, [r1]
   12a1c:	mov	r0, #2
   12a20:	mov	r1, r4
   12a24:	bl	10c20 <__sysv_signal@plt>
   12a28:	mov	r0, #15
   12a2c:	mov	r1, r4
   12a30:	bl	10c20 <__sysv_signal@plt>
   12a34:	ldr	r0, [sp, #8]
   12a38:	ldr	r6, [r0]
   12a3c:	cmp	r6, #1
   12a40:	bne	12a58 <__assert_fail@plt+0x1d6c>
   12a44:	movw	r0, #32952	; 0x80b8
   12a48:	movt	r0, #2
   12a4c:	ldrb	r0, [r0]
   12a50:	cmp	r0, #0
   12a54:	bne	12c60 <__assert_fail@plt+0x1f74>
   12a58:	ldr	ip, [sp, #4]
   12a5c:	mov	r8, #0
   12a60:	cmp	r6, #2
   12a64:	blt	12c18 <__assert_fail@plt+0x1f2c>
   12a68:	cmp	r7, #0
   12a6c:	beq	12bd4 <__assert_fail@plt+0x1ee8>
   12a70:	mov	r8, #0
   12a74:	mov	r5, #1
   12a78:	mov	r9, #1
   12a7c:	ldr	r4, [ip, r5, lsl #2]
   12a80:	ldrb	r0, [r4]
   12a84:	cmp	r0, #45	; 0x2d
   12a88:	bne	12b6c <__assert_fail@plt+0x1e80>
   12a8c:	ldrb	sl, [r4, #1]
   12a90:	cmp	sl, #0
   12a94:	beq	12b6c <__assert_fail@plt+0x1e80>
   12a98:	mov	r0, r4
   12a9c:	bl	10c5c <strlen@plt>
   12aa0:	mov	r2, r0
   12aa4:	movw	r0, #28490	; 0x6f4a
   12aa8:	mov	r1, r4
   12aac:	movt	r0, #1
   12ab0:	bl	10cc8 <strncmp@plt>
   12ab4:	cmp	r0, #0
   12ab8:	beq	12c60 <__assert_fail@plt+0x1f74>
   12abc:	ldr	ip, [sp, #4]
   12ac0:	add	r1, r5, #1
   12ac4:	mov	r0, #0
   12ac8:	ldrb	r2, [r7]
   12acc:	cmp	r1, r6
   12ad0:	ldrlt	r0, [ip, r1, lsl #2]
   12ad4:	cmp	r2, #0
   12ad8:	beq	12c68 <__assert_fail@plt+0x1f7c>
   12adc:	mov	r1, #0
   12ae0:	cmp	sl, r2
   12ae4:	beq	12b0c <__assert_fail@plt+0x1e20>
   12ae8:	mov	r2, #1
   12aec:	sxth	r1, r2
   12af0:	add	r3, r1, r1, lsl #1
   12af4:	ldrb	r3, [r7, r3, lsl #2]
   12af8:	cmp	r3, #0
   12afc:	beq	12c68 <__assert_fail@plt+0x1f7c>
   12b00:	add	r2, r2, #1
   12b04:	cmp	sl, r3
   12b08:	bne	12aec <__assert_fail@plt+0x1e00>
   12b0c:	add	r1, r1, r1, lsl #1
   12b10:	add	r3, r7, r1, lsl #2
   12b14:	ldr	r1, [r3, #4]
   12b18:	cmp	r1, #0
   12b1c:	beq	12b8c <__assert_fail@plt+0x1ea0>
   12b20:	mov	r2, r4
   12b24:	cmp	r0, #0
   12b28:	ldrb	r5, [r2, #2]!
   12b2c:	cmpeq	r5, #0
   12b30:	beq	12b8c <__assert_fail@plt+0x1ea0>
   12b34:	ldr	r3, [r1]
   12b38:	cmp	r3, #0
   12b3c:	bne	12c2c <__assert_fail@plt+0x1f40>
   12b40:	cmp	r5, #0
   12b44:	movne	r0, r2
   12b48:	str	r0, [r1]
   12b4c:	ldrb	r0, [r2]
   12b50:	cmp	r0, #0
   12b54:	addeq	r9, r9, #1
   12b58:	add	r9, r9, #1
   12b5c:	sxth	r5, r9
   12b60:	cmp	r6, r5
   12b64:	bgt	12a7c <__assert_fail@plt+0x1d90>
   12b68:	b	12c18 <__assert_fail@plt+0x1f2c>
   12b6c:	sxth	r0, r8
   12b70:	add	r8, r8, #1
   12b74:	str	r4, [ip, r0, lsl #2]
   12b78:	add	r9, r9, #1
   12b7c:	sxth	r5, r9
   12b80:	cmp	r6, r5
   12b84:	bgt	12a7c <__assert_fail@plt+0x1d90>
   12b88:	b	12c18 <__assert_fail@plt+0x1f2c>
   12b8c:	ldr	r0, [r3, #8]
   12b90:	cmp	r0, #0
   12b94:	beq	12c68 <__assert_fail@plt+0x1f7c>
   12b98:	ldrb	r1, [r4, #2]
   12b9c:	cmp	r1, #0
   12ba0:	bne	12c68 <__assert_fail@plt+0x1f7c>
   12ba4:	ldrb	r1, [r0]
   12ba8:	cmp	r1, #0
   12bac:	bne	12c2c <__assert_fail@plt+0x1f40>
   12bb0:	mov	r1, #1
   12bb4:	strb	r1, [r0]
   12bb8:	ldr	r0, [sp, #8]
   12bbc:	ldr	r6, [r0]
   12bc0:	add	r9, r9, #1
   12bc4:	sxth	r5, r9
   12bc8:	cmp	r6, r5
   12bcc:	bgt	12a7c <__assert_fail@plt+0x1d90>
   12bd0:	b	12c18 <__assert_fail@plt+0x1f2c>
   12bd4:	mov	r1, #1
   12bd8:	mov	r8, #0
   12bdc:	mov	r0, #1
   12be0:	ldr	r4, [ip, r1, lsl #2]
   12be4:	ldrb	r1, [r4]
   12be8:	cmp	r1, #45	; 0x2d
   12bec:	bne	12bfc <__assert_fail@plt+0x1f10>
   12bf0:	ldrb	r1, [r4, #1]
   12bf4:	cmp	r1, #0
   12bf8:	bne	12c3c <__assert_fail@plt+0x1f50>
   12bfc:	sxth	r1, r8
   12c00:	add	r0, r0, #1
   12c04:	add	r8, r8, #1
   12c08:	str	r4, [ip, r1, lsl #2]
   12c0c:	sxth	r1, r0
   12c10:	cmp	r6, r1
   12c14:	bgt	12be0 <__assert_fail@plt+0x1ef4>
   12c18:	ldr	r1, [sp, #8]
   12c1c:	sxth	r0, r8
   12c20:	str	r0, [r1]
   12c24:	sub	sp, fp, #28
   12c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c2c:	movw	r0, #28526	; 0x6f6e
   12c30:	mov	r1, r4
   12c34:	movt	r0, #1
   12c38:	bl	12cf8 <error@@Base+0x40>
   12c3c:	mov	r0, r4
   12c40:	bl	10c5c <strlen@plt>
   12c44:	mov	r2, r0
   12c48:	movw	r0, #28490	; 0x6f4a
   12c4c:	mov	r1, r4
   12c50:	movt	r0, #1
   12c54:	bl	10cc8 <strncmp@plt>
   12c58:	cmp	r0, #0
   12c5c:	bne	12c68 <__assert_fail@plt+0x1f7c>
   12c60:	ldr	r0, [sp]
   12c64:	bl	12db0 <error@@Base+0xf8>
   12c68:	movw	r0, #28511	; 0x6f5f
   12c6c:	mov	r1, r4
   12c70:	movt	r0, #1
   12c74:	bl	12cf8 <error@@Base+0x40>
   12c78:	push	{fp, lr}
   12c7c:	mov	fp, sp
   12c80:	mov	r0, #0
   12c84:	bl	12c88 <__assert_fail@plt+0x1f9c>
   12c88:	push	{fp, lr}
   12c8c:	mov	fp, sp
   12c90:	mov	r4, r0
   12c94:	movw	r0, #50248	; 0xc448
   12c98:	movt	r0, #2
   12c9c:	ldr	r0, [r0]
   12ca0:	cmp	r0, #0
   12ca4:	beq	12cac <__assert_fail@plt+0x1fc0>
   12ca8:	blx	r0
   12cac:	bl	12e00 <error@@Base+0x148>
   12cb0:	mov	r0, r4
   12cb4:	bl	10c44 <exit@plt>

00012cb8 <error@@Base>:
   12cb8:	push	{fp, lr}
   12cbc:	mov	fp, sp
   12cc0:	mov	r3, r0
   12cc4:	movw	r0, #50244	; 0xc444
   12cc8:	movw	r1, #28440	; 0x6f18
   12ccc:	movt	r0, #2
   12cd0:	movt	r1, #1
   12cd4:	ldr	r2, [r0]
   12cd8:	movw	r0, #32960	; 0x80c0
   12cdc:	movt	r0, #2
   12ce0:	ldr	r0, [r0]
   12ce4:	bl	10c68 <fprintf@plt>
   12ce8:	movw	r0, #32956	; 0x80bc
   12cec:	movt	r0, #2
   12cf0:	ldr	r0, [r0]
   12cf4:	bl	12c88 <__assert_fail@plt+0x1f9c>
   12cf8:	push	{fp, lr}
   12cfc:	mov	fp, sp
   12d00:	sub	sp, sp, #8
   12d04:	mov	r3, r0
   12d08:	movw	r0, #50244	; 0xc444
   12d0c:	str	r1, [sp]
   12d10:	movw	r1, #28448	; 0x6f20
   12d14:	movt	r0, #2
   12d18:	movt	r1, #1
   12d1c:	ldr	r2, [r0]
   12d20:	movw	r0, #32960	; 0x80c0
   12d24:	movt	r0, #2
   12d28:	ldr	r0, [r0]
   12d2c:	bl	10c68 <fprintf@plt>
   12d30:	movw	r0, #32956	; 0x80bc
   12d34:	movt	r0, #2
   12d38:	ldr	r0, [r0]
   12d3c:	bl	12c88 <__assert_fail@plt+0x1f9c>
   12d40:	push	{fp, lr}
   12d44:	mov	fp, sp
   12d48:	sub	sp, sp, #8
   12d4c:	mov	r3, r0
   12d50:	movw	r0, #50244	; 0xc444
   12d54:	str	r1, [sp]
   12d58:	movw	r1, #28448	; 0x6f20
   12d5c:	movt	r0, #2
   12d60:	movt	r1, #1
   12d64:	ldr	r2, [r0]
   12d68:	movw	r0, #32960	; 0x80c0
   12d6c:	movt	r0, #2
   12d70:	ldr	r0, [r0]
   12d74:	bl	10c68 <fprintf@plt>
   12d78:	mov	sp, fp
   12d7c:	pop	{fp, pc}
   12d80:	movw	r0, #33086	; 0x813e
   12d84:	movt	r0, #2
   12d88:	ldrb	r1, [r0]
   12d8c:	cmp	r1, #1
   12d90:	bxeq	lr
   12d94:	push	{fp, lr}
   12d98:	mov	fp, sp
   12d9c:	mov	r1, #1
   12da0:	strb	r1, [r0]
   12da4:	movw	r0, #28475	; 0x6f3b
   12da8:	movt	r0, #1
   12dac:	bl	12cb8 <error@@Base>
   12db0:	push	{fp, lr}
   12db4:	mov	fp, sp
   12db8:	mov	r3, r0
   12dbc:	movw	r0, #50240	; 0xc440
   12dc0:	movt	r0, #2
   12dc4:	ldr	r0, [r0]
   12dc8:	cmp	r0, #0
   12dcc:	bne	12df8 <error@@Base+0x140>
   12dd0:	movw	r0, #50244	; 0xc444
   12dd4:	movw	r1, #28496	; 0x6f50
   12dd8:	movt	r0, #2
   12ddc:	movt	r1, #1
   12de0:	ldr	r2, [r0]
   12de4:	movw	r0, #32960	; 0x80c0
   12de8:	movt	r0, #2
   12dec:	ldr	r0, [r0]
   12df0:	bl	10c68 <fprintf@plt>
   12df4:	bl	12c78 <__assert_fail@plt+0x1f8c>
   12df8:	blx	r0
   12dfc:	bl	12c78 <__assert_fail@plt+0x1f8c>
   12e00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e04:	add	fp, sp, #24
   12e08:	sub	sp, sp, #104	; 0x68
   12e0c:	movw	r8, #33084	; 0x813c
   12e10:	movt	r8, #2
   12e14:	ldrsh	r0, [r8]
   12e18:	cmp	r0, #1
   12e1c:	blt	12e88 <error@@Base+0x1d0>
   12e20:	movw	r9, #50244	; 0xc444
   12e24:	movw	r5, #28461	; 0x6f2d
   12e28:	mov	r7, #1
   12e2c:	add	r4, sp, #4
   12e30:	movt	r9, #2
   12e34:	movt	r5, #1
   12e38:	ldr	r6, [r9]
   12e3c:	bl	10c38 <getpid@plt>
   12e40:	mov	r3, r0
   12e44:	sxth	r0, r7
   12e48:	mov	r1, r5
   12e4c:	mov	r2, r6
   12e50:	str	r0, [sp]
   12e54:	mov	r0, r4
   12e58:	bl	10ca4 <sprintf@plt>
   12e5c:	mov	r0, r4
   12e60:	bl	10ba8 <strdup@plt>
   12e64:	mov	r6, r0
   12e68:	bl	10bc0 <unlink@plt>
   12e6c:	mov	r0, r6
   12e70:	bl	10b78 <free@plt>
   12e74:	add	r0, r7, #1
   12e78:	sxth	r7, r0
   12e7c:	ldrsh	r0, [r8]
   12e80:	cmp	r7, r0
   12e84:	ble	12e38 <error@@Base+0x180>
   12e88:	sub	sp, fp, #24
   12e8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e90:	push	{r4, r5, r6, sl, fp, lr}
   12e94:	add	fp, sp, #16
   12e98:	mov	r5, r1
   12e9c:	mov	r6, r0
   12ea0:	mov	r0, #1
   12ea4:	mov	r1, #16
   12ea8:	mov	r4, r2
   12eac:	bl	127ac <__assert_fail@plt+0x1ac0>
   12eb0:	strb	r5, [r0, #8]
   12eb4:	mov	r1, r0
   12eb8:	str	r4, [r0, #12]
   12ebc:	mov	r0, r6
   12ec0:	pop	{r4, r5, r6, sl, fp, lr}
   12ec4:	b	13620 <error@@Base+0x968>
   12ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ecc:	add	fp, sp, #28
   12ed0:	sub	sp, sp, #124	; 0x7c
   12ed4:	mov	r5, r2
   12ed8:	mov	r2, r1
   12edc:	cmp	r1, #0
   12ee0:	str	r0, [sp, #16]
   12ee4:	bne	12ef4 <error@@Base+0x23c>
   12ee8:	ldrb	r0, [r5]
   12eec:	cmp	r0, #0
   12ef0:	bne	132e4 <error@@Base+0x62c>
   12ef4:	ldr	r0, [sp, #16]
   12ef8:	movw	r1, #28745	; 0x7049
   12efc:	movt	r1, #1
   12f00:	ldr	r0, [r0, #4]
   12f04:	str	r0, [sp, #4]
   12f08:	mov	r0, r2
   12f0c:	bl	12848 <__assert_fail@plt+0x1b5c>
   12f10:	mov	r6, r0
   12f14:	ldrb	r0, [r5]
   12f18:	cmp	r0, #0
   12f1c:	beq	12f64 <error@@Base+0x2ac>
   12f20:	add	r0, sp, #20
   12f24:	mov	r1, #99	; 0x63
   12f28:	mov	r2, r6
   12f2c:	bl	10b90 <fgets@plt>
   12f30:	cmp	r0, #0
   12f34:	beq	12f54 <error@@Base+0x29c>
   12f38:	movw	r1, #28611	; 0x6fc3
   12f3c:	add	r0, sp, #20
   12f40:	mov	r2, #51	; 0x33
   12f44:	movt	r1, #1
   12f48:	bl	10cc8 <strncmp@plt>
   12f4c:	cmp	r0, #0
   12f50:	beq	13274 <error@@Base+0x5bc>
   12f54:	mov	r0, r6
   12f58:	bl	10bb4 <rewind@plt>
   12f5c:	mov	r7, #0
   12f60:	strb	r7, [r5, #11]
   12f64:	ldr	r8, [r5, #4]
   12f68:	ldrb	r4, [r5, #1]
   12f6c:	mov	r0, r6
   12f70:	str	r5, [sp, #8]
   12f74:	cmp	r8, #0
   12f78:	movweq	r8, #94	; 0x5e
   12f7c:	bl	10ce0 <getc@plt>
   12f80:	cmn	r0, #1
   12f84:	beq	130e4 <error@@Base+0x42c>
   12f88:	add	r1, sp, #20
   12f8c:	cmp	r4, #0
   12f90:	add	r1, r1, #1
   12f94:	str	r1, [sp, #12]
   12f98:	beq	13048 <error@@Base+0x390>
   12f9c:	mov	sl, #0
   12fa0:	sub	r7, fp, #32
   12fa4:	movw	r1, #32256	; 0x7e00
   12fa8:	movt	r1, #2
   12fac:	add	r1, r1, r0
   12fb0:	ldrsb	r9, [r1]
   12fb4:	cmp	r9, #1
   12fb8:	blt	132c4 <error@@Base+0x60c>
   12fbc:	strb	r0, [sp, #20]
   12fc0:	beq	12fe4 <error@@Base+0x32c>
   12fc4:	ldr	r0, [sp, #12]
   12fc8:	sub	r4, r9, #1
   12fcc:	mov	r1, #1
   12fd0:	mov	r3, r6
   12fd4:	mov	r2, r4
   12fd8:	bl	10bf0 <fread@plt>
   12fdc:	cmp	r0, r4
   12fe0:	bne	132d8 <error@@Base+0x620>
   12fe4:	add	r0, sp, #20
   12fe8:	mov	r1, #4
   12fec:	mov	r2, r7
   12ff0:	bl	10bfc <utf8proc_iterate@plt>
   12ff4:	cmp	r0, r9
   12ff8:	bne	132d0 <error@@Base+0x618>
   12ffc:	ldr	r5, [fp, #-32]	; 0xffffffe0
   13000:	mov	r4, #1
   13004:	cmp	r5, r8
   13008:	beq	13030 <error@@Base+0x378>
   1300c:	mov	r0, #1
   13010:	mov	r1, #16
   13014:	bl	127ac <__assert_fail@plt+0x1ac0>
   13018:	strb	sl, [r0, #8]
   1301c:	mov	r1, r0
   13020:	str	r5, [r0, #12]
   13024:	ldr	r0, [sp, #16]
   13028:	bl	13620 <error@@Base+0x968>
   1302c:	mov	r4, #0
   13030:	mov	r0, r6
   13034:	bl	10ce0 <getc@plt>
   13038:	cmn	r0, #1
   1303c:	mov	sl, r4
   13040:	bne	12fa4 <error@@Base+0x2ec>
   13044:	b	130e4 <error@@Base+0x42c>
   13048:	movw	r8, #32256	; 0x7e00
   1304c:	add	r9, sp, #20
   13050:	sub	sl, fp, #32
   13054:	mov	r5, #0
   13058:	movt	r8, #2
   1305c:	add	r1, r8, r0
   13060:	ldrsb	r7, [r1]
   13064:	cmp	r7, #0
   13068:	ble	132c4 <error@@Base+0x60c>
   1306c:	cmp	r7, #1
   13070:	strb	r0, [sp, #20]
   13074:	beq	13098 <error@@Base+0x3e0>
   13078:	ldr	r0, [sp, #12]
   1307c:	sub	r4, r7, #1
   13080:	mov	r1, #1
   13084:	mov	r3, r6
   13088:	mov	r2, r4
   1308c:	bl	10bf0 <fread@plt>
   13090:	cmp	r0, r4
   13094:	bne	132d8 <error@@Base+0x620>
   13098:	mov	r0, r9
   1309c:	mov	r1, #4
   130a0:	mov	r2, sl
   130a4:	bl	10bfc <utf8proc_iterate@plt>
   130a8:	cmp	r0, r7
   130ac:	bne	132d0 <error@@Base+0x618>
   130b0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   130b4:	mov	r0, #1
   130b8:	mov	r1, #16
   130bc:	bl	127ac <__assert_fail@plt+0x1ac0>
   130c0:	strb	r5, [r0, #8]
   130c4:	mov	r1, r0
   130c8:	str	r4, [r0, #12]
   130cc:	ldr	r0, [sp, #16]
   130d0:	bl	13620 <error@@Base+0x968>
   130d4:	mov	r0, r6
   130d8:	bl	10ce0 <getc@plt>
   130dc:	cmn	r0, #1
   130e0:	bne	1305c <error@@Base+0x3a4>
   130e4:	mov	r0, r6
   130e8:	bl	128c0 <__assert_fail@plt+0x1bd4>
   130ec:	ldr	r8, [sp, #8]
   130f0:	ldr	r9, [sp, #4]
   130f4:	ldrb	r0, [r8, #9]
   130f8:	cmp	r0, #0
   130fc:	beq	13230 <error@@Base+0x578>
   13100:	ldr	r0, [sp, #16]
   13104:	cmp	r9, #0
   13108:	addne	r0, r9, #4
   1310c:	ldr	r6, [r0]
   13110:	cmp	r6, #0
   13114:	beq	13230 <error@@Base+0x578>
   13118:	mov	r4, #32
   1311c:	mov	r7, r6
   13120:	ldr	r5, [r7, #12]
   13124:	mov	r0, r5
   13128:	bl	10b84 <utf8proc_get_property@plt>
   1312c:	cmp	r5, #10
   13130:	ble	1314c <error@@Base+0x494>
   13134:	sub	r1, r5, #11
   13138:	cmp	r1, #3
   1313c:	bcc	1316c <error@@Base+0x4b4>
   13140:	cmp	r5, #160	; 0xa0
   13144:	beq	1316c <error@@Base+0x4b4>
   13148:	b	13180 <error@@Base+0x4c8>
   1314c:	cmp	r5, #9
   13150:	beq	1316c <error@@Base+0x4b4>
   13154:	cmp	r5, #10
   13158:	bne	13180 <error@@Base+0x4c8>
   1315c:	ldr	r7, [r7, #4]
   13160:	cmp	r7, #0
   13164:	bne	13120 <error@@Base+0x468>
   13168:	b	1319c <error@@Base+0x4e4>
   1316c:	str	r4, [r7, #12]
   13170:	ldr	r7, [r7, #4]
   13174:	cmp	r7, #0
   13178:	bne	13120 <error@@Base+0x468>
   1317c:	b	1319c <error@@Base+0x4e4>
   13180:	ldrsh	r0, [r0]
   13184:	sub	r0, r0, #23
   13188:	cmp	r0, #2
   1318c:	strls	r4, [r7, #12]
   13190:	ldr	r7, [r7, #4]
   13194:	cmp	r7, #0
   13198:	bne	13120 <error@@Base+0x468>
   1319c:	mov	r4, #0
   131a0:	ldr	r1, [r6, #12]
   131a4:	ldr	r5, [r6, #4]
   131a8:	cmp	r1, #32
   131ac:	bne	131e8 <error@@Base+0x530>
   131b0:	tst	r4, #255	; 0xff
   131b4:	beq	13210 <error@@Base+0x558>
   131b8:	cmp	r5, #0
   131bc:	ldrne	r1, [r5, #12]
   131c0:	cmpne	r1, #10
   131c4:	beq	13210 <error@@Base+0x558>
   131c8:	mov	r0, #1
   131cc:	cmp	r1, #32
   131d0:	bne	131fc <error@@Base+0x544>
   131d4:	ldrb	r0, [r6, #8]
   131d8:	ldrb	r1, [r5, #8]
   131dc:	orr	r0, r1, r0
   131e0:	strb	r0, [r5, #8]
   131e4:	b	13210 <error@@Base+0x558>
   131e8:	subs	r0, r1, #10
   131ec:	movwne	r0, #1
   131f0:	tst	r4, #255	; 0xff
   131f4:	cmpeq	r1, #10
   131f8:	beq	13210 <error@@Base+0x558>
   131fc:	mov	r4, r0
   13200:	cmp	r5, #0
   13204:	mov	r6, r5
   13208:	bne	131a0 <error@@Base+0x4e8>
   1320c:	b	13230 <error@@Base+0x578>
   13210:	ldr	r0, [sp, #16]
   13214:	mov	r1, r6
   13218:	bl	13718 <error@@Base+0xa60>
   1321c:	mov	r0, r6
   13220:	bl	10b78 <free@plt>
   13224:	cmp	r5, #0
   13228:	mov	r6, r5
   1322c:	bne	131a0 <error@@Base+0x4e8>
   13230:	ldrb	r0, [r8, #10]
   13234:	cmp	r0, #0
   13238:	beq	1326c <error@@Base+0x5b4>
   1323c:	ldr	r0, [sp, #16]
   13240:	cmp	r9, #0
   13244:	addne	r0, r9, #4
   13248:	ldr	r4, [r0]
   1324c:	cmp	r4, #0
   13250:	beq	1326c <error@@Base+0x5b4>
   13254:	ldr	r0, [r4, #12]
   13258:	bl	10bcc <utf8proc_tolower@plt>
   1325c:	str	r0, [r4, #12]
   13260:	ldr	r4, [r4, #4]
   13264:	cmp	r4, #0
   13268:	bne	13254 <error@@Base+0x59c>
   1326c:	sub	sp, fp, #28
   13270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13274:	movw	r8, #28667	; 0x6ffb
   13278:	mov	r4, #0
   1327c:	add	r9, sp, #20
   13280:	mov	r7, #1
   13284:	movt	r8, #1
   13288:	mov	r0, r9
   1328c:	mov	r1, #99	; 0x63
   13290:	mov	r2, r6
   13294:	bl	10b90 <fgets@plt>
   13298:	cmp	r0, #0
   1329c:	beq	12f60 <error@@Base+0x2a8>
   132a0:	mov	r0, r9
   132a4:	mov	r1, r8
   132a8:	bl	10b48 <strcmp@plt>
   132ac:	cmp	r0, #0
   132b0:	addeq	r4, r4, #1
   132b4:	sxth	r4, r4
   132b8:	cmp	r4, #2
   132bc:	blt	13288 <error@@Base+0x5d0>
   132c0:	b	12f60 <error@@Base+0x2a8>
   132c4:	movw	r0, #28723	; 0x7033
   132c8:	movt	r0, #1
   132cc:	bl	12cb8 <error@@Base>
   132d0:	bl	10cb0 <utf8proc_errmsg@plt>
   132d4:	bl	12cb8 <error@@Base>
   132d8:	movw	r0, #28747	; 0x704b
   132dc:	movt	r0, #1
   132e0:	bl	12cb8 <error@@Base>
   132e4:	movw	r0, #28543	; 0x6f7f
   132e8:	movw	r1, #28559	; 0x6f8f
   132ec:	movt	r0, #1
   132f0:	movt	r1, #1
   132f4:	bl	12cf8 <error@@Base+0x40>
   132f8:	push	{fp, lr}
   132fc:	mov	fp, sp
   13300:	bl	10b9c <utf8proc_encode_char@plt>
   13304:	cmp	r0, #0
   13308:	sxtbgt	r0, r0
   1330c:	popgt	{fp, pc}
   13310:	movw	r0, #28569	; 0x6f99
   13314:	movt	r0, #1
   13318:	bl	12cb8 <error@@Base>
   1331c:	push	{r4, r5, r6, r7, fp, lr}
   13320:	add	fp, sp, #16
   13324:	mov	r6, r3
   13328:	mov	r4, r2
   1332c:	mov	r5, r1
   13330:	tst	r0, #255	; 0xff
   13334:	beq	1337c <error@@Base+0x6c4>
   13338:	mov	r0, #94	; 0x5e
   1333c:	mov	r1, r4
   13340:	bl	10b9c <utf8proc_encode_char@plt>
   13344:	cmp	r0, #0
   13348:	ble	13404 <error@@Base+0x74c>
   1334c:	sxtb	r7, r0
   13350:	cmp	r5, #10
   13354:	bne	13388 <error@@Base+0x6d0>
   13358:	movw	r0, #28459	; 0x6f2b
   1335c:	movw	r1, #28592	; 0x6fb0
   13360:	tst	r6, #255	; 0xff
   13364:	movt	r0, #1
   13368:	movt	r1, #1
   1336c:	moveq	r1, r0
   13370:	add	r0, r4, r7
   13374:	pop	{r4, r5, r6, r7, fp, lr}
   13378:	b	10ca4 <sprintf@plt>
   1337c:	mov	r7, #0
   13380:	cmp	r5, #10
   13384:	beq	13358 <error@@Base+0x6a0>
   13388:	mov	r0, r5
   1338c:	bl	10b84 <utf8proc_get_property@plt>
   13390:	cmp	r5, #32
   13394:	beq	133a8 <error@@Base+0x6f0>
   13398:	ldrsh	r0, [r0]
   1339c:	sub	r1, r0, #1
   133a0:	cmp	r1, #22
   133a4:	bcs	13410 <error@@Base+0x758>
   133a8:	mov	r0, r5
   133ac:	add	r6, r4, r7
   133b0:	bl	10c50 <utf8proc_category@plt>
   133b4:	sub	r0, r0, #6
   133b8:	cmp	r0, #3
   133bc:	bcc	133cc <error@@Base+0x714>
   133c0:	mov	r0, r5
   133c4:	mov	r1, r6
   133c8:	b	133ec <error@@Base+0x734>
   133cc:	movw	r0, #9676	; 0x25cc
   133d0:	mov	r1, r6
   133d4:	bl	10b9c <utf8proc_encode_char@plt>
   133d8:	cmp	r0, #0
   133dc:	ble	13404 <error@@Base+0x74c>
   133e0:	sxtab	r7, r7, r0
   133e4:	mov	r0, r5
   133e8:	add	r1, r4, r7
   133ec:	bl	10b9c <utf8proc_encode_char@plt>
   133f0:	cmp	r0, #0
   133f4:	sxtabgt	r0, r7, r0
   133f8:	movgt	r1, #0
   133fc:	strbgt	r1, [r4, r0]
   13400:	popgt	{r4, r5, r6, r7, fp, pc}
   13404:	movw	r0, #28569	; 0x6f99
   13408:	movt	r0, #1
   1340c:	bl	12cb8 <error@@Base>
   13410:	cmp	r0, #29
   13414:	beq	133a8 <error@@Base+0x6f0>
   13418:	add	r0, r4, r7
   1341c:	cmp	r5, #255	; 0xff
   13420:	bhi	13438 <error@@Base+0x780>
   13424:	movw	r1, #28597	; 0x6fb5
   13428:	movt	r1, #1
   1342c:	mov	r2, r5
   13430:	pop	{r4, r5, r6, r7, fp, lr}
   13434:	b	10ca4 <sprintf@plt>
   13438:	movw	r1, #28604	; 0x6fbc
   1343c:	movt	r1, #1
   13440:	mov	r2, r5
   13444:	pop	{r4, r5, r6, r7, fp, lr}
   13448:	b	10ca4 <sprintf@plt>
   1344c:	push	{r4, r5, r6, r7, fp, lr}
   13450:	add	fp, sp, #16
   13454:	sub	sp, sp, #16
   13458:	mov	r6, r2
   1345c:	mov	r2, r1
   13460:	movw	r1, #14956	; 0x3a6c
   13464:	mov	r5, r0
   13468:	movt	r1, #1
   1346c:	mov	r0, r2
   13470:	bl	12848 <__assert_fail@plt+0x1b5c>
   13474:	mov	r4, r0
   13478:	cmp	r6, #0
   1347c:	beq	134d0 <error@@Base+0x818>
   13480:	movw	r0, #28611	; 0x6fc3
   13484:	mov	r1, #55	; 0x37
   13488:	mov	r2, #1
   1348c:	mov	r3, r4
   13490:	movt	r0, #1
   13494:	bl	10be4 <fwrite@plt>
   13498:	movw	r7, #28667	; 0x6ffb
   1349c:	mov	r1, #55	; 0x37
   134a0:	mov	r2, #1
   134a4:	mov	r3, r4
   134a8:	movt	r7, #1
   134ac:	mov	r0, r7
   134b0:	bl	10be4 <fwrite@plt>
   134b4:	mov	r0, r4
   134b8:	blx	r6
   134bc:	mov	r0, r7
   134c0:	mov	r1, #55	; 0x37
   134c4:	mov	r2, #1
   134c8:	mov	r3, r4
   134cc:	bl	10be4 <fwrite@plt>
   134d0:	ldr	r6, [r5]
   134d4:	cmp	r6, #0
   134d8:	beq	1350c <error@@Base+0x854>
   134dc:	add	r5, sp, #7
   134e0:	ldr	r1, [r6, #12]
   134e4:	ldrb	r0, [r6, #8]
   134e8:	mov	r2, r5
   134ec:	mov	r3, #0
   134f0:	bl	1331c <error@@Base+0x664>
   134f4:	mov	r0, r5
   134f8:	mov	r1, r4
   134fc:	bl	10cbc <fputs@plt>
   13500:	ldr	r6, [r6, #4]
   13504:	cmp	r6, #0
   13508:	bne	134e0 <error@@Base+0x828>
   1350c:	mov	r0, r4
   13510:	bl	128c0 <__assert_fail@plt+0x1bd4>
   13514:	sub	sp, fp, #16
   13518:	pop	{r4, r5, r6, r7, fp, pc}
   1351c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13520:	add	fp, sp, #28
   13524:	sub	sp, sp, #4
   13528:	mov	r9, #0
   1352c:	mov	sl, r0
   13530:	str	r9, [sp]
   13534:	ldrb	r0, [r1]
   13538:	cmp	r0, #0
   1353c:	beq	135a4 <error@@Base+0x8ec>
   13540:	mov	r4, r1
   13544:	mov	r8, sp
   13548:	mov	r7, #1
   1354c:	mov	r0, r4
   13550:	mvn	r1, #0
   13554:	mov	r2, r8
   13558:	bl	10bfc <utf8proc_iterate@plt>
   1355c:	cmp	r0, #1
   13560:	blt	135b4 <error@@Base+0x8fc>
   13564:	ldr	r5, [sp]
   13568:	mov	r6, r0
   1356c:	mov	r0, #1
   13570:	mov	r1, #16
   13574:	bl	127ac <__assert_fail@plt+0x1ac0>
   13578:	strb	r9, [r0, #8]
   1357c:	mov	r1, r0
   13580:	str	r5, [r0, #12]
   13584:	mov	r0, sl
   13588:	bl	13620 <error@@Base+0x968>
   1358c:	ldrb	r0, [r4, r6]!
   13590:	cmp	r0, #0
   13594:	bne	1354c <error@@Base+0x894>
   13598:	mov	r0, r7
   1359c:	sub	sp, fp, #28
   135a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a4:	mov	r7, #1
   135a8:	mov	r0, r7
   135ac:	sub	sp, fp, #28
   135b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135b4:	mov	r7, #0
   135b8:	mov	r0, r7
   135bc:	sub	sp, fp, #28
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c4:	vmov.i32	q8, #0	; 0x00000000
   135c8:	vst1.32	{d16-d17}, [r0]
   135cc:	bx	lr
   135d0:	push	{r4, r5, fp, lr}
   135d4:	add	fp, sp, #8
   135d8:	mov	r4, r0
   135dc:	ldr	r0, [r0]
   135e0:	mov	r5, #0
   135e4:	str	r5, [r1]
   135e8:	cmp	r0, #0
   135ec:	str	r0, [r1, #4]
   135f0:	str	r1, [r4]
   135f4:	addeq	r0, r4, #4
   135f8:	str	r1, [r0]
   135fc:	ldr	r0, [r4, #8]
   13600:	cmp	r0, #0
   13604:	beq	13610 <error@@Base+0x958>
   13608:	bl	10b78 <free@plt>
   1360c:	str	r5, [r4, #8]
   13610:	ldr	r0, [r4, #12]
   13614:	add	r0, r0, #1
   13618:	str	r0, [r4, #12]
   1361c:	pop	{r4, r5, fp, pc}
   13620:	push	{r4, r5, fp, lr}
   13624:	add	fp, sp, #8
   13628:	mov	r4, r0
   1362c:	ldr	r0, [r0, #4]
   13630:	mov	r5, #0
   13634:	mov	r2, r4
   13638:	cmp	r0, #0
   1363c:	stm	r1, {r0, r5}
   13640:	addne	r2, r0, #4
   13644:	str	r1, [r2]
   13648:	str	r1, [r4, #4]
   1364c:	ldr	r0, [r4, #8]
   13650:	cmp	r0, #0
   13654:	beq	13660 <error@@Base+0x9a8>
   13658:	bl	10b78 <free@plt>
   1365c:	str	r5, [r4, #8]
   13660:	ldr	r0, [r4, #12]
   13664:	add	r0, r0, #1
   13668:	str	r0, [r4, #12]
   1366c:	pop	{r4, r5, fp, pc}
   13670:	push	{r4, sl, fp, lr}
   13674:	add	fp, sp, #8
   13678:	mov	r4, r0
   1367c:	ldr	r0, [r2]
   13680:	mov	r3, r4
   13684:	cmp	r0, #0
   13688:	stm	r1, {r0, r2}
   1368c:	addne	r3, r0, #4
   13690:	str	r1, [r3]
   13694:	str	r1, [r2]
   13698:	ldr	r0, [r4, #8]
   1369c:	cmp	r0, #0
   136a0:	beq	136b0 <error@@Base+0x9f8>
   136a4:	bl	10b78 <free@plt>
   136a8:	mov	r0, #0
   136ac:	str	r0, [r4, #8]
   136b0:	ldr	r0, [r4, #12]
   136b4:	add	r0, r0, #1
   136b8:	str	r0, [r4, #12]
   136bc:	pop	{r4, sl, fp, pc}
   136c0:	push	{r4, sl, fp, lr}
   136c4:	add	fp, sp, #8
   136c8:	mov	r4, r0
   136cc:	mov	r0, r1
   136d0:	cmp	r1, #0
   136d4:	ldr	r3, [r0, #4]!
   136d8:	moveq	r0, r4
   136dc:	cmp	r3, #0
   136e0:	stm	r2, {r1, r3}
   136e4:	addeq	r3, r4, #4
   136e8:	str	r2, [r0]
   136ec:	str	r2, [r3]
   136f0:	ldr	r0, [r4, #8]
   136f4:	cmp	r0, #0
   136f8:	beq	13708 <error@@Base+0xa50>
   136fc:	bl	10b78 <free@plt>
   13700:	mov	r0, #0
   13704:	str	r0, [r4, #8]
   13708:	ldr	r0, [r4, #12]
   1370c:	add	r0, r0, #1
   13710:	str	r0, [r4, #12]
   13714:	pop	{r4, sl, fp, pc}
   13718:	push	{r4, r5, fp, lr}
   1371c:	add	fp, sp, #8
   13720:	mov	r4, r0
   13724:	ldm	r1, {r0, r2}
   13728:	mov	r5, #0
   1372c:	cmp	r0, #0
   13730:	streq	r2, [r4]
   13734:	strne	r2, [r0, #4]
   13738:	ldrne	r2, [r1, #4]
   1373c:	cmp	r2, #0
   13740:	addeq	r2, r4, #4
   13744:	str	r0, [r2]
   13748:	str	r5, [r1]
   1374c:	str	r5, [r1, #4]
   13750:	ldr	r0, [r4, #8]
   13754:	cmp	r0, #0
   13758:	beq	13764 <error@@Base+0xaac>
   1375c:	bl	10b78 <free@plt>
   13760:	str	r5, [r4, #8]
   13764:	ldr	r0, [r4, #12]
   13768:	sub	r0, r0, #1
   1376c:	str	r0, [r4, #12]
   13770:	pop	{r4, r5, fp, pc}
   13774:	push	{r4, sl, fp, lr}
   13778:	add	fp, sp, #8
   1377c:	mov	r4, r0
   13780:	ldr	r0, [r0, #8]
   13784:	cmp	r0, #0
   13788:	beq	13790 <error@@Base+0xad8>
   1378c:	pop	{r4, sl, fp, pc}
   13790:	ldr	r0, [r4, #12]
   13794:	cmp	r0, #0
   13798:	beq	1378c <error@@Base+0xad4>
   1379c:	mov	r1, #4
   137a0:	bl	127ac <__assert_fail@plt+0x1ac0>
   137a4:	str	r0, [r4, #8]
   137a8:	ldr	r1, [r4]
   137ac:	cmp	r1, #0
   137b0:	beq	1378c <error@@Base+0xad4>
   137b4:	str	r1, [r0]
   137b8:	ldr	r0, [r1, #4]
   137bc:	cmp	r0, #0
   137c0:	popeq	{r4, sl, fp, pc}
   137c4:	mov	r1, #4
   137c8:	ldr	r2, [r4, #8]
   137cc:	str	r0, [r2, r1]
   137d0:	add	r1, r1, #4
   137d4:	ldr	r0, [r0, #4]
   137d8:	cmp	r0, #0
   137dc:	bne	137c8 <error@@Base+0xb10>
   137e0:	b	1378c <error@@Base+0xad4>
   137e4:	push	{r4, r5, r6, r7, fp, lr}
   137e8:	add	fp, sp, #16
   137ec:	ldr	r6, [r0]
   137f0:	cmp	r6, #0
   137f4:	popeq	{r4, r5, r6, r7, fp, pc}
   137f8:	mov	r4, r1
   137fc:	mov	r5, r0
   13800:	mov	r7, #0
   13804:	ldm	r6, {r0, r1}
   13808:	cmp	r0, #0
   1380c:	streq	r1, [r5]
   13810:	strne	r1, [r0, #4]
   13814:	ldrne	r1, [r6, #4]
   13818:	cmp	r1, #0
   1381c:	addeq	r1, r5, #4
   13820:	str	r0, [r1]
   13824:	str	r7, [r6]
   13828:	str	r7, [r6, #4]
   1382c:	ldr	r0, [r5, #8]
   13830:	cmp	r0, #0
   13834:	beq	13840 <error@@Base+0xb88>
   13838:	bl	10b78 <free@plt>
   1383c:	str	r7, [r5, #8]
   13840:	ldr	r0, [r5, #12]
   13844:	sub	r0, r0, #1
   13848:	str	r0, [r5, #12]
   1384c:	mov	r0, r6
   13850:	blx	r4
   13854:	ldr	r6, [r5]
   13858:	cmp	r6, #0
   1385c:	bne	13804 <error@@Base+0xb4c>
   13860:	pop	{r4, r5, r6, r7, fp, pc}
   13864:	cmp	r0, #2
   13868:	bxlt	lr
   1386c:	movw	r3, #33088	; 0x8140
   13870:	movt	r3, #2
   13874:	stm	r3, {r1, r2}
   13878:	sub	r1, r0, #1
   1387c:	mov	r0, #0
   13880:	b	13884 <error@@Base+0xbcc>
   13884:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13888:	add	fp, sp, #24
   1388c:	movw	r7, #33088	; 0x8140
   13890:	mov	r8, r1
   13894:	mov	r9, r0
   13898:	movt	r7, #2
   1389c:	b	138c0 <error@@Base+0xc08>
   138a0:	sub	r1, r4, #1
   138a4:	str	r6, [r0, r4, lsl #2]
   138a8:	cmp	r1, r9
   138ac:	movgt	r0, r9
   138b0:	blgt	13884 <error@@Base+0xbcc>
   138b4:	add	r9, r5, #1
   138b8:	cmp	r9, r8
   138bc:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   138c0:	ldr	r0, [r7]
   138c4:	cmp	r9, r8
   138c8:	mov	r4, r8
   138cc:	mov	r5, r9
   138d0:	ldr	r6, [r0, r9, lsl #2]
   138d4:	bge	138a0 <error@@Base+0xbe8>
   138d8:	mov	r5, r9
   138dc:	mov	r4, r8
   138e0:	cmp	r5, r4
   138e4:	blt	138f8 <error@@Base+0xc40>
   138e8:	b	13910 <error@@Base+0xc58>
   138ec:	sub	r4, r4, #1
   138f0:	cmp	r5, r4
   138f4:	bge	13910 <error@@Base+0xc58>
   138f8:	ldm	r7, {r0, r2}
   138fc:	ldr	r1, [r0, r4, lsl #2]
   13900:	mov	r0, r6
   13904:	blx	r2
   13908:	cmn	r0, #1
   1390c:	ble	138ec <error@@Base+0xc34>
   13910:	cmp	r5, r4
   13914:	beq	13928 <error@@Base+0xc70>
   13918:	ldr	r0, [r7]
   1391c:	ldr	r1, [r0, r4, lsl #2]
   13920:	str	r1, [r0, r5, lsl #2]
   13924:	add	r5, r5, #1
   13928:	cmp	r5, r4
   1392c:	bge	13948 <error@@Base+0xc90>
   13930:	ldm	r7, {r0, r2}
   13934:	ldr	r1, [r0, r5, lsl #2]
   13938:	mov	r0, r6
   1393c:	blx	r2
   13940:	cmp	r0, #1
   13944:	bge	13924 <error@@Base+0xc6c>
   13948:	cmp	r5, r4
   1394c:	ldrne	r0, [r7]
   13950:	ldrne	r1, [r0, r5, lsl #2]
   13954:	strne	r1, [r0, r4, lsl #2]
   13958:	subne	r4, r4, #1
   1395c:	cmp	r5, r4
   13960:	blt	138f0 <error@@Base+0xc38>
   13964:	ldr	r0, [r7]
   13968:	b	138a0 <error@@Base+0xbe8>
   1396c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13970:	mov	r7, r0
   13974:	ldr	r6, [pc, #72]	; 139c4 <error@@Base+0xd0c>
   13978:	ldr	r5, [pc, #72]	; 139c8 <error@@Base+0xd10>
   1397c:	add	r6, pc, r6
   13980:	add	r5, pc, r5
   13984:	sub	r6, r6, r5
   13988:	mov	r8, r1
   1398c:	mov	r9, r2
   13990:	bl	10b1c <calloc@plt-0x20>
   13994:	asrs	r6, r6, #2
   13998:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1399c:	mov	r4, #0
   139a0:	add	r4, r4, #1
   139a4:	ldr	r3, [r5], #4
   139a8:	mov	r2, r9
   139ac:	mov	r1, r8
   139b0:	mov	r0, r7
   139b4:	blx	r3
   139b8:	cmp	r6, r4
   139bc:	bne	139a0 <error@@Base+0xce8>
   139c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139c4:	andeq	r4, r1, r8, ror r4
   139c8:	andeq	r4, r1, r0, ror r4
   139cc:	bx	lr

Disassembly of section .fini:

000139d0 <.fini>:
   139d0:	push	{r3, lr}
   139d4:	pop	{r3, pc}
