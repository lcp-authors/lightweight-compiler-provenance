
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010d20 <.init>:
   10d20:	push	{r3, lr}
   10d24:	bl	10fbc <__assert_fail@plt+0x48>
   10d28:	pop	{r3, pc}

Disassembly of section .plt:

00010d2c <calloc@plt-0x14>:
   10d2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d30:	ldr	lr, [pc, #4]	; 10d3c <calloc@plt-0x4>
   10d34:	add	lr, pc, lr
   10d38:	ldr	pc, [lr, #8]!
   10d3c:	andeq	r5, r1, r4, asr #5

00010d40 <calloc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #708]!	; 0x2c4

00010d4c <fputs_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #700]!	; 0x2bc

00010d58 <strcmp@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #692]!	; 0x2b4

00010d64 <strtol@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d70 <fflush@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #676]!	; 0x2a4

00010d7c <free@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #668]!	; 0x29c

00010d88 <_exit@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #660]!	; 0x294

00010d94 <memcpy@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #652]!	; 0x28c

00010da0 <execvp@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #644]!	; 0x284

00010dac <mbsinit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #636]!	; 0x27c

00010db8 <memcmp@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #628]!	; 0x274

00010dc4 <dcgettext@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #620]!	; 0x26c

00010dd0 <realloc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #612]!	; 0x264

00010ddc <getpriority@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #604]!	; 0x25c

00010de8 <textdomain@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #596]!	; 0x254

00010df4 <iswprint@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #588]!	; 0x24c

00010e00 <lseek64@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #580]!	; 0x244

00010e0c <__ctype_get_mb_cur_max@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #572]!	; 0x23c

00010e18 <__fpending@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #564]!	; 0x234

00010e24 <ferror_unlocked@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #556]!	; 0x22c

00010e30 <mbrtowc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #548]!	; 0x224

00010e3c <error@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #540]!	; 0x21c

00010e48 <setpriority@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #532]!	; 0x214

00010e54 <malloc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #524]!	; 0x20c

00010e60 <__libc_start_main@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #516]!	; 0x204

00010e6c <__freading@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #508]!	; 0x1fc

00010e78 <__gmon_start__@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #500]!	; 0x1f4

00010e84 <getopt_long@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #492]!	; 0x1ec

00010e90 <__ctype_b_loc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #484]!	; 0x1e4

00010e9c <exit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ea8 <strlen@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #468]!	; 0x1d4

00010eb4 <strchr@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ec0 <__errno_location@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #452]!	; 0x1c4

00010ecc <__cxa_atexit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ed8 <memset@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #436]!	; 0x1b4

00010ee4 <__printf_chk@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #428]!	; 0x1ac

00010ef0 <fileno@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #420]!	; 0x1a4

00010efc <__fprintf_chk@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #412]!	; 0x19c

00010f08 <fclose@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #404]!	; 0x194

00010f14 <fseeko64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #396]!	; 0x18c

00010f20 <setlocale@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #388]!	; 0x184

00010f2c <strrchr@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #380]!	; 0x17c

00010f38 <nl_langinfo@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #372]!	; 0x174

00010f44 <bindtextdomain@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #364]!	; 0x16c

00010f50 <fputs@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #356]!	; 0x164

00010f5c <strncmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #348]!	; 0x15c

00010f68 <abort@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #340]!	; 0x154

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #332]!	; 0x14c

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e60 <__libc_start_main@plt>
   10fac:	bl	10f68 <abort@plt>
   10fb0:	andeq	r4, r1, r8, lsl #14
   10fb4:	strdeq	r1, [r1], -ip
   10fb8:	andeq	r4, r1, r8, lsr #13
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e78 <__gmon_start__@plt>
   10fd8:	andeq	r5, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, ip, asr #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	r6, r2, r0, lsr #2
   11004:	andeq	r6, r2, r0, lsr #2
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	r6, r2, r0, lsr #2
   1103c:	andeq	r6, r2, r0, lsr #2
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	r6, r2, ip, lsr r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	push	{fp, lr}
   11074:	mov	fp, sp
   11078:	sub	sp, sp, #56	; 0x38
   1107c:	mov	r8, r0
   11080:	cmp	r0, #0
   11084:	bne	112bc <__assert_fail@plt+0x348>
   11088:	movw	r1, #18267	; 0x475b
   1108c:	mov	r0, #0
   11090:	mov	r2, #5
   11094:	movt	r1, #1
   11098:	bl	10dc4 <dcgettext@plt>
   1109c:	mov	r1, r0
   110a0:	movw	r0, #24904	; 0x6148
   110a4:	movt	r0, #2
   110a8:	ldr	r2, [r0]
   110ac:	mov	r0, #1
   110b0:	bl	10ee4 <__printf_chk@plt>
   110b4:	movw	r1, #18306	; 0x4782
   110b8:	mov	r0, #0
   110bc:	mov	r2, #5
   110c0:	movt	r1, #1
   110c4:	bl	10dc4 <dcgettext@plt>
   110c8:	mov	r1, r0
   110cc:	mov	r0, #1
   110d0:	mvn	r2, #19
   110d4:	mov	r3, #19
   110d8:	bl	10ee4 <__printf_chk@plt>
   110dc:	movw	r1, #19057	; 0x4a71
   110e0:	mov	r0, #0
   110e4:	mov	r2, #5
   110e8:	movt	r1, #1
   110ec:	bl	10dc4 <dcgettext@plt>
   110f0:	movw	r9, #24884	; 0x6134
   110f4:	movt	r9, #2
   110f8:	ldr	r1, [r9]
   110fc:	bl	10d4c <fputs_unlocked@plt>
   11100:	movw	r1, #18528	; 0x4860
   11104:	mov	r0, #0
   11108:	mov	r2, #5
   1110c:	movt	r1, #1
   11110:	bl	10dc4 <dcgettext@plt>
   11114:	ldr	r1, [r9]
   11118:	bl	10d4c <fputs_unlocked@plt>
   1111c:	movw	r1, #18595	; 0x48a3
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10dc4 <dcgettext@plt>
   11130:	ldr	r1, [r9]
   11134:	bl	10d4c <fputs_unlocked@plt>
   11138:	movw	r1, #18640	; 0x48d0
   1113c:	mov	r0, #0
   11140:	mov	r2, #5
   11144:	movt	r1, #1
   11148:	bl	10dc4 <dcgettext@plt>
   1114c:	ldr	r1, [r9]
   11150:	bl	10d4c <fputs_unlocked@plt>
   11154:	movw	r1, #18694	; 0x4906
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10dc4 <dcgettext@plt>
   11168:	movw	r5, #18885	; 0x49c5
   1116c:	mov	r1, r0
   11170:	mov	r0, #1
   11174:	movt	r5, #1
   11178:	mov	r2, r5
   1117c:	bl	10ee4 <__printf_chk@plt>
   11180:	movw	ip, #19520	; 0x4c40
   11184:	mov	r6, sp
   11188:	movt	ip, #1
   1118c:	mov	r1, r6
   11190:	ldm	ip!, {r2, r3, r4, r7}
   11194:	stmia	r1!, {r2, r3, r4, r7}
   11198:	ldm	ip!, {r0, r2, r3, r4, r7}
   1119c:	stmia	r1!, {r0, r2, r3, r4, r7}
   111a0:	ldm	ip, {r0, r2, r3, r4, r7}
   111a4:	stm	r1, {r0, r2, r3, r4, r7}
   111a8:	movw	r1, #19132	; 0x4abc
   111ac:	movt	r1, #1
   111b0:	mov	r0, r5
   111b4:	bl	10d58 <strcmp@plt>
   111b8:	cmp	r0, #0
   111bc:	ldrne	r1, [r6, #8]!
   111c0:	cmpne	r1, #0
   111c4:	bne	111b0 <__assert_fail@plt+0x23c>
   111c8:	ldr	r6, [r6, #4]
   111cc:	movw	r1, #19227	; 0x4b1b
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10dc4 <dcgettext@plt>
   111e0:	movw	r2, #18918	; 0x49e6
   111e4:	movw	r3, #19250	; 0x4b32
   111e8:	mov	r1, r0
   111ec:	mov	r0, #1
   111f0:	movt	r2, #1
   111f4:	movt	r3, #1
   111f8:	bl	10ee4 <__printf_chk@plt>
   111fc:	cmp	r6, #0
   11200:	mov	r0, #5
   11204:	mov	r1, #0
   11208:	moveq	r6, r5
   1120c:	bl	10f20 <setlocale@plt>
   11210:	cmp	r0, #0
   11214:	beq	1124c <__assert_fail@plt+0x2d8>
   11218:	movw	r1, #19290	; 0x4b5a
   1121c:	mov	r2, #3
   11220:	movt	r1, #1
   11224:	bl	10f5c <strncmp@plt>
   11228:	cmp	r0, #0
   1122c:	beq	1124c <__assert_fail@plt+0x2d8>
   11230:	movw	r1, #19294	; 0x4b5e
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10dc4 <dcgettext@plt>
   11244:	ldr	r1, [r9]
   11248:	bl	10d4c <fputs_unlocked@plt>
   1124c:	movw	r1, #19365	; 0x4ba5
   11250:	mov	r0, #0
   11254:	mov	r2, #5
   11258:	movt	r1, #1
   1125c:	bl	10dc4 <dcgettext@plt>
   11260:	movw	r2, #19250	; 0x4b32
   11264:	mov	r1, r0
   11268:	mov	r0, #1
   1126c:	mov	r3, r5
   11270:	movt	r2, #1
   11274:	bl	10ee4 <__printf_chk@plt>
   11278:	movw	r1, #19392	; 0x4bc0
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10dc4 <dcgettext@plt>
   1128c:	movw	r3, #19442	; 0x4bf2
   11290:	mov	r1, r0
   11294:	movw	r0, #19160	; 0x4ad8
   11298:	cmp	r6, r5
   1129c:	mov	r2, r6
   112a0:	movt	r0, #1
   112a4:	movt	r3, #1
   112a8:	moveq	r3, r0
   112ac:	mov	r0, #1
   112b0:	bl	10ee4 <__printf_chk@plt>
   112b4:	mov	r0, r8
   112b8:	bl	10e9c <exit@plt>
   112bc:	movw	r0, #24880	; 0x6130
   112c0:	movw	r1, #18228	; 0x4734
   112c4:	mov	r2, #5
   112c8:	movt	r0, #2
   112cc:	movt	r1, #1
   112d0:	ldr	r5, [r0]
   112d4:	mov	r0, #0
   112d8:	bl	10dc4 <dcgettext@plt>
   112dc:	mov	r2, r0
   112e0:	movw	r0, #24904	; 0x6148
   112e4:	mov	r1, #1
   112e8:	movt	r0, #2
   112ec:	ldr	r3, [r0]
   112f0:	mov	r0, r5
   112f4:	bl	10efc <__fprintf_chk@plt>
   112f8:	b	112b4 <__assert_fail@plt+0x340>
   112fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11300:	add	fp, sp, #28
   11304:	sub	sp, sp, #12
   11308:	mov	r8, r0
   1130c:	ldr	r0, [r1]
   11310:	mov	r9, r1
   11314:	bl	11804 <__assert_fail@plt+0x890>
   11318:	movw	r1, #19442	; 0x4bf2
   1131c:	mov	r0, #6
   11320:	movt	r1, #1
   11324:	bl	10f20 <setlocale@plt>
   11328:	movw	r7, #18922	; 0x49ea
   1132c:	movw	r1, #18890	; 0x49ca
   11330:	movt	r7, #1
   11334:	movt	r1, #1
   11338:	mov	r0, r7
   1133c:	bl	10f44 <bindtextdomain@plt>
   11340:	mov	r0, r7
   11344:	bl	10de8 <textdomain@plt>
   11348:	movw	r0, #24796	; 0x60dc
   1134c:	mov	r1, #125	; 0x7d
   11350:	movt	r0, #2
   11354:	str	r1, [r0]
   11358:	movw	r0, #5916	; 0x171c
   1135c:	movt	r0, #1
   11360:	bl	1470c <__assert_fail@plt+0x3798>
   11364:	mov	r1, #10
   11368:	mov	r7, #1
   1136c:	cmp	r8, #2
   11370:	blt	1144c <__assert_fail@plt+0x4d8>
   11374:	movw	r2, #18914	; 0x49e2
   11378:	movw	r3, #19456	; 0x4c00
   1137c:	movw	sl, #24872	; 0x6128
   11380:	mov	r4, #0
   11384:	movt	r2, #1
   11388:	movt	r3, #1
   1138c:	movt	sl, #2
   11390:	ldr	r1, [r9, r7, lsl #2]
   11394:	ldrb	r0, [r1]
   11398:	cmp	r0, #45	; 0x2d
   1139c:	bne	113d8 <__assert_fail@plt+0x464>
   113a0:	mov	r0, r1
   113a4:	mov	r5, #1
   113a8:	ldrb	r6, [r0, #1]!
   113ac:	cmp	r6, #43	; 0x2b
   113b0:	movweq	r5, #2
   113b4:	cmp	r6, #45	; 0x2d
   113b8:	movweq	r5, #2
   113bc:	ldrb	r1, [r1, r5]
   113c0:	sub	r1, r1, #48	; 0x30
   113c4:	cmp	r1, #9
   113c8:	bhi	113d8 <__assert_fail@plt+0x464>
   113cc:	add	r7, r7, #1
   113d0:	mov	r4, r0
   113d4:	b	11440 <__assert_fail@plt+0x4cc>
   113d8:	sub	r7, r7, #1
   113dc:	mov	r5, r9
   113e0:	mov	r6, r8
   113e4:	ldr	r0, [r9], r7, lsl #2
   113e8:	str	r0, [r9]
   113ec:	mov	r0, #0
   113f0:	mov	r1, r9
   113f4:	mov	r9, r2
   113f8:	str	r0, [sl]
   113fc:	str	r0, [sp]
   11400:	sub	r0, r8, r7
   11404:	mov	r8, r3
   11408:	bl	10e84 <getopt_long@plt>
   1140c:	ldr	r1, [sl]
   11410:	cmp	r0, #109	; 0x6d
   11414:	add	r7, r7, r1
   11418:	ble	11454 <__assert_fail@plt+0x4e0>
   1141c:	cmp	r0, #110	; 0x6e
   11420:	bne	11678 <__assert_fail@plt+0x704>
   11424:	movw	r0, #24888	; 0x6138
   11428:	mov	r2, r9
   1142c:	mov	r3, r8
   11430:	mov	r9, r5
   11434:	mov	r8, r6
   11438:	movt	r0, #2
   1143c:	ldr	r4, [r0]
   11440:	cmp	r7, r8
   11444:	blt	11390 <__assert_fail@plt+0x41c>
   11448:	b	11464 <__assert_fail@plt+0x4f0>
   1144c:	mov	r0, #0
   11450:	b	114b8 <__assert_fail@plt+0x544>
   11454:	cmn	r0, #1
   11458:	mov	r9, r5
   1145c:	mov	r8, r6
   11460:	bne	115f4 <__assert_fail@plt+0x680>
   11464:	cmp	r4, #0
   11468:	beq	114b0 <__assert_fail@plt+0x53c>
   1146c:	movw	r0, #19442	; 0x4bf2
   11470:	add	r3, sp, #8
   11474:	mov	r1, #0
   11478:	mov	r2, #10
   1147c:	movt	r0, #1
   11480:	str	r0, [sp]
   11484:	mov	r0, r4
   11488:	bl	13c90 <__assert_fail@plt+0x2d1c>
   1148c:	cmp	r0, #2
   11490:	bcs	11680 <__assert_fail@plt+0x70c>
   11494:	ldr	r1, [sp, #8]
   11498:	mov	r0, #1
   1149c:	cmp	r1, #39	; 0x27
   114a0:	movge	r1, #39	; 0x27
   114a4:	cmn	r1, #39	; 0x27
   114a8:	mvnle	r1, #38	; 0x26
   114ac:	b	114b8 <__assert_fail@plt+0x544>
   114b0:	mov	r0, #0
   114b4:	mov	r1, #10
   114b8:	cmp	r7, r8
   114bc:	bne	11510 <__assert_fail@plt+0x59c>
   114c0:	cmp	r0, #0
   114c4:	bne	11654 <__assert_fail@plt+0x6e0>
   114c8:	bl	10ec0 <__errno_location@plt>
   114cc:	mov	r6, #0
   114d0:	mov	r4, r0
   114d4:	mov	r1, #0
   114d8:	str	r6, [r0]
   114dc:	mov	r0, #0
   114e0:	bl	10ddc <getpriority@plt>
   114e4:	mov	r2, r0
   114e8:	cmn	r0, #1
   114ec:	bne	114fc <__assert_fail@plt+0x588>
   114f0:	ldr	r4, [r4]
   114f4:	cmp	r4, #0
   114f8:	bne	116b4 <__assert_fail@plt+0x740>
   114fc:	movw	r1, #19033	; 0x4a59
   11500:	mov	r0, #1
   11504:	movt	r1, #1
   11508:	bl	10ee4 <__printf_chk@plt>
   1150c:	b	115e8 <__assert_fail@plt+0x674>
   11510:	mov	r5, r1
   11514:	bl	10ec0 <__errno_location@plt>
   11518:	mov	r4, r0
   1151c:	mov	r0, #0
   11520:	mov	r1, #0
   11524:	str	r0, [r4]
   11528:	mov	r0, #0
   1152c:	bl	10ddc <getpriority@plt>
   11530:	cmn	r0, #1
   11534:	bne	11544 <__assert_fail@plt+0x5d0>
   11538:	ldr	r6, [r4]
   1153c:	cmp	r6, #0
   11540:	bne	116d8 <__assert_fail@plt+0x764>
   11544:	add	r2, r0, r5
   11548:	mov	r0, #0
   1154c:	mov	r1, #0
   11550:	bl	10e48 <setpriority@plt>
   11554:	cmp	r0, #0
   11558:	beq	115ac <__assert_fail@plt+0x638>
   1155c:	ldr	r6, [r4]
   11560:	movw	r1, #19037	; 0x4a5d
   11564:	mov	r0, #0
   11568:	mov	r2, #5
   1156c:	movt	r1, #1
   11570:	bl	10dc4 <dcgettext@plt>
   11574:	subs	r1, r6, #1
   11578:	mov	r2, r0
   1157c:	movwne	r1, #125	; 0x7d
   11580:	subs	r0, r6, #13
   11584:	movne	r0, r1
   11588:	mov	r1, r6
   1158c:	bl	10e3c <error@plt>
   11590:	movw	r0, #24880	; 0x6130
   11594:	movt	r0, #2
   11598:	ldr	r0, [r0]
   1159c:	bl	10e24 <ferror_unlocked@plt>
   115a0:	mov	r6, #125	; 0x7d
   115a4:	cmp	r0, #0
   115a8:	bne	115e8 <__assert_fail@plt+0x674>
   115ac:	ldr	r0, [r9, r7, lsl #2]!
   115b0:	mov	r1, r9
   115b4:	bl	10da0 <execvp@plt>
   115b8:	ldr	r0, [r9]
   115bc:	ldr	r4, [r4]
   115c0:	bl	13208 <__assert_fail@plt+0x2294>
   115c4:	movw	r2, #19607	; 0x4c97
   115c8:	mov	r3, r0
   115cc:	mov	r0, #0
   115d0:	mov	r1, r4
   115d4:	movt	r2, #1
   115d8:	bl	10e3c <error@plt>
   115dc:	mov	r6, #126	; 0x7e
   115e0:	cmp	r4, #2
   115e4:	movweq	r6, #127	; 0x7f
   115e8:	mov	r0, r6
   115ec:	sub	sp, fp, #28
   115f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115f4:	cmn	r0, #3
   115f8:	bne	11644 <__assert_fail@plt+0x6d0>
   115fc:	movw	r0, #24792	; 0x60d8
   11600:	movw	r2, #18932	; 0x49f4
   11604:	mov	r1, #0
   11608:	movt	r0, #2
   1160c:	movt	r2, #1
   11610:	str	r1, [sp, #4]
   11614:	movw	r1, #18885	; 0x49c5
   11618:	ldr	r3, [r0]
   1161c:	movw	r0, #24884	; 0x6134
   11620:	str	r2, [sp]
   11624:	movw	r2, #18918	; 0x49e6
   11628:	movt	r1, #1
   1162c:	movt	r0, #2
   11630:	movt	r2, #1
   11634:	ldr	r0, [r0]
   11638:	bl	136f4 <__assert_fail@plt+0x2780>
   1163c:	mov	r0, #0
   11640:	bl	10e9c <exit@plt>
   11644:	cmn	r0, #2
   11648:	bne	11678 <__assert_fail@plt+0x704>
   1164c:	mov	r0, #0
   11650:	bl	11070 <__assert_fail@plt+0xfc>
   11654:	movw	r1, #18970	; 0x4a1a
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	movt	r1, #1
   11664:	bl	10dc4 <dcgettext@plt>
   11668:	mov	r2, r0
   1166c:	mov	r0, #0
   11670:	mov	r1, #0
   11674:	bl	10e3c <error@plt>
   11678:	mov	r0, #125	; 0x7d
   1167c:	bl	11070 <__assert_fail@plt+0xfc>
   11680:	movw	r1, #18948	; 0x4a04
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	10dc4 <dcgettext@plt>
   11694:	mov	r5, r0
   11698:	mov	r0, r4
   1169c:	bl	13208 <__assert_fail@plt+0x2294>
   116a0:	mov	r3, r0
   116a4:	mov	r0, #125	; 0x7d
   116a8:	mov	r1, #0
   116ac:	mov	r2, r5
   116b0:	bl	10e3c <error@plt>
   116b4:	movw	r1, #19013	; 0x4a45
   116b8:	mov	r0, #0
   116bc:	mov	r2, #5
   116c0:	movt	r1, #1
   116c4:	bl	10dc4 <dcgettext@plt>
   116c8:	mov	r2, r0
   116cc:	mov	r0, #125	; 0x7d
   116d0:	mov	r1, r4
   116d4:	bl	10e3c <error@plt>
   116d8:	movw	r1, #19013	; 0x4a45
   116dc:	mov	r0, #0
   116e0:	mov	r2, #5
   116e4:	movt	r1, #1
   116e8:	bl	10dc4 <dcgettext@plt>
   116ec:	mov	r2, r0
   116f0:	mov	r0, #125	; 0x7d
   116f4:	mov	r1, r6
   116f8:	bl	10e3c <error@plt>
   116fc:	movw	r1, #24896	; 0x6140
   11700:	movt	r1, #2
   11704:	str	r0, [r1]
   11708:	bx	lr
   1170c:	movw	r1, #24900	; 0x6144
   11710:	movt	r1, #2
   11714:	strb	r0, [r1]
   11718:	bx	lr
   1171c:	push	{r4, r5, r6, sl, fp, lr}
   11720:	add	fp, sp, #16
   11724:	sub	sp, sp, #8
   11728:	movw	r0, #24884	; 0x6134
   1172c:	movt	r0, #2
   11730:	ldr	r0, [r0]
   11734:	bl	14298 <__assert_fail@plt+0x3324>
   11738:	cmp	r0, #0
   1173c:	beq	11764 <__assert_fail@plt+0x7f0>
   11740:	movw	r0, #24900	; 0x6144
   11744:	movt	r0, #2
   11748:	ldrb	r0, [r0]
   1174c:	cmp	r0, #0
   11750:	beq	11784 <__assert_fail@plt+0x810>
   11754:	bl	10ec0 <__errno_location@plt>
   11758:	ldr	r0, [r0]
   1175c:	cmp	r0, #32
   11760:	bne	11784 <__assert_fail@plt+0x810>
   11764:	movw	r0, #24880	; 0x6130
   11768:	movt	r0, #2
   1176c:	ldr	r0, [r0]
   11770:	bl	14298 <__assert_fail@plt+0x3324>
   11774:	cmp	r0, #0
   11778:	subeq	sp, fp, #16
   1177c:	popeq	{r4, r5, r6, sl, fp, pc}
   11780:	b	117f4 <__assert_fail@plt+0x880>
   11784:	movw	r1, #19591	; 0x4c87
   11788:	mov	r0, #0
   1178c:	mov	r2, #5
   11790:	movt	r1, #1
   11794:	bl	10dc4 <dcgettext@plt>
   11798:	mov	r4, r0
   1179c:	movw	r0, #24896	; 0x6140
   117a0:	movt	r0, #2
   117a4:	ldr	r6, [r0]
   117a8:	bl	10ec0 <__errno_location@plt>
   117ac:	ldr	r5, [r0]
   117b0:	cmp	r6, #0
   117b4:	bne	117d0 <__assert_fail@plt+0x85c>
   117b8:	movw	r2, #19607	; 0x4c97
   117bc:	mov	r0, #0
   117c0:	mov	r1, r5
   117c4:	mov	r3, r4
   117c8:	movt	r2, #1
   117cc:	b	117f0 <__assert_fail@plt+0x87c>
   117d0:	mov	r0, r6
   117d4:	bl	12fc8 <__assert_fail@plt+0x2054>
   117d8:	movw	r2, #19603	; 0x4c93
   117dc:	mov	r3, r0
   117e0:	str	r4, [sp]
   117e4:	mov	r0, #0
   117e8:	mov	r1, r5
   117ec:	movt	r2, #1
   117f0:	bl	10e3c <error@plt>
   117f4:	movw	r0, #24796	; 0x60dc
   117f8:	movt	r0, #2
   117fc:	ldr	r0, [r0]
   11800:	bl	10d88 <_exit@plt>
   11804:	push	{r4, r5, fp, lr}
   11808:	add	fp, sp, #8
   1180c:	cmp	r0, #0
   11810:	beq	118a4 <__assert_fail@plt+0x930>
   11814:	mov	r1, #47	; 0x2f
   11818:	mov	r4, r0
   1181c:	bl	10f2c <strrchr@plt>
   11820:	cmp	r0, #0
   11824:	mov	r5, r4
   11828:	addne	r5, r0, #1
   1182c:	sub	r0, r5, r4
   11830:	cmp	r0, #7
   11834:	blt	11888 <__assert_fail@plt+0x914>
   11838:	movw	r1, #19666	; 0x4cd2
   1183c:	sub	r0, r5, #7
   11840:	mov	r2, #7
   11844:	movt	r1, #1
   11848:	bl	10f5c <strncmp@plt>
   1184c:	cmp	r0, #0
   11850:	bne	11888 <__assert_fail@plt+0x914>
   11854:	movw	r1, #19674	; 0x4cda
   11858:	mov	r0, r5
   1185c:	mov	r2, #3
   11860:	movt	r1, #1
   11864:	bl	10f5c <strncmp@plt>
   11868:	cmp	r0, #0
   1186c:	beq	11878 <__assert_fail@plt+0x904>
   11870:	mov	r4, r5
   11874:	b	11888 <__assert_fail@plt+0x914>
   11878:	movw	r0, #24864	; 0x6120
   1187c:	add	r4, r5, #3
   11880:	movt	r0, #2
   11884:	str	r4, [r0]
   11888:	movw	r0, #24868	; 0x6124
   1188c:	movt	r0, #2
   11890:	str	r4, [r0]
   11894:	movw	r0, #24904	; 0x6148
   11898:	movt	r0, #2
   1189c:	str	r4, [r0]
   118a0:	pop	{r4, r5, fp, pc}
   118a4:	movw	r0, #24880	; 0x6130
   118a8:	movt	r0, #2
   118ac:	ldr	r1, [r0]
   118b0:	movw	r0, #19610	; 0x4c9a
   118b4:	movt	r0, #1
   118b8:	bl	10f50 <fputs@plt>
   118bc:	bl	10f68 <abort@plt>
   118c0:	push	{r4, r5, r6, sl, fp, lr}
   118c4:	add	fp, sp, #16
   118c8:	mov	r4, r0
   118cc:	movw	r0, #24912	; 0x6150
   118d0:	movt	r0, #2
   118d4:	cmp	r4, #0
   118d8:	moveq	r4, r0
   118dc:	bl	10ec0 <__errno_location@plt>
   118e0:	ldr	r6, [r0]
   118e4:	mov	r5, r0
   118e8:	mov	r0, r4
   118ec:	mov	r1, #48	; 0x30
   118f0:	bl	13b4c <__assert_fail@plt+0x2bd8>
   118f4:	str	r6, [r5]
   118f8:	pop	{r4, r5, r6, sl, fp, pc}
   118fc:	movw	r1, #24912	; 0x6150
   11900:	cmp	r0, #0
   11904:	movt	r1, #2
   11908:	movne	r1, r0
   1190c:	ldr	r0, [r1]
   11910:	bx	lr
   11914:	movw	r2, #24912	; 0x6150
   11918:	cmp	r0, #0
   1191c:	movt	r2, #2
   11920:	movne	r2, r0
   11924:	str	r1, [r2]
   11928:	bx	lr
   1192c:	movw	r3, #24912	; 0x6150
   11930:	cmp	r0, #0
   11934:	movt	r3, #2
   11938:	movne	r3, r0
   1193c:	ubfx	r0, r1, #5, #3
   11940:	and	r1, r1, #31
   11944:	add	r0, r3, r0, lsl #2
   11948:	ldr	r3, [r0, #8]
   1194c:	eor	r2, r2, r3, lsr r1
   11950:	and	r2, r2, #1
   11954:	eor	r2, r3, r2, lsl r1
   11958:	str	r2, [r0, #8]
   1195c:	mov	r0, #1
   11960:	and	r0, r0, r3, lsr r1
   11964:	bx	lr
   11968:	movw	r2, #24912	; 0x6150
   1196c:	cmp	r0, #0
   11970:	movt	r2, #2
   11974:	movne	r2, r0
   11978:	ldr	r0, [r2, #4]
   1197c:	str	r1, [r2, #4]
   11980:	bx	lr
   11984:	movw	r3, #24912	; 0x6150
   11988:	cmp	r0, #0
   1198c:	movt	r3, #2
   11990:	movne	r3, r0
   11994:	cmp	r1, #0
   11998:	mov	r0, #10
   1199c:	cmpne	r2, #0
   119a0:	str	r0, [r3]
   119a4:	bne	119b4 <__assert_fail@plt+0xa40>
   119a8:	push	{fp, lr}
   119ac:	mov	fp, sp
   119b0:	bl	10f68 <abort@plt>
   119b4:	str	r1, [r3, #40]	; 0x28
   119b8:	str	r2, [r3, #44]	; 0x2c
   119bc:	bx	lr
   119c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119c4:	add	fp, sp, #28
   119c8:	sub	sp, sp, #20
   119cc:	mov	r7, r0
   119d0:	ldr	r0, [fp, #8]
   119d4:	movw	r5, #24912	; 0x6150
   119d8:	mov	r8, r3
   119dc:	mov	r9, r2
   119e0:	mov	sl, r1
   119e4:	movt	r5, #2
   119e8:	cmp	r0, #0
   119ec:	movne	r5, r0
   119f0:	bl	10ec0 <__errno_location@plt>
   119f4:	mov	r4, r0
   119f8:	ldm	r5, {r0, r1}
   119fc:	ldr	r2, [r5, #40]	; 0x28
   11a00:	ldr	r3, [r5, #44]	; 0x2c
   11a04:	add	r5, r5, #8
   11a08:	ldr	r6, [r4]
   11a0c:	stm	sp, {r0, r1, r5}
   11a10:	str	r2, [sp, #12]
   11a14:	str	r3, [sp, #16]
   11a18:	mov	r0, r7
   11a1c:	mov	r1, sl
   11a20:	mov	r2, r9
   11a24:	mov	r3, r8
   11a28:	bl	11a38 <__assert_fail@plt+0xac4>
   11a2c:	str	r6, [r4]
   11a30:	sub	sp, fp, #28
   11a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a3c:	add	fp, sp, #28
   11a40:	sub	sp, sp, #156	; 0x9c
   11a44:	str	r0, [fp, #-56]	; 0xffffffc8
   11a48:	ldr	r0, [fp, #12]
   11a4c:	mov	r4, r1
   11a50:	str	r3, [sp, #80]	; 0x50
   11a54:	str	r2, [fp, #-84]	; 0xffffffac
   11a58:	and	r1, r0, #4
   11a5c:	str	r1, [sp, #24]
   11a60:	and	r1, r0, #1
   11a64:	str	r1, [sp, #28]
   11a68:	ubfx	r7, r0, #1, #1
   11a6c:	bl	10e0c <__ctype_get_mb_cur_max@plt>
   11a70:	str	r0, [sp, #32]
   11a74:	ldr	r0, [fp, #24]
   11a78:	ldr	r9, [fp, #8]
   11a7c:	mov	r2, #0
   11a80:	mov	r1, #0
   11a84:	mov	r5, #0
   11a88:	str	r2, [sp, #52]	; 0x34
   11a8c:	mov	r2, #1
   11a90:	str	r0, [sp, #72]	; 0x48
   11a94:	ldr	r0, [fp, #20]
   11a98:	str	r0, [sp, #64]	; 0x40
   11a9c:	mov	r0, #0
   11aa0:	str	r0, [sp, #92]	; 0x5c
   11aa4:	mov	r0, #0
   11aa8:	str	r0, [fp, #-76]	; 0xffffffb4
   11aac:	mov	r0, #0
   11ab0:	cmp	r9, #10
   11ab4:	str	r1, [sp, #68]	; 0x44
   11ab8:	bhi	12ab8 <__assert_fail@plt+0x1b44>
   11abc:	add	r1, pc, #28
   11ac0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ac4:	ldr	lr, [sp, #80]	; 0x50
   11ac8:	mov	r6, r4
   11acc:	mov	r8, #0
   11ad0:	mov	r3, #1
   11ad4:	mov	sl, #0
   11ad8:	mov	r4, r2
   11adc:	ldr	pc, [r1, r9, lsl #2]
   11ae0:			; <UNDEFINED> instruction: 0x00011bb0
   11ae4:	andeq	r1, r1, ip, ror #23
   11ae8:	andeq	r1, r1, r0, asr #23
   11aec:	andeq	r1, r1, r8, lsr #23
   11af0:	andeq	r1, r1, r0, ror #23
   11af4:	andeq	r1, r1, r8, lsr ip
   11af8:	ldrdeq	r1, [r1], -r0
   11afc:	muleq	r1, r8, ip
   11b00:	andeq	r1, r1, ip, lsl #22
   11b04:	andeq	r1, r1, ip, lsl #22
   11b08:	andeq	r1, r1, r4, lsr fp
   11b0c:	movw	r0, #19756	; 0x4d2c
   11b10:	mov	r1, r9
   11b14:	movt	r0, #1
   11b18:	bl	13220 <__assert_fail@plt+0x22ac>
   11b1c:	str	r0, [sp, #64]	; 0x40
   11b20:	movw	r0, #19758	; 0x4d2e
   11b24:	mov	r1, r9
   11b28:	movt	r0, #1
   11b2c:	bl	13220 <__assert_fail@plt+0x22ac>
   11b30:	str	r0, [sp, #72]	; 0x48
   11b34:	mov	r8, #0
   11b38:	mov	sl, r7
   11b3c:	tst	r7, #1
   11b40:	str	r5, [fp, #-48]	; 0xffffffd0
   11b44:	bne	11b80 <__assert_fail@plt+0xc0c>
   11b48:	ldr	r0, [sp, #64]	; 0x40
   11b4c:	ldrb	r0, [r0]
   11b50:	cmp	r0, #0
   11b54:	beq	11b80 <__assert_fail@plt+0xc0c>
   11b58:	ldr	r1, [sp, #64]	; 0x40
   11b5c:	mov	r8, #0
   11b60:	add	r1, r1, #1
   11b64:	cmp	r8, r6
   11b68:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   11b6c:	strbcc	r0, [r2, r8]
   11b70:	ldrb	r0, [r1, r8]
   11b74:	add	r8, r8, #1
   11b78:	cmp	r0, #0
   11b7c:	bne	11b64 <__assert_fail@plt+0xbf0>
   11b80:	ldr	r7, [sp, #72]	; 0x48
   11b84:	mov	r0, r7
   11b88:	bl	10ea8 <strlen@plt>
   11b8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b90:	ldr	lr, [sp, #80]	; 0x50
   11b94:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11b98:	str	r0, [fp, #-76]	; 0xffffffb4
   11b9c:	str	r7, [sp, #92]	; 0x5c
   11ba0:	mov	r3, #1
   11ba4:	b	11c98 <__assert_fail@plt+0xd24>
   11ba8:	mov	r0, #1
   11bac:	b	11bec <__assert_fail@plt+0xc78>
   11bb0:	mov	r9, #0
   11bb4:	mov	r8, #0
   11bb8:	mov	r3, r0
   11bbc:	b	11c94 <__assert_fail@plt+0xd20>
   11bc0:	tst	r7, #1
   11bc4:	bne	11bec <__assert_fail@plt+0xc78>
   11bc8:	mov	r3, r0
   11bcc:	b	11c14 <__assert_fail@plt+0xca0>
   11bd0:	mov	r0, #1
   11bd4:	mov	r8, #0
   11bd8:	mov	r9, #5
   11bdc:	b	11c4c <__assert_fail@plt+0xcd8>
   11be0:	mov	r3, #1
   11be4:	tst	r7, #1
   11be8:	beq	11c14 <__assert_fail@plt+0xca0>
   11bec:	mov	r1, #1
   11bf0:	mov	r8, #0
   11bf4:	mov	r9, #2
   11bf8:	mov	r3, r0
   11bfc:	mov	sl, #1
   11c00:	str	r1, [fp, #-76]	; 0xffffffb4
   11c04:	movw	r1, #19758	; 0x4d2e
   11c08:	movt	r1, #1
   11c0c:	str	r1, [sp, #92]	; 0x5c
   11c10:	b	11c98 <__assert_fail@plt+0xd24>
   11c14:	cmp	r6, #0
   11c18:	mov	r8, #1
   11c1c:	mov	r9, #2
   11c20:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11c24:	movne	r0, #39	; 0x27
   11c28:	strbne	r0, [r1]
   11c2c:	movw	r0, #19758	; 0x4d2e
   11c30:	movt	r0, #1
   11c34:	b	11c88 <__assert_fail@plt+0xd14>
   11c38:	mov	r9, #5
   11c3c:	tst	r7, #1
   11c40:	beq	11c68 <__assert_fail@plt+0xcf4>
   11c44:	mov	r0, #1
   11c48:	mov	r8, #0
   11c4c:	str	r0, [fp, #-76]	; 0xffffffb4
   11c50:	movw	r0, #19754	; 0x4d2a
   11c54:	mov	r3, #1
   11c58:	mov	sl, #1
   11c5c:	movt	r0, #1
   11c60:	str	r0, [sp, #92]	; 0x5c
   11c64:	b	11c98 <__assert_fail@plt+0xd24>
   11c68:	cmp	r6, #0
   11c6c:	mov	r8, #1
   11c70:	mov	r3, #1
   11c74:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11c78:	movne	r0, #34	; 0x22
   11c7c:	strbne	r0, [r1]
   11c80:	movw	r0, #19754	; 0x4d2a
   11c84:	movt	r0, #1
   11c88:	str	r0, [sp, #92]	; 0x5c
   11c8c:	mov	r0, #1
   11c90:	str	r0, [fp, #-76]	; 0xffffffb4
   11c94:	mov	sl, #0
   11c98:	ldr	r0, [fp, #16]
   11c9c:	mov	r7, #0
   11ca0:	str	r9, [fp, #-64]	; 0xffffffc0
   11ca4:	str	sl, [fp, #-72]	; 0xffffffb8
   11ca8:	str	r3, [sp, #84]	; 0x54
   11cac:	cmp	r0, #0
   11cb0:	movwne	r0, #1
   11cb4:	and	r0, r0, sl
   11cb8:	str	r0, [fp, #-88]	; 0xffffffa8
   11cbc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11cc0:	cmp	r0, #0
   11cc4:	movwne	r0, #1
   11cc8:	subs	r2, r9, #2
   11ccc:	and	r1, r0, sl
   11cd0:	str	r2, [fp, #-80]	; 0xffffffb0
   11cd4:	and	r1, r3, r1
   11cd8:	str	r1, [sp, #44]	; 0x2c
   11cdc:	clz	r1, r2
   11ce0:	lsr	r1, r1, #5
   11ce4:	and	r1, r1, sl
   11ce8:	str	r1, [sp, #56]	; 0x38
   11cec:	mov	r1, r2
   11cf0:	eor	r2, sl, #1
   11cf4:	movwne	r1, #1
   11cf8:	str	r2, [sp, #88]	; 0x58
   11cfc:	orr	r2, r1, r2
   11d00:	and	r1, r1, r3
   11d04:	and	r0, r0, r1
   11d08:	str	r2, [sp, #60]	; 0x3c
   11d0c:	str	r1, [fp, #-68]	; 0xffffffbc
   11d10:	str	r0, [fp, #-60]	; 0xffffffc4
   11d14:	eor	r0, r3, #1
   11d18:	str	r0, [sp, #48]	; 0x30
   11d1c:	cmn	lr, #1
   11d20:	beq	11d30 <__assert_fail@plt+0xdbc>
   11d24:	cmp	r7, lr
   11d28:	bne	11d3c <__assert_fail@plt+0xdc8>
   11d2c:	b	128e8 <__assert_fail@plt+0x1974>
   11d30:	ldrb	r0, [ip, r7]
   11d34:	cmp	r0, #0
   11d38:	beq	128f0 <__assert_fail@plt+0x197c>
   11d3c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d40:	mov	r9, #0
   11d44:	str	r5, [fp, #-48]	; 0xffffffd0
   11d48:	str	r6, [fp, #-52]	; 0xffffffcc
   11d4c:	cmp	r0, #0
   11d50:	beq	11d90 <__assert_fail@plt+0xe1c>
   11d54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d58:	mov	r5, r4
   11d5c:	add	r4, r7, r0
   11d60:	cmp	r0, #2
   11d64:	bcc	11d80 <__assert_fail@plt+0xe0c>
   11d68:	cmn	lr, #1
   11d6c:	bne	11d80 <__assert_fail@plt+0xe0c>
   11d70:	mov	r0, ip
   11d74:	bl	10ea8 <strlen@plt>
   11d78:	ldr	ip, [fp, #-84]	; 0xffffffac
   11d7c:	mov	lr, r0
   11d80:	cmp	r4, lr
   11d84:	bls	11d98 <__assert_fail@plt+0xe24>
   11d88:	mov	r6, #0
   11d8c:	b	11dd8 <__assert_fail@plt+0xe64>
   11d90:	mov	r6, #0
   11d94:	b	11ddc <__assert_fail@plt+0xe68>
   11d98:	ldr	r1, [sp, #92]	; 0x5c
   11d9c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11da0:	add	r0, ip, r7
   11da4:	mov	r4, lr
   11da8:	bl	10db8 <memcmp@plt>
   11dac:	ldr	r2, [sp, #88]	; 0x58
   11db0:	cmp	r0, #0
   11db4:	mov	r1, r0
   11db8:	movwne	r1, #1
   11dbc:	orr	r1, r1, r2
   11dc0:	tst	r1, #1
   11dc4:	beq	12984 <__assert_fail@plt+0x1a10>
   11dc8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11dcc:	clz	r0, r0
   11dd0:	mov	lr, r4
   11dd4:	lsr	r6, r0, #5
   11dd8:	mov	r4, r5
   11ddc:	ldrb	r5, [ip, r7]
   11de0:	cmp	r5, #126	; 0x7e
   11de4:	bhi	121ac <__assert_fail@plt+0x1238>
   11de8:	add	r3, pc, #16
   11dec:	mov	sl, #1
   11df0:	mov	r2, #110	; 0x6e
   11df4:	mov	r0, #97	; 0x61
   11df8:	mov	r1, #0
   11dfc:	ldr	pc, [r3, r5, lsl #2]
   11e00:	muleq	r1, r0, r0
   11e04:	andeq	r2, r1, ip, lsr #3
   11e08:	andeq	r2, r1, ip, lsr #3
   11e0c:	andeq	r2, r1, ip, lsr #3
   11e10:	andeq	r2, r1, ip, lsr #3
   11e14:	andeq	r2, r1, ip, lsr #3
   11e18:	andeq	r2, r1, ip, lsr #3
   11e1c:	andeq	r2, r1, r0, asr r2
   11e20:	andeq	r2, r1, r0, ror r0
   11e24:	andeq	r2, r1, r8, rrx
   11e28:	andeq	r2, r1, ip, ror r0
   11e2c:	andeq	r2, r1, r0, lsl #2
   11e30:	andeq	r2, r1, r0, rrx
   11e34:	andeq	r2, r1, r8, ror r0
   11e38:	andeq	r2, r1, ip, lsr #3
   11e3c:	andeq	r2, r1, ip, lsr #3
   11e40:	andeq	r2, r1, ip, lsr #3
   11e44:	andeq	r2, r1, ip, lsr #3
   11e48:	andeq	r2, r1, ip, lsr #3
   11e4c:	andeq	r2, r1, ip, lsr #3
   11e50:	andeq	r2, r1, ip, lsr #3
   11e54:	andeq	r2, r1, ip, lsr #3
   11e58:	andeq	r2, r1, ip, lsr #3
   11e5c:	andeq	r2, r1, ip, lsr #3
   11e60:	andeq	r2, r1, ip, lsr #3
   11e64:	andeq	r2, r1, ip, lsr #3
   11e68:	andeq	r2, r1, ip, lsr #3
   11e6c:	andeq	r2, r1, ip, lsr #3
   11e70:	andeq	r2, r1, ip, lsr #3
   11e74:	andeq	r2, r1, ip, lsr #3
   11e78:	andeq	r2, r1, ip, lsr #3
   11e7c:	andeq	r2, r1, ip, lsr #3
   11e80:	andeq	r2, r1, r0, lsl r2
   11e84:	andeq	r2, r1, r4, lsl r2
   11e88:	andeq	r2, r1, r4, lsl r2
   11e8c:	andeq	r2, r1, r0, lsl r0
   11e90:	andeq	r2, r1, r4, lsl r2
   11e94:	strdeq	r1, [r1], -ip
   11e98:	andeq	r2, r1, r4, lsl r2
   11e9c:	andeq	r2, r1, r8, lsl #2
   11ea0:	andeq	r2, r1, r4, lsl r2
   11ea4:	andeq	r2, r1, r4, lsl r2
   11ea8:	andeq	r2, r1, r4, lsl r2
   11eac:	strdeq	r1, [r1], -ip
   11eb0:	strdeq	r1, [r1], -ip
   11eb4:	strdeq	r1, [r1], -ip
   11eb8:	strdeq	r1, [r1], -ip
   11ebc:	strdeq	r1, [r1], -ip
   11ec0:	strdeq	r1, [r1], -ip
   11ec4:	strdeq	r1, [r1], -ip
   11ec8:	strdeq	r1, [r1], -ip
   11ecc:	strdeq	r1, [r1], -ip
   11ed0:	strdeq	r1, [r1], -ip
   11ed4:	strdeq	r1, [r1], -ip
   11ed8:	strdeq	r1, [r1], -ip
   11edc:	strdeq	r1, [r1], -ip
   11ee0:	strdeq	r1, [r1], -ip
   11ee4:	strdeq	r1, [r1], -ip
   11ee8:	strdeq	r1, [r1], -ip
   11eec:	andeq	r2, r1, r4, lsl r2
   11ef0:	andeq	r2, r1, r4, lsl r2
   11ef4:	andeq	r2, r1, r4, lsl r2
   11ef8:	andeq	r2, r1, r4, lsl r2
   11efc:	ldrdeq	r2, [r1], -r4
   11f00:	andeq	r2, r1, ip, lsr #3
   11f04:	strdeq	r1, [r1], -ip
   11f08:	strdeq	r1, [r1], -ip
   11f0c:	strdeq	r1, [r1], -ip
   11f10:	strdeq	r1, [r1], -ip
   11f14:	strdeq	r1, [r1], -ip
   11f18:	strdeq	r1, [r1], -ip
   11f1c:	strdeq	r1, [r1], -ip
   11f20:	strdeq	r1, [r1], -ip
   11f24:	strdeq	r1, [r1], -ip
   11f28:	strdeq	r1, [r1], -ip
   11f2c:	strdeq	r1, [r1], -ip
   11f30:	strdeq	r1, [r1], -ip
   11f34:	strdeq	r1, [r1], -ip
   11f38:	strdeq	r1, [r1], -ip
   11f3c:	strdeq	r1, [r1], -ip
   11f40:	strdeq	r1, [r1], -ip
   11f44:	strdeq	r1, [r1], -ip
   11f48:	strdeq	r1, [r1], -ip
   11f4c:	strdeq	r1, [r1], -ip
   11f50:	strdeq	r1, [r1], -ip
   11f54:	strdeq	r1, [r1], -ip
   11f58:	strdeq	r1, [r1], -ip
   11f5c:	strdeq	r1, [r1], -ip
   11f60:	strdeq	r1, [r1], -ip
   11f64:	strdeq	r1, [r1], -ip
   11f68:	strdeq	r1, [r1], -ip
   11f6c:	andeq	r2, r1, r4, lsl r2
   11f70:	andeq	r2, r1, ip, lsr r0
   11f74:	strdeq	r1, [r1], -ip
   11f78:	andeq	r2, r1, r4, lsl r2
   11f7c:	strdeq	r1, [r1], -ip
   11f80:	andeq	r2, r1, r4, lsl r2
   11f84:	strdeq	r1, [r1], -ip
   11f88:	strdeq	r1, [r1], -ip
   11f8c:	strdeq	r1, [r1], -ip
   11f90:	strdeq	r1, [r1], -ip
   11f94:	strdeq	r1, [r1], -ip
   11f98:	strdeq	r1, [r1], -ip
   11f9c:	strdeq	r1, [r1], -ip
   11fa0:	strdeq	r1, [r1], -ip
   11fa4:	strdeq	r1, [r1], -ip
   11fa8:	strdeq	r1, [r1], -ip
   11fac:	strdeq	r1, [r1], -ip
   11fb0:	strdeq	r1, [r1], -ip
   11fb4:	strdeq	r1, [r1], -ip
   11fb8:	strdeq	r1, [r1], -ip
   11fbc:	strdeq	r1, [r1], -ip
   11fc0:	strdeq	r1, [r1], -ip
   11fc4:	strdeq	r1, [r1], -ip
   11fc8:	strdeq	r1, [r1], -ip
   11fcc:	strdeq	r1, [r1], -ip
   11fd0:	strdeq	r1, [r1], -ip
   11fd4:	strdeq	r1, [r1], -ip
   11fd8:	strdeq	r1, [r1], -ip
   11fdc:	strdeq	r1, [r1], -ip
   11fe0:	strdeq	r1, [r1], -ip
   11fe4:	strdeq	r1, [r1], -ip
   11fe8:	strdeq	r1, [r1], -ip
   11fec:	andeq	r2, r1, r0, lsr #32
   11ff0:	andeq	r2, r1, r4, lsl r2
   11ff4:	andeq	r2, r1, r0, lsr #32
   11ff8:	andeq	r2, r1, r0, lsl r0
   11ffc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12000:	cmp	r0, #0
   12004:	beq	12264 <__assert_fail@plt+0x12f0>
   12008:	ldr	r0, [fp, #16]
   1200c:	b	12268 <__assert_fail@plt+0x12f4>
   12010:	mov	sl, #0
   12014:	cmp	r7, #0
   12018:	bne	12480 <__assert_fail@plt+0x150c>
   1201c:	b	12210 <__assert_fail@plt+0x129c>
   12020:	mov	sl, #0
   12024:	cmn	lr, #1
   12028:	beq	121fc <__assert_fail@plt+0x1288>
   1202c:	cmp	r7, #0
   12030:	cmpeq	lr, #1
   12034:	bne	12480 <__assert_fail@plt+0x150c>
   12038:	b	12210 <__assert_fail@plt+0x129c>
   1203c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12040:	cmp	r0, #2
   12044:	bne	12234 <__assert_fail@plt+0x12c0>
   12048:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1204c:	tst	r0, #1
   12050:	bne	129a0 <__assert_fail@plt+0x1a2c>
   12054:	mov	r9, #0
   12058:	mov	r0, #92	; 0x5c
   1205c:	b	12248 <__assert_fail@plt+0x12d4>
   12060:	mov	r0, #102	; 0x66
   12064:	b	12250 <__assert_fail@plt+0x12dc>
   12068:	mov	r2, #116	; 0x74
   1206c:	b	1207c <__assert_fail@plt+0x1108>
   12070:	mov	r0, #98	; 0x62
   12074:	b	12250 <__assert_fail@plt+0x12dc>
   12078:	mov	r2, #114	; 0x72
   1207c:	ldr	r0, [sp, #60]	; 0x3c
   12080:	tst	r0, #1
   12084:	mov	r0, r2
   12088:	bne	12250 <__assert_fail@plt+0x12dc>
   1208c:	b	129a0 <__assert_fail@plt+0x1a2c>
   12090:	ldr	r0, [sp, #84]	; 0x54
   12094:	tst	r0, #1
   12098:	beq	1233c <__assert_fail@plt+0x13c8>
   1209c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120a0:	tst	r0, #1
   120a4:	bne	12aa8 <__assert_fail@plt+0x1b34>
   120a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   120b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   120b4:	cmp	r0, #2
   120b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120bc:	movwne	r0, #1
   120c0:	orr	r0, r0, r3
   120c4:	tst	r0, #1
   120c8:	beq	127bc <__assert_fail@plt+0x1848>
   120cc:	mov	r0, r8
   120d0:	b	127fc <__assert_fail@plt+0x1888>
   120d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120d8:	mov	r9, #0
   120dc:	mov	r5, #63	; 0x3f
   120e0:	cmp	r0, #5
   120e4:	beq	12488 <__assert_fail@plt+0x1514>
   120e8:	cmp	r0, #2
   120ec:	bne	12548 <__assert_fail@plt+0x15d4>
   120f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120f4:	tst	r0, #1
   120f8:	beq	1254c <__assert_fail@plt+0x15d8>
   120fc:	b	129a0 <__assert_fail@plt+0x1a2c>
   12100:	mov	r0, #118	; 0x76
   12104:	b	12250 <__assert_fail@plt+0x12dc>
   12108:	mov	r0, #1
   1210c:	mov	r5, #39	; 0x27
   12110:	str	r0, [sp, #52]	; 0x34
   12114:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12118:	cmp	r0, #2
   1211c:	bne	121a4 <__assert_fail@plt+0x1230>
   12120:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12124:	tst	r0, #1
   12128:	bne	129a0 <__assert_fail@plt+0x1a2c>
   1212c:	ldr	r3, [sp, #68]	; 0x44
   12130:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12134:	mov	r9, #0
   12138:	clz	r1, r2
   1213c:	cmp	r3, #0
   12140:	mov	r0, r3
   12144:	movwne	r0, #1
   12148:	lsr	r1, r1, #5
   1214c:	orrs	r0, r0, r1
   12150:	moveq	r3, r2
   12154:	moveq	r2, r0
   12158:	cmp	r8, r2
   1215c:	str	r3, [sp, #68]	; 0x44
   12160:	str	r2, [fp, #-52]	; 0xffffffcc
   12164:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12168:	movcc	r0, #39	; 0x27
   1216c:	strbcc	r0, [r1, r8]
   12170:	add	r0, r8, #1
   12174:	cmp	r0, r2
   12178:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1217c:	movcc	r1, #92	; 0x5c
   12180:	strbcc	r1, [r3, r0]
   12184:	add	r0, r8, #2
   12188:	add	r8, r8, #3
   1218c:	cmp	r0, r2
   12190:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12194:	movcc	r1, #39	; 0x27
   12198:	strbcc	r1, [r2, r0]
   1219c:	mov	r0, #0
   121a0:	str	r0, [fp, #-48]	; 0xffffffd0
   121a4:	mov	sl, #1
   121a8:	b	11ffc <__assert_fail@plt+0x1088>
   121ac:	ldr	r0, [sp, #32]
   121b0:	cmp	r0, #1
   121b4:	bne	12360 <__assert_fail@plt+0x13ec>
   121b8:	str	lr, [sp, #80]	; 0x50
   121bc:	bl	10e90 <__ctype_b_loc@plt>
   121c0:	ldr	r0, [r0]
   121c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   121c8:	mov	r1, #1
   121cc:	add	r0, r0, r5, lsl #1
   121d0:	ldrb	r0, [r0, #1]
   121d4:	ubfx	sl, r0, #6, #1
   121d8:	ldr	r0, [sp, #48]	; 0x30
   121dc:	mov	r2, r1
   121e0:	cmp	r1, #1
   121e4:	orr	r0, sl, r0
   121e8:	bhi	12554 <__assert_fail@plt+0x15e0>
   121ec:	tst	r0, #1
   121f0:	beq	12554 <__assert_fail@plt+0x15e0>
   121f4:	ldr	lr, [sp, #80]	; 0x50
   121f8:	b	11ffc <__assert_fail@plt+0x1088>
   121fc:	cmp	r7, #0
   12200:	bne	1247c <__assert_fail@plt+0x1508>
   12204:	ldrb	r0, [ip, #1]
   12208:	cmp	r0, #0
   1220c:	bne	1247c <__assert_fail@plt+0x1508>
   12210:	mov	r1, #1
   12214:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12218:	cmp	r0, #2
   1221c:	bne	1222c <__assert_fail@plt+0x12b8>
   12220:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12224:	tst	r0, #1
   12228:	bne	129a0 <__assert_fail@plt+0x1a2c>
   1222c:	mov	sl, r1
   12230:	b	11ffc <__assert_fail@plt+0x1088>
   12234:	ldr	r1, [sp, #44]	; 0x2c
   12238:	mov	r9, #0
   1223c:	mov	r0, #92	; 0x5c
   12240:	cmp	r1, #0
   12244:	beq	12250 <__assert_fail@plt+0x12dc>
   12248:	mov	sl, #0
   1224c:	b	12768 <__assert_fail@plt+0x17f4>
   12250:	ldr	r1, [sp, #84]	; 0x54
   12254:	mov	sl, #0
   12258:	mov	r9, #0
   1225c:	tst	r1, #1
   12260:	bne	1229c <__assert_fail@plt+0x1328>
   12264:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12268:	cmp	r0, #0
   1226c:	mov	r0, r5
   12270:	beq	12294 <__assert_fail@plt+0x1320>
   12274:	ldr	r1, [fp, #16]
   12278:	ubfx	r0, r5, #5, #3
   1227c:	mov	r2, #1
   12280:	ldr	r0, [r1, r0, lsl #2]
   12284:	and	r1, r5, #31
   12288:	tst	r0, r2, lsl r1
   1228c:	mov	r0, r5
   12290:	bne	1229c <__assert_fail@plt+0x1328>
   12294:	cmp	r6, #0
   12298:	beq	12768 <__assert_fail@plt+0x17f4>
   1229c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   122a0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   122a4:	tst	r1, #1
   122a8:	bne	1297c <__assert_fail@plt+0x1a08>
   122ac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122b0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   122b4:	cmp	r1, #2
   122b8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   122bc:	movwne	r1, #1
   122c0:	orr	r1, r1, r5
   122c4:	tst	r1, #1
   122c8:	bne	1230c <__assert_fail@plt+0x1398>
   122cc:	cmp	r8, r6
   122d0:	mov	r5, #1
   122d4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   122d8:	movcc	r1, #39	; 0x27
   122dc:	strbcc	r1, [r2, r8]
   122e0:	add	r1, r8, #1
   122e4:	cmp	r1, r6
   122e8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   122ec:	movcc	r2, #36	; 0x24
   122f0:	strbcc	r2, [r3, r1]
   122f4:	add	r1, r8, #2
   122f8:	add	r8, r8, #3
   122fc:	cmp	r1, r6
   12300:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12304:	movcc	r2, #39	; 0x27
   12308:	strbcc	r2, [r3, r1]
   1230c:	cmp	r8, r6
   12310:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12314:	movcc	r1, #92	; 0x5c
   12318:	strbcc	r1, [r2, r8]
   1231c:	add	r8, r8, #1
   12320:	cmp	r8, r6
   12324:	and	r4, r4, sl
   12328:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1232c:	strbcc	r0, [r1, r8]
   12330:	add	r8, r8, #1
   12334:	add	r7, r7, #1
   12338:	b	11d1c <__assert_fail@plt+0xda8>
   1233c:	ldr	r0, [sp, #28]
   12340:	mov	sl, #0
   12344:	mov	r9, #0
   12348:	mov	r5, #0
   1234c:	cmp	r0, #0
   12350:	beq	12264 <__assert_fail@plt+0x12f0>
   12354:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12358:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1235c:	b	12334 <__assert_fail@plt+0x13c0>
   12360:	mov	r0, #0
   12364:	cmn	lr, #1
   12368:	str	r6, [sp, #76]	; 0x4c
   1236c:	str	r4, [sp, #20]
   12370:	str	r0, [fp, #-36]	; 0xffffffdc
   12374:	str	r0, [fp, #-40]	; 0xffffffd8
   12378:	bne	1238c <__assert_fail@plt+0x1418>
   1237c:	mov	r0, ip
   12380:	bl	10ea8 <strlen@plt>
   12384:	ldr	ip, [fp, #-84]	; 0xffffffac
   12388:	mov	lr, r0
   1238c:	add	r0, ip, r7
   12390:	mov	sl, #1
   12394:	mov	r6, #0
   12398:	sub	r4, fp, #40	; 0x28
   1239c:	str	lr, [sp, #80]	; 0x50
   123a0:	str	r0, [sp, #36]	; 0x24
   123a4:	str	r6, [sp, #40]	; 0x28
   123a8:	add	r6, r6, r7
   123ac:	sub	r0, fp, #44	; 0x2c
   123b0:	mov	r3, r4
   123b4:	add	r1, ip, r6
   123b8:	sub	r2, lr, r6
   123bc:	bl	14514 <__assert_fail@plt+0x35a0>
   123c0:	cmp	r0, #0
   123c4:	beq	128d0 <__assert_fail@plt+0x195c>
   123c8:	cmn	r0, #1
   123cc:	beq	12890 <__assert_fail@plt+0x191c>
   123d0:	ldr	lr, [sp, #80]	; 0x50
   123d4:	cmn	r0, #2
   123d8:	beq	12898 <__assert_fail@plt+0x1924>
   123dc:	ldr	r2, [sp, #56]	; 0x38
   123e0:	cmp	r0, #2
   123e4:	mov	r1, #0
   123e8:	movwcc	r1, #1
   123ec:	eor	r2, r2, #1
   123f0:	orrs	r1, r2, r1
   123f4:	bne	12440 <__assert_fail@plt+0x14cc>
   123f8:	ldr	r1, [sp, #40]	; 0x28
   123fc:	ldr	r2, [sp, #36]	; 0x24
   12400:	add	ip, r2, r1
   12404:	mov	r2, #1
   12408:	ldrb	r3, [ip, r2]
   1240c:	sub	r6, r3, #94	; 0x5e
   12410:	cmp	r6, #30
   12414:	bhi	12428 <__assert_fail@plt+0x14b4>
   12418:	mov	r4, #1
   1241c:	mov	r1, #1073741829	; 0x40000005
   12420:	tst	r1, r4, lsl r6
   12424:	bne	1299c <__assert_fail@plt+0x1a28>
   12428:	sub	r3, r3, #91	; 0x5b
   1242c:	cmp	r3, #2
   12430:	bcc	1299c <__assert_fail@plt+0x1a28>
   12434:	add	r2, r2, #1
   12438:	cmp	r2, r0
   1243c:	bcc	12408 <__assert_fail@plt+0x1494>
   12440:	ldr	r6, [sp, #40]	; 0x28
   12444:	add	r6, r0, r6
   12448:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1244c:	bl	10df4 <iswprint@plt>
   12450:	cmp	r0, #0
   12454:	sub	r4, fp, #40	; 0x28
   12458:	movwne	r0, #1
   1245c:	and	sl, sl, r0
   12460:	mov	r0, r4
   12464:	bl	10dac <mbsinit@plt>
   12468:	ldr	lr, [sp, #80]	; 0x50
   1246c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12470:	cmp	r0, #0
   12474:	beq	123a4 <__assert_fail@plt+0x1430>
   12478:	b	128d8 <__assert_fail@plt+0x1964>
   1247c:	mvn	lr, #0
   12480:	mov	r9, #0
   12484:	b	11ffc <__assert_fail@plt+0x1088>
   12488:	ldr	r0, [sp, #24]
   1248c:	cmp	r0, #0
   12490:	beq	12548 <__assert_fail@plt+0x15d4>
   12494:	add	r0, r7, #2
   12498:	cmp	r0, lr
   1249c:	bcs	12548 <__assert_fail@plt+0x15d4>
   124a0:	add	r1, ip, r7
   124a4:	ldrb	r1, [r1, #1]
   124a8:	cmp	r1, #63	; 0x3f
   124ac:	bne	12548 <__assert_fail@plt+0x15d4>
   124b0:	ldrb	r5, [ip, r0]
   124b4:	sub	r1, r5, #33	; 0x21
   124b8:	cmp	r1, #29
   124bc:	bhi	12548 <__assert_fail@plt+0x15d4>
   124c0:	movw	r3, #20929	; 0x51c1
   124c4:	mov	r2, #1
   124c8:	movt	r3, #14336	; 0x3800
   124cc:	tst	r3, r2, lsl r1
   124d0:	beq	12548 <__assert_fail@plt+0x15d4>
   124d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   124d8:	tst	r1, #1
   124dc:	bne	12ab0 <__assert_fail@plt+0x1b3c>
   124e0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   124e4:	mov	r7, r0
   124e8:	cmp	r8, r1
   124ec:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   124f0:	movcc	r1, #63	; 0x3f
   124f4:	strbcc	r1, [r2, r8]
   124f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   124fc:	add	r1, r8, #1
   12500:	cmp	r1, r2
   12504:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12508:	movcc	r2, #34	; 0x22
   1250c:	strbcc	r2, [r3, r1]
   12510:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12514:	add	r1, r8, #2
   12518:	cmp	r1, r2
   1251c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12520:	movcc	r2, #34	; 0x22
   12524:	strbcc	r2, [r3, r1]
   12528:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1252c:	add	r1, r8, #3
   12530:	add	r8, r8, #4
   12534:	cmp	r1, r2
   12538:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1253c:	movcc	r2, #63	; 0x3f
   12540:	strbcc	r2, [r3, r1]
   12544:	b	1254c <__assert_fail@plt+0x15d8>
   12548:	mov	r5, #63	; 0x3f
   1254c:	mov	sl, #0
   12550:	b	11ffc <__assert_fail@plt+0x1088>
   12554:	str	r0, [sp, #40]	; 0x28
   12558:	add	r0, r2, r7
   1255c:	str	r6, [sp, #76]	; 0x4c
   12560:	add	r1, r7, #1
   12564:	ldr	lr, [sp, #80]	; 0x50
   12568:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1256c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12570:	mov	r3, #0
   12574:	str	r0, [sp, #36]	; 0x24
   12578:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1257c:	b	12610 <__assert_fail@plt+0x169c>
   12580:	str	r0, [sp, #76]	; 0x4c
   12584:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12588:	cmp	r9, #0
   1258c:	movwne	r9, #1
   12590:	mvn	r7, r0
   12594:	orr	r7, r7, r9
   12598:	tst	r7, #1
   1259c:	bne	125ec <__assert_fail@plt+0x1678>
   125a0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   125a4:	cmp	r8, r6
   125a8:	bcs	125c0 <__assert_fail@plt+0x164c>
   125ac:	ldr	r7, [fp, #-56]	; 0xffffffc8
   125b0:	mov	r2, r4
   125b4:	mov	r4, #39	; 0x27
   125b8:	strb	r4, [r7, r8]
   125bc:	mov	r4, r2
   125c0:	add	r7, r8, #1
   125c4:	cmp	r7, r6
   125c8:	bcs	125e0 <__assert_fail@plt+0x166c>
   125cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   125d0:	mov	r2, r4
   125d4:	mov	r4, #39	; 0x27
   125d8:	strb	r4, [r0, r7]
   125dc:	mov	r4, r2
   125e0:	add	r8, r8, #2
   125e4:	mov	r0, #0
   125e8:	b	125f4 <__assert_fail@plt+0x1680>
   125ec:	ldr	r6, [fp, #-52]	; 0xffffffcc
   125f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125f4:	cmp	r8, r6
   125f8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   125fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12600:	strbcc	r5, [r2, r8]
   12604:	add	r8, r8, #1
   12608:	ldrb	r5, [ip, r1]
   1260c:	add	r1, r1, #1
   12610:	ldr	r2, [sp, #40]	; 0x28
   12614:	tst	r2, #1
   12618:	beq	12654 <__assert_fail@plt+0x16e0>
   1261c:	ldr	r2, [sp, #76]	; 0x4c
   12620:	str	r0, [fp, #-48]	; 0xffffffd0
   12624:	tst	r2, #1
   12628:	beq	1264c <__assert_fail@plt+0x16d8>
   1262c:	cmp	r8, r6
   12630:	bcs	12648 <__assert_fail@plt+0x16d4>
   12634:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12638:	mov	r2, r4
   1263c:	mov	r4, #92	; 0x5c
   12640:	strb	r4, [r6, r8]
   12644:	mov	r4, r2
   12648:	add	r8, r8, #1
   1264c:	mov	r0, #0
   12650:	b	12748 <__assert_fail@plt+0x17d4>
   12654:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12658:	tst	r2, #1
   1265c:	bne	129a8 <__assert_fail@plt+0x1a34>
   12660:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12664:	cmp	r7, #2
   12668:	movwne	r3, #1
   1266c:	orr	r3, r3, r0
   12670:	tst	r3, #1
   12674:	bne	126d0 <__assert_fail@plt+0x175c>
   12678:	cmp	r8, r6
   1267c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12680:	movcc	r3, #39	; 0x27
   12684:	strbcc	r3, [r2, r8]
   12688:	add	r3, r8, #1
   1268c:	cmp	r3, r6
   12690:	bcs	126a8 <__assert_fail@plt+0x1734>
   12694:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12698:	mov	r7, r4
   1269c:	mov	r4, #36	; 0x24
   126a0:	strb	r4, [r2, r3]
   126a4:	mov	r4, r7
   126a8:	add	r3, r8, #2
   126ac:	cmp	r3, r6
   126b0:	bcs	126c8 <__assert_fail@plt+0x1754>
   126b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126b8:	mov	r7, r4
   126bc:	mov	r4, #39	; 0x27
   126c0:	strb	r4, [r2, r3]
   126c4:	mov	r4, r7
   126c8:	add	r8, r8, #3
   126cc:	mov	r0, #1
   126d0:	cmp	r8, r6
   126d4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   126d8:	movcc	r3, #92	; 0x5c
   126dc:	strbcc	r3, [r2, r8]
   126e0:	add	r3, r8, #1
   126e4:	cmp	r3, r6
   126e8:	bcs	12708 <__assert_fail@plt+0x1794>
   126ec:	mov	r2, r4
   126f0:	and	r7, r5, #192	; 0xc0
   126f4:	mov	r4, #48	; 0x30
   126f8:	orr	r7, r4, r7, lsr #6
   126fc:	mov	r4, r2
   12700:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12704:	strb	r7, [r2, r3]
   12708:	add	r3, r8, #2
   1270c:	cmp	r3, r6
   12710:	bcs	12730 <__assert_fail@plt+0x17bc>
   12714:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12718:	mov	r6, r4
   1271c:	lsr	r7, r5, #3
   12720:	mov	r4, #6
   12724:	bfi	r7, r4, #3, #29
   12728:	mov	r4, r6
   1272c:	strb	r7, [r2, r3]
   12730:	str	r0, [fp, #-48]	; 0xffffffd0
   12734:	ldr	r0, [sp, #76]	; 0x4c
   12738:	mov	r3, #6
   1273c:	add	r8, r8, #3
   12740:	bfi	r5, r3, #3, #29
   12744:	mov	r3, #1
   12748:	ldr	r2, [sp, #36]	; 0x24
   1274c:	and	r9, r3, #1
   12750:	cmp	r2, r1
   12754:	bhi	12580 <__assert_fail@plt+0x160c>
   12758:	cmp	r9, #0
   1275c:	sub	r7, r1, #1
   12760:	mov	r0, r5
   12764:	movwne	r9, #1
   12768:	cmp	r9, #0
   1276c:	bne	127b0 <__assert_fail@plt+0x183c>
   12770:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12774:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12778:	tst	r5, #1
   1277c:	beq	12320 <__assert_fail@plt+0x13ac>
   12780:	cmp	r8, r6
   12784:	mov	r5, #0
   12788:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1278c:	movcc	r1, #39	; 0x27
   12790:	strbcc	r1, [r2, r8]
   12794:	add	r1, r8, #1
   12798:	add	r8, r8, #2
   1279c:	cmp	r1, r6
   127a0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   127a4:	movcc	r2, #39	; 0x27
   127a8:	strbcc	r2, [r3, r1]
   127ac:	b	12320 <__assert_fail@plt+0x13ac>
   127b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   127b4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127b8:	b	12320 <__assert_fail@plt+0x13ac>
   127bc:	cmp	r8, r1
   127c0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   127c4:	movcc	r0, #39	; 0x27
   127c8:	strbcc	r0, [r2, r8]
   127cc:	add	r0, r8, #1
   127d0:	cmp	r0, r1
   127d4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   127d8:	movcc	r2, #36	; 0x24
   127dc:	strbcc	r2, [r3, r0]
   127e0:	add	r0, r8, #2
   127e4:	cmp	r0, r1
   127e8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   127ec:	movcc	r2, #39	; 0x27
   127f0:	strbcc	r2, [r3, r0]
   127f4:	add	r0, r8, #3
   127f8:	mov	r3, #1
   127fc:	cmp	r0, r1
   12800:	add	r8, r0, #1
   12804:	str	r3, [fp, #-48]	; 0xffffffd0
   12808:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1280c:	movcc	r1, #92	; 0x5c
   12810:	strbcc	r1, [r2, r0]
   12814:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12818:	cmp	r1, #2
   1281c:	beq	12880 <__assert_fail@plt+0x190c>
   12820:	add	r1, r7, #1
   12824:	mov	sl, #0
   12828:	mov	r9, #1
   1282c:	mov	r5, #48	; 0x30
   12830:	cmp	r1, lr
   12834:	bcs	11ffc <__assert_fail@plt+0x1088>
   12838:	ldrb	r1, [ip, r1]
   1283c:	sub	r1, r1, #48	; 0x30
   12840:	uxtb	r1, r1
   12844:	cmp	r1, #9
   12848:	bhi	11ffc <__assert_fail@plt+0x1088>
   1284c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12850:	cmp	r8, r1
   12854:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12858:	movcc	r1, #48	; 0x30
   1285c:	strbcc	r1, [r2, r8]
   12860:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12864:	add	r1, r0, #2
   12868:	add	r8, r0, #3
   1286c:	cmp	r1, r2
   12870:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12874:	movcc	r2, #48	; 0x30
   12878:	strbcc	r2, [r3, r1]
   1287c:	b	11ffc <__assert_fail@plt+0x1088>
   12880:	mov	r0, #48	; 0x30
   12884:	mov	r9, #1
   12888:	mov	sl, #0
   1288c:	b	12294 <__assert_fail@plt+0x1320>
   12890:	mov	sl, #0
   12894:	b	128d0 <__assert_fail@plt+0x195c>
   12898:	mov	sl, #0
   1289c:	cmp	lr, r6
   128a0:	bls	128d0 <__assert_fail@plt+0x195c>
   128a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   128a8:	ldr	r6, [sp, #40]	; 0x28
   128ac:	ldr	r0, [sp, #36]	; 0x24
   128b0:	ldrb	r0, [r0, r6]
   128b4:	cmp	r0, #0
   128b8:	beq	128d8 <__assert_fail@plt+0x1964>
   128bc:	add	r6, r6, #1
   128c0:	add	r0, r7, r6
   128c4:	cmp	r0, lr
   128c8:	bcc	128ac <__assert_fail@plt+0x1938>
   128cc:	b	128d8 <__assert_fail@plt+0x1964>
   128d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   128d4:	ldr	r6, [sp, #40]	; 0x28
   128d8:	mov	r1, r6
   128dc:	ldr	r4, [sp, #20]
   128e0:	ldr	r6, [sp, #76]	; 0x4c
   128e4:	b	121d8 <__assert_fail@plt+0x1264>
   128e8:	mov	lr, r7
   128ec:	b	128f4 <__assert_fail@plt+0x1980>
   128f0:	mvn	lr, #0
   128f4:	ldr	r9, [fp, #-64]	; 0xffffffc0
   128f8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   128fc:	eor	r0, r9, #2
   12900:	orr	r0, r0, r8
   12904:	clz	r0, r0
   12908:	lsr	r0, r0, #5
   1290c:	tst	r1, r0
   12910:	bne	12a0c <__assert_fail@plt+0x1a98>
   12914:	mov	r0, r1
   12918:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1291c:	cmp	r9, #2
   12920:	movwne	r1, #1
   12924:	orr	r0, r0, r1
   12928:	tst	r0, #1
   1292c:	bne	12a4c <__assert_fail@plt+0x1ad8>
   12930:	ldr	r0, [sp, #52]	; 0x34
   12934:	ldr	r1, [sp, #68]	; 0x44
   12938:	str	lr, [sp, #80]	; 0x50
   1293c:	eor	r0, r0, #1
   12940:	tst	r0, #1
   12944:	bne	12a4c <__assert_fail@plt+0x1ad8>
   12948:	tst	r4, #1
   1294c:	bne	12a14 <__assert_fail@plt+0x1aa0>
   12950:	mov	r7, #0
   12954:	cmp	r1, #0
   12958:	beq	12a44 <__assert_fail@plt+0x1ad0>
   1295c:	ldr	r0, [sp, #84]	; 0x54
   12960:	mov	r3, #0
   12964:	cmp	r6, #0
   12968:	mov	r2, #0
   1296c:	mov	r4, r1
   12970:	str	r3, [fp, #-72]	; 0xffffffb8
   12974:	beq	11ab0 <__assert_fail@plt+0xb3c>
   12978:	b	12a4c <__assert_fail@plt+0x1ad8>
   1297c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12980:	b	129a8 <__assert_fail@plt+0x1a34>
   12984:	ldr	ip, [fp, #-84]	; 0xffffffac
   12988:	mov	r2, #1
   1298c:	mov	lr, r4
   12990:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12994:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12998:	b	129ac <__assert_fail@plt+0x1a38>
   1299c:	ldr	ip, [fp, #-84]	; 0xffffffac
   129a0:	mov	r7, #2
   129a4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129a8:	ldr	r2, [sp, #84]	; 0x54
   129ac:	mov	r0, #0
   129b0:	ldr	r1, [fp, #12]
   129b4:	tst	r2, #1
   129b8:	mov	r2, r7
   129bc:	mov	r3, lr
   129c0:	str	r0, [sp, #8]
   129c4:	ldr	r0, [sp, #64]	; 0x40
   129c8:	movwne	r2, #4
   129cc:	cmp	r7, #2
   129d0:	movne	r2, r7
   129d4:	str	r2, [sp]
   129d8:	mov	r2, ip
   129dc:	bic	r1, r1, #2
   129e0:	str	r0, [sp, #12]
   129e4:	ldr	r0, [sp, #72]	; 0x48
   129e8:	str	r1, [sp, #4]
   129ec:	mov	r1, r6
   129f0:	str	r0, [sp, #16]
   129f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   129f8:	bl	11a38 <__assert_fail@plt+0xac4>
   129fc:	mov	r8, r0
   12a00:	mov	r0, r8
   12a04:	sub	sp, fp, #28
   12a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a0c:	mov	r7, #2
   12a10:	b	129a8 <__assert_fail@plt+0x1a34>
   12a14:	mov	r0, #5
   12a18:	ldr	r2, [fp, #-84]	; 0xffffffac
   12a1c:	ldr	r3, [sp, #80]	; 0x50
   12a20:	str	r0, [sp]
   12a24:	ldr	r0, [fp, #12]
   12a28:	str	r0, [sp, #4]
   12a2c:	ldr	r0, [fp, #16]
   12a30:	str	r0, [sp, #8]
   12a34:	ldr	r0, [sp, #64]	; 0x40
   12a38:	str	r0, [sp, #12]
   12a3c:	ldr	r0, [sp, #72]	; 0x48
   12a40:	b	129f0 <__assert_fail@plt+0x1a7c>
   12a44:	mov	r0, #0
   12a48:	str	r0, [fp, #-72]	; 0xffffffb8
   12a4c:	ldr	r1, [sp, #92]	; 0x5c
   12a50:	cmp	r1, #0
   12a54:	beq	12a94 <__assert_fail@plt+0x1b20>
   12a58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a5c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12a60:	tst	r0, #1
   12a64:	bne	12a98 <__assert_fail@plt+0x1b24>
   12a68:	ldrb	r0, [r1]
   12a6c:	cmp	r0, #0
   12a70:	beq	12a98 <__assert_fail@plt+0x1b24>
   12a74:	add	r1, r1, #1
   12a78:	cmp	r8, r6
   12a7c:	strbcc	r0, [r2, r8]
   12a80:	add	r8, r8, #1
   12a84:	ldrb	r0, [r1], #1
   12a88:	cmp	r0, #0
   12a8c:	bne	12a78 <__assert_fail@plt+0x1b04>
   12a90:	b	12a98 <__assert_fail@plt+0x1b24>
   12a94:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12a98:	cmp	r8, r6
   12a9c:	movcc	r0, #0
   12aa0:	strbcc	r0, [r2, r8]
   12aa4:	b	12a00 <__assert_fail@plt+0x1a8c>
   12aa8:	mov	r2, #1
   12aac:	b	12990 <__assert_fail@plt+0x1a1c>
   12ab0:	mov	r7, #5
   12ab4:	b	129a4 <__assert_fail@plt+0x1a30>
   12ab8:	bl	10f68 <abort@plt>
   12abc:	mov	r3, r2
   12ac0:	mov	r2, #0
   12ac4:	b	12ac8 <__assert_fail@plt+0x1b54>
   12ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12acc:	add	fp, sp, #28
   12ad0:	sub	sp, sp, #36	; 0x24
   12ad4:	movw	r8, #24912	; 0x6150
   12ad8:	cmp	r3, #0
   12adc:	mov	r4, r2
   12ae0:	str	r2, [sp, #24]
   12ae4:	mov	r5, r1
   12ae8:	mov	r6, r0
   12aec:	str	r0, [sp, #20]
   12af0:	movt	r8, #2
   12af4:	movne	r8, r3
   12af8:	bl	10ec0 <__errno_location@plt>
   12afc:	str	r0, [sp, #28]
   12b00:	cmp	r4, #0
   12b04:	add	sl, r8, #8
   12b08:	ldm	r8, {r3, r9}
   12b0c:	ldr	r7, [r0]
   12b10:	ldr	r1, [r8, #40]	; 0x28
   12b14:	ldr	r2, [r8, #44]	; 0x2c
   12b18:	mov	r0, #0
   12b1c:	orreq	r9, r9, #1
   12b20:	str	r7, [sp, #32]
   12b24:	mov	r7, r5
   12b28:	stm	sp, {r3, r9, sl}
   12b2c:	str	r1, [sp, #12]
   12b30:	str	r2, [sp, #16]
   12b34:	mov	r1, #0
   12b38:	mov	r2, r6
   12b3c:	mov	r3, r5
   12b40:	bl	11a38 <__assert_fail@plt+0xac4>
   12b44:	add	r4, r0, #1
   12b48:	mov	r5, r0
   12b4c:	mov	r0, r4
   12b50:	bl	1382c <__assert_fail@plt+0x28b8>
   12b54:	mov	r6, r0
   12b58:	ldr	r0, [r8]
   12b5c:	ldr	r2, [r8, #44]	; 0x2c
   12b60:	ldr	r1, [r8, #40]	; 0x28
   12b64:	mov	r3, r7
   12b68:	stm	sp, {r0, r9, sl}
   12b6c:	str	r2, [sp, #16]
   12b70:	str	r1, [sp, #12]
   12b74:	mov	r0, r6
   12b78:	mov	r1, r4
   12b7c:	ldr	r2, [sp, #20]
   12b80:	bl	11a38 <__assert_fail@plt+0xac4>
   12b84:	ldr	r0, [sp, #24]
   12b88:	ldr	r1, [sp, #32]
   12b8c:	ldr	r2, [sp, #28]
   12b90:	cmp	r0, #0
   12b94:	str	r1, [r2]
   12b98:	strne	r5, [r0]
   12b9c:	mov	r0, r6
   12ba0:	sub	sp, fp, #28
   12ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bac:	add	fp, sp, #24
   12bb0:	movw	r5, #24804	; 0x60e4
   12bb4:	movw	r8, #24800	; 0x60e0
   12bb8:	movt	r5, #2
   12bbc:	movt	r8, #2
   12bc0:	ldr	r0, [r5]
   12bc4:	ldr	r4, [r8]
   12bc8:	cmp	r0, #2
   12bcc:	blt	12bf8 <__assert_fail@plt+0x1c84>
   12bd0:	add	r7, r4, #12
   12bd4:	mov	r6, #0
   12bd8:	ldr	r0, [r7, r6, lsl #3]
   12bdc:	bl	14410 <__assert_fail@plt+0x349c>
   12be0:	ldr	r1, [r5]
   12be4:	add	r2, r6, #2
   12be8:	add	r0, r6, #1
   12bec:	mov	r6, r0
   12bf0:	cmp	r2, r1
   12bf4:	blt	12bd8 <__assert_fail@plt+0x1c64>
   12bf8:	ldr	r0, [r4, #4]
   12bfc:	movw	r7, #24960	; 0x6180
   12c00:	movt	r7, #2
   12c04:	cmp	r0, r7
   12c08:	beq	12c20 <__assert_fail@plt+0x1cac>
   12c0c:	bl	14410 <__assert_fail@plt+0x349c>
   12c10:	movw	r0, #24808	; 0x60e8
   12c14:	mov	r6, #256	; 0x100
   12c18:	movt	r0, #2
   12c1c:	strd	r6, [r0]
   12c20:	movw	r6, #24808	; 0x60e8
   12c24:	movt	r6, #2
   12c28:	cmp	r4, r6
   12c2c:	beq	12c3c <__assert_fail@plt+0x1cc8>
   12c30:	mov	r0, r4
   12c34:	bl	14410 <__assert_fail@plt+0x349c>
   12c38:	str	r6, [r8]
   12c3c:	mov	r0, #1
   12c40:	str	r0, [r5]
   12c44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c48:	movw	r3, #24912	; 0x6150
   12c4c:	mvn	r2, #0
   12c50:	movt	r3, #2
   12c54:	b	12c58 <__assert_fail@plt+0x1ce4>
   12c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c5c:	add	fp, sp, #28
   12c60:	sub	sp, sp, #44	; 0x2c
   12c64:	mov	r7, r3
   12c68:	str	r2, [sp, #36]	; 0x24
   12c6c:	str	r1, [sp, #32]
   12c70:	mov	r5, r0
   12c74:	bl	10ec0 <__errno_location@plt>
   12c78:	cmp	r5, #0
   12c7c:	blt	12de8 <__assert_fail@plt+0x1e74>
   12c80:	cmn	r5, #-2147483647	; 0x80000001
   12c84:	beq	12de8 <__assert_fail@plt+0x1e74>
   12c88:	movw	r8, #24804	; 0x60e4
   12c8c:	movw	r4, #24800	; 0x60e0
   12c90:	str	r0, [sp, #28]
   12c94:	ldr	r0, [r0]
   12c98:	movt	r8, #2
   12c9c:	movt	r4, #2
   12ca0:	ldr	r1, [r8]
   12ca4:	ldr	r6, [r4]
   12ca8:	str	r0, [sp, #24]
   12cac:	cmp	r1, r5
   12cb0:	ble	12cbc <__assert_fail@plt+0x1d48>
   12cb4:	mov	sl, r6
   12cb8:	b	12d24 <__assert_fail@plt+0x1db0>
   12cbc:	movw	r9, #24808	; 0x60e8
   12cc0:	mov	r0, #8
   12cc4:	add	r2, r5, #1
   12cc8:	str	r1, [fp, #-32]	; 0xffffffe0
   12ccc:	mvn	r3, #-2147483648	; 0x80000000
   12cd0:	movt	r9, #2
   12cd4:	str	r0, [sp]
   12cd8:	sub	r2, r2, r1
   12cdc:	sub	r1, fp, #32
   12ce0:	subs	r0, r6, r9
   12ce4:	movne	r0, r6
   12ce8:	bl	1395c <__assert_fail@plt+0x29e8>
   12cec:	cmp	r6, r9
   12cf0:	mov	sl, r0
   12cf4:	str	r0, [r4]
   12cf8:	ldrdeq	r0, [r9]
   12cfc:	stmeq	sl, {r0, r1}
   12d00:	ldr	r1, [r8]
   12d04:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d08:	add	r0, sl, r1, lsl #3
   12d0c:	sub	r1, r2, r1
   12d10:	lsl	r2, r1, #3
   12d14:	mov	r1, #0
   12d18:	bl	10ed8 <memset@plt>
   12d1c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d20:	str	r0, [r8]
   12d24:	mov	r9, sl
   12d28:	ldr	r6, [r9, r5, lsl #3]!
   12d2c:	ldr	r4, [r9, #4]!
   12d30:	ldm	r7, {r0, r1}
   12d34:	ldr	r2, [r7, #40]	; 0x28
   12d38:	ldr	r3, [r7, #44]	; 0x2c
   12d3c:	orr	r8, r1, #1
   12d40:	add	r1, r7, #8
   12d44:	stm	sp, {r0, r8}
   12d48:	add	r0, sp, #8
   12d4c:	str	r1, [sp, #20]
   12d50:	stm	r0, {r1, r2, r3}
   12d54:	mov	r0, r4
   12d58:	mov	r1, r6
   12d5c:	ldr	r2, [sp, #32]
   12d60:	ldr	r3, [sp, #36]	; 0x24
   12d64:	bl	11a38 <__assert_fail@plt+0xac4>
   12d68:	cmp	r6, r0
   12d6c:	bhi	12dd0 <__assert_fail@plt+0x1e5c>
   12d70:	add	r6, r0, #1
   12d74:	movw	r0, #24960	; 0x6180
   12d78:	movt	r0, #2
   12d7c:	str	r6, [sl, r5, lsl #3]
   12d80:	cmp	r4, r0
   12d84:	beq	12d90 <__assert_fail@plt+0x1e1c>
   12d88:	mov	r0, r4
   12d8c:	bl	14410 <__assert_fail@plt+0x349c>
   12d90:	mov	r0, r6
   12d94:	bl	1382c <__assert_fail@plt+0x28b8>
   12d98:	str	r0, [r9]
   12d9c:	mov	r4, r0
   12da0:	add	r3, sp, #8
   12da4:	ldr	r0, [r7]
   12da8:	ldr	r1, [r7, #40]	; 0x28
   12dac:	ldr	r2, [r7, #44]	; 0x2c
   12db0:	stm	sp, {r0, r8}
   12db4:	ldr	r0, [sp, #20]
   12db8:	stm	r3, {r0, r1, r2}
   12dbc:	mov	r0, r4
   12dc0:	mov	r1, r6
   12dc4:	ldr	r2, [sp, #32]
   12dc8:	ldr	r3, [sp, #36]	; 0x24
   12dcc:	bl	11a38 <__assert_fail@plt+0xac4>
   12dd0:	ldr	r0, [sp, #28]
   12dd4:	ldr	r1, [sp, #24]
   12dd8:	str	r1, [r0]
   12ddc:	mov	r0, r4
   12de0:	sub	sp, fp, #28
   12de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de8:	bl	10f68 <abort@plt>
   12dec:	movw	r3, #24912	; 0x6150
   12df0:	movt	r3, #2
   12df4:	b	12c58 <__assert_fail@plt+0x1ce4>
   12df8:	movw	r3, #24912	; 0x6150
   12dfc:	mov	r1, r0
   12e00:	mov	r0, #0
   12e04:	mvn	r2, #0
   12e08:	movt	r3, #2
   12e0c:	b	12c58 <__assert_fail@plt+0x1ce4>
   12e10:	movw	r3, #24912	; 0x6150
   12e14:	mov	r2, r1
   12e18:	mov	r1, r0
   12e1c:	mov	r0, #0
   12e20:	movt	r3, #2
   12e24:	b	12c58 <__assert_fail@plt+0x1ce4>
   12e28:	push	{fp, lr}
   12e2c:	mov	fp, sp
   12e30:	sub	sp, sp, #48	; 0x30
   12e34:	vmov.i32	q8, #0	; 0x00000000
   12e38:	mov	ip, #32
   12e3c:	mov	r3, sp
   12e40:	mov	lr, r2
   12e44:	cmp	r1, #10
   12e48:	add	r2, r3, #16
   12e4c:	vst1.64	{d16-d17}, [r3], ip
   12e50:	vst1.64	{d16-d17}, [r3]
   12e54:	vst1.64	{d16-d17}, [r2]
   12e58:	beq	12e78 <__assert_fail@plt+0x1f04>
   12e5c:	str	r1, [sp]
   12e60:	mov	r3, sp
   12e64:	mov	r1, lr
   12e68:	mvn	r2, #0
   12e6c:	bl	12c58 <__assert_fail@plt+0x1ce4>
   12e70:	mov	sp, fp
   12e74:	pop	{fp, pc}
   12e78:	bl	10f68 <abort@plt>
   12e7c:	push	{r4, sl, fp, lr}
   12e80:	add	fp, sp, #8
   12e84:	sub	sp, sp, #48	; 0x30
   12e88:	mov	ip, r3
   12e8c:	mov	r3, sp
   12e90:	vmov.i32	q8, #0	; 0x00000000
   12e94:	mov	lr, #32
   12e98:	cmp	r1, #10
   12e9c:	add	r4, r3, #16
   12ea0:	vst1.64	{d16-d17}, [r3], lr
   12ea4:	vst1.64	{d16-d17}, [r3]
   12ea8:	vst1.64	{d16-d17}, [r4]
   12eac:	beq	12ecc <__assert_fail@plt+0x1f58>
   12eb0:	str	r1, [sp]
   12eb4:	mov	r1, r2
   12eb8:	mov	r3, sp
   12ebc:	mov	r2, ip
   12ec0:	bl	12c58 <__assert_fail@plt+0x1ce4>
   12ec4:	sub	sp, fp, #8
   12ec8:	pop	{r4, sl, fp, pc}
   12ecc:	bl	10f68 <abort@plt>
   12ed0:	mov	r2, r1
   12ed4:	mov	r1, r0
   12ed8:	mov	r0, #0
   12edc:	b	12e28 <__assert_fail@plt+0x1eb4>
   12ee0:	mov	r3, r2
   12ee4:	mov	r2, r1
   12ee8:	mov	r1, r0
   12eec:	mov	r0, #0
   12ef0:	b	12e7c <__assert_fail@plt+0x1f08>
   12ef4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ef8:	add	fp, sp, #24
   12efc:	sub	sp, sp, #48	; 0x30
   12f00:	movw	r8, #24912	; 0x6150
   12f04:	mov	lr, r0
   12f08:	mov	r3, sp
   12f0c:	mov	ip, r1
   12f10:	movt	r8, #2
   12f14:	mov	r1, r3
   12f18:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12f1c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12f20:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12f24:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12f28:	ubfx	r0, r2, #5, #3
   12f2c:	and	r2, r2, #31
   12f30:	mov	r4, #1
   12f34:	add	r0, r3, r0, lsl #2
   12f38:	ldr	r1, [r0, #8]
   12f3c:	bic	r4, r4, r1, lsr r2
   12f40:	eor	r1, r1, r4, lsl r2
   12f44:	mov	r2, ip
   12f48:	str	r1, [r0, #8]
   12f4c:	mov	r0, #0
   12f50:	mov	r1, lr
   12f54:	bl	12c58 <__assert_fail@plt+0x1ce4>
   12f58:	sub	sp, fp, #24
   12f5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f64:	add	fp, sp, #24
   12f68:	sub	sp, sp, #48	; 0x30
   12f6c:	movw	lr, #24912	; 0x6150
   12f70:	mov	ip, r0
   12f74:	mov	r3, sp
   12f78:	movt	lr, #2
   12f7c:	mov	r2, r3
   12f80:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12f84:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12f88:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12f8c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12f90:	ubfx	r0, r1, #5, #3
   12f94:	and	r1, r1, #31
   12f98:	mov	r7, #1
   12f9c:	add	r0, r3, r0, lsl #2
   12fa0:	ldr	r2, [r0, #8]
   12fa4:	bic	r7, r7, r2, lsr r1
   12fa8:	eor	r1, r2, r7, lsl r1
   12fac:	mvn	r2, #0
   12fb0:	str	r1, [r0, #8]
   12fb4:	mov	r0, #0
   12fb8:	mov	r1, ip
   12fbc:	bl	12c58 <__assert_fail@plt+0x1ce4>
   12fc0:	sub	sp, fp, #24
   12fc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fc8:	push	{r4, r5, r6, r7, fp, lr}
   12fcc:	add	fp, sp, #16
   12fd0:	sub	sp, sp, #48	; 0x30
   12fd4:	movw	lr, #24912	; 0x6150
   12fd8:	mov	ip, r0
   12fdc:	mov	r3, sp
   12fe0:	movt	lr, #2
   12fe4:	mov	r2, r3
   12fe8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   12fec:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   12ff0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   12ff4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   12ff8:	mov	r1, ip
   12ffc:	mvn	r2, #0
   13000:	ldr	r0, [sp, #12]
   13004:	orr	r0, r0, #67108864	; 0x4000000
   13008:	str	r0, [sp, #12]
   1300c:	mov	r0, #0
   13010:	bl	12c58 <__assert_fail@plt+0x1ce4>
   13014:	sub	sp, fp, #16
   13018:	pop	{r4, r5, r6, r7, fp, pc}
   1301c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13020:	add	fp, sp, #24
   13024:	sub	sp, sp, #48	; 0x30
   13028:	movw	r8, #24912	; 0x6150
   1302c:	mov	ip, r1
   13030:	mov	lr, r0
   13034:	mov	r3, sp
   13038:	movt	r8, #2
   1303c:	mov	r2, r3
   13040:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13044:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13048:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1304c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13050:	mov	r1, lr
   13054:	mov	r2, ip
   13058:	ldr	r0, [sp, #12]
   1305c:	orr	r0, r0, #67108864	; 0x4000000
   13060:	str	r0, [sp, #12]
   13064:	mov	r0, #0
   13068:	bl	12c58 <__assert_fail@plt+0x1ce4>
   1306c:	sub	sp, fp, #24
   13070:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13074:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13078:	add	fp, sp, #24
   1307c:	sub	sp, sp, #96	; 0x60
   13080:	mov	lr, sp
   13084:	vmov.i32	q8, #0	; 0x00000000
   13088:	mov	ip, r2
   1308c:	cmp	r1, #10
   13090:	add	r3, lr, #16
   13094:	mov	r2, lr
   13098:	vst1.64	{d16-d17}, [r3]
   1309c:	mov	r3, #28
   130a0:	vst1.64	{d16-d17}, [r2], r3
   130a4:	vst1.32	{d16-d17}, [r2]
   130a8:	beq	130e8 <__assert_fail@plt+0x2174>
   130ac:	str	r1, [sp, #48]	; 0x30
   130b0:	add	r3, sp, #48	; 0x30
   130b4:	ldm	lr!, {r2, r4, r5, r6, r7}
   130b8:	add	r1, r3, #4
   130bc:	stmia	r1!, {r2, r4, r5, r6, r7}
   130c0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   130c4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   130c8:	mvn	r2, #0
   130cc:	ldr	r1, [sp, #60]	; 0x3c
   130d0:	orr	r1, r1, #67108864	; 0x4000000
   130d4:	str	r1, [sp, #60]	; 0x3c
   130d8:	mov	r1, ip
   130dc:	bl	12c58 <__assert_fail@plt+0x1ce4>
   130e0:	sub	sp, fp, #24
   130e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130e8:	bl	10f68 <abort@plt>
   130ec:	push	{fp, lr}
   130f0:	mov	fp, sp
   130f4:	sub	sp, sp, #8
   130f8:	mvn	ip, #0
   130fc:	str	ip, [sp]
   13100:	bl	1310c <__assert_fail@plt+0x2198>
   13104:	mov	sp, fp
   13108:	pop	{fp, pc}
   1310c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13110:	add	fp, sp, #24
   13114:	sub	sp, sp, #48	; 0x30
   13118:	movw	ip, #24912	; 0x6150
   1311c:	mov	lr, r3
   13120:	mov	r3, sp
   13124:	cmp	r1, #0
   13128:	movt	ip, #2
   1312c:	cmpne	r2, #0
   13130:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13134:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13138:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1313c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13140:	mov	r3, #10
   13144:	str	r3, [sp]
   13148:	bne	13150 <__assert_fail@plt+0x21dc>
   1314c:	bl	10f68 <abort@plt>
   13150:	ldr	ip, [fp, #8]
   13154:	str	r2, [sp, #44]	; 0x2c
   13158:	str	r1, [sp, #40]	; 0x28
   1315c:	mov	r3, sp
   13160:	mov	r1, lr
   13164:	mov	r2, ip
   13168:	bl	12c58 <__assert_fail@plt+0x1ce4>
   1316c:	sub	sp, fp, #24
   13170:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13174:	push	{fp, lr}
   13178:	mov	fp, sp
   1317c:	sub	sp, sp, #8
   13180:	mov	r3, r2
   13184:	mov	r2, r1
   13188:	mov	r1, r0
   1318c:	mvn	r0, #0
   13190:	str	r0, [sp]
   13194:	mov	r0, #0
   13198:	bl	1310c <__assert_fail@plt+0x2198>
   1319c:	mov	sp, fp
   131a0:	pop	{fp, pc}
   131a4:	push	{fp, lr}
   131a8:	mov	fp, sp
   131ac:	sub	sp, sp, #8
   131b0:	mov	ip, r2
   131b4:	mov	r2, r1
   131b8:	mov	r1, r0
   131bc:	str	r3, [sp]
   131c0:	mov	r0, #0
   131c4:	mov	r3, ip
   131c8:	bl	1310c <__assert_fail@plt+0x2198>
   131cc:	mov	sp, fp
   131d0:	pop	{fp, pc}
   131d4:	movw	r3, #24816	; 0x60f0
   131d8:	movt	r3, #2
   131dc:	b	12c58 <__assert_fail@plt+0x1ce4>
   131e0:	movw	r3, #24816	; 0x60f0
   131e4:	mov	r2, r1
   131e8:	mov	r1, r0
   131ec:	mov	r0, #0
   131f0:	movt	r3, #2
   131f4:	b	12c58 <__assert_fail@plt+0x1ce4>
   131f8:	movw	r3, #24816	; 0x60f0
   131fc:	mvn	r2, #0
   13200:	movt	r3, #2
   13204:	b	12c58 <__assert_fail@plt+0x1ce4>
   13208:	movw	r3, #24816	; 0x60f0
   1320c:	mov	r1, r0
   13210:	mov	r0, #0
   13214:	mvn	r2, #0
   13218:	movt	r3, #2
   1321c:	b	12c58 <__assert_fail@plt+0x1ce4>
   13220:	push	{r4, r5, fp, lr}
   13224:	add	fp, sp, #8
   13228:	mov	r5, r0
   1322c:	mov	r4, r1
   13230:	mov	r0, #0
   13234:	mov	r2, #5
   13238:	mov	r1, r5
   1323c:	bl	10dc4 <dcgettext@plt>
   13240:	cmp	r0, r5
   13244:	popne	{r4, r5, fp, pc}
   13248:	bl	144dc <__assert_fail@plt+0x3568>
   1324c:	ldrb	r1, [r0]
   13250:	and	r1, r1, #223	; 0xdf
   13254:	cmp	r1, #71	; 0x47
   13258:	beq	132c0 <__assert_fail@plt+0x234c>
   1325c:	cmp	r1, #85	; 0x55
   13260:	bne	132e4 <__assert_fail@plt+0x2370>
   13264:	ldrb	r1, [r0, #1]
   13268:	and	r1, r1, #223	; 0xdf
   1326c:	cmp	r1, #84	; 0x54
   13270:	bne	132e4 <__assert_fail@plt+0x2370>
   13274:	ldrb	r1, [r0, #2]
   13278:	and	r1, r1, #223	; 0xdf
   1327c:	cmp	r1, #70	; 0x46
   13280:	ldrbeq	r1, [r0, #3]
   13284:	cmpeq	r1, #45	; 0x2d
   13288:	bne	132e4 <__assert_fail@plt+0x2370>
   1328c:	ldrb	r1, [r0, #4]
   13290:	cmp	r1, #56	; 0x38
   13294:	ldrbeq	r0, [r0, #5]
   13298:	cmpeq	r0, #0
   1329c:	bne	132e4 <__assert_fail@plt+0x2370>
   132a0:	ldrb	r1, [r5]
   132a4:	movw	r2, #19760	; 0x4d30
   132a8:	movw	r0, #19764	; 0x4d34
   132ac:	movt	r2, #1
   132b0:	movt	r0, #1
   132b4:	cmp	r1, #96	; 0x60
   132b8:	moveq	r0, r2
   132bc:	pop	{r4, r5, fp, pc}
   132c0:	ldrb	r1, [r0, #1]
   132c4:	and	r1, r1, #223	; 0xdf
   132c8:	cmp	r1, #66	; 0x42
   132cc:	bne	132e4 <__assert_fail@plt+0x2370>
   132d0:	ldrb	r1, [r0, #2]
   132d4:	cmp	r1, #49	; 0x31
   132d8:	ldrbeq	r1, [r0, #3]
   132dc:	cmpeq	r1, #56	; 0x38
   132e0:	beq	13300 <__assert_fail@plt+0x238c>
   132e4:	movw	r1, #19754	; 0x4d2a
   132e8:	movw	r0, #19758	; 0x4d2e
   132ec:	cmp	r4, #9
   132f0:	movt	r1, #1
   132f4:	movt	r0, #1
   132f8:	moveq	r0, r1
   132fc:	pop	{r4, r5, fp, pc}
   13300:	ldrb	r1, [r0, #4]
   13304:	cmp	r1, #48	; 0x30
   13308:	ldrbeq	r1, [r0, #5]
   1330c:	cmpeq	r1, #51	; 0x33
   13310:	bne	132e4 <__assert_fail@plt+0x2370>
   13314:	ldrb	r1, [r0, #6]
   13318:	cmp	r1, #48	; 0x30
   1331c:	ldrbeq	r0, [r0, #7]
   13320:	cmpeq	r0, #0
   13324:	bne	132e4 <__assert_fail@plt+0x2370>
   13328:	ldrb	r1, [r5]
   1332c:	movw	r2, #19768	; 0x4d38
   13330:	movw	r0, #19772	; 0x4d3c
   13334:	movt	r2, #1
   13338:	movt	r0, #1
   1333c:	b	132b4 <__assert_fail@plt+0x2340>
   13340:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13344:	add	fp, sp, #24
   13348:	sub	sp, sp, #32
   1334c:	ldr	r6, [fp, #12]
   13350:	ldr	r7, [fp, #8]
   13354:	mov	r4, r2
   13358:	mov	r8, r0
   1335c:	cmp	r1, #0
   13360:	beq	13388 <__assert_fail@plt+0x2414>
   13364:	movw	r2, #19860	; 0x4d94
   13368:	mov	r5, r1
   1336c:	str	r3, [sp, #4]
   13370:	str	r4, [sp]
   13374:	mov	r0, r8
   13378:	mov	r1, #1
   1337c:	movt	r2, #1
   13380:	mov	r3, r5
   13384:	b	133a0 <__assert_fail@plt+0x242c>
   13388:	movw	r2, #19872	; 0x4da0
   1338c:	str	r3, [sp]
   13390:	mov	r0, r8
   13394:	mov	r1, #1
   13398:	mov	r3, r4
   1339c:	movt	r2, #1
   133a0:	bl	10efc <__fprintf_chk@plt>
   133a4:	movw	r1, #19879	; 0x4da7
   133a8:	mov	r0, #0
   133ac:	mov	r2, #5
   133b0:	movt	r1, #1
   133b4:	bl	10dc4 <dcgettext@plt>
   133b8:	movw	r2, #20597	; 0x5075
   133bc:	mov	r3, r0
   133c0:	movw	r0, #2022	; 0x7e6
   133c4:	mov	r1, #1
   133c8:	str	r0, [sp]
   133cc:	movt	r2, #1
   133d0:	mov	r0, r8
   133d4:	bl	10efc <__fprintf_chk@plt>
   133d8:	movw	r4, #19441	; 0x4bf1
   133dc:	mov	r1, r8
   133e0:	movt	r4, #1
   133e4:	mov	r0, r4
   133e8:	bl	10d4c <fputs_unlocked@plt>
   133ec:	movw	r1, #19883	; 0x4dab
   133f0:	mov	r0, #0
   133f4:	mov	r2, #5
   133f8:	movt	r1, #1
   133fc:	bl	10dc4 <dcgettext@plt>
   13400:	movw	r3, #20054	; 0x4e56
   13404:	mov	r2, r0
   13408:	mov	r0, r8
   1340c:	mov	r1, #1
   13410:	movt	r3, #1
   13414:	bl	10efc <__fprintf_chk@plt>
   13418:	mov	r0, r4
   1341c:	mov	r1, r8
   13420:	bl	10d4c <fputs_unlocked@plt>
   13424:	cmp	r6, #9
   13428:	bhi	1348c <__assert_fail@plt+0x2518>
   1342c:	add	r0, pc, #0
   13430:	ldr	pc, [r0, r6, lsl #2]
   13434:	andeq	r3, r1, r4, ror #12
   13438:	andeq	r3, r1, ip, asr r4
   1343c:	muleq	r1, r8, r4
   13440:	andeq	r3, r1, r0, asr #9
   13444:	andeq	r3, r1, r8, ror #9
   13448:	andeq	r3, r1, r0, lsl r5
   1344c:	andeq	r3, r1, r8, lsr r5
   13450:	andeq	r3, r1, r0, ror r5
   13454:	andeq	r3, r1, r0, lsl r6
   13458:			; <UNDEFINED> instruction: 0x000135b8
   1345c:	movw	r1, #20088	; 0x4e78
   13460:	mov	r0, #0
   13464:	mov	r2, #5
   13468:	movt	r1, #1
   1346c:	bl	10dc4 <dcgettext@plt>
   13470:	ldr	r3, [r7]
   13474:	mov	r2, r0
   13478:	mov	r0, r8
   1347c:	mov	r1, #1
   13480:	sub	sp, fp, #24
   13484:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13488:	b	10efc <__fprintf_chk@plt>
   1348c:	movw	r1, #20407	; 0x4fb7
   13490:	movt	r1, #1
   13494:	b	135c0 <__assert_fail@plt+0x264c>
   13498:	movw	r1, #20104	; 0x4e88
   1349c:	mov	r0, #0
   134a0:	mov	r2, #5
   134a4:	movt	r1, #1
   134a8:	bl	10dc4 <dcgettext@plt>
   134ac:	mov	r2, r0
   134b0:	ldr	r3, [r7]
   134b4:	ldr	r0, [r7, #4]
   134b8:	str	r0, [sp]
   134bc:	b	135ac <__assert_fail@plt+0x2638>
   134c0:	movw	r1, #20127	; 0x4e9f
   134c4:	mov	r0, #0
   134c8:	mov	r2, #5
   134cc:	movt	r1, #1
   134d0:	bl	10dc4 <dcgettext@plt>
   134d4:	ldr	r3, [r7]
   134d8:	mov	r2, r0
   134dc:	ldmib	r7, {r0, r1}
   134e0:	stm	sp, {r0, r1}
   134e4:	b	135ac <__assert_fail@plt+0x2638>
   134e8:	movw	r1, #20155	; 0x4ebb
   134ec:	mov	r0, #0
   134f0:	mov	r2, #5
   134f4:	movt	r1, #1
   134f8:	bl	10dc4 <dcgettext@plt>
   134fc:	ldr	r3, [r7]
   13500:	mov	r2, r0
   13504:	ldmib	r7, {r0, r1, r7}
   13508:	stm	sp, {r0, r1, r7}
   1350c:	b	135ac <__assert_fail@plt+0x2638>
   13510:	movw	r1, #20187	; 0x4edb
   13514:	mov	r0, #0
   13518:	mov	r2, #5
   1351c:	movt	r1, #1
   13520:	bl	10dc4 <dcgettext@plt>
   13524:	ldr	r3, [r7]
   13528:	mov	r2, r0
   1352c:	ldmib	r7, {r0, r1, r6, r7}
   13530:	stm	sp, {r0, r1, r6, r7}
   13534:	b	135ac <__assert_fail@plt+0x2638>
   13538:	movw	r1, #20223	; 0x4eff
   1353c:	mov	r0, #0
   13540:	mov	r2, #5
   13544:	movt	r1, #1
   13548:	bl	10dc4 <dcgettext@plt>
   1354c:	ldr	r3, [r7]
   13550:	mov	r2, r0
   13554:	ldmib	r7, {r0, r1, r6}
   13558:	ldr	r5, [r7, #16]
   1355c:	ldr	r7, [r7, #20]
   13560:	stm	sp, {r0, r1, r6}
   13564:	str	r5, [sp, #12]
   13568:	str	r7, [sp, #16]
   1356c:	b	135ac <__assert_fail@plt+0x2638>
   13570:	movw	r1, #20263	; 0x4f27
   13574:	mov	r0, #0
   13578:	mov	r2, #5
   1357c:	movt	r1, #1
   13580:	bl	10dc4 <dcgettext@plt>
   13584:	ldr	r3, [r7]
   13588:	mov	r2, r0
   1358c:	ldmib	r7, {r0, r1, r6}
   13590:	ldr	r5, [r7, #16]
   13594:	ldr	r4, [r7, #20]
   13598:	ldr	r7, [r7, #24]
   1359c:	stm	sp, {r0, r1, r6}
   135a0:	str	r5, [sp, #12]
   135a4:	str	r4, [sp, #16]
   135a8:	str	r7, [sp, #20]
   135ac:	mov	r0, r8
   135b0:	mov	r1, #1
   135b4:	b	13660 <__assert_fail@plt+0x26ec>
   135b8:	movw	r1, #20355	; 0x4f83
   135bc:	movt	r1, #1
   135c0:	mov	r0, #0
   135c4:	mov	r2, #5
   135c8:	bl	10dc4 <dcgettext@plt>
   135cc:	mov	ip, r0
   135d0:	ldr	r3, [r7]
   135d4:	ldr	r0, [r7, #4]
   135d8:	ldr	r1, [r7, #8]
   135dc:	ldr	r6, [r7, #12]
   135e0:	ldr	r5, [r7, #16]
   135e4:	ldr	r4, [r7, #20]
   135e8:	ldr	r2, [r7, #24]
   135ec:	ldr	lr, [r7, #28]
   135f0:	ldr	r7, [r7, #32]
   135f4:	stm	sp, {r0, r1, r6}
   135f8:	str	r5, [sp, #12]
   135fc:	str	r4, [sp, #16]
   13600:	str	r2, [sp, #20]
   13604:	str	lr, [sp, #24]
   13608:	str	r7, [sp, #28]
   1360c:	b	13654 <__assert_fail@plt+0x26e0>
   13610:	movw	r1, #20307	; 0x4f53
   13614:	mov	r0, #0
   13618:	mov	r2, #5
   1361c:	movt	r1, #1
   13620:	bl	10dc4 <dcgettext@plt>
   13624:	mov	ip, r0
   13628:	ldr	r3, [r7]
   1362c:	ldmib	r7, {r0, r1, r6}
   13630:	ldr	r5, [r7, #16]
   13634:	ldr	r4, [r7, #20]
   13638:	ldr	r2, [r7, #24]
   1363c:	ldr	r7, [r7, #28]
   13640:	stm	sp, {r0, r1, r6}
   13644:	str	r5, [sp, #12]
   13648:	str	r4, [sp, #16]
   1364c:	str	r2, [sp, #20]
   13650:	str	r7, [sp, #24]
   13654:	mov	r0, r8
   13658:	mov	r1, #1
   1365c:	mov	r2, ip
   13660:	bl	10efc <__fprintf_chk@plt>
   13664:	sub	sp, fp, #24
   13668:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1366c:	push	{r4, sl, fp, lr}
   13670:	add	fp, sp, #8
   13674:	sub	sp, sp, #8
   13678:	ldr	ip, [fp, #8]
   1367c:	mov	lr, #0
   13680:	ldr	r4, [ip, lr, lsl #2]
   13684:	add	lr, lr, #1
   13688:	cmp	r4, #0
   1368c:	bne	13680 <__assert_fail@plt+0x270c>
   13690:	sub	r4, lr, #1
   13694:	str	ip, [sp]
   13698:	str	r4, [sp, #4]
   1369c:	bl	13340 <__assert_fail@plt+0x23cc>
   136a0:	sub	sp, fp, #8
   136a4:	pop	{r4, sl, fp, pc}
   136a8:	push	{r4, r5, fp, lr}
   136ac:	add	fp, sp, #8
   136b0:	sub	sp, sp, #48	; 0x30
   136b4:	ldr	r4, [fp, #8]
   136b8:	mov	ip, #0
   136bc:	add	lr, sp, #8
   136c0:	ldr	r5, [r4]
   136c4:	cmp	r5, #0
   136c8:	str	r5, [lr, ip, lsl #2]
   136cc:	beq	136e0 <__assert_fail@plt+0x276c>
   136d0:	add	ip, ip, #1
   136d4:	add	r4, r4, #4
   136d8:	cmp	ip, #10
   136dc:	bcc	136c0 <__assert_fail@plt+0x274c>
   136e0:	str	lr, [sp]
   136e4:	str	ip, [sp, #4]
   136e8:	bl	13340 <__assert_fail@plt+0x23cc>
   136ec:	sub	sp, fp, #8
   136f0:	pop	{r4, r5, fp, pc}
   136f4:	push	{fp, lr}
   136f8:	mov	fp, sp
   136fc:	sub	sp, sp, #8
   13700:	add	ip, fp, #8
   13704:	str	ip, [sp, #4]
   13708:	str	ip, [sp]
   1370c:	bl	136a8 <__assert_fail@plt+0x2734>
   13710:	mov	sp, fp
   13714:	pop	{fp, pc}
   13718:	push	{fp, lr}
   1371c:	mov	fp, sp
   13720:	movw	r0, #24884	; 0x6134
   13724:	movt	r0, #2
   13728:	ldr	r1, [r0]
   1372c:	movw	r0, #19441	; 0x4bf1
   13730:	movt	r0, #1
   13734:	bl	10d4c <fputs_unlocked@plt>
   13738:	movw	r1, #20467	; 0x4ff3
   1373c:	mov	r0, #0
   13740:	mov	r2, #5
   13744:	movt	r1, #1
   13748:	bl	10dc4 <dcgettext@plt>
   1374c:	movw	r2, #20487	; 0x5007
   13750:	mov	r1, r0
   13754:	mov	r0, #1
   13758:	movt	r2, #1
   1375c:	bl	10ee4 <__printf_chk@plt>
   13760:	movw	r1, #20509	; 0x501d
   13764:	mov	r0, #0
   13768:	mov	r2, #5
   1376c:	movt	r1, #1
   13770:	bl	10dc4 <dcgettext@plt>
   13774:	movw	r2, #18918	; 0x49e6
   13778:	movw	r3, #19250	; 0x4b32
   1377c:	mov	r1, r0
   13780:	mov	r0, #1
   13784:	movt	r2, #1
   13788:	movt	r3, #1
   1378c:	bl	10ee4 <__printf_chk@plt>
   13790:	movw	r1, #20529	; 0x5031
   13794:	mov	r0, #0
   13798:	mov	r2, #5
   1379c:	movt	r1, #1
   137a0:	bl	10dc4 <dcgettext@plt>
   137a4:	movw	r2, #20568	; 0x5058
   137a8:	mov	r1, r0
   137ac:	mov	r0, #1
   137b0:	movt	r2, #1
   137b4:	pop	{fp, lr}
   137b8:	b	10ee4 <__printf_chk@plt>
   137bc:	b	137c0 <__assert_fail@plt+0x284c>
   137c0:	push	{r4, r5, r6, sl, fp, lr}
   137c4:	add	fp, sp, #16
   137c8:	mov	r4, r2
   137cc:	mov	r5, r1
   137d0:	mov	r6, r0
   137d4:	bl	14574 <__assert_fail@plt+0x3600>
   137d8:	cmp	r0, #0
   137dc:	popne	{r4, r5, r6, sl, fp, pc}
   137e0:	cmp	r6, #0
   137e4:	beq	137f8 <__assert_fail@plt+0x2884>
   137e8:	cmp	r5, #0
   137ec:	cmpne	r4, #0
   137f0:	bne	137f8 <__assert_fail@plt+0x2884>
   137f4:	pop	{r4, r5, r6, sl, fp, pc}
   137f8:	bl	13c4c <__assert_fail@plt+0x2cd8>
   137fc:	push	{fp, lr}
   13800:	mov	fp, sp
   13804:	bl	14218 <__assert_fail@plt+0x32a4>
   13808:	cmp	r0, #0
   1380c:	popne	{fp, pc}
   13810:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13814:	push	{fp, lr}
   13818:	mov	fp, sp
   1381c:	bl	14218 <__assert_fail@plt+0x32a4>
   13820:	cmp	r0, #0
   13824:	popne	{fp, pc}
   13828:	bl	13c4c <__assert_fail@plt+0x2cd8>
   1382c:	push	{fp, lr}
   13830:	mov	fp, sp
   13834:	bl	14218 <__assert_fail@plt+0x32a4>
   13838:	cmp	r0, #0
   1383c:	popne	{fp, pc}
   13840:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13844:	push	{r4, r5, fp, lr}
   13848:	add	fp, sp, #8
   1384c:	mov	r4, r1
   13850:	mov	r5, r0
   13854:	bl	14248 <__assert_fail@plt+0x32d4>
   13858:	cmp	r0, #0
   1385c:	popne	{r4, r5, fp, pc}
   13860:	cmp	r5, #0
   13864:	beq	13874 <__assert_fail@plt+0x2900>
   13868:	cmp	r4, #0
   1386c:	bne	13874 <__assert_fail@plt+0x2900>
   13870:	pop	{r4, r5, fp, pc}
   13874:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13878:	push	{fp, lr}
   1387c:	mov	fp, sp
   13880:	cmp	r1, #0
   13884:	orreq	r1, r1, #1
   13888:	bl	14248 <__assert_fail@plt+0x32d4>
   1388c:	cmp	r0, #0
   13890:	popne	{fp, pc}
   13894:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13898:	push	{fp, lr}
   1389c:	mov	fp, sp
   138a0:	clz	r3, r2
   138a4:	lsr	ip, r3, #5
   138a8:	clz	r3, r1
   138ac:	lsr	r3, r3, #5
   138b0:	orrs	r3, r3, ip
   138b4:	movwne	r1, #1
   138b8:	movwne	r2, #1
   138bc:	bl	14574 <__assert_fail@plt+0x3600>
   138c0:	cmp	r0, #0
   138c4:	popne	{fp, pc}
   138c8:	bl	13c4c <__assert_fail@plt+0x2cd8>
   138cc:	push	{fp, lr}
   138d0:	mov	fp, sp
   138d4:	mov	r2, r1
   138d8:	mov	r1, r0
   138dc:	mov	r0, #0
   138e0:	bl	14574 <__assert_fail@plt+0x3600>
   138e4:	cmp	r0, #0
   138e8:	popne	{fp, pc}
   138ec:	bl	13c4c <__assert_fail@plt+0x2cd8>
   138f0:	mov	r2, r1
   138f4:	mov	r1, r0
   138f8:	mov	r0, #0
   138fc:	b	13898 <__assert_fail@plt+0x2924>
   13900:	mov	r2, #1
   13904:	b	13908 <__assert_fail@plt+0x2994>
   13908:	push	{r4, r5, fp, lr}
   1390c:	add	fp, sp, #8
   13910:	ldr	r5, [r1]
   13914:	mov	r4, r1
   13918:	cmp	r0, #0
   1391c:	beq	13934 <__assert_fail@plt+0x29c0>
   13920:	mov	r1, #1
   13924:	add	r1, r1, r5, lsr #1
   13928:	adds	r5, r5, r1
   1392c:	bcc	1394c <__assert_fail@plt+0x29d8>
   13930:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13934:	cmp	r5, #0
   13938:	bne	1394c <__assert_fail@plt+0x29d8>
   1393c:	mov	r1, #64	; 0x40
   13940:	cmp	r2, #64	; 0x40
   13944:	udiv	r5, r1, r2
   13948:	addhi	r5, r5, #1
   1394c:	mov	r1, r5
   13950:	bl	137c0 <__assert_fail@plt+0x284c>
   13954:	str	r5, [r4]
   13958:	pop	{r4, r5, fp, pc}
   1395c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13960:	add	fp, sp, #24
   13964:	ldr	r6, [r1]
   13968:	mov	r8, r1
   1396c:	ldr	r4, [fp, #8]
   13970:	add	r1, r6, r6, asr #1
   13974:	cmp	r1, r6
   13978:	mvnvs	r1, #-2147483648	; 0x80000000
   1397c:	cmp	r1, r3
   13980:	mov	r5, r1
   13984:	movgt	r5, r3
   13988:	cmn	r3, #1
   1398c:	movle	r5, r1
   13990:	cmn	r4, #1
   13994:	ble	139b4 <__assert_fail@plt+0x2a40>
   13998:	cmp	r4, #0
   1399c:	beq	13a08 <__assert_fail@plt+0x2a94>
   139a0:	cmn	r5, #1
   139a4:	ble	139dc <__assert_fail@plt+0x2a68>
   139a8:	mvn	r7, #-2147483648	; 0x80000000
   139ac:	udiv	r1, r7, r4
   139b0:	b	139d0 <__assert_fail@plt+0x2a5c>
   139b4:	cmn	r5, #1
   139b8:	ble	139f8 <__assert_fail@plt+0x2a84>
   139bc:	cmn	r4, #1
   139c0:	beq	13a08 <__assert_fail@plt+0x2a94>
   139c4:	mov	r1, #-2147483648	; 0x80000000
   139c8:	mvn	r7, #-2147483648	; 0x80000000
   139cc:	sdiv	r1, r1, r4
   139d0:	cmp	r1, r5
   139d4:	bge	13a08 <__assert_fail@plt+0x2a94>
   139d8:	b	13a18 <__assert_fail@plt+0x2aa4>
   139dc:	beq	13a08 <__assert_fail@plt+0x2a94>
   139e0:	mov	r1, #-2147483648	; 0x80000000
   139e4:	mvn	r7, #-2147483648	; 0x80000000
   139e8:	sdiv	r1, r1, r5
   139ec:	cmp	r1, r4
   139f0:	bge	13a08 <__assert_fail@plt+0x2a94>
   139f4:	b	13a18 <__assert_fail@plt+0x2aa4>
   139f8:	mvn	r7, #-2147483648	; 0x80000000
   139fc:	sdiv	r1, r7, r4
   13a00:	cmp	r5, r1
   13a04:	blt	13a18 <__assert_fail@plt+0x2aa4>
   13a08:	mul	r1, r5, r4
   13a0c:	mov	r7, #64	; 0x40
   13a10:	cmp	r1, #63	; 0x3f
   13a14:	bgt	13a20 <__assert_fail@plt+0x2aac>
   13a18:	sdiv	r5, r7, r4
   13a1c:	mul	r1, r5, r4
   13a20:	cmp	r0, #0
   13a24:	moveq	r7, #0
   13a28:	streq	r7, [r8]
   13a2c:	sub	r7, r5, r6
   13a30:	cmp	r7, r2
   13a34:	bge	13ad8 <__assert_fail@plt+0x2b64>
   13a38:	add	r5, r6, r2
   13a3c:	mov	r2, #0
   13a40:	mov	r1, #0
   13a44:	cmp	r5, r3
   13a48:	movwgt	r2, #1
   13a4c:	cmn	r3, #1
   13a50:	movwgt	r1, #1
   13a54:	cmp	r5, r6
   13a58:	bvs	13ac0 <__assert_fail@plt+0x2b4c>
   13a5c:	ands	r1, r1, r2
   13a60:	bne	13ac0 <__assert_fail@plt+0x2b4c>
   13a64:	cmn	r4, #1
   13a68:	ble	13a88 <__assert_fail@plt+0x2b14>
   13a6c:	cmp	r4, #0
   13a70:	beq	13ad4 <__assert_fail@plt+0x2b60>
   13a74:	cmn	r5, #1
   13a78:	ble	13aac <__assert_fail@plt+0x2b38>
   13a7c:	mvn	r1, #-2147483648	; 0x80000000
   13a80:	udiv	r1, r1, r4
   13a84:	b	13aa0 <__assert_fail@plt+0x2b2c>
   13a88:	cmn	r5, #1
   13a8c:	ble	13ac4 <__assert_fail@plt+0x2b50>
   13a90:	cmn	r4, #1
   13a94:	beq	13ad4 <__assert_fail@plt+0x2b60>
   13a98:	mov	r1, #-2147483648	; 0x80000000
   13a9c:	sdiv	r1, r1, r4
   13aa0:	cmp	r1, r5
   13aa4:	bge	13ad4 <__assert_fail@plt+0x2b60>
   13aa8:	b	13ac0 <__assert_fail@plt+0x2b4c>
   13aac:	beq	13ad4 <__assert_fail@plt+0x2b60>
   13ab0:	mov	r1, #-2147483648	; 0x80000000
   13ab4:	sdiv	r1, r1, r5
   13ab8:	cmp	r1, r4
   13abc:	bge	13ad4 <__assert_fail@plt+0x2b60>
   13ac0:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13ac4:	mvn	r1, #-2147483648	; 0x80000000
   13ac8:	sdiv	r1, r1, r4
   13acc:	cmp	r5, r1
   13ad0:	blt	13ac0 <__assert_fail@plt+0x2b4c>
   13ad4:	mul	r1, r5, r4
   13ad8:	bl	13844 <__assert_fail@plt+0x28d0>
   13adc:	str	r5, [r8]
   13ae0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ae4:	push	{fp, lr}
   13ae8:	mov	fp, sp
   13aec:	mov	r1, #1
   13af0:	bl	141c4 <__assert_fail@plt+0x3250>
   13af4:	cmp	r0, #0
   13af8:	popne	{fp, pc}
   13afc:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13b00:	push	{fp, lr}
   13b04:	mov	fp, sp
   13b08:	bl	141c4 <__assert_fail@plt+0x3250>
   13b0c:	cmp	r0, #0
   13b10:	popne	{fp, pc}
   13b14:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13b18:	push	{fp, lr}
   13b1c:	mov	fp, sp
   13b20:	mov	r1, #1
   13b24:	bl	141c4 <__assert_fail@plt+0x3250>
   13b28:	cmp	r0, #0
   13b2c:	popne	{fp, pc}
   13b30:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13b34:	push	{fp, lr}
   13b38:	mov	fp, sp
   13b3c:	bl	141c4 <__assert_fail@plt+0x3250>
   13b40:	cmp	r0, #0
   13b44:	popne	{fp, pc}
   13b48:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13b4c:	push	{r4, r5, r6, sl, fp, lr}
   13b50:	add	fp, sp, #16
   13b54:	mov	r5, r0
   13b58:	mov	r0, r1
   13b5c:	mov	r4, r1
   13b60:	bl	14218 <__assert_fail@plt+0x32a4>
   13b64:	cmp	r0, #0
   13b68:	beq	13b84 <__assert_fail@plt+0x2c10>
   13b6c:	mov	r1, r5
   13b70:	mov	r2, r4
   13b74:	mov	r6, r0
   13b78:	bl	10d94 <memcpy@plt>
   13b7c:	mov	r0, r6
   13b80:	pop	{r4, r5, r6, sl, fp, pc}
   13b84:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13b88:	push	{r4, r5, r6, sl, fp, lr}
   13b8c:	add	fp, sp, #16
   13b90:	mov	r5, r0
   13b94:	mov	r0, r1
   13b98:	mov	r4, r1
   13b9c:	bl	14218 <__assert_fail@plt+0x32a4>
   13ba0:	cmp	r0, #0
   13ba4:	beq	13bc0 <__assert_fail@plt+0x2c4c>
   13ba8:	mov	r1, r5
   13bac:	mov	r2, r4
   13bb0:	mov	r6, r0
   13bb4:	bl	10d94 <memcpy@plt>
   13bb8:	mov	r0, r6
   13bbc:	pop	{r4, r5, r6, sl, fp, pc}
   13bc0:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13bc4:	push	{r4, r5, r6, sl, fp, lr}
   13bc8:	add	fp, sp, #16
   13bcc:	mov	r5, r0
   13bd0:	add	r0, r1, #1
   13bd4:	mov	r4, r1
   13bd8:	bl	14218 <__assert_fail@plt+0x32a4>
   13bdc:	cmp	r0, #0
   13be0:	beq	13c08 <__assert_fail@plt+0x2c94>
   13be4:	mov	r6, r0
   13be8:	mov	r0, #0
   13bec:	mov	r1, r5
   13bf0:	mov	r2, r4
   13bf4:	strb	r0, [r6, r4]
   13bf8:	mov	r0, r6
   13bfc:	bl	10d94 <memcpy@plt>
   13c00:	mov	r0, r6
   13c04:	pop	{r4, r5, r6, sl, fp, pc}
   13c08:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13c0c:	push	{r4, r5, r6, sl, fp, lr}
   13c10:	add	fp, sp, #16
   13c14:	mov	r4, r0
   13c18:	bl	10ea8 <strlen@plt>
   13c1c:	add	r5, r0, #1
   13c20:	mov	r0, r5
   13c24:	bl	14218 <__assert_fail@plt+0x32a4>
   13c28:	cmp	r0, #0
   13c2c:	beq	13c48 <__assert_fail@plt+0x2cd4>
   13c30:	mov	r1, r4
   13c34:	mov	r2, r5
   13c38:	mov	r6, r0
   13c3c:	bl	10d94 <memcpy@plt>
   13c40:	mov	r0, r6
   13c44:	pop	{r4, r5, r6, sl, fp, pc}
   13c48:	bl	13c4c <__assert_fail@plt+0x2cd8>
   13c4c:	push	{fp, lr}
   13c50:	mov	fp, sp
   13c54:	movw	r0, #24796	; 0x60dc
   13c58:	movw	r1, #20644	; 0x50a4
   13c5c:	mov	r2, #5
   13c60:	movt	r0, #2
   13c64:	movt	r1, #1
   13c68:	ldr	r4, [r0]
   13c6c:	mov	r0, #0
   13c70:	bl	10dc4 <dcgettext@plt>
   13c74:	movw	r2, #19607	; 0x4c97
   13c78:	mov	r3, r0
   13c7c:	mov	r0, r4
   13c80:	mov	r1, #0
   13c84:	movt	r2, #1
   13c88:	bl	10e3c <error@plt>
   13c8c:	bl	10f68 <abort@plt>
   13c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c94:	add	fp, sp, #28
   13c98:	sub	sp, sp, #12
   13c9c:	cmp	r2, #37	; 0x25
   13ca0:	bcs	14100 <__assert_fail@plt+0x318c>
   13ca4:	ldr	sl, [fp, #8]
   13ca8:	mov	r9, r3
   13cac:	mov	r4, r2
   13cb0:	mov	r6, r1
   13cb4:	mov	r5, r0
   13cb8:	bl	10ec0 <__errno_location@plt>
   13cbc:	add	r8, sp, #8
   13cc0:	cmp	r6, #0
   13cc4:	mov	r7, r0
   13cc8:	mov	r0, #0
   13ccc:	mov	r2, r4
   13cd0:	movne	r8, r6
   13cd4:	str	r0, [r7]
   13cd8:	mov	r0, r5
   13cdc:	mov	r1, r8
   13ce0:	bl	10d64 <strtol@plt>
   13ce4:	str	r0, [sp, #4]
   13ce8:	str	r9, [sp]
   13cec:	ldr	r6, [r8]
   13cf0:	cmp	r6, r5
   13cf4:	beq	13d1c <__assert_fail@plt+0x2da8>
   13cf8:	mov	r4, r0
   13cfc:	ldr	r0, [r7]
   13d00:	cmp	r0, #0
   13d04:	beq	13d50 <__assert_fail@plt+0x2ddc>
   13d08:	mov	r9, #4
   13d0c:	cmp	r0, #34	; 0x22
   13d10:	bne	140f4 <__assert_fail@plt+0x3180>
   13d14:	mov	r9, #1
   13d18:	b	13d54 <__assert_fail@plt+0x2de0>
   13d1c:	cmp	sl, #0
   13d20:	mov	r9, #4
   13d24:	ldrbne	r1, [r5]
   13d28:	cmpne	r1, #0
   13d2c:	beq	140f4 <__assert_fail@plt+0x3180>
   13d30:	mov	r0, sl
   13d34:	bl	10eb4 <strchr@plt>
   13d38:	cmp	r0, #0
   13d3c:	beq	140f4 <__assert_fail@plt+0x3180>
   13d40:	mov	r4, #1
   13d44:	mov	r9, #0
   13d48:	str	r4, [sp, #4]
   13d4c:	b	13d5c <__assert_fail@plt+0x2de8>
   13d50:	mov	r9, r0
   13d54:	cmp	sl, #0
   13d58:	beq	140ec <__assert_fail@plt+0x3178>
   13d5c:	ldrb	r5, [r6]
   13d60:	cmp	r5, #0
   13d64:	beq	140ec <__assert_fail@plt+0x3178>
   13d68:	mov	r0, sl
   13d6c:	mov	r1, r5
   13d70:	bl	10eb4 <strchr@plt>
   13d74:	cmp	r0, #0
   13d78:	beq	14004 <__assert_fail@plt+0x3090>
   13d7c:	sub	r0, r5, #69	; 0x45
   13d80:	mov	r7, #1024	; 0x400
   13d84:	cmp	r0, #21
   13d88:	bhi	13da0 <__assert_fail@plt+0x2e2c>
   13d8c:	movw	r2, #35141	; 0x8945
   13d90:	mov	r1, #1
   13d94:	movt	r2, #48	; 0x30
   13d98:	tst	r2, r1, lsl r0
   13d9c:	bne	13dbc <__assert_fail@plt+0x2e48>
   13da0:	sub	r0, r5, #103	; 0x67
   13da4:	cmp	r0, #13
   13da8:	bhi	13df0 <__assert_fail@plt+0x2e7c>
   13dac:	mov	r1, #1
   13db0:	movw	r2, #8273	; 0x2051
   13db4:	tst	r2, r1, lsl r0
   13db8:	beq	13df0 <__assert_fail@plt+0x2e7c>
   13dbc:	mov	r0, sl
   13dc0:	mov	r1, #48	; 0x30
   13dc4:	bl	10eb4 <strchr@plt>
   13dc8:	cmp	r0, #0
   13dcc:	beq	13df0 <__assert_fail@plt+0x2e7c>
   13dd0:	ldrb	r0, [r6, #1]
   13dd4:	mov	sl, #1
   13dd8:	cmp	r0, #66	; 0x42
   13ddc:	cmpne	r0, #68	; 0x44
   13de0:	bne	13ed0 <__assert_fail@plt+0x2f5c>
   13de4:	mov	sl, #2
   13de8:	mov	r7, #1000	; 0x3e8
   13dec:	b	13df4 <__assert_fail@plt+0x2e80>
   13df0:	mov	sl, #1
   13df4:	cmp	r5, #89	; 0x59
   13df8:	bgt	13e60 <__assert_fail@plt+0x2eec>
   13dfc:	sub	r0, r5, #66	; 0x42
   13e00:	cmp	r0, #14
   13e04:	bhi	13eec <__assert_fail@plt+0x2f78>
   13e08:	add	r1, pc, #0
   13e0c:	ldr	pc, [r1, r0, lsl #2]
   13e10:	andeq	r3, r1, ip, asr #28
   13e14:	andeq	r4, r1, r4
   13e18:	andeq	r4, r1, r4
   13e1c:	andeq	r4, r1, r0, lsl r0
   13e20:	andeq	r4, r1, r4
   13e24:	andeq	r3, r1, r8, asr #30
   13e28:	andeq	r4, r1, r4
   13e2c:	andeq	r4, r1, r4
   13e30:	andeq	r4, r1, r4
   13e34:	andeq	r3, r1, r0, ror pc
   13e38:	andeq	r4, r1, r4
   13e3c:	andeq	r3, r1, r4, lsl #31
   13e40:	andeq	r4, r1, r4
   13e44:	andeq	r4, r1, r4
   13e48:	andeq	r4, r1, r8, lsr r0
   13e4c:	cmn	r4, #1
   13e50:	ble	14060 <__assert_fail@plt+0x30ec>
   13e54:	cmp	r4, #2097152	; 0x200000
   13e58:	blt	14074 <__assert_fail@plt+0x3100>
   13e5c:	b	140ac <__assert_fail@plt+0x3138>
   13e60:	cmp	r5, #115	; 0x73
   13e64:	bgt	13f24 <__assert_fail@plt+0x2fb0>
   13e68:	sub	r0, r5, #98	; 0x62
   13e6c:	cmp	r0, #11
   13e70:	bhi	13fd4 <__assert_fail@plt+0x3060>
   13e74:	add	r1, pc, #4
   13e78:	mov	r5, #0
   13e7c:	ldr	pc, [r1, r0, lsl #2]
   13e80:			; <UNDEFINED> instruction: 0x00013eb0
   13e84:	andeq	r4, r1, ip, asr #1
   13e88:	andeq	r4, r1, r4
   13e8c:	andeq	r4, r1, r4
   13e90:	andeq	r4, r1, r4
   13e94:	andeq	r3, r1, r8, asr #30
   13e98:	andeq	r4, r1, r4
   13e9c:	andeq	r4, r1, r4
   13ea0:	andeq	r4, r1, r4
   13ea4:	andeq	r3, r1, r0, ror pc
   13ea8:	andeq	r4, r1, r4
   13eac:	andeq	r3, r1, r4, lsl #31
   13eb0:	cmn	r4, #1
   13eb4:	ble	1407c <__assert_fail@plt+0x3108>
   13eb8:	movw	r0, #65535	; 0xffff
   13ebc:	movt	r0, #31
   13ec0:	add	r0, r0, #2097152	; 0x200000
   13ec4:	cmp	r4, r0
   13ec8:	ble	14090 <__assert_fail@plt+0x311c>
   13ecc:	b	140ac <__assert_fail@plt+0x3138>
   13ed0:	cmp	r0, #105	; 0x69
   13ed4:	bne	13df4 <__assert_fail@plt+0x2e80>
   13ed8:	ldrb	r0, [r6, #2]
   13edc:	mov	sl, #1
   13ee0:	cmp	r0, #66	; 0x42
   13ee4:	movweq	sl, #3
   13ee8:	b	13df4 <__assert_fail@plt+0x2e80>
   13eec:	cmp	r5, #84	; 0x54
   13ef0:	beq	13fac <__assert_fail@plt+0x3038>
   13ef4:	cmp	r5, #89	; 0x59
   13ef8:	bne	14004 <__assert_fail@plt+0x3090>
   13efc:	mov	r5, #0
   13f00:	mvn	r6, #7
   13f04:	add	r4, sp, #4
   13f08:	mov	r0, r4
   13f0c:	mov	r1, r7
   13f10:	bl	14120 <__assert_fail@plt+0x31ac>
   13f14:	orr	r5, r0, r5
   13f18:	adds	r6, r6, #1
   13f1c:	bne	13f08 <__assert_fail@plt+0x2f94>
   13f20:	b	140cc <__assert_fail@plt+0x3158>
   13f24:	cmp	r5, #116	; 0x74
   13f28:	beq	13fac <__assert_fail@plt+0x3038>
   13f2c:	cmp	r5, #119	; 0x77
   13f30:	bne	14004 <__assert_fail@plt+0x3090>
   13f34:	cmn	r4, #1
   13f38:	ble	14098 <__assert_fail@plt+0x3124>
   13f3c:	cmp	r4, #1073741824	; 0x40000000
   13f40:	bge	140ac <__assert_fail@plt+0x3138>
   13f44:	b	140c0 <__assert_fail@plt+0x314c>
   13f48:	mov	r5, #0
   13f4c:	mvn	r6, #2
   13f50:	add	r4, sp, #4
   13f54:	mov	r0, r4
   13f58:	mov	r1, r7
   13f5c:	bl	14120 <__assert_fail@plt+0x31ac>
   13f60:	orr	r5, r0, r5
   13f64:	adds	r6, r6, #1
   13f68:	bne	13f54 <__assert_fail@plt+0x2fe0>
   13f6c:	b	140cc <__assert_fail@plt+0x3158>
   13f70:	add	r0, sp, #4
   13f74:	mov	r1, r7
   13f78:	bl	14120 <__assert_fail@plt+0x31ac>
   13f7c:	mov	r5, r0
   13f80:	b	140cc <__assert_fail@plt+0x3158>
   13f84:	mov	r5, #0
   13f88:	mvn	r6, #1
   13f8c:	add	r4, sp, #4
   13f90:	mov	r0, r4
   13f94:	mov	r1, r7
   13f98:	bl	14120 <__assert_fail@plt+0x31ac>
   13f9c:	orr	r5, r0, r5
   13fa0:	adds	r6, r6, #1
   13fa4:	bne	13f90 <__assert_fail@plt+0x301c>
   13fa8:	b	140cc <__assert_fail@plt+0x3158>
   13fac:	mov	r5, #0
   13fb0:	mvn	r6, #3
   13fb4:	add	r4, sp, #4
   13fb8:	mov	r0, r4
   13fbc:	mov	r1, r7
   13fc0:	bl	14120 <__assert_fail@plt+0x31ac>
   13fc4:	orr	r5, r0, r5
   13fc8:	adds	r6, r6, #1
   13fcc:	bne	13fb8 <__assert_fail@plt+0x3044>
   13fd0:	b	140cc <__assert_fail@plt+0x3158>
   13fd4:	cmp	r5, #90	; 0x5a
   13fd8:	bne	14004 <__assert_fail@plt+0x3090>
   13fdc:	mov	r5, #0
   13fe0:	mvn	r6, #6
   13fe4:	add	r4, sp, #4
   13fe8:	mov	r0, r4
   13fec:	mov	r1, r7
   13ff0:	bl	14120 <__assert_fail@plt+0x31ac>
   13ff4:	orr	r5, r0, r5
   13ff8:	adds	r6, r6, #1
   13ffc:	bne	13fe8 <__assert_fail@plt+0x3074>
   14000:	b	140cc <__assert_fail@plt+0x3158>
   14004:	ldr	r0, [sp]
   14008:	orr	r9, r9, #2
   1400c:	b	140f0 <__assert_fail@plt+0x317c>
   14010:	mov	r5, #0
   14014:	mvn	r6, #5
   14018:	add	r4, sp, #4
   1401c:	mov	r0, r4
   14020:	mov	r1, r7
   14024:	bl	14120 <__assert_fail@plt+0x31ac>
   14028:	orr	r5, r0, r5
   1402c:	adds	r6, r6, #1
   14030:	bne	1401c <__assert_fail@plt+0x30a8>
   14034:	b	140cc <__assert_fail@plt+0x3158>
   14038:	mov	r5, #0
   1403c:	mvn	r6, #4
   14040:	add	r4, sp, #4
   14044:	mov	r0, r4
   14048:	mov	r1, r7
   1404c:	bl	14120 <__assert_fail@plt+0x31ac>
   14050:	orr	r5, r0, r5
   14054:	adds	r6, r6, #1
   14058:	bne	14044 <__assert_fail@plt+0x30d0>
   1405c:	b	140cc <__assert_fail@plt+0x3158>
   14060:	beq	14074 <__assert_fail@plt+0x3100>
   14064:	mov	r0, #-2147483648	; 0x80000000
   14068:	sdiv	r0, r0, r4
   1406c:	cmp	r0, #1024	; 0x400
   14070:	blt	140ac <__assert_fail@plt+0x3138>
   14074:	lsl	r0, r4, #10
   14078:	b	140c4 <__assert_fail@plt+0x3150>
   1407c:	beq	14090 <__assert_fail@plt+0x311c>
   14080:	mov	r0, #-2147483648	; 0x80000000
   14084:	sdiv	r0, r0, r4
   14088:	cmp	r0, #512	; 0x200
   1408c:	blt	140ac <__assert_fail@plt+0x3138>
   14090:	lsl	r0, r4, #9
   14094:	b	140c4 <__assert_fail@plt+0x3150>
   14098:	beq	140c0 <__assert_fail@plt+0x314c>
   1409c:	mov	r0, #-2147483648	; 0x80000000
   140a0:	sdiv	r0, r0, r4
   140a4:	cmp	r0, #2
   140a8:	bge	140c0 <__assert_fail@plt+0x314c>
   140ac:	mvn	r0, #-2147483648	; 0x80000000
   140b0:	cmp	r4, #0
   140b4:	mov	r5, #1
   140b8:	movlt	r0, #-2147483648	; 0x80000000
   140bc:	b	140c8 <__assert_fail@plt+0x3154>
   140c0:	lsl	r0, r4, #1
   140c4:	mov	r5, #0
   140c8:	str	r0, [sp, #4]
   140cc:	ldr	r0, [r8]
   140d0:	orr	r9, r5, r9
   140d4:	add	r1, r0, sl
   140d8:	str	r1, [r8]
   140dc:	ldrb	r0, [r0, sl]
   140e0:	ldr	r4, [sp, #4]
   140e4:	cmp	r0, #0
   140e8:	orrne	r9, r9, #2
   140ec:	ldr	r0, [sp]
   140f0:	str	r4, [r0]
   140f4:	mov	r0, r9
   140f8:	sub	sp, fp, #28
   140fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14100:	movw	r0, #20661	; 0x50b5
   14104:	movw	r1, #20699	; 0x50db
   14108:	movw	r3, #20713	; 0x50e9
   1410c:	mov	r2, #85	; 0x55
   14110:	movt	r0, #1
   14114:	movt	r1, #1
   14118:	movt	r3, #1
   1411c:	bl	10f74 <__assert_fail@plt>
   14120:	cmn	r1, #1
   14124:	ble	14148 <__assert_fail@plt+0x31d4>
   14128:	ldr	r2, [r0]
   1412c:	cmp	r1, #0
   14130:	beq	141b0 <__assert_fail@plt+0x323c>
   14134:	cmn	r2, #1
   14138:	ble	14170 <__assert_fail@plt+0x31fc>
   1413c:	mvn	r3, #-2147483648	; 0x80000000
   14140:	udiv	r3, r3, r1
   14144:	b	14164 <__assert_fail@plt+0x31f0>
   14148:	ldr	r2, [r0]
   1414c:	cmn	r2, #1
   14150:	ble	14188 <__assert_fail@plt+0x3214>
   14154:	cmn	r1, #1
   14158:	beq	141b0 <__assert_fail@plt+0x323c>
   1415c:	mov	r3, #-2147483648	; 0x80000000
   14160:	sdiv	r3, r3, r1
   14164:	cmp	r3, r2
   14168:	blt	14198 <__assert_fail@plt+0x3224>
   1416c:	b	141b0 <__assert_fail@plt+0x323c>
   14170:	beq	141ac <__assert_fail@plt+0x3238>
   14174:	mov	r3, #-2147483648	; 0x80000000
   14178:	sdiv	r3, r3, r2
   1417c:	cmp	r3, r1
   14180:	blt	14198 <__assert_fail@plt+0x3224>
   14184:	b	141b0 <__assert_fail@plt+0x323c>
   14188:	mvn	r3, #-2147483648	; 0x80000000
   1418c:	sdiv	r3, r3, r1
   14190:	cmp	r2, r3
   14194:	bge	141b0 <__assert_fail@plt+0x323c>
   14198:	mvn	r3, #-2147483648	; 0x80000000
   1419c:	cmp	r2, #0
   141a0:	mov	r1, #1
   141a4:	movlt	r3, #-2147483648	; 0x80000000
   141a8:	b	141b8 <__assert_fail@plt+0x3244>
   141ac:	mvn	r2, #0
   141b0:	mul	r3, r2, r1
   141b4:	mov	r1, #0
   141b8:	str	r3, [r0]
   141bc:	mov	r0, r1
   141c0:	bx	lr
   141c4:	clz	r2, r1
   141c8:	clz	r3, r0
   141cc:	lsr	r2, r2, #5
   141d0:	lsr	r3, r3, #5
   141d4:	orrs	r2, r3, r2
   141d8:	movwne	r1, #1
   141dc:	movwne	r0, #1
   141e0:	cmp	r1, #0
   141e4:	beq	14214 <__assert_fail@plt+0x32a0>
   141e8:	mvn	r2, #-2147483648	; 0x80000000
   141ec:	udiv	r2, r2, r1
   141f0:	cmp	r2, r0
   141f4:	bcs	14214 <__assert_fail@plt+0x32a0>
   141f8:	push	{fp, lr}
   141fc:	mov	fp, sp
   14200:	bl	10ec0 <__errno_location@plt>
   14204:	mov	r1, #12
   14208:	str	r1, [r0]
   1420c:	mov	r0, #0
   14210:	pop	{fp, pc}
   14214:	b	10d40 <calloc@plt>
   14218:	cmp	r0, #0
   1421c:	movweq	r0, #1
   14220:	cmn	r0, #1
   14224:	ble	1422c <__assert_fail@plt+0x32b8>
   14228:	b	10e54 <malloc@plt>
   1422c:	push	{fp, lr}
   14230:	mov	fp, sp
   14234:	bl	10ec0 <__errno_location@plt>
   14238:	mov	r1, #12
   1423c:	str	r1, [r0]
   14240:	mov	r0, #0
   14244:	pop	{fp, pc}
   14248:	push	{fp, lr}
   1424c:	mov	fp, sp
   14250:	cmp	r0, #0
   14254:	beq	14270 <__assert_fail@plt+0x32fc>
   14258:	cmp	r1, #0
   1425c:	beq	1427c <__assert_fail@plt+0x3308>
   14260:	cmn	r1, #1
   14264:	ble	14284 <__assert_fail@plt+0x3310>
   14268:	pop	{fp, lr}
   1426c:	b	10dd0 <realloc@plt>
   14270:	mov	r0, r1
   14274:	pop	{fp, lr}
   14278:	b	14218 <__assert_fail@plt+0x32a4>
   1427c:	bl	14410 <__assert_fail@plt+0x349c>
   14280:	b	14290 <__assert_fail@plt+0x331c>
   14284:	bl	10ec0 <__errno_location@plt>
   14288:	mov	r1, #12
   1428c:	str	r1, [r0]
   14290:	mov	r0, #0
   14294:	pop	{fp, pc}
   14298:	push	{r4, r5, r6, sl, fp, lr}
   1429c:	add	fp, sp, #16
   142a0:	mov	r4, r0
   142a4:	bl	10e18 <__fpending@plt>
   142a8:	mov	r5, r0
   142ac:	mov	r0, r4
   142b0:	bl	10e24 <ferror_unlocked@plt>
   142b4:	mov	r6, r0
   142b8:	mov	r0, r4
   142bc:	bl	14318 <__assert_fail@plt+0x33a4>
   142c0:	cmp	r6, #0
   142c4:	beq	142e4 <__assert_fail@plt+0x3370>
   142c8:	mvn	r4, #0
   142cc:	cmp	r0, #0
   142d0:	bne	14310 <__assert_fail@plt+0x339c>
   142d4:	bl	10ec0 <__errno_location@plt>
   142d8:	mov	r1, #0
   142dc:	str	r1, [r0]
   142e0:	b	14310 <__assert_fail@plt+0x339c>
   142e4:	cmp	r0, #0
   142e8:	mov	r4, r0
   142ec:	mvnne	r4, #0
   142f0:	cmp	r5, #0
   142f4:	bne	14310 <__assert_fail@plt+0x339c>
   142f8:	cmp	r0, #0
   142fc:	beq	14310 <__assert_fail@plt+0x339c>
   14300:	bl	10ec0 <__errno_location@plt>
   14304:	ldr	r0, [r0]
   14308:	subs	r4, r0, #9
   1430c:	mvnne	r4, #0
   14310:	mov	r0, r4
   14314:	pop	{r4, r5, r6, sl, fp, pc}
   14318:	push	{r4, r5, r6, sl, fp, lr}
   1431c:	add	fp, sp, #16
   14320:	sub	sp, sp, #8
   14324:	mov	r4, r0
   14328:	bl	10ef0 <fileno@plt>
   1432c:	cmn	r0, #1
   14330:	ble	143a4 <__assert_fail@plt+0x3430>
   14334:	mov	r0, r4
   14338:	bl	10e6c <__freading@plt>
   1433c:	cmp	r0, #0
   14340:	beq	1436c <__assert_fail@plt+0x33f8>
   14344:	mov	r0, r4
   14348:	bl	10ef0 <fileno@plt>
   1434c:	mov	r1, #1
   14350:	mov	r2, #0
   14354:	mov	r3, #0
   14358:	str	r1, [sp]
   1435c:	bl	10e00 <lseek64@plt>
   14360:	and	r0, r0, r1
   14364:	cmn	r0, #1
   14368:	beq	143a4 <__assert_fail@plt+0x3430>
   1436c:	mov	r0, r4
   14370:	bl	143b4 <__assert_fail@plt+0x3440>
   14374:	cmp	r0, #0
   14378:	beq	143a4 <__assert_fail@plt+0x3430>
   1437c:	bl	10ec0 <__errno_location@plt>
   14380:	ldr	r6, [r0]
   14384:	mov	r5, r0
   14388:	mov	r0, r4
   1438c:	bl	10f08 <fclose@plt>
   14390:	cmp	r6, #0
   14394:	strne	r6, [r5]
   14398:	mvnne	r0, #0
   1439c:	sub	sp, fp, #16
   143a0:	pop	{r4, r5, r6, sl, fp, pc}
   143a4:	mov	r0, r4
   143a8:	sub	sp, fp, #16
   143ac:	pop	{r4, r5, r6, sl, fp, lr}
   143b0:	b	10f08 <fclose@plt>
   143b4:	push	{r4, sl, fp, lr}
   143b8:	add	fp, sp, #8
   143bc:	sub	sp, sp, #8
   143c0:	mov	r4, r0
   143c4:	cmp	r0, #0
   143c8:	beq	143e4 <__assert_fail@plt+0x3470>
   143cc:	mov	r0, r4
   143d0:	bl	10e6c <__freading@plt>
   143d4:	cmp	r0, #0
   143d8:	ldrbne	r0, [r4, #1]
   143dc:	tstne	r0, #1
   143e0:	bne	143f4 <__assert_fail@plt+0x3480>
   143e4:	mov	r0, r4
   143e8:	sub	sp, fp, #8
   143ec:	pop	{r4, sl, fp, lr}
   143f0:	b	10d70 <fflush@plt>
   143f4:	mov	r0, #1
   143f8:	mov	r2, #0
   143fc:	mov	r3, #0
   14400:	str	r0, [sp]
   14404:	mov	r0, r4
   14408:	bl	14438 <__assert_fail@plt+0x34c4>
   1440c:	b	143e4 <__assert_fail@plt+0x3470>
   14410:	push	{r4, r5, r6, sl, fp, lr}
   14414:	add	fp, sp, #16
   14418:	mov	r4, r0
   1441c:	bl	10ec0 <__errno_location@plt>
   14420:	ldr	r6, [r0]
   14424:	mov	r5, r0
   14428:	mov	r0, r4
   1442c:	bl	10d7c <free@plt>
   14430:	str	r6, [r5]
   14434:	pop	{r4, r5, r6, sl, fp, pc}
   14438:	push	{r4, r5, r6, r7, fp, lr}
   1443c:	add	fp, sp, #16
   14440:	sub	sp, sp, #8
   14444:	mov	r4, r0
   14448:	ldr	r0, [r0, #4]
   1444c:	mov	r5, r3
   14450:	mov	r6, r2
   14454:	ldr	r1, [r4, #8]
   14458:	cmp	r1, r0
   1445c:	bne	14478 <__assert_fail@plt+0x3504>
   14460:	ldrd	r0, [r4, #16]
   14464:	cmp	r1, r0
   14468:	bne	14478 <__assert_fail@plt+0x3504>
   1446c:	ldr	r0, [r4, #36]	; 0x24
   14470:	cmp	r0, #0
   14474:	beq	14490 <__assert_fail@plt+0x351c>
   14478:	mov	r0, r4
   1447c:	mov	r2, r6
   14480:	mov	r3, r5
   14484:	sub	sp, fp, #16
   14488:	pop	{r4, r5, r6, r7, fp, lr}
   1448c:	b	10f14 <fseeko64@plt>
   14490:	ldr	r7, [fp, #8]
   14494:	mov	r0, r4
   14498:	bl	10ef0 <fileno@plt>
   1449c:	mov	r2, r6
   144a0:	mov	r3, r5
   144a4:	str	r7, [sp]
   144a8:	bl	10e00 <lseek64@plt>
   144ac:	and	r2, r0, r1
   144b0:	cmn	r2, #1
   144b4:	beq	144d0 <__assert_fail@plt+0x355c>
   144b8:	strd	r0, [r4, #80]	; 0x50
   144bc:	ldr	r0, [r4]
   144c0:	bic	r0, r0, #16
   144c4:	str	r0, [r4]
   144c8:	mov	r0, #0
   144cc:	b	144d4 <__assert_fail@plt+0x3560>
   144d0:	mvn	r0, #0
   144d4:	sub	sp, fp, #16
   144d8:	pop	{r4, r5, r6, r7, fp, pc}
   144dc:	push	{fp, lr}
   144e0:	mov	fp, sp
   144e4:	mov	r0, #14
   144e8:	bl	10f38 <nl_langinfo@plt>
   144ec:	movw	r1, #19442	; 0x4bf2
   144f0:	cmp	r0, #0
   144f4:	movt	r1, #1
   144f8:	movne	r1, r0
   144fc:	movw	r0, #20784	; 0x5130
   14500:	ldrb	r2, [r1]
   14504:	movt	r0, #1
   14508:	cmp	r2, #0
   1450c:	movne	r0, r1
   14510:	pop	{fp, pc}
   14514:	push	{r4, r5, r6, r7, fp, lr}
   14518:	add	fp, sp, #16
   1451c:	sub	sp, sp, #8
   14520:	add	r5, sp, #4
   14524:	cmp	r0, #0
   14528:	mov	r7, r2
   1452c:	mov	r4, r1
   14530:	movne	r5, r0
   14534:	mov	r0, r5
   14538:	bl	10e30 <mbrtowc@plt>
   1453c:	mov	r6, r0
   14540:	cmp	r7, #0
   14544:	beq	14568 <__assert_fail@plt+0x35f4>
   14548:	cmn	r6, #2
   1454c:	bcc	14568 <__assert_fail@plt+0x35f4>
   14550:	mov	r0, #0
   14554:	bl	145b0 <__assert_fail@plt+0x363c>
   14558:	cmp	r0, #0
   1455c:	ldrbeq	r0, [r4]
   14560:	moveq	r6, #1
   14564:	streq	r0, [r5]
   14568:	mov	r0, r6
   1456c:	sub	sp, fp, #16
   14570:	pop	{r4, r5, r6, r7, fp, pc}
   14574:	cmp	r2, #0
   14578:	beq	145a8 <__assert_fail@plt+0x3634>
   1457c:	mvn	r3, #0
   14580:	udiv	r3, r3, r2
   14584:	cmp	r3, r1
   14588:	bcs	145a8 <__assert_fail@plt+0x3634>
   1458c:	push	{fp, lr}
   14590:	mov	fp, sp
   14594:	bl	10ec0 <__errno_location@plt>
   14598:	mov	r1, #12
   1459c:	str	r1, [r0]
   145a0:	mov	r0, #0
   145a4:	pop	{fp, pc}
   145a8:	mul	r1, r2, r1
   145ac:	b	14248 <__assert_fail@plt+0x32d4>
   145b0:	push	{r4, sl, fp, lr}
   145b4:	add	fp, sp, #8
   145b8:	sub	sp, sp, #264	; 0x108
   145bc:	add	r1, sp, #7
   145c0:	movw	r2, #257	; 0x101
   145c4:	bl	14614 <__assert_fail@plt+0x36a0>
   145c8:	mov	r4, #0
   145cc:	cmp	r0, #0
   145d0:	bne	14608 <__assert_fail@plt+0x3694>
   145d4:	movw	r1, #20790	; 0x5136
   145d8:	add	r0, sp, #7
   145dc:	movt	r1, #1
   145e0:	bl	10d58 <strcmp@plt>
   145e4:	cmp	r0, #0
   145e8:	beq	14608 <__assert_fail@plt+0x3694>
   145ec:	movw	r1, #20792	; 0x5138
   145f0:	add	r0, sp, #7
   145f4:	movt	r1, #1
   145f8:	bl	10d58 <strcmp@plt>
   145fc:	mov	r4, r0
   14600:	cmp	r0, #0
   14604:	movwne	r4, #1
   14608:	mov	r0, r4
   1460c:	sub	sp, fp, #8
   14610:	pop	{r4, sl, fp, pc}
   14614:	push	{r4, r5, r6, r7, fp, lr}
   14618:	add	fp, sp, #16
   1461c:	mov	r4, r1
   14620:	mov	r1, #0
   14624:	mov	r6, r2
   14628:	bl	10f20 <setlocale@plt>
   1462c:	cmp	r0, #0
   14630:	beq	1465c <__assert_fail@plt+0x36e8>
   14634:	mov	r7, r0
   14638:	bl	10ea8 <strlen@plt>
   1463c:	cmp	r0, r6
   14640:	bcs	14670 <__assert_fail@plt+0x36fc>
   14644:	add	r2, r0, #1
   14648:	mov	r0, r4
   1464c:	mov	r1, r7
   14650:	bl	10d94 <memcpy@plt>
   14654:	mov	r5, #0
   14658:	b	14698 <__assert_fail@plt+0x3724>
   1465c:	cmp	r6, #0
   14660:	mov	r5, #22
   14664:	movne	r0, #0
   14668:	strbne	r0, [r4]
   1466c:	b	14698 <__assert_fail@plt+0x3724>
   14670:	mov	r5, #34	; 0x22
   14674:	cmp	r6, #0
   14678:	beq	14698 <__assert_fail@plt+0x3724>
   1467c:	sub	r6, r6, #1
   14680:	mov	r0, r4
   14684:	mov	r1, r7
   14688:	mov	r2, r6
   1468c:	bl	10d94 <memcpy@plt>
   14690:	mov	r0, #0
   14694:	strb	r0, [r4, r6]
   14698:	mov	r0, r5
   1469c:	pop	{r4, r5, r6, r7, fp, pc}
   146a0:	mov	r1, #0
   146a4:	b	10f20 <setlocale@plt>
   146a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146ac:	mov	r7, r0
   146b0:	ldr	r6, [pc, #72]	; 14700 <__assert_fail@plt+0x378c>
   146b4:	ldr	r5, [pc, #72]	; 14704 <__assert_fail@plt+0x3790>
   146b8:	add	r6, pc, r6
   146bc:	add	r5, pc, r5
   146c0:	sub	r6, r6, r5
   146c4:	mov	r8, r1
   146c8:	mov	r9, r2
   146cc:	bl	10d20 <calloc@plt-0x20>
   146d0:	asrs	r6, r6, #2
   146d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   146d8:	mov	r4, #0
   146dc:	add	r4, r4, #1
   146e0:	ldr	r3, [r5], #4
   146e4:	mov	r2, r9
   146e8:	mov	r1, r8
   146ec:	mov	r0, r7
   146f0:	blx	r3
   146f4:	cmp	r6, r4
   146f8:	bne	146dc <__assert_fail@plt+0x3768>
   146fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14700:	andeq	r1, r1, ip, asr #16
   14704:	andeq	r1, r1, r4, asr #16
   14708:	bx	lr
   1470c:	ldr	r3, [pc, #12]	; 14720 <__assert_fail@plt+0x37ac>
   14710:	mov	r1, #0
   14714:	add	r3, pc, r3
   14718:	ldr	r2, [r3]
   1471c:	b	10ecc <__cxa_atexit@plt>
   14720:			; <UNDEFINED> instruction: 0x000119b8

Disassembly of section .fini:

00014724 <.fini>:
   14724:	push	{r3, lr}
   14728:	pop	{r3, pc}
