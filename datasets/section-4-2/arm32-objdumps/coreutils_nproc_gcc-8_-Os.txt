
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c40 <.init>:
   10c40:	push	{r3, lr}
   10c44:	bl	110f0 <__assert_fail@plt+0x238>
   10c48:	pop	{r3, pc}

Disassembly of section .plt:

00010c4c <calloc@plt-0x14>:
   10c4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c50:	ldr	lr, [pc, #4]	; 10c5c <calloc@plt-0x4>
   10c54:	add	lr, pc, lr
   10c58:	ldr	pc, [lr, #8]!
   10c5c:	andeq	r4, r1, r4, lsr #7

00010c60 <calloc@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #20, 20	; 0x14000
   10c68:	ldr	pc, [ip, #932]!	; 0x3a4

00010c6c <fputs_unlocked@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #20, 20	; 0x14000
   10c74:	ldr	pc, [ip, #924]!	; 0x39c

00010c78 <strcmp@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #20, 20	; 0x14000
   10c80:	ldr	pc, [ip, #916]!	; 0x394

00010c84 <fflush@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #20, 20	; 0x14000
   10c8c:	ldr	pc, [ip, #908]!	; 0x38c

00010c90 <free@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #20, 20	; 0x14000
   10c98:	ldr	pc, [ip, #900]!	; 0x384

00010c9c <_exit@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #20, 20	; 0x14000
   10ca4:	ldr	pc, [ip, #892]!	; 0x37c

00010ca8 <memcpy@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #20, 20	; 0x14000
   10cb0:	ldr	pc, [ip, #884]!	; 0x374

00010cb4 <mbsinit@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #20, 20	; 0x14000
   10cbc:	ldr	pc, [ip, #876]!	; 0x36c

00010cc0 <__sched_cpucount@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #20, 20	; 0x14000
   10cc8:	ldr	pc, [ip, #868]!	; 0x364

00010ccc <memcmp@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #20, 20	; 0x14000
   10cd4:	ldr	pc, [ip, #860]!	; 0x35c

00010cd8 <fputc_unlocked@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #20, 20	; 0x14000
   10ce0:	ldr	pc, [ip, #852]!	; 0x354

00010ce4 <dcgettext@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #20, 20	; 0x14000
   10cec:	ldr	pc, [ip, #844]!	; 0x34c

00010cf0 <sysconf@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #20, 20	; 0x14000
   10cf8:	ldr	pc, [ip, #836]!	; 0x344

00010cfc <realloc@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #20, 20	; 0x14000
   10d04:	ldr	pc, [ip, #828]!	; 0x33c

00010d08 <textdomain@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #20, 20	; 0x14000
   10d10:	ldr	pc, [ip, #820]!	; 0x334

00010d14 <iswprint@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #20, 20	; 0x14000
   10d1c:	ldr	pc, [ip, #812]!	; 0x32c

00010d20 <lseek64@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #20, 20	; 0x14000
   10d28:	ldr	pc, [ip, #804]!	; 0x324

00010d2c <__ctype_get_mb_cur_max@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #20, 20	; 0x14000
   10d34:	ldr	pc, [ip, #796]!	; 0x31c

00010d38 <__fpending@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #20, 20	; 0x14000
   10d40:	ldr	pc, [ip, #788]!	; 0x314

00010d44 <ferror_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #20, 20	; 0x14000
   10d4c:	ldr	pc, [ip, #780]!	; 0x30c

00010d50 <mbrtowc@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #20, 20	; 0x14000
   10d58:	ldr	pc, [ip, #772]!	; 0x304

00010d5c <error@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #20, 20	; 0x14000
   10d64:	ldr	pc, [ip, #764]!	; 0x2fc

00010d68 <getenv@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #20, 20	; 0x14000
   10d70:	ldr	pc, [ip, #756]!	; 0x2f4

00010d74 <malloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #20, 20	; 0x14000
   10d7c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d80 <__libc_start_main@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #20, 20	; 0x14000
   10d88:	ldr	pc, [ip, #740]!	; 0x2e4

00010d8c <__freading@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #20, 20	; 0x14000
   10d94:	ldr	pc, [ip, #732]!	; 0x2dc

00010d98 <__gmon_start__@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #20, 20	; 0x14000
   10da0:	ldr	pc, [ip, #724]!	; 0x2d4

00010da4 <getopt_long@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #716]!	; 0x2cc

00010db0 <__ctype_b_loc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #708]!	; 0x2c4

00010dbc <exit@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #20, 20	; 0x14000
   10dc4:	ldr	pc, [ip, #700]!	; 0x2bc

00010dc8 <strtoul@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #20, 20	; 0x14000
   10dd0:	ldr	pc, [ip, #692]!	; 0x2b4

00010dd4 <strlen@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #20, 20	; 0x14000
   10ddc:	ldr	pc, [ip, #684]!	; 0x2ac

00010de0 <strchr@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #20, 20	; 0x14000
   10de8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dec <__errno_location@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #20, 20	; 0x14000
   10df4:	ldr	pc, [ip, #668]!	; 0x29c

00010df8 <__cxa_atexit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #20, 20	; 0x14000
   10e00:	ldr	pc, [ip, #660]!	; 0x294

00010e04 <memset@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #20, 20	; 0x14000
   10e0c:	ldr	pc, [ip, #652]!	; 0x28c

00010e10 <__printf_chk@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #20, 20	; 0x14000
   10e18:	ldr	pc, [ip, #644]!	; 0x284

00010e1c <fileno@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #20, 20	; 0x14000
   10e24:	ldr	pc, [ip, #636]!	; 0x27c

00010e28 <strtoumax@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #20, 20	; 0x14000
   10e30:	ldr	pc, [ip, #628]!	; 0x274

00010e34 <__fprintf_chk@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #20, 20	; 0x14000
   10e3c:	ldr	pc, [ip, #620]!	; 0x26c

00010e40 <fclose@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #20, 20	; 0x14000
   10e48:	ldr	pc, [ip, #612]!	; 0x264

00010e4c <fseeko64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #20, 20	; 0x14000
   10e54:	ldr	pc, [ip, #604]!	; 0x25c

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #20, 20	; 0x14000
   10e60:	ldr	pc, [ip, #596]!	; 0x254

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #20, 20	; 0x14000
   10e6c:	ldr	pc, [ip, #588]!	; 0x24c

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #20, 20	; 0x14000
   10e78:	ldr	pc, [ip, #580]!	; 0x244

00010e7c <sched_getaffinity@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #572]!	; 0x23c

00010e88 <bindtextdomain@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #564]!	; 0x234

00010e94 <fputs@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #556]!	; 0x22c

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #548]!	; 0x224

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #540]!	; 0x21c

00010eb8 <__assert_fail@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #532]!	; 0x214

Disassembly of section .text:

00010ec4 <.text>:
   10ec4:	push	{r4, lr}
   10ec8:	bl	10dec <__errno_location@plt>
   10ecc:	mov	r3, #12
   10ed0:	str	r3, [r0]
   10ed4:	mov	r0, #0
   10ed8:	pop	{r4, pc}
   10edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ee0:	mov	r8, r0
   10ee4:	sub	sp, sp, #28
   10ee8:	mov	r5, r1
   10eec:	mov	r7, #2
   10ef0:	mov	r4, #0
   10ef4:	ldr	r0, [r1]
   10ef8:	bl	1168c <__assert_fail@plt+0x7d4>
   10efc:	ldr	r1, [pc, #372]	; 11078 <__assert_fail@plt+0x1c0>
   10f00:	mov	r0, #6
   10f04:	bl	10e58 <setlocale@plt>
   10f08:	ldr	r1, [pc, #364]	; 1107c <__assert_fail@plt+0x1c4>
   10f0c:	ldr	r0, [pc, #364]	; 11080 <__assert_fail@plt+0x1c8>
   10f10:	bl	10e88 <bindtextdomain@plt>
   10f14:	ldr	r0, [pc, #356]	; 11080 <__assert_fail@plt+0x1c8>
   10f18:	bl	10d08 <textdomain@plt>
   10f1c:	ldr	r0, [pc, #352]	; 11084 <__assert_fail@plt+0x1cc>
   10f20:	ldr	r9, [pc, #336]	; 11078 <__assert_fail@plt+0x1c0>
   10f24:	ldr	fp, [pc, #348]	; 11088 <__assert_fail@plt+0x1d0>
   10f28:	ldr	sl, [pc, #348]	; 1108c <__assert_fail@plt+0x1d4>
   10f2c:	bl	140e8 <__assert_fail@plt+0x3230>
   10f30:	mov	r6, #0
   10f34:	mov	r3, fp
   10f38:	ldr	r2, [pc, #312]	; 11078 <__assert_fail@plt+0x1c0>
   10f3c:	mov	r1, r5
   10f40:	mov	r0, r8
   10f44:	str	r6, [sp]
   10f48:	bl	10da4 <getopt_long@plt>
   10f4c:	cmn	r0, #1
   10f50:	beq	11004 <__assert_fail@plt+0x14c>
   10f54:	cmn	r0, #2
   10f58:	beq	10fd0 <__assert_fail@plt+0x118>
   10f5c:	bgt	10f78 <__assert_fail@plt+0xc0>
   10f60:	cmn	r0, #3
   10f64:	beq	10fd8 <__assert_fail@plt+0x120>
   10f68:	mov	r0, #1
   10f6c:	b	10fd4 <__assert_fail@plt+0x11c>
   10f70:	mov	r7, #0
   10f74:	b	10f34 <__assert_fail@plt+0x7c>
   10f78:	cmp	r0, #256	; 0x100
   10f7c:	beq	10f70 <__assert_fail@plt+0xb8>
   10f80:	movw	r3, #257	; 0x101
   10f84:	cmp	r0, r3
   10f88:	bne	10f68 <__assert_fail@plt+0xb0>
   10f8c:	ldr	r4, [sl]
   10f90:	mov	r2, #5
   10f94:	mov	r0, #0
   10f98:	ldr	r1, [pc, #240]	; 11090 <__assert_fail@plt+0x1d8>
   10f9c:	bl	10ce4 <dcgettext@plt>
   10fa0:	mvn	r2, #0
   10fa4:	mov	r3, #0
   10fa8:	strd	r2, [sp]
   10fac:	mov	r2, #0
   10fb0:	mov	r3, #0
   10fb4:	str	r9, [sp, #8]
   10fb8:	str	r0, [sp, #12]
   10fbc:	mov	r0, r4
   10fc0:	str	r6, [sp, #16]
   10fc4:	bl	1358c <__assert_fail@plt+0x26d4>
   10fc8:	mov	r4, r0
   10fcc:	b	10f30 <__assert_fail@plt+0x78>
   10fd0:	mov	r0, #0
   10fd4:	bl	111a4 <__assert_fail@plt+0x2ec>
   10fd8:	ldr	r3, [pc, #180]	; 11094 <__assert_fail@plt+0x1dc>
   10fdc:	ldr	r0, [pc, #180]	; 11098 <__assert_fail@plt+0x1e0>
   10fe0:	ldr	r2, [pc, #180]	; 1109c <__assert_fail@plt+0x1e4>
   10fe4:	stm	sp, {r3, r6}
   10fe8:	ldr	r3, [pc, #176]	; 110a0 <__assert_fail@plt+0x1e8>
   10fec:	ldr	r1, [pc, #176]	; 110a4 <__assert_fail@plt+0x1ec>
   10ff0:	ldr	r0, [r0]
   10ff4:	ldr	r3, [r3]
   10ff8:	bl	130d8 <__assert_fail@plt+0x2220>
   10ffc:	mov	r0, #0
   11000:	bl	10dbc <exit@plt>
   11004:	ldr	r6, [pc, #156]	; 110a8 <__assert_fail@plt+0x1f0>
   11008:	ldr	r3, [r6]
   1100c:	cmp	r3, r8
   11010:	beq	1104c <__assert_fail@plt+0x194>
   11014:	mov	r2, #5
   11018:	ldr	r1, [pc, #140]	; 110ac <__assert_fail@plt+0x1f4>
   1101c:	mov	r0, #0
   11020:	bl	10ce4 <dcgettext@plt>
   11024:	ldr	r3, [r6]
   11028:	mov	r4, r0
   1102c:	ldr	r0, [r5, r3, lsl #2]
   11030:	bl	12c8c <__assert_fail@plt+0x1dd4>
   11034:	mov	r1, #0
   11038:	mov	r3, r0
   1103c:	mov	r2, r4
   11040:	mov	r0, r1
   11044:	bl	10d5c <error@plt>
   11048:	b	10f68 <__assert_fail@plt+0xb0>
   1104c:	mov	r0, r7
   11050:	bl	115b0 <__assert_fail@plt+0x6f8>
   11054:	ldr	r1, [pc, #84]	; 110b0 <__assert_fail@plt+0x1f8>
   11058:	cmp	r4, r0
   1105c:	subcc	r2, r0, r4
   11060:	movcs	r2, #1
   11064:	mov	r0, #1
   11068:	bl	10e10 <__printf_chk@plt>
   1106c:	mov	r0, #0
   11070:	add	sp, sp, #28
   11074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11078:	andeq	r4, r1, r7, asr r2
   1107c:	andeq	r4, r1, r6, lsl r4
   11080:	andeq	r4, r1, r3, ror r3
   11084:	andeq	r1, r1, r0, lsl #8
   11088:	andeq	r4, r1, r4, asr #2
   1108c:	andeq	r5, r2, r8, asr #2
   11090:	andeq	r4, r1, r0, asr #8
   11094:	andeq	r4, r1, lr, lsr #8
   11098:	andeq	r5, r2, r4, asr #2
   1109c:	andeq	r4, r1, pc, ror #6
   110a0:	andeq	r5, r2, r4, ror #1
   110a4:	muleq	r1, r4, r1
   110a8:	andeq	r5, r2, r8, lsr r1
   110ac:	andeq	r4, r1, pc, asr #8
   110b0:	andeq	r4, r1, r0, ror #8
   110b4:	mov	fp, #0
   110b8:	mov	lr, #0
   110bc:	pop	{r1}		; (ldr r1, [sp], #4)
   110c0:	mov	r2, sp
   110c4:	push	{r2}		; (str r2, [sp, #-4]!)
   110c8:	push	{r0}		; (str r0, [sp, #-4]!)
   110cc:	ldr	ip, [pc, #16]	; 110e4 <__assert_fail@plt+0x22c>
   110d0:	push	{ip}		; (str ip, [sp, #-4]!)
   110d4:	ldr	r0, [pc, #12]	; 110e8 <__assert_fail@plt+0x230>
   110d8:	ldr	r3, [pc, #12]	; 110ec <__assert_fail@plt+0x234>
   110dc:	bl	10d80 <__libc_start_main@plt>
   110e0:	bl	10eac <abort@plt>
   110e4:	andeq	r4, r1, r4, ror #1
   110e8:	ldrdeq	r0, [r1], -ip
   110ec:	andeq	r4, r1, r4, lsl #1
   110f0:	ldr	r3, [pc, #20]	; 1110c <__assert_fail@plt+0x254>
   110f4:	ldr	r2, [pc, #20]	; 11110 <__assert_fail@plt+0x258>
   110f8:	add	r3, pc, r3
   110fc:	ldr	r2, [r3, r2]
   11100:	cmp	r2, #0
   11104:	bxeq	lr
   11108:	b	10d98 <__gmon_start__@plt>
   1110c:	andeq	r3, r1, r0, lsl #30
   11110:	ldrdeq	r0, [r0], -r8
   11114:	ldr	r0, [pc, #24]	; 11134 <__assert_fail@plt+0x27c>
   11118:	ldr	r3, [pc, #24]	; 11138 <__assert_fail@plt+0x280>
   1111c:	cmp	r3, r0
   11120:	bxeq	lr
   11124:	ldr	r3, [pc, #16]	; 1113c <__assert_fail@plt+0x284>
   11128:	cmp	r3, #0
   1112c:	bxeq	lr
   11130:	bx	r3
   11134:	andeq	r5, r2, ip, lsr #2
   11138:	andeq	r5, r2, ip, lsr #2
   1113c:	andeq	r0, r0, r0
   11140:	ldr	r0, [pc, #36]	; 1116c <__assert_fail@plt+0x2b4>
   11144:	ldr	r1, [pc, #36]	; 11170 <__assert_fail@plt+0x2b8>
   11148:	sub	r1, r1, r0
   1114c:	asr	r1, r1, #2
   11150:	add	r1, r1, r1, lsr #31
   11154:	asrs	r1, r1, #1
   11158:	bxeq	lr
   1115c:	ldr	r3, [pc, #16]	; 11174 <__assert_fail@plt+0x2bc>
   11160:	cmp	r3, #0
   11164:	bxeq	lr
   11168:	bx	r3
   1116c:	andeq	r5, r2, ip, lsr #2
   11170:	andeq	r5, r2, ip, lsr #2
   11174:	andeq	r0, r0, r0
   11178:	push	{r4, lr}
   1117c:	ldr	r4, [pc, #24]	; 1119c <__assert_fail@plt+0x2e4>
   11180:	ldrb	r3, [r4]
   11184:	cmp	r3, #0
   11188:	popne	{r4, pc}
   1118c:	bl	11114 <__assert_fail@plt+0x25c>
   11190:	mov	r3, #1
   11194:	strb	r3, [r4]
   11198:	pop	{r4, pc}
   1119c:	andeq	r5, r2, ip, asr #2
   111a0:	b	11140 <__assert_fail@plt+0x288>
   111a4:	subs	r5, r0, #0
   111a8:	push	{r7, lr}
   111ac:	sub	sp, sp, #56	; 0x38
   111b0:	ldr	r4, [pc, #472]	; 11390 <__assert_fail@plt+0x4d8>
   111b4:	beq	111ec <__assert_fail@plt+0x334>
   111b8:	mov	r2, #5
   111bc:	mov	r0, #0
   111c0:	ldr	r3, [pc, #460]	; 11394 <__assert_fail@plt+0x4dc>
   111c4:	ldr	r1, [pc, #460]	; 11398 <__assert_fail@plt+0x4e0>
   111c8:	ldr	r6, [r3]
   111cc:	bl	10ce4 <dcgettext@plt>
   111d0:	mov	r2, r0
   111d4:	mov	r1, #1
   111d8:	ldr	r3, [r4]
   111dc:	mov	r0, r6
   111e0:	bl	10e34 <__fprintf_chk@plt>
   111e4:	mov	r0, r5
   111e8:	bl	10dbc <exit@plt>
   111ec:	mov	r2, #5
   111f0:	ldr	r1, [pc, #420]	; 1139c <__assert_fail@plt+0x4e4>
   111f4:	mov	r6, sp
   111f8:	bl	10ce4 <dcgettext@plt>
   111fc:	ldr	r2, [r4]
   11200:	mov	r1, r0
   11204:	mov	r0, #1
   11208:	bl	10e10 <__printf_chk@plt>
   1120c:	ldr	r4, [pc, #396]	; 113a0 <__assert_fail@plt+0x4e8>
   11210:	mov	r2, #5
   11214:	mov	r0, r5
   11218:	ldr	r1, [pc, #388]	; 113a4 <__assert_fail@plt+0x4ec>
   1121c:	bl	10ce4 <dcgettext@plt>
   11220:	ldr	r7, [pc, #384]	; 113a8 <__assert_fail@plt+0x4f0>
   11224:	ldr	r1, [r4]
   11228:	bl	10c6c <fputs_unlocked@plt>
   1122c:	mov	r2, #5
   11230:	ldr	r1, [pc, #372]	; 113ac <__assert_fail@plt+0x4f4>
   11234:	mov	r0, r5
   11238:	bl	10ce4 <dcgettext@plt>
   1123c:	ldr	r1, [r4]
   11240:	bl	10c6c <fputs_unlocked@plt>
   11244:	mov	r2, #5
   11248:	ldr	r1, [pc, #352]	; 113b0 <__assert_fail@plt+0x4f8>
   1124c:	mov	r0, r5
   11250:	bl	10ce4 <dcgettext@plt>
   11254:	ldr	r1, [r4]
   11258:	bl	10c6c <fputs_unlocked@plt>
   1125c:	mov	r2, #5
   11260:	ldr	r1, [pc, #332]	; 113b4 <__assert_fail@plt+0x4fc>
   11264:	mov	r0, r5
   11268:	bl	10ce4 <dcgettext@plt>
   1126c:	ldr	r1, [r4]
   11270:	bl	10c6c <fputs_unlocked@plt>
   11274:	ldr	lr, [pc, #316]	; 113b8 <__assert_fail@plt+0x500>
   11278:	mov	ip, sp
   1127c:	ldm	lr!, {r0, r1, r2, r3}
   11280:	stmia	ip!, {r0, r1, r2, r3}
   11284:	ldm	lr!, {r0, r1, r2, r3}
   11288:	stmia	ip!, {r0, r1, r2, r3}
   1128c:	ldm	lr!, {r0, r1, r2, r3}
   11290:	stmia	ip!, {r0, r1, r2, r3}
   11294:	ldm	lr, {r0, r1}
   11298:	stm	ip, {r0, r1}
   1129c:	ldr	r1, [r6]
   112a0:	cmp	r1, #0
   112a4:	bne	11348 <__assert_fail@plt+0x490>
   112a8:	ldr	r6, [r6, #4]
   112ac:	mov	r2, #5
   112b0:	mov	r0, #0
   112b4:	ldr	r7, [pc, #236]	; 113a8 <__assert_fail@plt+0x4f0>
   112b8:	ldr	r1, [pc, #252]	; 113bc <__assert_fail@plt+0x504>
   112bc:	cmp	r6, #0
   112c0:	moveq	r6, r7
   112c4:	bl	10ce4 <dcgettext@plt>
   112c8:	mov	r1, r0
   112cc:	ldr	r3, [pc, #236]	; 113c0 <__assert_fail@plt+0x508>
   112d0:	mov	r0, #1
   112d4:	ldr	r2, [pc, #232]	; 113c4 <__assert_fail@plt+0x50c>
   112d8:	bl	10e10 <__printf_chk@plt>
   112dc:	mov	r1, #0
   112e0:	mov	r0, #5
   112e4:	bl	10e58 <setlocale@plt>
   112e8:	cmp	r0, #0
   112ec:	bne	11360 <__assert_fail@plt+0x4a8>
   112f0:	mov	r2, #5
   112f4:	ldr	r1, [pc, #204]	; 113c8 <__assert_fail@plt+0x510>
   112f8:	mov	r0, #0
   112fc:	bl	10ce4 <dcgettext@plt>
   11300:	mov	r1, r0
   11304:	ldr	r3, [pc, #156]	; 113a8 <__assert_fail@plt+0x4f0>
   11308:	mov	r0, #1
   1130c:	ldr	r2, [pc, #172]	; 113c0 <__assert_fail@plt+0x508>
   11310:	bl	10e10 <__printf_chk@plt>
   11314:	mov	r2, #5
   11318:	ldr	r1, [pc, #172]	; 113cc <__assert_fail@plt+0x514>
   1131c:	mov	r0, #0
   11320:	bl	10ce4 <dcgettext@plt>
   11324:	ldr	r2, [pc, #164]	; 113d0 <__assert_fail@plt+0x518>
   11328:	cmp	r6, r7
   1132c:	mov	r1, r0
   11330:	mov	r0, #1
   11334:	ldr	r3, [pc, #152]	; 113d4 <__assert_fail@plt+0x51c>
   11338:	moveq	r3, r2
   1133c:	mov	r2, r6
   11340:	bl	10e10 <__printf_chk@plt>
   11344:	b	111e4 <__assert_fail@plt+0x32c>
   11348:	mov	r0, r7
   1134c:	bl	10c78 <strcmp@plt>
   11350:	cmp	r0, #0
   11354:	beq	112a8 <__assert_fail@plt+0x3f0>
   11358:	add	r6, r6, #8
   1135c:	b	1129c <__assert_fail@plt+0x3e4>
   11360:	mov	r2, #3
   11364:	ldr	r1, [pc, #108]	; 113d8 <__assert_fail@plt+0x520>
   11368:	bl	10ea0 <strncmp@plt>
   1136c:	cmp	r0, #0
   11370:	beq	112f0 <__assert_fail@plt+0x438>
   11374:	mov	r2, #5
   11378:	ldr	r1, [pc, #92]	; 113dc <__assert_fail@plt+0x524>
   1137c:	mov	r0, #0
   11380:	bl	10ce4 <dcgettext@plt>
   11384:	ldr	r1, [r4]
   11388:	bl	10c6c <fputs_unlocked@plt>
   1138c:	b	112f0 <__assert_fail@plt+0x438>
   11390:	andeq	r5, r2, r8, asr r1
   11394:	andeq	r5, r2, r0, asr #2
   11398:	muleq	r1, sl, r1
   1139c:	andeq	r4, r1, r1, asr #3
   113a0:	andeq	r5, r2, r4, asr #2
   113a4:	ldrdeq	r4, [r1], -r8
   113a8:	muleq	r1, r4, r1
   113ac:	andeq	r4, r1, r8, asr r2
   113b0:	andeq	r4, r1, sp, asr #5
   113b4:	strdeq	r4, [r1], -sl
   113b8:	andeq	r4, r1, ip, lsl #2
   113bc:	andeq	r4, r1, r0, lsr r3
   113c0:	andeq	r4, r1, r7, asr #6
   113c4:	andeq	r4, r1, pc, ror #6
   113c8:	andeq	r4, r1, r8, asr #7
   113cc:	andeq	r4, r1, r3, ror #7
   113d0:	andeq	r4, r1, r1, lsl #9
   113d4:	andeq	r4, r1, r7, asr r2
   113d8:	andeq	r4, r1, sp, ror r3
   113dc:	andeq	r4, r1, r1, lsl #7
   113e0:	ldr	r3, [pc, #4]	; 113ec <__assert_fail@plt+0x534>
   113e4:	str	r0, [r3]
   113e8:	bx	lr
   113ec:	andeq	r5, r2, r0, asr r1
   113f0:	ldr	r3, [pc, #4]	; 113fc <__assert_fail@plt+0x544>
   113f4:	strb	r0, [r3, #4]
   113f8:	bx	lr
   113fc:	andeq	r5, r2, r0, asr r1
   11400:	ldr	r3, [pc, #176]	; 114b8 <__assert_fail@plt+0x600>
   11404:	push	{r0, r1, r4, r5, r6, lr}
   11408:	ldr	r0, [r3]
   1140c:	bl	13c7c <__assert_fail@plt+0x2dc4>
   11410:	cmp	r0, #0
   11414:	beq	1149c <__assert_fail@plt+0x5e4>
   11418:	ldr	r4, [pc, #156]	; 114bc <__assert_fail@plt+0x604>
   1141c:	bl	10dec <__errno_location@plt>
   11420:	mov	r5, r0
   11424:	ldrb	r6, [r4, #4]
   11428:	cmp	r6, #0
   1142c:	beq	1143c <__assert_fail@plt+0x584>
   11430:	ldr	r3, [r0]
   11434:	cmp	r3, #32
   11438:	beq	1149c <__assert_fail@plt+0x5e4>
   1143c:	mov	r2, #5
   11440:	ldr	r1, [pc, #120]	; 114c0 <__assert_fail@plt+0x608>
   11444:	mov	r0, #0
   11448:	bl	10ce4 <dcgettext@plt>
   1144c:	mov	r6, r0
   11450:	ldr	r0, [r4]
   11454:	cmp	r0, #0
   11458:	beq	11488 <__assert_fail@plt+0x5d0>
   1145c:	ldr	r4, [r5]
   11460:	bl	12b3c <__assert_fail@plt+0x1c84>
   11464:	mov	r3, r0
   11468:	ldr	r2, [pc, #84]	; 114c4 <__assert_fail@plt+0x60c>
   1146c:	mov	r0, #0
   11470:	str	r6, [sp]
   11474:	mov	r1, r4
   11478:	bl	10d5c <error@plt>
   1147c:	ldr	r3, [pc, #68]	; 114c8 <__assert_fail@plt+0x610>
   11480:	ldr	r0, [r3]
   11484:	bl	10c9c <_exit@plt>
   11488:	mov	r3, r6
   1148c:	ldr	r2, [pc, #56]	; 114cc <__assert_fail@plt+0x614>
   11490:	ldr	r1, [r5]
   11494:	bl	10d5c <error@plt>
   11498:	b	1147c <__assert_fail@plt+0x5c4>
   1149c:	ldr	r3, [pc, #44]	; 114d0 <__assert_fail@plt+0x618>
   114a0:	ldr	r0, [r3]
   114a4:	bl	13c7c <__assert_fail@plt+0x2dc4>
   114a8:	cmp	r0, #0
   114ac:	bne	1147c <__assert_fail@plt+0x5c4>
   114b0:	add	sp, sp, #8
   114b4:	pop	{r4, r5, r6, pc}
   114b8:	andeq	r5, r2, r4, asr #2
   114bc:	andeq	r5, r2, r0, asr r1
   114c0:	andeq	r4, r1, fp, ror #9
   114c4:	strdeq	r4, [r1], -r7
   114c8:	andeq	r5, r2, r8, ror #1
   114cc:	strdeq	r4, [r1], -fp
   114d0:	andeq	r5, r2, r0, asr #2
   114d4:	push	{lr}		; (str lr, [sp, #-4]!)
   114d8:	sub	sp, sp, #132	; 0x84
   114dc:	mov	r1, #128	; 0x80
   114e0:	mov	r2, sp
   114e4:	mov	r0, #0
   114e8:	bl	10e7c <sched_getaffinity@plt>
   114ec:	cmp	r0, #0
   114f0:	bne	11508 <__assert_fail@plt+0x650>
   114f4:	mov	r1, sp
   114f8:	mov	r0, #128	; 0x80
   114fc:	bl	10cc0 <__sched_cpucount@plt>
   11500:	cmp	r0, #0
   11504:	bne	1150c <__assert_fail@plt+0x654>
   11508:	mov	r0, #0
   1150c:	add	sp, sp, #132	; 0x84
   11510:	pop	{pc}		; (ldr pc, [sp], #4)
   11514:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11518:	mov	r6, r0
   1151c:	mov	r7, r6
   11520:	ldrb	r5, [r6], #1
   11524:	cmp	r5, #0
   11528:	beq	1156c <__assert_fail@plt+0x6b4>
   1152c:	mov	r0, r5
   11530:	bl	13be0 <__assert_fail@plt+0x2d28>
   11534:	subs	r4, r0, #0
   11538:	bne	1151c <__assert_fail@plt+0x664>
   1153c:	sub	r5, r5, #48	; 0x30
   11540:	cmp	r5, #9
   11544:	bhi	11570 <__assert_fail@plt+0x6b8>
   11548:	mov	r2, #10
   1154c:	add	r1, sp, #4
   11550:	str	r4, [sp, #4]
   11554:	mov	r0, r7
   11558:	bl	10dc8 <strtoul@plt>
   1155c:	ldr	r3, [sp, #4]
   11560:	mov	r4, r0
   11564:	cmp	r3, #0
   11568:	bne	11584 <__assert_fail@plt+0x6cc>
   1156c:	mov	r4, #0
   11570:	mov	r0, r4
   11574:	add	sp, sp, #12
   11578:	pop	{r4, r5, r6, r7, pc}
   1157c:	add	r5, r5, #1
   11580:	str	r5, [sp, #4]
   11584:	ldr	r5, [sp, #4]
   11588:	ldrb	r6, [r5]
   1158c:	cmp	r6, #0
   11590:	beq	11570 <__assert_fail@plt+0x6b8>
   11594:	mov	r0, r6
   11598:	bl	13be0 <__assert_fail@plt+0x2d28>
   1159c:	cmp	r0, #0
   115a0:	bne	1157c <__assert_fail@plt+0x6c4>
   115a4:	cmp	r6, #44	; 0x2c
   115a8:	bne	1156c <__assert_fail@plt+0x6b4>
   115ac:	b	11570 <__assert_fail@plt+0x6b8>
   115b0:	cmp	r0, #2
   115b4:	push	{r4, r5, r6, lr}
   115b8:	bne	1160c <__assert_fail@plt+0x754>
   115bc:	ldr	r0, [pc, #192]	; 11684 <__assert_fail@plt+0x7cc>
   115c0:	bl	10d68 <getenv@plt>
   115c4:	subs	r5, r0, #0
   115c8:	beq	115d4 <__assert_fail@plt+0x71c>
   115cc:	bl	11514 <__assert_fail@plt+0x65c>
   115d0:	mov	r5, r0
   115d4:	ldr	r0, [pc, #172]	; 11688 <__assert_fail@plt+0x7d0>
   115d8:	bl	10d68 <getenv@plt>
   115dc:	cmp	r0, #0
   115e0:	beq	115f0 <__assert_fail@plt+0x738>
   115e4:	bl	11514 <__assert_fail@plt+0x65c>
   115e8:	subs	r4, r0, #0
   115ec:	bne	115f4 <__assert_fail@plt+0x73c>
   115f0:	mvn	r4, #0
   115f4:	cmp	r5, #0
   115f8:	beq	11618 <__assert_fail@plt+0x760>
   115fc:	cmp	r4, r5
   11600:	movcc	r0, r4
   11604:	movcs	r0, r5
   11608:	pop	{r4, r5, r6, pc}
   1160c:	cmp	r0, #1
   11610:	bne	11640 <__assert_fail@plt+0x788>
   11614:	mvn	r4, #0
   11618:	bl	114d4 <__assert_fail@plt+0x61c>
   1161c:	cmp	r0, #0
   11620:	bne	11634 <__assert_fail@plt+0x77c>
   11624:	mov	r0, #84	; 0x54
   11628:	bl	10cf0 <sysconf@plt>
   1162c:	cmp	r0, #1
   11630:	movlt	r0, #1
   11634:	cmp	r0, r4
   11638:	movcs	r0, r4
   1163c:	pop	{r4, r5, r6, pc}
   11640:	mov	r0, #83	; 0x53
   11644:	bl	10cf0 <sysconf@plt>
   11648:	sub	r3, r0, #1
   1164c:	mov	r4, r0
   11650:	cmp	r3, #1
   11654:	bhi	11668 <__assert_fail@plt+0x7b0>
   11658:	bl	114d4 <__assert_fail@plt+0x61c>
   1165c:	cmp	r4, r0
   11660:	bcs	11678 <__assert_fail@plt+0x7c0>
   11664:	mov	r4, r0
   11668:	cmp	r4, #0
   1166c:	mvnle	r4, #0
   11670:	movle	r0, #1
   11674:	ble	11634 <__assert_fail@plt+0x77c>
   11678:	mov	r0, r4
   1167c:	mvn	r4, #0
   11680:	b	11634 <__assert_fail@plt+0x77c>
   11684:	strdeq	r4, [r1], -lr
   11688:	andeq	r4, r1, lr, lsl #10
   1168c:	push	{r4, r5, r6, lr}
   11690:	subs	r4, r0, #0
   11694:	bne	116ac <__assert_fail@plt+0x7f4>
   11698:	ldr	r3, [pc, #124]	; 1171c <__assert_fail@plt+0x864>
   1169c:	ldr	r0, [pc, #124]	; 11720 <__assert_fail@plt+0x868>
   116a0:	ldr	r1, [r3]
   116a4:	bl	10e94 <fputs@plt>
   116a8:	bl	10eac <abort@plt>
   116ac:	mov	r1, #47	; 0x2f
   116b0:	bl	10e64 <strrchr@plt>
   116b4:	subs	r6, r0, #0
   116b8:	beq	11708 <__assert_fail@plt+0x850>
   116bc:	add	r5, r6, #1
   116c0:	sub	r3, r5, r4
   116c4:	cmp	r3, #6
   116c8:	ble	11708 <__assert_fail@plt+0x850>
   116cc:	mov	r2, #7
   116d0:	ldr	r1, [pc, #76]	; 11724 <__assert_fail@plt+0x86c>
   116d4:	sub	r0, r6, #6
   116d8:	bl	10ea0 <strncmp@plt>
   116dc:	cmp	r0, #0
   116e0:	bne	11708 <__assert_fail@plt+0x850>
   116e4:	mov	r2, #3
   116e8:	ldr	r1, [pc, #56]	; 11728 <__assert_fail@plt+0x870>
   116ec:	mov	r0, r5
   116f0:	bl	10ea0 <strncmp@plt>
   116f4:	cmp	r0, #0
   116f8:	ldreq	r3, [pc, #44]	; 1172c <__assert_fail@plt+0x874>
   116fc:	addeq	r4, r6, #4
   11700:	movne	r4, r5
   11704:	streq	r4, [r3]
   11708:	ldr	r3, [pc, #32]	; 11730 <__assert_fail@plt+0x878>
   1170c:	str	r4, [r3]
   11710:	ldr	r3, [pc, #28]	; 11734 <__assert_fail@plt+0x87c>
   11714:	str	r4, [r3]
   11718:	pop	{r4, r5, r6, pc}
   1171c:	andeq	r5, r2, r0, asr #2
   11720:	andeq	r4, r1, pc, lsl r5
   11724:	andeq	r4, r1, r7, asr r5
   11728:	andeq	r4, r1, pc, asr r5
   1172c:	andeq	r5, r2, r0, lsr r1
   11730:	andeq	r5, r2, r8, asr r1
   11734:	andeq	r5, r2, r4, lsr r1
   11738:	push	{r4, lr}
   1173c:	mov	r2, #48	; 0x30
   11740:	mov	r4, r1
   11744:	mov	r1, #0
   11748:	bl	10e04 <memset@plt>
   1174c:	cmp	r4, #10
   11750:	bne	11758 <__assert_fail@plt+0x8a0>
   11754:	bl	10eac <abort@plt>
   11758:	str	r4, [r0]
   1175c:	pop	{r4, pc}
   11760:	push	{r4, r5, r6, lr}
   11764:	mov	r2, #5
   11768:	mov	r6, r0
   1176c:	mov	r5, r1
   11770:	mov	r1, r0
   11774:	mov	r0, #0
   11778:	bl	10ce4 <dcgettext@plt>
   1177c:	cmp	r6, r0
   11780:	mov	r4, r0
   11784:	bne	117f4 <__assert_fail@plt+0x93c>
   11788:	bl	13ef4 <__assert_fail@plt+0x303c>
   1178c:	ldrb	r3, [r0]
   11790:	bic	r3, r3, #32
   11794:	cmp	r3, #85	; 0x55
   11798:	bne	117fc <__assert_fail@plt+0x944>
   1179c:	ldrb	r3, [r0, #1]
   117a0:	bic	r3, r3, #32
   117a4:	cmp	r3, #84	; 0x54
   117a8:	bne	1186c <__assert_fail@plt+0x9b4>
   117ac:	ldrb	r3, [r0, #2]
   117b0:	bic	r3, r3, #32
   117b4:	cmp	r3, #70	; 0x46
   117b8:	bne	1186c <__assert_fail@plt+0x9b4>
   117bc:	ldrb	r3, [r0, #3]
   117c0:	cmp	r3, #45	; 0x2d
   117c4:	bne	1186c <__assert_fail@plt+0x9b4>
   117c8:	ldrb	r3, [r0, #4]
   117cc:	cmp	r3, #56	; 0x38
   117d0:	bne	1186c <__assert_fail@plt+0x9b4>
   117d4:	ldrb	r3, [r0, #5]
   117d8:	cmp	r3, #0
   117dc:	bne	1186c <__assert_fail@plt+0x9b4>
   117e0:	ldrb	r2, [r4]
   117e4:	ldr	r3, [pc, #144]	; 1187c <__assert_fail@plt+0x9c4>
   117e8:	ldr	r4, [pc, #144]	; 11880 <__assert_fail@plt+0x9c8>
   117ec:	cmp	r2, #96	; 0x60
   117f0:	movne	r4, r3
   117f4:	mov	r0, r4
   117f8:	pop	{r4, r5, r6, pc}
   117fc:	cmp	r3, #71	; 0x47
   11800:	bne	1186c <__assert_fail@plt+0x9b4>
   11804:	ldrb	r3, [r0, #1]
   11808:	bic	r3, r3, #32
   1180c:	cmp	r3, #66	; 0x42
   11810:	bne	1186c <__assert_fail@plt+0x9b4>
   11814:	ldrb	r3, [r0, #2]
   11818:	cmp	r3, #49	; 0x31
   1181c:	bne	1186c <__assert_fail@plt+0x9b4>
   11820:	ldrb	r3, [r0, #3]
   11824:	cmp	r3, #56	; 0x38
   11828:	bne	1186c <__assert_fail@plt+0x9b4>
   1182c:	ldrb	r3, [r0, #4]
   11830:	cmp	r3, #48	; 0x30
   11834:	bne	1186c <__assert_fail@plt+0x9b4>
   11838:	ldrb	r3, [r0, #5]
   1183c:	cmp	r3, #51	; 0x33
   11840:	bne	1186c <__assert_fail@plt+0x9b4>
   11844:	ldrb	r3, [r0, #6]
   11848:	cmp	r3, #48	; 0x30
   1184c:	bne	1186c <__assert_fail@plt+0x9b4>
   11850:	ldrb	r3, [r0, #7]
   11854:	cmp	r3, #0
   11858:	bne	1186c <__assert_fail@plt+0x9b4>
   1185c:	ldrb	r2, [r4]
   11860:	ldr	r3, [pc, #28]	; 11884 <__assert_fail@plt+0x9cc>
   11864:	ldr	r4, [pc, #28]	; 11888 <__assert_fail@plt+0x9d0>
   11868:	b	117ec <__assert_fail@plt+0x934>
   1186c:	ldr	r4, [pc, #24]	; 1188c <__assert_fail@plt+0x9d4>
   11870:	cmp	r5, #9
   11874:	ldr	r3, [pc, #20]	; 11890 <__assert_fail@plt+0x9d8>
   11878:	b	117f0 <__assert_fail@plt+0x938>
   1187c:			; <UNDEFINED> instruction: 0x000145ba
   11880:	andeq	r4, r1, r5, asr #11
   11884:			; <UNDEFINED> instruction: 0x000145be
   11888:	andeq	r4, r1, r1, asr #11
   1188c:			; <UNDEFINED> instruction: 0x000145b8
   11890:	andeq	r4, r1, r9, asr #11
   11894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11898:	sub	sp, sp, #108	; 0x6c
   1189c:	mov	r8, r0
   118a0:	mov	r5, r1
   118a4:	mov	r6, #0
   118a8:	str	r3, [sp, #40]	; 0x28
   118ac:	str	r2, [sp, #48]	; 0x30
   118b0:	ldr	sl, [sp, #144]	; 0x90
   118b4:	bl	10d2c <__ctype_get_mb_cur_max@plt>
   118b8:	ldr	r3, [sp, #148]	; 0x94
   118bc:	str	r6, [sp, #24]
   118c0:	str	r6, [sp, #32]
   118c4:	str	r6, [sp, #44]	; 0x2c
   118c8:	str	r6, [sp, #52]	; 0x34
   118cc:	ubfx	r7, r3, #1, #1
   118d0:	mov	r3, #1
   118d4:	str	r6, [sp, #60]	; 0x3c
   118d8:	str	r3, [sp, #72]	; 0x48
   118dc:	str	r0, [sp, #76]	; 0x4c
   118e0:	cmp	sl, #10
   118e4:	ldrls	pc, [pc, sl, lsl #2]
   118e8:	b	11b2c <__assert_fail@plt+0xc74>
   118ec:	andeq	r1, r1, r8, lsl r9
   118f0:	andeq	r1, r1, r4, asr #22
   118f4:	andeq	r1, r1, r8, asr #21
   118f8:	andeq	r1, r1, r0, ror #21
   118fc:			; <UNDEFINED> instruction: 0x00011ab0
   11900:	andeq	r1, r1, r8, lsl #20
   11904:	andeq	r1, r1, r8, ror #19
   11908:	andeq	r1, r1, r0, lsr fp
   1190c:	andeq	r1, r1, r8, lsr sl
   11910:	andeq	r1, r1, r8, lsr sl
   11914:	andeq	r1, r1, r8, lsr sl
   11918:	mov	r4, sl
   1191c:	mov	r7, #0
   11920:	mov	r9, r5
   11924:	mov	r3, #0
   11928:	str	r6, [sp, #68]	; 0x44
   1192c:	str	r3, [sp, #28]
   11930:	ldr	r3, [sp, #40]	; 0x28
   11934:	cmn	r3, #1
   11938:	bne	124d8 <__assert_fail@plt+0x1620>
   1193c:	ldr	r2, [sp, #28]
   11940:	ldr	r3, [sp, #48]	; 0x30
   11944:	ldrb	r3, [r3, r2]
   11948:	adds	r3, r3, #0
   1194c:	movne	r3, #1
   11950:	str	r3, [sp, #36]	; 0x24
   11954:	ldr	r3, [sp, #36]	; 0x24
   11958:	cmp	r3, #0
   1195c:	bne	11b68 <__assert_fail@plt+0xcb0>
   11960:	sub	r3, sl, #2
   11964:	cmp	r4, #0
   11968:	clz	r3, r3
   1196c:	movne	r2, #0
   11970:	lsr	r3, r3, #5
   11974:	andeq	r2, r3, r7
   11978:	cmp	r2, #0
   1197c:	bne	11d2c <__assert_fail@plt+0xe74>
   11980:	eor	r7, r7, #1
   11984:	ands	r3, r3, r7
   11988:	beq	12550 <__assert_fail@plt+0x1698>
   1198c:	ldr	r2, [sp, #68]	; 0x44
   11990:	cmp	r2, #0
   11994:	beq	12518 <__assert_fail@plt+0x1660>
   11998:	ldr	r3, [sp, #72]	; 0x48
   1199c:	cmp	r3, #0
   119a0:	beq	124ec <__assert_fail@plt+0x1634>
   119a4:	ldr	r2, [sp, #48]	; 0x30
   119a8:	ldr	r3, [sp, #160]	; 0xa0
   119ac:	ldr	r1, [sp, #60]	; 0x3c
   119b0:	str	r3, [sp, #16]
   119b4:	ldr	r3, [sp, #156]	; 0x9c
   119b8:	str	r3, [sp, #12]
   119bc:	ldr	r3, [sp, #152]	; 0x98
   119c0:	str	r3, [sp, #8]
   119c4:	ldr	r3, [sp, #148]	; 0x94
   119c8:	str	r3, [sp, #4]
   119cc:	mov	r3, #5
   119d0:	str	r3, [sp]
   119d4:	ldr	r3, [sp, #40]	; 0x28
   119d8:	mov	r0, r8
   119dc:	bl	11894 <__assert_fail@plt+0x9dc>
   119e0:	mov	r4, r0
   119e4:	b	12544 <__assert_fail@plt+0x168c>
   119e8:	ldr	r3, [pc, #2948]	; 12574 <__assert_fail@plt+0x16bc>
   119ec:	mov	r7, #1
   119f0:	mov	r4, #0
   119f4:	mov	sl, #5
   119f8:	str	r7, [sp, #24]
   119fc:	str	r7, [sp, #32]
   11a00:	str	r3, [sp, #44]	; 0x2c
   11a04:	b	11920 <__assert_fail@plt+0xa68>
   11a08:	cmp	r7, #0
   11a0c:	bne	11b50 <__assert_fail@plt+0xc98>
   11a10:	cmp	r5, #0
   11a14:	mov	r4, #1
   11a18:	movne	r3, #34	; 0x22
   11a1c:	strbne	r3, [r8]
   11a20:	mov	r3, #1
   11a24:	str	r3, [sp, #24]
   11a28:	str	r3, [sp, #32]
   11a2c:	ldr	r3, [pc, #2880]	; 12574 <__assert_fail@plt+0x16bc>
   11a30:	str	r3, [sp, #44]	; 0x2c
   11a34:	b	11920 <__assert_fail@plt+0xa68>
   11a38:	cmp	sl, #10
   11a3c:	beq	11a60 <__assert_fail@plt+0xba8>
   11a40:	mov	r1, sl
   11a44:	ldr	r0, [pc, #2860]	; 12578 <__assert_fail@plt+0x16c0>
   11a48:	bl	11760 <__assert_fail@plt+0x8a8>
   11a4c:	mov	r1, sl
   11a50:	str	r0, [sp, #156]	; 0x9c
   11a54:	ldr	r0, [pc, #2848]	; 1257c <__assert_fail@plt+0x16c4>
   11a58:	bl	11760 <__assert_fail@plt+0x8a8>
   11a5c:	str	r0, [sp, #160]	; 0xa0
   11a60:	cmp	r7, #0
   11a64:	moveq	r4, r7
   11a68:	beq	11a80 <__assert_fail@plt+0xbc8>
   11a6c:	mov	r4, #0
   11a70:	b	11a90 <__assert_fail@plt+0xbd8>
   11a74:	cmp	r5, r4
   11a78:	strbhi	r3, [r8, r4]
   11a7c:	add	r4, r4, #1
   11a80:	ldr	r3, [sp, #156]	; 0x9c
   11a84:	ldrb	r3, [r3, r4]
   11a88:	cmp	r3, #0
   11a8c:	bne	11a74 <__assert_fail@plt+0xbbc>
   11a90:	ldr	r0, [sp, #160]	; 0xa0
   11a94:	bl	10dd4 <strlen@plt>
   11a98:	ldr	r3, [sp, #160]	; 0xa0
   11a9c:	str	r0, [sp, #32]
   11aa0:	str	r3, [sp, #44]	; 0x2c
   11aa4:	mov	r3, #1
   11aa8:	str	r3, [sp, #24]
   11aac:	b	11920 <__assert_fail@plt+0xa68>
   11ab0:	mov	r3, #1
   11ab4:	cmp	r7, #0
   11ab8:	streq	r3, [sp, #24]
   11abc:	beq	11b00 <__assert_fail@plt+0xc48>
   11ac0:	str	r3, [sp, #32]
   11ac4:	b	11aec <__assert_fail@plt+0xc34>
   11ac8:	cmp	r7, #0
   11acc:	beq	11b00 <__assert_fail@plt+0xc48>
   11ad0:	mov	r3, #1
   11ad4:	str	r3, [sp, #32]
   11ad8:	ldr	r3, [pc, #2716]	; 1257c <__assert_fail@plt+0x16c4>
   11adc:	b	11b60 <__assert_fail@plt+0xca8>
   11ae0:	mov	r7, #1
   11ae4:	str	r7, [sp, #24]
   11ae8:	str	r7, [sp, #32]
   11aec:	ldr	r3, [pc, #2696]	; 1257c <__assert_fail@plt+0x16c4>
   11af0:	mov	r4, #0
   11af4:	str	r3, [sp, #44]	; 0x2c
   11af8:	mov	sl, #2
   11afc:	b	11920 <__assert_fail@plt+0xa68>
   11b00:	cmp	r5, #0
   11b04:	movne	r3, #39	; 0x27
   11b08:	movne	r7, #0
   11b0c:	strbne	r3, [r8]
   11b10:	moveq	r7, r5
   11b14:	mov	r3, #1
   11b18:	mov	r4, #1
   11b1c:	str	r3, [sp, #32]
   11b20:	ldr	r3, [pc, #2644]	; 1257c <__assert_fail@plt+0x16c4>
   11b24:	str	r3, [sp, #44]	; 0x2c
   11b28:	b	11af8 <__assert_fail@plt+0xc40>
   11b2c:	bl	10eac <abort@plt>
   11b30:	mov	r3, #1
   11b34:	mov	r7, #0
   11b38:	str	r3, [sp, #24]
   11b3c:	mov	r4, #0
   11b40:	b	11920 <__assert_fail@plt+0xa68>
   11b44:	mov	r7, #1
   11b48:	str	sl, [sp, #32]
   11b4c:	b	11aec <__assert_fail@plt+0xc34>
   11b50:	mov	r3, #1
   11b54:	str	r7, [sp, #24]
   11b58:	str	r3, [sp, #32]
   11b5c:	ldr	r3, [pc, #2576]	; 12574 <__assert_fail@plt+0x16bc>
   11b60:	str	r3, [sp, #44]	; 0x2c
   11b64:	b	11b3c <__assert_fail@plt+0xc84>
   11b68:	ldr	fp, [sp, #24]
   11b6c:	ldr	r3, [sp, #32]
   11b70:	cmp	sl, #2
   11b74:	moveq	fp, #0
   11b78:	andne	fp, fp, #1
   11b7c:	adds	r5, r3, #0
   11b80:	movne	r5, #1
   11b84:	ands	r3, fp, r5
   11b88:	str	r3, [sp, #64]	; 0x40
   11b8c:	beq	11c5c <__assert_fail@plt+0xda4>
   11b90:	ldr	r3, [sp, #28]
   11b94:	ldr	r2, [sp, #32]
   11b98:	cmp	r2, #1
   11b9c:	add	r6, r3, r2
   11ba0:	mov	r3, r2
   11ba4:	ldr	r2, [sp, #40]	; 0x28
   11ba8:	movls	r3, #0
   11bac:	movhi	r3, #1
   11bb0:	cmn	r2, #1
   11bb4:	movne	r3, #0
   11bb8:	cmp	r3, #0
   11bbc:	beq	11bcc <__assert_fail@plt+0xd14>
   11bc0:	ldr	r0, [sp, #48]	; 0x30
   11bc4:	bl	10dd4 <strlen@plt>
   11bc8:	str	r0, [sp, #40]	; 0x28
   11bcc:	ldr	r3, [sp, #40]	; 0x28
   11bd0:	cmp	r6, r3
   11bd4:	bhi	11c54 <__assert_fail@plt+0xd9c>
   11bd8:	ldr	r0, [sp, #28]
   11bdc:	ldr	r2, [sp, #32]
   11be0:	ldr	r3, [sp, #48]	; 0x30
   11be4:	ldr	r1, [sp, #44]	; 0x2c
   11be8:	add	r0, r3, r0
   11bec:	bl	10ccc <memcmp@plt>
   11bf0:	cmp	r0, #0
   11bf4:	bne	11c54 <__assert_fail@plt+0xd9c>
   11bf8:	cmp	r7, #0
   11bfc:	beq	11c5c <__assert_fail@plt+0xda4>
   11c00:	str	r7, [sp, #24]
   11c04:	ldr	r3, [sp, #24]
   11c08:	mov	r1, r9
   11c0c:	ldr	r2, [sp, #48]	; 0x30
   11c10:	cmp	sl, #2
   11c14:	movne	r3, #0
   11c18:	andeq	r3, r3, #1
   11c1c:	cmp	r3, #0
   11c20:	ldr	r3, [sp, #160]	; 0xa0
   11c24:	movne	sl, #4
   11c28:	str	sl, [sp]
   11c2c:	str	r3, [sp, #16]
   11c30:	ldr	r3, [sp, #156]	; 0x9c
   11c34:	str	r3, [sp, #12]
   11c38:	mov	r3, #0
   11c3c:	str	r3, [sp, #8]
   11c40:	ldr	r3, [sp, #148]	; 0x94
   11c44:	bic	r3, r3, #2
   11c48:	str	r3, [sp, #4]
   11c4c:	ldr	r3, [sp, #40]	; 0x28
   11c50:	b	119d8 <__assert_fail@plt+0xb20>
   11c54:	mov	r3, #0
   11c58:	str	r3, [sp, #64]	; 0x40
   11c5c:	ldr	r2, [sp, #28]
   11c60:	ldr	r3, [sp, #48]	; 0x30
   11c64:	add	r3, r3, r2
   11c68:	str	r3, [sp, #80]	; 0x50
   11c6c:	ldr	r3, [sp, #48]	; 0x30
   11c70:	ldrb	r6, [r3, r2]
   11c74:	cmp	r6, #58	; 0x3a
   11c78:	bhi	11ddc <__assert_fail@plt+0xf24>
   11c7c:	cmp	r6, #43	; 0x2b
   11c80:	bcs	11f9c <__assert_fail@plt+0x10e4>
   11c84:	cmp	r6, #32
   11c88:	beq	11ff0 <__assert_fail@plt+0x1138>
   11c8c:	bhi	11d34 <__assert_fail@plt+0xe7c>
   11c90:	cmp	r6, #9
   11c94:	beq	12198 <__assert_fail@plt+0x12e0>
   11c98:	bhi	11cf8 <__assert_fail@plt+0xe40>
   11c9c:	cmp	r6, #7
   11ca0:	beq	121a8 <__assert_fail@plt+0x12f0>
   11ca4:	bhi	121c4 <__assert_fail@plt+0x130c>
   11ca8:	cmp	r6, #0
   11cac:	beq	1200c <__assert_fail@plt+0x1154>
   11cb0:	ldr	r3, [sp, #76]	; 0x4c
   11cb4:	cmp	r3, #1
   11cb8:	bne	12210 <__assert_fail@plt+0x1358>
   11cbc:	bl	10db0 <__ctype_b_loc@plt>
   11cc0:	ldr	r2, [r0]
   11cc4:	sxth	r3, r6
   11cc8:	lsl	r3, r3, #1
   11ccc:	ldrh	r5, [r2, r3]
   11cd0:	ldr	r3, [sp, #76]	; 0x4c
   11cd4:	ubfx	r5, r5, #14, #1
   11cd8:	str	r3, [sp, #56]	; 0x38
   11cdc:	ldr	r3, [sp, #24]
   11ce0:	eor	fp, r5, #1
   11ce4:	and	fp, fp, r3
   11ce8:	ands	fp, fp, #255	; 0xff
   11cec:	beq	11ecc <__assert_fail@plt+0x1014>
   11cf0:	mov	r5, #0
   11cf4:	b	122bc <__assert_fail@plt+0x1404>
   11cf8:	cmp	r6, #11
   11cfc:	beq	121cc <__assert_fail@plt+0x1314>
   11d00:	bcc	121a0 <__assert_fail@plt+0x12e8>
   11d04:	cmp	r6, #12
   11d08:	beq	121d4 <__assert_fail@plt+0x131c>
   11d0c:	cmp	r6, #13
   11d10:	moveq	r3, #114	; 0x72
   11d14:	bne	11cb0 <__assert_fail@plt+0xdf8>
   11d18:	cmp	sl, #2
   11d1c:	movne	r2, #0
   11d20:	andeq	r2, r7, #1
   11d24:	cmp	r2, #0
   11d28:	beq	121ac <__assert_fail@plt+0x12f4>
   11d2c:	mov	sl, #2
   11d30:	b	11c04 <__assert_fail@plt+0xd4c>
   11d34:	cmp	r6, #37	; 0x25
   11d38:	beq	11f9c <__assert_fail@plt+0x10e4>
   11d3c:	bhi	11d50 <__assert_fail@plt+0xe98>
   11d40:	cmp	r6, #35	; 0x23
   11d44:	beq	11fe4 <__assert_fail@plt+0x112c>
   11d48:	mov	r5, #0
   11d4c:	b	11ff4 <__assert_fail@plt+0x113c>
   11d50:	cmp	r6, #39	; 0x27
   11d54:	bne	11d48 <__assert_fail@plt+0xe90>
   11d58:	cmp	sl, #2
   11d5c:	ldrne	r5, [sp, #36]	; 0x24
   11d60:	movne	r3, r5
   11d64:	strne	r3, [sp, #68]	; 0x44
   11d68:	bne	120e8 <__assert_fail@plt+0x1230>
   11d6c:	cmp	r7, #0
   11d70:	bne	11c04 <__assert_fail@plt+0xd4c>
   11d74:	ldr	r3, [sp, #60]	; 0x3c
   11d78:	cmp	r9, #0
   11d7c:	clz	r3, r3
   11d80:	lsr	r3, r3, #5
   11d84:	moveq	r3, #0
   11d88:	cmp	r3, #0
   11d8c:	strne	r9, [sp, #60]	; 0x3c
   11d90:	movne	r9, #0
   11d94:	bne	11da4 <__assert_fail@plt+0xeec>
   11d98:	cmp	r9, r4
   11d9c:	movhi	r3, #39	; 0x27
   11da0:	strbhi	r3, [r8, r4]
   11da4:	add	r3, r4, #1
   11da8:	ldr	r5, [sp, #36]	; 0x24
   11dac:	mov	fp, #0
   11db0:	cmp	r3, r9
   11db4:	movcc	r2, #92	; 0x5c
   11db8:	str	fp, [sp, #52]	; 0x34
   11dbc:	strbcc	r2, [r8, r3]
   11dc0:	add	r3, r4, #2
   11dc4:	add	r4, r4, #3
   11dc8:	cmp	r3, r9
   11dcc:	str	r5, [sp, #68]	; 0x44
   11dd0:	movcc	r2, #39	; 0x27
   11dd4:	strbcc	r2, [r8, r3]
   11dd8:	b	11ecc <__assert_fail@plt+0x1014>
   11ddc:	cmp	r6, #94	; 0x5e
   11de0:	beq	11d48 <__assert_fail@plt+0xe90>
   11de4:	bhi	11fa4 <__assert_fail@plt+0x10ec>
   11de8:	cmp	r6, #90	; 0x5a
   11dec:	bhi	11f90 <__assert_fail@plt+0x10d8>
   11df0:	cmp	r6, #65	; 0x41
   11df4:	bcs	11f9c <__assert_fail@plt+0x10e4>
   11df8:	cmp	r6, #62	; 0x3e
   11dfc:	bls	11d48 <__assert_fail@plt+0xe90>
   11e00:	cmp	r6, #63	; 0x3f
   11e04:	bne	11cb0 <__assert_fail@plt+0xdf8>
   11e08:	cmp	sl, #2
   11e0c:	beq	120f0 <__assert_fail@plt+0x1238>
   11e10:	cmp	sl, #5
   11e14:	movne	fp, #0
   11e18:	bne	124c0 <__assert_fail@plt+0x1608>
   11e1c:	ldr	r3, [sp, #148]	; 0x94
   11e20:	tst	r3, #4
   11e24:	beq	120f8 <__assert_fail@plt+0x1240>
   11e28:	ldr	r3, [sp, #28]
   11e2c:	add	r2, r3, #2
   11e30:	ldr	r3, [sp, #40]	; 0x28
   11e34:	cmp	r2, r3
   11e38:	bcs	120f8 <__assert_fail@plt+0x1240>
   11e3c:	ldr	r1, [sp, #28]
   11e40:	ldr	r3, [sp, #48]	; 0x30
   11e44:	add	r3, r3, r1
   11e48:	ldrb	r1, [r3, #1]
   11e4c:	cmp	r1, #63	; 0x3f
   11e50:	bne	120f8 <__assert_fail@plt+0x1240>
   11e54:	ldr	r3, [sp, #48]	; 0x30
   11e58:	ldrb	r6, [r3, r2]
   11e5c:	sub	r3, r6, #33	; 0x21
   11e60:	uxtb	r3, r3
   11e64:	cmp	r3, #29
   11e68:	bhi	124c8 <__assert_fail@plt+0x1610>
   11e6c:	ldr	r0, [pc, #1804]	; 12580 <__assert_fail@plt+0x16c8>
   11e70:	mov	r5, #1
   11e74:	ands	r5, r0, r5, lsl r3
   11e78:	beq	124d0 <__assert_fail@plt+0x1618>
   11e7c:	cmp	r7, #0
   11e80:	bne	11c04 <__assert_fail@plt+0xd4c>
   11e84:	cmp	r9, r4
   11e88:	add	r3, r4, #1
   11e8c:	str	r2, [sp, #28]
   11e90:	mov	r5, #0
   11e94:	strbhi	r1, [r8, r4]
   11e98:	cmp	r9, r3
   11e9c:	mov	fp, r5
   11ea0:	movhi	r1, #34	; 0x22
   11ea4:	strbhi	r1, [r8, r3]
   11ea8:	add	r3, r4, #2
   11eac:	cmp	r9, r3
   11eb0:	movhi	r1, #34	; 0x22
   11eb4:	strbhi	r1, [r8, r3]
   11eb8:	add	r3, r4, #3
   11ebc:	add	r4, r4, #4
   11ec0:	cmp	r9, r3
   11ec4:	movhi	r1, #63	; 0x3f
   11ec8:	strbhi	r1, [r8, r3]
   11ecc:	ldr	r3, [sp, #24]
   11ed0:	eor	r3, r3, #1
   11ed4:	cmp	sl, #2
   11ed8:	orreq	r3, r3, #1
   11edc:	eor	r3, r3, #1
   11ee0:	orr	r3, r7, r3
   11ee4:	tst	r3, #255	; 0xff
   11ee8:	beq	11f14 <__assert_fail@plt+0x105c>
   11eec:	ldr	r3, [sp, #152]	; 0x98
   11ef0:	cmp	r3, #0
   11ef4:	beq	11f14 <__assert_fail@plt+0x105c>
   11ef8:	ldr	r1, [sp, #152]	; 0x98
   11efc:	ubfx	r2, r6, #5, #8
   11f00:	and	r3, r6, #31
   11f04:	ldr	r2, [r1, r2, lsl #2]
   11f08:	lsr	r3, r2, r3
   11f0c:	tst	r3, #1
   11f10:	bne	11f20 <__assert_fail@plt+0x1068>
   11f14:	ldr	r3, [sp, #64]	; 0x40
   11f18:	cmp	r3, #0
   11f1c:	beq	12118 <__assert_fail@plt+0x1260>
   11f20:	sub	r3, sl, #2
   11f24:	cmp	r7, #0
   11f28:	clz	r3, r3
   11f2c:	lsr	r3, r3, #5
   11f30:	bne	11c04 <__assert_fail@plt+0xd4c>
   11f34:	ldr	r2, [sp, #52]	; 0x34
   11f38:	eor	r2, r2, #1
   11f3c:	ands	r3, r3, r2
   11f40:	beq	11f78 <__assert_fail@plt+0x10c0>
   11f44:	cmp	r9, r4
   11f48:	str	r3, [sp, #52]	; 0x34
   11f4c:	movhi	r2, #39	; 0x27
   11f50:	strbhi	r2, [r8, r4]
   11f54:	add	r2, r4, #1
   11f58:	cmp	r9, r2
   11f5c:	movhi	r1, #36	; 0x24
   11f60:	strbhi	r1, [r8, r2]
   11f64:	add	r2, r4, #2
   11f68:	add	r4, r4, #3
   11f6c:	cmp	r9, r2
   11f70:	movhi	r1, #39	; 0x27
   11f74:	strbhi	r1, [r8, r2]
   11f78:	cmp	r9, r4
   11f7c:	ldr	fp, [sp, #36]	; 0x24
   11f80:	movhi	r3, #92	; 0x5c
   11f84:	strbhi	r3, [r8, r4]
   11f88:	add	r4, r4, #1
   11f8c:	b	12118 <__assert_fail@plt+0x1260>
   11f90:	cmp	r6, #92	; 0x5c
   11f94:	beq	12100 <__assert_fail@plt+0x1248>
   11f98:	bls	11d48 <__assert_fail@plt+0xe90>
   11f9c:	ldr	r5, [sp, #36]	; 0x24
   11fa0:	b	120e8 <__assert_fail@plt+0x1230>
   11fa4:	cmp	r6, #122	; 0x7a
   11fa8:	bhi	11fc8 <__assert_fail@plt+0x1110>
   11fac:	cmp	r6, #97	; 0x61
   11fb0:	bcs	11f9c <__assert_fail@plt+0x10e4>
   11fb4:	cmp	r6, #95	; 0x5f
   11fb8:	beq	11f9c <__assert_fail@plt+0x10e4>
   11fbc:	cmp	r6, #96	; 0x60
   11fc0:	bne	11cb0 <__assert_fail@plt+0xdf8>
   11fc4:	b	11d48 <__assert_fail@plt+0xe90>
   11fc8:	cmp	r6, #124	; 0x7c
   11fcc:	beq	11d48 <__assert_fail@plt+0xe90>
   11fd0:	bcc	121dc <__assert_fail@plt+0x1324>
   11fd4:	cmp	r6, #125	; 0x7d
   11fd8:	beq	121dc <__assert_fail@plt+0x1324>
   11fdc:	cmp	r6, #126	; 0x7e
   11fe0:	bne	11cb0 <__assert_fail@plt+0xdf8>
   11fe4:	ldr	r3, [sp, #28]
   11fe8:	cmp	r3, #0
   11fec:	bne	120f8 <__assert_fail@plt+0x1240>
   11ff0:	ldr	r5, [sp, #36]	; 0x24
   11ff4:	cmp	sl, #2
   11ff8:	movne	fp, #0
   11ffc:	andeq	fp, r7, #1
   12000:	cmp	fp, #0
   12004:	beq	11ecc <__assert_fail@plt+0x1014>
   12008:	b	11d2c <__assert_fail@plt+0xe74>
   1200c:	ldr	r3, [sp, #24]
   12010:	cmp	r3, #0
   12014:	beq	120dc <__assert_fail@plt+0x1224>
   12018:	sub	r2, sl, #2
   1201c:	cmp	r7, #0
   12020:	clz	r2, r2
   12024:	lsr	r2, r2, #5
   12028:	bne	11c00 <__assert_fail@plt+0xd48>
   1202c:	ldr	r3, [sp, #52]	; 0x34
   12030:	eor	r3, r3, #1
   12034:	ands	r2, r2, r3
   12038:	moveq	r3, r4
   1203c:	beq	12074 <__assert_fail@plt+0x11bc>
   12040:	cmp	r9, r4
   12044:	str	r2, [sp, #52]	; 0x34
   12048:	movhi	r3, #39	; 0x27
   1204c:	strbhi	r3, [r8, r4]
   12050:	add	r3, r4, #1
   12054:	cmp	r9, r3
   12058:	movhi	r1, #36	; 0x24
   1205c:	strbhi	r1, [r8, r3]
   12060:	add	r3, r4, #2
   12064:	cmp	r9, r3
   12068:	movhi	r1, #39	; 0x27
   1206c:	strbhi	r1, [r8, r3]
   12070:	add	r3, r4, #3
   12074:	cmp	r9, r3
   12078:	add	r4, r3, #1
   1207c:	movhi	r2, #92	; 0x5c
   12080:	strbhi	r2, [r8, r3]
   12084:	cmp	fp, #0
   12088:	beq	124b0 <__assert_fail@plt+0x15f8>
   1208c:	ldr	r2, [sp, #28]
   12090:	ldr	r1, [sp, #40]	; 0x28
   12094:	add	r2, r2, #1
   12098:	cmp	r2, r1
   1209c:	bcs	120d4 <__assert_fail@plt+0x121c>
   120a0:	ldr	r1, [sp, #48]	; 0x30
   120a4:	mov	r6, #48	; 0x30
   120a8:	ldrb	r2, [r1, r2]
   120ac:	sub	r2, r2, #48	; 0x30
   120b0:	cmp	r2, #9
   120b4:	bhi	124c0 <__assert_fail@plt+0x1608>
   120b8:	cmp	r9, r4
   120bc:	add	r2, r3, #2
   120c0:	strbhi	r6, [r8, r4]
   120c4:	cmp	r9, r2
   120c8:	add	r4, r3, #3
   120cc:	movhi	r1, #48	; 0x30
   120d0:	strbhi	r1, [r8, r2]
   120d4:	mov	r5, #0
   120d8:	b	124b8 <__assert_fail@plt+0x1600>
   120dc:	ldr	r3, [sp, #148]	; 0x94
   120e0:	ands	r5, r3, #1
   120e4:	bne	1216c <__assert_fail@plt+0x12b4>
   120e8:	mov	fp, #0
   120ec:	b	11ecc <__assert_fail@plt+0x1014>
   120f0:	cmp	r7, #0
   120f4:	bne	11c04 <__assert_fail@plt+0xd4c>
   120f8:	mov	r5, #0
   120fc:	b	120e8 <__assert_fail@plt+0x1230>
   12100:	cmp	sl, #2
   12104:	bne	12178 <__assert_fail@plt+0x12c0>
   12108:	cmp	r7, #0
   1210c:	bne	11c04 <__assert_fail@plt+0xd4c>
   12110:	mov	r5, r7
   12114:	mov	fp, r7
   12118:	ldr	r3, [sp, #52]	; 0x34
   1211c:	eor	fp, fp, #1
   12120:	tst	r3, fp
   12124:	beq	12150 <__assert_fail@plt+0x1298>
   12128:	cmp	r9, r4
   1212c:	movhi	r3, #39	; 0x27
   12130:	strbhi	r3, [r8, r4]
   12134:	add	r3, r4, #1
   12138:	add	r4, r4, #2
   1213c:	cmp	r9, r3
   12140:	movhi	r2, #39	; 0x27
   12144:	strbhi	r2, [r8, r3]
   12148:	mov	r3, #0
   1214c:	str	r3, [sp, #52]	; 0x34
   12150:	cmp	r9, r4
   12154:	ldr	r3, [sp, #72]	; 0x48
   12158:	strbhi	r6, [r8, r4]
   1215c:	cmp	r5, #0
   12160:	add	r4, r4, #1
   12164:	moveq	r3, #0
   12168:	str	r3, [sp, #72]	; 0x48
   1216c:	ldr	r3, [sp, #28]
   12170:	add	r3, r3, #1
   12174:	b	1192c <__assert_fail@plt+0xa74>
   12178:	ldr	r3, [sp, #24]
   1217c:	and	r3, r3, r7
   12180:	tst	r5, r3
   12184:	moveq	r3, r6
   12188:	beq	11d18 <__assert_fail@plt+0xe60>
   1218c:	mov	fp, #0
   12190:	mov	r5, fp
   12194:	b	12118 <__assert_fail@plt+0x1260>
   12198:	mov	r3, #116	; 0x74
   1219c:	b	11d18 <__assert_fail@plt+0xe60>
   121a0:	mov	r3, #110	; 0x6e
   121a4:	b	11d18 <__assert_fail@plt+0xe60>
   121a8:	mov	r3, #97	; 0x61
   121ac:	ldr	r2, [sp, #24]
   121b0:	cmp	r2, #0
   121b4:	beq	120f8 <__assert_fail@plt+0x1240>
   121b8:	mov	r6, r3
   121bc:	mov	r5, #0
   121c0:	b	11f20 <__assert_fail@plt+0x1068>
   121c4:	mov	r3, #98	; 0x62
   121c8:	b	121ac <__assert_fail@plt+0x12f4>
   121cc:	mov	r3, #118	; 0x76
   121d0:	b	121ac <__assert_fail@plt+0x12f4>
   121d4:	mov	r3, #102	; 0x66
   121d8:	b	121ac <__assert_fail@plt+0x12f4>
   121dc:	ldr	r3, [sp, #40]	; 0x28
   121e0:	cmn	r3, #1
   121e4:	bne	12204 <__assert_fail@plt+0x134c>
   121e8:	ldr	r3, [sp, #48]	; 0x30
   121ec:	ldrb	r3, [r3, #1]
   121f0:	adds	r3, r3, #0
   121f4:	movne	r3, #1
   121f8:	cmp	r3, #0
   121fc:	bne	120f8 <__assert_fail@plt+0x1240>
   12200:	b	11fe4 <__assert_fail@plt+0x112c>
   12204:	ldr	r3, [sp, #40]	; 0x28
   12208:	subs	r3, r3, #1
   1220c:	b	121f4 <__assert_fail@plt+0x133c>
   12210:	mov	r3, #0
   12214:	mov	r2, #0
   12218:	strd	r2, [sp, #96]	; 0x60
   1221c:	ldr	r3, [sp, #40]	; 0x28
   12220:	cmn	r3, #1
   12224:	bne	12234 <__assert_fail@plt+0x137c>
   12228:	ldr	r0, [sp, #48]	; 0x30
   1222c:	bl	10dd4 <strlen@plt>
   12230:	str	r0, [sp, #40]	; 0x28
   12234:	ldr	r5, [sp, #36]	; 0x24
   12238:	mov	r3, #0
   1223c:	str	r3, [sp, #56]	; 0x38
   12240:	ldr	r3, [sp, #28]
   12244:	add	r0, sp, #92	; 0x5c
   12248:	ldr	r1, [sp, #40]	; 0x28
   1224c:	ldr	r2, [sp, #56]	; 0x38
   12250:	add	r2, r3, r2
   12254:	ldr	r3, [sp, #48]	; 0x30
   12258:	add	fp, r3, r2
   1225c:	sub	r2, r1, r2
   12260:	add	r3, sp, #96	; 0x60
   12264:	mov	r1, fp
   12268:	bl	13f28 <__assert_fail@plt+0x3070>
   1226c:	subs	r2, r0, #0
   12270:	beq	122b0 <__assert_fail@plt+0x13f8>
   12274:	cmn	r2, #1
   12278:	beq	12484 <__assert_fail@plt+0x15cc>
   1227c:	cmn	r2, #2
   12280:	bne	123f4 <__assert_fail@plt+0x153c>
   12284:	ldr	r3, [sp, #28]
   12288:	ldr	r2, [sp, #56]	; 0x38
   1228c:	add	r3, r3, r2
   12290:	ldr	r2, [sp, #40]	; 0x28
   12294:	cmp	r2, r3
   12298:	bls	12484 <__assert_fail@plt+0x15cc>
   1229c:	ldr	r2, [sp, #56]	; 0x38
   122a0:	ldr	r3, [sp, #80]	; 0x50
   122a4:	ldrb	r5, [r3, r2]
   122a8:	cmp	r5, #0
   122ac:	bne	123e4 <__assert_fail@plt+0x152c>
   122b0:	ldr	r3, [sp, #56]	; 0x38
   122b4:	cmp	r3, #1
   122b8:	bls	11cdc <__assert_fail@plt+0xe24>
   122bc:	ldr	r3, [sp, #28]
   122c0:	mov	fp, #0
   122c4:	mov	ip, #92	; 0x5c
   122c8:	ldr	r2, [sp, #56]	; 0x38
   122cc:	add	r3, r3, r2
   122d0:	ldr	r2, [sp, #24]
   122d4:	str	r3, [sp, #36]	; 0x24
   122d8:	eor	r3, r5, #1
   122dc:	and	r3, r3, r2
   122e0:	mov	r2, #39	; 0x27
   122e4:	uxtb	r3, r3
   122e8:	cmp	r3, #0
   122ec:	beq	1248c <__assert_fail@plt+0x15d4>
   122f0:	sub	r0, sl, #2
   122f4:	cmp	r7, #0
   122f8:	clz	r0, r0
   122fc:	lsr	r0, r0, #5
   12300:	bne	11c00 <__assert_fail@plt+0xd48>
   12304:	ldr	r1, [sp, #52]	; 0x34
   12308:	eor	r1, r1, #1
   1230c:	ands	r1, r0, r1
   12310:	beq	12340 <__assert_fail@plt+0x1488>
   12314:	cmp	r9, r4
   12318:	add	r0, r4, #1
   1231c:	str	r1, [sp, #52]	; 0x34
   12320:	strbhi	r2, [r8, r4]
   12324:	cmp	r9, r0
   12328:	movhi	lr, #36	; 0x24
   1232c:	strbhi	lr, [r8, r0]
   12330:	add	r0, r4, #2
   12334:	add	r4, r4, #3
   12338:	cmp	r9, r0
   1233c:	strbhi	r2, [r8, r0]
   12340:	cmp	r9, r4
   12344:	add	r0, r4, #1
   12348:	mov	fp, r3
   1234c:	strbhi	ip, [r8, r4]
   12350:	cmp	r9, r0
   12354:	lsrhi	r1, r6, #6
   12358:	addhi	r1, r1, #48	; 0x30
   1235c:	strbhi	r1, [r8, r0]
   12360:	add	r0, r4, #2
   12364:	add	r4, r4, #3
   12368:	cmp	r9, r0
   1236c:	ubfxhi	r1, r6, #3, #3
   12370:	and	r6, r6, #7
   12374:	add	r6, r6, #48	; 0x30
   12378:	addhi	r1, r1, #48	; 0x30
   1237c:	strbhi	r1, [r8, r0]
   12380:	eor	r0, fp, #1
   12384:	ldr	r1, [sp, #28]
   12388:	ldr	lr, [sp, #52]	; 0x34
   1238c:	add	r1, r1, #1
   12390:	and	r0, r0, lr
   12394:	ldr	lr, [sp, #36]	; 0x24
   12398:	cmp	r1, lr
   1239c:	bcs	12118 <__assert_fail@plt+0x1260>
   123a0:	cmp	r0, #0
   123a4:	beq	123c8 <__assert_fail@plt+0x1510>
   123a8:	cmp	r9, r4
   123ac:	add	r0, r4, #1
   123b0:	strbhi	r2, [r8, r4]
   123b4:	cmp	r9, r0
   123b8:	add	r4, r4, #2
   123bc:	strbhi	r2, [r8, r0]
   123c0:	mov	r0, #0
   123c4:	str	r0, [sp, #52]	; 0x34
   123c8:	ldr	r0, [sp, #48]	; 0x30
   123cc:	cmp	r9, r4
   123d0:	str	r1, [sp, #28]
   123d4:	strbhi	r6, [r8, r4]
   123d8:	add	r4, r4, #1
   123dc:	ldrb	r6, [r0, r1]
   123e0:	b	122e8 <__assert_fail@plt+0x1430>
   123e4:	ldr	r3, [sp, #56]	; 0x38
   123e8:	add	r3, r3, #1
   123ec:	str	r3, [sp, #56]	; 0x38
   123f0:	b	12284 <__assert_fail@plt+0x13cc>
   123f4:	cmp	sl, #2
   123f8:	movne	r3, #0
   123fc:	andeq	r3, r7, #1
   12400:	cmp	r3, #0
   12404:	movne	r1, #1
   12408:	bne	12464 <__assert_fail@plt+0x15ac>
   1240c:	ldr	r0, [sp, #92]	; 0x5c
   12410:	str	r2, [sp, #84]	; 0x54
   12414:	bl	10d14 <iswprint@plt>
   12418:	ldr	r3, [sp, #56]	; 0x38
   1241c:	cmp	r0, #0
   12420:	add	r0, sp, #96	; 0x60
   12424:	moveq	r5, #0
   12428:	ldr	r2, [sp, #84]	; 0x54
   1242c:	add	r3, r3, r2
   12430:	str	r3, [sp, #56]	; 0x38
   12434:	bl	10cb4 <mbsinit@plt>
   12438:	cmp	r0, #0
   1243c:	beq	12240 <__assert_fail@plt+0x1388>
   12440:	b	122b0 <__assert_fail@plt+0x13f8>
   12444:	ldrb	r3, [fp, #1]!
   12448:	cmp	r3, #94	; 0x5e
   1244c:	beq	11d2c <__assert_fail@plt+0xe74>
   12450:	bhi	12470 <__assert_fail@plt+0x15b8>
   12454:	sub	r3, r3, #91	; 0x5b
   12458:	cmp	r3, #1
   1245c:	bls	11d2c <__assert_fail@plt+0xe74>
   12460:	add	r1, r1, #1
   12464:	cmp	r1, r2
   12468:	bne	12444 <__assert_fail@plt+0x158c>
   1246c:	b	1240c <__assert_fail@plt+0x1554>
   12470:	cmp	r3, #96	; 0x60
   12474:	beq	11d2c <__assert_fail@plt+0xe74>
   12478:	cmp	r3, #124	; 0x7c
   1247c:	bne	12460 <__assert_fail@plt+0x15a8>
   12480:	b	11d2c <__assert_fail@plt+0xe74>
   12484:	mov	r5, #0
   12488:	b	122b0 <__assert_fail@plt+0x13f8>
   1248c:	ldr	r1, [sp, #64]	; 0x40
   12490:	cmp	r1, #0
   12494:	beq	12380 <__assert_fail@plt+0x14c8>
   12498:	cmp	r9, r4
   1249c:	mov	r1, #0
   124a0:	strbhi	ip, [r8, r4]
   124a4:	add	r4, r4, #1
   124a8:	str	r1, [sp, #64]	; 0x40
   124ac:	b	12380 <__assert_fail@plt+0x14c8>
   124b0:	mov	r5, fp
   124b4:	ldr	fp, [sp, #24]
   124b8:	mov	r6, #48	; 0x30
   124bc:	b	11ecc <__assert_fail@plt+0x1014>
   124c0:	mov	r5, #0
   124c4:	b	11ecc <__assert_fail@plt+0x1014>
   124c8:	mov	r6, r1
   124cc:	b	120f8 <__assert_fail@plt+0x1240>
   124d0:	mov	r6, r1
   124d4:	b	120e8 <__assert_fail@plt+0x1230>
   124d8:	ldr	r2, [sp, #28]
   124dc:	ldr	r3, [sp, #40]	; 0x28
   124e0:	subs	r3, r3, r2
   124e4:	movne	r3, #1
   124e8:	b	11950 <__assert_fail@plt+0xa98>
   124ec:	ldr	r3, [sp, #60]	; 0x3c
   124f0:	mov	sl, #2
   124f4:	ldr	r7, [sp, #72]	; 0x48
   124f8:	adds	r6, r3, #0
   124fc:	mov	r5, r3
   12500:	movne	r6, #1
   12504:	cmp	r9, #0
   12508:	movne	r6, #0
   1250c:	cmp	r6, #0
   12510:	bne	118e0 <__assert_fail@plt+0xa28>
   12514:	ldr	r3, [sp, #68]	; 0x44
   12518:	ldr	r2, [sp, #44]	; 0x2c
   1251c:	cmp	r2, #0
   12520:	moveq	r3, #0
   12524:	andne	r3, r3, #1
   12528:	cmp	r3, #0
   1252c:	movne	r3, r2
   12530:	subne	r3, r3, #1
   12534:	bne	12564 <__assert_fail@plt+0x16ac>
   12538:	cmp	r9, r4
   1253c:	movhi	r3, #0
   12540:	strbhi	r3, [r8, r4]
   12544:	mov	r0, r4
   12548:	add	sp, sp, #108	; 0x6c
   1254c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12550:	mov	r3, r7
   12554:	b	12518 <__assert_fail@plt+0x1660>
   12558:	cmp	r9, r4
   1255c:	strbhi	r2, [r8, r4]
   12560:	add	r4, r4, #1
   12564:	ldrb	r2, [r3, #1]!
   12568:	cmp	r2, #0
   1256c:	bne	12558 <__assert_fail@plt+0x16a0>
   12570:	b	12538 <__assert_fail@plt+0x1680>
   12574:			; <UNDEFINED> instruction: 0x000145b8
   12578:	andeq	r4, r1, fp, asr #11
   1257c:	andeq	r4, r1, r9, asr #11
   12580:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12588:	sub	sp, sp, #52	; 0x34
   1258c:	mov	r6, r0
   12590:	mov	r5, r3
   12594:	mov	r8, r1
   12598:	mov	r9, r2
   1259c:	bl	10dec <__errno_location@plt>
   125a0:	ldr	r3, [r0]
   125a4:	cmn	r6, #-2147483647	; 0x80000001
   125a8:	str	r0, [sp, #24]
   125ac:	ldr	r7, [pc, #368]	; 12724 <__assert_fail@plt+0x186c>
   125b0:	str	r3, [sp, #32]
   125b4:	movne	r3, #0
   125b8:	moveq	r3, #1
   125bc:	orrs	r3, r3, r6, lsr #31
   125c0:	ldr	r4, [r7]
   125c4:	beq	125cc <__assert_fail@plt+0x1714>
   125c8:	bl	10eac <abort@plt>
   125cc:	ldr	r2, [r7, #4]
   125d0:	cmp	r2, r6
   125d4:	bgt	12644 <__assert_fail@plt+0x178c>
   125d8:	add	sl, r7, #8
   125dc:	mov	r3, #8
   125e0:	cmp	r4, sl
   125e4:	add	r1, sp, #44	; 0x2c
   125e8:	str	r2, [sp, #44]	; 0x2c
   125ec:	sub	r2, r6, r2
   125f0:	movne	r0, r4
   125f4:	moveq	r0, #0
   125f8:	add	r2, r2, #1
   125fc:	str	r3, [sp]
   12600:	mvn	r3, #-2147483648	; 0x80000000
   12604:	bl	132d8 <__assert_fail@plt+0x2420>
   12608:	cmp	r4, sl
   1260c:	mov	fp, r0
   12610:	str	r0, [r7]
   12614:	ldmeq	r4, {r0, r1}
   12618:	mov	r4, fp
   1261c:	ldr	r2, [sp, #44]	; 0x2c
   12620:	stmeq	fp, {r0, r1}
   12624:	mov	r1, #0
   12628:	ldr	r0, [r7, #4]
   1262c:	sub	r2, r2, r0
   12630:	add	r0, fp, r0, lsl #3
   12634:	lsl	r2, r2, #3
   12638:	bl	10e04 <memset@plt>
   1263c:	ldr	r3, [sp, #44]	; 0x2c
   12640:	str	r3, [r7, #4]
   12644:	ldr	r3, [r5, #4]
   12648:	add	sl, r4, r6, lsl #3
   1264c:	mov	r2, r8
   12650:	ldr	fp, [r4, r6, lsl #3]
   12654:	ldr	r7, [sl, #4]
   12658:	orr	r3, r3, #1
   1265c:	str	r3, [sp, #28]
   12660:	add	r3, r5, #8
   12664:	mov	r1, fp
   12668:	str	r3, [sp, #36]	; 0x24
   1266c:	mov	r0, r7
   12670:	ldr	r3, [r5, #44]	; 0x2c
   12674:	str	r3, [sp, #16]
   12678:	ldr	r3, [r5, #40]	; 0x28
   1267c:	str	r3, [sp, #12]
   12680:	add	r3, r5, #8
   12684:	str	r3, [sp, #8]
   12688:	ldr	r3, [sp, #28]
   1268c:	str	r3, [sp, #4]
   12690:	ldr	r3, [r5]
   12694:	str	r3, [sp]
   12698:	mov	r3, r9
   1269c:	bl	11894 <__assert_fail@plt+0x9dc>
   126a0:	cmp	fp, r0
   126a4:	bhi	1270c <__assert_fail@plt+0x1854>
   126a8:	ldr	r3, [pc, #120]	; 12728 <__assert_fail@plt+0x1870>
   126ac:	add	fp, r0, #1
   126b0:	str	fp, [r4, r6, lsl #3]
   126b4:	cmp	r7, r3
   126b8:	beq	126c4 <__assert_fail@plt+0x180c>
   126bc:	mov	r0, r7
   126c0:	bl	13de4 <__assert_fail@plt+0x2f2c>
   126c4:	mov	r0, fp
   126c8:	bl	131c8 <__assert_fail@plt+0x2310>
   126cc:	ldr	r3, [r5, #44]	; 0x2c
   126d0:	mov	r2, r8
   126d4:	mov	r1, fp
   126d8:	str	r0, [sl, #4]
   126dc:	mov	r7, r0
   126e0:	str	r3, [sp, #16]
   126e4:	ldr	r3, [r5, #40]	; 0x28
   126e8:	str	r3, [sp, #12]
   126ec:	add	r3, r5, #8
   126f0:	str	r3, [sp, #8]
   126f4:	ldr	r3, [sp, #28]
   126f8:	str	r3, [sp, #4]
   126fc:	ldr	r3, [r5]
   12700:	str	r3, [sp]
   12704:	mov	r3, r9
   12708:	bl	11894 <__assert_fail@plt+0x9dc>
   1270c:	ldr	r3, [sp, #24]
   12710:	mov	r0, r7
   12714:	ldr	r2, [sp, #32]
   12718:	str	r2, [r3]
   1271c:	add	sp, sp, #52	; 0x34
   12720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12724:	andeq	r5, r2, ip, ror #1
   12728:	andeq	r5, r2, ip, asr r1
   1272c:	push	{r4, r5, r6, lr}
   12730:	mov	r5, r0
   12734:	bl	10dec <__errno_location@plt>
   12738:	mov	r4, r0
   1273c:	cmp	r5, #0
   12740:	ldr	r0, [pc, #20]	; 1275c <__assert_fail@plt+0x18a4>
   12744:	mov	r1, #48	; 0x30
   12748:	movne	r0, r5
   1274c:	ldr	r6, [r4]
   12750:	bl	133c8 <__assert_fail@plt+0x2510>
   12754:	str	r6, [r4]
   12758:	pop	{r4, r5, r6, pc}
   1275c:	andeq	r5, r2, ip, asr r2
   12760:	ldr	r3, [pc, #12]	; 12774 <__assert_fail@plt+0x18bc>
   12764:	cmp	r0, #0
   12768:	moveq	r0, r3
   1276c:	ldr	r0, [r0]
   12770:	bx	lr
   12774:	andeq	r5, r2, ip, asr r2
   12778:	ldr	r3, [pc, #12]	; 1278c <__assert_fail@plt+0x18d4>
   1277c:	cmp	r0, #0
   12780:	moveq	r0, r3
   12784:	str	r1, [r0]
   12788:	bx	lr
   1278c:	andeq	r5, r2, ip, asr r2
   12790:	ldr	r3, [pc, #52]	; 127cc <__assert_fail@plt+0x1914>
   12794:	cmp	r0, #0
   12798:	push	{lr}		; (str lr, [sp, #-4]!)
   1279c:	lsr	lr, r1, #5
   127a0:	and	r1, r1, #31
   127a4:	moveq	r0, r3
   127a8:	add	r3, r0, #8
   127ac:	ldr	ip, [r3, lr, lsl #2]
   127b0:	lsr	r0, ip, r1
   127b4:	eor	r2, r2, r0
   127b8:	and	r0, r0, #1
   127bc:	and	r2, r2, #1
   127c0:	eor	r1, ip, r2, lsl r1
   127c4:	str	r1, [r3, lr, lsl #2]
   127c8:	pop	{pc}		; (ldr pc, [sp], #4)
   127cc:	andeq	r5, r2, ip, asr r2
   127d0:	ldr	r3, [pc, #16]	; 127e8 <__assert_fail@plt+0x1930>
   127d4:	cmp	r0, #0
   127d8:	movne	r3, r0
   127dc:	ldr	r0, [r3, #4]
   127e0:	str	r1, [r3, #4]
   127e4:	bx	lr
   127e8:	andeq	r5, r2, ip, asr r2
   127ec:	ldr	r3, [pc, #44]	; 12820 <__assert_fail@plt+0x1968>
   127f0:	cmp	r0, #0
   127f4:	moveq	r0, r3
   127f8:	mov	r3, #10
   127fc:	cmp	r2, #0
   12800:	cmpne	r1, #0
   12804:	str	r3, [r0]
   12808:	bne	12814 <__assert_fail@plt+0x195c>
   1280c:	push	{r4, lr}
   12810:	bl	10eac <abort@plt>
   12814:	str	r1, [r0, #40]	; 0x28
   12818:	str	r2, [r0, #44]	; 0x2c
   1281c:	bx	lr
   12820:	andeq	r5, r2, ip, asr r2
   12824:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12828:	sub	sp, sp, #24
   1282c:	mov	sl, r3
   12830:	mov	r7, r0
   12834:	mov	r8, r1
   12838:	mov	r9, r2
   1283c:	ldr	r4, [sp, #56]	; 0x38
   12840:	ldr	r3, [pc, #88]	; 128a0 <__assert_fail@plt+0x19e8>
   12844:	cmp	r4, #0
   12848:	moveq	r4, r3
   1284c:	bl	10dec <__errno_location@plt>
   12850:	ldr	r3, [r4, #44]	; 0x2c
   12854:	mov	r5, r0
   12858:	mov	r2, r9
   1285c:	mov	r1, r8
   12860:	mov	r0, r7
   12864:	ldr	r6, [r5]
   12868:	str	r3, [sp, #16]
   1286c:	ldr	r3, [r4, #40]	; 0x28
   12870:	str	r3, [sp, #12]
   12874:	add	r3, r4, #8
   12878:	str	r3, [sp, #8]
   1287c:	ldr	r3, [r4, #4]
   12880:	str	r3, [sp, #4]
   12884:	ldr	r3, [r4]
   12888:	str	r3, [sp]
   1288c:	mov	r3, sl
   12890:	bl	11894 <__assert_fail@plt+0x9dc>
   12894:	str	r6, [r5]
   12898:	add	sp, sp, #24
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128a0:	andeq	r5, r2, ip, asr r2
   128a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a8:	cmp	r3, #0
   128ac:	sub	sp, sp, #44	; 0x2c
   128b0:	mov	r6, r2
   128b4:	mov	sl, r1
   128b8:	mov	r9, r0
   128bc:	ldr	r4, [pc, #176]	; 12974 <__assert_fail@plt+0x1abc>
   128c0:	movne	r4, r3
   128c4:	bl	10dec <__errno_location@plt>
   128c8:	ldr	r3, [r0]
   128cc:	mov	r1, #0
   128d0:	mov	r2, r9
   128d4:	mov	r8, r0
   128d8:	mov	r0, r1
   128dc:	ldr	r5, [r4, #4]
   128e0:	add	fp, r4, #8
   128e4:	str	r3, [sp, #28]
   128e8:	ldr	r3, [r4, #44]	; 0x2c
   128ec:	cmp	r6, #0
   128f0:	orreq	r5, r5, #1
   128f4:	str	r3, [sp, #16]
   128f8:	ldr	r3, [r4, #40]	; 0x28
   128fc:	stmib	sp, {r5, fp}
   12900:	str	r3, [sp, #12]
   12904:	ldr	r3, [r4]
   12908:	str	r3, [sp]
   1290c:	mov	r3, sl
   12910:	bl	11894 <__assert_fail@plt+0x9dc>
   12914:	add	r1, r0, #1
   12918:	mov	r7, r0
   1291c:	mov	r0, r1
   12920:	str	r1, [sp, #36]	; 0x24
   12924:	bl	131c8 <__assert_fail@plt+0x2310>
   12928:	ldr	r3, [r4, #44]	; 0x2c
   1292c:	mov	r2, r9
   12930:	ldr	r1, [sp, #36]	; 0x24
   12934:	str	r3, [sp, #16]
   12938:	ldr	r3, [r4, #40]	; 0x28
   1293c:	stmib	sp, {r5, fp}
   12940:	str	r0, [sp, #32]
   12944:	str	r3, [sp, #12]
   12948:	ldr	r3, [r4]
   1294c:	str	r3, [sp]
   12950:	mov	r3, sl
   12954:	bl	11894 <__assert_fail@plt+0x9dc>
   12958:	ldr	r3, [sp, #28]
   1295c:	cmp	r6, #0
   12960:	ldr	r0, [sp, #32]
   12964:	str	r3, [r8]
   12968:	strne	r7, [r6]
   1296c:	add	sp, sp, #44	; 0x2c
   12970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12974:	andeq	r5, r2, ip, asr r2
   12978:	mov	r3, r2
   1297c:	mov	r2, #0
   12980:	b	128a4 <__assert_fail@plt+0x19ec>
   12984:	push	{r4, r5, r6, r7, r8, lr}
   12988:	mov	r6, #1
   1298c:	ldr	r4, [pc, #100]	; 129f8 <__assert_fail@plt+0x1b40>
   12990:	ldr	r5, [r4]
   12994:	add	r7, r5, #4
   12998:	ldr	r3, [r4, #4]
   1299c:	cmp	r3, r6
   129a0:	bgt	129e8 <__assert_fail@plt+0x1b30>
   129a4:	ldr	r6, [pc, #80]	; 129fc <__assert_fail@plt+0x1b44>
   129a8:	ldr	r0, [r5, #4]
   129ac:	cmp	r0, r6
   129b0:	beq	129c4 <__assert_fail@plt+0x1b0c>
   129b4:	bl	13de4 <__assert_fail@plt+0x2f2c>
   129b8:	mov	r3, #256	; 0x100
   129bc:	str	r3, [r4, #8]
   129c0:	str	r6, [r4, #12]
   129c4:	ldr	r6, [pc, #52]	; 12a00 <__assert_fail@plt+0x1b48>
   129c8:	cmp	r5, r6
   129cc:	beq	129dc <__assert_fail@plt+0x1b24>
   129d0:	mov	r0, r5
   129d4:	bl	13de4 <__assert_fail@plt+0x2f2c>
   129d8:	str	r6, [r4]
   129dc:	mov	r3, #1
   129e0:	str	r3, [r4, #4]
   129e4:	pop	{r4, r5, r6, r7, r8, pc}
   129e8:	ldr	r0, [r7, r6, lsl #3]
   129ec:	add	r6, r6, #1
   129f0:	bl	13de4 <__assert_fail@plt+0x2f2c>
   129f4:	b	12998 <__assert_fail@plt+0x1ae0>
   129f8:	andeq	r5, r2, ip, ror #1
   129fc:	andeq	r5, r2, ip, asr r1
   12a00:	strdeq	r5, [r2], -r4
   12a04:	ldr	r3, [pc, #4]	; 12a10 <__assert_fail@plt+0x1b58>
   12a08:	mvn	r2, #0
   12a0c:	b	12584 <__assert_fail@plt+0x16cc>
   12a10:	andeq	r5, r2, ip, asr r2
   12a14:	ldr	r3, [pc]	; 12a1c <__assert_fail@plt+0x1b64>
   12a18:	b	12584 <__assert_fail@plt+0x16cc>
   12a1c:	andeq	r5, r2, ip, asr r2
   12a20:	mov	r1, r0
   12a24:	mov	r0, #0
   12a28:	b	12a04 <__assert_fail@plt+0x1b4c>
   12a2c:	mov	r2, r1
   12a30:	mov	r1, r0
   12a34:	mov	r0, #0
   12a38:	b	12a14 <__assert_fail@plt+0x1b5c>
   12a3c:	push	{r4, r5, lr}
   12a40:	sub	sp, sp, #52	; 0x34
   12a44:	mov	r5, r2
   12a48:	mov	r4, r0
   12a4c:	mov	r0, sp
   12a50:	bl	11738 <__assert_fail@plt+0x880>
   12a54:	mov	r3, sp
   12a58:	mvn	r2, #0
   12a5c:	mov	r1, r5
   12a60:	mov	r0, r4
   12a64:	bl	12584 <__assert_fail@plt+0x16cc>
   12a68:	add	sp, sp, #52	; 0x34
   12a6c:	pop	{r4, r5, pc}
   12a70:	push	{r4, r5, r6, lr}
   12a74:	sub	sp, sp, #48	; 0x30
   12a78:	mov	r5, r2
   12a7c:	mov	r6, r3
   12a80:	mov	r4, r0
   12a84:	mov	r0, sp
   12a88:	bl	11738 <__assert_fail@plt+0x880>
   12a8c:	mov	r3, sp
   12a90:	mov	r2, r6
   12a94:	mov	r1, r5
   12a98:	mov	r0, r4
   12a9c:	bl	12584 <__assert_fail@plt+0x16cc>
   12aa0:	add	sp, sp, #48	; 0x30
   12aa4:	pop	{r4, r5, r6, pc}
   12aa8:	mov	r2, r1
   12aac:	mov	r1, r0
   12ab0:	mov	r0, #0
   12ab4:	b	12a3c <__assert_fail@plt+0x1b84>
   12ab8:	mov	r3, r2
   12abc:	mov	r2, r1
   12ac0:	mov	r1, r0
   12ac4:	mov	r0, #0
   12ac8:	b	12a70 <__assert_fail@plt+0x1bb8>
   12acc:	push	{r4, r5, r6, lr}
   12ad0:	mov	r4, r0
   12ad4:	mov	r5, r1
   12ad8:	mov	r6, r2
   12adc:	sub	sp, sp, #48	; 0x30
   12ae0:	mov	ip, sp
   12ae4:	ldr	lr, [pc, #64]	; 12b2c <__assert_fail@plt+0x1c74>
   12ae8:	ldm	lr!, {r0, r1, r2, r3}
   12aec:	stmia	ip!, {r0, r1, r2, r3}
   12af0:	ldm	lr!, {r0, r1, r2, r3}
   12af4:	stmia	ip!, {r0, r1, r2, r3}
   12af8:	ldm	lr, {r0, r1, r2, r3}
   12afc:	stm	ip, {r0, r1, r2, r3}
   12b00:	mov	r1, r6
   12b04:	mov	r2, #1
   12b08:	mov	r0, sp
   12b0c:	bl	12790 <__assert_fail@plt+0x18d8>
   12b10:	mov	r3, sp
   12b14:	mov	r2, r5
   12b18:	mov	r1, r4
   12b1c:	mov	r0, #0
   12b20:	bl	12584 <__assert_fail@plt+0x16cc>
   12b24:	add	sp, sp, #48	; 0x30
   12b28:	pop	{r4, r5, r6, pc}
   12b2c:	andeq	r5, r2, ip, asr r2
   12b30:	mov	r2, r1
   12b34:	mvn	r1, #0
   12b38:	b	12acc <__assert_fail@plt+0x1c14>
   12b3c:	mov	r1, #58	; 0x3a
   12b40:	b	12b30 <__assert_fail@plt+0x1c78>
   12b44:	mov	r2, #58	; 0x3a
   12b48:	b	12acc <__assert_fail@plt+0x1c14>
   12b4c:	push	{r4, r5, lr}
   12b50:	sub	sp, sp, #100	; 0x64
   12b54:	mov	r4, r0
   12b58:	mov	r0, sp
   12b5c:	mov	r5, r2
   12b60:	bl	11738 <__assert_fail@plt+0x880>
   12b64:	mov	ip, sp
   12b68:	add	lr, sp, #48	; 0x30
   12b6c:	ldm	ip!, {r0, r1, r2, r3}
   12b70:	stmia	lr!, {r0, r1, r2, r3}
   12b74:	ldm	ip!, {r0, r1, r2, r3}
   12b78:	stmia	lr!, {r0, r1, r2, r3}
   12b7c:	ldm	ip, {r0, r1, r2, r3}
   12b80:	stm	lr, {r0, r1, r2, r3}
   12b84:	mov	r2, #1
   12b88:	mov	r1, #58	; 0x3a
   12b8c:	add	r0, sp, #48	; 0x30
   12b90:	bl	12790 <__assert_fail@plt+0x18d8>
   12b94:	add	r3, sp, #48	; 0x30
   12b98:	mvn	r2, #0
   12b9c:	mov	r1, r5
   12ba0:	mov	r0, r4
   12ba4:	bl	12584 <__assert_fail@plt+0x16cc>
   12ba8:	add	sp, sp, #100	; 0x64
   12bac:	pop	{r4, r5, pc}
   12bb0:	push	{r4, r5, r6, r7, lr}
   12bb4:	mov	r4, r0
   12bb8:	mov	r6, r1
   12bbc:	mov	r7, r2
   12bc0:	mov	r5, r3
   12bc4:	sub	sp, sp, #52	; 0x34
   12bc8:	ldr	lr, [pc, #68]	; 12c14 <__assert_fail@plt+0x1d5c>
   12bcc:	mov	ip, sp
   12bd0:	ldm	lr!, {r0, r1, r2, r3}
   12bd4:	stmia	ip!, {r0, r1, r2, r3}
   12bd8:	ldm	lr!, {r0, r1, r2, r3}
   12bdc:	stmia	ip!, {r0, r1, r2, r3}
   12be0:	ldm	lr, {r0, r1, r2, r3}
   12be4:	stm	ip, {r0, r1, r2, r3}
   12be8:	mov	r2, r7
   12bec:	mov	r1, r6
   12bf0:	mov	r0, sp
   12bf4:	bl	127ec <__assert_fail@plt+0x1934>
   12bf8:	ldr	r2, [sp, #72]	; 0x48
   12bfc:	mov	r3, sp
   12c00:	mov	r1, r5
   12c04:	mov	r0, r4
   12c08:	bl	12584 <__assert_fail@plt+0x16cc>
   12c0c:	add	sp, sp, #52	; 0x34
   12c10:	pop	{r4, r5, r6, r7, pc}
   12c14:	andeq	r5, r2, ip, asr r2
   12c18:	mvn	ip, #0
   12c1c:	push	{r0, r1, r2, lr}
   12c20:	str	ip, [sp]
   12c24:	bl	12bb0 <__assert_fail@plt+0x1cf8>
   12c28:	add	sp, sp, #12
   12c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c30:	mov	r3, r2
   12c34:	mov	r2, r1
   12c38:	mov	r1, r0
   12c3c:	mov	r0, #0
   12c40:	b	12c18 <__assert_fail@plt+0x1d60>
   12c44:	push	{r0, r1, r2, lr}
   12c48:	str	r3, [sp]
   12c4c:	mov	r3, r2
   12c50:	mov	r2, r1
   12c54:	mov	r1, r0
   12c58:	mov	r0, #0
   12c5c:	bl	12bb0 <__assert_fail@plt+0x1cf8>
   12c60:	add	sp, sp, #12
   12c64:	pop	{pc}		; (ldr pc, [sp], #4)
   12c68:	ldr	r3, [pc]	; 12c70 <__assert_fail@plt+0x1db8>
   12c6c:	b	12584 <__assert_fail@plt+0x16cc>
   12c70:	strdeq	r5, [r2], -ip
   12c74:	mov	r2, r1
   12c78:	mov	r1, r0
   12c7c:	mov	r0, #0
   12c80:	b	12c68 <__assert_fail@plt+0x1db0>
   12c84:	mvn	r2, #0
   12c88:	b	12c68 <__assert_fail@plt+0x1db0>
   12c8c:	mov	r1, r0
   12c90:	mov	r0, #0
   12c94:	b	12c84 <__assert_fail@plt+0x1dcc>
   12c98:	push	{r4, r5, r6, lr}
   12c9c:	cmp	r1, #0
   12ca0:	sub	sp, sp, #32
   12ca4:	mov	r5, r0
   12ca8:	ldr	r4, [sp, #48]	; 0x30
   12cac:	ldr	r6, [sp, #52]	; 0x34
   12cb0:	beq	12d64 <__assert_fail@plt+0x1eac>
   12cb4:	strd	r2, [sp]
   12cb8:	mov	r3, r1
   12cbc:	mov	r1, #1
   12cc0:	ldr	r2, [pc, #856]	; 13020 <__assert_fail@plt+0x2168>
   12cc4:	bl	10e34 <__fprintf_chk@plt>
   12cc8:	mov	r2, #5
   12ccc:	ldr	r1, [pc, #848]	; 13024 <__assert_fail@plt+0x216c>
   12cd0:	mov	r0, #0
   12cd4:	bl	10ce4 <dcgettext@plt>
   12cd8:	movw	r3, #2022	; 0x7e6
   12cdc:	ldr	r2, [pc, #836]	; 13028 <__assert_fail@plt+0x2170>
   12ce0:	mov	r1, #1
   12ce4:	str	r3, [sp]
   12ce8:	mov	r3, r0
   12cec:	mov	r0, r5
   12cf0:	bl	10e34 <__fprintf_chk@plt>
   12cf4:	mov	r1, r5
   12cf8:	mov	r0, #10
   12cfc:	bl	10cd8 <fputc_unlocked@plt>
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #800]	; 1302c <__assert_fail@plt+0x2174>
   12d08:	mov	r0, #0
   12d0c:	bl	10ce4 <dcgettext@plt>
   12d10:	mov	r2, r0
   12d14:	mov	r1, #1
   12d18:	ldr	r3, [pc, #784]	; 13030 <__assert_fail@plt+0x2178>
   12d1c:	mov	r0, r5
   12d20:	bl	10e34 <__fprintf_chk@plt>
   12d24:	mov	r1, r5
   12d28:	mov	r0, #10
   12d2c:	bl	10cd8 <fputc_unlocked@plt>
   12d30:	cmp	r6, #9
   12d34:	ldrls	pc, [pc, r6, lsl #2]
   12d38:	b	13014 <__assert_fail@plt+0x215c>
   12d3c:	andeq	r2, r1, r4, asr lr
   12d40:	andeq	r2, r1, ip, ror sp
   12d44:	andeq	r2, r1, r8, lsr #27
   12d48:	ldrdeq	r2, [r1], -ip
   12d4c:	andeq	r2, r1, r8, lsl lr
   12d50:	andeq	r2, r1, ip, asr lr
   12d54:	andeq	r2, r1, r4, lsr #29
   12d58:	strdeq	r2, [r1], -r4
   12d5c:	andeq	r2, r1, ip, asr #30
   12d60:	andeq	r2, r1, ip, lsr #31
   12d64:	mov	r1, #1
   12d68:	str	r3, [sp]
   12d6c:	mov	r3, r2
   12d70:	ldr	r2, [pc, #700]	; 13034 <__assert_fail@plt+0x217c>
   12d74:	bl	10e34 <__fprintf_chk@plt>
   12d78:	b	12cc8 <__assert_fail@plt+0x1e10>
   12d7c:	mov	r2, #5
   12d80:	ldr	r1, [pc, #688]	; 13038 <__assert_fail@plt+0x2180>
   12d84:	mov	r0, #0
   12d88:	bl	10ce4 <dcgettext@plt>
   12d8c:	ldr	r3, [r4]
   12d90:	mov	r2, r0
   12d94:	mov	r1, #1
   12d98:	mov	r0, r5
   12d9c:	add	sp, sp, #32
   12da0:	pop	{r4, r5, r6, lr}
   12da4:	b	10e34 <__fprintf_chk@plt>
   12da8:	mov	r2, #5
   12dac:	ldr	r1, [pc, #648]	; 1303c <__assert_fail@plt+0x2184>
   12db0:	mov	r0, #0
   12db4:	bl	10ce4 <dcgettext@plt>
   12db8:	ldr	r3, [r4, #4]
   12dbc:	mov	r2, r0
   12dc0:	mov	r1, #1
   12dc4:	mov	r0, r5
   12dc8:	str	r3, [sp, #48]	; 0x30
   12dcc:	ldr	r3, [r4]
   12dd0:	add	sp, sp, #32
   12dd4:	pop	{r4, r5, r6, lr}
   12dd8:	b	10e34 <__fprintf_chk@plt>
   12ddc:	mov	r2, #5
   12de0:	ldr	r1, [pc, #600]	; 13040 <__assert_fail@plt+0x2188>
   12de4:	mov	r0, #0
   12de8:	bl	10ce4 <dcgettext@plt>
   12dec:	ldr	r3, [r4, #8]
   12df0:	mov	r2, r0
   12df4:	mov	r1, #1
   12df8:	mov	r0, r5
   12dfc:	str	r3, [sp, #52]	; 0x34
   12e00:	ldr	r3, [r4, #4]
   12e04:	str	r3, [sp, #48]	; 0x30
   12e08:	ldr	r3, [r4]
   12e0c:	add	sp, sp, #32
   12e10:	pop	{r4, r5, r6, lr}
   12e14:	b	10e34 <__fprintf_chk@plt>
   12e18:	mov	r2, #5
   12e1c:	ldr	r1, [pc, #544]	; 13044 <__assert_fail@plt+0x218c>
   12e20:	mov	r0, #0
   12e24:	bl	10ce4 <dcgettext@plt>
   12e28:	ldr	r3, [r4, #12]
   12e2c:	mov	r2, r0
   12e30:	mov	r1, #1
   12e34:	mov	r0, r5
   12e38:	str	r3, [sp, #8]
   12e3c:	ldr	r3, [r4, #8]
   12e40:	str	r3, [sp, #4]
   12e44:	ldr	r3, [r4, #4]
   12e48:	str	r3, [sp]
   12e4c:	ldr	r3, [r4]
   12e50:	bl	10e34 <__fprintf_chk@plt>
   12e54:	add	sp, sp, #32
   12e58:	pop	{r4, r5, r6, pc}
   12e5c:	mov	r2, #5
   12e60:	ldr	r1, [pc, #480]	; 13048 <__assert_fail@plt+0x2190>
   12e64:	mov	r0, #0
   12e68:	bl	10ce4 <dcgettext@plt>
   12e6c:	ldr	r3, [r4, #16]
   12e70:	mov	r2, r0
   12e74:	mov	r1, #1
   12e78:	mov	r0, r5
   12e7c:	str	r3, [sp, #12]
   12e80:	ldr	r3, [r4, #12]
   12e84:	str	r3, [sp, #8]
   12e88:	ldr	r3, [r4, #8]
   12e8c:	str	r3, [sp, #4]
   12e90:	ldr	r3, [r4, #4]
   12e94:	str	r3, [sp]
   12e98:	ldr	r3, [r4]
   12e9c:	bl	10e34 <__fprintf_chk@plt>
   12ea0:	b	12e54 <__assert_fail@plt+0x1f9c>
   12ea4:	mov	r2, #5
   12ea8:	ldr	r1, [pc, #412]	; 1304c <__assert_fail@plt+0x2194>
   12eac:	mov	r0, #0
   12eb0:	bl	10ce4 <dcgettext@plt>
   12eb4:	ldr	r3, [r4, #20]
   12eb8:	mov	r2, r0
   12ebc:	mov	r1, #1
   12ec0:	mov	r0, r5
   12ec4:	str	r3, [sp, #16]
   12ec8:	ldr	r3, [r4, #16]
   12ecc:	str	r3, [sp, #12]
   12ed0:	ldr	r3, [r4, #12]
   12ed4:	str	r3, [sp, #8]
   12ed8:	ldr	r3, [r4, #8]
   12edc:	str	r3, [sp, #4]
   12ee0:	ldr	r3, [r4, #4]
   12ee4:	str	r3, [sp]
   12ee8:	ldr	r3, [r4]
   12eec:	bl	10e34 <__fprintf_chk@plt>
   12ef0:	b	12e54 <__assert_fail@plt+0x1f9c>
   12ef4:	mov	r2, #5
   12ef8:	ldr	r1, [pc, #336]	; 13050 <__assert_fail@plt+0x2198>
   12efc:	mov	r0, #0
   12f00:	bl	10ce4 <dcgettext@plt>
   12f04:	ldr	r3, [r4, #24]
   12f08:	mov	r2, r0
   12f0c:	mov	r1, #1
   12f10:	mov	r0, r5
   12f14:	str	r3, [sp, #20]
   12f18:	ldr	r3, [r4, #20]
   12f1c:	str	r3, [sp, #16]
   12f20:	ldr	r3, [r4, #16]
   12f24:	str	r3, [sp, #12]
   12f28:	ldr	r3, [r4, #12]
   12f2c:	str	r3, [sp, #8]
   12f30:	ldr	r3, [r4, #8]
   12f34:	str	r3, [sp, #4]
   12f38:	ldr	r3, [r4, #4]
   12f3c:	str	r3, [sp]
   12f40:	ldr	r3, [r4]
   12f44:	bl	10e34 <__fprintf_chk@plt>
   12f48:	b	12e54 <__assert_fail@plt+0x1f9c>
   12f4c:	mov	r2, #5
   12f50:	ldr	r1, [pc, #252]	; 13054 <__assert_fail@plt+0x219c>
   12f54:	mov	r0, #0
   12f58:	bl	10ce4 <dcgettext@plt>
   12f5c:	ldr	r3, [r4, #28]
   12f60:	mov	r2, r0
   12f64:	mov	r1, #1
   12f68:	mov	r0, r5
   12f6c:	str	r3, [sp, #24]
   12f70:	ldr	r3, [r4, #24]
   12f74:	str	r3, [sp, #20]
   12f78:	ldr	r3, [r4, #20]
   12f7c:	str	r3, [sp, #16]
   12f80:	ldr	r3, [r4, #16]
   12f84:	str	r3, [sp, #12]
   12f88:	ldr	r3, [r4, #12]
   12f8c:	str	r3, [sp, #8]
   12f90:	ldr	r3, [r4, #8]
   12f94:	str	r3, [sp, #4]
   12f98:	ldr	r3, [r4, #4]
   12f9c:	str	r3, [sp]
   12fa0:	ldr	r3, [r4]
   12fa4:	bl	10e34 <__fprintf_chk@plt>
   12fa8:	b	12e54 <__assert_fail@plt+0x1f9c>
   12fac:	ldr	r1, [pc, #164]	; 13058 <__assert_fail@plt+0x21a0>
   12fb0:	mov	r2, #5
   12fb4:	mov	r0, #0
   12fb8:	bl	10ce4 <dcgettext@plt>
   12fbc:	ldr	r3, [r4, #32]
   12fc0:	mov	r2, r0
   12fc4:	mov	r1, #1
   12fc8:	mov	r0, r5
   12fcc:	str	r3, [sp, #28]
   12fd0:	ldr	r3, [r4, #28]
   12fd4:	str	r3, [sp, #24]
   12fd8:	ldr	r3, [r4, #24]
   12fdc:	str	r3, [sp, #20]
   12fe0:	ldr	r3, [r4, #20]
   12fe4:	str	r3, [sp, #16]
   12fe8:	ldr	r3, [r4, #16]
   12fec:	str	r3, [sp, #12]
   12ff0:	ldr	r3, [r4, #12]
   12ff4:	str	r3, [sp, #8]
   12ff8:	ldr	r3, [r4, #8]
   12ffc:	str	r3, [sp, #4]
   13000:	ldr	r3, [r4, #4]
   13004:	str	r3, [sp]
   13008:	ldr	r3, [r4]
   1300c:	bl	10e34 <__fprintf_chk@plt>
   13010:	b	12e54 <__assert_fail@plt+0x1f9c>
   13014:	mov	r2, #5
   13018:	ldr	r1, [pc, #60]	; 1305c <__assert_fail@plt+0x21a4>
   1301c:	b	12fb4 <__assert_fail@plt+0x20fc>
   13020:	andeq	r4, r1, r9, lsl r6
   13024:	andeq	r4, r1, ip, lsr #12
   13028:	strdeq	r4, [r1], -sl
   1302c:	andeq	r4, r1, r0, lsr r6
   13030:	ldrdeq	r4, [r1], -fp
   13034:	andeq	r4, r1, r5, lsr #12
   13038:	strdeq	r4, [r1], -sp
   1303c:	andeq	r4, r1, sp, lsl #14
   13040:	andeq	r4, r1, r4, lsr #14
   13044:	andeq	r4, r1, r0, asr #14
   13048:	andeq	r4, r1, r0, ror #14
   1304c:	andeq	r4, r1, r4, lsl #15
   13050:	andeq	r4, r1, ip, lsr #15
   13054:	ldrdeq	r4, [r1], -r8
   13058:	andeq	r4, r1, r8, lsl #16
   1305c:	andeq	r4, r1, ip, lsr r8
   13060:	push	{r0, r1, r4, lr}
   13064:	mov	ip, #0
   13068:	ldr	lr, [sp, #16]
   1306c:	ldr	r4, [lr, ip, lsl #2]
   13070:	cmp	r4, #0
   13074:	bne	1308c <__assert_fail@plt+0x21d4>
   13078:	str	lr, [sp]
   1307c:	str	ip, [sp, #4]
   13080:	bl	12c98 <__assert_fail@plt+0x1de0>
   13084:	add	sp, sp, #8
   13088:	pop	{r4, pc}
   1308c:	add	ip, ip, #1
   13090:	b	1306c <__assert_fail@plt+0x21b4>
   13094:	push	{r4, r5, r6, lr}
   13098:	sub	sp, sp, #48	; 0x30
   1309c:	mov	ip, #0
   130a0:	add	lr, sp, #8
   130a4:	mov	r5, lr
   130a8:	ldr	r6, [sp, #64]	; 0x40
   130ac:	ldr	r4, [r6, ip, lsl #2]
   130b0:	cmp	r4, #0
   130b4:	str	r4, [lr], #4
   130b8:	beq	130c8 <__assert_fail@plt+0x2210>
   130bc:	add	ip, ip, #1
   130c0:	cmp	ip, #10
   130c4:	bne	130ac <__assert_fail@plt+0x21f4>
   130c8:	stm	sp, {r5, ip}
   130cc:	bl	12c98 <__assert_fail@plt+0x1de0>
   130d0:	add	sp, sp, #48	; 0x30
   130d4:	pop	{r4, r5, r6, pc}
   130d8:	push	{r3}		; (str r3, [sp, #-4]!)
   130dc:	push	{r0, r1, r2, r3, lr}
   130e0:	add	r3, sp, #24
   130e4:	str	r3, [sp]
   130e8:	str	r3, [sp, #12]
   130ec:	ldr	r3, [sp, #20]
   130f0:	bl	13094 <__assert_fail@plt+0x21dc>
   130f4:	add	sp, sp, #16
   130f8:	pop	{lr}		; (ldr lr, [sp], #4)
   130fc:	add	sp, sp, #4
   13100:	bx	lr
   13104:	ldr	r3, [pc, #116]	; 13180 <__assert_fail@plt+0x22c8>
   13108:	mov	r0, #10
   1310c:	push	{r4, lr}
   13110:	ldr	r1, [r3]
   13114:	bl	10cd8 <fputc_unlocked@plt>
   13118:	mov	r2, #5
   1311c:	ldr	r1, [pc, #96]	; 13184 <__assert_fail@plt+0x22cc>
   13120:	mov	r0, #0
   13124:	bl	10ce4 <dcgettext@plt>
   13128:	mov	r1, r0
   1312c:	ldr	r2, [pc, #84]	; 13188 <__assert_fail@plt+0x22d0>
   13130:	mov	r0, #1
   13134:	bl	10e10 <__printf_chk@plt>
   13138:	mov	r2, #5
   1313c:	ldr	r1, [pc, #72]	; 1318c <__assert_fail@plt+0x22d4>
   13140:	mov	r0, #0
   13144:	bl	10ce4 <dcgettext@plt>
   13148:	mov	r1, r0
   1314c:	ldr	r3, [pc, #60]	; 13190 <__assert_fail@plt+0x22d8>
   13150:	mov	r0, #1
   13154:	ldr	r2, [pc, #56]	; 13194 <__assert_fail@plt+0x22dc>
   13158:	bl	10e10 <__printf_chk@plt>
   1315c:	mov	r2, #5
   13160:	ldr	r1, [pc, #48]	; 13198 <__assert_fail@plt+0x22e0>
   13164:	mov	r0, #0
   13168:	bl	10ce4 <dcgettext@plt>
   1316c:	mov	r1, r0
   13170:	ldr	r2, [pc, #36]	; 1319c <__assert_fail@plt+0x22e4>
   13174:	mov	r0, #1
   13178:	pop	{r4, lr}
   1317c:	b	10e10 <__printf_chk@plt>
   13180:	andeq	r5, r2, r4, asr #2
   13184:	andeq	r4, r1, r8, ror r8
   13188:	andeq	r4, r1, ip, lsl #17
   1318c:	andeq	r4, r1, r2, lsr #17
   13190:	andeq	r4, r1, r7, asr #6
   13194:	andeq	r4, r1, pc, ror #6
   13198:			; <UNDEFINED> instruction: 0x000148b6
   1319c:	ldrdeq	r4, [r1], -sp
   131a0:	push	{r4, lr}
   131a4:	bl	13a10 <__assert_fail@plt+0x2b58>
   131a8:	cmp	r0, #0
   131ac:	popne	{r4, pc}
   131b0:	bl	13458 <__assert_fail@plt+0x25a0>
   131b4:	push	{r4, lr}
   131b8:	bl	13a10 <__assert_fail@plt+0x2b58>
   131bc:	cmp	r0, #0
   131c0:	popne	{r4, pc}
   131c4:	bl	13458 <__assert_fail@plt+0x25a0>
   131c8:	b	131a0 <__assert_fail@plt+0x22e8>
   131cc:	push	{r4, r5, r6, lr}
   131d0:	mov	r5, r0
   131d4:	mov	r4, r1
   131d8:	bl	13a3c <__assert_fail@plt+0x2b84>
   131dc:	cmp	r0, #0
   131e0:	popne	{r4, r5, r6, pc}
   131e4:	adds	r4, r4, #0
   131e8:	movne	r4, #1
   131ec:	cmp	r5, #0
   131f0:	moveq	r4, #1
   131f4:	cmp	r4, #0
   131f8:	popeq	{r4, r5, r6, pc}
   131fc:	bl	13458 <__assert_fail@plt+0x25a0>
   13200:	push	{r4, lr}
   13204:	bl	13ed0 <__assert_fail@plt+0x3018>
   13208:	cmp	r0, #0
   1320c:	popne	{r4, pc}
   13210:	bl	13458 <__assert_fail@plt+0x25a0>
   13214:	push	{r4, r5, r6, lr}
   13218:	mov	r6, r0
   1321c:	mov	r5, r1
   13220:	mov	r4, r2
   13224:	bl	13f78 <__assert_fail@plt+0x30c0>
   13228:	cmp	r0, #0
   1322c:	popne	{r4, r5, r6, pc}
   13230:	cmp	r6, #0
   13234:	beq	13244 <__assert_fail@plt+0x238c>
   13238:	cmp	r5, #0
   1323c:	cmpne	r4, #0
   13240:	popeq	{r4, r5, r6, pc}
   13244:	bl	13458 <__assert_fail@plt+0x25a0>
   13248:	b	13214 <__assert_fail@plt+0x235c>
   1324c:	push	{r4, lr}
   13250:	bl	13ee0 <__assert_fail@plt+0x3028>
   13254:	cmp	r0, #0
   13258:	popne	{r4, pc}
   1325c:	bl	13458 <__assert_fail@plt+0x25a0>
   13260:	mov	r2, r1
   13264:	mov	r1, r0
   13268:	mov	r0, #0
   1326c:	b	13214 <__assert_fail@plt+0x235c>
   13270:	mov	r2, r1
   13274:	mov	r1, r0
   13278:	mov	r0, #0
   1327c:	b	1324c <__assert_fail@plt+0x2394>
   13280:	cmp	r0, #0
   13284:	push	{r4, r5, r6, lr}
   13288:	mov	r5, r1
   1328c:	ldr	r4, [r1]
   13290:	bne	132bc <__assert_fail@plt+0x2404>
   13294:	cmp	r4, #0
   13298:	bne	132ac <__assert_fail@plt+0x23f4>
   1329c:	mov	r4, #64	; 0x40
   132a0:	udiv	r4, r4, r2
   132a4:	cmp	r2, #64	; 0x40
   132a8:	addhi	r4, r4, #1
   132ac:	mov	r1, r4
   132b0:	bl	13214 <__assert_fail@plt+0x235c>
   132b4:	str	r4, [r5]
   132b8:	pop	{r4, r5, r6, pc}
   132bc:	lsr	r3, r4, #1
   132c0:	add	r3, r3, #1
   132c4:	adds	r4, r4, r3
   132c8:	bcc	132ac <__assert_fail@plt+0x23f4>
   132cc:	bl	13458 <__assert_fail@plt+0x25a0>
   132d0:	mov	r2, #1
   132d4:	b	13280 <__assert_fail@plt+0x23c8>
   132d8:	ldr	ip, [r1]
   132dc:	push	{r4, r5, r6, r7, r8, lr}
   132e0:	mov	r5, r1
   132e4:	mvn	r8, r3
   132e8:	lsr	r8, r8, #31
   132ec:	ldr	lr, [sp, #24]
   132f0:	asr	r1, ip, #1
   132f4:	adds	r4, ip, r1
   132f8:	mvnvs	r4, #-2147483648	; 0x80000000
   132fc:	cmp	r3, r4
   13300:	movge	r1, #0
   13304:	andlt	r1, r8, #1
   13308:	cmp	r1, #0
   1330c:	movne	r4, r3
   13310:	smull	r6, r7, r4, lr
   13314:	cmp	r7, r6, asr #31
   13318:	bne	13330 <__assert_fail@plt+0x2478>
   1331c:	cmp	r6, #63	; 0x3f
   13320:	mov	r1, r6
   13324:	bgt	13340 <__assert_fail@plt+0x2488>
   13328:	mov	r1, #64	; 0x40
   1332c:	b	13334 <__assert_fail@plt+0x247c>
   13330:	mvn	r1, #-2147483648	; 0x80000000
   13334:	sdiv	r4, r1, lr
   13338:	mls	r6, lr, r4, r1
   1333c:	sub	r1, r1, r6
   13340:	cmp	r0, #0
   13344:	sub	r6, r4, ip
   13348:	streq	r0, [r5]
   1334c:	cmp	r6, r2
   13350:	bge	13384 <__assert_fail@plt+0x24cc>
   13354:	adds	r4, ip, r2
   13358:	bvs	13380 <__assert_fail@plt+0x24c8>
   1335c:	cmp	r4, r3
   13360:	movle	r3, #0
   13364:	andgt	r3, r8, #1
   13368:	cmp	r3, #0
   1336c:	bne	13380 <__assert_fail@plt+0x24c8>
   13370:	smull	r2, r3, r4, lr
   13374:	cmp	r3, r2, asr #31
   13378:	mov	r1, r2
   1337c:	beq	13384 <__assert_fail@plt+0x24cc>
   13380:	bl	13458 <__assert_fail@plt+0x25a0>
   13384:	bl	131cc <__assert_fail@plt+0x2314>
   13388:	str	r4, [r5]
   1338c:	pop	{r4, r5, r6, r7, r8, pc}
   13390:	push	{r4, lr}
   13394:	bl	139bc <__assert_fail@plt+0x2b04>
   13398:	cmp	r0, #0
   1339c:	popne	{r4, pc}
   133a0:	bl	13458 <__assert_fail@plt+0x25a0>
   133a4:	mov	r1, #1
   133a8:	b	13390 <__assert_fail@plt+0x24d8>
   133ac:	push	{r4, lr}
   133b0:	bl	139bc <__assert_fail@plt+0x2b04>
   133b4:	cmp	r0, #0
   133b8:	popne	{r4, pc}
   133bc:	bl	13458 <__assert_fail@plt+0x25a0>
   133c0:	mov	r1, #1
   133c4:	b	133ac <__assert_fail@plt+0x24f4>
   133c8:	push	{r4, r5, r6, lr}
   133cc:	mov	r4, r1
   133d0:	mov	r5, r0
   133d4:	mov	r0, r1
   133d8:	bl	131a0 <__assert_fail@plt+0x22e8>
   133dc:	mov	r2, r4
   133e0:	mov	r1, r5
   133e4:	pop	{r4, r5, r6, lr}
   133e8:	b	10ca8 <memcpy@plt>
   133ec:	push	{r4, r5, r6, lr}
   133f0:	mov	r4, r1
   133f4:	mov	r5, r0
   133f8:	mov	r0, r1
   133fc:	bl	131b4 <__assert_fail@plt+0x22fc>
   13400:	mov	r2, r4
   13404:	mov	r1, r5
   13408:	pop	{r4, r5, r6, lr}
   1340c:	b	10ca8 <memcpy@plt>
   13410:	push	{r4, r5, r6, lr}
   13414:	mov	r5, r0
   13418:	add	r0, r1, #1
   1341c:	mov	r4, r1
   13420:	bl	131b4 <__assert_fail@plt+0x22fc>
   13424:	mov	r2, #0
   13428:	mov	r1, r5
   1342c:	strb	r2, [r0, r4]
   13430:	mov	r2, r4
   13434:	pop	{r4, r5, r6, lr}
   13438:	b	10ca8 <memcpy@plt>
   1343c:	push	{r4, lr}
   13440:	mov	r4, r0
   13444:	bl	10dd4 <strlen@plt>
   13448:	add	r1, r0, #1
   1344c:	mov	r0, r4
   13450:	pop	{r4, lr}
   13454:	b	133c8 <__assert_fail@plt+0x2510>
   13458:	ldr	r3, [pc, #44]	; 1348c <__assert_fail@plt+0x25d4>
   1345c:	mov	r2, #5
   13460:	mov	r0, #0
   13464:	push	{r4, lr}
   13468:	ldr	r1, [pc, #32]	; 13490 <__assert_fail@plt+0x25d8>
   1346c:	ldr	r4, [r3]
   13470:	bl	10ce4 <dcgettext@plt>
   13474:	mov	r3, r0
   13478:	ldr	r2, [pc, #20]	; 13494 <__assert_fail@plt+0x25dc>
   1347c:	mov	r1, #0
   13480:	mov	r0, r4
   13484:	bl	10d5c <error@plt>
   13488:	bl	10eac <abort@plt>
   1348c:	andeq	r5, r2, r8, ror #1
   13490:	andeq	r4, r1, r9, lsr #18
   13494:	strdeq	r4, [r1], -fp
   13498:	push	{r4, r5, r6, r7, r8, r9, lr}
   1349c:	sub	sp, sp, #20
   134a0:	mov	r9, r3
   134a4:	mov	r8, r2
   134a8:	mov	r2, r1
   134ac:	mov	r1, #0
   134b0:	mov	r7, r0
   134b4:	ldr	r3, [sp, #56]	; 0x38
   134b8:	ldr	r6, [sp, #64]	; 0x40
   134bc:	str	r3, [sp]
   134c0:	add	r3, sp, #8
   134c4:	bl	13628 <__assert_fail@plt+0x2770>
   134c8:	subs	r4, r0, #0
   134cc:	bne	1355c <__assert_fail@plt+0x26a4>
   134d0:	ldrd	r4, [sp, #8]
   134d4:	ldrd	r2, [sp, #48]	; 0x30
   134d8:	cmp	r5, r9
   134dc:	cmpeq	r4, r8
   134e0:	movcc	r1, #1
   134e4:	movcs	r1, #0
   134e8:	cmp	r5, r3
   134ec:	cmpeq	r4, r2
   134f0:	movls	r3, r1
   134f4:	orrhi	r3, r1, #1
   134f8:	cmp	r3, #0
   134fc:	beq	13578 <__assert_fail@plt+0x26c0>
   13500:	bl	10dec <__errno_location@plt>
   13504:	mov	r3, #0
   13508:	mvn	r2, #-1073741824	; 0xc0000000
   1350c:	cmp	r5, r3
   13510:	cmpeq	r4, r2
   13514:	movls	r3, #34	; 0x22
   13518:	bls	13520 <__assert_fail@plt+0x2668>
   1351c:	mov	r3, #75	; 0x4b
   13520:	str	r3, [r0]
   13524:	cmp	r6, #0
   13528:	moveq	r6, #1
   1352c:	bl	10dec <__errno_location@plt>
   13530:	ldr	r4, [r0]
   13534:	mov	r0, r7
   13538:	cmp	r4, #22
   1353c:	moveq	r4, #0
   13540:	bl	12c8c <__assert_fail@plt+0x1dd4>
   13544:	ldr	r2, [pc, #60]	; 13588 <__assert_fail@plt+0x26d0>
   13548:	mov	r1, r4
   1354c:	str	r0, [sp]
   13550:	mov	r0, r6
   13554:	ldr	r3, [sp, #60]	; 0x3c
   13558:	bl	10d5c <error@plt>
   1355c:	bl	10dec <__errno_location@plt>
   13560:	cmp	r4, #1
   13564:	beq	1351c <__assert_fail@plt+0x2664>
   13568:	cmp	r4, #3
   1356c:	bne	13524 <__assert_fail@plt+0x266c>
   13570:	mov	r3, #0
   13574:	b	13520 <__assert_fail@plt+0x2668>
   13578:	mov	r0, r4
   1357c:	mov	r1, r5
   13580:	add	sp, sp, #20
   13584:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13588:	strdeq	r4, [r1], -r7
   1358c:	mov	r1, #10
   13590:	b	13498 <__assert_fail@plt+0x25e0>
   13594:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13598:	mov	ip, r0
   1359c:	asr	fp, r1, #31
   135a0:	mov	r0, #0
   135a4:	mov	lr, r0
   135a8:	subs	r2, r2, #1
   135ac:	bcs	135b8 <__assert_fail@plt+0x2700>
   135b0:	add	sp, sp, #12
   135b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135b8:	ldrd	r8, [ip]
   135bc:	mov	r3, #0
   135c0:	cmp	r9, r3
   135c4:	umulleq	r8, r9, r8, r1
   135c8:	moveq	r6, r8
   135cc:	moveq	r4, r9
   135d0:	beq	13608 <__assert_fail@plt+0x2750>
   135d4:	umull	r4, r5, r8, r1
   135d8:	strd	r4, [sp]
   135dc:	mov	r5, lr
   135e0:	ldr	r4, [sp, #4]
   135e4:	umlal	r4, r5, r9, r1
   135e8:	cmp	r5, #0
   135ec:	ldrne	r3, [sp, #4]
   135f0:	mulne	r4, r1, r9
   135f4:	ldreq	r6, [sp]
   135f8:	mlane	r4, r8, fp, r4
   135fc:	ldrne	r6, [sp]
   13600:	addne	r4, r4, r3
   13604:	movne	r3, #1
   13608:	cmp	r3, #0
   1360c:	mvnne	r6, #0
   13610:	movne	r3, #1
   13614:	movne	r4, r6
   13618:	orr	r0, r0, r3
   1361c:	str	r6, [ip]
   13620:	str	r4, [ip, #4]
   13624:	b	135a8 <__assert_fail@plt+0x26f0>
   13628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1362c:	cmp	r2, #36	; 0x24
   13630:	sub	sp, sp, #20
   13634:	ldr	r5, [sp, #56]	; 0x38
   13638:	bls	13650 <__assert_fail@plt+0x2798>
   1363c:	ldr	r3, [pc, #876]	; 139b0 <__assert_fail@plt+0x2af8>
   13640:	mov	r2, #85	; 0x55
   13644:	ldr	r1, [pc, #872]	; 139b4 <__assert_fail@plt+0x2afc>
   13648:	ldr	r0, [pc, #872]	; 139b8 <__assert_fail@plt+0x2b00>
   1364c:	bl	10eb8 <__assert_fail@plt>
   13650:	cmp	r1, #0
   13654:	mov	r6, r1
   13658:	mov	r8, r0
   1365c:	mov	fp, r2
   13660:	mov	r7, r3
   13664:	addeq	r6, sp, #4
   13668:	bl	10dec <__errno_location@plt>
   1366c:	mov	r3, #0
   13670:	mov	sl, r0
   13674:	str	r3, [r0]
   13678:	bl	10db0 <__ctype_b_loc@plt>
   1367c:	ldrb	r9, [r8]
   13680:	mov	r3, r8
   13684:	ldr	r1, [r0]
   13688:	lsl	r2, r9, #1
   1368c:	ldrh	r4, [r1, r2]
   13690:	ands	r4, r4, #8192	; 0x2000
   13694:	bne	136b0 <__assert_fail@plt+0x27f8>
   13698:	cmp	r9, #45	; 0x2d
   1369c:	bne	136b8 <__assert_fail@plt+0x2800>
   136a0:	mov	r4, #4
   136a4:	mov	r0, r4
   136a8:	add	sp, sp, #20
   136ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b0:	ldrb	r9, [r3, #1]!
   136b4:	b	13688 <__assert_fail@plt+0x27d0>
   136b8:	mov	r2, fp
   136bc:	mov	r1, r6
   136c0:	mov	r0, r8
   136c4:	bl	10e28 <strtoumax@plt>
   136c8:	ldr	r9, [r6]
   136cc:	strd	r0, [sp, #8]
   136d0:	cmp	r9, r8
   136d4:	bne	13738 <__assert_fail@plt+0x2880>
   136d8:	cmp	r5, #0
   136dc:	beq	136a0 <__assert_fail@plt+0x27e8>
   136e0:	ldrb	r1, [r8]
   136e4:	cmp	r1, #0
   136e8:	beq	136a0 <__assert_fail@plt+0x27e8>
   136ec:	mov	r0, r5
   136f0:	bl	10de0 <strchr@plt>
   136f4:	cmp	r0, #0
   136f8:	movne	r2, #1
   136fc:	movne	r3, #0
   13700:	strdne	r2, [sp, #8]
   13704:	beq	136a0 <__assert_fail@plt+0x27e8>
   13708:	ldrb	r8, [r9]
   1370c:	cmp	r8, #0
   13710:	beq	13968 <__assert_fail@plt+0x2ab0>
   13714:	mov	r1, r8
   13718:	mov	r0, r5
   1371c:	bl	10de0 <strchr@plt>
   13720:	cmp	r0, #0
   13724:	bne	13760 <__assert_fail@plt+0x28a8>
   13728:	ldrd	r2, [sp, #8]
   1372c:	orr	r4, r4, #2
   13730:	strd	r2, [r7]
   13734:	b	136a4 <__assert_fail@plt+0x27ec>
   13738:	ldr	r4, [sl]
   1373c:	cmp	r4, #0
   13740:	beq	13750 <__assert_fail@plt+0x2898>
   13744:	cmp	r4, #34	; 0x22
   13748:	bne	136a0 <__assert_fail@plt+0x27e8>
   1374c:	mov	r4, #1
   13750:	cmp	r5, #0
   13754:	strdeq	r0, [r7]
   13758:	bne	13708 <__assert_fail@plt+0x2850>
   1375c:	b	136a4 <__assert_fail@plt+0x27ec>
   13760:	cmp	r8, #84	; 0x54
   13764:	beq	137b8 <__assert_fail@plt+0x2900>
   13768:	bhi	137a0 <__assert_fail@plt+0x28e8>
   1376c:	cmp	r8, #75	; 0x4b
   13770:	beq	137b8 <__assert_fail@plt+0x2900>
   13774:	bhi	13790 <__assert_fail@plt+0x28d8>
   13778:	cmp	r8, #69	; 0x45
   1377c:	beq	137b8 <__assert_fail@plt+0x2900>
   13780:	cmp	r8, #71	; 0x47
   13784:	beq	137b8 <__assert_fail@plt+0x2900>
   13788:	mov	r5, #1
   1378c:	b	13870 <__assert_fail@plt+0x29b8>
   13790:	cmp	r8, #77	; 0x4d
   13794:	beq	137b8 <__assert_fail@plt+0x2900>
   13798:	cmp	r8, #80	; 0x50
   1379c:	b	13784 <__assert_fail@plt+0x28cc>
   137a0:	cmp	r8, #103	; 0x67
   137a4:	beq	137b8 <__assert_fail@plt+0x2900>
   137a8:	bhi	13848 <__assert_fail@plt+0x2990>
   137ac:	sub	r3, r8, #89	; 0x59
   137b0:	cmp	r3, #1
   137b4:	bhi	13788 <__assert_fail@plt+0x28d0>
   137b8:	mov	r1, #48	; 0x30
   137bc:	mov	r0, r5
   137c0:	bl	10de0 <strchr@plt>
   137c4:	cmp	r0, #0
   137c8:	beq	13788 <__assert_fail@plt+0x28d0>
   137cc:	ldrb	r3, [r9, #1]
   137d0:	cmp	r3, #68	; 0x44
   137d4:	moveq	r5, #2
   137d8:	moveq	r1, #1000	; 0x3e8
   137dc:	beq	137fc <__assert_fail@plt+0x2944>
   137e0:	cmp	r3, #105	; 0x69
   137e4:	beq	13860 <__assert_fail@plt+0x29a8>
   137e8:	cmp	r3, #66	; 0x42
   137ec:	moveq	r5, #2
   137f0:	movne	r5, #1
   137f4:	moveq	r1, #1000	; 0x3e8
   137f8:	movne	r1, #1024	; 0x400
   137fc:	cmp	r8, #89	; 0x59
   13800:	beq	13998 <__assert_fail@plt+0x2ae0>
   13804:	bhi	13898 <__assert_fail@plt+0x29e0>
   13808:	cmp	r8, #75	; 0x4b
   1380c:	beq	138d8 <__assert_fail@plt+0x2a20>
   13810:	bhi	13878 <__assert_fail@plt+0x29c0>
   13814:	cmp	r8, #69	; 0x45
   13818:	beq	13974 <__assert_fail@plt+0x2abc>
   1381c:	cmp	r8, #71	; 0x47
   13820:	beq	13980 <__assert_fail@plt+0x2ac8>
   13824:	cmp	r8, #66	; 0x42
   13828:	bne	13728 <__assert_fail@plt+0x2870>
   1382c:	ldr	r3, [sp, #8]
   13830:	ldr	r1, [sp, #12]
   13834:	lsl	r2, r1, #10
   13838:	lsr	r0, r1, #22
   1383c:	orr	r2, r2, r3, lsr #22
   13840:	lsl	r3, r3, #10
   13844:	b	13924 <__assert_fail@plt+0x2a6c>
   13848:	cmp	r8, #109	; 0x6d
   1384c:	beq	137b8 <__assert_fail@plt+0x2900>
   13850:	cmp	r8, #116	; 0x74
   13854:	beq	137b8 <__assert_fail@plt+0x2900>
   13858:	cmp	r8, #107	; 0x6b
   1385c:	b	13784 <__assert_fail@plt+0x28cc>
   13860:	ldrb	r3, [r9, #2]
   13864:	cmp	r3, #66	; 0x42
   13868:	movne	r5, #1
   1386c:	moveq	r5, #3
   13870:	mov	r1, #1024	; 0x400
   13874:	b	137fc <__assert_fail@plt+0x2944>
   13878:	cmp	r8, #80	; 0x50
   1387c:	beq	13988 <__assert_fail@plt+0x2ad0>
   13880:	cmp	r8, #84	; 0x54
   13884:	beq	13990 <__assert_fail@plt+0x2ad8>
   13888:	cmp	r8, #77	; 0x4d
   1388c:	bne	13728 <__assert_fail@plt+0x2870>
   13890:	mov	r2, #2
   13894:	b	13978 <__assert_fail@plt+0x2ac0>
   13898:	cmp	r8, #103	; 0x67
   1389c:	beq	13980 <__assert_fail@plt+0x2ac8>
   138a0:	bhi	138c4 <__assert_fail@plt+0x2a0c>
   138a4:	cmp	r8, #98	; 0x62
   138a8:	beq	1390c <__assert_fail@plt+0x2a54>
   138ac:	cmp	r8, #99	; 0x63
   138b0:	beq	139a8 <__assert_fail@plt+0x2af0>
   138b4:	cmp	r8, #90	; 0x5a
   138b8:	bne	13728 <__assert_fail@plt+0x2870>
   138bc:	mov	r2, #7
   138c0:	b	13978 <__assert_fail@plt+0x2ac0>
   138c4:	cmp	r8, #109	; 0x6d
   138c8:	beq	13890 <__assert_fail@plt+0x29d8>
   138cc:	bhi	138e0 <__assert_fail@plt+0x2a28>
   138d0:	cmp	r8, #107	; 0x6b
   138d4:	bne	13728 <__assert_fail@plt+0x2870>
   138d8:	mov	r2, #1
   138dc:	b	13978 <__assert_fail@plt+0x2ac0>
   138e0:	cmp	r8, #116	; 0x74
   138e4:	beq	13990 <__assert_fail@plt+0x2ad8>
   138e8:	cmp	r8, #119	; 0x77
   138ec:	bne	13728 <__assert_fail@plt+0x2870>
   138f0:	ldr	r3, [sp, #8]
   138f4:	ldr	r2, [sp, #12]
   138f8:	ldr	r0, [sp, #12]
   138fc:	adds	r3, r3, r3
   13900:	adc	r2, r2, r2
   13904:	lsr	r0, r0, #31
   13908:	b	13924 <__assert_fail@plt+0x2a6c>
   1390c:	ldr	r3, [sp, #8]
   13910:	ldr	r1, [sp, #12]
   13914:	lsl	r2, r1, #9
   13918:	lsr	r0, r1, #23
   1391c:	orr	r2, r2, r3, lsr #23
   13920:	lsl	r3, r3, #9
   13924:	adds	r0, r0, #0
   13928:	movne	r0, #1
   1392c:	cmp	r0, #0
   13930:	streq	r3, [sp, #8]
   13934:	streq	r2, [sp, #12]
   13938:	beq	1394c <__assert_fail@plt+0x2a94>
   1393c:	mvn	r2, #0
   13940:	mvn	r3, #0
   13944:	mov	r0, #1
   13948:	strd	r2, [sp, #8]
   1394c:	ldr	r3, [r6]
   13950:	orr	r4, r4, r0
   13954:	add	r2, r3, r5
   13958:	str	r2, [r6]
   1395c:	ldrb	r3, [r3, r5]
   13960:	cmp	r3, #0
   13964:	orrne	r4, r4, #2
   13968:	ldrd	r2, [sp, #8]
   1396c:	strd	r2, [r7]
   13970:	b	136a4 <__assert_fail@plt+0x27ec>
   13974:	mov	r2, #6
   13978:	add	r0, sp, #8
   1397c:	b	139a0 <__assert_fail@plt+0x2ae8>
   13980:	mov	r2, #3
   13984:	b	13978 <__assert_fail@plt+0x2ac0>
   13988:	mov	r2, #5
   1398c:	b	13978 <__assert_fail@plt+0x2ac0>
   13990:	mov	r2, #4
   13994:	b	13978 <__assert_fail@plt+0x2ac0>
   13998:	mov	r2, #8
   1399c:	add	r0, sp, r2
   139a0:	bl	13594 <__assert_fail@plt+0x26dc>
   139a4:	b	1394c <__assert_fail@plt+0x2a94>
   139a8:	mov	r0, #0
   139ac:	b	1394c <__assert_fail@plt+0x2a94>
   139b0:	andeq	r4, r1, sl, lsr r9
   139b4:	andeq	r4, r1, r5, asr #18
   139b8:	andeq	r4, r1, r3, asr r9
   139bc:	cmp	r1, #0
   139c0:	cmpne	r0, #0
   139c4:	beq	139fc <__assert_fail@plt+0x2b44>
   139c8:	push	{r4, r5, r6, lr}
   139cc:	umull	r4, r5, r0, r1
   139d0:	adds	r3, r5, #0
   139d4:	movne	r3, #1
   139d8:	cmp	r4, #0
   139dc:	blt	139e8 <__assert_fail@plt+0x2b30>
   139e0:	cmp	r3, #0
   139e4:	beq	13a08 <__assert_fail@plt+0x2b50>
   139e8:	bl	10dec <__errno_location@plt>
   139ec:	mov	r3, #12
   139f0:	str	r3, [r0]
   139f4:	mov	r0, #0
   139f8:	pop	{r4, r5, r6, pc}
   139fc:	mov	r1, #1
   13a00:	mov	r0, r1
   13a04:	b	10c60 <calloc@plt>
   13a08:	pop	{r4, r5, r6, lr}
   13a0c:	b	13a04 <__assert_fail@plt+0x2b4c>
   13a10:	cmp	r0, #0
   13a14:	beq	13a34 <__assert_fail@plt+0x2b7c>
   13a18:	bge	13a38 <__assert_fail@plt+0x2b80>
   13a1c:	push	{r4, lr}
   13a20:	bl	10dec <__errno_location@plt>
   13a24:	mov	r3, #12
   13a28:	str	r3, [r0]
   13a2c:	mov	r0, #0
   13a30:	pop	{r4, pc}
   13a34:	mov	r0, #1
   13a38:	b	10d74 <malloc@plt>
   13a3c:	cmp	r0, #0
   13a40:	bne	13a4c <__assert_fail@plt+0x2b94>
   13a44:	mov	r0, r1
   13a48:	b	13a10 <__assert_fail@plt+0x2b58>
   13a4c:	cmp	r1, #0
   13a50:	push	{r4, lr}
   13a54:	bne	13a64 <__assert_fail@plt+0x2bac>
   13a58:	bl	13de4 <__assert_fail@plt+0x2f2c>
   13a5c:	mov	r0, #0
   13a60:	pop	{r4, pc}
   13a64:	blt	13a70 <__assert_fail@plt+0x2bb8>
   13a68:	pop	{r4, lr}
   13a6c:	b	10cfc <realloc@plt>
   13a70:	bl	10dec <__errno_location@plt>
   13a74:	mov	r3, #12
   13a78:	str	r3, [r0]
   13a7c:	b	13a5c <__assert_fail@plt+0x2ba4>
   13a80:	cmp	r0, #90	; 0x5a
   13a84:	bgt	13aa4 <__assert_fail@plt+0x2bec>
   13a88:	cmp	r0, #65	; 0x41
   13a8c:	bge	13ab0 <__assert_fail@plt+0x2bf8>
   13a90:	sub	r0, r0, #48	; 0x30
   13a94:	cmp	r0, #9
   13a98:	movhi	r0, #0
   13a9c:	movls	r0, #1
   13aa0:	bx	lr
   13aa4:	sub	r0, r0, #97	; 0x61
   13aa8:	cmp	r0, #25
   13aac:	b	13a98 <__assert_fail@plt+0x2be0>
   13ab0:	mov	r0, #1
   13ab4:	bx	lr
   13ab8:	cmp	r0, #65	; 0x41
   13abc:	blt	13adc <__assert_fail@plt+0x2c24>
   13ac0:	cmp	r0, #90	; 0x5a
   13ac4:	ble	13ae4 <__assert_fail@plt+0x2c2c>
   13ac8:	sub	r0, r0, #97	; 0x61
   13acc:	cmp	r0, #25
   13ad0:	movhi	r0, #0
   13ad4:	movls	r0, #1
   13ad8:	bx	lr
   13adc:	mov	r0, #0
   13ae0:	bx	lr
   13ae4:	mov	r0, #1
   13ae8:	bx	lr
   13aec:	cmp	r0, #127	; 0x7f
   13af0:	movhi	r0, #0
   13af4:	movls	r0, #1
   13af8:	bx	lr
   13afc:	cmp	r0, #9
   13b00:	cmpne	r0, #32
   13b04:	moveq	r0, #1
   13b08:	movne	r0, #0
   13b0c:	bx	lr
   13b10:	cmp	r0, #0
   13b14:	blt	13b30 <__assert_fail@plt+0x2c78>
   13b18:	cmp	r0, #31
   13b1c:	ble	13b38 <__assert_fail@plt+0x2c80>
   13b20:	sub	r0, r0, #127	; 0x7f
   13b24:	clz	r0, r0
   13b28:	lsr	r0, r0, #5
   13b2c:	bx	lr
   13b30:	mov	r0, #0
   13b34:	bx	lr
   13b38:	mov	r0, #1
   13b3c:	bx	lr
   13b40:	sub	r0, r0, #48	; 0x30
   13b44:	cmp	r0, #9
   13b48:	movhi	r0, #0
   13b4c:	movls	r0, #1
   13b50:	bx	lr
   13b54:	sub	r0, r0, #33	; 0x21
   13b58:	cmp	r0, #93	; 0x5d
   13b5c:	movhi	r0, #0
   13b60:	movls	r0, #1
   13b64:	bx	lr
   13b68:	sub	r0, r0, #97	; 0x61
   13b6c:	cmp	r0, #25
   13b70:	movhi	r0, #0
   13b74:	movls	r0, #1
   13b78:	bx	lr
   13b7c:	sub	r0, r0, #32
   13b80:	cmp	r0, #94	; 0x5e
   13b84:	movhi	r0, #0
   13b88:	movls	r0, #1
   13b8c:	bx	lr
   13b90:	cmp	r0, #64	; 0x40
   13b94:	bgt	13bb4 <__assert_fail@plt+0x2cfc>
   13b98:	cmp	r0, #58	; 0x3a
   13b9c:	bge	13bd8 <__assert_fail@plt+0x2d20>
   13ba0:	sub	r0, r0, #33	; 0x21
   13ba4:	cmp	r0, #14
   13ba8:	movhi	r0, #0
   13bac:	movls	r0, #1
   13bb0:	bx	lr
   13bb4:	cmp	r0, #91	; 0x5b
   13bb8:	blt	13bd0 <__assert_fail@plt+0x2d18>
   13bbc:	cmp	r0, #96	; 0x60
   13bc0:	ble	13bd8 <__assert_fail@plt+0x2d20>
   13bc4:	sub	r0, r0, #123	; 0x7b
   13bc8:	cmp	r0, #3
   13bcc:	b	13ba8 <__assert_fail@plt+0x2cf0>
   13bd0:	mov	r0, #0
   13bd4:	bx	lr
   13bd8:	mov	r0, #1
   13bdc:	bx	lr
   13be0:	sub	r0, r0, #9
   13be4:	cmp	r0, #23
   13be8:	bhi	13c04 <__assert_fail@plt+0x2d4c>
   13bec:	ldr	r3, [pc, #24]	; 13c0c <__assert_fail@plt+0x2d54>
   13bf0:	mov	r2, #1
   13bf4:	ands	r3, r3, r2, lsl r0
   13bf8:	movne	r0, r2
   13bfc:	moveq	r0, #0
   13c00:	bx	lr
   13c04:	mov	r0, #0
   13c08:	bx	lr
   13c0c:	addeq	r0, r0, pc, lsl r0
   13c10:	sub	r0, r0, #65	; 0x41
   13c14:	cmp	r0, #25
   13c18:	movhi	r0, #0
   13c1c:	movls	r0, #1
   13c20:	bx	lr
   13c24:	cmp	r0, #70	; 0x46
   13c28:	bgt	13c48 <__assert_fail@plt+0x2d90>
   13c2c:	cmp	r0, #65	; 0x41
   13c30:	bge	13c54 <__assert_fail@plt+0x2d9c>
   13c34:	sub	r0, r0, #48	; 0x30
   13c38:	cmp	r0, #9
   13c3c:	movhi	r0, #0
   13c40:	movls	r0, #1
   13c44:	bx	lr
   13c48:	sub	r0, r0, #97	; 0x61
   13c4c:	cmp	r0, #5
   13c50:	b	13c3c <__assert_fail@plt+0x2d84>
   13c54:	mov	r0, #1
   13c58:	bx	lr
   13c5c:	sub	r3, r0, #65	; 0x41
   13c60:	cmp	r3, #25
   13c64:	addls	r0, r0, #32
   13c68:	bx	lr
   13c6c:	sub	r3, r0, #97	; 0x61
   13c70:	cmp	r3, #25
   13c74:	subls	r0, r0, #32
   13c78:	bx	lr
   13c7c:	push	{r4, r5, r6, lr}
   13c80:	mov	r4, r0
   13c84:	bl	10d38 <__fpending@plt>
   13c88:	mov	r5, r0
   13c8c:	mov	r0, r4
   13c90:	bl	10d44 <ferror_unlocked@plt>
   13c94:	mov	r6, r0
   13c98:	mov	r0, r4
   13c9c:	bl	13cec <__assert_fail@plt+0x2e34>
   13ca0:	cmp	r6, #0
   13ca4:	mov	r4, r0
   13ca8:	bne	13cd4 <__assert_fail@plt+0x2e1c>
   13cac:	cmp	r0, #0
   13cb0:	beq	13ccc <__assert_fail@plt+0x2e14>
   13cb4:	cmp	r5, #0
   13cb8:	bne	13ce4 <__assert_fail@plt+0x2e2c>
   13cbc:	bl	10dec <__errno_location@plt>
   13cc0:	ldr	r4, [r0]
   13cc4:	subs	r4, r4, #9
   13cc8:	mvnne	r4, #0
   13ccc:	mov	r0, r4
   13cd0:	pop	{r4, r5, r6, pc}
   13cd4:	cmp	r0, #0
   13cd8:	bne	13ce4 <__assert_fail@plt+0x2e2c>
   13cdc:	bl	10dec <__errno_location@plt>
   13ce0:	str	r4, [r0]
   13ce4:	mvn	r4, #0
   13ce8:	b	13ccc <__assert_fail@plt+0x2e14>
   13cec:	push	{r0, r1, r2, r4, r5, lr}
   13cf0:	mov	r4, r0
   13cf4:	bl	10e1c <fileno@plt>
   13cf8:	cmp	r0, #0
   13cfc:	mov	r0, r4
   13d00:	bge	13d10 <__assert_fail@plt+0x2e58>
   13d04:	add	sp, sp, #12
   13d08:	pop	{r4, r5, lr}
   13d0c:	b	10e40 <fclose@plt>
   13d10:	bl	10d8c <__freading@plt>
   13d14:	cmp	r0, #0
   13d18:	bne	13d54 <__assert_fail@plt+0x2e9c>
   13d1c:	mov	r0, r4
   13d20:	bl	13d94 <__assert_fail@plt+0x2edc>
   13d24:	cmp	r0, #0
   13d28:	bne	13d88 <__assert_fail@plt+0x2ed0>
   13d2c:	mov	r5, #0
   13d30:	mov	r0, r4
   13d34:	bl	10e40 <fclose@plt>
   13d38:	cmp	r5, #0
   13d3c:	beq	13d4c <__assert_fail@plt+0x2e94>
   13d40:	bl	10dec <__errno_location@plt>
   13d44:	str	r5, [r0]
   13d48:	mvn	r0, #0
   13d4c:	add	sp, sp, #12
   13d50:	pop	{r4, r5, pc}
   13d54:	mov	r0, r4
   13d58:	bl	10e1c <fileno@plt>
   13d5c:	mov	r3, #1
   13d60:	mov	r2, #0
   13d64:	str	r3, [sp]
   13d68:	mov	r3, #0
   13d6c:	bl	10d20 <lseek64@plt>
   13d70:	mvn	r3, #0
   13d74:	mvn	r2, #0
   13d78:	cmp	r1, r3
   13d7c:	cmpeq	r0, r2
   13d80:	bne	13d1c <__assert_fail@plt+0x2e64>
   13d84:	b	13d2c <__assert_fail@plt+0x2e74>
   13d88:	bl	10dec <__errno_location@plt>
   13d8c:	ldr	r5, [r0]
   13d90:	b	13d30 <__assert_fail@plt+0x2e78>
   13d94:	push	{r0, r1, r4, lr}
   13d98:	subs	r4, r0, #0
   13d9c:	bne	13db0 <__assert_fail@plt+0x2ef8>
   13da0:	mov	r0, r4
   13da4:	add	sp, sp, #8
   13da8:	pop	{r4, lr}
   13dac:	b	10c84 <fflush@plt>
   13db0:	bl	10d8c <__freading@plt>
   13db4:	cmp	r0, #0
   13db8:	beq	13da0 <__assert_fail@plt+0x2ee8>
   13dbc:	ldr	r3, [r4]
   13dc0:	tst	r3, #256	; 0x100
   13dc4:	beq	13da0 <__assert_fail@plt+0x2ee8>
   13dc8:	mov	r3, #1
   13dcc:	mov	r2, #0
   13dd0:	mov	r0, r4
   13dd4:	str	r3, [sp]
   13dd8:	mov	r3, #0
   13ddc:	bl	13e34 <__assert_fail@plt+0x2f7c>
   13de0:	b	13da0 <__assert_fail@plt+0x2ee8>
   13de4:	push	{r0, r1, r2, r4, r5, lr}
   13de8:	mov	r5, r0
   13dec:	bl	10dec <__errno_location@plt>
   13df0:	mov	r4, r0
   13df4:	mov	r0, r5
   13df8:	ldr	r3, [r4]
   13dfc:	str	r3, [sp]
   13e00:	str	r3, [sp, #4]
   13e04:	mov	r3, #0
   13e08:	str	r3, [r4]
   13e0c:	bl	10c90 <free@plt>
   13e10:	ldr	r3, [r4]
   13e14:	add	r2, sp, #8
   13e18:	clz	r3, r3
   13e1c:	lsr	r3, r3, #5
   13e20:	add	r3, r2, r3, lsl #2
   13e24:	ldr	r3, [r3, #-8]
   13e28:	str	r3, [r4]
   13e2c:	add	sp, sp, #12
   13e30:	pop	{r4, r5, pc}
   13e34:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13e38:	mov	r4, r0
   13e3c:	ldmib	r0, {ip, lr}
   13e40:	ldr	r8, [sp, #32]
   13e44:	cmp	lr, ip
   13e48:	bne	13eb8 <__assert_fail@plt+0x3000>
   13e4c:	ldr	ip, [r0, #16]
   13e50:	ldr	lr, [r0, #20]
   13e54:	cmp	lr, ip
   13e58:	bne	13eb8 <__assert_fail@plt+0x3000>
   13e5c:	ldr	r5, [r0, #36]	; 0x24
   13e60:	cmp	r5, #0
   13e64:	bne	13eb8 <__assert_fail@plt+0x3000>
   13e68:	mov	r6, r2
   13e6c:	mov	r7, r3
   13e70:	bl	10e1c <fileno@plt>
   13e74:	mov	r2, r6
   13e78:	mov	r3, r7
   13e7c:	str	r8, [sp]
   13e80:	bl	10d20 <lseek64@plt>
   13e84:	mvn	r3, #0
   13e88:	mvn	r2, #0
   13e8c:	cmp	r1, r3
   13e90:	cmpeq	r0, r2
   13e94:	mvneq	r0, #0
   13e98:	beq	13eb0 <__assert_fail@plt+0x2ff8>
   13e9c:	ldr	r3, [r4]
   13ea0:	strd	r0, [r4, #80]	; 0x50
   13ea4:	mov	r0, r5
   13ea8:	bic	r3, r3, #16
   13eac:	str	r3, [r4]
   13eb0:	add	sp, sp, #8
   13eb4:	pop	{r4, r5, r6, r7, r8, pc}
   13eb8:	mov	r0, r4
   13ebc:	str	r8, [sp, #32]
   13ec0:	add	sp, sp, #8
   13ec4:	pop	{r4, r5, r6, r7, r8, lr}
   13ec8:	b	10e4c <fseeko64@plt>
   13ecc:	b	13a10 <__assert_fail@plt+0x2b58>
   13ed0:	cmp	r1, #0
   13ed4:	orreq	r1, r1, #1
   13ed8:	b	13a3c <__assert_fail@plt+0x2b84>
   13edc:	b	139bc <__assert_fail@plt+0x2b04>
   13ee0:	cmp	r2, #0
   13ee4:	cmpne	r1, #0
   13ee8:	moveq	r2, #1
   13eec:	moveq	r1, r2
   13ef0:	b	13f78 <__assert_fail@plt+0x30c0>
   13ef4:	push	{r4, lr}
   13ef8:	mov	r0, #14
   13efc:	bl	10e70 <nl_langinfo@plt>
   13f00:	cmp	r0, #0
   13f04:	beq	13f1c <__assert_fail@plt+0x3064>
   13f08:	ldrb	r2, [r0]
   13f0c:	ldr	r3, [pc, #16]	; 13f24 <__assert_fail@plt+0x306c>
   13f10:	cmp	r2, #0
   13f14:	moveq	r0, r3
   13f18:	pop	{r4, pc}
   13f1c:	ldr	r0, [pc]	; 13f24 <__assert_fail@plt+0x306c>
   13f20:	pop	{r4, pc}
   13f24:	andeq	r4, r1, r9, ror r9
   13f28:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13f2c:	subs	r5, r0, #0
   13f30:	mov	r7, r2
   13f34:	addeq	r5, sp, #4
   13f38:	mov	r6, r1
   13f3c:	mov	r0, r5
   13f40:	bl	10d50 <mbrtowc@plt>
   13f44:	cmp	r7, #0
   13f48:	cmnne	r0, #3
   13f4c:	mov	r4, r0
   13f50:	bls	13f6c <__assert_fail@plt+0x30b4>
   13f54:	mov	r0, #0
   13f58:	bl	13fa4 <__assert_fail@plt+0x30ec>
   13f5c:	cmp	r0, #0
   13f60:	ldrbeq	r3, [r6]
   13f64:	moveq	r4, #1
   13f68:	streq	r3, [r5]
   13f6c:	mov	r0, r4
   13f70:	add	sp, sp, #12
   13f74:	pop	{r4, r5, r6, r7, pc}
   13f78:	umull	r2, r3, r1, r2
   13f7c:	cmp	r3, #0
   13f80:	bne	13f8c <__assert_fail@plt+0x30d4>
   13f84:	mov	r1, r2
   13f88:	b	13a3c <__assert_fail@plt+0x2b84>
   13f8c:	push	{r4, lr}
   13f90:	bl	10dec <__errno_location@plt>
   13f94:	mov	r3, #12
   13f98:	str	r3, [r0]
   13f9c:	mov	r0, #0
   13fa0:	pop	{r4, pc}
   13fa4:	push	{lr}		; (str lr, [sp, #-4]!)
   13fa8:	sub	sp, sp, #268	; 0x10c
   13fac:	movw	r2, #257	; 0x101
   13fb0:	add	r1, sp, #4
   13fb4:	bl	14000 <__assert_fail@plt+0x3148>
   13fb8:	cmp	r0, #0
   13fbc:	movne	r0, #0
   13fc0:	bne	13ff0 <__assert_fail@plt+0x3138>
   13fc4:	ldr	r1, [pc, #44]	; 13ff8 <__assert_fail@plt+0x3140>
   13fc8:	add	r0, sp, #4
   13fcc:	bl	10c78 <strcmp@plt>
   13fd0:	cmp	r0, #0
   13fd4:	beq	13fec <__assert_fail@plt+0x3134>
   13fd8:	ldr	r1, [pc, #28]	; 13ffc <__assert_fail@plt+0x3144>
   13fdc:	add	r0, sp, #4
   13fe0:	bl	10c78 <strcmp@plt>
   13fe4:	adds	r0, r0, #0
   13fe8:	movne	r0, #1
   13fec:	and	r0, r0, #1
   13ff0:	add	sp, sp, #268	; 0x10c
   13ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff8:	andeq	r4, r1, pc, ror r9
   13ffc:	andeq	r4, r1, r1, lsl #19
   14000:	push	{r4, r5, r6, lr}
   14004:	mov	r5, r1
   14008:	mov	r1, #0
   1400c:	mov	r4, r2
   14010:	bl	10e58 <setlocale@plt>
   14014:	subs	r6, r0, #0
   14018:	bne	1402c <__assert_fail@plt+0x3174>
   1401c:	cmp	r4, #0
   14020:	mov	r0, #22
   14024:	strbne	r6, [r5]
   14028:	pop	{r4, r5, r6, pc}
   1402c:	bl	10dd4 <strlen@plt>
   14030:	cmp	r4, r0
   14034:	bls	14050 <__assert_fail@plt+0x3198>
   14038:	add	r2, r0, #1
   1403c:	mov	r1, r6
   14040:	mov	r0, r5
   14044:	bl	10ca8 <memcpy@plt>
   14048:	mov	r0, #0
   1404c:	pop	{r4, r5, r6, pc}
   14050:	cmp	r4, #0
   14054:	beq	14074 <__assert_fail@plt+0x31bc>
   14058:	sub	r4, r4, #1
   1405c:	mov	r1, r6
   14060:	mov	r2, r4
   14064:	mov	r0, r5
   14068:	bl	10ca8 <memcpy@plt>
   1406c:	mov	r3, #0
   14070:	strb	r3, [r5, r4]
   14074:	mov	r0, #34	; 0x22
   14078:	pop	{r4, r5, r6, pc}
   1407c:	mov	r1, #0
   14080:	b	10e58 <setlocale@plt>
   14084:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14088:	mov	r7, r0
   1408c:	ldr	r6, [pc, #72]	; 140dc <__assert_fail@plt+0x3224>
   14090:	ldr	r5, [pc, #72]	; 140e0 <__assert_fail@plt+0x3228>
   14094:	add	r6, pc, r6
   14098:	add	r5, pc, r5
   1409c:	sub	r6, r6, r5
   140a0:	mov	r8, r1
   140a4:	mov	r9, r2
   140a8:	bl	10c40 <calloc@plt-0x20>
   140ac:	asrs	r6, r6, #2
   140b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   140b4:	mov	r4, #0
   140b8:	add	r4, r4, #1
   140bc:	ldr	r3, [r5], #4
   140c0:	mov	r2, r9
   140c4:	mov	r1, r8
   140c8:	mov	r0, r7
   140cc:	blx	r3
   140d0:	cmp	r6, r4
   140d4:	bne	140b8 <__assert_fail@plt+0x3200>
   140d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140dc:	andeq	r0, r1, r8, ror lr
   140e0:	andeq	r0, r1, r0, ror lr
   140e4:	bx	lr
   140e8:	ldr	r3, [pc, #12]	; 140fc <__assert_fail@plt+0x3244>
   140ec:	mov	r1, #0
   140f0:	add	r3, pc, r3
   140f4:	ldr	r2, [r3]
   140f8:	b	10df8 <__cxa_atexit@plt>
   140fc:	andeq	r0, r1, r8, ror #31

Disassembly of section .fini:

00014100 <.fini>:
   14100:	push	{r3, lr}
   14104:	pop	{r3, pc}
