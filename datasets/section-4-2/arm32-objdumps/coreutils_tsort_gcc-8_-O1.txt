
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c00 <.init>:
   10c00:	push	{r3, lr}
   10c04:	bl	10eb4 <__assert_fail@plt+0x48>
   10c08:	pop	{r3, pc}

Disassembly of section .plt:

00010c0c <calloc@plt-0x14>:
   10c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c10:	ldr	lr, [pc, #4]	; 10c1c <calloc@plt-0x4>
   10c14:	add	lr, pc, lr
   10c18:	ldr	pc, [lr, #8]!
   10c1c:	andeq	r6, r1, r4, ror #7

00010c20 <calloc@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #90112	; 0x16000
   10c28:	ldr	pc, [ip, #996]!	; 0x3e4

00010c2c <fputs_unlocked@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #90112	; 0x16000
   10c34:	ldr	pc, [ip, #988]!	; 0x3dc

00010c38 <strcmp@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #90112	; 0x16000
   10c40:	ldr	pc, [ip, #980]!	; 0x3d4

00010c44 <posix_fadvise64@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #90112	; 0x16000
   10c4c:	ldr	pc, [ip, #972]!	; 0x3cc

00010c50 <fflush@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #90112	; 0x16000
   10c58:	ldr	pc, [ip, #964]!	; 0x3c4

00010c5c <free@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #90112	; 0x16000
   10c64:	ldr	pc, [ip, #956]!	; 0x3bc

00010c68 <_exit@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #90112	; 0x16000
   10c70:	ldr	pc, [ip, #948]!	; 0x3b4

00010c74 <memcpy@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #90112	; 0x16000
   10c7c:	ldr	pc, [ip, #940]!	; 0x3ac

00010c80 <mbsinit@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #90112	; 0x16000
   10c88:	ldr	pc, [ip, #932]!	; 0x3a4

00010c8c <memcmp@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #90112	; 0x16000
   10c94:	ldr	pc, [ip, #924]!	; 0x39c

00010c98 <fputc_unlocked@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #90112	; 0x16000
   10ca0:	ldr	pc, [ip, #916]!	; 0x394

00010ca4 <dcgettext@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #90112	; 0x16000
   10cac:	ldr	pc, [ip, #908]!	; 0x38c

00010cb0 <dup2@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #90112	; 0x16000
   10cb8:	ldr	pc, [ip, #900]!	; 0x384

00010cbc <realloc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #90112	; 0x16000
   10cc4:	ldr	pc, [ip, #892]!	; 0x37c

00010cc8 <textdomain@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #90112	; 0x16000
   10cd0:	ldr	pc, [ip, #884]!	; 0x374

00010cd4 <iswprint@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #90112	; 0x16000
   10cdc:	ldr	pc, [ip, #876]!	; 0x36c

00010ce0 <fwrite@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #90112	; 0x16000
   10ce8:	ldr	pc, [ip, #868]!	; 0x364

00010cec <lseek64@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #90112	; 0x16000
   10cf4:	ldr	pc, [ip, #860]!	; 0x35c

00010cf8 <__ctype_get_mb_cur_max@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #852]!	; 0x354

00010d04 <__fpending@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #844]!	; 0x34c

00010d10 <mbrtowc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #836]!	; 0x344

00010d1c <error@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #828]!	; 0x33c

00010d28 <open64@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #820]!	; 0x334

00010d34 <puts@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #812]!	; 0x32c

00010d40 <malloc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #804]!	; 0x324

00010d4c <__libc_start_main@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #796]!	; 0x31c

00010d58 <__freading@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #788]!	; 0x314

00010d64 <__gmon_start__@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #780]!	; 0x30c

00010d70 <freopen64@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #772]!	; 0x304

00010d7c <getopt_long@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #764]!	; 0x2fc

00010d88 <__ctype_b_loc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #756]!	; 0x2f4

00010d94 <exit@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #748]!	; 0x2ec

00010da0 <strlen@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #740]!	; 0x2e4

00010dac <__errno_location@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #732]!	; 0x2dc

00010db8 <__cxa_atexit@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #724]!	; 0x2d4

00010dc4 <memset@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #716]!	; 0x2cc

00010dd0 <__printf_chk@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #708]!	; 0x2c4

00010ddc <fileno@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #700]!	; 0x2bc

00010de8 <__fprintf_chk@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #692]!	; 0x2b4

00010df4 <fclose@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #684]!	; 0x2ac

00010e00 <fseeko64@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #676]!	; 0x2a4

00010e0c <__uflow@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #668]!	; 0x29c

00010e18 <setlocale@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #660]!	; 0x294

00010e24 <strrchr@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #652]!	; 0x28c

00010e30 <nl_langinfo@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #644]!	; 0x284

00010e3c <bindtextdomain@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #636]!	; 0x27c

00010e48 <strncmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #628]!	; 0x274

00010e54 <abort@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #620]!	; 0x26c

00010e60 <close@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #612]!	; 0x264

00010e6c <__assert_fail@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #604]!	; 0x25c

Disassembly of section .text:

00010e78 <.text>:
   10e78:	mov	fp, #0
   10e7c:	mov	lr, #0
   10e80:	pop	{r1}		; (ldr r1, [sp], #4)
   10e84:	mov	r2, sp
   10e88:	push	{r2}		; (str r2, [sp, #-4]!)
   10e8c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e90:	ldr	ip, [pc, #16]	; 10ea8 <__assert_fail@plt+0x3c>
   10e94:	push	{ip}		; (str ip, [sp, #-4]!)
   10e98:	ldr	r0, [pc, #12]	; 10eac <__assert_fail@plt+0x40>
   10e9c:	ldr	r3, [pc, #12]	; 10eb0 <__assert_fail@plt+0x44>
   10ea0:	bl	10d4c <__libc_start_main@plt>
   10ea4:	bl	10e54 <abort@plt>
   10ea8:	andeq	r5, r1, r0, asr #19
   10eac:	andeq	r1, r1, r8, ror r5
   10eb0:	andeq	r5, r1, r0, ror #18
   10eb4:	ldr	r3, [pc, #20]	; 10ed0 <__assert_fail@plt+0x64>
   10eb8:	ldr	r2, [pc, #20]	; 10ed4 <__assert_fail@plt+0x68>
   10ebc:	add	r3, pc, r3
   10ec0:	ldr	r2, [r3, r2]
   10ec4:	cmp	r2, #0
   10ec8:	bxeq	lr
   10ecc:	b	10d64 <__gmon_start__@plt>
   10ed0:	andeq	r6, r1, ip, lsr r1
   10ed4:	ldrdeq	r0, [r0], -r4
   10ed8:	ldr	r0, [pc, #24]	; 10ef8 <__assert_fail@plt+0x8c>
   10edc:	ldr	r3, [pc, #24]	; 10efc <__assert_fail@plt+0x90>
   10ee0:	cmp	r3, r0
   10ee4:	bxeq	lr
   10ee8:	ldr	r3, [pc, #16]	; 10f00 <__assert_fail@plt+0x94>
   10eec:	cmp	r3, #0
   10ef0:	bxeq	lr
   10ef4:	bx	r3
   10ef8:	andeq	r7, r2, r8, lsr #2
   10efc:	andeq	r7, r2, r8, lsr #2
   10f00:	andeq	r0, r0, r0
   10f04:	ldr	r0, [pc, #36]	; 10f30 <__assert_fail@plt+0xc4>
   10f08:	ldr	r1, [pc, #36]	; 10f34 <__assert_fail@plt+0xc8>
   10f0c:	sub	r1, r1, r0
   10f10:	asr	r1, r1, #2
   10f14:	add	r1, r1, r1, lsr #31
   10f18:	asrs	r1, r1, #1
   10f1c:	bxeq	lr
   10f20:	ldr	r3, [pc, #16]	; 10f38 <__assert_fail@plt+0xcc>
   10f24:	cmp	r3, #0
   10f28:	bxeq	lr
   10f2c:	bx	r3
   10f30:	andeq	r7, r2, r8, lsr #2
   10f34:	andeq	r7, r2, r8, lsr #2
   10f38:	andeq	r0, r0, r0
   10f3c:	push	{r4, lr}
   10f40:	ldr	r4, [pc, #24]	; 10f60 <__assert_fail@plt+0xf4>
   10f44:	ldrb	r3, [r4]
   10f48:	cmp	r3, #0
   10f4c:	popne	{r4, pc}
   10f50:	bl	10ed8 <__assert_fail@plt+0x6c>
   10f54:	mov	r3, #1
   10f58:	strb	r3, [r4]
   10f5c:	pop	{r4, pc}
   10f60:	andeq	r7, r2, ip, asr #2
   10f64:	b	10f04 <__assert_fail@plt+0x98>
   10f68:	movw	r3, #29008	; 0x7150
   10f6c:	movt	r3, #2
   10f70:	ldr	r2, [r3]
   10f74:	add	r2, r2, #1
   10f78:	str	r2, [r3]
   10f7c:	mov	r0, #0
   10f80:	bx	lr
   10f84:	ldr	r3, [r0, #16]
   10f88:	cmp	r3, #0
   10f8c:	bne	10fcc <__assert_fail@plt+0x160>
   10f90:	ldrb	r3, [r0, #13]
   10f94:	cmp	r3, #0
   10f98:	bne	10fcc <__assert_fail@plt+0x160>
   10f9c:	movw	r3, #29008	; 0x7150
   10fa0:	movt	r3, #2
   10fa4:	ldr	r3, [r3, #4]
   10fa8:	cmp	r3, #0
   10fac:	movw	r3, #29008	; 0x7150
   10fb0:	movt	r3, #2
   10fb4:	streq	r0, [r3, #4]
   10fb8:	ldrne	r3, [r3, #8]
   10fbc:	strne	r0, [r3, #20]
   10fc0:	movw	r3, #29008	; 0x7150
   10fc4:	movt	r3, #2
   10fc8:	str	r0, [r3, #8]
   10fcc:	mov	r0, #0
   10fd0:	bx	lr
   10fd4:	strd	r4, [sp, #-16]!
   10fd8:	str	r6, [sp, #8]
   10fdc:	str	lr, [sp, #12]
   10fe0:	mov	r4, r0
   10fe4:	mov	r5, r1
   10fe8:	ldr	r0, [r0, #4]
   10fec:	cmp	r0, #0
   10ff0:	beq	11038 <__assert_fail@plt+0x1cc>
   10ff4:	bl	10fd4 <__assert_fail@plt+0x168>
   10ff8:	cmp	r0, #0
   10ffc:	bne	11028 <__assert_fail@plt+0x1bc>
   11000:	mov	r0, r4
   11004:	blx	r5
   11008:	cmp	r0, #0
   1100c:	bne	11028 <__assert_fail@plt+0x1bc>
   11010:	ldr	r3, [r4, #8]
   11014:	cmp	r3, #0
   11018:	beq	11028 <__assert_fail@plt+0x1bc>
   1101c:	mov	r1, r5
   11020:	mov	r0, r3
   11024:	bl	10fd4 <__assert_fail@plt+0x168>
   11028:	ldrd	r4, [sp]
   1102c:	ldr	r6, [sp, #8]
   11030:	add	sp, sp, #12
   11034:	pop	{pc}		; (ldr pc, [sp], #4)
   11038:	ldr	r3, [r4, #8]
   1103c:	cmp	r3, #0
   11040:	bne	11000 <__assert_fail@plt+0x194>
   11044:	mov	r0, r4
   11048:	blx	r1
   1104c:	b	11028 <__assert_fail@plt+0x1bc>
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	sub	sp, sp, #60	; 0x3c
   11058:	subs	r4, r0, #0
   1105c:	beq	110a4 <__assert_fail@plt+0x238>
   11060:	movw	r3, #28984	; 0x7138
   11064:	movt	r3, #2
   11068:	ldr	r5, [r3]
   1106c:	mov	r2, #5
   11070:	movw	r1, #23100	; 0x5a3c
   11074:	movt	r1, #1
   11078:	mov	r0, #0
   1107c:	bl	10ca4 <dcgettext@plt>
   11080:	movw	r3, #29032	; 0x7168
   11084:	movt	r3, #2
   11088:	ldr	r3, [r3]
   1108c:	mov	r2, r0
   11090:	mov	r1, #1
   11094:	mov	r0, r5
   11098:	bl	10de8 <__fprintf_chk@plt>
   1109c:	mov	r0, r4
   110a0:	bl	10d94 <exit@plt>
   110a4:	mov	r2, #5
   110a8:	movw	r1, #23140	; 0x5a64
   110ac:	movt	r1, #1
   110b0:	mov	r0, #0
   110b4:	bl	10ca4 <dcgettext@plt>
   110b8:	movw	r3, #29032	; 0x7168
   110bc:	movt	r3, #2
   110c0:	ldr	r2, [r3]
   110c4:	mov	r1, r0
   110c8:	mov	r0, #1
   110cc:	bl	10dd0 <__printf_chk@plt>
   110d0:	mov	r2, #5
   110d4:	movw	r1, #23240	; 0x5ac8
   110d8:	movt	r1, #1
   110dc:	mov	r0, #0
   110e0:	bl	10ca4 <dcgettext@plt>
   110e4:	movw	r5, #28996	; 0x7144
   110e8:	movt	r5, #2
   110ec:	ldr	r1, [r5]
   110f0:	bl	10c2c <fputs_unlocked@plt>
   110f4:	mov	r2, #5
   110f8:	movw	r1, #23396	; 0x5b64
   110fc:	movt	r1, #1
   11100:	mov	r0, #0
   11104:	bl	10ca4 <dcgettext@plt>
   11108:	ldr	r1, [r5]
   1110c:	bl	10c2c <fputs_unlocked@plt>
   11110:	mov	r2, #5
   11114:	movw	r1, #23296	; 0x5b00
   11118:	movt	r1, #1
   1111c:	mov	r0, #0
   11120:	bl	10ca4 <dcgettext@plt>
   11124:	ldr	r1, [r5]
   11128:	bl	10c2c <fputs_unlocked@plt>
   1112c:	mov	r2, #5
   11130:	movw	r1, #23344	; 0x5b30
   11134:	movt	r1, #1
   11138:	mov	r0, #0
   1113c:	bl	10ca4 <dcgettext@plt>
   11140:	ldr	r1, [r5]
   11144:	bl	10c2c <fputs_unlocked@plt>
   11148:	movw	r0, #23016	; 0x59e8
   1114c:	movt	r0, #1
   11150:	ldr	r1, [r0]
   11154:	ldr	r3, [r0, #4]
   11158:	str	r1, [sp]
   1115c:	str	r3, [sp, #4]
   11160:	ldrd	r2, [r0, #8]
   11164:	strd	r2, [sp, #8]
   11168:	ldrd	r2, [r0, #16]
   1116c:	strd	r2, [sp, #16]
   11170:	ldrd	r2, [r0, #24]
   11174:	strd	r2, [sp, #24]
   11178:	ldrd	r2, [r0, #32]
   1117c:	strd	r2, [sp, #32]
   11180:	ldrd	r2, [r0, #40]	; 0x28
   11184:	strd	r2, [sp, #40]	; 0x28
   11188:	ldrd	r2, [r0, #48]	; 0x30
   1118c:	strd	r2, [sp, #48]	; 0x30
   11190:	cmp	r1, #0
   11194:	moveq	r5, sp
   11198:	beq	111c4 <__assert_fail@plt+0x358>
   1119c:	mov	r5, sp
   111a0:	movw	r6, #23092	; 0x5a34
   111a4:	movt	r6, #1
   111a8:	mov	r0, r6
   111ac:	bl	10c38 <strcmp@plt>
   111b0:	cmp	r0, #0
   111b4:	beq	111c4 <__assert_fail@plt+0x358>
   111b8:	ldr	r1, [r5, #8]!
   111bc:	cmp	r1, #0
   111c0:	bne	111a8 <__assert_fail@plt+0x33c>
   111c4:	ldr	r5, [r5, #4]
   111c8:	cmp	r5, #0
   111cc:	beq	11328 <__assert_fail@plt+0x4bc>
   111d0:	mov	r2, #5
   111d4:	movw	r1, #23400	; 0x5b68
   111d8:	movt	r1, #1
   111dc:	mov	r0, #0
   111e0:	bl	10ca4 <dcgettext@plt>
   111e4:	movw	r3, #23424	; 0x5b80
   111e8:	movt	r3, #1
   111ec:	movw	r2, #23464	; 0x5ba8
   111f0:	movt	r2, #1
   111f4:	mov	r1, r0
   111f8:	mov	r0, #1
   111fc:	bl	10dd0 <__printf_chk@plt>
   11200:	mov	r1, #0
   11204:	mov	r0, #5
   11208:	bl	10e18 <setlocale@plt>
   1120c:	cmp	r0, #0
   11210:	beq	1122c <__assert_fail@plt+0x3c0>
   11214:	mov	r2, #3
   11218:	movw	r1, #23480	; 0x5bb8
   1121c:	movt	r1, #1
   11220:	bl	10e48 <strncmp@plt>
   11224:	cmp	r0, #0
   11228:	bne	112a8 <__assert_fail@plt+0x43c>
   1122c:	mov	r2, #5
   11230:	movw	r1, #23556	; 0x5c04
   11234:	movt	r1, #1
   11238:	mov	r0, #0
   1123c:	bl	10ca4 <dcgettext@plt>
   11240:	movw	r6, #23092	; 0x5a34
   11244:	movt	r6, #1
   11248:	mov	r3, r6
   1124c:	movw	r2, #23424	; 0x5b80
   11250:	movt	r2, #1
   11254:	mov	r1, r0
   11258:	mov	r0, #1
   1125c:	bl	10dd0 <__printf_chk@plt>
   11260:	mov	r2, #5
   11264:	movw	r1, #23584	; 0x5c20
   11268:	movt	r1, #1
   1126c:	mov	r0, #0
   11270:	bl	10ca4 <dcgettext@plt>
   11274:	mov	r1, r0
   11278:	movw	r2, #23936	; 0x5d80
   1127c:	movt	r2, #1
   11280:	movw	r3, #23340	; 0x5b2c
   11284:	movt	r3, #1
   11288:	cmp	r5, r6
   1128c:	moveq	r3, r2
   11290:	mov	r2, r5
   11294:	mov	r0, #1
   11298:	bl	10dd0 <__printf_chk@plt>
   1129c:	b	1109c <__assert_fail@plt+0x230>
   112a0:	movw	r5, #23092	; 0x5a34
   112a4:	movt	r5, #1
   112a8:	mov	r2, #5
   112ac:	movw	r1, #23484	; 0x5bbc
   112b0:	movt	r1, #1
   112b4:	mov	r0, #0
   112b8:	bl	10ca4 <dcgettext@plt>
   112bc:	movw	r3, #28996	; 0x7144
   112c0:	movt	r3, #2
   112c4:	ldr	r1, [r3]
   112c8:	bl	10c2c <fputs_unlocked@plt>
   112cc:	b	1122c <__assert_fail@plt+0x3c0>
   112d0:	mov	r2, #5
   112d4:	movw	r1, #23556	; 0x5c04
   112d8:	movt	r1, #1
   112dc:	mov	r0, #0
   112e0:	bl	10ca4 <dcgettext@plt>
   112e4:	movw	r5, #23092	; 0x5a34
   112e8:	movt	r5, #1
   112ec:	mov	r3, r5
   112f0:	movw	r2, #23424	; 0x5b80
   112f4:	movt	r2, #1
   112f8:	mov	r1, r0
   112fc:	mov	r0, #1
   11300:	bl	10dd0 <__printf_chk@plt>
   11304:	mov	r2, #5
   11308:	movw	r1, #23584	; 0x5c20
   1130c:	movt	r1, #1
   11310:	mov	r0, #0
   11314:	bl	10ca4 <dcgettext@plt>
   11318:	mov	r1, r0
   1131c:	movw	r3, #23936	; 0x5d80
   11320:	movt	r3, #1
   11324:	b	11290 <__assert_fail@plt+0x424>
   11328:	mov	r2, #5
   1132c:	movw	r1, #23400	; 0x5b68
   11330:	movt	r1, #1
   11334:	mov	r0, #0
   11338:	bl	10ca4 <dcgettext@plt>
   1133c:	movw	r3, #23424	; 0x5b80
   11340:	movt	r3, #1
   11344:	movw	r2, #23464	; 0x5ba8
   11348:	movt	r2, #1
   1134c:	mov	r1, r0
   11350:	mov	r0, #1
   11354:	bl	10dd0 <__printf_chk@plt>
   11358:	mov	r1, #0
   1135c:	mov	r0, #5
   11360:	bl	10e18 <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	112d0 <__assert_fail@plt+0x464>
   1136c:	mov	r2, #3
   11370:	movw	r1, #23480	; 0x5bb8
   11374:	movt	r1, #1
   11378:	bl	10e48 <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	bne	112a0 <__assert_fail@plt+0x434>
   11384:	mov	r2, #5
   11388:	movw	r1, #23556	; 0x5c04
   1138c:	movt	r1, #1
   11390:	mov	r0, #0
   11394:	bl	10ca4 <dcgettext@plt>
   11398:	movw	r5, #23092	; 0x5a34
   1139c:	movt	r5, #1
   113a0:	mov	r3, r5
   113a4:	movw	r2, #23424	; 0x5b80
   113a8:	movt	r2, #1
   113ac:	mov	r1, r0
   113b0:	mov	r0, #1
   113b4:	bl	10dd0 <__printf_chk@plt>
   113b8:	mov	r2, #5
   113bc:	movw	r1, #23584	; 0x5c20
   113c0:	movt	r1, #1
   113c4:	mov	r0, #0
   113c8:	bl	10ca4 <dcgettext@plt>
   113cc:	mov	r1, r0
   113d0:	movw	r3, #23936	; 0x5d80
   113d4:	movt	r3, #1
   113d8:	b	11290 <__assert_fail@plt+0x424>
   113dc:	ldr	r3, [r0, #16]
   113e0:	cmp	r3, #0
   113e4:	beq	11568 <__assert_fail@plt+0x6fc>
   113e8:	movw	r3, #29008	; 0x7150
   113ec:	movt	r3, #2
   113f0:	ldr	r1, [r3, #12]
   113f4:	cmp	r1, #0
   113f8:	beq	11448 <__assert_fail@plt+0x5dc>
   113fc:	ldr	r2, [r0, #24]
   11400:	cmp	r2, #0
   11404:	beq	11570 <__assert_fail@plt+0x704>
   11408:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1140c:	strd	r6, [sp, #8]
   11410:	strd	r8, [sp, #16]
   11414:	str	sl, [sp, #24]
   11418:	str	lr, [sp, #28]
   1141c:	ldr	r3, [r2]
   11420:	cmp	r1, r3
   11424:	beq	114c4 <__assert_fail@plt+0x658>
   11428:	ldr	r3, [r2, #4]
   1142c:	cmp	r3, #0
   11430:	beq	1154c <__assert_fail@plt+0x6e0>
   11434:	ldr	ip, [r3]
   11438:	cmp	r1, ip
   1143c:	beq	1145c <__assert_fail@plt+0x5f0>
   11440:	mov	r2, r3
   11444:	b	11428 <__assert_fail@plt+0x5bc>
   11448:	movw	r3, #29008	; 0x7150
   1144c:	movt	r3, #2
   11450:	str	r0, [r3, #12]
   11454:	mov	r0, #0
   11458:	bx	lr
   1145c:	add	r4, r2, #4
   11460:	ldr	r3, [r0, #20]
   11464:	cmp	r3, #0
   11468:	beq	11534 <__assert_fail@plt+0x6c8>
   1146c:	mov	r5, r0
   11470:	movw	r9, #24068	; 0x5e04
   11474:	movt	r9, #1
   11478:	mov	r8, #0
   1147c:	movw	r7, #29008	; 0x7150
   11480:	movt	r7, #2
   11484:	ldr	r6, [r1, #20]
   11488:	ldr	r3, [r1]
   1148c:	mov	r2, r9
   11490:	mov	r1, r8
   11494:	mov	r0, r8
   11498:	bl	10d1c <error@plt>
   1149c:	ldr	r3, [r7, #12]
   114a0:	cmp	r3, r5
   114a4:	beq	114cc <__assert_fail@plt+0x660>
   114a8:	str	r8, [r3, #20]
   114ac:	str	r6, [r7, #12]
   114b0:	mov	r1, r6
   114b4:	cmp	r6, #0
   114b8:	bne	11484 <__assert_fail@plt+0x618>
   114bc:	mov	r0, #1
   114c0:	b	11550 <__assert_fail@plt+0x6e4>
   114c4:	add	r4, r0, #24
   114c8:	b	11460 <__assert_fail@plt+0x5f4>
   114cc:	ldr	r0, [r4]
   114d0:	ldr	r2, [r0]
   114d4:	ldr	r3, [r2, #16]
   114d8:	sub	r3, r3, #1
   114dc:	str	r3, [r2, #16]
   114e0:	ldr	r3, [r0, #4]
   114e4:	str	r3, [r4]
   114e8:	bl	11fd4 <__assert_fail@plt+0x1168>
   114ec:	movw	r3, #29008	; 0x7150
   114f0:	movt	r3, #2
   114f4:	ldr	r3, [r3, #12]
   114f8:	cmp	r3, #0
   114fc:	beq	1152c <__assert_fail@plt+0x6c0>
   11500:	mov	r1, #0
   11504:	ldr	r2, [r3, #20]
   11508:	str	r1, [r3, #20]
   1150c:	mov	r3, r2
   11510:	cmp	r2, #0
   11514:	bne	11504 <__assert_fail@plt+0x698>
   11518:	movw	r3, #29008	; 0x7150
   1151c:	movt	r3, #2
   11520:	str	r2, [r3, #12]
   11524:	mov	r0, #1
   11528:	b	11550 <__assert_fail@plt+0x6e4>
   1152c:	mov	r0, #1
   11530:	b	11550 <__assert_fail@plt+0x6e4>
   11534:	str	r1, [r0, #20]
   11538:	movw	r3, #29008	; 0x7150
   1153c:	movt	r3, #2
   11540:	str	r0, [r3, #12]
   11544:	mov	r0, #0
   11548:	b	11550 <__assert_fail@plt+0x6e4>
   1154c:	mov	r0, #0
   11550:	ldrd	r4, [sp]
   11554:	ldrd	r6, [sp, #8]
   11558:	ldrd	r8, [sp, #16]
   1155c:	ldr	sl, [sp, #24]
   11560:	add	sp, sp, #28
   11564:	pop	{pc}		; (ldr pc, [sp], #4)
   11568:	mov	r0, #0
   1156c:	bx	lr
   11570:	mov	r0, #0
   11574:	bx	lr
   11578:	str	r7, [sp, #-12]!
   1157c:	str	fp, [sp, #4]
   11580:	str	lr, [sp, #8]
   11584:	sub	sp, sp, #60	; 0x3c
   11588:	mov	r6, r0
   1158c:	mov	r5, r1
   11590:	ldr	r0, [r1]
   11594:	bl	124a8 <__assert_fail@plt+0x163c>
   11598:	movw	r1, #23340	; 0x5b2c
   1159c:	movt	r1, #1
   115a0:	mov	r0, #6
   115a4:	bl	10e18 <setlocale@plt>
   115a8:	movw	r4, #23468	; 0x5bac
   115ac:	movt	r4, #1
   115b0:	movw	r1, #23640	; 0x5c58
   115b4:	movt	r1, #1
   115b8:	mov	r0, r4
   115bc:	bl	10e3c <bindtextdomain@plt>
   115c0:	mov	r0, r4
   115c4:	bl	10cc8 <textdomain@plt>
   115c8:	movw	r0, #7464	; 0x1d28
   115cc:	movt	r0, #1
   115d0:	bl	159c4 <__assert_fail@plt+0x4b58>
   115d4:	mov	r3, #0
   115d8:	str	r3, [sp, #16]
   115dc:	movw	r3, #23664	; 0x5c70
   115e0:	movt	r3, #1
   115e4:	str	r3, [sp, #12]
   115e8:	movw	r3, #4176	; 0x1050
   115ec:	movt	r3, #1
   115f0:	str	r3, [sp, #8]
   115f4:	mov	r3, #1
   115f8:	str	r3, [sp, #4]
   115fc:	movw	r3, #28896	; 0x70e0
   11600:	movt	r3, #2
   11604:	ldr	r3, [r3]
   11608:	str	r3, [sp]
   1160c:	movw	r3, #23464	; 0x5ba8
   11610:	movt	r3, #1
   11614:	movw	r2, #23092	; 0x5a34
   11618:	movt	r2, #1
   1161c:	mov	r1, r5
   11620:	mov	r0, r6
   11624:	bl	123c0 <__assert_fail@plt+0x1554>
   11628:	movw	r3, #28976	; 0x7130
   1162c:	movt	r3, #2
   11630:	ldr	r3, [r3]
   11634:	sub	r2, r6, r3
   11638:	cmp	r2, #1
   1163c:	bgt	116e0 <__assert_fail@plt+0x874>
   11640:	cmp	r3, r6
   11644:	beq	11cdc <__assert_fail@plt+0xe70>
   11648:	ldr	r4, [r5, r3, lsl #2]
   1164c:	str	r4, [sp, #40]	; 0x28
   11650:	movw	r1, #23636	; 0x5c54
   11654:	movt	r1, #1
   11658:	mov	r0, r4
   1165c:	bl	10c38 <strcmp@plt>
   11660:	mov	r5, r0
   11664:	str	r0, [sp, #44]	; 0x2c
   11668:	mov	r0, #28
   1166c:	bl	15444 <__assert_fail@plt+0x45d8>
   11670:	str	r0, [sp, #24]
   11674:	cmp	r5, #0
   11678:	beq	116a0 <__assert_fail@plt+0x834>
   1167c:	movw	r3, #28992	; 0x7140
   11680:	movt	r3, #2
   11684:	ldr	r2, [r3]
   11688:	movw	r1, #23700	; 0x5c94
   1168c:	movt	r1, #1
   11690:	mov	r0, r4
   11694:	bl	1208c <__assert_fail@plt+0x1220>
   11698:	cmp	r0, #0
   1169c:	beq	1172c <__assert_fail@plt+0x8c0>
   116a0:	movw	r3, #28992	; 0x7140
   116a4:	movt	r3, #2
   116a8:	mov	r1, #2
   116ac:	ldr	r0, [r3]
   116b0:	bl	11e68 <__assert_fail@plt+0xffc>
   116b4:	add	r0, sp, #48	; 0x30
   116b8:	bl	147c4 <__assert_fail@plt+0x3958>
   116bc:	mov	fp, #0
   116c0:	movw	r3, #23704	; 0x5c98
   116c4:	movt	r3, #1
   116c8:	str	r3, [sp, #32]
   116cc:	movw	r3, #28992	; 0x7140
   116d0:	movt	r3, #2
   116d4:	str	r3, [sp, #36]	; 0x24
   116d8:	str	fp, [sp, #28]
   116dc:	b	118f0 <__assert_fail@plt+0xa84>
   116e0:	mov	r2, #5
   116e4:	movw	r1, #23680	; 0x5c80
   116e8:	movt	r1, #1
   116ec:	mov	r0, #0
   116f0:	bl	10ca4 <dcgettext@plt>
   116f4:	mov	r4, r0
   116f8:	movw	r3, #28976	; 0x7130
   116fc:	movt	r3, #2
   11700:	ldr	r3, [r3]
   11704:	add	r3, r3, #1
   11708:	ldr	r0, [r5, r3, lsl #2]
   1170c:	bl	147a4 <__assert_fail@plt+0x3938>
   11710:	mov	r3, r0
   11714:	mov	r2, r4
   11718:	mov	r1, #0
   1171c:	mov	r0, r1
   11720:	bl	10d1c <error@plt>
   11724:	mov	r0, #1
   11728:	bl	11050 <__assert_fail@plt+0x1e4>
   1172c:	bl	10dac <__errno_location@plt>
   11730:	ldr	r4, [r0]
   11734:	ldr	r2, [sp, #40]	; 0x28
   11738:	mov	r1, #3
   1173c:	mov	r0, #0
   11740:	bl	145d8 <__assert_fail@plt+0x376c>
   11744:	mov	r3, r0
   11748:	movw	r2, #24068	; 0x5e04
   1174c:	movt	r2, #1
   11750:	mov	r1, r4
   11754:	mov	r0, #1
   11758:	bl	10d1c <error@plt>
   1175c:	ldr	r3, [pc, #1436]	; 11d00 <__assert_fail@plt+0xe94>
   11760:	movw	r2, #458	; 0x1ca
   11764:	movw	r1, #23708	; 0x5c9c
   11768:	movt	r1, #1
   1176c:	movw	r0, #23720	; 0x5ca8
   11770:	movt	r0, #1
   11774:	bl	10e6c <__assert_fail@plt>
   11778:	mov	r0, #28
   1177c:	bl	15444 <__assert_fail@plt+0x45d8>
   11780:	mov	r5, r0
   11784:	cmp	r9, #0
   11788:	beq	11798 <__assert_fail@plt+0x92c>
   1178c:	mov	r0, r9
   11790:	bl	15550 <__assert_fail@plt+0x46e4>
   11794:	str	r0, [r5]
   11798:	ldr	r3, [sp, #24]
   1179c:	str	r5, [r3, #8]
   117a0:	b	118e0 <__assert_fail@plt+0xa74>
   117a4:	ldr	r3, [pc, #1368]	; 11d04 <__assert_fail@plt+0xe98>
   117a8:	mov	r2, #140	; 0x8c
   117ac:	movw	r1, #23708	; 0x5c9c
   117b0:	movt	r1, #1
   117b4:	movw	r0, #23732	; 0x5cb4
   117b8:	movt	r0, #1
   117bc:	bl	10e6c <__assert_fail@plt>
   117c0:	ldr	r3, [pc, #1340]	; 11d04 <__assert_fail@plt+0xe98>
   117c4:	mov	r2, #163	; 0xa3
   117c8:	movw	r1, #23708	; 0x5c9c
   117cc:	movt	r1, #1
   117d0:	movw	r0, #23752	; 0x5cc8
   117d4:	movt	r0, #1
   117d8:	bl	10e6c <__assert_fail@plt>
   117dc:	ldr	r3, [pc, #1312]	; 11d04 <__assert_fail@plt+0xe98>
   117e0:	mov	r2, #177	; 0xb1
   117e4:	movw	r1, #23708	; 0x5c9c
   117e8:	movt	r1, #1
   117ec:	movw	r0, #23796	; 0x5cf4
   117f0:	movt	r0, #1
   117f4:	bl	10e6c <__assert_fail@plt>
   117f8:	mvn	r3, #0
   117fc:	strb	r3, [r6, #12]
   11800:	ldr	r6, [r6, #4]
   11804:	cmp	r7, r6
   11808:	beq	11848 <__assert_fail@plt+0x9dc>
   1180c:	cmp	r6, #0
   11810:	beq	117dc <__assert_fail@plt+0x970>
   11814:	ldr	r1, [r6]
   11818:	cmp	r1, #0
   1181c:	beq	117dc <__assert_fail@plt+0x970>
   11820:	mov	r0, r9
   11824:	bl	10c38 <strcmp@plt>
   11828:	cmp	r0, #0
   1182c:	beq	117dc <__assert_fail@plt+0x970>
   11830:	cmp	r0, #0
   11834:	blt	117f8 <__assert_fail@plt+0x98c>
   11838:	mov	r3, #1
   1183c:	strb	r3, [r6, #12]
   11840:	ldr	r6, [r6, #8]
   11844:	b	11804 <__assert_fail@plt+0x998>
   11848:	ldrsb	r3, [r4, #12]
   1184c:	cmp	r3, #0
   11850:	beq	118d4 <__assert_fail@plt+0xa68>
   11854:	rsb	r2, r8, #0
   11858:	cmp	r3, r2
   1185c:	beq	118d4 <__assert_fail@plt+0xa68>
   11860:	ldrsb	r3, [r5, #12]
   11864:	cmp	r8, r3
   11868:	beq	11938 <__assert_fail@plt+0xacc>
   1186c:	cmp	r8, #0
   11870:	blt	11968 <__assert_fail@plt+0xafc>
   11874:	ldr	r3, [r5, #4]
   11878:	ldr	r1, [r3, #8]
   1187c:	str	r1, [r5, #4]
   11880:	str	r5, [r3, #8]
   11884:	ldr	r1, [r3, #4]
   11888:	str	r1, [r4, #8]
   1188c:	str	r4, [r3, #4]
   11890:	strb	fp, [r4, #12]
   11894:	strb	fp, [r5, #12]
   11898:	ldrsb	r1, [r3, #12]
   1189c:	cmp	r8, r1
   118a0:	rsbeq	r8, r8, #0
   118a4:	strbeq	r8, [r4, #12]
   118a8:	beq	118b4 <__assert_fail@plt+0xa48>
   118ac:	cmp	r2, r1
   118b0:	strbeq	r8, [r5, #12]
   118b4:	strb	fp, [r3, #12]
   118b8:	mov	r5, r3
   118bc:	ldr	r3, [sl, #8]
   118c0:	cmp	r4, r3
   118c4:	streq	r5, [sl, #8]
   118c8:	strne	r5, [sl, #4]
   118cc:	mov	r5, r7
   118d0:	b	118e0 <__assert_fail@plt+0xa74>
   118d4:	add	r8, r3, r8
   118d8:	strb	r8, [r4, #12]
   118dc:	mov	r5, r7
   118e0:	ldr	r3, [sp, #28]
   118e4:	cmp	r3, #0
   118e8:	bne	11a5c <__assert_fail@plt+0xbf0>
   118ec:	str	r5, [sp, #28]
   118f0:	add	r3, sp, #48	; 0x30
   118f4:	mov	r2, #3
   118f8:	ldr	r1, [sp, #32]
   118fc:	ldr	r0, [sp, #36]	; 0x24
   11900:	ldr	r0, [r0]
   11904:	bl	147d4 <__assert_fail@plt+0x3968>
   11908:	cmn	r0, #1
   1190c:	beq	11a9c <__assert_fail@plt+0xc30>
   11910:	cmp	r0, #0
   11914:	beq	1175c <__assert_fail@plt+0x8f0>
   11918:	ldr	r9, [sp, #52]	; 0x34
   1191c:	ldr	r3, [sp, #24]
   11920:	ldr	r5, [r3, #8]
   11924:	cmp	r5, #0
   11928:	beq	11778 <__assert_fail@plt+0x90c>
   1192c:	ldr	sl, [sp, #24]
   11930:	mov	r4, r5
   11934:	b	119a0 <__assert_fail@plt+0xb34>
   11938:	cmp	r8, #0
   1193c:	blt	11958 <__assert_fail@plt+0xaec>
   11940:	ldr	r3, [r5, #4]
   11944:	str	r3, [r4, #8]
   11948:	str	r4, [r5, #4]
   1194c:	strb	fp, [r5, #12]
   11950:	strb	fp, [r4, #12]
   11954:	b	118bc <__assert_fail@plt+0xa50>
   11958:	ldr	r3, [r5, #8]
   1195c:	str	r3, [r4, #4]
   11960:	str	r4, [r5, #8]
   11964:	b	1194c <__assert_fail@plt+0xae0>
   11968:	ldr	r3, [r5, #8]
   1196c:	ldr	r1, [r3, #4]
   11970:	str	r1, [r5, #8]
   11974:	str	r5, [r3, #4]
   11978:	ldr	r1, [r3, #8]
   1197c:	str	r1, [r4, #4]
   11980:	str	r4, [r3, #8]
   11984:	b	11890 <__assert_fail@plt+0xa24>
   11988:	ldrsb	r2, [r3, #12]
   1198c:	cmp	r2, #0
   11990:	movne	sl, r5
   11994:	cmp	r2, #0
   11998:	movne	r4, r3
   1199c:	mov	r5, r3
   119a0:	cmp	r9, #0
   119a4:	cmpne	r5, #0
   119a8:	beq	117a4 <__assert_fail@plt+0x938>
   119ac:	ldr	r1, [r5]
   119b0:	cmp	r1, #0
   119b4:	beq	117a4 <__assert_fail@plt+0x938>
   119b8:	mov	r0, r9
   119bc:	bl	10c38 <strcmp@plt>
   119c0:	cmp	r0, #0
   119c4:	beq	118e0 <__assert_fail@plt+0xa74>
   119c8:	ldrlt	r3, [r5, #4]
   119cc:	ldrge	r3, [r5, #8]
   119d0:	cmp	r3, #0
   119d4:	bne	11988 <__assert_fail@plt+0xb1c>
   119d8:	mov	r6, r0
   119dc:	mov	r0, #28
   119e0:	bl	15444 <__assert_fail@plt+0x45d8>
   119e4:	mov	r7, r0
   119e8:	mov	r0, r9
   119ec:	bl	15550 <__assert_fail@plt+0x46e4>
   119f0:	str	r0, [r7]
   119f4:	cmp	r6, #0
   119f8:	strlt	r7, [r5, #4]
   119fc:	strge	r7, [r5, #8]
   11a00:	cmp	r4, #0
   11a04:	beq	117c0 <__assert_fail@plt+0x954>
   11a08:	ldr	r1, [r4]
   11a0c:	cmp	r1, #0
   11a10:	beq	117c0 <__assert_fail@plt+0x954>
   11a14:	mov	r0, r9
   11a18:	bl	10c38 <strcmp@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	117c0 <__assert_fail@plt+0x954>
   11a24:	cmp	r0, #0
   11a28:	ldrlt	r5, [r4, #4]
   11a2c:	mvnlt	r8, #0
   11a30:	ldrge	r5, [r4, #8]
   11a34:	movge	r8, #1
   11a38:	cmp	r5, r7
   11a3c:	beq	11848 <__assert_fail@plt+0x9dc>
   11a40:	cmp	r5, #0
   11a44:	beq	117dc <__assert_fail@plt+0x970>
   11a48:	ldr	r1, [r5]
   11a4c:	cmp	r1, #0
   11a50:	beq	117dc <__assert_fail@plt+0x970>
   11a54:	mov	r6, r5
   11a58:	b	11820 <__assert_fail@plt+0x9b4>
   11a5c:	ldr	r1, [r5]
   11a60:	ldr	r0, [r3]
   11a64:	bl	10c38 <strcmp@plt>
   11a68:	cmp	r0, #0
   11a6c:	beq	116d8 <__assert_fail@plt+0x86c>
   11a70:	ldr	r3, [r5, #16]
   11a74:	add	r3, r3, #1
   11a78:	str	r3, [r5, #16]
   11a7c:	mov	r0, #8
   11a80:	bl	150e4 <__assert_fail@plt+0x4278>
   11a84:	str	r5, [r0]
   11a88:	ldr	r2, [sp, #28]
   11a8c:	ldr	r3, [r2, #24]
   11a90:	str	r3, [r0, #4]
   11a94:	str	r0, [r2, #24]
   11a98:	b	116d8 <__assert_fail@plt+0x86c>
   11a9c:	ldr	r3, [sp, #28]
   11aa0:	cmp	r3, #0
   11aa4:	bne	11ae8 <__assert_fail@plt+0xc7c>
   11aa8:	ldr	r3, [sp, #24]
   11aac:	ldr	r6, [r3, #8]
   11ab0:	cmp	r6, #0
   11ab4:	beq	11ac8 <__assert_fail@plt+0xc5c>
   11ab8:	movw	r1, #3944	; 0xf68
   11abc:	movt	r1, #1
   11ac0:	mov	r0, r6
   11ac4:	bl	10fd4 <__assert_fail@plt+0x168>
   11ac8:	mov	fp, #1
   11acc:	movw	r4, #29008	; 0x7150
   11ad0:	movt	r4, #2
   11ad4:	movw	r9, #3972	; 0xf84
   11ad8:	movt	r9, #1
   11adc:	movw	sl, #23884	; 0x5d4c
   11ae0:	movt	sl, #1
   11ae4:	b	11bb8 <__assert_fail@plt+0xd4c>
   11ae8:	mov	r2, #5
   11aec:	movw	r1, #23840	; 0x5d20
   11af0:	movt	r1, #1
   11af4:	mov	r0, #0
   11af8:	bl	10ca4 <dcgettext@plt>
   11afc:	mov	r4, r0
   11b00:	ldr	r2, [sp, #40]	; 0x28
   11b04:	mov	r1, #3
   11b08:	mov	r0, #0
   11b0c:	bl	145d8 <__assert_fail@plt+0x376c>
   11b10:	mov	r3, r0
   11b14:	mov	r2, r4
   11b18:	mov	r1, #0
   11b1c:	mov	r0, #1
   11b20:	bl	10d1c <error@plt>
   11b24:	str	r2, [r3, #20]
   11b28:	mov	r3, r2
   11b2c:	mov	r0, r8
   11b30:	ldr	r5, [r5, #4]
   11b34:	cmp	r5, #0
   11b38:	beq	11b60 <__assert_fail@plt+0xcf4>
   11b3c:	ldr	ip, [r5]
   11b40:	ldr	r2, [ip, #16]
   11b44:	sub	r2, r2, #1
   11b48:	str	r2, [ip, #16]
   11b4c:	ldr	r2, [r5]
   11b50:	ldr	ip, [r2, #16]
   11b54:	cmp	ip, #0
   11b58:	bne	11b30 <__assert_fail@plt+0xcc4>
   11b5c:	b	11b24 <__assert_fail@plt+0xcb8>
   11b60:	cmp	r0, #0
   11b64:	strne	r3, [r4, #8]
   11b68:	ldr	r3, [r1, #20]
   11b6c:	str	r3, [r4, #4]
   11b70:	cmp	r3, #0
   11b74:	beq	11bac <__assert_fail@plt+0xd40>
   11b78:	ldr	r5, [r3, #24]
   11b7c:	ldr	r0, [r3]
   11b80:	bl	10d34 <puts@plt>
   11b84:	ldr	r1, [r4, #4]
   11b88:	strb	r7, [r1, #13]
   11b8c:	ldr	r3, [r4]
   11b90:	sub	r3, r3, #1
   11b94:	str	r3, [r4]
   11b98:	cmp	r5, #0
   11b9c:	beq	11b68 <__assert_fail@plt+0xcfc>
   11ba0:	ldr	r3, [r4, #8]
   11ba4:	mov	r0, #0
   11ba8:	b	11b3c <__assert_fail@plt+0xcd0>
   11bac:	ldr	r3, [r4]
   11bb0:	cmp	r3, #0
   11bb4:	bne	11c94 <__assert_fail@plt+0xe28>
   11bb8:	ldr	r3, [r4]
   11bbc:	cmp	r3, #0
   11bc0:	beq	11c14 <__assert_fail@plt+0xda8>
   11bc4:	cmp	r6, #0
   11bc8:	beq	11c88 <__assert_fail@plt+0xe1c>
   11bcc:	mov	r1, r9
   11bd0:	mov	r0, r6
   11bd4:	bl	10fd4 <__assert_fail@plt+0x168>
   11bd8:	ldr	r3, [r4, #4]
   11bdc:	cmp	r3, #0
   11be0:	beq	11bac <__assert_fail@plt+0xd40>
   11be4:	mov	r7, #1
   11be8:	mov	r8, r7
   11bec:	b	11b78 <__assert_fail@plt+0xd0c>
   11bf0:	mov	r1, r5
   11bf4:	mov	r0, r6
   11bf8:	bl	10fd4 <__assert_fail@plt+0x168>
   11bfc:	ldr	r3, [r4, #12]
   11c00:	cmp	r3, #0
   11c04:	beq	11bb8 <__assert_fail@plt+0xd4c>
   11c08:	cmp	r6, #0
   11c0c:	bne	11bf0 <__assert_fail@plt+0xd84>
   11c10:	b	11bfc <__assert_fail@plt+0xd90>
   11c14:	movw	r3, #28992	; 0x7140
   11c18:	movt	r3, #2
   11c1c:	ldr	r0, [r3]
   11c20:	bl	11ea8 <__assert_fail@plt+0x103c>
   11c24:	cmp	r0, #0
   11c28:	bne	11c34 <__assert_fail@plt+0xdc8>
   11c2c:	eor	r0, fp, #1
   11c30:	bl	10d94 <exit@plt>
   11c34:	bl	10dac <__errno_location@plt>
   11c38:	ldr	r4, [r0]
   11c3c:	ldr	r3, [sp, #44]	; 0x2c
   11c40:	cmp	r3, #0
   11c44:	bne	11c74 <__assert_fail@plt+0xe08>
   11c48:	mov	r2, #5
   11c4c:	movw	r1, #23912	; 0x5d68
   11c50:	movt	r1, #1
   11c54:	mov	r0, #0
   11c58:	bl	10ca4 <dcgettext@plt>
   11c5c:	mov	r3, r0
   11c60:	movw	r2, #24068	; 0x5e04
   11c64:	movt	r2, #1
   11c68:	mov	r1, r4
   11c6c:	mov	r0, #1
   11c70:	bl	10d1c <error@plt>
   11c74:	ldr	r2, [sp, #40]	; 0x28
   11c78:	mov	r1, #3
   11c7c:	mov	r0, #0
   11c80:	bl	145d8 <__assert_fail@plt+0x376c>
   11c84:	b	11c5c <__assert_fail@plt+0xdf0>
   11c88:	ldr	r3, [r4, #4]
   11c8c:	cmp	r3, #0
   11c90:	bne	11be4 <__assert_fail@plt+0xd78>
   11c94:	mov	r2, #5
   11c98:	mov	r1, sl
   11c9c:	mov	r0, #0
   11ca0:	bl	10ca4 <dcgettext@plt>
   11ca4:	mov	r5, r0
   11ca8:	ldr	r2, [sp, #40]	; 0x28
   11cac:	mov	r1, #3
   11cb0:	mov	r0, #0
   11cb4:	bl	145d8 <__assert_fail@plt+0x376c>
   11cb8:	mov	r3, r0
   11cbc:	mov	r2, r5
   11cc0:	mov	r1, #0
   11cc4:	mov	r0, r1
   11cc8:	bl	10d1c <error@plt>
   11ccc:	movw	r5, #5084	; 0x13dc
   11cd0:	movt	r5, #1
   11cd4:	mov	fp, #0
   11cd8:	b	11c08 <__assert_fail@plt+0xd9c>
   11cdc:	mov	r0, #28
   11ce0:	bl	15444 <__assert_fail@plt+0x45d8>
   11ce4:	str	r0, [sp, #24]
   11ce8:	mov	r3, #0
   11cec:	str	r3, [sp, #44]	; 0x2c
   11cf0:	movw	r3, #23636	; 0x5c54
   11cf4:	movt	r3, #1
   11cf8:	str	r3, [sp, #40]	; 0x28
   11cfc:	b	116a0 <__assert_fail@plt+0x834>
   11d00:	andeq	r5, r1, r0, lsr #20
   11d04:	andeq	r5, r1, r8, lsr #20
   11d08:	movw	r3, #29024	; 0x7160
   11d0c:	movt	r3, #2
   11d10:	str	r0, [r3]
   11d14:	bx	lr
   11d18:	movw	r3, #29024	; 0x7160
   11d1c:	movt	r3, #2
   11d20:	strb	r0, [r3, #4]
   11d24:	bx	lr
   11d28:	strd	r4, [sp, #-16]!
   11d2c:	str	r6, [sp, #8]
   11d30:	str	lr, [sp, #12]
   11d34:	sub	sp, sp, #8
   11d38:	movw	r3, #28996	; 0x7144
   11d3c:	movt	r3, #2
   11d40:	ldr	r0, [r3]
   11d44:	bl	156c8 <__assert_fail@plt+0x485c>
   11d48:	cmp	r0, #0
   11d4c:	beq	11d74 <__assert_fail@plt+0xf08>
   11d50:	movw	r3, #29024	; 0x7160
   11d54:	movt	r3, #2
   11d58:	ldrb	r3, [r3, #4]
   11d5c:	cmp	r3, #0
   11d60:	beq	11da0 <__assert_fail@plt+0xf34>
   11d64:	bl	10dac <__errno_location@plt>
   11d68:	ldr	r3, [r0]
   11d6c:	cmp	r3, #32
   11d70:	bne	11da0 <__assert_fail@plt+0xf34>
   11d74:	movw	r3, #28984	; 0x7138
   11d78:	movt	r3, #2
   11d7c:	ldr	r0, [r3]
   11d80:	bl	156c8 <__assert_fail@plt+0x485c>
   11d84:	cmp	r0, #0
   11d88:	bne	11e28 <__assert_fail@plt+0xfbc>
   11d8c:	add	sp, sp, #8
   11d90:	ldrd	r4, [sp]
   11d94:	ldr	r6, [sp, #8]
   11d98:	add	sp, sp, #12
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	mov	r2, #5
   11da4:	movw	r1, #24052	; 0x5df4
   11da8:	movt	r1, #1
   11dac:	mov	r0, #0
   11db0:	bl	10ca4 <dcgettext@plt>
   11db4:	mov	r4, r0
   11db8:	movw	r3, #29024	; 0x7160
   11dbc:	movt	r3, #2
   11dc0:	ldr	r5, [r3]
   11dc4:	cmp	r5, #0
   11dc8:	beq	11e08 <__assert_fail@plt+0xf9c>
   11dcc:	bl	10dac <__errno_location@plt>
   11dd0:	ldr	r6, [r0]
   11dd4:	mov	r0, r5
   11dd8:	bl	145a0 <__assert_fail@plt+0x3734>
   11ddc:	str	r4, [sp]
   11de0:	mov	r3, r0
   11de4:	movw	r2, #24064	; 0x5e00
   11de8:	movt	r2, #1
   11dec:	mov	r1, r6
   11df0:	mov	r0, #0
   11df4:	bl	10d1c <error@plt>
   11df8:	movw	r3, #28900	; 0x70e4
   11dfc:	movt	r3, #2
   11e00:	ldr	r0, [r3]
   11e04:	bl	10c68 <_exit@plt>
   11e08:	bl	10dac <__errno_location@plt>
   11e0c:	mov	r3, r4
   11e10:	movw	r2, #24068	; 0x5e04
   11e14:	movt	r2, #1
   11e18:	ldr	r1, [r0]
   11e1c:	mov	r0, #0
   11e20:	bl	10d1c <error@plt>
   11e24:	b	11df8 <__assert_fail@plt+0xf8c>
   11e28:	movw	r3, #28900	; 0x70e4
   11e2c:	movt	r3, #2
   11e30:	ldr	r0, [r3]
   11e34:	bl	10c68 <_exit@plt>
   11e38:	strd	r4, [sp, #-12]!
   11e3c:	str	lr, [sp, #8]
   11e40:	sub	sp, sp, #20
   11e44:	ldr	r1, [sp, #40]	; 0x28
   11e48:	str	r1, [sp, #8]
   11e4c:	ldrd	r4, [sp, #32]
   11e50:	strd	r4, [sp]
   11e54:	bl	10c44 <posix_fadvise64@plt>
   11e58:	add	sp, sp, #20
   11e5c:	ldrd	r4, [sp]
   11e60:	add	sp, sp, #8
   11e64:	pop	{pc}		; (ldr pc, [sp], #4)
   11e68:	cmp	r0, #0
   11e6c:	bxeq	lr
   11e70:	str	r4, [sp, #-8]!
   11e74:	str	lr, [sp, #4]
   11e78:	sub	sp, sp, #16
   11e7c:	mov	r4, r1
   11e80:	bl	10ddc <fileno@plt>
   11e84:	str	r4, [sp, #8]
   11e88:	mov	r2, #0
   11e8c:	mov	r3, #0
   11e90:	strd	r2, [sp]
   11e94:	bl	10c44 <posix_fadvise64@plt>
   11e98:	add	sp, sp, #16
   11e9c:	ldr	r4, [sp]
   11ea0:	add	sp, sp, #4
   11ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea8:	strd	r4, [sp, #-16]!
   11eac:	str	r6, [sp, #8]
   11eb0:	str	lr, [sp, #12]
   11eb4:	sub	sp, sp, #8
   11eb8:	mov	r4, r0
   11ebc:	bl	10ddc <fileno@plt>
   11ec0:	cmp	r0, #0
   11ec4:	blt	11f3c <__assert_fail@plt+0x10d0>
   11ec8:	mov	r0, r4
   11ecc:	bl	10d58 <__freading@plt>
   11ed0:	cmp	r0, #0
   11ed4:	beq	11f08 <__assert_fail@plt+0x109c>
   11ed8:	mov	r0, r4
   11edc:	bl	10ddc <fileno@plt>
   11ee0:	mov	r3, #1
   11ee4:	str	r3, [sp]
   11ee8:	mov	r2, #0
   11eec:	mov	r3, #0
   11ef0:	bl	10cec <lseek64@plt>
   11ef4:	mvn	r2, #0
   11ef8:	mvn	r3, #0
   11efc:	cmp	r1, r3
   11f00:	cmpeq	r0, r2
   11f04:	beq	11f48 <__assert_fail@plt+0x10dc>
   11f08:	mov	r0, r4
   11f0c:	bl	11f64 <__assert_fail@plt+0x10f8>
   11f10:	cmp	r0, #0
   11f14:	beq	11f48 <__assert_fail@plt+0x10dc>
   11f18:	bl	10dac <__errno_location@plt>
   11f1c:	mov	r5, r0
   11f20:	ldr	r6, [r0]
   11f24:	mov	r0, r4
   11f28:	bl	10df4 <fclose@plt>
   11f2c:	cmp	r6, #0
   11f30:	strne	r6, [r5]
   11f34:	mvnne	r0, #0
   11f38:	b	11f50 <__assert_fail@plt+0x10e4>
   11f3c:	mov	r0, r4
   11f40:	bl	10df4 <fclose@plt>
   11f44:	b	11f50 <__assert_fail@plt+0x10e4>
   11f48:	mov	r0, r4
   11f4c:	bl	10df4 <fclose@plt>
   11f50:	add	sp, sp, #8
   11f54:	ldrd	r4, [sp]
   11f58:	ldr	r6, [sp, #8]
   11f5c:	add	sp, sp, #12
   11f60:	pop	{pc}		; (ldr pc, [sp], #4)
   11f64:	str	r4, [sp, #-8]!
   11f68:	str	lr, [sp, #4]
   11f6c:	sub	sp, sp, #8
   11f70:	subs	r4, r0, #0
   11f74:	beq	11f88 <__assert_fail@plt+0x111c>
   11f78:	mov	r0, r4
   11f7c:	bl	10d58 <__freading@plt>
   11f80:	cmp	r0, #0
   11f84:	bne	11fa0 <__assert_fail@plt+0x1134>
   11f88:	mov	r0, r4
   11f8c:	bl	10c50 <fflush@plt>
   11f90:	add	sp, sp, #8
   11f94:	ldr	r4, [sp]
   11f98:	add	sp, sp, #4
   11f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11fa0:	ldr	r3, [r4]
   11fa4:	tst	r3, #256	; 0x100
   11fa8:	bne	11fb8 <__assert_fail@plt+0x114c>
   11fac:	mov	r0, r4
   11fb0:	bl	10c50 <fflush@plt>
   11fb4:	b	11f90 <__assert_fail@plt+0x1124>
   11fb8:	mov	r3, #1
   11fbc:	str	r3, [sp]
   11fc0:	mov	r2, #0
   11fc4:	mov	r3, #0
   11fc8:	mov	r0, r4
   11fcc:	bl	1222c <__assert_fail@plt+0x13c0>
   11fd0:	b	11fac <__assert_fail@plt+0x1140>
   11fd4:	strd	r4, [sp, #-12]!
   11fd8:	str	lr, [sp, #8]
   11fdc:	sub	sp, sp, #12
   11fe0:	mov	r5, r0
   11fe4:	bl	10dac <__errno_location@plt>
   11fe8:	mov	r4, r0
   11fec:	ldr	r3, [r0]
   11ff0:	str	r3, [sp]
   11ff4:	str	r3, [sp, #4]
   11ff8:	mov	r3, #0
   11ffc:	str	r3, [r0]
   12000:	mov	r0, r5
   12004:	bl	10c5c <free@plt>
   12008:	ldr	r3, [r4]
   1200c:	clz	r3, r3
   12010:	lsr	r3, r3, #5
   12014:	add	r2, sp, #8
   12018:	add	r3, r2, r3, lsl #2
   1201c:	ldr	r3, [r3, #-8]
   12020:	str	r3, [r4]
   12024:	add	sp, sp, #12
   12028:	ldrd	r4, [sp]
   1202c:	add	sp, sp, #8
   12030:	pop	{pc}		; (ldr pc, [sp], #4)
   12034:	str	r4, [sp, #-8]!
   12038:	str	lr, [sp, #4]
   1203c:	mov	r4, r0
   12040:	mov	r1, #0
   12044:	movw	r0, #24072	; 0x5e08
   12048:	movt	r0, #1
   1204c:	bl	10d28 <open64@plt>
   12050:	cmp	r4, r0
   12054:	moveq	r0, #1
   12058:	beq	12068 <__assert_fail@plt+0x11fc>
   1205c:	cmp	r0, #0
   12060:	movlt	r0, #0
   12064:	bge	12074 <__assert_fail@plt+0x1208>
   12068:	ldr	r4, [sp]
   1206c:	add	sp, sp, #4
   12070:	pop	{pc}		; (ldr pc, [sp], #4)
   12074:	bl	10e60 <close@plt>
   12078:	bl	10dac <__errno_location@plt>
   1207c:	mov	r3, #9
   12080:	str	r3, [r0]
   12084:	mov	r0, #0
   12088:	b	12068 <__assert_fail@plt+0x11fc>
   1208c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12090:	strd	r6, [sp, #8]
   12094:	strd	r8, [sp, #16]
   12098:	str	sl, [sp, #24]
   1209c:	str	lr, [sp, #28]
   120a0:	mov	r8, r0
   120a4:	mov	r9, r1
   120a8:	mov	r6, r2
   120ac:	mov	r0, r2
   120b0:	bl	10ddc <fileno@plt>
   120b4:	cmp	r0, #1
   120b8:	beq	12194 <__assert_fail@plt+0x1328>
   120bc:	cmp	r0, #2
   120c0:	beq	120e4 <__assert_fail@plt+0x1278>
   120c4:	cmp	r0, #0
   120c8:	beq	121a0 <__assert_fail@plt+0x1334>
   120cc:	mov	r1, #2
   120d0:	mov	r0, r1
   120d4:	bl	10cb0 <dup2@plt>
   120d8:	subs	r4, r0, #2
   120dc:	movne	r4, #1
   120e0:	b	120e8 <__assert_fail@plt+0x127c>
   120e4:	mov	r4, #0
   120e8:	mov	r1, #1
   120ec:	mov	r0, r1
   120f0:	bl	10cb0 <dup2@plt>
   120f4:	subs	r7, r0, #1
   120f8:	movne	r7, #1
   120fc:	mov	r1, #0
   12100:	mov	r0, r1
   12104:	bl	10cb0 <dup2@plt>
   12108:	adds	r5, r0, #0
   1210c:	movne	r5, #1
   12110:	cmp	r5, #0
   12114:	bne	121b0 <__assert_fail@plt+0x1344>
   12118:	cmp	r7, #0
   1211c:	bne	121c8 <__assert_fail@plt+0x135c>
   12120:	cmp	r4, #0
   12124:	beq	12138 <__assert_fail@plt+0x12cc>
   12128:	mov	r0, #2
   1212c:	bl	12034 <__assert_fail@plt+0x11c8>
   12130:	cmp	r0, #0
   12134:	beq	12210 <__assert_fail@plt+0x13a4>
   12138:	mov	r2, r6
   1213c:	mov	r1, r9
   12140:	mov	r0, r8
   12144:	bl	10d70 <freopen64@plt>
   12148:	mov	r6, r0
   1214c:	bl	10dac <__errno_location@plt>
   12150:	mov	r8, r0
   12154:	ldr	r9, [r0]
   12158:	cmp	r4, #0
   1215c:	bne	12220 <__assert_fail@plt+0x13b4>
   12160:	cmp	r7, #0
   12164:	bne	121f0 <__assert_fail@plt+0x1384>
   12168:	cmp	r5, #0
   1216c:	bne	12204 <__assert_fail@plt+0x1398>
   12170:	cmp	r6, #0
   12174:	streq	r9, [r8]
   12178:	mov	r0, r6
   1217c:	ldrd	r4, [sp]
   12180:	ldrd	r6, [sp, #8]
   12184:	ldrd	r8, [sp, #16]
   12188:	ldr	sl, [sp, #24]
   1218c:	add	sp, sp, #28
   12190:	pop	{pc}		; (ldr pc, [sp], #4)
   12194:	mov	r4, #0
   12198:	mov	r7, r4
   1219c:	b	120fc <__assert_fail@plt+0x1290>
   121a0:	mov	r4, #0
   121a4:	mov	r7, r4
   121a8:	mov	r5, r4
   121ac:	b	12110 <__assert_fail@plt+0x12a4>
   121b0:	mov	r0, #0
   121b4:	bl	12034 <__assert_fail@plt+0x11c8>
   121b8:	cmp	r0, #0
   121bc:	bne	12118 <__assert_fail@plt+0x12ac>
   121c0:	mov	r6, #0
   121c4:	b	1214c <__assert_fail@plt+0x12e0>
   121c8:	mov	r0, #1
   121cc:	bl	12034 <__assert_fail@plt+0x11c8>
   121d0:	cmp	r0, #0
   121d4:	bne	12120 <__assert_fail@plt+0x12b4>
   121d8:	bl	10dac <__errno_location@plt>
   121dc:	mov	r8, r0
   121e0:	ldr	r9, [r0]
   121e4:	cmp	r4, #0
   121e8:	moveq	r6, #0
   121ec:	bne	121fc <__assert_fail@plt+0x1390>
   121f0:	mov	r0, #1
   121f4:	bl	10e60 <close@plt>
   121f8:	b	12168 <__assert_fail@plt+0x12fc>
   121fc:	mov	r6, #0
   12200:	b	12220 <__assert_fail@plt+0x13b4>
   12204:	mov	r0, #0
   12208:	bl	10e60 <close@plt>
   1220c:	b	12170 <__assert_fail@plt+0x1304>
   12210:	bl	10dac <__errno_location@plt>
   12214:	mov	r8, r0
   12218:	ldr	r9, [r0]
   1221c:	mov	r6, #0
   12220:	mov	r0, #2
   12224:	bl	10e60 <close@plt>
   12228:	b	12160 <__assert_fail@plt+0x12f4>
   1222c:	str	r4, [sp, #-16]!
   12230:	strd	r6, [sp, #4]
   12234:	str	lr, [sp, #12]
   12238:	sub	sp, sp, #8
   1223c:	mov	r4, r0
   12240:	mov	r6, r2
   12244:	mov	r7, r3
   12248:	ldr	r2, [r0, #8]
   1224c:	ldr	r3, [r0, #4]
   12250:	cmp	r2, r3
   12254:	beq	12284 <__assert_fail@plt+0x1418>
   12258:	ldr	r3, [sp, #24]
   1225c:	str	r3, [sp]
   12260:	mov	r2, r6
   12264:	mov	r3, r7
   12268:	mov	r0, r4
   1226c:	bl	10e00 <fseeko64@plt>
   12270:	add	sp, sp, #8
   12274:	ldr	r4, [sp]
   12278:	ldrd	r6, [sp, #4]
   1227c:	add	sp, sp, #12
   12280:	pop	{pc}		; (ldr pc, [sp], #4)
   12284:	ldr	r2, [r0, #20]
   12288:	ldr	r3, [r0, #16]
   1228c:	cmp	r2, r3
   12290:	bne	12258 <__assert_fail@plt+0x13ec>
   12294:	ldr	r3, [r0, #36]	; 0x24
   12298:	cmp	r3, #0
   1229c:	bne	12258 <__assert_fail@plt+0x13ec>
   122a0:	bl	10ddc <fileno@plt>
   122a4:	ldr	r3, [sp, #24]
   122a8:	str	r3, [sp]
   122ac:	mov	r2, r6
   122b0:	mov	r3, r7
   122b4:	bl	10cec <lseek64@plt>
   122b8:	mvn	r2, #0
   122bc:	mvn	r3, #0
   122c0:	cmp	r1, r3
   122c4:	cmpeq	r0, r2
   122c8:	beq	122e4 <__assert_fail@plt+0x1478>
   122cc:	ldr	r3, [r4]
   122d0:	bic	r3, r3, #16
   122d4:	str	r3, [r4]
   122d8:	strd	r0, [r4, #80]	; 0x50
   122dc:	mov	r0, #0
   122e0:	b	12270 <__assert_fail@plt+0x1404>
   122e4:	mvn	r0, #0
   122e8:	b	12270 <__assert_fail@plt+0x1404>
   122ec:	strd	r4, [sp, #-16]!
   122f0:	str	r6, [sp, #8]
   122f4:	str	lr, [sp, #12]
   122f8:	sub	sp, sp, #16
   122fc:	movw	ip, #29000	; 0x7148
   12300:	movt	ip, #2
   12304:	ldr	r4, [ip]
   12308:	mov	lr, #0
   1230c:	str	lr, [ip]
   12310:	cmp	r0, #2
   12314:	beq	12348 <__assert_fail@plt+0x14dc>
   12318:	movw	r3, #29000	; 0x7148
   1231c:	movt	r3, #2
   12320:	str	r4, [r3]
   12324:	movw	r3, #28976	; 0x7130
   12328:	movt	r3, #2
   1232c:	mov	r2, #0
   12330:	str	r2, [r3]
   12334:	add	sp, sp, #16
   12338:	ldrd	r4, [sp]
   1233c:	ldr	r6, [sp, #8]
   12340:	add	sp, sp, #12
   12344:	pop	{pc}		; (ldr pc, [sp], #4)
   12348:	mov	r6, r3
   1234c:	mov	r5, r2
   12350:	str	lr, [sp]
   12354:	movw	r3, #24084	; 0x5e14
   12358:	movt	r3, #1
   1235c:	movw	r2, #24132	; 0x5e44
   12360:	movt	r2, #1
   12364:	bl	10d7c <getopt_long@plt>
   12368:	cmn	r0, #1
   1236c:	beq	12318 <__assert_fail@plt+0x14ac>
   12370:	cmp	r0, #104	; 0x68
   12374:	beq	123b0 <__assert_fail@plt+0x1544>
   12378:	cmp	r0, #118	; 0x76
   1237c:	bne	12318 <__assert_fail@plt+0x14ac>
   12380:	add	r3, sp, #40	; 0x28
   12384:	str	r3, [sp, #12]
   12388:	movw	r0, #28996	; 0x7144
   1238c:	movt	r0, #2
   12390:	str	r3, [sp]
   12394:	ldr	r3, [sp, #32]
   12398:	mov	r2, r6
   1239c:	mov	r1, r5
   123a0:	ldr	r0, [r0]
   123a4:	bl	14fb8 <__assert_fail@plt+0x414c>
   123a8:	mov	r0, #0
   123ac:	bl	10d94 <exit@plt>
   123b0:	mov	r0, #0
   123b4:	ldr	r3, [sp, #36]	; 0x24
   123b8:	blx	r3
   123bc:	b	12318 <__assert_fail@plt+0x14ac>
   123c0:	strd	r4, [sp, #-16]!
   123c4:	str	r6, [sp, #8]
   123c8:	str	lr, [sp, #12]
   123cc:	sub	sp, sp, #16
   123d0:	mov	r5, r2
   123d4:	mov	r6, r3
   123d8:	movw	r3, #29000	; 0x7148
   123dc:	movt	r3, #2
   123e0:	ldr	r4, [r3]
   123e4:	mov	r2, #1
   123e8:	str	r2, [r3]
   123ec:	movw	r2, #23340	; 0x5b2c
   123f0:	movt	r2, #1
   123f4:	movw	ip, #24132	; 0x5e44
   123f8:	movt	ip, #1
   123fc:	mov	r3, #0
   12400:	str	r3, [sp]
   12404:	movw	r3, #24084	; 0x5e14
   12408:	movt	r3, #1
   1240c:	ldrb	lr, [sp, #36]	; 0x24
   12410:	cmp	lr, #0
   12414:	moveq	r2, ip
   12418:	bl	10d7c <getopt_long@plt>
   1241c:	cmn	r0, #1
   12420:	beq	12458 <__assert_fail@plt+0x15ec>
   12424:	cmp	r0, #104	; 0x68
   12428:	beq	1244c <__assert_fail@plt+0x15e0>
   1242c:	cmp	r0, #118	; 0x76
   12430:	beq	12478 <__assert_fail@plt+0x160c>
   12434:	movw	r3, #28900	; 0x70e4
   12438:	movt	r3, #2
   1243c:	ldr	r0, [r3]
   12440:	ldr	r3, [sp, #40]	; 0x28
   12444:	blx	r3
   12448:	b	12458 <__assert_fail@plt+0x15ec>
   1244c:	mov	r0, #0
   12450:	ldr	r3, [sp, #40]	; 0x28
   12454:	blx	r3
   12458:	movw	r3, #29000	; 0x7148
   1245c:	movt	r3, #2
   12460:	str	r4, [r3]
   12464:	add	sp, sp, #16
   12468:	ldrd	r4, [sp]
   1246c:	ldr	r6, [sp, #8]
   12470:	add	sp, sp, #12
   12474:	pop	{pc}		; (ldr pc, [sp], #4)
   12478:	add	r3, sp, #44	; 0x2c
   1247c:	str	r3, [sp, #12]
   12480:	movw	r0, #28996	; 0x7144
   12484:	movt	r0, #2
   12488:	str	r3, [sp]
   1248c:	ldr	r3, [sp, #32]
   12490:	mov	r2, r6
   12494:	mov	r1, r5
   12498:	ldr	r0, [r0]
   1249c:	bl	14fb8 <__assert_fail@plt+0x414c>
   124a0:	mov	r0, #0
   124a4:	bl	10d94 <exit@plt>
   124a8:	strd	r4, [sp, #-16]!
   124ac:	str	r6, [sp, #8]
   124b0:	str	lr, [sp, #12]
   124b4:	subs	r4, r0, #0
   124b8:	beq	12554 <__assert_fail@plt+0x16e8>
   124bc:	mov	r1, #47	; 0x2f
   124c0:	mov	r0, r4
   124c4:	bl	10e24 <strrchr@plt>
   124c8:	subs	r5, r0, #0
   124cc:	beq	1252c <__assert_fail@plt+0x16c0>
   124d0:	add	r6, r5, #1
   124d4:	sub	r3, r6, r4
   124d8:	cmp	r3, #6
   124dc:	ble	1252c <__assert_fail@plt+0x16c0>
   124e0:	mov	r2, #7
   124e4:	movw	r1, #24208	; 0x5e90
   124e8:	movt	r1, #1
   124ec:	sub	r0, r5, #6
   124f0:	bl	10e48 <strncmp@plt>
   124f4:	cmp	r0, #0
   124f8:	bne	1252c <__assert_fail@plt+0x16c0>
   124fc:	mov	r2, #3
   12500:	movw	r1, #24216	; 0x5e98
   12504:	movt	r1, #1
   12508:	mov	r0, r6
   1250c:	bl	10e48 <strncmp@plt>
   12510:	cmp	r0, #0
   12514:	movne	r4, r6
   12518:	bne	1252c <__assert_fail@plt+0x16c0>
   1251c:	add	r4, r5, #4
   12520:	movw	r3, #28968	; 0x7128
   12524:	movt	r3, #2
   12528:	str	r4, [r3]
   1252c:	movw	r3, #29032	; 0x7168
   12530:	movt	r3, #2
   12534:	str	r4, [r3]
   12538:	movw	r3, #28972	; 0x712c
   1253c:	movt	r3, #2
   12540:	str	r4, [r3]
   12544:	ldrd	r4, [sp]
   12548:	ldr	r6, [sp, #8]
   1254c:	add	sp, sp, #12
   12550:	pop	{pc}		; (ldr pc, [sp], #4)
   12554:	movw	r3, #28984	; 0x7138
   12558:	movt	r3, #2
   1255c:	ldr	r3, [r3]
   12560:	mov	r2, #55	; 0x37
   12564:	mov	r1, #1
   12568:	movw	r0, #24152	; 0x5e58
   1256c:	movt	r0, #1
   12570:	bl	10ce0 <fwrite@plt>
   12574:	bl	10e54 <abort@plt>
   12578:	mov	r2, #0
   1257c:	mov	r3, #0
   12580:	strd	r2, [r0]
   12584:	strd	r2, [r0, #8]
   12588:	strd	r2, [r0, #16]
   1258c:	strd	r2, [r0, #24]
   12590:	strd	r2, [r0, #32]
   12594:	strd	r2, [r0, #40]	; 0x28
   12598:	cmp	r1, #10
   1259c:	beq	125a8 <__assert_fail@plt+0x173c>
   125a0:	str	r1, [r0]
   125a4:	bx	lr
   125a8:	str	r4, [sp, #-8]!
   125ac:	str	lr, [sp, #4]
   125b0:	bl	10e54 <abort@plt>
   125b4:	strd	r4, [sp, #-16]!
   125b8:	str	r6, [sp, #8]
   125bc:	str	lr, [sp, #12]
   125c0:	mov	r5, r0
   125c4:	mov	r6, r1
   125c8:	mov	r2, #5
   125cc:	mov	r1, r0
   125d0:	mov	r0, #0
   125d4:	bl	10ca4 <dcgettext@plt>
   125d8:	mov	r4, r0
   125dc:	cmp	r5, r0
   125e0:	beq	125f8 <__assert_fail@plt+0x178c>
   125e4:	mov	r0, r4
   125e8:	ldrd	r4, [sp]
   125ec:	ldr	r6, [sp, #8]
   125f0:	add	sp, sp, #12
   125f4:	pop	{pc}		; (ldr pc, [sp], #4)
   125f8:	bl	15754 <__assert_fail@plt+0x48e8>
   125fc:	ldrb	r3, [r0]
   12600:	bic	r3, r3, #32
   12604:	cmp	r3, #85	; 0x55
   12608:	bne	1268c <__assert_fail@plt+0x1820>
   1260c:	ldrb	r3, [r0, #1]
   12610:	bic	r3, r3, #32
   12614:	cmp	r3, #84	; 0x54
   12618:	bne	12650 <__assert_fail@plt+0x17e4>
   1261c:	ldrb	r3, [r0, #2]
   12620:	bic	r3, r3, #32
   12624:	cmp	r3, #70	; 0x46
   12628:	bne	12650 <__assert_fail@plt+0x17e4>
   1262c:	ldrb	r3, [r0, #3]
   12630:	cmp	r3, #45	; 0x2d
   12634:	bne	12650 <__assert_fail@plt+0x17e4>
   12638:	ldrb	r3, [r0, #4]
   1263c:	cmp	r3, #56	; 0x38
   12640:	bne	12650 <__assert_fail@plt+0x17e4>
   12644:	ldrb	r3, [r0, #5]
   12648:	cmp	r3, #0
   1264c:	beq	1266c <__assert_fail@plt+0x1800>
   12650:	movw	r4, #24304	; 0x5ef0
   12654:	movt	r4, #1
   12658:	movw	r3, #24324	; 0x5f04
   1265c:	movt	r3, #1
   12660:	cmp	r6, #9
   12664:	movne	r4, r3
   12668:	b	125e4 <__assert_fail@plt+0x1778>
   1266c:	ldrb	r2, [r4]
   12670:	movw	r4, #24320	; 0x5f00
   12674:	movt	r4, #1
   12678:	movw	r3, #24308	; 0x5ef4
   1267c:	movt	r3, #1
   12680:	cmp	r2, #96	; 0x60
   12684:	movne	r4, r3
   12688:	b	125e4 <__assert_fail@plt+0x1778>
   1268c:	cmp	r3, #71	; 0x47
   12690:	bne	12650 <__assert_fail@plt+0x17e4>
   12694:	ldrb	r3, [r0, #1]
   12698:	bic	r3, r3, #32
   1269c:	cmp	r3, #66	; 0x42
   126a0:	bne	12650 <__assert_fail@plt+0x17e4>
   126a4:	ldrb	r3, [r0, #2]
   126a8:	cmp	r3, #49	; 0x31
   126ac:	bne	12650 <__assert_fail@plt+0x17e4>
   126b0:	ldrb	r3, [r0, #3]
   126b4:	cmp	r3, #56	; 0x38
   126b8:	bne	12650 <__assert_fail@plt+0x17e4>
   126bc:	ldrb	r3, [r0, #4]
   126c0:	cmp	r3, #48	; 0x30
   126c4:	bne	12650 <__assert_fail@plt+0x17e4>
   126c8:	ldrb	r3, [r0, #5]
   126cc:	cmp	r3, #51	; 0x33
   126d0:	bne	12650 <__assert_fail@plt+0x17e4>
   126d4:	ldrb	r3, [r0, #6]
   126d8:	cmp	r3, #48	; 0x30
   126dc:	bne	12650 <__assert_fail@plt+0x17e4>
   126e0:	ldrb	r3, [r0, #7]
   126e4:	cmp	r3, #0
   126e8:	bne	12650 <__assert_fail@plt+0x17e4>
   126ec:	ldrb	r2, [r4]
   126f0:	movw	r4, #24316	; 0x5efc
   126f4:	movt	r4, #1
   126f8:	movw	r3, #24312	; 0x5ef8
   126fc:	movt	r3, #1
   12700:	cmp	r2, #96	; 0x60
   12704:	movne	r4, r3
   12708:	b	125e4 <__assert_fail@plt+0x1778>
   1270c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12710:	strd	r6, [sp, #8]
   12714:	strd	r8, [sp, #16]
   12718:	strd	sl, [sp, #24]
   1271c:	str	lr, [sp, #32]
   12720:	sub	sp, sp, #116	; 0x74
   12724:	str	r0, [sp, #64]	; 0x40
   12728:	mov	r8, r1
   1272c:	str	r2, [sp, #48]	; 0x30
   12730:	str	r3, [sp, #24]
   12734:	ldr	r7, [sp, #152]	; 0x98
   12738:	bl	10cf8 <__ctype_get_mb_cur_max@plt>
   1273c:	str	r0, [sp, #76]	; 0x4c
   12740:	ldr	r3, [sp, #156]	; 0x9c
   12744:	ubfx	r3, r3, #1, #1
   12748:	str	r3, [sp, #32]
   1274c:	mov	r3, #1
   12750:	str	r3, [sp, #40]	; 0x28
   12754:	mov	r3, #0
   12758:	str	r3, [sp, #68]	; 0x44
   1275c:	str	r3, [sp, #36]	; 0x24
   12760:	str	r3, [sp, #28]
   12764:	str	r3, [sp, #52]	; 0x34
   12768:	str	r3, [sp, #60]	; 0x3c
   1276c:	str	r3, [sp, #72]	; 0x48
   12770:	movw	r3, #24328	; 0x5f08
   12774:	movt	r3, #1
   12778:	str	r3, [sp, #80]	; 0x50
   1277c:	mov	r9, r8
   12780:	mov	sl, r7
   12784:	cmp	sl, #10
   12788:	ldrls	pc, [pc, sl, lsl #2]
   1278c:	b	12950 <__assert_fail@plt+0x1ae4>
   12790:	strdeq	r2, [r1], -r0
   12794:	andeq	r2, r1, r4, asr #15
   12798:	andeq	r2, r1, r8, lsr #18
   1279c:			; <UNDEFINED> instruction: 0x000127bc
   127a0:	ldrdeq	r2, [r1], -ip
   127a4:	andeq	r2, r1, r0, lsl #16
   127a8:	andeq	r3, r1, ip, asr #23
   127ac:	andeq	r2, r1, r4, asr r9
   127b0:	andeq	r2, r1, ip, lsr r8
   127b4:	andeq	r2, r1, ip, lsr r8
   127b8:	andeq	r2, r1, ip, lsr r8
   127bc:	mov	r3, #1
   127c0:	str	r3, [sp, #28]
   127c4:	mov	r3, #1
   127c8:	str	r3, [sp, #32]
   127cc:	str	r3, [sp, #52]	; 0x34
   127d0:	movw	r3, #24324	; 0x5f04
   127d4:	movt	r3, #1
   127d8:	str	r3, [sp, #60]	; 0x3c
   127dc:	mov	fp, #0
   127e0:	mov	sl, #2
   127e4:	mov	r6, #0
   127e8:	ldr	r8, [sp, #64]	; 0x40
   127ec:	b	13064 <__assert_fail@plt+0x21f8>
   127f0:	mov	fp, sl
   127f4:	mov	r3, #0
   127f8:	str	r3, [sp, #32]
   127fc:	b	127e4 <__assert_fail@plt+0x1978>
   12800:	ldr	r3, [sp, #32]
   12804:	cmp	r3, #0
   12808:	bne	12968 <__assert_fail@plt+0x1afc>
   1280c:	cmp	r9, #0
   12810:	beq	1298c <__assert_fail@plt+0x1b20>
   12814:	mov	r3, #34	; 0x22
   12818:	ldr	r2, [sp, #64]	; 0x40
   1281c:	strb	r3, [r2]
   12820:	mov	fp, #1
   12824:	str	fp, [sp, #28]
   12828:	str	fp, [sp, #52]	; 0x34
   1282c:	movw	r3, #24304	; 0x5ef0
   12830:	movt	r3, #1
   12834:	str	r3, [sp, #60]	; 0x3c
   12838:	b	127e4 <__assert_fail@plt+0x1978>
   1283c:	cmp	sl, #10
   12840:	bne	12874 <__assert_fail@plt+0x1a08>
   12844:	ldr	r3, [sp, #32]
   12848:	cmp	r3, #0
   1284c:	movne	fp, #0
   12850:	beq	1289c <__assert_fail@plt+0x1a30>
   12854:	ldr	r0, [sp, #168]	; 0xa8
   12858:	bl	10da0 <strlen@plt>
   1285c:	str	r0, [sp, #52]	; 0x34
   12860:	ldr	r3, [sp, #168]	; 0xa8
   12864:	str	r3, [sp, #60]	; 0x3c
   12868:	mov	r3, #1
   1286c:	str	r3, [sp, #28]
   12870:	b	127e4 <__assert_fail@plt+0x1978>
   12874:	mov	r1, sl
   12878:	ldr	r0, [sp, #80]	; 0x50
   1287c:	bl	125b4 <__assert_fail@plt+0x1748>
   12880:	str	r0, [sp, #164]	; 0xa4
   12884:	mov	r1, sl
   12888:	movw	r0, #24324	; 0x5f04
   1288c:	movt	r0, #1
   12890:	bl	125b4 <__assert_fail@plt+0x1748>
   12894:	str	r0, [sp, #168]	; 0xa8
   12898:	b	12844 <__assert_fail@plt+0x19d8>
   1289c:	ldr	r3, [sp, #164]	; 0xa4
   128a0:	ldrb	r3, [r3]
   128a4:	cmp	r3, #0
   128a8:	beq	128d4 <__assert_fail@plt+0x1a68>
   128ac:	ldr	r2, [sp, #164]	; 0xa4
   128b0:	mov	fp, #0
   128b4:	ldr	r1, [sp, #64]	; 0x40
   128b8:	cmp	r9, fp
   128bc:	strbhi	r3, [r1, fp]
   128c0:	add	fp, fp, #1
   128c4:	ldrb	r3, [r2, #1]!
   128c8:	cmp	r3, #0
   128cc:	bne	128b8 <__assert_fail@plt+0x1a4c>
   128d0:	b	12854 <__assert_fail@plt+0x19e8>
   128d4:	mov	fp, #0
   128d8:	b	12854 <__assert_fail@plt+0x19e8>
   128dc:	ldr	r3, [sp, #32]
   128e0:	cmp	r3, #0
   128e4:	bne	127c4 <__assert_fail@plt+0x1958>
   128e8:	mov	r3, #1
   128ec:	str	r3, [sp, #28]
   128f0:	cmp	r9, #0
   128f4:	beq	129a8 <__assert_fail@plt+0x1b3c>
   128f8:	mov	r3, #39	; 0x27
   128fc:	ldr	r2, [sp, #64]	; 0x40
   12900:	strb	r3, [r2]
   12904:	mov	r3, #0
   12908:	str	r3, [sp, #32]
   1290c:	mov	fp, #1
   12910:	str	fp, [sp, #52]	; 0x34
   12914:	movw	r3, #24324	; 0x5f04
   12918:	movt	r3, #1
   1291c:	str	r3, [sp, #60]	; 0x3c
   12920:	mov	sl, #2
   12924:	b	127e4 <__assert_fail@plt+0x1978>
   12928:	ldr	r3, [sp, #32]
   1292c:	cmp	r3, #0
   12930:	beq	128f0 <__assert_fail@plt+0x1a84>
   12934:	mov	r3, #1
   12938:	str	r3, [sp, #52]	; 0x34
   1293c:	movw	r3, #24324	; 0x5f04
   12940:	movt	r3, #1
   12944:	str	r3, [sp, #60]	; 0x3c
   12948:	mov	fp, #0
   1294c:	b	127e4 <__assert_fail@plt+0x1978>
   12950:	bl	10e54 <abort@plt>
   12954:	mov	fp, #0
   12958:	str	fp, [sp, #32]
   1295c:	mov	r3, #1
   12960:	str	r3, [sp, #28]
   12964:	b	127e4 <__assert_fail@plt+0x1978>
   12968:	ldr	r3, [sp, #32]
   1296c:	str	r3, [sp, #28]
   12970:	mov	r3, #1
   12974:	str	r3, [sp, #52]	; 0x34
   12978:	movw	r3, #24304	; 0x5ef0
   1297c:	movt	r3, #1
   12980:	str	r3, [sp, #60]	; 0x3c
   12984:	mov	fp, #0
   12988:	b	127e4 <__assert_fail@plt+0x1978>
   1298c:	mov	fp, #1
   12990:	str	fp, [sp, #28]
   12994:	str	fp, [sp, #52]	; 0x34
   12998:	movw	r3, #24304	; 0x5ef0
   1299c:	movt	r3, #1
   129a0:	str	r3, [sp, #60]	; 0x3c
   129a4:	b	127e4 <__assert_fail@plt+0x1978>
   129a8:	mov	r3, #0
   129ac:	str	r3, [sp, #32]
   129b0:	mov	fp, #1
   129b4:	str	fp, [sp, #52]	; 0x34
   129b8:	movw	r3, #24324	; 0x5f04
   129bc:	movt	r3, #1
   129c0:	str	r3, [sp, #60]	; 0x3c
   129c4:	mov	sl, #2
   129c8:	b	127e4 <__assert_fail@plt+0x1978>
   129cc:	mov	r3, r2
   129d0:	add	r4, r6, r2
   129d4:	ldr	r2, [sp, #24]
   129d8:	cmp	r3, #1
   129dc:	movls	r3, #0
   129e0:	movhi	r3, #1
   129e4:	cmn	r2, #1
   129e8:	movne	r3, #0
   129ec:	cmp	r3, #0
   129f0:	beq	12a00 <__assert_fail@plt+0x1b94>
   129f4:	ldr	r0, [sp, #48]	; 0x30
   129f8:	bl	10da0 <strlen@plt>
   129fc:	str	r0, [sp, #24]
   12a00:	ldr	r3, [sp, #24]
   12a04:	cmp	r4, r3
   12a08:	bhi	13bf4 <__assert_fail@plt+0x2d88>
   12a0c:	ldr	r3, [sp, #48]	; 0x30
   12a10:	add	r4, r3, r6
   12a14:	ldr	r2, [sp, #52]	; 0x34
   12a18:	ldr	r1, [sp, #60]	; 0x3c
   12a1c:	mov	r0, r4
   12a20:	bl	10c8c <memcmp@plt>
   12a24:	cmp	r0, #0
   12a28:	bne	13bf4 <__assert_fail@plt+0x2d88>
   12a2c:	ldr	r3, [sp, #32]
   12a30:	cmp	r3, #0
   12a34:	bne	12c44 <__assert_fail@plt+0x1dd8>
   12a38:	ldrb	r4, [r4]
   12a3c:	cmp	r4, #126	; 0x7e
   12a40:	ldrls	pc, [pc, r4, lsl #2]
   12a44:	b	134f8 <__assert_fail@plt+0x268c>
   12a48:	andeq	r2, r1, r8, lsl #25
   12a4c:	strdeq	r3, [r1], -r8
   12a50:	strdeq	r3, [r1], -r8
   12a54:	strdeq	r3, [r1], -r8
   12a58:	strdeq	r3, [r1], -r8
   12a5c:	strdeq	r3, [r1], -r8
   12a60:	strdeq	r3, [r1], -r8
   12a64:	andeq	r3, r1, r0, lsr #7
   12a68:	andeq	r2, r1, r4, lsr #30
   12a6c:	andeq	r3, r1, r8, asr #5
   12a70:	andeq	r3, r1, r4, ror r3
   12a74:	ldrdeq	r3, [r1], -ip
   12a78:	andeq	r2, r1, r8, lsr pc
   12a7c:	andeq	r2, r1, ip, asr #30
   12a80:	strdeq	r3, [r1], -r8
   12a84:	strdeq	r3, [r1], -r8
   12a88:	strdeq	r3, [r1], -r8
   12a8c:	strdeq	r3, [r1], -r8
   12a90:	strdeq	r3, [r1], -r8
   12a94:	strdeq	r3, [r1], -r8
   12a98:	strdeq	r3, [r1], -r8
   12a9c:	strdeq	r3, [r1], -r8
   12aa0:	strdeq	r3, [r1], -r8
   12aa4:	strdeq	r3, [r1], -r8
   12aa8:	strdeq	r3, [r1], -r8
   12aac:	strdeq	r3, [r1], -r8
   12ab0:	strdeq	r3, [r1], -r8
   12ab4:	strdeq	r3, [r1], -r8
   12ab8:	strdeq	r3, [r1], -r8
   12abc:	strdeq	r3, [r1], -r8
   12ac0:	strdeq	r3, [r1], -r8
   12ac4:	strdeq	r3, [r1], -r8
   12ac8:	andeq	r3, r1, r4, lsl r4
   12acc:	andeq	r3, r1, r8, lsr r4
   12ad0:	andeq	r3, r1, r8, lsr r4
   12ad4:	ldrdeq	r3, [r1], -r0
   12ad8:	andeq	r3, r1, r8, lsr r4
   12adc:	andeq	r3, r1, r8, asr r9
   12ae0:	andeq	r3, r1, r8, lsr r4
   12ae4:	andeq	r3, r1, r8, asr r4
   12ae8:	andeq	r3, r1, r8, lsr r4
   12aec:	andeq	r3, r1, r8, lsr r4
   12af0:	andeq	r3, r1, r8, lsr r4
   12af4:	andeq	r3, r1, r8, asr r9
   12af8:	andeq	r3, r1, r8, asr r9
   12afc:	andeq	r3, r1, r8, asr r9
   12b00:	andeq	r3, r1, r8, asr r9
   12b04:	andeq	r3, r1, r8, asr r9
   12b08:	andeq	r3, r1, r8, asr r9
   12b0c:	andeq	r3, r1, r8, asr r9
   12b10:	andeq	r3, r1, r8, asr r9
   12b14:	andeq	r3, r1, r8, asr r9
   12b18:	andeq	r3, r1, r8, asr r9
   12b1c:	andeq	r3, r1, r8, asr r9
   12b20:	andeq	r3, r1, r8, asr r9
   12b24:	andeq	r3, r1, r8, asr r9
   12b28:	andeq	r3, r1, r8, asr r9
   12b2c:	andeq	r3, r1, r8, asr r9
   12b30:	andeq	r3, r1, r8, asr r9
   12b34:	andeq	r3, r1, r8, lsr r4
   12b38:	andeq	r3, r1, r8, lsr r4
   12b3c:	andeq	r3, r1, r8, lsr r4
   12b40:	andeq	r3, r1, r8, lsr r4
   12b44:			; <UNDEFINED> instruction: 0x00012db8
   12b48:	strdeq	r3, [r1], -r8
   12b4c:	andeq	r3, r1, r8, asr r9
   12b50:	andeq	r3, r1, r8, asr r9
   12b54:	andeq	r3, r1, r8, asr r9
   12b58:	andeq	r3, r1, r8, asr r9
   12b5c:	andeq	r3, r1, r8, asr r9
   12b60:	andeq	r3, r1, r8, asr r9
   12b64:	andeq	r3, r1, r8, asr r9
   12b68:	andeq	r3, r1, r8, asr r9
   12b6c:	andeq	r3, r1, r8, asr r9
   12b70:	andeq	r3, r1, r8, asr r9
   12b74:	andeq	r3, r1, r8, asr r9
   12b78:	andeq	r3, r1, r8, asr r9
   12b7c:	andeq	r3, r1, r8, asr r9
   12b80:	andeq	r3, r1, r8, asr r9
   12b84:	andeq	r3, r1, r8, asr r9
   12b88:	andeq	r3, r1, r8, asr r9
   12b8c:	andeq	r3, r1, r8, asr r9
   12b90:	andeq	r3, r1, r8, asr r9
   12b94:	andeq	r3, r1, r8, asr r9
   12b98:	andeq	r3, r1, r8, asr r9
   12b9c:	andeq	r3, r1, r8, asr r9
   12ba0:	andeq	r3, r1, r8, asr r9
   12ba4:	andeq	r3, r1, r8, asr r9
   12ba8:	andeq	r3, r1, r8, asr r9
   12bac:	andeq	r3, r1, r8, asr r9
   12bb0:	andeq	r3, r1, r8, asr r9
   12bb4:	andeq	r3, r1, r8, lsr r4
   12bb8:	strdeq	r3, [r1], -r0
   12bbc:	andeq	r3, r1, r8, asr r9
   12bc0:	andeq	r3, r1, r8, lsr r4
   12bc4:	andeq	r3, r1, r8, asr r9
   12bc8:	andeq	r3, r1, r8, lsr r4
   12bcc:	andeq	r3, r1, r8, asr r9
   12bd0:	andeq	r3, r1, r8, asr r9
   12bd4:	andeq	r3, r1, r8, asr r9
   12bd8:	andeq	r3, r1, r8, asr r9
   12bdc:	andeq	r3, r1, r8, asr r9
   12be0:	andeq	r3, r1, r8, asr r9
   12be4:	andeq	r3, r1, r8, asr r9
   12be8:	andeq	r3, r1, r8, asr r9
   12bec:	andeq	r3, r1, r8, asr r9
   12bf0:	andeq	r3, r1, r8, asr r9
   12bf4:	andeq	r3, r1, r8, asr r9
   12bf8:	andeq	r3, r1, r8, asr r9
   12bfc:	andeq	r3, r1, r8, asr r9
   12c00:	andeq	r3, r1, r8, asr r9
   12c04:	andeq	r3, r1, r8, asr r9
   12c08:	andeq	r3, r1, r8, asr r9
   12c0c:	andeq	r3, r1, r8, asr r9
   12c10:	andeq	r3, r1, r8, asr r9
   12c14:	andeq	r3, r1, r8, asr r9
   12c18:	andeq	r3, r1, r8, asr r9
   12c1c:	andeq	r3, r1, r8, asr r9
   12c20:	andeq	r3, r1, r8, asr r9
   12c24:	andeq	r3, r1, r8, asr r9
   12c28:	andeq	r3, r1, r8, asr r9
   12c2c:	andeq	r3, r1, r8, asr r9
   12c30:	andeq	r3, r1, r8, asr r9
   12c34:			; <UNDEFINED> instruction: 0x000133b0
   12c38:	andeq	r3, r1, r8, lsr r4
   12c3c:			; <UNDEFINED> instruction: 0x000133b0
   12c40:	ldrdeq	r3, [r1], -r0
   12c44:	mov	r8, r9
   12c48:	mov	r7, sl
   12c4c:	b	13b4c <__assert_fail@plt+0x2ce0>
   12c50:	ldr	r3, [sp, #28]
   12c54:	cmp	r3, #0
   12c58:	bne	12c78 <__assert_fail@plt+0x1e0c>
   12c5c:	ldr	r3, [sp, #156]	; 0x9c
   12c60:	tst	r3, #1
   12c64:	bne	13060 <__assert_fail@plt+0x21f4>
   12c68:	ldr	r3, [sp, #28]
   12c6c:	str	r3, [sp, #44]	; 0x2c
   12c70:	mov	r5, r3
   12c74:	b	12f80 <__assert_fail@plt+0x2114>
   12c78:	ldr	r3, [sp, #32]
   12c7c:	cmp	r3, #0
   12c80:	bne	13afc <__assert_fail@plt+0x2c90>
   12c84:	str	r3, [sp, #44]	; 0x2c
   12c88:	ldr	r3, [sp, #36]	; 0x24
   12c8c:	eor	r3, r3, #1
   12c90:	cmp	sl, #2
   12c94:	movne	r3, #0
   12c98:	andeq	r3, r3, #1
   12c9c:	cmp	r3, #0
   12ca0:	beq	12cf8 <__assert_fail@plt+0x1e8c>
   12ca4:	cmp	r9, fp
   12ca8:	movhi	r2, #39	; 0x27
   12cac:	strbhi	r2, [r8, fp]
   12cb0:	add	r2, fp, #1
   12cb4:	cmp	r9, r2
   12cb8:	movhi	r1, #36	; 0x24
   12cbc:	strbhi	r1, [r8, r2]
   12cc0:	add	r2, fp, #2
   12cc4:	cmp	r9, r2
   12cc8:	movhi	r1, #39	; 0x27
   12ccc:	strbhi	r1, [r8, r2]
   12cd0:	add	r2, fp, #3
   12cd4:	cmp	r9, r2
   12cd8:	bls	13bb8 <__assert_fail@plt+0x2d4c>
   12cdc:	mov	r1, #92	; 0x5c
   12ce0:	strb	r1, [r8, r2]
   12ce4:	add	fp, fp, #4
   12ce8:	str	r3, [sp, #36]	; 0x24
   12cec:	mov	r5, #0
   12cf0:	mov	r4, #48	; 0x30
   12cf4:	b	12fcc <__assert_fail@plt+0x2160>
   12cf8:	cmp	r9, fp
   12cfc:	bhi	12d24 <__assert_fail@plt+0x1eb8>
   12d00:	add	r1, fp, #1
   12d04:	ldr	r2, [sp, #56]	; 0x38
   12d08:	cmp	r2, #0
   12d0c:	bne	12d4c <__assert_fail@plt+0x1ee0>
   12d10:	mov	r3, r5
   12d14:	ldr	r5, [sp, #56]	; 0x38
   12d18:	mov	fp, r1
   12d1c:	mov	r4, #48	; 0x30
   12d20:	b	12f80 <__assert_fail@plt+0x2114>
   12d24:	mov	r2, #92	; 0x5c
   12d28:	strb	r2, [r8, fp]
   12d2c:	add	r1, fp, #1
   12d30:	ldr	r2, [sp, #56]	; 0x38
   12d34:	cmp	r2, #0
   12d38:	moveq	r3, r5
   12d3c:	moveq	r5, r2
   12d40:	moveq	fp, r1
   12d44:	moveq	r4, #48	; 0x30
   12d48:	beq	12fcc <__assert_fail@plt+0x2160>
   12d4c:	add	r2, r6, #1
   12d50:	ldr	r0, [sp, #24]
   12d54:	cmp	r2, r0
   12d58:	bcs	12d74 <__assert_fail@plt+0x1f08>
   12d5c:	ldr	r0, [sp, #48]	; 0x30
   12d60:	ldrb	r2, [r0, r2]
   12d64:	sub	r2, r2, #48	; 0x30
   12d68:	uxtb	r2, r2
   12d6c:	cmp	r2, #9
   12d70:	bls	12d8c <__assert_fail@plt+0x1f20>
   12d74:	mov	r2, r3
   12d78:	mov	r3, r5
   12d7c:	mov	r5, r2
   12d80:	mov	fp, r1
   12d84:	mov	r4, #48	; 0x30
   12d88:	b	12fa4 <__assert_fail@plt+0x2138>
   12d8c:	cmp	r9, r1
   12d90:	movhi	r2, #48	; 0x30
   12d94:	strbhi	r2, [r8, r1]
   12d98:	add	r2, fp, #2
   12d9c:	cmp	r9, r2
   12da0:	movhi	r1, #48	; 0x30
   12da4:	strbhi	r1, [r8, r2]
   12da8:	add	r1, fp, #3
   12dac:	b	12d74 <__assert_fail@plt+0x1f08>
   12db0:	mov	r3, #0
   12db4:	str	r3, [sp, #44]	; 0x2c
   12db8:	cmp	sl, #2
   12dbc:	beq	12dd8 <__assert_fail@plt+0x1f6c>
   12dc0:	cmp	sl, #5
   12dc4:	beq	12df0 <__assert_fail@plt+0x1f84>
   12dc8:	mov	r5, #0
   12dcc:	mov	r3, r5
   12dd0:	mov	r4, #63	; 0x3f
   12dd4:	b	12f80 <__assert_fail@plt+0x2114>
   12dd8:	ldr	r3, [sp, #32]
   12ddc:	cmp	r3, #0
   12de0:	bne	13b08 <__assert_fail@plt+0x2c9c>
   12de4:	mov	r5, r3
   12de8:	mov	r4, #63	; 0x3f
   12dec:	b	134e8 <__assert_fail@plt+0x267c>
   12df0:	ldr	r3, [sp, #156]	; 0x9c
   12df4:	tst	r3, #4
   12df8:	beq	13920 <__assert_fail@plt+0x2ab4>
   12dfc:	add	r2, r6, #2
   12e00:	ldr	r3, [sp, #24]
   12e04:	cmp	r2, r3
   12e08:	bcs	13930 <__assert_fail@plt+0x2ac4>
   12e0c:	ldr	r3, [sp, #48]	; 0x30
   12e10:	add	r3, r3, r6
   12e14:	ldrb	r4, [r3, #1]
   12e18:	cmp	r4, #63	; 0x3f
   12e1c:	movne	r5, #0
   12e20:	movne	r3, r5
   12e24:	movne	r4, #63	; 0x3f
   12e28:	bne	12f80 <__assert_fail@plt+0x2114>
   12e2c:	ldr	r3, [sp, #48]	; 0x30
   12e30:	ldrb	r1, [r3, r2]
   12e34:	sub	r3, r1, #33	; 0x21
   12e38:	cmp	r3, #29
   12e3c:	ldrls	pc, [pc, r3, lsl #2]
   12e40:	b	13940 <__assert_fail@plt+0x2ad4>
   12e44:			; <UNDEFINED> instruction: 0x00012ebc
   12e48:	andeq	r3, r1, r0, asr #18
   12e4c:	andeq	r3, r1, r0, asr #18
   12e50:	andeq	r3, r1, r0, asr #18
   12e54:	andeq	r3, r1, r0, asr #18
   12e58:	andeq	r3, r1, r0, asr #18
   12e5c:			; <UNDEFINED> instruction: 0x00012ebc
   12e60:			; <UNDEFINED> instruction: 0x00012ebc
   12e64:			; <UNDEFINED> instruction: 0x00012ebc
   12e68:	andeq	r3, r1, r0, asr #18
   12e6c:	andeq	r3, r1, r0, asr #18
   12e70:	andeq	r3, r1, r0, asr #18
   12e74:			; <UNDEFINED> instruction: 0x00012ebc
   12e78:	andeq	r3, r1, r0, asr #18
   12e7c:			; <UNDEFINED> instruction: 0x00012ebc
   12e80:	andeq	r3, r1, r0, asr #18
   12e84:	andeq	r3, r1, r0, asr #18
   12e88:	andeq	r3, r1, r0, asr #18
   12e8c:	andeq	r3, r1, r0, asr #18
   12e90:	andeq	r3, r1, r0, asr #18
   12e94:	andeq	r3, r1, r0, asr #18
   12e98:	andeq	r3, r1, r0, asr #18
   12e9c:	andeq	r3, r1, r0, asr #18
   12ea0:	andeq	r3, r1, r0, asr #18
   12ea4:	andeq	r3, r1, r0, asr #18
   12ea8:	andeq	r3, r1, r0, asr #18
   12eac:	andeq	r3, r1, r0, asr #18
   12eb0:			; <UNDEFINED> instruction: 0x00012ebc
   12eb4:			; <UNDEFINED> instruction: 0x00012ebc
   12eb8:			; <UNDEFINED> instruction: 0x00012ebc
   12ebc:	ldr	r3, [sp, #32]
   12ec0:	cmp	r3, #0
   12ec4:	bne	13bac <__assert_fail@plt+0x2d40>
   12ec8:	cmp	r9, fp
   12ecc:	movhi	r3, #63	; 0x3f
   12ed0:	strbhi	r3, [r8, fp]
   12ed4:	add	r3, fp, #1
   12ed8:	cmp	r9, r3
   12edc:	movhi	r0, #34	; 0x22
   12ee0:	strbhi	r0, [r8, r3]
   12ee4:	add	r3, fp, #2
   12ee8:	cmp	r9, r3
   12eec:	movhi	r0, #34	; 0x22
   12ef0:	strbhi	r0, [r8, r3]
   12ef4:	add	r3, fp, #3
   12ef8:	cmp	r9, r3
   12efc:	movhi	r0, #63	; 0x3f
   12f00:	strbhi	r0, [r8, r3]
   12f04:	add	fp, fp, #4
   12f08:	ldr	r3, [sp, #32]
   12f0c:	mov	r5, r3
   12f10:	mov	r4, r1
   12f14:	mov	r6, r2
   12f18:	b	12f80 <__assert_fail@plt+0x2114>
   12f1c:	mov	r3, #0
   12f20:	str	r3, [sp, #44]	; 0x2c
   12f24:	mov	r4, #8
   12f28:	mov	r3, #98	; 0x62
   12f2c:	b	12f6c <__assert_fail@plt+0x2100>
   12f30:	mov	r3, #0
   12f34:	str	r3, [sp, #44]	; 0x2c
   12f38:	mov	r4, #12
   12f3c:	mov	r3, #102	; 0x66
   12f40:	b	12f6c <__assert_fail@plt+0x2100>
   12f44:	mov	r3, #0
   12f48:	str	r3, [sp, #44]	; 0x2c
   12f4c:	mov	r4, #13
   12f50:	mov	r3, #114	; 0x72
   12f54:	ldr	r2, [sp, #32]
   12f58:	cmp	sl, #2
   12f5c:	movne	r2, #0
   12f60:	andeq	r2, r2, #1
   12f64:	cmp	r2, #0
   12f68:	bne	1338c <__assert_fail@plt+0x2520>
   12f6c:	ldr	r2, [sp, #28]
   12f70:	cmp	r2, #0
   12f74:	bne	13974 <__assert_fail@plt+0x2b08>
   12f78:	mov	r5, r2
   12f7c:	mov	r3, r2
   12f80:	ldr	r2, [sp, #28]
   12f84:	eor	r2, r2, #1
   12f88:	cmp	sl, #2
   12f8c:	orreq	r2, r2, #1
   12f90:	eor	r2, r2, #1
   12f94:	ldr	r1, [sp, #32]
   12f98:	orr	r2, r1, r2
   12f9c:	tst	r2, #255	; 0xff
   12fa0:	beq	12fcc <__assert_fail@plt+0x2160>
   12fa4:	ldr	r2, [sp, #160]	; 0xa0
   12fa8:	cmp	r2, #0
   12fac:	beq	12fcc <__assert_fail@plt+0x2160>
   12fb0:	ubfx	r1, r4, #5, #8
   12fb4:	and	r2, r4, #31
   12fb8:	ldr	r0, [sp, #160]	; 0xa0
   12fbc:	ldr	r1, [r0, r1, lsl #2]
   12fc0:	lsr	r2, r1, r2
   12fc4:	tst	r2, #1
   12fc8:	bne	12fd8 <__assert_fail@plt+0x216c>
   12fcc:	ldr	r2, [sp, #44]	; 0x2c
   12fd0:	cmp	r2, #0
   12fd4:	beq	1332c <__assert_fail@plt+0x24c0>
   12fd8:	ldr	r3, [sp, #32]
   12fdc:	cmp	r3, #0
   12fe0:	bne	13b2c <__assert_fail@plt+0x2cc0>
   12fe4:	ldr	r3, [sp, #36]	; 0x24
   12fe8:	eor	r3, r3, #1
   12fec:	cmp	sl, #2
   12ff0:	movne	r3, #0
   12ff4:	andeq	r3, r3, #1
   12ff8:	cmp	r3, #0
   12ffc:	beq	13034 <__assert_fail@plt+0x21c8>
   13000:	cmp	r9, fp
   13004:	movhi	r2, #39	; 0x27
   13008:	strbhi	r2, [r8, fp]
   1300c:	add	r2, fp, #1
   13010:	cmp	r9, r2
   13014:	movhi	r1, #36	; 0x24
   13018:	strbhi	r1, [r8, r2]
   1301c:	add	r2, fp, #2
   13020:	cmp	r9, r2
   13024:	movhi	r1, #39	; 0x27
   13028:	strbhi	r1, [r8, r2]
   1302c:	add	fp, fp, #3
   13030:	str	r3, [sp, #36]	; 0x24
   13034:	cmp	r9, fp
   13038:	movhi	r3, #92	; 0x5c
   1303c:	strbhi	r3, [r8, fp]
   13040:	add	fp, fp, #1
   13044:	cmp	fp, r9
   13048:	strbcc	r4, [r8, fp]
   1304c:	add	fp, fp, #1
   13050:	cmp	r5, #0
   13054:	ldr	r3, [sp, #40]	; 0x28
   13058:	moveq	r3, r5
   1305c:	str	r3, [sp, #40]	; 0x28
   13060:	add	r6, r6, #1
   13064:	ldr	r3, [sp, #24]
   13068:	cmn	r3, #1
   1306c:	beq	1399c <__assert_fail@plt+0x2b30>
   13070:	ldr	r3, [sp, #24]
   13074:	subs	r5, r3, r6
   13078:	movne	r5, #1
   1307c:	cmp	r5, #0
   13080:	beq	139b0 <__assert_fail@plt+0x2b44>
   13084:	ldr	r3, [sp, #28]
   13088:	cmp	sl, #2
   1308c:	moveq	r3, #0
   13090:	andne	r3, r3, #1
   13094:	str	r3, [sp, #56]	; 0x38
   13098:	ldr	r2, [sp, #52]	; 0x34
   1309c:	adds	r7, r2, #0
   130a0:	movne	r7, #1
   130a4:	ands	r3, r3, r7
   130a8:	str	r3, [sp, #44]	; 0x2c
   130ac:	bne	129cc <__assert_fail@plt+0x1b60>
   130b0:	ldr	r3, [sp, #48]	; 0x30
   130b4:	ldrb	r4, [r3, r6]
   130b8:	cmp	r4, #126	; 0x7e
   130bc:	ldrls	pc, [pc, r4, lsl #2]
   130c0:	b	134f8 <__assert_fail@plt+0x268c>
   130c4:	andeq	r2, r1, r0, asr ip
   130c8:	strdeq	r3, [r1], -r8
   130cc:	strdeq	r3, [r1], -r8
   130d0:	strdeq	r3, [r1], -r8
   130d4:	strdeq	r3, [r1], -r8
   130d8:	strdeq	r3, [r1], -r8
   130dc:	strdeq	r3, [r1], -r8
   130e0:	muleq	r1, r8, r3
   130e4:	andeq	r2, r1, r4, lsr #30
   130e8:	andeq	r3, r1, r8, asr #5
   130ec:	andeq	r3, r1, ip, ror #6
   130f0:	ldrdeq	r3, [r1], -ip
   130f4:	andeq	r2, r1, r8, lsr pc
   130f8:	andeq	r2, r1, ip, asr #30
   130fc:	strdeq	r3, [r1], -r8
   13100:	strdeq	r3, [r1], -r8
   13104:	strdeq	r3, [r1], -r8
   13108:	strdeq	r3, [r1], -r8
   1310c:	strdeq	r3, [r1], -r8
   13110:	strdeq	r3, [r1], -r8
   13114:	strdeq	r3, [r1], -r8
   13118:	strdeq	r3, [r1], -r8
   1311c:	strdeq	r3, [r1], -r8
   13120:	strdeq	r3, [r1], -r8
   13124:	strdeq	r3, [r1], -r8
   13128:	strdeq	r3, [r1], -r8
   1312c:	strdeq	r3, [r1], -r8
   13130:	strdeq	r3, [r1], -r8
   13134:	strdeq	r3, [r1], -r8
   13138:	strdeq	r3, [r1], -r8
   1313c:	strdeq	r3, [r1], -r8
   13140:	strdeq	r3, [r1], -r8
   13144:	andeq	r3, r1, r4, lsl r4
   13148:	andeq	r3, r1, r0, lsl r4
   1314c:	andeq	r3, r1, r0, lsl r4
   13150:	ldrdeq	r3, [r1], -r0
   13154:	andeq	r3, r1, r0, lsl r4
   13158:	andeq	r3, r1, r8, lsl r9
   1315c:	andeq	r3, r1, r0, lsl r4
   13160:	andeq	r3, r1, r8, asr r4
   13164:	andeq	r3, r1, r0, lsl r4
   13168:	andeq	r3, r1, r0, lsl r4
   1316c:	andeq	r3, r1, r0, lsl r4
   13170:	andeq	r3, r1, r8, lsl r9
   13174:	andeq	r3, r1, r8, lsl r9
   13178:	andeq	r3, r1, r8, lsl r9
   1317c:	andeq	r3, r1, r8, lsl r9
   13180:	andeq	r3, r1, r8, lsl r9
   13184:	andeq	r3, r1, r8, lsl r9
   13188:	andeq	r3, r1, r8, lsl r9
   1318c:	andeq	r3, r1, r8, lsl r9
   13190:	andeq	r3, r1, r8, lsl r9
   13194:	andeq	r3, r1, r8, lsl r9
   13198:	andeq	r3, r1, r8, lsl r9
   1319c:	andeq	r3, r1, r8, lsl r9
   131a0:	andeq	r3, r1, r8, lsl r9
   131a4:	andeq	r3, r1, r8, lsl r9
   131a8:	andeq	r3, r1, r8, lsl r9
   131ac:	andeq	r3, r1, r8, lsl r9
   131b0:	andeq	r3, r1, r0, lsl r4
   131b4:	andeq	r3, r1, r0, lsl r4
   131b8:	andeq	r3, r1, r0, lsl r4
   131bc:	andeq	r3, r1, r0, lsl r4
   131c0:			; <UNDEFINED> instruction: 0x00012db8
   131c4:	strdeq	r3, [r1], -r8
   131c8:	andeq	r3, r1, r8, lsl r9
   131cc:	andeq	r3, r1, r8, lsl r9
   131d0:	andeq	r3, r1, r8, lsl r9
   131d4:	andeq	r3, r1, r8, lsl r9
   131d8:	andeq	r3, r1, r8, lsl r9
   131dc:	andeq	r3, r1, r8, lsl r9
   131e0:	andeq	r3, r1, r8, lsl r9
   131e4:	andeq	r3, r1, r8, lsl r9
   131e8:	andeq	r3, r1, r8, lsl r9
   131ec:	andeq	r3, r1, r8, lsl r9
   131f0:	andeq	r3, r1, r8, lsl r9
   131f4:	andeq	r3, r1, r8, lsl r9
   131f8:	andeq	r3, r1, r8, lsl r9
   131fc:	andeq	r3, r1, r8, lsl r9
   13200:	andeq	r3, r1, r8, lsl r9
   13204:	andeq	r3, r1, r8, lsl r9
   13208:	andeq	r3, r1, r8, lsl r9
   1320c:	andeq	r3, r1, r8, lsl r9
   13210:	andeq	r3, r1, r8, lsl r9
   13214:	andeq	r3, r1, r8, lsl r9
   13218:	andeq	r3, r1, r8, lsl r9
   1321c:	andeq	r3, r1, r8, lsl r9
   13220:	andeq	r3, r1, r8, lsl r9
   13224:	andeq	r3, r1, r8, lsl r9
   13228:	andeq	r3, r1, r8, lsl r9
   1322c:	andeq	r3, r1, r8, lsl r9
   13230:	andeq	r3, r1, r0, lsl r4
   13234:	strdeq	r3, [r1], -r0
   13238:	andeq	r3, r1, r8, lsl r9
   1323c:	andeq	r3, r1, r0, lsl r4
   13240:	andeq	r3, r1, r8, lsl r9
   13244:	andeq	r3, r1, r0, lsl r4
   13248:	andeq	r3, r1, r8, lsl r9
   1324c:	andeq	r3, r1, r8, lsl r9
   13250:	andeq	r3, r1, r8, lsl r9
   13254:	andeq	r3, r1, r8, lsl r9
   13258:	andeq	r3, r1, r8, lsl r9
   1325c:	andeq	r3, r1, r8, lsl r9
   13260:	andeq	r3, r1, r8, lsl r9
   13264:	andeq	r3, r1, r8, lsl r9
   13268:	andeq	r3, r1, r8, lsl r9
   1326c:	andeq	r3, r1, r8, lsl r9
   13270:	andeq	r3, r1, r8, lsl r9
   13274:	andeq	r3, r1, r8, lsl r9
   13278:	andeq	r3, r1, r8, lsl r9
   1327c:	andeq	r3, r1, r8, lsl r9
   13280:	andeq	r3, r1, r8, lsl r9
   13284:	andeq	r3, r1, r8, lsl r9
   13288:	andeq	r3, r1, r8, lsl r9
   1328c:	andeq	r3, r1, r8, lsl r9
   13290:	andeq	r3, r1, r8, lsl r9
   13294:	andeq	r3, r1, r8, lsl r9
   13298:	andeq	r3, r1, r8, lsl r9
   1329c:	andeq	r3, r1, r8, lsl r9
   132a0:	andeq	r3, r1, r8, lsl r9
   132a4:	andeq	r3, r1, r8, lsl r9
   132a8:	andeq	r3, r1, r8, lsl r9
   132ac:	andeq	r3, r1, r8, lsl r9
   132b0:			; <UNDEFINED> instruction: 0x000133b0
   132b4:	andeq	r3, r1, r0, lsl r4
   132b8:			; <UNDEFINED> instruction: 0x000133b0
   132bc:	ldrdeq	r3, [r1], -r0
   132c0:	mov	r3, #0
   132c4:	str	r3, [sp, #44]	; 0x2c
   132c8:	mov	r4, #9
   132cc:	mov	r3, #116	; 0x74
   132d0:	b	12f54 <__assert_fail@plt+0x20e8>
   132d4:	mov	r3, #0
   132d8:	str	r3, [sp, #44]	; 0x2c
   132dc:	mov	r4, #11
   132e0:	mov	r3, #118	; 0x76
   132e4:	b	12f6c <__assert_fail@plt+0x2100>
   132e8:	mov	r3, #0
   132ec:	str	r3, [sp, #44]	; 0x2c
   132f0:	cmp	sl, #2
   132f4:	beq	13318 <__assert_fail@plt+0x24ac>
   132f8:	ldr	r3, [sp, #28]
   132fc:	ldr	r2, [sp, #32]
   13300:	and	r3, r3, r2
   13304:	tst	r7, r3
   13308:	bne	1398c <__assert_fail@plt+0x2b20>
   1330c:	mov	r4, #92	; 0x5c
   13310:	mov	r3, r4
   13314:	b	12f6c <__assert_fail@plt+0x2100>
   13318:	ldr	r3, [sp, #32]
   1331c:	cmp	r3, #0
   13320:	bne	13b14 <__assert_fail@plt+0x2ca8>
   13324:	mov	r5, r3
   13328:	mov	r4, #92	; 0x5c
   1332c:	eor	r3, r3, #1
   13330:	ldr	r2, [sp, #36]	; 0x24
   13334:	and	r3, r3, r2
   13338:	tst	r3, #255	; 0xff
   1333c:	beq	13044 <__assert_fail@plt+0x21d8>
   13340:	cmp	r9, fp
   13344:	movhi	r3, #39	; 0x27
   13348:	strbhi	r3, [r8, fp]
   1334c:	add	r3, fp, #1
   13350:	cmp	r9, r3
   13354:	movhi	r2, #39	; 0x27
   13358:	strbhi	r2, [r8, r3]
   1335c:	add	fp, fp, #2
   13360:	mov	r3, #0
   13364:	str	r3, [sp, #36]	; 0x24
   13368:	b	13044 <__assert_fail@plt+0x21d8>
   1336c:	mov	r3, #110	; 0x6e
   13370:	b	12f54 <__assert_fail@plt+0x20e8>
   13374:	mov	r3, #110	; 0x6e
   13378:	b	12f54 <__assert_fail@plt+0x20e8>
   1337c:	mov	r3, #0
   13380:	str	r3, [sp, #44]	; 0x2c
   13384:	mov	r3, #110	; 0x6e
   13388:	b	12f54 <__assert_fail@plt+0x20e8>
   1338c:	mov	r8, r9
   13390:	mov	r7, #2
   13394:	b	13b34 <__assert_fail@plt+0x2cc8>
   13398:	mov	r3, #97	; 0x61
   1339c:	b	12f6c <__assert_fail@plt+0x2100>
   133a0:	mov	r3, #97	; 0x61
   133a4:	b	12f6c <__assert_fail@plt+0x2100>
   133a8:	mov	r3, #0
   133ac:	str	r3, [sp, #44]	; 0x2c
   133b0:	ldr	r3, [sp, #24]
   133b4:	cmn	r3, #1
   133b8:	beq	133e4 <__assert_fail@plt+0x2578>
   133bc:	ldr	r3, [sp, #24]
   133c0:	subs	r3, r3, #1
   133c4:	movne	r3, #1
   133c8:	cmp	r3, #0
   133cc:	bne	1394c <__assert_fail@plt+0x2ae0>
   133d0:	cmp	r6, #0
   133d4:	beq	13414 <__assert_fail@plt+0x25a8>
   133d8:	mov	r5, #0
   133dc:	mov	r3, r5
   133e0:	b	12f80 <__assert_fail@plt+0x2114>
   133e4:	ldr	r3, [sp, #48]	; 0x30
   133e8:	ldrb	r3, [r3, #1]
   133ec:	adds	r3, r3, #0
   133f0:	movne	r3, #1
   133f4:	b	133c8 <__assert_fail@plt+0x255c>
   133f8:	mov	r3, #0
   133fc:	str	r3, [sp, #44]	; 0x2c
   13400:	b	133d0 <__assert_fail@plt+0x2564>
   13404:	mov	r3, #0
   13408:	str	r3, [sp, #44]	; 0x2c
   1340c:	b	13414 <__assert_fail@plt+0x25a8>
   13410:	ldr	r5, [sp, #44]	; 0x2c
   13414:	ldr	r3, [sp, #32]
   13418:	cmp	sl, #2
   1341c:	movne	r3, #0
   13420:	andeq	r3, r3, #1
   13424:	cmp	r3, #0
   13428:	beq	12f80 <__assert_fail@plt+0x2114>
   1342c:	mov	r8, r9
   13430:	mov	r7, #2
   13434:	b	13b34 <__assert_fail@plt+0x2cc8>
   13438:	ldr	r5, [sp, #32]
   1343c:	b	13414 <__assert_fail@plt+0x25a8>
   13440:	mov	r3, #0
   13444:	str	r3, [sp, #44]	; 0x2c
   13448:	mov	r5, r3
   1344c:	b	13414 <__assert_fail@plt+0x25a8>
   13450:	mov	r3, #0
   13454:	str	r3, [sp, #44]	; 0x2c
   13458:	cmp	sl, #2
   1345c:	strne	r5, [sp, #68]	; 0x44
   13460:	movne	r3, #0
   13464:	movne	r4, #39	; 0x27
   13468:	bne	12f80 <__assert_fail@plt+0x2114>
   1346c:	ldr	r3, [sp, #32]
   13470:	cmp	r3, #0
   13474:	bne	13b20 <__assert_fail@plt+0x2cb4>
   13478:	ldr	r3, [sp, #72]	; 0x48
   1347c:	clz	r3, r3
   13480:	lsr	r3, r3, #5
   13484:	cmp	r9, #0
   13488:	moveq	r3, #0
   1348c:	cmp	r3, #0
   13490:	movne	r3, #0
   13494:	bne	134bc <__assert_fail@plt+0x2650>
   13498:	cmp	r9, fp
   1349c:	movhi	r3, #39	; 0x27
   134a0:	strbhi	r3, [r8, fp]
   134a4:	add	r3, fp, #1
   134a8:	cmp	r9, r3
   134ac:	movhi	r2, #92	; 0x5c
   134b0:	strbhi	r2, [r8, r3]
   134b4:	mov	r3, r9
   134b8:	ldr	r9, [sp, #72]	; 0x48
   134bc:	add	r2, fp, #2
   134c0:	cmp	r2, r3
   134c4:	movcc	r1, #39	; 0x27
   134c8:	strbcc	r1, [r8, r2]
   134cc:	add	fp, fp, #3
   134d0:	str	r5, [sp, #68]	; 0x44
   134d4:	ldr	r2, [sp, #32]
   134d8:	str	r2, [sp, #36]	; 0x24
   134dc:	str	r9, [sp, #72]	; 0x48
   134e0:	mov	r9, r3
   134e4:	mov	r4, #39	; 0x27
   134e8:	mov	r3, #0
   134ec:	b	12fcc <__assert_fail@plt+0x2160>
   134f0:	mov	r3, #0
   134f4:	str	r3, [sp, #44]	; 0x2c
   134f8:	ldr	r7, [sp, #76]	; 0x4c
   134fc:	cmp	r7, #1
   13500:	bne	13538 <__assert_fail@plt+0x26cc>
   13504:	bl	10d88 <__ctype_b_loc@plt>
   13508:	ldr	r2, [r0]
   1350c:	lsl	r3, r4, #1
   13510:	ldrh	r5, [r2, r3]
   13514:	ubfx	r5, r5, #14, #1
   13518:	mov	ip, r7
   1351c:	eor	r3, r5, #1
   13520:	ldr	r2, [sp, #28]
   13524:	and	r3, r3, r2
   13528:	ands	r3, r3, #255	; 0xff
   1352c:	beq	12f80 <__assert_fail@plt+0x2114>
   13530:	mov	r5, #0
   13534:	b	13794 <__assert_fail@plt+0x2928>
   13538:	mov	r2, #0
   1353c:	mov	r3, #0
   13540:	strd	r2, [sp, #104]	; 0x68
   13544:	ldr	r3, [sp, #24]
   13548:	cmn	r3, #1
   1354c:	beq	13570 <__assert_fail@plt+0x2704>
   13550:	mov	r3, #0
   13554:	str	r4, [sp, #88]	; 0x58
   13558:	str	fp, [sp, #92]	; 0x5c
   1355c:	str	r8, [sp, #56]	; 0x38
   13560:	mov	r8, r3
   13564:	str	r9, [sp, #84]	; 0x54
   13568:	ldr	r9, [sp, #48]	; 0x30
   1356c:	b	136bc <__assert_fail@plt+0x2850>
   13570:	ldr	r0, [sp, #48]	; 0x30
   13574:	bl	10da0 <strlen@plt>
   13578:	str	r0, [sp, #24]
   1357c:	b	13550 <__assert_fail@plt+0x26e4>
   13580:	mov	r1, fp
   13584:	ldr	r4, [sp, #88]	; 0x58
   13588:	mov	r2, r8
   1358c:	mov	ip, r8
   13590:	ldr	fp, [sp, #92]	; 0x5c
   13594:	ldr	r8, [sp, #56]	; 0x38
   13598:	ldr	r9, [sp, #84]	; 0x54
   1359c:	ldr	r0, [sp, #24]
   135a0:	cmp	r7, r0
   135a4:	bcs	1375c <__assert_fail@plt+0x28f0>
   135a8:	ldrb	r3, [r1]
   135ac:	cmp	r3, #0
   135b0:	beq	13764 <__assert_fail@plt+0x28f8>
   135b4:	mov	r3, r1
   135b8:	add	r2, r2, #1
   135bc:	add	r1, r6, r2
   135c0:	cmp	r0, r1
   135c4:	bls	1376c <__assert_fail@plt+0x2900>
   135c8:	ldrb	r1, [r3, #1]!
   135cc:	cmp	r1, #0
   135d0:	bne	135b8 <__assert_fail@plt+0x274c>
   135d4:	mov	ip, r2
   135d8:	mov	r5, #0
   135dc:	b	1378c <__assert_fail@plt+0x2920>
   135e0:	ldr	r3, [sp, #56]	; 0x38
   135e4:	str	r3, [sp, #64]	; 0x40
   135e8:	ldr	r8, [sp, #84]	; 0x54
   135ec:	mov	r7, #2
   135f0:	b	13b34 <__assert_fail@plt+0x2cc8>
   135f4:	cmp	r2, r7
   135f8:	beq	13698 <__assert_fail@plt+0x282c>
   135fc:	ldrb	r3, [r2], #1
   13600:	sub	r3, r3, #91	; 0x5b
   13604:	cmp	r3, #33	; 0x21
   13608:	ldrls	pc, [pc, r3, lsl #2]
   1360c:	b	135f4 <__assert_fail@plt+0x2788>
   13610:	andeq	r3, r1, r0, ror #11
   13614:	andeq	r3, r1, r0, ror #11
   13618:	strdeq	r3, [r1], -r4
   1361c:	andeq	r3, r1, r0, ror #11
   13620:	strdeq	r3, [r1], -r4
   13624:	andeq	r3, r1, r0, ror #11
   13628:	strdeq	r3, [r1], -r4
   1362c:	strdeq	r3, [r1], -r4
   13630:	strdeq	r3, [r1], -r4
   13634:	strdeq	r3, [r1], -r4
   13638:	strdeq	r3, [r1], -r4
   1363c:	strdeq	r3, [r1], -r4
   13640:	strdeq	r3, [r1], -r4
   13644:	strdeq	r3, [r1], -r4
   13648:	strdeq	r3, [r1], -r4
   1364c:	strdeq	r3, [r1], -r4
   13650:	strdeq	r3, [r1], -r4
   13654:	strdeq	r3, [r1], -r4
   13658:	strdeq	r3, [r1], -r4
   1365c:	strdeq	r3, [r1], -r4
   13660:	strdeq	r3, [r1], -r4
   13664:	strdeq	r3, [r1], -r4
   13668:	strdeq	r3, [r1], -r4
   1366c:	strdeq	r3, [r1], -r4
   13670:	strdeq	r3, [r1], -r4
   13674:	strdeq	r3, [r1], -r4
   13678:	strdeq	r3, [r1], -r4
   1367c:	strdeq	r3, [r1], -r4
   13680:	strdeq	r3, [r1], -r4
   13684:	strdeq	r3, [r1], -r4
   13688:	strdeq	r3, [r1], -r4
   1368c:	strdeq	r3, [r1], -r4
   13690:	strdeq	r3, [r1], -r4
   13694:	andeq	r3, r1, r0, ror #11
   13698:	ldr	r0, [sp, #100]	; 0x64
   1369c:	bl	10cd4 <iswprint@plt>
   136a0:	cmp	r0, #0
   136a4:	moveq	r5, #0
   136a8:	add	r8, r8, r4
   136ac:	add	r0, sp, #104	; 0x68
   136b0:	bl	10c80 <mbsinit@plt>
   136b4:	cmp	r0, #0
   136b8:	bne	13728 <__assert_fail@plt+0x28bc>
   136bc:	add	r7, r6, r8
   136c0:	add	fp, r9, r7
   136c4:	add	r3, sp, #104	; 0x68
   136c8:	ldr	r2, [sp, #24]
   136cc:	sub	r2, r2, r7
   136d0:	mov	r1, fp
   136d4:	add	r0, sp, #100	; 0x64
   136d8:	bl	15798 <__assert_fail@plt+0x492c>
   136dc:	subs	r4, r0, #0
   136e0:	beq	13778 <__assert_fail@plt+0x290c>
   136e4:	cmn	r4, #1
   136e8:	beq	13740 <__assert_fail@plt+0x28d4>
   136ec:	cmn	r4, #2
   136f0:	beq	13580 <__assert_fail@plt+0x2714>
   136f4:	ldr	r3, [sp, #32]
   136f8:	cmp	sl, #2
   136fc:	movne	r3, #0
   13700:	andeq	r3, r3, #1
   13704:	cmp	r3, #0
   13708:	beq	13698 <__assert_fail@plt+0x282c>
   1370c:	cmp	r4, #1
   13710:	bls	13698 <__assert_fail@plt+0x282c>
   13714:	add	r2, r7, #1
   13718:	add	r2, r9, r2
   1371c:	add	r3, r9, r4
   13720:	add	r7, r3, r7
   13724:	b	135fc <__assert_fail@plt+0x2790>
   13728:	ldr	r4, [sp, #88]	; 0x58
   1372c:	mov	ip, r8
   13730:	ldr	fp, [sp, #92]	; 0x5c
   13734:	ldr	r8, [sp, #56]	; 0x38
   13738:	ldr	r9, [sp, #84]	; 0x54
   1373c:	b	1378c <__assert_fail@plt+0x2920>
   13740:	ldr	r4, [sp, #88]	; 0x58
   13744:	mov	ip, r8
   13748:	ldr	fp, [sp, #92]	; 0x5c
   1374c:	ldr	r8, [sp, #56]	; 0x38
   13750:	ldr	r9, [sp, #84]	; 0x54
   13754:	mov	r5, #0
   13758:	b	1378c <__assert_fail@plt+0x2920>
   1375c:	mov	r5, #0
   13760:	b	1378c <__assert_fail@plt+0x2920>
   13764:	mov	r5, #0
   13768:	b	1378c <__assert_fail@plt+0x2920>
   1376c:	mov	ip, r2
   13770:	mov	r5, #0
   13774:	b	1378c <__assert_fail@plt+0x2920>
   13778:	ldr	r4, [sp, #88]	; 0x58
   1377c:	mov	ip, r8
   13780:	ldr	fp, [sp, #92]	; 0x5c
   13784:	ldr	r8, [sp, #56]	; 0x38
   13788:	ldr	r9, [sp, #84]	; 0x54
   1378c:	cmp	ip, #1
   13790:	bls	1351c <__assert_fail@plt+0x26b0>
   13794:	add	lr, r6, ip
   13798:	ldr	r3, [sp, #48]	; 0x30
   1379c:	add	r1, r3, r6
   137a0:	mov	r3, #0
   137a4:	eor	r0, r5, #1
   137a8:	ldr	r2, [sp, #28]
   137ac:	and	r0, r0, r2
   137b0:	uxtb	r0, r0
   137b4:	str	r0, [sp, #56]	; 0x38
   137b8:	mov	r7, #92	; 0x5c
   137bc:	ldr	ip, [sp, #36]	; 0x24
   137c0:	str	r5, [sp, #84]	; 0x54
   137c4:	ldr	r2, [sp, #44]	; 0x2c
   137c8:	b	13838 <__assert_fail@plt+0x29cc>
   137cc:	cmp	r2, #0
   137d0:	beq	137e0 <__assert_fail@plt+0x2974>
   137d4:	cmp	r9, fp
   137d8:	strbhi	r7, [r8, fp]
   137dc:	add	fp, fp, #1
   137e0:	add	r5, r6, #1
   137e4:	cmp	r5, lr
   137e8:	bcs	138f4 <__assert_fail@plt+0x2a88>
   137ec:	eor	r2, r3, #1
   137f0:	and	r2, r2, ip
   137f4:	ands	r2, r2, #255	; 0xff
   137f8:	beq	13910 <__assert_fail@plt+0x2aa4>
   137fc:	cmp	r9, fp
   13800:	movhi	r2, #39	; 0x27
   13804:	strbhi	r2, [r8, fp]
   13808:	add	r2, fp, #1
   1380c:	cmp	r9, r2
   13810:	movhi	ip, #39	; 0x27
   13814:	strbhi	ip, [r8, r2]
   13818:	add	fp, fp, #2
   1381c:	ldr	ip, [sp, #56]	; 0x38
   13820:	mov	r2, ip
   13824:	mov	r6, r5
   13828:	cmp	r9, fp
   1382c:	strbhi	r4, [r8, fp]
   13830:	add	fp, fp, #1
   13834:	ldrb	r4, [r1, #1]!
   13838:	cmp	r0, #0
   1383c:	beq	137cc <__assert_fail@plt+0x2960>
   13840:	ldr	r3, [sp, #32]
   13844:	cmp	r3, #0
   13848:	bne	13adc <__assert_fail@plt+0x2c70>
   1384c:	eor	r3, ip, #1
   13850:	cmp	sl, #2
   13854:	movne	r3, #0
   13858:	andeq	r3, r3, #1
   1385c:	cmp	r3, #0
   13860:	beq	13898 <__assert_fail@plt+0x2a2c>
   13864:	cmp	r9, fp
   13868:	movhi	ip, #39	; 0x27
   1386c:	strbhi	ip, [r8, fp]
   13870:	add	ip, fp, #1
   13874:	cmp	r9, ip
   13878:	movhi	r5, #36	; 0x24
   1387c:	strbhi	r5, [r8, ip]
   13880:	add	ip, fp, #2
   13884:	cmp	r9, ip
   13888:	movhi	r5, #39	; 0x27
   1388c:	strbhi	r5, [r8, ip]
   13890:	add	fp, fp, #3
   13894:	mov	ip, r3
   13898:	cmp	r9, fp
   1389c:	strbhi	r7, [r8, fp]
   138a0:	add	r3, fp, #1
   138a4:	cmp	r9, r3
   138a8:	bls	138b8 <__assert_fail@plt+0x2a4c>
   138ac:	lsr	r5, r4, #6
   138b0:	add	r5, r5, #48	; 0x30
   138b4:	strb	r5, [r8, r3]
   138b8:	add	r3, fp, #2
   138bc:	cmp	r9, r3
   138c0:	bls	138d0 <__assert_fail@plt+0x2a64>
   138c4:	ubfx	r5, r4, #3, #3
   138c8:	add	r5, r5, #48	; 0x30
   138cc:	strb	r5, [r8, r3]
   138d0:	add	fp, fp, #3
   138d4:	and	r4, r4, #7
   138d8:	add	r4, r4, #48	; 0x30
   138dc:	add	r5, r6, #1
   138e0:	cmp	r5, lr
   138e4:	bcs	13900 <__assert_fail@plt+0x2a94>
   138e8:	ldr	r3, [sp, #56]	; 0x38
   138ec:	mov	r6, r5
   138f0:	b	13828 <__assert_fail@plt+0x29bc>
   138f4:	str	ip, [sp, #36]	; 0x24
   138f8:	ldr	r5, [sp, #84]	; 0x54
   138fc:	b	1332c <__assert_fail@plt+0x24c0>
   13900:	str	ip, [sp, #36]	; 0x24
   13904:	ldr	r5, [sp, #84]	; 0x54
   13908:	mov	r3, r0
   1390c:	b	1332c <__assert_fail@plt+0x24c0>
   13910:	mov	r6, r5
   13914:	b	13828 <__assert_fail@plt+0x29bc>
   13918:	ldr	r3, [sp, #44]	; 0x2c
   1391c:	b	12f80 <__assert_fail@plt+0x2114>
   13920:	mov	r5, #0
   13924:	mov	r3, r5
   13928:	mov	r4, #63	; 0x3f
   1392c:	b	12f80 <__assert_fail@plt+0x2114>
   13930:	mov	r5, #0
   13934:	mov	r3, r5
   13938:	mov	r4, #63	; 0x3f
   1393c:	b	12f80 <__assert_fail@plt+0x2114>
   13940:	mov	r5, #0
   13944:	mov	r3, r5
   13948:	b	12f80 <__assert_fail@plt+0x2114>
   1394c:	mov	r5, #0
   13950:	mov	r3, r5
   13954:	b	12f80 <__assert_fail@plt+0x2114>
   13958:	ldr	r5, [sp, #44]	; 0x2c
   1395c:	ldr	r3, [sp, #32]
   13960:	b	12f80 <__assert_fail@plt+0x2114>
   13964:	ldr	r5, [sp, #44]	; 0x2c
   13968:	mov	r3, #0
   1396c:	str	r3, [sp, #44]	; 0x2c
   13970:	b	12f80 <__assert_fail@plt+0x2114>
   13974:	mov	r4, r3
   13978:	mov	r5, #0
   1397c:	b	12fd8 <__assert_fail@plt+0x216c>
   13980:	mov	r5, #0
   13984:	mov	r4, #97	; 0x61
   13988:	b	12fd8 <__assert_fail@plt+0x216c>
   1398c:	mov	r5, #0
   13990:	mov	r3, r5
   13994:	mov	r4, #92	; 0x5c
   13998:	b	1332c <__assert_fail@plt+0x24c0>
   1399c:	ldr	r3, [sp, #48]	; 0x30
   139a0:	ldrb	r5, [r3, r6]
   139a4:	adds	r5, r5, #0
   139a8:	movne	r5, #1
   139ac:	b	1307c <__assert_fail@plt+0x2210>
   139b0:	cmp	sl, #2
   139b4:	movne	r3, #0
   139b8:	moveq	r3, #1
   139bc:	ldr	r1, [sp, #32]
   139c0:	cmp	fp, #0
   139c4:	andeq	r2, r3, r1
   139c8:	movne	r2, #0
   139cc:	cmp	r2, #0
   139d0:	bne	13af0 <__assert_fail@plt+0x2c84>
   139d4:	eor	r2, r1, #1
   139d8:	uxtb	r2, r2
   139dc:	and	r3, r3, r2
   139e0:	ldr	r1, [sp, #68]	; 0x44
   139e4:	ands	r3, r1, r3
   139e8:	beq	13a7c <__assert_fail@plt+0x2c10>
   139ec:	ldr	r2, [sp, #40]	; 0x28
   139f0:	cmp	r2, #0
   139f4:	bne	13a2c <__assert_fail@plt+0x2bc0>
   139f8:	ldr	r2, [sp, #72]	; 0x48
   139fc:	adds	r2, r2, #0
   13a00:	movne	r2, #1
   13a04:	cmp	r9, #0
   13a08:	movne	r2, #0
   13a0c:	str	r2, [sp, #68]	; 0x44
   13a10:	mov	sl, #2
   13a14:	ldr	r1, [sp, #40]	; 0x28
   13a18:	str	r1, [sp, #32]
   13a1c:	cmp	r2, #0
   13a20:	beq	13a70 <__assert_fail@plt+0x2c04>
   13a24:	ldr	r9, [sp, #72]	; 0x48
   13a28:	b	12784 <__assert_fail@plt+0x1918>
   13a2c:	ldr	r3, [sp, #168]	; 0xa8
   13a30:	str	r3, [sp, #16]
   13a34:	ldr	r3, [sp, #164]	; 0xa4
   13a38:	str	r3, [sp, #12]
   13a3c:	ldr	r3, [sp, #160]	; 0xa0
   13a40:	str	r3, [sp, #8]
   13a44:	ldr	r3, [sp, #156]	; 0x9c
   13a48:	str	r3, [sp, #4]
   13a4c:	mov	r3, #5
   13a50:	str	r3, [sp]
   13a54:	ldr	r3, [sp, #24]
   13a58:	ldr	r2, [sp, #48]	; 0x30
   13a5c:	ldr	r1, [sp, #72]	; 0x48
   13a60:	ldr	r0, [sp, #64]	; 0x40
   13a64:	bl	1270c <__assert_fail@plt+0x18a0>
   13a68:	mov	fp, r0
   13a6c:	b	13b8c <__assert_fail@plt+0x2d20>
   13a70:	mov	r8, r9
   13a74:	mov	r2, r3
   13a78:	b	13a80 <__assert_fail@plt+0x2c14>
   13a7c:	mov	r8, r9
   13a80:	ldr	r3, [sp, #60]	; 0x3c
   13a84:	cmp	r3, #0
   13a88:	moveq	r2, #0
   13a8c:	andne	r2, r2, #1
   13a90:	cmp	r2, #0
   13a94:	beq	13ac4 <__assert_fail@plt+0x2c58>
   13a98:	mov	r2, r3
   13a9c:	ldrb	r3, [r3]
   13aa0:	cmp	r3, #0
   13aa4:	beq	13ac4 <__assert_fail@plt+0x2c58>
   13aa8:	ldr	r1, [sp, #64]	; 0x40
   13aac:	cmp	r8, fp
   13ab0:	strbhi	r3, [r1, fp]
   13ab4:	add	fp, fp, #1
   13ab8:	ldrb	r3, [r2, #1]!
   13abc:	cmp	r3, #0
   13ac0:	bne	13aac <__assert_fail@plt+0x2c40>
   13ac4:	cmp	r8, fp
   13ac8:	bls	13b8c <__assert_fail@plt+0x2d20>
   13acc:	mov	r3, #0
   13ad0:	ldr	r2, [sp, #64]	; 0x40
   13ad4:	strb	r3, [r2, fp]
   13ad8:	b	13b8c <__assert_fail@plt+0x2d20>
   13adc:	mov	r8, r9
   13ae0:	mov	r7, sl
   13ae4:	ldr	r3, [sp, #32]
   13ae8:	str	r3, [sp, #28]
   13aec:	b	13b34 <__assert_fail@plt+0x2cc8>
   13af0:	mov	r8, r9
   13af4:	mov	r7, #2
   13af8:	b	13b34 <__assert_fail@plt+0x2cc8>
   13afc:	mov	r8, r9
   13b00:	mov	r7, sl
   13b04:	b	13b34 <__assert_fail@plt+0x2cc8>
   13b08:	mov	r8, r9
   13b0c:	mov	r7, sl
   13b10:	b	13b34 <__assert_fail@plt+0x2cc8>
   13b14:	mov	r8, r9
   13b18:	mov	r7, sl
   13b1c:	b	13b34 <__assert_fail@plt+0x2cc8>
   13b20:	mov	r8, r9
   13b24:	mov	r7, sl
   13b28:	b	13b34 <__assert_fail@plt+0x2cc8>
   13b2c:	mov	r8, r9
   13b30:	mov	r7, sl
   13b34:	ldr	r3, [sp, #28]
   13b38:	cmp	r7, #2
   13b3c:	movne	r3, #0
   13b40:	andeq	r3, r3, #1
   13b44:	cmp	r3, #0
   13b48:	movne	r7, #4
   13b4c:	ldr	r3, [sp, #168]	; 0xa8
   13b50:	str	r3, [sp, #16]
   13b54:	ldr	r3, [sp, #164]	; 0xa4
   13b58:	str	r3, [sp, #12]
   13b5c:	mov	r3, #0
   13b60:	str	r3, [sp, #8]
   13b64:	ldr	r3, [sp, #156]	; 0x9c
   13b68:	bic	r3, r3, #2
   13b6c:	str	r3, [sp, #4]
   13b70:	str	r7, [sp]
   13b74:	ldr	r3, [sp, #24]
   13b78:	ldr	r2, [sp, #48]	; 0x30
   13b7c:	mov	r1, r8
   13b80:	ldr	r0, [sp, #64]	; 0x40
   13b84:	bl	1270c <__assert_fail@plt+0x18a0>
   13b88:	mov	fp, r0
   13b8c:	mov	r0, fp
   13b90:	add	sp, sp, #116	; 0x74
   13b94:	ldrd	r4, [sp]
   13b98:	ldrd	r6, [sp, #8]
   13b9c:	ldrd	r8, [sp, #16]
   13ba0:	ldrd	sl, [sp, #24]
   13ba4:	add	sp, sp, #32
   13ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bac:	mov	r8, r9
   13bb0:	mov	r7, sl
   13bb4:	b	13b4c <__assert_fail@plt+0x2ce0>
   13bb8:	add	fp, fp, #4
   13bbc:	str	r3, [sp, #36]	; 0x24
   13bc0:	mov	r5, #0
   13bc4:	mov	r4, #48	; 0x30
   13bc8:	b	12f80 <__assert_fail@plt+0x2114>
   13bcc:	mov	r3, #1
   13bd0:	str	r3, [sp, #32]
   13bd4:	str	r3, [sp, #28]
   13bd8:	str	r3, [sp, #52]	; 0x34
   13bdc:	movw	r3, #24304	; 0x5ef0
   13be0:	movt	r3, #1
   13be4:	str	r3, [sp, #60]	; 0x3c
   13be8:	mov	fp, #0
   13bec:	mov	sl, #5
   13bf0:	b	127e4 <__assert_fail@plt+0x1978>
   13bf4:	ldr	r3, [sp, #48]	; 0x30
   13bf8:	ldrb	r4, [r3, r6]
   13bfc:	cmp	r4, #126	; 0x7e
   13c00:	ldrls	pc, [pc, r4, lsl #2]
   13c04:	b	134f0 <__assert_fail@plt+0x2684>
   13c08:	andeq	r2, r1, r8, ror ip
   13c0c:	strdeq	r3, [r1], -r0
   13c10:	strdeq	r3, [r1], -r0
   13c14:	strdeq	r3, [r1], -r0
   13c18:	strdeq	r3, [r1], -r0
   13c1c:	strdeq	r3, [r1], -r0
   13c20:	strdeq	r3, [r1], -r0
   13c24:	andeq	r3, r1, r0, lsl #19
   13c28:	andeq	r2, r1, ip, lsl pc
   13c2c:	andeq	r3, r1, r0, asr #5
   13c30:	andeq	r3, r1, ip, ror r3
   13c34:	ldrdeq	r3, [r1], -r4
   13c38:	andeq	r2, r1, r0, lsr pc
   13c3c:	andeq	r2, r1, r4, asr #30
   13c40:	strdeq	r3, [r1], -r0
   13c44:	strdeq	r3, [r1], -r0
   13c48:	strdeq	r3, [r1], -r0
   13c4c:	strdeq	r3, [r1], -r0
   13c50:	strdeq	r3, [r1], -r0
   13c54:	strdeq	r3, [r1], -r0
   13c58:	strdeq	r3, [r1], -r0
   13c5c:	strdeq	r3, [r1], -r0
   13c60:	strdeq	r3, [r1], -r0
   13c64:	strdeq	r3, [r1], -r0
   13c68:	strdeq	r3, [r1], -r0
   13c6c:	strdeq	r3, [r1], -r0
   13c70:	strdeq	r3, [r1], -r0
   13c74:	strdeq	r3, [r1], -r0
   13c78:	strdeq	r3, [r1], -r0
   13c7c:	strdeq	r3, [r1], -r0
   13c80:	strdeq	r3, [r1], -r0
   13c84:	strdeq	r3, [r1], -r0
   13c88:	andeq	r3, r1, r4, lsl #8
   13c8c:	andeq	r3, r1, r0, asr #8
   13c90:	andeq	r3, r1, r0, asr #8
   13c94:	strdeq	r3, [r1], -r8
   13c98:	andeq	r3, r1, r0, asr #8
   13c9c:	andeq	r3, r1, r4, ror #18
   13ca0:	andeq	r3, r1, r0, asr #8
   13ca4:	andeq	r3, r1, r0, asr r4
   13ca8:	andeq	r3, r1, r0, asr #8
   13cac:	andeq	r3, r1, r0, asr #8
   13cb0:	andeq	r3, r1, r0, asr #8
   13cb4:	andeq	r3, r1, r4, ror #18
   13cb8:	andeq	r3, r1, r4, ror #18
   13cbc:	andeq	r3, r1, r4, ror #18
   13cc0:	andeq	r3, r1, r4, ror #18
   13cc4:	andeq	r3, r1, r4, ror #18
   13cc8:	andeq	r3, r1, r4, ror #18
   13ccc:	andeq	r3, r1, r4, ror #18
   13cd0:	andeq	r3, r1, r4, ror #18
   13cd4:	andeq	r3, r1, r4, ror #18
   13cd8:	andeq	r3, r1, r4, ror #18
   13cdc:	andeq	r3, r1, r4, ror #18
   13ce0:	andeq	r3, r1, r4, ror #18
   13ce4:	andeq	r3, r1, r4, ror #18
   13ce8:	andeq	r3, r1, r4, ror #18
   13cec:	andeq	r3, r1, r4, ror #18
   13cf0:	andeq	r3, r1, r4, ror #18
   13cf4:	andeq	r3, r1, r0, asr #8
   13cf8:	andeq	r3, r1, r0, asr #8
   13cfc:	andeq	r3, r1, r0, asr #8
   13d00:	andeq	r3, r1, r0, asr #8
   13d04:			; <UNDEFINED> instruction: 0x00012db0
   13d08:	strdeq	r3, [r1], -r0
   13d0c:	andeq	r3, r1, r4, ror #18
   13d10:	andeq	r3, r1, r4, ror #18
   13d14:	andeq	r3, r1, r4, ror #18
   13d18:	andeq	r3, r1, r4, ror #18
   13d1c:	andeq	r3, r1, r4, ror #18
   13d20:	andeq	r3, r1, r4, ror #18
   13d24:	andeq	r3, r1, r4, ror #18
   13d28:	andeq	r3, r1, r4, ror #18
   13d2c:	andeq	r3, r1, r4, ror #18
   13d30:	andeq	r3, r1, r4, ror #18
   13d34:	andeq	r3, r1, r4, ror #18
   13d38:	andeq	r3, r1, r4, ror #18
   13d3c:	andeq	r3, r1, r4, ror #18
   13d40:	andeq	r3, r1, r4, ror #18
   13d44:	andeq	r3, r1, r4, ror #18
   13d48:	andeq	r3, r1, r4, ror #18
   13d4c:	andeq	r3, r1, r4, ror #18
   13d50:	andeq	r3, r1, r4, ror #18
   13d54:	andeq	r3, r1, r4, ror #18
   13d58:	andeq	r3, r1, r4, ror #18
   13d5c:	andeq	r3, r1, r4, ror #18
   13d60:	andeq	r3, r1, r4, ror #18
   13d64:	andeq	r3, r1, r4, ror #18
   13d68:	andeq	r3, r1, r4, ror #18
   13d6c:	andeq	r3, r1, r4, ror #18
   13d70:	andeq	r3, r1, r4, ror #18
   13d74:	andeq	r3, r1, r0, asr #8
   13d78:	andeq	r3, r1, r8, ror #5
   13d7c:	andeq	r3, r1, r4, ror #18
   13d80:	andeq	r3, r1, r0, asr #8
   13d84:	andeq	r3, r1, r4, ror #18
   13d88:	andeq	r3, r1, r0, asr #8
   13d8c:	andeq	r3, r1, r4, ror #18
   13d90:	andeq	r3, r1, r4, ror #18
   13d94:	andeq	r3, r1, r4, ror #18
   13d98:	andeq	r3, r1, r4, ror #18
   13d9c:	andeq	r3, r1, r4, ror #18
   13da0:	andeq	r3, r1, r4, ror #18
   13da4:	andeq	r3, r1, r4, ror #18
   13da8:	andeq	r3, r1, r4, ror #18
   13dac:	andeq	r3, r1, r4, ror #18
   13db0:	andeq	r3, r1, r4, ror #18
   13db4:	andeq	r3, r1, r4, ror #18
   13db8:	andeq	r3, r1, r4, ror #18
   13dbc:	andeq	r3, r1, r4, ror #18
   13dc0:	andeq	r3, r1, r4, ror #18
   13dc4:	andeq	r3, r1, r4, ror #18
   13dc8:	andeq	r3, r1, r4, ror #18
   13dcc:	andeq	r3, r1, r4, ror #18
   13dd0:	andeq	r3, r1, r4, ror #18
   13dd4:	andeq	r3, r1, r4, ror #18
   13dd8:	andeq	r3, r1, r4, ror #18
   13ddc:	andeq	r3, r1, r4, ror #18
   13de0:	andeq	r3, r1, r4, ror #18
   13de4:	andeq	r3, r1, r4, ror #18
   13de8:	andeq	r3, r1, r4, ror #18
   13dec:	andeq	r3, r1, r4, ror #18
   13df0:	andeq	r3, r1, r4, ror #18
   13df4:	andeq	r3, r1, r8, lsr #7
   13df8:	andeq	r3, r1, r0, asr #8
   13dfc:	andeq	r3, r1, r8, lsr #7
   13e00:	strdeq	r3, [r1], -r8
   13e04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e08:	strd	r6, [sp, #8]
   13e0c:	strd	r8, [sp, #16]
   13e10:	strd	sl, [sp, #24]
   13e14:	str	lr, [sp, #32]
   13e18:	sub	sp, sp, #52	; 0x34
   13e1c:	mov	r5, r0
   13e20:	str	r1, [sp, #24]
   13e24:	str	r2, [sp, #28]
   13e28:	mov	r4, r3
   13e2c:	bl	10dac <__errno_location@plt>
   13e30:	str	r0, [sp, #32]
   13e34:	ldr	r3, [r0]
   13e38:	str	r3, [sp, #36]	; 0x24
   13e3c:	movw	r3, #28904	; 0x70e8
   13e40:	movt	r3, #2
   13e44:	ldr	r6, [r3]
   13e48:	cmn	r5, #-2147483647	; 0x80000001
   13e4c:	movne	r3, #0
   13e50:	moveq	r3, #1
   13e54:	orrs	r3, r3, r5, lsr #31
   13e58:	bne	13fbc <__assert_fail@plt+0x3150>
   13e5c:	movw	r3, #28904	; 0x70e8
   13e60:	movt	r3, #2
   13e64:	ldr	r2, [r3, #4]
   13e68:	cmp	r2, r5
   13e6c:	bgt	13edc <__assert_fail@plt+0x3070>
   13e70:	str	r2, [sp, #44]	; 0x2c
   13e74:	add	r3, r3, #8
   13e78:	cmp	r6, r3
   13e7c:	beq	13fc0 <__assert_fail@plt+0x3154>
   13e80:	sub	r2, r5, r2
   13e84:	mov	r3, #8
   13e88:	str	r3, [sp]
   13e8c:	mvn	r3, #-2147483648	; 0x80000000
   13e90:	add	r2, r2, #1
   13e94:	add	r1, sp, #44	; 0x2c
   13e98:	mov	r0, r6
   13e9c:	bl	15330 <__assert_fail@plt+0x44c4>
   13ea0:	mov	r6, r0
   13ea4:	movw	r3, #28904	; 0x70e8
   13ea8:	movt	r3, #2
   13eac:	str	r0, [r3]
   13eb0:	movw	r7, #28904	; 0x70e8
   13eb4:	movt	r7, #2
   13eb8:	ldr	r0, [r7, #4]
   13ebc:	ldr	r2, [sp, #44]	; 0x2c
   13ec0:	sub	r2, r2, r0
   13ec4:	lsl	r2, r2, #3
   13ec8:	mov	r1, #0
   13ecc:	add	r0, r6, r0, lsl #3
   13ed0:	bl	10dc4 <memset@plt>
   13ed4:	ldr	r3, [sp, #44]	; 0x2c
   13ed8:	str	r3, [r7, #4]
   13edc:	add	fp, r6, r5, lsl #3
   13ee0:	ldr	r8, [r6, r5, lsl #3]
   13ee4:	ldr	r7, [fp, #4]
   13ee8:	ldr	r3, [r4, #4]
   13eec:	orr	r9, r3, #1
   13ef0:	add	sl, r4, #8
   13ef4:	ldr	r3, [r4, #44]	; 0x2c
   13ef8:	str	r3, [sp, #16]
   13efc:	ldr	r3, [r4, #40]	; 0x28
   13f00:	str	r3, [sp, #12]
   13f04:	str	sl, [sp, #8]
   13f08:	str	r9, [sp, #4]
   13f0c:	ldr	r3, [r4]
   13f10:	str	r3, [sp]
   13f14:	ldr	r3, [sp, #28]
   13f18:	ldr	r2, [sp, #24]
   13f1c:	mov	r1, r8
   13f20:	mov	r0, r7
   13f24:	bl	1270c <__assert_fail@plt+0x18a0>
   13f28:	cmp	r8, r0
   13f2c:	bhi	13f90 <__assert_fail@plt+0x3124>
   13f30:	add	r8, r0, #1
   13f34:	str	r8, [r6, r5, lsl #3]
   13f38:	movw	r3, #29036	; 0x716c
   13f3c:	movt	r3, #2
   13f40:	cmp	r7, r3
   13f44:	beq	13f50 <__assert_fail@plt+0x30e4>
   13f48:	mov	r0, r7
   13f4c:	bl	11fd4 <__assert_fail@plt+0x1168>
   13f50:	mov	r0, r8
   13f54:	bl	1512c <__assert_fail@plt+0x42c0>
   13f58:	mov	r7, r0
   13f5c:	str	r0, [fp, #4]
   13f60:	ldr	r3, [r4, #44]	; 0x2c
   13f64:	str	r3, [sp, #16]
   13f68:	ldr	r3, [r4, #40]	; 0x28
   13f6c:	str	r3, [sp, #12]
   13f70:	str	sl, [sp, #8]
   13f74:	str	r9, [sp, #4]
   13f78:	ldr	r3, [r4]
   13f7c:	str	r3, [sp]
   13f80:	ldr	r3, [sp, #28]
   13f84:	ldr	r2, [sp, #24]
   13f88:	mov	r1, r8
   13f8c:	bl	1270c <__assert_fail@plt+0x18a0>
   13f90:	ldr	r3, [sp, #32]
   13f94:	ldr	r2, [sp, #36]	; 0x24
   13f98:	str	r2, [r3]
   13f9c:	mov	r0, r7
   13fa0:	add	sp, sp, #52	; 0x34
   13fa4:	ldrd	r4, [sp]
   13fa8:	ldrd	r6, [sp, #8]
   13fac:	ldrd	r8, [sp, #16]
   13fb0:	ldrd	sl, [sp, #24]
   13fb4:	add	sp, sp, #32
   13fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fbc:	bl	10e54 <abort@plt>
   13fc0:	sub	r2, r5, r2
   13fc4:	mov	r3, #8
   13fc8:	str	r3, [sp]
   13fcc:	mvn	r3, #-2147483648	; 0x80000000
   13fd0:	add	r2, r2, #1
   13fd4:	add	r1, sp, #44	; 0x2c
   13fd8:	mov	r0, #0
   13fdc:	bl	15330 <__assert_fail@plt+0x44c4>
   13fe0:	mov	r6, r0
   13fe4:	movw	r3, #28904	; 0x70e8
   13fe8:	movt	r3, #2
   13fec:	str	r0, [r3]
   13ff0:	ldrd	r2, [r3, #8]
   13ff4:	strd	r2, [r0]
   13ff8:	b	13eb0 <__assert_fail@plt+0x3044>
   13ffc:	strd	r4, [sp, #-16]!
   14000:	str	r6, [sp, #8]
   14004:	str	lr, [sp, #12]
   14008:	mov	r4, r0
   1400c:	bl	10dac <__errno_location@plt>
   14010:	mov	r5, r0
   14014:	ldr	r6, [r0]
   14018:	cmp	r4, #0
   1401c:	ldr	r3, [pc, #32]	; 14044 <__assert_fail@plt+0x31d8>
   14020:	moveq	r4, r3
   14024:	mov	r1, #48	; 0x30
   14028:	mov	r0, r4
   1402c:	bl	154a0 <__assert_fail@plt+0x4634>
   14030:	str	r6, [r5]
   14034:	ldrd	r4, [sp]
   14038:	ldr	r6, [sp, #8]
   1403c:	add	sp, sp, #12
   14040:	pop	{pc}		; (ldr pc, [sp], #4)
   14044:	andeq	r7, r2, ip, ror #4
   14048:	subs	r3, r0, #0
   1404c:	ldr	r2, [pc, #8]	; 1405c <__assert_fail@plt+0x31f0>
   14050:	moveq	r3, r2
   14054:	ldr	r0, [r3]
   14058:	bx	lr
   1405c:	andeq	r7, r2, ip, ror #4
   14060:	subs	r3, r0, #0
   14064:	ldr	r2, [pc, #8]	; 14074 <__assert_fail@plt+0x3208>
   14068:	moveq	r3, r2
   1406c:	str	r1, [r3]
   14070:	bx	lr
   14074:	andeq	r7, r2, ip, ror #4
   14078:	push	{lr}		; (str lr, [sp, #-4]!)
   1407c:	subs	r3, r0, #0
   14080:	ldr	r0, [pc, #44]	; 140b4 <__assert_fail@plt+0x3248>
   14084:	moveq	r3, r0
   14088:	add	r3, r3, #8
   1408c:	lsr	lr, r1, #5
   14090:	and	r1, r1, #31
   14094:	ldr	ip, [r3, lr, lsl #2]
   14098:	lsr	r0, ip, r1
   1409c:	eor	r2, r2, r0
   140a0:	and	r2, r2, #1
   140a4:	eor	r1, ip, r2, lsl r1
   140a8:	str	r1, [r3, lr, lsl #2]
   140ac:	and	r0, r0, #1
   140b0:	pop	{pc}		; (ldr pc, [sp], #4)
   140b4:	andeq	r7, r2, ip, ror #4
   140b8:	subs	r3, r0, #0
   140bc:	ldr	r2, [pc, #12]	; 140d0 <__assert_fail@plt+0x3264>
   140c0:	moveq	r3, r2
   140c4:	ldr	r0, [r3, #4]
   140c8:	str	r1, [r3, #4]
   140cc:	bx	lr
   140d0:	andeq	r7, r2, ip, ror #4
   140d4:	subs	r3, r0, #0
   140d8:	ldr	r0, [pc, #44]	; 1410c <__assert_fail@plt+0x32a0>
   140dc:	moveq	r3, r0
   140e0:	mov	r0, #10
   140e4:	str	r0, [r3]
   140e8:	cmp	r2, #0
   140ec:	cmpne	r1, #0
   140f0:	beq	14100 <__assert_fail@plt+0x3294>
   140f4:	str	r1, [r3, #40]	; 0x28
   140f8:	str	r2, [r3, #44]	; 0x2c
   140fc:	bx	lr
   14100:	str	r4, [sp, #-8]!
   14104:	str	lr, [sp, #4]
   14108:	bl	10e54 <abort@plt>
   1410c:	andeq	r7, r2, ip, ror #4
   14110:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14114:	strd	r6, [sp, #8]
   14118:	strd	r8, [sp, #16]
   1411c:	str	sl, [sp, #24]
   14120:	str	lr, [sp, #28]
   14124:	sub	sp, sp, #24
   14128:	mov	r7, r0
   1412c:	mov	r8, r1
   14130:	mov	r9, r2
   14134:	mov	sl, r3
   14138:	ldr	r4, [sp, #56]	; 0x38
   1413c:	cmp	r4, #0
   14140:	ldr	r3, [pc, #104]	; 141b0 <__assert_fail@plt+0x3344>
   14144:	moveq	r4, r3
   14148:	bl	10dac <__errno_location@plt>
   1414c:	mov	r5, r0
   14150:	ldr	r6, [r0]
   14154:	ldr	r3, [r4, #44]	; 0x2c
   14158:	str	r3, [sp, #16]
   1415c:	ldr	r3, [r4, #40]	; 0x28
   14160:	str	r3, [sp, #12]
   14164:	add	r3, r4, #8
   14168:	str	r3, [sp, #8]
   1416c:	ldr	r3, [r4, #4]
   14170:	str	r3, [sp, #4]
   14174:	ldr	r3, [r4]
   14178:	str	r3, [sp]
   1417c:	mov	r3, sl
   14180:	mov	r2, r9
   14184:	mov	r1, r8
   14188:	mov	r0, r7
   1418c:	bl	1270c <__assert_fail@plt+0x18a0>
   14190:	str	r6, [r5]
   14194:	add	sp, sp, #24
   14198:	ldrd	r4, [sp]
   1419c:	ldrd	r6, [sp, #8]
   141a0:	ldrd	r8, [sp, #16]
   141a4:	ldr	sl, [sp, #24]
   141a8:	add	sp, sp, #28
   141ac:	pop	{pc}		; (ldr pc, [sp], #4)
   141b0:	andeq	r7, r2, ip, ror #4
   141b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   141b8:	strd	r6, [sp, #8]
   141bc:	strd	r8, [sp, #16]
   141c0:	strd	sl, [sp, #24]
   141c4:	str	lr, [sp, #32]
   141c8:	sub	sp, sp, #44	; 0x2c
   141cc:	mov	r8, r0
   141d0:	mov	sl, r1
   141d4:	mov	r6, r2
   141d8:	subs	r4, r3, #0
   141dc:	ldr	r3, [pc, #200]	; 142ac <__assert_fail@plt+0x3440>
   141e0:	moveq	r4, r3
   141e4:	bl	10dac <__errno_location@plt>
   141e8:	mov	r7, r0
   141ec:	ldr	fp, [r0]
   141f0:	ldr	r5, [r4, #4]
   141f4:	cmp	r6, #0
   141f8:	orreq	r5, r5, #1
   141fc:	add	r9, r4, #8
   14200:	ldr	r3, [r4, #44]	; 0x2c
   14204:	str	r3, [sp, #16]
   14208:	ldr	r3, [r4, #40]	; 0x28
   1420c:	str	r3, [sp, #12]
   14210:	str	r9, [sp, #8]
   14214:	str	r5, [sp, #4]
   14218:	ldr	r3, [r4]
   1421c:	str	r3, [sp]
   14220:	str	sl, [sp, #36]	; 0x24
   14224:	mov	r3, sl
   14228:	str	r8, [sp, #32]
   1422c:	mov	r2, r8
   14230:	mov	r1, #0
   14234:	mov	r0, r1
   14238:	bl	1270c <__assert_fail@plt+0x18a0>
   1423c:	mov	sl, r0
   14240:	add	r8, r0, #1
   14244:	mov	r0, r8
   14248:	bl	1512c <__assert_fail@plt+0x42c0>
   1424c:	str	r0, [sp, #28]
   14250:	ldr	r3, [r4, #44]	; 0x2c
   14254:	str	r3, [sp, #16]
   14258:	ldr	r3, [r4, #40]	; 0x28
   1425c:	str	r3, [sp, #12]
   14260:	str	r9, [sp, #8]
   14264:	str	r5, [sp, #4]
   14268:	ldr	r3, [r4]
   1426c:	str	r3, [sp]
   14270:	ldr	r3, [sp, #36]	; 0x24
   14274:	ldr	r2, [sp, #32]
   14278:	mov	r1, r8
   1427c:	bl	1270c <__assert_fail@plt+0x18a0>
   14280:	str	fp, [r7]
   14284:	cmp	r6, #0
   14288:	strne	sl, [r6]
   1428c:	ldr	r0, [sp, #28]
   14290:	add	sp, sp, #44	; 0x2c
   14294:	ldrd	r4, [sp]
   14298:	ldrd	r6, [sp, #8]
   1429c:	ldrd	r8, [sp, #16]
   142a0:	ldrd	sl, [sp, #24]
   142a4:	add	sp, sp, #32
   142a8:	pop	{pc}		; (ldr pc, [sp], #4)
   142ac:	andeq	r7, r2, ip, ror #4
   142b0:	str	r4, [sp, #-8]!
   142b4:	str	lr, [sp, #4]
   142b8:	mov	r3, r2
   142bc:	mov	r2, #0
   142c0:	bl	141b4 <__assert_fail@plt+0x3348>
   142c4:	ldr	r4, [sp]
   142c8:	add	sp, sp, #4
   142cc:	pop	{pc}		; (ldr pc, [sp], #4)
   142d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   142d4:	strd	r6, [sp, #8]
   142d8:	str	r8, [sp, #16]
   142dc:	str	lr, [sp, #20]
   142e0:	movw	r3, #28904	; 0x70e8
   142e4:	movt	r3, #2
   142e8:	ldr	r7, [r3]
   142ec:	ldr	r3, [r3, #4]
   142f0:	cmp	r3, #1
   142f4:	ble	14320 <__assert_fail@plt+0x34b4>
   142f8:	mov	r4, #1
   142fc:	add	r6, r7, #4
   14300:	movw	r5, #28904	; 0x70e8
   14304:	movt	r5, #2
   14308:	ldr	r0, [r6, r4, lsl #3]
   1430c:	bl	11fd4 <__assert_fail@plt+0x1168>
   14310:	add	r4, r4, #1
   14314:	ldr	r3, [r5, #4]
   14318:	cmp	r3, r4
   1431c:	bgt	14308 <__assert_fail@plt+0x349c>
   14320:	ldr	r0, [r7, #4]
   14324:	movw	r3, #29036	; 0x716c
   14328:	movt	r3, #2
   1432c:	cmp	r0, r3
   14330:	beq	14354 <__assert_fail@plt+0x34e8>
   14334:	bl	11fd4 <__assert_fail@plt+0x1168>
   14338:	movw	r3, #28904	; 0x70e8
   1433c:	movt	r3, #2
   14340:	mov	r2, #256	; 0x100
   14344:	str	r2, [r3, #8]
   14348:	movw	r2, #29036	; 0x716c
   1434c:	movt	r2, #2
   14350:	str	r2, [r3, #12]
   14354:	ldr	r3, [pc, #64]	; 1439c <__assert_fail@plt+0x3530>
   14358:	cmp	r7, r3
   1435c:	beq	14378 <__assert_fail@plt+0x350c>
   14360:	mov	r0, r7
   14364:	bl	11fd4 <__assert_fail@plt+0x1168>
   14368:	movw	r3, #28904	; 0x70e8
   1436c:	movt	r3, #2
   14370:	add	r2, r3, #8
   14374:	str	r2, [r3]
   14378:	movw	r3, #28904	; 0x70e8
   1437c:	movt	r3, #2
   14380:	mov	r2, #1
   14384:	str	r2, [r3, #4]
   14388:	ldrd	r4, [sp]
   1438c:	ldrd	r6, [sp, #8]
   14390:	ldr	r8, [sp, #16]
   14394:	add	sp, sp, #20
   14398:	pop	{pc}		; (ldr pc, [sp], #4)
   1439c:	strdeq	r7, [r2], -r0
   143a0:	str	r4, [sp, #-8]!
   143a4:	str	lr, [sp, #4]
   143a8:	ldr	r3, [pc, #16]	; 143c0 <__assert_fail@plt+0x3554>
   143ac:	mvn	r2, #0
   143b0:	bl	13e04 <__assert_fail@plt+0x2f98>
   143b4:	ldr	r4, [sp]
   143b8:	add	sp, sp, #4
   143bc:	pop	{pc}		; (ldr pc, [sp], #4)
   143c0:	andeq	r7, r2, ip, ror #4
   143c4:	str	r4, [sp, #-8]!
   143c8:	str	lr, [sp, #4]
   143cc:	ldr	r3, [pc, #12]	; 143e0 <__assert_fail@plt+0x3574>
   143d0:	bl	13e04 <__assert_fail@plt+0x2f98>
   143d4:	ldr	r4, [sp]
   143d8:	add	sp, sp, #4
   143dc:	pop	{pc}		; (ldr pc, [sp], #4)
   143e0:	andeq	r7, r2, ip, ror #4
   143e4:	str	r4, [sp, #-8]!
   143e8:	str	lr, [sp, #4]
   143ec:	mov	r1, r0
   143f0:	mov	r0, #0
   143f4:	bl	143a0 <__assert_fail@plt+0x3534>
   143f8:	ldr	r4, [sp]
   143fc:	add	sp, sp, #4
   14400:	pop	{pc}		; (ldr pc, [sp], #4)
   14404:	str	r4, [sp, #-8]!
   14408:	str	lr, [sp, #4]
   1440c:	mov	r2, r1
   14410:	mov	r1, r0
   14414:	mov	r0, #0
   14418:	bl	143c4 <__assert_fail@plt+0x3558>
   1441c:	ldr	r4, [sp]
   14420:	add	sp, sp, #4
   14424:	pop	{pc}		; (ldr pc, [sp], #4)
   14428:	strd	r4, [sp, #-12]!
   1442c:	str	lr, [sp, #8]
   14430:	sub	sp, sp, #52	; 0x34
   14434:	mov	r4, r0
   14438:	mov	r5, r2
   1443c:	mov	r0, sp
   14440:	bl	12578 <__assert_fail@plt+0x170c>
   14444:	mov	r3, sp
   14448:	mvn	r2, #0
   1444c:	mov	r1, r5
   14450:	mov	r0, r4
   14454:	bl	13e04 <__assert_fail@plt+0x2f98>
   14458:	add	sp, sp, #52	; 0x34
   1445c:	ldrd	r4, [sp]
   14460:	add	sp, sp, #8
   14464:	pop	{pc}		; (ldr pc, [sp], #4)
   14468:	strd	r4, [sp, #-16]!
   1446c:	str	r6, [sp, #8]
   14470:	str	lr, [sp, #12]
   14474:	sub	sp, sp, #48	; 0x30
   14478:	mov	r4, r0
   1447c:	mov	r5, r2
   14480:	mov	r6, r3
   14484:	mov	r0, sp
   14488:	bl	12578 <__assert_fail@plt+0x170c>
   1448c:	mov	r3, sp
   14490:	mov	r2, r6
   14494:	mov	r1, r5
   14498:	mov	r0, r4
   1449c:	bl	13e04 <__assert_fail@plt+0x2f98>
   144a0:	add	sp, sp, #48	; 0x30
   144a4:	ldrd	r4, [sp]
   144a8:	ldr	r6, [sp, #8]
   144ac:	add	sp, sp, #12
   144b0:	pop	{pc}		; (ldr pc, [sp], #4)
   144b4:	str	r4, [sp, #-8]!
   144b8:	str	lr, [sp, #4]
   144bc:	mov	r2, r1
   144c0:	mov	r1, r0
   144c4:	mov	r0, #0
   144c8:	bl	14428 <__assert_fail@plt+0x35bc>
   144cc:	ldr	r4, [sp]
   144d0:	add	sp, sp, #4
   144d4:	pop	{pc}		; (ldr pc, [sp], #4)
   144d8:	str	r4, [sp, #-8]!
   144dc:	str	lr, [sp, #4]
   144e0:	mov	r3, r2
   144e4:	mov	r2, r1
   144e8:	mov	r1, r0
   144ec:	mov	r0, #0
   144f0:	bl	14468 <__assert_fail@plt+0x35fc>
   144f4:	ldr	r4, [sp]
   144f8:	add	sp, sp, #4
   144fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14500:	strd	r4, [sp, #-12]!
   14504:	str	lr, [sp, #8]
   14508:	sub	sp, sp, #52	; 0x34
   1450c:	mov	r4, r0
   14510:	mov	r5, r1
   14514:	mov	r1, r2
   14518:	ldr	r0, [pc, #92]	; 1457c <__assert_fail@plt+0x3710>
   1451c:	ldrd	r2, [r0]
   14520:	strd	r2, [sp]
   14524:	ldrd	r2, [r0, #8]
   14528:	strd	r2, [sp, #8]
   1452c:	ldrd	r2, [r0, #16]
   14530:	strd	r2, [sp, #16]
   14534:	ldrd	r2, [r0, #24]
   14538:	strd	r2, [sp, #24]
   1453c:	ldrd	r2, [r0, #32]
   14540:	strd	r2, [sp, #32]
   14544:	ldrd	r2, [r0, #40]	; 0x28
   14548:	strd	r2, [sp, #40]	; 0x28
   1454c:	mov	r2, #1
   14550:	mov	r0, sp
   14554:	bl	14078 <__assert_fail@plt+0x320c>
   14558:	mov	r3, sp
   1455c:	mov	r2, r5
   14560:	mov	r1, r4
   14564:	mov	r0, #0
   14568:	bl	13e04 <__assert_fail@plt+0x2f98>
   1456c:	add	sp, sp, #52	; 0x34
   14570:	ldrd	r4, [sp]
   14574:	add	sp, sp, #8
   14578:	pop	{pc}		; (ldr pc, [sp], #4)
   1457c:	andeq	r7, r2, ip, ror #4
   14580:	str	r4, [sp, #-8]!
   14584:	str	lr, [sp, #4]
   14588:	mov	r2, r1
   1458c:	mvn	r1, #0
   14590:	bl	14500 <__assert_fail@plt+0x3694>
   14594:	ldr	r4, [sp]
   14598:	add	sp, sp, #4
   1459c:	pop	{pc}		; (ldr pc, [sp], #4)
   145a0:	str	r4, [sp, #-8]!
   145a4:	str	lr, [sp, #4]
   145a8:	mov	r1, #58	; 0x3a
   145ac:	bl	14580 <__assert_fail@plt+0x3714>
   145b0:	ldr	r4, [sp]
   145b4:	add	sp, sp, #4
   145b8:	pop	{pc}		; (ldr pc, [sp], #4)
   145bc:	str	r4, [sp, #-8]!
   145c0:	str	lr, [sp, #4]
   145c4:	mov	r2, #58	; 0x3a
   145c8:	bl	14500 <__assert_fail@plt+0x3694>
   145cc:	ldr	r4, [sp]
   145d0:	add	sp, sp, #4
   145d4:	pop	{pc}		; (ldr pc, [sp], #4)
   145d8:	strd	r4, [sp, #-12]!
   145dc:	str	lr, [sp, #8]
   145e0:	sub	sp, sp, #100	; 0x64
   145e4:	mov	r4, r0
   145e8:	mov	r5, r2
   145ec:	mov	r0, sp
   145f0:	bl	12578 <__assert_fail@plt+0x170c>
   145f4:	ldrd	r2, [sp]
   145f8:	strd	r2, [sp, #48]	; 0x30
   145fc:	ldrd	r2, [sp, #8]
   14600:	strd	r2, [sp, #56]	; 0x38
   14604:	ldrd	r2, [sp, #16]
   14608:	strd	r2, [sp, #64]	; 0x40
   1460c:	ldrd	r2, [sp, #24]
   14610:	strd	r2, [sp, #72]	; 0x48
   14614:	ldrd	r2, [sp, #32]
   14618:	strd	r2, [sp, #80]	; 0x50
   1461c:	ldrd	r2, [sp, #40]	; 0x28
   14620:	strd	r2, [sp, #88]	; 0x58
   14624:	mov	r2, #1
   14628:	mov	r1, #58	; 0x3a
   1462c:	add	r0, sp, #48	; 0x30
   14630:	bl	14078 <__assert_fail@plt+0x320c>
   14634:	add	r3, sp, #48	; 0x30
   14638:	mvn	r2, #0
   1463c:	mov	r1, r5
   14640:	mov	r0, r4
   14644:	bl	13e04 <__assert_fail@plt+0x2f98>
   14648:	add	sp, sp, #100	; 0x64
   1464c:	ldrd	r4, [sp]
   14650:	add	sp, sp, #8
   14654:	pop	{pc}		; (ldr pc, [sp], #4)
   14658:	strd	r4, [sp, #-20]!	; 0xffffffec
   1465c:	strd	r6, [sp, #8]
   14660:	str	lr, [sp, #16]
   14664:	sub	sp, sp, #52	; 0x34
   14668:	mov	r4, r0
   1466c:	mov	r5, r3
   14670:	ldr	r3, [pc, #92]	; 146d4 <__assert_fail@plt+0x3868>
   14674:	ldrd	r6, [r3]
   14678:	strd	r6, [sp]
   1467c:	ldrd	r6, [r3, #8]
   14680:	strd	r6, [sp, #8]
   14684:	ldrd	r6, [r3, #16]
   14688:	strd	r6, [sp, #16]
   1468c:	ldrd	r6, [r3, #24]
   14690:	strd	r6, [sp, #24]
   14694:	ldrd	r6, [r3, #32]
   14698:	strd	r6, [sp, #32]
   1469c:	ldrd	r6, [r3, #40]	; 0x28
   146a0:	strd	r6, [sp, #40]	; 0x28
   146a4:	mov	r0, sp
   146a8:	bl	140d4 <__assert_fail@plt+0x3268>
   146ac:	mov	r3, sp
   146b0:	ldr	r2, [sp, #72]	; 0x48
   146b4:	mov	r1, r5
   146b8:	mov	r0, r4
   146bc:	bl	13e04 <__assert_fail@plt+0x2f98>
   146c0:	add	sp, sp, #52	; 0x34
   146c4:	ldrd	r4, [sp]
   146c8:	ldrd	r6, [sp, #8]
   146cc:	add	sp, sp, #16
   146d0:	pop	{pc}		; (ldr pc, [sp], #4)
   146d4:	andeq	r7, r2, ip, ror #4
   146d8:	push	{lr}		; (str lr, [sp, #-4]!)
   146dc:	sub	sp, sp, #12
   146e0:	mvn	ip, #0
   146e4:	str	ip, [sp]
   146e8:	bl	14658 <__assert_fail@plt+0x37ec>
   146ec:	add	sp, sp, #12
   146f0:	pop	{pc}		; (ldr pc, [sp], #4)
   146f4:	str	r4, [sp, #-8]!
   146f8:	str	lr, [sp, #4]
   146fc:	mov	r3, r2
   14700:	mov	r2, r1
   14704:	mov	r1, r0
   14708:	mov	r0, #0
   1470c:	bl	146d8 <__assert_fail@plt+0x386c>
   14710:	ldr	r4, [sp]
   14714:	add	sp, sp, #4
   14718:	pop	{pc}		; (ldr pc, [sp], #4)
   1471c:	push	{lr}		; (str lr, [sp, #-4]!)
   14720:	sub	sp, sp, #12
   14724:	str	r3, [sp]
   14728:	mov	r3, r2
   1472c:	mov	r2, r1
   14730:	mov	r1, r0
   14734:	mov	r0, #0
   14738:	bl	14658 <__assert_fail@plt+0x37ec>
   1473c:	add	sp, sp, #12
   14740:	pop	{pc}		; (ldr pc, [sp], #4)
   14744:	str	r4, [sp, #-8]!
   14748:	str	lr, [sp, #4]
   1474c:	ldr	r3, [pc, #12]	; 14760 <__assert_fail@plt+0x38f4>
   14750:	bl	13e04 <__assert_fail@plt+0x2f98>
   14754:	ldr	r4, [sp]
   14758:	add	sp, sp, #4
   1475c:	pop	{pc}		; (ldr pc, [sp], #4)
   14760:	strdeq	r7, [r2], -r8
   14764:	str	r4, [sp, #-8]!
   14768:	str	lr, [sp, #4]
   1476c:	mov	r2, r1
   14770:	mov	r1, r0
   14774:	mov	r0, #0
   14778:	bl	14744 <__assert_fail@plt+0x38d8>
   1477c:	ldr	r4, [sp]
   14780:	add	sp, sp, #4
   14784:	pop	{pc}		; (ldr pc, [sp], #4)
   14788:	str	r4, [sp, #-8]!
   1478c:	str	lr, [sp, #4]
   14790:	mvn	r2, #0
   14794:	bl	14744 <__assert_fail@plt+0x38d8>
   14798:	ldr	r4, [sp]
   1479c:	add	sp, sp, #4
   147a0:	pop	{pc}		; (ldr pc, [sp], #4)
   147a4:	str	r4, [sp, #-8]!
   147a8:	str	lr, [sp, #4]
   147ac:	mov	r1, r0
   147b0:	mov	r0, #0
   147b4:	bl	14788 <__assert_fail@plt+0x391c>
   147b8:	ldr	r4, [sp]
   147bc:	add	sp, sp, #4
   147c0:	pop	{pc}		; (ldr pc, [sp], #4)
   147c4:	mov	r3, #0
   147c8:	str	r3, [r0]
   147cc:	str	r3, [r0, #4]
   147d0:	bx	lr
   147d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147d8:	strd	r6, [sp, #8]
   147dc:	strd	r8, [sp, #16]
   147e0:	str	sl, [sp, #24]
   147e4:	str	lr, [sp, #28]
   147e8:	sub	sp, sp, #48	; 0x30
   147ec:	mov	r5, r0
   147f0:	mov	r8, r3
   147f4:	mov	r6, #0
   147f8:	mov	r7, #0
   147fc:	strd	r6, [sp, #16]
   14800:	strd	r6, [sp, #24]
   14804:	strd	r6, [sp, #32]
   14808:	strd	r6, [sp, #40]	; 0x28
   1480c:	cmp	r2, #0
   14810:	beq	14848 <__assert_fail@plt+0x39dc>
   14814:	sub	r0, r1, #1
   14818:	add	r1, r1, r2
   1481c:	sub	lr, r1, #1
   14820:	add	ip, sp, #16
   14824:	mov	r4, #1
   14828:	ldrb	r3, [r0, #1]!
   1482c:	lsr	r1, r3, #5
   14830:	and	r3, r3, #31
   14834:	ldr	r2, [ip, r1, lsl #2]
   14838:	orr	r3, r2, r4, lsl r3
   1483c:	str	r3, [ip, r1, lsl #2]
   14840:	cmp	r0, lr
   14844:	bne	14828 <__assert_fail@plt+0x39bc>
   14848:	ldr	r3, [r5, #4]
   1484c:	ldr	r2, [r5, #8]
   14850:	cmp	r3, r2
   14854:	bcs	148c4 <__assert_fail@plt+0x3a58>
   14858:	add	r2, r3, #1
   1485c:	str	r2, [r5, #4]
   14860:	ldrb	r4, [r3]
   14864:	lsr	r2, r4, #5
   14868:	add	r3, sp, #48	; 0x30
   1486c:	add	r2, r3, r2, lsl #2
   14870:	and	r3, r4, #31
   14874:	ldr	r2, [r2, #-32]	; 0xffffffe0
   14878:	lsr	r3, r2, r3
   1487c:	tst	r3, #1
   14880:	beq	148e8 <__assert_fail@plt+0x3a7c>
   14884:	ldr	r3, [r5, #4]
   14888:	ldr	r2, [r5, #8]
   1488c:	cmp	r3, r2
   14890:	bcs	148d8 <__assert_fail@plt+0x3a6c>
   14894:	add	r2, r3, #1
   14898:	str	r2, [r5, #4]
   1489c:	ldrb	r4, [r3]
   148a0:	lsr	r2, r4, #5
   148a4:	add	r3, sp, #48	; 0x30
   148a8:	add	r2, r3, r2, lsl #2
   148ac:	and	r3, r4, #31
   148b0:	ldr	r2, [r2, #-32]	; 0xffffffe0
   148b4:	lsr	r3, r2, r3
   148b8:	tst	r3, #1
   148bc:	bne	14884 <__assert_fail@plt+0x3a18>
   148c0:	b	148e8 <__assert_fail@plt+0x3a7c>
   148c4:	mov	r0, r5
   148c8:	bl	10e0c <__uflow@plt>
   148cc:	subs	r4, r0, #0
   148d0:	blt	148e8 <__assert_fail@plt+0x3a7c>
   148d4:	b	14864 <__assert_fail@plt+0x39f8>
   148d8:	mov	r0, r5
   148dc:	bl	10e0c <__uflow@plt>
   148e0:	subs	r4, r0, #0
   148e4:	bge	148a0 <__assert_fail@plt+0x3a34>
   148e8:	ldr	r7, [r8, #4]
   148ec:	ldr	r3, [r8]
   148f0:	str	r3, [sp, #12]
   148f4:	mov	r6, #0
   148f8:	mov	r9, #1
   148fc:	mvn	sl, #0
   14900:	b	1496c <__assert_fail@plt+0x3b00>
   14904:	str	r9, [sp]
   14908:	mov	r3, sl
   1490c:	mov	r2, r9
   14910:	add	r1, sp, #12
   14914:	mov	r0, r7
   14918:	bl	15330 <__assert_fail@plt+0x44c4>
   1491c:	mov	r7, r0
   14920:	cmp	r4, #0
   14924:	blt	1498c <__assert_fail@plt+0x3b20>
   14928:	lsr	r2, r4, #5
   1492c:	add	r3, sp, #48	; 0x30
   14930:	add	r2, r3, r2, lsl #2
   14934:	and	r3, r4, #31
   14938:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1493c:	lsr	r3, r2, r3
   14940:	tst	r3, #1
   14944:	bne	149c0 <__assert_fail@plt+0x3b54>
   14948:	strb	r4, [r7, r6]
   1494c:	ldr	r3, [r5, #4]
   14950:	ldr	r2, [r5, #8]
   14954:	cmp	r3, r2
   14958:	bcs	149cc <__assert_fail@plt+0x3b60>
   1495c:	add	r2, r3, #1
   14960:	str	r2, [r5, #4]
   14964:	ldrb	r4, [r3]
   14968:	add	r6, r6, #1
   1496c:	clz	r3, r6
   14970:	lsr	r3, r3, #5
   14974:	ands	r3, r3, r4, lsr #31
   14978:	bne	149dc <__assert_fail@plt+0x3b70>
   1497c:	ldr	r3, [sp, #12]
   14980:	cmp	r3, r6
   14984:	bne	14920 <__assert_fail@plt+0x3ab4>
   14988:	b	14904 <__assert_fail@plt+0x3a98>
   1498c:	mov	r3, #0
   14990:	strb	r3, [r7, r6]
   14994:	str	r7, [r8, #4]
   14998:	ldr	r3, [sp, #12]
   1499c:	str	r3, [r8]
   149a0:	mov	r0, r6
   149a4:	add	sp, sp, #48	; 0x30
   149a8:	ldrd	r4, [sp]
   149ac:	ldrd	r6, [sp, #8]
   149b0:	ldrd	r8, [sp, #16]
   149b4:	ldr	sl, [sp, #24]
   149b8:	add	sp, sp, #28
   149bc:	pop	{pc}		; (ldr pc, [sp], #4)
   149c0:	mov	r3, #0
   149c4:	strb	r3, [r7, r6]
   149c8:	b	14994 <__assert_fail@plt+0x3b28>
   149cc:	mov	r0, r5
   149d0:	bl	10e0c <__uflow@plt>
   149d4:	mov	r4, r0
   149d8:	b	14968 <__assert_fail@plt+0x3afc>
   149dc:	mvn	r6, #0
   149e0:	b	149a0 <__assert_fail@plt+0x3b34>
   149e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149e8:	strd	r6, [sp, #8]
   149ec:	strd	r8, [sp, #16]
   149f0:	strd	sl, [sp, #24]
   149f4:	str	lr, [sp, #32]
   149f8:	sub	sp, sp, #36	; 0x24
   149fc:	mov	r9, r0
   14a00:	str	r2, [sp, #12]
   14a04:	mov	sl, r3
   14a08:	cmp	r1, #0
   14a0c:	addne	r0, r1, #1
   14a10:	moveq	r0, #64	; 0x40
   14a14:	str	r0, [sp, #20]
   14a18:	mov	r1, #4
   14a1c:	bl	15264 <__assert_fail@plt+0x43f8>
   14a20:	mov	r7, r0
   14a24:	mov	r1, #4
   14a28:	ldr	r0, [sp, #20]
   14a2c:	bl	15264 <__assert_fail@plt+0x43f8>
   14a30:	mov	r8, r0
   14a34:	mov	r4, #0
   14a38:	str	r4, [sp, #24]
   14a3c:	str	r4, [sp, #28]
   14a40:	mov	fp, #4
   14a44:	b	14aa8 <__assert_fail@plt+0x3c3c>
   14a48:	str	fp, [sp]
   14a4c:	mvn	r3, #0
   14a50:	mov	r2, #1
   14a54:	add	r1, sp, #20
   14a58:	mov	r0, r7
   14a5c:	bl	15330 <__assert_fail@plt+0x44c4>
   14a60:	mov	r7, r0
   14a64:	mov	r2, fp
   14a68:	ldr	r1, [sp, #20]
   14a6c:	mov	r0, r8
   14a70:	bl	151bc <__assert_fail@plt+0x4350>
   14a74:	mov	r8, r0
   14a78:	cmn	r5, #1
   14a7c:	beq	14ad0 <__assert_fail@plt+0x3c64>
   14a80:	add	r6, r5, #1
   14a84:	mov	r1, #1
   14a88:	mov	r0, r6
   14a8c:	bl	15264 <__assert_fail@plt+0x43f8>
   14a90:	str	r5, [r8, r4, lsl #2]
   14a94:	mov	r2, r6
   14a98:	ldr	r1, [sp, #28]
   14a9c:	bl	10c74 <memcpy@plt>
   14aa0:	str	r0, [r7, r4, lsl #2]
   14aa4:	add	r4, r4, #1
   14aa8:	add	r3, sp, #24
   14aac:	mov	r2, sl
   14ab0:	ldr	r1, [sp, #12]
   14ab4:	mov	r0, r9
   14ab8:	bl	147d4 <__assert_fail@plt+0x3968>
   14abc:	mov	r5, r0
   14ac0:	ldr	r3, [sp, #20]
   14ac4:	cmp	r3, r4
   14ac8:	bgt	14a78 <__assert_fail@plt+0x3c0c>
   14acc:	b	14a48 <__assert_fail@plt+0x3bdc>
   14ad0:	mov	r5, r4
   14ad4:	mov	r3, #0
   14ad8:	str	r3, [r7, r4, lsl #2]
   14adc:	str	r3, [r8, r4, lsl #2]
   14ae0:	ldr	r0, [sp, #28]
   14ae4:	bl	11fd4 <__assert_fail@plt+0x1168>
   14ae8:	ldr	r3, [sp, #72]	; 0x48
   14aec:	str	r7, [r3]
   14af0:	ldr	r3, [sp, #76]	; 0x4c
   14af4:	cmp	r3, #0
   14af8:	beq	14b24 <__assert_fail@plt+0x3cb8>
   14afc:	ldr	r3, [sp, #76]	; 0x4c
   14b00:	str	r8, [r3]
   14b04:	mov	r0, r5
   14b08:	add	sp, sp, #36	; 0x24
   14b0c:	ldrd	r4, [sp]
   14b10:	ldrd	r6, [sp, #8]
   14b14:	ldrd	r8, [sp, #16]
   14b18:	ldrd	sl, [sp, #24]
   14b1c:	add	sp, sp, #32
   14b20:	pop	{pc}		; (ldr pc, [sp], #4)
   14b24:	mov	r0, r8
   14b28:	bl	11fd4 <__assert_fail@plt+0x1168>
   14b2c:	b	14b04 <__assert_fail@plt+0x3c98>
   14b30:	strd	r4, [sp, #-16]!
   14b34:	str	r6, [sp, #8]
   14b38:	str	lr, [sp, #12]
   14b3c:	sub	sp, sp, #32
   14b40:	mov	r4, r0
   14b44:	ldr	r5, [sp, #48]	; 0x30
   14b48:	ldr	r6, [sp, #52]	; 0x34
   14b4c:	cmp	r1, #0
   14b50:	beq	14c1c <__assert_fail@plt+0x3db0>
   14b54:	str	r3, [sp, #4]
   14b58:	str	r2, [sp]
   14b5c:	mov	r3, r1
   14b60:	movw	r2, #24436	; 0x5f74
   14b64:	movt	r2, #1
   14b68:	mov	r1, #1
   14b6c:	bl	10de8 <__fprintf_chk@plt>
   14b70:	mov	r2, #5
   14b74:	movw	r1, #24456	; 0x5f88
   14b78:	movt	r1, #1
   14b7c:	mov	r0, #0
   14b80:	bl	10ca4 <dcgettext@plt>
   14b84:	movw	r3, #2022	; 0x7e6
   14b88:	str	r3, [sp]
   14b8c:	mov	r3, r0
   14b90:	movw	r2, #25184	; 0x6260
   14b94:	movt	r2, #1
   14b98:	mov	r1, #1
   14b9c:	mov	r0, r4
   14ba0:	bl	10de8 <__fprintf_chk@plt>
   14ba4:	mov	r1, r4
   14ba8:	mov	r0, #10
   14bac:	bl	10c98 <fputc_unlocked@plt>
   14bb0:	mov	r2, #5
   14bb4:	movw	r1, #24460	; 0x5f8c
   14bb8:	movt	r1, #1
   14bbc:	mov	r0, #0
   14bc0:	bl	10ca4 <dcgettext@plt>
   14bc4:	movw	r3, #24632	; 0x6038
   14bc8:	movt	r3, #1
   14bcc:	mov	r2, r0
   14bd0:	mov	r1, #1
   14bd4:	mov	r0, r4
   14bd8:	bl	10de8 <__fprintf_chk@plt>
   14bdc:	mov	r1, r4
   14be0:	mov	r0, #10
   14be4:	bl	10c98 <fputc_unlocked@plt>
   14be8:	cmp	r6, #9
   14bec:	ldrls	pc, [pc, r6, lsl #2]
   14bf0:	b	14ef4 <__assert_fail@plt+0x4088>
   14bf4:	andeq	r4, r1, r0, ror #24
   14bf8:	andeq	r4, r1, r8, lsr ip
   14bfc:	andeq	r4, r1, r4, ror ip
   14c00:	andeq	r4, r1, r8, lsr #25
   14c04:	andeq	r4, r1, r4, ror #25
   14c08:	andeq	r4, r1, r8, lsr #26
   14c0c:	andeq	r4, r1, r4, ror sp
   14c10:	andeq	r4, r1, r8, asr #27
   14c14:	andeq	r4, r1, r4, lsr #28
   14c18:	andeq	r4, r1, r8, lsl #29
   14c1c:	str	r3, [sp]
   14c20:	mov	r3, r2
   14c24:	movw	r2, #24448	; 0x5f80
   14c28:	movt	r2, #1
   14c2c:	mov	r1, #1
   14c30:	bl	10de8 <__fprintf_chk@plt>
   14c34:	b	14b70 <__assert_fail@plt+0x3d04>
   14c38:	mov	r2, #5
   14c3c:	movw	r1, #24668	; 0x605c
   14c40:	movt	r1, #1
   14c44:	mov	r0, #0
   14c48:	bl	10ca4 <dcgettext@plt>
   14c4c:	ldr	r3, [r5]
   14c50:	mov	r2, r0
   14c54:	mov	r1, #1
   14c58:	mov	r0, r4
   14c5c:	bl	10de8 <__fprintf_chk@plt>
   14c60:	add	sp, sp, #32
   14c64:	ldrd	r4, [sp]
   14c68:	ldr	r6, [sp, #8]
   14c6c:	add	sp, sp, #12
   14c70:	pop	{pc}		; (ldr pc, [sp], #4)
   14c74:	mov	r2, #5
   14c78:	movw	r1, #24684	; 0x606c
   14c7c:	movt	r1, #1
   14c80:	mov	r0, #0
   14c84:	bl	10ca4 <dcgettext@plt>
   14c88:	ldr	r3, [r5, #4]
   14c8c:	str	r3, [sp]
   14c90:	ldr	r3, [r5]
   14c94:	mov	r2, r0
   14c98:	mov	r1, #1
   14c9c:	mov	r0, r4
   14ca0:	bl	10de8 <__fprintf_chk@plt>
   14ca4:	b	14c60 <__assert_fail@plt+0x3df4>
   14ca8:	mov	r2, #5
   14cac:	movw	r1, #24708	; 0x6084
   14cb0:	movt	r1, #1
   14cb4:	mov	r0, #0
   14cb8:	bl	10ca4 <dcgettext@plt>
   14cbc:	ldr	r3, [r5, #8]
   14cc0:	str	r3, [sp, #4]
   14cc4:	ldr	r3, [r5, #4]
   14cc8:	str	r3, [sp]
   14ccc:	ldr	r3, [r5]
   14cd0:	mov	r2, r0
   14cd4:	mov	r1, #1
   14cd8:	mov	r0, r4
   14cdc:	bl	10de8 <__fprintf_chk@plt>
   14ce0:	b	14c60 <__assert_fail@plt+0x3df4>
   14ce4:	mov	r2, #5
   14ce8:	movw	r1, #24736	; 0x60a0
   14cec:	movt	r1, #1
   14cf0:	mov	r0, #0
   14cf4:	bl	10ca4 <dcgettext@plt>
   14cf8:	ldr	r3, [r5, #12]
   14cfc:	str	r3, [sp, #8]
   14d00:	ldr	r3, [r5, #8]
   14d04:	str	r3, [sp, #4]
   14d08:	ldr	r3, [r5, #4]
   14d0c:	str	r3, [sp]
   14d10:	ldr	r3, [r5]
   14d14:	mov	r2, r0
   14d18:	mov	r1, #1
   14d1c:	mov	r0, r4
   14d20:	bl	10de8 <__fprintf_chk@plt>
   14d24:	b	14c60 <__assert_fail@plt+0x3df4>
   14d28:	mov	r2, #5
   14d2c:	movw	r1, #24768	; 0x60c0
   14d30:	movt	r1, #1
   14d34:	mov	r0, #0
   14d38:	bl	10ca4 <dcgettext@plt>
   14d3c:	ldr	r3, [r5, #16]
   14d40:	str	r3, [sp, #12]
   14d44:	ldr	r3, [r5, #12]
   14d48:	str	r3, [sp, #8]
   14d4c:	ldr	r3, [r5, #8]
   14d50:	str	r3, [sp, #4]
   14d54:	ldr	r3, [r5, #4]
   14d58:	str	r3, [sp]
   14d5c:	ldr	r3, [r5]
   14d60:	mov	r2, r0
   14d64:	mov	r1, #1
   14d68:	mov	r0, r4
   14d6c:	bl	10de8 <__fprintf_chk@plt>
   14d70:	b	14c60 <__assert_fail@plt+0x3df4>
   14d74:	mov	r2, #5
   14d78:	movw	r1, #24804	; 0x60e4
   14d7c:	movt	r1, #1
   14d80:	mov	r0, #0
   14d84:	bl	10ca4 <dcgettext@plt>
   14d88:	ldr	r3, [r5, #20]
   14d8c:	str	r3, [sp, #16]
   14d90:	ldr	r3, [r5, #16]
   14d94:	str	r3, [sp, #12]
   14d98:	ldr	r3, [r5, #12]
   14d9c:	str	r3, [sp, #8]
   14da0:	ldr	r3, [r5, #8]
   14da4:	str	r3, [sp, #4]
   14da8:	ldr	r3, [r5, #4]
   14dac:	str	r3, [sp]
   14db0:	ldr	r3, [r5]
   14db4:	mov	r2, r0
   14db8:	mov	r1, #1
   14dbc:	mov	r0, r4
   14dc0:	bl	10de8 <__fprintf_chk@plt>
   14dc4:	b	14c60 <__assert_fail@plt+0x3df4>
   14dc8:	mov	r2, #5
   14dcc:	movw	r1, #24844	; 0x610c
   14dd0:	movt	r1, #1
   14dd4:	mov	r0, #0
   14dd8:	bl	10ca4 <dcgettext@plt>
   14ddc:	ldr	r3, [r5, #24]
   14de0:	str	r3, [sp, #20]
   14de4:	ldr	r3, [r5, #20]
   14de8:	str	r3, [sp, #16]
   14dec:	ldr	r3, [r5, #16]
   14df0:	str	r3, [sp, #12]
   14df4:	ldr	r3, [r5, #12]
   14df8:	str	r3, [sp, #8]
   14dfc:	ldr	r3, [r5, #8]
   14e00:	str	r3, [sp, #4]
   14e04:	ldr	r3, [r5, #4]
   14e08:	str	r3, [sp]
   14e0c:	ldr	r3, [r5]
   14e10:	mov	r2, r0
   14e14:	mov	r1, #1
   14e18:	mov	r0, r4
   14e1c:	bl	10de8 <__fprintf_chk@plt>
   14e20:	b	14c60 <__assert_fail@plt+0x3df4>
   14e24:	mov	r2, #5
   14e28:	movw	r1, #24888	; 0x6138
   14e2c:	movt	r1, #1
   14e30:	mov	r0, #0
   14e34:	bl	10ca4 <dcgettext@plt>
   14e38:	ldr	r3, [r5, #28]
   14e3c:	str	r3, [sp, #24]
   14e40:	ldr	r3, [r5, #24]
   14e44:	str	r3, [sp, #20]
   14e48:	ldr	r3, [r5, #20]
   14e4c:	str	r3, [sp, #16]
   14e50:	ldr	r3, [r5, #16]
   14e54:	str	r3, [sp, #12]
   14e58:	ldr	r3, [r5, #12]
   14e5c:	str	r3, [sp, #8]
   14e60:	ldr	r3, [r5, #8]
   14e64:	str	r3, [sp, #4]
   14e68:	ldr	r3, [r5, #4]
   14e6c:	str	r3, [sp]
   14e70:	ldr	r3, [r5]
   14e74:	mov	r2, r0
   14e78:	mov	r1, #1
   14e7c:	mov	r0, r4
   14e80:	bl	10de8 <__fprintf_chk@plt>
   14e84:	b	14c60 <__assert_fail@plt+0x3df4>
   14e88:	mov	r2, #5
   14e8c:	movw	r1, #24936	; 0x6168
   14e90:	movt	r1, #1
   14e94:	mov	r0, #0
   14e98:	bl	10ca4 <dcgettext@plt>
   14e9c:	ldr	r3, [r5, #32]
   14ea0:	str	r3, [sp, #28]
   14ea4:	ldr	r3, [r5, #28]
   14ea8:	str	r3, [sp, #24]
   14eac:	ldr	r3, [r5, #24]
   14eb0:	str	r3, [sp, #20]
   14eb4:	ldr	r3, [r5, #20]
   14eb8:	str	r3, [sp, #16]
   14ebc:	ldr	r3, [r5, #16]
   14ec0:	str	r3, [sp, #12]
   14ec4:	ldr	r3, [r5, #12]
   14ec8:	str	r3, [sp, #8]
   14ecc:	ldr	r3, [r5, #8]
   14ed0:	str	r3, [sp, #4]
   14ed4:	ldr	r3, [r5, #4]
   14ed8:	str	r3, [sp]
   14edc:	ldr	r3, [r5]
   14ee0:	mov	r2, r0
   14ee4:	mov	r1, #1
   14ee8:	mov	r0, r4
   14eec:	bl	10de8 <__fprintf_chk@plt>
   14ef0:	b	14c60 <__assert_fail@plt+0x3df4>
   14ef4:	mov	r2, #5
   14ef8:	movw	r1, #24988	; 0x619c
   14efc:	movt	r1, #1
   14f00:	mov	r0, #0
   14f04:	bl	10ca4 <dcgettext@plt>
   14f08:	ldr	r3, [r5, #32]
   14f0c:	str	r3, [sp, #28]
   14f10:	ldr	r3, [r5, #28]
   14f14:	str	r3, [sp, #24]
   14f18:	ldr	r3, [r5, #24]
   14f1c:	str	r3, [sp, #20]
   14f20:	ldr	r3, [r5, #20]
   14f24:	str	r3, [sp, #16]
   14f28:	ldr	r3, [r5, #16]
   14f2c:	str	r3, [sp, #12]
   14f30:	ldr	r3, [r5, #12]
   14f34:	str	r3, [sp, #8]
   14f38:	ldr	r3, [r5, #8]
   14f3c:	str	r3, [sp, #4]
   14f40:	ldr	r3, [r5, #4]
   14f44:	str	r3, [sp]
   14f48:	ldr	r3, [r5]
   14f4c:	mov	r2, r0
   14f50:	mov	r1, #1
   14f54:	mov	r0, r4
   14f58:	bl	10de8 <__fprintf_chk@plt>
   14f5c:	b	14c60 <__assert_fail@plt+0x3df4>
   14f60:	strd	r4, [sp, #-12]!
   14f64:	str	lr, [sp, #8]
   14f68:	sub	sp, sp, #12
   14f6c:	ldr	r5, [sp, #24]
   14f70:	ldr	ip, [r5]
   14f74:	cmp	ip, #0
   14f78:	beq	14fb0 <__assert_fail@plt+0x4144>
   14f7c:	mov	lr, r5
   14f80:	mov	ip, #0
   14f84:	add	ip, ip, #1
   14f88:	ldr	r4, [lr, #4]!
   14f8c:	cmp	r4, #0
   14f90:	bne	14f84 <__assert_fail@plt+0x4118>
   14f94:	str	ip, [sp, #4]
   14f98:	str	r5, [sp]
   14f9c:	bl	14b30 <__assert_fail@plt+0x3cc4>
   14fa0:	add	sp, sp, #12
   14fa4:	ldrd	r4, [sp]
   14fa8:	add	sp, sp, #8
   14fac:	pop	{pc}		; (ldr pc, [sp], #4)
   14fb0:	mov	ip, #0
   14fb4:	b	14f94 <__assert_fail@plt+0x4128>
   14fb8:	strd	r4, [sp, #-12]!
   14fbc:	str	lr, [sp, #8]
   14fc0:	sub	sp, sp, #52	; 0x34
   14fc4:	ldr	r5, [sp, #64]	; 0x40
   14fc8:	add	r4, sp, #8
   14fcc:	mov	ip, #0
   14fd0:	ldr	lr, [r5], #4
   14fd4:	str	lr, [r4], #4
   14fd8:	cmp	lr, #0
   14fdc:	beq	14fec <__assert_fail@plt+0x4180>
   14fe0:	add	ip, ip, #1
   14fe4:	cmp	ip, #10
   14fe8:	bne	14fd0 <__assert_fail@plt+0x4164>
   14fec:	str	ip, [sp, #4]
   14ff0:	add	ip, sp, #8
   14ff4:	str	ip, [sp]
   14ff8:	bl	14b30 <__assert_fail@plt+0x3cc4>
   14ffc:	add	sp, sp, #52	; 0x34
   15000:	ldrd	r4, [sp]
   15004:	add	sp, sp, #8
   15008:	pop	{pc}		; (ldr pc, [sp], #4)
   1500c:	push	{r3}		; (str r3, [sp, #-4]!)
   15010:	push	{lr}		; (str lr, [sp, #-4]!)
   15014:	sub	sp, sp, #16
   15018:	add	r3, sp, #24
   1501c:	str	r3, [sp, #12]
   15020:	str	r3, [sp]
   15024:	ldr	r3, [sp, #20]
   15028:	bl	14fb8 <__assert_fail@plt+0x414c>
   1502c:	add	sp, sp, #16
   15030:	pop	{lr}		; (ldr lr, [sp], #4)
   15034:	add	sp, sp, #4
   15038:	bx	lr
   1503c:	str	r4, [sp, #-8]!
   15040:	str	lr, [sp, #4]
   15044:	movw	r3, #28996	; 0x7144
   15048:	movt	r3, #2
   1504c:	ldr	r1, [r3]
   15050:	mov	r0, #10
   15054:	bl	10c98 <fputc_unlocked@plt>
   15058:	mov	r2, #5
   1505c:	movw	r1, #25048	; 0x61d8
   15060:	movt	r1, #1
   15064:	mov	r0, #0
   15068:	bl	10ca4 <dcgettext@plt>
   1506c:	movw	r2, #25068	; 0x61ec
   15070:	movt	r2, #1
   15074:	mov	r1, r0
   15078:	mov	r0, #1
   1507c:	bl	10dd0 <__printf_chk@plt>
   15080:	mov	r2, #5
   15084:	movw	r1, #25092	; 0x6204
   15088:	movt	r1, #1
   1508c:	mov	r0, #0
   15090:	bl	10ca4 <dcgettext@plt>
   15094:	movw	r3, #23424	; 0x5b80
   15098:	movt	r3, #1
   1509c:	movw	r2, #23464	; 0x5ba8
   150a0:	movt	r2, #1
   150a4:	mov	r1, r0
   150a8:	mov	r0, #1
   150ac:	bl	10dd0 <__printf_chk@plt>
   150b0:	mov	r2, #5
   150b4:	movw	r1, #25112	; 0x6218
   150b8:	movt	r1, #1
   150bc:	mov	r0, #0
   150c0:	bl	10ca4 <dcgettext@plt>
   150c4:	movw	r2, #25152	; 0x6240
   150c8:	movt	r2, #1
   150cc:	mov	r1, r0
   150d0:	mov	r0, #1
   150d4:	bl	10dd0 <__printf_chk@plt>
   150d8:	ldr	r4, [sp]
   150dc:	add	sp, sp, #4
   150e0:	pop	{pc}		; (ldr pc, [sp], #4)
   150e4:	str	r4, [sp, #-8]!
   150e8:	str	lr, [sp, #4]
   150ec:	bl	15630 <__assert_fail@plt+0x47c4>
   150f0:	cmp	r0, #0
   150f4:	beq	15104 <__assert_fail@plt+0x4298>
   150f8:	ldr	r4, [sp]
   150fc:	add	sp, sp, #4
   15100:	pop	{pc}		; (ldr pc, [sp], #4)
   15104:	bl	15578 <__assert_fail@plt+0x470c>
   15108:	str	r4, [sp, #-8]!
   1510c:	str	lr, [sp, #4]
   15110:	bl	15630 <__assert_fail@plt+0x47c4>
   15114:	cmp	r0, #0
   15118:	beq	15128 <__assert_fail@plt+0x42bc>
   1511c:	ldr	r4, [sp]
   15120:	add	sp, sp, #4
   15124:	pop	{pc}		; (ldr pc, [sp], #4)
   15128:	bl	15578 <__assert_fail@plt+0x470c>
   1512c:	str	r4, [sp, #-8]!
   15130:	str	lr, [sp, #4]
   15134:	bl	150e4 <__assert_fail@plt+0x4278>
   15138:	ldr	r4, [sp]
   1513c:	add	sp, sp, #4
   15140:	pop	{pc}		; (ldr pc, [sp], #4)
   15144:	strd	r4, [sp, #-16]!
   15148:	str	r6, [sp, #8]
   1514c:	str	lr, [sp, #12]
   15150:	mov	r5, r0
   15154:	mov	r4, r1
   15158:	bl	1566c <__assert_fail@plt+0x4800>
   1515c:	cmp	r0, #0
   15160:	beq	15174 <__assert_fail@plt+0x4308>
   15164:	ldrd	r4, [sp]
   15168:	ldr	r6, [sp, #8]
   1516c:	add	sp, sp, #12
   15170:	pop	{pc}		; (ldr pc, [sp], #4)
   15174:	adds	r4, r4, #0
   15178:	movne	r4, #1
   1517c:	cmp	r5, #0
   15180:	moveq	r4, #1
   15184:	cmp	r4, #0
   15188:	beq	15164 <__assert_fail@plt+0x42f8>
   1518c:	bl	15578 <__assert_fail@plt+0x470c>
   15190:	str	r4, [sp, #-8]!
   15194:	str	lr, [sp, #4]
   15198:	cmp	r1, #0
   1519c:	orreq	r1, r1, #1
   151a0:	bl	1566c <__assert_fail@plt+0x4800>
   151a4:	cmp	r0, #0
   151a8:	beq	151b8 <__assert_fail@plt+0x434c>
   151ac:	ldr	r4, [sp]
   151b0:	add	sp, sp, #4
   151b4:	pop	{pc}		; (ldr pc, [sp], #4)
   151b8:	bl	15578 <__assert_fail@plt+0x470c>
   151bc:	strd	r4, [sp, #-16]!
   151c0:	str	r6, [sp, #8]
   151c4:	str	lr, [sp, #12]
   151c8:	mov	r4, r0
   151cc:	mov	r6, r1
   151d0:	mov	r5, r2
   151d4:	bl	15808 <__assert_fail@plt+0x499c>
   151d8:	cmp	r0, #0
   151dc:	beq	151f0 <__assert_fail@plt+0x4384>
   151e0:	ldrd	r4, [sp]
   151e4:	ldr	r6, [sp, #8]
   151e8:	add	sp, sp, #12
   151ec:	pop	{pc}		; (ldr pc, [sp], #4)
   151f0:	cmp	r4, #0
   151f4:	beq	15204 <__assert_fail@plt+0x4398>
   151f8:	cmp	r6, #0
   151fc:	cmpne	r5, #0
   15200:	beq	151e0 <__assert_fail@plt+0x4374>
   15204:	bl	15578 <__assert_fail@plt+0x470c>
   15208:	str	r4, [sp, #-8]!
   1520c:	str	lr, [sp, #4]
   15210:	bl	151bc <__assert_fail@plt+0x4350>
   15214:	ldr	r4, [sp]
   15218:	add	sp, sp, #4
   1521c:	pop	{pc}		; (ldr pc, [sp], #4)
   15220:	str	r4, [sp, #-8]!
   15224:	str	lr, [sp, #4]
   15228:	mov	ip, r1
   1522c:	mov	r3, r2
   15230:	cmp	r2, #0
   15234:	cmpne	r1, #0
   15238:	moveq	r3, #1
   1523c:	moveq	ip, r3
   15240:	mov	r2, r3
   15244:	mov	r1, ip
   15248:	bl	15808 <__assert_fail@plt+0x499c>
   1524c:	cmp	r0, #0
   15250:	beq	15260 <__assert_fail@plt+0x43f4>
   15254:	ldr	r4, [sp]
   15258:	add	sp, sp, #4
   1525c:	pop	{pc}		; (ldr pc, [sp], #4)
   15260:	bl	15578 <__assert_fail@plt+0x470c>
   15264:	str	r4, [sp, #-8]!
   15268:	str	lr, [sp, #4]
   1526c:	mov	r2, r1
   15270:	mov	r1, r0
   15274:	mov	r0, #0
   15278:	bl	151bc <__assert_fail@plt+0x4350>
   1527c:	ldr	r4, [sp]
   15280:	add	sp, sp, #4
   15284:	pop	{pc}		; (ldr pc, [sp], #4)
   15288:	str	r4, [sp, #-8]!
   1528c:	str	lr, [sp, #4]
   15290:	mov	r2, r1
   15294:	mov	r1, r0
   15298:	mov	r0, #0
   1529c:	bl	15220 <__assert_fail@plt+0x43b4>
   152a0:	ldr	r4, [sp]
   152a4:	add	sp, sp, #4
   152a8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ac:	strd	r4, [sp, #-16]!
   152b0:	str	r6, [sp, #8]
   152b4:	str	lr, [sp, #12]
   152b8:	mov	r5, r1
   152bc:	ldr	r4, [r1]
   152c0:	cmp	r0, #0
   152c4:	beq	152f4 <__assert_fail@plt+0x4488>
   152c8:	lsr	r3, r4, #1
   152cc:	add	r3, r3, #1
   152d0:	adds	r4, r4, r3
   152d4:	bcs	15310 <__assert_fail@plt+0x44a4>
   152d8:	mov	r1, r4
   152dc:	bl	151bc <__assert_fail@plt+0x4350>
   152e0:	str	r4, [r5]
   152e4:	ldrd	r4, [sp]
   152e8:	ldr	r6, [sp, #8]
   152ec:	add	sp, sp, #12
   152f0:	pop	{pc}		; (ldr pc, [sp], #4)
   152f4:	cmp	r4, #0
   152f8:	bne	152d8 <__assert_fail@plt+0x446c>
   152fc:	mov	r4, #64	; 0x40
   15300:	udiv	r4, r4, r2
   15304:	cmp	r2, #64	; 0x40
   15308:	addhi	r4, r4, #1
   1530c:	b	152d8 <__assert_fail@plt+0x446c>
   15310:	bl	15578 <__assert_fail@plt+0x470c>
   15314:	str	r4, [sp, #-8]!
   15318:	str	lr, [sp, #4]
   1531c:	mov	r2, #1
   15320:	bl	152ac <__assert_fail@plt+0x4440>
   15324:	ldr	r4, [sp]
   15328:	add	sp, sp, #4
   1532c:	pop	{pc}		; (ldr pc, [sp], #4)
   15330:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15334:	strd	r6, [sp, #8]
   15338:	str	r8, [sp, #16]
   1533c:	str	lr, [sp, #20]
   15340:	mov	r5, r1
   15344:	ldr	lr, [sp, #24]
   15348:	ldr	ip, [r1]
   1534c:	asr	r4, ip, #1
   15350:	adds	r4, ip, r4
   15354:	movvs	r1, #1
   15358:	movvc	r1, #0
   1535c:	cmp	r1, #0
   15360:	mvnne	r4, #-2147483648	; 0x80000000
   15364:	mvn	r8, r3
   15368:	lsr	r8, r8, #31
   1536c:	cmp	r3, r4
   15370:	movge	r1, #0
   15374:	andlt	r1, r8, #1
   15378:	cmp	r1, #0
   1537c:	movne	r4, r3
   15380:	smull	r6, r7, r4, lr
   15384:	asr	r1, r6, #31
   15388:	cmp	r1, r7
   1538c:	bne	153a4 <__assert_fail@plt+0x4538>
   15390:	mov	r1, r6
   15394:	cmp	r6, #63	; 0x3f
   15398:	movle	r1, #64	; 0x40
   1539c:	ble	153a8 <__assert_fail@plt+0x453c>
   153a0:	b	153b4 <__assert_fail@plt+0x4548>
   153a4:	mvn	r1, #-2147483648	; 0x80000000
   153a8:	sdiv	r4, r1, lr
   153ac:	mls	r6, lr, r4, r1
   153b0:	sub	r1, r1, r6
   153b4:	cmp	r0, #0
   153b8:	moveq	r6, #0
   153bc:	streq	r6, [r5]
   153c0:	sub	r6, r4, ip
   153c4:	cmp	r6, r2
   153c8:	bge	15400 <__assert_fail@plt+0x4594>
   153cc:	adds	r2, ip, r2
   153d0:	mov	r4, r2
   153d4:	bvs	1541c <__assert_fail@plt+0x45b0>
   153d8:	cmp	r2, r3
   153dc:	movle	r3, #0
   153e0:	andgt	r3, r8, #1
   153e4:	cmp	r3, #0
   153e8:	bne	1541c <__assert_fail@plt+0x45b0>
   153ec:	smull	r2, r3, r2, lr
   153f0:	asr	ip, r2, #31
   153f4:	mov	r1, r2
   153f8:	cmp	ip, r3
   153fc:	bne	1541c <__assert_fail@plt+0x45b0>
   15400:	bl	15144 <__assert_fail@plt+0x42d8>
   15404:	str	r4, [r5]
   15408:	ldrd	r4, [sp]
   1540c:	ldrd	r6, [sp, #8]
   15410:	ldr	r8, [sp, #16]
   15414:	add	sp, sp, #20
   15418:	pop	{pc}		; (ldr pc, [sp], #4)
   1541c:	bl	15578 <__assert_fail@plt+0x470c>
   15420:	str	r4, [sp, #-8]!
   15424:	str	lr, [sp, #4]
   15428:	bl	155bc <__assert_fail@plt+0x4750>
   1542c:	cmp	r0, #0
   15430:	beq	15440 <__assert_fail@plt+0x45d4>
   15434:	ldr	r4, [sp]
   15438:	add	sp, sp, #4
   1543c:	pop	{pc}		; (ldr pc, [sp], #4)
   15440:	bl	15578 <__assert_fail@plt+0x470c>
   15444:	str	r4, [sp, #-8]!
   15448:	str	lr, [sp, #4]
   1544c:	mov	r1, #1
   15450:	bl	15420 <__assert_fail@plt+0x45b4>
   15454:	ldr	r4, [sp]
   15458:	add	sp, sp, #4
   1545c:	pop	{pc}		; (ldr pc, [sp], #4)
   15460:	str	r4, [sp, #-8]!
   15464:	str	lr, [sp, #4]
   15468:	bl	155bc <__assert_fail@plt+0x4750>
   1546c:	cmp	r0, #0
   15470:	beq	15480 <__assert_fail@plt+0x4614>
   15474:	ldr	r4, [sp]
   15478:	add	sp, sp, #4
   1547c:	pop	{pc}		; (ldr pc, [sp], #4)
   15480:	bl	15578 <__assert_fail@plt+0x470c>
   15484:	str	r4, [sp, #-8]!
   15488:	str	lr, [sp, #4]
   1548c:	mov	r1, #1
   15490:	bl	15460 <__assert_fail@plt+0x45f4>
   15494:	ldr	r4, [sp]
   15498:	add	sp, sp, #4
   1549c:	pop	{pc}		; (ldr pc, [sp], #4)
   154a0:	strd	r4, [sp, #-16]!
   154a4:	str	r6, [sp, #8]
   154a8:	str	lr, [sp, #12]
   154ac:	mov	r5, r0
   154b0:	mov	r4, r1
   154b4:	mov	r0, r1
   154b8:	bl	150e4 <__assert_fail@plt+0x4278>
   154bc:	mov	r2, r4
   154c0:	mov	r1, r5
   154c4:	bl	10c74 <memcpy@plt>
   154c8:	ldrd	r4, [sp]
   154cc:	ldr	r6, [sp, #8]
   154d0:	add	sp, sp, #12
   154d4:	pop	{pc}		; (ldr pc, [sp], #4)
   154d8:	strd	r4, [sp, #-16]!
   154dc:	str	r6, [sp, #8]
   154e0:	str	lr, [sp, #12]
   154e4:	mov	r5, r0
   154e8:	mov	r4, r1
   154ec:	mov	r0, r1
   154f0:	bl	15108 <__assert_fail@plt+0x429c>
   154f4:	mov	r2, r4
   154f8:	mov	r1, r5
   154fc:	bl	10c74 <memcpy@plt>
   15500:	ldrd	r4, [sp]
   15504:	ldr	r6, [sp, #8]
   15508:	add	sp, sp, #12
   1550c:	pop	{pc}		; (ldr pc, [sp], #4)
   15510:	strd	r4, [sp, #-16]!
   15514:	str	r6, [sp, #8]
   15518:	str	lr, [sp, #12]
   1551c:	mov	r5, r0
   15520:	mov	r4, r1
   15524:	add	r0, r1, #1
   15528:	bl	15108 <__assert_fail@plt+0x429c>
   1552c:	mov	r2, #0
   15530:	strb	r2, [r0, r4]
   15534:	mov	r2, r4
   15538:	mov	r1, r5
   1553c:	bl	10c74 <memcpy@plt>
   15540:	ldrd	r4, [sp]
   15544:	ldr	r6, [sp, #8]
   15548:	add	sp, sp, #12
   1554c:	pop	{pc}		; (ldr pc, [sp], #4)
   15550:	str	r4, [sp, #-8]!
   15554:	str	lr, [sp, #4]
   15558:	mov	r4, r0
   1555c:	bl	10da0 <strlen@plt>
   15560:	add	r1, r0, #1
   15564:	mov	r0, r4
   15568:	bl	154a0 <__assert_fail@plt+0x4634>
   1556c:	ldr	r4, [sp]
   15570:	add	sp, sp, #4
   15574:	pop	{pc}		; (ldr pc, [sp], #4)
   15578:	str	r4, [sp, #-8]!
   1557c:	str	lr, [sp, #4]
   15580:	movw	r3, #28900	; 0x70e4
   15584:	movt	r3, #2
   15588:	ldr	r4, [r3]
   1558c:	mov	r2, #5
   15590:	movw	r1, #25232	; 0x6290
   15594:	movt	r1, #1
   15598:	mov	r0, #0
   1559c:	bl	10ca4 <dcgettext@plt>
   155a0:	mov	r3, r0
   155a4:	movw	r2, #24068	; 0x5e04
   155a8:	movt	r2, #1
   155ac:	mov	r1, #0
   155b0:	mov	r0, r4
   155b4:	bl	10d1c <error@plt>
   155b8:	bl	10e54 <abort@plt>
   155bc:	strd	r4, [sp, #-16]!
   155c0:	str	r6, [sp, #8]
   155c4:	str	lr, [sp, #12]
   155c8:	cmp	r1, #0
   155cc:	cmpne	r0, #0
   155d0:	beq	1560c <__assert_fail@plt+0x47a0>
   155d4:	mov	r2, r0
   155d8:	mov	r3, r1
   155dc:	umull	r4, r5, r0, r1
   155e0:	adds	r1, r5, #0
   155e4:	movne	r1, #1
   155e8:	cmp	r4, #0
   155ec:	movlt	r1, #1
   155f0:	cmp	r1, #0
   155f4:	beq	15614 <__assert_fail@plt+0x47a8>
   155f8:	bl	10dac <__errno_location@plt>
   155fc:	mov	r3, #12
   15600:	str	r3, [r0]
   15604:	mov	r0, #0
   15608:	b	15620 <__assert_fail@plt+0x47b4>
   1560c:	mov	r3, #1
   15610:	mov	r2, r3
   15614:	mov	r1, r3
   15618:	mov	r0, r2
   1561c:	bl	10c20 <calloc@plt>
   15620:	ldrd	r4, [sp]
   15624:	ldr	r6, [sp, #8]
   15628:	add	sp, sp, #12
   1562c:	pop	{pc}		; (ldr pc, [sp], #4)
   15630:	str	r4, [sp, #-8]!
   15634:	str	lr, [sp, #4]
   15638:	cmp	r0, #0
   1563c:	beq	15658 <__assert_fail@plt+0x47ec>
   15640:	bge	1565c <__assert_fail@plt+0x47f0>
   15644:	bl	10dac <__errno_location@plt>
   15648:	mov	r3, #12
   1564c:	str	r3, [r0]
   15650:	mov	r0, #0
   15654:	b	15660 <__assert_fail@plt+0x47f4>
   15658:	mov	r0, #1
   1565c:	bl	10d40 <malloc@plt>
   15660:	ldr	r4, [sp]
   15664:	add	sp, sp, #4
   15668:	pop	{pc}		; (ldr pc, [sp], #4)
   1566c:	str	r4, [sp, #-8]!
   15670:	str	lr, [sp, #4]
   15674:	cmp	r0, #0
   15678:	beq	1569c <__assert_fail@plt+0x4830>
   1567c:	cmp	r1, #0
   15680:	beq	156a8 <__assert_fail@plt+0x483c>
   15684:	cmp	r1, #0
   15688:	blt	156b4 <__assert_fail@plt+0x4848>
   1568c:	bl	10cbc <realloc@plt>
   15690:	ldr	r4, [sp]
   15694:	add	sp, sp, #4
   15698:	pop	{pc}		; (ldr pc, [sp], #4)
   1569c:	mov	r0, r1
   156a0:	bl	15630 <__assert_fail@plt+0x47c4>
   156a4:	b	15690 <__assert_fail@plt+0x4824>
   156a8:	bl	11fd4 <__assert_fail@plt+0x1168>
   156ac:	mov	r0, #0
   156b0:	b	15690 <__assert_fail@plt+0x4824>
   156b4:	bl	10dac <__errno_location@plt>
   156b8:	mov	r3, #12
   156bc:	str	r3, [r0]
   156c0:	mov	r0, #0
   156c4:	b	15690 <__assert_fail@plt+0x4824>
   156c8:	strd	r4, [sp, #-16]!
   156cc:	str	r6, [sp, #8]
   156d0:	str	lr, [sp, #12]
   156d4:	mov	r5, r0
   156d8:	bl	10d04 <__fpending@plt>
   156dc:	mov	r6, r0
   156e0:	ldr	r4, [r5]
   156e4:	and	r4, r4, #32
   156e8:	mov	r0, r5
   156ec:	bl	11ea8 <__assert_fail@plt+0x103c>
   156f0:	cmp	r4, #0
   156f4:	bne	15728 <__assert_fail@plt+0x48bc>
   156f8:	cmp	r0, #0
   156fc:	beq	15718 <__assert_fail@plt+0x48ac>
   15700:	cmp	r6, #0
   15704:	bne	15744 <__assert_fail@plt+0x48d8>
   15708:	bl	10dac <__errno_location@plt>
   1570c:	ldr	r0, [r0]
   15710:	subs	r0, r0, #9
   15714:	mvnne	r0, #0
   15718:	ldrd	r4, [sp]
   1571c:	ldr	r6, [sp, #8]
   15720:	add	sp, sp, #12
   15724:	pop	{pc}		; (ldr pc, [sp], #4)
   15728:	cmp	r0, #0
   1572c:	bne	1574c <__assert_fail@plt+0x48e0>
   15730:	bl	10dac <__errno_location@plt>
   15734:	mov	r3, #0
   15738:	str	r3, [r0]
   1573c:	mvn	r0, #0
   15740:	b	15718 <__assert_fail@plt+0x48ac>
   15744:	mvn	r0, #0
   15748:	b	15718 <__assert_fail@plt+0x48ac>
   1574c:	mvn	r0, #0
   15750:	b	15718 <__assert_fail@plt+0x48ac>
   15754:	str	r4, [sp, #-8]!
   15758:	str	lr, [sp, #4]
   1575c:	mov	r0, #14
   15760:	bl	10e30 <nl_langinfo@plt>
   15764:	cmp	r0, #0
   15768:	beq	1578c <__assert_fail@plt+0x4920>
   1576c:	ldrb	r2, [r0]
   15770:	movw	r3, #25252	; 0x62a4
   15774:	movt	r3, #1
   15778:	cmp	r2, #0
   1577c:	moveq	r0, r3
   15780:	ldr	r4, [sp]
   15784:	add	sp, sp, #4
   15788:	pop	{pc}		; (ldr pc, [sp], #4)
   1578c:	movw	r0, #25252	; 0x62a4
   15790:	movt	r0, #1
   15794:	b	15780 <__assert_fail@plt+0x4914>
   15798:	strd	r4, [sp, #-20]!	; 0xffffffec
   1579c:	strd	r6, [sp, #8]
   157a0:	str	lr, [sp, #16]
   157a4:	sub	sp, sp, #12
   157a8:	mov	r7, r1
   157ac:	mov	r5, r2
   157b0:	subs	r6, r0, #0
   157b4:	addeq	r6, sp, #4
   157b8:	mov	r0, r6
   157bc:	bl	10d10 <mbrtowc@plt>
   157c0:	mov	r4, r0
   157c4:	cmp	r5, #0
   157c8:	cmnne	r0, #3
   157cc:	bhi	157e8 <__assert_fail@plt+0x497c>
   157d0:	mov	r0, r4
   157d4:	add	sp, sp, #12
   157d8:	ldrd	r4, [sp]
   157dc:	ldrd	r6, [sp, #8]
   157e0:	add	sp, sp, #16
   157e4:	pop	{pc}		; (ldr pc, [sp], #4)
   157e8:	mov	r0, #0
   157ec:	bl	15844 <__assert_fail@plt+0x49d8>
   157f0:	cmp	r0, #0
   157f4:	bne	157d0 <__assert_fail@plt+0x4964>
   157f8:	ldrb	r3, [r7]
   157fc:	str	r3, [r6]
   15800:	mov	r4, #1
   15804:	b	157d0 <__assert_fail@plt+0x4964>
   15808:	str	r4, [sp, #-8]!
   1580c:	str	lr, [sp, #4]
   15810:	umull	r2, r3, r1, r2
   15814:	cmp	r3, #0
   15818:	bne	15830 <__assert_fail@plt+0x49c4>
   1581c:	mov	r1, r2
   15820:	bl	1566c <__assert_fail@plt+0x4800>
   15824:	ldr	r4, [sp]
   15828:	add	sp, sp, #4
   1582c:	pop	{pc}		; (ldr pc, [sp], #4)
   15830:	bl	10dac <__errno_location@plt>
   15834:	mov	r3, #12
   15838:	str	r3, [r0]
   1583c:	mov	r0, #0
   15840:	b	15824 <__assert_fail@plt+0x49b8>
   15844:	push	{lr}		; (str lr, [sp, #-4]!)
   15848:	sub	sp, sp, #268	; 0x10c
   1584c:	movw	r2, #257	; 0x101
   15850:	add	r1, sp, #4
   15854:	bl	158a0 <__assert_fail@plt+0x4a34>
   15858:	cmp	r0, #0
   1585c:	movne	r0, #0
   15860:	bne	15898 <__assert_fail@plt+0x4a2c>
   15864:	movw	r1, #25260	; 0x62ac
   15868:	movt	r1, #1
   1586c:	add	r0, sp, #4
   15870:	bl	10c38 <strcmp@plt>
   15874:	cmp	r0, #0
   15878:	beq	15894 <__assert_fail@plt+0x4a28>
   1587c:	movw	r1, #25264	; 0x62b0
   15880:	movt	r1, #1
   15884:	add	r0, sp, #4
   15888:	bl	10c38 <strcmp@plt>
   1588c:	adds	r0, r0, #0
   15890:	movne	r0, #1
   15894:	and	r0, r0, #1
   15898:	add	sp, sp, #268	; 0x10c
   1589c:	pop	{pc}		; (ldr pc, [sp], #4)
   158a0:	strd	r4, [sp, #-16]!
   158a4:	str	r6, [sp, #8]
   158a8:	str	lr, [sp, #12]
   158ac:	mov	r6, r1
   158b0:	mov	r4, r2
   158b4:	mov	r1, #0
   158b8:	bl	10e18 <setlocale@plt>
   158bc:	subs	r5, r0, #0
   158c0:	beq	15904 <__assert_fail@plt+0x4a98>
   158c4:	mov	r0, r5
   158c8:	bl	10da0 <strlen@plt>
   158cc:	cmp	r4, r0
   158d0:	bhi	15920 <__assert_fail@plt+0x4ab4>
   158d4:	cmp	r4, #0
   158d8:	moveq	r0, #34	; 0x22
   158dc:	beq	15934 <__assert_fail@plt+0x4ac8>
   158e0:	sub	r4, r4, #1
   158e4:	mov	r2, r4
   158e8:	mov	r1, r5
   158ec:	mov	r0, r6
   158f0:	bl	10c74 <memcpy@plt>
   158f4:	mov	r3, #0
   158f8:	strb	r3, [r6, r4]
   158fc:	mov	r0, #34	; 0x22
   15900:	b	15934 <__assert_fail@plt+0x4ac8>
   15904:	cmp	r4, #0
   15908:	moveq	r0, #22
   1590c:	beq	15934 <__assert_fail@plt+0x4ac8>
   15910:	mov	r3, #0
   15914:	strb	r3, [r6]
   15918:	mov	r0, #22
   1591c:	b	15934 <__assert_fail@plt+0x4ac8>
   15920:	add	r2, r0, #1
   15924:	mov	r1, r5
   15928:	mov	r0, r6
   1592c:	bl	10c74 <memcpy@plt>
   15930:	mov	r0, #0
   15934:	ldrd	r4, [sp]
   15938:	ldr	r6, [sp, #8]
   1593c:	add	sp, sp, #12
   15940:	pop	{pc}		; (ldr pc, [sp], #4)
   15944:	str	r4, [sp, #-8]!
   15948:	str	lr, [sp, #4]
   1594c:	mov	r1, #0
   15950:	bl	10e18 <setlocale@plt>
   15954:	ldr	r4, [sp]
   15958:	add	sp, sp, #4
   1595c:	pop	{pc}		; (ldr pc, [sp], #4)
   15960:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15964:	mov	r7, r0
   15968:	ldr	r6, [pc, #72]	; 159b8 <__assert_fail@plt+0x4b4c>
   1596c:	ldr	r5, [pc, #72]	; 159bc <__assert_fail@plt+0x4b50>
   15970:	add	r6, pc, r6
   15974:	add	r5, pc, r5
   15978:	sub	r6, r6, r5
   1597c:	mov	r8, r1
   15980:	mov	r9, r2
   15984:	bl	10c00 <calloc@plt-0x20>
   15988:	asrs	r6, r6, #2
   1598c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15990:	mov	r4, #0
   15994:	add	r4, r4, #1
   15998:	ldr	r3, [r5], #4
   1599c:	mov	r2, r9
   159a0:	mov	r1, r8
   159a4:	mov	r0, r7
   159a8:	blx	r3
   159ac:	cmp	r6, r4
   159b0:	bne	15994 <__assert_fail@plt+0x4b28>
   159b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159b8:	muleq	r1, ip, r5
   159bc:	muleq	r1, r4, r5
   159c0:	bx	lr
   159c4:	ldr	r3, [pc, #12]	; 159d8 <__assert_fail@plt+0x4b6c>
   159c8:	mov	r1, #0
   159cc:	add	r3, pc, r3
   159d0:	ldr	r2, [r3]
   159d4:	b	10db8 <__cxa_atexit@plt>
   159d8:	andeq	r1, r1, r8, lsl #14

Disassembly of section .fini:

000159dc <.fini>:
   159dc:	push	{r3, lr}
   159e0:	pop	{r3, pc}
