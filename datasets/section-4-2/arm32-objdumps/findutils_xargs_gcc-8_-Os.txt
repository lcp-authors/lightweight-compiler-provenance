
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011158 <.init>:
   11158:	push	{r3, lr}
   1115c:	bl	123a4 <__assert_fail@plt+0xe60>
   11160:	pop	{r3, pc}

Disassembly of section .plt:

00011164 <fdopen@plt-0x14>:
   11164:	push	{lr}		; (str lr, [sp, #-4]!)
   11168:	ldr	lr, [pc, #4]	; 11174 <fdopen@plt-0x4>
   1116c:	add	lr, pc, lr
   11170:	ldr	pc, [lr, #8]!
   11174:	andeq	r9, r1, ip, lsl #29

00011178 <fdopen@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #102400	; 0x19000
   11180:	ldr	pc, [ip, #3724]!	; 0xe8c

00011184 <calloc@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #102400	; 0x19000
   1118c:	ldr	pc, [ip, #3716]!	; 0xe84

00011190 <strcmp@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #102400	; 0x19000
   11198:	ldr	pc, [ip, #3708]!	; 0xe7c

0001119c <strtol@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #102400	; 0x19000
   111a4:	ldr	pc, [ip, #3700]!	; 0xe74

000111a8 <printf@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #102400	; 0x19000
   111b0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111b4 <read@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #102400	; 0x19000
   111bc:	ldr	pc, [ip, #3684]!	; 0xe64

000111c0 <fflush@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111cc <wcwidth@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3668]!	; 0xe54

000111d8 <free@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111e4 <ferror@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3652]!	; 0xe44

000111f0 <_exit@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111fc <memcpy@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3636]!	; 0xe34

00011208 <execvp@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3628]!	; 0xe2c

00011214 <mbsinit@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3620]!	; 0xe24

00011220 <signal@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3612]!	; 0xe1c

0001122c <memcmp@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3604]!	; 0xe14

00011238 <dcgettext@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3596]!	; 0xe0c

00011244 <sysconf@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3588]!	; 0xe04

00011250 <dup2@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3580]!	; 0xdfc

0001125c <getrlimit64@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3572]!	; 0xdf4

00011268 <realloc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3564]!	; 0xdec

00011274 <textdomain@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3556]!	; 0xde4

00011280 <iswcntrl@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3548]!	; 0xddc

0001128c <iswprint@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3540]!	; 0xdd4

00011298 <poll@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112a4 <sigaction@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3524]!	; 0xdc4

000112b0 <lseek64@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112bc <waitpid@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112c8 <__ctype_get_mb_cur_max@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3500]!	; 0xdac

000112d4 <strcpy@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3492]!	; 0xda4

000112e0 <__fpending@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112ec <mbrtowc@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3476]!	; 0xd94

000112f8 <error@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3468]!	; 0xd8c

00011304 <opendir@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3460]!	; 0xd84

00011310 <open64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3452]!	; 0xd7c

0001131c <getenv@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3444]!	; 0xd74

00011328 <malloc@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3436]!	; 0xd6c

00011334 <__libc_start_main@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3428]!	; 0xd64

00011340 <__freading@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3420]!	; 0xd5c

0001134c <__gmon_start__@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3412]!	; 0xd54

00011358 <getopt_long@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3404]!	; 0xd4c

00011364 <__ctype_b_loc@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3396]!	; 0xd44

00011370 <getpid@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3388]!	; 0xd3c

0001137c <exit@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3380]!	; 0xd34

00011388 <strtoul@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3372]!	; 0xd2c

00011394 <strlen@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #102400	; 0x19000
   1139c:	ldr	pc, [ip, #3364]!	; 0xd24

000113a0 <strchr@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113ac <setenv@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3348]!	; 0xd14

000113b8 <fprintf@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113c4 <__errno_location@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3332]!	; 0xd04

000113d0 <snprintf@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #102400	; 0x19000
   113d8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113dc <__cxa_atexit@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #102400	; 0x19000
   113e4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113e8 <memset@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #102400	; 0x19000
   113f0:	ldr	pc, [ip, #3308]!	; 0xcec

000113f4 <strncpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #102400	; 0x19000
   113fc:	ldr	pc, [ip, #3300]!	; 0xce4

00011400 <write@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #102400	; 0x19000
   11408:	ldr	pc, [ip, #3292]!	; 0xcdc

0001140c <fileno@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #102400	; 0x19000
   11414:	ldr	pc, [ip, #3284]!	; 0xcd4

00011418 <memchr@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #102400	; 0x19000
   11420:	ldr	pc, [ip, #3276]!	; 0xccc

00011424 <fclose@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #102400	; 0x19000
   1142c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011430 <strnlen@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #102400	; 0x19000
   11438:	ldr	pc, [ip, #3260]!	; 0xcbc

0001143c <pipe@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #102400	; 0x19000
   11444:	ldr	pc, [ip, #3252]!	; 0xcb4

00011448 <fseeko64@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #102400	; 0x19000
   11450:	ldr	pc, [ip, #3244]!	; 0xcac

00011454 <fcntl64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #102400	; 0x19000
   1145c:	ldr	pc, [ip, #3236]!	; 0xca4

00011460 <setlocale@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #102400	; 0x19000
   11468:	ldr	pc, [ip, #3228]!	; 0xc9c

0001146c <sigemptyset@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #102400	; 0x19000
   11474:	ldr	pc, [ip, #3220]!	; 0xc94

00011478 <fork@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #102400	; 0x19000
   11480:	ldr	pc, [ip, #3212]!	; 0xc8c

00011484 <strrchr@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #102400	; 0x19000
   1148c:	ldr	pc, [ip, #3204]!	; 0xc84

00011490 <nl_langinfo@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #102400	; 0x19000
   11498:	ldr	pc, [ip, #3196]!	; 0xc7c

0001149c <fputc@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #102400	; 0x19000
   114a4:	ldr	pc, [ip, #3188]!	; 0xc74

000114a8 <readdir64@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #102400	; 0x19000
   114b0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114b4 <fdopendir@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #3172]!	; 0xc64

000114c0 <putc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114cc <dirfd@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #3156]!	; 0xc54

000114d8 <bindtextdomain@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114e4 <isatty@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #3140]!	; 0xc44

000114f0 <unsetenv@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114fc <fputs@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #102400	; 0x19000
   11504:	ldr	pc, [ip, #3124]!	; 0xc34

00011508 <strncmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #102400	; 0x19000
   11510:	ldr	pc, [ip, #3116]!	; 0xc2c

00011514 <abort@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #102400	; 0x19000
   1151c:	ldr	pc, [ip, #3108]!	; 0xc24

00011520 <getc@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #102400	; 0x19000
   11528:	ldr	pc, [ip, #3100]!	; 0xc1c

0001152c <close@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #102400	; 0x19000
   11534:	ldr	pc, [ip, #3092]!	; 0xc14

00011538 <closedir@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #102400	; 0x19000
   11540:	ldr	pc, [ip, #3084]!	; 0xc0c

00011544 <__assert_fail@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #102400	; 0x19000
   1154c:	ldr	pc, [ip, #3076]!	; 0xc04

Disassembly of section .text:

00011550 <.text>:
   11550:	push	{r4, lr}
   11554:	bl	113c4 <__errno_location@plt>
   11558:	mov	r3, #12
   1155c:	str	r3, [r0]
   11560:	mov	r0, #0
   11564:	pop	{r4, pc}
   11568:	ldr	r3, [pc, #3336]	; 12278 <__assert_fail@plt+0xd34>
   1156c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11570:	sub	sp, sp, #220	; 0xdc
   11574:	ldr	r4, [pc, #3328]	; 1227c <__assert_fail@plt+0xd38>
   11578:	str	r0, [sp, #32]
   1157c:	ldr	r0, [r3]
   11580:	str	r1, [sp, #28]
   11584:	ldrb	r3, [r3, #4]
   11588:	mov	r5, r4
   1158c:	str	r0, [sp, #68]	; 0x44
   11590:	ldr	r0, [r1]
   11594:	strb	r3, [sp, #72]	; 0x48
   11598:	cmp	r0, #0
   1159c:	ldreq	r0, [pc, #3292]	; 12280 <__assert_fail@plt+0xd3c>
   115a0:	bl	15664 <__assert_fail@plt+0x4120>
   115a4:	bl	143a4 <__assert_fail@plt+0x2e60>
   115a8:	bl	11370 <getpid@plt>
   115ac:	mov	r3, #0
   115b0:	ldr	r1, [pc, #3276]	; 12284 <__assert_fail@plt+0xd40>
   115b4:	str	r0, [r4, #164]	; 0xa4
   115b8:	mov	r0, #6
   115bc:	str	r3, [r4, #172]	; 0xac
   115c0:	bl	11460 <setlocale@plt>
   115c4:	ldr	r1, [pc, #3260]	; 12288 <__assert_fail@plt+0xd44>
   115c8:	ldr	r0, [pc, #3260]	; 1228c <__assert_fail@plt+0xd48>
   115cc:	bl	114d8 <bindtextdomain@plt>
   115d0:	ldr	r0, [pc, #3252]	; 1228c <__assert_fail@plt+0xd48>
   115d4:	bl	11274 <textdomain@plt>
   115d8:	ldr	r0, [pc, #3248]	; 12290 <__assert_fail@plt+0xd4c>
   115dc:	bl	180e8 <__assert_fail@plt+0x6ba4>
   115e0:	cmp	r0, #0
   115e4:	beq	11610 <__assert_fail@plt+0xcc>
   115e8:	bl	113c4 <__errno_location@plt>
   115ec:	ldr	r4, [r0]
   115f0:	mov	r2, #5
   115f4:	mov	r0, #0
   115f8:	ldr	r1, [pc, #3220]	; 12294 <__assert_fail@plt+0xd50>
   115fc:	bl	11238 <dcgettext@plt>
   11600:	mov	r2, r0
   11604:	mov	r0, #1
   11608:	mov	r1, r4
   1160c:	bl	112f8 <error@plt>
   11610:	ldr	r0, [pc, #3200]	; 12298 <__assert_fail@plt+0xd54>
   11614:	bl	180e8 <__assert_fail@plt+0x6ba4>
   11618:	subs	sl, r0, #0
   1161c:	bne	115e8 <__assert_fail@plt+0xa4>
   11620:	mov	r1, #2048	; 0x800
   11624:	add	r0, r4, #88	; 0x58
   11628:	bl	13f20 <__assert_fail@plt+0x29dc>
   1162c:	sub	r3, r0, #1
   11630:	mov	r7, r0
   11634:	cmp	r3, #1
   11638:	ldrls	r3, [pc, #3164]	; 1229c <__assert_fail@plt+0xd58>
   1163c:	bls	116b4 <__assert_fail@plt+0x170>
   11640:	mov	r0, sl
   11644:	bl	11244 <sysconf@plt>
   11648:	cmp	r0, #0
   1164c:	ble	11680 <__assert_fail@plt+0x13c>
   11650:	cmp	r0, #2048	; 0x800
   11654:	bgt	1166c <__assert_fail@plt+0x128>
   11658:	ldr	r3, [pc, #3136]	; 122a0 <__assert_fail@plt+0xd5c>
   1165c:	movw	r2, #483	; 0x1e3
   11660:	ldr	r1, [pc, #3132]	; 122a4 <__assert_fail@plt+0xd60>
   11664:	ldr	r0, [pc, #3132]	; 122a8 <__assert_fail@plt+0xd64>
   11668:	bl	11544 <__assert_fail@plt>
   1166c:	ldr	r3, [r4, #100]	; 0x64
   11670:	sub	r0, r0, #2048	; 0x800
   11674:	cmp	r3, r0
   11678:	strls	r3, [r4, #100]	; 0x64
   1167c:	strhi	r0, [r4, #100]	; 0x64
   11680:	ldr	r3, [r5, #100]	; 0x64
   11684:	cmp	r3, #2048	; 0x800
   11688:	bcs	116a0 <__assert_fail@plt+0x15c>
   1168c:	ldr	r3, [pc, #3084]	; 122a0 <__assert_fail@plt+0xd5c>
   11690:	movw	r2, #511	; 0x1ff
   11694:	ldr	r1, [pc, #3080]	; 122a4 <__assert_fail@plt+0xd60>
   11698:	ldr	r0, [pc, #3084]	; 122ac <__assert_fail@plt+0xd68>
   1169c:	b	11668 <__assert_fail@plt+0x124>
   116a0:	ldr	r3, [pc, #3080]	; 122b0 <__assert_fail@plt+0xd6c>
   116a4:	ldr	r0, [pc, #3080]	; 122b4 <__assert_fail@plt+0xd70>
   116a8:	str	r3, [r5, #120]	; 0x78
   116ac:	bl	13fd8 <__assert_fail@plt+0x2a94>
   116b0:	ldr	r3, [pc, #3072]	; 122b8 <__assert_fail@plt+0xd74>
   116b4:	str	r3, [sp, #44]	; 0x2c
   116b8:	mov	r3, #0
   116bc:	ldr	fp, [pc, #3064]	; 122bc <__assert_fail@plt+0xd78>
   116c0:	str	r3, [sp, #48]	; 0x30
   116c4:	ldr	r3, [pc, #3060]	; 122c0 <__assert_fail@plt+0xd7c>
   116c8:	ldr	r4, [pc, #2988]	; 1227c <__assert_fail@plt+0xd38>
   116cc:	str	r3, [sp, #36]	; 0x24
   116d0:	mov	r3, #1
   116d4:	str	r3, [sp, #40]	; 0x28
   116d8:	b	118e4 <__assert_fail@plt+0x3a0>
   116dc:	cmp	r1, #105	; 0x69
   116e0:	beq	11b5c <__assert_fail@plt+0x618>
   116e4:	bgt	117c0 <__assert_fail@plt+0x27c>
   116e8:	cmp	r1, #80	; 0x50
   116ec:	beq	11cb0 <__assert_fail@plt+0x76c>
   116f0:	bgt	11780 <__assert_fail@plt+0x23c>
   116f4:	cmp	r1, #69	; 0x45
   116f8:	beq	11b30 <__assert_fail@plt+0x5ec>
   116fc:	bgt	11710 <__assert_fail@plt+0x1cc>
   11700:	cmp	r1, #48	; 0x30
   11704:	beq	118d4 <__assert_fail@plt+0x390>
   11708:	mov	r0, #1
   1170c:	b	117bc <__assert_fail@plt+0x278>
   11710:	cmp	r1, #73	; 0x49
   11714:	beq	11b5c <__assert_fail@plt+0x618>
   11718:	cmp	r1, #76	; 0x4c
   1171c:	bne	11708 <__assert_fail@plt+0x1c4>
   11720:	ldr	r0, [pc, #2972]	; 122c4 <__assert_fail@plt+0xd80>
   11724:	mov	r2, #1
   11728:	mvn	r3, #0
   1172c:	str	r2, [sp]
   11730:	ldr	r0, [r0]
   11734:	bl	12ad4 <__assert_fail@plt+0x1590>
   11738:	ldr	r3, [r4, #128]	; 0x80
   1173c:	str	r0, [r4, #124]	; 0x7c
   11740:	cmp	r3, #0
   11744:	beq	1175c <__assert_fail@plt+0x218>
   11748:	ldr	r1, [pc, #2936]	; 122c8 <__assert_fail@plt+0xd84>
   1174c:	ldr	r0, [pc, #2936]	; 122cc <__assert_fail@plt+0xd88>
   11750:	bl	1248c <__assert_fail@plt+0xf48>
   11754:	mov	r3, #0
   11758:	str	r3, [r4, #128]	; 0x80
   1175c:	ldr	r3, [r4, #112]	; 0x70
   11760:	cmp	r3, #0
   11764:	beq	118e4 <__assert_fail@plt+0x3a0>
   11768:	ldr	r1, [pc, #2912]	; 122d0 <__assert_fail@plt+0xd8c>
   1176c:	ldr	r0, [pc, #2904]	; 122cc <__assert_fail@plt+0xd88>
   11770:	bl	1248c <__assert_fail@plt+0xf48>
   11774:	mov	r3, #0
   11778:	str	r3, [r4, #112]	; 0x70
   1177c:	b	118e4 <__assert_fail@plt+0x3a0>
   11780:	cmp	r1, #100	; 0x64
   11784:	beq	1197c <__assert_fail@plt+0x438>
   11788:	bgt	117a8 <__assert_fail@plt+0x264>
   1178c:	cmp	r1, #83	; 0x53
   11790:	beq	11d28 <__assert_fail@plt+0x7e4>
   11794:	cmp	r1, #97	; 0x61
   11798:	bne	11708 <__assert_fail@plt+0x1c4>
   1179c:	ldr	r3, [pc, #2848]	; 122c4 <__assert_fail@plt+0xd80>
   117a0:	ldr	fp, [r3]
   117a4:	b	118e4 <__assert_fail@plt+0x3a0>
   117a8:	cmp	r1, #101	; 0x65
   117ac:	beq	11b30 <__assert_fail@plt+0x5ec>
   117b0:	cmp	r1, #104	; 0x68
   117b4:	moveq	r0, #0
   117b8:	bne	11708 <__assert_fail@plt+0x1c4>
   117bc:	bl	127c4 <__assert_fail@plt+0x1280>
   117c0:	cmp	r1, #114	; 0x72
   117c4:	beq	11d34 <__assert_fail@plt+0x7f0>
   117c8:	bgt	1185c <__assert_fail@plt+0x318>
   117cc:	cmp	r1, #110	; 0x6e
   117d0:	beq	11bb8 <__assert_fail@plt+0x674>
   117d4:	bgt	11840 <__assert_fail@plt+0x2fc>
   117d8:	cmp	r1, #108	; 0x6c
   117dc:	bne	11708 <__assert_fail@plt+0x1c4>
   117e0:	ldr	r3, [pc, #2780]	; 122c4 <__assert_fail@plt+0xd80>
   117e4:	mov	r2, #1
   117e8:	ldr	r0, [r3]
   117ec:	cmp	r0, #0
   117f0:	streq	r2, [r4, #124]	; 0x7c
   117f4:	beq	11808 <__assert_fail@plt+0x2c4>
   117f8:	mvn	r3, #0
   117fc:	str	r2, [sp]
   11800:	bl	12ad4 <__assert_fail@plt+0x1590>
   11804:	str	r0, [r4, #124]	; 0x7c
   11808:	ldr	r3, [r4, #128]	; 0x80
   1180c:	cmp	r3, #0
   11810:	beq	11828 <__assert_fail@plt+0x2e4>
   11814:	ldr	r1, [pc, #2732]	; 122c8 <__assert_fail@plt+0xd84>
   11818:	ldr	r0, [pc, #2740]	; 122d4 <__assert_fail@plt+0xd90>
   1181c:	bl	1248c <__assert_fail@plt+0xf48>
   11820:	mov	r3, #0
   11824:	str	r3, [r4, #128]	; 0x80
   11828:	ldr	r3, [r4, #112]	; 0x70
   1182c:	cmp	r3, #0
   11830:	beq	118e4 <__assert_fail@plt+0x3a0>
   11834:	ldr	r1, [pc, #2708]	; 122d0 <__assert_fail@plt+0xd8c>
   11838:	ldr	r0, [pc, #2708]	; 122d4 <__assert_fail@plt+0xd90>
   1183c:	b	11770 <__assert_fail@plt+0x22c>
   11840:	cmp	r1, #111	; 0x6f
   11844:	mov	r3, #1
   11848:	beq	11ca8 <__assert_fail@plt+0x764>
   1184c:	cmp	r1, #112	; 0x70
   11850:	bne	11708 <__assert_fail@plt+0x1c4>
   11854:	strb	r3, [r4, #72]	; 0x48
   11858:	b	1187c <__assert_fail@plt+0x338>
   1185c:	cmp	r1, #118	; 0x76
   11860:	beq	11cd8 <__assert_fail@plt+0x794>
   11864:	bgt	11884 <__assert_fail@plt+0x340>
   11868:	cmp	r1, #115	; 0x73
   1186c:	beq	11c28 <__assert_fail@plt+0x6e4>
   11870:	cmp	r1, #116	; 0x74
   11874:	bne	11708 <__assert_fail@plt+0x1c4>
   11878:	mov	r3, #1
   1187c:	strb	r3, [r4, #73]	; 0x49
   11880:	b	118e4 <__assert_fail@plt+0x3a0>
   11884:	cmp	r1, #120	; 0x78
   11888:	beq	11c9c <__assert_fail@plt+0x758>
   1188c:	cmp	r1, #256	; 0x100
   11890:	bne	11708 <__assert_fail@plt+0x1c4>
   11894:	ldr	r3, [pc, #2600]	; 122c4 <__assert_fail@plt+0xd80>
   11898:	mov	r1, #61	; 0x3d
   1189c:	ldr	r6, [r3]
   118a0:	mov	r0, r6
   118a4:	bl	113a0 <strchr@plt>
   118a8:	cmp	r0, #0
   118ac:	beq	11cec <__assert_fail@plt+0x7a8>
   118b0:	mov	r2, #5
   118b4:	ldr	r1, [pc, #2588]	; 122d8 <__assert_fail@plt+0xd94>
   118b8:	mov	r0, #0
   118bc:	bl	11238 <dcgettext@plt>
   118c0:	ldr	r3, [pc, #2580]	; 122dc <__assert_fail@plt+0xd98>
   118c4:	ldr	r2, [sp, #60]	; 0x3c
   118c8:	add	r3, r3, r2, lsl #4
   118cc:	ldr	r3, [r3, #32]
   118d0:	b	11afc <__assert_fail@plt+0x5b8>
   118d4:	mov	r3, #0
   118d8:	strb	r3, [r4, #144]	; 0x90
   118dc:	ldr	r3, [pc, #2556]	; 122e0 <__assert_fail@plt+0xd9c>
   118e0:	str	r3, [sp, #36]	; 0x24
   118e4:	add	r3, sp, #60	; 0x3c
   118e8:	ldr	r2, [pc, #2548]	; 122e4 <__assert_fail@plt+0xda0>
   118ec:	str	r3, [sp]
   118f0:	ldr	r3, [pc, #2544]	; 122e8 <__assert_fail@plt+0xda4>
   118f4:	ldr	r1, [sp, #28]
   118f8:	ldr	r0, [sp, #32]
   118fc:	bl	11358 <getopt_long@plt>
   11900:	cmn	r0, #1
   11904:	mov	r1, r0
   11908:	bne	116dc <__assert_fail@plt+0x198>
   1190c:	ldr	r4, [pc, #2408]	; 1227c <__assert_fail@plt+0xd38>
   11910:	ldr	r3, [pc, #2504]	; 122e0 <__assert_fail@plt+0xd9c>
   11914:	ldr	r1, [sp, #36]	; 0x24
   11918:	ldr	r2, [r4, #156]	; 0x9c
   1191c:	sub	r3, r1, r3
   11920:	clz	r3, r3
   11924:	lsr	r3, r3, #5
   11928:	cmp	r2, #0
   1192c:	moveq	r3, #0
   11930:	cmp	r3, #0
   11934:	beq	11958 <__assert_fail@plt+0x414>
   11938:	mov	r2, #5
   1193c:	ldr	r1, [pc, #2472]	; 122ec <__assert_fail@plt+0xda8>
   11940:	mov	r0, #0
   11944:	bl	11238 <dcgettext@plt>
   11948:	mov	r1, #0
   1194c:	mov	r2, r0
   11950:	mov	r0, r1
   11954:	bl	112f8 <error@plt>
   11958:	ldr	r3, [sp, #44]	; 0x2c
   1195c:	blx	r3
   11960:	cmp	r7, #0
   11964:	beq	11d40 <__assert_fail@plt+0x7fc>
   11968:	ldr	r3, [pc, #2352]	; 122a0 <__assert_fail@plt+0xd5c>
   1196c:	movw	r2, #723	; 0x2d3
   11970:	ldr	r1, [pc, #2348]	; 122a4 <__assert_fail@plt+0xd60>
   11974:	ldr	r0, [pc, #2420]	; 122f0 <__assert_fail@plt+0xdac>
   11978:	b	11668 <__assert_fail@plt+0x124>
   1197c:	ldr	r3, [pc, #2368]	; 122c4 <__assert_fail@plt+0xd80>
   11980:	ldr	r6, [r3]
   11984:	mov	r0, r6
   11988:	bl	11394 <strlen@plt>
   1198c:	cmp	r0, #1
   11990:	ldrb	r8, [r6]
   11994:	beq	119c8 <__assert_fail@plt+0x484>
   11998:	cmp	r8, #92	; 0x5c
   1199c:	bne	11ae8 <__assert_fail@plt+0x5a4>
   119a0:	ldrb	r8, [r6, #1]
   119a4:	cmp	r8, #102	; 0x66
   119a8:	beq	11b08 <__assert_fail@plt+0x5c4>
   119ac:	bhi	119d0 <__assert_fail@plt+0x48c>
   119b0:	cmp	r8, #97	; 0x61
   119b4:	beq	11b10 <__assert_fail@plt+0x5cc>
   119b8:	cmp	r8, #98	; 0x62
   119bc:	beq	11b18 <__assert_fail@plt+0x5d4>
   119c0:	cmp	r8, #92	; 0x5c
   119c4:	bne	119e8 <__assert_fail@plt+0x4a4>
   119c8:	strb	r8, [r4, #144]	; 0x90
   119cc:	b	118dc <__assert_fail@plt+0x398>
   119d0:	cmp	r8, #114	; 0x72
   119d4:	beq	11b20 <__assert_fail@plt+0x5dc>
   119d8:	bhi	11a7c <__assert_fail@plt+0x538>
   119dc:	cmp	r8, #110	; 0x6e
   119e0:	moveq	r8, #10
   119e4:	beq	119c8 <__assert_fail@plt+0x484>
   119e8:	cmp	r8, #120	; 0x78
   119ec:	addeq	r3, r6, #2
   119f0:	moveq	r9, #16
   119f4:	beq	11a18 <__assert_fail@plt+0x4d4>
   119f8:	bl	11364 <__ctype_b_loc@plt>
   119fc:	ldr	r3, [r0]
   11a00:	lsl	r8, r8, #1
   11a04:	ldrh	r8, [r3, r8]
   11a08:	ands	r8, r8, #2048	; 0x800
   11a0c:	beq	11a94 <__assert_fail@plt+0x550>
   11a10:	add	r3, r6, #1
   11a14:	mov	r9, #8
   11a18:	str	r3, [sp, #36]	; 0x24
   11a1c:	mov	r8, #0
   11a20:	bl	113c4 <__errno_location@plt>
   11a24:	ldr	r3, [sp, #36]	; 0x24
   11a28:	mov	r2, r9
   11a2c:	add	r1, sp, #76	; 0x4c
   11a30:	str	r8, [r0]
   11a34:	str	r8, [sp, #76]	; 0x4c
   11a38:	mov	r0, r3
   11a3c:	bl	11388 <strtoul@plt>
   11a40:	cmp	r0, #255	; 0xff
   11a44:	bls	11ab8 <__assert_fail@plt+0x574>
   11a48:	cmp	r9, #16
   11a4c:	mov	r2, #5
   11a50:	ldreq	r1, [pc, #2204]	; 122f4 <__assert_fail@plt+0xdb0>
   11a54:	mov	r0, r8
   11a58:	ldrne	r1, [pc, #2200]	; 122f8 <__assert_fail@plt+0xdb4>
   11a5c:	bl	11238 <dcgettext@plt>
   11a60:	mov	r3, #255	; 0xff
   11a64:	mov	r2, r0
   11a68:	mov	r1, r8
   11a6c:	str	r3, [sp]
   11a70:	mov	r0, #1
   11a74:	mov	r3, r6
   11a78:	bl	112f8 <error@plt>
   11a7c:	cmp	r8, #116	; 0x74
   11a80:	beq	11b28 <__assert_fail@plt+0x5e4>
   11a84:	cmp	r8, #118	; 0x76
   11a88:	moveq	r8, #11
   11a8c:	beq	119c8 <__assert_fail@plt+0x484>
   11a90:	b	119e8 <__assert_fail@plt+0x4a4>
   11a94:	mov	r2, #5
   11a98:	ldr	r1, [pc, #2140]	; 122fc <__assert_fail@plt+0xdb8>
   11a9c:	mov	r0, r8
   11aa0:	bl	11238 <dcgettext@plt>
   11aa4:	mov	r2, r0
   11aa8:	mov	r3, r6
   11aac:	mov	r1, r8
   11ab0:	mov	r0, #1
   11ab4:	bl	112f8 <error@plt>
   11ab8:	ldr	r3, [sp, #76]	; 0x4c
   11abc:	ldrb	r3, [r3]
   11ac0:	cmp	r3, #0
   11ac4:	beq	11ae0 <__assert_fail@plt+0x59c>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #2092]	; 12300 <__assert_fail@plt+0xdbc>
   11ad0:	mov	r0, r8
   11ad4:	bl	11238 <dcgettext@plt>
   11ad8:	ldr	r3, [sp, #76]	; 0x4c
   11adc:	b	11a64 <__assert_fail@plt+0x520>
   11ae0:	uxtb	r8, r0
   11ae4:	b	119c8 <__assert_fail@plt+0x484>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #2064]	; 12304 <__assert_fail@plt+0xdc0>
   11af0:	mov	r0, #0
   11af4:	bl	11238 <dcgettext@plt>
   11af8:	mov	r3, r6
   11afc:	mov	r2, r0
   11b00:	mov	r1, #0
   11b04:	b	11ab0 <__assert_fail@plt+0x56c>
   11b08:	mov	r8, #12
   11b0c:	b	119c8 <__assert_fail@plt+0x484>
   11b10:	mov	r8, #7
   11b14:	b	119c8 <__assert_fail@plt+0x484>
   11b18:	mov	r8, #8
   11b1c:	b	119c8 <__assert_fail@plt+0x484>
   11b20:	mov	r8, #13
   11b24:	b	119c8 <__assert_fail@plt+0x484>
   11b28:	mov	r8, #9
   11b2c:	b	119c8 <__assert_fail@plt+0x484>
   11b30:	ldr	r3, [pc, #1932]	; 122c4 <__assert_fail@plt+0xd80>
   11b34:	ldr	r3, [r3]
   11b38:	cmp	r3, #0
   11b3c:	beq	11b54 <__assert_fail@plt+0x610>
   11b40:	ldrb	r2, [r3]
   11b44:	cmp	r2, #0
   11b48:	beq	11b54 <__assert_fail@plt+0x610>
   11b4c:	str	r3, [r4, #156]	; 0x9c
   11b50:	b	118e4 <__assert_fail@plt+0x3a0>
   11b54:	mov	r3, #0
   11b58:	b	11b4c <__assert_fail@plt+0x608>
   11b5c:	ldr	r3, [pc, #1888]	; 122c4 <__assert_fail@plt+0xd80>
   11b60:	ldr	r2, [pc, #1952]	; 12308 <__assert_fail@plt+0xdc4>
   11b64:	ldr	r3, [r3]
   11b68:	cmp	r3, #0
   11b6c:	moveq	r3, r2
   11b70:	str	r3, [r4, #112]	; 0x70
   11b74:	ldr	r3, [r4, #128]	; 0x80
   11b78:	cmp	r3, #0
   11b7c:	beq	11b94 <__assert_fail@plt+0x650>
   11b80:	ldr	r1, [pc, #1856]	; 122c8 <__assert_fail@plt+0xd84>
   11b84:	ldr	r0, [pc, #1920]	; 1230c <__assert_fail@plt+0xdc8>
   11b88:	bl	1248c <__assert_fail@plt+0xf48>
   11b8c:	mov	r3, #0
   11b90:	str	r3, [r4, #128]	; 0x80
   11b94:	ldr	r3, [r4, #124]	; 0x7c
   11b98:	cmp	r3, #0
   11b9c:	beq	118e4 <__assert_fail@plt+0x3a0>
   11ba0:	ldr	r1, [pc, #1896]	; 12310 <__assert_fail@plt+0xdcc>
   11ba4:	ldr	r0, [pc, #1888]	; 1230c <__assert_fail@plt+0xdc8>
   11ba8:	bl	1248c <__assert_fail@plt+0xf48>
   11bac:	mov	r3, #0
   11bb0:	str	r3, [r4, #124]	; 0x7c
   11bb4:	b	118e4 <__assert_fail@plt+0x3a0>
   11bb8:	ldr	r0, [pc, #1796]	; 122c4 <__assert_fail@plt+0xd80>
   11bbc:	mov	r2, #1
   11bc0:	mvn	r3, #0
   11bc4:	str	r2, [sp]
   11bc8:	ldr	r0, [r0]
   11bcc:	bl	12ad4 <__assert_fail@plt+0x1590>
   11bd0:	ldr	r3, [r4, #124]	; 0x7c
   11bd4:	str	r0, [r4, #128]	; 0x80
   11bd8:	cmp	r3, #0
   11bdc:	beq	11bf4 <__assert_fail@plt+0x6b0>
   11be0:	ldr	r1, [pc, #1832]	; 12310 <__assert_fail@plt+0xdcc>
   11be4:	ldr	r0, [pc, #1832]	; 12314 <__assert_fail@plt+0xdd0>
   11be8:	bl	1248c <__assert_fail@plt+0xf48>
   11bec:	mov	r3, #0
   11bf0:	str	r3, [r4, #124]	; 0x7c
   11bf4:	ldr	r3, [r4, #112]	; 0x70
   11bf8:	cmp	r3, #0
   11bfc:	beq	118e4 <__assert_fail@plt+0x3a0>
   11c00:	ldr	r3, [r4, #128]	; 0x80
   11c04:	mov	r6, #0
   11c08:	cmp	r3, #1
   11c0c:	streq	r6, [r4, #128]	; 0x80
   11c10:	beq	118e4 <__assert_fail@plt+0x3a0>
   11c14:	ldr	r1, [pc, #1716]	; 122d0 <__assert_fail@plt+0xd8c>
   11c18:	ldr	r0, [pc, #1780]	; 12314 <__assert_fail@plt+0xdd0>
   11c1c:	bl	1248c <__assert_fail@plt+0xf48>
   11c20:	str	r6, [r4, #112]	; 0x70
   11c24:	b	118e4 <__assert_fail@plt+0x3a0>
   11c28:	ldr	r3, [sp, #44]	; 0x2c
   11c2c:	mov	r6, #0
   11c30:	str	r1, [sp, #52]	; 0x34
   11c34:	blx	r3
   11c38:	ldr	r0, [pc, #1668]	; 122c4 <__assert_fail@plt+0xd80>
   11c3c:	mov	r2, #1
   11c40:	str	r6, [sp]
   11c44:	ldr	r1, [sp, #52]	; 0x34
   11c48:	ldr	r3, [r4, #92]	; 0x5c
   11c4c:	ldr	r0, [r0]
   11c50:	bl	12ad4 <__assert_fail@plt+0x1590>
   11c54:	ldr	r3, [r4, #92]	; 0x5c
   11c58:	mov	r8, r0
   11c5c:	cmp	r3, r0
   11c60:	bcs	11c94 <__assert_fail@plt+0x750>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #1704]	; 12318 <__assert_fail@plt+0xdd4>
   11c6c:	mov	r0, r6
   11c70:	bl	11238 <dcgettext@plt>
   11c74:	ldr	r3, [r4, #92]	; 0x5c
   11c78:	mov	r2, r0
   11c7c:	mov	r1, r6
   11c80:	mov	r0, r6
   11c84:	str	r3, [sp]
   11c88:	mov	r3, r8
   11c8c:	bl	112f8 <error@plt>
   11c90:	ldr	r8, [r4, #92]	; 0x5c
   11c94:	str	r8, [r4, #100]	; 0x64
   11c98:	b	118e4 <__assert_fail@plt+0x3a0>
   11c9c:	mov	r3, #1
   11ca0:	str	r3, [r4, #88]	; 0x58
   11ca4:	b	118e4 <__assert_fail@plt+0x3a0>
   11ca8:	strb	r3, [r4, #80]	; 0x50
   11cac:	b	118e4 <__assert_fail@plt+0x3a0>
   11cb0:	ldr	r0, [pc, #1548]	; 122c4 <__assert_fail@plt+0xd80>
   11cb4:	mov	r3, #1
   11cb8:	mov	r2, #0
   11cbc:	str	r3, [sp]
   11cc0:	mvn	r3, #-2147483648	; 0x80000000
   11cc4:	ldr	r0, [r0]
   11cc8:	bl	12ad4 <__assert_fail@plt+0x1590>
   11ccc:	ldr	r3, [pc, #1608]	; 1231c <__assert_fail@plt+0xdd8>
   11cd0:	str	r0, [r3]
   11cd4:	b	118e4 <__assert_fail@plt+0x3a0>
   11cd8:	ldr	r0, [pc, #1440]	; 12280 <__assert_fail@plt+0xd3c>
   11cdc:	bl	145a0 <__assert_fail@plt+0x305c>
   11ce0:	mov	r0, sl
   11ce4:	add	sp, sp, #220	; 0xdc
   11ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cec:	mov	r0, r6
   11cf0:	str	r6, [r4, #76]	; 0x4c
   11cf4:	bl	114f0 <unsetenv@plt>
   11cf8:	cmp	r0, #0
   11cfc:	beq	118e4 <__assert_fail@plt+0x3a0>
   11d00:	bl	113c4 <__errno_location@plt>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #1552]	; 12320 <__assert_fail@plt+0xddc>
   11d0c:	ldr	r4, [r0]
   11d10:	mov	r0, #0
   11d14:	bl	11238 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	mov	r3, r6
   11d20:	mov	r1, r4
   11d24:	b	11ab0 <__assert_fail@plt+0x56c>
   11d28:	mov	r3, #1
   11d2c:	str	r3, [sp, #48]	; 0x30
   11d30:	b	118e4 <__assert_fail@plt+0x3a0>
   11d34:	mov	r3, #0
   11d38:	str	r3, [sp, #40]	; 0x28
   11d3c:	b	118e4 <__assert_fail@plt+0x3a0>
   11d40:	ldr	r3, [pc, #1500]	; 12324 <__assert_fail@plt+0xde0>
   11d44:	add	r0, sp, #80	; 0x50
   11d48:	str	r3, [sp, #76]	; 0x4c
   11d4c:	bl	1146c <sigemptyset@plt>
   11d50:	mov	r2, r7
   11d54:	add	r1, sp, #76	; 0x4c
   11d58:	str	r7, [sp, #208]	; 0xd0
   11d5c:	mov	r0, #10
   11d60:	bl	112a4 <sigaction@plt>
   11d64:	cmp	r0, #0
   11d68:	beq	11d94 <__assert_fail@plt+0x850>
   11d6c:	bl	113c4 <__errno_location@plt>
   11d70:	ldr	r6, [r0]
   11d74:	mov	r2, #5
   11d78:	mov	r0, r7
   11d7c:	ldr	r1, [pc, #1444]	; 12328 <__assert_fail@plt+0xde4>
   11d80:	bl	11238 <dcgettext@plt>
   11d84:	mov	r2, r0
   11d88:	mov	r0, r7
   11d8c:	mov	r1, r6
   11d90:	bl	112f8 <error@plt>
   11d94:	ldr	r3, [pc, #1424]	; 1232c <__assert_fail@plt+0xde8>
   11d98:	mov	r6, #0
   11d9c:	add	r0, sp, #80	; 0x50
   11da0:	str	r3, [sp, #76]	; 0x4c
   11da4:	bl	1146c <sigemptyset@plt>
   11da8:	mov	r2, r6
   11dac:	add	r1, sp, #76	; 0x4c
   11db0:	str	r6, [sp, #208]	; 0xd0
   11db4:	mov	r0, #12
   11db8:	bl	112a4 <sigaction@plt>
   11dbc:	cmp	r0, r6
   11dc0:	beq	11dec <__assert_fail@plt+0x8a8>
   11dc4:	bl	113c4 <__errno_location@plt>
   11dc8:	ldr	r7, [r0]
   11dcc:	mov	r2, #5
   11dd0:	mov	r0, r6
   11dd4:	ldr	r1, [pc, #1364]	; 12330 <__assert_fail@plt+0xdec>
   11dd8:	bl	11238 <dcgettext@plt>
   11ddc:	mov	r2, r0
   11de0:	mov	r0, r6
   11de4:	mov	r1, r7
   11de8:	bl	112f8 <error@plt>
   11dec:	ldr	r1, [pc, #1224]	; 122bc <__assert_fail@plt+0xd78>
   11df0:	mov	r0, fp
   11df4:	bl	11190 <strcmp@plt>
   11df8:	cmp	r0, #0
   11dfc:	bne	120a4 <__assert_fail@plt+0xb60>
   11e00:	ldr	r3, [pc, #1324]	; 12334 <__assert_fail@plt+0xdf0>
   11e04:	ldr	r3, [r3]
   11e08:	str	r3, [r4, #140]	; 0x8c
   11e0c:	ldr	r3, [r4, #112]	; 0x70
   11e10:	cmp	r3, #0
   11e14:	bne	11e24 <__assert_fail@plt+0x8e0>
   11e18:	ldr	r3, [r4, #124]	; 0x7c
   11e1c:	cmp	r3, #0
   11e20:	beq	11e2c <__assert_fail@plt+0x8e8>
   11e24:	mov	r3, #1
   11e28:	str	r3, [r4, #88]	; 0x58
   11e2c:	ldr	r6, [pc, #1284]	; 12338 <__assert_fail@plt+0xdf4>
   11e30:	ldr	r2, [sp, #32]
   11e34:	ldr	r3, [r6]
   11e38:	cmp	r3, r2
   11e3c:	bne	11e60 <__assert_fail@plt+0x91c>
   11e40:	mov	r3, #0
   11e44:	str	r3, [r6]
   11e48:	add	r3, sp, #68	; 0x44
   11e4c:	str	r3, [sp, #64]	; 0x40
   11e50:	add	r3, sp, #64	; 0x40
   11e54:	str	r3, [sp, #28]
   11e58:	mov	r3, #1
   11e5c:	str	r3, [sp, #32]
   11e60:	ldr	r3, [sp, #48]	; 0x30
   11e64:	cmp	r3, #0
   11e68:	beq	11fdc <__assert_fail@plt+0xa98>
   11e6c:	ldr	r7, [pc, #1224]	; 1233c <__assert_fail@plt+0xdf8>
   11e70:	mov	r2, #5
   11e74:	mov	r0, #0
   11e78:	ldr	r1, [pc, #1216]	; 12340 <__assert_fail@plt+0xdfc>
   11e7c:	ldr	r8, [r7]
   11e80:	bl	11238 <dcgettext@plt>
   11e84:	mov	r9, r0
   11e88:	bl	13ee4 <__assert_fail@plt+0x29a0>
   11e8c:	mov	r2, r0
   11e90:	mov	r3, #0
   11e94:	mov	r1, r9
   11e98:	mov	r0, r8
   11e9c:	bl	113b8 <fprintf@plt>
   11ea0:	ldr	r8, [r7]
   11ea4:	mov	r2, #5
   11ea8:	mov	r0, #0
   11eac:	ldr	r1, [pc, #1168]	; 12344 <__assert_fail@plt+0xe00>
   11eb0:	bl	11238 <dcgettext@plt>
   11eb4:	mov	r1, r0
   11eb8:	mov	r3, #0
   11ebc:	ldr	r2, [r5, #92]	; 0x5c
   11ec0:	mov	r0, r8
   11ec4:	bl	113b8 <fprintf@plt>
   11ec8:	ldr	r8, [r7]
   11ecc:	mov	r2, #5
   11ed0:	mov	r0, #0
   11ed4:	ldr	r1, [pc, #1132]	; 12348 <__assert_fail@plt+0xe04>
   11ed8:	bl	11238 <dcgettext@plt>
   11edc:	mov	r1, r0
   11ee0:	mov	r3, #0
   11ee4:	ldr	r2, [r5, #96]	; 0x60
   11ee8:	mov	r0, r8
   11eec:	bl	113b8 <fprintf@plt>
   11ef0:	mov	r2, #5
   11ef4:	ldr	r1, [pc, #1104]	; 1234c <__assert_fail@plt+0xe08>
   11ef8:	mov	r0, #0
   11efc:	ldr	r8, [r7]
   11f00:	bl	11238 <dcgettext@plt>
   11f04:	ldr	sl, [r5, #92]	; 0x5c
   11f08:	mov	r9, r0
   11f0c:	bl	13ee4 <__assert_fail@plt+0x29a0>
   11f10:	mov	r3, #0
   11f14:	mov	r1, r9
   11f18:	sub	r2, sl, r0
   11f1c:	mov	r0, r8
   11f20:	bl	113b8 <fprintf@plt>
   11f24:	ldr	r8, [r7]
   11f28:	mov	r2, #5
   11f2c:	mov	r0, #0
   11f30:	ldr	r1, [pc, #1048]	; 12350 <__assert_fail@plt+0xe0c>
   11f34:	bl	11238 <dcgettext@plt>
   11f38:	mov	r1, r0
   11f3c:	mov	r3, #0
   11f40:	ldr	r2, [r5, #100]	; 0x64
   11f44:	mov	r0, r8
   11f48:	bl	113b8 <fprintf@plt>
   11f4c:	ldr	r8, [r7]
   11f50:	mov	r2, #5
   11f54:	mov	r0, #0
   11f58:	ldr	r1, [pc, #1012]	; 12354 <__assert_fail@plt+0xe10>
   11f5c:	bl	11238 <dcgettext@plt>
   11f60:	mov	r1, r0
   11f64:	mvn	r2, #-2147483648	; 0x80000000
   11f68:	mov	r3, #0
   11f6c:	mov	r0, r8
   11f70:	bl	113b8 <fprintf@plt>
   11f74:	mov	r0, #0
   11f78:	bl	114e4 <isatty@plt>
   11f7c:	cmp	r0, #0
   11f80:	beq	11fdc <__assert_fail@plt+0xa98>
   11f84:	ldr	r8, [r7]
   11f88:	mov	r2, #5
   11f8c:	mov	r0, #0
   11f90:	ldr	r1, [pc, #960]	; 12358 <__assert_fail@plt+0xe14>
   11f94:	bl	11238 <dcgettext@plt>
   11f98:	mov	r1, r0
   11f9c:	mov	r0, r8
   11fa0:	bl	113b8 <fprintf@plt>
   11fa4:	ldr	r3, [sp, #40]	; 0x28
   11fa8:	cmp	r3, #0
   11fac:	beq	11fdc <__assert_fail@plt+0xa98>
   11fb0:	mov	r2, #5
   11fb4:	ldr	r1, [pc, #928]	; 1235c <__assert_fail@plt+0xe18>
   11fb8:	mov	r0, #0
   11fbc:	ldr	r7, [r7]
   11fc0:	bl	11238 <dcgettext@plt>
   11fc4:	ldr	r3, [r6]
   11fc8:	mov	r1, r0
   11fcc:	ldr	r2, [sp, #28]
   11fd0:	mov	r0, r7
   11fd4:	ldr	r2, [r2, r3, lsl #2]
   11fd8:	bl	113b8 <fprintf@plt>
   11fdc:	ldr	r0, [r4, #100]	; 0x64
   11fe0:	add	r0, r0, #1
   11fe4:	bl	17228 <__assert_fail@plt+0x5ce4>
   11fe8:	str	r0, [r4, #132]	; 0x84
   11fec:	ldr	r0, [r4, #100]	; 0x64
   11ff0:	add	r0, r0, #1
   11ff4:	bl	17228 <__assert_fail@plt+0x5ce4>
   11ff8:	mov	r1, #0
   11ffc:	str	r0, [r4, #28]
   12000:	mov	r0, #17
   12004:	bl	11220 <signal@plt>
   12008:	ldr	r3, [r4, #112]	; 0x70
   1200c:	cmp	r3, #0
   12010:	bne	1216c <__assert_fail@plt+0xc28>
   12014:	ldr	r7, [pc, #768]	; 1231c <__assert_fail@plt+0xdd8>
   12018:	mov	r5, r3
   1201c:	ldr	r8, [pc, #828]	; 12360 <__assert_fail@plt+0xe1c>
   12020:	ldr	r3, [r6]
   12024:	ldr	r2, [sp, #32]
   12028:	cmp	r3, r2
   1202c:	blt	120fc <__assert_fail@plt+0xbb8>
   12030:	ldr	r2, [r4, #16]
   12034:	mov	r3, #0
   12038:	mov	r5, r3
   1203c:	ldr	r6, [pc, #796]	; 12360 <__assert_fail@plt+0xe1c>
   12040:	strb	r3, [r7, #4]
   12044:	str	r2, [r4, #116]	; 0x74
   12048:	ldr	r2, [r4, #32]
   1204c:	str	r2, [r4, #36]	; 0x24
   12050:	ldr	r3, [sp, #36]	; 0x24
   12054:	blx	r3
   12058:	cmn	r0, #1
   1205c:	bne	12140 <__assert_fail@plt+0xbfc>
   12060:	ldr	r2, [r4, #16]
   12064:	ldr	r3, [r4, #116]	; 0x74
   12068:	cmp	r2, r3
   1206c:	bne	12088 <__assert_fail@plt+0xb44>
   12070:	ldr	r3, [sp, #40]	; 0x28
   12074:	cmp	r3, #0
   12078:	beq	12094 <__assert_fail@plt+0xb50>
   1207c:	ldrb	r3, [r4, #64]	; 0x40
   12080:	cmp	r3, #0
   12084:	bne	12094 <__assert_fail@plt+0xb50>
   12088:	ldr	r1, [pc, #720]	; 12360 <__assert_fail@plt+0xe1c>
   1208c:	add	r0, r1, #72	; 0x48
   12090:	bl	13c44 <__assert_fail@plt+0x2700>
   12094:	ldr	r3, [r4, #60]	; 0x3c
   12098:	str	r3, [r4, #172]	; 0xac
   1209c:	ldr	sl, [r4, #60]	; 0x3c
   120a0:	b	11ce0 <__assert_fail@plt+0x79c>
   120a4:	mov	r6, #1
   120a8:	mov	r0, fp
   120ac:	str	r6, [r4, #84]	; 0x54
   120b0:	bl	12c08 <__assert_fail@plt+0x16c4>
   120b4:	cmp	r0, #0
   120b8:	mov	r7, r0
   120bc:	str	r0, [r4, #140]	; 0x8c
   120c0:	bne	11e0c <__assert_fail@plt+0x8c8>
   120c4:	bl	113c4 <__errno_location@plt>
   120c8:	mov	r2, #5
   120cc:	ldr	r1, [pc, #656]	; 12364 <__assert_fail@plt+0xe20>
   120d0:	ldr	r4, [r0]
   120d4:	mov	r0, r7
   120d8:	bl	11238 <dcgettext@plt>
   120dc:	mov	r5, r0
   120e0:	mov	r2, fp
   120e4:	mov	r1, #8
   120e8:	mov	r0, r7
   120ec:	bl	16a14 <__assert_fail@plt+0x54d0>
   120f0:	mov	r3, r0
   120f4:	mov	r2, r5
   120f8:	b	11d20 <__assert_fail@plt+0x7dc>
   120fc:	ldr	r2, [sp, #28]
   12100:	ldr	r9, [r2, r3, lsl #2]
   12104:	mov	r0, r9
   12108:	bl	11394 <strlen@plt>
   1210c:	ldrb	r3, [r7, #4]
   12110:	mov	r2, r9
   12114:	mov	r1, r8
   12118:	str	r5, [sp]
   1211c:	str	r5, [sp, #4]
   12120:	str	r3, [sp, #8]
   12124:	add	r3, r0, #1
   12128:	ldr	r0, [pc, #388]	; 122b4 <__assert_fail@plt+0xd70>
   1212c:	bl	13874 <__assert_fail@plt+0x2330>
   12130:	ldr	r3, [r6]
   12134:	add	r3, r3, #1
   12138:	str	r3, [r6]
   1213c:	b	12020 <__assert_fail@plt+0xadc>
   12140:	ldr	r3, [r4, #124]	; 0x7c
   12144:	cmp	r3, #0
   12148:	beq	12050 <__assert_fail@plt+0xb0c>
   1214c:	ldr	r2, [r4, #148]	; 0x94
   12150:	cmp	r3, r2
   12154:	bhi	12050 <__assert_fail@plt+0xb0c>
   12158:	mov	r1, r6
   1215c:	ldr	r0, [pc, #336]	; 122b4 <__assert_fail@plt+0xd70>
   12160:	bl	13c44 <__assert_fail@plt+0x2700>
   12164:	str	r5, [r4, #148]	; 0x94
   12168:	b	12050 <__assert_fail@plt+0xb0c>
   1216c:	ldr	r3, [sp, #32]
   12170:	lsl	r0, r3, #2
   12174:	bl	17228 <__assert_fail@plt+0x5ce4>
   12178:	ldr	r6, [r6]
   1217c:	mov	sl, r0
   12180:	ldr	r3, [sp, #32]
   12184:	cmp	r3, r6
   12188:	bgt	12228 <__assert_fail@plt+0xce4>
   1218c:	ldr	r9, [pc, #460]	; 12360 <__assert_fail@plt+0xe1c>
   12190:	ldr	fp, [pc, #388]	; 1231c <__assert_fail@plt+0xdd8>
   12194:	ldr	r0, [r4, #112]	; 0x70
   12198:	bl	11394 <strlen@plt>
   1219c:	str	r0, [r4, #108]	; 0x6c
   121a0:	ldr	r3, [sp, #36]	; 0x24
   121a4:	blx	r3
   121a8:	cmn	r0, #1
   121ac:	mov	r8, r0
   121b0:	beq	12094 <__assert_fail@plt+0xb50>
   121b4:	ldr	r7, [pc, #380]	; 12338 <__assert_fail@plt+0xdf4>
   121b8:	mov	r1, r9
   121bc:	mov	r6, #0
   121c0:	sub	r8, r8, #1
   121c4:	ldr	r0, [pc, #232]	; 122b4 <__assert_fail@plt+0xd70>
   121c8:	bl	14080 <__assert_fail@plt+0x2b3c>
   121cc:	ldrb	r1, [fp, #4]
   121d0:	str	r6, [r5, #32]
   121d4:	ldr	r2, [r7]
   121d8:	ldr	r0, [pc, #212]	; 122b4 <__assert_fail@plt+0xd70>
   121dc:	ldr	r3, [sl, r2, lsl #2]
   121e0:	str	r6, [sp]
   121e4:	str	r1, [sp, #8]
   121e8:	ldr	r1, [sp, #28]
   121ec:	str	r6, [sp, #4]
   121f0:	add	r3, r3, #1
   121f4:	ldr	r2, [r1, r2, lsl #2]
   121f8:	mov	r1, r9
   121fc:	bl	13874 <__assert_fail@plt+0x2330>
   12200:	ldr	r7, [r7]
   12204:	strb	r6, [fp, #4]
   12208:	ldr	r3, [sp, #32]
   1220c:	add	r7, r7, #1
   12210:	cmp	r3, r7
   12214:	bgt	12240 <__assert_fail@plt+0xcfc>
   12218:	mov	r1, r9
   1221c:	ldr	r0, [pc, #144]	; 122b4 <__assert_fail@plt+0xd70>
   12220:	bl	13c44 <__assert_fail@plt+0x2700>
   12224:	b	121a0 <__assert_fail@plt+0xc5c>
   12228:	ldr	r3, [sp, #28]
   1222c:	ldr	r0, [r3, r6, lsl #2]
   12230:	bl	11394 <strlen@plt>
   12234:	str	r0, [sl, r6, lsl #2]
   12238:	add	r6, r6, #1
   1223c:	b	12180 <__assert_fail@plt+0xc3c>
   12240:	ldrb	r3, [fp, #4]
   12244:	mov	r1, r9
   12248:	str	r8, [sp, #12]
   1224c:	ldr	r2, [sp, #28]
   12250:	ldr	r0, [pc, #92]	; 122b4 <__assert_fail@plt+0xd70>
   12254:	str	r3, [sp, #16]
   12258:	ldr	r3, [r4, #132]	; 0x84
   1225c:	str	r6, [sp]
   12260:	str	r6, [sp, #4]
   12264:	str	r3, [sp, #8]
   12268:	ldr	r3, [sl, r7, lsl #2]
   1226c:	ldr	r2, [r2, r7, lsl #2]
   12270:	bl	13ac4 <__assert_fail@plt+0x2580>
   12274:	b	12208 <__assert_fail@plt+0xcc4>
   12278:	andeq	r9, r1, r1, lsr #17
   1227c:	andeq	fp, r2, r0, ror #3
   12280:	andeq	r9, r1, r4, lsl #4
   12284:	andeq	r8, r1, fp, lsr #8
   12288:	andeq	r9, r1, sl, lsl #4
   1228c:	andeq	r9, r1, r4, ror #24
   12290:	andeq	r4, r1, r4, lsr r9
   12294:	andeq	r9, r1, r2, lsr #4
   12298:	andeq	r3, r1, r0, ror r7
   1229c:	ldrdeq	r2, [r1], -r0
   122a0:	andeq	r8, r1, r7, lsr #2
   122a4:	andeq	r8, r1, r1, ror r3
   122a8:	andeq	r9, r1, r5, asr #4
   122ac:	andeq	r9, r1, r0, ror #4
   122b0:	strdeq	r2, [r1], -r4
   122b4:	andeq	fp, r2, r8, lsr r2
   122b8:	andeq	r2, r1, r8, asr r4
   122bc:	andeq	r9, r1, r1, ror #29
   122c0:	muleq	r1, ip, r3
   122c4:	ldrdeq	fp, [r2], -r8
   122c8:	andeq	r9, r1, r3, ror #8
   122cc:	andeq	r9, r1, sl, lsl #9
   122d0:	andeq	r9, r1, sp, lsl #9
   122d4:	muleq	r1, r7, r4
   122d8:	strdeq	r9, [r1], -r5
   122dc:	andeq	r8, r1, ip, lsl #2
   122e0:	andeq	r3, r1, r8, lsl #5
   122e4:	andeq	r9, r1, r6, asr r5
   122e8:	andeq	r8, r1, ip, lsr #2
   122ec:	andeq	r9, r1, r7, ror r5
   122f0:			; <UNDEFINED> instruction: 0x000195b2
   122f4:			; <UNDEFINED> instruction: 0x000192b8
   122f8:	andeq	r9, r1, fp, lsl r3
   122fc:	andeq	r9, r1, fp, ror r2
   12300:	andeq	r9, r1, lr, ror r3
   12304:	andeq	r9, r1, r2, ror #7
   12308:	andeq	r9, r1, r1, lsl #4
   1230c:	andeq	r9, r1, lr, ror #8
   12310:	andeq	r9, r1, lr, ror r4
   12314:	andeq	r9, r1, r6, lsr #9
   12318:			; <UNDEFINED> instruction: 0x000194b4
   1231c:	andeq	fp, r2, r0, ror #2
   12320:	andeq	r9, r1, lr, lsr #10
   12324:	andeq	r2, r1, ip, asr r4
   12328:	andeq	r9, r1, r9, asr #11
   1232c:	andeq	r3, r1, r8, lsl r2
   12330:	andeq	r9, r1, fp, ror #11
   12334:	ldrdeq	fp, [r2], -r0
   12338:	andeq	fp, r2, r0, asr #3
   1233c:	andeq	fp, r2, r8, asr #3
   12340:	andeq	r9, r1, r7, lsr #12
   12344:	andeq	r9, r1, r6, asr r6
   12348:	muleq	r1, r0, r6
   1234c:	ldrdeq	r9, [r1], -sp
   12350:	andeq	r9, r1, r4, lsl r7
   12354:	andeq	r9, r1, r8, asr #14
   12358:	andeq	r9, r1, r4, lsl #15
   1235c:	andeq	r9, r1, r1, lsr r8
   12360:	strdeq	fp, [r2], -r0
   12364:	andeq	r9, r1, sp, lsl #12
   12368:	mov	fp, #0
   1236c:	mov	lr, #0
   12370:	pop	{r1}		; (ldr r1, [sp], #4)
   12374:	mov	r2, sp
   12378:	push	{r2}		; (str r2, [sp, #-4]!)
   1237c:	push	{r0}		; (str r0, [sp, #-4]!)
   12380:	ldr	ip, [pc, #16]	; 12398 <__assert_fail@plt+0xe54>
   12384:	push	{ip}		; (str ip, [sp, #-4]!)
   12388:	ldr	r0, [pc, #12]	; 1239c <__assert_fail@plt+0xe58>
   1238c:	ldr	r3, [pc, #12]	; 123a0 <__assert_fail@plt+0xe5c>
   12390:	bl	11334 <__libc_start_main@plt>
   12394:	bl	11514 <abort@plt>
   12398:	andeq	r8, r1, r4, ror #1
   1239c:	andeq	r1, r1, r8, ror #10
   123a0:	andeq	r8, r1, r4, lsl #1
   123a4:	ldr	r3, [pc, #20]	; 123c0 <__assert_fail@plt+0xe7c>
   123a8:	ldr	r2, [pc, #20]	; 123c4 <__assert_fail@plt+0xe80>
   123ac:	add	r3, pc, r3
   123b0:	ldr	r2, [r3, r2]
   123b4:	cmp	r2, #0
   123b8:	bxeq	lr
   123bc:	b	1134c <__gmon_start__@plt>
   123c0:	andeq	r8, r1, ip, asr #24
   123c4:	andeq	r0, r0, r4, asr r1
   123c8:	ldr	r0, [pc, #24]	; 123e8 <__assert_fail@plt+0xea4>
   123cc:	ldr	r3, [pc, #24]	; 123ec <__assert_fail@plt+0xea8>
   123d0:	cmp	r3, r0
   123d4:	bxeq	lr
   123d8:	ldr	r3, [pc, #16]	; 123f0 <__assert_fail@plt+0xeac>
   123dc:	cmp	r3, #0
   123e0:	bxeq	lr
   123e4:	bx	r3
   123e8:			; <UNDEFINED> instruction: 0x0002b1b0
   123ec:			; <UNDEFINED> instruction: 0x0002b1b0
   123f0:	andeq	r0, r0, r0
   123f4:	ldr	r0, [pc, #36]	; 12420 <__assert_fail@plt+0xedc>
   123f8:	ldr	r1, [pc, #36]	; 12424 <__assert_fail@plt+0xee0>
   123fc:	sub	r1, r1, r0
   12400:	asr	r1, r1, #2
   12404:	add	r1, r1, r1, lsr #31
   12408:	asrs	r1, r1, #1
   1240c:	bxeq	lr
   12410:	ldr	r3, [pc, #16]	; 12428 <__assert_fail@plt+0xee4>
   12414:	cmp	r3, #0
   12418:	bxeq	lr
   1241c:	bx	r3
   12420:			; <UNDEFINED> instruction: 0x0002b1b0
   12424:			; <UNDEFINED> instruction: 0x0002b1b0
   12428:	andeq	r0, r0, r0
   1242c:	push	{r4, lr}
   12430:	ldr	r4, [pc, #24]	; 12450 <__assert_fail@plt+0xf0c>
   12434:	ldrb	r3, [r4]
   12438:	cmp	r3, #0
   1243c:	popne	{r4, pc}
   12440:	bl	123c8 <__assert_fail@plt+0xe84>
   12444:	mov	r3, #1
   12448:	strb	r3, [r4]
   1244c:	pop	{r4, pc}
   12450:	ldrdeq	fp, [r2], -ip
   12454:	b	123f4 <__assert_fail@plt+0xeb0>
   12458:	bx	lr
   1245c:	ldr	r3, [pc, #32]	; 12484 <__assert_fail@plt+0xf40>
   12460:	ldr	r2, [r3]
   12464:	cmn	r2, #-2147483647	; 0x80000001
   12468:	ldrne	r2, [r3]
   1246c:	addne	r2, r2, #1
   12470:	strne	r2, [r3]
   12474:	mov	r2, #1
   12478:	ldr	r3, [pc, #8]	; 12488 <__assert_fail@plt+0xf44>
   1247c:	str	r2, [r3]
   12480:	bx	lr
   12484:	andeq	fp, r2, r0, ror #2
   12488:	andeq	fp, r2, r0, ror #3
   1248c:	push	{r0, r1, r2, r4, r5, lr}
   12490:	mov	r4, r1
   12494:	mov	r5, r0
   12498:	mov	r2, #5
   1249c:	mov	r0, #0
   124a0:	ldr	r1, [pc, #36]	; 124cc <__assert_fail@plt+0xf88>
   124a4:	bl	11238 <dcgettext@plt>
   124a8:	mov	r1, #0
   124ac:	mov	r2, r0
   124b0:	str	r5, [sp]
   124b4:	mov	r3, r4
   124b8:	mov	r0, r1
   124bc:	str	r4, [sp, #4]
   124c0:	bl	112f8 <error@plt>
   124c4:	add	sp, sp, #12
   124c8:	pop	{r4, r5, pc}
   124cc:	andeq	r8, r1, ip, asr r2
   124d0:	mov	r2, #5
   124d4:	ldr	r1, [pc, #24]	; 124f4 <__assert_fail@plt+0xfb0>
   124d8:	mov	r0, #0
   124dc:	push	{r4, lr}
   124e0:	bl	11238 <dcgettext@plt>
   124e4:	mov	r2, r0
   124e8:	mov	r1, #0
   124ec:	mov	r0, #1
   124f0:	bl	112f8 <error@plt>
   124f4:	andeq	r8, r1, sl, lsr #5
   124f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124fc:	mov	r8, r0
   12500:	sub	sp, sp, #20
   12504:	mov	r9, r1
   12508:	mov	r7, #0
   1250c:	ldr	r6, [pc, #472]	; 126ec <__assert_fail@plt+0x11a8>
   12510:	ldr	sl, [pc, #472]	; 126f0 <__assert_fail@plt+0x11ac>
   12514:	mov	r4, r6
   12518:	ldr	r3, [r6, #12]
   1251c:	cmp	r3, #0
   12520:	beq	126e4 <__assert_fail@plt+0x11a0>
   12524:	eor	r5, r8, #1
   12528:	mov	r3, #0
   1252c:	cmp	r7, r9
   12530:	movcc	r5, #0
   12534:	andcs	r5, r5, #1
   12538:	str	r3, [r6]
   1253c:	mov	r2, r5
   12540:	add	r1, sp, #12
   12544:	mvn	r0, #0
   12548:	bl	112bc <waitpid@plt>
   1254c:	cmn	r0, #1
   12550:	mov	r2, r0
   12554:	beq	12668 <__assert_fail@plt+0x1124>
   12558:	cmp	r0, #0
   1255c:	beq	126bc <__assert_fail@plt+0x1178>
   12560:	ldr	ip, [r4, #4]
   12564:	mov	r3, #0
   12568:	ldr	r1, [r4, #8]
   1256c:	cmp	ip, r3
   12570:	beq	1253c <__assert_fail@plt+0xff8>
   12574:	ldr	r0, [r1, r3, lsl #2]
   12578:	cmp	r0, r2
   1257c:	bne	126b4 <__assert_fail@plt+0x1170>
   12580:	mov	r5, #0
   12584:	add	r7, r7, #1
   12588:	str	r5, [r1, r3, lsl #2]
   1258c:	ldr	r3, [r4, #12]
   12590:	sub	r3, r3, #1
   12594:	str	r3, [r4, #12]
   12598:	ldrb	r3, [sp, #13]
   1259c:	cmp	r3, #255	; 0xff
   125a0:	bne	125cc <__assert_fail@plt+0x1088>
   125a4:	mov	r2, #5
   125a8:	mov	r1, sl
   125ac:	mov	r0, r5
   125b0:	bl	11238 <dcgettext@plt>
   125b4:	ldr	r3, [r4, #20]
   125b8:	mov	r2, r0
   125bc:	mov	r1, r5
   125c0:	mov	r0, #124	; 0x7c
   125c4:	ldr	r3, [r3]
   125c8:	bl	112f8 <error@plt>
   125cc:	ldrb	r3, [sp, #12]
   125d0:	cmp	r3, #127	; 0x7f
   125d4:	bne	12608 <__assert_fail@plt+0x10c4>
   125d8:	mov	r2, #5
   125dc:	ldr	r1, [pc, #272]	; 126f4 <__assert_fail@plt+0x11b0>
   125e0:	mov	r0, #0
   125e4:	bl	11238 <dcgettext@plt>
   125e8:	ldrb	r2, [sp, #13]
   125ec:	mov	r1, #0
   125f0:	ldr	r3, [r4, #20]
   125f4:	str	r2, [sp]
   125f8:	mov	r2, r0
   125fc:	mov	r0, #125	; 0x7d
   12600:	ldr	r3, [r3]
   12604:	bl	112f8 <error@plt>
   12608:	ldr	r3, [sp, #12]
   1260c:	and	r3, r3, #127	; 0x7f
   12610:	add	r3, r3, #1
   12614:	sbfx	r3, r3, #1, #7
   12618:	cmp	r3, #0
   1261c:	ble	12654 <__assert_fail@plt+0x1110>
   12620:	mov	r2, #5
   12624:	ldr	r1, [pc, #204]	; 126f8 <__assert_fail@plt+0x11b4>
   12628:	mov	r0, #0
   1262c:	bl	11238 <dcgettext@plt>
   12630:	ldr	r3, [sp, #12]
   12634:	mov	r1, #0
   12638:	ldr	r2, [r4, #20]
   1263c:	and	r3, r3, #127	; 0x7f
   12640:	str	r3, [sp]
   12644:	ldr	r3, [r2]
   12648:	mov	r2, r0
   1264c:	mov	r0, #125	; 0x7d
   12650:	bl	112f8 <error@plt>
   12654:	ldrb	r3, [sp, #13]
   12658:	cmp	r3, #0
   1265c:	movne	r3, #123	; 0x7b
   12660:	strne	r3, [r4, #60]	; 0x3c
   12664:	b	12518 <__assert_fail@plt+0xfd4>
   12668:	bl	113c4 <__errno_location@plt>
   1266c:	ldr	fp, [r0]
   12670:	cmp	fp, #4
   12674:	beq	12698 <__assert_fail@plt+0x1154>
   12678:	mov	r2, #5
   1267c:	ldr	r1, [pc, #120]	; 126fc <__assert_fail@plt+0x11b8>
   12680:	mov	r0, #0
   12684:	bl	11238 <dcgettext@plt>
   12688:	mov	r2, r0
   1268c:	mov	r1, fp
   12690:	mov	r0, #1
   12694:	bl	112f8 <error@plt>
   12698:	ldr	r3, [r4]
   1269c:	cmp	r3, #0
   126a0:	movne	r3, r8
   126a4:	orreq	r3, r8, #1
   126a8:	cmp	r3, #0
   126ac:	moveq	r5, #1
   126b0:	b	1253c <__assert_fail@plt+0xff8>
   126b4:	add	r3, r3, #1
   126b8:	b	1256c <__assert_fail@plt+0x1028>
   126bc:	cmp	r5, #0
   126c0:	bne	126e4 <__assert_fail@plt+0x11a0>
   126c4:	mov	r2, #5
   126c8:	ldr	r1, [pc, #48]	; 12700 <__assert_fail@plt+0x11bc>
   126cc:	bl	11238 <dcgettext@plt>
   126d0:	mov	r2, r0
   126d4:	mov	r1, r5
   126d8:	ldr	r3, [r4, #12]
   126dc:	mov	r0, r5
   126e0:	bl	112f8 <error@plt>
   126e4:	add	sp, sp, #20
   126e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126ec:	andeq	fp, r2, r0, ror #3
   126f0:	andeq	r8, r1, r7, lsl r3
   126f4:	andeq	r8, r1, ip, lsr r3
   126f8:	andeq	r8, r1, r5, asr r3
   126fc:	andeq	r8, r1, ip, asr #5
   12700:	andeq	r8, r1, ip, ror #5
   12704:	push	{r4, r5, r6, r7, r8, lr}
   12708:	mov	r7, r0
   1270c:	mov	r5, #0
   12710:	ldr	r4, [pc, #152]	; 127b0 <__assert_fail@plt+0x126c>
   12714:	ldr	r2, [r4, #4]
   12718:	ldr	r0, [r4, #8]
   1271c:	cmp	r2, r5
   12720:	lsl	r6, r5, #2
   12724:	beq	12760 <__assert_fail@plt+0x121c>
   12728:	ldr	r3, [r0, r5, lsl #2]
   1272c:	cmp	r3, #0
   12730:	bne	12758 <__assert_fail@plt+0x1214>
   12734:	ldr	r3, [r4, #8]
   12738:	ldr	r2, [r3, r6]
   1273c:	cmp	r2, #0
   12740:	beq	12790 <__assert_fail@plt+0x124c>
   12744:	ldr	r3, [pc, #104]	; 127b4 <__assert_fail@plt+0x1270>
   12748:	movw	r2, #1477	; 0x5c5
   1274c:	ldr	r1, [pc, #100]	; 127b8 <__assert_fail@plt+0x1274>
   12750:	ldr	r0, [pc, #100]	; 127bc <__assert_fail@plt+0x1278>
   12754:	bl	11544 <__assert_fail@plt>
   12758:	add	r5, r5, #1
   1275c:	b	1271c <__assert_fail@plt+0x11d8>
   12760:	ldr	r1, [pc, #88]	; 127c0 <__assert_fail@plt+0x127c>
   12764:	mov	r2, #4
   12768:	bl	17308 <__assert_fail@plt+0x5dc4>
   1276c:	mov	r3, r5
   12770:	mov	r1, #0
   12774:	str	r0, [r4, #8]
   12778:	ldr	r2, [r4, #4]
   1277c:	cmp	r2, r3
   12780:	bls	12734 <__assert_fail@plt+0x11f0>
   12784:	str	r1, [r0, r3, lsl #2]
   12788:	add	r3, r3, #1
   1278c:	b	12778 <__assert_fail@plt+0x1234>
   12790:	str	r7, [r3, r6]
   12794:	mov	r0, r5
   12798:	ldr	r3, [r4, #12]
   1279c:	add	r3, r3, #1
   127a0:	str	r3, [r4, #12]
   127a4:	mov	r3, #1
   127a8:	strb	r3, [r4, #64]	; 0x40
   127ac:	pop	{r4, r5, r6, r7, r8, pc}
   127b0:	andeq	fp, r2, r0, ror #3
   127b4:	andeq	r8, r1, ip, lsl #2
   127b8:	andeq	r8, r1, r1, ror r3
   127bc:	andeq	r8, r1, r9, ror r3
   127c0:	andeq	fp, r2, r4, ror #3
   127c4:	subs	r5, r0, #0
   127c8:	push	{r7, lr}
   127cc:	ldr	r6, [pc, #656]	; 12a64 <__assert_fail@plt+0x1520>
   127d0:	beq	12804 <__assert_fail@plt+0x12c0>
   127d4:	mov	r2, #5
   127d8:	mov	r0, #0
   127dc:	ldr	r3, [pc, #644]	; 12a68 <__assert_fail@plt+0x1524>
   127e0:	ldr	r1, [pc, #644]	; 12a6c <__assert_fail@plt+0x1528>
   127e4:	ldr	r4, [r3]
   127e8:	bl	11238 <dcgettext@plt>
   127ec:	mov	r1, r0
   127f0:	ldr	r2, [r6]
   127f4:	mov	r0, r4
   127f8:	bl	113b8 <fprintf@plt>
   127fc:	mov	r0, #1
   12800:	bl	1137c <exit@plt>
   12804:	ldr	r4, [pc, #612]	; 12a70 <__assert_fail@plt+0x152c>
   12808:	mov	r2, #5
   1280c:	ldr	r1, [pc, #608]	; 12a74 <__assert_fail@plt+0x1530>
   12810:	ldr	r7, [r4]
   12814:	bl	11238 <dcgettext@plt>
   12818:	mov	r1, r0
   1281c:	ldr	r2, [r6]
   12820:	mov	r0, r7
   12824:	bl	113b8 <fprintf@plt>
   12828:	mov	r2, #5
   1282c:	ldr	r1, [pc, #580]	; 12a78 <__assert_fail@plt+0x1534>
   12830:	mov	r0, r5
   12834:	bl	11238 <dcgettext@plt>
   12838:	ldr	r1, [r4]
   1283c:	bl	114fc <fputs@plt>
   12840:	mov	r2, #5
   12844:	ldr	r1, [pc, #560]	; 12a7c <__assert_fail@plt+0x1538>
   12848:	mov	r0, r5
   1284c:	bl	11238 <dcgettext@plt>
   12850:	ldr	r1, [r4]
   12854:	bl	114fc <fputs@plt>
   12858:	mov	r2, #5
   1285c:	ldr	r1, [pc, #540]	; 12a80 <__assert_fail@plt+0x153c>
   12860:	mov	r0, r5
   12864:	bl	11238 <dcgettext@plt>
   12868:	ldr	r1, [r4]
   1286c:	bl	114fc <fputs@plt>
   12870:	mov	r2, #5
   12874:	ldr	r1, [pc, #520]	; 12a84 <__assert_fail@plt+0x1540>
   12878:	mov	r0, r5
   1287c:	bl	11238 <dcgettext@plt>
   12880:	ldr	r1, [r4]
   12884:	bl	114fc <fputs@plt>
   12888:	mov	r2, #5
   1288c:	ldr	r1, [pc, #500]	; 12a88 <__assert_fail@plt+0x1544>
   12890:	mov	r0, r5
   12894:	bl	11238 <dcgettext@plt>
   12898:	ldr	r1, [r4]
   1289c:	bl	114fc <fputs@plt>
   128a0:	mov	r2, #5
   128a4:	ldr	r1, [pc, #480]	; 12a8c <__assert_fail@plt+0x1548>
   128a8:	mov	r0, r5
   128ac:	bl	11238 <dcgettext@plt>
   128b0:	ldr	r1, [r4]
   128b4:	bl	114fc <fputs@plt>
   128b8:	mov	r2, #5
   128bc:	ldr	r1, [pc, #460]	; 12a90 <__assert_fail@plt+0x154c>
   128c0:	mov	r0, r5
   128c4:	bl	11238 <dcgettext@plt>
   128c8:	ldr	r1, [r4]
   128cc:	bl	114fc <fputs@plt>
   128d0:	mov	r2, #5
   128d4:	ldr	r1, [pc, #440]	; 12a94 <__assert_fail@plt+0x1550>
   128d8:	mov	r0, r5
   128dc:	bl	11238 <dcgettext@plt>
   128e0:	ldr	r1, [r4]
   128e4:	bl	114fc <fputs@plt>
   128e8:	mov	r2, #5
   128ec:	ldr	r1, [pc, #420]	; 12a98 <__assert_fail@plt+0x1554>
   128f0:	mov	r0, r5
   128f4:	bl	11238 <dcgettext@plt>
   128f8:	ldr	r1, [r4]
   128fc:	bl	114fc <fputs@plt>
   12900:	mov	r2, #5
   12904:	ldr	r1, [pc, #400]	; 12a9c <__assert_fail@plt+0x1558>
   12908:	mov	r0, r5
   1290c:	bl	11238 <dcgettext@plt>
   12910:	ldr	r1, [r4]
   12914:	bl	114fc <fputs@plt>
   12918:	mov	r2, #5
   1291c:	ldr	r1, [pc, #380]	; 12aa0 <__assert_fail@plt+0x155c>
   12920:	mov	r0, r5
   12924:	bl	11238 <dcgettext@plt>
   12928:	ldr	r1, [r4]
   1292c:	bl	114fc <fputs@plt>
   12930:	mov	r2, #5
   12934:	ldr	r1, [pc, #360]	; 12aa4 <__assert_fail@plt+0x1560>
   12938:	mov	r0, r5
   1293c:	bl	11238 <dcgettext@plt>
   12940:	ldr	r1, [r4]
   12944:	bl	114fc <fputs@plt>
   12948:	mov	r2, #5
   1294c:	ldr	r1, [pc, #340]	; 12aa8 <__assert_fail@plt+0x1564>
   12950:	mov	r0, r5
   12954:	bl	11238 <dcgettext@plt>
   12958:	ldr	r1, [r4]
   1295c:	bl	114fc <fputs@plt>
   12960:	mov	r2, #5
   12964:	ldr	r1, [pc, #320]	; 12aac <__assert_fail@plt+0x1568>
   12968:	mov	r0, r5
   1296c:	bl	11238 <dcgettext@plt>
   12970:	ldr	r1, [r4]
   12974:	bl	114fc <fputs@plt>
   12978:	mov	r2, #5
   1297c:	ldr	r1, [pc, #300]	; 12ab0 <__assert_fail@plt+0x156c>
   12980:	mov	r0, r5
   12984:	bl	11238 <dcgettext@plt>
   12988:	ldr	r1, [r4]
   1298c:	bl	114fc <fputs@plt>
   12990:	mov	r2, #5
   12994:	ldr	r1, [pc, #280]	; 12ab4 <__assert_fail@plt+0x1570>
   12998:	mov	r0, r5
   1299c:	bl	11238 <dcgettext@plt>
   129a0:	ldr	r1, [r4]
   129a4:	bl	114fc <fputs@plt>
   129a8:	mov	r2, #5
   129ac:	ldr	r1, [pc, #260]	; 12ab8 <__assert_fail@plt+0x1574>
   129b0:	mov	r0, r5
   129b4:	bl	11238 <dcgettext@plt>
   129b8:	ldr	r1, [r4]
   129bc:	bl	114fc <fputs@plt>
   129c0:	mov	r2, #5
   129c4:	ldr	r1, [pc, #240]	; 12abc <__assert_fail@plt+0x1578>
   129c8:	mov	r0, r5
   129cc:	bl	11238 <dcgettext@plt>
   129d0:	ldr	r1, [r4]
   129d4:	bl	114fc <fputs@plt>
   129d8:	mov	r2, #5
   129dc:	ldr	r1, [pc, #220]	; 12ac0 <__assert_fail@plt+0x157c>
   129e0:	mov	r0, r5
   129e4:	bl	11238 <dcgettext@plt>
   129e8:	ldr	r1, [r4]
   129ec:	bl	114fc <fputs@plt>
   129f0:	mov	r2, #5
   129f4:	ldr	r1, [pc, #200]	; 12ac4 <__assert_fail@plt+0x1580>
   129f8:	mov	r0, r5
   129fc:	bl	11238 <dcgettext@plt>
   12a00:	ldr	r1, [r4]
   12a04:	bl	114fc <fputs@plt>
   12a08:	mov	r2, #5
   12a0c:	ldr	r1, [pc, #180]	; 12ac8 <__assert_fail@plt+0x1584>
   12a10:	mov	r0, r5
   12a14:	bl	11238 <dcgettext@plt>
   12a18:	ldr	r1, [r4]
   12a1c:	bl	114fc <fputs@plt>
   12a20:	mov	r2, #5
   12a24:	ldr	r1, [pc, #160]	; 12acc <__assert_fail@plt+0x1588>
   12a28:	mov	r0, r5
   12a2c:	bl	11238 <dcgettext@plt>
   12a30:	ldr	r1, [r4]
   12a34:	bl	114fc <fputs@plt>
   12a38:	mov	r2, #5
   12a3c:	ldr	r1, [pc, #140]	; 12ad0 <__assert_fail@plt+0x158c>
   12a40:	mov	r0, r5
   12a44:	bl	11238 <dcgettext@plt>
   12a48:	ldr	r1, [r4]
   12a4c:	bl	114fc <fputs@plt>
   12a50:	ldr	r0, [r4]
   12a54:	ldr	r1, [r6]
   12a58:	bl	14748 <__assert_fail@plt+0x3204>
   12a5c:	mov	r0, r5
   12a60:	b	12800 <__assert_fail@plt+0x12bc>
   12a64:	andeq	fp, r2, ip, lsr #5
   12a68:	andeq	fp, r2, r8, asr #3
   12a6c:	andeq	r8, r1, r6, lsl #7
   12a70:	ldrdeq	fp, [r2], -r4
   12a74:	andeq	r8, r1, sp, lsr #7
   12a78:	ldrdeq	r8, [r1], -lr
   12a7c:	andeq	r8, r1, ip, lsr #8
   12a80:	andeq	r8, r1, r1, lsr #9
   12a84:	andeq	r8, r1, r5, ror r5
   12a88:	andeq	r8, r1, r2, asr #11
   12a8c:	andeq	r8, r1, ip, lsr #13
   12a90:	andeq	r8, r1, sp, lsl #15
   12a94:	andeq	r8, r1, r2, lsr #16
   12a98:	andeq	r8, r1, r6, asr r8
   12a9c:	andeq	r8, r1, r9, lsr #18
   12aa0:	andeq	r8, r1, r7, lsr #19
   12aa4:	andeq	r8, r1, r6, asr #20
   12aa8:	muleq	r1, r6, sl
   12aac:	andeq	r8, r1, lr, ror #22
   12ab0:			; <UNDEFINED> instruction: 0x00018bb8
   12ab4:	strdeq	r8, [r1], -r7
   12ab8:	andeq	r8, r1, r7, asr #24
   12abc:	andeq	r8, r1, ip, lsl sp
   12ac0:	andeq	r8, r1, r6, ror #26
   12ac4:	andeq	r8, r1, r9, lsr #27
   12ac8:	andeq	r8, r1, lr, ror #27
   12acc:	andeq	r8, r1, r4, lsr lr
   12ad0:	andeq	r8, r1, pc, ror #28
   12ad4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12ad8:	mov	r7, r1
   12adc:	mov	r6, r2
   12ae0:	add	r1, sp, #12
   12ae4:	mov	r2, #10
   12ae8:	mov	r5, r0
   12aec:	mov	r4, r3
   12af0:	ldr	r8, [sp, #40]	; 0x28
   12af4:	bl	1119c <strtol@plt>
   12af8:	ldr	r2, [sp, #12]
   12afc:	cmp	r2, r5
   12b00:	beq	12b14 <__assert_fail@plt+0x15d0>
   12b04:	mov	r3, r0
   12b08:	ldrb	r0, [r2]
   12b0c:	cmp	r0, #0
   12b10:	beq	12b50 <__assert_fail@plt+0x160c>
   12b14:	ldr	r3, [pc, #216]	; 12bf4 <__assert_fail@plt+0x16b0>
   12b18:	mov	r2, #5
   12b1c:	mov	r0, #0
   12b20:	ldr	r1, [pc, #208]	; 12bf8 <__assert_fail@plt+0x16b4>
   12b24:	ldr	r4, [r3]
   12b28:	bl	11238 <dcgettext@plt>
   12b2c:	ldr	r2, [pc, #200]	; 12bfc <__assert_fail@plt+0x16b8>
   12b30:	mov	r1, r0
   12b34:	mov	r3, r5
   12b38:	str	r7, [sp]
   12b3c:	mov	r0, r4
   12b40:	ldr	r2, [r2]
   12b44:	bl	113b8 <fprintf@plt>
   12b48:	mov	r0, #1
   12b4c:	bl	127c4 <__assert_fail@plt+0x1280>
   12b50:	cmp	r3, r6
   12b54:	bge	12ba4 <__assert_fail@plt+0x1660>
   12b58:	ldr	r3, [pc, #148]	; 12bf4 <__assert_fail@plt+0x16b0>
   12b5c:	mov	r2, #5
   12b60:	ldr	r1, [pc, #152]	; 12c00 <__assert_fail@plt+0x16bc>
   12b64:	ldr	r4, [r3]
   12b68:	bl	11238 <dcgettext@plt>
   12b6c:	ldr	r2, [pc, #136]	; 12bfc <__assert_fail@plt+0x16b8>
   12b70:	mov	r3, r5
   12b74:	mov	r1, r0
   12b78:	str	r7, [sp]
   12b7c:	str	r6, [sp, #4]
   12b80:	mov	r0, r4
   12b84:	ldr	r2, [r2]
   12b88:	bl	113b8 <fprintf@plt>
   12b8c:	cmp	r8, #0
   12b90:	moveq	r3, r6
   12b94:	bne	12b48 <__assert_fail@plt+0x1604>
   12b98:	mov	r0, r3
   12b9c:	add	sp, sp, #16
   12ba0:	pop	{r4, r5, r6, r7, r8, pc}
   12ba4:	cmp	r4, #0
   12ba8:	cmpge	r3, r4
   12bac:	ble	12b98 <__assert_fail@plt+0x1654>
   12bb0:	ldr	r3, [pc, #60]	; 12bf4 <__assert_fail@plt+0x16b0>
   12bb4:	mov	r2, #5
   12bb8:	ldr	r1, [pc, #68]	; 12c04 <__assert_fail@plt+0x16c0>
   12bbc:	ldr	r6, [r3]
   12bc0:	bl	11238 <dcgettext@plt>
   12bc4:	ldr	r2, [pc, #48]	; 12bfc <__assert_fail@plt+0x16b8>
   12bc8:	mov	r3, r5
   12bcc:	mov	r1, r0
   12bd0:	str	r7, [sp]
   12bd4:	str	r4, [sp, #4]
   12bd8:	mov	r0, r6
   12bdc:	ldr	r2, [r2]
   12be0:	bl	113b8 <fprintf@plt>
   12be4:	cmp	r8, #0
   12be8:	moveq	r3, r4
   12bec:	beq	12b98 <__assert_fail@plt+0x1654>
   12bf0:	b	12b48 <__assert_fail@plt+0x1604>
   12bf4:	andeq	fp, r2, r8, asr #3
   12bf8:			; <UNDEFINED> instruction: 0x00018eb4
   12bfc:	andeq	fp, r2, ip, lsr #5
   12c00:	ldrdeq	r8, [r1], -ip
   12c04:	andeq	r8, r1, sl, lsl #30
   12c08:	push	{r4, r5, r6, r7, r8, lr}
   12c0c:	mov	r1, #0
   12c10:	bl	14400 <__assert_fail@plt+0x2ebc>
   12c14:	subs	r7, r0, #0
   12c18:	movlt	r4, #0
   12c1c:	blt	12c48 <__assert_fail@plt+0x1704>
   12c20:	ldr	r1, [pc, #40]	; 12c50 <__assert_fail@plt+0x170c>
   12c24:	bl	11178 <fdopen@plt>
   12c28:	subs	r4, r0, #0
   12c2c:	bne	12c48 <__assert_fail@plt+0x1704>
   12c30:	bl	113c4 <__errno_location@plt>
   12c34:	mov	r5, r0
   12c38:	mov	r0, r7
   12c3c:	ldr	r6, [r5]
   12c40:	bl	1152c <close@plt>
   12c44:	str	r6, [r5]
   12c48:	mov	r0, r4
   12c4c:	pop	{r4, r5, r6, r7, r8, pc}
   12c50:	andeq	r9, r1, lr, lsl r9
   12c54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c58:	mov	r4, r0
   12c5c:	mov	r5, #0
   12c60:	ldr	r7, [pc, #356]	; 12dcc <__assert_fail@plt+0x1888>
   12c64:	ldr	r6, [pc, #356]	; 12dd0 <__assert_fail@plt+0x188c>
   12c68:	mov	r8, r7
   12c6c:	ldr	r3, [r7, #16]
   12c70:	sub	r3, r3, #1
   12c74:	cmp	r3, r5
   12c78:	bhi	12ccc <__assert_fail@plt+0x1788>
   12c7c:	cmp	r4, #0
   12c80:	beq	12dbc <__assert_fail@plt+0x1878>
   12c84:	ldr	r3, [r7, #68]	; 0x44
   12c88:	cmp	r3, #0
   12c8c:	bne	12d40 <__assert_fail@plt+0x17fc>
   12c90:	ldr	r0, [pc, #316]	; 12dd4 <__assert_fail@plt+0x1890>
   12c94:	bl	12c08 <__assert_fail@plt+0x16c4>
   12c98:	cmp	r0, #0
   12c9c:	mov	r4, r0
   12ca0:	str	r0, [r7, #68]	; 0x44
   12ca4:	bne	12d40 <__assert_fail@plt+0x17fc>
   12ca8:	bl	113c4 <__errno_location@plt>
   12cac:	ldr	r5, [r0]
   12cb0:	mov	r2, #5
   12cb4:	mov	r0, r4
   12cb8:	ldr	r1, [pc, #280]	; 12dd8 <__assert_fail@plt+0x1894>
   12cbc:	bl	11238 <dcgettext@plt>
   12cc0:	mov	r2, r0
   12cc4:	mov	r1, r5
   12cc8:	b	12d30 <__assert_fail@plt+0x17ec>
   12ccc:	ldr	r3, [pc, #264]	; 12ddc <__assert_fail@plt+0x1898>
   12cd0:	cmp	r5, #0
   12cd4:	mov	r1, #3
   12cd8:	mov	r0, #0
   12cdc:	ldr	r9, [pc, #252]	; 12de0 <__assert_fail@plt+0x189c>
   12ce0:	ldr	sl, [r6]
   12ce4:	movne	r9, r3
   12ce8:	ldr	r3, [r8, #20]
   12cec:	ldr	r2, [r3, r5, lsl #2]
   12cf0:	bl	16a14 <__assert_fail@plt+0x54d0>
   12cf4:	mov	r3, r0
   12cf8:	mov	r2, r9
   12cfc:	ldr	r1, [pc, #224]	; 12de4 <__assert_fail@plt+0x18a0>
   12d00:	mov	r0, sl
   12d04:	bl	113b8 <fprintf@plt>
   12d08:	cmp	r0, #0
   12d0c:	bge	12d38 <__assert_fail@plt+0x17f4>
   12d10:	bl	113c4 <__errno_location@plt>
   12d14:	ldr	r1, [pc, #204]	; 12de8 <__assert_fail@plt+0x18a4>
   12d18:	mov	r2, #5
   12d1c:	ldr	r4, [r0]
   12d20:	mov	r0, #0
   12d24:	bl	11238 <dcgettext@plt>
   12d28:	mov	r2, r0
   12d2c:	mov	r1, r4
   12d30:	mov	r0, #1
   12d34:	bl	112f8 <error@plt>
   12d38:	add	r5, r5, #1
   12d3c:	b	12c6c <__assert_fail@plt+0x1728>
   12d40:	ldr	r0, [pc, #164]	; 12dec <__assert_fail@plt+0x18a8>
   12d44:	ldr	r1, [r6]
   12d48:	bl	114fc <fputs@plt>
   12d4c:	ldr	r0, [r6]
   12d50:	bl	17ad8 <__assert_fail@plt+0x6594>
   12d54:	cmp	r0, #0
   12d58:	bne	12d10 <__assert_fail@plt+0x17cc>
   12d5c:	ldr	r0, [r8, #68]	; 0x44
   12d60:	bl	11520 <getc@plt>
   12d64:	mov	r4, r0
   12d68:	cmp	r0, #10
   12d6c:	cmnne	r0, #1
   12d70:	movne	r5, #1
   12d74:	moveq	r5, #0
   12d78:	bne	12d98 <__assert_fail@plt+0x1854>
   12d7c:	cmn	r0, #1
   12d80:	bne	12da4 <__assert_fail@plt+0x1860>
   12d84:	bl	113c4 <__errno_location@plt>
   12d88:	mov	r2, #5
   12d8c:	ldr	r1, [pc, #92]	; 12df0 <__assert_fail@plt+0x18ac>
   12d90:	ldr	r4, [r0]
   12d94:	b	12d20 <__assert_fail@plt+0x17dc>
   12d98:	ldr	r0, [r8, #68]	; 0x44
   12d9c:	bl	11520 <getc@plt>
   12da0:	b	12d68 <__assert_fail@plt+0x1824>
   12da4:	bic	r4, r4, #32
   12da8:	sub	r4, r4, #89	; 0x59
   12dac:	clz	r4, r4
   12db0:	lsr	r4, r4, #5
   12db4:	mov	r0, r4
   12db8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dbc:	mov	r0, #10
   12dc0:	ldr	r1, [r6]
   12dc4:	bl	114c0 <putc@plt>
   12dc8:	b	12db4 <__assert_fail@plt+0x1870>
   12dcc:	andeq	fp, r2, r0, ror #3
   12dd0:	andeq	fp, r2, r8, asr #3
   12dd4:	andeq	r8, r1, r9, asr pc
   12dd8:	andeq	r8, r1, r2, ror #30
   12ddc:	andeq	r8, r1, r8, lsr pc
   12de0:	andeq	r8, r1, fp, lsr #8
   12de4:	andeq	r8, r1, sl, lsr pc
   12de8:	andeq	r8, r1, pc, lsr pc
   12dec:	andeq	r8, r1, r6, lsl #31
   12df0:	andeq	r8, r1, fp, lsl #31
   12df4:	push	{r4, r5, r6, r7, r8, lr}
   12df8:	mov	r7, r3
   12dfc:	sub	sp, sp, #32
   12e00:	ldr	r3, [pc, #992]	; 131e8 <__assert_fail@plt+0x1ca4>
   12e04:	ldr	r4, [pc, #992]	; 131ec <__assert_fail@plt+0x1ca8>
   12e08:	ldr	r2, [r3]
   12e0c:	cmp	r2, #0
   12e10:	bne	12eb4 <__assert_fail@plt+0x1970>
   12e14:	ldrb	r3, [r4, #72]	; 0x48
   12e18:	cmp	r3, #0
   12e1c:	beq	12e3c <__assert_fail@plt+0x18f8>
   12e20:	mov	r0, #1
   12e24:	bl	12c54 <__assert_fail@plt+0x1710>
   12e28:	cmp	r0, #0
   12e2c:	beq	1317c <__assert_fail@plt+0x1c38>
   12e30:	ldrb	r3, [r4, #72]	; 0x48
   12e34:	cmp	r3, #0
   12e38:	bne	12e50 <__assert_fail@plt+0x190c>
   12e3c:	ldrb	r3, [r4, #73]	; 0x49
   12e40:	cmp	r3, #0
   12e44:	beq	12e50 <__assert_fail@plt+0x190c>
   12e48:	mov	r0, #0
   12e4c:	bl	12c54 <__assert_fail@plt+0x1710>
   12e50:	mov	r1, #0
   12e54:	mov	r0, r1
   12e58:	bl	124f8 <__assert_fail@plt+0xfb4>
   12e5c:	add	r0, sp, #4
   12e60:	bl	16d44 <__assert_fail@plt+0x5800>
   12e64:	subs	r6, r0, #0
   12e68:	beq	12ebc <__assert_fail@plt+0x1978>
   12e6c:	bl	113c4 <__errno_location@plt>
   12e70:	ldr	r1, [pc, #888]	; 131f0 <__assert_fail@plt+0x1cac>
   12e74:	mov	r2, #5
   12e78:	ldr	r4, [r0]
   12e7c:	mov	r0, #0
   12e80:	bl	11238 <dcgettext@plt>
   12e84:	mov	r2, r0
   12e88:	mov	r1, r4
   12e8c:	mov	r0, #1
   12e90:	bl	112f8 <error@plt>
   12e94:	mov	r1, #1
   12e98:	mov	r0, #0
   12e9c:	bl	124f8 <__assert_fail@plt+0xfb4>
   12ea0:	ldr	r3, [r5]
   12ea4:	ldr	r2, [r4, #12]
   12ea8:	cmp	r2, r3
   12eac:	bcs	12e94 <__assert_fail@plt+0x1950>
   12eb0:	b	12e14 <__assert_fail@plt+0x18d0>
   12eb4:	mov	r5, r3
   12eb8:	b	12ea0 <__assert_fail@plt+0x195c>
   12ebc:	mov	r2, #1
   12ec0:	mov	r1, #2
   12ec4:	ldr	r0, [sp, #8]
   12ec8:	bl	17928 <__assert_fail@plt+0x63e4>
   12ecc:	bl	11478 <fork@plt>
   12ed0:	subs	r5, r0, #0
   12ed4:	bge	12ef4 <__assert_fail@plt+0x19b0>
   12ed8:	bl	113c4 <__errno_location@plt>
   12edc:	ldr	r3, [r0]
   12ee0:	cmp	r3, #11
   12ee4:	bne	12ef4 <__assert_fail@plt+0x19b0>
   12ee8:	ldr	r3, [r4, #12]
   12eec:	cmp	r3, #0
   12ef0:	bne	13004 <__assert_fail@plt+0x1ac0>
   12ef4:	cmn	r5, #1
   12ef8:	beq	13014 <__assert_fail@plt+0x1ad0>
   12efc:	cmp	r5, #0
   12f00:	bne	13104 <__assert_fail@plt+0x1bc0>
   12f04:	ldr	r0, [sp, #4]
   12f08:	bl	1152c <close@plt>
   12f0c:	str	r5, [r4, #60]	; 0x3c
   12f10:	bl	144d0 <__assert_fail@plt+0x2f8c>
   12f14:	cmp	r0, #0
   12f18:	beq	12f20 <__assert_fail@plt+0x19dc>
   12f1c:	bl	144ec <__assert_fail@plt+0x2fa8>
   12f20:	mov	r0, #0
   12f24:	bl	12704 <__assert_fail@plt+0x11c0>
   12f28:	mov	r3, r0
   12f2c:	ldr	r2, [pc, #704]	; 131f4 <__assert_fail@plt+0x1cb0>
   12f30:	mov	r1, #19
   12f34:	add	r0, sp, #12
   12f38:	bl	113d0 <snprintf@plt>
   12f3c:	bl	113c4 <__errno_location@plt>
   12f40:	ldr	r6, [r4, #76]	; 0x4c
   12f44:	mov	r5, r0
   12f48:	cmp	r6, #0
   12f4c:	beq	12f90 <__assert_fail@plt+0x1a4c>
   12f50:	mov	r2, #1
   12f54:	add	r1, sp, #12
   12f58:	mov	r0, r6
   12f5c:	bl	113ac <setenv@plt>
   12f60:	cmp	r0, #0
   12f64:	bge	12f90 <__assert_fail@plt+0x1a4c>
   12f68:	ldr	r8, [r5]
   12f6c:	mov	r2, #5
   12f70:	mov	r0, #0
   12f74:	ldr	r1, [pc, #636]	; 131f8 <__assert_fail@plt+0x1cb4>
   12f78:	bl	11238 <dcgettext@plt>
   12f7c:	mov	r2, r0
   12f80:	mov	r3, r6
   12f84:	mov	r1, r8
   12f88:	mov	r0, #0
   12f8c:	bl	112f8 <error@plt>
   12f90:	ldr	r3, [r4, #84]	; 0x54
   12f94:	ldrb	r2, [r4, #80]	; 0x50
   12f98:	cmp	r3, #0
   12f9c:	beq	13028 <__assert_fail@plt+0x1ae4>
   12fa0:	cmp	r2, #0
   12fa4:	bne	13088 <__assert_fail@plt+0x1b44>
   12fa8:	mov	r0, r7
   12fac:	bl	140a0 <__assert_fail@plt+0x2b5c>
   12fb0:	cmp	r0, #0
   12fb4:	movne	r3, #7
   12fb8:	strne	r3, [r5]
   12fbc:	bne	12fd8 <__assert_fail@plt+0x1a94>
   12fc0:	mov	r1, r7
   12fc4:	ldr	r0, [r7]
   12fc8:	bl	11208 <execvp@plt>
   12fcc:	ldr	r3, [r5]
   12fd0:	cmp	r3, #0
   12fd4:	beq	12fe8 <__assert_fail@plt+0x1aa4>
   12fd8:	mov	r2, #4
   12fdc:	mov	r1, r5
   12fe0:	ldr	r0, [sp, #8]
   12fe4:	bl	11400 <write@plt>
   12fe8:	ldr	r0, [sp, #8]
   12fec:	bl	1152c <close@plt>
   12ff0:	ldr	r1, [r5]
   12ff4:	cmp	r1, #7
   12ff8:	bne	130e0 <__assert_fail@plt+0x1b9c>
   12ffc:	mov	r0, #126	; 0x7e
   13000:	bl	111f0 <_exit@plt>
   13004:	mov	r1, #1
   13008:	mov	r0, #0
   1300c:	bl	124f8 <__assert_fail@plt+0xfb4>
   13010:	b	12ecc <__assert_fail@plt+0x1988>
   13014:	bl	113c4 <__errno_location@plt>
   13018:	mov	r2, #5
   1301c:	ldr	r1, [pc, #472]	; 131fc <__assert_fail@plt+0x1cb8>
   13020:	ldr	r4, [r0]
   13024:	b	12e7c <__assert_fail@plt+0x1938>
   13028:	ldr	r3, [pc, #464]	; 13200 <__assert_fail@plt+0x1cbc>
   1302c:	cmp	r2, #0
   13030:	ldr	r6, [pc, #460]	; 13204 <__assert_fail@plt+0x1cc0>
   13034:	moveq	r6, r3
   13038:	mov	r0, #0
   1303c:	bl	1152c <close@plt>
   13040:	mov	r1, #0
   13044:	mov	r0, r6
   13048:	bl	14ba8 <__assert_fail@plt+0x3664>
   1304c:	subs	r8, r0, #0
   13050:	bge	130b0 <__assert_fail@plt+0x1b6c>
   13054:	ldrb	r4, [r4, #80]	; 0x50
   13058:	mov	r2, r6
   1305c:	mov	r1, #8
   13060:	ldr	r8, [r5]
   13064:	cmp	r4, #0
   13068:	beq	13090 <__assert_fail@plt+0x1b4c>
   1306c:	mov	r0, #0
   13070:	bl	16a14 <__assert_fail@plt+0x54d0>
   13074:	ldr	r2, [pc, #396]	; 13208 <__assert_fail@plt+0x1cc4>
   13078:	mov	r3, r0
   1307c:	mov	r1, r8
   13080:	mov	r0, #1
   13084:	bl	112f8 <error@plt>
   13088:	ldr	r6, [pc, #372]	; 13204 <__assert_fail@plt+0x1cc0>
   1308c:	b	13038 <__assert_fail@plt+0x1af4>
   13090:	mov	r0, r4
   13094:	bl	16a14 <__assert_fail@plt+0x54d0>
   13098:	mov	r3, r0
   1309c:	ldr	r2, [pc, #356]	; 13208 <__assert_fail@plt+0x1cc4>
   130a0:	mov	r1, r8
   130a4:	mov	r0, r4
   130a8:	bl	112f8 <error@plt>
   130ac:	b	12fa8 <__assert_fail@plt+0x1a64>
   130b0:	beq	12fa8 <__assert_fail@plt+0x1a64>
   130b4:	mov	r1, #0
   130b8:	bl	11250 <dup2@plt>
   130bc:	cmp	r0, #0
   130c0:	beq	130d4 <__assert_fail@plt+0x1b90>
   130c4:	mov	r2, #5
   130c8:	ldr	r1, [pc, #316]	; 1320c <__assert_fail@plt+0x1cc8>
   130cc:	ldr	r4, [r5]
   130d0:	b	12e7c <__assert_fail@plt+0x1938>
   130d4:	mov	r0, r8
   130d8:	bl	1152c <close@plt>
   130dc:	b	12fa8 <__assert_fail@plt+0x1a64>
   130e0:	ldr	r2, [pc, #288]	; 13208 <__assert_fail@plt+0x1cc4>
   130e4:	mov	r0, #0
   130e8:	ldr	r3, [r7]
   130ec:	bl	112f8 <error@plt>
   130f0:	ldr	r3, [r5]
   130f4:	cmp	r3, #2
   130f8:	bne	12ffc <__assert_fail@plt+0x1ab8>
   130fc:	mov	r0, #127	; 0x7f
   13100:	b	13000 <__assert_fail@plt+0x1abc>
   13104:	ldr	r0, [sp, #8]
   13108:	bl	1152c <close@plt>
   1310c:	mov	r2, #4
   13110:	mov	r1, sp
   13114:	ldr	r0, [sp, #4]
   13118:	bl	16c70 <__assert_fail@plt+0x572c>
   1311c:	cmp	r0, #4
   13120:	mov	r4, r0
   13124:	beq	1318c <__assert_fail@plt+0x1c48>
   13128:	cmn	r0, #1
   1312c:	beq	13144 <__assert_fail@plt+0x1c00>
   13130:	cmp	r0, #0
   13134:	bne	131c0 <__assert_fail@plt+0x1c7c>
   13138:	mov	r0, r5
   1313c:	bl	12704 <__assert_fail@plt+0x11c0>
   13140:	b	13174 <__assert_fail@plt+0x1c30>
   13144:	ldr	r0, [sp, #4]
   13148:	bl	1152c <close@plt>
   1314c:	bl	113c4 <__errno_location@plt>
   13150:	ldr	r4, [r0]
   13154:	mov	r2, #5
   13158:	mov	r0, #0
   1315c:	ldr	r1, [pc, #172]	; 13210 <__assert_fail@plt+0x1ccc>
   13160:	bl	11238 <dcgettext@plt>
   13164:	mov	r2, r0
   13168:	mov	r0, #0
   1316c:	mov	r1, r4
   13170:	bl	112f8 <error@plt>
   13174:	ldr	r0, [sp, #4]
   13178:	bl	1152c <close@plt>
   1317c:	mov	r6, #1
   13180:	mov	r0, r6
   13184:	add	sp, sp, #32
   13188:	pop	{r4, r5, r6, r7, r8, pc}
   1318c:	ldr	r0, [sp, #4]
   13190:	bl	1152c <close@plt>
   13194:	mov	r2, #0
   13198:	add	r1, sp, #12
   1319c:	mov	r0, r5
   131a0:	bl	112bc <waitpid@plt>
   131a4:	ldr	r3, [sp]
   131a8:	cmp	r3, #7
   131ac:	beq	13180 <__assert_fail@plt+0x1c3c>
   131b0:	cmp	r3, #2
   131b4:	moveq	r0, #127	; 0x7f
   131b8:	movne	r0, #126	; 0x7e
   131bc:	bl	1137c <exit@plt>
   131c0:	bl	113c4 <__errno_location@plt>
   131c4:	ldr	r5, [r0]
   131c8:	mov	r2, #5
   131cc:	mov	r0, #0
   131d0:	ldr	r1, [pc, #60]	; 13214 <__assert_fail@plt+0x1cd0>
   131d4:	bl	11238 <dcgettext@plt>
   131d8:	mov	r2, r0
   131dc:	mov	r3, r4
   131e0:	mov	r1, r5
   131e4:	b	13080 <__assert_fail@plt+0x1b3c>
   131e8:	andeq	fp, r2, r0, ror #2
   131ec:	andeq	fp, r2, r0, ror #3
   131f0:	andeq	r8, r1, pc, lsr #31
   131f4:	ldrdeq	r8, [r1], -sp
   131f8:	andeq	r8, r1, r0, ror #31
   131fc:	ldrdeq	r8, [r1], -r1
   13200:	andeq	r8, r1, r5, lsr #31
   13204:	andeq	r8, r1, r9, asr pc
   13208:	andeq	r9, r1, ip, lsr #25
   1320c:	andeq	r9, r1, r6
   13210:	andeq	r9, r1, sp, lsr r0
   13214:	muleq	r1, r7, r0
   13218:	ldr	r3, [pc, #20]	; 13234 <__assert_fail@plt+0x1cf0>
   1321c:	ldr	r2, [r3]
   13220:	cmp	r2, #1
   13224:	ldrgt	r2, [r3]
   13228:	subgt	r2, r2, #1
   1322c:	strgt	r2, [r3]
   13230:	bx	lr
   13234:	andeq	fp, r2, r0, ror #2
   13238:	ldr	r0, [pc, #64]	; 13280 <__assert_fail@plt+0x1d3c>
   1323c:	ldr	r3, [r0, #112]	; 0x70
   13240:	cmp	r3, #0
   13244:	bxne	lr
   13248:	ldr	r3, [pc, #52]	; 13284 <__assert_fail@plt+0x1d40>
   1324c:	ldrb	r3, [r3, #4]
   13250:	cmp	r3, #0
   13254:	bxne	lr
   13258:	ldr	r2, [r0, #16]
   1325c:	ldr	r3, [r0, #116]	; 0x74
   13260:	cmp	r2, r3
   13264:	bxeq	lr
   13268:	ldr	r3, [r0, #88]	; 0x58
   1326c:	cmp	r3, #0
   13270:	bxne	lr
   13274:	add	r1, r0, #16
   13278:	add	r0, r0, #88	; 0x58
   1327c:	b	13c44 <__assert_fail@plt+0x2700>
   13280:	andeq	fp, r2, r0, ror #3
   13284:	andeq	fp, r2, r0, ror #2
   13288:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1328c:	ldr	r4, [pc, #248]	; 1338c <__assert_fail@plt+0x1e48>
   13290:	ldr	r3, [r4, #36]	; 0x24
   13294:	ldr	r6, [r4, #100]	; 0x64
   13298:	ldr	r5, [r4, #132]	; 0x84
   1329c:	sub	r6, r6, #1
   132a0:	sub	r6, r6, r3
   132a4:	ldrb	r3, [r4, #136]	; 0x88
   132a8:	add	r6, r5, r6
   132ac:	cmp	r3, #0
   132b0:	bne	132e4 <__assert_fail@plt+0x1da0>
   132b4:	ldr	r0, [r4, #140]	; 0x8c
   132b8:	bl	11520 <getc@plt>
   132bc:	cmn	r0, #1
   132c0:	bne	132ec <__assert_fail@plt+0x1da8>
   132c4:	ldr	r2, [r4, #132]	; 0x84
   132c8:	mov	r3, #1
   132cc:	strb	r3, [r4, #136]	; 0x88
   132d0:	cmp	r2, r5
   132d4:	movne	r3, #0
   132d8:	strbne	r3, [r5], #1
   132dc:	subne	r5, r5, r2
   132e0:	bne	13318 <__assert_fail@plt+0x1dd4>
   132e4:	mvn	r5, #0
   132e8:	b	13348 <__assert_fail@plt+0x1e04>
   132ec:	ldrb	r3, [r4, #144]	; 0x90
   132f0:	add	r1, r5, #1
   132f4:	cmp	r3, r0
   132f8:	bne	13354 <__assert_fail@plt+0x1e10>
   132fc:	ldr	r2, [r4, #132]	; 0x84
   13300:	ldr	r3, [r4, #148]	; 0x94
   13304:	add	r3, r3, #1
   13308:	str	r3, [r4, #148]	; 0x94
   1330c:	mov	r3, #0
   13310:	strb	r3, [r5]
   13314:	sub	r5, r1, r2
   13318:	ldr	r3, [r4, #112]	; 0x70
   1331c:	cmp	r3, #0
   13320:	bne	13348 <__assert_fail@plt+0x1e04>
   13324:	ldr	r1, [pc, #100]	; 13390 <__assert_fail@plt+0x1e4c>
   13328:	ldrb	r1, [r1, #4]
   1332c:	str	r3, [sp]
   13330:	str	r3, [sp, #4]
   13334:	mov	r3, r5
   13338:	str	r1, [sp, #8]
   1333c:	ldr	r1, [pc, #80]	; 13394 <__assert_fail@plt+0x1e50>
   13340:	add	r0, r1, #72	; 0x48
   13344:	bl	13874 <__assert_fail@plt+0x2330>
   13348:	mov	r0, r5
   1334c:	add	sp, sp, #16
   13350:	pop	{r4, r5, r6, pc}
   13354:	cmp	r5, r6
   13358:	bcc	13380 <__assert_fail@plt+0x1e3c>
   1335c:	bl	13238 <__assert_fail@plt+0x1cf4>
   13360:	mov	r2, #5
   13364:	ldr	r1, [pc, #44]	; 13398 <__assert_fail@plt+0x1e54>
   13368:	mov	r0, #0
   1336c:	bl	11238 <dcgettext@plt>
   13370:	mov	r2, r0
   13374:	mov	r1, #0
   13378:	mov	r0, #1
   1337c:	bl	112f8 <error@plt>
   13380:	mov	r5, r1
   13384:	strb	r0, [r1, #-1]
   13388:	b	132b4 <__assert_fail@plt+0x1d70>
   1338c:	andeq	fp, r2, r0, ror #3
   13390:	andeq	fp, r2, r0, ror #2
   13394:	strdeq	fp, [r2], -r0
   13398:	andeq	r9, r1, r5, ror #1
   1339c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133a0:	sub	sp, sp, #28
   133a4:	ldr	r5, [pc, #932]	; 13750 <__assert_fail@plt+0x220c>
   133a8:	ldr	r2, [r5, #36]	; 0x24
   133ac:	ldr	r3, [r5, #100]	; 0x64
   133b0:	ldr	r4, [r5, #132]	; 0x84
   133b4:	ldrb	r7, [r5, #152]	; 0x98
   133b8:	sub	r3, r3, #1
   133bc:	sub	r3, r3, r2
   133c0:	add	r3, r4, r3
   133c4:	cmp	r7, #0
   133c8:	str	r3, [sp, #20]
   133cc:	bne	135b8 <__assert_fail@plt+0x2074>
   133d0:	mov	r8, #1
   133d4:	mvn	sl, #0
   133d8:	mov	r9, r7
   133dc:	mov	fp, r8
   133e0:	ldr	r0, [r5, #140]	; 0x8c
   133e4:	bl	11520 <getc@plt>
   133e8:	cmn	r0, #1
   133ec:	mov	r6, r0
   133f0:	bne	134d8 <__assert_fail@plt+0x1f94>
   133f4:	ldr	r6, [r5, #132]	; 0x84
   133f8:	mov	r2, #1
   133fc:	strb	r2, [r5, #152]	; 0x98
   13400:	cmp	r6, r4
   13404:	beq	135b8 <__assert_fail@plt+0x2074>
   13408:	mov	r7, #0
   1340c:	cmp	fp, #2
   13410:	strb	r7, [r4], #1
   13414:	sub	r4, r4, r6
   13418:	bne	1346c <__assert_fail@plt+0x1f28>
   1341c:	bl	13238 <__assert_fail@plt+0x1cf4>
   13420:	ldr	r1, [pc, #812]	; 13754 <__assert_fail@plt+0x2210>
   13424:	mov	r2, #5
   13428:	mov	r0, #0
   1342c:	bl	11238 <dcgettext@plt>
   13430:	cmp	r9, #34	; 0x22
   13434:	mov	r4, r0
   13438:	mov	r2, #5
   1343c:	ldreq	r1, [pc, #788]	; 13758 <__assert_fail@plt+0x2214>
   13440:	mov	r0, #0
   13444:	ldrne	r1, [pc, #784]	; 1375c <__assert_fail@plt+0x2218>
   13448:	bl	11238 <dcgettext@plt>
   1344c:	mov	r3, r0
   13450:	mov	r2, r4
   13454:	mov	r1, #0
   13458:	mov	r0, #1
   1345c:	bl	112f8 <error@plt>
   13460:	mov	r7, #1
   13464:	mov	fp, #3
   13468:	b	13690 <__assert_fail@plt+0x214c>
   1346c:	cmp	r8, #0
   13470:	beq	134a0 <__assert_fail@plt+0x1f5c>
   13474:	ldr	r0, [r5, #156]	; 0x9c
   13478:	cmp	r0, #0
   1347c:	beq	134a0 <__assert_fail@plt+0x1f5c>
   13480:	ldrb	r2, [r0]
   13484:	ldrb	r3, [r6]
   13488:	cmp	r2, r3
   1348c:	bne	134a0 <__assert_fail@plt+0x1f5c>
   13490:	mov	r1, r6
   13494:	bl	11190 <strcmp@plt>
   13498:	cmp	r0, #0
   1349c:	beq	135b8 <__assert_fail@plt+0x2074>
   134a0:	ldr	r3, [r5, #112]	; 0x70
   134a4:	cmp	r3, #0
   134a8:	bne	135bc <__assert_fail@plt+0x2078>
   134ac:	ldr	r2, [pc, #684]	; 13760 <__assert_fail@plt+0x221c>
   134b0:	ldrb	r2, [r2, #4]
   134b4:	str	r3, [sp]
   134b8:	str	r3, [sp, #4]
   134bc:	mov	r3, r4
   134c0:	str	r2, [sp, #8]
   134c4:	mov	r2, r6
   134c8:	ldr	r1, [pc, #660]	; 13764 <__assert_fail@plt+0x2220>
   134cc:	add	r0, r1, #72	; 0x48
   134d0:	bl	13874 <__assert_fail@plt+0x2330>
   134d4:	b	135bc <__assert_fail@plt+0x2078>
   134d8:	cmp	fp, #2
   134dc:	beq	136c4 <__assert_fail@plt+0x2180>
   134e0:	cmp	fp, #3
   134e4:	beq	136e0 <__assert_fail@plt+0x219c>
   134e8:	cmp	fp, #1
   134ec:	bne	13528 <__assert_fail@plt+0x1fe4>
   134f0:	bics	r3, r0, #127	; 0x7f
   134f4:	bne	1351c <__assert_fail@plt+0x1fd8>
   134f8:	bl	11364 <__ctype_b_loc@plt>
   134fc:	ldr	r1, [r0]
   13500:	lsl	r2, r6, #1
   13504:	ldrh	r2, [r1, r2]
   13508:	tst	r2, #1
   1350c:	bne	13690 <__assert_fail@plt+0x214c>
   13510:	cmp	r6, #13
   13514:	cmpne	r6, #10
   13518:	beq	13690 <__assert_fail@plt+0x214c>
   1351c:	sub	r2, r6, #11
   13520:	cmp	r2, #1
   13524:	bls	13690 <__assert_fail@plt+0x214c>
   13528:	cmp	r6, #10
   1352c:	bne	135f4 <__assert_fail@plt+0x20b0>
   13530:	bics	r3, sl, #127	; 0x7f
   13534:	bne	13550 <__assert_fail@plt+0x200c>
   13538:	bl	11364 <__ctype_b_loc@plt>
   1353c:	ldr	r3, [r0]
   13540:	lsl	sl, sl, #1
   13544:	ldrh	r3, [r3, sl]
   13548:	tst	r3, #1
   1354c:	bne	1355c <__assert_fail@plt+0x2018>
   13550:	ldr	r3, [r5, #148]	; 0x94
   13554:	add	r3, r3, #1
   13558:	str	r3, [r5, #148]	; 0x94
   1355c:	ldr	sl, [r5, #132]	; 0x84
   13560:	cmp	sl, r4
   13564:	orrne	r7, r7, #1
   13568:	cmp	r7, #0
   1356c:	beq	1368c <__assert_fail@plt+0x2148>
   13570:	ldr	r0, [r5, #156]	; 0x9c
   13574:	mov	r3, #0
   13578:	strb	r3, [r4], #1
   1357c:	sub	r4, r4, sl
   13580:	cmp	r0, r3
   13584:	beq	135c8 <__assert_fail@plt+0x2084>
   13588:	ldrb	r2, [r0]
   1358c:	ldrb	r3, [sl]
   13590:	cmp	r2, r3
   13594:	bne	135c8 <__assert_fail@plt+0x2084>
   13598:	mov	r1, sl
   1359c:	bl	11190 <strcmp@plt>
   135a0:	cmp	r0, #0
   135a4:	bne	135c8 <__assert_fail@plt+0x2084>
   135a8:	mov	r3, #1
   135ac:	cmp	r8, #0
   135b0:	strb	r3, [r5, #152]	; 0x98
   135b4:	beq	135bc <__assert_fail@plt+0x2078>
   135b8:	mvn	r4, #0
   135bc:	mov	r0, r4
   135c0:	add	sp, sp, #28
   135c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c8:	ldr	r3, [r5, #112]	; 0x70
   135cc:	cmp	r3, #0
   135d0:	bne	135bc <__assert_fail@plt+0x2078>
   135d4:	ldr	r2, [pc, #388]	; 13760 <__assert_fail@plt+0x221c>
   135d8:	ldrb	r2, [r2, #4]
   135dc:	str	r3, [sp]
   135e0:	str	r3, [sp, #4]
   135e4:	mov	r3, r4
   135e8:	str	r2, [sp, #8]
   135ec:	mov	r2, sl
   135f0:	b	134c8 <__assert_fail@plt+0x1f84>
   135f4:	ldr	r3, [r5, #112]	; 0x70
   135f8:	cmp	r3, #0
   135fc:	bne	13698 <__assert_fail@plt+0x2154>
   13600:	bics	r7, r6, #127	; 0x7f
   13604:	bne	13698 <__assert_fail@plt+0x2154>
   13608:	bl	11364 <__ctype_b_loc@plt>
   1360c:	ldr	r2, [r0]
   13610:	lsl	r3, r6, #1
   13614:	ldrh	r3, [r2, r3]
   13618:	tst	r3, #1
   1361c:	beq	13698 <__assert_fail@plt+0x2154>
   13620:	ldr	r0, [r5, #156]	; 0x9c
   13624:	strb	r7, [r4], #1
   13628:	ldr	r7, [r5, #132]	; 0x84
   1362c:	cmp	r0, #0
   13630:	sub	r4, r4, r7
   13634:	beq	13658 <__assert_fail@plt+0x2114>
   13638:	ldrb	r2, [r0]
   1363c:	ldrb	r3, [r7]
   13640:	cmp	r2, r3
   13644:	bne	13658 <__assert_fail@plt+0x2114>
   13648:	mov	r1, r7
   1364c:	bl	11190 <strcmp@plt>
   13650:	cmp	r0, #0
   13654:	beq	135a8 <__assert_fail@plt+0x2064>
   13658:	ldr	r3, [pc, #256]	; 13760 <__assert_fail@plt+0x221c>
   1365c:	mov	r8, #0
   13660:	mov	r2, r7
   13664:	mov	r7, #1
   13668:	ldr	r1, [pc, #244]	; 13764 <__assert_fail@plt+0x2220>
   1366c:	ldrb	r3, [r3, #4]
   13670:	str	r8, [sp]
   13674:	add	r0, r1, #72	; 0x48
   13678:	str	r8, [sp, #4]
   1367c:	str	r3, [sp, #8]
   13680:	mov	r3, r4
   13684:	bl	13874 <__assert_fail@plt+0x2330>
   13688:	ldr	r4, [r5, #132]	; 0x84
   1368c:	mov	fp, #1
   13690:	mov	sl, r6
   13694:	b	133e0 <__assert_fail@plt+0x1e9c>
   13698:	cmp	r6, #39	; 0x27
   1369c:	beq	136b4 <__assert_fail@plt+0x2170>
   136a0:	cmp	r6, #92	; 0x5c
   136a4:	beq	13460 <__assert_fail@plt+0x1f1c>
   136a8:	cmp	r6, #34	; 0x22
   136ac:	movne	r7, #1
   136b0:	bne	136e0 <__assert_fail@plt+0x219c>
   136b4:	mov	r9, r6
   136b8:	mov	r7, #1
   136bc:	mov	fp, #2
   136c0:	b	13690 <__assert_fail@plt+0x214c>
   136c4:	cmp	r0, #10
   136c8:	beq	1341c <__assert_fail@plt+0x1ed8>
   136cc:	cmp	r9, r0
   136d0:	bne	136e4 <__assert_fail@plt+0x21a0>
   136d4:	mov	r7, #1
   136d8:	mov	fp, #0
   136dc:	b	13690 <__assert_fail@plt+0x214c>
   136e0:	mov	fp, #0
   136e4:	ldr	sl, [r5, #160]	; 0xa0
   136e8:	orrs	sl, r6, sl
   136ec:	bne	13718 <__assert_fail@plt+0x21d4>
   136f0:	mov	r2, #5
   136f4:	ldr	r1, [pc, #108]	; 13768 <__assert_fail@plt+0x2224>
   136f8:	mov	r0, sl
   136fc:	bl	11238 <dcgettext@plt>
   13700:	mov	r2, r0
   13704:	mov	r1, sl
   13708:	mov	r0, sl
   1370c:	bl	112f8 <error@plt>
   13710:	mov	r2, #1
   13714:	str	r2, [r5, #160]	; 0xa0
   13718:	ldr	r3, [sp, #20]
   1371c:	cmp	r4, r3
   13720:	bcc	13748 <__assert_fail@plt+0x2204>
   13724:	bl	13238 <__assert_fail@plt+0x1cf4>
   13728:	mov	r2, #5
   1372c:	ldr	r1, [pc, #56]	; 1376c <__assert_fail@plt+0x2228>
   13730:	mov	r0, #0
   13734:	bl	11238 <dcgettext@plt>
   13738:	mov	r2, r0
   1373c:	mov	r1, #0
   13740:	mov	r0, #1
   13744:	bl	112f8 <error@plt>
   13748:	strb	r6, [r4], #1
   1374c:	b	13690 <__assert_fail@plt+0x214c>
   13750:	andeq	fp, r2, r0, ror #3
   13754:	strdeq	r9, [r1], -ip
   13758:	andeq	r9, r1, r4, asr r1
   1375c:	andeq	r9, r1, fp, asr r1
   13760:	andeq	fp, r2, r0, ror #2
   13764:	strdeq	fp, [r2], -r0
   13768:	andeq	r9, r1, r2, ror #2
   1376c:	andeq	r9, r1, r5, ror #1
   13770:	push	{r4, r5, r6, lr}
   13774:	ldr	r4, [pc, #88]	; 137d4 <__assert_fail@plt+0x2290>
   13778:	bl	11370 <getpid@plt>
   1377c:	ldr	r3, [r4, #164]	; 0xa4
   13780:	cmp	r0, r3
   13784:	beq	1379c <__assert_fail@plt+0x2258>
   13788:	ldr	r3, [pc, #72]	; 137d8 <__assert_fail@plt+0x2294>
   1378c:	movw	r2, #1605	; 0x645
   13790:	ldr	r1, [pc, #68]	; 137dc <__assert_fail@plt+0x2298>
   13794:	ldr	r0, [pc, #68]	; 137e0 <__assert_fail@plt+0x229c>
   13798:	bl	11544 <__assert_fail@plt>
   1379c:	ldrb	r5, [r4, #168]	; 0xa8
   137a0:	cmp	r5, #0
   137a4:	popne	{r4, r5, r6, pc}
   137a8:	mov	r0, #1
   137ac:	mov	r1, r5
   137b0:	strb	r0, [r4, #168]	; 0xa8
   137b4:	bl	124f8 <__assert_fail@plt+0xfb4>
   137b8:	ldr	r2, [r4, #172]	; 0xac
   137bc:	strb	r5, [r4, #168]	; 0xa8
   137c0:	ldr	r3, [r4, #60]	; 0x3c
   137c4:	cmp	r2, r3
   137c8:	popeq	{r4, r5, r6, pc}
   137cc:	ldr	r0, [r4, #60]	; 0x3c
   137d0:	bl	111f0 <_exit@plt>
   137d4:	andeq	fp, r2, r0, ror #3
   137d8:	andeq	r8, r1, r5, lsl r1
   137dc:	andeq	r8, r1, r1, ror r3
   137e0:	andeq	r9, r1, sp, ror #3
   137e4:	mov	r0, #0
   137e8:	bx	lr
   137ec:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   137f0:	mov	r6, r0
   137f4:	mov	r5, r1
   137f8:	bl	1131c <getenv@plt>
   137fc:	subs	r3, r0, #0
   13800:	beq	13868 <__assert_fail@plt+0x2324>
   13804:	mov	r4, #0
   13808:	add	r3, sp, #12
   1380c:	mov	r2, #10
   13810:	add	r1, sp, #8
   13814:	str	r4, [sp]
   13818:	bl	17568 <__assert_fail@plt+0x6024>
   1381c:	cmp	r0, r4
   13820:	bne	1383c <__assert_fail@plt+0x22f8>
   13824:	ldr	r0, [sp, #12]
   13828:	cmp	r0, r5
   1382c:	movcs	r0, #0
   13830:	movcc	r0, #1
   13834:	add	sp, sp, #16
   13838:	pop	{r4, r5, r6, pc}
   1383c:	bl	113c4 <__errno_location@plt>
   13840:	ldr	r5, [r0]
   13844:	mov	r2, #5
   13848:	mov	r0, r4
   1384c:	ldr	r1, [pc, #28]	; 13870 <__assert_fail@plt+0x232c>
   13850:	bl	11238 <dcgettext@plt>
   13854:	mov	r2, r0
   13858:	mov	r3, r6
   1385c:	mov	r1, r5
   13860:	mov	r0, #1
   13864:	bl	112f8 <error@plt>
   13868:	mov	r0, r3
   1386c:	b	13834 <__assert_fail@plt+0x22f0>
   13870:	andeq	r9, r1, r0, ror r9
   13874:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13878:	subs	r8, r2, #0
   1387c:	ldr	fp, [sp, #40]	; 0x28
   13880:	ldr	sl, [sp, #44]	; 0x2c
   13884:	ldr	r6, [sp, #48]	; 0x30
   13888:	bne	138a0 <__assert_fail@plt+0x235c>
   1388c:	ldr	r3, [pc, #536]	; 13aac <__assert_fail@plt+0x2568>
   13890:	movw	r2, #341	; 0x155
   13894:	ldr	r1, [pc, #532]	; 13ab0 <__assert_fail@plt+0x256c>
   13898:	ldr	r0, [pc, #532]	; 13ab4 <__assert_fail@plt+0x2570>
   1389c:	bl	11544 <__assert_fail@plt>
   138a0:	ldr	r7, [pc, #528]	; 13ab8 <__assert_fail@plt+0x2574>
   138a4:	mov	r5, r0
   138a8:	mov	r4, r1
   138ac:	mov	r9, r3
   138b0:	cmp	r8, r7
   138b4:	beq	13990 <__assert_fail@plt+0x244c>
   138b8:	ldr	r2, [r1, #16]
   138bc:	add	r3, r3, sl
   138c0:	add	r3, r3, r2
   138c4:	ldr	r2, [r0, #12]
   138c8:	cmp	r3, r2
   138cc:	bls	13950 <__assert_fail@plt+0x240c>
   138d0:	cmp	r6, #0
   138d4:	bne	138e8 <__assert_fail@plt+0x23a4>
   138d8:	ldr	r2, [r1]
   138dc:	ldr	r3, [r0, #28]
   138e0:	cmp	r2, r3
   138e4:	bne	13908 <__assert_fail@plt+0x23c4>
   138e8:	ldr	r1, [pc, #460]	; 13abc <__assert_fail@plt+0x2578>
   138ec:	mov	r2, #5
   138f0:	mov	r0, #0
   138f4:	bl	11238 <dcgettext@plt>
   138f8:	mov	r2, r0
   138fc:	mov	r1, #0
   13900:	mov	r0, #1
   13904:	bl	112f8 <error@plt>
   13908:	ldr	r3, [r0, #24]
   1390c:	cmp	r3, #0
   13910:	bne	13938 <__assert_fail@plt+0x23f4>
   13914:	ldr	r3, [r0]
   13918:	cmp	r3, #0
   1391c:	beq	13944 <__assert_fail@plt+0x2400>
   13920:	ldr	r3, [r0, #36]	; 0x24
   13924:	cmp	r3, #0
   13928:	bne	13938 <__assert_fail@plt+0x23f4>
   1392c:	ldr	r3, [r0, #40]	; 0x28
   13930:	cmp	r3, #0
   13934:	beq	13944 <__assert_fail@plt+0x2400>
   13938:	mov	r2, #5
   1393c:	ldr	r1, [pc, #380]	; 13ac0 <__assert_fail@plt+0x257c>
   13940:	b	138f0 <__assert_fail@plt+0x23ac>
   13944:	mov	r1, r4
   13948:	mov	r0, r5
   1394c:	bl	13c44 <__assert_fail@plt+0x2700>
   13950:	cmp	r6, #0
   13954:	ldr	r2, [r4]
   13958:	bne	13978 <__assert_fail@plt+0x2434>
   1395c:	ldr	r1, [r5, #40]	; 0x28
   13960:	cmp	r1, #0
   13964:	beq	13978 <__assert_fail@plt+0x2434>
   13968:	ldr	r3, [r5, #28]
   1396c:	sub	r3, r2, r3
   13970:	cmp	r1, r3
   13974:	beq	13984 <__assert_fail@plt+0x2440>
   13978:	ldr	r3, [r5, #16]
   1397c:	cmp	r2, r3
   13980:	bne	13990 <__assert_fail@plt+0x244c>
   13984:	mov	r1, r4
   13988:	mov	r0, r5
   1398c:	bl	13c44 <__assert_fail@plt+0x2700>
   13990:	cmp	r6, #0
   13994:	ldr	r1, [r4, #8]
   13998:	moveq	r3, #1
   1399c:	streq	r3, [r4, #28]
   139a0:	ldr	r3, [r4]
   139a4:	cmp	r3, r1
   139a8:	bcc	139cc <__assert_fail@plt+0x2488>
   139ac:	ldr	r0, [r4, #4]
   139b0:	cmp	r0, #0
   139b4:	bne	13a98 <__assert_fail@plt+0x2554>
   139b8:	mov	r3, #64	; 0x40
   139bc:	mov	r0, #256	; 0x100
   139c0:	str	r3, [r4, #8]
   139c4:	bl	17228 <__assert_fail@plt+0x5ce4>
   139c8:	str	r0, [r4, #4]
   139cc:	ldr	r3, [r4]
   139d0:	cmp	r8, r7
   139d4:	moveq	r2, #0
   139d8:	ldr	r1, [r4, #4]
   139dc:	add	ip, r3, #1
   139e0:	streq	ip, [r4]
   139e4:	streq	r2, [r1, r3, lsl #2]
   139e8:	beq	13a84 <__assert_fail@plt+0x2540>
   139ec:	ldr	r2, [r4, #12]
   139f0:	cmp	fp, #0
   139f4:	str	ip, [r4]
   139f8:	ldr	r0, [r4, #16]
   139fc:	add	r2, r2, r0
   13a00:	str	r2, [r1, r3, lsl #2]
   13a04:	beq	13a24 <__assert_fail@plt+0x24e0>
   13a08:	ldr	r3, [r4, #12]
   13a0c:	mov	r1, fp
   13a10:	add	r0, r3, r0
   13a14:	bl	112d4 <strcpy@plt>
   13a18:	ldr	r3, [r4, #16]
   13a1c:	add	r3, r3, sl
   13a20:	str	r3, [r4, #16]
   13a24:	ldr	r0, [r4, #12]
   13a28:	mov	r1, r8
   13a2c:	ldr	r3, [r4, #16]
   13a30:	add	r0, r0, r3
   13a34:	bl	112d4 <strcpy@plt>
   13a38:	cmp	r6, #0
   13a3c:	ldr	r2, [r4]
   13a40:	ldr	r3, [r4, #16]
   13a44:	add	r3, r3, r9
   13a48:	str	r3, [r4, #16]
   13a4c:	bne	13a6c <__assert_fail@plt+0x2528>
   13a50:	ldr	r1, [r5, #40]	; 0x28
   13a54:	cmp	r1, #0
   13a58:	beq	13a6c <__assert_fail@plt+0x2528>
   13a5c:	ldr	r3, [r5, #28]
   13a60:	sub	r3, r2, r3
   13a64:	cmp	r1, r3
   13a68:	beq	13a78 <__assert_fail@plt+0x2534>
   13a6c:	ldr	r3, [r5, #16]
   13a70:	cmp	r2, r3
   13a74:	bne	13a84 <__assert_fail@plt+0x2540>
   13a78:	mov	r1, r4
   13a7c:	mov	r0, r5
   13a80:	bl	13c44 <__assert_fail@plt+0x2700>
   13a84:	cmp	r6, #0
   13a88:	ldrne	r3, [r4, #16]
   13a8c:	strne	r3, [r4, #20]
   13a90:	add	sp, sp, #4
   13a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a98:	lsl	r3, r1, #1
   13a9c:	lsl	r1, r1, #3
   13aa0:	str	r3, [r4, #8]
   13aa4:	bl	17254 <__assert_fail@plt+0x5d10>
   13aa8:	b	139c8 <__assert_fail@plt+0x2484>
   13aac:	andeq	r9, r1, sp, lsr #18
   13ab0:	andeq	r9, r1, sp, lsr #19
   13ab4:			; <UNDEFINED> instruction: 0x000199b8
   13ab8:	andeq	r9, r1, r4, asr #19
   13abc:	ldrdeq	r9, [r1], -r0
   13ac0:	andeq	r9, r1, fp, lsl #20
   13ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ac8:	sub	sp, sp, #36	; 0x24
   13acc:	mov	r8, r3
   13ad0:	mov	r9, r0
   13ad4:	mov	r5, r2
   13ad8:	ldr	r3, [sp, #72]	; 0x48
   13adc:	ldr	r4, [pc, #344]	; 13c3c <__assert_fail@plt+0x26f8>
   13ae0:	ldr	r0, [r0, #12]
   13ae4:	str	r3, [sp, #4]
   13ae8:	ldr	r3, [sp, #76]	; 0x4c
   13aec:	str	r1, [sp, #16]
   13af0:	sub	r7, r0, #1
   13af4:	str	r3, [sp, #8]
   13af8:	ldr	r3, [sp, #80]	; 0x50
   13afc:	str	r3, [sp, #20]
   13b00:	ldr	r3, [sp, #84]	; 0x54
   13b04:	str	r3, [sp, #12]
   13b08:	ldr	r3, [sp, #88]	; 0x58
   13b0c:	str	r3, [sp, #24]
   13b10:	ldr	r3, [r4]
   13b14:	cmp	r3, #0
   13b18:	bne	13b28 <__assert_fail@plt+0x25e4>
   13b1c:	add	r0, r0, #1
   13b20:	bl	17228 <__assert_fail@plt+0x5ce4>
   13b24:	str	r0, [r4]
   13b28:	ldr	sl, [r4]
   13b2c:	ldrd	r2, [sp, #8]
   13b30:	mov	r4, sl
   13b34:	add	fp, r3, r2
   13b38:	mov	r0, r5
   13b3c:	ldr	r1, [r9, #24]
   13b40:	bl	15048 <__assert_fail@plt+0x3b04>
   13b44:	subs	r3, r0, #0
   13b48:	subne	r6, r3, r5
   13b4c:	moveq	r6, r8
   13b50:	cmp	r7, r6
   13b54:	str	r3, [sp, #28]
   13b58:	bls	13be0 <__assert_fail@plt+0x269c>
   13b5c:	mov	r1, r5
   13b60:	mov	r0, r4
   13b64:	mov	r2, r6
   13b68:	sub	r7, r7, r6
   13b6c:	bl	113f4 <strncpy@plt>
   13b70:	ldr	r3, [sp, #28]
   13b74:	add	r4, r4, r6
   13b78:	add	r5, r5, r6
   13b7c:	sub	r8, r8, r6
   13b80:	cmp	r3, #0
   13b84:	beq	13bd4 <__assert_fail@plt+0x2690>
   13b88:	cmp	fp, r7
   13b8c:	bcs	13be0 <__assert_fail@plt+0x269c>
   13b90:	ldr	r3, [sp, #4]
   13b94:	sub	r7, r7, fp
   13b98:	cmp	r3, #0
   13b9c:	beq	13bb4 <__assert_fail@plt+0x2670>
   13ba0:	mov	r1, r3
   13ba4:	mov	r0, r4
   13ba8:	bl	112d4 <strcpy@plt>
   13bac:	ldr	r3, [sp, #8]
   13bb0:	add	r4, r4, r3
   13bb4:	mov	r0, r4
   13bb8:	ldr	r1, [sp, #20]
   13bbc:	bl	112d4 <strcpy@plt>
   13bc0:	ldr	r3, [sp, #12]
   13bc4:	add	r4, r4, r3
   13bc8:	ldr	r3, [r9, #20]
   13bcc:	add	r5, r5, r3
   13bd0:	sub	r8, r8, r3
   13bd4:	ldrb	r3, [r5]
   13bd8:	cmp	r3, #0
   13bdc:	bne	13b38 <__assert_fail@plt+0x25f4>
   13be0:	ldrb	r3, [r5]
   13be4:	cmp	r3, #0
   13be8:	beq	13c0c <__assert_fail@plt+0x26c8>
   13bec:	mov	r2, #5
   13bf0:	ldr	r1, [pc, #72]	; 13c40 <__assert_fail@plt+0x26fc>
   13bf4:	mov	r0, #0
   13bf8:	bl	11238 <dcgettext@plt>
   13bfc:	mov	r2, r0
   13c00:	mov	r1, #0
   13c04:	mov	r0, #1
   13c08:	bl	112f8 <error@plt>
   13c0c:	ldr	r1, [sp, #16]
   13c10:	mov	r0, r9
   13c14:	strb	r3, [r4], #1
   13c18:	ldr	r2, [sp, #24]
   13c1c:	str	r3, [sp, #72]	; 0x48
   13c20:	str	r3, [sp, #76]	; 0x4c
   13c24:	sub	r3, r4, sl
   13c28:	str	r2, [sp, #80]	; 0x50
   13c2c:	mov	r2, sl
   13c30:	add	sp, sp, #36	; 0x24
   13c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c38:	b	13874 <__assert_fail@plt+0x2330>
   13c3c:	muleq	r2, r0, r2
   13c40:	andeq	r9, r1, r2, lsr #20
   13c44:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13c48:	mov	r3, #0
   13c4c:	mov	r5, r1
   13c50:	mov	r9, r0
   13c54:	ldr	r2, [pc, #592]	; 13eac <__assert_fail@plt+0x2968>
   13c58:	str	r3, [sp]
   13c5c:	str	r3, [sp, #4]
   13c60:	str	r3, [sp, #8]
   13c64:	bl	13874 <__assert_fail@plt+0x2330>
   13c68:	ldr	r3, [r5]
   13c6c:	cmp	r3, #0
   13c70:	bne	13c88 <__assert_fail@plt+0x2744>
   13c74:	ldr	r3, [pc, #564]	; 13eb0 <__assert_fail@plt+0x296c>
   13c78:	movw	r2, #261	; 0x105
   13c7c:	ldr	r1, [pc, #560]	; 13eb4 <__assert_fail@plt+0x2970>
   13c80:	ldr	r0, [pc, #560]	; 13eb8 <__assert_fail@plt+0x2974>
   13c84:	bl	11544 <__assert_fail@plt>
   13c88:	ldr	r2, [r5, #4]
   13c8c:	sub	r3, r3, #-1073741823	; 0xc0000001
   13c90:	lsl	r0, r3, #2
   13c94:	ldr	r7, [r2, r3, lsl #2]
   13c98:	cmp	r7, #0
   13c9c:	beq	13cb4 <__assert_fail@plt+0x2770>
   13ca0:	ldr	r3, [pc, #520]	; 13eb0 <__assert_fail@plt+0x296c>
   13ca4:	movw	r2, #262	; 0x106
   13ca8:	ldr	r1, [pc, #516]	; 13eb4 <__assert_fail@plt+0x2970>
   13cac:	ldr	r0, [pc, #520]	; 13ebc <__assert_fail@plt+0x2978>
   13cb0:	b	13c84 <__assert_fail@plt+0x2740>
   13cb4:	add	r0, r0, #8
   13cb8:	bl	17228 <__assert_fail@plt+0x5ce4>
   13cbc:	ldr	r4, [r5]
   13cc0:	mov	r8, r0
   13cc4:	mov	r3, #0
   13cc8:	ldr	r2, [r9, #28]
   13ccc:	cmp	r2, r3
   13cd0:	bne	13d10 <__assert_fail@plt+0x27cc>
   13cd4:	ldr	r1, [r5]
   13cd8:	add	r2, r7, r3
   13cdc:	mov	r6, r3
   13ce0:	cmp	r1, r2
   13ce4:	cmphi	r4, r6
   13ce8:	movhi	r0, #1
   13cec:	movls	r0, #0
   13cf0:	bhi	13d24 <__assert_fail@plt+0x27e0>
   13cf4:	cmp	r3, r6
   13cf8:	bls	13d3c <__assert_fail@plt+0x27f8>
   13cfc:	ldr	r3, [pc, #444]	; 13ec0 <__assert_fail@plt+0x297c>
   13d00:	mov	r2, #242	; 0xf2
   13d04:	ldr	r1, [pc, #424]	; 13eb4 <__assert_fail@plt+0x2970>
   13d08:	ldr	r0, [pc, #436]	; 13ec4 <__assert_fail@plt+0x2980>
   13d0c:	b	13c84 <__assert_fail@plt+0x2740>
   13d10:	ldr	r1, [r5, #4]
   13d14:	ldr	r1, [r1, r3, lsl #2]
   13d18:	str	r1, [r8, r3, lsl #2]
   13d1c:	add	r3, r3, #1
   13d20:	b	13ccc <__assert_fail@plt+0x2788>
   13d24:	ldr	r0, [r5, #4]
   13d28:	ldr	r0, [r0, r2, lsl #2]
   13d2c:	add	r2, r2, #1
   13d30:	str	r0, [r8, r6, lsl #2]
   13d34:	add	r6, r6, #1
   13d38:	b	13ce0 <__assert_fail@plt+0x279c>
   13d3c:	mov	r3, r8
   13d40:	mov	r2, r6
   13d44:	str	r0, [r8, r6, lsl #2]
   13d48:	mov	r0, r9
   13d4c:	ldr	r1, [r5, #24]
   13d50:	ldr	sl, [r9, #32]
   13d54:	blx	sl
   13d58:	subs	sl, r0, #0
   13d5c:	ldr	r1, [r9, #28]
   13d60:	beq	13e14 <__assert_fail@plt+0x28d0>
   13d64:	ldr	r2, [r5, #36]	; 0x24
   13d68:	mov	r3, r1
   13d6c:	cmp	r4, r2
   13d70:	strhi	r4, [r5, #36]	; 0x24
   13d74:	ldr	r0, [r5, #36]	; 0x24
   13d78:	cmp	r0, #0
   13d7c:	beq	13d8c <__assert_fail@plt+0x2848>
   13d80:	ldr	r2, [r5, #40]	; 0x28
   13d84:	cmp	r0, r2
   13d88:	bcc	13de4 <__assert_fail@plt+0x28a0>
   13d8c:	cmn	r4, #1
   13d90:	addne	r4, r4, #1
   13d94:	cmp	r3, #0
   13d98:	bne	13dfc <__assert_fail@plt+0x28b8>
   13d9c:	sub	r7, r7, r3
   13da0:	add	r7, r7, r6
   13da4:	ldr	r3, [r5]
   13da8:	add	r2, r7, #1
   13dac:	sub	r1, r3, r1
   13db0:	cmp	r2, r1
   13db4:	bcc	13cc4 <__assert_fail@plt+0x2780>
   13db8:	mov	r0, r8
   13dbc:	bl	17b64 <__assert_fail@plt+0x6620>
   13dc0:	ldr	r3, [r9, #28]
   13dc4:	mov	r0, #0
   13dc8:	mvn	r1, #0
   13dcc:	str	r3, [r5]
   13dd0:	ldr	r3, [r5, #20]
   13dd4:	strd	r0, [r5, #28]
   13dd8:	str	r3, [r5, #16]
   13ddc:	add	sp, sp, #16
   13de0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13de4:	sub	r2, r2, r0
   13de8:	cmp	r2, #1
   13dec:	addne	r4, r4, r2, lsr #1
   13df0:	addeq	r4, r4, #1
   13df4:	cmp	r1, #0
   13df8:	beq	13e08 <__assert_fail@plt+0x28c4>
   13dfc:	add	r2, r3, #1
   13e00:	cmp	r4, r2
   13e04:	movcc	r4, r2
   13e08:	cmp	r4, #0
   13e0c:	moveq	r4, #1
   13e10:	b	13d9c <__assert_fail@plt+0x2858>
   13e14:	add	r2, r1, #1
   13e18:	cmp	r2, r4
   13e1c:	bcc	13e3c <__assert_fail@plt+0x28f8>
   13e20:	mov	r2, #5
   13e24:	ldr	r1, [pc, #156]	; 13ec8 <__assert_fail@plt+0x2984>
   13e28:	bl	11238 <dcgettext@plt>
   13e2c:	mov	r2, r0
   13e30:	mov	r1, sl
   13e34:	mov	r0, #1
   13e38:	bl	112f8 <error@plt>
   13e3c:	ldr	r0, [r5, #40]	; 0x28
   13e40:	cmp	r4, r0
   13e44:	movcs	r3, #0
   13e48:	movcc	r3, #1
   13e4c:	cmp	r0, #0
   13e50:	ldr	r0, [r5, #36]	; 0x24
   13e54:	moveq	r3, #1
   13e58:	cmp	r3, #0
   13e5c:	strne	r4, [r5, #40]	; 0x28
   13e60:	cmp	r0, #0
   13e64:	beq	13e74 <__assert_fail@plt+0x2930>
   13e68:	ldr	r3, [r5, #40]	; 0x28
   13e6c:	cmp	r0, r3
   13e70:	bcc	13e98 <__assert_fail@plt+0x2954>
   13e74:	lsr	r4, r4, #1
   13e78:	cmp	r1, #0
   13e7c:	beq	13e8c <__assert_fail@plt+0x2948>
   13e80:	cmp	r2, r4
   13e84:	bcc	13da4 <__assert_fail@plt+0x2860>
   13e88:	mov	r4, r2
   13e8c:	cmp	r4, #0
   13e90:	moveq	r4, #1
   13e94:	b	13da4 <__assert_fail@plt+0x2860>
   13e98:	sub	r3, r3, r0
   13e9c:	cmp	r3, #1
   13ea0:	subne	r4, r4, r3, lsr #1
   13ea4:	subeq	r4, r4, #1
   13ea8:	b	13e78 <__assert_fail@plt+0x2934>
   13eac:	andeq	r9, r1, r4, asr #19
   13eb0:	andeq	r9, r1, r9, lsr r9
   13eb4:	andeq	r9, r1, sp, lsr #19
   13eb8:	andeq	r9, r1, r3, lsr sl
   13ebc:	andeq	r9, r1, r7, asr #20
   13ec0:	andeq	r9, r1, r4, asr #18
   13ec4:	andeq	r9, r1, r2, ror sl
   13ec8:	andeq	r9, r1, pc, lsl #21
   13ecc:	push	{r4, lr}
   13ed0:	mov	r0, #0
   13ed4:	bl	11244 <sysconf@plt>
   13ed8:	cmp	r0, #0
   13edc:	mvnle	r0, #-2147483648	; 0x80000000
   13ee0:	pop	{r4, pc}
   13ee4:	ldr	r3, [pc, #48]	; 13f1c <__assert_fail@plt+0x29d8>
   13ee8:	push	{r4, r5, r6, lr}
   13eec:	mov	r5, #0
   13ef0:	ldr	r4, [r3]
   13ef4:	sub	r4, r4, #4
   13ef8:	ldr	r0, [r4, #4]!
   13efc:	cmp	r0, #0
   13f00:	bne	13f0c <__assert_fail@plt+0x29c8>
   13f04:	mov	r0, r5
   13f08:	pop	{r4, r5, r6, pc}
   13f0c:	bl	11394 <strlen@plt>
   13f10:	add	r0, r0, #1
   13f14:	add	r5, r5, r0
   13f18:	b	13ef8 <__assert_fail@plt+0x29b4>
   13f1c:			; <UNDEFINED> instruction: 0x0002b1b4
   13f20:	push	{r4, r5, r6, lr}
   13f24:	mov	r4, r0
   13f28:	mov	r6, r1
   13f2c:	bl	13ee4 <__assert_fail@plt+0x29a0>
   13f30:	mov	r3, #4096	; 0x1000
   13f34:	mov	r5, r0
   13f38:	str	r3, [r4, #8]
   13f3c:	bl	13ecc <__assert_fail@plt+0x2988>
   13f40:	mov	r3, #0
   13f44:	cmp	r0, r5
   13f48:	str	r3, [r4]
   13f4c:	str	r0, [r4, #4]
   13f50:	bcc	13fb8 <__assert_fail@plt+0x2a74>
   13f54:	add	r2, r5, r6
   13f58:	cmp	r0, r2
   13f5c:	bls	13fc0 <__assert_fail@plt+0x2a7c>
   13f60:	sub	r0, r0, r6
   13f64:	sub	r0, r0, r5
   13f68:	lsr	r2, r0, #2
   13f6c:	str	r0, [r4, #4]
   13f70:	sub	r2, r2, #2
   13f74:	cmp	r2, r3
   13f78:	str	r2, [r4, #16]
   13f7c:	bne	13f94 <__assert_fail@plt+0x2a50>
   13f80:	ldr	r3, [pc, #64]	; 13fc8 <__assert_fail@plt+0x2a84>
   13f84:	movw	r2, #518	; 0x206
   13f88:	ldr	r1, [pc, #60]	; 13fcc <__assert_fail@plt+0x2a88>
   13f8c:	ldr	r0, [pc, #60]	; 13fd0 <__assert_fail@plt+0x2a8c>
   13f90:	bl	11544 <__assert_fail@plt>
   13f94:	ldr	r2, [pc, #56]	; 13fd4 <__assert_fail@plt+0x2a90>
   13f98:	str	r0, [r4, #12]
   13f9c:	mov	r0, r3
   13fa0:	str	r3, [r4, #20]
   13fa4:	str	r3, [r4, #24]
   13fa8:	str	r3, [r4, #28]
   13fac:	strd	r2, [r4, #32]
   13fb0:	str	r3, [r4, #40]	; 0x28
   13fb4:	pop	{r4, r5, r6, pc}
   13fb8:	mov	r0, #1
   13fbc:	pop	{r4, r5, r6, pc}
   13fc0:	mov	r0, #2
   13fc4:	pop	{r4, r5, r6, pc}
   13fc8:	andeq	r9, r1, lr, asr #18
   13fcc:	andeq	r9, r1, sp, lsr #19
   13fd0:	andeq	r9, r1, r3, asr #21
   13fd4:	andeq	r3, r1, r4, ror #15
   13fd8:	ldr	r3, [r0, #4]
   13fdc:	cmp	r3, #131072	; 0x20000
   13fe0:	bcs	13fec <__assert_fail@plt+0x2aa8>
   13fe4:	str	r3, [r0, #12]
   13fe8:	bx	lr
   13fec:	ldr	r3, [r0, #8]
   13ff0:	cmp	r3, #131072	; 0x20000
   13ff4:	movls	r3, #131072	; 0x20000
   13ff8:	b	13fe4 <__assert_fail@plt+0x2aa0>
   13ffc:	ldr	r3, [pc, #108]	; 14070 <__assert_fail@plt+0x2b2c>
   14000:	push	{r4, r5, r6, lr}
   14004:	mov	r5, #0
   14008:	ldr	r0, [r0, #12]
   1400c:	str	r5, [r1]
   14010:	str	r5, [r1, #4]
   14014:	str	r5, [r1, #8]
   14018:	str	r5, [r1, #16]
   1401c:	cmp	r0, r3
   14020:	str	r5, [r1, #36]	; 0x24
   14024:	str	r5, [r1, #40]	; 0x28
   14028:	bls	14040 <__assert_fail@plt+0x2afc>
   1402c:	ldr	r3, [pc, #64]	; 14074 <__assert_fail@plt+0x2b30>
   14030:	mov	r2, #572	; 0x23c
   14034:	ldr	r1, [pc, #60]	; 14078 <__assert_fail@plt+0x2b34>
   14038:	ldr	r0, [pc, #60]	; 1407c <__assert_fail@plt+0x2b38>
   1403c:	bl	11544 <__assert_fail@plt>
   14040:	add	r0, r0, #1
   14044:	mov	r4, r1
   14048:	mov	r6, r2
   1404c:	bl	17228 <__assert_fail@plt+0x5ce4>
   14050:	mvn	r3, #0
   14054:	str	r0, [r4, #12]
   14058:	str	r5, [r4, #16]
   1405c:	str	r5, [r4, #20]
   14060:	str	r6, [r4, #24]
   14064:	str	r5, [r4, #28]
   14068:	str	r3, [r4, #32]
   1406c:	pop	{r4, r5, r6, pc}
   14070:	svcvc	0x00fff7ff
   14074:	andeq	r9, r1, r2, ror #18
   14078:	andeq	r9, r1, sp, lsr #19
   1407c:	ldrdeq	r9, [r1], -sl
   14080:	ldr	r3, [r0, #28]
   14084:	mov	r2, #0
   14088:	str	r3, [r1]
   1408c:	ldr	r3, [r1, #20]
   14090:	str	r3, [r1, #16]
   14094:	mvn	r3, #0
   14098:	strd	r2, [r1, #28]
   1409c:	bx	lr
   140a0:	push	{r4, r5, r6, lr}
   140a4:	mov	r4, #0
   140a8:	mov	r6, r0
   140ac:	mov	r5, r4
   140b0:	ldr	r0, [r6, r4, lsl #2]
   140b4:	cmp	r0, #0
   140b8:	bne	140e8 <__assert_fail@plt+0x2ba4>
   140bc:	mov	r1, r4
   140c0:	ldr	r0, [pc, #56]	; 14100 <__assert_fail@plt+0x2bbc>
   140c4:	bl	137ec <__assert_fail@plt+0x22a8>
   140c8:	cmp	r0, #0
   140cc:	bne	140f8 <__assert_fail@plt+0x2bb4>
   140d0:	mov	r1, r5
   140d4:	ldr	r0, [pc, #40]	; 14104 <__assert_fail@plt+0x2bc0>
   140d8:	bl	137ec <__assert_fail@plt+0x22a8>
   140dc:	adds	r0, r0, #0
   140e0:	movne	r0, #1
   140e4:	pop	{r4, r5, r6, pc}
   140e8:	bl	11394 <strlen@plt>
   140ec:	add	r4, r4, #1
   140f0:	add	r5, r5, r0
   140f4:	b	140b0 <__assert_fail@plt+0x2b6c>
   140f8:	mov	r0, #1
   140fc:	pop	{r4, r5, r6, pc}
   14100:	strdeq	r9, [r1], -sp
   14104:	andeq	r9, r1, r2, lsr #22
   14108:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1410c:	ldr	r0, [pc, #192]	; 141d4 <__assert_fail@plt+0x2c90>
   14110:	bl	14b30 <__assert_fail@plt+0x35ec>
   14114:	subs	r7, r0, #0
   14118:	bne	14128 <__assert_fail@plt+0x2be4>
   1411c:	mvn	r5, #0
   14120:	mov	r0, r5
   14124:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14128:	bl	113c4 <__errno_location@plt>
   1412c:	mov	r6, #0
   14130:	mov	r8, r0
   14134:	mvn	r5, #0
   14138:	mov	r9, r6
   1413c:	mov	r0, r7
   14140:	str	r9, [r8]
   14144:	bl	114a8 <readdir64@plt>
   14148:	subs	r4, r0, #0
   1414c:	bne	14194 <__assert_fail@plt+0x2c50>
   14150:	ldr	r8, [r8]
   14154:	cmp	r8, #0
   14158:	beq	14180 <__assert_fail@plt+0x2c3c>
   1415c:	ldr	r2, [pc, #112]	; 141d4 <__assert_fail@plt+0x2c90>
   14160:	mov	r1, #8
   14164:	mov	r6, r4
   14168:	bl	16a14 <__assert_fail@plt+0x54d0>
   1416c:	mov	r3, r0
   14170:	ldr	r2, [pc, #96]	; 141d8 <__assert_fail@plt+0x2c94>
   14174:	mov	r1, r8
   14178:	mov	r0, r4
   1417c:	bl	112f8 <error@plt>
   14180:	mov	r0, r7
   14184:	bl	11538 <closedir@plt>
   14188:	cmp	r6, #0
   1418c:	bne	14120 <__assert_fail@plt+0x2bdc>
   14190:	b	1411c <__assert_fail@plt+0x2bd8>
   14194:	ldrb	r3, [r4, #19]
   14198:	cmp	r3, #46	; 0x2e
   1419c:	bne	141b8 <__assert_fail@plt+0x2c74>
   141a0:	ldrb	r3, [r4, #20]
   141a4:	cmp	r3, #0
   141a8:	beq	1413c <__assert_fail@plt+0x2bf8>
   141ac:	ldrh	r3, [r4, #20]
   141b0:	cmp	r3, #46	; 0x2e
   141b4:	beq	1413c <__assert_fail@plt+0x2bf8>
   141b8:	mov	r1, #0
   141bc:	add	r0, r4, #19
   141c0:	bl	14644 <__assert_fail@plt+0x3100>
   141c4:	cmp	r5, r0
   141c8:	mov	r6, #1
   141cc:	movlt	r5, r0
   141d0:	b	1413c <__assert_fail@plt+0x2bf8>
   141d4:	andeq	r9, r1, r1, ror #22
   141d8:	andeq	r9, r1, ip, lsr #25
   141dc:	push	{r0, r1, r2, r3, r4, lr}
   141e0:	mov	r0, #4
   141e4:	bl	11244 <sysconf@plt>
   141e8:	cmn	r0, #1
   141ec:	mov	r1, sp
   141f0:	movne	r4, r0
   141f4:	mov	r0, #7
   141f8:	moveq	r4, #20
   141fc:	bl	1125c <getrlimit64@plt>
   14200:	cmp	r0, #0
   14204:	bne	14220 <__assert_fail@plt+0x2cdc>
   14208:	ldrd	r2, [sp]
   1420c:	mvn	r1, #0
   14210:	mvn	r0, #0
   14214:	cmp	r3, r1
   14218:	cmpeq	r2, r0
   1421c:	movne	r4, r2
   14220:	mov	r0, r4
   14224:	add	sp, sp, #16
   14228:	pop	{r4, pc}
   1422c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14230:	mov	r6, #0
   14234:	sub	sp, sp, #524	; 0x20c
   14238:	mov	r7, r0
   1423c:	mov	r8, r1
   14240:	mov	r9, r2
   14244:	mov	sl, #5
   14248:	mov	fp, r6
   1424c:	cmp	r7, r6
   14250:	movle	r0, #0
   14254:	ble	142e4 <__assert_fail@plt+0x2da0>
   14258:	sub	r5, r7, r6
   1425c:	add	r4, sp, #8
   14260:	cmp	r5, #64	; 0x40
   14264:	mov	r2, r4
   14268:	movge	r5, #64	; 0x40
   1426c:	mov	r3, #0
   14270:	add	r1, r6, r3
   14274:	add	r3, r3, #1
   14278:	strh	sl, [r2, #4]
   1427c:	cmp	r3, r5
   14280:	strh	fp, [r2, #6]
   14284:	str	r1, [r2], #8
   14288:	bne	14270 <__assert_fail@plt+0x2d2c>
   1428c:	mov	r2, #0
   14290:	mov	r1, r5
   14294:	mov	r0, r4
   14298:	bl	11298 <poll@plt>
   1429c:	cmn	r0, #1
   142a0:	beq	142e4 <__assert_fail@plt+0x2da0>
   142a4:	add	r3, r4, r5, lsl #3
   142a8:	ldrsh	r2, [r4, #6]
   142ac:	cmp	r2, #32
   142b0:	bne	142c8 <__assert_fail@plt+0x2d84>
   142b4:	add	r4, r4, #8
   142b8:	cmp	r4, r3
   142bc:	bne	142a8 <__assert_fail@plt+0x2d64>
   142c0:	add	r6, r6, r5
   142c4:	b	1424c <__assert_fail@plt+0x2d08>
   142c8:	mov	r1, r9
   142cc:	ldr	r0, [r4]
   142d0:	str	r3, [sp, #4]
   142d4:	blx	r8
   142d8:	cmp	r0, #0
   142dc:	ldr	r3, [sp, #4]
   142e0:	beq	142b4 <__assert_fail@plt+0x2d70>
   142e4:	add	sp, sp, #524	; 0x20c
   142e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	push	{r4, r5, r6, lr}
   142f0:	mov	r4, r1
   142f4:	mov	r1, #1
   142f8:	mov	r5, r0
   142fc:	bl	17928 <__assert_fail@plt+0x63e4>
   14300:	tst	r0, #1
   14304:	beq	14310 <__assert_fail@plt+0x2dcc>
   14308:	mov	r0, #0
   1430c:	pop	{r4, r5, r6, pc}
   14310:	ldr	r2, [r4, #4]
   14314:	ldr	r3, [r4, #8]
   14318:	cmp	r3, r2
   1431c:	bcs	1433c <__assert_fail@plt+0x2df8>
   14320:	ldr	r1, [r4]
   14324:	ldr	r1, [r1, r3, lsl #2]
   14328:	cmp	r5, r1
   1432c:	addgt	r3, r3, #1
   14330:	strgt	r3, [r4, #8]
   14334:	bgt	14314 <__assert_fail@plt+0x2dd0>
   14338:	beq	14308 <__assert_fail@plt+0x2dc4>
   1433c:	mvn	r0, #0
   14340:	str	r5, [r4, #12]
   14344:	pop	{r4, r5, r6, pc}
   14348:	push	{r4, r5, r6, lr}
   1434c:	mov	r4, r1
   14350:	mov	r1, #1
   14354:	mov	r6, r0
   14358:	bl	17928 <__assert_fail@plt+0x63e4>
   1435c:	ands	r5, r0, #1
   14360:	movne	r5, #0
   14364:	bne	1439c <__assert_fail@plt+0x2e58>
   14368:	ldrd	r0, [r4]
   1436c:	add	r2, r4, #8
   14370:	add	r1, r1, #1
   14374:	lsl	r1, r1, #2
   14378:	bl	147b0 <__assert_fail@plt+0x326c>
   1437c:	cmp	r0, #0
   14380:	ldrne	r3, [r4, #4]
   14384:	mvneq	r5, #0
   14388:	strne	r0, [r4]
   1438c:	strne	r6, [r0, r3, lsl #2]
   14390:	ldrne	r3, [r4, #4]
   14394:	addne	r3, r3, #1
   14398:	strne	r3, [r4, #4]
   1439c:	mov	r0, r5
   143a0:	pop	{r4, r5, r6, pc}
   143a4:	push	{r0, r1, r2, r3, r4, lr}
   143a8:	bl	14108 <__assert_fail@plt+0x2bc4>
   143ac:	cmp	r0, #0
   143b0:	bge	143b8 <__assert_fail@plt+0x2e74>
   143b4:	bl	141dc <__assert_fail@plt+0x2c98>
   143b8:	mov	r3, #0
   143bc:	cmn	r0, #-2147483647	; 0x80000001
   143c0:	ldr	r1, [pc, #48]	; 143f8 <__assert_fail@plt+0x2eb4>
   143c4:	add	r2, sp, #4
   143c8:	addne	r0, r0, #1
   143cc:	str	r3, [sp, #4]
   143d0:	str	r3, [sp, #8]
   143d4:	str	r3, [sp, #12]
   143d8:	bl	1422c <__assert_fail@plt+0x2ce8>
   143dc:	ldr	r3, [pc, #24]	; 143fc <__assert_fail@plt+0x2eb8>
   143e0:	ldr	r2, [sp, #4]
   143e4:	str	r2, [r3]
   143e8:	ldr	r2, [sp, #8]
   143ec:	str	r2, [r3, #4]
   143f0:	add	sp, sp, #20
   143f4:	pop	{pc}		; (ldr pc, [sp], #4)
   143f8:	andeq	r4, r1, r8, asr #6
   143fc:	muleq	r2, r4, r2
   14400:	push	{r1, r2, r3}
   14404:	push	{r0, r1, r4, r5, r6, r7, r8, r9, lr}
   14408:	mov	r8, r0
   1440c:	ldr	r4, [pc, #144]	; 144a4 <__assert_fail@plt+0x2f60>
   14410:	ldr	r6, [sp, #36]	; 0x24
   14414:	ldrb	r7, [r4, #8]
   14418:	ands	r5, r6, #64	; 0x40
   1441c:	addne	r3, sp, #40	; 0x28
   14420:	ldrne	r5, [sp, #40]	; 0x28
   14424:	strne	r3, [sp, #4]
   14428:	cmp	r7, #0
   1442c:	bne	14464 <__assert_fail@plt+0x2f20>
   14430:	mov	r1, #524288	; 0x80000
   14434:	ldr	r0, [pc, #108]	; 144a8 <__assert_fail@plt+0x2f64>
   14438:	bl	14ba8 <__assert_fail@plt+0x3664>
   1443c:	subs	r9, r0, #0
   14440:	blt	14458 <__assert_fail@plt+0x2f14>
   14444:	mov	r1, #1
   14448:	bl	17928 <__assert_fail@plt+0x63e4>
   1444c:	and	r7, r0, #1
   14450:	mov	r0, r9
   14454:	bl	1152c <close@plt>
   14458:	mov	r3, #1
   1445c:	strb	r3, [r4, #8]
   14460:	strb	r7, [r4, #9]
   14464:	mov	r2, r5
   14468:	orr	r1, r6, #524288	; 0x80000
   1446c:	mov	r0, r8
   14470:	bl	14ba8 <__assert_fail@plt+0x3664>
   14474:	subs	r5, r0, #0
   14478:	blt	14490 <__assert_fail@plt+0x2f4c>
   1447c:	ldrb	r3, [r4, #9]
   14480:	cmp	r3, #0
   14484:	bne	14490 <__assert_fail@plt+0x2f4c>
   14488:	mov	r1, #1
   1448c:	bl	148b4 <__assert_fail@plt+0x3370>
   14490:	mov	r0, r5
   14494:	add	sp, sp, #8
   14498:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1449c:	add	sp, sp, #12
   144a0:	bx	lr
   144a4:	muleq	r2, r4, r2
   144a8:	andeq	sl, r1, r0, ror #4
   144ac:	push	{r4, lr}
   144b0:	ldr	r4, [pc, #20]	; 144cc <__assert_fail@plt+0x2f88>
   144b4:	ldr	r0, [r4]
   144b8:	bl	17b64 <__assert_fail@plt+0x6620>
   144bc:	mov	r3, #0
   144c0:	str	r3, [r4]
   144c4:	str	r3, [r4, #4]
   144c8:	pop	{r4, pc}
   144cc:	muleq	r2, r4, r2
   144d0:	push	{r4, lr}
   144d4:	ldr	r0, [pc, #12]	; 144e8 <__assert_fail@plt+0x2fa4>
   144d8:	bl	1131c <getenv@plt>
   144dc:	adds	r0, r0, #0
   144e0:	movne	r0, #1
   144e4:	pop	{r4, pc}
   144e8:	andeq	r9, r1, pc, ror #22
   144ec:	ldr	r3, [pc, #148]	; 14588 <__assert_fail@plt+0x3044>
   144f0:	push	{r4, r5, lr}
   144f4:	sub	sp, sp, #20
   144f8:	ldr	r5, [r3]
   144fc:	ldr	r4, [r3, #4]
   14500:	bl	14108 <__assert_fail@plt+0x2bc4>
   14504:	cmp	r0, #0
   14508:	bge	14510 <__assert_fail@plt+0x2fcc>
   1450c:	bl	141dc <__assert_fail@plt+0x2c98>
   14510:	cmn	r0, #-2147483647	; 0x80000001
   14514:	mvn	r3, #0
   14518:	ldr	r1, [pc, #108]	; 1458c <__assert_fail@plt+0x3048>
   1451c:	str	r4, [sp, #4]
   14520:	mov	r4, #0
   14524:	addne	r0, r0, #1
   14528:	mov	r2, sp
   1452c:	str	r5, [sp]
   14530:	str	r4, [sp, #8]
   14534:	str	r3, [sp, #12]
   14538:	bl	1422c <__assert_fail@plt+0x2ce8>
   1453c:	ldr	r5, [sp, #12]
   14540:	cmp	r5, r4
   14544:	blt	14580 <__assert_fail@plt+0x303c>
   14548:	mov	r2, #5
   1454c:	ldr	r1, [pc, #60]	; 14590 <__assert_fail@plt+0x304c>
   14550:	mov	r0, r4
   14554:	bl	11238 <dcgettext@plt>
   14558:	mov	r2, r0
   1455c:	mov	r3, r5
   14560:	mov	r1, r4
   14564:	mov	r0, r4
   14568:	bl	112f8 <error@plt>
   1456c:	ldr	r3, [pc, #32]	; 14594 <__assert_fail@plt+0x3050>
   14570:	mov	r2, #396	; 0x18c
   14574:	ldr	r1, [pc, #28]	; 14598 <__assert_fail@plt+0x3054>
   14578:	ldr	r0, [pc, #28]	; 1459c <__assert_fail@plt+0x3058>
   1457c:	bl	11544 <__assert_fail@plt>
   14580:	add	sp, sp, #20
   14584:	pop	{r4, r5, pc}
   14588:	muleq	r2, r4, r2
   1458c:	andeq	r4, r1, ip, ror #5
   14590:	andeq	r9, r1, fp, lsl #23
   14594:	andeq	r9, r1, r8, asr #22
   14598:	andeq	r9, r1, r3, lsr #24
   1459c:	andeq	r9, r1, ip, lsr #24
   145a0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   145a4:	mov	r5, r0
   145a8:	ldr	r3, [pc, #120]	; 14628 <__assert_fail@plt+0x30e4>
   145ac:	ldr	r0, [r3]
   145b0:	bl	17ad8 <__assert_fail@plt+0x6594>
   145b4:	ldr	r3, [pc, #112]	; 1462c <__assert_fail@plt+0x30e8>
   145b8:	mov	r2, #5
   145bc:	mov	r0, #0
   145c0:	ldr	r1, [pc, #104]	; 14630 <__assert_fail@plt+0x30ec>
   145c4:	ldr	r4, [r3]
   145c8:	ldr	r3, [pc, #100]	; 14634 <__assert_fail@plt+0x30f0>
   145cc:	ldr	r6, [r3]
   145d0:	bl	11238 <dcgettext@plt>
   145d4:	mov	r7, r0
   145d8:	mov	r2, #5
   145dc:	ldr	r1, [pc, #84]	; 14638 <__assert_fail@plt+0x30f4>
   145e0:	mov	r0, #0
   145e4:	bl	11238 <dcgettext@plt>
   145e8:	mov	r8, r0
   145ec:	mov	r2, #5
   145f0:	ldr	r1, [pc, #68]	; 1463c <__assert_fail@plt+0x30f8>
   145f4:	mov	r0, #0
   145f8:	bl	11238 <dcgettext@plt>
   145fc:	ldr	r2, [pc, #60]	; 14640 <__assert_fail@plt+0x30fc>
   14600:	mov	r3, #0
   14604:	mov	r1, r5
   14608:	stm	sp, {r7, r8}
   1460c:	str	r0, [sp, #8]
   14610:	mov	r0, r4
   14614:	str	r3, [sp, #12]
   14618:	mov	r3, r6
   1461c:	bl	17178 <__assert_fail@plt+0x5c34>
   14620:	add	sp, sp, #16
   14624:	pop	{r4, r5, r6, r7, r8, pc}
   14628:	andeq	fp, r2, r8, asr #3
   1462c:	ldrdeq	fp, [r2], -r4
   14630:	andeq	r9, r1, r5, lsr ip
   14634:	andeq	fp, r2, r8, ror #2
   14638:	andeq	r9, r1, r4, asr #24
   1463c:	andeq	r9, r1, r3, asr ip
   14640:	andeq	r9, r1, r0, ror #24
   14644:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14648:	mov	r8, #0
   1464c:	mov	r4, r0
   14650:	mov	r7, r1
   14654:	bl	113c4 <__errno_location@plt>
   14658:	mov	r5, r0
   1465c:	mov	r2, #10
   14660:	str	r8, [r0]
   14664:	add	r1, sp, #12
   14668:	mov	r0, r4
   1466c:	bl	1119c <strtol@plt>
   14670:	sub	r3, r0, #-2147483647	; 0x80000001
   14674:	cmn	r3, #3
   14678:	bls	14690 <__assert_fail@plt+0x314c>
   1467c:	ldr	r2, [pc, #184]	; 1473c <__assert_fail@plt+0x31f8>
   14680:	mov	r3, r4
   14684:	ldr	r1, [r5]
   14688:	mov	r0, #1
   1468c:	bl	112f8 <error@plt>
   14690:	ldr	r3, [sp, #12]
   14694:	ldrb	r6, [r3]
   14698:	cmp	r6, #0
   1469c:	beq	146f4 <__assert_fail@plt+0x31b0>
   146a0:	mov	r2, #5
   146a4:	ldr	r1, [pc, #148]	; 14740 <__assert_fail@plt+0x31fc>
   146a8:	mov	r0, r8
   146ac:	ldr	r5, [r5]
   146b0:	bl	11238 <dcgettext@plt>
   146b4:	mov	r6, r0
   146b8:	mov	r1, r7
   146bc:	ldr	r2, [sp, #12]
   146c0:	mov	r0, r8
   146c4:	bl	16a14 <__assert_fail@plt+0x54d0>
   146c8:	mov	r8, r0
   146cc:	mov	r2, r4
   146d0:	mov	r1, r7
   146d4:	mov	r0, #1
   146d8:	bl	16a14 <__assert_fail@plt+0x54d0>
   146dc:	mov	r3, r8
   146e0:	mov	r2, r6
   146e4:	str	r0, [sp]
   146e8:	mov	r1, r5
   146ec:	mov	r0, #1
   146f0:	bl	112f8 <error@plt>
   146f4:	cmp	r4, r3
   146f8:	bne	14734 <__assert_fail@plt+0x31f0>
   146fc:	ldr	r5, [r5]
   14700:	mov	r2, #5
   14704:	mov	r0, r6
   14708:	ldr	r1, [pc, #52]	; 14744 <__assert_fail@plt+0x3200>
   1470c:	bl	11238 <dcgettext@plt>
   14710:	mov	r8, r0
   14714:	mov	r2, r4
   14718:	mov	r1, r7
   1471c:	mov	r0, r6
   14720:	bl	16a14 <__assert_fail@plt+0x54d0>
   14724:	mov	r3, r0
   14728:	mov	r2, r8
   1472c:	mov	r1, r5
   14730:	b	14688 <__assert_fail@plt+0x3144>
   14734:	add	sp, sp, #16
   14738:	pop	{r4, r5, r6, r7, r8, pc}
   1473c:	andeq	r9, r1, ip, lsr #25
   14740:	andeq	r9, r1, ip, ror ip
   14744:	muleq	r1, r7, ip
   14748:	push	{r4, r5, lr}
   1474c:	mov	r2, #5
   14750:	sub	sp, sp, #20
   14754:	mov	r4, r0
   14758:	mov	r5, r1
   1475c:	mov	r0, #0
   14760:	ldr	r1, [pc, #52]	; 1479c <__assert_fail@plt+0x3258>
   14764:	bl	11238 <dcgettext@plt>
   14768:	ldr	r3, [pc, #48]	; 147a0 <__assert_fail@plt+0x325c>
   1476c:	mov	r1, r0
   14770:	mov	r0, r4
   14774:	ldr	r2, [pc, #40]	; 147a4 <__assert_fail@plt+0x3260>
   14778:	str	r3, [sp, #8]
   1477c:	ldr	r3, [pc, #36]	; 147a8 <__assert_fail@plt+0x3264>
   14780:	str	r3, [sp, #4]
   14784:	ldr	r3, [pc, #32]	; 147ac <__assert_fail@plt+0x3268>
   14788:	str	r3, [sp]
   1478c:	mov	r3, r5
   14790:	bl	113b8 <fprintf@plt>
   14794:	add	sp, sp, #20
   14798:	pop	{r4, r5, pc}
   1479c:	andeq	r9, r1, pc, lsr #25
   147a0:	andeq	r9, r1, r4, lsr #27
   147a4:	andeq	r9, r1, sp, ror sp
   147a8:			; <UNDEFINED> instruction: 0x00019dba
   147ac:	andeq	r9, r1, r0, ror #24
   147b0:	push	{r4, r5, r6, r7, r8, lr}
   147b4:	mov	r6, r1
   147b8:	mov	r4, r0
   147bc:	mov	r5, r2
   147c0:	bl	113c4 <__errno_location@plt>
   147c4:	cmp	r6, #0
   147c8:	ldr	r8, [r0]
   147cc:	bne	147e4 <__assert_fail@plt+0x32a0>
   147d0:	ldr	r3, [pc, #172]	; 14884 <__assert_fail@plt+0x3340>
   147d4:	mov	r2, #71	; 0x47
   147d8:	ldr	r1, [pc, #168]	; 14888 <__assert_fail@plt+0x3344>
   147dc:	ldr	r0, [pc, #168]	; 1488c <__assert_fail@plt+0x3348>
   147e0:	bl	11544 <__assert_fail@plt>
   147e4:	ldr	r3, [r5]
   147e8:	mov	r7, r0
   147ec:	cmp	r3, #0
   147f0:	movne	r0, r3
   147f4:	moveq	r0, #16
   147f8:	cmp	r6, r0
   147fc:	bhi	14824 <__assert_fail@plt+0x32e0>
   14800:	cmp	r3, #0
   14804:	bne	14850 <__assert_fail@plt+0x330c>
   14808:	cmp	r4, #0
   1480c:	beq	1483c <__assert_fail@plt+0x32f8>
   14810:	ldr	r3, [pc, #108]	; 14884 <__assert_fail@plt+0x3340>
   14814:	mov	r2, #79	; 0x4f
   14818:	ldr	r1, [pc, #104]	; 14888 <__assert_fail@plt+0x3344>
   1481c:	ldr	r0, [pc, #108]	; 14890 <__assert_fail@plt+0x334c>
   14820:	b	147e0 <__assert_fail@plt+0x329c>
   14824:	lsl	r2, r0, #1
   14828:	cmp	r0, r2
   1482c:	movls	r0, r2
   14830:	bls	147f8 <__assert_fail@plt+0x32b4>
   14834:	mov	r0, r6
   14838:	b	14800 <__assert_fail@plt+0x32bc>
   1483c:	str	r0, [r5]
   14840:	bl	17c4c <__assert_fail@plt+0x6708>
   14844:	mov	r4, r0
   14848:	cmp	r4, #0
   1484c:	b	1486c <__assert_fail@plt+0x3328>
   14850:	cmp	r3, r0
   14854:	beq	14848 <__assert_fail@plt+0x3304>
   14858:	mov	r1, r0
   1485c:	str	r0, [r5]
   14860:	mov	r0, r4
   14864:	bl	17cc8 <__assert_fail@plt+0x6784>
   14868:	subs	r4, r0, #0
   1486c:	bne	14878 <__assert_fail@plt+0x3334>
   14870:	mov	r0, #0
   14874:	pop	{r4, r5, r6, r7, r8, pc}
   14878:	mov	r0, r4
   1487c:	str	r8, [r7]
   14880:	pop	{r4, r5, r6, r7, r8, pc}
   14884:	andeq	r9, r1, r9, ror #27
   14888:	strdeq	r9, [r1], -r3
   1488c:	strdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   14890:	andeq	r9, r1, fp, lsl #28
   14894:	push	{r4, lr}
   14898:	mov	r4, r0
   1489c:	bl	147b0 <__assert_fail@plt+0x326c>
   148a0:	cmp	r0, #0
   148a4:	popne	{r4, pc}
   148a8:	mov	r0, r4
   148ac:	bl	17b64 <__assert_fail@plt+0x6620>
   148b0:	bl	174e0 <__assert_fail@plt+0x5f9c>
   148b4:	push	{r4, r5, r6, lr}
   148b8:	mov	r2, #0
   148bc:	mov	r5, r1
   148c0:	mov	r1, #1
   148c4:	mov	r4, r0
   148c8:	bl	17928 <__assert_fail@plt+0x63e4>
   148cc:	cmp	r0, #0
   148d0:	blt	14908 <__assert_fail@plt+0x33c4>
   148d4:	cmp	r5, #0
   148d8:	orrne	r2, r0, #1
   148dc:	biceq	r2, r0, #1
   148e0:	cmp	r2, r0
   148e4:	beq	14910 <__assert_fail@plt+0x33cc>
   148e8:	mov	r1, #2
   148ec:	mov	r0, r4
   148f0:	bl	17928 <__assert_fail@plt+0x63e4>
   148f4:	cmn	r0, #1
   148f8:	movne	r0, #0
   148fc:	moveq	r0, #1
   14900:	rsb	r0, r0, #0
   14904:	pop	{r4, r5, r6, pc}
   14908:	mvn	r0, #0
   1490c:	pop	{r4, r5, r6, pc}
   14910:	mov	r0, #0
   14914:	pop	{r4, r5, r6, pc}
   14918:	mov	r2, #0
   1491c:	movw	r1, #1030	; 0x406
   14920:	b	17928 <__assert_fail@plt+0x63e4>
   14924:	ldr	r3, [pc, #4]	; 14930 <__assert_fail@plt+0x33ec>
   14928:	str	r0, [r3]
   1492c:	bx	lr
   14930:	andeq	fp, r2, r0, lsr #5
   14934:	push	{r0, r1, r4, r5, r6, lr}
   14938:	ldr	r4, [pc, #228]	; 14a24 <__assert_fail@plt+0x34e0>
   1493c:	ldr	r5, [r4]
   14940:	mov	r0, r5
   14944:	bl	17b28 <__assert_fail@plt+0x65e4>
   14948:	cmp	r0, #0
   1494c:	bne	149cc <__assert_fail@plt+0x3488>
   14950:	mov	r5, #0
   14954:	ldr	r0, [r4]
   14958:	bl	17d38 <__assert_fail@plt+0x67f4>
   1495c:	cmp	r0, #0
   14960:	moveq	r0, r5
   14964:	movne	r0, #1
   14968:	cmp	r0, #0
   1496c:	beq	14a18 <__assert_fail@plt+0x34d4>
   14970:	mov	r2, #5
   14974:	ldr	r1, [pc, #172]	; 14a28 <__assert_fail@plt+0x34e4>
   14978:	mov	r0, #0
   1497c:	bl	11238 <dcgettext@plt>
   14980:	ldr	r3, [pc, #164]	; 14a2c <__assert_fail@plt+0x34e8>
   14984:	mov	r5, r0
   14988:	ldr	r4, [r3]
   1498c:	bl	113c4 <__errno_location@plt>
   14990:	cmp	r4, #0
   14994:	beq	14a00 <__assert_fail@plt+0x34bc>
   14998:	ldr	r6, [r0]
   1499c:	mov	r0, r4
   149a0:	bl	16b14 <__assert_fail@plt+0x55d0>
   149a4:	mov	r3, r0
   149a8:	ldr	r2, [pc, #128]	; 14a30 <__assert_fail@plt+0x34ec>
   149ac:	mov	r0, #0
   149b0:	str	r5, [sp]
   149b4:	mov	r1, r6
   149b8:	bl	112f8 <error@plt>
   149bc:	bl	14a5c <__assert_fail@plt+0x3518>
   149c0:	ldr	r3, [pc, #108]	; 14a34 <__assert_fail@plt+0x34f0>
   149c4:	ldr	r0, [r3]
   149c8:	bl	111f0 <_exit@plt>
   149cc:	mov	r3, #1
   149d0:	mov	r2, #0
   149d4:	mov	r0, r5
   149d8:	str	r3, [sp]
   149dc:	mov	r3, #0
   149e0:	bl	17bb4 <__assert_fail@plt+0x6670>
   149e4:	cmp	r0, #0
   149e8:	bne	14950 <__assert_fail@plt+0x340c>
   149ec:	ldr	r0, [r4]
   149f0:	bl	17ad8 <__assert_fail@plt+0x6594>
   149f4:	adds	r5, r0, #0
   149f8:	movne	r5, #1
   149fc:	b	14954 <__assert_fail@plt+0x3410>
   14a00:	mov	r3, r5
   14a04:	ldr	r2, [pc, #44]	; 14a38 <__assert_fail@plt+0x34f4>
   14a08:	ldr	r1, [r0]
   14a0c:	mov	r0, r4
   14a10:	bl	112f8 <error@plt>
   14a14:	b	149bc <__assert_fail@plt+0x3478>
   14a18:	add	sp, sp, #8
   14a1c:	pop	{r4, r5, r6, lr}
   14a20:	b	14a5c <__assert_fail@plt+0x3518>
   14a24:	ldrdeq	fp, [r2], -r0
   14a28:	andeq	r9, r1, ip, lsl lr
   14a2c:	andeq	fp, r2, r0, lsr #5
   14a30:	andeq	r9, r1, pc, lsr #28
   14a34:	andeq	fp, r2, ip, ror #2
   14a38:	andeq	r9, r1, ip, lsr #25
   14a3c:	ldr	r3, [pc, #4]	; 14a48 <__assert_fail@plt+0x3504>
   14a40:	str	r0, [r3]
   14a44:	bx	lr
   14a48:	andeq	fp, r2, r4, lsr #5
   14a4c:	ldr	r3, [pc, #4]	; 14a58 <__assert_fail@plt+0x3514>
   14a50:	strb	r0, [r3, #4]
   14a54:	bx	lr
   14a58:	andeq	fp, r2, r4, lsr #5
   14a5c:	ldr	r3, [pc, #176]	; 14b14 <__assert_fail@plt+0x35d0>
   14a60:	push	{r0, r1, r4, r5, r6, lr}
   14a64:	ldr	r0, [r3]
   14a68:	bl	17d38 <__assert_fail@plt+0x67f4>
   14a6c:	cmp	r0, #0
   14a70:	beq	14af8 <__assert_fail@plt+0x35b4>
   14a74:	ldr	r4, [pc, #156]	; 14b18 <__assert_fail@plt+0x35d4>
   14a78:	bl	113c4 <__errno_location@plt>
   14a7c:	mov	r5, r0
   14a80:	ldrb	r6, [r4, #4]
   14a84:	cmp	r6, #0
   14a88:	beq	14a98 <__assert_fail@plt+0x3554>
   14a8c:	ldr	r3, [r0]
   14a90:	cmp	r3, #32
   14a94:	beq	14af8 <__assert_fail@plt+0x35b4>
   14a98:	mov	r2, #5
   14a9c:	ldr	r1, [pc, #120]	; 14b1c <__assert_fail@plt+0x35d8>
   14aa0:	mov	r0, #0
   14aa4:	bl	11238 <dcgettext@plt>
   14aa8:	mov	r6, r0
   14aac:	ldr	r0, [r4]
   14ab0:	cmp	r0, #0
   14ab4:	beq	14ae4 <__assert_fail@plt+0x35a0>
   14ab8:	ldr	r4, [r5]
   14abc:	bl	16b14 <__assert_fail@plt+0x55d0>
   14ac0:	mov	r3, r0
   14ac4:	ldr	r2, [pc, #84]	; 14b20 <__assert_fail@plt+0x35dc>
   14ac8:	mov	r0, #0
   14acc:	str	r6, [sp]
   14ad0:	mov	r1, r4
   14ad4:	bl	112f8 <error@plt>
   14ad8:	ldr	r3, [pc, #68]	; 14b24 <__assert_fail@plt+0x35e0>
   14adc:	ldr	r0, [r3]
   14ae0:	bl	111f0 <_exit@plt>
   14ae4:	mov	r3, r6
   14ae8:	ldr	r2, [pc, #56]	; 14b28 <__assert_fail@plt+0x35e4>
   14aec:	ldr	r1, [r5]
   14af0:	bl	112f8 <error@plt>
   14af4:	b	14ad8 <__assert_fail@plt+0x3594>
   14af8:	ldr	r3, [pc, #44]	; 14b2c <__assert_fail@plt+0x35e8>
   14afc:	ldr	r0, [r3]
   14b00:	bl	17d38 <__assert_fail@plt+0x67f4>
   14b04:	cmp	r0, #0
   14b08:	bne	14ad8 <__assert_fail@plt+0x3594>
   14b0c:	add	sp, sp, #8
   14b10:	pop	{r4, r5, r6, pc}
   14b14:	ldrdeq	fp, [r2], -r4
   14b18:	andeq	fp, r2, r4, lsr #5
   14b1c:	andeq	r9, r1, r6, lsr lr
   14b20:	andeq	r9, r1, pc, lsr #28
   14b24:	andeq	fp, r2, ip, ror #2
   14b28:	andeq	r9, r1, ip, lsr #25
   14b2c:	andeq	fp, r2, r8, asr #3
   14b30:	push	{r4, r5, r6, r7, r8, lr}
   14b34:	bl	11304 <opendir@plt>
   14b38:	subs	r4, r0, #0
   14b3c:	beq	14ba0 <__assert_fail@plt+0x365c>
   14b40:	bl	114cc <dirfd@plt>
   14b44:	cmp	r0, #2
   14b48:	bhi	14ba0 <__assert_fail@plt+0x365c>
   14b4c:	mov	r2, #3
   14b50:	movw	r1, #1030	; 0x406
   14b54:	bl	17928 <__assert_fail@plt+0x63e4>
   14b58:	mov	r6, r0
   14b5c:	bl	113c4 <__errno_location@plt>
   14b60:	cmp	r6, #0
   14b64:	mov	r5, r0
   14b68:	movlt	r7, #0
   14b6c:	ldrlt	r8, [r0]
   14b70:	blt	14b90 <__assert_fail@plt+0x364c>
   14b74:	mov	r0, r6
   14b78:	bl	114b4 <fdopendir@plt>
   14b7c:	subs	r7, r0, #0
   14b80:	ldr	r8, [r5]
   14b84:	bne	14b90 <__assert_fail@plt+0x364c>
   14b88:	mov	r0, r6
   14b8c:	bl	1152c <close@plt>
   14b90:	mov	r0, r4
   14b94:	mov	r4, r7
   14b98:	bl	11538 <closedir@plt>
   14b9c:	str	r8, [r5]
   14ba0:	mov	r0, r4
   14ba4:	pop	{r4, r5, r6, r7, r8, pc}
   14ba8:	push	{r1, r2, r3}
   14bac:	push	{r0, r1, lr}
   14bb0:	ldr	r1, [sp, #12]
   14bb4:	ands	r2, r1, #64	; 0x40
   14bb8:	ldrne	r2, [sp, #16]
   14bbc:	addne	r3, sp, #16
   14bc0:	strne	r3, [sp, #4]
   14bc4:	bl	11310 <open64@plt>
   14bc8:	bl	16d08 <__assert_fail@plt+0x57c4>
   14bcc:	add	sp, sp, #8
   14bd0:	pop	{lr}		; (ldr lr, [sp], #4)
   14bd4:	add	sp, sp, #12
   14bd8:	bx	lr
   14bdc:	push	{r4, r5, r6, r7, fp, lr}
   14be0:	mov	r7, r3
   14be4:	lsrs	r3, r2, #30
   14be8:	mov	r4, r0
   14bec:	movne	r3, #1
   14bf0:	moveq	r3, #0
   14bf4:	lsls	r0, r2, #2
   14bf8:	add	fp, sp, #20
   14bfc:	bmi	14c08 <__assert_fail@plt+0x36c4>
   14c00:	cmp	r3, #0
   14c04:	beq	14c14 <__assert_fail@plt+0x36d0>
   14c08:	mov	r0, #0
   14c0c:	sub	sp, fp, #20
   14c10:	pop	{r4, r5, r6, r7, fp, pc}
   14c14:	cmp	r0, #4016	; 0xfb0
   14c18:	mov	r5, r1
   14c1c:	mov	r6, r2
   14c20:	bhi	14ca0 <__assert_fail@plt+0x375c>
   14c24:	add	r0, r0, #22
   14c28:	bic	r0, r0, #7
   14c2c:	sub	sp, sp, r0
   14c30:	add	r0, sp, #15
   14c34:	bic	r0, r0, #15
   14c38:	cmp	r0, #0
   14c3c:	beq	14c08 <__assert_fail@plt+0x36c4>
   14c40:	mov	r3, #1
   14c44:	mov	ip, #0
   14c48:	mov	lr, #2
   14c4c:	str	r3, [r0, #4]
   14c50:	mov	r3, r5
   14c54:	cmp	lr, r6
   14c58:	bcc	14ca8 <__assert_fail@plt+0x3764>
   14c5c:	mov	ip, #0
   14c60:	mov	r3, r4
   14c64:	str	ip, [r7]
   14c68:	ldrb	r2, [r3]
   14c6c:	cmp	r2, #0
   14c70:	beq	14c94 <__assert_fail@plt+0x3750>
   14c74:	ldrb	r1, [r5, ip]
   14c78:	cmp	r1, r2
   14c7c:	bne	14ce4 <__assert_fail@plt+0x37a0>
   14c80:	add	ip, ip, #1
   14c84:	add	r3, r3, #1
   14c88:	cmp	r6, ip
   14c8c:	bne	14c68 <__assert_fail@plt+0x3724>
   14c90:	str	r4, [r7]
   14c94:	bl	17ea8 <__assert_fail@plt+0x6964>
   14c98:	mov	r0, #1
   14c9c:	b	14c0c <__assert_fail@plt+0x36c8>
   14ca0:	bl	17e60 <__assert_fail@plt+0x691c>
   14ca4:	b	14c38 <__assert_fail@plt+0x36f4>
   14ca8:	ldrb	r1, [r3, #1]!
   14cac:	ldrb	r2, [r5, ip]
   14cb0:	cmp	r2, r1
   14cb4:	bne	14ccc <__assert_fail@plt+0x3788>
   14cb8:	add	ip, ip, #1
   14cbc:	sub	r2, lr, ip
   14cc0:	str	r2, [r0, lr, lsl #2]
   14cc4:	add	lr, lr, #1
   14cc8:	b	14c54 <__assert_fail@plt+0x3710>
   14ccc:	cmp	ip, #0
   14cd0:	streq	lr, [r0, lr, lsl #2]
   14cd4:	beq	14cc4 <__assert_fail@plt+0x3780>
   14cd8:	ldr	r2, [r0, ip, lsl #2]
   14cdc:	sub	ip, ip, r2
   14ce0:	b	14cac <__assert_fail@plt+0x3768>
   14ce4:	cmp	ip, #0
   14ce8:	ldrne	r2, [r0, ip, lsl #2]
   14cec:	addeq	r4, r4, #1
   14cf0:	addeq	r3, r3, #1
   14cf4:	addne	r4, r4, r2
   14cf8:	subne	ip, ip, r2
   14cfc:	b	14c68 <__assert_fail@plt+0x3724>
   14d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d04:	add	fp, sp, #32
   14d08:	sub	sp, sp, #132	; 0x84
   14d0c:	mov	r5, r1
   14d10:	str	r2, [fp, #-160]	; 0xffffff60
   14d14:	str	r0, [fp, #-156]	; 0xffffff64
   14d18:	mov	r0, r1
   14d1c:	bl	17f68 <__assert_fail@plt+0x6a24>
   14d20:	mov	r9, r0
   14d24:	mov	r0, #44	; 0x2c
   14d28:	umull	r6, r7, r9, r0
   14d2c:	adds	r3, r7, #0
   14d30:	movne	r3, #1
   14d34:	cmp	r6, #0
   14d38:	blt	14d44 <__assert_fail@plt+0x3800>
   14d3c:	cmp	r3, #0
   14d40:	beq	14d58 <__assert_fail@plt+0x3814>
   14d44:	mov	r3, #0
   14d48:	str	r3, [fp, #-152]	; 0xffffff68
   14d4c:	ldr	r0, [fp, #-152]	; 0xffffff68
   14d50:	sub	sp, fp, #32
   14d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d58:	mul	r0, r0, r9
   14d5c:	cmp	r0, #4016	; 0xfb0
   14d60:	bhi	14ea8 <__assert_fail@plt+0x3964>
   14d64:	add	r0, r0, #22
   14d68:	bic	r0, r0, #7
   14d6c:	sub	sp, sp, r0
   14d70:	add	r4, sp, #15
   14d74:	bic	r4, r4, #15
   14d78:	cmp	r4, #0
   14d7c:	beq	14d44 <__assert_fail@plt+0x3800>
   14d80:	mov	r7, #40	; 0x28
   14d84:	mov	r6, #0
   14d88:	mov	r2, #0
   14d8c:	mov	r3, #0
   14d90:	mla	r7, r7, r9, r4
   14d94:	mov	sl, r4
   14d98:	mov	r8, r4
   14d9c:	strb	r6, [fp, #-92]	; 0xffffffa4
   14da0:	strd	r2, [fp, #-88]	; 0xffffffa8
   14da4:	strb	r6, [fp, #-80]	; 0xffffffb0
   14da8:	str	r5, [fp, #-76]	; 0xffffffb4
   14dac:	sub	r0, fp, #92	; 0x5c
   14db0:	bl	154b4 <__assert_fail@plt+0x3f70>
   14db4:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   14db8:	cmp	r3, #0
   14dbc:	str	r3, [fp, #-152]	; 0xffffff68
   14dc0:	beq	14eb4 <__assert_fail@plt+0x3970>
   14dc4:	ldr	r5, [fp, #-64]	; 0xffffffc0
   14dc8:	cmp	r5, #0
   14dcc:	bne	14eb4 <__assert_fail@plt+0x3970>
   14dd0:	mov	r2, #1
   14dd4:	mov	r6, r5
   14dd8:	mov	r8, #2
   14ddc:	str	r2, [r7, #4]
   14de0:	cmp	r8, r9
   14de4:	bcc	14edc <__assert_fail@plt+0x3998>
   14de8:	ldr	r3, [fp, #-160]	; 0xffffff60
   14dec:	mov	r6, #0
   14df0:	mov	r2, #0
   14df4:	mov	r8, #40	; 0x28
   14df8:	ldr	r1, [fp, #-156]	; 0xffffff64
   14dfc:	strb	r6, [fp, #-148]	; 0xffffff6c
   14e00:	strb	r6, [fp, #-136]	; 0xffffff78
   14e04:	str	r6, [r3]
   14e08:	ldr	r3, [fp, #-156]	; 0xffffff64
   14e0c:	str	r3, [fp, #-132]	; 0xffffff7c
   14e10:	mov	r3, #0
   14e14:	strb	r6, [fp, #-92]	; 0xffffffa4
   14e18:	strd	r2, [fp, #-144]	; 0xffffff70
   14e1c:	strd	r2, [fp, #-88]	; 0xffffffa8
   14e20:	strb	r6, [fp, #-80]	; 0xffffffb0
   14e24:	str	r1, [fp, #-76]	; 0xffffffb4
   14e28:	sub	r0, fp, #92	; 0x5c
   14e2c:	bl	154b4 <__assert_fail@plt+0x3f70>
   14e30:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   14e34:	cmp	r0, #0
   14e38:	beq	14e48 <__assert_fail@plt+0x3904>
   14e3c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14e40:	cmp	r3, #0
   14e44:	beq	14e9c <__assert_fail@plt+0x3958>
   14e48:	mla	r3, r8, r5, r4
   14e4c:	ldrb	r2, [r3, #8]
   14e50:	ands	r0, r0, r2
   14e54:	beq	14f7c <__assert_fail@plt+0x3a38>
   14e58:	ldr	r0, [r3, #12]
   14e5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14e60:	sub	r0, r0, r3
   14e64:	clz	r0, r0
   14e68:	lsr	r0, r0, #5
   14e6c:	cmp	r0, #0
   14e70:	beq	14fa4 <__assert_fail@plt+0x3a60>
   14e74:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   14e78:	add	r5, r5, #1
   14e7c:	cmp	r9, r5
   14e80:	strb	r6, [fp, #-80]	; 0xffffffb0
   14e84:	add	r3, r3, r2
   14e88:	str	r3, [fp, #-76]	; 0xffffffb4
   14e8c:	bne	14e28 <__assert_fail@plt+0x38e4>
   14e90:	ldr	r2, [fp, #-160]	; 0xffffff60
   14e94:	ldr	r3, [fp, #-132]	; 0xffffff7c
   14e98:	str	r3, [r2]
   14e9c:	mov	r0, r4
   14ea0:	bl	17ea8 <__assert_fail@plt+0x6964>
   14ea4:	b	14d4c <__assert_fail@plt+0x3808>
   14ea8:	bl	17e60 <__assert_fail@plt+0x691c>
   14eac:	mov	r4, r0
   14eb0:	b	14d78 <__assert_fail@plt+0x3834>
   14eb4:	sub	r1, fp, #76	; 0x4c
   14eb8:	mov	r0, r8
   14ebc:	bl	17ef4 <__assert_fail@plt+0x69b0>
   14ec0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ec4:	add	r8, r8, #40	; 0x28
   14ec8:	strb	r6, [fp, #-80]	; 0xffffffb0
   14ecc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14ed0:	add	r2, r2, r1
   14ed4:	str	r2, [fp, #-76]	; 0xffffffb4
   14ed8:	b	14dac <__assert_fail@plt+0x3868>
   14edc:	ldrb	r3, [sl, #48]	; 0x30
   14ee0:	str	r3, [fp, #-164]	; 0xffffff5c
   14ee4:	mov	r3, #40	; 0x28
   14ee8:	mla	r1, r3, r6, r4
   14eec:	ldr	r3, [fp, #-164]	; 0xffffff5c
   14ef0:	cmp	r3, #0
   14ef4:	beq	14f38 <__assert_fail@plt+0x39f4>
   14ef8:	ldrb	r2, [r1, #8]
   14efc:	cmp	r2, #0
   14f00:	beq	14f38 <__assert_fail@plt+0x39f4>
   14f04:	ldr	r2, [r1, #12]
   14f08:	ldr	r0, [sl, #52]	; 0x34
   14f0c:	sub	r0, r0, r2
   14f10:	clz	r0, r0
   14f14:	lsr	r0, r0, #5
   14f18:	cmp	r0, #0
   14f1c:	beq	14f64 <__assert_fail@plt+0x3a20>
   14f20:	add	r6, r6, #1
   14f24:	sub	r2, r8, r6
   14f28:	str	r2, [r7, r8, lsl #2]
   14f2c:	add	r8, r8, #1
   14f30:	add	sl, sl, #40	; 0x28
   14f34:	b	14de0 <__assert_fail@plt+0x389c>
   14f38:	ldr	r0, [r1, #4]
   14f3c:	ldr	r2, [sl, #44]	; 0x2c
   14f40:	cmp	r2, r0
   14f44:	movne	r0, #0
   14f48:	bne	14f18 <__assert_fail@plt+0x39d4>
   14f4c:	ldr	r1, [r1]
   14f50:	ldr	r0, [sl, #40]	; 0x28
   14f54:	bl	1122c <memcmp@plt>
   14f58:	clz	r0, r0
   14f5c:	lsr	r0, r0, #5
   14f60:	b	14f18 <__assert_fail@plt+0x39d4>
   14f64:	cmp	r6, #0
   14f68:	streq	r8, [r7, r8, lsl #2]
   14f6c:	beq	14f2c <__assert_fail@plt+0x39e8>
   14f70:	ldr	r2, [r7, r6, lsl #2]
   14f74:	sub	r6, r6, r2
   14f78:	b	14ee4 <__assert_fail@plt+0x39a0>
   14f7c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14f80:	ldr	r2, [r3, #4]
   14f84:	cmp	r2, r1
   14f88:	bne	14e6c <__assert_fail@plt+0x3928>
   14f8c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14f90:	ldr	r0, [r3]
   14f94:	bl	1122c <memcmp@plt>
   14f98:	clz	r0, r0
   14f9c:	lsr	r0, r0, #5
   14fa0:	b	14e6c <__assert_fail@plt+0x3928>
   14fa4:	cmp	r5, #0
   14fa8:	ldrne	r3, [r7, r5, lsl #2]
   14fac:	subne	r5, r5, r3
   14fb0:	bne	15014 <__assert_fail@plt+0x3ad0>
   14fb4:	sub	r0, fp, #148	; 0x94
   14fb8:	bl	154b4 <__assert_fail@plt+0x3f70>
   14fbc:	ldrb	r3, [fp, #-124]	; 0xffffff84
   14fc0:	cmp	r3, #0
   14fc4:	beq	14fd4 <__assert_fail@plt+0x3a90>
   14fc8:	ldr	r3, [fp, #-120]	; 0xffffff88
   14fcc:	cmp	r3, #0
   14fd0:	beq	15044 <__assert_fail@plt+0x3b00>
   14fd4:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   14fd8:	strb	r6, [fp, #-136]	; 0xffffff78
   14fdc:	strb	r6, [fp, #-80]	; 0xffffffb0
   14fe0:	add	r3, r3, r2
   14fe4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14fe8:	str	r3, [fp, #-132]	; 0xffffff7c
   14fec:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14ff0:	add	r3, r3, r2
   14ff4:	str	r3, [fp, #-76]	; 0xffffffb4
   14ff8:	b	14e28 <__assert_fail@plt+0x38e4>
   14ffc:	ldr	r2, [fp, #-132]	; 0xffffff7c
   15000:	sub	r3, r3, #1
   15004:	strb	r6, [fp, #-136]	; 0xffffff78
   15008:	ldr	r1, [fp, #-128]	; 0xffffff80
   1500c:	add	r2, r2, r1
   15010:	str	r2, [fp, #-132]	; 0xffffff7c
   15014:	cmp	r3, #0
   15018:	beq	14e28 <__assert_fail@plt+0x38e4>
   1501c:	sub	r0, fp, #148	; 0x94
   15020:	str	r3, [fp, #-156]	; 0xffffff64
   15024:	bl	154b4 <__assert_fail@plt+0x3f70>
   15028:	ldrb	r2, [fp, #-124]	; 0xffffff84
   1502c:	ldr	r3, [fp, #-156]	; 0xffffff64
   15030:	cmp	r2, #0
   15034:	beq	14ffc <__assert_fail@plt+0x3ab8>
   15038:	ldr	r2, [fp, #-120]	; 0xffffff88
   1503c:	cmp	r2, #0
   15040:	bne	14ffc <__assert_fail@plt+0x3ab8>
   15044:	bl	11514 <abort@plt>
   15048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1504c:	sub	sp, sp, #300	; 0x12c
   15050:	mov	r4, r0
   15054:	mov	r5, r1
   15058:	bl	112c8 <__ctype_get_mb_cur_max@plt>
   1505c:	cmp	r0, #1
   15060:	bls	1539c <__assert_fail@plt+0x3e58>
   15064:	mov	r0, #0
   15068:	mov	r1, #0
   1506c:	mov	r3, #0
   15070:	str	r5, [sp, #32]
   15074:	strd	r0, [sp, #20]
   15078:	add	r0, sp, #16
   1507c:	strb	r3, [sp, #16]
   15080:	strb	r3, [sp, #28]
   15084:	bl	154b4 <__assert_fail@plt+0x3f70>
   15088:	ldrb	r3, [sp, #40]	; 0x28
   1508c:	cmp	r3, #0
   15090:	beq	150a0 <__assert_fail@plt+0x3b5c>
   15094:	ldr	r3, [sp, #44]	; 0x2c
   15098:	cmp	r3, #0
   1509c:	beq	152d4 <__assert_fail@plt+0x3d90>
   150a0:	mov	r6, #0
   150a4:	mov	r3, #1
   150a8:	mov	fp, r6
   150ac:	mov	r7, r6
   150b0:	mov	sl, r6
   150b4:	mov	r8, r6
   150b8:	str	r6, [sp, #4]
   150bc:	strb	r6, [sp, #72]	; 0x48
   150c0:	str	r6, [sp, #76]	; 0x4c
   150c4:	str	r6, [sp, #80]	; 0x50
   150c8:	strb	r6, [sp, #84]	; 0x54
   150cc:	str	r5, [sp, #88]	; 0x58
   150d0:	strb	r6, [sp, #128]	; 0x80
   150d4:	str	r6, [sp, #132]	; 0x84
   150d8:	str	r6, [sp, #136]	; 0x88
   150dc:	strb	r6, [sp, #140]	; 0x8c
   150e0:	str	r4, [sp, #144]	; 0x90
   150e4:	add	r0, sp, #128	; 0x80
   150e8:	str	r3, [sp, #8]
   150ec:	bl	154b4 <__assert_fail@plt+0x3f70>
   150f0:	ldrb	r2, [sp, #152]	; 0x98
   150f4:	ldr	r3, [sp, #8]
   150f8:	cmp	r2, #0
   150fc:	beq	1510c <__assert_fail@plt+0x3bc8>
   15100:	ldr	r2, [sp, #156]	; 0x9c
   15104:	cmp	r2, #0
   15108:	beq	153dc <__assert_fail@plt+0x3e98>
   1510c:	cmp	sl, #9
   15110:	movls	r9, #0
   15114:	andhi	r9, r3, #1
   15118:	cmp	r9, #0
   1511c:	beq	15268 <__assert_fail@plt+0x3d24>
   15120:	add	r3, sl, sl, lsl #2
   15124:	cmp	r7, r3
   15128:	subcs	r6, r7, r6
   1512c:	bcs	15214 <__assert_fail@plt+0x3cd0>
   15130:	ldrb	r3, [sp, #152]	; 0x98
   15134:	add	sl, sl, #1
   15138:	add	r7, r7, #1
   1513c:	cmp	r3, #0
   15140:	beq	15270 <__assert_fail@plt+0x3d2c>
   15144:	ldrb	r3, [sp, #40]	; 0x28
   15148:	cmp	r3, #0
   1514c:	beq	15270 <__assert_fail@plt+0x3d2c>
   15150:	ldr	r3, [sp, #44]	; 0x2c
   15154:	ldr	r0, [sp, #156]	; 0x9c
   15158:	sub	r0, r0, r3
   1515c:	clz	r0, r0
   15160:	lsr	r0, r0, #5
   15164:	cmp	r0, #0
   15168:	beq	15384 <__assert_fail@plt+0x3e40>
   1516c:	add	ip, sp, #128	; 0x80
   15170:	add	lr, sp, #184	; 0xb8
   15174:	str	r5, [sp, #256]	; 0x100
   15178:	ldm	ip!, {r0, r1, r2, r3}
   1517c:	stmia	lr!, {r0, r1, r2, r3}
   15180:	ldm	ip!, {r0, r1, r2, r3}
   15184:	strb	r8, [sp, #196]	; 0xc4
   15188:	stmia	lr!, {r0, r1, r2, r3}
   1518c:	ldm	ip!, {r0, r1, r2, r3}
   15190:	stmia	lr!, {r0, r1, r2, r3}
   15194:	ldrd	r2, [sp, #200]	; 0xc8
   15198:	ldm	ip, {r0, r1}
   1519c:	add	r3, r3, r2
   151a0:	stm	lr, {r0, r1}
   151a4:	add	r0, sp, #240	; 0xf0
   151a8:	str	r3, [sp, #200]	; 0xc8
   151ac:	strb	r8, [sp, #252]	; 0xfc
   151b0:	ldr	r3, [sp, #4]
   151b4:	strb	r8, [sp, #240]	; 0xf0
   151b8:	str	r3, [sp, #244]	; 0xf4
   151bc:	str	fp, [sp, #248]	; 0xf8
   151c0:	bl	154b4 <__assert_fail@plt+0x3f70>
   151c4:	ldrb	r3, [sp, #264]	; 0x108
   151c8:	cmp	r3, #0
   151cc:	beq	1529c <__assert_fail@plt+0x3d58>
   151d0:	ldr	r3, [sp, #268]	; 0x10c
   151d4:	cmp	r3, #0
   151d8:	bne	1529c <__assert_fail@plt+0x3d58>
   151dc:	bl	11514 <abort@plt>
   151e0:	add	r0, sp, #72	; 0x48
   151e4:	bl	154b4 <__assert_fail@plt+0x3f70>
   151e8:	ldrb	r3, [sp, #96]	; 0x60
   151ec:	cmp	r3, #0
   151f0:	beq	15200 <__assert_fail@plt+0x3cbc>
   151f4:	ldr	r3, [sp, #100]	; 0x64
   151f8:	cmp	r3, #0
   151fc:	beq	1521c <__assert_fail@plt+0x3cd8>
   15200:	ldrd	r2, [sp, #88]	; 0x58
   15204:	sub	r6, r6, #1
   15208:	strb	r8, [sp, #84]	; 0x54
   1520c:	add	r3, r3, r2
   15210:	str	r3, [sp, #88]	; 0x58
   15214:	cmp	r6, #0
   15218:	bne	151e0 <__assert_fail@plt+0x3c9c>
   1521c:	add	r0, sp, #72	; 0x48
   15220:	bl	154b4 <__assert_fail@plt+0x3f70>
   15224:	ldrb	r3, [sp, #96]	; 0x60
   15228:	cmp	r3, #0
   1522c:	bne	15238 <__assert_fail@plt+0x3cf4>
   15230:	mov	r6, r7
   15234:	b	15130 <__assert_fail@plt+0x3bec>
   15238:	ldr	r2, [sp, #100]	; 0x64
   1523c:	cmp	r2, #0
   15240:	movne	r6, r7
   15244:	bne	15268 <__assert_fail@plt+0x3d24>
   15248:	add	r2, sp, #240	; 0xf0
   1524c:	mov	r1, r5
   15250:	mov	r0, r4
   15254:	bl	14d00 <__assert_fail@plt+0x37bc>
   15258:	subs	r9, r0, #0
   1525c:	beq	15230 <__assert_fail@plt+0x3cec>
   15260:	ldr	r4, [sp, #240]	; 0xf0
   15264:	b	152d4 <__assert_fail@plt+0x3d90>
   15268:	mov	r9, r3
   1526c:	b	15130 <__assert_fail@plt+0x3bec>
   15270:	ldr	r3, [sp, #36]	; 0x24
   15274:	ldr	r2, [sp, #148]	; 0x94
   15278:	cmp	r2, r3
   1527c:	movne	r0, #0
   15280:	bne	15164 <__assert_fail@plt+0x3c20>
   15284:	ldr	r1, [sp, #32]
   15288:	ldr	r0, [sp, #144]	; 0x90
   1528c:	bl	1122c <memcmp@plt>
   15290:	clz	r0, r0
   15294:	lsr	r0, r0, #5
   15298:	b	15164 <__assert_fail@plt+0x3c20>
   1529c:	ldr	r3, [sp, #256]	; 0x100
   152a0:	strb	r8, [sp, #252]	; 0xfc
   152a4:	ldr	r2, [sp, #260]	; 0x104
   152a8:	add	r3, r3, r2
   152ac:	str	r3, [sp, #256]	; 0x100
   152b0:	add	r0, sp, #240	; 0xf0
   152b4:	bl	154b4 <__assert_fail@plt+0x3f70>
   152b8:	ldrb	r3, [sp, #264]	; 0x108
   152bc:	cmp	r3, #0
   152c0:	beq	152e0 <__assert_fail@plt+0x3d9c>
   152c4:	ldr	r3, [sp, #268]	; 0x10c
   152c8:	cmp	r3, #0
   152cc:	bne	152e0 <__assert_fail@plt+0x3d9c>
   152d0:	ldr	r4, [sp, #144]	; 0x90
   152d4:	mov	r0, r4
   152d8:	add	sp, sp, #300	; 0x12c
   152dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152e0:	add	r0, sp, #184	; 0xb8
   152e4:	bl	154b4 <__assert_fail@plt+0x3f70>
   152e8:	ldrb	r2, [sp, #208]	; 0xd0
   152ec:	cmp	r2, #0
   152f0:	beq	15300 <__assert_fail@plt+0x3dbc>
   152f4:	ldr	r3, [sp, #212]	; 0xd4
   152f8:	cmp	r3, #0
   152fc:	beq	153dc <__assert_fail@plt+0x3e98>
   15300:	cmp	r2, #0
   15304:	add	r7, r7, #1
   15308:	beq	15358 <__assert_fail@plt+0x3e14>
   1530c:	ldrb	r3, [sp, #264]	; 0x108
   15310:	cmp	r3, #0
   15314:	beq	15358 <__assert_fail@plt+0x3e14>
   15318:	ldr	r3, [sp, #212]	; 0xd4
   1531c:	ldr	r0, [sp, #268]	; 0x10c
   15320:	subs	r0, r3, r0
   15324:	movne	r0, #1
   15328:	cmp	r0, #0
   1532c:	bne	15384 <__assert_fail@plt+0x3e40>
   15330:	ldrd	r2, [sp, #200]	; 0xc8
   15334:	strb	r0, [sp, #196]	; 0xc4
   15338:	strb	r0, [sp, #252]	; 0xfc
   1533c:	add	r3, r3, r2
   15340:	ldr	r2, [sp, #260]	; 0x104
   15344:	str	r3, [sp, #200]	; 0xc8
   15348:	ldr	r3, [sp, #256]	; 0x100
   1534c:	add	r3, r3, r2
   15350:	str	r3, [sp, #256]	; 0x100
   15354:	b	152b0 <__assert_fail@plt+0x3d6c>
   15358:	ldr	r2, [sp, #204]	; 0xcc
   1535c:	ldr	r3, [sp, #260]	; 0x104
   15360:	cmp	r2, r3
   15364:	movne	r0, #1
   15368:	bne	15328 <__assert_fail@plt+0x3de4>
   1536c:	ldr	r0, [sp, #200]	; 0xc8
   15370:	ldr	r1, [sp, #256]	; 0x100
   15374:	bl	1122c <memcmp@plt>
   15378:	adds	r0, r0, #0
   1537c:	movne	r0, #1
   15380:	b	15328 <__assert_fail@plt+0x3de4>
   15384:	ldrd	r2, [sp, #144]	; 0x90
   15388:	strb	r8, [sp, #140]	; 0x8c
   1538c:	add	r3, r3, r2
   15390:	str	r3, [sp, #144]	; 0x90
   15394:	mov	r3, r9
   15398:	b	150e4 <__assert_fail@plt+0x3ba0>
   1539c:	ldrb	fp, [r5]
   153a0:	cmp	fp, #0
   153a4:	beq	152d4 <__assert_fail@plt+0x3d90>
   153a8:	mov	r9, #0
   153ac:	add	r3, r5, #1
   153b0:	mov	r7, r4
   153b4:	mov	r2, r5
   153b8:	mov	r6, r9
   153bc:	mov	r8, r9
   153c0:	str	r3, [sp, #4]
   153c4:	mov	r1, #1
   153c8:	mov	sl, r7
   153cc:	mov	r4, r7
   153d0:	ldrb	r3, [sl], #1
   153d4:	cmp	r3, #0
   153d8:	bne	153e4 <__assert_fail@plt+0x3ea0>
   153dc:	mov	r4, #0
   153e0:	b	152d4 <__assert_fail@plt+0x3d90>
   153e4:	cmp	r8, #9
   153e8:	movls	r3, #0
   153ec:	andhi	r3, r1, #1
   153f0:	cmp	r3, #0
   153f4:	beq	154ac <__assert_fail@plt+0x3f68>
   153f8:	add	r1, r8, r8, lsl #2
   153fc:	cmp	r6, r1
   15400:	bcc	1545c <__assert_fail@plt+0x3f18>
   15404:	cmp	r2, #0
   15408:	str	r3, [sp, #12]
   1540c:	beq	15434 <__assert_fail@plt+0x3ef0>
   15410:	sub	r1, r6, r9
   15414:	mov	r0, r2
   15418:	str	r2, [sp, #8]
   1541c:	bl	11430 <strnlen@plt>
   15420:	ldrd	r2, [sp, #8]
   15424:	mov	r9, r6
   15428:	ldrb	r1, [r2, r0]!
   1542c:	cmp	r1, #0
   15430:	bne	1545c <__assert_fail@plt+0x3f18>
   15434:	mov	r0, r5
   15438:	bl	11394 <strlen@plt>
   1543c:	mov	r2, r0
   15440:	add	r3, sp, #240	; 0xf0
   15444:	mov	r1, r5
   15448:	mov	r0, r7
   1544c:	bl	14bdc <__assert_fail@plt+0x3698>
   15450:	subs	r3, r0, #0
   15454:	bne	15260 <__assert_fail@plt+0x3d1c>
   15458:	mov	r2, r3
   1545c:	ldrb	r1, [sl, #-1]
   15460:	add	r8, r8, #1
   15464:	add	r0, r6, #1
   15468:	cmp	r1, fp
   1546c:	bne	1549c <__assert_fail@plt+0x3f58>
   15470:	ldr	r1, [sp, #4]
   15474:	sub	r6, r6, r5
   15478:	ldrb	lr, [r1], #1
   1547c:	cmp	lr, #0
   15480:	beq	152d4 <__assert_fail@plt+0x3d90>
   15484:	ldrb	ip, [r7, #1]!
   15488:	cmp	ip, #0
   1548c:	beq	153dc <__assert_fail@plt+0x3e98>
   15490:	cmp	lr, ip
   15494:	add	r0, r6, r1
   15498:	beq	15478 <__assert_fail@plt+0x3f34>
   1549c:	mov	r7, sl
   154a0:	mov	r6, r0
   154a4:	mov	r1, r3
   154a8:	b	153c8 <__assert_fail@plt+0x3e84>
   154ac:	mov	r3, r1
   154b0:	b	1545c <__assert_fail@plt+0x3f18>
   154b4:	ldrb	r3, [r0, #12]
   154b8:	cmp	r3, #0
   154bc:	bxne	lr
   154c0:	push	{r4, r5, r6, lr}
   154c4:	mov	r4, r0
   154c8:	ldrb	r3, [r0]
   154cc:	ldr	r5, [r0, #16]
   154d0:	cmp	r3, #0
   154d4:	bne	15534 <__assert_fail@plt+0x3ff0>
   154d8:	ldrb	r0, [r5]
   154dc:	bl	17f48 <__assert_fail@plt+0x6a04>
   154e0:	cmp	r0, #0
   154e4:	beq	15508 <__assert_fail@plt+0x3fc4>
   154e8:	mov	r3, #1
   154ec:	str	r3, [r4, #20]
   154f0:	ldrb	r2, [r5]
   154f4:	str	r2, [r4, #28]
   154f8:	strb	r3, [r4, #24]
   154fc:	mov	r3, #1
   15500:	strb	r3, [r4, #12]
   15504:	pop	{r4, r5, r6, pc}
   15508:	add	r0, r4, #4
   1550c:	bl	11214 <mbsinit@plt>
   15510:	cmp	r0, #0
   15514:	movne	r3, #1
   15518:	strbne	r3, [r4]
   1551c:	bne	15534 <__assert_fail@plt+0x3ff0>
   15520:	ldr	r3, [pc, #220]	; 15604 <__assert_fail@plt+0x40c0>
   15524:	mov	r2, #143	; 0x8f
   15528:	ldr	r1, [pc, #216]	; 15608 <__assert_fail@plt+0x40c4>
   1552c:	ldr	r0, [pc, #216]	; 1560c <__assert_fail@plt+0x40c8>
   15530:	bl	11544 <__assert_fail@plt>
   15534:	bl	112c8 <__ctype_get_mb_cur_max@plt>
   15538:	mov	r1, r0
   1553c:	mov	r0, r5
   15540:	bl	16cdc <__assert_fail@plt+0x5798>
   15544:	add	r6, r4, #4
   15548:	mov	r2, r0
   1554c:	mov	r3, r6
   15550:	mov	r1, r5
   15554:	add	r0, r4, #28
   15558:	bl	17c78 <__assert_fail@plt+0x6734>
   1555c:	cmn	r0, #1
   15560:	str	r0, [r4, #20]
   15564:	bne	15578 <__assert_fail@plt+0x4034>
   15568:	mov	r3, #1
   1556c:	str	r3, [r4, #20]
   15570:	mov	r3, #0
   15574:	b	154f8 <__assert_fail@plt+0x3fb4>
   15578:	cmn	r0, #2
   1557c:	bne	15590 <__assert_fail@plt+0x404c>
   15580:	ldr	r0, [r4, #16]
   15584:	bl	11394 <strlen@plt>
   15588:	str	r0, [r4, #20]
   1558c:	b	15570 <__assert_fail@plt+0x402c>
   15590:	cmp	r0, #0
   15594:	bne	155e4 <__assert_fail@plt+0x40a0>
   15598:	mov	r3, #1
   1559c:	str	r3, [r4, #20]
   155a0:	ldr	r3, [r4, #16]
   155a4:	ldrb	r3, [r3]
   155a8:	cmp	r3, #0
   155ac:	beq	155c4 <__assert_fail@plt+0x4080>
   155b0:	ldr	r3, [pc, #76]	; 15604 <__assert_fail@plt+0x40c0>
   155b4:	mov	r2, #171	; 0xab
   155b8:	ldr	r1, [pc, #72]	; 15608 <__assert_fail@plt+0x40c4>
   155bc:	ldr	r0, [pc, #76]	; 15610 <__assert_fail@plt+0x40cc>
   155c0:	bl	11544 <__assert_fail@plt>
   155c4:	ldr	r3, [r4, #28]
   155c8:	cmp	r3, #0
   155cc:	beq	155e4 <__assert_fail@plt+0x40a0>
   155d0:	ldr	r3, [pc, #44]	; 15604 <__assert_fail@plt+0x40c0>
   155d4:	mov	r2, #172	; 0xac
   155d8:	ldr	r1, [pc, #40]	; 15608 <__assert_fail@plt+0x40c4>
   155dc:	ldr	r0, [pc, #48]	; 15614 <__assert_fail@plt+0x40d0>
   155e0:	bl	11544 <__assert_fail@plt>
   155e4:	mov	r3, #1
   155e8:	mov	r0, r6
   155ec:	strb	r3, [r4, #24]
   155f0:	bl	11214 <mbsinit@plt>
   155f4:	cmp	r0, #0
   155f8:	movne	r3, #0
   155fc:	strbne	r3, [r4]
   15600:	b	154fc <__assert_fail@plt+0x3fb8>
   15604:	andeq	r9, r1, r2, asr #28
   15608:	andeq	r9, r1, r5, asr lr
   1560c:	andeq	r9, r1, pc, asr lr
   15610:	andeq	r9, r1, r6, ror lr
   15614:	andeq	r9, r1, sp, lsl #29
   15618:	ldr	r3, [r0, #16]
   1561c:	add	r1, r3, r1
   15620:	str	r1, [r0, #16]
   15624:	bx	lr
   15628:	ldrb	r2, [r1]
   1562c:	mov	r3, r0
   15630:	add	r0, r0, #16
   15634:	cmp	r2, #0
   15638:	strb	r2, [r3], #4
   1563c:	movne	ip, r1
   15640:	add	r1, r1, #16
   15644:	ldrne	r2, [ip, #4]!
   15648:	streq	r2, [r0, #-12]
   1564c:	strne	r2, [r0, #-12]
   15650:	ldrne	r2, [ip, #4]
   15654:	str	r2, [r3, #4]
   15658:	ldrb	r3, [r1, #-4]
   1565c:	strb	r3, [r0, #-4]
   15660:	b	17ef4 <__assert_fail@plt+0x69b0>
   15664:	push	{r4, r5, r6, lr}
   15668:	subs	r4, r0, #0
   1566c:	bne	15684 <__assert_fail@plt+0x4140>
   15670:	ldr	r3, [pc, #124]	; 156f4 <__assert_fail@plt+0x41b0>
   15674:	ldr	r0, [pc, #124]	; 156f8 <__assert_fail@plt+0x41b4>
   15678:	ldr	r1, [r3]
   1567c:	bl	114fc <fputs@plt>
   15680:	bl	11514 <abort@plt>
   15684:	mov	r1, #47	; 0x2f
   15688:	bl	11484 <strrchr@plt>
   1568c:	subs	r6, r0, #0
   15690:	beq	156e0 <__assert_fail@plt+0x419c>
   15694:	add	r5, r6, #1
   15698:	sub	r3, r5, r4
   1569c:	cmp	r3, #6
   156a0:	ble	156e0 <__assert_fail@plt+0x419c>
   156a4:	mov	r2, #7
   156a8:	ldr	r1, [pc, #76]	; 156fc <__assert_fail@plt+0x41b8>
   156ac:	sub	r0, r6, #6
   156b0:	bl	11508 <strncmp@plt>
   156b4:	cmp	r0, #0
   156b8:	bne	156e0 <__assert_fail@plt+0x419c>
   156bc:	mov	r2, #3
   156c0:	ldr	r1, [pc, #56]	; 15700 <__assert_fail@plt+0x41bc>
   156c4:	mov	r0, r5
   156c8:	bl	11508 <strncmp@plt>
   156cc:	cmp	r0, #0
   156d0:	ldreq	r3, [pc, #44]	; 15704 <__assert_fail@plt+0x41c0>
   156d4:	addeq	r4, r6, #4
   156d8:	movne	r4, r5
   156dc:	streq	r4, [r3]
   156e0:	ldr	r3, [pc, #32]	; 15708 <__assert_fail@plt+0x41c4>
   156e4:	str	r4, [r3]
   156e8:	ldr	r3, [pc, #28]	; 1570c <__assert_fail@plt+0x41c8>
   156ec:	str	r4, [r3]
   156f0:	pop	{r4, r5, r6, pc}
   156f4:	andeq	fp, r2, r8, asr #3
   156f8:	muleq	r1, pc, lr	; <UNPREDICTABLE>
   156fc:	ldrdeq	r9, [r1], -r7
   15700:	ldrdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   15704:			; <UNDEFINED> instruction: 0x0002b1b0
   15708:	andeq	fp, r2, ip, lsr #5
   1570c:			; <UNDEFINED> instruction: 0x0002b1b8
   15710:	push	{r4, lr}
   15714:	mov	r2, #48	; 0x30
   15718:	mov	r4, r1
   1571c:	mov	r1, #0
   15720:	bl	113e8 <memset@plt>
   15724:	cmp	r4, #10
   15728:	bne	15730 <__assert_fail@plt+0x41ec>
   1572c:	bl	11514 <abort@plt>
   15730:	str	r4, [r0]
   15734:	pop	{r4, pc}
   15738:	push	{r4, r5, r6, lr}
   1573c:	mov	r2, #5
   15740:	mov	r6, r0
   15744:	mov	r5, r1
   15748:	mov	r1, r0
   1574c:	mov	r0, #0
   15750:	bl	11238 <dcgettext@plt>
   15754:	cmp	r6, r0
   15758:	mov	r4, r0
   1575c:	bne	157cc <__assert_fail@plt+0x4288>
   15760:	bl	17e2c <__assert_fail@plt+0x68e8>
   15764:	ldrb	r3, [r0]
   15768:	bic	r3, r3, #32
   1576c:	cmp	r3, #85	; 0x55
   15770:	bne	157d4 <__assert_fail@plt+0x4290>
   15774:	ldrb	r3, [r0, #1]
   15778:	bic	r3, r3, #32
   1577c:	cmp	r3, #84	; 0x54
   15780:	bne	15844 <__assert_fail@plt+0x4300>
   15784:	ldrb	r3, [r0, #2]
   15788:	bic	r3, r3, #32
   1578c:	cmp	r3, #70	; 0x46
   15790:	bne	15844 <__assert_fail@plt+0x4300>
   15794:	ldrb	r3, [r0, #3]
   15798:	cmp	r3, #45	; 0x2d
   1579c:	bne	15844 <__assert_fail@plt+0x4300>
   157a0:	ldrb	r3, [r0, #4]
   157a4:	cmp	r3, #56	; 0x38
   157a8:	bne	15844 <__assert_fail@plt+0x4300>
   157ac:	ldrb	r3, [r0, #5]
   157b0:	cmp	r3, #0
   157b4:	bne	15844 <__assert_fail@plt+0x4300>
   157b8:	ldrb	r2, [r4]
   157bc:	ldr	r3, [pc, #144]	; 15854 <__assert_fail@plt+0x4310>
   157c0:	ldr	r4, [pc, #144]	; 15858 <__assert_fail@plt+0x4314>
   157c4:	cmp	r2, #96	; 0x60
   157c8:	movne	r4, r3
   157cc:	mov	r0, r4
   157d0:	pop	{r4, r5, r6, pc}
   157d4:	cmp	r3, #71	; 0x47
   157d8:	bne	15844 <__assert_fail@plt+0x4300>
   157dc:	ldrb	r3, [r0, #1]
   157e0:	bic	r3, r3, #32
   157e4:	cmp	r3, #66	; 0x42
   157e8:	bne	15844 <__assert_fail@plt+0x4300>
   157ec:	ldrb	r3, [r0, #2]
   157f0:	cmp	r3, #49	; 0x31
   157f4:	bne	15844 <__assert_fail@plt+0x4300>
   157f8:	ldrb	r3, [r0, #3]
   157fc:	cmp	r3, #56	; 0x38
   15800:	bne	15844 <__assert_fail@plt+0x4300>
   15804:	ldrb	r3, [r0, #4]
   15808:	cmp	r3, #48	; 0x30
   1580c:	bne	15844 <__assert_fail@plt+0x4300>
   15810:	ldrb	r3, [r0, #5]
   15814:	cmp	r3, #51	; 0x33
   15818:	bne	15844 <__assert_fail@plt+0x4300>
   1581c:	ldrb	r3, [r0, #6]
   15820:	cmp	r3, #48	; 0x30
   15824:	bne	15844 <__assert_fail@plt+0x4300>
   15828:	ldrb	r3, [r0, #7]
   1582c:	cmp	r3, #0
   15830:	bne	15844 <__assert_fail@plt+0x4300>
   15834:	ldrb	r2, [r4]
   15838:	ldr	r3, [pc, #28]	; 1585c <__assert_fail@plt+0x4318>
   1583c:	ldr	r4, [pc, #28]	; 15860 <__assert_fail@plt+0x431c>
   15840:	b	157c4 <__assert_fail@plt+0x4280>
   15844:	ldr	r4, [pc, #24]	; 15864 <__assert_fail@plt+0x4320>
   15848:	cmp	r5, #9
   1584c:	ldr	r3, [pc, #20]	; 15868 <__assert_fail@plt+0x4324>
   15850:	b	157c8 <__assert_fail@plt+0x4284>
   15854:	andeq	r9, r1, sl, lsr pc
   15858:	andeq	r9, r1, r5, asr #30
   1585c:	andeq	r9, r1, lr, lsr pc
   15860:	andeq	r9, r1, r1, asr #30
   15864:	andeq	r9, r1, r8, lsr pc
   15868:	andeq	r9, r1, fp, lsl #29
   1586c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15870:	sub	sp, sp, #108	; 0x6c
   15874:	mov	r8, r0
   15878:	mov	r5, r1
   1587c:	mov	r6, #0
   15880:	str	r3, [sp, #40]	; 0x28
   15884:	str	r2, [sp, #48]	; 0x30
   15888:	ldr	sl, [sp, #144]	; 0x90
   1588c:	bl	112c8 <__ctype_get_mb_cur_max@plt>
   15890:	ldr	r3, [sp, #148]	; 0x94
   15894:	str	r6, [sp, #24]
   15898:	str	r6, [sp, #32]
   1589c:	str	r6, [sp, #44]	; 0x2c
   158a0:	str	r6, [sp, #52]	; 0x34
   158a4:	ubfx	r7, r3, #1, #1
   158a8:	mov	r3, #1
   158ac:	str	r6, [sp, #60]	; 0x3c
   158b0:	str	r3, [sp, #72]	; 0x48
   158b4:	str	r0, [sp, #76]	; 0x4c
   158b8:	cmp	sl, #10
   158bc:	ldrls	pc, [pc, sl, lsl #2]
   158c0:	b	15b04 <__assert_fail@plt+0x45c0>
   158c4:	strdeq	r5, [r1], -r0
   158c8:	andeq	r5, r1, ip, lsl fp
   158cc:	andeq	r5, r1, r0, lsr #21
   158d0:			; <UNDEFINED> instruction: 0x00015ab8
   158d4:	andeq	r5, r1, r8, lsl #21
   158d8:	andeq	r5, r1, r0, ror #19
   158dc:	andeq	r5, r1, r0, asr #19
   158e0:	andeq	r5, r1, r8, lsl #22
   158e4:	andeq	r5, r1, r0, lsl sl
   158e8:	andeq	r5, r1, r0, lsl sl
   158ec:	andeq	r5, r1, r0, lsl sl
   158f0:	mov	r4, sl
   158f4:	mov	r7, #0
   158f8:	mov	r9, r5
   158fc:	mov	r3, #0
   15900:	str	r6, [sp, #68]	; 0x44
   15904:	str	r3, [sp, #28]
   15908:	ldr	r3, [sp, #40]	; 0x28
   1590c:	cmn	r3, #1
   15910:	bne	164b0 <__assert_fail@plt+0x4f6c>
   15914:	ldr	r2, [sp, #28]
   15918:	ldr	r3, [sp, #48]	; 0x30
   1591c:	ldrb	r3, [r3, r2]
   15920:	adds	r3, r3, #0
   15924:	movne	r3, #1
   15928:	str	r3, [sp, #36]	; 0x24
   1592c:	ldr	r3, [sp, #36]	; 0x24
   15930:	cmp	r3, #0
   15934:	bne	15b40 <__assert_fail@plt+0x45fc>
   15938:	sub	r3, sl, #2
   1593c:	cmp	r4, #0
   15940:	clz	r3, r3
   15944:	movne	r2, #0
   15948:	lsr	r3, r3, #5
   1594c:	andeq	r2, r3, r7
   15950:	cmp	r2, #0
   15954:	bne	15d04 <__assert_fail@plt+0x47c0>
   15958:	eor	r7, r7, #1
   1595c:	ands	r3, r3, r7
   15960:	beq	16528 <__assert_fail@plt+0x4fe4>
   15964:	ldr	r2, [sp, #68]	; 0x44
   15968:	cmp	r2, #0
   1596c:	beq	164f0 <__assert_fail@plt+0x4fac>
   15970:	ldr	r3, [sp, #72]	; 0x48
   15974:	cmp	r3, #0
   15978:	beq	164c4 <__assert_fail@plt+0x4f80>
   1597c:	ldr	r2, [sp, #48]	; 0x30
   15980:	ldr	r3, [sp, #160]	; 0xa0
   15984:	ldr	r1, [sp, #60]	; 0x3c
   15988:	str	r3, [sp, #16]
   1598c:	ldr	r3, [sp, #156]	; 0x9c
   15990:	str	r3, [sp, #12]
   15994:	ldr	r3, [sp, #152]	; 0x98
   15998:	str	r3, [sp, #8]
   1599c:	ldr	r3, [sp, #148]	; 0x94
   159a0:	str	r3, [sp, #4]
   159a4:	mov	r3, #5
   159a8:	str	r3, [sp]
   159ac:	ldr	r3, [sp, #40]	; 0x28
   159b0:	mov	r0, r8
   159b4:	bl	1586c <__assert_fail@plt+0x4328>
   159b8:	mov	r4, r0
   159bc:	b	1651c <__assert_fail@plt+0x4fd8>
   159c0:	ldr	r3, [pc, #2948]	; 1654c <__assert_fail@plt+0x5008>
   159c4:	mov	r7, #1
   159c8:	mov	r4, #0
   159cc:	mov	sl, #5
   159d0:	str	r7, [sp, #24]
   159d4:	str	r7, [sp, #32]
   159d8:	str	r3, [sp, #44]	; 0x2c
   159dc:	b	158f8 <__assert_fail@plt+0x43b4>
   159e0:	cmp	r7, #0
   159e4:	bne	15b28 <__assert_fail@plt+0x45e4>
   159e8:	cmp	r5, #0
   159ec:	mov	r4, #1
   159f0:	movne	r3, #34	; 0x22
   159f4:	strbne	r3, [r8]
   159f8:	mov	r3, #1
   159fc:	str	r3, [sp, #24]
   15a00:	str	r3, [sp, #32]
   15a04:	ldr	r3, [pc, #2880]	; 1654c <__assert_fail@plt+0x5008>
   15a08:	str	r3, [sp, #44]	; 0x2c
   15a0c:	b	158f8 <__assert_fail@plt+0x43b4>
   15a10:	cmp	sl, #10
   15a14:	beq	15a38 <__assert_fail@plt+0x44f4>
   15a18:	mov	r1, sl
   15a1c:	ldr	r0, [pc, #2860]	; 16550 <__assert_fail@plt+0x500c>
   15a20:	bl	15738 <__assert_fail@plt+0x41f4>
   15a24:	mov	r1, sl
   15a28:	str	r0, [sp, #156]	; 0x9c
   15a2c:	ldr	r0, [pc, #2848]	; 16554 <__assert_fail@plt+0x5010>
   15a30:	bl	15738 <__assert_fail@plt+0x41f4>
   15a34:	str	r0, [sp, #160]	; 0xa0
   15a38:	cmp	r7, #0
   15a3c:	moveq	r4, r7
   15a40:	beq	15a58 <__assert_fail@plt+0x4514>
   15a44:	mov	r4, #0
   15a48:	b	15a68 <__assert_fail@plt+0x4524>
   15a4c:	cmp	r5, r4
   15a50:	strbhi	r3, [r8, r4]
   15a54:	add	r4, r4, #1
   15a58:	ldr	r3, [sp, #156]	; 0x9c
   15a5c:	ldrb	r3, [r3, r4]
   15a60:	cmp	r3, #0
   15a64:	bne	15a4c <__assert_fail@plt+0x4508>
   15a68:	ldr	r0, [sp, #160]	; 0xa0
   15a6c:	bl	11394 <strlen@plt>
   15a70:	ldr	r3, [sp, #160]	; 0xa0
   15a74:	str	r0, [sp, #32]
   15a78:	str	r3, [sp, #44]	; 0x2c
   15a7c:	mov	r3, #1
   15a80:	str	r3, [sp, #24]
   15a84:	b	158f8 <__assert_fail@plt+0x43b4>
   15a88:	mov	r3, #1
   15a8c:	cmp	r7, #0
   15a90:	streq	r3, [sp, #24]
   15a94:	beq	15ad8 <__assert_fail@plt+0x4594>
   15a98:	str	r3, [sp, #32]
   15a9c:	b	15ac4 <__assert_fail@plt+0x4580>
   15aa0:	cmp	r7, #0
   15aa4:	beq	15ad8 <__assert_fail@plt+0x4594>
   15aa8:	mov	r3, #1
   15aac:	str	r3, [sp, #32]
   15ab0:	ldr	r3, [pc, #2716]	; 16554 <__assert_fail@plt+0x5010>
   15ab4:	b	15b38 <__assert_fail@plt+0x45f4>
   15ab8:	mov	r7, #1
   15abc:	str	r7, [sp, #24]
   15ac0:	str	r7, [sp, #32]
   15ac4:	ldr	r3, [pc, #2696]	; 16554 <__assert_fail@plt+0x5010>
   15ac8:	mov	r4, #0
   15acc:	str	r3, [sp, #44]	; 0x2c
   15ad0:	mov	sl, #2
   15ad4:	b	158f8 <__assert_fail@plt+0x43b4>
   15ad8:	cmp	r5, #0
   15adc:	movne	r3, #39	; 0x27
   15ae0:	movne	r7, #0
   15ae4:	strbne	r3, [r8]
   15ae8:	moveq	r7, r5
   15aec:	mov	r3, #1
   15af0:	mov	r4, #1
   15af4:	str	r3, [sp, #32]
   15af8:	ldr	r3, [pc, #2644]	; 16554 <__assert_fail@plt+0x5010>
   15afc:	str	r3, [sp, #44]	; 0x2c
   15b00:	b	15ad0 <__assert_fail@plt+0x458c>
   15b04:	bl	11514 <abort@plt>
   15b08:	mov	r3, #1
   15b0c:	mov	r7, #0
   15b10:	str	r3, [sp, #24]
   15b14:	mov	r4, #0
   15b18:	b	158f8 <__assert_fail@plt+0x43b4>
   15b1c:	mov	r7, #1
   15b20:	str	sl, [sp, #32]
   15b24:	b	15ac4 <__assert_fail@plt+0x4580>
   15b28:	mov	r3, #1
   15b2c:	str	r7, [sp, #24]
   15b30:	str	r3, [sp, #32]
   15b34:	ldr	r3, [pc, #2576]	; 1654c <__assert_fail@plt+0x5008>
   15b38:	str	r3, [sp, #44]	; 0x2c
   15b3c:	b	15b14 <__assert_fail@plt+0x45d0>
   15b40:	ldr	fp, [sp, #24]
   15b44:	ldr	r3, [sp, #32]
   15b48:	cmp	sl, #2
   15b4c:	moveq	fp, #0
   15b50:	andne	fp, fp, #1
   15b54:	adds	r5, r3, #0
   15b58:	movne	r5, #1
   15b5c:	ands	r3, fp, r5
   15b60:	str	r3, [sp, #64]	; 0x40
   15b64:	beq	15c34 <__assert_fail@plt+0x46f0>
   15b68:	ldr	r3, [sp, #28]
   15b6c:	ldr	r2, [sp, #32]
   15b70:	cmp	r2, #1
   15b74:	add	r6, r3, r2
   15b78:	mov	r3, r2
   15b7c:	ldr	r2, [sp, #40]	; 0x28
   15b80:	movls	r3, #0
   15b84:	movhi	r3, #1
   15b88:	cmn	r2, #1
   15b8c:	movne	r3, #0
   15b90:	cmp	r3, #0
   15b94:	beq	15ba4 <__assert_fail@plt+0x4660>
   15b98:	ldr	r0, [sp, #48]	; 0x30
   15b9c:	bl	11394 <strlen@plt>
   15ba0:	str	r0, [sp, #40]	; 0x28
   15ba4:	ldr	r3, [sp, #40]	; 0x28
   15ba8:	cmp	r6, r3
   15bac:	bhi	15c2c <__assert_fail@plt+0x46e8>
   15bb0:	ldr	r0, [sp, #28]
   15bb4:	ldr	r2, [sp, #32]
   15bb8:	ldr	r3, [sp, #48]	; 0x30
   15bbc:	ldr	r1, [sp, #44]	; 0x2c
   15bc0:	add	r0, r3, r0
   15bc4:	bl	1122c <memcmp@plt>
   15bc8:	cmp	r0, #0
   15bcc:	bne	15c2c <__assert_fail@plt+0x46e8>
   15bd0:	cmp	r7, #0
   15bd4:	beq	15c34 <__assert_fail@plt+0x46f0>
   15bd8:	str	r7, [sp, #24]
   15bdc:	ldr	r3, [sp, #24]
   15be0:	mov	r1, r9
   15be4:	ldr	r2, [sp, #48]	; 0x30
   15be8:	cmp	sl, #2
   15bec:	movne	r3, #0
   15bf0:	andeq	r3, r3, #1
   15bf4:	cmp	r3, #0
   15bf8:	ldr	r3, [sp, #160]	; 0xa0
   15bfc:	movne	sl, #4
   15c00:	str	sl, [sp]
   15c04:	str	r3, [sp, #16]
   15c08:	ldr	r3, [sp, #156]	; 0x9c
   15c0c:	str	r3, [sp, #12]
   15c10:	mov	r3, #0
   15c14:	str	r3, [sp, #8]
   15c18:	ldr	r3, [sp, #148]	; 0x94
   15c1c:	bic	r3, r3, #2
   15c20:	str	r3, [sp, #4]
   15c24:	ldr	r3, [sp, #40]	; 0x28
   15c28:	b	159b0 <__assert_fail@plt+0x446c>
   15c2c:	mov	r3, #0
   15c30:	str	r3, [sp, #64]	; 0x40
   15c34:	ldr	r2, [sp, #28]
   15c38:	ldr	r3, [sp, #48]	; 0x30
   15c3c:	add	r3, r3, r2
   15c40:	str	r3, [sp, #80]	; 0x50
   15c44:	ldr	r3, [sp, #48]	; 0x30
   15c48:	ldrb	r6, [r3, r2]
   15c4c:	cmp	r6, #58	; 0x3a
   15c50:	bhi	15db4 <__assert_fail@plt+0x4870>
   15c54:	cmp	r6, #43	; 0x2b
   15c58:	bcs	15f74 <__assert_fail@plt+0x4a30>
   15c5c:	cmp	r6, #32
   15c60:	beq	15fc8 <__assert_fail@plt+0x4a84>
   15c64:	bhi	15d0c <__assert_fail@plt+0x47c8>
   15c68:	cmp	r6, #9
   15c6c:	beq	16170 <__assert_fail@plt+0x4c2c>
   15c70:	bhi	15cd0 <__assert_fail@plt+0x478c>
   15c74:	cmp	r6, #7
   15c78:	beq	16180 <__assert_fail@plt+0x4c3c>
   15c7c:	bhi	1619c <__assert_fail@plt+0x4c58>
   15c80:	cmp	r6, #0
   15c84:	beq	15fe4 <__assert_fail@plt+0x4aa0>
   15c88:	ldr	r3, [sp, #76]	; 0x4c
   15c8c:	cmp	r3, #1
   15c90:	bne	161e8 <__assert_fail@plt+0x4ca4>
   15c94:	bl	11364 <__ctype_b_loc@plt>
   15c98:	ldr	r2, [r0]
   15c9c:	sxth	r3, r6
   15ca0:	lsl	r3, r3, #1
   15ca4:	ldrh	r5, [r2, r3]
   15ca8:	ldr	r3, [sp, #76]	; 0x4c
   15cac:	ubfx	r5, r5, #14, #1
   15cb0:	str	r3, [sp, #56]	; 0x38
   15cb4:	ldr	r3, [sp, #24]
   15cb8:	eor	fp, r5, #1
   15cbc:	and	fp, fp, r3
   15cc0:	ands	fp, fp, #255	; 0xff
   15cc4:	beq	15ea4 <__assert_fail@plt+0x4960>
   15cc8:	mov	r5, #0
   15ccc:	b	16294 <__assert_fail@plt+0x4d50>
   15cd0:	cmp	r6, #11
   15cd4:	beq	161a4 <__assert_fail@plt+0x4c60>
   15cd8:	bcc	16178 <__assert_fail@plt+0x4c34>
   15cdc:	cmp	r6, #12
   15ce0:	beq	161ac <__assert_fail@plt+0x4c68>
   15ce4:	cmp	r6, #13
   15ce8:	moveq	r3, #114	; 0x72
   15cec:	bne	15c88 <__assert_fail@plt+0x4744>
   15cf0:	cmp	sl, #2
   15cf4:	movne	r2, #0
   15cf8:	andeq	r2, r7, #1
   15cfc:	cmp	r2, #0
   15d00:	beq	16184 <__assert_fail@plt+0x4c40>
   15d04:	mov	sl, #2
   15d08:	b	15bdc <__assert_fail@plt+0x4698>
   15d0c:	cmp	r6, #37	; 0x25
   15d10:	beq	15f74 <__assert_fail@plt+0x4a30>
   15d14:	bhi	15d28 <__assert_fail@plt+0x47e4>
   15d18:	cmp	r6, #35	; 0x23
   15d1c:	beq	15fbc <__assert_fail@plt+0x4a78>
   15d20:	mov	r5, #0
   15d24:	b	15fcc <__assert_fail@plt+0x4a88>
   15d28:	cmp	r6, #39	; 0x27
   15d2c:	bne	15d20 <__assert_fail@plt+0x47dc>
   15d30:	cmp	sl, #2
   15d34:	ldrne	r5, [sp, #36]	; 0x24
   15d38:	movne	r3, r5
   15d3c:	strne	r3, [sp, #68]	; 0x44
   15d40:	bne	160c0 <__assert_fail@plt+0x4b7c>
   15d44:	cmp	r7, #0
   15d48:	bne	15bdc <__assert_fail@plt+0x4698>
   15d4c:	ldr	r3, [sp, #60]	; 0x3c
   15d50:	cmp	r9, #0
   15d54:	clz	r3, r3
   15d58:	lsr	r3, r3, #5
   15d5c:	moveq	r3, #0
   15d60:	cmp	r3, #0
   15d64:	strne	r9, [sp, #60]	; 0x3c
   15d68:	movne	r9, #0
   15d6c:	bne	15d7c <__assert_fail@plt+0x4838>
   15d70:	cmp	r9, r4
   15d74:	movhi	r3, #39	; 0x27
   15d78:	strbhi	r3, [r8, r4]
   15d7c:	add	r3, r4, #1
   15d80:	ldr	r5, [sp, #36]	; 0x24
   15d84:	mov	fp, #0
   15d88:	cmp	r3, r9
   15d8c:	movcc	r2, #92	; 0x5c
   15d90:	str	fp, [sp, #52]	; 0x34
   15d94:	strbcc	r2, [r8, r3]
   15d98:	add	r3, r4, #2
   15d9c:	add	r4, r4, #3
   15da0:	cmp	r3, r9
   15da4:	str	r5, [sp, #68]	; 0x44
   15da8:	movcc	r2, #39	; 0x27
   15dac:	strbcc	r2, [r8, r3]
   15db0:	b	15ea4 <__assert_fail@plt+0x4960>
   15db4:	cmp	r6, #94	; 0x5e
   15db8:	beq	15d20 <__assert_fail@plt+0x47dc>
   15dbc:	bhi	15f7c <__assert_fail@plt+0x4a38>
   15dc0:	cmp	r6, #90	; 0x5a
   15dc4:	bhi	15f68 <__assert_fail@plt+0x4a24>
   15dc8:	cmp	r6, #65	; 0x41
   15dcc:	bcs	15f74 <__assert_fail@plt+0x4a30>
   15dd0:	cmp	r6, #62	; 0x3e
   15dd4:	bls	15d20 <__assert_fail@plt+0x47dc>
   15dd8:	cmp	r6, #63	; 0x3f
   15ddc:	bne	15c88 <__assert_fail@plt+0x4744>
   15de0:	cmp	sl, #2
   15de4:	beq	160c8 <__assert_fail@plt+0x4b84>
   15de8:	cmp	sl, #5
   15dec:	movne	fp, #0
   15df0:	bne	16498 <__assert_fail@plt+0x4f54>
   15df4:	ldr	r3, [sp, #148]	; 0x94
   15df8:	tst	r3, #4
   15dfc:	beq	160d0 <__assert_fail@plt+0x4b8c>
   15e00:	ldr	r3, [sp, #28]
   15e04:	add	r2, r3, #2
   15e08:	ldr	r3, [sp, #40]	; 0x28
   15e0c:	cmp	r2, r3
   15e10:	bcs	160d0 <__assert_fail@plt+0x4b8c>
   15e14:	ldr	r1, [sp, #28]
   15e18:	ldr	r3, [sp, #48]	; 0x30
   15e1c:	add	r3, r3, r1
   15e20:	ldrb	r1, [r3, #1]
   15e24:	cmp	r1, #63	; 0x3f
   15e28:	bne	160d0 <__assert_fail@plt+0x4b8c>
   15e2c:	ldr	r3, [sp, #48]	; 0x30
   15e30:	ldrb	r6, [r3, r2]
   15e34:	sub	r3, r6, #33	; 0x21
   15e38:	uxtb	r3, r3
   15e3c:	cmp	r3, #29
   15e40:	bhi	164a0 <__assert_fail@plt+0x4f5c>
   15e44:	ldr	r0, [pc, #1804]	; 16558 <__assert_fail@plt+0x5014>
   15e48:	mov	r5, #1
   15e4c:	ands	r5, r0, r5, lsl r3
   15e50:	beq	164a8 <__assert_fail@plt+0x4f64>
   15e54:	cmp	r7, #0
   15e58:	bne	15bdc <__assert_fail@plt+0x4698>
   15e5c:	cmp	r9, r4
   15e60:	add	r3, r4, #1
   15e64:	str	r2, [sp, #28]
   15e68:	mov	r5, #0
   15e6c:	strbhi	r1, [r8, r4]
   15e70:	cmp	r9, r3
   15e74:	mov	fp, r5
   15e78:	movhi	r1, #34	; 0x22
   15e7c:	strbhi	r1, [r8, r3]
   15e80:	add	r3, r4, #2
   15e84:	cmp	r9, r3
   15e88:	movhi	r1, #34	; 0x22
   15e8c:	strbhi	r1, [r8, r3]
   15e90:	add	r3, r4, #3
   15e94:	add	r4, r4, #4
   15e98:	cmp	r9, r3
   15e9c:	movhi	r1, #63	; 0x3f
   15ea0:	strbhi	r1, [r8, r3]
   15ea4:	ldr	r3, [sp, #24]
   15ea8:	eor	r3, r3, #1
   15eac:	cmp	sl, #2
   15eb0:	orreq	r3, r3, #1
   15eb4:	eor	r3, r3, #1
   15eb8:	orr	r3, r7, r3
   15ebc:	tst	r3, #255	; 0xff
   15ec0:	beq	15eec <__assert_fail@plt+0x49a8>
   15ec4:	ldr	r3, [sp, #152]	; 0x98
   15ec8:	cmp	r3, #0
   15ecc:	beq	15eec <__assert_fail@plt+0x49a8>
   15ed0:	ldr	r1, [sp, #152]	; 0x98
   15ed4:	ubfx	r2, r6, #5, #8
   15ed8:	and	r3, r6, #31
   15edc:	ldr	r2, [r1, r2, lsl #2]
   15ee0:	lsr	r3, r2, r3
   15ee4:	tst	r3, #1
   15ee8:	bne	15ef8 <__assert_fail@plt+0x49b4>
   15eec:	ldr	r3, [sp, #64]	; 0x40
   15ef0:	cmp	r3, #0
   15ef4:	beq	160f0 <__assert_fail@plt+0x4bac>
   15ef8:	sub	r3, sl, #2
   15efc:	cmp	r7, #0
   15f00:	clz	r3, r3
   15f04:	lsr	r3, r3, #5
   15f08:	bne	15bdc <__assert_fail@plt+0x4698>
   15f0c:	ldr	r2, [sp, #52]	; 0x34
   15f10:	eor	r2, r2, #1
   15f14:	ands	r3, r3, r2
   15f18:	beq	15f50 <__assert_fail@plt+0x4a0c>
   15f1c:	cmp	r9, r4
   15f20:	str	r3, [sp, #52]	; 0x34
   15f24:	movhi	r2, #39	; 0x27
   15f28:	strbhi	r2, [r8, r4]
   15f2c:	add	r2, r4, #1
   15f30:	cmp	r9, r2
   15f34:	movhi	r1, #36	; 0x24
   15f38:	strbhi	r1, [r8, r2]
   15f3c:	add	r2, r4, #2
   15f40:	add	r4, r4, #3
   15f44:	cmp	r9, r2
   15f48:	movhi	r1, #39	; 0x27
   15f4c:	strbhi	r1, [r8, r2]
   15f50:	cmp	r9, r4
   15f54:	ldr	fp, [sp, #36]	; 0x24
   15f58:	movhi	r3, #92	; 0x5c
   15f5c:	strbhi	r3, [r8, r4]
   15f60:	add	r4, r4, #1
   15f64:	b	160f0 <__assert_fail@plt+0x4bac>
   15f68:	cmp	r6, #92	; 0x5c
   15f6c:	beq	160d8 <__assert_fail@plt+0x4b94>
   15f70:	bls	15d20 <__assert_fail@plt+0x47dc>
   15f74:	ldr	r5, [sp, #36]	; 0x24
   15f78:	b	160c0 <__assert_fail@plt+0x4b7c>
   15f7c:	cmp	r6, #122	; 0x7a
   15f80:	bhi	15fa0 <__assert_fail@plt+0x4a5c>
   15f84:	cmp	r6, #97	; 0x61
   15f88:	bcs	15f74 <__assert_fail@plt+0x4a30>
   15f8c:	cmp	r6, #95	; 0x5f
   15f90:	beq	15f74 <__assert_fail@plt+0x4a30>
   15f94:	cmp	r6, #96	; 0x60
   15f98:	bne	15c88 <__assert_fail@plt+0x4744>
   15f9c:	b	15d20 <__assert_fail@plt+0x47dc>
   15fa0:	cmp	r6, #124	; 0x7c
   15fa4:	beq	15d20 <__assert_fail@plt+0x47dc>
   15fa8:	bcc	161b4 <__assert_fail@plt+0x4c70>
   15fac:	cmp	r6, #125	; 0x7d
   15fb0:	beq	161b4 <__assert_fail@plt+0x4c70>
   15fb4:	cmp	r6, #126	; 0x7e
   15fb8:	bne	15c88 <__assert_fail@plt+0x4744>
   15fbc:	ldr	r3, [sp, #28]
   15fc0:	cmp	r3, #0
   15fc4:	bne	160d0 <__assert_fail@plt+0x4b8c>
   15fc8:	ldr	r5, [sp, #36]	; 0x24
   15fcc:	cmp	sl, #2
   15fd0:	movne	fp, #0
   15fd4:	andeq	fp, r7, #1
   15fd8:	cmp	fp, #0
   15fdc:	beq	15ea4 <__assert_fail@plt+0x4960>
   15fe0:	b	15d04 <__assert_fail@plt+0x47c0>
   15fe4:	ldr	r3, [sp, #24]
   15fe8:	cmp	r3, #0
   15fec:	beq	160b4 <__assert_fail@plt+0x4b70>
   15ff0:	sub	r2, sl, #2
   15ff4:	cmp	r7, #0
   15ff8:	clz	r2, r2
   15ffc:	lsr	r2, r2, #5
   16000:	bne	15bd8 <__assert_fail@plt+0x4694>
   16004:	ldr	r3, [sp, #52]	; 0x34
   16008:	eor	r3, r3, #1
   1600c:	ands	r2, r2, r3
   16010:	moveq	r3, r4
   16014:	beq	1604c <__assert_fail@plt+0x4b08>
   16018:	cmp	r9, r4
   1601c:	str	r2, [sp, #52]	; 0x34
   16020:	movhi	r3, #39	; 0x27
   16024:	strbhi	r3, [r8, r4]
   16028:	add	r3, r4, #1
   1602c:	cmp	r9, r3
   16030:	movhi	r1, #36	; 0x24
   16034:	strbhi	r1, [r8, r3]
   16038:	add	r3, r4, #2
   1603c:	cmp	r9, r3
   16040:	movhi	r1, #39	; 0x27
   16044:	strbhi	r1, [r8, r3]
   16048:	add	r3, r4, #3
   1604c:	cmp	r9, r3
   16050:	add	r4, r3, #1
   16054:	movhi	r2, #92	; 0x5c
   16058:	strbhi	r2, [r8, r3]
   1605c:	cmp	fp, #0
   16060:	beq	16488 <__assert_fail@plt+0x4f44>
   16064:	ldr	r2, [sp, #28]
   16068:	ldr	r1, [sp, #40]	; 0x28
   1606c:	add	r2, r2, #1
   16070:	cmp	r2, r1
   16074:	bcs	160ac <__assert_fail@plt+0x4b68>
   16078:	ldr	r1, [sp, #48]	; 0x30
   1607c:	mov	r6, #48	; 0x30
   16080:	ldrb	r2, [r1, r2]
   16084:	sub	r2, r2, #48	; 0x30
   16088:	cmp	r2, #9
   1608c:	bhi	16498 <__assert_fail@plt+0x4f54>
   16090:	cmp	r9, r4
   16094:	add	r2, r3, #2
   16098:	strbhi	r6, [r8, r4]
   1609c:	cmp	r9, r2
   160a0:	add	r4, r3, #3
   160a4:	movhi	r1, #48	; 0x30
   160a8:	strbhi	r1, [r8, r2]
   160ac:	mov	r5, #0
   160b0:	b	16490 <__assert_fail@plt+0x4f4c>
   160b4:	ldr	r3, [sp, #148]	; 0x94
   160b8:	ands	r5, r3, #1
   160bc:	bne	16144 <__assert_fail@plt+0x4c00>
   160c0:	mov	fp, #0
   160c4:	b	15ea4 <__assert_fail@plt+0x4960>
   160c8:	cmp	r7, #0
   160cc:	bne	15bdc <__assert_fail@plt+0x4698>
   160d0:	mov	r5, #0
   160d4:	b	160c0 <__assert_fail@plt+0x4b7c>
   160d8:	cmp	sl, #2
   160dc:	bne	16150 <__assert_fail@plt+0x4c0c>
   160e0:	cmp	r7, #0
   160e4:	bne	15bdc <__assert_fail@plt+0x4698>
   160e8:	mov	r5, r7
   160ec:	mov	fp, r7
   160f0:	ldr	r3, [sp, #52]	; 0x34
   160f4:	eor	fp, fp, #1
   160f8:	tst	r3, fp
   160fc:	beq	16128 <__assert_fail@plt+0x4be4>
   16100:	cmp	r9, r4
   16104:	movhi	r3, #39	; 0x27
   16108:	strbhi	r3, [r8, r4]
   1610c:	add	r3, r4, #1
   16110:	add	r4, r4, #2
   16114:	cmp	r9, r3
   16118:	movhi	r2, #39	; 0x27
   1611c:	strbhi	r2, [r8, r3]
   16120:	mov	r3, #0
   16124:	str	r3, [sp, #52]	; 0x34
   16128:	cmp	r9, r4
   1612c:	ldr	r3, [sp, #72]	; 0x48
   16130:	strbhi	r6, [r8, r4]
   16134:	cmp	r5, #0
   16138:	add	r4, r4, #1
   1613c:	moveq	r3, #0
   16140:	str	r3, [sp, #72]	; 0x48
   16144:	ldr	r3, [sp, #28]
   16148:	add	r3, r3, #1
   1614c:	b	15904 <__assert_fail@plt+0x43c0>
   16150:	ldr	r3, [sp, #24]
   16154:	and	r3, r3, r7
   16158:	tst	r5, r3
   1615c:	moveq	r3, r6
   16160:	beq	15cf0 <__assert_fail@plt+0x47ac>
   16164:	mov	fp, #0
   16168:	mov	r5, fp
   1616c:	b	160f0 <__assert_fail@plt+0x4bac>
   16170:	mov	r3, #116	; 0x74
   16174:	b	15cf0 <__assert_fail@plt+0x47ac>
   16178:	mov	r3, #110	; 0x6e
   1617c:	b	15cf0 <__assert_fail@plt+0x47ac>
   16180:	mov	r3, #97	; 0x61
   16184:	ldr	r2, [sp, #24]
   16188:	cmp	r2, #0
   1618c:	beq	160d0 <__assert_fail@plt+0x4b8c>
   16190:	mov	r6, r3
   16194:	mov	r5, #0
   16198:	b	15ef8 <__assert_fail@plt+0x49b4>
   1619c:	mov	r3, #98	; 0x62
   161a0:	b	16184 <__assert_fail@plt+0x4c40>
   161a4:	mov	r3, #118	; 0x76
   161a8:	b	16184 <__assert_fail@plt+0x4c40>
   161ac:	mov	r3, #102	; 0x66
   161b0:	b	16184 <__assert_fail@plt+0x4c40>
   161b4:	ldr	r3, [sp, #40]	; 0x28
   161b8:	cmn	r3, #1
   161bc:	bne	161dc <__assert_fail@plt+0x4c98>
   161c0:	ldr	r3, [sp, #48]	; 0x30
   161c4:	ldrb	r3, [r3, #1]
   161c8:	adds	r3, r3, #0
   161cc:	movne	r3, #1
   161d0:	cmp	r3, #0
   161d4:	bne	160d0 <__assert_fail@plt+0x4b8c>
   161d8:	b	15fbc <__assert_fail@plt+0x4a78>
   161dc:	ldr	r3, [sp, #40]	; 0x28
   161e0:	subs	r3, r3, #1
   161e4:	b	161cc <__assert_fail@plt+0x4c88>
   161e8:	mov	r3, #0
   161ec:	mov	r2, #0
   161f0:	strd	r2, [sp, #96]	; 0x60
   161f4:	ldr	r3, [sp, #40]	; 0x28
   161f8:	cmn	r3, #1
   161fc:	bne	1620c <__assert_fail@plt+0x4cc8>
   16200:	ldr	r0, [sp, #48]	; 0x30
   16204:	bl	11394 <strlen@plt>
   16208:	str	r0, [sp, #40]	; 0x28
   1620c:	ldr	r5, [sp, #36]	; 0x24
   16210:	mov	r3, #0
   16214:	str	r3, [sp, #56]	; 0x38
   16218:	ldr	r3, [sp, #28]
   1621c:	add	r0, sp, #92	; 0x5c
   16220:	ldr	r1, [sp, #40]	; 0x28
   16224:	ldr	r2, [sp, #56]	; 0x38
   16228:	add	r2, r3, r2
   1622c:	ldr	r3, [sp, #48]	; 0x30
   16230:	add	fp, r3, r2
   16234:	sub	r2, r1, r2
   16238:	add	r3, sp, #96	; 0x60
   1623c:	mov	r1, fp
   16240:	bl	17c78 <__assert_fail@plt+0x6734>
   16244:	subs	r2, r0, #0
   16248:	beq	16288 <__assert_fail@plt+0x4d44>
   1624c:	cmn	r2, #1
   16250:	beq	1645c <__assert_fail@plt+0x4f18>
   16254:	cmn	r2, #2
   16258:	bne	163cc <__assert_fail@plt+0x4e88>
   1625c:	ldr	r3, [sp, #28]
   16260:	ldr	r2, [sp, #56]	; 0x38
   16264:	add	r3, r3, r2
   16268:	ldr	r2, [sp, #40]	; 0x28
   1626c:	cmp	r2, r3
   16270:	bls	1645c <__assert_fail@plt+0x4f18>
   16274:	ldr	r2, [sp, #56]	; 0x38
   16278:	ldr	r3, [sp, #80]	; 0x50
   1627c:	ldrb	r5, [r3, r2]
   16280:	cmp	r5, #0
   16284:	bne	163bc <__assert_fail@plt+0x4e78>
   16288:	ldr	r3, [sp, #56]	; 0x38
   1628c:	cmp	r3, #1
   16290:	bls	15cb4 <__assert_fail@plt+0x4770>
   16294:	ldr	r3, [sp, #28]
   16298:	mov	fp, #0
   1629c:	mov	ip, #92	; 0x5c
   162a0:	ldr	r2, [sp, #56]	; 0x38
   162a4:	add	r3, r3, r2
   162a8:	ldr	r2, [sp, #24]
   162ac:	str	r3, [sp, #36]	; 0x24
   162b0:	eor	r3, r5, #1
   162b4:	and	r3, r3, r2
   162b8:	mov	r2, #39	; 0x27
   162bc:	uxtb	r3, r3
   162c0:	cmp	r3, #0
   162c4:	beq	16464 <__assert_fail@plt+0x4f20>
   162c8:	sub	r0, sl, #2
   162cc:	cmp	r7, #0
   162d0:	clz	r0, r0
   162d4:	lsr	r0, r0, #5
   162d8:	bne	15bd8 <__assert_fail@plt+0x4694>
   162dc:	ldr	r1, [sp, #52]	; 0x34
   162e0:	eor	r1, r1, #1
   162e4:	ands	r1, r0, r1
   162e8:	beq	16318 <__assert_fail@plt+0x4dd4>
   162ec:	cmp	r9, r4
   162f0:	add	r0, r4, #1
   162f4:	str	r1, [sp, #52]	; 0x34
   162f8:	strbhi	r2, [r8, r4]
   162fc:	cmp	r9, r0
   16300:	movhi	lr, #36	; 0x24
   16304:	strbhi	lr, [r8, r0]
   16308:	add	r0, r4, #2
   1630c:	add	r4, r4, #3
   16310:	cmp	r9, r0
   16314:	strbhi	r2, [r8, r0]
   16318:	cmp	r9, r4
   1631c:	add	r0, r4, #1
   16320:	mov	fp, r3
   16324:	strbhi	ip, [r8, r4]
   16328:	cmp	r9, r0
   1632c:	lsrhi	r1, r6, #6
   16330:	addhi	r1, r1, #48	; 0x30
   16334:	strbhi	r1, [r8, r0]
   16338:	add	r0, r4, #2
   1633c:	add	r4, r4, #3
   16340:	cmp	r9, r0
   16344:	ubfxhi	r1, r6, #3, #3
   16348:	and	r6, r6, #7
   1634c:	add	r6, r6, #48	; 0x30
   16350:	addhi	r1, r1, #48	; 0x30
   16354:	strbhi	r1, [r8, r0]
   16358:	eor	r0, fp, #1
   1635c:	ldr	r1, [sp, #28]
   16360:	ldr	lr, [sp, #52]	; 0x34
   16364:	add	r1, r1, #1
   16368:	and	r0, r0, lr
   1636c:	ldr	lr, [sp, #36]	; 0x24
   16370:	cmp	r1, lr
   16374:	bcs	160f0 <__assert_fail@plt+0x4bac>
   16378:	cmp	r0, #0
   1637c:	beq	163a0 <__assert_fail@plt+0x4e5c>
   16380:	cmp	r9, r4
   16384:	add	r0, r4, #1
   16388:	strbhi	r2, [r8, r4]
   1638c:	cmp	r9, r0
   16390:	add	r4, r4, #2
   16394:	strbhi	r2, [r8, r0]
   16398:	mov	r0, #0
   1639c:	str	r0, [sp, #52]	; 0x34
   163a0:	ldr	r0, [sp, #48]	; 0x30
   163a4:	cmp	r9, r4
   163a8:	str	r1, [sp, #28]
   163ac:	strbhi	r6, [r8, r4]
   163b0:	add	r4, r4, #1
   163b4:	ldrb	r6, [r0, r1]
   163b8:	b	162c0 <__assert_fail@plt+0x4d7c>
   163bc:	ldr	r3, [sp, #56]	; 0x38
   163c0:	add	r3, r3, #1
   163c4:	str	r3, [sp, #56]	; 0x38
   163c8:	b	1625c <__assert_fail@plt+0x4d18>
   163cc:	cmp	sl, #2
   163d0:	movne	r3, #0
   163d4:	andeq	r3, r7, #1
   163d8:	cmp	r3, #0
   163dc:	movne	r1, #1
   163e0:	bne	1643c <__assert_fail@plt+0x4ef8>
   163e4:	ldr	r0, [sp, #92]	; 0x5c
   163e8:	str	r2, [sp, #84]	; 0x54
   163ec:	bl	1128c <iswprint@plt>
   163f0:	ldr	r3, [sp, #56]	; 0x38
   163f4:	cmp	r0, #0
   163f8:	add	r0, sp, #96	; 0x60
   163fc:	moveq	r5, #0
   16400:	ldr	r2, [sp, #84]	; 0x54
   16404:	add	r3, r3, r2
   16408:	str	r3, [sp, #56]	; 0x38
   1640c:	bl	11214 <mbsinit@plt>
   16410:	cmp	r0, #0
   16414:	beq	16218 <__assert_fail@plt+0x4cd4>
   16418:	b	16288 <__assert_fail@plt+0x4d44>
   1641c:	ldrb	r3, [fp, #1]!
   16420:	cmp	r3, #94	; 0x5e
   16424:	beq	15d04 <__assert_fail@plt+0x47c0>
   16428:	bhi	16448 <__assert_fail@plt+0x4f04>
   1642c:	sub	r3, r3, #91	; 0x5b
   16430:	cmp	r3, #1
   16434:	bls	15d04 <__assert_fail@plt+0x47c0>
   16438:	add	r1, r1, #1
   1643c:	cmp	r1, r2
   16440:	bne	1641c <__assert_fail@plt+0x4ed8>
   16444:	b	163e4 <__assert_fail@plt+0x4ea0>
   16448:	cmp	r3, #96	; 0x60
   1644c:	beq	15d04 <__assert_fail@plt+0x47c0>
   16450:	cmp	r3, #124	; 0x7c
   16454:	bne	16438 <__assert_fail@plt+0x4ef4>
   16458:	b	15d04 <__assert_fail@plt+0x47c0>
   1645c:	mov	r5, #0
   16460:	b	16288 <__assert_fail@plt+0x4d44>
   16464:	ldr	r1, [sp, #64]	; 0x40
   16468:	cmp	r1, #0
   1646c:	beq	16358 <__assert_fail@plt+0x4e14>
   16470:	cmp	r9, r4
   16474:	mov	r1, #0
   16478:	strbhi	ip, [r8, r4]
   1647c:	add	r4, r4, #1
   16480:	str	r1, [sp, #64]	; 0x40
   16484:	b	16358 <__assert_fail@plt+0x4e14>
   16488:	mov	r5, fp
   1648c:	ldr	fp, [sp, #24]
   16490:	mov	r6, #48	; 0x30
   16494:	b	15ea4 <__assert_fail@plt+0x4960>
   16498:	mov	r5, #0
   1649c:	b	15ea4 <__assert_fail@plt+0x4960>
   164a0:	mov	r6, r1
   164a4:	b	160d0 <__assert_fail@plt+0x4b8c>
   164a8:	mov	r6, r1
   164ac:	b	160c0 <__assert_fail@plt+0x4b7c>
   164b0:	ldr	r2, [sp, #28]
   164b4:	ldr	r3, [sp, #40]	; 0x28
   164b8:	subs	r3, r3, r2
   164bc:	movne	r3, #1
   164c0:	b	15928 <__assert_fail@plt+0x43e4>
   164c4:	ldr	r3, [sp, #60]	; 0x3c
   164c8:	mov	sl, #2
   164cc:	ldr	r7, [sp, #72]	; 0x48
   164d0:	adds	r6, r3, #0
   164d4:	mov	r5, r3
   164d8:	movne	r6, #1
   164dc:	cmp	r9, #0
   164e0:	movne	r6, #0
   164e4:	cmp	r6, #0
   164e8:	bne	158b8 <__assert_fail@plt+0x4374>
   164ec:	ldr	r3, [sp, #68]	; 0x44
   164f0:	ldr	r2, [sp, #44]	; 0x2c
   164f4:	cmp	r2, #0
   164f8:	moveq	r3, #0
   164fc:	andne	r3, r3, #1
   16500:	cmp	r3, #0
   16504:	movne	r3, r2
   16508:	subne	r3, r3, #1
   1650c:	bne	1653c <__assert_fail@plt+0x4ff8>
   16510:	cmp	r9, r4
   16514:	movhi	r3, #0
   16518:	strbhi	r3, [r8, r4]
   1651c:	mov	r0, r4
   16520:	add	sp, sp, #108	; 0x6c
   16524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16528:	mov	r3, r7
   1652c:	b	164f0 <__assert_fail@plt+0x4fac>
   16530:	cmp	r9, r4
   16534:	strbhi	r2, [r8, r4]
   16538:	add	r4, r4, #1
   1653c:	ldrb	r2, [r3, #1]!
   16540:	cmp	r2, #0
   16544:	bne	16530 <__assert_fail@plt+0x4fec>
   16548:	b	16510 <__assert_fail@plt+0x4fcc>
   1654c:	andeq	r9, r1, r8, lsr pc
   16550:	andeq	r9, r1, r9, asr #30
   16554:	andeq	r9, r1, fp, lsl #29
   16558:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1655c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16560:	sub	sp, sp, #52	; 0x34
   16564:	mov	r6, r0
   16568:	mov	r5, r3
   1656c:	mov	r8, r1
   16570:	mov	r9, r2
   16574:	bl	113c4 <__errno_location@plt>
   16578:	ldr	r3, [r0]
   1657c:	cmn	r6, #-2147483647	; 0x80000001
   16580:	str	r0, [sp, #24]
   16584:	ldr	r7, [pc, #368]	; 166fc <__assert_fail@plt+0x51b8>
   16588:	str	r3, [sp, #32]
   1658c:	movne	r3, #0
   16590:	moveq	r3, #1
   16594:	orrs	r3, r3, r6, lsr #31
   16598:	ldr	r4, [r7]
   1659c:	beq	165a4 <__assert_fail@plt+0x5060>
   165a0:	bl	11514 <abort@plt>
   165a4:	ldr	r2, [r7, #4]
   165a8:	cmp	r2, r6
   165ac:	bgt	1661c <__assert_fail@plt+0x50d8>
   165b0:	add	sl, r7, #8
   165b4:	mov	r3, #8
   165b8:	cmp	r4, sl
   165bc:	add	r1, sp, #44	; 0x2c
   165c0:	str	r2, [sp, #44]	; 0x2c
   165c4:	sub	r2, r6, r2
   165c8:	movne	r0, r4
   165cc:	moveq	r0, #0
   165d0:	add	r2, r2, #1
   165d4:	str	r3, [sp]
   165d8:	mvn	r3, #-2147483648	; 0x80000000
   165dc:	bl	17360 <__assert_fail@plt+0x5e1c>
   165e0:	cmp	r4, sl
   165e4:	mov	fp, r0
   165e8:	str	r0, [r7]
   165ec:	ldmeq	r4, {r0, r1}
   165f0:	mov	r4, fp
   165f4:	ldr	r2, [sp, #44]	; 0x2c
   165f8:	stmeq	fp, {r0, r1}
   165fc:	mov	r1, #0
   16600:	ldr	r0, [r7, #4]
   16604:	sub	r2, r2, r0
   16608:	add	r0, fp, r0, lsl #3
   1660c:	lsl	r2, r2, #3
   16610:	bl	113e8 <memset@plt>
   16614:	ldr	r3, [sp, #44]	; 0x2c
   16618:	str	r3, [r7, #4]
   1661c:	ldr	r3, [r5, #4]
   16620:	add	sl, r4, r6, lsl #3
   16624:	mov	r2, r8
   16628:	ldr	fp, [r4, r6, lsl #3]
   1662c:	ldr	r7, [sl, #4]
   16630:	orr	r3, r3, #1
   16634:	str	r3, [sp, #28]
   16638:	add	r3, r5, #8
   1663c:	mov	r1, fp
   16640:	str	r3, [sp, #36]	; 0x24
   16644:	mov	r0, r7
   16648:	ldr	r3, [r5, #44]	; 0x2c
   1664c:	str	r3, [sp, #16]
   16650:	ldr	r3, [r5, #40]	; 0x28
   16654:	str	r3, [sp, #12]
   16658:	add	r3, r5, #8
   1665c:	str	r3, [sp, #8]
   16660:	ldr	r3, [sp, #28]
   16664:	str	r3, [sp, #4]
   16668:	ldr	r3, [r5]
   1666c:	str	r3, [sp]
   16670:	mov	r3, r9
   16674:	bl	1586c <__assert_fail@plt+0x4328>
   16678:	cmp	fp, r0
   1667c:	bhi	166e4 <__assert_fail@plt+0x51a0>
   16680:	ldr	r3, [pc, #120]	; 16700 <__assert_fail@plt+0x51bc>
   16684:	add	fp, r0, #1
   16688:	str	fp, [r4, r6, lsl #3]
   1668c:	cmp	r7, r3
   16690:	beq	1669c <__assert_fail@plt+0x5158>
   16694:	mov	r0, r7
   16698:	bl	17b64 <__assert_fail@plt+0x6620>
   1669c:	mov	r0, fp
   166a0:	bl	17250 <__assert_fail@plt+0x5d0c>
   166a4:	ldr	r3, [r5, #44]	; 0x2c
   166a8:	mov	r2, r8
   166ac:	mov	r1, fp
   166b0:	str	r0, [sl, #4]
   166b4:	mov	r7, r0
   166b8:	str	r3, [sp, #16]
   166bc:	ldr	r3, [r5, #40]	; 0x28
   166c0:	str	r3, [sp, #12]
   166c4:	add	r3, r5, #8
   166c8:	str	r3, [sp, #8]
   166cc:	ldr	r3, [sp, #28]
   166d0:	str	r3, [sp, #4]
   166d4:	ldr	r3, [r5]
   166d8:	str	r3, [sp]
   166dc:	mov	r3, r9
   166e0:	bl	1586c <__assert_fail@plt+0x4328>
   166e4:	ldr	r3, [sp, #24]
   166e8:	mov	r0, r7
   166ec:	ldr	r2, [sp, #32]
   166f0:	str	r2, [r3]
   166f4:	add	sp, sp, #52	; 0x34
   166f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166fc:	andeq	fp, r2, r0, ror r1
   16700:			; <UNDEFINED> instruction: 0x0002b2b0
   16704:	push	{r4, r5, r6, lr}
   16708:	mov	r5, r0
   1670c:	bl	113c4 <__errno_location@plt>
   16710:	mov	r4, r0
   16714:	cmp	r5, #0
   16718:	ldr	r0, [pc, #20]	; 16734 <__assert_fail@plt+0x51f0>
   1671c:	mov	r1, #48	; 0x30
   16720:	movne	r0, r5
   16724:	ldr	r6, [r4]
   16728:	bl	17450 <__assert_fail@plt+0x5f0c>
   1672c:	str	r6, [r4]
   16730:	pop	{r4, r5, r6, pc}
   16734:			; <UNDEFINED> instruction: 0x0002b3b0
   16738:	ldr	r3, [pc, #12]	; 1674c <__assert_fail@plt+0x5208>
   1673c:	cmp	r0, #0
   16740:	moveq	r0, r3
   16744:	ldr	r0, [r0]
   16748:	bx	lr
   1674c:			; <UNDEFINED> instruction: 0x0002b3b0
   16750:	ldr	r3, [pc, #12]	; 16764 <__assert_fail@plt+0x5220>
   16754:	cmp	r0, #0
   16758:	moveq	r0, r3
   1675c:	str	r1, [r0]
   16760:	bx	lr
   16764:			; <UNDEFINED> instruction: 0x0002b3b0
   16768:	ldr	r3, [pc, #52]	; 167a4 <__assert_fail@plt+0x5260>
   1676c:	cmp	r0, #0
   16770:	push	{lr}		; (str lr, [sp, #-4]!)
   16774:	lsr	lr, r1, #5
   16778:	and	r1, r1, #31
   1677c:	moveq	r0, r3
   16780:	add	r3, r0, #8
   16784:	ldr	ip, [r3, lr, lsl #2]
   16788:	lsr	r0, ip, r1
   1678c:	eor	r2, r2, r0
   16790:	and	r0, r0, #1
   16794:	and	r2, r2, #1
   16798:	eor	r1, ip, r2, lsl r1
   1679c:	str	r1, [r3, lr, lsl #2]
   167a0:	pop	{pc}		; (ldr pc, [sp], #4)
   167a4:			; <UNDEFINED> instruction: 0x0002b3b0
   167a8:	ldr	r3, [pc, #16]	; 167c0 <__assert_fail@plt+0x527c>
   167ac:	cmp	r0, #0
   167b0:	movne	r3, r0
   167b4:	ldr	r0, [r3, #4]
   167b8:	str	r1, [r3, #4]
   167bc:	bx	lr
   167c0:			; <UNDEFINED> instruction: 0x0002b3b0
   167c4:	ldr	r3, [pc, #44]	; 167f8 <__assert_fail@plt+0x52b4>
   167c8:	cmp	r0, #0
   167cc:	moveq	r0, r3
   167d0:	mov	r3, #10
   167d4:	cmp	r2, #0
   167d8:	cmpne	r1, #0
   167dc:	str	r3, [r0]
   167e0:	bne	167ec <__assert_fail@plt+0x52a8>
   167e4:	push	{r4, lr}
   167e8:	bl	11514 <abort@plt>
   167ec:	str	r1, [r0, #40]	; 0x28
   167f0:	str	r2, [r0, #44]	; 0x2c
   167f4:	bx	lr
   167f8:			; <UNDEFINED> instruction: 0x0002b3b0
   167fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16800:	sub	sp, sp, #24
   16804:	mov	sl, r3
   16808:	mov	r7, r0
   1680c:	mov	r8, r1
   16810:	mov	r9, r2
   16814:	ldr	r4, [sp, #56]	; 0x38
   16818:	ldr	r3, [pc, #88]	; 16878 <__assert_fail@plt+0x5334>
   1681c:	cmp	r4, #0
   16820:	moveq	r4, r3
   16824:	bl	113c4 <__errno_location@plt>
   16828:	ldr	r3, [r4, #44]	; 0x2c
   1682c:	mov	r5, r0
   16830:	mov	r2, r9
   16834:	mov	r1, r8
   16838:	mov	r0, r7
   1683c:	ldr	r6, [r5]
   16840:	str	r3, [sp, #16]
   16844:	ldr	r3, [r4, #40]	; 0x28
   16848:	str	r3, [sp, #12]
   1684c:	add	r3, r4, #8
   16850:	str	r3, [sp, #8]
   16854:	ldr	r3, [r4, #4]
   16858:	str	r3, [sp, #4]
   1685c:	ldr	r3, [r4]
   16860:	str	r3, [sp]
   16864:	mov	r3, sl
   16868:	bl	1586c <__assert_fail@plt+0x4328>
   1686c:	str	r6, [r5]
   16870:	add	sp, sp, #24
   16874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16878:			; <UNDEFINED> instruction: 0x0002b3b0
   1687c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16880:	cmp	r3, #0
   16884:	sub	sp, sp, #44	; 0x2c
   16888:	mov	r6, r2
   1688c:	mov	sl, r1
   16890:	mov	r9, r0
   16894:	ldr	r4, [pc, #176]	; 1694c <__assert_fail@plt+0x5408>
   16898:	movne	r4, r3
   1689c:	bl	113c4 <__errno_location@plt>
   168a0:	ldr	r3, [r0]
   168a4:	mov	r1, #0
   168a8:	mov	r2, r9
   168ac:	mov	r8, r0
   168b0:	mov	r0, r1
   168b4:	ldr	r5, [r4, #4]
   168b8:	add	fp, r4, #8
   168bc:	str	r3, [sp, #28]
   168c0:	ldr	r3, [r4, #44]	; 0x2c
   168c4:	cmp	r6, #0
   168c8:	orreq	r5, r5, #1
   168cc:	str	r3, [sp, #16]
   168d0:	ldr	r3, [r4, #40]	; 0x28
   168d4:	stmib	sp, {r5, fp}
   168d8:	str	r3, [sp, #12]
   168dc:	ldr	r3, [r4]
   168e0:	str	r3, [sp]
   168e4:	mov	r3, sl
   168e8:	bl	1586c <__assert_fail@plt+0x4328>
   168ec:	add	r1, r0, #1
   168f0:	mov	r7, r0
   168f4:	mov	r0, r1
   168f8:	str	r1, [sp, #36]	; 0x24
   168fc:	bl	17250 <__assert_fail@plt+0x5d0c>
   16900:	ldr	r3, [r4, #44]	; 0x2c
   16904:	mov	r2, r9
   16908:	ldr	r1, [sp, #36]	; 0x24
   1690c:	str	r3, [sp, #16]
   16910:	ldr	r3, [r4, #40]	; 0x28
   16914:	stmib	sp, {r5, fp}
   16918:	str	r0, [sp, #32]
   1691c:	str	r3, [sp, #12]
   16920:	ldr	r3, [r4]
   16924:	str	r3, [sp]
   16928:	mov	r3, sl
   1692c:	bl	1586c <__assert_fail@plt+0x4328>
   16930:	ldr	r3, [sp, #28]
   16934:	cmp	r6, #0
   16938:	ldr	r0, [sp, #32]
   1693c:	str	r3, [r8]
   16940:	strne	r7, [r6]
   16944:	add	sp, sp, #44	; 0x2c
   16948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1694c:			; <UNDEFINED> instruction: 0x0002b3b0
   16950:	mov	r3, r2
   16954:	mov	r2, #0
   16958:	b	1687c <__assert_fail@plt+0x5338>
   1695c:	push	{r4, r5, r6, r7, r8, lr}
   16960:	mov	r6, #1
   16964:	ldr	r4, [pc, #100]	; 169d0 <__assert_fail@plt+0x548c>
   16968:	ldr	r5, [r4]
   1696c:	add	r7, r5, #4
   16970:	ldr	r3, [r4, #4]
   16974:	cmp	r3, r6
   16978:	bgt	169c0 <__assert_fail@plt+0x547c>
   1697c:	ldr	r6, [pc, #80]	; 169d4 <__assert_fail@plt+0x5490>
   16980:	ldr	r0, [r5, #4]
   16984:	cmp	r0, r6
   16988:	beq	1699c <__assert_fail@plt+0x5458>
   1698c:	bl	17b64 <__assert_fail@plt+0x6620>
   16990:	mov	r3, #256	; 0x100
   16994:	str	r3, [r4, #8]
   16998:	str	r6, [r4, #12]
   1699c:	ldr	r6, [pc, #52]	; 169d8 <__assert_fail@plt+0x5494>
   169a0:	cmp	r5, r6
   169a4:	beq	169b4 <__assert_fail@plt+0x5470>
   169a8:	mov	r0, r5
   169ac:	bl	17b64 <__assert_fail@plt+0x6620>
   169b0:	str	r6, [r4]
   169b4:	mov	r3, #1
   169b8:	str	r3, [r4, #4]
   169bc:	pop	{r4, r5, r6, r7, r8, pc}
   169c0:	ldr	r0, [r7, r6, lsl #3]
   169c4:	add	r6, r6, #1
   169c8:	bl	17b64 <__assert_fail@plt+0x6620>
   169cc:	b	16970 <__assert_fail@plt+0x542c>
   169d0:	andeq	fp, r2, r0, ror r1
   169d4:			; <UNDEFINED> instruction: 0x0002b2b0
   169d8:	andeq	fp, r2, r8, ror r1
   169dc:	ldr	r3, [pc, #4]	; 169e8 <__assert_fail@plt+0x54a4>
   169e0:	mvn	r2, #0
   169e4:	b	1655c <__assert_fail@plt+0x5018>
   169e8:			; <UNDEFINED> instruction: 0x0002b3b0
   169ec:	ldr	r3, [pc]	; 169f4 <__assert_fail@plt+0x54b0>
   169f0:	b	1655c <__assert_fail@plt+0x5018>
   169f4:			; <UNDEFINED> instruction: 0x0002b3b0
   169f8:	mov	r1, r0
   169fc:	mov	r0, #0
   16a00:	b	169dc <__assert_fail@plt+0x5498>
   16a04:	mov	r2, r1
   16a08:	mov	r1, r0
   16a0c:	mov	r0, #0
   16a10:	b	169ec <__assert_fail@plt+0x54a8>
   16a14:	push	{r4, r5, lr}
   16a18:	sub	sp, sp, #52	; 0x34
   16a1c:	mov	r5, r2
   16a20:	mov	r4, r0
   16a24:	mov	r0, sp
   16a28:	bl	15710 <__assert_fail@plt+0x41cc>
   16a2c:	mov	r3, sp
   16a30:	mvn	r2, #0
   16a34:	mov	r1, r5
   16a38:	mov	r0, r4
   16a3c:	bl	1655c <__assert_fail@plt+0x5018>
   16a40:	add	sp, sp, #52	; 0x34
   16a44:	pop	{r4, r5, pc}
   16a48:	push	{r4, r5, r6, lr}
   16a4c:	sub	sp, sp, #48	; 0x30
   16a50:	mov	r5, r2
   16a54:	mov	r6, r3
   16a58:	mov	r4, r0
   16a5c:	mov	r0, sp
   16a60:	bl	15710 <__assert_fail@plt+0x41cc>
   16a64:	mov	r3, sp
   16a68:	mov	r2, r6
   16a6c:	mov	r1, r5
   16a70:	mov	r0, r4
   16a74:	bl	1655c <__assert_fail@plt+0x5018>
   16a78:	add	sp, sp, #48	; 0x30
   16a7c:	pop	{r4, r5, r6, pc}
   16a80:	mov	r2, r1
   16a84:	mov	r1, r0
   16a88:	mov	r0, #0
   16a8c:	b	16a14 <__assert_fail@plt+0x54d0>
   16a90:	mov	r3, r2
   16a94:	mov	r2, r1
   16a98:	mov	r1, r0
   16a9c:	mov	r0, #0
   16aa0:	b	16a48 <__assert_fail@plt+0x5504>
   16aa4:	push	{r4, r5, r6, lr}
   16aa8:	mov	r4, r0
   16aac:	mov	r5, r1
   16ab0:	mov	r6, r2
   16ab4:	sub	sp, sp, #48	; 0x30
   16ab8:	mov	ip, sp
   16abc:	ldr	lr, [pc, #64]	; 16b04 <__assert_fail@plt+0x55c0>
   16ac0:	ldm	lr!, {r0, r1, r2, r3}
   16ac4:	stmia	ip!, {r0, r1, r2, r3}
   16ac8:	ldm	lr!, {r0, r1, r2, r3}
   16acc:	stmia	ip!, {r0, r1, r2, r3}
   16ad0:	ldm	lr, {r0, r1, r2, r3}
   16ad4:	stm	ip, {r0, r1, r2, r3}
   16ad8:	mov	r1, r6
   16adc:	mov	r2, #1
   16ae0:	mov	r0, sp
   16ae4:	bl	16768 <__assert_fail@plt+0x5224>
   16ae8:	mov	r3, sp
   16aec:	mov	r2, r5
   16af0:	mov	r1, r4
   16af4:	mov	r0, #0
   16af8:	bl	1655c <__assert_fail@plt+0x5018>
   16afc:	add	sp, sp, #48	; 0x30
   16b00:	pop	{r4, r5, r6, pc}
   16b04:			; <UNDEFINED> instruction: 0x0002b3b0
   16b08:	mov	r2, r1
   16b0c:	mvn	r1, #0
   16b10:	b	16aa4 <__assert_fail@plt+0x5560>
   16b14:	mov	r1, #58	; 0x3a
   16b18:	b	16b08 <__assert_fail@plt+0x55c4>
   16b1c:	mov	r2, #58	; 0x3a
   16b20:	b	16aa4 <__assert_fail@plt+0x5560>
   16b24:	push	{r4, r5, lr}
   16b28:	sub	sp, sp, #100	; 0x64
   16b2c:	mov	r4, r0
   16b30:	mov	r0, sp
   16b34:	mov	r5, r2
   16b38:	bl	15710 <__assert_fail@plt+0x41cc>
   16b3c:	mov	ip, sp
   16b40:	add	lr, sp, #48	; 0x30
   16b44:	ldm	ip!, {r0, r1, r2, r3}
   16b48:	stmia	lr!, {r0, r1, r2, r3}
   16b4c:	ldm	ip!, {r0, r1, r2, r3}
   16b50:	stmia	lr!, {r0, r1, r2, r3}
   16b54:	ldm	ip, {r0, r1, r2, r3}
   16b58:	stm	lr, {r0, r1, r2, r3}
   16b5c:	mov	r2, #1
   16b60:	mov	r1, #58	; 0x3a
   16b64:	add	r0, sp, #48	; 0x30
   16b68:	bl	16768 <__assert_fail@plt+0x5224>
   16b6c:	add	r3, sp, #48	; 0x30
   16b70:	mvn	r2, #0
   16b74:	mov	r1, r5
   16b78:	mov	r0, r4
   16b7c:	bl	1655c <__assert_fail@plt+0x5018>
   16b80:	add	sp, sp, #100	; 0x64
   16b84:	pop	{r4, r5, pc}
   16b88:	push	{r4, r5, r6, r7, lr}
   16b8c:	mov	r4, r0
   16b90:	mov	r6, r1
   16b94:	mov	r7, r2
   16b98:	mov	r5, r3
   16b9c:	sub	sp, sp, #52	; 0x34
   16ba0:	ldr	lr, [pc, #68]	; 16bec <__assert_fail@plt+0x56a8>
   16ba4:	mov	ip, sp
   16ba8:	ldm	lr!, {r0, r1, r2, r3}
   16bac:	stmia	ip!, {r0, r1, r2, r3}
   16bb0:	ldm	lr!, {r0, r1, r2, r3}
   16bb4:	stmia	ip!, {r0, r1, r2, r3}
   16bb8:	ldm	lr, {r0, r1, r2, r3}
   16bbc:	stm	ip, {r0, r1, r2, r3}
   16bc0:	mov	r2, r7
   16bc4:	mov	r1, r6
   16bc8:	mov	r0, sp
   16bcc:	bl	167c4 <__assert_fail@plt+0x5280>
   16bd0:	ldr	r2, [sp, #72]	; 0x48
   16bd4:	mov	r3, sp
   16bd8:	mov	r1, r5
   16bdc:	mov	r0, r4
   16be0:	bl	1655c <__assert_fail@plt+0x5018>
   16be4:	add	sp, sp, #52	; 0x34
   16be8:	pop	{r4, r5, r6, r7, pc}
   16bec:			; <UNDEFINED> instruction: 0x0002b3b0
   16bf0:	mvn	ip, #0
   16bf4:	push	{r0, r1, r2, lr}
   16bf8:	str	ip, [sp]
   16bfc:	bl	16b88 <__assert_fail@plt+0x5644>
   16c00:	add	sp, sp, #12
   16c04:	pop	{pc}		; (ldr pc, [sp], #4)
   16c08:	mov	r3, r2
   16c0c:	mov	r2, r1
   16c10:	mov	r1, r0
   16c14:	mov	r0, #0
   16c18:	b	16bf0 <__assert_fail@plt+0x56ac>
   16c1c:	push	{r0, r1, r2, lr}
   16c20:	str	r3, [sp]
   16c24:	mov	r3, r2
   16c28:	mov	r2, r1
   16c2c:	mov	r1, r0
   16c30:	mov	r0, #0
   16c34:	bl	16b88 <__assert_fail@plt+0x5644>
   16c38:	add	sp, sp, #12
   16c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c40:	ldr	r3, [pc]	; 16c48 <__assert_fail@plt+0x5704>
   16c44:	b	1655c <__assert_fail@plt+0x5018>
   16c48:	andeq	fp, r2, r0, lsl #3
   16c4c:	mov	r2, r1
   16c50:	mov	r1, r0
   16c54:	mov	r0, #0
   16c58:	b	16c40 <__assert_fail@plt+0x56fc>
   16c5c:	mvn	r2, #0
   16c60:	b	16c40 <__assert_fail@plt+0x56fc>
   16c64:	mov	r1, r0
   16c68:	mov	r0, #0
   16c6c:	b	16c5c <__assert_fail@plt+0x5718>
   16c70:	push	{r4, r5, r6, r7, r8, lr}
   16c74:	mov	r7, r0
   16c78:	mov	r8, r1
   16c7c:	mov	r4, r2
   16c80:	ldr	r5, [pc, #80]	; 16cd8 <__assert_fail@plt+0x5794>
   16c84:	mov	r2, r4
   16c88:	mov	r1, r8
   16c8c:	mov	r0, r7
   16c90:	bl	111b4 <read@plt>
   16c94:	subs	r6, r0, #0
   16c98:	bge	16cc8 <__assert_fail@plt+0x5784>
   16c9c:	bl	113c4 <__errno_location@plt>
   16ca0:	ldr	r2, [r0]
   16ca4:	cmp	r2, #4
   16ca8:	beq	16c84 <__assert_fail@plt+0x5740>
   16cac:	sub	r3, r2, #22
   16cb0:	cmp	r4, r5
   16cb4:	clz	r3, r3
   16cb8:	lsr	r3, r3, #5
   16cbc:	movls	r3, #0
   16cc0:	cmp	r3, #0
   16cc4:	bne	16cd0 <__assert_fail@plt+0x578c>
   16cc8:	mov	r0, r6
   16ccc:	pop	{r4, r5, r6, r7, r8, pc}
   16cd0:	mov	r4, r5
   16cd4:	b	16c84 <__assert_fail@plt+0x5740>
   16cd8:	svcvc	0x00f00000	; IMB
   16cdc:	push	{r4, r5, r6, lr}
   16ce0:	mov	r2, r1
   16ce4:	mov	r4, r1
   16ce8:	mov	r1, #0
   16cec:	mov	r5, r0
   16cf0:	bl	11418 <memchr@plt>
   16cf4:	cmp	r0, #0
   16cf8:	subne	r4, r0, r5
   16cfc:	addne	r4, r4, #1
   16d00:	mov	r0, r4
   16d04:	pop	{r4, r5, r6, pc}
   16d08:	cmp	r0, #2
   16d0c:	push	{r4, r5, r6, r7, r8, lr}
   16d10:	mov	r4, r0
   16d14:	bhi	16d3c <__assert_fail@plt+0x57f8>
   16d18:	bl	18078 <__assert_fail@plt+0x6b34>
   16d1c:	mov	r6, r0
   16d20:	bl	113c4 <__errno_location@plt>
   16d24:	mov	r5, r0
   16d28:	mov	r0, r4
   16d2c:	ldr	r7, [r5]
   16d30:	mov	r4, r6
   16d34:	bl	1152c <close@plt>
   16d38:	str	r7, [r5]
   16d3c:	mov	r0, r4
   16d40:	pop	{r4, r5, r6, r7, r8, pc}
   16d44:	push	{r4, r5, r6, r7, r8, lr}
   16d48:	mov	r5, r0
   16d4c:	bl	1143c <pipe@plt>
   16d50:	subs	r4, r0, #0
   16d54:	bne	16da0 <__assert_fail@plt+0x585c>
   16d58:	ldr	r0, [r5]
   16d5c:	bl	16d08 <__assert_fail@plt+0x57c4>
   16d60:	cmp	r0, #0
   16d64:	str	r0, [r5]
   16d68:	blt	16d84 <__assert_fail@plt+0x5840>
   16d6c:	ldr	r0, [r5, #4]
   16d70:	bl	16d08 <__assert_fail@plt+0x57c4>
   16d74:	cmp	r0, #0
   16d78:	str	r0, [r5, #4]
   16d7c:	bge	16da4 <__assert_fail@plt+0x5860>
   16d80:	mov	r4, #1
   16d84:	bl	113c4 <__errno_location@plt>
   16d88:	mov	r6, r0
   16d8c:	rsb	r4, r4, #1
   16d90:	ldr	r7, [r6]
   16d94:	ldr	r0, [r5, r4, lsl #2]
   16d98:	bl	1152c <close@plt>
   16d9c:	str	r7, [r6]
   16da0:	mvn	r4, #0
   16da4:	mov	r0, r4
   16da8:	pop	{r4, r5, r6, r7, r8, pc}
   16dac:	push	{r4, r5, r6, lr}
   16db0:	cmp	r1, #0
   16db4:	sub	sp, sp, #32
   16db8:	mov	r5, r0
   16dbc:	ldr	r4, [sp, #48]	; 0x30
   16dc0:	ldr	r6, [sp, #52]	; 0x34
   16dc4:	beq	16e70 <__assert_fail@plt+0x592c>
   16dc8:	mov	lr, r3
   16dcc:	mov	r3, r2
   16dd0:	mov	r2, r1
   16dd4:	ldr	r1, [pc, #740]	; 170c0 <__assert_fail@plt+0x5b7c>
   16dd8:	str	lr, [sp]
   16ddc:	bl	113b8 <fprintf@plt>
   16de0:	mov	r2, #5
   16de4:	ldr	r1, [pc, #728]	; 170c4 <__assert_fail@plt+0x5b80>
   16de8:	mov	r0, #0
   16dec:	bl	11238 <dcgettext@plt>
   16df0:	mov	r2, r0
   16df4:	movw	r3, #2022	; 0x7e6
   16df8:	ldr	r1, [pc, #712]	; 170c8 <__assert_fail@plt+0x5b84>
   16dfc:	mov	r0, r5
   16e00:	bl	113b8 <fprintf@plt>
   16e04:	mov	r1, r5
   16e08:	mov	r0, #10
   16e0c:	bl	1149c <fputc@plt>
   16e10:	mov	r2, #5
   16e14:	ldr	r1, [pc, #688]	; 170cc <__assert_fail@plt+0x5b88>
   16e18:	mov	r0, #0
   16e1c:	bl	11238 <dcgettext@plt>
   16e20:	mov	r1, r0
   16e24:	ldr	r2, [pc, #676]	; 170d0 <__assert_fail@plt+0x5b8c>
   16e28:	mov	r0, r5
   16e2c:	bl	113b8 <fprintf@plt>
   16e30:	mov	r1, r5
   16e34:	mov	r0, #10
   16e38:	bl	1149c <fputc@plt>
   16e3c:	cmp	r6, #9
   16e40:	ldrls	pc, [pc, r6, lsl #2]
   16e44:	b	170b4 <__assert_fail@plt+0x5b70>
   16e48:	andeq	r6, r1, ip, ror #30
   16e4c:	andeq	r6, r1, ip, ror lr
   16e50:	andeq	r6, r1, r4, lsr #29
   16e54:	andeq	r6, r1, ip, asr #29
   16e58:	strdeq	r6, [r1], -ip
   16e5c:	andeq	r6, r1, r4, lsr pc
   16e60:	andeq	r6, r1, r4, ror pc
   16e64:			; <UNDEFINED> instruction: 0x00016fb8
   16e68:	andeq	r7, r1, r4
   16e6c:	andeq	r7, r1, r8, asr r0
   16e70:	ldr	r1, [pc, #604]	; 170d4 <__assert_fail@plt+0x5b90>
   16e74:	bl	113b8 <fprintf@plt>
   16e78:	b	16de0 <__assert_fail@plt+0x589c>
   16e7c:	mov	r2, #5
   16e80:	ldr	r1, [pc, #592]	; 170d8 <__assert_fail@plt+0x5b94>
   16e84:	mov	r0, #0
   16e88:	bl	11238 <dcgettext@plt>
   16e8c:	ldr	r2, [r4]
   16e90:	mov	r1, r0
   16e94:	mov	r0, r5
   16e98:	add	sp, sp, #32
   16e9c:	pop	{r4, r5, r6, lr}
   16ea0:	b	113b8 <fprintf@plt>
   16ea4:	mov	r2, #5
   16ea8:	ldr	r1, [pc, #556]	; 170dc <__assert_fail@plt+0x5b98>
   16eac:	mov	r0, #0
   16eb0:	bl	11238 <dcgettext@plt>
   16eb4:	ldrd	r2, [r4]
   16eb8:	mov	r1, r0
   16ebc:	mov	r0, r5
   16ec0:	add	sp, sp, #32
   16ec4:	pop	{r4, r5, r6, lr}
   16ec8:	b	113b8 <fprintf@plt>
   16ecc:	mov	r2, #5
   16ed0:	ldr	r1, [pc, #520]	; 170e0 <__assert_fail@plt+0x5b9c>
   16ed4:	mov	r0, #0
   16ed8:	bl	11238 <dcgettext@plt>
   16edc:	ldr	r3, [r4, #8]
   16ee0:	mov	r1, r0
   16ee4:	mov	r0, r5
   16ee8:	str	r3, [sp, #48]	; 0x30
   16eec:	ldrd	r2, [r4]
   16ef0:	add	sp, sp, #32
   16ef4:	pop	{r4, r5, r6, lr}
   16ef8:	b	113b8 <fprintf@plt>
   16efc:	mov	r2, #5
   16f00:	ldr	r1, [pc, #476]	; 170e4 <__assert_fail@plt+0x5ba0>
   16f04:	mov	r0, #0
   16f08:	bl	11238 <dcgettext@plt>
   16f0c:	ldr	r3, [r4, #12]
   16f10:	mov	r1, r0
   16f14:	mov	r0, r5
   16f18:	str	r3, [sp, #52]	; 0x34
   16f1c:	ldr	r3, [r4, #8]
   16f20:	str	r3, [sp, #48]	; 0x30
   16f24:	ldrd	r2, [r4]
   16f28:	add	sp, sp, #32
   16f2c:	pop	{r4, r5, r6, lr}
   16f30:	b	113b8 <fprintf@plt>
   16f34:	mov	r2, #5
   16f38:	ldr	r1, [pc, #424]	; 170e8 <__assert_fail@plt+0x5ba4>
   16f3c:	mov	r0, #0
   16f40:	bl	11238 <dcgettext@plt>
   16f44:	ldr	r3, [r4, #16]
   16f48:	mov	r1, r0
   16f4c:	mov	r0, r5
   16f50:	str	r3, [sp, #8]
   16f54:	ldr	r3, [r4, #12]
   16f58:	str	r3, [sp, #4]
   16f5c:	ldr	r3, [r4, #8]
   16f60:	str	r3, [sp]
   16f64:	ldrd	r2, [r4]
   16f68:	bl	113b8 <fprintf@plt>
   16f6c:	add	sp, sp, #32
   16f70:	pop	{r4, r5, r6, pc}
   16f74:	mov	r2, #5
   16f78:	ldr	r1, [pc, #364]	; 170ec <__assert_fail@plt+0x5ba8>
   16f7c:	mov	r0, #0
   16f80:	bl	11238 <dcgettext@plt>
   16f84:	ldr	r3, [r4, #20]
   16f88:	mov	r1, r0
   16f8c:	mov	r0, r5
   16f90:	str	r3, [sp, #12]
   16f94:	ldr	r3, [r4, #16]
   16f98:	str	r3, [sp, #8]
   16f9c:	ldr	r3, [r4, #12]
   16fa0:	str	r3, [sp, #4]
   16fa4:	ldr	r3, [r4, #8]
   16fa8:	str	r3, [sp]
   16fac:	ldrd	r2, [r4]
   16fb0:	bl	113b8 <fprintf@plt>
   16fb4:	b	16f6c <__assert_fail@plt+0x5a28>
   16fb8:	mov	r2, #5
   16fbc:	ldr	r1, [pc, #300]	; 170f0 <__assert_fail@plt+0x5bac>
   16fc0:	mov	r0, #0
   16fc4:	bl	11238 <dcgettext@plt>
   16fc8:	ldr	r3, [r4, #24]
   16fcc:	mov	r1, r0
   16fd0:	mov	r0, r5
   16fd4:	str	r3, [sp, #16]
   16fd8:	ldr	r3, [r4, #20]
   16fdc:	str	r3, [sp, #12]
   16fe0:	ldr	r3, [r4, #16]
   16fe4:	str	r3, [sp, #8]
   16fe8:	ldr	r3, [r4, #12]
   16fec:	str	r3, [sp, #4]
   16ff0:	ldr	r3, [r4, #8]
   16ff4:	str	r3, [sp]
   16ff8:	ldrd	r2, [r4]
   16ffc:	bl	113b8 <fprintf@plt>
   17000:	b	16f6c <__assert_fail@plt+0x5a28>
   17004:	mov	r2, #5
   17008:	ldr	r1, [pc, #228]	; 170f4 <__assert_fail@plt+0x5bb0>
   1700c:	mov	r0, #0
   17010:	bl	11238 <dcgettext@plt>
   17014:	ldr	r3, [r4, #28]
   17018:	mov	r1, r0
   1701c:	mov	r0, r5
   17020:	str	r3, [sp, #20]
   17024:	ldr	r3, [r4, #24]
   17028:	str	r3, [sp, #16]
   1702c:	ldr	r3, [r4, #20]
   17030:	str	r3, [sp, #12]
   17034:	ldr	r3, [r4, #16]
   17038:	str	r3, [sp, #8]
   1703c:	ldr	r3, [r4, #12]
   17040:	str	r3, [sp, #4]
   17044:	ldr	r3, [r4, #8]
   17048:	str	r3, [sp]
   1704c:	ldrd	r2, [r4]
   17050:	bl	113b8 <fprintf@plt>
   17054:	b	16f6c <__assert_fail@plt+0x5a28>
   17058:	ldr	r1, [pc, #152]	; 170f8 <__assert_fail@plt+0x5bb4>
   1705c:	mov	r2, #5
   17060:	mov	r0, #0
   17064:	bl	11238 <dcgettext@plt>
   17068:	ldr	r3, [r4, #32]
   1706c:	mov	r1, r0
   17070:	mov	r0, r5
   17074:	str	r3, [sp, #24]
   17078:	ldr	r3, [r4, #28]
   1707c:	str	r3, [sp, #20]
   17080:	ldr	r3, [r4, #24]
   17084:	str	r3, [sp, #16]
   17088:	ldr	r3, [r4, #20]
   1708c:	str	r3, [sp, #12]
   17090:	ldr	r3, [r4, #16]
   17094:	str	r3, [sp, #8]
   17098:	ldr	r3, [r4, #12]
   1709c:	str	r3, [sp, #4]
   170a0:	ldr	r3, [r4, #8]
   170a4:	str	r3, [sp]
   170a8:	ldrd	r2, [r4]
   170ac:	bl	113b8 <fprintf@plt>
   170b0:	b	16f6c <__assert_fail@plt+0x5a28>
   170b4:	mov	r2, #5
   170b8:	ldr	r1, [pc, #60]	; 170fc <__assert_fail@plt+0x5bb8>
   170bc:	b	17060 <__assert_fail@plt+0x5b1c>
   170c0:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   170c4:	andeq	r9, r1, sl, lsr #31
   170c8:	andeq	sl, r1, r2, ror #4
   170cc:	andeq	r9, r1, lr, lsr #31
   170d0:	andeq	sl, r1, r9, asr r0
   170d4:	andeq	r9, r1, r3, lsr #31
   170d8:	andeq	sl, r1, fp, ror r0
   170dc:	andeq	sl, r1, fp, lsl #1
   170e0:	andeq	sl, r1, r2, lsr #1
   170e4:	strheq	sl, [r1], -lr
   170e8:	ldrdeq	sl, [r1], -lr
   170ec:	andeq	sl, r1, r2, lsl #2
   170f0:	andeq	sl, r1, sl, lsr #2
   170f4:	andeq	sl, r1, r6, asr r1
   170f8:	andeq	sl, r1, r6, lsl #3
   170fc:			; <UNDEFINED> instruction: 0x0001a1ba
   17100:	push	{r0, r1, r4, lr}
   17104:	mov	ip, #0
   17108:	ldr	lr, [sp, #16]
   1710c:	ldr	r4, [lr, ip, lsl #2]
   17110:	cmp	r4, #0
   17114:	bne	1712c <__assert_fail@plt+0x5be8>
   17118:	str	lr, [sp]
   1711c:	str	ip, [sp, #4]
   17120:	bl	16dac <__assert_fail@plt+0x5868>
   17124:	add	sp, sp, #8
   17128:	pop	{r4, pc}
   1712c:	add	ip, ip, #1
   17130:	b	1710c <__assert_fail@plt+0x5bc8>
   17134:	push	{r4, r5, r6, lr}
   17138:	sub	sp, sp, #48	; 0x30
   1713c:	mov	ip, #0
   17140:	add	lr, sp, #8
   17144:	mov	r5, lr
   17148:	ldr	r6, [sp, #64]	; 0x40
   1714c:	ldr	r4, [r6, ip, lsl #2]
   17150:	cmp	r4, #0
   17154:	str	r4, [lr], #4
   17158:	beq	17168 <__assert_fail@plt+0x5c24>
   1715c:	add	ip, ip, #1
   17160:	cmp	ip, #10
   17164:	bne	1714c <__assert_fail@plt+0x5c08>
   17168:	stm	sp, {r5, ip}
   1716c:	bl	16dac <__assert_fail@plt+0x5868>
   17170:	add	sp, sp, #48	; 0x30
   17174:	pop	{r4, r5, r6, pc}
   17178:	push	{r3}		; (str r3, [sp, #-4]!)
   1717c:	push	{r0, r1, r2, r3, lr}
   17180:	add	r3, sp, #24
   17184:	str	r3, [sp]
   17188:	str	r3, [sp, #12]
   1718c:	ldr	r3, [sp, #20]
   17190:	bl	17134 <__assert_fail@plt+0x5bf0>
   17194:	add	sp, sp, #16
   17198:	pop	{lr}		; (ldr lr, [sp], #4)
   1719c:	add	sp, sp, #4
   171a0:	bx	lr
   171a4:	ldr	r3, [pc, #92]	; 17208 <__assert_fail@plt+0x5cc4>
   171a8:	mov	r0, #10
   171ac:	push	{r4, lr}
   171b0:	ldr	r1, [r3]
   171b4:	bl	1149c <fputc@plt>
   171b8:	mov	r2, #5
   171bc:	ldr	r1, [pc, #72]	; 1720c <__assert_fail@plt+0x5cc8>
   171c0:	mov	r0, #0
   171c4:	bl	11238 <dcgettext@plt>
   171c8:	ldr	r1, [pc, #64]	; 17210 <__assert_fail@plt+0x5ccc>
   171cc:	bl	111a8 <printf@plt>
   171d0:	mov	r2, #5
   171d4:	ldr	r1, [pc, #56]	; 17214 <__assert_fail@plt+0x5cd0>
   171d8:	mov	r0, #0
   171dc:	bl	11238 <dcgettext@plt>
   171e0:	ldr	r2, [pc, #48]	; 17218 <__assert_fail@plt+0x5cd4>
   171e4:	ldr	r1, [pc, #48]	; 1721c <__assert_fail@plt+0x5cd8>
   171e8:	bl	111a8 <printf@plt>
   171ec:	ldr	r1, [pc, #44]	; 17220 <__assert_fail@plt+0x5cdc>
   171f0:	mov	r2, #5
   171f4:	mov	r0, #0
   171f8:	bl	11238 <dcgettext@plt>
   171fc:	ldr	r1, [pc, #32]	; 17224 <__assert_fail@plt+0x5ce0>
   17200:	pop	{r4, lr}
   17204:	b	111a8 <printf@plt>
   17208:	ldrdeq	fp, [r2], -r4
   1720c:	strdeq	sl, [r1], -r6
   17210:	andeq	r9, r1, r4, lsr #27
   17214:	andeq	sl, r1, sl, lsl #4
   17218:	andeq	r9, r1, sp, ror sp
   1721c:	andeq	r9, r1, r0, ror #24
   17220:	andeq	sl, r1, lr, lsl r2
   17224:	andeq	sl, r1, r5, asr #4
   17228:	push	{r4, lr}
   1722c:	bl	17c4c <__assert_fail@plt+0x6708>
   17230:	cmp	r0, #0
   17234:	popne	{r4, pc}
   17238:	bl	174e0 <__assert_fail@plt+0x5f9c>
   1723c:	push	{r4, lr}
   17240:	bl	17c4c <__assert_fail@plt+0x6708>
   17244:	cmp	r0, #0
   17248:	popne	{r4, pc}
   1724c:	bl	174e0 <__assert_fail@plt+0x5f9c>
   17250:	b	17228 <__assert_fail@plt+0x5ce4>
   17254:	push	{r4, r5, r6, lr}
   17258:	mov	r5, r0
   1725c:	mov	r4, r1
   17260:	bl	17cc8 <__assert_fail@plt+0x6784>
   17264:	cmp	r0, #0
   17268:	popne	{r4, r5, r6, pc}
   1726c:	adds	r4, r4, #0
   17270:	movne	r4, #1
   17274:	cmp	r5, #0
   17278:	moveq	r4, #1
   1727c:	cmp	r4, #0
   17280:	popeq	{r4, r5, r6, pc}
   17284:	bl	174e0 <__assert_fail@plt+0x5f9c>
   17288:	push	{r4, lr}
   1728c:	bl	17e08 <__assert_fail@plt+0x68c4>
   17290:	cmp	r0, #0
   17294:	popne	{r4, pc}
   17298:	bl	174e0 <__assert_fail@plt+0x5f9c>
   1729c:	push	{r4, r5, r6, lr}
   172a0:	mov	r6, r0
   172a4:	mov	r5, r1
   172a8:	mov	r4, r2
   172ac:	bl	17d0c <__assert_fail@plt+0x67c8>
   172b0:	cmp	r0, #0
   172b4:	popne	{r4, r5, r6, pc}
   172b8:	cmp	r6, #0
   172bc:	beq	172cc <__assert_fail@plt+0x5d88>
   172c0:	cmp	r5, #0
   172c4:	cmpne	r4, #0
   172c8:	popeq	{r4, r5, r6, pc}
   172cc:	bl	174e0 <__assert_fail@plt+0x5f9c>
   172d0:	b	1729c <__assert_fail@plt+0x5d58>
   172d4:	push	{r4, lr}
   172d8:	bl	17e18 <__assert_fail@plt+0x68d4>
   172dc:	cmp	r0, #0
   172e0:	popne	{r4, pc}
   172e4:	bl	174e0 <__assert_fail@plt+0x5f9c>
   172e8:	mov	r2, r1
   172ec:	mov	r1, r0
   172f0:	mov	r0, #0
   172f4:	b	1729c <__assert_fail@plt+0x5d58>
   172f8:	mov	r2, r1
   172fc:	mov	r1, r0
   17300:	mov	r0, #0
   17304:	b	172d4 <__assert_fail@plt+0x5d90>
   17308:	cmp	r0, #0
   1730c:	push	{r4, r5, r6, lr}
   17310:	mov	r5, r1
   17314:	ldr	r4, [r1]
   17318:	bne	17344 <__assert_fail@plt+0x5e00>
   1731c:	cmp	r4, #0
   17320:	bne	17334 <__assert_fail@plt+0x5df0>
   17324:	mov	r4, #64	; 0x40
   17328:	udiv	r4, r4, r2
   1732c:	cmp	r2, #64	; 0x40
   17330:	addhi	r4, r4, #1
   17334:	mov	r1, r4
   17338:	bl	1729c <__assert_fail@plt+0x5d58>
   1733c:	str	r4, [r5]
   17340:	pop	{r4, r5, r6, pc}
   17344:	lsr	r3, r4, #1
   17348:	add	r3, r3, #1
   1734c:	adds	r4, r4, r3
   17350:	bcc	17334 <__assert_fail@plt+0x5df0>
   17354:	bl	174e0 <__assert_fail@plt+0x5f9c>
   17358:	mov	r2, #1
   1735c:	b	17308 <__assert_fail@plt+0x5dc4>
   17360:	ldr	ip, [r1]
   17364:	push	{r4, r5, r6, r7, r8, lr}
   17368:	mov	r5, r1
   1736c:	mvn	r8, r3
   17370:	lsr	r8, r8, #31
   17374:	ldr	lr, [sp, #24]
   17378:	asr	r1, ip, #1
   1737c:	adds	r4, ip, r1
   17380:	mvnvs	r4, #-2147483648	; 0x80000000
   17384:	cmp	r3, r4
   17388:	movge	r1, #0
   1738c:	andlt	r1, r8, #1
   17390:	cmp	r1, #0
   17394:	movne	r4, r3
   17398:	smull	r6, r7, r4, lr
   1739c:	cmp	r7, r6, asr #31
   173a0:	bne	173b8 <__assert_fail@plt+0x5e74>
   173a4:	cmp	r6, #63	; 0x3f
   173a8:	mov	r1, r6
   173ac:	bgt	173c8 <__assert_fail@plt+0x5e84>
   173b0:	mov	r1, #64	; 0x40
   173b4:	b	173bc <__assert_fail@plt+0x5e78>
   173b8:	mvn	r1, #-2147483648	; 0x80000000
   173bc:	sdiv	r4, r1, lr
   173c0:	mls	r6, lr, r4, r1
   173c4:	sub	r1, r1, r6
   173c8:	cmp	r0, #0
   173cc:	sub	r6, r4, ip
   173d0:	streq	r0, [r5]
   173d4:	cmp	r6, r2
   173d8:	bge	1740c <__assert_fail@plt+0x5ec8>
   173dc:	adds	r4, ip, r2
   173e0:	bvs	17408 <__assert_fail@plt+0x5ec4>
   173e4:	cmp	r4, r3
   173e8:	movle	r3, #0
   173ec:	andgt	r3, r8, #1
   173f0:	cmp	r3, #0
   173f4:	bne	17408 <__assert_fail@plt+0x5ec4>
   173f8:	smull	r2, r3, r4, lr
   173fc:	cmp	r3, r2, asr #31
   17400:	mov	r1, r2
   17404:	beq	1740c <__assert_fail@plt+0x5ec8>
   17408:	bl	174e0 <__assert_fail@plt+0x5f9c>
   1740c:	bl	17254 <__assert_fail@plt+0x5d10>
   17410:	str	r4, [r5]
   17414:	pop	{r4, r5, r6, r7, r8, pc}
   17418:	push	{r4, lr}
   1741c:	bl	178d4 <__assert_fail@plt+0x6390>
   17420:	cmp	r0, #0
   17424:	popne	{r4, pc}
   17428:	bl	174e0 <__assert_fail@plt+0x5f9c>
   1742c:	mov	r1, #1
   17430:	b	17418 <__assert_fail@plt+0x5ed4>
   17434:	push	{r4, lr}
   17438:	bl	178d4 <__assert_fail@plt+0x6390>
   1743c:	cmp	r0, #0
   17440:	popne	{r4, pc}
   17444:	bl	174e0 <__assert_fail@plt+0x5f9c>
   17448:	mov	r1, #1
   1744c:	b	17434 <__assert_fail@plt+0x5ef0>
   17450:	push	{r4, r5, r6, lr}
   17454:	mov	r4, r1
   17458:	mov	r5, r0
   1745c:	mov	r0, r1
   17460:	bl	17228 <__assert_fail@plt+0x5ce4>
   17464:	mov	r2, r4
   17468:	mov	r1, r5
   1746c:	pop	{r4, r5, r6, lr}
   17470:	b	111fc <memcpy@plt>
   17474:	push	{r4, r5, r6, lr}
   17478:	mov	r4, r1
   1747c:	mov	r5, r0
   17480:	mov	r0, r1
   17484:	bl	1723c <__assert_fail@plt+0x5cf8>
   17488:	mov	r2, r4
   1748c:	mov	r1, r5
   17490:	pop	{r4, r5, r6, lr}
   17494:	b	111fc <memcpy@plt>
   17498:	push	{r4, r5, r6, lr}
   1749c:	mov	r5, r0
   174a0:	add	r0, r1, #1
   174a4:	mov	r4, r1
   174a8:	bl	1723c <__assert_fail@plt+0x5cf8>
   174ac:	mov	r2, #0
   174b0:	mov	r1, r5
   174b4:	strb	r2, [r0, r4]
   174b8:	mov	r2, r4
   174bc:	pop	{r4, r5, r6, lr}
   174c0:	b	111fc <memcpy@plt>
   174c4:	push	{r4, lr}
   174c8:	mov	r4, r0
   174cc:	bl	11394 <strlen@plt>
   174d0:	add	r1, r0, #1
   174d4:	mov	r0, r4
   174d8:	pop	{r4, lr}
   174dc:	b	17450 <__assert_fail@plt+0x5f0c>
   174e0:	ldr	r3, [pc, #44]	; 17514 <__assert_fail@plt+0x5fd0>
   174e4:	mov	r2, #5
   174e8:	mov	r0, #0
   174ec:	push	{r4, lr}
   174f0:	ldr	r1, [pc, #32]	; 17518 <__assert_fail@plt+0x5fd4>
   174f4:	ldr	r4, [r3]
   174f8:	bl	11238 <dcgettext@plt>
   174fc:	mov	r3, r0
   17500:	ldr	r2, [pc, #20]	; 1751c <__assert_fail@plt+0x5fd8>
   17504:	mov	r1, #0
   17508:	mov	r0, r4
   1750c:	bl	112f8 <error@plt>
   17510:	bl	11514 <abort@plt>
   17514:	andeq	fp, r2, ip, ror #2
   17518:	muleq	r1, r1, r2
   1751c:	andeq	r9, r1, ip, lsr #25
   17520:	subs	r2, r2, #1
   17524:	mov	ip, r0
   17528:	mov	r0, #0
   1752c:	bxcc	lr
   17530:	push	{r4, r5, lr}
   17534:	mov	lr, #0
   17538:	sub	r2, r2, #1
   1753c:	ldr	r3, [ip]
   17540:	umull	r5, r4, r1, r3
   17544:	cmp	r4, lr
   17548:	mvnne	r3, #0
   1754c:	movne	lr, #1
   17550:	muleq	r3, r1, r3
   17554:	cmn	r2, #1
   17558:	orr	r0, r0, lr
   1755c:	str	r3, [ip]
   17560:	bne	17534 <__assert_fail@plt+0x5ff0>
   17564:	pop	{r4, r5, pc}
   17568:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1756c:	cmp	r2, #36	; 0x24
   17570:	ldr	r6, [sp, #48]	; 0x30
   17574:	bls	1758c <__assert_fail@plt+0x6048>
   17578:	ldr	r3, [pc, #840]	; 178c8 <__assert_fail@plt+0x6384>
   1757c:	mov	r2, #84	; 0x54
   17580:	ldr	r1, [pc, #836]	; 178cc <__assert_fail@plt+0x6388>
   17584:	ldr	r0, [pc, #836]	; 178d0 <__assert_fail@plt+0x638c>
   17588:	bl	11544 <__assert_fail@plt>
   1758c:	cmp	r1, #0
   17590:	mov	r7, r1
   17594:	mov	r4, r0
   17598:	mov	fp, r2
   1759c:	mov	r8, r3
   175a0:	moveq	r7, sp
   175a4:	bl	113c4 <__errno_location@plt>
   175a8:	mov	r3, #0
   175ac:	mov	sl, r0
   175b0:	str	r3, [r0]
   175b4:	bl	11364 <__ctype_b_loc@plt>
   175b8:	ldrb	r9, [r4]
   175bc:	mov	r3, r4
   175c0:	ldr	r1, [r0]
   175c4:	lsl	r2, r9, #1
   175c8:	ldrh	r5, [r1, r2]
   175cc:	ands	r5, r5, #8192	; 0x2000
   175d0:	bne	175ec <__assert_fail@plt+0x60a8>
   175d4:	cmp	r9, #45	; 0x2d
   175d8:	bne	175f4 <__assert_fail@plt+0x60b0>
   175dc:	mov	r5, #4
   175e0:	mov	r0, r5
   175e4:	add	sp, sp, #12
   175e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ec:	ldrb	r9, [r3, #1]!
   175f0:	b	175c4 <__assert_fail@plt+0x6080>
   175f4:	mov	r2, fp
   175f8:	mov	r1, r7
   175fc:	mov	r0, r4
   17600:	bl	11388 <strtoul@plt>
   17604:	ldr	r9, [r7]
   17608:	str	r0, [sp, #4]
   1760c:	cmp	r9, r4
   17610:	bne	17670 <__assert_fail@plt+0x612c>
   17614:	cmp	r6, #0
   17618:	beq	175dc <__assert_fail@plt+0x6098>
   1761c:	ldrb	r1, [r4]
   17620:	cmp	r1, #0
   17624:	beq	175dc <__assert_fail@plt+0x6098>
   17628:	mov	r0, r6
   1762c:	bl	113a0 <strchr@plt>
   17630:	cmp	r0, #0
   17634:	movne	r3, #1
   17638:	strne	r3, [sp, #4]
   1763c:	beq	175dc <__assert_fail@plt+0x6098>
   17640:	ldrb	r4, [r9]
   17644:	cmp	r4, #0
   17648:	beq	17880 <__assert_fail@plt+0x633c>
   1764c:	mov	r1, r4
   17650:	mov	r0, r6
   17654:	bl	113a0 <strchr@plt>
   17658:	cmp	r0, #0
   1765c:	bne	17698 <__assert_fail@plt+0x6154>
   17660:	ldr	r3, [sp, #4]
   17664:	orr	r5, r5, #2
   17668:	str	r3, [r8]
   1766c:	b	175e0 <__assert_fail@plt+0x609c>
   17670:	ldr	r5, [sl]
   17674:	cmp	r5, #0
   17678:	beq	17688 <__assert_fail@plt+0x6144>
   1767c:	cmp	r5, #34	; 0x22
   17680:	bne	175dc <__assert_fail@plt+0x6098>
   17684:	mov	r5, #1
   17688:	cmp	r6, #0
   1768c:	streq	r0, [r8]
   17690:	bne	17640 <__assert_fail@plt+0x60fc>
   17694:	b	175e0 <__assert_fail@plt+0x609c>
   17698:	cmp	r4, #84	; 0x54
   1769c:	beq	176f0 <__assert_fail@plt+0x61ac>
   176a0:	bhi	176d8 <__assert_fail@plt+0x6194>
   176a4:	cmp	r4, #75	; 0x4b
   176a8:	beq	176f0 <__assert_fail@plt+0x61ac>
   176ac:	bhi	176c8 <__assert_fail@plt+0x6184>
   176b0:	cmp	r4, #69	; 0x45
   176b4:	beq	176f0 <__assert_fail@plt+0x61ac>
   176b8:	cmp	r4, #71	; 0x47
   176bc:	beq	176f0 <__assert_fail@plt+0x61ac>
   176c0:	mov	r6, #1
   176c4:	b	177ac <__assert_fail@plt+0x6268>
   176c8:	cmp	r4, #77	; 0x4d
   176cc:	beq	176f0 <__assert_fail@plt+0x61ac>
   176d0:	cmp	r4, #80	; 0x50
   176d4:	b	176bc <__assert_fail@plt+0x6178>
   176d8:	cmp	r4, #103	; 0x67
   176dc:	beq	176f0 <__assert_fail@plt+0x61ac>
   176e0:	bhi	17784 <__assert_fail@plt+0x6240>
   176e4:	sub	r3, r4, #89	; 0x59
   176e8:	cmp	r3, #1
   176ec:	bhi	176c0 <__assert_fail@plt+0x617c>
   176f0:	mov	r1, #48	; 0x30
   176f4:	mov	r0, r6
   176f8:	bl	113a0 <strchr@plt>
   176fc:	cmp	r0, #0
   17700:	beq	176c0 <__assert_fail@plt+0x617c>
   17704:	ldrb	r3, [r9, #1]
   17708:	cmp	r3, #68	; 0x44
   1770c:	moveq	r6, #2
   17710:	moveq	r1, #1000	; 0x3e8
   17714:	beq	17734 <__assert_fail@plt+0x61f0>
   17718:	cmp	r3, #105	; 0x69
   1771c:	beq	1779c <__assert_fail@plt+0x6258>
   17720:	cmp	r3, #66	; 0x42
   17724:	moveq	r6, #2
   17728:	movne	r6, #1
   1772c:	moveq	r1, #1000	; 0x3e8
   17730:	movne	r1, #1024	; 0x400
   17734:	cmp	r4, #89	; 0x59
   17738:	beq	178b8 <__assert_fail@plt+0x6374>
   1773c:	bhi	177d4 <__assert_fail@plt+0x6290>
   17740:	cmp	r4, #75	; 0x4b
   17744:	beq	17814 <__assert_fail@plt+0x62d0>
   17748:	bhi	177b4 <__assert_fail@plt+0x6270>
   1774c:	cmp	r4, #69	; 0x45
   17750:	beq	1788c <__assert_fail@plt+0x6348>
   17754:	cmp	r4, #71	; 0x47
   17758:	beq	17898 <__assert_fail@plt+0x6354>
   1775c:	cmp	r4, #66	; 0x42
   17760:	bne	17660 <__assert_fail@plt+0x611c>
   17764:	ldr	r3, [sp, #4]
   17768:	lsrs	r2, r3, #22
   1776c:	movne	r0, #1
   17770:	moveq	r0, #0
   17774:	bne	17858 <__assert_fail@plt+0x6314>
   17778:	lsl	r3, r3, #10
   1777c:	str	r3, [sp, #4]
   17780:	b	17864 <__assert_fail@plt+0x6320>
   17784:	cmp	r4, #109	; 0x6d
   17788:	beq	176f0 <__assert_fail@plt+0x61ac>
   1778c:	cmp	r4, #116	; 0x74
   17790:	beq	176f0 <__assert_fail@plt+0x61ac>
   17794:	cmp	r4, #107	; 0x6b
   17798:	b	176bc <__assert_fail@plt+0x6178>
   1779c:	ldrb	r3, [r9, #2]
   177a0:	cmp	r3, #66	; 0x42
   177a4:	movne	r6, #1
   177a8:	moveq	r6, #3
   177ac:	mov	r1, #1024	; 0x400
   177b0:	b	17734 <__assert_fail@plt+0x61f0>
   177b4:	cmp	r4, #80	; 0x50
   177b8:	beq	178a0 <__assert_fail@plt+0x635c>
   177bc:	cmp	r4, #84	; 0x54
   177c0:	beq	178a8 <__assert_fail@plt+0x6364>
   177c4:	cmp	r4, #77	; 0x4d
   177c8:	bne	17660 <__assert_fail@plt+0x611c>
   177cc:	mov	r2, #2
   177d0:	b	17890 <__assert_fail@plt+0x634c>
   177d4:	cmp	r4, #103	; 0x67
   177d8:	beq	17898 <__assert_fail@plt+0x6354>
   177dc:	bhi	17800 <__assert_fail@plt+0x62bc>
   177e0:	cmp	r4, #98	; 0x62
   177e4:	beq	17840 <__assert_fail@plt+0x62fc>
   177e8:	cmp	r4, #99	; 0x63
   177ec:	beq	178c0 <__assert_fail@plt+0x637c>
   177f0:	cmp	r4, #90	; 0x5a
   177f4:	bne	17660 <__assert_fail@plt+0x611c>
   177f8:	mov	r2, #7
   177fc:	b	17890 <__assert_fail@plt+0x634c>
   17800:	cmp	r4, #109	; 0x6d
   17804:	beq	177cc <__assert_fail@plt+0x6288>
   17808:	bhi	1781c <__assert_fail@plt+0x62d8>
   1780c:	cmp	r4, #107	; 0x6b
   17810:	bne	17660 <__assert_fail@plt+0x611c>
   17814:	mov	r2, #1
   17818:	b	17890 <__assert_fail@plt+0x634c>
   1781c:	cmp	r4, #116	; 0x74
   17820:	beq	178a8 <__assert_fail@plt+0x6364>
   17824:	cmp	r4, #119	; 0x77
   17828:	bne	17660 <__assert_fail@plt+0x611c>
   1782c:	ldr	r3, [sp, #4]
   17830:	lsrs	r0, r3, #31
   17834:	lsleq	r3, r3, #1
   17838:	beq	1777c <__assert_fail@plt+0x6238>
   1783c:	b	17858 <__assert_fail@plt+0x6314>
   17840:	ldr	r3, [sp, #4]
   17844:	lsrs	r2, r3, #23
   17848:	movne	r0, #1
   1784c:	moveq	r0, #0
   17850:	lsleq	r3, r3, #9
   17854:	beq	1777c <__assert_fail@plt+0x6238>
   17858:	mvn	r3, #0
   1785c:	mov	r0, #1
   17860:	str	r3, [sp, #4]
   17864:	ldr	r3, [r7]
   17868:	orr	r5, r5, r0
   1786c:	add	r2, r3, r6
   17870:	str	r2, [r7]
   17874:	ldrb	r3, [r3, r6]
   17878:	cmp	r3, #0
   1787c:	orrne	r5, r5, #2
   17880:	ldr	r3, [sp, #4]
   17884:	str	r3, [r8]
   17888:	b	175e0 <__assert_fail@plt+0x609c>
   1788c:	mov	r2, #6
   17890:	add	r0, sp, #4
   17894:	b	178b0 <__assert_fail@plt+0x636c>
   17898:	mov	r2, #3
   1789c:	b	17890 <__assert_fail@plt+0x634c>
   178a0:	mov	r2, #5
   178a4:	b	17890 <__assert_fail@plt+0x634c>
   178a8:	mov	r2, #4
   178ac:	add	r0, sp, r2
   178b0:	bl	17520 <__assert_fail@plt+0x5fdc>
   178b4:	b	17864 <__assert_fail@plt+0x6320>
   178b8:	mov	r2, #8
   178bc:	b	17890 <__assert_fail@plt+0x634c>
   178c0:	mov	r0, #0
   178c4:	b	17864 <__assert_fail@plt+0x6320>
   178c8:	andeq	sl, r1, r2, lsr #5
   178cc:	andeq	sl, r1, fp, lsr #5
   178d0:			; <UNDEFINED> instruction: 0x0001a2b5
   178d4:	cmp	r1, #0
   178d8:	cmpne	r0, #0
   178dc:	beq	17914 <__assert_fail@plt+0x63d0>
   178e0:	push	{r4, r5, r6, lr}
   178e4:	umull	r4, r5, r0, r1
   178e8:	adds	r3, r5, #0
   178ec:	movne	r3, #1
   178f0:	cmp	r4, #0
   178f4:	blt	17900 <__assert_fail@plt+0x63bc>
   178f8:	cmp	r3, #0
   178fc:	beq	17920 <__assert_fail@plt+0x63dc>
   17900:	bl	113c4 <__errno_location@plt>
   17904:	mov	r3, #12
   17908:	str	r3, [r0]
   1790c:	mov	r0, #0
   17910:	pop	{r4, r5, r6, pc}
   17914:	mov	r1, #1
   17918:	mov	r0, r1
   1791c:	b	11184 <calloc@plt>
   17920:	pop	{r4, r5, r6, lr}
   17924:	b	1791c <__assert_fail@plt+0x63d8>
   17928:	push	{r1, r2, r3}
   1792c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   17930:	add	r2, sp, #40	; 0x28
   17934:	ldr	r1, [sp, #36]	; 0x24
   17938:	str	r2, [sp, #4]
   1793c:	cmp	r1, #0
   17940:	beq	17990 <__assert_fail@plt+0x644c>
   17944:	movw	r3, #1030	; 0x406
   17948:	mov	r5, r0
   1794c:	cmp	r1, r3
   17950:	beq	1799c <__assert_fail@plt+0x6458>
   17954:	cmp	r1, #11
   17958:	beq	17980 <__assert_fail@plt+0x643c>
   1795c:	bgt	17a90 <__assert_fail@plt+0x654c>
   17960:	cmp	r1, #4
   17964:	beq	17aa8 <__assert_fail@plt+0x6564>
   17968:	bgt	17a88 <__assert_fail@plt+0x6544>
   1796c:	cmp	r1, #2
   17970:	beq	17aa8 <__assert_fail@plt+0x6564>
   17974:	bgt	17980 <__assert_fail@plt+0x643c>
   17978:	cmp	r1, #1
   1797c:	bne	17aa8 <__assert_fail@plt+0x6564>
   17980:	mov	r0, r5
   17984:	bl	11454 <fcntl64@plt>
   17988:	mov	r4, r0
   1798c:	b	179e4 <__assert_fail@plt+0x64a0>
   17990:	ldr	r2, [sp, #40]	; 0x28
   17994:	bl	11454 <fcntl64@plt>
   17998:	b	17988 <__assert_fail@plt+0x6444>
   1799c:	ldr	r6, [pc, #304]	; 17ad4 <__assert_fail@plt+0x6590>
   179a0:	add	r3, sp, #44	; 0x2c
   179a4:	str	r3, [sp, #4]
   179a8:	ldr	r7, [r2]
   179ac:	ldr	r3, [r6]
   179b0:	mov	r8, r6
   179b4:	mov	r2, r7
   179b8:	cmp	r3, #0
   179bc:	blt	17a4c <__assert_fail@plt+0x6508>
   179c0:	bl	11454 <fcntl64@plt>
   179c4:	subs	r4, r0, #0
   179c8:	bge	179dc <__assert_fail@plt+0x6498>
   179cc:	bl	113c4 <__errno_location@plt>
   179d0:	ldr	r3, [r0]
   179d4:	cmp	r3, #22
   179d8:	beq	179f8 <__assert_fail@plt+0x64b4>
   179dc:	mov	r3, #1
   179e0:	str	r3, [r8]
   179e4:	mov	r0, r4
   179e8:	add	sp, sp, #12
   179ec:	pop	{r4, r5, r6, r7, r8, lr}
   179f0:	add	sp, sp, #12
   179f4:	bx	lr
   179f8:	mov	r2, r7
   179fc:	mov	r1, #0
   17a00:	mov	r0, r5
   17a04:	bl	11454 <fcntl64@plt>
   17a08:	subs	r4, r0, #0
   17a0c:	mvnge	r3, #0
   17a10:	strge	r3, [r6]
   17a14:	blt	179e4 <__assert_fail@plt+0x64a0>
   17a18:	mov	r1, #1
   17a1c:	mov	r0, r4
   17a20:	bl	11454 <fcntl64@plt>
   17a24:	subs	r2, r0, #0
   17a28:	bge	17a6c <__assert_fail@plt+0x6528>
   17a2c:	bl	113c4 <__errno_location@plt>
   17a30:	mov	r5, r0
   17a34:	mov	r0, r4
   17a38:	ldr	r6, [r5]
   17a3c:	mvn	r4, #0
   17a40:	bl	1152c <close@plt>
   17a44:	str	r6, [r5]
   17a48:	b	179e4 <__assert_fail@plt+0x64a0>
   17a4c:	mov	r1, #0
   17a50:	bl	11454 <fcntl64@plt>
   17a54:	subs	r4, r0, #0
   17a58:	blt	179e4 <__assert_fail@plt+0x64a0>
   17a5c:	ldr	r3, [r6]
   17a60:	cmn	r3, #1
   17a64:	bne	179e4 <__assert_fail@plt+0x64a0>
   17a68:	b	17a18 <__assert_fail@plt+0x64d4>
   17a6c:	orr	r2, r2, #1
   17a70:	mov	r1, #2
   17a74:	mov	r0, r4
   17a78:	bl	11454 <fcntl64@plt>
   17a7c:	cmn	r0, #1
   17a80:	bne	179e4 <__assert_fail@plt+0x64a0>
   17a84:	b	17a2c <__assert_fail@plt+0x64e8>
   17a88:	cmp	r1, #9
   17a8c:	b	1797c <__assert_fail@plt+0x6438>
   17a90:	movw	r2, #1031	; 0x407
   17a94:	cmp	r1, r2
   17a98:	bgt	17ab8 <__assert_fail@plt+0x6574>
   17a9c:	cmp	r1, r3
   17aa0:	movwlt	r3, #1025	; 0x401
   17aa4:	blt	17acc <__assert_fail@plt+0x6588>
   17aa8:	ldr	r3, [sp, #4]
   17aac:	mov	r0, r5
   17ab0:	ldr	r2, [r3]
   17ab4:	b	17994 <__assert_fail@plt+0x6450>
   17ab8:	movw	r3, #1033	; 0x409
   17abc:	cmp	r1, r3
   17ac0:	beq	17aa8 <__assert_fail@plt+0x6564>
   17ac4:	blt	17980 <__assert_fail@plt+0x643c>
   17ac8:	movw	r3, #1034	; 0x40a
   17acc:	cmp	r1, r3
   17ad0:	b	1797c <__assert_fail@plt+0x6438>
   17ad4:	andeq	fp, r2, r0, ror #7
   17ad8:	push	{r0, r1, r4, lr}
   17adc:	subs	r4, r0, #0
   17ae0:	bne	17af4 <__assert_fail@plt+0x65b0>
   17ae4:	mov	r0, r4
   17ae8:	add	sp, sp, #8
   17aec:	pop	{r4, lr}
   17af0:	b	111c0 <fflush@plt>
   17af4:	bl	11340 <__freading@plt>
   17af8:	cmp	r0, #0
   17afc:	beq	17ae4 <__assert_fail@plt+0x65a0>
   17b00:	ldr	r3, [r4]
   17b04:	tst	r3, #256	; 0x100
   17b08:	beq	17ae4 <__assert_fail@plt+0x65a0>
   17b0c:	mov	r3, #1
   17b10:	mov	r2, #0
   17b14:	mov	r0, r4
   17b18:	str	r3, [sp]
   17b1c:	mov	r3, #0
   17b20:	bl	17bb4 <__assert_fail@plt+0x6670>
   17b24:	b	17ae4 <__assert_fail@plt+0x65a0>
   17b28:	ldr	r3, [r0, #16]
   17b2c:	ldr	r2, [r0, #20]
   17b30:	cmp	r2, r3
   17b34:	bhi	17b5c <__assert_fail@plt+0x6618>
   17b38:	ldmib	r0, {r2, r3}
   17b3c:	sub	r2, r3, r2
   17b40:	ldr	r3, [r0]
   17b44:	ands	r3, r3, #256	; 0x100
   17b48:	ldrne	r3, [r0, #44]	; 0x2c
   17b4c:	ldrne	r0, [r0, #36]	; 0x24
   17b50:	subne	r3, r3, r0
   17b54:	add	r0, r2, r3
   17b58:	bx	lr
   17b5c:	mov	r0, #0
   17b60:	bx	lr
   17b64:	push	{r0, r1, r2, r4, r5, lr}
   17b68:	mov	r5, r0
   17b6c:	bl	113c4 <__errno_location@plt>
   17b70:	mov	r4, r0
   17b74:	mov	r0, r5
   17b78:	ldr	r3, [r4]
   17b7c:	str	r3, [sp]
   17b80:	str	r3, [sp, #4]
   17b84:	mov	r3, #0
   17b88:	str	r3, [r4]
   17b8c:	bl	111d8 <free@plt>
   17b90:	ldr	r3, [r4]
   17b94:	add	r2, sp, #8
   17b98:	clz	r3, r3
   17b9c:	lsr	r3, r3, #5
   17ba0:	add	r3, r2, r3, lsl #2
   17ba4:	ldr	r3, [r3, #-8]
   17ba8:	str	r3, [r4]
   17bac:	add	sp, sp, #12
   17bb0:	pop	{r4, r5, pc}
   17bb4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   17bb8:	mov	r4, r0
   17bbc:	ldmib	r0, {ip, lr}
   17bc0:	ldr	r8, [sp, #32]
   17bc4:	cmp	lr, ip
   17bc8:	bne	17c38 <__assert_fail@plt+0x66f4>
   17bcc:	ldr	ip, [r0, #16]
   17bd0:	ldr	lr, [r0, #20]
   17bd4:	cmp	lr, ip
   17bd8:	bne	17c38 <__assert_fail@plt+0x66f4>
   17bdc:	ldr	r5, [r0, #36]	; 0x24
   17be0:	cmp	r5, #0
   17be4:	bne	17c38 <__assert_fail@plt+0x66f4>
   17be8:	mov	r6, r2
   17bec:	mov	r7, r3
   17bf0:	bl	1140c <fileno@plt>
   17bf4:	mov	r2, r6
   17bf8:	mov	r3, r7
   17bfc:	str	r8, [sp]
   17c00:	bl	112b0 <lseek64@plt>
   17c04:	mvn	r3, #0
   17c08:	mvn	r2, #0
   17c0c:	cmp	r1, r3
   17c10:	cmpeq	r0, r2
   17c14:	mvneq	r0, #0
   17c18:	beq	17c30 <__assert_fail@plt+0x66ec>
   17c1c:	ldr	r3, [r4]
   17c20:	strd	r0, [r4, #80]	; 0x50
   17c24:	mov	r0, r5
   17c28:	bic	r3, r3, #16
   17c2c:	str	r3, [r4]
   17c30:	add	sp, sp, #8
   17c34:	pop	{r4, r5, r6, r7, r8, pc}
   17c38:	mov	r0, r4
   17c3c:	str	r8, [sp, #32]
   17c40:	add	sp, sp, #8
   17c44:	pop	{r4, r5, r6, r7, r8, lr}
   17c48:	b	11448 <fseeko64@plt>
   17c4c:	cmp	r0, #0
   17c50:	beq	17c70 <__assert_fail@plt+0x672c>
   17c54:	bge	17c74 <__assert_fail@plt+0x6730>
   17c58:	push	{r4, lr}
   17c5c:	bl	113c4 <__errno_location@plt>
   17c60:	mov	r3, #12
   17c64:	str	r3, [r0]
   17c68:	mov	r0, #0
   17c6c:	pop	{r4, pc}
   17c70:	mov	r0, #1
   17c74:	b	11328 <malloc@plt>
   17c78:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17c7c:	subs	r5, r0, #0
   17c80:	mov	r7, r2
   17c84:	addeq	r5, sp, #4
   17c88:	mov	r6, r1
   17c8c:	mov	r0, r5
   17c90:	bl	112ec <mbrtowc@plt>
   17c94:	cmp	r7, #0
   17c98:	cmnne	r0, #3
   17c9c:	mov	r4, r0
   17ca0:	bls	17cbc <__assert_fail@plt+0x6778>
   17ca4:	mov	r0, #0
   17ca8:	bl	17da8 <__assert_fail@plt+0x6864>
   17cac:	cmp	r0, #0
   17cb0:	ldrbeq	r3, [r6]
   17cb4:	moveq	r4, #1
   17cb8:	streq	r3, [r5]
   17cbc:	mov	r0, r4
   17cc0:	add	sp, sp, #12
   17cc4:	pop	{r4, r5, r6, r7, pc}
   17cc8:	cmp	r0, #0
   17ccc:	bne	17cd8 <__assert_fail@plt+0x6794>
   17cd0:	mov	r0, r1
   17cd4:	b	17c4c <__assert_fail@plt+0x6708>
   17cd8:	cmp	r1, #0
   17cdc:	push	{r4, lr}
   17ce0:	bne	17cf0 <__assert_fail@plt+0x67ac>
   17ce4:	bl	17b64 <__assert_fail@plt+0x6620>
   17ce8:	mov	r0, #0
   17cec:	pop	{r4, pc}
   17cf0:	blt	17cfc <__assert_fail@plt+0x67b8>
   17cf4:	pop	{r4, lr}
   17cf8:	b	11268 <realloc@plt>
   17cfc:	bl	113c4 <__errno_location@plt>
   17d00:	mov	r3, #12
   17d04:	str	r3, [r0]
   17d08:	b	17ce8 <__assert_fail@plt+0x67a4>
   17d0c:	umull	r2, r3, r1, r2
   17d10:	cmp	r3, #0
   17d14:	bne	17d20 <__assert_fail@plt+0x67dc>
   17d18:	mov	r1, r2
   17d1c:	b	17cc8 <__assert_fail@plt+0x6784>
   17d20:	push	{r4, lr}
   17d24:	bl	113c4 <__errno_location@plt>
   17d28:	mov	r3, #12
   17d2c:	str	r3, [r0]
   17d30:	mov	r0, #0
   17d34:	pop	{r4, pc}
   17d38:	push	{r4, r5, r6, lr}
   17d3c:	mov	r4, r0
   17d40:	bl	112e0 <__fpending@plt>
   17d44:	mov	r5, r0
   17d48:	mov	r0, r4
   17d4c:	bl	111e4 <ferror@plt>
   17d50:	mov	r6, r0
   17d54:	mov	r0, r4
   17d58:	bl	11424 <fclose@plt>
   17d5c:	cmp	r6, #0
   17d60:	mov	r4, r0
   17d64:	bne	17d90 <__assert_fail@plt+0x684c>
   17d68:	cmp	r0, #0
   17d6c:	beq	17d88 <__assert_fail@plt+0x6844>
   17d70:	cmp	r5, #0
   17d74:	bne	17da0 <__assert_fail@plt+0x685c>
   17d78:	bl	113c4 <__errno_location@plt>
   17d7c:	ldr	r4, [r0]
   17d80:	subs	r4, r4, #9
   17d84:	mvnne	r4, #0
   17d88:	mov	r0, r4
   17d8c:	pop	{r4, r5, r6, pc}
   17d90:	cmp	r0, #0
   17d94:	bne	17da0 <__assert_fail@plt+0x685c>
   17d98:	bl	113c4 <__errno_location@plt>
   17d9c:	str	r4, [r0]
   17da0:	mvn	r4, #0
   17da4:	b	17d88 <__assert_fail@plt+0x6844>
   17da8:	push	{lr}		; (str lr, [sp, #-4]!)
   17dac:	sub	sp, sp, #268	; 0x10c
   17db0:	movw	r2, #257	; 0x101
   17db4:	add	r1, sp, #4
   17db8:	bl	17ff4 <__assert_fail@plt+0x6ab0>
   17dbc:	cmp	r0, #0
   17dc0:	movne	r0, #0
   17dc4:	bne	17df4 <__assert_fail@plt+0x68b0>
   17dc8:	ldr	r1, [pc, #44]	; 17dfc <__assert_fail@plt+0x68b8>
   17dcc:	add	r0, sp, #4
   17dd0:	bl	11190 <strcmp@plt>
   17dd4:	cmp	r0, #0
   17dd8:	beq	17df0 <__assert_fail@plt+0x68ac>
   17ddc:	ldr	r1, [pc, #28]	; 17e00 <__assert_fail@plt+0x68bc>
   17de0:	add	r0, sp, #4
   17de4:	bl	11190 <strcmp@plt>
   17de8:	adds	r0, r0, #0
   17dec:	movne	r0, #1
   17df0:	and	r0, r0, #1
   17df4:	add	sp, sp, #268	; 0x10c
   17df8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dfc:	ldrdeq	sl, [r1], -fp
   17e00:	ldrdeq	sl, [r1], -sp
   17e04:	b	17c4c <__assert_fail@plt+0x6708>
   17e08:	cmp	r1, #0
   17e0c:	orreq	r1, r1, #1
   17e10:	b	17cc8 <__assert_fail@plt+0x6784>
   17e14:	b	178d4 <__assert_fail@plt+0x6390>
   17e18:	cmp	r2, #0
   17e1c:	cmpne	r1, #0
   17e20:	moveq	r2, #1
   17e24:	moveq	r1, r2
   17e28:	b	17d0c <__assert_fail@plt+0x67c8>
   17e2c:	push	{r4, lr}
   17e30:	mov	r0, #14
   17e34:	bl	11490 <nl_langinfo@plt>
   17e38:	cmp	r0, #0
   17e3c:	beq	17e54 <__assert_fail@plt+0x6910>
   17e40:	ldrb	r2, [r0]
   17e44:	ldr	r3, [pc, #16]	; 17e5c <__assert_fail@plt+0x6918>
   17e48:	cmp	r2, #0
   17e4c:	moveq	r0, r3
   17e50:	pop	{r4, pc}
   17e54:	ldr	r0, [pc]	; 17e5c <__assert_fail@plt+0x6918>
   17e58:	pop	{r4, pc}
   17e5c:	andeq	sl, r1, r3, ror #5
   17e60:	mov	r3, r0
   17e64:	adds	r0, r0, #16
   17e68:	bmi	17ea0 <__assert_fail@plt+0x695c>
   17e6c:	cmp	r0, r3
   17e70:	bcc	17ea0 <__assert_fail@plt+0x695c>
   17e74:	push	{r4, lr}
   17e78:	bl	11328 <malloc@plt>
   17e7c:	cmp	r0, #0
   17e80:	addne	r3, r0, #8
   17e84:	rsbne	r2, r0, #8
   17e88:	bicne	r3, r3, #15
   17e8c:	moveq	r0, #0
   17e90:	addne	r3, r3, r2
   17e94:	addne	r0, r0, r3
   17e98:	strbne	r3, [r0, #-1]
   17e9c:	pop	{r4, pc}
   17ea0:	mov	r0, #0
   17ea4:	bx	lr
   17ea8:	tst	r0, #7
   17eac:	beq	17eb8 <__assert_fail@plt+0x6974>
   17eb0:	push	{r4, lr}
   17eb4:	bl	11514 <abort@plt>
   17eb8:	tst	r0, #8
   17ebc:	bxeq	lr
   17ec0:	ldrb	r3, [r0, #-1]
   17ec4:	sub	r0, r0, r3
   17ec8:	b	17b64 <__assert_fail@plt+0x6620>
   17ecc:	push	{r4, lr}
   17ed0:	mov	r4, r0
   17ed4:	bl	111cc <wcwidth@plt>
   17ed8:	cmp	r0, #0
   17edc:	popge	{r4, pc}
   17ee0:	mov	r0, r4
   17ee4:	bl	11280 <iswcntrl@plt>
   17ee8:	clz	r0, r0
   17eec:	lsr	r0, r0, #5
   17ef0:	pop	{r4, pc}
   17ef4:	mov	r3, r1
   17ef8:	push	{r4, r5, r6, lr}
   17efc:	mov	r5, r1
   17f00:	mov	r4, r0
   17f04:	ldr	r1, [r3], #16
   17f08:	cmp	r1, r3
   17f0c:	strne	r1, [r0]
   17f10:	bne	17f28 <__assert_fail@plt+0x69e4>
   17f14:	add	r3, r0, #16
   17f18:	ldr	r2, [r5, #4]
   17f1c:	mov	r0, r3
   17f20:	bl	111fc <memcpy@plt>
   17f24:	str	r0, [r4]
   17f28:	ldr	r3, [r5, #4]
   17f2c:	str	r3, [r4, #4]
   17f30:	ldrb	r3, [r5, #8]
   17f34:	cmp	r3, #0
   17f38:	strb	r3, [r4, #8]
   17f3c:	ldrne	r3, [r5, #12]
   17f40:	strne	r3, [r4, #12]
   17f44:	pop	{r4, r5, r6, pc}
   17f48:	ldr	r3, [pc, #20]	; 17f64 <__assert_fail@plt+0x6a20>
   17f4c:	lsr	r2, r0, #5
   17f50:	and	r0, r0, #31
   17f54:	ldr	r3, [r3, r2, lsl #2]
   17f58:	lsr	r0, r3, r0
   17f5c:	and	r0, r0, #1
   17f60:	bx	lr
   17f64:	andeq	sl, r1, ip, ror #5
   17f68:	push	{r4, r5, lr}
   17f6c:	sub	sp, sp, #60	; 0x3c
   17f70:	mov	r4, r0
   17f74:	bl	112c8 <__ctype_get_mb_cur_max@plt>
   17f78:	cmp	r0, #1
   17f7c:	bls	17fe4 <__assert_fail@plt+0x6aa0>
   17f80:	str	r4, [sp, #16]
   17f84:	mov	r4, #0
   17f88:	mov	r2, #0
   17f8c:	mov	r3, #0
   17f90:	mov	r5, r4
   17f94:	strb	r4, [sp]
   17f98:	strd	r2, [sp, #4]
   17f9c:	strb	r4, [sp, #12]
   17fa0:	mov	r0, sp
   17fa4:	bl	154b4 <__assert_fail@plt+0x3f70>
   17fa8:	ldrb	r3, [sp, #24]
   17fac:	cmp	r3, #0
   17fb0:	beq	17fcc <__assert_fail@plt+0x6a88>
   17fb4:	ldr	r3, [sp, #28]
   17fb8:	cmp	r3, #0
   17fbc:	bne	17fcc <__assert_fail@plt+0x6a88>
   17fc0:	mov	r0, r4
   17fc4:	add	sp, sp, #60	; 0x3c
   17fc8:	pop	{r4, r5, pc}
   17fcc:	ldrd	r2, [sp, #16]
   17fd0:	add	r4, r4, #1
   17fd4:	strb	r5, [sp, #12]
   17fd8:	add	r3, r3, r2
   17fdc:	str	r3, [sp, #16]
   17fe0:	b	17fa0 <__assert_fail@plt+0x6a5c>
   17fe4:	mov	r0, r4
   17fe8:	bl	11394 <strlen@plt>
   17fec:	mov	r4, r0
   17ff0:	b	17fc0 <__assert_fail@plt+0x6a7c>
   17ff4:	push	{r4, r5, r6, lr}
   17ff8:	mov	r5, r1
   17ffc:	mov	r1, #0
   18000:	mov	r4, r2
   18004:	bl	11460 <setlocale@plt>
   18008:	subs	r6, r0, #0
   1800c:	bne	18020 <__assert_fail@plt+0x6adc>
   18010:	cmp	r4, #0
   18014:	mov	r0, #22
   18018:	strbne	r6, [r5]
   1801c:	pop	{r4, r5, r6, pc}
   18020:	bl	11394 <strlen@plt>
   18024:	cmp	r4, r0
   18028:	bls	18044 <__assert_fail@plt+0x6b00>
   1802c:	add	r2, r0, #1
   18030:	mov	r1, r6
   18034:	mov	r0, r5
   18038:	bl	111fc <memcpy@plt>
   1803c:	mov	r0, #0
   18040:	pop	{r4, r5, r6, pc}
   18044:	cmp	r4, #0
   18048:	beq	18068 <__assert_fail@plt+0x6b24>
   1804c:	sub	r4, r4, #1
   18050:	mov	r1, r6
   18054:	mov	r2, r4
   18058:	mov	r0, r5
   1805c:	bl	111fc <memcpy@plt>
   18060:	mov	r3, #0
   18064:	strb	r3, [r5, r4]
   18068:	mov	r0, #34	; 0x22
   1806c:	pop	{r4, r5, r6, pc}
   18070:	mov	r1, #0
   18074:	b	11460 <setlocale@plt>
   18078:	mov	r2, #3
   1807c:	mov	r1, #0
   18080:	b	17928 <__assert_fail@plt+0x63e4>
   18084:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18088:	mov	r7, r0
   1808c:	ldr	r6, [pc, #72]	; 180dc <__assert_fail@plt+0x6b98>
   18090:	ldr	r5, [pc, #72]	; 180e0 <__assert_fail@plt+0x6b9c>
   18094:	add	r6, pc, r6
   18098:	add	r5, pc, r5
   1809c:	sub	r6, r6, r5
   180a0:	mov	r8, r1
   180a4:	mov	r9, r2
   180a8:	bl	11158 <fdopen@plt-0x20>
   180ac:	asrs	r6, r6, #2
   180b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   180b4:	mov	r4, #0
   180b8:	add	r4, r4, #1
   180bc:	ldr	r3, [r5], #4
   180c0:	mov	r2, r9
   180c4:	mov	r1, r8
   180c8:	mov	r0, r7
   180cc:	blx	r3
   180d0:	cmp	r6, r4
   180d4:	bne	180b8 <__assert_fail@plt+0x6b74>
   180d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   180dc:	andeq	r2, r1, r8, ror lr
   180e0:	andeq	r2, r1, r0, ror lr
   180e4:	bx	lr
   180e8:	ldr	r3, [pc, #12]	; 180fc <__assert_fail@plt+0x6bb8>
   180ec:	mov	r1, #0
   180f0:	add	r3, pc, r3
   180f4:	ldr	r2, [r3]
   180f8:	b	113dc <__cxa_atexit@plt>
   180fc:	andeq	r3, r1, r4, rrx

Disassembly of section .fini:

00018100 <.fini>:
   18100:	push	{r3, lr}
   18104:	pop	{r3, pc}
