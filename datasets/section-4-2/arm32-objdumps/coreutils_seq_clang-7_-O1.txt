
../repos/coreutils/src/seq:     file format elf32-littlearm


Disassembly of section .init:

00010ed0 <.init>:
   10ed0:	push	{r3, lr}
   10ed4:	bl	111dc <__mempcpy_chk@plt+0x4c>
   10ed8:	pop	{r3, pc}

Disassembly of section .plt:

00010edc <calloc@plt-0x14>:
   10edc:	push	{lr}		; (str lr, [sp, #-4]!)
   10ee0:	ldr	lr, [pc, #4]	; 10eec <calloc@plt-0x4>
   10ee4:	add	lr, pc, lr
   10ee8:	ldr	pc, [lr, #8]!
   10eec:	andeq	r6, r1, r4, lsl r1

00010ef0 <calloc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #276]!	; 0x114

00010efc <fputs_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #268]!	; 0x10c

00010f08 <uselocale@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #260]!	; 0x104

00010f14 <strcmp@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #252]!	; 0xfc

00010f20 <strtol@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #244]!	; 0xf4

00010f2c <strcspn@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #236]!	; 0xec

00010f38 <fflush@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #228]!	; 0xe4

00010f44 <memmove@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #220]!	; 0xdc

00010f50 <free@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #212]!	; 0xd4

00010f5c <_exit@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #204]!	; 0xcc

00010f68 <memcpy@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #196]!	; 0xc4

00010f74 <mbsinit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #188]!	; 0xbc

00010f80 <strtold@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #180]!	; 0xb4

00010f8c <fwrite_unlocked@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #172]!	; 0xac

00010f98 <memcmp@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #164]!	; 0xa4

00010fa4 <dcgettext@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #156]!	; 0x9c

00010fb0 <realloc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #148]!	; 0x94

00010fbc <textdomain@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #140]!	; 0x8c

00010fc8 <iswprint@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #132]!	; 0x84

00010fd4 <fwrite@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #124]!	; 0x7c

00010fe0 <lseek64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #116]!	; 0x74

00010fec <__ctype_get_mb_cur_max@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #108]!	; 0x6c

00010ff8 <strcpy@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #100]!	; 0x64

00011004 <__fpending@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #92]!	; 0x5c

00011010 <ferror_unlocked@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #84]!	; 0x54

0001101c <mbrtowc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #76]!	; 0x4c

00011028 <error@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #68]!	; 0x44

00011034 <__asprintf_chk@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #60]!	; 0x3c

00011040 <malloc@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #52]!	; 0x34

0001104c <__libc_start_main@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #44]!	; 0x2c

00011058 <__freading@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #36]!	; 0x24

00011064 <__gmon_start__@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #28]!

00011070 <getopt_long@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #20]!

0001107c <__ctype_b_loc@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #12]!

00011088 <exit@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #4]!

00011094 <strlen@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #86016	; 0x15000
   1109c:	ldr	pc, [ip, #4092]!	; 0xffc

000110a0 <strchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #4084]!	; 0xff4

000110ac <__errno_location@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #4076]!	; 0xfec

000110b8 <__sprintf_chk@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110c4 <__cxa_atexit@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110d0 <memset@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110dc <__printf_chk@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110e8 <fileno@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110f4 <__fprintf_chk@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4028]!	; 0xfbc

00011100 <memchr@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4020]!	; 0xfb4

0001110c <fclose@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #4012]!	; 0xfac

00011118 <fseeko64@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #4004]!	; 0xfa4

00011124 <setlocale@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3988]!	; 0xf94

0001113c <nl_langinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #86016	; 0x15000
   11144:	ldr	pc, [ip, #3980]!	; 0xf8c

00011148 <newlocale@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #86016	; 0x15000
   11150:	ldr	pc, [ip, #3972]!	; 0xf84

00011154 <clearerr_unlocked@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #86016	; 0x15000
   1115c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011160 <bindtextdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #86016	; 0x15000
   11168:	ldr	pc, [ip, #3956]!	; 0xf74

0001116c <strncmp@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #86016	; 0x15000
   11174:	ldr	pc, [ip, #3948]!	; 0xf6c

00011178 <abort@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #86016	; 0x15000
   11180:	ldr	pc, [ip, #3940]!	; 0xf64

00011184 <strspn@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #86016	; 0x15000
   1118c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011190 <__mempcpy_chk@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #86016	; 0x15000
   11198:	ldr	pc, [ip, #3924]!	; 0xf54

Disassembly of section .text:

000111a0 <.text>:
   111a0:	mov	fp, #0
   111a4:	mov	lr, #0
   111a8:	pop	{r1}		; (ldr r1, [sp], #4)
   111ac:	mov	r2, sp
   111b0:	push	{r2}		; (str r2, [sp, #-4]!)
   111b4:	push	{r0}		; (str r0, [sp, #-4]!)
   111b8:	ldr	ip, [pc, #16]	; 111d0 <__mempcpy_chk@plt+0x40>
   111bc:	push	{ip}		; (str ip, [sp, #-4]!)
   111c0:	ldr	r0, [pc, #12]	; 111d4 <__mempcpy_chk@plt+0x44>
   111c4:	ldr	r3, [pc, #12]	; 111d8 <__mempcpy_chk@plt+0x48>
   111c8:	bl	1104c <__libc_start_main@plt>
   111cc:	bl	11178 <abort@plt>
   111d0:	andeq	r5, r1, r8, ror #21
   111d4:	muleq	r1, r8, r5
   111d8:	andeq	r5, r1, r8, lsl #21
   111dc:	ldr	r3, [pc, #20]	; 111f8 <__mempcpy_chk@plt+0x68>
   111e0:	ldr	r2, [pc, #20]	; 111fc <__mempcpy_chk@plt+0x6c>
   111e4:	add	r3, pc, r3
   111e8:	ldr	r2, [r3, r2]
   111ec:	cmp	r2, #0
   111f0:	bxeq	lr
   111f4:	b	11064 <__gmon_start__@plt>
   111f8:	andeq	r5, r1, r4, lsl lr
   111fc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11200:	ldr	r0, [pc, #24]	; 11220 <__mempcpy_chk@plt+0x90>
   11204:	ldr	r3, [pc, #24]	; 11224 <__mempcpy_chk@plt+0x94>
   11208:	cmp	r3, r0
   1120c:	bxeq	lr
   11210:	ldr	r3, [pc, #16]	; 11228 <__mempcpy_chk@plt+0x98>
   11214:	cmp	r3, #0
   11218:	bxeq	lr
   1121c:	bx	r3
   11220:	andeq	r7, r2, r8, asr #2
   11224:	andeq	r7, r2, r8, asr #2
   11228:	andeq	r0, r0, r0
   1122c:	ldr	r0, [pc, #36]	; 11258 <__mempcpy_chk@plt+0xc8>
   11230:	ldr	r1, [pc, #36]	; 1125c <__mempcpy_chk@plt+0xcc>
   11234:	sub	r1, r1, r0
   11238:	asr	r1, r1, #2
   1123c:	add	r1, r1, r1, lsr #31
   11240:	asrs	r1, r1, #1
   11244:	bxeq	lr
   11248:	ldr	r3, [pc, #16]	; 11260 <__mempcpy_chk@plt+0xd0>
   1124c:	cmp	r3, #0
   11250:	bxeq	lr
   11254:	bx	r3
   11258:	andeq	r7, r2, r8, asr #2
   1125c:	andeq	r7, r2, r8, asr #2
   11260:	andeq	r0, r0, r0
   11264:	push	{r4, lr}
   11268:	ldr	r4, [pc, #24]	; 11288 <__mempcpy_chk@plt+0xf8>
   1126c:	ldrb	r3, [r4]
   11270:	cmp	r3, #0
   11274:	popne	{r4, pc}
   11278:	bl	11200 <__mempcpy_chk@plt+0x70>
   1127c:	mov	r3, #1
   11280:	strb	r3, [r4]
   11284:	pop	{r4, pc}
   11288:	andeq	r7, r2, r4, ror #2
   1128c:	b	1122c <__mempcpy_chk@plt+0x9c>
   11290:	push	{fp, lr}
   11294:	mov	fp, sp
   11298:	sub	sp, sp, #8
   1129c:	mov	r4, r0
   112a0:	cmp	r0, #0
   112a4:	bne	1139c <__mempcpy_chk@plt+0x20c>
   112a8:	movw	r1, #23355	; 0x5b3b
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10fa4 <dcgettext@plt>
   112bc:	mov	r1, r0
   112c0:	movw	r0, #29076	; 0x7194
   112c4:	movt	r0, #2
   112c8:	ldr	r2, [r0]
   112cc:	str	r2, [sp]
   112d0:	mov	r0, #1
   112d4:	mov	r3, r2
   112d8:	bl	110dc <__printf_chk@plt>
   112dc:	movw	r1, #23459	; 0x5ba3
   112e0:	movt	r1, #1
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	bl	10fa4 <dcgettext@plt>
   112f0:	movw	r5, #29020	; 0x715c
   112f4:	movt	r5, #2
   112f8:	ldr	r1, [r5]
   112fc:	bl	10efc <fputs_unlocked@plt>
   11300:	bl	113e0 <__mempcpy_chk@plt+0x250>
   11304:	movw	r1, #23517	; 0x5bdd
   11308:	movt	r1, #1
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	bl	10fa4 <dcgettext@plt>
   11318:	ldr	r1, [r5]
   1131c:	bl	10efc <fputs_unlocked@plt>
   11320:	movw	r1, #23729	; 0x5cb1
   11324:	movt	r1, #1
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	bl	10fa4 <dcgettext@plt>
   11334:	ldr	r1, [r5]
   11338:	bl	10efc <fputs_unlocked@plt>
   1133c:	movw	r1, #23774	; 0x5cde
   11340:	movt	r1, #1
   11344:	mov	r0, #0
   11348:	mov	r2, #5
   1134c:	bl	10fa4 <dcgettext@plt>
   11350:	ldr	r1, [r5]
   11354:	bl	10efc <fputs_unlocked@plt>
   11358:	movw	r1, #23828	; 0x5d14
   1135c:	movt	r1, #1
   11360:	mov	r0, #0
   11364:	mov	r2, #5
   11368:	bl	10fa4 <dcgettext@plt>
   1136c:	ldr	r1, [r5]
   11370:	bl	10efc <fputs_unlocked@plt>
   11374:	movw	r1, #24341	; 0x5f15
   11378:	movt	r1, #1
   1137c:	mov	r0, #0
   11380:	mov	r2, #5
   11384:	bl	10fa4 <dcgettext@plt>
   11388:	ldr	r1, [r5]
   1138c:	bl	10efc <fputs_unlocked@plt>
   11390:	bl	11410 <__mempcpy_chk@plt+0x280>
   11394:	mov	r0, r4
   11398:	bl	11088 <exit@plt>
   1139c:	movw	r0, #29016	; 0x7158
   113a0:	movt	r0, #2
   113a4:	ldr	r5, [r0]
   113a8:	movw	r1, #23316	; 0x5b14
   113ac:	movt	r1, #1
   113b0:	mov	r0, #0
   113b4:	mov	r2, #5
   113b8:	bl	10fa4 <dcgettext@plt>
   113bc:	mov	r2, r0
   113c0:	movw	r0, #29076	; 0x7194
   113c4:	movt	r0, #2
   113c8:	ldr	r3, [r0]
   113cc:	mov	r0, r5
   113d0:	mov	r1, #1
   113d4:	bl	110f4 <__fprintf_chk@plt>
   113d8:	mov	r0, r4
   113dc:	bl	11088 <exit@plt>
   113e0:	push	{fp, lr}
   113e4:	mov	fp, sp
   113e8:	movw	r1, #24760	; 0x60b8
   113ec:	movt	r1, #1
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	bl	10fa4 <dcgettext@plt>
   113fc:	movw	r1, #29020	; 0x715c
   11400:	movt	r1, #2
   11404:	ldr	r1, [r1]
   11408:	pop	{fp, lr}
   1140c:	b	10efc <fputs_unlocked@plt>
   11410:	push	{r4, r5, fp, lr}
   11414:	add	fp, sp, #8
   11418:	sub	sp, sp, #56	; 0x38
   1141c:	movw	r0, #25568	; 0x63e0
   11420:	movt	r0, #1
   11424:	add	r1, r0, #32
   11428:	mov	r5, sp
   1142c:	mov	r2, #48	; 0x30
   11430:	vld1.64	{d16-d17}, [r1]
   11434:	add	r1, r5, #32
   11438:	add	r3, r0, #16
   1143c:	vld1.64	{d18-d19}, [r0], r2
   11440:	vld1.64	{d20-d21}, [r3]
   11444:	vldr	d22, [r0]
   11448:	vst1.64	{d16-d17}, [r1]
   1144c:	add	r0, r5, #16
   11450:	vst1.64	{d20-d21}, [r0]
   11454:	mov	r0, r5
   11458:	vst1.64	{d18-d19}, [r0], r2
   1145c:	vstr	d22, [r0]
   11460:	ldr	r1, [sp]
   11464:	cmp	r1, #0
   11468:	beq	11490 <__mempcpy_chk@plt+0x300>
   1146c:	mov	r5, sp
   11470:	movw	r4, #24549	; 0x5fe5
   11474:	movt	r4, #1
   11478:	mov	r0, r4
   1147c:	bl	10f14 <strcmp@plt>
   11480:	cmp	r0, #0
   11484:	ldrne	r1, [r5, #8]!
   11488:	cmpne	r1, #0
   1148c:	bne	11478 <__mempcpy_chk@plt+0x2e8>
   11490:	ldr	r4, [r5, #4]
   11494:	movw	r1, #24930	; 0x6162
   11498:	movt	r1, #1
   1149c:	mov	r0, #0
   114a0:	mov	r2, #5
   114a4:	bl	10fa4 <dcgettext@plt>
   114a8:	mov	r1, r0
   114ac:	movw	r2, #24584	; 0x6008
   114b0:	movt	r2, #1
   114b4:	movw	r3, #24953	; 0x6179
   114b8:	movt	r3, #1
   114bc:	mov	r0, #1
   114c0:	bl	110dc <__printf_chk@plt>
   114c4:	movw	r5, #24549	; 0x5fe5
   114c8:	movt	r5, #1
   114cc:	cmp	r4, #0
   114d0:	moveq	r4, r5
   114d4:	mov	r0, #5
   114d8:	mov	r1, #0
   114dc:	bl	11124 <setlocale@plt>
   114e0:	cmp	r0, #0
   114e4:	beq	11524 <__mempcpy_chk@plt+0x394>
   114e8:	movw	r1, #24993	; 0x61a1
   114ec:	movt	r1, #1
   114f0:	mov	r2, #3
   114f4:	bl	1116c <strncmp@plt>
   114f8:	cmp	r0, #0
   114fc:	beq	11524 <__mempcpy_chk@plt+0x394>
   11500:	movw	r1, #24997	; 0x61a5
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	bl	10fa4 <dcgettext@plt>
   11514:	movw	r1, #29020	; 0x715c
   11518:	movt	r1, #2
   1151c:	ldr	r1, [r1]
   11520:	bl	10efc <fputs_unlocked@plt>
   11524:	movw	r1, #25068	; 0x61ec
   11528:	movt	r1, #1
   1152c:	mov	r0, #0
   11530:	mov	r2, #5
   11534:	bl	10fa4 <dcgettext@plt>
   11538:	mov	r1, r0
   1153c:	movw	r2, #24953	; 0x6179
   11540:	movt	r2, #1
   11544:	mov	r0, #1
   11548:	mov	r3, r5
   1154c:	bl	110dc <__printf_chk@plt>
   11550:	movw	r1, #25095	; 0x6207
   11554:	movt	r1, #1
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	bl	10fa4 <dcgettext@plt>
   11564:	mov	r1, r0
   11568:	movw	r0, #24863	; 0x611f
   1156c:	movt	r0, #1
   11570:	movw	r3, #25145	; 0x6239
   11574:	movt	r3, #1
   11578:	cmp	r4, r5
   1157c:	moveq	r3, r0
   11580:	mov	r0, #1
   11584:	mov	r2, r4
   11588:	bl	110dc <__printf_chk@plt>
   1158c:	sub	sp, fp, #8
   11590:	pop	{r4, r5, fp, pc}
   11594:	nop	{0}
   11598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1159c:	add	fp, sp, #28
   115a0:	sub	sp, sp, #4
   115a4:	vpush	{d8-d9}
   115a8:	sub	sp, sp, #96	; 0x60
   115ac:	mov	r5, r1
   115b0:	mov	r7, r0
   115b4:	movw	r0, #25456	; 0x6370
   115b8:	movt	r0, #1
   115bc:	vld1.64	{d16-d17}, [r0]
   115c0:	sub	r0, fp, #64	; 0x40
   115c4:	vst1.64	{d16-d17}, [r0]
   115c8:	mov	r4, #0
   115cc:	str	r4, [sp, #76]	; 0x4c
   115d0:	str	r4, [sp, #72]	; 0x48
   115d4:	ldr	r0, [r1]
   115d8:	bl	12b84 <__mempcpy_chk@plt+0x19f4>
   115dc:	movw	r1, #25145	; 0x6239
   115e0:	movt	r1, #1
   115e4:	mov	r0, #6
   115e8:	bl	11124 <setlocale@plt>
   115ec:	cmp	r0, #0
   115f0:	movwne	r0, #1
   115f4:	movw	r1, #29032	; 0x7168
   115f8:	movt	r1, #2
   115fc:	strb	r0, [r1]
   11600:	movw	r6, #24588	; 0x600c
   11604:	movt	r6, #1
   11608:	movw	r1, #24553	; 0x5fe9
   1160c:	movt	r1, #1
   11610:	mov	r0, r6
   11614:	bl	11160 <bindtextdomain@plt>
   11618:	mov	r0, r6
   1161c:	bl	10fbc <textdomain@plt>
   11620:	movw	r0, #10868	; 0x2a74
   11624:	movt	r0, #1
   11628:	bl	15aec <__mempcpy_chk@plt+0x495c>
   1162c:	movw	r0, #29033	; 0x7169
   11630:	movt	r0, #2
   11634:	strb	r4, [r0]
   11638:	movw	r1, #29036	; 0x716c
   1163c:	movt	r1, #2
   11640:	movw	r0, #25144	; 0x6238
   11644:	movt	r0, #1
   11648:	str	r0, [r1]
   1164c:	movw	r8, #29008	; 0x7150
   11650:	movt	r8, #2
   11654:	ldr	r0, [r8]
   11658:	cmp	r0, r7
   1165c:	bge	1172c <__mempcpy_chk@plt+0x59c>
   11660:	mov	r9, #0
   11664:	movw	sl, #24577	; 0x6001
   11668:	movt	sl, #1
   1166c:	movw	r6, #25472	; 0x6380
   11670:	movt	r6, #1
   11674:	mov	r4, #0
   11678:	ldr	r0, [r5, r0, lsl #2]
   1167c:	ldrb	r1, [r0]
   11680:	cmp	r1, #45	; 0x2d
   11684:	bne	116a0 <__mempcpy_chk@plt+0x510>
   11688:	ldrb	r0, [r0, #1]
   1168c:	cmp	r0, #46	; 0x2e
   11690:	beq	1172c <__mempcpy_chk@plt+0x59c>
   11694:	sub	r0, r0, #48	; 0x30
   11698:	cmp	r0, #10
   1169c:	bcc	1172c <__mempcpy_chk@plt+0x59c>
   116a0:	str	r9, [sp]
   116a4:	mov	r0, r7
   116a8:	mov	r1, r5
   116ac:	mov	r2, sl
   116b0:	mov	r3, r6
   116b4:	bl	11070 <getopt_long@plt>
   116b8:	cmp	r0, #101	; 0x65
   116bc:	ble	11724 <__mempcpy_chk@plt+0x594>
   116c0:	cmp	r0, #119	; 0x77
   116c4:	beq	116ec <__mempcpy_chk@plt+0x55c>
   116c8:	cmp	r0, #115	; 0x73
   116cc:	bne	11700 <__mempcpy_chk@plt+0x570>
   116d0:	movw	r0, #29024	; 0x7160
   116d4:	movt	r0, #2
   116d8:	ldr	r0, [r0]
   116dc:	movw	r1, #29036	; 0x716c
   116e0:	movt	r1, #2
   116e4:	str	r0, [r1]
   116e8:	b	11714 <__mempcpy_chk@plt+0x584>
   116ec:	movw	r0, #29033	; 0x7169
   116f0:	movt	r0, #2
   116f4:	mov	r1, #1
   116f8:	strb	r1, [r0]
   116fc:	b	11714 <__mempcpy_chk@plt+0x584>
   11700:	cmp	r0, #102	; 0x66
   11704:	bne	11c9c <__mempcpy_chk@plt+0xb0c>
   11708:	movw	r0, #29024	; 0x7160
   1170c:	movt	r0, #2
   11710:	ldr	r4, [r0]
   11714:	ldr	r0, [r8]
   11718:	cmp	r0, r7
   1171c:	blt	11678 <__mempcpy_chk@plt+0x4e8>
   11720:	b	1172c <__mempcpy_chk@plt+0x59c>
   11724:	cmn	r0, #1
   11728:	bne	11bec <__mempcpy_chk@plt+0xa5c>
   1172c:	ldr	r0, [r8]
   11730:	subs	r6, r7, r0
   11734:	beq	11c4c <__mempcpy_chk@plt+0xabc>
   11738:	cmp	r6, #4
   1173c:	bcs	11c58 <__mempcpy_chk@plt+0xac8>
   11740:	cmp	r4, #0
   11744:	beq	117e4 <__mempcpy_chk@plt+0x654>
   11748:	add	r1, sp, #72	; 0x48
   1174c:	mov	r0, r4
   11750:	bl	11d08 <__mempcpy_chk@plt+0xb78>
   11754:	str	r0, [sp, #48]	; 0x30
   11758:	movw	r0, #29033	; 0x7169
   1175c:	movt	r0, #2
   11760:	ldrb	r0, [r0]
   11764:	cmp	r0, #1
   11768:	beq	11ca4 <__mempcpy_chk@plt+0xb14>
   1176c:	mov	r0, #1
   11770:	str	r0, [sp, #40]	; 0x28
   11774:	cmp	r6, #3
   11778:	bne	117fc <__mempcpy_chk@plt+0x66c>
   1177c:	ldr	r0, [r8]
   11780:	add	r0, r5, r0, lsl #2
   11784:	ldr	r4, [r0, #4]
   11788:	mov	r0, r4
   1178c:	bl	11ef8 <__mempcpy_chk@plt+0xd68>
   11790:	mov	r9, #0
   11794:	cmp	r0, #0
   11798:	beq	11800 <__mempcpy_chk@plt+0x670>
   1179c:	mov	r9, #0
   117a0:	sub	r2, fp, #64	; 0x40
   117a4:	movw	r3, #10708	; 0x29d4
   117a8:	movt	r3, #1
   117ac:	mov	r0, r4
   117b0:	mov	r1, #0
   117b4:	bl	15088 <__mempcpy_chk@plt+0x3ef8>
   117b8:	cmp	r0, #0
   117bc:	beq	11800 <__mempcpy_chk@plt+0x670>
   117c0:	vldr	d16, [fp, #-64]	; 0xffffffc0
   117c4:	vcmpe.f64	d16, #0.0
   117c8:	vmrs	APSR_nzcv, fpscr
   117cc:	ble	11800 <__mempcpy_chk@plt+0x670>
   117d0:	vldr	d17, [pc, #912]	; 11b68 <__mempcpy_chk@plt+0x9d8>
   117d4:	vcmpe.f64	d16, d17
   117d8:	vmrs	APSR_nzcv, fpscr
   117dc:	movls	r9, #1
   117e0:	b	11800 <__mempcpy_chk@plt+0x670>
   117e4:	mov	r0, #0
   117e8:	str	r0, [sp, #40]	; 0x28
   117ec:	mov	r0, #0
   117f0:	str	r0, [sp, #48]	; 0x30
   117f4:	cmp	r6, #3
   117f8:	beq	1177c <__mempcpy_chk@plt+0x5ec>
   117fc:	mov	r9, #1
   11800:	str	r7, [sp, #44]	; 0x2c
   11804:	ldr	r7, [r8]
   11808:	ldr	r4, [r5, r7, lsl #2]
   1180c:	mov	r0, r4
   11810:	bl	11ef8 <__mempcpy_chk@plt+0xd68>
   11814:	cmp	r0, #0
   11818:	beq	118e4 <__mempcpy_chk@plt+0x754>
   1181c:	cmp	r6, #1
   11820:	bne	11894 <__mempcpy_chk@plt+0x704>
   11824:	movw	r0, #29033	; 0x7169
   11828:	movt	r0, #2
   1182c:	ldrb	r0, [r0]
   11830:	ldr	r1, [sp, #40]	; 0x28
   11834:	orr	r0, r1, r0
   11838:	tst	r0, #1
   1183c:	bne	118e4 <__mempcpy_chk@plt+0x754>
   11840:	movw	r0, #29036	; 0x716c
   11844:	movt	r0, #2
   11848:	ldr	r0, [r0]
   1184c:	bl	11094 <strlen@plt>
   11850:	cmp	r0, #1
   11854:	bne	118e4 <__mempcpy_chk@plt+0x754>
   11858:	movw	r0, #24715	; 0x608b
   1185c:	movt	r0, #1
   11860:	vldr	d16, [fp, #-64]	; 0xffffffc0
   11864:	cmp	r6, #1
   11868:	moveq	r4, r0
   1186c:	add	r0, r6, r7
   11870:	add	r6, r5, r0, lsl #2
   11874:	vmov	r0, r1, d16
   11878:	bl	15a48 <__mempcpy_chk@plt+0x48b8>
   1187c:	mov	r2, r0
   11880:	mov	r3, r1
   11884:	ldr	r1, [r6, #-4]
   11888:	mov	r0, r4
   1188c:	bl	11f44 <__mempcpy_chk@plt+0xdb4>
   11890:	b	118e4 <__mempcpy_chk@plt+0x754>
   11894:	add	sl, r5, r7, lsl #2
   11898:	ldr	r0, [sl, #4]
   1189c:	bl	11ef8 <__mempcpy_chk@plt+0xd68>
   118a0:	cmp	r0, #0
   118a4:	beq	118e4 <__mempcpy_chk@plt+0x754>
   118a8:	cmp	r6, #3
   118ac:	bcc	11824 <__mempcpy_chk@plt+0x694>
   118b0:	cmp	r9, #0
   118b4:	beq	118e4 <__mempcpy_chk@plt+0x754>
   118b8:	ldr	r0, [sl, #8]
   118bc:	bl	11ef8 <__mempcpy_chk@plt+0xd68>
   118c0:	movw	r1, #29033	; 0x7169
   118c4:	movt	r1, #2
   118c8:	ldrb	r1, [r1]
   118cc:	ldr	r2, [sp, #40]	; 0x28
   118d0:	orr	r1, r2, r1
   118d4:	tst	r1, #1
   118d8:	bne	118e4 <__mempcpy_chk@plt+0x754>
   118dc:	cmp	r0, #0
   118e0:	bne	11840 <__mempcpy_chk@plt+0x6b0>
   118e4:	ldr	r0, [r8]
   118e8:	add	r1, r0, #1
   118ec:	str	r1, [r8]
   118f0:	ldr	r1, [r5, r0, lsl #2]
   118f4:	add	r0, sp, #56	; 0x38
   118f8:	bl	12254 <__mempcpy_chk@plt+0x10c4>
   118fc:	ldr	sl, [sp, #56]	; 0x38
   11900:	ldr	r6, [sp, #60]	; 0x3c
   11904:	ldr	lr, [sp, #64]	; 0x40
   11908:	ldr	r9, [sp, #68]	; 0x44
   1190c:	ldr	r0, [r8]
   11910:	ldr	r4, [sp, #44]	; 0x2c
   11914:	cmp	r0, r4
   11918:	bge	119b0 <__mempcpy_chk@plt+0x820>
   1191c:	str	lr, [sp, #36]	; 0x24
   11920:	add	r1, r0, #1
   11924:	str	r1, [r8]
   11928:	ldr	r1, [r5, r0, lsl #2]
   1192c:	add	r0, sp, #56	; 0x38
   11930:	bl	12254 <__mempcpy_chk@plt+0x10c4>
   11934:	add	lr, sp, #56	; 0x38
   11938:	ldm	lr, {r7, ip, lr}
   1193c:	ldr	r1, [sp, #68]	; 0x44
   11940:	ldr	r0, [r8]
   11944:	cmp	r0, r4
   11948:	bge	11990 <__mempcpy_chk@plt+0x800>
   1194c:	str	r1, [fp, #-52]	; 0xffffffcc
   11950:	sub	r1, fp, #64	; 0x40
   11954:	stm	r1, {r7, ip, lr}
   11958:	vmov	d16, r7, ip
   1195c:	vcmp.f64	d16, #0.0
   11960:	vmrs	APSR_nzcv, fpscr
   11964:	beq	11cd0 <__mempcpy_chk@plt+0xb40>
   11968:	add	r1, r0, #1
   1196c:	movw	r2, #29008	; 0x7150
   11970:	movt	r2, #2
   11974:	str	r1, [r2]
   11978:	ldr	r1, [r5, r0, lsl #2]
   1197c:	add	r0, sp, #56	; 0x38
   11980:	bl	12254 <__mempcpy_chk@plt+0x10c4>
   11984:	add	lr, sp, #56	; 0x38
   11988:	ldm	lr, {r7, ip, lr}
   1198c:	ldr	r1, [sp, #68]	; 0x44
   11990:	cmp	r9, #0
   11994:	ldr	r2, [sp, #36]	; 0x24
   11998:	mov	r3, r2
   1199c:	mov	r4, r9
   119a0:	mov	r5, sl
   119a4:	mov	r8, r6
   119a8:	beq	119d0 <__mempcpy_chk@plt+0x840>
   119ac:	b	119f0 <__mempcpy_chk@plt+0x860>
   119b0:	movw	r8, #0
   119b4:	movt	r8, #16368	; 0x3ff0
   119b8:	mov	r4, #0
   119bc:	mov	r3, #1
   119c0:	mov	r5, #0
   119c4:	mov	r7, sl
   119c8:	mov	ip, r6
   119cc:	mov	r1, r9
   119d0:	cmp	r1, #0
   119d4:	ldreq	r0, [fp, #-52]	; 0xffffffcc
   119d8:	cmpeq	r0, #0
   119dc:	beq	11a64 <__mempcpy_chk@plt+0x8d4>
   119e0:	mov	r2, r3
   119e4:	mov	r9, r4
   119e8:	mov	sl, r5
   119ec:	mov	r6, r8
   119f0:	ldr	r0, [sp, #48]	; 0x30
   119f4:	cmp	r0, #0
   119f8:	bne	11a38 <__mempcpy_chk@plt+0x8a8>
   119fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11a00:	mov	r5, r1
   11a04:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11a08:	ldr	r4, [fp, #-56]	; 0xffffffc8
   11a0c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11a10:	stm	sp, {r0, r1, r4}
   11a14:	add	r0, sp, #12
   11a18:	stm	r0, {r3, r7, ip, lr}
   11a1c:	str	r5, [sp, #28]
   11a20:	mov	r0, sl
   11a24:	mov	r1, r6
   11a28:	mov	r3, r9
   11a2c:	mov	r5, ip
   11a30:	bl	1257c <__mempcpy_chk@plt+0x13ec>
   11a34:	mov	ip, r5
   11a38:	ldr	r1, [sp, #72]	; 0x48
   11a3c:	ldr	r2, [sp, #76]	; 0x4c
   11a40:	vldr	d1, [fp, #-64]	; 0xffffffc0
   11a44:	vmov	d0, sl, r6
   11a48:	vmov	d2, r7, ip
   11a4c:	bl	12674 <__mempcpy_chk@plt+0x14e4>
   11a50:	mov	r0, #0
   11a54:	sub	sp, fp, #48	; 0x30
   11a58:	vpop	{d8-d9}
   11a5c:	add	sp, sp, #4
   11a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a64:	vmov	d9, r5, r8
   11a68:	vcmpe.f64	d9, #0.0
   11a6c:	vmrs	APSR_nzcv, fpscr
   11a70:	blt	119e0 <__mempcpy_chk@plt+0x850>
   11a74:	vmov.i32	d16, #0	; 0x00000000
   11a78:	vmul.f64	d16, d9, d16
   11a7c:	vcmp.f64	d16, #0.0
   11a80:	vmrs	APSR_nzcv, fpscr
   11a84:	bne	119e0 <__mempcpy_chk@plt+0x850>
   11a88:	vmov	d8, r7, ip
   11a8c:	vcmpe.f64	d8, #0.0
   11a90:	vmrs	APSR_nzcv, fpscr
   11a94:	blt	119e0 <__mempcpy_chk@plt+0x850>
   11a98:	vldr	d16, [fp, #-64]	; 0xffffffc0
   11a9c:	vcmpe.f64	d16, #0.0
   11aa0:	vmrs	APSR_nzcv, fpscr
   11aa4:	ble	119e0 <__mempcpy_chk@plt+0x850>
   11aa8:	vldr	d17, [pc, #592]	; 11d00 <__mempcpy_chk@plt+0xb70>
   11aac:	vcmpe.f64	d16, d17
   11ab0:	vmrs	APSR_nzcv, fpscr
   11ab4:	bhi	119e0 <__mempcpy_chk@plt+0x850>
   11ab8:	movw	r0, #29033	; 0x7169
   11abc:	movt	r0, #2
   11ac0:	ldrb	r0, [r0]
   11ac4:	ldr	r2, [sp, #40]	; 0x28
   11ac8:	orr	r0, r2, r0
   11acc:	tst	r0, #1
   11ad0:	bne	119e0 <__mempcpy_chk@plt+0x850>
   11ad4:	mov	r6, r3
   11ad8:	str	r1, [sp, #40]	; 0x28
   11adc:	str	lr, [sp, #44]	; 0x2c
   11ae0:	str	ip, [sp, #36]	; 0x24
   11ae4:	movw	r0, #29036	; 0x716c
   11ae8:	movt	r0, #2
   11aec:	ldr	r0, [r0]
   11af0:	bl	11094 <strlen@plt>
   11af4:	cmp	r0, #1
   11af8:	bne	11b58 <__mempcpy_chk@plt+0x9c8>
   11afc:	vstr	d9, [sp]
   11b00:	add	r0, sp, #56	; 0x38
   11b04:	movw	r2, #24750	; 0x60ae
   11b08:	movt	r2, #1
   11b0c:	mov	r1, #1
   11b10:	bl	11034 <__asprintf_chk@plt>
   11b14:	cmn	r0, #1
   11b18:	ble	11b54 <__mempcpy_chk@plt+0x9c4>
   11b1c:	vmov.i32	d16, #0	; 0x00000000
   11b20:	vmul.f64	d16, d8, d16
   11b24:	vcmp.f64	d16, #0.0
   11b28:	mov	r9, r4
   11b2c:	vmrs	APSR_nzcv, fpscr
   11b30:	bne	11b70 <__mempcpy_chk@plt+0x9e0>
   11b34:	vstr	d8, [sp]
   11b38:	add	r0, sp, #52	; 0x34
   11b3c:	movw	r2, #24750	; 0x60ae
   11b40:	movt	r2, #1
   11b44:	mov	r1, #1
   11b48:	bl	11034 <__asprintf_chk@plt>
   11b4c:	cmn	r0, #1
   11b50:	bgt	11b80 <__mempcpy_chk@plt+0x9f0>
   11b54:	bl	15044 <__mempcpy_chk@plt+0x3eb4>
   11b58:	mov	r2, r6
   11b5c:	mov	r9, r4
   11b60:	b	11bd4 <__mempcpy_chk@plt+0xa44>
   11b64:	nop	{0}
   11b68:	andeq	r0, r0, r0
   11b6c:	rsbmi	r0, r9, r0
   11b70:	movw	r0, #24756	; 0x60b4
   11b74:	movt	r0, #1
   11b78:	bl	15024 <__mempcpy_chk@plt+0x3e94>
   11b7c:	str	r0, [sp, #52]	; 0x34
   11b80:	ldr	r4, [sp, #56]	; 0x38
   11b84:	ldrb	r0, [r4]
   11b88:	cmp	r0, #45	; 0x2d
   11b8c:	beq	11bc0 <__mempcpy_chk@plt+0xa30>
   11b90:	ldr	sl, [sp, #52]	; 0x34
   11b94:	ldrb	r0, [sl]
   11b98:	cmp	r0, #45	; 0x2d
   11b9c:	beq	11bc0 <__mempcpy_chk@plt+0xa30>
   11ba0:	vldr	d16, [fp, #-64]	; 0xffffffc0
   11ba4:	vmov	r0, r1, d16
   11ba8:	bl	15a48 <__mempcpy_chk@plt+0x48b8>
   11bac:	mov	r2, r0
   11bb0:	mov	r3, r1
   11bb4:	mov	r0, r4
   11bb8:	mov	r1, sl
   11bbc:	bl	11f44 <__mempcpy_chk@plt+0xdb4>
   11bc0:	ldr	r0, [sp, #56]	; 0x38
   11bc4:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   11bc8:	ldr	r0, [sp, #52]	; 0x34
   11bcc:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   11bd0:	mov	r2, r6
   11bd4:	mov	sl, r5
   11bd8:	mov	r6, r8
   11bdc:	ldr	ip, [sp, #36]	; 0x24
   11be0:	ldr	lr, [sp, #44]	; 0x2c
   11be4:	ldr	r1, [sp, #40]	; 0x28
   11be8:	b	119f0 <__mempcpy_chk@plt+0x860>
   11bec:	cmn	r0, #3
   11bf0:	bne	11c3c <__mempcpy_chk@plt+0xaac>
   11bf4:	movw	r0, #28928	; 0x7100
   11bf8:	movt	r0, #2
   11bfc:	ldr	r3, [r0]
   11c00:	movw	r0, #29020	; 0x715c
   11c04:	movt	r0, #2
   11c08:	ldr	r0, [r0]
   11c0c:	mov	r1, #0
   11c10:	movw	r2, #24598	; 0x6016
   11c14:	movt	r2, #1
   11c18:	str	r2, [sp]
   11c1c:	str	r1, [sp, #4]
   11c20:	movw	r1, #24549	; 0x5fe5
   11c24:	movt	r1, #1
   11c28:	movw	r2, #24584	; 0x6008
   11c2c:	movt	r2, #1
   11c30:	bl	14b8c <__mempcpy_chk@plt+0x39fc>
   11c34:	mov	r0, #0
   11c38:	bl	11088 <exit@plt>
   11c3c:	cmn	r0, #2
   11c40:	bne	11c9c <__mempcpy_chk@plt+0xb0c>
   11c44:	mov	r0, #0
   11c48:	bl	11290 <__mempcpy_chk@plt+0x100>
   11c4c:	movw	r1, #24613	; 0x6025
   11c50:	movt	r1, #1
   11c54:	b	11cac <__mempcpy_chk@plt+0xb1c>
   11c58:	movw	r1, #24629	; 0x6035
   11c5c:	movt	r1, #1
   11c60:	mov	r0, #0
   11c64:	mov	r2, #5
   11c68:	bl	10fa4 <dcgettext@plt>
   11c6c:	mov	r4, r0
   11c70:	ldr	r0, [r8]
   11c74:	add	r0, r5, r0, lsl #2
   11c78:	ldr	r0, [r0, #12]
   11c7c:	bl	143bc <__mempcpy_chk@plt+0x322c>
   11c80:	mov	r3, r0
   11c84:	mov	r0, #0
   11c88:	mov	r1, #0
   11c8c:	mov	r2, r4
   11c90:	bl	11028 <error@plt>
   11c94:	mov	r0, #1
   11c98:	bl	11290 <__mempcpy_chk@plt+0x100>
   11c9c:	mov	r0, #1
   11ca0:	bl	11290 <__mempcpy_chk@plt+0x100>
   11ca4:	movw	r1, #24646	; 0x6046
   11ca8:	movt	r1, #1
   11cac:	mov	r0, #0
   11cb0:	mov	r2, #5
   11cb4:	bl	10fa4 <dcgettext@plt>
   11cb8:	mov	r2, r0
   11cbc:	mov	r0, #0
   11cc0:	mov	r1, #0
   11cc4:	bl	11028 <error@plt>
   11cc8:	mov	r0, #1
   11ccc:	bl	11290 <__mempcpy_chk@plt+0x100>
   11cd0:	movw	r1, #24717	; 0x608d
   11cd4:	movt	r1, #1
   11cd8:	mov	r0, #0
   11cdc:	mov	r2, #5
   11ce0:	bl	10fa4 <dcgettext@plt>
   11ce4:	mov	r4, r0
   11ce8:	movw	r0, #29008	; 0x7150
   11cec:	movt	r0, #2
   11cf0:	ldr	r0, [r0]
   11cf4:	add	r0, r5, r0, lsl #2
   11cf8:	ldr	r0, [r0, #-4]
   11cfc:	b	11c7c <__mempcpy_chk@plt+0xaec>
   11d00:	andeq	r0, r0, r0
   11d04:	rsbmi	r0, r9, r0
   11d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d0c:	add	fp, sp, #28
   11d10:	sub	sp, sp, #12
   11d14:	mov	r8, r1
   11d18:	mov	r4, r0
   11d1c:	mov	r5, #0
   11d20:	mov	r0, #0
   11d24:	b	11d3c <__mempcpy_chk@plt+0xbac>
   11d28:	cmp	r1, #37	; 0x25
   11d2c:	mov	r1, #1
   11d30:	movweq	r1, #2
   11d34:	add	r0, r1, r0
   11d38:	add	r5, r5, #1
   11d3c:	ldrb	r1, [r4, r0]
   11d40:	cmp	r1, #37	; 0x25
   11d44:	bne	11d5c <__mempcpy_chk@plt+0xbcc>
   11d48:	add	r6, r0, #1
   11d4c:	ldrb	r2, [r4, r6]
   11d50:	cmp	r2, #37	; 0x25
   11d54:	beq	11d28 <__mempcpy_chk@plt+0xb98>
   11d58:	b	11d70 <__mempcpy_chk@plt+0xbe0>
   11d5c:	cmp	r1, #0
   11d60:	bne	11d28 <__mempcpy_chk@plt+0xb98>
   11d64:	movw	r1, #25188	; 0x6264
   11d68:	movt	r1, #1
   11d6c:	b	11e90 <__mempcpy_chk@plt+0xd00>
   11d70:	add	r0, r4, r6
   11d74:	movw	r1, #25218	; 0x6282
   11d78:	movt	r1, #1
   11d7c:	bl	11184 <strspn@plt>
   11d80:	add	r6, r0, r6
   11d84:	add	r0, r4, r6
   11d88:	movw	r1, #25225	; 0x6289
   11d8c:	movt	r1, #1
   11d90:	bl	11184 <strspn@plt>
   11d94:	add	r6, r6, r0
   11d98:	ldrb	r0, [r4, r6]
   11d9c:	cmp	r0, #46	; 0x2e
   11da0:	bne	11dbc <__mempcpy_chk@plt+0xc2c>
   11da4:	add	r6, r6, #1
   11da8:	add	r0, r4, r6
   11dac:	movw	r1, #25225	; 0x6289
   11db0:	movt	r1, #1
   11db4:	bl	11184 <strspn@plt>
   11db8:	add	r6, r0, r6
   11dbc:	mov	r9, r4
   11dc0:	ldrb	r0, [r9, r6]!
   11dc4:	sub	r0, r0, #76	; 0x4c
   11dc8:	clz	r0, r0
   11dcc:	lsr	sl, r0, #5
   11dd0:	add	r7, r6, sl
   11dd4:	ldrb	r1, [r4, r7]
   11dd8:	cmp	r1, #0
   11ddc:	beq	11ebc <__mempcpy_chk@plt+0xd2c>
   11de0:	str	r8, [sp, #8]
   11de4:	movw	r0, #25257	; 0x62a9
   11de8:	movt	r0, #1
   11dec:	mov	r2, #9
   11df0:	bl	11100 <memchr@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11ec8 <__mempcpy_chk@plt+0xd38>
   11dfc:	add	r0, r7, #1
   11e00:	mov	r8, #0
   11e04:	b	11e1c <__mempcpy_chk@plt+0xc8c>
   11e08:	cmp	r1, #37	; 0x25
   11e0c:	mov	r1, #1
   11e10:	movweq	r1, #2
   11e14:	add	r0, r1, r0
   11e18:	add	r8, r8, #1
   11e1c:	ldrb	r1, [r4, r0]
   11e20:	cmp	r1, #37	; 0x25
   11e24:	bne	11e3c <__mempcpy_chk@plt+0xcac>
   11e28:	add	r2, r4, r0
   11e2c:	ldrb	r2, [r2, #1]
   11e30:	cmp	r2, #37	; 0x25
   11e34:	beq	11e08 <__mempcpy_chk@plt+0xc78>
   11e38:	b	11e88 <__mempcpy_chk@plt+0xcf8>
   11e3c:	cmp	r1, #0
   11e40:	bne	11e08 <__mempcpy_chk@plt+0xc78>
   11e44:	add	r0, r0, #2
   11e48:	bl	14c94 <__mempcpy_chk@plt+0x3b04>
   11e4c:	mov	r7, r0
   11e50:	mov	r1, r4
   11e54:	mov	r2, r6
   11e58:	bl	10f68 <memcpy@plt>
   11e5c:	mov	r0, #76	; 0x4c
   11e60:	mov	r1, r7
   11e64:	strb	r0, [r1, r6]!
   11e68:	add	r0, r1, #1
   11e6c:	add	r1, r9, sl
   11e70:	bl	10ff8 <strcpy@plt>
   11e74:	ldr	r0, [sp, #8]
   11e78:	stm	r0, {r5, r8}
   11e7c:	mov	r0, r7
   11e80:	sub	sp, fp, #28
   11e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e88:	movw	r1, #25303	; 0x62d7
   11e8c:	movt	r1, #1
   11e90:	mov	r0, #0
   11e94:	mov	r2, #5
   11e98:	bl	10fa4 <dcgettext@plt>
   11e9c:	mov	r5, r0
   11ea0:	mov	r0, r4
   11ea4:	bl	143bc <__mempcpy_chk@plt+0x322c>
   11ea8:	mov	r3, r0
   11eac:	mov	r0, #1
   11eb0:	mov	r1, #0
   11eb4:	mov	r2, r5
   11eb8:	bl	11028 <error@plt>
   11ebc:	movw	r1, #25236	; 0x6294
   11ec0:	movt	r1, #1
   11ec4:	b	11e90 <__mempcpy_chk@plt+0xd00>
   11ec8:	movw	r1, #25266	; 0x62b2
   11ecc:	movt	r1, #1
   11ed0:	mov	r0, #0
   11ed4:	mov	r2, #5
   11ed8:	bl	10fa4 <dcgettext@plt>
   11edc:	mov	r5, r0
   11ee0:	mov	r0, r4
   11ee4:	bl	143bc <__mempcpy_chk@plt+0x322c>
   11ee8:	mov	r3, r0
   11eec:	ldrb	r0, [r4, r7]
   11ef0:	str	r0, [sp]
   11ef4:	b	11eac <__mempcpy_chk@plt+0xd1c>
   11ef8:	push	{r4, r5, fp, lr}
   11efc:	add	fp, sp, #8
   11f00:	mov	r4, r0
   11f04:	ldrb	r0, [r0]
   11f08:	sub	r1, r0, #48	; 0x30
   11f0c:	mov	r0, #0
   11f10:	cmp	r1, #9
   11f14:	pophi	{r4, r5, fp, pc}
   11f18:	mov	r0, r4
   11f1c:	bl	11094 <strlen@plt>
   11f20:	mov	r5, r0
   11f24:	movw	r1, #25225	; 0x6289
   11f28:	movt	r1, #1
   11f2c:	mov	r0, r4
   11f30:	bl	11184 <strspn@plt>
   11f34:	sub	r0, r5, r0
   11f38:	clz	r0, r0
   11f3c:	lsr	r0, r0, #5
   11f40:	pop	{r4, r5, fp, pc}
   11f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f48:	add	fp, sp, #28
   11f4c:	sub	sp, sp, #52	; 0x34
   11f50:	str	r3, [sp, #32]
   11f54:	str	r2, [sp, #4]
   11f58:	mov	r5, r1
   11f5c:	mov	r4, r0
   11f60:	movw	r1, #24756	; 0x60b4
   11f64:	movt	r1, #1
   11f68:	mov	r0, r5
   11f6c:	bl	10f14 <strcmp@plt>
   11f70:	mov	r6, r0
   11f74:	mov	r0, r4
   11f78:	bl	128d0 <__mempcpy_chk@plt+0x1740>
   11f7c:	mov	r7, r0
   11f80:	mov	r0, r5
   11f84:	bl	128d0 <__mempcpy_chk@plt+0x1740>
   11f88:	mov	r4, r0
   11f8c:	str	r7, [sp, #40]	; 0x28
   11f90:	mov	r0, r7
   11f94:	bl	11094 <strlen@plt>
   11f98:	mov	r8, r0
   11f9c:	str	r0, [fp, #-32]	; 0xffffffe0
   11fa0:	mov	r0, #0
   11fa4:	str	r0, [sp, #12]
   11fa8:	str	r6, [sp, #36]	; 0x24
   11fac:	cmp	r6, #0
   11fb0:	mov	sl, #0
   11fb4:	beq	11fc4 <__mempcpy_chk@plt+0xe34>
   11fb8:	mov	r0, r4
   11fbc:	bl	11094 <strlen@plt>
   11fc0:	mov	sl, r0
   11fc4:	str	r4, [sp, #28]
   11fc8:	add	r4, r8, #1
   11fcc:	cmp	r4, sl
   11fd0:	mov	r9, sl
   11fd4:	movhi	r9, r4
   11fd8:	cmp	r9, #31
   11fdc:	movls	r9, #31
   11fe0:	add	r5, r9, #1
   11fe4:	mov	r0, r5
   11fe8:	bl	14c94 <__mempcpy_chk@plt+0x3b04>
   11fec:	mov	r7, r0
   11ff0:	add	r0, r0, r9
   11ff4:	sub	r6, r0, r8
   11ff8:	mov	r0, r6
   11ffc:	ldr	r1, [sp, #40]	; 0x28
   12000:	mov	r2, r4
   12004:	bl	10f68 <memcpy@plt>
   12008:	str	r6, [fp, #-36]	; 0xffffffdc
   1200c:	ldr	r0, [sp, #36]	; 0x24
   12010:	cmp	r0, #0
   12014:	beq	12074 <__mempcpy_chk@plt+0xee4>
   12018:	mov	r0, r5
   1201c:	bl	14c94 <__mempcpy_chk@plt+0x3b04>
   12020:	str	r0, [sp, #40]	; 0x28
   12024:	add	r0, r0, r9
   12028:	sub	r4, r0, sl
   1202c:	add	r2, sl, #1
   12030:	mov	r0, r4
   12034:	ldr	r1, [sp, #28]
   12038:	bl	10f68 <memcpy@plt>
   1203c:	mov	r0, r6
   12040:	mov	r1, r8
   12044:	str	r4, [sp, #12]
   12048:	mov	r2, r4
   1204c:	mov	r3, sl
   12050:	bl	12900 <__mempcpy_chk@plt+0x1770>
   12054:	cmp	r0, #0
   12058:	ble	12074 <__mempcpy_chk@plt+0xee4>
   1205c:	mov	r0, r7
   12060:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   12064:	ldr	r0, [sp, #40]	; 0x28
   12068:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   1206c:	sub	sp, fp, #28
   12070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12074:	str	r7, [sp, #28]
   12078:	mov	r7, r9
   1207c:	str	sl, [sp, #8]
   12080:	lsl	r0, r5, #1
   12084:	mov	r4, #8192	; 0x2000
   12088:	cmp	r0, #8192	; 0x2000
   1208c:	lslhi	r4, r5, #1
   12090:	mov	r0, r4
   12094:	bl	14c94 <__mempcpy_chk@plt+0x3b04>
   12098:	str	r4, [sp, #16]
   1209c:	add	r1, r0, r4
   120a0:	str	r1, [sp, #40]	; 0x28
   120a4:	str	r0, [sp, #24]
   120a8:	mov	r1, r6
   120ac:	mov	r2, r8
   120b0:	mvn	r3, #0
   120b4:	bl	11190 <__mempcpy_chk@plt>
   120b8:	mov	r8, r0
   120bc:	ldr	r5, [sp, #4]
   120c0:	ldr	r0, [sp, #32]
   120c4:	orr	r0, r5, r0
   120c8:	str	r0, [sp, #20]
   120cc:	sub	r9, fp, #36	; 0x24
   120d0:	sub	sl, fp, #32
   120d4:	ldr	r0, [sp, #20]
   120d8:	cmp	r0, #0
   120dc:	mov	r4, r5
   120e0:	ldr	r6, [sp, #32]
   120e4:	beq	12104 <__mempcpy_chk@plt+0xf74>
   120e8:	mov	r0, r9
   120ec:	mov	r1, sl
   120f0:	bl	1292c <__mempcpy_chk@plt+0x179c>
   120f4:	subs	r4, r4, #1
   120f8:	sbc	r6, r6, #0
   120fc:	orrs	r0, r4, r6
   12100:	bne	120e8 <__mempcpy_chk@plt+0xf58>
   12104:	ldr	r0, [sp, #36]	; 0x24
   12108:	cmp	r0, #0
   1210c:	beq	1212c <__mempcpy_chk@plt+0xf9c>
   12110:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12114:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12118:	ldr	r2, [sp, #12]
   1211c:	ldr	r3, [sp, #8]
   12120:	bl	12900 <__mempcpy_chk@plt+0x1770>
   12124:	cmp	r0, #0
   12128:	bgt	1221c <__mempcpy_chk@plt+0x108c>
   1212c:	movw	r0, #29036	; 0x716c
   12130:	movt	r0, #2
   12134:	ldr	r0, [r0]
   12138:	ldrb	r0, [r0]
   1213c:	strb	r0, [r8], #1
   12140:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12144:	cmp	r6, r7
   12148:	bne	121c0 <__mempcpy_chk@plt+0x1030>
   1214c:	mov	r5, r7
   12150:	mov	r0, #1
   12154:	orr	r4, r0, r7, lsl #1
   12158:	ldr	r0, [sp, #28]
   1215c:	mov	r1, r4
   12160:	bl	14cd4 <__mempcpy_chk@plt+0x3b44>
   12164:	mov	r1, r0
   12168:	add	r7, r0, r6
   1216c:	add	r2, r6, #1
   12170:	mov	r0, r7
   12174:	str	r1, [sp, #28]
   12178:	bl	10f44 <memmove@plt>
   1217c:	str	r7, [fp, #-36]	; 0xffffffdc
   12180:	lsl	r5, r5, #1
   12184:	mov	r7, r5
   12188:	ldr	r0, [sp, #16]
   1218c:	cmp	r0, r4, lsl #1
   12190:	bcs	121bc <__mempcpy_chk@plt+0x102c>
   12194:	lsl	r5, r4, #1
   12198:	ldr	r0, [sp, #24]
   1219c:	sub	r4, r8, r0
   121a0:	mov	r1, r5
   121a4:	bl	14cd4 <__mempcpy_chk@plt+0x3b44>
   121a8:	add	r8, r0, r4
   121ac:	str	r5, [sp, #16]
   121b0:	str	r0, [sp, #24]
   121b4:	add	r0, r0, r5
   121b8:	str	r0, [sp, #40]	; 0x28
   121bc:	ldr	r5, [sp, #4]
   121c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   121c4:	mov	r0, r8
   121c8:	mov	r2, r6
   121cc:	mvn	r3, #0
   121d0:	bl	11190 <__mempcpy_chk@plt>
   121d4:	mov	r8, r0
   121d8:	mvn	r0, r6
   121dc:	ldr	r1, [sp, #40]	; 0x28
   121e0:	add	r0, r1, r0
   121e4:	cmp	r0, r8
   121e8:	bcs	120d4 <__mempcpy_chk@plt+0xf44>
   121ec:	ldr	r4, [sp, #24]
   121f0:	sub	r1, r8, r4
   121f4:	movw	r0, #29020	; 0x715c
   121f8:	movt	r0, #2
   121fc:	ldr	r3, [r0]
   12200:	mov	r0, r4
   12204:	mov	r2, #1
   12208:	bl	10f8c <fwrite_unlocked@plt>
   1220c:	cmp	r0, #1
   12210:	mov	r8, r4
   12214:	beq	120d4 <__mempcpy_chk@plt+0xf44>
   12218:	b	12250 <__mempcpy_chk@plt+0x10c0>
   1221c:	mov	r0, #10
   12220:	strb	r0, [r8], #1
   12224:	ldr	r0, [sp, #24]
   12228:	sub	r1, r8, r0
   1222c:	movw	r2, #29020	; 0x715c
   12230:	movt	r2, #2
   12234:	ldr	r3, [r2]
   12238:	mov	r2, #1
   1223c:	bl	10f8c <fwrite_unlocked@plt>
   12240:	cmp	r0, #1
   12244:	bne	12250 <__mempcpy_chk@plt+0x10c0>
   12248:	mov	r0, #0
   1224c:	bl	11088 <exit@plt>
   12250:	bl	1298c <__mempcpy_chk@plt+0x17fc>
   12254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12258:	add	fp, sp, #28
   1225c:	sub	sp, sp, #4
   12260:	vpush	{d8}
   12264:	sub	sp, sp, #16
   12268:	mov	r5, r1
   1226c:	mov	r4, r0
   12270:	movw	r3, #10708	; 0x29d4
   12274:	movt	r3, #1
   12278:	mov	r0, r1
   1227c:	mov	r1, #0
   12280:	mov	r2, r4
   12284:	bl	15088 <__mempcpy_chk@plt+0x3ef8>
   12288:	cmp	r0, #0
   1228c:	beq	124f0 <__mempcpy_chk@plt+0x1360>
   12290:	vldr	d8, [r4]
   12294:	vcmpe.f64	d8, d8
   12298:	vmrs	APSR_nzcv, fpscr
   1229c:	bvs	12524 <__mempcpy_chk@plt+0x1394>
   122a0:	sub	r5, r5, #1
   122a4:	bl	1107c <__ctype_b_loc@plt>
   122a8:	ldr	r6, [r0]
   122ac:	ldrb	r0, [r5, #1]!
   122b0:	bl	129d0 <__mempcpy_chk@plt+0x1840>
   122b4:	add	r1, r6, r0, lsl #1
   122b8:	ldrh	r1, [r1]
   122bc:	and	r1, r1, #8192	; 0x2000
   122c0:	cmp	r0, #43	; 0x2b
   122c4:	beq	122ac <__mempcpy_chk@plt+0x111c>
   122c8:	cmp	r1, #0
   122cc:	bne	122ac <__mempcpy_chk@plt+0x111c>
   122d0:	mvn	r1, #-2147483648	; 0x80000000
   122d4:	mov	r0, #0
   122d8:	strd	r0, [r4, #8]
   122dc:	mov	r0, r5
   122e0:	mov	r1, #46	; 0x2e
   122e4:	bl	110a0 <strchr@plt>
   122e8:	mov	r9, r0
   122ec:	cmp	r0, #0
   122f0:	bne	1230c <__mempcpy_chk@plt+0x117c>
   122f4:	mov	r0, r5
   122f8:	mov	r1, #112	; 0x70
   122fc:	bl	110a0 <strchr@plt>
   12300:	cmp	r0, #0
   12304:	moveq	r0, #0
   12308:	streq	r0, [r4, #12]
   1230c:	movw	r1, #25425	; 0x6351
   12310:	movt	r1, #1
   12314:	mov	r0, r5
   12318:	bl	10f2c <strcspn@plt>
   1231c:	vmov.i32	d16, #0	; 0x00000000
   12320:	vmul.f64	d16, d8, d16
   12324:	vcmp.f64	d16, #0.0
   12328:	vmrs	APSR_nzcv, fpscr
   1232c:	ldrbeq	r0, [r5, r0]
   12330:	cmpeq	r0, #0
   12334:	bne	124e0 <__mempcpy_chk@plt+0x1350>
   12338:	mov	r0, r5
   1233c:	bl	11094 <strlen@plt>
   12340:	str	r0, [r4, #8]
   12344:	cmp	r9, #0
   12348:	beq	12394 <__mempcpy_chk@plt+0x1204>
   1234c:	mov	r6, r0
   12350:	add	r0, r9, #1
   12354:	movw	r1, #25428	; 0x6354
   12358:	movt	r1, #1
   1235c:	bl	10f2c <strcspn@plt>
   12360:	mov	r8, r0
   12364:	cmp	r0, #0
   12368:	blt	12374 <__mempcpy_chk@plt+0x11e4>
   1236c:	str	r8, [r4, #12]
   12370:	beq	123a4 <__mempcpy_chk@plt+0x1214>
   12374:	cmp	r9, r5
   12378:	beq	1239c <__mempcpy_chk@plt+0x120c>
   1237c:	ldrb	r0, [r9, #-1]
   12380:	sub	r1, r0, #48	; 0x30
   12384:	mov	r0, #0
   12388:	cmp	r1, #9
   1238c:	movwhi	r0, #1
   12390:	b	123a8 <__mempcpy_chk@plt+0x1218>
   12394:	mov	r8, #0
   12398:	b	123b0 <__mempcpy_chk@plt+0x1220>
   1239c:	mov	r0, #1
   123a0:	b	123a8 <__mempcpy_chk@plt+0x1218>
   123a4:	mvn	r0, #0
   123a8:	add	r0, r0, r6
   123ac:	str	r0, [r4, #8]
   123b0:	mov	r0, r5
   123b4:	mov	r1, #101	; 0x65
   123b8:	bl	110a0 <strchr@plt>
   123bc:	mov	r7, r0
   123c0:	cmp	r0, #0
   123c4:	bne	123e0 <__mempcpy_chk@plt+0x1250>
   123c8:	mov	r0, r5
   123cc:	mov	r1, #69	; 0x45
   123d0:	bl	110a0 <strchr@plt>
   123d4:	mov	r7, r0
   123d8:	cmp	r0, #0
   123dc:	beq	124e0 <__mempcpy_chk@plt+0x1350>
   123e0:	add	r6, r7, #1
   123e4:	mov	r0, r6
   123e8:	mov	r1, #0
   123ec:	mov	r2, #10
   123f0:	bl	10f20 <strtol@plt>
   123f4:	mov	sl, #-2147483647	; 0x80000001
   123f8:	cmp	r0, #-2147483646	; 0x80000002
   123fc:	str	r8, [sp, #8]
   12400:	blt	1243c <__mempcpy_chk@plt+0x12ac>
   12404:	mov	r0, r6
   12408:	mov	r1, #0
   1240c:	mov	r2, #10
   12410:	bl	10f20 <strtol@plt>
   12414:	mov	sl, r0
   12418:	cmp	r0, #0
   1241c:	blt	1244c <__mempcpy_chk@plt+0x12bc>
   12420:	ldr	r1, [r4, #12]
   12424:	cmp	r1, sl
   12428:	mov	r0, sl
   1242c:	movlt	r0, r1
   12430:	mov	r1, #0
   12434:	str	r1, [sp, #12]
   12438:	b	12458 <__mempcpy_chk@plt+0x12c8>
   1243c:	mov	r0, #1
   12440:	str	r0, [sp, #12]
   12444:	mov	r0, #-2147483647	; 0x80000001
   12448:	b	12458 <__mempcpy_chk@plt+0x12c8>
   1244c:	mov	r0, #1
   12450:	str	r0, [sp, #12]
   12454:	mov	r0, sl
   12458:	ldr	r1, [r4, #12]
   1245c:	sub	r6, r1, r0
   12460:	str	r6, [r4, #12]
   12464:	sub	r8, r7, r5
   12468:	mov	r0, r5
   1246c:	bl	11094 <strlen@plt>
   12470:	sub	r0, r8, r0
   12474:	ldr	r1, [r4, #8]
   12478:	add	r0, r0, r1
   1247c:	str	r0, [r4, #8]
   12480:	ldr	r1, [sp, #12]
   12484:	cmp	r1, #0
   12488:	beq	124ac <__mempcpy_chk@plt+0x131c>
   1248c:	add	r1, r9, #1
   12490:	cmp	r7, r1
   12494:	cmpne	r9, #0
   12498:	bne	124a4 <__mempcpy_chk@plt+0x1314>
   1249c:	add	r0, r0, #1
   124a0:	str	r0, [r4, #8]
   124a4:	rsb	r0, sl, #0
   124a8:	b	124d4 <__mempcpy_chk@plt+0x1344>
   124ac:	cmp	r9, #0
   124b0:	ldr	r1, [sp, #8]
   124b4:	cmpne	r1, #0
   124b8:	beq	124c8 <__mempcpy_chk@plt+0x1338>
   124bc:	cmp	r6, #0
   124c0:	subeq	r0, r0, #1
   124c4:	streq	r0, [r4, #8]
   124c8:	cmp	r1, sl
   124cc:	movcs	r1, sl
   124d0:	sub	r0, sl, r1
   124d4:	ldr	r1, [r4, #8]
   124d8:	add	r0, r1, r0
   124dc:	str	r0, [r4, #8]
   124e0:	sub	sp, fp, #40	; 0x28
   124e4:	vpop	{d8}
   124e8:	add	sp, sp, #4
   124ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f0:	movw	r1, #25352	; 0x6308
   124f4:	movt	r1, #1
   124f8:	mov	r0, #0
   124fc:	mov	r2, #5
   12500:	bl	10fa4 <dcgettext@plt>
   12504:	mov	r4, r0
   12508:	mov	r0, r5
   1250c:	bl	143bc <__mempcpy_chk@plt+0x322c>
   12510:	mov	r3, r0
   12514:	mov	r0, #0
   12518:	mov	r1, #0
   1251c:	mov	r2, r4
   12520:	b	12570 <__mempcpy_chk@plt+0x13e0>
   12524:	movw	r1, #25388	; 0x632c
   12528:	movt	r1, #1
   1252c:	mov	r0, #0
   12530:	mov	r2, #5
   12534:	bl	10fa4 <dcgettext@plt>
   12538:	mov	r4, r0
   1253c:	movw	r1, #25412	; 0x6344
   12540:	movt	r1, #1
   12544:	mov	r0, #0
   12548:	bl	143b4 <__mempcpy_chk@plt+0x3224>
   1254c:	mov	r6, r0
   12550:	mov	r0, #1
   12554:	mov	r1, r5
   12558:	bl	143b4 <__mempcpy_chk@plt+0x3224>
   1255c:	str	r0, [sp]
   12560:	mov	r0, #0
   12564:	mov	r1, #0
   12568:	mov	r2, r4
   1256c:	mov	r3, r6
   12570:	bl	11028 <error@plt>
   12574:	mov	r0, #1
   12578:	bl	11290 <__mempcpy_chk@plt+0x100>
   1257c:	push	{r4, r5, fp, lr}
   12580:	add	fp, sp, #8
   12584:	sub	sp, sp, #8
   12588:	ldr	r0, [fp, #20]
   1258c:	cmp	r3, r0
   12590:	movgt	r0, r3
   12594:	movw	r5, #25450	; 0x636a
   12598:	movt	r5, #1
   1259c:	ldr	r1, [fp, #36]	; 0x24
   125a0:	cmn	r1, #-2147483647	; 0x80000001
   125a4:	cmnne	r0, #-2147483647	; 0x80000001
   125a8:	beq	12668 <__mempcpy_chk@plt+0x14d8>
   125ac:	movw	r4, #29033	; 0x7169
   125b0:	movt	r4, #2
   125b4:	ldrb	r4, [r4]
   125b8:	cmp	r4, #1
   125bc:	bne	12644 <__mempcpy_chk@plt+0x14b4>
   125c0:	ldr	ip, [fp, #32]
   125c4:	sub	r2, r2, r3
   125c8:	add	r2, r2, r0
   125cc:	cmp	r0, #0
   125d0:	mov	r4, r0
   125d4:	movwne	r4, #1
   125d8:	clz	r3, r3
   125dc:	lsr	r3, r3, #5
   125e0:	and	r3, r3, r4
   125e4:	add	r2, r2, r3
   125e8:	sub	r3, ip, r1
   125ec:	add	ip, r3, r0
   125f0:	cmp	r1, #0
   125f4:	clz	lr, r1
   125f8:	movwne	r1, #1
   125fc:	clz	r3, r0
   12600:	lsr	r3, r3, #5
   12604:	and	r1, r1, r3
   12608:	sub	r1, ip, r1
   1260c:	lsr	r3, lr, #5
   12610:	and	r3, r3, r4
   12614:	add	r1, r1, r3
   12618:	cmp	r2, r1
   1261c:	movhi	r1, r2
   12620:	cmp	r1, #0
   12624:	blt	12668 <__mempcpy_chk@plt+0x14d8>
   12628:	str	r1, [sp]
   1262c:	str	r0, [sp, #4]
   12630:	movw	r5, #29040	; 0x7170
   12634:	movt	r5, #2
   12638:	movw	r3, #25431	; 0x6357
   1263c:	movt	r3, #1
   12640:	b	12658 <__mempcpy_chk@plt+0x14c8>
   12644:	str	r0, [sp]
   12648:	movw	r5, #29040	; 0x7170
   1264c:	movt	r5, #2
   12650:	movw	r3, #25442	; 0x6362
   12654:	movt	r3, #1
   12658:	mov	r0, r5
   1265c:	mov	r1, #1
   12660:	mov	r2, #28
   12664:	bl	110b8 <__sprintf_chk@plt>
   12668:	mov	r0, r5
   1266c:	sub	sp, fp, #8
   12670:	pop	{r4, r5, fp, pc}
   12674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12678:	add	fp, sp, #28
   1267c:	sub	sp, sp, #4
   12680:	vpush	{d8-d14}
   12684:	sub	sp, sp, #32
   12688:	str	r1, [sp, #12]
   1268c:	mov	r9, r0
   12690:	mov	r0, #0
   12694:	vcmpe.f64	d0, d2
   12698:	vmrs	APSR_nzcv, fpscr
   1269c:	mov	r1, #0
   126a0:	movwmi	r1, #1
   126a4:	vcmpe.f64	d2, d0
   126a8:	vmrs	APSR_nzcv, fpscr
   126ac:	movwmi	r0, #1
   126b0:	vcmpe.f64	d1, #0.0
   126b4:	vmrs	APSR_nzcv, fpscr
   126b8:	movmi	r0, r1
   126bc:	cmp	r0, #0
   126c0:	bne	128bc <__mempcpy_chk@plt+0x172c>
   126c4:	vmov.f64	d8, d2
   126c8:	vmov.f64	d9, d1
   126cc:	vmov.f64	d10, d0
   126d0:	mov	sl, r2
   126d4:	vmov	r2, r3, d0
   126d8:	mov	r0, #1
   126dc:	mov	r1, r9
   126e0:	bl	110dc <__printf_chk@plt>
   126e4:	cmp	r0, #0
   126e8:	blt	12898 <__mempcpy_chk@plt+0x1708>
   126ec:	vmov.f64	d11, #112	; 0x3f800000  1.0
   126f0:	mov	r4, #0
   126f4:	movw	r7, #29032	; 0x7168
   126f8:	movt	r7, #2
   126fc:	movw	r5, #29020	; 0x715c
   12700:	movt	r5, #2
   12704:	movw	r6, #29036	; 0x716c
   12708:	movt	r6, #2
   1270c:	mov	r8, #0
   12710:	vmov.f64	d14, d10
   12714:	vmov.f64	d12, d11
   12718:	tst	r8, #1
   1271c:	bne	128a4 <__mempcpy_chk@plt+0x1714>
   12720:	vmov.f64	d13, d10
   12724:	vmla.f64	d13, d12, d9
   12728:	vcmpe.f64	d13, d8
   1272c:	vmrs	APSR_nzcv, fpscr
   12730:	mov	r0, #0
   12734:	movwmi	r0, #1
   12738:	mov	r8, #0
   1273c:	movwgt	r8, #1
   12740:	vcmpe.f64	d9, #0.0
   12744:	vmrs	APSR_nzcv, fpscr
   12748:	movmi	r8, r0
   1274c:	cmp	r8, #1
   12750:	bne	12864 <__mempcpy_chk@plt+0x16d4>
   12754:	mov	r6, sl
   12758:	ldrb	r0, [r7]
   1275c:	cmp	r0, #0
   12760:	beq	12774 <__mempcpy_chk@plt+0x15e4>
   12764:	mov	r0, #1
   12768:	movw	r1, #25454	; 0x636e
   1276c:	movt	r1, #1
   12770:	bl	11124 <setlocale@plt>
   12774:	vstr	d13, [sp]
   12778:	add	r0, sp, #20
   1277c:	mov	r1, #1
   12780:	mov	r2, r9
   12784:	bl	11034 <__asprintf_chk@plt>
   12788:	mov	sl, r0
   1278c:	ldrb	r0, [r7]
   12790:	cmp	r0, #0
   12794:	beq	127a8 <__mempcpy_chk@plt+0x1618>
   12798:	mov	r0, #1
   1279c:	movw	r1, #25145	; 0x6239
   127a0:	movt	r1, #1
   127a4:	bl	11124 <setlocale@plt>
   127a8:	cmn	sl, #1
   127ac:	ble	128cc <__mempcpy_chk@plt+0x173c>
   127b0:	sub	r0, sl, r6
   127b4:	mov	sl, r6
   127b8:	ldr	r1, [sp, #20]
   127bc:	strb	r4, [r1, r0]
   127c0:	ldr	r0, [sp, #20]
   127c4:	ldr	r1, [sp, #12]
   127c8:	add	r0, r0, r1
   127cc:	mov	r1, #0
   127d0:	add	r2, sp, #24
   127d4:	movw	r3, #10708	; 0x29d4
   127d8:	movt	r3, #1
   127dc:	bl	15088 <__mempcpy_chk@plt+0x3ef8>
   127e0:	cmp	r0, #0
   127e4:	beq	1289c <__mempcpy_chk@plt+0x170c>
   127e8:	vldr	d16, [sp, #24]
   127ec:	vcmp.f64	d16, d8
   127f0:	vmrs	APSR_nzcv, fpscr
   127f4:	bne	1289c <__mempcpy_chk@plt+0x170c>
   127f8:	mov	r6, r7
   127fc:	str	r4, [sp, #16]
   12800:	vstr	d14, [sp]
   12804:	add	r0, sp, #16
   12808:	mov	r1, #1
   1280c:	mov	r2, r9
   12810:	bl	11034 <__asprintf_chk@plt>
   12814:	cmn	r0, #1
   12818:	ble	128cc <__mempcpy_chk@plt+0x173c>
   1281c:	sub	r0, r0, sl
   12820:	ldr	r1, [sp, #16]
   12824:	strb	r4, [r1, r0]
   12828:	ldr	r1, [sp, #20]
   1282c:	ldr	r7, [sp, #16]
   12830:	mov	r0, r7
   12834:	bl	10f14 <strcmp@plt>
   12838:	mov	r4, r0
   1283c:	mov	r0, r7
   12840:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   12844:	ldr	r0, [sp, #20]
   12848:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   1284c:	cmp	r4, #0
   12850:	beq	128a4 <__mempcpy_chk@plt+0x1714>
   12854:	mov	r4, #0
   12858:	mov	r7, r6
   1285c:	movw	r6, #29036	; 0x716c
   12860:	movt	r6, #2
   12864:	ldr	r1, [r5]
   12868:	ldr	r0, [r6]
   1286c:	bl	10efc <fputs_unlocked@plt>
   12870:	cmn	r0, #1
   12874:	beq	12898 <__mempcpy_chk@plt+0x1708>
   12878:	vmov	r2, r3, d13
   1287c:	mov	r0, #1
   12880:	mov	r1, r9
   12884:	bl	110dc <__printf_chk@plt>
   12888:	vadd.f64	d12, d12, d11
   1288c:	cmp	r0, #0
   12890:	vmov.f64	d14, d13
   12894:	bge	12718 <__mempcpy_chk@plt+0x1588>
   12898:	bl	1298c <__mempcpy_chk@plt+0x17fc>
   1289c:	ldr	r0, [sp, #20]
   128a0:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   128a4:	ldr	r1, [r5]
   128a8:	movw	r0, #25624	; 0x6418
   128ac:	movt	r0, #1
   128b0:	bl	10efc <fputs_unlocked@plt>
   128b4:	cmn	r0, #1
   128b8:	beq	12898 <__mempcpy_chk@plt+0x1708>
   128bc:	sub	sp, fp, #88	; 0x58
   128c0:	vpop	{d8-d14}
   128c4:	add	sp, sp, #4
   128c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128cc:	bl	15044 <__mempcpy_chk@plt+0x3eb4>
   128d0:	mov	r1, #0
   128d4:	b	128e0 <__mempcpy_chk@plt+0x1750>
   128d8:	sub	r1, r1, #1
   128dc:	add	r0, r0, #1
   128e0:	ldrb	r2, [r0]
   128e4:	cmp	r2, #48	; 0x30
   128e8:	beq	128d8 <__mempcpy_chk@plt+0x1748>
   128ec:	cmp	r2, #0
   128f0:	bxne	lr
   128f4:	cmp	r1, #0
   128f8:	subne	r0, r0, #1
   128fc:	bx	lr
   12900:	mov	ip, r1
   12904:	mvn	r1, #0
   12908:	cmp	ip, r3
   1290c:	movcs	r1, #1
   12910:	cmpcs	r3, ip
   12914:	bcs	12920 <__mempcpy_chk@plt+0x1790>
   12918:	mov	r0, r1
   1291c:	bx	lr
   12920:	mov	r1, r2
   12924:	mov	r2, ip
   12928:	b	10f98 <memcmp@plt>
   1292c:	push	{r4, sl, fp, lr}
   12930:	add	fp, sp, #8
   12934:	ldr	r3, [r1]
   12938:	ldr	lr, [r0]
   1293c:	add	r3, lr, r3
   12940:	sub	r3, r3, #1
   12944:	mov	ip, #48	; 0x30
   12948:	ldrb	r2, [r3]
   1294c:	add	r4, r2, #1
   12950:	strb	r4, [r3]
   12954:	cmp	r2, #57	; 0x39
   12958:	popcc	{r4, sl, fp, pc}
   1295c:	strb	ip, [r3], #-1
   12960:	cmp	r3, lr
   12964:	bcs	12948 <__mempcpy_chk@plt+0x17b8>
   12968:	ldr	r2, [r0]
   1296c:	sub	r3, r2, #1
   12970:	str	r3, [r0]
   12974:	mov	r0, #49	; 0x31
   12978:	strb	r0, [r2, #-1]
   1297c:	ldr	r0, [r1]
   12980:	add	r0, r0, #1
   12984:	str	r0, [r1]
   12988:	pop	{r4, sl, fp, pc}
   1298c:	push	{fp, lr}
   12990:	mov	fp, sp
   12994:	movw	r0, #29020	; 0x715c
   12998:	movt	r0, #2
   1299c:	ldr	r0, [r0]
   129a0:	bl	11154 <clearerr_unlocked@plt>
   129a4:	bl	110ac <__errno_location@plt>
   129a8:	ldr	r4, [r0]
   129ac:	movw	r1, #25340	; 0x62fc
   129b0:	movt	r1, #1
   129b4:	mov	r0, #0
   129b8:	mov	r2, #5
   129bc:	bl	10fa4 <dcgettext@plt>
   129c0:	mov	r2, r0
   129c4:	mov	r0, #1
   129c8:	mov	r1, r4
   129cc:	bl	11028 <error@plt>
   129d0:	bx	lr
   129d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   129d8:	add	fp, sp, #24
   129dc:	vpush	{d8}
   129e0:	sub	sp, sp, #8
   129e4:	mov	r4, r1
   129e8:	mov	r5, r0
   129ec:	add	r1, sp, #4
   129f0:	bl	10f80 <strtold@plt>
   129f4:	vmov.f64	d8, d0
   129f8:	ldr	r7, [sp, #4]
   129fc:	ldrb	r0, [r7]
   12a00:	cmp	r0, #0
   12a04:	beq	12a38 <__mempcpy_chk@plt+0x18a8>
   12a08:	bl	110ac <__errno_location@plt>
   12a0c:	mov	r6, r0
   12a10:	ldr	r8, [r0]
   12a14:	mov	r1, sp
   12a18:	mov	r0, r5
   12a1c:	bl	15520 <__mempcpy_chk@plt+0x4390>
   12a20:	ldr	r0, [sp]
   12a24:	cmp	r7, r0
   12a28:	bcs	12a34 <__mempcpy_chk@plt+0x18a4>
   12a2c:	str	r0, [sp, #4]
   12a30:	b	12a3c <__mempcpy_chk@plt+0x18ac>
   12a34:	str	r8, [r6]
   12a38:	vmov.f64	d0, d8
   12a3c:	cmp	r4, #0
   12a40:	ldrne	r0, [sp, #4]
   12a44:	strne	r0, [r4]
   12a48:	sub	sp, fp, #32
   12a4c:	vpop	{d8}
   12a50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12a54:	movw	r1, #29068	; 0x718c
   12a58:	movt	r1, #2
   12a5c:	str	r0, [r1]
   12a60:	bx	lr
   12a64:	movw	r1, #29072	; 0x7190
   12a68:	movt	r1, #2
   12a6c:	strb	r0, [r1]
   12a70:	bx	lr
   12a74:	push	{r4, r5, r6, sl, fp, lr}
   12a78:	add	fp, sp, #16
   12a7c:	sub	sp, sp, #8
   12a80:	movw	r0, #29020	; 0x715c
   12a84:	movt	r0, #2
   12a88:	ldr	r0, [r0]
   12a8c:	bl	155e4 <__mempcpy_chk@plt+0x4454>
   12a90:	cmp	r0, #0
   12a94:	beq	12abc <__mempcpy_chk@plt+0x192c>
   12a98:	movw	r0, #29072	; 0x7190
   12a9c:	movt	r0, #2
   12aa0:	ldrb	r0, [r0]
   12aa4:	cmp	r0, #0
   12aa8:	beq	12adc <__mempcpy_chk@plt+0x194c>
   12aac:	bl	110ac <__errno_location@plt>
   12ab0:	ldr	r0, [r0]
   12ab4:	cmp	r0, #32
   12ab8:	bne	12adc <__mempcpy_chk@plt+0x194c>
   12abc:	movw	r0, #29016	; 0x7158
   12ac0:	movt	r0, #2
   12ac4:	ldr	r0, [r0]
   12ac8:	bl	155e4 <__mempcpy_chk@plt+0x4454>
   12acc:	cmp	r0, #0
   12ad0:	subeq	sp, fp, #16
   12ad4:	popeq	{r4, r5, r6, sl, fp, pc}
   12ad8:	b	12b4c <__mempcpy_chk@plt+0x19bc>
   12adc:	movw	r1, #25340	; 0x62fc
   12ae0:	movt	r1, #1
   12ae4:	mov	r0, #0
   12ae8:	mov	r2, #5
   12aec:	bl	10fa4 <dcgettext@plt>
   12af0:	mov	r4, r0
   12af4:	movw	r0, #29068	; 0x718c
   12af8:	movt	r0, #2
   12afc:	ldr	r6, [r0]
   12b00:	bl	110ac <__errno_location@plt>
   12b04:	ldr	r5, [r0]
   12b08:	cmp	r6, #0
   12b0c:	bne	12b28 <__mempcpy_chk@plt+0x1998>
   12b10:	movw	r2, #24747	; 0x60ab
   12b14:	movt	r2, #1
   12b18:	mov	r0, #0
   12b1c:	mov	r1, r5
   12b20:	mov	r3, r4
   12b24:	b	12b48 <__mempcpy_chk@plt+0x19b8>
   12b28:	mov	r0, r6
   12b2c:	bl	1426c <__mempcpy_chk@plt+0x30dc>
   12b30:	mov	r3, r0
   12b34:	str	r4, [sp]
   12b38:	movw	r2, #25641	; 0x6429
   12b3c:	movt	r2, #1
   12b40:	mov	r0, #0
   12b44:	mov	r1, r5
   12b48:	bl	11028 <error@plt>
   12b4c:	movw	r0, #28932	; 0x7104
   12b50:	movt	r0, #2
   12b54:	ldr	r0, [r0]
   12b58:	bl	10f5c <_exit@plt>
   12b5c:	push	{r4, r5, r6, sl, fp, lr}
   12b60:	add	fp, sp, #16
   12b64:	mov	r4, r0
   12b68:	bl	110ac <__errno_location@plt>
   12b6c:	mov	r5, r0
   12b70:	ldr	r6, [r0]
   12b74:	mov	r0, r4
   12b78:	bl	10f50 <free@plt>
   12b7c:	str	r6, [r5]
   12b80:	pop	{r4, r5, r6, sl, fp, pc}
   12b84:	push	{r4, r5, fp, lr}
   12b88:	add	fp, sp, #8
   12b8c:	cmp	r0, #0
   12b90:	beq	12c24 <__mempcpy_chk@plt+0x1a94>
   12b94:	mov	r4, r0
   12b98:	mov	r1, #47	; 0x2f
   12b9c:	bl	11130 <strrchr@plt>
   12ba0:	cmp	r0, #0
   12ba4:	mov	r5, r4
   12ba8:	addne	r5, r0, #1
   12bac:	sub	r0, r5, r4
   12bb0:	cmp	r0, #7
   12bb4:	blt	12c08 <__mempcpy_chk@plt+0x1a78>
   12bb8:	sub	r0, r5, #7
   12bbc:	movw	r1, #25704	; 0x6468
   12bc0:	movt	r1, #1
   12bc4:	mov	r2, #7
   12bc8:	bl	1116c <strncmp@plt>
   12bcc:	cmp	r0, #0
   12bd0:	bne	12c08 <__mempcpy_chk@plt+0x1a78>
   12bd4:	movw	r1, #25712	; 0x6470
   12bd8:	movt	r1, #1
   12bdc:	mov	r0, r5
   12be0:	mov	r2, #3
   12be4:	bl	1116c <strncmp@plt>
   12be8:	cmp	r0, #0
   12bec:	beq	12bf8 <__mempcpy_chk@plt+0x1a68>
   12bf0:	mov	r4, r5
   12bf4:	b	12c08 <__mempcpy_chk@plt+0x1a78>
   12bf8:	add	r4, r5, #3
   12bfc:	movw	r0, #29000	; 0x7148
   12c00:	movt	r0, #2
   12c04:	str	r4, [r0]
   12c08:	movw	r0, #29004	; 0x714c
   12c0c:	movt	r0, #2
   12c10:	str	r4, [r0]
   12c14:	movw	r0, #29076	; 0x7194
   12c18:	movt	r0, #2
   12c1c:	str	r4, [r0]
   12c20:	pop	{r4, r5, fp, pc}
   12c24:	movw	r0, #29016	; 0x7158
   12c28:	movt	r0, #2
   12c2c:	ldr	r3, [r0]
   12c30:	movw	r0, #25648	; 0x6430
   12c34:	movt	r0, #1
   12c38:	mov	r1, #55	; 0x37
   12c3c:	mov	r2, #1
   12c40:	bl	10fd4 <fwrite@plt>
   12c44:	bl	11178 <abort@plt>
   12c48:	push	{r4, r5, r6, sl, fp, lr}
   12c4c:	add	fp, sp, #16
   12c50:	mov	r4, r0
   12c54:	movw	r0, #29080	; 0x7198
   12c58:	movt	r0, #2
   12c5c:	cmp	r4, #0
   12c60:	moveq	r4, r0
   12c64:	bl	110ac <__errno_location@plt>
   12c68:	mov	r5, r0
   12c6c:	ldr	r6, [r0]
   12c70:	mov	r0, r4
   12c74:	mov	r1, #48	; 0x30
   12c78:	bl	14f88 <__mempcpy_chk@plt+0x3df8>
   12c7c:	str	r6, [r5]
   12c80:	pop	{r4, r5, r6, sl, fp, pc}
   12c84:	movw	r1, #29080	; 0x7198
   12c88:	movt	r1, #2
   12c8c:	cmp	r0, #0
   12c90:	movne	r1, r0
   12c94:	ldr	r0, [r1]
   12c98:	bx	lr
   12c9c:	movw	r2, #29080	; 0x7198
   12ca0:	movt	r2, #2
   12ca4:	cmp	r0, #0
   12ca8:	movne	r2, r0
   12cac:	str	r1, [r2]
   12cb0:	bx	lr
   12cb4:	movw	r3, #29080	; 0x7198
   12cb8:	movt	r3, #2
   12cbc:	cmp	r0, #0
   12cc0:	movne	r3, r0
   12cc4:	ubfx	r0, r1, #5, #3
   12cc8:	add	r0, r3, r0, lsl #2
   12ccc:	ldr	r3, [r0, #8]
   12cd0:	and	r1, r1, #31
   12cd4:	eor	r2, r2, r3, lsr r1
   12cd8:	and	r2, r2, #1
   12cdc:	eor	r2, r3, r2, lsl r1
   12ce0:	str	r2, [r0, #8]
   12ce4:	mov	r0, #1
   12ce8:	and	r0, r0, r3, lsr r1
   12cec:	bx	lr
   12cf0:	movw	r2, #29080	; 0x7198
   12cf4:	movt	r2, #2
   12cf8:	cmp	r0, #0
   12cfc:	movne	r2, r0
   12d00:	ldr	r0, [r2, #4]
   12d04:	str	r1, [r2, #4]
   12d08:	bx	lr
   12d0c:	movw	r3, #29080	; 0x7198
   12d10:	movt	r3, #2
   12d14:	cmp	r0, #0
   12d18:	movne	r3, r0
   12d1c:	mov	r0, #10
   12d20:	str	r0, [r3]
   12d24:	cmp	r1, #0
   12d28:	cmpne	r2, #0
   12d2c:	bne	12d3c <__mempcpy_chk@plt+0x1bac>
   12d30:	push	{fp, lr}
   12d34:	mov	fp, sp
   12d38:	bl	11178 <abort@plt>
   12d3c:	str	r1, [r3, #40]	; 0x28
   12d40:	str	r2, [r3, #44]	; 0x2c
   12d44:	bx	lr
   12d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d4c:	add	fp, sp, #28
   12d50:	sub	sp, sp, #20
   12d54:	mov	r8, r3
   12d58:	mov	r9, r2
   12d5c:	mov	sl, r1
   12d60:	mov	r7, r0
   12d64:	ldr	r0, [fp, #8]
   12d68:	movw	r5, #29080	; 0x7198
   12d6c:	movt	r5, #2
   12d70:	cmp	r0, #0
   12d74:	movne	r5, r0
   12d78:	bl	110ac <__errno_location@plt>
   12d7c:	mov	r4, r0
   12d80:	ldm	r5, {r0, r1}
   12d84:	ldr	r2, [r5, #40]	; 0x28
   12d88:	ldr	r3, [r5, #44]	; 0x2c
   12d8c:	ldr	r6, [r4]
   12d90:	add	r5, r5, #8
   12d94:	stm	sp, {r0, r1, r5}
   12d98:	str	r2, [sp, #12]
   12d9c:	str	r3, [sp, #16]
   12da0:	mov	r0, r7
   12da4:	mov	r1, sl
   12da8:	mov	r2, r9
   12dac:	mov	r3, r8
   12db0:	bl	12dc0 <__mempcpy_chk@plt+0x1c30>
   12db4:	str	r6, [r4]
   12db8:	sub	sp, fp, #28
   12dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc4:	add	fp, sp, #28
   12dc8:	sub	sp, sp, #156	; 0x9c
   12dcc:	mov	r9, r3
   12dd0:	str	r2, [fp, #-84]	; 0xffffffac
   12dd4:	mov	r6, r1
   12dd8:	mov	r7, r0
   12ddc:	ldr	r0, [fp, #12]
   12de0:	and	r1, r0, #4
   12de4:	str	r1, [sp, #32]
   12de8:	and	r1, r0, #1
   12dec:	str	r1, [sp, #36]	; 0x24
   12df0:	ubfx	sl, r0, #1, #1
   12df4:	bl	10fec <__ctype_get_mb_cur_max@plt>
   12df8:	str	r0, [sp, #40]	; 0x28
   12dfc:	ldr	r0, [fp, #24]
   12e00:	str	r0, [sp, #76]	; 0x4c
   12e04:	ldr	r0, [fp, #20]
   12e08:	str	r0, [sp, #68]	; 0x44
   12e0c:	ldr	r0, [fp, #8]
   12e10:	str	r0, [fp, #-60]	; 0xffffffc4
   12e14:	mov	r0, #0
   12e18:	str	r0, [sp, #72]	; 0x48
   12e1c:	mov	r0, #0
   12e20:	str	r0, [sp, #92]	; 0x5c
   12e24:	mov	r0, #0
   12e28:	str	r0, [fp, #-72]	; 0xffffffb8
   12e2c:	mov	r0, #0
   12e30:	mov	r1, #0
   12e34:	str	r1, [fp, #-56]	; 0xffffffc8
   12e38:	mov	r1, #0
   12e3c:	str	r1, [sp, #56]	; 0x38
   12e40:	mov	r5, #1
   12e44:	str	r7, [sp, #80]	; 0x50
   12e48:	mov	r4, r6
   12e4c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12e50:	cmp	r6, #10
   12e54:	bhi	13dbc <__mempcpy_chk@plt+0x2c2c>
   12e58:	add	r1, pc, #20
   12e5c:	mov	r8, #0
   12e60:	mov	r2, #1
   12e64:	mov	r3, #0
   12e68:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e6c:	mov	lr, r9
   12e70:	ldr	pc, [r1, r6, lsl #2]
   12e74:	andeq	r2, r1, ip, asr #30
   12e78:	andeq	r2, r1, ip, ror pc
   12e7c:	andeq	r2, r1, ip, lsr pc
   12e80:	andeq	r2, r1, r4, lsr pc
   12e84:	andeq	r2, r1, r0, ror pc
   12e88:	ldrdeq	r2, [r1], -r0
   12e8c:	andeq	r2, r1, ip, asr pc
   12e90:	andeq	r3, r1, ip, lsr #32
   12e94:	andeq	r2, r1, r0, lsr #29
   12e98:	andeq	r2, r1, r0, lsr #29
   12e9c:	andeq	r2, r1, r8, asr #29
   12ea0:	movw	r0, #25796	; 0x64c4
   12ea4:	movt	r0, #1
   12ea8:	mov	r1, r6
   12eac:	bl	143c8 <__mempcpy_chk@plt+0x3238>
   12eb0:	str	r0, [sp, #68]	; 0x44
   12eb4:	movw	r0, #25223	; 0x6287
   12eb8:	movt	r0, #1
   12ebc:	mov	r1, r6
   12ec0:	bl	143c8 <__mempcpy_chk@plt+0x3238>
   12ec4:	str	r0, [sp, #76]	; 0x4c
   12ec8:	mov	r8, #0
   12ecc:	tst	sl, #1
   12ed0:	bne	12f08 <__mempcpy_chk@plt+0x1d78>
   12ed4:	ldr	r0, [sp, #68]	; 0x44
   12ed8:	ldrb	r0, [r0]
   12edc:	cmp	r0, #0
   12ee0:	beq	12f08 <__mempcpy_chk@plt+0x1d78>
   12ee4:	ldr	r1, [sp, #68]	; 0x44
   12ee8:	add	r1, r1, #1
   12eec:	mov	r8, #0
   12ef0:	cmp	r8, r4
   12ef4:	strbcc	r0, [r7, r8]
   12ef8:	ldrb	r0, [r1, r8]
   12efc:	add	r8, r8, #1
   12f00:	cmp	r0, #0
   12f04:	bne	12ef0 <__mempcpy_chk@plt+0x1d60>
   12f08:	ldr	r6, [sp, #76]	; 0x4c
   12f0c:	mov	r0, r6
   12f10:	bl	11094 <strlen@plt>
   12f14:	str	r0, [fp, #-72]	; 0xffffffb8
   12f18:	str	r6, [sp, #92]	; 0x5c
   12f1c:	mov	r2, #1
   12f20:	mov	r3, sl
   12f24:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f28:	mov	lr, r9
   12f2c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12f30:	b	1302c <__mempcpy_chk@plt+0x1e9c>
   12f34:	mov	r0, #1
   12f38:	b	12f7c <__mempcpy_chk@plt+0x1dec>
   12f3c:	tst	sl, #1
   12f40:	bne	12f7c <__mempcpy_chk@plt+0x1dec>
   12f44:	mov	r2, r0
   12f48:	b	12fa4 <__mempcpy_chk@plt+0x1e14>
   12f4c:	mov	r6, #0
   12f50:	mov	r8, #0
   12f54:	mov	r2, r0
   12f58:	b	13028 <__mempcpy_chk@plt+0x1e98>
   12f5c:	mov	r0, #1
   12f60:	str	r0, [fp, #-72]	; 0xffffffb8
   12f64:	mov	r8, #0
   12f68:	mov	r6, #5
   12f6c:	b	12fe8 <__mempcpy_chk@plt+0x1e58>
   12f70:	mov	r2, #1
   12f74:	tst	sl, #1
   12f78:	beq	12fa4 <__mempcpy_chk@plt+0x1e14>
   12f7c:	mov	r1, #1
   12f80:	str	r1, [fp, #-72]	; 0xffffffb8
   12f84:	mov	r8, #0
   12f88:	mov	r6, #2
   12f8c:	movw	r1, #25223	; 0x6287
   12f90:	movt	r1, #1
   12f94:	str	r1, [sp, #92]	; 0x5c
   12f98:	mov	r2, r0
   12f9c:	mov	r3, #1
   12fa0:	b	1302c <__mempcpy_chk@plt+0x1e9c>
   12fa4:	mov	r8, #1
   12fa8:	mov	r6, #2
   12fac:	cmp	r4, #0
   12fb0:	movne	r0, #39	; 0x27
   12fb4:	strbne	r0, [r7]
   12fb8:	movw	r0, #25223	; 0x6287
   12fbc:	movt	r0, #1
   12fc0:	str	r0, [sp, #92]	; 0x5c
   12fc4:	mov	r0, #1
   12fc8:	str	r0, [fp, #-72]	; 0xffffffb8
   12fcc:	b	13028 <__mempcpy_chk@plt+0x1e98>
   12fd0:	mov	r6, #5
   12fd4:	tst	sl, #1
   12fd8:	beq	13000 <__mempcpy_chk@plt+0x1e70>
   12fdc:	mov	r0, #1
   12fe0:	str	r0, [fp, #-72]	; 0xffffffb8
   12fe4:	mov	r8, #0
   12fe8:	movw	r0, #25794	; 0x64c2
   12fec:	movt	r0, #1
   12ff0:	str	r0, [sp, #92]	; 0x5c
   12ff4:	mov	r2, #1
   12ff8:	mov	r3, #1
   12ffc:	b	1302c <__mempcpy_chk@plt+0x1e9c>
   13000:	cmp	r4, #0
   13004:	movne	r0, #34	; 0x22
   13008:	strbne	r0, [r7]
   1300c:	mov	r8, #1
   13010:	movw	r0, #25794	; 0x64c2
   13014:	movt	r0, #1
   13018:	str	r0, [sp, #92]	; 0x5c
   1301c:	mov	r0, #1
   13020:	str	r0, [fp, #-72]	; 0xffffffb8
   13024:	mov	r2, #1
   13028:	mov	r3, #0
   1302c:	ldr	r0, [fp, #16]
   13030:	cmp	r0, #0
   13034:	movwne	r0, #1
   13038:	and	r0, r0, r3
   1303c:	str	r0, [fp, #-88]	; 0xffffffa8
   13040:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13044:	cmp	r0, #0
   13048:	movwne	r0, #1
   1304c:	and	r1, r0, r3
   13050:	and	r1, r2, r1
   13054:	str	r1, [sp, #48]	; 0x30
   13058:	str	r6, [fp, #-60]	; 0xffffffc4
   1305c:	subs	r6, r6, #2
   13060:	clz	r1, r6
   13064:	lsr	r1, r1, #5
   13068:	and	r1, r1, r3
   1306c:	str	r1, [sp, #60]	; 0x3c
   13070:	str	r6, [fp, #-80]	; 0xffffffb0
   13074:	mov	r1, r6
   13078:	movwne	r1, #1
   1307c:	str	r3, [fp, #-76]	; 0xffffffb4
   13080:	eor	r3, r3, #1
   13084:	str	r3, [sp, #88]	; 0x58
   13088:	orr	r3, r1, r3
   1308c:	str	r3, [sp, #64]	; 0x40
   13090:	and	r1, r1, r2
   13094:	str	r1, [fp, #-68]	; 0xffffffbc
   13098:	and	r0, r0, r1
   1309c:	str	r0, [fp, #-64]	; 0xffffffc0
   130a0:	str	r2, [sp, #84]	; 0x54
   130a4:	eor	r0, r2, #1
   130a8:	str	r0, [sp, #52]	; 0x34
   130ac:	mov	r6, #0
   130b0:	cmn	lr, #1
   130b4:	beq	130c4 <__mempcpy_chk@plt+0x1f34>
   130b8:	cmp	r6, lr
   130bc:	bne	130d0 <__mempcpy_chk@plt+0x1f40>
   130c0:	b	13c3c <__mempcpy_chk@plt+0x2aac>
   130c4:	ldrb	r0, [ip, r6]
   130c8:	cmp	r0, #0
   130cc:	beq	13c3c <__mempcpy_chk@plt+0x2aac>
   130d0:	str	r5, [fp, #-48]	; 0xffffffd0
   130d4:	mov	sl, #0
   130d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130dc:	cmp	r0, #0
   130e0:	beq	13114 <__mempcpy_chk@plt+0x1f84>
   130e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   130e8:	add	r5, r6, r0
   130ec:	cmp	r0, #2
   130f0:	bcc	1310c <__mempcpy_chk@plt+0x1f7c>
   130f4:	cmn	lr, #1
   130f8:	bne	1310c <__mempcpy_chk@plt+0x1f7c>
   130fc:	mov	r0, ip
   13100:	bl	11094 <strlen@plt>
   13104:	ldr	ip, [fp, #-84]	; 0xffffffac
   13108:	mov	lr, r0
   1310c:	cmp	r5, lr
   13110:	bls	13120 <__mempcpy_chk@plt+0x1f90>
   13114:	mov	r0, #0
   13118:	str	r0, [fp, #-52]	; 0xffffffcc
   1311c:	b	1316c <__mempcpy_chk@plt+0x1fdc>
   13120:	mov	r5, r4
   13124:	mov	r4, lr
   13128:	add	r0, ip, r6
   1312c:	ldr	r1, [sp, #92]	; 0x5c
   13130:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13134:	bl	10f98 <memcmp@plt>
   13138:	cmp	r0, #0
   1313c:	mov	r1, r0
   13140:	movwne	r1, #1
   13144:	ldr	r2, [sp, #88]	; 0x58
   13148:	orr	r1, r1, r2
   1314c:	tst	r1, #1
   13150:	beq	13d00 <__mempcpy_chk@plt+0x2b70>
   13154:	clz	r0, r0
   13158:	lsr	r0, r0, #5
   1315c:	str	r0, [fp, #-52]	; 0xffffffcc
   13160:	ldr	ip, [fp, #-84]	; 0xffffffac
   13164:	mov	lr, r4
   13168:	mov	r4, r5
   1316c:	ldrb	r5, [ip, r6]
   13170:	cmp	r5, #126	; 0x7e
   13174:	bhi	13530 <__mempcpy_chk@plt+0x23a0>
   13178:	mov	r9, #1
   1317c:	mov	r2, #110	; 0x6e
   13180:	mov	r0, #97	; 0x61
   13184:	add	r3, pc, #4
   13188:	mov	r1, #0
   1318c:	ldr	pc, [r3, r5, lsl #2]
   13190:	andeq	r3, r1, r8, lsr #8
   13194:	andeq	r3, r1, r0, lsr r5
   13198:	andeq	r3, r1, r0, lsr r5
   1319c:	andeq	r3, r1, r0, lsr r5
   131a0:	andeq	r3, r1, r0, lsr r5
   131a4:	andeq	r3, r1, r0, lsr r5
   131a8:	andeq	r3, r1, r0, lsr r5
   131ac:	strdeq	r3, [r1], -r4
   131b0:	andeq	r3, r1, r8, lsl #8
   131b4:	andeq	r3, r1, r0, lsl #8
   131b8:	andeq	r3, r1, r4, lsl r4
   131bc:	muleq	r1, r8, r4
   131c0:	strdeq	r3, [r1], -r8
   131c4:	andeq	r3, r1, r0, lsl r4
   131c8:	andeq	r3, r1, r0, lsr r5
   131cc:	andeq	r3, r1, r0, lsr r5
   131d0:	andeq	r3, r1, r0, lsr r5
   131d4:	andeq	r3, r1, r0, lsr r5
   131d8:	andeq	r3, r1, r0, lsr r5
   131dc:	andeq	r3, r1, r0, lsr r5
   131e0:	andeq	r3, r1, r0, lsr r5
   131e4:	andeq	r3, r1, r0, lsr r5
   131e8:	andeq	r3, r1, r0, lsr r5
   131ec:	andeq	r3, r1, r0, lsr r5
   131f0:	andeq	r3, r1, r0, lsr r5
   131f4:	andeq	r3, r1, r0, lsr r5
   131f8:	andeq	r3, r1, r0, lsr r5
   131fc:	andeq	r3, r1, r0, lsr r5
   13200:	andeq	r3, r1, r0, lsr r5
   13204:	andeq	r3, r1, r0, lsr r5
   13208:	andeq	r3, r1, r0, lsr r5
   1320c:	andeq	r3, r1, r0, lsr r5
   13210:	andeq	r3, r1, r4, lsr #11
   13214:	andeq	r3, r1, r8, lsr #11
   13218:	andeq	r3, r1, r8, lsr #11
   1321c:	andeq	r3, r1, r0, lsr #7
   13220:	andeq	r3, r1, r8, lsr #11
   13224:	andeq	r3, r1, ip, lsl #7
   13228:	andeq	r3, r1, r8, lsr #11
   1322c:	andeq	r3, r1, r0, lsr #9
   13230:	andeq	r3, r1, r8, lsr #11
   13234:	andeq	r3, r1, r8, lsr #11
   13238:	andeq	r3, r1, r8, lsr #11
   1323c:	andeq	r3, r1, ip, lsl #7
   13240:	andeq	r3, r1, ip, lsl #7
   13244:	andeq	r3, r1, ip, lsl #7
   13248:	andeq	r3, r1, ip, lsl #7
   1324c:	andeq	r3, r1, ip, lsl #7
   13250:	andeq	r3, r1, ip, lsl #7
   13254:	andeq	r3, r1, ip, lsl #7
   13258:	andeq	r3, r1, ip, lsl #7
   1325c:	andeq	r3, r1, ip, lsl #7
   13260:	andeq	r3, r1, ip, lsl #7
   13264:	andeq	r3, r1, ip, lsl #7
   13268:	andeq	r3, r1, ip, lsl #7
   1326c:	andeq	r3, r1, ip, lsl #7
   13270:	andeq	r3, r1, ip, lsl #7
   13274:	andeq	r3, r1, ip, lsl #7
   13278:	andeq	r3, r1, ip, lsl #7
   1327c:	andeq	r3, r1, r8, lsr #11
   13280:	andeq	r3, r1, r8, lsr #11
   13284:	andeq	r3, r1, r8, lsr #11
   13288:	andeq	r3, r1, r8, lsr #11
   1328c:	andeq	r3, r1, r8, ror #8
   13290:	andeq	r3, r1, r0, lsr r5
   13294:	andeq	r3, r1, ip, lsl #7
   13298:	andeq	r3, r1, ip, lsl #7
   1329c:	andeq	r3, r1, ip, lsl #7
   132a0:	andeq	r3, r1, ip, lsl #7
   132a4:	andeq	r3, r1, ip, lsl #7
   132a8:	andeq	r3, r1, ip, lsl #7
   132ac:	andeq	r3, r1, ip, lsl #7
   132b0:	andeq	r3, r1, ip, lsl #7
   132b4:	andeq	r3, r1, ip, lsl #7
   132b8:	andeq	r3, r1, ip, lsl #7
   132bc:	andeq	r3, r1, ip, lsl #7
   132c0:	andeq	r3, r1, ip, lsl #7
   132c4:	andeq	r3, r1, ip, lsl #7
   132c8:	andeq	r3, r1, ip, lsl #7
   132cc:	andeq	r3, r1, ip, lsl #7
   132d0:	andeq	r3, r1, ip, lsl #7
   132d4:	andeq	r3, r1, ip, lsl #7
   132d8:	andeq	r3, r1, ip, lsl #7
   132dc:	andeq	r3, r1, ip, lsl #7
   132e0:	andeq	r3, r1, ip, lsl #7
   132e4:	andeq	r3, r1, ip, lsl #7
   132e8:	andeq	r3, r1, ip, lsl #7
   132ec:	andeq	r3, r1, ip, lsl #7
   132f0:	andeq	r3, r1, ip, lsl #7
   132f4:	andeq	r3, r1, ip, lsl #7
   132f8:	andeq	r3, r1, ip, lsl #7
   132fc:	andeq	r3, r1, r8, lsr #11
   13300:	ldrdeq	r3, [r1], -r4
   13304:	andeq	r3, r1, ip, lsl #7
   13308:	andeq	r3, r1, r8, lsr #11
   1330c:	andeq	r3, r1, ip, lsl #7
   13310:	andeq	r3, r1, r8, lsr #11
   13314:	andeq	r3, r1, ip, lsl #7
   13318:	andeq	r3, r1, ip, lsl #7
   1331c:	andeq	r3, r1, ip, lsl #7
   13320:	andeq	r3, r1, ip, lsl #7
   13324:	andeq	r3, r1, ip, lsl #7
   13328:	andeq	r3, r1, ip, lsl #7
   1332c:	andeq	r3, r1, ip, lsl #7
   13330:	andeq	r3, r1, ip, lsl #7
   13334:	andeq	r3, r1, ip, lsl #7
   13338:	andeq	r3, r1, ip, lsl #7
   1333c:	andeq	r3, r1, ip, lsl #7
   13340:	andeq	r3, r1, ip, lsl #7
   13344:	andeq	r3, r1, ip, lsl #7
   13348:	andeq	r3, r1, ip, lsl #7
   1334c:	andeq	r3, r1, ip, lsl #7
   13350:	andeq	r3, r1, ip, lsl #7
   13354:	andeq	r3, r1, ip, lsl #7
   13358:	andeq	r3, r1, ip, lsl #7
   1335c:	andeq	r3, r1, ip, lsl #7
   13360:	andeq	r3, r1, ip, lsl #7
   13364:	andeq	r3, r1, ip, lsl #7
   13368:	andeq	r3, r1, ip, lsl #7
   1336c:	andeq	r3, r1, ip, lsl #7
   13370:	andeq	r3, r1, ip, lsl #7
   13374:	andeq	r3, r1, ip, lsl #7
   13378:	andeq	r3, r1, ip, lsl #7
   1337c:			; <UNDEFINED> instruction: 0x000133b4
   13380:	andeq	r3, r1, r8, lsr #11
   13384:			; <UNDEFINED> instruction: 0x000133b4
   13388:	andeq	r3, r1, r0, lsr #7
   1338c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13390:	cmp	r0, #0
   13394:	beq	13608 <__mempcpy_chk@plt+0x2478>
   13398:	ldr	r0, [fp, #16]
   1339c:	b	1360c <__mempcpy_chk@plt+0x247c>
   133a0:	mov	r9, #0
   133a4:	cmp	r6, #0
   133a8:	beq	135a4 <__mempcpy_chk@plt+0x2414>
   133ac:	mov	sl, #0
   133b0:	b	1338c <__mempcpy_chk@plt+0x21fc>
   133b4:	mov	r9, #0
   133b8:	cmn	lr, #1
   133bc:	beq	13588 <__mempcpy_chk@plt+0x23f8>
   133c0:	cmp	r6, #0
   133c4:	bne	133ac <__mempcpy_chk@plt+0x221c>
   133c8:	cmp	lr, #1
   133cc:	beq	135a4 <__mempcpy_chk@plt+0x2414>
   133d0:	b	133ac <__mempcpy_chk@plt+0x221c>
   133d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   133d8:	cmp	r0, #2
   133dc:	bne	135d0 <__mempcpy_chk@plt+0x2440>
   133e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133e4:	tst	r0, #1
   133e8:	bne	13d18 <__mempcpy_chk@plt+0x2b88>
   133ec:	mov	sl, #0
   133f0:	mov	r0, #92	; 0x5c
   133f4:	b	135e4 <__mempcpy_chk@plt+0x2454>
   133f8:	mov	r0, #102	; 0x66
   133fc:	b	135f4 <__mempcpy_chk@plt+0x2464>
   13400:	mov	r2, #116	; 0x74
   13404:	b	13414 <__mempcpy_chk@plt+0x2284>
   13408:	mov	r0, #98	; 0x62
   1340c:	b	135f4 <__mempcpy_chk@plt+0x2464>
   13410:	mov	r2, #114	; 0x72
   13414:	ldr	r0, [sp, #64]	; 0x40
   13418:	tst	r0, #1
   1341c:	mov	r0, r2
   13420:	bne	135f4 <__mempcpy_chk@plt+0x2464>
   13424:	b	13d18 <__mempcpy_chk@plt+0x2b88>
   13428:	ldr	r0, [sp, #84]	; 0x54
   1342c:	tst	r0, #1
   13430:	beq	136e4 <__mempcpy_chk@plt+0x2554>
   13434:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13438:	tst	r0, #1
   1343c:	bne	13d18 <__mempcpy_chk@plt+0x2b88>
   13440:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13444:	cmp	r0, #2
   13448:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1344c:	movwne	r0, #1
   13450:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13454:	orr	r0, r0, r2
   13458:	tst	r0, #1
   1345c:	beq	13ad8 <__mempcpy_chk@plt+0x2948>
   13460:	mov	r0, r8
   13464:	b	13b0c <__mempcpy_chk@plt+0x297c>
   13468:	mov	sl, #0
   1346c:	mov	r5, #63	; 0x3f
   13470:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13474:	cmp	r0, #5
   13478:	beq	13898 <__mempcpy_chk@plt+0x2708>
   1347c:	cmp	r0, #2
   13480:	bne	13938 <__mempcpy_chk@plt+0x27a8>
   13484:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13488:	tst	r0, #1
   1348c:	mov	r9, #0
   13490:	beq	1338c <__mempcpy_chk@plt+0x21fc>
   13494:	b	13d18 <__mempcpy_chk@plt+0x2b88>
   13498:	mov	r0, #118	; 0x76
   1349c:	b	135f4 <__mempcpy_chk@plt+0x2464>
   134a0:	mov	r5, #39	; 0x27
   134a4:	mov	r0, #1
   134a8:	str	r0, [sp, #56]	; 0x38
   134ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   134b0:	cmp	r0, #2
   134b4:	bne	13704 <__mempcpy_chk@plt+0x2574>
   134b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134bc:	tst	r0, #1
   134c0:	bne	13d18 <__mempcpy_chk@plt+0x2b88>
   134c4:	ldr	r2, [sp, #72]	; 0x48
   134c8:	cmp	r2, #0
   134cc:	mov	r0, r2
   134d0:	movwne	r0, #1
   134d4:	clz	r1, r4
   134d8:	lsr	r1, r1, #5
   134dc:	orrs	r0, r0, r1
   134e0:	moveq	r2, r4
   134e4:	str	r2, [sp, #72]	; 0x48
   134e8:	moveq	r4, r0
   134ec:	cmp	r8, r4
   134f0:	movcc	r0, #39	; 0x27
   134f4:	strbcc	r0, [r7, r8]
   134f8:	add	r0, r8, #1
   134fc:	cmp	r0, r4
   13500:	movcc	r1, #92	; 0x5c
   13504:	strbcc	r1, [r7, r0]
   13508:	add	r0, r8, #2
   1350c:	cmp	r0, r4
   13510:	movcc	r1, #39	; 0x27
   13514:	strbcc	r1, [r7, r0]
   13518:	add	r8, r8, #3
   1351c:	mov	r0, #0
   13520:	str	r0, [fp, #-56]	; 0xffffffc8
   13524:	mov	sl, #0
   13528:	mov	r9, #1
   1352c:	b	1338c <__mempcpy_chk@plt+0x21fc>
   13530:	str	r4, [sp, #24]
   13534:	ldr	r0, [sp, #40]	; 0x28
   13538:	cmp	r0, #1
   1353c:	bne	1370c <__mempcpy_chk@plt+0x257c>
   13540:	str	lr, [sp, #28]
   13544:	bl	1107c <__ctype_b_loc@plt>
   13548:	ldr	ip, [fp, #-84]	; 0xffffffac
   1354c:	ldr	r0, [r0]
   13550:	add	r0, r0, r5, lsl #1
   13554:	ldrb	r0, [r0, #1]
   13558:	ubfx	r9, r0, #6, #1
   1355c:	mov	r1, #1
   13560:	ldr	r4, [sp, #24]
   13564:	ldr	r0, [sp, #52]	; 0x34
   13568:	orr	r0, r9, r0
   1356c:	mov	r2, r1
   13570:	cmp	r1, #1
   13574:	bhi	13940 <__mempcpy_chk@plt+0x27b0>
   13578:	tst	r0, #1
   1357c:	beq	13940 <__mempcpy_chk@plt+0x27b0>
   13580:	ldr	lr, [sp, #28]
   13584:	b	1338c <__mempcpy_chk@plt+0x21fc>
   13588:	cmp	r6, #0
   1358c:	ldrbeq	r0, [ip, #1]
   13590:	cmpeq	r0, #0
   13594:	beq	135a4 <__mempcpy_chk@plt+0x2414>
   13598:	mvn	lr, #0
   1359c:	mov	sl, #0
   135a0:	b	1338c <__mempcpy_chk@plt+0x21fc>
   135a4:	mov	r1, #1
   135a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   135ac:	cmp	r0, #2
   135b0:	bne	135c8 <__mempcpy_chk@plt+0x2438>
   135b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   135b8:	tst	r0, #1
   135bc:	mov	r9, r1
   135c0:	beq	1338c <__mempcpy_chk@plt+0x21fc>
   135c4:	b	13d18 <__mempcpy_chk@plt+0x2b88>
   135c8:	mov	r9, r1
   135cc:	b	1338c <__mempcpy_chk@plt+0x21fc>
   135d0:	mov	sl, #0
   135d4:	mov	r0, #92	; 0x5c
   135d8:	ldr	r1, [sp, #48]	; 0x30
   135dc:	cmp	r1, #0
   135e0:	beq	135f4 <__mempcpy_chk@plt+0x2464>
   135e4:	mov	r9, #0
   135e8:	cmp	sl, #0
   135ec:	beq	13ba4 <__mempcpy_chk@plt+0x2a14>
   135f0:	b	13be0 <__mempcpy_chk@plt+0x2a50>
   135f4:	mov	r9, #0
   135f8:	ldr	r1, [sp, #84]	; 0x54
   135fc:	tst	r1, #1
   13600:	mov	sl, #0
   13604:	bne	13644 <__mempcpy_chk@plt+0x24b4>
   13608:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1360c:	cmp	r0, #0
   13610:	mov	r0, r5
   13614:	beq	13638 <__mempcpy_chk@plt+0x24a8>
   13618:	ubfx	r0, r5, #5, #3
   1361c:	ldr	r1, [fp, #16]
   13620:	ldr	r0, [r1, r0, lsl #2]
   13624:	and	r1, r5, #31
   13628:	mov	r2, #1
   1362c:	tst	r0, r2, lsl r1
   13630:	mov	r0, r5
   13634:	bne	13644 <__mempcpy_chk@plt+0x24b4>
   13638:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1363c:	cmp	r1, #0
   13640:	beq	13b9c <__mempcpy_chk@plt+0x2a0c>
   13644:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13648:	tst	r1, #1
   1364c:	bne	13d18 <__mempcpy_chk@plt+0x2b88>
   13650:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13654:	cmp	r1, #2
   13658:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1365c:	movwne	r1, #1
   13660:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13664:	orr	r1, r1, r2
   13668:	tst	r1, #1
   1366c:	beq	13678 <__mempcpy_chk@plt+0x24e8>
   13670:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13674:	b	136b4 <__mempcpy_chk@plt+0x2524>
   13678:	cmp	r8, r4
   1367c:	movcc	r1, #39	; 0x27
   13680:	strbcc	r1, [r7, r8]
   13684:	add	r1, r8, #1
   13688:	cmp	r1, r4
   1368c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13690:	movcc	r2, #36	; 0x24
   13694:	strbcc	r2, [r7, r1]
   13698:	add	r1, r8, #2
   1369c:	cmp	r1, r4
   136a0:	movcc	r2, #39	; 0x27
   136a4:	strbcc	r2, [r7, r1]
   136a8:	add	r8, r8, #3
   136ac:	mov	r1, #1
   136b0:	str	r1, [fp, #-56]	; 0xffffffc8
   136b4:	cmp	r8, r4
   136b8:	movcc	r1, #92	; 0x5c
   136bc:	strbcc	r1, [r7, r8]
   136c0:	add	r8, r8, #1
   136c4:	cmp	r8, r4
   136c8:	strbcc	r0, [r7, r8]
   136cc:	and	r5, r5, r9
   136d0:	add	r8, r8, #1
   136d4:	add	r6, r6, #1
   136d8:	cmn	lr, #1
   136dc:	bne	130b8 <__mempcpy_chk@plt+0x1f28>
   136e0:	b	130c4 <__mempcpy_chk@plt+0x1f34>
   136e4:	mov	r9, #0
   136e8:	ldr	r0, [sp, #36]	; 0x24
   136ec:	cmp	r0, #0
   136f0:	mov	sl, #0
   136f4:	mov	r5, #0
   136f8:	beq	13608 <__mempcpy_chk@plt+0x2478>
   136fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13700:	b	136d4 <__mempcpy_chk@plt+0x2544>
   13704:	mov	r9, #1
   13708:	b	1338c <__mempcpy_chk@plt+0x21fc>
   1370c:	mov	r0, #0
   13710:	str	r0, [fp, #-36]	; 0xffffffdc
   13714:	str	r0, [fp, #-40]	; 0xffffffd8
   13718:	cmn	lr, #1
   1371c:	bne	13730 <__mempcpy_chk@plt+0x25a0>
   13720:	mov	r0, ip
   13724:	bl	11094 <strlen@plt>
   13728:	ldr	ip, [fp, #-84]	; 0xffffffac
   1372c:	mov	lr, r0
   13730:	add	r0, ip, r6
   13734:	str	r0, [sp, #20]
   13738:	mov	r9, #1
   1373c:	mov	r7, #0
   13740:	sub	r4, fp, #40	; 0x28
   13744:	str	lr, [sp, #28]
   13748:	str	r7, [sp, #44]	; 0x2c
   1374c:	add	r7, r7, r6
   13750:	add	r1, ip, r7
   13754:	sub	r2, lr, r7
   13758:	sub	r0, fp, #44	; 0x2c
   1375c:	mov	r3, r4
   13760:	bl	158a0 <__mempcpy_chk@plt+0x4710>
   13764:	cmp	r0, #0
   13768:	beq	13c28 <__mempcpy_chk@plt+0x2a98>
   1376c:	cmn	r0, #1
   13770:	beq	13be8 <__mempcpy_chk@plt+0x2a58>
   13774:	cmn	r0, #2
   13778:	ldr	lr, [sp, #28]
   1377c:	beq	13bf0 <__mempcpy_chk@plt+0x2a60>
   13780:	cmp	r0, #2
   13784:	mov	r1, #0
   13788:	movwcc	r1, #1
   1378c:	ldr	r2, [sp, #60]	; 0x3c
   13790:	eor	r2, r2, #1
   13794:	orrs	r1, r2, r1
   13798:	ldr	r4, [sp, #24]
   1379c:	bne	1385c <__mempcpy_chk@plt+0x26cc>
   137a0:	ldr	r1, [sp, #44]	; 0x2c
   137a4:	ldr	r2, [sp, #20]
   137a8:	add	r1, r2, r1
   137ac:	mov	r2, #1
   137b0:	ldrb	r3, [r1, r2]
   137b4:	sub	r3, r3, #91	; 0x5b
   137b8:	cmp	r3, #33	; 0x21
   137bc:	bhi	13850 <__mempcpy_chk@plt+0x26c0>
   137c0:	add	r7, pc, #0
   137c4:	ldr	pc, [r7, r3, lsl #2]
   137c8:	andeq	r3, r1, r0, lsl sp
   137cc:	andeq	r3, r1, r0, lsl sp
   137d0:	andeq	r3, r1, r0, asr r8
   137d4:	andeq	r3, r1, r0, lsl sp
   137d8:	andeq	r3, r1, r0, asr r8
   137dc:	andeq	r3, r1, r0, lsl sp
   137e0:	andeq	r3, r1, r0, asr r8
   137e4:	andeq	r3, r1, r0, asr r8
   137e8:	andeq	r3, r1, r0, asr r8
   137ec:	andeq	r3, r1, r0, asr r8
   137f0:	andeq	r3, r1, r0, asr r8
   137f4:	andeq	r3, r1, r0, asr r8
   137f8:	andeq	r3, r1, r0, asr r8
   137fc:	andeq	r3, r1, r0, asr r8
   13800:	andeq	r3, r1, r0, asr r8
   13804:	andeq	r3, r1, r0, asr r8
   13808:	andeq	r3, r1, r0, asr r8
   1380c:	andeq	r3, r1, r0, asr r8
   13810:	andeq	r3, r1, r0, asr r8
   13814:	andeq	r3, r1, r0, asr r8
   13818:	andeq	r3, r1, r0, asr r8
   1381c:	andeq	r3, r1, r0, asr r8
   13820:	andeq	r3, r1, r0, asr r8
   13824:	andeq	r3, r1, r0, asr r8
   13828:	andeq	r3, r1, r0, asr r8
   1382c:	andeq	r3, r1, r0, asr r8
   13830:	andeq	r3, r1, r0, asr r8
   13834:	andeq	r3, r1, r0, asr r8
   13838:	andeq	r3, r1, r0, asr r8
   1383c:	andeq	r3, r1, r0, asr r8
   13840:	andeq	r3, r1, r0, asr r8
   13844:	andeq	r3, r1, r0, asr r8
   13848:	andeq	r3, r1, r0, asr r8
   1384c:	andeq	r3, r1, r0, lsl sp
   13850:	add	r2, r2, #1
   13854:	cmp	r2, r0
   13858:	bcc	137b0 <__mempcpy_chk@plt+0x2620>
   1385c:	ldr	r7, [sp, #44]	; 0x2c
   13860:	add	r7, r0, r7
   13864:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13868:	bl	10fc8 <iswprint@plt>
   1386c:	cmp	r0, #0
   13870:	movwne	r0, #1
   13874:	and	r9, r9, r0
   13878:	sub	r4, fp, #40	; 0x28
   1387c:	mov	r0, r4
   13880:	bl	10f74 <mbsinit@plt>
   13884:	ldr	lr, [sp, #28]
   13888:	cmp	r0, #0
   1388c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13890:	beq	13748 <__mempcpy_chk@plt+0x25b8>
   13894:	b	13c30 <__mempcpy_chk@plt+0x2aa0>
   13898:	ldr	r0, [sp, #32]
   1389c:	cmp	r0, #0
   138a0:	beq	13938 <__mempcpy_chk@plt+0x27a8>
   138a4:	add	r0, r6, #2
   138a8:	cmp	r0, lr
   138ac:	bcs	13938 <__mempcpy_chk@plt+0x27a8>
   138b0:	add	r1, ip, r6
   138b4:	ldrb	r1, [r1, #1]
   138b8:	cmp	r1, #63	; 0x3f
   138bc:	bne	13938 <__mempcpy_chk@plt+0x27a8>
   138c0:	ldrb	r9, [ip, r0]
   138c4:	sub	r2, r9, #33	; 0x21
   138c8:	cmp	r2, #29
   138cc:	bhi	13938 <__mempcpy_chk@plt+0x27a8>
   138d0:	mov	r3, #1
   138d4:	movw	r1, #20929	; 0x51c1
   138d8:	movt	r1, #14336	; 0x3800
   138dc:	tst	r1, r3, lsl r2
   138e0:	beq	13938 <__mempcpy_chk@plt+0x27a8>
   138e4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   138e8:	tst	r1, #1
   138ec:	bne	13d18 <__mempcpy_chk@plt+0x2b88>
   138f0:	cmp	r8, r4
   138f4:	movcc	r1, #63	; 0x3f
   138f8:	strbcc	r1, [r7, r8]
   138fc:	add	r2, r8, #1
   13900:	cmp	r2, r4
   13904:	movcc	r1, #34	; 0x22
   13908:	strbcc	r1, [r7, r2]
   1390c:	add	r2, r8, #2
   13910:	cmp	r2, r4
   13914:	movcc	r1, #34	; 0x22
   13918:	strbcc	r1, [r7, r2]
   1391c:	add	r2, r8, #3
   13920:	cmp	r2, r4
   13924:	movcc	r1, #63	; 0x3f
   13928:	strbcc	r1, [r7, r2]
   1392c:	add	r8, r8, #4
   13930:	mov	r6, r0
   13934:	mov	r5, r9
   13938:	mov	r9, #0
   1393c:	b	1338c <__mempcpy_chk@plt+0x21fc>
   13940:	add	r1, r2, r6
   13944:	str	r1, [sp, #44]	; 0x2c
   13948:	add	r1, r6, #1
   1394c:	mov	r3, #0
   13950:	ldr	lr, [sp, #28]
   13954:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13958:	tst	r0, #1
   1395c:	bne	13a50 <__mempcpy_chk@plt+0x28c0>
   13960:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13964:	tst	r2, #1
   13968:	bne	13d18 <__mempcpy_chk@plt+0x2b88>
   1396c:	cmp	r6, #2
   13970:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13974:	movwne	r3, #1
   13978:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1397c:	orr	r3, r3, r2
   13980:	tst	r3, #1
   13984:	bne	139c0 <__mempcpy_chk@plt+0x2830>
   13988:	cmp	r8, r4
   1398c:	movcc	r2, #39	; 0x27
   13990:	strbcc	r2, [r7, r8]
   13994:	add	r3, r8, #1
   13998:	cmp	r3, r4
   1399c:	movcc	r2, #36	; 0x24
   139a0:	strbcc	r2, [r7, r3]
   139a4:	add	r3, r8, #2
   139a8:	cmp	r3, r4
   139ac:	movcc	r2, #39	; 0x27
   139b0:	strbcc	r2, [r7, r3]
   139b4:	add	r8, r8, #3
   139b8:	mov	r2, #1
   139bc:	str	r2, [fp, #-56]	; 0xffffffc8
   139c0:	cmp	r8, r4
   139c4:	movcc	r2, #92	; 0x5c
   139c8:	strbcc	r2, [r7, r8]
   139cc:	add	r3, r8, #1
   139d0:	cmp	r3, r4
   139d4:	bcs	139f4 <__mempcpy_chk@plt+0x2864>
   139d8:	and	r7, r5, #192	; 0xc0
   139dc:	mov	r2, #48	; 0x30
   139e0:	orr	r7, r2, r7, lsr #6
   139e4:	ldr	r6, [sp, #80]	; 0x50
   139e8:	strb	r7, [r6, r3]
   139ec:	ldr	r6, [fp, #-60]	; 0xffffffc4
   139f0:	ldr	r7, [sp, #80]	; 0x50
   139f4:	add	r3, r8, #2
   139f8:	cmp	r3, r4
   139fc:	bcs	13a1c <__mempcpy_chk@plt+0x288c>
   13a00:	lsr	r7, r5, #3
   13a04:	mov	r2, #6
   13a08:	bfi	r7, r2, #3, #29
   13a0c:	ldr	r6, [sp, #80]	; 0x50
   13a10:	strb	r7, [r6, r3]
   13a14:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13a18:	ldr	r7, [sp, #80]	; 0x50
   13a1c:	mov	r2, #6
   13a20:	bfi	r5, r2, #3, #29
   13a24:	add	r8, r8, #3
   13a28:	mov	r3, #1
   13a2c:	b	13a74 <__mempcpy_chk@plt+0x28e4>
   13a30:	ldr	r7, [sp, #80]	; 0x50
   13a34:	cmp	r8, r4
   13a38:	strbcc	r5, [r7, r8]
   13a3c:	ldrb	r5, [ip, r1]
   13a40:	add	r1, r1, #1
   13a44:	add	r8, r8, #1
   13a48:	tst	r0, #1
   13a4c:	beq	13960 <__mempcpy_chk@plt+0x27d0>
   13a50:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13a54:	tst	r2, #1
   13a58:	beq	13a6c <__mempcpy_chk@plt+0x28dc>
   13a5c:	cmp	r8, r4
   13a60:	movcc	r2, #92	; 0x5c
   13a64:	strbcc	r2, [r7, r8]
   13a68:	add	r8, r8, #1
   13a6c:	mov	r2, #0
   13a70:	str	r2, [fp, #-52]	; 0xffffffcc
   13a74:	and	sl, r3, #1
   13a78:	ldr	r2, [sp, #44]	; 0x2c
   13a7c:	cmp	r2, r1
   13a80:	bls	13b8c <__mempcpy_chk@plt+0x29fc>
   13a84:	cmp	sl, #0
   13a88:	movwne	sl, #1
   13a8c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13a90:	mvn	r7, r2
   13a94:	orr	r7, r7, sl
   13a98:	tst	r7, #1
   13a9c:	bne	13a30 <__mempcpy_chk@plt+0x28a0>
   13aa0:	cmp	r8, r4
   13aa4:	ldrcc	r7, [sp, #80]	; 0x50
   13aa8:	movcc	r2, #39	; 0x27
   13aac:	strbcc	r2, [r7, r8]
   13ab0:	add	r7, r8, #1
   13ab4:	cmp	r7, r4
   13ab8:	ldrcc	r6, [sp, #80]	; 0x50
   13abc:	movcc	r2, #39	; 0x27
   13ac0:	strbcc	r2, [r6, r7]
   13ac4:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13ac8:	add	r8, r8, #2
   13acc:	mov	r2, #0
   13ad0:	str	r2, [fp, #-56]	; 0xffffffc8
   13ad4:	b	13a30 <__mempcpy_chk@plt+0x28a0>
   13ad8:	cmp	r8, r4
   13adc:	movcc	r0, #39	; 0x27
   13ae0:	strbcc	r0, [r7, r8]
   13ae4:	add	r0, r8, #1
   13ae8:	cmp	r0, r4
   13aec:	movcc	r1, #36	; 0x24
   13af0:	strbcc	r1, [r7, r0]
   13af4:	add	r0, r8, #2
   13af8:	cmp	r0, r4
   13afc:	movcc	r1, #39	; 0x27
   13b00:	strbcc	r1, [r7, r0]
   13b04:	add	r0, r8, #3
   13b08:	mov	r2, #1
   13b0c:	cmp	r0, r4
   13b10:	movcc	r1, #92	; 0x5c
   13b14:	strbcc	r1, [r7, r0]
   13b18:	str	r2, [fp, #-56]	; 0xffffffc8
   13b1c:	add	r8, r0, #1
   13b20:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13b24:	cmp	r1, #2
   13b28:	beq	13b7c <__mempcpy_chk@plt+0x29ec>
   13b2c:	add	r1, r6, #1
   13b30:	mov	r9, #0
   13b34:	mov	sl, #1
   13b38:	mov	r5, #48	; 0x30
   13b3c:	cmp	r1, lr
   13b40:	bcs	1338c <__mempcpy_chk@plt+0x21fc>
   13b44:	ldrb	r1, [ip, r1]
   13b48:	sub	r1, r1, #48	; 0x30
   13b4c:	uxtb	r1, r1
   13b50:	cmp	r1, #9
   13b54:	bhi	1338c <__mempcpy_chk@plt+0x21fc>
   13b58:	cmp	r8, r4
   13b5c:	movcc	r1, #48	; 0x30
   13b60:	strbcc	r1, [r7, r8]
   13b64:	add	r1, r0, #2
   13b68:	cmp	r1, r4
   13b6c:	movcc	r2, #48	; 0x30
   13b70:	strbcc	r2, [r7, r1]
   13b74:	add	r8, r0, #3
   13b78:	b	1338c <__mempcpy_chk@plt+0x21fc>
   13b7c:	mov	r0, #48	; 0x30
   13b80:	mov	sl, #1
   13b84:	mov	r9, #0
   13b88:	b	13638 <__mempcpy_chk@plt+0x24a8>
   13b8c:	sub	r6, r1, #1
   13b90:	cmp	sl, #0
   13b94:	movwne	sl, #1
   13b98:	mov	r0, r5
   13b9c:	cmp	sl, #0
   13ba0:	bne	13be0 <__mempcpy_chk@plt+0x2a50>
   13ba4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13ba8:	tst	r1, #1
   13bac:	beq	13be0 <__mempcpy_chk@plt+0x2a50>
   13bb0:	cmp	r8, r4
   13bb4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13bb8:	movcc	r1, #39	; 0x27
   13bbc:	strbcc	r1, [r7, r8]
   13bc0:	add	r1, r8, #1
   13bc4:	cmp	r1, r4
   13bc8:	movcc	r2, #39	; 0x27
   13bcc:	strbcc	r2, [r7, r1]
   13bd0:	add	r8, r8, #2
   13bd4:	mov	r1, #0
   13bd8:	str	r1, [fp, #-56]	; 0xffffffc8
   13bdc:	b	136c4 <__mempcpy_chk@plt+0x2534>
   13be0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13be4:	b	136c4 <__mempcpy_chk@plt+0x2534>
   13be8:	mov	r9, #0
   13bec:	b	13c28 <__mempcpy_chk@plt+0x2a98>
   13bf0:	mov	r9, #0
   13bf4:	cmp	r7, lr
   13bf8:	bcs	13c28 <__mempcpy_chk@plt+0x2a98>
   13bfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c00:	ldr	r7, [sp, #44]	; 0x2c
   13c04:	ldr	r0, [sp, #20]
   13c08:	ldrb	r0, [r0, r7]
   13c0c:	cmp	r0, #0
   13c10:	beq	13c30 <__mempcpy_chk@plt+0x2aa0>
   13c14:	add	r7, r7, #1
   13c18:	add	r0, r6, r7
   13c1c:	cmp	r0, lr
   13c20:	bcc	13c04 <__mempcpy_chk@plt+0x2a74>
   13c24:	b	13c30 <__mempcpy_chk@plt+0x2aa0>
   13c28:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c2c:	ldr	r7, [sp, #44]	; 0x2c
   13c30:	mov	r1, r7
   13c34:	ldr	r7, [sp, #80]	; 0x50
   13c38:	b	13560 <__mempcpy_chk@plt+0x23d0>
   13c3c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13c40:	eor	r0, r1, #2
   13c44:	orr	r0, r0, r8
   13c48:	clz	r0, r0
   13c4c:	lsr	r0, r0, #5
   13c50:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13c54:	tst	r2, r0
   13c58:	bne	13d18 <__mempcpy_chk@plt+0x2b88>
   13c5c:	cmp	r1, #2
   13c60:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13c64:	movwne	r0, #1
   13c68:	orr	r0, r2, r0
   13c6c:	tst	r0, #1
   13c70:	ldreq	r0, [sp, #56]	; 0x38
   13c74:	eoreq	r0, r0, #1
   13c78:	tsteq	r0, #1
   13c7c:	bne	13cb0 <__mempcpy_chk@plt+0x2b20>
   13c80:	mov	r9, lr
   13c84:	tst	r5, #1
   13c88:	bne	13d80 <__mempcpy_chk@plt+0x2bf0>
   13c8c:	ldr	r0, [sp, #72]	; 0x48
   13c90:	cmp	r0, #0
   13c94:	beq	13cb0 <__mempcpy_chk@plt+0x2b20>
   13c98:	mov	r5, #0
   13c9c:	cmp	r4, #0
   13ca0:	ldr	r0, [sp, #84]	; 0x54
   13ca4:	mov	sl, r2
   13ca8:	ldr	r6, [sp, #72]	; 0x48
   13cac:	beq	12e48 <__mempcpy_chk@plt+0x1cb8>
   13cb0:	ldr	r1, [sp, #92]	; 0x5c
   13cb4:	clz	r0, r1
   13cb8:	lsr	r0, r0, #5
   13cbc:	orr	r0, r0, r2
   13cc0:	tst	r0, #1
   13cc4:	bne	13cf0 <__mempcpy_chk@plt+0x2b60>
   13cc8:	ldrb	r0, [r1]
   13ccc:	cmp	r0, #0
   13cd0:	beq	13cf0 <__mempcpy_chk@plt+0x2b60>
   13cd4:	add	r1, r1, #1
   13cd8:	cmp	r8, r4
   13cdc:	strbcc	r0, [r7, r8]
   13ce0:	add	r8, r8, #1
   13ce4:	ldrb	r0, [r1], #1
   13ce8:	cmp	r0, #0
   13cec:	bne	13cd8 <__mempcpy_chk@plt+0x2b48>
   13cf0:	cmp	r8, r4
   13cf4:	movcc	r0, #0
   13cf8:	strbcc	r0, [r7, r8]
   13cfc:	b	13d74 <__mempcpy_chk@plt+0x2be4>
   13d00:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d04:	mov	lr, r4
   13d08:	mov	r4, r5
   13d0c:	b	13d18 <__mempcpy_chk@plt+0x2b88>
   13d10:	ldr	r7, [sp, #80]	; 0x50
   13d14:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d18:	mov	r0, #0
   13d1c:	ldr	r1, [fp, #12]
   13d20:	bic	r1, r1, #2
   13d24:	ldr	r2, [sp, #84]	; 0x54
   13d28:	tst	r2, #1
   13d2c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13d30:	mov	r2, r3
   13d34:	movwne	r2, #4
   13d38:	cmp	r3, #2
   13d3c:	movne	r2, r3
   13d40:	str	r2, [sp]
   13d44:	str	r1, [sp, #4]
   13d48:	str	r0, [sp, #8]
   13d4c:	ldr	r0, [sp, #68]	; 0x44
   13d50:	str	r0, [sp, #12]
   13d54:	ldr	r0, [sp, #76]	; 0x4c
   13d58:	str	r0, [sp, #16]
   13d5c:	mov	r0, r7
   13d60:	mov	r1, r4
   13d64:	mov	r2, ip
   13d68:	mov	r3, lr
   13d6c:	bl	12dc0 <__mempcpy_chk@plt+0x1c30>
   13d70:	mov	r8, r0
   13d74:	mov	r0, r8
   13d78:	sub	sp, fp, #28
   13d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d80:	mov	r0, #5
   13d84:	str	r0, [sp]
   13d88:	ldr	r0, [fp, #12]
   13d8c:	str	r0, [sp, #4]
   13d90:	ldr	r0, [fp, #16]
   13d94:	str	r0, [sp, #8]
   13d98:	ldr	r0, [sp, #68]	; 0x44
   13d9c:	str	r0, [sp, #12]
   13da0:	ldr	r0, [sp, #76]	; 0x4c
   13da4:	str	r0, [sp, #16]
   13da8:	mov	r0, r7
   13dac:	ldr	r1, [sp, #72]	; 0x48
   13db0:	ldr	r2, [fp, #-84]	; 0xffffffac
   13db4:	mov	r3, r9
   13db8:	b	13d6c <__mempcpy_chk@plt+0x2bdc>
   13dbc:	bl	11178 <abort@plt>
   13dc0:	mov	r3, r2
   13dc4:	mov	r2, #0
   13dc8:	b	13dcc <__mempcpy_chk@plt+0x2c3c>
   13dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd0:	add	fp, sp, #28
   13dd4:	sub	sp, sp, #36	; 0x24
   13dd8:	mov	r4, r2
   13ddc:	str	r2, [sp, #24]
   13de0:	mov	r5, r1
   13de4:	mov	r6, r0
   13de8:	str	r0, [sp, #20]
   13dec:	movw	r8, #29080	; 0x7198
   13df0:	movt	r8, #2
   13df4:	cmp	r3, #0
   13df8:	movne	r8, r3
   13dfc:	bl	110ac <__errno_location@plt>
   13e00:	str	r0, [sp, #28]
   13e04:	ldm	r8, {r3, r9}
   13e08:	ldr	r1, [r8, #40]	; 0x28
   13e0c:	ldr	r2, [r8, #44]	; 0x2c
   13e10:	ldr	r7, [r0]
   13e14:	str	r7, [sp, #32]
   13e18:	add	sl, r8, #8
   13e1c:	cmp	r4, #0
   13e20:	orreq	r9, r9, #1
   13e24:	stm	sp, {r3, r9, sl}
   13e28:	str	r1, [sp, #12]
   13e2c:	str	r2, [sp, #16]
   13e30:	mov	r0, #0
   13e34:	mov	r1, #0
   13e38:	mov	r2, r6
   13e3c:	mov	r3, r5
   13e40:	mov	r7, r5
   13e44:	bl	12dc0 <__mempcpy_chk@plt+0x1c30>
   13e48:	mov	r5, r0
   13e4c:	add	r4, r0, #1
   13e50:	mov	r0, r4
   13e54:	bl	14cd0 <__mempcpy_chk@plt+0x3b40>
   13e58:	mov	r6, r0
   13e5c:	ldr	r0, [r8]
   13e60:	ldr	r1, [r8, #40]	; 0x28
   13e64:	ldr	r2, [r8, #44]	; 0x2c
   13e68:	stm	sp, {r0, r9, sl}
   13e6c:	str	r1, [sp, #12]
   13e70:	str	r2, [sp, #16]
   13e74:	mov	r0, r6
   13e78:	mov	r1, r4
   13e7c:	ldr	r2, [sp, #20]
   13e80:	mov	r3, r7
   13e84:	bl	12dc0 <__mempcpy_chk@plt+0x1c30>
   13e88:	ldr	r0, [sp, #24]
   13e8c:	ldr	r1, [sp, #32]
   13e90:	ldr	r2, [sp, #28]
   13e94:	str	r1, [r2]
   13e98:	cmp	r0, #0
   13e9c:	strne	r5, [r0]
   13ea0:	mov	r0, r6
   13ea4:	sub	sp, fp, #28
   13ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13eb0:	add	fp, sp, #24
   13eb4:	movw	r8, #28936	; 0x7108
   13eb8:	movt	r8, #2
   13ebc:	ldr	r4, [r8]
   13ec0:	movw	r5, #28940	; 0x710c
   13ec4:	movt	r5, #2
   13ec8:	ldr	r0, [r5]
   13ecc:	cmp	r0, #2
   13ed0:	blt	13efc <__mempcpy_chk@plt+0x2d6c>
   13ed4:	add	r7, r4, #12
   13ed8:	mov	r6, #0
   13edc:	ldr	r0, [r7, r6, lsl #3]
   13ee0:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   13ee4:	add	r0, r6, #1
   13ee8:	ldr	r1, [r5]
   13eec:	add	r2, r6, #2
   13ef0:	cmp	r2, r1
   13ef4:	mov	r6, r0
   13ef8:	blt	13edc <__mempcpy_chk@plt+0x2d4c>
   13efc:	ldr	r0, [r4, #4]
   13f00:	movw	r7, #29128	; 0x71c8
   13f04:	movt	r7, #2
   13f08:	cmp	r0, r7
   13f0c:	beq	13f24 <__mempcpy_chk@plt+0x2d94>
   13f10:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   13f14:	movw	r0, #28944	; 0x7110
   13f18:	movt	r0, #2
   13f1c:	mov	r6, #256	; 0x100
   13f20:	strd	r6, [r0]
   13f24:	movw	r6, #28944	; 0x7110
   13f28:	movt	r6, #2
   13f2c:	cmp	r4, r6
   13f30:	beq	13f40 <__mempcpy_chk@plt+0x2db0>
   13f34:	mov	r0, r4
   13f38:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   13f3c:	str	r6, [r8]
   13f40:	mov	r0, #1
   13f44:	str	r0, [r5]
   13f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f4c:	movw	r3, #29080	; 0x7198
   13f50:	movt	r3, #2
   13f54:	mvn	r2, #0
   13f58:	b	13f5c <__mempcpy_chk@plt+0x2dcc>
   13f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f60:	add	fp, sp, #28
   13f64:	sub	sp, sp, #44	; 0x2c
   13f68:	mov	r7, r3
   13f6c:	str	r2, [sp, #36]	; 0x24
   13f70:	str	r1, [sp, #32]
   13f74:	mov	r5, r0
   13f78:	bl	110ac <__errno_location@plt>
   13f7c:	cmp	r5, #0
   13f80:	blt	140ec <__mempcpy_chk@plt+0x2f5c>
   13f84:	cmn	r5, #-2147483647	; 0x80000001
   13f88:	beq	140ec <__mempcpy_chk@plt+0x2f5c>
   13f8c:	movw	r4, #28936	; 0x7108
   13f90:	movt	r4, #2
   13f94:	ldr	r6, [r4]
   13f98:	str	r0, [sp, #28]
   13f9c:	ldr	r0, [r0]
   13fa0:	str	r0, [sp, #24]
   13fa4:	movw	r8, #28940	; 0x710c
   13fa8:	movt	r8, #2
   13fac:	ldr	r1, [r8]
   13fb0:	cmp	r1, r5
   13fb4:	ble	13fc0 <__mempcpy_chk@plt+0x2e30>
   13fb8:	mov	sl, r6
   13fbc:	b	14028 <__mempcpy_chk@plt+0x2e98>
   13fc0:	str	r1, [fp, #-32]	; 0xffffffe0
   13fc4:	mov	r0, #8
   13fc8:	str	r0, [sp]
   13fcc:	movw	r9, #28944	; 0x7110
   13fd0:	movt	r9, #2
   13fd4:	subs	r0, r6, r9
   13fd8:	movne	r0, r6
   13fdc:	add	r2, r5, #1
   13fe0:	sub	r2, r2, r1
   13fe4:	sub	r1, fp, #32
   13fe8:	mvn	r3, #-2147483648	; 0x80000000
   13fec:	bl	14db8 <__mempcpy_chk@plt+0x3c28>
   13ff0:	mov	sl, r0
   13ff4:	str	r0, [r4]
   13ff8:	cmp	r6, r9
   13ffc:	ldrdeq	r0, [r9]
   14000:	stmeq	sl, {r0, r1}
   14004:	ldr	r1, [r8]
   14008:	add	r0, sl, r1, lsl #3
   1400c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14010:	sub	r1, r2, r1
   14014:	lsl	r2, r1, #3
   14018:	mov	r1, #0
   1401c:	bl	110d0 <memset@plt>
   14020:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14024:	str	r0, [r8]
   14028:	mov	r9, sl
   1402c:	ldr	r6, [r9, r5, lsl #3]!
   14030:	ldr	r4, [r9, #4]!
   14034:	ldm	r7, {r0, r1}
   14038:	ldr	r2, [r7, #40]	; 0x28
   1403c:	ldr	r3, [r7, #44]	; 0x2c
   14040:	orr	r8, r1, #1
   14044:	add	r1, r7, #8
   14048:	stm	sp, {r0, r8}
   1404c:	str	r1, [sp, #20]
   14050:	add	r0, sp, #8
   14054:	stm	r0, {r1, r2, r3}
   14058:	mov	r0, r4
   1405c:	mov	r1, r6
   14060:	ldr	r2, [sp, #32]
   14064:	ldr	r3, [sp, #36]	; 0x24
   14068:	bl	12dc0 <__mempcpy_chk@plt+0x1c30>
   1406c:	cmp	r6, r0
   14070:	bhi	140d4 <__mempcpy_chk@plt+0x2f44>
   14074:	add	r6, r0, #1
   14078:	str	r6, [sl, r5, lsl #3]
   1407c:	movw	r0, #29128	; 0x71c8
   14080:	movt	r0, #2
   14084:	cmp	r4, r0
   14088:	beq	14094 <__mempcpy_chk@plt+0x2f04>
   1408c:	mov	r0, r4
   14090:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   14094:	mov	r0, r6
   14098:	bl	14cd0 <__mempcpy_chk@plt+0x3b40>
   1409c:	mov	r4, r0
   140a0:	str	r0, [r9]
   140a4:	ldr	r0, [r7]
   140a8:	ldr	r1, [r7, #40]	; 0x28
   140ac:	ldr	r2, [r7, #44]	; 0x2c
   140b0:	stm	sp, {r0, r8}
   140b4:	ldr	r0, [sp, #20]
   140b8:	add	r3, sp, #8
   140bc:	stm	r3, {r0, r1, r2}
   140c0:	mov	r0, r4
   140c4:	mov	r1, r6
   140c8:	ldr	r2, [sp, #32]
   140cc:	ldr	r3, [sp, #36]	; 0x24
   140d0:	bl	12dc0 <__mempcpy_chk@plt+0x1c30>
   140d4:	ldr	r0, [sp, #28]
   140d8:	ldr	r1, [sp, #24]
   140dc:	str	r1, [r0]
   140e0:	mov	r0, r4
   140e4:	sub	sp, fp, #28
   140e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140ec:	bl	11178 <abort@plt>
   140f0:	movw	r3, #29080	; 0x7198
   140f4:	movt	r3, #2
   140f8:	b	13f5c <__mempcpy_chk@plt+0x2dcc>
   140fc:	mov	r1, r0
   14100:	mov	r0, #0
   14104:	b	13f4c <__mempcpy_chk@plt+0x2dbc>
   14108:	mov	r2, r1
   1410c:	mov	r1, r0
   14110:	mov	r0, #0
   14114:	b	140f0 <__mempcpy_chk@plt+0x2f60>
   14118:	push	{r4, r5, r6, sl, fp, lr}
   1411c:	add	fp, sp, #16
   14120:	sub	sp, sp, #48	; 0x30
   14124:	mov	r4, r2
   14128:	mov	r5, r0
   1412c:	mov	r6, sp
   14130:	mov	r0, r6
   14134:	bl	14154 <__mempcpy_chk@plt+0x2fc4>
   14138:	mov	r0, r5
   1413c:	mov	r1, r4
   14140:	mvn	r2, #0
   14144:	mov	r3, r6
   14148:	bl	13f5c <__mempcpy_chk@plt+0x2dcc>
   1414c:	sub	sp, fp, #16
   14150:	pop	{r4, r5, r6, sl, fp, pc}
   14154:	vmov.i32	q8, #0	; 0x00000000
   14158:	mov	r2, #32
   1415c:	mov	r3, r0
   14160:	vst1.32	{d16-d17}, [r3], r2
   14164:	vst1.32	{d16-d17}, [r3]
   14168:	add	r2, r0, #16
   1416c:	vst1.32	{d16-d17}, [r2]
   14170:	cmp	r1, #10
   14174:	strne	r1, [r0]
   14178:	bxne	lr
   1417c:	push	{fp, lr}
   14180:	mov	fp, sp
   14184:	bl	11178 <abort@plt>
   14188:	push	{r4, r5, r6, r7, fp, lr}
   1418c:	add	fp, sp, #16
   14190:	sub	sp, sp, #48	; 0x30
   14194:	mov	r4, r3
   14198:	mov	r5, r2
   1419c:	mov	r6, r0
   141a0:	mov	r7, sp
   141a4:	mov	r0, r7
   141a8:	bl	14154 <__mempcpy_chk@plt+0x2fc4>
   141ac:	mov	r0, r6
   141b0:	mov	r1, r5
   141b4:	mov	r2, r4
   141b8:	mov	r3, r7
   141bc:	bl	13f5c <__mempcpy_chk@plt+0x2dcc>
   141c0:	sub	sp, fp, #16
   141c4:	pop	{r4, r5, r6, r7, fp, pc}
   141c8:	mov	r2, r1
   141cc:	mov	r1, r0
   141d0:	mov	r0, #0
   141d4:	b	14118 <__mempcpy_chk@plt+0x2f88>
   141d8:	mov	r3, r2
   141dc:	mov	r2, r1
   141e0:	mov	r1, r0
   141e4:	mov	r0, #0
   141e8:	b	14188 <__mempcpy_chk@plt+0x2ff8>
   141ec:	push	{r4, r5, r6, sl, fp, lr}
   141f0:	add	fp, sp, #16
   141f4:	sub	sp, sp, #48	; 0x30
   141f8:	mov	r4, r1
   141fc:	mov	r5, r0
   14200:	mov	r0, #32
   14204:	movw	r1, #29080	; 0x7198
   14208:	movt	r1, #2
   1420c:	add	r3, r1, #16
   14210:	vld1.64	{d16-d17}, [r1], r0
   14214:	mov	r6, sp
   14218:	vld1.64	{d18-d19}, [r3]
   1421c:	add	r3, r6, #16
   14220:	vld1.64	{d20-d21}, [r1]
   14224:	vst1.64	{d18-d19}, [r3]
   14228:	mov	r1, r6
   1422c:	vst1.64	{d16-d17}, [r1], r0
   14230:	vst1.64	{d20-d21}, [r1]
   14234:	mov	r0, r6
   14238:	mov	r1, r2
   1423c:	mov	r2, #1
   14240:	bl	12cb4 <__mempcpy_chk@plt+0x1b24>
   14244:	mov	r0, #0
   14248:	mov	r1, r5
   1424c:	mov	r2, r4
   14250:	mov	r3, r6
   14254:	bl	13f5c <__mempcpy_chk@plt+0x2dcc>
   14258:	sub	sp, fp, #16
   1425c:	pop	{r4, r5, r6, sl, fp, pc}
   14260:	mov	r2, r1
   14264:	mvn	r1, #0
   14268:	b	141ec <__mempcpy_chk@plt+0x305c>
   1426c:	mov	r1, #58	; 0x3a
   14270:	b	14260 <__mempcpy_chk@plt+0x30d0>
   14274:	mov	r2, #58	; 0x3a
   14278:	b	141ec <__mempcpy_chk@plt+0x305c>
   1427c:	push	{r4, r5, r6, sl, fp, lr}
   14280:	add	fp, sp, #16
   14284:	sub	sp, sp, #48	; 0x30
   14288:	mov	r4, r2
   1428c:	mov	r5, r0
   14290:	mov	r6, sp
   14294:	mov	r0, r6
   14298:	bl	14154 <__mempcpy_chk@plt+0x2fc4>
   1429c:	mov	r0, r6
   142a0:	mov	r1, #58	; 0x3a
   142a4:	mov	r2, #1
   142a8:	bl	12cb4 <__mempcpy_chk@plt+0x1b24>
   142ac:	mov	r0, r5
   142b0:	mov	r1, r4
   142b4:	mvn	r2, #0
   142b8:	mov	r3, r6
   142bc:	bl	13f5c <__mempcpy_chk@plt+0x2dcc>
   142c0:	sub	sp, fp, #16
   142c4:	pop	{r4, r5, r6, sl, fp, pc}
   142c8:	push	{fp, lr}
   142cc:	mov	fp, sp
   142d0:	sub	sp, sp, #8
   142d4:	mvn	ip, #0
   142d8:	str	ip, [sp]
   142dc:	bl	142e8 <__mempcpy_chk@plt+0x3158>
   142e0:	mov	sp, fp
   142e4:	pop	{fp, pc}
   142e8:	push	{r4, r5, r6, r7, fp, lr}
   142ec:	add	fp, sp, #16
   142f0:	sub	sp, sp, #48	; 0x30
   142f4:	mov	r7, r3
   142f8:	mov	r5, r0
   142fc:	mov	r0, #32
   14300:	movw	r3, #29080	; 0x7198
   14304:	movt	r3, #2
   14308:	add	r4, r3, #16
   1430c:	vld1.64	{d16-d17}, [r3], r0
   14310:	mov	r6, sp
   14314:	vld1.64	{d18-d19}, [r4]
   14318:	add	r4, r6, #16
   1431c:	vld1.64	{d20-d21}, [r3]
   14320:	vst1.64	{d18-d19}, [r4]
   14324:	mov	r3, r6
   14328:	vst1.64	{d16-d17}, [r3], r0
   1432c:	vst1.64	{d20-d21}, [r3]
   14330:	mov	r0, r6
   14334:	bl	12d0c <__mempcpy_chk@plt+0x1b7c>
   14338:	ldr	r2, [fp, #8]
   1433c:	mov	r0, r5
   14340:	mov	r1, r7
   14344:	mov	r3, r6
   14348:	bl	13f5c <__mempcpy_chk@plt+0x2dcc>
   1434c:	sub	sp, fp, #16
   14350:	pop	{r4, r5, r6, r7, fp, pc}
   14354:	mov	r3, r2
   14358:	mov	r2, r1
   1435c:	mov	r1, r0
   14360:	mov	r0, #0
   14364:	b	142c8 <__mempcpy_chk@plt+0x3138>
   14368:	push	{fp, lr}
   1436c:	mov	fp, sp
   14370:	sub	sp, sp, #8
   14374:	mov	ip, r2
   14378:	mov	r2, r1
   1437c:	mov	r1, r0
   14380:	str	r3, [sp]
   14384:	mov	r0, #0
   14388:	mov	r3, ip
   1438c:	bl	142e8 <__mempcpy_chk@plt+0x3158>
   14390:	mov	sp, fp
   14394:	pop	{fp, pc}
   14398:	movw	r3, #28952	; 0x7118
   1439c:	movt	r3, #2
   143a0:	b	13f5c <__mempcpy_chk@plt+0x2dcc>
   143a4:	mov	r2, r1
   143a8:	mov	r1, r0
   143ac:	mov	r0, #0
   143b0:	b	14398 <__mempcpy_chk@plt+0x3208>
   143b4:	mvn	r2, #0
   143b8:	b	14398 <__mempcpy_chk@plt+0x3208>
   143bc:	mov	r1, r0
   143c0:	mov	r0, #0
   143c4:	b	143b4 <__mempcpy_chk@plt+0x3224>
   143c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143cc:	add	fp, sp, #24
   143d0:	sub	sp, sp, #16
   143d4:	mov	r4, r1
   143d8:	mov	r5, r0
   143dc:	mov	r7, #0
   143e0:	mov	r0, #0
   143e4:	mov	r1, r5
   143e8:	mov	r2, #5
   143ec:	bl	10fa4 <dcgettext@plt>
   143f0:	cmp	r0, r5
   143f4:	beq	14400 <__mempcpy_chk@plt+0x3270>
   143f8:	sub	sp, fp, #24
   143fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14400:	bl	15868 <__mempcpy_chk@plt+0x46d8>
   14404:	mov	r6, r0
   14408:	mov	r8, #56	; 0x38
   1440c:	mov	r0, #45	; 0x2d
   14410:	stm	sp, {r0, r8}
   14414:	str	r7, [sp, #8]
   14418:	str	r7, [sp, #12]
   1441c:	mov	r0, r6
   14420:	mov	r1, #85	; 0x55
   14424:	mov	r2, #84	; 0x54
   14428:	mov	r3, #70	; 0x46
   1442c:	bl	144c4 <__mempcpy_chk@plt+0x3334>
   14430:	cmp	r0, #0
   14434:	beq	14450 <__mempcpy_chk@plt+0x32c0>
   14438:	ldrb	r1, [r5]
   1443c:	movw	r2, #25798	; 0x64c6
   14440:	movt	r2, #1
   14444:	movw	r0, #25802	; 0x64ca
   14448:	movt	r0, #1
   1444c:	b	14494 <__mempcpy_chk@plt+0x3304>
   14450:	mov	r0, #48	; 0x30
   14454:	mov	r1, #51	; 0x33
   14458:	str	r8, [sp]
   1445c:	stmib	sp, {r0, r1}
   14460:	str	r0, [sp, #12]
   14464:	mov	r0, r6
   14468:	mov	r1, #71	; 0x47
   1446c:	mov	r2, #66	; 0x42
   14470:	mov	r3, #49	; 0x31
   14474:	bl	144c4 <__mempcpy_chk@plt+0x3334>
   14478:	cmp	r0, #0
   1447c:	beq	144a4 <__mempcpy_chk@plt+0x3314>
   14480:	ldrb	r1, [r5]
   14484:	movw	r2, #25806	; 0x64ce
   14488:	movt	r2, #1
   1448c:	movw	r0, #25810	; 0x64d2
   14490:	movt	r0, #1
   14494:	cmp	r1, #96	; 0x60
   14498:	moveq	r0, r2
   1449c:	sub	sp, fp, #24
   144a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144a4:	movw	r1, #25794	; 0x64c2
   144a8:	movt	r1, #1
   144ac:	movw	r0, #25223	; 0x6287
   144b0:	movt	r0, #1
   144b4:	cmp	r4, #9
   144b8:	moveq	r0, r1
   144bc:	sub	sp, fp, #24
   144c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144c4:	push	{r4, r5, r6, r7, fp, lr}
   144c8:	add	fp, sp, #16
   144cc:	sub	sp, sp, #16
   144d0:	mov	r4, r3
   144d4:	mov	r5, r2
   144d8:	mov	r7, r1
   144dc:	mov	r6, r0
   144e0:	mov	r0, r1
   144e4:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   144e8:	ldrb	r1, [r6]
   144ec:	cmp	r0, #0
   144f0:	andne	r1, r1, #223	; 0xdf
   144f4:	mov	r0, #0
   144f8:	cmp	r1, r7
   144fc:	bne	1453c <__mempcpy_chk@plt+0x33ac>
   14500:	cmp	r7, #0
   14504:	moveq	r0, #1
   14508:	subeq	sp, fp, #16
   1450c:	popeq	{r4, r5, r6, r7, fp, pc}
   14510:	ldr	r0, [fp, #20]
   14514:	ldr	r1, [fp, #16]
   14518:	ldr	r2, [fp, #12]
   1451c:	ldr	r3, [fp, #8]
   14520:	str	r2, [sp]
   14524:	str	r1, [sp, #4]
   14528:	str	r0, [sp, #8]
   1452c:	mov	r0, r6
   14530:	mov	r1, r5
   14534:	mov	r2, r4
   14538:	bl	14544 <__mempcpy_chk@plt+0x33b4>
   1453c:	sub	sp, fp, #16
   14540:	pop	{r4, r5, r6, r7, fp, pc}
   14544:	push	{r4, r5, r6, r7, fp, lr}
   14548:	add	fp, sp, #16
   1454c:	sub	sp, sp, #8
   14550:	mov	r4, r3
   14554:	mov	r5, r2
   14558:	mov	r7, r1
   1455c:	mov	r6, r0
   14560:	mov	r0, r1
   14564:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   14568:	ldrb	r1, [r6, #1]
   1456c:	cmp	r0, #0
   14570:	andne	r1, r1, #223	; 0xdf
   14574:	mov	r0, #0
   14578:	cmp	r1, r7
   1457c:	bne	145b4 <__mempcpy_chk@plt+0x3424>
   14580:	cmp	r7, #0
   14584:	moveq	r0, #1
   14588:	subeq	sp, fp, #16
   1458c:	popeq	{r4, r5, r6, r7, fp, pc}
   14590:	ldr	r0, [fp, #16]
   14594:	ldr	r1, [fp, #12]
   14598:	ldr	r3, [fp, #8]
   1459c:	str	r1, [sp]
   145a0:	str	r0, [sp, #4]
   145a4:	mov	r0, r6
   145a8:	mov	r1, r5
   145ac:	mov	r2, r4
   145b0:	bl	145bc <__mempcpy_chk@plt+0x342c>
   145b4:	sub	sp, fp, #16
   145b8:	pop	{r4, r5, r6, r7, fp, pc}
   145bc:	push	{r4, r5, r6, r7, fp, lr}
   145c0:	add	fp, sp, #16
   145c4:	sub	sp, sp, #8
   145c8:	mov	r4, r3
   145cc:	mov	r5, r2
   145d0:	mov	r7, r1
   145d4:	mov	r6, r0
   145d8:	mov	r0, r1
   145dc:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   145e0:	ldrb	r1, [r6, #2]
   145e4:	cmp	r0, #0
   145e8:	andne	r1, r1, #223	; 0xdf
   145ec:	mov	r0, #0
   145f0:	cmp	r1, r7
   145f4:	bne	14624 <__mempcpy_chk@plt+0x3494>
   145f8:	cmp	r7, #0
   145fc:	moveq	r0, #1
   14600:	subeq	sp, fp, #16
   14604:	popeq	{r4, r5, r6, r7, fp, pc}
   14608:	ldr	r0, [fp, #12]
   1460c:	ldr	r3, [fp, #8]
   14610:	str	r0, [sp]
   14614:	mov	r0, r6
   14618:	mov	r1, r5
   1461c:	mov	r2, r4
   14620:	bl	1462c <__mempcpy_chk@plt+0x349c>
   14624:	sub	sp, fp, #16
   14628:	pop	{r4, r5, r6, r7, fp, pc}
   1462c:	push	{r4, r5, r6, r7, fp, lr}
   14630:	add	fp, sp, #16
   14634:	mov	r4, r3
   14638:	mov	r5, r2
   1463c:	mov	r7, r1
   14640:	mov	r6, r0
   14644:	mov	r0, r1
   14648:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   1464c:	ldrb	r1, [r6, #3]
   14650:	ldr	r3, [fp, #8]
   14654:	cmp	r0, #0
   14658:	andne	r1, r1, #223	; 0xdf
   1465c:	mov	r0, #0
   14660:	cmp	r1, r7
   14664:	popne	{r4, r5, r6, r7, fp, pc}
   14668:	cmp	r7, #0
   1466c:	beq	14684 <__mempcpy_chk@plt+0x34f4>
   14670:	mov	r0, r6
   14674:	mov	r1, r5
   14678:	mov	r2, r4
   1467c:	pop	{r4, r5, r6, r7, fp, lr}
   14680:	b	1468c <__mempcpy_chk@plt+0x34fc>
   14684:	mov	r0, #1
   14688:	pop	{r4, r5, r6, r7, fp, pc}
   1468c:	push	{r4, r5, r6, r7, fp, lr}
   14690:	add	fp, sp, #16
   14694:	mov	r4, r3
   14698:	mov	r5, r2
   1469c:	mov	r7, r1
   146a0:	mov	r6, r0
   146a4:	mov	r0, r1
   146a8:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   146ac:	ldrb	r1, [r6, #4]
   146b0:	cmp	r0, #0
   146b4:	andne	r1, r1, #223	; 0xdf
   146b8:	mov	r0, #0
   146bc:	cmp	r1, r7
   146c0:	popne	{r4, r5, r6, r7, fp, pc}
   146c4:	cmp	r7, #0
   146c8:	beq	146e0 <__mempcpy_chk@plt+0x3550>
   146cc:	mov	r0, r6
   146d0:	mov	r1, r5
   146d4:	mov	r2, r4
   146d8:	pop	{r4, r5, r6, r7, fp, lr}
   146dc:	b	146e8 <__mempcpy_chk@plt+0x3558>
   146e0:	mov	r0, #1
   146e4:	pop	{r4, r5, r6, r7, fp, pc}
   146e8:	push	{r4, r5, r6, sl, fp, lr}
   146ec:	add	fp, sp, #16
   146f0:	mov	r4, r2
   146f4:	mov	r6, r1
   146f8:	mov	r5, r0
   146fc:	mov	r0, r1
   14700:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   14704:	ldrb	r1, [r5, #5]
   14708:	cmp	r0, #0
   1470c:	andne	r1, r1, #223	; 0xdf
   14710:	mov	r0, #0
   14714:	cmp	r1, r6
   14718:	popne	{r4, r5, r6, sl, fp, pc}
   1471c:	cmp	r6, #0
   14720:	beq	14734 <__mempcpy_chk@plt+0x35a4>
   14724:	mov	r0, r5
   14728:	mov	r1, r4
   1472c:	pop	{r4, r5, r6, sl, fp, lr}
   14730:	b	1473c <__mempcpy_chk@plt+0x35ac>
   14734:	mov	r0, #1
   14738:	pop	{r4, r5, r6, sl, fp, pc}
   1473c:	push	{r4, r5, fp, lr}
   14740:	add	fp, sp, #8
   14744:	mov	r5, r1
   14748:	mov	r4, r0
   1474c:	mov	r0, r1
   14750:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   14754:	ldrb	r1, [r4, #6]
   14758:	cmp	r0, #0
   1475c:	andne	r1, r1, #223	; 0xdf
   14760:	mov	r0, #0
   14764:	cmp	r1, r5
   14768:	popne	{r4, r5, fp, pc}
   1476c:	cmp	r5, #0
   14770:	beq	14780 <__mempcpy_chk@plt+0x35f0>
   14774:	mov	r0, r4
   14778:	pop	{r4, r5, fp, lr}
   1477c:	b	14788 <__mempcpy_chk@plt+0x35f8>
   14780:	mov	r0, #1
   14784:	pop	{r4, r5, fp, pc}
   14788:	push	{r4, sl, fp, lr}
   1478c:	add	fp, sp, #8
   14790:	mov	r4, r0
   14794:	mov	r0, #0
   14798:	bl	154b0 <__mempcpy_chk@plt+0x4320>
   1479c:	ldrb	r1, [r4, #7]
   147a0:	cmp	r0, #0
   147a4:	beq	147bc <__mempcpy_chk@plt+0x362c>
   147a8:	tst	r1, #223	; 0xdf
   147ac:	moveq	r0, #1
   147b0:	popeq	{r4, sl, fp, pc}
   147b4:	mov	r0, #0
   147b8:	pop	{r4, sl, fp, pc}
   147bc:	cmp	r1, #0
   147c0:	moveq	r0, #1
   147c4:	popeq	{r4, sl, fp, pc}
   147c8:	mov	r0, #0
   147cc:	pop	{r4, sl, fp, pc}
   147d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147d4:	add	fp, sp, #24
   147d8:	sub	sp, sp, #32
   147dc:	mov	r4, r2
   147e0:	mov	r8, r0
   147e4:	ldr	r6, [fp, #12]
   147e8:	ldr	r7, [fp, #8]
   147ec:	cmp	r1, #0
   147f0:	beq	14818 <__mempcpy_chk@plt+0x3688>
   147f4:	mov	r5, r1
   147f8:	str	r4, [sp]
   147fc:	str	r3, [sp, #4]
   14800:	movw	r2, #25900	; 0x652c
   14804:	movt	r2, #1
   14808:	mov	r0, r8
   1480c:	mov	r1, #1
   14810:	mov	r3, r5
   14814:	b	14830 <__mempcpy_chk@plt+0x36a0>
   14818:	str	r3, [sp]
   1481c:	movw	r2, #25912	; 0x6538
   14820:	movt	r2, #1
   14824:	mov	r0, r8
   14828:	mov	r1, #1
   1482c:	mov	r3, r4
   14830:	bl	110f4 <__fprintf_chk@plt>
   14834:	movw	r1, #25919	; 0x653f
   14838:	movt	r1, #1
   1483c:	mov	r0, #0
   14840:	mov	r2, #5
   14844:	bl	10fa4 <dcgettext@plt>
   14848:	mov	r3, r0
   1484c:	movw	r0, #2022	; 0x7e6
   14850:	str	r0, [sp]
   14854:	movw	r2, #26637	; 0x680d
   14858:	movt	r2, #1
   1485c:	mov	r0, r8
   14860:	mov	r1, #1
   14864:	bl	110f4 <__fprintf_chk@plt>
   14868:	movw	r4, #25144	; 0x6238
   1486c:	movt	r4, #1
   14870:	mov	r0, r4
   14874:	mov	r1, r8
   14878:	bl	10efc <fputs_unlocked@plt>
   1487c:	movw	r1, #25923	; 0x6543
   14880:	movt	r1, #1
   14884:	mov	r0, #0
   14888:	mov	r2, #5
   1488c:	bl	10fa4 <dcgettext@plt>
   14890:	mov	r2, r0
   14894:	movw	r3, #26094	; 0x65ee
   14898:	movt	r3, #1
   1489c:	mov	r0, r8
   148a0:	mov	r1, #1
   148a4:	bl	110f4 <__fprintf_chk@plt>
   148a8:	mov	r0, r4
   148ac:	mov	r1, r8
   148b0:	bl	10efc <fputs_unlocked@plt>
   148b4:	cmp	r6, #9
   148b8:	bhi	148f4 <__mempcpy_chk@plt+0x3764>
   148bc:	add	r0, pc, #0
   148c0:	ldr	pc, [r0, r6, lsl #2]
   148c4:	andeq	r4, r1, ip, ror #17
   148c8:	andeq	r4, r1, r0, lsl #18
   148cc:	andeq	r4, r1, r0, lsr r9
   148d0:	andeq	r4, r1, r8, asr r9
   148d4:	andeq	r4, r1, r0, lsl #19
   148d8:	andeq	r4, r1, r8, lsr #19
   148dc:	ldrdeq	r4, [r1], -r0
   148e0:	andeq	r4, r1, r8, lsl #20
   148e4:	andeq	r4, r1, r8, lsr #21
   148e8:	andeq	r4, r1, r0, asr sl
   148ec:	sub	sp, fp, #24
   148f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148f4:	movw	r1, #26447	; 0x674f
   148f8:	movt	r1, #1
   148fc:	b	14a58 <__mempcpy_chk@plt+0x38c8>
   14900:	movw	r1, #26128	; 0x6610
   14904:	movt	r1, #1
   14908:	mov	r0, #0
   1490c:	mov	r2, #5
   14910:	bl	10fa4 <dcgettext@plt>
   14914:	mov	r2, r0
   14918:	ldr	r3, [r7]
   1491c:	mov	r0, r8
   14920:	mov	r1, #1
   14924:	sub	sp, fp, #24
   14928:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1492c:	b	110f4 <__fprintf_chk@plt>
   14930:	movw	r1, #26144	; 0x6620
   14934:	movt	r1, #1
   14938:	mov	r0, #0
   1493c:	mov	r2, #5
   14940:	bl	10fa4 <dcgettext@plt>
   14944:	mov	r2, r0
   14948:	ldr	r3, [r7]
   1494c:	ldr	r0, [r7, #4]
   14950:	str	r0, [sp]
   14954:	b	14a44 <__mempcpy_chk@plt+0x38b4>
   14958:	movw	r1, #26167	; 0x6637
   1495c:	movt	r1, #1
   14960:	mov	r0, #0
   14964:	mov	r2, #5
   14968:	bl	10fa4 <dcgettext@plt>
   1496c:	mov	r2, r0
   14970:	ldr	r3, [r7]
   14974:	ldmib	r7, {r0, r1}
   14978:	stm	sp, {r0, r1}
   1497c:	b	14a44 <__mempcpy_chk@plt+0x38b4>
   14980:	movw	r1, #26195	; 0x6653
   14984:	movt	r1, #1
   14988:	mov	r0, #0
   1498c:	mov	r2, #5
   14990:	bl	10fa4 <dcgettext@plt>
   14994:	mov	r2, r0
   14998:	ldr	r3, [r7]
   1499c:	ldmib	r7, {r0, r1, r7}
   149a0:	stm	sp, {r0, r1, r7}
   149a4:	b	14a44 <__mempcpy_chk@plt+0x38b4>
   149a8:	movw	r1, #26227	; 0x6673
   149ac:	movt	r1, #1
   149b0:	mov	r0, #0
   149b4:	mov	r2, #5
   149b8:	bl	10fa4 <dcgettext@plt>
   149bc:	mov	r2, r0
   149c0:	ldr	r3, [r7]
   149c4:	ldmib	r7, {r0, r1, r6, r7}
   149c8:	stm	sp, {r0, r1, r6, r7}
   149cc:	b	14a44 <__mempcpy_chk@plt+0x38b4>
   149d0:	movw	r1, #26263	; 0x6697
   149d4:	movt	r1, #1
   149d8:	mov	r0, #0
   149dc:	mov	r2, #5
   149e0:	bl	10fa4 <dcgettext@plt>
   149e4:	mov	r2, r0
   149e8:	ldr	r3, [r7]
   149ec:	ldmib	r7, {r0, r1, r6}
   149f0:	ldr	r5, [r7, #16]
   149f4:	ldr	r7, [r7, #20]
   149f8:	stm	sp, {r0, r1, r6}
   149fc:	str	r5, [sp, #12]
   14a00:	str	r7, [sp, #16]
   14a04:	b	14a44 <__mempcpy_chk@plt+0x38b4>
   14a08:	movw	r1, #26303	; 0x66bf
   14a0c:	movt	r1, #1
   14a10:	mov	r0, #0
   14a14:	mov	r2, #5
   14a18:	bl	10fa4 <dcgettext@plt>
   14a1c:	mov	r2, r0
   14a20:	ldr	r3, [r7]
   14a24:	ldmib	r7, {r0, r1, r6}
   14a28:	ldr	r5, [r7, #16]
   14a2c:	ldr	r4, [r7, #20]
   14a30:	ldr	r7, [r7, #24]
   14a34:	stm	sp, {r0, r1, r6}
   14a38:	str	r5, [sp, #12]
   14a3c:	str	r4, [sp, #16]
   14a40:	str	r7, [sp, #20]
   14a44:	mov	r0, r8
   14a48:	mov	r1, #1
   14a4c:	b	14af8 <__mempcpy_chk@plt+0x3968>
   14a50:	movw	r1, #26395	; 0x671b
   14a54:	movt	r1, #1
   14a58:	mov	r0, #0
   14a5c:	mov	r2, #5
   14a60:	bl	10fa4 <dcgettext@plt>
   14a64:	mov	ip, r0
   14a68:	ldr	r3, [r7]
   14a6c:	ldr	r0, [r7, #4]
   14a70:	ldr	r1, [r7, #8]
   14a74:	ldr	r6, [r7, #12]
   14a78:	ldr	r5, [r7, #16]
   14a7c:	ldr	r4, [r7, #20]
   14a80:	ldr	r2, [r7, #24]
   14a84:	ldr	lr, [r7, #28]
   14a88:	ldr	r7, [r7, #32]
   14a8c:	stm	sp, {r0, r1, r6}
   14a90:	str	r5, [sp, #12]
   14a94:	str	r4, [sp, #16]
   14a98:	str	r2, [sp, #20]
   14a9c:	str	lr, [sp, #24]
   14aa0:	str	r7, [sp, #28]
   14aa4:	b	14aec <__mempcpy_chk@plt+0x395c>
   14aa8:	movw	r1, #26347	; 0x66eb
   14aac:	movt	r1, #1
   14ab0:	mov	r0, #0
   14ab4:	mov	r2, #5
   14ab8:	bl	10fa4 <dcgettext@plt>
   14abc:	mov	ip, r0
   14ac0:	ldr	r3, [r7]
   14ac4:	ldmib	r7, {r0, r1, r6}
   14ac8:	ldr	r5, [r7, #16]
   14acc:	ldr	r4, [r7, #20]
   14ad0:	ldr	r2, [r7, #24]
   14ad4:	ldr	r7, [r7, #28]
   14ad8:	stm	sp, {r0, r1, r6}
   14adc:	str	r5, [sp, #12]
   14ae0:	str	r4, [sp, #16]
   14ae4:	str	r2, [sp, #20]
   14ae8:	str	r7, [sp, #24]
   14aec:	mov	r0, r8
   14af0:	mov	r1, #1
   14af4:	mov	r2, ip
   14af8:	bl	110f4 <__fprintf_chk@plt>
   14afc:	sub	sp, fp, #24
   14b00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b04:	push	{r4, sl, fp, lr}
   14b08:	add	fp, sp, #8
   14b0c:	sub	sp, sp, #8
   14b10:	mov	lr, #0
   14b14:	ldr	ip, [fp, #8]
   14b18:	ldr	r4, [ip, lr, lsl #2]
   14b1c:	add	lr, lr, #1
   14b20:	cmp	r4, #0
   14b24:	bne	14b18 <__mempcpy_chk@plt+0x3988>
   14b28:	sub	r4, lr, #1
   14b2c:	str	ip, [sp]
   14b30:	str	r4, [sp, #4]
   14b34:	bl	147d0 <__mempcpy_chk@plt+0x3640>
   14b38:	sub	sp, fp, #8
   14b3c:	pop	{r4, sl, fp, pc}
   14b40:	push	{r4, r5, fp, lr}
   14b44:	add	fp, sp, #8
   14b48:	sub	sp, sp, #48	; 0x30
   14b4c:	mov	ip, #0
   14b50:	ldr	r4, [fp, #8]
   14b54:	add	lr, sp, #8
   14b58:	ldr	r5, [r4]
   14b5c:	str	r5, [lr, ip, lsl #2]
   14b60:	cmp	r5, #0
   14b64:	beq	14b78 <__mempcpy_chk@plt+0x39e8>
   14b68:	add	ip, ip, #1
   14b6c:	add	r4, r4, #4
   14b70:	cmp	ip, #10
   14b74:	bcc	14b58 <__mempcpy_chk@plt+0x39c8>
   14b78:	str	lr, [sp]
   14b7c:	str	ip, [sp, #4]
   14b80:	bl	147d0 <__mempcpy_chk@plt+0x3640>
   14b84:	sub	sp, fp, #8
   14b88:	pop	{r4, r5, fp, pc}
   14b8c:	push	{fp, lr}
   14b90:	mov	fp, sp
   14b94:	sub	sp, sp, #8
   14b98:	add	ip, fp, #8
   14b9c:	str	ip, [sp, #4]
   14ba0:	str	ip, [sp]
   14ba4:	bl	14b40 <__mempcpy_chk@plt+0x39b0>
   14ba8:	mov	sp, fp
   14bac:	pop	{fp, pc}
   14bb0:	push	{fp, lr}
   14bb4:	mov	fp, sp
   14bb8:	movw	r0, #29020	; 0x715c
   14bbc:	movt	r0, #2
   14bc0:	ldr	r1, [r0]
   14bc4:	movw	r0, #25144	; 0x6238
   14bc8:	movt	r0, #1
   14bcc:	bl	10efc <fputs_unlocked@plt>
   14bd0:	movw	r1, #26507	; 0x678b
   14bd4:	movt	r1, #1
   14bd8:	mov	r0, #0
   14bdc:	mov	r2, #5
   14be0:	bl	10fa4 <dcgettext@plt>
   14be4:	mov	r1, r0
   14be8:	movw	r2, #26527	; 0x679f
   14bec:	movt	r2, #1
   14bf0:	mov	r0, #1
   14bf4:	bl	110dc <__printf_chk@plt>
   14bf8:	movw	r1, #26549	; 0x67b5
   14bfc:	movt	r1, #1
   14c00:	mov	r0, #0
   14c04:	mov	r2, #5
   14c08:	bl	10fa4 <dcgettext@plt>
   14c0c:	mov	r1, r0
   14c10:	movw	r2, #24584	; 0x6008
   14c14:	movt	r2, #1
   14c18:	movw	r3, #24953	; 0x6179
   14c1c:	movt	r3, #1
   14c20:	mov	r0, #1
   14c24:	bl	110dc <__printf_chk@plt>
   14c28:	movw	r1, #26569	; 0x67c9
   14c2c:	movt	r1, #1
   14c30:	mov	r0, #0
   14c34:	mov	r2, #5
   14c38:	bl	10fa4 <dcgettext@plt>
   14c3c:	mov	r1, r0
   14c40:	movw	r2, #26608	; 0x67f0
   14c44:	movt	r2, #1
   14c48:	mov	r0, #1
   14c4c:	pop	{fp, lr}
   14c50:	b	110dc <__printf_chk@plt>
   14c54:	b	14c58 <__mempcpy_chk@plt+0x3ac8>
   14c58:	push	{r4, r5, r6, sl, fp, lr}
   14c5c:	add	fp, sp, #16
   14c60:	mov	r4, r2
   14c64:	mov	r5, r1
   14c68:	mov	r6, r0
   14c6c:	bl	15900 <__mempcpy_chk@plt+0x4770>
   14c70:	cmp	r0, #0
   14c74:	popne	{r4, r5, r6, sl, fp, pc}
   14c78:	cmp	r6, #0
   14c7c:	beq	14c90 <__mempcpy_chk@plt+0x3b00>
   14c80:	cmp	r5, #0
   14c84:	cmpne	r4, #0
   14c88:	bne	14c90 <__mempcpy_chk@plt+0x3b00>
   14c8c:	pop	{r4, r5, r6, sl, fp, pc}
   14c90:	bl	15044 <__mempcpy_chk@plt+0x3eb4>
   14c94:	push	{fp, lr}
   14c98:	mov	fp, sp
   14c9c:	bl	15178 <__mempcpy_chk@plt+0x3fe8>
   14ca0:	bl	14ca8 <__mempcpy_chk@plt+0x3b18>
   14ca4:	pop	{fp, pc}
   14ca8:	cmp	r0, #0
   14cac:	bxne	lr
   14cb0:	push	{fp, lr}
   14cb4:	mov	fp, sp
   14cb8:	bl	15044 <__mempcpy_chk@plt+0x3eb4>
   14cbc:	push	{fp, lr}
   14cc0:	mov	fp, sp
   14cc4:	bl	15834 <__mempcpy_chk@plt+0x46a4>
   14cc8:	bl	14ca8 <__mempcpy_chk@plt+0x3b18>
   14ccc:	pop	{fp, pc}
   14cd0:	b	14c94 <__mempcpy_chk@plt+0x3b04>
   14cd4:	push	{r4, r5, fp, lr}
   14cd8:	add	fp, sp, #8
   14cdc:	mov	r4, r1
   14ce0:	mov	r5, r0
   14ce4:	bl	151a8 <__mempcpy_chk@plt+0x4018>
   14ce8:	cmp	r0, #0
   14cec:	popne	{r4, r5, fp, pc}
   14cf0:	cmp	r5, #0
   14cf4:	beq	14d04 <__mempcpy_chk@plt+0x3b74>
   14cf8:	cmp	r4, #0
   14cfc:	bne	14d04 <__mempcpy_chk@plt+0x3b74>
   14d00:	pop	{r4, r5, fp, pc}
   14d04:	bl	15044 <__mempcpy_chk@plt+0x3eb4>
   14d08:	push	{fp, lr}
   14d0c:	mov	fp, sp
   14d10:	bl	15838 <__mempcpy_chk@plt+0x46a8>
   14d14:	bl	14ca8 <__mempcpy_chk@plt+0x3b18>
   14d18:	pop	{fp, pc}
   14d1c:	push	{fp, lr}
   14d20:	mov	fp, sp
   14d24:	bl	15848 <__mempcpy_chk@plt+0x46b8>
   14d28:	bl	14ca8 <__mempcpy_chk@plt+0x3b18>
   14d2c:	pop	{fp, pc}
   14d30:	push	{fp, lr}
   14d34:	mov	fp, sp
   14d38:	mov	r2, r1
   14d3c:	mov	r1, r0
   14d40:	mov	r0, #0
   14d44:	bl	14c58 <__mempcpy_chk@plt+0x3ac8>
   14d48:	pop	{fp, pc}
   14d4c:	mov	r2, r1
   14d50:	mov	r1, r0
   14d54:	mov	r0, #0
   14d58:	b	14d1c <__mempcpy_chk@plt+0x3b8c>
   14d5c:	mov	r2, #1
   14d60:	b	14d64 <__mempcpy_chk@plt+0x3bd4>
   14d64:	push	{r4, r5, fp, lr}
   14d68:	add	fp, sp, #8
   14d6c:	mov	r4, r1
   14d70:	ldr	r5, [r1]
   14d74:	cmp	r0, #0
   14d78:	beq	14d90 <__mempcpy_chk@plt+0x3c00>
   14d7c:	mov	r1, #1
   14d80:	add	r1, r1, r5, lsr #1
   14d84:	adds	r5, r5, r1
   14d88:	bcc	14da8 <__mempcpy_chk@plt+0x3c18>
   14d8c:	bl	15044 <__mempcpy_chk@plt+0x3eb4>
   14d90:	cmp	r5, #0
   14d94:	bne	14da8 <__mempcpy_chk@plt+0x3c18>
   14d98:	mov	r1, #64	; 0x40
   14d9c:	udiv	r5, r1, r2
   14da0:	cmp	r2, #64	; 0x40
   14da4:	addhi	r5, r5, #1
   14da8:	mov	r1, r5
   14dac:	bl	14c58 <__mempcpy_chk@plt+0x3ac8>
   14db0:	str	r5, [r4]
   14db4:	pop	{r4, r5, fp, pc}
   14db8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dbc:	add	fp, sp, #24
   14dc0:	mov	r8, r1
   14dc4:	ldr	r6, [r1]
   14dc8:	add	r1, r6, r6, asr #1
   14dcc:	cmp	r1, r6
   14dd0:	mvnvs	r1, #-2147483648	; 0x80000000
   14dd4:	cmp	r1, r3
   14dd8:	mov	r5, r1
   14ddc:	movgt	r5, r3
   14de0:	cmn	r3, #1
   14de4:	movle	r5, r1
   14de8:	ldr	r4, [fp, #8]
   14dec:	cmn	r4, #1
   14df0:	ble	14e18 <__mempcpy_chk@plt+0x3c88>
   14df4:	cmp	r4, #0
   14df8:	beq	14e6c <__mempcpy_chk@plt+0x3cdc>
   14dfc:	cmn	r5, #1
   14e00:	ble	14e40 <__mempcpy_chk@plt+0x3cb0>
   14e04:	mvn	r7, #-2147483648	; 0x80000000
   14e08:	udiv	r1, r7, r4
   14e0c:	cmp	r1, r5
   14e10:	bge	14e6c <__mempcpy_chk@plt+0x3cdc>
   14e14:	b	14e7c <__mempcpy_chk@plt+0x3cec>
   14e18:	cmn	r5, #1
   14e1c:	ble	14e5c <__mempcpy_chk@plt+0x3ccc>
   14e20:	cmn	r4, #1
   14e24:	beq	14e6c <__mempcpy_chk@plt+0x3cdc>
   14e28:	mov	r1, #-2147483648	; 0x80000000
   14e2c:	sdiv	r1, r1, r4
   14e30:	mvn	r7, #-2147483648	; 0x80000000
   14e34:	cmp	r1, r5
   14e38:	bge	14e6c <__mempcpy_chk@plt+0x3cdc>
   14e3c:	b	14e7c <__mempcpy_chk@plt+0x3cec>
   14e40:	beq	14e6c <__mempcpy_chk@plt+0x3cdc>
   14e44:	mov	r1, #-2147483648	; 0x80000000
   14e48:	sdiv	r1, r1, r5
   14e4c:	mvn	r7, #-2147483648	; 0x80000000
   14e50:	cmp	r1, r4
   14e54:	bge	14e6c <__mempcpy_chk@plt+0x3cdc>
   14e58:	b	14e7c <__mempcpy_chk@plt+0x3cec>
   14e5c:	mvn	r7, #-2147483648	; 0x80000000
   14e60:	sdiv	r1, r7, r4
   14e64:	cmp	r5, r1
   14e68:	blt	14e7c <__mempcpy_chk@plt+0x3cec>
   14e6c:	mul	r1, r5, r4
   14e70:	mov	r7, #64	; 0x40
   14e74:	cmp	r1, #63	; 0x3f
   14e78:	bgt	14e84 <__mempcpy_chk@plt+0x3cf4>
   14e7c:	sdiv	r5, r7, r4
   14e80:	mul	r1, r5, r4
   14e84:	cmp	r0, #0
   14e88:	moveq	r7, #0
   14e8c:	streq	r7, [r8]
   14e90:	sub	r7, r5, r6
   14e94:	cmp	r7, r2
   14e98:	bge	14f44 <__mempcpy_chk@plt+0x3db4>
   14e9c:	add	r5, r6, r2
   14ea0:	mov	r1, #0
   14ea4:	cmp	r5, r3
   14ea8:	mov	r2, #0
   14eac:	movwgt	r2, #1
   14eb0:	cmn	r3, #1
   14eb4:	movwgt	r1, #1
   14eb8:	cmp	r5, r6
   14ebc:	bvs	14f2c <__mempcpy_chk@plt+0x3d9c>
   14ec0:	ands	r1, r1, r2
   14ec4:	bne	14f2c <__mempcpy_chk@plt+0x3d9c>
   14ec8:	cmn	r4, #1
   14ecc:	ble	14ef4 <__mempcpy_chk@plt+0x3d64>
   14ed0:	cmp	r4, #0
   14ed4:	beq	14f40 <__mempcpy_chk@plt+0x3db0>
   14ed8:	cmn	r5, #1
   14edc:	ble	14f18 <__mempcpy_chk@plt+0x3d88>
   14ee0:	mvn	r1, #-2147483648	; 0x80000000
   14ee4:	udiv	r1, r1, r4
   14ee8:	cmp	r1, r5
   14eec:	bge	14f40 <__mempcpy_chk@plt+0x3db0>
   14ef0:	b	14f2c <__mempcpy_chk@plt+0x3d9c>
   14ef4:	cmn	r5, #1
   14ef8:	ble	14f30 <__mempcpy_chk@plt+0x3da0>
   14efc:	cmn	r4, #1
   14f00:	beq	14f40 <__mempcpy_chk@plt+0x3db0>
   14f04:	mov	r1, #-2147483648	; 0x80000000
   14f08:	sdiv	r1, r1, r4
   14f0c:	cmp	r1, r5
   14f10:	bge	14f40 <__mempcpy_chk@plt+0x3db0>
   14f14:	b	14f2c <__mempcpy_chk@plt+0x3d9c>
   14f18:	beq	14f40 <__mempcpy_chk@plt+0x3db0>
   14f1c:	mov	r1, #-2147483648	; 0x80000000
   14f20:	sdiv	r1, r1, r5
   14f24:	cmp	r1, r4
   14f28:	bge	14f40 <__mempcpy_chk@plt+0x3db0>
   14f2c:	bl	15044 <__mempcpy_chk@plt+0x3eb4>
   14f30:	mvn	r1, #-2147483648	; 0x80000000
   14f34:	sdiv	r1, r1, r4
   14f38:	cmp	r5, r1
   14f3c:	blt	14f2c <__mempcpy_chk@plt+0x3d9c>
   14f40:	mul	r1, r5, r4
   14f44:	bl	14cd4 <__mempcpy_chk@plt+0x3b44>
   14f48:	str	r5, [r8]
   14f4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f50:	mov	r1, #1
   14f54:	b	14f58 <__mempcpy_chk@plt+0x3dc8>
   14f58:	push	{fp, lr}
   14f5c:	mov	fp, sp
   14f60:	bl	15124 <__mempcpy_chk@plt+0x3f94>
   14f64:	bl	14ca8 <__mempcpy_chk@plt+0x3b18>
   14f68:	pop	{fp, pc}
   14f6c:	mov	r1, #1
   14f70:	b	14f74 <__mempcpy_chk@plt+0x3de4>
   14f74:	push	{fp, lr}
   14f78:	mov	fp, sp
   14f7c:	bl	15844 <__mempcpy_chk@plt+0x46b4>
   14f80:	bl	14ca8 <__mempcpy_chk@plt+0x3b18>
   14f84:	pop	{fp, pc}
   14f88:	push	{r4, r5, r6, sl, fp, lr}
   14f8c:	add	fp, sp, #16
   14f90:	mov	r4, r1
   14f94:	mov	r5, r0
   14f98:	mov	r0, r1
   14f9c:	bl	14c94 <__mempcpy_chk@plt+0x3b04>
   14fa0:	mov	r6, r0
   14fa4:	mov	r1, r5
   14fa8:	mov	r2, r4
   14fac:	bl	10f68 <memcpy@plt>
   14fb0:	mov	r0, r6
   14fb4:	pop	{r4, r5, r6, sl, fp, pc}
   14fb8:	push	{r4, r5, r6, sl, fp, lr}
   14fbc:	add	fp, sp, #16
   14fc0:	mov	r4, r1
   14fc4:	mov	r5, r0
   14fc8:	mov	r0, r1
   14fcc:	bl	14cbc <__mempcpy_chk@plt+0x3b2c>
   14fd0:	mov	r6, r0
   14fd4:	mov	r1, r5
   14fd8:	mov	r2, r4
   14fdc:	bl	10f68 <memcpy@plt>
   14fe0:	mov	r0, r6
   14fe4:	pop	{r4, r5, r6, sl, fp, pc}
   14fe8:	push	{r4, r5, r6, sl, fp, lr}
   14fec:	add	fp, sp, #16
   14ff0:	mov	r4, r1
   14ff4:	mov	r5, r0
   14ff8:	add	r0, r1, #1
   14ffc:	bl	14cbc <__mempcpy_chk@plt+0x3b2c>
   15000:	mov	r6, r0
   15004:	mov	r0, #0
   15008:	strb	r0, [r6, r4]
   1500c:	mov	r0, r6
   15010:	mov	r1, r5
   15014:	mov	r2, r4
   15018:	bl	10f68 <memcpy@plt>
   1501c:	mov	r0, r6
   15020:	pop	{r4, r5, r6, sl, fp, pc}
   15024:	push	{r4, sl, fp, lr}
   15028:	add	fp, sp, #8
   1502c:	mov	r4, r0
   15030:	bl	11094 <strlen@plt>
   15034:	add	r1, r0, #1
   15038:	mov	r0, r4
   1503c:	pop	{r4, sl, fp, lr}
   15040:	b	14f88 <__mempcpy_chk@plt+0x3df8>
   15044:	push	{fp, lr}
   15048:	mov	fp, sp
   1504c:	movw	r0, #28932	; 0x7104
   15050:	movt	r0, #2
   15054:	ldr	r4, [r0]
   15058:	movw	r1, #26684	; 0x683c
   1505c:	movt	r1, #1
   15060:	mov	r0, #0
   15064:	mov	r2, #5
   15068:	bl	10fa4 <dcgettext@plt>
   1506c:	mov	r3, r0
   15070:	movw	r2, #24747	; 0x60ab
   15074:	movt	r2, #1
   15078:	mov	r0, r4
   1507c:	mov	r1, #0
   15080:	bl	11028 <error@plt>
   15084:	bl	11178 <abort@plt>
   15088:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1508c:	add	fp, sp, #24
   15090:	sub	sp, sp, #8
   15094:	mov	r4, r3
   15098:	mov	r8, r2
   1509c:	mov	r9, r1
   150a0:	mov	r5, r0
   150a4:	bl	110ac <__errno_location@plt>
   150a8:	mov	r7, r0
   150ac:	mov	r6, #0
   150b0:	str	r6, [r0]
   150b4:	add	r1, sp, #4
   150b8:	mov	r0, r5
   150bc:	blx	r4
   150c0:	ldr	r0, [sp, #4]
   150c4:	cmp	r0, r5
   150c8:	beq	15108 <__mempcpy_chk@plt+0x3f78>
   150cc:	cmp	r9, #0
   150d0:	beq	150f0 <__mempcpy_chk@plt+0x3f60>
   150d4:	vcmp.f64	d0, #0.0
   150d8:	vmrs	APSR_nzcv, fpscr
   150dc:	beq	15104 <__mempcpy_chk@plt+0x3f74>
   150e0:	ldr	r0, [r7]
   150e4:	subs	r6, r0, #34	; 0x22
   150e8:	movwne	r6, #1
   150ec:	b	15108 <__mempcpy_chk@plt+0x3f78>
   150f0:	ldrb	r0, [r0]
   150f4:	mov	r6, #0
   150f8:	cmp	r0, #0
   150fc:	bne	15114 <__mempcpy_chk@plt+0x3f84>
   15100:	b	150d4 <__mempcpy_chk@plt+0x3f44>
   15104:	mov	r6, #1
   15108:	cmp	r9, #0
   1510c:	ldrne	r0, [sp, #4]
   15110:	strne	r0, [r9]
   15114:	vstr	d0, [r8]
   15118:	mov	r0, r6
   1511c:	sub	sp, fp, #24
   15120:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15124:	clz	r2, r1
   15128:	lsr	r2, r2, #5
   1512c:	clz	r3, r0
   15130:	lsr	r3, r3, #5
   15134:	orrs	r2, r3, r2
   15138:	movwne	r1, #1
   1513c:	movwne	r0, #1
   15140:	cmp	r1, #0
   15144:	beq	15174 <__mempcpy_chk@plt+0x3fe4>
   15148:	mvn	r2, #-2147483648	; 0x80000000
   1514c:	udiv	r2, r2, r1
   15150:	cmp	r2, r0
   15154:	bcs	15174 <__mempcpy_chk@plt+0x3fe4>
   15158:	push	{fp, lr}
   1515c:	mov	fp, sp
   15160:	bl	110ac <__errno_location@plt>
   15164:	mov	r1, #12
   15168:	str	r1, [r0]
   1516c:	mov	r0, #0
   15170:	pop	{fp, pc}
   15174:	b	10ef0 <calloc@plt>
   15178:	cmp	r0, #0
   1517c:	movweq	r0, #1
   15180:	cmn	r0, #1
   15184:	ble	1518c <__mempcpy_chk@plt+0x3ffc>
   15188:	b	11040 <malloc@plt>
   1518c:	push	{fp, lr}
   15190:	mov	fp, sp
   15194:	bl	110ac <__errno_location@plt>
   15198:	mov	r1, #12
   1519c:	str	r1, [r0]
   151a0:	mov	r0, #0
   151a4:	pop	{fp, pc}
   151a8:	push	{fp, lr}
   151ac:	mov	fp, sp
   151b0:	cmp	r0, #0
   151b4:	beq	151d0 <__mempcpy_chk@plt+0x4040>
   151b8:	cmp	r1, #0
   151bc:	beq	151dc <__mempcpy_chk@plt+0x404c>
   151c0:	cmn	r1, #1
   151c4:	ble	151e8 <__mempcpy_chk@plt+0x4058>
   151c8:	pop	{fp, lr}
   151cc:	b	10fb0 <realloc@plt>
   151d0:	mov	r0, r1
   151d4:	pop	{fp, lr}
   151d8:	b	15178 <__mempcpy_chk@plt+0x3fe8>
   151dc:	bl	12b5c <__mempcpy_chk@plt+0x19cc>
   151e0:	mov	r0, #0
   151e4:	pop	{fp, pc}
   151e8:	bl	110ac <__errno_location@plt>
   151ec:	mov	r1, #12
   151f0:	str	r1, [r0]
   151f4:	mov	r0, #0
   151f8:	pop	{fp, pc}
   151fc:	mov	r1, r0
   15200:	sub	r2, r0, #65	; 0x41
   15204:	mov	r0, #1
   15208:	cmp	r2, #26
   1520c:	subcs	r2, r1, #97	; 0x61
   15210:	cmpcs	r2, #26
   15214:	bcs	1521c <__mempcpy_chk@plt+0x408c>
   15218:	bx	lr
   1521c:	sub	r1, r1, #48	; 0x30
   15220:	cmp	r1, #10
   15224:	movcs	r0, #0
   15228:	bx	lr
   1522c:	mov	r1, r0
   15230:	sub	r2, r0, #65	; 0x41
   15234:	mov	r0, #1
   15238:	cmp	r2, #26
   1523c:	subcs	r1, r1, #97	; 0x61
   15240:	cmpcs	r1, #26
   15244:	movcs	r0, #0
   15248:	bx	lr
   1524c:	mov	r1, #0
   15250:	cmp	r0, #128	; 0x80
   15254:	movwcc	r1, #1
   15258:	mov	r0, r1
   1525c:	bx	lr
   15260:	sub	r1, r0, #9
   15264:	clz	r1, r1
   15268:	lsr	r1, r1, #5
   1526c:	sub	r0, r0, #32
   15270:	clz	r0, r0
   15274:	lsr	r0, r0, #5
   15278:	orr	r0, r0, r1
   1527c:	bx	lr
   15280:	mov	r1, r0
   15284:	mov	r0, #1
   15288:	cmp	r1, #32
   1528c:	bxcc	lr
   15290:	cmp	r1, #127	; 0x7f
   15294:	movne	r0, #0
   15298:	bx	lr
   1529c:	sub	r1, r0, #48	; 0x30
   152a0:	mov	r0, #0
   152a4:	cmp	r1, #10
   152a8:	movwcc	r0, #1
   152ac:	bx	lr
   152b0:	sub	r1, r0, #33	; 0x21
   152b4:	mov	r0, #0
   152b8:	cmp	r1, #94	; 0x5e
   152bc:	movwcc	r0, #1
   152c0:	bx	lr
   152c4:	sub	r1, r0, #97	; 0x61
   152c8:	mov	r0, #0
   152cc:	cmp	r1, #26
   152d0:	movwcc	r0, #1
   152d4:	bx	lr
   152d8:	sub	r1, r0, #32
   152dc:	mov	r0, #0
   152e0:	cmp	r1, #95	; 0x5f
   152e4:	movwcc	r0, #1
   152e8:	bx	lr
   152ec:	sub	r1, r0, #33	; 0x21
   152f0:	cmp	r1, #93	; 0x5d
   152f4:	bhi	15480 <__mempcpy_chk@plt+0x42f0>
   152f8:	mov	r0, #1
   152fc:	add	r2, pc, #0
   15300:	ldr	pc, [r2, r1, lsl #2]
   15304:	andeq	r5, r1, ip, ror r4
   15308:	andeq	r5, r1, ip, ror r4
   1530c:	andeq	r5, r1, ip, ror r4
   15310:	andeq	r5, r1, ip, ror r4
   15314:	andeq	r5, r1, ip, ror r4
   15318:	andeq	r5, r1, ip, ror r4
   1531c:	andeq	r5, r1, ip, ror r4
   15320:	andeq	r5, r1, ip, ror r4
   15324:	andeq	r5, r1, ip, ror r4
   15328:	andeq	r5, r1, ip, ror r4
   1532c:	andeq	r5, r1, ip, ror r4
   15330:	andeq	r5, r1, ip, ror r4
   15334:	andeq	r5, r1, ip, ror r4
   15338:	andeq	r5, r1, ip, ror r4
   1533c:	andeq	r5, r1, ip, ror r4
   15340:	andeq	r5, r1, r0, lsl #9
   15344:	andeq	r5, r1, r0, lsl #9
   15348:	andeq	r5, r1, r0, lsl #9
   1534c:	andeq	r5, r1, r0, lsl #9
   15350:	andeq	r5, r1, r0, lsl #9
   15354:	andeq	r5, r1, r0, lsl #9
   15358:	andeq	r5, r1, r0, lsl #9
   1535c:	andeq	r5, r1, r0, lsl #9
   15360:	andeq	r5, r1, r0, lsl #9
   15364:	andeq	r5, r1, r0, lsl #9
   15368:	andeq	r5, r1, ip, ror r4
   1536c:	andeq	r5, r1, ip, ror r4
   15370:	andeq	r5, r1, ip, ror r4
   15374:	andeq	r5, r1, ip, ror r4
   15378:	andeq	r5, r1, ip, ror r4
   1537c:	andeq	r5, r1, ip, ror r4
   15380:	andeq	r5, r1, ip, ror r4
   15384:	andeq	r5, r1, r0, lsl #9
   15388:	andeq	r5, r1, r0, lsl #9
   1538c:	andeq	r5, r1, r0, lsl #9
   15390:	andeq	r5, r1, r0, lsl #9
   15394:	andeq	r5, r1, r0, lsl #9
   15398:	andeq	r5, r1, r0, lsl #9
   1539c:	andeq	r5, r1, r0, lsl #9
   153a0:	andeq	r5, r1, r0, lsl #9
   153a4:	andeq	r5, r1, r0, lsl #9
   153a8:	andeq	r5, r1, r0, lsl #9
   153ac:	andeq	r5, r1, r0, lsl #9
   153b0:	andeq	r5, r1, r0, lsl #9
   153b4:	andeq	r5, r1, r0, lsl #9
   153b8:	andeq	r5, r1, r0, lsl #9
   153bc:	andeq	r5, r1, r0, lsl #9
   153c0:	andeq	r5, r1, r0, lsl #9
   153c4:	andeq	r5, r1, r0, lsl #9
   153c8:	andeq	r5, r1, r0, lsl #9
   153cc:	andeq	r5, r1, r0, lsl #9
   153d0:	andeq	r5, r1, r0, lsl #9
   153d4:	andeq	r5, r1, r0, lsl #9
   153d8:	andeq	r5, r1, r0, lsl #9
   153dc:	andeq	r5, r1, r0, lsl #9
   153e0:	andeq	r5, r1, r0, lsl #9
   153e4:	andeq	r5, r1, r0, lsl #9
   153e8:	andeq	r5, r1, r0, lsl #9
   153ec:	andeq	r5, r1, ip, ror r4
   153f0:	andeq	r5, r1, ip, ror r4
   153f4:	andeq	r5, r1, ip, ror r4
   153f8:	andeq	r5, r1, ip, ror r4
   153fc:	andeq	r5, r1, ip, ror r4
   15400:	andeq	r5, r1, ip, ror r4
   15404:	andeq	r5, r1, r0, lsl #9
   15408:	andeq	r5, r1, r0, lsl #9
   1540c:	andeq	r5, r1, r0, lsl #9
   15410:	andeq	r5, r1, r0, lsl #9
   15414:	andeq	r5, r1, r0, lsl #9
   15418:	andeq	r5, r1, r0, lsl #9
   1541c:	andeq	r5, r1, r0, lsl #9
   15420:	andeq	r5, r1, r0, lsl #9
   15424:	andeq	r5, r1, r0, lsl #9
   15428:	andeq	r5, r1, r0, lsl #9
   1542c:	andeq	r5, r1, r0, lsl #9
   15430:	andeq	r5, r1, r0, lsl #9
   15434:	andeq	r5, r1, r0, lsl #9
   15438:	andeq	r5, r1, r0, lsl #9
   1543c:	andeq	r5, r1, r0, lsl #9
   15440:	andeq	r5, r1, r0, lsl #9
   15444:	andeq	r5, r1, r0, lsl #9
   15448:	andeq	r5, r1, r0, lsl #9
   1544c:	andeq	r5, r1, r0, lsl #9
   15450:	andeq	r5, r1, r0, lsl #9
   15454:	andeq	r5, r1, r0, lsl #9
   15458:	andeq	r5, r1, r0, lsl #9
   1545c:	andeq	r5, r1, r0, lsl #9
   15460:	andeq	r5, r1, r0, lsl #9
   15464:	andeq	r5, r1, r0, lsl #9
   15468:	andeq	r5, r1, r0, lsl #9
   1546c:	andeq	r5, r1, ip, ror r4
   15470:	andeq	r5, r1, ip, ror r4
   15474:	andeq	r5, r1, ip, ror r4
   15478:	andeq	r5, r1, ip, ror r4
   1547c:	bx	lr
   15480:	mov	r0, #0
   15484:	bx	lr
   15488:	sub	r0, r0, #9
   1548c:	cmp	r0, #23
   15490:	movhi	r0, #0
   15494:	bxhi	lr
   15498:	bic	r0, r0, #-16777216	; 0xff000000
   1549c:	movw	r1, #31
   154a0:	movt	r1, #128	; 0x80
   154a4:	mov	r2, #1
   154a8:	and	r0, r2, r1, lsr r0
   154ac:	bx	lr
   154b0:	sub	r1, r0, #65	; 0x41
   154b4:	mov	r0, #0
   154b8:	cmp	r1, #26
   154bc:	movwcc	r0, #1
   154c0:	bx	lr
   154c4:	mov	r1, r0
   154c8:	sub	r2, r0, #48	; 0x30
   154cc:	mov	r0, #1
   154d0:	cmp	r2, #22
   154d4:	bhi	154ec <__mempcpy_chk@plt+0x435c>
   154d8:	mov	ip, #1
   154dc:	movw	r3, #1023	; 0x3ff
   154e0:	movt	r3, #126	; 0x7e
   154e4:	tst	r3, ip, lsl r2
   154e8:	bxne	lr
   154ec:	sub	r1, r1, #97	; 0x61
   154f0:	cmp	r1, #6
   154f4:	movcs	r0, #0
   154f8:	bxcs	lr
   154fc:	bx	lr
   15500:	sub	r1, r0, #65	; 0x41
   15504:	cmp	r1, #26
   15508:	addcc	r0, r0, #32
   1550c:	bx	lr
   15510:	sub	r1, r0, #97	; 0x61
   15514:	cmp	r1, #26
   15518:	subcc	r0, r0, #32
   1551c:	bx	lr
   15520:	push	{r4, r5, r6, sl, fp, lr}
   15524:	add	fp, sp, #16
   15528:	vpush	{d8}
   1552c:	mov	r4, r1
   15530:	mov	r5, r0
   15534:	bl	155a0 <__mempcpy_chk@plt+0x4410>
   15538:	cmp	r0, #0
   1553c:	beq	15584 <__mempcpy_chk@plt+0x43f4>
   15540:	bl	10f08 <uselocale@plt>
   15544:	cmp	r0, #0
   15548:	beq	15584 <__mempcpy_chk@plt+0x43f4>
   1554c:	mov	r6, r0
   15550:	mov	r0, r5
   15554:	mov	r1, r4
   15558:	bl	10f80 <strtold@plt>
   1555c:	vorr	d8, d0, d0
   15560:	bl	110ac <__errno_location@plt>
   15564:	mov	r4, r0
   15568:	ldr	r5, [r0]
   1556c:	mov	r0, r6
   15570:	bl	10f08 <uselocale@plt>
   15574:	cmp	r0, #0
   15578:	beq	1559c <__mempcpy_chk@plt+0x440c>
   1557c:	str	r5, [r4]
   15580:	b	15590 <__mempcpy_chk@plt+0x4400>
   15584:	vmov.i32	d8, #0	; 0x00000000
   15588:	cmp	r4, #0
   1558c:	strne	r5, [r4]
   15590:	vorr	d0, d8, d8
   15594:	vpop	{d8}
   15598:	pop	{r4, r5, r6, sl, fp, pc}
   1559c:	bl	11178 <abort@plt>
   155a0:	push	{r4, sl, fp, lr}
   155a4:	add	fp, sp, #8
   155a8:	movw	r4, #29384	; 0x72c8
   155ac:	movt	r4, #2
   155b0:	ldr	r0, [r4]
   155b4:	cmp	r0, #0
   155b8:	beq	155c4 <__mempcpy_chk@plt+0x4434>
   155bc:	ldr	r0, [r4]
   155c0:	pop	{r4, sl, fp, pc}
   155c4:	movw	r1, #25454	; 0x636e
   155c8:	movt	r1, #1
   155cc:	movw	r0, #8127	; 0x1fbf
   155d0:	mov	r2, #0
   155d4:	bl	11148 <newlocale@plt>
   155d8:	str	r0, [r4]
   155dc:	ldr	r0, [r4]
   155e0:	pop	{r4, sl, fp, pc}
   155e4:	push	{r4, r5, r6, sl, fp, lr}
   155e8:	add	fp, sp, #16
   155ec:	mov	r4, r0
   155f0:	bl	11004 <__fpending@plt>
   155f4:	mov	r5, r0
   155f8:	mov	r0, r4
   155fc:	bl	11010 <ferror_unlocked@plt>
   15600:	mov	r6, r0
   15604:	mov	r0, r4
   15608:	bl	1566c <__mempcpy_chk@plt+0x44dc>
   1560c:	cmp	r6, #0
   15610:	beq	15630 <__mempcpy_chk@plt+0x44a0>
   15614:	mvn	r4, #0
   15618:	cmp	r0, #0
   1561c:	bne	15664 <__mempcpy_chk@plt+0x44d4>
   15620:	bl	110ac <__errno_location@plt>
   15624:	mov	r1, #0
   15628:	str	r1, [r0]
   1562c:	b	15664 <__mempcpy_chk@plt+0x44d4>
   15630:	cmp	r0, #0
   15634:	mov	r4, r0
   15638:	mvnne	r4, #0
   1563c:	cmp	r5, #0
   15640:	bne	15664 <__mempcpy_chk@plt+0x44d4>
   15644:	cmp	r0, #0
   15648:	beq	15664 <__mempcpy_chk@plt+0x44d4>
   1564c:	bl	110ac <__errno_location@plt>
   15650:	ldr	r0, [r0]
   15654:	subs	r4, r0, #9
   15658:	mvnne	r4, #0
   1565c:	mov	r0, r4
   15660:	pop	{r4, r5, r6, sl, fp, pc}
   15664:	mov	r0, r4
   15668:	pop	{r4, r5, r6, sl, fp, pc}
   1566c:	push	{r4, r5, fp, lr}
   15670:	add	fp, sp, #8
   15674:	sub	sp, sp, #8
   15678:	mov	r4, r0
   1567c:	bl	110e8 <fileno@plt>
   15680:	cmn	r0, #1
   15684:	ble	156fc <__mempcpy_chk@plt+0x456c>
   15688:	mov	r0, r4
   1568c:	bl	11058 <__freading@plt>
   15690:	cmp	r0, #0
   15694:	beq	156c0 <__mempcpy_chk@plt+0x4530>
   15698:	mov	r0, r4
   1569c:	bl	110e8 <fileno@plt>
   156a0:	mov	r1, #1
   156a4:	str	r1, [sp]
   156a8:	mov	r2, #0
   156ac:	mov	r3, #0
   156b0:	bl	10fe0 <lseek64@plt>
   156b4:	and	r0, r0, r1
   156b8:	cmn	r0, #1
   156bc:	beq	156fc <__mempcpy_chk@plt+0x456c>
   156c0:	mov	r0, r4
   156c4:	bl	1570c <__mempcpy_chk@plt+0x457c>
   156c8:	cmp	r0, #0
   156cc:	beq	156fc <__mempcpy_chk@plt+0x456c>
   156d0:	bl	110ac <__errno_location@plt>
   156d4:	ldr	r5, [r0]
   156d8:	mov	r0, r4
   156dc:	bl	1110c <fclose@plt>
   156e0:	cmp	r5, #0
   156e4:	beq	156f4 <__mempcpy_chk@plt+0x4564>
   156e8:	bl	110ac <__errno_location@plt>
   156ec:	str	r5, [r0]
   156f0:	mvn	r0, #0
   156f4:	sub	sp, fp, #8
   156f8:	pop	{r4, r5, fp, pc}
   156fc:	mov	r0, r4
   15700:	sub	sp, fp, #8
   15704:	pop	{r4, r5, fp, lr}
   15708:	b	1110c <fclose@plt>
   1570c:	push	{r4, sl, fp, lr}
   15710:	add	fp, sp, #8
   15714:	mov	r4, r0
   15718:	cmp	r0, #0
   1571c:	beq	15734 <__mempcpy_chk@plt+0x45a4>
   15720:	mov	r0, r4
   15724:	bl	11058 <__freading@plt>
   15728:	cmp	r0, #0
   1572c:	movne	r0, r4
   15730:	blne	15740 <__mempcpy_chk@plt+0x45b0>
   15734:	mov	r0, r4
   15738:	pop	{r4, sl, fp, lr}
   1573c:	b	10f38 <fflush@plt>
   15740:	ldrb	r1, [r0, #1]
   15744:	tst	r1, #1
   15748:	bxeq	lr
   1574c:	push	{fp, lr}
   15750:	mov	fp, sp
   15754:	sub	sp, sp, #8
   15758:	mov	r1, #1
   1575c:	str	r1, [sp]
   15760:	mov	r2, #0
   15764:	mov	r3, #0
   15768:	bl	15774 <__mempcpy_chk@plt+0x45e4>
   1576c:	mov	sp, fp
   15770:	pop	{fp, pc}
   15774:	push	{r4, r5, r6, r7, fp, lr}
   15778:	add	fp, sp, #16
   1577c:	sub	sp, sp, #8
   15780:	mov	r5, r3
   15784:	mov	r6, r2
   15788:	mov	r4, r0
   1578c:	ldr	r0, [r0, #4]
   15790:	ldr	r1, [r4, #8]
   15794:	cmp	r1, r0
   15798:	bne	157b4 <__mempcpy_chk@plt+0x4624>
   1579c:	ldrd	r0, [r4, #16]
   157a0:	cmp	r1, r0
   157a4:	bne	157b4 <__mempcpy_chk@plt+0x4624>
   157a8:	ldr	r0, [r4, #36]	; 0x24
   157ac:	cmp	r0, #0
   157b0:	beq	157cc <__mempcpy_chk@plt+0x463c>
   157b4:	mov	r0, r4
   157b8:	mov	r2, r6
   157bc:	mov	r3, r5
   157c0:	sub	sp, fp, #16
   157c4:	pop	{r4, r5, r6, r7, fp, lr}
   157c8:	b	11118 <fseeko64@plt>
   157cc:	ldr	r7, [fp, #8]
   157d0:	mov	r0, r4
   157d4:	bl	110e8 <fileno@plt>
   157d8:	str	r7, [sp]
   157dc:	mov	r2, r6
   157e0:	mov	r3, r5
   157e4:	bl	10fe0 <lseek64@plt>
   157e8:	and	r2, r0, r1
   157ec:	cmn	r2, #1
   157f0:	mvneq	r0, #0
   157f4:	subeq	sp, fp, #16
   157f8:	popeq	{r4, r5, r6, r7, fp, pc}
   157fc:	strd	r0, [r4, #80]	; 0x50
   15800:	ldr	r0, [r4]
   15804:	bic	r0, r0, #16
   15808:	str	r0, [r4]
   1580c:	mov	r0, #0
   15810:	sub	sp, fp, #16
   15814:	pop	{r4, r5, r6, r7, fp, pc}
   15818:	push	{fp, lr}
   1581c:	mov	fp, sp
   15820:	bl	110ac <__errno_location@plt>
   15824:	mov	r1, #12
   15828:	str	r1, [r0]
   1582c:	mov	r0, #0
   15830:	pop	{fp, pc}
   15834:	b	15178 <__mempcpy_chk@plt+0x3fe8>
   15838:	cmp	r1, #0
   1583c:	orreq	r1, r1, #1
   15840:	b	151a8 <__mempcpy_chk@plt+0x4018>
   15844:	b	15124 <__mempcpy_chk@plt+0x3f94>
   15848:	clz	r3, r2
   1584c:	lsr	ip, r3, #5
   15850:	clz	r3, r1
   15854:	lsr	r3, r3, #5
   15858:	orrs	r3, r3, ip
   1585c:	movwne	r1, #1
   15860:	movwne	r2, #1
   15864:	b	15900 <__mempcpy_chk@plt+0x4770>
   15868:	push	{fp, lr}
   1586c:	mov	fp, sp
   15870:	mov	r0, #14
   15874:	bl	1113c <nl_langinfo@plt>
   15878:	movw	r1, #25145	; 0x6239
   1587c:	movt	r1, #1
   15880:	cmp	r0, #0
   15884:	movne	r1, r0
   15888:	ldrb	r2, [r1]
   1588c:	movw	r0, #26701	; 0x684d
   15890:	movt	r0, #1
   15894:	cmp	r2, #0
   15898:	movne	r0, r1
   1589c:	pop	{fp, pc}
   158a0:	push	{r4, r5, r6, r7, fp, lr}
   158a4:	add	fp, sp, #16
   158a8:	sub	sp, sp, #8
   158ac:	mov	r7, r2
   158b0:	mov	r4, r1
   158b4:	add	r5, sp, #4
   158b8:	cmp	r0, #0
   158bc:	movne	r5, r0
   158c0:	mov	r0, r5
   158c4:	bl	1101c <mbrtowc@plt>
   158c8:	mov	r6, r0
   158cc:	cmp	r7, #0
   158d0:	beq	158f4 <__mempcpy_chk@plt+0x4764>
   158d4:	cmn	r6, #2
   158d8:	bcc	158f4 <__mempcpy_chk@plt+0x4764>
   158dc:	mov	r0, #0
   158e0:	bl	1593c <__mempcpy_chk@plt+0x47ac>
   158e4:	cmp	r0, #0
   158e8:	ldrbeq	r0, [r4]
   158ec:	streq	r0, [r5]
   158f0:	moveq	r6, #1
   158f4:	mov	r0, r6
   158f8:	sub	sp, fp, #16
   158fc:	pop	{r4, r5, r6, r7, fp, pc}
   15900:	cmp	r2, #0
   15904:	beq	15934 <__mempcpy_chk@plt+0x47a4>
   15908:	mvn	r3, #0
   1590c:	udiv	r3, r3, r2
   15910:	cmp	r3, r1
   15914:	bcs	15934 <__mempcpy_chk@plt+0x47a4>
   15918:	push	{fp, lr}
   1591c:	mov	fp, sp
   15920:	bl	110ac <__errno_location@plt>
   15924:	mov	r1, #12
   15928:	str	r1, [r0]
   1592c:	mov	r0, #0
   15930:	pop	{fp, pc}
   15934:	mul	r1, r2, r1
   15938:	b	151a8 <__mempcpy_chk@plt+0x4018>
   1593c:	push	{r4, sl, fp, lr}
   15940:	add	fp, sp, #8
   15944:	sub	sp, sp, #264	; 0x108
   15948:	add	r1, sp, #7
   1594c:	movw	r2, #257	; 0x101
   15950:	bl	159a0 <__mempcpy_chk@plt+0x4810>
   15954:	mov	r4, #0
   15958:	cmp	r0, #0
   1595c:	bne	15994 <__mempcpy_chk@plt+0x4804>
   15960:	add	r0, sp, #7
   15964:	movw	r1, #25454	; 0x636e
   15968:	movt	r1, #1
   1596c:	bl	10f14 <strcmp@plt>
   15970:	cmp	r0, #0
   15974:	beq	15994 <__mempcpy_chk@plt+0x4804>
   15978:	add	r0, sp, #7
   1597c:	movw	r1, #26707	; 0x6853
   15980:	movt	r1, #1
   15984:	bl	10f14 <strcmp@plt>
   15988:	mov	r4, r0
   1598c:	cmp	r0, #0
   15990:	movwne	r4, #1
   15994:	mov	r0, r4
   15998:	sub	sp, fp, #8
   1599c:	pop	{r4, sl, fp, pc}
   159a0:	b	159a4 <__mempcpy_chk@plt+0x4814>
   159a4:	push	{r4, r5, r6, r7, fp, lr}
   159a8:	add	fp, sp, #16
   159ac:	mov	r6, r2
   159b0:	mov	r4, r1
   159b4:	bl	15a40 <__mempcpy_chk@plt+0x48b0>
   159b8:	cmp	r0, #0
   159bc:	beq	159ec <__mempcpy_chk@plt+0x485c>
   159c0:	mov	r7, r0
   159c4:	bl	11094 <strlen@plt>
   159c8:	cmp	r0, r6
   159cc:	bcs	15a0c <__mempcpy_chk@plt+0x487c>
   159d0:	add	r2, r0, #1
   159d4:	mov	r0, r4
   159d8:	mov	r1, r7
   159dc:	bl	10f68 <memcpy@plt>
   159e0:	mov	r5, #0
   159e4:	mov	r0, r5
   159e8:	pop	{r4, r5, r6, r7, fp, pc}
   159ec:	mov	r5, #22
   159f0:	cmp	r6, #0
   159f4:	movne	r0, #0
   159f8:	strbne	r0, [r4]
   159fc:	movne	r0, r5
   15a00:	popne	{r4, r5, r6, r7, fp, pc}
   15a04:	mov	r0, r5
   15a08:	pop	{r4, r5, r6, r7, fp, pc}
   15a0c:	mov	r5, #34	; 0x22
   15a10:	cmp	r6, #0
   15a14:	beq	15a34 <__mempcpy_chk@plt+0x48a4>
   15a18:	sub	r6, r6, #1
   15a1c:	mov	r0, r4
   15a20:	mov	r1, r7
   15a24:	mov	r2, r6
   15a28:	bl	10f68 <memcpy@plt>
   15a2c:	mov	r0, #0
   15a30:	strb	r0, [r4, r6]
   15a34:	mov	r0, r5
   15a38:	pop	{r4, r5, r6, r7, fp, pc}
   15a3c:	b	15a40 <__mempcpy_chk@plt+0x48b0>
   15a40:	mov	r1, #0
   15a44:	b	11124 <setlocale@plt>
   15a48:	vmov	d6, r0, r1
   15a4c:	vldr	d7, [pc, #36]	; 15a78 <__mempcpy_chk@plt+0x48e8>
   15a50:	vldr	d5, [pc, #40]	; 15a80 <__mempcpy_chk@plt+0x48f0>
   15a54:	vmul.f64	d7, d6, d7
   15a58:	vcvt.u32.f64	s14, d7
   15a5c:	vcvt.f64.u32	d4, s14
   15a60:	vmov	r1, s14
   15a64:	vmls.f64	d6, d4, d5
   15a68:	vcvt.u32.f64	s15, d6
   15a6c:	vmov	r0, s15
   15a70:	bx	lr
   15a74:	nop			; (mov r0, r0)
   15a78:	andeq	r0, r0, r0
   15a7c:	ldclcc	0, cr0, [r0]
   15a80:	andeq	r0, r0, r0
   15a84:	mvnsmi	r0, r0
   15a88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a8c:	mov	r7, r0
   15a90:	ldr	r6, [pc, #72]	; 15ae0 <__mempcpy_chk@plt+0x4950>
   15a94:	ldr	r5, [pc, #72]	; 15ae4 <__mempcpy_chk@plt+0x4954>
   15a98:	add	r6, pc, r6
   15a9c:	add	r5, pc, r5
   15aa0:	sub	r6, r6, r5
   15aa4:	mov	r8, r1
   15aa8:	mov	r9, r2
   15aac:	bl	10ed0 <calloc@plt-0x20>
   15ab0:	asrs	r6, r6, #2
   15ab4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ab8:	mov	r4, #0
   15abc:	add	r4, r4, #1
   15ac0:	ldr	r3, [r5], #4
   15ac4:	mov	r2, r9
   15ac8:	mov	r1, r8
   15acc:	mov	r0, r7
   15ad0:	blx	r3
   15ad4:	cmp	r6, r4
   15ad8:	bne	15abc <__mempcpy_chk@plt+0x492c>
   15adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ae0:	andeq	r1, r1, ip, ror #8
   15ae4:	andeq	r1, r1, r4, ror #8
   15ae8:	bx	lr
   15aec:	ldr	r3, [pc, #12]	; 15b00 <__mempcpy_chk@plt+0x4970>
   15af0:	mov	r1, #0
   15af4:	add	r3, pc, r3
   15af8:	ldr	r2, [r3]
   15afc:	b	110c4 <__cxa_atexit@plt>
   15b00:	andeq	r1, r1, r0, lsl #12

Disassembly of section .fini:

00015b04 <.fini>:
   15b04:	push	{r3, lr}
   15b08:	pop	{r3, pc}
