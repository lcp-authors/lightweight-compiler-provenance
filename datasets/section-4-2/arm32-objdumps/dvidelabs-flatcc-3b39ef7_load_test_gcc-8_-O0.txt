
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f68 <.init>:
   11f68:	push	{r3, lr}
   11f6c:	bl	120c4 <_start@@Base+0x3c>
   11f70:	pop	{r3, pc}

Disassembly of section .plt:

00011f74 <strcmp@plt-0x14>:
   11f74:	push	{lr}		; (str lr, [sp, #-4]!)
   11f78:	ldr	lr, [pc, #4]	; 11f84 <strcmp@plt-0x4>
   11f7c:	add	lr, pc, lr
   11f80:	ldr	pc, [lr, #8]!
   11f84:	andeq	sl, r1, ip, ror r0

00011f88 <strcmp@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #106496	; 0x1a000
   11f90:	ldr	pc, [ip, #124]!	; 0x7c

00011f94 <printf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #106496	; 0x1a000
   11f9c:	ldr	pc, [ip, #116]!	; 0x74

00011fa0 <fopen@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #106496	; 0x1a000
   11fa8:	ldr	pc, [ip, #108]!	; 0x6c

00011fac <free@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #106496	; 0x1a000
   11fb4:	ldr	pc, [ip, #100]!	; 0x64

00011fb8 <memcpy@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #106496	; 0x1a000
   11fc0:	ldr	pc, [ip, #92]!	; 0x5c

00011fc4 <memcmp@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #106496	; 0x1a000
   11fcc:	ldr	pc, [ip, #84]!	; 0x54

00011fd0 <realloc@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #106496	; 0x1a000
   11fd8:	ldr	pc, [ip, #76]!	; 0x4c

00011fdc <fwrite@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #106496	; 0x1a000
   11fe4:	ldr	pc, [ip, #68]!	; 0x44

00011fe8 <gettimeofday@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #106496	; 0x1a000
   11ff0:	ldr	pc, [ip, #60]!	; 0x3c

00011ff4 <puts@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #106496	; 0x1a000
   11ffc:	ldr	pc, [ip, #52]!	; 0x34

00012000 <malloc@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #106496	; 0x1a000
   12008:	ldr	pc, [ip, #44]!	; 0x2c

0001200c <__libc_start_main@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #106496	; 0x1a000
   12014:	ldr	pc, [ip, #36]!	; 0x24

00012018 <__gmon_start__@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #106496	; 0x1a000
   12020:	ldr	pc, [ip, #28]!

00012024 <strlen@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #106496	; 0x1a000
   1202c:	ldr	pc, [ip, #20]!

00012030 <posix_memalign@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #106496	; 0x1a000
   12038:	ldr	pc, [ip, #12]!

0001203c <memset@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #106496	; 0x1a000
   12044:	ldr	pc, [ip, #4]!

00012048 <strncpy@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #102400	; 0x19000
   12050:	ldr	pc, [ip, #4092]!	; 0xffc

00012054 <memchr@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #102400	; 0x19000
   1205c:	ldr	pc, [ip, #4084]!	; 0xff4

00012060 <fclose@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #102400	; 0x19000
   12068:	ldr	pc, [ip, #4076]!	; 0xfec

0001206c <abort@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #102400	; 0x19000
   12074:	ldr	pc, [ip, #4068]!	; 0xfe4

00012078 <__assert_fail@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #102400	; 0x19000
   12080:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00012088 <_start@@Base>:
   12088:	mov	fp, #0
   1208c:	mov	lr, #0
   12090:	pop	{r1}		; (ldr r1, [sp], #4)
   12094:	mov	r2, sp
   12098:	push	{r2}		; (str r2, [sp, #-4]!)
   1209c:	push	{r0}		; (str r0, [sp, #-4]!)
   120a0:	ldr	ip, [pc, #16]	; 120b8 <_start@@Base+0x30>
   120a4:	push	{ip}		; (str ip, [sp, #-4]!)
   120a8:	ldr	r0, [pc, #12]	; 120bc <_start@@Base+0x34>
   120ac:	ldr	r3, [pc, #12]	; 120c0 <_start@@Base+0x38>
   120b0:	bl	1200c <__libc_start_main@plt>
   120b4:	bl	1206c <abort@plt>
   120b8:	andeq	sl, r1, r0, ror sp
   120bc:	andeq	r3, r1, ip, lsr #14
   120c0:	andeq	sl, r1, r0, lsl sp
   120c4:	ldr	r3, [pc, #20]	; 120e0 <_start@@Base+0x58>
   120c8:	ldr	r2, [pc, #20]	; 120e4 <_start@@Base+0x5c>
   120cc:	add	r3, pc, r3
   120d0:	ldr	r2, [r3, r2]
   120d4:	cmp	r2, #0
   120d8:	bxeq	lr
   120dc:	b	12018 <__gmon_start__@plt>
   120e0:	andeq	r9, r1, ip, lsr #30
   120e4:	andeq	r0, r0, r4, rrx
   120e8:	ldr	r0, [pc, #24]	; 12108 <_start@@Base+0x80>
   120ec:	ldr	r3, [pc, #24]	; 1210c <_start@@Base+0x84>
   120f0:	cmp	r3, r0
   120f4:	bxeq	lr
   120f8:	ldr	r3, [pc, #16]	; 12110 <_start@@Base+0x88>
   120fc:	cmp	r3, #0
   12100:	bxeq	lr
   12104:	bx	r3
   12108:	andeq	ip, r2, r0, lsl #1
   1210c:	andeq	ip, r2, r0, lsl #1
   12110:	andeq	r0, r0, r0
   12114:	ldr	r0, [pc, #36]	; 12140 <_start@@Base+0xb8>
   12118:	ldr	r1, [pc, #36]	; 12144 <_start@@Base+0xbc>
   1211c:	sub	r1, r1, r0
   12120:	asr	r1, r1, #2
   12124:	add	r1, r1, r1, lsr #31
   12128:	asrs	r1, r1, #1
   1212c:	bxeq	lr
   12130:	ldr	r3, [pc, #16]	; 12148 <_start@@Base+0xc0>
   12134:	cmp	r3, #0
   12138:	bxeq	lr
   1213c:	bx	r3
   12140:	andeq	ip, r2, r0, lsl #1
   12144:	andeq	ip, r2, r0, lsl #1
   12148:	andeq	r0, r0, r0
   1214c:	push	{r4, lr}
   12150:	ldr	r4, [pc, #24]	; 12170 <_start@@Base+0xe8>
   12154:	ldrb	r3, [r4]
   12158:	cmp	r3, #0
   1215c:	popne	{r4, pc}
   12160:	bl	120e8 <_start@@Base+0x60>
   12164:	mov	r3, #1
   12168:	strb	r3, [r4]
   1216c:	pop	{r4, pc}
   12170:	andeq	ip, r2, r0, lsl #1
   12174:	b	12114 <_start@@Base+0x8c>
   12178:	push	{fp}		; (str fp, [sp, #-4]!)
   1217c:	add	fp, sp, #0
   12180:	sub	sp, sp, #12
   12184:	str	r0, [fp, #-8]
   12188:	ldr	r3, [fp, #-8]
   1218c:	mov	r0, r3
   12190:	add	sp, fp, #0
   12194:	pop	{fp}		; (ldr fp, [sp], #4)
   12198:	bx	lr
   1219c:	str	fp, [sp, #-8]!
   121a0:	str	lr, [sp, #4]
   121a4:	add	fp, sp, #4
   121a8:	sub	sp, sp, #8
   121ac:	str	r0, [fp, #-8]
   121b0:	ldr	r3, [fp, #-8]
   121b4:	ldr	r3, [r3]
   121b8:	mov	r0, r3
   121bc:	bl	12178 <_start@@Base+0xf0>
   121c0:	mov	r3, r0
   121c4:	mov	r0, r3
   121c8:	sub	sp, fp, #4
   121cc:	ldr	fp, [sp]
   121d0:	add	sp, sp, #4
   121d4:	pop	{pc}		; (ldr pc, [sp], #4)
   121d8:	push	{fp}		; (str fp, [sp, #-4]!)
   121dc:	add	fp, sp, #0
   121e0:	sub	sp, sp, #12
   121e4:	str	r0, [fp, #-8]
   121e8:	ldr	r3, [fp, #-8]
   121ec:	mov	r0, r3
   121f0:	add	sp, fp, #0
   121f4:	pop	{fp}		; (ldr fp, [sp], #4)
   121f8:	bx	lr
   121fc:	str	fp, [sp, #-8]!
   12200:	str	lr, [sp, #4]
   12204:	add	fp, sp, #4
   12208:	sub	sp, sp, #8
   1220c:	str	r0, [fp, #-8]
   12210:	ldr	r3, [fp, #-8]
   12214:	ldr	r3, [r3]
   12218:	mov	r0, r3
   1221c:	bl	121d8 <_start@@Base+0x150>
   12220:	mov	r3, r0
   12224:	mov	r0, r3
   12228:	sub	sp, fp, #4
   1222c:	ldr	fp, [sp]
   12230:	add	sp, sp, #4
   12234:	pop	{pc}		; (ldr pc, [sp], #4)
   12238:	push	{fp}		; (str fp, [sp, #-4]!)
   1223c:	add	fp, sp, #0
   12240:	sub	sp, sp, #12
   12244:	mov	r3, r0
   12248:	strh	r3, [fp, #-6]
   1224c:	ldrh	r3, [fp, #-6]
   12250:	mov	r0, r3
   12254:	add	sp, fp, #0
   12258:	pop	{fp}		; (ldr fp, [sp], #4)
   1225c:	bx	lr
   12260:	str	fp, [sp, #-8]!
   12264:	str	lr, [sp, #4]
   12268:	add	fp, sp, #4
   1226c:	sub	sp, sp, #8
   12270:	str	r0, [fp, #-8]
   12274:	ldr	r3, [fp, #-8]
   12278:	ldrh	r3, [r3]
   1227c:	mov	r0, r3
   12280:	bl	12238 <_start@@Base+0x1b0>
   12284:	mov	r3, r0
   12288:	mov	r0, r3
   1228c:	sub	sp, fp, #4
   12290:	ldr	fp, [sp]
   12294:	add	sp, sp, #4
   12298:	pop	{pc}		; (ldr pc, [sp], #4)
   1229c:	push	{fp}		; (str fp, [sp, #-4]!)
   122a0:	add	fp, sp, #0
   122a4:	sub	sp, sp, #12
   122a8:	str	r0, [fp, #-8]
   122ac:	ldr	r3, [fp, #-8]
   122b0:	mov	r0, r3
   122b4:	add	sp, fp, #0
   122b8:	pop	{fp}		; (ldr fp, [sp], #4)
   122bc:	bx	lr
   122c0:	push	{fp}		; (str fp, [sp, #-4]!)
   122c4:	add	fp, sp, #0
   122c8:	sub	sp, sp, #12
   122cc:	str	r0, [fp, #-8]
   122d0:	ldr	r3, [fp, #-8]
   122d4:	mov	r0, r3
   122d8:	add	sp, fp, #0
   122dc:	pop	{fp}		; (ldr fp, [sp], #4)
   122e0:	bx	lr
   122e4:	str	fp, [sp, #-8]!
   122e8:	str	lr, [sp, #4]
   122ec:	add	fp, sp, #4
   122f0:	sub	sp, sp, #8
   122f4:	str	r0, [fp, #-8]
   122f8:	ldr	r3, [fp, #-8]
   122fc:	ldr	r3, [r3]
   12300:	mov	r0, r3
   12304:	bl	1229c <_start@@Base+0x214>
   12308:	mov	r3, r0
   1230c:	mov	r0, r3
   12310:	sub	sp, fp, #4
   12314:	ldr	fp, [sp]
   12318:	add	sp, sp, #4
   1231c:	pop	{pc}		; (ldr pc, [sp], #4)
   12320:	str	fp, [sp, #-8]!
   12324:	str	lr, [sp, #4]
   12328:	add	fp, sp, #4
   1232c:	sub	sp, sp, #8
   12330:	str	r0, [fp, #-8]
   12334:	ldr	r3, [fp, #-8]
   12338:	cmp	r3, #0
   1233c:	beq	12358 <_start@@Base+0x2d0>
   12340:	ldr	r3, [fp, #-8]
   12344:	sub	r3, r3, #4
   12348:	mov	r0, r3
   1234c:	bl	1219c <_start@@Base+0x114>
   12350:	mov	r3, r0
   12354:	b	1235c <_start@@Base+0x2d4>
   12358:	mov	r3, #0
   1235c:	mov	r0, r3
   12360:	sub	sp, fp, #4
   12364:	ldr	fp, [sp]
   12368:	add	sp, sp, #4
   1236c:	pop	{pc}		; (ldr pc, [sp], #4)
   12370:	str	fp, [sp, #-8]!
   12374:	str	lr, [sp, #4]
   12378:	add	fp, sp, #4
   1237c:	sub	sp, sp, #8
   12380:	str	r0, [fp, #-8]
   12384:	ldr	r3, [fp, #-8]
   12388:	cmp	r3, #0
   1238c:	beq	123a8 <_start@@Base+0x320>
   12390:	ldr	r3, [fp, #-8]
   12394:	sub	r3, r3, #4
   12398:	mov	r0, r3
   1239c:	bl	1219c <_start@@Base+0x114>
   123a0:	mov	r3, r0
   123a4:	b	123ac <_start@@Base+0x324>
   123a8:	mov	r3, #0
   123ac:	mov	r0, r3
   123b0:	sub	sp, fp, #4
   123b4:	ldr	fp, [sp]
   123b8:	add	sp, sp, #4
   123bc:	pop	{pc}		; (ldr pc, [sp], #4)
   123c0:	str	fp, [sp, #-8]!
   123c4:	str	lr, [sp, #4]
   123c8:	add	fp, sp, #4
   123cc:	sub	sp, sp, #8
   123d0:	str	r0, [fp, #-8]
   123d4:	ldr	r0, [fp, #-8]
   123d8:	bl	12320 <_start@@Base+0x298>
   123dc:	mov	r3, r0
   123e0:	mov	r0, r3
   123e4:	sub	sp, fp, #4
   123e8:	ldr	fp, [sp]
   123ec:	add	sp, sp, #4
   123f0:	pop	{pc}		; (ldr pc, [sp], #4)
   123f4:	str	fp, [sp, #-8]!
   123f8:	str	lr, [sp, #4]
   123fc:	add	fp, sp, #4
   12400:	sub	sp, sp, #16
   12404:	str	r0, [fp, #-16]
   12408:	str	r1, [fp, #-20]	; 0xffffffec
   1240c:	mov	r3, #0
   12410:	str	r3, [fp, #-12]
   12414:	ldr	r3, [fp, #-20]	; 0xffffffec
   12418:	cmp	r3, #0
   1241c:	bne	12428 <_start@@Base+0x3a0>
   12420:	mov	r3, #1
   12424:	b	1248c <_start@@Base+0x404>
   12428:	sub	r3, fp, #12
   1242c:	mov	r2, #4
   12430:	ldr	r1, [fp, #-20]	; 0xffffffec
   12434:	mov	r0, r3
   12438:	bl	12048 <strncpy@plt>
   1243c:	ldr	r3, [fp, #-12]
   12440:	mov	r0, r3
   12444:	bl	122c0 <_start@@Base+0x238>
   12448:	mov	r3, r0
   1244c:	str	r3, [fp, #-12]
   12450:	ldr	r3, [fp, #-16]
   12454:	add	r3, r3, #4
   12458:	mov	r0, r3
   1245c:	bl	122e4 <_start@@Base+0x25c>
   12460:	str	r0, [fp, #-8]
   12464:	ldr	r3, [fp, #-12]
   12468:	cmp	r3, #0
   1246c:	beq	12480 <_start@@Base+0x3f8>
   12470:	ldr	r3, [fp, #-12]
   12474:	ldr	r2, [fp, #-8]
   12478:	cmp	r2, r3
   1247c:	bne	12488 <_start@@Base+0x400>
   12480:	mov	r3, #1
   12484:	b	1248c <_start@@Base+0x404>
   12488:	mov	r3, #0
   1248c:	mov	r0, r3
   12490:	sub	sp, fp, #4
   12494:	ldr	fp, [sp]
   12498:	add	sp, sp, #4
   1249c:	pop	{pc}		; (ldr pc, [sp], #4)
   124a0:	str	fp, [sp, #-8]!
   124a4:	str	lr, [sp, #4]
   124a8:	add	fp, sp, #4
   124ac:	sub	sp, sp, #8
   124b0:	str	r0, [fp, #-8]
   124b4:	ldr	r3, [fp, #-8]
   124b8:	cmp	r3, #0
   124bc:	beq	124d8 <_start@@Base+0x450>
   124c0:	ldr	r3, [fp, #-8]
   124c4:	sub	r3, r3, #4
   124c8:	mov	r0, r3
   124cc:	bl	1219c <_start@@Base+0x114>
   124d0:	mov	r3, r0
   124d4:	b	124dc <_start@@Base+0x454>
   124d8:	mov	r3, #0
   124dc:	mov	r0, r3
   124e0:	sub	sp, fp, #4
   124e4:	ldr	fp, [sp]
   124e8:	add	sp, sp, #4
   124ec:	pop	{pc}		; (ldr pc, [sp], #4)
   124f0:	str	fp, [sp, #-8]!
   124f4:	str	lr, [sp, #4]
   124f8:	add	fp, sp, #4
   124fc:	sub	sp, sp, #16
   12500:	str	r0, [fp, #-16]
   12504:	str	r1, [fp, #-20]	; 0xffffffec
   12508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1250c:	lsl	r3, r3, #2
   12510:	ldr	r2, [fp, #-16]
   12514:	add	r3, r2, r3
   12518:	str	r3, [fp, #-8]
   1251c:	ldr	r0, [fp, #-16]
   12520:	bl	12320 <_start@@Base+0x298>
   12524:	mov	r2, r0
   12528:	ldr	r3, [fp, #-20]	; 0xffffffec
   1252c:	cmp	r3, r2
   12530:	bcc	12554 <_start@@Base+0x4cc>
   12534:	ldr	r3, [pc, #64]	; 1257c <_start@@Base+0x4f4>
   12538:	add	r3, pc, r3
   1253c:	movw	r2, #693	; 0x2b5
   12540:	ldr	r1, [pc, #56]	; 12580 <_start@@Base+0x4f8>
   12544:	add	r1, pc, r1
   12548:	ldr	r0, [pc, #52]	; 12584 <_start@@Base+0x4fc>
   1254c:	add	r0, pc, r0
   12550:	bl	12078 <__assert_fail@plt>
   12554:	ldr	r0, [fp, #-8]
   12558:	bl	1219c <_start@@Base+0x114>
   1255c:	mov	r2, r0
   12560:	ldr	r3, [fp, #-8]
   12564:	add	r3, r3, r2
   12568:	mov	r0, r3
   1256c:	sub	sp, fp, #4
   12570:	ldr	fp, [sp]
   12574:	add	sp, sp, #4
   12578:	pop	{pc}		; (ldr pc, [sp], #4)
   1257c:	andeq	r8, r0, r8, asr #27
   12580:	andeq	r8, r0, r8, lsr r8
   12584:	andeq	r8, r0, r8, lsr #17
   12588:	str	fp, [sp, #-8]!
   1258c:	str	lr, [sp, #4]
   12590:	add	fp, sp, #4
   12594:	sub	sp, sp, #16
   12598:	str	r0, [fp, #-16]
   1259c:	ldr	r3, [pc, #88]	; 125fc <_start@@Base+0x574>
   125a0:	add	r3, pc, r3
   125a4:	str	r3, [fp, #-8]
   125a8:	ldr	r3, [fp, #-16]
   125ac:	cmp	r3, #0
   125b0:	beq	125e4 <_start@@Base+0x55c>
   125b4:	ldr	r1, [fp, #-8]
   125b8:	ldr	r0, [fp, #-16]
   125bc:	bl	123f4 <_start@@Base+0x36c>
   125c0:	mov	r3, r0
   125c4:	cmp	r3, #0
   125c8:	beq	125e4 <_start@@Base+0x55c>
   125cc:	ldr	r0, [fp, #-16]
   125d0:	bl	1219c <_start@@Base+0x114>
   125d4:	mov	r2, r0
   125d8:	ldr	r3, [fp, #-16]
   125dc:	add	r3, r3, r2
   125e0:	b	125e8 <_start@@Base+0x560>
   125e4:	mov	r3, #0
   125e8:	mov	r0, r3
   125ec:	sub	sp, fp, #4
   125f0:	ldr	fp, [sp]
   125f4:	add	sp, sp, #4
   125f8:	pop	{pc}		; (ldr pc, [sp], #4)
   125fc:	andeq	r8, r0, ip, lsl #17
   12600:	str	fp, [sp, #-8]!
   12604:	str	lr, [sp, #4]
   12608:	add	fp, sp, #4
   1260c:	sub	sp, sp, #24
   12610:	str	r0, [fp, #-24]	; 0xffffffe8
   12614:	mov	r3, #0
   12618:	strh	r3, [fp, #-6]
   1261c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12620:	cmp	r3, #0
   12624:	bne	12648 <_start@@Base+0x5c0>
   12628:	ldr	r3, [pc, #240]	; 12720 <_start@@Base+0x698>
   1262c:	add	r3, pc, r3
   12630:	movw	r2, #699	; 0x2bb
   12634:	ldr	r1, [pc, #232]	; 12724 <_start@@Base+0x69c>
   12638:	add	r1, pc, r1
   1263c:	ldr	r0, [pc, #228]	; 12728 <_start@@Base+0x6a0>
   12640:	add	r0, pc, r0
   12644:	bl	12078 <__assert_fail@plt>
   12648:	mov	r3, #3
   1264c:	strh	r3, [fp, #-8]
   12650:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12654:	bl	121fc <_start@@Base+0x174>
   12658:	mov	r3, r0
   1265c:	rsb	r3, r3, #0
   12660:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12664:	add	r3, r2, r3
   12668:	str	r3, [fp, #-12]
   1266c:	ldr	r0, [fp, #-12]
   12670:	bl	12260 <_start@@Base+0x1d8>
   12674:	mov	r3, r0
   12678:	mov	r2, r3
   1267c:	ldrh	r3, [fp, #-8]
   12680:	add	r3, r3, #3
   12684:	lsl	r3, r3, #1
   12688:	cmp	r2, r3
   1268c:	bcc	126b4 <_start@@Base+0x62c>
   12690:	ldrh	r3, [fp, #-8]
   12694:	add	r3, r3, #2
   12698:	lsl	r3, r3, #1
   1269c:	ldr	r2, [fp, #-12]
   126a0:	add	r3, r2, r3
   126a4:	mov	r0, r3
   126a8:	bl	12260 <_start@@Base+0x1d8>
   126ac:	mov	r3, r0
   126b0:	strh	r3, [fp, #-6]
   126b4:	ldrh	r3, [fp, #-6]
   126b8:	cmp	r3, #0
   126bc:	beq	126ec <_start@@Base+0x664>
   126c0:	ldrh	r3, [fp, #-6]
   126c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   126c8:	add	r3, r2, r3
   126cc:	str	r3, [fp, #-16]
   126d0:	ldr	r0, [fp, #-16]
   126d4:	bl	1219c <_start@@Base+0x114>
   126d8:	mov	r3, r0
   126dc:	add	r3, r3, #4
   126e0:	ldr	r2, [fp, #-16]
   126e4:	add	r3, r2, r3
   126e8:	b	1270c <_start@@Base+0x684>
   126ec:	ldr	r3, [pc, #56]	; 1272c <_start@@Base+0x6a4>
   126f0:	add	r3, pc, r3
   126f4:	movw	r2, #699	; 0x2bb
   126f8:	ldr	r1, [pc, #48]	; 12730 <_start@@Base+0x6a8>
   126fc:	add	r1, pc, r1
   12700:	ldr	r0, [pc, #44]	; 12734 <_start@@Base+0x6ac>
   12704:	add	r0, pc, r0
   12708:	bl	12078 <__assert_fail@plt>
   1270c:	mov	r0, r3
   12710:	sub	sp, fp, #4
   12714:	ldr	fp, [sp]
   12718:	add	sp, sp, #4
   1271c:	pop	{pc}		; (ldr pc, [sp], #4)
   12720:	andeq	r8, r0, r0, ror #24
   12724:	andeq	r8, r0, r4, asr #14
   12728:	strdeq	r8, [r0], -r4
   1272c:	muleq	r0, ip, fp
   12730:	andeq	r8, r0, r0, lsl #13
   12734:	andeq	r8, r0, r8, asr r7
   12738:	str	fp, [sp, #-8]!
   1273c:	str	lr, [sp, #4]
   12740:	add	fp, sp, #4
   12744:	sub	sp, sp, #24
   12748:	str	r0, [fp, #-24]	; 0xffffffe8
   1274c:	mov	r3, #0
   12750:	strh	r3, [fp, #-6]
   12754:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12758:	cmp	r3, #0
   1275c:	bne	12780 <_start@@Base+0x6f8>
   12760:	ldr	r3, [pc, #212]	; 1283c <_start@@Base+0x7b4>
   12764:	add	r3, pc, r3
   12768:	movw	r2, #706	; 0x2c2
   1276c:	ldr	r1, [pc, #204]	; 12840 <_start@@Base+0x7b8>
   12770:	add	r1, pc, r1
   12774:	ldr	r0, [pc, #200]	; 12844 <_start@@Base+0x7bc>
   12778:	add	r0, pc, r0
   1277c:	bl	12078 <__assert_fail@plt>
   12780:	mov	r3, #5
   12784:	strh	r3, [fp, #-8]
   12788:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1278c:	bl	121fc <_start@@Base+0x174>
   12790:	mov	r3, r0
   12794:	rsb	r3, r3, #0
   12798:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1279c:	add	r3, r2, r3
   127a0:	str	r3, [fp, #-12]
   127a4:	ldr	r0, [fp, #-12]
   127a8:	bl	12260 <_start@@Base+0x1d8>
   127ac:	mov	r3, r0
   127b0:	mov	r2, r3
   127b4:	ldrh	r3, [fp, #-8]
   127b8:	add	r3, r3, #3
   127bc:	lsl	r3, r3, #1
   127c0:	cmp	r2, r3
   127c4:	bcc	127ec <_start@@Base+0x764>
   127c8:	ldrh	r3, [fp, #-8]
   127cc:	add	r3, r3, #2
   127d0:	lsl	r3, r3, #1
   127d4:	ldr	r2, [fp, #-12]
   127d8:	add	r3, r2, r3
   127dc:	mov	r0, r3
   127e0:	bl	12260 <_start@@Base+0x1d8>
   127e4:	mov	r3, r0
   127e8:	strh	r3, [fp, #-6]
   127ec:	ldrh	r3, [fp, #-6]
   127f0:	cmp	r3, #0
   127f4:	beq	12824 <_start@@Base+0x79c>
   127f8:	ldrh	r3, [fp, #-6]
   127fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12800:	add	r3, r2, r3
   12804:	str	r3, [fp, #-16]
   12808:	ldr	r0, [fp, #-16]
   1280c:	bl	1219c <_start@@Base+0x114>
   12810:	mov	r3, r0
   12814:	add	r3, r3, #4
   12818:	ldr	r2, [fp, #-16]
   1281c:	add	r3, r2, r3
   12820:	b	12828 <_start@@Base+0x7a0>
   12824:	mov	r3, #0
   12828:	mov	r0, r3
   1282c:	sub	sp, fp, #4
   12830:	ldr	fp, [sp]
   12834:	add	sp, sp, #4
   12838:	pop	{pc}		; (ldr pc, [sp], #4)
   1283c:	andeq	r8, r0, r4, asr #22
   12840:	andeq	r8, r0, ip, lsl #12
   12844:			; <UNDEFINED> instruction: 0x000086bc
   12848:	str	fp, [sp, #-8]!
   1284c:	str	lr, [sp, #4]
   12850:	add	fp, sp, #4
   12854:	sub	sp, sp, #24
   12858:	str	r0, [fp, #-24]	; 0xffffffe8
   1285c:	mov	r3, #0
   12860:	strh	r3, [fp, #-6]
   12864:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12868:	cmp	r3, #0
   1286c:	bne	12890 <_start@@Base+0x808>
   12870:	ldr	r3, [pc, #212]	; 1294c <_start@@Base+0x8c4>
   12874:	add	r3, pc, r3
   12878:	movw	r2, #711	; 0x2c7
   1287c:	ldr	r1, [pc, #204]	; 12950 <_start@@Base+0x8c8>
   12880:	add	r1, pc, r1
   12884:	ldr	r0, [pc, #200]	; 12954 <_start@@Base+0x8cc>
   12888:	add	r0, pc, r0
   1288c:	bl	12078 <__assert_fail@plt>
   12890:	mov	r3, #11
   12894:	strh	r3, [fp, #-8]
   12898:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1289c:	bl	121fc <_start@@Base+0x174>
   128a0:	mov	r3, r0
   128a4:	rsb	r3, r3, #0
   128a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   128ac:	add	r3, r2, r3
   128b0:	str	r3, [fp, #-12]
   128b4:	ldr	r0, [fp, #-12]
   128b8:	bl	12260 <_start@@Base+0x1d8>
   128bc:	mov	r3, r0
   128c0:	mov	r2, r3
   128c4:	ldrh	r3, [fp, #-8]
   128c8:	add	r3, r3, #3
   128cc:	lsl	r3, r3, #1
   128d0:	cmp	r2, r3
   128d4:	bcc	128fc <_start@@Base+0x874>
   128d8:	ldrh	r3, [fp, #-8]
   128dc:	add	r3, r3, #2
   128e0:	lsl	r3, r3, #1
   128e4:	ldr	r2, [fp, #-12]
   128e8:	add	r3, r2, r3
   128ec:	mov	r0, r3
   128f0:	bl	12260 <_start@@Base+0x1d8>
   128f4:	mov	r3, r0
   128f8:	strh	r3, [fp, #-6]
   128fc:	ldrh	r3, [fp, #-6]
   12900:	cmp	r3, #0
   12904:	beq	12934 <_start@@Base+0x8ac>
   12908:	ldrh	r3, [fp, #-6]
   1290c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12910:	add	r3, r2, r3
   12914:	str	r3, [fp, #-16]
   12918:	ldr	r0, [fp, #-16]
   1291c:	bl	1219c <_start@@Base+0x114>
   12920:	mov	r3, r0
   12924:	add	r3, r3, #4
   12928:	ldr	r2, [fp, #-16]
   1292c:	add	r3, r2, r3
   12930:	b	12938 <_start@@Base+0x8b0>
   12934:	mov	r3, #0
   12938:	mov	r0, r3
   1293c:	sub	sp, fp, #4
   12940:	ldr	fp, [sp]
   12944:	add	sp, sp, #4
   12948:	pop	{pc}		; (ldr pc, [sp], #4)
   1294c:	andeq	r8, r0, r0, ror #20
   12950:	strdeq	r8, [r0], -ip
   12954:	andeq	r8, r0, ip, lsr #11
   12958:	str	fp, [sp, #-8]!
   1295c:	str	lr, [sp, #4]
   12960:	add	fp, sp, #4
   12964:	sub	sp, sp, #8
   12968:	str	r0, [fp, #-8]
   1296c:	mvn	r3, #0
   12970:	mov	r2, #1
   12974:	mov	r1, #1
   12978:	ldr	r0, [fp, #-8]
   1297c:	bl	16cf4 <flatcc_builder_start_vector@@Base>
   12980:	mov	r3, r0
   12984:	mov	r0, r3
   12988:	sub	sp, fp, #4
   1298c:	ldr	fp, [sp]
   12990:	add	sp, sp, #4
   12994:	pop	{pc}		; (ldr pc, [sp], #4)
   12998:	str	fp, [sp, #-8]!
   1299c:	str	lr, [sp, #4]
   129a0:	add	fp, sp, #4
   129a4:	sub	sp, sp, #8
   129a8:	str	r0, [fp, #-8]
   129ac:	ldr	r0, [fp, #-8]
   129b0:	bl	17ff0 <flatcc_builder_end_vector@@Base>
   129b4:	mov	r3, r0
   129b8:	mov	r0, r3
   129bc:	sub	sp, fp, #4
   129c0:	ldr	fp, [sp]
   129c4:	add	sp, sp, #4
   129c8:	pop	{pc}		; (ldr pc, [sp], #4)
   129cc:	str	fp, [sp, #-8]!
   129d0:	str	lr, [sp, #4]
   129d4:	add	fp, sp, #4
   129d8:	sub	sp, sp, #16
   129dc:	str	r0, [fp, #-8]
   129e0:	str	r1, [fp, #-12]
   129e4:	str	r2, [fp, #-16]
   129e8:	ldr	r2, [fp, #-16]
   129ec:	ldr	r1, [fp, #-12]
   129f0:	ldr	r0, [fp, #-8]
   129f4:	bl	1652c <flatcc_builder_append_vector@@Base>
   129f8:	mov	r3, r0
   129fc:	mov	r0, r3
   12a00:	sub	sp, fp, #4
   12a04:	ldr	fp, [sp]
   12a08:	add	sp, sp, #4
   12a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a10:	str	fp, [sp, #-8]!
   12a14:	str	lr, [sp, #4]
   12a18:	add	fp, sp, #4
   12a1c:	sub	sp, sp, #16
   12a20:	str	r0, [fp, #-8]
   12a24:	str	r1, [fp, #-12]
   12a28:	str	r2, [fp, #-16]
   12a2c:	ldr	r2, [fp, #-16]
   12a30:	ldr	r1, [fp, #-12]
   12a34:	ldr	r0, [fp, #-8]
   12a38:	bl	16884 <flatcc_builder_append_string@@Base>
   12a3c:	mov	r3, r0
   12a40:	mov	r0, r3
   12a44:	sub	sp, fp, #4
   12a48:	ldr	fp, [sp]
   12a4c:	add	sp, sp, #4
   12a50:	pop	{pc}		; (ldr pc, [sp], #4)
   12a54:	str	fp, [sp, #-8]!
   12a58:	str	lr, [sp, #4]
   12a5c:	add	fp, sp, #4
   12a60:	sub	sp, sp, #8
   12a64:	str	r0, [fp, #-8]
   12a68:	str	r1, [fp, #-12]
   12a6c:	mov	r3, #0
   12a70:	mov	r2, #0
   12a74:	ldr	r1, [fp, #-12]
   12a78:	ldr	r0, [fp, #-8]
   12a7c:	bl	15e90 <flatcc_builder_start_buffer@@Base>
   12a80:	mov	r3, r0
   12a84:	mov	r0, r3
   12a88:	sub	sp, fp, #4
   12a8c:	ldr	fp, [sp]
   12a90:	add	sp, sp, #4
   12a94:	pop	{pc}		; (ldr pc, [sp], #4)
   12a98:	str	fp, [sp, #-8]!
   12a9c:	str	lr, [sp, #4]
   12aa0:	add	fp, sp, #4
   12aa4:	sub	sp, sp, #8
   12aa8:	str	r0, [fp, #-8]
   12aac:	str	r1, [fp, #-12]
   12ab0:	ldr	r1, [fp, #-12]
   12ab4:	ldr	r0, [fp, #-8]
   12ab8:	bl	16000 <flatcc_builder_end_buffer@@Base>
   12abc:	mov	r3, r0
   12ac0:	mov	r0, r3
   12ac4:	sub	sp, fp, #4
   12ac8:	ldr	fp, [sp]
   12acc:	add	sp, sp, #4
   12ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ad4:	str	fp, [sp, #-8]!
   12ad8:	str	lr, [sp, #4]
   12adc:	add	fp, sp, #4
   12ae0:	sub	sp, sp, #8
   12ae4:	str	r0, [fp, #-8]
   12ae8:	mov	r1, #36	; 0x24
   12aec:	ldr	r0, [fp, #-8]
   12af0:	bl	16fc8 <flatcc_builder_start_table@@Base>
   12af4:	mov	r3, r0
   12af8:	mov	r0, r3
   12afc:	sub	sp, fp, #4
   12b00:	ldr	fp, [sp]
   12b04:	add	sp, sp, #4
   12b08:	pop	{pc}		; (ldr pc, [sp], #4)
   12b0c:	str	fp, [sp, #-8]!
   12b10:	str	lr, [sp, #4]
   12b14:	add	fp, sp, #4
   12b18:	sub	sp, sp, #8
   12b1c:	str	r0, [fp, #-8]
   12b20:	mov	r2, #1
   12b24:	ldr	r3, [pc, #88]	; 12b84 <_start@@Base+0xafc>
   12b28:	add	r3, pc, r3
   12b2c:	mov	r1, r3
   12b30:	ldr	r0, [fp, #-8]
   12b34:	bl	17a88 <flatcc_builder_check_required@@Base>
   12b38:	mov	r3, r0
   12b3c:	cmp	r3, #0
   12b40:	bne	12b64 <_start@@Base+0xadc>
   12b44:	ldr	r3, [pc, #60]	; 12b88 <_start@@Base+0xb00>
   12b48:	add	r3, pc, r3
   12b4c:	mov	r2, #235	; 0xeb
   12b50:	ldr	r1, [pc, #52]	; 12b8c <_start@@Base+0xb04>
   12b54:	add	r1, pc, r1
   12b58:	ldr	r0, [pc, #48]	; 12b90 <_start@@Base+0xb08>
   12b5c:	add	r0, pc, r0
   12b60:	bl	12078 <__assert_fail@plt>
   12b64:	ldr	r0, [fp, #-8]
   12b68:	bl	17b7c <flatcc_builder_end_table@@Base>
   12b6c:	mov	r3, r0
   12b70:	mov	r0, r3
   12b74:	sub	sp, fp, #4
   12b78:	ldr	fp, [sp]
   12b7c:	add	sp, sp, #4
   12b80:	pop	{pc}		; (ldr pc, [sp], #4)
   12b84:	andeq	r8, r0, ip, lsl #7
   12b88:	strdeq	r8, [r0], -r4
   12b8c:	andeq	r8, r0, r4, ror #6
   12b90:	ldrdeq	r8, [r0], -r4
   12b94:	str	fp, [sp, #-8]!
   12b98:	str	lr, [sp, #4]
   12b9c:	add	fp, sp, #4
   12ba0:	sub	sp, sp, #8
   12ba4:	str	r0, [fp, #-8]
   12ba8:	ldr	r0, [fp, #-8]
   12bac:	bl	16db0 <flatcc_builder_start_offset_vector@@Base>
   12bb0:	mov	r3, r0
   12bb4:	mov	r0, r3
   12bb8:	sub	sp, fp, #4
   12bbc:	ldr	fp, [sp]
   12bc0:	add	sp, sp, #4
   12bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bc8:	str	fp, [sp, #-8]!
   12bcc:	str	lr, [sp, #4]
   12bd0:	add	fp, sp, #4
   12bd4:	sub	sp, sp, #8
   12bd8:	str	r0, [fp, #-8]
   12bdc:	ldr	r0, [fp, #-8]
   12be0:	bl	184b8 <flatcc_builder_end_offset_vector@@Base>
   12be4:	mov	r3, r0
   12be8:	mov	r0, r3
   12bec:	sub	sp, fp, #4
   12bf0:	ldr	fp, [sp]
   12bf4:	add	sp, sp, #4
   12bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bfc:	str	fp, [sp, #-8]!
   12c00:	str	lr, [sp, #4]
   12c04:	add	fp, sp, #4
   12c08:	sub	sp, sp, #8
   12c0c:	str	r0, [fp, #-8]
   12c10:	str	r1, [fp, #-12]
   12c14:	ldr	r3, [fp, #-12]
   12c18:	cmp	r3, #0
   12c1c:	beq	12c34 <_start@@Base+0xbac>
   12c20:	ldr	r1, [fp, #-12]
   12c24:	ldr	r0, [fp, #-8]
   12c28:	bl	1665c <flatcc_builder_offset_vector_push@@Base>
   12c2c:	mov	r3, r0
   12c30:	b	12c38 <_start@@Base+0xbb0>
   12c34:	mov	r3, #0
   12c38:	mov	r0, r3
   12c3c:	sub	sp, fp, #4
   12c40:	ldr	fp, [sp]
   12c44:	add	sp, sp, #4
   12c48:	pop	{pc}		; (ldr pc, [sp], #4)
   12c4c:	str	fp, [sp, #-8]!
   12c50:	str	lr, [sp, #4]
   12c54:	add	fp, sp, #4
   12c58:	sub	sp, sp, #16
   12c5c:	str	r0, [fp, #-16]
   12c60:	str	r1, [fp, #-20]	; 0xffffffec
   12c64:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c68:	cmp	r3, #0
   12c6c:	beq	12ca0 <_start@@Base+0xc18>
   12c70:	mov	r1, #3
   12c74:	ldr	r0, [fp, #-16]
   12c78:	bl	1983c <flatcc_builder_table_add_offset@@Base>
   12c7c:	str	r0, [fp, #-8]
   12c80:	ldr	r3, [fp, #-8]
   12c84:	cmp	r3, #0
   12c88:	beq	12ca0 <_start@@Base+0xc18>
   12c8c:	ldr	r3, [fp, #-8]
   12c90:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c94:	str	r2, [r3]
   12c98:	mov	r3, #0
   12c9c:	b	12ca4 <_start@@Base+0xc1c>
   12ca0:	mvn	r3, #0
   12ca4:	mov	r0, r3
   12ca8:	sub	sp, fp, #4
   12cac:	ldr	fp, [sp]
   12cb0:	add	sp, sp, #4
   12cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cb8:	str	fp, [sp, #-8]!
   12cbc:	str	lr, [sp, #4]
   12cc0:	add	fp, sp, #4
   12cc4:	sub	sp, sp, #8
   12cc8:	str	r0, [fp, #-8]
   12ccc:	ldr	r0, [fp, #-8]
   12cd0:	bl	16ecc <flatcc_builder_start_string@@Base>
   12cd4:	mov	r3, r0
   12cd8:	mov	r0, r3
   12cdc:	sub	sp, fp, #4
   12ce0:	ldr	fp, [sp]
   12ce4:	add	sp, sp, #4
   12ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cec:	str	fp, [sp, #-8]!
   12cf0:	str	lr, [sp, #4]
   12cf4:	add	fp, sp, #4
   12cf8:	sub	sp, sp, #8
   12cfc:	str	r0, [fp, #-8]
   12d00:	ldr	r0, [fp, #-8]
   12d04:	bl	19488 <flatcc_builder_end_string@@Base>
   12d08:	mov	r3, r0
   12d0c:	mov	r1, r3
   12d10:	ldr	r0, [fp, #-8]
   12d14:	bl	12c4c <_start@@Base+0xbc4>
   12d18:	mov	r3, r0
   12d1c:	mov	r0, r3
   12d20:	sub	sp, fp, #4
   12d24:	ldr	fp, [sp]
   12d28:	add	sp, sp, #4
   12d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d30:	str	fp, [sp, #-8]!
   12d34:	str	lr, [sp, #4]
   12d38:	add	fp, sp, #4
   12d3c:	sub	sp, sp, #8
   12d40:	str	r0, [fp, #-8]
   12d44:	str	r1, [fp, #-12]
   12d48:	ldr	r1, [fp, #-12]
   12d4c:	ldr	r0, [fp, #-8]
   12d50:	bl	193e8 <flatcc_builder_create_string_str@@Base>
   12d54:	mov	r3, r0
   12d58:	mov	r1, r3
   12d5c:	ldr	r0, [fp, #-8]
   12d60:	bl	12c4c <_start@@Base+0xbc4>
   12d64:	mov	r3, r0
   12d68:	mov	r0, r3
   12d6c:	sub	sp, fp, #4
   12d70:	ldr	fp, [sp]
   12d74:	add	sp, sp, #4
   12d78:	pop	{pc}		; (ldr pc, [sp], #4)
   12d7c:	str	fp, [sp, #-8]!
   12d80:	str	lr, [sp, #4]
   12d84:	add	fp, sp, #4
   12d88:	sub	sp, sp, #16
   12d8c:	str	r0, [fp, #-16]
   12d90:	str	r1, [fp, #-20]	; 0xffffffec
   12d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d98:	cmp	r3, #0
   12d9c:	beq	12dd0 <_start@@Base+0xd48>
   12da0:	mov	r1, #5
   12da4:	ldr	r0, [fp, #-16]
   12da8:	bl	1983c <flatcc_builder_table_add_offset@@Base>
   12dac:	str	r0, [fp, #-8]
   12db0:	ldr	r3, [fp, #-8]
   12db4:	cmp	r3, #0
   12db8:	beq	12dd0 <_start@@Base+0xd48>
   12dbc:	ldr	r3, [fp, #-8]
   12dc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dc4:	str	r2, [r3]
   12dc8:	mov	r3, #0
   12dcc:	b	12dd4 <_start@@Base+0xd4c>
   12dd0:	mvn	r3, #0
   12dd4:	mov	r0, r3
   12dd8:	sub	sp, fp, #4
   12ddc:	ldr	fp, [sp]
   12de0:	add	sp, sp, #4
   12de4:	pop	{pc}		; (ldr pc, [sp], #4)
   12de8:	str	fp, [sp, #-8]!
   12dec:	str	lr, [sp, #4]
   12df0:	add	fp, sp, #4
   12df4:	sub	sp, sp, #8
   12df8:	str	r0, [fp, #-8]
   12dfc:	ldr	r0, [fp, #-8]
   12e00:	bl	12958 <_start@@Base+0x8d0>
   12e04:	mov	r3, r0
   12e08:	mov	r0, r3
   12e0c:	sub	sp, fp, #4
   12e10:	ldr	fp, [sp]
   12e14:	add	sp, sp, #4
   12e18:	pop	{pc}		; (ldr pc, [sp], #4)
   12e1c:	str	fp, [sp, #-8]!
   12e20:	str	lr, [sp, #4]
   12e24:	add	fp, sp, #4
   12e28:	sub	sp, sp, #8
   12e2c:	str	r0, [fp, #-8]
   12e30:	ldr	r0, [fp, #-8]
   12e34:	bl	12998 <_start@@Base+0x910>
   12e38:	mov	r3, r0
   12e3c:	mov	r1, r3
   12e40:	ldr	r0, [fp, #-8]
   12e44:	bl	12d7c <_start@@Base+0xcf4>
   12e48:	mov	r3, r0
   12e4c:	mov	r0, r3
   12e50:	sub	sp, fp, #4
   12e54:	ldr	fp, [sp]
   12e58:	add	sp, sp, #4
   12e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e60:	str	fp, [sp, #-8]!
   12e64:	str	lr, [sp, #4]
   12e68:	add	fp, sp, #4
   12e6c:	sub	sp, sp, #16
   12e70:	str	r0, [fp, #-16]
   12e74:	str	r1, [fp, #-20]	; 0xffffffec
   12e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e7c:	cmp	r3, #0
   12e80:	beq	12eb4 <_start@@Base+0xe2c>
   12e84:	mov	r1, #11
   12e88:	ldr	r0, [fp, #-16]
   12e8c:	bl	1983c <flatcc_builder_table_add_offset@@Base>
   12e90:	str	r0, [fp, #-8]
   12e94:	ldr	r3, [fp, #-8]
   12e98:	cmp	r3, #0
   12e9c:	beq	12eb4 <_start@@Base+0xe2c>
   12ea0:	ldr	r3, [fp, #-8]
   12ea4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ea8:	str	r2, [r3]
   12eac:	mov	r3, #0
   12eb0:	b	12eb8 <_start@@Base+0xe30>
   12eb4:	mvn	r3, #0
   12eb8:	mov	r0, r3
   12ebc:	sub	sp, fp, #4
   12ec0:	ldr	fp, [sp]
   12ec4:	add	sp, sp, #4
   12ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ecc:	str	fp, [sp, #-8]!
   12ed0:	str	lr, [sp, #4]
   12ed4:	add	fp, sp, #4
   12ed8:	sub	sp, sp, #8
   12edc:	str	r0, [fp, #-8]
   12ee0:	ldr	r3, [pc, #64]	; 12f28 <_start@@Base+0xea0>
   12ee4:	add	r3, pc, r3
   12ee8:	mov	r1, r3
   12eec:	ldr	r0, [fp, #-8]
   12ef0:	bl	12a54 <_start@@Base+0x9cc>
   12ef4:	mov	r3, r0
   12ef8:	cmp	r3, #0
   12efc:	bne	12f10 <_start@@Base+0xe88>
   12f00:	ldr	r0, [fp, #-8]
   12f04:	bl	12ad4 <_start@@Base+0xa4c>
   12f08:	mov	r3, r0
   12f0c:	b	12f14 <_start@@Base+0xe8c>
   12f10:	mvn	r3, #0
   12f14:	mov	r0, r3
   12f18:	sub	sp, fp, #4
   12f1c:	ldr	fp, [sp]
   12f20:	add	sp, sp, #4
   12f24:	pop	{pc}		; (ldr pc, [sp], #4)
   12f28:	andeq	r7, r0, r8, asr #30
   12f2c:	str	fp, [sp, #-8]!
   12f30:	str	lr, [sp, #4]
   12f34:	add	fp, sp, #4
   12f38:	sub	sp, sp, #8
   12f3c:	str	r0, [fp, #-8]
   12f40:	ldr	r0, [fp, #-8]
   12f44:	bl	12b0c <_start@@Base+0xa84>
   12f48:	mov	r3, r0
   12f4c:	mov	r1, r3
   12f50:	ldr	r0, [fp, #-8]
   12f54:	bl	12a98 <_start@@Base+0xa10>
   12f58:	mov	r3, r0
   12f5c:	mov	r0, r3
   12f60:	sub	sp, fp, #4
   12f64:	ldr	fp, [sp]
   12f68:	add	sp, sp, #4
   12f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f70:	str	fp, [sp, #-8]!
   12f74:	str	lr, [sp, #4]
   12f78:	add	fp, sp, #4
   12f7c:	sub	sp, sp, #8
   12f80:	sub	r3, fp, #12
   12f84:	mov	r1, #0
   12f88:	mov	r0, r3
   12f8c:	bl	11fe8 <gettimeofday@plt>
   12f90:	ldr	r3, [pc, #136]	; 13020 <_start@@Base+0xf98>
   12f94:	add	r3, pc, r3
   12f98:	ldr	r3, [r3]
   12f9c:	cmp	r3, #0
   12fa0:	bne	12fbc <_start@@Base+0xf34>
   12fa4:	ldr	r3, [pc, #120]	; 13024 <_start@@Base+0xf9c>
   12fa8:	add	r3, pc, r3
   12fac:	mov	r1, r3
   12fb0:	sub	r3, fp, #12
   12fb4:	ldrd	r2, [r3]
   12fb8:	strd	r2, [r1]
   12fbc:	ldr	r2, [fp, #-12]
   12fc0:	ldr	r3, [pc, #96]	; 13028 <_start@@Base+0xfa0>
   12fc4:	add	r3, pc, r3
   12fc8:	ldr	r3, [r3]
   12fcc:	sub	r3, r2, r3
   12fd0:	vmov	s15, r3
   12fd4:	vcvt.f64.s32	d6, s15
   12fd8:	ldr	r2, [fp, #-8]
   12fdc:	ldr	r3, [pc, #72]	; 1302c <_start@@Base+0xfa4>
   12fe0:	add	r3, pc, r3
   12fe4:	ldr	r3, [r3, #4]
   12fe8:	sub	r3, r2, r3
   12fec:	vmov	s15, r3
   12ff0:	vcvt.f64.s32	d5, s15
   12ff4:	vldr	d4, [pc, #28]	; 13018 <_start@@Base+0xf90>
   12ff8:	vdiv.f64	d7, d5, d4
   12ffc:	vadd.f64	d7, d6, d7
   13000:	vmov.f64	d0, d7
   13004:	sub	sp, fp, #4
   13008:	ldr	fp, [sp]
   1300c:	add	sp, sp, #4
   13010:	pop	{pc}		; (ldr pc, [sp], #4)
   13014:	nop	{0}
   13018:	andeq	r0, r0, r0
   1301c:	smlawbmi	lr, r0, r4, r8
   13020:	ldrdeq	r9, [r1], -r0
   13024:			; <UNDEFINED> instruction: 0x000194bc
   13028:	andeq	r9, r1, r0, lsr #9
   1302c:	andeq	r9, r1, r4, lsl #9
   13030:	str	fp, [sp, #-8]!
   13034:	str	lr, [sp, #4]
   13038:	add	fp, sp, #4
   1303c:	sub	sp, sp, #48	; 0x30
   13040:	str	r0, [fp, #-24]	; 0xffffffe8
   13044:	vstr	d0, [fp, #-36]	; 0xffffffdc
   13048:	vstr	d1, [fp, #-44]	; 0xffffffd4
   1304c:	str	r1, [fp, #-28]	; 0xffffffe4
   13050:	str	r2, [fp, #-48]	; 0xffffffd0
   13054:	str	r3, [fp, #-52]	; 0xffffffcc
   13058:	vldr	d6, [fp, #-44]	; 0xffffffd4
   1305c:	vldr	d7, [fp, #-36]	; 0xffffffdc
   13060:	vsub.f64	d7, d6, d7
   13064:	vstr	d7, [fp, #-12]
   13068:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1306c:	ldr	r3, [pc, #508]	; 13270 <_start@@Base+0x11e8>
   13070:	add	r3, pc, r3
   13074:	mov	r0, r3
   13078:	bl	11f94 <printf@plt>
   1307c:	ldrd	r2, [fp, #-12]
   13080:	ldr	r1, [pc, #492]	; 13274 <_start@@Base+0x11ec>
   13084:	add	r1, pc, r1
   13088:	mov	r0, r1
   1308c:	bl	11f94 <printf@plt>
   13090:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13094:	ldr	r3, [pc, #476]	; 13278 <_start@@Base+0x11f0>
   13098:	add	r3, pc, r3
   1309c:	mov	r0, r3
   130a0:	bl	11f94 <printf@plt>
   130a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   130a8:	ldr	r3, [pc, #460]	; 1327c <_start@@Base+0x11f4>
   130ac:	add	r3, pc, r3
   130b0:	mov	r0, r3
   130b4:	bl	11f94 <printf@plt>
   130b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   130bc:	vmov	s15, r3
   130c0:	vcvt.f64.s32	d6, s15
   130c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   130c8:	vmov	s15, r3
   130cc:	vcvt.f64.u32	d7, s15
   130d0:	vmul.f64	d7, d6, d7
   130d4:	vldr	d5, [pc, #372]	; 13250 <_start@@Base+0x11c8>
   130d8:	vdiv.f64	d6, d7, d5
   130dc:	vldr	d7, [fp, #-12]
   130e0:	vdiv.f64	d5, d6, d7
   130e4:	vmov	r2, r3, d5
   130e8:	ldr	r1, [pc, #400]	; 13280 <_start@@Base+0x11f8>
   130ec:	add	r1, pc, r1
   130f0:	mov	r0, r1
   130f4:	bl	11f94 <printf@plt>
   130f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   130fc:	vmov	s15, r3
   13100:	vcvt.f64.s32	d6, s15
   13104:	vldr	d7, [fp, #-12]
   13108:	vdiv.f64	d5, d6, d7
   1310c:	vmov	r2, r3, d5
   13110:	ldr	r1, [pc, #364]	; 13284 <_start@@Base+0x11fc>
   13114:	add	r1, pc, r1
   13118:	mov	r0, r1
   1311c:	bl	11f94 <printf@plt>
   13120:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13124:	cmp	r3, #0
   13128:	beq	13158 <_start@@Base+0x10d0>
   1312c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13130:	cmp	r3, #1
   13134:	beq	13158 <_start@@Base+0x10d0>
   13138:	vldr	d6, [pc, #280]	; 13258 <_start@@Base+0x11d0>
   1313c:	vldr	d7, [fp, #-12]
   13140:	vdiv.f64	d5, d6, d7
   13144:	vmov	r2, r3, d5
   13148:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1314c:	ldr	r0, [pc, #308]	; 13288 <_start@@Base+0x1200>
   13150:	add	r0, pc, r0
   13154:	bl	11f94 <printf@plt>
   13158:	vldr	d7, [fp, #-12]
   1315c:	vldr	d6, [pc, #252]	; 13260 <_start@@Base+0x11d8>
   13160:	vmul.f64	d5, d7, d6
   13164:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13168:	vmov	s15, r3
   1316c:	vcvt.f64.s32	d6, s15
   13170:	vdiv.f64	d7, d5, d6
   13174:	vstr	d7, [fp, #-20]	; 0xffffffec
   13178:	vldr	d7, [fp, #-20]	; 0xffffffec
   1317c:	vldr	d6, [pc, #228]	; 13268 <_start@@Base+0x11e0>
   13180:	vcmpe.f64	d7, d6
   13184:	vmrs	APSR_nzcv, fpscr
   13188:	bpl	131a4 <_start@@Base+0x111c>
   1318c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13190:	ldr	r1, [pc, #244]	; 1328c <_start@@Base+0x1204>
   13194:	add	r1, pc, r1
   13198:	mov	r0, r1
   1319c:	bl	11f94 <printf@plt>
   131a0:	b	13234 <_start@@Base+0x11ac>
   131a4:	vldr	d7, [fp, #-20]	; 0xffffffec
   131a8:	vldr	d6, [pc, #160]	; 13250 <_start@@Base+0x11c8>
   131ac:	vcmpe.f64	d7, d6
   131b0:	vmrs	APSR_nzcv, fpscr
   131b4:	bpl	131dc <_start@@Base+0x1154>
   131b8:	vldr	d7, [fp, #-20]	; 0xffffffec
   131bc:	vldr	d6, [pc, #164]	; 13268 <_start@@Base+0x11e0>
   131c0:	vdiv.f64	d5, d7, d6
   131c4:	vmov	r2, r3, d5
   131c8:	ldr	r1, [pc, #192]	; 13290 <_start@@Base+0x1208>
   131cc:	add	r1, pc, r1
   131d0:	mov	r0, r1
   131d4:	bl	11f94 <printf@plt>
   131d8:	b	13234 <_start@@Base+0x11ac>
   131dc:	vldr	d7, [fp, #-20]	; 0xffffffec
   131e0:	vldr	d6, [pc, #120]	; 13260 <_start@@Base+0x11d8>
   131e4:	vcmpe.f64	d7, d6
   131e8:	vmrs	APSR_nzcv, fpscr
   131ec:	bpl	13214 <_start@@Base+0x118c>
   131f0:	vldr	d7, [fp, #-20]	; 0xffffffec
   131f4:	vldr	d6, [pc, #84]	; 13250 <_start@@Base+0x11c8>
   131f8:	vdiv.f64	d5, d7, d6
   131fc:	vmov	r2, r3, d5
   13200:	ldr	r1, [pc, #140]	; 13294 <_start@@Base+0x120c>
   13204:	add	r1, pc, r1
   13208:	mov	r0, r1
   1320c:	bl	11f94 <printf@plt>
   13210:	b	13234 <_start@@Base+0x11ac>
   13214:	vldr	d7, [fp, #-20]	; 0xffffffec
   13218:	vldr	d6, [pc, #64]	; 13260 <_start@@Base+0x11d8>
   1321c:	vdiv.f64	d5, d7, d6
   13220:	vmov	r2, r3, d5
   13224:	ldr	r1, [pc, #108]	; 13298 <_start@@Base+0x1210>
   13228:	add	r1, pc, r1
   1322c:	mov	r0, r1
   13230:	bl	11f94 <printf@plt>
   13234:	mov	r3, #0
   13238:	mov	r0, r3
   1323c:	sub	sp, fp, #4
   13240:	ldr	fp, [sp]
   13244:	add	sp, sp, #4
   13248:	pop	{pc}		; (ldr pc, [sp], #4)
   1324c:	nop	{0}
   13250:	andeq	r0, r0, r0
   13254:	smlawbmi	lr, r0, r4, r8
   13258:	andeq	r0, r0, r0
   1325c:	svccc	0x00f00000	; IMB
   13260:	andeq	r0, r0, r0
   13264:	bicmi	ip, sp, r5, ror #26
   13268:	andeq	r0, r0, r0
   1326c:	addmi	r4, pc, r0
   13270:	andeq	r7, r0, r0, ror pc
   13274:	andeq	r7, r0, ip, ror #30
   13278:	andeq	r7, r0, r0, ror pc
   1327c:	andeq	r7, r0, ip, ror #30
   13280:	andeq	r7, r0, r0, asr #30
   13284:	andeq	r7, r0, r0, lsr pc
   13288:	andeq	r7, r0, r8, lsl pc
   1328c:	strdeq	r7, [r0], -r8
   13290:	ldrdeq	r7, [r0], -r8
   13294:			; <UNDEFINED> instruction: 0x00007eb8
   13298:	andeq	r7, r0, ip, lsr #29
   1329c:	str	fp, [sp, #-8]!
   132a0:	str	lr, [sp, #4]
   132a4:	add	fp, sp, #4
   132a8:	sub	sp, sp, #16
   132ac:	str	r0, [fp, #-16]
   132b0:	ldr	r0, [fp, #-16]
   132b4:	bl	12ad4 <_start@@Base+0xa4c>
   132b8:	ldr	r0, [fp, #-16]
   132bc:	bl	12cb8 <_start@@Base+0xc30>
   132c0:	mov	r3, #0
   132c4:	str	r3, [fp, #-8]
   132c8:	b	132f0 <_start@@Base+0x1268>
   132cc:	mov	r2, #7
   132d0:	ldr	r3, [pc, #152]	; 13370 <_start@@Base+0x12e8>
   132d4:	add	r3, pc, r3
   132d8:	mov	r1, r3
   132dc:	ldr	r0, [fp, #-16]
   132e0:	bl	12a10 <_start@@Base+0x988>
   132e4:	ldr	r3, [fp, #-8]
   132e8:	add	r3, r3, #1
   132ec:	str	r3, [fp, #-8]
   132f0:	ldr	r3, [fp, #-8]
   132f4:	cmp	r3, #99	; 0x63
   132f8:	bls	132cc <_start@@Base+0x1244>
   132fc:	ldr	r0, [fp, #-16]
   13300:	bl	12cec <_start@@Base+0xc64>
   13304:	ldr	r0, [fp, #-16]
   13308:	bl	12de8 <_start@@Base+0xd60>
   1330c:	mov	r3, #0
   13310:	str	r3, [fp, #-8]
   13314:	b	1333c <_start@@Base+0x12b4>
   13318:	mov	r2, #1000	; 0x3e8
   1331c:	ldr	r3, [pc, #80]	; 13374 <_start@@Base+0x12ec>
   13320:	add	r3, pc, r3
   13324:	mov	r1, r3
   13328:	ldr	r0, [fp, #-16]
   1332c:	bl	129cc <_start@@Base+0x944>
   13330:	ldr	r3, [fp, #-8]
   13334:	add	r3, r3, #1
   13338:	str	r3, [fp, #-8]
   1333c:	ldr	r3, [fp, #-8]
   13340:	cmp	r3, #99	; 0x63
   13344:	bls	13318 <_start@@Base+0x1290>
   13348:	ldr	r0, [fp, #-16]
   1334c:	bl	12e1c <_start@@Base+0xd94>
   13350:	ldr	r0, [fp, #-16]
   13354:	bl	12b0c <_start@@Base+0xa84>
   13358:	mov	r3, r0
   1335c:	mov	r0, r3
   13360:	sub	sp, fp, #4
   13364:	ldr	fp, [sp]
   13368:	add	sp, sp, #4
   1336c:	pop	{pc}		; (ldr pc, [sp], #4)
   13370:	andeq	r7, r0, r8, lsl lr
   13374:	andeq	r8, r1, ip, asr sp
   13378:	str	fp, [sp, #-8]!
   1337c:	str	lr, [sp, #4]
   13380:	add	fp, sp, #4
   13384:	sub	sp, sp, #16
   13388:	str	r0, [fp, #-16]
   1338c:	ldr	r0, [fp, #-16]
   13390:	bl	12b94 <_start@@Base+0xb0c>
   13394:	mov	r3, #0
   13398:	str	r3, [fp, #-8]
   1339c:	b	133f0 <_start@@Base+0x1368>
   133a0:	ldr	r0, [fp, #-16]
   133a4:	bl	1329c <_start@@Base+0x1214>
   133a8:	str	r0, [fp, #-12]
   133ac:	ldr	r3, [fp, #-12]
   133b0:	cmp	r3, #0
   133b4:	bne	133d8 <_start@@Base+0x1350>
   133b8:	ldr	r3, [pc, #92]	; 1341c <_start@@Base+0x1394>
   133bc:	add	r3, pc, r3
   133c0:	mov	r2, #42	; 0x2a
   133c4:	ldr	r1, [pc, #84]	; 13420 <_start@@Base+0x1398>
   133c8:	add	r1, pc, r1
   133cc:	ldr	r0, [pc, #80]	; 13424 <_start@@Base+0x139c>
   133d0:	add	r0, pc, r0
   133d4:	bl	12078 <__assert_fail@plt>
   133d8:	ldr	r1, [fp, #-12]
   133dc:	ldr	r0, [fp, #-16]
   133e0:	bl	12bfc <_start@@Base+0xb74>
   133e4:	ldr	r3, [fp, #-8]
   133e8:	add	r3, r3, #1
   133ec:	str	r3, [fp, #-8]
   133f0:	ldr	r3, [fp, #-8]
   133f4:	cmp	r3, #1000	; 0x3e8
   133f8:	bcc	133a0 <_start@@Base+0x1318>
   133fc:	ldr	r0, [fp, #-16]
   13400:	bl	12bc8 <_start@@Base+0xb40>
   13404:	mov	r3, r0
   13408:	mov	r0, r3
   1340c:	sub	sp, fp, #4
   13410:	ldr	fp, [sp]
   13414:	add	sp, sp, #4
   13418:	pop	{pc}		; (ldr pc, [sp], #4)
   1341c:	muleq	r0, ip, lr
   13420:	andeq	r7, r0, ip, lsr #26
   13424:	andeq	r7, r0, r8, lsl #27
   13428:	str	fp, [sp, #-8]!
   1342c:	str	lr, [sp, #4]
   13430:	add	fp, sp, #4
   13434:	sub	sp, sp, #16
   13438:	str	r0, [fp, #-16]
   1343c:	ldr	r0, [fp, #-16]
   13440:	bl	14b28 <flatcc_builder_reset@@Base>
   13444:	ldr	r0, [fp, #-16]
   13448:	bl	12ecc <_start@@Base+0xe44>
   1344c:	ldr	r3, [pc, #112]	; 134c4 <_start@@Base+0x143c>
   13450:	add	r3, pc, r3
   13454:	mov	r1, r3
   13458:	ldr	r0, [fp, #-16]
   1345c:	bl	12d30 <_start@@Base+0xca8>
   13460:	ldr	r0, [fp, #-16]
   13464:	bl	13378 <_start@@Base+0x12f0>
   13468:	str	r0, [fp, #-8]
   1346c:	ldr	r3, [fp, #-8]
   13470:	cmp	r3, #0
   13474:	bne	13498 <_start@@Base+0x1410>
   13478:	ldr	r3, [pc, #72]	; 134c8 <_start@@Base+0x1440>
   1347c:	add	r3, pc, r3
   13480:	mov	r2, #56	; 0x38
   13484:	ldr	r1, [pc, #64]	; 134cc <_start@@Base+0x1444>
   13488:	add	r1, pc, r1
   1348c:	ldr	r0, [pc, #60]	; 134d0 <_start@@Base+0x1448>
   13490:	add	r0, pc, r0
   13494:	bl	12078 <__assert_fail@plt>
   13498:	ldr	r1, [fp, #-8]
   1349c:	ldr	r0, [fp, #-16]
   134a0:	bl	12e60 <_start@@Base+0xdd8>
   134a4:	ldr	r0, [fp, #-16]
   134a8:	bl	12f2c <_start@@Base+0xea4>
   134ac:	mov	r3, #0
   134b0:	mov	r0, r3
   134b4:	sub	sp, fp, #4
   134b8:	ldr	fp, [sp]
   134bc:	add	sp, sp, #4
   134c0:	pop	{pc}		; (ldr pc, [sp], #4)
   134c4:	andeq	r7, r0, ip, lsl #26
   134c8:	andeq	r7, r0, ip, ror #27
   134cc:	andeq	r7, r0, ip, ror #24
   134d0:	ldrdeq	r7, [r0], -ip
   134d4:	str	fp, [sp, #-8]!
   134d8:	str	lr, [sp, #4]
   134dc:	add	fp, sp, #4
   134e0:	sub	sp, sp, #24
   134e4:	str	r0, [fp, #-24]	; 0xffffffe8
   134e8:	str	r1, [fp, #-28]	; 0xffffffe4
   134ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   134f0:	bl	12600 <_start@@Base+0x578>
   134f4:	str	r0, [fp, #-12]
   134f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   134fc:	bl	12738 <_start@@Base+0x6b0>
   13500:	str	r0, [fp, #-16]
   13504:	ldr	r0, [fp, #-12]
   13508:	bl	12370 <_start@@Base+0x2e8>
   1350c:	mov	r3, r0
   13510:	cmp	r3, #700	; 0x2bc
   13514:	beq	13538 <_start@@Base+0x14b0>
   13518:	ldr	r3, [pc, #456]	; 136e8 <_start@@Base+0x1660>
   1351c:	add	r3, pc, r3
   13520:	mov	r2, #74	; 0x4a
   13524:	ldr	r1, [pc, #448]	; 136ec <_start@@Base+0x1664>
   13528:	add	r1, pc, r1
   1352c:	ldr	r0, [pc, #444]	; 136f0 <_start@@Base+0x1668>
   13530:	add	r0, pc, r0
   13534:	bl	12078 <__assert_fail@plt>
   13538:	ldr	r0, [fp, #-16]
   1353c:	bl	123c0 <_start@@Base+0x338>
   13540:	mov	r2, r0
   13544:	movw	r3, #34464	; 0x86a0
   13548:	movt	r3, #1
   1354c:	cmp	r2, r3
   13550:	beq	13574 <_start@@Base+0x14ec>
   13554:	ldr	r3, [pc, #408]	; 136f4 <_start@@Base+0x166c>
   13558:	add	r3, pc, r3
   1355c:	mov	r2, #78	; 0x4e
   13560:	ldr	r1, [pc, #400]	; 136f8 <_start@@Base+0x1670>
   13564:	add	r1, pc, r1
   13568:	ldr	r0, [pc, #396]	; 136fc <_start@@Base+0x1674>
   1356c:	add	r0, pc, r0
   13570:	bl	12078 <__assert_fail@plt>
   13574:	mov	r3, #0
   13578:	str	r3, [fp, #-8]
   1357c:	b	1364c <_start@@Base+0x15c4>
   13580:	ldr	r2, [fp, #-8]
   13584:	mov	r3, r2
   13588:	lsl	r3, r3, #3
   1358c:	sub	r3, r3, r2
   13590:	ldr	r2, [fp, #-12]
   13594:	add	r3, r2, r3
   13598:	mov	r2, #7
   1359c:	ldr	r1, [pc, #348]	; 13700 <_start@@Base+0x1678>
   135a0:	add	r1, pc, r1
   135a4:	mov	r0, r3
   135a8:	bl	11fc4 <memcmp@plt>
   135ac:	mov	r3, r0
   135b0:	cmp	r3, #0
   135b4:	beq	13640 <_start@@Base+0x15b8>
   135b8:	ldr	r3, [fp, #-12]
   135bc:	cmp	r3, #0
   135c0:	beq	135cc <_start@@Base+0x1544>
   135c4:	ldr	r3, [fp, #-12]
   135c8:	b	135d4 <_start@@Base+0x154c>
   135cc:	ldr	r3, [pc, #304]	; 13704 <_start@@Base+0x167c>
   135d0:	add	r3, pc, r3
   135d4:	mov	r2, r3
   135d8:	ldr	r1, [fp, #-8]
   135dc:	ldr	r3, [pc, #292]	; 13708 <_start@@Base+0x1680>
   135e0:	add	r3, pc, r3
   135e4:	mov	r0, r3
   135e8:	bl	11f94 <printf@plt>
   135ec:	ldr	r2, [fp, #-8]
   135f0:	mov	r3, r2
   135f4:	lsl	r3, r3, #3
   135f8:	sub	r3, r3, r2
   135fc:	ldr	r2, [fp, #-12]
   13600:	add	r2, r2, r3
   13604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13608:	sub	r3, r2, r3
   1360c:	mov	r1, r3
   13610:	ldr	r3, [pc, #244]	; 1370c <_start@@Base+0x1684>
   13614:	add	r3, pc, r3
   13618:	mov	r0, r3
   1361c:	bl	11f94 <printf@plt>
   13620:	ldr	r3, [pc, #232]	; 13710 <_start@@Base+0x1688>
   13624:	add	r3, pc, r3
   13628:	mov	r2, #85	; 0x55
   1362c:	ldr	r1, [pc, #224]	; 13714 <_start@@Base+0x168c>
   13630:	add	r1, pc, r1
   13634:	ldr	r0, [pc, #220]	; 13718 <_start@@Base+0x1690>
   13638:	add	r0, pc, r0
   1363c:	bl	12078 <__assert_fail@plt>
   13640:	ldr	r3, [fp, #-8]
   13644:	add	r3, r3, #1
   13648:	str	r3, [fp, #-8]
   1364c:	ldr	r3, [fp, #-8]
   13650:	cmp	r3, #99	; 0x63
   13654:	bls	13580 <_start@@Base+0x14f8>
   13658:	mov	r3, #0
   1365c:	str	r3, [fp, #-8]
   13660:	b	136c4 <_start@@Base+0x163c>
   13664:	ldr	r3, [fp, #-8]
   13668:	mov	r2, #1000	; 0x3e8
   1366c:	mul	r3, r2, r3
   13670:	ldr	r2, [fp, #-16]
   13674:	add	r3, r2, r3
   13678:	mov	r2, #1000	; 0x3e8
   1367c:	ldr	r1, [pc, #152]	; 1371c <_start@@Base+0x1694>
   13680:	add	r1, pc, r1
   13684:	mov	r0, r3
   13688:	bl	11fc4 <memcmp@plt>
   1368c:	mov	r3, r0
   13690:	cmp	r3, #0
   13694:	beq	136b8 <_start@@Base+0x1630>
   13698:	ldr	r3, [pc, #128]	; 13720 <_start@@Base+0x1698>
   1369c:	add	r3, pc, r3
   136a0:	mov	r2, #91	; 0x5b
   136a4:	ldr	r1, [pc, #120]	; 13724 <_start@@Base+0x169c>
   136a8:	add	r1, pc, r1
   136ac:	ldr	r0, [pc, #116]	; 13728 <_start@@Base+0x16a0>
   136b0:	add	r0, pc, r0
   136b4:	bl	12078 <__assert_fail@plt>
   136b8:	ldr	r3, [fp, #-8]
   136bc:	add	r3, r3, #1
   136c0:	str	r3, [fp, #-8]
   136c4:	ldr	r3, [fp, #-8]
   136c8:	cmp	r3, #99	; 0x63
   136cc:	bls	13664 <_start@@Base+0x15dc>
   136d0:	mov	r3, #0
   136d4:	mov	r0, r3
   136d8:	sub	sp, fp, #4
   136dc:	ldr	fp, [sp]
   136e0:	add	sp, sp, #4
   136e4:	pop	{pc}		; (ldr pc, [sp], #4)
   136e8:	andeq	r7, r0, r0, ror #26
   136ec:	andeq	r7, r0, ip, asr #23
   136f0:	andeq	r7, r0, r0, asr #24
   136f4:	andeq	r7, r0, r4, lsr #26
   136f8:	muleq	r0, r0, fp
   136fc:	andeq	r7, r0, r4, lsl #24
   13700:	andeq	r7, r0, ip, asr #22
   13704:	andeq	r7, r0, r4, lsr #23
   13708:	muleq	r0, ip, fp
   1370c:	andeq	r7, r0, r8, lsl #23
   13710:	andeq	r7, r0, r8, asr ip
   13714:	andeq	r7, r0, r4, asr #21
   13718:	andeq	r7, r0, r8, lsr fp
   1371c:	strdeq	r8, [r1], -ip
   13720:	andeq	r7, r0, r0, ror #23
   13724:	andeq	r7, r0, ip, asr #20
   13728:	andeq	r7, r0, r0, asr #21

0001372c <main@@Base>:
   1372c:	str	fp, [sp, #-8]!
   13730:	str	lr, [sp, #4]
   13734:	add	fp, sp, #4
   13738:	sub	sp, sp, #304	; 0x130
   1373c:	str	r0, [fp, #-304]	; 0xfffffed0
   13740:	str	r1, [fp, #-308]	; 0xfffffecc
   13744:	mov	r3, #10
   13748:	str	r3, [fp, #-20]	; 0xffffffec
   1374c:	mov	r3, #0
   13750:	str	r3, [fp, #-12]
   13754:	sub	r3, fp, #296	; 0x128
   13758:	str	r3, [fp, #-24]	; 0xffffffe8
   1375c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13760:	bl	14888 <flatcc_builder_init@@Base>
   13764:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13768:	bl	13428 <_start@@Base+0x13a0>
   1376c:	sub	r3, fp, #64	; 0x40
   13770:	mov	r1, r3
   13774:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13778:	bl	19e10 <flatcc_builder_finalize_buffer@@Base>
   1377c:	str	r0, [fp, #-28]	; 0xffffffe4
   13780:	ldr	r3, [pc, #712]	; 13a50 <main@@Base+0x324>
   13784:	add	r3, pc, r3
   13788:	mov	r1, r3
   1378c:	ldr	r3, [pc, #704]	; 13a54 <main@@Base+0x328>
   13790:	add	r3, pc, r3
   13794:	mov	r0, r3
   13798:	bl	11fa0 <fopen@plt>
   1379c:	str	r0, [fp, #-32]	; 0xffffffe0
   137a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   137a4:	cmp	r3, #0
   137a8:	bne	137b8 <main@@Base+0x8c>
   137ac:	mvn	r3, #0
   137b0:	str	r3, [fp, #-12]
   137b4:	b	13a0c <main@@Base+0x2e0>
   137b8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   137bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   137c0:	mov	r1, #1
   137c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   137c8:	bl	11fdc <fwrite@plt>
   137cc:	mov	r2, r0
   137d0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   137d4:	cmp	r2, r3
   137d8:	movne	r3, #1
   137dc:	moveq	r3, #0
   137e0:	uxtb	r3, r3
   137e4:	mov	r2, r3
   137e8:	ldr	r3, [fp, #-12]
   137ec:	orr	r3, r3, r2
   137f0:	str	r3, [fp, #-12]
   137f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   137f8:	bl	12060 <fclose@plt>
   137fc:	ldr	r3, [fp, #-12]
   13800:	cmp	r3, #0
   13804:	bne	13a00 <main@@Base+0x2d4>
   13808:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1380c:	mov	r1, r3
   13810:	ldr	r3, [pc, #576]	; 13a58 <main@@Base+0x32c>
   13814:	add	r3, pc, r3
   13818:	mov	r0, r3
   1381c:	bl	11f94 <printf@plt>
   13820:	ldr	r3, [pc, #564]	; 13a5c <main@@Base+0x330>
   13824:	add	r3, pc, r3
   13828:	mov	r0, r3
   1382c:	bl	11ff4 <puts@plt>
   13830:	bl	12f70 <_start@@Base+0xee8>
   13834:	vstr	d0, [fp, #-44]	; 0xffffffd4
   13838:	mov	r3, #0
   1383c:	str	r3, [fp, #-8]
   13840:	b	139c4 <main@@Base+0x298>
   13844:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13848:	bl	13428 <_start@@Base+0x13a0>
   1384c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13850:	mov	r2, r3
   13854:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13858:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1385c:	bl	19d70 <flatcc_builder_copy_buffer@@Base>
   13860:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13864:	bl	12588 <_start@@Base+0x500>
   13868:	str	r0, [fp, #-48]	; 0xffffffd0
   1386c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13870:	bl	12600 <_start@@Base+0x578>
   13874:	mov	r2, r0
   13878:	ldr	r3, [pc, #480]	; 13a60 <main@@Base+0x334>
   1387c:	add	r3, pc, r3
   13880:	mov	r1, r3
   13884:	mov	r0, r2
   13888:	bl	11f88 <strcmp@plt>
   1388c:	mov	r2, r0
   13890:	ldr	r3, [fp, #-12]
   13894:	orr	r3, r3, r2
   13898:	str	r3, [fp, #-12]
   1389c:	ldr	r3, [fp, #-12]
   138a0:	cmp	r3, #0
   138a4:	beq	138c8 <main@@Base+0x19c>
   138a8:	ldr	r3, [pc, #436]	; 13a64 <main@@Base+0x338>
   138ac:	add	r3, pc, r3
   138b0:	mov	r2, #139	; 0x8b
   138b4:	ldr	r1, [pc, #428]	; 13a68 <main@@Base+0x33c>
   138b8:	add	r1, pc, r1
   138bc:	ldr	r0, [pc, #424]	; 13a6c <main@@Base+0x340>
   138c0:	add	r0, pc, r0
   138c4:	bl	12078 <__assert_fail@plt>
   138c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   138cc:	bl	12848 <_start@@Base+0x7c0>
   138d0:	str	r0, [fp, #-52]	; 0xffffffcc
   138d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   138d8:	bl	124a0 <_start@@Base+0x418>
   138dc:	mov	r3, r0
   138e0:	cmp	r3, #1000	; 0x3e8
   138e4:	movne	r3, #1
   138e8:	moveq	r3, #0
   138ec:	uxtb	r3, r3
   138f0:	mov	r2, r3
   138f4:	ldr	r3, [fp, #-12]
   138f8:	orr	r3, r3, r2
   138fc:	str	r3, [fp, #-12]
   13900:	ldr	r3, [fp, #-12]
   13904:	cmp	r3, #0
   13908:	beq	1392c <main@@Base+0x200>
   1390c:	ldr	r3, [pc, #348]	; 13a70 <main@@Base+0x344>
   13910:	add	r3, pc, r3
   13914:	mov	r2, #143	; 0x8f
   13918:	ldr	r1, [pc, #340]	; 13a74 <main@@Base+0x348>
   1391c:	add	r1, pc, r1
   13920:	ldr	r0, [pc, #336]	; 13a78 <main@@Base+0x34c>
   13924:	add	r0, pc, r0
   13928:	bl	12078 <__assert_fail@plt>
   1392c:	mov	r3, #0
   13930:	str	r3, [fp, #-16]
   13934:	b	139a0 <main@@Base+0x274>
   13938:	ldr	r3, [fp, #-16]
   1393c:	mov	r1, r3
   13940:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13944:	bl	124f0 <_start@@Base+0x468>
   13948:	mov	r3, r0
   1394c:	mov	r1, r3
   13950:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13954:	bl	134d4 <_start@@Base+0x144c>
   13958:	mov	r2, r0
   1395c:	ldr	r3, [fp, #-12]
   13960:	orr	r3, r3, r2
   13964:	str	r3, [fp, #-12]
   13968:	ldr	r3, [fp, #-12]
   1396c:	cmp	r3, #0
   13970:	beq	13994 <main@@Base+0x268>
   13974:	ldr	r3, [pc, #256]	; 13a7c <main@@Base+0x350>
   13978:	add	r3, pc, r3
   1397c:	mov	r2, #147	; 0x93
   13980:	ldr	r1, [pc, #248]	; 13a80 <main@@Base+0x354>
   13984:	add	r1, pc, r1
   13988:	ldr	r0, [pc, #244]	; 13a84 <main@@Base+0x358>
   1398c:	add	r0, pc, r0
   13990:	bl	12078 <__assert_fail@plt>
   13994:	ldr	r3, [fp, #-16]
   13998:	add	r3, r3, #1
   1399c:	str	r3, [fp, #-16]
   139a0:	ldr	r3, [fp, #-16]
   139a4:	cmp	r3, #1000	; 0x3e8
   139a8:	blt	13938 <main@@Base+0x20c>
   139ac:	ldr	r3, [fp, #-12]
   139b0:	cmp	r3, #0
   139b4:	bne	13a08 <main@@Base+0x2dc>
   139b8:	ldr	r3, [fp, #-8]
   139bc:	add	r3, r3, #1
   139c0:	str	r3, [fp, #-8]
   139c4:	ldr	r2, [fp, #-8]
   139c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139cc:	cmp	r2, r3
   139d0:	blt	13844 <main@@Base+0x118>
   139d4:	bl	12f70 <_start@@Base+0xee8>
   139d8:	vstr	d0, [fp, #-60]	; 0xffffffc4
   139dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   139e0:	mov	r3, #0
   139e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   139e8:	vldr	d1, [fp, #-60]	; 0xffffffc4
   139ec:	vldr	d0, [fp, #-44]	; 0xffffffd4
   139f0:	ldr	r0, [pc, #144]	; 13a88 <main@@Base+0x35c>
   139f4:	add	r0, pc, r0
   139f8:	bl	13030 <_start@@Base+0xfa8>
   139fc:	b	13a0c <main@@Base+0x2e0>
   13a00:	nop	{0}
   13a04:	b	13a0c <main@@Base+0x2e0>
   13a08:	nop	{0}
   13a0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13a10:	bl	14b64 <flatcc_builder_clear@@Base>
   13a14:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13a18:	bl	11fac <free@plt>
   13a1c:	ldr	r3, [fp, #-12]
   13a20:	cmp	r3, #0
   13a24:	beq	13a38 <main@@Base+0x30c>
   13a28:	ldr	r3, [pc, #92]	; 13a8c <main@@Base+0x360>
   13a2c:	add	r3, pc, r3
   13a30:	mov	r0, r3
   13a34:	bl	11ff4 <puts@plt>
   13a38:	ldr	r3, [fp, #-12]
   13a3c:	mov	r0, r3
   13a40:	sub	sp, fp, #4
   13a44:	ldr	fp, [sp]
   13a48:	add	sp, sp, #4
   13a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a50:	andeq	r7, r0, r8, lsr #20
   13a54:	andeq	r7, r0, r0, lsr #20
   13a58:			; <UNDEFINED> instruction: 0x000079b4
   13a5c:			; <UNDEFINED> instruction: 0x000079b8
   13a60:	andeq	r7, r0, r0, ror #17
   13a64:	andeq	r7, r0, r0, lsr #20
   13a68:	andeq	r7, r0, ip, lsr r8
   13a6c:	andeq	r7, r0, r0, lsr r9
   13a70:			; <UNDEFINED> instruction: 0x000079bc
   13a74:	ldrdeq	r7, [r0], -r8
   13a78:	andeq	r7, r0, ip, asr #17
   13a7c:	andeq	r7, r0, r4, asr r9
   13a80:	andeq	r7, r0, r0, ror r7
   13a84:	andeq	r7, r0, r4, ror #16
   13a88:	andeq	r7, r0, r8, lsl #16
   13a8c:	strdeq	r7, [r0], -ip
   13a90:	str	fp, [sp, #-8]!
   13a94:	str	lr, [sp, #4]
   13a98:	add	fp, sp, #4
   13a9c:	sub	sp, sp, #16
   13aa0:	str	r0, [fp, #-16]
   13aa4:	str	r1, [fp, #-20]	; 0xffffffec
   13aa8:	mov	r3, #0
   13aac:	str	r3, [fp, #-12]
   13ab0:	ldr	r3, [fp, #-16]
   13ab4:	cmp	r3, #3
   13ab8:	bhi	13ac4 <main@@Base+0x398>
   13abc:	mov	r3, #4
   13ac0:	str	r3, [fp, #-16]
   13ac4:	sub	r3, fp, #12
   13ac8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13acc:	ldr	r1, [fp, #-16]
   13ad0:	mov	r0, r3
   13ad4:	bl	12030 <posix_memalign@plt>
   13ad8:	str	r0, [fp, #-8]
   13adc:	ldr	r3, [fp, #-8]
   13ae0:	cmp	r3, #0
   13ae4:	beq	13b08 <main@@Base+0x3dc>
   13ae8:	ldr	r3, [fp, #-12]
   13aec:	cmp	r3, #0
   13af0:	beq	13b08 <main@@Base+0x3dc>
   13af4:	ldr	r3, [fp, #-12]
   13af8:	mov	r0, r3
   13afc:	bl	11fac <free@plt>
   13b00:	mov	r3, #0
   13b04:	str	r3, [fp, #-12]
   13b08:	ldr	r3, [fp, #-12]
   13b0c:	mov	r0, r3
   13b10:	sub	sp, fp, #4
   13b14:	ldr	fp, [sp]
   13b18:	add	sp, sp, #4
   13b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b20:	push	{fp}		; (str fp, [sp, #-4]!)
   13b24:	add	fp, sp, #0
   13b28:	sub	sp, sp, #12
   13b2c:	str	r0, [fp, #-8]
   13b30:	ldr	r3, [fp, #-8]
   13b34:	mov	r0, r3
   13b38:	add	sp, fp, #0
   13b3c:	pop	{fp}		; (ldr fp, [sp], #4)
   13b40:	bx	lr
   13b44:	push	{fp}		; (str fp, [sp, #-4]!)
   13b48:	add	fp, sp, #0
   13b4c:	sub	sp, sp, #12
   13b50:	mov	r3, r0
   13b54:	strb	r3, [fp, #-5]
   13b58:	ldrb	r3, [fp, #-5]
   13b5c:	mov	r0, r3
   13b60:	add	sp, fp, #0
   13b64:	pop	{fp}		; (ldr fp, [sp], #4)
   13b68:	bx	lr
   13b6c:	push	{fp}		; (str fp, [sp, #-4]!)
   13b70:	add	fp, sp, #0
   13b74:	sub	sp, sp, #12
   13b78:	str	r0, [fp, #-8]
   13b7c:	ldr	r3, [fp, #-8]
   13b80:	mov	r0, r3
   13b84:	add	sp, fp, #0
   13b88:	pop	{fp}		; (ldr fp, [sp], #4)
   13b8c:	bx	lr
   13b90:	push	{fp}		; (str fp, [sp, #-4]!)
   13b94:	add	fp, sp, #0
   13b98:	sub	sp, sp, #12
   13b9c:	str	r0, [fp, #-8]
   13ba0:	str	r1, [fp, #-12]
   13ba4:	ldr	r3, [fp, #-8]
   13ba8:	ldr	r2, [r3]
   13bac:	ldr	r3, [fp, #-8]
   13bb0:	ldr	r3, [r3, #4]
   13bb4:	cmp	r2, r3
   13bb8:	bne	13be4 <main@@Base+0x4b8>
   13bbc:	ldr	r3, [fp, #-12]
   13bc0:	cmp	r3, #0
   13bc4:	beq	13bd8 <main@@Base+0x4ac>
   13bc8:	ldr	r3, [fp, #-8]
   13bcc:	ldr	r2, [r3, #24]
   13bd0:	ldr	r3, [fp, #-12]
   13bd4:	str	r2, [r3]
   13bd8:	ldr	r3, [fp, #-8]
   13bdc:	ldr	r3, [r3, #8]
   13be0:	b	13c00 <main@@Base+0x4d4>
   13be4:	ldr	r3, [fp, #-12]
   13be8:	cmp	r3, #0
   13bec:	beq	13bfc <main@@Base+0x4d0>
   13bf0:	ldr	r3, [fp, #-12]
   13bf4:	mov	r2, #0
   13bf8:	str	r2, [r3]
   13bfc:	mov	r3, #0
   13c00:	mov	r0, r3
   13c04:	add	sp, fp, #0
   13c08:	pop	{fp}		; (ldr fp, [sp], #4)
   13c0c:	bx	lr
   13c10:	str	fp, [sp, #-8]!
   13c14:	str	lr, [sp, #4]
   13c18:	add	fp, sp, #4
   13c1c:	sub	sp, sp, #16
   13c20:	str	r0, [fp, #-16]
   13c24:	str	r1, [fp, #-20]	; 0xffffffec
   13c28:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c2c:	mov	r1, #0
   13c30:	ldr	r0, [fp, #-16]
   13c34:	bl	12054 <memchr@plt>
   13c38:	str	r0, [fp, #-8]
   13c3c:	ldr	r3, [fp, #-8]
   13c40:	cmp	r3, #0
   13c44:	beq	13c58 <main@@Base+0x52c>
   13c48:	ldr	r2, [fp, #-8]
   13c4c:	ldr	r3, [fp, #-16]
   13c50:	sub	r3, r2, r3
   13c54:	b	13c5c <main@@Base+0x530>
   13c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c5c:	mov	r0, r3
   13c60:	sub	sp, fp, #4
   13c64:	ldr	fp, [sp]
   13c68:	add	sp, sp, #4
   13c6c:	pop	{pc}		; (ldr pc, [sp], #4)

00013c70 <flatcc_builder_default_alloc@@Base>:
   13c70:	str	fp, [sp, #-8]!
   13c74:	str	lr, [sp, #4]
   13c78:	add	fp, sp, #4
   13c7c:	sub	sp, sp, #24
   13c80:	str	r0, [fp, #-16]
   13c84:	str	r1, [fp, #-20]	; 0xffffffec
   13c88:	str	r2, [fp, #-24]	; 0xffffffe8
   13c8c:	str	r3, [fp, #-28]	; 0xffffffe4
   13c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c94:	cmp	r3, #0
   13c98:	bne	13cdc <flatcc_builder_default_alloc@@Base+0x6c>
   13c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ca0:	ldr	r3, [r3]
   13ca4:	cmp	r3, #0
   13ca8:	beq	13cd4 <flatcc_builder_default_alloc@@Base+0x64>
   13cac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cb0:	ldr	r3, [r3]
   13cb4:	mov	r0, r3
   13cb8:	bl	11fac <free@plt>
   13cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cc0:	mov	r2, #0
   13cc4:	str	r2, [r3]
   13cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ccc:	mov	r2, #0
   13cd0:	str	r2, [r3, #4]
   13cd4:	mov	r3, #0
   13cd8:	b	13e30 <flatcc_builder_default_alloc@@Base+0x1c0>
   13cdc:	ldr	r3, [fp, #4]
   13ce0:	sub	r3, r3, #1
   13ce4:	cmp	r3, #6
   13ce8:	addls	pc, pc, r3, lsl #2
   13cec:	b	13d3c <flatcc_builder_default_alloc@@Base+0xcc>
   13cf0:	b	13d0c <flatcc_builder_default_alloc@@Base+0x9c>
   13cf4:	b	13d3c <flatcc_builder_default_alloc@@Base+0xcc>
   13cf8:	b	13d3c <flatcc_builder_default_alloc@@Base+0xcc>
   13cfc:	b	13d24 <flatcc_builder_default_alloc@@Base+0xb4>
   13d00:	b	13d18 <flatcc_builder_default_alloc@@Base+0xa8>
   13d04:	b	13d3c <flatcc_builder_default_alloc@@Base+0xcc>
   13d08:	b	13d30 <flatcc_builder_default_alloc@@Base+0xc0>
   13d0c:	mov	r3, #256	; 0x100
   13d10:	str	r3, [fp, #-8]
   13d14:	b	13d48 <flatcc_builder_default_alloc@@Base+0xd8>
   13d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d1c:	str	r3, [fp, #-8]
   13d20:	b	13d48 <flatcc_builder_default_alloc@@Base+0xd8>
   13d24:	mov	r3, #288	; 0x120
   13d28:	str	r3, [fp, #-8]
   13d2c:	b	13d48 <flatcc_builder_default_alloc@@Base+0xd8>
   13d30:	mov	r3, #64	; 0x40
   13d34:	str	r3, [fp, #-8]
   13d38:	b	13d48 <flatcc_builder_default_alloc@@Base+0xd8>
   13d3c:	mov	r3, #32
   13d40:	str	r3, [fp, #-8]
   13d44:	nop	{0}
   13d48:	b	13d58 <flatcc_builder_default_alloc@@Base+0xe8>
   13d4c:	ldr	r3, [fp, #-8]
   13d50:	lsl	r3, r3, #1
   13d54:	str	r3, [fp, #-8]
   13d58:	ldr	r2, [fp, #-8]
   13d5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d60:	cmp	r2, r3
   13d64:	bcc	13d4c <flatcc_builder_default_alloc@@Base+0xdc>
   13d68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d6c:	ldr	r3, [r3, #4]
   13d70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13d74:	cmp	r2, r3
   13d78:	bhi	13d9c <flatcc_builder_default_alloc@@Base+0x12c>
   13d7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d80:	ldr	r3, [r3, #4]
   13d84:	lsr	r3, r3, #1
   13d88:	ldr	r2, [fp, #-8]
   13d8c:	cmp	r2, r3
   13d90:	bhi	13d9c <flatcc_builder_default_alloc@@Base+0x12c>
   13d94:	mov	r3, #0
   13d98:	b	13e30 <flatcc_builder_default_alloc@@Base+0x1c0>
   13d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13da0:	ldr	r3, [r3]
   13da4:	ldr	r1, [fp, #-8]
   13da8:	mov	r0, r3
   13dac:	bl	11fd0 <realloc@plt>
   13db0:	str	r0, [fp, #-12]
   13db4:	ldr	r3, [fp, #-12]
   13db8:	cmp	r3, #0
   13dbc:	bne	13dc8 <flatcc_builder_default_alloc@@Base+0x158>
   13dc0:	mvn	r3, #0
   13dc4:	b	13e30 <flatcc_builder_default_alloc@@Base+0x1c0>
   13dc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13dcc:	cmp	r3, #0
   13dd0:	beq	13e14 <flatcc_builder_default_alloc@@Base+0x1a4>
   13dd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dd8:	ldr	r3, [r3, #4]
   13ddc:	ldr	r2, [fp, #-8]
   13de0:	cmp	r2, r3
   13de4:	bls	13e14 <flatcc_builder_default_alloc@@Base+0x1a4>
   13de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dec:	ldr	r3, [r3, #4]
   13df0:	ldr	r2, [fp, #-12]
   13df4:	add	r0, r2, r3
   13df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dfc:	ldr	r3, [r3, #4]
   13e00:	ldr	r2, [fp, #-8]
   13e04:	sub	r3, r2, r3
   13e08:	mov	r2, r3
   13e0c:	mov	r1, #0
   13e10:	bl	1203c <memset@plt>
   13e14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e18:	ldr	r2, [fp, #-12]
   13e1c:	str	r2, [r3]
   13e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e24:	ldr	r2, [fp, #-8]
   13e28:	str	r2, [r3, #4]
   13e2c:	mov	r3, #0
   13e30:	mov	r0, r3
   13e34:	sub	sp, fp, #4
   13e38:	ldr	fp, [sp]
   13e3c:	add	sp, sp, #4
   13e40:	pop	{pc}		; (ldr pc, [sp], #4)
   13e44:	push	{fp}		; (str fp, [sp, #-4]!)
   13e48:	add	fp, sp, #0
   13e4c:	sub	sp, sp, #20
   13e50:	str	r0, [fp, #-16]
   13e54:	str	r1, [fp, #-20]	; 0xffffffec
   13e58:	ldr	r3, [fp, #-16]
   13e5c:	add	r3, r3, #52	; 0x34
   13e60:	add	r3, r3, #8
   13e64:	str	r3, [fp, #-8]
   13e68:	ldr	r3, [fp, #-16]
   13e6c:	ldr	r2, [r3, #60]	; 0x3c
   13e70:	ldr	r3, [fp, #-16]
   13e74:	ldr	r3, [r3, #28]
   13e78:	add	r2, r2, r3
   13e7c:	ldr	r3, [fp, #-16]
   13e80:	str	r2, [r3, #16]
   13e84:	ldr	r3, [fp, #-8]
   13e88:	ldr	r2, [r3, #4]
   13e8c:	ldr	r3, [fp, #-16]
   13e90:	ldr	r3, [r3, #28]
   13e94:	sub	r2, r2, r3
   13e98:	ldr	r3, [fp, #-16]
   13e9c:	str	r2, [r3, #24]
   13ea0:	ldr	r3, [fp, #-16]
   13ea4:	ldr	r3, [r3, #24]
   13ea8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13eac:	cmp	r2, r3
   13eb0:	bcs	13ec0 <flatcc_builder_default_alloc@@Base+0x250>
   13eb4:	ldr	r3, [fp, #-16]
   13eb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ebc:	str	r2, [r3, #24]
   13ec0:	ldr	r3, [fp, #-16]
   13ec4:	ldr	r3, [r3, #32]
   13ec8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ecc:	str	r2, [r3, #4]
   13ed0:	nop	{0}
   13ed4:	add	sp, fp, #0
   13ed8:	pop	{fp}		; (ldr fp, [sp], #4)
   13edc:	bx	lr
   13ee0:	str	r4, [sp, #-12]!
   13ee4:	str	fp, [sp, #4]
   13ee8:	str	lr, [sp, #8]
   13eec:	add	fp, sp, #8
   13ef0:	sub	sp, sp, #36	; 0x24
   13ef4:	str	r0, [fp, #-24]	; 0xffffffe8
   13ef8:	str	r1, [fp, #-28]	; 0xffffffe4
   13efc:	str	r2, [fp, #-32]	; 0xffffffe0
   13f00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f04:	add	r3, r3, #52	; 0x34
   13f08:	add	r3, r3, #8
   13f0c:	str	r3, [fp, #-16]
   13f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f14:	ldr	r4, [r3, #48]	; 0x30
   13f18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f1c:	ldr	r0, [r3, #40]	; 0x28
   13f20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f24:	ldr	r2, [r3, #28]
   13f28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f2c:	add	r2, r2, r3
   13f30:	mov	r3, #1
   13f34:	str	r3, [sp]
   13f38:	mov	r3, #1
   13f3c:	ldr	r1, [fp, #-16]
   13f40:	blx	r4
   13f44:	mov	r3, r0
   13f48:	cmp	r3, #0
   13f4c:	beq	13f58 <flatcc_builder_default_alloc@@Base+0x2e8>
   13f50:	mvn	r3, #0
   13f54:	b	13f68 <flatcc_builder_default_alloc@@Base+0x2f8>
   13f58:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13f5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f60:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   13f64:	mov	r3, #0
   13f68:	mov	r0, r3
   13f6c:	sub	sp, fp, #8
   13f70:	ldr	r4, [sp]
   13f74:	ldr	fp, [sp, #4]
   13f78:	add	sp, sp, #8
   13f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f80:	str	fp, [sp, #-8]!
   13f84:	str	lr, [sp, #4]
   13f88:	add	fp, sp, #4
   13f8c:	sub	sp, sp, #16
   13f90:	str	r0, [fp, #-16]
   13f94:	str	r1, [fp, #-20]	; 0xffffffec
   13f98:	ldr	r3, [fp, #-16]
   13f9c:	ldr	r3, [r3, #20]
   13fa0:	str	r3, [fp, #-8]
   13fa4:	ldr	r3, [fp, #-16]
   13fa8:	ldr	r2, [r3, #20]
   13fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fb0:	add	r2, r2, r3
   13fb4:	ldr	r3, [fp, #-16]
   13fb8:	str	r2, [r3, #20]
   13fbc:	ldr	r3, [fp, #-16]
   13fc0:	ldr	r2, [r3, #20]
   13fc4:	ldr	r3, [fp, #-16]
   13fc8:	ldr	r3, [r3, #24]
   13fcc:	cmp	r2, r3
   13fd0:	bcc	14004 <flatcc_builder_default_alloc@@Base+0x394>
   13fd4:	ldr	r3, [fp, #-16]
   13fd8:	ldr	r3, [r3, #20]
   13fdc:	add	r3, r3, #1
   13fe0:	mvn	r2, #3
   13fe4:	mov	r1, r3
   13fe8:	ldr	r0, [fp, #-16]
   13fec:	bl	13ee0 <flatcc_builder_default_alloc@@Base+0x270>
   13ff0:	mov	r3, r0
   13ff4:	cmp	r3, #0
   13ff8:	beq	14004 <flatcc_builder_default_alloc@@Base+0x394>
   13ffc:	mov	r3, #0
   14000:	b	14014 <flatcc_builder_default_alloc@@Base+0x3a4>
   14004:	ldr	r3, [fp, #-16]
   14008:	ldr	r2, [r3, #16]
   1400c:	ldr	r3, [fp, #-8]
   14010:	add	r3, r2, r3
   14014:	mov	r0, r3
   14018:	sub	sp, fp, #4
   1401c:	ldr	fp, [sp]
   14020:	add	sp, sp, #4
   14024:	pop	{pc}		; (ldr pc, [sp], #4)
   14028:	str	fp, [sp, #-8]!
   1402c:	str	lr, [sp, #4]
   14030:	add	fp, sp, #4
   14034:	sub	sp, sp, #8
   14038:	str	r0, [fp, #-8]
   1403c:	str	r1, [fp, #-12]
   14040:	ldr	r3, [fp, #-8]
   14044:	ldr	r2, [r3, #20]
   14048:	ldr	r3, [fp, #-12]
   1404c:	sub	r2, r2, r3
   14050:	ldr	r3, [fp, #-8]
   14054:	str	r2, [r3, #20]
   14058:	ldr	r3, [fp, #-8]
   1405c:	ldr	r2, [r3, #16]
   14060:	ldr	r3, [fp, #-8]
   14064:	ldr	r3, [r3, #20]
   14068:	add	r3, r2, r3
   1406c:	ldr	r2, [fp, #-12]
   14070:	mov	r1, #0
   14074:	mov	r0, r3
   14078:	bl	1203c <memset@plt>
   1407c:	nop	{0}
   14080:	sub	sp, fp, #4
   14084:	ldr	fp, [sp]
   14088:	add	sp, sp, #4
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	str	fp, [sp, #-8]!
   14094:	str	lr, [sp, #4]
   14098:	add	fp, sp, #4
   1409c:	sub	sp, sp, #24
   140a0:	str	r0, [fp, #-16]
   140a4:	str	r1, [fp, #-20]	; 0xffffffec
   140a8:	str	r2, [fp, #-24]	; 0xffffffe8
   140ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   140b0:	ldr	r0, [fp, #-16]
   140b4:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   140b8:	str	r0, [fp, #-8]
   140bc:	ldr	r3, [fp, #-8]
   140c0:	cmp	r3, #0
   140c4:	bne	140d0 <flatcc_builder_default_alloc@@Base+0x460>
   140c8:	mov	r3, #0
   140cc:	b	140e4 <flatcc_builder_default_alloc@@Base+0x474>
   140d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   140d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   140d8:	ldr	r0, [fp, #-8]
   140dc:	bl	11fb8 <memcpy@plt>
   140e0:	ldr	r3, [fp, #-8]
   140e4:	mov	r0, r3
   140e8:	sub	sp, fp, #4
   140ec:	ldr	fp, [sp]
   140f0:	add	sp, sp, #4
   140f4:	pop	{pc}		; (ldr pc, [sp], #4)
   140f8:	str	fp, [sp, #-8]!
   140fc:	str	lr, [sp, #4]
   14100:	add	fp, sp, #4
   14104:	sub	sp, sp, #24
   14108:	str	r0, [fp, #-16]
   1410c:	str	r1, [fp, #-20]	; 0xffffffec
   14110:	mov	r1, r2
   14114:	mov	r2, r3
   14118:	mov	r3, r1
   1411c:	strh	r3, [fp, #-22]	; 0xffffffea
   14120:	mov	r3, r2
   14124:	strh	r3, [fp, #-24]	; 0xffffffe8
   14128:	ldr	r3, [fp, #-16]
   1412c:	ldr	r2, [r3, #20]
   14130:	ldrh	r3, [fp, #-22]	; 0xffffffea
   14134:	add	r3, r2, r3
   14138:	sub	r3, r3, #1
   1413c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14140:	rsb	r2, r2, #0
   14144:	and	r3, r3, r2
   14148:	str	r3, [fp, #-8]
   1414c:	ldr	r2, [fp, #-8]
   14150:	ldr	r3, [fp, #-20]	; 0xffffffec
   14154:	add	r2, r2, r3
   14158:	ldr	r3, [fp, #-16]
   1415c:	str	r2, [r3, #20]
   14160:	ldr	r3, [fp, #-16]
   14164:	ldr	r2, [r3, #20]
   14168:	ldr	r3, [fp, #-16]
   1416c:	ldr	r3, [r3, #24]
   14170:	cmp	r2, r3
   14174:	bcc	141a8 <flatcc_builder_default_alloc@@Base+0x538>
   14178:	ldr	r3, [fp, #-16]
   1417c:	ldr	r3, [r3, #20]
   14180:	add	r3, r3, #1
   14184:	movw	r2, #65532	; 0xfffc
   14188:	mov	r1, r3
   1418c:	ldr	r0, [fp, #-16]
   14190:	bl	13ee0 <flatcc_builder_default_alloc@@Base+0x270>
   14194:	mov	r3, r0
   14198:	cmp	r3, #0
   1419c:	beq	141a8 <flatcc_builder_default_alloc@@Base+0x538>
   141a0:	mov	r3, #0
   141a4:	b	14208 <flatcc_builder_default_alloc@@Base+0x598>
   141a8:	ldr	r3, [fp, #-8]
   141ac:	uxth	r2, r3
   141b0:	ldr	r3, [fp, #-16]
   141b4:	ldr	r1, [r3, #4]
   141b8:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   141bc:	lsl	r3, r3, #1
   141c0:	add	r3, r1, r3
   141c4:	add	r2, r2, #4
   141c8:	uxth	r2, r2
   141cc:	strh	r2, [r3]
   141d0:	ldr	r3, [fp, #-16]
   141d4:	ldrh	r3, [r3, #8]
   141d8:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   141dc:	cmp	r2, r3
   141e0:	bcc	141f8 <flatcc_builder_default_alloc@@Base+0x588>
   141e4:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   141e8:	add	r3, r3, #1
   141ec:	uxth	r2, r3
   141f0:	ldr	r3, [fp, #-16]
   141f4:	strh	r2, [r3, #8]
   141f8:	ldr	r3, [fp, #-16]
   141fc:	ldr	r2, [r3, #16]
   14200:	ldr	r3, [fp, #-8]
   14204:	add	r3, r2, r3
   14208:	mov	r0, r3
   1420c:	sub	sp, fp, #4
   14210:	ldr	fp, [sp]
   14214:	add	sp, sp, #4
   14218:	pop	{pc}		; (ldr pc, [sp], #4)
   1421c:	str	fp, [sp, #-8]!
   14220:	str	lr, [sp, #4]
   14224:	add	fp, sp, #4
   14228:	sub	sp, sp, #16
   1422c:	str	r0, [fp, #-16]
   14230:	mov	r3, r1
   14234:	strh	r3, [fp, #-18]	; 0xffffffee
   14238:	ldr	r3, [fp, #-16]
   1423c:	ldr	r3, [r3, #20]
   14240:	add	r3, r3, #3
   14244:	bic	r3, r3, #3
   14248:	str	r3, [fp, #-8]
   1424c:	ldr	r3, [fp, #-8]
   14250:	add	r2, r3, #4
   14254:	ldr	r3, [fp, #-16]
   14258:	str	r2, [r3, #20]
   1425c:	ldr	r3, [fp, #-16]
   14260:	ldr	r2, [r3, #20]
   14264:	ldr	r3, [fp, #-16]
   14268:	ldr	r3, [r3, #24]
   1426c:	cmp	r2, r3
   14270:	bls	142a0 <flatcc_builder_default_alloc@@Base+0x630>
   14274:	ldr	r3, [fp, #-16]
   14278:	ldr	r3, [r3, #20]
   1427c:	movw	r2, #65532	; 0xfffc
   14280:	mov	r1, r3
   14284:	ldr	r0, [fp, #-16]
   14288:	bl	13ee0 <flatcc_builder_default_alloc@@Base+0x270>
   1428c:	mov	r3, r0
   14290:	cmp	r3, #0
   14294:	beq	142a0 <flatcc_builder_default_alloc@@Base+0x630>
   14298:	mov	r3, #0
   1429c:	b	14320 <flatcc_builder_default_alloc@@Base+0x6b0>
   142a0:	ldr	r3, [fp, #-8]
   142a4:	uxth	r2, r3
   142a8:	ldr	r3, [fp, #-16]
   142ac:	ldr	r1, [r3, #4]
   142b0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   142b4:	lsl	r3, r3, #1
   142b8:	add	r3, r1, r3
   142bc:	add	r2, r2, #4
   142c0:	uxth	r2, r2
   142c4:	strh	r2, [r3]
   142c8:	ldr	r3, [fp, #-16]
   142cc:	ldrh	r3, [r3, #8]
   142d0:	ldrh	r2, [fp, #-18]	; 0xffffffee
   142d4:	cmp	r2, r3
   142d8:	bcc	142f0 <flatcc_builder_default_alloc@@Base+0x680>
   142dc:	ldrh	r3, [fp, #-18]	; 0xffffffee
   142e0:	add	r3, r3, #1
   142e4:	uxth	r2, r3
   142e8:	ldr	r3, [fp, #-16]
   142ec:	strh	r2, [r3, #8]
   142f0:	ldr	r3, [fp, #-16]
   142f4:	ldr	r3, [r3]
   142f8:	add	r1, r3, #2
   142fc:	ldr	r2, [fp, #-16]
   14300:	str	r1, [r2]
   14304:	ldr	r2, [fp, #-8]
   14308:	uxth	r2, r2
   1430c:	strh	r2, [r3]
   14310:	ldr	r3, [fp, #-16]
   14314:	ldr	r2, [r3, #16]
   14318:	ldr	r3, [fp, #-8]
   1431c:	add	r3, r2, r3
   14320:	mov	r0, r3
   14324:	sub	sp, fp, #4
   14328:	ldr	fp, [sp]
   1432c:	add	sp, sp, #4
   14330:	pop	{pc}		; (ldr pc, [sp], #4)
   14334:	str	r4, [sp, #-12]!
   14338:	str	fp, [sp, #4]
   1433c:	str	lr, [sp, #8]
   14340:	add	fp, sp, #8
   14344:	sub	sp, sp, #36	; 0x24
   14348:	str	r0, [fp, #-24]	; 0xffffffe8
   1434c:	str	r1, [fp, #-28]	; 0xffffffe4
   14350:	str	r2, [fp, #-32]	; 0xffffffe0
   14354:	str	r3, [fp, #-36]	; 0xffffffdc
   14358:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1435c:	add	r2, r3, #52	; 0x34
   14360:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14364:	lsl	r3, r3, #3
   14368:	add	r3, r2, r3
   1436c:	str	r3, [fp, #-16]
   14370:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14374:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14378:	add	r2, r2, r3
   1437c:	ldr	r3, [fp, #-16]
   14380:	ldr	r3, [r3, #4]
   14384:	cmp	r2, r3
   14388:	bls	143e8 <flatcc_builder_default_alloc@@Base+0x778>
   1438c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14390:	ldr	r4, [r3, #48]	; 0x30
   14394:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14398:	ldr	r0, [r3, #40]	; 0x28
   1439c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   143a4:	add	r2, r2, r3
   143a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143ac:	str	r3, [sp]
   143b0:	ldr	r3, [fp, #4]
   143b4:	ldr	r1, [fp, #-16]
   143b8:	blx	r4
   143bc:	mov	r3, r0
   143c0:	cmp	r3, #0
   143c4:	beq	143e8 <flatcc_builder_default_alloc@@Base+0x778>
   143c8:	ldr	r3, [pc, #68]	; 14414 <flatcc_builder_default_alloc@@Base+0x7a4>
   143cc:	add	r3, pc, r3
   143d0:	mov	r2, #308	; 0x134
   143d4:	ldr	r1, [pc, #60]	; 14418 <flatcc_builder_default_alloc@@Base+0x7a8>
   143d8:	add	r1, pc, r1
   143dc:	ldr	r0, [pc, #56]	; 1441c <flatcc_builder_default_alloc@@Base+0x7ac>
   143e0:	add	r0, pc, r0
   143e4:	bl	12078 <__assert_fail@plt>
   143e8:	ldr	r3, [fp, #-16]
   143ec:	ldr	r3, [r3]
   143f0:	mov	r2, r3
   143f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   143f8:	add	r3, r2, r3
   143fc:	mov	r0, r3
   14400:	sub	sp, fp, #8
   14404:	ldr	r4, [sp]
   14408:	ldr	fp, [sp, #4]
   1440c:	add	sp, sp, #8
   14410:	pop	{pc}		; (ldr pc, [sp], #4)
   14414:	andeq	r7, r0, ip, lsl #11
   14418:	andeq	r7, r0, ip, asr #2
   1441c:	andeq	r7, r0, r4, lsr #3
   14420:	str	fp, [sp, #-8]!
   14424:	str	lr, [sp, #4]
   14428:	add	fp, sp, #4
   1442c:	sub	sp, sp, #24
   14430:	str	r0, [fp, #-16]
   14434:	str	r1, [fp, #-20]	; 0xffffffec
   14438:	ldr	r3, [fp, #-16]
   1443c:	ldr	r3, [r3, #32]
   14440:	ldr	r2, [r3, #16]
   14444:	ldr	r3, [fp, #-16]
   14448:	ldr	r3, [r3, #32]
   1444c:	ldrh	r3, [r3, #28]
   14450:	lsl	r3, r3, #1
   14454:	add	r3, r2, r3
   14458:	str	r3, [fp, #-8]
   1445c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14460:	add	r3, r3, #2
   14464:	lsl	r3, r3, #1
   14468:	str	r3, [fp, #-12]
   1446c:	mov	r3, #1
   14470:	str	r3, [sp]
   14474:	ldr	r3, [fp, #-12]
   14478:	ldr	r2, [fp, #-8]
   1447c:	mov	r1, #0
   14480:	ldr	r0, [fp, #-16]
   14484:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   14488:	mov	r2, r0
   1448c:	ldr	r3, [fp, #-16]
   14490:	str	r2, [r3, #4]
   14494:	ldr	r3, [fp, #-16]
   14498:	ldr	r3, [r3, #4]
   1449c:	cmp	r3, #0
   144a0:	bne	144ac <flatcc_builder_default_alloc@@Base+0x83c>
   144a4:	mvn	r3, #0
   144a8:	b	14524 <flatcc_builder_default_alloc@@Base+0x8b4>
   144ac:	ldr	r3, [fp, #-16]
   144b0:	ldr	r3, [r3, #4]
   144b4:	add	r2, r3, #4
   144b8:	ldr	r3, [fp, #-16]
   144bc:	str	r2, [r3, #4]
   144c0:	ldr	r3, [fp, #-16]
   144c4:	ldr	r3, [r3, #32]
   144c8:	ldr	r3, [r3, #20]
   144cc:	str	r3, [fp, #-8]
   144d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d4:	lsl	r3, r3, #1
   144d8:	add	r3, r3, #1
   144dc:	str	r3, [fp, #-12]
   144e0:	mov	r3, #0
   144e4:	str	r3, [sp]
   144e8:	ldr	r3, [fp, #-12]
   144ec:	ldr	r2, [fp, #-8]
   144f0:	mov	r1, #3
   144f4:	ldr	r0, [fp, #-16]
   144f8:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   144fc:	mov	r2, r0
   14500:	ldr	r3, [fp, #-16]
   14504:	str	r2, [r3]
   14508:	ldr	r3, [fp, #-16]
   1450c:	ldr	r3, [r3]
   14510:	cmp	r3, #0
   14514:	bne	14520 <flatcc_builder_default_alloc@@Base+0x8b0>
   14518:	mvn	r3, #0
   1451c:	b	14524 <flatcc_builder_default_alloc@@Base+0x8b4>
   14520:	mov	r3, #0
   14524:	mov	r0, r3
   14528:	sub	sp, fp, #4
   1452c:	ldr	fp, [sp]
   14530:	add	sp, sp, #4
   14534:	pop	{pc}		; (ldr pc, [sp], #4)
   14538:	str	r4, [sp, #-12]!
   1453c:	str	fp, [sp, #4]
   14540:	str	lr, [sp, #8]
   14544:	add	fp, sp, #8
   14548:	sub	sp, sp, #36	; 0x24
   1454c:	str	r0, [fp, #-32]	; 0xffffffe0
   14550:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14554:	add	r3, r3, #52	; 0x34
   14558:	add	r3, r3, #40	; 0x28
   1455c:	str	r3, [fp, #-24]	; 0xffffffe8
   14560:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14564:	ldr	r3, [r3, #124]	; 0x7c
   14568:	cmp	r3, #0
   1456c:	beq	14590 <flatcc_builder_default_alloc@@Base+0x920>
   14570:	ldr	r3, [pc, #292]	; 1469c <flatcc_builder_default_alloc@@Base+0xa2c>
   14574:	add	r3, pc, r3
   14578:	movw	r2, #342	; 0x156
   1457c:	ldr	r1, [pc, #284]	; 146a0 <flatcc_builder_default_alloc@@Base+0xa30>
   14580:	add	r1, pc, r1
   14584:	ldr	r0, [pc, #280]	; 146a4 <flatcc_builder_default_alloc@@Base+0xa34>
   14588:	add	r0, pc, r0
   1458c:	bl	12078 <__assert_fail@plt>
   14590:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14594:	ldr	r2, [r3, #124]	; 0x7c
   14598:	mov	r3, #0
   1459c:	str	r3, [sp]
   145a0:	mov	r3, #16
   145a4:	mov	r1, #6
   145a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   145ac:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   145b0:	mov	r3, r0
   145b4:	cmp	r3, #0
   145b8:	bne	145c4 <flatcc_builder_default_alloc@@Base+0x954>
   145bc:	mvn	r3, #0
   145c0:	b	14684 <flatcc_builder_default_alloc@@Base+0xa14>
   145c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   145c8:	mov	r2, #16
   145cc:	str	r2, [r3, #124]	; 0x7c
   145d0:	mov	r3, #256	; 0x100
   145d4:	str	r3, [fp, #-16]
   145d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   145dc:	ldr	r4, [r3, #48]	; 0x30
   145e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   145e4:	ldr	r0, [r3, #40]	; 0x28
   145e8:	mov	r3, #5
   145ec:	str	r3, [sp]
   145f0:	mov	r3, #1
   145f4:	ldr	r2, [fp, #-16]
   145f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   145fc:	blx	r4
   14600:	mov	r3, r0
   14604:	cmp	r3, #0
   14608:	beq	14620 <flatcc_builder_default_alloc@@Base+0x9b0>
   1460c:	mvn	r3, #0
   14610:	b	14684 <flatcc_builder_default_alloc@@Base+0xa14>
   14614:	ldr	r3, [fp, #-16]
   14618:	lsl	r3, r3, #1
   1461c:	str	r3, [fp, #-16]
   14620:	ldr	r3, [fp, #-16]
   14624:	lsl	r2, r3, #1
   14628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1462c:	ldr	r3, [r3, #4]
   14630:	cmp	r2, r3
   14634:	bls	14614 <flatcc_builder_default_alloc@@Base+0x9a4>
   14638:	ldr	r3, [fp, #-16]
   1463c:	lsr	r3, r3, #2
   14640:	str	r3, [fp, #-16]
   14644:	mov	r3, #0
   14648:	str	r3, [fp, #-20]	; 0xffffffec
   1464c:	b	1465c <flatcc_builder_default_alloc@@Base+0x9ec>
   14650:	ldr	r3, [fp, #-20]	; 0xffffffec
   14654:	add	r3, r3, #1
   14658:	str	r3, [fp, #-20]	; 0xffffffec
   1465c:	mov	r2, #1
   14660:	ldr	r3, [fp, #-20]	; 0xffffffec
   14664:	lsl	r3, r2, r3
   14668:	ldr	r2, [fp, #-16]
   1466c:	cmp	r2, r3
   14670:	bhi	14650 <flatcc_builder_default_alloc@@Base+0x9e0>
   14674:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14678:	ldr	r2, [fp, #-20]	; 0xffffffec
   1467c:	str	r2, [r3, #116]	; 0x74
   14680:	mov	r3, #0
   14684:	mov	r0, r3
   14688:	sub	sp, fp, #8
   1468c:	ldr	r4, [sp]
   14690:	ldr	fp, [sp, #4]
   14694:	add	sp, sp, #8
   14698:	pop	{pc}		; (ldr pc, [sp], #4)
   1469c:	ldrdeq	r7, [r0], -r8
   146a0:	andeq	r6, r0, r4, lsr #31
   146a4:	andeq	r7, r0, r0
   146a8:	str	fp, [sp, #-8]!
   146ac:	str	lr, [sp, #4]
   146b0:	add	fp, sp, #4
   146b4:	sub	sp, sp, #16
   146b8:	str	r0, [fp, #-16]
   146bc:	str	r1, [fp, #-20]	; 0xffffffec
   146c0:	ldr	r3, [fp, #-16]
   146c4:	ldr	r3, [r3, #116]	; 0x74
   146c8:	cmp	r3, #0
   146cc:	bne	146ec <flatcc_builder_default_alloc@@Base+0xa7c>
   146d0:	ldr	r0, [fp, #-16]
   146d4:	bl	14538 <flatcc_builder_default_alloc@@Base+0x8c8>
   146d8:	mov	r3, r0
   146dc:	cmp	r3, #0
   146e0:	beq	146ec <flatcc_builder_default_alloc@@Base+0xa7c>
   146e4:	mov	r3, #0
   146e8:	b	14718 <flatcc_builder_default_alloc@@Base+0xaa8>
   146ec:	ldr	r3, [fp, #-16]
   146f0:	ldr	r3, [r3, #92]	; 0x5c
   146f4:	str	r3, [fp, #-8]
   146f8:	ldr	r3, [fp, #-16]
   146fc:	ldr	r3, [r3, #116]	; 0x74
   14700:	rsb	r3, r3, #32
   14704:	ldr	r2, [fp, #-20]	; 0xffffffec
   14708:	lsr	r3, r2, r3
   1470c:	lsl	r3, r3, #2
   14710:	ldr	r2, [fp, #-8]
   14714:	add	r3, r2, r3
   14718:	mov	r0, r3
   1471c:	sub	sp, fp, #4
   14720:	ldr	fp, [sp]
   14724:	add	sp, sp, #4
   14728:	pop	{pc}		; (ldr pc, [sp], #4)

0001472c <flatcc_builder_flush_vtable_cache@@Base>:
   1472c:	str	fp, [sp, #-8]!
   14730:	str	lr, [sp, #4]
   14734:	add	fp, sp, #4
   14738:	sub	sp, sp, #16
   1473c:	str	r0, [fp, #-16]
   14740:	ldr	r3, [fp, #-16]
   14744:	add	r3, r3, #52	; 0x34
   14748:	add	r3, r3, #40	; 0x28
   1474c:	str	r3, [fp, #-8]
   14750:	ldr	r3, [fp, #-16]
   14754:	ldr	r3, [r3, #116]	; 0x74
   14758:	cmp	r3, #0
   1475c:	beq	14798 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   14760:	ldr	r3, [fp, #-8]
   14764:	ldr	r0, [r3]
   14768:	ldr	r3, [fp, #-8]
   1476c:	ldr	r3, [r3, #4]
   14770:	mov	r2, r3
   14774:	mov	r1, #0
   14778:	bl	1203c <memset@plt>
   1477c:	ldr	r3, [fp, #-16]
   14780:	mov	r2, #16
   14784:	str	r2, [r3, #124]	; 0x7c
   14788:	ldr	r3, [fp, #-16]
   1478c:	mov	r2, #0
   14790:	str	r2, [r3, #120]	; 0x78
   14794:	b	1479c <flatcc_builder_flush_vtable_cache@@Base+0x70>
   14798:	nop	{0}
   1479c:	sub	sp, fp, #4
   147a0:	ldr	fp, [sp]
   147a4:	add	sp, sp, #4
   147a8:	pop	{pc}		; (ldr pc, [sp], #4)

000147ac <flatcc_builder_custom_init@@Base>:
   147ac:	str	r4, [sp, #-12]!
   147b0:	str	fp, [sp, #4]
   147b4:	str	lr, [sp, #8]
   147b8:	add	fp, sp, #8
   147bc:	sub	sp, sp, #20
   147c0:	str	r0, [fp, #-16]
   147c4:	str	r1, [fp, #-20]	; 0xffffffec
   147c8:	str	r2, [fp, #-24]	; 0xffffffe8
   147cc:	str	r3, [fp, #-28]	; 0xffffffe4
   147d0:	ldr	r4, [pc, #164]	; 1487c <flatcc_builder_custom_init@@Base+0xd0>
   147d4:	add	r4, pc, r4
   147d8:	mov	r2, #232	; 0xe8
   147dc:	mov	r1, #0
   147e0:	ldr	r0, [fp, #-16]
   147e4:	bl	1203c <memset@plt>
   147e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   147ec:	cmp	r3, #0
   147f0:	bne	14818 <flatcc_builder_custom_init@@Base+0x6c>
   147f4:	ldr	r3, [fp, #-16]
   147f8:	mov	r2, #1
   147fc:	str	r2, [r3, #184]	; 0xb8
   14800:	ldr	r3, [pc, #120]	; 14880 <flatcc_builder_custom_init@@Base+0xd4>
   14804:	ldr	r3, [r4, r3]
   14808:	str	r3, [fp, #-20]	; 0xffffffec
   1480c:	ldr	r3, [fp, #-16]
   14810:	add	r3, r3, #188	; 0xbc
   14814:	str	r3, [fp, #-24]	; 0xffffffe8
   14818:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1481c:	cmp	r3, #0
   14820:	bne	14830 <flatcc_builder_custom_init@@Base+0x84>
   14824:	ldr	r3, [pc, #88]	; 14884 <flatcc_builder_custom_init@@Base+0xd8>
   14828:	ldr	r3, [r4, r3]
   1482c:	str	r3, [fp, #-28]	; 0xffffffe4
   14830:	ldr	r3, [fp, #-16]
   14834:	ldr	r2, [fp, #4]
   14838:	str	r2, [r3, #40]	; 0x28
   1483c:	ldr	r3, [fp, #-16]
   14840:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14844:	str	r2, [r3, #48]	; 0x30
   14848:	ldr	r3, [fp, #-16]
   1484c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14850:	str	r2, [r3, #36]	; 0x24
   14854:	ldr	r3, [fp, #-16]
   14858:	ldr	r2, [fp, #-20]	; 0xffffffec
   1485c:	str	r2, [r3, #44]	; 0x2c
   14860:	mov	r3, #0
   14864:	mov	r0, r3
   14868:	sub	sp, fp, #8
   1486c:	ldr	r4, [sp]
   14870:	ldr	fp, [sp, #4]
   14874:	add	sp, sp, #8
   14878:	pop	{pc}		; (ldr pc, [sp], #4)
   1487c:	andeq	r7, r1, r4, lsr #16
   14880:	andeq	r0, r0, ip, rrx
   14884:	andeq	r0, r0, r8, rrx

00014888 <flatcc_builder_init@@Base>:
   14888:	str	fp, [sp, #-8]!
   1488c:	str	lr, [sp, #4]
   14890:	add	fp, sp, #4
   14894:	sub	sp, sp, #16
   14898:	str	r0, [fp, #-8]
   1489c:	mov	r3, #0
   148a0:	str	r3, [sp]
   148a4:	mov	r3, #0
   148a8:	mov	r2, #0
   148ac:	mov	r1, #0
   148b0:	ldr	r0, [fp, #-8]
   148b4:	bl	147ac <flatcc_builder_custom_init@@Base>
   148b8:	mov	r3, r0
   148bc:	mov	r0, r3
   148c0:	sub	sp, fp, #4
   148c4:	ldr	fp, [sp]
   148c8:	add	sp, sp, #4
   148cc:	pop	{pc}		; (ldr pc, [sp], #4)

000148d0 <flatcc_builder_custom_reset@@Base>:
   148d0:	str	r4, [sp, #-12]!
   148d4:	str	fp, [sp, #4]
   148d8:	str	lr, [sp, #8]
   148dc:	add	fp, sp, #8
   148e0:	sub	sp, sp, #36	; 0x24
   148e4:	str	r0, [fp, #-24]	; 0xffffffe8
   148e8:	str	r1, [fp, #-28]	; 0xffffffe4
   148ec:	str	r2, [fp, #-32]	; 0xffffffe0
   148f0:	mov	r3, #0
   148f4:	str	r3, [fp, #-16]
   148f8:	b	149d4 <flatcc_builder_custom_reset@@Base+0x104>
   148fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14900:	add	r2, r3, #52	; 0x34
   14904:	ldr	r3, [fp, #-16]
   14908:	lsl	r3, r3, #3
   1490c:	add	r3, r2, r3
   14910:	str	r3, [fp, #-20]	; 0xffffffec
   14914:	ldr	r3, [fp, #-20]	; 0xffffffec
   14918:	ldr	r3, [r3]
   1491c:	cmp	r3, #0
   14920:	beq	14998 <flatcc_builder_custom_reset@@Base+0xc8>
   14924:	ldr	r3, [fp, #-16]
   14928:	cmp	r3, #5
   1492c:	beq	14978 <flatcc_builder_custom_reset@@Base+0xa8>
   14930:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14934:	cmp	r3, #0
   14938:	beq	14978 <flatcc_builder_custom_reset@@Base+0xa8>
   1493c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14940:	ldr	r4, [r3, #48]	; 0x30
   14944:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14948:	ldr	r0, [r3, #40]	; 0x28
   1494c:	ldr	r3, [fp, #-16]
   14950:	str	r3, [sp]
   14954:	mov	r3, #1
   14958:	mov	r2, #1
   1495c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14960:	blx	r4
   14964:	mov	r3, r0
   14968:	cmp	r3, #0
   1496c:	beq	14978 <flatcc_builder_custom_reset@@Base+0xa8>
   14970:	mvn	r3, #0
   14974:	b	14b04 <flatcc_builder_custom_reset@@Base+0x234>
   14978:	ldr	r3, [fp, #-20]	; 0xffffffec
   1497c:	ldr	r0, [r3]
   14980:	ldr	r3, [fp, #-20]	; 0xffffffec
   14984:	ldr	r3, [r3, #4]
   14988:	mov	r2, r3
   1498c:	mov	r1, #0
   14990:	bl	1203c <memset@plt>
   14994:	b	149c8 <flatcc_builder_custom_reset@@Base+0xf8>
   14998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1499c:	ldr	r3, [r3, #4]
   149a0:	cmp	r3, #0
   149a4:	beq	149c8 <flatcc_builder_custom_reset@@Base+0xf8>
   149a8:	ldr	r3, [pc, #364]	; 14b1c <flatcc_builder_custom_reset@@Base+0x24c>
   149ac:	add	r3, pc, r3
   149b0:	movw	r2, #434	; 0x1b2
   149b4:	ldr	r1, [pc, #356]	; 14b20 <flatcc_builder_custom_reset@@Base+0x250>
   149b8:	add	r1, pc, r1
   149bc:	ldr	r0, [pc, #352]	; 14b24 <flatcc_builder_custom_reset@@Base+0x254>
   149c0:	add	r0, pc, r0
   149c4:	bl	12078 <__assert_fail@plt>
   149c8:	ldr	r3, [fp, #-16]
   149cc:	add	r3, r3, #1
   149d0:	str	r3, [fp, #-16]
   149d4:	ldr	r3, [fp, #-16]
   149d8:	cmp	r3, #7
   149dc:	ble	148fc <flatcc_builder_custom_reset@@Base+0x2c>
   149e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149e4:	mov	r2, #0
   149e8:	str	r2, [r3, #120]	; 0x78
   149ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149f0:	ldr	r3, [r3, #124]	; 0x7c
   149f4:	cmp	r3, #0
   149f8:	beq	14a08 <flatcc_builder_custom_reset@@Base+0x138>
   149fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a00:	mov	r2, #16
   14a04:	str	r2, [r3, #124]	; 0x7c
   14a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a0c:	mov	r2, #0
   14a10:	strh	r2, [r3, #128]	; 0x80
   14a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a18:	mov	r2, #0
   14a1c:	str	r2, [r3, #136]	; 0x88
   14a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a24:	mov	r2, #0
   14a28:	str	r2, [r3, #140]	; 0x8c
   14a2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a30:	mov	r2, #0
   14a34:	str	r2, [r3, #156]	; 0x9c
   14a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a3c:	mov	r2, #0
   14a40:	str	r2, [r3, #160]	; 0xa0
   14a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a48:	mov	r2, #0
   14a4c:	str	r2, [r3, #20]
   14a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a54:	mov	r2, #0
   14a58:	str	r2, [r3, #24]
   14a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a60:	mov	r2, #0
   14a64:	str	r2, [r3, #148]	; 0x94
   14a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a6c:	mov	r2, #0
   14a70:	str	r2, [r3, #152]	; 0x98
   14a74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a78:	ldr	r2, [r3, #60]	; 0x3c
   14a7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a80:	str	r2, [r3, #16]
   14a84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a88:	ldr	r2, [r3, #76]	; 0x4c
   14a8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a90:	str	r2, [r3]
   14a94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a98:	ldr	r2, [r3, #52]	; 0x34
   14a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14aa0:	str	r2, [r3, #4]
   14aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14aa8:	mov	r2, #0
   14aac:	str	r2, [r3, #32]
   14ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ab4:	cmp	r3, #0
   14ab8:	beq	14ae0 <flatcc_builder_custom_reset@@Base+0x210>
   14abc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ac0:	mov	r2, #0
   14ac4:	str	r2, [r3, #172]	; 0xac
   14ac8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14acc:	mov	r2, #0
   14ad0:	str	r2, [r3, #176]	; 0xb0
   14ad4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ad8:	mov	r2, #0
   14adc:	str	r2, [r3, #180]	; 0xb4
   14ae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ae4:	ldr	r3, [r3, #184]	; 0xb8
   14ae8:	cmp	r3, #0
   14aec:	beq	14b00 <flatcc_builder_custom_reset@@Base+0x230>
   14af0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14af4:	add	r3, r3, #188	; 0xbc
   14af8:	mov	r0, r3
   14afc:	bl	1a764 <flatcc_emitter_reset@@Base>
   14b00:	mov	r3, #0
   14b04:	mov	r0, r3
   14b08:	sub	sp, fp, #8
   14b0c:	ldr	r4, [sp]
   14b10:	ldr	fp, [sp, #4]
   14b14:	add	sp, sp, #8
   14b18:	pop	{pc}		; (ldr pc, [sp], #4)
   14b1c:			; <UNDEFINED> instruction: 0x00006fbc
   14b20:	andeq	r6, r0, ip, ror #22
   14b24:	ldrdeq	r6, [r0], -r8

00014b28 <flatcc_builder_reset@@Base>:
   14b28:	str	fp, [sp, #-8]!
   14b2c:	str	lr, [sp, #4]
   14b30:	add	fp, sp, #4
   14b34:	sub	sp, sp, #8
   14b38:	str	r0, [fp, #-8]
   14b3c:	mov	r2, #0
   14b40:	mov	r1, #0
   14b44:	ldr	r0, [fp, #-8]
   14b48:	bl	148d0 <flatcc_builder_custom_reset@@Base>
   14b4c:	mov	r3, r0
   14b50:	mov	r0, r3
   14b54:	sub	sp, fp, #4
   14b58:	ldr	fp, [sp]
   14b5c:	add	sp, sp, #4
   14b60:	pop	{pc}		; (ldr pc, [sp], #4)

00014b64 <flatcc_builder_clear@@Base>:
   14b64:	str	r4, [sp, #-12]!
   14b68:	str	fp, [sp, #4]
   14b6c:	str	lr, [sp, #8]
   14b70:	add	fp, sp, #8
   14b74:	sub	sp, sp, #28
   14b78:	str	r0, [fp, #-24]	; 0xffffffe8
   14b7c:	mov	r3, #0
   14b80:	str	r3, [fp, #-16]
   14b84:	b	14bd4 <flatcc_builder_clear@@Base+0x70>
   14b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b8c:	add	r2, r3, #52	; 0x34
   14b90:	ldr	r3, [fp, #-16]
   14b94:	lsl	r3, r3, #3
   14b98:	add	r3, r2, r3
   14b9c:	str	r3, [fp, #-20]	; 0xffffffec
   14ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ba4:	ldr	r4, [r3, #48]	; 0x30
   14ba8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bac:	ldr	r0, [r3, #40]	; 0x28
   14bb0:	ldr	r3, [fp, #-16]
   14bb4:	str	r3, [sp]
   14bb8:	mov	r3, #0
   14bbc:	mov	r2, #0
   14bc0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bc4:	blx	r4
   14bc8:	ldr	r3, [fp, #-16]
   14bcc:	add	r3, r3, #1
   14bd0:	str	r3, [fp, #-16]
   14bd4:	ldr	r3, [fp, #-16]
   14bd8:	cmp	r3, #7
   14bdc:	ble	14b88 <flatcc_builder_clear@@Base+0x24>
   14be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14be4:	ldr	r3, [r3, #184]	; 0xb8
   14be8:	cmp	r3, #0
   14bec:	beq	14c00 <flatcc_builder_clear@@Base+0x9c>
   14bf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bf4:	add	r3, r3, #188	; 0xbc
   14bf8:	mov	r0, r3
   14bfc:	bl	1a900 <flatcc_emitter_clear@@Base>
   14c00:	mov	r2, #232	; 0xe8
   14c04:	mov	r1, #0
   14c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c0c:	bl	1203c <memset@plt>
   14c10:	nop	{0}
   14c14:	sub	sp, fp, #8
   14c18:	ldr	r4, [sp]
   14c1c:	ldr	fp, [sp, #4]
   14c20:	add	sp, sp, #8
   14c24:	pop	{pc}		; (ldr pc, [sp], #4)
   14c28:	push	{fp}		; (str fp, [sp, #-4]!)
   14c2c:	add	fp, sp, #0
   14c30:	sub	sp, sp, #12
   14c34:	str	r0, [fp, #-8]
   14c38:	mov	r3, r1
   14c3c:	strh	r3, [fp, #-10]
   14c40:	ldr	r3, [fp, #-8]
   14c44:	ldrh	r3, [r3, #128]	; 0x80
   14c48:	ldrh	r2, [fp, #-10]
   14c4c:	cmp	r2, r3
   14c50:	bls	14c60 <flatcc_builder_clear@@Base+0xfc>
   14c54:	ldr	r3, [fp, #-8]
   14c58:	ldrh	r2, [fp, #-10]
   14c5c:	strh	r2, [r3, #128]	; 0x80
   14c60:	nop	{0}
   14c64:	add	sp, fp, #0
   14c68:	pop	{fp}		; (ldr fp, [sp], #4)
   14c6c:	bx	lr
   14c70:	push	{fp}		; (str fp, [sp, #-4]!)
   14c74:	add	fp, sp, #0
   14c78:	sub	sp, sp, #12
   14c7c:	str	r0, [fp, #-8]
   14c80:	mov	r3, r1
   14c84:	strh	r3, [fp, #-10]
   14c88:	ldr	r3, [fp, #-8]
   14c8c:	ldrh	r3, [r3]
   14c90:	ldrh	r2, [fp, #-10]
   14c94:	cmp	r2, r3
   14c98:	bls	14ca8 <flatcc_builder_clear@@Base+0x144>
   14c9c:	ldr	r3, [fp, #-8]
   14ca0:	ldrh	r2, [fp, #-10]
   14ca4:	strh	r2, [r3]
   14ca8:	nop	{0}
   14cac:	add	sp, fp, #0
   14cb0:	pop	{fp}		; (ldr fp, [sp], #4)
   14cb4:	bx	lr

00014cb8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14cb8:	str	fp, [sp, #-8]!
   14cbc:	str	lr, [sp, #4]
   14cc0:	add	fp, sp, #4
   14cc4:	sub	sp, sp, #24
   14cc8:	str	r0, [fp, #-16]
   14ccc:	str	r1, [fp, #-20]	; 0xffffffec
   14cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cd4:	add	r3, r3, #3
   14cd8:	bic	r3, r3, #3
   14cdc:	add	r3, r3, #4
   14ce0:	str	r3, [fp, #-20]	; 0xffffffec
   14ce4:	ldr	r3, [fp, #-16]
   14ce8:	ldr	r2, [r3, #228]	; 0xe4
   14cec:	mov	r3, #0
   14cf0:	str	r3, [sp]
   14cf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cf8:	mov	r1, #7
   14cfc:	ldr	r0, [fp, #-16]
   14d00:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   14d04:	str	r0, [fp, #-8]
   14d08:	ldr	r3, [fp, #-8]
   14d0c:	cmp	r3, #0
   14d10:	bne	14d1c <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   14d14:	mov	r3, #0
   14d18:	b	14d74 <flatcc_builder_enter_user_frame_ptr@@Base+0xbc>
   14d1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d20:	mov	r1, #0
   14d24:	ldr	r0, [fp, #-8]
   14d28:	bl	1203c <memset@plt>
   14d2c:	ldr	r3, [fp, #-8]
   14d30:	add	r2, r3, #4
   14d34:	str	r2, [fp, #-8]
   14d38:	ldr	r2, [fp, #-16]
   14d3c:	ldr	r2, [r2, #224]	; 0xe0
   14d40:	str	r2, [r3]
   14d44:	ldr	r3, [fp, #-16]
   14d48:	ldr	r3, [r3, #228]	; 0xe4
   14d4c:	add	r2, r3, #4
   14d50:	ldr	r3, [fp, #-16]
   14d54:	str	r2, [r3, #224]	; 0xe0
   14d58:	ldr	r3, [fp, #-16]
   14d5c:	ldr	r2, [r3, #228]	; 0xe4
   14d60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d64:	add	r2, r2, r3
   14d68:	ldr	r3, [fp, #-16]
   14d6c:	str	r2, [r3, #228]	; 0xe4
   14d70:	ldr	r3, [fp, #-8]
   14d74:	mov	r0, r3
   14d78:	sub	sp, fp, #4
   14d7c:	ldr	fp, [sp]
   14d80:	add	sp, sp, #4
   14d84:	pop	{pc}		; (ldr pc, [sp], #4)

00014d88 <flatcc_builder_enter_user_frame@@Base>:
   14d88:	str	fp, [sp, #-8]!
   14d8c:	str	lr, [sp, #4]
   14d90:	add	fp, sp, #4
   14d94:	sub	sp, sp, #24
   14d98:	str	r0, [fp, #-16]
   14d9c:	str	r1, [fp, #-20]	; 0xffffffec
   14da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14da4:	add	r3, r3, #3
   14da8:	bic	r3, r3, #3
   14dac:	add	r3, r3, #4
   14db0:	str	r3, [fp, #-20]	; 0xffffffec
   14db4:	ldr	r3, [fp, #-16]
   14db8:	ldr	r2, [r3, #228]	; 0xe4
   14dbc:	mov	r3, #0
   14dc0:	str	r3, [sp]
   14dc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14dc8:	mov	r1, #7
   14dcc:	ldr	r0, [fp, #-16]
   14dd0:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   14dd4:	str	r0, [fp, #-8]
   14dd8:	ldr	r3, [fp, #-8]
   14ddc:	cmp	r3, #0
   14de0:	bne	14dec <flatcc_builder_enter_user_frame@@Base+0x64>
   14de4:	mov	r3, #0
   14de8:	b	14e48 <flatcc_builder_enter_user_frame@@Base+0xc0>
   14dec:	ldr	r2, [fp, #-20]	; 0xffffffec
   14df0:	mov	r1, #0
   14df4:	ldr	r0, [fp, #-8]
   14df8:	bl	1203c <memset@plt>
   14dfc:	ldr	r3, [fp, #-8]
   14e00:	add	r2, r3, #4
   14e04:	str	r2, [fp, #-8]
   14e08:	ldr	r2, [fp, #-16]
   14e0c:	ldr	r2, [r2, #224]	; 0xe0
   14e10:	str	r2, [r3]
   14e14:	ldr	r3, [fp, #-16]
   14e18:	ldr	r3, [r3, #228]	; 0xe4
   14e1c:	add	r2, r3, #4
   14e20:	ldr	r3, [fp, #-16]
   14e24:	str	r2, [r3, #224]	; 0xe0
   14e28:	ldr	r3, [fp, #-16]
   14e2c:	ldr	r2, [r3, #228]	; 0xe4
   14e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e34:	add	r2, r2, r3
   14e38:	ldr	r3, [fp, #-16]
   14e3c:	str	r2, [r3, #228]	; 0xe4
   14e40:	ldr	r3, [fp, #-16]
   14e44:	ldr	r3, [r3, #224]	; 0xe0
   14e48:	mov	r0, r3
   14e4c:	sub	sp, fp, #4
   14e50:	ldr	fp, [sp]
   14e54:	add	sp, sp, #4
   14e58:	pop	{pc}		; (ldr pc, [sp], #4)

00014e5c <flatcc_builder_exit_user_frame@@Base>:
   14e5c:	str	fp, [sp, #-8]!
   14e60:	str	lr, [sp, #4]
   14e64:	add	fp, sp, #4
   14e68:	sub	sp, sp, #16
   14e6c:	str	r0, [fp, #-16]
   14e70:	ldr	r3, [fp, #-16]
   14e74:	ldr	r3, [r3, #224]	; 0xe0
   14e78:	cmp	r3, #0
   14e7c:	bne	14ea0 <flatcc_builder_exit_user_frame@@Base+0x44>
   14e80:	ldr	r3, [pc, #112]	; 14ef8 <flatcc_builder_exit_user_frame@@Base+0x9c>
   14e84:	add	r3, pc, r3
   14e88:	movw	r2, #542	; 0x21e
   14e8c:	ldr	r1, [pc, #104]	; 14efc <flatcc_builder_exit_user_frame@@Base+0xa0>
   14e90:	add	r1, pc, r1
   14e94:	ldr	r0, [pc, #100]	; 14f00 <flatcc_builder_exit_user_frame@@Base+0xa4>
   14e98:	add	r0, pc, r0
   14e9c:	bl	12078 <__assert_fail@plt>
   14ea0:	ldr	r3, [fp, #-16]
   14ea4:	ldr	r2, [r3, #108]	; 0x6c
   14ea8:	ldr	r3, [fp, #-16]
   14eac:	ldr	r3, [r3, #224]	; 0xe0
   14eb0:	add	r3, r2, r3
   14eb4:	str	r3, [fp, #-8]
   14eb8:	ldr	r3, [fp, #-16]
   14ebc:	ldr	r3, [r3, #224]	; 0xe0
   14ec0:	sub	r2, r3, #4
   14ec4:	ldr	r3, [fp, #-16]
   14ec8:	str	r2, [r3, #228]	; 0xe4
   14ecc:	ldr	r3, [fp, #-8]
   14ed0:	ldr	r2, [r3, #-4]
   14ed4:	ldr	r3, [fp, #-16]
   14ed8:	str	r2, [r3, #224]	; 0xe0
   14edc:	ldr	r3, [fp, #-16]
   14ee0:	ldr	r3, [r3, #224]	; 0xe0
   14ee4:	mov	r0, r3
   14ee8:	sub	sp, fp, #4
   14eec:	ldr	fp, [sp]
   14ef0:	add	sp, sp, #4
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	andeq	r6, r0, r0, lsl #22
   14efc:	muleq	r0, r4, r6
   14f00:	andeq	r6, r0, r4, lsl r7

00014f04 <flatcc_builder_exit_user_frame_at@@Base>:
   14f04:	str	fp, [sp, #-8]!
   14f08:	str	lr, [sp, #4]
   14f0c:	add	fp, sp, #4
   14f10:	sub	sp, sp, #8
   14f14:	str	r0, [fp, #-8]
   14f18:	str	r1, [fp, #-12]
   14f1c:	ldr	r3, [fp, #-8]
   14f20:	ldr	r3, [r3, #224]	; 0xe0
   14f24:	ldr	r2, [fp, #-12]
   14f28:	cmp	r2, r3
   14f2c:	bls	14f50 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   14f30:	ldr	r3, [pc, #68]	; 14f7c <flatcc_builder_exit_user_frame_at@@Base+0x78>
   14f34:	add	r3, pc, r3
   14f38:	movw	r2, #551	; 0x227
   14f3c:	ldr	r1, [pc, #60]	; 14f80 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   14f40:	add	r1, pc, r1
   14f44:	ldr	r0, [pc, #56]	; 14f84 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   14f48:	add	r0, pc, r0
   14f4c:	bl	12078 <__assert_fail@plt>
   14f50:	ldr	r3, [fp, #-8]
   14f54:	ldr	r2, [fp, #-12]
   14f58:	str	r2, [r3, #224]	; 0xe0
   14f5c:	ldr	r0, [fp, #-8]
   14f60:	bl	14e5c <flatcc_builder_exit_user_frame@@Base>
   14f64:	mov	r3, r0
   14f68:	mov	r0, r3
   14f6c:	sub	sp, fp, #4
   14f70:	ldr	fp, [sp]
   14f74:	add	sp, sp, #4
   14f78:	pop	{pc}		; (ldr pc, [sp], #4)
   14f7c:	andeq	r6, r0, r0, ror sl
   14f80:	andeq	r6, r0, r4, ror #11
   14f84:	andeq	r6, r0, r0, lsl #13

00014f88 <flatcc_builder_get_current_user_frame@@Base>:
   14f88:	push	{fp}		; (str fp, [sp, #-4]!)
   14f8c:	add	fp, sp, #0
   14f90:	sub	sp, sp, #12
   14f94:	str	r0, [fp, #-8]
   14f98:	ldr	r3, [fp, #-8]
   14f9c:	ldr	r3, [r3, #224]	; 0xe0
   14fa0:	mov	r0, r3
   14fa4:	add	sp, fp, #0
   14fa8:	pop	{fp}		; (ldr fp, [sp], #4)
   14fac:	bx	lr

00014fb0 <flatcc_builder_get_user_frame_ptr@@Base>:
   14fb0:	push	{fp}		; (str fp, [sp, #-4]!)
   14fb4:	add	fp, sp, #0
   14fb8:	sub	sp, sp, #12
   14fbc:	str	r0, [fp, #-8]
   14fc0:	str	r1, [fp, #-12]
   14fc4:	ldr	r3, [fp, #-8]
   14fc8:	ldr	r2, [r3, #108]	; 0x6c
   14fcc:	ldr	r3, [fp, #-12]
   14fd0:	add	r3, r2, r3
   14fd4:	mov	r0, r3
   14fd8:	add	sp, fp, #0
   14fdc:	pop	{fp}		; (ldr fp, [sp], #4)
   14fe0:	bx	lr
   14fe4:	str	fp, [sp, #-8]!
   14fe8:	str	lr, [sp, #4]
   14fec:	add	fp, sp, #4
   14ff0:	sub	sp, sp, #16
   14ff4:	str	r0, [fp, #-8]
   14ff8:	mov	r3, r1
   14ffc:	strh	r3, [fp, #-10]
   15000:	ldr	r3, [fp, #-8]
   15004:	ldr	r3, [r3, #156]	; 0x9c
   15008:	add	r2, r3, #1
   1500c:	ldr	r3, [fp, #-8]
   15010:	str	r2, [r3, #156]	; 0x9c
   15014:	ldr	r3, [fp, #-8]
   15018:	ldr	r2, [r3, #156]	; 0x9c
   1501c:	ldr	r3, [fp, #-8]
   15020:	ldr	r3, [r3, #160]	; 0xa0
   15024:	cmp	r2, r3
   15028:	ble	1511c <flatcc_builder_get_user_frame_ptr@@Base+0x16c>
   1502c:	ldr	r3, [fp, #-8]
   15030:	ldr	r3, [r3, #176]	; 0xb0
   15034:	cmp	r3, #0
   15038:	ble	1505c <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   1503c:	ldr	r3, [fp, #-8]
   15040:	ldr	r2, [r3, #156]	; 0x9c
   15044:	ldr	r3, [fp, #-8]
   15048:	ldr	r3, [r3, #176]	; 0xb0
   1504c:	cmp	r2, r3
   15050:	ble	1505c <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   15054:	mvn	r3, #0
   15058:	b	151bc <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   1505c:	ldr	r3, [fp, #-8]
   15060:	ldr	r3, [r3, #156]	; 0x9c
   15064:	sub	r3, r3, #1
   15068:	mov	r2, r3
   1506c:	mov	r3, r2
   15070:	lsl	r3, r3, #3
   15074:	add	r3, r3, r2
   15078:	lsl	r3, r3, #2
   1507c:	mov	r2, r3
   15080:	mov	r3, #0
   15084:	str	r3, [sp]
   15088:	mov	r3, #36	; 0x24
   1508c:	mov	r1, #4
   15090:	ldr	r0, [fp, #-8]
   15094:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   15098:	mov	r2, r0
   1509c:	ldr	r3, [fp, #-8]
   150a0:	str	r2, [r3, #32]
   150a4:	ldr	r3, [fp, #-8]
   150a8:	ldr	r3, [r3, #32]
   150ac:	cmp	r3, #0
   150b0:	bne	150bc <flatcc_builder_get_user_frame_ptr@@Base+0x10c>
   150b4:	mvn	r3, #0
   150b8:	b	151bc <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   150bc:	ldr	r3, [fp, #-8]
   150c0:	ldr	r2, [r3, #88]	; 0x58
   150c4:	movw	r3, #36409	; 0x8e39
   150c8:	movt	r3, #14563	; 0x38e3
   150cc:	umull	r2, r3, r3, r2
   150d0:	lsr	r3, r3, #3
   150d4:	mov	r2, r3
   150d8:	ldr	r3, [fp, #-8]
   150dc:	str	r2, [r3, #160]	; 0xa0
   150e0:	ldr	r3, [fp, #-8]
   150e4:	ldr	r3, [r3, #176]	; 0xb0
   150e8:	cmp	r3, #0
   150ec:	ble	15130 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   150f0:	ldr	r3, [fp, #-8]
   150f4:	ldr	r2, [r3, #176]	; 0xb0
   150f8:	ldr	r3, [fp, #-8]
   150fc:	ldr	r3, [r3, #160]	; 0xa0
   15100:	cmp	r2, r3
   15104:	bge	15130 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   15108:	ldr	r3, [fp, #-8]
   1510c:	ldr	r2, [r3, #176]	; 0xb0
   15110:	ldr	r3, [fp, #-8]
   15114:	str	r2, [r3, #160]	; 0xa0
   15118:	b	15130 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   1511c:	ldr	r3, [fp, #-8]
   15120:	ldr	r3, [r3, #32]
   15124:	add	r2, r3, #36	; 0x24
   15128:	ldr	r3, [fp, #-8]
   1512c:	str	r2, [r3, #32]
   15130:	ldr	r3, [fp, #-8]
   15134:	ldr	r3, [r3, #32]
   15138:	ldr	r2, [fp, #-8]
   1513c:	ldr	r2, [r2, #20]
   15140:	str	r2, [r3, #8]
   15144:	ldr	r3, [fp, #-8]
   15148:	ldr	r3, [r3, #32]
   1514c:	ldr	r2, [fp, #-8]
   15150:	ldrh	r2, [r2, #130]	; 0x82
   15154:	strh	r2, [r3, #12]
   15158:	ldr	r3, [fp, #-8]
   1515c:	ldrh	r2, [fp, #-10]
   15160:	strh	r2, [r3, #130]	; 0x82
   15164:	ldr	r3, [fp, #-8]
   15168:	ldr	r3, [r3, #32]
   1516c:	ldr	r2, [fp, #-8]
   15170:	ldr	r2, [r2, #28]
   15174:	str	r2, [r3]
   15178:	ldr	r3, [fp, #-8]
   1517c:	ldr	r3, [r3, #32]
   15180:	mvn	r2, #3
   15184:	str	r2, [r3, #4]
   15188:	ldr	r3, [fp, #-8]
   1518c:	ldr	r2, [r3, #28]
   15190:	ldr	r3, [fp, #-8]
   15194:	ldr	r3, [r3, #20]
   15198:	add	r3, r2, r3
   1519c:	add	r3, r3, #7
   151a0:	bic	r2, r3, #7
   151a4:	ldr	r3, [fp, #-8]
   151a8:	str	r2, [r3, #28]
   151ac:	ldr	r3, [fp, #-8]
   151b0:	mov	r2, #0
   151b4:	str	r2, [r3, #20]
   151b8:	mov	r3, #0
   151bc:	mov	r0, r3
   151c0:	sub	sp, fp, #4
   151c4:	ldr	fp, [sp]
   151c8:	add	sp, sp, #4
   151cc:	pop	{pc}		; (ldr pc, [sp], #4)
   151d0:	str	fp, [sp, #-8]!
   151d4:	str	lr, [sp, #4]
   151d8:	add	fp, sp, #4
   151dc:	sub	sp, sp, #8
   151e0:	str	r0, [fp, #-8]
   151e4:	ldr	r3, [fp, #-8]
   151e8:	ldr	r0, [r3, #16]
   151ec:	ldr	r3, [fp, #-8]
   151f0:	ldr	r3, [r3, #20]
   151f4:	mov	r2, r3
   151f8:	mov	r1, #0
   151fc:	bl	1203c <memset@plt>
   15200:	ldr	r3, [fp, #-8]
   15204:	ldr	r3, [r3, #32]
   15208:	ldr	r2, [r3, #8]
   1520c:	ldr	r3, [fp, #-8]
   15210:	str	r2, [r3, #20]
   15214:	ldr	r3, [fp, #-8]
   15218:	ldr	r3, [r3, #32]
   1521c:	ldr	r2, [r3]
   15220:	ldr	r3, [fp, #-8]
   15224:	str	r2, [r3, #28]
   15228:	ldr	r3, [fp, #-8]
   1522c:	ldr	r3, [r3, #32]
   15230:	ldr	r3, [r3, #4]
   15234:	mov	r1, r3
   15238:	ldr	r0, [fp, #-8]
   1523c:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   15240:	ldr	r3, [fp, #-8]
   15244:	ldrh	r3, [r3, #130]	; 0x82
   15248:	mov	r1, r3
   1524c:	ldr	r0, [fp, #-8]
   15250:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   15254:	ldr	r3, [fp, #-8]
   15258:	ldr	r3, [r3, #32]
   1525c:	ldrh	r2, [r3, #12]
   15260:	ldr	r3, [fp, #-8]
   15264:	strh	r2, [r3, #130]	; 0x82
   15268:	ldr	r3, [fp, #-8]
   1526c:	ldr	r3, [r3, #32]
   15270:	sub	r2, r3, #36	; 0x24
   15274:	ldr	r3, [fp, #-8]
   15278:	str	r2, [r3, #32]
   1527c:	ldr	r3, [fp, #-8]
   15280:	ldr	r3, [r3, #156]	; 0x9c
   15284:	sub	r2, r3, #1
   15288:	ldr	r3, [fp, #-8]
   1528c:	str	r2, [r3, #156]	; 0x9c
   15290:	nop	{0}
   15294:	sub	sp, fp, #4
   15298:	ldr	fp, [sp]
   1529c:	add	sp, sp, #4
   152a0:	pop	{pc}		; (ldr pc, [sp], #4)
   152a4:	push	{fp}		; (str fp, [sp, #-4]!)
   152a8:	add	fp, sp, #0
   152ac:	sub	sp, sp, #20
   152b0:	str	r0, [fp, #-8]
   152b4:	str	r1, [fp, #-12]
   152b8:	mov	r3, r2
   152bc:	strh	r3, [fp, #-14]
   152c0:	ldr	r3, [fp, #-8]
   152c4:	ldr	r3, [r3, #136]	; 0x88
   152c8:	mov	r2, r3
   152cc:	ldr	r3, [fp, #-12]
   152d0:	sub	r3, r2, r3
   152d4:	ldrh	r2, [fp, #-14]
   152d8:	sub	r2, r2, #1
   152dc:	and	r3, r3, r2
   152e0:	mov	r0, r3
   152e4:	add	sp, fp, #0
   152e8:	pop	{fp}		; (ldr fp, [sp], #4)
   152ec:	bx	lr
   152f0:	push	{fp}		; (str fp, [sp, #-4]!)
   152f4:	add	fp, sp, #0
   152f8:	sub	sp, sp, #12
   152fc:	str	r0, [fp, #-8]
   15300:	mov	r3, r1
   15304:	strh	r3, [fp, #-10]
   15308:	ldr	r3, [fp, #-8]
   1530c:	ldr	r2, [r3, #140]	; 0x8c
   15310:	ldrh	r3, [fp, #-10]
   15314:	sub	r3, r3, #1
   15318:	and	r3, r3, r2
   1531c:	mov	r0, r3
   15320:	add	sp, fp, #0
   15324:	pop	{fp}		; (ldr fp, [sp], #4)
   15328:	bx	lr
   1532c:	str	r4, [sp, #-12]!
   15330:	str	fp, [sp, #4]
   15334:	str	lr, [sp, #8]
   15338:	add	fp, sp, #8
   1533c:	sub	sp, sp, #28
   15340:	str	r0, [fp, #-24]	; 0xffffffe8
   15344:	str	r1, [fp, #-28]	; 0xffffffe4
   15348:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1534c:	ldr	r3, [r3, #136]	; 0x88
   15350:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15354:	ldr	r2, [r2]
   15358:	sub	r3, r3, r2
   1535c:	str	r3, [fp, #-16]
   15360:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15364:	ldr	r3, [r3, #136]	; 0x88
   15368:	ldr	r2, [fp, #-16]
   1536c:	cmp	r2, r3
   15370:	blt	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x3e4>
   15374:	ldr	r3, [pc, #164]	; 15420 <flatcc_builder_get_user_frame_ptr@@Base+0x470>
   15378:	add	r3, pc, r3
   1537c:	movw	r2, #647	; 0x287
   15380:	ldr	r1, [pc, #156]	; 15424 <flatcc_builder_get_user_frame_ptr@@Base+0x474>
   15384:	add	r1, pc, r1
   15388:	ldr	r0, [pc, #152]	; 15428 <flatcc_builder_get_user_frame_ptr@@Base+0x478>
   1538c:	add	r0, pc, r0
   15390:	bl	12078 <__assert_fail@plt>
   15394:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15398:	ldr	r4, [r3, #44]	; 0x2c
   1539c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153a0:	ldr	r0, [r3, #36]	; 0x24
   153a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153a8:	add	r1, r3, #8
   153ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153b0:	ldr	r2, [r3, #4]
   153b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153b8:	ldr	r3, [r3]
   153bc:	str	r3, [sp]
   153c0:	ldr	r3, [fp, #-16]
   153c4:	blx	r4
   153c8:	mov	r3, r0
   153cc:	cmp	r3, #0
   153d0:	beq	153f4 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   153d4:	ldr	r3, [pc, #80]	; 1542c <flatcc_builder_get_user_frame_ptr@@Base+0x47c>
   153d8:	add	r3, pc, r3
   153dc:	movw	r2, #651	; 0x28b
   153e0:	ldr	r1, [pc, #72]	; 15430 <flatcc_builder_get_user_frame_ptr@@Base+0x480>
   153e4:	add	r1, pc, r1
   153e8:	ldr	r0, [pc, #68]	; 15434 <flatcc_builder_get_user_frame_ptr@@Base+0x484>
   153ec:	add	r0, pc, r0
   153f0:	bl	12078 <__assert_fail@plt>
   153f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153f8:	ldr	r2, [fp, #-16]
   153fc:	str	r2, [r3, #136]	; 0x88
   15400:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15404:	ldr	r3, [r3, #136]	; 0x88
   15408:	mov	r0, r3
   1540c:	sub	sp, fp, #8
   15410:	ldr	r4, [sp]
   15414:	ldr	fp, [sp, #4]
   15418:	add	sp, sp, #8
   1541c:	pop	{pc}		; (ldr pc, [sp], #4)
   15420:	andeq	r6, r0, ip, ror #12
   15424:	andeq	r6, r0, r0, lsr #3
   15428:	strdeq	r6, [r0], -r8
   1542c:	andeq	r6, r0, ip, lsl #12
   15430:	andeq	r6, r0, r0, asr #2
   15434:	muleq	r0, r8, r1
   15438:	str	r4, [sp, #-12]!
   1543c:	str	fp, [sp, #4]
   15440:	str	lr, [sp, #8]
   15444:	add	fp, sp, #8
   15448:	sub	sp, sp, #28
   1544c:	str	r0, [fp, #-24]	; 0xffffffe8
   15450:	str	r1, [fp, #-28]	; 0xffffffe4
   15454:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15458:	ldr	r3, [r3, #140]	; 0x8c
   1545c:	str	r3, [fp, #-16]
   15460:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15464:	ldr	r3, [r3]
   15468:	mov	r2, r3
   1546c:	ldr	r3, [fp, #-16]
   15470:	add	r2, r2, r3
   15474:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15478:	str	r2, [r3, #140]	; 0x8c
   1547c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15480:	ldr	r3, [r3, #140]	; 0x8c
   15484:	ldr	r2, [fp, #-16]
   15488:	cmp	r2, r3
   1548c:	ble	154b0 <flatcc_builder_get_user_frame_ptr@@Base+0x500>
   15490:	ldr	r3, [pc, #152]	; 15530 <flatcc_builder_get_user_frame_ptr@@Base+0x580>
   15494:	add	r3, pc, r3
   15498:	movw	r2, #673	; 0x2a1
   1549c:	ldr	r1, [pc, #144]	; 15534 <flatcc_builder_get_user_frame_ptr@@Base+0x584>
   154a0:	add	r1, pc, r1
   154a4:	ldr	r0, [pc, #140]	; 15538 <flatcc_builder_get_user_frame_ptr@@Base+0x588>
   154a8:	add	r0, pc, r0
   154ac:	bl	12078 <__assert_fail@plt>
   154b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154b4:	ldr	r4, [r3, #44]	; 0x2c
   154b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154bc:	ldr	r0, [r3, #36]	; 0x24
   154c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154c4:	add	r1, r3, #8
   154c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154cc:	ldr	r2, [r3, #4]
   154d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154d4:	ldr	r3, [r3]
   154d8:	str	r3, [sp]
   154dc:	ldr	r3, [fp, #-16]
   154e0:	blx	r4
   154e4:	mov	r3, r0
   154e8:	cmp	r3, #0
   154ec:	beq	15510 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   154f0:	ldr	r3, [pc, #68]	; 1553c <flatcc_builder_get_user_frame_ptr@@Base+0x58c>
   154f4:	add	r3, pc, r3
   154f8:	movw	r2, #677	; 0x2a5
   154fc:	ldr	r1, [pc, #60]	; 15540 <flatcc_builder_get_user_frame_ptr@@Base+0x590>
   15500:	add	r1, pc, r1
   15504:	ldr	r0, [pc, #56]	; 15544 <flatcc_builder_get_user_frame_ptr@@Base+0x594>
   15508:	add	r0, pc, r0
   1550c:	bl	12078 <__assert_fail@plt>
   15510:	ldr	r3, [fp, #-16]
   15514:	add	r3, r3, #1
   15518:	mov	r0, r3
   1551c:	sub	sp, fp, #8
   15520:	ldr	r4, [sp]
   15524:	ldr	fp, [sp, #4]
   15528:	add	sp, sp, #8
   1552c:	pop	{pc}		; (ldr pc, [sp], #4)
   15530:	andeq	r6, r0, r4, asr #10
   15534:	andeq	r6, r0, r4, lsl #1
   15538:	ldrdeq	r6, [r0], -ip
   1553c:	andeq	r6, r0, r4, ror #9
   15540:	andeq	r6, r0, r4, lsr #32
   15544:	andeq	r6, r0, ip, ror r0
   15548:	str	r4, [sp, #-12]!
   1554c:	str	fp, [sp, #4]
   15550:	str	lr, [sp, #8]
   15554:	add	fp, sp, #8
   15558:	sub	sp, sp, #100	; 0x64
   1555c:	str	r0, [fp, #-96]	; 0xffffffa0
   15560:	str	r1, [fp, #-100]	; 0xffffff9c
   15564:	str	r3, [fp, #-108]	; 0xffffff94
   15568:	mov	r3, r2
   1556c:	strh	r3, [fp, #-102]	; 0xffffff9a
   15570:	ldr	r4, [pc, #332]	; 156c4 <flatcc_builder_get_user_frame_ptr@@Base+0x714>
   15574:	add	r4, pc, r4
   15578:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   1557c:	cmp	r3, #0
   15580:	bne	155a8 <flatcc_builder_get_user_frame_ptr@@Base+0x5f8>
   15584:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15588:	ldrh	r3, [r3, #132]	; 0x84
   1558c:	cmp	r3, #0
   15590:	beq	155a0 <flatcc_builder_get_user_frame_ptr@@Base+0x5f0>
   15594:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15598:	ldrh	r3, [r3, #132]	; 0x84
   1559c:	b	155ac <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   155a0:	mov	r3, #1
   155a4:	b	155ac <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   155a8:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155ac:	strh	r3, [fp, #-102]	; 0xffffff9a
   155b0:	mov	r1, #4
   155b4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   155b8:	bl	14c70 <flatcc_builder_clear@@Base+0x10c>
   155bc:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155c0:	mov	r1, r3
   155c4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   155c8:	bl	14c70 <flatcc_builder_clear@@Base+0x10c>
   155cc:	ldr	r3, [fp, #-108]	; 0xffffff94
   155d0:	cmp	r3, #0
   155d4:	bne	156a8 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   155d8:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155dc:	mov	r1, r3
   155e0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   155e4:	bl	152f0 <flatcc_builder_get_user_frame_ptr@@Base+0x340>
   155e8:	str	r0, [fp, #-16]
   155ec:	ldr	r3, [fp, #-16]
   155f0:	cmp	r3, #0
   155f4:	beq	156a8 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   155f8:	mov	r3, #0
   155fc:	str	r3, [fp, #-88]	; 0xffffffa8
   15600:	mov	r3, #0
   15604:	str	r3, [fp, #-84]	; 0xffffffac
   15608:	ldr	r3, [fp, #-16]
   1560c:	cmp	r3, #0
   15610:	beq	1566c <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   15614:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15618:	ldr	r3, [fp, #-16]
   1561c:	add	r3, r2, r3
   15620:	str	r3, [fp, #-88]	; 0xffffffa8
   15624:	ldr	r3, [fp, #-84]	; 0xffffffac
   15628:	add	r3, r3, #1
   1562c:	lsl	r3, r3, #3
   15630:	sub	r2, fp, #12
   15634:	add	r3, r2, r3
   15638:	ldr	r2, [pc, #136]	; 156c8 <flatcc_builder_get_user_frame_ptr@@Base+0x718>
   1563c:	ldr	r2, [r4, r2]
   15640:	str	r2, [r3, #-76]	; 0xffffffb4
   15644:	ldr	r3, [fp, #-84]	; 0xffffffac
   15648:	add	r3, r3, #1
   1564c:	lsl	r3, r3, #3
   15650:	sub	r2, fp, #12
   15654:	add	r3, r2, r3
   15658:	ldr	r2, [fp, #-16]
   1565c:	str	r2, [r3, #-72]	; 0xffffffb8
   15660:	ldr	r3, [fp, #-84]	; 0xffffffac
   15664:	add	r3, r3, #1
   15668:	str	r3, [fp, #-84]	; 0xffffffac
   1566c:	sub	r3, fp, #88	; 0x58
   15670:	mov	r1, r3
   15674:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15678:	bl	15438 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   1567c:	mov	r3, r0
   15680:	cmp	r3, #0
   15684:	bne	156a8 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   15688:	ldr	r3, [pc, #60]	; 156cc <flatcc_builder_get_user_frame_ptr@@Base+0x71c>
   1568c:	add	r3, pc, r3
   15690:	movw	r2, #702	; 0x2be
   15694:	ldr	r1, [pc, #52]	; 156d0 <flatcc_builder_get_user_frame_ptr@@Base+0x720>
   15698:	add	r1, pc, r1
   1569c:	ldr	r0, [pc, #48]	; 156d4 <flatcc_builder_get_user_frame_ptr@@Base+0x724>
   156a0:	add	r0, pc, r0
   156a4:	bl	12078 <__assert_fail@plt>
   156a8:	mov	r3, #0
   156ac:	mov	r0, r3
   156b0:	sub	sp, fp, #8
   156b4:	ldr	r4, [sp]
   156b8:	ldr	fp, [sp, #4]
   156bc:	add	sp, sp, #8
   156c0:	pop	{pc}		; (ldr pc, [sp], #4)
   156c4:	andeq	r6, r1, r4, lsl #21
   156c8:	andeq	r0, r0, r0, rrx
   156cc:	andeq	r6, r0, ip, lsr r3
   156d0:	andeq	r5, r0, ip, lsl #29
   156d4:	andeq	r5, r0, r4, ror #29

000156d8 <flatcc_builder_embed_buffer@@Base>:
   156d8:	str	r4, [sp, #-12]!
   156dc:	str	fp, [sp, #4]
   156e0:	str	lr, [sp, #8]
   156e4:	add	fp, sp, #8
   156e8:	sub	sp, sp, #108	; 0x6c
   156ec:	str	r0, [fp, #-104]	; 0xffffff98
   156f0:	str	r2, [fp, #-112]	; 0xffffff90
   156f4:	str	r3, [fp, #-116]	; 0xffffff8c
   156f8:	mov	r3, r1
   156fc:	strh	r3, [fp, #-106]	; 0xffffff96
   15700:	ldr	r4, [pc, #504]	; 15900 <flatcc_builder_embed_buffer@@Base+0x228>
   15704:	add	r4, pc, r4
   15708:	ldr	r3, [fp, #8]
   1570c:	and	r3, r3, #2
   15710:	str	r3, [fp, #-16]
   15714:	ldr	r3, [fp, #-104]	; 0xffffff98
   15718:	ldr	r3, [r3, #152]	; 0x98
   1571c:	cmp	r3, #0
   15720:	movne	r3, #1
   15724:	moveq	r3, #0
   15728:	uxtb	r3, r3
   1572c:	ldrh	r2, [fp, #-106]	; 0xffffff96
   15730:	add	r1, fp, #4
   15734:	ldr	r0, [fp, #-104]	; 0xffffff98
   15738:	bl	15548 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   1573c:	mov	r3, r0
   15740:	cmp	r3, #0
   15744:	beq	15750 <flatcc_builder_embed_buffer@@Base+0x78>
   15748:	mov	r3, #0
   1574c:	b	158e8 <flatcc_builder_embed_buffer@@Base+0x210>
   15750:	ldr	r3, [fp, #-16]
   15754:	cmp	r3, #0
   15758:	beq	15764 <flatcc_builder_embed_buffer@@Base+0x8c>
   1575c:	mov	r2, #4
   15760:	b	15768 <flatcc_builder_embed_buffer@@Base+0x90>
   15764:	mov	r2, #0
   15768:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1576c:	add	r3, r2, r3
   15770:	ldrh	r2, [fp, #4]
   15774:	mov	r1, r3
   15778:	ldr	r0, [fp, #-104]	; 0xffffff98
   1577c:	bl	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   15780:	str	r0, [fp, #-20]	; 0xffffffec
   15784:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1578c:	add	r3, r2, r3
   15790:	mov	r0, r3
   15794:	bl	13b20 <main@@Base+0x3f4>
   15798:	mov	r3, r0
   1579c:	str	r3, [fp, #-24]	; 0xffffffe8
   157a0:	mov	r3, #0
   157a4:	str	r3, [fp, #-96]	; 0xffffffa0
   157a8:	mov	r3, #0
   157ac:	str	r3, [fp, #-92]	; 0xffffffa4
   157b0:	ldr	r3, [fp, #-104]	; 0xffffff98
   157b4:	ldr	r3, [r3, #152]	; 0x98
   157b8:	cmp	r3, #0
   157bc:	beq	15810 <flatcc_builder_embed_buffer@@Base+0x138>
   157c0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   157c4:	add	r3, r3, #4
   157c8:	str	r3, [fp, #-96]	; 0xffffffa0
   157cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157d0:	add	r3, r3, #1
   157d4:	lsl	r3, r3, #3
   157d8:	sub	r2, fp, #12
   157dc:	add	r3, r2, r3
   157e0:	sub	r2, fp, #24
   157e4:	str	r2, [r3, #-84]	; 0xffffffac
   157e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157ec:	add	r3, r3, #1
   157f0:	lsl	r3, r3, #3
   157f4:	sub	r2, fp, #12
   157f8:	add	r3, r2, r3
   157fc:	mov	r2, #4
   15800:	str	r2, [r3, #-80]	; 0xffffffb0
   15804:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15808:	add	r3, r3, #1
   1580c:	str	r3, [fp, #-92]	; 0xffffffa4
   15810:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15814:	cmp	r3, #0
   15818:	beq	15870 <flatcc_builder_embed_buffer@@Base+0x198>
   1581c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15820:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15824:	add	r3, r2, r3
   15828:	str	r3, [fp, #-96]	; 0xffffffa0
   1582c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15830:	add	r3, r3, #1
   15834:	lsl	r3, r3, #3
   15838:	sub	r2, fp, #12
   1583c:	add	r3, r2, r3
   15840:	ldr	r2, [fp, #-112]	; 0xffffff90
   15844:	str	r2, [r3, #-84]	; 0xffffffac
   15848:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1584c:	add	r3, r3, #1
   15850:	lsl	r3, r3, #3
   15854:	sub	r2, fp, #12
   15858:	add	r3, r2, r3
   1585c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15860:	str	r2, [r3, #-80]	; 0xffffffb0
   15864:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15868:	add	r3, r3, #1
   1586c:	str	r3, [fp, #-92]	; 0xffffffa4
   15870:	ldr	r3, [fp, #-20]	; 0xffffffec
   15874:	cmp	r3, #0
   15878:	beq	158d4 <flatcc_builder_embed_buffer@@Base+0x1fc>
   1587c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15880:	ldr	r3, [fp, #-20]	; 0xffffffec
   15884:	add	r3, r2, r3
   15888:	str	r3, [fp, #-96]	; 0xffffffa0
   1588c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15890:	add	r3, r3, #1
   15894:	lsl	r3, r3, #3
   15898:	sub	r2, fp, #12
   1589c:	add	r3, r2, r3
   158a0:	ldr	r2, [pc, #92]	; 15904 <flatcc_builder_embed_buffer@@Base+0x22c>
   158a4:	ldr	r2, [r4, r2]
   158a8:	str	r2, [r3, #-84]	; 0xffffffac
   158ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158b0:	add	r3, r3, #1
   158b4:	lsl	r3, r3, #3
   158b8:	sub	r2, fp, #12
   158bc:	add	r3, r2, r3
   158c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   158c4:	str	r2, [r3, #-80]	; 0xffffffb0
   158c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158cc:	add	r3, r3, #1
   158d0:	str	r3, [fp, #-92]	; 0xffffffa4
   158d4:	sub	r3, fp, #96	; 0x60
   158d8:	mov	r1, r3
   158dc:	ldr	r0, [fp, #-104]	; 0xffffff98
   158e0:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   158e4:	mov	r3, r0
   158e8:	mov	r0, r3
   158ec:	sub	sp, fp, #8
   158f0:	ldr	r4, [sp]
   158f4:	ldr	fp, [sp, #4]
   158f8:	add	sp, sp, #8
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	strdeq	r6, [r1], -r4
   15904:	andeq	r0, r0, r0, rrx

00015908 <flatcc_builder_create_buffer@@Base>:
   15908:	str	r4, [sp, #-12]!
   1590c:	str	fp, [sp, #4]
   15910:	str	lr, [sp, #8]
   15914:	add	fp, sp, #8
   15918:	sub	sp, sp, #132	; 0x84
   1591c:	str	r0, [fp, #-128]	; 0xffffff80
   15920:	str	r1, [fp, #-132]	; 0xffffff7c
   15924:	str	r3, [fp, #-140]	; 0xffffff74
   15928:	mov	r3, r2
   1592c:	strh	r3, [fp, #-134]	; 0xffffff7a
   15930:	ldr	r4, [pc, #944]	; 15ce8 <flatcc_builder_create_buffer@@Base+0x3e0>
   15934:	add	r4, pc, r4
   15938:	mov	r3, #0
   1593c:	str	r3, [fp, #-16]
   15940:	mov	r3, #0
   15944:	str	r3, [fp, #-120]	; 0xffffff88
   15948:	ldr	r3, [fp, #8]
   1594c:	and	r3, r3, #1
   15950:	cmp	r3, #0
   15954:	movne	r3, #1
   15958:	moveq	r3, #0
   1595c:	uxtb	r3, r3
   15960:	str	r3, [fp, #-20]	; 0xffffffec
   15964:	ldr	r3, [fp, #8]
   15968:	and	r3, r3, #2
   1596c:	cmp	r3, #0
   15970:	movne	r3, #1
   15974:	moveq	r3, #0
   15978:	uxtb	r3, r3
   1597c:	str	r3, [fp, #-24]	; 0xffffffe8
   15980:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   15984:	ldr	r3, [fp, #-20]	; 0xffffffec
   15988:	add	r1, fp, #4
   1598c:	ldr	r0, [fp, #-128]	; 0xffffff80
   15990:	bl	15548 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   15994:	mov	r3, r0
   15998:	cmp	r3, #0
   1599c:	beq	159a8 <flatcc_builder_create_buffer@@Base+0xa0>
   159a0:	mov	r3, #0
   159a4:	b	15cd0 <flatcc_builder_create_buffer@@Base+0x3c8>
   159a8:	ldrh	r3, [fp, #4]
   159ac:	mov	r1, r3
   159b0:	ldr	r0, [fp, #-128]	; 0xffffff80
   159b4:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   159b8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   159bc:	cmp	r3, #0
   159c0:	beq	159f8 <flatcc_builder_create_buffer@@Base+0xf0>
   159c4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   159c8:	ldr	r3, [r3]
   159cc:	str	r3, [fp, #-120]	; 0xffffff88
   159d0:	ldr	r3, [fp, #-120]	; 0xffffff88
   159d4:	mov	r0, r3
   159d8:	bl	13b6c <main@@Base+0x440>
   159dc:	mov	r3, r0
   159e0:	str	r3, [fp, #-120]	; 0xffffff88
   159e4:	ldr	r3, [fp, #-120]	; 0xffffff88
   159e8:	mov	r0, r3
   159ec:	bl	13b20 <main@@Base+0x3f4>
   159f0:	mov	r3, r0
   159f4:	str	r3, [fp, #-120]	; 0xffffff88
   159f8:	ldr	r3, [fp, #-120]	; 0xffffff88
   159fc:	cmp	r3, #0
   15a00:	beq	15a0c <flatcc_builder_create_buffer@@Base+0x104>
   15a04:	mov	r3, #4
   15a08:	b	15a10 <flatcc_builder_create_buffer@@Base+0x108>
   15a0c:	mov	r3, #0
   15a10:	str	r3, [fp, #-16]
   15a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a18:	cmp	r3, #0
   15a1c:	beq	15a28 <flatcc_builder_create_buffer@@Base+0x120>
   15a20:	mov	r2, #4
   15a24:	b	15a2c <flatcc_builder_create_buffer@@Base+0x124>
   15a28:	mov	r2, #0
   15a2c:	ldr	r3, [fp, #-16]
   15a30:	add	r3, r2, r3
   15a34:	add	r3, r3, #4
   15a38:	ldrh	r2, [fp, #4]
   15a3c:	mov	r1, r3
   15a40:	ldr	r0, [fp, #-128]	; 0xffffff80
   15a44:	bl	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   15a48:	str	r0, [fp, #-28]	; 0xffffffe4
   15a4c:	mov	r3, #0
   15a50:	str	r3, [fp, #-116]	; 0xffffff8c
   15a54:	mov	r3, #0
   15a58:	str	r3, [fp, #-112]	; 0xffffff90
   15a5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a60:	cmp	r3, #0
   15a64:	bne	15a74 <flatcc_builder_create_buffer@@Base+0x16c>
   15a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a6c:	cmp	r3, #0
   15a70:	beq	15ac4 <flatcc_builder_create_buffer@@Base+0x1bc>
   15a74:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15a78:	add	r3, r3, #4
   15a7c:	str	r3, [fp, #-116]	; 0xffffff8c
   15a80:	ldr	r3, [fp, #-112]	; 0xffffff90
   15a84:	add	r3, r3, #1
   15a88:	lsl	r3, r3, #3
   15a8c:	sub	r2, fp, #12
   15a90:	add	r3, r2, r3
   15a94:	sub	r2, fp, #44	; 0x2c
   15a98:	str	r2, [r3, #-104]	; 0xffffff98
   15a9c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15aa0:	add	r3, r3, #1
   15aa4:	lsl	r3, r3, #3
   15aa8:	sub	r2, fp, #12
   15aac:	add	r3, r2, r3
   15ab0:	mov	r2, #4
   15ab4:	str	r2, [r3, #-100]	; 0xffffff9c
   15ab8:	ldr	r3, [fp, #-112]	; 0xffffff90
   15abc:	add	r3, r3, #1
   15ac0:	str	r3, [fp, #-112]	; 0xffffff90
   15ac4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15ac8:	add	r3, r3, #4
   15acc:	str	r3, [fp, #-116]	; 0xffffff8c
   15ad0:	ldr	r3, [fp, #-112]	; 0xffffff90
   15ad4:	add	r3, r3, #1
   15ad8:	lsl	r3, r3, #3
   15adc:	sub	r2, fp, #12
   15ae0:	add	r3, r2, r3
   15ae4:	sub	r2, fp, #40	; 0x28
   15ae8:	str	r2, [r3, #-104]	; 0xffffff98
   15aec:	ldr	r3, [fp, #-112]	; 0xffffff90
   15af0:	add	r3, r3, #1
   15af4:	lsl	r3, r3, #3
   15af8:	sub	r2, fp, #12
   15afc:	add	r3, r2, r3
   15b00:	mov	r2, #4
   15b04:	str	r2, [r3, #-100]	; 0xffffff9c
   15b08:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b0c:	add	r3, r3, #1
   15b10:	str	r3, [fp, #-112]	; 0xffffff90
   15b14:	ldr	r3, [fp, #-16]
   15b18:	cmp	r3, #0
   15b1c:	beq	15b74 <flatcc_builder_create_buffer@@Base+0x26c>
   15b20:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15b24:	ldr	r3, [fp, #-16]
   15b28:	add	r3, r2, r3
   15b2c:	str	r3, [fp, #-116]	; 0xffffff8c
   15b30:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b34:	add	r3, r3, #1
   15b38:	lsl	r3, r3, #3
   15b3c:	sub	r2, fp, #12
   15b40:	add	r3, r2, r3
   15b44:	sub	r2, fp, #120	; 0x78
   15b48:	str	r2, [r3, #-104]	; 0xffffff98
   15b4c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b50:	add	r3, r3, #1
   15b54:	lsl	r3, r3, #3
   15b58:	sub	r2, fp, #12
   15b5c:	add	r3, r2, r3
   15b60:	ldr	r2, [fp, #-16]
   15b64:	str	r2, [r3, #-100]	; 0xffffff9c
   15b68:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b6c:	add	r3, r3, #1
   15b70:	str	r3, [fp, #-112]	; 0xffffff90
   15b74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b78:	cmp	r3, #0
   15b7c:	beq	15bd8 <flatcc_builder_create_buffer@@Base+0x2d0>
   15b80:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15b84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b88:	add	r3, r2, r3
   15b8c:	str	r3, [fp, #-116]	; 0xffffff8c
   15b90:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b94:	add	r3, r3, #1
   15b98:	lsl	r3, r3, #3
   15b9c:	sub	r2, fp, #12
   15ba0:	add	r3, r2, r3
   15ba4:	ldr	r2, [pc, #320]	; 15cec <flatcc_builder_create_buffer@@Base+0x3e4>
   15ba8:	ldr	r2, [r4, r2]
   15bac:	str	r2, [r3, #-104]	; 0xffffff98
   15bb0:	ldr	r3, [fp, #-112]	; 0xffffff90
   15bb4:	add	r3, r3, #1
   15bb8:	lsl	r3, r3, #3
   15bbc:	sub	r2, fp, #12
   15bc0:	add	r3, r2, r3
   15bc4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15bc8:	str	r2, [r3, #-100]	; 0xffffff9c
   15bcc:	ldr	r3, [fp, #-112]	; 0xffffff90
   15bd0:	add	r3, r3, #1
   15bd4:	str	r3, [fp, #-112]	; 0xffffff90
   15bd8:	ldr	r3, [fp, #-128]	; 0xffffff80
   15bdc:	ldr	r3, [r3, #136]	; 0x88
   15be0:	mov	r2, r3
   15be4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15be8:	sub	r3, r2, r3
   15bec:	ldr	r2, [fp, #-20]	; 0xffffffec
   15bf0:	cmp	r2, #0
   15bf4:	bne	15c04 <flatcc_builder_create_buffer@@Base+0x2fc>
   15bf8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15bfc:	cmp	r2, #0
   15c00:	beq	15c0c <flatcc_builder_create_buffer@@Base+0x304>
   15c04:	mov	r2, #4
   15c08:	b	15c10 <flatcc_builder_create_buffer@@Base+0x308>
   15c0c:	mov	r2, #0
   15c10:	add	r3, r2, r3
   15c14:	str	r3, [fp, #-32]	; 0xffffffe0
   15c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c1c:	cmp	r3, #0
   15c20:	beq	15c4c <flatcc_builder_create_buffer@@Base+0x344>
   15c24:	ldr	r3, [fp, #-128]	; 0xffffff80
   15c28:	ldr	r3, [r3, #144]	; 0x90
   15c2c:	mov	r2, r3
   15c30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c34:	sub	r3, r2, r3
   15c38:	mov	r0, r3
   15c3c:	bl	13b20 <main@@Base+0x3f4>
   15c40:	mov	r3, r0
   15c44:	str	r3, [fp, #-44]	; 0xffffffd4
   15c48:	b	15c70 <flatcc_builder_create_buffer@@Base+0x368>
   15c4c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15c50:	ldr	r3, [r3, #140]	; 0x8c
   15c54:	mov	r2, r3
   15c58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c5c:	sub	r3, r2, r3
   15c60:	mov	r0, r3
   15c64:	bl	13b20 <main@@Base+0x3f4>
   15c68:	mov	r3, r0
   15c6c:	str	r3, [fp, #-44]	; 0xffffffd4
   15c70:	ldr	r2, [fp, #-140]	; 0xffffff74
   15c74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c78:	sub	r3, r2, r3
   15c7c:	mov	r0, r3
   15c80:	bl	13b20 <main@@Base+0x3f4>
   15c84:	mov	r3, r0
   15c88:	str	r3, [fp, #-40]	; 0xffffffd8
   15c8c:	sub	r3, fp, #116	; 0x74
   15c90:	mov	r1, r3
   15c94:	ldr	r0, [fp, #-128]	; 0xffffff80
   15c98:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   15c9c:	str	r0, [fp, #-36]	; 0xffffffdc
   15ca0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ca4:	cmp	r3, #0
   15ca8:	bne	15ccc <flatcc_builder_create_buffer@@Base+0x3c4>
   15cac:	ldr	r3, [pc, #60]	; 15cf0 <flatcc_builder_create_buffer@@Base+0x3e8>
   15cb0:	add	r3, pc, r3
   15cb4:	mov	r2, #772	; 0x304
   15cb8:	ldr	r1, [pc, #52]	; 15cf4 <flatcc_builder_create_buffer@@Base+0x3ec>
   15cbc:	add	r1, pc, r1
   15cc0:	ldr	r0, [pc, #48]	; 15cf8 <flatcc_builder_create_buffer@@Base+0x3f0>
   15cc4:	add	r0, pc, r0
   15cc8:	bl	12078 <__assert_fail@plt>
   15ccc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15cd0:	mov	r0, r3
   15cd4:	sub	sp, fp, #8
   15cd8:	ldr	r4, [sp]
   15cdc:	ldr	fp, [sp, #4]
   15ce0:	add	sp, sp, #8
   15ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce8:	andeq	r6, r1, r4, asr #13
   15cec:	andeq	r0, r0, r0, rrx
   15cf0:	andeq	r5, r0, r0, asr #26
   15cf4:	andeq	r5, r0, r8, ror #16
   15cf8:	andeq	r5, r0, r0, asr #17

00015cfc <flatcc_builder_create_struct@@Base>:
   15cfc:	str	r4, [sp, #-12]!
   15d00:	str	fp, [sp, #4]
   15d04:	str	lr, [sp, #8]
   15d08:	add	fp, sp, #8
   15d0c:	sub	sp, sp, #100	; 0x64
   15d10:	str	r0, [fp, #-96]	; 0xffffffa0
   15d14:	str	r1, [fp, #-100]	; 0xffffff9c
   15d18:	str	r2, [fp, #-104]	; 0xffffff98
   15d1c:	strh	r3, [fp, #-106]	; 0xffffff96
   15d20:	ldr	r4, [pc, #340]	; 15e7c <flatcc_builder_create_struct@@Base+0x180>
   15d24:	add	r4, pc, r4
   15d28:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d2c:	cmp	r3, #0
   15d30:	bne	15d54 <flatcc_builder_create_struct@@Base+0x58>
   15d34:	ldr	r3, [pc, #324]	; 15e80 <flatcc_builder_create_struct@@Base+0x184>
   15d38:	add	r3, pc, r3
   15d3c:	movw	r2, #783	; 0x30f
   15d40:	ldr	r1, [pc, #316]	; 15e84 <flatcc_builder_create_struct@@Base+0x188>
   15d44:	add	r1, pc, r1
   15d48:	ldr	r0, [pc, #312]	; 15e88 <flatcc_builder_create_struct@@Base+0x18c>
   15d4c:	add	r0, pc, r0
   15d50:	bl	12078 <__assert_fail@plt>
   15d54:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d58:	mov	r1, r3
   15d5c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15d60:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   15d64:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d68:	mov	r2, r3
   15d6c:	ldr	r1, [fp, #-104]	; 0xffffff98
   15d70:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15d74:	bl	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   15d78:	str	r0, [fp, #-16]
   15d7c:	mov	r3, #0
   15d80:	str	r3, [fp, #-88]	; 0xffffffa8
   15d84:	mov	r3, #0
   15d88:	str	r3, [fp, #-84]	; 0xffffffac
   15d8c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15d90:	cmp	r3, #0
   15d94:	beq	15dec <flatcc_builder_create_struct@@Base+0xf0>
   15d98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15d9c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15da0:	add	r3, r2, r3
   15da4:	str	r3, [fp, #-88]	; 0xffffffa8
   15da8:	ldr	r3, [fp, #-84]	; 0xffffffac
   15dac:	add	r3, r3, #1
   15db0:	lsl	r3, r3, #3
   15db4:	sub	r2, fp, #12
   15db8:	add	r3, r2, r3
   15dbc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15dc0:	str	r2, [r3, #-76]	; 0xffffffb4
   15dc4:	ldr	r3, [fp, #-84]	; 0xffffffac
   15dc8:	add	r3, r3, #1
   15dcc:	lsl	r3, r3, #3
   15dd0:	sub	r2, fp, #12
   15dd4:	add	r3, r2, r3
   15dd8:	ldr	r2, [fp, #-104]	; 0xffffff98
   15ddc:	str	r2, [r3, #-72]	; 0xffffffb8
   15de0:	ldr	r3, [fp, #-84]	; 0xffffffac
   15de4:	add	r3, r3, #1
   15de8:	str	r3, [fp, #-84]	; 0xffffffac
   15dec:	ldr	r3, [fp, #-16]
   15df0:	cmp	r3, #0
   15df4:	beq	15e50 <flatcc_builder_create_struct@@Base+0x154>
   15df8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15dfc:	ldr	r3, [fp, #-16]
   15e00:	add	r3, r2, r3
   15e04:	str	r3, [fp, #-88]	; 0xffffffa8
   15e08:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e0c:	add	r3, r3, #1
   15e10:	lsl	r3, r3, #3
   15e14:	sub	r2, fp, #12
   15e18:	add	r3, r2, r3
   15e1c:	ldr	r2, [pc, #104]	; 15e8c <flatcc_builder_create_struct@@Base+0x190>
   15e20:	ldr	r2, [r4, r2]
   15e24:	str	r2, [r3, #-76]	; 0xffffffb4
   15e28:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e2c:	add	r3, r3, #1
   15e30:	lsl	r3, r3, #3
   15e34:	sub	r2, fp, #12
   15e38:	add	r3, r2, r3
   15e3c:	ldr	r2, [fp, #-16]
   15e40:	str	r2, [r3, #-72]	; 0xffffffb8
   15e44:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e48:	add	r3, r3, #1
   15e4c:	str	r3, [fp, #-84]	; 0xffffffac
   15e50:	sub	r3, fp, #88	; 0x58
   15e54:	mov	r1, r3
   15e58:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15e5c:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   15e60:	mov	r3, r0
   15e64:	mov	r0, r3
   15e68:	sub	sp, fp, #8
   15e6c:	ldr	r4, [sp]
   15e70:	ldr	fp, [sp, #4]
   15e74:	add	sp, sp, #8
   15e78:	pop	{pc}		; (ldr pc, [sp], #4)
   15e7c:	ldrdeq	r6, [r1], -r4
   15e80:	ldrdeq	r5, [r0], -r8
   15e84:	andeq	r5, r0, r0, ror #15
   15e88:	muleq	r0, ip, r8
   15e8c:	andeq	r0, r0, r0, rrx

00015e90 <flatcc_builder_start_buffer@@Base>:
   15e90:	str	r4, [sp, #-12]!
   15e94:	str	fp, [sp, #4]
   15e98:	str	lr, [sp, #8]
   15e9c:	add	fp, sp, #8
   15ea0:	sub	sp, sp, #20
   15ea4:	str	r0, [fp, #-16]
   15ea8:	str	r1, [fp, #-20]	; 0xffffffec
   15eac:	str	r3, [fp, #-28]	; 0xffffffe4
   15eb0:	mov	r3, r2
   15eb4:	strh	r3, [fp, #-22]	; 0xffffffea
   15eb8:	ldr	r4, [pc, #312]	; 15ff8 <flatcc_builder_start_buffer@@Base+0x168>
   15ebc:	add	r4, pc, r4
   15ec0:	ldr	r3, [fp, #-16]
   15ec4:	ldrh	r3, [r3, #128]	; 0x80
   15ec8:	mov	r1, r3
   15ecc:	ldr	r0, [fp, #-16]
   15ed0:	bl	14fe4 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15ed4:	mov	r3, r0
   15ed8:	cmp	r3, #0
   15edc:	beq	15ee8 <flatcc_builder_start_buffer@@Base+0x58>
   15ee0:	mvn	r3, #0
   15ee4:	b	15fe0 <flatcc_builder_start_buffer@@Base+0x150>
   15ee8:	ldr	r3, [fp, #-16]
   15eec:	mov	r2, #1
   15ef0:	strh	r2, [r3, #128]	; 0x80
   15ef4:	ldr	r3, [fp, #-16]
   15ef8:	ldr	r3, [r3, #32]
   15efc:	ldr	r2, [fp, #-16]
   15f00:	ldrh	r2, [r2, #132]	; 0x84
   15f04:	strh	r2, [r3, #34]	; 0x22
   15f08:	ldr	r3, [fp, #-16]
   15f0c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15f10:	strh	r2, [r3, #132]	; 0x84
   15f14:	ldr	r3, [fp, #-16]
   15f18:	ldr	r3, [r3, #32]
   15f1c:	ldr	r2, [fp, #-16]
   15f20:	ldrh	r2, [r2, #164]	; 0xa4
   15f24:	strh	r2, [r3, #32]
   15f28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f2c:	uxth	r2, r3
   15f30:	ldr	r3, [fp, #-16]
   15f34:	strh	r2, [r3, #164]	; 0xa4
   15f38:	ldr	r3, [fp, #-16]
   15f3c:	ldr	r3, [r3, #32]
   15f40:	ldr	r2, [fp, #-16]
   15f44:	ldr	r2, [r2, #144]	; 0x90
   15f48:	str	r2, [r3, #20]
   15f4c:	ldr	r3, [fp, #-16]
   15f50:	ldr	r3, [r3, #32]
   15f54:	ldr	r2, [fp, #-16]
   15f58:	ldr	r2, [r2, #152]	; 0x98
   15f5c:	str	r2, [r3, #28]
   15f60:	ldr	r3, [fp, #-16]
   15f64:	ldr	r2, [r3, #136]	; 0x88
   15f68:	ldr	r3, [fp, #-16]
   15f6c:	str	r2, [r3, #144]	; 0x90
   15f70:	ldr	r3, [fp, #-16]
   15f74:	ldr	r3, [r3, #148]	; 0x94
   15f78:	add	r1, r3, #1
   15f7c:	ldr	r2, [fp, #-16]
   15f80:	str	r1, [r2, #148]	; 0x94
   15f84:	ldr	r2, [fp, #-16]
   15f88:	str	r3, [r2, #152]	; 0x98
   15f8c:	ldr	r3, [fp, #-16]
   15f90:	ldr	r3, [r3, #32]
   15f94:	ldr	r2, [fp, #-16]
   15f98:	ldr	r2, [r2, #168]	; 0xa8
   15f9c:	str	r2, [r3, #16]
   15fa0:	ldr	r3, [fp, #-16]
   15fa4:	add	r2, r3, #168	; 0xa8
   15fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fac:	cmp	r3, #0
   15fb0:	beq	15fbc <flatcc_builder_start_buffer@@Base+0x12c>
   15fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fb8:	b	15fc4 <flatcc_builder_start_buffer@@Base+0x134>
   15fbc:	ldr	r3, [pc, #56]	; 15ffc <flatcc_builder_start_buffer@@Base+0x16c>
   15fc0:	ldr	r3, [r4, r3]
   15fc4:	ldr	r3, [r3]
   15fc8:	str	r3, [r2]
   15fcc:	ldr	r3, [fp, #-16]
   15fd0:	ldr	r3, [r3, #32]
   15fd4:	mov	r2, #1
   15fd8:	strh	r2, [r3, #14]
   15fdc:	mov	r3, #0
   15fe0:	mov	r0, r3
   15fe4:	sub	sp, fp, #8
   15fe8:	ldr	r4, [sp]
   15fec:	ldr	fp, [sp, #4]
   15ff0:	add	sp, sp, #8
   15ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff8:	andeq	r6, r1, ip, lsr r1
   15ffc:	andeq	r0, r0, r0, rrx

00016000 <flatcc_builder_end_buffer@@Base>:
   16000:	str	fp, [sp, #-8]!
   16004:	str	lr, [sp, #4]
   16008:	add	fp, sp, #4
   1600c:	sub	sp, sp, #24
   16010:	str	r0, [fp, #-16]
   16014:	str	r1, [fp, #-20]	; 0xffffffec
   16018:	ldr	r3, [fp, #-16]
   1601c:	ldrh	r3, [r3, #164]	; 0xa4
   16020:	and	r3, r3, #2
   16024:	str	r3, [fp, #-8]
   16028:	ldr	r3, [fp, #-16]
   1602c:	ldr	r3, [r3, #152]	; 0x98
   16030:	cmp	r3, #0
   16034:	movne	r3, #1
   16038:	moveq	r3, #0
   1603c:	uxtb	r3, r3
   16040:	mov	r2, r3
   16044:	ldr	r3, [fp, #-8]
   16048:	orr	r3, r3, r2
   1604c:	str	r3, [fp, #-8]
   16050:	ldr	r3, [fp, #-16]
   16054:	ldr	r3, [r3, #32]
   16058:	ldrh	r3, [r3, #14]
   1605c:	cmp	r3, #1
   16060:	beq	16084 <flatcc_builder_end_buffer@@Base+0x84>
   16064:	ldr	r3, [pc, #232]	; 16154 <flatcc_builder_end_buffer@@Base+0x154>
   16068:	add	r3, pc, r3
   1606c:	movw	r2, #838	; 0x346
   16070:	ldr	r1, [pc, #224]	; 16158 <flatcc_builder_end_buffer@@Base+0x158>
   16074:	add	r1, pc, r1
   16078:	ldr	r0, [pc, #220]	; 1615c <flatcc_builder_end_buffer@@Base+0x15c>
   1607c:	add	r0, pc, r0
   16080:	bl	12078 <__assert_fail@plt>
   16084:	ldr	r3, [fp, #-16]
   16088:	ldrh	r3, [r3, #132]	; 0x84
   1608c:	mov	r1, r3
   16090:	ldr	r0, [fp, #-16]
   16094:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   16098:	ldr	r3, [fp, #-16]
   1609c:	add	r1, r3, #168	; 0xa8
   160a0:	ldr	r3, [fp, #-16]
   160a4:	ldrh	r0, [r3, #132]	; 0x84
   160a8:	ldr	r3, [fp, #-16]
   160ac:	ldrh	r3, [r3, #128]	; 0x80
   160b0:	ldr	r2, [fp, #-8]
   160b4:	str	r2, [sp, #4]
   160b8:	str	r3, [sp]
   160bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   160c0:	mov	r2, r0
   160c4:	ldr	r0, [fp, #-16]
   160c8:	bl	15908 <flatcc_builder_create_buffer@@Base>
   160cc:	str	r0, [fp, #-12]
   160d0:	ldr	r3, [fp, #-12]
   160d4:	cmp	r3, #0
   160d8:	bne	160e4 <flatcc_builder_end_buffer@@Base+0xe4>
   160dc:	mov	r3, #0
   160e0:	b	16140 <flatcc_builder_end_buffer@@Base+0x140>
   160e4:	ldr	r3, [fp, #-16]
   160e8:	ldr	r3, [r3, #32]
   160ec:	ldr	r2, [r3, #20]
   160f0:	ldr	r3, [fp, #-16]
   160f4:	str	r2, [r3, #144]	; 0x90
   160f8:	ldr	r3, [fp, #-16]
   160fc:	ldr	r3, [r3, #32]
   16100:	ldr	r2, [r3, #28]
   16104:	ldr	r3, [fp, #-16]
   16108:	str	r2, [r3, #152]	; 0x98
   1610c:	ldr	r3, [fp, #-16]
   16110:	ldr	r3, [r3, #32]
   16114:	ldr	r2, [r3, #16]
   16118:	ldr	r3, [fp, #-16]
   1611c:	str	r2, [r3, #168]	; 0xa8
   16120:	ldr	r3, [fp, #-16]
   16124:	ldr	r3, [r3, #32]
   16128:	ldrh	r2, [r3, #32]
   1612c:	ldr	r3, [fp, #-16]
   16130:	strh	r2, [r3, #164]	; 0xa4
   16134:	ldr	r0, [fp, #-16]
   16138:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1613c:	ldr	r3, [fp, #-12]
   16140:	mov	r0, r3
   16144:	sub	sp, fp, #4
   16148:	ldr	fp, [sp]
   1614c:	add	sp, sp, #4
   16150:	pop	{pc}		; (ldr pc, [sp], #4)
   16154:	andeq	r5, r0, r8, asr #19
   16158:			; <UNDEFINED> instruction: 0x000054b0
   1615c:	andeq	r5, r0, r8, ror r5

00016160 <flatcc_builder_start_struct@@Base>:
   16160:	str	fp, [sp, #-8]!
   16164:	str	lr, [sp, #4]
   16168:	add	fp, sp, #4
   1616c:	sub	sp, sp, #16
   16170:	str	r0, [fp, #-8]
   16174:	str	r1, [fp, #-12]
   16178:	mov	r3, r2
   1617c:	strh	r3, [fp, #-14]
   16180:	ldrh	r3, [fp, #-14]
   16184:	mov	r1, r3
   16188:	ldr	r0, [fp, #-8]
   1618c:	bl	14fe4 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16190:	mov	r3, r0
   16194:	cmp	r3, #0
   16198:	beq	161a4 <flatcc_builder_start_struct@@Base+0x44>
   1619c:	mov	r3, #0
   161a0:	b	161d0 <flatcc_builder_start_struct@@Base+0x70>
   161a4:	ldr	r3, [fp, #-8]
   161a8:	ldr	r3, [r3, #32]
   161ac:	mov	r2, #2
   161b0:	strh	r2, [r3, #14]
   161b4:	mvn	r1, #3
   161b8:	ldr	r0, [fp, #-8]
   161bc:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   161c0:	ldr	r1, [fp, #-12]
   161c4:	ldr	r0, [fp, #-8]
   161c8:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   161cc:	mov	r3, r0
   161d0:	mov	r0, r3
   161d4:	sub	sp, fp, #4
   161d8:	ldr	fp, [sp]
   161dc:	add	sp, sp, #4
   161e0:	pop	{pc}		; (ldr pc, [sp], #4)

000161e4 <flatcc_builder_struct_edit@@Base>:
   161e4:	push	{fp}		; (str fp, [sp, #-4]!)
   161e8:	add	fp, sp, #0
   161ec:	sub	sp, sp, #12
   161f0:	str	r0, [fp, #-8]
   161f4:	ldr	r3, [fp, #-8]
   161f8:	ldr	r3, [r3, #16]
   161fc:	mov	r0, r3
   16200:	add	sp, fp, #0
   16204:	pop	{fp}		; (ldr fp, [sp], #4)
   16208:	bx	lr

0001620c <flatcc_builder_end_struct@@Base>:
   1620c:	str	fp, [sp, #-8]!
   16210:	str	lr, [sp, #4]
   16214:	add	fp, sp, #4
   16218:	sub	sp, sp, #16
   1621c:	str	r0, [fp, #-16]
   16220:	ldr	r3, [fp, #-16]
   16224:	ldr	r3, [r3, #32]
   16228:	ldrh	r3, [r3, #14]
   1622c:	cmp	r3, #2
   16230:	beq	16254 <flatcc_builder_end_struct@@Base+0x48>
   16234:	ldr	r3, [pc, #112]	; 162ac <flatcc_builder_end_struct@@Base+0xa0>
   16238:	add	r3, pc, r3
   1623c:	mov	r2, #872	; 0x368
   16240:	ldr	r1, [pc, #104]	; 162b0 <flatcc_builder_end_struct@@Base+0xa4>
   16244:	add	r1, pc, r1
   16248:	ldr	r0, [pc, #100]	; 162b4 <flatcc_builder_end_struct@@Base+0xa8>
   1624c:	add	r0, pc, r0
   16250:	bl	12078 <__assert_fail@plt>
   16254:	ldr	r3, [fp, #-16]
   16258:	ldr	r1, [r3, #16]
   1625c:	ldr	r3, [fp, #-16]
   16260:	ldr	r2, [r3, #20]
   16264:	ldr	r3, [fp, #-16]
   16268:	ldrh	r3, [r3, #130]	; 0x82
   1626c:	ldr	r0, [fp, #-16]
   16270:	bl	15cfc <flatcc_builder_create_struct@@Base>
   16274:	str	r0, [fp, #-8]
   16278:	ldr	r3, [fp, #-8]
   1627c:	cmp	r3, #0
   16280:	bne	1628c <flatcc_builder_end_struct@@Base+0x80>
   16284:	mov	r3, #0
   16288:	b	16298 <flatcc_builder_end_struct@@Base+0x8c>
   1628c:	ldr	r0, [fp, #-16]
   16290:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   16294:	ldr	r3, [fp, #-8]
   16298:	mov	r0, r3
   1629c:	sub	sp, fp, #4
   162a0:	ldr	fp, [sp]
   162a4:	add	sp, sp, #4
   162a8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ac:	andeq	r5, r0, r4, lsl r8
   162b0:	andeq	r5, r0, r0, ror #5
   162b4:	ldrdeq	r5, [r0], -r4
   162b8:	str	fp, [sp, #-8]!
   162bc:	str	lr, [sp, #4]
   162c0:	add	fp, sp, #4
   162c4:	sub	sp, sp, #24
   162c8:	str	r0, [fp, #-16]
   162cc:	str	r1, [fp, #-20]	; 0xffffffec
   162d0:	str	r2, [fp, #-24]	; 0xffffffe8
   162d4:	ldr	r3, [fp, #-16]
   162d8:	ldr	r3, [r3, #32]
   162dc:	ldr	r3, [r3, #20]
   162e0:	str	r3, [fp, #-8]
   162e4:	ldr	r2, [fp, #-8]
   162e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   162ec:	add	r3, r2, r3
   162f0:	str	r3, [fp, #-12]
   162f4:	ldr	r2, [fp, #-8]
   162f8:	ldr	r3, [fp, #-12]
   162fc:	cmp	r2, r3
   16300:	bhi	16314 <flatcc_builder_end_struct@@Base+0x108>
   16304:	ldr	r2, [fp, #-12]
   16308:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1630c:	cmp	r2, r3
   16310:	bls	1635c <flatcc_builder_end_struct@@Base+0x150>
   16314:	ldr	r2, [fp, #-8]
   16318:	ldr	r3, [fp, #-12]
   1631c:	cmp	r2, r3
   16320:	bhi	16334 <flatcc_builder_end_struct@@Base+0x128>
   16324:	ldr	r2, [fp, #-12]
   16328:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1632c:	cmp	r2, r3
   16330:	bls	16354 <flatcc_builder_end_struct@@Base+0x148>
   16334:	ldr	r3, [pc, #72]	; 16384 <flatcc_builder_end_struct@@Base+0x178>
   16338:	add	r3, pc, r3
   1633c:	mov	r2, #892	; 0x37c
   16340:	ldr	r1, [pc, #64]	; 16388 <flatcc_builder_end_struct@@Base+0x17c>
   16344:	add	r1, pc, r1
   16348:	ldr	r0, [pc, #60]	; 1638c <flatcc_builder_end_struct@@Base+0x180>
   1634c:	add	r0, pc, r0
   16350:	bl	12078 <__assert_fail@plt>
   16354:	mvn	r3, #0
   16358:	b	16370 <flatcc_builder_end_struct@@Base+0x164>
   1635c:	ldr	r3, [fp, #-16]
   16360:	ldr	r3, [r3, #32]
   16364:	ldr	r2, [fp, #-12]
   16368:	str	r2, [r3, #20]
   1636c:	mov	r3, #0
   16370:	mov	r0, r3
   16374:	sub	sp, fp, #4
   16378:	ldr	fp, [sp]
   1637c:	add	sp, sp, #4
   16380:	pop	{pc}		; (ldr pc, [sp], #4)
   16384:	andeq	r5, r0, r0, lsr r7
   16388:	andeq	r5, r0, r0, ror #3
   1638c:	andeq	r5, r0, r0, lsl #6

00016390 <flatcc_builder_extend_vector@@Base>:
   16390:	str	fp, [sp, #-8]!
   16394:	str	lr, [sp, #4]
   16398:	add	fp, sp, #4
   1639c:	sub	sp, sp, #8
   163a0:	str	r0, [fp, #-8]
   163a4:	str	r1, [fp, #-12]
   163a8:	ldr	r3, [fp, #-8]
   163ac:	ldr	r3, [r3, #32]
   163b0:	ldr	r3, [r3, #24]
   163b4:	mov	r2, r3
   163b8:	ldr	r1, [fp, #-12]
   163bc:	ldr	r0, [fp, #-8]
   163c0:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   163c4:	mov	r3, r0
   163c8:	cmp	r3, #0
   163cc:	beq	163d8 <flatcc_builder_extend_vector@@Base+0x48>
   163d0:	mov	r3, #0
   163d4:	b	163fc <flatcc_builder_extend_vector@@Base+0x6c>
   163d8:	ldr	r3, [fp, #-8]
   163dc:	ldr	r3, [r3, #32]
   163e0:	ldr	r3, [r3, #16]
   163e4:	ldr	r2, [fp, #-12]
   163e8:	mul	r3, r2, r3
   163ec:	mov	r1, r3
   163f0:	ldr	r0, [fp, #-8]
   163f4:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   163f8:	mov	r3, r0
   163fc:	mov	r0, r3
   16400:	sub	sp, fp, #4
   16404:	ldr	fp, [sp]
   16408:	add	sp, sp, #4
   1640c:	pop	{pc}		; (ldr pc, [sp], #4)

00016410 <flatcc_builder_vector_push@@Base>:
   16410:	str	fp, [sp, #-8]!
   16414:	str	lr, [sp, #4]
   16418:	add	fp, sp, #4
   1641c:	sub	sp, sp, #8
   16420:	str	r0, [fp, #-8]
   16424:	str	r1, [fp, #-12]
   16428:	ldr	r3, [fp, #-8]
   1642c:	ldr	r3, [r3, #32]
   16430:	ldrh	r3, [r3, #14]
   16434:	cmp	r3, #4
   16438:	beq	1645c <flatcc_builder_vector_push@@Base+0x4c>
   1643c:	ldr	r3, [pc, #208]	; 16514 <flatcc_builder_vector_push@@Base+0x104>
   16440:	add	r3, pc, r3
   16444:	movw	r2, #907	; 0x38b
   16448:	ldr	r1, [pc, #200]	; 16518 <flatcc_builder_vector_push@@Base+0x108>
   1644c:	add	r1, pc, r1
   16450:	ldr	r0, [pc, #196]	; 1651c <flatcc_builder_vector_push@@Base+0x10c>
   16454:	add	r0, pc, r0
   16458:	bl	12078 <__assert_fail@plt>
   1645c:	ldr	r3, [fp, #-8]
   16460:	ldr	r3, [r3, #32]
   16464:	ldr	r2, [r3, #20]
   16468:	ldr	r3, [fp, #-8]
   1646c:	ldr	r3, [r3, #32]
   16470:	ldr	r3, [r3, #24]
   16474:	cmp	r2, r3
   16478:	bls	164c4 <flatcc_builder_vector_push@@Base+0xb4>
   1647c:	ldr	r3, [fp, #-8]
   16480:	ldr	r3, [r3, #32]
   16484:	ldr	r2, [r3, #20]
   16488:	ldr	r3, [fp, #-8]
   1648c:	ldr	r3, [r3, #32]
   16490:	ldr	r3, [r3, #24]
   16494:	cmp	r2, r3
   16498:	bls	164bc <flatcc_builder_vector_push@@Base+0xac>
   1649c:	ldr	r3, [pc, #124]	; 16520 <flatcc_builder_vector_push@@Base+0x110>
   164a0:	add	r3, pc, r3
   164a4:	mov	r2, #908	; 0x38c
   164a8:	ldr	r1, [pc, #116]	; 16524 <flatcc_builder_vector_push@@Base+0x114>
   164ac:	add	r1, pc, r1
   164b0:	ldr	r0, [pc, #112]	; 16528 <flatcc_builder_vector_push@@Base+0x118>
   164b4:	add	r0, pc, r0
   164b8:	bl	12078 <__assert_fail@plt>
   164bc:	mov	r3, #0
   164c0:	b	16500 <flatcc_builder_vector_push@@Base+0xf0>
   164c4:	ldr	r3, [fp, #-8]
   164c8:	ldr	r3, [r3, #32]
   164cc:	ldr	r2, [r3, #20]
   164d0:	ldr	r3, [fp, #-8]
   164d4:	ldr	r3, [r3, #32]
   164d8:	add	r2, r2, #1
   164dc:	str	r2, [r3, #20]
   164e0:	ldr	r3, [fp, #-8]
   164e4:	ldr	r3, [r3, #32]
   164e8:	ldr	r3, [r3, #16]
   164ec:	mov	r2, r3
   164f0:	ldr	r1, [fp, #-12]
   164f4:	ldr	r0, [fp, #-8]
   164f8:	bl	14090 <flatcc_builder_default_alloc@@Base+0x420>
   164fc:	mov	r3, r0
   16500:	mov	r0, r3
   16504:	sub	sp, fp, #4
   16508:	ldr	fp, [sp]
   1650c:	add	sp, sp, #4
   16510:	pop	{pc}		; (ldr pc, [sp], #4)
   16514:	andeq	r5, r0, ip, lsr r6
   16518:	ldrdeq	r5, [r0], -r8
   1651c:	andeq	r5, r0, r4, lsl r2
   16520:	ldrdeq	r5, [r0], -ip
   16524:	andeq	r5, r0, r8, ror r0
   16528:	andeq	r5, r0, r0, ror #3

0001652c <flatcc_builder_append_vector@@Base>:
   1652c:	str	fp, [sp, #-8]!
   16530:	str	lr, [sp, #4]
   16534:	add	fp, sp, #4
   16538:	sub	sp, sp, #16
   1653c:	str	r0, [fp, #-8]
   16540:	str	r1, [fp, #-12]
   16544:	str	r2, [fp, #-16]
   16548:	ldr	r3, [fp, #-8]
   1654c:	ldr	r3, [r3, #32]
   16550:	ldrh	r3, [r3, #14]
   16554:	cmp	r3, #4
   16558:	beq	1657c <flatcc_builder_append_vector@@Base+0x50>
   1655c:	ldr	r3, [pc, #132]	; 165e8 <flatcc_builder_append_vector@@Base+0xbc>
   16560:	add	r3, pc, r3
   16564:	movw	r2, #915	; 0x393
   16568:	ldr	r1, [pc, #124]	; 165ec <flatcc_builder_append_vector@@Base+0xc0>
   1656c:	add	r1, pc, r1
   16570:	ldr	r0, [pc, #120]	; 165f0 <flatcc_builder_append_vector@@Base+0xc4>
   16574:	add	r0, pc, r0
   16578:	bl	12078 <__assert_fail@plt>
   1657c:	ldr	r3, [fp, #-8]
   16580:	ldr	r3, [r3, #32]
   16584:	ldr	r3, [r3, #24]
   16588:	mov	r2, r3
   1658c:	ldr	r1, [fp, #-16]
   16590:	ldr	r0, [fp, #-8]
   16594:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   16598:	mov	r3, r0
   1659c:	cmp	r3, #0
   165a0:	beq	165ac <flatcc_builder_append_vector@@Base+0x80>
   165a4:	mov	r3, #0
   165a8:	b	165d4 <flatcc_builder_append_vector@@Base+0xa8>
   165ac:	ldr	r3, [fp, #-8]
   165b0:	ldr	r3, [r3, #32]
   165b4:	ldr	r3, [r3, #16]
   165b8:	ldr	r2, [fp, #-16]
   165bc:	mul	r3, r2, r3
   165c0:	mov	r2, r3
   165c4:	ldr	r1, [fp, #-12]
   165c8:	ldr	r0, [fp, #-8]
   165cc:	bl	14090 <flatcc_builder_default_alloc@@Base+0x420>
   165d0:	mov	r3, r0
   165d4:	mov	r0, r3
   165d8:	sub	sp, fp, #4
   165dc:	ldr	fp, [sp]
   165e0:	add	sp, sp, #4
   165e4:	pop	{pc}		; (ldr pc, [sp], #4)
   165e8:	andeq	r5, r0, r8, lsr r5
   165ec:			; <UNDEFINED> instruction: 0x00004fb8
   165f0:	strdeq	r5, [r0], -r4

000165f4 <flatcc_builder_extend_offset_vector@@Base>:
   165f4:	str	fp, [sp, #-8]!
   165f8:	str	lr, [sp, #4]
   165fc:	add	fp, sp, #4
   16600:	sub	sp, sp, #8
   16604:	str	r0, [fp, #-8]
   16608:	str	r1, [fp, #-12]
   1660c:	mvn	r2, #-1073741824	; 0xc0000000
   16610:	ldr	r1, [fp, #-12]
   16614:	ldr	r0, [fp, #-8]
   16618:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   1661c:	mov	r3, r0
   16620:	cmp	r3, #0
   16624:	beq	16630 <flatcc_builder_extend_offset_vector@@Base+0x3c>
   16628:	mov	r3, #0
   1662c:	b	16648 <flatcc_builder_extend_offset_vector@@Base+0x54>
   16630:	ldr	r3, [fp, #-12]
   16634:	lsl	r3, r3, #2
   16638:	mov	r1, r3
   1663c:	ldr	r0, [fp, #-8]
   16640:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   16644:	mov	r3, r0
   16648:	mov	r0, r3
   1664c:	sub	sp, fp, #4
   16650:	ldr	fp, [sp]
   16654:	add	sp, sp, #4
   16658:	pop	{pc}		; (ldr pc, [sp], #4)

0001665c <flatcc_builder_offset_vector_push@@Base>:
   1665c:	str	fp, [sp, #-8]!
   16660:	str	lr, [sp, #4]
   16664:	add	fp, sp, #4
   16668:	sub	sp, sp, #16
   1666c:	str	r0, [fp, #-16]
   16670:	str	r1, [fp, #-20]	; 0xffffffec
   16674:	ldr	r3, [fp, #-16]
   16678:	ldr	r3, [r3, #32]
   1667c:	ldrh	r3, [r3, #14]
   16680:	cmp	r3, #5
   16684:	beq	166a8 <flatcc_builder_offset_vector_push@@Base+0x4c>
   16688:	ldr	r3, [pc, #152]	; 16728 <flatcc_builder_offset_vector_push@@Base+0xcc>
   1668c:	add	r3, pc, r3
   16690:	movw	r2, #934	; 0x3a6
   16694:	ldr	r1, [pc, #144]	; 1672c <flatcc_builder_offset_vector_push@@Base+0xd0>
   16698:	add	r1, pc, r1
   1669c:	ldr	r0, [pc, #140]	; 16730 <flatcc_builder_offset_vector_push@@Base+0xd4>
   166a0:	add	r0, pc, r0
   166a4:	bl	12078 <__assert_fail@plt>
   166a8:	ldr	r3, [fp, #-16]
   166ac:	ldr	r3, [r3, #32]
   166b0:	ldr	r3, [r3, #20]
   166b4:	cmn	r3, #-1073741823	; 0xc0000001
   166b8:	bne	166c4 <flatcc_builder_offset_vector_push@@Base+0x68>
   166bc:	mov	r3, #0
   166c0:	b	16714 <flatcc_builder_offset_vector_push@@Base+0xb8>
   166c4:	ldr	r3, [fp, #-16]
   166c8:	ldr	r3, [r3, #32]
   166cc:	ldr	r2, [r3, #20]
   166d0:	ldr	r3, [fp, #-16]
   166d4:	ldr	r3, [r3, #32]
   166d8:	add	r2, r2, #1
   166dc:	str	r2, [r3, #20]
   166e0:	mov	r1, #4
   166e4:	ldr	r0, [fp, #-16]
   166e8:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   166ec:	str	r0, [fp, #-8]
   166f0:	ldr	r3, [fp, #-8]
   166f4:	cmp	r3, #0
   166f8:	bne	16704 <flatcc_builder_offset_vector_push@@Base+0xa8>
   166fc:	mov	r3, #0
   16700:	b	16714 <flatcc_builder_offset_vector_push@@Base+0xb8>
   16704:	ldr	r3, [fp, #-8]
   16708:	ldr	r2, [fp, #-20]	; 0xffffffec
   1670c:	str	r2, [r3]
   16710:	ldr	r3, [fp, #-8]
   16714:	mov	r0, r3
   16718:	sub	sp, fp, #4
   1671c:	ldr	fp, [sp]
   16720:	add	sp, sp, #4
   16724:	pop	{pc}		; (ldr pc, [sp], #4)
   16728:	andeq	r5, r0, ip, lsr #8
   1672c:	andeq	r4, r0, ip, lsl #29
   16730:	andeq	r5, r0, r4, lsr r0

00016734 <flatcc_builder_append_offset_vector@@Base>:
   16734:	str	fp, [sp, #-8]!
   16738:	str	lr, [sp, #4]
   1673c:	add	fp, sp, #4
   16740:	sub	sp, sp, #16
   16744:	str	r0, [fp, #-8]
   16748:	str	r1, [fp, #-12]
   1674c:	str	r2, [fp, #-16]
   16750:	ldr	r3, [fp, #-8]
   16754:	ldr	r3, [r3, #32]
   16758:	ldrh	r3, [r3, #14]
   1675c:	cmp	r3, #5
   16760:	beq	16784 <flatcc_builder_append_offset_vector@@Base+0x50>
   16764:	ldr	r3, [pc, #108]	; 167d8 <flatcc_builder_append_offset_vector@@Base+0xa4>
   16768:	add	r3, pc, r3
   1676c:	mov	r2, #948	; 0x3b4
   16770:	ldr	r1, [pc, #100]	; 167dc <flatcc_builder_append_offset_vector@@Base+0xa8>
   16774:	add	r1, pc, r1
   16778:	ldr	r0, [pc, #96]	; 167e0 <flatcc_builder_append_offset_vector@@Base+0xac>
   1677c:	add	r0, pc, r0
   16780:	bl	12078 <__assert_fail@plt>
   16784:	mvn	r2, #-1073741824	; 0xc0000000
   16788:	ldr	r1, [fp, #-16]
   1678c:	ldr	r0, [fp, #-8]
   16790:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   16794:	mov	r3, r0
   16798:	cmp	r3, #0
   1679c:	beq	167a8 <flatcc_builder_append_offset_vector@@Base+0x74>
   167a0:	mov	r3, #0
   167a4:	b	167c4 <flatcc_builder_append_offset_vector@@Base+0x90>
   167a8:	ldr	r3, [fp, #-16]
   167ac:	lsl	r3, r3, #2
   167b0:	mov	r2, r3
   167b4:	ldr	r1, [fp, #-12]
   167b8:	ldr	r0, [fp, #-8]
   167bc:	bl	14090 <flatcc_builder_default_alloc@@Base+0x420>
   167c0:	mov	r3, r0
   167c4:	mov	r0, r3
   167c8:	sub	sp, fp, #4
   167cc:	ldr	fp, [sp]
   167d0:	add	sp, sp, #4
   167d4:	pop	{pc}		; (ldr pc, [sp], #4)
   167d8:	andeq	r5, r0, r4, ror r3
   167dc:			; <UNDEFINED> instruction: 0x00004db0
   167e0:	andeq	r4, r0, r8, asr pc

000167e4 <flatcc_builder_extend_string@@Base>:
   167e4:	str	fp, [sp, #-8]!
   167e8:	str	lr, [sp, #4]
   167ec:	add	fp, sp, #4
   167f0:	sub	sp, sp, #8
   167f4:	str	r0, [fp, #-8]
   167f8:	str	r1, [fp, #-12]
   167fc:	ldr	r3, [fp, #-8]
   16800:	ldr	r3, [r3, #32]
   16804:	ldrh	r3, [r3, #14]
   16808:	cmp	r3, #6
   1680c:	beq	16830 <flatcc_builder_extend_string@@Base+0x4c>
   16810:	ldr	r3, [pc, #96]	; 16878 <flatcc_builder_extend_string@@Base+0x94>
   16814:	add	r3, pc, r3
   16818:	movw	r2, #957	; 0x3bd
   1681c:	ldr	r1, [pc, #88]	; 1687c <flatcc_builder_extend_string@@Base+0x98>
   16820:	add	r1, pc, r1
   16824:	ldr	r0, [pc, #84]	; 16880 <flatcc_builder_extend_string@@Base+0x9c>
   16828:	add	r0, pc, r0
   1682c:	bl	12078 <__assert_fail@plt>
   16830:	mvn	r2, #0
   16834:	ldr	r1, [fp, #-12]
   16838:	ldr	r0, [fp, #-8]
   1683c:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   16840:	mov	r3, r0
   16844:	cmp	r3, #0
   16848:	beq	16854 <flatcc_builder_extend_string@@Base+0x70>
   1684c:	mov	r3, #0
   16850:	b	16864 <flatcc_builder_extend_string@@Base+0x80>
   16854:	ldr	r1, [fp, #-12]
   16858:	ldr	r0, [fp, #-8]
   1685c:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   16860:	mov	r3, r0
   16864:	mov	r0, r3
   16868:	sub	sp, fp, #4
   1686c:	ldr	fp, [sp]
   16870:	add	sp, sp, #4
   16874:	pop	{pc}		; (ldr pc, [sp], #4)
   16878:	andeq	r5, r0, ip, ror #5
   1687c:	andeq	r4, r0, r4, lsl #26
   16880:	andeq	r4, r0, r0, ror #29

00016884 <flatcc_builder_append_string@@Base>:
   16884:	str	fp, [sp, #-8]!
   16888:	str	lr, [sp, #4]
   1688c:	add	fp, sp, #4
   16890:	sub	sp, sp, #16
   16894:	str	r0, [fp, #-8]
   16898:	str	r1, [fp, #-12]
   1689c:	str	r2, [fp, #-16]
   168a0:	ldr	r3, [fp, #-8]
   168a4:	ldr	r3, [r3, #32]
   168a8:	ldrh	r3, [r3, #14]
   168ac:	cmp	r3, #6
   168b0:	beq	168d4 <flatcc_builder_append_string@@Base+0x50>
   168b4:	ldr	r3, [pc, #100]	; 16920 <flatcc_builder_append_string@@Base+0x9c>
   168b8:	add	r3, pc, r3
   168bc:	movw	r2, #966	; 0x3c6
   168c0:	ldr	r1, [pc, #92]	; 16924 <flatcc_builder_append_string@@Base+0xa0>
   168c4:	add	r1, pc, r1
   168c8:	ldr	r0, [pc, #88]	; 16928 <flatcc_builder_append_string@@Base+0xa4>
   168cc:	add	r0, pc, r0
   168d0:	bl	12078 <__assert_fail@plt>
   168d4:	mvn	r2, #0
   168d8:	ldr	r1, [fp, #-16]
   168dc:	ldr	r0, [fp, #-8]
   168e0:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   168e4:	mov	r3, r0
   168e8:	cmp	r3, #0
   168ec:	beq	168f8 <flatcc_builder_append_string@@Base+0x74>
   168f0:	mov	r3, #0
   168f4:	b	1690c <flatcc_builder_append_string@@Base+0x88>
   168f8:	ldr	r2, [fp, #-16]
   168fc:	ldr	r1, [fp, #-12]
   16900:	ldr	r0, [fp, #-8]
   16904:	bl	14090 <flatcc_builder_default_alloc@@Base+0x420>
   16908:	mov	r3, r0
   1690c:	mov	r0, r3
   16910:	sub	sp, fp, #4
   16914:	ldr	fp, [sp]
   16918:	add	sp, sp, #4
   1691c:	pop	{pc}		; (ldr pc, [sp], #4)
   16920:	andeq	r5, r0, r8, ror #4
   16924:	andeq	r4, r0, r0, ror #24
   16928:	andeq	r4, r0, ip, lsr lr

0001692c <flatcc_builder_append_string_str@@Base>:
   1692c:	str	fp, [sp, #-8]!
   16930:	str	lr, [sp, #4]
   16934:	add	fp, sp, #4
   16938:	sub	sp, sp, #8
   1693c:	str	r0, [fp, #-8]
   16940:	str	r1, [fp, #-12]
   16944:	ldr	r0, [fp, #-12]
   16948:	bl	12024 <strlen@plt>
   1694c:	mov	r3, r0
   16950:	mov	r2, r3
   16954:	ldr	r1, [fp, #-12]
   16958:	ldr	r0, [fp, #-8]
   1695c:	bl	16884 <flatcc_builder_append_string@@Base>
   16960:	mov	r3, r0
   16964:	mov	r0, r3
   16968:	sub	sp, fp, #4
   1696c:	ldr	fp, [sp]
   16970:	add	sp, sp, #4
   16974:	pop	{pc}		; (ldr pc, [sp], #4)

00016978 <flatcc_builder_append_string_strn@@Base>:
   16978:	str	fp, [sp, #-8]!
   1697c:	str	lr, [sp, #4]
   16980:	add	fp, sp, #4
   16984:	sub	sp, sp, #16
   16988:	str	r0, [fp, #-8]
   1698c:	str	r1, [fp, #-12]
   16990:	str	r2, [fp, #-16]
   16994:	ldr	r1, [fp, #-16]
   16998:	ldr	r0, [fp, #-12]
   1699c:	bl	13c10 <main@@Base+0x4e4>
   169a0:	mov	r3, r0
   169a4:	mov	r2, r3
   169a8:	ldr	r1, [fp, #-12]
   169ac:	ldr	r0, [fp, #-8]
   169b0:	bl	16884 <flatcc_builder_append_string@@Base>
   169b4:	mov	r3, r0
   169b8:	mov	r0, r3
   169bc:	sub	sp, fp, #4
   169c0:	ldr	fp, [sp]
   169c4:	add	sp, sp, #4
   169c8:	pop	{pc}		; (ldr pc, [sp], #4)

000169cc <flatcc_builder_truncate_vector@@Base>:
   169cc:	str	fp, [sp, #-8]!
   169d0:	str	lr, [sp, #4]
   169d4:	add	fp, sp, #4
   169d8:	sub	sp, sp, #8
   169dc:	str	r0, [fp, #-8]
   169e0:	str	r1, [fp, #-12]
   169e4:	ldr	r3, [fp, #-8]
   169e8:	ldr	r3, [r3, #32]
   169ec:	ldrh	r3, [r3, #14]
   169f0:	cmp	r3, #4
   169f4:	beq	16a18 <flatcc_builder_truncate_vector@@Base+0x4c>
   169f8:	ldr	r3, [pc, #200]	; 16ac8 <flatcc_builder_truncate_vector@@Base+0xfc>
   169fc:	add	r3, pc, r3
   16a00:	movw	r2, #985	; 0x3d9
   16a04:	ldr	r1, [pc, #192]	; 16acc <flatcc_builder_truncate_vector@@Base+0x100>
   16a08:	add	r1, pc, r1
   16a0c:	ldr	r0, [pc, #188]	; 16ad0 <flatcc_builder_truncate_vector@@Base+0x104>
   16a10:	add	r0, pc, r0
   16a14:	bl	12078 <__assert_fail@plt>
   16a18:	ldr	r3, [fp, #-8]
   16a1c:	ldr	r3, [r3, #32]
   16a20:	ldr	r3, [r3, #20]
   16a24:	ldr	r2, [fp, #-12]
   16a28:	cmp	r2, r3
   16a2c:	bls	16a70 <flatcc_builder_truncate_vector@@Base+0xa4>
   16a30:	ldr	r3, [fp, #-8]
   16a34:	ldr	r3, [r3, #32]
   16a38:	ldr	r3, [r3, #20]
   16a3c:	ldr	r2, [fp, #-12]
   16a40:	cmp	r2, r3
   16a44:	bls	16a68 <flatcc_builder_truncate_vector@@Base+0x9c>
   16a48:	ldr	r3, [pc, #132]	; 16ad4 <flatcc_builder_truncate_vector@@Base+0x108>
   16a4c:	add	r3, pc, r3
   16a50:	movw	r2, #986	; 0x3da
   16a54:	ldr	r1, [pc, #124]	; 16ad8 <flatcc_builder_truncate_vector@@Base+0x10c>
   16a58:	add	r1, pc, r1
   16a5c:	ldr	r0, [pc, #120]	; 16adc <flatcc_builder_truncate_vector@@Base+0x110>
   16a60:	add	r0, pc, r0
   16a64:	bl	12078 <__assert_fail@plt>
   16a68:	mvn	r3, #0
   16a6c:	b	16ab4 <flatcc_builder_truncate_vector@@Base+0xe8>
   16a70:	ldr	r3, [fp, #-8]
   16a74:	ldr	r3, [r3, #32]
   16a78:	ldr	r1, [r3, #20]
   16a7c:	ldr	r3, [fp, #-8]
   16a80:	ldr	r3, [r3, #32]
   16a84:	ldr	r2, [fp, #-12]
   16a88:	sub	r2, r1, r2
   16a8c:	str	r2, [r3, #20]
   16a90:	ldr	r3, [fp, #-8]
   16a94:	ldr	r3, [r3, #32]
   16a98:	ldr	r3, [r3, #16]
   16a9c:	ldr	r2, [fp, #-12]
   16aa0:	mul	r3, r2, r3
   16aa4:	mov	r1, r3
   16aa8:	ldr	r0, [fp, #-8]
   16aac:	bl	14028 <flatcc_builder_default_alloc@@Base+0x3b8>
   16ab0:	mov	r3, #0
   16ab4:	mov	r0, r3
   16ab8:	sub	sp, fp, #4
   16abc:	ldr	fp, [sp]
   16ac0:	add	sp, sp, #4
   16ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ac8:	andeq	r5, r0, r4, asr #2
   16acc:	andeq	r4, r0, ip, lsl fp
   16ad0:	andeq	r4, r0, r8, asr ip
   16ad4:	strdeq	r5, [r0], -r4
   16ad8:	andeq	r4, r0, ip, asr #21
   16adc:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>

00016ae0 <flatcc_builder_truncate_offset_vector@@Base>:
   16ae0:	str	fp, [sp, #-8]!
   16ae4:	str	lr, [sp, #4]
   16ae8:	add	fp, sp, #4
   16aec:	sub	sp, sp, #8
   16af0:	str	r0, [fp, #-8]
   16af4:	str	r1, [fp, #-12]
   16af8:	ldr	r3, [fp, #-8]
   16afc:	ldr	r3, [r3, #32]
   16b00:	ldrh	r3, [r3, #14]
   16b04:	cmp	r3, #5
   16b08:	beq	16b2c <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   16b0c:	ldr	r3, [pc, #200]	; 16bdc <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16b10:	add	r3, pc, r3
   16b14:	movw	r2, #994	; 0x3e2
   16b18:	ldr	r1, [pc, #192]	; 16be0 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16b1c:	add	r1, pc, r1
   16b20:	ldr	r0, [pc, #188]	; 16be4 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16b24:	add	r0, pc, r0
   16b28:	bl	12078 <__assert_fail@plt>
   16b2c:	ldr	r3, [fp, #-8]
   16b30:	ldr	r3, [r3, #32]
   16b34:	ldr	r3, [r3, #20]
   16b38:	ldr	r2, [fp, #-12]
   16b3c:	cmp	r2, r3
   16b40:	bls	16b84 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   16b44:	ldr	r3, [fp, #-8]
   16b48:	ldr	r3, [r3, #32]
   16b4c:	ldr	r3, [r3, #20]
   16b50:	ldr	r2, [fp, #-12]
   16b54:	cmp	r2, r3
   16b58:	bls	16b7c <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   16b5c:	ldr	r3, [pc, #132]	; 16be8 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16b60:	add	r3, pc, r3
   16b64:	movw	r2, #995	; 0x3e3
   16b68:	ldr	r1, [pc, #124]	; 16bec <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   16b6c:	add	r1, pc, r1
   16b70:	ldr	r0, [pc, #120]	; 16bf0 <flatcc_builder_truncate_offset_vector@@Base+0x110>
   16b74:	add	r0, pc, r0
   16b78:	bl	12078 <__assert_fail@plt>
   16b7c:	mvn	r3, #0
   16b80:	b	16bc8 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   16b84:	ldr	r3, [fp, #-8]
   16b88:	ldr	r3, [r3, #32]
   16b8c:	ldr	r1, [r3, #20]
   16b90:	ldr	r3, [fp, #-8]
   16b94:	ldr	r3, [r3, #32]
   16b98:	ldr	r2, [fp, #-12]
   16b9c:	sub	r2, r1, r2
   16ba0:	str	r2, [r3, #20]
   16ba4:	ldr	r3, [fp, #-8]
   16ba8:	ldr	r3, [r3, #32]
   16bac:	ldr	r3, [r3, #16]
   16bb0:	ldr	r2, [fp, #-12]
   16bb4:	mul	r3, r2, r3
   16bb8:	mov	r1, r3
   16bbc:	ldr	r0, [fp, #-8]
   16bc0:	bl	14028 <flatcc_builder_default_alloc@@Base+0x3b8>
   16bc4:	mov	r3, #0
   16bc8:	mov	r0, r3
   16bcc:	sub	sp, fp, #4
   16bd0:	ldr	fp, [sp]
   16bd4:	add	sp, sp, #4
   16bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bdc:	andeq	r5, r0, r0, asr r0
   16be0:	andeq	r4, r0, r8, lsl #20
   16be4:			; <UNDEFINED> instruction: 0x00004bb0
   16be8:	andeq	r5, r0, r0
   16bec:			; <UNDEFINED> instruction: 0x000049b8
   16bf0:	andeq	r4, r0, r4, ror #23

00016bf4 <flatcc_builder_truncate_string@@Base>:
   16bf4:	str	fp, [sp, #-8]!
   16bf8:	str	lr, [sp, #4]
   16bfc:	add	fp, sp, #4
   16c00:	sub	sp, sp, #8
   16c04:	str	r0, [fp, #-8]
   16c08:	str	r1, [fp, #-12]
   16c0c:	ldr	r3, [fp, #-8]
   16c10:	ldr	r3, [r3, #32]
   16c14:	ldrh	r3, [r3, #14]
   16c18:	cmp	r3, #6
   16c1c:	beq	16c40 <flatcc_builder_truncate_string@@Base+0x4c>
   16c20:	ldr	r3, [pc, #180]	; 16cdc <flatcc_builder_truncate_string@@Base+0xe8>
   16c24:	add	r3, pc, r3
   16c28:	movw	r2, #1003	; 0x3eb
   16c2c:	ldr	r1, [pc, #172]	; 16ce0 <flatcc_builder_truncate_string@@Base+0xec>
   16c30:	add	r1, pc, r1
   16c34:	ldr	r0, [pc, #168]	; 16ce4 <flatcc_builder_truncate_string@@Base+0xf0>
   16c38:	add	r0, pc, r0
   16c3c:	bl	12078 <__assert_fail@plt>
   16c40:	ldr	r3, [fp, #-8]
   16c44:	ldr	r3, [r3, #32]
   16c48:	ldr	r3, [r3, #20]
   16c4c:	ldr	r2, [fp, #-12]
   16c50:	cmp	r2, r3
   16c54:	bls	16c98 <flatcc_builder_truncate_string@@Base+0xa4>
   16c58:	ldr	r3, [fp, #-8]
   16c5c:	ldr	r3, [r3, #32]
   16c60:	ldr	r3, [r3, #20]
   16c64:	ldr	r2, [fp, #-12]
   16c68:	cmp	r2, r3
   16c6c:	bls	16c90 <flatcc_builder_truncate_string@@Base+0x9c>
   16c70:	ldr	r3, [pc, #112]	; 16ce8 <flatcc_builder_truncate_string@@Base+0xf4>
   16c74:	add	r3, pc, r3
   16c78:	mov	r2, #1004	; 0x3ec
   16c7c:	ldr	r1, [pc, #104]	; 16cec <flatcc_builder_truncate_string@@Base+0xf8>
   16c80:	add	r1, pc, r1
   16c84:	ldr	r0, [pc, #100]	; 16cf0 <flatcc_builder_truncate_string@@Base+0xfc>
   16c88:	add	r0, pc, r0
   16c8c:	bl	12078 <__assert_fail@plt>
   16c90:	mvn	r3, #0
   16c94:	b	16cc8 <flatcc_builder_truncate_string@@Base+0xd4>
   16c98:	ldr	r3, [fp, #-8]
   16c9c:	ldr	r3, [r3, #32]
   16ca0:	ldr	r1, [r3, #20]
   16ca4:	ldr	r3, [fp, #-8]
   16ca8:	ldr	r3, [r3, #32]
   16cac:	ldr	r2, [fp, #-12]
   16cb0:	sub	r2, r1, r2
   16cb4:	str	r2, [r3, #20]
   16cb8:	ldr	r1, [fp, #-12]
   16cbc:	ldr	r0, [fp, #-8]
   16cc0:	bl	14028 <flatcc_builder_default_alloc@@Base+0x3b8>
   16cc4:	mov	r3, #0
   16cc8:	mov	r0, r3
   16ccc:	sub	sp, fp, #4
   16cd0:	ldr	fp, [sp]
   16cd4:	add	sp, sp, #4
   16cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cdc:	andeq	r4, r0, r4, ror #30
   16ce0:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   16ce4:	ldrdeq	r4, [r0], -r0
   16ce8:	andeq	r4, r0, r4, lsl pc
   16cec:	andeq	r4, r0, r4, lsr #17
   16cf0:	andeq	r4, r0, ip, lsl #22

00016cf4 <flatcc_builder_start_vector@@Base>:
   16cf4:	str	fp, [sp, #-8]!
   16cf8:	str	lr, [sp, #4]
   16cfc:	add	fp, sp, #4
   16d00:	sub	sp, sp, #16
   16d04:	str	r0, [fp, #-8]
   16d08:	str	r1, [fp, #-12]
   16d0c:	str	r3, [fp, #-20]	; 0xffffffec
   16d10:	mov	r3, r2
   16d14:	strh	r3, [fp, #-14]
   16d18:	sub	r3, fp, #14
   16d1c:	mov	r1, #4
   16d20:	mov	r0, r3
   16d24:	bl	14c70 <flatcc_builder_clear@@Base+0x10c>
   16d28:	ldrh	r3, [fp, #-14]
   16d2c:	mov	r1, r3
   16d30:	ldr	r0, [fp, #-8]
   16d34:	bl	14fe4 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16d38:	mov	r3, r0
   16d3c:	cmp	r3, #0
   16d40:	beq	16d4c <flatcc_builder_start_vector@@Base+0x58>
   16d44:	mvn	r3, #0
   16d48:	b	16d9c <flatcc_builder_start_vector@@Base+0xa8>
   16d4c:	ldr	r3, [fp, #-8]
   16d50:	ldr	r3, [r3, #32]
   16d54:	ldr	r2, [fp, #-12]
   16d58:	str	r2, [r3, #16]
   16d5c:	ldr	r3, [fp, #-8]
   16d60:	ldr	r3, [r3, #32]
   16d64:	mov	r2, #0
   16d68:	str	r2, [r3, #20]
   16d6c:	ldr	r3, [fp, #-8]
   16d70:	ldr	r3, [r3, #32]
   16d74:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d78:	str	r2, [r3, #24]
   16d7c:	ldr	r3, [fp, #-8]
   16d80:	ldr	r3, [r3, #32]
   16d84:	mov	r2, #4
   16d88:	strh	r2, [r3, #14]
   16d8c:	mvn	r1, #3
   16d90:	ldr	r0, [fp, #-8]
   16d94:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   16d98:	mov	r3, #0
   16d9c:	mov	r0, r3
   16da0:	sub	sp, fp, #4
   16da4:	ldr	fp, [sp]
   16da8:	add	sp, sp, #4
   16dac:	pop	{pc}		; (ldr pc, [sp], #4)

00016db0 <flatcc_builder_start_offset_vector@@Base>:
   16db0:	str	fp, [sp, #-8]!
   16db4:	str	lr, [sp, #4]
   16db8:	add	fp, sp, #4
   16dbc:	sub	sp, sp, #8
   16dc0:	str	r0, [fp, #-8]
   16dc4:	mov	r1, #4
   16dc8:	ldr	r0, [fp, #-8]
   16dcc:	bl	14fe4 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16dd0:	mov	r3, r0
   16dd4:	cmp	r3, #0
   16dd8:	beq	16de4 <flatcc_builder_start_offset_vector@@Base+0x34>
   16ddc:	mvn	r3, #0
   16de0:	b	16e24 <flatcc_builder_start_offset_vector@@Base+0x74>
   16de4:	ldr	r3, [fp, #-8]
   16de8:	ldr	r3, [r3, #32]
   16dec:	mov	r2, #4
   16df0:	str	r2, [r3, #16]
   16df4:	ldr	r3, [fp, #-8]
   16df8:	ldr	r3, [r3, #32]
   16dfc:	mov	r2, #0
   16e00:	str	r2, [r3, #20]
   16e04:	ldr	r3, [fp, #-8]
   16e08:	ldr	r3, [r3, #32]
   16e0c:	mov	r2, #5
   16e10:	strh	r2, [r3, #14]
   16e14:	mvn	r1, #3
   16e18:	ldr	r0, [fp, #-8]
   16e1c:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   16e20:	mov	r3, #0
   16e24:	mov	r0, r3
   16e28:	sub	sp, fp, #4
   16e2c:	ldr	fp, [sp]
   16e30:	add	sp, sp, #4
   16e34:	pop	{pc}		; (ldr pc, [sp], #4)

00016e38 <flatcc_builder_create_offset_vector@@Base>:
   16e38:	str	fp, [sp, #-8]!
   16e3c:	str	lr, [sp, #4]
   16e40:	add	fp, sp, #4
   16e44:	sub	sp, sp, #24
   16e48:	str	r0, [fp, #-16]
   16e4c:	str	r1, [fp, #-20]	; 0xffffffec
   16e50:	str	r2, [fp, #-24]	; 0xffffffe8
   16e54:	ldr	r0, [fp, #-16]
   16e58:	bl	16db0 <flatcc_builder_start_offset_vector@@Base>
   16e5c:	mov	r3, r0
   16e60:	cmp	r3, #0
   16e64:	beq	16e70 <flatcc_builder_create_offset_vector@@Base+0x38>
   16e68:	mov	r3, #0
   16e6c:	b	16eb8 <flatcc_builder_create_offset_vector@@Base+0x80>
   16e70:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16e74:	ldr	r0, [fp, #-16]
   16e78:	bl	165f4 <flatcc_builder_extend_offset_vector@@Base>
   16e7c:	str	r0, [fp, #-8]
   16e80:	ldr	r3, [fp, #-8]
   16e84:	cmp	r3, #0
   16e88:	bne	16e94 <flatcc_builder_create_offset_vector@@Base+0x5c>
   16e8c:	mov	r3, #0
   16e90:	b	16eb8 <flatcc_builder_create_offset_vector@@Base+0x80>
   16e94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e98:	lsl	r3, r3, #2
   16e9c:	mov	r2, r3
   16ea0:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ea4:	ldr	r0, [fp, #-8]
   16ea8:	bl	11fb8 <memcpy@plt>
   16eac:	ldr	r0, [fp, #-16]
   16eb0:	bl	184b8 <flatcc_builder_end_offset_vector@@Base>
   16eb4:	mov	r3, r0
   16eb8:	mov	r0, r3
   16ebc:	sub	sp, fp, #4
   16ec0:	ldr	fp, [sp]
   16ec4:	add	sp, sp, #4
   16ec8:	pop	{pc}		; (ldr pc, [sp], #4)

00016ecc <flatcc_builder_start_string@@Base>:
   16ecc:	str	fp, [sp, #-8]!
   16ed0:	str	lr, [sp, #4]
   16ed4:	add	fp, sp, #4
   16ed8:	sub	sp, sp, #8
   16edc:	str	r0, [fp, #-8]
   16ee0:	mov	r1, #1
   16ee4:	ldr	r0, [fp, #-8]
   16ee8:	bl	14fe4 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16eec:	mov	r3, r0
   16ef0:	cmp	r3, #0
   16ef4:	beq	16f00 <flatcc_builder_start_string@@Base+0x34>
   16ef8:	mvn	r3, #0
   16efc:	b	16f40 <flatcc_builder_start_string@@Base+0x74>
   16f00:	ldr	r3, [fp, #-8]
   16f04:	ldr	r3, [r3, #32]
   16f08:	mov	r2, #1
   16f0c:	str	r2, [r3, #16]
   16f10:	ldr	r3, [fp, #-8]
   16f14:	ldr	r3, [r3, #32]
   16f18:	mov	r2, #0
   16f1c:	str	r2, [r3, #20]
   16f20:	ldr	r3, [fp, #-8]
   16f24:	ldr	r3, [r3, #32]
   16f28:	mov	r2, #6
   16f2c:	strh	r2, [r3, #14]
   16f30:	mvn	r1, #3
   16f34:	ldr	r0, [fp, #-8]
   16f38:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   16f3c:	mov	r3, #0
   16f40:	mov	r0, r3
   16f44:	sub	sp, fp, #4
   16f48:	ldr	fp, [sp]
   16f4c:	add	sp, sp, #4
   16f50:	pop	{pc}		; (ldr pc, [sp], #4)

00016f54 <flatcc_builder_reserve_table@@Base>:
   16f54:	str	fp, [sp, #-8]!
   16f58:	str	lr, [sp, #4]
   16f5c:	add	fp, sp, #4
   16f60:	sub	sp, sp, #8
   16f64:	str	r0, [fp, #-8]
   16f68:	str	r1, [fp, #-12]
   16f6c:	ldr	r3, [fp, #-12]
   16f70:	cmp	r3, #0
   16f74:	bge	16f98 <flatcc_builder_reserve_table@@Base+0x44>
   16f78:	ldr	r3, [pc, #60]	; 16fbc <flatcc_builder_reserve_table@@Base+0x68>
   16f7c:	add	r3, pc, r3
   16f80:	movw	r2, #1065	; 0x429
   16f84:	ldr	r1, [pc, #52]	; 16fc0 <flatcc_builder_reserve_table@@Base+0x6c>
   16f88:	add	r1, pc, r1
   16f8c:	ldr	r0, [pc, #48]	; 16fc4 <flatcc_builder_reserve_table@@Base+0x70>
   16f90:	add	r0, pc, r0
   16f94:	bl	12078 <__assert_fail@plt>
   16f98:	ldr	r1, [fp, #-12]
   16f9c:	ldr	r0, [fp, #-8]
   16fa0:	bl	14420 <flatcc_builder_default_alloc@@Base+0x7b0>
   16fa4:	mov	r3, r0
   16fa8:	mov	r0, r3
   16fac:	sub	sp, fp, #4
   16fb0:	ldr	fp, [sp]
   16fb4:	add	sp, sp, #4
   16fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fbc:	andeq	r4, r0, ip, lsr #24
   16fc0:	muleq	r0, ip, r5
   16fc4:	andeq	r4, r0, r8, lsr #16

00016fc8 <flatcc_builder_start_table@@Base>:
   16fc8:	str	fp, [sp, #-8]!
   16fcc:	str	lr, [sp, #4]
   16fd0:	add	fp, sp, #4
   16fd4:	sub	sp, sp, #8
   16fd8:	str	r0, [fp, #-8]
   16fdc:	str	r1, [fp, #-12]
   16fe0:	mov	r1, #4
   16fe4:	ldr	r0, [fp, #-8]
   16fe8:	bl	14fe4 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16fec:	mov	r3, r0
   16ff0:	cmp	r3, #0
   16ff4:	beq	17000 <flatcc_builder_start_table@@Base+0x38>
   16ff8:	mvn	r3, #0
   16ffc:	b	170e0 <flatcc_builder_start_table@@Base+0x118>
   17000:	ldr	r3, [fp, #-8]
   17004:	ldr	r3, [r3, #4]
   17008:	mov	r1, r3
   1700c:	ldr	r3, [fp, #-8]
   17010:	ldr	r3, [r3, #52]	; 0x34
   17014:	mov	r2, r3
   17018:	ldr	r3, [fp, #-8]
   1701c:	ldr	r3, [r3, #32]
   17020:	sub	r2, r1, r2
   17024:	str	r2, [r3, #16]
   17028:	ldr	r3, [fp, #-8]
   1702c:	ldr	r3, [r3]
   17030:	mov	r1, r3
   17034:	ldr	r3, [fp, #-8]
   17038:	ldr	r3, [r3, #76]	; 0x4c
   1703c:	mov	r2, r3
   17040:	ldr	r3, [fp, #-8]
   17044:	ldr	r3, [r3, #32]
   17048:	sub	r2, r1, r2
   1704c:	str	r2, [r3, #20]
   17050:	ldr	r3, [fp, #-8]
   17054:	ldr	r3, [r3, #32]
   17058:	ldr	r2, [fp, #-8]
   1705c:	ldr	r2, [r2, #12]
   17060:	str	r2, [r3, #24]
   17064:	ldr	r3, [fp, #-8]
   17068:	ldr	r3, [r3, #32]
   1706c:	ldr	r2, [fp, #-8]
   17070:	ldrh	r2, [r2, #8]
   17074:	strh	r2, [r3, #28]
   17078:	ldr	r3, [fp, #-8]
   1707c:	mov	r2, #0
   17080:	str	r2, [r3, #12]
   17084:	ldr	r2, [fp, #-8]
   17088:	movw	r3, #15186	; 0x3b52
   1708c:	movt	r3, #12137	; 0x2f69
   17090:	str	r3, [r2, #12]
   17094:	ldr	r3, [fp, #-8]
   17098:	mov	r2, #0
   1709c:	strh	r2, [r3, #8]
   170a0:	ldr	r3, [fp, #-8]
   170a4:	ldr	r3, [r3, #32]
   170a8:	mov	r2, #3
   170ac:	strh	r2, [r3, #14]
   170b0:	ldr	r1, [fp, #-12]
   170b4:	ldr	r0, [fp, #-8]
   170b8:	bl	14420 <flatcc_builder_default_alloc@@Base+0x7b0>
   170bc:	mov	r3, r0
   170c0:	cmp	r3, #0
   170c4:	beq	170d0 <flatcc_builder_start_table@@Base+0x108>
   170c8:	mvn	r3, #0
   170cc:	b	170e0 <flatcc_builder_start_table@@Base+0x118>
   170d0:	movw	r1, #65532	; 0xfffc
   170d4:	ldr	r0, [fp, #-8]
   170d8:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   170dc:	mov	r3, #0
   170e0:	mov	r0, r3
   170e4:	sub	sp, fp, #4
   170e8:	ldr	fp, [sp]
   170ec:	add	sp, sp, #4
   170f0:	pop	{pc}		; (ldr pc, [sp], #4)

000170f4 <flatcc_builder_create_vtable@@Base>:
   170f4:	str	fp, [sp, #-8]!
   170f8:	str	lr, [sp, #4]
   170fc:	add	fp, sp, #4
   17100:	sub	sp, sp, #96	; 0x60
   17104:	str	r0, [fp, #-88]	; 0xffffffa8
   17108:	str	r1, [fp, #-92]	; 0xffffffa4
   1710c:	mov	r3, r2
   17110:	strh	r3, [fp, #-94]	; 0xffffffa2
   17114:	mov	r3, #0
   17118:	str	r3, [fp, #-80]	; 0xffffffb0
   1711c:	mov	r3, #0
   17120:	str	r3, [fp, #-76]	; 0xffffffb4
   17124:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   17128:	cmp	r3, #0
   1712c:	beq	17184 <flatcc_builder_create_vtable@@Base+0x90>
   17130:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17134:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   17138:	add	r3, r2, r3
   1713c:	str	r3, [fp, #-80]	; 0xffffffb0
   17140:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17144:	add	r3, r3, #1
   17148:	lsl	r3, r3, #3
   1714c:	sub	r2, fp, #4
   17150:	add	r3, r2, r3
   17154:	ldr	r2, [fp, #-92]	; 0xffffffa4
   17158:	str	r2, [r3, #-76]	; 0xffffffb4
   1715c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17160:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   17164:	add	r3, r3, #1
   17168:	lsl	r3, r3, #3
   1716c:	sub	r1, fp, #4
   17170:	add	r3, r1, r3
   17174:	str	r2, [r3, #-72]	; 0xffffffb8
   17178:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1717c:	add	r3, r3, #1
   17180:	str	r3, [fp, #-76]	; 0xffffffb4
   17184:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17188:	ldr	r3, [r3, #152]	; 0x98
   1718c:	cmp	r3, #0
   17190:	bne	171cc <flatcc_builder_create_vtable@@Base+0xd8>
   17194:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17198:	ldr	r3, [r3, #180]	; 0xb4
   1719c:	cmp	r3, #0
   171a0:	bne	171cc <flatcc_builder_create_vtable@@Base+0xd8>
   171a4:	sub	r3, fp, #80	; 0x50
   171a8:	mov	r1, r3
   171ac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   171b0:	bl	15438 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   171b4:	str	r0, [fp, #-8]
   171b8:	ldr	r3, [fp, #-8]
   171bc:	cmp	r3, #0
   171c0:	bne	17200 <flatcc_builder_create_vtable@@Base+0x10c>
   171c4:	mov	r3, #0
   171c8:	b	17204 <flatcc_builder_create_vtable@@Base+0x110>
   171cc:	sub	r3, fp, #80	; 0x50
   171d0:	mov	r1, r3
   171d4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   171d8:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   171dc:	str	r0, [fp, #-8]
   171e0:	ldr	r3, [fp, #-8]
   171e4:	cmp	r3, #0
   171e8:	bne	171f4 <flatcc_builder_create_vtable@@Base+0x100>
   171ec:	mov	r3, #0
   171f0:	b	17204 <flatcc_builder_create_vtable@@Base+0x110>
   171f4:	ldr	r3, [fp, #-8]
   171f8:	add	r3, r3, #1
   171fc:	str	r3, [fp, #-8]
   17200:	ldr	r3, [fp, #-8]
   17204:	mov	r0, r3
   17208:	sub	sp, fp, #4
   1720c:	ldr	fp, [sp]
   17210:	add	sp, sp, #4
   17214:	pop	{pc}		; (ldr pc, [sp], #4)

00017218 <flatcc_builder_create_cached_vtable@@Base>:
   17218:	str	fp, [sp, #-8]!
   1721c:	str	lr, [sp, #4]
   17220:	add	fp, sp, #4
   17224:	sub	sp, sp, #48	; 0x30
   17228:	str	r0, [fp, #-32]	; 0xffffffe0
   1722c:	str	r1, [fp, #-36]	; 0xffffffdc
   17230:	str	r3, [fp, #-44]	; 0xffffffd4
   17234:	mov	r3, r2
   17238:	strh	r3, [fp, #-38]	; 0xffffffda
   1723c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17240:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17244:	bl	146a8 <flatcc_builder_default_alloc@@Base+0xa38>
   17248:	str	r0, [fp, #-20]	; 0xffffffec
   1724c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17250:	cmp	r3, #0
   17254:	bne	17260 <flatcc_builder_create_cached_vtable@@Base+0x48>
   17258:	mov	r3, #0
   1725c:	b	17524 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17260:	ldr	r3, [fp, #-20]	; 0xffffffec
   17264:	str	r3, [fp, #-12]
   17268:	ldr	r3, [fp, #-12]
   1726c:	ldr	r3, [r3]
   17270:	str	r3, [fp, #-16]
   17274:	mov	r3, #0
   17278:	str	r3, [fp, #-8]
   1727c:	b	17380 <flatcc_builder_create_cached_vtable@@Base+0x168>
   17280:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17284:	ldr	r2, [r3, #100]	; 0x64
   17288:	ldr	r3, [fp, #-16]
   1728c:	add	r3, r2, r3
   17290:	str	r3, [fp, #-24]	; 0xffffffe8
   17294:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17298:	ldr	r2, [r3, #68]	; 0x44
   1729c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172a0:	ldr	r3, [r3, #8]
   172a4:	add	r3, r2, r3
   172a8:	str	r3, [fp, #-28]	; 0xffffffe4
   172ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   172b0:	ldrh	r3, [r3]
   172b4:	ldrh	r2, [fp, #-38]	; 0xffffffda
   172b8:	cmp	r2, r3
   172bc:	bne	172e0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   172c0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   172c4:	mov	r2, r3
   172c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   172cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   172d0:	bl	11fc4 <memcmp@plt>
   172d4:	mov	r3, r0
   172d8:	cmp	r3, #0
   172dc:	beq	172fc <flatcc_builder_create_cached_vtable@@Base+0xe4>
   172e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172e4:	add	r3, r3, #12
   172e8:	str	r3, [fp, #-12]
   172ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172f0:	ldr	r3, [r3, #12]
   172f4:	str	r3, [fp, #-16]
   172f8:	b	17380 <flatcc_builder_create_cached_vtable@@Base+0x168>
   172fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17300:	ldr	r2, [r3, #4]
   17304:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17308:	ldr	r3, [r3, #152]	; 0x98
   1730c:	cmp	r2, r3
   17310:	beq	17338 <flatcc_builder_create_cached_vtable@@Base+0x120>
   17314:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17318:	str	r3, [fp, #-8]
   1731c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17320:	add	r3, r3, #12
   17324:	str	r3, [fp, #-12]
   17328:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1732c:	ldr	r3, [r3, #12]
   17330:	str	r3, [fp, #-16]
   17334:	b	17380 <flatcc_builder_create_cached_vtable@@Base+0x168>
   17338:	ldr	r2, [fp, #-12]
   1733c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17340:	cmp	r2, r3
   17344:	beq	17374 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   17348:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1734c:	ldr	r2, [r3, #12]
   17350:	ldr	r3, [fp, #-12]
   17354:	str	r2, [r3]
   17358:	ldr	r3, [fp, #-20]	; 0xffffffec
   1735c:	ldr	r2, [r3]
   17360:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17364:	str	r2, [r3, #12]
   17368:	ldr	r3, [fp, #-20]	; 0xffffffec
   1736c:	ldr	r2, [fp, #-16]
   17370:	str	r2, [r3]
   17374:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17378:	ldr	r3, [r3]
   1737c:	b	17524 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17380:	ldr	r3, [fp, #-16]
   17384:	cmp	r3, #0
   17388:	bne	17280 <flatcc_builder_create_cached_vtable@@Base+0x68>
   1738c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17390:	ldr	r2, [r3, #124]	; 0x7c
   17394:	mov	r3, #0
   17398:	str	r3, [sp]
   1739c:	mov	r3, #16
   173a0:	mov	r1, #6
   173a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173a8:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   173ac:	str	r0, [fp, #-24]	; 0xffffffe8
   173b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173b4:	cmp	r3, #0
   173b8:	bne	173c4 <flatcc_builder_create_cached_vtable@@Base+0x1ac>
   173bc:	mov	r3, #0
   173c0:	b	17524 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   173c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173c8:	ldr	r3, [r3, #124]	; 0x7c
   173cc:	str	r3, [fp, #-16]
   173d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173d4:	ldr	r3, [r3, #124]	; 0x7c
   173d8:	add	r2, r3, #16
   173dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173e0:	str	r2, [r3, #124]	; 0x7c
   173e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173e8:	ldr	r2, [r3, #152]	; 0x98
   173ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173f0:	str	r2, [r3, #4]
   173f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   173f8:	ldr	r2, [r3]
   173fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17400:	str	r2, [r3, #12]
   17404:	ldr	r3, [fp, #-20]	; 0xffffffec
   17408:	ldr	r2, [fp, #-16]
   1740c:	str	r2, [r3]
   17410:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17414:	mov	r2, r3
   17418:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1741c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17420:	bl	170f4 <flatcc_builder_create_vtable@@Base>
   17424:	mov	r2, r0
   17428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1742c:	str	r2, [r3]
   17430:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17434:	ldr	r3, [r3]
   17438:	cmp	r3, #0
   1743c:	bne	17448 <flatcc_builder_create_cached_vtable@@Base+0x230>
   17440:	mov	r3, #0
   17444:	b	17524 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17448:	ldr	r3, [fp, #-8]
   1744c:	cmp	r3, #0
   17450:	beq	17468 <flatcc_builder_create_cached_vtable@@Base+0x250>
   17454:	ldr	r3, [fp, #-8]
   17458:	ldr	r2, [r3, #8]
   1745c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17460:	str	r2, [r3, #8]
   17464:	b	1751c <flatcc_builder_create_cached_vtable@@Base+0x304>
   17468:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1746c:	ldr	r3, [r3, #172]	; 0xac
   17470:	cmp	r3, #0
   17474:	beq	174a4 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   17478:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1747c:	ldr	r2, [r3, #172]	; 0xac
   17480:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17484:	ldr	r1, [r3, #120]	; 0x78
   17488:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1748c:	add	r3, r1, r3
   17490:	cmp	r2, r3
   17494:	bcs	174a4 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   17498:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1749c:	bl	1472c <flatcc_builder_flush_vtable_cache@@Base>
   174a0:	b	1751c <flatcc_builder_create_cached_vtable@@Base+0x304>
   174a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174a8:	ldr	r2, [r3, #120]	; 0x78
   174ac:	ldrh	r1, [fp, #-38]	; 0xffffffda
   174b0:	mov	r3, #0
   174b4:	str	r3, [sp]
   174b8:	mov	r3, r1
   174bc:	mov	r1, #2
   174c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174c4:	bl	14334 <flatcc_builder_default_alloc@@Base+0x6c4>
   174c8:	str	r0, [fp, #-28]	; 0xffffffe4
   174cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174d0:	cmp	r3, #0
   174d4:	bne	174e0 <flatcc_builder_create_cached_vtable@@Base+0x2c8>
   174d8:	mvn	r3, #0
   174dc:	b	17524 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   174e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174e4:	ldr	r2, [r3, #120]	; 0x78
   174e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174ec:	str	r2, [r3, #8]
   174f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174f4:	ldr	r2, [r3, #120]	; 0x78
   174f8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   174fc:	add	r2, r2, r3
   17500:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17504:	str	r2, [r3, #120]	; 0x78
   17508:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1750c:	mov	r2, r3
   17510:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17514:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17518:	bl	11fb8 <memcpy@plt>
   1751c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17520:	ldr	r3, [r3]
   17524:	mov	r0, r3
   17528:	sub	sp, fp, #4
   1752c:	ldr	fp, [sp]
   17530:	add	sp, sp, #4
   17534:	pop	{pc}		; (ldr pc, [sp], #4)

00017538 <flatcc_builder_create_table@@Base>:
   17538:	str	r4, [sp, #-12]!
   1753c:	str	fp, [sp, #4]
   17540:	str	lr, [sp, #8]
   17544:	add	fp, sp, #8
   17548:	sub	sp, sp, #124	; 0x7c
   1754c:	str	r0, [fp, #-120]	; 0xffffff88
   17550:	str	r1, [fp, #-124]	; 0xffffff84
   17554:	str	r2, [fp, #-128]	; 0xffffff80
   17558:	strh	r3, [fp, #-130]	; 0xffffff7e
   1755c:	ldr	r4, [pc, #740]	; 17848 <flatcc_builder_create_table@@Base+0x310>
   17560:	add	r4, pc, r4
   17564:	ldr	r3, [fp, #8]
   17568:	cmp	r3, #0
   1756c:	bge	17590 <flatcc_builder_create_table@@Base+0x58>
   17570:	ldr	r3, [pc, #724]	; 1784c <flatcc_builder_create_table@@Base+0x314>
   17574:	add	r3, pc, r3
   17578:	movw	r2, #1237	; 0x4d5
   1757c:	ldr	r1, [pc, #716]	; 17850 <flatcc_builder_create_table@@Base+0x318>
   17580:	add	r1, pc, r1
   17584:	ldr	r0, [pc, #712]	; 17854 <flatcc_builder_create_table@@Base+0x31c>
   17588:	add	r0, pc, r0
   1758c:	bl	12078 <__assert_fail@plt>
   17590:	ldr	r3, [fp, #12]
   17594:	and	r3, r3, #1
   17598:	cmp	r3, #0
   1759c:	bne	175c0 <flatcc_builder_create_table@@Base+0x88>
   175a0:	ldr	r3, [pc, #688]	; 17858 <flatcc_builder_create_table@@Base+0x320>
   175a4:	add	r3, pc, r3
   175a8:	movw	r2, #1243	; 0x4db
   175ac:	ldr	r1, [pc, #680]	; 1785c <flatcc_builder_create_table@@Base+0x324>
   175b0:	add	r1, pc, r1
   175b4:	ldr	r0, [pc, #676]	; 17860 <flatcc_builder_create_table@@Base+0x328>
   175b8:	add	r0, pc, r0
   175bc:	bl	12078 <__assert_fail@plt>
   175c0:	sub	r3, fp, #130	; 0x82
   175c4:	mov	r1, #4
   175c8:	mov	r0, r3
   175cc:	bl	14c70 <flatcc_builder_clear@@Base+0x10c>
   175d0:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   175d4:	mov	r1, r3
   175d8:	ldr	r0, [fp, #-120]	; 0xffffff88
   175dc:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   175e0:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   175e4:	mov	r2, r3
   175e8:	ldr	r1, [fp, #-128]	; 0xffffff80
   175ec:	ldr	r0, [fp, #-120]	; 0xffffff88
   175f0:	bl	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   175f4:	str	r0, [fp, #-20]	; 0xffffffec
   175f8:	ldr	r3, [fp, #-120]	; 0xffffff88
   175fc:	ldr	r3, [r3, #136]	; 0x88
   17600:	mov	r1, r3
   17604:	ldr	r2, [fp, #-20]	; 0xffffffec
   17608:	ldr	r3, [fp, #-128]	; 0xffffff80
   1760c:	add	r3, r2, r3
   17610:	sub	r3, r1, r3
   17614:	sub	r3, r3, #4
   17618:	str	r3, [fp, #-24]	; 0xffffffe8
   1761c:	ldr	r3, [fp, #12]
   17620:	sub	r3, r3, #1
   17624:	str	r3, [fp, #-28]	; 0xffffffe4
   17628:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1762c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17630:	sub	r3, r2, r3
   17634:	str	r3, [fp, #-32]	; 0xffffffe0
   17638:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1763c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17640:	sub	r3, r2, r3
   17644:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17648:	cmp	r2, r3
   1764c:	beq	17658 <flatcc_builder_create_table@@Base+0x120>
   17650:	mvn	r3, #0
   17654:	b	17830 <flatcc_builder_create_table@@Base+0x2f8>
   17658:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1765c:	bl	13b20 <main@@Base+0x3f4>
   17660:	mov	r3, r0
   17664:	str	r3, [fp, #-44]	; 0xffffffd4
   17668:	mov	r3, #0
   1766c:	str	r3, [fp, #-16]
   17670:	b	176e8 <flatcc_builder_create_table@@Base+0x1b0>
   17674:	ldr	r3, [fp, #-16]
   17678:	lsl	r3, r3, #1
   1767c:	ldr	r2, [fp, #4]
   17680:	add	r3, r2, r3
   17684:	ldrh	r3, [r3]
   17688:	mov	r2, r3
   1768c:	ldr	r3, [fp, #-124]	; 0xffffff84
   17690:	add	r3, r2, r3
   17694:	str	r3, [fp, #-36]	; 0xffffffdc
   17698:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1769c:	ldr	r2, [r3]
   176a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176a4:	sub	r3, r2, r3
   176a8:	ldr	r2, [fp, #-16]
   176ac:	lsl	r2, r2, #1
   176b0:	ldr	r1, [fp, #4]
   176b4:	add	r2, r1, r2
   176b8:	ldrh	r2, [r2]
   176bc:	sub	r3, r3, r2
   176c0:	sub	r3, r3, #4
   176c4:	str	r3, [fp, #-40]	; 0xffffffd8
   176c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   176cc:	bl	13b20 <main@@Base+0x3f4>
   176d0:	mov	r2, r0
   176d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   176d8:	str	r2, [r3]
   176dc:	ldr	r3, [fp, #-16]
   176e0:	add	r3, r3, #1
   176e4:	str	r3, [fp, #-16]
   176e8:	ldr	r2, [fp, #-16]
   176ec:	ldr	r3, [fp, #8]
   176f0:	cmp	r2, r3
   176f4:	blt	17674 <flatcc_builder_create_table@@Base+0x13c>
   176f8:	mov	r3, #0
   176fc:	str	r3, [fp, #-116]	; 0xffffff8c
   17700:	mov	r3, #0
   17704:	str	r3, [fp, #-112]	; 0xffffff90
   17708:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1770c:	add	r3, r3, #4
   17710:	str	r3, [fp, #-116]	; 0xffffff8c
   17714:	ldr	r3, [fp, #-112]	; 0xffffff90
   17718:	add	r3, r3, #1
   1771c:	lsl	r3, r3, #3
   17720:	sub	r2, fp, #12
   17724:	add	r3, r2, r3
   17728:	sub	r2, fp, #44	; 0x2c
   1772c:	str	r2, [r3, #-104]	; 0xffffff98
   17730:	ldr	r3, [fp, #-112]	; 0xffffff90
   17734:	add	r3, r3, #1
   17738:	lsl	r3, r3, #3
   1773c:	sub	r2, fp, #12
   17740:	add	r3, r2, r3
   17744:	mov	r2, #4
   17748:	str	r2, [r3, #-100]	; 0xffffff9c
   1774c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17750:	add	r3, r3, #1
   17754:	str	r3, [fp, #-112]	; 0xffffff90
   17758:	ldr	r3, [fp, #-128]	; 0xffffff80
   1775c:	cmp	r3, #0
   17760:	beq	177b8 <flatcc_builder_create_table@@Base+0x280>
   17764:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17768:	ldr	r3, [fp, #-128]	; 0xffffff80
   1776c:	add	r3, r2, r3
   17770:	str	r3, [fp, #-116]	; 0xffffff8c
   17774:	ldr	r3, [fp, #-112]	; 0xffffff90
   17778:	add	r3, r3, #1
   1777c:	lsl	r3, r3, #3
   17780:	sub	r2, fp, #12
   17784:	add	r3, r2, r3
   17788:	ldr	r2, [fp, #-124]	; 0xffffff84
   1778c:	str	r2, [r3, #-104]	; 0xffffff98
   17790:	ldr	r3, [fp, #-112]	; 0xffffff90
   17794:	add	r3, r3, #1
   17798:	lsl	r3, r3, #3
   1779c:	sub	r2, fp, #12
   177a0:	add	r3, r2, r3
   177a4:	ldr	r2, [fp, #-128]	; 0xffffff80
   177a8:	str	r2, [r3, #-100]	; 0xffffff9c
   177ac:	ldr	r3, [fp, #-112]	; 0xffffff90
   177b0:	add	r3, r3, #1
   177b4:	str	r3, [fp, #-112]	; 0xffffff90
   177b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   177bc:	cmp	r3, #0
   177c0:	beq	1781c <flatcc_builder_create_table@@Base+0x2e4>
   177c4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   177c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   177cc:	add	r3, r2, r3
   177d0:	str	r3, [fp, #-116]	; 0xffffff8c
   177d4:	ldr	r3, [fp, #-112]	; 0xffffff90
   177d8:	add	r3, r3, #1
   177dc:	lsl	r3, r3, #3
   177e0:	sub	r2, fp, #12
   177e4:	add	r3, r2, r3
   177e8:	ldr	r2, [pc, #116]	; 17864 <flatcc_builder_create_table@@Base+0x32c>
   177ec:	ldr	r2, [r4, r2]
   177f0:	str	r2, [r3, #-104]	; 0xffffff98
   177f4:	ldr	r3, [fp, #-112]	; 0xffffff90
   177f8:	add	r3, r3, #1
   177fc:	lsl	r3, r3, #3
   17800:	sub	r2, fp, #12
   17804:	add	r3, r2, r3
   17808:	ldr	r2, [fp, #-20]	; 0xffffffec
   1780c:	str	r2, [r3, #-100]	; 0xffffff9c
   17810:	ldr	r3, [fp, #-112]	; 0xffffff90
   17814:	add	r3, r3, #1
   17818:	str	r3, [fp, #-112]	; 0xffffff90
   1781c:	sub	r3, fp, #116	; 0x74
   17820:	mov	r1, r3
   17824:	ldr	r0, [fp, #-120]	; 0xffffff88
   17828:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1782c:	mov	r3, r0
   17830:	mov	r0, r3
   17834:	sub	sp, fp, #8
   17838:	ldr	r4, [sp]
   1783c:	ldr	fp, [sp, #4]
   17840:	add	sp, sp, #8
   17844:	pop	{pc}		; (ldr pc, [sp], #4)
   17848:	muleq	r1, r8, sl
   1784c:	andeq	r4, r0, r4, asr r6
   17850:	andeq	r3, r0, r4, lsr #31
   17854:	andeq	r4, r0, ip, lsr r2
   17858:	andeq	r4, r0, r4, lsr #12
   1785c:	andeq	r3, r0, r4, ror pc
   17860:	andeq	r4, r0, r0, lsr #4
   17864:	andeq	r0, r0, r0, rrx

00017868 <flatcc_builder_check_required_field@@Base>:
   17868:	str	fp, [sp, #-8]!
   1786c:	str	lr, [sp, #4]
   17870:	add	fp, sp, #4
   17874:	sub	sp, sp, #8
   17878:	str	r0, [fp, #-8]
   1787c:	mov	r3, r1
   17880:	strh	r3, [fp, #-10]
   17884:	ldr	r3, [fp, #-8]
   17888:	ldr	r3, [r3, #32]
   1788c:	ldrh	r3, [r3, #14]
   17890:	cmp	r3, #3
   17894:	beq	178b8 <flatcc_builder_check_required_field@@Base+0x50>
   17898:	ldr	r3, [pc, #108]	; 1790c <flatcc_builder_check_required_field@@Base+0xa4>
   1789c:	add	r3, pc, r3
   178a0:	movw	r2, #1272	; 0x4f8
   178a4:	ldr	r1, [pc, #100]	; 17910 <flatcc_builder_check_required_field@@Base+0xa8>
   178a8:	add	r1, pc, r1
   178ac:	ldr	r0, [pc, #96]	; 17914 <flatcc_builder_check_required_field@@Base+0xac>
   178b0:	add	r0, pc, r0
   178b4:	bl	12078 <__assert_fail@plt>
   178b8:	ldr	r3, [fp, #-8]
   178bc:	ldrh	r3, [r3, #8]
   178c0:	ldrh	r2, [fp, #-10]
   178c4:	cmp	r2, r3
   178c8:	bcs	178f4 <flatcc_builder_check_required_field@@Base+0x8c>
   178cc:	ldr	r3, [fp, #-8]
   178d0:	ldr	r2, [r3, #4]
   178d4:	ldrh	r3, [fp, #-10]
   178d8:	lsl	r3, r3, #1
   178dc:	add	r3, r2, r3
   178e0:	ldrh	r3, [r3]
   178e4:	cmp	r3, #0
   178e8:	beq	178f4 <flatcc_builder_check_required_field@@Base+0x8c>
   178ec:	mov	r3, #1
   178f0:	b	178f8 <flatcc_builder_check_required_field@@Base+0x90>
   178f4:	mov	r3, #0
   178f8:	mov	r0, r3
   178fc:	sub	sp, fp, #4
   17900:	ldr	fp, [sp]
   17904:	add	sp, sp, #4
   17908:	pop	{pc}		; (ldr pc, [sp], #4)
   1790c:	andeq	r4, r0, r8, asr #6
   17910:	andeq	r3, r0, ip, ror ip
   17914:	andeq	r3, r0, r4, lsr pc

00017918 <flatcc_builder_check_union_field@@Base>:
   17918:	str	fp, [sp, #-8]!
   1791c:	str	lr, [sp, #4]
   17920:	add	fp, sp, #4
   17924:	sub	sp, sp, #8
   17928:	str	r0, [fp, #-8]
   1792c:	mov	r3, r1
   17930:	strh	r3, [fp, #-10]
   17934:	ldr	r3, [fp, #-8]
   17938:	ldr	r3, [r3, #32]
   1793c:	ldrh	r3, [r3, #14]
   17940:	cmp	r3, #3
   17944:	beq	17968 <flatcc_builder_check_union_field@@Base+0x50>
   17948:	ldr	r3, [pc, #300]	; 17a7c <flatcc_builder_check_union_field@@Base+0x164>
   1794c:	add	r3, pc, r3
   17950:	movw	r2, #1279	; 0x4ff
   17954:	ldr	r1, [pc, #292]	; 17a80 <flatcc_builder_check_union_field@@Base+0x168>
   17958:	add	r1, pc, r1
   1795c:	ldr	r0, [pc, #288]	; 17a84 <flatcc_builder_check_union_field@@Base+0x16c>
   17960:	add	r0, pc, r0
   17964:	bl	12078 <__assert_fail@plt>
   17968:	ldrh	r3, [fp, #-10]
   1796c:	cmp	r3, #0
   17970:	beq	17988 <flatcc_builder_check_union_field@@Base+0x70>
   17974:	ldr	r3, [fp, #-8]
   17978:	ldrh	r3, [r3, #8]
   1797c:	ldrh	r2, [fp, #-10]
   17980:	cmp	r2, r3
   17984:	bcc	17990 <flatcc_builder_check_union_field@@Base+0x78>
   17988:	mov	r3, #0
   1798c:	b	17a68 <flatcc_builder_check_union_field@@Base+0x150>
   17990:	ldr	r3, [fp, #-8]
   17994:	ldr	r2, [r3, #4]
   17998:	ldrh	r3, [fp, #-10]
   1799c:	sub	r3, r3, #-2147483647	; 0x80000001
   179a0:	lsl	r3, r3, #1
   179a4:	add	r3, r2, r3
   179a8:	ldrh	r3, [r3]
   179ac:	cmp	r3, #0
   179b0:	bne	179e0 <flatcc_builder_check_union_field@@Base+0xc8>
   179b4:	ldr	r3, [fp, #-8]
   179b8:	ldr	r2, [r3, #4]
   179bc:	ldrh	r3, [fp, #-10]
   179c0:	lsl	r3, r3, #1
   179c4:	add	r3, r2, r3
   179c8:	ldrh	r3, [r3]
   179cc:	cmp	r3, #0
   179d0:	moveq	r3, #1
   179d4:	movne	r3, #0
   179d8:	uxtb	r3, r3
   179dc:	b	17a68 <flatcc_builder_check_union_field@@Base+0x150>
   179e0:	ldr	r3, [fp, #-8]
   179e4:	ldr	r3, [r3, #16]
   179e8:	ldr	r2, [fp, #-8]
   179ec:	ldr	r1, [r2, #4]
   179f0:	ldrh	r2, [fp, #-10]
   179f4:	sub	r2, r2, #-2147483647	; 0x80000001
   179f8:	lsl	r2, r2, #1
   179fc:	add	r2, r1, r2
   17a00:	ldrh	r2, [r2]
   17a04:	add	r3, r3, r2
   17a08:	ldrb	r3, [r3]
   17a0c:	cmp	r3, #0
   17a10:	beq	17a40 <flatcc_builder_check_union_field@@Base+0x128>
   17a14:	ldr	r3, [fp, #-8]
   17a18:	ldr	r2, [r3, #4]
   17a1c:	ldrh	r3, [fp, #-10]
   17a20:	lsl	r3, r3, #1
   17a24:	add	r3, r2, r3
   17a28:	ldrh	r3, [r3]
   17a2c:	cmp	r3, #0
   17a30:	movne	r3, #1
   17a34:	moveq	r3, #0
   17a38:	uxtb	r3, r3
   17a3c:	b	17a68 <flatcc_builder_check_union_field@@Base+0x150>
   17a40:	ldr	r3, [fp, #-8]
   17a44:	ldr	r2, [r3, #4]
   17a48:	ldrh	r3, [fp, #-10]
   17a4c:	lsl	r3, r3, #1
   17a50:	add	r3, r2, r3
   17a54:	ldrh	r3, [r3]
   17a58:	cmp	r3, #0
   17a5c:	moveq	r3, #1
   17a60:	movne	r3, #0
   17a64:	uxtb	r3, r3
   17a68:	mov	r0, r3
   17a6c:	sub	sp, fp, #4
   17a70:	ldr	fp, [sp]
   17a74:	add	sp, sp, #4
   17a78:	pop	{pc}		; (ldr pc, [sp], #4)
   17a7c:			; <UNDEFINED> instruction: 0x000042bc
   17a80:	andeq	r3, r0, ip, asr #23
   17a84:	andeq	r3, r0, r4, lsl #29

00017a88 <flatcc_builder_check_required@@Base>:
   17a88:	str	fp, [sp, #-8]!
   17a8c:	str	lr, [sp, #4]
   17a90:	add	fp, sp, #4
   17a94:	sub	sp, sp, #24
   17a98:	str	r0, [fp, #-16]
   17a9c:	str	r1, [fp, #-20]	; 0xffffffec
   17aa0:	str	r2, [fp, #-24]	; 0xffffffe8
   17aa4:	ldr	r3, [fp, #-16]
   17aa8:	ldr	r3, [r3, #32]
   17aac:	ldrh	r3, [r3, #14]
   17ab0:	cmp	r3, #3
   17ab4:	beq	17ad8 <flatcc_builder_check_required@@Base+0x50>
   17ab8:	ldr	r3, [pc, #176]	; 17b70 <flatcc_builder_check_required@@Base+0xe8>
   17abc:	add	r3, pc, r3
   17ac0:	movw	r2, #1297	; 0x511
   17ac4:	ldr	r1, [pc, #168]	; 17b74 <flatcc_builder_check_required@@Base+0xec>
   17ac8:	add	r1, pc, r1
   17acc:	ldr	r0, [pc, #164]	; 17b78 <flatcc_builder_check_required@@Base+0xf0>
   17ad0:	add	r0, pc, r0
   17ad4:	bl	12078 <__assert_fail@plt>
   17ad8:	ldr	r3, [fp, #-16]
   17adc:	ldrh	r3, [r3, #8]
   17ae0:	mov	r2, r3
   17ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ae8:	cmp	r3, r2
   17aec:	ble	17af8 <flatcc_builder_check_required@@Base+0x70>
   17af0:	mov	r3, #0
   17af4:	b	17b5c <flatcc_builder_check_required@@Base+0xd4>
   17af8:	mov	r3, #0
   17afc:	str	r3, [fp, #-8]
   17b00:	b	17b48 <flatcc_builder_check_required@@Base+0xc0>
   17b04:	ldr	r3, [fp, #-16]
   17b08:	ldr	r2, [r3, #4]
   17b0c:	ldr	r3, [fp, #-8]
   17b10:	lsl	r3, r3, #1
   17b14:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b18:	add	r3, r1, r3
   17b1c:	ldrh	r3, [r3]
   17b20:	lsl	r3, r3, #1
   17b24:	add	r3, r2, r3
   17b28:	ldrh	r3, [r3]
   17b2c:	cmp	r3, #0
   17b30:	bne	17b3c <flatcc_builder_check_required@@Base+0xb4>
   17b34:	mov	r3, #0
   17b38:	b	17b5c <flatcc_builder_check_required@@Base+0xd4>
   17b3c:	ldr	r3, [fp, #-8]
   17b40:	add	r3, r3, #1
   17b44:	str	r3, [fp, #-8]
   17b48:	ldr	r2, [fp, #-8]
   17b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b50:	cmp	r2, r3
   17b54:	blt	17b04 <flatcc_builder_check_required@@Base+0x7c>
   17b58:	mov	r3, #1
   17b5c:	mov	r0, r3
   17b60:	sub	sp, fp, #4
   17b64:	ldr	fp, [sp]
   17b68:	add	sp, sp, #4
   17b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b70:	andeq	r4, r0, r0, ror r1
   17b74:	andeq	r3, r0, ip, asr sl
   17b78:	andeq	r3, r0, r4, lsl sp

00017b7c <flatcc_builder_end_table@@Base>:
   17b7c:	str	fp, [sp, #-8]!
   17b80:	str	lr, [sp, #4]
   17b84:	add	fp, sp, #4
   17b88:	sub	sp, sp, #48	; 0x30
   17b8c:	str	r0, [fp, #-32]	; 0xffffffe0
   17b90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b94:	ldr	r3, [r3, #32]
   17b98:	ldrh	r3, [r3, #14]
   17b9c:	cmp	r3, #3
   17ba0:	beq	17bc4 <flatcc_builder_end_table@@Base+0x48>
   17ba4:	ldr	r3, [pc, #520]	; 17db4 <flatcc_builder_end_table@@Base+0x238>
   17ba8:	add	r3, pc, r3
   17bac:	movw	r2, #1317	; 0x525
   17bb0:	ldr	r1, [pc, #512]	; 17db8 <flatcc_builder_end_table@@Base+0x23c>
   17bb4:	add	r1, pc, r1
   17bb8:	ldr	r0, [pc, #508]	; 17dbc <flatcc_builder_end_table@@Base+0x240>
   17bbc:	add	r0, pc, r0
   17bc0:	bl	12078 <__assert_fail@plt>
   17bc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bc8:	ldr	r3, [r3, #4]
   17bcc:	sub	r3, r3, #4
   17bd0:	str	r3, [fp, #-8]
   17bd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bd8:	ldrh	r3, [r3, #8]
   17bdc:	add	r3, r3, #2
   17be0:	uxth	r3, r3
   17be4:	lsl	r3, r3, #1
   17be8:	strh	r3, [fp, #-10]
   17bec:	ldr	r3, [fp, #-8]
   17bf0:	ldrh	r2, [fp, #-10]
   17bf4:	strh	r2, [r3]
   17bf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bfc:	ldr	r3, [r3, #20]
   17c00:	uxth	r2, r3
   17c04:	ldr	r3, [fp, #-8]
   17c08:	add	r3, r3, #2
   17c0c:	add	r2, r2, #4
   17c10:	uxth	r2, r2
   17c14:	strh	r2, [r3]
   17c18:	ldr	r3, [fp, #-8]
   17c1c:	ldrh	r3, [r3]
   17c20:	mov	r2, r3
   17c24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c28:	ldr	r3, [r3, #12]
   17c2c:	eor	r2, r2, r3
   17c30:	movw	r3, #31153	; 0x79b1
   17c34:	movt	r3, #40503	; 0x9e37
   17c38:	mul	r3, r3, r2
   17c3c:	ldr	r2, [fp, #-8]
   17c40:	add	r2, r2, #2
   17c44:	ldrh	r2, [r2]
   17c48:	eor	r2, r2, r3
   17c4c:	movw	r3, #31153	; 0x79b1
   17c50:	movt	r3, #40503	; 0x9e37
   17c54:	mul	r2, r3, r2
   17c58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c5c:	str	r2, [r3, #12]
   17c60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c64:	ldr	r3, [r3, #12]
   17c68:	ldrh	r2, [fp, #-10]
   17c6c:	ldr	r1, [fp, #-8]
   17c70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c74:	bl	17218 <flatcc_builder_create_cached_vtable@@Base>
   17c78:	str	r0, [fp, #-16]
   17c7c:	ldr	r3, [fp, #-16]
   17c80:	cmp	r3, #0
   17c84:	bne	17c90 <flatcc_builder_end_table@@Base+0x114>
   17c88:	mov	r3, #0
   17c8c:	b	17da0 <flatcc_builder_end_table@@Base+0x224>
   17c90:	ldrh	r3, [fp, #-10]
   17c94:	mov	r2, r3
   17c98:	mov	r1, #0
   17c9c:	ldr	r0, [fp, #-8]
   17ca0:	bl	1203c <memset@plt>
   17ca4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ca8:	ldr	r2, [r3, #76]	; 0x4c
   17cac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17cb0:	ldr	r3, [r3, #32]
   17cb4:	ldr	r3, [r3, #20]
   17cb8:	add	r3, r2, r3
   17cbc:	str	r3, [fp, #-20]	; 0xffffffec
   17cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17cc4:	ldr	r2, [r3]
   17cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ccc:	sub	r3, r2, r3
   17cd0:	asr	r3, r3, #1
   17cd4:	str	r3, [fp, #-24]	; 0xffffffe8
   17cd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17cdc:	ldr	r1, [r3, #16]
   17ce0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ce4:	ldr	r2, [r3, #20]
   17ce8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17cec:	ldrh	r0, [r3, #130]	; 0x82
   17cf0:	ldr	r3, [fp, #-16]
   17cf4:	str	r3, [sp, #8]
   17cf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cfc:	str	r3, [sp, #4]
   17d00:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d04:	str	r3, [sp]
   17d08:	mov	r3, r0
   17d0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d10:	bl	17538 <flatcc_builder_create_table@@Base>
   17d14:	str	r0, [fp, #-28]	; 0xffffffe4
   17d18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17d1c:	cmp	r3, #0
   17d20:	bne	17d2c <flatcc_builder_end_table@@Base+0x1b0>
   17d24:	mov	r3, #0
   17d28:	b	17da0 <flatcc_builder_end_table@@Base+0x224>
   17d2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d30:	ldr	r3, [r3, #32]
   17d34:	ldr	r2, [r3, #24]
   17d38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d3c:	str	r2, [r3, #12]
   17d40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d44:	ldr	r3, [r3, #32]
   17d48:	ldrh	r2, [r3, #28]
   17d4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d50:	strh	r2, [r3, #8]
   17d54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d58:	ldr	r2, [r3, #52]	; 0x34
   17d5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d60:	ldr	r3, [r3, #32]
   17d64:	ldr	r3, [r3, #16]
   17d68:	add	r2, r2, r3
   17d6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d70:	str	r2, [r3, #4]
   17d74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d78:	ldr	r2, [r3, #76]	; 0x4c
   17d7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d80:	ldr	r3, [r3, #32]
   17d84:	ldr	r3, [r3, #20]
   17d88:	add	r2, r2, r3
   17d8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d90:	str	r2, [r3]
   17d94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d98:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   17d9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17da0:	mov	r0, r3
   17da4:	sub	sp, fp, #4
   17da8:	ldr	fp, [sp]
   17dac:	add	sp, sp, #4
   17db0:	pop	{pc}		; (ldr pc, [sp], #4)
   17db4:	andeq	r4, r0, r4, lsr #1
   17db8:	andeq	r3, r0, r0, ror r9
   17dbc:	andeq	r3, r0, r8, lsr #24

00017dc0 <flatcc_builder_create_vector@@Base>:
   17dc0:	str	r4, [sp, #-12]!
   17dc4:	str	fp, [sp, #4]
   17dc8:	str	lr, [sp, #8]
   17dcc:	add	fp, sp, #8
   17dd0:	sub	sp, sp, #108	; 0x6c
   17dd4:	str	r0, [fp, #-104]	; 0xffffff98
   17dd8:	str	r1, [fp, #-108]	; 0xffffff94
   17ddc:	str	r2, [fp, #-112]	; 0xffffff90
   17de0:	str	r3, [fp, #-116]	; 0xffffff8c
   17de4:	ldr	r4, [pc, #496]	; 17fdc <flatcc_builder_create_vector@@Base+0x21c>
   17de8:	add	r4, pc, r4
   17dec:	ldr	r2, [fp, #-112]	; 0xffffff90
   17df0:	ldr	r3, [fp, #8]
   17df4:	cmp	r2, r3
   17df8:	bls	17e34 <flatcc_builder_create_vector@@Base+0x74>
   17dfc:	ldr	r2, [fp, #-112]	; 0xffffff90
   17e00:	ldr	r3, [fp, #8]
   17e04:	cmp	r2, r3
   17e08:	bls	17e2c <flatcc_builder_create_vector@@Base+0x6c>
   17e0c:	ldr	r3, [pc, #460]	; 17fe0 <flatcc_builder_create_vector@@Base+0x220>
   17e10:	add	r3, pc, r3
   17e14:	movw	r2, #1365	; 0x555
   17e18:	ldr	r1, [pc, #452]	; 17fe4 <flatcc_builder_create_vector@@Base+0x224>
   17e1c:	add	r1, pc, r1
   17e20:	ldr	r0, [pc, #448]	; 17fe8 <flatcc_builder_create_vector@@Base+0x228>
   17e24:	add	r0, pc, r0
   17e28:	bl	12078 <__assert_fail@plt>
   17e2c:	mov	r3, #0
   17e30:	b	17fc4 <flatcc_builder_create_vector@@Base+0x204>
   17e34:	mov	r1, #4
   17e38:	add	r3, fp, #4
   17e3c:	mov	r0, r3
   17e40:	bl	14c70 <flatcc_builder_clear@@Base+0x10c>
   17e44:	ldrh	r3, [fp, #4]
   17e48:	mov	r1, r3
   17e4c:	ldr	r0, [fp, #-104]	; 0xffffff98
   17e50:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   17e54:	ldr	r3, [fp, #-112]	; 0xffffff90
   17e58:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17e5c:	mul	r3, r2, r3
   17e60:	str	r3, [fp, #-16]
   17e64:	ldr	r0, [fp, #-112]	; 0xffffff90
   17e68:	bl	13b20 <main@@Base+0x3f4>
   17e6c:	mov	r3, r0
   17e70:	str	r3, [fp, #-24]	; 0xffffffe8
   17e74:	ldrh	r3, [fp, #4]
   17e78:	mov	r2, r3
   17e7c:	ldr	r1, [fp, #-16]
   17e80:	ldr	r0, [fp, #-104]	; 0xffffff98
   17e84:	bl	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   17e88:	str	r0, [fp, #-20]	; 0xffffffec
   17e8c:	mov	r3, #0
   17e90:	str	r3, [fp, #-96]	; 0xffffffa0
   17e94:	mov	r3, #0
   17e98:	str	r3, [fp, #-92]	; 0xffffffa4
   17e9c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17ea0:	add	r3, r3, #4
   17ea4:	str	r3, [fp, #-96]	; 0xffffffa0
   17ea8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17eac:	add	r3, r3, #1
   17eb0:	lsl	r3, r3, #3
   17eb4:	sub	r2, fp, #12
   17eb8:	add	r3, r2, r3
   17ebc:	sub	r2, fp, #24
   17ec0:	str	r2, [r3, #-84]	; 0xffffffac
   17ec4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ec8:	add	r3, r3, #1
   17ecc:	lsl	r3, r3, #3
   17ed0:	sub	r2, fp, #12
   17ed4:	add	r3, r2, r3
   17ed8:	mov	r2, #4
   17edc:	str	r2, [r3, #-80]	; 0xffffffb0
   17ee0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ee4:	add	r3, r3, #1
   17ee8:	str	r3, [fp, #-92]	; 0xffffffa4
   17eec:	ldr	r3, [fp, #-16]
   17ef0:	cmp	r3, #0
   17ef4:	beq	17f4c <flatcc_builder_create_vector@@Base+0x18c>
   17ef8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17efc:	ldr	r3, [fp, #-16]
   17f00:	add	r3, r2, r3
   17f04:	str	r3, [fp, #-96]	; 0xffffffa0
   17f08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f0c:	add	r3, r3, #1
   17f10:	lsl	r3, r3, #3
   17f14:	sub	r2, fp, #12
   17f18:	add	r3, r2, r3
   17f1c:	ldr	r2, [fp, #-108]	; 0xffffff94
   17f20:	str	r2, [r3, #-84]	; 0xffffffac
   17f24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f28:	add	r3, r3, #1
   17f2c:	lsl	r3, r3, #3
   17f30:	sub	r2, fp, #12
   17f34:	add	r3, r2, r3
   17f38:	ldr	r2, [fp, #-16]
   17f3c:	str	r2, [r3, #-80]	; 0xffffffb0
   17f40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f44:	add	r3, r3, #1
   17f48:	str	r3, [fp, #-92]	; 0xffffffa4
   17f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f50:	cmp	r3, #0
   17f54:	beq	17fb0 <flatcc_builder_create_vector@@Base+0x1f0>
   17f58:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f60:	add	r3, r2, r3
   17f64:	str	r3, [fp, #-96]	; 0xffffffa0
   17f68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f6c:	add	r3, r3, #1
   17f70:	lsl	r3, r3, #3
   17f74:	sub	r2, fp, #12
   17f78:	add	r3, r2, r3
   17f7c:	ldr	r2, [pc, #104]	; 17fec <flatcc_builder_create_vector@@Base+0x22c>
   17f80:	ldr	r2, [r4, r2]
   17f84:	str	r2, [r3, #-84]	; 0xffffffac
   17f88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f8c:	add	r3, r3, #1
   17f90:	lsl	r3, r3, #3
   17f94:	sub	r2, fp, #12
   17f98:	add	r3, r2, r3
   17f9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17fa0:	str	r2, [r3, #-80]	; 0xffffffb0
   17fa4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17fa8:	add	r3, r3, #1
   17fac:	str	r3, [fp, #-92]	; 0xffffffa4
   17fb0:	sub	r3, fp, #96	; 0x60
   17fb4:	mov	r1, r3
   17fb8:	ldr	r0, [fp, #-104]	; 0xffffff98
   17fbc:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   17fc0:	mov	r3, r0
   17fc4:	mov	r0, r3
   17fc8:	sub	sp, fp, #8
   17fcc:	ldr	r4, [sp]
   17fd0:	ldr	fp, [sp, #4]
   17fd4:	add	sp, sp, #8
   17fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fdc:	andeq	r4, r1, r0, lsl r2
   17fe0:	andeq	r3, r0, r8, asr lr
   17fe4:	andeq	r3, r0, r8, lsl #14
   17fe8:	andeq	r3, r0, ip, ror #19
   17fec:	andeq	r0, r0, r0, rrx

00017ff0 <flatcc_builder_end_vector@@Base>:
   17ff0:	str	fp, [sp, #-8]!
   17ff4:	str	lr, [sp, #4]
   17ff8:	add	fp, sp, #4
   17ffc:	sub	sp, sp, #24
   18000:	str	r0, [fp, #-16]
   18004:	ldr	r3, [fp, #-16]
   18008:	ldr	r3, [r3, #32]
   1800c:	ldrh	r3, [r3, #14]
   18010:	cmp	r3, #4
   18014:	beq	18038 <flatcc_builder_end_vector@@Base+0x48>
   18018:	ldr	r3, [pc, #156]	; 180bc <flatcc_builder_end_vector@@Base+0xcc>
   1801c:	add	r3, pc, r3
   18020:	movw	r2, #1400	; 0x578
   18024:	ldr	r1, [pc, #148]	; 180c0 <flatcc_builder_end_vector@@Base+0xd0>
   18028:	add	r1, pc, r1
   1802c:	ldr	r0, [pc, #144]	; 180c4 <flatcc_builder_end_vector@@Base+0xd4>
   18030:	add	r0, pc, r0
   18034:	bl	12078 <__assert_fail@plt>
   18038:	ldr	r3, [fp, #-16]
   1803c:	ldr	r1, [r3, #16]
   18040:	ldr	r3, [fp, #-16]
   18044:	ldr	r3, [r3, #32]
   18048:	ldr	r0, [r3, #20]
   1804c:	ldr	r3, [fp, #-16]
   18050:	ldr	r3, [r3, #32]
   18054:	ldr	ip, [r3, #16]
   18058:	ldr	r3, [fp, #-16]
   1805c:	ldrh	r3, [r3, #130]	; 0x82
   18060:	ldr	r2, [fp, #-16]
   18064:	ldr	r2, [r2, #32]
   18068:	ldr	r2, [r2, #24]
   1806c:	str	r2, [sp, #4]
   18070:	str	r3, [sp]
   18074:	mov	r3, ip
   18078:	mov	r2, r0
   1807c:	ldr	r0, [fp, #-16]
   18080:	bl	17dc0 <flatcc_builder_create_vector@@Base>
   18084:	str	r0, [fp, #-8]
   18088:	ldr	r3, [fp, #-8]
   1808c:	cmp	r3, #0
   18090:	bne	1809c <flatcc_builder_end_vector@@Base+0xac>
   18094:	mov	r3, #0
   18098:	b	180a8 <flatcc_builder_end_vector@@Base+0xb8>
   1809c:	ldr	r0, [fp, #-16]
   180a0:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   180a4:	ldr	r3, [fp, #-8]
   180a8:	mov	r0, r3
   180ac:	sub	sp, fp, #4
   180b0:	ldr	fp, [sp]
   180b4:	add	sp, sp, #4
   180b8:	pop	{pc}		; (ldr pc, [sp], #4)
   180bc:	andeq	r3, r0, ip, ror #24
   180c0:	strdeq	r3, [r0], -ip
   180c4:	andeq	r3, r0, r8, lsr r6

000180c8 <flatcc_builder_vector_count@@Base>:
   180c8:	push	{fp}		; (str fp, [sp, #-4]!)
   180cc:	add	fp, sp, #0
   180d0:	sub	sp, sp, #12
   180d4:	str	r0, [fp, #-8]
   180d8:	ldr	r3, [fp, #-8]
   180dc:	ldr	r3, [r3, #32]
   180e0:	ldr	r3, [r3, #20]
   180e4:	mov	r0, r3
   180e8:	add	sp, fp, #0
   180ec:	pop	{fp}		; (ldr fp, [sp], #4)
   180f0:	bx	lr

000180f4 <flatcc_builder_vector_edit@@Base>:
   180f4:	push	{fp}		; (str fp, [sp, #-4]!)
   180f8:	add	fp, sp, #0
   180fc:	sub	sp, sp, #12
   18100:	str	r0, [fp, #-8]
   18104:	ldr	r3, [fp, #-8]
   18108:	ldr	r3, [r3, #16]
   1810c:	mov	r0, r3
   18110:	add	sp, fp, #0
   18114:	pop	{fp}		; (ldr fp, [sp], #4)
   18118:	bx	lr
   1811c:	str	r4, [sp, #-12]!
   18120:	str	fp, [sp, #4]
   18124:	str	lr, [sp, #8]
   18128:	add	fp, sp, #8
   1812c:	sub	sp, sp, #116	; 0x74
   18130:	str	r0, [fp, #-112]	; 0xffffff90
   18134:	str	r1, [fp, #-116]	; 0xffffff8c
   18138:	str	r2, [fp, #-120]	; 0xffffff88
   1813c:	str	r3, [fp, #-124]	; 0xffffff84
   18140:	ldr	r4, [pc, #764]	; 18444 <flatcc_builder_vector_edit@@Base+0x350>
   18144:	add	r4, pc, r4
   18148:	ldr	r3, [fp, #-120]	; 0xffffff88
   1814c:	cmn	r3, #-1073741823	; 0xc0000001
   18150:	bls	1815c <flatcc_builder_vector_edit@@Base+0x68>
   18154:	mov	r3, #0
   18158:	b	1842c <flatcc_builder_vector_edit@@Base+0x338>
   1815c:	mov	r1, #4
   18160:	ldr	r0, [fp, #-112]	; 0xffffff90
   18164:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   18168:	ldr	r3, [fp, #-120]	; 0xffffff88
   1816c:	lsl	r3, r3, #2
   18170:	str	r3, [fp, #-20]	; 0xffffffec
   18174:	ldr	r0, [fp, #-120]	; 0xffffff88
   18178:	bl	13b20 <main@@Base+0x3f4>
   1817c:	mov	r3, r0
   18180:	str	r3, [fp, #-36]	; 0xffffffdc
   18184:	mov	r2, #4
   18188:	ldr	r1, [fp, #-20]	; 0xffffffec
   1818c:	ldr	r0, [fp, #-112]	; 0xffffff90
   18190:	bl	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   18194:	str	r0, [fp, #-24]	; 0xffffffe8
   18198:	mov	r3, #0
   1819c:	str	r3, [fp, #-108]	; 0xffffff94
   181a0:	mov	r3, #0
   181a4:	str	r3, [fp, #-104]	; 0xffffff98
   181a8:	ldr	r3, [fp, #-108]	; 0xffffff94
   181ac:	add	r3, r3, #4
   181b0:	str	r3, [fp, #-108]	; 0xffffff94
   181b4:	ldr	r3, [fp, #-104]	; 0xffffff98
   181b8:	add	r3, r3, #1
   181bc:	lsl	r3, r3, #3
   181c0:	sub	r2, fp, #12
   181c4:	add	r3, r2, r3
   181c8:	sub	r2, fp, #36	; 0x24
   181cc:	str	r2, [r3, #-96]	; 0xffffffa0
   181d0:	ldr	r3, [fp, #-104]	; 0xffffff98
   181d4:	add	r3, r3, #1
   181d8:	lsl	r3, r3, #3
   181dc:	sub	r2, fp, #12
   181e0:	add	r3, r2, r3
   181e4:	mov	r2, #4
   181e8:	str	r2, [r3, #-92]	; 0xffffffa4
   181ec:	ldr	r3, [fp, #-104]	; 0xffffff98
   181f0:	add	r3, r3, #1
   181f4:	str	r3, [fp, #-104]	; 0xffffff98
   181f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   181fc:	cmp	r3, #0
   18200:	beq	18258 <flatcc_builder_vector_edit@@Base+0x164>
   18204:	ldr	r2, [fp, #-108]	; 0xffffff94
   18208:	ldr	r3, [fp, #-20]	; 0xffffffec
   1820c:	add	r3, r2, r3
   18210:	str	r3, [fp, #-108]	; 0xffffff94
   18214:	ldr	r3, [fp, #-104]	; 0xffffff98
   18218:	add	r3, r3, #1
   1821c:	lsl	r3, r3, #3
   18220:	sub	r2, fp, #12
   18224:	add	r3, r2, r3
   18228:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1822c:	str	r2, [r3, #-96]	; 0xffffffa0
   18230:	ldr	r3, [fp, #-104]	; 0xffffff98
   18234:	add	r3, r3, #1
   18238:	lsl	r3, r3, #3
   1823c:	sub	r2, fp, #12
   18240:	add	r3, r2, r3
   18244:	ldr	r2, [fp, #-20]	; 0xffffffec
   18248:	str	r2, [r3, #-92]	; 0xffffffa4
   1824c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18250:	add	r3, r3, #1
   18254:	str	r3, [fp, #-104]	; 0xffffff98
   18258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1825c:	cmp	r3, #0
   18260:	beq	182bc <flatcc_builder_vector_edit@@Base+0x1c8>
   18264:	ldr	r2, [fp, #-108]	; 0xffffff94
   18268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1826c:	add	r3, r2, r3
   18270:	str	r3, [fp, #-108]	; 0xffffff94
   18274:	ldr	r3, [fp, #-104]	; 0xffffff98
   18278:	add	r3, r3, #1
   1827c:	lsl	r3, r3, #3
   18280:	sub	r2, fp, #12
   18284:	add	r3, r2, r3
   18288:	ldr	r2, [pc, #440]	; 18448 <flatcc_builder_vector_edit@@Base+0x354>
   1828c:	ldr	r2, [r4, r2]
   18290:	str	r2, [r3, #-96]	; 0xffffffa0
   18294:	ldr	r3, [fp, #-104]	; 0xffffff98
   18298:	add	r3, r3, #1
   1829c:	lsl	r3, r3, #3
   182a0:	sub	r2, fp, #12
   182a4:	add	r3, r2, r3
   182a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   182ac:	str	r2, [r3, #-92]	; 0xffffffa4
   182b0:	ldr	r3, [fp, #-104]	; 0xffffff98
   182b4:	add	r3, r3, #1
   182b8:	str	r3, [fp, #-104]	; 0xffffff98
   182bc:	ldr	r3, [fp, #-112]	; 0xffffff90
   182c0:	ldr	r3, [r3, #136]	; 0x88
   182c4:	mov	r2, r3
   182c8:	ldr	r3, [fp, #-108]	; 0xffffff94
   182cc:	sub	r3, r2, r3
   182d0:	str	r3, [fp, #-28]	; 0xffffffe4
   182d4:	mov	r3, #0
   182d8:	str	r3, [fp, #-16]
   182dc:	b	18408 <flatcc_builder_vector_edit@@Base+0x314>
   182e0:	ldr	r3, [fp, #-16]
   182e4:	lsl	r3, r3, #2
   182e8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   182ec:	add	r3, r2, r3
   182f0:	ldr	r3, [r3]
   182f4:	cmp	r3, #0
   182f8:	beq	18398 <flatcc_builder_vector_edit@@Base+0x2a4>
   182fc:	ldr	r3, [fp, #-16]
   18300:	lsl	r3, r3, #2
   18304:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18308:	add	r3, r2, r3
   1830c:	ldr	r3, [r3]
   18310:	mov	r2, r3
   18314:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18318:	sub	r2, r2, r3
   1831c:	ldr	r3, [fp, #-16]
   18320:	lsl	r3, r3, #2
   18324:	sub	r3, r2, r3
   18328:	sub	r3, r3, #4
   1832c:	str	r3, [fp, #-32]	; 0xffffffe0
   18330:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18334:	bl	13b20 <main@@Base+0x3f4>
   18338:	mov	r1, r0
   1833c:	ldr	r3, [fp, #-16]
   18340:	lsl	r3, r3, #2
   18344:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18348:	add	r3, r2, r3
   1834c:	mov	r2, r1
   18350:	str	r2, [r3]
   18354:	ldr	r3, [fp, #-124]	; 0xffffff84
   18358:	cmp	r3, #0
   1835c:	beq	183fc <flatcc_builder_vector_edit@@Base+0x308>
   18360:	ldr	r2, [fp, #-124]	; 0xffffff84
   18364:	ldr	r3, [fp, #-16]
   18368:	add	r3, r2, r3
   1836c:	ldrb	r3, [r3]
   18370:	cmp	r3, #0
   18374:	bne	183fc <flatcc_builder_vector_edit@@Base+0x308>
   18378:	ldr	r3, [pc, #204]	; 1844c <flatcc_builder_vector_edit@@Base+0x358>
   1837c:	add	r3, pc, r3
   18380:	movw	r2, #1457	; 0x5b1
   18384:	ldr	r1, [pc, #196]	; 18450 <flatcc_builder_vector_edit@@Base+0x35c>
   18388:	add	r1, pc, r1
   1838c:	ldr	r0, [pc, #192]	; 18454 <flatcc_builder_vector_edit@@Base+0x360>
   18390:	add	r0, pc, r0
   18394:	bl	12078 <__assert_fail@plt>
   18398:	ldr	r3, [fp, #-124]	; 0xffffff84
   1839c:	cmp	r3, #0
   183a0:	beq	183dc <flatcc_builder_vector_edit@@Base+0x2e8>
   183a4:	ldr	r2, [fp, #-124]	; 0xffffff84
   183a8:	ldr	r3, [fp, #-16]
   183ac:	add	r3, r2, r3
   183b0:	ldrb	r3, [r3]
   183b4:	cmp	r3, #0
   183b8:	beq	183fc <flatcc_builder_vector_edit@@Base+0x308>
   183bc:	ldr	r3, [pc, #148]	; 18458 <flatcc_builder_vector_edit@@Base+0x364>
   183c0:	add	r3, pc, r3
   183c4:	movw	r2, #1461	; 0x5b5
   183c8:	ldr	r1, [pc, #140]	; 1845c <flatcc_builder_vector_edit@@Base+0x368>
   183cc:	add	r1, pc, r1
   183d0:	ldr	r0, [pc, #136]	; 18460 <flatcc_builder_vector_edit@@Base+0x36c>
   183d4:	add	r0, pc, r0
   183d8:	bl	12078 <__assert_fail@plt>
   183dc:	ldr	r3, [pc, #128]	; 18464 <flatcc_builder_vector_edit@@Base+0x370>
   183e0:	add	r3, pc, r3
   183e4:	movw	r2, #1463	; 0x5b7
   183e8:	ldr	r1, [pc, #120]	; 18468 <flatcc_builder_vector_edit@@Base+0x374>
   183ec:	add	r1, pc, r1
   183f0:	ldr	r0, [pc, #116]	; 1846c <flatcc_builder_vector_edit@@Base+0x378>
   183f4:	add	r0, pc, r0
   183f8:	bl	12078 <__assert_fail@plt>
   183fc:	ldr	r3, [fp, #-16]
   18400:	add	r3, r3, #1
   18404:	str	r3, [fp, #-16]
   18408:	ldr	r2, [fp, #-16]
   1840c:	ldr	r3, [fp, #-120]	; 0xffffff88
   18410:	cmp	r2, r3
   18414:	bcc	182e0 <flatcc_builder_vector_edit@@Base+0x1ec>
   18418:	sub	r3, fp, #108	; 0x6c
   1841c:	mov	r1, r3
   18420:	ldr	r0, [fp, #-112]	; 0xffffff90
   18424:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   18428:	mov	r3, r0
   1842c:	mov	r0, r3
   18430:	sub	sp, fp, #8
   18434:	ldr	r4, [sp]
   18438:	ldr	fp, [sp, #4]
   1843c:	add	sp, sp, #8
   18440:	pop	{pc}		; (ldr pc, [sp], #4)
   18444:			; <UNDEFINED> instruction: 0x00013eb4
   18448:	andeq	r0, r0, r0, rrx
   1844c:	andeq	r3, r0, r8, lsr #18
   18450:	muleq	r0, ip, r1
   18454:	muleq	r0, r4, r4
   18458:	andeq	r3, r0, r4, ror #17
   1845c:	andeq	r3, r0, r8, asr r1
   18460:	andeq	r3, r0, r0, ror #8
   18464:	andeq	r3, r0, r4, asr #17
   18468:	andeq	r3, r0, r8, lsr r1
   1846c:	muleq	r0, r0, r1

00018470 <flatcc_builder_create_offset_vector_direct@@Base>:
   18470:	str	fp, [sp, #-8]!
   18474:	str	lr, [sp, #4]
   18478:	add	fp, sp, #4
   1847c:	sub	sp, sp, #16
   18480:	str	r0, [fp, #-8]
   18484:	str	r1, [fp, #-12]
   18488:	str	r2, [fp, #-16]
   1848c:	mov	r3, #0
   18490:	ldr	r2, [fp, #-16]
   18494:	ldr	r1, [fp, #-12]
   18498:	ldr	r0, [fp, #-8]
   1849c:	bl	1811c <flatcc_builder_vector_edit@@Base+0x28>
   184a0:	mov	r3, r0
   184a4:	mov	r0, r3
   184a8:	sub	sp, fp, #4
   184ac:	ldr	fp, [sp]
   184b0:	add	sp, sp, #4
   184b4:	pop	{pc}		; (ldr pc, [sp], #4)

000184b8 <flatcc_builder_end_offset_vector@@Base>:
   184b8:	str	fp, [sp, #-8]!
   184bc:	str	lr, [sp, #4]
   184c0:	add	fp, sp, #4
   184c4:	sub	sp, sp, #16
   184c8:	str	r0, [fp, #-16]
   184cc:	ldr	r3, [fp, #-16]
   184d0:	ldr	r3, [r3, #32]
   184d4:	ldrh	r3, [r3, #14]
   184d8:	cmp	r3, #5
   184dc:	beq	18500 <flatcc_builder_end_offset_vector@@Base+0x48>
   184e0:	ldr	r3, [pc, #112]	; 18558 <flatcc_builder_end_offset_vector@@Base+0xa0>
   184e4:	add	r3, pc, r3
   184e8:	movw	r2, #1480	; 0x5c8
   184ec:	ldr	r1, [pc, #104]	; 1855c <flatcc_builder_end_offset_vector@@Base+0xa4>
   184f0:	add	r1, pc, r1
   184f4:	ldr	r0, [pc, #100]	; 18560 <flatcc_builder_end_offset_vector@@Base+0xa8>
   184f8:	add	r0, pc, r0
   184fc:	bl	12078 <__assert_fail@plt>
   18500:	ldr	r3, [fp, #-16]
   18504:	ldr	r1, [r3, #16]
   18508:	ldr	r3, [fp, #-16]
   1850c:	ldr	r3, [r3, #32]
   18510:	ldr	r3, [r3, #20]
   18514:	mov	r2, r3
   18518:	ldr	r0, [fp, #-16]
   1851c:	bl	18470 <flatcc_builder_create_offset_vector_direct@@Base>
   18520:	str	r0, [fp, #-8]
   18524:	ldr	r3, [fp, #-8]
   18528:	cmp	r3, #0
   1852c:	bne	18538 <flatcc_builder_end_offset_vector@@Base+0x80>
   18530:	mov	r3, #0
   18534:	b	18544 <flatcc_builder_end_offset_vector@@Base+0x8c>
   18538:	ldr	r0, [fp, #-16]
   1853c:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18540:	ldr	r3, [fp, #-8]
   18544:	mov	r0, r3
   18548:	sub	sp, fp, #4
   1854c:	ldr	fp, [sp]
   18550:	add	sp, sp, #4
   18554:	pop	{pc}		; (ldr pc, [sp], #4)
   18558:	andeq	r3, r0, r0, ror #15
   1855c:	andeq	r3, r0, r4, lsr r0
   18560:	ldrdeq	r3, [r0], -ip

00018564 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   18564:	str	fp, [sp, #-8]!
   18568:	str	lr, [sp, #4]
   1856c:	add	fp, sp, #4
   18570:	sub	sp, sp, #16
   18574:	str	r0, [fp, #-16]
   18578:	str	r1, [fp, #-20]	; 0xffffffec
   1857c:	ldr	r3, [fp, #-16]
   18580:	ldr	r3, [r3, #32]
   18584:	ldrh	r3, [r3, #14]
   18588:	cmp	r3, #5
   1858c:	beq	185b0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   18590:	ldr	r3, [pc, #112]	; 18608 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   18594:	add	r3, pc, r3
   18598:	movw	r2, #1493	; 0x5d5
   1859c:	ldr	r1, [pc, #104]	; 1860c <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   185a0:	add	r1, pc, r1
   185a4:	ldr	r0, [pc, #100]	; 18610 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   185a8:	add	r0, pc, r0
   185ac:	bl	12078 <__assert_fail@plt>
   185b0:	ldr	r3, [fp, #-16]
   185b4:	ldr	r1, [r3, #16]
   185b8:	ldr	r3, [fp, #-16]
   185bc:	ldr	r3, [r3, #32]
   185c0:	ldr	r2, [r3, #20]
   185c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   185c8:	ldr	r0, [fp, #-16]
   185cc:	bl	1811c <flatcc_builder_vector_edit@@Base+0x28>
   185d0:	str	r0, [fp, #-8]
   185d4:	ldr	r3, [fp, #-8]
   185d8:	cmp	r3, #0
   185dc:	bne	185e8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x84>
   185e0:	mov	r3, #0
   185e4:	b	185f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x90>
   185e8:	ldr	r0, [fp, #-16]
   185ec:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   185f0:	ldr	r3, [fp, #-8]
   185f4:	mov	r0, r3
   185f8:	sub	sp, fp, #4
   185fc:	ldr	fp, [sp]
   18600:	add	sp, sp, #4
   18604:	pop	{pc}		; (ldr pc, [sp], #4)
   18608:	andeq	r3, r0, r4, asr r7
   1860c:	andeq	r2, r0, r4, lsl #31
   18610:	andeq	r3, r0, ip, lsr #2

00018614 <flatcc_builder_offset_vector_edit@@Base>:
   18614:	push	{fp}		; (str fp, [sp, #-4]!)
   18618:	add	fp, sp, #0
   1861c:	sub	sp, sp, #12
   18620:	str	r0, [fp, #-8]
   18624:	ldr	r3, [fp, #-8]
   18628:	ldr	r3, [r3, #16]
   1862c:	mov	r0, r3
   18630:	add	sp, fp, #0
   18634:	pop	{fp}		; (ldr fp, [sp], #4)
   18638:	bx	lr

0001863c <flatcc_builder_offset_vector_count@@Base>:
   1863c:	push	{fp}		; (str fp, [sp, #-4]!)
   18640:	add	fp, sp, #0
   18644:	sub	sp, sp, #12
   18648:	str	r0, [fp, #-8]
   1864c:	ldr	r3, [fp, #-8]
   18650:	ldr	r3, [r3, #32]
   18654:	ldr	r3, [r3, #20]
   18658:	mov	r0, r3
   1865c:	add	sp, fp, #0
   18660:	pop	{fp}		; (ldr fp, [sp], #4)
   18664:	bx	lr

00018668 <flatcc_builder_table_add_union@@Base>:
   18668:	str	fp, [sp, #-8]!
   1866c:	str	lr, [sp, #4]
   18670:	add	fp, sp, #4
   18674:	sub	sp, sp, #24
   18678:	str	r0, [fp, #-16]
   1867c:	str	r1, [fp, #-20]	; 0xffffffec
   18680:	sub	r1, fp, #28
   18684:	stm	r1, {r2, r3}
   18688:	ldr	r3, [fp, #-16]
   1868c:	ldr	r3, [r3, #32]
   18690:	ldrh	r3, [r3, #14]
   18694:	cmp	r3, #3
   18698:	beq	186bc <flatcc_builder_table_add_union@@Base+0x54>
   1869c:	ldr	r3, [pc, #360]	; 1880c <flatcc_builder_table_add_union@@Base+0x1a4>
   186a0:	add	r3, pc, r3
   186a4:	movw	r2, #1518	; 0x5ee
   186a8:	ldr	r1, [pc, #352]	; 18810 <flatcc_builder_table_add_union@@Base+0x1a8>
   186ac:	add	r1, pc, r1
   186b0:	ldr	r0, [pc, #348]	; 18814 <flatcc_builder_table_add_union@@Base+0x1ac>
   186b4:	add	r0, pc, r0
   186b8:	bl	12078 <__assert_fail@plt>
   186bc:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   186c0:	cmp	r3, #0
   186c4:	bne	18714 <flatcc_builder_table_add_union@@Base+0xac>
   186c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   186cc:	cmp	r3, #0
   186d0:	beq	18714 <flatcc_builder_table_add_union@@Base+0xac>
   186d4:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   186d8:	cmp	r3, #0
   186dc:	bne	1870c <flatcc_builder_table_add_union@@Base+0xa4>
   186e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   186e4:	cmp	r3, #0
   186e8:	beq	1870c <flatcc_builder_table_add_union@@Base+0xa4>
   186ec:	ldr	r3, [pc, #292]	; 18818 <flatcc_builder_table_add_union@@Base+0x1b0>
   186f0:	add	r3, pc, r3
   186f4:	movw	r2, #1519	; 0x5ef
   186f8:	ldr	r1, [pc, #284]	; 1881c <flatcc_builder_table_add_union@@Base+0x1b4>
   186fc:	add	r1, pc, r1
   18700:	ldr	r0, [pc, #280]	; 18820 <flatcc_builder_table_add_union@@Base+0x1b8>
   18704:	add	r0, pc, r0
   18708:	bl	12078 <__assert_fail@plt>
   1870c:	mvn	r3, #0
   18710:	b	187f8 <flatcc_builder_table_add_union@@Base+0x190>
   18714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18718:	cmp	r3, #0
   1871c:	beq	1877c <flatcc_builder_table_add_union@@Base+0x114>
   18720:	ldr	r1, [fp, #-20]	; 0xffffffec
   18724:	ldr	r0, [fp, #-16]
   18728:	bl	1983c <flatcc_builder_table_add_offset@@Base>
   1872c:	str	r0, [fp, #-8]
   18730:	ldr	r3, [fp, #-8]
   18734:	cmp	r3, #0
   18738:	bne	18770 <flatcc_builder_table_add_union@@Base+0x108>
   1873c:	ldr	r3, [fp, #-8]
   18740:	cmp	r3, #0
   18744:	bne	18768 <flatcc_builder_table_add_union@@Base+0x100>
   18748:	ldr	r3, [pc, #212]	; 18824 <flatcc_builder_table_add_union@@Base+0x1bc>
   1874c:	add	r3, pc, r3
   18750:	movw	r2, #1522	; 0x5f2
   18754:	ldr	r1, [pc, #204]	; 18828 <flatcc_builder_table_add_union@@Base+0x1c0>
   18758:	add	r1, pc, r1
   1875c:	ldr	r0, [pc, #200]	; 1882c <flatcc_builder_table_add_union@@Base+0x1c4>
   18760:	add	r0, pc, r0
   18764:	bl	12078 <__assert_fail@plt>
   18768:	mvn	r3, #0
   1876c:	b	187f8 <flatcc_builder_table_add_union@@Base+0x190>
   18770:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18774:	ldr	r3, [fp, #-8]
   18778:	str	r2, [r3]
   1877c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18780:	sub	r1, r3, #1
   18784:	mov	r3, #1
   18788:	mov	r2, #1
   1878c:	ldr	r0, [fp, #-16]
   18790:	bl	195cc <flatcc_builder_table_add@@Base>
   18794:	str	r0, [fp, #-12]
   18798:	ldr	r3, [fp, #-12]
   1879c:	cmp	r3, #0
   187a0:	bne	187d8 <flatcc_builder_table_add_union@@Base+0x170>
   187a4:	ldr	r3, [fp, #-12]
   187a8:	cmp	r3, #0
   187ac:	bne	187d0 <flatcc_builder_table_add_union@@Base+0x168>
   187b0:	ldr	r3, [pc, #120]	; 18830 <flatcc_builder_table_add_union@@Base+0x1c8>
   187b4:	add	r3, pc, r3
   187b8:	movw	r2, #1526	; 0x5f6
   187bc:	ldr	r1, [pc, #112]	; 18834 <flatcc_builder_table_add_union@@Base+0x1cc>
   187c0:	add	r1, pc, r1
   187c4:	ldr	r0, [pc, #108]	; 18838 <flatcc_builder_table_add_union@@Base+0x1d0>
   187c8:	add	r0, pc, r0
   187cc:	bl	12078 <__assert_fail@plt>
   187d0:	mvn	r3, #0
   187d4:	b	187f8 <flatcc_builder_table_add_union@@Base+0x190>
   187d8:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   187dc:	mov	r0, r3
   187e0:	bl	13b44 <main@@Base+0x418>
   187e4:	mov	r3, r0
   187e8:	mov	r2, r3
   187ec:	ldr	r3, [fp, #-12]
   187f0:	strb	r2, [r3]
   187f4:	mov	r3, #0
   187f8:	mov	r0, r3
   187fc:	sub	sp, fp, #4
   18800:	ldr	fp, [sp]
   18804:	add	sp, sp, #4
   18808:	pop	{pc}		; (ldr pc, [sp], #4)
   1880c:	andeq	r3, r0, r4, ror r6
   18810:	andeq	r2, r0, r8, ror lr
   18814:	andeq	r3, r0, r0, lsr r1
   18818:	andeq	r3, r0, r4, lsr #12
   1881c:	andeq	r2, r0, r8, lsr #28
   18820:	andeq	r3, r0, r0, asr #2
   18824:	andeq	r3, r0, r8, asr #11
   18828:	andeq	r2, r0, ip, asr #27
   1882c:	andeq	r3, r0, r8, lsl #2
   18830:	andeq	r3, r0, r0, ror #10
   18834:	andeq	r2, r0, r4, ror #26
   18838:	andeq	r3, r0, ip, lsr #1

0001883c <flatcc_builder_table_add_union_vector@@Base>:
   1883c:	str	fp, [sp, #-8]!
   18840:	str	lr, [sp, #4]
   18844:	add	fp, sp, #4
   18848:	sub	sp, sp, #24
   1884c:	str	r0, [fp, #-16]
   18850:	str	r1, [fp, #-20]	; 0xffffffec
   18854:	sub	r1, fp, #28
   18858:	stm	r1, {r2, r3}
   1885c:	ldr	r3, [fp, #-16]
   18860:	ldr	r3, [r3, #32]
   18864:	ldrh	r3, [r3, #14]
   18868:	cmp	r3, #3
   1886c:	beq	18890 <flatcc_builder_table_add_union_vector@@Base+0x54>
   18870:	ldr	r3, [pc, #404]	; 18a0c <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   18874:	add	r3, pc, r3
   18878:	mov	r2, #1536	; 0x600
   1887c:	ldr	r1, [pc, #396]	; 18a10 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18880:	add	r1, pc, r1
   18884:	ldr	r0, [pc, #392]	; 18a14 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   18888:	add	r0, pc, r0
   1888c:	bl	12078 <__assert_fail@plt>
   18890:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18894:	cmp	r3, #0
   18898:	moveq	r3, #1
   1889c:	movne	r3, #0
   188a0:	uxtb	r2, r3
   188a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188a8:	cmp	r3, #0
   188ac:	moveq	r3, #1
   188b0:	movne	r3, #0
   188b4:	uxtb	r3, r3
   188b8:	eor	r3, r3, r2
   188bc:	uxtb	r3, r3
   188c0:	cmp	r3, #0
   188c4:	beq	18928 <flatcc_builder_table_add_union_vector@@Base+0xec>
   188c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   188cc:	cmp	r3, #0
   188d0:	movne	r3, #1
   188d4:	moveq	r3, #0
   188d8:	uxtb	r2, r3
   188dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188e0:	cmp	r3, #0
   188e4:	moveq	r3, #1
   188e8:	movne	r3, #0
   188ec:	uxtb	r3, r3
   188f0:	eor	r3, r3, r2
   188f4:	uxtb	r3, r3
   188f8:	cmp	r3, #0
   188fc:	bne	18920 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   18900:	ldr	r3, [pc, #272]	; 18a18 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   18904:	add	r3, pc, r3
   18908:	movw	r2, #1537	; 0x601
   1890c:	ldr	r1, [pc, #264]	; 18a1c <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   18910:	add	r1, pc, r1
   18914:	ldr	r0, [pc, #260]	; 18a20 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   18918:	add	r0, pc, r0
   1891c:	bl	12078 <__assert_fail@plt>
   18920:	mvn	r3, #0
   18924:	b	189f8 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   18928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1892c:	cmp	r3, #0
   18930:	beq	189f4 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18934:	ldr	r3, [fp, #-20]	; 0xffffffec
   18938:	sub	r3, r3, #1
   1893c:	mov	r1, r3
   18940:	ldr	r0, [fp, #-16]
   18944:	bl	1983c <flatcc_builder_table_add_offset@@Base>
   18948:	str	r0, [fp, #-8]
   1894c:	ldr	r3, [fp, #-8]
   18950:	cmp	r3, #0
   18954:	bne	1898c <flatcc_builder_table_add_union_vector@@Base+0x150>
   18958:	ldr	r3, [fp, #-8]
   1895c:	cmp	r3, #0
   18960:	bne	18984 <flatcc_builder_table_add_union_vector@@Base+0x148>
   18964:	ldr	r3, [pc, #184]	; 18a24 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18968:	add	r3, pc, r3
   1896c:	movw	r2, #1540	; 0x604
   18970:	ldr	r1, [pc, #176]	; 18a28 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18974:	add	r1, pc, r1
   18978:	ldr	r0, [pc, #172]	; 18a2c <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   1897c:	add	r0, pc, r0
   18980:	bl	12078 <__assert_fail@plt>
   18984:	mvn	r3, #0
   18988:	b	189f8 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   1898c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18990:	ldr	r3, [fp, #-8]
   18994:	str	r2, [r3]
   18998:	ldr	r1, [fp, #-20]	; 0xffffffec
   1899c:	ldr	r0, [fp, #-16]
   189a0:	bl	1983c <flatcc_builder_table_add_offset@@Base>
   189a4:	str	r0, [fp, #-8]
   189a8:	ldr	r3, [fp, #-8]
   189ac:	cmp	r3, #0
   189b0:	bne	189e8 <flatcc_builder_table_add_union_vector@@Base+0x1ac>
   189b4:	ldr	r3, [fp, #-8]
   189b8:	cmp	r3, #0
   189bc:	bne	189e0 <flatcc_builder_table_add_union_vector@@Base+0x1a4>
   189c0:	ldr	r3, [pc, #104]	; 18a30 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   189c4:	add	r3, pc, r3
   189c8:	movw	r2, #1544	; 0x608
   189cc:	ldr	r1, [pc, #96]	; 18a34 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   189d0:	add	r1, pc, r1
   189d4:	ldr	r0, [pc, #92]	; 18a38 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   189d8:	add	r0, pc, r0
   189dc:	bl	12078 <__assert_fail@plt>
   189e0:	mvn	r3, #0
   189e4:	b	189f8 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   189e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   189ec:	ldr	r3, [fp, #-8]
   189f0:	str	r2, [r3]
   189f4:	mov	r3, #0
   189f8:	mov	r0, r3
   189fc:	sub	sp, fp, #4
   18a00:	ldr	fp, [sp]
   18a04:	add	sp, sp, #4
   18a08:	pop	{pc}		; (ldr pc, [sp], #4)
   18a0c:	andeq	r3, r0, r0, asr #9
   18a10:	andeq	r2, r0, r4, lsr #25
   18a14:	andeq	r2, r0, ip, asr pc
   18a18:	andeq	r3, r0, r0, lsr r4
   18a1c:	andeq	r2, r0, r4, lsl ip
   18a20:	andeq	r2, r0, r8, ror #30
   18a24:	andeq	r3, r0, ip, asr #7
   18a28:			; <UNDEFINED> instruction: 0x00002bb0
   18a2c:	andeq	r2, r0, ip, ror #29
   18a30:	andeq	r3, r0, r0, ror r3
   18a34:	andeq	r2, r0, r4, asr fp
   18a38:	muleq	r0, r0, lr

00018a3c <flatcc_builder_create_union_vector@@Base>:
   18a3c:	str	fp, [sp, #-8]!
   18a40:	str	lr, [sp, #4]
   18a44:	add	fp, sp, #4
   18a48:	sub	sp, sp, #48	; 0x30
   18a4c:	str	r0, [fp, #-32]	; 0xffffffe0
   18a50:	str	r1, [fp, #-36]	; 0xffffffdc
   18a54:	str	r2, [fp, #-40]	; 0xffffffd8
   18a58:	str	r3, [fp, #-44]	; 0xffffffd4
   18a5c:	mov	r3, #0
   18a60:	str	r3, [fp, #-24]	; 0xffffffe8
   18a64:	mov	r3, #0
   18a68:	str	r3, [fp, #-20]	; 0xffffffec
   18a6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18a70:	bl	16db0 <flatcc_builder_start_offset_vector@@Base>
   18a74:	mov	r3, r0
   18a78:	cmp	r3, #0
   18a7c:	beq	18a98 <flatcc_builder_create_union_vector@@Base+0x5c>
   18a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18a84:	mov	r1, r3
   18a88:	sub	r3, fp, #24
   18a8c:	ldrd	r2, [r3]
   18a90:	strd	r2, [r1]
   18a94:	b	18bb4 <flatcc_builder_create_union_vector@@Base+0x178>
   18a98:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18a9c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18aa0:	bl	165f4 <flatcc_builder_extend_offset_vector@@Base>
   18aa4:	mov	r3, r0
   18aa8:	cmp	r3, #0
   18aac:	bne	18ac8 <flatcc_builder_create_union_vector@@Base+0x8c>
   18ab0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ab4:	mov	r1, r3
   18ab8:	sub	r3, fp, #24
   18abc:	ldrd	r2, [r3]
   18ac0:	strd	r2, [r1]
   18ac4:	b	18bb4 <flatcc_builder_create_union_vector@@Base+0x178>
   18ac8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18acc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18ad0:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   18ad4:	str	r0, [fp, #-12]
   18ad8:	ldr	r3, [fp, #-12]
   18adc:	cmp	r3, #0
   18ae0:	bne	18afc <flatcc_builder_create_union_vector@@Base+0xc0>
   18ae4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ae8:	mov	r1, r3
   18aec:	sub	r3, fp, #24
   18af0:	ldrd	r2, [r3]
   18af4:	strd	r2, [r1]
   18af8:	b	18bb4 <flatcc_builder_create_union_vector@@Base+0x178>
   18afc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18b00:	bl	18614 <flatcc_builder_offset_vector_edit@@Base>
   18b04:	str	r0, [fp, #-16]
   18b08:	mov	r3, #0
   18b0c:	str	r3, [fp, #-8]
   18b10:	b	18b6c <flatcc_builder_create_union_vector@@Base+0x130>
   18b14:	ldr	r3, [fp, #-8]
   18b18:	lsl	r3, r3, #3
   18b1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18b20:	add	r2, r2, r3
   18b24:	ldr	r1, [fp, #-12]
   18b28:	ldr	r3, [fp, #-8]
   18b2c:	add	r3, r1, r3
   18b30:	ldrb	r2, [r2]
   18b34:	strb	r2, [r3]
   18b38:	ldr	r3, [fp, #-8]
   18b3c:	lsl	r3, r3, #3
   18b40:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18b44:	add	r2, r2, r3
   18b48:	ldr	r3, [fp, #-8]
   18b4c:	lsl	r3, r3, #2
   18b50:	ldr	r1, [fp, #-16]
   18b54:	add	r3, r1, r3
   18b58:	ldr	r2, [r2, #4]
   18b5c:	str	r2, [r3]
   18b60:	ldr	r3, [fp, #-8]
   18b64:	add	r3, r3, #1
   18b68:	str	r3, [fp, #-8]
   18b6c:	ldr	r2, [fp, #-8]
   18b70:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18b74:	cmp	r2, r3
   18b78:	bcc	18b14 <flatcc_builder_create_union_vector@@Base+0xd8>
   18b7c:	sub	r0, fp, #24
   18b80:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18b84:	str	r3, [sp]
   18b88:	ldr	r3, [fp, #-16]
   18b8c:	ldr	r2, [fp, #-12]
   18b90:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18b94:	bl	18bc8 <flatcc_builder_create_union_vector_direct@@Base>
   18b98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18b9c:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18ba0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ba4:	mov	r1, r3
   18ba8:	sub	r3, fp, #24
   18bac:	ldrd	r2, [r3]
   18bb0:	strd	r2, [r1]
   18bb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18bb8:	sub	sp, fp, #4
   18bbc:	ldr	fp, [sp]
   18bc0:	add	sp, sp, #4
   18bc4:	pop	{pc}		; (ldr pc, [sp], #4)

00018bc8 <flatcc_builder_create_union_vector_direct@@Base>:
   18bc8:	str	fp, [sp, #-8]!
   18bcc:	str	lr, [sp, #4]
   18bd0:	add	fp, sp, #4
   18bd4:	sub	sp, sp, #32
   18bd8:	str	r0, [fp, #-16]
   18bdc:	str	r1, [fp, #-20]	; 0xffffffec
   18be0:	str	r2, [fp, #-24]	; 0xffffffe8
   18be4:	str	r3, [fp, #-28]	; 0xffffffe4
   18be8:	mov	r3, #0
   18bec:	str	r3, [fp, #-12]
   18bf0:	mov	r3, #0
   18bf4:	str	r3, [fp, #-8]
   18bf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18bfc:	ldr	r2, [fp, #4]
   18c00:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18c04:	ldr	r0, [fp, #-20]	; 0xffffffec
   18c08:	bl	1811c <flatcc_builder_vector_edit@@Base+0x28>
   18c0c:	mov	r3, r0
   18c10:	str	r3, [fp, #-8]
   18c14:	ldr	r3, [fp, #-8]
   18c18:	cmp	r3, #0
   18c1c:	bne	18c38 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   18c20:	ldr	r3, [fp, #-16]
   18c24:	mov	r1, r3
   18c28:	sub	r3, fp, #12
   18c2c:	ldrd	r2, [r3]
   18c30:	strd	r2, [r1]
   18c34:	b	18c9c <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   18c38:	mvn	r3, #0
   18c3c:	str	r3, [sp, #4]
   18c40:	mov	r3, #1
   18c44:	str	r3, [sp]
   18c48:	mov	r3, #1
   18c4c:	ldr	r2, [fp, #4]
   18c50:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18c54:	ldr	r0, [fp, #-20]	; 0xffffffec
   18c58:	bl	17dc0 <flatcc_builder_create_vector@@Base>
   18c5c:	mov	r3, r0
   18c60:	str	r3, [fp, #-12]
   18c64:	ldr	r3, [fp, #-12]
   18c68:	cmp	r3, #0
   18c6c:	bne	18c88 <flatcc_builder_create_union_vector_direct@@Base+0xc0>
   18c70:	ldr	r3, [fp, #-16]
   18c74:	mov	r1, r3
   18c78:	sub	r3, fp, #12
   18c7c:	ldrd	r2, [r3]
   18c80:	strd	r2, [r1]
   18c84:	b	18c9c <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   18c88:	ldr	r3, [fp, #-16]
   18c8c:	mov	r1, r3
   18c90:	sub	r3, fp, #12
   18c94:	ldrd	r2, [r3]
   18c98:	strd	r2, [r1]
   18c9c:	ldr	r0, [fp, #-16]
   18ca0:	sub	sp, fp, #4
   18ca4:	ldr	fp, [sp]
   18ca8:	add	sp, sp, #4
   18cac:	pop	{pc}		; (ldr pc, [sp], #4)

00018cb0 <flatcc_builder_start_union_vector@@Base>:
   18cb0:	str	fp, [sp, #-8]!
   18cb4:	str	lr, [sp, #4]
   18cb8:	add	fp, sp, #4
   18cbc:	sub	sp, sp, #8
   18cc0:	str	r0, [fp, #-8]
   18cc4:	mov	r1, #4
   18cc8:	ldr	r0, [fp, #-8]
   18ccc:	bl	14fe4 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18cd0:	mov	r3, r0
   18cd4:	cmp	r3, #0
   18cd8:	beq	18ce4 <flatcc_builder_start_union_vector@@Base+0x34>
   18cdc:	mvn	r3, #0
   18ce0:	b	18d24 <flatcc_builder_start_union_vector@@Base+0x74>
   18ce4:	ldr	r3, [fp, #-8]
   18ce8:	ldr	r3, [r3, #32]
   18cec:	mov	r2, #8
   18cf0:	str	r2, [r3, #16]
   18cf4:	ldr	r3, [fp, #-8]
   18cf8:	ldr	r3, [r3, #32]
   18cfc:	mov	r2, #0
   18d00:	str	r2, [r3, #20]
   18d04:	ldr	r3, [fp, #-8]
   18d08:	ldr	r3, [r3, #32]
   18d0c:	mov	r2, #7
   18d10:	strh	r2, [r3, #14]
   18d14:	mvn	r1, #3
   18d18:	ldr	r0, [fp, #-8]
   18d1c:	bl	13e44 <flatcc_builder_default_alloc@@Base+0x1d4>
   18d20:	mov	r3, #0
   18d24:	mov	r0, r3
   18d28:	sub	sp, fp, #4
   18d2c:	ldr	fp, [sp]
   18d30:	add	sp, sp, #4
   18d34:	pop	{pc}		; (ldr pc, [sp], #4)

00018d38 <flatcc_builder_end_union_vector@@Base>:
   18d38:	str	fp, [sp, #-8]!
   18d3c:	str	lr, [sp, #4]
   18d40:	add	fp, sp, #4
   18d44:	sub	sp, sp, #48	; 0x30
   18d48:	str	r0, [fp, #-40]	; 0xffffffd8
   18d4c:	str	r1, [fp, #-44]	; 0xffffffd4
   18d50:	mov	r3, #0
   18d54:	str	r3, [fp, #-32]	; 0xffffffe0
   18d58:	mov	r3, #0
   18d5c:	str	r3, [fp, #-28]	; 0xffffffe4
   18d60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18d64:	ldr	r3, [r3, #32]
   18d68:	ldrh	r3, [r3, #14]
   18d6c:	cmp	r3, #7
   18d70:	beq	18d94 <flatcc_builder_end_union_vector@@Base+0x5c>
   18d74:	ldr	r3, [pc, #328]	; 18ec4 <flatcc_builder_end_union_vector@@Base+0x18c>
   18d78:	add	r3, pc, r3
   18d7c:	movw	r2, #1617	; 0x651
   18d80:	ldr	r1, [pc, #320]	; 18ec8 <flatcc_builder_end_union_vector@@Base+0x190>
   18d84:	add	r1, pc, r1
   18d88:	ldr	r0, [pc, #316]	; 18ecc <flatcc_builder_end_union_vector@@Base+0x194>
   18d8c:	add	r0, pc, r0
   18d90:	bl	12078 <__assert_fail@plt>
   18d94:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18d98:	bl	18ef8 <flatcc_builder_union_vector_count@@Base>
   18d9c:	str	r0, [fp, #-12]
   18da0:	ldr	r2, [fp, #-12]
   18da4:	mov	r3, r2
   18da8:	lsl	r3, r3, #2
   18dac:	add	r3, r3, r2
   18db0:	mov	r1, r3
   18db4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18db8:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   18dbc:	str	r0, [fp, #-16]
   18dc0:	ldr	r3, [fp, #-16]
   18dc4:	cmp	r3, #0
   18dc8:	bne	18de4 <flatcc_builder_end_union_vector@@Base+0xac>
   18dcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18dd0:	mov	r1, r3
   18dd4:	sub	r3, fp, #32
   18dd8:	ldrd	r2, [r3]
   18ddc:	strd	r2, [r1]
   18de0:	b	18eb0 <flatcc_builder_end_union_vector@@Base+0x178>
   18de4:	ldr	r3, [fp, #-12]
   18de8:	lsl	r3, r3, #2
   18dec:	ldr	r2, [fp, #-16]
   18df0:	add	r3, r2, r3
   18df4:	str	r3, [fp, #-20]	; 0xffffffec
   18df8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18dfc:	bl	18ed0 <flatcc_builder_union_vector_edit@@Base>
   18e00:	str	r0, [fp, #-24]	; 0xffffffe8
   18e04:	mov	r3, #0
   18e08:	str	r3, [fp, #-8]
   18e0c:	b	18e68 <flatcc_builder_end_union_vector@@Base+0x130>
   18e10:	ldr	r3, [fp, #-8]
   18e14:	lsl	r3, r3, #3
   18e18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18e1c:	add	r2, r2, r3
   18e20:	ldr	r1, [fp, #-20]	; 0xffffffec
   18e24:	ldr	r3, [fp, #-8]
   18e28:	add	r3, r1, r3
   18e2c:	ldrb	r2, [r2]
   18e30:	strb	r2, [r3]
   18e34:	ldr	r3, [fp, #-8]
   18e38:	lsl	r3, r3, #3
   18e3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18e40:	add	r2, r2, r3
   18e44:	ldr	r3, [fp, #-8]
   18e48:	lsl	r3, r3, #2
   18e4c:	ldr	r1, [fp, #-16]
   18e50:	add	r3, r1, r3
   18e54:	ldr	r2, [r2, #4]
   18e58:	str	r2, [r3]
   18e5c:	ldr	r3, [fp, #-8]
   18e60:	add	r3, r3, #1
   18e64:	str	r3, [fp, #-8]
   18e68:	ldr	r2, [fp, #-8]
   18e6c:	ldr	r3, [fp, #-12]
   18e70:	cmp	r2, r3
   18e74:	bcc	18e10 <flatcc_builder_end_union_vector@@Base+0xd8>
   18e78:	sub	r0, fp, #32
   18e7c:	ldr	r3, [fp, #-12]
   18e80:	str	r3, [sp]
   18e84:	ldr	r3, [fp, #-16]
   18e88:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18e90:	bl	18bc8 <flatcc_builder_create_union_vector_direct@@Base>
   18e94:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18e98:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18e9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18ea0:	mov	r1, r3
   18ea4:	sub	r3, fp, #32
   18ea8:	ldrd	r2, [r3]
   18eac:	strd	r2, [r1]
   18eb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18eb4:	sub	sp, fp, #4
   18eb8:	ldr	fp, [sp]
   18ebc:	add	sp, sp, #4
   18ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ec4:	andeq	r2, r0, r4, ror #31
   18ec8:	andeq	r2, r0, r0, lsr #15
   18ecc:	andeq	r2, r0, ip, lsl fp

00018ed0 <flatcc_builder_union_vector_edit@@Base>:
   18ed0:	push	{fp}		; (str fp, [sp, #-4]!)
   18ed4:	add	fp, sp, #0
   18ed8:	sub	sp, sp, #12
   18edc:	str	r0, [fp, #-8]
   18ee0:	ldr	r3, [fp, #-8]
   18ee4:	ldr	r3, [r3, #16]
   18ee8:	mov	r0, r3
   18eec:	add	sp, fp, #0
   18ef0:	pop	{fp}		; (ldr fp, [sp], #4)
   18ef4:	bx	lr

00018ef8 <flatcc_builder_union_vector_count@@Base>:
   18ef8:	push	{fp}		; (str fp, [sp, #-4]!)
   18efc:	add	fp, sp, #0
   18f00:	sub	sp, sp, #12
   18f04:	str	r0, [fp, #-8]
   18f08:	ldr	r3, [fp, #-8]
   18f0c:	ldr	r3, [r3, #32]
   18f10:	ldr	r3, [r3, #20]
   18f14:	mov	r0, r3
   18f18:	add	sp, fp, #0
   18f1c:	pop	{fp}		; (ldr fp, [sp], #4)
   18f20:	bx	lr

00018f24 <flatcc_builder_extend_union_vector@@Base>:
   18f24:	str	fp, [sp, #-8]!
   18f28:	str	lr, [sp, #4]
   18f2c:	add	fp, sp, #4
   18f30:	sub	sp, sp, #8
   18f34:	str	r0, [fp, #-8]
   18f38:	str	r1, [fp, #-12]
   18f3c:	mvn	r2, #-536870912	; 0xe0000000
   18f40:	ldr	r1, [fp, #-12]
   18f44:	ldr	r0, [fp, #-8]
   18f48:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   18f4c:	mov	r3, r0
   18f50:	cmp	r3, #0
   18f54:	beq	18f60 <flatcc_builder_extend_union_vector@@Base+0x3c>
   18f58:	mov	r3, #0
   18f5c:	b	18f78 <flatcc_builder_extend_union_vector@@Base+0x54>
   18f60:	ldr	r3, [fp, #-12]
   18f64:	lsl	r3, r3, #3
   18f68:	mov	r1, r3
   18f6c:	ldr	r0, [fp, #-8]
   18f70:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   18f74:	mov	r3, r0
   18f78:	mov	r0, r3
   18f7c:	sub	sp, fp, #4
   18f80:	ldr	fp, [sp]
   18f84:	add	sp, sp, #4
   18f88:	pop	{pc}		; (ldr pc, [sp], #4)

00018f8c <flatcc_builder_truncate_union_vector@@Base>:
   18f8c:	str	fp, [sp, #-8]!
   18f90:	str	lr, [sp, #4]
   18f94:	add	fp, sp, #4
   18f98:	sub	sp, sp, #8
   18f9c:	str	r0, [fp, #-8]
   18fa0:	str	r1, [fp, #-12]
   18fa4:	ldr	r3, [fp, #-8]
   18fa8:	ldr	r3, [r3, #32]
   18fac:	ldrh	r3, [r3, #14]
   18fb0:	cmp	r3, #7
   18fb4:	beq	18fd8 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   18fb8:	ldr	r3, [pc, #200]	; 19088 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18fbc:	add	r3, pc, r3
   18fc0:	movw	r2, #1665	; 0x681
   18fc4:	ldr	r1, [pc, #192]	; 1908c <flatcc_builder_truncate_union_vector@@Base+0x100>
   18fc8:	add	r1, pc, r1
   18fcc:	ldr	r0, [pc, #188]	; 19090 <flatcc_builder_truncate_union_vector@@Base+0x104>
   18fd0:	add	r0, pc, r0
   18fd4:	bl	12078 <__assert_fail@plt>
   18fd8:	ldr	r3, [fp, #-8]
   18fdc:	ldr	r3, [r3, #32]
   18fe0:	ldr	r3, [r3, #20]
   18fe4:	ldr	r2, [fp, #-12]
   18fe8:	cmp	r2, r3
   18fec:	bls	19030 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   18ff0:	ldr	r3, [fp, #-8]
   18ff4:	ldr	r3, [r3, #32]
   18ff8:	ldr	r3, [r3, #20]
   18ffc:	ldr	r2, [fp, #-12]
   19000:	cmp	r2, r3
   19004:	bls	19028 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   19008:	ldr	r3, [pc, #132]	; 19094 <flatcc_builder_truncate_union_vector@@Base+0x108>
   1900c:	add	r3, pc, r3
   19010:	movw	r2, #1666	; 0x682
   19014:	ldr	r1, [pc, #124]	; 19098 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   19018:	add	r1, pc, r1
   1901c:	ldr	r0, [pc, #120]	; 1909c <flatcc_builder_truncate_union_vector@@Base+0x110>
   19020:	add	r0, pc, r0
   19024:	bl	12078 <__assert_fail@plt>
   19028:	mvn	r3, #0
   1902c:	b	19074 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   19030:	ldr	r3, [fp, #-8]
   19034:	ldr	r3, [r3, #32]
   19038:	ldr	r1, [r3, #20]
   1903c:	ldr	r3, [fp, #-8]
   19040:	ldr	r3, [r3, #32]
   19044:	ldr	r2, [fp, #-12]
   19048:	sub	r2, r1, r2
   1904c:	str	r2, [r3, #20]
   19050:	ldr	r3, [fp, #-8]
   19054:	ldr	r3, [r3, #32]
   19058:	ldr	r3, [r3, #16]
   1905c:	ldr	r2, [fp, #-12]
   19060:	mul	r3, r2, r3
   19064:	mov	r1, r3
   19068:	ldr	r0, [fp, #-8]
   1906c:	bl	14028 <flatcc_builder_default_alloc@@Base+0x3b8>
   19070:	mov	r3, #0
   19074:	mov	r0, r3
   19078:	sub	sp, fp, #4
   1907c:	ldr	fp, [sp]
   19080:	add	sp, sp, #4
   19084:	pop	{pc}		; (ldr pc, [sp], #4)
   19088:	andeq	r2, r0, r0, asr #27
   1908c:	andeq	r2, r0, ip, asr r5
   19090:	ldrdeq	r2, [r0], -r8
   19094:	andeq	r2, r0, r0, ror sp
   19098:	andeq	r2, r0, ip, lsl #10
   1909c:	andeq	r2, r0, r8, lsr r7

000190a0 <flatcc_builder_union_vector_push@@Base>:
   190a0:	str	fp, [sp, #-8]!
   190a4:	str	lr, [sp, #4]
   190a8:	add	fp, sp, #4
   190ac:	sub	sp, sp, #24
   190b0:	str	r0, [fp, #-16]
   190b4:	sub	r3, fp, #24
   190b8:	stm	r3, {r1, r2}
   190bc:	ldr	r3, [fp, #-16]
   190c0:	ldr	r3, [r3, #32]
   190c4:	ldrh	r3, [r3, #14]
   190c8:	cmp	r3, #7
   190cc:	beq	190f0 <flatcc_builder_union_vector_push@@Base+0x50>
   190d0:	ldr	r3, [pc, #160]	; 19178 <flatcc_builder_union_vector_push@@Base+0xd8>
   190d4:	add	r3, pc, r3
   190d8:	movw	r2, #1677	; 0x68d
   190dc:	ldr	r1, [pc, #152]	; 1917c <flatcc_builder_union_vector_push@@Base+0xdc>
   190e0:	add	r1, pc, r1
   190e4:	ldr	r0, [pc, #148]	; 19180 <flatcc_builder_union_vector_push@@Base+0xe0>
   190e8:	add	r0, pc, r0
   190ec:	bl	12078 <__assert_fail@plt>
   190f0:	ldr	r3, [fp, #-16]
   190f4:	ldr	r3, [r3, #32]
   190f8:	ldr	r3, [r3, #20]
   190fc:	cmn	r3, #-536870911	; 0xe0000001
   19100:	bne	1910c <flatcc_builder_union_vector_push@@Base+0x6c>
   19104:	mov	r3, #0
   19108:	b	19164 <flatcc_builder_union_vector_push@@Base+0xc4>
   1910c:	ldr	r3, [fp, #-16]
   19110:	ldr	r3, [r3, #32]
   19114:	ldr	r2, [r3, #20]
   19118:	ldr	r3, [fp, #-16]
   1911c:	ldr	r3, [r3, #32]
   19120:	add	r2, r2, #1
   19124:	str	r2, [r3, #20]
   19128:	mov	r1, #8
   1912c:	ldr	r0, [fp, #-16]
   19130:	bl	13f80 <flatcc_builder_default_alloc@@Base+0x310>
   19134:	str	r0, [fp, #-8]
   19138:	ldr	r3, [fp, #-8]
   1913c:	cmp	r3, #0
   19140:	bne	1914c <flatcc_builder_union_vector_push@@Base+0xac>
   19144:	mov	r3, #0
   19148:	b	19164 <flatcc_builder_union_vector_push@@Base+0xc4>
   1914c:	ldr	r3, [fp, #-8]
   19150:	mov	r1, r3
   19154:	sub	r3, fp, #24
   19158:	ldrd	r2, [r3]
   1915c:	strd	r2, [r1]
   19160:	ldr	r3, [fp, #-8]
   19164:	mov	r0, r3
   19168:	sub	sp, fp, #4
   1916c:	ldr	fp, [sp]
   19170:	add	sp, sp, #4
   19174:	pop	{pc}		; (ldr pc, [sp], #4)
   19178:	ldrdeq	r2, [r0], -r0
   1917c:	andeq	r2, r0, r4, asr #8
   19180:	andeq	r2, r0, r0, asr #15

00019184 <flatcc_builder_append_union_vector@@Base>:
   19184:	str	fp, [sp, #-8]!
   19188:	str	lr, [sp, #4]
   1918c:	add	fp, sp, #4
   19190:	sub	sp, sp, #16
   19194:	str	r0, [fp, #-8]
   19198:	str	r1, [fp, #-12]
   1919c:	str	r2, [fp, #-16]
   191a0:	ldr	r3, [fp, #-8]
   191a4:	ldr	r3, [r3, #32]
   191a8:	ldrh	r3, [r3, #14]
   191ac:	cmp	r3, #7
   191b0:	beq	191d4 <flatcc_builder_append_union_vector@@Base+0x50>
   191b4:	ldr	r3, [pc, #108]	; 19228 <flatcc_builder_append_union_vector@@Base+0xa4>
   191b8:	add	r3, pc, r3
   191bc:	movw	r2, #1692	; 0x69c
   191c0:	ldr	r1, [pc, #100]	; 1922c <flatcc_builder_append_union_vector@@Base+0xa8>
   191c4:	add	r1, pc, r1
   191c8:	ldr	r0, [pc, #96]	; 19230 <flatcc_builder_append_union_vector@@Base+0xac>
   191cc:	add	r0, pc, r0
   191d0:	bl	12078 <__assert_fail@plt>
   191d4:	mvn	r2, #-536870912	; 0xe0000000
   191d8:	ldr	r1, [fp, #-16]
   191dc:	ldr	r0, [fp, #-8]
   191e0:	bl	162b8 <flatcc_builder_end_struct@@Base+0xac>
   191e4:	mov	r3, r0
   191e8:	cmp	r3, #0
   191ec:	beq	191f8 <flatcc_builder_append_union_vector@@Base+0x74>
   191f0:	mov	r3, #0
   191f4:	b	19214 <flatcc_builder_append_union_vector@@Base+0x90>
   191f8:	ldr	r3, [fp, #-16]
   191fc:	lsl	r3, r3, #3
   19200:	mov	r2, r3
   19204:	ldr	r1, [fp, #-12]
   19208:	ldr	r0, [fp, #-8]
   1920c:	bl	14090 <flatcc_builder_default_alloc@@Base+0x420>
   19210:	mov	r3, r0
   19214:	mov	r0, r3
   19218:	sub	sp, fp, #4
   1921c:	ldr	fp, [sp]
   19220:	add	sp, sp, #4
   19224:	pop	{pc}		; (ldr pc, [sp], #4)
   19228:	andeq	r2, r0, r0, lsl ip
   1922c:	andeq	r2, r0, r0, ror #6
   19230:	ldrdeq	r2, [r0], -ip

00019234 <flatcc_builder_create_string@@Base>:
   19234:	str	r4, [sp, #-12]!
   19238:	str	fp, [sp, #4]
   1923c:	str	lr, [sp, #8]
   19240:	add	fp, sp, #8
   19244:	sub	sp, sp, #100	; 0x64
   19248:	str	r0, [fp, #-96]	; 0xffffffa0
   1924c:	str	r1, [fp, #-100]	; 0xffffff9c
   19250:	str	r2, [fp, #-104]	; 0xffffff98
   19254:	ldr	r4, [pc, #388]	; 193e0 <flatcc_builder_create_string@@Base+0x1ac>
   19258:	add	r4, pc, r4
   1925c:	ldr	r0, [fp, #-104]	; 0xffffff98
   19260:	bl	13b20 <main@@Base+0x3f4>
   19264:	mov	r3, r0
   19268:	str	r3, [fp, #-20]	; 0xffffffec
   1926c:	ldr	r3, [fp, #-104]	; 0xffffff98
   19270:	add	r3, r3, #1
   19274:	mov	r2, #4
   19278:	mov	r1, r3
   1927c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19280:	bl	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   19284:	mov	r3, r0
   19288:	add	r3, r3, #1
   1928c:	str	r3, [fp, #-16]
   19290:	mov	r3, #0
   19294:	str	r3, [fp, #-92]	; 0xffffffa4
   19298:	mov	r3, #0
   1929c:	str	r3, [fp, #-88]	; 0xffffffa8
   192a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   192a4:	add	r3, r3, #4
   192a8:	str	r3, [fp, #-92]	; 0xffffffa4
   192ac:	ldr	r3, [fp, #-88]	; 0xffffffa8
   192b0:	add	r3, r3, #1
   192b4:	lsl	r3, r3, #3
   192b8:	sub	r2, fp, #12
   192bc:	add	r3, r2, r3
   192c0:	sub	r2, fp, #20
   192c4:	str	r2, [r3, #-80]	; 0xffffffb0
   192c8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   192cc:	add	r3, r3, #1
   192d0:	lsl	r3, r3, #3
   192d4:	sub	r2, fp, #12
   192d8:	add	r3, r2, r3
   192dc:	mov	r2, #4
   192e0:	str	r2, [r3, #-76]	; 0xffffffb4
   192e4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   192e8:	add	r3, r3, #1
   192ec:	str	r3, [fp, #-88]	; 0xffffffa8
   192f0:	ldr	r3, [fp, #-104]	; 0xffffff98
   192f4:	cmp	r3, #0
   192f8:	beq	19350 <flatcc_builder_create_string@@Base+0x11c>
   192fc:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19300:	ldr	r3, [fp, #-104]	; 0xffffff98
   19304:	add	r3, r2, r3
   19308:	str	r3, [fp, #-92]	; 0xffffffa4
   1930c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19310:	add	r3, r3, #1
   19314:	lsl	r3, r3, #3
   19318:	sub	r2, fp, #12
   1931c:	add	r3, r2, r3
   19320:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19324:	str	r2, [r3, #-80]	; 0xffffffb0
   19328:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1932c:	add	r3, r3, #1
   19330:	lsl	r3, r3, #3
   19334:	sub	r2, fp, #12
   19338:	add	r3, r2, r3
   1933c:	ldr	r2, [fp, #-104]	; 0xffffff98
   19340:	str	r2, [r3, #-76]	; 0xffffffb4
   19344:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19348:	add	r3, r3, #1
   1934c:	str	r3, [fp, #-88]	; 0xffffffa8
   19350:	ldr	r3, [fp, #-16]
   19354:	cmp	r3, #0
   19358:	beq	193b4 <flatcc_builder_create_string@@Base+0x180>
   1935c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19360:	ldr	r3, [fp, #-16]
   19364:	add	r3, r2, r3
   19368:	str	r3, [fp, #-92]	; 0xffffffa4
   1936c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19370:	add	r3, r3, #1
   19374:	lsl	r3, r3, #3
   19378:	sub	r2, fp, #12
   1937c:	add	r3, r2, r3
   19380:	ldr	r2, [pc, #92]	; 193e4 <flatcc_builder_create_string@@Base+0x1b0>
   19384:	ldr	r2, [r4, r2]
   19388:	str	r2, [r3, #-80]	; 0xffffffb0
   1938c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19390:	add	r3, r3, #1
   19394:	lsl	r3, r3, #3
   19398:	sub	r2, fp, #12
   1939c:	add	r3, r2, r3
   193a0:	ldr	r2, [fp, #-16]
   193a4:	str	r2, [r3, #-76]	; 0xffffffb4
   193a8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   193ac:	add	r3, r3, #1
   193b0:	str	r3, [fp, #-88]	; 0xffffffa8
   193b4:	sub	r3, fp, #92	; 0x5c
   193b8:	mov	r1, r3
   193bc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   193c0:	bl	1532c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   193c4:	mov	r3, r0
   193c8:	mov	r0, r3
   193cc:	sub	sp, fp, #8
   193d0:	ldr	r4, [sp]
   193d4:	ldr	fp, [sp, #4]
   193d8:	add	sp, sp, #8
   193dc:	pop	{pc}		; (ldr pc, [sp], #4)
   193e0:	andeq	r2, r1, r0, lsr #27
   193e4:	andeq	r0, r0, r0, rrx

000193e8 <flatcc_builder_create_string_str@@Base>:
   193e8:	str	fp, [sp, #-8]!
   193ec:	str	lr, [sp, #4]
   193f0:	add	fp, sp, #4
   193f4:	sub	sp, sp, #8
   193f8:	str	r0, [fp, #-8]
   193fc:	str	r1, [fp, #-12]
   19400:	ldr	r0, [fp, #-12]
   19404:	bl	12024 <strlen@plt>
   19408:	mov	r3, r0
   1940c:	mov	r2, r3
   19410:	ldr	r1, [fp, #-12]
   19414:	ldr	r0, [fp, #-8]
   19418:	bl	19234 <flatcc_builder_create_string@@Base>
   1941c:	mov	r3, r0
   19420:	mov	r0, r3
   19424:	sub	sp, fp, #4
   19428:	ldr	fp, [sp]
   1942c:	add	sp, sp, #4
   19430:	pop	{pc}		; (ldr pc, [sp], #4)

00019434 <flatcc_builder_create_string_strn@@Base>:
   19434:	str	fp, [sp, #-8]!
   19438:	str	lr, [sp, #4]
   1943c:	add	fp, sp, #4
   19440:	sub	sp, sp, #16
   19444:	str	r0, [fp, #-8]
   19448:	str	r1, [fp, #-12]
   1944c:	str	r2, [fp, #-16]
   19450:	ldr	r1, [fp, #-16]
   19454:	ldr	r0, [fp, #-12]
   19458:	bl	13c10 <main@@Base+0x4e4>
   1945c:	mov	r3, r0
   19460:	mov	r2, r3
   19464:	ldr	r1, [fp, #-12]
   19468:	ldr	r0, [fp, #-8]
   1946c:	bl	19234 <flatcc_builder_create_string@@Base>
   19470:	mov	r3, r0
   19474:	mov	r0, r3
   19478:	sub	sp, fp, #4
   1947c:	ldr	fp, [sp]
   19480:	add	sp, sp, #4
   19484:	pop	{pc}		; (ldr pc, [sp], #4)

00019488 <flatcc_builder_end_string@@Base>:
   19488:	str	fp, [sp, #-8]!
   1948c:	str	lr, [sp, #4]
   19490:	add	fp, sp, #4
   19494:	sub	sp, sp, #16
   19498:	str	r0, [fp, #-16]
   1949c:	ldr	r3, [fp, #-16]
   194a0:	ldr	r3, [r3, #32]
   194a4:	ldrh	r3, [r3, #14]
   194a8:	cmp	r3, #6
   194ac:	beq	194d0 <flatcc_builder_end_string@@Base+0x48>
   194b0:	ldr	r3, [pc, #168]	; 19560 <flatcc_builder_end_string@@Base+0xd8>
   194b4:	add	r3, pc, r3
   194b8:	movw	r2, #1732	; 0x6c4
   194bc:	ldr	r1, [pc, #160]	; 19564 <flatcc_builder_end_string@@Base+0xdc>
   194c0:	add	r1, pc, r1
   194c4:	ldr	r0, [pc, #156]	; 19568 <flatcc_builder_end_string@@Base+0xe0>
   194c8:	add	r0, pc, r0
   194cc:	bl	12078 <__assert_fail@plt>
   194d0:	ldr	r3, [fp, #-16]
   194d4:	ldr	r3, [r3, #32]
   194d8:	ldr	r2, [r3, #20]
   194dc:	ldr	r3, [fp, #-16]
   194e0:	ldr	r3, [r3, #20]
   194e4:	cmp	r2, r3
   194e8:	beq	1950c <flatcc_builder_end_string@@Base+0x84>
   194ec:	ldr	r3, [pc, #120]	; 1956c <flatcc_builder_end_string@@Base+0xe4>
   194f0:	add	r3, pc, r3
   194f4:	movw	r2, #1733	; 0x6c5
   194f8:	ldr	r1, [pc, #112]	; 19570 <flatcc_builder_end_string@@Base+0xe8>
   194fc:	add	r1, pc, r1
   19500:	ldr	r0, [pc, #108]	; 19574 <flatcc_builder_end_string@@Base+0xec>
   19504:	add	r0, pc, r0
   19508:	bl	12078 <__assert_fail@plt>
   1950c:	ldr	r3, [fp, #-16]
   19510:	ldr	r1, [r3, #16]
   19514:	ldr	r3, [fp, #-16]
   19518:	ldr	r3, [r3, #20]
   1951c:	mov	r2, r3
   19520:	ldr	r0, [fp, #-16]
   19524:	bl	19234 <flatcc_builder_create_string@@Base>
   19528:	str	r0, [fp, #-8]
   1952c:	ldr	r3, [fp, #-8]
   19530:	cmp	r3, #0
   19534:	bne	19540 <flatcc_builder_end_string@@Base+0xb8>
   19538:	mov	r3, #0
   1953c:	b	1954c <flatcc_builder_end_string@@Base+0xc4>
   19540:	ldr	r0, [fp, #-16]
   19544:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   19548:	ldr	r3, [fp, #-8]
   1954c:	mov	r0, r3
   19550:	sub	sp, fp, #4
   19554:	ldr	fp, [sp]
   19558:	add	sp, sp, #4
   1955c:	pop	{pc}		; (ldr pc, [sp], #4)
   19560:	andeq	r2, r0, r8, lsr r9
   19564:	andeq	r2, r0, r4, rrx
   19568:	andeq	r2, r0, r0, asr #4
   1956c:	strdeq	r2, [r0], -ip
   19570:	andeq	r2, r0, r8, lsr #32
   19574:	ldrdeq	r2, [r0], -r8

00019578 <flatcc_builder_string_edit@@Base>:
   19578:	push	{fp}		; (str fp, [sp, #-4]!)
   1957c:	add	fp, sp, #0
   19580:	sub	sp, sp, #12
   19584:	str	r0, [fp, #-8]
   19588:	ldr	r3, [fp, #-8]
   1958c:	ldr	r3, [r3, #16]
   19590:	mov	r0, r3
   19594:	add	sp, fp, #0
   19598:	pop	{fp}		; (ldr fp, [sp], #4)
   1959c:	bx	lr

000195a0 <flatcc_builder_string_len@@Base>:
   195a0:	push	{fp}		; (str fp, [sp, #-4]!)
   195a4:	add	fp, sp, #0
   195a8:	sub	sp, sp, #12
   195ac:	str	r0, [fp, #-8]
   195b0:	ldr	r3, [fp, #-8]
   195b4:	ldr	r3, [r3, #32]
   195b8:	ldr	r3, [r3, #20]
   195bc:	mov	r0, r3
   195c0:	add	sp, fp, #0
   195c4:	pop	{fp}		; (ldr fp, [sp], #4)
   195c8:	bx	lr

000195cc <flatcc_builder_table_add@@Base>:
   195cc:	str	fp, [sp, #-8]!
   195d0:	str	lr, [sp, #4]
   195d4:	add	fp, sp, #4
   195d8:	sub	sp, sp, #16
   195dc:	str	r0, [fp, #-8]
   195e0:	str	r1, [fp, #-12]
   195e4:	str	r2, [fp, #-16]
   195e8:	strh	r3, [fp, #-18]	; 0xffffffee
   195ec:	ldr	r3, [fp, #-8]
   195f0:	ldr	r3, [r3, #32]
   195f4:	ldrh	r3, [r3, #14]
   195f8:	cmp	r3, #3
   195fc:	beq	19620 <flatcc_builder_table_add@@Base+0x54>
   19600:	ldr	r3, [pc, #284]	; 19724 <flatcc_builder_table_add@@Base+0x158>
   19604:	add	r3, pc, r3
   19608:	movw	r2, #1773	; 0x6ed
   1960c:	ldr	r1, [pc, #276]	; 19728 <flatcc_builder_table_add@@Base+0x15c>
   19610:	add	r1, pc, r1
   19614:	ldr	r0, [pc, #272]	; 1972c <flatcc_builder_table_add@@Base+0x160>
   19618:	add	r0, pc, r0
   1961c:	bl	12078 <__assert_fail@plt>
   19620:	ldr	r3, [fp, #-12]
   19624:	cmp	r3, #0
   19628:	blt	1963c <flatcc_builder_table_add@@Base+0x70>
   1962c:	ldr	r3, [fp, #-12]
   19630:	movw	r2, #32764	; 0x7ffc
   19634:	cmp	r3, r2
   19638:	ble	1965c <flatcc_builder_table_add@@Base+0x90>
   1963c:	ldr	r3, [pc, #236]	; 19730 <flatcc_builder_table_add@@Base+0x164>
   19640:	add	r3, pc, r3
   19644:	movw	r2, #1774	; 0x6ee
   19648:	ldr	r1, [pc, #228]	; 19734 <flatcc_builder_table_add@@Base+0x168>
   1964c:	add	r1, pc, r1
   19650:	ldr	r0, [pc, #224]	; 19738 <flatcc_builder_table_add@@Base+0x16c>
   19654:	add	r0, pc, r0
   19658:	bl	12078 <__assert_fail@plt>
   1965c:	ldr	r3, [fp, #-8]
   19660:	ldrh	r3, [r3, #130]	; 0x82
   19664:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19668:	cmp	r2, r3
   1966c:	bls	1967c <flatcc_builder_table_add@@Base+0xb0>
   19670:	ldr	r3, [fp, #-8]
   19674:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19678:	strh	r2, [r3, #130]	; 0x82
   1967c:	ldr	r3, [fp, #-8]
   19680:	ldr	r2, [r3, #4]
   19684:	ldr	r3, [fp, #-12]
   19688:	lsl	r3, r3, #1
   1968c:	add	r3, r2, r3
   19690:	ldrh	r3, [r3]
   19694:	cmp	r3, #0
   19698:	beq	196bc <flatcc_builder_table_add@@Base+0xf0>
   1969c:	ldr	r3, [pc, #152]	; 1973c <flatcc_builder_table_add@@Base+0x170>
   196a0:	add	r3, pc, r3
   196a4:	movw	r2, #1784	; 0x6f8
   196a8:	ldr	r1, [pc, #144]	; 19740 <flatcc_builder_table_add@@Base+0x174>
   196ac:	add	r1, pc, r1
   196b0:	ldr	r0, [pc, #140]	; 19744 <flatcc_builder_table_add@@Base+0x178>
   196b4:	add	r0, pc, r0
   196b8:	bl	12078 <__assert_fail@plt>
   196bc:	ldr	r3, [fp, #-8]
   196c0:	ldr	r2, [r3, #12]
   196c4:	ldr	r3, [fp, #-12]
   196c8:	eor	r2, r2, r3
   196cc:	movw	r3, #31153	; 0x79b1
   196d0:	movt	r3, #40503	; 0x9e37
   196d4:	mul	r2, r3, r2
   196d8:	ldr	r3, [fp, #-16]
   196dc:	eor	r2, r2, r3
   196e0:	movw	r3, #31153	; 0x79b1
   196e4:	movt	r3, #40503	; 0x9e37
   196e8:	mul	r2, r3, r2
   196ec:	ldr	r3, [fp, #-8]
   196f0:	str	r2, [r3, #12]
   196f4:	ldr	r3, [fp, #-12]
   196f8:	uxth	r3, r3
   196fc:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19700:	ldr	r1, [fp, #-16]
   19704:	ldr	r0, [fp, #-8]
   19708:	bl	140f8 <flatcc_builder_default_alloc@@Base+0x488>
   1970c:	mov	r3, r0
   19710:	mov	r0, r3
   19714:	sub	sp, fp, #4
   19718:	ldr	fp, [sp]
   1971c:	add	sp, sp, #4
   19720:	pop	{pc}		; (ldr pc, [sp], #4)
   19724:	andeq	r2, r0, r4, lsl #16
   19728:	andeq	r1, r0, r4, lsl pc
   1972c:	andeq	r2, r0, ip, asr #3
   19730:	andeq	r2, r0, r8, asr #15
   19734:	ldrdeq	r1, [r0], -r8
   19738:	andeq	r2, r0, ip, lsr #5
   1973c:	andeq	r2, r0, r8, ror #14
   19740:	andeq	r1, r0, r8, ror lr
   19744:	ldrdeq	r1, [r0], -r0

00019748 <flatcc_builder_table_edit@@Base>:
   19748:	str	fp, [sp, #-8]!
   1974c:	str	lr, [sp, #4]
   19750:	add	fp, sp, #4
   19754:	sub	sp, sp, #8
   19758:	str	r0, [fp, #-8]
   1975c:	str	r1, [fp, #-12]
   19760:	ldr	r3, [fp, #-8]
   19764:	ldr	r3, [r3, #32]
   19768:	ldrh	r3, [r3, #14]
   1976c:	cmp	r3, #3
   19770:	beq	19794 <flatcc_builder_table_edit@@Base+0x4c>
   19774:	ldr	r3, [pc, #72]	; 197c4 <flatcc_builder_table_edit@@Base+0x7c>
   19778:	add	r3, pc, r3
   1977c:	movw	r2, #1794	; 0x702
   19780:	ldr	r1, [pc, #64]	; 197c8 <flatcc_builder_table_edit@@Base+0x80>
   19784:	add	r1, pc, r1
   19788:	ldr	r0, [pc, #60]	; 197cc <flatcc_builder_table_edit@@Base+0x84>
   1978c:	add	r0, pc, r0
   19790:	bl	12078 <__assert_fail@plt>
   19794:	ldr	r3, [fp, #-8]
   19798:	ldr	r2, [r3, #16]
   1979c:	ldr	r3, [fp, #-8]
   197a0:	ldr	r1, [r3, #20]
   197a4:	ldr	r3, [fp, #-12]
   197a8:	sub	r3, r1, r3
   197ac:	add	r3, r2, r3
   197b0:	mov	r0, r3
   197b4:	sub	sp, fp, #4
   197b8:	ldr	fp, [sp]
   197bc:	add	sp, sp, #4
   197c0:	pop	{pc}		; (ldr pc, [sp], #4)
   197c4:	andeq	r2, r0, ip, lsr #13
   197c8:	andeq	r1, r0, r0, lsr #27
   197cc:	andeq	r2, r0, r8, asr r0

000197d0 <flatcc_builder_table_add_copy@@Base>:
   197d0:	str	fp, [sp, #-8]!
   197d4:	str	lr, [sp, #4]
   197d8:	add	fp, sp, #4
   197dc:	sub	sp, sp, #24
   197e0:	str	r0, [fp, #-16]
   197e4:	str	r1, [fp, #-20]	; 0xffffffec
   197e8:	str	r2, [fp, #-24]	; 0xffffffe8
   197ec:	str	r3, [fp, #-28]	; 0xffffffe4
   197f0:	ldrh	r3, [fp, #4]
   197f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   197f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   197fc:	ldr	r0, [fp, #-16]
   19800:	bl	195cc <flatcc_builder_table_add@@Base>
   19804:	str	r0, [fp, #-8]
   19808:	ldr	r3, [fp, #-8]
   1980c:	cmp	r3, #0
   19810:	beq	19824 <flatcc_builder_table_add_copy@@Base+0x54>
   19814:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19818:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1981c:	ldr	r0, [fp, #-8]
   19820:	bl	11fb8 <memcpy@plt>
   19824:	ldr	r3, [fp, #-8]
   19828:	mov	r0, r3
   1982c:	sub	sp, fp, #4
   19830:	ldr	fp, [sp]
   19834:	add	sp, sp, #4
   19838:	pop	{pc}		; (ldr pc, [sp], #4)

0001983c <flatcc_builder_table_add_offset@@Base>:
   1983c:	str	fp, [sp, #-8]!
   19840:	str	lr, [sp, #4]
   19844:	add	fp, sp, #4
   19848:	sub	sp, sp, #8
   1984c:	str	r0, [fp, #-8]
   19850:	str	r1, [fp, #-12]
   19854:	ldr	r3, [fp, #-8]
   19858:	ldr	r3, [r3, #32]
   1985c:	ldrh	r3, [r3, #14]
   19860:	cmp	r3, #3
   19864:	beq	19888 <flatcc_builder_table_add_offset@@Base+0x4c>
   19868:	ldr	r3, [pc, #244]	; 19964 <flatcc_builder_table_add_offset@@Base+0x128>
   1986c:	add	r3, pc, r3
   19870:	movw	r2, #1811	; 0x713
   19874:	ldr	r1, [pc, #236]	; 19968 <flatcc_builder_table_add_offset@@Base+0x12c>
   19878:	add	r1, pc, r1
   1987c:	ldr	r0, [pc, #232]	; 1996c <flatcc_builder_table_add_offset@@Base+0x130>
   19880:	add	r0, pc, r0
   19884:	bl	12078 <__assert_fail@plt>
   19888:	ldr	r3, [fp, #-12]
   1988c:	cmp	r3, #0
   19890:	blt	198a4 <flatcc_builder_table_add_offset@@Base+0x68>
   19894:	ldr	r3, [fp, #-12]
   19898:	movw	r2, #32764	; 0x7ffc
   1989c:	cmp	r3, r2
   198a0:	ble	198c4 <flatcc_builder_table_add_offset@@Base+0x88>
   198a4:	ldr	r3, [pc, #196]	; 19970 <flatcc_builder_table_add_offset@@Base+0x134>
   198a8:	add	r3, pc, r3
   198ac:	movw	r2, #1812	; 0x714
   198b0:	ldr	r1, [pc, #188]	; 19974 <flatcc_builder_table_add_offset@@Base+0x138>
   198b4:	add	r1, pc, r1
   198b8:	ldr	r0, [pc, #184]	; 19978 <flatcc_builder_table_add_offset@@Base+0x13c>
   198bc:	add	r0, pc, r0
   198c0:	bl	12078 <__assert_fail@plt>
   198c4:	ldr	r3, [fp, #-8]
   198c8:	ldr	r2, [r3, #4]
   198cc:	ldr	r3, [fp, #-12]
   198d0:	lsl	r3, r3, #1
   198d4:	add	r3, r2, r3
   198d8:	ldrh	r3, [r3]
   198dc:	cmp	r3, #0
   198e0:	beq	19904 <flatcc_builder_table_add_offset@@Base+0xc8>
   198e4:	ldr	r3, [pc, #144]	; 1997c <flatcc_builder_table_add_offset@@Base+0x140>
   198e8:	add	r3, pc, r3
   198ec:	movw	r2, #1819	; 0x71b
   198f0:	ldr	r1, [pc, #136]	; 19980 <flatcc_builder_table_add_offset@@Base+0x144>
   198f4:	add	r1, pc, r1
   198f8:	ldr	r0, [pc, #132]	; 19984 <flatcc_builder_table_add_offset@@Base+0x148>
   198fc:	add	r0, pc, r0
   19900:	bl	12078 <__assert_fail@plt>
   19904:	ldr	r3, [fp, #-8]
   19908:	ldr	r2, [r3, #12]
   1990c:	ldr	r3, [fp, #-12]
   19910:	eor	r2, r2, r3
   19914:	movw	r3, #31153	; 0x79b1
   19918:	movt	r3, #40503	; 0x9e37
   1991c:	mul	r3, r3, r2
   19920:	eor	r2, r3, #4
   19924:	movw	r3, #31153	; 0x79b1
   19928:	movt	r3, #40503	; 0x9e37
   1992c:	mul	r2, r3, r2
   19930:	ldr	r3, [fp, #-8]
   19934:	str	r2, [r3, #12]
   19938:	ldr	r3, [fp, #-12]
   1993c:	uxth	r3, r3
   19940:	mov	r1, r3
   19944:	ldr	r0, [fp, #-8]
   19948:	bl	1421c <flatcc_builder_default_alloc@@Base+0x5ac>
   1994c:	mov	r3, r0
   19950:	mov	r0, r3
   19954:	sub	sp, fp, #4
   19958:	ldr	fp, [sp]
   1995c:	add	sp, sp, #4
   19960:	pop	{pc}		; (ldr pc, [sp], #4)
   19964:	ldrdeq	r2, [r0], -r4
   19968:	andeq	r1, r0, ip, lsr #25
   1996c:	andeq	r1, r0, r4, ror #30
   19970:	muleq	r0, r8, r5
   19974:	andeq	r1, r0, r0, ror ip
   19978:	andeq	r2, r0, r4, asr #32
   1997c:	andeq	r2, r0, r8, asr r5
   19980:	andeq	r1, r0, r0, lsr ip
   19984:	andeq	r1, r0, r8, lsl #25

00019988 <flatcc_builder_push_buffer_alignment@@Base>:
   19988:	push	{fp}		; (str fp, [sp, #-4]!)
   1998c:	add	fp, sp, #0
   19990:	sub	sp, sp, #20
   19994:	str	r0, [fp, #-16]
   19998:	ldr	r3, [fp, #-16]
   1999c:	ldrh	r3, [r3, #128]	; 0x80
   199a0:	strh	r3, [fp, #-6]
   199a4:	ldr	r3, [fp, #-16]
   199a8:	mov	r2, #4
   199ac:	strh	r2, [r3, #128]	; 0x80
   199b0:	ldrh	r3, [fp, #-6]
   199b4:	mov	r0, r3
   199b8:	add	sp, fp, #0
   199bc:	pop	{fp}		; (ldr fp, [sp], #4)
   199c0:	bx	lr

000199c4 <flatcc_builder_pop_buffer_alignment@@Base>:
   199c4:	str	fp, [sp, #-8]!
   199c8:	str	lr, [sp, #4]
   199cc:	add	fp, sp, #4
   199d0:	sub	sp, sp, #8
   199d4:	str	r0, [fp, #-8]
   199d8:	mov	r3, r1
   199dc:	strh	r3, [fp, #-10]
   199e0:	ldrh	r3, [fp, #-10]
   199e4:	mov	r1, r3
   199e8:	ldr	r0, [fp, #-8]
   199ec:	bl	14c28 <flatcc_builder_clear@@Base+0xc4>
   199f0:	nop	{0}
   199f4:	sub	sp, fp, #4
   199f8:	ldr	fp, [sp]
   199fc:	add	sp, sp, #4
   19a00:	pop	{pc}		; (ldr pc, [sp], #4)

00019a04 <flatcc_builder_get_buffer_alignment@@Base>:
   19a04:	push	{fp}		; (str fp, [sp, #-4]!)
   19a08:	add	fp, sp, #0
   19a0c:	sub	sp, sp, #12
   19a10:	str	r0, [fp, #-8]
   19a14:	ldr	r3, [fp, #-8]
   19a18:	ldrh	r3, [r3, #128]	; 0x80
   19a1c:	mov	r0, r3
   19a20:	add	sp, fp, #0
   19a24:	pop	{fp}		; (ldr fp, [sp], #4)
   19a28:	bx	lr

00019a2c <flatcc_builder_set_vtable_clustering@@Base>:
   19a2c:	push	{fp}		; (str fp, [sp, #-4]!)
   19a30:	add	fp, sp, #0
   19a34:	sub	sp, sp, #12
   19a38:	str	r0, [fp, #-8]
   19a3c:	str	r1, [fp, #-12]
   19a40:	ldr	r3, [fp, #-12]
   19a44:	cmp	r3, #0
   19a48:	moveq	r3, #1
   19a4c:	movne	r3, #0
   19a50:	uxtb	r3, r3
   19a54:	mov	r2, r3
   19a58:	ldr	r3, [fp, #-8]
   19a5c:	str	r2, [r3, #180]	; 0xb4
   19a60:	nop	{0}
   19a64:	add	sp, fp, #0
   19a68:	pop	{fp}		; (ldr fp, [sp], #4)
   19a6c:	bx	lr

00019a70 <flatcc_builder_set_block_align@@Base>:
   19a70:	push	{fp}		; (str fp, [sp, #-4]!)
   19a74:	add	fp, sp, #0
   19a78:	sub	sp, sp, #12
   19a7c:	str	r0, [fp, #-8]
   19a80:	mov	r3, r1
   19a84:	strh	r3, [fp, #-10]
   19a88:	ldr	r3, [fp, #-8]
   19a8c:	ldrh	r2, [fp, #-10]
   19a90:	strh	r2, [r3, #132]	; 0x84
   19a94:	nop	{0}
   19a98:	add	sp, fp, #0
   19a9c:	pop	{fp}		; (ldr fp, [sp], #4)
   19aa0:	bx	lr

00019aa4 <flatcc_builder_get_level@@Base>:
   19aa4:	push	{fp}		; (str fp, [sp, #-4]!)
   19aa8:	add	fp, sp, #0
   19aac:	sub	sp, sp, #12
   19ab0:	str	r0, [fp, #-8]
   19ab4:	ldr	r3, [fp, #-8]
   19ab8:	ldr	r3, [r3, #156]	; 0x9c
   19abc:	mov	r0, r3
   19ac0:	add	sp, fp, #0
   19ac4:	pop	{fp}		; (ldr fp, [sp], #4)
   19ac8:	bx	lr

00019acc <flatcc_builder_set_max_level@@Base>:
   19acc:	push	{fp}		; (str fp, [sp, #-4]!)
   19ad0:	add	fp, sp, #0
   19ad4:	sub	sp, sp, #12
   19ad8:	str	r0, [fp, #-8]
   19adc:	str	r1, [fp, #-12]
   19ae0:	ldr	r3, [fp, #-8]
   19ae4:	ldr	r2, [fp, #-12]
   19ae8:	str	r2, [r3, #176]	; 0xb0
   19aec:	ldr	r3, [fp, #-8]
   19af0:	ldr	r2, [r3, #160]	; 0xa0
   19af4:	ldr	r3, [fp, #-8]
   19af8:	ldr	r3, [r3, #176]	; 0xb0
   19afc:	cmp	r2, r3
   19b00:	bge	19b14 <flatcc_builder_set_max_level@@Base+0x48>
   19b04:	ldr	r3, [fp, #-8]
   19b08:	ldr	r2, [r3, #176]	; 0xb0
   19b0c:	ldr	r3, [fp, #-8]
   19b10:	str	r2, [r3, #160]	; 0xa0
   19b14:	nop	{0}
   19b18:	add	sp, fp, #0
   19b1c:	pop	{fp}		; (ldr fp, [sp], #4)
   19b20:	bx	lr

00019b24 <flatcc_builder_get_buffer_size@@Base>:
   19b24:	push	{fp}		; (str fp, [sp, #-4]!)
   19b28:	add	fp, sp, #0
   19b2c:	sub	sp, sp, #12
   19b30:	str	r0, [fp, #-8]
   19b34:	ldr	r3, [fp, #-8]
   19b38:	ldr	r2, [r3, #140]	; 0x8c
   19b3c:	ldr	r3, [fp, #-8]
   19b40:	ldr	r3, [r3, #136]	; 0x88
   19b44:	sub	r3, r2, r3
   19b48:	mov	r0, r3
   19b4c:	add	sp, fp, #0
   19b50:	pop	{fp}		; (ldr fp, [sp], #4)
   19b54:	bx	lr

00019b58 <flatcc_builder_get_buffer_start@@Base>:
   19b58:	push	{fp}		; (str fp, [sp, #-4]!)
   19b5c:	add	fp, sp, #0
   19b60:	sub	sp, sp, #12
   19b64:	str	r0, [fp, #-8]
   19b68:	ldr	r3, [fp, #-8]
   19b6c:	ldr	r3, [r3, #136]	; 0x88
   19b70:	mov	r0, r3
   19b74:	add	sp, fp, #0
   19b78:	pop	{fp}		; (ldr fp, [sp], #4)
   19b7c:	bx	lr

00019b80 <flatcc_builder_get_buffer_end@@Base>:
   19b80:	push	{fp}		; (str fp, [sp, #-4]!)
   19b84:	add	fp, sp, #0
   19b88:	sub	sp, sp, #12
   19b8c:	str	r0, [fp, #-8]
   19b90:	ldr	r3, [fp, #-8]
   19b94:	ldr	r3, [r3, #140]	; 0x8c
   19b98:	mov	r0, r3
   19b9c:	add	sp, fp, #0
   19ba0:	pop	{fp}		; (ldr fp, [sp], #4)
   19ba4:	bx	lr

00019ba8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19ba8:	push	{fp}		; (str fp, [sp, #-4]!)
   19bac:	add	fp, sp, #0
   19bb0:	sub	sp, sp, #12
   19bb4:	str	r0, [fp, #-8]
   19bb8:	str	r1, [fp, #-12]
   19bbc:	ldr	r3, [fp, #-8]
   19bc0:	ldr	r2, [fp, #-12]
   19bc4:	str	r2, [r3, #172]	; 0xac
   19bc8:	nop	{0}
   19bcc:	add	sp, fp, #0
   19bd0:	pop	{fp}		; (ldr fp, [sp], #4)
   19bd4:	bx	lr

00019bd8 <flatcc_builder_set_identifier@@Base>:
   19bd8:	push	{fp}		; (str fp, [sp, #-4]!)
   19bdc:	add	fp, sp, #0
   19be0:	sub	sp, sp, #12
   19be4:	str	r0, [fp, #-8]
   19be8:	str	r1, [fp, #-12]
   19bec:	ldr	r1, [pc, #60]	; 19c30 <flatcc_builder_set_identifier@@Base+0x58>
   19bf0:	add	r1, pc, r1
   19bf4:	ldr	r3, [fp, #-8]
   19bf8:	add	r2, r3, #168	; 0xa8
   19bfc:	ldr	r3, [fp, #-12]
   19c00:	cmp	r3, #0
   19c04:	beq	19c10 <flatcc_builder_set_identifier@@Base+0x38>
   19c08:	ldr	r3, [fp, #-12]
   19c0c:	b	19c18 <flatcc_builder_set_identifier@@Base+0x40>
   19c10:	ldr	r3, [pc, #28]	; 19c34 <flatcc_builder_set_identifier@@Base+0x5c>
   19c14:	ldr	r3, [r1, r3]
   19c18:	ldr	r3, [r3]
   19c1c:	str	r3, [r2]
   19c20:	nop	{0}
   19c24:	add	sp, fp, #0
   19c28:	pop	{fp}		; (ldr fp, [sp], #4)
   19c2c:	bx	lr
   19c30:	andeq	r2, r1, r8, lsl #8
   19c34:	andeq	r0, r0, r0, rrx

00019c38 <flatcc_builder_get_type@@Base>:
   19c38:	push	{fp}		; (str fp, [sp, #-4]!)
   19c3c:	add	fp, sp, #0
   19c40:	sub	sp, sp, #12
   19c44:	str	r0, [fp, #-8]
   19c48:	ldr	r3, [fp, #-8]
   19c4c:	ldr	r3, [r3, #32]
   19c50:	cmp	r3, #0
   19c54:	beq	19c68 <flatcc_builder_get_type@@Base+0x30>
   19c58:	ldr	r3, [fp, #-8]
   19c5c:	ldr	r3, [r3, #32]
   19c60:	ldrh	r3, [r3, #14]
   19c64:	b	19c6c <flatcc_builder_get_type@@Base+0x34>
   19c68:	mov	r3, #0
   19c6c:	mov	r0, r3
   19c70:	add	sp, fp, #0
   19c74:	pop	{fp}		; (ldr fp, [sp], #4)
   19c78:	bx	lr

00019c7c <flatcc_builder_get_type_at@@Base>:
   19c7c:	push	{fp}		; (str fp, [sp, #-4]!)
   19c80:	add	fp, sp, #0
   19c84:	sub	sp, sp, #12
   19c88:	str	r0, [fp, #-8]
   19c8c:	str	r1, [fp, #-12]
   19c90:	ldr	r3, [fp, #-12]
   19c94:	cmp	r3, #0
   19c98:	ble	19cb0 <flatcc_builder_get_type_at@@Base+0x34>
   19c9c:	ldr	r3, [fp, #-8]
   19ca0:	ldr	r3, [r3, #156]	; 0x9c
   19ca4:	ldr	r2, [fp, #-12]
   19ca8:	cmp	r2, r3
   19cac:	ble	19cb8 <flatcc_builder_get_type_at@@Base+0x3c>
   19cb0:	mov	r3, #0
   19cb4:	b	19cec <flatcc_builder_get_type_at@@Base+0x70>
   19cb8:	ldr	r3, [fp, #-8]
   19cbc:	ldr	r2, [r3, #32]
   19cc0:	ldr	r3, [fp, #-8]
   19cc4:	ldr	r3, [r3, #156]	; 0x9c
   19cc8:	ldr	r1, [fp, #-12]
   19ccc:	sub	r3, r1, r3
   19cd0:	mov	r1, r3
   19cd4:	mov	r3, r1
   19cd8:	lsl	r3, r3, #3
   19cdc:	add	r3, r3, r1
   19ce0:	lsl	r3, r3, #2
   19ce4:	add	r3, r2, r3
   19ce8:	ldrh	r3, [r3, #14]
   19cec:	mov	r0, r3
   19cf0:	add	sp, fp, #0
   19cf4:	pop	{fp}		; (ldr fp, [sp], #4)
   19cf8:	bx	lr

00019cfc <flatcc_builder_get_direct_buffer@@Base>:
   19cfc:	str	fp, [sp, #-8]!
   19d00:	str	lr, [sp, #4]
   19d04:	add	fp, sp, #4
   19d08:	sub	sp, sp, #8
   19d0c:	str	r0, [fp, #-8]
   19d10:	str	r1, [fp, #-12]
   19d14:	ldr	r3, [fp, #-8]
   19d18:	ldr	r3, [r3, #184]	; 0xb8
   19d1c:	cmp	r3, #0
   19d20:	beq	19d40 <flatcc_builder_get_direct_buffer@@Base+0x44>
   19d24:	ldr	r3, [fp, #-8]
   19d28:	add	r3, r3, #188	; 0xbc
   19d2c:	ldr	r1, [fp, #-12]
   19d30:	mov	r0, r3
   19d34:	bl	13b90 <main@@Base+0x464>
   19d38:	mov	r3, r0
   19d3c:	b	19d5c <flatcc_builder_get_direct_buffer@@Base+0x60>
   19d40:	ldr	r3, [fp, #-12]
   19d44:	cmp	r3, #0
   19d48:	beq	19d58 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19d4c:	ldr	r3, [fp, #-12]
   19d50:	mov	r2, #0
   19d54:	str	r2, [r3]
   19d58:	mov	r3, #0
   19d5c:	mov	r0, r3
   19d60:	sub	sp, fp, #4
   19d64:	ldr	fp, [sp]
   19d68:	add	sp, sp, #4
   19d6c:	pop	{pc}		; (ldr pc, [sp], #4)

00019d70 <flatcc_builder_copy_buffer@@Base>:
   19d70:	str	fp, [sp, #-8]!
   19d74:	str	lr, [sp, #4]
   19d78:	add	fp, sp, #4
   19d7c:	sub	sp, sp, #16
   19d80:	str	r0, [fp, #-8]
   19d84:	str	r1, [fp, #-12]
   19d88:	str	r2, [fp, #-16]
   19d8c:	ldr	r3, [fp, #-8]
   19d90:	ldr	r3, [r3, #184]	; 0xb8
   19d94:	cmp	r3, #0
   19d98:	bne	19da4 <flatcc_builder_copy_buffer@@Base+0x34>
   19d9c:	mov	r3, #0
   19da0:	b	19df0 <flatcc_builder_copy_buffer@@Base+0x80>
   19da4:	ldr	r3, [fp, #-8]
   19da8:	add	r3, r3, #188	; 0xbc
   19dac:	ldr	r2, [fp, #-16]
   19db0:	ldr	r1, [fp, #-12]
   19db4:	mov	r0, r3
   19db8:	bl	1abc4 <flatcc_emitter_copy_buffer@@Base>
   19dbc:	str	r0, [fp, #-12]
   19dc0:	ldr	r3, [fp, #-12]
   19dc4:	cmp	r3, #0
   19dc8:	bne	19dec <flatcc_builder_copy_buffer@@Base+0x7c>
   19dcc:	ldr	r3, [pc, #48]	; 19e04 <flatcc_builder_copy_buffer@@Base+0x94>
   19dd0:	add	r3, pc, r3
   19dd4:	movw	r2, #1926	; 0x786
   19dd8:	ldr	r1, [pc, #40]	; 19e08 <flatcc_builder_copy_buffer@@Base+0x98>
   19ddc:	add	r1, pc, r1
   19de0:	ldr	r0, [pc, #36]	; 19e0c <flatcc_builder_copy_buffer@@Base+0x9c>
   19de4:	add	r0, pc, r0
   19de8:	bl	12078 <__assert_fail@plt>
   19dec:	ldr	r3, [fp, #-12]
   19df0:	mov	r0, r3
   19df4:	sub	sp, fp, #4
   19df8:	ldr	fp, [sp]
   19dfc:	add	sp, sp, #4
   19e00:	pop	{pc}		; (ldr pc, [sp], #4)
   19e04:	muleq	r0, r0, r0
   19e08:	andeq	r1, r0, r8, asr #14
   19e0c:	andeq	r1, r0, r0, ror #22

00019e10 <flatcc_builder_finalize_buffer@@Base>:
   19e10:	str	fp, [sp, #-8]!
   19e14:	str	lr, [sp, #4]
   19e18:	add	fp, sp, #4
   19e1c:	sub	sp, sp, #16
   19e20:	str	r0, [fp, #-16]
   19e24:	str	r1, [fp, #-20]	; 0xffffffec
   19e28:	ldr	r0, [fp, #-16]
   19e2c:	bl	19b24 <flatcc_builder_get_buffer_size@@Base>
   19e30:	str	r0, [fp, #-8]
   19e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e38:	cmp	r3, #0
   19e3c:	beq	19e4c <flatcc_builder_finalize_buffer@@Base+0x3c>
   19e40:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e44:	ldr	r2, [fp, #-8]
   19e48:	str	r2, [r3]
   19e4c:	ldr	r0, [fp, #-8]
   19e50:	bl	12000 <malloc@plt>
   19e54:	mov	r3, r0
   19e58:	str	r3, [fp, #-12]
   19e5c:	ldr	r3, [fp, #-12]
   19e60:	cmp	r3, #0
   19e64:	bne	19e88 <flatcc_builder_finalize_buffer@@Base+0x78>
   19e68:	ldr	r3, [pc, #148]	; 19f04 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19e6c:	add	r3, pc, r3
   19e70:	movw	r2, #1944	; 0x798
   19e74:	ldr	r1, [pc, #140]	; 19f08 <flatcc_builder_finalize_buffer@@Base+0xf8>
   19e78:	add	r1, pc, r1
   19e7c:	ldr	r0, [pc, #136]	; 19f0c <flatcc_builder_finalize_buffer@@Base+0xfc>
   19e80:	add	r0, pc, r0
   19e84:	bl	12078 <__assert_fail@plt>
   19e88:	ldr	r2, [fp, #-8]
   19e8c:	ldr	r1, [fp, #-12]
   19e90:	ldr	r0, [fp, #-16]
   19e94:	bl	19d70 <flatcc_builder_copy_buffer@@Base>
   19e98:	mov	r3, r0
   19e9c:	cmp	r3, #0
   19ea0:	bne	19ec4 <flatcc_builder_finalize_buffer@@Base+0xb4>
   19ea4:	ldr	r3, [pc, #100]	; 19f10 <flatcc_builder_finalize_buffer@@Base+0x100>
   19ea8:	add	r3, pc, r3
   19eac:	movw	r2, #1948	; 0x79c
   19eb0:	ldr	r1, [pc, #92]	; 19f14 <flatcc_builder_finalize_buffer@@Base+0x104>
   19eb4:	add	r1, pc, r1
   19eb8:	ldr	r0, [pc, #88]	; 19f18 <flatcc_builder_finalize_buffer@@Base+0x108>
   19ebc:	add	r0, pc, r0
   19ec0:	bl	12078 <__assert_fail@plt>
   19ec4:	nop	{0}
   19ec8:	ldr	r3, [fp, #-12]
   19ecc:	cmp	r3, #0
   19ed0:	bne	19eec <flatcc_builder_finalize_buffer@@Base+0xdc>
   19ed4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ed8:	cmp	r3, #0
   19edc:	beq	19eec <flatcc_builder_finalize_buffer@@Base+0xdc>
   19ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ee4:	mov	r2, #0
   19ee8:	str	r2, [r3]
   19eec:	ldr	r3, [fp, #-12]
   19ef0:	mov	r0, r3
   19ef4:	sub	sp, fp, #4
   19ef8:	ldr	fp, [sp]
   19efc:	add	sp, sp, #4
   19f00:	pop	{pc}		; (ldr pc, [sp], #4)
   19f04:	andeq	r2, r0, r0, lsl r0
   19f08:	andeq	r1, r0, ip, lsr #13
   19f0c:	andeq	r1, r0, r4, lsl #14
   19f10:	ldrdeq	r1, [r0], -r4
   19f14:	andeq	r1, r0, r0, ror r6
   19f18:	andeq	r1, r0, r8, asr #13

00019f1c <flatcc_builder_finalize_aligned_buffer@@Base>:
   19f1c:	str	fp, [sp, #-8]!
   19f20:	str	lr, [sp, #4]
   19f24:	add	fp, sp, #4
   19f28:	sub	sp, sp, #24
   19f2c:	str	r0, [fp, #-24]	; 0xffffffe8
   19f30:	str	r1, [fp, #-28]	; 0xffffffe4
   19f34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19f38:	bl	19b24 <flatcc_builder_get_buffer_size@@Base>
   19f3c:	str	r0, [fp, #-12]
   19f40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19f44:	cmp	r3, #0
   19f48:	beq	19f58 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   19f4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19f50:	ldr	r2, [fp, #-12]
   19f54:	str	r2, [r3]
   19f58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19f5c:	bl	19a04 <flatcc_builder_get_buffer_alignment@@Base>
   19f60:	mov	r3, r0
   19f64:	str	r3, [fp, #-16]
   19f68:	ldr	r2, [fp, #-12]
   19f6c:	ldr	r3, [fp, #-16]
   19f70:	add	r3, r2, r3
   19f74:	sub	r2, r3, #1
   19f78:	ldr	r3, [fp, #-16]
   19f7c:	rsb	r3, r3, #0
   19f80:	and	r3, r3, r2
   19f84:	str	r3, [fp, #-12]
   19f88:	ldr	r1, [fp, #-12]
   19f8c:	ldr	r0, [fp, #-16]
   19f90:	bl	13a90 <main@@Base+0x364>
   19f94:	str	r0, [fp, #-8]
   19f98:	ldr	r3, [fp, #-8]
   19f9c:	cmp	r3, #0
   19fa0:	beq	19fd4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19fa4:	ldr	r2, [fp, #-12]
   19fa8:	ldr	r1, [fp, #-8]
   19fac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19fb0:	bl	19d70 <flatcc_builder_copy_buffer@@Base>
   19fb4:	mov	r3, r0
   19fb8:	cmp	r3, #0
   19fbc:	bne	19fdc <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   19fc0:	ldr	r0, [fp, #-8]
   19fc4:	bl	11fac <free@plt>
   19fc8:	mov	r3, #0
   19fcc:	str	r3, [fp, #-8]
   19fd0:	b	19fe0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   19fd4:	nop	{0}
   19fd8:	b	19fe0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   19fdc:	nop	{0}
   19fe0:	ldr	r3, [fp, #-8]
   19fe4:	cmp	r3, #0
   19fe8:	bne	1a004 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   19fec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19ff0:	cmp	r3, #0
   19ff4:	beq	1a004 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   19ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19ffc:	mov	r2, #0
   1a000:	str	r2, [r3]
   1a004:	ldr	r3, [fp, #-8]
   1a008:	mov	r0, r3
   1a00c:	sub	sp, fp, #4
   1a010:	ldr	fp, [sp]
   1a014:	add	sp, sp, #4
   1a018:	pop	{pc}		; (ldr pc, [sp], #4)

0001a01c <flatcc_builder_aligned_alloc@@Base>:
   1a01c:	str	fp, [sp, #-8]!
   1a020:	str	lr, [sp, #4]
   1a024:	add	fp, sp, #4
   1a028:	sub	sp, sp, #8
   1a02c:	str	r0, [fp, #-8]
   1a030:	str	r1, [fp, #-12]
   1a034:	ldr	r1, [fp, #-12]
   1a038:	ldr	r0, [fp, #-8]
   1a03c:	bl	13a90 <main@@Base+0x364>
   1a040:	mov	r3, r0
   1a044:	mov	r0, r3
   1a048:	sub	sp, fp, #4
   1a04c:	ldr	fp, [sp]
   1a050:	add	sp, sp, #4
   1a054:	pop	{pc}		; (ldr pc, [sp], #4)

0001a058 <flatcc_builder_aligned_free@@Base>:
   1a058:	str	fp, [sp, #-8]!
   1a05c:	str	lr, [sp, #4]
   1a060:	add	fp, sp, #4
   1a064:	sub	sp, sp, #8
   1a068:	str	r0, [fp, #-8]
   1a06c:	ldr	r0, [fp, #-8]
   1a070:	bl	11fac <free@plt>
   1a074:	nop	{0}
   1a078:	sub	sp, fp, #4
   1a07c:	ldr	fp, [sp]
   1a080:	add	sp, sp, #4
   1a084:	pop	{pc}		; (ldr pc, [sp], #4)

0001a088 <flatcc_builder_get_emit_context@@Base>:
   1a088:	push	{fp}		; (str fp, [sp, #-4]!)
   1a08c:	add	fp, sp, #0
   1a090:	sub	sp, sp, #12
   1a094:	str	r0, [fp, #-8]
   1a098:	ldr	r3, [fp, #-8]
   1a09c:	ldr	r3, [r3, #36]	; 0x24
   1a0a0:	mov	r0, r3
   1a0a4:	add	sp, fp, #0
   1a0a8:	pop	{fp}		; (ldr fp, [sp], #4)
   1a0ac:	bx	lr
   1a0b0:	str	fp, [sp, #-8]!
   1a0b4:	str	lr, [sp, #4]
   1a0b8:	add	fp, sp, #4
   1a0bc:	sub	sp, sp, #16
   1a0c0:	str	r0, [fp, #-16]
   1a0c4:	mov	r3, #0
   1a0c8:	str	r3, [fp, #-8]
   1a0cc:	ldr	r3, [fp, #-16]
   1a0d0:	ldr	r3, [r3]
   1a0d4:	cmp	r3, #0
   1a0d8:	beq	1a130 <flatcc_builder_get_emit_context@@Base+0xa8>
   1a0dc:	ldr	r3, [fp, #-16]
   1a0e0:	ldr	r3, [r3]
   1a0e4:	ldr	r2, [r3, #2948]	; 0xb84
   1a0e8:	ldr	r3, [fp, #-16]
   1a0ec:	ldr	r3, [r3, #4]
   1a0f0:	cmp	r2, r3
   1a0f4:	beq	1a130 <flatcc_builder_get_emit_context@@Base+0xa8>
   1a0f8:	ldr	r3, [fp, #-16]
   1a0fc:	ldr	r3, [r3]
   1a100:	ldr	r2, [r3, #2952]	; 0xb88
   1a104:	ldr	r3, [fp, #-16]
   1a108:	ldr	r3, [r3]
   1a10c:	ldr	r3, [r3, #2948]	; 0xb84
   1a110:	sub	r2, r2, #2944	; 0xb80
   1a114:	str	r2, [r3, #2952]	; 0xb88
   1a118:	ldr	r3, [fp, #-16]
   1a11c:	ldr	r3, [r3]
   1a120:	ldr	r2, [r3, #2948]	; 0xb84
   1a124:	ldr	r3, [fp, #-16]
   1a128:	str	r2, [r3]
   1a12c:	b	1a258 <flatcc_builder_get_emit_context@@Base+0x1d0>
   1a130:	movw	r0, #2956	; 0xb8c
   1a134:	bl	12000 <malloc@plt>
   1a138:	mov	r3, r0
   1a13c:	str	r3, [fp, #-8]
   1a140:	ldr	r3, [fp, #-8]
   1a144:	cmp	r3, #0
   1a148:	bne	1a154 <flatcc_builder_get_emit_context@@Base+0xcc>
   1a14c:	mvn	r3, #0
   1a150:	b	1a29c <flatcc_builder_get_emit_context@@Base+0x214>
   1a154:	ldr	r3, [fp, #-16]
   1a158:	ldr	r3, [r3, #28]
   1a15c:	add	r2, r3, #2944	; 0xb80
   1a160:	ldr	r3, [fp, #-16]
   1a164:	str	r2, [r3, #28]
   1a168:	ldr	r3, [fp, #-16]
   1a16c:	ldr	r3, [r3]
   1a170:	cmp	r3, #0
   1a174:	beq	1a1c8 <flatcc_builder_get_emit_context@@Base+0x140>
   1a178:	ldr	r3, [fp, #-16]
   1a17c:	ldr	r2, [r3, #4]
   1a180:	ldr	r3, [fp, #-8]
   1a184:	str	r2, [r3, #2948]	; 0xb84
   1a188:	ldr	r3, [fp, #-16]
   1a18c:	ldr	r2, [r3]
   1a190:	ldr	r3, [fp, #-8]
   1a194:	str	r2, [r3, #2944]	; 0xb80
   1a198:	ldr	r3, [fp, #-16]
   1a19c:	ldr	r3, [r3]
   1a1a0:	ldr	r2, [fp, #-8]
   1a1a4:	str	r2, [r3, #2948]	; 0xb84
   1a1a8:	ldr	r3, [fp, #-16]
   1a1ac:	ldr	r3, [r3, #4]
   1a1b0:	ldr	r2, [fp, #-8]
   1a1b4:	str	r2, [r3, #2944]	; 0xb80
   1a1b8:	ldr	r3, [fp, #-16]
   1a1bc:	ldr	r2, [fp, #-8]
   1a1c0:	str	r2, [r3]
   1a1c4:	b	1a258 <flatcc_builder_get_emit_context@@Base+0x1d0>
   1a1c8:	ldr	r3, [fp, #-16]
   1a1cc:	ldr	r2, [fp, #-8]
   1a1d0:	str	r2, [r3]
   1a1d4:	ldr	r3, [fp, #-16]
   1a1d8:	ldr	r2, [fp, #-8]
   1a1dc:	str	r2, [r3, #4]
   1a1e0:	ldr	r3, [fp, #-8]
   1a1e4:	ldr	r2, [fp, #-8]
   1a1e8:	str	r2, [r3, #2944]	; 0xb80
   1a1ec:	ldr	r3, [fp, #-8]
   1a1f0:	ldr	r2, [fp, #-8]
   1a1f4:	str	r2, [r3, #2948]	; 0xb84
   1a1f8:	ldr	r3, [fp, #-16]
   1a1fc:	ldr	r3, [r3]
   1a200:	add	r2, r3, #1472	; 0x5c0
   1a204:	ldr	r3, [fp, #-16]
   1a208:	str	r2, [r3, #8]
   1a20c:	ldr	r3, [fp, #-16]
   1a210:	ldr	r2, [r3, #8]
   1a214:	ldr	r3, [fp, #-16]
   1a218:	str	r2, [r3, #16]
   1a21c:	ldr	r3, [fp, #-16]
   1a220:	mov	r2, #1472	; 0x5c0
   1a224:	str	r2, [r3, #12]
   1a228:	ldr	r3, [fp, #-16]
   1a22c:	ldr	r3, [r3, #12]
   1a230:	rsb	r2, r3, #2944	; 0xb80
   1a234:	ldr	r3, [fp, #-16]
   1a238:	str	r2, [r3, #20]
   1a23c:	ldr	r3, [fp, #-16]
   1a240:	ldr	r3, [r3, #12]
   1a244:	rsb	r2, r3, #0
   1a248:	ldr	r3, [fp, #-8]
   1a24c:	str	r2, [r3, #2952]	; 0xb88
   1a250:	mov	r3, #0
   1a254:	b	1a29c <flatcc_builder_get_emit_context@@Base+0x214>
   1a258:	ldr	r3, [fp, #-16]
   1a25c:	ldr	r3, [r3]
   1a260:	add	r2, r3, #2944	; 0xb80
   1a264:	ldr	r3, [fp, #-16]
   1a268:	str	r2, [r3, #8]
   1a26c:	ldr	r3, [fp, #-16]
   1a270:	mov	r2, #2944	; 0xb80
   1a274:	str	r2, [r3, #12]
   1a278:	ldr	r3, [fp, #-16]
   1a27c:	ldr	r3, [r3]
   1a280:	ldr	r3, [r3, #2944]	; 0xb80
   1a284:	ldr	r2, [r3, #2952]	; 0xb88
   1a288:	ldr	r3, [fp, #-16]
   1a28c:	ldr	r3, [r3]
   1a290:	sub	r2, r2, #2944	; 0xb80
   1a294:	str	r2, [r3, #2952]	; 0xb88
   1a298:	mov	r3, #0
   1a29c:	mov	r0, r3
   1a2a0:	sub	sp, fp, #4
   1a2a4:	ldr	fp, [sp]
   1a2a8:	add	sp, sp, #4
   1a2ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2b0:	str	fp, [sp, #-8]!
   1a2b4:	str	lr, [sp, #4]
   1a2b8:	add	fp, sp, #4
   1a2bc:	sub	sp, sp, #16
   1a2c0:	str	r0, [fp, #-16]
   1a2c4:	mov	r3, #0
   1a2c8:	str	r3, [fp, #-8]
   1a2cc:	ldr	r3, [fp, #-16]
   1a2d0:	ldr	r3, [r3, #4]
   1a2d4:	cmp	r3, #0
   1a2d8:	beq	1a310 <flatcc_builder_get_emit_context@@Base+0x288>
   1a2dc:	ldr	r3, [fp, #-16]
   1a2e0:	ldr	r3, [r3, #4]
   1a2e4:	ldr	r2, [r3, #2944]	; 0xb80
   1a2e8:	ldr	r3, [fp, #-16]
   1a2ec:	ldr	r3, [r3]
   1a2f0:	cmp	r2, r3
   1a2f4:	beq	1a310 <flatcc_builder_get_emit_context@@Base+0x288>
   1a2f8:	ldr	r3, [fp, #-16]
   1a2fc:	ldr	r3, [r3, #4]
   1a300:	ldr	r2, [r3, #2944]	; 0xb80
   1a304:	ldr	r3, [fp, #-16]
   1a308:	str	r2, [r3, #4]
   1a30c:	b	1a438 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1a310:	movw	r0, #2956	; 0xb8c
   1a314:	bl	12000 <malloc@plt>
   1a318:	mov	r3, r0
   1a31c:	str	r3, [fp, #-8]
   1a320:	ldr	r3, [fp, #-8]
   1a324:	cmp	r3, #0
   1a328:	bne	1a334 <flatcc_builder_get_emit_context@@Base+0x2ac>
   1a32c:	mvn	r3, #0
   1a330:	b	1a47c <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a334:	ldr	r3, [fp, #-16]
   1a338:	ldr	r3, [r3, #28]
   1a33c:	add	r2, r3, #2944	; 0xb80
   1a340:	ldr	r3, [fp, #-16]
   1a344:	str	r2, [r3, #28]
   1a348:	ldr	r3, [fp, #-16]
   1a34c:	ldr	r3, [r3, #4]
   1a350:	cmp	r3, #0
   1a354:	beq	1a3a8 <flatcc_builder_get_emit_context@@Base+0x320>
   1a358:	ldr	r3, [fp, #-16]
   1a35c:	ldr	r2, [r3, #4]
   1a360:	ldr	r3, [fp, #-8]
   1a364:	str	r2, [r3, #2948]	; 0xb84
   1a368:	ldr	r3, [fp, #-16]
   1a36c:	ldr	r2, [r3]
   1a370:	ldr	r3, [fp, #-8]
   1a374:	str	r2, [r3, #2944]	; 0xb80
   1a378:	ldr	r3, [fp, #-16]
   1a37c:	ldr	r3, [r3]
   1a380:	ldr	r2, [fp, #-8]
   1a384:	str	r2, [r3, #2948]	; 0xb84
   1a388:	ldr	r3, [fp, #-16]
   1a38c:	ldr	r3, [r3, #4]
   1a390:	ldr	r2, [fp, #-8]
   1a394:	str	r2, [r3, #2944]	; 0xb80
   1a398:	ldr	r3, [fp, #-16]
   1a39c:	ldr	r2, [fp, #-8]
   1a3a0:	str	r2, [r3, #4]
   1a3a4:	b	1a438 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1a3a8:	ldr	r3, [fp, #-16]
   1a3ac:	ldr	r2, [fp, #-8]
   1a3b0:	str	r2, [r3]
   1a3b4:	ldr	r3, [fp, #-16]
   1a3b8:	ldr	r2, [fp, #-8]
   1a3bc:	str	r2, [r3, #4]
   1a3c0:	ldr	r3, [fp, #-8]
   1a3c4:	ldr	r2, [fp, #-8]
   1a3c8:	str	r2, [r3, #2944]	; 0xb80
   1a3cc:	ldr	r3, [fp, #-8]
   1a3d0:	ldr	r2, [fp, #-8]
   1a3d4:	str	r2, [r3, #2948]	; 0xb84
   1a3d8:	ldr	r3, [fp, #-16]
   1a3dc:	ldr	r3, [r3]
   1a3e0:	add	r2, r3, #1472	; 0x5c0
   1a3e4:	ldr	r3, [fp, #-16]
   1a3e8:	str	r2, [r3, #8]
   1a3ec:	ldr	r3, [fp, #-16]
   1a3f0:	ldr	r2, [r3, #8]
   1a3f4:	ldr	r3, [fp, #-16]
   1a3f8:	str	r2, [r3, #16]
   1a3fc:	ldr	r3, [fp, #-16]
   1a400:	mov	r2, #1472	; 0x5c0
   1a404:	str	r2, [r3, #12]
   1a408:	ldr	r3, [fp, #-16]
   1a40c:	ldr	r3, [r3, #12]
   1a410:	rsb	r2, r3, #2944	; 0xb80
   1a414:	ldr	r3, [fp, #-16]
   1a418:	str	r2, [r3, #20]
   1a41c:	ldr	r3, [fp, #-16]
   1a420:	ldr	r3, [r3, #12]
   1a424:	rsb	r2, r3, #0
   1a428:	ldr	r3, [fp, #-8]
   1a42c:	str	r2, [r3, #2952]	; 0xb88
   1a430:	mov	r3, #0
   1a434:	b	1a47c <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a438:	ldr	r3, [fp, #-16]
   1a43c:	ldr	r3, [r3, #4]
   1a440:	mov	r2, r3
   1a444:	ldr	r3, [fp, #-16]
   1a448:	str	r2, [r3, #16]
   1a44c:	ldr	r3, [fp, #-16]
   1a450:	mov	r2, #2944	; 0xb80
   1a454:	str	r2, [r3, #20]
   1a458:	ldr	r3, [fp, #-16]
   1a45c:	ldr	r3, [r3, #4]
   1a460:	ldr	r3, [r3, #2948]	; 0xb84
   1a464:	ldr	r2, [r3, #2952]	; 0xb88
   1a468:	ldr	r3, [fp, #-16]
   1a46c:	ldr	r3, [r3, #4]
   1a470:	add	r2, r2, #2944	; 0xb80
   1a474:	str	r2, [r3, #2952]	; 0xb88
   1a478:	mov	r3, #0
   1a47c:	mov	r0, r3
   1a480:	sub	sp, fp, #4
   1a484:	ldr	fp, [sp]
   1a488:	add	sp, sp, #4
   1a48c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a490:	str	fp, [sp, #-8]!
   1a494:	str	lr, [sp, #4]
   1a498:	add	fp, sp, #4
   1a49c:	sub	sp, sp, #24
   1a4a0:	str	r0, [fp, #-16]
   1a4a4:	str	r1, [fp, #-20]	; 0xffffffec
   1a4a8:	str	r2, [fp, #-24]	; 0xffffffe8
   1a4ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a4b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a4b4:	add	r3, r2, r3
   1a4b8:	str	r3, [fp, #-20]	; 0xffffffec
   1a4bc:	b	1a580 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1a4c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a4c4:	str	r3, [fp, #-8]
   1a4c8:	ldr	r3, [fp, #-16]
   1a4cc:	ldr	r3, [r3, #12]
   1a4d0:	ldr	r2, [fp, #-8]
   1a4d4:	cmp	r2, r3
   1a4d8:	bls	1a510 <flatcc_builder_get_emit_context@@Base+0x488>
   1a4dc:	ldr	r3, [fp, #-16]
   1a4e0:	ldr	r3, [r3, #12]
   1a4e4:	str	r3, [fp, #-8]
   1a4e8:	ldr	r3, [fp, #-8]
   1a4ec:	cmp	r3, #0
   1a4f0:	bne	1a510 <flatcc_builder_get_emit_context@@Base+0x488>
   1a4f4:	ldr	r0, [fp, #-16]
   1a4f8:	bl	1a0b0 <flatcc_builder_get_emit_context@@Base+0x28>
   1a4fc:	mov	r3, r0
   1a500:	cmp	r3, #0
   1a504:	beq	1a580 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1a508:	mvn	r3, #0
   1a50c:	b	1a590 <flatcc_builder_get_emit_context@@Base+0x508>
   1a510:	ldr	r3, [fp, #-16]
   1a514:	ldr	r2, [r3, #8]
   1a518:	ldr	r3, [fp, #-8]
   1a51c:	rsb	r3, r3, #0
   1a520:	add	r2, r2, r3
   1a524:	ldr	r3, [fp, #-16]
   1a528:	str	r2, [r3, #8]
   1a52c:	ldr	r3, [fp, #-16]
   1a530:	ldr	r2, [r3, #12]
   1a534:	ldr	r3, [fp, #-8]
   1a538:	sub	r2, r2, r3
   1a53c:	ldr	r3, [fp, #-16]
   1a540:	str	r2, [r3, #12]
   1a544:	ldr	r3, [fp, #-8]
   1a548:	rsb	r3, r3, #0
   1a54c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a550:	add	r3, r2, r3
   1a554:	str	r3, [fp, #-20]	; 0xffffffec
   1a558:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a55c:	ldr	r3, [fp, #-8]
   1a560:	sub	r3, r2, r3
   1a564:	str	r3, [fp, #-24]	; 0xffffffe8
   1a568:	ldr	r3, [fp, #-16]
   1a56c:	ldr	r3, [r3, #8]
   1a570:	ldr	r2, [fp, #-8]
   1a574:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a578:	mov	r0, r3
   1a57c:	bl	11fb8 <memcpy@plt>
   1a580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a584:	cmp	r3, #0
   1a588:	bne	1a4c0 <flatcc_builder_get_emit_context@@Base+0x438>
   1a58c:	mov	r3, #0
   1a590:	mov	r0, r3
   1a594:	sub	sp, fp, #4
   1a598:	ldr	fp, [sp]
   1a59c:	add	sp, sp, #4
   1a5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5a4:	str	fp, [sp, #-8]!
   1a5a8:	str	lr, [sp, #4]
   1a5ac:	add	fp, sp, #4
   1a5b0:	sub	sp, sp, #24
   1a5b4:	str	r0, [fp, #-16]
   1a5b8:	str	r1, [fp, #-20]	; 0xffffffec
   1a5bc:	str	r2, [fp, #-24]	; 0xffffffe8
   1a5c0:	b	1a67c <flatcc_builder_get_emit_context@@Base+0x5f4>
   1a5c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a5c8:	str	r3, [fp, #-8]
   1a5cc:	ldr	r3, [fp, #-16]
   1a5d0:	ldr	r3, [r3, #20]
   1a5d4:	ldr	r2, [fp, #-8]
   1a5d8:	cmp	r2, r3
   1a5dc:	bls	1a614 <flatcc_builder_get_emit_context@@Base+0x58c>
   1a5e0:	ldr	r3, [fp, #-16]
   1a5e4:	ldr	r3, [r3, #20]
   1a5e8:	str	r3, [fp, #-8]
   1a5ec:	ldr	r3, [fp, #-8]
   1a5f0:	cmp	r3, #0
   1a5f4:	bne	1a614 <flatcc_builder_get_emit_context@@Base+0x58c>
   1a5f8:	ldr	r0, [fp, #-16]
   1a5fc:	bl	1a2b0 <flatcc_builder_get_emit_context@@Base+0x228>
   1a600:	mov	r3, r0
   1a604:	cmp	r3, #0
   1a608:	beq	1a67c <flatcc_builder_get_emit_context@@Base+0x5f4>
   1a60c:	mvn	r3, #0
   1a610:	b	1a68c <flatcc_builder_get_emit_context@@Base+0x604>
   1a614:	ldr	r3, [fp, #-16]
   1a618:	ldr	r3, [r3, #16]
   1a61c:	ldr	r2, [fp, #-8]
   1a620:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a624:	mov	r0, r3
   1a628:	bl	11fb8 <memcpy@plt>
   1a62c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a630:	ldr	r3, [fp, #-8]
   1a634:	sub	r3, r2, r3
   1a638:	str	r3, [fp, #-24]	; 0xffffffe8
   1a63c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a640:	ldr	r3, [fp, #-8]
   1a644:	add	r3, r2, r3
   1a648:	str	r3, [fp, #-20]	; 0xffffffec
   1a64c:	ldr	r3, [fp, #-16]
   1a650:	ldr	r2, [r3, #16]
   1a654:	ldr	r3, [fp, #-8]
   1a658:	add	r2, r2, r3
   1a65c:	ldr	r3, [fp, #-16]
   1a660:	str	r2, [r3, #16]
   1a664:	ldr	r3, [fp, #-16]
   1a668:	ldr	r2, [r3, #20]
   1a66c:	ldr	r3, [fp, #-8]
   1a670:	sub	r2, r2, r3
   1a674:	ldr	r3, [fp, #-16]
   1a678:	str	r2, [r3, #20]
   1a67c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a680:	cmp	r3, #0
   1a684:	bne	1a5c4 <flatcc_builder_get_emit_context@@Base+0x53c>
   1a688:	mov	r3, #0
   1a68c:	mov	r0, r3
   1a690:	sub	sp, fp, #4
   1a694:	ldr	fp, [sp]
   1a698:	add	sp, sp, #4
   1a69c:	pop	{pc}		; (ldr pc, [sp], #4)

0001a6a0 <flatcc_emitter_recycle_page@@Base>:
   1a6a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1a6a4:	add	fp, sp, #0
   1a6a8:	sub	sp, sp, #12
   1a6ac:	str	r0, [fp, #-8]
   1a6b0:	str	r1, [fp, #-12]
   1a6b4:	ldr	r3, [fp, #-8]
   1a6b8:	ldr	r3, [r3]
   1a6bc:	ldr	r2, [fp, #-12]
   1a6c0:	cmp	r2, r3
   1a6c4:	beq	1a6dc <flatcc_emitter_recycle_page@@Base+0x3c>
   1a6c8:	ldr	r3, [fp, #-8]
   1a6cc:	ldr	r3, [r3, #4]
   1a6d0:	ldr	r2, [fp, #-12]
   1a6d4:	cmp	r2, r3
   1a6d8:	bne	1a6e4 <flatcc_emitter_recycle_page@@Base+0x44>
   1a6dc:	mvn	r3, #0
   1a6e0:	b	1a754 <flatcc_emitter_recycle_page@@Base+0xb4>
   1a6e4:	ldr	r3, [fp, #-12]
   1a6e8:	ldr	r3, [r3, #2944]	; 0xb80
   1a6ec:	ldr	r2, [fp, #-12]
   1a6f0:	ldr	r2, [r2, #2948]	; 0xb84
   1a6f4:	str	r2, [r3, #2948]	; 0xb84
   1a6f8:	ldr	r3, [fp, #-12]
   1a6fc:	ldr	r3, [r3, #2948]	; 0xb84
   1a700:	ldr	r2, [fp, #-12]
   1a704:	ldr	r2, [r2, #2944]	; 0xb80
   1a708:	str	r2, [r3, #2944]	; 0xb80
   1a70c:	ldr	r3, [fp, #-8]
   1a710:	ldr	r3, [r3]
   1a714:	ldr	r2, [r3, #2948]	; 0xb84
   1a718:	ldr	r3, [fp, #-12]
   1a71c:	str	r2, [r3, #2948]	; 0xb84
   1a720:	ldr	r3, [fp, #-8]
   1a724:	ldr	r2, [r3]
   1a728:	ldr	r3, [fp, #-12]
   1a72c:	str	r2, [r3, #2944]	; 0xb80
   1a730:	ldr	r3, [fp, #-12]
   1a734:	ldr	r3, [r3, #2948]	; 0xb84
   1a738:	ldr	r2, [fp, #-12]
   1a73c:	str	r2, [r3, #2944]	; 0xb80
   1a740:	ldr	r3, [fp, #-12]
   1a744:	ldr	r3, [r3, #2944]	; 0xb80
   1a748:	ldr	r2, [fp, #-12]
   1a74c:	str	r2, [r3, #2948]	; 0xb84
   1a750:	mov	r3, #0
   1a754:	mov	r0, r3
   1a758:	add	sp, fp, #0
   1a75c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a760:	bx	lr

0001a764 <flatcc_emitter_reset@@Base>:
   1a764:	str	fp, [sp, #-8]!
   1a768:	str	lr, [sp, #4]
   1a76c:	add	fp, sp, #4
   1a770:	sub	sp, sp, #16
   1a774:	str	r0, [fp, #-16]
   1a778:	ldr	r3, [fp, #-16]
   1a77c:	ldr	r3, [r3]
   1a780:	str	r3, [fp, #-8]
   1a784:	ldr	r3, [fp, #-16]
   1a788:	ldr	r3, [r3]
   1a78c:	cmp	r3, #0
   1a790:	beq	1a8ec <flatcc_emitter_reset@@Base+0x188>
   1a794:	ldr	r3, [fp, #-16]
   1a798:	ldr	r2, [r3]
   1a79c:	ldr	r3, [fp, #-16]
   1a7a0:	str	r2, [r3, #4]
   1a7a4:	ldr	r3, [fp, #-16]
   1a7a8:	ldr	r3, [r3]
   1a7ac:	add	r2, r3, #1472	; 0x5c0
   1a7b0:	ldr	r3, [fp, #-16]
   1a7b4:	str	r2, [r3, #8]
   1a7b8:	ldr	r3, [fp, #-16]
   1a7bc:	ldr	r2, [r3, #8]
   1a7c0:	ldr	r3, [fp, #-16]
   1a7c4:	str	r2, [r3, #16]
   1a7c8:	ldr	r3, [fp, #-16]
   1a7cc:	mov	r2, #1472	; 0x5c0
   1a7d0:	str	r2, [r3, #12]
   1a7d4:	ldr	r3, [fp, #-16]
   1a7d8:	mov	r2, #1472	; 0x5c0
   1a7dc:	str	r2, [r3, #20]
   1a7e0:	ldr	r3, [fp, #-16]
   1a7e4:	ldr	r3, [r3, #12]
   1a7e8:	mov	r2, r3
   1a7ec:	ldr	r3, [fp, #-16]
   1a7f0:	ldr	r3, [r3]
   1a7f4:	rsb	r2, r2, #0
   1a7f8:	str	r2, [r3, #2952]	; 0xb88
   1a7fc:	ldr	r3, [fp, #-16]
   1a800:	ldr	r3, [r3, #32]
   1a804:	cmp	r3, #0
   1a808:	bne	1a81c <flatcc_emitter_reset@@Base+0xb8>
   1a80c:	ldr	r3, [fp, #-16]
   1a810:	ldr	r2, [r3, #24]
   1a814:	ldr	r3, [fp, #-16]
   1a818:	str	r2, [r3, #32]
   1a81c:	ldr	r3, [fp, #-16]
   1a820:	ldr	r2, [r3, #32]
   1a824:	mov	r3, r2
   1a828:	lsl	r3, r3, #1
   1a82c:	add	r3, r3, r2
   1a830:	lsr	r2, r3, #2
   1a834:	ldr	r3, [fp, #-16]
   1a838:	ldr	r3, [r3, #24]
   1a83c:	lsr	r3, r3, #2
   1a840:	add	r2, r2, r3
   1a844:	ldr	r3, [fp, #-16]
   1a848:	str	r2, [r3, #32]
   1a84c:	ldr	r3, [fp, #-16]
   1a850:	mov	r2, #0
   1a854:	str	r2, [r3, #24]
   1a858:	b	1a8b0 <flatcc_emitter_reset@@Base+0x14c>
   1a85c:	ldr	r3, [fp, #-16]
   1a860:	ldr	r3, [r3, #4]
   1a864:	ldr	r3, [r3, #2944]	; 0xb80
   1a868:	str	r3, [fp, #-8]
   1a86c:	ldr	r3, [fp, #-16]
   1a870:	ldr	r3, [r3, #4]
   1a874:	ldr	r2, [fp, #-8]
   1a878:	ldr	r2, [r2, #2944]	; 0xb80
   1a87c:	str	r2, [r3, #2944]	; 0xb80
   1a880:	ldr	r3, [fp, #-8]
   1a884:	ldr	r3, [r3, #2944]	; 0xb80
   1a888:	ldr	r2, [fp, #-16]
   1a88c:	ldr	r2, [r2, #4]
   1a890:	str	r2, [r3, #2948]	; 0xb84
   1a894:	ldr	r0, [fp, #-8]
   1a898:	bl	11fac <free@plt>
   1a89c:	ldr	r3, [fp, #-16]
   1a8a0:	ldr	r3, [r3, #28]
   1a8a4:	sub	r2, r3, #2944	; 0xb80
   1a8a8:	ldr	r3, [fp, #-16]
   1a8ac:	str	r2, [r3, #28]
   1a8b0:	ldr	r3, [fp, #-16]
   1a8b4:	ldr	r3, [r3, #32]
   1a8b8:	lsl	r2, r3, #1
   1a8bc:	ldr	r3, [fp, #-16]
   1a8c0:	ldr	r3, [r3, #28]
   1a8c4:	cmp	r2, r3
   1a8c8:	bcs	1a8f0 <flatcc_emitter_reset@@Base+0x18c>
   1a8cc:	ldr	r3, [fp, #-16]
   1a8d0:	ldr	r3, [r3, #4]
   1a8d4:	ldr	r2, [r3, #2944]	; 0xb80
   1a8d8:	ldr	r3, [fp, #-16]
   1a8dc:	ldr	r3, [r3]
   1a8e0:	cmp	r2, r3
   1a8e4:	bne	1a85c <flatcc_emitter_reset@@Base+0xf8>
   1a8e8:	b	1a8f0 <flatcc_emitter_reset@@Base+0x18c>
   1a8ec:	nop	{0}
   1a8f0:	sub	sp, fp, #4
   1a8f4:	ldr	fp, [sp]
   1a8f8:	add	sp, sp, #4
   1a8fc:	pop	{pc}		; (ldr pc, [sp], #4)

0001a900 <flatcc_emitter_clear@@Base>:
   1a900:	str	fp, [sp, #-8]!
   1a904:	str	lr, [sp, #4]
   1a908:	add	fp, sp, #4
   1a90c:	sub	sp, sp, #16
   1a910:	str	r0, [fp, #-16]
   1a914:	ldr	r3, [fp, #-16]
   1a918:	ldr	r3, [r3]
   1a91c:	str	r3, [fp, #-8]
   1a920:	ldr	r3, [fp, #-8]
   1a924:	cmp	r3, #0
   1a928:	beq	1a988 <flatcc_emitter_clear@@Base+0x88>
   1a92c:	ldr	r3, [fp, #-8]
   1a930:	ldr	r3, [r3, #2948]	; 0xb84
   1a934:	mov	r2, #0
   1a938:	str	r2, [r3, #2944]	; 0xb80
   1a93c:	b	1a95c <flatcc_emitter_clear@@Base+0x5c>
   1a940:	ldr	r3, [fp, #-8]
   1a944:	ldr	r3, [r3, #2944]	; 0xb80
   1a948:	str	r3, [fp, #-8]
   1a94c:	ldr	r3, [fp, #-8]
   1a950:	ldr	r3, [r3, #2948]	; 0xb84
   1a954:	mov	r0, r3
   1a958:	bl	11fac <free@plt>
   1a95c:	ldr	r3, [fp, #-8]
   1a960:	ldr	r3, [r3, #2944]	; 0xb80
   1a964:	cmp	r3, #0
   1a968:	bne	1a940 <flatcc_emitter_clear@@Base+0x40>
   1a96c:	ldr	r0, [fp, #-8]
   1a970:	bl	11fac <free@plt>
   1a974:	mov	r2, #36	; 0x24
   1a978:	mov	r1, #0
   1a97c:	ldr	r0, [fp, #-16]
   1a980:	bl	1203c <memset@plt>
   1a984:	b	1a98c <flatcc_emitter_clear@@Base+0x8c>
   1a988:	nop	{0}
   1a98c:	sub	sp, fp, #4
   1a990:	ldr	fp, [sp]
   1a994:	add	sp, sp, #4
   1a998:	pop	{pc}		; (ldr pc, [sp], #4)

0001a99c <flatcc_emitter@@Base>:
   1a99c:	str	fp, [sp, #-8]!
   1a9a0:	str	lr, [sp, #4]
   1a9a4:	add	fp, sp, #4
   1a9a8:	sub	sp, sp, #24
   1a9ac:	str	r0, [fp, #-16]
   1a9b0:	str	r1, [fp, #-20]	; 0xffffffec
   1a9b4:	str	r2, [fp, #-24]	; 0xffffffe8
   1a9b8:	str	r3, [fp, #-28]	; 0xffffffe4
   1a9bc:	ldr	r3, [fp, #-16]
   1a9c0:	str	r3, [fp, #-12]
   1a9c4:	ldr	r3, [fp, #-12]
   1a9c8:	ldr	r2, [r3, #24]
   1a9cc:	ldr	r3, [fp, #4]
   1a9d0:	add	r2, r2, r3
   1a9d4:	ldr	r3, [fp, #-12]
   1a9d8:	str	r2, [r3, #24]
   1a9dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a9e0:	cmp	r3, #0
   1a9e4:	bge	1aaac <flatcc_emitter@@Base+0x110>
   1a9e8:	ldr	r3, [fp, #-12]
   1a9ec:	ldr	r3, [r3, #12]
   1a9f0:	ldr	r2, [fp, #4]
   1a9f4:	cmp	r2, r3
   1a9f8:	bhi	1aa40 <flatcc_emitter@@Base+0xa4>
   1a9fc:	ldr	r3, [fp, #-12]
   1aa00:	ldr	r2, [r3, #8]
   1aa04:	ldr	r3, [fp, #4]
   1aa08:	rsb	r3, r3, #0
   1aa0c:	add	r2, r2, r3
   1aa10:	ldr	r3, [fp, #-12]
   1aa14:	str	r2, [r3, #8]
   1aa18:	ldr	r3, [fp, #-12]
   1aa1c:	ldr	r2, [r3, #12]
   1aa20:	ldr	r3, [fp, #4]
   1aa24:	sub	r2, r2, r3
   1aa28:	ldr	r3, [fp, #-12]
   1aa2c:	str	r2, [r3, #12]
   1aa30:	ldr	r3, [fp, #-12]
   1aa34:	ldr	r3, [r3, #8]
   1aa38:	str	r3, [fp, #-8]
   1aa3c:	b	1ab58 <flatcc_emitter@@Base+0x1bc>
   1aa40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aa44:	lsl	r3, r3, #3
   1aa48:	ldr	r2, [fp, #-20]	; 0xffffffec
   1aa4c:	add	r3, r2, r3
   1aa50:	str	r3, [fp, #-20]	; 0xffffffec
   1aa54:	b	1aa94 <flatcc_emitter@@Base+0xf8>
   1aa58:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa5c:	sub	r3, r3, #8
   1aa60:	str	r3, [fp, #-20]	; 0xffffffec
   1aa64:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa68:	ldr	r1, [r3]
   1aa6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa70:	ldr	r3, [r3, #4]
   1aa74:	mov	r2, r3
   1aa78:	ldr	r0, [fp, #-12]
   1aa7c:	bl	1a490 <flatcc_builder_get_emit_context@@Base+0x408>
   1aa80:	mov	r3, r0
   1aa84:	cmp	r3, #0
   1aa88:	beq	1aa94 <flatcc_emitter@@Base+0xf8>
   1aa8c:	mvn	r3, #0
   1aa90:	b	1abb0 <flatcc_emitter@@Base+0x214>
   1aa94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aa98:	sub	r2, r3, #1
   1aa9c:	str	r2, [fp, #-24]	; 0xffffffe8
   1aaa0:	cmp	r3, #0
   1aaa4:	bne	1aa58 <flatcc_emitter@@Base+0xbc>
   1aaa8:	b	1ab50 <flatcc_emitter@@Base+0x1b4>
   1aaac:	ldr	r3, [fp, #-12]
   1aab0:	ldr	r3, [r3, #20]
   1aab4:	ldr	r2, [fp, #4]
   1aab8:	cmp	r2, r3
   1aabc:	bhi	1ab3c <flatcc_emitter@@Base+0x1a0>
   1aac0:	ldr	r3, [fp, #-12]
   1aac4:	ldr	r3, [r3, #16]
   1aac8:	str	r3, [fp, #-8]
   1aacc:	ldr	r3, [fp, #-12]
   1aad0:	ldr	r2, [r3, #16]
   1aad4:	ldr	r3, [fp, #4]
   1aad8:	add	r2, r2, r3
   1aadc:	ldr	r3, [fp, #-12]
   1aae0:	str	r2, [r3, #16]
   1aae4:	ldr	r3, [fp, #-12]
   1aae8:	ldr	r2, [r3, #20]
   1aaec:	ldr	r3, [fp, #4]
   1aaf0:	sub	r2, r2, r3
   1aaf4:	ldr	r3, [fp, #-12]
   1aaf8:	str	r2, [r3, #20]
   1aafc:	b	1ab58 <flatcc_emitter@@Base+0x1bc>
   1ab00:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab04:	ldr	r1, [r3]
   1ab08:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab0c:	ldr	r3, [r3, #4]
   1ab10:	mov	r2, r3
   1ab14:	ldr	r0, [fp, #-12]
   1ab18:	bl	1a5a4 <flatcc_builder_get_emit_context@@Base+0x51c>
   1ab1c:	mov	r3, r0
   1ab20:	cmp	r3, #0
   1ab24:	beq	1ab30 <flatcc_emitter@@Base+0x194>
   1ab28:	mvn	r3, #0
   1ab2c:	b	1abb0 <flatcc_emitter@@Base+0x214>
   1ab30:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab34:	add	r3, r3, #8
   1ab38:	str	r3, [fp, #-20]	; 0xffffffec
   1ab3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ab40:	sub	r2, r3, #1
   1ab44:	str	r2, [fp, #-24]	; 0xffffffe8
   1ab48:	cmp	r3, #0
   1ab4c:	bne	1ab00 <flatcc_emitter@@Base+0x164>
   1ab50:	mov	r3, #0
   1ab54:	b	1abb0 <flatcc_emitter@@Base+0x214>
   1ab58:	b	1ab98 <flatcc_emitter@@Base+0x1fc>
   1ab5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab60:	ldr	r1, [r3]
   1ab64:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab68:	ldr	r3, [r3, #4]
   1ab6c:	mov	r2, r3
   1ab70:	ldr	r0, [fp, #-8]
   1ab74:	bl	11fb8 <memcpy@plt>
   1ab78:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab7c:	ldr	r3, [r3, #4]
   1ab80:	ldr	r2, [fp, #-8]
   1ab84:	add	r3, r2, r3
   1ab88:	str	r3, [fp, #-8]
   1ab8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab90:	add	r3, r3, #8
   1ab94:	str	r3, [fp, #-20]	; 0xffffffec
   1ab98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ab9c:	sub	r2, r3, #1
   1aba0:	str	r2, [fp, #-24]	; 0xffffffe8
   1aba4:	cmp	r3, #0
   1aba8:	bne	1ab5c <flatcc_emitter@@Base+0x1c0>
   1abac:	mov	r3, #0
   1abb0:	mov	r0, r3
   1abb4:	sub	sp, fp, #4
   1abb8:	ldr	fp, [sp]
   1abbc:	add	sp, sp, #4
   1abc0:	pop	{pc}		; (ldr pc, [sp], #4)

0001abc4 <flatcc_emitter_copy_buffer@@Base>:
   1abc4:	str	fp, [sp, #-8]!
   1abc8:	str	lr, [sp, #4]
   1abcc:	add	fp, sp, #4
   1abd0:	sub	sp, sp, #24
   1abd4:	str	r0, [fp, #-16]
   1abd8:	str	r1, [fp, #-20]	; 0xffffffec
   1abdc:	str	r2, [fp, #-24]	; 0xffffffe8
   1abe0:	ldr	r3, [fp, #-16]
   1abe4:	ldr	r3, [r3, #24]
   1abe8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1abec:	cmp	r2, r3
   1abf0:	bcs	1abfc <flatcc_emitter_copy_buffer@@Base+0x38>
   1abf4:	mov	r3, #0
   1abf8:	b	1acfc <flatcc_emitter_copy_buffer@@Base+0x138>
   1abfc:	ldr	r3, [fp, #-16]
   1ac00:	ldr	r3, [r3]
   1ac04:	cmp	r3, #0
   1ac08:	bne	1ac14 <flatcc_emitter_copy_buffer@@Base+0x50>
   1ac0c:	mov	r3, #0
   1ac10:	b	1acfc <flatcc_emitter_copy_buffer@@Base+0x138>
   1ac14:	ldr	r3, [fp, #-16]
   1ac18:	ldr	r2, [r3]
   1ac1c:	ldr	r3, [fp, #-16]
   1ac20:	ldr	r3, [r3, #4]
   1ac24:	cmp	r2, r3
   1ac28:	bne	1ac50 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1ac2c:	ldr	r3, [fp, #-16]
   1ac30:	ldr	r1, [r3, #8]
   1ac34:	ldr	r3, [fp, #-16]
   1ac38:	ldr	r3, [r3, #24]
   1ac3c:	mov	r2, r3
   1ac40:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ac44:	bl	11fb8 <memcpy@plt>
   1ac48:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ac4c:	b	1acfc <flatcc_emitter_copy_buffer@@Base+0x138>
   1ac50:	ldr	r3, [fp, #-16]
   1ac54:	ldr	r3, [r3, #12]
   1ac58:	rsb	r3, r3, #2944	; 0xb80
   1ac5c:	str	r3, [fp, #-12]
   1ac60:	ldr	r3, [fp, #-16]
   1ac64:	ldr	r3, [r3, #8]
   1ac68:	ldr	r2, [fp, #-12]
   1ac6c:	mov	r1, r3
   1ac70:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ac74:	bl	11fb8 <memcpy@plt>
   1ac78:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ac7c:	ldr	r3, [fp, #-12]
   1ac80:	add	r3, r2, r3
   1ac84:	str	r3, [fp, #-20]	; 0xffffffec
   1ac88:	ldr	r3, [fp, #-16]
   1ac8c:	ldr	r3, [r3]
   1ac90:	ldr	r3, [r3, #2944]	; 0xb80
   1ac94:	str	r3, [fp, #-8]
   1ac98:	b	1acc8 <flatcc_emitter_copy_buffer@@Base+0x104>
   1ac9c:	ldr	r3, [fp, #-8]
   1aca0:	mov	r2, #2944	; 0xb80
   1aca4:	mov	r1, r3
   1aca8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1acac:	bl	11fb8 <memcpy@plt>
   1acb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1acb4:	add	r3, r3, #2944	; 0xb80
   1acb8:	str	r3, [fp, #-20]	; 0xffffffec
   1acbc:	ldr	r3, [fp, #-8]
   1acc0:	ldr	r3, [r3, #2944]	; 0xb80
   1acc4:	str	r3, [fp, #-8]
   1acc8:	ldr	r3, [fp, #-16]
   1accc:	ldr	r3, [r3, #4]
   1acd0:	ldr	r2, [fp, #-8]
   1acd4:	cmp	r2, r3
   1acd8:	bne	1ac9c <flatcc_emitter_copy_buffer@@Base+0xd8>
   1acdc:	ldr	r1, [fp, #-8]
   1ace0:	ldr	r3, [fp, #-16]
   1ace4:	ldr	r3, [r3, #20]
   1ace8:	rsb	r3, r3, #2944	; 0xb80
   1acec:	mov	r2, r3
   1acf0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1acf4:	bl	11fb8 <memcpy@plt>
   1acf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1acfc:	mov	r0, r3
   1ad00:	sub	sp, fp, #4
   1ad04:	ldr	fp, [sp]
   1ad08:	add	sp, sp, #4
   1ad0c:	pop	{pc}		; (ldr pc, [sp], #4)

0001ad10 <__libc_csu_init@@Base>:
   1ad10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad14:	mov	r7, r0
   1ad18:	ldr	r6, [pc, #72]	; 1ad68 <__libc_csu_init@@Base+0x58>
   1ad1c:	ldr	r5, [pc, #72]	; 1ad6c <__libc_csu_init@@Base+0x5c>
   1ad20:	add	r6, pc, r6
   1ad24:	add	r5, pc, r5
   1ad28:	sub	r6, r6, r5
   1ad2c:	mov	r8, r1
   1ad30:	mov	r9, r2
   1ad34:	bl	11f68 <strcmp@plt-0x20>
   1ad38:	asrs	r6, r6, #2
   1ad3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad40:	mov	r4, #0
   1ad44:	add	r4, r4, #1
   1ad48:	ldr	r3, [r5], #4
   1ad4c:	mov	r2, r9
   1ad50:	mov	r1, r8
   1ad54:	mov	r0, r7
   1ad58:	blx	r3
   1ad5c:	cmp	r6, r4
   1ad60:	bne	1ad44 <__libc_csu_init@@Base+0x34>
   1ad64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad68:	andeq	r1, r1, ip, ror #3
   1ad6c:	andeq	r1, r1, r4, ror #3

0001ad70 <__libc_csu_fini@@Base>:
   1ad70:	bx	lr

Disassembly of section .fini:

0001ad74 <.fini>:
   1ad74:	push	{r3, lr}
   1ad78:	pop	{r3, pc}
