
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

0001069c <.init>:
   1069c:	push	{r3, lr}
   106a0:	bl	10764 <_start@@Base+0x3c>
   106a4:	pop	{r3, pc}

Disassembly of section .plt:

000106a8 <printf@plt-0x14>:
   106a8:	push	{lr}		; (str lr, [sp, #-4]!)
   106ac:	ldr	lr, [pc, #4]	; 106b8 <printf@plt-0x4>
   106b0:	add	lr, pc, lr
   106b4:	ldr	pc, [lr, #8]!
   106b8:	andeq	r0, r1, r8, asr #18

000106bc <printf@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2376]!	; 0x948

000106c8 <fopen@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2368]!	; 0x940

000106d4 <tolower@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2360]!	; 0x938

000106e0 <puts@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2352]!	; 0x930

000106ec <__libc_start_main@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2344]!	; 0x928

000106f8 <__gmon_start__@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2336]!	; 0x920

00010704 <fclose@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2328]!	; 0x918

00010710 <abort@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2320]!	; 0x910

0001071c <getc@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2312]!	; 0x908

Disassembly of section .text:

00010728 <_start@@Base>:
   10728:	mov	fp, #0
   1072c:	mov	lr, #0
   10730:	pop	{r1}		; (ldr r1, [sp], #4)
   10734:	mov	r2, sp
   10738:	push	{r2}		; (str r2, [sp, #-4]!)
   1073c:	push	{r0}		; (str r0, [sp, #-4]!)
   10740:	ldr	ip, [pc, #16]	; 10758 <_start@@Base+0x30>
   10744:	push	{ip}		; (str ip, [sp, #-4]!)
   10748:	ldr	r0, [pc, #12]	; 1075c <_start@@Base+0x34>
   1074c:	ldr	r3, [pc, #12]	; 10760 <_start@@Base+0x38>
   10750:	bl	106ec <__libc_start_main@plt>
   10754:	bl	10710 <abort@plt>
   10758:	strdeq	r0, [r1], -ip
   1075c:	andeq	r0, r1, r8, asr r8
   10760:	muleq	r1, ip, sl
   10764:	ldr	r3, [pc, #20]	; 10780 <_start@@Base+0x58>
   10768:	ldr	r2, [pc, #20]	; 10784 <_start@@Base+0x5c>
   1076c:	add	r3, pc, r3
   10770:	ldr	r2, [r3, r2]
   10774:	cmp	r2, #0
   10778:	bxeq	lr
   1077c:	b	106f8 <__gmon_start__@plt>
   10780:	andeq	r0, r1, ip, lsl #17
   10784:	andeq	r0, r0, r0, lsr r0
   10788:	ldr	r0, [pc, #24]	; 107a8 <_start@@Base+0x80>
   1078c:	ldr	r3, [pc, #24]	; 107ac <_start@@Base+0x84>
   10790:	cmp	r3, r0
   10794:	bxeq	lr
   10798:	ldr	r3, [pc, #16]	; 107b0 <_start@@Base+0x88>
   1079c:	cmp	r3, #0
   107a0:	bxeq	lr
   107a4:	bx	r3
   107a8:	andeq	r1, r2, ip, lsr r0
   107ac:	andeq	r1, r2, ip, lsr r0
   107b0:	andeq	r0, r0, r0
   107b4:	ldr	r0, [pc, #36]	; 107e0 <_start@@Base+0xb8>
   107b8:	ldr	r1, [pc, #36]	; 107e4 <_start@@Base+0xbc>
   107bc:	sub	r1, r1, r0
   107c0:	asr	r1, r1, #2
   107c4:	add	r1, r1, r1, lsr #31
   107c8:	asrs	r1, r1, #1
   107cc:	bxeq	lr
   107d0:	ldr	r3, [pc, #16]	; 107e8 <_start@@Base+0xc0>
   107d4:	cmp	r3, #0
   107d8:	bxeq	lr
   107dc:	bx	r3
   107e0:	andeq	r1, r2, ip, lsr r0
   107e4:	andeq	r1, r2, ip, lsr r0
   107e8:	andeq	r0, r0, r0
   107ec:	push	{r4, lr}
   107f0:	ldr	r4, [pc, #24]	; 10810 <_start@@Base+0xe8>
   107f4:	ldrb	r3, [r4]
   107f8:	cmp	r3, #0
   107fc:	popne	{r4, pc}
   10800:	bl	10788 <_start@@Base+0x60>
   10804:	mov	r3, #1
   10808:	strb	r3, [r4]
   1080c:	pop	{r4, pc}
   10810:	andeq	r1, r2, ip, lsr r0
   10814:	b	107b4 <_start@@Base+0x8c>

00010818 <in_array@@Base>:
   10818:	push	{fp, lr}
   1081c:	mov	fp, sp
   10820:	cmp	r2, #0
   10824:	movlt	r0, #0
   10828:	poplt	{fp, pc}
   1082c:	mov	lr, #0
   10830:	ldr	r3, [r1, lr, lsl #2]
   10834:	cmp	r3, r0
   10838:	moveq	r0, #1
   1083c:	popeq	{fp, pc}
   10840:	add	ip, lr, #1
   10844:	cmp	lr, r2
   10848:	mov	lr, ip
   1084c:	movge	r0, #0
   10850:	popge	{fp, pc}
   10854:	b	10830 <in_array@@Base+0x18>

00010858 <main@@Base>:
   10858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1085c:	add	fp, sp, #28
   10860:	sub	sp, sp, #4
   10864:	vpush	{d8-d9}
   10868:	sub	sp, sp, #128	; 0x80
   1086c:	mov	r0, #237	; 0xed
   10870:	str	r0, [fp, #-52]	; 0xffffffcc
   10874:	mov	r0, #205	; 0xcd
   10878:	str	r0, [fp, #-56]	; 0xffffffc8
   1087c:	mov	r0, #250	; 0xfa
   10880:	str	r0, [fp, #-60]	; 0xffffffc4
   10884:	mov	r0, #218	; 0xda
   10888:	str	r0, [fp, #-64]	; 0xffffffc0
   1088c:	mov	r0, #231	; 0xe7
   10890:	str	r0, [fp, #-68]	; 0xffffffbc
   10894:	mov	r0, #199	; 0xc7
   10898:	str	r0, [fp, #-72]	; 0xffffffb8
   1089c:	movw	r0, #2900	; 0xb54
   108a0:	movt	r0, #1
   108a4:	movw	r1, #2923	; 0xb6b
   108a8:	movt	r1, #1
   108ac:	bl	106c8 <fopen@plt>
   108b0:	mov	r4, r0
   108b4:	vmov.i32	q8, #0	; 0x00000000
   108b8:	mov	r9, sp
   108bc:	add	r0, r9, #80	; 0x50
   108c0:	vst1.64	{d16-d17}, [r0]
   108c4:	add	r0, r9, #64	; 0x40
   108c8:	vst1.64	{d16-d17}, [r0]
   108cc:	add	r0, r9, #48	; 0x30
   108d0:	vst1.64	{d16-d17}, [r0]
   108d4:	add	r0, r9, #32
   108d8:	vst1.64	{d16-d17}, [r0]
   108dc:	add	r0, r9, #16
   108e0:	vst1.64	{d16-d17}, [r0]
   108e4:	mov	r0, #100	; 0x64
   108e8:	mov	r1, r9
   108ec:	vst1.64	{d16-d17}, [r1], r0
   108f0:	mov	r8, #0
   108f4:	str	r8, [r1]
   108f8:	str	r8, [sp, #96]	; 0x60
   108fc:	mov	r0, r4
   10900:	bl	1071c <getc@plt>
   10904:	cmn	r0, #1
   10908:	mov	r5, #0
   1090c:	beq	10a18 <main@@Base+0x1c0>
   10910:	mov	sl, r0
   10914:	mov	r5, #0
   10918:	movw	r6, #2828	; 0xb0c
   1091c:	movt	r6, #1
   10920:	movw	r7, #2860	; 0xb2c
   10924:	movt	r7, #1
   10928:	mov	r0, sl
   1092c:	mov	r1, r6
   10930:	mov	r2, #8
   10934:	bl	10818 <in_array@@Base>
   10938:	mov	r1, r0
   1093c:	mov	r0, #97	; 0x61
   10940:	cmp	r1, #0
   10944:	bne	109e8 <main@@Base+0x190>
   10948:	mov	r0, sl
   1094c:	mov	r1, r7
   10950:	mov	r2, #4
   10954:	bl	10818 <in_array@@Base>
   10958:	mov	r1, r0
   1095c:	mov	r0, #101	; 0x65
   10960:	cmp	r1, #0
   10964:	bne	109e8 <main@@Base+0x190>
   10968:	mov	r0, sl
   1096c:	sub	r1, fp, #56	; 0x38
   10970:	mov	r2, #2
   10974:	bl	10818 <in_array@@Base>
   10978:	mov	r1, r0
   1097c:	mov	r0, #105	; 0x69
   10980:	cmp	r1, #0
   10984:	bne	109e8 <main@@Base+0x190>
   10988:	mov	r0, sl
   1098c:	movw	r1, #2876	; 0xb3c
   10990:	movt	r1, #1
   10994:	mov	r2, #6
   10998:	bl	10818 <in_array@@Base>
   1099c:	mov	r1, r0
   109a0:	mov	r0, #111	; 0x6f
   109a4:	cmp	r1, #0
   109a8:	bne	109e8 <main@@Base+0x190>
   109ac:	mov	r0, sl
   109b0:	sub	r1, fp, #64	; 0x40
   109b4:	mov	r2, #2
   109b8:	bl	10818 <in_array@@Base>
   109bc:	mov	r1, r0
   109c0:	mov	r0, #117	; 0x75
   109c4:	cmp	r1, #0
   109c8:	bne	109e8 <main@@Base+0x190>
   109cc:	mov	r0, sl
   109d0:	sub	r1, fp, #72	; 0x48
   109d4:	mov	r2, #2
   109d8:	bl	10818 <in_array@@Base>
   109dc:	cmp	r0, #0
   109e0:	movne	sl, #99	; 0x63
   109e4:	mov	r0, sl
   109e8:	bl	106d4 <tolower@plt>
   109ec:	sub	r0, r0, #97	; 0x61
   109f0:	cmp	r0, #25
   109f4:	ldrls	r1, [r9, r0, lsl #2]
   109f8:	addls	r1, r1, #1
   109fc:	strls	r1, [r9, r0, lsl #2]
   10a00:	addls	r5, r5, #1
   10a04:	mov	r0, r4
   10a08:	bl	1071c <getc@plt>
   10a0c:	mov	sl, r0
   10a10:	cmn	r0, #1
   10a14:	bne	10928 <main@@Base+0xd0>
   10a18:	mov	r0, r4
   10a1c:	bl	10704 <fclose@plt>
   10a20:	movw	r0, #2977	; 0xba1
   10a24:	movt	r0, #1
   10a28:	bl	106e0 <puts@plt>
   10a2c:	movw	r0, #2925	; 0xb6d
   10a30:	movt	r0, #1
   10a34:	mov	r1, r5
   10a38:	bl	106bc <printf@plt>
   10a3c:	vmov	s0, r5
   10a40:	vcvt.f32.s32	s16, s0
   10a44:	vldr	s18, [pc, #76]	; 10a98 <main@@Base+0x240>
   10a48:	movw	r4, #2957	; 0xb8d
   10a4c:	movt	r4, #1
   10a50:	add	r0, r9, r8, lsl #2
   10a54:	vldr	s0, [r0]
   10a58:	vcvt.f32.s32	s0, s0
   10a5c:	vdiv.f32	s0, s0, s16
   10a60:	vmul.f32	s0, s0, s18
   10a64:	vcvt.f64.f32	d16, s0
   10a68:	vmov	r2, r3, d16
   10a6c:	add	r1, r8, #97	; 0x61
   10a70:	mov	r0, r4
   10a74:	bl	106bc <printf@plt>
   10a78:	add	r8, r8, #1
   10a7c:	cmp	r8, #26
   10a80:	bne	10a50 <main@@Base+0x1f8>
   10a84:	mov	r0, #0
   10a88:	sub	sp, fp, #48	; 0x30
   10a8c:	vpop	{d8-d9}
   10a90:	add	sp, sp, #4
   10a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a98:	sbcmi	r0, r8, #0

00010a9c <__libc_csu_init@@Base>:
   10a9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10aa0:	mov	r7, r0
   10aa4:	ldr	r6, [pc, #72]	; 10af4 <__libc_csu_init@@Base+0x58>
   10aa8:	ldr	r5, [pc, #72]	; 10af8 <__libc_csu_init@@Base+0x5c>
   10aac:	add	r6, pc, r6
   10ab0:	add	r5, pc, r5
   10ab4:	sub	r6, r6, r5
   10ab8:	mov	r8, r1
   10abc:	mov	r9, r2
   10ac0:	bl	1069c <printf@plt-0x20>
   10ac4:	asrs	r6, r6, #2
   10ac8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10acc:	mov	r4, #0
   10ad0:	add	r4, r4, #1
   10ad4:	ldr	r3, [r5], #4
   10ad8:	mov	r2, r9
   10adc:	mov	r1, r8
   10ae0:	mov	r0, r7
   10ae4:	blx	r3
   10ae8:	cmp	r6, r4
   10aec:	bne	10ad0 <__libc_csu_init@@Base+0x34>
   10af0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10af4:	andeq	r0, r1, r8, asr r4
   10af8:	andeq	r0, r1, r0, asr r4

00010afc <__libc_csu_fini@@Base>:
   10afc:	bx	lr

Disassembly of section .fini:

00010b00 <.fini>:
   10b00:	push	{r3, lr}
   10b04:	pop	{r3, pc}
