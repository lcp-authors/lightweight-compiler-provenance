
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e44 <.init>:
   10e44:	push	{r3, lr}
   10e48:	bl	11134 <__assert_fail@plt+0x48>
   10e4c:	pop	{r3, pc}

Disassembly of section .plt:

00010e50 <calloc@plt-0x14>:
   10e50:	push	{lr}		; (str lr, [sp, #-4]!)
   10e54:	ldr	lr, [pc, #4]	; 10e60 <calloc@plt-0x4>
   10e58:	add	lr, pc, lr
   10e5c:	ldr	pc, [lr, #8]!
   10e60:	andeq	r7, r1, r0, lsr #3

00010e64 <calloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e70 <fputs_unlocked@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #408]!	; 0x198

00010e7c <raise@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #400]!	; 0x190

00010e88 <strcmp@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #392]!	; 0x188

00010e94 <read@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #384]!	; 0x180

00010ea0 <fflush@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #376]!	; 0x178

00010eac <free@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #368]!	; 0x170

00010eb8 <_exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #360]!	; 0x168

00010ec4 <memcpy@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #352]!	; 0x160

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #344]!	; 0x158

00010edc <fwrite_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #336]!	; 0x150

00010ee8 <memcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #328]!	; 0x148

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #320]!	; 0x140

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #312]!	; 0x138

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #304]!	; 0x130

00010f18 <rawmemchr@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #296]!	; 0x128

00010f24 <iswprint@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #288]!	; 0x120

00010f30 <__fxstat64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #280]!	; 0x118

00010f3c <fwrite@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #272]!	; 0x110

00010f48 <lseek64@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #264]!	; 0x108

00010f54 <__ctype_get_mb_cur_max@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #256]!	; 0x100

00010f60 <__fpending@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #248]!	; 0xf8

00010f6c <ferror_unlocked@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #240]!	; 0xf0

00010f78 <mbrtowc@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #232]!	; 0xe8

00010f84 <error@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #224]!	; 0xe0

00010f90 <open64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #216]!	; 0xd8

00010f9c <malloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #208]!	; 0xd0

00010fa8 <__libc_start_main@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #200]!	; 0xc8

00010fb4 <__freading@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #192]!	; 0xc0

00010fc0 <__gmon_start__@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #184]!	; 0xb8

00010fcc <getopt_long@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #176]!	; 0xb0

00010fd8 <__ctype_b_loc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #168]!	; 0xa8

00010fe4 <exit@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #160]!	; 0xa0

00010ff0 <strlen@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #152]!	; 0x98

00010ffc <strchr@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #144]!	; 0x90

00011008 <memrchr@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #136]!	; 0x88

00011014 <__errno_location@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #128]!	; 0x80

00011020 <__cxa_atexit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #120]!	; 0x78

0001102c <memset@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #112]!	; 0x70

00011038 <__printf_chk@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #104]!	; 0x68

00011044 <fileno@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #96]!	; 0x60

00011050 <strtoumax@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #88]!	; 0x58

0001105c <__fprintf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #80]!	; 0x50

00011068 <memchr@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #72]!	; 0x48

00011074 <fclose@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #64]!	; 0x40

00011080 <fseeko64@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #56]!	; 0x38

0001108c <setlocale@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #48]!	; 0x30

00011098 <strrchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #40]!	; 0x28

000110a4 <nl_langinfo@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #32]!

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #24]!

000110bc <bindtextdomain@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #16]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #8]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #0]!

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ec <__assert_fail@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

000110f8 <.text>:
   110f8:	mov	fp, #0
   110fc:	mov	lr, #0
   11100:	pop	{r1}		; (ldr r1, [sp], #4)
   11104:	mov	r2, sp
   11108:	push	{r2}		; (str r2, [sp, #-4]!)
   1110c:	push	{r0}		; (str r0, [sp, #-4]!)
   11110:	ldr	ip, [pc, #16]	; 11128 <__assert_fail@plt+0x3c>
   11114:	push	{ip}		; (str ip, [sp, #-4]!)
   11118:	ldr	r0, [pc, #12]	; 1112c <__assert_fail@plt+0x40>
   1111c:	ldr	r3, [pc, #12]	; 11130 <__assert_fail@plt+0x44>
   11120:	bl	10fa8 <__libc_start_main@plt>
   11124:	bl	110d4 <abort@plt>
   11128:	andeq	r6, r1, r0, lsr #23
   1112c:	andeq	r1, r1, r0, asr #10
   11130:	andeq	r6, r1, r0, asr #22
   11134:	ldr	r3, [pc, #20]	; 11150 <__assert_fail@plt+0x64>
   11138:	ldr	r2, [pc, #20]	; 11154 <__assert_fail@plt+0x68>
   1113c:	add	r3, pc, r3
   11140:	ldr	r2, [r3, r2]
   11144:	cmp	r2, #0
   11148:	bxeq	lr
   1114c:	b	10fc0 <__gmon_start__@plt>
   11150:			; <UNDEFINED> instruction: 0x00016ebc
   11154:	andeq	r0, r0, r8, ror #1
   11158:	ldr	r0, [pc, #24]	; 11178 <__assert_fail@plt+0x8c>
   1115c:	ldr	r3, [pc, #24]	; 1117c <__assert_fail@plt+0x90>
   11160:	cmp	r3, r0
   11164:	bxeq	lr
   11168:	ldr	r3, [pc, #16]	; 11180 <__assert_fail@plt+0x94>
   1116c:	cmp	r3, #0
   11170:	bxeq	lr
   11174:	bx	r3
   11178:	andeq	r8, r2, r0, asr #2
   1117c:	andeq	r8, r2, r0, asr #2
   11180:	andeq	r0, r0, r0
   11184:	ldr	r0, [pc, #36]	; 111b0 <__assert_fail@plt+0xc4>
   11188:	ldr	r1, [pc, #36]	; 111b4 <__assert_fail@plt+0xc8>
   1118c:	sub	r1, r1, r0
   11190:	asr	r1, r1, #2
   11194:	add	r1, r1, r1, lsr #31
   11198:	asrs	r1, r1, #1
   1119c:	bxeq	lr
   111a0:	ldr	r3, [pc, #16]	; 111b8 <__assert_fail@plt+0xcc>
   111a4:	cmp	r3, #0
   111a8:	bxeq	lr
   111ac:	bx	r3
   111b0:	andeq	r8, r2, r0, asr #2
   111b4:	andeq	r8, r2, r0, asr #2
   111b8:	andeq	r0, r0, r0
   111bc:	push	{r4, lr}
   111c0:	ldr	r4, [pc, #24]	; 111e0 <__assert_fail@plt+0xf4>
   111c4:	ldrb	r3, [r4]
   111c8:	cmp	r3, #0
   111cc:	popne	{r4, pc}
   111d0:	bl	11158 <__assert_fail@plt+0x6c>
   111d4:	mov	r3, #1
   111d8:	strb	r3, [r4]
   111dc:	pop	{r4, pc}
   111e0:	andeq	r8, r2, ip, asr r1
   111e4:	b	11184 <__assert_fail@plt+0x98>
   111e8:	push	{fp, lr}
   111ec:	mov	fp, sp
   111f0:	mov	r4, r0
   111f4:	cmp	r0, #0
   111f8:	bne	11318 <__assert_fail@plt+0x22c>
   111fc:	movw	r1, #27651	; 0x6c03
   11200:	movt	r1, #1
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	bl	10ef4 <dcgettext@plt>
   11210:	mov	r1, r0
   11214:	movw	r0, #33132	; 0x816c
   11218:	movt	r0, #2
   1121c:	ldr	r2, [r0]
   11220:	mov	r0, #1
   11224:	bl	11038 <__printf_chk@plt>
   11228:	movw	r1, #27684	; 0x6c24
   1122c:	movt	r1, #1
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	bl	10ef4 <dcgettext@plt>
   1123c:	mov	r1, r0
   11240:	mov	r0, #1
   11244:	mov	r2, #10
   11248:	bl	11038 <__printf_chk@plt>
   1124c:	bl	1135c <__assert_fail@plt+0x270>
   11250:	bl	1138c <__assert_fail@plt+0x2a0>
   11254:	movw	r1, #27817	; 0x6ca9
   11258:	movt	r1, #1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	bl	10ef4 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	mov	r0, #1
   11270:	mov	r2, #10
   11274:	bl	11038 <__printf_chk@plt>
   11278:	movw	r1, #28215	; 0x6e37
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	bl	10ef4 <dcgettext@plt>
   1128c:	movw	r5, #33108	; 0x8154
   11290:	movt	r5, #2
   11294:	ldr	r1, [r5]
   11298:	bl	10e70 <fputs_unlocked@plt>
   1129c:	movw	r1, #28347	; 0x6ebb
   112a0:	movt	r1, #1
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	bl	10ef4 <dcgettext@plt>
   112b0:	ldr	r1, [r5]
   112b4:	bl	10e70 <fputs_unlocked@plt>
   112b8:	movw	r1, #28410	; 0x6efa
   112bc:	movt	r1, #1
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	bl	10ef4 <dcgettext@plt>
   112cc:	ldr	r1, [r5]
   112d0:	bl	10e70 <fputs_unlocked@plt>
   112d4:	movw	r1, #28455	; 0x6f27
   112d8:	movt	r1, #1
   112dc:	mov	r0, #0
   112e0:	mov	r2, #5
   112e4:	bl	10ef4 <dcgettext@plt>
   112e8:	ldr	r1, [r5]
   112ec:	bl	10e70 <fputs_unlocked@plt>
   112f0:	movw	r1, #28509	; 0x6f5d
   112f4:	movt	r1, #1
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	bl	10ef4 <dcgettext@plt>
   11304:	ldr	r1, [r5]
   11308:	bl	10e70 <fputs_unlocked@plt>
   1130c:	bl	113bc <__assert_fail@plt+0x2d0>
   11310:	mov	r0, r4
   11314:	bl	10fe4 <exit@plt>
   11318:	movw	r0, #33104	; 0x8150
   1131c:	movt	r0, #2
   11320:	ldr	r5, [r0]
   11324:	movw	r1, #27612	; 0x6bdc
   11328:	movt	r1, #1
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	bl	10ef4 <dcgettext@plt>
   11338:	mov	r2, r0
   1133c:	movw	r0, #33132	; 0x816c
   11340:	movt	r0, #2
   11344:	ldr	r3, [r0]
   11348:	mov	r0, r5
   1134c:	mov	r1, #1
   11350:	bl	1105c <__fprintf_chk@plt>
   11354:	mov	r0, r4
   11358:	bl	10fe4 <exit@plt>
   1135c:	push	{fp, lr}
   11360:	mov	fp, sp
   11364:	movw	r1, #28872	; 0x70c8
   11368:	movt	r1, #1
   1136c:	mov	r0, #0
   11370:	mov	r2, #5
   11374:	bl	10ef4 <dcgettext@plt>
   11378:	movw	r1, #33108	; 0x8154
   1137c:	movt	r1, #2
   11380:	ldr	r1, [r1]
   11384:	pop	{fp, lr}
   11388:	b	10e70 <fputs_unlocked@plt>
   1138c:	push	{fp, lr}
   11390:	mov	fp, sp
   11394:	movw	r1, #28928	; 0x7100
   11398:	movt	r1, #1
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	bl	10ef4 <dcgettext@plt>
   113a8:	movw	r1, #33108	; 0x8154
   113ac:	movt	r1, #2
   113b0:	ldr	r1, [r1]
   113b4:	pop	{fp, lr}
   113b8:	b	10e70 <fputs_unlocked@plt>
   113bc:	push	{r4, r5, fp, lr}
   113c0:	add	fp, sp, #8
   113c4:	sub	sp, sp, #56	; 0x38
   113c8:	movw	r0, #29864	; 0x74a8
   113cc:	movt	r0, #1
   113d0:	add	r1, r0, #32
   113d4:	mov	r5, sp
   113d8:	mov	r2, #48	; 0x30
   113dc:	vld1.64	{d16-d17}, [r1]
   113e0:	add	r1, r5, #32
   113e4:	add	r3, r0, #16
   113e8:	vld1.64	{d18-d19}, [r0], r2
   113ec:	vld1.64	{d20-d21}, [r3]
   113f0:	vldr	d22, [r0]
   113f4:	vst1.64	{d16-d17}, [r1]
   113f8:	add	r0, r5, #16
   113fc:	vst1.64	{d20-d21}, [r0]
   11400:	mov	r0, r5
   11404:	vst1.64	{d18-d19}, [r0], r2
   11408:	vstr	d22, [r0]
   1140c:	ldr	r1, [sp]
   11410:	cmp	r1, #0
   11414:	beq	1143c <__assert_fail@plt+0x350>
   11418:	mov	r5, sp
   1141c:	movw	r4, #28721	; 0x7031
   11420:	movt	r4, #1
   11424:	mov	r0, r4
   11428:	bl	10e88 <strcmp@plt>
   1142c:	cmp	r0, #0
   11430:	ldrne	r1, [r5, #8]!
   11434:	cmpne	r1, #0
   11438:	bne	11424 <__assert_fail@plt+0x338>
   1143c:	ldr	r4, [r5, #4]
   11440:	movw	r1, #29098	; 0x71aa
   11444:	movt	r1, #1
   11448:	mov	r0, #0
   1144c:	mov	r2, #5
   11450:	bl	10ef4 <dcgettext@plt>
   11454:	mov	r1, r0
   11458:	movw	r2, #28798	; 0x707e
   1145c:	movt	r2, #1
   11460:	movw	r3, #29121	; 0x71c1
   11464:	movt	r3, #1
   11468:	mov	r0, #1
   1146c:	bl	11038 <__printf_chk@plt>
   11470:	movw	r5, #28721	; 0x7031
   11474:	movt	r5, #1
   11478:	cmp	r4, #0
   1147c:	moveq	r4, r5
   11480:	mov	r0, #5
   11484:	mov	r1, #0
   11488:	bl	1108c <setlocale@plt>
   1148c:	cmp	r0, #0
   11490:	beq	114d0 <__assert_fail@plt+0x3e4>
   11494:	movw	r1, #29161	; 0x71e9
   11498:	movt	r1, #1
   1149c:	mov	r2, #3
   114a0:	bl	110c8 <strncmp@plt>
   114a4:	cmp	r0, #0
   114a8:	beq	114d0 <__assert_fail@plt+0x3e4>
   114ac:	movw	r1, #29165	; 0x71ed
   114b0:	movt	r1, #1
   114b4:	mov	r0, #0
   114b8:	mov	r2, #5
   114bc:	bl	10ef4 <dcgettext@plt>
   114c0:	movw	r1, #33108	; 0x8154
   114c4:	movt	r1, #2
   114c8:	ldr	r1, [r1]
   114cc:	bl	10e70 <fputs_unlocked@plt>
   114d0:	movw	r1, #29236	; 0x7234
   114d4:	movt	r1, #1
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	bl	10ef4 <dcgettext@plt>
   114e4:	mov	r1, r0
   114e8:	movw	r2, #29121	; 0x71c1
   114ec:	movt	r2, #1
   114f0:	mov	r0, #1
   114f4:	mov	r3, r5
   114f8:	bl	11038 <__printf_chk@plt>
   114fc:	movw	r1, #29263	; 0x724f
   11500:	movt	r1, #1
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	bl	10ef4 <dcgettext@plt>
   11510:	mov	r1, r0
   11514:	movw	r0, #29031	; 0x7167
   11518:	movt	r0, #1
   1151c:	movw	r3, #29313	; 0x7281
   11520:	movt	r3, #1
   11524:	cmp	r4, r5
   11528:	moveq	r3, r0
   1152c:	mov	r0, #1
   11530:	mov	r2, r4
   11534:	bl	11038 <__printf_chk@plt>
   11538:	sub	sp, fp, #8
   1153c:	pop	{r4, r5, fp, pc}
   11540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11544:	add	fp, sp, #28
   11548:	sub	sp, sp, #52	; 0x34
   1154c:	mov	r4, r1
   11550:	mov	r6, r0
   11554:	ldr	r0, [r1]
   11558:	bl	134bc <__assert_fail@plt+0x23d0>
   1155c:	movw	r1, #29313	; 0x7281
   11560:	movt	r1, #1
   11564:	mov	r0, #6
   11568:	bl	1108c <setlocale@plt>
   1156c:	movw	r5, #28802	; 0x7082
   11570:	movt	r5, #1
   11574:	movw	r1, #28726	; 0x7036
   11578:	movt	r1, #1
   1157c:	mov	r0, r5
   11580:	bl	110bc <bindtextdomain@plt>
   11584:	mov	r0, r5
   11588:	bl	10f0c <textdomain@plt>
   1158c:	movw	r0, #12828	; 0x321c
   11590:	movt	r0, #1
   11594:	bl	16ba4 <__assert_fail@plt+0x5ab8>
   11598:	movw	r0, #33117	; 0x815d
   1159c:	movt	r0, #2
   115a0:	mov	r1, #0
   115a4:	strb	r1, [r0]
   115a8:	movw	r7, #33118	; 0x815e
   115ac:	movt	r7, #2
   115b0:	strb	r1, [r7]
   115b4:	movw	r0, #33119	; 0x815f
   115b8:	movt	r0, #2
   115bc:	mov	r1, #1
   115c0:	strb	r1, [r0]
   115c4:	mov	sl, #10
   115c8:	cmp	r6, #2
   115cc:	blt	11630 <__assert_fail@plt+0x544>
   115d0:	mov	r8, r4
   115d4:	ldr	r1, [r8, #4]!
   115d8:	ldrb	r0, [r1]
   115dc:	cmp	r0, #45	; 0x2d
   115e0:	bne	11630 <__assert_fail@plt+0x544>
   115e4:	ldrb	r0, [r1, #1]!
   115e8:	sub	r0, r0, #48	; 0x30
   115ec:	cmp	r0, #9
   115f0:	bhi	11630 <__assert_fail@plt+0x544>
   115f4:	str	r4, [sp, #12]
   115f8:	str	r6, [sp, #24]
   115fc:	mov	r0, r1
   11600:	ldrb	r7, [r0, #1]!
   11604:	sub	r2, r7, #48	; 0x30
   11608:	cmp	r2, #10
   1160c:	bcc	11600 <__assert_fail@plt+0x514>
   11610:	mov	ip, #0
   11614:	mov	r5, #1
   11618:	mvn	lr, #97	; 0x61
   1161c:	mov	r2, #0
   11620:	str	r2, [sp, #20]
   11624:	mov	r9, r0
   11628:	mov	r2, #0
   1162c:	b	118d0 <__assert_fail@plt+0x7e4>
   11630:	mov	r0, #0
   11634:	str	r0, [sp, #20]
   11638:	mov	r8, r4
   1163c:	mov	r9, #0
   11640:	mov	r0, #1
   11644:	str	r0, [sp, #16]
   11648:	movw	r5, #29704	; 0x7408
   1164c:	movt	r5, #1
   11650:	mov	r0, #0
   11654:	str	r0, [sp, #24]
   11658:	b	11670 <__assert_fail@plt+0x584>
   1165c:	ldr	r1, [r3]
   11660:	str	r0, [sp, #16]
   11664:	bl	11b24 <__assert_fail@plt+0xa38>
   11668:	mov	sl, r0
   1166c:	mov	r9, r1
   11670:	mov	r0, #0
   11674:	str	r0, [sp]
   11678:	mov	r0, r6
   1167c:	mov	r1, r8
   11680:	movw	r2, #28780	; 0x706c
   11684:	movt	r2, #1
   11688:	mov	r3, r5
   1168c:	bl	10fcc <getopt_long@plt>
   11690:	mov	r4, r0
   11694:	cmp	r0, #98	; 0x62
   11698:	ble	117b8 <__assert_fail@plt+0x6cc>
   1169c:	sub	r0, r4, #99	; 0x63
   116a0:	cmp	r0, #23
   116a4:	bhi	11788 <__assert_fail@plt+0x69c>
   116a8:	add	r1, pc, #0
   116ac:	ldr	pc, [r1, r0, lsl #2]
   116b0:	andeq	r1, r1, r0, lsl r7
   116b4:	andeq	r1, r1, r8, asr sl
   116b8:	andeq	r1, r1, r8, asr sl
   116bc:	andeq	r1, r1, r8, asr sl
   116c0:	andeq	r1, r1, r8, asr sl
   116c4:	andeq	r1, r1, r8, asr sl
   116c8:	andeq	r1, r1, r8, asr sl
   116cc:	andeq	r1, r1, r8, asr sl
   116d0:	andeq	r1, r1, r8, asr sl
   116d4:	andeq	r1, r1, r8, asr sl
   116d8:	andeq	r1, r1, r8, asr sl
   116dc:	andeq	r1, r1, r8, asr #14
   116e0:	andeq	r1, r1, r8, asr sl
   116e4:	andeq	r1, r1, r8, asr sl
   116e8:	andeq	r1, r1, ip, ror r7
   116ec:	andeq	r1, r1, r8, asr sl
   116f0:	andeq	r1, r1, r8, asr sl
   116f4:	andeq	r1, r1, r8, asr sl
   116f8:	andeq	r1, r1, r8, asr sl
   116fc:	andeq	r1, r1, ip, lsr r7
   11700:	andeq	r1, r1, r8, asr sl
   11704:	andeq	r1, r1, r8, asr sl
   11708:	andeq	r1, r1, r8, asr sl
   1170c:	andeq	r1, r1, r4, lsr #15
   11710:	movw	r3, #33112	; 0x8158
   11714:	movt	r3, #2
   11718:	ldr	r2, [r3]
   1171c:	ldrb	r1, [r2]
   11720:	subs	r1, r1, #45	; 0x2d
   11724:	clz	r1, r1
   11728:	lsr	r0, r1, #5
   1172c:	str	r0, [sp, #24]
   11730:	mov	r0, #0
   11734:	bne	1165c <__assert_fail@plt+0x570>
   11738:	b	11770 <__assert_fail@plt+0x684>
   1173c:	mov	r0, #1
   11740:	str	r0, [sp, #20]
   11744:	b	11670 <__assert_fail@plt+0x584>
   11748:	movw	r3, #33112	; 0x8158
   1174c:	movt	r3, #2
   11750:	ldr	r2, [r3]
   11754:	ldrb	r1, [r2]
   11758:	subs	r1, r1, #45	; 0x2d
   1175c:	clz	r1, r1
   11760:	lsr	r0, r1, #5
   11764:	str	r0, [sp, #24]
   11768:	mov	r0, #1
   1176c:	bne	1165c <__assert_fail@plt+0x570>
   11770:	add	r1, r2, #1
   11774:	str	r1, [r3]
   11778:	b	1165c <__assert_fail@plt+0x570>
   1177c:	mov	r0, #2
   11780:	str	r0, [sp, #20]
   11784:	b	11670 <__assert_fail@plt+0x584>
   11788:	cmp	r4, #256	; 0x100
   1178c:	bne	11a58 <__assert_fail@plt+0x96c>
   11790:	mov	r0, #1
   11794:	movw	r1, #33120	; 0x8160
   11798:	movt	r1, #2
   1179c:	strb	r0, [r1]
   117a0:	b	11670 <__assert_fail@plt+0x584>
   117a4:	mov	r0, #0
   117a8:	movw	r1, #33119	; 0x815f
   117ac:	movt	r1, #2
   117b0:	strb	r0, [r1]
   117b4:	b	11670 <__assert_fail@plt+0x584>
   117b8:	cmn	r4, #1
   117bc:	bne	119ec <__assert_fail@plt+0x900>
   117c0:	ldr	r0, [sp, #20]
   117c4:	cmp	r0, #1
   117c8:	beq	117ec <__assert_fail@plt+0x700>
   117cc:	cmp	r0, #0
   117d0:	bne	117f4 <__assert_fail@plt+0x708>
   117d4:	movw	r0, #33096	; 0x8148
   117d8:	movt	r0, #2
   117dc:	ldr	r0, [r0]
   117e0:	sub	r1, r6, #1
   117e4:	cmp	r0, r1
   117e8:	bge	117f4 <__assert_fail@plt+0x708>
   117ec:	mov	r0, #1
   117f0:	strb	r0, [r7]
   117f4:	mov	r7, r6
   117f8:	mov	r4, #0
   117fc:	cmp	r9, #0
   11800:	mov	r0, #0
   11804:	movwlt	r0, #1
   11808:	ldr	r1, [sp, #24]
   1180c:	and	r0, r0, r1
   11810:	cmp	r0, #1
   11814:	bne	11828 <__assert_fail@plt+0x73c>
   11818:	ldr	r0, [sp, #16]
   1181c:	eor	r0, r0, #1
   11820:	tst	r0, #1
   11824:	bne	11ac4 <__assert_fail@plt+0x9d8>
   11828:	movw	r0, #33096	; 0x8148
   1182c:	movt	r0, #2
   11830:	ldr	r6, [r0]
   11834:	mov	r5, #1
   11838:	mov	r0, #1
   1183c:	mov	r1, #0
   11840:	bl	15a58 <__assert_fail@plt+0x496c>
   11844:	movw	r1, #29696	; 0x7400
   11848:	movt	r1, #1
   1184c:	cmp	r6, r7
   11850:	addlt	r1, r8, r6, lsl #2
   11854:	ldr	r0, [r1]
   11858:	cmp	r0, #0
   1185c:	beq	1189c <__assert_fail@plt+0x7b0>
   11860:	add	r4, r1, #4
   11864:	ldr	r1, [sp, #24]
   11868:	and	r6, r1, #1
   1186c:	ldr	r1, [sp, #16]
   11870:	and	r7, r1, #1
   11874:	str	r7, [sp]
   11878:	str	r6, [sp, #4]
   1187c:	mov	r2, sl
   11880:	mov	r3, r9
   11884:	bl	11b94 <__assert_fail@plt+0xaa8>
   11888:	and	r5, r5, r0
   1188c:	ldr	r0, [r4], #4
   11890:	cmp	r0, #0
   11894:	bne	11874 <__assert_fail@plt+0x788>
   11898:	eor	r4, r5, #1
   1189c:	movw	r0, #33117	; 0x815d
   118a0:	movt	r0, #2
   118a4:	ldrb	r0, [r0]
   118a8:	cmp	r0, #1
   118ac:	bne	118c0 <__assert_fail@plt+0x7d4>
   118b0:	mov	r0, #0
   118b4:	bl	110e0 <close@plt>
   118b8:	cmn	r0, #1
   118bc:	ble	11b0c <__assert_fail@plt+0xa20>
   118c0:	mov	r0, r4
   118c4:	sub	sp, fp, #28
   118c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118cc:	ldrb	r7, [r9, #1]!
   118d0:	mov	r4, r2
   118d4:	mov	sl, r5
   118d8:	uxtab	r6, lr, r7
   118dc:	cmp	r6, #24
   118e0:	bhi	1199c <__assert_fail@plt+0x8b0>
   118e4:	add	r3, pc, #8
   118e8:	mov	r5, #0
   118ec:	mov	r2, #0
   118f0:	ldr	pc, [r3, r6, lsl #2]
   118f4:	andeq	r1, r1, r8, asr r9
   118f8:	andeq	r1, r1, ip, asr #17
   118fc:	muleq	r1, r4, sl
   11900:	muleq	r1, r4, sl
   11904:	muleq	r1, r4, sl
   11908:	muleq	r1, r4, sl
   1190c:	muleq	r1, r4, sl
   11910:	muleq	r1, r4, sl
   11914:	muleq	r1, r4, sl
   11918:	andeq	r1, r1, r8, asr r9
   1191c:	andeq	r1, r1, ip, lsl #19
   11920:	andeq	r1, r1, r8, asr r9
   11924:	muleq	r1, r4, sl
   11928:	muleq	r1, r4, sl
   1192c:	muleq	r1, r4, sl
   11930:	andeq	r1, r1, r4, ror r9
   11934:	muleq	r1, r4, sl
   11938:	muleq	r1, r4, sl
   1193c:	muleq	r1, r4, sl
   11940:	muleq	r1, r4, sl
   11944:	andeq	r1, r1, ip, ror r9
   11948:	muleq	r1, r4, sl
   1194c:	muleq	r1, r4, sl
   11950:	muleq	r1, r4, sl
   11954:	andeq	r1, r1, r4, ror #18
   11958:	mov	r5, #0
   1195c:	mov	r2, r7
   11960:	b	118cc <__assert_fail@plt+0x7e0>
   11964:	movw	r2, #33119	; 0x815f
   11968:	movt	r2, #2
   1196c:	strb	ip, [r2]
   11970:	b	11984 <__assert_fail@plt+0x898>
   11974:	mov	r2, #2
   11978:	b	11980 <__assert_fail@plt+0x894>
   1197c:	mov	r2, #1
   11980:	str	r2, [sp, #20]
   11984:	mov	r5, sl
   11988:	b	11990 <__assert_fail@plt+0x8a4>
   1198c:	mov	r5, #1
   11990:	mov	r2, r4
   11994:	ldrb	r7, [r9, #1]!
   11998:	b	118d0 <__assert_fail@plt+0x7e4>
   1199c:	uxtb	r2, r7
   119a0:	cmp	r2, #0
   119a4:	bne	11a94 <__assert_fail@plt+0x9a8>
   119a8:	strb	r4, [r0]
   119ac:	tst	r4, #255	; 0xff
   119b0:	movne	r2, #0
   119b4:	strbne	r2, [r0, #1]
   119b8:	and	r0, sl, #1
   119bc:	str	r0, [sp, #16]
   119c0:	bl	11b24 <__assert_fail@plt+0xa38>
   119c4:	mov	sl, r0
   119c8:	mov	r9, r1
   119cc:	ldr	r1, [sp, #12]
   119d0:	ldr	r0, [r1]
   119d4:	str	r0, [r1, #4]
   119d8:	ldr	r6, [sp, #24]
   119dc:	sub	r6, r6, #1
   119e0:	movw	r7, #33118	; 0x815e
   119e4:	movt	r7, #2
   119e8:	b	11648 <__assert_fail@plt+0x55c>
   119ec:	cmn	r4, #3
   119f0:	bne	11a48 <__assert_fail@plt+0x95c>
   119f4:	movw	r0, #33016	; 0x80f8
   119f8:	movt	r0, #2
   119fc:	ldr	r3, [r0]
   11a00:	movw	r0, #33108	; 0x8154
   11a04:	movt	r0, #2
   11a08:	ldr	r0, [r0]
   11a0c:	mov	r1, #0
   11a10:	movw	r2, #28828	; 0x709c
   11a14:	movt	r2, #1
   11a18:	movw	r7, #28812	; 0x708c
   11a1c:	movt	r7, #1
   11a20:	str	r7, [sp]
   11a24:	str	r2, [sp, #4]
   11a28:	str	r1, [sp, #8]
   11a2c:	movw	r1, #28721	; 0x7031
   11a30:	movt	r1, #1
   11a34:	movw	r2, #28798	; 0x707e
   11a38:	movt	r2, #1
   11a3c:	bl	15558 <__assert_fail@plt+0x446c>
   11a40:	mov	r0, #0
   11a44:	bl	10fe4 <exit@plt>
   11a48:	cmn	r4, #2
   11a4c:	bne	11a58 <__assert_fail@plt+0x96c>
   11a50:	mov	r0, #0
   11a54:	bl	111e8 <__assert_fail@plt+0xfc>
   11a58:	sub	r0, r4, #48	; 0x30
   11a5c:	cmp	r0, #9
   11a60:	bhi	11a8c <__assert_fail@plt+0x9a0>
   11a64:	movw	r1, #28750	; 0x704e
   11a68:	movt	r1, #1
   11a6c:	mov	r0, #0
   11a70:	mov	r2, #5
   11a74:	bl	10ef4 <dcgettext@plt>
   11a78:	mov	r2, r0
   11a7c:	mov	r0, #0
   11a80:	mov	r1, #0
   11a84:	mov	r3, r4
   11a88:	bl	10f84 <error@plt>
   11a8c:	mov	r0, #1
   11a90:	bl	111e8 <__assert_fail@plt+0xfc>
   11a94:	movw	r1, #28750	; 0x704e
   11a98:	movt	r1, #1
   11a9c:	mov	r0, #0
   11aa0:	mov	r2, #5
   11aa4:	bl	10ef4 <dcgettext@plt>
   11aa8:	mov	r2, r0
   11aac:	ldrb	r3, [r9]
   11ab0:	mov	r0, #0
   11ab4:	mov	r1, #0
   11ab8:	bl	10f84 <error@plt>
   11abc:	mov	r0, #1
   11ac0:	bl	111e8 <__assert_fail@plt+0xfc>
   11ac4:	movw	r1, #28848	; 0x70b0
   11ac8:	movt	r1, #1
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	bl	10ef4 <dcgettext@plt>
   11ad8:	mov	r4, r0
   11adc:	add	r2, sp, #31
   11ae0:	mov	r0, sl
   11ae4:	mov	r1, r9
   11ae8:	bl	13460 <__assert_fail@plt+0x2374>
   11aec:	bl	14cf4 <__assert_fail@plt+0x3c08>
   11af0:	str	r0, [sp]
   11af4:	movw	r2, #28841	; 0x70a9
   11af8:	movt	r2, #1
   11afc:	mov	r0, #1
   11b00:	mov	r1, #75	; 0x4b
   11b04:	mov	r3, r4
   11b08:	bl	10f84 <error@plt>
   11b0c:	bl	11014 <__errno_location@plt>
   11b10:	ldr	r1, [r0]
   11b14:	movw	r2, #30013	; 0x753d
   11b18:	movt	r2, #1
   11b1c:	mov	r0, #1
   11b20:	bl	10f84 <error@plt>
   11b24:	push	{r4, r5, fp, lr}
   11b28:	add	fp, sp, #8
   11b2c:	sub	sp, sp, #24
   11b30:	mov	r4, r1
   11b34:	movw	r2, #29327	; 0x728f
   11b38:	movt	r2, #1
   11b3c:	movw	r1, #28848	; 0x70b0
   11b40:	movt	r1, #1
   11b44:	cmp	r0, #0
   11b48:	movne	r1, r2
   11b4c:	mov	r5, #0
   11b50:	mov	r0, #0
   11b54:	mov	r2, #5
   11b58:	bl	10ef4 <dcgettext@plt>
   11b5c:	movw	r1, #29314	; 0x7282
   11b60:	movt	r1, #1
   11b64:	mvn	r2, #0
   11b68:	str	r2, [sp]
   11b6c:	str	r2, [sp, #4]
   11b70:	str	r1, [sp, #8]
   11b74:	str	r0, [sp, #12]
   11b78:	str	r5, [sp, #16]
   11b7c:	mov	r0, r4
   11b80:	mov	r2, #0
   11b84:	mov	r3, #0
   11b88:	bl	15b4c <__assert_fail@plt+0x4a60>
   11b8c:	sub	sp, fp, #8
   11b90:	pop	{r4, r5, fp, pc}
   11b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b98:	add	fp, sp, #28
   11b9c:	sub	sp, sp, #12
   11ba0:	mov	r6, r3
   11ba4:	mov	r7, r2
   11ba8:	mov	r4, r0
   11bac:	movw	r1, #30013	; 0x753d
   11bb0:	movt	r1, #1
   11bb4:	bl	10e88 <strcmp@plt>
   11bb8:	ldr	r9, [fp, #12]
   11bbc:	ldr	sl, [fp, #8]
   11bc0:	cmp	r0, #0
   11bc4:	beq	11c2c <__assert_fail@plt+0xb40>
   11bc8:	mov	r8, #0
   11bcc:	mov	r0, r4
   11bd0:	mov	r1, #0
   11bd4:	bl	10f90 <open64@plt>
   11bd8:	cmn	r0, #1
   11bdc:	ble	11c84 <__assert_fail@plt+0xb98>
   11be0:	mov	r5, r0
   11be4:	str	sl, [sp]
   11be8:	str	r9, [sp, #4]
   11bec:	mov	r0, r4
   11bf0:	mov	r1, r5
   11bf4:	mov	r2, r7
   11bf8:	mov	r3, r6
   11bfc:	bl	11cd0 <__assert_fail@plt+0xbe4>
   11c00:	mov	r8, r0
   11c04:	mov	r0, r5
   11c08:	bl	110e0 <close@plt>
   11c0c:	cmp	r0, #0
   11c10:	beq	11cc4 <__assert_fail@plt+0xbd8>
   11c14:	bl	11014 <__errno_location@plt>
   11c18:	ldr	r5, [r0]
   11c1c:	mov	r8, #0
   11c20:	movw	r1, #29463	; 0x7317
   11c24:	movt	r1, #1
   11c28:	b	11c94 <__assert_fail@plt+0xba8>
   11c2c:	movw	r0, #33117	; 0x815d
   11c30:	movt	r0, #2
   11c34:	mov	r1, #1
   11c38:	strb	r1, [r0]
   11c3c:	movw	r1, #29421	; 0x72ed
   11c40:	movt	r1, #1
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	bl	10ef4 <dcgettext@plt>
   11c50:	mov	r4, r0
   11c54:	mov	r0, #0
   11c58:	mov	r1, #0
   11c5c:	bl	15a58 <__assert_fail@plt+0x496c>
   11c60:	str	sl, [sp]
   11c64:	str	r9, [sp, #4]
   11c68:	mov	r0, r4
   11c6c:	mov	r1, #0
   11c70:	mov	r2, r7
   11c74:	mov	r3, r6
   11c78:	bl	11cd0 <__assert_fail@plt+0xbe4>
   11c7c:	sub	sp, fp, #28
   11c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c84:	bl	11014 <__errno_location@plt>
   11c88:	ldr	r5, [r0]
   11c8c:	movw	r1, #29436	; 0x72fc
   11c90:	movt	r1, #1
   11c94:	mov	r0, #0
   11c98:	mov	r2, #5
   11c9c:	bl	10ef4 <dcgettext@plt>
   11ca0:	mov	r6, r0
   11ca4:	mov	r0, #4
   11ca8:	mov	r1, r4
   11cac:	bl	14b00 <__assert_fail@plt+0x3a14>
   11cb0:	mov	r3, r0
   11cb4:	mov	r0, #0
   11cb8:	mov	r1, r5
   11cbc:	mov	r2, r6
   11cc0:	bl	10f84 <error@plt>
   11cc4:	mov	r0, r8
   11cc8:	sub	sp, fp, #28
   11ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cd4:	add	fp, sp, #28
   11cd8:	sub	sp, sp, #124	; 0x7c
   11cdc:	mov	r9, r3
   11ce0:	mov	r6, r2
   11ce4:	mov	r7, r1
   11ce8:	mov	r4, r0
   11cec:	movw	r0, #33118	; 0x815e
   11cf0:	movt	r0, #2
   11cf4:	ldrb	r0, [r0]
   11cf8:	ldr	r5, [fp, #12]
   11cfc:	ldr	sl, [fp, #8]
   11d00:	cmp	r0, #1
   11d04:	moveq	r0, r4
   11d08:	bleq	11e60 <__assert_fail@plt+0xd74>
   11d0c:	cmp	r5, #0
   11d10:	beq	11d74 <__assert_fail@plt+0xc88>
   11d14:	add	r8, sp, #16
   11d18:	mov	r0, r7
   11d1c:	mov	r1, r8
   11d20:	bl	16bbc <__assert_fail@plt+0x5ad0>
   11d24:	cmp	r0, #0
   11d28:	beq	11da0 <__assert_fail@plt+0xcb4>
   11d2c:	bl	11014 <__errno_location@plt>
   11d30:	ldr	r6, [r0]
   11d34:	mov	r5, #0
   11d38:	movw	r1, #29482	; 0x732a
   11d3c:	movt	r1, #1
   11d40:	mov	r0, #0
   11d44:	mov	r2, #5
   11d48:	bl	10ef4 <dcgettext@plt>
   11d4c:	mov	r7, r0
   11d50:	mov	r0, #4
   11d54:	mov	r1, r4
   11d58:	bl	14b00 <__assert_fail@plt+0x3a14>
   11d5c:	mov	r3, r0
   11d60:	mov	r0, #0
   11d64:	mov	r1, r6
   11d68:	mov	r2, r7
   11d6c:	bl	10f84 <error@plt>
   11d70:	b	11e54 <__assert_fail@plt+0xd68>
   11d74:	mov	r0, r4
   11d78:	mov	r1, r7
   11d7c:	mov	r2, r6
   11d80:	mov	r3, r9
   11d84:	sub	sp, fp, #28
   11d88:	cmp	sl, #0
   11d8c:	beq	11d98 <__assert_fail@plt+0xcac>
   11d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d94:	b	12128 <__assert_fail@plt+0x103c>
   11d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d9c:	b	122ac <__assert_fail@plt+0x11c0>
   11da0:	movw	r0, #33120	; 0x8160
   11da4:	movt	r0, #2
   11da8:	ldrb	r0, [r0]
   11dac:	mvn	r5, #0
   11db0:	cmp	r0, #0
   11db4:	beq	11dc8 <__assert_fail@plt+0xcdc>
   11db8:	mvn	r1, #0
   11dbc:	cmp	sl, #0
   11dc0:	bne	11e0c <__assert_fail@plt+0xd20>
   11dc4:	b	11e30 <__assert_fail@plt+0xd44>
   11dc8:	add	r0, sp, #16
   11dcc:	bl	11eac <__assert_fail@plt+0xdc0>
   11dd0:	cmp	r0, #0
   11dd4:	mvn	r1, #0
   11dd8:	beq	11e04 <__assert_fail@plt+0xd18>
   11ddc:	mov	r0, #1
   11de0:	stm	sp, {r0, r4}
   11de4:	mov	r5, #0
   11de8:	mov	r0, r7
   11dec:	mov	r2, #0
   11df0:	mov	r3, #0
   11df4:	bl	11ec8 <__assert_fail@plt+0xddc>
   11df8:	cmp	r1, #0
   11dfc:	blt	11e54 <__assert_fail@plt+0xd68>
   11e00:	mov	r5, r0
   11e04:	cmp	sl, #0
   11e08:	beq	11e30 <__assert_fail@plt+0xd44>
   11e0c:	str	r5, [sp, #8]
   11e10:	str	r1, [sp, #12]
   11e14:	str	r8, [sp]
   11e18:	mov	r0, r4
   11e1c:	mov	r1, r7
   11e20:	mov	r2, r6
   11e24:	mov	r3, r9
   11e28:	bl	11f78 <__assert_fail@plt+0xe8c>
   11e2c:	b	11e50 <__assert_fail@plt+0xd64>
   11e30:	str	r5, [sp, #8]
   11e34:	str	r1, [sp, #12]
   11e38:	str	r8, [sp]
   11e3c:	mov	r0, r4
   11e40:	mov	r1, r7
   11e44:	mov	r2, r6
   11e48:	mov	r3, r9
   11e4c:	bl	12034 <__assert_fail@plt+0xf48>
   11e50:	mov	r5, r0
   11e54:	mov	r0, r5
   11e58:	sub	sp, fp, #28
   11e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e60:	push	{r4, r5, fp, lr}
   11e64:	add	fp, sp, #8
   11e68:	mov	r3, r0
   11e6c:	movw	r4, #33121	; 0x8161
   11e70:	movt	r4, #2
   11e74:	ldrb	r0, [r4]
   11e78:	movw	r1, #29312	; 0x7280
   11e7c:	movt	r1, #1
   11e80:	movw	r2, #29313	; 0x7281
   11e84:	movt	r2, #1
   11e88:	cmp	r0, #0
   11e8c:	movne	r2, r1
   11e90:	mov	r5, #1
   11e94:	movw	r1, #29498	; 0x733a
   11e98:	movt	r1, #1
   11e9c:	mov	r0, #1
   11ea0:	bl	11038 <__printf_chk@plt>
   11ea4:	strb	r5, [r4]
   11ea8:	pop	{r4, r5, fp, pc}
   11eac:	ldr	r0, [r0, #16]
   11eb0:	and	r0, r0, #53248	; 0xd000
   11eb4:	orr	r0, r0, #8192	; 0x2000
   11eb8:	cmp	r0, #40960	; 0xa000
   11ebc:	moveq	r0, #1
   11ec0:	movne	r0, #0
   11ec4:	bx	lr
   11ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ecc:	add	fp, sp, #28
   11ed0:	sub	sp, sp, #28
   11ed4:	mov	r6, r3
   11ed8:	mov	r7, r2
   11edc:	ldr	r8, [fp, #8]
   11ee0:	str	r8, [sp]
   11ee4:	bl	10f48 <lseek64@plt>
   11ee8:	mov	r9, r0
   11eec:	mov	r5, r1
   11ef0:	cmn	r1, #1
   11ef4:	bgt	11f68 <__assert_fail@plt+0xe7c>
   11ef8:	movw	r0, #29512	; 0x7348
   11efc:	movt	r0, #1
   11f00:	movw	r4, #29541	; 0x7365
   11f04:	movt	r4, #1
   11f08:	cmp	r8, #0
   11f0c:	moveq	r4, r0
   11f10:	bl	11014 <__errno_location@plt>
   11f14:	ldr	sl, [r0]
   11f18:	mov	r0, #0
   11f1c:	mov	r1, r4
   11f20:	mov	r2, #5
   11f24:	bl	10ef4 <dcgettext@plt>
   11f28:	mov	r8, r0
   11f2c:	mov	r0, #0
   11f30:	mov	r1, #3
   11f34:	ldr	r2, [fp, #12]
   11f38:	bl	14bb4 <__assert_fail@plt+0x3ac8>
   11f3c:	mov	r4, r0
   11f40:	add	r2, sp, #7
   11f44:	mov	r0, r7
   11f48:	mov	r1, r6
   11f4c:	bl	133a0 <__assert_fail@plt+0x22b4>
   11f50:	str	r0, [sp]
   11f54:	mov	r0, #0
   11f58:	mov	r1, sl
   11f5c:	mov	r2, r8
   11f60:	mov	r3, r4
   11f64:	bl	10f84 <error@plt>
   11f68:	mov	r0, r9
   11f6c:	mov	r1, r5
   11f70:	sub	sp, fp, #28
   11f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f7c:	add	fp, sp, #24
   11f80:	sub	sp, sp, #16
   11f84:	ldr	ip, [fp, #20]
   11f88:	ldr	lr, [fp, #16]
   11f8c:	cmp	ip, #0
   11f90:	blt	12020 <__assert_fail@plt+0xf34>
   11f94:	movw	r4, #33120	; 0x8160
   11f98:	movt	r4, #2
   11f9c:	ldrb	r4, [r4]
   11fa0:	cmp	r4, #0
   11fa4:	bne	12020 <__assert_fail@plt+0xf34>
   11fa8:	ldr	r6, [fp, #8]
   11fac:	ldr	r8, [r6, #48]	; 0x30
   11fb0:	ldr	r9, [r6, #52]	; 0x34
   11fb4:	ldr	r6, [r6, #56]	; 0x38
   11fb8:	mov	r7, #0
   11fbc:	subs	r4, r6, #536870913	; 0x20000001
   11fc0:	rscs	r4, r7, r6, asr #31
   11fc4:	mov	r4, #0
   11fc8:	movwcc	r4, #1
   11fcc:	rsbs	r5, r6, #0
   11fd0:	sbcs	r5, r7, r6, asr #31
   11fd4:	movwlt	r7, #1
   11fd8:	ands	r4, r7, r4
   11fdc:	asrne	r4, r6, #31
   11fe0:	moveq	r6, #512	; 0x200
   11fe4:	subs	r5, r6, r8
   11fe8:	sbcs	r4, r4, r9
   11fec:	bge	12020 <__assert_fail@plt+0xf34>
   11ff0:	subs	r4, lr, r8
   11ff4:	sbcs	r4, ip, r9
   11ff8:	movge	r0, #1
   11ffc:	subge	sp, fp, #24
   12000:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   12004:	str	lr, [sp]
   12008:	str	ip, [sp, #4]
   1200c:	str	r8, [sp, #8]
   12010:	str	r9, [sp, #12]
   12014:	bl	128d4 <__assert_fail@plt+0x17e8>
   12018:	sub	sp, fp, #24
   1201c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12020:	str	lr, [sp]
   12024:	str	ip, [sp, #4]
   12028:	bl	12380 <__assert_fail@plt+0x1294>
   1202c:	sub	sp, fp, #24
   12030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12034:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12038:	add	fp, sp, #24
   1203c:	sub	sp, sp, #8
   12040:	mov	r8, r0
   12044:	ldr	lr, [fp, #20]
   12048:	ldr	ip, [fp, #16]
   1204c:	cmp	lr, #0
   12050:	blt	12114 <__assert_fail@plt+0x1028>
   12054:	movw	r6, #33120	; 0x8160
   12058:	movt	r6, #2
   1205c:	ldrb	r6, [r6]
   12060:	cmp	r6, #0
   12064:	bne	12114 <__assert_fail@plt+0x1028>
   12068:	ldr	r5, [fp, #8]
   1206c:	ldr	r6, [r5, #48]	; 0x30
   12070:	ldr	r9, [r5, #52]	; 0x34
   12074:	ldr	r7, [r5, #56]	; 0x38
   12078:	mov	r5, #0
   1207c:	subs	r0, r7, #536870913	; 0x20000001
   12080:	rscs	r0, r5, r7, asr #31
   12084:	mov	r0, #0
   12088:	movwcc	r0, #1
   1208c:	rsbs	r4, r7, #0
   12090:	sbcs	r4, r5, r7, asr #31
   12094:	mov	r4, #0
   12098:	movwlt	r4, #1
   1209c:	ands	r0, r4, r0
   120a0:	asrne	r0, r7, #31
   120a4:	moveq	r7, #512	; 0x200
   120a8:	subs	r4, r7, r6
   120ac:	sbcs	r0, r0, r9
   120b0:	bge	12114 <__assert_fail@plt+0x1028>
   120b4:	subs	r7, r6, ip
   120b8:	sbc	r0, r9, lr
   120bc:	rsbs	r6, r7, #0
   120c0:	rscs	r6, r0, #0
   120c4:	movwlt	r5, #1
   120c8:	cmp	r5, #0
   120cc:	moveq	r0, r5
   120d0:	movne	r5, r7
   120d4:	mov	r6, #1
   120d8:	subs	r7, r2, r5
   120dc:	sbcs	r7, r3, r0
   120e0:	bcs	12108 <__assert_fail@plt+0x101c>
   120e4:	subs	r2, r5, r2
   120e8:	sbc	r3, r0, r3
   120ec:	mov	r0, r1
   120f0:	bl	12c18 <__assert_fail@plt+0x1b2c>
   120f4:	cmp	r0, #0
   120f8:	beq	12108 <__assert_fail@plt+0x101c>
   120fc:	mov	r1, r8
   12100:	bl	12cac <__assert_fail@plt+0x1bc0>
   12104:	mov	r6, #0
   12108:	mov	r0, r6
   1210c:	sub	sp, fp, #24
   12110:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12114:	stm	sp, {ip, lr}
   12118:	mov	r0, r8
   1211c:	bl	12d44 <__assert_fail@plt+0x1c58>
   12120:	sub	sp, fp, #24
   12124:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1212c:	add	fp, sp, #28
   12130:	sub	sp, sp, #124	; 0x7c
   12134:	sub	sp, sp, #8192	; 0x2000
   12138:	mov	sl, r1
   1213c:	orrs	r1, r2, r3
   12140:	mov	r9, #1
   12144:	beq	12258 <__assert_fail@plt+0x116c>
   12148:	mov	r7, r3
   1214c:	mov	r5, r2
   12150:	str	r0, [sp, #12]
   12154:	add	r4, sp, #120	; 0x78
   12158:	movw	r8, #33119	; 0x815f
   1215c:	movt	r8, #2
   12160:	mov	r0, sl
   12164:	mov	r1, r4
   12168:	mov	r2, #8192	; 0x2000
   1216c:	bl	15108 <__assert_fail@plt+0x401c>
   12170:	cmn	r0, #1
   12174:	beq	12264 <__assert_fail@plt+0x1178>
   12178:	cmp	r0, #0
   1217c:	beq	12258 <__assert_fail@plt+0x116c>
   12180:	ldrb	r1, [r8]
   12184:	cmp	r1, #0
   12188:	movwne	r1, #10
   1218c:	mov	r6, #0
   12190:	ldrb	r2, [r4, r6]
   12194:	cmp	r1, r2
   12198:	bne	121ac <__assert_fail@plt+0x10c0>
   1219c:	subs	r5, r5, #1
   121a0:	sbc	r7, r7, #0
   121a4:	orrs	r2, r5, r7
   121a8:	beq	121d0 <__assert_fail@plt+0x10e4>
   121ac:	add	r6, r6, #1
   121b0:	cmp	r0, r6
   121b4:	bhi	12190 <__assert_fail@plt+0x10a4>
   121b8:	mov	r0, r4
   121bc:	mov	r1, r6
   121c0:	bl	12b94 <__assert_fail@plt+0x1aa8>
   121c4:	orrs	r0, r5, r7
   121c8:	bne	12160 <__assert_fail@plt+0x1074>
   121cc:	b	12258 <__assert_fail@plt+0x116c>
   121d0:	mov	r9, #1
   121d4:	str	r9, [sp]
   121d8:	sub	r0, r0, #1
   121dc:	sub	r0, r0, r6
   121e0:	mov	r1, #0
   121e4:	rsbs	r5, r0, #0
   121e8:	sbc	r7, r1, #0
   121ec:	mov	r0, sl
   121f0:	mov	r2, r5
   121f4:	mov	r3, r7
   121f8:	bl	10f48 <lseek64@plt>
   121fc:	add	r4, r6, #1
   12200:	cmn	r1, #1
   12204:	bgt	1224c <__assert_fail@plt+0x1160>
   12208:	add	r1, sp, #16
   1220c:	mov	r0, sl
   12210:	bl	16bbc <__assert_fail@plt+0x5ad0>
   12214:	cmp	r0, #0
   12218:	bne	1222c <__assert_fail@plt+0x1140>
   1221c:	ldr	r0, [sp, #32]
   12220:	and	r0, r0, #61440	; 0xf000
   12224:	cmp	r0, #32768	; 0x8000
   12228:	bne	1224c <__assert_fail@plt+0x1160>
   1222c:	mov	r0, #1
   12230:	str	r0, [sp]
   12234:	ldr	r0, [sp, #12]
   12238:	str	r0, [sp, #4]
   1223c:	mov	r0, sl
   12240:	mov	r2, r5
   12244:	mov	r3, r7
   12248:	bl	11ec8 <__assert_fail@plt+0xddc>
   1224c:	add	r0, sp, #120	; 0x78
   12250:	mov	r1, r4
   12254:	bl	12b94 <__assert_fail@plt+0x1aa8>
   12258:	mov	r0, r9
   1225c:	sub	sp, fp, #28
   12260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12264:	bl	11014 <__errno_location@plt>
   12268:	ldr	r4, [r0]
   1226c:	mov	r9, #0
   12270:	movw	r1, #29579	; 0x738b
   12274:	movt	r1, #1
   12278:	mov	r0, #0
   1227c:	mov	r2, #5
   12280:	bl	10ef4 <dcgettext@plt>
   12284:	mov	r5, r0
   12288:	mov	r0, #4
   1228c:	ldr	r1, [sp, #12]
   12290:	bl	14b00 <__assert_fail@plt+0x3a14>
   12294:	mov	r3, r0
   12298:	mov	r0, #0
   1229c:	mov	r1, r4
   122a0:	mov	r2, r5
   122a4:	bl	10f84 <error@plt>
   122a8:	b	12258 <__assert_fail@plt+0x116c>
   122ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122b0:	add	fp, sp, #28
   122b4:	sub	sp, sp, #12
   122b8:	sub	sp, sp, #8192	; 0x2000
   122bc:	mov	sl, r1
   122c0:	orrs	r1, r2, r3
   122c4:	mov	r9, #1
   122c8:	beq	12374 <__assert_fail@plt+0x1288>
   122cc:	mov	r6, r3
   122d0:	mov	r7, r2
   122d4:	str	r0, [sp, #4]
   122d8:	mov	r4, #8192	; 0x2000
   122dc:	add	r5, sp, #8
   122e0:	subs	r0, r7, r4
   122e4:	sbcs	r0, r6, #0
   122e8:	movcc	r4, r7
   122ec:	mov	r0, sl
   122f0:	mov	r1, r5
   122f4:	mov	r2, r4
   122f8:	bl	15108 <__assert_fail@plt+0x401c>
   122fc:	cmp	r0, #0
   12300:	beq	12374 <__assert_fail@plt+0x1288>
   12304:	mov	r8, r0
   12308:	cmn	r0, #1
   1230c:	beq	12330 <__assert_fail@plt+0x1244>
   12310:	mov	r0, r5
   12314:	mov	r1, r8
   12318:	bl	12b94 <__assert_fail@plt+0x1aa8>
   1231c:	subs	r7, r7, r8
   12320:	sbc	r6, r6, #0
   12324:	orrs	r0, r7, r6
   12328:	bne	122e0 <__assert_fail@plt+0x11f4>
   1232c:	b	12374 <__assert_fail@plt+0x1288>
   12330:	bl	11014 <__errno_location@plt>
   12334:	ldr	r4, [r0]
   12338:	mov	r9, #0
   1233c:	movw	r1, #29579	; 0x738b
   12340:	movt	r1, #1
   12344:	mov	r0, #0
   12348:	mov	r2, #5
   1234c:	bl	10ef4 <dcgettext@plt>
   12350:	mov	r5, r0
   12354:	mov	r0, #4
   12358:	ldr	r1, [sp, #4]
   1235c:	bl	14b00 <__assert_fail@plt+0x3a14>
   12360:	mov	r3, r0
   12364:	mov	r0, #0
   12368:	mov	r1, r4
   1236c:	mov	r2, r5
   12370:	bl	10f84 <error@plt>
   12374:	mov	r0, r9
   12378:	sub	sp, fp, #28
   1237c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12384:	add	fp, sp, #28
   12388:	sub	sp, sp, #52	; 0x34
   1238c:	str	r3, [fp, #-32]	; 0xffffffe0
   12390:	mov	sl, r2
   12394:	mov	r4, r1
   12398:	str	r0, [sp, #24]
   1239c:	movw	r0, #8208	; 0x2010
   123a0:	bl	15660 <__assert_fail@plt+0x4574>
   123a4:	mov	r5, r0
   123a8:	movw	r0, #8200	; 0x2008
   123ac:	mov	r1, #0
   123b0:	str	r1, [r5, r0]
   123b4:	movw	r0, #8196	; 0x2004
   123b8:	str	r1, [r5, r0]
   123bc:	movw	r2, #8204	; 0x200c
   123c0:	mov	r0, #0
   123c4:	str	r0, [sp, #36]	; 0x24
   123c8:	str	r1, [r5, r2]
   123cc:	movw	r0, #8208	; 0x2010
   123d0:	bl	15660 <__assert_fail@plt+0x4574>
   123d4:	mov	r6, r0
   123d8:	str	r4, [fp, #-36]	; 0xffffffdc
   123dc:	mov	r0, r4
   123e0:	mov	r1, r6
   123e4:	mov	r2, #8192	; 0x2000
   123e8:	bl	15108 <__assert_fail@plt+0x401c>
   123ec:	mov	r4, r0
   123f0:	add	r0, r0, #1
   123f4:	ldr	r9, [fp, #12]
   123f8:	ldr	r7, [fp, #8]
   123fc:	cmp	r0, #2
   12400:	bcs	1240c <__assert_fail@plt+0x1320>
   12404:	mov	r8, r5
   12408:	b	1264c <__assert_fail@plt+0x1560>
   1240c:	movw	r2, #33119	; 0x815f
   12410:	movt	r2, #2
   12414:	mov	r8, r5
   12418:	mov	r0, #0
   1241c:	str	r0, [sp, #36]	; 0x24
   12420:	str	r8, [sp, #28]
   12424:	str	r6, [sp, #20]
   12428:	mov	r0, r9
   1242c:	mov	r8, r4
   12430:	mov	r9, r4
   12434:	str	r7, [sp, #16]
   12438:	mov	r4, r7
   1243c:	str	r0, [sp, #32]
   12440:	mov	r7, r0
   12444:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12448:	orrs	r0, sl, r0
   1244c:	bne	12490 <__assert_fail@plt+0x13a4>
   12450:	mov	r0, r6
   12454:	mov	r1, r9
   12458:	bl	12b94 <__assert_fail@plt+0x1aa8>
   1245c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12460:	mov	r1, r6
   12464:	mov	r2, #8192	; 0x2000
   12468:	bl	15108 <__assert_fail@plt+0x401c>
   1246c:	movw	r2, #33119	; 0x815f
   12470:	movt	r2, #2
   12474:	add	r1, r0, #1
   12478:	adds	r4, r4, r9
   1247c:	adc	r7, r7, #0
   12480:	cmp	r1, #2
   12484:	mov	r9, r0
   12488:	bcs	12444 <__assert_fail@plt+0x1358>
   1248c:	b	1263c <__assert_fail@plt+0x1550>
   12490:	movw	r0, #8204	; 0x200c
   12494:	mov	r1, #0
   12498:	ldr	r3, [sp, #20]
   1249c:	str	r1, [r3, r0]
   124a0:	mov	r4, r3
   124a4:	movw	r0, #8200	; 0x2008
   124a8:	str	r1, [r4, r0]!
   124ac:	mov	r1, r3
   124b0:	movw	r0, #8196	; 0x2004
   124b4:	str	r8, [r1, r0]!
   124b8:	str	r1, [sp, #12]
   124bc:	ldrb	r0, [r2]
   124c0:	cmp	r0, #0
   124c4:	movwne	r0, #10
   124c8:	strb	r0, [r3, r8]
   124cc:	add	r7, r3, r8
   124d0:	ldrb	r1, [r2]
   124d4:	cmp	r1, #0
   124d8:	movwne	r1, #10
   124dc:	mov	r0, r6
   124e0:	mov	r9, r2
   124e4:	b	12504 <__assert_fail@plt+0x1418>
   124e8:	ldr	r1, [r4]
   124ec:	add	r1, r1, #1
   124f0:	str	r1, [r4]
   124f4:	ldrb	r1, [r9]
   124f8:	add	r0, r0, #1
   124fc:	cmp	r1, #0
   12500:	movwne	r1, #10
   12504:	bl	10f18 <rawmemchr@plt>
   12508:	cmp	r0, r7
   1250c:	bcc	124e8 <__assert_fail@plt+0x13fc>
   12510:	ldr	r0, [r4]
   12514:	ldr	r3, [sp, #36]	; 0x24
   12518:	add	r3, r0, r3
   1251c:	ldr	r8, [sp, #28]
   12520:	mov	r7, r8
   12524:	movw	r0, #8196	; 0x2004
   12528:	ldr	ip, [r7, r0]!
   1252c:	ldr	r9, [sp, #12]
   12530:	ldr	r2, [r9]
   12534:	add	r1, ip, r2
   12538:	mov	r0, #0
   1253c:	cmp	r0, r1, lsr #13
   12540:	bne	12580 <__assert_fail@plt+0x1494>
   12544:	str	r3, [sp, #36]	; 0x24
   12548:	add	r0, r8, ip
   1254c:	mov	r1, r6
   12550:	bl	10ec4 <memcpy@plt>
   12554:	ldr	r0, [r9]
   12558:	ldr	r1, [r7]
   1255c:	add	r0, r1, r0
   12560:	str	r0, [r7]
   12564:	mov	r0, r8
   12568:	movw	r1, #8200	; 0x2008
   1256c:	ldr	r1, [r0, r1]!
   12570:	ldr	r2, [r4]
   12574:	add	r1, r1, r2
   12578:	str	r1, [r0]
   1257c:	b	12608 <__assert_fail@plt+0x151c>
   12580:	movw	r1, #8204	; 0x200c
   12584:	ldr	r0, [sp, #20]
   12588:	str	r0, [r8, r1]
   1258c:	mov	r8, r0
   12590:	mov	r4, r5
   12594:	movw	r0, #8200	; 0x2008
   12598:	ldr	r0, [r4, r0]!
   1259c:	sub	r0, r3, r0
   125a0:	subs	r0, sl, r0
   125a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   125a8:	sbcs	r0, r0, #0
   125ac:	mov	r6, r3
   125b0:	bcs	125f8 <__assert_fail@plt+0x150c>
   125b4:	movw	r0, #8196	; 0x2004
   125b8:	ldr	r9, [r5, r0]
   125bc:	mov	r0, r5
   125c0:	mov	r1, r9
   125c4:	bl	12b94 <__assert_fail@plt+0x1aa8>
   125c8:	ldr	r7, [sp, #16]
   125cc:	adds	r7, r7, r9
   125d0:	ldr	r9, [sp, #32]
   125d4:	adc	r9, r9, #0
   125d8:	movw	r0, #8204	; 0x200c
   125dc:	ldr	r0, [r5, r0]
   125e0:	ldr	r1, [r4]
   125e4:	sub	r6, r6, r1
   125e8:	str	r6, [sp, #36]	; 0x24
   125ec:	mov	r6, r5
   125f0:	mov	r5, r0
   125f4:	b	12610 <__assert_fail@plt+0x1524>
   125f8:	str	r6, [sp, #36]	; 0x24
   125fc:	movw	r0, #8208	; 0x2010
   12600:	bl	15660 <__assert_fail@plt+0x4574>
   12604:	mov	r6, r0
   12608:	ldr	r7, [sp, #16]
   1260c:	ldr	r9, [sp, #32]
   12610:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12614:	mov	r1, r6
   12618:	mov	r2, #8192	; 0x2000
   1261c:	bl	15108 <__assert_fail@plt+0x401c>
   12620:	mov	r4, r0
   12624:	add	r0, r0, #1
   12628:	cmp	r0, #1
   1262c:	movw	r2, #33119	; 0x815f
   12630:	movt	r2, #2
   12634:	bhi	12420 <__assert_fail@plt+0x1334>
   12638:	b	1264c <__assert_fail@plt+0x1560>
   1263c:	mov	r9, r7
   12640:	mov	r7, r4
   12644:	mov	r4, r0
   12648:	ldr	r8, [sp, #28]
   1264c:	mov	r0, r6
   12650:	bl	13304 <__assert_fail@plt+0x2218>
   12654:	cmn	r4, #1
   12658:	beq	126a8 <__assert_fail@plt+0x15bc>
   1265c:	movw	r0, #8196	; 0x2004
   12660:	ldr	r0, [r8, r0]
   12664:	cmp	r0, #0
   12668:	beq	12690 <__assert_fail@plt+0x15a4>
   1266c:	add	r0, r8, r0
   12670:	ldrb	r0, [r0, #-1]
   12674:	movw	r1, #33119	; 0x815f
   12678:	movt	r1, #2
   1267c:	ldrb	r1, [r1]
   12680:	cmp	r1, #0
   12684:	movwne	r1, #10
   12688:	cmp	r1, r0
   1268c:	bne	126f8 <__assert_fail@plt+0x160c>
   12690:	mov	r1, sl
   12694:	mov	sl, r9
   12698:	mov	r9, r7
   1269c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   126a0:	ldr	r3, [sp, #36]	; 0x24
   126a4:	b	12720 <__assert_fail@plt+0x1634>
   126a8:	bl	11014 <__errno_location@plt>
   126ac:	ldr	r4, [r0]
   126b0:	mov	sl, #0
   126b4:	movw	r1, #29579	; 0x738b
   126b8:	movt	r1, #1
   126bc:	mov	r0, #0
   126c0:	mov	r2, #5
   126c4:	bl	10ef4 <dcgettext@plt>
   126c8:	mov	r6, r0
   126cc:	mov	r0, #4
   126d0:	ldr	r1, [sp, #24]
   126d4:	bl	14b00 <__assert_fail@plt+0x3a14>
   126d8:	mov	r3, r0
   126dc:	mov	r0, #0
   126e0:	mov	r1, r4
   126e4:	mov	r2, r6
   126e8:	bl	10f84 <error@plt>
   126ec:	cmp	r5, #0
   126f0:	bne	12868 <__assert_fail@plt+0x177c>
   126f4:	b	12884 <__assert_fail@plt+0x1798>
   126f8:	mov	r1, sl
   126fc:	mov	sl, r9
   12700:	mov	r9, r7
   12704:	movw	r0, #8200	; 0x2008
   12708:	ldr	r0, [r8, r0]!
   1270c:	add	r0, r0, #1
   12710:	str	r0, [r8]
   12714:	ldr	r3, [sp, #36]	; 0x24
   12718:	add	r3, r3, #1
   1271c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12720:	movw	r0, #8200	; 0x2008
   12724:	mov	r7, r5
   12728:	ldr	r0, [r7, r0]!
   1272c:	sub	r0, r3, r0
   12730:	subs	r0, r1, r0
   12734:	sbcs	r0, r2, #0
   12738:	str	r1, [sp, #40]	; 0x28
   1273c:	mov	r8, r5
   12740:	bcs	127a4 <__assert_fail@plt+0x16b8>
   12744:	movw	r0, #8196	; 0x2004
   12748:	ldr	r4, [r8, r0]
   1274c:	mov	r0, r8
   12750:	mov	r1, r4
   12754:	mov	r6, r3
   12758:	bl	12b94 <__assert_fail@plt+0x1aa8>
   1275c:	movw	r0, #8200	; 0x2008
   12760:	mov	r3, r6
   12764:	movw	r1, #8204	; 0x200c
   12768:	ldr	r8, [r8, r1]
   1276c:	mov	r6, r8
   12770:	ldr	r0, [r6, r0]!
   12774:	ldr	r1, [r7]
   12778:	sub	r3, r3, r1
   1277c:	sub	r0, r3, r0
   12780:	adds	r9, r9, r4
   12784:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12788:	adc	sl, sl, #0
   1278c:	ldr	r1, [sp, #40]	; 0x28
   12790:	subs	r0, r1, r0
   12794:	sbcs	r0, r2, #0
   12798:	mov	r7, r6
   1279c:	bcc	12744 <__assert_fail@plt+0x1658>
   127a0:	b	127a8 <__assert_fail@plt+0x16bc>
   127a4:	mov	r6, r7
   127a8:	str	sl, [sp, #32]
   127ac:	mov	sl, #1
   127b0:	ldr	r1, [sp, #40]	; 0x28
   127b4:	subs	r0, r1, r3
   127b8:	sbcs	r0, r2, #0
   127bc:	bcs	1281c <__assert_fail@plt+0x1730>
   127c0:	subs	r0, r3, r1
   127c4:	beq	12830 <__assert_fail@plt+0x1744>
   127c8:	sub	r4, r1, r3
   127cc:	movw	r0, #8196	; 0x2004
   127d0:	ldr	r0, [r8, r0]
   127d4:	add	r7, r8, r0
   127d8:	movw	sl, #33119	; 0x815f
   127dc:	movt	sl, #2
   127e0:	mov	r0, r8
   127e4:	sub	r2, r7, r0
   127e8:	ldrb	r1, [sl]
   127ec:	cmp	r1, #0
   127f0:	movwne	r1, #10
   127f4:	bl	11068 <memchr@plt>
   127f8:	cmp	r0, #0
   127fc:	beq	12838 <__assert_fail@plt+0x174c>
   12800:	ldr	r1, [r6]
   12804:	add	r1, r1, #1
   12808:	str	r1, [r6]
   1280c:	adds	r4, r4, #1
   12810:	add	r0, r0, #1
   12814:	bne	127e4 <__assert_fail@plt+0x16f8>
   12818:	b	1283c <__assert_fail@plt+0x1750>
   1281c:	mov	r7, r9
   12820:	ldr	r9, [sp, #32]
   12824:	cmp	r5, #0
   12828:	bne	12868 <__assert_fail@plt+0x177c>
   1282c:	b	12884 <__assert_fail@plt+0x1798>
   12830:	mov	r0, r8
   12834:	b	1283c <__assert_fail@plt+0x1750>
   12838:	mov	r0, #0
   1283c:	sub	r4, r0, r8
   12840:	mov	r0, r8
   12844:	mov	r1, r4
   12848:	bl	12b94 <__assert_fail@plt+0x1aa8>
   1284c:	mov	r7, r9
   12850:	adds	r7, r9, r4
   12854:	ldr	r9, [sp, #32]
   12858:	adc	r9, r9, r4, asr #31
   1285c:	mov	sl, #1
   12860:	cmp	r5, #0
   12864:	beq	12884 <__assert_fail@plt+0x1798>
   12868:	movw	r4, #8204	; 0x200c
   1286c:	ldr	r6, [r5, r4]
   12870:	mov	r0, r5
   12874:	bl	13304 <__assert_fail@plt+0x2218>
   12878:	cmp	r6, #0
   1287c:	mov	r5, r6
   12880:	bne	1286c <__assert_fail@plt+0x1780>
   12884:	ldr	r0, [fp, #12]
   12888:	cmp	r0, #0
   1288c:	movlt	r0, sl
   12890:	sublt	sp, fp, #28
   12894:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12898:	mvn	r4, #0
   1289c:	mov	r5, #0
   128a0:	str	r5, [sp]
   128a4:	ldr	r0, [sp, #24]
   128a8:	str	r0, [sp, #4]
   128ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   128b0:	mov	r2, r7
   128b4:	mov	r3, r9
   128b8:	bl	11ec8 <__assert_fail@plt+0xddc>
   128bc:	subs	r0, r4, r0
   128c0:	sbcs	r0, r4, r1
   128c4:	movwlt	r5, #1
   128c8:	and	r0, sl, r5
   128cc:	sub	sp, fp, #28
   128d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128d8:	add	fp, sp, #28
   128dc:	sub	sp, sp, #28
   128e0:	sub	sp, sp, #8192	; 0x2000
   128e4:	mov	r8, r3
   128e8:	mov	r4, r2
   128ec:	mov	r7, r1
   128f0:	mov	r9, #0
   128f4:	str	r9, [sp]
   128f8:	str	r0, [sp, #12]
   128fc:	str	r0, [sp, #4]
   12900:	ldr	r3, [fp, #12]
   12904:	ldr	r0, [fp, #20]
   12908:	ldr	r2, [fp, #8]
   1290c:	ldr	r1, [fp, #16]
   12910:	subs	r2, r1, r2
   12914:	sbc	r3, r0, r3
   12918:	asr	r3, r3, #31
   1291c:	add	r3, r2, r3, lsr #19
   12920:	bfc	r3, #0, #13
   12924:	subs	r6, r2, r3
   12928:	movweq	r6, #8192	; 0x2000
   1292c:	subs	r2, r1, r6
   12930:	sbc	r3, r0, #0
   12934:	mov	r0, r7
   12938:	str	r2, [sp, #20]
   1293c:	str	r3, [sp, #16]
   12940:	bl	11ec8 <__assert_fail@plt+0xddc>
   12944:	cmp	r1, #0
   12948:	blt	12b88 <__assert_fail@plt+0x1a9c>
   1294c:	add	r5, sp, #24
   12950:	mov	r0, r7
   12954:	mov	r1, r5
   12958:	mov	r2, r6
   1295c:	bl	15108 <__assert_fail@plt+0x401c>
   12960:	cmn	r0, #1
   12964:	beq	12a98 <__assert_fail@plt+0x19ac>
   12968:	mov	sl, r0
   1296c:	str	r7, [sp, #8]
   12970:	orrs	r7, r4, r8
   12974:	cmpne	sl, #0
   12978:	beq	129ac <__assert_fail@plt+0x18c0>
   1297c:	subs	r0, r4, #1
   12980:	sbc	r1, r8, #0
   12984:	add	r2, r5, sl
   12988:	ldrb	r2, [r2, #-1]
   1298c:	movw	r3, #33119	; 0x815f
   12990:	movt	r3, #2
   12994:	ldrb	r3, [r3]
   12998:	cmp	r3, #0
   1299c:	movwne	r3, #10
   129a0:	cmp	r3, r2
   129a4:	movne	r8, r1
   129a8:	movne	r4, r0
   129ac:	movw	r0, #33119	; 0x815f
   129b0:	movt	r0, #2
   129b4:	ldrb	r6, [r0]
   129b8:	cmp	r6, #0
   129bc:	movwne	r6, #10
   129c0:	cmp	sl, #0
   129c4:	beq	12a10 <__assert_fail@plt+0x1924>
   129c8:	cmp	r7, #0
   129cc:	beq	129f0 <__assert_fail@plt+0x1904>
   129d0:	mov	r0, r5
   129d4:	mov	r1, r6
   129d8:	mov	r2, sl
   129dc:	bl	11008 <memrchr@plt>
   129e0:	cmp	r0, #0
   129e4:	beq	12a10 <__assert_fail@plt+0x1924>
   129e8:	sub	sl, r0, r5
   129ec:	b	129f4 <__assert_fail@plt+0x1908>
   129f0:	sub	sl, sl, #1
   129f4:	subs	r0, r4, #1
   129f8:	sbc	r1, r8, #0
   129fc:	orrs	r2, r4, r8
   12a00:	mov	r4, r0
   12a04:	mov	r8, r1
   12a08:	bne	129c0 <__assert_fail@plt+0x18d4>
   12a0c:	b	12ae0 <__assert_fail@plt+0x19f4>
   12a10:	ldr	r2, [sp, #20]
   12a14:	ldr	r0, [fp, #8]
   12a18:	eor	r0, r2, r0
   12a1c:	ldr	r3, [sp, #16]
   12a20:	ldr	r1, [fp, #12]
   12a24:	eor	r1, r3, r1
   12a28:	orrs	r0, r0, r1
   12a2c:	mov	r9, #1
   12a30:	beq	12b88 <__assert_fail@plt+0x1a9c>
   12a34:	mov	r9, #0
   12a38:	str	r9, [sp]
   12a3c:	ldr	r0, [sp, #12]
   12a40:	str	r0, [sp, #4]
   12a44:	subs	r2, r2, #8192	; 0x2000
   12a48:	sbc	r3, r3, #0
   12a4c:	ldr	r6, [sp, #8]
   12a50:	mov	r0, r6
   12a54:	str	r2, [sp, #20]
   12a58:	str	r3, [sp, #16]
   12a5c:	bl	11ec8 <__assert_fail@plt+0xddc>
   12a60:	cmp	r1, #0
   12a64:	blt	12b88 <__assert_fail@plt+0x1a9c>
   12a68:	mov	r0, r6
   12a6c:	mov	r1, r5
   12a70:	mov	r2, #8192	; 0x2000
   12a74:	bl	15108 <__assert_fail@plt+0x401c>
   12a78:	cmp	r0, #0
   12a7c:	mov	r9, #1
   12a80:	beq	12b88 <__assert_fail@plt+0x1a9c>
   12a84:	mov	sl, r0
   12a88:	cmn	r0, #1
   12a8c:	movw	r0, #33119	; 0x815f
   12a90:	movt	r0, #2
   12a94:	bne	129b4 <__assert_fail@plt+0x18c8>
   12a98:	bl	11014 <__errno_location@plt>
   12a9c:	ldr	r4, [r0]
   12aa0:	mov	r9, #0
   12aa4:	movw	r1, #29579	; 0x738b
   12aa8:	movt	r1, #1
   12aac:	mov	r0, #0
   12ab0:	mov	r2, #5
   12ab4:	bl	10ef4 <dcgettext@plt>
   12ab8:	mov	r5, r0
   12abc:	mov	r0, #4
   12ac0:	ldr	r1, [sp, #12]
   12ac4:	bl	14b00 <__assert_fail@plt+0x3a14>
   12ac8:	mov	r3, r0
   12acc:	mov	r0, #0
   12ad0:	mov	r1, r4
   12ad4:	mov	r2, r5
   12ad8:	bl	10f84 <error@plt>
   12adc:	b	12b88 <__assert_fail@plt+0x1a9c>
   12ae0:	ldr	r5, [sp, #20]
   12ae4:	ldr	r8, [fp, #8]
   12ae8:	subs	r0, r8, r5
   12aec:	ldr	r6, [sp, #16]
   12af0:	ldr	r7, [fp, #12]
   12af4:	sbcs	r0, r7, r6
   12af8:	ldr	r4, [sp, #8]
   12afc:	bge	12b4c <__assert_fail@plt+0x1a60>
   12b00:	mov	r9, #0
   12b04:	str	r9, [sp]
   12b08:	ldr	r0, [sp, #12]
   12b0c:	str	r0, [sp, #4]
   12b10:	mov	r0, r4
   12b14:	mov	r2, r8
   12b18:	mov	r3, r7
   12b1c:	bl	11ec8 <__assert_fail@plt+0xddc>
   12b20:	cmp	r1, #0
   12b24:	blt	12b88 <__assert_fail@plt+0x1a9c>
   12b28:	subs	r2, r5, r8
   12b2c:	sbc	r3, r6, r7
   12b30:	mov	r0, r4
   12b34:	bl	12c18 <__assert_fail@plt+0x1b2c>
   12b38:	cmp	r0, #0
   12b3c:	beq	12b4c <__assert_fail@plt+0x1a60>
   12b40:	ldr	r1, [sp, #12]
   12b44:	bl	12cac <__assert_fail@plt+0x1bc0>
   12b48:	b	12b88 <__assert_fail@plt+0x1a9c>
   12b4c:	add	r1, sl, #1
   12b50:	add	r0, sp, #24
   12b54:	bl	12b94 <__assert_fail@plt+0x1aa8>
   12b58:	mov	r9, #0
   12b5c:	str	r9, [sp]
   12b60:	ldr	r0, [sp, #12]
   12b64:	str	r0, [sp, #4]
   12b68:	adds	r0, r5, sl
   12b6c:	adc	r1, r6, #0
   12b70:	adds	r2, r0, #1
   12b74:	adc	r3, r1, #0
   12b78:	mov	r0, r4
   12b7c:	bl	11ec8 <__assert_fail@plt+0xddc>
   12b80:	cmn	r1, #1
   12b84:	movwgt	r9, #1
   12b88:	mov	r0, r9
   12b8c:	sub	sp, fp, #28
   12b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b94:	push	{r4, r5, fp, lr}
   12b98:	add	fp, sp, #8
   12b9c:	cmp	r1, #0
   12ba0:	popeq	{r4, r5, fp, pc}
   12ba4:	mov	r4, r1
   12ba8:	movw	r5, #33108	; 0x8154
   12bac:	movt	r5, #2
   12bb0:	ldr	r3, [r5]
   12bb4:	mov	r1, #1
   12bb8:	mov	r2, r4
   12bbc:	bl	10edc <fwrite_unlocked@plt>
   12bc0:	cmp	r0, r4
   12bc4:	bcc	12bcc <__assert_fail@plt+0x1ae0>
   12bc8:	pop	{r4, r5, fp, pc}
   12bcc:	ldr	r0, [r5]
   12bd0:	bl	110b0 <clearerr_unlocked@plt>
   12bd4:	bl	11014 <__errno_location@plt>
   12bd8:	ldr	r4, [r0]
   12bdc:	movw	r1, #29596	; 0x739c
   12be0:	movt	r1, #1
   12be4:	mov	r0, #0
   12be8:	mov	r2, #5
   12bec:	bl	10ef4 <dcgettext@plt>
   12bf0:	mov	r5, r0
   12bf4:	movw	r1, #29613	; 0x73ad
   12bf8:	movt	r1, #1
   12bfc:	mov	r0, #4
   12c00:	bl	14b00 <__assert_fail@plt+0x3a14>
   12c04:	mov	r3, r0
   12c08:	mov	r0, #1
   12c0c:	mov	r1, r4
   12c10:	mov	r2, r5
   12c14:	bl	10f84 <error@plt>
   12c18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c1c:	add	fp, sp, #24
   12c20:	sub	sp, sp, #8192	; 0x2000
   12c24:	mov	r7, r0
   12c28:	orrs	r0, r2, r3
   12c2c:	mov	r8, #0
   12c30:	beq	12ca0 <__assert_fail@plt+0x1bb4>
   12c34:	mov	r5, r3
   12c38:	mov	r6, r2
   12c3c:	mov	r4, sp
   12c40:	subs	r0, r6, #8192	; 0x2000
   12c44:	sbcs	r0, r5, #0
   12c48:	mov	r2, r6
   12c4c:	movcs	r2, #8192	; 0x2000
   12c50:	mov	r0, r7
   12c54:	mov	r1, r4
   12c58:	bl	15108 <__assert_fail@plt+0x401c>
   12c5c:	cmn	r0, #1
   12c60:	beq	12c94 <__assert_fail@plt+0x1ba8>
   12c64:	mov	r1, r0
   12c68:	subs	r6, r6, r0
   12c6c:	sbc	r5, r5, #0
   12c70:	cmp	r0, #0
   12c74:	bne	12c80 <__assert_fail@plt+0x1b94>
   12c78:	orrs	r0, r6, r5
   12c7c:	bne	12c9c <__assert_fail@plt+0x1bb0>
   12c80:	mov	r0, r4
   12c84:	bl	12b94 <__assert_fail@plt+0x1aa8>
   12c88:	orrs	r0, r6, r5
   12c8c:	bne	12c40 <__assert_fail@plt+0x1b54>
   12c90:	b	12ca0 <__assert_fail@plt+0x1bb4>
   12c94:	mov	r8, #1
   12c98:	b	12ca0 <__assert_fail@plt+0x1bb4>
   12c9c:	mov	r8, #2
   12ca0:	mov	r0, r8
   12ca4:	sub	sp, fp, #24
   12ca8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cac:	push	{r4, r5, r6, sl, fp, lr}
   12cb0:	add	fp, sp, #16
   12cb4:	mov	r4, r1
   12cb8:	cmp	r0, #2
   12cbc:	beq	12cf8 <__assert_fail@plt+0x1c0c>
   12cc0:	cmp	r0, #1
   12cc4:	bne	12d40 <__assert_fail@plt+0x1c54>
   12cc8:	bl	11014 <__errno_location@plt>
   12ccc:	ldr	r5, [r0]
   12cd0:	movw	r1, #29579	; 0x738b
   12cd4:	movt	r1, #1
   12cd8:	mov	r0, #0
   12cdc:	mov	r2, #5
   12ce0:	bl	10ef4 <dcgettext@plt>
   12ce4:	mov	r6, r0
   12ce8:	mov	r0, #4
   12cec:	mov	r1, r4
   12cf0:	bl	14b00 <__assert_fail@plt+0x3a14>
   12cf4:	b	12d28 <__assert_fail@plt+0x1c3c>
   12cf8:	bl	11014 <__errno_location@plt>
   12cfc:	ldr	r5, [r0]
   12d00:	movw	r1, #29629	; 0x73bd
   12d04:	movt	r1, #1
   12d08:	mov	r0, #0
   12d0c:	mov	r2, #5
   12d10:	bl	10ef4 <dcgettext@plt>
   12d14:	mov	r6, r0
   12d18:	mov	r0, #0
   12d1c:	mov	r1, #3
   12d20:	mov	r2, r4
   12d24:	bl	14bb4 <__assert_fail@plt+0x3ac8>
   12d28:	mov	r3, r0
   12d2c:	mov	r0, #0
   12d30:	mov	r1, r5
   12d34:	mov	r2, r6
   12d38:	pop	{r4, r5, r6, sl, fp, lr}
   12d3c:	b	10f84 <error@plt>
   12d40:	bl	110d4 <abort@plt>
   12d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d48:	add	fp, sp, #28
   12d4c:	sub	sp, sp, #84	; 0x54
   12d50:	mov	r9, r2
   12d54:	str	r1, [sp, #48]	; 0x30
   12d58:	str	r0, [sp, #20]
   12d5c:	adds	r0, r2, #8192	; 0x2000
   12d60:	adcs	r0, r3, #0
   12d64:	bne	131bc <__assert_fail@plt+0x20d0>
   12d68:	ldr	r6, [fp, #12]
   12d6c:	ldr	r0, [fp, #8]
   12d70:	str	r0, [sp, #56]	; 0x38
   12d74:	cmp	r9, #1048576	; 0x100000
   12d78:	bhi	12e90 <__assert_fail@plt+0x1da4>
   12d7c:	add	r8, r9, #8192	; 0x2000
   12d80:	mov	r0, #2
   12d84:	mov	r1, r8
   12d88:	bl	156fc <__assert_fail@plt+0x4610>
   12d8c:	str	r0, [fp, #-52]	; 0xffffffcc
   12d90:	str	r0, [sp, #44]	; 0x2c
   12d94:	add	r0, r0, r8
   12d98:	str	r0, [fp, #-48]	; 0xffffffd0
   12d9c:	mov	r4, #0
   12da0:	str	r6, [sp, #52]	; 0x34
   12da4:	mov	r7, #1
   12da8:	and	r0, r4, #1
   12dac:	sub	r1, fp, #52	; 0x34
   12db0:	ldr	r6, [r1, r0, lsl #2]
   12db4:	ldr	r0, [sp, #48]	; 0x30
   12db8:	mov	r1, r6
   12dbc:	mov	r2, r8
   12dc0:	bl	1332c <__assert_fail@plt+0x2240>
   12dc4:	mov	sl, r0
   12dc8:	cmp	r0, r8
   12dcc:	mov	r0, #0
   12dd0:	mov	r5, #0
   12dd4:	bcs	12e04 <__assert_fail@plt+0x1d18>
   12dd8:	bl	11014 <__errno_location@plt>
   12ddc:	ldr	r5, [r0]
   12de0:	cmp	r5, #0
   12de4:	bne	13058 <__assert_fail@plt+0x1f6c>
   12de8:	mov	r5, #1
   12dec:	mov	r0, #0
   12df0:	cmp	sl, r9
   12df4:	bhi	12e04 <__assert_fail@plt+0x1d18>
   12df8:	sub	r0, r9, sl
   12dfc:	tst	r7, #1
   12e00:	movwne	r0, #0
   12e04:	tst	r7, #1
   12e08:	bne	12e44 <__assert_fail@plt+0x1d58>
   12e0c:	sub	r7, r9, r0
   12e10:	mov	r0, #1
   12e14:	bic	r0, r0, r4
   12e18:	sub	r1, fp, #52	; 0x34
   12e1c:	ldr	r0, [r1, r0, lsl #2]
   12e20:	add	r0, r0, #8192	; 0x2000
   12e24:	mov	r1, r7
   12e28:	bl	12b94 <__assert_fail@plt+0x1aa8>
   12e2c:	ldr	r0, [sp, #56]	; 0x38
   12e30:	adds	r0, r0, r7
   12e34:	str	r0, [sp, #56]	; 0x38
   12e38:	ldr	r0, [sp, #52]	; 0x34
   12e3c:	adc	r0, r0, #0
   12e40:	str	r0, [sp, #52]	; 0x34
   12e44:	cmp	sl, r9
   12e48:	bls	12e74 <__assert_fail@plt+0x1d88>
   12e4c:	sub	r7, sl, r9
   12e50:	mov	r0, r6
   12e54:	mov	r1, r7
   12e58:	bl	12b94 <__assert_fail@plt+0x1aa8>
   12e5c:	ldr	r0, [sp, #56]	; 0x38
   12e60:	adds	r0, r0, r7
   12e64:	str	r0, [sp, #56]	; 0x38
   12e68:	ldr	r0, [sp, #52]	; 0x34
   12e6c:	adc	r0, r0, #0
   12e70:	str	r0, [sp, #52]	; 0x34
   12e74:	eor	r4, r4, #1
   12e78:	mov	r7, #0
   12e7c:	cmp	r5, #0
   12e80:	beq	12da8 <__assert_fail@plt+0x1cbc>
   12e84:	mov	r8, #1
   12e88:	ldr	r0, [sp, #44]	; 0x2c
   12e8c:	b	13168 <__assert_fail@plt+0x207c>
   12e90:	mov	r0, r9
   12e94:	bfc	r0, #13, #19
   12e98:	str	r0, [sp, #12]
   12e9c:	rsb	r0, r0, #8192	; 0x2000
   12ea0:	str	r0, [sp, #16]
   12ea4:	add	r0, r0, r9
   12ea8:	mov	r5, #1
   12eac:	add	r1, r5, r0, lsr #13
   12eb0:	cmp	r1, #16
   12eb4:	mov	r2, r1
   12eb8:	movcs	r2, #16
   12ebc:	str	r2, [sp, #28]
   12ec0:	lsr	r0, r0, #13
   12ec4:	str	r0, [sp, #36]	; 0x24
   12ec8:	str	r1, [sp, #40]	; 0x28
   12ecc:	lsr	r0, r1, #1
   12ed0:	str	r0, [sp, #24]
   12ed4:	mov	r1, #0
   12ed8:	str	r6, [sp, #52]	; 0x34
   12edc:	mov	r0, #0
   12ee0:	str	r0, [sp, #32]
   12ee4:	mov	sl, #0
   12ee8:	mov	r6, #0
   12eec:	mov	r9, #0
   12ef0:	cmp	r1, r6
   12ef4:	bne	12f30 <__assert_fail@plt+0x1e44>
   12ef8:	cmp	r1, #0
   12efc:	ldr	r4, [sp, #28]
   12f00:	beq	12f14 <__assert_fail@plt+0x1e28>
   12f04:	ldr	r0, [sp, #24]
   12f08:	cmp	r1, r0
   12f0c:	ldr	r4, [sp, #40]	; 0x28
   12f10:	lslls	r4, r1, #1
   12f14:	mov	r0, sl
   12f18:	mov	r1, r4
   12f1c:	mov	r2, #4
   12f20:	bl	15620 <__assert_fail@plt+0x4534>
   12f24:	mov	sl, r0
   12f28:	str	r4, [sp, #44]	; 0x2c
   12f2c:	b	12f34 <__assert_fail@plt+0x1e48>
   12f30:	str	r1, [sp, #44]	; 0x2c
   12f34:	mov	r7, r5
   12f38:	tst	r9, #1
   12f3c:	bne	12f54 <__assert_fail@plt+0x1e68>
   12f40:	mov	r0, #8192	; 0x2000
   12f44:	bl	15660 <__assert_fail@plt+0x4574>
   12f48:	str	r0, [sl, r6, lsl #2]
   12f4c:	add	r0, r6, #1
   12f50:	str	r0, [sp, #32]
   12f54:	mov	r5, sl
   12f58:	ldr	r1, [sl, r6, lsl #2]
   12f5c:	ldr	r0, [sp, #48]	; 0x30
   12f60:	mov	r2, #8192	; 0x2000
   12f64:	bl	1332c <__assert_fail@plt+0x2240>
   12f68:	mov	r4, r0
   12f6c:	mov	r8, #0
   12f70:	cmp	r8, r0, lsr #13
   12f74:	bne	12f8c <__assert_fail@plt+0x1ea0>
   12f78:	bl	11014 <__errno_location@plt>
   12f7c:	ldr	sl, [r0]
   12f80:	mov	r8, #1
   12f84:	cmp	sl, #0
   12f88:	bne	1309c <__assert_fail@plt+0x1fb0>
   12f8c:	ldr	r0, [sp, #36]	; 0x24
   12f90:	sub	r0, r6, r0
   12f94:	clz	r0, r0
   12f98:	lsr	r0, r0, #5
   12f9c:	orr	r9, r9, r0
   12fa0:	tst	r9, #1
   12fa4:	beq	12fd4 <__assert_fail@plt+0x1ee8>
   12fa8:	mov	sl, r5
   12fac:	ldr	r0, [r5, r7, lsl #2]
   12fb0:	mov	r1, r4
   12fb4:	bl	12b94 <__assert_fail@plt+0x1aa8>
   12fb8:	ldr	r0, [sp, #56]	; 0x38
   12fbc:	adds	r0, r0, r4
   12fc0:	str	r0, [sp, #56]	; 0x38
   12fc4:	ldr	r0, [sp, #52]	; 0x34
   12fc8:	adc	r0, r0, #0
   12fcc:	str	r0, [sp, #52]	; 0x34
   12fd0:	b	12fd8 <__assert_fail@plt+0x1eec>
   12fd4:	mov	sl, r5
   12fd8:	add	r0, r7, #1
   12fdc:	ldr	r2, [sp, #40]	; 0x28
   12fe0:	udiv	r1, r0, r2
   12fe4:	mls	r5, r1, r2, r0
   12fe8:	cmp	r8, #0
   12fec:	mov	r6, r7
   12ff0:	ldr	r1, [sp, #44]	; 0x2c
   12ff4:	beq	12ef0 <__assert_fail@plt+0x1e04>
   12ff8:	mov	r8, #1
   12ffc:	ldr	r1, [sp, #16]
   13000:	cmp	r1, #0
   13004:	beq	130dc <__assert_fail@plt+0x1ff0>
   13008:	tst	r9, #1
   1300c:	beq	130ec <__assert_fail@plt+0x2000>
   13010:	ldr	r0, [sp, #56]	; 0x38
   13014:	adds	r0, r0, r1
   13018:	str	r0, [sp, #56]	; 0x38
   1301c:	ldr	r0, [sp, #52]	; 0x34
   13020:	adc	r0, r0, #0
   13024:	str	r0, [sp, #52]	; 0x34
   13028:	ldr	r0, [sl, r7, lsl #2]
   1302c:	add	r0, r0, r4
   13030:	rsb	r4, r4, #8192	; 0x2000
   13034:	cmp	r1, r4
   13038:	mov	r9, r1
   1303c:	ldr	r6, [sp, #32]
   13040:	bcs	13134 <__assert_fail@plt+0x2048>
   13044:	mov	r1, r9
   13048:	bl	12b94 <__assert_fail@plt+0x1aa8>
   1304c:	cmp	r6, #0
   13050:	bne	13150 <__assert_fail@plt+0x2064>
   13054:	b	13164 <__assert_fail@plt+0x2078>
   13058:	movw	r1, #29579	; 0x738b
   1305c:	movt	r1, #1
   13060:	mov	r0, #0
   13064:	mov	r2, #5
   13068:	bl	10ef4 <dcgettext@plt>
   1306c:	mov	r4, r0
   13070:	mov	r0, #4
   13074:	ldr	r1, [sp, #20]
   13078:	bl	14b00 <__assert_fail@plt+0x3a14>
   1307c:	mov	r3, r0
   13080:	mov	r0, #0
   13084:	mov	r1, r5
   13088:	mov	r8, #0
   1308c:	mov	r2, r4
   13090:	bl	10f84 <error@plt>
   13094:	ldr	r0, [sp, #44]	; 0x2c
   13098:	b	13168 <__assert_fail@plt+0x207c>
   1309c:	mov	r8, #0
   130a0:	movw	r1, #29579	; 0x738b
   130a4:	movt	r1, #1
   130a8:	mov	r0, #0
   130ac:	mov	r2, #5
   130b0:	bl	10ef4 <dcgettext@plt>
   130b4:	mov	r4, r0
   130b8:	mov	r0, #4
   130bc:	ldr	r1, [sp, #20]
   130c0:	bl	14b00 <__assert_fail@plt+0x3a14>
   130c4:	mov	r3, r0
   130c8:	mov	r0, #0
   130cc:	mov	r1, sl
   130d0:	mov	r2, r4
   130d4:	bl	10f84 <error@plt>
   130d8:	mov	sl, r5
   130dc:	ldr	r6, [sp, #32]
   130e0:	cmp	r6, #0
   130e4:	bne	13150 <__assert_fail@plt+0x2064>
   130e8:	b	13164 <__assert_fail@plt+0x2078>
   130ec:	ldr	r0, [sp, #36]	; 0x24
   130f0:	cmp	r7, r0
   130f4:	ldr	r6, [sp, #32]
   130f8:	bne	13148 <__assert_fail@plt+0x205c>
   130fc:	ldr	r0, [sl, r5, lsl #2]
   13100:	ldr	r1, [sp, #12]
   13104:	sub	r4, r4, r1
   13108:	mov	r1, r4
   1310c:	bl	12b94 <__assert_fail@plt+0x1aa8>
   13110:	ldr	r0, [sp, #56]	; 0x38
   13114:	adds	r0, r0, r4
   13118:	str	r0, [sp, #56]	; 0x38
   1311c:	ldr	r0, [sp, #52]	; 0x34
   13120:	adc	r0, r0, #0
   13124:	str	r0, [sp, #52]	; 0x34
   13128:	cmp	r6, #0
   1312c:	bne	13150 <__assert_fail@plt+0x2064>
   13130:	b	13164 <__assert_fail@plt+0x2078>
   13134:	mov	r1, r4
   13138:	bl	12b94 <__assert_fail@plt+0x1aa8>
   1313c:	ldr	r0, [sl, r5, lsl #2]
   13140:	sub	r1, r9, r4
   13144:	bl	12b94 <__assert_fail@plt+0x1aa8>
   13148:	cmp	r6, #0
   1314c:	beq	13164 <__assert_fail@plt+0x2078>
   13150:	mov	r4, sl
   13154:	ldr	r0, [r4], #4
   13158:	bl	13304 <__assert_fail@plt+0x2218>
   1315c:	subs	r6, r6, #1
   13160:	bne	13154 <__assert_fail@plt+0x2068>
   13164:	mov	r0, sl
   13168:	bl	13304 <__assert_fail@plt+0x2218>
   1316c:	ldr	r0, [fp, #12]
   13170:	cmp	r0, #0
   13174:	movlt	r0, r8
   13178:	sublt	sp, fp, #28
   1317c:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13180:	mvn	r4, #0
   13184:	mov	r5, #0
   13188:	str	r5, [sp]
   1318c:	ldr	r0, [sp, #20]
   13190:	str	r0, [sp, #4]
   13194:	ldr	r0, [sp, #48]	; 0x30
   13198:	ldr	r2, [sp, #56]	; 0x38
   1319c:	ldr	r3, [sp, #52]	; 0x34
   131a0:	bl	11ec8 <__assert_fail@plt+0xddc>
   131a4:	subs	r0, r4, r0
   131a8:	sbcs	r0, r4, r1
   131ac:	movwlt	r5, #1
   131b0:	and	r0, r8, r5
   131b4:	sub	sp, fp, #28
   131b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131bc:	mov	r4, r3
   131c0:	movw	r1, #29658	; 0x73da
   131c4:	movt	r1, #1
   131c8:	mov	r0, #0
   131cc:	mov	r2, #5
   131d0:	bl	10ef4 <dcgettext@plt>
   131d4:	mov	r6, r0
   131d8:	sub	r2, fp, #52	; 0x34
   131dc:	mov	r0, r9
   131e0:	mov	r1, r4
   131e4:	bl	13460 <__assert_fail@plt+0x2374>
   131e8:	mov	r3, r0
   131ec:	mov	r0, #1
   131f0:	mov	r1, #0
   131f4:	mov	r2, r6
   131f8:	bl	10f84 <error@plt>
   131fc:	movw	r1, #33124	; 0x8164
   13200:	movt	r1, #2
   13204:	str	r0, [r1]
   13208:	bx	lr
   1320c:	movw	r1, #33128	; 0x8168
   13210:	movt	r1, #2
   13214:	strb	r0, [r1]
   13218:	bx	lr
   1321c:	push	{r4, r5, r6, sl, fp, lr}
   13220:	add	fp, sp, #16
   13224:	sub	sp, sp, #8
   13228:	movw	r0, #33108	; 0x8154
   1322c:	movt	r0, #2
   13230:	ldr	r0, [r0]
   13234:	bl	16494 <__assert_fail@plt+0x53a8>
   13238:	cmp	r0, #0
   1323c:	beq	13264 <__assert_fail@plt+0x2178>
   13240:	movw	r0, #33128	; 0x8168
   13244:	movt	r0, #2
   13248:	ldrb	r0, [r0]
   1324c:	cmp	r0, #0
   13250:	beq	13284 <__assert_fail@plt+0x2198>
   13254:	bl	11014 <__errno_location@plt>
   13258:	ldr	r0, [r0]
   1325c:	cmp	r0, #32
   13260:	bne	13284 <__assert_fail@plt+0x2198>
   13264:	movw	r0, #33104	; 0x8150
   13268:	movt	r0, #2
   1326c:	ldr	r0, [r0]
   13270:	bl	16494 <__assert_fail@plt+0x53a8>
   13274:	cmp	r0, #0
   13278:	subeq	sp, fp, #16
   1327c:	popeq	{r4, r5, r6, sl, fp, pc}
   13280:	b	132f4 <__assert_fail@plt+0x2208>
   13284:	movw	r1, #29935	; 0x74ef
   13288:	movt	r1, #1
   1328c:	mov	r0, #0
   13290:	mov	r2, #5
   13294:	bl	10ef4 <dcgettext@plt>
   13298:	mov	r4, r0
   1329c:	movw	r0, #33124	; 0x8164
   132a0:	movt	r0, #2
   132a4:	ldr	r6, [r0]
   132a8:	bl	11014 <__errno_location@plt>
   132ac:	ldr	r5, [r0]
   132b0:	cmp	r6, #0
   132b4:	bne	132d0 <__assert_fail@plt+0x21e4>
   132b8:	movw	r2, #28845	; 0x70ad
   132bc:	movt	r2, #1
   132c0:	mov	r0, #0
   132c4:	mov	r1, r5
   132c8:	mov	r3, r4
   132cc:	b	132f0 <__assert_fail@plt+0x2204>
   132d0:	mov	r0, r6
   132d4:	bl	14ba4 <__assert_fail@plt+0x3ab8>
   132d8:	mov	r3, r0
   132dc:	str	r4, [sp]
   132e0:	movw	r2, #28841	; 0x70a9
   132e4:	movt	r2, #1
   132e8:	mov	r0, #0
   132ec:	mov	r1, r5
   132f0:	bl	10f84 <error@plt>
   132f4:	movw	r0, #33020	; 0x80fc
   132f8:	movt	r0, #2
   132fc:	ldr	r0, [r0]
   13300:	bl	10eb8 <_exit@plt>
   13304:	push	{r4, r5, r6, sl, fp, lr}
   13308:	add	fp, sp, #16
   1330c:	mov	r4, r0
   13310:	bl	11014 <__errno_location@plt>
   13314:	mov	r5, r0
   13318:	ldr	r6, [r0]
   1331c:	mov	r0, r4
   13320:	bl	10eac <free@plt>
   13324:	str	r6, [r5]
   13328:	pop	{r4, r5, r6, sl, fp, pc}
   1332c:	push	{r4, r5, r6, r7, fp, lr}
   13330:	add	fp, sp, #16
   13334:	cmp	r2, #0
   13338:	moveq	r4, #0
   1333c:	moveq	r0, r4
   13340:	popeq	{r4, r5, r6, r7, fp, pc}
   13344:	mov	r5, r2
   13348:	mov	r6, r1
   1334c:	mov	r7, r0
   13350:	mov	r4, #0
   13354:	mov	r0, r7
   13358:	mov	r1, r6
   1335c:	mov	r2, r5
   13360:	bl	15108 <__assert_fail@plt+0x401c>
   13364:	cmn	r0, #1
   13368:	beq	13384 <__assert_fail@plt+0x2298>
   1336c:	cmp	r0, #0
   13370:	beq	1338c <__assert_fail@plt+0x22a0>
   13374:	subs	r5, r5, r0
   13378:	add	r6, r6, r0
   1337c:	add	r4, r0, r4
   13380:	bne	13354 <__assert_fail@plt+0x2268>
   13384:	mov	r0, r4
   13388:	pop	{r4, r5, r6, r7, fp, pc}
   1338c:	bl	11014 <__errno_location@plt>
   13390:	mov	r1, #0
   13394:	str	r1, [r0]
   13398:	mov	r0, r4
   1339c:	pop	{r4, r5, r6, r7, fp, pc}
   133a0:	push	{r4, r5, r6, sl, fp, lr}
   133a4:	add	fp, sp, #16
   133a8:	mov	r4, r1
   133ac:	mov	r5, r0
   133b0:	mov	r0, #0
   133b4:	strb	r0, [r2, #20]
   133b8:	add	r6, r2, #19
   133bc:	cmp	r1, #0
   133c0:	blt	13410 <__assert_fail@plt+0x2324>
   133c4:	mov	r0, r5
   133c8:	mov	r1, r4
   133cc:	mov	r2, #10
   133d0:	mov	r3, #0
   133d4:	bl	168f8 <__assert_fail@plt+0x580c>
   133d8:	add	r2, r0, r0, lsl #2
   133dc:	sub	r2, r5, r2, lsl #1
   133e0:	add	r2, r2, #48	; 0x30
   133e4:	strb	r2, [r6], #-1
   133e8:	adds	r2, r5, #9
   133ec:	adc	r3, r4, #0
   133f0:	rsbs	r2, r2, #18
   133f4:	rscs	r2, r3, #0
   133f8:	mov	r5, r0
   133fc:	mov	r4, r1
   13400:	bcc	133c4 <__assert_fail@plt+0x22d8>
   13404:	add	r6, r6, #1
   13408:	mov	r0, r6
   1340c:	pop	{r4, r5, r6, sl, fp, pc}
   13410:	mov	r0, r5
   13414:	mov	r1, r4
   13418:	mov	r2, #10
   1341c:	mov	r3, #0
   13420:	bl	168f8 <__assert_fail@plt+0x580c>
   13424:	add	r2, r0, r0, lsl #2
   13428:	rsb	r2, r5, r2, lsl #1
   1342c:	add	r2, r2, #48	; 0x30
   13430:	strb	r2, [r6], #-1
   13434:	adds	r2, r5, #9
   13438:	adc	r3, r4, #0
   1343c:	rsbs	r2, r2, #18
   13440:	rscs	r2, r3, #0
   13444:	mov	r5, r0
   13448:	mov	r4, r1
   1344c:	bcc	13410 <__assert_fail@plt+0x2324>
   13450:	mov	r0, #45	; 0x2d
   13454:	strb	r0, [r6]
   13458:	mov	r0, r6
   1345c:	pop	{r4, r5, r6, sl, fp, pc}
   13460:	push	{r4, r5, r6, sl, fp, lr}
   13464:	add	fp, sp, #16
   13468:	mov	r4, r1
   1346c:	mov	r5, r0
   13470:	mov	r0, #0
   13474:	strb	r0, [r2, #20]
   13478:	add	r6, r2, #19
   1347c:	mov	r0, r5
   13480:	mov	r1, r4
   13484:	mov	r2, #10
   13488:	mov	r3, #0
   1348c:	bl	169cc <__assert_fail@plt+0x58e0>
   13490:	add	r2, r0, r0, lsl #2
   13494:	sub	r2, r5, r2, lsl #1
   13498:	orr	r2, r2, #48	; 0x30
   1349c:	strb	r2, [r6], #-1
   134a0:	rsbs	r2, r5, #9
   134a4:	rscs	r2, r4, #0
   134a8:	mov	r5, r0
   134ac:	mov	r4, r1
   134b0:	bcc	1347c <__assert_fail@plt+0x2390>
   134b4:	add	r0, r6, #1
   134b8:	pop	{r4, r5, r6, sl, fp, pc}
   134bc:	push	{r4, r5, fp, lr}
   134c0:	add	fp, sp, #8
   134c4:	cmp	r0, #0
   134c8:	beq	1355c <__assert_fail@plt+0x2470>
   134cc:	mov	r4, r0
   134d0:	mov	r1, #47	; 0x2f
   134d4:	bl	11098 <strrchr@plt>
   134d8:	cmp	r0, #0
   134dc:	mov	r5, r4
   134e0:	addne	r5, r0, #1
   134e4:	sub	r0, r5, r4
   134e8:	cmp	r0, #7
   134ec:	blt	13540 <__assert_fail@plt+0x2454>
   134f0:	sub	r0, r5, #7
   134f4:	movw	r1, #30003	; 0x7533
   134f8:	movt	r1, #1
   134fc:	mov	r2, #7
   13500:	bl	110c8 <strncmp@plt>
   13504:	cmp	r0, #0
   13508:	bne	13540 <__assert_fail@plt+0x2454>
   1350c:	movw	r1, #30011	; 0x753b
   13510:	movt	r1, #1
   13514:	mov	r0, r5
   13518:	mov	r2, #3
   1351c:	bl	110c8 <strncmp@plt>
   13520:	cmp	r0, #0
   13524:	beq	13530 <__assert_fail@plt+0x2444>
   13528:	mov	r4, r5
   1352c:	b	13540 <__assert_fail@plt+0x2454>
   13530:	add	r4, r5, #3
   13534:	movw	r0, #33088	; 0x8140
   13538:	movt	r0, #2
   1353c:	str	r4, [r0]
   13540:	movw	r0, #33092	; 0x8144
   13544:	movt	r0, #2
   13548:	str	r4, [r0]
   1354c:	movw	r0, #33132	; 0x816c
   13550:	movt	r0, #2
   13554:	str	r4, [r0]
   13558:	pop	{r4, r5, fp, pc}
   1355c:	movw	r0, #33104	; 0x8150
   13560:	movt	r0, #2
   13564:	ldr	r3, [r0]
   13568:	movw	r0, #29947	; 0x74fb
   1356c:	movt	r0, #1
   13570:	mov	r1, #55	; 0x37
   13574:	mov	r2, #1
   13578:	bl	10f3c <fwrite@plt>
   1357c:	bl	110d4 <abort@plt>
   13580:	push	{r4, r5, r6, sl, fp, lr}
   13584:	add	fp, sp, #16
   13588:	mov	r4, r0
   1358c:	movw	r0, #33136	; 0x8170
   13590:	movt	r0, #2
   13594:	cmp	r4, #0
   13598:	moveq	r4, r0
   1359c:	bl	11014 <__errno_location@plt>
   135a0:	mov	r5, r0
   135a4:	ldr	r6, [r0]
   135a8:	mov	r0, r4
   135ac:	mov	r1, #48	; 0x30
   135b0:	bl	15954 <__assert_fail@plt+0x4868>
   135b4:	str	r6, [r5]
   135b8:	pop	{r4, r5, r6, sl, fp, pc}
   135bc:	movw	r1, #33136	; 0x8170
   135c0:	movt	r1, #2
   135c4:	cmp	r0, #0
   135c8:	movne	r1, r0
   135cc:	ldr	r0, [r1]
   135d0:	bx	lr
   135d4:	movw	r2, #33136	; 0x8170
   135d8:	movt	r2, #2
   135dc:	cmp	r0, #0
   135e0:	movne	r2, r0
   135e4:	str	r1, [r2]
   135e8:	bx	lr
   135ec:	movw	r3, #33136	; 0x8170
   135f0:	movt	r3, #2
   135f4:	cmp	r0, #0
   135f8:	movne	r3, r0
   135fc:	ubfx	r0, r1, #5, #3
   13600:	add	r0, r3, r0, lsl #2
   13604:	ldr	r3, [r0, #8]
   13608:	and	r1, r1, #31
   1360c:	eor	r2, r2, r3, lsr r1
   13610:	and	r2, r2, #1
   13614:	eor	r2, r3, r2, lsl r1
   13618:	str	r2, [r0, #8]
   1361c:	mov	r0, #1
   13620:	and	r0, r0, r3, lsr r1
   13624:	bx	lr
   13628:	movw	r2, #33136	; 0x8170
   1362c:	movt	r2, #2
   13630:	cmp	r0, #0
   13634:	movne	r2, r0
   13638:	ldr	r0, [r2, #4]
   1363c:	str	r1, [r2, #4]
   13640:	bx	lr
   13644:	movw	r3, #33136	; 0x8170
   13648:	movt	r3, #2
   1364c:	cmp	r0, #0
   13650:	movne	r3, r0
   13654:	mov	r0, #10
   13658:	str	r0, [r3]
   1365c:	cmp	r1, #0
   13660:	cmpne	r2, #0
   13664:	bne	13674 <__assert_fail@plt+0x2588>
   13668:	push	{fp, lr}
   1366c:	mov	fp, sp
   13670:	bl	110d4 <abort@plt>
   13674:	str	r1, [r3, #40]	; 0x28
   13678:	str	r2, [r3, #44]	; 0x2c
   1367c:	bx	lr
   13680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13684:	add	fp, sp, #28
   13688:	sub	sp, sp, #20
   1368c:	mov	r8, r3
   13690:	mov	r9, r2
   13694:	mov	sl, r1
   13698:	mov	r7, r0
   1369c:	ldr	r0, [fp, #8]
   136a0:	movw	r5, #33136	; 0x8170
   136a4:	movt	r5, #2
   136a8:	cmp	r0, #0
   136ac:	movne	r5, r0
   136b0:	bl	11014 <__errno_location@plt>
   136b4:	mov	r4, r0
   136b8:	ldm	r5, {r0, r1}
   136bc:	ldr	r2, [r5, #40]	; 0x28
   136c0:	ldr	r3, [r5, #44]	; 0x2c
   136c4:	ldr	r6, [r4]
   136c8:	add	r5, r5, #8
   136cc:	stm	sp, {r0, r1, r5}
   136d0:	str	r2, [sp, #12]
   136d4:	str	r3, [sp, #16]
   136d8:	mov	r0, r7
   136dc:	mov	r1, sl
   136e0:	mov	r2, r9
   136e4:	mov	r3, r8
   136e8:	bl	136f8 <__assert_fail@plt+0x260c>
   136ec:	str	r6, [r4]
   136f0:	sub	sp, fp, #28
   136f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136fc:	add	fp, sp, #28
   13700:	sub	sp, sp, #156	; 0x9c
   13704:	mov	r9, r3
   13708:	str	r2, [fp, #-84]	; 0xffffffac
   1370c:	mov	r6, r1
   13710:	mov	r7, r0
   13714:	ldr	r0, [fp, #12]
   13718:	and	r1, r0, #4
   1371c:	str	r1, [sp, #32]
   13720:	and	r1, r0, #1
   13724:	str	r1, [sp, #36]	; 0x24
   13728:	ubfx	sl, r0, #1, #1
   1372c:	bl	10f54 <__ctype_get_mb_cur_max@plt>
   13730:	str	r0, [sp, #40]	; 0x28
   13734:	ldr	r0, [fp, #24]
   13738:	str	r0, [sp, #76]	; 0x4c
   1373c:	ldr	r0, [fp, #20]
   13740:	str	r0, [sp, #68]	; 0x44
   13744:	ldr	r0, [fp, #8]
   13748:	str	r0, [fp, #-60]	; 0xffffffc4
   1374c:	mov	r0, #0
   13750:	str	r0, [sp, #72]	; 0x48
   13754:	mov	r0, #0
   13758:	str	r0, [sp, #92]	; 0x5c
   1375c:	mov	r0, #0
   13760:	str	r0, [fp, #-72]	; 0xffffffb8
   13764:	mov	r0, #0
   13768:	mov	r1, #0
   1376c:	str	r1, [fp, #-56]	; 0xffffffc8
   13770:	mov	r1, #0
   13774:	str	r1, [sp, #56]	; 0x38
   13778:	mov	r5, #1
   1377c:	str	r7, [sp, #80]	; 0x50
   13780:	mov	r4, r6
   13784:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13788:	cmp	r6, #10
   1378c:	bhi	146f4 <__assert_fail@plt+0x3608>
   13790:	add	r1, pc, #20
   13794:	mov	r8, #0
   13798:	mov	r2, #1
   1379c:	mov	r3, #0
   137a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   137a4:	mov	lr, r9
   137a8:	ldr	pc, [r1, r6, lsl #2]
   137ac:	andeq	r3, r1, r4, lsl #17
   137b0:			; <UNDEFINED> instruction: 0x000138b4
   137b4:	andeq	r3, r1, r4, ror r8
   137b8:	andeq	r3, r1, ip, ror #16
   137bc:	andeq	r3, r1, r8, lsr #17
   137c0:	andeq	r3, r1, r8, lsl #18
   137c4:	muleq	r1, r4, r8
   137c8:	andeq	r3, r1, r4, ror #18
   137cc:	ldrdeq	r3, [r1], -r8
   137d0:	ldrdeq	r3, [r1], -r8
   137d4:	andeq	r3, r1, r0, lsl #16
   137d8:	movw	r0, #30093	; 0x758d
   137dc:	movt	r0, #1
   137e0:	mov	r1, r6
   137e4:	bl	14d00 <__assert_fail@plt+0x3c14>
   137e8:	str	r0, [sp, #68]	; 0x44
   137ec:	movw	r0, #30095	; 0x758f
   137f0:	movt	r0, #1
   137f4:	mov	r1, r6
   137f8:	bl	14d00 <__assert_fail@plt+0x3c14>
   137fc:	str	r0, [sp, #76]	; 0x4c
   13800:	mov	r8, #0
   13804:	tst	sl, #1
   13808:	bne	13840 <__assert_fail@plt+0x2754>
   1380c:	ldr	r0, [sp, #68]	; 0x44
   13810:	ldrb	r0, [r0]
   13814:	cmp	r0, #0
   13818:	beq	13840 <__assert_fail@plt+0x2754>
   1381c:	ldr	r1, [sp, #68]	; 0x44
   13820:	add	r1, r1, #1
   13824:	mov	r8, #0
   13828:	cmp	r8, r4
   1382c:	strbcc	r0, [r7, r8]
   13830:	ldrb	r0, [r1, r8]
   13834:	add	r8, r8, #1
   13838:	cmp	r0, #0
   1383c:	bne	13828 <__assert_fail@plt+0x273c>
   13840:	ldr	r6, [sp, #76]	; 0x4c
   13844:	mov	r0, r6
   13848:	bl	10ff0 <strlen@plt>
   1384c:	str	r0, [fp, #-72]	; 0xffffffb8
   13850:	str	r6, [sp, #92]	; 0x5c
   13854:	mov	r2, #1
   13858:	mov	r3, sl
   1385c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13860:	mov	lr, r9
   13864:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13868:	b	13964 <__assert_fail@plt+0x2878>
   1386c:	mov	r0, #1
   13870:	b	138b4 <__assert_fail@plt+0x27c8>
   13874:	tst	sl, #1
   13878:	bne	138b4 <__assert_fail@plt+0x27c8>
   1387c:	mov	r2, r0
   13880:	b	138dc <__assert_fail@plt+0x27f0>
   13884:	mov	r6, #0
   13888:	mov	r8, #0
   1388c:	mov	r2, r0
   13890:	b	13960 <__assert_fail@plt+0x2874>
   13894:	mov	r0, #1
   13898:	str	r0, [fp, #-72]	; 0xffffffb8
   1389c:	mov	r8, #0
   138a0:	mov	r6, #5
   138a4:	b	13920 <__assert_fail@plt+0x2834>
   138a8:	mov	r2, #1
   138ac:	tst	sl, #1
   138b0:	beq	138dc <__assert_fail@plt+0x27f0>
   138b4:	mov	r1, #1
   138b8:	str	r1, [fp, #-72]	; 0xffffffb8
   138bc:	mov	r8, #0
   138c0:	mov	r6, #2
   138c4:	movw	r1, #30095	; 0x758f
   138c8:	movt	r1, #1
   138cc:	str	r1, [sp, #92]	; 0x5c
   138d0:	mov	r2, r0
   138d4:	mov	r3, #1
   138d8:	b	13964 <__assert_fail@plt+0x2878>
   138dc:	mov	r8, #1
   138e0:	mov	r6, #2
   138e4:	cmp	r4, #0
   138e8:	movne	r0, #39	; 0x27
   138ec:	strbne	r0, [r7]
   138f0:	movw	r0, #30095	; 0x758f
   138f4:	movt	r0, #1
   138f8:	str	r0, [sp, #92]	; 0x5c
   138fc:	mov	r0, #1
   13900:	str	r0, [fp, #-72]	; 0xffffffb8
   13904:	b	13960 <__assert_fail@plt+0x2874>
   13908:	mov	r6, #5
   1390c:	tst	sl, #1
   13910:	beq	13938 <__assert_fail@plt+0x284c>
   13914:	mov	r0, #1
   13918:	str	r0, [fp, #-72]	; 0xffffffb8
   1391c:	mov	r8, #0
   13920:	movw	r0, #30091	; 0x758b
   13924:	movt	r0, #1
   13928:	str	r0, [sp, #92]	; 0x5c
   1392c:	mov	r2, #1
   13930:	mov	r3, #1
   13934:	b	13964 <__assert_fail@plt+0x2878>
   13938:	cmp	r4, #0
   1393c:	movne	r0, #34	; 0x22
   13940:	strbne	r0, [r7]
   13944:	mov	r8, #1
   13948:	movw	r0, #30091	; 0x758b
   1394c:	movt	r0, #1
   13950:	str	r0, [sp, #92]	; 0x5c
   13954:	mov	r0, #1
   13958:	str	r0, [fp, #-72]	; 0xffffffb8
   1395c:	mov	r2, #1
   13960:	mov	r3, #0
   13964:	ldr	r0, [fp, #16]
   13968:	cmp	r0, #0
   1396c:	movwne	r0, #1
   13970:	and	r0, r0, r3
   13974:	str	r0, [fp, #-88]	; 0xffffffa8
   13978:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1397c:	cmp	r0, #0
   13980:	movwne	r0, #1
   13984:	and	r1, r0, r3
   13988:	and	r1, r2, r1
   1398c:	str	r1, [sp, #48]	; 0x30
   13990:	str	r6, [fp, #-60]	; 0xffffffc4
   13994:	subs	r6, r6, #2
   13998:	clz	r1, r6
   1399c:	lsr	r1, r1, #5
   139a0:	and	r1, r1, r3
   139a4:	str	r1, [sp, #60]	; 0x3c
   139a8:	str	r6, [fp, #-80]	; 0xffffffb0
   139ac:	mov	r1, r6
   139b0:	movwne	r1, #1
   139b4:	str	r3, [fp, #-76]	; 0xffffffb4
   139b8:	eor	r3, r3, #1
   139bc:	str	r3, [sp, #88]	; 0x58
   139c0:	orr	r3, r1, r3
   139c4:	str	r3, [sp, #64]	; 0x40
   139c8:	and	r1, r1, r2
   139cc:	str	r1, [fp, #-68]	; 0xffffffbc
   139d0:	and	r0, r0, r1
   139d4:	str	r0, [fp, #-64]	; 0xffffffc0
   139d8:	str	r2, [sp, #84]	; 0x54
   139dc:	eor	r0, r2, #1
   139e0:	str	r0, [sp, #52]	; 0x34
   139e4:	mov	r6, #0
   139e8:	cmn	lr, #1
   139ec:	beq	139fc <__assert_fail@plt+0x2910>
   139f0:	cmp	r6, lr
   139f4:	bne	13a08 <__assert_fail@plt+0x291c>
   139f8:	b	14574 <__assert_fail@plt+0x3488>
   139fc:	ldrb	r0, [ip, r6]
   13a00:	cmp	r0, #0
   13a04:	beq	14574 <__assert_fail@plt+0x3488>
   13a08:	str	r5, [fp, #-48]	; 0xffffffd0
   13a0c:	mov	sl, #0
   13a10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a14:	cmp	r0, #0
   13a18:	beq	13a4c <__assert_fail@plt+0x2960>
   13a1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a20:	add	r5, r6, r0
   13a24:	cmp	r0, #2
   13a28:	bcc	13a44 <__assert_fail@plt+0x2958>
   13a2c:	cmn	lr, #1
   13a30:	bne	13a44 <__assert_fail@plt+0x2958>
   13a34:	mov	r0, ip
   13a38:	bl	10ff0 <strlen@plt>
   13a3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a40:	mov	lr, r0
   13a44:	cmp	r5, lr
   13a48:	bls	13a58 <__assert_fail@plt+0x296c>
   13a4c:	mov	r0, #0
   13a50:	str	r0, [fp, #-52]	; 0xffffffcc
   13a54:	b	13aa4 <__assert_fail@plt+0x29b8>
   13a58:	mov	r5, r4
   13a5c:	mov	r4, lr
   13a60:	add	r0, ip, r6
   13a64:	ldr	r1, [sp, #92]	; 0x5c
   13a68:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13a6c:	bl	10ee8 <memcmp@plt>
   13a70:	cmp	r0, #0
   13a74:	mov	r1, r0
   13a78:	movwne	r1, #1
   13a7c:	ldr	r2, [sp, #88]	; 0x58
   13a80:	orr	r1, r1, r2
   13a84:	tst	r1, #1
   13a88:	beq	14638 <__assert_fail@plt+0x354c>
   13a8c:	clz	r0, r0
   13a90:	lsr	r0, r0, #5
   13a94:	str	r0, [fp, #-52]	; 0xffffffcc
   13a98:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a9c:	mov	lr, r4
   13aa0:	mov	r4, r5
   13aa4:	ldrb	r5, [ip, r6]
   13aa8:	cmp	r5, #126	; 0x7e
   13aac:	bhi	13e68 <__assert_fail@plt+0x2d7c>
   13ab0:	mov	r9, #1
   13ab4:	mov	r2, #110	; 0x6e
   13ab8:	mov	r0, #97	; 0x61
   13abc:	add	r3, pc, #4
   13ac0:	mov	r1, #0
   13ac4:	ldr	pc, [r3, r5, lsl #2]
   13ac8:	andeq	r3, r1, r0, ror #26
   13acc:	andeq	r3, r1, r8, ror #28
   13ad0:	andeq	r3, r1, r8, ror #28
   13ad4:	andeq	r3, r1, r8, ror #28
   13ad8:	andeq	r3, r1, r8, ror #28
   13adc:	andeq	r3, r1, r8, ror #28
   13ae0:	andeq	r3, r1, r8, ror #28
   13ae4:	andeq	r3, r1, ip, lsr #30
   13ae8:	andeq	r3, r1, r0, asr #26
   13aec:	andeq	r3, r1, r8, lsr sp
   13af0:	andeq	r3, r1, ip, asr #26
   13af4:	ldrdeq	r3, [r1], -r0
   13af8:	andeq	r3, r1, r0, lsr sp
   13afc:	andeq	r3, r1, r8, asr #26
   13b00:	andeq	r3, r1, r8, ror #28
   13b04:	andeq	r3, r1, r8, ror #28
   13b08:	andeq	r3, r1, r8, ror #28
   13b0c:	andeq	r3, r1, r8, ror #28
   13b10:	andeq	r3, r1, r8, ror #28
   13b14:	andeq	r3, r1, r8, ror #28
   13b18:	andeq	r3, r1, r8, ror #28
   13b1c:	andeq	r3, r1, r8, ror #28
   13b20:	andeq	r3, r1, r8, ror #28
   13b24:	andeq	r3, r1, r8, ror #28
   13b28:	andeq	r3, r1, r8, ror #28
   13b2c:	andeq	r3, r1, r8, ror #28
   13b30:	andeq	r3, r1, r8, ror #28
   13b34:	andeq	r3, r1, r8, ror #28
   13b38:	andeq	r3, r1, r8, ror #28
   13b3c:	andeq	r3, r1, r8, ror #28
   13b40:	andeq	r3, r1, r8, ror #28
   13b44:	andeq	r3, r1, r8, ror #28
   13b48:	ldrdeq	r3, [r1], -ip
   13b4c:	andeq	r3, r1, r0, ror #29
   13b50:	andeq	r3, r1, r0, ror #29
   13b54:	ldrdeq	r3, [r1], -r8
   13b58:	andeq	r3, r1, r0, ror #29
   13b5c:	andeq	r3, r1, r4, asr #25
   13b60:	andeq	r3, r1, r0, ror #29
   13b64:	ldrdeq	r3, [r1], -r8
   13b68:	andeq	r3, r1, r0, ror #29
   13b6c:	andeq	r3, r1, r0, ror #29
   13b70:	andeq	r3, r1, r0, ror #29
   13b74:	andeq	r3, r1, r4, asr #25
   13b78:	andeq	r3, r1, r4, asr #25
   13b7c:	andeq	r3, r1, r4, asr #25
   13b80:	andeq	r3, r1, r4, asr #25
   13b84:	andeq	r3, r1, r4, asr #25
   13b88:	andeq	r3, r1, r4, asr #25
   13b8c:	andeq	r3, r1, r4, asr #25
   13b90:	andeq	r3, r1, r4, asr #25
   13b94:	andeq	r3, r1, r4, asr #25
   13b98:	andeq	r3, r1, r4, asr #25
   13b9c:	andeq	r3, r1, r4, asr #25
   13ba0:	andeq	r3, r1, r4, asr #25
   13ba4:	andeq	r3, r1, r4, asr #25
   13ba8:	andeq	r3, r1, r4, asr #25
   13bac:	andeq	r3, r1, r4, asr #25
   13bb0:	andeq	r3, r1, r4, asr #25
   13bb4:	andeq	r3, r1, r0, ror #29
   13bb8:	andeq	r3, r1, r0, ror #29
   13bbc:	andeq	r3, r1, r0, ror #29
   13bc0:	andeq	r3, r1, r0, ror #29
   13bc4:	andeq	r3, r1, r0, lsr #27
   13bc8:	andeq	r3, r1, r8, ror #28
   13bcc:	andeq	r3, r1, r4, asr #25
   13bd0:	andeq	r3, r1, r4, asr #25
   13bd4:	andeq	r3, r1, r4, asr #25
   13bd8:	andeq	r3, r1, r4, asr #25
   13bdc:	andeq	r3, r1, r4, asr #25
   13be0:	andeq	r3, r1, r4, asr #25
   13be4:	andeq	r3, r1, r4, asr #25
   13be8:	andeq	r3, r1, r4, asr #25
   13bec:	andeq	r3, r1, r4, asr #25
   13bf0:	andeq	r3, r1, r4, asr #25
   13bf4:	andeq	r3, r1, r4, asr #25
   13bf8:	andeq	r3, r1, r4, asr #25
   13bfc:	andeq	r3, r1, r4, asr #25
   13c00:	andeq	r3, r1, r4, asr #25
   13c04:	andeq	r3, r1, r4, asr #25
   13c08:	andeq	r3, r1, r4, asr #25
   13c0c:	andeq	r3, r1, r4, asr #25
   13c10:	andeq	r3, r1, r4, asr #25
   13c14:	andeq	r3, r1, r4, asr #25
   13c18:	andeq	r3, r1, r4, asr #25
   13c1c:	andeq	r3, r1, r4, asr #25
   13c20:	andeq	r3, r1, r4, asr #25
   13c24:	andeq	r3, r1, r4, asr #25
   13c28:	andeq	r3, r1, r4, asr #25
   13c2c:	andeq	r3, r1, r4, asr #25
   13c30:	andeq	r3, r1, r4, asr #25
   13c34:	andeq	r3, r1, r0, ror #29
   13c38:	andeq	r3, r1, ip, lsl #26
   13c3c:	andeq	r3, r1, r4, asr #25
   13c40:	andeq	r3, r1, r0, ror #29
   13c44:	andeq	r3, r1, r4, asr #25
   13c48:	andeq	r3, r1, r0, ror #29
   13c4c:	andeq	r3, r1, r4, asr #25
   13c50:	andeq	r3, r1, r4, asr #25
   13c54:	andeq	r3, r1, r4, asr #25
   13c58:	andeq	r3, r1, r4, asr #25
   13c5c:	andeq	r3, r1, r4, asr #25
   13c60:	andeq	r3, r1, r4, asr #25
   13c64:	andeq	r3, r1, r4, asr #25
   13c68:	andeq	r3, r1, r4, asr #25
   13c6c:	andeq	r3, r1, r4, asr #25
   13c70:	andeq	r3, r1, r4, asr #25
   13c74:	andeq	r3, r1, r4, asr #25
   13c78:	andeq	r3, r1, r4, asr #25
   13c7c:	andeq	r3, r1, r4, asr #25
   13c80:	andeq	r3, r1, r4, asr #25
   13c84:	andeq	r3, r1, r4, asr #25
   13c88:	andeq	r3, r1, r4, asr #25
   13c8c:	andeq	r3, r1, r4, asr #25
   13c90:	andeq	r3, r1, r4, asr #25
   13c94:	andeq	r3, r1, r4, asr #25
   13c98:	andeq	r3, r1, r4, asr #25
   13c9c:	andeq	r3, r1, r4, asr #25
   13ca0:	andeq	r3, r1, r4, asr #25
   13ca4:	andeq	r3, r1, r4, asr #25
   13ca8:	andeq	r3, r1, r4, asr #25
   13cac:	andeq	r3, r1, r4, asr #25
   13cb0:	andeq	r3, r1, r4, asr #25
   13cb4:	andeq	r3, r1, ip, ror #25
   13cb8:	andeq	r3, r1, r0, ror #29
   13cbc:	andeq	r3, r1, ip, ror #25
   13cc0:	ldrdeq	r3, [r1], -r8
   13cc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cc8:	cmp	r0, #0
   13ccc:	beq	13f40 <__assert_fail@plt+0x2e54>
   13cd0:	ldr	r0, [fp, #16]
   13cd4:	b	13f44 <__assert_fail@plt+0x2e58>
   13cd8:	mov	r9, #0
   13cdc:	cmp	r6, #0
   13ce0:	beq	13edc <__assert_fail@plt+0x2df0>
   13ce4:	mov	sl, #0
   13ce8:	b	13cc4 <__assert_fail@plt+0x2bd8>
   13cec:	mov	r9, #0
   13cf0:	cmn	lr, #1
   13cf4:	beq	13ec0 <__assert_fail@plt+0x2dd4>
   13cf8:	cmp	r6, #0
   13cfc:	bne	13ce4 <__assert_fail@plt+0x2bf8>
   13d00:	cmp	lr, #1
   13d04:	beq	13edc <__assert_fail@plt+0x2df0>
   13d08:	b	13ce4 <__assert_fail@plt+0x2bf8>
   13d0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d10:	cmp	r0, #2
   13d14:	bne	13f08 <__assert_fail@plt+0x2e1c>
   13d18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d1c:	tst	r0, #1
   13d20:	bne	14650 <__assert_fail@plt+0x3564>
   13d24:	mov	sl, #0
   13d28:	mov	r0, #92	; 0x5c
   13d2c:	b	13f1c <__assert_fail@plt+0x2e30>
   13d30:	mov	r0, #102	; 0x66
   13d34:	b	13f2c <__assert_fail@plt+0x2e40>
   13d38:	mov	r2, #116	; 0x74
   13d3c:	b	13d4c <__assert_fail@plt+0x2c60>
   13d40:	mov	r0, #98	; 0x62
   13d44:	b	13f2c <__assert_fail@plt+0x2e40>
   13d48:	mov	r2, #114	; 0x72
   13d4c:	ldr	r0, [sp, #64]	; 0x40
   13d50:	tst	r0, #1
   13d54:	mov	r0, r2
   13d58:	bne	13f2c <__assert_fail@plt+0x2e40>
   13d5c:	b	14650 <__assert_fail@plt+0x3564>
   13d60:	ldr	r0, [sp, #84]	; 0x54
   13d64:	tst	r0, #1
   13d68:	beq	1401c <__assert_fail@plt+0x2f30>
   13d6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d70:	tst	r0, #1
   13d74:	bne	14650 <__assert_fail@plt+0x3564>
   13d78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d7c:	cmp	r0, #2
   13d80:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13d84:	movwne	r0, #1
   13d88:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d8c:	orr	r0, r0, r2
   13d90:	tst	r0, #1
   13d94:	beq	14410 <__assert_fail@plt+0x3324>
   13d98:	mov	r0, r8
   13d9c:	b	14444 <__assert_fail@plt+0x3358>
   13da0:	mov	sl, #0
   13da4:	mov	r5, #63	; 0x3f
   13da8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13dac:	cmp	r0, #5
   13db0:	beq	141d0 <__assert_fail@plt+0x30e4>
   13db4:	cmp	r0, #2
   13db8:	bne	14270 <__assert_fail@plt+0x3184>
   13dbc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13dc0:	tst	r0, #1
   13dc4:	mov	r9, #0
   13dc8:	beq	13cc4 <__assert_fail@plt+0x2bd8>
   13dcc:	b	14650 <__assert_fail@plt+0x3564>
   13dd0:	mov	r0, #118	; 0x76
   13dd4:	b	13f2c <__assert_fail@plt+0x2e40>
   13dd8:	mov	r5, #39	; 0x27
   13ddc:	mov	r0, #1
   13de0:	str	r0, [sp, #56]	; 0x38
   13de4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13de8:	cmp	r0, #2
   13dec:	bne	1403c <__assert_fail@plt+0x2f50>
   13df0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13df4:	tst	r0, #1
   13df8:	bne	14650 <__assert_fail@plt+0x3564>
   13dfc:	ldr	r2, [sp, #72]	; 0x48
   13e00:	cmp	r2, #0
   13e04:	mov	r0, r2
   13e08:	movwne	r0, #1
   13e0c:	clz	r1, r4
   13e10:	lsr	r1, r1, #5
   13e14:	orrs	r0, r0, r1
   13e18:	moveq	r2, r4
   13e1c:	str	r2, [sp, #72]	; 0x48
   13e20:	moveq	r4, r0
   13e24:	cmp	r8, r4
   13e28:	movcc	r0, #39	; 0x27
   13e2c:	strbcc	r0, [r7, r8]
   13e30:	add	r0, r8, #1
   13e34:	cmp	r0, r4
   13e38:	movcc	r1, #92	; 0x5c
   13e3c:	strbcc	r1, [r7, r0]
   13e40:	add	r0, r8, #2
   13e44:	cmp	r0, r4
   13e48:	movcc	r1, #39	; 0x27
   13e4c:	strbcc	r1, [r7, r0]
   13e50:	add	r8, r8, #3
   13e54:	mov	r0, #0
   13e58:	str	r0, [fp, #-56]	; 0xffffffc8
   13e5c:	mov	sl, #0
   13e60:	mov	r9, #1
   13e64:	b	13cc4 <__assert_fail@plt+0x2bd8>
   13e68:	str	r4, [sp, #24]
   13e6c:	ldr	r0, [sp, #40]	; 0x28
   13e70:	cmp	r0, #1
   13e74:	bne	14044 <__assert_fail@plt+0x2f58>
   13e78:	str	lr, [sp, #28]
   13e7c:	bl	10fd8 <__ctype_b_loc@plt>
   13e80:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e84:	ldr	r0, [r0]
   13e88:	add	r0, r0, r5, lsl #1
   13e8c:	ldrb	r0, [r0, #1]
   13e90:	ubfx	r9, r0, #6, #1
   13e94:	mov	r1, #1
   13e98:	ldr	r4, [sp, #24]
   13e9c:	ldr	r0, [sp, #52]	; 0x34
   13ea0:	orr	r0, r9, r0
   13ea4:	mov	r2, r1
   13ea8:	cmp	r1, #1
   13eac:	bhi	14278 <__assert_fail@plt+0x318c>
   13eb0:	tst	r0, #1
   13eb4:	beq	14278 <__assert_fail@plt+0x318c>
   13eb8:	ldr	lr, [sp, #28]
   13ebc:	b	13cc4 <__assert_fail@plt+0x2bd8>
   13ec0:	cmp	r6, #0
   13ec4:	ldrbeq	r0, [ip, #1]
   13ec8:	cmpeq	r0, #0
   13ecc:	beq	13edc <__assert_fail@plt+0x2df0>
   13ed0:	mvn	lr, #0
   13ed4:	mov	sl, #0
   13ed8:	b	13cc4 <__assert_fail@plt+0x2bd8>
   13edc:	mov	r1, #1
   13ee0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13ee4:	cmp	r0, #2
   13ee8:	bne	13f00 <__assert_fail@plt+0x2e14>
   13eec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ef0:	tst	r0, #1
   13ef4:	mov	r9, r1
   13ef8:	beq	13cc4 <__assert_fail@plt+0x2bd8>
   13efc:	b	14650 <__assert_fail@plt+0x3564>
   13f00:	mov	r9, r1
   13f04:	b	13cc4 <__assert_fail@plt+0x2bd8>
   13f08:	mov	sl, #0
   13f0c:	mov	r0, #92	; 0x5c
   13f10:	ldr	r1, [sp, #48]	; 0x30
   13f14:	cmp	r1, #0
   13f18:	beq	13f2c <__assert_fail@plt+0x2e40>
   13f1c:	mov	r9, #0
   13f20:	cmp	sl, #0
   13f24:	beq	144dc <__assert_fail@plt+0x33f0>
   13f28:	b	14518 <__assert_fail@plt+0x342c>
   13f2c:	mov	r9, #0
   13f30:	ldr	r1, [sp, #84]	; 0x54
   13f34:	tst	r1, #1
   13f38:	mov	sl, #0
   13f3c:	bne	13f7c <__assert_fail@plt+0x2e90>
   13f40:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13f44:	cmp	r0, #0
   13f48:	mov	r0, r5
   13f4c:	beq	13f70 <__assert_fail@plt+0x2e84>
   13f50:	ubfx	r0, r5, #5, #3
   13f54:	ldr	r1, [fp, #16]
   13f58:	ldr	r0, [r1, r0, lsl #2]
   13f5c:	and	r1, r5, #31
   13f60:	mov	r2, #1
   13f64:	tst	r0, r2, lsl r1
   13f68:	mov	r0, r5
   13f6c:	bne	13f7c <__assert_fail@plt+0x2e90>
   13f70:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13f74:	cmp	r1, #0
   13f78:	beq	144d4 <__assert_fail@plt+0x33e8>
   13f7c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13f80:	tst	r1, #1
   13f84:	bne	14650 <__assert_fail@plt+0x3564>
   13f88:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13f8c:	cmp	r1, #2
   13f90:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13f94:	movwne	r1, #1
   13f98:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13f9c:	orr	r1, r1, r2
   13fa0:	tst	r1, #1
   13fa4:	beq	13fb0 <__assert_fail@plt+0x2ec4>
   13fa8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fac:	b	13fec <__assert_fail@plt+0x2f00>
   13fb0:	cmp	r8, r4
   13fb4:	movcc	r1, #39	; 0x27
   13fb8:	strbcc	r1, [r7, r8]
   13fbc:	add	r1, r8, #1
   13fc0:	cmp	r1, r4
   13fc4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fc8:	movcc	r2, #36	; 0x24
   13fcc:	strbcc	r2, [r7, r1]
   13fd0:	add	r1, r8, #2
   13fd4:	cmp	r1, r4
   13fd8:	movcc	r2, #39	; 0x27
   13fdc:	strbcc	r2, [r7, r1]
   13fe0:	add	r8, r8, #3
   13fe4:	mov	r1, #1
   13fe8:	str	r1, [fp, #-56]	; 0xffffffc8
   13fec:	cmp	r8, r4
   13ff0:	movcc	r1, #92	; 0x5c
   13ff4:	strbcc	r1, [r7, r8]
   13ff8:	add	r8, r8, #1
   13ffc:	cmp	r8, r4
   14000:	strbcc	r0, [r7, r8]
   14004:	and	r5, r5, r9
   14008:	add	r8, r8, #1
   1400c:	add	r6, r6, #1
   14010:	cmn	lr, #1
   14014:	bne	139f0 <__assert_fail@plt+0x2904>
   14018:	b	139fc <__assert_fail@plt+0x2910>
   1401c:	mov	r9, #0
   14020:	ldr	r0, [sp, #36]	; 0x24
   14024:	cmp	r0, #0
   14028:	mov	sl, #0
   1402c:	mov	r5, #0
   14030:	beq	13f40 <__assert_fail@plt+0x2e54>
   14034:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14038:	b	1400c <__assert_fail@plt+0x2f20>
   1403c:	mov	r9, #1
   14040:	b	13cc4 <__assert_fail@plt+0x2bd8>
   14044:	mov	r0, #0
   14048:	str	r0, [fp, #-36]	; 0xffffffdc
   1404c:	str	r0, [fp, #-40]	; 0xffffffd8
   14050:	cmn	lr, #1
   14054:	bne	14068 <__assert_fail@plt+0x2f7c>
   14058:	mov	r0, ip
   1405c:	bl	10ff0 <strlen@plt>
   14060:	ldr	ip, [fp, #-84]	; 0xffffffac
   14064:	mov	lr, r0
   14068:	add	r0, ip, r6
   1406c:	str	r0, [sp, #20]
   14070:	mov	r9, #1
   14074:	mov	r7, #0
   14078:	sub	r4, fp, #40	; 0x28
   1407c:	str	lr, [sp, #28]
   14080:	str	r7, [sp, #44]	; 0x2c
   14084:	add	r7, r7, r6
   14088:	add	r1, ip, r7
   1408c:	sub	r2, lr, r7
   14090:	sub	r0, fp, #44	; 0x2c
   14094:	mov	r3, r4
   14098:	bl	16750 <__assert_fail@plt+0x5664>
   1409c:	cmp	r0, #0
   140a0:	beq	14560 <__assert_fail@plt+0x3474>
   140a4:	cmn	r0, #1
   140a8:	beq	14520 <__assert_fail@plt+0x3434>
   140ac:	cmn	r0, #2
   140b0:	ldr	lr, [sp, #28]
   140b4:	beq	14528 <__assert_fail@plt+0x343c>
   140b8:	cmp	r0, #2
   140bc:	mov	r1, #0
   140c0:	movwcc	r1, #1
   140c4:	ldr	r2, [sp, #60]	; 0x3c
   140c8:	eor	r2, r2, #1
   140cc:	orrs	r1, r2, r1
   140d0:	ldr	r4, [sp, #24]
   140d4:	bne	14194 <__assert_fail@plt+0x30a8>
   140d8:	ldr	r1, [sp, #44]	; 0x2c
   140dc:	ldr	r2, [sp, #20]
   140e0:	add	r1, r2, r1
   140e4:	mov	r2, #1
   140e8:	ldrb	r3, [r1, r2]
   140ec:	sub	r3, r3, #91	; 0x5b
   140f0:	cmp	r3, #33	; 0x21
   140f4:	bhi	14188 <__assert_fail@plt+0x309c>
   140f8:	add	r7, pc, #0
   140fc:	ldr	pc, [r7, r3, lsl #2]
   14100:	andeq	r4, r1, r8, asr #12
   14104:	andeq	r4, r1, r8, asr #12
   14108:	andeq	r4, r1, r8, lsl #3
   1410c:	andeq	r4, r1, r8, asr #12
   14110:	andeq	r4, r1, r8, lsl #3
   14114:	andeq	r4, r1, r8, asr #12
   14118:	andeq	r4, r1, r8, lsl #3
   1411c:	andeq	r4, r1, r8, lsl #3
   14120:	andeq	r4, r1, r8, lsl #3
   14124:	andeq	r4, r1, r8, lsl #3
   14128:	andeq	r4, r1, r8, lsl #3
   1412c:	andeq	r4, r1, r8, lsl #3
   14130:	andeq	r4, r1, r8, lsl #3
   14134:	andeq	r4, r1, r8, lsl #3
   14138:	andeq	r4, r1, r8, lsl #3
   1413c:	andeq	r4, r1, r8, lsl #3
   14140:	andeq	r4, r1, r8, lsl #3
   14144:	andeq	r4, r1, r8, lsl #3
   14148:	andeq	r4, r1, r8, lsl #3
   1414c:	andeq	r4, r1, r8, lsl #3
   14150:	andeq	r4, r1, r8, lsl #3
   14154:	andeq	r4, r1, r8, lsl #3
   14158:	andeq	r4, r1, r8, lsl #3
   1415c:	andeq	r4, r1, r8, lsl #3
   14160:	andeq	r4, r1, r8, lsl #3
   14164:	andeq	r4, r1, r8, lsl #3
   14168:	andeq	r4, r1, r8, lsl #3
   1416c:	andeq	r4, r1, r8, lsl #3
   14170:	andeq	r4, r1, r8, lsl #3
   14174:	andeq	r4, r1, r8, lsl #3
   14178:	andeq	r4, r1, r8, lsl #3
   1417c:	andeq	r4, r1, r8, lsl #3
   14180:	andeq	r4, r1, r8, lsl #3
   14184:	andeq	r4, r1, r8, asr #12
   14188:	add	r2, r2, #1
   1418c:	cmp	r2, r0
   14190:	bcc	140e8 <__assert_fail@plt+0x2ffc>
   14194:	ldr	r7, [sp, #44]	; 0x2c
   14198:	add	r7, r0, r7
   1419c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   141a0:	bl	10f24 <iswprint@plt>
   141a4:	cmp	r0, #0
   141a8:	movwne	r0, #1
   141ac:	and	r9, r9, r0
   141b0:	sub	r4, fp, #40	; 0x28
   141b4:	mov	r0, r4
   141b8:	bl	10ed0 <mbsinit@plt>
   141bc:	ldr	lr, [sp, #28]
   141c0:	cmp	r0, #0
   141c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   141c8:	beq	14080 <__assert_fail@plt+0x2f94>
   141cc:	b	14568 <__assert_fail@plt+0x347c>
   141d0:	ldr	r0, [sp, #32]
   141d4:	cmp	r0, #0
   141d8:	beq	14270 <__assert_fail@plt+0x3184>
   141dc:	add	r0, r6, #2
   141e0:	cmp	r0, lr
   141e4:	bcs	14270 <__assert_fail@plt+0x3184>
   141e8:	add	r1, ip, r6
   141ec:	ldrb	r1, [r1, #1]
   141f0:	cmp	r1, #63	; 0x3f
   141f4:	bne	14270 <__assert_fail@plt+0x3184>
   141f8:	ldrb	r9, [ip, r0]
   141fc:	sub	r2, r9, #33	; 0x21
   14200:	cmp	r2, #29
   14204:	bhi	14270 <__assert_fail@plt+0x3184>
   14208:	mov	r3, #1
   1420c:	movw	r1, #20929	; 0x51c1
   14210:	movt	r1, #14336	; 0x3800
   14214:	tst	r1, r3, lsl r2
   14218:	beq	14270 <__assert_fail@plt+0x3184>
   1421c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14220:	tst	r1, #1
   14224:	bne	14650 <__assert_fail@plt+0x3564>
   14228:	cmp	r8, r4
   1422c:	movcc	r1, #63	; 0x3f
   14230:	strbcc	r1, [r7, r8]
   14234:	add	r2, r8, #1
   14238:	cmp	r2, r4
   1423c:	movcc	r1, #34	; 0x22
   14240:	strbcc	r1, [r7, r2]
   14244:	add	r2, r8, #2
   14248:	cmp	r2, r4
   1424c:	movcc	r1, #34	; 0x22
   14250:	strbcc	r1, [r7, r2]
   14254:	add	r2, r8, #3
   14258:	cmp	r2, r4
   1425c:	movcc	r1, #63	; 0x3f
   14260:	strbcc	r1, [r7, r2]
   14264:	add	r8, r8, #4
   14268:	mov	r6, r0
   1426c:	mov	r5, r9
   14270:	mov	r9, #0
   14274:	b	13cc4 <__assert_fail@plt+0x2bd8>
   14278:	add	r1, r2, r6
   1427c:	str	r1, [sp, #44]	; 0x2c
   14280:	add	r1, r6, #1
   14284:	mov	r3, #0
   14288:	ldr	lr, [sp, #28]
   1428c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14290:	tst	r0, #1
   14294:	bne	14388 <__assert_fail@plt+0x329c>
   14298:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1429c:	tst	r2, #1
   142a0:	bne	14650 <__assert_fail@plt+0x3564>
   142a4:	cmp	r6, #2
   142a8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   142ac:	movwne	r3, #1
   142b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   142b4:	orr	r3, r3, r2
   142b8:	tst	r3, #1
   142bc:	bne	142f8 <__assert_fail@plt+0x320c>
   142c0:	cmp	r8, r4
   142c4:	movcc	r2, #39	; 0x27
   142c8:	strbcc	r2, [r7, r8]
   142cc:	add	r3, r8, #1
   142d0:	cmp	r3, r4
   142d4:	movcc	r2, #36	; 0x24
   142d8:	strbcc	r2, [r7, r3]
   142dc:	add	r3, r8, #2
   142e0:	cmp	r3, r4
   142e4:	movcc	r2, #39	; 0x27
   142e8:	strbcc	r2, [r7, r3]
   142ec:	add	r8, r8, #3
   142f0:	mov	r2, #1
   142f4:	str	r2, [fp, #-56]	; 0xffffffc8
   142f8:	cmp	r8, r4
   142fc:	movcc	r2, #92	; 0x5c
   14300:	strbcc	r2, [r7, r8]
   14304:	add	r3, r8, #1
   14308:	cmp	r3, r4
   1430c:	bcs	1432c <__assert_fail@plt+0x3240>
   14310:	and	r7, r5, #192	; 0xc0
   14314:	mov	r2, #48	; 0x30
   14318:	orr	r7, r2, r7, lsr #6
   1431c:	ldr	r6, [sp, #80]	; 0x50
   14320:	strb	r7, [r6, r3]
   14324:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14328:	ldr	r7, [sp, #80]	; 0x50
   1432c:	add	r3, r8, #2
   14330:	cmp	r3, r4
   14334:	bcs	14354 <__assert_fail@plt+0x3268>
   14338:	lsr	r7, r5, #3
   1433c:	mov	r2, #6
   14340:	bfi	r7, r2, #3, #29
   14344:	ldr	r6, [sp, #80]	; 0x50
   14348:	strb	r7, [r6, r3]
   1434c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14350:	ldr	r7, [sp, #80]	; 0x50
   14354:	mov	r2, #6
   14358:	bfi	r5, r2, #3, #29
   1435c:	add	r8, r8, #3
   14360:	mov	r3, #1
   14364:	b	143ac <__assert_fail@plt+0x32c0>
   14368:	ldr	r7, [sp, #80]	; 0x50
   1436c:	cmp	r8, r4
   14370:	strbcc	r5, [r7, r8]
   14374:	ldrb	r5, [ip, r1]
   14378:	add	r1, r1, #1
   1437c:	add	r8, r8, #1
   14380:	tst	r0, #1
   14384:	beq	14298 <__assert_fail@plt+0x31ac>
   14388:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1438c:	tst	r2, #1
   14390:	beq	143a4 <__assert_fail@plt+0x32b8>
   14394:	cmp	r8, r4
   14398:	movcc	r2, #92	; 0x5c
   1439c:	strbcc	r2, [r7, r8]
   143a0:	add	r8, r8, #1
   143a4:	mov	r2, #0
   143a8:	str	r2, [fp, #-52]	; 0xffffffcc
   143ac:	and	sl, r3, #1
   143b0:	ldr	r2, [sp, #44]	; 0x2c
   143b4:	cmp	r2, r1
   143b8:	bls	144c4 <__assert_fail@plt+0x33d8>
   143bc:	cmp	sl, #0
   143c0:	movwne	sl, #1
   143c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   143c8:	mvn	r7, r2
   143cc:	orr	r7, r7, sl
   143d0:	tst	r7, #1
   143d4:	bne	14368 <__assert_fail@plt+0x327c>
   143d8:	cmp	r8, r4
   143dc:	ldrcc	r7, [sp, #80]	; 0x50
   143e0:	movcc	r2, #39	; 0x27
   143e4:	strbcc	r2, [r7, r8]
   143e8:	add	r7, r8, #1
   143ec:	cmp	r7, r4
   143f0:	ldrcc	r6, [sp, #80]	; 0x50
   143f4:	movcc	r2, #39	; 0x27
   143f8:	strbcc	r2, [r6, r7]
   143fc:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   14400:	add	r8, r8, #2
   14404:	mov	r2, #0
   14408:	str	r2, [fp, #-56]	; 0xffffffc8
   1440c:	b	14368 <__assert_fail@plt+0x327c>
   14410:	cmp	r8, r4
   14414:	movcc	r0, #39	; 0x27
   14418:	strbcc	r0, [r7, r8]
   1441c:	add	r0, r8, #1
   14420:	cmp	r0, r4
   14424:	movcc	r1, #36	; 0x24
   14428:	strbcc	r1, [r7, r0]
   1442c:	add	r0, r8, #2
   14430:	cmp	r0, r4
   14434:	movcc	r1, #39	; 0x27
   14438:	strbcc	r1, [r7, r0]
   1443c:	add	r0, r8, #3
   14440:	mov	r2, #1
   14444:	cmp	r0, r4
   14448:	movcc	r1, #92	; 0x5c
   1444c:	strbcc	r1, [r7, r0]
   14450:	str	r2, [fp, #-56]	; 0xffffffc8
   14454:	add	r8, r0, #1
   14458:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1445c:	cmp	r1, #2
   14460:	beq	144b4 <__assert_fail@plt+0x33c8>
   14464:	add	r1, r6, #1
   14468:	mov	r9, #0
   1446c:	mov	sl, #1
   14470:	mov	r5, #48	; 0x30
   14474:	cmp	r1, lr
   14478:	bcs	13cc4 <__assert_fail@plt+0x2bd8>
   1447c:	ldrb	r1, [ip, r1]
   14480:	sub	r1, r1, #48	; 0x30
   14484:	uxtb	r1, r1
   14488:	cmp	r1, #9
   1448c:	bhi	13cc4 <__assert_fail@plt+0x2bd8>
   14490:	cmp	r8, r4
   14494:	movcc	r1, #48	; 0x30
   14498:	strbcc	r1, [r7, r8]
   1449c:	add	r1, r0, #2
   144a0:	cmp	r1, r4
   144a4:	movcc	r2, #48	; 0x30
   144a8:	strbcc	r2, [r7, r1]
   144ac:	add	r8, r0, #3
   144b0:	b	13cc4 <__assert_fail@plt+0x2bd8>
   144b4:	mov	r0, #48	; 0x30
   144b8:	mov	sl, #1
   144bc:	mov	r9, #0
   144c0:	b	13f70 <__assert_fail@plt+0x2e84>
   144c4:	sub	r6, r1, #1
   144c8:	cmp	sl, #0
   144cc:	movwne	sl, #1
   144d0:	mov	r0, r5
   144d4:	cmp	sl, #0
   144d8:	bne	14518 <__assert_fail@plt+0x342c>
   144dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   144e0:	tst	r1, #1
   144e4:	beq	14518 <__assert_fail@plt+0x342c>
   144e8:	cmp	r8, r4
   144ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   144f0:	movcc	r1, #39	; 0x27
   144f4:	strbcc	r1, [r7, r8]
   144f8:	add	r1, r8, #1
   144fc:	cmp	r1, r4
   14500:	movcc	r2, #39	; 0x27
   14504:	strbcc	r2, [r7, r1]
   14508:	add	r8, r8, #2
   1450c:	mov	r1, #0
   14510:	str	r1, [fp, #-56]	; 0xffffffc8
   14514:	b	13ffc <__assert_fail@plt+0x2f10>
   14518:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1451c:	b	13ffc <__assert_fail@plt+0x2f10>
   14520:	mov	r9, #0
   14524:	b	14560 <__assert_fail@plt+0x3474>
   14528:	mov	r9, #0
   1452c:	cmp	r7, lr
   14530:	bcs	14560 <__assert_fail@plt+0x3474>
   14534:	ldr	ip, [fp, #-84]	; 0xffffffac
   14538:	ldr	r7, [sp, #44]	; 0x2c
   1453c:	ldr	r0, [sp, #20]
   14540:	ldrb	r0, [r0, r7]
   14544:	cmp	r0, #0
   14548:	beq	14568 <__assert_fail@plt+0x347c>
   1454c:	add	r7, r7, #1
   14550:	add	r0, r6, r7
   14554:	cmp	r0, lr
   14558:	bcc	1453c <__assert_fail@plt+0x3450>
   1455c:	b	14568 <__assert_fail@plt+0x347c>
   14560:	ldr	ip, [fp, #-84]	; 0xffffffac
   14564:	ldr	r7, [sp, #44]	; 0x2c
   14568:	mov	r1, r7
   1456c:	ldr	r7, [sp, #80]	; 0x50
   14570:	b	13e98 <__assert_fail@plt+0x2dac>
   14574:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14578:	eor	r0, r1, #2
   1457c:	orr	r0, r0, r8
   14580:	clz	r0, r0
   14584:	lsr	r0, r0, #5
   14588:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1458c:	tst	r2, r0
   14590:	bne	14650 <__assert_fail@plt+0x3564>
   14594:	cmp	r1, #2
   14598:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1459c:	movwne	r0, #1
   145a0:	orr	r0, r2, r0
   145a4:	tst	r0, #1
   145a8:	ldreq	r0, [sp, #56]	; 0x38
   145ac:	eoreq	r0, r0, #1
   145b0:	tsteq	r0, #1
   145b4:	bne	145e8 <__assert_fail@plt+0x34fc>
   145b8:	mov	r9, lr
   145bc:	tst	r5, #1
   145c0:	bne	146b8 <__assert_fail@plt+0x35cc>
   145c4:	ldr	r0, [sp, #72]	; 0x48
   145c8:	cmp	r0, #0
   145cc:	beq	145e8 <__assert_fail@plt+0x34fc>
   145d0:	mov	r5, #0
   145d4:	cmp	r4, #0
   145d8:	ldr	r0, [sp, #84]	; 0x54
   145dc:	mov	sl, r2
   145e0:	ldr	r6, [sp, #72]	; 0x48
   145e4:	beq	13780 <__assert_fail@plt+0x2694>
   145e8:	ldr	r1, [sp, #92]	; 0x5c
   145ec:	clz	r0, r1
   145f0:	lsr	r0, r0, #5
   145f4:	orr	r0, r0, r2
   145f8:	tst	r0, #1
   145fc:	bne	14628 <__assert_fail@plt+0x353c>
   14600:	ldrb	r0, [r1]
   14604:	cmp	r0, #0
   14608:	beq	14628 <__assert_fail@plt+0x353c>
   1460c:	add	r1, r1, #1
   14610:	cmp	r8, r4
   14614:	strbcc	r0, [r7, r8]
   14618:	add	r8, r8, #1
   1461c:	ldrb	r0, [r1], #1
   14620:	cmp	r0, #0
   14624:	bne	14610 <__assert_fail@plt+0x3524>
   14628:	cmp	r8, r4
   1462c:	movcc	r0, #0
   14630:	strbcc	r0, [r7, r8]
   14634:	b	146ac <__assert_fail@plt+0x35c0>
   14638:	ldr	ip, [fp, #-84]	; 0xffffffac
   1463c:	mov	lr, r4
   14640:	mov	r4, r5
   14644:	b	14650 <__assert_fail@plt+0x3564>
   14648:	ldr	r7, [sp, #80]	; 0x50
   1464c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14650:	mov	r0, #0
   14654:	ldr	r1, [fp, #12]
   14658:	bic	r1, r1, #2
   1465c:	ldr	r2, [sp, #84]	; 0x54
   14660:	tst	r2, #1
   14664:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14668:	mov	r2, r3
   1466c:	movwne	r2, #4
   14670:	cmp	r3, #2
   14674:	movne	r2, r3
   14678:	str	r2, [sp]
   1467c:	str	r1, [sp, #4]
   14680:	str	r0, [sp, #8]
   14684:	ldr	r0, [sp, #68]	; 0x44
   14688:	str	r0, [sp, #12]
   1468c:	ldr	r0, [sp, #76]	; 0x4c
   14690:	str	r0, [sp, #16]
   14694:	mov	r0, r7
   14698:	mov	r1, r4
   1469c:	mov	r2, ip
   146a0:	mov	r3, lr
   146a4:	bl	136f8 <__assert_fail@plt+0x260c>
   146a8:	mov	r8, r0
   146ac:	mov	r0, r8
   146b0:	sub	sp, fp, #28
   146b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146b8:	mov	r0, #5
   146bc:	str	r0, [sp]
   146c0:	ldr	r0, [fp, #12]
   146c4:	str	r0, [sp, #4]
   146c8:	ldr	r0, [fp, #16]
   146cc:	str	r0, [sp, #8]
   146d0:	ldr	r0, [sp, #68]	; 0x44
   146d4:	str	r0, [sp, #12]
   146d8:	ldr	r0, [sp, #76]	; 0x4c
   146dc:	str	r0, [sp, #16]
   146e0:	mov	r0, r7
   146e4:	ldr	r1, [sp, #72]	; 0x48
   146e8:	ldr	r2, [fp, #-84]	; 0xffffffac
   146ec:	mov	r3, r9
   146f0:	b	146a4 <__assert_fail@plt+0x35b8>
   146f4:	bl	110d4 <abort@plt>
   146f8:	mov	r3, r2
   146fc:	mov	r2, #0
   14700:	b	14704 <__assert_fail@plt+0x3618>
   14704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14708:	add	fp, sp, #28
   1470c:	sub	sp, sp, #36	; 0x24
   14710:	mov	r4, r2
   14714:	str	r2, [sp, #24]
   14718:	mov	r5, r1
   1471c:	mov	r6, r0
   14720:	str	r0, [sp, #20]
   14724:	movw	r8, #33136	; 0x8170
   14728:	movt	r8, #2
   1472c:	cmp	r3, #0
   14730:	movne	r8, r3
   14734:	bl	11014 <__errno_location@plt>
   14738:	str	r0, [sp, #28]
   1473c:	ldm	r8, {r3, r9}
   14740:	ldr	r1, [r8, #40]	; 0x28
   14744:	ldr	r2, [r8, #44]	; 0x2c
   14748:	ldr	r7, [r0]
   1474c:	str	r7, [sp, #32]
   14750:	add	sl, r8, #8
   14754:	cmp	r4, #0
   14758:	orreq	r9, r9, #1
   1475c:	stm	sp, {r3, r9, sl}
   14760:	str	r1, [sp, #12]
   14764:	str	r2, [sp, #16]
   14768:	mov	r0, #0
   1476c:	mov	r1, #0
   14770:	mov	r2, r6
   14774:	mov	r3, r5
   14778:	mov	r7, r5
   1477c:	bl	136f8 <__assert_fail@plt+0x260c>
   14780:	mov	r5, r0
   14784:	add	r4, r0, #1
   14788:	mov	r0, r4
   1478c:	bl	1569c <__assert_fail@plt+0x45b0>
   14790:	mov	r6, r0
   14794:	ldr	r0, [r8]
   14798:	ldr	r1, [r8, #40]	; 0x28
   1479c:	ldr	r2, [r8, #44]	; 0x2c
   147a0:	stm	sp, {r0, r9, sl}
   147a4:	str	r1, [sp, #12]
   147a8:	str	r2, [sp, #16]
   147ac:	mov	r0, r6
   147b0:	mov	r1, r4
   147b4:	ldr	r2, [sp, #20]
   147b8:	mov	r3, r7
   147bc:	bl	136f8 <__assert_fail@plt+0x260c>
   147c0:	ldr	r0, [sp, #24]
   147c4:	ldr	r1, [sp, #32]
   147c8:	ldr	r2, [sp, #28]
   147cc:	str	r1, [r2]
   147d0:	cmp	r0, #0
   147d4:	strne	r5, [r0]
   147d8:	mov	r0, r6
   147dc:	sub	sp, fp, #28
   147e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147e8:	add	fp, sp, #24
   147ec:	movw	r8, #33024	; 0x8100
   147f0:	movt	r8, #2
   147f4:	ldr	r4, [r8]
   147f8:	movw	r5, #33028	; 0x8104
   147fc:	movt	r5, #2
   14800:	ldr	r0, [r5]
   14804:	cmp	r0, #2
   14808:	blt	14834 <__assert_fail@plt+0x3748>
   1480c:	add	r7, r4, #12
   14810:	mov	r6, #0
   14814:	ldr	r0, [r7, r6, lsl #3]
   14818:	bl	13304 <__assert_fail@plt+0x2218>
   1481c:	add	r0, r6, #1
   14820:	ldr	r1, [r5]
   14824:	add	r2, r6, #2
   14828:	cmp	r2, r1
   1482c:	mov	r6, r0
   14830:	blt	14814 <__assert_fail@plt+0x3728>
   14834:	ldr	r0, [r4, #4]
   14838:	movw	r7, #33184	; 0x81a0
   1483c:	movt	r7, #2
   14840:	cmp	r0, r7
   14844:	beq	1485c <__assert_fail@plt+0x3770>
   14848:	bl	13304 <__assert_fail@plt+0x2218>
   1484c:	movw	r0, #33032	; 0x8108
   14850:	movt	r0, #2
   14854:	mov	r6, #256	; 0x100
   14858:	strd	r6, [r0]
   1485c:	movw	r6, #33032	; 0x8108
   14860:	movt	r6, #2
   14864:	cmp	r4, r6
   14868:	beq	14878 <__assert_fail@plt+0x378c>
   1486c:	mov	r0, r4
   14870:	bl	13304 <__assert_fail@plt+0x2218>
   14874:	str	r6, [r8]
   14878:	mov	r0, #1
   1487c:	str	r0, [r5]
   14880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14884:	movw	r3, #33136	; 0x8170
   14888:	movt	r3, #2
   1488c:	mvn	r2, #0
   14890:	b	14894 <__assert_fail@plt+0x37a8>
   14894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14898:	add	fp, sp, #28
   1489c:	sub	sp, sp, #44	; 0x2c
   148a0:	mov	r7, r3
   148a4:	str	r2, [sp, #36]	; 0x24
   148a8:	str	r1, [sp, #32]
   148ac:	mov	r5, r0
   148b0:	bl	11014 <__errno_location@plt>
   148b4:	cmp	r5, #0
   148b8:	blt	14a24 <__assert_fail@plt+0x3938>
   148bc:	cmn	r5, #-2147483647	; 0x80000001
   148c0:	beq	14a24 <__assert_fail@plt+0x3938>
   148c4:	movw	r4, #33024	; 0x8100
   148c8:	movt	r4, #2
   148cc:	ldr	r6, [r4]
   148d0:	str	r0, [sp, #28]
   148d4:	ldr	r0, [r0]
   148d8:	str	r0, [sp, #24]
   148dc:	movw	r8, #33028	; 0x8104
   148e0:	movt	r8, #2
   148e4:	ldr	r1, [r8]
   148e8:	cmp	r1, r5
   148ec:	ble	148f8 <__assert_fail@plt+0x380c>
   148f0:	mov	sl, r6
   148f4:	b	14960 <__assert_fail@plt+0x3874>
   148f8:	str	r1, [fp, #-32]	; 0xffffffe0
   148fc:	mov	r0, #8
   14900:	str	r0, [sp]
   14904:	movw	r9, #33032	; 0x8108
   14908:	movt	r9, #2
   1490c:	subs	r0, r6, r9
   14910:	movne	r0, r6
   14914:	add	r2, r5, #1
   14918:	sub	r2, r2, r1
   1491c:	sub	r1, fp, #32
   14920:	mvn	r3, #-2147483648	; 0x80000000
   14924:	bl	15784 <__assert_fail@plt+0x4698>
   14928:	mov	sl, r0
   1492c:	str	r0, [r4]
   14930:	cmp	r6, r9
   14934:	ldrdeq	r0, [r9]
   14938:	stmeq	sl, {r0, r1}
   1493c:	ldr	r1, [r8]
   14940:	add	r0, sl, r1, lsl #3
   14944:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14948:	sub	r1, r2, r1
   1494c:	lsl	r2, r1, #3
   14950:	mov	r1, #0
   14954:	bl	1102c <memset@plt>
   14958:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1495c:	str	r0, [r8]
   14960:	mov	r9, sl
   14964:	ldr	r6, [r9, r5, lsl #3]!
   14968:	ldr	r4, [r9, #4]!
   1496c:	ldm	r7, {r0, r1}
   14970:	ldr	r2, [r7, #40]	; 0x28
   14974:	ldr	r3, [r7, #44]	; 0x2c
   14978:	orr	r8, r1, #1
   1497c:	add	r1, r7, #8
   14980:	stm	sp, {r0, r8}
   14984:	str	r1, [sp, #20]
   14988:	add	r0, sp, #8
   1498c:	stm	r0, {r1, r2, r3}
   14990:	mov	r0, r4
   14994:	mov	r1, r6
   14998:	ldr	r2, [sp, #32]
   1499c:	ldr	r3, [sp, #36]	; 0x24
   149a0:	bl	136f8 <__assert_fail@plt+0x260c>
   149a4:	cmp	r6, r0
   149a8:	bhi	14a0c <__assert_fail@plt+0x3920>
   149ac:	add	r6, r0, #1
   149b0:	str	r6, [sl, r5, lsl #3]
   149b4:	movw	r0, #33184	; 0x81a0
   149b8:	movt	r0, #2
   149bc:	cmp	r4, r0
   149c0:	beq	149cc <__assert_fail@plt+0x38e0>
   149c4:	mov	r0, r4
   149c8:	bl	13304 <__assert_fail@plt+0x2218>
   149cc:	mov	r0, r6
   149d0:	bl	1569c <__assert_fail@plt+0x45b0>
   149d4:	mov	r4, r0
   149d8:	str	r0, [r9]
   149dc:	ldr	r0, [r7]
   149e0:	ldr	r1, [r7, #40]	; 0x28
   149e4:	ldr	r2, [r7, #44]	; 0x2c
   149e8:	stm	sp, {r0, r8}
   149ec:	ldr	r0, [sp, #20]
   149f0:	add	r3, sp, #8
   149f4:	stm	r3, {r0, r1, r2}
   149f8:	mov	r0, r4
   149fc:	mov	r1, r6
   14a00:	ldr	r2, [sp, #32]
   14a04:	ldr	r3, [sp, #36]	; 0x24
   14a08:	bl	136f8 <__assert_fail@plt+0x260c>
   14a0c:	ldr	r0, [sp, #28]
   14a10:	ldr	r1, [sp, #24]
   14a14:	str	r1, [r0]
   14a18:	mov	r0, r4
   14a1c:	sub	sp, fp, #28
   14a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a24:	bl	110d4 <abort@plt>
   14a28:	movw	r3, #33136	; 0x8170
   14a2c:	movt	r3, #2
   14a30:	b	14894 <__assert_fail@plt+0x37a8>
   14a34:	mov	r1, r0
   14a38:	mov	r0, #0
   14a3c:	b	14884 <__assert_fail@plt+0x3798>
   14a40:	mov	r2, r1
   14a44:	mov	r1, r0
   14a48:	mov	r0, #0
   14a4c:	b	14a28 <__assert_fail@plt+0x393c>
   14a50:	push	{r4, r5, r6, sl, fp, lr}
   14a54:	add	fp, sp, #16
   14a58:	sub	sp, sp, #48	; 0x30
   14a5c:	mov	r4, r2
   14a60:	mov	r5, r0
   14a64:	mov	r6, sp
   14a68:	mov	r0, r6
   14a6c:	bl	14a8c <__assert_fail@plt+0x39a0>
   14a70:	mov	r0, r5
   14a74:	mov	r1, r4
   14a78:	mvn	r2, #0
   14a7c:	mov	r3, r6
   14a80:	bl	14894 <__assert_fail@plt+0x37a8>
   14a84:	sub	sp, fp, #16
   14a88:	pop	{r4, r5, r6, sl, fp, pc}
   14a8c:	vmov.i32	q8, #0	; 0x00000000
   14a90:	mov	r2, #32
   14a94:	mov	r3, r0
   14a98:	vst1.32	{d16-d17}, [r3], r2
   14a9c:	vst1.32	{d16-d17}, [r3]
   14aa0:	add	r2, r0, #16
   14aa4:	vst1.32	{d16-d17}, [r2]
   14aa8:	cmp	r1, #10
   14aac:	strne	r1, [r0]
   14ab0:	bxne	lr
   14ab4:	push	{fp, lr}
   14ab8:	mov	fp, sp
   14abc:	bl	110d4 <abort@plt>
   14ac0:	push	{r4, r5, r6, r7, fp, lr}
   14ac4:	add	fp, sp, #16
   14ac8:	sub	sp, sp, #48	; 0x30
   14acc:	mov	r4, r3
   14ad0:	mov	r5, r2
   14ad4:	mov	r6, r0
   14ad8:	mov	r7, sp
   14adc:	mov	r0, r7
   14ae0:	bl	14a8c <__assert_fail@plt+0x39a0>
   14ae4:	mov	r0, r6
   14ae8:	mov	r1, r5
   14aec:	mov	r2, r4
   14af0:	mov	r3, r7
   14af4:	bl	14894 <__assert_fail@plt+0x37a8>
   14af8:	sub	sp, fp, #16
   14afc:	pop	{r4, r5, r6, r7, fp, pc}
   14b00:	mov	r2, r1
   14b04:	mov	r1, r0
   14b08:	mov	r0, #0
   14b0c:	b	14a50 <__assert_fail@plt+0x3964>
   14b10:	mov	r3, r2
   14b14:	mov	r2, r1
   14b18:	mov	r1, r0
   14b1c:	mov	r0, #0
   14b20:	b	14ac0 <__assert_fail@plt+0x39d4>
   14b24:	push	{r4, r5, r6, sl, fp, lr}
   14b28:	add	fp, sp, #16
   14b2c:	sub	sp, sp, #48	; 0x30
   14b30:	mov	r4, r1
   14b34:	mov	r5, r0
   14b38:	mov	r0, #32
   14b3c:	movw	r1, #33136	; 0x8170
   14b40:	movt	r1, #2
   14b44:	add	r3, r1, #16
   14b48:	vld1.64	{d16-d17}, [r1], r0
   14b4c:	mov	r6, sp
   14b50:	vld1.64	{d18-d19}, [r3]
   14b54:	add	r3, r6, #16
   14b58:	vld1.64	{d20-d21}, [r1]
   14b5c:	vst1.64	{d18-d19}, [r3]
   14b60:	mov	r1, r6
   14b64:	vst1.64	{d16-d17}, [r1], r0
   14b68:	vst1.64	{d20-d21}, [r1]
   14b6c:	mov	r0, r6
   14b70:	mov	r1, r2
   14b74:	mov	r2, #1
   14b78:	bl	135ec <__assert_fail@plt+0x2500>
   14b7c:	mov	r0, #0
   14b80:	mov	r1, r5
   14b84:	mov	r2, r4
   14b88:	mov	r3, r6
   14b8c:	bl	14894 <__assert_fail@plt+0x37a8>
   14b90:	sub	sp, fp, #16
   14b94:	pop	{r4, r5, r6, sl, fp, pc}
   14b98:	mov	r2, r1
   14b9c:	mvn	r1, #0
   14ba0:	b	14b24 <__assert_fail@plt+0x3a38>
   14ba4:	mov	r1, #58	; 0x3a
   14ba8:	b	14b98 <__assert_fail@plt+0x3aac>
   14bac:	mov	r2, #58	; 0x3a
   14bb0:	b	14b24 <__assert_fail@plt+0x3a38>
   14bb4:	push	{r4, r5, r6, sl, fp, lr}
   14bb8:	add	fp, sp, #16
   14bbc:	sub	sp, sp, #48	; 0x30
   14bc0:	mov	r4, r2
   14bc4:	mov	r5, r0
   14bc8:	mov	r6, sp
   14bcc:	mov	r0, r6
   14bd0:	bl	14a8c <__assert_fail@plt+0x39a0>
   14bd4:	mov	r0, r6
   14bd8:	mov	r1, #58	; 0x3a
   14bdc:	mov	r2, #1
   14be0:	bl	135ec <__assert_fail@plt+0x2500>
   14be4:	mov	r0, r5
   14be8:	mov	r1, r4
   14bec:	mvn	r2, #0
   14bf0:	mov	r3, r6
   14bf4:	bl	14894 <__assert_fail@plt+0x37a8>
   14bf8:	sub	sp, fp, #16
   14bfc:	pop	{r4, r5, r6, sl, fp, pc}
   14c00:	push	{fp, lr}
   14c04:	mov	fp, sp
   14c08:	sub	sp, sp, #8
   14c0c:	mvn	ip, #0
   14c10:	str	ip, [sp]
   14c14:	bl	14c20 <__assert_fail@plt+0x3b34>
   14c18:	mov	sp, fp
   14c1c:	pop	{fp, pc}
   14c20:	push	{r4, r5, r6, r7, fp, lr}
   14c24:	add	fp, sp, #16
   14c28:	sub	sp, sp, #48	; 0x30
   14c2c:	mov	r7, r3
   14c30:	mov	r5, r0
   14c34:	mov	r0, #32
   14c38:	movw	r3, #33136	; 0x8170
   14c3c:	movt	r3, #2
   14c40:	add	r4, r3, #16
   14c44:	vld1.64	{d16-d17}, [r3], r0
   14c48:	mov	r6, sp
   14c4c:	vld1.64	{d18-d19}, [r4]
   14c50:	add	r4, r6, #16
   14c54:	vld1.64	{d20-d21}, [r3]
   14c58:	vst1.64	{d18-d19}, [r4]
   14c5c:	mov	r3, r6
   14c60:	vst1.64	{d16-d17}, [r3], r0
   14c64:	vst1.64	{d20-d21}, [r3]
   14c68:	mov	r0, r6
   14c6c:	bl	13644 <__assert_fail@plt+0x2558>
   14c70:	ldr	r2, [fp, #8]
   14c74:	mov	r0, r5
   14c78:	mov	r1, r7
   14c7c:	mov	r3, r6
   14c80:	bl	14894 <__assert_fail@plt+0x37a8>
   14c84:	sub	sp, fp, #16
   14c88:	pop	{r4, r5, r6, r7, fp, pc}
   14c8c:	mov	r3, r2
   14c90:	mov	r2, r1
   14c94:	mov	r1, r0
   14c98:	mov	r0, #0
   14c9c:	b	14c00 <__assert_fail@plt+0x3b14>
   14ca0:	push	{fp, lr}
   14ca4:	mov	fp, sp
   14ca8:	sub	sp, sp, #8
   14cac:	mov	ip, r2
   14cb0:	mov	r2, r1
   14cb4:	mov	r1, r0
   14cb8:	str	r3, [sp]
   14cbc:	mov	r0, #0
   14cc0:	mov	r3, ip
   14cc4:	bl	14c20 <__assert_fail@plt+0x3b34>
   14cc8:	mov	sp, fp
   14ccc:	pop	{fp, pc}
   14cd0:	movw	r3, #33040	; 0x8110
   14cd4:	movt	r3, #2
   14cd8:	b	14894 <__assert_fail@plt+0x37a8>
   14cdc:	mov	r2, r1
   14ce0:	mov	r1, r0
   14ce4:	mov	r0, #0
   14ce8:	b	14cd0 <__assert_fail@plt+0x3be4>
   14cec:	mvn	r2, #0
   14cf0:	b	14cd0 <__assert_fail@plt+0x3be4>
   14cf4:	mov	r1, r0
   14cf8:	mov	r0, #0
   14cfc:	b	14cec <__assert_fail@plt+0x3c00>
   14d00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d04:	add	fp, sp, #24
   14d08:	sub	sp, sp, #16
   14d0c:	mov	r4, r1
   14d10:	mov	r5, r0
   14d14:	mov	r7, #0
   14d18:	mov	r0, #0
   14d1c:	mov	r1, r5
   14d20:	mov	r2, #5
   14d24:	bl	10ef4 <dcgettext@plt>
   14d28:	cmp	r0, r5
   14d2c:	beq	14d38 <__assert_fail@plt+0x3c4c>
   14d30:	sub	sp, fp, #24
   14d34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d38:	bl	16718 <__assert_fail@plt+0x562c>
   14d3c:	mov	r6, r0
   14d40:	mov	r8, #56	; 0x38
   14d44:	mov	r0, #45	; 0x2d
   14d48:	stm	sp, {r0, r8}
   14d4c:	str	r7, [sp, #8]
   14d50:	str	r7, [sp, #12]
   14d54:	mov	r0, r6
   14d58:	mov	r1, #85	; 0x55
   14d5c:	mov	r2, #84	; 0x54
   14d60:	mov	r3, #70	; 0x46
   14d64:	bl	14dfc <__assert_fail@plt+0x3d10>
   14d68:	cmp	r0, #0
   14d6c:	beq	14d88 <__assert_fail@plt+0x3c9c>
   14d70:	ldrb	r1, [r5]
   14d74:	movw	r2, #30097	; 0x7591
   14d78:	movt	r2, #1
   14d7c:	movw	r0, #30101	; 0x7595
   14d80:	movt	r0, #1
   14d84:	b	14dcc <__assert_fail@plt+0x3ce0>
   14d88:	mov	r0, #48	; 0x30
   14d8c:	mov	r1, #51	; 0x33
   14d90:	str	r8, [sp]
   14d94:	stmib	sp, {r0, r1}
   14d98:	str	r0, [sp, #12]
   14d9c:	mov	r0, r6
   14da0:	mov	r1, #71	; 0x47
   14da4:	mov	r2, #66	; 0x42
   14da8:	mov	r3, #49	; 0x31
   14dac:	bl	14dfc <__assert_fail@plt+0x3d10>
   14db0:	cmp	r0, #0
   14db4:	beq	14ddc <__assert_fail@plt+0x3cf0>
   14db8:	ldrb	r1, [r5]
   14dbc:	movw	r2, #30105	; 0x7599
   14dc0:	movt	r2, #1
   14dc4:	movw	r0, #30109	; 0x759d
   14dc8:	movt	r0, #1
   14dcc:	cmp	r1, #96	; 0x60
   14dd0:	moveq	r0, r2
   14dd4:	sub	sp, fp, #24
   14dd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ddc:	movw	r1, #30091	; 0x758b
   14de0:	movt	r1, #1
   14de4:	movw	r0, #30095	; 0x758f
   14de8:	movt	r0, #1
   14dec:	cmp	r4, #9
   14df0:	moveq	r0, r1
   14df4:	sub	sp, fp, #24
   14df8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14dfc:	push	{r4, r5, r6, r7, fp, lr}
   14e00:	add	fp, sp, #16
   14e04:	sub	sp, sp, #16
   14e08:	mov	r4, r3
   14e0c:	mov	r5, r2
   14e10:	mov	r7, r1
   14e14:	mov	r6, r0
   14e18:	mov	r0, r1
   14e1c:	bl	16424 <__assert_fail@plt+0x5338>
   14e20:	ldrb	r1, [r6]
   14e24:	cmp	r0, #0
   14e28:	andne	r1, r1, #223	; 0xdf
   14e2c:	mov	r0, #0
   14e30:	cmp	r1, r7
   14e34:	bne	14e74 <__assert_fail@plt+0x3d88>
   14e38:	cmp	r7, #0
   14e3c:	moveq	r0, #1
   14e40:	subeq	sp, fp, #16
   14e44:	popeq	{r4, r5, r6, r7, fp, pc}
   14e48:	ldr	r0, [fp, #20]
   14e4c:	ldr	r1, [fp, #16]
   14e50:	ldr	r2, [fp, #12]
   14e54:	ldr	r3, [fp, #8]
   14e58:	str	r2, [sp]
   14e5c:	str	r1, [sp, #4]
   14e60:	str	r0, [sp, #8]
   14e64:	mov	r0, r6
   14e68:	mov	r1, r5
   14e6c:	mov	r2, r4
   14e70:	bl	14e7c <__assert_fail@plt+0x3d90>
   14e74:	sub	sp, fp, #16
   14e78:	pop	{r4, r5, r6, r7, fp, pc}
   14e7c:	push	{r4, r5, r6, r7, fp, lr}
   14e80:	add	fp, sp, #16
   14e84:	sub	sp, sp, #8
   14e88:	mov	r4, r3
   14e8c:	mov	r5, r2
   14e90:	mov	r7, r1
   14e94:	mov	r6, r0
   14e98:	mov	r0, r1
   14e9c:	bl	16424 <__assert_fail@plt+0x5338>
   14ea0:	ldrb	r1, [r6, #1]
   14ea4:	cmp	r0, #0
   14ea8:	andne	r1, r1, #223	; 0xdf
   14eac:	mov	r0, #0
   14eb0:	cmp	r1, r7
   14eb4:	bne	14eec <__assert_fail@plt+0x3e00>
   14eb8:	cmp	r7, #0
   14ebc:	moveq	r0, #1
   14ec0:	subeq	sp, fp, #16
   14ec4:	popeq	{r4, r5, r6, r7, fp, pc}
   14ec8:	ldr	r0, [fp, #16]
   14ecc:	ldr	r1, [fp, #12]
   14ed0:	ldr	r3, [fp, #8]
   14ed4:	str	r1, [sp]
   14ed8:	str	r0, [sp, #4]
   14edc:	mov	r0, r6
   14ee0:	mov	r1, r5
   14ee4:	mov	r2, r4
   14ee8:	bl	14ef4 <__assert_fail@plt+0x3e08>
   14eec:	sub	sp, fp, #16
   14ef0:	pop	{r4, r5, r6, r7, fp, pc}
   14ef4:	push	{r4, r5, r6, r7, fp, lr}
   14ef8:	add	fp, sp, #16
   14efc:	sub	sp, sp, #8
   14f00:	mov	r4, r3
   14f04:	mov	r5, r2
   14f08:	mov	r7, r1
   14f0c:	mov	r6, r0
   14f10:	mov	r0, r1
   14f14:	bl	16424 <__assert_fail@plt+0x5338>
   14f18:	ldrb	r1, [r6, #2]
   14f1c:	cmp	r0, #0
   14f20:	andne	r1, r1, #223	; 0xdf
   14f24:	mov	r0, #0
   14f28:	cmp	r1, r7
   14f2c:	bne	14f5c <__assert_fail@plt+0x3e70>
   14f30:	cmp	r7, #0
   14f34:	moveq	r0, #1
   14f38:	subeq	sp, fp, #16
   14f3c:	popeq	{r4, r5, r6, r7, fp, pc}
   14f40:	ldr	r0, [fp, #12]
   14f44:	ldr	r3, [fp, #8]
   14f48:	str	r0, [sp]
   14f4c:	mov	r0, r6
   14f50:	mov	r1, r5
   14f54:	mov	r2, r4
   14f58:	bl	14f64 <__assert_fail@plt+0x3e78>
   14f5c:	sub	sp, fp, #16
   14f60:	pop	{r4, r5, r6, r7, fp, pc}
   14f64:	push	{r4, r5, r6, r7, fp, lr}
   14f68:	add	fp, sp, #16
   14f6c:	mov	r4, r3
   14f70:	mov	r5, r2
   14f74:	mov	r7, r1
   14f78:	mov	r6, r0
   14f7c:	mov	r0, r1
   14f80:	bl	16424 <__assert_fail@plt+0x5338>
   14f84:	ldrb	r1, [r6, #3]
   14f88:	ldr	r3, [fp, #8]
   14f8c:	cmp	r0, #0
   14f90:	andne	r1, r1, #223	; 0xdf
   14f94:	mov	r0, #0
   14f98:	cmp	r1, r7
   14f9c:	popne	{r4, r5, r6, r7, fp, pc}
   14fa0:	cmp	r7, #0
   14fa4:	beq	14fbc <__assert_fail@plt+0x3ed0>
   14fa8:	mov	r0, r6
   14fac:	mov	r1, r5
   14fb0:	mov	r2, r4
   14fb4:	pop	{r4, r5, r6, r7, fp, lr}
   14fb8:	b	14fc4 <__assert_fail@plt+0x3ed8>
   14fbc:	mov	r0, #1
   14fc0:	pop	{r4, r5, r6, r7, fp, pc}
   14fc4:	push	{r4, r5, r6, r7, fp, lr}
   14fc8:	add	fp, sp, #16
   14fcc:	mov	r4, r3
   14fd0:	mov	r5, r2
   14fd4:	mov	r7, r1
   14fd8:	mov	r6, r0
   14fdc:	mov	r0, r1
   14fe0:	bl	16424 <__assert_fail@plt+0x5338>
   14fe4:	ldrb	r1, [r6, #4]
   14fe8:	cmp	r0, #0
   14fec:	andne	r1, r1, #223	; 0xdf
   14ff0:	mov	r0, #0
   14ff4:	cmp	r1, r7
   14ff8:	popne	{r4, r5, r6, r7, fp, pc}
   14ffc:	cmp	r7, #0
   15000:	beq	15018 <__assert_fail@plt+0x3f2c>
   15004:	mov	r0, r6
   15008:	mov	r1, r5
   1500c:	mov	r2, r4
   15010:	pop	{r4, r5, r6, r7, fp, lr}
   15014:	b	15020 <__assert_fail@plt+0x3f34>
   15018:	mov	r0, #1
   1501c:	pop	{r4, r5, r6, r7, fp, pc}
   15020:	push	{r4, r5, r6, sl, fp, lr}
   15024:	add	fp, sp, #16
   15028:	mov	r4, r2
   1502c:	mov	r6, r1
   15030:	mov	r5, r0
   15034:	mov	r0, r1
   15038:	bl	16424 <__assert_fail@plt+0x5338>
   1503c:	ldrb	r1, [r5, #5]
   15040:	cmp	r0, #0
   15044:	andne	r1, r1, #223	; 0xdf
   15048:	mov	r0, #0
   1504c:	cmp	r1, r6
   15050:	popne	{r4, r5, r6, sl, fp, pc}
   15054:	cmp	r6, #0
   15058:	beq	1506c <__assert_fail@plt+0x3f80>
   1505c:	mov	r0, r5
   15060:	mov	r1, r4
   15064:	pop	{r4, r5, r6, sl, fp, lr}
   15068:	b	15074 <__assert_fail@plt+0x3f88>
   1506c:	mov	r0, #1
   15070:	pop	{r4, r5, r6, sl, fp, pc}
   15074:	push	{r4, r5, fp, lr}
   15078:	add	fp, sp, #8
   1507c:	mov	r5, r1
   15080:	mov	r4, r0
   15084:	mov	r0, r1
   15088:	bl	16424 <__assert_fail@plt+0x5338>
   1508c:	ldrb	r1, [r4, #6]
   15090:	cmp	r0, #0
   15094:	andne	r1, r1, #223	; 0xdf
   15098:	mov	r0, #0
   1509c:	cmp	r1, r5
   150a0:	popne	{r4, r5, fp, pc}
   150a4:	cmp	r5, #0
   150a8:	beq	150b8 <__assert_fail@plt+0x3fcc>
   150ac:	mov	r0, r4
   150b0:	pop	{r4, r5, fp, lr}
   150b4:	b	150c0 <__assert_fail@plt+0x3fd4>
   150b8:	mov	r0, #1
   150bc:	pop	{r4, r5, fp, pc}
   150c0:	push	{r4, sl, fp, lr}
   150c4:	add	fp, sp, #8
   150c8:	mov	r4, r0
   150cc:	mov	r0, #0
   150d0:	bl	16424 <__assert_fail@plt+0x5338>
   150d4:	ldrb	r1, [r4, #7]
   150d8:	cmp	r0, #0
   150dc:	beq	150f4 <__assert_fail@plt+0x4008>
   150e0:	tst	r1, #223	; 0xdf
   150e4:	moveq	r0, #1
   150e8:	popeq	{r4, sl, fp, pc}
   150ec:	mov	r0, #0
   150f0:	pop	{r4, sl, fp, pc}
   150f4:	cmp	r1, #0
   150f8:	moveq	r0, #1
   150fc:	popeq	{r4, sl, fp, pc}
   15100:	mov	r0, #0
   15104:	pop	{r4, sl, fp, pc}
   15108:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1510c:	add	fp, sp, #24
   15110:	mov	r7, r2
   15114:	mov	r5, r1
   15118:	mov	r6, r0
   1511c:	movw	r9, #0
   15120:	movt	r9, #32752	; 0x7ff0
   15124:	mov	r0, r6
   15128:	mov	r1, r5
   1512c:	mov	r2, r7
   15130:	bl	10e94 <read@plt>
   15134:	mov	r4, r0
   15138:	cmn	r0, #1
   1513c:	movgt	r0, r4
   15140:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   15144:	bl	11014 <__errno_location@plt>
   15148:	ldr	r0, [r0]
   1514c:	cmp	r0, #4
   15150:	beq	15124 <__assert_fail@plt+0x4038>
   15154:	cmp	r7, r9
   15158:	mov	r1, #0
   1515c:	movwhi	r1, #1
   15160:	sub	r2, r0, #22
   15164:	clz	r2, r2
   15168:	lsr	r2, r2, #5
   1516c:	ands	r1, r1, r2
   15170:	moveq	r8, r4
   15174:	mov	r1, r7
   15178:	movwne	r1, #0
   1517c:	movtne	r1, #32752	; 0x7ff0
   15180:	cmp	r7, r9
   15184:	bls	15194 <__assert_fail@plt+0x40a8>
   15188:	cmp	r0, #22
   1518c:	mov	r7, r1
   15190:	beq	15124 <__assert_fail@plt+0x4038>
   15194:	mov	r0, r8
   15198:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1519c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   151a0:	add	fp, sp, #24
   151a4:	sub	sp, sp, #32
   151a8:	mov	r4, r2
   151ac:	mov	r8, r0
   151b0:	ldr	r6, [fp, #12]
   151b4:	ldr	r7, [fp, #8]
   151b8:	cmp	r1, #0
   151bc:	beq	151e4 <__assert_fail@plt+0x40f8>
   151c0:	mov	r5, r1
   151c4:	str	r4, [sp]
   151c8:	str	r3, [sp, #4]
   151cc:	movw	r2, #30196	; 0x75f4
   151d0:	movt	r2, #1
   151d4:	mov	r0, r8
   151d8:	mov	r1, #1
   151dc:	mov	r3, r5
   151e0:	b	151fc <__assert_fail@plt+0x4110>
   151e4:	str	r3, [sp]
   151e8:	movw	r2, #30208	; 0x7600
   151ec:	movt	r2, #1
   151f0:	mov	r0, r8
   151f4:	mov	r1, #1
   151f8:	mov	r3, r4
   151fc:	bl	1105c <__fprintf_chk@plt>
   15200:	movw	r1, #30215	; 0x7607
   15204:	movt	r1, #1
   15208:	mov	r0, #0
   1520c:	mov	r2, #5
   15210:	bl	10ef4 <dcgettext@plt>
   15214:	mov	r3, r0
   15218:	movw	r0, #2022	; 0x7e6
   1521c:	str	r0, [sp]
   15220:	movw	r2, #30933	; 0x78d5
   15224:	movt	r2, #1
   15228:	mov	r0, r8
   1522c:	mov	r1, #1
   15230:	bl	1105c <__fprintf_chk@plt>
   15234:	movw	r4, #29312	; 0x7280
   15238:	movt	r4, #1
   1523c:	mov	r0, r4
   15240:	mov	r1, r8
   15244:	bl	10e70 <fputs_unlocked@plt>
   15248:	movw	r1, #30219	; 0x760b
   1524c:	movt	r1, #1
   15250:	mov	r0, #0
   15254:	mov	r2, #5
   15258:	bl	10ef4 <dcgettext@plt>
   1525c:	mov	r2, r0
   15260:	movw	r3, #30390	; 0x76b6
   15264:	movt	r3, #1
   15268:	mov	r0, r8
   1526c:	mov	r1, #1
   15270:	bl	1105c <__fprintf_chk@plt>
   15274:	mov	r0, r4
   15278:	mov	r1, r8
   1527c:	bl	10e70 <fputs_unlocked@plt>
   15280:	cmp	r6, #9
   15284:	bhi	152c0 <__assert_fail@plt+0x41d4>
   15288:	add	r0, pc, #0
   1528c:	ldr	pc, [r0, r6, lsl #2]
   15290:			; <UNDEFINED> instruction: 0x000152b8
   15294:	andeq	r5, r1, ip, asr #5
   15298:	strdeq	r5, [r1], -ip
   1529c:	andeq	r5, r1, r4, lsr #6
   152a0:	andeq	r5, r1, ip, asr #6
   152a4:	andeq	r5, r1, r4, ror r3
   152a8:	muleq	r1, ip, r3
   152ac:	ldrdeq	r5, [r1], -r4
   152b0:	andeq	r5, r1, r4, ror r4
   152b4:	andeq	r5, r1, ip, lsl r4
   152b8:	sub	sp, fp, #24
   152bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152c0:	movw	r1, #30743	; 0x7817
   152c4:	movt	r1, #1
   152c8:	b	15424 <__assert_fail@plt+0x4338>
   152cc:	movw	r1, #30424	; 0x76d8
   152d0:	movt	r1, #1
   152d4:	mov	r0, #0
   152d8:	mov	r2, #5
   152dc:	bl	10ef4 <dcgettext@plt>
   152e0:	mov	r2, r0
   152e4:	ldr	r3, [r7]
   152e8:	mov	r0, r8
   152ec:	mov	r1, #1
   152f0:	sub	sp, fp, #24
   152f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   152f8:	b	1105c <__fprintf_chk@plt>
   152fc:	movw	r1, #30440	; 0x76e8
   15300:	movt	r1, #1
   15304:	mov	r0, #0
   15308:	mov	r2, #5
   1530c:	bl	10ef4 <dcgettext@plt>
   15310:	mov	r2, r0
   15314:	ldr	r3, [r7]
   15318:	ldr	r0, [r7, #4]
   1531c:	str	r0, [sp]
   15320:	b	15410 <__assert_fail@plt+0x4324>
   15324:	movw	r1, #30463	; 0x76ff
   15328:	movt	r1, #1
   1532c:	mov	r0, #0
   15330:	mov	r2, #5
   15334:	bl	10ef4 <dcgettext@plt>
   15338:	mov	r2, r0
   1533c:	ldr	r3, [r7]
   15340:	ldmib	r7, {r0, r1}
   15344:	stm	sp, {r0, r1}
   15348:	b	15410 <__assert_fail@plt+0x4324>
   1534c:	movw	r1, #30491	; 0x771b
   15350:	movt	r1, #1
   15354:	mov	r0, #0
   15358:	mov	r2, #5
   1535c:	bl	10ef4 <dcgettext@plt>
   15360:	mov	r2, r0
   15364:	ldr	r3, [r7]
   15368:	ldmib	r7, {r0, r1, r7}
   1536c:	stm	sp, {r0, r1, r7}
   15370:	b	15410 <__assert_fail@plt+0x4324>
   15374:	movw	r1, #30523	; 0x773b
   15378:	movt	r1, #1
   1537c:	mov	r0, #0
   15380:	mov	r2, #5
   15384:	bl	10ef4 <dcgettext@plt>
   15388:	mov	r2, r0
   1538c:	ldr	r3, [r7]
   15390:	ldmib	r7, {r0, r1, r6, r7}
   15394:	stm	sp, {r0, r1, r6, r7}
   15398:	b	15410 <__assert_fail@plt+0x4324>
   1539c:	movw	r1, #30559	; 0x775f
   153a0:	movt	r1, #1
   153a4:	mov	r0, #0
   153a8:	mov	r2, #5
   153ac:	bl	10ef4 <dcgettext@plt>
   153b0:	mov	r2, r0
   153b4:	ldr	r3, [r7]
   153b8:	ldmib	r7, {r0, r1, r6}
   153bc:	ldr	r5, [r7, #16]
   153c0:	ldr	r7, [r7, #20]
   153c4:	stm	sp, {r0, r1, r6}
   153c8:	str	r5, [sp, #12]
   153cc:	str	r7, [sp, #16]
   153d0:	b	15410 <__assert_fail@plt+0x4324>
   153d4:	movw	r1, #30599	; 0x7787
   153d8:	movt	r1, #1
   153dc:	mov	r0, #0
   153e0:	mov	r2, #5
   153e4:	bl	10ef4 <dcgettext@plt>
   153e8:	mov	r2, r0
   153ec:	ldr	r3, [r7]
   153f0:	ldmib	r7, {r0, r1, r6}
   153f4:	ldr	r5, [r7, #16]
   153f8:	ldr	r4, [r7, #20]
   153fc:	ldr	r7, [r7, #24]
   15400:	stm	sp, {r0, r1, r6}
   15404:	str	r5, [sp, #12]
   15408:	str	r4, [sp, #16]
   1540c:	str	r7, [sp, #20]
   15410:	mov	r0, r8
   15414:	mov	r1, #1
   15418:	b	154c4 <__assert_fail@plt+0x43d8>
   1541c:	movw	r1, #30691	; 0x77e3
   15420:	movt	r1, #1
   15424:	mov	r0, #0
   15428:	mov	r2, #5
   1542c:	bl	10ef4 <dcgettext@plt>
   15430:	mov	ip, r0
   15434:	ldr	r3, [r7]
   15438:	ldr	r0, [r7, #4]
   1543c:	ldr	r1, [r7, #8]
   15440:	ldr	r6, [r7, #12]
   15444:	ldr	r5, [r7, #16]
   15448:	ldr	r4, [r7, #20]
   1544c:	ldr	r2, [r7, #24]
   15450:	ldr	lr, [r7, #28]
   15454:	ldr	r7, [r7, #32]
   15458:	stm	sp, {r0, r1, r6}
   1545c:	str	r5, [sp, #12]
   15460:	str	r4, [sp, #16]
   15464:	str	r2, [sp, #20]
   15468:	str	lr, [sp, #24]
   1546c:	str	r7, [sp, #28]
   15470:	b	154b8 <__assert_fail@plt+0x43cc>
   15474:	movw	r1, #30643	; 0x77b3
   15478:	movt	r1, #1
   1547c:	mov	r0, #0
   15480:	mov	r2, #5
   15484:	bl	10ef4 <dcgettext@plt>
   15488:	mov	ip, r0
   1548c:	ldr	r3, [r7]
   15490:	ldmib	r7, {r0, r1, r6}
   15494:	ldr	r5, [r7, #16]
   15498:	ldr	r4, [r7, #20]
   1549c:	ldr	r2, [r7, #24]
   154a0:	ldr	r7, [r7, #28]
   154a4:	stm	sp, {r0, r1, r6}
   154a8:	str	r5, [sp, #12]
   154ac:	str	r4, [sp, #16]
   154b0:	str	r2, [sp, #20]
   154b4:	str	r7, [sp, #24]
   154b8:	mov	r0, r8
   154bc:	mov	r1, #1
   154c0:	mov	r2, ip
   154c4:	bl	1105c <__fprintf_chk@plt>
   154c8:	sub	sp, fp, #24
   154cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154d0:	push	{r4, sl, fp, lr}
   154d4:	add	fp, sp, #8
   154d8:	sub	sp, sp, #8
   154dc:	mov	lr, #0
   154e0:	ldr	ip, [fp, #8]
   154e4:	ldr	r4, [ip, lr, lsl #2]
   154e8:	add	lr, lr, #1
   154ec:	cmp	r4, #0
   154f0:	bne	154e4 <__assert_fail@plt+0x43f8>
   154f4:	sub	r4, lr, #1
   154f8:	str	ip, [sp]
   154fc:	str	r4, [sp, #4]
   15500:	bl	1519c <__assert_fail@plt+0x40b0>
   15504:	sub	sp, fp, #8
   15508:	pop	{r4, sl, fp, pc}
   1550c:	push	{r4, r5, fp, lr}
   15510:	add	fp, sp, #8
   15514:	sub	sp, sp, #48	; 0x30
   15518:	mov	ip, #0
   1551c:	ldr	r4, [fp, #8]
   15520:	add	lr, sp, #8
   15524:	ldr	r5, [r4]
   15528:	str	r5, [lr, ip, lsl #2]
   1552c:	cmp	r5, #0
   15530:	beq	15544 <__assert_fail@plt+0x4458>
   15534:	add	ip, ip, #1
   15538:	add	r4, r4, #4
   1553c:	cmp	ip, #10
   15540:	bcc	15524 <__assert_fail@plt+0x4438>
   15544:	str	lr, [sp]
   15548:	str	ip, [sp, #4]
   1554c:	bl	1519c <__assert_fail@plt+0x40b0>
   15550:	sub	sp, fp, #8
   15554:	pop	{r4, r5, fp, pc}
   15558:	push	{fp, lr}
   1555c:	mov	fp, sp
   15560:	sub	sp, sp, #8
   15564:	add	ip, fp, #8
   15568:	str	ip, [sp, #4]
   1556c:	str	ip, [sp]
   15570:	bl	1550c <__assert_fail@plt+0x4420>
   15574:	mov	sp, fp
   15578:	pop	{fp, pc}
   1557c:	push	{fp, lr}
   15580:	mov	fp, sp
   15584:	movw	r0, #33108	; 0x8154
   15588:	movt	r0, #2
   1558c:	ldr	r1, [r0]
   15590:	movw	r0, #29312	; 0x7280
   15594:	movt	r0, #1
   15598:	bl	10e70 <fputs_unlocked@plt>
   1559c:	movw	r1, #30803	; 0x7853
   155a0:	movt	r1, #1
   155a4:	mov	r0, #0
   155a8:	mov	r2, #5
   155ac:	bl	10ef4 <dcgettext@plt>
   155b0:	mov	r1, r0
   155b4:	movw	r2, #30823	; 0x7867
   155b8:	movt	r2, #1
   155bc:	mov	r0, #1
   155c0:	bl	11038 <__printf_chk@plt>
   155c4:	movw	r1, #30845	; 0x787d
   155c8:	movt	r1, #1
   155cc:	mov	r0, #0
   155d0:	mov	r2, #5
   155d4:	bl	10ef4 <dcgettext@plt>
   155d8:	mov	r1, r0
   155dc:	movw	r2, #28798	; 0x707e
   155e0:	movt	r2, #1
   155e4:	movw	r3, #29121	; 0x71c1
   155e8:	movt	r3, #1
   155ec:	mov	r0, #1
   155f0:	bl	11038 <__printf_chk@plt>
   155f4:	movw	r1, #30865	; 0x7891
   155f8:	movt	r1, #1
   155fc:	mov	r0, #0
   15600:	mov	r2, #5
   15604:	bl	10ef4 <dcgettext@plt>
   15608:	mov	r1, r0
   1560c:	movw	r2, #30904	; 0x78b8
   15610:	movt	r2, #1
   15614:	mov	r0, #1
   15618:	pop	{fp, lr}
   1561c:	b	11038 <__printf_chk@plt>
   15620:	b	15624 <__assert_fail@plt+0x4538>
   15624:	push	{r4, r5, r6, sl, fp, lr}
   15628:	add	fp, sp, #16
   1562c:	mov	r4, r2
   15630:	mov	r5, r1
   15634:	mov	r6, r0
   15638:	bl	167b0 <__assert_fail@plt+0x56c4>
   1563c:	cmp	r0, #0
   15640:	popne	{r4, r5, r6, sl, fp, pc}
   15644:	cmp	r6, #0
   15648:	beq	1565c <__assert_fail@plt+0x4570>
   1564c:	cmp	r5, #0
   15650:	cmpne	r4, #0
   15654:	bne	1565c <__assert_fail@plt+0x4570>
   15658:	pop	{r4, r5, r6, sl, fp, pc}
   1565c:	bl	15a10 <__assert_fail@plt+0x4924>
   15660:	push	{fp, lr}
   15664:	mov	fp, sp
   15668:	bl	160dc <__assert_fail@plt+0x4ff0>
   1566c:	bl	15674 <__assert_fail@plt+0x4588>
   15670:	pop	{fp, pc}
   15674:	cmp	r0, #0
   15678:	bxne	lr
   1567c:	push	{fp, lr}
   15680:	mov	fp, sp
   15684:	bl	15a10 <__assert_fail@plt+0x4924>
   15688:	push	{fp, lr}
   1568c:	mov	fp, sp
   15690:	bl	166e4 <__assert_fail@plt+0x55f8>
   15694:	bl	15674 <__assert_fail@plt+0x4588>
   15698:	pop	{fp, pc}
   1569c:	b	15660 <__assert_fail@plt+0x4574>
   156a0:	push	{r4, r5, fp, lr}
   156a4:	add	fp, sp, #8
   156a8:	mov	r4, r1
   156ac:	mov	r5, r0
   156b0:	bl	1610c <__assert_fail@plt+0x5020>
   156b4:	cmp	r0, #0
   156b8:	popne	{r4, r5, fp, pc}
   156bc:	cmp	r5, #0
   156c0:	beq	156d0 <__assert_fail@plt+0x45e4>
   156c4:	cmp	r4, #0
   156c8:	bne	156d0 <__assert_fail@plt+0x45e4>
   156cc:	pop	{r4, r5, fp, pc}
   156d0:	bl	15a10 <__assert_fail@plt+0x4924>
   156d4:	push	{fp, lr}
   156d8:	mov	fp, sp
   156dc:	bl	166e8 <__assert_fail@plt+0x55fc>
   156e0:	bl	15674 <__assert_fail@plt+0x4588>
   156e4:	pop	{fp, pc}
   156e8:	push	{fp, lr}
   156ec:	mov	fp, sp
   156f0:	bl	166f8 <__assert_fail@plt+0x560c>
   156f4:	bl	15674 <__assert_fail@plt+0x4588>
   156f8:	pop	{fp, pc}
   156fc:	push	{fp, lr}
   15700:	mov	fp, sp
   15704:	mov	r2, r1
   15708:	mov	r1, r0
   1570c:	mov	r0, #0
   15710:	bl	15624 <__assert_fail@plt+0x4538>
   15714:	pop	{fp, pc}
   15718:	mov	r2, r1
   1571c:	mov	r1, r0
   15720:	mov	r0, #0
   15724:	b	156e8 <__assert_fail@plt+0x45fc>
   15728:	mov	r2, #1
   1572c:	b	15730 <__assert_fail@plt+0x4644>
   15730:	push	{r4, r5, fp, lr}
   15734:	add	fp, sp, #8
   15738:	mov	r4, r1
   1573c:	ldr	r5, [r1]
   15740:	cmp	r0, #0
   15744:	beq	1575c <__assert_fail@plt+0x4670>
   15748:	mov	r1, #1
   1574c:	add	r1, r1, r5, lsr #1
   15750:	adds	r5, r5, r1
   15754:	bcc	15774 <__assert_fail@plt+0x4688>
   15758:	bl	15a10 <__assert_fail@plt+0x4924>
   1575c:	cmp	r5, #0
   15760:	bne	15774 <__assert_fail@plt+0x4688>
   15764:	mov	r1, #64	; 0x40
   15768:	udiv	r5, r1, r2
   1576c:	cmp	r2, #64	; 0x40
   15770:	addhi	r5, r5, #1
   15774:	mov	r1, r5
   15778:	bl	15624 <__assert_fail@plt+0x4538>
   1577c:	str	r5, [r4]
   15780:	pop	{r4, r5, fp, pc}
   15784:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15788:	add	fp, sp, #24
   1578c:	mov	r8, r1
   15790:	ldr	r6, [r1]
   15794:	add	r1, r6, r6, asr #1
   15798:	cmp	r1, r6
   1579c:	mvnvs	r1, #-2147483648	; 0x80000000
   157a0:	cmp	r1, r3
   157a4:	mov	r5, r1
   157a8:	movgt	r5, r3
   157ac:	cmn	r3, #1
   157b0:	movle	r5, r1
   157b4:	ldr	r4, [fp, #8]
   157b8:	cmn	r4, #1
   157bc:	ble	157e4 <__assert_fail@plt+0x46f8>
   157c0:	cmp	r4, #0
   157c4:	beq	15838 <__assert_fail@plt+0x474c>
   157c8:	cmn	r5, #1
   157cc:	ble	1580c <__assert_fail@plt+0x4720>
   157d0:	mvn	r7, #-2147483648	; 0x80000000
   157d4:	udiv	r1, r7, r4
   157d8:	cmp	r1, r5
   157dc:	bge	15838 <__assert_fail@plt+0x474c>
   157e0:	b	15848 <__assert_fail@plt+0x475c>
   157e4:	cmn	r5, #1
   157e8:	ble	15828 <__assert_fail@plt+0x473c>
   157ec:	cmn	r4, #1
   157f0:	beq	15838 <__assert_fail@plt+0x474c>
   157f4:	mov	r1, #-2147483648	; 0x80000000
   157f8:	sdiv	r1, r1, r4
   157fc:	mvn	r7, #-2147483648	; 0x80000000
   15800:	cmp	r1, r5
   15804:	bge	15838 <__assert_fail@plt+0x474c>
   15808:	b	15848 <__assert_fail@plt+0x475c>
   1580c:	beq	15838 <__assert_fail@plt+0x474c>
   15810:	mov	r1, #-2147483648	; 0x80000000
   15814:	sdiv	r1, r1, r5
   15818:	mvn	r7, #-2147483648	; 0x80000000
   1581c:	cmp	r1, r4
   15820:	bge	15838 <__assert_fail@plt+0x474c>
   15824:	b	15848 <__assert_fail@plt+0x475c>
   15828:	mvn	r7, #-2147483648	; 0x80000000
   1582c:	sdiv	r1, r7, r4
   15830:	cmp	r5, r1
   15834:	blt	15848 <__assert_fail@plt+0x475c>
   15838:	mul	r1, r5, r4
   1583c:	mov	r7, #64	; 0x40
   15840:	cmp	r1, #63	; 0x3f
   15844:	bgt	15850 <__assert_fail@plt+0x4764>
   15848:	sdiv	r5, r7, r4
   1584c:	mul	r1, r5, r4
   15850:	cmp	r0, #0
   15854:	moveq	r7, #0
   15858:	streq	r7, [r8]
   1585c:	sub	r7, r5, r6
   15860:	cmp	r7, r2
   15864:	bge	15910 <__assert_fail@plt+0x4824>
   15868:	add	r5, r6, r2
   1586c:	mov	r1, #0
   15870:	cmp	r5, r3
   15874:	mov	r2, #0
   15878:	movwgt	r2, #1
   1587c:	cmn	r3, #1
   15880:	movwgt	r1, #1
   15884:	cmp	r5, r6
   15888:	bvs	158f8 <__assert_fail@plt+0x480c>
   1588c:	ands	r1, r1, r2
   15890:	bne	158f8 <__assert_fail@plt+0x480c>
   15894:	cmn	r4, #1
   15898:	ble	158c0 <__assert_fail@plt+0x47d4>
   1589c:	cmp	r4, #0
   158a0:	beq	1590c <__assert_fail@plt+0x4820>
   158a4:	cmn	r5, #1
   158a8:	ble	158e4 <__assert_fail@plt+0x47f8>
   158ac:	mvn	r1, #-2147483648	; 0x80000000
   158b0:	udiv	r1, r1, r4
   158b4:	cmp	r1, r5
   158b8:	bge	1590c <__assert_fail@plt+0x4820>
   158bc:	b	158f8 <__assert_fail@plt+0x480c>
   158c0:	cmn	r5, #1
   158c4:	ble	158fc <__assert_fail@plt+0x4810>
   158c8:	cmn	r4, #1
   158cc:	beq	1590c <__assert_fail@plt+0x4820>
   158d0:	mov	r1, #-2147483648	; 0x80000000
   158d4:	sdiv	r1, r1, r4
   158d8:	cmp	r1, r5
   158dc:	bge	1590c <__assert_fail@plt+0x4820>
   158e0:	b	158f8 <__assert_fail@plt+0x480c>
   158e4:	beq	1590c <__assert_fail@plt+0x4820>
   158e8:	mov	r1, #-2147483648	; 0x80000000
   158ec:	sdiv	r1, r1, r5
   158f0:	cmp	r1, r4
   158f4:	bge	1590c <__assert_fail@plt+0x4820>
   158f8:	bl	15a10 <__assert_fail@plt+0x4924>
   158fc:	mvn	r1, #-2147483648	; 0x80000000
   15900:	sdiv	r1, r1, r4
   15904:	cmp	r5, r1
   15908:	blt	158f8 <__assert_fail@plt+0x480c>
   1590c:	mul	r1, r5, r4
   15910:	bl	156a0 <__assert_fail@plt+0x45b4>
   15914:	str	r5, [r8]
   15918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1591c:	mov	r1, #1
   15920:	b	15924 <__assert_fail@plt+0x4838>
   15924:	push	{fp, lr}
   15928:	mov	fp, sp
   1592c:	bl	16088 <__assert_fail@plt+0x4f9c>
   15930:	bl	15674 <__assert_fail@plt+0x4588>
   15934:	pop	{fp, pc}
   15938:	mov	r1, #1
   1593c:	b	15940 <__assert_fail@plt+0x4854>
   15940:	push	{fp, lr}
   15944:	mov	fp, sp
   15948:	bl	166f4 <__assert_fail@plt+0x5608>
   1594c:	bl	15674 <__assert_fail@plt+0x4588>
   15950:	pop	{fp, pc}
   15954:	push	{r4, r5, r6, sl, fp, lr}
   15958:	add	fp, sp, #16
   1595c:	mov	r4, r1
   15960:	mov	r5, r0
   15964:	mov	r0, r1
   15968:	bl	15660 <__assert_fail@plt+0x4574>
   1596c:	mov	r6, r0
   15970:	mov	r1, r5
   15974:	mov	r2, r4
   15978:	bl	10ec4 <memcpy@plt>
   1597c:	mov	r0, r6
   15980:	pop	{r4, r5, r6, sl, fp, pc}
   15984:	push	{r4, r5, r6, sl, fp, lr}
   15988:	add	fp, sp, #16
   1598c:	mov	r4, r1
   15990:	mov	r5, r0
   15994:	mov	r0, r1
   15998:	bl	15688 <__assert_fail@plt+0x459c>
   1599c:	mov	r6, r0
   159a0:	mov	r1, r5
   159a4:	mov	r2, r4
   159a8:	bl	10ec4 <memcpy@plt>
   159ac:	mov	r0, r6
   159b0:	pop	{r4, r5, r6, sl, fp, pc}
   159b4:	push	{r4, r5, r6, sl, fp, lr}
   159b8:	add	fp, sp, #16
   159bc:	mov	r4, r1
   159c0:	mov	r5, r0
   159c4:	add	r0, r1, #1
   159c8:	bl	15688 <__assert_fail@plt+0x459c>
   159cc:	mov	r6, r0
   159d0:	mov	r0, #0
   159d4:	strb	r0, [r6, r4]
   159d8:	mov	r0, r6
   159dc:	mov	r1, r5
   159e0:	mov	r2, r4
   159e4:	bl	10ec4 <memcpy@plt>
   159e8:	mov	r0, r6
   159ec:	pop	{r4, r5, r6, sl, fp, pc}
   159f0:	push	{r4, sl, fp, lr}
   159f4:	add	fp, sp, #8
   159f8:	mov	r4, r0
   159fc:	bl	10ff0 <strlen@plt>
   15a00:	add	r1, r0, #1
   15a04:	mov	r0, r4
   15a08:	pop	{r4, sl, fp, lr}
   15a0c:	b	15954 <__assert_fail@plt+0x4868>
   15a10:	push	{fp, lr}
   15a14:	mov	fp, sp
   15a18:	movw	r0, #33020	; 0x80fc
   15a1c:	movt	r0, #2
   15a20:	ldr	r4, [r0]
   15a24:	movw	r1, #30980	; 0x7904
   15a28:	movt	r1, #1
   15a2c:	mov	r0, #0
   15a30:	mov	r2, #5
   15a34:	bl	10ef4 <dcgettext@plt>
   15a38:	mov	r3, r0
   15a3c:	movw	r2, #28845	; 0x70ad
   15a40:	movt	r2, #1
   15a44:	mov	r0, r4
   15a48:	mov	r1, #0
   15a4c:	bl	10f84 <error@plt>
   15a50:	bl	110d4 <abort@plt>
   15a54:	bx	lr
   15a58:	b	16168 <__assert_fail@plt+0x507c>
   15a5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a60:	add	fp, sp, #24
   15a64:	sub	sp, sp, #16
   15a68:	mov	r5, r3
   15a6c:	mov	r6, r2
   15a70:	mov	r2, r1
   15a74:	mov	r8, r0
   15a78:	ldr	r0, [fp, #16]
   15a7c:	str	r0, [sp]
   15a80:	add	r3, sp, #8
   15a84:	mov	r0, r8
   15a88:	mov	r1, #0
   15a8c:	bl	15b54 <__assert_fail@plt+0x4a68>
   15a90:	cmp	r0, #0
   15a94:	bne	15b24 <__assert_fail@plt+0x4a38>
   15a98:	ldr	r7, [sp, #8]
   15a9c:	ldr	r4, [sp, #12]
   15aa0:	subs	r0, r7, r6
   15aa4:	sbcs	r0, r4, r5
   15aa8:	bcc	15acc <__assert_fail@plt+0x49e0>
   15aac:	ldr	r0, [fp, #12]
   15ab0:	ldr	r1, [fp, #8]
   15ab4:	subs	r1, r1, r7
   15ab8:	sbcs	r0, r0, r4
   15abc:	ldrcs	r0, [sp, #8]
   15ac0:	ldrcs	r1, [sp, #12]
   15ac4:	subcs	sp, fp, #24
   15ac8:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15acc:	bl	11014 <__errno_location@plt>
   15ad0:	subs	r1, r7, #1073741824	; 0x40000000
   15ad4:	sbcs	r1, r4, #0
   15ad8:	movcc	r1, #34	; 0x22
   15adc:	movcs	r1, #75	; 0x4b
   15ae0:	str	r1, [r0]
   15ae4:	ldr	r5, [fp, #24]
   15ae8:	ldr	r6, [fp, #20]
   15aec:	bl	11014 <__errno_location@plt>
   15af0:	ldr	r4, [r0]
   15af4:	mov	r0, r8
   15af8:	bl	14cf4 <__assert_fail@plt+0x3c08>
   15afc:	str	r0, [sp]
   15b00:	subs	r1, r4, #22
   15b04:	movne	r1, r4
   15b08:	cmp	r5, #0
   15b0c:	movweq	r5, #1
   15b10:	movw	r2, #28841	; 0x70a9
   15b14:	movt	r2, #1
   15b18:	mov	r0, r5
   15b1c:	mov	r3, r6
   15b20:	bl	10f84 <error@plt>
   15b24:	cmp	r0, #1
   15b28:	beq	15b40 <__assert_fail@plt+0x4a54>
   15b2c:	cmp	r0, #3
   15b30:	bne	15ae4 <__assert_fail@plt+0x49f8>
   15b34:	bl	11014 <__errno_location@plt>
   15b38:	mov	r1, #0
   15b3c:	b	15ae0 <__assert_fail@plt+0x49f4>
   15b40:	bl	11014 <__errno_location@plt>
   15b44:	mov	r1, #75	; 0x4b
   15b48:	b	15ae0 <__assert_fail@plt+0x49f4>
   15b4c:	mov	r1, #10
   15b50:	b	15a5c <__assert_fail@plt+0x4970>
   15b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b58:	add	fp, sp, #28
   15b5c:	sub	sp, sp, #20
   15b60:	cmp	r2, #37	; 0x25
   15b64:	bcs	15f94 <__assert_fail@plt+0x4ea8>
   15b68:	mov	r5, r2
   15b6c:	mov	r6, r1
   15b70:	mov	r4, r0
   15b74:	str	r3, [sp, #4]
   15b78:	ldr	sl, [fp, #8]
   15b7c:	bl	11014 <__errno_location@plt>
   15b80:	mov	r7, r0
   15b84:	mov	r0, #0
   15b88:	str	r0, [r7]
   15b8c:	bl	10fd8 <__ctype_b_loc@plt>
   15b90:	ldr	r1, [r0]
   15b94:	mov	r2, r4
   15b98:	ldrb	r0, [r2], #1
   15b9c:	add	r3, r1, r0, lsl #1
   15ba0:	ldrb	r3, [r3, #1]
   15ba4:	tst	r3, #32
   15ba8:	bne	15b98 <__assert_fail@plt+0x4aac>
   15bac:	add	r9, sp, #16
   15bb0:	cmp	r6, #0
   15bb4:	movne	r9, r6
   15bb8:	mov	r8, #4
   15bbc:	cmp	r0, #45	; 0x2d
   15bc0:	beq	15f88 <__assert_fail@plt+0x4e9c>
   15bc4:	mov	r0, r4
   15bc8:	mov	r1, r9
   15bcc:	mov	r2, r5
   15bd0:	bl	11050 <strtoumax@plt>
   15bd4:	str	r1, [sp, #12]
   15bd8:	str	r0, [sp, #8]
   15bdc:	ldr	r6, [r9]
   15be0:	cmp	r6, r4
   15be4:	beq	15c0c <__assert_fail@plt+0x4b20>
   15be8:	ldr	r0, [r7]
   15bec:	cmp	r0, #0
   15bf0:	beq	15c40 <__assert_fail@plt+0x4b54>
   15bf4:	cmp	r0, #34	; 0x22
   15bf8:	bne	15f88 <__assert_fail@plt+0x4e9c>
   15bfc:	mov	r8, #1
   15c00:	cmp	sl, #0
   15c04:	bne	15c4c <__assert_fail@plt+0x4b60>
   15c08:	b	15f78 <__assert_fail@plt+0x4e8c>
   15c0c:	cmp	sl, #0
   15c10:	ldrbne	r1, [r6]
   15c14:	cmpne	r1, #0
   15c18:	beq	15f88 <__assert_fail@plt+0x4e9c>
   15c1c:	mov	r0, sl
   15c20:	bl	10ffc <strchr@plt>
   15c24:	cmp	r0, #0
   15c28:	beq	15f88 <__assert_fail@plt+0x4e9c>
   15c2c:	mov	r8, #0
   15c30:	str	r8, [sp, #12]
   15c34:	mov	r0, #1
   15c38:	str	r0, [sp, #8]
   15c3c:	b	15c4c <__assert_fail@plt+0x4b60>
   15c40:	mov	r8, r0
   15c44:	cmp	sl, #0
   15c48:	beq	15f78 <__assert_fail@plt+0x4e8c>
   15c4c:	ldrb	r4, [r6]
   15c50:	cmp	r4, #0
   15c54:	beq	15f78 <__assert_fail@plt+0x4e8c>
   15c58:	mov	r0, sl
   15c5c:	mov	r1, r4
   15c60:	bl	10ffc <strchr@plt>
   15c64:	cmp	r0, #0
   15c68:	beq	15e78 <__assert_fail@plt+0x4d8c>
   15c6c:	sub	r0, r4, #69	; 0x45
   15c70:	mov	r7, #1
   15c74:	mov	r5, #1024	; 0x400
   15c78:	cmp	r0, #47	; 0x2f
   15c7c:	bhi	15d74 <__assert_fail@plt+0x4c88>
   15c80:	add	r1, pc, #0
   15c84:	ldr	pc, [r1, r0, lsl #2]
   15c88:	andeq	r5, r1, r8, asr #26
   15c8c:	andeq	r5, r1, r4, ror sp
   15c90:	andeq	r5, r1, r8, asr #26
   15c94:	andeq	r5, r1, r4, ror sp
   15c98:	andeq	r5, r1, r4, ror sp
   15c9c:	andeq	r5, r1, r4, ror sp
   15ca0:	andeq	r5, r1, r8, asr #26
   15ca4:	andeq	r5, r1, r4, ror sp
   15ca8:	andeq	r5, r1, r8, asr #26
   15cac:	andeq	r5, r1, r4, ror sp
   15cb0:	andeq	r5, r1, r4, ror sp
   15cb4:	andeq	r5, r1, r8, asr #26
   15cb8:	andeq	r5, r1, r4, ror sp
   15cbc:	andeq	r5, r1, r4, ror sp
   15cc0:	andeq	r5, r1, r4, ror sp
   15cc4:	andeq	r5, r1, r8, asr #26
   15cc8:	andeq	r5, r1, r4, ror sp
   15ccc:	andeq	r5, r1, r4, ror sp
   15cd0:	andeq	r5, r1, r4, ror sp
   15cd4:	andeq	r5, r1, r4, ror sp
   15cd8:	andeq	r5, r1, r8, asr #26
   15cdc:	andeq	r5, r1, r8, asr #26
   15ce0:	andeq	r5, r1, r4, ror sp
   15ce4:	andeq	r5, r1, r4, ror sp
   15ce8:	andeq	r5, r1, r4, ror sp
   15cec:	andeq	r5, r1, r4, ror sp
   15cf0:	andeq	r5, r1, r4, ror sp
   15cf4:	andeq	r5, r1, r4, ror sp
   15cf8:	andeq	r5, r1, r4, ror sp
   15cfc:	andeq	r5, r1, r4, ror sp
   15d00:	andeq	r5, r1, r4, ror sp
   15d04:	andeq	r5, r1, r4, ror sp
   15d08:	andeq	r5, r1, r4, ror sp
   15d0c:	andeq	r5, r1, r4, ror sp
   15d10:	andeq	r5, r1, r8, asr #26
   15d14:	andeq	r5, r1, r4, ror sp
   15d18:	andeq	r5, r1, r4, ror sp
   15d1c:	andeq	r5, r1, r4, ror sp
   15d20:	andeq	r5, r1, r8, asr #26
   15d24:	andeq	r5, r1, r4, ror sp
   15d28:	andeq	r5, r1, r8, asr #26
   15d2c:	andeq	r5, r1, r4, ror sp
   15d30:	andeq	r5, r1, r4, ror sp
   15d34:	andeq	r5, r1, r4, ror sp
   15d38:	andeq	r5, r1, r4, ror sp
   15d3c:	andeq	r5, r1, r4, ror sp
   15d40:	andeq	r5, r1, r4, ror sp
   15d44:	andeq	r5, r1, r8, asr #26
   15d48:	mov	r0, sl
   15d4c:	mov	r1, #48	; 0x30
   15d50:	bl	10ffc <strchr@plt>
   15d54:	cmp	r0, #0
   15d58:	beq	15d74 <__assert_fail@plt+0x4c88>
   15d5c:	ldrb	r0, [r6, #1]
   15d60:	cmp	r0, #66	; 0x42
   15d64:	cmpne	r0, #68	; 0x44
   15d68:	bne	15e90 <__assert_fail@plt+0x4da4>
   15d6c:	mov	r7, #2
   15d70:	mov	r5, #1000	; 0x3e8
   15d74:	sub	r1, r4, #66	; 0x42
   15d78:	cmp	r1, #53	; 0x35
   15d7c:	bhi	15e78 <__assert_fail@plt+0x4d8c>
   15d80:	mov	r0, #0
   15d84:	add	r2, pc, #0
   15d88:	ldr	pc, [r2, r1, lsl #2]
   15d8c:	strdeq	r5, [r1], -ip
   15d90:	andeq	r5, r1, r8, ror lr
   15d94:	andeq	r5, r1, r8, ror lr
   15d98:	andeq	r5, r1, r8, lsl #30
   15d9c:	andeq	r5, r1, r8, ror lr
   15da0:	andeq	r5, r1, r4, ror #28
   15da4:	andeq	r5, r1, r8, ror lr
   15da8:	andeq	r5, r1, r8, ror lr
   15dac:	andeq	r5, r1, r8, ror lr
   15db0:	andeq	r5, r1, ip, lsr #29
   15db4:	andeq	r5, r1, r8, ror lr
   15db8:	andeq	r5, r1, r0, asr #29
   15dbc:	andeq	r5, r1, r8, ror lr
   15dc0:	andeq	r5, r1, r8, ror lr
   15dc4:	andeq	r5, r1, ip, lsl pc
   15dc8:	andeq	r5, r1, r8, ror lr
   15dcc:	andeq	r5, r1, r8, ror lr
   15dd0:	andeq	r5, r1, r8, ror lr
   15dd4:	ldrdeq	r5, [r1], -r4
   15dd8:	andeq	r5, r1, r8, ror lr
   15ddc:	andeq	r5, r1, r8, ror lr
   15de0:	andeq	r5, r1, r8, ror lr
   15de4:	andeq	r5, r1, r8, ror lr
   15de8:	andeq	r5, r1, r0, lsr pc
   15dec:	andeq	r5, r1, r8, ror #29
   15df0:	andeq	r5, r1, r8, ror lr
   15df4:	andeq	r5, r1, r8, ror lr
   15df8:	andeq	r5, r1, r8, ror lr
   15dfc:	andeq	r5, r1, r8, ror lr
   15e00:	andeq	r5, r1, r8, ror lr
   15e04:	andeq	r5, r1, r8, ror lr
   15e08:	andeq	r5, r1, r8, ror lr
   15e0c:	andeq	r5, r1, r4, asr #30
   15e10:	andeq	r5, r1, ip, asr pc
   15e14:	andeq	r5, r1, r8, ror lr
   15e18:	andeq	r5, r1, r8, ror lr
   15e1c:	andeq	r5, r1, r8, ror lr
   15e20:	andeq	r5, r1, r4, ror #28
   15e24:	andeq	r5, r1, r8, ror lr
   15e28:	andeq	r5, r1, r8, ror lr
   15e2c:	andeq	r5, r1, r8, ror lr
   15e30:	andeq	r5, r1, ip, lsr #29
   15e34:	andeq	r5, r1, r8, ror lr
   15e38:	andeq	r5, r1, r0, asr #29
   15e3c:	andeq	r5, r1, r8, ror lr
   15e40:	andeq	r5, r1, r8, ror lr
   15e44:	andeq	r5, r1, r8, ror lr
   15e48:	andeq	r5, r1, r8, ror lr
   15e4c:	andeq	r5, r1, r8, ror lr
   15e50:	andeq	r5, r1, r8, ror lr
   15e54:	ldrdeq	r5, [r1], -r4
   15e58:	andeq	r5, r1, r8, ror lr
   15e5c:	andeq	r5, r1, r8, ror lr
   15e60:	andeq	r5, r1, r0, asr pc
   15e64:	add	r0, sp, #8
   15e68:	mov	r1, r5
   15e6c:	mov	r2, #3
   15e70:	bl	16040 <__assert_fail@plt+0x4f54>
   15e74:	b	15f5c <__assert_fail@plt+0x4e70>
   15e78:	ldr	r0, [sp, #8]
   15e7c:	ldr	r1, [sp, #12]
   15e80:	ldr	r2, [sp, #4]
   15e84:	strd	r0, [r2]
   15e88:	orr	r8, r8, #2
   15e8c:	b	15f88 <__assert_fail@plt+0x4e9c>
   15e90:	cmp	r0, #105	; 0x69
   15e94:	bne	15d74 <__assert_fail@plt+0x4c88>
   15e98:	ldrb	r0, [r6, #2]
   15e9c:	mov	r7, #1
   15ea0:	cmp	r0, #66	; 0x42
   15ea4:	movweq	r7, #3
   15ea8:	b	15d74 <__assert_fail@plt+0x4c88>
   15eac:	add	r0, sp, #8
   15eb0:	mov	r1, r5
   15eb4:	mov	r2, #1
   15eb8:	bl	16040 <__assert_fail@plt+0x4f54>
   15ebc:	b	15f5c <__assert_fail@plt+0x4e70>
   15ec0:	add	r0, sp, #8
   15ec4:	mov	r1, r5
   15ec8:	mov	r2, #2
   15ecc:	bl	16040 <__assert_fail@plt+0x4f54>
   15ed0:	b	15f5c <__assert_fail@plt+0x4e70>
   15ed4:	add	r0, sp, #8
   15ed8:	mov	r1, r5
   15edc:	mov	r2, #4
   15ee0:	bl	16040 <__assert_fail@plt+0x4f54>
   15ee4:	b	15f5c <__assert_fail@plt+0x4e70>
   15ee8:	add	r0, sp, #8
   15eec:	mov	r1, r5
   15ef0:	mov	r2, #7
   15ef4:	bl	16040 <__assert_fail@plt+0x4f54>
   15ef8:	b	15f5c <__assert_fail@plt+0x4e70>
   15efc:	add	r0, sp, #8
   15f00:	mov	r1, #1024	; 0x400
   15f04:	b	15f58 <__assert_fail@plt+0x4e6c>
   15f08:	add	r0, sp, #8
   15f0c:	mov	r1, r5
   15f10:	mov	r2, #6
   15f14:	bl	16040 <__assert_fail@plt+0x4f54>
   15f18:	b	15f5c <__assert_fail@plt+0x4e70>
   15f1c:	add	r0, sp, #8
   15f20:	mov	r1, r5
   15f24:	mov	r2, #5
   15f28:	bl	16040 <__assert_fail@plt+0x4f54>
   15f2c:	b	15f5c <__assert_fail@plt+0x4e70>
   15f30:	add	r0, sp, #8
   15f34:	mov	r1, r5
   15f38:	mov	r2, #8
   15f3c:	bl	16040 <__assert_fail@plt+0x4f54>
   15f40:	b	15f5c <__assert_fail@plt+0x4e70>
   15f44:	add	r0, sp, #8
   15f48:	mov	r1, #512	; 0x200
   15f4c:	b	15f58 <__assert_fail@plt+0x4e6c>
   15f50:	add	r0, sp, #8
   15f54:	mov	r1, #2
   15f58:	bl	15fb4 <__assert_fail@plt+0x4ec8>
   15f5c:	ldr	r1, [r9]
   15f60:	add	r2, r1, r7
   15f64:	str	r2, [r9]
   15f68:	ldrb	r1, [r1, r7]
   15f6c:	orr	r8, r0, r8
   15f70:	cmp	r1, #0
   15f74:	orrne	r8, r8, #2
   15f78:	ldr	r0, [sp, #8]
   15f7c:	ldr	r1, [sp, #12]
   15f80:	ldr	r2, [sp, #4]
   15f84:	strd	r0, [r2]
   15f88:	mov	r0, r8
   15f8c:	sub	sp, fp, #28
   15f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f94:	movw	r0, #30997	; 0x7915
   15f98:	movt	r0, #1
   15f9c:	movw	r1, #31035	; 0x793b
   15fa0:	movt	r1, #1
   15fa4:	movw	r3, #31051	; 0x794b
   15fa8:	movt	r3, #1
   15fac:	mov	r2, #85	; 0x55
   15fb0:	bl	110ec <__assert_fail@plt>
   15fb4:	push	{r4, r5, r6, r7, fp, lr}
   15fb8:	add	fp, sp, #16
   15fbc:	mov	r5, r1
   15fc0:	mov	r4, r0
   15fc4:	cmn	r1, #1
   15fc8:	ble	16000 <__assert_fail@plt+0x4f14>
   15fcc:	cmp	r5, #0
   15fd0:	beq	16020 <__assert_fail@plt+0x4f34>
   15fd4:	asr	r3, r5, #31
   15fd8:	mvn	r6, #0
   15fdc:	mvn	r0, #0
   15fe0:	mvn	r1, #0
   15fe4:	mov	r2, r5
   15fe8:	bl	169cc <__assert_fail@plt+0x58e0>
   15fec:	ldrd	r2, [r4]
   15ff0:	subs	r0, r0, r2
   15ff4:	sbcs	r0, r1, r3
   15ff8:	bcc	16010 <__assert_fail@plt+0x4f24>
   15ffc:	b	16020 <__assert_fail@plt+0x4f34>
   16000:	ldrd	r0, [r4]
   16004:	orrs	r0, r0, r1
   16008:	beq	16020 <__assert_fail@plt+0x4f34>
   1600c:	mvn	r6, #0
   16010:	mov	r0, #1
   16014:	mvn	r7, #0
   16018:	strd	r6, [r4]
   1601c:	pop	{r4, r5, r6, r7, fp, pc}
   16020:	ldrd	r0, [r4]
   16024:	umull	r6, r2, r0, r5
   16028:	asr	r3, r5, #31
   1602c:	mla	r0, r0, r3, r2
   16030:	mla	r7, r1, r5, r0
   16034:	mov	r0, #0
   16038:	strd	r6, [r4]
   1603c:	pop	{r4, r5, r6, r7, fp, pc}
   16040:	push	{r4, r5, r6, r7, fp, lr}
   16044:	add	fp, sp, #16
   16048:	cmp	r2, #0
   1604c:	moveq	r6, #0
   16050:	moveq	r0, r6
   16054:	popeq	{r4, r5, r6, r7, fp, pc}
   16058:	mov	r4, r2
   1605c:	mov	r5, r1
   16060:	mov	r7, r0
   16064:	mov	r6, #0
   16068:	mov	r0, r7
   1606c:	mov	r1, r5
   16070:	bl	15fb4 <__assert_fail@plt+0x4ec8>
   16074:	orr	r6, r0, r6
   16078:	subs	r4, r4, #1
   1607c:	bne	16068 <__assert_fail@plt+0x4f7c>
   16080:	mov	r0, r6
   16084:	pop	{r4, r5, r6, r7, fp, pc}
   16088:	clz	r2, r1
   1608c:	lsr	r2, r2, #5
   16090:	clz	r3, r0
   16094:	lsr	r3, r3, #5
   16098:	orrs	r2, r3, r2
   1609c:	movwne	r1, #1
   160a0:	movwne	r0, #1
   160a4:	cmp	r1, #0
   160a8:	beq	160d8 <__assert_fail@plt+0x4fec>
   160ac:	mvn	r2, #-2147483648	; 0x80000000
   160b0:	udiv	r2, r2, r1
   160b4:	cmp	r2, r0
   160b8:	bcs	160d8 <__assert_fail@plt+0x4fec>
   160bc:	push	{fp, lr}
   160c0:	mov	fp, sp
   160c4:	bl	11014 <__errno_location@plt>
   160c8:	mov	r1, #12
   160cc:	str	r1, [r0]
   160d0:	mov	r0, #0
   160d4:	pop	{fp, pc}
   160d8:	b	10e64 <calloc@plt>
   160dc:	cmp	r0, #0
   160e0:	movweq	r0, #1
   160e4:	cmn	r0, #1
   160e8:	ble	160f0 <__assert_fail@plt+0x5004>
   160ec:	b	10f9c <malloc@plt>
   160f0:	push	{fp, lr}
   160f4:	mov	fp, sp
   160f8:	bl	11014 <__errno_location@plt>
   160fc:	mov	r1, #12
   16100:	str	r1, [r0]
   16104:	mov	r0, #0
   16108:	pop	{fp, pc}
   1610c:	push	{fp, lr}
   16110:	mov	fp, sp
   16114:	cmp	r0, #0
   16118:	beq	16134 <__assert_fail@plt+0x5048>
   1611c:	cmp	r1, #0
   16120:	beq	16140 <__assert_fail@plt+0x5054>
   16124:	cmn	r1, #1
   16128:	ble	1614c <__assert_fail@plt+0x5060>
   1612c:	pop	{fp, lr}
   16130:	b	10f00 <realloc@plt>
   16134:	mov	r0, r1
   16138:	pop	{fp, lr}
   1613c:	b	160dc <__assert_fail@plt+0x4ff0>
   16140:	bl	13304 <__assert_fail@plt+0x2218>
   16144:	mov	r0, #0
   16148:	pop	{fp, pc}
   1614c:	bl	11014 <__errno_location@plt>
   16150:	mov	r1, #12
   16154:	str	r1, [r0]
   16158:	mov	r0, #0
   1615c:	pop	{fp, pc}
   16160:	mov	r0, #0
   16164:	bx	lr
   16168:	mov	r0, #0
   1616c:	bx	lr
   16170:	mov	r1, r0
   16174:	sub	r2, r0, #65	; 0x41
   16178:	mov	r0, #1
   1617c:	cmp	r2, #26
   16180:	subcs	r2, r1, #97	; 0x61
   16184:	cmpcs	r2, #26
   16188:	bcs	16190 <__assert_fail@plt+0x50a4>
   1618c:	bx	lr
   16190:	sub	r1, r1, #48	; 0x30
   16194:	cmp	r1, #10
   16198:	movcs	r0, #0
   1619c:	bx	lr
   161a0:	mov	r1, r0
   161a4:	sub	r2, r0, #65	; 0x41
   161a8:	mov	r0, #1
   161ac:	cmp	r2, #26
   161b0:	subcs	r1, r1, #97	; 0x61
   161b4:	cmpcs	r1, #26
   161b8:	movcs	r0, #0
   161bc:	bx	lr
   161c0:	mov	r1, #0
   161c4:	cmp	r0, #128	; 0x80
   161c8:	movwcc	r1, #1
   161cc:	mov	r0, r1
   161d0:	bx	lr
   161d4:	sub	r1, r0, #9
   161d8:	clz	r1, r1
   161dc:	lsr	r1, r1, #5
   161e0:	sub	r0, r0, #32
   161e4:	clz	r0, r0
   161e8:	lsr	r0, r0, #5
   161ec:	orr	r0, r0, r1
   161f0:	bx	lr
   161f4:	mov	r1, r0
   161f8:	mov	r0, #1
   161fc:	cmp	r1, #32
   16200:	bxcc	lr
   16204:	cmp	r1, #127	; 0x7f
   16208:	movne	r0, #0
   1620c:	bx	lr
   16210:	sub	r1, r0, #48	; 0x30
   16214:	mov	r0, #0
   16218:	cmp	r1, #10
   1621c:	movwcc	r0, #1
   16220:	bx	lr
   16224:	sub	r1, r0, #33	; 0x21
   16228:	mov	r0, #0
   1622c:	cmp	r1, #94	; 0x5e
   16230:	movwcc	r0, #1
   16234:	bx	lr
   16238:	sub	r1, r0, #97	; 0x61
   1623c:	mov	r0, #0
   16240:	cmp	r1, #26
   16244:	movwcc	r0, #1
   16248:	bx	lr
   1624c:	sub	r1, r0, #32
   16250:	mov	r0, #0
   16254:	cmp	r1, #95	; 0x5f
   16258:	movwcc	r0, #1
   1625c:	bx	lr
   16260:	sub	r1, r0, #33	; 0x21
   16264:	cmp	r1, #93	; 0x5d
   16268:	bhi	163f4 <__assert_fail@plt+0x5308>
   1626c:	mov	r0, #1
   16270:	add	r2, pc, #0
   16274:	ldr	pc, [r2, r1, lsl #2]
   16278:	strdeq	r6, [r1], -r0
   1627c:	strdeq	r6, [r1], -r0
   16280:	strdeq	r6, [r1], -r0
   16284:	strdeq	r6, [r1], -r0
   16288:	strdeq	r6, [r1], -r0
   1628c:	strdeq	r6, [r1], -r0
   16290:	strdeq	r6, [r1], -r0
   16294:	strdeq	r6, [r1], -r0
   16298:	strdeq	r6, [r1], -r0
   1629c:	strdeq	r6, [r1], -r0
   162a0:	strdeq	r6, [r1], -r0
   162a4:	strdeq	r6, [r1], -r0
   162a8:	strdeq	r6, [r1], -r0
   162ac:	strdeq	r6, [r1], -r0
   162b0:	strdeq	r6, [r1], -r0
   162b4:	strdeq	r6, [r1], -r4
   162b8:	strdeq	r6, [r1], -r4
   162bc:	strdeq	r6, [r1], -r4
   162c0:	strdeq	r6, [r1], -r4
   162c4:	strdeq	r6, [r1], -r4
   162c8:	strdeq	r6, [r1], -r4
   162cc:	strdeq	r6, [r1], -r4
   162d0:	strdeq	r6, [r1], -r4
   162d4:	strdeq	r6, [r1], -r4
   162d8:	strdeq	r6, [r1], -r4
   162dc:	strdeq	r6, [r1], -r0
   162e0:	strdeq	r6, [r1], -r0
   162e4:	strdeq	r6, [r1], -r0
   162e8:	strdeq	r6, [r1], -r0
   162ec:	strdeq	r6, [r1], -r0
   162f0:	strdeq	r6, [r1], -r0
   162f4:	strdeq	r6, [r1], -r0
   162f8:	strdeq	r6, [r1], -r4
   162fc:	strdeq	r6, [r1], -r4
   16300:	strdeq	r6, [r1], -r4
   16304:	strdeq	r6, [r1], -r4
   16308:	strdeq	r6, [r1], -r4
   1630c:	strdeq	r6, [r1], -r4
   16310:	strdeq	r6, [r1], -r4
   16314:	strdeq	r6, [r1], -r4
   16318:	strdeq	r6, [r1], -r4
   1631c:	strdeq	r6, [r1], -r4
   16320:	strdeq	r6, [r1], -r4
   16324:	strdeq	r6, [r1], -r4
   16328:	strdeq	r6, [r1], -r4
   1632c:	strdeq	r6, [r1], -r4
   16330:	strdeq	r6, [r1], -r4
   16334:	strdeq	r6, [r1], -r4
   16338:	strdeq	r6, [r1], -r4
   1633c:	strdeq	r6, [r1], -r4
   16340:	strdeq	r6, [r1], -r4
   16344:	strdeq	r6, [r1], -r4
   16348:	strdeq	r6, [r1], -r4
   1634c:	strdeq	r6, [r1], -r4
   16350:	strdeq	r6, [r1], -r4
   16354:	strdeq	r6, [r1], -r4
   16358:	strdeq	r6, [r1], -r4
   1635c:	strdeq	r6, [r1], -r4
   16360:	strdeq	r6, [r1], -r0
   16364:	strdeq	r6, [r1], -r0
   16368:	strdeq	r6, [r1], -r0
   1636c:	strdeq	r6, [r1], -r0
   16370:	strdeq	r6, [r1], -r0
   16374:	strdeq	r6, [r1], -r0
   16378:	strdeq	r6, [r1], -r4
   1637c:	strdeq	r6, [r1], -r4
   16380:	strdeq	r6, [r1], -r4
   16384:	strdeq	r6, [r1], -r4
   16388:	strdeq	r6, [r1], -r4
   1638c:	strdeq	r6, [r1], -r4
   16390:	strdeq	r6, [r1], -r4
   16394:	strdeq	r6, [r1], -r4
   16398:	strdeq	r6, [r1], -r4
   1639c:	strdeq	r6, [r1], -r4
   163a0:	strdeq	r6, [r1], -r4
   163a4:	strdeq	r6, [r1], -r4
   163a8:	strdeq	r6, [r1], -r4
   163ac:	strdeq	r6, [r1], -r4
   163b0:	strdeq	r6, [r1], -r4
   163b4:	strdeq	r6, [r1], -r4
   163b8:	strdeq	r6, [r1], -r4
   163bc:	strdeq	r6, [r1], -r4
   163c0:	strdeq	r6, [r1], -r4
   163c4:	strdeq	r6, [r1], -r4
   163c8:	strdeq	r6, [r1], -r4
   163cc:	strdeq	r6, [r1], -r4
   163d0:	strdeq	r6, [r1], -r4
   163d4:	strdeq	r6, [r1], -r4
   163d8:	strdeq	r6, [r1], -r4
   163dc:	strdeq	r6, [r1], -r4
   163e0:	strdeq	r6, [r1], -r0
   163e4:	strdeq	r6, [r1], -r0
   163e8:	strdeq	r6, [r1], -r0
   163ec:	strdeq	r6, [r1], -r0
   163f0:	bx	lr
   163f4:	mov	r0, #0
   163f8:	bx	lr
   163fc:	sub	r0, r0, #9
   16400:	cmp	r0, #23
   16404:	movhi	r0, #0
   16408:	bxhi	lr
   1640c:	bic	r0, r0, #-16777216	; 0xff000000
   16410:	movw	r1, #31
   16414:	movt	r1, #128	; 0x80
   16418:	mov	r2, #1
   1641c:	and	r0, r2, r1, lsr r0
   16420:	bx	lr
   16424:	sub	r1, r0, #65	; 0x41
   16428:	mov	r0, #0
   1642c:	cmp	r1, #26
   16430:	movwcc	r0, #1
   16434:	bx	lr
   16438:	mov	r1, r0
   1643c:	sub	r2, r0, #48	; 0x30
   16440:	mov	r0, #1
   16444:	cmp	r2, #22
   16448:	bhi	16460 <__assert_fail@plt+0x5374>
   1644c:	mov	ip, #1
   16450:	movw	r3, #1023	; 0x3ff
   16454:	movt	r3, #126	; 0x7e
   16458:	tst	r3, ip, lsl r2
   1645c:	bxne	lr
   16460:	sub	r1, r1, #97	; 0x61
   16464:	cmp	r1, #6
   16468:	movcs	r0, #0
   1646c:	bxcs	lr
   16470:	bx	lr
   16474:	sub	r1, r0, #65	; 0x41
   16478:	cmp	r1, #26
   1647c:	addcc	r0, r0, #32
   16480:	bx	lr
   16484:	sub	r1, r0, #97	; 0x61
   16488:	cmp	r1, #26
   1648c:	subcc	r0, r0, #32
   16490:	bx	lr
   16494:	push	{r4, r5, r6, sl, fp, lr}
   16498:	add	fp, sp, #16
   1649c:	mov	r4, r0
   164a0:	bl	10f60 <__fpending@plt>
   164a4:	mov	r5, r0
   164a8:	mov	r0, r4
   164ac:	bl	10f6c <ferror_unlocked@plt>
   164b0:	mov	r6, r0
   164b4:	mov	r0, r4
   164b8:	bl	1651c <__assert_fail@plt+0x5430>
   164bc:	cmp	r6, #0
   164c0:	beq	164e0 <__assert_fail@plt+0x53f4>
   164c4:	mvn	r4, #0
   164c8:	cmp	r0, #0
   164cc:	bne	16514 <__assert_fail@plt+0x5428>
   164d0:	bl	11014 <__errno_location@plt>
   164d4:	mov	r1, #0
   164d8:	str	r1, [r0]
   164dc:	b	16514 <__assert_fail@plt+0x5428>
   164e0:	cmp	r0, #0
   164e4:	mov	r4, r0
   164e8:	mvnne	r4, #0
   164ec:	cmp	r5, #0
   164f0:	bne	16514 <__assert_fail@plt+0x5428>
   164f4:	cmp	r0, #0
   164f8:	beq	16514 <__assert_fail@plt+0x5428>
   164fc:	bl	11014 <__errno_location@plt>
   16500:	ldr	r0, [r0]
   16504:	subs	r4, r0, #9
   16508:	mvnne	r4, #0
   1650c:	mov	r0, r4
   16510:	pop	{r4, r5, r6, sl, fp, pc}
   16514:	mov	r0, r4
   16518:	pop	{r4, r5, r6, sl, fp, pc}
   1651c:	push	{r4, r5, fp, lr}
   16520:	add	fp, sp, #8
   16524:	sub	sp, sp, #8
   16528:	mov	r4, r0
   1652c:	bl	11044 <fileno@plt>
   16530:	cmn	r0, #1
   16534:	ble	165ac <__assert_fail@plt+0x54c0>
   16538:	mov	r0, r4
   1653c:	bl	10fb4 <__freading@plt>
   16540:	cmp	r0, #0
   16544:	beq	16570 <__assert_fail@plt+0x5484>
   16548:	mov	r0, r4
   1654c:	bl	11044 <fileno@plt>
   16550:	mov	r1, #1
   16554:	str	r1, [sp]
   16558:	mov	r2, #0
   1655c:	mov	r3, #0
   16560:	bl	10f48 <lseek64@plt>
   16564:	and	r0, r0, r1
   16568:	cmn	r0, #1
   1656c:	beq	165ac <__assert_fail@plt+0x54c0>
   16570:	mov	r0, r4
   16574:	bl	165bc <__assert_fail@plt+0x54d0>
   16578:	cmp	r0, #0
   1657c:	beq	165ac <__assert_fail@plt+0x54c0>
   16580:	bl	11014 <__errno_location@plt>
   16584:	ldr	r5, [r0]
   16588:	mov	r0, r4
   1658c:	bl	11074 <fclose@plt>
   16590:	cmp	r5, #0
   16594:	beq	165a4 <__assert_fail@plt+0x54b8>
   16598:	bl	11014 <__errno_location@plt>
   1659c:	str	r5, [r0]
   165a0:	mvn	r0, #0
   165a4:	sub	sp, fp, #8
   165a8:	pop	{r4, r5, fp, pc}
   165ac:	mov	r0, r4
   165b0:	sub	sp, fp, #8
   165b4:	pop	{r4, r5, fp, lr}
   165b8:	b	11074 <fclose@plt>
   165bc:	push	{r4, sl, fp, lr}
   165c0:	add	fp, sp, #8
   165c4:	mov	r4, r0
   165c8:	cmp	r0, #0
   165cc:	beq	165e4 <__assert_fail@plt+0x54f8>
   165d0:	mov	r0, r4
   165d4:	bl	10fb4 <__freading@plt>
   165d8:	cmp	r0, #0
   165dc:	movne	r0, r4
   165e0:	blne	165f0 <__assert_fail@plt+0x5504>
   165e4:	mov	r0, r4
   165e8:	pop	{r4, sl, fp, lr}
   165ec:	b	10ea0 <fflush@plt>
   165f0:	ldrb	r1, [r0, #1]
   165f4:	tst	r1, #1
   165f8:	bxeq	lr
   165fc:	push	{fp, lr}
   16600:	mov	fp, sp
   16604:	sub	sp, sp, #8
   16608:	mov	r1, #1
   1660c:	str	r1, [sp]
   16610:	mov	r2, #0
   16614:	mov	r3, #0
   16618:	bl	16624 <__assert_fail@plt+0x5538>
   1661c:	mov	sp, fp
   16620:	pop	{fp, pc}
   16624:	push	{r4, r5, r6, r7, fp, lr}
   16628:	add	fp, sp, #16
   1662c:	sub	sp, sp, #8
   16630:	mov	r5, r3
   16634:	mov	r6, r2
   16638:	mov	r4, r0
   1663c:	ldr	r0, [r0, #4]
   16640:	ldr	r1, [r4, #8]
   16644:	cmp	r1, r0
   16648:	bne	16664 <__assert_fail@plt+0x5578>
   1664c:	ldrd	r0, [r4, #16]
   16650:	cmp	r1, r0
   16654:	bne	16664 <__assert_fail@plt+0x5578>
   16658:	ldr	r0, [r4, #36]	; 0x24
   1665c:	cmp	r0, #0
   16660:	beq	1667c <__assert_fail@plt+0x5590>
   16664:	mov	r0, r4
   16668:	mov	r2, r6
   1666c:	mov	r3, r5
   16670:	sub	sp, fp, #16
   16674:	pop	{r4, r5, r6, r7, fp, lr}
   16678:	b	11080 <fseeko64@plt>
   1667c:	ldr	r7, [fp, #8]
   16680:	mov	r0, r4
   16684:	bl	11044 <fileno@plt>
   16688:	str	r7, [sp]
   1668c:	mov	r2, r6
   16690:	mov	r3, r5
   16694:	bl	10f48 <lseek64@plt>
   16698:	and	r2, r0, r1
   1669c:	cmn	r2, #1
   166a0:	mvneq	r0, #0
   166a4:	subeq	sp, fp, #16
   166a8:	popeq	{r4, r5, r6, r7, fp, pc}
   166ac:	strd	r0, [r4, #80]	; 0x50
   166b0:	ldr	r0, [r4]
   166b4:	bic	r0, r0, #16
   166b8:	str	r0, [r4]
   166bc:	mov	r0, #0
   166c0:	sub	sp, fp, #16
   166c4:	pop	{r4, r5, r6, r7, fp, pc}
   166c8:	push	{fp, lr}
   166cc:	mov	fp, sp
   166d0:	bl	11014 <__errno_location@plt>
   166d4:	mov	r1, #12
   166d8:	str	r1, [r0]
   166dc:	mov	r0, #0
   166e0:	pop	{fp, pc}
   166e4:	b	160dc <__assert_fail@plt+0x4ff0>
   166e8:	cmp	r1, #0
   166ec:	orreq	r1, r1, #1
   166f0:	b	1610c <__assert_fail@plt+0x5020>
   166f4:	b	16088 <__assert_fail@plt+0x4f9c>
   166f8:	clz	r3, r2
   166fc:	lsr	ip, r3, #5
   16700:	clz	r3, r1
   16704:	lsr	r3, r3, #5
   16708:	orrs	r3, r3, ip
   1670c:	movwne	r1, #1
   16710:	movwne	r2, #1
   16714:	b	167b0 <__assert_fail@plt+0x56c4>
   16718:	push	{fp, lr}
   1671c:	mov	fp, sp
   16720:	mov	r0, #14
   16724:	bl	110a4 <nl_langinfo@plt>
   16728:	movw	r1, #29313	; 0x7281
   1672c:	movt	r1, #1
   16730:	cmp	r0, #0
   16734:	movne	r1, r0
   16738:	ldrb	r2, [r1]
   1673c:	movw	r0, #31130	; 0x799a
   16740:	movt	r0, #1
   16744:	cmp	r2, #0
   16748:	movne	r0, r1
   1674c:	pop	{fp, pc}
   16750:	push	{r4, r5, r6, r7, fp, lr}
   16754:	add	fp, sp, #16
   16758:	sub	sp, sp, #8
   1675c:	mov	r7, r2
   16760:	mov	r4, r1
   16764:	add	r5, sp, #4
   16768:	cmp	r0, #0
   1676c:	movne	r5, r0
   16770:	mov	r0, r5
   16774:	bl	10f78 <mbrtowc@plt>
   16778:	mov	r6, r0
   1677c:	cmp	r7, #0
   16780:	beq	167a4 <__assert_fail@plt+0x56b8>
   16784:	cmn	r6, #2
   16788:	bcc	167a4 <__assert_fail@plt+0x56b8>
   1678c:	mov	r0, #0
   16790:	bl	167ec <__assert_fail@plt+0x5700>
   16794:	cmp	r0, #0
   16798:	ldrbeq	r0, [r4]
   1679c:	streq	r0, [r5]
   167a0:	moveq	r6, #1
   167a4:	mov	r0, r6
   167a8:	sub	sp, fp, #16
   167ac:	pop	{r4, r5, r6, r7, fp, pc}
   167b0:	cmp	r2, #0
   167b4:	beq	167e4 <__assert_fail@plt+0x56f8>
   167b8:	mvn	r3, #0
   167bc:	udiv	r3, r3, r2
   167c0:	cmp	r3, r1
   167c4:	bcs	167e4 <__assert_fail@plt+0x56f8>
   167c8:	push	{fp, lr}
   167cc:	mov	fp, sp
   167d0:	bl	11014 <__errno_location@plt>
   167d4:	mov	r1, #12
   167d8:	str	r1, [r0]
   167dc:	mov	r0, #0
   167e0:	pop	{fp, pc}
   167e4:	mul	r1, r2, r1
   167e8:	b	1610c <__assert_fail@plt+0x5020>
   167ec:	push	{r4, sl, fp, lr}
   167f0:	add	fp, sp, #8
   167f4:	sub	sp, sp, #264	; 0x108
   167f8:	add	r1, sp, #7
   167fc:	movw	r2, #257	; 0x101
   16800:	bl	16850 <__assert_fail@plt+0x5764>
   16804:	mov	r4, #0
   16808:	cmp	r0, #0
   1680c:	bne	16844 <__assert_fail@plt+0x5758>
   16810:	add	r0, sp, #7
   16814:	movw	r1, #31136	; 0x79a0
   16818:	movt	r1, #1
   1681c:	bl	10e88 <strcmp@plt>
   16820:	cmp	r0, #0
   16824:	beq	16844 <__assert_fail@plt+0x5758>
   16828:	add	r0, sp, #7
   1682c:	movw	r1, #31138	; 0x79a2
   16830:	movt	r1, #1
   16834:	bl	10e88 <strcmp@plt>
   16838:	mov	r4, r0
   1683c:	cmp	r0, #0
   16840:	movwne	r4, #1
   16844:	mov	r0, r4
   16848:	sub	sp, fp, #8
   1684c:	pop	{r4, sl, fp, pc}
   16850:	b	16854 <__assert_fail@plt+0x5768>
   16854:	push	{r4, r5, r6, r7, fp, lr}
   16858:	add	fp, sp, #16
   1685c:	mov	r6, r2
   16860:	mov	r4, r1
   16864:	bl	168f0 <__assert_fail@plt+0x5804>
   16868:	cmp	r0, #0
   1686c:	beq	1689c <__assert_fail@plt+0x57b0>
   16870:	mov	r7, r0
   16874:	bl	10ff0 <strlen@plt>
   16878:	cmp	r0, r6
   1687c:	bcs	168bc <__assert_fail@plt+0x57d0>
   16880:	add	r2, r0, #1
   16884:	mov	r0, r4
   16888:	mov	r1, r7
   1688c:	bl	10ec4 <memcpy@plt>
   16890:	mov	r5, #0
   16894:	mov	r0, r5
   16898:	pop	{r4, r5, r6, r7, fp, pc}
   1689c:	mov	r5, #22
   168a0:	cmp	r6, #0
   168a4:	movne	r0, #0
   168a8:	strbne	r0, [r4]
   168ac:	movne	r0, r5
   168b0:	popne	{r4, r5, r6, r7, fp, pc}
   168b4:	mov	r0, r5
   168b8:	pop	{r4, r5, r6, r7, fp, pc}
   168bc:	mov	r5, #34	; 0x22
   168c0:	cmp	r6, #0
   168c4:	beq	168e4 <__assert_fail@plt+0x57f8>
   168c8:	sub	r6, r6, #1
   168cc:	mov	r0, r4
   168d0:	mov	r1, r7
   168d4:	mov	r2, r6
   168d8:	bl	10ec4 <memcpy@plt>
   168dc:	mov	r0, #0
   168e0:	strb	r0, [r4, r6]
   168e4:	mov	r0, r5
   168e8:	pop	{r4, r5, r6, r7, fp, pc}
   168ec:	b	168f0 <__assert_fail@plt+0x5804>
   168f0:	mov	r1, #0
   168f4:	b	1108c <setlocale@plt>
   168f8:	cmp	r3, #0
   168fc:	cmpeq	r2, #0
   16900:	bne	16924 <__assert_fail@plt+0x5838>
   16904:	cmp	r1, #0
   16908:	movlt	r1, #-2147483648	; 0x80000000
   1690c:	movlt	r0, #0
   16910:	blt	16920 <__assert_fail@plt+0x5834>
   16914:	cmpeq	r0, #0
   16918:	mvnne	r1, #-2147483648	; 0x80000000
   1691c:	mvnne	r0, #0
   16920:	b	16a08 <__assert_fail@plt+0x591c>
   16924:	sub	sp, sp, #8
   16928:	push	{sp, lr}
   1692c:	cmp	r1, #0
   16930:	blt	16950 <__assert_fail@plt+0x5864>
   16934:	cmp	r3, #0
   16938:	blt	16984 <__assert_fail@plt+0x5898>
   1693c:	bl	16a18 <__assert_fail@plt+0x592c>
   16940:	ldr	lr, [sp, #4]
   16944:	add	sp, sp, #8
   16948:	pop	{r2, r3}
   1694c:	bx	lr
   16950:	rsbs	r0, r0, #0
   16954:	sbc	r1, r1, r1, lsl #1
   16958:	cmp	r3, #0
   1695c:	blt	169a8 <__assert_fail@plt+0x58bc>
   16960:	bl	16a18 <__assert_fail@plt+0x592c>
   16964:	ldr	lr, [sp, #4]
   16968:	add	sp, sp, #8
   1696c:	pop	{r2, r3}
   16970:	rsbs	r0, r0, #0
   16974:	sbc	r1, r1, r1, lsl #1
   16978:	rsbs	r2, r2, #0
   1697c:	sbc	r3, r3, r3, lsl #1
   16980:	bx	lr
   16984:	rsbs	r2, r2, #0
   16988:	sbc	r3, r3, r3, lsl #1
   1698c:	bl	16a18 <__assert_fail@plt+0x592c>
   16990:	ldr	lr, [sp, #4]
   16994:	add	sp, sp, #8
   16998:	pop	{r2, r3}
   1699c:	rsbs	r0, r0, #0
   169a0:	sbc	r1, r1, r1, lsl #1
   169a4:	bx	lr
   169a8:	rsbs	r2, r2, #0
   169ac:	sbc	r3, r3, r3, lsl #1
   169b0:	bl	16a18 <__assert_fail@plt+0x592c>
   169b4:	ldr	lr, [sp, #4]
   169b8:	add	sp, sp, #8
   169bc:	pop	{r2, r3}
   169c0:	rsbs	r2, r2, #0
   169c4:	sbc	r3, r3, r3, lsl #1
   169c8:	bx	lr
   169cc:	cmp	r3, #0
   169d0:	cmpeq	r2, #0
   169d4:	bne	169ec <__assert_fail@plt+0x5900>
   169d8:	cmp	r1, #0
   169dc:	cmpeq	r0, #0
   169e0:	mvnne	r1, #0
   169e4:	mvnne	r0, #0
   169e8:	b	16a08 <__assert_fail@plt+0x591c>
   169ec:	sub	sp, sp, #8
   169f0:	push	{sp, lr}
   169f4:	bl	16a18 <__assert_fail@plt+0x592c>
   169f8:	ldr	lr, [sp, #4]
   169fc:	add	sp, sp, #8
   16a00:	pop	{r2, r3}
   16a04:	bx	lr
   16a08:	push	{r1, lr}
   16a0c:	mov	r0, #8
   16a10:	bl	10e7c <raise@plt>
   16a14:	pop	{r1, pc}
   16a18:	cmp	r1, r3
   16a1c:	cmpeq	r0, r2
   16a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a24:	mov	r4, r0
   16a28:	movcc	r0, #0
   16a2c:	mov	r5, r1
   16a30:	ldr	lr, [sp, #36]	; 0x24
   16a34:	movcc	r1, r0
   16a38:	bcc	16b34 <__assert_fail@plt+0x5a48>
   16a3c:	cmp	r3, #0
   16a40:	clzeq	ip, r2
   16a44:	clzne	ip, r3
   16a48:	addeq	ip, ip, #32
   16a4c:	cmp	r5, #0
   16a50:	clzeq	r1, r4
   16a54:	addeq	r1, r1, #32
   16a58:	clzne	r1, r5
   16a5c:	sub	ip, ip, r1
   16a60:	sub	sl, ip, #32
   16a64:	lsl	r9, r3, ip
   16a68:	rsb	fp, ip, #32
   16a6c:	orr	r9, r9, r2, lsl sl
   16a70:	orr	r9, r9, r2, lsr fp
   16a74:	lsl	r8, r2, ip
   16a78:	cmp	r5, r9
   16a7c:	cmpeq	r4, r8
   16a80:	movcc	r0, #0
   16a84:	movcc	r1, r0
   16a88:	bcc	16aa4 <__assert_fail@plt+0x59b8>
   16a8c:	mov	r0, #1
   16a90:	subs	r4, r4, r8
   16a94:	lsl	r1, r0, sl
   16a98:	orr	r1, r1, r0, lsr fp
   16a9c:	lsl	r0, r0, ip
   16aa0:	sbc	r5, r5, r9
   16aa4:	cmp	ip, #0
   16aa8:	beq	16b34 <__assert_fail@plt+0x5a48>
   16aac:	lsr	r6, r8, #1
   16ab0:	orr	r6, r6, r9, lsl #31
   16ab4:	lsr	r7, r9, #1
   16ab8:	mov	r2, ip
   16abc:	b	16ae0 <__assert_fail@plt+0x59f4>
   16ac0:	subs	r3, r4, r6
   16ac4:	sbc	r8, r5, r7
   16ac8:	adds	r3, r3, r3
   16acc:	adc	r8, r8, r8
   16ad0:	adds	r4, r3, #1
   16ad4:	adc	r5, r8, #0
   16ad8:	subs	r2, r2, #1
   16adc:	beq	16afc <__assert_fail@plt+0x5a10>
   16ae0:	cmp	r5, r7
   16ae4:	cmpeq	r4, r6
   16ae8:	bcs	16ac0 <__assert_fail@plt+0x59d4>
   16aec:	adds	r4, r4, r4
   16af0:	adc	r5, r5, r5
   16af4:	subs	r2, r2, #1
   16af8:	bne	16ae0 <__assert_fail@plt+0x59f4>
   16afc:	lsr	r3, r4, ip
   16b00:	orr	r3, r3, r5, lsl fp
   16b04:	lsr	r2, r5, ip
   16b08:	orr	r3, r3, r5, lsr sl
   16b0c:	adds	r0, r0, r4
   16b10:	mov	r4, r3
   16b14:	lsl	r3, r2, ip
   16b18:	orr	r3, r3, r4, lsl sl
   16b1c:	lsl	ip, r4, ip
   16b20:	orr	r3, r3, r4, lsr fp
   16b24:	adc	r1, r1, r5
   16b28:	subs	r0, r0, ip
   16b2c:	mov	r5, r2
   16b30:	sbc	r1, r1, r3
   16b34:	cmp	lr, #0
   16b38:	strdne	r4, [lr]
   16b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b44:	mov	r7, r0
   16b48:	ldr	r6, [pc, #72]	; 16b98 <__assert_fail@plt+0x5aac>
   16b4c:	ldr	r5, [pc, #72]	; 16b9c <__assert_fail@plt+0x5ab0>
   16b50:	add	r6, pc, r6
   16b54:	add	r5, pc, r5
   16b58:	sub	r6, r6, r5
   16b5c:	mov	r8, r1
   16b60:	mov	r9, r2
   16b64:	bl	10e44 <calloc@plt-0x20>
   16b68:	asrs	r6, r6, #2
   16b6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b70:	mov	r4, #0
   16b74:	add	r4, r4, #1
   16b78:	ldr	r3, [r5], #4
   16b7c:	mov	r2, r9
   16b80:	mov	r1, r8
   16b84:	mov	r0, r7
   16b88:	blx	r3
   16b8c:	cmp	r6, r4
   16b90:	bne	16b74 <__assert_fail@plt+0x5a88>
   16b94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b98:			; <UNDEFINED> instruction: 0x000113b4
   16b9c:	andeq	r1, r1, ip, lsr #7
   16ba0:	bx	lr
   16ba4:	ldr	r3, [pc, #12]	; 16bb8 <__assert_fail@plt+0x5acc>
   16ba8:	mov	r1, #0
   16bac:	add	r3, pc, r3
   16bb0:	ldr	r2, [r3]
   16bb4:	b	11020 <__cxa_atexit@plt>
   16bb8:	andeq	r1, r1, r0, asr #10
   16bbc:	mov	r2, r1
   16bc0:	mov	r1, r0
   16bc4:	mov	r0, #3
   16bc8:	b	10f30 <__fxstat64@plt>

Disassembly of section .fini:

00016bcc <.fini>:
   16bcc:	push	{r3, lr}
   16bd0:	pop	{r3, pc}
