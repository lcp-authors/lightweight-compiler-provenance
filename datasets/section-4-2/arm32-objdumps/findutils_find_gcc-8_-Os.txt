
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011f40 <.init>:
   11f40:	push	{r3, lr}
   11f44:	bl	12d08 <__assert_fail@plt+0x61c>
   11f48:	pop	{r3, pc}

Disassembly of section .plt:

00011f4c <pthread_mutex_unlock@plt-0x14>:
   11f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f50:	ldr	lr, [pc, #4]	; 11f5c <pthread_mutex_unlock@plt-0x4>
   11f54:	add	lr, pc, lr
   11f58:	ldr	pc, [lr, #8]!
   11f5c:	andeq	ip, r3, r4, lsr #1

00011f60 <pthread_mutex_unlock@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #60, 20	; 0x3c000
   11f68:	ldr	pc, [ip, #164]!	; 0xa4

00011f6c <fdopen@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #60, 20	; 0x3c000
   11f74:	ldr	pc, [ip, #156]!	; 0x9c

00011f78 <fstatfs64@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #60, 20	; 0x3c000
   11f80:	ldr	pc, [ip, #148]!	; 0x94

00011f84 <calloc@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #60, 20	; 0x3c000
   11f8c:	ldr	pc, [ip, #140]!	; 0x8c

00011f90 <endgrent@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #60, 20	; 0x3c000
   11f98:	ldr	pc, [ip, #132]!	; 0x84

00011f9c <wctype@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #60, 20	; 0x3c000
   11fa4:	ldr	pc, [ip, #124]!	; 0x7c

00011fa8 <gnu_dev_major@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #60, 20	; 0x3c000
   11fb0:	ldr	pc, [ip, #116]!	; 0x74

00011fb4 <raise@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #60, 20	; 0x3c000
   11fbc:	ldr	pc, [ip, #108]!	; 0x6c

00011fc0 <wcrtomb@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #60, 20	; 0x3c000
   11fc8:	ldr	pc, [ip, #100]!	; 0x64

00011fcc <gmtime_r@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #60, 20	; 0x3c000
   11fd4:	ldr	pc, [ip, #92]!	; 0x5c

00011fd8 <getpwnam@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #60, 20	; 0x3c000
   11fe0:	ldr	pc, [ip, #84]!	; 0x54

00011fe4 <is_selinux_enabled@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #60, 20	; 0x3c000
   11fec:	ldr	pc, [ip, #76]!	; 0x4c

00011ff0 <iswctype@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #60, 20	; 0x3c000
   11ff8:	ldr	pc, [ip, #68]!	; 0x44

00011ffc <strcmp@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #60, 20	; 0x3c000
   12004:	ldr	pc, [ip, #60]!	; 0x3c

00012008 <strtol@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #60, 20	; 0x3c000
   12010:	ldr	pc, [ip, #52]!	; 0x34

00012014 <getpwuid@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #60, 20	; 0x3c000
   1201c:	ldr	pc, [ip, #44]!	; 0x2c

00012020 <gnu_dev_makedev@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #60, 20	; 0x3c000
   12028:	ldr	pc, [ip, #36]!	; 0x24

0001202c <printf@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #60, 20	; 0x3c000
   12034:	ldr	pc, [ip, #28]!

00012038 <gnu_dev_minor@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #60, 20	; 0x3c000
   12040:	ldr	pc, [ip, #20]!

00012044 <pthread_mutex_destroy@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #60, 20	; 0x3c000
   1204c:	ldr	pc, [ip, #12]!

00012050 <mktime@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #60, 20	; 0x3c000
   12058:	ldr	pc, [ip, #4]!

0001205c <fflush@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #241664	; 0x3b000
   12064:	ldr	pc, [ip, #4092]!	; 0xffc

00012068 <unlinkat@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #241664	; 0x3b000
   12070:	ldr	pc, [ip, #4084]!	; 0xff4

00012074 <wcwidth@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #241664	; 0x3b000
   1207c:	ldr	pc, [ip, #4076]!	; 0xfec

00012080 <lsetfilecon@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #241664	; 0x3b000
   12088:	ldr	pc, [ip, #4068]!	; 0xfe4

0001208c <memmove@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #241664	; 0x3b000
   12094:	ldr	pc, [ip, #4060]!	; 0xfdc

00012098 <free@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #241664	; 0x3b000
   120a0:	ldr	pc, [ip, #4052]!	; 0xfd4

000120a4 <pthread_mutex_lock@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #241664	; 0x3b000
   120ac:	ldr	pc, [ip, #4044]!	; 0xfcc

000120b0 <faccessat@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #241664	; 0x3b000
   120b8:	ldr	pc, [ip, #4036]!	; 0xfc4

000120bc <ferror@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #241664	; 0x3b000
   120c4:	ldr	pc, [ip, #4028]!	; 0xfbc

000120c8 <thrd_exit@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #241664	; 0x3b000
   120d0:	ldr	pc, [ip, #4020]!	; 0xfb4

000120d4 <strndup@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #241664	; 0x3b000
   120dc:	ldr	pc, [ip, #4012]!	; 0xfac

000120e0 <clock_gettime@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #241664	; 0x3b000
   120e8:	ldr	pc, [ip, #4004]!	; 0xfa4

000120ec <_exit@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #241664	; 0x3b000
   120f4:	ldr	pc, [ip, #3996]!	; 0xf9c

000120f8 <memcpy@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #241664	; 0x3b000
   12100:	ldr	pc, [ip, #3988]!	; 0xf94

00012104 <execvp@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #241664	; 0x3b000
   1210c:	ldr	pc, [ip, #3980]!	; 0xf8c

00012110 <tolower@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #241664	; 0x3b000
   12118:	ldr	pc, [ip, #3972]!	; 0xf84

0001211c <pthread_mutex_init@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #241664	; 0x3b000
   12124:	ldr	pc, [ip, #3964]!	; 0xf7c

00012128 <towlower@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #241664	; 0x3b000
   12130:	ldr	pc, [ip, #3956]!	; 0xf74

00012134 <mbsinit@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #241664	; 0x3b000
   1213c:	ldr	pc, [ip, #3948]!	; 0xf6c

00012140 <signal@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #241664	; 0x3b000
   12148:	ldr	pc, [ip, #3940]!	; 0xf64

0001214c <time@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #241664	; 0x3b000
   12154:	ldr	pc, [ip, #3932]!	; 0xf5c

00012158 <memcmp@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #241664	; 0x3b000
   12160:	ldr	pc, [ip, #3924]!	; 0xf54

00012164 <uname@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #241664	; 0x3b000
   1216c:	ldr	pc, [ip, #3916]!	; 0xf4c

00012170 <ctime@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #241664	; 0x3b000
   12178:	ldr	pc, [ip, #3908]!	; 0xf44

0001217c <dcgettext@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #241664	; 0x3b000
   12184:	ldr	pc, [ip, #3900]!	; 0xf3c

00012188 <strdup@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #241664	; 0x3b000
   12190:	ldr	pc, [ip, #3892]!	; 0xf34

00012194 <sysconf@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #241664	; 0x3b000
   1219c:	ldr	pc, [ip, #3884]!	; 0xf2c

000121a0 <getrlimit64@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #241664	; 0x3b000
   121a8:	ldr	pc, [ip, #3876]!	; 0xf24

000121ac <realloc@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #241664	; 0x3b000
   121b4:	ldr	pc, [ip, #3868]!	; 0xf1c

000121b8 <fgetfilecon@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #241664	; 0x3b000
   121c0:	ldr	pc, [ip, #3860]!	; 0xf14

000121c4 <localtime_r@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #241664	; 0x3b000
   121cc:	ldr	pc, [ip, #3852]!	; 0xf0c

000121d0 <textdomain@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #241664	; 0x3b000
   121d8:	ldr	pc, [ip, #3844]!	; 0xf04

000121dc <iswcntrl@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #241664	; 0x3b000
   121e4:	ldr	pc, [ip, #3836]!	; 0xefc

000121e8 <chdir@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #241664	; 0x3b000
   121f0:	ldr	pc, [ip, #3828]!	; 0xef4

000121f4 <__fxstatat64@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #241664	; 0x3b000
   121fc:	ldr	pc, [ip, #3820]!	; 0xeec

00012200 <iswprint@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #241664	; 0x3b000
   12208:	ldr	pc, [ip, #3812]!	; 0xee4

0001220c <tzset@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #241664	; 0x3b000
   12214:	ldr	pc, [ip, #3804]!	; 0xedc

00012218 <poll@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #241664	; 0x3b000
   12220:	ldr	pc, [ip, #3796]!	; 0xed4

00012224 <__fxstat64@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #241664	; 0x3b000
   1222c:	ldr	pc, [ip, #3788]!	; 0xecc

00012230 <fwrite@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #241664	; 0x3b000
   12238:	ldr	pc, [ip, #3780]!	; 0xec4

0001223c <strcat@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #241664	; 0x3b000
   12244:	ldr	pc, [ip, #3772]!	; 0xebc

00012248 <lseek64@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #241664	; 0x3b000
   12250:	ldr	pc, [ip, #3764]!	; 0xeb4

00012254 <waitpid@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #241664	; 0x3b000
   1225c:	ldr	pc, [ip, #3756]!	; 0xeac

00012260 <__ctype_get_mb_cur_max@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #241664	; 0x3b000
   12268:	ldr	pc, [ip, #3748]!	; 0xea4

0001226c <hasmntopt@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #241664	; 0x3b000
   12274:	ldr	pc, [ip, #3740]!	; 0xe9c

00012278 <strcpy@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #241664	; 0x3b000
   12280:	ldr	pc, [ip, #3732]!	; 0xe94

00012284 <gettimeofday@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #241664	; 0x3b000
   1228c:	ldr	pc, [ip, #3724]!	; 0xe8c

00012290 <__fpending@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #241664	; 0x3b000
   12298:	ldr	pc, [ip, #3716]!	; 0xe84

0001229c <ferror_unlocked@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #241664	; 0x3b000
   122a4:	ldr	pc, [ip, #3708]!	; 0xe7c

000122a8 <mbrtowc@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #241664	; 0x3b000
   122b0:	ldr	pc, [ip, #3700]!	; 0xe74

000122b4 <strtok_r@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #241664	; 0x3b000
   122bc:	ldr	pc, [ip, #3692]!	; 0xe6c

000122c0 <error@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #241664	; 0x3b000
   122c8:	ldr	pc, [ip, #3684]!	; 0xe64

000122cc <getmntent@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #241664	; 0x3b000
   122d4:	ldr	pc, [ip, #3676]!	; 0xe5c

000122d8 <opendir@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #241664	; 0x3b000
   122e0:	ldr	pc, [ip, #3668]!	; 0xe54

000122e4 <fnmatch@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #241664	; 0x3b000
   122ec:	ldr	pc, [ip, #3660]!	; 0xe4c

000122f0 <open64@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #241664	; 0x3b000
   122f8:	ldr	pc, [ip, #3652]!	; 0xe44

000122fc <getenv@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #241664	; 0x3b000
   12304:	ldr	pc, [ip, #3644]!	; 0xe3c

00012308 <lgetfilecon@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #241664	; 0x3b000
   12310:	ldr	pc, [ip, #3636]!	; 0xe34

00012314 <malloc@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #241664	; 0x3b000
   1231c:	ldr	pc, [ip, #3628]!	; 0xe2c

00012320 <__libc_start_main@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #241664	; 0x3b000
   12328:	ldr	pc, [ip, #3620]!	; 0xe24

0001232c <readlinkat@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #241664	; 0x3b000
   12334:	ldr	pc, [ip, #3612]!	; 0xe1c

00012338 <strftime@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #241664	; 0x3b000
   12340:	ldr	pc, [ip, #3604]!	; 0xe14

00012344 <__freading@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #241664	; 0x3b000
   1234c:	ldr	pc, [ip, #3596]!	; 0xe0c

00012350 <localtime@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #241664	; 0x3b000
   12358:	ldr	pc, [ip, #3588]!	; 0xe04

0001235c <modf@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #241664	; 0x3b000
   12364:	ldr	pc, [ip, #3580]!	; 0xdfc

00012368 <__gmon_start__@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #241664	; 0x3b000
   12370:	ldr	pc, [ip, #3572]!	; 0xdf4

00012374 <__ctype_b_loc@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #241664	; 0x3b000
   1237c:	ldr	pc, [ip, #3564]!	; 0xdec

00012380 <getcwd@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #241664	; 0x3b000
   12388:	ldr	pc, [ip, #3556]!	; 0xde4

0001238c <exit@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #241664	; 0x3b000
   12394:	ldr	pc, [ip, #3548]!	; 0xddc

00012398 <feof@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #241664	; 0x3b000
   123a0:	ldr	pc, [ip, #3540]!	; 0xdd4

000123a4 <getfilecon@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #241664	; 0x3b000
   123ac:	ldr	pc, [ip, #3532]!	; 0xdcc

000123b0 <strtoul@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #241664	; 0x3b000
   123b8:	ldr	pc, [ip, #3524]!	; 0xdc4

000123bc <strlen@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #241664	; 0x3b000
   123c4:	ldr	pc, [ip, #3516]!	; 0xdbc

000123c8 <strchr@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #241664	; 0x3b000
   123d0:	ldr	pc, [ip, #3508]!	; 0xdb4

000123d4 <setenv@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #241664	; 0x3b000
   123dc:	ldr	pc, [ip, #3500]!	; 0xdac

000123e0 <openat64@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #241664	; 0x3b000
   123e8:	ldr	pc, [ip, #3492]!	; 0xda4

000123ec <memrchr@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #241664	; 0x3b000
   123f4:	ldr	pc, [ip, #3484]!	; 0xd9c

000123f8 <fprintf@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #241664	; 0x3b000
   12400:	ldr	pc, [ip, #3476]!	; 0xd94

00012404 <__errno_location@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #241664	; 0x3b000
   1240c:	ldr	pc, [ip, #3468]!	; 0xd8c

00012410 <iswalnum@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #241664	; 0x3b000
   12418:	ldr	pc, [ip, #3460]!	; 0xd84

0001241c <snprintf@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #241664	; 0x3b000
   12424:	ldr	pc, [ip, #3452]!	; 0xd7c

00012428 <__cxa_atexit@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #241664	; 0x3b000
   12430:	ldr	pc, [ip, #3444]!	; 0xd74

00012434 <memset@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #241664	; 0x3b000
   1243c:	ldr	pc, [ip, #3436]!	; 0xd6c

00012440 <bsearch@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #241664	; 0x3b000
   12448:	ldr	pc, [ip, #3428]!	; 0xd64

0001244c <putchar@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #241664	; 0x3b000
   12454:	ldr	pc, [ip, #3420]!	; 0xd5c

00012458 <strncpy@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #241664	; 0x3b000
   12460:	ldr	pc, [ip, #3412]!	; 0xd54

00012464 <pthread_mutexattr_gettype@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #241664	; 0x3b000
   1246c:	ldr	pc, [ip, #3404]!	; 0xd4c

00012470 <btowc@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #241664	; 0x3b000
   12478:	ldr	pc, [ip, #3396]!	; 0xd44

0001247c <strtod@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #241664	; 0x3b000
   12484:	ldr	pc, [ip, #3388]!	; 0xd3c

00012488 <fileno@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #241664	; 0x3b000
   12490:	ldr	pc, [ip, #3380]!	; 0xd34

00012494 <difftime@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #241664	; 0x3b000
   1249c:	ldr	pc, [ip, #3372]!	; 0xd2c

000124a0 <strtoumax@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #241664	; 0x3b000
   124a8:	ldr	pc, [ip, #3364]!	; 0xd24

000124ac <memchr@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #241664	; 0x3b000
   124b4:	ldr	pc, [ip, #3356]!	; 0xd1c

000124b8 <setfilecon@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #241664	; 0x3b000
   124c0:	ldr	pc, [ip, #3348]!	; 0xd14

000124c4 <access@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #241664	; 0x3b000
   124cc:	ldr	pc, [ip, #3340]!	; 0xd0c

000124d0 <fclose@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #241664	; 0x3b000
   124d8:	ldr	pc, [ip, #3332]!	; 0xd04

000124dc <strnlen@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #241664	; 0x3b000
   124e4:	ldr	pc, [ip, #3324]!	; 0xcfc

000124e8 <fseeko64@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #241664	; 0x3b000
   124f0:	ldr	pc, [ip, #3316]!	; 0xcf4

000124f4 <endmntent@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #241664	; 0x3b000
   124fc:	ldr	pc, [ip, #3308]!	; 0xcec

00012500 <fcntl64@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #241664	; 0x3b000
   12508:	ldr	pc, [ip, #3300]!	; 0xce4

0001250c <rpmatch@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #241664	; 0x3b000
   12514:	ldr	pc, [ip, #3292]!	; 0xcdc

00012518 <setlocale@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #241664	; 0x3b000
   12520:	ldr	pc, [ip, #3284]!	; 0xcd4

00012524 <fork@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #241664	; 0x3b000
   1252c:	ldr	pc, [ip, #3276]!	; 0xccc

00012530 <endpwent@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #241664	; 0x3b000
   12538:	ldr	pc, [ip, #3268]!	; 0xcc4

0001253c <toupper@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #241664	; 0x3b000
   12544:	ldr	pc, [ip, #3260]!	; 0xcbc

00012548 <strrchr@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #241664	; 0x3b000
   12550:	ldr	pc, [ip, #3252]!	; 0xcb4

00012554 <vfprintf@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #241664	; 0x3b000
   1255c:	ldr	pc, [ip, #3244]!	; 0xcac

00012560 <nl_langinfo@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #241664	; 0x3b000
   12568:	ldr	pc, [ip, #3236]!	; 0xca4

0001256c <fputc@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #241664	; 0x3b000
   12574:	ldr	pc, [ip, #3228]!	; 0xc9c

00012578 <sscanf@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #241664	; 0x3b000
   12580:	ldr	pc, [ip, #3220]!	; 0xc94

00012584 <localeconv@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #241664	; 0x3b000
   1258c:	ldr	pc, [ip, #3212]!	; 0xc8c

00012590 <sprintf@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #241664	; 0x3b000
   12598:	ldr	pc, [ip, #3204]!	; 0xc84

0001259c <readdir64@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #241664	; 0x3b000
   125a4:	ldr	pc, [ip, #3196]!	; 0xc7c

000125a8 <fdopendir@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #241664	; 0x3b000
   125b0:	ldr	pc, [ip, #3188]!	; 0xc74

000125b4 <timegm@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #241664	; 0x3b000
   125bc:	ldr	pc, [ip, #3180]!	; 0xc6c

000125c0 <putc@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #241664	; 0x3b000
   125c8:	ldr	pc, [ip, #3172]!	; 0xc64

000125cc <dirfd@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #241664	; 0x3b000
   125d4:	ldr	pc, [ip, #3164]!	; 0xc5c

000125d8 <fchdir@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #241664	; 0x3b000
   125e0:	ldr	pc, [ip, #3156]!	; 0xc54

000125e4 <fopen64@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #241664	; 0x3b000
   125ec:	ldr	pc, [ip, #3148]!	; 0xc4c

000125f0 <qsort@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #241664	; 0x3b000
   125f8:	ldr	pc, [ip, #3140]!	; 0xc44

000125fc <freecon@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #241664	; 0x3b000
   12604:	ldr	pc, [ip, #3132]!	; 0xc3c

00012608 <strpbrk@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #241664	; 0x3b000
   12610:	ldr	pc, [ip, #3124]!	; 0xc34

00012614 <setmntent@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #241664	; 0x3b000
   1261c:	ldr	pc, [ip, #3116]!	; 0xc2c

00012620 <bindtextdomain@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #241664	; 0x3b000
   12628:	ldr	pc, [ip, #3108]!	; 0xc24

0001262c <atof@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #241664	; 0x3b000
   12634:	ldr	pc, [ip, #3100]!	; 0xc1c

00012638 <getline@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #241664	; 0x3b000
   12640:	ldr	pc, [ip, #3092]!	; 0xc14

00012644 <getdelim@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #241664	; 0x3b000
   1264c:	ldr	pc, [ip, #3084]!	; 0xc0c

00012650 <__xstat64@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #241664	; 0x3b000
   12658:	ldr	pc, [ip, #3076]!	; 0xc04

0001265c <isatty@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #241664	; 0x3b000
   12664:	ldr	pc, [ip, #3068]!	; 0xbfc

00012668 <unsetenv@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #241664	; 0x3b000
   12670:	ldr	pc, [ip, #3060]!	; 0xbf4

00012674 <towupper@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #241664	; 0x3b000
   1267c:	ldr	pc, [ip, #3052]!	; 0xbec

00012680 <fputs@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #241664	; 0x3b000
   12688:	ldr	pc, [ip, #3044]!	; 0xbe4

0001268c <strncmp@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #241664	; 0x3b000
   12694:	ldr	pc, [ip, #3036]!	; 0xbdc

00012698 <abort@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #241664	; 0x3b000
   126a0:	ldr	pc, [ip, #3028]!	; 0xbd4

000126a4 <close@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #241664	; 0x3b000
   126ac:	ldr	pc, [ip, #3020]!	; 0xbcc

000126b0 <__lxstat64@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #241664	; 0x3b000
   126b8:	ldr	pc, [ip, #3012]!	; 0xbc4

000126bc <closedir@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #241664	; 0x3b000
   126c4:	ldr	pc, [ip, #3004]!	; 0xbbc

000126c8 <getgrgid@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #241664	; 0x3b000
   126d0:	ldr	pc, [ip, #2996]!	; 0xbb4

000126d4 <getgrnam@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #241664	; 0x3b000
   126dc:	ldr	pc, [ip, #2988]!	; 0xbac

000126e0 <strspn@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #241664	; 0x3b000
   126e8:	ldr	pc, [ip, #2980]!	; 0xba4

000126ec <__assert_fail@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #241664	; 0x3b000
   126f4:	ldr	pc, [ip, #2972]!	; 0xb9c

Disassembly of section .text:

000126f8 <.text>:
   126f8:	push	{r4, lr}
   126fc:	bl	12404 <__errno_location@plt>
   12700:	mov	r3, #12
   12704:	str	r3, [r0]
   12708:	mov	r0, #0
   1270c:	pop	{r4, pc}
   12710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12714:	mov	r5, r0
   12718:	sub	sp, sp, #228	; 0xe4
   1271c:	mov	r6, r1
   12720:	ldr	r0, [r1]
   12724:	ldr	fp, [pc, #1304]	; 12c44 <__assert_fail@plt+0x558>
   12728:	cmp	r0, #0
   1272c:	ldreq	r0, [pc, #1300]	; 12c48 <__assert_fail@plt+0x55c>
   12730:	bl	251f0 <__assert_fail@plt+0x12b04>
   12734:	bl	176b4 <__assert_fail@plt+0x4fc8>
   12738:	mov	r3, #0
   1273c:	str	r3, [fp, #28]
   12740:	strb	r3, [fp, #32]
   12744:	strb	r3, [fp, #40]	; 0x28
   12748:	mvn	r3, #99	; 0x63
   1274c:	str	r3, [fp, #16]
   12750:	bl	1e5a4 <__assert_fail@plt+0xbeb8>
   12754:	cmp	r0, #0
   12758:	beq	12760 <__assert_fail@plt+0x74>
   1275c:	bl	1e478 <__assert_fail@plt+0xbd8c>
   12760:	ldr	r0, [pc, #1252]	; 12c4c <__assert_fail@plt+0x560>
   12764:	bl	184f4 <__assert_fail@plt+0x5e08>
   12768:	cmp	r0, #0
   1276c:	mov	r4, r0
   12770:	str	r0, [fp, #36]	; 0x24
   12774:	bne	127a0 <__assert_fail@plt+0xb4>
   12778:	bl	12404 <__errno_location@plt>
   1277c:	ldr	r5, [r0]
   12780:	mov	r2, #5
   12784:	mov	r0, r4
   12788:	ldr	r1, [pc, #1216]	; 12c50 <__assert_fail@plt+0x564>
   1278c:	bl	1217c <dcgettext@plt>
   12790:	mov	r2, r0
   12794:	mov	r1, r5
   12798:	mov	r0, #1
   1279c:	bl	122c0 <error@plt>
   127a0:	ldr	r7, [pc, #1196]	; 12c54 <__assert_fail@plt+0x568>
   127a4:	mov	r0, r7
   127a8:	bl	17df8 <__assert_fail@plt+0x570c>
   127ac:	ldr	r1, [pc, #1188]	; 12c58 <__assert_fail@plt+0x56c>
   127b0:	mov	r0, #6
   127b4:	bl	12518 <setlocale@plt>
   127b8:	ldr	r1, [pc, #1180]	; 12c5c <__assert_fail@plt+0x570>
   127bc:	ldr	r0, [pc, #1180]	; 12c60 <__assert_fail@plt+0x574>
   127c0:	bl	12620 <bindtextdomain@plt>
   127c4:	ldr	r0, [pc, #1172]	; 12c60 <__assert_fail@plt+0x574>
   127c8:	bl	121d0 <textdomain@plt>
   127cc:	ldr	r0, [pc, #1168]	; 12c64 <__assert_fail@plt+0x578>
   127d0:	bl	378cc <__assert_fail@plt+0x251e0>
   127d4:	subs	r4, r0, #0
   127d8:	beq	12800 <__assert_fail@plt+0x114>
   127dc:	bl	12404 <__errno_location@plt>
   127e0:	ldr	r4, [r0]
   127e4:	mov	r2, #5
   127e8:	mov	r0, #0
   127ec:	ldr	r1, [pc, #1140]	; 12c68 <__assert_fail@plt+0x57c>
   127f0:	bl	1217c <dcgettext@plt>
   127f4:	mov	r2, r0
   127f8:	mov	r1, r4
   127fc:	b	12798 <__assert_fail@plt+0xac>
   12800:	mov	r1, r6
   12804:	mov	r0, r5
   12808:	bl	17a20 <__assert_fail@plt+0x5334>
   1280c:	ldr	r3, [r7, #44]	; 0x2c
   12810:	mov	r8, r0
   12814:	tst	r3, #2
   12818:	ldrne	r2, [pc, #1100]	; 12c6c <__assert_fail@plt+0x580>
   1281c:	strne	r2, [r7, #52]	; 0x34
   12820:	tst	r3, #128	; 0x80
   12824:	beq	12848 <__assert_fail@plt+0x15c>
   12828:	ldr	r3, [pc, #1088]	; 12c70 <__assert_fail@plt+0x584>
   1282c:	ldr	r0, [pc, #1088]	; 12c74 <__assert_fail@plt+0x588>
   12830:	ldr	r9, [r3]
   12834:	bl	12170 <ctime@plt>
   12838:	mov	r2, r0
   1283c:	ldr	r1, [pc, #1076]	; 12c78 <__assert_fail@plt+0x58c>
   12840:	mov	r0, r9
   12844:	bl	123f8 <fprintf@plt>
   12848:	mov	r0, r5
   1284c:	mov	r2, r8
   12850:	add	r9, r6, r8, lsl #2
   12854:	mov	r1, r6
   12858:	sub	r5, r5, r8
   1285c:	bl	16bb4 <__assert_fail@plt+0x44c8>
   12860:	cmp	r5, #0
   12864:	str	r0, [sp, #12]
   12868:	ble	12880 <__assert_fail@plt+0x194>
   1286c:	mov	r1, #1
   12870:	ldr	r0, [r6, r8, lsl #2]
   12874:	bl	1799c <__assert_fail@plt+0x52b0>
   12878:	eor	r0, r0, #1
   1287c:	uxtb	r4, r0
   12880:	ldr	r5, [r7, #76]	; 0x4c
   12884:	cmp	r5, #0
   12888:	beq	12a58 <__assert_fail@plt+0x36c>
   1288c:	cmp	r4, #0
   12890:	beq	128e8 <__assert_fail@plt+0x1fc>
   12894:	mov	r2, #5
   12898:	ldr	r1, [pc, #988]	; 12c7c <__assert_fail@plt+0x590>
   1289c:	mov	r0, #0
   128a0:	bl	1217c <dcgettext@plt>
   128a4:	mov	r4, r0
   128a8:	mov	r0, #0
   128ac:	ldr	r1, [r6, r8, lsl #2]
   128b0:	bl	17f84 <__assert_fail@plt+0x5898>
   128b4:	mov	r1, #0
   128b8:	mov	r3, r0
   128bc:	mov	r2, r4
   128c0:	mov	r0, r1
   128c4:	bl	122c0 <error@plt>
   128c8:	mov	r2, #5
   128cc:	ldr	r1, [pc, #940]	; 12c80 <__assert_fail@plt+0x594>
   128d0:	mov	r0, #0
   128d4:	bl	1217c <dcgettext@plt>
   128d8:	ldr	r2, [pc, #932]	; 12c84 <__assert_fail@plt+0x598>
   128dc:	mov	r3, r0
   128e0:	mov	r1, #0
   128e4:	b	129a4 <__assert_fail@plt+0x2b8>
   128e8:	ldr	r1, [pc, #920]	; 12c88 <__assert_fail@plt+0x59c>
   128ec:	mov	r0, r5
   128f0:	bl	11ffc <strcmp@plt>
   128f4:	cmp	r0, #0
   128f8:	bne	1295c <__assert_fail@plt+0x270>
   128fc:	ldrb	r3, [r7, #80]	; 0x50
   12900:	mov	r2, #5
   12904:	cmp	r3, #0
   12908:	beq	12920 <__assert_fail@plt+0x234>
   1290c:	ldr	r1, [pc, #888]	; 12c8c <__assert_fail@plt+0x5a0>
   12910:	bl	1217c <dcgettext@plt>
   12914:	mov	r3, r0
   12918:	ldr	r2, [pc, #880]	; 12c90 <__assert_fail@plt+0x5a4>
   1291c:	b	128e0 <__assert_fail@plt+0x1f4>
   12920:	ldr	r1, [pc, #876]	; 12c94 <__assert_fail@plt+0x5a8>
   12924:	bl	1217c <dcgettext@plt>
   12928:	mov	r1, r0
   1292c:	mov	r0, r4
   12930:	bl	17f84 <__assert_fail@plt+0x5898>
   12934:	ldr	r3, [pc, #860]	; 12c98 <__assert_fail@plt+0x5ac>
   12938:	mov	r6, r0
   1293c:	ldr	r5, [r3]
   12940:	mov	r0, r5
   12944:	bl	1f4f8 <__assert_fail@plt+0xce0c>
   12948:	mov	r8, r0
   1294c:	cmp	r8, #0
   12950:	movne	r9, #1
   12954:	bne	12b3c <__assert_fail@plt+0x450>
   12958:	bl	27698 <__assert_fail@plt+0x14fac>
   1295c:	mov	r1, r5
   12960:	mov	r0, r4
   12964:	bl	17f84 <__assert_fail@plt+0x5898>
   12968:	mov	r6, r0
   1296c:	ldr	r1, [pc, #808]	; 12c9c <__assert_fail@plt+0x5b0>
   12970:	ldr	r0, [r7, #76]	; 0x4c
   12974:	bl	125e4 <fopen64@plt>
   12978:	subs	r5, r0, #0
   1297c:	bne	129ac <__assert_fail@plt+0x2c0>
   12980:	bl	12404 <__errno_location@plt>
   12984:	ldr	r5, [r0]
   12988:	mov	r2, #5
   1298c:	mov	r0, r4
   12990:	ldr	r1, [pc, #776]	; 12ca0 <__assert_fail@plt+0x5b4>
   12994:	bl	1217c <dcgettext@plt>
   12998:	mov	r2, r0
   1299c:	mov	r3, r6
   129a0:	mov	r1, r5
   129a4:	mov	r0, #1
   129a8:	bl	122c0 <error@plt>
   129ac:	bl	12488 <fileno@plt>
   129b0:	subs	r4, r0, #0
   129b4:	bge	129cc <__assert_fail@plt+0x2e0>
   129b8:	ldr	r3, [pc, #740]	; 12ca4 <__assert_fail@plt+0x5b8>
   129bc:	movw	r2, #610	; 0x262
   129c0:	ldr	r1, [pc, #736]	; 12ca8 <__assert_fail@plt+0x5bc>
   129c4:	ldr	r0, [pc, #736]	; 12cac <__assert_fail@plt+0x5c0>
   129c8:	bl	126ec <__assert_fail@plt>
   129cc:	ldrb	r3, [r7, #80]	; 0x50
   129d0:	cmp	r3, #0
   129d4:	beq	12a48 <__assert_fail@plt+0x35c>
   129d8:	add	r1, sp, #16
   129dc:	bl	378f4 <__assert_fail@plt+0x25208>
   129e0:	cmp	r0, #0
   129e4:	bne	12a48 <__assert_fail@plt+0x35c>
   129e8:	add	r1, sp, #120	; 0x78
   129ec:	bl	378f4 <__assert_fail@plt+0x25208>
   129f0:	cmp	r0, #0
   129f4:	bne	12a48 <__assert_fail@plt+0x35c>
   129f8:	ldrd	r0, [sp, #112]	; 0x70
   129fc:	ldrd	r2, [sp, #216]	; 0xd8
   12a00:	cmp	r1, r3
   12a04:	cmpeq	r0, r2
   12a08:	bne	12a48 <__assert_fail@plt+0x35c>
   12a0c:	ldrd	r0, [sp, #16]
   12a10:	ldrd	r2, [sp, #120]	; 0x78
   12a14:	cmp	r1, r3
   12a18:	cmpeq	r0, r2
   12a1c:	bne	12a48 <__assert_fail@plt+0x35c>
   12a20:	mov	r2, #5
   12a24:	ldr	r1, [pc, #644]	; 12cb0 <__assert_fail@plt+0x5c4>
   12a28:	mov	r0, #0
   12a2c:	bl	1217c <dcgettext@plt>
   12a30:	mov	r3, r0
   12a34:	ldr	r2, [pc, #632]	; 12cb4 <__assert_fail@plt+0x5c8>
   12a38:	mov	r1, #0
   12a3c:	mov	r0, #1
   12a40:	str	r6, [sp]
   12a44:	bl	122c0 <error@plt>
   12a48:	mov	r1, #1
   12a4c:	mov	r0, r4
   12a50:	bl	1f784 <__assert_fail@plt+0xd098>
   12a54:	b	12940 <__assert_fail@plt+0x254>
   12a58:	cmp	r4, #0
   12a5c:	bne	12a90 <__assert_fail@plt+0x3a4>
   12a60:	mov	r3, #46	; 0x2e
   12a64:	add	r0, sp, #120	; 0x78
   12a68:	strh	r3, [sp, #120]	; 0x78
   12a6c:	bl	12eac <__assert_fail@plt+0x7c0>
   12a70:	cmp	r0, #0
   12a74:	beq	12a84 <__assert_fail@plt+0x398>
   12a78:	ldr	r0, [sp, #12]
   12a7c:	bl	14c94 <__assert_fail@plt+0x25a8>
   12a80:	bl	182f4 <__assert_fail@plt+0x5c08>
   12a84:	ldr	r0, [fp, #28]
   12a88:	add	sp, sp, #228	; 0xe4
   12a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a90:	mov	r0, r9
   12a94:	mov	r6, r5
   12a98:	bl	1f4d0 <__assert_fail@plt+0xcde4>
   12a9c:	mov	r8, r0
   12aa0:	b	1294c <__assert_fail@plt+0x260>
   12aa4:	bl	12404 <__errno_location@plt>
   12aa8:	ldr	r9, [r0]
   12aac:	mov	r2, #5
   12ab0:	mov	r0, r4
   12ab4:	ldr	r1, [pc, #508]	; 12cb8 <__assert_fail@plt+0x5cc>
   12ab8:	bl	1217c <dcgettext@plt>
   12abc:	mov	r2, r0
   12ac0:	mov	r3, r6
   12ac4:	mov	r1, r9
   12ac8:	mov	r0, r4
   12acc:	bl	122c0 <error@plt>
   12ad0:	mov	r3, #1
   12ad4:	mov	r9, r4
   12ad8:	str	r3, [fp, #28]
   12adc:	b	12b6c <__assert_fail@plt+0x480>
   12ae0:	ldr	r3, [pc, #444]	; 12ca4 <__assert_fail@plt+0x5b8>
   12ae4:	movw	r2, #675	; 0x2a3
   12ae8:	ldr	r1, [pc, #440]	; 12ca8 <__assert_fail@plt+0x5bc>
   12aec:	ldr	r0, [pc, #456]	; 12cbc <__assert_fail@plt+0x5d0>
   12af0:	b	129c8 <__assert_fail@plt+0x2dc>
   12af4:	ldrb	r3, [r4]
   12af8:	ldr	sl, [r7, #76]	; 0x4c
   12afc:	cmp	r3, #0
   12b00:	str	r3, [sp, #8]
   12b04:	bne	12bf0 <__assert_fail@plt+0x504>
   12b08:	cmp	sl, #0
   12b0c:	bne	12bb4 <__assert_fail@plt+0x4c8>
   12b10:	mov	r1, r4
   12b14:	mov	r0, sl
   12b18:	bl	17f84 <__assert_fail@plt+0x5898>
   12b1c:	mov	r3, r0
   12b20:	ldr	r2, [pc, #348]	; 12c84 <__assert_fail@plt+0x598>
   12b24:	mov	r1, #2
   12b28:	mov	r0, sl
   12b2c:	bl	122c0 <error@plt>
   12b30:	mov	r3, #1
   12b34:	mov	r9, #0
   12b38:	str	r3, [fp, #28]
   12b3c:	add	r1, sp, #120	; 0x78
   12b40:	mov	r0, r8
   12b44:	bl	1f52c <__assert_fail@plt+0xce40>
   12b48:	subs	r4, r0, #0
   12b4c:	bne	12af4 <__assert_fail@plt+0x408>
   12b50:	ldr	r3, [sp, #120]	; 0x78
   12b54:	cmp	r3, #3
   12b58:	beq	12958 <__assert_fail@plt+0x26c>
   12b5c:	cmp	r3, #4
   12b60:	beq	12aa4 <__assert_fail@plt+0x3b8>
   12b64:	cmp	r3, #2
   12b68:	bne	12ae0 <__assert_fail@plt+0x3f4>
   12b6c:	mov	r0, r8
   12b70:	bl	1f5e0 <__assert_fail@plt+0xcef4>
   12b74:	cmp	r9, #0
   12b78:	beq	12a84 <__assert_fail@plt+0x398>
   12b7c:	ldr	r3, [r7, #76]	; 0x4c
   12b80:	cmp	r3, #0
   12b84:	beq	12a78 <__assert_fail@plt+0x38c>
   12b88:	mov	r0, r5
   12b8c:	bl	120bc <ferror@plt>
   12b90:	cmp	r0, #0
   12b94:	beq	12c30 <__assert_fail@plt+0x544>
   12b98:	mov	r2, #5
   12b9c:	ldr	r1, [pc, #284]	; 12cc0 <__assert_fail@plt+0x5d4>
   12ba0:	mov	r0, #0
   12ba4:	bl	1217c <dcgettext@plt>
   12ba8:	mov	r2, r0
   12bac:	mov	r3, r6
   12bb0:	b	128e0 <__assert_fail@plt+0x1f4>
   12bb4:	mov	r0, r8
   12bb8:	bl	1f5c0 <__assert_fail@plt+0xced4>
   12bbc:	mov	r4, r0
   12bc0:	mov	r2, #5
   12bc4:	ldr	r1, [pc, #248]	; 12cc4 <__assert_fail@plt+0x5d8>
   12bc8:	ldr	r0, [sp, #8]
   12bcc:	bl	1217c <dcgettext@plt>
   12bd0:	ldr	r1, [sp, #8]
   12bd4:	mov	r3, r6
   12bd8:	str	r4, [sp]
   12bdc:	ldr	r2, [pc, #228]	; 12cc8 <__assert_fail@plt+0x5dc>
   12be0:	str	r0, [sp, #4]
   12be4:	mov	r0, r1
   12be8:	bl	122c0 <error@plt>
   12bec:	b	12b30 <__assert_fail@plt+0x444>
   12bf0:	cmp	sl, #0
   12bf4:	beq	12c1c <__assert_fail@plt+0x530>
   12bf8:	mov	r0, r4
   12bfc:	bl	123bc <strlen@plt>
   12c00:	str	r0, [fp, #20]
   12c04:	mov	r0, r4
   12c08:	bl	12eac <__assert_fail@plt+0x7c0>
   12c0c:	cmp	r0, #0
   12c10:	bne	12b3c <__assert_fail@plt+0x450>
   12c14:	mov	r9, r0
   12c18:	b	12b6c <__assert_fail@plt+0x480>
   12c1c:	mov	r1, #1
   12c20:	bl	1799c <__assert_fail@plt+0x52b0>
   12c24:	cmp	r0, #0
   12c28:	beq	12bf8 <__assert_fail@plt+0x50c>
   12c2c:	b	12b6c <__assert_fail@plt+0x480>
   12c30:	mov	r0, r5
   12c34:	bl	124d0 <fclose@plt>
   12c38:	cmp	r0, #0
   12c3c:	beq	12a78 <__assert_fail@plt+0x38c>
   12c40:	b	12b98 <__assert_fail@plt+0x4ac>
   12c44:	andeq	lr, r4, r8, asr lr
   12c48:	andeq	r7, r3, r9, asr ip
   12c4c:			; <UNDEFINED> instruction: 0x0003b3b3
   12c50:	andeq	r7, r3, lr, asr ip
   12c54:	andeq	lr, r4, r4, lsl #29
   12c58:	andeq	r9, r3, r7, ror r5
   12c5c:	andeq	r7, r3, sl, lsl #25
   12c60:	andeq	fp, r3, r0, lsl #16
   12c64:	andeq	pc, r1, r4, lsl r8	; <UNPREDICTABLE>
   12c68:	andeq	r7, r3, r2, lsr #25
   12c6c:	andeq	r7, r1, r4, lsl #17
   12c70:	andeq	lr, r4, r0, ror #10
   12c74:	andeq	lr, r4, r0, lsr #29
   12c78:	andeq	r7, r3, r5, asr #25
   12c7c:	ldrdeq	r7, [r3], -r8
   12c80:	andeq	r7, r3, r9, ror #25
   12c84:	andeq	sp, r3, fp, lsl r2
   12c88:	andeq	r9, r3, ip, lsl r6
   12c8c:	andeq	r7, r3, ip, lsl sp
   12c90:	andeq	ip, r3, sp, asr #21
   12c94:	andeq	r7, r3, r0, ror sp
   12c98:	andeq	lr, r4, r8, ror #10
   12c9c:	andeq	fp, r3, r2, lsr #16
   12ca0:	andeq	r7, r3, r1, lsl #27
   12ca4:	muleq	r3, lr, r9
   12ca8:			; <UNDEFINED> instruction: 0x000379b6
   12cac:	ldrdeq	r7, [r3], -sl
   12cb0:	muleq	r3, ip, sp
   12cb4:	strdeq	r7, [r3], -pc	; <UNPREDICTABLE>
   12cb8:	andeq	r7, r3, r7, lsl #28
   12cbc:	andeq	r7, r3, r6, lsl lr
   12cc0:	andeq	r7, r3, r7, ror #28
   12cc4:	andeq	r7, r3, lr, lsr lr
   12cc8:	andeq	r7, r3, ip, asr lr
   12ccc:	mov	fp, #0
   12cd0:	mov	lr, #0
   12cd4:	pop	{r1}		; (ldr r1, [sp], #4)
   12cd8:	mov	r2, sp
   12cdc:	push	{r2}		; (str r2, [sp, #-4]!)
   12ce0:	push	{r0}		; (str r0, [sp, #-4]!)
   12ce4:	ldr	ip, [pc, #16]	; 12cfc <__assert_fail@plt+0x610>
   12ce8:	push	{ip}		; (str ip, [sp, #-4]!)
   12cec:	ldr	r0, [pc, #12]	; 12d00 <__assert_fail@plt+0x614>
   12cf0:	ldr	r3, [pc, #12]	; 12d04 <__assert_fail@plt+0x618>
   12cf4:	bl	12320 <__libc_start_main@plt>
   12cf8:	bl	12698 <abort@plt>
   12cfc:	andeq	r7, r3, r8, asr #17
   12d00:	andeq	r2, r1, r0, lsl r7
   12d04:	andeq	r7, r3, r8, ror #16
   12d08:	ldr	r3, [pc, #20]	; 12d24 <__assert_fail@plt+0x638>
   12d0c:	ldr	r2, [pc, #20]	; 12d28 <__assert_fail@plt+0x63c>
   12d10:	add	r3, pc, r3
   12d14:	ldr	r2, [r3, r2]
   12d18:	cmp	r2, #0
   12d1c:	bxeq	lr
   12d20:	b	12368 <__gmon_start__@plt>
   12d24:	andeq	fp, r3, r8, ror #5
   12d28:	muleq	r0, r4, r2
   12d2c:	ldr	r0, [pc, #24]	; 12d4c <__assert_fail@plt+0x660>
   12d30:	ldr	r3, [pc, #24]	; 12d50 <__assert_fail@plt+0x664>
   12d34:	cmp	r3, r0
   12d38:	bxeq	lr
   12d3c:	ldr	r3, [pc, #16]	; 12d54 <__assert_fail@plt+0x668>
   12d40:	cmp	r3, #0
   12d44:	bxeq	lr
   12d48:	bx	r3
   12d4c:	andeq	lr, r4, ip, asr #10
   12d50:	andeq	lr, r4, ip, asr #10
   12d54:	andeq	r0, r0, r0
   12d58:	ldr	r0, [pc, #36]	; 12d84 <__assert_fail@plt+0x698>
   12d5c:	ldr	r1, [pc, #36]	; 12d88 <__assert_fail@plt+0x69c>
   12d60:	sub	r1, r1, r0
   12d64:	asr	r1, r1, #2
   12d68:	add	r1, r1, r1, lsr #31
   12d6c:	asrs	r1, r1, #1
   12d70:	bxeq	lr
   12d74:	ldr	r3, [pc, #16]	; 12d8c <__assert_fail@plt+0x6a0>
   12d78:	cmp	r3, #0
   12d7c:	bxeq	lr
   12d80:	bx	r3
   12d84:	andeq	lr, r4, ip, asr #10
   12d88:	andeq	lr, r4, ip, asr #10
   12d8c:	andeq	r0, r0, r0
   12d90:	push	{r4, lr}
   12d94:	ldr	r4, [pc, #24]	; 12db4 <__assert_fail@plt+0x6c8>
   12d98:	ldrb	r3, [r4]
   12d9c:	cmp	r3, #0
   12da0:	popne	{r4, pc}
   12da4:	bl	12d2c <__assert_fail@plt+0x640>
   12da8:	mov	r3, #1
   12dac:	strb	r3, [r4]
   12db0:	pop	{r4, pc}
   12db4:	andeq	lr, r4, r0, ror r5
   12db8:	b	12d58 <__assert_fail@plt+0x66c>
   12dbc:	ldr	r3, [pc, #56]	; 12dfc <__assert_fail@plt+0x710>
   12dc0:	push	{lr}		; (str lr, [sp, #-4]!)
   12dc4:	sub	sp, sp, #108	; 0x6c
   12dc8:	mov	r1, sp
   12dcc:	ldr	r3, [r3, #52]	; 0x34
   12dd0:	blx	r3
   12dd4:	cmp	r0, #0
   12dd8:	beq	12df0 <__assert_fail@plt+0x704>
   12ddc:	bl	12404 <__errno_location@plt>
   12de0:	ldr	r0, [r0]
   12de4:	sub	r0, r0, #40	; 0x28
   12de8:	clz	r0, r0
   12dec:	lsr	r0, r0, #5
   12df0:	and	r0, r0, #1
   12df4:	add	sp, sp, #108	; 0x6c
   12df8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dfc:	andeq	lr, r4, r4, lsl #29
   12e00:	push	{r4, lr}
   12e04:	ldr	r4, [pc, #88]	; 12e64 <__assert_fail@plt+0x778>
   12e08:	ldr	r2, [r4]
   12e0c:	tst	r2, #512	; 0x200
   12e10:	popeq	{r4, pc}
   12e14:	cmn	r0, #100	; 0x64
   12e18:	cmpne	r0, #0
   12e1c:	bge	12e34 <__assert_fail@plt+0x748>
   12e20:	ldr	r3, [pc, #64]	; 12e68 <__assert_fail@plt+0x77c>
   12e24:	mov	r2, #107	; 0x6b
   12e28:	ldr	r1, [pc, #60]	; 12e6c <__assert_fail@plt+0x780>
   12e2c:	ldr	r0, [pc, #60]	; 12e70 <__assert_fail@plt+0x784>
   12e30:	bl	126ec <__assert_fail@plt>
   12e34:	ldr	r2, [pc, #56]	; 12e74 <__assert_fail@plt+0x788>
   12e38:	str	r0, [r2, #16]
   12e3c:	ldr	r2, [r4, #4]
   12e40:	cmp	r2, #0
   12e44:	popge	{r4, pc}
   12e48:	cmn	r0, #100	; 0x64
   12e4c:	bne	12e58 <__assert_fail@plt+0x76c>
   12e50:	str	r0, [r4, #4]
   12e54:	pop	{r4, pc}
   12e58:	bl	1f7e8 <__assert_fail@plt+0xd0fc>
   12e5c:	str	r0, [r4, #4]
   12e60:	pop	{r4, pc}
   12e64:	andeq	lr, r4, r0, lsr #5
   12e68:	andeq	r7, r3, r8, asr #18
   12e6c:			; <UNDEFINED> instruction: 0x000379b6
   12e70:	andeq	r7, r3, r0, asr #19
   12e74:	andeq	lr, r4, r8, asr lr
   12e78:	push	{r4, lr}
   12e7c:	ldr	r4, [pc, #36]	; 12ea8 <__assert_fail@plt+0x7bc>
   12e80:	ldr	r3, [r4]
   12e84:	tst	r3, #512	; 0x200
   12e88:	popeq	{r4, pc}
   12e8c:	ldr	r0, [r4, #4]
   12e90:	cmp	r0, #0
   12e94:	poplt	{r4, pc}
   12e98:	bl	126a4 <close@plt>
   12e9c:	mvn	r3, #0
   12ea0:	str	r3, [r4, #4]
   12ea4:	pop	{r4, pc}
   12ea8:	andeq	lr, r4, r0, lsr #5
   12eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb0:	sub	sp, sp, #164	; 0xa4
   12eb4:	ldr	r4, [pc, #1856]	; 135fc <__assert_fail@plt+0xf10>
   12eb8:	str	r0, [sp, #24]
   12ebc:	bl	123bc <strlen@plt>
   12ec0:	str	r0, [r4, #20]
   12ec4:	mvn	r0, #99	; 0x63
   12ec8:	bl	12e00 <__assert_fail@plt+0x714>
   12ecc:	ldr	r3, [sp, #24]
   12ed0:	str	r4, [sp, #16]
   12ed4:	str	r3, [sp, #48]	; 0x30
   12ed8:	mov	r3, #0
   12edc:	str	r3, [sp, #52]	; 0x34
   12ee0:	ldr	r3, [pc, #1816]	; 13600 <__assert_fail@plt+0xf14>
   12ee4:	ldr	r1, [r3, #48]	; 0x30
   12ee8:	mov	r2, r3
   12eec:	ldr	r3, [pc, #1808]	; 13604 <__assert_fail@plt+0xf18>
   12ef0:	cmp	r1, #1
   12ef4:	beq	12f90 <__assert_fail@plt+0x8a4>
   12ef8:	cmp	r1, #0
   12efc:	beq	12fac <__assert_fail@plt+0x8c0>
   12f00:	cmp	r1, #2
   12f04:	beq	12fa0 <__assert_fail@plt+0x8b4>
   12f08:	ldrb	r2, [r2, #13]
   12f0c:	add	r0, sp, #48	; 0x30
   12f10:	cmp	r2, #0
   12f14:	ldrne	r2, [r3]
   12f18:	orrne	r2, r2, #64	; 0x40
   12f1c:	strne	r2, [r3]
   12f20:	mov	r2, #0
   12f24:	ldr	r1, [r3]
   12f28:	bl	2975c <__assert_fail@plt+0x17070>
   12f2c:	mov	r7, r0
   12f30:	bl	12404 <__errno_location@plt>
   12f34:	cmp	r7, #0
   12f38:	str	r0, [sp, #20]
   12f3c:	bne	13594 <__assert_fail@plt+0xea8>
   12f40:	mov	r3, r0
   12f44:	mov	r2, #5
   12f48:	ldr	r1, [pc, #1720]	; 13608 <__assert_fail@plt+0xf1c>
   12f4c:	mov	r0, r7
   12f50:	ldr	r4, [r3]
   12f54:	bl	1217c <dcgettext@plt>
   12f58:	mov	r5, r0
   12f5c:	mov	r0, r7
   12f60:	ldr	r1, [sp, #24]
   12f64:	bl	17f84 <__assert_fail@plt+0x5898>
   12f68:	mov	r3, r0
   12f6c:	mov	r2, r5
   12f70:	mov	r0, r7
   12f74:	mov	r1, r4
   12f78:	bl	122c0 <error@plt>
   12f7c:	ldr	r3, [sp, #16]
   12f80:	mov	r0, #1
   12f84:	str	r0, [r3, #28]
   12f88:	add	sp, sp, #164	; 0xa4
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f90:	ldr	r1, [r3]
   12f94:	orr	r1, r1, #3
   12f98:	str	r1, [r3]
   12f9c:	b	12f08 <__assert_fail@plt+0x81c>
   12fa0:	ldr	r1, [r3]
   12fa4:	orr	r1, r1, #17
   12fa8:	b	12f98 <__assert_fail@plt+0x8ac>
   12fac:	ldr	r1, [r3]
   12fb0:	orr	r1, r1, #16
   12fb4:	b	12f98 <__assert_fail@plt+0x8ac>
   12fb8:	ldrb	r3, [r5, #32]
   12fbc:	cmp	r3, #0
   12fc0:	beq	12fd8 <__assert_fail@plt+0x8ec>
   12fc4:	ldr	r2, [sp, #28]
   12fc8:	ldr	r3, [r4, #48]	; 0x30
   12fcc:	cmp	r2, r3
   12fd0:	beq	12fd8 <__assert_fail@plt+0x8ec>
   12fd4:	bl	17688 <__assert_fail@plt+0x4f9c>
   12fd8:	ldr	r3, [r4, #48]	; 0x30
   12fdc:	mov	r0, #0
   12fe0:	strb	r0, [r5, #4]
   12fe4:	strb	r0, [r5, #40]	; 0x28
   12fe8:	str	r3, [sp, #28]
   12fec:	ldr	r3, [r4, #80]	; 0x50
   12ff0:	subs	r2, r3, r0
   12ff4:	str	r3, [r5, #8]
   12ff8:	ldr	r3, [r6, #44]	; 0x2c
   12ffc:	movne	r2, #1
   13000:	strb	r2, [r5, #5]
   13004:	tst	r3, #4
   13008:	beq	130a0 <__assert_fail@plt+0x9b4>
   1300c:	ldr	r3, [pc, #1528]	; 1360c <__assert_fail@plt+0xf20>
   13010:	ldr	r2, [r4, #28]
   13014:	ldr	r1, [r6, #72]	; 0x48
   13018:	ldr	fp, [r3]
   1301c:	bl	265a0 <__assert_fail@plt+0x13eb4>
   13020:	ldrh	r2, [r4, #56]	; 0x38
   13024:	mov	sl, r0
   13028:	sub	r1, r2, #1
   1302c:	cmp	r1, #13
   13030:	bhi	130e4 <__assert_fail@plt+0x9f8>
   13034:	ldr	r3, [pc, #1492]	; 13610 <__assert_fail@plt+0xf24>
   13038:	add	r3, r3, r1, lsl #2
   1303c:	ldr	r8, [r3, #12]
   13040:	mov	r0, #1
   13044:	ldr	r2, [r4, #28]
   13048:	ldr	r3, [r4, #48]	; 0x30
   1304c:	ldr	r1, [r6, #72]	; 0x48
   13050:	str	r3, [sp, #32]
   13054:	ldr	r3, [pc, #1448]	; 13604 <__assert_fail@plt+0xf18>
   13058:	ldr	r3, [r3, #8]
   1305c:	str	r3, [sp, #36]	; 0x24
   13060:	bl	265a0 <__assert_fail@plt+0x13eb4>
   13064:	mov	r9, r0
   13068:	mov	r0, #2
   1306c:	ldr	r2, [r4, #24]
   13070:	ldr	r1, [r6, #72]	; 0x48
   13074:	bl	265a0 <__assert_fail@plt+0x13eb4>
   13078:	ldr	r3, [sp, #36]	; 0x24
   1307c:	mov	r2, sl
   13080:	ldr	r1, [pc, #1420]	; 13614 <__assert_fail@plt+0xf28>
   13084:	stmib	sp, {r3, r9}
   13088:	ldr	r3, [sp, #32]
   1308c:	str	r0, [sp, #12]
   13090:	mov	r0, fp
   13094:	str	r3, [sp]
   13098:	mov	r3, r8
   1309c:	bl	123f8 <fprintf@plt>
   130a0:	ldrh	r3, [r4, #56]	; 0x38
   130a4:	ldr	r8, [pc, #1368]	; 13604 <__assert_fail@plt+0xf18>
   130a8:	cmp	r3, #6
   130ac:	bne	130f8 <__assert_fail@plt+0xa0c>
   130b0:	bl	12e78 <__assert_fail@plt+0x78c>
   130b4:	ldr	r0, [r7, #32]
   130b8:	bl	12e00 <__assert_fail@plt+0x714>
   130bc:	ldr	r1, [r4, #48]	; 0x30
   130c0:	ldrd	r2, [r4, #160]	; 0xa0
   130c4:	str	r1, [r8, #8]
   130c8:	strd	r2, [sp, #152]	; 0x98
   130cc:	ldrh	r3, [r4, #56]	; 0x38
   130d0:	cmp	r3, #7
   130d4:	bne	1311c <__assert_fail@plt+0xa30>
   130d8:	ldr	r1, [r4, #28]
   130dc:	ldr	r0, [r4, #32]
   130e0:	b	13290 <__assert_fail@plt+0xba4>
   130e4:	ldr	r1, [pc, #1324]	; 13618 <__assert_fail@plt+0xf2c>
   130e8:	ldr	r0, [pc, #1324]	; 1361c <__assert_fail@plt+0xf30>
   130ec:	bl	12590 <sprintf@plt>
   130f0:	ldr	r8, [pc, #1316]	; 1361c <__assert_fail@plt+0xf30>
   130f4:	b	13040 <__assert_fail@plt+0x954>
   130f8:	ldr	r2, [r4, #48]	; 0x30
   130fc:	ldr	r1, [r8, #8]
   13100:	clz	r3, r2
   13104:	lsr	r3, r3, #5
   13108:	cmp	r2, r1
   1310c:	orrgt	r3, r3, #1
   13110:	cmp	r3, #0
   13114:	bne	130b0 <__assert_fail@plt+0x9c4>
   13118:	b	130b4 <__assert_fail@plt+0x9c8>
   1311c:	cmp	r3, #4
   13120:	bne	13198 <__assert_fail@plt+0xaac>
   13124:	ldr	r1, [r4, #28]
   13128:	ldr	r0, [r4, #32]
   1312c:	bl	18004 <__assert_fail@plt+0x5918>
   13130:	ldrb	r3, [r6]
   13134:	cmp	r3, #0
   13138:	beq	132c4 <__assert_fail@plt+0xbd8>
   1313c:	ldr	r2, [sp, #20]
   13140:	mov	r3, #0
   13144:	mov	r0, r7
   13148:	str	r3, [r2]
   1314c:	bl	29b64 <__assert_fail@plt+0x17478>
   13150:	subs	r4, r0, #0
   13154:	bne	12fb8 <__assert_fail@plt+0x8cc>
   13158:	ldr	r3, [sp, #20]
   1315c:	ldr	r5, [r3]
   13160:	cmp	r5, #0
   13164:	beq	135a8 <__assert_fail@plt+0xebc>
   13168:	ldr	r1, [sp, #24]
   1316c:	bl	17f84 <__assert_fail@plt+0x5898>
   13170:	mov	r3, r0
   13174:	ldr	r2, [pc, #1188]	; 13620 <__assert_fail@plt+0xf34>
   13178:	mov	r0, r4
   1317c:	mov	r1, r5
   13180:	bl	122c0 <error@plt>
   13184:	ldr	r3, [pc, #1136]	; 135fc <__assert_fail@plt+0xf10>
   13188:	mov	r2, #1
   1318c:	mov	r0, r4
   13190:	str	r2, [r3, #28]
   13194:	b	12f88 <__assert_fail@plt+0x89c>
   13198:	cmp	r3, #2
   1319c:	bne	13270 <__assert_fail@plt+0xb84>
   131a0:	ldr	r3, [r4, #80]	; 0x50
   131a4:	mov	r2, #5
   131a8:	and	r3, r3, #61440	; 0xf000
   131ac:	cmp	r3, #40960	; 0xa000
   131b0:	bne	131f0 <__assert_fail@plt+0xb04>
   131b4:	ldr	r1, [pc, #1128]	; 13624 <__assert_fail@plt+0xf38>
   131b8:	mov	r0, #0
   131bc:	bl	1217c <dcgettext@plt>
   131c0:	mov	r8, r0
   131c4:	mov	r0, #0
   131c8:	ldr	r1, [r4, #28]
   131cc:	bl	17f84 <__assert_fail@plt+0x5898>
   131d0:	mov	r1, #0
   131d4:	mov	r3, r0
   131d8:	mov	r2, r8
   131dc:	mov	r0, r1
   131e0:	bl	122c0 <error@plt>
   131e4:	mov	r3, #1
   131e8:	str	r3, [r5, #28]
   131ec:	b	1313c <__assert_fail@plt+0xa50>
   131f0:	ldr	r1, [pc, #1072]	; 13628 <__assert_fail@plt+0xf3c>
   131f4:	mov	r0, #0
   131f8:	bl	1217c <dcgettext@plt>
   131fc:	mov	r8, r0
   13200:	mov	r0, #0
   13204:	ldr	r1, [r4, #28]
   13208:	bl	17f84 <__assert_fail@plt+0x5898>
   1320c:	ldr	r3, [r4]
   13210:	mov	r9, r0
   13214:	ldr	r1, [r6, #72]	; 0x48
   13218:	ldr	r4, [r3, #40]	; 0x28
   1321c:	cmp	r4, #0
   13220:	bne	1324c <__assert_fail@plt+0xb60>
   13224:	ldr	r2, [pc, #1024]	; 1362c <__assert_fail@plt+0xf40>
   13228:	mov	r0, #1
   1322c:	bl	265a0 <__assert_fail@plt+0x13eb4>
   13230:	mov	r1, #0
   13234:	mov	r3, r9
   13238:	str	r0, [sp]
   1323c:	mov	r2, r8
   13240:	mov	r0, r1
   13244:	bl	122c0 <error@plt>
   13248:	b	131e4 <__assert_fail@plt+0xaf8>
   1324c:	ldr	sl, [r3, #28]
   13250:	mov	r3, #0
   13254:	mov	r0, #1
   13258:	ldrb	fp, [sl, r4]
   1325c:	mov	r2, sl
   13260:	strb	r3, [sl, r4]
   13264:	bl	265a0 <__assert_fail@plt+0x13eb4>
   13268:	strb	fp, [sl, r4]
   1326c:	b	13230 <__assert_fail@plt+0xb44>
   13270:	cmp	r3, #13
   13274:	bne	13298 <__assert_fail@plt+0xbac>
   13278:	ldr	r0, [r4, #24]
   1327c:	bl	12dbc <__assert_fail@plt+0x6d0>
   13280:	cmp	r0, #0
   13284:	beq	132c4 <__assert_fail@plt+0xbd8>
   13288:	ldr	r1, [r4, #28]
   1328c:	mov	r0, #40	; 0x28
   13290:	bl	18004 <__assert_fail@plt+0x5918>
   13294:	b	1313c <__assert_fail@plt+0xa50>
   13298:	cmp	r3, #10
   1329c:	bne	132c4 <__assert_fail@plt+0xbd8>
   132a0:	cmp	r1, #0
   132a4:	beq	130d8 <__assert_fail@plt+0x9ec>
   132a8:	ldr	r0, [r4, #24]
   132ac:	bl	12dbc <__assert_fail@plt+0x6d0>
   132b0:	cmp	r0, #0
   132b4:	ldr	r1, [r4, #28]
   132b8:	bne	1328c <__assert_fail@plt+0xba0>
   132bc:	ldr	r0, [r4, #32]
   132c0:	bl	18004 <__assert_fail@plt+0x5918>
   132c4:	ldrh	r2, [r4, #56]	; 0x38
   132c8:	sub	r3, r2, #10
   132cc:	cmp	r3, #1
   132d0:	bhi	133ac <__assert_fail@plt+0xcc0>
   132d4:	ldrb	r3, [r5, #4]
   132d8:	cmp	r3, #0
   132dc:	beq	132f4 <__assert_fail@plt+0xc08>
   132e0:	ldr	r3, [pc, #840]	; 13630 <__assert_fail@plt+0xf44>
   132e4:	mov	r2, #380	; 0x17c
   132e8:	ldr	r1, [pc, #836]	; 13634 <__assert_fail@plt+0xf48>
   132ec:	ldr	r0, [pc, #836]	; 13638 <__assert_fail@plt+0xf4c>
   132f0:	bl	126ec <__assert_fail@plt>
   132f4:	cmp	r2, #11
   132f8:	ldr	r3, [r5, #8]
   132fc:	beq	1331c <__assert_fail@plt+0xc30>
   13300:	cmp	r3, #0
   13304:	beq	1331c <__assert_fail@plt+0xc30>
   13308:	ldr	r3, [pc, #800]	; 13630 <__assert_fail@plt+0xf44>
   1330c:	movw	r2, #381	; 0x17d
   13310:	ldr	r1, [pc, #796]	; 13634 <__assert_fail@plt+0xf48>
   13314:	ldr	r0, [pc, #800]	; 1363c <__assert_fail@plt+0xf50>
   13318:	b	132f0 <__assert_fail@plt+0xc04>
   1331c:	str	r3, [sp, #44]	; 0x2c
   13320:	ldr	r3, [r4, #48]	; 0x30
   13324:	str	r3, [r5]
   13328:	ldr	r3, [sp, #44]	; 0x2c
   1332c:	cmp	r3, #0
   13330:	bne	13414 <__assert_fail@plt+0xd28>
   13334:	ldrh	r3, [r4, #56]	; 0x38
   13338:	sub	r9, r3, #1
   1333c:	cmp	r3, #6
   13340:	cmpne	r9, #1
   13344:	movls	r9, #1
   13348:	movhi	r9, #0
   1334c:	bls	13448 <__assert_fail@plt+0xd5c>
   13350:	ldr	r3, [r6, #4]
   13354:	cmp	r3, #0
   13358:	blt	1346c <__assert_fail@plt+0xd80>
   1335c:	ldr	r2, [r4, #48]	; 0x30
   13360:	cmp	r3, r2
   13364:	bgt	1346c <__assert_fail@plt+0xd80>
   13368:	mov	r2, #4
   1336c:	mov	r1, r4
   13370:	mov	r0, r7
   13374:	bl	2a128 <__assert_fail@plt+0x17a3c>
   13378:	ldr	r3, [r6, #4]
   1337c:	ldr	r8, [r4, #48]	; 0x30
   13380:	cmp	r8, r3
   13384:	movle	r8, #0
   13388:	movgt	r8, #1
   1338c:	ldrh	r3, [r4, #56]	; 0x38
   13390:	cmp	r3, #1
   13394:	bne	13474 <__assert_fail@plt+0xd88>
   13398:	ldrb	r2, [r6]
   1339c:	cmp	r2, #0
   133a0:	bne	13488 <__assert_fail@plt+0xd9c>
   133a4:	mov	r8, #1
   133a8:	b	13498 <__assert_fail@plt+0xdac>
   133ac:	movw	r3, #257	; 0x101
   133b0:	mov	r2, #104	; 0x68
   133b4:	add	r1, r4, #64	; 0x40
   133b8:	add	r0, sp, #56	; 0x38
   133bc:	strh	r3, [r5, #4]
   133c0:	bl	120f8 <memcpy@plt>
   133c4:	ldr	r8, [sp, #72]	; 0x48
   133c8:	cmp	r8, #0
   133cc:	str	r8, [r5, #8]
   133d0:	str	r8, [sp, #44]	; 0x2c
   133d4:	bne	13320 <__assert_fail@plt+0xc34>
   133d8:	mov	r2, #5
   133dc:	ldr	r1, [pc, #604]	; 13640 <__assert_fail@plt+0xf54>
   133e0:	mov	r0, r8
   133e4:	bl	1217c <dcgettext@plt>
   133e8:	mov	r9, r0
   133ec:	mov	r0, r8
   133f0:	ldr	r2, [r4, #28]
   133f4:	ldr	r1, [r6, #72]	; 0x48
   133f8:	bl	265a0 <__assert_fail@plt+0x13eb4>
   133fc:	mov	r3, r0
   13400:	mov	r2, r9
   13404:	mov	r1, r8
   13408:	mov	r0, r8
   1340c:	bl	122c0 <error@plt>
   13410:	b	13320 <__assert_fail@plt+0xc34>
   13414:	mov	r3, #0
   13418:	add	r2, r4, #168	; 0xa8
   1341c:	add	r0, sp, #44	; 0x2c
   13420:	str	r3, [sp]
   13424:	add	r3, sp, #56	; 0x38
   13428:	ldr	r1, [r4, #28]
   1342c:	bl	180ec <__assert_fail@plt+0x5a00>
   13430:	cmp	r0, #0
   13434:	beq	1313c <__assert_fail@plt+0xa50>
   13438:	ldr	r3, [sp, #44]	; 0x2c
   1343c:	and	r3, r3, #61440	; 0xf000
   13440:	cmp	r3, #16384	; 0x4000
   13444:	bne	13334 <__assert_fail@plt+0xc48>
   13448:	ldrh	r3, [r4, #56]	; 0x38
   1344c:	cmp	r3, #11
   13450:	movne	r9, #1
   13454:	bne	13350 <__assert_fail@plt+0xc64>
   13458:	mov	r2, #1
   1345c:	mov	r1, r4
   13460:	mov	r0, r7
   13464:	bl	2a128 <__assert_fail@plt+0x17a3c>
   13468:	b	1313c <__assert_fail@plt+0xa50>
   1346c:	mov	r8, #0
   13470:	b	1338c <__assert_fail@plt+0xca0>
   13474:	cmp	r3, #6
   13478:	bne	13488 <__assert_fail@plt+0xd9c>
   1347c:	ldrb	r3, [r6]
   13480:	cmp	r3, #0
   13484:	bne	133a4 <__assert_fail@plt+0xcb8>
   13488:	ldr	r3, [r6, #8]
   1348c:	ldr	r2, [r4, #48]	; 0x30
   13490:	cmp	r2, r3
   13494:	movlt	r8, #1
   13498:	ldr	r3, [r6, #44]	; 0x2c
   1349c:	tst	r3, #4
   134a0:	beq	13504 <__assert_fail@plt+0xe18>
   134a4:	ldr	r3, [pc, #352]	; 1360c <__assert_fail@plt+0xf20>
   134a8:	mov	r0, #0
   134ac:	ldr	r2, [r4, #28]
   134b0:	ldr	r1, [r6, #72]	; 0x48
   134b4:	ldr	sl, [r3]
   134b8:	bl	265a0 <__assert_fail@plt+0x13eb4>
   134bc:	ldrh	r2, [r4, #56]	; 0x38
   134c0:	mov	fp, r0
   134c4:	sub	r1, r2, #1
   134c8:	cmp	r1, #13
   134cc:	bhi	13580 <__assert_fail@plt+0xe94>
   134d0:	ldr	r3, [pc, #312]	; 13610 <__assert_fail@plt+0xf24>
   134d4:	add	r3, r3, r1, lsl #2
   134d8:	ldr	r3, [r3, #12]
   134dc:	mov	r0, sl
   134e0:	ldrb	r2, [r5, #5]
   134e4:	ldr	r1, [pc, #344]	; 13644 <__assert_fail@plt+0xf58>
   134e8:	str	r2, [sp, #12]
   134ec:	ldrb	r2, [r5, #4]
   134f0:	str	r9, [sp]
   134f4:	str	r8, [sp, #4]
   134f8:	str	r2, [sp, #8]
   134fc:	mov	r2, fp
   13500:	bl	123f8 <fprintf@plt>
   13504:	cmp	r8, #0
   13508:	bne	1356c <__assert_fail@plt+0xe80>
   1350c:	ldrh	r3, [r4, #56]	; 0x38
   13510:	ldr	r2, [sp, #16]
   13514:	sub	r3, r3, #10
   13518:	cmp	r3, #1
   1351c:	movls	r3, #0
   13520:	movhi	r3, #1
   13524:	strb	r3, [r2, #4]
   13528:	ldr	r3, [r4, #24]
   1352c:	str	r3, [r2, #12]
   13530:	ldr	r3, [r7, #32]
   13534:	str	r3, [r2, #16]
   13538:	bl	15c9c <__assert_fail@plt+0x35b0>
   1353c:	mov	r2, r0
   13540:	add	r1, sp, #56	; 0x38
   13544:	ldr	r0, [r4, #28]
   13548:	bl	181c8 <__assert_fail@plt+0x5adc>
   1354c:	ldr	r3, [sp, #16]
   13550:	ldrb	r3, [r3, #24]
   13554:	cmp	r3, #0
   13558:	beq	1356c <__assert_fail@plt+0xe80>
   1355c:	mov	r2, #4
   13560:	mov	r1, r4
   13564:	mov	r0, r7
   13568:	bl	2a128 <__assert_fail@plt+0x17a3c>
   1356c:	ldrh	r3, [r4, #56]	; 0x38
   13570:	cmp	r3, #6
   13574:	moveq	r3, #0
   13578:	strbeq	r3, [r5, #24]
   1357c:	b	1313c <__assert_fail@plt+0xa50>
   13580:	ldr	r1, [pc, #144]	; 13618 <__assert_fail@plt+0xf2c>
   13584:	ldr	r0, [pc, #144]	; 1361c <__assert_fail@plt+0xf30>
   13588:	bl	12590 <sprintf@plt>
   1358c:	ldr	r3, [pc, #136]	; 1361c <__assert_fail@plt+0xf30>
   13590:	b	134dc <__assert_fail@plt+0xdf0>
   13594:	mov	r3, #-2147483648	; 0x80000000
   13598:	ldr	r5, [pc, #92]	; 135fc <__assert_fail@plt+0xf10>
   1359c:	ldr	r6, [pc, #92]	; 13600 <__assert_fail@plt+0xf14>
   135a0:	str	r3, [sp, #28]
   135a4:	b	1313c <__assert_fail@plt+0xa50>
   135a8:	mov	r0, r7
   135ac:	bl	29a4c <__assert_fail@plt+0x17360>
   135b0:	cmp	r0, #0
   135b4:	moveq	r0, #1
   135b8:	beq	12f88 <__assert_fail@plt+0x89c>
   135bc:	ldr	r3, [sp, #20]
   135c0:	mov	r2, #5
   135c4:	mov	r0, r5
   135c8:	ldr	r1, [pc, #120]	; 13648 <__assert_fail@plt+0xf5c>
   135cc:	ldr	r4, [r3]
   135d0:	bl	1217c <dcgettext@plt>
   135d4:	mov	r2, r0
   135d8:	mov	r0, r5
   135dc:	ldr	r3, [sp, #24]
   135e0:	mov	r1, r4
   135e4:	bl	122c0 <error@plt>
   135e8:	ldr	r3, [pc, #12]	; 135fc <__assert_fail@plt+0xf10>
   135ec:	mov	r2, #1
   135f0:	mov	r0, r5
   135f4:	str	r2, [r3, #28]
   135f8:	b	12f88 <__assert_fail@plt+0x89c>
   135fc:	andeq	lr, r4, r8, asr lr
   13600:	andeq	lr, r4, r4, lsl #29
   13604:	andeq	lr, r4, r0, lsr #5
   13608:	andeq	r7, r3, r2, ror #19
   1360c:	andeq	lr, r4, r0, ror #10
   13610:	andeq	r7, r3, r8, asr #18
   13614:	strdeq	r7, [r3], -r8
   13618:	strdeq	r7, [r3], -r3
   1361c:	andeq	lr, r4, r1, ror r5
   13620:	andeq	r7, r3, r8, ror #23
   13624:	andeq	r7, r3, r0, ror #20
   13628:	ldrdeq	r7, [r3], -r9
   1362c:	andeq	r9, r3, r7, ror r5
   13630:	andeq	r7, r3, ip, lsl #19
   13634:			; <UNDEFINED> instruction: 0x000379b6
   13638:	andeq	r7, r3, r3, lsr #22
   1363c:	andeq	r7, r3, r4, lsr fp
   13640:	andeq	r7, r3, r1, ror #22
   13644:	andeq	r7, r3, ip, lsl #23
   13648:	andeq	r7, r3, r2, lsr #24
   1364c:	ldr	r3, [pc, #12]	; 13660 <__assert_fail@plt+0xf74>
   13650:	ldr	r3, [r3]
   13654:	str	r3, [r0]
   13658:	mov	r0, #1
   1365c:	bx	lr
   13660:	andeq	lr, r4, r0, lsr #5
   13664:	andeq	r0, r0, r0
   13668:	push	{r4, lr}
   1366c:	bl	182f4 <__assert_fail@plt+0x5c08>
   13670:	ldr	r3, [pc, #4]	; 1367c <__assert_fail@plt+0xf90>
   13674:	ldr	r0, [r3, #28]
   13678:	bl	1238c <exit@plt>
   1367c:	andeq	lr, r4, r8, asr lr
   13680:	ldr	r3, [pc, #84]	; 136dc <__assert_fail@plt+0xff0>
   13684:	ldrb	r3, [r3]
   13688:	cmp	r3, #0
   1368c:	beq	136d4 <__assert_fail@plt+0xfe8>
   13690:	ldr	r2, [pc, #72]	; 136e0 <__assert_fail@plt+0xff4>
   13694:	ldrb	r3, [r2, #4]
   13698:	cmp	r3, #0
   1369c:	bne	136b8 <__assert_fail@plt+0xfcc>
   136a0:	push	{r4, lr}
   136a4:	movw	r2, #853	; 0x355
   136a8:	ldr	r3, [pc, #52]	; 136e4 <__assert_fail@plt+0xff8>
   136ac:	ldr	r1, [pc, #52]	; 136e8 <__assert_fail@plt+0xffc>
   136b0:	ldr	r0, [pc, #52]	; 136ec <__assert_fail@plt+0x1000>
   136b4:	bl	126ec <__assert_fail@plt>
   136b8:	cmp	r1, #0
   136bc:	beq	136d4 <__assert_fail@plt+0xfe8>
   136c0:	ldr	r3, [r1, #16]
   136c4:	and	r3, r3, #61440	; 0xf000
   136c8:	cmp	r3, #16384	; 0x4000
   136cc:	moveq	r3, #1
   136d0:	strbeq	r3, [r2, #24]
   136d4:	mov	r0, #1
   136d8:	bx	lr
   136dc:	andeq	lr, r4, r4, lsl #29
   136e0:	andeq	lr, r4, r8, asr lr
   136e4:	andeq	r7, r3, r7, ror #29
   136e8:	andeq	r7, r3, lr, asr #30
   136ec:	andeq	r7, r3, r4, lsr #22
   136f0:	push	{r4, r5, r6, lr}
   136f4:	mov	r4, r2
   136f8:	mov	r5, r0
   136fc:	mov	r6, r1
   13700:	ldr	r2, [r2, #156]	; 0x9c
   13704:	cmp	r2, #0
   13708:	bne	13720 <__assert_fail@plt+0x1034>
   1370c:	mov	r1, r6
   13710:	mov	r0, r5
   13714:	ldr	r2, [r4, #160]	; 0xa0
   13718:	pop	{r4, r5, r6, lr}
   1371c:	b	181c8 <__assert_fail@plt+0x5adc>
   13720:	bl	181c8 <__assert_fail@plt+0x5adc>
   13724:	cmp	r0, #0
   13728:	popne	{r4, r5, r6, pc}
   1372c:	b	1370c <__assert_fail@plt+0x1020>
   13730:	push	{r4, r5, r6, r7, r8, lr}
   13734:	mov	r6, r0
   13738:	mov	r7, r1
   1373c:	mov	r8, r2
   13740:	ldr	r4, [pc, #96]	; 137a8 <__assert_fail@plt+0x10bc>
   13744:	ldr	r1, [r4, #12]
   13748:	ldr	r0, [r4, #16]
   1374c:	bl	1f4a8 <__assert_fail@plt+0xcdbc>
   13750:	subs	r5, r0, #0
   13754:	beq	13788 <__assert_fail@plt+0x109c>
   13758:	cmp	r8, #0
   1375c:	mov	r1, r5
   13760:	ldr	r0, [r7]
   13764:	movne	r2, #16
   13768:	moveq	r2, #0
   1376c:	bl	122e4 <fnmatch@plt>
   13770:	clz	r4, r0
   13774:	lsr	r4, r4, #5
   13778:	mov	r0, r5
   1377c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   13780:	mov	r0, r4
   13784:	pop	{r4, r5, r6, r7, r8, pc}
   13788:	bl	12404 <__errno_location@plt>
   1378c:	mov	r1, r6
   13790:	ldr	r0, [r0]
   13794:	bl	18004 <__assert_fail@plt+0x5918>
   13798:	mov	r3, #1
   1379c:	str	r3, [r4, #28]
   137a0:	mov	r4, r5
   137a4:	b	13778 <__assert_fail@plt+0x108c>
   137a8:	andeq	lr, r4, r8, asr lr
   137ac:	ldr	r3, [pc, #124]	; 13830 <__assert_fail@plt+0x1144>
   137b0:	push	{r4, r5, r6, r7, r8, lr}
   137b4:	mov	r6, r0
   137b8:	mov	r7, r1
   137bc:	ldr	r4, [pc, #112]	; 13834 <__assert_fail@plt+0x1148>
   137c0:	ldr	r0, [r3]
   137c4:	bl	28474 <__assert_fail@plt+0x15d88>
   137c8:	mov	r2, #5
   137cc:	ldr	r1, [pc, #100]	; 13838 <__assert_fail@plt+0x114c>
   137d0:	mov	r0, #0
   137d4:	ldr	r5, [r4]
   137d8:	bl	1217c <dcgettext@plt>
   137dc:	mov	r1, r0
   137e0:	mov	r3, r7
   137e4:	mov	r2, r6
   137e8:	mov	r0, r5
   137ec:	bl	123f8 <fprintf@plt>
   137f0:	cmp	r0, #0
   137f4:	bge	13820 <__assert_fail@plt+0x1134>
   137f8:	bl	12404 <__errno_location@plt>
   137fc:	ldr	r4, [r0]
   13800:	mov	r2, #5
   13804:	mov	r0, #0
   13808:	ldr	r1, [pc, #44]	; 1383c <__assert_fail@plt+0x1150>
   1380c:	bl	1217c <dcgettext@plt>
   13810:	mov	r2, r0
   13814:	mov	r0, #1
   13818:	mov	r1, r4
   1381c:	bl	122c0 <error@plt>
   13820:	ldr	r0, [r4]
   13824:	bl	28474 <__assert_fail@plt+0x15d88>
   13828:	pop	{r4, r5, r6, r7, r8, lr}
   1382c:	b	27f50 <__assert_fail@plt+0x15864>
   13830:	andeq	lr, r4, ip, ror #10
   13834:	andeq	lr, r4, r0, ror #10
   13838:	andeq	r7, r3, r5, asr pc
   1383c:	andeq	r7, r3, r6, ror #30
   13840:	push	{r4, r5, r6, lr}
   13844:	mov	r4, r2
   13848:	mov	r5, r0
   1384c:	mov	r6, r1
   13850:	ldr	r2, [r2, #156]	; 0x9c
   13854:	cmp	r2, #0
   13858:	bne	13870 <__assert_fail@plt+0x1184>
   1385c:	mov	r1, r6
   13860:	mov	r0, r5
   13864:	ldr	r2, [r4, #160]	; 0xa0
   13868:	pop	{r4, r5, r6, lr}
   1386c:	b	181c8 <__assert_fail@plt+0x5adc>
   13870:	bl	181c8 <__assert_fail@plt+0x5adc>
   13874:	cmp	r0, #0
   13878:	popeq	{r4, r5, r6, pc}
   1387c:	b	1385c <__assert_fail@plt+0x1170>
   13880:	push	{r4, r5, lr}
   13884:	sub	sp, sp, #20
   13888:	mov	r5, r3
   1388c:	add	ip, sp, #16
   13890:	stmdb	ip, {r0, r1}
   13894:	mov	r1, sp
   13898:	ldr	r0, [sp, #8]
   1389c:	stm	r1, {r2, r3}
   138a0:	mov	r1, r2
   138a4:	ldr	r4, [sp, #12]
   138a8:	cmp	r0, r2
   138ac:	bne	138bc <__assert_fail@plt+0x11d0>
   138b0:	cmp	r4, r3
   138b4:	moveq	r0, #0
   138b8:	beq	138e4 <__assert_fail@plt+0x11f8>
   138bc:	sub	r4, r4, r5
   138c0:	bl	12494 <difftime@plt>
   138c4:	vmov	s15, r4
   138c8:	vldr	d6, [pc, #32]	; 138f0 <__assert_fail@plt+0x1204>
   138cc:	vcvt.f64.s32	d7, s15
   138d0:	vmla.f64	d0, d7, d6
   138d4:	vcmpe.f64	d0, #0.0
   138d8:	vmrs	APSR_nzcv, fpscr
   138dc:	mvnmi	r0, #0
   138e0:	movpl	r0, #1
   138e4:	add	sp, sp, #20
   138e8:	pop	{r4, r5, pc}
   138ec:	nop	{0}
   138f0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   138f4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   138f8:	push	{r4, lr}
   138fc:	mov	r4, r2
   13900:	vpush	{d8}
   13904:	sub	sp, sp, #8
   13908:	vmov	s16, r3
   1390c:	mov	ip, sp
   13910:	ldr	r3, [r2, #44]	; 0x2c
   13914:	stm	ip, {r0, r1}
   13918:	cmp	r3, #1
   1391c:	beq	1396c <__assert_fail@plt+0x1280>
   13920:	cmp	r3, #0
   13924:	beq	13944 <__assert_fail@plt+0x1258>
   13928:	cmp	r3, #2
   1392c:	beq	13984 <__assert_fail@plt+0x1298>
   13930:	ldr	r3, [pc, #168]	; 139e0 <__assert_fail@plt+0x12f4>
   13934:	mov	r2, #138	; 0x8a
   13938:	ldr	r1, [pc, #164]	; 139e4 <__assert_fail@plt+0x12f8>
   1393c:	ldr	r0, [pc, #164]	; 139e8 <__assert_fail@plt+0x12fc>
   13940:	bl	126ec <__assert_fail@plt>
   13944:	add	r4, r2, #48	; 0x30
   13948:	ldm	ip, {r0, r1}
   1394c:	ldm	r4, {r2, r3}
   13950:	bl	13880 <__assert_fail@plt+0x1194>
   13954:	cmp	r0, #0
   13958:	movle	r0, #0
   1395c:	movgt	r0, #1
   13960:	add	sp, sp, #8
   13964:	vpop	{d8}
   13968:	pop	{r4, pc}
   1396c:	add	r4, r2, #48	; 0x30
   13970:	ldm	ip, {r0, r1}
   13974:	ldm	r4, {r2, r3}
   13978:	bl	13880 <__assert_fail@plt+0x1194>
   1397c:	lsr	r0, r0, #31
   13980:	b	13960 <__assert_fail@plt+0x1274>
   13984:	ldr	r0, [sp]
   13988:	ldr	r1, [r2, #48]	; 0x30
   1398c:	bl	12494 <difftime@plt>
   13990:	ldr	r3, [sp, #4]
   13994:	ldr	r2, [r4, #52]	; 0x34
   13998:	vldr	d6, [pc, #56]	; 139d8 <__assert_fail@plt+0x12ec>
   1399c:	sub	r3, r3, r2
   139a0:	vmov	s15, r3
   139a4:	vcvt.f64.s32	d7, s15
   139a8:	vmla.f64	d0, d7, d6
   139ac:	vcmpe.f64	d0, #0.0
   139b0:	vmrs	APSR_nzcv, fpscr
   139b4:	movle	r0, #0
   139b8:	ble	13960 <__assert_fail@plt+0x1274>
   139bc:	vcvt.f64.s32	d8, s16
   139c0:	vcmpe.f64	d8, d0
   139c4:	vmrs	APSR_nzcv, fpscr
   139c8:	movge	r0, #1
   139cc:	movlt	r0, #0
   139d0:	b	13960 <__assert_fail@plt+0x1274>
   139d4:	nop	{0}
   139d8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   139dc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   139e0:	strdeq	r7, [r3], -r2
   139e4:	andeq	r7, r3, lr, asr #30
   139e8:	ldrdeq	r8, [r3], -r2
   139ec:	add	r1, r1, #72	; 0x48
   139f0:	sub	sp, sp, #8
   139f4:	ldm	r1, {r0, r1}
   139f8:	mov	ip, sp
   139fc:	mov	r3, #60	; 0x3c
   13a00:	stm	ip, {r0, r1}
   13a04:	add	sp, sp, #8
   13a08:	b	138f8 <__assert_fail@plt+0x120c>
   13a0c:	ldr	r3, [r2, #44]	; 0x2c
   13a10:	push	{r0, r1, r2, lr}
   13a14:	cmp	r3, #0
   13a18:	beq	13a30 <__assert_fail@plt+0x1344>
   13a1c:	ldr	r3, [pc, #60]	; 13a60 <__assert_fail@plt+0x1374>
   13a20:	mov	r2, #166	; 0xa6
   13a24:	ldr	r1, [pc, #56]	; 13a64 <__assert_fail@plt+0x1378>
   13a28:	ldr	r0, [pc, #56]	; 13a68 <__assert_fail@plt+0x137c>
   13a2c:	bl	126ec <__assert_fail@plt>
   13a30:	add	r1, r1, #72	; 0x48
   13a34:	mov	ip, sp
   13a38:	ldm	r1, {r0, r1}
   13a3c:	add	r2, r2, #48	; 0x30
   13a40:	ldm	r2, {r2, r3}
   13a44:	stm	ip, {r0, r1}
   13a48:	bl	13880 <__assert_fail@plt+0x1194>
   13a4c:	cmp	r0, #0
   13a50:	movle	r0, #0
   13a54:	movgt	r0, #1
   13a58:	add	sp, sp, #12
   13a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a60:	andeq	r7, r3, r2, lsl #30
   13a64:	andeq	r7, r3, lr, asr #30
   13a68:	andeq	r7, r3, r5, lsl #31
   13a6c:	add	r1, r1, #72	; 0x48
   13a70:	ldr	r3, [pc, #20]	; 13a8c <__assert_fail@plt+0x13a0>
   13a74:	sub	sp, sp, #8
   13a78:	mov	ip, sp
   13a7c:	ldm	r1, {r0, r1}
   13a80:	stm	ip, {r0, r1}
   13a84:	add	sp, sp, #8
   13a88:	b	138f8 <__assert_fail@plt+0x120c>
   13a8c:	andeq	r5, r1, r0, lsl #3
   13a90:	mov	r0, #1
   13a94:	bx	lr
   13a98:	add	r1, r1, #88	; 0x58
   13a9c:	sub	sp, sp, #8
   13aa0:	ldm	r1, {r0, r1}
   13aa4:	mov	ip, sp
   13aa8:	mov	r3, #60	; 0x3c
   13aac:	stm	ip, {r0, r1}
   13ab0:	add	sp, sp, #8
   13ab4:	b	138f8 <__assert_fail@plt+0x120c>
   13ab8:	ldr	r3, [r2, #44]	; 0x2c
   13abc:	push	{r0, r1, r2, lr}
   13ac0:	cmp	r3, #0
   13ac4:	beq	13adc <__assert_fail@plt+0x13f0>
   13ac8:	ldr	r3, [pc, #60]	; 13b0c <__assert_fail@plt+0x1420>
   13acc:	mov	r2, #199	; 0xc7
   13ad0:	ldr	r1, [pc, #56]	; 13b10 <__assert_fail@plt+0x1424>
   13ad4:	ldr	r0, [pc, #56]	; 13b14 <__assert_fail@plt+0x1428>
   13ad8:	bl	126ec <__assert_fail@plt>
   13adc:	add	r1, r1, #88	; 0x58
   13ae0:	mov	ip, sp
   13ae4:	ldm	r1, {r0, r1}
   13ae8:	add	r2, r2, #48	; 0x30
   13aec:	ldm	r2, {r2, r3}
   13af0:	stm	ip, {r0, r1}
   13af4:	bl	13880 <__assert_fail@plt+0x1194>
   13af8:	cmp	r0, #0
   13afc:	movle	r0, #0
   13b00:	movgt	r0, #1
   13b04:	add	sp, sp, #12
   13b08:	pop	{pc}		; (ldr pc, [sp], #4)
   13b0c:	andeq	r7, r3, lr, lsl #30
   13b10:	andeq	r7, r3, lr, asr #30
   13b14:	andeq	r7, r3, r5, lsl #31
   13b18:	push	{r4, r5, r6, lr}
   13b1c:	mov	r4, r2
   13b20:	mov	r5, r0
   13b24:	mov	r6, r1
   13b28:	ldr	r2, [r2, #156]	; 0x9c
   13b2c:	cmp	r2, #0
   13b30:	beq	13b38 <__assert_fail@plt+0x144c>
   13b34:	bl	181c8 <__assert_fail@plt+0x5adc>
   13b38:	mov	r1, r6
   13b3c:	mov	r0, r5
   13b40:	ldr	r2, [r4, #160]	; 0xa0
   13b44:	pop	{r4, r5, r6, lr}
   13b48:	b	181c8 <__assert_fail@plt+0x5adc>
   13b4c:	add	r1, r1, #88	; 0x58
   13b50:	ldr	r3, [pc, #20]	; 13b6c <__assert_fail@plt+0x1480>
   13b54:	sub	sp, sp, #8
   13b58:	mov	ip, sp
   13b5c:	ldm	r1, {r0, r1}
   13b60:	stm	ip, {r0, r1}
   13b64:	add	sp, sp, #8
   13b68:	b	138f8 <__assert_fail@plt+0x120c>
   13b6c:	andeq	r5, r1, r0, lsl #3
   13b70:	push	{r4, r5, r6, r7, r8, lr}
   13b74:	mov	r7, r0
   13b78:	mov	r8, r1
   13b7c:	ldr	r4, [pc, #244]	; 13c78 <__assert_fail@plt+0x158c>
   13b80:	ldr	r1, [pc, #244]	; 13c7c <__assert_fail@plt+0x1590>
   13b84:	ldr	r6, [r4, #12]
   13b88:	mov	r0, r6
   13b8c:	bl	11ffc <strcmp@plt>
   13b90:	cmp	r0, #0
   13b94:	bne	13ba0 <__assert_fail@plt+0x14b4>
   13b98:	mov	r0, #1
   13b9c:	pop	{r4, r5, r6, r7, r8, pc}
   13ba0:	ldrb	r5, [r4, #4]
   13ba4:	cmp	r5, #0
   13ba8:	beq	13bc0 <__assert_fail@plt+0x14d4>
   13bac:	ldr	r3, [r8, #16]
   13bb0:	and	r3, r3, #61440	; 0xf000
   13bb4:	cmp	r3, #16384	; 0x4000
   13bb8:	movne	r5, #0
   13bbc:	moveq	r5, #512	; 0x200
   13bc0:	mov	r2, r5
   13bc4:	mov	r1, r6
   13bc8:	ldr	r0, [r4, #16]
   13bcc:	bl	12068 <unlinkat@plt>
   13bd0:	cmp	r0, #0
   13bd4:	beq	13b98 <__assert_fail@plt+0x14ac>
   13bd8:	bl	12404 <__errno_location@plt>
   13bdc:	ldr	r3, [r0]
   13be0:	mov	r6, r0
   13be4:	cmp	r3, #2
   13be8:	bne	13c50 <__assert_fail@plt+0x1564>
   13bec:	ldr	r3, [pc, #140]	; 13c80 <__assert_fail@plt+0x1594>
   13bf0:	ldrb	r0, [r3, #14]
   13bf4:	cmp	r0, #0
   13bf8:	bne	13c44 <__assert_fail@plt+0x1558>
   13bfc:	ldr	r5, [r6]
   13c00:	mov	r2, #5
   13c04:	mov	r0, #0
   13c08:	ldr	r1, [pc, #116]	; 13c84 <__assert_fail@plt+0x1598>
   13c0c:	bl	1217c <dcgettext@plt>
   13c10:	mov	r6, r0
   13c14:	mov	r1, r7
   13c18:	mov	r0, #0
   13c1c:	bl	17f84 <__assert_fail@plt+0x5898>
   13c20:	mov	r3, r0
   13c24:	mov	r2, r6
   13c28:	mov	r1, r5
   13c2c:	mov	r0, #0
   13c30:	bl	122c0 <error@plt>
   13c34:	mov	r3, #1
   13c38:	mov	r0, #0
   13c3c:	str	r3, [r4, #28]
   13c40:	pop	{r4, r5, r6, r7, r8, pc}
   13c44:	mov	r3, #0
   13c48:	str	r3, [r6]
   13c4c:	pop	{r4, r5, r6, r7, r8, pc}
   13c50:	cmp	r3, #21
   13c54:	cmpeq	r5, #0
   13c58:	bne	13bfc <__assert_fail@plt+0x1510>
   13c5c:	mov	r2, #512	; 0x200
   13c60:	ldr	r1, [r4, #12]
   13c64:	ldr	r0, [r4, #16]
   13c68:	bl	12068 <unlinkat@plt>
   13c6c:	cmp	r0, #0
   13c70:	beq	13b98 <__assert_fail@plt+0x14ac>
   13c74:	b	13bfc <__assert_fail@plt+0x1510>
   13c78:	andeq	lr, r4, r8, asr lr
   13c7c:	ldrdeq	r8, [r3], -r9
   13c80:	andeq	lr, r4, r4, lsl #29
   13c84:	andeq	r7, r3, ip, lsr #31
   13c88:	ldr	r3, [r1, #16]
   13c8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c90:	and	r3, r3, #61440	; 0xf000
   13c94:	cmp	r3, #16384	; 0x4000
   13c98:	bne	13e0c <__assert_fail@plt+0x1720>
   13c9c:	ldr	r7, [pc, #388]	; 13e28 <__assert_fail@plt+0x173c>
   13ca0:	mov	r4, #0
   13ca4:	mov	r5, r0
   13ca8:	bl	12404 <__errno_location@plt>
   13cac:	mov	r6, r0
   13cb0:	ldr	r2, [pc, #372]	; 13e2c <__assert_fail@plt+0x1740>
   13cb4:	ldr	r1, [r7, #12]
   13cb8:	mov	r9, r7
   13cbc:	str	r4, [r0]
   13cc0:	ldr	r0, [r7, #16]
   13cc4:	bl	226f0 <__assert_fail@plt+0x10004>
   13cc8:	subs	sl, r0, #0
   13ccc:	bge	13d04 <__assert_fail@plt+0x1618>
   13cd0:	ldr	r6, [r6]
   13cd4:	mov	r1, r5
   13cd8:	mov	r0, r4
   13cdc:	bl	17f84 <__assert_fail@plt+0x5898>
   13ce0:	mov	r3, r0
   13ce4:	ldr	r2, [pc, #324]	; 13e30 <__assert_fail@plt+0x1744>
   13ce8:	mov	r0, r4
   13cec:	mov	r1, r6
   13cf0:	bl	122c0 <error@plt>
   13cf4:	mov	r3, #1
   13cf8:	str	r3, [r7, #28]
   13cfc:	mov	r0, r4
   13d00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d04:	bl	125a8 <fdopendir@plt>
   13d08:	subs	r8, r0, #0
   13d0c:	strne	r4, [r6]
   13d10:	bne	13d74 <__assert_fail@plt+0x1688>
   13d14:	ldr	r4, [r6]
   13d18:	mov	r1, r5
   13d1c:	bl	17f84 <__assert_fail@plt+0x5898>
   13d20:	mov	r3, r0
   13d24:	ldr	r2, [pc, #260]	; 13e30 <__assert_fail@plt+0x1744>
   13d28:	mov	r0, r8
   13d2c:	mov	r1, r4
   13d30:	bl	122c0 <error@plt>
   13d34:	mov	r3, #1
   13d38:	mov	r0, sl
   13d3c:	str	r3, [r7, #28]
   13d40:	bl	126a4 <close@plt>
   13d44:	mov	r4, #0
   13d48:	b	13cfc <__assert_fail@plt+0x1610>
   13d4c:	ldrb	r3, [r0, #19]
   13d50:	cmp	r3, #46	; 0x2e
   13d54:	bne	13dc4 <__assert_fail@plt+0x16d8>
   13d58:	ldrb	r3, [r0, #20]
   13d5c:	cmp	r3, #0
   13d60:	beq	13d70 <__assert_fail@plt+0x1684>
   13d64:	ldrh	r3, [r0, #20]
   13d68:	cmp	r3, #46	; 0x2e
   13d6c:	bne	13dc4 <__assert_fail@plt+0x16d8>
   13d70:	mov	r0, r8
   13d74:	bl	1259c <readdir64@plt>
   13d78:	cmp	r0, #0
   13d7c:	bne	13d4c <__assert_fail@plt+0x1660>
   13d80:	mov	r4, #1
   13d84:	ldr	r7, [r6]
   13d88:	cmp	r7, #0
   13d8c:	beq	13dcc <__assert_fail@plt+0x16e0>
   13d90:	mov	r1, r5
   13d94:	mov	r0, #0
   13d98:	bl	17f84 <__assert_fail@plt+0x5898>
   13d9c:	mov	r3, r0
   13da0:	ldr	r2, [pc, #136]	; 13e30 <__assert_fail@plt+0x1744>
   13da4:	mov	r1, r7
   13da8:	mov	r0, #0
   13dac:	bl	122c0 <error@plt>
   13db0:	mov	r3, #1
   13db4:	mov	r0, r8
   13db8:	str	r3, [r9, #28]
   13dbc:	bl	126bc <closedir@plt>
   13dc0:	b	13d44 <__assert_fail@plt+0x1658>
   13dc4:	mov	r4, #0
   13dc8:	b	13d84 <__assert_fail@plt+0x1698>
   13dcc:	mov	r0, r8
   13dd0:	bl	126bc <closedir@plt>
   13dd4:	cmp	r0, #0
   13dd8:	beq	13cfc <__assert_fail@plt+0x1610>
   13ddc:	ldr	r4, [r6]
   13de0:	mov	r1, r5
   13de4:	mov	r0, r7
   13de8:	bl	17f84 <__assert_fail@plt+0x5898>
   13dec:	mov	r3, r0
   13df0:	ldr	r2, [pc, #56]	; 13e30 <__assert_fail@plt+0x1744>
   13df4:	mov	r0, r7
   13df8:	mov	r1, r4
   13dfc:	bl	122c0 <error@plt>
   13e00:	mov	r3, #1
   13e04:	str	r3, [r9, #28]
   13e08:	b	13d44 <__assert_fail@plt+0x1658>
   13e0c:	cmp	r3, #32768	; 0x8000
   13e10:	bne	13d44 <__assert_fail@plt+0x1658>
   13e14:	ldrd	r2, [r1, #48]	; 0x30
   13e18:	orrs	r3, r2, r3
   13e1c:	moveq	r4, #1
   13e20:	movne	r4, #0
   13e24:	b	13cfc <__assert_fail@plt+0x1610>
   13e28:	andeq	lr, r4, r8, asr lr
   13e2c:	andeq	r4, sl, r0, lsl #18
   13e30:	andeq	sp, r3, fp, lsl r2
   13e34:	b	14eec <__assert_fail@plt+0x2800>
   13e38:	ldr	r3, [pc, #4]	; 13e44 <__assert_fail@plt+0x1758>
   13e3c:	ldr	r0, [r3, #12]
   13e40:	b	14eec <__assert_fail@plt+0x2800>
   13e44:	andeq	lr, r4, r8, asr lr
   13e48:	mov	r0, #0
   13e4c:	bx	lr
   13e50:	push	{r0, r1, r2, r3, r4, lr}
   13e54:	ldr	r3, [r2, #44]	; 0x2c
   13e58:	ldr	ip, [pc, #56]	; 13e98 <__assert_fail@plt+0x17ac>
   13e5c:	str	r3, [sp, #12]
   13e60:	ldrb	r3, [r2, #32]
   13e64:	str	r3, [sp, #8]
   13e68:	ldr	r3, [pc, #44]	; 13e9c <__assert_fail@plt+0x17b0>
   13e6c:	ldr	r2, [r3, #40]	; 0x28
   13e70:	str	r2, [sp, #4]
   13e74:	ldr	r3, [r3, #20]
   13e78:	ldr	r2, [ip, #12]
   13e7c:	str	r3, [sp]
   13e80:	mov	r3, r1
   13e84:	ldr	r1, [ip, #16]
   13e88:	bl	1e834 <__assert_fail@plt+0xc148>
   13e8c:	mov	r0, #1
   13e90:	add	sp, sp, #20
   13e94:	pop	{pc}		; (ldr pc, [sp], #4)
   13e98:	andeq	lr, r4, r8, asr lr
   13e9c:	andeq	lr, r4, r4, lsl #29
   13ea0:	mov	ip, r2
   13ea4:	push	{r0, r1, r2, lr}
   13ea8:	ldr	r3, [pc, #28]	; 13ecc <__assert_fail@plt+0x17e0>
   13eac:	ldrb	r2, [r2, #52]	; 0x34
   13eb0:	ldr	r1, [ip, #56]	; 0x38
   13eb4:	str	r0, [sp]
   13eb8:	ldr	r0, [ip, #44]	; 0x2c
   13ebc:	bl	1ee98 <__assert_fail@plt+0xc7ac>
   13ec0:	mov	r0, #1
   13ec4:	add	sp, sp, #12
   13ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ecc:	andeq	ip, r3, sp, asr #21
   13ed0:	push	{r4, lr}
   13ed4:	ldr	r4, [r2, #44]	; 0x2c
   13ed8:	mov	r1, r4
   13edc:	bl	12680 <fputs@plt>
   13ee0:	mov	r1, r4
   13ee4:	mov	r0, #0
   13ee8:	bl	125c0 <putc@plt>
   13eec:	mov	r0, #1
   13ef0:	pop	{r4, pc}
   13ef4:	mov	r3, r1
   13ef8:	push	{r4, lr}
   13efc:	mov	r1, r0
   13f00:	mov	r4, r2
   13f04:	mov	r0, r3
   13f08:	bl	19ebc <__assert_fail@plt+0x77d0>
   13f0c:	ldr	r1, [r4, #40]	; 0x28
   13f10:	bl	11ffc <strcmp@plt>
   13f14:	clz	r0, r0
   13f18:	lsr	r0, r0, #5
   13f1c:	pop	{r4, pc}
   13f20:	ldr	r3, [r2, #40]	; 0x28
   13f24:	cmp	r3, #1
   13f28:	beq	13f64 <__assert_fail@plt+0x1878>
   13f2c:	cmp	r3, #0
   13f30:	beq	13f44 <__assert_fail@plt+0x1858>
   13f34:	cmp	r3, #2
   13f38:	beq	13f84 <__assert_fail@plt+0x1898>
   13f3c:	mov	r0, #0
   13f40:	bx	lr
   13f44:	ldrd	r2, [r2, #48]	; 0x30
   13f48:	ldr	r0, [r1, #28]
   13f4c:	mov	r1, #0
   13f50:	cmp	r1, r3
   13f54:	cmpeq	r0, r2
   13f58:	movhi	r0, #1
   13f5c:	movls	r0, #0
   13f60:	bx	lr
   13f64:	ldrd	r2, [r2, #48]	; 0x30
   13f68:	ldr	r0, [r1, #28]
   13f6c:	mov	r1, #0
   13f70:	cmp	r1, r3
   13f74:	cmpeq	r0, r2
   13f78:	movcc	r0, #1
   13f7c:	movcs	r0, #0
   13f80:	bx	lr
   13f84:	ldrd	r2, [r2, #48]	; 0x30
   13f88:	ldr	r0, [r1, #28]
   13f8c:	mov	r1, #0
   13f90:	cmp	r3, r1
   13f94:	cmpeq	r2, r0
   13f98:	moveq	r0, #1
   13f9c:	movne	r0, #0
   13fa0:	bx	lr
   13fa4:	ldr	r3, [r1, #28]
   13fa8:	ldr	r0, [r2, #40]	; 0x28
   13fac:	sub	r0, r0, r3
   13fb0:	clz	r0, r0
   13fb4:	lsr	r0, r0, #5
   13fb8:	bx	lr
   13fbc:	ldr	r3, [r1, #16]
   13fc0:	mov	ip, r2
   13fc4:	and	r3, r3, #61440	; 0xf000
   13fc8:	cmp	r3, #40960	; 0xa000
   13fcc:	bne	13fdc <__assert_fail@plt+0x18f0>
   13fd0:	mov	r2, #1
   13fd4:	add	r1, ip, #40	; 0x28
   13fd8:	b	13730 <__assert_fail@plt+0x1044>
   13fdc:	mov	r0, #0
   13fe0:	bx	lr
   13fe4:	push	{r4, r5, r6, lr}
   13fe8:	ldr	r5, [r2, #40]	; 0x28
   13fec:	bl	1f960 <__assert_fail@plt+0xd274>
   13ff0:	mov	r4, r0
   13ff4:	bl	1fa5c <__assert_fail@plt+0xd370>
   13ff8:	mov	r2, #16
   13ffc:	mov	r1, r4
   14000:	mov	r0, r5
   14004:	bl	122e4 <fnmatch@plt>
   14008:	mov	r5, r0
   1400c:	mov	r0, r4
   14010:	bl	284c4 <__assert_fail@plt+0x15dd8>
   14014:	clz	r0, r5
   14018:	lsr	r0, r0, #5
   1401c:	pop	{r4, r5, r6, pc}
   14020:	ldr	r3, [r2, #40]	; 0x28
   14024:	cmp	r3, #1
   14028:	beq	14060 <__assert_fail@plt+0x1974>
   1402c:	cmp	r3, #0
   14030:	beq	14044 <__assert_fail@plt+0x1958>
   14034:	cmp	r3, #2
   14038:	beq	1407c <__assert_fail@plt+0x1990>
   1403c:	mov	r0, #0
   14040:	bx	lr
   14044:	ldrd	r2, [r2, #48]	; 0x30
   14048:	ldrd	r0, [r1, #96]	; 0x60
   1404c:	cmp	r1, r3
   14050:	cmpeq	r0, r2
   14054:	movhi	r0, #1
   14058:	movls	r0, #0
   1405c:	bx	lr
   14060:	ldrd	r2, [r2, #48]	; 0x30
   14064:	ldrd	r0, [r1, #96]	; 0x60
   14068:	cmp	r1, r3
   1406c:	cmpeq	r0, r2
   14070:	movcc	r0, #1
   14074:	movcs	r0, #0
   14078:	bx	lr
   1407c:	ldrd	r2, [r2, #48]	; 0x30
   14080:	ldrd	r0, [r1, #96]	; 0x60
   14084:	cmp	r1, r3
   14088:	cmpeq	r0, r2
   1408c:	moveq	r0, #1
   14090:	movne	r0, #0
   14094:	bx	lr
   14098:	mov	r3, r2
   1409c:	mov	r1, r0
   140a0:	push	{r4, lr}
   140a4:	mov	r2, #16
   140a8:	ldr	r0, [r3, #40]	; 0x28
   140ac:	bl	122e4 <fnmatch@plt>
   140b0:	clz	r0, r0
   140b4:	lsr	r0, r0, #5
   140b8:	pop	{r4, pc}
   140bc:	ldr	r3, [r2, #40]	; 0x28
   140c0:	cmp	r3, #1
   140c4:	beq	14100 <__assert_fail@plt+0x1a14>
   140c8:	cmp	r3, #0
   140cc:	beq	140e0 <__assert_fail@plt+0x19f4>
   140d0:	cmp	r3, #2
   140d4:	beq	14120 <__assert_fail@plt+0x1a34>
   140d8:	mov	r0, #0
   140dc:	bx	lr
   140e0:	ldrd	r2, [r2, #48]	; 0x30
   140e4:	ldr	r0, [r1, #20]
   140e8:	mov	r1, #0
   140ec:	cmp	r1, r3
   140f0:	cmpeq	r0, r2
   140f4:	movhi	r0, #1
   140f8:	movls	r0, #0
   140fc:	bx	lr
   14100:	ldrd	r2, [r2, #48]	; 0x30
   14104:	ldr	r0, [r1, #20]
   14108:	mov	r1, #0
   1410c:	cmp	r1, r3
   14110:	cmpeq	r0, r2
   14114:	movcc	r0, #1
   14118:	movcs	r0, #0
   1411c:	bx	lr
   14120:	ldrd	r2, [r2, #48]	; 0x30
   14124:	ldr	r0, [r1, #20]
   14128:	mov	r1, #0
   1412c:	cmp	r3, r1
   14130:	cmpeq	r2, r0
   14134:	moveq	r0, #1
   14138:	movne	r0, #0
   1413c:	bx	lr
   14140:	ldr	r3, [r1, #16]
   14144:	mov	ip, r2
   14148:	and	r3, r3, #61440	; 0xf000
   1414c:	cmp	r3, #40960	; 0xa000
   14150:	bne	14160 <__assert_fail@plt+0x1a74>
   14154:	mov	r2, #0
   14158:	add	r1, ip, #40	; 0x28
   1415c:	b	13730 <__assert_fail@plt+0x1044>
   14160:	mov	r0, #0
   14164:	bx	lr
   14168:	b	13e50 <__assert_fail@plt+0x1764>
   1416c:	add	r1, r1, #80	; 0x50
   14170:	sub	sp, sp, #8
   14174:	ldm	r1, {r0, r1}
   14178:	mov	ip, sp
   1417c:	mov	r3, #60	; 0x3c
   14180:	stm	ip, {r0, r1}
   14184:	add	sp, sp, #8
   14188:	b	138f8 <__assert_fail@plt+0x120c>
   1418c:	add	r1, r1, #80	; 0x50
   14190:	ldr	r3, [pc, #20]	; 141ac <__assert_fail@plt+0x1ac0>
   14194:	sub	sp, sp, #8
   14198:	mov	ip, sp
   1419c:	ldm	r1, {r0, r1}
   141a0:	stm	ip, {r0, r1}
   141a4:	add	sp, sp, #8
   141a8:	b	138f8 <__assert_fail@plt+0x120c>
   141ac:	andeq	r5, r1, r0, lsl #3
   141b0:	push	{r4, r5, r6, lr}
   141b4:	ldr	r5, [r2, #40]	; 0x28
   141b8:	bl	1f960 <__assert_fail@plt+0xd274>
   141bc:	mov	r4, r0
   141c0:	bl	1fa5c <__assert_fail@plt+0xd370>
   141c4:	mov	r2, #0
   141c8:	mov	r1, r4
   141cc:	mov	r0, r5
   141d0:	bl	122e4 <fnmatch@plt>
   141d4:	mov	r5, r0
   141d8:	mov	r0, r4
   141dc:	bl	284c4 <__assert_fail@plt+0x15dd8>
   141e0:	clz	r0, r5
   141e4:	lsr	r0, r0, #5
   141e8:	pop	{r4, r5, r6, pc}
   141ec:	push	{r4, lr}
   141f0:	ldr	r2, [r2, #160]	; 0xa0
   141f4:	bl	181c8 <__assert_fail@plt+0x5adc>
   141f8:	eor	r0, r0, #1
   141fc:	uxtb	r0, r0
   14200:	pop	{r4, pc}
   14204:	ldr	r3, [r2, #44]	; 0x2c
   14208:	push	{r0, r1, r2, lr}
   1420c:	cmp	r3, #0
   14210:	beq	14228 <__assert_fail@plt+0x1b3c>
   14214:	ldr	r3, [pc, #60]	; 14258 <__assert_fail@plt+0x1b6c>
   14218:	movw	r2, #621	; 0x26d
   1421c:	ldr	r1, [pc, #56]	; 1425c <__assert_fail@plt+0x1b70>
   14220:	ldr	r0, [pc, #56]	; 14260 <__assert_fail@plt+0x1b74>
   14224:	bl	126ec <__assert_fail@plt>
   14228:	add	r1, r1, #80	; 0x50
   1422c:	mov	ip, sp
   14230:	ldm	r1, {r0, r1}
   14234:	add	r2, r2, #48	; 0x30
   14238:	ldm	r2, {r2, r3}
   1423c:	stm	ip, {r0, r1}
   14240:	bl	13880 <__assert_fail@plt+0x1194>
   14244:	cmp	r0, #0
   14248:	movle	r0, #0
   1424c:	movgt	r0, #1
   14250:	add	sp, sp, #12
   14254:	pop	{pc}		; (ldr pc, [sp], #4)
   14258:	andeq	r7, r3, sl, lsl pc
   1425c:	andeq	r7, r3, lr, asr #30
   14260:	andeq	r7, r3, r5, lsl #31
   14264:	push	{r0, r1, r2, r4, r5, lr}
   14268:	mov	r3, r1
   1426c:	ldr	r1, [r2, #44]	; 0x2c
   14270:	cmp	r1, #0
   14274:	beq	1428c <__assert_fail@plt+0x1ba0>
   14278:	ldr	r3, [pc, #244]	; 14374 <__assert_fail@plt+0x1c88>
   1427c:	movw	r2, #631	; 0x277
   14280:	ldr	r1, [pc, #240]	; 14378 <__assert_fail@plt+0x1c8c>
   14284:	ldr	r0, [pc, #240]	; 1437c <__assert_fail@plt+0x1c90>
   14288:	bl	126ec <__assert_fail@plt>
   1428c:	ldr	r1, [r2, #40]	; 0x28
   14290:	cmp	r1, #4
   14294:	ldrls	pc, [pc, r1, lsl #2]
   14298:	b	142b0 <__assert_fail@plt+0x1bc4>
   1429c:	ldrdeq	r4, [r1], -r8
   142a0:	andeq	r4, r1, r4, lsl r3
   142a4:	andeq	r4, r1, r8, asr r3
   142a8:	andeq	r4, r1, r8, ror #6
   142ac:	andeq	r4, r1, r4, asr #5
   142b0:	ldr	r3, [pc, #188]	; 14374 <__assert_fail@plt+0x1c88>
   142b4:	movw	r2, #667	; 0x29b
   142b8:	ldr	r1, [pc, #184]	; 14378 <__assert_fail@plt+0x1c8c>
   142bc:	ldr	r0, [pc, #188]	; 14380 <__assert_fail@plt+0x1c94>
   142c0:	b	14288 <__assert_fail@plt+0x1b9c>
   142c4:	ldr	r3, [pc, #168]	; 14374 <__assert_fail@plt+0x1c88>
   142c8:	mov	r2, #636	; 0x27c
   142cc:	ldr	r1, [pc, #164]	; 14378 <__assert_fail@plt+0x1c8c>
   142d0:	ldr	r0, [pc, #172]	; 14384 <__assert_fail@plt+0x1c98>
   142d4:	b	14288 <__assert_fail@plt+0x1b9c>
   142d8:	add	r1, r3, #72	; 0x48
   142dc:	add	ip, sp, #8
   142e0:	ldm	r1, {r0, r1}
   142e4:	stmdb	ip, {r0, r1}
   142e8:	ldr	r1, [r3, #76]	; 0x4c
   142ec:	add	r2, r2, #48	; 0x30
   142f0:	str	r1, [sp, #4]
   142f4:	add	r1, sp, #8
   142f8:	ldmdb	r1, {r0, r1}
   142fc:	ldm	r2, {r2, r3}
   14300:	bl	13880 <__assert_fail@plt+0x1194>
   14304:	cmp	r0, #0
   14308:	movle	r0, #0
   1430c:	movgt	r0, #1
   14310:	b	14350 <__assert_fail@plt+0x1c64>
   14314:	mov	r2, #5
   14318:	mov	r5, r0
   1431c:	ldr	r1, [pc, #100]	; 14388 <__assert_fail@plt+0x1c9c>
   14320:	mov	r0, #0
   14324:	bl	1217c <dcgettext@plt>
   14328:	mov	r4, r0
   1432c:	mov	r1, r5
   14330:	mov	r0, #0
   14334:	bl	17f84 <__assert_fail@plt+0x5898>
   14338:	mov	r1, #0
   1433c:	mov	r3, r0
   14340:	mov	r2, r4
   14344:	mov	r0, r1
   14348:	bl	122c0 <error@plt>
   1434c:	mov	r0, #0
   14350:	add	sp, sp, #12
   14354:	pop	{r4, r5, pc}
   14358:	ldr	r1, [r3, #92]	; 0x5c
   1435c:	ldr	r3, [r3, #88]	; 0x58
   14360:	str	r3, [sp]
   14364:	b	142ec <__assert_fail@plt+0x1c00>
   14368:	ldr	r1, [r3, #84]	; 0x54
   1436c:	ldr	r3, [r3, #80]	; 0x50
   14370:	b	14360 <__assert_fail@plt+0x1c74>
   14374:	andeq	r7, r3, r5, lsr #30
   14378:	andeq	r7, r3, lr, asr #30
   1437c:	andeq	r7, r3, r5, lsl #31
   14380:			; <UNDEFINED> instruction: 0x00037fbd
   14384:	andeq	r7, r3, r7, asr #31
   14388:	strdeq	r7, [r3], -r0
   1438c:	push	{r4, lr}
   14390:	ldr	r0, [r1, #28]
   14394:	bl	126c8 <getgrgid@plt>
   14398:	clz	r0, r0
   1439c:	lsr	r0, r0, #5
   143a0:	pop	{r4, pc}
   143a4:	push	{r4, lr}
   143a8:	ldr	r0, [r1, #24]
   143ac:	bl	12014 <getpwuid@plt>
   143b0:	clz	r0, r0
   143b4:	lsr	r0, r0, #5
   143b8:	pop	{r4, pc}
   143bc:	ldr	r3, [r2, #132]	; 0x84
   143c0:	push	{r4, r5, r6, lr}
   143c4:	mov	r4, r0
   143c8:	mov	r6, r1
   143cc:	mov	r1, r0
   143d0:	mov	r5, r2
   143d4:	ldr	r0, [r3]
   143d8:	bl	137ac <__assert_fail@plt+0x10c0>
   143dc:	cmp	r0, #0
   143e0:	popeq	{r4, r5, r6, pc}
   143e4:	mov	r2, r5
   143e8:	mov	r1, r6
   143ec:	mov	r0, r4
   143f0:	pop	{r4, r5, r6, lr}
   143f4:	b	14eec <__assert_fail@plt+0x2800>
   143f8:	ldr	r3, [r2, #132]	; 0x84
   143fc:	push	{r4, r5, r6, lr}
   14400:	mov	r5, r1
   14404:	mov	r1, r0
   14408:	mov	r4, r2
   1440c:	ldr	r0, [r3]
   14410:	bl	137ac <__assert_fail@plt+0x10c0>
   14414:	cmp	r0, #0
   14418:	popeq	{r4, r5, r6, pc}
   1441c:	mov	r2, r4
   14420:	mov	r1, r5
   14424:	pop	{r4, r5, r6, lr}
   14428:	ldr	r3, [pc, #4]	; 14434 <__assert_fail@plt+0x1d48>
   1442c:	ldr	r0, [r3, #12]
   14430:	b	14eec <__assert_fail@plt+0x2800>
   14434:	andeq	lr, r4, r8, asr lr
   14438:	mov	r0, #1
   1443c:	bx	lr
   14440:	mov	r3, r2
   14444:	mov	r1, r0
   14448:	push	{r4, lr}
   1444c:	mov	r2, #0
   14450:	ldr	r0, [r3, #40]	; 0x28
   14454:	bl	122e4 <fnmatch@plt>
   14458:	clz	r0, r0
   1445c:	lsr	r0, r0, #5
   14460:	pop	{r4, pc}
   14464:	ldr	r3, [r1, #16]
   14468:	ldr	r0, [r2, #40]	; 0x28
   1446c:	and	r1, r3, #61440	; 0xf000
   14470:	cmp	r1, #16384	; 0x4000
   14474:	moveq	r1, #44	; 0x2c
   14478:	movne	r1, #40	; 0x28
   1447c:	add	r1, r2, r1
   14480:	cmp	r0, #1
   14484:	ldr	r1, [r1, #4]
   14488:	beq	144b4 <__assert_fail@plt+0x1dc8>
   1448c:	cmp	r0, #0
   14490:	beq	144a4 <__assert_fail@plt+0x1db8>
   14494:	cmp	r0, #2
   14498:	beq	144cc <__assert_fail@plt+0x1de0>
   1449c:	push	{r4, lr}
   144a0:	bl	12698 <abort@plt>
   144a4:	bics	r3, r1, r3
   144a8:	moveq	r0, #1
   144ac:	movne	r0, #0
   144b0:	bx	lr
   144b4:	cmp	r1, #0
   144b8:	bxeq	lr
   144bc:	tst	r3, r1
   144c0:	movne	r0, #1
   144c4:	moveq	r0, #0
   144c8:	bx	lr
   144cc:	ubfx	r0, r3, #0, #12
   144d0:	sub	r0, r0, r1
   144d4:	clz	r0, r0
   144d8:	lsr	r0, r0, #5
   144dc:	bx	lr
   144e0:	ldr	r0, [pc, #32]	; 14508 <__assert_fail@plt+0x1e1c>
   144e4:	mov	r3, #0
   144e8:	mov	r2, #1
   144ec:	push	{r4, lr}
   144f0:	ldr	r1, [r0, #12]
   144f4:	ldr	r0, [r0, #16]
   144f8:	bl	120b0 <faccessat@plt>
   144fc:	clz	r0, r0
   14500:	lsr	r0, r0, #5
   14504:	pop	{r4, pc}
   14508:	andeq	lr, r4, r8, asr lr
   1450c:	ldr	r0, [pc, #32]	; 14534 <__assert_fail@plt+0x1e48>
   14510:	mov	r3, #0
   14514:	mov	r2, #4
   14518:	push	{r4, lr}
   1451c:	ldr	r1, [r0, #12]
   14520:	ldr	r0, [r0, #16]
   14524:	bl	120b0 <faccessat@plt>
   14528:	clz	r0, r0
   1452c:	lsr	r0, r0, #5
   14530:	pop	{r4, pc}
   14534:	andeq	lr, r4, r8, asr lr
   14538:	ldr	r0, [pc, #32]	; 14560 <__assert_fail@plt+0x1e74>
   1453c:	mov	r3, #0
   14540:	mov	r2, #2
   14544:	push	{r4, lr}
   14548:	ldr	r1, [r0, #12]
   1454c:	ldr	r0, [r0, #16]
   14550:	bl	120b0 <faccessat@plt>
   14554:	clz	r0, r0
   14558:	lsr	r0, r0, #5
   1455c:	pop	{r4, pc}
   14560:	andeq	lr, r4, r8, asr lr
   14564:	b	13ea0 <__assert_fail@plt+0x17b4>
   14568:	b	13ed0 <__assert_fail@plt+0x17e4>
   1456c:	push	{r0, r1, r4, r5, r6, lr}
   14570:	mov	r5, r2
   14574:	mov	r6, r0
   14578:	bl	123bc <strlen@plt>
   1457c:	mov	r3, #0
   14580:	mov	r4, r0
   14584:	mov	r2, r0
   14588:	mov	r1, r6
   1458c:	ldr	r0, [r5, #40]	; 0x28
   14590:	str	r3, [sp]
   14594:	bl	35a2c <__assert_fail@plt+0x23340>
   14598:	sub	r0, r0, r4
   1459c:	clz	r0, r0
   145a0:	lsr	r0, r0, #5
   145a4:	add	sp, sp, #8
   145a8:	pop	{r4, r5, r6, pc}
   145ac:	push	{r4, r6, r7, lr}
   145b0:	mov	r4, r2
   145b4:	ldr	r2, [r2, #44]	; 0x2c
   145b8:	ldrd	r0, [r1, #48]	; 0x30
   145bc:	asr	r3, r2, #31
   145c0:	bl	375dc <__assert_fail@plt+0x24ef0>
   145c4:	orrs	r3, r2, r3
   145c8:	movne	r3, #1
   145cc:	moveq	r3, #0
   145d0:	adds	r6, r0, r3
   145d4:	ldr	r3, [r4, #40]	; 0x28
   145d8:	adc	r7, r1, #0
   145dc:	cmp	r3, #1
   145e0:	beq	14614 <__assert_fail@plt+0x1f28>
   145e4:	cmp	r3, #0
   145e8:	beq	145fc <__assert_fail@plt+0x1f10>
   145ec:	cmp	r3, #2
   145f0:	beq	1462c <__assert_fail@plt+0x1f40>
   145f4:	mov	r0, #0
   145f8:	pop	{r4, r6, r7, pc}
   145fc:	ldrd	r2, [r4, #48]	; 0x30
   14600:	cmp	r3, r7
   14604:	cmpeq	r2, r6
   14608:	movcc	r0, #1
   1460c:	movcs	r0, #0
   14610:	pop	{r4, r6, r7, pc}
   14614:	ldrd	r2, [r4, #48]	; 0x30
   14618:	cmp	r3, r7
   1461c:	cmpeq	r2, r6
   14620:	movhi	r0, #1
   14624:	movls	r0, #0
   14628:	pop	{r4, r6, r7, pc}
   1462c:	ldrd	r2, [r4, #48]	; 0x30
   14630:	cmp	r3, r7
   14634:	cmpeq	r2, r6
   14638:	moveq	r0, #1
   1463c:	movne	r0, #0
   14640:	pop	{r4, r6, r7, pc}
   14644:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14648:	ldrd	r6, [r1, #96]	; 0x60
   1464c:	orrs	r3, r6, r7
   14650:	beq	1466c <__assert_fail@plt+0x1f80>
   14654:	ldrd	r4, [r2, #40]	; 0x28
   14658:	cmp	r7, r5
   1465c:	cmpeq	r6, r4
   14660:	beq	1466c <__assert_fail@plt+0x1f80>
   14664:	mov	r0, #0
   14668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1466c:	ldr	r3, [pc, #76]	; 146c0 <__assert_fail@plt+0x1fd4>
   14670:	mov	r5, r2
   14674:	mov	r4, r1
   14678:	mov	r2, r1
   1467c:	ldr	r1, [r3, #12]
   14680:	bl	18018 <__assert_fail@plt+0x592c>
   14684:	cmp	r0, #0
   14688:	bne	14664 <__assert_fail@plt+0x1f78>
   1468c:	ldrd	r6, [r5, #40]	; 0x28
   14690:	ldrd	r8, [r4, #96]	; 0x60
   14694:	cmp	r9, r7
   14698:	cmpeq	r8, r6
   1469c:	bne	146b8 <__assert_fail@plt+0x1fcc>
   146a0:	ldrd	r0, [r4]
   146a4:	ldrd	r2, [r5, #48]	; 0x30
   146a8:	cmp	r1, r3
   146ac:	cmpeq	r0, r2
   146b0:	moveq	r0, #1
   146b4:	movne	r0, #0
   146b8:	and	r0, r0, #1
   146bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146c0:	andeq	lr, r4, r8, asr lr
   146c4:	mov	r0, #1
   146c8:	bx	lr
   146cc:	ldr	r3, [pc, #192]	; 14794 <__assert_fail@plt+0x20a8>
   146d0:	ldrb	r0, [r3, #5]
   146d4:	cmp	r0, #0
   146d8:	bne	146f4 <__assert_fail@plt+0x2008>
   146dc:	push	{r4, lr}
   146e0:	movw	r2, #977	; 0x3d1
   146e4:	ldr	r3, [pc, #172]	; 14798 <__assert_fail@plt+0x20ac>
   146e8:	ldr	r1, [pc, #172]	; 1479c <__assert_fail@plt+0x20b0>
   146ec:	ldr	r0, [pc, #172]	; 147a0 <__assert_fail@plt+0x20b4>
   146f0:	bl	126ec <__assert_fail@plt>
   146f4:	ldr	r0, [r3, #8]
   146f8:	cmp	r0, #0
   146fc:	bxeq	lr
   14700:	ldrb	r3, [r3, #4]
   14704:	cmp	r3, #0
   14708:	ldrne	r0, [r1, #16]
   1470c:	and	r0, r0, #61440	; 0xf000
   14710:	cmp	r0, #24576	; 0x6000
   14714:	beq	14764 <__assert_fail@plt+0x2078>
   14718:	bhi	1473c <__assert_fail@plt+0x2050>
   1471c:	cmp	r0, #8192	; 0x2000
   14720:	beq	1476c <__assert_fail@plt+0x2080>
   14724:	cmp	r0, #16384	; 0x4000
   14728:	beq	14774 <__assert_fail@plt+0x2088>
   1472c:	cmp	r0, #4096	; 0x1000
   14730:	beq	1477c <__assert_fail@plt+0x2090>
   14734:	mov	r0, #0
   14738:	bx	lr
   1473c:	cmp	r0, #40960	; 0xa000
   14740:	beq	14784 <__assert_fail@plt+0x2098>
   14744:	cmp	r0, #49152	; 0xc000
   14748:	beq	1478c <__assert_fail@plt+0x20a0>
   1474c:	cmp	r0, #32768	; 0x8000
   14750:	moveq	r3, #3
   14754:	bne	14734 <__assert_fail@plt+0x2048>
   14758:	add	r2, r2, r3
   1475c:	ldrb	r0, [r2, #40]	; 0x28
   14760:	bx	lr
   14764:	mov	r3, #0
   14768:	b	14758 <__assert_fail@plt+0x206c>
   1476c:	mov	r3, #1
   14770:	b	14758 <__assert_fail@plt+0x206c>
   14774:	mov	r3, #2
   14778:	b	14758 <__assert_fail@plt+0x206c>
   1477c:	mov	r3, #5
   14780:	b	14758 <__assert_fail@plt+0x206c>
   14784:	mov	r3, #4
   14788:	b	14758 <__assert_fail@plt+0x206c>
   1478c:	mov	r3, #6
   14790:	b	14758 <__assert_fail@plt+0x206c>
   14794:	andeq	lr, r4, r8, asr lr
   14798:	andeq	r7, r3, r2, lsr pc
   1479c:	andeq	r7, r3, lr, asr #30
   147a0:	andeq	r8, r3, r0, lsr #32
   147a4:	ldr	r3, [r2, #40]	; 0x28
   147a8:	cmp	r3, #1
   147ac:	beq	147e8 <__assert_fail@plt+0x20fc>
   147b0:	cmp	r3, #0
   147b4:	beq	147c8 <__assert_fail@plt+0x20dc>
   147b8:	cmp	r3, #2
   147bc:	beq	14808 <__assert_fail@plt+0x211c>
   147c0:	mov	r0, #0
   147c4:	bx	lr
   147c8:	ldrd	r2, [r2, #48]	; 0x30
   147cc:	ldr	r0, [r1, #24]
   147d0:	mov	r1, #0
   147d4:	cmp	r1, r3
   147d8:	cmpeq	r0, r2
   147dc:	movhi	r0, #1
   147e0:	movls	r0, #0
   147e4:	bx	lr
   147e8:	ldrd	r2, [r2, #48]	; 0x30
   147ec:	ldr	r0, [r1, #24]
   147f0:	mov	r1, #0
   147f4:	cmp	r1, r3
   147f8:	cmpeq	r0, r2
   147fc:	movcc	r0, #1
   14800:	movcs	r0, #0
   14804:	bx	lr
   14808:	ldrd	r2, [r2, #48]	; 0x30
   1480c:	ldr	r0, [r1, #24]
   14810:	mov	r1, #0
   14814:	cmp	r3, r1
   14818:	cmpeq	r2, r0
   1481c:	moveq	r0, #1
   14820:	movne	r0, #0
   14824:	bx	lr
   14828:	push	{r4, r5, r6, r7, r8, lr}
   1482c:	sub	sp, sp, #24
   14830:	mov	r8, r2
   14834:	add	r3, sp, #24
   14838:	ldr	r7, [r1, #72]	; 0x48
   1483c:	ldr	r6, [r1, #76]	; 0x4c
   14840:	ldr	r5, [r1, #88]	; 0x58
   14844:	str	r7, [sp, #8]
   14848:	ldr	r4, [r1, #92]	; 0x5c
   1484c:	add	r1, sp, #8
   14850:	str	r6, [sp, #12]
   14854:	ldm	r1, {r0, r1}
   14858:	str	r5, [sp, #16]
   1485c:	str	r4, [sp, #20]
   14860:	ldmdb	r3, {r2, r3}
   14864:	bl	13880 <__assert_fail@plt+0x1194>
   14868:	cmp	r0, #0
   1486c:	blt	148a8 <__assert_fail@plt+0x21bc>
   14870:	subs	r3, r4, r6
   14874:	sub	r2, r5, r7
   14878:	addmi	r3, r3, #998244352	; 0x3b800000
   1487c:	submi	r2, r2, #1
   14880:	addmi	r3, r3, #1753088	; 0x1ac000
   14884:	mov	r1, sp
   14888:	addmi	r3, r3, #2560	; 0xa00
   1488c:	strd	r2, [sp]
   14890:	mov	r2, r8
   14894:	ldr	r3, [pc, #24]	; 148b4 <__assert_fail@plt+0x21c8>
   14898:	ldm	r1, {r0, r1}
   1489c:	add	sp, sp, #24
   148a0:	pop	{r4, r5, r6, r7, r8, lr}
   148a4:	b	138f8 <__assert_fail@plt+0x120c>
   148a8:	mov	r0, #0
   148ac:	add	sp, sp, #24
   148b0:	pop	{r4, r5, r6, r7, r8, pc}
   148b4:	andeq	r5, r1, r0, lsl #3
   148b8:	ldr	r3, [r1, #24]
   148bc:	ldr	r0, [r2, #40]	; 0x28
   148c0:	sub	r0, r0, r3
   148c4:	clz	r0, r0
   148c8:	lsr	r0, r0, #5
   148cc:	bx	lr
   148d0:	push	{r4, r5, r6, r7, r8, lr}
   148d4:	sub	sp, sp, #104	; 0x68
   148d8:	mov	r8, r1
   148dc:	mov	r7, r2
   148e0:	mov	r5, r0
   148e4:	ldr	r4, [pc, #156]	; 14988 <__assert_fail@plt+0x229c>
   148e8:	bl	17940 <__assert_fail@plt+0x5254>
   148ec:	ldr	r3, [pc, #152]	; 1498c <__assert_fail@plt+0x22a0>
   148f0:	cmp	r0, #0
   148f4:	mov	r0, sp
   148f8:	ldr	r6, [pc, #144]	; 14990 <__assert_fail@plt+0x22a4>
   148fc:	moveq	r6, r3
   14900:	bl	175f8 <__assert_fail@plt+0x4f0c>
   14904:	mov	r1, sp
   14908:	ldr	r0, [r4, #12]
   1490c:	blx	r6
   14910:	cmp	r0, #0
   14914:	beq	14974 <__assert_fail@plt+0x2288>
   14918:	bl	17940 <__assert_fail@plt+0x5254>
   1491c:	mov	r6, r0
   14920:	bl	12404 <__errno_location@plt>
   14924:	cmp	r6, #0
   14928:	ldr	r6, [r0]
   1492c:	beq	14940 <__assert_fail@plt+0x2254>
   14930:	cmp	r6, #2
   14934:	moveq	r2, r7
   14938:	moveq	r1, r8
   1493c:	beq	1497c <__assert_fail@plt+0x2290>
   14940:	mov	r1, r5
   14944:	mov	r0, #0
   14948:	bl	17f84 <__assert_fail@plt+0x5898>
   1494c:	mov	r3, r0
   14950:	ldr	r2, [pc, #60]	; 14994 <__assert_fail@plt+0x22a8>
   14954:	mov	r0, #0
   14958:	mov	r1, r6
   1495c:	bl	122c0 <error@plt>
   14960:	mov	r3, #1
   14964:	mov	r0, #0
   14968:	str	r3, [r4, #28]
   1496c:	add	sp, sp, #104	; 0x68
   14970:	pop	{r4, r5, r6, r7, r8, pc}
   14974:	mov	r2, r7
   14978:	mov	r1, sp
   1497c:	mov	r0, r5
   14980:	bl	146cc <__assert_fail@plt+0x1fe0>
   14984:	b	1496c <__assert_fail@plt+0x2280>
   14988:	andeq	lr, r4, r8, asr lr
   1498c:	andeq	r7, r1, r8, asr #15
   14990:	andeq	r7, r1, r4, lsr r8
   14994:	andeq	sp, r3, fp, lsl r2
   14998:	push	{r0, r1, r4, r5, r6, lr}
   1499c:	mov	r4, r2
   149a0:	mov	r6, r0
   149a4:	ldr	r3, [pc, #140]	; 14a38 <__assert_fail@plt+0x234c>
   149a8:	ldr	r2, [pc, #140]	; 14a3c <__assert_fail@plt+0x2350>
   149ac:	ldr	r1, [r3, #12]
   149b0:	ldr	r0, [r3, #16]
   149b4:	ldr	r5, [r2, #64]	; 0x40
   149b8:	add	r2, sp, #4
   149bc:	blx	r5
   149c0:	cmp	r0, #0
   149c4:	bge	14a14 <__assert_fail@plt+0x2328>
   149c8:	bl	12404 <__errno_location@plt>
   149cc:	ldr	r4, [r0]
   149d0:	mov	r2, #5
   149d4:	mov	r0, #0
   149d8:	ldr	r1, [pc, #96]	; 14a40 <__assert_fail@plt+0x2354>
   149dc:	bl	1217c <dcgettext@plt>
   149e0:	mov	r5, r0
   149e4:	mov	r1, r6
   149e8:	mov	r0, #0
   149ec:	bl	17f84 <__assert_fail@plt+0x5898>
   149f0:	mov	r3, r0
   149f4:	mov	r1, r4
   149f8:	mov	r2, r5
   149fc:	mov	r0, #0
   14a00:	mov	r4, #0
   14a04:	bl	122c0 <error@plt>
   14a08:	mov	r0, r4
   14a0c:	add	sp, sp, #8
   14a10:	pop	{r4, r5, r6, pc}
   14a14:	mov	r2, #0
   14a18:	ldr	r1, [sp, #4]
   14a1c:	ldr	r0, [r4, #40]	; 0x28
   14a20:	bl	122e4 <fnmatch@plt>
   14a24:	clz	r4, r0
   14a28:	ldr	r0, [sp, #4]
   14a2c:	lsr	r4, r4, #5
   14a30:	bl	125fc <freecon@plt>
   14a34:	b	14a08 <__assert_fail@plt+0x231c>
   14a38:	andeq	lr, r4, r8, asr lr
   14a3c:	andeq	lr, r4, r4, lsl #29
   14a40:	andeq	r8, r3, r0, lsr r0
   14a44:	push	{r4, r5, lr}
   14a48:	mov	r5, r0
   14a4c:	sub	sp, sp, #260	; 0x104
   14a50:	mov	r4, r1
   14a54:	cmp	r4, #0
   14a58:	bne	14a70 <__assert_fail@plt+0x2384>
   14a5c:	mov	r1, r5
   14a60:	mov	r0, #10
   14a64:	bl	1256c <fputc@plt>
   14a68:	add	sp, sp, #260	; 0x104
   14a6c:	pop	{r4, r5, pc}
   14a70:	ldr	r2, [r4, #4]
   14a74:	cmp	r2, #0
   14a78:	beq	14abc <__assert_fail@plt+0x23d0>
   14a7c:	mov	r1, r2
   14a80:	mov	r0, sp
   14a84:	bl	12278 <strcpy@plt>
   14a88:	mov	r0, sp
   14a8c:	bl	123bc <strlen@plt>
   14a90:	subs	r0, r0, #1
   14a94:	bcc	14aa8 <__assert_fail@plt+0x23bc>
   14a98:	ldrb	r3, [sp, r0]
   14a9c:	cmp	r3, #9
   14aa0:	cmpne	r3, #32
   14aa4:	beq	14a90 <__assert_fail@plt+0x23a4>
   14aa8:	add	r3, sp, #256	; 0x100
   14aac:	mov	r2, sp
   14ab0:	add	r0, r3, r0
   14ab4:	mov	r3, #0
   14ab8:	strb	r3, [r0, #-255]	; 0xffffff01
   14abc:	ldr	r1, [pc, #12]	; 14ad0 <__assert_fail@plt+0x23e4>
   14ac0:	mov	r0, r5
   14ac4:	bl	123f8 <fprintf@plt>
   14ac8:	ldr	r4, [r4, #152]	; 0x98
   14acc:	b	14a54 <__assert_fail@plt+0x2368>
   14ad0:	andeq	r8, r3, r6, asr #32
   14ad4:	push	{r0, r1, r2, r4, r5, lr}
   14ad8:	subs	r4, r1, #0
   14adc:	beq	14bcc <__assert_fail@plt+0x24e0>
   14ae0:	mov	r5, r0
   14ae4:	ldr	r1, [r4, #156]	; 0x9c
   14ae8:	bl	14bfc <__assert_fail@plt+0x2510>
   14aec:	ldrb	r3, [r4, #20]
   14af0:	ldr	r1, [pc, #220]	; 14bd4 <__assert_fail@plt+0x24e8>
   14af4:	ldrb	r2, [r4, #19]
   14af8:	cmp	r3, #0
   14afc:	ldrb	ip, [r4, #18]
   14b00:	ldr	r0, [pc, #208]	; 14bd8 <__assert_fail@plt+0x24ec>
   14b04:	moveq	r0, r1
   14b08:	cmp	r2, #0
   14b0c:	ldr	r3, [pc, #200]	; 14bdc <__assert_fail@plt+0x24f0>
   14b10:	moveq	r3, r1
   14b14:	cmp	ip, #0
   14b18:	ldr	r2, [pc, #192]	; 14be0 <__assert_fail@plt+0x24f4>
   14b1c:	moveq	r2, r1
   14b20:	str	r0, [sp]
   14b24:	mov	r0, r5
   14b28:	ldr	r1, [pc, #180]	; 14be4 <__assert_fail@plt+0x24f8>
   14b2c:	bl	123f8 <fprintf@plt>
   14b30:	mov	r1, r4
   14b34:	mov	r0, r5
   14b38:	bl	15c74 <__assert_fail@plt+0x3588>
   14b3c:	vldr	s15, [r4, #28]
   14b40:	mov	r0, r5
   14b44:	ldr	r1, [pc, #156]	; 14be8 <__assert_fail@plt+0x24fc>
   14b48:	vcvt.f64.f32	d7, s15
   14b4c:	vmov	r2, r3, d7
   14b50:	bl	123f8 <fprintf@plt>
   14b54:	ldr	r3, [pc, #144]	; 14bec <__assert_fail@plt+0x2500>
   14b58:	ldr	r3, [r3, #44]	; 0x2c
   14b5c:	tst	r3, #64	; 0x40
   14b60:	beq	14ba8 <__assert_fail@plt+0x24bc>
   14b64:	ldr	r1, [pc, #132]	; 14bf0 <__assert_fail@plt+0x2504>
   14b68:	mov	r0, r5
   14b6c:	ldr	r3, [r4, #164]	; 0xa4
   14b70:	ldr	r2, [r4, #168]	; 0xa8
   14b74:	bl	123f8 <fprintf@plt>
   14b78:	ldr	r3, [r4, #164]	; 0xa4
   14b7c:	cmp	r3, #0
   14b80:	beq	14bbc <__assert_fail@plt+0x24d0>
   14b84:	vldr	s15, [r4, #168]	; 0xa8
   14b88:	mov	r0, r5
   14b8c:	ldr	r1, [pc, #96]	; 14bf4 <__assert_fail@plt+0x2508>
   14b90:	vcvt.f64.u32	d6, s15
   14b94:	vmov	s15, r3
   14b98:	vcvt.f64.u32	d7, s15
   14b9c:	vdiv.f64	d7, d6, d7
   14ba0:	vmov	r2, r3, d7
   14ba4:	bl	123f8 <fprintf@plt>
   14ba8:	ldr	r1, [r4, #160]	; 0xa0
   14bac:	mov	r0, r5
   14bb0:	add	sp, sp, #12
   14bb4:	pop	{r4, r5, lr}
   14bb8:	b	14bfc <__assert_fail@plt+0x2510>
   14bbc:	mov	r1, r5
   14bc0:	ldr	r0, [pc, #48]	; 14bf8 <__assert_fail@plt+0x250c>
   14bc4:	bl	12680 <fputs@plt>
   14bc8:	b	14ba8 <__assert_fail@plt+0x24bc>
   14bcc:	add	sp, sp, #12
   14bd0:	pop	{r4, r5, pc}
   14bd4:	andeq	r9, r3, r7, ror r5
   14bd8:	andeq	r8, r3, r6, rrx
   14bdc:	andeq	r8, r3, r9, asr r0
   14be0:	andeq	r8, r3, ip, asr #32
   14be4:	andeq	r8, r3, r3, ror r0
   14be8:	andeq	r8, r3, sl, ror r0
   14bec:	andeq	lr, r4, r4, lsl #29
   14bf0:	muleq	r3, r4, r0
   14bf4:	andeq	r8, r3, pc, lsr #1
   14bf8:	strheq	r8, [r3], -r7
   14bfc:	push	{r4, r5, r6, lr}
   14c00:	mov	r6, r0
   14c04:	mov	r4, r1
   14c08:	ldr	r0, [pc, #116]	; 14c84 <__assert_fail@plt+0x2598>
   14c0c:	ldr	r1, [pc, #116]	; 14c88 <__assert_fail@plt+0x259c>
   14c10:	cmp	r4, #0
   14c14:	popeq	{r4, r5, r6, pc}
   14c18:	ldr	r2, [r4]
   14c1c:	ldr	r3, [r4, #156]	; 0x9c
   14c20:	cmp	r2, r0
   14c24:	cmpne	r2, r1
   14c28:	bne	14c3c <__assert_fail@plt+0x2550>
   14c2c:	cmp	r3, #0
   14c30:	bne	14c50 <__assert_fail@plt+0x2564>
   14c34:	ldr	r4, [r4, #160]	; 0xa0
   14c38:	b	14c10 <__assert_fail@plt+0x2524>
   14c3c:	cmp	r3, #0
   14c40:	bne	14c50 <__assert_fail@plt+0x2564>
   14c44:	ldr	r5, [r4, #160]	; 0xa0
   14c48:	cmp	r5, #0
   14c4c:	beq	14c60 <__assert_fail@plt+0x2574>
   14c50:	mov	r1, r6
   14c54:	ldr	r0, [pc, #48]	; 14c8c <__assert_fail@plt+0x25a0>
   14c58:	mov	r5, #1
   14c5c:	bl	12680 <fputs@plt>
   14c60:	mov	r1, r4
   14c64:	mov	r0, r6
   14c68:	bl	14ad4 <__assert_fail@plt+0x23e8>
   14c6c:	cmp	r5, #0
   14c70:	popeq	{r4, r5, r6, pc}
   14c74:	mov	r1, r6
   14c78:	pop	{r4, r5, r6, lr}
   14c7c:	ldr	r0, [pc, #12]	; 14c90 <__assert_fail@plt+0x25a4>
   14c80:	b	12680 <fputs@plt>
   14c84:	strdeq	r3, [r1], -r0
   14c88:	andeq	r3, r1, r0, asr #16
   14c8c:	strheq	r8, [r3], -ip
   14c90:	andeq	r8, r3, r0, asr #1
   14c94:	ldr	r3, [pc, #60]	; 14cd8 <__assert_fail@plt+0x25ec>
   14c98:	ldr	r3, [r3, #44]	; 0x2c
   14c9c:	tst	r3, #64	; 0x40
   14ca0:	bxeq	lr
   14ca4:	push	{r4, r5, r6, lr}
   14ca8:	mov	r5, r0
   14cac:	ldr	r4, [pc, #40]	; 14cdc <__assert_fail@plt+0x25f0>
   14cb0:	ldr	r0, [pc, #40]	; 14ce0 <__assert_fail@plt+0x25f4>
   14cb4:	ldr	r1, [r4]
   14cb8:	bl	12680 <fputs@plt>
   14cbc:	mov	r1, r5
   14cc0:	ldr	r0, [r4]
   14cc4:	bl	14ad4 <__assert_fail@plt+0x23e8>
   14cc8:	mov	r0, #10
   14ccc:	ldr	r1, [r4]
   14cd0:	pop	{r4, r5, r6, lr}
   14cd4:	b	1256c <fputc@plt>
   14cd8:	andeq	lr, r4, r4, lsl #29
   14cdc:	andeq	lr, r4, r0, ror #10
   14ce0:	andeq	r8, r3, r4, asr #1
   14ce4:	push	{r4, lr}
   14ce8:	mov	ip, #1
   14cec:	ldr	lr, [pc, #352]	; 14e54 <__assert_fail@plt+0x2768>
   14cf0:	ldr	r4, [pc, #352]	; 14e58 <__assert_fail@plt+0x276c>
   14cf4:	cmp	r0, #0
   14cf8:	popeq	{r4, pc}
   14cfc:	ldr	r3, [r0]
   14d00:	cmp	r3, #0
   14d04:	bne	14d1c <__assert_fail@plt+0x2630>
   14d08:	ldr	r3, [pc, #332]	; 14e5c <__assert_fail@plt+0x2770>
   14d0c:	movw	r2, #1310	; 0x51e
   14d10:	ldr	r1, [pc, #328]	; 14e60 <__assert_fail@plt+0x2774>
   14d14:	ldr	r0, [pc, #328]	; 14e64 <__assert_fail@plt+0x2778>
   14d18:	bl	126ec <__assert_fail@plt>
   14d1c:	ldr	r2, [r0, #172]	; 0xac
   14d20:	cmp	r2, #0
   14d24:	bne	14d3c <__assert_fail@plt+0x2650>
   14d28:	ldr	r3, [pc, #300]	; 14e5c <__assert_fail@plt+0x2770>
   14d2c:	movw	r2, #1313	; 0x521
   14d30:	ldr	r1, [pc, #296]	; 14e60 <__assert_fail@plt+0x2774>
   14d34:	ldr	r0, [pc, #300]	; 14e68 <__assert_fail@plt+0x277c>
   14d38:	b	14d18 <__assert_fail@plt+0x262c>
   14d3c:	ldr	r1, [r2, #12]
   14d40:	cmp	r3, r1
   14d44:	cmpne	r1, #0
   14d48:	beq	14d60 <__assert_fail@plt+0x2674>
   14d4c:	ldr	r3, [pc, #264]	; 14e5c <__assert_fail@plt+0x2770>
   14d50:	movw	r2, #1322	; 0x52a
   14d54:	ldr	r1, [pc, #260]	; 14e60 <__assert_fail@plt+0x2774>
   14d58:	ldr	r0, [pc, #268]	; 14e6c <__assert_fail@plt+0x2780>
   14d5c:	b	14d18 <__assert_fail@plt+0x262c>
   14d60:	ldr	r2, [r2]
   14d64:	cmp	r2, #6
   14d68:	bhi	14d88 <__assert_fail@plt+0x269c>
   14d6c:	lsl	r1, ip, r2
   14d70:	tst	r1, #58	; 0x3a
   14d74:	bne	14e14 <__assert_fail@plt+0x2728>
   14d78:	tst	r1, #5
   14d7c:	bne	14d90 <__assert_fail@plt+0x26a4>
   14d80:	tst	r1, #64	; 0x40
   14d84:	bne	14dc8 <__assert_fail@plt+0x26dc>
   14d88:	ldr	r0, [r0, #152]	; 0x98
   14d8c:	b	14cf4 <__assert_fail@plt+0x2608>
   14d90:	cmp	r2, #0
   14d94:	bne	14dac <__assert_fail@plt+0x26c0>
   14d98:	ldr	r3, [pc, #188]	; 14e5c <__assert_fail@plt+0x2770>
   14d9c:	movw	r2, #1338	; 0x53a
   14da0:	ldr	r1, [pc, #184]	; 14e60 <__assert_fail@plt+0x2774>
   14da4:	ldr	r0, [pc, #196]	; 14e70 <__assert_fail@plt+0x2784>
   14da8:	b	14d18 <__assert_fail@plt+0x262c>
   14dac:	cmp	r2, #2
   14db0:	bne	14d88 <__assert_fail@plt+0x269c>
   14db4:	ldr	r3, [pc, #160]	; 14e5c <__assert_fail@plt+0x2770>
   14db8:	movw	r2, #1339	; 0x53b
   14dbc:	ldr	r1, [pc, #156]	; 14e60 <__assert_fail@plt+0x2774>
   14dc0:	ldr	r0, [pc, #172]	; 14e74 <__assert_fail@plt+0x2788>
   14dc4:	b	14d18 <__assert_fail@plt+0x262c>
   14dc8:	ldrb	r2, [r0, #16]
   14dcc:	cmp	r2, #0
   14dd0:	bne	14de8 <__assert_fail@plt+0x26fc>
   14dd4:	ldr	r3, [pc, #128]	; 14e5c <__assert_fail@plt+0x2770>
   14dd8:	movw	r2, #1343	; 0x53f
   14ddc:	ldr	r1, [pc, #124]	; 14e60 <__assert_fail@plt+0x2774>
   14de0:	ldr	r0, [pc, #144]	; 14e78 <__assert_fail@plt+0x278c>
   14de4:	b	14d18 <__assert_fail@plt+0x262c>
   14de8:	cmp	r3, lr
   14dec:	cmpne	r3, r4
   14df0:	beq	14d88 <__assert_fail@plt+0x269c>
   14df4:	ldrb	r3, [r0, #17]
   14df8:	cmp	r3, #0
   14dfc:	bne	14d88 <__assert_fail@plt+0x269c>
   14e00:	ldr	r3, [pc, #84]	; 14e5c <__assert_fail@plt+0x2770>
   14e04:	movw	r2, #1349	; 0x545
   14e08:	ldr	r1, [pc, #80]	; 14e60 <__assert_fail@plt+0x2774>
   14e0c:	ldr	r0, [pc, #104]	; 14e7c <__assert_fail@plt+0x2790>
   14e10:	b	14d18 <__assert_fail@plt+0x262c>
   14e14:	ldrb	r3, [r0, #17]
   14e18:	cmp	r3, #0
   14e1c:	beq	14e34 <__assert_fail@plt+0x2748>
   14e20:	ldr	r3, [pc, #52]	; 14e5c <__assert_fail@plt+0x2770>
   14e24:	movw	r2, #1363	; 0x553
   14e28:	ldr	r1, [pc, #48]	; 14e60 <__assert_fail@plt+0x2774>
   14e2c:	ldr	r0, [pc, #76]	; 14e80 <__assert_fail@plt+0x2794>
   14e30:	b	14d18 <__assert_fail@plt+0x262c>
   14e34:	ldrb	r3, [r0, #16]
   14e38:	cmp	r3, #0
   14e3c:	beq	14d88 <__assert_fail@plt+0x269c>
   14e40:	ldr	r3, [pc, #20]	; 14e5c <__assert_fail@plt+0x2770>
   14e44:	movw	r2, #1364	; 0x554
   14e48:	ldr	r1, [pc, #16]	; 14e60 <__assert_fail@plt+0x2774>
   14e4c:	ldr	r0, [pc, #48]	; 14e84 <__assert_fail@plt+0x2798>
   14e50:	b	14d18 <__assert_fail@plt+0x262c>
   14e54:	andeq	r3, r1, r0, lsl #13
   14e58:	andeq	r3, r1, r8, ror #12
   14e5c:	andeq	r7, r3, ip, lsr pc
   14e60:	andeq	r7, r3, lr, asr #30
   14e64:	andeq	r8, r3, pc, ror #1
   14e68:	andeq	r8, r3, r4, lsl #2
   14e6c:	andeq	r8, r3, ip, lsl r1
   14e70:	andeq	r8, r3, r7, asr #2
   14e74:	andeq	r8, r3, fp, ror #2
   14e78:			; <UNDEFINED> instruction: 0x000381b0
   14e7c:	muleq	r3, fp, r1
   14e80:	muleq	r3, sl, r1
   14e84:	andeq	r8, r3, pc, lsr #3
   14e88:	push	{r4, r5, r6, r7, r8, lr}
   14e8c:	mov	r6, r0
   14e90:	mov	r4, #0
   14e94:	mov	r0, #8
   14e98:	mov	r7, r1
   14e9c:	mov	r8, r2
   14ea0:	bl	273e0 <__assert_fail@plt+0x14cf4>
   14ea4:	mov	r5, r0
   14ea8:	mov	r2, r4
   14eac:	str	r0, [r6]
   14eb0:	mov	r1, r8
   14eb4:	str	r4, [r0, #4]
   14eb8:	mov	r0, r7
   14ebc:	bl	226f0 <__assert_fail@plt+0x10004>
   14ec0:	ldr	r3, [r6]
   14ec4:	str	r0, [r5]
   14ec8:	ldr	r0, [r3]
   14ecc:	cmp	r0, r4
   14ed0:	blt	14ee4 <__assert_fail@plt+0x27f8>
   14ed4:	mov	r1, #1
   14ed8:	bl	1f784 <__assert_fail@plt+0xd098>
   14edc:	mov	r0, #1
   14ee0:	pop	{r4, r5, r6, r7, r8, pc}
   14ee4:	mov	r0, r4
   14ee8:	pop	{r4, r5, r6, r7, r8, pc}
   14eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ef0:	mov	r7, r0
   14ef4:	sub	sp, sp, #44	; 0x2c
   14ef8:	mov	r4, r2
   14efc:	ldr	r0, [r2]
   14f00:	bl	17f60 <__assert_fail@plt+0x5874>
   14f04:	subs	r8, r0, #0
   14f08:	beq	15064 <__assert_fail@plt+0x2978>
   14f0c:	ldr	r3, [r4, #116]	; 0x74
   14f10:	ldr	r5, [pc, #576]	; 15158 <__assert_fail@plt+0x2a6c>
   14f14:	cmp	r3, #0
   14f18:	bne	14fbc <__assert_fail@plt+0x28d0>
   14f1c:	ldr	r9, [r5, #12]
   14f20:	mov	r1, #47	; 0x2f
   14f24:	add	r6, r4, #144	; 0x90
   14f28:	mov	r0, r9
   14f2c:	bl	123c8 <strchr@plt>
   14f30:	cmp	r0, #0
   14f34:	beq	14fa4 <__assert_fail@plt+0x28b8>
   14f38:	mov	r0, r9
   14f3c:	bl	1fa04 <__assert_fail@plt+0xd318>
   14f40:	mov	r9, r0
   14f44:	mov	r2, r0
   14f48:	ldr	r1, [r5, #16]
   14f4c:	mov	r0, r6
   14f50:	bl	14e88 <__assert_fail@plt+0x279c>
   14f54:	mov	r6, r0
   14f58:	mov	r0, r9
   14f5c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   14f60:	cmp	r6, #0
   14f64:	bne	14fbc <__assert_fail@plt+0x28d0>
   14f68:	bl	12404 <__errno_location@plt>
   14f6c:	ldr	r4, [r0]
   14f70:	mov	r2, #5
   14f74:	mov	r0, r6
   14f78:	ldr	r1, [pc, #476]	; 1515c <__assert_fail@plt+0x2a70>
   14f7c:	bl	1217c <dcgettext@plt>
   14f80:	mov	r5, r0
   14f84:	mov	r1, r7
   14f88:	mov	r0, r6
   14f8c:	bl	17f84 <__assert_fail@plt+0x5898>
   14f90:	mov	r3, r0
   14f94:	mov	r2, r5
   14f98:	mov	r1, r4
   14f9c:	mov	r0, #1
   14fa0:	bl	122c0 <error@plt>
   14fa4:	mov	r0, r6
   14fa8:	ldr	r2, [pc, #432]	; 15160 <__assert_fail@plt+0x2a74>
   14fac:	ldr	r1, [r5, #16]
   14fb0:	bl	14e88 <__assert_fail@plt+0x279c>
   14fb4:	mov	r6, r0
   14fb8:	b	14f60 <__assert_fail@plt+0x2874>
   14fbc:	ldr	r0, [r5, #12]
   14fc0:	bl	1f960 <__assert_fail@plt+0xd274>
   14fc4:	ldrb	r3, [r0]
   14fc8:	mov	r6, r0
   14fcc:	mov	r7, r0
   14fd0:	cmp	r3, #47	; 0x2f
   14fd4:	movne	r9, #2
   14fd8:	ldrne	sl, [pc, #388]	; 15164 <__assert_fail@plt+0x2a78>
   14fdc:	moveq	r9, #0
   14fe0:	moveq	sl, r9
   14fe4:	ldrb	r5, [r4, #40]	; 0x28
   14fe8:	add	r3, r4, #44	; 0x2c
   14fec:	add	fp, r4, #88	; 0x58
   14ff0:	str	r3, [sp, #28]
   14ff4:	cmp	r5, #0
   14ff8:	beq	150ec <__assert_fail@plt+0x2a00>
   14ffc:	mov	r0, r7
   15000:	bl	123bc <strlen@plt>
   15004:	mov	r3, #0
   15008:	mov	r2, r7
   1500c:	str	sl, [sp]
   15010:	mov	r1, fp
   15014:	str	r9, [sp, #4]
   15018:	str	r3, [sp, #8]
   1501c:	add	r3, r0, #1
   15020:	add	r0, r4, #44	; 0x2c
   15024:	bl	1d6e0 <__assert_fail@plt+0xaff4>
   15028:	ldr	r3, [r4, #116]	; 0x74
   1502c:	cmp	r3, #0
   15030:	ldrne	r3, [pc, #288]	; 15158 <__assert_fail@plt+0x2a6c>
   15034:	movne	r2, #1
   15038:	strbne	r2, [r3, #32]
   1503c:	cmp	r6, #0
   15040:	beq	15134 <__assert_fail@plt+0x2a48>
   15044:	cmp	r8, #0
   15048:	movne	r5, r8
   1504c:	bne	15140 <__assert_fail@plt+0x2a54>
   15050:	ldr	r3, [pc, #272]	; 15168 <__assert_fail@plt+0x2a7c>
   15054:	mov	r2, #208	; 0xd0
   15058:	ldr	r1, [pc, #268]	; 1516c <__assert_fail@plt+0x2a80>
   1505c:	ldr	r0, [pc, #268]	; 15170 <__assert_fail@plt+0x2a84>
   15060:	b	15094 <__assert_fail@plt+0x29a8>
   15064:	ldr	r3, [pc, #264]	; 15174 <__assert_fail@plt+0x2a88>
   15068:	ldr	r2, [r4, #144]	; 0x90
   1506c:	ldr	r3, [r3]
   15070:	cmp	r2, r3
   15074:	moveq	r9, r8
   15078:	moveq	sl, r8
   1507c:	moveq	r6, r8
   15080:	beq	14fe4 <__assert_fail@plt+0x28f8>
   15084:	ldr	r3, [pc, #220]	; 15168 <__assert_fail@plt+0x2a7c>
   15088:	mov	r2, #148	; 0x94
   1508c:	ldr	r1, [pc, #216]	; 1516c <__assert_fail@plt+0x2a80>
   15090:	ldr	r0, [pc, #224]	; 15178 <__assert_fail@plt+0x2a8c>
   15094:	bl	126ec <__assert_fail@plt>
   15098:	ldr	r3, [r4, #132]	; 0x84
   1509c:	ldr	r2, [r3, r5, lsl #2]
   150a0:	add	r5, r5, #1
   150a4:	mov	r0, r2
   150a8:	str	r2, [sp, #36]	; 0x24
   150ac:	bl	123bc <strlen@plt>
   150b0:	mov	r3, r0
   150b4:	mov	r0, r7
   150b8:	str	r3, [sp, #32]
   150bc:	bl	123bc <strlen@plt>
   150c0:	mov	r3, #0
   150c4:	mov	r1, fp
   150c8:	str	sl, [sp]
   150cc:	str	r9, [sp, #4]
   150d0:	str	r7, [sp, #8]
   150d4:	str	r0, [sp, #12]
   150d8:	str	r3, [sp, #16]
   150dc:	ldr	r0, [sp, #28]
   150e0:	ldr	r3, [sp, #32]
   150e4:	ldr	r2, [sp, #36]	; 0x24
   150e8:	bl	1d930 <__assert_fail@plt+0xb244>
   150ec:	ldr	r3, [r4, #136]	; 0x88
   150f0:	cmp	r3, r5
   150f4:	bgt	15098 <__assert_fail@plt+0x29ac>
   150f8:	mov	r1, fp
   150fc:	ldr	r0, [sp, #28]
   15100:	bl	1dab0 <__assert_fail@plt+0xb3c4>
   15104:	ldr	r3, [r4, #148]	; 0x94
   15108:	ubfx	r2, r3, #8, #8
   1510c:	and	r3, r3, #127	; 0x7f
   15110:	orrs	r3, r2, r3
   15114:	moveq	r5, #1
   15118:	movne	r5, #0
   1511c:	cmp	r8, #0
   15120:	beq	1514c <__assert_fail@plt+0x2a60>
   15124:	ldr	r0, [r4, #144]	; 0x90
   15128:	bl	2686c <__assert_fail@plt+0x14180>
   1512c:	cmp	r6, #0
   15130:	bne	15140 <__assert_fail@plt+0x2a54>
   15134:	mov	r0, r5
   15138:	add	sp, sp, #44	; 0x2c
   1513c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15140:	mov	r0, r6
   15144:	bl	284c4 <__assert_fail@plt+0x15dd8>
   15148:	b	15134 <__assert_fail@plt+0x2a48>
   1514c:	cmp	r6, #0
   15150:	beq	15134 <__assert_fail@plt+0x2a48>
   15154:	b	15050 <__assert_fail@plt+0x2964>
   15158:	andeq	lr, r4, r8, asr lr
   1515c:	ldrdeq	r8, [r3], -r9
   15160:	ldrdeq	r8, [r3], -r9
   15164:	ldrdeq	r8, [r3], -r6
   15168:	andeq	r8, r3, r0, asr #3
   1516c:	andeq	r8, r3, sl, lsl r2
   15170:	andeq	r8, r3, r2, asr #4
   15174:	andeq	lr, r4, r0, lsl #11
   15178:	andeq	r8, r3, r1, lsr #4
   1517c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15180:	mov	r6, r3
   15184:	sub	sp, sp, #24
   15188:	mov	r4, r1
   1518c:	ldr	r7, [pc, #948]	; 15548 <__assert_fail@plt+0x2e5c>
   15190:	ldr	r8, [pc, #948]	; 1554c <__assert_fail@plt+0x2e60>
   15194:	ldr	r3, [r7, #44]	; 0x2c
   15198:	tst	r3, #32
   1519c:	beq	151e4 <__assert_fail@plt+0x2af8>
   151a0:	ldr	r2, [r4, #48]	; 0x30
   151a4:	mov	r3, #0
   151a8:	mov	r5, #0
   151ac:	ldr	r1, [pc, #924]	; 15550 <__assert_fail@plt+0x2e64>
   151b0:	ldr	r0, [r8]
   151b4:	subs	r2, r2, #1
   151b8:	sbc	r3, r3, #0
   151bc:	ldr	r9, [pc, #912]	; 15554 <__assert_fail@plt+0x2e68>
   151c0:	bl	123f8 <fprintf@plt>
   151c4:	ldr	r3, [r4, #48]	; 0x30
   151c8:	ldr	sl, [r8]
   151cc:	sub	r3, r3, #1
   151d0:	cmp	r3, r5
   151d4:	bhi	15250 <__assert_fail@plt+0x2b64>
   151d8:	mov	r1, sl
   151dc:	mov	r0, #10
   151e0:	bl	1256c <fputc@plt>
   151e4:	ldr	r3, [pc, #876]	; 15558 <__assert_fail@plt+0x2e6c>
   151e8:	ldr	r0, [r3]
   151ec:	bl	28474 <__assert_fail@plt+0x15d88>
   151f0:	ldr	r0, [r8]
   151f4:	bl	28474 <__assert_fail@plt+0x15d88>
   151f8:	ldr	r3, [pc, #860]	; 1555c <__assert_fail@plt+0x2e70>
   151fc:	ldr	r2, [r3]
   15200:	cmp	r2, #0
   15204:	beq	15218 <__assert_fail@plt+0x2b2c>
   15208:	mov	r1, #0
   1520c:	mov	r0, #17
   15210:	str	r1, [r3]
   15214:	bl	12140 <signal@plt>
   15218:	bl	12524 <fork@plt>
   1521c:	cmn	r0, #1
   15220:	mov	r5, r0
   15224:	bne	15278 <__assert_fail@plt+0x2b8c>
   15228:	bl	12404 <__errno_location@plt>
   1522c:	ldr	r4, [r0]
   15230:	mov	r2, #5
   15234:	mov	r0, #0
   15238:	ldr	r1, [pc, #800]	; 15560 <__assert_fail@plt+0x2e74>
   1523c:	bl	1217c <dcgettext@plt>
   15240:	mov	r2, r0
   15244:	mov	r0, #1
   15248:	mov	r1, r4
   1524c:	bl	122c0 <error@plt>
   15250:	ldr	r3, [r4, #52]	; 0x34
   15254:	mov	r0, #0
   15258:	ldr	r1, [r3, r5, lsl #2]
   1525c:	add	r5, r5, #1
   15260:	bl	17f84 <__assert_fail@plt+0x5898>
   15264:	mov	r2, r0
   15268:	mov	r1, r9
   1526c:	mov	r0, sl
   15270:	bl	123f8 <fprintf@plt>
   15274:	b	151c4 <__assert_fail@plt+0x2ad8>
   15278:	cmp	r0, #0
   1527c:	addne	sl, r4, #108	; 0x6c
   15280:	bne	15480 <__assert_fail@plt+0x2d94>
   15284:	ldr	r7, [r4, #104]	; 0x68
   15288:	cmp	r7, #0
   1528c:	bne	152a4 <__assert_fail@plt+0x2bb8>
   15290:	ldr	r3, [pc, #716]	; 15564 <__assert_fail@plt+0x2e78>
   15294:	movw	r2, #321	; 0x141
   15298:	ldr	r1, [pc, #712]	; 15568 <__assert_fail@plt+0x2e7c>
   1529c:	ldr	r0, [pc, #712]	; 1556c <__assert_fail@plt+0x2e80>
   152a0:	bl	126ec <__assert_fail@plt>
   152a4:	ldrb	r4, [r4, #100]	; 0x64
   152a8:	cmp	r4, #0
   152ac:	moveq	r4, #1
   152b0:	beq	1530c <__assert_fail@plt+0x2c20>
   152b4:	ldr	r2, [pc, #692]	; 15570 <__assert_fail@plt+0x2e84>
   152b8:	add	r3, sp, #12
   152bc:	ldr	r0, [r2]
   152c0:	ldr	r1, [r2, #4]
   152c4:	ldrh	r2, [r2, #8]
   152c8:	stmia	r3!, {r0, r1}
   152cc:	mov	r0, r5
   152d0:	strh	r2, [r3]
   152d4:	bl	126a4 <close@plt>
   152d8:	cmp	r0, #0
   152dc:	bge	15374 <__assert_fail@plt+0x2c88>
   152e0:	bl	12404 <__errno_location@plt>
   152e4:	ldr	r4, [r0]
   152e8:	mov	r2, #5
   152ec:	mov	r0, r5
   152f0:	ldr	r1, [pc, #636]	; 15574 <__assert_fail@plt+0x2e88>
   152f4:	bl	1217c <dcgettext@plt>
   152f8:	mov	r2, r0
   152fc:	mov	r0, r5
   15300:	mov	r1, r4
   15304:	mov	r4, r5
   15308:	bl	122c0 <error@plt>
   1530c:	mov	r0, r7
   15310:	bl	26850 <__assert_fail@plt+0x14164>
   15314:	cmp	r0, #0
   15318:	beq	153b4 <__assert_fail@plt+0x2cc8>
   1531c:	bl	12404 <__errno_location@plt>
   15320:	mov	r2, #5
   15324:	ldr	r1, [pc, #588]	; 15578 <__assert_fail@plt+0x2e8c>
   15328:	ldr	r4, [r0]
   1532c:	mov	r0, #0
   15330:	bl	1217c <dcgettext@plt>
   15334:	ldr	r3, [r7]
   15338:	mov	r2, r0
   1533c:	cmp	r3, #0
   15340:	bge	15354 <__assert_fail@plt+0x2c68>
   15344:	ldr	r1, [r7, #4]
   15348:	cmp	r1, #0
   1534c:	ldrne	r3, [pc, #552]	; 1557c <__assert_fail@plt+0x2e90>
   15350:	bne	1535c <__assert_fail@plt+0x2c70>
   15354:	ldr	r3, [pc, #548]	; 15580 <__assert_fail@plt+0x2e94>
   15358:	mov	r1, r3
   1535c:	mov	r0, #0
   15360:	str	r1, [sp]
   15364:	mov	r1, r4
   15368:	bl	122c0 <error@plt>
   1536c:	mov	r0, #1
   15370:	bl	120ec <_exit@plt>
   15374:	mov	r1, #131072	; 0x20000
   15378:	add	r0, sp, #12
   1537c:	bl	1fa94 <__assert_fail@plt+0xd3a8>
   15380:	cmp	r0, #0
   15384:	bge	1530c <__assert_fail@plt+0x2c20>
   15388:	bl	12404 <__errno_location@plt>
   1538c:	ldr	r8, [r0]
   15390:	add	r1, sp, #12
   15394:	mov	r0, r5
   15398:	bl	17f84 <__assert_fail@plt+0x5898>
   1539c:	mov	r3, r0
   153a0:	ldr	r2, [pc, #476]	; 15584 <__assert_fail@plt+0x2e98>
   153a4:	mov	r0, r5
   153a8:	mov	r1, r8
   153ac:	bl	122c0 <error@plt>
   153b0:	b	1530c <__assert_fail@plt+0x2c20>
   153b4:	cmp	r4, #0
   153b8:	beq	1536c <__assert_fail@plt+0x2c80>
   153bc:	bl	1e5a4 <__assert_fail@plt+0xbeb8>
   153c0:	cmp	r0, #0
   153c4:	beq	153cc <__assert_fail@plt+0x2ce0>
   153c8:	bl	1e5c0 <__assert_fail@plt+0xbed4>
   153cc:	mov	r0, r6
   153d0:	bl	1df0c <__assert_fail@plt+0xb820>
   153d4:	mov	r5, r0
   153d8:	bl	12404 <__errno_location@plt>
   153dc:	cmp	r5, #0
   153e0:	mov	r4, r0
   153e4:	movne	r3, #7
   153e8:	strne	r3, [r0]
   153ec:	bne	153fc <__assert_fail@plt+0x2d10>
   153f0:	mov	r1, r6
   153f4:	ldr	r0, [r6]
   153f8:	bl	12104 <execvp@plt>
   153fc:	ldr	r4, [r4]
   15400:	mov	r0, #0
   15404:	ldr	r1, [r6]
   15408:	bl	17f84 <__assert_fail@plt+0x5898>
   1540c:	mov	r3, r0
   15410:	ldr	r2, [pc, #364]	; 15584 <__assert_fail@plt+0x2e98>
   15414:	mov	r0, #0
   15418:	mov	r1, r4
   1541c:	bl	122c0 <error@plt>
   15420:	b	1536c <__assert_fail@plt+0x2c80>
   15424:	bl	12404 <__errno_location@plt>
   15428:	ldr	r9, [r0]
   1542c:	cmp	r9, #4
   15430:	beq	15480 <__assert_fail@plt+0x2d94>
   15434:	mov	r2, #5
   15438:	ldr	r1, [pc, #328]	; 15588 <__assert_fail@plt+0x2e9c>
   1543c:	mov	r0, #0
   15440:	bl	1217c <dcgettext@plt>
   15444:	mov	r4, r0
   15448:	mov	r0, #0
   1544c:	ldr	r1, [r6]
   15450:	bl	17f84 <__assert_fail@plt+0x5898>
   15454:	mov	r3, r0
   15458:	mov	r2, r4
   1545c:	mov	r0, #0
   15460:	mov	r1, r9
   15464:	bl	122c0 <error@plt>
   15468:	ldr	r3, [pc, #284]	; 1558c <__assert_fail@plt+0x2ea0>
   1546c:	mov	r2, #1
   15470:	mov	r0, #0
   15474:	str	r2, [r3, #28]
   15478:	add	sp, sp, #24
   1547c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15480:	mov	r2, #0
   15484:	mov	r1, sl
   15488:	mov	r0, r5
   1548c:	bl	12254 <waitpid@plt>
   15490:	cmn	r0, #1
   15494:	beq	15424 <__assert_fail@plt+0x2d38>
   15498:	ldr	r3, [r4, #108]	; 0x6c
   1549c:	and	r2, r3, #127	; 0x7f
   154a0:	add	r2, r2, #1
   154a4:	sbfx	r2, r2, #1, #7
   154a8:	cmp	r2, #0
   154ac:	ble	15518 <__assert_fail@plt+0x2e2c>
   154b0:	mov	r2, #5
   154b4:	ldr	r1, [pc, #212]	; 15590 <__assert_fail@plt+0x2ea4>
   154b8:	mov	r0, #0
   154bc:	bl	1217c <dcgettext@plt>
   154c0:	mov	r5, r0
   154c4:	mov	r0, #0
   154c8:	ldr	r2, [r6]
   154cc:	ldr	r1, [r7, #72]	; 0x48
   154d0:	bl	265a0 <__assert_fail@plt+0x13eb4>
   154d4:	ldr	r3, [r4, #108]	; 0x6c
   154d8:	mov	r1, #0
   154dc:	mov	r2, r5
   154e0:	and	r3, r3, #127	; 0x7f
   154e4:	str	r3, [sp]
   154e8:	mov	r3, r0
   154ec:	mov	r0, r1
   154f0:	bl	122c0 <error@plt>
   154f4:	ldrb	r3, [r4]
   154f8:	cmp	r3, #0
   154fc:	bne	15508 <__assert_fail@plt+0x2e1c>
   15500:	mov	r0, #1
   15504:	b	15478 <__assert_fail@plt+0x2d8c>
   15508:	ldr	r3, [pc, #124]	; 1558c <__assert_fail@plt+0x2ea0>
   1550c:	mov	r0, #1
   15510:	str	r0, [r3, #28]
   15514:	b	15478 <__assert_fail@plt+0x2d8c>
   15518:	ubfx	r6, r3, #8, #8
   1551c:	ldr	r3, [r7, #44]	; 0x2c
   15520:	tst	r3, #32
   15524:	beq	1553c <__assert_fail@plt+0x2e50>
   15528:	mov	r3, r6
   1552c:	mov	r2, r5
   15530:	ldr	r1, [pc, #92]	; 15594 <__assert_fail@plt+0x2ea8>
   15534:	ldr	r0, [r8]
   15538:	bl	123f8 <fprintf@plt>
   1553c:	cmp	r6, #0
   15540:	beq	15500 <__assert_fail@plt+0x2e14>
   15544:	b	154f4 <__assert_fail@plt+0x2e08>
   15548:	andeq	lr, r4, r4, lsl #29
   1554c:	andeq	lr, r4, r0, ror #10
   15550:	andeq	r8, r3, r8, asr #4
   15554:	andeq	sp, r3, sl, lsl r2
   15558:	andeq	lr, r4, ip, ror #10
   1555c:	andeq	lr, r4, ip, lsr #5
   15560:	andeq	r8, r3, r2, ror r2
   15564:	andeq	r8, r3, pc, asr #3
   15568:	andeq	r8, r3, sl, lsl r2
   1556c:	andeq	r8, r3, lr, ror r2
   15570:	andeq	r8, r3, r2, asr #6
   15574:	muleq	r3, r9, r2
   15578:			; <UNDEFINED> instruction: 0x000382b5
   1557c:	ldrdeq	sl, [r3], -r1
   15580:	andeq	r9, r3, r7, ror r5
   15584:	andeq	sp, r3, fp, lsl r2
   15588:	ldrdeq	r8, [r3], -r4
   1558c:	andeq	lr, r4, r8, asr lr
   15590:	andeq	r8, r3, r9, ror #5
   15594:	andeq	r8, r3, r4, lsl #6
   15598:	cmp	r0, #0
   1559c:	bxeq	lr
   155a0:	ldrb	r3, [r0, #16]
   155a4:	cmp	r3, #0
   155a8:	bne	155d8 <__assert_fail@plt+0x2eec>
   155ac:	push	{r4, lr}
   155b0:	mov	r4, r0
   155b4:	ldr	r0, [r0, #156]	; 0x9c
   155b8:	bl	15598 <__assert_fail@plt+0x2eac>
   155bc:	cmp	r0, #0
   155c0:	movne	r0, #1
   155c4:	bne	155d0 <__assert_fail@plt+0x2ee4>
   155c8:	ldr	r0, [r4, #160]	; 0xa0
   155cc:	bl	15598 <__assert_fail@plt+0x2eac>
   155d0:	and	r0, r0, #1
   155d4:	pop	{r4, pc}
   155d8:	mov	r0, #1
   155dc:	and	r0, r0, #1
   155e0:	bx	lr
   155e4:	push	{r4, r5, r6, r7, r8, lr}
   155e8:	ldr	r4, [r0]
   155ec:	cmp	r4, #0
   155f0:	bne	15614 <__assert_fail@plt+0x2f28>
   155f4:	ldr	r1, [pc, #588]	; 15848 <__assert_fail@plt+0x315c>
   155f8:	mov	r2, #5
   155fc:	mov	r0, #0
   15600:	bl	1217c <dcgettext@plt>
   15604:	mov	r2, r0
   15608:	mov	r1, #0
   1560c:	mov	r0, #1
   15610:	bl	122c0 <error@plt>
   15614:	ldr	r3, [r4, #8]
   15618:	mov	r5, r0
   1561c:	mov	r7, r1
   15620:	cmp	r3, #5
   15624:	ldrls	pc, [pc, r3, lsl #2]
   15628:	b	157d4 <__assert_fail@plt+0x30e8>
   1562c:	strdeq	r5, [r1], -r4
   15630:	andeq	r5, r1, ip, asr #13
   15634:	ldrdeq	r5, [r1], -r8
   15638:	andeq	r5, r1, r4, asr #12
   1563c:	andeq	r5, r1, ip, lsr r7
   15640:	andeq	r5, r1, ip, asr r6
   15644:	ldr	r1, [pc, #512]	; 1584c <__assert_fail@plt+0x3160>
   15648:	mov	r2, #5
   1564c:	mov	r0, #0
   15650:	bl	1217c <dcgettext@plt>
   15654:	ldr	r3, [r4, #4]
   15658:	b	156a8 <__assert_fail@plt+0x2fbc>
   1565c:	cmp	r2, #0
   15660:	mov	r6, r2
   15664:	ldreq	r1, [pc, #484]	; 15850 <__assert_fail@plt+0x3164>
   15668:	moveq	r2, #5
   1566c:	beq	1564c <__assert_fail@plt+0x2f60>
   15670:	ldr	r3, [r6, #8]
   15674:	ldrb	r4, [r4, #33]	; 0x21
   15678:	sub	r3, r3, #2
   1567c:	cmp	r3, #1
   15680:	bhi	156b8 <__assert_fail@plt+0x2fcc>
   15684:	cmp	r4, #0
   15688:	moveq	r2, #5
   1568c:	ldreq	r1, [pc, #448]	; 15854 <__assert_fail@plt+0x3168>
   15690:	beq	1569c <__assert_fail@plt+0x2fb0>
   15694:	mov	r2, #5
   15698:	ldr	r1, [pc, #440]	; 15858 <__assert_fail@plt+0x316c>
   1569c:	mov	r0, #0
   156a0:	bl	1217c <dcgettext@plt>
   156a4:	ldr	r3, [r6, #4]
   156a8:	mov	r2, r0
   156ac:	mov	r1, #0
   156b0:	mov	r0, #1
   156b4:	bl	122c0 <error@plt>
   156b8:	cmp	r4, #0
   156bc:	moveq	r2, #5
   156c0:	ldreq	r1, [pc, #404]	; 1585c <__assert_fail@plt+0x3170>
   156c4:	beq	155fc <__assert_fail@plt+0x2f10>
   156c8:	b	15694 <__assert_fail@plt+0x2fa8>
   156cc:	ldr	r3, [r4, #152]	; 0x98
   156d0:	str	r3, [r5]
   156d4:	b	156f0 <__assert_fail@plt+0x3004>
   156d8:	ldr	r3, [r4, #152]	; 0x98
   156dc:	mov	r2, r4
   156e0:	mov	r1, #4
   156e4:	str	r3, [r0]
   156e8:	bl	155e4 <__assert_fail@plt+0x2ef8>
   156ec:	str	r0, [r4, #160]	; 0xa0
   156f0:	ldr	r3, [r5]
   156f4:	cmp	r3, #0
   156f8:	beq	15734 <__assert_fail@plt+0x3048>
   156fc:	ldr	r2, [r3, #12]
   15700:	cmp	r2, r7
   15704:	ble	15734 <__assert_fail@plt+0x3048>
   15708:	ldr	r3, [r3, #8]
   1570c:	cmp	r3, #5
   15710:	beq	155f4 <__assert_fail@plt+0x2f08>
   15714:	ldr	r2, [r5]
   15718:	cmp	r2, #0
   1571c:	beq	1572c <__assert_fail@plt+0x3040>
   15720:	ldr	r3, [r2, #12]
   15724:	cmp	r7, r3
   15728:	blt	157e0 <__assert_fail@plt+0x30f4>
   1572c:	cmp	r4, #0
   15730:	beq	155f4 <__assert_fail@plt+0x2f08>
   15734:	mov	r0, r4
   15738:	pop	{r4, r5, r6, r7, r8, pc}
   1573c:	ldr	r3, [r4, #152]	; 0x98
   15740:	cmp	r3, #0
   15744:	beq	15754 <__assert_fail@plt+0x3068>
   15748:	ldrb	r6, [r3, #33]	; 0x21
   1574c:	cmp	r6, #0
   15750:	beq	15760 <__assert_fail@plt+0x3074>
   15754:	mov	r2, #5
   15758:	ldr	r1, [pc, #256]	; 15860 <__assert_fail@plt+0x3174>
   1575c:	b	1564c <__assert_fail@plt+0x2f60>
   15760:	ldr	r2, [r3, #8]
   15764:	str	r3, [r0]
   15768:	cmp	r2, #5
   1576c:	bne	1579c <__assert_fail@plt+0x30b0>
   15770:	ldrb	r4, [r4, #33]	; 0x21
   15774:	cmp	r4, #0
   15778:	beq	15794 <__assert_fail@plt+0x30a8>
   1577c:	ldr	r1, [pc, #204]	; 15850 <__assert_fail@plt+0x3164>
   15780:	mov	r0, r6
   15784:	bl	1217c <dcgettext@plt>
   15788:	ldr	r3, [r5]
   1578c:	ldr	r3, [r3, #4]
   15790:	b	156a8 <__assert_fail@plt+0x2fbc>
   15794:	ldr	r1, [pc, #200]	; 15864 <__assert_fail@plt+0x3178>
   15798:	b	155fc <__assert_fail@plt+0x2f10>
   1579c:	mov	r2, r4
   157a0:	mov	r1, r6
   157a4:	bl	155e4 <__assert_fail@plt+0x2ef8>
   157a8:	ldr	r3, [r5]
   157ac:	mov	r4, r0
   157b0:	cmp	r3, #0
   157b4:	beq	157c8 <__assert_fail@plt+0x30dc>
   157b8:	ldr	r2, [r3, #8]
   157bc:	cmp	r2, #5
   157c0:	ldreq	r3, [r3, #152]	; 0x98
   157c4:	beq	156d0 <__assert_fail@plt+0x2fe4>
   157c8:	mov	r2, #5
   157cc:	ldr	r1, [pc, #148]	; 15868 <__assert_fail@plt+0x317c>
   157d0:	b	155fc <__assert_fail@plt+0x2f10>
   157d4:	mov	r2, #5
   157d8:	ldr	r1, [pc, #140]	; 1586c <__assert_fail@plt+0x3180>
   157dc:	b	155fc <__assert_fail@plt+0x2f10>
   157e0:	ldr	r3, [r2, #8]
   157e4:	cmp	r3, #5
   157e8:	ldrls	pc, [pc, r3, lsl #2]
   157ec:	b	1582c <__assert_fail@plt+0x3140>
   157f0:	strdeq	r5, [r1], -r4
   157f4:	strdeq	r5, [r1], -r4
   157f8:	strdeq	r5, [r1], -r4
   157fc:	andeq	r5, r1, r8, lsl #16
   15800:	strdeq	r5, [r1], -r4
   15804:	andeq	r5, r1, ip, lsr #14
   15808:	str	r4, [r2, #156]	; 0x9c
   1580c:	mov	r0, r5
   15810:	ldr	r4, [r5]
   15814:	ldr	r3, [r4, #152]	; 0x98
   15818:	ldrsh	r1, [r4, #12]
   1581c:	str	r3, [r5]
   15820:	bl	155e4 <__assert_fail@plt+0x2ef8>
   15824:	str	r0, [r4, #160]	; 0xa0
   15828:	b	15714 <__assert_fail@plt+0x3028>
   1582c:	mov	r2, #5
   15830:	ldr	r1, [pc, #56]	; 15870 <__assert_fail@plt+0x3184>
   15834:	mov	r0, #0
   15838:	bl	1217c <dcgettext@plt>
   1583c:	ldr	r3, [r5]
   15840:	ldr	r3, [r3, #8]
   15844:	b	156a8 <__assert_fail@plt+0x2fbc>
   15848:	andeq	r8, r3, lr, lsr #8
   1584c:	andeq	r8, r3, r1, asr #8
   15850:	muleq	r3, r2, r4
   15854:	ldrdeq	r8, [r3], -fp
   15858:	andeq	r8, r3, r7, lsl #10
   1585c:	andeq	r8, r3, r9, lsr #10
   15860:	andeq	r8, r3, r3, asr r5
   15864:	andeq	r8, r3, r1, asr #11
   15868:	strdeq	r8, [r3], -r8	; <UNPREDICTABLE>
   1586c:	andeq	r8, r3, r9, asr #12
   15870:	andeq	r8, r3, sl, ror #12
   15874:	ldr	r3, [r0]
   15878:	push	{r0, r1, r2, lr}
   1587c:	mov	r2, #4
   15880:	mov	r0, sp
   15884:	str	r3, [sp]
   15888:	ldr	r3, [r1]
   1588c:	add	r1, sp, r2
   15890:	str	r3, [sp, #4]
   15894:	bl	12158 <memcmp@plt>
   15898:	add	sp, sp, #12
   1589c:	pop	{pc}		; (ldr pc, [sp], #4)
   158a0:	cmp	r1, #0
   158a4:	push	{r4, lr}
   158a8:	mov	r4, r0
   158ac:	beq	158e4 <__assert_fail@plt+0x31f8>
   158b0:	ldr	r3, [r0, #8]
   158b4:	cmp	r3, #3
   158b8:	beq	158e4 <__assert_fail@plt+0x31f8>
   158bc:	ldr	r3, [pc, #76]	; 15910 <__assert_fail@plt+0x3224>
   158c0:	movw	r2, #1230	; 0x4ce
   158c4:	ldr	r1, [pc, #72]	; 15914 <__assert_fail@plt+0x3228>
   158c8:	ldr	r0, [pc, #72]	; 15918 <__assert_fail@plt+0x322c>
   158cc:	bl	126ec <__assert_fail@plt>
   158d0:	mov	r1, #0
   158d4:	bl	158a0 <__assert_fail@plt+0x31b4>
   158d8:	ldr	r4, [r4, #160]	; 0xa0
   158dc:	cmp	r4, #0
   158e0:	popeq	{r4, pc}
   158e4:	ldr	r0, [r4, #156]	; 0x9c
   158e8:	cmp	r0, #0
   158ec:	beq	158d8 <__assert_fail@plt+0x31ec>
   158f0:	ldr	r3, [r0, #8]
   158f4:	cmp	r3, #3
   158f8:	beq	158d0 <__assert_fail@plt+0x31e4>
   158fc:	ldr	r3, [pc, #12]	; 15910 <__assert_fail@plt+0x3224>
   15900:	movw	r2, #1235	; 0x4d3
   15904:	ldr	r1, [pc, #8]	; 15914 <__assert_fail@plt+0x3228>
   15908:	ldr	r0, [pc, #12]	; 1591c <__assert_fail@plt+0x3230>
   1590c:	b	158cc <__assert_fail@plt+0x31e0>
   15910:	andeq	r8, r3, ip, asr #6
   15914:	muleq	r3, r0, r6
   15918:	muleq	r3, r7, r6
   1591c:	andeq	r8, r3, sl, lsr #13
   15920:	push	{r4, r5, r6, r7, r8, r9, lr}
   15924:	subs	r4, r0, #0
   15928:	sub	sp, sp, #20
   1592c:	beq	1599c <__assert_fail@plt+0x32b0>
   15930:	ldr	r0, [r4, #160]	; 0xa0
   15934:	bl	15920 <__assert_fail@plt+0x3234>
   15938:	ldr	r0, [r4, #156]	; 0x9c
   1593c:	bl	15920 <__assert_fail@plt+0x3234>
   15940:	ldrb	r3, [r4, #18]
   15944:	cmp	r3, #0
   15948:	movne	r6, #3
   1594c:	bne	15970 <__assert_fail@plt+0x3284>
   15950:	ldrb	r3, [r4, #20]
   15954:	cmp	r3, #0
   15958:	movne	r6, #1
   1595c:	bne	15970 <__assert_fail@plt+0x3284>
   15960:	ldrb	r3, [r4, #19]
   15964:	cmp	r3, #0
   15968:	movne	r6, #2
   1596c:	moveq	r6, #0
   15970:	ldr	r1, [pc, #308]	; 15aac <__assert_fail@plt+0x33c0>
   15974:	ldr	r2, [pc, #308]	; 15ab0 <__assert_fail@plt+0x33c4>
   15978:	ldr	r3, [r4]
   1597c:	cmp	r3, r2
   15980:	cmpne	r3, r1
   15984:	bne	159a4 <__assert_fail@plt+0x32b8>
   15988:	ldrb	r3, [r4, #40]	; 0x28
   1598c:	cmp	r3, #0
   15990:	movne	r3, #7
   15994:	moveq	r3, #8
   15998:	str	r3, [r4, #24]
   1599c:	add	sp, sp, #20
   159a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   159a4:	ldr	r2, [pc, #264]	; 15ab4 <__assert_fail@plt+0x33c8>
   159a8:	cmp	r3, r2
   159ac:	ldreq	r3, [r4, #24]
   159b0:	beq	15a90 <__assert_fail@plt+0x33a4>
   159b4:	ldr	r3, [pc, #252]	; 15ab8 <__assert_fail@plt+0x33cc>
   159b8:	ldr	r2, [r3]
   159bc:	mov	r5, r3
   159c0:	cmp	r2, #0
   159c4:	bne	15a3c <__assert_fail@plt+0x3350>
   159c8:	ldr	r7, [pc, #236]	; 15abc <__assert_fail@plt+0x33d0>
   159cc:	mov	r2, #8
   159d0:	mov	r1, #59	; 0x3b
   159d4:	mov	r8, #1
   159d8:	ldr	r3, [pc, #224]	; 15ac0 <__assert_fail@plt+0x33d4>
   159dc:	ldr	r0, [pc, #216]	; 15abc <__assert_fail@plt+0x33d0>
   159e0:	bl	125f0 <qsort@plt>
   159e4:	add	r9, r7, #8
   159e8:	mov	r1, r7
   159ec:	mov	r0, r9
   159f0:	bl	15874 <__assert_fail@plt+0x3188>
   159f4:	cmp	r0, #0
   159f8:	blt	15a9c <__assert_fail@plt+0x33b0>
   159fc:	mov	r1, r9
   15a00:	mov	r0, r7
   15a04:	bl	15874 <__assert_fail@plt+0x3188>
   15a08:	cmp	r0, #0
   15a0c:	ble	15a24 <__assert_fail@plt+0x3338>
   15a10:	ldr	r3, [pc, #172]	; 15ac4 <__assert_fail@plt+0x33d8>
   15a14:	movw	r2, #1013	; 0x3f5
   15a18:	ldr	r1, [pc, #168]	; 15ac8 <__assert_fail@plt+0x33dc>
   15a1c:	ldr	r0, [pc, #168]	; 15acc <__assert_fail@plt+0x33e0>
   15a20:	bl	126ec <__assert_fail@plt>
   15a24:	add	r8, r8, #1
   15a28:	mov	r7, r9
   15a2c:	cmp	r8, #59	; 0x3b
   15a30:	bne	159e4 <__assert_fail@plt+0x32f8>
   15a34:	mov	r3, #1
   15a38:	str	r3, [r5]
   15a3c:	ldr	r3, [r4]
   15a40:	mov	r2, #59	; 0x3b
   15a44:	ldr	r1, [pc, #112]	; 15abc <__assert_fail@plt+0x33d0>
   15a48:	str	r3, [sp, #8]
   15a4c:	ldr	r3, [pc, #108]	; 15ac0 <__assert_fail@plt+0x33d4>
   15a50:	str	r3, [sp]
   15a54:	mov	r3, #8
   15a58:	add	r0, sp, r3
   15a5c:	bl	12440 <bsearch@plt>
   15a60:	subs	r5, r0, #0
   15a64:	ldrne	r3, [r5, #4]
   15a68:	bne	15a90 <__assert_fail@plt+0x33a4>
   15a6c:	mov	r2, #5
   15a70:	ldr	r1, [pc, #88]	; 15ad0 <__assert_fail@plt+0x33e4>
   15a74:	bl	1217c <dcgettext@plt>
   15a78:	mov	r2, r0
   15a7c:	mov	r1, r5
   15a80:	ldr	r3, [r4, #4]
   15a84:	mov	r0, r5
   15a88:	bl	122c0 <error@plt>
   15a8c:	mov	r3, #10
   15a90:	cmp	r6, r3
   15a94:	movcs	r3, r6
   15a98:	b	15998 <__assert_fail@plt+0x32ac>
   15a9c:	ldr	r2, [pc, #48]	; 15ad4 <__assert_fail@plt+0x33e8>
   15aa0:	mov	r1, #0
   15aa4:	mov	r0, #1
   15aa8:	bl	122c0 <error@plt>
   15aac:	andeq	r3, r1, r4, lsr lr
   15ab0:	andeq	r3, r1, r8, lsr lr
   15ab4:	andeq	r9, r1, ip, lsl #11
   15ab8:	andeq	lr, r4, r4, lsl #11
   15abc:			; <UNDEFINED> instruction: 0x0004e2b0
   15ac0:	andeq	r5, r1, r4, ror r8
   15ac4:	andeq	r8, r3, r0, ror #6
   15ac8:	muleq	r3, r0, r6
   15acc:	andeq	r8, r3, r8, asr #13
   15ad0:	ldrdeq	r8, [r3], -r4
   15ad4:	andeq	r8, r3, r4, asr #14
   15ad8:	push	{r4, r5, r6, lr}
   15adc:	mov	r5, r0
   15ae0:	mov	r0, #176	; 0xb0
   15ae4:	mov	r4, r1
   15ae8:	mov	r6, r2
   15aec:	bl	275e4 <__assert_fail@plt+0x14ef8>
   15af0:	mov	r3, #3
   15af4:	cmp	r4, #2
   15af8:	str	r3, [r0, #8]
   15afc:	mov	r3, #0
   15b00:	str	r4, [r0, #12]
   15b04:	str	r3, [r0, #24]
   15b08:	beq	15b40 <__assert_fail@plt+0x3454>
   15b0c:	cmp	r4, #3
   15b10:	beq	15b7c <__assert_fail@plt+0x3490>
   15b14:	cmp	r4, #1
   15b18:	bne	15b34 <__assert_fail@plt+0x3448>
   15b1c:	ldr	r3, [pc, #112]	; 15b94 <__assert_fail@plt+0x34a8>
   15b20:	str	r3, [r0]
   15b24:	ldr	r3, [pc, #108]	; 15b98 <__assert_fail@plt+0x34ac>
   15b28:	str	r3, [r0, #4]
   15b2c:	mov	r3, #1065353216	; 0x3f800000
   15b30:	str	r3, [r0, #28]
   15b34:	str	r0, [r6]
   15b38:	str	r5, [r0, #160]	; 0xa0
   15b3c:	pop	{r4, r5, r6, pc}
   15b40:	ldr	r3, [pc, #84]	; 15b9c <__assert_fail@plt+0x34b0>
   15b44:	str	r3, [r0]
   15b48:	ldr	r3, [pc, #80]	; 15ba0 <__assert_fail@plt+0x34b4>
   15b4c:	str	r3, [r0, #4]
   15b50:	vldr	s14, [pc, #52]	; 15b8c <__assert_fail@plt+0x34a0>
   15b54:	vldr	s15, [r5, #28]
   15b58:	vcmpe.f32	s15, s14
   15b5c:	vmrs	APSR_nzcv, fpscr
   15b60:	vmovgt.f32	s15, s14
   15b64:	bgt	15b74 <__assert_fail@plt+0x3488>
   15b68:	vcmpe.f32	s15, #0.0
   15b6c:	vmrs	APSR_nzcv, fpscr
   15b70:	vldrmi	s15, [pc, #24]	; 15b90 <__assert_fail@plt+0x34a4>
   15b74:	vstr	s15, [r0, #28]
   15b78:	b	15b34 <__assert_fail@plt+0x3448>
   15b7c:	ldr	r3, [pc, #32]	; 15ba4 <__assert_fail@plt+0x34b8>
   15b80:	str	r3, [r0]
   15b84:	ldr	r3, [pc, #28]	; 15ba8 <__assert_fail@plt+0x34bc>
   15b88:	b	15b4c <__assert_fail@plt+0x3460>
   15b8c:	svccc	0x00800000
   15b90:	andeq	r0, r0, r0
   15b94:	andeq	r3, r1, r8, lsl fp
   15b98:	andeq	r8, r3, r8, ror #14
   15b9c:	strdeq	r3, [r1], -r0
   15ba0:	andeq	r8, r3, sl, ror #14
   15ba4:	andeq	r3, r1, r0, asr #16
   15ba8:	andeq	r8, r3, sp, ror #14
   15bac:	push	{r4, r5, r6, lr}
   15bb0:	mov	r5, r0
   15bb4:	ldr	r0, [r0, #156]	; 0x9c
   15bb8:	cmp	r0, #0
   15bbc:	beq	15bc4 <__assert_fail@plt+0x34d8>
   15bc0:	bl	15bac <__assert_fail@plt+0x34c0>
   15bc4:	mov	r4, r0
   15bc8:	ldr	r0, [r5, #160]	; 0xa0
   15bcc:	cmp	r0, #0
   15bd0:	beq	15bd8 <__assert_fail@plt+0x34ec>
   15bd4:	bl	15bac <__assert_fail@plt+0x34c0>
   15bd8:	ldr	r3, [r5, #24]
   15bdc:	cmp	r4, r3
   15be0:	movcc	r4, r3
   15be4:	cmp	r4, r0
   15be8:	movcs	r0, r4
   15bec:	pop	{r4, r5, r6, pc}
   15bf0:	push	{r4, r5, r6, r7, r8, lr}
   15bf4:	cmp	r1, #0
   15bf8:	moveq	r6, #0
   15bfc:	movne	r6, #16
   15c00:	ldr	r4, [pc, #100]	; 15c6c <__assert_fail@plt+0x3580>
   15c04:	ldr	r3, [r4, #4]
   15c08:	cmp	r3, #0
   15c0c:	movne	r7, r0
   15c10:	movne	r5, #0
   15c14:	bne	15c50 <__assert_fail@plt+0x3564>
   15c18:	mov	r2, r6
   15c1c:	ldr	r1, [pc, #76]	; 15c70 <__assert_fail@plt+0x3584>
   15c20:	bl	122e4 <fnmatch@plt>
   15c24:	clz	r0, r0
   15c28:	lsr	r0, r0, #5
   15c2c:	pop	{r4, r5, r6, r7, r8, pc}
   15c30:	ldr	r3, [r4, #8]
   15c34:	mov	r2, r6
   15c38:	mov	r0, r7
   15c3c:	ldr	r1, [r3, r5, lsl #2]
   15c40:	bl	122e4 <fnmatch@plt>
   15c44:	cmp	r0, #0
   15c48:	beq	15c64 <__assert_fail@plt+0x3578>
   15c4c:	add	r5, r5, #1
   15c50:	ldr	r3, [r4, #4]
   15c54:	cmp	r3, r5
   15c58:	bhi	15c30 <__assert_fail@plt+0x3544>
   15c5c:	mov	r0, #0
   15c60:	pop	{r4, r5, r6, r7, r8, pc}
   15c64:	mov	r0, #1
   15c68:	pop	{r4, r5, r6, r7, r8, pc}
   15c6c:	andeq	lr, r4, r4, lsl #11
   15c70:	ldrdeq	r8, [r3], -r9
   15c74:	ldr	r2, [r1, #4]
   15c78:	ldr	r3, [r1, #36]	; 0x24
   15c7c:	cmp	r3, #0
   15c80:	beq	15c8c <__assert_fail@plt+0x35a0>
   15c84:	ldr	r1, [pc, #12]	; 15c98 <__assert_fail@plt+0x35ac>
   15c88:	b	123f8 <fprintf@plt>
   15c8c:	mov	r1, r0
   15c90:	mov	r0, r2
   15c94:	b	12680 <fputs@plt>
   15c98:	andeq	r8, r3, r0, ror r7
   15c9c:	ldr	r3, [pc, #4]	; 15ca8 <__assert_fail@plt+0x35bc>
   15ca0:	ldr	r0, [r3, #12]
   15ca4:	bx	lr
   15ca8:	andeq	lr, r4, r4, lsl #11
   15cac:	push	{r4, lr}
   15cb0:	subs	r4, r0, #0
   15cb4:	bne	15ccc <__assert_fail@plt+0x35e0>
   15cb8:	ldr	r3, [pc, #524]	; 15ecc <__assert_fail@plt+0x37e0>
   15cbc:	movw	r2, #1156	; 0x484
   15cc0:	ldr	r1, [pc, #520]	; 15ed0 <__assert_fail@plt+0x37e4>
   15cc4:	ldr	r0, [pc, #520]	; 15ed4 <__assert_fail@plt+0x37e8>
   15cc8:	bl	126ec <__assert_fail@plt>
   15ccc:	ldr	r0, [r4, #160]	; 0xa0
   15cd0:	cmp	r0, #0
   15cd4:	beq	15cdc <__assert_fail@plt+0x35f0>
   15cd8:	bl	15cac <__assert_fail@plt+0x35c0>
   15cdc:	ldr	r0, [r4, #156]	; 0x9c
   15ce0:	cmp	r0, #0
   15ce4:	beq	15cec <__assert_fail@plt+0x3600>
   15ce8:	bl	15cac <__assert_fail@plt+0x35c0>
   15cec:	ldr	r3, [r4, #8]
   15cf0:	cmp	r3, #5
   15cf4:	bne	15d0c <__assert_fail@plt+0x3620>
   15cf8:	ldr	r3, [pc, #460]	; 15ecc <__assert_fail@plt+0x37e0>
   15cfc:	movw	r2, #1163	; 0x48b
   15d00:	ldr	r1, [pc, #456]	; 15ed0 <__assert_fail@plt+0x37e4>
   15d04:	ldr	r0, [pc, #460]	; 15ed8 <__assert_fail@plt+0x37ec>
   15d08:	b	15cc8 <__assert_fail@plt+0x35dc>
   15d0c:	cmp	r3, #4
   15d10:	bne	15d28 <__assert_fail@plt+0x363c>
   15d14:	ldr	r3, [pc, #432]	; 15ecc <__assert_fail@plt+0x37e0>
   15d18:	movw	r2, #1164	; 0x48c
   15d1c:	ldr	r1, [pc, #428]	; 15ed0 <__assert_fail@plt+0x37e4>
   15d20:	ldr	r0, [pc, #436]	; 15edc <__assert_fail@plt+0x37f0>
   15d24:	b	15cc8 <__assert_fail@plt+0x35dc>
   15d28:	cmp	r3, #3
   15d2c:	ldrls	pc, [pc, r3, lsl #2]
   15d30:	b	15eb8 <__assert_fail@plt+0x37cc>
   15d34:	andeq	r5, r1, r4, asr #26
   15d38:	andeq	r5, r1, r4, ror sp
   15d3c:			; <UNDEFINED> instruction: 0x00015db4
   15d40:	andeq	r5, r1, r4, lsl #28
   15d44:	ldr	r3, [r4, #160]	; 0xa0
   15d48:	cmp	r3, #0
   15d4c:	ldrne	r3, [pc, #376]	; 15ecc <__assert_fail@plt+0x37e0>
   15d50:	movwne	r2, #1169	; 0x491
   15d54:	bne	15d88 <__assert_fail@plt+0x369c>
   15d58:	ldr	r3, [r4, #156]	; 0x9c
   15d5c:	cmp	r3, #0
   15d60:	ldrne	r3, [pc, #356]	; 15ecc <__assert_fail@plt+0x37e0>
   15d64:	movwne	r2, #1170	; 0x492
   15d68:	bne	15da8 <__assert_fail@plt+0x36bc>
   15d6c:	vldr	s0, [r4, #28]
   15d70:	pop	{r4, pc}
   15d74:	ldr	r3, [r4, #160]	; 0xa0
   15d78:	cmp	r3, #0
   15d7c:	beq	15d94 <__assert_fail@plt+0x36a8>
   15d80:	ldr	r3, [pc, #324]	; 15ecc <__assert_fail@plt+0x37e0>
   15d84:	movw	r2, #1174	; 0x496
   15d88:	ldr	r1, [pc, #320]	; 15ed0 <__assert_fail@plt+0x37e4>
   15d8c:	ldr	r0, [pc, #332]	; 15ee0 <__assert_fail@plt+0x37f4>
   15d90:	b	15cc8 <__assert_fail@plt+0x35dc>
   15d94:	ldr	r3, [r4, #156]	; 0x9c
   15d98:	cmp	r3, #0
   15d9c:	ldrne	r3, [pc, #296]	; 15ecc <__assert_fail@plt+0x37e0>
   15da0:	movwne	r2, #1175	; 0x497
   15da4:	beq	15d6c <__assert_fail@plt+0x3680>
   15da8:	ldr	r1, [pc, #288]	; 15ed0 <__assert_fail@plt+0x37e4>
   15dac:	ldr	r0, [pc, #304]	; 15ee4 <__assert_fail@plt+0x37f8>
   15db0:	b	15cc8 <__assert_fail@plt+0x35dc>
   15db4:	ldr	r3, [pc, #300]	; 15ee8 <__assert_fail@plt+0x37fc>
   15db8:	ldr	r2, [r4]
   15dbc:	cmp	r2, r3
   15dc0:	beq	15dd8 <__assert_fail@plt+0x36ec>
   15dc4:	ldr	r3, [pc, #256]	; 15ecc <__assert_fail@plt+0x37e0>
   15dc8:	movw	r2, #1180	; 0x49c
   15dcc:	ldr	r1, [pc, #252]	; 15ed0 <__assert_fail@plt+0x37e4>
   15dd0:	ldr	r0, [pc, #276]	; 15eec <__assert_fail@plt+0x3800>
   15dd4:	b	15cc8 <__assert_fail@plt+0x35dc>
   15dd8:	ldr	r3, [r4, #156]	; 0x9c
   15ddc:	cmp	r3, #0
   15de0:	ldrne	r3, [pc, #228]	; 15ecc <__assert_fail@plt+0x37e0>
   15de4:	movwne	r2, #1181	; 0x49d
   15de8:	bne	15da8 <__assert_fail@plt+0x36bc>
   15dec:	ldr	r3, [r4, #160]	; 0xa0
   15df0:	vldr	s0, [pc, #204]	; 15ec4 <__assert_fail@plt+0x37d8>
   15df4:	vldr	s15, [r3, #28]
   15df8:	vsub.f32	s0, s0, s15
   15dfc:	vstr	s0, [r4, #28]
   15e00:	pop	{r4, pc}
   15e04:	ldr	r2, [pc, #228]	; 15ef0 <__assert_fail@plt+0x3804>
   15e08:	ldr	r3, [r4]
   15e0c:	vldr	s15, [pc, #176]	; 15ec4 <__assert_fail@plt+0x37d8>
   15e10:	cmp	r3, r2
   15e14:	bne	15e5c <__assert_fail@plt+0x3770>
   15e18:	ldr	r3, [r4, #160]	; 0xa0
   15e1c:	cmp	r3, #0
   15e20:	vldrne	s0, [r3, #28]
   15e24:	vmoveq.f32	s0, s15
   15e28:	ldr	r3, [r4, #156]	; 0x9c
   15e2c:	cmp	r3, #0
   15e30:	vldrne	s14, [r3, #28]
   15e34:	vldreq	s14, [pc, #136]	; 15ec4 <__assert_fail@plt+0x37d8>
   15e38:	vmul.f32	s0, s0, s14
   15e3c:	vcmpe.f32	s0, s15
   15e40:	vmrs	APSR_nzcv, fpscr
   15e44:	vldrgt	s0, [pc, #120]	; 15ec4 <__assert_fail@plt+0x37d8>
   15e48:	bgt	15dfc <__assert_fail@plt+0x3710>
   15e4c:	vcmpe.f32	s0, #0.0
   15e50:	vmrs	APSR_nzcv, fpscr
   15e54:	vldrmi	s0, [pc, #108]	; 15ec8 <__assert_fail@plt+0x37dc>
   15e58:	b	15dfc <__assert_fail@plt+0x3710>
   15e5c:	ldr	r2, [pc, #144]	; 15ef4 <__assert_fail@plt+0x3808>
   15e60:	cmp	r3, r2
   15e64:	beq	15eb0 <__assert_fail@plt+0x37c4>
   15e68:	ldr	r2, [pc, #136]	; 15ef8 <__assert_fail@plt+0x380c>
   15e6c:	cmp	r3, r2
   15e70:	bne	15e9c <__assert_fail@plt+0x37b0>
   15e74:	ldr	r3, [r4, #160]	; 0xa0
   15e78:	cmp	r3, #0
   15e7c:	vldrne	s14, [r3, #28]
   15e80:	vmoveq.f32	s14, s15
   15e84:	ldr	r3, [r4, #156]	; 0x9c
   15e88:	cmp	r3, #0
   15e8c:	vldrne	s0, [r3, #28]
   15e90:	vldreq	s0, [pc, #44]	; 15ec4 <__assert_fail@plt+0x37d8>
   15e94:	vadd.f32	s0, s0, s14
   15e98:	b	15e3c <__assert_fail@plt+0x3750>
   15e9c:	ldr	r3, [pc, #40]	; 15ecc <__assert_fail@plt+0x37e0>
   15ea0:	movw	r2, #1204	; 0x4b4
   15ea4:	ldr	r1, [pc, #36]	; 15ed0 <__assert_fail@plt+0x37e4>
   15ea8:	ldr	r0, [pc, #76]	; 15efc <__assert_fail@plt+0x3810>
   15eac:	b	15cc8 <__assert_fail@plt+0x35dc>
   15eb0:	vmov.f32	s0, s15
   15eb4:	b	15dfc <__assert_fail@plt+0x3710>
   15eb8:	ldr	r3, [pc, #12]	; 15ecc <__assert_fail@plt+0x37e0>
   15ebc:	mov	r2, #1216	; 0x4c0
   15ec0:	b	15ea4 <__assert_fail@plt+0x37b8>
   15ec4:	svccc	0x00800000
   15ec8:	andeq	r0, r0, r0
   15ecc:	andeq	r8, r3, sp, ror #6
   15ed0:	muleq	r3, r0, r6
   15ed4:	andeq	r8, r3, r6, ror r7
   15ed8:	andeq	r8, r3, r0, lsl #15
   15edc:	muleq	r3, r9, r7
   15ee0:			; <UNDEFINED> instruction: 0x000387b1
   15ee4:	andeq	r8, r3, r7, asr #15
   15ee8:	andeq	r4, r1, ip, ror #3
   15eec:	ldrdeq	r8, [r3], -ip
   15ef0:	andeq	r3, r1, r0, asr #16
   15ef4:	andeq	r3, r1, r8, lsl fp
   15ef8:	strdeq	r3, [r1], -r0
   15efc:	ldrdeq	r8, [r3], -r2
   15f00:	ldr	r3, [r0]
   15f04:	push	{r4, lr}
   15f08:	cmp	r3, #0
   15f0c:	bne	15f24 <__assert_fail@plt+0x3838>
   15f10:	ldr	r3, [pc, #152]	; 15fb0 <__assert_fail@plt+0x38c4>
   15f14:	movw	r2, #1485	; 0x5cd
   15f18:	ldr	r1, [pc, #148]	; 15fb4 <__assert_fail@plt+0x38c8>
   15f1c:	ldr	r0, [pc, #148]	; 15fb8 <__assert_fail@plt+0x38cc>
   15f20:	bl	126ec <__assert_fail@plt>
   15f24:	cmp	r3, #2
   15f28:	bne	15f40 <__assert_fail@plt+0x3854>
   15f2c:	ldr	r3, [pc, #124]	; 15fb0 <__assert_fail@plt+0x38c4>
   15f30:	movw	r2, #1486	; 0x5ce
   15f34:	ldr	r1, [pc, #120]	; 15fb4 <__assert_fail@plt+0x38c8>
   15f38:	ldr	r0, [pc, #124]	; 15fbc <__assert_fail@plt+0x38d0>
   15f3c:	b	15f20 <__assert_fail@plt+0x3834>
   15f40:	mov	r4, r0
   15f44:	mov	r0, #176	; 0xb0
   15f48:	bl	275e4 <__assert_fail@plt+0x14ef8>
   15f4c:	ldr	r3, [pc, #108]	; 15fc0 <__assert_fail@plt+0x38d4>
   15f50:	ldr	r2, [r3, #16]
   15f54:	cmp	r2, #0
   15f58:	ldrne	r2, [r3, #20]
   15f5c:	streq	r0, [r3, #16]
   15f60:	str	r0, [r3, #20]
   15f64:	mov	r3, #0
   15f68:	strne	r0, [r2, #152]	; 0x98
   15f6c:	movw	r2, #257	; 0x101
   15f70:	str	r3, [r0, #8]
   15f74:	str	r3, [r0, #12]
   15f78:	strh	r2, [r0, #18]
   15f7c:	mov	r2, #10
   15f80:	str	r2, [r0, #24]
   15f84:	ldr	r2, [pc, #56]	; 15fc4 <__assert_fail@plt+0x38d8>
   15f88:	str	r3, [r0, #164]	; 0xa4
   15f8c:	str	r3, [r0, #168]	; 0xa8
   15f90:	str	r4, [r0, #172]	; 0xac
   15f94:	str	r2, [r0, #36]	; 0x24
   15f98:	ldr	r2, [pc, #40]	; 15fc8 <__assert_fail@plt+0x38dc>
   15f9c:	ldrb	r2, [r2, #15]
   15fa0:	strb	r2, [r0, #32]
   15fa4:	mov	r2, #1065353216	; 0x3f800000
   15fa8:	str	r2, [r0, #28]
   15fac:	pop	{r4, pc}
   15fb0:	andeq	r8, r3, r5, lsl #7
   15fb4:	muleq	r3, r0, r6
   15fb8:	andeq	r8, r3, r1, asr r1
   15fbc:	andeq	r8, r3, r5, ror r1
   15fc0:	andeq	lr, r4, r4, lsl #11
   15fc4:	strdeq	r8, [r3], -r5
   15fc8:	andeq	lr, r4, r4, lsl #29
   15fcc:	push	{r4, lr}
   15fd0:	bl	15f00 <__assert_fail@plt+0x3814>
   15fd4:	cmp	r0, #0
   15fd8:	movne	r3, #0
   15fdc:	strne	r3, [r0, #36]	; 0x24
   15fe0:	pop	{r4, pc}
   15fe4:	push	{r4, r5, r6, lr}
   15fe8:	mov	r5, r0
   15fec:	mov	r6, r1
   15ff0:	ldr	r4, [pc, #196]	; 160bc <__assert_fail@plt+0x39d0>
   15ff4:	ldr	r3, [r4, #24]
   15ff8:	cmp	r3, #0
   15ffc:	bne	1600c <__assert_fail@plt+0x3920>
   16000:	ldr	r0, [pc, #184]	; 160c0 <__assert_fail@plt+0x39d4>
   16004:	bl	1d3e8 <__assert_fail@plt+0xacfc>
   16008:	str	r0, [r4, #24]
   1600c:	ldr	r0, [r4, #24]
   16010:	cmp	r0, #0
   16014:	bne	1602c <__assert_fail@plt+0x3940>
   16018:	ldr	r3, [pc, #164]	; 160c4 <__assert_fail@plt+0x39d8>
   1601c:	movw	r2, #1528	; 0x5f8
   16020:	ldr	r1, [pc, #160]	; 160c8 <__assert_fail@plt+0x39dc>
   16024:	ldr	r0, [pc, #160]	; 160cc <__assert_fail@plt+0x39e0>
   16028:	bl	126ec <__assert_fail@plt>
   1602c:	ldr	r3, [r4, #20]
   16030:	cmp	r3, #0
   16034:	beq	16088 <__assert_fail@plt+0x399c>
   16038:	ldr	r4, [r3, #8]
   1603c:	cmp	r4, #1
   16040:	beq	16054 <__assert_fail@plt+0x3968>
   16044:	cmp	r4, #0
   16048:	beq	1609c <__assert_fail@plt+0x39b0>
   1604c:	cmp	r4, #5
   16050:	bne	16088 <__assert_fail@plt+0x399c>
   16054:	bl	15fcc <__assert_fail@plt+0x38e0>
   16058:	ldr	r3, [pc, #112]	; 160d0 <__assert_fail@plt+0x39e4>
   1605c:	mov	r2, #3
   16060:	str	r3, [r0]
   16064:	ldr	r3, [pc, #104]	; 160d4 <__assert_fail@plt+0x39e8>
   16068:	str	r2, [r0, #8]
   1606c:	str	r2, [r0, #12]
   16070:	str	r3, [r0, #4]
   16074:	mov	r3, #0
   16078:	str	r3, [r0, #16]
   1607c:	strb	r3, [r0, #20]
   16080:	str	r3, [r0, #36]	; 0x24
   16084:	str	r3, [r0, #40]	; 0x28
   16088:	mov	r0, r5
   1608c:	bl	15f00 <__assert_fail@plt+0x3814>
   16090:	str	r6, [r0, #36]	; 0x24
   16094:	str	r5, [r0, #172]	; 0xac
   16098:	pop	{r4, r5, r6, pc}
   1609c:	mov	r2, #5
   160a0:	ldr	r1, [pc, #48]	; 160d8 <__assert_fail@plt+0x39ec>
   160a4:	mov	r0, r4
   160a8:	bl	1217c <dcgettext@plt>
   160ac:	mov	r2, r0
   160b0:	mov	r1, r4
   160b4:	mov	r0, #1
   160b8:	bl	122c0 <error@plt>
   160bc:	andeq	lr, r4, r4, lsl #11
   160c0:	andeq	r8, r3, r4, lsl r8
   160c4:	muleq	r3, r2, r3
   160c8:	muleq	r3, r0, r6
   160cc:	andeq	r8, r3, r8, lsl r8
   160d0:	andeq	r3, r1, r0, asr #16
   160d4:	andeq	r8, r3, sp, ror #14
   160d8:	andeq	r8, r3, sl, lsr #16
   160dc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   160e0:	mov	r4, r0
   160e4:	mov	r5, r1
   160e8:	mov	r6, r2
   160ec:	ldr	r8, [pc, #632]	; 1636c <__assert_fail@plt+0x3c80>
   160f0:	ldr	r7, [pc, #632]	; 16370 <__assert_fail@plt+0x3c84>
   160f4:	add	r9, r8, #92	; 0x5c
   160f8:	cmp	r5, #0
   160fc:	beq	16364 <__assert_fail@plt+0x3c78>
   16100:	mov	sl, #0
   16104:	cmp	sl, r6
   16108:	mov	r1, r4
   1610c:	blt	162a8 <__assert_fail@plt+0x3bbc>
   16110:	ldr	r0, [pc, #604]	; 16374 <__assert_fail@plt+0x3c88>
   16114:	bl	12680 <fputs@plt>
   16118:	mov	r0, r4
   1611c:	mov	r1, r5
   16120:	bl	15c74 <__assert_fail@plt+0x3588>
   16124:	ldrsh	r0, [r5, #8]
   16128:	mov	r2, #0
   1612c:	lsl	r3, r2, #3
   16130:	ldrsh	r1, [r3, r9]
   16134:	cmn	r1, #1
   16138:	cmpne	r0, r1
   1613c:	bne	162b8 <__assert_fail@plt+0x3bcc>
   16140:	add	r3, r8, r3
   16144:	ldrsh	ip, [r5, #12]
   16148:	mov	r1, #0
   1614c:	ldr	lr, [pc, #548]	; 16378 <__assert_fail@plt+0x3c8c>
   16150:	ldr	r2, [r3, #96]	; 0x60
   16154:	lsl	r3, r1, #3
   16158:	ldrsh	r0, [r3, lr]
   1615c:	cmn	r0, #1
   16160:	cmpne	ip, r0
   16164:	bne	162c0 <__assert_fail@plt+0x3bd4>
   16168:	add	r3, r8, r3
   1616c:	ldr	r1, [pc, #520]	; 1637c <__assert_fail@plt+0x3c90>
   16170:	mov	r0, r4
   16174:	ldr	r3, [r3, #152]	; 0x98
   16178:	bl	123f8 <fprintf@plt>
   1617c:	ldr	r2, [pc, #508]	; 16380 <__assert_fail@plt+0x3c94>
   16180:	mov	r3, #0
   16184:	ldr	r1, [r5, #24]
   16188:	add	r0, r2, #472	; 0x1d8
   1618c:	ldr	ip, [r0, r3, lsl #3]
   16190:	cmp	r1, ip
   16194:	bne	162c8 <__assert_fail@plt+0x3bdc>
   16198:	add	r3, r2, r3, lsl #3
   1619c:	ldr	r2, [r3, #476]	; 0x1dc
   161a0:	vldr	s14, [r5, #28]
   161a4:	ldrb	r0, [r5, #16]
   161a8:	ldr	r1, [pc, #468]	; 16384 <__assert_fail@plt+0x3c98>
   161ac:	vcvt.f64.f32	d7, s14
   161b0:	ldr	r3, [pc, #464]	; 16388 <__assert_fail@plt+0x3c9c>
   161b4:	cmp	r0, #0
   161b8:	mov	r0, r4
   161bc:	moveq	r3, r1
   161c0:	ldr	r1, [pc, #452]	; 1638c <__assert_fail@plt+0x3ca0>
   161c4:	vstr	d7, [sp]
   161c8:	str	r3, [sp, #8]
   161cc:	bl	123f8 <fprintf@plt>
   161d0:	ldrh	r3, [r5, #18]
   161d4:	cmp	r3, #0
   161d8:	bne	161e8 <__assert_fail@plt+0x3afc>
   161dc:	ldrb	r3, [r5, #20]
   161e0:	cmp	r3, #0
   161e4:	beq	16264 <__assert_fail@plt+0x3b78>
   161e8:	mov	r1, r4
   161ec:	ldr	r0, [pc, #412]	; 16390 <__assert_fail@plt+0x3ca4>
   161f0:	bl	12680 <fputs@plt>
   161f4:	ldrb	r3, [r5, #18]
   161f8:	cmp	r3, #0
   161fc:	beq	16210 <__assert_fail@plt+0x3b24>
   16200:	mov	r1, r4
   16204:	ldr	r0, [pc, #392]	; 16394 <__assert_fail@plt+0x3ca8>
   16208:	bl	12680 <fputs@plt>
   1620c:	mov	r3, #1
   16210:	ldrb	r2, [r5, #20]
   16214:	cmp	r2, #0
   16218:	beq	1623c <__assert_fail@plt+0x3b50>
   1621c:	ldr	r1, [pc, #372]	; 16398 <__assert_fail@plt+0x3cac>
   16220:	cmp	r3, #0
   16224:	mov	r0, r4
   16228:	ldr	r2, [pc, #344]	; 16388 <__assert_fail@plt+0x3c9c>
   1622c:	movne	r2, r1
   16230:	ldr	r1, [pc, #356]	; 1639c <__assert_fail@plt+0x3cb0>
   16234:	bl	123f8 <fprintf@plt>
   16238:	mov	r3, #1
   1623c:	ldrb	r2, [r5, #19]
   16240:	cmp	r2, #0
   16244:	beq	16264 <__assert_fail@plt+0x3b78>
   16248:	ldr	r1, [pc, #328]	; 16398 <__assert_fail@plt+0x3cac>
   1624c:	cmp	r3, #0
   16250:	mov	r0, r4
   16254:	ldr	r2, [pc, #300]	; 16388 <__assert_fail@plt+0x3c9c>
   16258:	movne	r2, r1
   1625c:	ldr	r1, [pc, #316]	; 163a0 <__assert_fail@plt+0x3cb4>
   16260:	bl	123f8 <fprintf@plt>
   16264:	mov	r1, r4
   16268:	mov	r0, #10
   1626c:	mov	sl, #0
   16270:	bl	1256c <fputc@plt>
   16274:	cmp	sl, r6
   16278:	blt	162dc <__assert_fail@plt+0x3bf0>
   1627c:	ldr	r3, [r5, #156]	; 0x9c
   16280:	cmp	r3, #0
   16284:	bne	162f0 <__assert_fail@plt+0x3c04>
   16288:	ldr	r3, [r5, #160]	; 0xa0
   1628c:	mov	r1, r4
   16290:	cmp	r3, #0
   16294:	bne	1633c <__assert_fail@plt+0x3c50>
   16298:	ldr	r0, [pc, #260]	; 163a4 <__assert_fail@plt+0x3cb8>
   1629c:	add	sp, sp, #16
   162a0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   162a4:	b	12680 <fputs@plt>
   162a8:	mov	r0, r7
   162ac:	add	sl, sl, #1
   162b0:	bl	12680 <fputs@plt>
   162b4:	b	16104 <__assert_fail@plt+0x3a18>
   162b8:	add	r2, r2, #1
   162bc:	b	1612c <__assert_fail@plt+0x3a40>
   162c0:	add	r1, r1, #1
   162c4:	b	16154 <__assert_fail@plt+0x3a68>
   162c8:	add	r3, r3, #1
   162cc:	cmp	r3, #11
   162d0:	bne	1618c <__assert_fail@plt+0x3aa0>
   162d4:	ldr	r2, [pc, #204]	; 163a8 <__assert_fail@plt+0x3cbc>
   162d8:	b	161a0 <__assert_fail@plt+0x3ab4>
   162dc:	mov	r1, r4
   162e0:	mov	r0, r7
   162e4:	bl	12680 <fputs@plt>
   162e8:	add	sl, sl, #1
   162ec:	b	16274 <__assert_fail@plt+0x3b88>
   162f0:	mov	r1, r4
   162f4:	ldr	r0, [pc, #176]	; 163ac <__assert_fail@plt+0x3cc0>
   162f8:	bl	12680 <fputs@plt>
   162fc:	add	r2, r6, #1
   16300:	mov	r0, r4
   16304:	ldr	r1, [r5, #156]	; 0x9c
   16308:	bl	160dc <__assert_fail@plt+0x39f0>
   1630c:	mov	sl, #0
   16310:	cmp	sl, r6
   16314:	blt	16348 <__assert_fail@plt+0x3c5c>
   16318:	ldr	r3, [r5, #160]	; 0xa0
   1631c:	mov	r1, r4
   16320:	cmp	r3, #0
   16324:	beq	1635c <__assert_fail@plt+0x3c70>
   16328:	ldr	r0, [pc, #128]	; 163b0 <__assert_fail@plt+0x3cc4>
   1632c:	add	r6, r6, #1
   16330:	bl	12680 <fputs@plt>
   16334:	ldr	r5, [r5, #160]	; 0xa0
   16338:	b	160f8 <__assert_fail@plt+0x3a0c>
   1633c:	ldr	r0, [pc, #112]	; 163b4 <__assert_fail@plt+0x3cc8>
   16340:	bl	12680 <fputs@plt>
   16344:	b	1630c <__assert_fail@plt+0x3c20>
   16348:	mov	r1, r4
   1634c:	mov	r0, r7
   16350:	bl	12680 <fputs@plt>
   16354:	add	sl, sl, #1
   16358:	b	16310 <__assert_fail@plt+0x3c24>
   1635c:	ldr	r0, [pc, #84]	; 163b8 <__assert_fail@plt+0x3ccc>
   16360:	b	1629c <__assert_fail@plt+0x3bb0>
   16364:	add	sp, sp, #16
   16368:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1636c:	andeq	r8, r3, ip, asr #6
   16370:	andeq	r8, r3, r0, ror #16
   16374:	andeq	r8, r3, r5, ror #16
   16378:	andeq	r8, r3, r0, ror #7
   1637c:	andeq	r8, r3, ip, ror #16
   16380:			; <UNDEFINED> instruction: 0x0004e2b0
   16384:	andeq	r8, r3, ip, asr r8
   16388:	andeq	r9, r3, r7, ror r5
   1638c:	andeq	r8, r3, lr, ror r8
   16390:	andeq	r8, r3, lr, lsr #17
   16394:	muleq	r3, r1, fp
   16398:	andeq	r8, r3, r8, ror #14
   1639c:			; <UNDEFINED> instruction: 0x000388b5
   163a0:			; <UNDEFINED> instruction: 0x000388bd
   163a4:	andeq	r8, r3, r4, asr #17
   163a8:	andeq	r8, r3, r4, asr r8
   163ac:	ldrdeq	r8, [r3], -r2
   163b0:	andeq	r8, r3, r3, ror #17
   163b4:	ldrdeq	r8, [r3], -r9
   163b8:	andeq	r8, r3, fp, ror #17
   163bc:	ldr	r3, [r0]
   163c0:	cmp	r3, #0
   163c4:	bxeq	lr
   163c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163cc:	mov	r8, r1
   163d0:	mov	r4, r0
   163d4:	ldr	r7, [pc, #324]	; 16520 <__assert_fail@plt+0x3e34>
   163d8:	ldr	r3, [r7, #44]	; 0x2c
   163dc:	tst	r3, #8
   163e0:	beq	16408 <__assert_fail@plt+0x3d1c>
   163e4:	ldr	r5, [pc, #312]	; 16524 <__assert_fail@plt+0x3e38>
   163e8:	ldr	r2, [pc, #312]	; 16528 <__assert_fail@plt+0x3e3c>
   163ec:	ldr	r1, [pc, #312]	; 1652c <__assert_fail@plt+0x3e40>
   163f0:	ldr	r0, [r5]
   163f4:	bl	123f8 <fprintf@plt>
   163f8:	mov	r2, #2
   163fc:	ldr	r1, [r4]
   16400:	ldr	r0, [r5]
   16404:	bl	160dc <__assert_fail@plt+0x39f0>
   16408:	mov	r5, #0
   1640c:	ldr	r0, [r4]
   16410:	bl	15cac <__assert_fail@plt+0x35c0>
   16414:	mov	r6, r5
   16418:	mov	lr, r5
   1641c:	ldr	r3, [r4]
   16420:	cmp	r3, #0
   16424:	bne	1647c <__assert_fail@plt+0x3d90>
   16428:	ldr	r3, [r7, #44]	; 0x2c
   1642c:	tst	r3, #8
   16430:	beq	16458 <__assert_fail@plt+0x3d6c>
   16434:	ldr	r7, [pc, #232]	; 16524 <__assert_fail@plt+0x3e38>
   16438:	ldr	r2, [pc, #240]	; 16530 <__assert_fail@plt+0x3e44>
   1643c:	ldr	r1, [pc, #232]	; 1652c <__assert_fail@plt+0x3e40>
   16440:	ldr	r0, [r7]
   16444:	bl	123f8 <fprintf@plt>
   16448:	mov	r2, #2
   1644c:	mov	r1, r6
   16450:	ldr	r0, [r7]
   16454:	bl	160dc <__assert_fail@plt+0x39f0>
   16458:	mov	r0, r6
   1645c:	bl	15cac <__assert_fail@plt+0x35c0>
   16460:	ldr	r3, [r8]
   16464:	str	r3, [r5, #156]	; 0x9c
   16468:	mov	r3, #0
   1646c:	str	r6, [r8]
   16470:	str	r3, [r4]
   16474:	str	r3, [r4, #4]
   16478:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1647c:	ldr	r2, [r3, #156]	; 0x9c
   16480:	str	r2, [r4]
   16484:	mov	r2, r6
   16488:	str	lr, [r3, #156]	; 0x9c
   1648c:	cmp	r2, #0
   16490:	bne	164a4 <__assert_fail@plt+0x3db8>
   16494:	cmp	r5, #0
   16498:	str	r6, [r3, #156]	; 0x9c
   1649c:	moveq	r5, r3
   164a0:	b	16500 <__assert_fail@plt+0x3e14>
   164a4:	ldr	ip, [r2, #160]	; 0xa0
   164a8:	ldr	r0, [r3, #160]	; 0xa0
   164ac:	ldr	r9, [ip, #24]
   164b0:	ldr	r1, [r0, #24]
   164b4:	cmp	r9, r1
   164b8:	ldr	r1, [r2, #156]	; 0x9c
   164bc:	bne	16518 <__assert_fail@plt+0x3e2c>
   164c0:	vldr	s15, [r0, #28]
   164c4:	vldr	s14, [ip, #28]
   164c8:	ldr	r9, [r2, #12]
   164cc:	vcmp.f32	s14, s15
   164d0:	vmrs	APSR_nzcv, fpscr
   164d4:	beq	164ec <__assert_fail@plt+0x3e00>
   164d8:	cmp	r9, #2
   164dc:	vcmpe.f32	s14, s15
   164e0:	beq	16508 <__assert_fail@plt+0x3e1c>
   164e4:	vmrs	APSR_nzcv, fpscr
   164e8:	bmi	16510 <__assert_fail@plt+0x3e24>
   164ec:	cmp	r1, #0
   164f0:	str	r1, [r3, #156]	; 0x9c
   164f4:	moveq	r5, r3
   164f8:	str	r3, [r2, #156]	; 0x9c
   164fc:	mov	r3, r6
   16500:	mov	r6, r3
   16504:	b	1641c <__assert_fail@plt+0x3d30>
   16508:	vmrs	APSR_nzcv, fpscr
   1650c:	bmi	164ec <__assert_fail@plt+0x3e00>
   16510:	mov	r2, r1
   16514:	b	1648c <__assert_fail@plt+0x3da0>
   16518:	bcs	164ec <__assert_fail@plt+0x3e00>
   1651c:	b	16510 <__assert_fail@plt+0x3e24>
   16520:	andeq	lr, r4, r4, lsl #29
   16524:	andeq	lr, r4, r0, ror #10
   16528:	strdeq	r8, [r3], -r6
   1652c:	andeq	r8, r3, r1, lsl r9
   16530:	andeq	r8, r3, r6, lsl r9
   16534:	push	{r4, r5, r6, r7, r8, lr}
   16538:	mov	r6, r3
   1653c:	mov	r7, r2
   16540:	mov	r4, r0
   16544:	mov	r0, r1
   16548:	mov	r1, r6
   1654c:	ldr	r3, [pc, #60]	; 16590 <__assert_fail@plt+0x3ea4>
   16550:	ldr	r5, [pc, #60]	; 16594 <__assert_fail@plt+0x3ea8>
   16554:	str	r3, [r5, #28]
   16558:	bl	163bc <__assert_fail@plt+0x3cd0>
   1655c:	mov	r0, r7
   16560:	mov	r1, r6
   16564:	ldr	r3, [r5, #28]
   16568:	add	r7, r4, #88	; 0x58
   1656c:	blx	r3
   16570:	mov	r0, r4
   16574:	mov	r1, r6
   16578:	ldr	r3, [r5, #28]
   1657c:	add	r4, r4, #8
   16580:	blx	r3
   16584:	cmp	r4, r7
   16588:	bne	16570 <__assert_fail@plt+0x3e84>
   1658c:	pop	{r4, r5, r6, r7, r8, pc}
   16590:			; <UNDEFINED> instruction: 0x000163bc
   16594:	andeq	lr, r4, r4, lsl #11
   16598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1659c:	mov	r6, r0
   165a0:	mov	r3, #0
   165a4:	sub	sp, sp, #108	; 0x6c
   165a8:	ldr	r0, [r0]
   165ac:	str	r3, [sp]
   165b0:	str	r3, [sp, #4]
   165b4:	str	r3, [sp, #8]
   165b8:	str	r3, [sp, #12]
   165bc:	cmp	r0, r3
   165c0:	beq	16948 <__assert_fail@plt+0x425c>
   165c4:	add	r2, sp, #16
   165c8:	mov	r1, r3
   165cc:	mov	r9, r2
   165d0:	add	r3, r3, #1
   165d4:	str	r1, [r2, #4]
   165d8:	cmp	r3, #11
   165dc:	str	r1, [r2], #8
   165e0:	bne	165d0 <__assert_fail@plt+0x3ee4>
   165e4:	mov	r2, r6
   165e8:	mov	r1, #3
   165ec:	ldr	r3, [r0, #156]	; 0x9c
   165f0:	cmp	r3, #0
   165f4:	bne	16664 <__assert_fail@plt+0x3f78>
   165f8:	ldr	r3, [r0, #8]
   165fc:	cmp	r3, #3
   16600:	beq	16608 <__assert_fail@plt+0x3f1c>
   16604:	bl	15ad8 <__assert_fail@plt+0x33ec>
   16608:	ldr	r8, [pc, #832]	; 16950 <__assert_fail@plt+0x4264>
   1660c:	ldr	r3, [r8, #44]	; 0x2c
   16610:	tst	r3, #9
   16614:	beq	16638 <__assert_fail@plt+0x3f4c>
   16618:	ldr	r4, [pc, #820]	; 16954 <__assert_fail@plt+0x4268>
   1661c:	ldr	r0, [pc, #820]	; 16958 <__assert_fail@plt+0x426c>
   16620:	ldr	r1, [r4]
   16624:	bl	12680 <fputs@plt>
   16628:	mov	r2, #0
   1662c:	ldr	r0, [r4]
   16630:	ldr	r1, [r6]
   16634:	bl	160dc <__assert_fail@plt+0x39f0>
   16638:	ldr	r7, [r6]
   1663c:	cmp	r7, #0
   16640:	beq	16654 <__assert_fail@plt+0x3f68>
   16644:	ldr	r3, [r7, #8]
   16648:	cmp	r3, #3
   1664c:	ldreq	r7, [r7, #12]
   16650:	movne	r7, #0
   16654:	ldr	r3, [pc, #768]	; 1695c <__assert_fail@plt+0x4270>
   16658:	mov	r5, #0
   1665c:	add	fp, r3, #472	; 0x1d8
   16660:	b	167dc <__assert_fail@plt+0x40f0>
   16664:	add	r2, r0, #156	; 0x9c
   16668:	ldr	r1, [r0, #12]
   1666c:	mov	r0, r3
   16670:	b	165ec <__assert_fail@plt+0x3f00>
   16674:	ldr	r3, [r4, #8]
   16678:	cmp	r3, #3
   1667c:	bne	166a0 <__assert_fail@plt+0x3fb4>
   16680:	ldr	r3, [r4, #12]
   16684:	cmp	r3, r7
   16688:	beq	166a0 <__assert_fail@plt+0x3fb4>
   1668c:	mov	r0, r4
   16690:	mov	r2, r6
   16694:	mov	r1, r7
   16698:	bl	15ad8 <__assert_fail@plt+0x33ec>
   1669c:	mov	r4, r0
   166a0:	ldr	sl, [r4, #160]	; 0xa0
   166a4:	ldr	r2, [sl, #8]
   166a8:	cmp	r2, #3
   166ac:	ldrls	pc, [pc, r2, lsl #2]
   166b0:	b	16928 <__assert_fail@plt+0x423c>
   166b4:	andeq	r6, r1, r4, asr #13
   166b8:	andeq	r6, r1, r4, asr #13
   166bc:	andeq	r6, r1, r0, lsl #18
   166c0:	andeq	r6, r1, r0, lsr #18
   166c4:	cmp	r7, #1
   166c8:	beq	1690c <__assert_fail@plt+0x4220>
   166cc:	ldrb	r2, [sl, #16]
   166d0:	cmp	r2, #0
   166d4:	beq	166f8 <__assert_fail@plt+0x400c>
   166d8:	mov	r3, r6
   166dc:	mov	r2, sp
   166e0:	add	r1, sp, #8
   166e4:	mov	r0, r9
   166e8:	mov	r5, #1
   166ec:	bl	16534 <__assert_fail@plt+0x3e48>
   166f0:	add	r6, r4, #156	; 0x9c
   166f4:	b	167dc <__assert_fail@plt+0x40f0>
   166f8:	ldr	r2, [pc, #608]	; 16960 <__assert_fail@plt+0x4274>
   166fc:	ldr	r3, [pc, #608]	; 16964 <__assert_fail@plt+0x4278>
   16700:	ldr	r1, [sl]
   16704:	ldr	r0, [pc, #604]	; 16968 <__assert_fail@plt+0x427c>
   16708:	cmp	r1, r2
   1670c:	cmpne	r1, r3
   16710:	moveq	r2, #1
   16714:	movne	r2, #0
   16718:	cmp	r1, r0
   1671c:	orreq	r2, r2, #1
   16720:	ldr	r0, [pc, #580]	; 1696c <__assert_fail@plt+0x4280>
   16724:	cmp	r1, r0
   16728:	orreq	r2, r2, #1
   1672c:	cmp	r2, #0
   16730:	bne	16784 <__assert_fail@plt+0x4098>
   16734:	ldr	r0, [pc, #564]	; 16970 <__assert_fail@plt+0x4284>
   16738:	ldr	ip, [pc, #564]	; 16974 <__assert_fail@plt+0x4288>
   1673c:	ldrh	r2, [r8, #68]	; 0x44
   16740:	cmp	r1, ip
   16744:	cmpne	r1, r0
   16748:	ldr	ip, [pc, #552]	; 16978 <__assert_fail@plt+0x428c>
   1674c:	moveq	r0, #1
   16750:	movne	r0, #0
   16754:	cmp	r2, #0
   16758:	moveq	r0, #1
   1675c:	cmp	r1, ip
   16760:	orreq	r0, r0, #1
   16764:	ldr	ip, [pc, #528]	; 1697c <__assert_fail@plt+0x4290>
   16768:	cmp	r1, ip
   1676c:	orreq	r0, r0, #1
   16770:	cmp	r0, #0
   16774:	bne	16808 <__assert_fail@plt+0x411c>
   16778:	ldr	r0, [sl, #24]
   1677c:	cmp	r0, #0
   16780:	bne	16808 <__assert_fail@plt+0x411c>
   16784:	ldr	r3, [r8, #44]	; 0x2c
   16788:	tst	r3, #8
   1678c:	beq	167bc <__assert_fail@plt+0x40d0>
   16790:	ldr	sl, [pc, #444]	; 16954 <__assert_fail@plt+0x4268>
   16794:	ldrh	r2, [r8, #68]	; 0x44
   16798:	ldr	r1, [pc, #480]	; 16980 <__assert_fail@plt+0x4294>
   1679c:	ldr	r0, [sl]
   167a0:	bl	123f8 <fprintf@plt>
   167a4:	ldr	r0, [sl]
   167a8:	ldr	r1, [r4, #160]	; 0xa0
   167ac:	bl	15c74 <__assert_fail@plt+0x3588>
   167b0:	ldr	r0, [pc, #460]	; 16984 <__assert_fail@plt+0x4298>
   167b4:	ldr	r1, [sl]
   167b8:	bl	12680 <fputs@plt>
   167bc:	ldr	r3, [r4, #156]	; 0x9c
   167c0:	str	r3, [r6]
   167c4:	ldr	r3, [sp, #8]
   167c8:	str	r4, [sp, #8]
   167cc:	str	r3, [r4, #156]	; 0x9c
   167d0:	ldr	r3, [sp, #12]
   167d4:	cmp	r3, #0
   167d8:	streq	r4, [sp, #12]
   167dc:	ldr	r4, [r6]
   167e0:	cmp	r4, #0
   167e4:	bne	16674 <__assert_fail@plt+0x3f88>
   167e8:	mov	r3, r6
   167ec:	mov	r2, sp
   167f0:	add	r1, sp, #8
   167f4:	mov	r0, r9
   167f8:	bl	16534 <__assert_fail@plt+0x3e48>
   167fc:	mov	r0, r5
   16800:	add	sp, sp, #108	; 0x6c
   16804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16808:	ldr	r0, [pc, #376]	; 16988 <__assert_fail@plt+0x429c>
   1680c:	cmp	r1, r0
   16810:	bne	16838 <__assert_fail@plt+0x414c>
   16814:	ldr	r3, [r4, #156]	; 0x9c
   16818:	str	r3, [r6]
   1681c:	ldr	r3, [sp]
   16820:	str	r4, [sp]
   16824:	str	r3, [r4, #156]	; 0x9c
   16828:	ldr	r3, [sp, #4]
   1682c:	cmp	r3, #0
   16830:	streq	r4, [sp, #4]
   16834:	b	167dc <__assert_fail@plt+0x40f0>
   16838:	cmp	r2, #1
   1683c:	bls	166f0 <__assert_fail@plt+0x4004>
   16840:	ldr	r1, [sl, #24]
   16844:	sub	r1, r1, #1
   16848:	cmp	r1, #1
   1684c:	bhi	1685c <__assert_fail@plt+0x4170>
   16850:	ldrb	r3, [sl, #18]
   16854:	cmp	r3, #0
   16858:	beq	16864 <__assert_fail@plt+0x4178>
   1685c:	cmp	r2, #2
   16860:	beq	166f0 <__assert_fail@plt+0x4004>
   16864:	ldr	r3, [r8, #44]	; 0x2c
   16868:	tst	r3, #8
   1686c:	beq	168bc <__assert_fail@plt+0x41d0>
   16870:	ldr	sl, [pc, #220]	; 16954 <__assert_fail@plt+0x4268>
   16874:	ldr	r1, [pc, #272]	; 1698c <__assert_fail@plt+0x42a0>
   16878:	ldr	r0, [sl]
   1687c:	bl	123f8 <fprintf@plt>
   16880:	ldr	r0, [sl]
   16884:	ldr	r1, [r4, #160]	; 0xa0
   16888:	bl	15c74 <__assert_fail@plt+0x3588>
   1688c:	ldr	r3, [r4, #160]	; 0xa0
   16890:	ldr	r0, [sl]
   16894:	ldr	r2, [r3, #24]
   16898:	mov	r3, #0
   1689c:	ldr	r1, [fp, r3, lsl #3]
   168a0:	cmp	r2, r1
   168a4:	bne	168ec <__assert_fail@plt+0x4200>
   168a8:	ldr	r2, [pc, #172]	; 1695c <__assert_fail@plt+0x4270>
   168ac:	add	r3, r2, r3, lsl #3
   168b0:	ldr	r2, [r3, #476]	; 0x1dc
   168b4:	ldr	r1, [pc, #212]	; 16990 <__assert_fail@plt+0x42a4>
   168b8:	bl	123f8 <fprintf@plt>
   168bc:	ldrd	r2, [r4, #156]	; 0x9c
   168c0:	ldr	r3, [r3, #24]
   168c4:	str	r2, [r6]
   168c8:	ldr	r2, [r9, r3, lsl #3]
   168cc:	str	r2, [r4, #156]	; 0x9c
   168d0:	add	r2, sp, #104	; 0x68
   168d4:	str	r4, [r9, r3, lsl #3]
   168d8:	add	r3, r2, r3, lsl #3
   168dc:	ldr	r2, [r3, #-84]	; 0xffffffac
   168e0:	cmp	r2, #0
   168e4:	streq	r4, [r3, #-84]	; 0xffffffac
   168e8:	b	167dc <__assert_fail@plt+0x40f0>
   168ec:	add	r3, r3, #1
   168f0:	cmp	r3, #11
   168f4:	bne	1689c <__assert_fail@plt+0x41b0>
   168f8:	ldr	r2, [pc, #148]	; 16994 <__assert_fail@plt+0x42a8>
   168fc:	b	168b4 <__assert_fail@plt+0x41c8>
   16900:	add	r0, sl, #160	; 0xa0
   16904:	bl	16598 <__assert_fail@plt+0x3eac>
   16908:	strb	r0, [sl, #16]
   1690c:	ldr	r3, [r4, #160]	; 0xa0
   16910:	ldrb	r3, [r3, #16]
   16914:	cmp	r3, #0
   16918:	beq	166f0 <__assert_fail@plt+0x4004>
   1691c:	b	166d8 <__assert_fail@plt+0x3fec>
   16920:	add	r0, r4, #160	; 0xa0
   16924:	b	16904 <__assert_fail@plt+0x4218>
   16928:	mov	r2, #5
   1692c:	ldr	r1, [pc, #100]	; 16998 <__assert_fail@plt+0x42ac>
   16930:	mov	r0, #0
   16934:	bl	1217c <dcgettext@plt>
   16938:	mov	r2, r0
   1693c:	mov	r1, #0
   16940:	mov	r0, #1
   16944:	bl	122c0 <error@plt>
   16948:	mov	r5, r0
   1694c:	b	167fc <__assert_fail@plt+0x4110>
   16950:	andeq	lr, r4, r4, lsl #29
   16954:	andeq	lr, r4, r0, ror #10
   16958:	andeq	r8, r3, r0, lsr r9
   1695c:			; <UNDEFINED> instruction: 0x0004e2b0
   16960:	andeq	r4, r1, r0, asr #8
   16964:			; <UNDEFINED> instruction: 0x000141b0
   16968:	andeq	r3, r1, r4, ror #31
   1696c:	muleq	r1, r8, r0
   16970:	andeq	r4, r1, ip, ror #3
   16974:	andeq	r3, r1, r0, asr #16
   16978:	andeq	r3, r1, r8, lsl fp
   1697c:	strdeq	r3, [r1], -r0
   16980:	andeq	r8, r3, r7, asr #18
   16984:	andeq	r8, r3, r8, ror #18
   16988:	andeq	r4, r1, ip, ror #10
   1698c:	andeq	r8, r3, r9, ror r9
   16990:	muleq	r3, r7, r9
   16994:	andeq	r8, r3, r4, asr r8
   16998:	andeq	r8, r3, r9, asr #12
   1699c:	push	{r4, r5, r6, r7, r8, lr}
   169a0:	subs	r4, r0, #0
   169a4:	vpush	{d8}
   169a8:	sub	sp, sp, #8
   169ac:	beq	16b24 <__assert_fail@plt+0x4438>
   169b0:	ldr	r5, [pc, #444]	; 16b74 <__assert_fail@plt+0x4488>
   169b4:	ldr	r6, [pc, #444]	; 16b78 <__assert_fail@plt+0x448c>
   169b8:	ldr	r7, [pc, #444]	; 16b7c <__assert_fail@plt+0x4490>
   169bc:	ldr	r3, [r4, #8]
   169c0:	cmp	r3, #3
   169c4:	bne	16b34 <__assert_fail@plt+0x4448>
   169c8:	ldr	r3, [r4, #156]	; 0x9c
   169cc:	cmp	r3, #0
   169d0:	beq	16b3c <__assert_fail@plt+0x4450>
   169d4:	ldr	r2, [r4, #160]	; 0xa0
   169d8:	cmp	r2, #0
   169dc:	beq	16b3c <__assert_fail@plt+0x4450>
   169e0:	ldr	r1, [r3, #160]	; 0xa0
   169e4:	cmp	r1, #0
   169e8:	beq	16b44 <__assert_fail@plt+0x4458>
   169ec:	mov	r0, r1
   169f0:	bl	15598 <__assert_fail@plt+0x2eac>
   169f4:	cmp	r0, #0
   169f8:	bne	16b4c <__assert_fail@plt+0x4460>
   169fc:	mov	r0, r2
   16a00:	bl	15598 <__assert_fail@plt+0x2eac>
   16a04:	cmp	r0, #0
   16a08:	bne	16b54 <__assert_fail@plt+0x4468>
   16a0c:	mov	r0, r1
   16a10:	bl	15bac <__assert_fail@plt+0x34c0>
   16a14:	mov	r8, r0
   16a18:	mov	r0, r2
   16a1c:	bl	15bac <__assert_fail@plt+0x34c0>
   16a20:	ldr	r3, [r5, #44]	; 0x2c
   16a24:	cmp	r0, r8
   16a28:	and	r3, r3, #8
   16a2c:	bgt	16b5c <__assert_fail@plt+0x4470>
   16a30:	bne	16a7c <__assert_fail@plt+0x4390>
   16a34:	cmp	r3, #0
   16a38:	vldr	s17, [r1, #28]
   16a3c:	vldr	s16, [r2, #28]
   16a40:	beq	16a64 <__assert_fail@plt+0x4378>
   16a44:	vcvt.f64.f32	d7, s16
   16a48:	ldr	r0, [pc, #304]	; 16b80 <__assert_fail@plt+0x4494>
   16a4c:	ldr	r1, [pc, #304]	; 16b84 <__assert_fail@plt+0x4498>
   16a50:	vstr	d7, [sp]
   16a54:	vcvt.f64.f32	d7, s17
   16a58:	ldr	r0, [r0]
   16a5c:	vmov	r2, r3, d7
   16a60:	bl	123f8 <fprintf@plt>
   16a64:	ldr	r3, [r4]
   16a68:	cmp	r3, r6
   16a6c:	bne	16ac0 <__assert_fail@plt+0x43d4>
   16a70:	vcmpe.f32	s17, s16
   16a74:	vmrs	APSR_nzcv, fpscr
   16a78:	ble	16b6c <__assert_fail@plt+0x4480>
   16a7c:	ldr	r3, [r5, #44]	; 0x2c
   16a80:	tst	r3, #8
   16a84:	beq	16aa8 <__assert_fail@plt+0x43bc>
   16a88:	ldr	r8, [pc, #240]	; 16b80 <__assert_fail@plt+0x4494>
   16a8c:	ldr	r0, [pc, #244]	; 16b88 <__assert_fail@plt+0x449c>
   16a90:	ldr	r1, [r8]
   16a94:	bl	12680 <fputs@plt>
   16a98:	mov	r2, #0
   16a9c:	mov	r1, r4
   16aa0:	ldr	r0, [r8]
   16aa4:	bl	160dc <__assert_fail@plt+0x39f0>
   16aa8:	ldr	r3, [r4, #156]	; 0x9c
   16aac:	ldr	r1, [r4, #160]	; 0xa0
   16ab0:	ldr	r2, [r3, #160]	; 0xa0
   16ab4:	str	r1, [r3, #160]	; 0xa0
   16ab8:	str	r2, [r4, #160]	; 0xa0
   16abc:	b	169bc <__assert_fail@plt+0x42d0>
   16ac0:	cmp	r3, r7
   16ac4:	bne	16b64 <__assert_fail@plt+0x4478>
   16ac8:	vcmpe.f32	s17, s16
   16acc:	vmrs	APSR_nzcv, fpscr
   16ad0:	bmi	16a7c <__assert_fail@plt+0x4390>
   16ad4:	ldr	r2, [pc, #176]	; 16b8c <__assert_fail@plt+0x44a0>
   16ad8:	ldr	r3, [r5, #44]	; 0x2c
   16adc:	tst	r3, #8
   16ae0:	beq	16b04 <__assert_fail@plt+0x4418>
   16ae4:	ldr	r7, [pc, #148]	; 16b80 <__assert_fail@plt+0x4494>
   16ae8:	ldr	r1, [pc, #160]	; 16b90 <__assert_fail@plt+0x44a4>
   16aec:	ldr	r0, [r7]
   16af0:	bl	123f8 <fprintf@plt>
   16af4:	mov	r2, #0
   16af8:	mov	r1, r4
   16afc:	ldr	r0, [r7]
   16b00:	bl	160dc <__assert_fail@plt+0x39f0>
   16b04:	ldr	r0, [r4, #156]	; 0x9c
   16b08:	bl	1699c <__assert_fail@plt+0x42b0>
   16b0c:	cmp	r0, #0
   16b10:	bne	169b8 <__assert_fail@plt+0x42cc>
   16b14:	ldr	r0, [r4, #160]	; 0xa0
   16b18:	bl	1699c <__assert_fail@plt+0x42b0>
   16b1c:	cmp	r0, #0
   16b20:	bne	169b8 <__assert_fail@plt+0x42cc>
   16b24:	mov	r0, #0
   16b28:	add	sp, sp, #8
   16b2c:	vpop	{d8}
   16b30:	pop	{r4, r5, r6, r7, r8, pc}
   16b34:	ldr	r2, [pc, #88]	; 16b94 <__assert_fail@plt+0x44a8>
   16b38:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b3c:	ldr	r2, [pc, #84]	; 16b98 <__assert_fail@plt+0x44ac>
   16b40:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b44:	ldr	r2, [pc, #80]	; 16b9c <__assert_fail@plt+0x44b0>
   16b48:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b4c:	ldr	r2, [pc, #76]	; 16ba0 <__assert_fail@plt+0x44b4>
   16b50:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b54:	ldr	r2, [pc, #72]	; 16ba4 <__assert_fail@plt+0x44b8>
   16b58:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b5c:	ldr	r2, [pc, #68]	; 16ba8 <__assert_fail@plt+0x44bc>
   16b60:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b64:	ldr	r2, [pc, #64]	; 16bac <__assert_fail@plt+0x44c0>
   16b68:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b6c:	ldr	r2, [pc, #60]	; 16bb0 <__assert_fail@plt+0x44c4>
   16b70:	b	16ad8 <__assert_fail@plt+0x43ec>
   16b74:	andeq	lr, r4, r4, lsl #29
   16b78:	strdeq	r3, [r1], -r0
   16b7c:	andeq	r3, r1, r0, asr #16
   16b80:	andeq	lr, r4, r0, ror #10
   16b84:	andeq	r8, r3, r8, lsr #21
   16b88:	andeq	r8, r3, r3, asr #21
   16b8c:	andeq	r8, r3, fp, ror sl
   16b90:	ldrdeq	r8, [r3], -ip
   16b94:	andeq	r8, r3, r8, lsl #20
   16b98:	andeq	r8, r3, r3, asr #19
   16b9c:	andeq	r8, r3, r6, lsr #19
   16ba0:	andeq	r8, r3, pc, lsl sl
   16ba4:	andeq	r8, r3, r9, ror #19
   16ba8:	ldrdeq	r8, [r3], -r9
   16bac:	andeq	r8, r3, sp, lsr sl
   16bb0:	andeq	r8, r3, pc, asr #20
   16bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb8:	mov	r3, #0
   16bbc:	sub	sp, sp, #28
   16bc0:	mov	r5, r1
   16bc4:	ldr	r4, [pc, #1264]	; 170bc <__assert_fail@plt+0x49d0>
   16bc8:	str	r0, [sp, #12]
   16bcc:	str	r2, [sp, #20]
   16bd0:	str	r3, [r4, #16]
   16bd4:	add	r3, r1, r2, lsl #2
   16bd8:	str	r3, [r4, #8]
   16bdc:	ldr	r2, [sp, #12]
   16be0:	ldr	r3, [sp, #20]
   16be4:	cmp	r3, r2
   16be8:	blt	16c30 <__assert_fail@plt+0x4544>
   16bec:	ldr	r6, [pc, #1228]	; 170c0 <__assert_fail@plt+0x49d4>
   16bf0:	mov	r0, r6
   16bf4:	bl	1d3e8 <__assert_fail@plt+0xacfc>
   16bf8:	mov	r7, r0
   16bfc:	ldr	r0, [pc, #1216]	; 170c4 <__assert_fail@plt+0x49d8>
   16c00:	bl	1d3e8 <__assert_fail@plt+0xacfc>
   16c04:	mov	r9, r0
   16c08:	ldr	r0, [pc, #1208]	; 170c8 <__assert_fail@plt+0x49dc>
   16c0c:	bl	1d3e8 <__assert_fail@plt+0xacfc>
   16c10:	cmp	r7, #0
   16c14:	mov	r8, r0
   16c18:	bne	16c60 <__assert_fail@plt+0x4574>
   16c1c:	ldr	r3, [pc, #1192]	; 170cc <__assert_fail@plt+0x49e0>
   16c20:	movw	r2, #1270	; 0x4f6
   16c24:	ldr	r1, [pc, #1188]	; 170d0 <__assert_fail@plt+0x49e4>
   16c28:	ldr	r0, [pc, #1188]	; 170d4 <__assert_fail@plt+0x49e8>
   16c2c:	bl	126ec <__assert_fail@plt>
   16c30:	mov	r1, #1
   16c34:	ldr	r0, [r5, r3, lsl #2]
   16c38:	bl	1799c <__assert_fail@plt+0x52b0>
   16c3c:	cmp	r0, #0
   16c40:	bne	16bec <__assert_fail@plt+0x4500>
   16c44:	ldr	r3, [r4, #4]
   16c48:	add	r3, r3, #1
   16c4c:	str	r3, [r4, #4]
   16c50:	ldr	r3, [sp, #20]
   16c54:	add	r3, r3, #1
   16c58:	str	r3, [sp, #20]
   16c5c:	b	16bdc <__assert_fail@plt+0x44f0>
   16c60:	cmp	r9, #0
   16c64:	bne	16c7c <__assert_fail@plt+0x4590>
   16c68:	ldr	r3, [pc, #1116]	; 170cc <__assert_fail@plt+0x49e0>
   16c6c:	movw	r2, #1271	; 0x4f7
   16c70:	ldr	r1, [pc, #1112]	; 170d0 <__assert_fail@plt+0x49e4>
   16c74:	ldr	r0, [pc, #1116]	; 170d8 <__assert_fail@plt+0x49ec>
   16c78:	b	16c2c <__assert_fail@plt+0x4540>
   16c7c:	cmp	r0, #0
   16c80:	bne	16c98 <__assert_fail@plt+0x45ac>
   16c84:	ldr	r3, [pc, #1088]	; 170cc <__assert_fail@plt+0x49e0>
   16c88:	movw	r2, #1272	; 0x4f8
   16c8c:	ldr	r1, [pc, #1084]	; 170d0 <__assert_fail@plt+0x49e4>
   16c90:	ldr	r0, [pc, #1092]	; 170dc <__assert_fail@plt+0x49f0>
   16c94:	b	16c2c <__assert_fail@plt+0x4540>
   16c98:	add	r2, sp, #12
   16c9c:	mov	r1, r5
   16ca0:	mov	r0, r7
   16ca4:	mov	sl, #0
   16ca8:	bl	1aff0 <__assert_fail@plt+0x8904>
   16cac:	ldr	r3, [r4, #16]
   16cb0:	mov	r1, #1
   16cb4:	mov	r0, r5
   16cb8:	ldr	r2, [r4, #20]
   16cbc:	str	r6, [r2, #4]
   16cc0:	strb	r1, [r3, #33]	; 0x21
   16cc4:	ldr	r1, [sp, #12]
   16cc8:	bl	1d3d0 <__assert_fail@plt+0xace4>
   16ccc:	ldr	r0, [r4, #20]
   16cd0:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16cd4:	ldr	r1, [sp, #12]
   16cd8:	ldr	r3, [sp, #20]
   16cdc:	cmp	r3, r1
   16ce0:	blt	16d40 <__assert_fail@plt+0x4654>
   16ce4:	mov	r0, r5
   16ce8:	ldr	r3, [r4, #16]
   16cec:	ldr	r2, [r4, #20]
   16cf0:	bl	1d3e4 <__assert_fail@plt+0xacf8>
   16cf4:	ldr	r0, [r4, #16]
   16cf8:	ldr	r3, [r0, #152]	; 0x98
   16cfc:	cmp	r3, #0
   16d00:	bne	16ec0 <__assert_fail@plt+0x47d4>
   16d04:	str	r3, [r4, #16]
   16d08:	str	r0, [sp, #16]
   16d0c:	str	r3, [r4, #20]
   16d10:	bl	284c4 <__assert_fail@plt+0x15dd8>
   16d14:	add	r2, sp, #12
   16d18:	mov	r1, r5
   16d1c:	mov	r0, r8
   16d20:	bl	1b3f8 <__assert_fail@plt+0x8d0c>
   16d24:	ldr	r3, [pc, #948]	; 170e0 <__assert_fail@plt+0x49f4>
   16d28:	ldr	r0, [r4, #20]
   16d2c:	str	r3, [r0, #4]
   16d30:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16d34:	ldr	r0, [r4, #16]
   16d38:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16d3c:	b	16eec <__assert_fail@plt+0x4800>
   16d40:	ldr	r2, [pc, #924]	; 170e4 <__assert_fail@plt+0x49f8>
   16d44:	mov	r1, #0
   16d48:	ldr	r0, [r5, r3, lsl #2]
   16d4c:	strb	sl, [r2, #40]	; 0x28
   16d50:	bl	1799c <__assert_fail@plt+0x52b0>
   16d54:	subs	r6, r0, #0
   16d58:	bne	16dc4 <__assert_fail@plt+0x46d8>
   16d5c:	mov	r2, #5
   16d60:	ldr	r1, [pc, #896]	; 170e8 <__assert_fail@plt+0x49fc>
   16d64:	bl	1217c <dcgettext@plt>
   16d68:	ldr	r3, [sp, #20]
   16d6c:	mov	r2, r0
   16d70:	mov	r1, r6
   16d74:	mov	r0, r6
   16d78:	ldr	r3, [r5, r3, lsl #2]
   16d7c:	bl	122c0 <error@plt>
   16d80:	ldr	r3, [sp, #20]
   16d84:	mov	r1, r6
   16d88:	ldr	r0, [r5, r3, lsl #2]
   16d8c:	bl	124c4 <access@plt>
   16d90:	subs	r5, r0, #0
   16d94:	bne	16dbc <__assert_fail@plt+0x46d0>
   16d98:	mov	r2, #5
   16d9c:	ldr	r1, [pc, #840]	; 170ec <__assert_fail@plt+0x4a00>
   16da0:	bl	1217c <dcgettext@plt>
   16da4:	ldr	r3, [r4, #20]
   16da8:	mov	r2, r0
   16dac:	mov	r1, r5
   16db0:	mov	r0, r5
   16db4:	ldr	r3, [r3, #4]
   16db8:	bl	122c0 <error@plt>
   16dbc:	mov	r0, #1
   16dc0:	bl	1238c <exit@plt>
   16dc4:	ldr	r3, [sp, #20]
   16dc8:	ldr	r6, [r5, r3, lsl #2]
   16dcc:	mov	r0, r6
   16dd0:	bl	1d3e8 <__assert_fail@plt+0xacfc>
   16dd4:	subs	r7, r0, #0
   16dd8:	bne	16dfc <__assert_fail@plt+0x4710>
   16ddc:	ldr	r1, [pc, #780]	; 170f0 <__assert_fail@plt+0x4a04>
   16de0:	mov	r2, #5
   16de4:	bl	1217c <dcgettext@plt>
   16de8:	mov	r3, r6
   16dec:	mov	r2, r0
   16df0:	mov	r1, #0
   16df4:	mov	r0, #1
   16df8:	bl	122c0 <error@plt>
   16dfc:	ldr	r3, [r7]
   16e00:	add	r2, sp, #20
   16e04:	mov	r1, r5
   16e08:	mov	r0, r7
   16e0c:	ldr	fp, [r7, #8]
   16e10:	cmp	r3, #4
   16e14:	ldrne	r3, [sp, #20]
   16e18:	addne	r3, r3, #1
   16e1c:	strne	r3, [sp, #20]
   16e20:	ldr	r3, [sp, #20]
   16e24:	str	r3, [sp, #8]
   16e28:	blx	fp
   16e2c:	subs	fp, r0, #0
   16e30:	ldr	r3, [sp, #8]
   16e34:	ldr	r2, [sp, #20]
   16e38:	bne	16e98 <__assert_fail@plt+0x47ac>
   16e3c:	ldr	r4, [r5, r2, lsl #2]
   16e40:	cmp	r4, #0
   16e44:	beq	16e8c <__assert_fail@plt+0x47a0>
   16e48:	ldr	r1, [r7]
   16e4c:	cmp	r1, #4
   16e50:	cmpeq	r2, r3
   16e54:	mov	r2, #5
   16e58:	moveq	r4, #1
   16e5c:	movne	r4, #0
   16e60:	ldreq	r1, [pc, #652]	; 170f4 <__assert_fail@plt+0x4a08>
   16e64:	beq	16de4 <__assert_fail@plt+0x46f8>
   16e68:	ldr	r1, [pc, #648]	; 170f8 <__assert_fail@plt+0x4a0c>
   16e6c:	bl	1217c <dcgettext@plt>
   16e70:	ldr	r3, [sp, #20]
   16e74:	mov	r2, r0
   16e78:	mov	r1, r4
   16e7c:	mov	r0, #1
   16e80:	str	r6, [sp]
   16e84:	ldr	r3, [r5, r3, lsl #2]
   16e88:	bl	122c0 <error@plt>
   16e8c:	mov	r2, #5
   16e90:	ldr	r1, [pc, #612]	; 170fc <__assert_fail@plt+0x4a10>
   16e94:	b	16de4 <__assert_fail@plt+0x46f8>
   16e98:	ldr	r0, [r4, #20]
   16e9c:	cmp	r2, r3
   16ea0:	moveq	r3, #0
   16ea4:	str	r6, [r0, #4]
   16ea8:	ldrne	r3, [r5, r3, lsl #2]
   16eac:	str	r3, [r0, #36]	; 0x24
   16eb0:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16eb4:	ldr	r0, [r4, #16]
   16eb8:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16ebc:	b	16cd4 <__assert_fail@plt+0x45e8>
   16ec0:	mov	r0, r3
   16ec4:	bl	17974 <__assert_fail@plt+0x5288>
   16ec8:	cmp	r0, #0
   16ecc:	bne	16f84 <__assert_fail@plt+0x4898>
   16ed0:	ldr	r3, [r4, #16]
   16ed4:	ldr	r0, [r3, #152]	; 0x98
   16ed8:	str	r3, [sp, #16]
   16edc:	str	r0, [r4, #16]
   16ee0:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16ee4:	ldr	r0, [sp, #16]
   16ee8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   16eec:	ldr	r5, [pc, #524]	; 17100 <__assert_fail@plt+0x4a14>
   16ef0:	ldr	r3, [r5, #44]	; 0x2c
   16ef4:	tst	r3, #9
   16ef8:	beq	16f18 <__assert_fail@plt+0x482c>
   16efc:	ldr	r6, [pc, #512]	; 17104 <__assert_fail@plt+0x4a18>
   16f00:	ldr	r0, [pc, #512]	; 17108 <__assert_fail@plt+0x4a1c>
   16f04:	ldr	r1, [r6]
   16f08:	bl	12680 <fputs@plt>
   16f0c:	ldr	r0, [r6]
   16f10:	ldr	r1, [r4, #16]
   16f14:	bl	14a44 <__assert_fail@plt+0x2358>
   16f18:	ldr	r0, [r4, #16]
   16f1c:	bl	1d290 <__assert_fail@plt+0xaba4>
   16f20:	ldr	r0, [r4, #16]
   16f24:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16f28:	ldr	r3, [r4, #16]
   16f2c:	mov	r2, #0
   16f30:	add	r0, sp, #16
   16f34:	mov	r1, r2
   16f38:	str	r3, [sp, #16]
   16f3c:	bl	155e4 <__assert_fail@plt+0x2ef8>
   16f40:	str	r0, [r4, #12]
   16f44:	bl	15cac <__assert_fail@plt+0x35c0>
   16f48:	ldr	r6, [sp, #16]
   16f4c:	cmp	r6, #0
   16f50:	beq	17000 <__assert_fail@plt+0x4914>
   16f54:	ldr	r3, [pc, #432]	; 1710c <__assert_fail@plt+0x4a20>
   16f58:	ldr	r2, [r6]
   16f5c:	cmp	r2, r3
   16f60:	bne	16fd0 <__assert_fail@plt+0x48e4>
   16f64:	ldr	r1, [pc, #420]	; 17110 <__assert_fail@plt+0x4a24>
   16f68:	mov	r2, #5
   16f6c:	mov	r0, #0
   16f70:	bl	1217c <dcgettext@plt>
   16f74:	mov	r2, r0
   16f78:	mov	r1, #0
   16f7c:	mov	r0, #1
   16f80:	bl	122c0 <error@plt>
   16f84:	add	r2, sp, #12
   16f88:	mov	r1, r5
   16f8c:	mov	r0, r9
   16f90:	mov	r6, #1
   16f94:	bl	1af90 <__assert_fail@plt+0x88a4>
   16f98:	ldr	r3, [pc, #292]	; 170c4 <__assert_fail@plt+0x49d8>
   16f9c:	ldr	r0, [r4, #20]
   16fa0:	str	r3, [r0, #4]
   16fa4:	strb	r6, [r0, #33]	; 0x21
   16fa8:	bl	14ce4 <__assert_fail@plt+0x25f8>
   16fac:	add	r2, sp, #12
   16fb0:	mov	r1, r5
   16fb4:	mov	r0, r8
   16fb8:	bl	1b3f8 <__assert_fail@plt+0x8d0c>
   16fbc:	ldr	r3, [pc, #284]	; 170e0 <__assert_fail@plt+0x49f4>
   16fc0:	ldr	r0, [r4, #20]
   16fc4:	str	r3, [r0, #4]
   16fc8:	strb	r6, [r0, #33]	; 0x21
   16fcc:	b	16d30 <__assert_fail@plt+0x4644>
   16fd0:	ldr	r4, [r6, #4]
   16fd4:	mov	r2, #5
   16fd8:	cmp	r4, #0
   16fdc:	beq	16ff8 <__assert_fail@plt+0x490c>
   16fe0:	ldr	r1, [pc, #300]	; 17114 <__assert_fail@plt+0x4a28>
   16fe4:	mov	r0, #0
   16fe8:	bl	1217c <dcgettext@plt>
   16fec:	ldr	r3, [sp, #16]
   16ff0:	ldr	r3, [r3, #4]
   16ff4:	b	16dec <__assert_fail@plt+0x4700>
   16ff8:	ldr	r1, [pc, #280]	; 17118 <__assert_fail@plt+0x4a2c>
   16ffc:	b	16f6c <__assert_fail@plt+0x4880>
   17000:	ldr	r3, [r5, #44]	; 0x2c
   17004:	tst	r3, #9
   17008:	beq	1702c <__assert_fail@plt+0x4940>
   1700c:	ldr	r7, [pc, #240]	; 17104 <__assert_fail@plt+0x4a18>
   17010:	ldr	r0, [pc, #260]	; 1711c <__assert_fail@plt+0x4a30>
   17014:	ldr	r1, [r7]
   17018:	bl	12680 <fputs@plt>
   1701c:	mov	r2, r6
   17020:	ldr	r0, [r7]
   17024:	ldr	r1, [r4, #12]
   17028:	bl	160dc <__assert_fail@plt+0x39f0>
   1702c:	ldr	r0, [r4, #12]
   17030:	bl	15920 <__assert_fail@plt+0x3234>
   17034:	ldr	r0, [pc, #228]	; 17120 <__assert_fail@plt+0x4a34>
   17038:	bl	16598 <__assert_fail@plt+0x3eac>
   1703c:	ldr	r6, [r4, #12]
   17040:	mov	r1, #1
   17044:	mov	r0, r6
   17048:	bl	158a0 <__assert_fail@plt+0x31b4>
   1704c:	mov	r0, r6
   17050:	bl	1699c <__assert_fail@plt+0x42b0>
   17054:	mov	r1, #1
   17058:	ldr	r0, [r4, #12]
   1705c:	bl	158a0 <__assert_fail@plt+0x31b4>
   17060:	ldr	r3, [r5, #44]	; 0x2c
   17064:	tst	r3, #9
   17068:	beq	170b0 <__assert_fail@plt+0x49c4>
   1706c:	ldr	r5, [pc, #144]	; 17104 <__assert_fail@plt+0x4a18>
   17070:	ldr	r0, [pc, #172]	; 17124 <__assert_fail@plt+0x4a38>
   17074:	ldr	r1, [r5]
   17078:	bl	12680 <fputs@plt>
   1707c:	mov	r2, #0
   17080:	ldr	r0, [r5]
   17084:	ldr	r1, [r4, #12]
   17088:	bl	160dc <__assert_fail@plt+0x39f0>
   1708c:	ldr	r0, [pc, #148]	; 17128 <__assert_fail@plt+0x4a3c>
   17090:	ldr	r1, [r5]
   17094:	bl	12680 <fputs@plt>
   17098:	ldr	r0, [r5]
   1709c:	ldr	r1, [r4, #12]
   170a0:	bl	14ad4 <__assert_fail@plt+0x23e8>
   170a4:	mov	r0, #10
   170a8:	ldr	r1, [r5]
   170ac:	bl	1256c <fputc@plt>
   170b0:	ldr	r0, [r4, #12]
   170b4:	add	sp, sp, #28
   170b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170bc:	andeq	lr, r4, r4, lsl #11
   170c0:	andeq	sl, r3, fp, lsl #10
   170c4:	andeq	r9, r3, fp, ror fp
   170c8:	strdeq	r8, [r3], -r2
   170cc:	andeq	r8, r3, r8, lsl r4
   170d0:	muleq	r3, r0, r6
   170d4:	strdeq	r8, [r3], -sp
   170d8:	andeq	r8, r3, r0, lsl fp
   170dc:	andeq	r8, r3, r4, lsr #22
   170e0:	strdeq	r8, [r3], -r1
   170e4:	andeq	lr, r4, r8, asr lr
   170e8:	andeq	r8, r3, r8, lsr fp
   170ec:	andeq	r8, r3, ip, asr fp
   170f0:	andeq	r8, r3, ip, lsl #23
   170f4:	andeq	r8, r3, r3, lsr #23
   170f8:			; <UNDEFINED> instruction: 0x00038bba
   170fc:	ldrdeq	r8, [r3], -r8	; <UNPREDICTABLE>
   17100:	andeq	lr, r4, r4, lsl #29
   17104:	andeq	lr, r4, r0, ror #10
   17108:	strdeq	r8, [r3], -r8	; <UNPREDICTABLE>
   1710c:	muleq	r1, r0, sl
   17110:	andeq	r8, r3, sp, lsr r5
   17114:	andeq	r8, r3, r9, lsl #24
   17118:	andeq	r8, r3, r9, lsr #24
   1711c:	andeq	r8, r3, fp, lsr r9
   17120:	muleq	r4, r0, r5
   17124:	andeq	r8, r3, r4, asr #24
   17128:	andeq	r8, r3, sl, asr ip
   1712c:	push	{r4, r5, r6, lr}
   17130:	mov	r4, r0
   17134:	mov	r5, r1
   17138:	ldr	r0, [r4, #156]	; 0x9c
   1713c:	cmp	r0, #0
   17140:	beq	1714c <__assert_fail@plt+0x4a60>
   17144:	mov	r1, r5
   17148:	bl	1712c <__assert_fail@plt+0x4a40>
   1714c:	mov	r0, r4
   17150:	blx	r5
   17154:	ldr	r4, [r4, #160]	; 0xa0
   17158:	cmp	r4, #0
   1715c:	bne	17138 <__assert_fail@plt+0x4a4c>
   17160:	pop	{r4, r5, r6, pc}
   17164:	ldr	r3, [pc, #60]	; 171a8 <__assert_fail@plt+0x4abc>
   17168:	ldr	r1, [pc, #60]	; 171ac <__assert_fail@plt+0x4ac0>
   1716c:	ldr	r2, [r0]
   17170:	cmp	r2, r1
   17174:	cmpne	r2, r3
   17178:	ldr	r1, [pc, #48]	; 171b0 <__assert_fail@plt+0x4ac4>
   1717c:	moveq	r3, #1
   17180:	movne	r3, #0
   17184:	cmp	r2, r1
   17188:	orreq	r3, r3, #1
   1718c:	ldr	r1, [pc, #32]	; 171b4 <__assert_fail@plt+0x4ac8>
   17190:	cmp	r2, r1
   17194:	orreq	r3, r3, #1
   17198:	cmp	r3, #0
   1719c:	movne	r3, #0
   171a0:	strne	r3, [r0, #44]	; 0x2c
   171a4:	bx	lr
   171a8:	andeq	r3, r1, r0, lsr #29
   171ac:	andeq	r9, r1, ip, lsl #11
   171b0:	andeq	r3, r1, r0, asr lr
   171b4:	ldrdeq	r3, [r1], -r0
   171b8:	push	{r4, r5, r6, r7, r8, lr}
   171bc:	mov	r4, r0
   171c0:	ldr	r5, [pc, #156]	; 17264 <__assert_fail@plt+0x4b78>
   171c4:	ldr	r6, [pc, #156]	; 17268 <__assert_fail@plt+0x4b7c>
   171c8:	ldr	r7, [pc, #156]	; 1726c <__assert_fail@plt+0x4b80>
   171cc:	cmp	r4, #0
   171d0:	popeq	{r4, r5, r6, r7, r8, pc}
   171d4:	ldrb	r3, [r5, #32]
   171d8:	cmp	r3, #0
   171dc:	bne	171f4 <__assert_fail@plt+0x4b08>
   171e0:	ldr	r3, [pc, #136]	; 17270 <__assert_fail@plt+0x4b84>
   171e4:	mov	r2, #396	; 0x18c
   171e8:	ldr	r1, [pc, #132]	; 17274 <__assert_fail@plt+0x4b88>
   171ec:	ldr	r0, [pc, #132]	; 17278 <__assert_fail@plt+0x4b8c>
   171f0:	bl	126ec <__assert_fail@plt>
   171f4:	ldr	r0, [r4, #156]	; 0x9c
   171f8:	bl	171b8 <__assert_fail@plt+0x4acc>
   171fc:	ldr	r3, [r4]
   17200:	cmp	r3, r7
   17204:	cmpne	r3, r6
   17208:	bne	1725c <__assert_fail@plt+0x4b70>
   1720c:	ldrb	r3, [r4, #40]	; 0x28
   17210:	cmp	r3, #0
   17214:	beq	1725c <__assert_fail@plt+0x4b70>
   17218:	ldr	r3, [r4, #116]	; 0x74
   1721c:	cmp	r3, #0
   17220:	beq	1725c <__assert_fail@plt+0x4b70>
   17224:	add	r2, r4, #40	; 0x28
   17228:	ldr	r1, [pc, #76]	; 1727c <__assert_fail@plt+0x4b90>
   1722c:	ldr	r0, [r4, #144]	; 0x90
   17230:	bl	1df74 <__assert_fail@plt+0xb888>
   17234:	ldr	r3, [pc, #68]	; 17280 <__assert_fail@plt+0x4b94>
   17238:	ldr	r0, [r4, #144]	; 0x90
   1723c:	ldr	r3, [r3]
   17240:	cmp	r0, r3
   17244:	beq	1725c <__assert_fail@plt+0x4b70>
   17248:	bl	2686c <__assert_fail@plt+0x14180>
   1724c:	ldr	r0, [r4, #144]	; 0x90
   17250:	bl	284c4 <__assert_fail@plt+0x15dd8>
   17254:	mov	r3, #0
   17258:	str	r3, [r4, #144]	; 0x90
   1725c:	ldr	r4, [r4, #160]	; 0xa0
   17260:	b	171cc <__assert_fail@plt+0x4ae0>
   17264:	andeq	lr, r4, r8, asr lr
   17268:	andeq	r3, r1, r8, lsr lr
   1726c:	strdeq	r4, [r1], -r8
   17270:	andeq	r8, r3, r4, lsr sp
   17274:	andeq	r8, r3, r2, lsl #28
   17278:	andeq	r8, r3, r9, lsl #28
   1727c:	andeq	r7, r1, r4, lsl #5
   17280:	andeq	lr, r4, r0, lsl #11
   17284:	add	r1, r0, #48	; 0x30
   17288:	push	{r4, lr}
   1728c:	add	r0, r0, #4
   17290:	bl	1dab0 <__assert_fail@plt+0xb3c4>
   17294:	mov	r0, #0
   17298:	pop	{r4, pc}
   1729c:	push	{r4, r5, r6, lr}
   172a0:	mov	r4, r0
   172a4:	ldr	r5, [pc, #68]	; 172f0 <__assert_fail@plt+0x4c04>
   172a8:	cmp	r4, #0
   172ac:	popeq	{r4, r5, r6, pc}
   172b0:	ldr	r0, [r4, #156]	; 0x9c
   172b4:	bl	1729c <__assert_fail@plt+0x4bb0>
   172b8:	ldr	r3, [r4]
   172bc:	cmp	r3, r5
   172c0:	bne	172e8 <__assert_fail@plt+0x4bfc>
   172c4:	ldrb	r3, [r4, #40]	; 0x28
   172c8:	cmp	r3, #0
   172cc:	beq	172e8 <__assert_fail@plt+0x4bfc>
   172d0:	ldr	r3, [r4, #116]	; 0x74
   172d4:	cmp	r3, #0
   172d8:	beq	172e8 <__assert_fail@plt+0x4bfc>
   172dc:	add	r1, r4, #88	; 0x58
   172e0:	add	r0, r4, #44	; 0x2c
   172e4:	bl	1dab0 <__assert_fail@plt+0xb3c4>
   172e8:	ldr	r4, [r4, #160]	; 0xa0
   172ec:	b	172a8 <__assert_fail@plt+0x4bbc>
   172f0:	andeq	r3, r1, r4, lsr lr
   172f4:	push	{r4, r5, r6, lr}
   172f8:	mov	r4, r0
   172fc:	mov	r6, r1
   17300:	mov	r5, r2
   17304:	bl	12404 <__errno_location@plt>
   17308:	ldr	r3, [r0]
   1730c:	cmp	r3, #2
   17310:	beq	1731c <__assert_fail@plt+0x4c30>
   17314:	cmp	r3, #20
   17318:	bne	1735c <__assert_fail@plt+0x4c70>
   1731c:	ldr	r3, [pc, #64]	; 17364 <__assert_fail@plt+0x4c78>
   17320:	ldr	r3, [r3, #44]	; 0x2c
   17324:	tst	r3, #2
   17328:	beq	17340 <__assert_fail@plt+0x4c54>
   1732c:	ldr	r3, [pc, #52]	; 17368 <__assert_fail@plt+0x4c7c>
   17330:	mov	r2, r4
   17334:	ldr	r1, [pc, #48]	; 1736c <__assert_fail@plt+0x4c80>
   17338:	ldr	r0, [r3]
   1733c:	bl	123f8 <fprintf@plt>
   17340:	ldr	r0, [pc, #40]	; 17370 <__assert_fail@plt+0x4c84>
   17344:	mov	r2, r6
   17348:	mov	r1, r4
   1734c:	mov	r3, #256	; 0x100
   17350:	pop	{r4, r5, r6, lr}
   17354:	ldr	r0, [r0, #16]
   17358:	b	37914 <__assert_fail@plt+0x25228>
   1735c:	mov	r0, r5
   17360:	pop	{r4, r5, r6, pc}
   17364:	andeq	lr, r4, r4, lsl #29
   17368:	andeq	lr, r4, r0, ror #10
   1736c:	andeq	r8, r3, r4, lsr #28
   17370:	andeq	lr, r4, r8, asr lr
   17374:	push	{r4, r5, r6, lr}
   17378:	mov	r4, r0
   1737c:	mov	r5, r1
   17380:	mov	r1, r2
   17384:	bl	15fe4 <__assert_fail@plt+0x38f8>
   17388:	ldr	r2, [r4, #4]
   1738c:	mov	r1, #1
   17390:	str	r5, [r0]
   17394:	str	r2, [r0, #4]
   17398:	mov	r2, #0
   1739c:	str	r1, [r0, #8]
   173a0:	str	r2, [r0, #12]
   173a4:	str	r2, [r0, #40]	; 0x28
   173a8:	pop	{r4, r5, r6, pc}
   173ac:	mov	r2, r1
   173b0:	ldr	r1, [r0, #12]
   173b4:	cmp	r1, #0
   173b8:	bne	173d4 <__assert_fail@plt+0x4ce8>
   173bc:	push	{r4, lr}
   173c0:	mov	r2, #123	; 0x7b
   173c4:	ldr	r3, [pc, #12]	; 173d8 <__assert_fail@plt+0x4cec>
   173c8:	ldr	r1, [pc, #12]	; 173dc <__assert_fail@plt+0x4cf0>
   173cc:	ldr	r0, [pc, #12]	; 173e0 <__assert_fail@plt+0x4cf4>
   173d0:	bl	126ec <__assert_fail@plt>
   173d4:	b	17374 <__assert_fail@plt+0x4c88>
   173d8:	andeq	r8, r3, r1, asr sp
   173dc:	andeq	r8, r3, r2, lsl #28
   173e0:	andeq	r8, r3, pc, asr lr
   173e4:	mov	r1, #0
   173e8:	b	173ac <__assert_fail@plt+0x4cc0>
   173ec:	subs	r5, r0, #0
   173f0:	push	{r7, lr}
   173f4:	ldr	r6, [pc, #428]	; 175a8 <__assert_fail@plt+0x4ebc>
   173f8:	beq	1742c <__assert_fail@plt+0x4d40>
   173fc:	mov	r2, #5
   17400:	mov	r0, #0
   17404:	ldr	r3, [pc, #416]	; 175ac <__assert_fail@plt+0x4ec0>
   17408:	ldr	r1, [pc, #416]	; 175b0 <__assert_fail@plt+0x4ec4>
   1740c:	ldr	r4, [r3]
   17410:	bl	1217c <dcgettext@plt>
   17414:	mov	r1, r0
   17418:	ldr	r2, [r6]
   1741c:	mov	r0, r4
   17420:	bl	123f8 <fprintf@plt>
   17424:	mov	r0, r5
   17428:	bl	1238c <exit@plt>
   1742c:	ldr	r4, [pc, #384]	; 175b4 <__assert_fail@plt+0x4ec8>
   17430:	mov	r2, #5
   17434:	ldr	r1, [pc, #380]	; 175b8 <__assert_fail@plt+0x4ecc>
   17438:	ldr	r8, [pc, #380]	; 175bc <__assert_fail@plt+0x4ed0>
   1743c:	ldr	r7, [r4]
   17440:	bl	1217c <dcgettext@plt>
   17444:	mov	r1, r0
   17448:	ldr	r2, [r6]
   1744c:	ldr	r9, [pc, #364]	; 175c0 <__assert_fail@plt+0x4ed4>
   17450:	mov	r0, r7
   17454:	bl	123f8 <fprintf@plt>
   17458:	mov	r2, #5
   1745c:	ldr	r1, [pc, #352]	; 175c4 <__assert_fail@plt+0x4ed8>
   17460:	mov	r0, r5
   17464:	bl	1217c <dcgettext@plt>
   17468:	ldr	r1, [r4]
   1746c:	bl	12680 <fputs@plt>
   17470:	mov	r2, #5
   17474:	ldr	r1, [pc, #332]	; 175c8 <__assert_fail@plt+0x4edc>
   17478:	mov	r0, r5
   1747c:	bl	1217c <dcgettext@plt>
   17480:	ldr	r1, [r4]
   17484:	bl	12680 <fputs@plt>
   17488:	mov	r2, #5
   1748c:	ldr	r1, [pc, #312]	; 175cc <__assert_fail@plt+0x4ee0>
   17490:	mov	r0, r5
   17494:	bl	1217c <dcgettext@plt>
   17498:	ldr	r1, [r4]
   1749c:	bl	12680 <fputs@plt>
   174a0:	mov	r2, #5
   174a4:	ldr	r1, [pc, #292]	; 175d0 <__assert_fail@plt+0x4ee4>
   174a8:	mov	r0, r5
   174ac:	bl	1217c <dcgettext@plt>
   174b0:	ldr	r1, [r4]
   174b4:	bl	12680 <fputs@plt>
   174b8:	mov	r2, #5
   174bc:	ldr	r1, [pc, #272]	; 175d4 <__assert_fail@plt+0x4ee8>
   174c0:	mov	r0, r5
   174c4:	bl	1217c <dcgettext@plt>
   174c8:	ldr	r1, [r4]
   174cc:	bl	12680 <fputs@plt>
   174d0:	mov	r2, #5
   174d4:	ldr	r1, [pc, #252]	; 175d8 <__assert_fail@plt+0x4eec>
   174d8:	mov	r0, r5
   174dc:	bl	1217c <dcgettext@plt>
   174e0:	ldr	r1, [r4]
   174e4:	bl	12680 <fputs@plt>
   174e8:	mov	r2, #5
   174ec:	ldr	r1, [pc, #232]	; 175dc <__assert_fail@plt+0x4ef0>
   174f0:	mov	r0, r5
   174f4:	bl	1217c <dcgettext@plt>
   174f8:	ldr	r1, [r4]
   174fc:	bl	12680 <fputs@plt>
   17500:	mov	r2, #5
   17504:	ldr	r1, [pc, #212]	; 175e0 <__assert_fail@plt+0x4ef4>
   17508:	mov	r0, r5
   1750c:	bl	1217c <dcgettext@plt>
   17510:	ldr	r1, [r4]
   17514:	bl	12680 <fputs@plt>
   17518:	mov	r2, #5
   1751c:	ldr	r1, [pc, #192]	; 175e4 <__assert_fail@plt+0x4ef8>
   17520:	mov	r0, r5
   17524:	bl	1217c <dcgettext@plt>
   17528:	ldr	r1, [r4]
   1752c:	bl	12680 <fputs@plt>
   17530:	ldr	r1, [pc, #176]	; 175e8 <__assert_fail@plt+0x4efc>
   17534:	mov	r2, #5
   17538:	mov	r0, r5
   1753c:	bl	1217c <dcgettext@plt>
   17540:	ldr	r1, [r4]
   17544:	ldr	r7, [pc, #160]	; 175ec <__assert_fail@plt+0x4f00>
   17548:	bl	12680 <fputs@plt>
   1754c:	mov	r3, #12
   17550:	cmp	r5, #0
   17554:	ldr	r1, [pc, #148]	; 175f0 <__assert_fail@plt+0x4f04>
   17558:	movne	r2, r8
   1755c:	moveq	r2, r7
   17560:	mul	r3, r3, r5
   17564:	add	r5, r5, #1
   17568:	ldr	r0, [r4]
   1756c:	ldr	r3, [r3, r9]
   17570:	bl	123f8 <fprintf@plt>
   17574:	cmp	r5, #9
   17578:	bne	1754c <__assert_fail@plt+0x4e60>
   1757c:	mov	r2, #5
   17580:	ldr	r1, [pc, #108]	; 175f4 <__assert_fail@plt+0x4f08>
   17584:	mov	r0, #0
   17588:	bl	1217c <dcgettext@plt>
   1758c:	ldr	r1, [r4]
   17590:	bl	12680 <fputs@plt>
   17594:	ldr	r0, [r4]
   17598:	ldr	r1, [r6]
   1759c:	bl	1f440 <__assert_fail@plt+0xcd54>
   175a0:	mov	r0, #0
   175a4:	b	17428 <__assert_fail@plt+0x4d3c>
   175a8:	andeq	lr, r4, ip, lsl sp
   175ac:	andeq	lr, r4, r0, ror #10
   175b0:	andeq	r8, r3, fp, ror lr
   175b4:	andeq	lr, r4, ip, ror #10
   175b8:	andeq	r8, r3, r2, lsr #29
   175bc:	andeq	r8, r3, r8, ror lr
   175c0:	andeq	r8, r3, r0, ror #26
   175c4:	andeq	r8, r3, ip, ror #29
   175c8:	andeq	r8, r3, r6, ror pc
   175cc:	andeq	r9, r3, r6, asr #32
   175d0:	muleq	r3, fp, r0
   175d4:	andeq	r9, r3, r8, ror #2
   175d8:	andeq	r9, r3, r5, lsl #7
   175dc:	andeq	r9, r3, r5, lsl #9
   175e0:	muleq	r3, sp, r4
   175e4:	ldrdeq	r9, [r3], -r8
   175e8:	andeq	r9, r3, sp, lsl r5
   175ec:	andeq	r9, r3, r7, ror r5
   175f0:	andeq	r8, r3, r5, ror r0
   175f4:	andeq	r9, r3, r6, lsr r5
   175f8:	bx	lr
   175fc:	push	{lr}		; (str lr, [sp, #-4]!)
   17600:	vpush	{d8}
   17604:	sub	sp, sp, #396	; 0x18c
   17608:	mov	r0, sp
   1760c:	bl	12164 <uname@plt>
   17610:	cmp	r0, #0
   17614:	bne	17670 <__assert_fail@plt+0x4f84>
   17618:	add	r0, sp, #130	; 0x82
   1761c:	bl	1262c <atof@plt>
   17620:	mov	r1, sp
   17624:	ldr	r0, [pc, #84]	; 17680 <__assert_fail@plt+0x4f94>
   17628:	vcvt.f32.f64	s16, d0
   1762c:	bl	11ffc <strcmp@plt>
   17630:	cmp	r0, #0
   17634:	vldreq	s15, [pc, #60]	; 17678 <__assert_fail@plt+0x4f8c>
   17638:	beq	17654 <__assert_fail@plt+0x4f68>
   1763c:	mov	r1, sp
   17640:	ldr	r0, [pc, #60]	; 17684 <__assert_fail@plt+0x4f98>
   17644:	bl	11ffc <strcmp@plt>
   17648:	cmp	r0, #0
   1764c:	bne	17670 <__assert_fail@plt+0x4f84>
   17650:	vldr	s15, [pc, #36]	; 1767c <__assert_fail@plt+0x4f90>
   17654:	vcmpe.f32	s16, s15
   17658:	vmrs	APSR_nzcv, fpscr
   1765c:	movge	r0, #1
   17660:	movlt	r0, #0
   17664:	add	sp, sp, #396	; 0x18c
   17668:	vpop	{d8}
   1766c:	pop	{pc}		; (ldr pc, [sp], #4)
   17670:	mov	r0, #1
   17674:	b	17664 <__assert_fail@plt+0x4f78>
   17678:	andmi	ip, ip, sp, asr #25
   1767c:	submi	r6, r6, r6, ror #12
   17680:	andeq	r9, r3, r8, ror r5
   17684:	andeq	r9, r3, lr, ror r5
   17688:	push	{r4, lr}
   1768c:	ldr	r4, [pc, #28]	; 176b0 <__assert_fail@plt+0x4fc4>
   17690:	ldrb	r3, [r4, #32]
   17694:	cmp	r3, #0
   17698:	popeq	{r4, pc}
   1769c:	bl	15c9c <__assert_fail@plt+0x35b0>
   176a0:	bl	171b8 <__assert_fail@plt+0x4acc>
   176a4:	mov	r3, #0
   176a8:	strb	r3, [r4, #32]
   176ac:	pop	{r4, pc}
   176b0:	andeq	lr, r4, r8, asr lr
   176b4:	push	{r0, r1, r2, r4, r5, lr}
   176b8:	mov	r0, #8
   176bc:	ldr	r4, [pc, #108]	; 17730 <__assert_fail@plt+0x5044>
   176c0:	bl	273e0 <__assert_fail@plt+0x14cf4>
   176c4:	str	r0, [r4]
   176c8:	bl	267fc <__assert_fail@plt+0x14110>
   176cc:	cmp	r0, #0
   176d0:	beq	17728 <__assert_fail@plt+0x503c>
   176d4:	bl	12404 <__errno_location@plt>
   176d8:	mov	r2, #5
   176dc:	ldr	r1, [pc, #80]	; 17734 <__assert_fail@plt+0x5048>
   176e0:	ldr	r5, [r0]
   176e4:	mov	r0, #0
   176e8:	bl	1217c <dcgettext@plt>
   176ec:	ldr	r3, [r4]
   176f0:	mov	r2, r0
   176f4:	ldr	r1, [r3]
   176f8:	cmp	r1, #0
   176fc:	bge	17710 <__assert_fail@plt+0x5024>
   17700:	ldr	r1, [r3, #4]
   17704:	cmp	r1, #0
   17708:	ldrne	r3, [pc, #40]	; 17738 <__assert_fail@plt+0x504c>
   1770c:	bne	17718 <__assert_fail@plt+0x502c>
   17710:	ldr	r3, [pc, #36]	; 1773c <__assert_fail@plt+0x5050>
   17714:	mov	r1, r3
   17718:	mov	r0, #1
   1771c:	str	r1, [sp]
   17720:	mov	r1, r5
   17724:	bl	122c0 <error@plt>
   17728:	add	sp, sp, #12
   1772c:	pop	{r4, r5, pc}
   17730:	andeq	lr, r4, r0, lsl #11
   17734:	andeq	r9, r3, r6, lsl #11
   17738:	ldrdeq	sl, [r3], -r1
   1773c:	andeq	r9, r3, r7, ror r5
   17740:	ldr	r3, [pc, #112]	; 177b8 <__assert_fail@plt+0x50cc>
   17744:	push	{r4, r5, r6, lr}
   17748:	mov	r4, r0
   1774c:	ldr	r0, [r3, #16]
   17750:	cmn	r0, #100	; 0x64
   17754:	cmpne	r0, #0
   17758:	bge	17770 <__assert_fail@plt+0x5084>
   1775c:	ldr	r3, [pc, #88]	; 177bc <__assert_fail@plt+0x50d0>
   17760:	movw	r2, #605	; 0x25d
   17764:	ldr	r1, [pc, #84]	; 177c0 <__assert_fail@plt+0x50d4>
   17768:	ldr	r0, [pc, #84]	; 177c4 <__assert_fail@plt+0x50d8>
   1776c:	bl	126ec <__assert_fail@plt>
   17770:	ldr	r3, [r3]
   17774:	mov	r5, r1
   17778:	cmp	r3, #0
   1777c:	bne	177a4 <__assert_fail@plt+0x50b8>
   17780:	mov	r2, r1
   17784:	mov	r1, r4
   17788:	bl	37914 <__assert_fail@plt+0x25228>
   1778c:	subs	r2, r0, #0
   17790:	popeq	{r4, r5, r6, pc}
   17794:	mov	r1, r5
   17798:	mov	r0, r4
   1779c:	pop	{r4, r5, r6, lr}
   177a0:	b	172f4 <__assert_fail@plt+0x4c08>
   177a4:	mov	r2, r1
   177a8:	mov	r3, #256	; 0x100
   177ac:	mov	r1, r4
   177b0:	pop	{r4, r5, r6, lr}
   177b4:	b	37914 <__assert_fail@plt+0x25228>
   177b8:	andeq	lr, r4, r8, asr lr
   177bc:	andeq	r8, r3, ip, asr #27
   177c0:	andeq	r8, r3, r2, lsl #28
   177c4:			; <UNDEFINED> instruction: 0x000395b3
   177c8:	ldr	r3, [pc, #84]	; 17824 <__assert_fail@plt+0x5138>
   177cc:	push	{r4, r5, r6, lr}
   177d0:	mov	r4, r0
   177d4:	ldr	r0, [r3, #16]
   177d8:	cmn	r0, #100	; 0x64
   177dc:	cmpne	r0, #0
   177e0:	bge	177f8 <__assert_fail@plt+0x510c>
   177e4:	ldr	r3, [pc, #60]	; 17828 <__assert_fail@plt+0x513c>
   177e8:	mov	r2, #636	; 0x27c
   177ec:	ldr	r1, [pc, #56]	; 1782c <__assert_fail@plt+0x5140>
   177f0:	ldr	r0, [pc, #56]	; 17830 <__assert_fail@plt+0x5144>
   177f4:	bl	126ec <__assert_fail@plt>
   177f8:	mov	r2, r1
   177fc:	mov	r5, r1
   17800:	mov	r3, #0
   17804:	mov	r1, r4
   17808:	bl	37914 <__assert_fail@plt+0x25228>
   1780c:	subs	r2, r0, #0
   17810:	popeq	{r4, r5, r6, pc}
   17814:	mov	r1, r5
   17818:	mov	r0, r4
   1781c:	pop	{r4, r5, r6, lr}
   17820:	b	172f4 <__assert_fail@plt+0x4c08>
   17824:	andeq	lr, r4, r8, asr lr
   17828:	ldrdeq	r8, [r3], -r9
   1782c:	andeq	r8, r3, r2, lsl #28
   17830:			; <UNDEFINED> instruction: 0x000395b3
   17834:	ldr	r3, [pc, #56]	; 17874 <__assert_fail@plt+0x5188>
   17838:	mov	ip, r0
   1783c:	ldr	r0, [r3, #16]
   17840:	cmn	r0, #100	; 0x64
   17844:	cmpne	r0, #0
   17848:	bge	17864 <__assert_fail@plt+0x5178>
   1784c:	push	{r4, lr}
   17850:	movw	r2, #653	; 0x28d
   17854:	ldr	r3, [pc, #28]	; 17878 <__assert_fail@plt+0x518c>
   17858:	ldr	r1, [pc, #28]	; 1787c <__assert_fail@plt+0x5190>
   1785c:	ldr	r0, [pc, #28]	; 17880 <__assert_fail@plt+0x5194>
   17860:	bl	126ec <__assert_fail@plt>
   17864:	mov	r2, r1
   17868:	mov	r3, #256	; 0x100
   1786c:	mov	r1, ip
   17870:	b	37914 <__assert_fail@plt+0x25228>
   17874:	andeq	lr, r4, r8, asr lr
   17878:	andeq	r8, r3, r6, ror #27
   1787c:	andeq	r8, r3, r2, lsl #28
   17880:	andeq	r9, r3, r9, asr #11
   17884:	ldr	r2, [pc, #152]	; 17924 <__assert_fail@plt+0x5238>
   17888:	push	{r4, r5, r6, lr}
   1788c:	mov	r5, r1
   17890:	mov	r4, r0
   17894:	ldr	r3, [r2]
   17898:	ldr	r1, [r2, #4]
   1789c:	adds	r3, r3, #1
   178a0:	str	r3, [r2]
   178a4:	adc	r1, r1, #0
   178a8:	ldr	r3, [pc, #120]	; 17928 <__assert_fail@plt+0x523c>
   178ac:	str	r1, [r2, #4]
   178b0:	mov	r2, r0
   178b4:	ldr	r1, [pc, #112]	; 1792c <__assert_fail@plt+0x5240>
   178b8:	ldr	r0, [r3]
   178bc:	bl	123f8 <fprintf@plt>
   178c0:	ldr	r3, [pc, #104]	; 17930 <__assert_fail@plt+0x5244>
   178c4:	ldr	r3, [r3, #48]	; 0x30
   178c8:	cmp	r3, #1
   178cc:	beq	178f4 <__assert_fail@plt+0x5208>
   178d0:	cmp	r3, #0
   178d4:	beq	17914 <__assert_fail@plt+0x5228>
   178d8:	cmp	r3, #2
   178dc:	beq	17904 <__assert_fail@plt+0x5218>
   178e0:	ldr	r3, [pc, #76]	; 17934 <__assert_fail@plt+0x5248>
   178e4:	movw	r2, #677	; 0x2a5
   178e8:	ldr	r1, [pc, #72]	; 17938 <__assert_fail@plt+0x524c>
   178ec:	ldr	r0, [pc, #72]	; 1793c <__assert_fail@plt+0x5250>
   178f0:	bl	126ec <__assert_fail@plt>
   178f4:	mov	r1, r5
   178f8:	mov	r0, r4
   178fc:	pop	{r4, r5, r6, lr}
   17900:	b	177c8 <__assert_fail@plt+0x50dc>
   17904:	mov	r1, r5
   17908:	mov	r0, r4
   1790c:	pop	{r4, r5, r6, lr}
   17910:	b	17740 <__assert_fail@plt+0x5054>
   17914:	mov	r1, r5
   17918:	mov	r0, r4
   1791c:	pop	{r4, r5, r6, lr}
   17920:	b	17834 <__assert_fail@plt+0x5148>
   17924:	andeq	lr, r4, r8, lsr #11
   17928:	andeq	lr, r4, r0, ror #10
   1792c:	andeq	r9, r3, r1, lsl #12
   17930:	andeq	lr, r4, r4, lsl #29
   17934:	strdeq	r8, [r3], -r3
   17938:	andeq	r8, r3, r2, lsl #28
   1793c:	ldrdeq	r8, [r3], -r2
   17940:	ldr	r3, [pc, #36]	; 1796c <__assert_fail@plt+0x5280>
   17944:	ldr	r0, [r3, #48]	; 0x30
   17948:	cmp	r0, #1
   1794c:	bxeq	lr
   17950:	cmp	r0, #2
   17954:	ldreq	r3, [pc, #20]	; 17970 <__assert_fail@plt+0x5284>
   17958:	ldreq	r0, [r3]
   1795c:	clzeq	r0, r0
   17960:	lsreq	r0, r0, #5
   17964:	movne	r0, #0
   17968:	bx	lr
   1796c:	andeq	lr, r4, r4, lsl #29
   17970:	andeq	lr, r4, r8, asr lr
   17974:	cmp	r0, #0
   17978:	bne	17984 <__assert_fail@plt+0x5298>
   1797c:	mov	r0, #1
   17980:	bx	lr
   17984:	ldrb	r3, [r0, #17]
   17988:	cmp	r3, #0
   1798c:	ldreq	r0, [r0, #152]	; 0x98
   17990:	beq	17974 <__assert_fail@plt+0x5288>
   17994:	mov	r0, #0
   17998:	bx	lr
   1799c:	ldrb	r3, [r0]
   179a0:	sub	r3, r3, #33	; 0x21
   179a4:	cmp	r3, #12
   179a8:	ldrls	pc, [pc, r3, lsl #2]
   179ac:	b	17a18 <__assert_fail@plt+0x532c>
   179b0:	andeq	r7, r1, r8, lsl #20
   179b4:	andeq	r7, r1, r8, lsl sl
   179b8:	andeq	r7, r1, r8, lsl sl
   179bc:	andeq	r7, r1, r8, lsl sl
   179c0:	andeq	r7, r1, r8, lsl sl
   179c4:	andeq	r7, r1, r8, lsl sl
   179c8:	andeq	r7, r1, r8, lsl sl
   179cc:	andeq	r7, r1, r8, lsl #20
   179d0:	strdeq	r7, [r1], -r4
   179d4:	andeq	r7, r1, r8, lsl sl
   179d8:	andeq	r7, r1, r8, lsl sl
   179dc:	strdeq	r7, [r1], -r4
   179e0:	andeq	r7, r1, r4, ror #19
   179e4:	ldrb	r0, [r0, #1]
   179e8:	adds	r0, r0, #0
   179ec:	movne	r0, #1
   179f0:	bx	lr
   179f4:	ldrb	r3, [r0, #1]
   179f8:	cmp	r3, #0
   179fc:	bne	17a18 <__assert_fail@plt+0x532c>
   17a00:	eor	r0, r1, #1
   17a04:	bx	lr
   17a08:	ldrb	r0, [r0, #1]
   17a0c:	clz	r0, r0
   17a10:	lsr	r0, r0, #5
   17a14:	bx	lr
   17a18:	mov	r0, #0
   17a1c:	bx	lr
   17a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a24:	mov	r8, r0
   17a28:	sub	sp, sp, #20
   17a2c:	mov	r9, r1
   17a30:	mov	r4, #1
   17a34:	ldr	sl, [pc, #880]	; 17dac <__assert_fail@plt+0x56c0>
   17a38:	add	fp, sl, #44	; 0x2c
   17a3c:	cmp	r4, r8
   17a40:	bge	17ab4 <__assert_fail@plt+0x53c8>
   17a44:	ldr	r5, [r9, r4, lsl #2]
   17a48:	lsl	r6, r4, #2
   17a4c:	ldr	r0, [pc, #860]	; 17db0 <__assert_fail@plt+0x56c4>
   17a50:	mov	r1, r5
   17a54:	bl	11ffc <strcmp@plt>
   17a58:	cmp	r0, #0
   17a5c:	moveq	r0, #2
   17a60:	beq	17a7c <__assert_fail@plt+0x5390>
   17a64:	mov	r1, r5
   17a68:	ldr	r0, [pc, #836]	; 17db4 <__assert_fail@plt+0x56c8>
   17a6c:	bl	11ffc <strcmp@plt>
   17a70:	cmp	r0, #0
   17a74:	bne	17a88 <__assert_fail@plt+0x539c>
   17a78:	mov	r0, #1
   17a7c:	bl	1d314 <__assert_fail@plt+0xac28>
   17a80:	add	r4, r4, #1
   17a84:	b	17a3c <__assert_fail@plt+0x5350>
   17a88:	mov	r1, r5
   17a8c:	ldr	r0, [pc, #804]	; 17db8 <__assert_fail@plt+0x56cc>
   17a90:	bl	11ffc <strcmp@plt>
   17a94:	cmp	r0, #0
   17a98:	beq	17a7c <__assert_fail@plt+0x5390>
   17a9c:	mov	r1, r5
   17aa0:	ldr	r0, [pc, #788]	; 17dbc <__assert_fail@plt+0x56d0>
   17aa4:	bl	11ffc <strcmp@plt>
   17aa8:	cmp	r0, #0
   17aac:	bne	17ac0 <__assert_fail@plt+0x53d4>
   17ab0:	add	r4, r4, #1
   17ab4:	mov	r0, r4
   17ab8:	add	sp, sp, #20
   17abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ac0:	mov	r1, r5
   17ac4:	ldr	r0, [pc, #756]	; 17dc0 <__assert_fail@plt+0x56d4>
   17ac8:	bl	11ffc <strcmp@plt>
   17acc:	subs	r3, r0, #0
   17ad0:	bne	17c6c <__assert_fail@plt+0x5580>
   17ad4:	add	r4, r4, #1
   17ad8:	cmp	r4, r8
   17adc:	blt	17b0c <__assert_fail@plt+0x5420>
   17ae0:	mov	r2, #5
   17ae4:	ldr	r1, [pc, #728]	; 17dc4 <__assert_fail@plt+0x56d8>
   17ae8:	str	r3, [sp, #4]
   17aec:	bl	1217c <dcgettext@plt>
   17af0:	ldr	r3, [sp, #4]
   17af4:	mov	r2, r0
   17af8:	mov	r1, r3
   17afc:	mov	r0, r1
   17b00:	bl	122c0 <error@plt>
   17b04:	mov	r0, #1
   17b08:	bl	173ec <__assert_fail@plt+0x4d00>
   17b0c:	add	r6, r9, r6
   17b10:	str	r3, [sp, #12]
   17b14:	mov	r3, #44	; 0x2c
   17b18:	ldr	r7, [r6, #4]
   17b1c:	add	r2, sp, #12
   17b20:	add	r1, sp, #8
   17b24:	strh	r3, [sp, #8]
   17b28:	mov	r6, #1
   17b2c:	mov	r0, r7
   17b30:	bl	122b4 <strtok_r@plt>
   17b34:	mov	r5, r0
   17b38:	cmp	r5, #0
   17b3c:	bne	17b64 <__assert_fail@plt+0x5478>
   17b40:	cmp	r6, #0
   17b44:	beq	17c10 <__assert_fail@plt+0x5524>
   17b48:	mov	r2, #5
   17b4c:	ldr	r1, [pc, #628]	; 17dc8 <__assert_fail@plt+0x56dc>
   17b50:	mov	r0, r5
   17b54:	bl	1217c <dcgettext@plt>
   17b58:	mov	r2, r0
   17b5c:	mov	r1, r5
   17b60:	b	17afc <__assert_fail@plt+0x5410>
   17b64:	mov	r6, #0
   17b68:	mov	r2, #12
   17b6c:	mul	r3, r2, r6
   17b70:	mov	r1, r5
   17b74:	ldr	r0, [r3, fp]
   17b78:	str	r3, [sp, #4]
   17b7c:	bl	11ffc <strcmp@plt>
   17b80:	cmp	r0, #0
   17b84:	mov	r2, #12
   17b88:	ldr	r3, [sp, #4]
   17b8c:	bne	17bc4 <__assert_fail@plt+0x54d8>
   17b90:	ldr	r1, [pc, #564]	; 17dcc <__assert_fail@plt+0x56e0>
   17b94:	add	r3, sl, r3
   17b98:	ldr	r3, [r3, #48]	; 0x30
   17b9c:	ldr	r2, [r1, #44]	; 0x2c
   17ba0:	orr	r3, r2, r3
   17ba4:	str	r3, [r1, #44]	; 0x2c
   17ba8:	add	r2, sp, #12
   17bac:	add	r1, sp, #8
   17bb0:	mov	r0, #0
   17bb4:	mov	r6, #0
   17bb8:	bl	122b4 <strtok_r@plt>
   17bbc:	mov	r5, r0
   17bc0:	b	17b38 <__assert_fail@plt+0x544c>
   17bc4:	add	r6, r6, #1
   17bc8:	cmp	r6, #9
   17bcc:	bne	17b6c <__assert_fail@plt+0x5480>
   17bd0:	mov	r2, #5
   17bd4:	ldr	r1, [pc, #500]	; 17dd0 <__assert_fail@plt+0x56e4>
   17bd8:	mov	r0, #0
   17bdc:	bl	1217c <dcgettext@plt>
   17be0:	ldr	r3, [pc, #484]	; 17dcc <__assert_fail@plt+0x56e0>
   17be4:	mov	r5, r0
   17be8:	mov	r2, r7
   17bec:	mov	r0, #0
   17bf0:	ldr	r1, [r3, #72]	; 0x48
   17bf4:	bl	265a0 <__assert_fail@plt+0x13eb4>
   17bf8:	mov	r1, #0
   17bfc:	mov	r3, r0
   17c00:	mov	r2, r5
   17c04:	mov	r0, r1
   17c08:	bl	122c0 <error@plt>
   17c0c:	b	17ba8 <__assert_fail@plt+0x54bc>
   17c10:	ldr	r3, [pc, #436]	; 17dcc <__assert_fail@plt+0x56e0>
   17c14:	ldr	r3, [r3, #44]	; 0x2c
   17c18:	tst	r3, #16
   17c1c:	beq	17a80 <__assert_fail@plt+0x5394>
   17c20:	ldr	r4, [pc, #428]	; 17dd4 <__assert_fail@plt+0x56e8>
   17c24:	mov	r2, #5
   17c28:	mov	r0, r6
   17c2c:	ldr	r1, [pc, #420]	; 17dd8 <__assert_fail@plt+0x56ec>
   17c30:	bl	1217c <dcgettext@plt>
   17c34:	ldr	r5, [pc, #416]	; 17ddc <__assert_fail@plt+0x56f0>
   17c38:	ldr	r1, [r4]
   17c3c:	ldr	r7, [pc, #412]	; 17de0 <__assert_fail@plt+0x56f4>
   17c40:	bl	12680 <fputs@plt>
   17c44:	mov	r1, r7
   17c48:	add	r6, r6, #1
   17c4c:	ldr	r0, [r4]
   17c50:	ldr	r3, [r5, #8]
   17c54:	ldr	r2, [r5], #12
   17c58:	bl	123f8 <fprintf@plt>
   17c5c:	cmp	r6, #9
   17c60:	bne	17c44 <__assert_fail@plt+0x5558>
   17c64:	mov	r0, #0
   17c68:	bl	1238c <exit@plt>
   17c6c:	mov	r2, #2
   17c70:	mov	r1, r5
   17c74:	ldr	r0, [pc, #360]	; 17de4 <__assert_fail@plt+0x56f8>
   17c78:	bl	1268c <strncmp@plt>
   17c7c:	subs	r7, r0, #0
   17c80:	bne	17ab4 <__assert_fail@plt+0x53c8>
   17c84:	add	r6, r5, #2
   17c88:	ldrb	r5, [r5, #2]
   17c8c:	cmp	r5, #0
   17c90:	bne	17cb0 <__assert_fail@plt+0x55c4>
   17c94:	ldr	r1, [pc, #332]	; 17de8 <__assert_fail@plt+0x56fc>
   17c98:	mov	r2, #5
   17c9c:	bl	1217c <dcgettext@plt>
   17ca0:	mov	r2, r0
   17ca4:	mov	r1, #0
   17ca8:	mov	r0, #1
   17cac:	bl	122c0 <error@plt>
   17cb0:	bl	12374 <__ctype_b_loc@plt>
   17cb4:	ldr	r3, [r0]
   17cb8:	lsl	r5, r5, #1
   17cbc:	ldrh	r5, [r3, r5]
   17cc0:	ands	r5, r5, #2048	; 0x800
   17cc4:	bne	17cd8 <__assert_fail@plt+0x55ec>
   17cc8:	mov	r2, #5
   17ccc:	ldr	r1, [pc, #280]	; 17dec <__assert_fail@plt+0x5700>
   17cd0:	mov	r0, r5
   17cd4:	b	17c9c <__assert_fail@plt+0x55b0>
   17cd8:	bl	12404 <__errno_location@plt>
   17cdc:	mov	r5, r0
   17ce0:	mov	r2, #10
   17ce4:	ldr	r3, [r5]
   17ce8:	add	r1, sp, #12
   17cec:	mov	r0, r6
   17cf0:	str	r7, [r5]
   17cf4:	str	r3, [sp, #4]
   17cf8:	bl	123b0 <strtoul@plt>
   17cfc:	subs	r7, r0, #0
   17d00:	ldr	r3, [sp, #12]
   17d04:	bne	17d18 <__assert_fail@plt+0x562c>
   17d08:	cmp	r6, r3
   17d0c:	moveq	r2, #5
   17d10:	ldreq	r1, [pc, #212]	; 17dec <__assert_fail@plt+0x5700>
   17d14:	beq	17c9c <__assert_fail@plt+0x55b0>
   17d18:	ldrb	r0, [r3]
   17d1c:	cmp	r0, #0
   17d20:	beq	17d48 <__assert_fail@plt+0x565c>
   17d24:	mov	r2, #5
   17d28:	ldr	r1, [pc, #192]	; 17df0 <__assert_fail@plt+0x5704>
   17d2c:	mov	r0, #0
   17d30:	bl	1217c <dcgettext@plt>
   17d34:	mov	r3, r6
   17d38:	mov	r2, r0
   17d3c:	mov	r1, #0
   17d40:	mov	r0, #1
   17d44:	bl	122c0 <error@plt>
   17d48:	cmn	r7, #1
   17d4c:	bne	17d90 <__assert_fail@plt+0x56a4>
   17d50:	ldr	r4, [r5]
   17d54:	cmp	r4, #0
   17d58:	bne	17d74 <__assert_fail@plt+0x5688>
   17d5c:	mov	r2, #5
   17d60:	ldr	r1, [pc, #140]	; 17df4 <__assert_fail@plt+0x5708>
   17d64:	mov	r0, #0
   17d68:	bl	1217c <dcgettext@plt>
   17d6c:	mov	r3, r7
   17d70:	b	17d38 <__assert_fail@plt+0x564c>
   17d74:	mov	r2, #5
   17d78:	ldr	r1, [pc, #112]	; 17df0 <__assert_fail@plt+0x5704>
   17d7c:	bl	1217c <dcgettext@plt>
   17d80:	mov	r2, r0
   17d84:	mov	r3, r6
   17d88:	mov	r1, r4
   17d8c:	b	17d40 <__assert_fail@plt+0x5654>
   17d90:	cmp	r7, #65536	; 0x10000
   17d94:	bcs	17d5c <__assert_fail@plt+0x5670>
   17d98:	ldr	r3, [pc, #44]	; 17dcc <__assert_fail@plt+0x56e0>
   17d9c:	strh	r7, [r3, #68]	; 0x44
   17da0:	ldr	r3, [sp, #4]
   17da4:	str	r3, [r5]
   17da8:	b	17a80 <__assert_fail@plt+0x5394>
   17dac:	andeq	r8, r3, r4, lsr sp
   17db0:	andeq	r9, r3, r2, lsl r6
   17db4:	andeq	r9, r3, r5, lsl r6
   17db8:	andeq	r9, r3, r8, lsl r6
   17dbc:	andeq	r9, r3, fp, lsl r6
   17dc0:	andeq	r9, r3, lr, lsl r6
   17dc4:	andeq	r9, r3, r1, lsr #12
   17dc8:	andeq	r9, r3, r7, asr #12
   17dcc:	andeq	lr, r4, r4, lsl #29
   17dd0:	andeq	r9, r3, sp, ror #14
   17dd4:	andeq	lr, r4, ip, ror #10
   17dd8:	andeq	r9, r3, sp, lsl r5
   17ddc:	andeq	r8, r3, r0, ror #26
   17de0:	andeq	r9, r3, r8, ror #12
   17de4:	andeq	r9, r3, r4, ror #13
   17de8:	andeq	r9, r3, r2, ror r6
   17dec:			; <UNDEFINED> instruction: 0x000396b2
   17df0:	andeq	r9, r3, r7, ror #13
   17df4:	andeq	r9, r3, r5, lsl #14
   17df8:	push	{r0, r1, r4, r5, r6, lr}
   17dfc:	mov	r4, r0
   17e00:	mov	r5, #0
   17e04:	ldr	r0, [pc, #316]	; 17f48 <__assert_fail@plt+0x585c>
   17e08:	bl	122fc <getenv@plt>
   17e0c:	adds	r0, r0, #0
   17e10:	movne	r0, #1
   17e14:	strb	r0, [r4, #17]
   17e18:	bl	175fc <__assert_fail@plt+0x4f10>
   17e1c:	strb	r0, [r4, #56]	; 0x38
   17e20:	mov	r0, r5
   17e24:	str	r5, [r4, #60]	; 0x3c
   17e28:	bl	1265c <isatty@plt>
   17e2c:	cmp	r0, #0
   17e30:	mov	r1, #0
   17e34:	movne	r3, #1
   17e38:	strbeq	r0, [r4, #15]
   17e3c:	strbne	r3, [r4, #16]
   17e40:	ldrb	r3, [r4, #17]
   17e44:	strbeq	r0, [r4, #16]
   17e48:	mov	r0, sp
   17e4c:	strbne	r5, [r4, #15]
   17e50:	cmp	r3, #0
   17e54:	movne	r3, #0
   17e58:	strbne	r3, [r4, #16]
   17e5c:	mov	r3, #1
   17e60:	strh	r3, [r4]
   17e64:	mvn	r3, #0
   17e68:	str	r3, [r4, #4]
   17e6c:	str	r3, [r4, #8]
   17e70:	bl	12284 <gettimeofday@plt>
   17e74:	cmp	r0, #0
   17e78:	bne	17f00 <__assert_fail@plt+0x5814>
   17e7c:	ldm	sp, {r0, r2}
   17e80:	mov	r3, #1000	; 0x3e8
   17e84:	mul	r3, r3, r2
   17e88:	mov	r5, #0
   17e8c:	str	r3, [r4, #24]
   17e90:	str	r3, [r4, #32]
   17e94:	ldrb	r3, [r4, #17]
   17e98:	str	r0, [r4, #20]
   17e9c:	sub	r0, r0, #86016	; 0x15000
   17ea0:	sub	r0, r0, #384	; 0x180
   17ea4:	strb	r5, [r4, #13]
   17ea8:	strb	r5, [r4, #14]
   17eac:	str	r0, [r4, #28]
   17eb0:	cmp	r3, r5
   17eb4:	ldr	r0, [pc, #144]	; 17f4c <__assert_fail@plt+0x5860>
   17eb8:	movne	r3, #512	; 0x200
   17ebc:	moveq	r3, #1024	; 0x400
   17ec0:	strb	r5, [r4, #36]	; 0x24
   17ec4:	str	r3, [r4, #40]	; 0x28
   17ec8:	mov	r3, #2
   17ecc:	str	r5, [r4, #44]	; 0x2c
   17ed0:	strh	r3, [r4, #68]	; 0x44
   17ed4:	bl	122fc <getenv@plt>
   17ed8:	subs	r6, r0, #0
   17edc:	beq	17f28 <__assert_fail@plt+0x583c>
   17ee0:	mov	r2, #5
   17ee4:	ldr	r1, [pc, #100]	; 17f50 <__assert_fail@plt+0x5864>
   17ee8:	mov	r0, r5
   17eec:	bl	1217c <dcgettext@plt>
   17ef0:	mov	r2, r0
   17ef4:	mov	r1, r5
   17ef8:	mov	r0, #1
   17efc:	bl	122c0 <error@plt>
   17f00:	mov	r0, #0
   17f04:	bl	1214c <time@plt>
   17f08:	cmn	r0, #1
   17f0c:	movne	r3, #0
   17f10:	bne	17e88 <__assert_fail@plt+0x579c>
   17f14:	ldr	r3, [pc, #56]	; 17f54 <__assert_fail@plt+0x5868>
   17f18:	movw	r2, #978	; 0x3d2
   17f1c:	ldr	r1, [pc, #52]	; 17f58 <__assert_fail@plt+0x586c>
   17f20:	ldr	r0, [pc, #52]	; 17f5c <__assert_fail@plt+0x5870>
   17f24:	bl	126ec <__assert_fail@plt>
   17f28:	strb	r6, [r4, #12]
   17f2c:	bl	1d314 <__assert_fail@plt+0xac28>
   17f30:	mov	r3, #8
   17f34:	str	r3, [r4, #72]	; 0x48
   17f38:	str	r6, [r4, #76]	; 0x4c
   17f3c:	strb	r6, [r4, #80]	; 0x50
   17f40:	add	sp, sp, #8
   17f44:	pop	{r4, r5, r6, pc}
   17f48:	muleq	r3, r1, r7
   17f4c:			; <UNDEFINED> instruction: 0x000397b1
   17f50:	andeq	r9, r3, r1, asr #15
   17f54:	strdeq	r8, [r3], -lr
   17f58:	andeq	r8, r3, r2, lsl #28
   17f5c:	andeq	r9, r3, r1, lsr #15
   17f60:	ldr	r2, [pc, #20]	; 17f7c <__assert_fail@plt+0x5890>
   17f64:	ldr	r3, [pc, #20]	; 17f80 <__assert_fail@plt+0x5894>
   17f68:	cmp	r3, r0
   17f6c:	cmpne	r2, r0
   17f70:	moveq	r0, #1
   17f74:	movne	r0, #0
   17f78:	bx	lr
   17f7c:	strdeq	r4, [r1], -r8
   17f80:	andeq	r3, r1, r8, lsr lr
   17f84:	ldr	r3, [pc, #8]	; 17f94 <__assert_fail@plt+0x58a8>
   17f88:	mov	r2, r1
   17f8c:	ldr	r1, [r3, #72]	; 0x48
   17f90:	b	265a0 <__assert_fail@plt+0x13eb4>
   17f94:	andeq	lr, r4, r4, lsl #29
   17f98:	push	{r4, r5, r6, r7, r8, lr}
   17f9c:	subs	r4, r2, #0
   17fa0:	mov	r7, r1
   17fa4:	ldr	r5, [pc, #80]	; 17ffc <__assert_fail@plt+0x5910>
   17fa8:	beq	17fc4 <__assert_fail@plt+0x58d8>
   17fac:	ldrb	r2, [r5, #40]	; 0x28
   17fb0:	cmp	r2, #0
   17fb4:	beq	17fc4 <__assert_fail@plt+0x58d8>
   17fb8:	mov	r3, #1
   17fbc:	strb	r3, [r5, #40]	; 0x28
   17fc0:	pop	{r4, r5, r6, r7, r8, pc}
   17fc4:	mov	r1, r3
   17fc8:	mov	r6, r0
   17fcc:	mov	r0, #0
   17fd0:	bl	17f84 <__assert_fail@plt+0x5898>
   17fd4:	mov	r3, r0
   17fd8:	ldr	r2, [pc, #32]	; 18000 <__assert_fail@plt+0x5914>
   17fdc:	mov	r1, r7
   17fe0:	mov	r0, r6
   17fe4:	bl	122c0 <error@plt>
   17fe8:	mov	r3, #1
   17fec:	cmp	r4, #0
   17ff0:	str	r3, [r5, #28]
   17ff4:	popeq	{r4, r5, r6, r7, r8, pc}
   17ff8:	b	17fb8 <__assert_fail@plt+0x58cc>
   17ffc:	andeq	lr, r4, r8, asr lr
   18000:	andeq	sp, r3, fp, lsl r2
   18004:	mov	r3, r1
   18008:	mov	r2, #1
   1800c:	mov	r1, r0
   18010:	mov	r0, #0
   18014:	b	17f98 <__assert_fail@plt+0x58ac>
   18018:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1801c:	mov	r8, r2
   18020:	ldr	r4, [pc, #184]	; 180e0 <__assert_fail@plt+0x59f4>
   18024:	ldrb	r3, [r4, #4]
   18028:	cmp	r3, #0
   1802c:	bne	1809c <__assert_fail@plt+0x59b0>
   18030:	ldr	r5, [pc, #172]	; 180e4 <__assert_fail@plt+0x59f8>
   18034:	mov	r7, r1
   18038:	mov	r6, r0
   1803c:	mov	r1, r2
   18040:	mov	r0, r7
   18044:	ldr	r3, [r5, #52]	; 0x34
   18048:	blx	r3
   1804c:	cmp	r0, #0
   18050:	bne	180b4 <__assert_fail@plt+0x59c8>
   18054:	ldr	r6, [r8, #16]
   18058:	cmp	r6, #0
   1805c:	bne	1809c <__assert_fail@plt+0x59b0>
   18060:	mov	r2, #5
   18064:	ldr	r1, [pc, #124]	; 180e8 <__assert_fail@plt+0x59fc>
   18068:	bl	1217c <dcgettext@plt>
   1806c:	mov	r9, r0
   18070:	mov	r2, r7
   18074:	ldr	r1, [r5, #72]	; 0x48
   18078:	mov	r0, r6
   1807c:	bl	265a0 <__assert_fail@plt+0x13eb4>
   18080:	mov	r3, r0
   18084:	mov	r2, r9
   18088:	mov	r1, r6
   1808c:	mov	r0, r6
   18090:	bl	122c0 <error@plt>
   18094:	mov	r3, #1
   18098:	str	r3, [r4, #28]
   1809c:	movw	r3, #257	; 0x101
   180a0:	mov	r0, #0
   180a4:	strh	r3, [r4, #4]
   180a8:	ldr	r3, [r8, #16]
   180ac:	str	r3, [r4, #8]
   180b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   180b4:	ldrb	r4, [r5, #14]
   180b8:	bl	12404 <__errno_location@plt>
   180bc:	ldr	r0, [r0]
   180c0:	cmp	r4, #0
   180c4:	beq	180d0 <__assert_fail@plt+0x59e4>
   180c8:	cmp	r0, #2
   180cc:	beq	180d8 <__assert_fail@plt+0x59ec>
   180d0:	mov	r1, r6
   180d4:	bl	18004 <__assert_fail@plt+0x5918>
   180d8:	mvn	r0, #0
   180dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   180e0:	andeq	lr, r4, r8, asr lr
   180e4:	andeq	lr, r4, r4, lsl #29
   180e8:	andeq	r7, r3, r1, ror #22
   180ec:	push	{r4, r5, r6, r7, r8, lr}
   180f0:	mov	r6, r1
   180f4:	mov	r1, r2
   180f8:	mov	r7, r0
   180fc:	mov	r5, r3
   18100:	ldr	r2, [r0]
   18104:	ldrb	r4, [sp, #24]
   18108:	cmp	r2, #0
   1810c:	beq	1817c <__assert_fail@plt+0x5a90>
   18110:	and	r3, r2, #61440	; 0xf000
   18114:	cmp	r3, #40960	; 0xa000
   18118:	bne	18164 <__assert_fail@plt+0x5a78>
   1811c:	bl	17940 <__assert_fail@plt+0x5254>
   18120:	subs	r4, r0, #0
   18124:	beq	18164 <__assert_fail@plt+0x5a78>
   18128:	mov	r2, r5
   1812c:	mov	r0, r6
   18130:	bl	18018 <__assert_fail@plt+0x592c>
   18134:	cmp	r0, #0
   18138:	beq	18148 <__assert_fail@plt+0x5a5c>
   1813c:	mov	r4, #0
   18140:	mov	r0, r4
   18144:	pop	{r4, r5, r6, r7, r8, pc}
   18148:	ldr	r3, [pc, #116]	; 181c4 <__assert_fail@plt+0x5ad8>
   1814c:	ldr	r2, [r5, #16]
   18150:	str	r2, [r3, #8]
   18154:	str	r2, [r7]
   18158:	mov	r2, #1
   1815c:	strb	r2, [r3, #5]
   18160:	b	18140 <__assert_fail@plt+0x5a54>
   18164:	ldr	r3, [pc, #88]	; 181c4 <__assert_fail@plt+0x5ad8>
   18168:	mov	r4, #1
   1816c:	str	r2, [r5, #16]
   18170:	strb	r4, [r3, #5]
   18174:	str	r2, [r3, #8]
   18178:	b	18140 <__assert_fail@plt+0x5a54>
   1817c:	cmp	r4, #0
   18180:	beq	18194 <__assert_fail@plt+0x5aa8>
   18184:	ldr	r3, [pc, #56]	; 181c4 <__assert_fail@plt+0x5ad8>
   18188:	strh	r2, [r3, #4]
   1818c:	str	r2, [r3, #8]
   18190:	b	18140 <__assert_fail@plt+0x5a54>
   18194:	mov	r2, r3
   18198:	mov	r0, r6
   1819c:	bl	18018 <__assert_fail@plt+0x592c>
   181a0:	cmp	r0, #0
   181a4:	bne	1813c <__assert_fail@plt+0x5a50>
   181a8:	ldr	r3, [pc, #20]	; 181c4 <__assert_fail@plt+0x5ad8>
   181ac:	mov	r4, #1
   181b0:	ldr	r2, [r5, #16]
   181b4:	str	r2, [r7]
   181b8:	strb	r4, [r3, #5]
   181bc:	str	r2, [r3, #8]
   181c0:	b	18140 <__assert_fail@plt+0x5a54>
   181c4:	andeq	lr, r4, r8, asr lr
   181c8:	ldr	r3, [r2, #164]	; 0xa4
   181cc:	push	{r4, r5, r6, lr}
   181d0:	mov	r6, r0
   181d4:	mov	r5, r1
   181d8:	mov	r4, r2
   181dc:	add	r3, r3, #1
   181e0:	str	r3, [r2, #164]	; 0xa4
   181e4:	ldrh	r3, [r2, #18]
   181e8:	cmp	r3, #0
   181ec:	bne	18220 <__assert_fail@plt+0x5b34>
   181f0:	ldrb	r3, [r2, #20]
   181f4:	cmp	r3, #0
   181f8:	bne	18220 <__assert_fail@plt+0x5b34>
   181fc:	mov	r2, r4
   18200:	mov	r1, r5
   18204:	ldr	r3, [r4]
   18208:	mov	r0, r6
   1820c:	blx	r3
   18210:	cmp	r0, #0
   18214:	bne	182b0 <__assert_fail@plt+0x5bc4>
   18218:	mov	r0, #0
   1821c:	pop	{r4, r5, r6, pc}
   18220:	ldrb	r3, [r4, #18]
   18224:	cmp	r3, #0
   18228:	beq	1823c <__assert_fail@plt+0x5b50>
   1822c:	ldr	r3, [pc, #140]	; 182c0 <__assert_fail@plt+0x5bd4>
   18230:	ldrb	r3, [r3, #4]
   18234:	cmp	r3, #0
   18238:	beq	18290 <__assert_fail@plt+0x5ba4>
   1823c:	ldrb	r3, [r4, #19]
   18240:	cmp	r3, #0
   18244:	beq	18258 <__assert_fail@plt+0x5b6c>
   18248:	ldr	r3, [pc, #112]	; 182c0 <__assert_fail@plt+0x5bd4>
   1824c:	ldrb	r3, [r3, #5]
   18250:	cmp	r3, #0
   18254:	beq	18290 <__assert_fail@plt+0x5ba4>
   18258:	ldrb	r3, [r4, #20]
   1825c:	cmp	r3, #0
   18260:	beq	181fc <__assert_fail@plt+0x5b10>
   18264:	ldrd	r2, [r5, #96]	; 0x60
   18268:	orrs	r3, r2, r3
   1826c:	beq	18290 <__assert_fail@plt+0x5ba4>
   18270:	ldr	r3, [pc, #72]	; 182c0 <__assert_fail@plt+0x5bd4>
   18274:	ldrb	r3, [r3, #5]
   18278:	cmp	r3, #0
   1827c:	beq	18290 <__assert_fail@plt+0x5ba4>
   18280:	ldr	r3, [r5, #16]
   18284:	and	r3, r3, #61440	; 0xf000
   18288:	cmp	r3, #16384	; 0x4000
   1828c:	bne	181fc <__assert_fail@plt+0x5b10>
   18290:	ldr	r3, [pc, #40]	; 182c0 <__assert_fail@plt+0x5bd4>
   18294:	mov	r2, r5
   18298:	mov	r0, r6
   1829c:	ldr	r1, [r3, #12]
   182a0:	bl	18018 <__assert_fail@plt+0x592c>
   182a4:	cmp	r0, #0
   182a8:	beq	181fc <__assert_fail@plt+0x5b10>
   182ac:	b	18218 <__assert_fail@plt+0x5b2c>
   182b0:	ldr	r3, [r4, #168]	; 0xa8
   182b4:	add	r3, r3, #1
   182b8:	str	r3, [r4, #168]	; 0xa8
   182bc:	pop	{r4, r5, r6, pc}
   182c0:	andeq	lr, r4, r8, asr lr
   182c4:	mov	r2, #1
   182c8:	mov	r3, r1
   182cc:	push	{r4, lr}
   182d0:	mov	r1, r0
   182d4:	mov	r0, r2
   182d8:	bl	17f98 <__assert_fail@plt+0x58ac>
   182dc:	bl	12698 <abort@plt>
   182e0:	mov	r2, #0
   182e4:	mov	r3, r1
   182e8:	mov	r1, r0
   182ec:	mov	r0, r2
   182f0:	b	17f98 <__assert_fail@plt+0x58ac>
   182f4:	push	{r0, r1, r2, r4, r5, lr}
   182f8:	bl	15c9c <__assert_fail@plt+0x35b0>
   182fc:	subs	r4, r0, #0
   18300:	beq	18310 <__assert_fail@plt+0x5c24>
   18304:	ldr	r1, [pc, #240]	; 183fc <__assert_fail@plt+0x5d10>
   18308:	bl	1712c <__assert_fail@plt+0x4a40>
   1830c:	bl	17688 <__assert_fail@plt+0x4f9c>
   18310:	ldr	r3, [pc, #232]	; 18400 <__assert_fail@plt+0x5d14>
   18314:	ldr	r0, [r3, #36]	; 0x24
   18318:	bl	1857c <__assert_fail@plt+0x5e90>
   1831c:	cmp	r4, #0
   18320:	beq	18330 <__assert_fail@plt+0x5c44>
   18324:	ldr	r1, [pc, #216]	; 18404 <__assert_fail@plt+0x5d18>
   18328:	mov	r0, r4
   1832c:	bl	1712c <__assert_fail@plt+0x4a40>
   18330:	ldr	r4, [pc, #208]	; 18408 <__assert_fail@plt+0x5d1c>
   18334:	ldr	r0, [r4]
   18338:	bl	26850 <__assert_fail@plt+0x14164>
   1833c:	subs	r5, r0, #0
   18340:	bne	18398 <__assert_fail@plt+0x5cac>
   18344:	ldr	r0, [r4]
   18348:	bl	2686c <__assert_fail@plt+0x14180>
   1834c:	ldr	r0, [r4]
   18350:	bl	284c4 <__assert_fail@plt+0x15dd8>
   18354:	str	r5, [r4]
   18358:	bl	1e5a4 <__assert_fail@plt+0xbeb8>
   1835c:	cmp	r0, #0
   18360:	beq	1836c <__assert_fail@plt+0x5c80>
   18364:	bl	1e5c0 <__assert_fail@plt+0xbed4>
   18368:	bl	1e580 <__assert_fail@plt+0xbe94>
   1836c:	ldr	r3, [pc, #152]	; 1840c <__assert_fail@plt+0x5d20>
   18370:	ldr	r0, [r3]
   18374:	bl	28474 <__assert_fail@plt+0x15d88>
   18378:	cmn	r0, #1
   1837c:	bne	183f4 <__assert_fail@plt+0x5d08>
   18380:	bl	12404 <__errno_location@plt>
   18384:	ldr	r1, [pc, #132]	; 18410 <__assert_fail@plt+0x5d24>
   18388:	ldr	r0, [r0]
   1838c:	add	sp, sp, #12
   18390:	pop	{r4, r5, lr}
   18394:	b	182e0 <__assert_fail@plt+0x5bf4>
   18398:	bl	12404 <__errno_location@plt>
   1839c:	mov	r2, #5
   183a0:	ldr	r1, [pc, #108]	; 18414 <__assert_fail@plt+0x5d28>
   183a4:	ldr	r5, [r0]
   183a8:	mov	r0, #0
   183ac:	bl	1217c <dcgettext@plt>
   183b0:	ldr	r3, [r4]
   183b4:	mov	r2, r0
   183b8:	ldr	r1, [r3]
   183bc:	cmp	r1, #0
   183c0:	bge	183d4 <__assert_fail@plt+0x5ce8>
   183c4:	ldr	r1, [r3, #4]
   183c8:	cmp	r1, #0
   183cc:	ldrne	r3, [pc, #68]	; 18418 <__assert_fail@plt+0x5d2c>
   183d0:	bne	183dc <__assert_fail@plt+0x5cf0>
   183d4:	ldr	r3, [pc, #64]	; 1841c <__assert_fail@plt+0x5d30>
   183d8:	mov	r1, r3
   183dc:	mov	r0, #0
   183e0:	str	r1, [sp]
   183e4:	mov	r1, r5
   183e8:	bl	122c0 <error@plt>
   183ec:	mov	r0, #1
   183f0:	bl	120ec <_exit@plt>
   183f4:	add	sp, sp, #12
   183f8:	pop	{r4, r5, pc}
   183fc:	muleq	r1, ip, r2
   18400:	andeq	lr, r4, r8, asr lr
   18404:	andeq	r7, r1, r4, ror #2
   18408:	andeq	lr, r4, r0, lsl #11
   1840c:	andeq	lr, r4, ip, ror #10
   18410:	andeq	r9, r3, r3, lsl #17
   18414:	andeq	r9, r3, r3, asr r8
   18418:	ldrdeq	sl, [r3], -r1
   1841c:	andeq	r9, r3, r7, ror r5
   18420:	ldr	r3, [pc, #28]	; 18444 <__assert_fail@plt+0x5d58>
   18424:	mov	r2, #0
   18428:	push	{r4, lr}
   1842c:	strb	r2, [r3, #40]	; 0x28
   18430:	mov	r3, r1
   18434:	mov	r1, r0
   18438:	mov	r0, #1
   1843c:	bl	17f98 <__assert_fail@plt+0x58ac>
   18440:	bl	12698 <abort@plt>
   18444:	andeq	lr, r4, r8, asr lr
   18448:	push	{r4, r5, lr}
   1844c:	ldrd	r2, [r1, #8]
   18450:	ldrd	r4, [r0, #8]
   18454:	cmp	r5, r3
   18458:	cmpeq	r4, r2
   1845c:	bne	1847c <__assert_fail@plt+0x5d90>
   18460:	ldrd	r4, [r0]
   18464:	ldrd	r2, [r1]
   18468:	cmp	r5, r3
   1846c:	cmpeq	r4, r2
   18470:	moveq	r0, #1
   18474:	movne	r0, #0
   18478:	pop	{r4, r5, pc}
   1847c:	mov	r0, #0
   18480:	pop	{r4, r5, pc}
   18484:	push	{r4, r5, r6, lr}
   18488:	mov	r2, r1
   1848c:	mov	r3, #0
   18490:	ldm	r0, {r5, lr}
   18494:	ldr	r4, [r0, #8]
   18498:	ldr	ip, [r0, #12]
   1849c:	eor	r0, r5, r4
   184a0:	eor	r1, lr, ip
   184a4:	bl	376b0 <__assert_fail@plt+0x24fc4>
   184a8:	mov	r0, r2
   184ac:	pop	{r4, r5, r6, pc}
   184b0:	push	{r4, lr}
   184b4:	mov	r4, r0
   184b8:	ldr	r0, [r0, #20]
   184bc:	cmp	r0, #0
   184c0:	beq	184e0 <__assert_fail@plt+0x5df4>
   184c4:	bl	124d0 <fclose@plt>
   184c8:	cmp	r0, #0
   184cc:	beq	184e0 <__assert_fail@plt+0x5df4>
   184d0:	bl	12404 <__errno_location@plt>
   184d4:	ldr	r0, [r0]
   184d8:	ldr	r1, [r4, #16]
   184dc:	bl	18420 <__assert_fail@plt+0x5d34>
   184e0:	ldr	r0, [r4, #16]
   184e4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   184e8:	mov	r0, r4
   184ec:	pop	{r4, lr}
   184f0:	b	284c4 <__assert_fail@plt+0x15dd8>
   184f4:	push	{r0, r1, r2, r4, r5, lr}
   184f8:	mov	r5, r0
   184fc:	mov	r0, #8
   18500:	bl	2a340 <__assert_fail@plt+0x17c54>
   18504:	subs	r4, r0, #0
   18508:	beq	18564 <__assert_fail@plt+0x5e78>
   1850c:	mov	r0, r5
   18510:	bl	12188 <strdup@plt>
   18514:	cmp	r0, #0
   18518:	mov	r5, r0
   1851c:	str	r0, [r4]
   18520:	beq	18558 <__assert_fail@plt+0x5e6c>
   18524:	ldr	r3, [pc, #68]	; 18570 <__assert_fail@plt+0x5e84>
   18528:	mov	r1, #0
   1852c:	mov	r0, #11
   18530:	ldr	r2, [pc, #60]	; 18574 <__assert_fail@plt+0x5e88>
   18534:	str	r3, [sp]
   18538:	ldr	r3, [pc, #56]	; 18578 <__assert_fail@plt+0x5e8c>
   1853c:	bl	203f8 <__assert_fail@plt+0xdd0c>
   18540:	cmp	r0, #0
   18544:	mov	r5, r0
   18548:	str	r0, [r4, #4]
   1854c:	bne	18564 <__assert_fail@plt+0x5e78>
   18550:	ldr	r0, [r4]
   18554:	bl	284c4 <__assert_fail@plt+0x15dd8>
   18558:	mov	r0, r4
   1855c:	mov	r4, r5
   18560:	bl	284c4 <__assert_fail@plt+0x15dd8>
   18564:	mov	r0, r4
   18568:	add	sp, sp, #12
   1856c:	pop	{r4, r5, pc}
   18570:			; <UNDEFINED> instruction: 0x000184b0
   18574:	andeq	r8, r1, r4, lsl #9
   18578:	andeq	r8, r1, r8, asr #8
   1857c:	push	{r4, lr}
   18580:	mov	r4, r0
   18584:	ldr	r0, [r0]
   18588:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1858c:	ldr	r0, [r4, #4]
   18590:	pop	{r4, lr}
   18594:	b	20560 <__assert_fail@plt+0xde74>
   18598:	push	{r4, r5, r6, r7, lr}
   1859c:	mov	r5, r0
   185a0:	sub	sp, sp, #108	; 0x6c
   185a4:	mov	r0, #24
   185a8:	mov	r7, r1
   185ac:	bl	2a340 <__assert_fail@plt+0x17c54>
   185b0:	subs	r4, r0, #0
   185b4:	beq	185dc <__assert_fail@plt+0x5ef0>
   185b8:	mov	r0, r7
   185bc:	bl	12188 <strdup@plt>
   185c0:	cmp	r0, #0
   185c4:	mov	r6, r0
   185c8:	str	r0, [r4, #16]
   185cc:	bne	185e8 <__assert_fail@plt+0x5efc>
   185d0:	mov	r0, r4
   185d4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   185d8:	mov	r4, r6
   185dc:	mov	r0, r4
   185e0:	add	sp, sp, #108	; 0x6c
   185e4:	pop	{r4, r5, r6, r7, pc}
   185e8:	mov	r0, r7
   185ec:	ldr	r1, [r5]
   185f0:	bl	1fc24 <__assert_fail@plt+0xd538>
   185f4:	cmp	r0, #0
   185f8:	mov	r6, r0
   185fc:	str	r0, [r4, #20]
   18600:	bne	18610 <__assert_fail@plt+0x5f24>
   18604:	mov	r0, r4
   18608:	bl	184b0 <__assert_fail@plt+0x5dc4>
   1860c:	b	185d8 <__assert_fail@plt+0x5eec>
   18610:	bl	12488 <fileno@plt>
   18614:	subs	r6, r0, #0
   18618:	bge	18630 <__assert_fail@plt+0x5f44>
   1861c:	ldr	r3, [pc, #164]	; 186c8 <__assert_fail@plt+0x5fdc>
   18620:	mov	r2, #166	; 0xa6
   18624:	ldr	r1, [pc, #160]	; 186cc <__assert_fail@plt+0x5fe0>
   18628:	ldr	r0, [pc, #160]	; 186d0 <__assert_fail@plt+0x5fe4>
   1862c:	bl	126ec <__assert_fail@plt>
   18630:	mov	r1, #1
   18634:	bl	1f784 <__assert_fail@plt+0xd098>
   18638:	mov	r1, sp
   1863c:	mov	r0, r6
   18640:	bl	378f4 <__assert_fail@plt+0x25208>
   18644:	cmp	r0, #0
   18648:	bge	18660 <__assert_fail@plt+0x5f74>
   1864c:	mov	r0, r4
   18650:	mov	r5, #0
   18654:	bl	184b0 <__assert_fail@plt+0x5dc4>
   18658:	mov	r4, r5
   1865c:	b	185dc <__assert_fail@plt+0x5ef0>
   18660:	ldrd	r2, [sp]
   18664:	mov	r1, r4
   18668:	ldr	r0, [r5, #4]
   1866c:	strd	r2, [r4]
   18670:	ldrd	r2, [sp, #96]	; 0x60
   18674:	strd	r2, [r4, #8]
   18678:	bl	201e8 <__assert_fail@plt+0xdafc>
   1867c:	subs	r6, r0, #0
   18680:	beq	18694 <__assert_fail@plt+0x5fa8>
   18684:	mov	r0, r4
   18688:	bl	184b0 <__assert_fail@plt+0x5dc4>
   1868c:	ldr	r5, [r6, #20]
   18690:	b	18658 <__assert_fail@plt+0x5f6c>
   18694:	mov	r1, r4
   18698:	ldr	r0, [r5, #4]
   1869c:	bl	208c0 <__assert_fail@plt+0xe1d4>
   186a0:	subs	r5, r0, #0
   186a4:	ldrne	r5, [r4, #20]
   186a8:	bne	18658 <__assert_fail@plt+0x5f6c>
   186ac:	bl	12404 <__errno_location@plt>
   186b0:	mov	r6, r0
   186b4:	mov	r0, r4
   186b8:	ldr	r7, [r6]
   186bc:	bl	184b0 <__assert_fail@plt+0x5dc4>
   186c0:	str	r7, [r6]
   186c4:	b	18658 <__assert_fail@plt+0x5f6c>
   186c8:	andeq	r9, r3, r6, asr #20
   186cc:	andeq	r9, r3, r6, asr sl
   186d0:	ldrdeq	r7, [r3], -sl
   186d4:	andeq	r0, r0, r0
   186d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186dc:	sub	sp, sp, #140	; 0x8c
   186e0:	cmp	r2, #43	; 0x2b
   186e4:	add	r5, sp, #40	; 0x28
   186e8:	mov	r4, r2
   186ec:	stm	r5, {r0, r1}
   186f0:	bne	18724 <__assert_fail@plt+0x6038>
   186f4:	ldr	r1, [pc, #1044]	; 18b10 <__assert_fail@plt+0x6424>
   186f8:	add	r0, sp, #48	; 0x30
   186fc:	bl	12278 <strcpy@plt>
   18700:	ldr	r2, [pc, #1036]	; 18b14 <__assert_fail@plt+0x6428>
   18704:	mov	r1, #32
   18708:	add	r0, sp, #60	; 0x3c
   1870c:	ldr	r3, [sp, #44]	; 0x2c
   18710:	bl	1241c <snprintf@plt>
   18714:	mov	r3, #1
   18718:	mov	r8, r0
   1871c:	str	r3, [sp, #16]
   18720:	b	18764 <__assert_fail@plt+0x6078>
   18724:	mov	r3, #37	; 0x25
   18728:	strb	r3, [sp, #48]	; 0x30
   1872c:	mov	r3, #0
   18730:	strb	r2, [sp, #49]	; 0x31
   18734:	strb	r3, [sp, #50]	; 0x32
   18738:	sub	r3, r2, #64	; 0x40
   1873c:	cmp	r3, #24
   18740:	bhi	18754 <__assert_fail@plt+0x6068>
   18744:	ldr	r2, [pc, #972]	; 18b18 <__assert_fail@plt+0x642c>
   18748:	mov	r1, #1
   1874c:	ands	r3, r2, r1, lsl r3
   18750:	bne	18700 <__assert_fail@plt+0x6014>
   18754:	mov	r3, #0
   18758:	mov	r8, r3
   1875c:	str	r3, [sp, #16]
   18760:	strb	r3, [sp, #60]	; 0x3c
   18764:	cmp	r4, #64	; 0x40
   18768:	beq	188b8 <__assert_fail@plt+0x61cc>
   1876c:	mov	r0, r5
   18770:	bl	12350 <localtime@plt>
   18774:	subs	r5, r0, #0
   18778:	beq	188b8 <__assert_fail@plt+0x61cc>
   1877c:	add	r0, sp, #48	; 0x30
   18780:	bl	123bc <strlen@plt>
   18784:	add	r0, r0, #2
   18788:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1878c:	mov	r4, r0
   18790:	mov	r3, #95	; 0x5f
   18794:	mov	fp, r0
   18798:	add	r0, sp, #48	; 0x30
   1879c:	strb	r3, [r4], #1
   187a0:	bl	123bc <strlen@plt>
   187a4:	add	r2, r0, #1
   187a8:	add	r1, sp, #48	; 0x30
   187ac:	mov	r0, r4
   187b0:	ldr	r4, [pc, #868]	; 18b1c <__assert_fail@plt+0x6430>
   187b4:	bl	120f8 <memcpy@plt>
   187b8:	mov	lr, r5
   187bc:	add	ip, sp, #92	; 0x5c
   187c0:	ldm	lr!, {r0, r1, r2, r3}
   187c4:	stmia	ip!, {r0, r1, r2, r3}
   187c8:	ldm	lr!, {r0, r1, r2, r3}
   187cc:	stmia	ip!, {r0, r1, r2, r3}
   187d0:	ldr	r3, [sp, #92]	; 0x5c
   187d4:	ldm	lr, {r0, r1, r2}
   187d8:	cmp	r3, #10
   187dc:	subgt	r3, r3, #11
   187e0:	addle	r3, r3, #11
   187e4:	stm	ip, {r0, r1, r2}
   187e8:	str	r3, [sp, #92]	; 0x5c
   187ec:	ldr	r3, [r4]
   187f0:	cmp	r3, #0
   187f4:	bne	18808 <__assert_fail@plt+0x611c>
   187f8:	mov	r0, #1
   187fc:	str	r0, [r4, #4]
   18800:	bl	273e0 <__assert_fail@plt+0x14cf4>
   18804:	str	r0, [r4]
   18808:	ldr	r9, [pc, #784]	; 18b20 <__assert_fail@plt+0x6434>
   1880c:	mov	r3, r5
   18810:	mov	r2, fp
   18814:	ldr	r6, [r4]
   18818:	ldr	r1, [r4, #4]
   1881c:	mov	r0, r6
   18820:	bl	12338 <strftime@plt>
   18824:	subs	r7, r0, #0
   18828:	beq	189b4 <__assert_fail@plt+0x62c8>
   1882c:	ldr	r3, [r4, #4]
   18830:	cmp	r7, r3
   18834:	bcs	189b4 <__assert_fail@plt+0x62c8>
   18838:	add	r9, r8, #1
   1883c:	mov	r0, r6
   18840:	add	r9, r9, r7
   18844:	mov	r6, #0
   18848:	mov	r1, r9
   1884c:	mov	r5, r6
   18850:	bl	2740c <__assert_fail@plt+0x14d20>
   18854:	stm	r4, {r0, r9}
   18858:	mov	r0, r9
   1885c:	bl	273e0 <__assert_fail@plt+0x14cf4>
   18860:	add	r3, sp, #92	; 0x5c
   18864:	mov	r2, fp
   18868:	ldr	r1, [r4, #4]
   1886c:	str	r0, [sp, #20]
   18870:	bl	12338 <strftime@plt>
   18874:	ldr	r3, [r4]
   18878:	mov	r2, r6
   1887c:	str	r6, [sp, #24]
   18880:	ldrb	r1, [r3, r2]
   18884:	ldr	r0, [sp, #20]
   18888:	cmp	r1, #0
   1888c:	ldrb	sl, [r0, r2]
   18890:	beq	18aac <__assert_fail@plt+0x63c0>
   18894:	cmp	sl, #0
   18898:	bne	18918 <__assert_fail@plt+0x622c>
   1889c:	mov	r0, fp
   188a0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   188a4:	ldr	r0, [sp, #20]
   188a8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   188ac:	ldr	r4, [r4]
   188b0:	adds	r4, r4, #1
   188b4:	bne	18aa0 <__assert_fail@plt+0x63b4>
   188b8:	ldr	r3, [sp, #40]	; 0x28
   188bc:	cmp	r3, #0
   188c0:	mov	r0, r3
   188c4:	asr	r1, r3, #31
   188c8:	bge	188d4 <__assert_fail@plt+0x61e8>
   188cc:	rsbs	r0, r3, #0
   188d0:	rsc	r1, r1, #0
   188d4:	ldr	r5, [pc, #584]	; 18b24 <__assert_fail@plt+0x6438>
   188d8:	mov	r2, #1
   188dc:	mov	r3, #0
   188e0:	strd	r2, [sp]
   188e4:	strd	r2, [sp, #8]
   188e8:	mov	r3, #0
   188ec:	add	r2, r5, #1
   188f0:	mov	r6, r5
   188f4:	bl	20a78 <__assert_fail@plt+0xe38c>
   188f8:	cmp	r0, r5
   188fc:	mov	r4, r0
   18900:	bhi	189cc <__assert_fail@plt+0x62e0>
   18904:	ldr	r3, [pc, #540]	; 18b28 <__assert_fail@plt+0x643c>
   18908:	movw	r2, #697	; 0x2b9
   1890c:	ldr	r1, [pc, #536]	; 18b2c <__assert_fail@plt+0x6440>
   18910:	ldr	r0, [pc, #536]	; 18b30 <__assert_fail@plt+0x6444>
   18914:	b	18b0c <__assert_fail@plt+0x6420>
   18918:	cmp	sl, r1
   1891c:	str	r1, [sp, #36]	; 0x24
   18920:	beq	1897c <__assert_fail@plt+0x6290>
   18924:	str	r3, [sp, #28]
   18928:	str	r2, [sp, #32]
   1892c:	bl	12374 <__ctype_b_loc@plt>
   18930:	ldr	r1, [sp, #36]	; 0x24
   18934:	ldr	r0, [r0]
   18938:	lsl	r1, r1, #1
   1893c:	ldrh	r1, [r0, r1]
   18940:	tst	r1, #2048	; 0x800
   18944:	beq	1889c <__assert_fail@plt+0x61b0>
   18948:	lsl	sl, sl, #1
   1894c:	ldrh	r1, [r0, sl]
   18950:	tst	r1, #2048	; 0x800
   18954:	beq	1889c <__assert_fail@plt+0x61b0>
   18958:	ldr	r3, [sp, #24]
   1895c:	ldr	r2, [sp, #32]
   18960:	cmp	r3, #0
   18964:	ldr	r3, [sp, #28]
   18968:	beq	18984 <__assert_fail@plt+0x6298>
   1896c:	sub	r1, r2, r5
   18970:	cmp	r1, r6
   18974:	bne	1889c <__assert_fail@plt+0x61b0>
   18978:	add	r6, r6, #1
   1897c:	add	r2, r2, #1
   18980:	b	18880 <__assert_fail@plt+0x6194>
   18984:	mov	r6, #1
   18988:	mov	r5, r2
   1898c:	str	r6, [sp, #24]
   18990:	b	1897c <__assert_fail@plt+0x6290>
   18994:	mov	r1, r6
   18998:	add	r0, r3, r5
   1899c:	bl	1208c <memmove@plt>
   189a0:	mov	r2, r8
   189a4:	add	r1, sp, #60	; 0x3c
   189a8:	mov	r0, r6
   189ac:	bl	120f8 <memcpy@plt>
   189b0:	b	1889c <__assert_fail@plt+0x61b0>
   189b4:	mov	r2, #1
   189b8:	mov	r1, r9
   189bc:	mov	r0, r6
   189c0:	bl	274c0 <__assert_fail@plt+0x14dd4>
   189c4:	str	r0, [r4]
   189c8:	b	1880c <__assert_fail@plt+0x6120>
   189cc:	add	r5, r5, #788	; 0x314
   189d0:	add	r5, r5, #3
   189d4:	cmp	r0, r5
   189d8:	bcc	189f0 <__assert_fail@plt+0x6304>
   189dc:	ldr	r3, [pc, #324]	; 18b28 <__assert_fail@plt+0x643c>
   189e0:	movw	r2, #698	; 0x2ba
   189e4:	ldr	r1, [pc, #320]	; 18b2c <__assert_fail@plt+0x6440>
   189e8:	ldr	r0, [pc, #324]	; 18b34 <__assert_fail@plt+0x6448>
   189ec:	b	18b0c <__assert_fail@plt+0x6420>
   189f0:	ldr	r3, [sp, #40]	; 0x28
   189f4:	cmp	r3, #0
   189f8:	movlt	r3, #45	; 0x2d
   189fc:	sublt	r4, r0, #1
   18a00:	strblt	r3, [r0, #-1]
   18a04:	ldr	r3, [sp, #16]
   18a08:	cmp	r3, #0
   18a0c:	beq	18aa0 <__assert_fail@plt+0x63b4>
   18a10:	mov	r0, r4
   18a14:	sub	r5, r4, r6
   18a18:	bl	123bc <strlen@plt>
   18a1c:	add	r0, r5, r0
   18a20:	movw	r5, #790	; 0x316
   18a24:	cmp	r0, r5
   18a28:	bls	18a40 <__assert_fail@plt+0x6354>
   18a2c:	ldr	r3, [pc, #244]	; 18b28 <__assert_fail@plt+0x643c>
   18a30:	movw	r2, #711	; 0x2c7
   18a34:	ldr	r1, [pc, #240]	; 18b2c <__assert_fail@plt+0x6440>
   18a38:	ldr	r0, [pc, #248]	; 18b38 <__assert_fail@plt+0x644c>
   18a3c:	b	18b0c <__assert_fail@plt+0x6420>
   18a40:	add	r6, sp, #60	; 0x3c
   18a44:	sub	r5, r5, r0
   18a48:	mov	r0, r6
   18a4c:	bl	123bc <strlen@plt>
   18a50:	cmp	r0, r5
   18a54:	bcc	18a94 <__assert_fail@plt+0x63a8>
   18a58:	mov	r1, #0
   18a5c:	mov	r3, r8
   18a60:	ldr	r2, [pc, #212]	; 18b3c <__assert_fail@plt+0x6450>
   18a64:	mov	r0, r1
   18a68:	stm	sp, {r5, r6}
   18a6c:	bl	122c0 <error@plt>
   18a70:	mov	r0, r6
   18a74:	bl	123bc <strlen@plt>
   18a78:	cmp	r0, r5
   18a7c:	bcc	18a94 <__assert_fail@plt+0x63a8>
   18a80:	ldr	r3, [pc, #160]	; 18b28 <__assert_fail@plt+0x643c>
   18a84:	mov	r2, #720	; 0x2d0
   18a88:	ldr	r1, [pc, #156]	; 18b2c <__assert_fail@plt+0x6440>
   18a8c:	ldr	r0, [pc, #172]	; 18b40 <__assert_fail@plt+0x6454>
   18a90:	b	18b0c <__assert_fail@plt+0x6420>
   18a94:	mov	r1, r6
   18a98:	mov	r0, r4
   18a9c:	bl	1223c <strcat@plt>
   18aa0:	mov	r0, r4
   18aa4:	add	sp, sp, #140	; 0x8c
   18aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aac:	cmp	r6, #2
   18ab0:	cmpeq	sl, #0
   18ab4:	bne	1889c <__assert_fail@plt+0x61b0>
   18ab8:	str	r3, [sp, #24]
   18abc:	add	r5, r5, #2
   18ac0:	bl	12374 <__ctype_b_loc@plt>
   18ac4:	ldr	r3, [sp, #24]
   18ac8:	ldr	r1, [r0]
   18acc:	ldrb	r2, [r3, r5]
   18ad0:	add	r6, r3, r5
   18ad4:	lsl	r2, r2, #1
   18ad8:	ldrh	r2, [r1, r2]
   18adc:	tst	r2, #2048	; 0x800
   18ae0:	bne	1889c <__assert_fail@plt+0x61b0>
   18ae4:	add	r7, r7, #1
   18ae8:	sub	r2, r7, r5
   18aec:	add	r7, r8, r7
   18af0:	cmp	r9, r7
   18af4:	add	r5, r8, r5
   18af8:	beq	18994 <__assert_fail@plt+0x62a8>
   18afc:	ldr	r3, [pc, #64]	; 18b44 <__assert_fail@plt+0x6458>
   18b00:	movw	r2, #549	; 0x225
   18b04:	ldr	r1, [pc, #32]	; 18b2c <__assert_fail@plt+0x6440>
   18b08:	ldr	r0, [pc, #56]	; 18b48 <__assert_fail@plt+0x645c>
   18b0c:	bl	126ec <__assert_fail@plt>
   18b10:	andeq	r9, r3, sp, lsl #22
   18b14:	andeq	r9, r3, r9, lsl fp
   18b18:	tsteq	r8, r1
   18b1c:			; <UNDEFINED> instruction: 0x0004e5b0
   18b20:			; <UNDEFINED> instruction: 0x0004e5b4
   18b24:			; <UNDEFINED> instruction: 0x0004e5b8
   18b28:	andeq	r9, r3, r3, ror sl
   18b2c:	andeq	r9, r3, r1, lsr #22
   18b30:	andeq	r9, r3, ip, asr fp
   18b34:	andeq	r9, r3, r4, ror #22
   18b38:	andeq	r9, r3, sp, ror fp
   18b3c:	andeq	r9, r3, pc, lsl #23
   18b40:			; <UNDEFINED> instruction: 0x00039bbd
   18b44:	andeq	r9, r3, r4, ror #20
   18b48:	andeq	r9, r3, r9, lsr #22
   18b4c:	push	{r4, r5, lr}
   18b50:	sub	sp, sp, #44	; 0x2c
   18b54:	add	r4, sp, #32
   18b58:	stm	r4, {r0, r1}
   18b5c:	mov	r0, r4
   18b60:	bl	12350 <localtime@plt>
   18b64:	cmp	r0, #0
   18b68:	beq	18cd0 <__assert_fail@plt+0x65e4>
   18b6c:	ldr	r3, [r0, #24]
   18b70:	cmp	r3, #0
   18b74:	bge	18b8c <__assert_fail@plt+0x64a0>
   18b78:	ldr	r3, [pc, #356]	; 18ce4 <__assert_fail@plt+0x65f8>
   18b7c:	movw	r2, #749	; 0x2ed
   18b80:	ldr	r1, [pc, #352]	; 18ce8 <__assert_fail@plt+0x65fc>
   18b84:	ldr	r0, [pc, #352]	; 18cec <__assert_fail@plt+0x6600>
   18b88:	bl	126ec <__assert_fail@plt>
   18b8c:	cmp	r3, #6
   18b90:	ble	18ba8 <__assert_fail@plt+0x64bc>
   18b94:	ldr	r3, [pc, #328]	; 18ce4 <__assert_fail@plt+0x65f8>
   18b98:	movw	r2, #750	; 0x2ee
   18b9c:	ldr	r1, [pc, #324]	; 18ce8 <__assert_fail@plt+0x65fc>
   18ba0:	ldr	r0, [pc, #328]	; 18cf0 <__assert_fail@plt+0x6604>
   18ba4:	b	18b88 <__assert_fail@plt+0x649c>
   18ba8:	ldr	ip, [r0, #16]
   18bac:	cmp	ip, #0
   18bb0:	bge	18bc8 <__assert_fail@plt+0x64dc>
   18bb4:	ldr	r3, [pc, #296]	; 18ce4 <__assert_fail@plt+0x65f8>
   18bb8:	movw	r2, #751	; 0x2ef
   18bbc:	ldr	r1, [pc, #292]	; 18ce8 <__assert_fail@plt+0x65fc>
   18bc0:	ldr	r0, [pc, #300]	; 18cf4 <__assert_fail@plt+0x6608>
   18bc4:	b	18b88 <__assert_fail@plt+0x649c>
   18bc8:	cmp	ip, #11
   18bcc:	ble	18be4 <__assert_fail@plt+0x64f8>
   18bd0:	ldr	r3, [pc, #268]	; 18ce4 <__assert_fail@plt+0x65f8>
   18bd4:	mov	r2, #752	; 0x2f0
   18bd8:	ldr	r1, [pc, #264]	; 18ce8 <__assert_fail@plt+0x65fc>
   18bdc:	ldr	r0, [pc, #276]	; 18cf8 <__assert_fail@plt+0x660c>
   18be0:	b	18b88 <__assert_fail@plt+0x649c>
   18be4:	ldr	lr, [r0, #8]
   18be8:	cmp	lr, #0
   18bec:	bge	18c04 <__assert_fail@plt+0x6518>
   18bf0:	ldr	r3, [pc, #236]	; 18ce4 <__assert_fail@plt+0x65f8>
   18bf4:	movw	r2, #753	; 0x2f1
   18bf8:	ldr	r1, [pc, #232]	; 18ce8 <__assert_fail@plt+0x65fc>
   18bfc:	ldr	r0, [pc, #248]	; 18cfc <__assert_fail@plt+0x6610>
   18c00:	b	18b88 <__assert_fail@plt+0x649c>
   18c04:	cmp	lr, #23
   18c08:	ble	18c20 <__assert_fail@plt+0x6534>
   18c0c:	ldr	r3, [pc, #208]	; 18ce4 <__assert_fail@plt+0x65f8>
   18c10:	movw	r2, #754	; 0x2f2
   18c14:	ldr	r1, [pc, #204]	; 18ce8 <__assert_fail@plt+0x65fc>
   18c18:	ldr	r0, [pc, #224]	; 18d00 <__assert_fail@plt+0x6614>
   18c1c:	b	18b88 <__assert_fail@plt+0x649c>
   18c20:	ldr	r4, [r0, #4]
   18c24:	cmp	r4, #59	; 0x3b
   18c28:	ble	18c40 <__assert_fail@plt+0x6554>
   18c2c:	ldr	r3, [pc, #176]	; 18ce4 <__assert_fail@plt+0x65f8>
   18c30:	movw	r2, #755	; 0x2f3
   18c34:	ldr	r1, [pc, #172]	; 18ce8 <__assert_fail@plt+0x65fc>
   18c38:	ldr	r0, [pc, #196]	; 18d04 <__assert_fail@plt+0x6618>
   18c3c:	b	18b88 <__assert_fail@plt+0x649c>
   18c40:	ldr	r5, [r0]
   18c44:	cmp	r5, #61	; 0x3d
   18c48:	ble	18c60 <__assert_fail@plt+0x6574>
   18c4c:	ldr	r3, [pc, #144]	; 18ce4 <__assert_fail@plt+0x65f8>
   18c50:	mov	r2, #756	; 0x2f4
   18c54:	ldr	r1, [pc, #140]	; 18ce8 <__assert_fail@plt+0x65fc>
   18c58:	ldr	r0, [pc, #168]	; 18d08 <__assert_fail@plt+0x661c>
   18c5c:	b	18b88 <__assert_fail@plt+0x649c>
   18c60:	ldr	r2, [r0, #20]
   18c64:	str	lr, [sp, #8]
   18c68:	ldr	r1, [pc, #156]	; 18d0c <__assert_fail@plt+0x6620>
   18c6c:	strd	r4, [sp, #12]
   18c70:	add	r2, r2, #1888	; 0x760
   18c74:	add	r2, r2, #12
   18c78:	add	r3, r1, r3, lsl #2
   18c7c:	str	r2, [sp, #24]
   18c80:	add	r1, r1, ip, lsl #2
   18c84:	ldr	r2, [sp, #36]	; 0x24
   18c88:	ldr	r3, [r3, #40]	; 0x28
   18c8c:	str	r2, [sp, #20]
   18c90:	ldr	r2, [r0, #12]
   18c94:	ldr	r0, [pc, #116]	; 18d10 <__assert_fail@plt+0x6624>
   18c98:	str	r2, [sp, #4]
   18c9c:	ldr	r2, [r1, #68]	; 0x44
   18ca0:	mov	r1, #1024	; 0x400
   18ca4:	str	r2, [sp]
   18ca8:	ldr	r2, [pc, #100]	; 18d14 <__assert_fail@plt+0x6628>
   18cac:	bl	1241c <snprintf@plt>
   18cb0:	cmp	r0, #1024	; 0x400
   18cb4:	ldrlt	r0, [pc, #84]	; 18d10 <__assert_fail@plt+0x6624>
   18cb8:	blt	18cdc <__assert_fail@plt+0x65f0>
   18cbc:	ldr	r3, [pc, #32]	; 18ce4 <__assert_fail@plt+0x65f8>
   18cc0:	movw	r2, #770	; 0x302
   18cc4:	ldr	r1, [pc, #28]	; 18ce8 <__assert_fail@plt+0x65fc>
   18cc8:	ldr	r0, [pc, #72]	; 18d18 <__assert_fail@plt+0x662c>
   18ccc:	b	18b88 <__assert_fail@plt+0x649c>
   18cd0:	mov	r2, #64	; 0x40
   18cd4:	ldm	r4, {r0, r1}
   18cd8:	bl	186d8 <__assert_fail@plt+0x5fec>
   18cdc:	add	sp, sp, #44	; 0x2c
   18ce0:	pop	{r4, r5, pc}
   18ce4:	andeq	r9, r3, pc, ror sl
   18ce8:	andeq	r9, r3, r1, lsr #22
   18cec:	ldrdeq	r9, [r3], -r9	; <UNPREDICTABLE>
   18cf0:	andeq	r9, r3, fp, ror #23
   18cf4:	strdeq	r9, [r3], -ip
   18cf8:	andeq	r9, r3, sp, lsl #24
   18cfc:	andeq	r9, r3, lr, lsl ip
   18d00:	andeq	r9, r3, r0, lsr ip
   18d04:	andeq	r9, r3, r2, asr #24
   18d08:	andeq	r9, r3, r3, asr ip
   18d0c:	andeq	r9, r3, r4, ror #20
   18d10:	andeq	lr, r4, pc, asr #17
   18d14:	andeq	r9, r3, r5, ror #24
   18d18:	andeq	r9, r3, ip, lsl #25
   18d1c:	push	{r1, r2, r3}
   18d20:	push	{r0, r1, r2, r4, lr}
   18d24:	add	r2, sp, #24
   18d28:	mov	r4, r0
   18d2c:	ldr	r0, [r0, #4]
   18d30:	str	r2, [sp, #4]
   18d34:	ldr	r1, [sp, #20]
   18d38:	bl	12554 <vfprintf@plt>
   18d3c:	cmp	r0, #0
   18d40:	bge	18d54 <__assert_fail@plt+0x6668>
   18d44:	bl	12404 <__errno_location@plt>
   18d48:	ldr	r0, [r0]
   18d4c:	ldr	r1, [r4, #8]
   18d50:	bl	182e0 <__assert_fail@plt+0x5bf4>
   18d54:	add	sp, sp, #12
   18d58:	pop	{r4, lr}
   18d5c:	add	sp, sp, #12
   18d60:	bx	lr
   18d64:	cmp	r0, #32768	; 0x8000
   18d68:	beq	18dac <__assert_fail@plt+0x66c0>
   18d6c:	cmp	r0, #16384	; 0x4000
   18d70:	beq	18db4 <__assert_fail@plt+0x66c8>
   18d74:	cmp	r0, #40960	; 0xa000
   18d78:	beq	18dbc <__assert_fail@plt+0x66d0>
   18d7c:	cmp	r0, #49152	; 0xc000
   18d80:	beq	18dc4 <__assert_fail@plt+0x66d8>
   18d84:	cmp	r0, #24576	; 0x6000
   18d88:	beq	18dcc <__assert_fail@plt+0x66e0>
   18d8c:	cmp	r0, #8192	; 0x2000
   18d90:	beq	18dd4 <__assert_fail@plt+0x66e8>
   18d94:	ldr	r3, [pc, #64]	; 18ddc <__assert_fail@plt+0x66f0>
   18d98:	cmp	r0, #4096	; 0x1000
   18d9c:	ldr	r2, [pc, #60]	; 18de0 <__assert_fail@plt+0x66f4>
   18da0:	movne	r0, r3
   18da4:	moveq	r0, r2
   18da8:	bx	lr
   18dac:	ldr	r0, [pc, #48]	; 18de4 <__assert_fail@plt+0x66f8>
   18db0:	bx	lr
   18db4:	ldr	r0, [pc, #44]	; 18de8 <__assert_fail@plt+0x66fc>
   18db8:	bx	lr
   18dbc:	ldr	r0, [pc, #40]	; 18dec <__assert_fail@plt+0x6700>
   18dc0:	bx	lr
   18dc4:	ldr	r0, [pc, #36]	; 18df0 <__assert_fail@plt+0x6704>
   18dc8:	bx	lr
   18dcc:	ldr	r0, [pc, #32]	; 18df4 <__assert_fail@plt+0x6708>
   18dd0:	bx	lr
   18dd4:	ldr	r0, [pc, #28]	; 18df8 <__assert_fail@plt+0x670c>
   18dd8:	bx	lr
   18ddc:	andeq	r9, r3, r0, lsr #25
   18de0:	andeq	r8, r3, lr, ror r7
   18de4:	andeq	fp, r3, r0, lsl #24
   18de8:	andeq	r8, r3, r2, lsl #6
   18dec:	andeq	r8, r3, r6, asr #4
   18df0:	andeq	sp, r3, ip, lsl r2
   18df4:	andeq	fp, r3, pc, lsl r8
   18df8:	andeq	sl, r3, ip, asr #25
   18dfc:	push	{r0, r1, r4, lr}
   18e00:	mov	r3, r1
   18e04:	mov	r4, r0
   18e08:	str	r2, [sp]
   18e0c:	ldrb	r2, [r0, #12]
   18e10:	ldr	r1, [r0, #16]
   18e14:	ldr	r0, [r0, #4]
   18e18:	bl	1ee98 <__assert_fail@plt+0xc7ac>
   18e1c:	cmp	r0, #0
   18e20:	bge	18e3c <__assert_fail@plt+0x6750>
   18e24:	bl	12404 <__errno_location@plt>
   18e28:	ldr	r0, [r0]
   18e2c:	ldr	r1, [r4, #8]
   18e30:	add	sp, sp, #8
   18e34:	pop	{r4, lr}
   18e38:	b	182e0 <__assert_fail@plt+0x5bf4>
   18e3c:	add	sp, sp, #8
   18e40:	pop	{r4, pc}
   18e44:	push	{r4, r5, r6, lr}
   18e48:	mov	r5, r1
   18e4c:	mov	r4, r2
   18e50:	ldr	r3, [r2, #4]
   18e54:	mov	r2, r1
   18e58:	mov	r1, #1
   18e5c:	bl	12230 <fwrite@plt>
   18e60:	cmp	r5, r0
   18e64:	popls	{r4, r5, r6, pc}
   18e68:	bl	12404 <__errno_location@plt>
   18e6c:	ldr	r0, [r0]
   18e70:	ldr	r1, [r4, #8]
   18e74:	pop	{r4, r5, r6, lr}
   18e78:	b	182e0 <__assert_fail@plt+0x5bf4>
   18e7c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18e80:	mov	r6, r3
   18e84:	mov	r5, r0
   18e88:	mov	r4, r1
   18e8c:	ldr	r3, [r1]
   18e90:	vpush	{d8}
   18e94:	sub	sp, sp, #692	; 0x2b4
   18e98:	cmp	r3, #1
   18e9c:	beq	18ebc <__assert_fail@plt+0x67d0>
   18ea0:	cmp	r3, #0
   18ea4:	beq	18f28 <__assert_fail@plt+0x683c>
   18ea8:	cmp	r3, #2
   18eac:	beq	18eec <__assert_fail@plt+0x6800>
   18eb0:	add	sp, sp, #692	; 0x2b4
   18eb4:	vpop	{d8}
   18eb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18ebc:	mov	r2, r0
   18ec0:	ldrd	r0, [r1, #8]
   18ec4:	bl	18e44 <__assert_fail@plt+0x6758>
   18ec8:	ldr	r0, [r5, #4]
   18ecc:	bl	28474 <__assert_fail@plt+0x15d88>
   18ed0:	cmp	r0, #0
   18ed4:	beq	18eb0 <__assert_fail@plt+0x67c4>
   18ed8:	bl	12404 <__errno_location@plt>
   18edc:	ldr	r0, [r0]
   18ee0:	ldr	r1, [r5, #8]
   18ee4:	bl	182e0 <__assert_fail@plt+0x5bf4>
   18ee8:	b	18eb0 <__assert_fail@plt+0x67c4>
   18eec:	ldrb	r3, [r1, #4]
   18ef0:	cmp	r3, #99	; 0x63
   18ef4:	beq	19168 <__assert_fail@plt+0x6a7c>
   18ef8:	mov	r7, r2
   18efc:	bhi	19054 <__assert_fail@plt+0x6968>
   18f00:	cmp	r3, #77	; 0x4d
   18f04:	beq	1933c <__assert_fail@plt+0x6c50>
   18f08:	bhi	18f74 <__assert_fail@plt+0x6888>
   18f0c:	cmp	r3, #68	; 0x44
   18f10:	beq	19188 <__assert_fail@plt+0x6a9c>
   18f14:	bhi	18f38 <__assert_fail@plt+0x684c>
   18f18:	cmp	r3, #0
   18f1c:	beq	1951c <__assert_fail@plt+0x6e30>
   18f20:	cmp	r3, #37	; 0x25
   18f24:	bne	18eb0 <__assert_fail@plt+0x67c4>
   18f28:	mov	r2, r5
   18f2c:	ldrd	r0, [r4, #8]
   18f30:	bl	18e44 <__assert_fail@plt+0x6758>
   18f34:	b	18eb0 <__assert_fail@plt+0x67c4>
   18f38:	cmp	r3, #71	; 0x47
   18f3c:	beq	191d0 <__assert_fail@plt+0x6ae4>
   18f40:	cmp	r3, #72	; 0x48
   18f44:	beq	19280 <__assert_fail@plt+0x6b94>
   18f48:	cmp	r3, #70	; 0x46
   18f4c:	bne	18eb0 <__assert_fail@plt+0x67c4>
   18f50:	ldr	r4, [r4, #8]
   18f54:	mov	r1, r2
   18f58:	mov	r0, r6
   18f5c:	bl	19ebc <__assert_fail@plt+0x77d0>
   18f60:	mov	r2, r0
   18f64:	mov	r1, r4
   18f68:	mov	r0, r5
   18f6c:	bl	18dfc <__assert_fail@plt+0x6710>
   18f70:	b	18eb0 <__assert_fail@plt+0x67c4>
   18f74:	cmp	r3, #89	; 0x59
   18f78:	beq	19460 <__assert_fail@plt+0x6d74>
   18f7c:	bhi	18fc4 <__assert_fail@plt+0x68d8>
   18f80:	cmp	r3, #83	; 0x53
   18f84:	beq	193ac <__assert_fail@plt+0x6cc0>
   18f88:	cmp	r3, #85	; 0x55
   18f8c:	beq	1943c <__assert_fail@plt+0x6d50>
   18f90:	cmp	r3, #80	; 0x50
   18f94:	bne	18eb0 <__assert_fail@plt+0x67c4>
   18f98:	ldr	r3, [pc, #1472]	; 19560 <__assert_fail@plt+0x6e74>
   18f9c:	ldr	r2, [r3]
   18fa0:	cmp	r2, #0
   18fa4:	ldrle	r2, [pc, #1464]	; 19564 <__assert_fail@plt+0x6e78>
   18fa8:	ble	190e4 <__assert_fail@plt+0x69f8>
   18fac:	ldr	r3, [r3, #20]
   18fb0:	add	r2, r7, r3
   18fb4:	ldrb	r3, [r7, r3]
   18fb8:	cmp	r3, #47	; 0x2f
   18fbc:	addeq	r2, r2, #1
   18fc0:	b	190e4 <__assert_fail@plt+0x69f8>
   18fc4:	cmp	r3, #97	; 0x61
   18fc8:	beq	19114 <__assert_fail@plt+0x6a28>
   18fcc:	bhi	19130 <__assert_fail@plt+0x6a44>
   18fd0:	cmp	r3, #90	; 0x5a
   18fd4:	bne	18eb0 <__assert_fail@plt+0x67c4>
   18fd8:	ldr	r6, [pc, #1408]	; 19560 <__assert_fail@plt+0x6e74>
   18fdc:	add	r2, sp, #32
   18fe0:	ldr	r3, [pc, #1408]	; 19568 <__assert_fail@plt+0x6e7c>
   18fe4:	ldr	r1, [r6, #12]
   18fe8:	ldr	r0, [r6, #16]
   18fec:	ldr	r3, [r3, #64]	; 0x40
   18ff0:	blx	r3
   18ff4:	cmp	r0, #0
   18ff8:	bge	19500 <__assert_fail@plt+0x6e14>
   18ffc:	ldr	r2, [pc, #1376]	; 19564 <__assert_fail@plt+0x6e78>
   19000:	mov	r0, r5
   19004:	ldr	r1, [r4, #8]
   19008:	bl	18d1c <__assert_fail@plt+0x6630>
   1900c:	bl	12404 <__errno_location@plt>
   19010:	ldr	r4, [r0]
   19014:	mov	r2, #5
   19018:	mov	r0, #0
   1901c:	ldr	r1, [pc, #1352]	; 1956c <__assert_fail@plt+0x6e80>
   19020:	bl	1217c <dcgettext@plt>
   19024:	mov	r5, r0
   19028:	mov	r1, r7
   1902c:	mov	r0, #0
   19030:	bl	17f84 <__assert_fail@plt+0x5898>
   19034:	mov	r3, r0
   19038:	mov	r2, r5
   1903c:	mov	r1, r4
   19040:	mov	r0, #0
   19044:	bl	122c0 <error@plt>
   19048:	mov	r3, #1
   1904c:	str	r3, [r6, #28]
   19050:	b	18eb0 <__assert_fail@plt+0x67c4>
   19054:	cmp	r3, #108	; 0x6c
   19058:	beq	192e4 <__assert_fail@plt+0x6bf8>
   1905c:	bhi	190c4 <__assert_fail@plt+0x69d8>
   19060:	cmp	r3, #103	; 0x67
   19064:	beq	191ac <__assert_fail@plt+0x6ac0>
   19068:	bhi	19094 <__assert_fail@plt+0x69a8>
   1906c:	cmp	r3, #100	; 0x64
   19070:	beq	19178 <__assert_fail@plt+0x6a8c>
   19074:	cmp	r3, #102	; 0x66
   19078:	bne	18eb0 <__assert_fail@plt+0x67c4>
   1907c:	mov	r0, r2
   19080:	bl	1f960 <__assert_fail@plt+0xd274>
   19084:	mov	r6, r0
   19088:	mov	r2, r6
   1908c:	ldr	r1, [r4, #8]
   19090:	b	19240 <__assert_fail@plt+0x6b54>
   19094:	cmp	r3, #105	; 0x69
   19098:	beq	192c0 <__assert_fail@plt+0x6bd4>
   1909c:	bcc	191f8 <__assert_fail@plt+0x6b0c>
   190a0:	cmp	r3, #107	; 0x6b
   190a4:	bne	18eb0 <__assert_fail@plt+0x67c4>
   190a8:	mov	r2, #1024	; 0x400
   190ac:	mov	r3, #0
   190b0:	ldr	r4, [r1, #8]
   190b4:	strd	r2, [sp, #8]
   190b8:	mov	r2, #512	; 0x200
   190bc:	mov	r3, #0
   190c0:	b	19140 <__assert_fail@plt+0x6a54>
   190c4:	cmp	r3, #115	; 0x73
   190c8:	beq	19388 <__assert_fail@plt+0x6c9c>
   190cc:	bhi	190ec <__assert_fail@plt+0x6a00>
   190d0:	cmp	r3, #110	; 0x6e
   190d4:	beq	19364 <__assert_fail@plt+0x6c78>
   190d8:	bcc	19358 <__assert_fail@plt+0x6c6c>
   190dc:	cmp	r3, #112	; 0x70
   190e0:	bne	18eb0 <__assert_fail@plt+0x67c4>
   190e4:	ldr	r1, [r4, #8]
   190e8:	b	18f68 <__assert_fail@plt+0x687c>
   190ec:	cmp	r3, #117	; 0x75
   190f0:	beq	1942c <__assert_fail@plt+0x6d40>
   190f4:	bcc	1941c <__assert_fail@plt+0x6d30>
   190f8:	cmp	r3, #121	; 0x79
   190fc:	ldreq	r0, [r6, #16]
   19100:	bne	18eb0 <__assert_fail@plt+0x67c4>
   19104:	and	r0, r0, #61440	; 0xf000
   19108:	bl	18d64 <__assert_fail@plt+0x6678>
   1910c:	mov	r2, r0
   19110:	b	19180 <__assert_fail@plt+0x6a94>
   19114:	ldr	r4, [r1, #8]
   19118:	add	r3, sp, #16
   1911c:	add	r6, r6, #72	; 0x48
   19120:	ldm	r6, {r0, r1}
   19124:	stm	r3, {r0, r1}
   19128:	bl	18b4c <__assert_fail@plt+0x6460>
   1912c:	b	19154 <__assert_fail@plt+0x6a68>
   19130:	mov	r2, #512	; 0x200
   19134:	mov	r3, #0
   19138:	ldr	r4, [r1, #8]
   1913c:	strd	r2, [sp, #8]
   19140:	strd	r2, [sp]
   19144:	mov	r3, #0
   19148:	add	r2, sp, #32
   1914c:	ldrd	r0, [r6, #64]	; 0x40
   19150:	bl	20a78 <__assert_fail@plt+0xe38c>
   19154:	mov	r2, r0
   19158:	mov	r1, r4
   1915c:	mov	r0, r5
   19160:	bl	18d1c <__assert_fail@plt+0x6630>
   19164:	b	18eb0 <__assert_fail@plt+0x67c4>
   19168:	add	r3, sp, #24
   1916c:	add	r6, r6, #88	; 0x58
   19170:	ldr	r4, [r1, #8]
   19174:	b	19120 <__assert_fail@plt+0x6a34>
   19178:	ldr	r3, [pc, #992]	; 19560 <__assert_fail@plt+0x6e74>
   1917c:	ldr	r2, [r3]
   19180:	ldr	r1, [r4, #8]
   19184:	b	1915c <__assert_fail@plt+0x6a70>
   19188:	mov	r2, #1
   1918c:	mov	r3, #0
   19190:	ldr	r4, [r1, #8]
   19194:	strd	r2, [sp]
   19198:	strd	r2, [sp, #8]
   1919c:	mov	r3, #0
   191a0:	add	r2, sp, #32
   191a4:	ldrd	r0, [r6]
   191a8:	b	19150 <__assert_fail@plt+0x6a64>
   191ac:	ldr	r0, [r6, #28]
   191b0:	bl	126c8 <getgrgid@plt>
   191b4:	cmp	r0, #0
   191b8:	beq	191d0 <__assert_fail@plt+0x6ae4>
   191bc:	ldrd	r2, [r4, #8]
   191c0:	mov	r1, #115	; 0x73
   191c4:	strb	r1, [r2, r3]
   191c8:	ldr	r2, [r0]
   191cc:	b	19180 <__assert_fail@plt+0x6a94>
   191d0:	mov	r2, #1
   191d4:	mov	r3, #0
   191d8:	ldr	r4, [r4, #8]
   191dc:	strd	r2, [sp]
   191e0:	strd	r2, [sp, #8]
   191e4:	mov	r3, #0
   191e8:	add	r2, sp, #32
   191ec:	ldr	r0, [r6, #28]
   191f0:	mov	r1, r3
   191f4:	b	19150 <__assert_fail@plt+0x6a64>
   191f8:	mov	r0, r2
   191fc:	bl	2767c <__assert_fail@plt+0x14f90>
   19200:	mov	r6, r0
   19204:	bl	123bc <strlen@plt>
   19208:	sub	r0, r0, #1
   1920c:	add	r0, r6, r0
   19210:	cmp	r0, r6
   19214:	mov	r3, r0
   19218:	bcs	19254 <__assert_fail@plt+0x6b68>
   1921c:	mov	r1, #47	; 0x2f
   19220:	mov	r0, r6
   19224:	bl	12548 <strrchr@plt>
   19228:	cmp	r0, #0
   1922c:	ldr	r1, [r4, #8]
   19230:	movne	r3, #0
   19234:	movne	r2, r6
   19238:	ldreq	r2, [pc, #816]	; 19570 <__assert_fail@plt+0x6e84>
   1923c:	strbne	r3, [r0]
   19240:	mov	r0, r5
   19244:	bl	18dfc <__assert_fail@plt+0x6710>
   19248:	mov	r0, r6
   1924c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   19250:	b	18eb0 <__assert_fail@plt+0x67c4>
   19254:	ldrb	r2, [r3]
   19258:	sub	r0, r0, #1
   1925c:	cmp	r2, #47	; 0x2f
   19260:	beq	19210 <__assert_fail@plt+0x6b24>
   19264:	cmp	r3, r6
   19268:	bls	1921c <__assert_fail@plt+0x6b30>
   1926c:	ldrb	r2, [r3, #1]
   19270:	cmp	r2, #47	; 0x2f
   19274:	moveq	r2, #0
   19278:	strbeq	r2, [r3, #1]
   1927c:	b	1921c <__assert_fail@plt+0x6b30>
   19280:	ldr	r8, [pc, #728]	; 19560 <__assert_fail@plt+0x6e74>
   19284:	ldr	r0, [r8, #20]
   19288:	add	r0, r0, #1
   1928c:	bl	273e0 <__assert_fail@plt+0x14cf4>
   19290:	ldr	r8, [r8, #20]
   19294:	mov	r1, r7
   19298:	mov	r6, r0
   1929c:	mov	r2, r8
   192a0:	bl	120f8 <memcpy@plt>
   192a4:	mov	r3, #0
   192a8:	mov	r2, r6
   192ac:	ldr	r1, [r4, #8]
   192b0:	mov	r0, r5
   192b4:	strb	r3, [r6, r8]
   192b8:	bl	18d1c <__assert_fail@plt+0x6630>
   192bc:	b	19248 <__assert_fail@plt+0x6b5c>
   192c0:	mov	r2, #1
   192c4:	mov	r3, #0
   192c8:	ldr	r4, [r1, #8]
   192cc:	strd	r2, [sp]
   192d0:	strd	r2, [sp, #8]
   192d4:	mov	r3, #0
   192d8:	add	r2, sp, #32
   192dc:	ldrd	r0, [r6, #96]	; 0x60
   192e0:	b	19150 <__assert_fail@plt+0x6a64>
   192e4:	ldr	r3, [r6, #16]
   192e8:	and	r3, r3, #61440	; 0xf000
   192ec:	cmp	r3, #40960	; 0xa000
   192f0:	bne	19324 <__assert_fail@plt+0x6c38>
   192f4:	ldr	r8, [pc, #612]	; 19560 <__assert_fail@plt+0x6e74>
   192f8:	ldr	r1, [r8, #12]
   192fc:	ldr	r0, [r8, #16]
   19300:	bl	1f4a8 <__assert_fail@plt+0xcdbc>
   19304:	subs	r6, r0, #0
   19308:	bne	19088 <__assert_fail@plt+0x699c>
   1930c:	bl	12404 <__errno_location@plt>
   19310:	mov	r1, r7
   19314:	ldr	r0, [r0]
   19318:	bl	18004 <__assert_fail@plt+0x5918>
   1931c:	mov	r3, #1
   19320:	str	r3, [r8, #28]
   19324:	ldr	r2, [pc, #568]	; 19564 <__assert_fail@plt+0x6e78>
   19328:	mov	r0, r5
   1932c:	mov	r6, #0
   19330:	ldr	r1, [r4, #8]
   19334:	bl	18dfc <__assert_fail@plt+0x6710>
   19338:	b	19248 <__assert_fail@plt+0x6b5c>
   1933c:	add	r1, sp, #32
   19340:	mov	r0, r6
   19344:	bl	1fc1c <__assert_fail@plt+0xd530>
   19348:	mov	r3, #0
   1934c:	add	r2, sp, #32
   19350:	strb	r3, [sp, #42]	; 0x2a
   19354:	b	19180 <__assert_fail@plt+0x6a94>
   19358:	ldr	r2, [r6, #16]
   1935c:	ubfx	r2, r2, #0, #12
   19360:	b	19180 <__assert_fail@plt+0x6a94>
   19364:	mov	r2, #1
   19368:	mov	r3, #0
   1936c:	ldr	r4, [r1, #8]
   19370:	strd	r2, [sp]
   19374:	strd	r2, [sp, #8]
   19378:	mov	r3, #0
   1937c:	add	r2, sp, #32
   19380:	ldr	r0, [r6, #20]
   19384:	b	191f0 <__assert_fail@plt+0x6b04>
   19388:	mov	r2, #1
   1938c:	mov	r3, #0
   19390:	ldr	r4, [r1, #8]
   19394:	strd	r2, [sp]
   19398:	strd	r2, [sp, #8]
   1939c:	mov	r3, #0
   193a0:	add	r2, sp, #32
   193a4:	ldrd	r0, [r6, #48]	; 0x30
   193a8:	b	19150 <__assert_fail@plt+0x6a64>
   193ac:	ldrd	r8, [r6, #48]	; 0x30
   193b0:	ldr	r4, [r1, #8]
   193b4:	ldrd	r0, [r6, #64]	; 0x40
   193b8:	orrs	r3, r8, r9
   193bc:	bne	193f4 <__assert_fail@plt+0x6d08>
   193c0:	orrs	r3, r0, r1
   193c4:	vldreq	d7, [pc, #372]	; 19540 <__assert_fail@plt+0x6e54>
   193c8:	beq	193e0 <__assert_fail@plt+0x6cf4>
   193cc:	cmp	r0, #0
   193d0:	vldr	d7, [pc, #368]	; 19548 <__assert_fail@plt+0x6e5c>
   193d4:	sbcs	r3, r1, #0
   193d8:	vldr	d6, [pc, #368]	; 19550 <__assert_fail@plt+0x6e64>
   193dc:	vmovge.f64	d7, d6
   193e0:	vmov	r2, r3, d7
   193e4:	mov	r1, r4
   193e8:	mov	r0, r5
   193ec:	bl	18d1c <__assert_fail@plt+0x6630>
   193f0:	b	18eb0 <__assert_fail@plt+0x67c4>
   193f4:	bl	3757c <__assert_fail@plt+0x24e90>
   193f8:	vmov	d7, r0, r1
   193fc:	mov	r0, r8
   19400:	mov	r1, r9
   19404:	vldr	d8, [pc, #332]	; 19558 <__assert_fail@plt+0x6e6c>
   19408:	vmul.f64	d8, d7, d8
   1940c:	bl	3757c <__assert_fail@plt+0x24e90>
   19410:	vmov	d7, r0, r1
   19414:	vdiv.f64	d7, d8, d7
   19418:	b	193e0 <__assert_fail@plt+0x6cf4>
   1941c:	add	r3, sp, #32
   19420:	add	r6, r6, #80	; 0x50
   19424:	ldr	r4, [r1, #8]
   19428:	b	19120 <__assert_fail@plt+0x6a34>
   1942c:	ldr	r0, [r6, #24]
   19430:	bl	12014 <getpwuid@plt>
   19434:	cmp	r0, #0
   19438:	bne	191bc <__assert_fail@plt+0x6ad0>
   1943c:	mov	r2, #1
   19440:	mov	r3, #0
   19444:	ldr	r4, [r4, #8]
   19448:	strd	r2, [sp]
   1944c:	strd	r2, [sp, #8]
   19450:	mov	r3, #0
   19454:	add	r2, sp, #32
   19458:	ldr	r0, [r6, #24]
   1945c:	b	191f0 <__assert_fail@plt+0x6b04>
   19460:	ldr	r0, [r6, #16]
   19464:	and	r0, r0, #61440	; 0xf000
   19468:	cmp	r0, #40960	; 0xa000
   1946c:	bne	19108 <__assert_fail@plt+0x6a1c>
   19470:	ldr	r0, [pc, #232]	; 19560 <__assert_fail@plt+0x6e74>
   19474:	mov	r3, #0
   19478:	add	r2, sp, #32
   1947c:	ldr	r1, [r0, #12]
   19480:	ldr	r0, [r0, #16]
   19484:	bl	37914 <__assert_fail@plt+0x25228>
   19488:	cmp	r0, #0
   1948c:	beq	194f8 <__assert_fail@plt+0x6e0c>
   19490:	bl	12404 <__errno_location@plt>
   19494:	ldr	r3, [r0]
   19498:	mov	r6, r0
   1949c:	ldr	r1, [r4, #8]
   194a0:	cmp	r3, #20
   194a4:	cmpne	r3, #2
   194a8:	moveq	r4, #1
   194ac:	movne	r4, #0
   194b0:	ldreq	r2, [pc, #188]	; 19574 <__assert_fail@plt+0x6e88>
   194b4:	beq	1915c <__assert_fail@plt+0x6a70>
   194b8:	cmp	r3, #40	; 0x28
   194bc:	ldreq	r2, [pc, #180]	; 19578 <__assert_fail@plt+0x6e8c>
   194c0:	beq	1915c <__assert_fail@plt+0x6a70>
   194c4:	mov	r0, r5
   194c8:	ldr	r2, [pc, #172]	; 1957c <__assert_fail@plt+0x6e90>
   194cc:	bl	18d1c <__assert_fail@plt+0x6630>
   194d0:	ldr	r5, [r6]
   194d4:	mov	r1, r7
   194d8:	mov	r0, r4
   194dc:	bl	17f84 <__assert_fail@plt+0x5898>
   194e0:	mov	r3, r0
   194e4:	ldr	r2, [pc, #148]	; 19580 <__assert_fail@plt+0x6e94>
   194e8:	mov	r0, r4
   194ec:	mov	r1, r5
   194f0:	bl	122c0 <error@plt>
   194f4:	b	18eb0 <__assert_fail@plt+0x67c4>
   194f8:	ldr	r0, [sp, #48]	; 0x30
   194fc:	b	19104 <__assert_fail@plt+0x6a18>
   19500:	mov	r0, r5
   19504:	ldr	r1, [r4, #8]
   19508:	ldr	r2, [sp, #32]
   1950c:	bl	18d1c <__assert_fail@plt+0x6630>
   19510:	ldr	r0, [sp, #32]
   19514:	bl	125fc <freecon@plt>
   19518:	b	18eb0 <__assert_fail@plt+0x67c4>
   1951c:	mov	r2, #5
   19520:	ldr	r1, [pc, #92]	; 19584 <__assert_fail@plt+0x6e98>
   19524:	mov	r0, #0
   19528:	bl	1217c <dcgettext@plt>
   1952c:	mov	r2, r0
   19530:	ldr	r3, [pc, #80]	; 19588 <__assert_fail@plt+0x6e9c>
   19534:	mov	r1, #0
   19538:	mov	r0, #1
   1953c:	bl	122c0 <error@plt>
   19540:	andeq	r0, r0, r0
   19544:	svccc	0x00f00000	; IMB
   19548:	andeq	r0, r0, r0
   1954c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   19550:	andeq	r0, r0, r0
   19554:	svcvc	0x00f00000	; IMB
   19558:	andeq	r0, r0, r0
   1955c:	addmi	r0, r0, r0
   19560:	andeq	lr, r4, r8, asr lr
   19564:	andeq	r9, r3, r7, ror r5
   19568:	andeq	lr, r4, r4, lsl #29
   1956c:	andeq	r8, r3, r0, lsr r0
   19570:	ldrdeq	r8, [r3], -r9
   19574:	muleq	r3, lr, ip
   19578:	andeq	r9, r3, r6, lsl r6
   1957c:	andeq	sl, r3, r9, lsl pc
   19580:	andeq	sp, r3, fp, lsl r2
   19584:	andeq	r9, r3, r2, lsr #25
   19588:	andeq	r9, r3, r9, lsr #27
   1958c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19590:	mov	r9, r0
   19594:	mov	r5, r1
   19598:	add	r7, r2, #40	; 0x28
   1959c:	mov	r6, sp
   195a0:	mvn	r8, #0
   195a4:	ldr	sl, [pc, #244]	; 196a0 <__assert_fail@plt+0x6fb4>
   195a8:	ldr	r4, [r2, #40]	; 0x28
   195ac:	cmp	r4, #0
   195b0:	bne	195c0 <__assert_fail@plt+0x6ed4>
   195b4:	mov	r0, #1
   195b8:	add	sp, sp, #12
   195bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195c0:	ldr	r3, [r4]
   195c4:	cmp	r3, #2
   195c8:	bne	19688 <__assert_fail@plt+0x6f9c>
   195cc:	ldrb	r2, [r4, #5]
   195d0:	cmp	r2, #0
   195d4:	beq	19688 <__assert_fail@plt+0x6f9c>
   195d8:	ldrb	r3, [r4, #4]
   195dc:	cmp	r3, #66	; 0x42
   195e0:	beq	19658 <__assert_fail@plt+0x6f6c>
   195e4:	bhi	19604 <__assert_fail@plt+0x6f18>
   195e8:	cmp	r3, #65	; 0x41
   195ec:	beq	19620 <__assert_fail@plt+0x6f34>
   195f0:	ldr	r3, [pc, #172]	; 196a4 <__assert_fail@plt+0x6fb8>
   195f4:	movw	r2, #1304	; 0x518
   195f8:	ldr	r1, [pc, #168]	; 196a8 <__assert_fail@plt+0x6fbc>
   195fc:	ldr	r0, [pc, #168]	; 196ac <__assert_fail@plt+0x6fc0>
   19600:	bl	126ec <__assert_fail@plt>
   19604:	cmp	r3, #67	; 0x43
   19608:	beq	19678 <__assert_fail@plt+0x6f8c>
   1960c:	cmp	r3, #84	; 0x54
   19610:	bne	195f0 <__assert_fail@plt+0x6f04>
   19614:	ldr	r1, [r5, #80]	; 0x50
   19618:	ldr	r3, [r5, #84]	; 0x54
   1961c:	b	19680 <__assert_fail@plt+0x6f94>
   19620:	add	r3, r5, #72	; 0x48
   19624:	ldm	r3, {r0, r1}
   19628:	ldr	r3, [r5, #76]	; 0x4c
   1962c:	stm	r6, {r0, r1}
   19630:	ldr	fp, [r4, #8]
   19634:	str	r3, [sp, #4]
   19638:	ldm	r6, {r0, r1}
   1963c:	bl	186d8 <__assert_fail@plt+0x5fec>
   19640:	mov	r2, r0
   19644:	mov	r1, fp
   19648:	mov	r0, r7
   1964c:	bl	18d1c <__assert_fail@plt+0x6630>
   19650:	ldr	r4, [r4, #16]
   19654:	b	195ac <__assert_fail@plt+0x6ec0>
   19658:	cmp	r2, #64	; 0x40
   1965c:	str	r8, [sp]
   19660:	mvneq	r3, #0
   19664:	str	r8, [sp, #4]
   19668:	beq	19630 <__assert_fail@plt+0x6f44>
   1966c:	mov	r2, sl
   19670:	ldr	r1, [r4, #8]
   19674:	b	19648 <__assert_fail@plt+0x6f5c>
   19678:	ldr	r1, [r5, #88]	; 0x58
   1967c:	ldr	r3, [r5, #92]	; 0x5c
   19680:	str	r1, [sp]
   19684:	b	19630 <__assert_fail@plt+0x6f44>
   19688:	mov	r3, r5
   1968c:	mov	r2, r9
   19690:	mov	r1, r4
   19694:	mov	r0, r7
   19698:	bl	18e7c <__assert_fail@plt+0x6790>
   1969c:	b	19650 <__assert_fail@plt+0x6f64>
   196a0:	andeq	r9, r3, r7, ror r5
   196a4:	ldrdeq	r9, [r3], -r8
   196a8:	andeq	r9, r3, r1, lsr #22
   196ac:	ldrdeq	r8, [r3], -r2
   196b0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196b4:	ldrb	r7, [sp, #48]	; 0x30
   196b8:	ldrb	fp, [sp, #52]	; 0x34
   196bc:	ldr	r6, [sp, #56]	; 0x38
   196c0:	cmp	r7, #123	; 0x7b
   196c4:	bne	196dc <__assert_fail@plt+0x6ff0>
   196c8:	ldr	r3, [pc, #856]	; 19a28 <__assert_fail@plt+0x733c>
   196cc:	mov	r2, #78	; 0x4e
   196d0:	ldr	r1, [pc, #852]	; 19a2c <__assert_fail@plt+0x7340>
   196d4:	ldr	r0, [pc, #852]	; 19a30 <__assert_fail@plt+0x7344>
   196d8:	bl	126ec <__assert_fail@plt>
   196dc:	cmp	r7, #91	; 0x5b
   196e0:	bne	196f8 <__assert_fail@plt+0x700c>
   196e4:	ldr	r3, [pc, #828]	; 19a28 <__assert_fail@plt+0x733c>
   196e8:	mov	r2, #79	; 0x4f
   196ec:	ldr	r1, [pc, #824]	; 19a2c <__assert_fail@plt+0x7340>
   196f0:	ldr	r0, [pc, #828]	; 19a34 <__assert_fail@plt+0x7348>
   196f4:	b	196d8 <__assert_fail@plt+0x6fec>
   196f8:	cmp	r7, #40	; 0x28
   196fc:	bne	19714 <__assert_fail@plt+0x7028>
   19700:	ldr	r3, [pc, #800]	; 19a28 <__assert_fail@plt+0x733c>
   19704:	mov	r2, #80	; 0x50
   19708:	ldr	r1, [pc, #796]	; 19a2c <__assert_fail@plt+0x7340>
   1970c:	ldr	r0, [pc, #804]	; 19a38 <__assert_fail@plt+0x734c>
   19710:	b	196d8 <__assert_fail@plt+0x6fec>
   19714:	mov	r8, r0
   19718:	mov	r0, #20
   1971c:	str	r1, [sp, #4]
   19720:	mov	r4, r2
   19724:	mov	sl, r3
   19728:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1972c:	mov	r9, r0
   19730:	mov	r3, #0
   19734:	add	r0, r4, #2
   19738:	str	r9, [r8]
   1973c:	str	sl, [r9]
   19740:	strb	r7, [r9, #4]
   19744:	strb	fp, [r9, #5]
   19748:	str	r4, [r9, #12]
   1974c:	str	r3, [r9, #16]
   19750:	bl	273e0 <__assert_fail@plt+0x14cf4>
   19754:	mov	r2, r4
   19758:	ldr	r1, [sp, #4]
   1975c:	mov	r5, r0
   19760:	str	r0, [r9, #8]
   19764:	bl	12458 <strncpy@plt>
   19768:	cmp	sl, #1
   1976c:	add	r2, r5, r4
   19770:	bhi	197b0 <__assert_fail@plt+0x70c4>
   19774:	cmp	r7, #0
   19778:	beq	19790 <__assert_fail@plt+0x70a4>
   1977c:	ldr	r3, [pc, #676]	; 19a28 <__assert_fail@plt+0x733c>
   19780:	mov	r2, #97	; 0x61
   19784:	ldr	r1, [pc, #672]	; 19a2c <__assert_fail@plt+0x7340>
   19788:	ldr	r0, [pc, #684]	; 19a3c <__assert_fail@plt+0x7350>
   1978c:	b	196d8 <__assert_fail@plt+0x6fec>
   19790:	cmp	fp, #0
   19794:	strbeq	fp, [r5, r4]
   19798:	beq	19970 <__assert_fail@plt+0x7284>
   1979c:	ldr	r3, [pc, #644]	; 19a28 <__assert_fail@plt+0x733c>
   197a0:	mov	r2, #98	; 0x62
   197a4:	ldr	r1, [pc, #640]	; 19a2c <__assert_fail@plt+0x7340>
   197a8:	ldr	r0, [pc, #656]	; 19a40 <__assert_fail@plt+0x7354>
   197ac:	b	196d8 <__assert_fail@plt+0x6fec>
   197b0:	cmp	sl, #2
   197b4:	beq	197cc <__assert_fail@plt+0x70e0>
   197b8:	ldr	r3, [pc, #616]	; 19a28 <__assert_fail@plt+0x733c>
   197bc:	mov	r2, #105	; 0x69
   197c0:	ldr	r1, [pc, #612]	; 19a2c <__assert_fail@plt+0x7340>
   197c4:	ldr	r0, [pc, #632]	; 19a44 <__assert_fail@plt+0x7358>
   197c8:	b	196d8 <__assert_fail@plt+0x6fec>
   197cc:	sub	r7, r7, #37	; 0x25
   197d0:	cmp	r7, #84	; 0x54
   197d4:	ldrls	pc, [pc, r7, lsl #2]
   197d8:	b	1993c <__assert_fail@plt+0x7250>
   197dc:	andeq	r9, r1, r0, lsr r9
   197e0:	andeq	r9, r1, ip, lsr r9
   197e4:	andeq	r9, r1, ip, lsr r9
   197e8:	andeq	r9, r1, ip, lsr r9
   197ec:	andeq	r9, r1, ip, lsr r9
   197f0:	andeq	r9, r1, ip, lsr r9
   197f4:	andeq	r9, r1, ip, lsr r9
   197f8:	andeq	r9, r1, ip, lsr r9
   197fc:	andeq	r9, r1, ip, lsr r9
   19800:	andeq	r9, r1, ip, lsr r9
   19804:	andeq	r9, r1, ip, lsr r9
   19808:	andeq	r9, r1, ip, lsr r9
   1980c:	andeq	r9, r1, ip, lsr r9
   19810:	andeq	r9, r1, ip, lsr r9
   19814:	andeq	r9, r1, ip, lsr r9
   19818:	andeq	r9, r1, ip, lsr r9
   1981c:	andeq	r9, r1, ip, lsr r9
   19820:	andeq	r9, r1, ip, lsr r9
   19824:	andeq	r9, r1, ip, lsr r9
   19828:	andeq	r9, r1, ip, lsr r9
   1982c:	andeq	r9, r1, ip, lsr r9
   19830:	andeq	r9, r1, ip, lsr r9
   19834:	andeq	r9, r1, ip, lsr r9
   19838:	andeq	r9, r1, ip, lsr r9
   1983c:	andeq	r9, r1, ip, lsr r9
   19840:	andeq	r9, r1, ip, lsr r9
   19844:	andeq	r9, r1, ip, lsr r9
   19848:	andeq	r9, r1, ip, lsr r9
   1984c:	strdeq	r9, [r1], -r8
   19850:	strdeq	r9, [r1], -r8
   19854:	strdeq	r9, [r1], -r8
   19858:	strdeq	r9, [r1], -r8
   1985c:	andeq	r9, r1, ip, lsr r9
   19860:	strdeq	r9, [r1], -r8
   19864:	strdeq	r9, [r1], -r8
   19868:	strdeq	r9, [r1], -r0
   1986c:	andeq	r9, r1, ip, lsr r9
   19870:	andeq	r9, r1, ip, lsr r9
   19874:	andeq	r9, r1, ip, lsr r9
   19878:	andeq	r9, r1, ip, lsr r9
   1987c:	strdeq	r9, [r1], -r8
   19880:	andeq	r9, r1, ip, lsr r9
   19884:	andeq	r9, r1, ip, lsr r9
   19888:	strdeq	r9, [r1], -r0
   1988c:	andeq	r9, r1, ip, lsr r9
   19890:	andeq	r9, r1, ip, lsr r9
   19894:			; <UNDEFINED> instruction: 0x000199b4
   19898:	strdeq	r9, [r1], -r8
   1989c:	strdeq	r9, [r1], -r8
   198a0:	andeq	r9, r1, ip, lsr r9
   198a4:	andeq	r9, r1, ip, lsr r9
   198a8:	andeq	r9, r1, ip, lsr r9
   198ac:	ldrdeq	r9, [r1], -r0
   198b0:	ldrdeq	r9, [r1], -ip
   198b4:	andeq	r9, r1, ip, lsr r9
   198b8:	andeq	r9, r1, ip, lsr r9
   198bc:	andeq	r9, r1, ip, lsr r9
   198c0:	andeq	r9, r1, ip, lsr r9
   198c4:	andeq	r9, r1, ip, lsr r9
   198c8:	andeq	r9, r1, ip, lsr r9
   198cc:	strdeq	r9, [r1], -r8
   198d0:	strdeq	r9, [r1], -r8
   198d4:	strdeq	r9, [r1], -r8
   198d8:	andeq	r9, r1, r8, lsl #20
   198dc:	andeq	r9, r1, ip, lsr r9
   198e0:	strdeq	r9, [r1], -r0
   198e4:	strdeq	r9, [r1], -r8
   198e8:	strdeq	r9, [r1], -r0
   198ec:	muleq	r1, ip, r9
   198f0:	andeq	r9, r1, ip, lsr r9
   198f4:	strdeq	r9, [r1], -r8
   198f8:	andeq	r9, r1, r4, asr #18
   198fc:	andeq	r9, r1, r0, lsl sl
   19900:	strdeq	r9, [r1], -r8
   19904:	andeq	r9, r1, ip, lsr r9
   19908:	strdeq	r9, [r1], -r0
   1990c:	andeq	r9, r1, ip, lsr r9
   19910:	andeq	r9, r1, ip, lsr r9
   19914:	strdeq	r9, [r1], -r8
   19918:	strdeq	r9, [r1], -r8
   1991c:	strdeq	r9, [r1], -r8
   19920:	andeq	r9, r1, ip, lsr r9
   19924:	andeq	r9, r1, ip, lsr r9
   19928:	andeq	r9, r1, ip, lsr r9
   1992c:	andeq	r9, r1, r0, lsl #19
   19930:	mov	r3, #37	; 0x25
   19934:	add	r2, r2, #1
   19938:	strb	r3, [r5, r4]
   1993c:	mov	r3, #0
   19940:	b	1995c <__assert_fail@plt+0x7270>
   19944:	mov	r3, #1
   19948:	add	r2, r2, #1
   1994c:	strb	r3, [r6, #18]
   19950:	mov	r3, #115	; 0x73
   19954:	strb	r3, [r5, r4]
   19958:	mov	r3, #4
   1995c:	mov	r1, #0
   19960:	strb	r1, [r2]
   19964:	ldr	r2, [r6, #24]
   19968:	cmp	r2, r3
   1996c:	strcc	r3, [r6, #24]
   19970:	ldr	r0, [r8]
   19974:	add	r0, r0, #16
   19978:	add	sp, sp, #12
   1997c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19980:	mov	r3, #1
   19984:	strb	r3, [r6, #19]
   19988:	mov	r3, #115	; 0x73
   1998c:	add	r2, r2, #1
   19990:	strb	r3, [r5, r4]
   19994:	mov	r3, #2
   19998:	b	1995c <__assert_fail@plt+0x7270>
   1999c:	mov	r3, #1
   199a0:	mov	r1, #115	; 0x73
   199a4:	add	r2, r2, r3
   199a8:	strb	r1, [r5, r4]
   199ac:	strb	r3, [r6, #20]
   199b0:	b	1995c <__assert_fail@plt+0x7270>
   199b4:	mov	r3, #1
   199b8:	strb	r3, [r6, #18]
   199bc:	mov	r3, #103	; 0x67
   199c0:	add	r2, r2, #1
   199c4:	strb	r3, [r5, r4]
   199c8:	mov	r3, #3
   199cc:	b	1995c <__assert_fail@plt+0x7270>
   199d0:	mov	r3, #1
   199d4:	strb	r3, [r6, #18]
   199d8:	b	19988 <__assert_fail@plt+0x729c>
   199dc:	mov	r3, #115	; 0x73
   199e0:	add	r2, r2, #1
   199e4:	strb	r3, [r5, r4]
   199e8:	mov	r3, #5
   199ec:	b	1995c <__assert_fail@plt+0x7270>
   199f0:	mov	r3, #115	; 0x73
   199f4:	b	19934 <__assert_fail@plt+0x7248>
   199f8:	mov	r3, #1
   199fc:	strb	r3, [r6, #18]
   19a00:	mov	r3, #115	; 0x73
   19a04:	b	199c0 <__assert_fail@plt+0x72d4>
   19a08:	mov	r3, #100	; 0x64
   19a0c:	b	19934 <__assert_fail@plt+0x7248>
   19a10:	mov	r3, #111	; 0x6f
   19a14:	strb	r3, [r5, r4]
   19a18:	mov	r3, #1
   19a1c:	add	r2, r2, r3
   19a20:	strb	r3, [r6, #18]
   19a24:	b	199c8 <__assert_fail@plt+0x72dc>
   19a28:	andeq	r9, r3, r5, ror #21
   19a2c:	andeq	r9, r3, r1, lsr #22
   19a30:	andeq	r9, r3, r4, asr #25
   19a34:	ldrdeq	r9, [r3], -r7
   19a38:	andeq	r9, r3, sl, ror #25
   19a3c:	strdeq	r9, [r3], -sp
   19a40:	andeq	r9, r3, lr, lsl #26
   19a44:	andeq	r9, r3, r3, lsr #26
   19a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a4c:	mov	r5, r0
   19a50:	sub	sp, sp, #28
   19a54:	mov	r0, r1
   19a58:	mov	r4, r2
   19a5c:	mov	r6, r4
   19a60:	ldr	r1, [pc, #904]	; 19df0 <__assert_fail@plt+0x7704>
   19a64:	bl	17374 <__assert_fail@plt+0x4c88>
   19a68:	mov	ip, r5
   19a6c:	mov	r7, r0
   19a70:	ldr	sl, [pc, #892]	; 19df4 <__assert_fail@plt+0x7708>
   19a74:	add	lr, r0, #40	; 0x28
   19a78:	ldm	ip!, {r0, r1, r2, r3}
   19a7c:	add	r8, r7, #40	; 0x28
   19a80:	ldr	fp, [pc, #880]	; 19df8 <__assert_fail@plt+0x770c>
   19a84:	stmia	lr!, {r0, r1, r2, r3}
   19a88:	ldr	r3, [ip]
   19a8c:	str	r3, [lr]
   19a90:	movw	r3, #257	; 0x101
   19a94:	str	r3, [r7, #16]
   19a98:	mov	r3, #0
   19a9c:	str	r3, [r7, #24]
   19aa0:	str	r3, [r7, #40]	; 0x28
   19aa4:	ldrb	r3, [r4]
   19aa8:	cmp	r3, #0
   19aac:	bne	19ad4 <__assert_fail@plt+0x73e8>
   19ab0:	cmp	r6, r4
   19ab4:	bcs	19b24 <__assert_fail@plt+0x7438>
   19ab8:	sub	r2, r4, r6
   19abc:	mov	r1, r6
   19ac0:	str	r3, [sp]
   19ac4:	mov	r0, r8
   19ac8:	stmib	sp, {r3, r7}
   19acc:	bl	196b0 <__assert_fail@plt+0x6fc4>
   19ad0:	b	19b24 <__assert_fail@plt+0x7438>
   19ad4:	cmp	r3, #92	; 0x5c
   19ad8:	ldrb	r5, [r4, #1]
   19adc:	bne	19c2c <__assert_fail@plt+0x7540>
   19ae0:	cmp	r5, #99	; 0x63
   19ae4:	bne	19b30 <__assert_fail@plt+0x7444>
   19ae8:	mov	r3, #0
   19aec:	sub	r2, r4, r6
   19af0:	mov	r1, r6
   19af4:	mov	r0, r8
   19af8:	str	r3, [sp]
   19afc:	stmib	sp, {r3, r7}
   19b00:	mov	r3, #1
   19b04:	bl	196b0 <__assert_fail@plt+0x6fc4>
   19b08:	ldrb	r3, [r7, #18]
   19b0c:	cmp	r3, #0
   19b10:	beq	19b24 <__assert_fail@plt+0x7438>
   19b14:	ldr	r3, [r7, #24]
   19b18:	cmp	r3, #2
   19b1c:	movls	r3, #3
   19b20:	strls	r3, [r7, #24]
   19b24:	mov	r0, #1
   19b28:	add	sp, sp, #28
   19b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b30:	cmp	r5, #0
   19b34:	bne	19b8c <__assert_fail@plt+0x74a0>
   19b38:	mov	r2, #5
   19b3c:	ldr	r1, [pc, #696]	; 19dfc <__assert_fail@plt+0x7710>
   19b40:	mov	r0, r5
   19b44:	bl	1217c <dcgettext@plt>
   19b48:	mov	r2, r0
   19b4c:	mov	r1, r5
   19b50:	mov	r0, r5
   19b54:	bl	122c0 <error@plt>
   19b58:	mov	r3, #0
   19b5c:	sub	r2, r4, r6
   19b60:	mov	r1, r6
   19b64:	mov	r0, r8
   19b68:	add	r2, r2, #1
   19b6c:	str	r3, [sp]
   19b70:	add	r6, r5, #1
   19b74:	stmib	sp, {r3, r7}
   19b78:	add	r6, r4, r6
   19b7c:	add	r4, r4, r5
   19b80:	bl	196b0 <__assert_fail@plt+0x6fc4>
   19b84:	mov	r8, r0
   19b88:	b	19c24 <__assert_fail@plt+0x7538>
   19b8c:	sub	r3, r5, #48	; 0x30
   19b90:	cmp	r3, #7
   19b94:	bhi	19bd4 <__assert_fail@plt+0x74e8>
   19b98:	mov	r2, #0
   19b9c:	mov	r3, r2
   19ba0:	add	r5, r2, #1
   19ba4:	ldrb	r1, [r4, r5]
   19ba8:	sub	r0, r1, #48	; 0x30
   19bac:	cmp	r0, #7
   19bb0:	movhi	r5, r2
   19bb4:	bhi	19bcc <__assert_fail@plt+0x74e0>
   19bb8:	add	r3, r1, r3, lsl #3
   19bbc:	cmp	r5, #3
   19bc0:	mov	r2, r5
   19bc4:	sub	r3, r3, #48	; 0x30
   19bc8:	bne	19ba0 <__assert_fail@plt+0x74b4>
   19bcc:	strb	r3, [r4]
   19bd0:	b	19b58 <__assert_fail@plt+0x746c>
   19bd4:	sub	r5, r5, #92	; 0x5c
   19bd8:	uxtb	r5, r5
   19bdc:	cmp	r5, #26
   19be0:	bhi	19c00 <__assert_fail@plt+0x7514>
   19be4:	ldr	r3, [pc, #532]	; 19e00 <__assert_fail@plt+0x7714>
   19be8:	add	r5, r3, r5
   19bec:	ldrb	r3, [r5, #142]	; 0x8e
   19bf0:	cmp	r3, #0
   19bf4:	movne	r5, #1
   19bf8:	strbne	r3, [r4]
   19bfc:	bne	19b58 <__assert_fail@plt+0x746c>
   19c00:	mov	r2, #5
   19c04:	ldr	r1, [pc, #504]	; 19e04 <__assert_fail@plt+0x7718>
   19c08:	mov	r0, #0
   19c0c:	bl	1217c <dcgettext@plt>
   19c10:	mov	r1, #0
   19c14:	mov	r2, r0
   19c18:	ldrb	r3, [r4, #1]!
   19c1c:	mov	r0, r1
   19c20:	bl	122c0 <error@plt>
   19c24:	add	r4, r4, #1
   19c28:	b	19aa4 <__assert_fail@plt+0x73b8>
   19c2c:	cmp	r3, #37	; 0x25
   19c30:	bne	19c24 <__assert_fail@plt+0x7538>
   19c34:	cmp	r5, #0
   19c38:	bne	19c60 <__assert_fail@plt+0x7574>
   19c3c:	mov	r2, #5
   19c40:	ldr	r1, [pc, #448]	; 19e08 <__assert_fail@plt+0x771c>
   19c44:	mov	r0, r5
   19c48:	bl	1217c <dcgettext@plt>
   19c4c:	mov	r3, r4
   19c50:	mov	r2, r0
   19c54:	mov	r1, #0
   19c58:	mov	r0, #1
   19c5c:	bl	122c0 <error@plt>
   19c60:	cmp	r5, #37	; 0x25
   19c64:	moveq	r9, #1
   19c68:	beq	19cd0 <__assert_fail@plt+0x75e4>
   19c6c:	ldr	r5, [pc, #408]	; 19e0c <__assert_fail@plt+0x7720>
   19c70:	mov	r9, #0
   19c74:	add	r9, r9, #1
   19c78:	ldrb	r1, [r4, r9]
   19c7c:	cmp	r1, #0
   19c80:	beq	19c94 <__assert_fail@plt+0x75a8>
   19c84:	mov	r0, r5
   19c88:	bl	123c8 <strchr@plt>
   19c8c:	cmp	r0, #0
   19c90:	bne	19c74 <__assert_fail@plt+0x7588>
   19c94:	bl	12374 <__ctype_b_loc@plt>
   19c98:	ldr	r1, [r0]
   19c9c:	ldrb	r2, [r4, r9]
   19ca0:	lsl	r0, r2, #1
   19ca4:	ldrh	r0, [r1, r0]
   19ca8:	tst	r0, #2048	; 0x800
   19cac:	bne	19d3c <__assert_fail@plt+0x7650>
   19cb0:	cmp	r2, #46	; 0x2e
   19cb4:	bne	19cd0 <__assert_fail@plt+0x75e4>
   19cb8:	add	r9, r9, #1
   19cbc:	ldrb	r2, [r4, r9]
   19cc0:	lsl	r2, r2, #1
   19cc4:	ldrh	r2, [r1, r2]
   19cc8:	tst	r2, #2048	; 0x800
   19ccc:	bne	19cb8 <__assert_fail@plt+0x75cc>
   19cd0:	add	r5, r4, r9
   19cd4:	ldrb	r9, [r4, r9]
   19cd8:	ldr	r0, [pc, #304]	; 19e10 <__assert_fail@plt+0x7724>
   19cdc:	mov	r1, r9
   19ce0:	bl	123c8 <strchr@plt>
   19ce4:	cmp	r0, #0
   19ce8:	movne	r3, #1
   19cec:	bne	19d44 <__assert_fail@plt+0x7658>
   19cf0:	mov	r1, r9
   19cf4:	ldr	r0, [pc, #280]	; 19e14 <__assert_fail@plt+0x7728>
   19cf8:	bl	123c8 <strchr@plt>
   19cfc:	subs	r3, r0, #0
   19d00:	movne	r3, #2
   19d04:	bne	19d44 <__assert_fail@plt+0x7658>
   19d08:	mov	r1, r9
   19d0c:	mov	r0, sl
   19d10:	str	r3, [sp, #20]
   19d14:	bl	123c8 <strchr@plt>
   19d18:	cmp	r0, #0
   19d1c:	mov	r2, #5
   19d20:	ldr	r3, [sp, #20]
   19d24:	beq	19d8c <__assert_fail@plt+0x76a0>
   19d28:	ldr	r1, [pc, #232]	; 19e18 <__assert_fail@plt+0x772c>
   19d2c:	mov	r0, #0
   19d30:	bl	1217c <dcgettext@plt>
   19d34:	ldrb	r3, [r5]
   19d38:	b	19c50 <__assert_fail@plt+0x7564>
   19d3c:	add	r9, r9, #1
   19d40:	b	19c9c <__assert_fail@plt+0x75b0>
   19d44:	sub	r1, r3, #1
   19d48:	add	r4, r5, r1
   19d4c:	ldrb	r1, [r5, r1]
   19d50:	cmp	r1, #0
   19d54:	beq	19d08 <__assert_fail@plt+0x761c>
   19d58:	cmp	r3, #2
   19d5c:	mov	r0, r8
   19d60:	ldrbeq	r3, [r5, #1]
   19d64:	movne	r3, #0
   19d68:	sub	r2, r5, r6
   19d6c:	mov	r1, r6
   19d70:	str	r9, [sp]
   19d74:	stmib	sp, {r3, r7}
   19d78:	mov	r3, #2
   19d7c:	bl	196b0 <__assert_fail@plt+0x6fc4>
   19d80:	mov	r8, r0
   19d84:	add	r6, r4, #1
   19d88:	b	19c24 <__assert_fail@plt+0x7538>
   19d8c:	cmp	r3, #2
   19d90:	bne	19da4 <__assert_fail@plt+0x76b8>
   19d94:	ldrb	r4, [r5, #1]
   19d98:	cmp	r4, #0
   19d9c:	ldreq	r1, [pc, #120]	; 19e1c <__assert_fail@plt+0x7730>
   19da0:	beq	19dac <__assert_fail@plt+0x76c0>
   19da4:	mov	r1, fp
   19da8:	mov	r0, #0
   19dac:	bl	1217c <dcgettext@plt>
   19db0:	mov	r1, #0
   19db4:	mov	r2, r0
   19db8:	ldrb	r3, [r5]
   19dbc:	mov	r0, r1
   19dc0:	mov	r4, r5
   19dc4:	bl	122c0 <error@plt>
   19dc8:	mov	r3, #0
   19dcc:	add	r2, r5, #1
   19dd0:	mov	r0, r8
   19dd4:	sub	r2, r2, r6
   19dd8:	mov	r1, r6
   19ddc:	str	r3, [sp]
   19de0:	stmib	sp, {r3, r7}
   19de4:	bl	196b0 <__assert_fail@plt+0x6fc4>
   19de8:	mov	r8, r0
   19dec:	b	19d84 <__assert_fail@plt+0x7698>
   19df0:	andeq	r9, r1, ip, lsl #11
   19df4:			; <UNDEFINED> instruction: 0x00039db0
   19df8:	andeq	r9, r3, fp, lsr lr
   19dfc:	andeq	r9, r3, r7, lsr sp
   19e00:	andeq	r9, r3, r4, ror #20
   19e04:	andeq	r9, r3, r6, ror #26
   19e08:	andeq	r9, r3, r2, lsr #25
   19e0c:	andeq	r9, r3, r9, lsl #27
   19e10:	andeq	r9, r3, lr, lsl #27
   19e14:	andeq	r9, r3, fp, lsr #27
   19e18:			; <UNDEFINED> instruction: 0x00039db4
   19e1c:	strdeq	r9, [r3], -r2
   19e20:	push	{r4, r5, r6, lr}
   19e24:	mov	r5, r0
   19e28:	ldr	r4, [pc, #68]	; 19e74 <__assert_fail@plt+0x7788>
   19e2c:	ldr	r0, [r4]
   19e30:	cmp	r0, #0
   19e34:	beq	19e5c <__assert_fail@plt+0x7770>
   19e38:	ldrb	r3, [r4, #4]
   19e3c:	eor	r3, r3, #1
   19e40:	tst	r5, r3
   19e44:	beq	19e6c <__assert_fail@plt+0x7780>
   19e48:	ldr	r6, [r0, #28]
   19e4c:	bl	2a474 <__assert_fail@plt+0x17d88>
   19e50:	subs	r0, r6, #0
   19e54:	bne	19e48 <__assert_fail@plt+0x775c>
   19e58:	str	r0, [r4]
   19e5c:	mov	r0, r5
   19e60:	bl	2a4b4 <__assert_fail@plt+0x17dc8>
   19e64:	str	r0, [r4]
   19e68:	strb	r5, [r4, #4]
   19e6c:	ldr	r0, [r4]
   19e70:	pop	{r4, r5, r6, pc}
   19e74:	ldrdeq	lr, [r4], -r0
   19e78:	push	{r4, lr}
   19e7c:	sub	sp, sp, #104	; 0x68
   19e80:	mov	r4, r0
   19e84:	mov	r0, sp
   19e88:	bl	175f8 <__assert_fail@plt+0x4f0c>
   19e8c:	ldr	r3, [pc, #36]	; 19eb8 <__assert_fail@plt+0x77cc>
   19e90:	mov	r1, sp
   19e94:	ldr	r0, [r4, #4]
   19e98:	ldr	r3, [r3, #52]	; 0x34
   19e9c:	blx	r3
   19ea0:	cmp	r0, #0
   19ea4:	ldrdeq	r2, [sp]
   19ea8:	mvnne	r0, #0
   19eac:	strdeq	r2, [r4, #16]
   19eb0:	add	sp, sp, #104	; 0x68
   19eb4:	pop	{r4, pc}
   19eb8:	andeq	lr, r4, r4, lsl #29
   19ebc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ec0:	mov	r5, r0
   19ec4:	ldr	r6, [pc, #280]	; 19fe4 <__assert_fail@plt+0x78f8>
   19ec8:	ldr	r4, [r6, #8]
   19ecc:	cmp	r4, #0
   19ed0:	beq	19efc <__assert_fail@plt+0x7810>
   19ed4:	ldrb	r3, [r6, #12]
   19ed8:	cmp	r3, #0
   19edc:	beq	19ef4 <__assert_fail@plt+0x7808>
   19ee0:	ldrd	r0, [r0]
   19ee4:	ldrd	r2, [r6, #16]
   19ee8:	cmp	r1, r3
   19eec:	cmpeq	r0, r2
   19ef0:	beq	19fc8 <__assert_fail@plt+0x78dc>
   19ef4:	mov	r0, r4
   19ef8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   19efc:	ldrd	r2, [r5]
   19f00:	mov	r0, #1
   19f04:	strd	r2, [r6, #16]
   19f08:	bl	19e20 <__assert_fail@plt+0x7734>
   19f0c:	subs	r7, r0, #0
   19f10:	bne	19f30 <__assert_fail@plt+0x7844>
   19f14:	mov	r2, #5
   19f18:	ldr	r1, [pc, #200]	; 19fe8 <__assert_fail@plt+0x78fc>
   19f1c:	bl	1217c <dcgettext@plt>
   19f20:	mov	r2, r0
   19f24:	mov	r1, r7
   19f28:	mov	r0, #1
   19f2c:	bl	122c0 <error@plt>
   19f30:	ldr	sl, [pc, #180]	; 19fec <__assert_fail@plt+0x7900>
   19f34:	mov	r4, #0
   19f38:	mvn	r8, #0
   19f3c:	mvn	r9, #0
   19f40:	mov	r1, sl
   19f44:	ldr	r0, [r7, #12]
   19f48:	bl	11ffc <strcmp@plt>
   19f4c:	cmp	r0, #0
   19f50:	beq	19f78 <__assert_fail@plt+0x788c>
   19f54:	ldrd	r2, [r7, #16]
   19f58:	cmp	r3, r9
   19f5c:	cmpeq	r2, r8
   19f60:	beq	19fd0 <__assert_fail@plt+0x78e4>
   19f64:	ldrd	r2, [r5]
   19f68:	ldrd	r0, [r7, #16]
   19f6c:	cmp	r1, r3
   19f70:	cmpeq	r0, r2
   19f74:	moveq	r4, r7
   19f78:	ldr	r7, [r7, #28]
   19f7c:	cmp	r7, #0
   19f80:	bne	19f40 <__assert_fail@plt+0x7854>
   19f84:	cmp	r4, #0
   19f88:	beq	19f98 <__assert_fail@plt+0x78ac>
   19f8c:	ldr	r0, [r4, #12]
   19f90:	bl	2767c <__assert_fail@plt+0x14f90>
   19f94:	mov	r4, r0
   19f98:	cmp	r4, #0
   19f9c:	movne	r3, #1
   19fa0:	moveq	r3, #0
   19fa4:	strb	r3, [r6, #12]
   19fa8:	bne	19fc4 <__assert_fail@plt+0x78d8>
   19fac:	mov	r2, #5
   19fb0:	ldr	r1, [pc, #56]	; 19ff0 <__assert_fail@plt+0x7904>
   19fb4:	mov	r0, r4
   19fb8:	bl	1217c <dcgettext@plt>
   19fbc:	bl	2767c <__assert_fail@plt+0x14f90>
   19fc0:	mov	r4, r0
   19fc4:	str	r4, [r6, #8]
   19fc8:	mov	r0, r4
   19fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fd0:	mov	r0, r7
   19fd4:	bl	19e78 <__assert_fail@plt+0x778c>
   19fd8:	cmp	r0, #0
   19fdc:	bne	19f78 <__assert_fail@plt+0x788c>
   19fe0:	b	19f64 <__assert_fail@plt+0x7878>
   19fe4:	ldrdeq	lr, [r4], -r0
   19fe8:			; <UNDEFINED> instruction: 0x00039eb5
   19fec:	ldrdeq	r9, [r3], -sl
   19ff0:	andeq	r8, r3, r4, asr r8
   19ff4:	push	{r4, r5, r6, lr}
   19ff8:	mov	r1, r0
   19ffc:	mov	r5, r0
   1a000:	ldr	r0, [pc, #72]	; 1a050 <__assert_fail@plt+0x7964>
   1a004:	bl	11ffc <strcmp@plt>
   1a008:	cmp	r0, #0
   1a00c:	beq	1a048 <__assert_fail@plt+0x795c>
   1a010:	mov	r0, #0
   1a014:	bl	19e20 <__assert_fail@plt+0x7734>
   1a018:	subs	r4, r0, #0
   1a01c:	beq	1a048 <__assert_fail@plt+0x795c>
   1a020:	mov	r0, r5
   1a024:	ldr	r1, [r4, #12]
   1a028:	bl	11ffc <strcmp@plt>
   1a02c:	cmp	r0, #0
   1a030:	beq	1a048 <__assert_fail@plt+0x795c>
   1a034:	ldr	r4, [r4, #28]
   1a038:	cmp	r4, #0
   1a03c:	bne	1a020 <__assert_fail@plt+0x7934>
   1a040:	mov	r0, r4
   1a044:	pop	{r4, r5, r6, pc}
   1a048:	mov	r0, #1
   1a04c:	pop	{r4, r5, r6, pc}
   1a050:	andeq	r9, r3, r1, ror #29
   1a054:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a058:	mov	r4, #0
   1a05c:	mov	fp, r0
   1a060:	mov	r0, r4
   1a064:	mov	r8, r4
   1a068:	str	r4, [sp, #4]
   1a06c:	bl	2a4b4 <__assert_fail@plt+0x17dc8>
   1a070:	mov	r6, r0
   1a074:	mov	r5, r0
   1a078:	cmp	r5, #0
   1a07c:	bne	1a09c <__assert_fail@plt+0x79b0>
   1a080:	cmp	r6, #0
   1a084:	bne	1a110 <__assert_fail@plt+0x7a24>
   1a088:	cmp	r4, #0
   1a08c:	mov	r0, r4
   1a090:	strne	r8, [fp]
   1a094:	add	sp, sp, #12
   1a098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a09c:	add	sl, r8, #1
   1a0a0:	add	r2, sp, #4
   1a0a4:	lsl	r7, sl, #3
   1a0a8:	mov	r0, r4
   1a0ac:	mov	r1, r7
   1a0b0:	bl	1e0d8 <__assert_fail@plt+0xb9ec>
   1a0b4:	subs	r9, r0, #0
   1a0b8:	beq	1a104 <__assert_fail@plt+0x7a18>
   1a0bc:	ldrd	r2, [r5, #16]
   1a0c0:	mvn	r1, #0
   1a0c4:	mvn	r0, #0
   1a0c8:	cmp	r3, r1
   1a0cc:	cmpeq	r2, r0
   1a0d0:	beq	1a0f0 <__assert_fail@plt+0x7a04>
   1a0d4:	ldrd	r2, [r5, #16]
   1a0d8:	add	r7, r9, r7
   1a0dc:	mov	r8, sl
   1a0e0:	strd	r2, [r7, #-8]
   1a0e4:	mov	r4, r9
   1a0e8:	ldr	r5, [r5, #28]
   1a0ec:	b	1a078 <__assert_fail@plt+0x798c>
   1a0f0:	mov	r0, r5
   1a0f4:	bl	19e78 <__assert_fail@plt+0x778c>
   1a0f8:	cmp	r0, #0
   1a0fc:	bne	1a0e4 <__assert_fail@plt+0x79f8>
   1a100:	b	1a0d4 <__assert_fail@plt+0x79e8>
   1a104:	mov	r0, r4
   1a108:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1a10c:	b	1a0e4 <__assert_fail@plt+0x79f8>
   1a110:	ldr	r5, [r6, #28]
   1a114:	mov	r0, r6
   1a118:	bl	2a474 <__assert_fail@plt+0x17d88>
   1a11c:	mov	r6, r5
   1a120:	b	1a080 <__assert_fail@plt+0x7994>
   1a124:	andeq	r0, r0, r0
   1a128:	ldr	r3, [r0]
   1a12c:	ldrb	r2, [r3]
   1a130:	cmp	r2, #43	; 0x2b
   1a134:	beq	1a14c <__assert_fail@plt+0x7a60>
   1a138:	cmp	r2, #45	; 0x2d
   1a13c:	beq	1a164 <__assert_fail@plt+0x7a78>
   1a140:	mov	r3, #2
   1a144:	str	r3, [r1]
   1a148:	b	1a15c <__assert_fail@plt+0x7a70>
   1a14c:	mov	r2, #0
   1a150:	add	r3, r3, #1
   1a154:	str	r2, [r1]
   1a158:	str	r3, [r0]
   1a15c:	mov	r0, #1
   1a160:	bx	lr
   1a164:	mov	r2, #1
   1a168:	add	r3, r3, r2
   1a16c:	str	r2, [r1]
   1a170:	b	1a158 <__assert_fail@plt+0x7a6c>
   1a174:	b	26a28 <__assert_fail@plt+0x1433c>
   1a178:	push	{r0, r1, r2, lr}
   1a17c:	ldr	r0, [pc, #184]	; 1a23c <__assert_fail@plt+0x7b50>
   1a180:	bl	1e674 <__assert_fail@plt+0xbf88>
   1a184:	mov	r2, #5
   1a188:	ldr	r1, [pc, #176]	; 1a240 <__assert_fail@plt+0x7b54>
   1a18c:	mov	r0, #0
   1a190:	bl	1217c <dcgettext@plt>
   1a194:	bl	1202c <printf@plt>
   1a198:	ldr	r0, [pc, #164]	; 1a244 <__assert_fail@plt+0x7b58>
   1a19c:	bl	1202c <printf@plt>
   1a1a0:	ldr	r3, [pc, #160]	; 1a248 <__assert_fail@plt+0x7b5c>
   1a1a4:	ldr	r2, [pc, #160]	; 1a24c <__assert_fail@plt+0x7b60>
   1a1a8:	ldr	r0, [pc, #160]	; 1a250 <__assert_fail@plt+0x7b64>
   1a1ac:	mov	r4, r3
   1a1b0:	ldrb	r1, [r3, #56]	; 0x38
   1a1b4:	ldr	r3, [pc, #152]	; 1a254 <__assert_fail@plt+0x7b68>
   1a1b8:	cmp	r1, #0
   1a1bc:	movne	r1, r2
   1a1c0:	moveq	r1, r3
   1a1c4:	bl	1202c <printf@plt>
   1a1c8:	ldr	r0, [pc, #136]	; 1a258 <__assert_fail@plt+0x7b6c>
   1a1cc:	bl	1202c <printf@plt>
   1a1d0:	bl	11fe4 <is_selinux_enabled@plt>
   1a1d4:	cmp	r0, #0
   1a1d8:	ble	1a1e4 <__assert_fail@plt+0x7af8>
   1a1dc:	ldr	r0, [pc, #120]	; 1a25c <__assert_fail@plt+0x7b70>
   1a1e0:	bl	1202c <printf@plt>
   1a1e4:	mov	r3, #0
   1a1e8:	add	r0, sp, #4
   1a1ec:	str	r3, [sp, #4]
   1a1f0:	bl	1364c <__assert_fail@plt+0xf60>
   1a1f4:	cmp	r0, #0
   1a1f8:	beq	1a220 <__assert_fail@plt+0x7b34>
   1a1fc:	ldr	r0, [pc, #92]	; 1a260 <__assert_fail@plt+0x7b74>
   1a200:	bl	1202c <printf@plt>
   1a204:	ldr	r3, [sp, #4]
   1a208:	tst	r3, #512	; 0x200
   1a20c:	beq	1a218 <__assert_fail@plt+0x7b2c>
   1a210:	ldr	r0, [pc, #76]	; 1a264 <__assert_fail@plt+0x7b78>
   1a214:	bl	1202c <printf@plt>
   1a218:	ldr	r0, [pc, #72]	; 1a268 <__assert_fail@plt+0x7b7c>
   1a21c:	bl	1202c <printf@plt>
   1a220:	ldrh	r1, [r4, #68]	; 0x44
   1a224:	ldr	r0, [pc, #64]	; 1a26c <__assert_fail@plt+0x7b80>
   1a228:	bl	1202c <printf@plt>
   1a22c:	mov	r0, #10
   1a230:	bl	1244c <putchar@plt>
   1a234:	mov	r0, #0
   1a238:	bl	1238c <exit@plt>
   1a23c:	andeq	r7, r3, r9, asr ip
   1a240:	andeq	sl, r3, r1, asr #9
   1a244:	ldrdeq	sl, [r3], -r4
   1a248:	andeq	lr, r4, r4, lsl #29
   1a24c:			; <UNDEFINED> instruction: 0x0003a4b0
   1a250:	ldrdeq	sl, [r3], -ip
   1a254:			; <UNDEFINED> instruction: 0x0003a4b8
   1a258:	andeq	sl, r3, ip, ror #9
   1a25c:	strdeq	sl, [r3], -pc	; <UNPREDICTABLE>
   1a260:	andeq	sl, r3, r8, lsl #10
   1a264:	andeq	sl, r3, sp, lsl #10
   1a268:	andeq	r8, r3, r1, asr #1
   1a26c:	andeq	sl, r3, r7, lsl r5
   1a270:	push	{r4, lr}
   1a274:	mov	r0, #0
   1a278:	bl	173ec <__assert_fail@plt+0x4d00>
   1a27c:	push	{r4, lr}
   1a280:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1a284:	mov	r3, #0
   1a288:	strh	r3, [r0, #18]
   1a28c:	mov	r3, #1065353216	; 0x3f800000
   1a290:	str	r3, [r0, #28]
   1a294:	mov	r0, #1
   1a298:	pop	{r4, pc}
   1a29c:	push	{r4, lr}
   1a2a0:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1a2a4:	mov	r3, #1
   1a2a8:	mov	r2, #1065353216	; 0x3f800000
   1a2ac:	str	r3, [r0, #16]
   1a2b0:	str	r2, [r0, #28]
   1a2b4:	mov	r0, r3
   1a2b8:	pop	{r4, pc}
   1a2bc:	push	{r4, lr}
   1a2c0:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1a2c4:	ldr	r3, [pc, #24]	; 1a2e4 <__assert_fail@plt+0x7bf8>
   1a2c8:	ldrb	r3, [r3]
   1a2cc:	cmp	r3, #0
   1a2d0:	strheq	r3, [r0, #18]
   1a2d4:	mov	r3, #1
   1a2d8:	strh	r3, [r0, #16]
   1a2dc:	mov	r0, r3
   1a2e0:	pop	{r4, pc}
   1a2e4:	andeq	lr, r4, r4, lsl #29
   1a2e8:	push	{r4, lr}
   1a2ec:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1a2f0:	ldr	r3, [pc, #8]	; 1a300 <__assert_fail@plt+0x7c14>
   1a2f4:	str	r3, [r0, #28]
   1a2f8:	mov	r0, #1
   1a2fc:	pop	{r4, pc}
   1a300:	bcc	fe0decc4 <stdout@@GLIBC_2.4+0xfe090758>
   1a304:	push	{r4, lr}
   1a308:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1a30c:	mov	r3, #0
   1a310:	ldr	r2, [r0]
   1a314:	str	r3, [r0, #16]
   1a318:	ldr	r3, [pc, #32]	; 1a340 <__assert_fail@plt+0x7c54>
   1a31c:	vldr	s14, [pc, #20]	; 1a338 <__assert_fail@plt+0x7c4c>
   1a320:	vldr	s15, [pc, #20]	; 1a33c <__assert_fail@plt+0x7c50>
   1a324:	cmp	r2, r3
   1a328:	vmovne.f32	s15, s14
   1a32c:	vstr	s15, [r0, #28]
   1a330:	mov	r0, #1
   1a334:	pop	{r4, pc}
   1a338:	svccc	0x00666666
   1a33c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1a340:	andeq	r4, r1, r0, ror #9
   1a344:	push	{r4, lr}
   1a348:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1a34c:	ldr	r3, [pc, #8]	; 1a35c <__assert_fail@plt+0x7c70>
   1a350:	str	r3, [r0, #28]
   1a354:	mov	r0, #1
   1a358:	pop	{r4, pc}
   1a35c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1a360:	push	{r4, lr}
   1a364:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1a368:	ldr	r3, [pc, #28]	; 1a38c <__assert_fail@plt+0x7ca0>
   1a36c:	mov	r2, #0
   1a370:	strb	r2, [r3]
   1a374:	movw	r3, #257	; 0x101
   1a378:	str	r3, [r0, #16]
   1a37c:	mov	r3, #1065353216	; 0x3f800000
   1a380:	str	r3, [r0, #28]
   1a384:	mov	r0, #1
   1a388:	pop	{r4, pc}
   1a38c:	andeq	lr, r4, r4, lsl #29
   1a390:	push	{r4, r5, r6, lr}
   1a394:	mov	r5, r1
   1a398:	mov	r4, r0
   1a39c:	ldr	r1, [pc, #72]	; 1a3ec <__assert_fail@plt+0x7d00>
   1a3a0:	bl	12608 <strpbrk@plt>
   1a3a4:	cmp	r0, #0
   1a3a8:	bne	1a3d4 <__assert_fail@plt+0x7ce8>
   1a3ac:	cmp	r5, #0
   1a3b0:	beq	1a3dc <__assert_fail@plt+0x7cf0>
   1a3b4:	mov	r1, #46	; 0x2e
   1a3b8:	mov	r0, r4
   1a3bc:	bl	123c8 <strchr@plt>
   1a3c0:	vldr	s15, [pc, #28]	; 1a3e4 <__assert_fail@plt+0x7cf8>
   1a3c4:	cmp	r0, #0
   1a3c8:	vldr	s0, [pc, #24]	; 1a3e8 <__assert_fail@plt+0x7cfc>
   1a3cc:	vmovne.f32	s0, s15
   1a3d0:	pop	{r4, r5, r6, pc}
   1a3d4:	vldr	s0, [pc, #8]	; 1a3e4 <__assert_fail@plt+0x7cf8>
   1a3d8:	pop	{r4, r5, r6, pc}
   1a3dc:	vldr	s0, [pc, #4]	; 1a3e8 <__assert_fail@plt+0x7cfc>
   1a3e0:	pop	{r4, r5, r6, pc}
   1a3e4:	svccc	0x004ccccd
   1a3e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1a3ec:	andeq	sl, r3, r6, lsr #10
   1a3f0:	push	{r4, lr}
   1a3f4:	mov	r1, #0
   1a3f8:	bl	173ac <__assert_fail@plt+0x4cc0>
   1a3fc:	ldr	r3, [pc, #8]	; 1a40c <__assert_fail@plt+0x7d20>
   1a400:	str	r3, [r0, #28]
   1a404:	mov	r0, #1
   1a408:	pop	{r4, pc}
   1a40c:	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
   1a410:	push	{r4, r5, r6, r7, lr}
   1a414:	mov	r4, r1
   1a418:	mov	r6, r2
   1a41c:	vpush	{d8}
   1a420:	sub	sp, sp, #36	; 0x24
   1a424:	add	r1, sp, #4
   1a428:	str	r0, [sp, #12]
   1a42c:	add	r0, sp, #12
   1a430:	stm	r1, {r2, r3}
   1a434:	add	r1, r4, #4
   1a438:	ldr	r5, [sp, #8]
   1a43c:	bl	1a128 <__assert_fail@plt+0x7a3c>
   1a440:	cmp	r0, #0
   1a444:	bne	1a45c <__assert_fail@plt+0x7d70>
   1a448:	mov	r7, #0
   1a44c:	mov	r0, r7
   1a450:	add	sp, sp, #36	; 0x24
   1a454:	vpop	{d8}
   1a458:	pop	{r4, r5, r6, r7, pc}
   1a45c:	ldr	r3, [r4, #4]
   1a460:	vmov.f64	d8, d0
   1a464:	cmp	r3, #0
   1a468:	beq	1a4cc <__assert_fail@plt+0x7de0>
   1a46c:	cmp	r3, #1
   1a470:	moveq	r3, #0
   1a474:	beq	1a4d0 <__assert_fail@plt+0x7de4>
   1a478:	ldr	r3, [pc, #240]	; 1a570 <__assert_fail@plt+0x7e84>
   1a47c:	add	r2, sp, #16
   1a480:	mov	r1, #0
   1a484:	ldr	r0, [sp, #12]
   1a488:	bl	276d8 <__assert_fail@plt+0x14fec>
   1a48c:	subs	r7, r0, #0
   1a490:	beq	1a448 <__assert_fail@plt+0x7d5c>
   1a494:	vldr	d0, [sp, #16]
   1a498:	add	r0, sp, #24
   1a49c:	vmul.f64	d0, d8, d0
   1a4a0:	bl	1235c <modf@plt>
   1a4a4:	vldr	d7, [pc, #188]	; 1a568 <__assert_fail@plt+0x7e7c>
   1a4a8:	vmul.f64	d0, d0, d7
   1a4ac:	vcmpe.f64	d0, d7
   1a4b0:	vmrs	APSR_nzcv, fpscr
   1a4b4:	bmi	1a4d8 <__assert_fail@plt+0x7dec>
   1a4b8:	ldr	r3, [pc, #180]	; 1a574 <__assert_fail@plt+0x7e88>
   1a4bc:	movw	r2, #3149	; 0xc4d
   1a4c0:	ldr	r1, [pc, #176]	; 1a578 <__assert_fail@plt+0x7e8c>
   1a4c4:	ldr	r0, [pc, #176]	; 1a57c <__assert_fail@plt+0x7e90>
   1a4c8:	bl	126ec <__assert_fail@plt>
   1a4cc:	mov	r3, #1
   1a4d0:	str	r3, [r4, #4]
   1a4d4:	b	1a478 <__assert_fail@plt+0x7d8c>
   1a4d8:	vmov	s15, r6
   1a4dc:	vldr	d6, [sp, #24]
   1a4e0:	vcmpe.f64	d6, #0.0
   1a4e4:	vcvt.f64.s32	d7, s15
   1a4e8:	vmrs	APSR_nzcv, fpscr
   1a4ec:	vsub.f64	d7, d7, d6
   1a4f0:	movmi	r2, #1
   1a4f4:	movpl	r2, #0
   1a4f8:	vcvt.s32.f64	s15, d7
   1a4fc:	vmov	r3, s15
   1a500:	vstr	s15, [r4, #8]
   1a504:	cmp	r3, r6
   1a508:	movle	r6, #0
   1a50c:	movgt	r6, #1
   1a510:	cmp	r6, r2
   1a514:	beq	1a52c <__assert_fail@plt+0x7e40>
   1a518:	mov	r1, #0
   1a51c:	mov	r0, #1
   1a520:	ldr	r3, [sp, #12]
   1a524:	ldr	r2, [sp, #64]	; 0x40
   1a528:	bl	122c0 <error@plt>
   1a52c:	vmov	s15, r5
   1a530:	vcvt.f64.s32	d6, s15
   1a534:	vsub.f64	d7, d6, d0
   1a538:	vcmpe.f64	d6, d0
   1a53c:	vcvt.s32.f64	s15, d7
   1a540:	vmrs	APSR_nzcv, fpscr
   1a544:	ldrmi	r1, [pc, #52]	; 1a580 <__assert_fail@plt+0x7e94>
   1a548:	submi	r3, r3, #1
   1a54c:	vmov	r2, s15
   1a550:	strmi	r3, [r4, #8]
   1a554:	addmi	r1, r2, r1
   1a558:	strpl	r2, [r4, #12]
   1a55c:	strmi	r1, [r4, #12]
   1a560:	b	1a44c <__assert_fail@plt+0x7d60>
   1a564:	nop	{0}
   1a568:	andeq	r0, r0, r0
   1a56c:	bicmi	ip, sp, r5, ror #26
   1a570:	andeq	r2, r1, ip, ror r4
   1a574:	andeq	r9, r3, r8, ror #29
   1a578:	andeq	sl, r3, sl, lsr #10
   1a57c:	andeq	sl, r3, r3, lsr r5
   1a580:	blcc	fe6ccd88 <stdout@@GLIBC_2.4+0xfe67e81c>
   1a584:	push	{r4, lr}
   1a588:	sub	sp, sp, #24
   1a58c:	cmp	r0, #0
   1a590:	str	r0, [sp, #12]
   1a594:	bne	1a5a4 <__assert_fail@plt+0x7eb8>
   1a598:	mov	r0, #0
   1a59c:	add	sp, sp, #24
   1a5a0:	pop	{r4, pc}
   1a5a4:	mov	r4, r1
   1a5a8:	add	r0, sp, #12
   1a5ac:	mov	r1, r2
   1a5b0:	bl	1a128 <__assert_fail@plt+0x7a3c>
   1a5b4:	cmp	r0, #0
   1a5b8:	beq	1a598 <__assert_fail@plt+0x7eac>
   1a5bc:	ldr	r3, [pc, #32]	; 1a5e4 <__assert_fail@plt+0x7ef8>
   1a5c0:	mov	r2, #10
   1a5c4:	add	r1, sp, #20
   1a5c8:	ldr	r0, [sp, #12]
   1a5cc:	str	r3, [sp]
   1a5d0:	mov	r3, r4
   1a5d4:	bl	27bb0 <__assert_fail@plt+0x154c4>
   1a5d8:	clz	r0, r0
   1a5dc:	lsr	r0, r0, #5
   1a5e0:	b	1a59c <__assert_fail@plt+0x7eb0>
   1a5e4:	andeq	r9, r3, r7, ror r5
   1a5e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a5ec:	subs	r6, r1, #0
   1a5f0:	sub	sp, sp, #28
   1a5f4:	beq	1a7b8 <__assert_fail@plt+0x80cc>
   1a5f8:	ldr	r3, [r2]
   1a5fc:	ldr	r5, [r6, r3, lsl #2]
   1a600:	cmp	r5, #0
   1a604:	beq	1a800 <__assert_fail@plt+0x8114>
   1a608:	mov	r9, r0
   1a60c:	mov	r0, r5
   1a610:	mov	r7, r2
   1a614:	bl	123bc <strlen@plt>
   1a618:	subs	r4, r0, #0
   1a61c:	bne	1a63c <__assert_fail@plt+0x7f50>
   1a620:	mov	r2, #5
   1a624:	ldr	r1, [pc, #484]	; 1a810 <__assert_fail@plt+0x8124>
   1a628:	bl	1217c <dcgettext@plt>
   1a62c:	mov	r2, r0
   1a630:	mov	r1, r4
   1a634:	mov	r0, #1
   1a638:	bl	122c0 <error@plt>
   1a63c:	sub	r4, r4, #1
   1a640:	mov	r3, #0
   1a644:	ldrb	r8, [r5, r4]
   1a648:	cmp	r8, #77	; 0x4d
   1a64c:	beq	1a738 <__assert_fail@plt+0x804c>
   1a650:	bhi	1a6a0 <__assert_fail@plt+0x7fb4>
   1a654:	cmp	r8, #48	; 0x30
   1a658:	bcc	1a674 <__assert_fail@plt+0x7f88>
   1a65c:	cmp	r8, #57	; 0x39
   1a660:	bls	1a744 <__assert_fail@plt+0x8058>
   1a664:	cmp	r8, #71	; 0x47
   1a668:	strbeq	r3, [r5, r4]
   1a66c:	moveq	r4, #1073741824	; 0x40000000
   1a670:	beq	1a6bc <__assert_fail@plt+0x7fd0>
   1a674:	mov	r2, #5
   1a678:	ldr	r1, [pc, #404]	; 1a814 <__assert_fail@plt+0x8128>
   1a67c:	mov	r0, #0
   1a680:	bl	1217c <dcgettext@plt>
   1a684:	ldr	r3, [r7]
   1a688:	mov	r2, r0
   1a68c:	mov	r1, #0
   1a690:	mov	r0, #1
   1a694:	ldr	r3, [r6, r3, lsl #2]
   1a698:	ldrb	r3, [r3, r4]
   1a69c:	bl	122c0 <error@plt>
   1a6a0:	cmp	r8, #99	; 0x63
   1a6a4:	beq	1a720 <__assert_fail@plt+0x8034>
   1a6a8:	bhi	1a704 <__assert_fail@plt+0x8018>
   1a6ac:	cmp	r8, #98	; 0x62
   1a6b0:	strbeq	r3, [r5, r4]
   1a6b4:	moveq	r4, #512	; 0x200
   1a6b8:	bne	1a674 <__assert_fail@plt+0x7f88>
   1a6bc:	add	r2, sp, #12
   1a6c0:	add	r1, sp, #16
   1a6c4:	mov	r0, r5
   1a6c8:	bl	1a584 <__assert_fail@plt+0x7e98>
   1a6cc:	subs	r6, r0, #0
   1a6d0:	bne	1a750 <__assert_fail@plt+0x8064>
   1a6d4:	mov	r2, #5
   1a6d8:	ldr	r1, [pc, #312]	; 1a818 <__assert_fail@plt+0x812c>
   1a6dc:	strb	r8, [sp, #8]
   1a6e0:	strb	r6, [sp, #9]
   1a6e4:	bl	1217c <dcgettext@plt>
   1a6e8:	add	r3, sp, #8
   1a6ec:	mov	r2, r0
   1a6f0:	mov	r1, r6
   1a6f4:	mov	r0, #1
   1a6f8:	str	r3, [sp]
   1a6fc:	mov	r3, r5
   1a700:	bl	122c0 <error@plt>
   1a704:	cmp	r8, #107	; 0x6b
   1a708:	beq	1a72c <__assert_fail@plt+0x8040>
   1a70c:	cmp	r8, #119	; 0x77
   1a710:	strbeq	r3, [r5, r4]
   1a714:	moveq	r4, #2
   1a718:	beq	1a6bc <__assert_fail@plt+0x7fd0>
   1a71c:	b	1a674 <__assert_fail@plt+0x7f88>
   1a720:	strb	r3, [r5, r4]
   1a724:	mov	r4, #1
   1a728:	b	1a6bc <__assert_fail@plt+0x7fd0>
   1a72c:	strb	r3, [r5, r4]
   1a730:	mov	r4, #1024	; 0x400
   1a734:	b	1a6bc <__assert_fail@plt+0x7fd0>
   1a738:	strb	r3, [r5, r4]
   1a73c:	mov	r4, #1048576	; 0x100000
   1a740:	b	1a6bc <__assert_fail@plt+0x7fd0>
   1a744:	mov	r4, #512	; 0x200
   1a748:	mov	r8, r3
   1a74c:	b	1a6bc <__assert_fail@plt+0x7fd0>
   1a750:	mov	r1, r5
   1a754:	mov	r0, r9
   1a758:	bl	173ac <__assert_fail@plt+0x4cc0>
   1a75c:	add	r1, sp, #12
   1a760:	mov	ip, #1
   1a764:	ldm	r1, {r1, r2, r3}
   1a768:	strh	ip, [r0, #18]
   1a76c:	str	r4, [r0, #44]	; 0x2c
   1a770:	cmp	r1, #0
   1a774:	str	r1, [r0, #40]	; 0x28
   1a778:	strd	r2, [r0, #48]	; 0x30
   1a77c:	bne	1a7c4 <__assert_fail@plt+0x80d8>
   1a780:	asr	r9, r4, #31
   1a784:	vldr	s15, [pc, #124]	; 1a808 <__assert_fail@plt+0x811c>
   1a788:	mul	r3, r4, r3
   1a78c:	umull	r4, r5, r4, r2
   1a790:	vldr	s14, [pc, #116]	; 1a80c <__assert_fail@plt+0x8120>
   1a794:	mla	r3, r2, r9, r3
   1a798:	add	r5, r3, r5
   1a79c:	cmp	r5, #0
   1a7a0:	cmpeq	r4, #20480	; 0x5000
   1a7a4:	vmovls.f32	s15, s14
   1a7a8:	vstr	s15, [r0, #28]
   1a7ac:	ldr	r3, [r7]
   1a7b0:	add	r3, r3, #1
   1a7b4:	str	r3, [r7]
   1a7b8:	mov	r0, r6
   1a7bc:	add	sp, sp, #28
   1a7c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a7c4:	cmp	r1, #1
   1a7c8:	bne	1a7f4 <__assert_fail@plt+0x8108>
   1a7cc:	asr	r9, r4, #31
   1a7d0:	vldr	s15, [pc, #52]	; 1a80c <__assert_fail@plt+0x8120>
   1a7d4:	mul	r3, r4, r3
   1a7d8:	umull	r4, r5, r4, r2
   1a7dc:	vldr	s14, [pc, #36]	; 1a808 <__assert_fail@plt+0x811c>
   1a7e0:	mla	r3, r2, r9, r3
   1a7e4:	add	r5, r3, r5
   1a7e8:	cmp	r5, #0
   1a7ec:	cmpeq	r4, #20480	; 0x5000
   1a7f0:	b	1a7a4 <__assert_fail@plt+0x80b8>
   1a7f4:	ldr	r3, [pc, #32]	; 1a81c <__assert_fail@plt+0x8130>
   1a7f8:	str	r3, [r0, #28]
   1a7fc:	b	1a7ac <__assert_fail@plt+0x80c0>
   1a800:	mov	r6, r5
   1a804:	b	1a7b8 <__assert_fail@plt+0x80cc>
   1a808:	stclcc	12, cr12, [ip, #820]	; 0x334
   1a80c:	svccc	0x00666666
   1a810:	andeq	sl, r3, sp, asr #10
   1a814:	andeq	sl, r3, ip, ror #10
   1a818:	andeq	sl, r3, r4, lsl #11
   1a81c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1a820:	push	{r4, r5, r6, lr}
   1a824:	mov	r5, r0
   1a828:	mov	r0, #0
   1a82c:	mov	r4, r1
   1a830:	str	r0, [r1]
   1a834:	bl	26290 <__assert_fail@plt+0x13ba4>
   1a838:	ldr	r1, [pc, #172]	; 1a8ec <__assert_fail@plt+0x8200>
   1a83c:	str	r0, [r4, #16]
   1a840:	mov	r0, r5
   1a844:	bl	11ffc <strcmp@plt>
   1a848:	cmp	r0, #0
   1a84c:	bne	1a894 <__assert_fail@plt+0x81a8>
   1a850:	ldr	r3, [pc, #152]	; 1a8f0 <__assert_fail@plt+0x8204>
   1a854:	mov	r2, #5
   1a858:	ldr	r1, [pc, #148]	; 1a8f4 <__assert_fail@plt+0x8208>
   1a85c:	ldr	r3, [r3]
   1a860:	str	r3, [r4, #4]
   1a864:	bl	1217c <dcgettext@plt>
   1a868:	str	r0, [r4, #8]
   1a86c:	ldr	r0, [r4, #4]
   1a870:	bl	12488 <fileno@plt>
   1a874:	cmn	r0, #1
   1a878:	moveq	r0, #0
   1a87c:	beq	1a88c <__assert_fail@plt+0x81a0>
   1a880:	bl	1265c <isatty@plt>
   1a884:	adds	r0, r0, #0
   1a888:	movne	r0, #1
   1a88c:	strb	r0, [r4, #12]
   1a890:	pop	{r4, r5, r6, pc}
   1a894:	ldr	r1, [pc, #92]	; 1a8f8 <__assert_fail@plt+0x820c>
   1a898:	mov	r0, r5
   1a89c:	bl	11ffc <strcmp@plt>
   1a8a0:	cmp	r0, #0
   1a8a4:	bne	1a8c0 <__assert_fail@plt+0x81d4>
   1a8a8:	ldr	r3, [pc, #76]	; 1a8fc <__assert_fail@plt+0x8210>
   1a8ac:	mov	r2, #5
   1a8b0:	ldr	r1, [pc, #72]	; 1a900 <__assert_fail@plt+0x8214>
   1a8b4:	ldr	r3, [r3]
   1a8b8:	str	r3, [r4, #4]
   1a8bc:	b	1a864 <__assert_fail@plt+0x8178>
   1a8c0:	ldr	r3, [pc, #60]	; 1a904 <__assert_fail@plt+0x8218>
   1a8c4:	mov	r1, r5
   1a8c8:	ldr	r0, [r3, #36]	; 0x24
   1a8cc:	bl	18598 <__assert_fail@plt+0x5eac>
   1a8d0:	cmp	r0, #0
   1a8d4:	stmib	r4, {r0, r5}
   1a8d8:	bne	1a86c <__assert_fail@plt+0x8180>
   1a8dc:	bl	12404 <__errno_location@plt>
   1a8e0:	mov	r1, r5
   1a8e4:	ldr	r0, [r0]
   1a8e8:	bl	18420 <__assert_fail@plt+0x5d34>
   1a8ec:	andeq	sl, r3, r5, lsr #11
   1a8f0:	andeq	lr, r4, r0, ror #10
   1a8f4:			; <UNDEFINED> instruction: 0x0003a5b1
   1a8f8:	andeq	sl, r3, r0, asr #11
   1a8fc:	andeq	lr, r4, ip, ror #10
   1a900:	andeq	r9, r3, r3, lsl #17
   1a904:	andeq	lr, r4, r8, asr lr
   1a908:	subs	ip, r2, #0
   1a90c:	beq	1ae2c <__assert_fail@plt+0x8740>
   1a910:	ldr	r2, [r3]
   1a914:	ldr	r2, [ip, r2, lsl #2]
   1a918:	cmp	r2, #0
   1a91c:	beq	1ae34 <__assert_fail@plt+0x8748>
   1a920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a924:	sub	sp, sp, #68	; 0x44
   1a928:	mov	r5, r0
   1a92c:	mov	r0, r1
   1a930:	ldr	r6, [r1, #12]
   1a934:	str	r3, [sp, #20]
   1a938:	ldr	r2, [pc, #1276]	; 1ae3c <__assert_fail@plt+0x8750>
   1a93c:	str	ip, [sp, #28]
   1a940:	mov	r1, r6
   1a944:	bl	17374 <__assert_fail@plt+0x4c88>
   1a948:	movw	r3, #257	; 0x101
   1a94c:	ldr	r2, [pc, #1260]	; 1ae40 <__assert_fail@plt+0x8754>
   1a950:	mov	r1, #0
   1a954:	mov	sl, r0
   1a958:	str	r3, [r0, #16]
   1a95c:	ldr	r3, [pc, #1248]	; 1ae44 <__assert_fail@plt+0x8758>
   1a960:	str	r1, [r0, #144]	; 0x90
   1a964:	cmp	r6, r2
   1a968:	cmpne	r6, r3
   1a96c:	movne	r2, #1
   1a970:	moveq	r2, #0
   1a974:	str	r2, [sp, #32]
   1a978:	ldr	r2, [pc, #1224]	; 1ae48 <__assert_fail@plt+0x875c>
   1a97c:	beq	1aa10 <__assert_fail@plt+0x8324>
   1a980:	cmp	r6, r2
   1a984:	strb	r1, [r0, #140]	; 0x8c
   1a988:	bne	1ab40 <__assert_fail@plt+0x8454>
   1a98c:	ldr	r3, [pc, #1208]	; 1ae4c <__assert_fail@plt+0x8760>
   1a990:	mov	r2, #0
   1a994:	ldr	r0, [pc, #1204]	; 1ae50 <__assert_fail@plt+0x8764>
   1a998:	strb	r2, [r3, #14]
   1a99c:	bl	122fc <getenv@plt>
   1a9a0:	subs	r4, r0, #0
   1a9a4:	beq	1aaa4 <__assert_fail@plt+0x83b8>
   1a9a8:	add	r7, sp, #44	; 0x2c
   1a9ac:	add	r3, sp, #40	; 0x28
   1a9b0:	ldr	r1, [pc, #1180]	; 1ae54 <__assert_fail@plt+0x8768>
   1a9b4:	mov	r2, #1
   1a9b8:	str	r7, [sp]
   1a9bc:	ldr	r8, [pc, #1168]	; 1ae54 <__assert_fail@plt+0x8768>
   1a9c0:	bl	1f3c0 <__assert_fail@plt+0xccd4>
   1a9c4:	ldr	r1, [sp, #44]	; 0x2c
   1a9c8:	cmp	r1, #0
   1a9cc:	beq	1a9ec <__assert_fail@plt+0x8300>
   1a9d0:	ldr	r3, [sp, #40]	; 0x28
   1a9d4:	cmp	r1, #1
   1a9d8:	add	r0, r4, r3
   1a9dc:	ldrb	r3, [r4, r3]
   1a9e0:	bne	1aa30 <__assert_fail@plt+0x8344>
   1a9e4:	cmp	r3, #46	; 0x2e
   1a9e8:	bne	1aa30 <__assert_fail@plt+0x8344>
   1a9ec:	mov	r2, #5
   1a9f0:	ldr	r1, [pc, #1120]	; 1ae58 <__assert_fail@plt+0x876c>
   1a9f4:	mov	r0, #0
   1a9f8:	bl	1217c <dcgettext@plt>
   1a9fc:	mov	r2, r0
   1aa00:	mov	r3, r5
   1aa04:	mov	r1, #0
   1aa08:	mov	r0, #1
   1aa0c:	bl	122c0 <error@plt>
   1aa10:	ldr	r0, [pc, #1076]	; 1ae4c <__assert_fail@plt+0x8760>
   1aa14:	mov	r1, #1
   1aa18:	cmp	r6, r2
   1aa1c:	strb	r1, [sl, #140]	; 0x8c
   1aa20:	strb	r1, [r0, #80]	; 0x50
   1aa24:	beq	1a98c <__assert_fail@plt+0x82a0>
   1aa28:	cmp	r6, r3
   1aa2c:	b	1a988 <__assert_fail@plt+0x829c>
   1aa30:	cmp	r3, #47	; 0x2f
   1aa34:	beq	1aa84 <__assert_fail@plt+0x8398>
   1aa38:	bl	120d4 <strndup@plt>
   1aa3c:	mov	r6, r0
   1aa40:	mov	r2, #5
   1aa44:	ldr	r1, [pc, #1040]	; 1ae5c <__assert_fail@plt+0x8770>
   1aa48:	mov	r0, #0
   1aa4c:	bl	1217c <dcgettext@plt>
   1aa50:	cmp	r6, #0
   1aa54:	mov	r7, r0
   1aa58:	ldreq	r6, [sp, #40]	; 0x28
   1aa5c:	mov	r0, #0
   1aa60:	addeq	r6, r4, r6
   1aa64:	mov	r1, r6
   1aa68:	bl	17f84 <__assert_fail@plt+0x5898>
   1aa6c:	mov	r3, r0
   1aa70:	mov	r2, r7
   1aa74:	str	r5, [sp]
   1aa78:	mov	r1, #0
   1aa7c:	mov	r0, #1
   1aa80:	bl	122c0 <error@plt>
   1aa84:	add	r3, sp, #40	; 0x28
   1aa88:	mov	r2, #0
   1aa8c:	str	r7, [sp]
   1aa90:	mov	r1, r8
   1aa94:	mov	r0, r4
   1aa98:	bl	1f3c0 <__assert_fail@plt+0xccd4>
   1aa9c:	cmp	r0, #0
   1aaa0:	bne	1a9c4 <__assert_fail@plt+0x82d8>
   1aaa4:	ldr	r3, [sp, #20]
   1aaa8:	mov	r7, #0
   1aaac:	mov	fp, r7
   1aab0:	mov	r0, r7
   1aab4:	strb	r7, [sl, #40]	; 0x28
   1aab8:	ldr	r5, [r3]
   1aabc:	ldr	r3, [sp, #28]
   1aac0:	mov	r4, r5
   1aac4:	add	r3, r3, r5, lsl #2
   1aac8:	str	r3, [sp, #24]
   1aacc:	mov	r8, r3
   1aad0:	add	r3, r3, #4
   1aad4:	ldr	r9, [r8]
   1aad8:	cmp	r9, #0
   1aadc:	beq	1aba4 <__assert_fail@plt+0x84b8>
   1aae0:	ldrb	r1, [r9]
   1aae4:	cmp	r1, #59	; 0x3b
   1aae8:	bne	1ab68 <__assert_fail@plt+0x847c>
   1aaec:	ldrb	r1, [r9, #1]
   1aaf0:	cmp	r1, #0
   1aaf4:	bne	1abc0 <__assert_fail@plt+0x84d4>
   1aaf8:	cmp	r4, r5
   1aafc:	beq	1aba4 <__assert_fail@plt+0x84b8>
   1ab00:	add	r7, sl, #44	; 0x2c
   1ab04:	mov	r1, #2048	; 0x800
   1ab08:	mov	r0, r7
   1ab0c:	add	fp, sl, #40	; 0x28
   1ab10:	bl	1dd8c <__assert_fail@plt+0xb6a0>
   1ab14:	sub	r0, r0, #1
   1ab18:	cmp	r0, #1
   1ab1c:	bhi	1ad14 <__assert_fail@plt+0x8628>
   1ab20:	mov	r2, #5
   1ab24:	ldr	r1, [pc, #820]	; 1ae60 <__assert_fail@plt+0x8774>
   1ab28:	mov	r0, #0
   1ab2c:	bl	1217c <dcgettext@plt>
   1ab30:	mov	r2, r0
   1ab34:	mov	r1, #0
   1ab38:	mov	r0, #1
   1ab3c:	bl	122c0 <error@plt>
   1ab40:	ldr	r3, [pc, #796]	; 1ae64 <__assert_fail@plt+0x8778>
   1ab44:	ldr	r3, [r3]
   1ab48:	cmp	r3, #0
   1ab4c:	strne	r3, [sl, #144]	; 0x90
   1ab50:	bne	1aaa4 <__assert_fail@plt+0x83b8>
   1ab54:	ldr	r3, [pc, #780]	; 1ae68 <__assert_fail@plt+0x877c>
   1ab58:	movw	r2, #2937	; 0xb79
   1ab5c:	ldr	r1, [pc, #776]	; 1ae6c <__assert_fail@plt+0x8780>
   1ab60:	ldr	r0, [pc, #776]	; 1ae70 <__assert_fail@plt+0x8784>
   1ab64:	bl	126ec <__assert_fail@plt>
   1ab68:	ldr	ip, [sp, #32]
   1ab6c:	cmp	r1, #43	; 0x2b
   1ab70:	movne	ip, #0
   1ab74:	andeq	ip, ip, #1
   1ab78:	cmp	ip, #0
   1ab7c:	beq	1abc0 <__assert_fail@plt+0x84d4>
   1ab80:	ldrb	r1, [r9, #1]
   1ab84:	cmp	r1, #0
   1ab88:	movne	r0, #0
   1ab8c:	cmp	r0, #0
   1ab90:	beq	1abc0 <__assert_fail@plt+0x84d4>
   1ab94:	mov	r9, #1
   1ab98:	cmp	r4, r5
   1ab9c:	strb	r9, [sl, #40]	; 0x28
   1aba0:	bne	1ac34 <__assert_fail@plt+0x8548>
   1aba4:	ldr	r3, [sp, #20]
   1aba8:	mov	r0, sl
   1abac:	str	r4, [r3]
   1abb0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1abb4:	mov	r0, #0
   1abb8:	add	sp, sp, #68	; 0x44
   1abbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abc0:	ldr	r1, [pc, #684]	; 1ae74 <__assert_fail@plt+0x8788>
   1abc4:	mov	r0, r9
   1abc8:	str	r3, [sp, #36]	; 0x24
   1abcc:	bl	21a64 <__assert_fail@plt+0xf378>
   1abd0:	cmp	r0, #0
   1abd4:	ldr	r2, [pc, #616]	; 1ae44 <__assert_fail@plt+0x8758>
   1abd8:	ldr	r3, [sp, #36]	; 0x24
   1abdc:	beq	1ac1c <__assert_fail@plt+0x8530>
   1abe0:	cmp	r4, #0
   1abe4:	add	fp, fp, #1
   1abe8:	bne	1ac2c <__assert_fail@plt+0x8540>
   1abec:	ldr	r1, [pc, #596]	; 1ae48 <__assert_fail@plt+0x875c>
   1abf0:	cmp	r6, r2
   1abf4:	cmpne	r6, r1
   1abf8:	bne	1ac2c <__assert_fail@plt+0x8540>
   1abfc:	mov	r2, #5
   1ac00:	ldr	r1, [pc, #624]	; 1ae78 <__assert_fail@plt+0x878c>
   1ac04:	mov	r0, r4
   1ac08:	bl	1217c <dcgettext@plt>
   1ac0c:	mov	r2, r0
   1ac10:	mov	r1, r4
   1ac14:	mov	r0, #1
   1ac18:	bl	122c0 <error@plt>
   1ac1c:	mov	r9, r7
   1ac20:	add	r4, r4, #1
   1ac24:	mov	r7, r9
   1ac28:	b	1aacc <__assert_fail@plt+0x83e0>
   1ac2c:	mov	r0, #1
   1ac30:	b	1ac20 <__assert_fail@plt+0x8534>
   1ac34:	ldr	r3, [r8]
   1ac38:	cmp	r3, #0
   1ac3c:	beq	1aba4 <__assert_fail@plt+0x84b8>
   1ac40:	ldr	r1, [pc, #512]	; 1ae48 <__assert_fail@plt+0x875c>
   1ac44:	ldr	r2, [pc, #560]	; 1ae7c <__assert_fail@plt+0x8790>
   1ac48:	ldr	r3, [pc, #560]	; 1ae80 <__assert_fail@plt+0x8794>
   1ac4c:	cmp	r6, r1
   1ac50:	moveq	r6, r2
   1ac54:	movne	r6, r3
   1ac58:	cmp	fp, #1
   1ac5c:	ble	1ac84 <__assert_fail@plt+0x8598>
   1ac60:	mov	r2, #5
   1ac64:	ldr	r1, [pc, #536]	; 1ae84 <__assert_fail@plt+0x8798>
   1ac68:	mov	r0, #0
   1ac6c:	bl	1217c <dcgettext@plt>
   1ac70:	mov	r2, r0
   1ac74:	mov	r3, r6
   1ac78:	mov	r1, #0
   1ac7c:	mov	r0, r9
   1ac80:	bl	122c0 <error@plt>
   1ac84:	mov	r0, r7
   1ac88:	bl	123bc <strlen@plt>
   1ac8c:	cmp	r0, #2
   1ac90:	beq	1ab00 <__assert_fail@plt+0x8414>
   1ac94:	ldr	r4, [pc, #432]	; 1ae4c <__assert_fail@plt+0x8760>
   1ac98:	mov	r3, r6
   1ac9c:	mov	r1, #19
   1aca0:	add	r0, sp, #44	; 0x2c
   1aca4:	ldr	r2, [pc, #476]	; 1ae88 <__assert_fail@plt+0x879c>
   1aca8:	bl	1241c <snprintf@plt>
   1acac:	mov	r2, #5
   1acb0:	ldr	r1, [pc, #468]	; 1ae8c <__assert_fail@plt+0x87a0>
   1acb4:	mov	r0, #0
   1acb8:	bl	1217c <dcgettext@plt>
   1acbc:	mov	r5, r0
   1acc0:	add	r2, sp, #44	; 0x2c
   1acc4:	ldr	r1, [r4, #72]	; 0x48
   1acc8:	mov	r0, #0
   1accc:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1acd0:	mov	r6, r0
   1acd4:	ldr	r2, [pc, #408]	; 1ae74 <__assert_fail@plt+0x8788>
   1acd8:	mov	r0, r9
   1acdc:	ldr	r1, [r4, #72]	; 0x48
   1ace0:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1ace4:	mov	r8, r0
   1ace8:	mov	r2, r7
   1acec:	ldr	r1, [r4, #72]	; 0x48
   1acf0:	mov	r0, #2
   1acf4:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1acf8:	mov	r3, r6
   1acfc:	mov	r2, r5
   1ad00:	str	r8, [sp]
   1ad04:	mov	r1, #0
   1ad08:	str	r0, [sp, #4]
   1ad0c:	mov	r0, r9
   1ad10:	bl	122c0 <error@plt>
   1ad14:	mov	r0, r7
   1ad18:	add	r9, sl, #88	; 0x58
   1ad1c:	bl	1de44 <__assert_fail@plt+0xb758>
   1ad20:	ldrb	r6, [sl, #40]	; 0x28
   1ad24:	sub	r0, r4, r5
   1ad28:	ldr	r3, [pc, #352]	; 1ae90 <__assert_fail@plt+0x87a4>
   1ad2c:	cmp	r6, #0
   1ad30:	str	r3, [sl, #76]	; 0x4c
   1ad34:	beq	1adcc <__assert_fail@plt+0x86e0>
   1ad38:	mov	r6, #0
   1ad3c:	sub	r0, r0, #1
   1ad40:	mov	r2, fp
   1ad44:	mov	r1, r9
   1ad48:	mov	fp, #1
   1ad4c:	str	r6, [sl, #64]	; 0x40
   1ad50:	str	r6, [sl, #68]	; 0x44
   1ad54:	str	r0, [sl, #72]	; 0x48
   1ad58:	mov	r0, r7
   1ad5c:	str	r6, [sl, #80]	; 0x50
   1ad60:	str	r6, [sl, #84]	; 0x54
   1ad64:	str	r6, [sl, #132]	; 0x84
   1ad68:	sub	sl, r4, #1
   1ad6c:	bl	1de68 <__assert_fail@plt+0xb77c>
   1ad70:	cmp	sl, r5
   1ad74:	bgt	1ad94 <__assert_fail@plt+0x86a8>
   1ad78:	ldr	r3, [r8]
   1ad7c:	mov	r0, #1
   1ad80:	cmp	r3, #0
   1ad84:	ldr	r3, [sp, #20]
   1ad88:	addne	r4, r4, #1
   1ad8c:	str	r4, [r3]
   1ad90:	b	1abb8 <__assert_fail@plt+0x84cc>
   1ad94:	ldr	r3, [sp, #28]
   1ad98:	ldr	r2, [r3, r5, lsl #2]
   1ad9c:	add	r5, r5, #1
   1ada0:	mov	r0, r2
   1ada4:	str	r2, [sp, #24]
   1ada8:	bl	123bc <strlen@plt>
   1adac:	add	r3, r0, #1
   1adb0:	mov	r1, r9
   1adb4:	str	r6, [sp]
   1adb8:	mov	r0, r7
   1adbc:	stmib	sp, {r6, fp}
   1adc0:	ldr	r2, [sp, #24]
   1adc4:	bl	1d6e0 <__assert_fail@plt+0xaff4>
   1adc8:	b	1ad70 <__assert_fail@plt+0x8684>
   1adcc:	ldr	r3, [pc, #160]	; 1ae74 <__assert_fail@plt+0x8788>
   1add0:	str	r3, [sl, #68]	; 0x44
   1add4:	mov	r3, #2
   1add8:	str	r6, [sl, #80]	; 0x50
   1addc:	str	r3, [sl, #64]	; 0x40
   1ade0:	str	r6, [sl, #84]	; 0x54
   1ade4:	str	r0, [sl, #136]	; 0x88
   1ade8:	lsl	r0, r0, r3
   1adec:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1adf0:	mov	r2, fp
   1adf4:	mov	r1, r9
   1adf8:	str	r0, [sl, #132]	; 0x84
   1adfc:	mov	r0, r7
   1ae00:	bl	1de68 <__assert_fail@plt+0xb77c>
   1ae04:	ldr	r3, [sl, #136]	; 0x88
   1ae08:	cmp	r3, r6
   1ae0c:	ble	1ad78 <__assert_fail@plt+0x868c>
   1ae10:	ldr	r2, [sp, #24]
   1ae14:	ldr	r1, [r2], #4
   1ae18:	str	r2, [sp, #24]
   1ae1c:	ldr	r2, [sl, #132]	; 0x84
   1ae20:	str	r1, [r2, r6, lsl #2]
   1ae24:	add	r6, r6, #1
   1ae28:	b	1ae08 <__assert_fail@plt+0x871c>
   1ae2c:	mov	r0, ip
   1ae30:	bx	lr
   1ae34:	mov	r0, r2
   1ae38:	bx	lr
   1ae3c:	andeq	sl, r3, ip, asr #11
   1ae40:			; <UNDEFINED> instruction: 0x000143bc
   1ae44:	strdeq	r4, [r1], -r8
   1ae48:	andeq	r3, r1, r8, lsr lr
   1ae4c:	andeq	lr, r4, r4, lsl #29
   1ae50:	andeq	sl, r3, pc, ror r7
   1ae54:	andeq	r8, r3, r0, ror r2
   1ae58:	andeq	sl, r3, r4, ror #11
   1ae5c:	ldrdeq	sl, [r3], -pc	; <UNPREDICTABLE>
   1ae60:	andeq	sl, r3, lr, lsl #17
   1ae64:	andeq	lr, r4, r0, lsl #11
   1ae68:	strdeq	r9, [r3], -pc	; <UNPREDICTABLE>
   1ae6c:	andeq	sl, r3, sl, lsr #10
   1ae70:	andeq	sl, r3, r4, lsl #15
   1ae74:	muleq	r3, r7, r7
   1ae78:	muleq	r3, sl, r7
   1ae7c:			; <UNDEFINED> instruction: 0x0003a8bc
   1ae80:	andeq	r9, r3, r7, ror r5
   1ae84:	andeq	sl, r3, ip, lsl #16
   1ae88:	andeq	sl, r3, r4, asr #16
   1ae8c:	andeq	sl, r3, r5, asr r8
   1ae90:	andeq	r5, r1, ip, ror r1
   1ae94:	mov	r3, r2
   1ae98:	mov	r2, r1
   1ae9c:	mov	r1, r0
   1aea0:	ldr	r0, [pc]	; 1aea8 <__assert_fail@plt+0x87bc>
   1aea4:	b	1a908 <__assert_fail@plt+0x821c>
   1aea8:	andeq	r7, r3, r9, ror #26
   1aeac:	mov	r3, r2
   1aeb0:	mov	r2, r1
   1aeb4:	mov	r1, r0
   1aeb8:	ldr	r0, [pc]	; 1aec0 <__assert_fail@plt+0x87d4>
   1aebc:	b	1a908 <__assert_fail@plt+0x821c>
   1aec0:	andeq	r7, r3, r1, lsl #31
   1aec4:	mov	r3, r2
   1aec8:	mov	r2, r1
   1aecc:	mov	r1, r0
   1aed0:	ldr	r0, [pc]	; 1aed8 <__assert_fail@plt+0x87ec>
   1aed4:	b	1a908 <__assert_fail@plt+0x821c>
   1aed8:			; <UNDEFINED> instruction: 0x0003a8b7
   1aedc:	mov	r3, r2
   1aee0:	mov	r2, r1
   1aee4:	mov	r1, r0
   1aee8:	ldr	r0, [pc]	; 1aef0 <__assert_fail@plt+0x8804>
   1aeec:	b	1a908 <__assert_fail@plt+0x821c>
   1aef0:	andeq	sl, r3, r0, asr #17
   1aef4:	push	{r4, lr}
   1aef8:	bl	15fcc <__assert_fail@plt+0x38e0>
   1aefc:	ldr	r3, [pc, #28]	; 1af20 <__assert_fail@plt+0x8834>
   1af00:	mov	r2, #3
   1af04:	str	r3, [r0]
   1af08:	mov	r3, #2
   1af0c:	strd	r2, [r0, #8]
   1af10:	mov	r3, #0
   1af14:	strh	r3, [r0, #18]
   1af18:	mov	r0, #1
   1af1c:	pop	{r4, pc}
   1af20:	strdeq	r3, [r1], -r0
   1af24:	push	{r4, lr}
   1af28:	bl	15fcc <__assert_fail@plt+0x38e0>
   1af2c:	ldr	r3, [pc, #28]	; 1af50 <__assert_fail@plt+0x8864>
   1af30:	str	r3, [r0]
   1af34:	mov	r3, #3
   1af38:	str	r3, [r0, #8]
   1af3c:	str	r3, [r0, #12]
   1af40:	mov	r3, #0
   1af44:	strh	r3, [r0, #18]
   1af48:	mov	r0, #1
   1af4c:	pop	{r4, pc}
   1af50:	andeq	r3, r1, r0, asr #16
   1af54:	push	{r4, lr}
   1af58:	bl	15fcc <__assert_fail@plt+0x38e0>
   1af5c:	ldr	r2, [pc, #40]	; 1af8c <__assert_fail@plt+0x88a0>
   1af60:	mov	r3, r0
   1af64:	mov	r0, #1
   1af68:	str	r2, [r3]
   1af6c:	mov	r2, #3
   1af70:	str	r0, [r3, #12]
   1af74:	str	r2, [r3, #8]
   1af78:	mov	r2, #0
   1af7c:	strh	r2, [r3, #18]
   1af80:	mov	r2, #1065353216	; 0x3f800000
   1af84:	str	r2, [r3, #28]
   1af88:	pop	{r4, pc}
   1af8c:	andeq	r3, r1, r8, lsl fp
   1af90:	push	{r4, lr}
   1af94:	bl	15fcc <__assert_fail@plt+0x38e0>
   1af98:	ldr	r3, [pc, #24]	; 1afb8 <__assert_fail@plt+0x88cc>
   1af9c:	mov	r2, #5
   1afa0:	str	r3, [r0]
   1afa4:	mov	r3, #0
   1afa8:	strd	r2, [r0, #8]
   1afac:	strh	r3, [r0, #18]
   1afb0:	mov	r0, #1
   1afb4:	pop	{r4, pc}
   1afb8:	muleq	r1, r0, sl
   1afbc:	push	{r4, lr}
   1afc0:	mov	r1, #0
   1afc4:	bl	15fe4 <__assert_fail@plt+0x38f8>
   1afc8:	ldr	r3, [pc, #28]	; 1afec <__assert_fail@plt+0x8900>
   1afcc:	mov	r2, #2
   1afd0:	str	r3, [r0]
   1afd4:	mov	r3, #4
   1afd8:	strd	r2, [r0, #8]
   1afdc:	mov	r3, #0
   1afe0:	strh	r3, [r0, #18]
   1afe4:	mov	r0, #1
   1afe8:	pop	{r4, pc}
   1afec:	andeq	r4, r1, ip, ror #3
   1aff0:	push	{r4, lr}
   1aff4:	mov	r1, #0
   1aff8:	bl	15fe4 <__assert_fail@plt+0x38f8>
   1affc:	ldr	r3, [pc, #24]	; 1b01c <__assert_fail@plt+0x8930>
   1b000:	mov	r2, #4
   1b004:	str	r3, [r0]
   1b008:	mov	r3, #0
   1b00c:	strd	r2, [r0, #8]
   1b010:	strh	r3, [r0, #18]
   1b014:	mov	r0, #1
   1b018:	pop	{r4, pc}
   1b01c:	andeq	r4, r1, r8, lsr r4
   1b020:	push	{r4, r5, r6, r7, r8, lr}
   1b024:	mov	r7, r2
   1b028:	mov	r6, r0
   1b02c:	mov	r4, r1
   1b030:	mov	r5, r3
   1b034:	bl	12404 <__errno_location@plt>
   1b038:	ldr	r2, [r0]
   1b03c:	cmp	r2, #2
   1b040:	beq	1b04c <__assert_fail@plt+0x8960>
   1b044:	cmp	r2, #20
   1b048:	bne	1b084 <__assert_fail@plt+0x8998>
   1b04c:	ldr	r3, [pc, #56]	; 1b08c <__assert_fail@plt+0x89a0>
   1b050:	ldr	r3, [r3, #44]	; 0x2c
   1b054:	tst	r3, #2
   1b058:	beq	1b070 <__assert_fail@plt+0x8984>
   1b05c:	ldr	r3, [pc, #44]	; 1b090 <__assert_fail@plt+0x89a4>
   1b060:	mov	r2, r4
   1b064:	ldr	r1, [pc, #40]	; 1b094 <__assert_fail@plt+0x89a8>
   1b068:	ldr	r0, [r3]
   1b06c:	bl	123f8 <fprintf@plt>
   1b070:	mov	r2, r7
   1b074:	mov	r1, r4
   1b078:	mov	r0, r6
   1b07c:	pop	{r4, r5, r6, r7, r8, lr}
   1b080:	b	26a28 <__assert_fail@plt+0x1433c>
   1b084:	mov	r0, r5
   1b088:	pop	{r4, r5, r6, r7, r8, pc}
   1b08c:	andeq	lr, r4, r4, lsl #29
   1b090:	andeq	lr, r4, r0, ror #10
   1b094:	andeq	sl, r3, r6, asr #17
   1b098:	push	{r4, r5, r6, lr}
   1b09c:	mov	r4, r0
   1b0a0:	mov	r5, r1
   1b0a4:	mov	r6, r2
   1b0a8:	bl	26890 <__assert_fail@plt+0x141a4>
   1b0ac:	subs	r3, r0, #0
   1b0b0:	popeq	{r4, r5, r6, pc}
   1b0b4:	mov	r2, r6
   1b0b8:	mov	r1, r5
   1b0bc:	mov	r0, r4
   1b0c0:	pop	{r4, r5, r6, lr}
   1b0c4:	b	1b020 <__assert_fail@plt+0x8934>
   1b0c8:	ldr	r3, [pc, #60]	; 1b10c <__assert_fail@plt+0x8a20>
   1b0cc:	ldr	r3, [r3]
   1b0d0:	cmp	r3, #0
   1b0d4:	bne	1b108 <__assert_fail@plt+0x8a1c>
   1b0d8:	push	{r4, r5, r6, lr}
   1b0dc:	mov	r4, r0
   1b0e0:	mov	r5, r1
   1b0e4:	mov	r6, r2
   1b0e8:	bl	26890 <__assert_fail@plt+0x141a4>
   1b0ec:	subs	r3, r0, #0
   1b0f0:	popeq	{r4, r5, r6, pc}
   1b0f4:	mov	r2, r6
   1b0f8:	mov	r1, r5
   1b0fc:	mov	r0, r4
   1b100:	pop	{r4, r5, r6, lr}
   1b104:	b	1b020 <__assert_fail@plt+0x8934>
   1b108:	b	26a28 <__assert_fail@plt+0x1433c>
   1b10c:	andeq	lr, r4, r8, asr lr
   1b110:	ldr	ip, [pc, #88]	; 1b170 <__assert_fail@plt+0x8a84>
   1b114:	mov	r2, r1
   1b118:	ldr	r3, [ip]
   1b11c:	cmp	r3, #0
   1b120:	movne	r1, r0
   1b124:	ldrne	r0, [ip]
   1b128:	bne	1b164 <__assert_fail@plt+0x8a78>
   1b12c:	push	{r4, lr}
   1b130:	ldr	lr, [pc, #60]	; 1b174 <__assert_fail@plt+0x8a88>
   1b134:	mov	r4, lr
   1b138:	ldr	r1, [lr, #4]
   1b13c:	cmp	r1, #0
   1b140:	beq	1b158 <__assert_fail@plt+0x8a6c>
   1b144:	ldr	r1, [lr], #16
   1b148:	cmp	r1, #1
   1b14c:	bne	1b168 <__assert_fail@plt+0x8a7c>
   1b150:	add	r3, r4, r3, lsl #4
   1b154:	str	r3, [ip]
   1b158:	mov	r1, r0
   1b15c:	pop	{r4, lr}
   1b160:	ldr	r0, [ip]
   1b164:	b	1a27c <__assert_fail@plt+0x7b90>
   1b168:	add	r3, r3, #1
   1b16c:	b	1b138 <__assert_fail@plt+0x8a4c>
   1b170:	andeq	lr, r4, r8, ror #25
   1b174:	andeq	r9, r3, r0, lsl pc
   1b178:	ldr	r3, [pc, #16]	; 1b190 <__assert_fail@plt+0x8aa4>
   1b17c:	mov	r0, r1
   1b180:	mov	r1, #1
   1b184:	strb	r1, [r3, #16]
   1b188:	mov	r1, r2
   1b18c:	b	1b110 <__assert_fail@plt+0x8a24>
   1b190:	andeq	lr, r4, r4, lsl #29
   1b194:	ldr	r3, [pc, #16]	; 1b1ac <__assert_fail@plt+0x8ac0>
   1b198:	mov	r0, r1
   1b19c:	mov	r1, #0
   1b1a0:	strb	r1, [r3, #16]
   1b1a4:	mov	r1, r2
   1b1a8:	b	1b110 <__assert_fail@plt+0x8a24>
   1b1ac:	andeq	lr, r4, r4, lsl #29
   1b1b0:	ldr	r3, [pc, #16]	; 1b1c8 <__assert_fail@plt+0x8adc>
   1b1b4:	mov	r0, r1
   1b1b8:	mov	r1, #0
   1b1bc:	strb	r1, [r3, #14]
   1b1c0:	mov	r1, r2
   1b1c4:	b	1b110 <__assert_fail@plt+0x8a24>
   1b1c8:	andeq	lr, r4, r4, lsl #29
   1b1cc:	ldr	r3, [pc, #16]	; 1b1e4 <__assert_fail@plt+0x8af8>
   1b1d0:	mov	r0, r1
   1b1d4:	mov	r1, #1
   1b1d8:	strb	r1, [r3, #12]
   1b1dc:	mov	r1, r2
   1b1e0:	b	1b110 <__assert_fail@plt+0x8a24>
   1b1e4:	andeq	lr, r4, r4, lsl #29
   1b1e8:	ldr	r3, [pc, #16]	; 1b200 <__assert_fail@plt+0x8b14>
   1b1ec:	mov	r0, r1
   1b1f0:	mov	r1, #1
   1b1f4:	strb	r1, [r3, #13]
   1b1f8:	mov	r1, r2
   1b1fc:	b	1b110 <__assert_fail@plt+0x8a24>
   1b200:	andeq	lr, r4, r4, lsl #29
   1b204:	ldr	r3, [pc, #16]	; 1b21c <__assert_fail@plt+0x8b30>
   1b208:	mov	r0, r1
   1b20c:	mov	r1, #1
   1b210:	strb	r1, [r3, #14]
   1b214:	mov	r1, r2
   1b218:	b	1b110 <__assert_fail@plt+0x8a24>
   1b21c:	andeq	lr, r4, r4, lsl #29
   1b220:	ldr	r3, [pc, #16]	; 1b238 <__assert_fail@plt+0x8b4c>
   1b224:	mov	r0, r1
   1b228:	mov	r1, #256	; 0x100
   1b22c:	strh	r1, [r3]
   1b230:	mov	r1, r2
   1b234:	b	1b110 <__assert_fail@plt+0x8a24>
   1b238:	andeq	lr, r4, r4, lsl #29
   1b23c:	push	{r4, lr}
   1b240:	ldr	r4, [pc, #120]	; 1b2c0 <__assert_fail@plt+0x8bd4>
   1b244:	ldrb	r2, [r4, #4]
   1b248:	cmp	r2, #0
   1b24c:	bne	1b2b8 <__assert_fail@plt+0x8bcc>
   1b250:	ldr	r1, [pc, #108]	; 1b2c4 <__assert_fail@plt+0x8bd8>
   1b254:	mov	r0, r1
   1b258:	bl	122e4 <fnmatch@plt>
   1b25c:	subs	r2, r0, #0
   1b260:	beq	1b284 <__assert_fail@plt+0x8b98>
   1b264:	mov	r2, #5
   1b268:	ldr	r1, [pc, #88]	; 1b2c8 <__assert_fail@plt+0x8bdc>
   1b26c:	mov	r0, #0
   1b270:	bl	1217c <dcgettext@plt>
   1b274:	mov	r2, r0
   1b278:	mov	r1, #0
   1b27c:	mov	r0, #1
   1b280:	bl	122c0 <error@plt>
   1b284:	ldr	r1, [pc, #56]	; 1b2c4 <__assert_fail@plt+0x8bd8>
   1b288:	ldr	r0, [pc, #60]	; 1b2cc <__assert_fail@plt+0x8be0>
   1b28c:	bl	122e4 <fnmatch@plt>
   1b290:	cmp	r0, #0
   1b294:	beq	1b264 <__assert_fail@plt+0x8b78>
   1b298:	mov	r2, #16
   1b29c:	ldr	r1, [pc, #32]	; 1b2c4 <__assert_fail@plt+0x8bd8>
   1b2a0:	ldr	r0, [pc, #36]	; 1b2cc <__assert_fail@plt+0x8be0>
   1b2a4:	bl	122e4 <fnmatch@plt>
   1b2a8:	cmp	r0, #0
   1b2ac:	bne	1b264 <__assert_fail@plt+0x8b78>
   1b2b0:	mov	r3, #1
   1b2b4:	strb	r3, [r4, #4]
   1b2b8:	ldrb	r0, [r4, #4]
   1b2bc:	pop	{r4, pc}
   1b2c0:	andeq	lr, r4, r8, ror #25
   1b2c4:	andeq	sl, r3, r3, lsl r9
   1b2c8:	andeq	sl, r3, r7, lsl r9
   1b2cc:	andeq	sl, r3, lr, asr #18
   1b2d0:	push	{r4, r5, r6, lr}
   1b2d4:	subs	r6, r1, #0
   1b2d8:	beq	1b35c <__assert_fail@plt+0x8c70>
   1b2dc:	ldr	r1, [r2]
   1b2e0:	ldr	r1, [r6, r1, lsl #2]
   1b2e4:	cmp	r1, #0
   1b2e8:	beq	1b364 <__assert_fail@plt+0x8c78>
   1b2ec:	mov	r4, r2
   1b2f0:	mov	r5, r0
   1b2f4:	bl	11fe4 <is_selinux_enabled@plt>
   1b2f8:	cmp	r0, #0
   1b2fc:	bgt	1b320 <__assert_fail@plt+0x8c34>
   1b300:	mov	r2, #5
   1b304:	ldr	r1, [pc, #96]	; 1b36c <__assert_fail@plt+0x8c80>
   1b308:	mov	r0, #0
   1b30c:	bl	1217c <dcgettext@plt>
   1b310:	mov	r2, r0
   1b314:	mov	r1, #0
   1b318:	mov	r0, #1
   1b31c:	bl	122c0 <error@plt>
   1b320:	mov	r1, #0
   1b324:	mov	r0, r5
   1b328:	bl	173ac <__assert_fail@plt+0x4cc0>
   1b32c:	ldr	r3, [pc, #60]	; 1b370 <__assert_fail@plt+0x8c84>
   1b330:	str	r3, [r0, #28]
   1b334:	mov	r3, #0
   1b338:	strb	r3, [r0, #18]
   1b33c:	ldr	r3, [r4]
   1b340:	ldr	r3, [r6, r3, lsl #2]
   1b344:	str	r3, [r0, #40]	; 0x28
   1b348:	mov	r0, #1
   1b34c:	ldr	r3, [r4]
   1b350:	add	r3, r3, #1
   1b354:	str	r3, [r4]
   1b358:	pop	{r4, r5, r6, pc}
   1b35c:	mov	r0, r6
   1b360:	pop	{r4, r5, r6, pc}
   1b364:	mov	r0, r1
   1b368:	pop	{r4, r5, r6, pc}
   1b36c:	andeq	sl, r3, r2, asr r9
   1b370:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b374:	push	{r4, lr}
   1b378:	ldr	r4, [pc, #112]	; 1b3f0 <__assert_fail@plt+0x8d04>
   1b37c:	ldrb	r2, [r4, #36]	; 0x24
   1b380:	cmp	r2, #0
   1b384:	bne	1b3d8 <__assert_fail@plt+0x8cec>
   1b388:	ldr	r3, [r4, #28]
   1b38c:	add	r0, r4, #28
   1b390:	str	r2, [r4, #32]
   1b394:	add	r3, r3, #86016	; 0x15000
   1b398:	add	r3, r3, #384	; 0x180
   1b39c:	str	r3, [r4, #28]
   1b3a0:	bl	12350 <localtime@plt>
   1b3a4:	cmp	r0, #0
   1b3a8:	ldr	r2, [r4, #28]
   1b3ac:	beq	1b3e0 <__assert_fail@plt+0x8cf4>
   1b3b0:	ldm	r0, {r1, r3}
   1b3b4:	mov	ip, #60	; 0x3c
   1b3b8:	mla	r1, ip, r3, r1
   1b3bc:	ldr	r3, [r0, #8]
   1b3c0:	mov	r0, #3600	; 0xe10
   1b3c4:	mla	r3, r0, r3, r1
   1b3c8:	sub	r3, r2, r3
   1b3cc:	str	r3, [r4, #28]
   1b3d0:	mov	r3, #1
   1b3d4:	strb	r3, [r4, #36]	; 0x24
   1b3d8:	mov	r0, #1
   1b3dc:	pop	{r4, pc}
   1b3e0:	ldr	r1, [pc, #12]	; 1b3f4 <__assert_fail@plt+0x8d08>
   1b3e4:	sdiv	r3, r2, r1
   1b3e8:	mls	r3, r1, r3, r2
   1b3ec:	b	1b3c8 <__assert_fail@plt+0x8cdc>
   1b3f0:	andeq	lr, r4, r4, lsl #29
   1b3f4:	andeq	r5, r1, r0, lsl #3
   1b3f8:	push	{r4, lr}
   1b3fc:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1b400:	movw	r3, #257	; 0x101
   1b404:	add	r1, r0, #40	; 0x28
   1b408:	str	r3, [r0, #16]
   1b40c:	ldr	r0, [pc, #8]	; 1b41c <__assert_fail@plt+0x8d30>
   1b410:	bl	1a820 <__assert_fail@plt+0x8134>
   1b414:	mov	r0, #1
   1b418:	pop	{r4, pc}
   1b41c:	andeq	sl, r3, r0, asr #11
   1b420:	push	{r4, lr}
   1b424:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1b428:	mov	r4, r0
   1b42c:	add	r1, r0, #40	; 0x28
   1b430:	ldr	r0, [pc, #24]	; 1b450 <__assert_fail@plt+0x8d64>
   1b434:	bl	1a820 <__assert_fail@plt+0x8134>
   1b438:	movw	r3, #257	; 0x101
   1b43c:	mov	r0, #1
   1b440:	strh	r3, [r4, #16]
   1b444:	mov	r3, #1065353216	; 0x3f800000
   1b448:	str	r3, [r4, #28]
   1b44c:	pop	{r4, pc}
   1b450:	andeq	sl, r3, r0, asr #11
   1b454:	ldr	r3, [pc, #156]	; 1b4f8 <__assert_fail@plt+0x8e0c>
   1b458:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1b45c:	ldrb	r4, [r3, #17]
   1b460:	cmp	r4, #0
   1b464:	bne	1b4ec <__assert_fail@plt+0x8e00>
   1b468:	ldrb	r3, [r3, #16]
   1b46c:	cmp	r3, #0
   1b470:	beq	1b4ec <__assert_fail@plt+0x8e00>
   1b474:	mov	r6, r0
   1b478:	mov	r5, r1
   1b47c:	mov	r0, r2
   1b480:	mov	r1, #47	; 0x2f
   1b484:	bl	123c8 <strchr@plt>
   1b488:	cmp	r0, #0
   1b48c:	beq	1b4ec <__assert_fail@plt+0x8e00>
   1b490:	mov	r2, #5
   1b494:	ldr	r1, [pc, #96]	; 1b4fc <__assert_fail@plt+0x8e10>
   1b498:	mov	r0, r4
   1b49c:	bl	1217c <dcgettext@plt>
   1b4a0:	mov	r7, r0
   1b4a4:	mov	r1, r6
   1b4a8:	mov	r0, r4
   1b4ac:	bl	17f84 <__assert_fail@plt+0x5898>
   1b4b0:	mov	r6, r0
   1b4b4:	ldr	r1, [pc, #68]	; 1b500 <__assert_fail@plt+0x8e14>
   1b4b8:	mov	r0, #1
   1b4bc:	bl	17f84 <__assert_fail@plt+0x5898>
   1b4c0:	mov	r8, r0
   1b4c4:	mov	r1, r5
   1b4c8:	mov	r0, #2
   1b4cc:	bl	17f84 <__assert_fail@plt+0x5898>
   1b4d0:	mov	r3, r6
   1b4d4:	mov	r2, r7
   1b4d8:	str	r8, [sp]
   1b4dc:	mov	r1, r4
   1b4e0:	str	r0, [sp, #4]
   1b4e4:	mov	r0, r4
   1b4e8:	bl	122c0 <error@plt>
   1b4ec:	mov	r0, #1
   1b4f0:	add	sp, sp, #8
   1b4f4:	pop	{r4, r5, r6, r7, r8, pc}
   1b4f8:	andeq	lr, r4, r4, lsl #29
   1b4fc:	andeq	sl, r3, r6, lsl #19
   1b500:	ldrdeq	r8, [r3], -r7
   1b504:	ldr	r3, [pc, #120]	; 1b584 <__assert_fail@plt+0x8e98>
   1b508:	vldr	s14, [pc, #92]	; 1b56c <__assert_fail@plt+0x8e80>
   1b50c:	ldr	r3, [r3, #28]
   1b510:	sub	r0, r3, r0
   1b514:	ldr	r3, [pc, #108]	; 1b588 <__assert_fail@plt+0x8e9c>
   1b518:	sdiv	r0, r0, r3
   1b51c:	vmov	s15, r0
   1b520:	vcvt.f32.s32	s15, s15
   1b524:	vcmpe.f32	s15, s14
   1b528:	vmrs	APSR_nzcv, fpscr
   1b52c:	bmi	1b55c <__assert_fail@plt+0x8e70>
   1b530:	vldr	s14, [pc, #56]	; 1b570 <__assert_fail@plt+0x8e84>
   1b534:	vcmpe.f32	s15, s14
   1b538:	vmrs	APSR_nzcv, fpscr
   1b53c:	bmi	1b564 <__assert_fail@plt+0x8e78>
   1b540:	vldr	s14, [pc, #44]	; 1b574 <__assert_fail@plt+0x8e88>
   1b544:	vldr	s0, [pc, #44]	; 1b578 <__assert_fail@plt+0x8e8c>
   1b548:	vcmpe.f32	s15, s14
   1b54c:	vldr	s15, [pc, #40]	; 1b57c <__assert_fail@plt+0x8e90>
   1b550:	vmrs	APSR_nzcv, fpscr
   1b554:	vmovle.f32	s0, s15
   1b558:	bx	lr
   1b55c:	vldr	s0, [pc, #28]	; 1b580 <__assert_fail@plt+0x8e94>
   1b560:	bx	lr
   1b564:	vldr	s0, [pc, #12]	; 1b578 <__assert_fail@plt+0x8e8c>
   1b568:	bx	lr
   1b56c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b570:	svccc	0x00800000
   1b574:	sbcmi	r0, r8, #0
   1b578:			; <UNDEFINED> instruction: 0x3e99999a
   1b57c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1b580:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b584:	andeq	lr, r4, r4, lsl #29
   1b588:	andeq	r5, r1, r0, lsl #3
   1b58c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b590:	subs	r6, r1, #0
   1b594:	sub	sp, sp, #124	; 0x7c
   1b598:	beq	1b640 <__assert_fail@plt+0x8f54>
   1b59c:	ldr	r8, [r2]
   1b5a0:	ldr	r4, [r6, r8, lsl #2]
   1b5a4:	lsl	r9, r8, #2
   1b5a8:	cmp	r4, #0
   1b5ac:	beq	1b644 <__assert_fail@plt+0x8f58>
   1b5b0:	str	r0, [sp, #4]
   1b5b4:	mov	r0, r4
   1b5b8:	mov	r5, r2
   1b5bc:	bl	123bc <strlen@plt>
   1b5c0:	cmp	r0, #8
   1b5c4:	bne	1b640 <__assert_fail@plt+0x8f54>
   1b5c8:	ldr	r3, [pc, #796]	; 1b8ec <__assert_fail@plt+0x9200>
   1b5cc:	mov	r2, #6
   1b5d0:	mov	r1, r4
   1b5d4:	ldr	r0, [r3]
   1b5d8:	ldrh	r3, [r3, #4]
   1b5dc:	str	r0, [sp, #8]
   1b5e0:	ldr	r0, [pc, #776]	; 1b8f0 <__assert_fail@plt+0x9204>
   1b5e4:	strh	r3, [sp, #12]
   1b5e8:	bl	1268c <strncmp@plt>
   1b5ec:	subs	fp, r0, #0
   1b5f0:	beq	1b608 <__assert_fail@plt+0x8f1c>
   1b5f4:	ldr	r3, [pc, #760]	; 1b8f4 <__assert_fail@plt+0x9208>
   1b5f8:	movw	r2, #1555	; 0x613
   1b5fc:	ldr	r1, [pc, #756]	; 1b8f8 <__assert_fail@plt+0x920c>
   1b600:	ldr	r0, [pc, #756]	; 1b8fc <__assert_fail@plt+0x9210>
   1b604:	bl	126ec <__assert_fail@plt>
   1b608:	ldrb	r7, [r4, #6]
   1b60c:	ldrb	sl, [r4, #7]
   1b610:	cmp	sl, #66	; 0x42
   1b614:	cmpne	r7, #66	; 0x42
   1b618:	moveq	r4, #1
   1b61c:	movne	r4, #0
   1b620:	bne	1b650 <__assert_fail@plt+0x8f64>
   1b624:	mov	r2, #5
   1b628:	ldr	r1, [pc, #720]	; 1b900 <__assert_fail@plt+0x9214>
   1b62c:	bl	1217c <dcgettext@plt>
   1b630:	mov	r2, r0
   1b634:	mov	r1, fp
   1b638:	mov	r0, fp
   1b63c:	bl	122c0 <error@plt>
   1b640:	mov	r4, #0
   1b644:	mov	r0, r4
   1b648:	add	sp, sp, #124	; 0x7c
   1b64c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b650:	cmp	r7, #116	; 0x74
   1b654:	beq	1b644 <__assert_fail@plt+0x8f58>
   1b658:	mov	r1, r7
   1b65c:	add	r0, sp, #8
   1b660:	bl	123c8 <strchr@plt>
   1b664:	cmp	r0, #0
   1b668:	beq	1b644 <__assert_fail@plt+0x8f58>
   1b66c:	mov	r1, sl
   1b670:	add	r0, sp, #8
   1b674:	bl	123c8 <strchr@plt>
   1b678:	cmp	r0, #0
   1b67c:	beq	1b644 <__assert_fail@plt+0x8f58>
   1b680:	add	r9, r6, r9
   1b684:	add	r8, r8, #1
   1b688:	ldr	r4, [r9, #4]
   1b68c:	cmp	r4, #0
   1b690:	bne	1b6d4 <__assert_fail@plt+0x8fe8>
   1b694:	mov	r2, #5
   1b698:	ldr	r1, [pc, #612]	; 1b904 <__assert_fail@plt+0x9218>
   1b69c:	mov	r0, r4
   1b6a0:	bl	1217c <dcgettext@plt>
   1b6a4:	ldr	r3, [r5]
   1b6a8:	mov	r7, r0
   1b6ac:	mov	r0, r4
   1b6b0:	ldr	r2, [r6, r3, lsl #2]
   1b6b4:	ldr	r3, [pc, #588]	; 1b908 <__assert_fail@plt+0x921c>
   1b6b8:	ldr	r1, [r3, #72]	; 0x48
   1b6bc:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1b6c0:	mov	r3, r0
   1b6c4:	mov	r2, r7
   1b6c8:	mov	r1, r4
   1b6cc:	mov	r0, #1
   1b6d0:	bl	122c0 <error@plt>
   1b6d4:	mov	r1, r4
   1b6d8:	str	r8, [r5]
   1b6dc:	ldr	r0, [sp, #4]
   1b6e0:	bl	173ac <__assert_fail@plt+0x4cc0>
   1b6e4:	cmp	r7, #97	; 0x61
   1b6e8:	mov	r4, r0
   1b6ec:	beq	1b7a0 <__assert_fail@plt+0x90b4>
   1b6f0:	bhi	1b72c <__assert_fail@plt+0x9040>
   1b6f4:	cmp	r7, #66	; 0x42
   1b6f8:	moveq	r2, #1
   1b6fc:	beq	1b740 <__assert_fail@plt+0x9054>
   1b700:	mov	r1, r7
   1b704:	add	r0, sp, #8
   1b708:	bl	123c8 <strchr@plt>
   1b70c:	cmp	r0, #0
   1b710:	ldr	r3, [pc, #476]	; 1b8f4 <__assert_fail@plt+0x9208>
   1b714:	movwne	r2, #1612	; 0x64c
   1b718:	bne	1b808 <__assert_fail@plt+0x911c>
   1b71c:	movw	r2, #1611	; 0x64b
   1b720:	ldr	r1, [pc, #464]	; 1b8f8 <__assert_fail@plt+0x920c>
   1b724:	ldr	r0, [pc, #480]	; 1b90c <__assert_fail@plt+0x9220>
   1b728:	b	1b604 <__assert_fail@plt+0x8f18>
   1b72c:	cmp	r7, #99	; 0x63
   1b730:	beq	1b7a8 <__assert_fail@plt+0x90bc>
   1b734:	cmp	r7, #109	; 0x6d
   1b738:	moveq	r2, #3
   1b73c:	bne	1b700 <__assert_fail@plt+0x9014>
   1b740:	cmp	sl, #116	; 0x74
   1b744:	str	r2, [r4, #40]	; 0x28
   1b748:	bne	1b7b0 <__assert_fail@plt+0x90c4>
   1b74c:	ldr	r3, [r5]
   1b750:	add	r0, r4, #48	; 0x30
   1b754:	ldr	r2, [pc, #436]	; 1b910 <__assert_fail@plt+0x9224>
   1b758:	ldr	r1, [r6, r3, lsl #2]
   1b75c:	bl	2519c <__assert_fail@plt+0x12ab0>
   1b760:	subs	r7, r0, #0
   1b764:	bne	1b82c <__assert_fail@plt+0x9140>
   1b768:	mov	r2, #5
   1b76c:	ldr	r1, [pc, #416]	; 1b914 <__assert_fail@plt+0x9228>
   1b770:	bl	1217c <dcgettext@plt>
   1b774:	ldr	r3, [r5]
   1b778:	mov	r4, r0
   1b77c:	mov	r0, r7
   1b780:	ldr	r2, [r6, r3, lsl #2]
   1b784:	ldr	r3, [pc, #380]	; 1b908 <__assert_fail@plt+0x921c>
   1b788:	ldr	r1, [r3, #72]	; 0x48
   1b78c:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1b790:	mov	r3, r0
   1b794:	mov	r2, r4
   1b798:	mov	r1, r7
   1b79c:	b	1b6cc <__assert_fail@plt+0x8fe0>
   1b7a0:	mov	r2, #0
   1b7a4:	b	1b740 <__assert_fail@plt+0x9054>
   1b7a8:	mov	r2, #2
   1b7ac:	b	1b740 <__assert_fail@plt+0x9054>
   1b7b0:	add	r0, sp, #16
   1b7b4:	bl	175f8 <__assert_fail@plt+0x4f0c>
   1b7b8:	ldr	r2, [pc, #328]	; 1b908 <__assert_fail@plt+0x921c>
   1b7bc:	add	r1, sp, #16
   1b7c0:	ldr	r0, [r5]
   1b7c4:	ldr	r2, [r2, #52]	; 0x34
   1b7c8:	ldr	r0, [r6, r0, lsl #2]
   1b7cc:	blx	r2
   1b7d0:	subs	r7, r0, #0
   1b7d4:	beq	1b7ec <__assert_fail@plt+0x9100>
   1b7d8:	bl	12404 <__errno_location@plt>
   1b7dc:	ldr	r3, [r5]
   1b7e0:	ldr	r0, [r0]
   1b7e4:	ldr	r1, [r6, r3, lsl #2]
   1b7e8:	bl	182c4 <__assert_fail@plt+0x5bd8>
   1b7ec:	cmp	sl, #97	; 0x61
   1b7f0:	beq	1b86c <__assert_fail@plt+0x9180>
   1b7f4:	bhi	1b814 <__assert_fail@plt+0x9128>
   1b7f8:	cmp	sl, #66	; 0x42
   1b7fc:	beq	1b874 <__assert_fail@plt+0x9188>
   1b800:	ldr	r3, [pc, #272]	; 1b918 <__assert_fail@plt+0x922c>
   1b804:	movw	r2, #498	; 0x1f2
   1b808:	ldr	r1, [pc, #232]	; 1b8f8 <__assert_fail@plt+0x920c>
   1b80c:	ldr	r0, [pc, #264]	; 1b91c <__assert_fail@plt+0x9230>
   1b810:	b	1b604 <__assert_fail@plt+0x8f18>
   1b814:	cmp	sl, #99	; 0x63
   1b818:	beq	1b8a4 <__assert_fail@plt+0x91b8>
   1b81c:	cmp	sl, #109	; 0x6d
   1b820:	ldrdeq	r2, [sp, #96]	; 0x60
   1b824:	bne	1b800 <__assert_fail@plt+0x9114>
   1b828:	strd	r2, [r4, #48]	; 0x30
   1b82c:	mov	r3, #0
   1b830:	ldr	r0, [r4, #48]	; 0x30
   1b834:	str	r3, [r4, #44]	; 0x2c
   1b838:	bl	1b504 <__assert_fail@plt+0x8e18>
   1b83c:	ldr	r3, [r5]
   1b840:	vstr	s0, [r4, #28]
   1b844:	add	r3, r3, #1
   1b848:	str	r3, [r5]
   1b84c:	ldr	r3, [r4]
   1b850:	cmp	r3, #0
   1b854:	bne	1b8ac <__assert_fail@plt+0x91c0>
   1b858:	ldr	r3, [pc, #148]	; 1b8f4 <__assert_fail@plt+0x9208>
   1b85c:	movw	r2, #1647	; 0x66f
   1b860:	ldr	r1, [pc, #144]	; 1b8f8 <__assert_fail@plt+0x920c>
   1b864:	ldr	r0, [pc, #180]	; 1b920 <__assert_fail@plt+0x9234>
   1b868:	b	1b604 <__assert_fail@plt+0x8f18>
   1b86c:	ldrd	r2, [sp, #88]	; 0x58
   1b870:	b	1b828 <__assert_fail@plt+0x913c>
   1b874:	mvn	r3, #0
   1b878:	mov	r2, #5
   1b87c:	ldr	r1, [pc, #160]	; 1b924 <__assert_fail@plt+0x9238>
   1b880:	str	r3, [r4, #48]	; 0x30
   1b884:	str	r3, [r4, #52]	; 0x34
   1b888:	bl	1217c <dcgettext@plt>
   1b88c:	ldr	r3, [r5]
   1b890:	mov	r4, r0
   1b894:	mov	r0, r7
   1b898:	ldr	r1, [r6, r3, lsl #2]
   1b89c:	bl	17f84 <__assert_fail@plt+0x5898>
   1b8a0:	b	1b790 <__assert_fail@plt+0x90a4>
   1b8a4:	ldrd	r2, [sp, #104]	; 0x68
   1b8a8:	b	1b828 <__assert_fail@plt+0x913c>
   1b8ac:	ldr	r2, [pc, #116]	; 1b928 <__assert_fail@plt+0x923c>
   1b8b0:	cmp	r3, r2
   1b8b4:	beq	1b8cc <__assert_fail@plt+0x91e0>
   1b8b8:	ldr	r3, [pc, #52]	; 1b8f4 <__assert_fail@plt+0x9208>
   1b8bc:	mov	r2, #1648	; 0x670
   1b8c0:	ldr	r1, [pc, #48]	; 1b8f8 <__assert_fail@plt+0x920c>
   1b8c4:	ldr	r0, [pc, #96]	; 1b92c <__assert_fail@plt+0x9240>
   1b8c8:	b	1b604 <__assert_fail@plt+0x8f18>
   1b8cc:	ldrb	r4, [r4, #18]
   1b8d0:	cmp	r4, #0
   1b8d4:	bne	1b644 <__assert_fail@plt+0x8f58>
   1b8d8:	ldr	r3, [pc, #20]	; 1b8f4 <__assert_fail@plt+0x9208>
   1b8dc:	movw	r2, #1649	; 0x671
   1b8e0:	ldr	r1, [pc, #16]	; 1b8f8 <__assert_fail@plt+0x920c>
   1b8e4:	ldr	r0, [pc, #68]	; 1b930 <__assert_fail@plt+0x9244>
   1b8e8:	b	1b604 <__assert_fail@plt+0x8f18>
   1b8ec:	muleq	r3, r6, fp
   1b8f0:	andeq	sl, r3, r8, lsr sl
   1b8f4:	andeq	sl, r3, r0, lsl #9
   1b8f8:	andeq	sl, r3, sl, lsr #10
   1b8fc:	andeq	sl, r3, pc, lsr sl
   1b900:	andeq	sl, r3, sl, ror #20
   1b904:	andeq	sl, r3, pc, lsr #21
   1b908:	andeq	lr, r4, r4, lsl #29
   1b90c:	andeq	sl, r3, sp, asr #21
   1b910:	muleq	r4, r8, lr
   1b914:	andeq	sl, r3, r4, ror #21
   1b918:	andeq	sl, r3, lr, lsl #9
   1b91c:	ldrdeq	r8, [r3], -r2
   1b920:	andeq	sl, r3, r2, asr #22
   1b924:	andeq	sl, r3, lr, lsl fp
   1b928:	andeq	r4, r1, r4, ror #4
   1b92c:	andeq	sl, r3, lr, asr fp
   1b930:	andeq	sl, r3, r2, lsl #23
   1b934:	ldr	r3, [pc, #88]	; 1b994 <__assert_fail@plt+0x92a8>
   1b938:	push	{r4, r5, r6, r7, r8, lr}
   1b93c:	mov	r5, r0
   1b940:	mov	r6, r1
   1b944:	mov	r7, r2
   1b948:	ldrb	r4, [r3, #17]
   1b94c:	cmp	r4, #0
   1b950:	bne	1b980 <__assert_fail@plt+0x9294>
   1b954:	ldrb	r3, [r3, #16]
   1b958:	cmp	r3, #0
   1b95c:	beq	1b980 <__assert_fail@plt+0x9294>
   1b960:	mov	r2, #5
   1b964:	ldr	r1, [pc, #44]	; 1b998 <__assert_fail@plt+0x92ac>
   1b968:	mov	r0, r4
   1b96c:	bl	1217c <dcgettext@plt>
   1b970:	mov	r2, r0
   1b974:	mov	r1, r4
   1b978:	mov	r0, r4
   1b97c:	bl	122c0 <error@plt>
   1b980:	mov	r2, r7
   1b984:	mov	r1, r6
   1b988:	mov	r0, r5
   1b98c:	pop	{r4, r5, r6, r7, r8, lr}
   1b990:	b	1b220 <__assert_fail@plt+0x8b34>
   1b994:	andeq	lr, r4, r4, lsl #29
   1b998:	muleq	r3, ip, fp
   1b99c:	subs	r3, r0, #0
   1b9a0:	beq	1b9c0 <__assert_fail@plt+0x92d4>
   1b9a4:	ldr	r0, [r1]
   1b9a8:	ldr	r3, [r3, r0, lsl #2]
   1b9ac:	cmp	r3, #0
   1b9b0:	addne	r0, r0, #1
   1b9b4:	strne	r0, [r1]
   1b9b8:	movne	r0, #1
   1b9bc:	bne	1b9c4 <__assert_fail@plt+0x92d8>
   1b9c0:	mov	r0, r3
   1b9c4:	str	r3, [r2]
   1b9c8:	bx	lr
   1b9cc:	push	{r0, r1, r2, lr}
   1b9d0:	mov	r0, r1
   1b9d4:	mov	r1, r2
   1b9d8:	add	r2, sp, #4
   1b9dc:	bl	1b99c <__assert_fail@plt+0x92b0>
   1b9e0:	cmp	r0, #0
   1b9e4:	ldrne	r3, [pc, #12]	; 1b9f8 <__assert_fail@plt+0x930c>
   1b9e8:	ldrne	r2, [sp, #4]
   1b9ec:	strne	r2, [r3, #76]	; 0x4c
   1b9f0:	add	sp, sp, #12
   1b9f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9f8:	andeq	lr, r4, r4, lsl #29
   1b9fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ba00:	mov	r5, r3
   1ba04:	sub	sp, sp, #20
   1ba08:	mov	r9, r2
   1ba0c:	add	r2, sp, #12
   1ba10:	ldr	r8, [pc, #536]	; 1bc30 <__assert_fail@plt+0x9544>
   1ba14:	ldr	r3, [pc, #536]	; 1bc34 <__assert_fail@plt+0x9548>
   1ba18:	ldr	r4, [pc, #536]	; 1bc38 <__assert_fail@plt+0x954c>
   1ba1c:	cmp	r5, r8
   1ba20:	movne	r4, r3
   1ba24:	bl	1b99c <__assert_fail@plt+0x92b0>
   1ba28:	subs	r7, r0, #0
   1ba2c:	beq	1bab4 <__assert_fail@plt+0x93c8>
   1ba30:	ldr	r2, [sp, #12]
   1ba34:	ldrb	r6, [r2]
   1ba38:	cmp	r6, #0
   1ba3c:	bne	1ba64 <__assert_fail@plt+0x9378>
   1ba40:	ldr	r1, [pc, #500]	; 1bc3c <__assert_fail@plt+0x9550>
   1ba44:	mov	r2, #5
   1ba48:	mov	r0, r6
   1ba4c:	bl	1217c <dcgettext@plt>
   1ba50:	mov	r2, r0
   1ba54:	mov	r3, r4
   1ba58:	mov	r1, r6
   1ba5c:	mov	r0, #1
   1ba60:	bl	122c0 <error@plt>
   1ba64:	mov	r1, r5
   1ba68:	mov	r0, r9
   1ba6c:	bl	17374 <__assert_fail@plt+0x4c88>
   1ba70:	vldr	s13, [pc, #412]	; 1bc14 <__assert_fail@plt+0x9528>
   1ba74:	mov	r3, #0
   1ba78:	cmp	r5, r8
   1ba7c:	vldr	s12, [pc, #404]	; 1bc18 <__assert_fail@plt+0x952c>
   1ba80:	str	r3, [r0, #28]
   1ba84:	moveq	r3, #1
   1ba88:	movne	r3, #256	; 0x100
   1ba8c:	vldr	s11, [pc, #392]	; 1bc1c <__assert_fail@plt+0x9530>
   1ba90:	strh	r3, [r0, #18]
   1ba94:	vldr	s10, [pc, #388]	; 1bc20 <__assert_fail@plt+0x9534>
   1ba98:	vldr	s9, [pc, #388]	; 1bc24 <__assert_fail@plt+0x9538>
   1ba9c:	vldr	s8, [pc, #388]	; 1bc28 <__assert_fail@plt+0x953c>
   1baa0:	vldr	s7, [pc, #388]	; 1bc2c <__assert_fail@plt+0x9540>
   1baa4:	ldr	r2, [sp, #12]
   1baa8:	ldrb	r3, [r2]
   1baac:	cmp	r3, #0
   1bab0:	bne	1bac0 <__assert_fail@plt+0x93d4>
   1bab4:	mov	r0, r7
   1bab8:	add	sp, sp, #20
   1babc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bac0:	cmp	r3, #100	; 0x64
   1bac4:	beq	1bb54 <__assert_fail@plt+0x9468>
   1bac8:	bhi	1bb18 <__assert_fail@plt+0x942c>
   1bacc:	cmp	r3, #98	; 0x62
   1bad0:	beq	1bb8c <__assert_fail@plt+0x94a0>
   1bad4:	bhi	1bb98 <__assert_fail@plt+0x94ac>
   1bad8:	cmp	r3, #68	; 0x44
   1badc:	moveq	r2, #5
   1bae0:	ldreq	r1, [pc, #344]	; 1bc40 <__assert_fail@plt+0x9554>
   1bae4:	beq	1baf0 <__assert_fail@plt+0x9404>
   1bae8:	mov	r2, #5
   1baec:	ldr	r1, [pc, #336]	; 1bc44 <__assert_fail@plt+0x9558>
   1baf0:	mov	r0, #0
   1baf4:	bl	1217c <dcgettext@plt>
   1baf8:	ldr	r3, [sp, #12]
   1bafc:	ldrb	r3, [r3]
   1bb00:	str	r3, [sp]
   1bb04:	mov	r3, r4
   1bb08:	mov	r2, r0
   1bb0c:	mov	r1, #0
   1bb10:	mov	r0, #1
   1bb14:	bl	122c0 <error@plt>
   1bb18:	cmp	r3, #108	; 0x6c
   1bb1c:	beq	1bba4 <__assert_fail@plt+0x94b8>
   1bb20:	bhi	1bb38 <__assert_fail@plt+0x944c>
   1bb24:	cmp	r3, #102	; 0x66
   1bb28:	bne	1bae8 <__assert_fail@plt+0x93fc>
   1bb2c:	vmov.f32	s15, s9
   1bb30:	mov	r3, #3
   1bb34:	b	1bb5c <__assert_fail@plt+0x9470>
   1bb38:	cmp	r3, #112	; 0x70
   1bb3c:	beq	1bbb0 <__assert_fail@plt+0x94c4>
   1bb40:	cmp	r3, #115	; 0x73
   1bb44:	bne	1bae8 <__assert_fail@plt+0x93fc>
   1bb48:	vmov.f32	s15, s10
   1bb4c:	mov	r3, #6
   1bb50:	b	1bb5c <__assert_fail@plt+0x9470>
   1bb54:	vmov.f32	s15, s13
   1bb58:	mov	r3, #2
   1bb5c:	add	r3, r0, r3
   1bb60:	ldrb	r6, [r3, #40]	; 0x28
   1bb64:	cmp	r6, #0
   1bb68:	beq	1bbbc <__assert_fail@plt+0x94d0>
   1bb6c:	mov	r2, #5
   1bb70:	ldr	r1, [pc, #208]	; 1bc48 <__assert_fail@plt+0x955c>
   1bb74:	mov	r0, #0
   1bb78:	bl	1217c <dcgettext@plt>
   1bb7c:	ldr	r3, [sp, #12]
   1bb80:	ldrb	r3, [r3]
   1bb84:	str	r4, [sp]
   1bb88:	b	1bb08 <__assert_fail@plt+0x941c>
   1bb8c:	vmov.f32	s15, s8
   1bb90:	mov	r3, #0
   1bb94:	b	1bb5c <__assert_fail@plt+0x9470>
   1bb98:	vmov.f32	s15, s7
   1bb9c:	mov	r3, #1
   1bba0:	b	1bb5c <__assert_fail@plt+0x9470>
   1bba4:	vmov.f32	s15, s12
   1bba8:	mov	r3, #4
   1bbac:	b	1bb5c <__assert_fail@plt+0x9470>
   1bbb0:	vmov.f32	s15, s11
   1bbb4:	mov	r3, #5
   1bbb8:	b	1bb5c <__assert_fail@plt+0x9470>
   1bbbc:	vldr	s14, [r0, #28]
   1bbc0:	mov	r5, #1
   1bbc4:	vadd.f32	s15, s14, s15
   1bbc8:	vstr	s15, [r0, #28]
   1bbcc:	strb	r5, [r3, #40]	; 0x28
   1bbd0:	add	r3, r2, r5
   1bbd4:	str	r3, [sp, #12]
   1bbd8:	ldrb	r3, [r2, #1]
   1bbdc:	cmp	r3, #0
   1bbe0:	beq	1baa4 <__assert_fail@plt+0x93b8>
   1bbe4:	cmp	r3, #44	; 0x2c
   1bbe8:	movne	r2, #5
   1bbec:	ldrne	r1, [pc, #88]	; 1bc4c <__assert_fail@plt+0x9560>
   1bbf0:	bne	1ba48 <__assert_fail@plt+0x935c>
   1bbf4:	add	r3, r2, #2
   1bbf8:	str	r3, [sp, #12]
   1bbfc:	ldrb	r6, [r2, #2]
   1bc00:	cmp	r6, #0
   1bc04:	bne	1baa4 <__assert_fail@plt+0x93b8>
   1bc08:	mov	r2, #5
   1bc0c:	ldr	r1, [pc, #60]	; 1bc50 <__assert_fail@plt+0x9564>
   1bc10:	b	1ba48 <__assert_fail@plt+0x935c>
   1bc14:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1bc18:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1bc1c:	usatcc	r7, #29, lr, asr #16
   1bc20:			; <UNDEFINED> instruction: 0x378560fd
   1bc24:	svccc	0x00600000
   1bc28:	bcc	1a4dee0 <stdout@@GLIBC_2.4+0x19ff974>
   1bc2c:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1bc30:	ldrdeq	r4, [r1], -r0
   1bc34:	andeq	sl, r3, r5, lsl ip
   1bc38:	andeq	sl, r3, lr, lsl #24
   1bc3c:	andeq	sl, r3, fp, lsl ip
   1bc40:	andeq	sl, r3, lr, asr #24
   1bc44:			; <UNDEFINED> instruction: 0x0003acb3
   1bc48:	andeq	sl, r3, lr, asr #25
   1bc4c:	andeq	sl, r3, r3, lsl #26
   1bc50:	andeq	sl, r3, r5, lsr sp
   1bc54:	mov	ip, r1
   1bc58:	ldr	r3, [pc, #12]	; 1bc6c <__assert_fail@plt+0x9580>
   1bc5c:	mov	r1, r2
   1bc60:	mov	r2, r0
   1bc64:	mov	r0, ip
   1bc68:	b	1b9fc <__assert_fail@plt+0x9310>
   1bc6c:	ldrdeq	r4, [r1], -r0
   1bc70:	mov	ip, r1
   1bc74:	ldr	r3, [pc, #12]	; 1bc88 <__assert_fail@plt+0x959c>
   1bc78:	mov	r1, r2
   1bc7c:	mov	r2, r0
   1bc80:	mov	r0, ip
   1bc84:	b	1b9fc <__assert_fail@plt+0x9310>
   1bc88:	andeq	r4, r1, ip, asr #13
   1bc8c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1bc90:	mov	r7, r2
   1bc94:	mov	r5, r1
   1bc98:	mov	r8, r3
   1bc9c:	mov	r4, r0
   1bca0:	ldr	r6, [sp, #40]	; 0x28
   1bca4:	bl	1b23c <__assert_fail@plt+0x8b50>
   1bca8:	mov	r1, r7
   1bcac:	add	r2, sp, #12
   1bcb0:	mov	r0, r5
   1bcb4:	bl	1b99c <__assert_fail@plt+0x92b0>
   1bcb8:	subs	r7, r0, #0
   1bcbc:	beq	1bd70 <__assert_fail@plt+0x9684>
   1bcc0:	mov	r1, r6
   1bcc4:	mov	r0, r4
   1bcc8:	ldr	r2, [sp, #12]
   1bccc:	bl	17374 <__assert_fail@plt+0x4c88>
   1bcd0:	ldr	r5, [sp, #12]
   1bcd4:	mov	r4, r0
   1bcd8:	mov	r1, #0
   1bcdc:	strh	r1, [r4, #18]
   1bce0:	mov	r0, r5
   1bce4:	str	r5, [r4, #40]	; 0x28
   1bce8:	bl	1a390 <__assert_fail@plt+0x7ca4>
   1bcec:	ldr	r3, [pc, #136]	; 1bd7c <__assert_fail@plt+0x9690>
   1bcf0:	vstr	s0, [r4, #28]
   1bcf4:	ldrb	r3, [r3, #17]
   1bcf8:	cmp	r3, #0
   1bcfc:	bne	1bd70 <__assert_fail@plt+0x9684>
   1bd00:	mov	r1, #47	; 0x2f
   1bd04:	mov	r0, r5
   1bd08:	bl	12548 <strrchr@plt>
   1bd0c:	cmp	r0, #0
   1bd10:	beq	1bd70 <__assert_fail@plt+0x9684>
   1bd14:	ldrb	r3, [r0, #1]
   1bd18:	cmp	r3, #0
   1bd1c:	bne	1bd70 <__assert_fail@plt+0x9684>
   1bd20:	ldr	r1, [pc, #88]	; 1bd80 <__assert_fail@plt+0x9694>
   1bd24:	mov	r0, r5
   1bd28:	sub	r1, r6, r1
   1bd2c:	clz	r1, r1
   1bd30:	lsr	r1, r1, #5
   1bd34:	bl	15bf0 <__assert_fail@plt+0x3504>
   1bd38:	subs	r5, r0, #0
   1bd3c:	bne	1bd70 <__assert_fail@plt+0x9684>
   1bd40:	mov	r2, #5
   1bd44:	ldr	r1, [pc, #56]	; 1bd84 <__assert_fail@plt+0x9698>
   1bd48:	bl	1217c <dcgettext@plt>
   1bd4c:	ldr	r3, [sp, #12]
   1bd50:	mov	r2, r0
   1bd54:	mov	r1, r5
   1bd58:	mov	r0, r5
   1bd5c:	str	r3, [sp]
   1bd60:	mov	r3, r8
   1bd64:	bl	122c0 <error@plt>
   1bd68:	ldr	r3, [pc, #24]	; 1bd88 <__assert_fail@plt+0x969c>
   1bd6c:	str	r3, [r4, #28]
   1bd70:	mov	r0, r7
   1bd74:	add	sp, sp, #16
   1bd78:	pop	{r4, r5, r6, r7, r8, pc}
   1bd7c:	andeq	lr, r4, r4, lsl #29
   1bd80:	muleq	r1, r8, r0
   1bd84:	andeq	sl, r3, r4, lsl #27
   1bd88:	eorcc	ip, fp, #30464	; 0x7700
   1bd8c:	ldr	r3, [pc, #20]	; 1bda8 <__assert_fail@plt+0x96bc>
   1bd90:	push	{r0, r1, r2, lr}
   1bd94:	str	r3, [sp]
   1bd98:	ldr	r3, [pc, #12]	; 1bdac <__assert_fail@plt+0x96c0>
   1bd9c:	bl	1bc8c <__assert_fail@plt+0x95a0>
   1bda0:	add	sp, sp, #12
   1bda4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bda8:	andeq	r4, r1, r0, asr #8
   1bdac:	andeq	fp, r3, r5, rrx
   1bdb0:	ldr	r3, [pc, #20]	; 1bdcc <__assert_fail@plt+0x96e0>
   1bdb4:	push	{r0, r1, r2, lr}
   1bdb8:	str	r3, [sp]
   1bdbc:	ldr	r3, [pc, #12]	; 1bdd0 <__assert_fail@plt+0x96e4>
   1bdc0:	bl	1bc8c <__assert_fail@plt+0x95a0>
   1bdc4:	add	sp, sp, #12
   1bdc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdcc:	andeq	r4, r1, r0, asr #8
   1bdd0:	andeq	sl, r3, r5, asr #27
   1bdd4:	ldr	r3, [pc, #20]	; 1bdf0 <__assert_fail@plt+0x9704>
   1bdd8:	push	{r0, r1, r2, lr}
   1bddc:	str	r3, [sp]
   1bde0:	ldr	r3, [pc, #12]	; 1bdf4 <__assert_fail@plt+0x9708>
   1bde4:	bl	1bc8c <__assert_fail@plt+0x95a0>
   1bde8:	add	sp, sp, #12
   1bdec:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf0:	muleq	r1, r8, r0
   1bdf4:	andeq	fp, r3, r6, ror r0
   1bdf8:	ldr	r3, [pc, #20]	; 1be14 <__assert_fail@plt+0x9728>
   1bdfc:	push	{r0, r1, r2, lr}
   1be00:	str	r3, [sp]
   1be04:	ldr	r3, [pc, #12]	; 1be18 <__assert_fail@plt+0x972c>
   1be08:	bl	1bc8c <__assert_fail@plt+0x95a0>
   1be0c:	add	sp, sp, #12
   1be10:	pop	{pc}		; (ldr pc, [sp], #4)
   1be14:	muleq	r1, r8, r0
   1be18:	andeq	sl, r3, r4, asr #27
   1be1c:	ldr	r3, [r1]
   1be20:	push	{r4, r5, r6, r7, r8, r9, lr}
   1be24:	sub	sp, sp, #20
   1be28:	mov	r8, r2
   1be2c:	add	r2, sp, #12
   1be30:	mov	r6, r0
   1be34:	sub	r3, r3, #-1073741823	; 0xc0000001
   1be38:	ldr	r9, [r0, r3, lsl #2]
   1be3c:	bl	1b99c <__assert_fail@plt+0x92b0>
   1be40:	cmp	r0, #0
   1be44:	beq	1be98 <__assert_fail@plt+0x97ac>
   1be48:	ldr	r4, [sp, #12]
   1be4c:	mov	r7, r1
   1be50:	ldr	r1, [pc, #132]	; 1bedc <__assert_fail@plt+0x97f0>
   1be54:	ldr	r5, [pc, #132]	; 1bee0 <__assert_fail@plt+0x97f4>
   1be58:	mov	r0, r4
   1be5c:	bl	126e0 <strspn@plt>
   1be60:	cmp	r0, #0
   1be64:	ble	1bea0 <__assert_fail@plt+0x97b4>
   1be68:	ldrb	r3, [r4, r0]
   1be6c:	cmp	r3, #0
   1be70:	bne	1bea0 <__assert_fail@plt+0x97b4>
   1be74:	mov	r0, r4
   1be78:	ldr	r1, [r5, #72]	; 0x48
   1be7c:	bl	1f2bc <__assert_fail@plt+0xcbd0>
   1be80:	cmp	r0, #0
   1be84:	str	r0, [r8]
   1be88:	blt	1bea0 <__assert_fail@plt+0x97b4>
   1be8c:	mov	r1, r7
   1be90:	mov	r0, r6
   1be94:	bl	1b110 <__assert_fail@plt+0x8a24>
   1be98:	add	sp, sp, #20
   1be9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bea0:	mov	r2, #5
   1bea4:	ldr	r1, [pc, #56]	; 1bee4 <__assert_fail@plt+0x97f8>
   1bea8:	mov	r0, #0
   1beac:	bl	1217c <dcgettext@plt>
   1beb0:	mov	r4, r0
   1beb4:	mov	r0, #0
   1beb8:	ldr	r2, [sp, #12]
   1bebc:	ldr	r1, [r5, #72]	; 0x48
   1bec0:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1bec4:	mov	r3, r9
   1bec8:	mov	r2, r4
   1becc:	str	r0, [sp]
   1bed0:	mov	r1, #0
   1bed4:	mov	r0, #1
   1bed8:	bl	122c0 <error@plt>
   1bedc:	andeq	sl, r3, sl, asr #27
   1bee0:	andeq	lr, r4, r4, lsl #29
   1bee4:	ldrdeq	sl, [r3], -r5
   1bee8:	mov	r0, r1
   1beec:	mov	r1, r2
   1bef0:	ldr	r2, [pc]	; 1bef8 <__assert_fail@plt+0x980c>
   1bef4:	b	1be1c <__assert_fail@plt+0x9730>
   1bef8:	andeq	lr, r4, ip, lsl #29
   1befc:	mov	r0, r1
   1bf00:	mov	r1, r2
   1bf04:	ldr	r2, [pc]	; 1bf0c <__assert_fail@plt+0x9820>
   1bf08:	b	1be1c <__assert_fail@plt+0x9730>
   1bf0c:	andeq	lr, r4, r8, lsl #29
   1bf10:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bf14:	mov	r7, r0
   1bf18:	mov	r0, r1
   1bf1c:	mov	r1, r2
   1bf20:	add	r2, sp, #4
   1bf24:	bl	1b99c <__assert_fail@plt+0x92b0>
   1bf28:	subs	r6, r0, #0
   1bf2c:	beq	1bfa8 <__assert_fail@plt+0x98bc>
   1bf30:	ldr	r0, [sp, #4]
   1bf34:	bl	11fd8 <getpwnam@plt>
   1bf38:	mov	r4, r0
   1bf3c:	bl	12530 <endpwent@plt>
   1bf40:	cmp	r4, #0
   1bf44:	ldrne	r4, [r4, #8]
   1bf48:	bne	1bf84 <__assert_fail@plt+0x9898>
   1bf4c:	ldr	r4, [sp, #4]
   1bf50:	ldr	r1, [pc, #196]	; 1c01c <__assert_fail@plt+0x9930>
   1bf54:	ldr	r5, [pc, #196]	; 1c020 <__assert_fail@plt+0x9934>
   1bf58:	mov	r0, r4
   1bf5c:	bl	126e0 <strspn@plt>
   1bf60:	cmp	r0, #0
   1bf64:	beq	1bfb4 <__assert_fail@plt+0x98c8>
   1bf68:	ldrb	r3, [r4, r0]
   1bf6c:	cmp	r3, #0
   1bf70:	bne	1bfb4 <__assert_fail@plt+0x98c8>
   1bf74:	mov	r0, r4
   1bf78:	ldr	r1, [r5, #72]	; 0x48
   1bf7c:	bl	1f2bc <__assert_fail@plt+0xcbd0>
   1bf80:	mov	r4, r0
   1bf84:	mov	r0, r7
   1bf88:	ldr	r1, [sp, #4]
   1bf8c:	bl	173ac <__assert_fail@plt+0x4cc0>
   1bf90:	vldr	s15, [pc, #124]	; 1c014 <__assert_fail@plt+0x9928>
   1bf94:	cmp	r4, #100	; 0x64
   1bf98:	str	r4, [r0, #40]	; 0x28
   1bf9c:	vldr	s14, [pc, #116]	; 1c018 <__assert_fail@plt+0x992c>
   1bfa0:	vmovcs.f32	s15, s14
   1bfa4:	vstr	s15, [r0, #28]
   1bfa8:	mov	r0, r6
   1bfac:	add	sp, sp, #12
   1bfb0:	pop	{r4, r5, r6, r7, pc}
   1bfb4:	ldrb	r4, [r4]
   1bfb8:	mov	r2, #5
   1bfbc:	cmp	r4, #0
   1bfc0:	beq	1bff8 <__assert_fail@plt+0x990c>
   1bfc4:	ldr	r1, [pc, #88]	; 1c024 <__assert_fail@plt+0x9938>
   1bfc8:	mov	r0, #0
   1bfcc:	bl	1217c <dcgettext@plt>
   1bfd0:	mov	r4, r0
   1bfd4:	mov	r0, #0
   1bfd8:	ldr	r2, [sp, #4]
   1bfdc:	ldr	r1, [r5, #72]	; 0x48
   1bfe0:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1bfe4:	mov	r3, r0
   1bfe8:	mov	r2, r4
   1bfec:	mov	r1, #0
   1bff0:	mov	r0, #1
   1bff4:	bl	122c0 <error@plt>
   1bff8:	ldr	r1, [pc, #40]	; 1c028 <__assert_fail@plt+0x993c>
   1bffc:	mov	r0, r4
   1c000:	bl	1217c <dcgettext@plt>
   1c004:	mov	r2, r0
   1c008:	mov	r1, r4
   1c00c:	mov	r0, #1
   1c010:	bl	122c0 <error@plt>
   1c014:	svccc	0x007d70a4
   1c018:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c01c:	andeq	sl, r3, sl, asr #27
   1c020:	andeq	lr, r4, r4, lsl #29
   1c024:	andeq	sl, r3, r4, lsl lr
   1c028:	andeq	sl, r3, r7, lsr lr
   1c02c:	push	{r0, r1, r4, r5, r6, lr}
   1c030:	mov	r5, r1
   1c034:	mov	r6, r2
   1c038:	mov	r4, r0
   1c03c:	bl	1b23c <__assert_fail@plt+0x8b50>
   1c040:	mov	r0, r5
   1c044:	add	r2, sp, #4
   1c048:	mov	r1, r6
   1c04c:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c050:	subs	r5, r0, #0
   1c054:	beq	1c084 <__assert_fail@plt+0x9998>
   1c058:	mov	r0, r4
   1c05c:	ldr	r1, [sp, #4]
   1c060:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c064:	mov	r4, r0
   1c068:	ldr	r0, [sp, #4]
   1c06c:	mov	r1, #0
   1c070:	str	r0, [r4, #40]	; 0x28
   1c074:	bl	1a390 <__assert_fail@plt+0x7ca4>
   1c078:	vldr	s15, [pc, #16]	; 1c090 <__assert_fail@plt+0x99a4>
   1c07c:	vmul.f32	s0, s0, s15
   1c080:	vstr	s0, [r4, #28]
   1c084:	mov	r0, r5
   1c088:	add	sp, sp, #8
   1c08c:	pop	{r4, r5, r6, pc}
   1c090:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c094:	push	{r0, r1, r2, r4, r5, lr}
   1c098:	mov	r4, r0
   1c09c:	mov	r0, r1
   1c0a0:	mov	r1, r2
   1c0a4:	add	r2, sp, #4
   1c0a8:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c0ac:	subs	r5, r0, #0
   1c0b0:	beq	1c0e0 <__assert_fail@plt+0x99f4>
   1c0b4:	mov	r0, r4
   1c0b8:	ldr	r1, [sp, #4]
   1c0bc:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c0c0:	mov	r4, r0
   1c0c4:	ldr	r0, [sp, #4]
   1c0c8:	mov	r1, #0
   1c0cc:	str	r0, [r4, #40]	; 0x28
   1c0d0:	bl	1a390 <__assert_fail@plt+0x7ca4>
   1c0d4:	vldr	s15, [pc, #16]	; 1c0ec <__assert_fail@plt+0x9a00>
   1c0d8:	vmul.f32	s0, s0, s15
   1c0dc:	vstr	s0, [r4, #28]
   1c0e0:	mov	r0, r5
   1c0e4:	add	sp, sp, #12
   1c0e8:	pop	{r4, r5, pc}
   1c0ec:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c0f0:	push	{r4, r5, r6, lr}
   1c0f4:	sub	sp, sp, #40	; 0x28
   1c0f8:	mov	r6, r0
   1c0fc:	mov	r0, r1
   1c100:	mov	r1, r2
   1c104:	add	r2, sp, #12
   1c108:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c10c:	subs	r5, r0, #0
   1c110:	beq	1c1c0 <__assert_fail@plt+0x9ad4>
   1c114:	mov	r3, #0
   1c118:	add	r4, sp, #24
   1c11c:	vldr	d0, [pc, #204]	; 1c1f0 <__assert_fail@plt+0x9b04>
   1c120:	mov	r1, r4
   1c124:	str	r3, [sp, #16]
   1c128:	str	r3, [sp, #20]
   1c12c:	ldr	r3, [pc, #220]	; 1c210 <__assert_fail@plt+0x9b24>
   1c130:	ldr	r0, [sp, #12]
   1c134:	str	r3, [sp]
   1c138:	add	r3, sp, #16
   1c13c:	ldm	r3, {r2, r3}
   1c140:	bl	1a410 <__assert_fail@plt+0x7d24>
   1c144:	subs	r5, r0, #0
   1c148:	beq	1c1cc <__assert_fail@plt+0x9ae0>
   1c14c:	mov	r0, r6
   1c150:	ldr	r1, [sp, #12]
   1c154:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c158:	add	ip, r0, #40	; 0x28
   1c15c:	mov	lr, r0
   1c160:	ldm	r4, {r0, r1, r2, r3}
   1c164:	vldr	s14, [pc, #140]	; 1c1f8 <__assert_fail@plt+0x9b0c>
   1c168:	stm	ip, {r0, r1, r2, r3}
   1c16c:	ldr	r2, [pc, #160]	; 1c214 <__assert_fail@plt+0x9b28>
   1c170:	ldr	r3, [sp, #32]
   1c174:	sdiv	r3, r3, r2
   1c178:	vmov	s15, r3
   1c17c:	vcvt.f32.s32	s15, s15
   1c180:	vcmpe.f32	s15, s14
   1c184:	vmrs	APSR_nzcv, fpscr
   1c188:	vldrmi	s15, [pc, #108]	; 1c1fc <__assert_fail@plt+0x9b10>
   1c18c:	bmi	1c1bc <__assert_fail@plt+0x9ad0>
   1c190:	vldr	s14, [pc, #104]	; 1c200 <__assert_fail@plt+0x9b14>
   1c194:	vcmpe.f32	s15, s14
   1c198:	vmrs	APSR_nzcv, fpscr
   1c19c:	vldrmi	s15, [pc, #96]	; 1c204 <__assert_fail@plt+0x9b18>
   1c1a0:	bmi	1c1bc <__assert_fail@plt+0x9ad0>
   1c1a4:	vldr	s14, [pc, #92]	; 1c208 <__assert_fail@plt+0x9b1c>
   1c1a8:	vcmpe.f32	s15, s14
   1c1ac:	vldr	s15, [pc, #80]	; 1c204 <__assert_fail@plt+0x9b18>
   1c1b0:	vldr	s14, [pc, #84]	; 1c20c <__assert_fail@plt+0x9b20>
   1c1b4:	vmrs	APSR_nzcv, fpscr
   1c1b8:	vmovle.f32	s15, s14
   1c1bc:	vstr	s15, [lr, #28]
   1c1c0:	mov	r0, r5
   1c1c4:	add	sp, sp, #40	; 0x28
   1c1c8:	pop	{r4, r5, r6, pc}
   1c1cc:	mov	r2, #5
   1c1d0:	ldr	r1, [pc, #64]	; 1c218 <__assert_fail@plt+0x9b2c>
   1c1d4:	bl	1217c <dcgettext@plt>
   1c1d8:	mov	r2, r0
   1c1dc:	mov	r1, r5
   1c1e0:	ldr	r3, [sp, #12]
   1c1e4:	mov	r0, #1
   1c1e8:	bl	122c0 <error@plt>
   1c1ec:	nop	{0}
   1c1f0:	andeq	r0, r0, r0
   1c1f4:	rscsmi	r1, r5, r0, lsl #16
   1c1f8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c1fc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c200:	svccc	0x00800000
   1c204:			; <UNDEFINED> instruction: 0x3e99999a
   1c208:	sbcmi	r0, r8, #0
   1c20c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c210:	andeq	sl, r3, r1, ror #28
   1c214:	andeq	r5, r1, r0, lsl #3
   1c218:	andeq	sl, r3, r5, lsr #29
   1c21c:	push	{r4, r5, r6, r7, r8, lr}
   1c220:	sub	sp, sp, #40	; 0x28
   1c224:	mov	r8, r0
   1c228:	mov	r5, r2
   1c22c:	mov	r0, r1
   1c230:	mov	r1, r2
   1c234:	mov	r4, r3
   1c238:	ldr	r7, [r2]
   1c23c:	add	r2, sp, #12
   1c240:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c244:	subs	r6, r0, #0
   1c248:	beq	1c2c4 <__assert_fail@plt+0x9bd8>
   1c24c:	ldr	r2, [pc, #132]	; 1c2d8 <__assert_fail@plt+0x9bec>
   1c250:	add	ip, sp, #16
   1c254:	str	r4, [sp, #24]
   1c258:	add	r4, sp, #24
   1c25c:	vldr	d0, [pc, #108]	; 1c2d0 <__assert_fail@plt+0x9be4>
   1c260:	add	r1, r2, #28
   1c264:	ldm	r1, {r0, r1}
   1c268:	add	r3, r0, #86016	; 0x15000
   1c26c:	stm	ip, {r0, r1}
   1c270:	mov	r1, r4
   1c274:	add	r3, r3, #384	; 0x180
   1c278:	ldr	r0, [sp, #12]
   1c27c:	str	r3, [sp, #16]
   1c280:	ldr	r3, [pc, #84]	; 1c2dc <__assert_fail@plt+0x9bf0>
   1c284:	str	r3, [sp]
   1c288:	ldm	ip, {r2, r3}
   1c28c:	bl	1a410 <__assert_fail@plt+0x7d24>
   1c290:	subs	r6, r0, #0
   1c294:	streq	r7, [r5]
   1c298:	beq	1c2c4 <__assert_fail@plt+0x9bd8>
   1c29c:	mov	r0, r8
   1c2a0:	ldr	r1, [sp, #12]
   1c2a4:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c2a8:	add	ip, r0, #40	; 0x28
   1c2ac:	mov	r5, r0
   1c2b0:	ldm	r4, {r0, r1, r2, r3}
   1c2b4:	stm	ip, {r0, r1, r2, r3}
   1c2b8:	ldr	r0, [sp, #32]
   1c2bc:	bl	1b504 <__assert_fail@plt+0x8e18>
   1c2c0:	vstr	s0, [r5, #28]
   1c2c4:	mov	r0, r6
   1c2c8:	add	sp, sp, #40	; 0x28
   1c2cc:	pop	{r4, r5, r6, r7, r8, pc}
   1c2d0:	andeq	r0, r0, r0
   1c2d4:	submi	r0, lr, r0
   1c2d8:	andeq	lr, r4, r4, lsl #29
   1c2dc:	andeq	sl, r3, r2, asr #29
   1c2e0:	mov	r3, #3
   1c2e4:	b	1c21c <__assert_fail@plt+0x9b30>
   1c2e8:	mov	r3, #2
   1c2ec:	b	1c21c <__assert_fail@plt+0x9b30>
   1c2f0:	mov	r3, #0
   1c2f4:	b	1c21c <__assert_fail@plt+0x9b30>
   1c2f8:	push	{r4, r5, lr}
   1c2fc:	sub	sp, sp, #20
   1c300:	mov	r5, r2
   1c304:	mov	r2, sp
   1c308:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c30c:	subs	r4, r0, #0
   1c310:	beq	1c3bc <__assert_fail@plt+0x9cd0>
   1c314:	add	r2, sp, #4
   1c318:	add	r1, sp, #8
   1c31c:	ldr	r0, [sp]
   1c320:	bl	1a584 <__assert_fail@plt+0x7e98>
   1c324:	subs	r4, r0, #0
   1c328:	beq	1c3bc <__assert_fail@plt+0x9cd0>
   1c32c:	mov	r0, r5
   1c330:	ldr	r1, [sp]
   1c334:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c338:	ldr	r3, [sp, #4]
   1c33c:	mov	r4, r0
   1c340:	str	r3, [r0, #40]	; 0x28
   1c344:	ldrd	r2, [sp, #8]
   1c348:	strd	r2, [r0, #48]	; 0x30
   1c34c:	ldr	r3, [pc, #140]	; 1c3e0 <__assert_fail@plt+0x9cf4>
   1c350:	ldr	r3, [r3, #44]	; 0x2c
   1c354:	tst	r3, #1
   1c358:	beq	1c3bc <__assert_fail@plt+0x9cd0>
   1c35c:	ldr	r5, [pc, #128]	; 1c3e4 <__assert_fail@plt+0x9cf8>
   1c360:	ldr	r1, [pc, #128]	; 1c3e8 <__assert_fail@plt+0x9cfc>
   1c364:	ldr	r2, [r0, #4]
   1c368:	ldr	r0, [r5]
   1c36c:	bl	123f8 <fprintf@plt>
   1c370:	ldr	r3, [sp, #4]
   1c374:	ldr	r0, [r5]
   1c378:	cmp	r3, #0
   1c37c:	beq	1c3c8 <__assert_fail@plt+0x9cdc>
   1c380:	cmp	r3, #1
   1c384:	beq	1c3d4 <__assert_fail@plt+0x9ce8>
   1c388:	cmp	r3, #2
   1c38c:	ldr	r1, [pc, #88]	; 1c3ec <__assert_fail@plt+0x9d00>
   1c390:	ldr	r3, [pc, #88]	; 1c3f0 <__assert_fail@plt+0x9d04>
   1c394:	ldr	r2, [pc, #88]	; 1c3f4 <__assert_fail@plt+0x9d08>
   1c398:	movne	r2, r3
   1c39c:	ldr	r3, [pc, #84]	; 1c3f8 <__assert_fail@plt+0x9d0c>
   1c3a0:	movne	r3, r1
   1c3a4:	ldr	r1, [pc, #80]	; 1c3fc <__assert_fail@plt+0x9d10>
   1c3a8:	bl	123f8 <fprintf@plt>
   1c3ac:	ldr	r1, [pc, #76]	; 1c400 <__assert_fail@plt+0x9d14>
   1c3b0:	ldr	r0, [r5]
   1c3b4:	ldrd	r2, [r4, #48]	; 0x30
   1c3b8:	bl	123f8 <fprintf@plt>
   1c3bc:	mov	r0, r4
   1c3c0:	add	sp, sp, #20
   1c3c4:	pop	{r4, r5, pc}
   1c3c8:	ldr	r2, [pc, #52]	; 1c404 <__assert_fail@plt+0x9d18>
   1c3cc:	ldr	r3, [pc, #52]	; 1c408 <__assert_fail@plt+0x9d1c>
   1c3d0:	b	1c3a4 <__assert_fail@plt+0x9cb8>
   1c3d4:	ldr	r2, [pc, #48]	; 1c40c <__assert_fail@plt+0x9d20>
   1c3d8:	ldr	r3, [pc, #48]	; 1c410 <__assert_fail@plt+0x9d24>
   1c3dc:	b	1c3a4 <__assert_fail@plt+0x9cb8>
   1c3e0:	andeq	lr, r4, r4, lsl #29
   1c3e4:	andeq	lr, r4, r0, ror #10
   1c3e8:	andeq	sl, r3, fp, lsl pc
   1c3ec:	andeq	sl, r3, r8, lsl pc
   1c3f0:	andeq	sl, r3, r9, lsl pc
   1c3f4:	andeq	sl, r3, r9, lsl #30
   1c3f8:	andeq	sl, r3, ip, lsl #30
   1c3fc:	andeq	sl, r3, r9, lsr #30
   1c400:	andeq	sl, r3, lr, lsr pc
   1c404:	andeq	sl, r3, r2, lsl pc
   1c408:	andeq	sl, r3, r5, lsl pc
   1c40c:	andeq	fp, r3, r3, lsl #19
   1c410:	andeq	sl, r3, pc, lsl #30
   1c414:	mov	r3, r1
   1c418:	push	{r4, lr}
   1c41c:	mov	r4, r2
   1c420:	mov	r1, r4
   1c424:	mov	r2, r0
   1c428:	mov	r0, r3
   1c42c:	bl	1c2f8 <__assert_fail@plt+0x9c0c>
   1c430:	cmp	r0, #0
   1c434:	beq	1c470 <__assert_fail@plt+0x9d84>
   1c438:	ldrd	r2, [r0, #48]	; 0x30
   1c43c:	cmp	r3, #0
   1c440:	cmpeq	r2, #1
   1c444:	bne	1c458 <__assert_fail@plt+0x9d6c>
   1c448:	ldr	r3, [pc, #48]	; 1c480 <__assert_fail@plt+0x9d94>
   1c44c:	str	r3, [r0, #28]
   1c450:	mov	r0, #1
   1c454:	pop	{r4, pc}
   1c458:	cmp	r3, #0
   1c45c:	cmpeq	r2, #2
   1c460:	ldreq	r3, [pc, #28]	; 1c484 <__assert_fail@plt+0x9d98>
   1c464:	beq	1c44c <__assert_fail@plt+0x9d60>
   1c468:	ldr	r3, [pc, #24]	; 1c488 <__assert_fail@plt+0x9d9c>
   1c46c:	b	1c44c <__assert_fail@plt+0x9d60>
   1c470:	ldr	r3, [r4]
   1c474:	sub	r3, r3, #1
   1c478:	str	r3, [r4]
   1c47c:	pop	{r4, pc}
   1c480:	svccc	0x007d70a4
   1c484:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c488:	bcc	fe0e0e4c <stdout@@GLIBC_2.4+0xfe0928e0>
   1c48c:	mov	r3, r1
   1c490:	push	{r4, lr}
   1c494:	mov	r4, r2
   1c498:	mov	r1, r4
   1c49c:	mov	r2, r0
   1c4a0:	mov	r0, r3
   1c4a4:	bl	1c2f8 <__assert_fail@plt+0x9c0c>
   1c4a8:	cmp	r0, #0
   1c4ac:	beq	1c4d0 <__assert_fail@plt+0x9de4>
   1c4b0:	ldr	r3, [pc, #40]	; 1c4e0 <__assert_fail@plt+0x9df4>
   1c4b4:	str	r3, [r0, #28]
   1c4b8:	mov	r3, #0
   1c4bc:	strh	r3, [r0, #18]
   1c4c0:	mov	r3, #1
   1c4c4:	strb	r3, [r0, #20]
   1c4c8:	mov	r0, r3
   1c4cc:	pop	{r4, pc}
   1c4d0:	ldr	r3, [r4]
   1c4d4:	sub	r3, r3, #1
   1c4d8:	str	r3, [r4]
   1c4dc:	pop	{r4, pc}
   1c4e0:	strcc	r3, [r6, #1981]	; 0x7bd
   1c4e4:	mov	r3, r1
   1c4e8:	push	{r4, lr}
   1c4ec:	mov	r4, r2
   1c4f0:	mov	r1, r4
   1c4f4:	mov	r2, r0
   1c4f8:	mov	r0, r3
   1c4fc:	bl	1c2f8 <__assert_fail@plt+0x9c0c>
   1c500:	cmp	r0, #0
   1c504:	beq	1c52c <__assert_fail@plt+0x9e40>
   1c508:	ldrd	r2, [r0, #48]	; 0x30
   1c50c:	vldr	s14, [pc, #40]	; 1c53c <__assert_fail@plt+0x9e50>
   1c510:	vldr	s15, [pc, #40]	; 1c540 <__assert_fail@plt+0x9e54>
   1c514:	cmp	r3, #0
   1c518:	cmpeq	r2, #100	; 0x64
   1c51c:	vmovcs.f32	s15, s14
   1c520:	vstr	s15, [r0, #28]
   1c524:	mov	r0, #1
   1c528:	pop	{r4, pc}
   1c52c:	ldr	r3, [r4]
   1c530:	sub	r3, r3, #1
   1c534:	str	r3, [r4]
   1c538:	pop	{r4, pc}
   1c53c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c540:	svccc	0x007d70a4
   1c544:	b	1c4e4 <__assert_fail@plt+0x9df8>
   1c548:	push	{r0, r1, r4, r5, r6, lr}
   1c54c:	mov	r6, r2
   1c550:	add	r2, sp, #4
   1c554:	mov	r5, r3
   1c558:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c55c:	subs	r4, r0, #0
   1c560:	beq	1c594 <__assert_fail@plt+0x9ea8>
   1c564:	ldr	r3, [pc, #56]	; 1c5a4 <__assert_fail@plt+0x9eb8>
   1c568:	mov	r1, r6
   1c56c:	ldr	r0, [sp, #4]
   1c570:	ldr	r3, [r3, #52]	; 0x34
   1c574:	str	r0, [r5]
   1c578:	blx	r3
   1c57c:	cmp	r0, #0
   1c580:	beq	1c598 <__assert_fail@plt+0x9eac>
   1c584:	bl	12404 <__errno_location@plt>
   1c588:	ldr	r0, [r0]
   1c58c:	ldr	r1, [sp, #4]
   1c590:	bl	182c4 <__assert_fail@plt+0x5bd8>
   1c594:	str	r4, [r5]
   1c598:	mov	r0, r4
   1c59c:	add	sp, sp, #8
   1c5a0:	pop	{r4, r5, r6, pc}
   1c5a4:	andeq	lr, r4, r4, lsl #29
   1c5a8:	push	{r4, r5, r6, lr}
   1c5ac:	sub	sp, sp, #112	; 0x70
   1c5b0:	mov	r4, r1
   1c5b4:	mov	r6, r2
   1c5b8:	mov	r5, r0
   1c5bc:	add	r0, sp, #8
   1c5c0:	bl	175f8 <__assert_fail@plt+0x4f0c>
   1c5c4:	mov	r0, r4
   1c5c8:	add	r3, sp, #4
   1c5cc:	add	r2, sp, #8
   1c5d0:	mov	r1, r6
   1c5d4:	bl	1c548 <__assert_fail@plt+0x9e5c>
   1c5d8:	subs	r4, r0, #0
   1c5dc:	beq	1c618 <__assert_fail@plt+0x9f2c>
   1c5e0:	mov	r0, r5
   1c5e4:	ldr	r1, [sp, #4]
   1c5e8:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c5ec:	ldr	r3, [sp, #92]	; 0x5c
   1c5f0:	mov	r2, r0
   1c5f4:	ldr	r0, [sp, #88]	; 0x58
   1c5f8:	str	r3, [r2, #52]	; 0x34
   1c5fc:	mov	r3, #3
   1c600:	str	r3, [r2, #40]	; 0x28
   1c604:	mov	r3, #0
   1c608:	str	r0, [r2, #48]	; 0x30
   1c60c:	str	r3, [r2, #44]	; 0x2c
   1c610:	bl	1b504 <__assert_fail@plt+0x8e18>
   1c614:	vstr	s0, [r2, #28]
   1c618:	mov	r0, r4
   1c61c:	add	sp, sp, #112	; 0x70
   1c620:	pop	{r4, r5, r6, pc}
   1c624:	push	{r4, r5, r6, lr}
   1c628:	sub	sp, sp, #112	; 0x70
   1c62c:	mov	r4, r1
   1c630:	mov	r6, r2
   1c634:	mov	r5, r0
   1c638:	add	r0, sp, #8
   1c63c:	bl	175f8 <__assert_fail@plt+0x4f0c>
   1c640:	mov	r0, r4
   1c644:	add	r3, sp, #4
   1c648:	add	r2, sp, #8
   1c64c:	mov	r1, r6
   1c650:	bl	1c548 <__assert_fail@plt+0x9e5c>
   1c654:	subs	r4, r0, #0
   1c658:	beq	1c694 <__assert_fail@plt+0x9fa8>
   1c65c:	mov	r0, r5
   1c660:	ldr	r1, [sp, #4]
   1c664:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c668:	mov	r2, r0
   1c66c:	mov	r3, #2
   1c670:	ldr	r0, [sp, #88]	; 0x58
   1c674:	str	r3, [r2, #40]	; 0x28
   1c678:	ldr	r3, [sp, #92]	; 0x5c
   1c67c:	str	r0, [r2, #48]	; 0x30
   1c680:	str	r3, [r2, #52]	; 0x34
   1c684:	mov	r3, #0
   1c688:	str	r3, [r2, #44]	; 0x2c
   1c68c:	bl	1b504 <__assert_fail@plt+0x8e18>
   1c690:	vstr	s0, [r2, #28]
   1c694:	mov	r0, r4
   1c698:	add	sp, sp, #112	; 0x70
   1c69c:	pop	{r4, r5, r6, pc}
   1c6a0:	push	{r4, r5, r6, lr}
   1c6a4:	sub	sp, sp, #112	; 0x70
   1c6a8:	mov	r4, r1
   1c6ac:	mov	r6, r2
   1c6b0:	mov	r5, r0
   1c6b4:	add	r0, sp, #8
   1c6b8:	bl	175f8 <__assert_fail@plt+0x4f0c>
   1c6bc:	mov	r0, r4
   1c6c0:	add	r3, sp, #4
   1c6c4:	add	r2, sp, #8
   1c6c8:	mov	r1, r6
   1c6cc:	bl	1c548 <__assert_fail@plt+0x9e5c>
   1c6d0:	subs	r4, r0, #0
   1c6d4:	beq	1c704 <__assert_fail@plt+0xa018>
   1c6d8:	mov	r0, r5
   1c6dc:	ldr	r1, [sp, #4]
   1c6e0:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c6e4:	mov	r2, r0
   1c6e8:	ldrd	r0, [sp, #88]	; 0x58
   1c6ec:	mov	r3, #0
   1c6f0:	str	r3, [r2, #40]	; 0x28
   1c6f4:	str	r3, [r2, #44]	; 0x2c
   1c6f8:	strd	r0, [r2, #48]	; 0x30
   1c6fc:	bl	1b504 <__assert_fail@plt+0x8e18>
   1c700:	vstr	s0, [r2, #28]
   1c704:	mov	r0, r4
   1c708:	add	sp, sp, #112	; 0x70
   1c70c:	pop	{r4, r5, r6, pc}
   1c710:	push	{r4, r5, r6, r7, lr}
   1c714:	sub	sp, sp, #220	; 0xdc
   1c718:	mov	r6, r2
   1c71c:	mov	r4, r1
   1c720:	mov	r5, r0
   1c724:	add	r0, sp, #8
   1c728:	bl	175f8 <__assert_fail@plt+0x4f0c>
   1c72c:	mov	r1, r6
   1c730:	add	r3, sp, #4
   1c734:	add	r2, sp, #8
   1c738:	mov	r0, r4
   1c73c:	bl	1c548 <__assert_fail@plt+0x9e5c>
   1c740:	subs	r6, r0, #0
   1c744:	beq	1c864 <__assert_fail@plt+0xa178>
   1c748:	ldr	r7, [pc, #316]	; 1c88c <__assert_fail@plt+0xa1a0>
   1c74c:	add	r0, sp, #112	; 0x70
   1c750:	bl	175f8 <__assert_fail@plt+0x4f0c>
   1c754:	ldr	r3, [r7, #48]	; 0x30
   1c758:	cmp	r3, #0
   1c75c:	bne	1c7ac <__assert_fail@plt+0xa0c0>
   1c760:	ldrb	r1, [r7, #56]	; 0x38
   1c764:	cmp	r1, #0
   1c768:	bne	1c7b4 <__assert_fail@plt+0xa0c8>
   1c76c:	ldr	r3, [sp, #24]
   1c770:	and	r3, r3, #61440	; 0xf000
   1c774:	cmp	r3, #40960	; 0xa000
   1c778:	beq	1c884 <__assert_fail@plt+0xa198>
   1c77c:	ldr	r0, [sp, #4]
   1c780:	bl	1e4d4 <__assert_fail@plt+0xbde8>
   1c784:	subs	r4, r0, #0
   1c788:	blt	1c834 <__assert_fail@plt+0xa148>
   1c78c:	add	r1, sp, #112	; 0x70
   1c790:	bl	378f4 <__assert_fail@plt+0x25208>
   1c794:	cmp	r0, #0
   1c798:	beq	1c7bc <__assert_fail@plt+0xa0d0>
   1c79c:	bl	12404 <__errno_location@plt>
   1c7a0:	ldr	r0, [r0]
   1c7a4:	ldr	r1, [sp, #4]
   1c7a8:	bl	182c4 <__assert_fail@plt+0x5bd8>
   1c7ac:	mov	r1, #0
   1c7b0:	b	1c77c <__assert_fail@plt+0xa090>
   1c7b4:	mov	r1, #32768	; 0x8000
   1c7b8:	b	1c77c <__assert_fail@plt+0xa090>
   1c7bc:	add	r1, sp, #8
   1c7c0:	ldr	r0, [sp, #4]
   1c7c4:	ldr	r3, [r7, #52]	; 0x34
   1c7c8:	blx	r3
   1c7cc:	cmp	r0, #0
   1c7d0:	bne	1c79c <__assert_fail@plt+0xa0b0>
   1c7d4:	ldr	r3, [r7, #48]	; 0x30
   1c7d8:	cmp	r3, #0
   1c7dc:	bne	1c870 <__assert_fail@plt+0xa184>
   1c7e0:	ldrb	r3, [r7, #56]	; 0x38
   1c7e4:	cmp	r3, #0
   1c7e8:	bne	1c870 <__assert_fail@plt+0xa184>
   1c7ec:	ldr	r3, [sp, #24]
   1c7f0:	and	r3, r3, #61440	; 0xf000
   1c7f4:	cmp	r3, #40960	; 0xa000
   1c7f8:	bne	1c80c <__assert_fail@plt+0xa120>
   1c7fc:	mov	r0, r4
   1c800:	mvn	r4, #0
   1c804:	bl	126a4 <close@plt>
   1c808:	b	1c834 <__assert_fail@plt+0xa148>
   1c80c:	ldrd	r0, [sp, #8]
   1c810:	ldrd	r2, [sp, #112]	; 0x70
   1c814:	cmp	r1, r3
   1c818:	cmpeq	r0, r2
   1c81c:	bne	1c7fc <__assert_fail@plt+0xa110>
   1c820:	ldrd	r0, [sp, #104]	; 0x68
   1c824:	ldrd	r2, [sp, #208]	; 0xd0
   1c828:	cmp	r1, r3
   1c82c:	cmpeq	r0, r2
   1c830:	bne	1c7fc <__assert_fail@plt+0xa110>
   1c834:	mov	r0, r5
   1c838:	ldr	r1, [sp, #4]
   1c83c:	bl	173ac <__assert_fail@plt+0x4cc0>
   1c840:	ldrd	r2, [sp, #104]	; 0x68
   1c844:	strd	r2, [r0, #40]	; 0x28
   1c848:	ldrd	r2, [sp, #8]
   1c84c:	str	r4, [r0, #56]	; 0x38
   1c850:	strd	r2, [r0, #48]	; 0x30
   1c854:	mov	r3, #1
   1c858:	strh	r3, [r0, #18]
   1c85c:	ldr	r3, [pc, #44]	; 1c890 <__assert_fail@plt+0xa1a4>
   1c860:	str	r3, [r0, #28]
   1c864:	mov	r0, r6
   1c868:	add	sp, sp, #220	; 0xdc
   1c86c:	pop	{r4, r5, r6, r7, pc}
   1c870:	mov	r2, #104	; 0x68
   1c874:	add	r1, sp, #112	; 0x70
   1c878:	add	r0, sp, #8
   1c87c:	bl	120f8 <memcpy@plt>
   1c880:	b	1c834 <__assert_fail@plt+0xa148>
   1c884:	mvn	r4, #1
   1c888:	b	1c834 <__assert_fail@plt+0xa148>
   1c88c:	andeq	lr, r4, r4, lsl #29
   1c890:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c894:	push	{r0, r1, r2, r4, r5, lr}
   1c898:	mov	r4, r1
   1c89c:	mov	r5, r2
   1c8a0:	mov	r1, r5
   1c8a4:	add	r2, sp, #4
   1c8a8:	mov	r0, r4
   1c8ac:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c8b0:	cmp	r0, #0
   1c8b4:	beq	1c8d4 <__assert_fail@plt+0xa1e8>
   1c8b8:	ldr	r0, [sp, #4]
   1c8bc:	bl	1f0e4 <__assert_fail@plt+0xc9f8>
   1c8c0:	ldr	r3, [pc, #20]	; 1c8dc <__assert_fail@plt+0xa1f0>
   1c8c4:	mov	r1, r5
   1c8c8:	str	r0, [r3, #60]	; 0x3c
   1c8cc:	mov	r0, r4
   1c8d0:	bl	1b110 <__assert_fail@plt+0x8a24>
   1c8d4:	add	sp, sp, #12
   1c8d8:	pop	{r4, r5, pc}
   1c8dc:	andeq	lr, r4, r4, lsl #29
   1c8e0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c8e4:	mov	r4, r2
   1c8e8:	add	r2, sp, #12
   1c8ec:	mov	r7, r3
   1c8f0:	bl	1b99c <__assert_fail@plt+0x92b0>
   1c8f4:	subs	r8, r0, #0
   1c8f8:	beq	1c9a8 <__assert_fail@plt+0xa2bc>
   1c8fc:	ldr	r1, [pc, #176]	; 1c9b4 <__assert_fail@plt+0xa2c8>
   1c900:	mov	r0, r4
   1c904:	mov	r5, #0
   1c908:	ldr	r2, [sp, #12]
   1c90c:	bl	17374 <__assert_fail@plt+0x4c88>
   1c910:	mov	r6, r0
   1c914:	mov	r0, #32
   1c918:	strh	r5, [r6, #18]
   1c91c:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1c920:	mov	r4, r0
   1c924:	mov	r0, #100	; 0x64
   1c928:	str	r4, [r6, #40]	; 0x28
   1c92c:	str	r0, [r4, #4]
   1c930:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1c934:	str	r0, [r4]
   1c938:	mov	r0, r7
   1c93c:	str	r5, [r4, #16]
   1c940:	bl	352c8 <__assert_fail@plt+0x22bdc>
   1c944:	str	r7, [r4, #12]
   1c948:	ldr	r7, [sp, #12]
   1c94c:	str	r5, [r4, #20]
   1c950:	mov	r0, r7
   1c954:	bl	123bc <strlen@plt>
   1c958:	mov	r1, r0
   1c95c:	mov	r2, r4
   1c960:	mov	r0, r7
   1c964:	bl	3525c <__assert_fail@plt+0x22b70>
   1c968:	subs	r4, r0, #0
   1c96c:	beq	1c998 <__assert_fail@plt+0xa2ac>
   1c970:	mov	r2, #5
   1c974:	ldr	r1, [pc, #60]	; 1c9b8 <__assert_fail@plt+0xa2cc>
   1c978:	mov	r0, r5
   1c97c:	bl	1217c <dcgettext@plt>
   1c980:	mov	r2, r0
   1c984:	mov	r1, r5
   1c988:	str	r4, [sp]
   1c98c:	mov	r0, #1
   1c990:	ldr	r3, [sp, #12]
   1c994:	bl	122c0 <error@plt>
   1c998:	mov	r1, #1
   1c99c:	ldr	r0, [sp, #12]
   1c9a0:	bl	1a390 <__assert_fail@plt+0x7ca4>
   1c9a4:	vstr	s0, [r6, #28]
   1c9a8:	mov	r0, r8
   1c9ac:	add	sp, sp, #16
   1c9b0:	pop	{r4, r5, r6, r7, r8, pc}
   1c9b4:	andeq	r4, r1, ip, ror #10
   1c9b8:	andeq	sl, r3, r4, asr #30
   1c9bc:	ldr	r3, [pc, #20]	; 1c9d8 <__assert_fail@plt+0xa2ec>
   1c9c0:	mov	ip, r1
   1c9c4:	mov	r1, r2
   1c9c8:	mov	r2, r0
   1c9cc:	mov	r0, ip
   1c9d0:	ldr	r3, [r3, #60]	; 0x3c
   1c9d4:	b	1c8e0 <__assert_fail@plt+0xa1f4>
   1c9d8:	andeq	lr, r4, r4, lsl #29
   1c9dc:	ldr	r3, [pc, #24]	; 1c9fc <__assert_fail@plt+0xa310>
   1c9e0:	mov	ip, r1
   1c9e4:	mov	r1, r2
   1c9e8:	mov	r2, r0
   1c9ec:	mov	r0, ip
   1c9f0:	ldr	r3, [r3, #60]	; 0x3c
   1c9f4:	orr	r3, r3, #4194304	; 0x400000
   1c9f8:	b	1c8e0 <__assert_fail@plt+0xa1f4>
   1c9fc:	andeq	lr, r4, r4, lsl #29
   1ca00:	push	{r0, r1, r4, r5, r6, lr}
   1ca04:	mov	r4, r0
   1ca08:	mov	r0, r1
   1ca0c:	mov	r1, r2
   1ca10:	add	r2, sp, #4
   1ca14:	bl	1b99c <__assert_fail@plt+0x92b0>
   1ca18:	subs	r6, r0, #0
   1ca1c:	beq	1ca54 <__assert_fail@plt+0xa368>
   1ca20:	ldr	r5, [sp, #4]
   1ca24:	mov	r0, r4
   1ca28:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1ca2c:	mov	r4, r0
   1ca30:	add	r1, r0, #40	; 0x28
   1ca34:	cmp	r5, #0
   1ca38:	movne	r0, r5
   1ca3c:	ldreq	r0, [pc, #28]	; 1ca60 <__assert_fail@plt+0xa374>
   1ca40:	bl	1a820 <__assert_fail@plt+0x8134>
   1ca44:	movw	r3, #257	; 0x101
   1ca48:	strh	r3, [r4, #16]
   1ca4c:	mov	r3, #1065353216	; 0x3f800000
   1ca50:	str	r3, [r4, #28]
   1ca54:	mov	r0, r6
   1ca58:	add	sp, sp, #8
   1ca5c:	pop	{r4, r5, r6, pc}
   1ca60:	andeq	sl, r3, r0, asr #11
   1ca64:	push	{r4, r5, r6, r7, lr}
   1ca68:	mov	r5, r1
   1ca6c:	sub	sp, sp, #28
   1ca70:	mov	r1, r2
   1ca74:	mov	r7, r0
   1ca78:	mov	r4, r2
   1ca7c:	mov	r0, r5
   1ca80:	ldr	r6, [r2]
   1ca84:	mov	r2, sp
   1ca88:	bl	1b99c <__assert_fail@plt+0x92b0>
   1ca8c:	eor	r0, r0, #1
   1ca90:	cmp	r5, #0
   1ca94:	orreq	r0, r0, #1
   1ca98:	tst	r0, #255	; 0xff
   1ca9c:	bne	1cae0 <__assert_fail@plt+0xa3f4>
   1caa0:	ldr	r3, [r4]
   1caa4:	ldr	r5, [r5, r3, lsl #2]
   1caa8:	cmp	r5, #0
   1caac:	beq	1cae0 <__assert_fail@plt+0xa3f4>
   1cab0:	add	r3, r3, #1
   1cab4:	add	r1, sp, #4
   1cab8:	ldr	r0, [sp]
   1cabc:	str	r3, [r4]
   1cac0:	bl	1a820 <__assert_fail@plt+0x8134>
   1cac4:	mov	r2, r5
   1cac8:	mov	r1, r7
   1cacc:	ldr	r6, [r4]
   1cad0:	add	r0, sp, #4
   1cad4:	bl	19a48 <__assert_fail@plt+0x735c>
   1cad8:	cmp	r0, #0
   1cadc:	bne	1cae8 <__assert_fail@plt+0xa3fc>
   1cae0:	mov	r0, #0
   1cae4:	str	r6, [r4]
   1cae8:	add	sp, sp, #28
   1caec:	pop	{r4, r5, r6, r7, pc}
   1caf0:	push	{r0, r1, r2, r4, r5, lr}
   1caf4:	mov	r4, r0
   1caf8:	mov	r0, r1
   1cafc:	mov	r1, r2
   1cb00:	add	r2, sp, #4
   1cb04:	bl	1b99c <__assert_fail@plt+0x92b0>
   1cb08:	subs	r5, r0, #0
   1cb0c:	beq	1cb3c <__assert_fail@plt+0xa450>
   1cb10:	mov	r0, r4
   1cb14:	ldr	r1, [sp, #4]
   1cb18:	bl	173ac <__assert_fail@plt+0x4cc0>
   1cb1c:	mov	r4, r0
   1cb20:	add	r1, r0, #40	; 0x28
   1cb24:	ldr	r0, [sp, #4]
   1cb28:	bl	1a820 <__assert_fail@plt+0x8134>
   1cb2c:	movw	r3, #257	; 0x101
   1cb30:	str	r3, [r4, #16]
   1cb34:	mov	r3, #1065353216	; 0x3f800000
   1cb38:	str	r3, [r4, #28]
   1cb3c:	mov	r0, r5
   1cb40:	add	sp, sp, #12
   1cb44:	pop	{r4, r5, pc}
   1cb48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb4c:	sub	sp, sp, #28
   1cb50:	mov	sl, r0
   1cb54:	mov	r0, r1
   1cb58:	mov	r1, r2
   1cb5c:	add	r2, sp, #12
   1cb60:	bl	1b99c <__assert_fail@plt+0x92b0>
   1cb64:	subs	r8, r0, #0
   1cb68:	beq	1ccd4 <__assert_fail@plt+0xa5e8>
   1cb6c:	ldr	r0, [sp, #12]
   1cb70:	ldrb	r3, [r0]
   1cb74:	cmp	r3, #45	; 0x2d
   1cb78:	beq	1cbfc <__assert_fail@plt+0xa510>
   1cb7c:	cmp	r3, #47	; 0x2f
   1cb80:	beq	1cc0c <__assert_fail@plt+0xa520>
   1cb84:	ldr	r6, [pc, #340]	; 1cce0 <__assert_fail@plt+0xa5f4>
   1cb88:	mov	r5, #2
   1cb8c:	mov	r3, #0
   1cb90:	add	r0, r0, r3
   1cb94:	bl	22230 <__assert_fail@plt+0xfb44>
   1cb98:	subs	r9, r0, #0
   1cb9c:	beq	1cbc0 <__assert_fail@plt+0xa4d4>
   1cba0:	ldr	r3, [sp, #12]
   1cba4:	ldrb	r2, [r3]
   1cba8:	cmp	r2, #43	; 0x2b
   1cbac:	bne	1cc1c <__assert_fail@plt+0xa530>
   1cbb0:	ldrb	r3, [r3, #1]
   1cbb4:	sub	r3, r3, #48	; 0x30
   1cbb8:	cmp	r3, #7
   1cbbc:	bhi	1cc1c <__assert_fail@plt+0xa530>
   1cbc0:	mov	r2, #5
   1cbc4:	ldr	r1, [pc, #280]	; 1cce4 <__assert_fail@plt+0xa5f8>
   1cbc8:	mov	r0, #0
   1cbcc:	bl	1217c <dcgettext@plt>
   1cbd0:	ldr	r3, [pc, #272]	; 1cce8 <__assert_fail@plt+0xa5fc>
   1cbd4:	mov	r4, r0
   1cbd8:	mov	r0, #0
   1cbdc:	ldr	r2, [sp, #12]
   1cbe0:	ldr	r1, [r3, #72]	; 0x48
   1cbe4:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1cbe8:	mov	r3, r0
   1cbec:	mov	r2, r4
   1cbf0:	mov	r1, #0
   1cbf4:	mov	r0, #1
   1cbf8:	bl	122c0 <error@plt>
   1cbfc:	mov	r5, #0
   1cc00:	mov	r3, #1
   1cc04:	ldr	r6, [pc, #224]	; 1ccec <__assert_fail@plt+0xa600>
   1cc08:	b	1cb90 <__assert_fail@plt+0xa4a4>
   1cc0c:	mov	r5, #1
   1cc10:	ldr	r6, [pc, #216]	; 1ccf0 <__assert_fail@plt+0xa604>
   1cc14:	mov	r3, r5
   1cc18:	b	1cb90 <__assert_fail@plt+0xa4a4>
   1cc1c:	mov	r4, #0
   1cc20:	mov	r3, r9
   1cc24:	mov	r2, r4
   1cc28:	mov	r1, r4
   1cc2c:	mov	r0, r4
   1cc30:	str	r4, [sp]
   1cc34:	bl	22570 <__assert_fail@plt+0xfe84>
   1cc38:	mov	r7, r0
   1cc3c:	mov	r3, r9
   1cc40:	str	r4, [sp]
   1cc44:	mov	r2, r4
   1cc48:	mov	r1, #1
   1cc4c:	mov	r0, r4
   1cc50:	str	r7, [sp, #16]
   1cc54:	bl	22570 <__assert_fail@plt+0xfe84>
   1cc58:	mov	fp, r0
   1cc5c:	mov	r0, r9
   1cc60:	orr	r7, r7, fp
   1cc64:	str	fp, [sp, #20]
   1cc68:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1cc6c:	ldr	r3, [sp, #12]
   1cc70:	ldrb	r3, [r3]
   1cc74:	cmp	r3, #47	; 0x2f
   1cc78:	cmpeq	r7, r4
   1cc7c:	bne	1ccac <__assert_fail@plt+0xa5c0>
   1cc80:	mov	r2, #5
   1cc84:	ldr	r1, [pc, #104]	; 1ccf4 <__assert_fail@plt+0xa608>
   1cc88:	mov	r0, r4
   1cc8c:	bl	1217c <dcgettext@plt>
   1cc90:	mov	r2, r0
   1cc94:	mov	r1, r4
   1cc98:	ldr	r3, [sp, #12]
   1cc9c:	mov	r0, r4
   1cca0:	mov	r5, r4
   1cca4:	ldr	r6, [pc, #76]	; 1ccf8 <__assert_fail@plt+0xa60c>
   1cca8:	bl	122c0 <error@plt>
   1ccac:	mov	r0, sl
   1ccb0:	ldr	r1, [sp, #12]
   1ccb4:	bl	173ac <__assert_fail@plt+0x4cc0>
   1ccb8:	add	r2, sp, #16
   1ccbc:	mov	r3, r0
   1ccc0:	ldm	r2!, {r0, r1}
   1ccc4:	str	r6, [r3, #28]
   1ccc8:	str	r5, [r3, #40]	; 0x28
   1cccc:	str	r0, [r3, #44]	; 0x2c
   1ccd0:	str	r1, [r3, #48]	; 0x30
   1ccd4:	mov	r0, r8
   1ccd8:	add	sp, sp, #28
   1ccdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cce0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cce4:	andeq	sl, r3, r2, ror pc
   1cce8:	andeq	lr, r4, r4, lsl #29
   1ccec:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1ccf0:			; <UNDEFINED> instruction: 0x3e99999a
   1ccf4:	andeq	sl, r3, r2, lsl #31
   1ccf8:	svccc	0x007fa440
   1ccfc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cd00:	mov	r7, r0
   1cd04:	mov	r4, r2
   1cd08:	mov	r0, r1
   1cd0c:	mov	r1, r2
   1cd10:	ldr	r6, [r2]
   1cd14:	add	r2, sp, #4
   1cd18:	bl	1b99c <__assert_fail@plt+0x92b0>
   1cd1c:	subs	r5, r0, #0
   1cd20:	beq	1cd6c <__assert_fail@plt+0xa680>
   1cd24:	bl	1b23c <__assert_fail@plt+0x8b50>
   1cd28:	ldr	r1, [pc, #72]	; 1cd78 <__assert_fail@plt+0xa68c>
   1cd2c:	ldr	r0, [pc, #72]	; 1cd7c <__assert_fail@plt+0xa690>
   1cd30:	ldr	r2, [sp, #4]
   1cd34:	bl	1b454 <__assert_fail@plt+0x8d68>
   1cd38:	subs	r5, r0, #0
   1cd3c:	streq	r6, [r4]
   1cd40:	beq	1cd6c <__assert_fail@plt+0xa680>
   1cd44:	mov	r0, r7
   1cd48:	ldr	r1, [sp, #4]
   1cd4c:	bl	173ac <__assert_fail@plt+0x4cc0>
   1cd50:	mov	r4, r0
   1cd54:	ldr	r0, [sp, #4]
   1cd58:	mov	r1, #0
   1cd5c:	strh	r1, [r4, #18]
   1cd60:	str	r0, [r4, #40]	; 0x28
   1cd64:	bl	1a390 <__assert_fail@plt+0x7ca4>
   1cd68:	vstr	s0, [r4, #28]
   1cd6c:	mov	r0, r5
   1cd70:	add	sp, sp, #12
   1cd74:	pop	{r4, r5, r6, r7, pc}
   1cd78:	andeq	fp, r3, r4, rrx
   1cd7c:	andeq	fp, r3, pc, rrx
   1cd80:	push	{r0, r1, r4, r5, r6, lr}
   1cd84:	mov	r5, r1
   1cd88:	mov	r6, r2
   1cd8c:	mov	r4, r0
   1cd90:	bl	1b23c <__assert_fail@plt+0x8b50>
   1cd94:	add	r2, sp, #4
   1cd98:	mov	r1, r6
   1cd9c:	mov	r0, r5
   1cda0:	bl	1b99c <__assert_fail@plt+0x92b0>
   1cda4:	cmp	r0, #0
   1cda8:	bne	1cdbc <__assert_fail@plt+0xa6d0>
   1cdac:	mov	r5, #0
   1cdb0:	mov	r0, r5
   1cdb4:	add	sp, sp, #8
   1cdb8:	pop	{r4, r5, r6, pc}
   1cdbc:	ldr	r1, [pc, #60]	; 1ce00 <__assert_fail@plt+0xa714>
   1cdc0:	ldr	r0, [pc, #60]	; 1ce04 <__assert_fail@plt+0xa718>
   1cdc4:	ldr	r2, [sp, #4]
   1cdc8:	bl	1b454 <__assert_fail@plt+0x8d68>
   1cdcc:	subs	r5, r0, #0
   1cdd0:	beq	1cdac <__assert_fail@plt+0xa6c0>
   1cdd4:	mov	r0, r4
   1cdd8:	ldr	r1, [sp, #4]
   1cddc:	bl	173ac <__assert_fail@plt+0x4cc0>
   1cde0:	mov	r4, r0
   1cde4:	ldr	r0, [sp, #4]
   1cde8:	mov	r1, #0
   1cdec:	strh	r1, [r4, #18]
   1cdf0:	str	r0, [r4, #40]	; 0x28
   1cdf4:	bl	1a390 <__assert_fail@plt+0x7ca4>
   1cdf8:	vstr	s0, [r4, #28]
   1cdfc:	b	1cdb0 <__assert_fail@plt+0xa6c4>
   1ce00:	andeq	fp, r3, r5, ror r0
   1ce04:	andeq	fp, r3, r1, lsl #1
   1ce08:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ce0c:	sub	sp, sp, #20
   1ce10:	mov	r9, r0
   1ce14:	mov	r0, r1
   1ce18:	mov	r1, r2
   1ce1c:	add	r2, sp, #12
   1ce20:	bl	1b99c <__assert_fail@plt+0x92b0>
   1ce24:	subs	r8, r0, #0
   1ce28:	beq	1ceac <__assert_fail@plt+0xa7c0>
   1ce2c:	ldr	r0, [sp, #12]
   1ce30:	bl	126d4 <getgrnam@plt>
   1ce34:	mov	r4, r0
   1ce38:	bl	11f90 <endgrent@plt>
   1ce3c:	cmp	r4, #0
   1ce40:	ldrne	r4, [r4, #8]
   1ce44:	bne	1ce80 <__assert_fail@plt+0xa794>
   1ce48:	ldr	r7, [sp, #12]
   1ce4c:	ldr	r1, [pc, #280]	; 1cf6c <__assert_fail@plt+0xa880>
   1ce50:	ldr	r6, [pc, #280]	; 1cf70 <__assert_fail@plt+0xa884>
   1ce54:	mov	r0, r7
   1ce58:	bl	126e0 <strspn@plt>
   1ce5c:	subs	r5, r0, #0
   1ce60:	beq	1cf0c <__assert_fail@plt+0xa820>
   1ce64:	ldrb	r3, [r7, r5]
   1ce68:	cmp	r3, #0
   1ce6c:	bne	1ceb8 <__assert_fail@plt+0xa7cc>
   1ce70:	mov	r0, r7
   1ce74:	ldr	r1, [r6, #72]	; 0x48
   1ce78:	bl	1f2bc <__assert_fail@plt+0xcbd0>
   1ce7c:	mov	r4, r0
   1ce80:	mov	r0, r9
   1ce84:	ldr	r1, [sp, #12]
   1ce88:	bl	173ac <__assert_fail@plt+0x4cc0>
   1ce8c:	ldrd	r2, [r0, #48]	; 0x30
   1ce90:	str	r4, [r0, #40]	; 0x28
   1ce94:	vldr	s15, [pc, #200]	; 1cf64 <__assert_fail@plt+0xa878>
   1ce98:	vldr	s14, [pc, #200]	; 1cf68 <__assert_fail@plt+0xa87c>
   1ce9c:	cmp	r3, #0
   1cea0:	cmpeq	r2, #100	; 0x64
   1cea4:	vmovcs.f32	s15, s14
   1cea8:	vstr	s15, [r0, #28]
   1ceac:	mov	r0, r8
   1ceb0:	add	sp, sp, #20
   1ceb4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ceb8:	mov	r2, #5
   1cebc:	ldr	r1, [pc, #176]	; 1cf74 <__assert_fail@plt+0xa888>
   1cec0:	mov	r0, r4
   1cec4:	bl	1217c <dcgettext@plt>
   1cec8:	mov	r7, r0
   1cecc:	mov	r0, r4
   1ced0:	ldr	r2, [sp, #12]
   1ced4:	ldr	r1, [r6, #72]	; 0x48
   1ced8:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1cedc:	ldr	r2, [sp, #12]
   1cee0:	mov	r8, r0
   1cee4:	mov	r0, #1
   1cee8:	ldr	r1, [r6, #72]	; 0x48
   1ceec:	add	r2, r2, r5
   1cef0:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1cef4:	mov	r3, r8
   1cef8:	mov	r2, r7
   1cefc:	str	r0, [sp]
   1cf00:	mov	r1, r4
   1cf04:	mov	r0, #1
   1cf08:	bl	122c0 <error@plt>
   1cf0c:	ldrb	r4, [r7]
   1cf10:	mov	r2, #5
   1cf14:	cmp	r4, #0
   1cf18:	beq	1cf4c <__assert_fail@plt+0xa860>
   1cf1c:	ldr	r1, [pc, #84]	; 1cf78 <__assert_fail@plt+0xa88c>
   1cf20:	bl	1217c <dcgettext@plt>
   1cf24:	mov	r4, r0
   1cf28:	mov	r0, r5
   1cf2c:	ldr	r2, [sp, #12]
   1cf30:	ldr	r1, [r6, #72]	; 0x48
   1cf34:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1cf38:	mov	r3, r0
   1cf3c:	mov	r2, r4
   1cf40:	mov	r1, r5
   1cf44:	mov	r0, #1
   1cf48:	bl	122c0 <error@plt>
   1cf4c:	ldr	r1, [pc, #40]	; 1cf7c <__assert_fail@plt+0xa890>
   1cf50:	bl	1217c <dcgettext@plt>
   1cf54:	mov	r2, r0
   1cf58:	mov	r1, r4
   1cf5c:	mov	r0, #1
   1cf60:	bl	122c0 <error@plt>
   1cf64:	svccc	0x007d70a4
   1cf68:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cf6c:	andeq	sl, r3, sl, asr #27
   1cf70:	andeq	lr, r4, r4, lsl #29
   1cf74:	andeq	fp, r3, r8, lsl #1
   1cf78:	andeq	fp, r3, r5, lsl #2
   1cf7c:	andeq	fp, r3, sp, lsr #2
   1cf80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf84:	mov	r7, r2
   1cf88:	sub	sp, sp, #52	; 0x34
   1cf8c:	mov	r4, r1
   1cf90:	mov	r2, #5
   1cf94:	mov	r9, r0
   1cf98:	mov	r0, #0
   1cf9c:	ldr	r1, [pc, #436]	; 1d158 <__assert_fail@plt+0xaa6c>
   1cfa0:	bl	1217c <dcgettext@plt>
   1cfa4:	mov	fp, r0
   1cfa8:	add	r2, sp, #16
   1cfac:	ldr	sl, [r7]
   1cfb0:	mov	r1, r7
   1cfb4:	mov	r0, r4
   1cfb8:	bl	1b99c <__assert_fail@plt+0x92b0>
   1cfbc:	subs	r8, r0, #0
   1cfc0:	beq	1d128 <__assert_fail@plt+0xaa3c>
   1cfc4:	ldr	r5, [pc, #400]	; 1d15c <__assert_fail@plt+0xaa70>
   1cfc8:	add	r8, sp, #24
   1cfcc:	ldr	r6, [sp, #16]
   1cfd0:	add	r3, r5, #28
   1cfd4:	ldm	r3, {r0, r1}
   1cfd8:	mov	r4, r0
   1cfdc:	stm	r8, {r0, r1}
   1cfe0:	add	r1, sp, #12
   1cfe4:	add	r0, sp, #16
   1cfe8:	bl	1a128 <__assert_fail@plt+0x7a3c>
   1cfec:	cmp	r0, #0
   1cff0:	beq	1d008 <__assert_fail@plt+0xa91c>
   1cff4:	ldr	r3, [sp, #12]
   1cff8:	cmp	r3, #1
   1cffc:	addeq	r4, r4, #86016	; 0x15000
   1d000:	addeq	r4, r4, #380	; 0x17c
   1d004:	addeq	r4, r4, #3
   1d008:	vldr	d0, [pc, #320]	; 1d150 <__assert_fail@plt+0xaa64>
   1d00c:	mov	r0, r6
   1d010:	str	r4, [sp, #24]
   1d014:	add	r4, sp, #32
   1d018:	mov	r1, r4
   1d01c:	str	fp, [sp]
   1d020:	ldm	r8, {r2, r3}
   1d024:	str	r6, [sp, #16]
   1d028:	bl	1a410 <__assert_fail@plt+0x7d24>
   1d02c:	subs	r8, r0, #0
   1d030:	streq	sl, [r7]
   1d034:	beq	1d128 <__assert_fail@plt+0xaa3c>
   1d038:	mov	r1, r6
   1d03c:	mov	r0, r9
   1d040:	bl	173ac <__assert_fail@plt+0x4cc0>
   1d044:	add	ip, r0, #40	; 0x28
   1d048:	mov	r6, r0
   1d04c:	ldm	r4, {r0, r1, r2, r3}
   1d050:	stm	ip, {r0, r1, r2, r3}
   1d054:	ldr	r0, [sp, #40]	; 0x28
   1d058:	bl	1b504 <__assert_fail@plt+0x8e18>
   1d05c:	ldr	r3, [r5, #44]	; 0x2c
   1d060:	vstr	s0, [r6, #28]
   1d064:	tst	r3, #1
   1d068:	beq	1d128 <__assert_fail@plt+0xaa3c>
   1d06c:	ldr	r5, [pc, #236]	; 1d160 <__assert_fail@plt+0xaa74>
   1d070:	ldr	r1, [pc, #236]	; 1d164 <__assert_fail@plt+0xaa78>
   1d074:	ldr	r2, [r6, #4]
   1d078:	ldr	r0, [r5]
   1d07c:	bl	123f8 <fprintf@plt>
   1d080:	ldr	r3, [sp, #36]	; 0x24
   1d084:	ldr	r0, [r5]
   1d088:	cmp	r3, #0
   1d08c:	beq	1d134 <__assert_fail@plt+0xaa48>
   1d090:	cmp	r3, #1
   1d094:	beq	1d140 <__assert_fail@plt+0xaa54>
   1d098:	cmp	r3, #2
   1d09c:	ldr	r1, [pc, #196]	; 1d168 <__assert_fail@plt+0xaa7c>
   1d0a0:	ldr	r3, [pc, #196]	; 1d16c <__assert_fail@plt+0xaa80>
   1d0a4:	ldr	r2, [pc, #196]	; 1d170 <__assert_fail@plt+0xaa84>
   1d0a8:	movne	r2, r3
   1d0ac:	ldr	r3, [pc, #192]	; 1d174 <__assert_fail@plt+0xaa88>
   1d0b0:	movne	r3, r1
   1d0b4:	ldr	r1, [pc, #188]	; 1d178 <__assert_fail@plt+0xaa8c>
   1d0b8:	bl	123f8 <fprintf@plt>
   1d0bc:	ldr	r4, [r6, #48]	; 0x30
   1d0c0:	add	r0, sp, #20
   1d0c4:	ldr	r7, [r5]
   1d0c8:	str	r4, [sp, #20]
   1d0cc:	bl	12170 <ctime@plt>
   1d0d0:	asr	r3, r4, #31
   1d0d4:	mov	r2, r4
   1d0d8:	ldr	r1, [pc, #156]	; 1d17c <__assert_fail@plt+0xaa90>
   1d0dc:	str	r0, [sp]
   1d0e0:	mov	r0, r7
   1d0e4:	bl	123f8 <fprintf@plt>
   1d0e8:	ldr	r3, [sp, #36]	; 0x24
   1d0ec:	cmp	r3, #2
   1d0f0:	bne	1d128 <__assert_fail@plt+0xaa3c>
   1d0f4:	ldr	r4, [r6, #48]	; 0x30
   1d0f8:	add	r0, sp, #20
   1d0fc:	ldr	r5, [r5]
   1d100:	add	r4, r4, #86016	; 0x15000
   1d104:	add	r4, r4, #384	; 0x180
   1d108:	str	r4, [sp, #20]
   1d10c:	bl	12170 <ctime@plt>
   1d110:	mov	r2, r4
   1d114:	asr	r3, r4, #31
   1d118:	ldr	r1, [pc, #96]	; 1d180 <__assert_fail@plt+0xaa94>
   1d11c:	str	r0, [sp]
   1d120:	mov	r0, r5
   1d124:	bl	123f8 <fprintf@plt>
   1d128:	mov	r0, r8
   1d12c:	add	sp, sp, #52	; 0x34
   1d130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d134:	ldr	r2, [pc, #72]	; 1d184 <__assert_fail@plt+0xaa98>
   1d138:	ldr	r3, [pc, #72]	; 1d188 <__assert_fail@plt+0xaa9c>
   1d13c:	b	1d0b4 <__assert_fail@plt+0xa9c8>
   1d140:	ldr	r2, [pc, #68]	; 1d18c <__assert_fail@plt+0xaaa0>
   1d144:	ldr	r3, [pc, #68]	; 1d190 <__assert_fail@plt+0xaaa4>
   1d148:	b	1d0b4 <__assert_fail@plt+0xa9c8>
   1d14c:	nop	{0}
   1d150:	andeq	r0, r0, r0
   1d154:	rscsmi	r1, r5, r0, lsl #16
   1d158:	andeq	sl, r3, r1, ror #28
   1d15c:	andeq	lr, r4, r4, lsl #29
   1d160:	andeq	lr, r4, r0, ror #10
   1d164:	andeq	sl, r3, fp, lsl pc
   1d168:	andeq	sl, r3, r8, lsl pc
   1d16c:	andeq	sl, r3, r9, lsl pc
   1d170:	andeq	sl, r3, r9, lsl #30
   1d174:	andeq	fp, r3, r5, ror #2
   1d178:	andeq	sl, r3, r9, lsr #30
   1d17c:	andeq	fp, r3, ip, ror r1
   1d180:	andeq	fp, r3, r8, ror #2
   1d184:	andeq	sl, r3, r2, lsl pc
   1d188:	andeq	sl, r3, r5, lsl pc
   1d18c:	andeq	fp, r3, r3, lsl #19
   1d190:	andeq	sl, r3, pc, lsl #30
   1d194:	push	{r4, r5, r6, lr}
   1d198:	mov	r5, r1
   1d19c:	bl	173ac <__assert_fail@plt+0x4cc0>
   1d1a0:	cmp	r5, #0
   1d1a4:	mov	r4, r0
   1d1a8:	add	r1, r0, #40	; 0x28
   1d1ac:	movne	r0, r5
   1d1b0:	ldreq	r0, [pc, #24]	; 1d1d0 <__assert_fail@plt+0xaae4>
   1d1b4:	bl	1a820 <__assert_fail@plt+0x8134>
   1d1b8:	movw	r3, #257	; 0x101
   1d1bc:	mov	r0, #1
   1d1c0:	str	r3, [r4, #16]
   1d1c4:	mov	r3, #1065353216	; 0x3f800000
   1d1c8:	str	r3, [r4, #28]
   1d1cc:	pop	{r4, r5, r6, pc}
   1d1d0:	andeq	sl, r3, r0, asr #11
   1d1d4:	mov	r1, #0
   1d1d8:	b	1d194 <__assert_fail@plt+0xaaa8>
   1d1dc:	push	{r0, r1, r2, r4, r5, lr}
   1d1e0:	mov	r4, r2
   1d1e4:	mov	r5, r0
   1d1e8:	add	r2, sp, #4
   1d1ec:	mov	r0, r1
   1d1f0:	mov	r1, r4
   1d1f4:	bl	1b99c <__assert_fail@plt+0x92b0>
   1d1f8:	cmp	r0, #0
   1d1fc:	beq	1d21c <__assert_fail@plt+0xab30>
   1d200:	mov	r0, r5
   1d204:	ldr	r1, [sp, #4]
   1d208:	bl	1d194 <__assert_fail@plt+0xaaa8>
   1d20c:	cmp	r0, #0
   1d210:	ldreq	r3, [r4]
   1d214:	subeq	r3, r3, #1
   1d218:	streq	r3, [r4]
   1d21c:	add	sp, sp, #12
   1d220:	pop	{r4, r5, pc}
   1d224:	cmp	r1, #0
   1d228:	beq	1d284 <__assert_fail@plt+0xab98>
   1d22c:	push	{r4, r5, r6, r7, lr}
   1d230:	sub	sp, sp, #28
   1d234:	ldr	r6, [r2]
   1d238:	ldr	r4, [r1, r6, lsl #2]
   1d23c:	cmp	r4, #0
   1d240:	moveq	r0, r4
   1d244:	beq	1d27c <__assert_fail@plt+0xab90>
   1d248:	add	r3, r6, #1
   1d24c:	mov	r7, r0
   1d250:	ldr	r0, [pc, #52]	; 1d28c <__assert_fail@plt+0xaba0>
   1d254:	add	r1, sp, #4
   1d258:	mov	r5, r2
   1d25c:	str	r3, [r2]
   1d260:	bl	1a820 <__assert_fail@plt+0x8134>
   1d264:	mov	r2, r4
   1d268:	mov	r1, r7
   1d26c:	add	r0, sp, #4
   1d270:	bl	19a48 <__assert_fail@plt+0x735c>
   1d274:	cmp	r0, #0
   1d278:	streq	r6, [r5]
   1d27c:	add	sp, sp, #28
   1d280:	pop	{r4, r5, r6, r7, pc}
   1d284:	mov	r0, r1
   1d288:	bx	lr
   1d28c:	andeq	sl, r3, r0, asr #11
   1d290:	push	{r4, lr}
   1d294:	mov	r4, r0
   1d298:	mov	r3, #0
   1d29c:	ldr	r1, [pc, #96]	; 1d304 <__assert_fail@plt+0xac18>
   1d2a0:	ldr	r0, [pc, #96]	; 1d308 <__assert_fail@plt+0xac1c>
   1d2a4:	cmp	r4, #0
   1d2a8:	bne	1d2e4 <__assert_fail@plt+0xabf8>
   1d2ac:	cmp	r3, #3
   1d2b0:	popne	{r4, pc}
   1d2b4:	ldr	r3, [pc, #80]	; 1d30c <__assert_fail@plt+0xac20>
   1d2b8:	ldrb	r3, [r3, #1]
   1d2bc:	cmp	r3, #0
   1d2c0:	popne	{r4, pc}
   1d2c4:	mov	r2, #5
   1d2c8:	ldr	r1, [pc, #64]	; 1d310 <__assert_fail@plt+0xac24>
   1d2cc:	mov	r0, r4
   1d2d0:	bl	1217c <dcgettext@plt>
   1d2d4:	mov	r2, r0
   1d2d8:	mov	r1, r4
   1d2dc:	mov	r0, #1
   1d2e0:	bl	122c0 <error@plt>
   1d2e4:	ldr	r2, [r4]
   1d2e8:	cmp	r2, r1
   1d2ec:	orreq	r3, r3, #1
   1d2f0:	beq	1d2fc <__assert_fail@plt+0xac10>
   1d2f4:	cmp	r2, r0
   1d2f8:	orreq	r3, r3, #2
   1d2fc:	ldr	r4, [r4, #152]	; 0x98
   1d300:	b	1d2a4 <__assert_fail@plt+0xabb8>
   1d304:	andeq	r3, r1, r0, ror fp
   1d308:	andeq	r3, r1, r0, lsl #13
   1d30c:	andeq	lr, r4, r4, lsl #29
   1d310:	andeq	fp, r3, r4, lsl #3
   1d314:	cmp	r0, #1
   1d318:	ldr	r3, [pc, #112]	; 1d390 <__assert_fail@plt+0xaca4>
   1d31c:	beq	1d348 <__assert_fail@plt+0xac5c>
   1d320:	cmp	r0, #0
   1d324:	beq	1d360 <__assert_fail@plt+0xac74>
   1d328:	cmp	r0, #2
   1d32c:	beq	1d374 <__assert_fail@plt+0xac88>
   1d330:	ldr	r2, [r3, #44]	; 0x2c
   1d334:	str	r0, [r3, #48]	; 0x30
   1d338:	tst	r2, #2
   1d33c:	ldrne	r2, [pc, #80]	; 1d394 <__assert_fail@plt+0xaca8>
   1d340:	strne	r2, [r3, #52]	; 0x34
   1d344:	bx	lr
   1d348:	ldr	r2, [pc, #72]	; 1d398 <__assert_fail@plt+0xacac>
   1d34c:	strb	r0, [r3, #12]
   1d350:	str	r2, [r3, #52]	; 0x34
   1d354:	ldr	r2, [pc, #64]	; 1d39c <__assert_fail@plt+0xacb0>
   1d358:	str	r2, [r3, #64]	; 0x40
   1d35c:	b	1d330 <__assert_fail@plt+0xac44>
   1d360:	ldr	r2, [pc, #56]	; 1d3a0 <__assert_fail@plt+0xacb4>
   1d364:	str	r2, [r3, #52]	; 0x34
   1d368:	ldr	r2, [pc, #52]	; 1d3a4 <__assert_fail@plt+0xacb8>
   1d36c:	str	r2, [r3, #64]	; 0x40
   1d370:	b	1d330 <__assert_fail@plt+0xac44>
   1d374:	ldr	r2, [pc, #44]	; 1d3a8 <__assert_fail@plt+0xacbc>
   1d378:	str	r2, [r3, #52]	; 0x34
   1d37c:	ldr	r2, [pc, #40]	; 1d3ac <__assert_fail@plt+0xacc0>
   1d380:	str	r2, [r3, #64]	; 0x40
   1d384:	mov	r2, #1
   1d388:	strb	r2, [r3, #12]
   1d38c:	b	1d330 <__assert_fail@plt+0xac44>
   1d390:	andeq	lr, r4, r4, lsl #29
   1d394:	andeq	r7, r1, r4, lsl #17
   1d398:	andeq	r7, r1, r8, asr #15
   1d39c:	muleq	r1, r8, r0
   1d3a0:	andeq	r7, r1, r4, lsr r8
   1d3a4:	andeq	sl, r1, r4, ror r1
   1d3a8:	andeq	r7, r1, r0, asr #14
   1d3ac:	andeq	fp, r1, r8, asr #1
   1d3b0:	push	{r4, lr}
   1d3b4:	mov	r0, #1
   1d3b8:	mov	r4, r1
   1d3bc:	mov	r1, r2
   1d3c0:	bl	1d314 <__assert_fail@plt+0xac28>
   1d3c4:	mov	r0, r4
   1d3c8:	pop	{r4, lr}
   1d3cc:	b	1b110 <__assert_fail@plt+0x8a24>
   1d3d0:	ldr	r3, [pc, #8]	; 1d3e0 <__assert_fail@plt+0xacf4>
   1d3d4:	mov	r2, #0
   1d3d8:	str	r2, [r3, #8]
   1d3dc:	bx	lr
   1d3e0:	andeq	lr, r4, r8, ror #25
   1d3e4:	bx	lr
   1d3e8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3ec:	mov	r1, r0
   1d3f0:	mov	r4, r0
   1d3f4:	mov	r2, #6
   1d3f8:	ldr	r0, [pc, #276]	; 1d514 <__assert_fail@plt+0xae28>
   1d3fc:	bl	1268c <strncmp@plt>
   1d400:	cmp	r0, #0
   1d404:	bne	1d438 <__assert_fail@plt+0xad4c>
   1d408:	mov	r0, r4
   1d40c:	bl	123bc <strlen@plt>
   1d410:	cmp	r0, #8
   1d414:	bne	1d438 <__assert_fail@plt+0xad4c>
   1d418:	ldr	r3, [pc, #248]	; 1d518 <__assert_fail@plt+0xae2c>
   1d41c:	ldr	r5, [pc, #248]	; 1d51c <__assert_fail@plt+0xae30>
   1d420:	ldr	r2, [r3, #8]
   1d424:	cmp	r2, #0
   1d428:	streq	r4, [r3, #8]
   1d42c:	mov	r0, r5
   1d430:	add	sp, sp, #12
   1d434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d438:	ldrb	r3, [r4]
   1d43c:	mov	r7, #0
   1d440:	ldr	r6, [pc, #216]	; 1d520 <__assert_fail@plt+0xae34>
   1d444:	cmp	r3, #45	; 0x2d
   1d448:	addeq	sl, r4, #1
   1d44c:	movne	sl, r4
   1d450:	add	fp, r6, #40	; 0x28
   1d454:	lsl	r9, r7, #4
   1d458:	add	r8, r9, fp
   1d45c:	ldr	r5, [r8, #4]
   1d460:	cmp	r5, #0
   1d464:	beq	1d42c <__assert_fail@plt+0xad40>
   1d468:	mov	r1, sl
   1d46c:	mov	r0, r5
   1d470:	bl	11ffc <strcmp@plt>
   1d474:	subs	r2, r0, #0
   1d478:	bne	1d50c <__assert_fail@plt+0xae20>
   1d47c:	add	r6, r6, r9
   1d480:	mov	r5, r8
   1d484:	ldr	r3, [r6, #40]	; 0x28
   1d488:	cmp	r3, #2
   1d48c:	beq	1d42c <__assert_fail@plt+0xad40>
   1d490:	cmp	r3, #1
   1d494:	moveq	r5, r2
   1d498:	beq	1d42c <__assert_fail@plt+0xad40>
   1d49c:	ldr	r6, [pc, #116]	; 1d518 <__assert_fail@plt+0xae2c>
   1d4a0:	cmp	r3, #0
   1d4a4:	ldr	r2, [r6, #8]
   1d4a8:	bne	1d500 <__assert_fail@plt+0xae14>
   1d4ac:	cmp	r2, #0
   1d4b0:	beq	1d42c <__assert_fail@plt+0xad40>
   1d4b4:	ldr	r3, [pc, #104]	; 1d524 <__assert_fail@plt+0xae38>
   1d4b8:	ldrb	r7, [r3, #17]
   1d4bc:	cmp	r7, #0
   1d4c0:	bne	1d42c <__assert_fail@plt+0xad40>
   1d4c4:	ldrb	r3, [r3, #16]
   1d4c8:	cmp	r3, #0
   1d4cc:	beq	1d42c <__assert_fail@plt+0xad40>
   1d4d0:	mov	r2, #5
   1d4d4:	ldr	r1, [pc, #76]	; 1d528 <__assert_fail@plt+0xae3c>
   1d4d8:	bl	1217c <dcgettext@plt>
   1d4dc:	str	r4, [sp, #4]
   1d4e0:	mov	r2, r0
   1d4e4:	mov	r1, r7
   1d4e8:	ldr	r3, [r6, #8]
   1d4ec:	mov	r0, r7
   1d4f0:	str	r3, [sp]
   1d4f4:	mov	r3, r4
   1d4f8:	bl	122c0 <error@plt>
   1d4fc:	b	1d42c <__assert_fail@plt+0xad40>
   1d500:	cmp	r2, #0
   1d504:	streq	r4, [r6, #8]
   1d508:	b	1d42c <__assert_fail@plt+0xad40>
   1d50c:	add	r7, r7, #1
   1d510:	b	1d454 <__assert_fail@plt+0xad68>
   1d514:	andeq	sl, r3, r8, lsr sl
   1d518:	andeq	lr, r4, r8, ror #25
   1d51c:	andeq	sl, r3, r0, lsr #9
   1d520:	andeq	r9, r3, r8, ror #29
   1d524:	andeq	lr, r4, r4, lsl #29
   1d528:	andeq	fp, r3, r0, lsr r2
   1d52c:	push	{r4, lr}
   1d530:	ldr	r0, [pc, #28]	; 1d554 <__assert_fail@plt+0xae68>
   1d534:	bl	1d3e8 <__assert_fail@plt+0xacfc>
   1d538:	bl	173e4 <__assert_fail@plt+0x4cf8>
   1d53c:	mov	r3, #0
   1d540:	str	r3, [r0, #16]
   1d544:	mov	r3, #0
   1d548:	str	r3, [r0, #28]
   1d54c:	mov	r0, #1
   1d550:	pop	{r4, pc}
   1d554:	andeq	fp, r3, r6, lsr #6
   1d558:	b	1d52c <__assert_fail@plt+0xae40>
   1d55c:	push	{r4, r5, r6, lr}
   1d560:	sub	sp, sp, #112	; 0x70
   1d564:	mov	r6, r0
   1d568:	mov	r0, r1
   1d56c:	mov	r1, r2
   1d570:	add	r2, sp, #4
   1d574:	bl	1b99c <__assert_fail@plt+0x92b0>
   1d578:	subs	r4, r0, #0
   1d57c:	beq	1d5ec <__assert_fail@plt+0xaf00>
   1d580:	ldr	r5, [pc, #184]	; 1d640 <__assert_fail@plt+0xaf54>
   1d584:	ldrh	r3, [r5, #68]	; 0x44
   1d588:	cmp	r3, #1
   1d58c:	bhi	1d5f8 <__assert_fail@plt+0xaf0c>
   1d590:	mov	r0, r6
   1d594:	ldr	r1, [sp, #4]
   1d598:	bl	173ac <__assert_fail@plt+0x4cc0>
   1d59c:	ldr	r6, [sp, #4]
   1d5a0:	mov	r5, r0
   1d5a4:	add	r1, sp, #8
   1d5a8:	ldr	r0, [pc, #148]	; 1d644 <__assert_fail@plt+0xaf58>
   1d5ac:	str	r6, [r5, #40]	; 0x28
   1d5b0:	bl	378e4 <__assert_fail@plt+0x251f8>
   1d5b4:	cmp	r0, #0
   1d5b8:	vldrne	s15, [pc, #116]	; 1d634 <__assert_fail@plt+0xaf48>
   1d5bc:	bne	1d5e8 <__assert_fail@plt+0xaefc>
   1d5c0:	add	r0, sp, #8
   1d5c4:	ldr	r1, [pc, #120]	; 1d644 <__assert_fail@plt+0xaf58>
   1d5c8:	bl	19ebc <__assert_fail@plt+0x77d0>
   1d5cc:	mov	r1, r0
   1d5d0:	mov	r0, r6
   1d5d4:	bl	11ffc <strcmp@plt>
   1d5d8:	vldr	s15, [pc, #88]	; 1d638 <__assert_fail@plt+0xaf4c>
   1d5dc:	cmp	r0, #0
   1d5e0:	vldr	s14, [pc, #84]	; 1d63c <__assert_fail@plt+0xaf50>
   1d5e4:	vmovne.f32	s15, s14
   1d5e8:	vstr	s15, [r5, #28]
   1d5ec:	mov	r0, r4
   1d5f0:	add	sp, sp, #112	; 0x70
   1d5f4:	pop	{r4, r5, r6, pc}
   1d5f8:	ldr	r0, [sp, #4]
   1d5fc:	bl	19ff4 <__assert_fail@plt+0x7908>
   1d600:	cmp	r0, #0
   1d604:	bne	1d590 <__assert_fail@plt+0xaea4>
   1d608:	ldr	r3, [r5, #44]	; 0x2c
   1d60c:	tst	r3, #8
   1d610:	beq	1d628 <__assert_fail@plt+0xaf3c>
   1d614:	ldr	r3, [pc, #44]	; 1d648 <__assert_fail@plt+0xaf5c>
   1d618:	ldr	r1, [pc, #44]	; 1d64c <__assert_fail@plt+0xaf60>
   1d61c:	ldr	r2, [sp, #4]
   1d620:	ldr	r0, [r3]
   1d624:	bl	123f8 <fprintf@plt>
   1d628:	bl	1d52c <__assert_fail@plt+0xae40>
   1d62c:	mov	r4, r0
   1d630:	b	1d5ec <__assert_fail@plt+0xaf00>
   1d634:	svccc	0x00800000
   1d638:	svccc	0x00333333
   1d63c:			; <UNDEFINED> instruction: 0x3e99999a
   1d640:	andeq	lr, r4, r4, lsl #29
   1d644:	ldrdeq	r8, [r3], -r7
   1d648:	andeq	lr, r4, r0, ror #10
   1d64c:	andeq	fp, r3, ip, lsr #6
   1d650:	mov	r0, #0
   1d654:	bx	lr
   1d658:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d65c:	mov	r6, r0
   1d660:	mov	r5, r1
   1d664:	bl	122fc <getenv@plt>
   1d668:	subs	r3, r0, #0
   1d66c:	beq	1d6d4 <__assert_fail@plt+0xafe8>
   1d670:	mov	r4, #0
   1d674:	add	r3, sp, #12
   1d678:	mov	r2, #10
   1d67c:	add	r1, sp, #8
   1d680:	str	r4, [sp]
   1d684:	bl	277c4 <__assert_fail@plt+0x150d8>
   1d688:	cmp	r0, r4
   1d68c:	bne	1d6a8 <__assert_fail@plt+0xafbc>
   1d690:	ldr	r0, [sp, #12]
   1d694:	cmp	r0, r5
   1d698:	movcs	r0, #0
   1d69c:	movcc	r0, #1
   1d6a0:	add	sp, sp, #16
   1d6a4:	pop	{r4, r5, r6, pc}
   1d6a8:	bl	12404 <__errno_location@plt>
   1d6ac:	ldr	r5, [r0]
   1d6b0:	mov	r2, #5
   1d6b4:	mov	r0, r4
   1d6b8:	ldr	r1, [pc, #28]	; 1d6dc <__assert_fail@plt+0xaff0>
   1d6bc:	bl	1217c <dcgettext@plt>
   1d6c0:	mov	r2, r0
   1d6c4:	mov	r3, r6
   1d6c8:	mov	r1, r5
   1d6cc:	mov	r0, #1
   1d6d0:	bl	122c0 <error@plt>
   1d6d4:	mov	r0, r3
   1d6d8:	b	1d6a0 <__assert_fail@plt+0xafb4>
   1d6dc:	ldrdeq	fp, [r3], -r9
   1d6e0:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6e4:	subs	r8, r2, #0
   1d6e8:	ldr	fp, [sp, #40]	; 0x28
   1d6ec:	ldr	sl, [sp, #44]	; 0x2c
   1d6f0:	ldr	r6, [sp, #48]	; 0x30
   1d6f4:	bne	1d70c <__assert_fail@plt+0xb020>
   1d6f8:	ldr	r3, [pc, #536]	; 1d918 <__assert_fail@plt+0xb22c>
   1d6fc:	movw	r2, #341	; 0x155
   1d700:	ldr	r1, [pc, #532]	; 1d91c <__assert_fail@plt+0xb230>
   1d704:	ldr	r0, [pc, #532]	; 1d920 <__assert_fail@plt+0xb234>
   1d708:	bl	126ec <__assert_fail@plt>
   1d70c:	ldr	r7, [pc, #528]	; 1d924 <__assert_fail@plt+0xb238>
   1d710:	mov	r5, r0
   1d714:	mov	r4, r1
   1d718:	mov	r9, r3
   1d71c:	cmp	r8, r7
   1d720:	beq	1d7fc <__assert_fail@plt+0xb110>
   1d724:	ldr	r2, [r1, #16]
   1d728:	add	r3, r3, sl
   1d72c:	add	r3, r3, r2
   1d730:	ldr	r2, [r0, #12]
   1d734:	cmp	r3, r2
   1d738:	bls	1d7bc <__assert_fail@plt+0xb0d0>
   1d73c:	cmp	r6, #0
   1d740:	bne	1d754 <__assert_fail@plt+0xb068>
   1d744:	ldr	r2, [r1]
   1d748:	ldr	r3, [r0, #28]
   1d74c:	cmp	r2, r3
   1d750:	bne	1d774 <__assert_fail@plt+0xb088>
   1d754:	ldr	r1, [pc, #460]	; 1d928 <__assert_fail@plt+0xb23c>
   1d758:	mov	r2, #5
   1d75c:	mov	r0, #0
   1d760:	bl	1217c <dcgettext@plt>
   1d764:	mov	r2, r0
   1d768:	mov	r1, #0
   1d76c:	mov	r0, #1
   1d770:	bl	122c0 <error@plt>
   1d774:	ldr	r3, [r0, #24]
   1d778:	cmp	r3, #0
   1d77c:	bne	1d7a4 <__assert_fail@plt+0xb0b8>
   1d780:	ldr	r3, [r0]
   1d784:	cmp	r3, #0
   1d788:	beq	1d7b0 <__assert_fail@plt+0xb0c4>
   1d78c:	ldr	r3, [r0, #36]	; 0x24
   1d790:	cmp	r3, #0
   1d794:	bne	1d7a4 <__assert_fail@plt+0xb0b8>
   1d798:	ldr	r3, [r0, #40]	; 0x28
   1d79c:	cmp	r3, #0
   1d7a0:	beq	1d7b0 <__assert_fail@plt+0xb0c4>
   1d7a4:	mov	r2, #5
   1d7a8:	ldr	r1, [pc, #380]	; 1d92c <__assert_fail@plt+0xb240>
   1d7ac:	b	1d75c <__assert_fail@plt+0xb070>
   1d7b0:	mov	r1, r4
   1d7b4:	mov	r0, r5
   1d7b8:	bl	1dab0 <__assert_fail@plt+0xb3c4>
   1d7bc:	cmp	r6, #0
   1d7c0:	ldr	r2, [r4]
   1d7c4:	bne	1d7e4 <__assert_fail@plt+0xb0f8>
   1d7c8:	ldr	r1, [r5, #40]	; 0x28
   1d7cc:	cmp	r1, #0
   1d7d0:	beq	1d7e4 <__assert_fail@plt+0xb0f8>
   1d7d4:	ldr	r3, [r5, #28]
   1d7d8:	sub	r3, r2, r3
   1d7dc:	cmp	r1, r3
   1d7e0:	beq	1d7f0 <__assert_fail@plt+0xb104>
   1d7e4:	ldr	r3, [r5, #16]
   1d7e8:	cmp	r2, r3
   1d7ec:	bne	1d7fc <__assert_fail@plt+0xb110>
   1d7f0:	mov	r1, r4
   1d7f4:	mov	r0, r5
   1d7f8:	bl	1dab0 <__assert_fail@plt+0xb3c4>
   1d7fc:	cmp	r6, #0
   1d800:	ldr	r1, [r4, #8]
   1d804:	moveq	r3, #1
   1d808:	streq	r3, [r4, #28]
   1d80c:	ldr	r3, [r4]
   1d810:	cmp	r3, r1
   1d814:	bcc	1d838 <__assert_fail@plt+0xb14c>
   1d818:	ldr	r0, [r4, #4]
   1d81c:	cmp	r0, #0
   1d820:	bne	1d904 <__assert_fail@plt+0xb218>
   1d824:	mov	r3, #64	; 0x40
   1d828:	mov	r0, #256	; 0x100
   1d82c:	str	r3, [r4, #8]
   1d830:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1d834:	str	r0, [r4, #4]
   1d838:	ldr	r3, [r4]
   1d83c:	cmp	r8, r7
   1d840:	moveq	r2, #0
   1d844:	ldr	r1, [r4, #4]
   1d848:	add	ip, r3, #1
   1d84c:	streq	ip, [r4]
   1d850:	streq	r2, [r1, r3, lsl #2]
   1d854:	beq	1d8f0 <__assert_fail@plt+0xb204>
   1d858:	ldr	r2, [r4, #12]
   1d85c:	cmp	fp, #0
   1d860:	str	ip, [r4]
   1d864:	ldr	r0, [r4, #16]
   1d868:	add	r2, r2, r0
   1d86c:	str	r2, [r1, r3, lsl #2]
   1d870:	beq	1d890 <__assert_fail@plt+0xb1a4>
   1d874:	ldr	r3, [r4, #12]
   1d878:	mov	r1, fp
   1d87c:	add	r0, r3, r0
   1d880:	bl	12278 <strcpy@plt>
   1d884:	ldr	r3, [r4, #16]
   1d888:	add	r3, r3, sl
   1d88c:	str	r3, [r4, #16]
   1d890:	ldr	r0, [r4, #12]
   1d894:	mov	r1, r8
   1d898:	ldr	r3, [r4, #16]
   1d89c:	add	r0, r0, r3
   1d8a0:	bl	12278 <strcpy@plt>
   1d8a4:	cmp	r6, #0
   1d8a8:	ldr	r2, [r4]
   1d8ac:	ldr	r3, [r4, #16]
   1d8b0:	add	r3, r3, r9
   1d8b4:	str	r3, [r4, #16]
   1d8b8:	bne	1d8d8 <__assert_fail@plt+0xb1ec>
   1d8bc:	ldr	r1, [r5, #40]	; 0x28
   1d8c0:	cmp	r1, #0
   1d8c4:	beq	1d8d8 <__assert_fail@plt+0xb1ec>
   1d8c8:	ldr	r3, [r5, #28]
   1d8cc:	sub	r3, r2, r3
   1d8d0:	cmp	r1, r3
   1d8d4:	beq	1d8e4 <__assert_fail@plt+0xb1f8>
   1d8d8:	ldr	r3, [r5, #16]
   1d8dc:	cmp	r2, r3
   1d8e0:	bne	1d8f0 <__assert_fail@plt+0xb204>
   1d8e4:	mov	r1, r4
   1d8e8:	mov	r0, r5
   1d8ec:	bl	1dab0 <__assert_fail@plt+0xb3c4>
   1d8f0:	cmp	r6, #0
   1d8f4:	ldrne	r3, [r4, #16]
   1d8f8:	strne	r3, [r4, #20]
   1d8fc:	add	sp, sp, #4
   1d900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d904:	lsl	r3, r1, #1
   1d908:	lsl	r1, r1, #3
   1d90c:	str	r3, [r4, #8]
   1d910:	bl	2740c <__assert_fail@plt+0x14d20>
   1d914:	b	1d834 <__assert_fail@plt+0xb148>
   1d918:	muleq	r3, r6, r4
   1d91c:	andeq	fp, r3, r6, lsl r5
   1d920:	andeq	fp, r3, r1, lsr #10
   1d924:	andeq	fp, r3, sp, lsr #10
   1d928:	andeq	fp, r3, r9, lsr r5
   1d92c:	andeq	fp, r3, r4, ror r5
   1d930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d934:	sub	sp, sp, #36	; 0x24
   1d938:	mov	r8, r3
   1d93c:	mov	r9, r0
   1d940:	mov	r5, r2
   1d944:	ldr	r3, [sp, #72]	; 0x48
   1d948:	ldr	r4, [pc, #344]	; 1daa8 <__assert_fail@plt+0xb3bc>
   1d94c:	ldr	r0, [r0, #12]
   1d950:	str	r3, [sp, #4]
   1d954:	ldr	r3, [sp, #76]	; 0x4c
   1d958:	str	r1, [sp, #16]
   1d95c:	sub	r7, r0, #1
   1d960:	str	r3, [sp, #8]
   1d964:	ldr	r3, [sp, #80]	; 0x50
   1d968:	str	r3, [sp, #20]
   1d96c:	ldr	r3, [sp, #84]	; 0x54
   1d970:	str	r3, [sp, #12]
   1d974:	ldr	r3, [sp, #88]	; 0x58
   1d978:	str	r3, [sp, #24]
   1d97c:	ldr	r3, [r4]
   1d980:	cmp	r3, #0
   1d984:	bne	1d994 <__assert_fail@plt+0xb2a8>
   1d988:	add	r0, r0, #1
   1d98c:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1d990:	str	r0, [r4]
   1d994:	ldr	sl, [r4]
   1d998:	ldrd	r2, [sp, #8]
   1d99c:	mov	r4, sl
   1d9a0:	add	fp, r3, r2
   1d9a4:	mov	r0, r5
   1d9a8:	ldr	r1, [r9, #24]
   1d9ac:	bl	21a64 <__assert_fail@plt+0xf378>
   1d9b0:	subs	r3, r0, #0
   1d9b4:	subne	r6, r3, r5
   1d9b8:	moveq	r6, r8
   1d9bc:	cmp	r7, r6
   1d9c0:	str	r3, [sp, #28]
   1d9c4:	bls	1da4c <__assert_fail@plt+0xb360>
   1d9c8:	mov	r1, r5
   1d9cc:	mov	r0, r4
   1d9d0:	mov	r2, r6
   1d9d4:	sub	r7, r7, r6
   1d9d8:	bl	12458 <strncpy@plt>
   1d9dc:	ldr	r3, [sp, #28]
   1d9e0:	add	r4, r4, r6
   1d9e4:	add	r5, r5, r6
   1d9e8:	sub	r8, r8, r6
   1d9ec:	cmp	r3, #0
   1d9f0:	beq	1da40 <__assert_fail@plt+0xb354>
   1d9f4:	cmp	fp, r7
   1d9f8:	bcs	1da4c <__assert_fail@plt+0xb360>
   1d9fc:	ldr	r3, [sp, #4]
   1da00:	sub	r7, r7, fp
   1da04:	cmp	r3, #0
   1da08:	beq	1da20 <__assert_fail@plt+0xb334>
   1da0c:	mov	r1, r3
   1da10:	mov	r0, r4
   1da14:	bl	12278 <strcpy@plt>
   1da18:	ldr	r3, [sp, #8]
   1da1c:	add	r4, r4, r3
   1da20:	mov	r0, r4
   1da24:	ldr	r1, [sp, #20]
   1da28:	bl	12278 <strcpy@plt>
   1da2c:	ldr	r3, [sp, #12]
   1da30:	add	r4, r4, r3
   1da34:	ldr	r3, [r9, #20]
   1da38:	add	r5, r5, r3
   1da3c:	sub	r8, r8, r3
   1da40:	ldrb	r3, [r5]
   1da44:	cmp	r3, #0
   1da48:	bne	1d9a4 <__assert_fail@plt+0xb2b8>
   1da4c:	ldrb	r3, [r5]
   1da50:	cmp	r3, #0
   1da54:	beq	1da78 <__assert_fail@plt+0xb38c>
   1da58:	mov	r2, #5
   1da5c:	ldr	r1, [pc, #72]	; 1daac <__assert_fail@plt+0xb3c0>
   1da60:	mov	r0, #0
   1da64:	bl	1217c <dcgettext@plt>
   1da68:	mov	r2, r0
   1da6c:	mov	r1, #0
   1da70:	mov	r0, #1
   1da74:	bl	122c0 <error@plt>
   1da78:	ldr	r1, [sp, #16]
   1da7c:	mov	r0, r9
   1da80:	strb	r3, [r4], #1
   1da84:	ldr	r2, [sp, #24]
   1da88:	str	r3, [sp, #72]	; 0x48
   1da8c:	str	r3, [sp, #76]	; 0x4c
   1da90:	sub	r3, r4, sl
   1da94:	str	r2, [sp, #80]	; 0x50
   1da98:	mov	r2, sl
   1da9c:	add	sp, sp, #36	; 0x24
   1daa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daa4:	b	1d6e0 <__assert_fail@plt+0xaff4>
   1daa8:	strdeq	lr, [r4], -r4
   1daac:	andeq	fp, r3, fp, lsl #11
   1dab0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1dab4:	mov	r3, #0
   1dab8:	mov	r5, r1
   1dabc:	mov	r9, r0
   1dac0:	ldr	r2, [pc, #592]	; 1dd18 <__assert_fail@plt+0xb62c>
   1dac4:	str	r3, [sp]
   1dac8:	str	r3, [sp, #4]
   1dacc:	str	r3, [sp, #8]
   1dad0:	bl	1d6e0 <__assert_fail@plt+0xaff4>
   1dad4:	ldr	r3, [r5]
   1dad8:	cmp	r3, #0
   1dadc:	bne	1daf4 <__assert_fail@plt+0xb408>
   1dae0:	ldr	r3, [pc, #564]	; 1dd1c <__assert_fail@plt+0xb630>
   1dae4:	movw	r2, #261	; 0x105
   1dae8:	ldr	r1, [pc, #560]	; 1dd20 <__assert_fail@plt+0xb634>
   1daec:	ldr	r0, [pc, #560]	; 1dd24 <__assert_fail@plt+0xb638>
   1daf0:	bl	126ec <__assert_fail@plt>
   1daf4:	ldr	r2, [r5, #4]
   1daf8:	sub	r3, r3, #-1073741823	; 0xc0000001
   1dafc:	lsl	r0, r3, #2
   1db00:	ldr	r7, [r2, r3, lsl #2]
   1db04:	cmp	r7, #0
   1db08:	beq	1db20 <__assert_fail@plt+0xb434>
   1db0c:	ldr	r3, [pc, #520]	; 1dd1c <__assert_fail@plt+0xb630>
   1db10:	movw	r2, #262	; 0x106
   1db14:	ldr	r1, [pc, #516]	; 1dd20 <__assert_fail@plt+0xb634>
   1db18:	ldr	r0, [pc, #520]	; 1dd28 <__assert_fail@plt+0xb63c>
   1db1c:	b	1daf0 <__assert_fail@plt+0xb404>
   1db20:	add	r0, r0, #8
   1db24:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1db28:	ldr	r4, [r5]
   1db2c:	mov	r8, r0
   1db30:	mov	r3, #0
   1db34:	ldr	r2, [r9, #28]
   1db38:	cmp	r2, r3
   1db3c:	bne	1db7c <__assert_fail@plt+0xb490>
   1db40:	ldr	r1, [r5]
   1db44:	add	r2, r7, r3
   1db48:	mov	r6, r3
   1db4c:	cmp	r1, r2
   1db50:	cmphi	r4, r6
   1db54:	movhi	r0, #1
   1db58:	movls	r0, #0
   1db5c:	bhi	1db90 <__assert_fail@plt+0xb4a4>
   1db60:	cmp	r3, r6
   1db64:	bls	1dba8 <__assert_fail@plt+0xb4bc>
   1db68:	ldr	r3, [pc, #444]	; 1dd2c <__assert_fail@plt+0xb640>
   1db6c:	mov	r2, #242	; 0xf2
   1db70:	ldr	r1, [pc, #424]	; 1dd20 <__assert_fail@plt+0xb634>
   1db74:	ldr	r0, [pc, #436]	; 1dd30 <__assert_fail@plt+0xb644>
   1db78:	b	1daf0 <__assert_fail@plt+0xb404>
   1db7c:	ldr	r1, [r5, #4]
   1db80:	ldr	r1, [r1, r3, lsl #2]
   1db84:	str	r1, [r8, r3, lsl #2]
   1db88:	add	r3, r3, #1
   1db8c:	b	1db38 <__assert_fail@plt+0xb44c>
   1db90:	ldr	r0, [r5, #4]
   1db94:	ldr	r0, [r0, r2, lsl #2]
   1db98:	add	r2, r2, #1
   1db9c:	str	r0, [r8, r6, lsl #2]
   1dba0:	add	r6, r6, #1
   1dba4:	b	1db4c <__assert_fail@plt+0xb460>
   1dba8:	mov	r3, r8
   1dbac:	mov	r2, r6
   1dbb0:	str	r0, [r8, r6, lsl #2]
   1dbb4:	mov	r0, r9
   1dbb8:	ldr	r1, [r5, #24]
   1dbbc:	ldr	sl, [r9, #32]
   1dbc0:	blx	sl
   1dbc4:	subs	sl, r0, #0
   1dbc8:	ldr	r1, [r9, #28]
   1dbcc:	beq	1dc80 <__assert_fail@plt+0xb594>
   1dbd0:	ldr	r2, [r5, #36]	; 0x24
   1dbd4:	mov	r3, r1
   1dbd8:	cmp	r4, r2
   1dbdc:	strhi	r4, [r5, #36]	; 0x24
   1dbe0:	ldr	r0, [r5, #36]	; 0x24
   1dbe4:	cmp	r0, #0
   1dbe8:	beq	1dbf8 <__assert_fail@plt+0xb50c>
   1dbec:	ldr	r2, [r5, #40]	; 0x28
   1dbf0:	cmp	r0, r2
   1dbf4:	bcc	1dc50 <__assert_fail@plt+0xb564>
   1dbf8:	cmn	r4, #1
   1dbfc:	addne	r4, r4, #1
   1dc00:	cmp	r3, #0
   1dc04:	bne	1dc68 <__assert_fail@plt+0xb57c>
   1dc08:	sub	r7, r7, r3
   1dc0c:	add	r7, r7, r6
   1dc10:	ldr	r3, [r5]
   1dc14:	add	r2, r7, #1
   1dc18:	sub	r1, r3, r1
   1dc1c:	cmp	r2, r1
   1dc20:	bcc	1db30 <__assert_fail@plt+0xb444>
   1dc24:	mov	r0, r8
   1dc28:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1dc2c:	ldr	r3, [r9, #28]
   1dc30:	mov	r0, #0
   1dc34:	mvn	r1, #0
   1dc38:	str	r3, [r5]
   1dc3c:	ldr	r3, [r5, #20]
   1dc40:	strd	r0, [r5, #28]
   1dc44:	str	r3, [r5, #16]
   1dc48:	add	sp, sp, #16
   1dc4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dc50:	sub	r2, r2, r0
   1dc54:	cmp	r2, #1
   1dc58:	addne	r4, r4, r2, lsr #1
   1dc5c:	addeq	r4, r4, #1
   1dc60:	cmp	r1, #0
   1dc64:	beq	1dc74 <__assert_fail@plt+0xb588>
   1dc68:	add	r2, r3, #1
   1dc6c:	cmp	r4, r2
   1dc70:	movcc	r4, r2
   1dc74:	cmp	r4, #0
   1dc78:	moveq	r4, #1
   1dc7c:	b	1dc08 <__assert_fail@plt+0xb51c>
   1dc80:	add	r2, r1, #1
   1dc84:	cmp	r2, r4
   1dc88:	bcc	1dca8 <__assert_fail@plt+0xb5bc>
   1dc8c:	mov	r2, #5
   1dc90:	ldr	r1, [pc, #156]	; 1dd34 <__assert_fail@plt+0xb648>
   1dc94:	bl	1217c <dcgettext@plt>
   1dc98:	mov	r2, r0
   1dc9c:	mov	r1, sl
   1dca0:	mov	r0, #1
   1dca4:	bl	122c0 <error@plt>
   1dca8:	ldr	r0, [r5, #40]	; 0x28
   1dcac:	cmp	r4, r0
   1dcb0:	movcs	r3, #0
   1dcb4:	movcc	r3, #1
   1dcb8:	cmp	r0, #0
   1dcbc:	ldr	r0, [r5, #36]	; 0x24
   1dcc0:	moveq	r3, #1
   1dcc4:	cmp	r3, #0
   1dcc8:	strne	r4, [r5, #40]	; 0x28
   1dccc:	cmp	r0, #0
   1dcd0:	beq	1dce0 <__assert_fail@plt+0xb5f4>
   1dcd4:	ldr	r3, [r5, #40]	; 0x28
   1dcd8:	cmp	r0, r3
   1dcdc:	bcc	1dd04 <__assert_fail@plt+0xb618>
   1dce0:	lsr	r4, r4, #1
   1dce4:	cmp	r1, #0
   1dce8:	beq	1dcf8 <__assert_fail@plt+0xb60c>
   1dcec:	cmp	r2, r4
   1dcf0:	bcc	1dc10 <__assert_fail@plt+0xb524>
   1dcf4:	mov	r4, r2
   1dcf8:	cmp	r4, #0
   1dcfc:	moveq	r4, #1
   1dd00:	b	1dc10 <__assert_fail@plt+0xb524>
   1dd04:	sub	r3, r3, r0
   1dd08:	cmp	r3, #1
   1dd0c:	subne	r4, r4, r3, lsr #1
   1dd10:	subeq	r4, r4, #1
   1dd14:	b	1dce4 <__assert_fail@plt+0xb5f8>
   1dd18:	andeq	fp, r3, sp, lsr #10
   1dd1c:	andeq	fp, r3, r2, lsr #9
   1dd20:	andeq	fp, r3, r6, lsl r5
   1dd24:	muleq	r3, ip, r5
   1dd28:			; <UNDEFINED> instruction: 0x0003b5b0
   1dd2c:	andeq	fp, r3, sp, lsr #9
   1dd30:	ldrdeq	fp, [r3], -fp	; <UNPREDICTABLE>
   1dd34:	strdeq	fp, [r3], -r8
   1dd38:	push	{r4, lr}
   1dd3c:	mov	r0, #0
   1dd40:	bl	12194 <sysconf@plt>
   1dd44:	cmp	r0, #0
   1dd48:	mvnle	r0, #-2147483648	; 0x80000000
   1dd4c:	pop	{r4, pc}
   1dd50:	ldr	r3, [pc, #48]	; 1dd88 <__assert_fail@plt+0xb69c>
   1dd54:	push	{r4, r5, r6, lr}
   1dd58:	mov	r5, #0
   1dd5c:	ldr	r4, [r3]
   1dd60:	sub	r4, r4, #4
   1dd64:	ldr	r0, [r4, #4]!
   1dd68:	cmp	r0, #0
   1dd6c:	bne	1dd78 <__assert_fail@plt+0xb68c>
   1dd70:	mov	r0, r5
   1dd74:	pop	{r4, r5, r6, pc}
   1dd78:	bl	123bc <strlen@plt>
   1dd7c:	add	r0, r0, #1
   1dd80:	add	r5, r5, r0
   1dd84:	b	1dd64 <__assert_fail@plt+0xb678>
   1dd88:	andeq	lr, r4, r4, asr r5
   1dd8c:	push	{r4, r5, r6, lr}
   1dd90:	mov	r4, r0
   1dd94:	mov	r6, r1
   1dd98:	bl	1dd50 <__assert_fail@plt+0xb664>
   1dd9c:	mov	r3, #4096	; 0x1000
   1dda0:	mov	r5, r0
   1dda4:	str	r3, [r4, #8]
   1dda8:	bl	1dd38 <__assert_fail@plt+0xb64c>
   1ddac:	mov	r3, #0
   1ddb0:	cmp	r0, r5
   1ddb4:	str	r3, [r4]
   1ddb8:	str	r0, [r4, #4]
   1ddbc:	bcc	1de24 <__assert_fail@plt+0xb738>
   1ddc0:	add	r2, r5, r6
   1ddc4:	cmp	r0, r2
   1ddc8:	bls	1de2c <__assert_fail@plt+0xb740>
   1ddcc:	sub	r0, r0, r6
   1ddd0:	sub	r0, r0, r5
   1ddd4:	lsr	r2, r0, #2
   1ddd8:	str	r0, [r4, #4]
   1dddc:	sub	r2, r2, #2
   1dde0:	cmp	r2, r3
   1dde4:	str	r2, [r4, #16]
   1dde8:	bne	1de00 <__assert_fail@plt+0xb714>
   1ddec:	ldr	r3, [pc, #64]	; 1de34 <__assert_fail@plt+0xb748>
   1ddf0:	movw	r2, #518	; 0x206
   1ddf4:	ldr	r1, [pc, #60]	; 1de38 <__assert_fail@plt+0xb74c>
   1ddf8:	ldr	r0, [pc, #60]	; 1de3c <__assert_fail@plt+0xb750>
   1ddfc:	bl	126ec <__assert_fail@plt>
   1de00:	ldr	r2, [pc, #56]	; 1de40 <__assert_fail@plt+0xb754>
   1de04:	str	r0, [r4, #12]
   1de08:	mov	r0, r3
   1de0c:	str	r3, [r4, #20]
   1de10:	str	r3, [r4, #24]
   1de14:	str	r3, [r4, #28]
   1de18:	strd	r2, [r4, #32]
   1de1c:	str	r3, [r4, #40]	; 0x28
   1de20:	pop	{r4, r5, r6, pc}
   1de24:	mov	r0, #1
   1de28:	pop	{r4, r5, r6, pc}
   1de2c:	mov	r0, #2
   1de30:	pop	{r4, r5, r6, pc}
   1de34:			; <UNDEFINED> instruction: 0x0003b4b7
   1de38:	andeq	fp, r3, r6, lsl r5
   1de3c:	andeq	fp, r3, ip, lsr #12
   1de40:	andeq	sp, r1, r0, asr r6
   1de44:	ldr	r3, [r0, #4]
   1de48:	cmp	r3, #131072	; 0x20000
   1de4c:	bcs	1de58 <__assert_fail@plt+0xb76c>
   1de50:	str	r3, [r0, #12]
   1de54:	bx	lr
   1de58:	ldr	r3, [r0, #8]
   1de5c:	cmp	r3, #131072	; 0x20000
   1de60:	movls	r3, #131072	; 0x20000
   1de64:	b	1de50 <__assert_fail@plt+0xb764>
   1de68:	ldr	r3, [pc, #108]	; 1dedc <__assert_fail@plt+0xb7f0>
   1de6c:	push	{r4, r5, r6, lr}
   1de70:	mov	r5, #0
   1de74:	ldr	r0, [r0, #12]
   1de78:	str	r5, [r1]
   1de7c:	str	r5, [r1, #4]
   1de80:	str	r5, [r1, #8]
   1de84:	str	r5, [r1, #16]
   1de88:	cmp	r0, r3
   1de8c:	str	r5, [r1, #36]	; 0x24
   1de90:	str	r5, [r1, #40]	; 0x28
   1de94:	bls	1deac <__assert_fail@plt+0xb7c0>
   1de98:	ldr	r3, [pc, #64]	; 1dee0 <__assert_fail@plt+0xb7f4>
   1de9c:	mov	r2, #572	; 0x23c
   1dea0:	ldr	r1, [pc, #60]	; 1dee4 <__assert_fail@plt+0xb7f8>
   1dea4:	ldr	r0, [pc, #60]	; 1dee8 <__assert_fail@plt+0xb7fc>
   1dea8:	bl	126ec <__assert_fail@plt>
   1deac:	add	r0, r0, #1
   1deb0:	mov	r4, r1
   1deb4:	mov	r6, r2
   1deb8:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1debc:	mvn	r3, #0
   1dec0:	str	r0, [r4, #12]
   1dec4:	str	r5, [r4, #16]
   1dec8:	str	r5, [r4, #20]
   1decc:	str	r6, [r4, #24]
   1ded0:	str	r5, [r4, #28]
   1ded4:	str	r3, [r4, #32]
   1ded8:	pop	{r4, r5, r6, pc}
   1dedc:	svcvc	0x00fff7ff
   1dee0:	andeq	fp, r3, fp, asr #9
   1dee4:	andeq	fp, r3, r6, lsl r5
   1dee8:	andeq	fp, r3, r3, asr #12
   1deec:	ldr	r3, [r0, #28]
   1def0:	mov	r2, #0
   1def4:	str	r3, [r1]
   1def8:	ldr	r3, [r1, #20]
   1defc:	str	r3, [r1, #16]
   1df00:	mvn	r3, #0
   1df04:	strd	r2, [r1, #28]
   1df08:	bx	lr
   1df0c:	push	{r4, r5, r6, lr}
   1df10:	mov	r4, #0
   1df14:	mov	r6, r0
   1df18:	mov	r5, r4
   1df1c:	ldr	r0, [r6, r4, lsl #2]
   1df20:	cmp	r0, #0
   1df24:	bne	1df54 <__assert_fail@plt+0xb868>
   1df28:	mov	r1, r4
   1df2c:	ldr	r0, [pc, #56]	; 1df6c <__assert_fail@plt+0xb880>
   1df30:	bl	1d658 <__assert_fail@plt+0xaf6c>
   1df34:	cmp	r0, #0
   1df38:	bne	1df64 <__assert_fail@plt+0xb878>
   1df3c:	mov	r1, r5
   1df40:	ldr	r0, [pc, #40]	; 1df70 <__assert_fail@plt+0xb884>
   1df44:	bl	1d658 <__assert_fail@plt+0xaf6c>
   1df48:	adds	r0, r0, #0
   1df4c:	movne	r0, #1
   1df50:	pop	{r4, r5, r6, pc}
   1df54:	bl	123bc <strlen@plt>
   1df58:	add	r4, r4, #1
   1df5c:	add	r5, r5, r0
   1df60:	b	1df1c <__assert_fail@plt+0xb830>
   1df64:	mov	r0, #1
   1df68:	pop	{r4, r5, r6, pc}
   1df6c:	andeq	fp, r3, r6, ror #12
   1df70:	andeq	fp, r3, fp, lsl #13
   1df74:	push	{r0, r1, r4, r5, r6, lr}
   1df78:	mov	r4, r0
   1df7c:	mov	r0, sp
   1df80:	mov	r5, r1
   1df84:	mov	r6, r2
   1df88:	bl	267fc <__assert_fail@plt+0x14110>
   1df8c:	cmp	r0, #0
   1df90:	bne	1dff4 <__assert_fail@plt+0xb908>
   1df94:	mov	r0, r4
   1df98:	bl	26850 <__assert_fail@plt+0x14164>
   1df9c:	subs	r4, r0, #0
   1dfa0:	bne	1dfcc <__assert_fail@plt+0xb8e0>
   1dfa4:	mov	r0, r6
   1dfa8:	blx	r5
   1dfac:	subs	r5, r0, #0
   1dfb0:	bge	1dfbc <__assert_fail@plt+0xb8d0>
   1dfb4:	bl	12404 <__errno_location@plt>
   1dfb8:	ldr	r4, [r0]
   1dfbc:	mov	r0, sp
   1dfc0:	bl	26850 <__assert_fail@plt+0x14164>
   1dfc4:	cmp	r0, #0
   1dfc8:	beq	1dfd8 <__assert_fail@plt+0xb8ec>
   1dfcc:	bl	12404 <__errno_location@plt>
   1dfd0:	ldr	r0, [r0]
   1dfd4:	bl	226b4 <__assert_fail@plt+0xffc8>
   1dfd8:	mov	r0, sp
   1dfdc:	bl	2686c <__assert_fail@plt+0x14180>
   1dfe0:	cmp	r4, #0
   1dfe4:	bne	1e000 <__assert_fail@plt+0xb914>
   1dfe8:	mov	r0, r5
   1dfec:	add	sp, sp, #8
   1dff0:	pop	{r4, r5, r6, pc}
   1dff4:	bl	12404 <__errno_location@plt>
   1dff8:	ldr	r0, [r0]
   1dffc:	bl	22678 <__assert_fail@plt+0xff8c>
   1e000:	bl	12404 <__errno_location@plt>
   1e004:	str	r4, [r0]
   1e008:	b	1dfe8 <__assert_fail@plt+0xb8fc>
   1e00c:	cmn	r0, #100	; 0x64
   1e010:	push	{r0, r1, r4, r5, r6, lr}
   1e014:	mov	r4, r1
   1e018:	mov	r6, r2
   1e01c:	bne	1e038 <__assert_fail@plt+0xb94c>
   1e020:	mov	r0, r2
   1e024:	blx	r1
   1e028:	mov	r4, r0
   1e02c:	mov	r0, r4
   1e030:	add	sp, sp, #8
   1e034:	pop	{r4, r5, r6, pc}
   1e038:	mov	r5, r0
   1e03c:	mov	r0, sp
   1e040:	bl	267fc <__assert_fail@plt+0x14110>
   1e044:	cmp	r0, #0
   1e048:	beq	1e058 <__assert_fail@plt+0xb96c>
   1e04c:	bl	12404 <__errno_location@plt>
   1e050:	ldr	r0, [r0]
   1e054:	bl	22678 <__assert_fail@plt+0xff8c>
   1e058:	mov	r0, r5
   1e05c:	bl	125d8 <fchdir@plt>
   1e060:	subs	r5, r0, #0
   1e064:	beq	1e088 <__assert_fail@plt+0xb99c>
   1e068:	bl	12404 <__errno_location@plt>
   1e06c:	mov	r4, r0
   1e070:	mov	r0, sp
   1e074:	ldr	r5, [r4]
   1e078:	bl	2686c <__assert_fail@plt+0x14180>
   1e07c:	str	r5, [r4]
   1e080:	mvn	r4, #0
   1e084:	b	1e02c <__assert_fail@plt+0xb940>
   1e088:	mov	r0, r6
   1e08c:	blx	r4
   1e090:	subs	r4, r0, #0
   1e094:	bge	1e0a0 <__assert_fail@plt+0xb9b4>
   1e098:	bl	12404 <__errno_location@plt>
   1e09c:	ldr	r5, [r0]
   1e0a0:	mov	r0, sp
   1e0a4:	bl	26850 <__assert_fail@plt+0x14164>
   1e0a8:	cmp	r0, #0
   1e0ac:	beq	1e0bc <__assert_fail@plt+0xb9d0>
   1e0b0:	bl	12404 <__errno_location@plt>
   1e0b4:	ldr	r0, [r0]
   1e0b8:	bl	226b4 <__assert_fail@plt+0xffc8>
   1e0bc:	mov	r0, sp
   1e0c0:	bl	2686c <__assert_fail@plt+0x14180>
   1e0c4:	cmp	r5, #0
   1e0c8:	beq	1e02c <__assert_fail@plt+0xb940>
   1e0cc:	bl	12404 <__errno_location@plt>
   1e0d0:	str	r5, [r0]
   1e0d4:	b	1e02c <__assert_fail@plt+0xb940>
   1e0d8:	push	{r4, r5, r6, r7, r8, lr}
   1e0dc:	mov	r6, r1
   1e0e0:	mov	r4, r0
   1e0e4:	mov	r5, r2
   1e0e8:	bl	12404 <__errno_location@plt>
   1e0ec:	cmp	r6, #0
   1e0f0:	ldr	r8, [r0]
   1e0f4:	bne	1e10c <__assert_fail@plt+0xba20>
   1e0f8:	ldr	r3, [pc, #172]	; 1e1ac <__assert_fail@plt+0xbac0>
   1e0fc:	mov	r2, #71	; 0x47
   1e100:	ldr	r1, [pc, #168]	; 1e1b0 <__assert_fail@plt+0xbac4>
   1e104:	ldr	r0, [pc, #168]	; 1e1b4 <__assert_fail@plt+0xbac8>
   1e108:	bl	126ec <__assert_fail@plt>
   1e10c:	ldr	r3, [r5]
   1e110:	mov	r7, r0
   1e114:	cmp	r3, #0
   1e118:	movne	r0, r3
   1e11c:	moveq	r0, #16
   1e120:	cmp	r6, r0
   1e124:	bhi	1e14c <__assert_fail@plt+0xba60>
   1e128:	cmp	r3, #0
   1e12c:	bne	1e178 <__assert_fail@plt+0xba8c>
   1e130:	cmp	r4, #0
   1e134:	beq	1e164 <__assert_fail@plt+0xba78>
   1e138:	ldr	r3, [pc, #108]	; 1e1ac <__assert_fail@plt+0xbac0>
   1e13c:	mov	r2, #79	; 0x4f
   1e140:	ldr	r1, [pc, #104]	; 1e1b0 <__assert_fail@plt+0xbac4>
   1e144:	ldr	r0, [pc, #108]	; 1e1b8 <__assert_fail@plt+0xbacc>
   1e148:	b	1e108 <__assert_fail@plt+0xba1c>
   1e14c:	lsl	r2, r0, #1
   1e150:	cmp	r0, r2
   1e154:	movls	r0, r2
   1e158:	bls	1e120 <__assert_fail@plt+0xba34>
   1e15c:	mov	r0, r6
   1e160:	b	1e128 <__assert_fail@plt+0xba3c>
   1e164:	str	r0, [r5]
   1e168:	bl	2a340 <__assert_fail@plt+0x17c54>
   1e16c:	mov	r4, r0
   1e170:	cmp	r4, #0
   1e174:	b	1e194 <__assert_fail@plt+0xbaa8>
   1e178:	cmp	r3, r0
   1e17c:	beq	1e170 <__assert_fail@plt+0xba84>
   1e180:	mov	r1, r0
   1e184:	str	r0, [r5]
   1e188:	mov	r0, r4
   1e18c:	bl	2acc4 <__assert_fail@plt+0x185d8>
   1e190:	subs	r4, r0, #0
   1e194:	bne	1e1a0 <__assert_fail@plt+0xbab4>
   1e198:	mov	r0, #0
   1e19c:	pop	{r4, r5, r6, r7, r8, pc}
   1e1a0:	mov	r0, r4
   1e1a4:	str	r8, [r7]
   1e1a8:	pop	{r4, r5, r6, r7, r8, pc}
   1e1ac:			; <UNDEFINED> instruction: 0x0003b6b1
   1e1b0:			; <UNDEFINED> instruction: 0x0003b6bb
   1e1b4:	andeq	fp, r3, r7, asr #13
   1e1b8:	ldrdeq	fp, [r3], -r3
   1e1bc:	push	{r4, lr}
   1e1c0:	mov	r4, r0
   1e1c4:	bl	1e0d8 <__assert_fail@plt+0xb9ec>
   1e1c8:	cmp	r0, #0
   1e1cc:	popne	{r4, pc}
   1e1d0:	mov	r0, r4
   1e1d4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1e1d8:	bl	27698 <__assert_fail@plt+0x14fac>
   1e1dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e1e0:	ldr	r0, [pc, #192]	; 1e2a8 <__assert_fail@plt+0xbbbc>
   1e1e4:	bl	1f8e8 <__assert_fail@plt+0xd1fc>
   1e1e8:	subs	r7, r0, #0
   1e1ec:	bne	1e1fc <__assert_fail@plt+0xbb10>
   1e1f0:	mvn	r5, #0
   1e1f4:	mov	r0, r5
   1e1f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e1fc:	bl	12404 <__errno_location@plt>
   1e200:	mov	r6, #0
   1e204:	mov	r8, r0
   1e208:	mvn	r5, #0
   1e20c:	mov	r9, r6
   1e210:	mov	r0, r7
   1e214:	str	r9, [r8]
   1e218:	bl	1259c <readdir64@plt>
   1e21c:	subs	r4, r0, #0
   1e220:	bne	1e268 <__assert_fail@plt+0xbb7c>
   1e224:	ldr	r8, [r8]
   1e228:	cmp	r8, #0
   1e22c:	beq	1e254 <__assert_fail@plt+0xbb68>
   1e230:	ldr	r2, [pc, #112]	; 1e2a8 <__assert_fail@plt+0xbbbc>
   1e234:	mov	r1, #8
   1e238:	mov	r6, r4
   1e23c:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1e240:	mov	r3, r0
   1e244:	ldr	r2, [pc, #96]	; 1e2ac <__assert_fail@plt+0xbbc0>
   1e248:	mov	r1, r8
   1e24c:	mov	r0, r4
   1e250:	bl	122c0 <error@plt>
   1e254:	mov	r0, r7
   1e258:	bl	126bc <closedir@plt>
   1e25c:	cmp	r6, #0
   1e260:	bne	1e1f4 <__assert_fail@plt+0xbb08>
   1e264:	b	1e1f0 <__assert_fail@plt+0xbb04>
   1e268:	ldrb	r3, [r4, #19]
   1e26c:	cmp	r3, #46	; 0x2e
   1e270:	bne	1e28c <__assert_fail@plt+0xbba0>
   1e274:	ldrb	r3, [r4, #20]
   1e278:	cmp	r3, #0
   1e27c:	beq	1e210 <__assert_fail@plt+0xbb24>
   1e280:	ldrh	r3, [r4, #20]
   1e284:	cmp	r3, #46	; 0x2e
   1e288:	beq	1e210 <__assert_fail@plt+0xbb24>
   1e28c:	mov	r1, #0
   1e290:	add	r0, r4, #19
   1e294:	bl	1f2bc <__assert_fail@plt+0xcbd0>
   1e298:	cmp	r5, r0
   1e29c:	mov	r6, #1
   1e2a0:	movlt	r5, r0
   1e2a4:	b	1e210 <__assert_fail@plt+0xbb24>
   1e2a8:	strdeq	fp, [r3], -sp
   1e2ac:	andeq	sp, r3, fp, lsl r2
   1e2b0:	push	{r0, r1, r2, r3, r4, lr}
   1e2b4:	mov	r0, #4
   1e2b8:	bl	12194 <sysconf@plt>
   1e2bc:	cmn	r0, #1
   1e2c0:	mov	r1, sp
   1e2c4:	movne	r4, r0
   1e2c8:	mov	r0, #7
   1e2cc:	moveq	r4, #20
   1e2d0:	bl	121a0 <getrlimit64@plt>
   1e2d4:	cmp	r0, #0
   1e2d8:	bne	1e2f4 <__assert_fail@plt+0xbc08>
   1e2dc:	ldrd	r2, [sp]
   1e2e0:	mvn	r1, #0
   1e2e4:	mvn	r0, #0
   1e2e8:	cmp	r3, r1
   1e2ec:	cmpeq	r2, r0
   1e2f0:	movne	r4, r2
   1e2f4:	mov	r0, r4
   1e2f8:	add	sp, sp, #16
   1e2fc:	pop	{r4, pc}
   1e300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e304:	mov	r6, #0
   1e308:	sub	sp, sp, #524	; 0x20c
   1e30c:	mov	r7, r0
   1e310:	mov	r8, r1
   1e314:	mov	r9, r2
   1e318:	mov	sl, #5
   1e31c:	mov	fp, r6
   1e320:	cmp	r7, r6
   1e324:	movle	r0, #0
   1e328:	ble	1e3b8 <__assert_fail@plt+0xbccc>
   1e32c:	sub	r5, r7, r6
   1e330:	add	r4, sp, #8
   1e334:	cmp	r5, #64	; 0x40
   1e338:	mov	r2, r4
   1e33c:	movge	r5, #64	; 0x40
   1e340:	mov	r3, #0
   1e344:	add	r1, r6, r3
   1e348:	add	r3, r3, #1
   1e34c:	strh	sl, [r2, #4]
   1e350:	cmp	r3, r5
   1e354:	strh	fp, [r2, #6]
   1e358:	str	r1, [r2], #8
   1e35c:	bne	1e344 <__assert_fail@plt+0xbc58>
   1e360:	mov	r2, #0
   1e364:	mov	r1, r5
   1e368:	mov	r0, r4
   1e36c:	bl	12218 <poll@plt>
   1e370:	cmn	r0, #1
   1e374:	beq	1e3b8 <__assert_fail@plt+0xbccc>
   1e378:	add	r3, r4, r5, lsl #3
   1e37c:	ldrsh	r2, [r4, #6]
   1e380:	cmp	r2, #32
   1e384:	bne	1e39c <__assert_fail@plt+0xbcb0>
   1e388:	add	r4, r4, #8
   1e38c:	cmp	r4, r3
   1e390:	bne	1e37c <__assert_fail@plt+0xbc90>
   1e394:	add	r6, r6, r5
   1e398:	b	1e320 <__assert_fail@plt+0xbc34>
   1e39c:	mov	r1, r9
   1e3a0:	ldr	r0, [r4]
   1e3a4:	str	r3, [sp, #4]
   1e3a8:	blx	r8
   1e3ac:	cmp	r0, #0
   1e3b0:	ldr	r3, [sp, #4]
   1e3b4:	beq	1e388 <__assert_fail@plt+0xbc9c>
   1e3b8:	add	sp, sp, #524	; 0x20c
   1e3bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3c0:	push	{r4, r5, r6, lr}
   1e3c4:	mov	r4, r1
   1e3c8:	mov	r1, #1
   1e3cc:	mov	r5, r0
   1e3d0:	bl	282c4 <__assert_fail@plt+0x15bd8>
   1e3d4:	tst	r0, #1
   1e3d8:	beq	1e3e4 <__assert_fail@plt+0xbcf8>
   1e3dc:	mov	r0, #0
   1e3e0:	pop	{r4, r5, r6, pc}
   1e3e4:	ldr	r2, [r4, #4]
   1e3e8:	ldr	r3, [r4, #8]
   1e3ec:	cmp	r3, r2
   1e3f0:	bcs	1e410 <__assert_fail@plt+0xbd24>
   1e3f4:	ldr	r1, [r4]
   1e3f8:	ldr	r1, [r1, r3, lsl #2]
   1e3fc:	cmp	r5, r1
   1e400:	addgt	r3, r3, #1
   1e404:	strgt	r3, [r4, #8]
   1e408:	bgt	1e3e8 <__assert_fail@plt+0xbcfc>
   1e40c:	beq	1e3dc <__assert_fail@plt+0xbcf0>
   1e410:	mvn	r0, #0
   1e414:	str	r5, [r4, #12]
   1e418:	pop	{r4, r5, r6, pc}
   1e41c:	push	{r4, r5, r6, lr}
   1e420:	mov	r4, r1
   1e424:	mov	r1, #1
   1e428:	mov	r6, r0
   1e42c:	bl	282c4 <__assert_fail@plt+0x15bd8>
   1e430:	ands	r5, r0, #1
   1e434:	movne	r5, #0
   1e438:	bne	1e470 <__assert_fail@plt+0xbd84>
   1e43c:	ldrd	r0, [r4]
   1e440:	add	r2, r4, #8
   1e444:	add	r1, r1, #1
   1e448:	lsl	r1, r1, #2
   1e44c:	bl	1e0d8 <__assert_fail@plt+0xb9ec>
   1e450:	cmp	r0, #0
   1e454:	ldrne	r3, [r4, #4]
   1e458:	mvneq	r5, #0
   1e45c:	strne	r0, [r4]
   1e460:	strne	r6, [r0, r3, lsl #2]
   1e464:	ldrne	r3, [r4, #4]
   1e468:	addne	r3, r3, #1
   1e46c:	strne	r3, [r4, #4]
   1e470:	mov	r0, r5
   1e474:	pop	{r4, r5, r6, pc}
   1e478:	push	{r0, r1, r2, r3, r4, lr}
   1e47c:	bl	1e1dc <__assert_fail@plt+0xbaf0>
   1e480:	cmp	r0, #0
   1e484:	bge	1e48c <__assert_fail@plt+0xbda0>
   1e488:	bl	1e2b0 <__assert_fail@plt+0xbbc4>
   1e48c:	mov	r3, #0
   1e490:	cmn	r0, #-2147483647	; 0x80000001
   1e494:	ldr	r1, [pc, #48]	; 1e4cc <__assert_fail@plt+0xbde0>
   1e498:	add	r2, sp, #4
   1e49c:	addne	r0, r0, #1
   1e4a0:	str	r3, [sp, #4]
   1e4a4:	str	r3, [sp, #8]
   1e4a8:	str	r3, [sp, #12]
   1e4ac:	bl	1e300 <__assert_fail@plt+0xbc14>
   1e4b0:	ldr	r3, [pc, #24]	; 1e4d0 <__assert_fail@plt+0xbde4>
   1e4b4:	ldr	r2, [sp, #4]
   1e4b8:	str	r2, [r3]
   1e4bc:	ldr	r2, [sp, #8]
   1e4c0:	str	r2, [r3, #4]
   1e4c4:	add	sp, sp, #20
   1e4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4cc:	andeq	lr, r1, ip, lsl r4
   1e4d0:	strdeq	lr, [r4], -r8
   1e4d4:	push	{r1, r2, r3}
   1e4d8:	push	{r0, r1, r4, r5, r6, r7, r8, r9, lr}
   1e4dc:	mov	r8, r0
   1e4e0:	ldr	r4, [pc, #144]	; 1e578 <__assert_fail@plt+0xbe8c>
   1e4e4:	ldr	r6, [sp, #36]	; 0x24
   1e4e8:	ldrb	r7, [r4, #8]
   1e4ec:	ands	r5, r6, #64	; 0x40
   1e4f0:	addne	r3, sp, #40	; 0x28
   1e4f4:	ldrne	r5, [sp, #40]	; 0x28
   1e4f8:	strne	r3, [sp, #4]
   1e4fc:	cmp	r7, #0
   1e500:	bne	1e538 <__assert_fail@plt+0xbe4c>
   1e504:	mov	r1, #524288	; 0x80000
   1e508:	ldr	r0, [pc, #108]	; 1e57c <__assert_fail@plt+0xbe90>
   1e50c:	bl	1fa94 <__assert_fail@plt+0xd3a8>
   1e510:	subs	r9, r0, #0
   1e514:	blt	1e52c <__assert_fail@plt+0xbe40>
   1e518:	mov	r1, #1
   1e51c:	bl	282c4 <__assert_fail@plt+0x15bd8>
   1e520:	and	r7, r0, #1
   1e524:	mov	r0, r9
   1e528:	bl	126a4 <close@plt>
   1e52c:	mov	r3, #1
   1e530:	strb	r3, [r4, #8]
   1e534:	strb	r7, [r4, #9]
   1e538:	mov	r2, r5
   1e53c:	orr	r1, r6, #524288	; 0x80000
   1e540:	mov	r0, r8
   1e544:	bl	1fa94 <__assert_fail@plt+0xd3a8>
   1e548:	subs	r5, r0, #0
   1e54c:	blt	1e564 <__assert_fail@plt+0xbe78>
   1e550:	ldrb	r3, [r4, #9]
   1e554:	cmp	r3, #0
   1e558:	bne	1e564 <__assert_fail@plt+0xbe78>
   1e55c:	mov	r1, #1
   1e560:	bl	1f784 <__assert_fail@plt+0xd098>
   1e564:	mov	r0, r5
   1e568:	add	sp, sp, #8
   1e56c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1e570:	add	sp, sp, #12
   1e574:	bx	lr
   1e578:	strdeq	lr, [r4], -r8
   1e57c:	ldrdeq	r8, [r3], -r7
   1e580:	push	{r4, lr}
   1e584:	ldr	r4, [pc, #20]	; 1e5a0 <__assert_fail@plt+0xbeb4>
   1e588:	ldr	r0, [r4]
   1e58c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1e590:	mov	r3, #0
   1e594:	str	r3, [r4]
   1e598:	str	r3, [r4, #4]
   1e59c:	pop	{r4, pc}
   1e5a0:	strdeq	lr, [r4], -r8
   1e5a4:	push	{r4, lr}
   1e5a8:	ldr	r0, [pc, #12]	; 1e5bc <__assert_fail@plt+0xbed0>
   1e5ac:	bl	122fc <getenv@plt>
   1e5b0:	adds	r0, r0, #0
   1e5b4:	movne	r0, #1
   1e5b8:	pop	{r4, pc}
   1e5bc:	andeq	fp, r3, fp, lsl #14
   1e5c0:	ldr	r3, [pc, #148]	; 1e65c <__assert_fail@plt+0xbf70>
   1e5c4:	push	{r4, r5, lr}
   1e5c8:	sub	sp, sp, #20
   1e5cc:	ldr	r5, [r3]
   1e5d0:	ldr	r4, [r3, #4]
   1e5d4:	bl	1e1dc <__assert_fail@plt+0xbaf0>
   1e5d8:	cmp	r0, #0
   1e5dc:	bge	1e5e4 <__assert_fail@plt+0xbef8>
   1e5e0:	bl	1e2b0 <__assert_fail@plt+0xbbc4>
   1e5e4:	cmn	r0, #-2147483647	; 0x80000001
   1e5e8:	mvn	r3, #0
   1e5ec:	ldr	r1, [pc, #108]	; 1e660 <__assert_fail@plt+0xbf74>
   1e5f0:	str	r4, [sp, #4]
   1e5f4:	mov	r4, #0
   1e5f8:	addne	r0, r0, #1
   1e5fc:	mov	r2, sp
   1e600:	str	r5, [sp]
   1e604:	str	r4, [sp, #8]
   1e608:	str	r3, [sp, #12]
   1e60c:	bl	1e300 <__assert_fail@plt+0xbc14>
   1e610:	ldr	r5, [sp, #12]
   1e614:	cmp	r5, r4
   1e618:	blt	1e654 <__assert_fail@plt+0xbf68>
   1e61c:	mov	r2, #5
   1e620:	ldr	r1, [pc, #60]	; 1e664 <__assert_fail@plt+0xbf78>
   1e624:	mov	r0, r4
   1e628:	bl	1217c <dcgettext@plt>
   1e62c:	mov	r2, r0
   1e630:	mov	r3, r5
   1e634:	mov	r1, r4
   1e638:	mov	r0, r4
   1e63c:	bl	122c0 <error@plt>
   1e640:	ldr	r3, [pc, #32]	; 1e668 <__assert_fail@plt+0xbf7c>
   1e644:	mov	r2, #396	; 0x18c
   1e648:	ldr	r1, [pc, #28]	; 1e66c <__assert_fail@plt+0xbf80>
   1e64c:	ldr	r0, [pc, #28]	; 1e670 <__assert_fail@plt+0xbf84>
   1e650:	bl	126ec <__assert_fail@plt>
   1e654:	add	sp, sp, #20
   1e658:	pop	{r4, r5, pc}
   1e65c:	strdeq	lr, [r4], -r8
   1e660:	andeq	lr, r1, r0, asr #7
   1e664:	andeq	fp, r3, r7, lsr #14
   1e668:	andeq	fp, r3, r4, ror #13
   1e66c:			; <UNDEFINED> instruction: 0x0003b7bf
   1e670:	andeq	fp, r3, r8, asr #15
   1e674:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e678:	mov	r5, r0
   1e67c:	ldr	r3, [pc, #120]	; 1e6fc <__assert_fail@plt+0xc010>
   1e680:	ldr	r0, [r3]
   1e684:	bl	28474 <__assert_fail@plt+0x15d88>
   1e688:	ldr	r3, [pc, #112]	; 1e700 <__assert_fail@plt+0xc014>
   1e68c:	mov	r2, #5
   1e690:	mov	r0, #0
   1e694:	ldr	r1, [pc, #104]	; 1e704 <__assert_fail@plt+0xc018>
   1e698:	ldr	r4, [r3]
   1e69c:	ldr	r3, [pc, #100]	; 1e708 <__assert_fail@plt+0xc01c>
   1e6a0:	ldr	r6, [r3]
   1e6a4:	bl	1217c <dcgettext@plt>
   1e6a8:	mov	r7, r0
   1e6ac:	mov	r2, #5
   1e6b0:	ldr	r1, [pc, #84]	; 1e70c <__assert_fail@plt+0xc020>
   1e6b4:	mov	r0, #0
   1e6b8:	bl	1217c <dcgettext@plt>
   1e6bc:	mov	r8, r0
   1e6c0:	mov	r2, #5
   1e6c4:	ldr	r1, [pc, #68]	; 1e710 <__assert_fail@plt+0xc024>
   1e6c8:	mov	r0, #0
   1e6cc:	bl	1217c <dcgettext@plt>
   1e6d0:	ldr	r2, [pc, #60]	; 1e714 <__assert_fail@plt+0xc028>
   1e6d4:	mov	r3, #0
   1e6d8:	mov	r1, r5
   1e6dc:	stm	sp, {r7, r8}
   1e6e0:	str	r0, [sp, #8]
   1e6e4:	mov	r0, r4
   1e6e8:	str	r3, [sp, #12]
   1e6ec:	mov	r3, r6
   1e6f0:	bl	27330 <__assert_fail@plt+0x14c44>
   1e6f4:	add	sp, sp, #16
   1e6f8:	pop	{r4, r5, r6, r7, r8, pc}
   1e6fc:	andeq	lr, r4, r0, ror #10
   1e700:	andeq	lr, r4, ip, ror #10
   1e704:	ldrdeq	fp, [r3], -r1
   1e708:	andeq	lr, r4, r0, ror #9
   1e70c:	andeq	fp, r3, r0, ror #15
   1e710:	andeq	fp, r3, pc, ror #15
   1e714:	strdeq	fp, [r3], -ip
   1e718:	push	{r4, r5, r6, r7, r8, lr}
   1e71c:	mov	r5, r0
   1e720:	mov	r4, r1
   1e724:	ldr	r6, [pc, #228]	; 1e810 <__assert_fail@plt+0xc124>
   1e728:	ldr	r7, [pc, #228]	; 1e814 <__assert_fail@plt+0xc128>
   1e72c:	ldr	r8, [pc, #228]	; 1e818 <__assert_fail@plt+0xc12c>
   1e730:	ldrb	r2, [r5], #1
   1e734:	cmp	r2, #0
   1e738:	bne	1e744 <__assert_fail@plt+0xc058>
   1e73c:	mov	r0, #1
   1e740:	pop	{r4, r5, r6, r7, r8, pc}
   1e744:	cmp	r2, #12
   1e748:	beq	1e7e8 <__assert_fail@plt+0xc0fc>
   1e74c:	bhi	1e770 <__assert_fail@plt+0xc084>
   1e750:	cmp	r2, #9
   1e754:	beq	1e7e0 <__assert_fail@plt+0xc0f4>
   1e758:	cmp	r2, #10
   1e75c:	beq	1e7d8 <__assert_fail@plt+0xc0ec>
   1e760:	cmp	r2, #8
   1e764:	bne	1e788 <__assert_fail@plt+0xc09c>
   1e768:	ldr	r1, [pc, #172]	; 1e81c <__assert_fail@plt+0xc130>
   1e76c:	b	1e7c4 <__assert_fail@plt+0xc0d8>
   1e770:	cmp	r2, #32
   1e774:	beq	1e7f0 <__assert_fail@plt+0xc104>
   1e778:	bhi	1e7b0 <__assert_fail@plt+0xc0c4>
   1e77c:	cmp	r2, #13
   1e780:	ldreq	r1, [pc, #152]	; 1e820 <__assert_fail@plt+0xc134>
   1e784:	beq	1e7c4 <__assert_fail@plt+0xc0d8>
   1e788:	sub	r3, r2, #33	; 0x21
   1e78c:	cmp	r3, #93	; 0x5d
   1e790:	bhi	1e800 <__assert_fail@plt+0xc114>
   1e794:	mov	r1, r4
   1e798:	mov	r0, r2
   1e79c:	bl	125c0 <putc@plt>
   1e7a0:	cmn	r0, #1
   1e7a4:	bne	1e730 <__assert_fail@plt+0xc044>
   1e7a8:	mov	r0, #0
   1e7ac:	pop	{r4, r5, r6, r7, r8, pc}
   1e7b0:	cmp	r2, #34	; 0x22
   1e7b4:	beq	1e7f8 <__assert_fail@plt+0xc10c>
   1e7b8:	cmp	r2, #92	; 0x5c
   1e7bc:	ldreq	r1, [pc, #96]	; 1e824 <__assert_fail@plt+0xc138>
   1e7c0:	bne	1e788 <__assert_fail@plt+0xc09c>
   1e7c4:	mov	r0, r4
   1e7c8:	bl	123f8 <fprintf@plt>
   1e7cc:	cmp	r0, #0
   1e7d0:	bge	1e730 <__assert_fail@plt+0xc044>
   1e7d4:	b	1e7a8 <__assert_fail@plt+0xc0bc>
   1e7d8:	ldr	r1, [pc, #72]	; 1e828 <__assert_fail@plt+0xc13c>
   1e7dc:	b	1e7c4 <__assert_fail@plt+0xc0d8>
   1e7e0:	ldr	r1, [pc, #68]	; 1e82c <__assert_fail@plt+0xc140>
   1e7e4:	b	1e7c4 <__assert_fail@plt+0xc0d8>
   1e7e8:	mov	r1, r6
   1e7ec:	b	1e7c4 <__assert_fail@plt+0xc0d8>
   1e7f0:	mov	r1, r8
   1e7f4:	b	1e7c4 <__assert_fail@plt+0xc0d8>
   1e7f8:	ldr	r1, [pc, #48]	; 1e830 <__assert_fail@plt+0xc144>
   1e7fc:	b	1e7c4 <__assert_fail@plt+0xc0d8>
   1e800:	mov	r1, r7
   1e804:	mov	r0, r4
   1e808:	bl	123f8 <fprintf@plt>
   1e80c:	b	1e7cc <__assert_fail@plt+0xc0e0>
   1e810:	andeq	fp, r3, r7, lsr #16
   1e814:	andeq	fp, r3, r0, lsr r8
   1e818:	andeq	fp, r3, sl, lsr #16
   1e81c:	andeq	fp, r3, lr, lsl r8
   1e820:	andeq	fp, r3, r1, lsr #16
   1e824:	andeq	fp, r3, r8, lsl r8
   1e828:	andeq	fp, r3, fp, lsl r8
   1e82c:	andeq	fp, r3, r4, lsr #16
   1e830:	andeq	fp, r3, sp, lsr #16
   1e834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e838:	add	fp, sp, #32
   1e83c:	sub	sp, sp, #956	; 0x3bc
   1e840:	mov	r6, r3
   1e844:	ldr	r7, [pc, #1548]	; 1ee58 <__assert_fail@plt+0xc76c>
   1e848:	str	r2, [fp, #-968]	; 0xfffffc38
   1e84c:	str	r1, [fp, #-964]	; 0xfffffc3c
   1e850:	sub	r1, fp, #956	; 0x3bc
   1e854:	str	r0, [fp, #-960]	; 0xfffffc40
   1e858:	ldr	r0, [r3, #16]
   1e85c:	ldr	r8, [fp, #8]
   1e860:	ldr	r5, [fp, #16]
   1e864:	bl	1fac8 <__assert_fail@plt+0xd3dc>
   1e868:	ldr	r4, [r7]
   1e86c:	mov	r2, #1
   1e870:	mov	r3, #0
   1e874:	strd	r2, [sp]
   1e878:	strd	r2, [sp, #8]
   1e87c:	mov	r3, #0
   1e880:	sub	r2, fp, #688	; 0x2b0
   1e884:	ldrd	r0, [r6, #96]	; 0x60
   1e888:	bl	20a78 <__assert_fail@plt+0xe38c>
   1e88c:	mov	r3, r0
   1e890:	mov	r2, r4
   1e894:	ldr	r1, [pc, #1472]	; 1ee5c <__assert_fail@plt+0xc770>
   1e898:	mov	r0, r5
   1e89c:	bl	123f8 <fprintf@plt>
   1e8a0:	cmp	r0, #0
   1e8a4:	blt	1ed40 <__assert_fail@plt+0xc654>
   1e8a8:	ldr	r3, [r7]
   1e8ac:	mov	r1, r5
   1e8b0:	cmp	r3, r0
   1e8b4:	strlt	r0, [r7]
   1e8b8:	mov	r0, #32
   1e8bc:	bl	125c0 <putc@plt>
   1e8c0:	asr	r3, r8, #31
   1e8c4:	mov	r2, r8
   1e8c8:	ldr	sl, [r7, #4]
   1e8cc:	cmn	r0, #1
   1e8d0:	movne	r4, #0
   1e8d4:	moveq	r4, #150	; 0x96
   1e8d8:	strd	r2, [sp, #8]
   1e8dc:	mov	r2, #512	; 0x200
   1e8e0:	mov	r3, #0
   1e8e4:	movne	r9, #1
   1e8e8:	moveq	r9, #0
   1e8ec:	strd	r2, [sp]
   1e8f0:	mov	r3, #0
   1e8f4:	sub	r2, fp, #688	; 0x2b0
   1e8f8:	ldrd	r0, [r6, #64]	; 0x40
   1e8fc:	bl	20a78 <__assert_fail@plt+0xe38c>
   1e900:	mov	r3, r0
   1e904:	mov	r2, sl
   1e908:	ldr	r1, [pc, #1356]	; 1ee5c <__assert_fail@plt+0xc770>
   1e90c:	mov	r0, r5
   1e910:	bl	123f8 <fprintf@plt>
   1e914:	cmp	r0, #0
   1e918:	blt	1ed70 <__assert_fail@plt+0xc684>
   1e91c:	ldr	r3, [r7, #4]
   1e920:	cmp	r3, r0
   1e924:	strlt	r0, [r7, #4]
   1e928:	cmp	r9, #0
   1e92c:	beq	1ed44 <__assert_fail@plt+0xc658>
   1e930:	mov	r1, r5
   1e934:	mov	r0, #32
   1e938:	bl	125c0 <putc@plt>
   1e93c:	cmn	r0, #1
   1e940:	bne	1ee34 <__assert_fail@plt+0xc748>
   1e944:	mov	r4, #250	; 0xfa
   1e948:	b	1ed44 <__assert_fail@plt+0xc658>
   1e94c:	ldr	r3, [r7, #8]
   1e950:	mov	r1, r5
   1e954:	cmp	r3, r0
   1e958:	strlt	r0, [r7, #8]
   1e95c:	mov	r0, #32
   1e960:	bl	125c0 <putc@plt>
   1e964:	cmn	r0, #1
   1e968:	ldr	r0, [r6, #24]
   1e96c:	moveq	r4, #250	; 0xfa
   1e970:	bl	21338 <__assert_fail@plt+0xec4c>
   1e974:	subs	r9, r0, #0
   1e978:	beq	1ea04 <__assert_fail@plt+0xc318>
   1e97c:	mov	r1, #0
   1e980:	bl	2205c <__assert_fail@plt+0xf970>
   1e984:	ldr	r3, [r7, #12]
   1e988:	ldr	r1, [pc, #1232]	; 1ee60 <__assert_fail@plt+0xc774>
   1e98c:	cmp	r3, r0
   1e990:	mov	r3, r9
   1e994:	strlt	r0, [r7, #12]
   1e998:	mov	r0, r5
   1e99c:	ldr	r2, [r7, #12]
   1e9a0:	bl	123f8 <fprintf@plt>
   1e9a4:	mvn	r3, r0
   1e9a8:	cmp	r0, #0
   1e9ac:	lsr	r3, r3, #31
   1e9b0:	movlt	r4, #400	; 0x190
   1e9b4:	cmp	r3, #0
   1e9b8:	beq	1ed44 <__assert_fail@plt+0xc658>
   1e9bc:	ldr	r0, [r6, #28]
   1e9c0:	bl	21498 <__assert_fail@plt+0xedac>
   1e9c4:	subs	r9, r0, #0
   1e9c8:	beq	1ea38 <__assert_fail@plt+0xc34c>
   1e9cc:	mov	r1, #0
   1e9d0:	bl	2205c <__assert_fail@plt+0xf970>
   1e9d4:	ldr	r3, [r7, #16]
   1e9d8:	ldr	r1, [pc, #1152]	; 1ee60 <__assert_fail@plt+0xc774>
   1e9dc:	cmp	r3, r0
   1e9e0:	mov	r3, r9
   1e9e4:	strlt	r0, [r7, #16]
   1e9e8:	mov	r0, r5
   1e9ec:	ldr	r2, [r7, #16]
   1e9f0:	bl	123f8 <fprintf@plt>
   1e9f4:	cmp	r0, #0
   1e9f8:	bge	1ea78 <__assert_fail@plt+0xc38c>
   1e9fc:	mov	r4, #500	; 0x1f4
   1ea00:	b	1ed44 <__assert_fail@plt+0xc658>
   1ea04:	ldr	r1, [pc, #1112]	; 1ee64 <__assert_fail@plt+0xc778>
   1ea08:	mov	r0, r5
   1ea0c:	ldr	r2, [r6, #24]
   1ea10:	bl	123f8 <fprintf@plt>
   1ea14:	ldr	r3, [r7, #12]
   1ea18:	movw	r2, #450	; 0x1c2
   1ea1c:	cmp	r3, r0
   1ea20:	strlt	r0, [r7, #12]
   1ea24:	cmp	r0, #0
   1ea28:	movgt	r3, #1
   1ea2c:	movle	r3, #0
   1ea30:	movle	r4, r2
   1ea34:	b	1e9b4 <__assert_fail@plt+0xc2c8>
   1ea38:	ldr	r1, [pc, #1064]	; 1ee68 <__assert_fail@plt+0xc77c>
   1ea3c:	mov	r0, r5
   1ea40:	ldr	r2, [r7, #16]
   1ea44:	ldr	r3, [r6, #28]
   1ea48:	bl	123f8 <fprintf@plt>
   1ea4c:	ldr	r3, [r7, #16]
   1ea50:	cmp	r3, r0
   1ea54:	strlt	r0, [r7, #16]
   1ea58:	cmp	r0, #0
   1ea5c:	movwlt	r4, #550	; 0x226
   1ea60:	blt	1ed44 <__assert_fail@plt+0xc658>
   1ea64:	mov	r1, r5
   1ea68:	mov	r0, #32
   1ea6c:	bl	125c0 <putc@plt>
   1ea70:	cmn	r0, #1
   1ea74:	beq	1ed78 <__assert_fail@plt+0xc68c>
   1ea78:	ldr	r3, [r6, #16]
   1ea7c:	and	r3, r3, #45056	; 0xb000
   1ea80:	cmp	r3, #8192	; 0x2000
   1ea84:	bne	1eb20 <__assert_fail@plt+0xc434>
   1ea88:	ldrd	r0, [r6, #32]
   1ea8c:	bl	11fa8 <gnu_dev_major@plt>
   1ea90:	mov	r3, r0
   1ea94:	ldr	r1, [pc, #976]	; 1ee6c <__assert_fail@plt+0xc780>
   1ea98:	mov	r0, r5
   1ea9c:	ldr	r2, [r7, #20]
   1eaa0:	bl	123f8 <fprintf@plt>
   1eaa4:	cmp	r0, #0
   1eaa8:	movlt	r4, #600	; 0x258
   1eaac:	blt	1ed44 <__assert_fail@plt+0xc658>
   1eab0:	ldr	r3, [r7, #20]
   1eab4:	ldr	r1, [pc, #948]	; 1ee70 <__assert_fail@plt+0xc784>
   1eab8:	cmp	r0, r3
   1eabc:	strgt	r0, [r7, #20]
   1eac0:	mov	r0, r5
   1eac4:	bl	123f8 <fprintf@plt>
   1eac8:	cmp	r0, #0
   1eacc:	blt	1ed80 <__assert_fail@plt+0xc694>
   1ead0:	ldrd	r0, [r6, #32]
   1ead4:	bl	12038 <gnu_dev_minor@plt>
   1ead8:	mov	r3, r0
   1eadc:	ldr	r1, [pc, #904]	; 1ee6c <__assert_fail@plt+0xc780>
   1eae0:	mov	r0, r5
   1eae4:	ldr	r2, [r7, #24]
   1eae8:	bl	123f8 <fprintf@plt>
   1eaec:	cmp	r0, #0
   1eaf0:	movwlt	r4, #650	; 0x28a
   1eaf4:	blt	1ed44 <__assert_fail@plt+0xc658>
   1eaf8:	ldr	r3, [r7, #24]
   1eafc:	cmp	r0, r3
   1eb00:	strgt	r0, [r7, #24]
   1eb04:	mov	r1, r5
   1eb08:	mov	r0, #32
   1eb0c:	bl	125c0 <putc@plt>
   1eb10:	cmn	r0, #1
   1eb14:	bne	1ed90 <__assert_fail@plt+0xc6a4>
   1eb18:	movw	r4, #850	; 0x352
   1eb1c:	b	1ed44 <__assert_fail@plt+0xc658>
   1eb20:	cmp	r8, #0
   1eb24:	ldr	r9, [r7, #28]
   1eb28:	movge	r8, #1
   1eb2c:	asr	r3, r8, #31
   1eb30:	mov	r2, r8
   1eb34:	strd	r2, [sp, #8]
   1eb38:	mov	r2, #1
   1eb3c:	mov	r3, #0
   1eb40:	strd	r2, [sp]
   1eb44:	mov	r3, #0
   1eb48:	sub	r2, fp, #688	; 0x2b0
   1eb4c:	ldrd	r0, [r6, #48]	; 0x30
   1eb50:	bl	20a78 <__assert_fail@plt+0xe38c>
   1eb54:	mov	r3, r0
   1eb58:	mov	r2, r9
   1eb5c:	ldr	r1, [pc, #760]	; 1ee5c <__assert_fail@plt+0xc770>
   1eb60:	mov	r0, r5
   1eb64:	bl	123f8 <fprintf@plt>
   1eb68:	cmp	r0, #0
   1eb6c:	blt	1ed88 <__assert_fail@plt+0xc69c>
   1eb70:	ldr	r3, [r7, #28]
   1eb74:	cmp	r3, r0
   1eb78:	strlt	r0, [r7, #28]
   1eb7c:	b	1eb04 <__assert_fail@plt+0xc418>
   1eb80:	ldr	r2, [fp, #4]
   1eb84:	sub	r2, r2, #15532032	; 0xed0000
   1eb88:	sub	r2, r2, #19968	; 0x4e00
   1eb8c:	cmp	r2, r3
   1eb90:	ldrgt	r8, [pc, #732]	; 1ee74 <__assert_fail@plt+0xc788>
   1eb94:	bgt	1ebb0 <__assert_fail@plt+0xc4c4>
   1eb98:	ldr	r2, [fp, #4]
   1eb9c:	ldr	r8, [pc, #720]	; 1ee74 <__assert_fail@plt+0xc788>
   1eba0:	add	r1, r2, #3600	; 0xe10
   1eba4:	ldr	r2, [pc, #716]	; 1ee78 <__assert_fail@plt+0xc78c>
   1eba8:	cmp	r3, r1
   1ebac:	movle	r8, r2
   1ebb0:	mov	r7, #256	; 0x100
   1ebb4:	sub	sl, fp, #944	; 0x3b0
   1ebb8:	mov	r3, r9
   1ebbc:	mov	r2, r8
   1ebc0:	mov	r1, r7
   1ebc4:	mov	r0, sl
   1ebc8:	bl	12338 <strftime@plt>
   1ebcc:	cmp	r0, #0
   1ebd0:	beq	1ecbc <__assert_fail@plt+0xc5d0>
   1ebd4:	mov	r2, sl
   1ebd8:	ldr	r1, [pc, #668]	; 1ee7c <__assert_fail@plt+0xc790>
   1ebdc:	mov	r0, r5
   1ebe0:	bl	123f8 <fprintf@plt>
   1ebe4:	cmp	r0, #0
   1ebe8:	movlt	r4, #900	; 0x384
   1ebec:	blt	1ed44 <__assert_fail@plt+0xc658>
   1ebf0:	ldr	r3, [fp, #12]
   1ebf4:	cmp	r3, #0
   1ebf8:	beq	1ecfc <__assert_fail@plt+0xc610>
   1ebfc:	ldr	r1, [pc, #636]	; 1ee80 <__assert_fail@plt+0xc794>
   1ec00:	mov	r0, r5
   1ec04:	ldr	r2, [fp, #-960]	; 0xfffffc40
   1ec08:	bl	123f8 <fprintf@plt>
   1ec0c:	mvn	r7, r0
   1ec10:	lsr	r7, r7, #31
   1ec14:	cmp	r7, #0
   1ec18:	moveq	r4, #1200	; 0x4b0
   1ec1c:	beq	1ed44 <__assert_fail@plt+0xc658>
   1ec20:	ldr	r3, [r6, #16]
   1ec24:	and	r3, r3, #61440	; 0xf000
   1ec28:	cmp	r3, #40960	; 0xa000
   1ec2c:	bne	1eca0 <__assert_fail@plt+0xc5b4>
   1ec30:	ldr	r1, [fp, #-968]	; 0xfffffc38
   1ec34:	ldr	r0, [fp, #-964]	; 0xfffffc3c
   1ec38:	bl	1f4a8 <__assert_fail@plt+0xcdbc>
   1ec3c:	subs	r6, r0, #0
   1ec40:	beq	1ed24 <__assert_fail@plt+0xc638>
   1ec44:	mov	r1, r5
   1ec48:	ldr	r0, [pc, #564]	; 1ee84 <__assert_fail@plt+0xc798>
   1ec4c:	bl	12680 <fputs@plt>
   1ec50:	cmp	r0, #0
   1ec54:	movwlt	r4, #1300	; 0x514
   1ec58:	movlt	r7, #0
   1ec5c:	blt	1ec90 <__assert_fail@plt+0xc5a4>
   1ec60:	ldr	r3, [fp, #12]
   1ec64:	cmp	r3, #0
   1ec68:	beq	1ed10 <__assert_fail@plt+0xc624>
   1ec6c:	mov	r2, r6
   1ec70:	ldr	r1, [pc, #520]	; 1ee80 <__assert_fail@plt+0xc794>
   1ec74:	mov	r0, r5
   1ec78:	bl	123f8 <fprintf@plt>
   1ec7c:	mvn	r7, r0
   1ec80:	lsr	r7, r7, #31
   1ec84:	movw	r3, #1350	; 0x546
   1ec88:	cmp	r7, #0
   1ec8c:	moveq	r4, r3
   1ec90:	mov	r0, r6
   1ec94:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1ec98:	cmp	r7, #0
   1ec9c:	beq	1ed44 <__assert_fail@plt+0xc658>
   1eca0:	mov	r1, r5
   1eca4:	mov	r0, #10
   1eca8:	bl	125c0 <putc@plt>
   1ecac:	cmn	r0, #1
   1ecb0:	bne	1ee50 <__assert_fail@plt+0xc764>
   1ecb4:	movw	r4, #1400	; 0x578
   1ecb8:	b	1ed44 <__assert_fail@plt+0xc658>
   1ecbc:	lsl	r7, r7, #1
   1ecc0:	add	r3, r7, #7
   1ecc4:	bic	r3, r3, #7
   1ecc8:	sub	sp, sp, r3
   1eccc:	add	sl, sp, #16
   1ecd0:	b	1ebb8 <__assert_fail@plt+0xc4cc>
   1ecd4:	bl	20a78 <__assert_fail@plt+0xe38c>
   1ecd8:	mov	r3, r0
   1ecdc:	mov	r2, #12
   1ece0:	ldr	r1, [pc, #416]	; 1ee88 <__assert_fail@plt+0xc79c>
   1ece4:	mov	r0, r5
   1ece8:	bl	123f8 <fprintf@plt>
   1ecec:	cmp	r0, #0
   1ecf0:	bge	1ebf0 <__assert_fail@plt+0xc504>
   1ecf4:	movw	r4, #1100	; 0x44c
   1ecf8:	b	1ed44 <__assert_fail@plt+0xc658>
   1ecfc:	mov	r1, r5
   1ed00:	ldr	r0, [fp, #-960]	; 0xfffffc40
   1ed04:	bl	1e718 <__assert_fail@plt+0xc02c>
   1ed08:	mov	r7, r0
   1ed0c:	b	1ec14 <__assert_fail@plt+0xc528>
   1ed10:	mov	r1, r5
   1ed14:	mov	r0, r6
   1ed18:	bl	1e718 <__assert_fail@plt+0xc02c>
   1ed1c:	mov	r7, r0
   1ed20:	b	1ec84 <__assert_fail@plt+0xc598>
   1ed24:	bl	12404 <__errno_location@plt>
   1ed28:	ldr	r2, [pc, #336]	; 1ee80 <__assert_fail@plt+0xc794>
   1ed2c:	ldr	r3, [fp, #-960]	; 0xfffffc40
   1ed30:	ldr	r1, [r0]
   1ed34:	mov	r0, r6
   1ed38:	bl	122c0 <error@plt>
   1ed3c:	b	1ec90 <__assert_fail@plt+0xc5a4>
   1ed40:	mov	r4, #100	; 0x64
   1ed44:	bl	12404 <__errno_location@plt>
   1ed48:	ldr	r5, [r0]
   1ed4c:	mov	r2, #5
   1ed50:	mov	r0, #0
   1ed54:	ldr	r1, [pc, #304]	; 1ee8c <__assert_fail@plt+0xc7a0>
   1ed58:	bl	1217c <dcgettext@plt>
   1ed5c:	mov	r2, r0
   1ed60:	mov	r3, r4
   1ed64:	mov	r1, r5
   1ed68:	mov	r0, #1
   1ed6c:	bl	122c0 <error@plt>
   1ed70:	mov	r4, #200	; 0xc8
   1ed74:	b	1ed44 <__assert_fail@plt+0xc658>
   1ed78:	movw	r4, #525	; 0x20d
   1ed7c:	b	1ed44 <__assert_fail@plt+0xc658>
   1ed80:	movw	r4, #625	; 0x271
   1ed84:	b	1ed44 <__assert_fail@plt+0xc658>
   1ed88:	mov	r4, #800	; 0x320
   1ed8c:	b	1ed44 <__assert_fail@plt+0xc658>
   1ed90:	add	r0, r6, #80	; 0x50
   1ed94:	bl	12350 <localtime@plt>
   1ed98:	subs	r9, r0, #0
   1ed9c:	ldr	r3, [r6, #80]	; 0x50
   1eda0:	bne	1eb80 <__assert_fail@plt+0xc494>
   1eda4:	mov	r2, #1
   1eda8:	mov	r0, r3
   1edac:	asr	r1, r3, #31
   1edb0:	cmp	r3, #0
   1edb4:	mov	r3, #0
   1edb8:	strd	r2, [sp]
   1edbc:	strd	r2, [sp, #8]
   1edc0:	mov	r3, r9
   1edc4:	sub	r2, fp, #688	; 0x2b0
   1edc8:	bge	1ecd4 <__assert_fail@plt+0xc5e8>
   1edcc:	rsbs	r0, r0, #0
   1edd0:	rsc	r1, r1, #0
   1edd4:	bl	20a78 <__assert_fail@plt+0xe38c>
   1edd8:	mov	r7, r0
   1eddc:	bl	123bc <strlen@plt>
   1ede0:	rsb	r2, r0, #12
   1ede4:	ldr	r3, [pc, #164]	; 1ee90 <__assert_fail@plt+0xc7a4>
   1ede8:	mov	r0, r5
   1edec:	bic	r2, r2, r2, asr #31
   1edf0:	str	r7, [sp]
   1edf4:	ldr	r1, [pc, #152]	; 1ee94 <__assert_fail@plt+0xc7a8>
   1edf8:	bl	123f8 <fprintf@plt>
   1edfc:	cmp	r0, #0
   1ee00:	bge	1ebf0 <__assert_fail@plt+0xc504>
   1ee04:	mov	r4, #1000	; 0x3e8
   1ee08:	b	1ed44 <__assert_fail@plt+0xc658>
   1ee0c:	ldr	r7, [pc, #68]	; 1ee58 <__assert_fail@plt+0xc76c>
   1ee10:	mov	r0, r5
   1ee14:	ldr	r1, [pc, #80]	; 1ee6c <__assert_fail@plt+0xc780>
   1ee18:	ldr	r3, [r6, #20]
   1ee1c:	ldr	r2, [r7, #8]
   1ee20:	bl	123f8 <fprintf@plt>
   1ee24:	cmp	r0, #0
   1ee28:	bge	1e94c <__assert_fail@plt+0xc260>
   1ee2c:	mov	r4, #300	; 0x12c
   1ee30:	b	1ed44 <__assert_fail@plt+0xc658>
   1ee34:	mov	r1, r5
   1ee38:	sub	r0, fp, #956	; 0x3bc
   1ee3c:	bl	12680 <fputs@plt>
   1ee40:	cmp	r0, #0
   1ee44:	bge	1ee0c <__assert_fail@plt+0xc720>
   1ee48:	movw	r4, #275	; 0x113
   1ee4c:	b	1ed44 <__assert_fail@plt+0xc658>
   1ee50:	sub	sp, fp, #32
   1ee54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee58:	andeq	lr, r4, r4, ror #9
   1ee5c:	andeq	fp, r3, ip, asr #16
   1ee60:	andeq	fp, r3, r0, asr r8
   1ee64:	andeq	fp, r3, r6, asr r8
   1ee68:	andeq	fp, r3, sp, asr r8
   1ee6c:	andeq	fp, r3, r3, ror #16
   1ee70:	andeq	r8, r3, r8, ror lr
   1ee74:	andeq	fp, r3, r6, lsr r8
   1ee78:	andeq	fp, r3, r0, asr #16
   1ee7c:	andeq	fp, r3, fp, ror #16
   1ee80:	andeq	sp, r3, fp, lsl r2
   1ee84:	andeq	fp, r3, r4, ror r8
   1ee88:	andeq	fp, r3, pc, ror #16
   1ee8c:	andeq	fp, r3, r9, ror r8
   1ee90:	andeq	r9, r3, ip, lsl r6
   1ee94:	andeq	fp, r3, r8, ror #16
   1ee98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ee9c:	cmp	r2, #0
   1eea0:	sub	sp, sp, #8192	; 0x2000
   1eea4:	sub	sp, sp, #8
   1eea8:	mov	r7, r3
   1eeac:	beq	1ef60 <__assert_fail@plt+0xc874>
   1eeb0:	mov	r9, r1
   1eeb4:	add	r2, sp, #8192	; 0x2000
   1eeb8:	add	r5, sp, #8
   1eebc:	add	r2, r2, #40	; 0x28
   1eec0:	mov	sl, r0
   1eec4:	mvn	r3, #0
   1eec8:	str	r9, [sp]
   1eecc:	mov	r1, #8192	; 0x2000
   1eed0:	mov	r0, r5
   1eed4:	ldr	r2, [r2]
   1eed8:	bl	26388 <__assert_fail@plt+0x13c9c>
   1eedc:	cmp	r0, #8192	; 0x2000
   1eee0:	mov	r6, r0
   1eee4:	movcc	r4, r5
   1eee8:	bcc	1ef18 <__assert_fail@plt+0xc82c>
   1eeec:	add	r8, r0, #1
   1eef0:	mov	r0, r8
   1eef4:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1eef8:	add	r2, sp, #8192	; 0x2000
   1eefc:	mvn	r3, #0
   1ef00:	str	r9, [sp]
   1ef04:	add	r2, r2, #40	; 0x28
   1ef08:	mov	r1, r8
   1ef0c:	ldr	r2, [r2]
   1ef10:	mov	r4, r0
   1ef14:	bl	26388 <__assert_fail@plt+0x13c9c>
   1ef18:	mov	r1, r6
   1ef1c:	mov	r0, r4
   1ef20:	bl	1ef7c <__assert_fail@plt+0xc890>
   1ef24:	mov	r3, #0
   1ef28:	mov	r2, r4
   1ef2c:	mov	r1, r7
   1ef30:	strb	r3, [r4, r0]
   1ef34:	mov	r0, sl
   1ef38:	bl	123f8 <fprintf@plt>
   1ef3c:	cmp	r4, r5
   1ef40:	mov	r6, r0
   1ef44:	beq	1ef50 <__assert_fail@plt+0xc864>
   1ef48:	mov	r0, r4
   1ef4c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1ef50:	mov	r0, r6
   1ef54:	add	sp, sp, #8192	; 0x2000
   1ef58:	add	sp, sp, #8
   1ef5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ef60:	add	r3, sp, #8192	; 0x2000
   1ef64:	mov	r1, r7
   1ef68:	add	r3, r3, #40	; 0x28
   1ef6c:	ldr	r2, [r3]
   1ef70:	bl	123f8 <fprintf@plt>
   1ef74:	mov	r6, r0
   1ef78:	b	1ef50 <__assert_fail@plt+0xc864>
   1ef7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef80:	sub	sp, sp, #20
   1ef84:	mov	r6, r0
   1ef88:	mov	r4, r1
   1ef8c:	add	sl, r6, r4
   1ef90:	bl	12260 <__ctype_get_mb_cur_max@plt>
   1ef94:	cmp	r0, #1
   1ef98:	movls	r5, #63	; 0x3f
   1ef9c:	bls	1efe0 <__assert_fail@plt+0xc8f4>
   1efa0:	mov	r4, r6
   1efa4:	mov	r5, r6
   1efa8:	mov	r8, #0
   1efac:	mov	r9, #0
   1efb0:	cmp	r5, sl
   1efb4:	bcc	1eff4 <__assert_fail@plt+0xc908>
   1efb8:	sub	r4, r4, r6
   1efbc:	b	1efe8 <__assert_fail@plt+0xc8fc>
   1efc0:	bl	12374 <__ctype_b_loc@plt>
   1efc4:	ldrb	r3, [r6]
   1efc8:	add	r6, r6, #1
   1efcc:	ldr	r2, [r0]
   1efd0:	lsl	r3, r3, #1
   1efd4:	ldrh	r3, [r2, r3]
   1efd8:	tst	r3, #16384	; 0x4000
   1efdc:	strbeq	r5, [r6, #-1]
   1efe0:	cmp	sl, r6
   1efe4:	bhi	1efc0 <__assert_fail@plt+0xc8d4>
   1efe8:	mov	r0, r4
   1efec:	add	sp, sp, #20
   1eff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eff4:	ldrb	r3, [r5]
   1eff8:	add	r2, r4, #1
   1effc:	cmp	r3, #63	; 0x3f
   1f000:	bhi	1f028 <__assert_fail@plt+0xc93c>
   1f004:	cmp	r3, #37	; 0x25
   1f008:	bcs	1f018 <__assert_fail@plt+0xc92c>
   1f00c:	sub	r1, r3, #32
   1f010:	cmp	r1, #3
   1f014:	bhi	1f044 <__assert_fail@plt+0xc958>
   1f018:	add	r5, r5, #1
   1f01c:	strb	r3, [r4]
   1f020:	mov	r4, r2
   1f024:	b	1efb0 <__assert_fail@plt+0xc8c4>
   1f028:	cmp	r3, #65	; 0x41
   1f02c:	bcc	1f044 <__assert_fail@plt+0xc958>
   1f030:	cmp	r3, #95	; 0x5f
   1f034:	bls	1f018 <__assert_fail@plt+0xc92c>
   1f038:	sub	r1, r3, #97	; 0x61
   1f03c:	cmp	r1, #29
   1f040:	b	1f014 <__assert_fail@plt+0xc928>
   1f044:	mov	fp, #63	; 0x3f
   1f048:	strd	r8, [sp, #8]
   1f04c:	add	r3, sp, #8
   1f050:	sub	r2, sl, r5
   1f054:	mov	r1, r5
   1f058:	add	r0, sp, #4
   1f05c:	bl	2a36c <__assert_fail@plt+0x17c80>
   1f060:	cmn	r0, #1
   1f064:	mov	r7, r0
   1f068:	bne	1f07c <__assert_fail@plt+0xc990>
   1f06c:	mov	r3, #63	; 0x3f
   1f070:	add	r5, r5, #1
   1f074:	strb	r3, [r4], #1
   1f078:	b	1efb0 <__assert_fail@plt+0xc8c4>
   1f07c:	cmn	r0, #2
   1f080:	bne	1f094 <__assert_fail@plt+0xc9a8>
   1f084:	mov	r3, #63	; 0x3f
   1f088:	mov	r5, sl
   1f08c:	strb	r3, [r4], #1
   1f090:	b	1efb0 <__assert_fail@plt+0xc8c4>
   1f094:	cmp	r0, #0
   1f098:	ldr	r0, [sp, #4]
   1f09c:	moveq	r7, #1
   1f0a0:	bl	12074 <wcwidth@plt>
   1f0a4:	cmp	r0, #0
   1f0a8:	add	r3, r5, r7
   1f0ac:	movlt	r5, r3
   1f0b0:	strblt	fp, [r4], #1
   1f0b4:	blt	1f0d0 <__assert_fail@plt+0xc9e4>
   1f0b8:	sub	r2, r4, #1
   1f0bc:	ldrb	r1, [r5], #1
   1f0c0:	cmp	r5, r3
   1f0c4:	strb	r1, [r2, #1]!
   1f0c8:	bne	1f0bc <__assert_fail@plt+0xc9d0>
   1f0cc:	add	r4, r4, r7
   1f0d0:	add	r0, sp, #8
   1f0d4:	bl	12134 <mbsinit@plt>
   1f0d8:	cmp	r0, #0
   1f0dc:	beq	1f04c <__assert_fail@plt+0xc960>
   1f0e0:	b	1efb0 <__assert_fail@plt+0xc8c4>
   1f0e4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0e8:	mov	r5, #0
   1f0ec:	mov	r6, r0
   1f0f0:	mov	r7, r5
   1f0f4:	mov	fp, #12
   1f0f8:	ldr	r4, [pc, #224]	; 1f1e0 <__assert_fail@plt+0xcaf4>
   1f0fc:	mov	r8, r4
   1f100:	mul	sl, fp, r7
   1f104:	mov	r1, r6
   1f108:	ldr	r9, [sl, r4]
   1f10c:	mov	r0, r9
   1f110:	bl	11ffc <strcmp@plt>
   1f114:	cmp	r0, #0
   1f118:	beq	1f1d0 <__assert_fail@plt+0xcae4>
   1f11c:	mov	r0, r9
   1f120:	add	r7, r7, #1
   1f124:	bl	267f0 <__assert_fail@plt+0x14104>
   1f128:	bl	123bc <strlen@plt>
   1f12c:	add	r0, r0, #2
   1f130:	cmp	r7, #13
   1f134:	add	r5, r5, r0
   1f138:	bne	1f100 <__assert_fail@plt+0xca14>
   1f13c:	ldr	r7, [pc, #160]	; 1f1e4 <__assert_fail@plt+0xcaf8>
   1f140:	add	r0, r5, #1
   1f144:	mov	fp, #0
   1f148:	bl	273e0 <__assert_fail@plt+0x14cf4>
   1f14c:	ldr	sl, [pc, #148]	; 1f1e8 <__assert_fail@plt+0xcafc>
   1f150:	mov	r5, r0
   1f154:	mov	r4, r0
   1f158:	mov	r9, #12
   1f15c:	mul	r3, r9, fp
   1f160:	add	fp, fp, #1
   1f164:	ldr	r0, [r8, r3]
   1f168:	bl	267f0 <__assert_fail@plt+0x14104>
   1f16c:	mov	r2, r0
   1f170:	mov	r1, r7
   1f174:	mov	r0, r4
   1f178:	bl	12590 <sprintf@plt>
   1f17c:	cmp	fp, #13
   1f180:	add	r4, r4, r0
   1f184:	bne	1f1bc <__assert_fail@plt+0xcad0>
   1f188:	mov	r2, #5
   1f18c:	ldr	r1, [pc, #88]	; 1f1ec <__assert_fail@plt+0xcb00>
   1f190:	mov	r0, #0
   1f194:	bl	1217c <dcgettext@plt>
   1f198:	mov	r4, r0
   1f19c:	mov	r0, r6
   1f1a0:	bl	267f0 <__assert_fail@plt+0x14104>
   1f1a4:	mov	r3, r0
   1f1a8:	mov	r2, r4
   1f1ac:	str	r5, [sp]
   1f1b0:	mov	r1, #0
   1f1b4:	mov	r0, #1
   1f1b8:	bl	122c0 <error@plt>
   1f1bc:	mov	r0, r4
   1f1c0:	mov	r1, sl
   1f1c4:	bl	12278 <strcpy@plt>
   1f1c8:	add	r4, r4, #2
   1f1cc:	b	1f15c <__assert_fail@plt+0xca70>
   1f1d0:	add	r4, r4, sl
   1f1d4:	ldr	r0, [r4, #8]
   1f1d8:	add	sp, sp, #12
   1f1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1e0:	andeq	fp, r3, r0, lsr #17
   1f1e4:	andeq	sp, r3, fp, lsl r2
   1f1e8:	andeq	r8, r3, r8, ror lr
   1f1ec:	andeq	fp, r3, ip, lsr r9
   1f1f0:	cmp	r0, #12
   1f1f4:	movls	r3, #12
   1f1f8:	ldrls	r2, [pc, #12]	; 1f20c <__assert_fail@plt+0xcb20>
   1f1fc:	mulls	r3, r3, r0
   1f200:	ldrls	r0, [r2, r3]
   1f204:	movhi	r0, #0
   1f208:	bx	lr
   1f20c:	andeq	fp, r3, r0, lsr #17
   1f210:	cmp	r0, #12
   1f214:	ldrls	r3, [pc, #16]	; 1f22c <__assert_fail@plt+0xcb40>
   1f218:	movls	r2, #12
   1f21c:	mlals	r0, r2, r0, r3
   1f220:	ldrls	r0, [r0, #8]
   1f224:	mvnhi	r0, #0
   1f228:	bx	lr
   1f22c:	andeq	fp, r3, r0, lsr #17
   1f230:	cmp	r0, #12
   1f234:	ldrls	r3, [pc, #16]	; 1f24c <__assert_fail@plt+0xcb60>
   1f238:	movls	r2, #12
   1f23c:	mlals	r0, r2, r0, r3
   1f240:	ldrls	r0, [r0, #4]
   1f244:	movhi	r0, #0
   1f248:	bx	lr
   1f24c:	andeq	fp, r3, r0, lsr #17
   1f250:	cmp	r0, #12
   1f254:	bhi	1f274 <__assert_fail@plt+0xcb88>
   1f258:	ldr	r2, [pc, #88]	; 1f2b8 <__assert_fail@plt+0xcbcc>
   1f25c:	mov	r3, #12
   1f260:	mla	r3, r3, r0, r2
   1f264:	ldr	ip, [r3, #8]
   1f268:	mov	r3, #0
   1f26c:	cmp	r3, r0
   1f270:	bne	1f294 <__assert_fail@plt+0xcba8>
   1f274:	mvn	r0, #0
   1f278:	bx	lr
   1f27c:	add	r3, r3, #1
   1f280:	add	r2, r2, #12
   1f284:	cmp	r3, r0
   1f288:	bne	1f298 <__assert_fail@plt+0xcbac>
   1f28c:	mvn	r0, #0
   1f290:	pop	{pc}		; (ldr pc, [sp], #4)
   1f294:	push	{lr}		; (str lr, [sp, #-4]!)
   1f298:	ldr	lr, [r2, #4]
   1f29c:	tst	r1, lr
   1f2a0:	beq	1f27c <__assert_fail@plt+0xcb90>
   1f2a4:	ldr	lr, [r2, #8]
   1f2a8:	cmp	lr, ip
   1f2ac:	bne	1f27c <__assert_fail@plt+0xcb90>
   1f2b0:	mov	r0, r3
   1f2b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2b8:	andeq	fp, r3, r0, lsr #17
   1f2bc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f2c0:	mov	r8, #0
   1f2c4:	mov	r4, r0
   1f2c8:	mov	r7, r1
   1f2cc:	bl	12404 <__errno_location@plt>
   1f2d0:	mov	r5, r0
   1f2d4:	mov	r2, #10
   1f2d8:	str	r8, [r0]
   1f2dc:	add	r1, sp, #12
   1f2e0:	mov	r0, r4
   1f2e4:	bl	12008 <strtol@plt>
   1f2e8:	sub	r3, r0, #-2147483647	; 0x80000001
   1f2ec:	cmn	r3, #3
   1f2f0:	bls	1f308 <__assert_fail@plt+0xcc1c>
   1f2f4:	ldr	r2, [pc, #184]	; 1f3b4 <__assert_fail@plt+0xccc8>
   1f2f8:	mov	r3, r4
   1f2fc:	ldr	r1, [r5]
   1f300:	mov	r0, #1
   1f304:	bl	122c0 <error@plt>
   1f308:	ldr	r3, [sp, #12]
   1f30c:	ldrb	r6, [r3]
   1f310:	cmp	r6, #0
   1f314:	beq	1f36c <__assert_fail@plt+0xcc80>
   1f318:	mov	r2, #5
   1f31c:	ldr	r1, [pc, #148]	; 1f3b8 <__assert_fail@plt+0xcccc>
   1f320:	mov	r0, r8
   1f324:	ldr	r5, [r5]
   1f328:	bl	1217c <dcgettext@plt>
   1f32c:	mov	r6, r0
   1f330:	mov	r1, r7
   1f334:	ldr	r2, [sp, #12]
   1f338:	mov	r0, r8
   1f33c:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1f340:	mov	r8, r0
   1f344:	mov	r2, r4
   1f348:	mov	r1, r7
   1f34c:	mov	r0, #1
   1f350:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1f354:	mov	r3, r8
   1f358:	mov	r2, r6
   1f35c:	str	r0, [sp]
   1f360:	mov	r1, r5
   1f364:	mov	r0, #1
   1f368:	bl	122c0 <error@plt>
   1f36c:	cmp	r4, r3
   1f370:	bne	1f3ac <__assert_fail@plt+0xccc0>
   1f374:	ldr	r5, [r5]
   1f378:	mov	r2, #5
   1f37c:	mov	r0, r6
   1f380:	ldr	r1, [pc, #52]	; 1f3bc <__assert_fail@plt+0xccd0>
   1f384:	bl	1217c <dcgettext@plt>
   1f388:	mov	r8, r0
   1f38c:	mov	r2, r4
   1f390:	mov	r1, r7
   1f394:	mov	r0, r6
   1f398:	bl	265a0 <__assert_fail@plt+0x13eb4>
   1f39c:	mov	r3, r0
   1f3a0:	mov	r2, r8
   1f3a4:	mov	r1, r5
   1f3a8:	b	1f300 <__assert_fail@plt+0xcc14>
   1f3ac:	add	sp, sp, #16
   1f3b0:	pop	{r4, r5, r6, r7, r8, pc}
   1f3b4:	andeq	sp, r3, fp, lsl r2
   1f3b8:	ldrdeq	fp, [r3], -r9
   1f3bc:	strdeq	fp, [r3], -r4
   1f3c0:	push	{r4, r5, r6, lr}
   1f3c4:	mov	r4, r0
   1f3c8:	subs	r0, r2, #0
   1f3cc:	movne	r2, #0
   1f3d0:	ldr	r5, [sp, #16]
   1f3d4:	strne	r2, [r3]
   1f3d8:	strne	r2, [r5]
   1f3dc:	bne	1f404 <__assert_fail@plt+0xcd18>
   1f3e0:	ldr	r2, [r5]
   1f3e4:	ldr	ip, [r3]
   1f3e8:	add	ip, ip, r2
   1f3ec:	str	ip, [r3]
   1f3f0:	ldrb	r2, [r4, ip]
   1f3f4:	cmp	r2, #0
   1f3f8:	popeq	{r4, r5, r6, pc}
   1f3fc:	add	ip, ip, #1
   1f400:	str	ip, [r3]
   1f404:	ldr	r0, [r3]
   1f408:	ldrb	r3, [r1]
   1f40c:	add	r4, r4, r0
   1f410:	cmp	r3, #0
   1f414:	beq	1f42c <__assert_fail@plt+0xcd40>
   1f418:	mov	r0, r4
   1f41c:	bl	12608 <strpbrk@plt>
   1f420:	cmp	r0, #0
   1f424:	subne	r0, r0, r4
   1f428:	bne	1f434 <__assert_fail@plt+0xcd48>
   1f42c:	mov	r0, r4
   1f430:	bl	123bc <strlen@plt>
   1f434:	str	r0, [r5]
   1f438:	mov	r0, #1
   1f43c:	pop	{r4, r5, r6, pc}
   1f440:	push	{r4, r5, lr}
   1f444:	mov	r2, #5
   1f448:	sub	sp, sp, #20
   1f44c:	mov	r4, r0
   1f450:	mov	r5, r1
   1f454:	mov	r0, #0
   1f458:	ldr	r1, [pc, #52]	; 1f494 <__assert_fail@plt+0xcda8>
   1f45c:	bl	1217c <dcgettext@plt>
   1f460:	ldr	r3, [pc, #48]	; 1f498 <__assert_fail@plt+0xcdac>
   1f464:	mov	r1, r0
   1f468:	mov	r0, r4
   1f46c:	ldr	r2, [pc, #40]	; 1f49c <__assert_fail@plt+0xcdb0>
   1f470:	str	r3, [sp, #8]
   1f474:	ldr	r3, [pc, #36]	; 1f4a0 <__assert_fail@plt+0xcdb4>
   1f478:	str	r3, [sp, #4]
   1f47c:	ldr	r3, [pc, #32]	; 1f4a4 <__assert_fail@plt+0xcdb8>
   1f480:	str	r3, [sp]
   1f484:	mov	r3, r5
   1f488:	bl	123f8 <fprintf@plt>
   1f48c:	add	sp, sp, #20
   1f490:	pop	{r4, r5, pc}
   1f494:	andeq	fp, r3, ip, lsl #20
   1f498:	andeq	fp, r3, r1, lsl #22
   1f49c:	ldrdeq	fp, [r3], -sl
   1f4a0:	andeq	fp, r3, r7, lsl fp
   1f4a4:	strdeq	fp, [r3], -ip
   1f4a8:	ldr	r3, [pc, #28]	; 1f4cc <__assert_fail@plt+0xcde0>
   1f4ac:	push	{r0, r1, r2, lr}
   1f4b0:	str	r3, [sp, #4]
   1f4b4:	mov	r3, #0
   1f4b8:	mov	r2, r3
   1f4bc:	str	r3, [sp]
   1f4c0:	bl	1f608 <__assert_fail@plt+0xcf1c>
   1f4c4:	add	sp, sp, #12
   1f4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4cc:	andeq	r2, r1, ip, lsr #6
   1f4d0:	push	{r4, lr}
   1f4d4:	mov	r4, r0
   1f4d8:	mov	r0, #24
   1f4dc:	bl	2a340 <__assert_fail@plt+0x17c54>
   1f4e0:	cmp	r0, #0
   1f4e4:	movne	r3, #0
   1f4e8:	strne	r4, [r0, #16]
   1f4ec:	strne	r3, [r0]
   1f4f0:	strne	r4, [r0, #20]
   1f4f4:	pop	{r4, pc}
   1f4f8:	push	{r4, lr}
   1f4fc:	mov	r4, r0
   1f500:	mov	r0, #24
   1f504:	bl	2a340 <__assert_fail@plt+0x17c54>
   1f508:	cmp	r0, #0
   1f50c:	popeq	{r4, pc}
   1f510:	mov	r3, #0
   1f514:	str	r4, [r0]
   1f518:	str	r3, [r0, #4]
   1f51c:	str	r3, [r0, #8]
   1f520:	str	r3, [r0, #12]
   1f524:	str	r3, [r0, #16]
   1f528:	pop	{r4, pc}
   1f52c:	ldr	r3, [r0]
   1f530:	push	{r4, r5, r6, lr}
   1f534:	mov	r4, r0
   1f538:	cmp	r3, #0
   1f53c:	beq	1f598 <__assert_fail@plt+0xceac>
   1f540:	mov	r5, r1
   1f544:	mov	r2, #0
   1f548:	add	r1, r0, #12
   1f54c:	add	r0, r0, #8
   1f550:	bl	12644 <getdelim@plt>
   1f554:	cmp	r0, #0
   1f558:	bge	1f57c <__assert_fail@plt+0xce90>
   1f55c:	ldr	r0, [r4]
   1f560:	bl	12398 <feof@plt>
   1f564:	cmp	r0, #0
   1f568:	mov	r0, #0
   1f56c:	movne	r3, #2
   1f570:	moveq	r3, #4
   1f574:	str	r3, [r5]
   1f578:	pop	{r4, r5, r6, pc}
   1f57c:	mov	r3, #1
   1f580:	ldr	r0, [r4, #8]
   1f584:	str	r3, [r5]
   1f588:	ldr	r3, [r4, #4]
   1f58c:	add	r3, r3, #1
   1f590:	str	r3, [r4, #4]
   1f594:	pop	{r4, r5, r6, pc}
   1f598:	ldr	r3, [r0, #20]
   1f59c:	ldr	r0, [r3]
   1f5a0:	cmp	r0, #0
   1f5a4:	moveq	r3, #2
   1f5a8:	movne	r2, #1
   1f5ac:	addne	r3, r3, #4
   1f5b0:	strne	r2, [r1]
   1f5b4:	streq	r3, [r1]
   1f5b8:	strne	r3, [r4, #20]
   1f5bc:	pop	{r4, r5, r6, pc}
   1f5c0:	ldr	r3, [r0]
   1f5c4:	cmp	r3, #0
   1f5c8:	ldreq	r3, [r0, #20]
   1f5cc:	ldrne	r0, [r0, #4]
   1f5d0:	ldreq	r0, [r0, #16]
   1f5d4:	subeq	r0, r3, r0
   1f5d8:	asreq	r0, r0, #2
   1f5dc:	bx	lr
   1f5e0:	ldr	r3, [r0]
   1f5e4:	push	{r4, lr}
   1f5e8:	mov	r4, r0
   1f5ec:	cmp	r3, #0
   1f5f0:	beq	1f5fc <__assert_fail@plt+0xcf10>
   1f5f4:	ldr	r0, [r0, #8]
   1f5f8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   1f5fc:	mov	r0, r4
   1f600:	pop	{r4, lr}
   1f604:	b	284c4 <__assert_fail@plt+0x15dd8>
   1f608:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f60c:	sub	sp, sp, #1024	; 0x400
   1f610:	mov	r9, r1
   1f614:	mvn	r5, #-2147483648	; 0x80000000
   1f618:	mov	r7, r0
   1f61c:	ldr	r6, [sp, #1056]	; 0x420
   1f620:	ldr	r1, [pc, #344]	; 1f780 <__assert_fail@plt+0xd094>
   1f624:	ldr	sl, [sp, #1060]	; 0x424
   1f628:	cmp	r6, #0
   1f62c:	moveq	r6, r1
   1f630:	subs	r8, r2, #0
   1f634:	moveq	r3, #1024	; 0x400
   1f638:	moveq	r8, sp
   1f63c:	cmp	r3, r5
   1f640:	mov	r4, r8
   1f644:	movcc	r5, r3
   1f648:	mov	r3, r5
   1f64c:	mov	r2, r4
   1f650:	mov	r1, r9
   1f654:	mov	r0, r7
   1f658:	blx	sl
   1f65c:	cmp	r0, #0
   1f660:	bge	1f690 <__assert_fail@plt+0xcfa4>
   1f664:	cmp	r8, r4
   1f668:	beq	1f688 <__assert_fail@plt+0xcf9c>
   1f66c:	bl	12404 <__errno_location@plt>
   1f670:	mov	r5, r0
   1f674:	mov	r0, r4
   1f678:	ldr	r3, [r6, #8]
   1f67c:	ldr	r7, [r5]
   1f680:	blx	r3
   1f684:	str	r7, [r5]
   1f688:	mov	r4, #0
   1f68c:	b	1f6d4 <__assert_fail@plt+0xcfe8>
   1f690:	cmp	r0, r5
   1f694:	bge	1f710 <__assert_fail@plt+0xd024>
   1f698:	mov	r3, #0
   1f69c:	add	r7, r0, #1
   1f6a0:	strb	r3, [r4, r0]
   1f6a4:	mov	r3, sp
   1f6a8:	cmp	r4, r3
   1f6ac:	bne	1f6e0 <__assert_fail@plt+0xcff4>
   1f6b0:	mov	r0, r7
   1f6b4:	ldr	r3, [r6]
   1f6b8:	blx	r3
   1f6bc:	cmp	r0, #0
   1f6c0:	beq	1f778 <__assert_fail@plt+0xd08c>
   1f6c4:	mov	r1, r4
   1f6c8:	mov	r2, r7
   1f6cc:	bl	120f8 <memcpy@plt>
   1f6d0:	mov	r4, r0
   1f6d4:	mov	r0, r4
   1f6d8:	add	sp, sp, #1024	; 0x400
   1f6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f6e0:	cmp	r8, r4
   1f6e4:	cmpne	r7, r5
   1f6e8:	bge	1f6d4 <__assert_fail@plt+0xcfe8>
   1f6ec:	ldr	r3, [r6, #4]
   1f6f0:	cmp	r3, #0
   1f6f4:	beq	1f6d4 <__assert_fail@plt+0xcfe8>
   1f6f8:	mov	r0, r4
   1f6fc:	mov	r1, r7
   1f700:	blx	r3
   1f704:	cmp	r0, #0
   1f708:	movne	r4, r0
   1f70c:	b	1f6d4 <__assert_fail@plt+0xcfe8>
   1f710:	cmp	r8, r4
   1f714:	beq	1f724 <__assert_fail@plt+0xd038>
   1f718:	mov	r0, r4
   1f71c:	ldr	r3, [r6, #8]
   1f720:	blx	r3
   1f724:	cmn	r5, #-1073741822	; 0xc0000002
   1f728:	ble	1f73c <__assert_fail@plt+0xd050>
   1f72c:	bl	12404 <__errno_location@plt>
   1f730:	mov	r3, #36	; 0x24
   1f734:	str	r3, [r0]
   1f738:	b	1f688 <__assert_fail@plt+0xcf9c>
   1f73c:	lsl	r5, r5, #1
   1f740:	ldr	r3, [r6]
   1f744:	add	r5, r5, #1
   1f748:	mov	r0, r5
   1f74c:	blx	r3
   1f750:	subs	r4, r0, #0
   1f754:	bne	1f648 <__assert_fail@plt+0xcf5c>
   1f758:	ldr	r3, [r6, #12]
   1f75c:	cmp	r3, #0
   1f760:	beq	1f76c <__assert_fail@plt+0xd080>
   1f764:	mov	r0, r5
   1f768:	blx	r3
   1f76c:	bl	12404 <__errno_location@plt>
   1f770:	mov	r3, #12
   1f774:	b	1f734 <__assert_fail@plt+0xd048>
   1f778:	mov	r5, r7
   1f77c:	b	1f758 <__assert_fail@plt+0xd06c>
   1f780:			; <UNDEFINED> instruction: 0x0003d1b4
   1f784:	push	{r4, r5, r6, lr}
   1f788:	mov	r2, #0
   1f78c:	mov	r5, r1
   1f790:	mov	r1, #1
   1f794:	mov	r4, r0
   1f798:	bl	282c4 <__assert_fail@plt+0x15bd8>
   1f79c:	cmp	r0, #0
   1f7a0:	blt	1f7d8 <__assert_fail@plt+0xd0ec>
   1f7a4:	cmp	r5, #0
   1f7a8:	orrne	r2, r0, #1
   1f7ac:	biceq	r2, r0, #1
   1f7b0:	cmp	r2, r0
   1f7b4:	beq	1f7e0 <__assert_fail@plt+0xd0f4>
   1f7b8:	mov	r1, #2
   1f7bc:	mov	r0, r4
   1f7c0:	bl	282c4 <__assert_fail@plt+0x15bd8>
   1f7c4:	cmn	r0, #1
   1f7c8:	movne	r0, #0
   1f7cc:	moveq	r0, #1
   1f7d0:	rsb	r0, r0, #0
   1f7d4:	pop	{r4, r5, r6, pc}
   1f7d8:	mvn	r0, #0
   1f7dc:	pop	{r4, r5, r6, pc}
   1f7e0:	mov	r0, #0
   1f7e4:	pop	{r4, r5, r6, pc}
   1f7e8:	mov	r2, #0
   1f7ec:	movw	r1, #1030	; 0x406
   1f7f0:	b	282c4 <__assert_fail@plt+0x15bd8>
   1f7f4:	ldr	r3, [pc, #4]	; 1f800 <__assert_fail@plt+0xd114>
   1f7f8:	str	r0, [r3]
   1f7fc:	bx	lr
   1f800:	andeq	lr, r4, r4, lsl #26
   1f804:	ldr	r3, [pc, #4]	; 1f810 <__assert_fail@plt+0xd124>
   1f808:	strb	r0, [r3, #4]
   1f80c:	bx	lr
   1f810:	andeq	lr, r4, r4, lsl #26
   1f814:	ldr	r3, [pc, #176]	; 1f8cc <__assert_fail@plt+0xd1e0>
   1f818:	push	{r0, r1, r4, r5, r6, lr}
   1f81c:	ldr	r0, [r3]
   1f820:	bl	36c2c <__assert_fail@plt+0x24540>
   1f824:	cmp	r0, #0
   1f828:	beq	1f8b0 <__assert_fail@plt+0xd1c4>
   1f82c:	ldr	r4, [pc, #156]	; 1f8d0 <__assert_fail@plt+0xd1e4>
   1f830:	bl	12404 <__errno_location@plt>
   1f834:	mov	r5, r0
   1f838:	ldrb	r6, [r4, #4]
   1f83c:	cmp	r6, #0
   1f840:	beq	1f850 <__assert_fail@plt+0xd164>
   1f844:	ldr	r3, [r0]
   1f848:	cmp	r3, #32
   1f84c:	beq	1f8b0 <__assert_fail@plt+0xd1c4>
   1f850:	mov	r2, #5
   1f854:	ldr	r1, [pc, #120]	; 1f8d4 <__assert_fail@plt+0xd1e8>
   1f858:	mov	r0, #0
   1f85c:	bl	1217c <dcgettext@plt>
   1f860:	mov	r6, r0
   1f864:	ldr	r0, [r4]
   1f868:	cmp	r0, #0
   1f86c:	beq	1f89c <__assert_fail@plt+0xd1b0>
   1f870:	ldr	r4, [r5]
   1f874:	bl	266a0 <__assert_fail@plt+0x13fb4>
   1f878:	mov	r3, r0
   1f87c:	ldr	r2, [pc, #84]	; 1f8d8 <__assert_fail@plt+0xd1ec>
   1f880:	mov	r0, #0
   1f884:	str	r6, [sp]
   1f888:	mov	r1, r4
   1f88c:	bl	122c0 <error@plt>
   1f890:	ldr	r3, [pc, #68]	; 1f8dc <__assert_fail@plt+0xd1f0>
   1f894:	ldr	r0, [r3]
   1f898:	bl	120ec <_exit@plt>
   1f89c:	mov	r3, r6
   1f8a0:	ldr	r2, [pc, #56]	; 1f8e0 <__assert_fail@plt+0xd1f4>
   1f8a4:	ldr	r1, [r5]
   1f8a8:	bl	122c0 <error@plt>
   1f8ac:	b	1f890 <__assert_fail@plt+0xd1a4>
   1f8b0:	ldr	r3, [pc, #44]	; 1f8e4 <__assert_fail@plt+0xd1f8>
   1f8b4:	ldr	r0, [r3]
   1f8b8:	bl	36c2c <__assert_fail@plt+0x24540>
   1f8bc:	cmp	r0, #0
   1f8c0:	bne	1f890 <__assert_fail@plt+0xd1a4>
   1f8c4:	add	sp, sp, #8
   1f8c8:	pop	{r4, r5, r6, pc}
   1f8cc:	andeq	lr, r4, ip, ror #10
   1f8d0:	andeq	lr, r4, r4, lsl #26
   1f8d4:	andeq	fp, r3, r6, asr #22
   1f8d8:	andeq	fp, r3, r2, asr fp
   1f8dc:	andeq	lr, r4, r4, lsl #10
   1f8e0:	andeq	sp, r3, fp, lsl r2
   1f8e4:	andeq	lr, r4, r0, ror #10
   1f8e8:	push	{r4, r5, r6, r7, r8, lr}
   1f8ec:	bl	122d8 <opendir@plt>
   1f8f0:	subs	r4, r0, #0
   1f8f4:	beq	1f958 <__assert_fail@plt+0xd26c>
   1f8f8:	bl	125cc <dirfd@plt>
   1f8fc:	cmp	r0, #2
   1f900:	bhi	1f958 <__assert_fail@plt+0xd26c>
   1f904:	mov	r2, #3
   1f908:	movw	r1, #1030	; 0x406
   1f90c:	bl	282c4 <__assert_fail@plt+0x15bd8>
   1f910:	mov	r6, r0
   1f914:	bl	12404 <__errno_location@plt>
   1f918:	cmp	r6, #0
   1f91c:	mov	r5, r0
   1f920:	movlt	r7, #0
   1f924:	ldrlt	r8, [r0]
   1f928:	blt	1f948 <__assert_fail@plt+0xd25c>
   1f92c:	mov	r0, r6
   1f930:	bl	125a8 <fdopendir@plt>
   1f934:	subs	r7, r0, #0
   1f938:	ldr	r8, [r5]
   1f93c:	bne	1f948 <__assert_fail@plt+0xd25c>
   1f940:	mov	r0, r6
   1f944:	bl	126a4 <close@plt>
   1f948:	mov	r0, r4
   1f94c:	mov	r4, r7
   1f950:	bl	126bc <closedir@plt>
   1f954:	str	r8, [r5]
   1f958:	mov	r0, r4
   1f95c:	pop	{r4, r5, r6, r7, r8, pc}
   1f960:	push	{r4, r5, r6, lr}
   1f964:	mov	r6, r0
   1f968:	bl	369ac <__assert_fail@plt+0x242c0>
   1f96c:	ldrb	r3, [r0]
   1f970:	cmp	r3, #0
   1f974:	beq	1f9b0 <__assert_fail@plt+0xd2c4>
   1f978:	mov	r5, r0
   1f97c:	bl	36a04 <__assert_fail@plt+0x24318>
   1f980:	ldrb	r4, [r5, r0]
   1f984:	cmp	r4, #47	; 0x2f
   1f988:	movne	r4, r0
   1f98c:	addeq	r4, r0, #1
   1f990:	add	r0, r4, #1
   1f994:	bl	273f4 <__assert_fail@plt+0x14d08>
   1f998:	mov	r2, r4
   1f99c:	mov	r1, r5
   1f9a0:	bl	120f8 <memcpy@plt>
   1f9a4:	mov	r2, #0
   1f9a8:	strb	r2, [r0, r4]
   1f9ac:	pop	{r4, r5, r6, pc}
   1f9b0:	mov	r0, r6
   1f9b4:	mov	r5, r6
   1f9b8:	bl	36a04 <__assert_fail@plt+0x24318>
   1f9bc:	mov	r4, r0
   1f9c0:	b	1f990 <__assert_fail@plt+0xd2a4>
   1f9c4:	push	{r4, r5, r6, lr}
   1f9c8:	mov	r5, r0
   1f9cc:	ldrb	r4, [r0]
   1f9d0:	bl	369ac <__assert_fail@plt+0x242c0>
   1f9d4:	sub	r0, r0, r5
   1f9d8:	sub	r4, r4, #47	; 0x2f
   1f9dc:	clz	r4, r4
   1f9e0:	lsr	r4, r4, #5
   1f9e4:	cmp	r0, r4
   1f9e8:	popls	{r4, r5, r6, pc}
   1f9ec:	sub	r3, r0, #1
   1f9f0:	ldrb	r2, [r5, r3]
   1f9f4:	cmp	r2, #47	; 0x2f
   1f9f8:	popne	{r4, r5, r6, pc}
   1f9fc:	mov	r0, r3
   1fa00:	b	1f9e4 <__assert_fail@plt+0xd2f8>
   1fa04:	push	{r4, r5, r6, lr}
   1fa08:	mov	r6, r0
   1fa0c:	bl	1f9c4 <__assert_fail@plt+0xd2d8>
   1fa10:	add	r3, r0, #1
   1fa14:	mov	r4, r0
   1fa18:	cmp	r0, #0
   1fa1c:	movne	r0, r3
   1fa20:	addeq	r0, r3, #1
   1fa24:	bl	2a340 <__assert_fail@plt+0x17c54>
   1fa28:	subs	r5, r0, #0
   1fa2c:	beq	1fa54 <__assert_fail@plt+0xd368>
   1fa30:	mov	r2, r4
   1fa34:	mov	r1, r6
   1fa38:	bl	120f8 <memcpy@plt>
   1fa3c:	cmp	r4, #0
   1fa40:	moveq	r3, #46	; 0x2e
   1fa44:	moveq	r4, #1
   1fa48:	strbeq	r3, [r5]
   1fa4c:	mov	r3, #0
   1fa50:	strb	r3, [r5, r4]
   1fa54:	mov	r0, r5
   1fa58:	pop	{r4, r5, r6, pc}
   1fa5c:	push	{r4, lr}
   1fa60:	mov	r4, r0
   1fa64:	bl	369ac <__assert_fail@plt+0x242c0>
   1fa68:	ldrb	r3, [r0]
   1fa6c:	cmp	r3, #0
   1fa70:	movne	r4, r0
   1fa74:	mov	r0, r4
   1fa78:	bl	36a04 <__assert_fail@plt+0x24318>
   1fa7c:	ldrb	r3, [r4, r0]
   1fa80:	mov	r2, #0
   1fa84:	strb	r2, [r4, r0]
   1fa88:	subs	r0, r3, r2
   1fa8c:	movne	r0, #1
   1fa90:	pop	{r4, pc}
   1fa94:	push	{r1, r2, r3}
   1fa98:	push	{r0, r1, lr}
   1fa9c:	ldr	r1, [sp, #12]
   1faa0:	ands	r2, r1, #64	; 0x40
   1faa4:	ldrne	r2, [sp, #16]
   1faa8:	addne	r3, sp, #16
   1faac:	strne	r3, [sp, #4]
   1fab0:	bl	122f0 <open64@plt>
   1fab4:	bl	26f28 <__assert_fail@plt+0x1483c>
   1fab8:	add	sp, sp, #8
   1fabc:	pop	{lr}		; (ldr lr, [sp], #4)
   1fac0:	add	sp, sp, #12
   1fac4:	bx	lr
   1fac8:	and	r3, r0, #61440	; 0xf000
   1facc:	cmp	r3, #32768	; 0x8000
   1fad0:	moveq	r3, #45	; 0x2d
   1fad4:	beq	1fb20 <__assert_fail@plt+0xd434>
   1fad8:	cmp	r3, #16384	; 0x4000
   1fadc:	moveq	r3, #100	; 0x64
   1fae0:	beq	1fb20 <__assert_fail@plt+0xd434>
   1fae4:	cmp	r3, #24576	; 0x6000
   1fae8:	moveq	r3, #98	; 0x62
   1faec:	beq	1fb20 <__assert_fail@plt+0xd434>
   1faf0:	cmp	r3, #8192	; 0x2000
   1faf4:	moveq	r3, #99	; 0x63
   1faf8:	beq	1fb20 <__assert_fail@plt+0xd434>
   1fafc:	cmp	r3, #40960	; 0xa000
   1fb00:	moveq	r3, #108	; 0x6c
   1fb04:	beq	1fb20 <__assert_fail@plt+0xd434>
   1fb08:	cmp	r3, #4096	; 0x1000
   1fb0c:	moveq	r3, #112	; 0x70
   1fb10:	beq	1fb20 <__assert_fail@plt+0xd434>
   1fb14:	cmp	r3, #49152	; 0xc000
   1fb18:	moveq	r3, #115	; 0x73
   1fb1c:	movne	r3, #63	; 0x3f
   1fb20:	tst	r0, #256	; 0x100
   1fb24:	strb	r3, [r1]
   1fb28:	movne	r3, #114	; 0x72
   1fb2c:	moveq	r3, #45	; 0x2d
   1fb30:	tst	r0, #128	; 0x80
   1fb34:	strb	r3, [r1, #1]
   1fb38:	movne	r3, #119	; 0x77
   1fb3c:	moveq	r3, #45	; 0x2d
   1fb40:	tst	r0, #2048	; 0x800
   1fb44:	strb	r3, [r1, #2]
   1fb48:	and	r3, r0, #64	; 0x40
   1fb4c:	beq	1fbec <__assert_fail@plt+0xd500>
   1fb50:	cmp	r3, #0
   1fb54:	movne	r3, #115	; 0x73
   1fb58:	moveq	r3, #83	; 0x53
   1fb5c:	tst	r0, #32
   1fb60:	strb	r3, [r1, #3]
   1fb64:	movne	r3, #114	; 0x72
   1fb68:	moveq	r3, #45	; 0x2d
   1fb6c:	tst	r0, #16
   1fb70:	strb	r3, [r1, #4]
   1fb74:	movne	r3, #119	; 0x77
   1fb78:	moveq	r3, #45	; 0x2d
   1fb7c:	tst	r0, #1024	; 0x400
   1fb80:	strb	r3, [r1, #5]
   1fb84:	and	r3, r0, #8
   1fb88:	beq	1fbfc <__assert_fail@plt+0xd510>
   1fb8c:	cmp	r3, #0
   1fb90:	movne	r3, #115	; 0x73
   1fb94:	moveq	r3, #83	; 0x53
   1fb98:	tst	r0, #4
   1fb9c:	strb	r3, [r1, #6]
   1fba0:	movne	r3, #114	; 0x72
   1fba4:	moveq	r3, #45	; 0x2d
   1fba8:	tst	r0, #2
   1fbac:	strb	r3, [r1, #7]
   1fbb0:	movne	r3, #119	; 0x77
   1fbb4:	moveq	r3, #45	; 0x2d
   1fbb8:	tst	r0, #512	; 0x200
   1fbbc:	strb	r3, [r1, #8]
   1fbc0:	and	r3, r0, #1
   1fbc4:	beq	1fc0c <__assert_fail@plt+0xd520>
   1fbc8:	cmp	r3, #0
   1fbcc:	movne	r3, #116	; 0x74
   1fbd0:	moveq	r3, #84	; 0x54
   1fbd4:	strb	r3, [r1, #9]
   1fbd8:	mov	r3, #32
   1fbdc:	strb	r3, [r1, #10]
   1fbe0:	mov	r3, #0
   1fbe4:	strb	r3, [r1, #11]
   1fbe8:	bx	lr
   1fbec:	cmp	r3, #0
   1fbf0:	movne	r3, #120	; 0x78
   1fbf4:	moveq	r3, #45	; 0x2d
   1fbf8:	b	1fb5c <__assert_fail@plt+0xd470>
   1fbfc:	cmp	r3, #0
   1fc00:	movne	r3, #120	; 0x78
   1fc04:	moveq	r3, #45	; 0x2d
   1fc08:	b	1fb98 <__assert_fail@plt+0xd4ac>
   1fc0c:	cmp	r3, #0
   1fc10:	movne	r3, #120	; 0x78
   1fc14:	moveq	r3, #45	; 0x2d
   1fc18:	b	1fbd4 <__assert_fail@plt+0xd4e8>
   1fc1c:	ldr	r0, [r0, #16]
   1fc20:	b	1fac8 <__assert_fail@plt+0xd3dc>
   1fc24:	push	{r4, r5, r6, lr}
   1fc28:	mov	r6, r1
   1fc2c:	bl	125e4 <fopen64@plt>
   1fc30:	subs	r4, r0, #0
   1fc34:	beq	1fc6c <__assert_fail@plt+0xd580>
   1fc38:	bl	12488 <fileno@plt>
   1fc3c:	cmp	r0, #2
   1fc40:	bhi	1fc6c <__assert_fail@plt+0xd580>
   1fc44:	bl	26f1c <__assert_fail@plt+0x14830>
   1fc48:	subs	r5, r0, #0
   1fc4c:	bge	1fc74 <__assert_fail@plt+0xd588>
   1fc50:	bl	12404 <__errno_location@plt>
   1fc54:	mov	r5, r0
   1fc58:	mov	r0, r4
   1fc5c:	ldr	r6, [r5]
   1fc60:	bl	124d0 <fclose@plt>
   1fc64:	str	r6, [r5]
   1fc68:	mov	r4, #0
   1fc6c:	mov	r0, r4
   1fc70:	pop	{r4, r5, r6, pc}
   1fc74:	mov	r0, r4
   1fc78:	bl	124d0 <fclose@plt>
   1fc7c:	cmp	r0, #0
   1fc80:	beq	1fca0 <__assert_fail@plt+0xd5b4>
   1fc84:	bl	12404 <__errno_location@plt>
   1fc88:	mov	r4, r0
   1fc8c:	mov	r0, r5
   1fc90:	ldr	r6, [r4]
   1fc94:	bl	126a4 <close@plt>
   1fc98:	str	r6, [r4]
   1fc9c:	b	1fc68 <__assert_fail@plt+0xd57c>
   1fca0:	mov	r1, r6
   1fca4:	mov	r0, r5
   1fca8:	bl	11f6c <fdopen@plt>
   1fcac:	subs	r4, r0, #0
   1fcb0:	bne	1fc6c <__assert_fail@plt+0xd580>
   1fcb4:	b	1fc84 <__assert_fail@plt+0xd598>
   1fcb8:	ror	r0, r0, #3
   1fcbc:	udiv	r3, r0, r1
   1fcc0:	mls	r0, r3, r1, r0
   1fcc4:	bx	lr
   1fcc8:	sub	r0, r1, r0
   1fccc:	clz	r0, r0
   1fcd0:	lsr	r0, r0, #5
   1fcd4:	bx	lr
   1fcd8:	ldrb	r3, [r1, #16]
   1fcdc:	cmp	r3, #0
   1fce0:	bne	1fd0c <__assert_fail@plt+0xd620>
   1fce4:	vmov	s15, r0
   1fce8:	vldr	s14, [r1, #8]
   1fcec:	vcvt.f32.u32	s13, s15
   1fcf0:	vdiv.f32	s15, s13, s14
   1fcf4:	vldr	s14, [pc, #140]	; 1fd88 <__assert_fail@plt+0xd69c>
   1fcf8:	vcmpe.f32	s15, s14
   1fcfc:	vmrs	APSR_nzcv, fpscr
   1fd00:	bge	1fd20 <__assert_fail@plt+0xd634>
   1fd04:	vcvt.u32.f32	s15, s15
   1fd08:	vmov	r0, s15
   1fd0c:	cmp	r0, #10
   1fd10:	movcc	r0, #10
   1fd14:	orr	r0, r0, #1
   1fd18:	cmn	r0, #1
   1fd1c:	bne	1fd54 <__assert_fail@plt+0xd668>
   1fd20:	mov	r0, #0
   1fd24:	bx	lr
   1fd28:	add	r2, r3, #1
   1fd2c:	add	r3, r3, #2
   1fd30:	add	r1, r1, r2, lsl #2
   1fd34:	udiv	r2, r0, r3
   1fd38:	cmp	r0, r1
   1fd3c:	mls	r2, r3, r2, r0
   1fd40:	bls	1fd60 <__assert_fail@plt+0xd674>
   1fd44:	cmp	r2, #0
   1fd48:	bne	1fd28 <__assert_fail@plt+0xd63c>
   1fd4c:	add	r0, r0, #2
   1fd50:	b	1fd18 <__assert_fail@plt+0xd62c>
   1fd54:	mov	r1, #9
   1fd58:	mov	r3, #3
   1fd5c:	b	1fd34 <__assert_fail@plt+0xd648>
   1fd60:	cmp	r2, #0
   1fd64:	beq	1fd4c <__assert_fail@plt+0xd660>
   1fd68:	lsrs	r3, r0, #30
   1fd6c:	movne	r3, #1
   1fd70:	moveq	r3, #0
   1fd74:	tst	r0, #536870912	; 0x20000000
   1fd78:	bne	1fd20 <__assert_fail@plt+0xd634>
   1fd7c:	cmp	r3, #0
   1fd80:	bxeq	lr
   1fd84:	b	1fd20 <__assert_fail@plt+0xd634>
   1fd88:	svcmi	0x00800000
   1fd8c:	push	{r4, lr}
   1fd90:	mov	r4, r0
   1fd94:	mov	r0, r1
   1fd98:	ldr	r1, [r4, #8]
   1fd9c:	ldr	r3, [r4, #24]
   1fda0:	blx	r3
   1fda4:	ldr	r3, [r4, #8]
   1fda8:	cmp	r3, r0
   1fdac:	bhi	1fdb4 <__assert_fail@plt+0xd6c8>
   1fdb0:	bl	12698 <abort@plt>
   1fdb4:	ldr	r3, [r4]
   1fdb8:	add	r0, r3, r0, lsl #3
   1fdbc:	pop	{r4, pc}
   1fdc0:	push	{r4, r5, r6, r7, r8, lr}
   1fdc4:	mov	r8, r2
   1fdc8:	mov	r6, r1
   1fdcc:	mov	r5, r0
   1fdd0:	mov	r7, r3
   1fdd4:	bl	1fd8c <__assert_fail@plt+0xd6a0>
   1fdd8:	str	r0, [r8]
   1fddc:	ldr	r1, [r0]
   1fde0:	cmp	r1, #0
   1fde4:	bne	1fdf4 <__assert_fail@plt+0xd708>
   1fde8:	mov	r2, #0
   1fdec:	mov	r0, r2
   1fdf0:	pop	{r4, r5, r6, r7, r8, pc}
   1fdf4:	cmp	r1, r6
   1fdf8:	mov	r4, r0
   1fdfc:	beq	1fe14 <__assert_fail@plt+0xd728>
   1fe00:	mov	r0, r6
   1fe04:	ldr	r3, [r5, #28]
   1fe08:	blx	r3
   1fe0c:	cmp	r0, #0
   1fe10:	beq	1fe68 <__assert_fail@plt+0xd77c>
   1fe14:	cmp	r7, #0
   1fe18:	ldr	r2, [r4]
   1fe1c:	beq	1fdec <__assert_fail@plt+0xd700>
   1fe20:	ldr	r3, [r4, #4]
   1fe24:	cmp	r3, #0
   1fe28:	streq	r3, [r4]
   1fe2c:	beq	1fdec <__assert_fail@plt+0xd700>
   1fe30:	ldm	r3, {r0, r1}
   1fe34:	stm	r4, {r0, r1}
   1fe38:	mov	r1, #0
   1fe3c:	str	r1, [r3]
   1fe40:	ldr	r1, [r5, #36]	; 0x24
   1fe44:	str	r1, [r3, #4]
   1fe48:	str	r3, [r5, #36]	; 0x24
   1fe4c:	b	1fdec <__assert_fail@plt+0xd700>
   1fe50:	mov	r0, r6
   1fe54:	ldr	r3, [r5, #28]
   1fe58:	blx	r3
   1fe5c:	cmp	r0, #0
   1fe60:	bne	1fe80 <__assert_fail@plt+0xd794>
   1fe64:	ldr	r4, [r4, #4]
   1fe68:	ldr	r3, [r4, #4]
   1fe6c:	cmp	r3, #0
   1fe70:	beq	1fde8 <__assert_fail@plt+0xd6fc>
   1fe74:	ldr	r1, [r3]
   1fe78:	cmp	r1, r6
   1fe7c:	bne	1fe50 <__assert_fail@plt+0xd764>
   1fe80:	ldr	r3, [r4, #4]
   1fe84:	cmp	r7, #0
   1fe88:	ldr	r2, [r3]
   1fe8c:	beq	1fdec <__assert_fail@plt+0xd700>
   1fe90:	ldr	r1, [r3, #4]
   1fe94:	str	r1, [r4, #4]
   1fe98:	b	1fe38 <__assert_fail@plt+0xd74c>
   1fe9c:	ldr	r2, [pc, #164]	; 1ff48 <__assert_fail@plt+0xd85c>
   1fea0:	ldr	r3, [r0]
   1fea4:	cmp	r3, r2
   1fea8:	beq	1ff30 <__assert_fail@plt+0xd844>
   1feac:	vldr	s13, [pc, #132]	; 1ff38 <__assert_fail@plt+0xd84c>
   1feb0:	vldr	s14, [r3, #8]
   1feb4:	vcmpe.f32	s14, s13
   1feb8:	vmrs	APSR_nzcv, fpscr
   1febc:	ble	1ff24 <__assert_fail@plt+0xd838>
   1fec0:	vldr	s15, [pc, #116]	; 1ff3c <__assert_fail@plt+0xd850>
   1fec4:	vcmpe.f32	s14, s15
   1fec8:	vmrs	APSR_nzcv, fpscr
   1fecc:	bpl	1ff24 <__assert_fail@plt+0xd838>
   1fed0:	vldr	s15, [pc, #104]	; 1ff40 <__assert_fail@plt+0xd854>
   1fed4:	vldr	s12, [r3, #12]
   1fed8:	vcmpe.f32	s12, s15
   1fedc:	vmrs	APSR_nzcv, fpscr
   1fee0:	ble	1ff24 <__assert_fail@plt+0xd838>
   1fee4:	vldr	s15, [r3]
   1fee8:	vcmpe.f32	s15, #0.0
   1feec:	vmrs	APSR_nzcv, fpscr
   1fef0:	blt	1ff24 <__assert_fail@plt+0xd838>
   1fef4:	vadd.f32	s15, s15, s13
   1fef8:	vldr	s13, [r3, #4]
   1fefc:	vcmpe.f32	s15, s13
   1ff00:	vmrs	APSR_nzcv, fpscr
   1ff04:	bpl	1ff24 <__assert_fail@plt+0xd838>
   1ff08:	vldr	s12, [pc, #52]	; 1ff44 <__assert_fail@plt+0xd858>
   1ff0c:	vcmpe.f32	s13, s12
   1ff10:	vmrs	APSR_nzcv, fpscr
   1ff14:	bhi	1ff24 <__assert_fail@plt+0xd838>
   1ff18:	vcmpe.f32	s14, s15
   1ff1c:	vmrs	APSR_nzcv, fpscr
   1ff20:	bgt	1ff30 <__assert_fail@plt+0xd844>
   1ff24:	str	r2, [r0]
   1ff28:	mov	r0, #0
   1ff2c:	bx	lr
   1ff30:	mov	r0, #1
   1ff34:	bx	lr
   1ff38:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ff3c:	svccc	0x00666666
   1ff40:	svccc	0x008ccccd
   1ff44:	svccc	0x00800000
   1ff48:	andeq	fp, r3, ip, asr fp
   1ff4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ff50:	mov	r5, r0
   1ff54:	mov	r7, r1
   1ff58:	mov	r8, r2
   1ff5c:	mov	r9, #0
   1ff60:	ldr	r4, [r1]
   1ff64:	add	r4, r4, #8
   1ff68:	ldr	r2, [r7, #4]
   1ff6c:	sub	r3, r4, #8
   1ff70:	cmp	r2, r3
   1ff74:	bhi	1ff84 <__assert_fail@plt+0xd898>
   1ff78:	mov	r8, #1
   1ff7c:	mov	r0, r8
   1ff80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ff84:	ldr	r3, [r4, #-8]
   1ff88:	cmp	r3, #0
   1ff8c:	ldrne	r6, [r4, #-4]
   1ff90:	bne	1ffec <__assert_fail@plt+0xd900>
   1ff94:	add	r4, r4, #8
   1ff98:	b	1ff68 <__assert_fail@plt+0xd87c>
   1ff9c:	ldr	sl, [r6]
   1ffa0:	mov	r0, r5
   1ffa4:	mov	r1, sl
   1ffa8:	bl	1fd8c <__assert_fail@plt+0xd6a0>
   1ffac:	ldr	r2, [r0]
   1ffb0:	ldr	r1, [r6, #4]
   1ffb4:	cmp	r2, #0
   1ffb8:	ldrne	r3, [r0, #4]
   1ffbc:	strne	r3, [r6, #4]
   1ffc0:	strne	r6, [r0, #4]
   1ffc4:	bne	1ffe8 <__assert_fail@plt+0xd8fc>
   1ffc8:	ldr	r3, [r5, #12]
   1ffcc:	str	sl, [r0]
   1ffd0:	add	r3, r3, #1
   1ffd4:	str	r3, [r5, #12]
   1ffd8:	str	r2, [r6]
   1ffdc:	ldr	r3, [r5, #36]	; 0x24
   1ffe0:	str	r3, [r6, #4]
   1ffe4:	str	r6, [r5, #36]	; 0x24
   1ffe8:	mov	r6, r1
   1ffec:	cmp	r6, #0
   1fff0:	bne	1ff9c <__assert_fail@plt+0xd8b0>
   1fff4:	cmp	r8, #0
   1fff8:	str	r6, [r4, #-4]
   1fffc:	ldr	sl, [r4, #-8]
   20000:	bne	1ff94 <__assert_fail@plt+0xd8a8>
   20004:	mov	r1, sl
   20008:	mov	r0, r5
   2000c:	bl	1fd8c <__assert_fail@plt+0xd6a0>
   20010:	ldr	r3, [r0]
   20014:	mov	r6, r0
   20018:	cmp	r3, #0
   2001c:	beq	20068 <__assert_fail@plt+0xd97c>
   20020:	ldr	r0, [r5, #36]	; 0x24
   20024:	cmp	r0, #0
   20028:	ldrne	r3, [r0, #4]
   2002c:	strne	r3, [r5, #36]	; 0x24
   20030:	bne	20044 <__assert_fail@plt+0xd958>
   20034:	mov	r0, #8
   20038:	bl	2a340 <__assert_fail@plt+0x17c54>
   2003c:	cmp	r0, #0
   20040:	beq	1ff7c <__assert_fail@plt+0xd890>
   20044:	ldr	r3, [r6, #4]
   20048:	str	sl, [r0]
   2004c:	str	r3, [r0, #4]
   20050:	str	r0, [r6, #4]
   20054:	ldr	r3, [r7, #12]
   20058:	str	r9, [r4, #-8]
   2005c:	sub	r3, r3, #1
   20060:	str	r3, [r7, #12]
   20064:	b	1ff94 <__assert_fail@plt+0xd8a8>
   20068:	ldr	r3, [r5, #12]
   2006c:	str	sl, [r0]
   20070:	add	r3, r3, #1
   20074:	str	r3, [r5, #12]
   20078:	b	20054 <__assert_fail@plt+0xd968>
   2007c:	ldr	r0, [r0, #8]
   20080:	bx	lr
   20084:	ldr	r0, [r0, #12]
   20088:	bx	lr
   2008c:	ldr	r0, [r0, #16]
   20090:	bx	lr
   20094:	ldm	r0, {r3, ip}
   20098:	mov	r0, #0
   2009c:	cmp	ip, r3
   200a0:	bxls	lr
   200a4:	ldr	r2, [r3]
   200a8:	cmp	r2, #0
   200ac:	beq	200d4 <__assert_fail@plt+0xd9e8>
   200b0:	mov	r1, r3
   200b4:	mov	r2, #1
   200b8:	b	200c0 <__assert_fail@plt+0xd9d4>
   200bc:	add	r2, r2, #1
   200c0:	ldr	r1, [r1, #4]
   200c4:	cmp	r1, #0
   200c8:	bne	200bc <__assert_fail@plt+0xd9d0>
   200cc:	cmp	r0, r2
   200d0:	movcc	r0, r2
   200d4:	add	r3, r3, #8
   200d8:	b	2009c <__assert_fail@plt+0xd9b0>
   200dc:	push	{lr}		; (str lr, [sp, #-4]!)
   200e0:	mov	r3, #0
   200e4:	mov	r1, r3
   200e8:	ldm	r0, {r2, lr}
   200ec:	cmp	lr, r2
   200f0:	bhi	20114 <__assert_fail@plt+0xda28>
   200f4:	ldr	r2, [r0, #12]
   200f8:	cmp	r2, r1
   200fc:	ldreq	r0, [r0, #16]
   20100:	subeq	r0, r0, r3
   20104:	clzeq	r0, r0
   20108:	lsreq	r0, r0, #5
   2010c:	movne	r0, #0
   20110:	pop	{pc}		; (ldr pc, [sp], #4)
   20114:	ldr	ip, [r2]
   20118:	cmp	ip, #0
   2011c:	addne	r1, r1, #1
   20120:	addne	r3, r3, #1
   20124:	movne	ip, r2
   20128:	bne	20138 <__assert_fail@plt+0xda4c>
   2012c:	add	r2, r2, #8
   20130:	b	200ec <__assert_fail@plt+0xda00>
   20134:	add	r3, r3, #1
   20138:	ldr	ip, [ip, #4]
   2013c:	cmp	ip, #0
   20140:	bne	20134 <__assert_fail@plt+0xda48>
   20144:	b	2012c <__assert_fail@plt+0xda40>
   20148:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   2014c:	mov	r6, r0
   20150:	mov	r4, r1
   20154:	bl	20094 <__assert_fail@plt+0xd9a8>
   20158:	ldr	r5, [r6, #8]
   2015c:	mov	r8, r0
   20160:	mov	r0, r4
   20164:	ldr	r7, [r6, #12]
   20168:	ldr	r1, [pc, #104]	; 201d8 <__assert_fail@plt+0xdaec>
   2016c:	ldr	r2, [r6, #16]
   20170:	bl	123f8 <fprintf@plt>
   20174:	mov	r2, r5
   20178:	ldr	r1, [pc, #92]	; 201dc <__assert_fail@plt+0xdaf0>
   2017c:	mov	r0, r4
   20180:	bl	123f8 <fprintf@plt>
   20184:	vmov	s15, r7
   20188:	mov	r2, r7
   2018c:	mov	r0, r4
   20190:	ldr	r1, [pc, #72]	; 201e0 <__assert_fail@plt+0xdaf4>
   20194:	vcvt.f64.u32	d6, s15
   20198:	vldr	d7, [pc, #48]	; 201d0 <__assert_fail@plt+0xdae4>
   2019c:	vmul.f64	d6, d6, d7
   201a0:	vmov	s15, r5
   201a4:	vcvt.f64.u32	d7, s15
   201a8:	vdiv.f64	d5, d6, d7
   201ac:	vstr	d5, [sp]
   201b0:	bl	123f8 <fprintf@plt>
   201b4:	ldr	r1, [pc, #40]	; 201e4 <__assert_fail@plt+0xdaf8>
   201b8:	mov	r2, r8
   201bc:	mov	r0, r4
   201c0:	add	sp, sp, #8
   201c4:	pop	{r4, r5, r6, r7, r8, lr}
   201c8:	b	123f8 <fprintf@plt>
   201cc:	nop	{0}
   201d0:	andeq	r0, r0, r0
   201d4:	subsmi	r0, r9, r0
   201d8:	andeq	fp, r3, r0, ror fp
   201dc:	andeq	fp, r3, r8, lsl #23
   201e0:	andeq	fp, r3, r0, lsr #23
   201e4:	andeq	fp, r3, r1, asr #23
   201e8:	push	{r4, r5, r6, lr}
   201ec:	mov	r6, r0
   201f0:	mov	r5, r1
   201f4:	bl	1fd8c <__assert_fail@plt+0xd6a0>
   201f8:	ldr	r3, [r0]
   201fc:	cmp	r3, #0
   20200:	beq	2023c <__assert_fail@plt+0xdb50>
   20204:	mov	r4, r0
   20208:	ldr	r1, [r4]
   2020c:	cmp	r1, r5
   20210:	bne	2021c <__assert_fail@plt+0xdb30>
   20214:	ldr	r0, [r4]
   20218:	pop	{r4, r5, r6, pc}
   2021c:	mov	r0, r5
   20220:	ldr	r3, [r6, #28]
   20224:	blx	r3
   20228:	cmp	r0, #0
   2022c:	bne	20214 <__assert_fail@plt+0xdb28>
   20230:	ldr	r4, [r4, #4]
   20234:	cmp	r4, #0
   20238:	bne	20208 <__assert_fail@plt+0xdb1c>
   2023c:	mov	r0, #0
   20240:	pop	{r4, r5, r6, pc}
   20244:	ldr	r3, [r0, #16]
   20248:	cmp	r3, #0
   2024c:	beq	2027c <__assert_fail@plt+0xdb90>
   20250:	ldr	r3, [r0]
   20254:	ldr	r2, [r0, #4]
   20258:	cmp	r2, r3
   2025c:	bhi	20268 <__assert_fail@plt+0xdb7c>
   20260:	push	{r4, lr}
   20264:	bl	12698 <abort@plt>
   20268:	ldr	r0, [r3]
   2026c:	cmp	r0, #0
   20270:	bxne	lr
   20274:	add	r3, r3, #8
   20278:	b	20258 <__assert_fail@plt+0xdb6c>
   2027c:	mov	r0, r3
   20280:	bx	lr
   20284:	push	{r4, r5, r6, lr}
   20288:	mov	r4, r0
   2028c:	mov	r5, r1
   20290:	bl	1fd8c <__assert_fail@plt+0xd6a0>
   20294:	mov	r2, r0
   20298:	mov	r3, r0
   2029c:	ldm	r3, {r1, r3}
   202a0:	cmp	r1, r5
   202a4:	bne	202b8 <__assert_fail@plt+0xdbcc>
   202a8:	cmp	r3, #0
   202ac:	beq	202c0 <__assert_fail@plt+0xdbd4>
   202b0:	ldr	r0, [r3]
   202b4:	pop	{r4, r5, r6, pc}
   202b8:	cmp	r3, #0
   202bc:	bne	2029c <__assert_fail@plt+0xdbb0>
   202c0:	ldr	r3, [r4, #4]
   202c4:	add	r2, r2, #8
   202c8:	cmp	r3, r2
   202cc:	bhi	202d8 <__assert_fail@plt+0xdbec>
   202d0:	mov	r0, #0
   202d4:	pop	{r4, r5, r6, pc}
   202d8:	ldr	r0, [r2]
   202dc:	cmp	r0, #0
   202e0:	beq	202c4 <__assert_fail@plt+0xdbd8>
   202e4:	pop	{r4, r5, r6, pc}
   202e8:	ldr	ip, [r0]
   202ec:	mov	r3, #0
   202f0:	push	{r4, r5, lr}
   202f4:	ldr	lr, [r0, #4]
   202f8:	cmp	lr, ip
   202fc:	bhi	20308 <__assert_fail@plt+0xdc1c>
   20300:	mov	r0, r3
   20304:	pop	{r4, r5, pc}
   20308:	ldr	lr, [ip]
   2030c:	cmp	lr, #0
   20310:	beq	2033c <__assert_fail@plt+0xdc50>
   20314:	add	r4, r1, r3, lsl #2
   20318:	mov	lr, ip
   2031c:	cmp	r2, r3
   20320:	bls	20300 <__assert_fail@plt+0xdc14>
   20324:	ldr	r5, [lr]
   20328:	add	r3, r3, #1
   2032c:	str	r5, [r4], #4
   20330:	ldr	lr, [lr, #4]
   20334:	cmp	lr, #0
   20338:	bne	2031c <__assert_fail@plt+0xdc30>
   2033c:	add	ip, ip, #8
   20340:	b	202f4 <__assert_fail@plt+0xdc08>
   20344:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20348:	mov	r7, r0
   2034c:	mov	r8, r1
   20350:	mov	r9, r2
   20354:	mov	r6, #0
   20358:	ldr	r4, [r0]
   2035c:	ldr	r3, [r7, #4]
   20360:	cmp	r3, r4
   20364:	bhi	20370 <__assert_fail@plt+0xdc84>
   20368:	mov	r0, r6
   2036c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20370:	ldr	r3, [r4]
   20374:	cmp	r3, #0
   20378:	beq	203a4 <__assert_fail@plt+0xdcb8>
   2037c:	mov	r5, r4
   20380:	mov	r1, r9
   20384:	ldr	r0, [r5]
   20388:	blx	r8
   2038c:	cmp	r0, #0
   20390:	beq	20368 <__assert_fail@plt+0xdc7c>
   20394:	ldr	r5, [r5, #4]
   20398:	add	r6, r6, #1
   2039c:	cmp	r5, #0
   203a0:	bne	20380 <__assert_fail@plt+0xdc94>
   203a4:	add	r4, r4, #8
   203a8:	b	2035c <__assert_fail@plt+0xdc70>
   203ac:	sub	r2, r0, #1
   203b0:	mov	r0, #0
   203b4:	ldrb	r3, [r2, #1]!
   203b8:	cmp	r3, #0
   203bc:	bxeq	lr
   203c0:	rsb	r0, r0, r0, lsl #5
   203c4:	add	r0, r0, r3
   203c8:	udiv	r3, r0, r1
   203cc:	mls	r0, r1, r3, r0
   203d0:	b	203b4 <__assert_fail@plt+0xdcc8>
   203d4:	push	{lr}		; (str lr, [sp, #-4]!)
   203d8:	mov	ip, r0
   203dc:	ldr	lr, [pc, #16]	; 203f4 <__assert_fail@plt+0xdd08>
   203e0:	ldm	lr!, {r0, r1, r2, r3}
   203e4:	stmia	ip!, {r0, r1, r2, r3}
   203e8:	ldr	r3, [lr]
   203ec:	str	r3, [ip]
   203f0:	pop	{pc}		; (ldr pc, [sp], #4)
   203f4:	andeq	fp, r3, ip, asr fp
   203f8:	cmp	r2, #0
   203fc:	push	{r4, r5, r6, r7, r8, lr}
   20400:	mov	r8, r0
   20404:	mov	r0, #40	; 0x28
   20408:	mov	r5, r1
   2040c:	ldr	r7, [pc, #164]	; 204b8 <__assert_fail@plt+0xddcc>
   20410:	movne	r7, r2
   20414:	cmp	r3, #0
   20418:	ldr	r6, [pc, #156]	; 204bc <__assert_fail@plt+0xddd0>
   2041c:	movne	r6, r3
   20420:	bl	2a340 <__assert_fail@plt+0x17c54>
   20424:	subs	r4, r0, #0
   20428:	beq	204a0 <__assert_fail@plt+0xddb4>
   2042c:	ldr	r3, [pc, #140]	; 204c0 <__assert_fail@plt+0xddd4>
   20430:	cmp	r5, #0
   20434:	mov	r0, r4
   20438:	moveq	r5, r3
   2043c:	str	r5, [r0, #20]!
   20440:	bl	1fe9c <__assert_fail@plt+0xd7b0>
   20444:	cmp	r0, #0
   20448:	beq	204a8 <__assert_fail@plt+0xddbc>
   2044c:	mov	r1, r5
   20450:	mov	r0, r8
   20454:	bl	1fcd8 <__assert_fail@plt+0xd5ec>
   20458:	cmp	r0, #0
   2045c:	str	r0, [r4, #8]
   20460:	beq	204a8 <__assert_fail@plt+0xddbc>
   20464:	mov	r1, #8
   20468:	bl	27fbc <__assert_fail@plt+0x158d0>
   2046c:	cmp	r0, #0
   20470:	str	r0, [r4]
   20474:	beq	204a8 <__assert_fail@plt+0xddbc>
   20478:	ldr	r3, [r4, #8]
   2047c:	str	r7, [r4, #24]
   20480:	ldr	r2, [sp, #24]
   20484:	str	r6, [r4, #28]
   20488:	add	r0, r0, r3, lsl #3
   2048c:	mov	r3, #0
   20490:	str	r0, [r4, #4]
   20494:	str	r3, [r4, #12]
   20498:	str	r3, [r4, #16]
   2049c:	strd	r2, [r4, #32]
   204a0:	mov	r0, r4
   204a4:	pop	{r4, r5, r6, r7, r8, pc}
   204a8:	mov	r0, r4
   204ac:	mov	r4, #0
   204b0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   204b4:	b	204a0 <__assert_fail@plt+0xddb4>
   204b8:			; <UNDEFINED> instruction: 0x0001fcb8
   204bc:	andeq	pc, r1, r8, asr #25
   204c0:	andeq	fp, r3, ip, asr fp
   204c4:	push	{r4, r5, r6, r7, r8, lr}
   204c8:	mov	r5, r0
   204cc:	mov	r7, #0
   204d0:	ldr	r4, [r0]
   204d4:	add	r4, r4, #8
   204d8:	ldr	r2, [r5, #4]
   204dc:	sub	r3, r4, #8
   204e0:	cmp	r2, r3
   204e4:	bhi	204f8 <__assert_fail@plt+0xde0c>
   204e8:	mov	r3, #0
   204ec:	str	r3, [r5, #12]
   204f0:	str	r3, [r5, #16]
   204f4:	pop	{r4, r5, r6, r7, r8, pc}
   204f8:	ldr	r3, [r4, #-8]
   204fc:	cmp	r3, #0
   20500:	ldrne	r6, [r4, #-4]
   20504:	bne	20538 <__assert_fail@plt+0xde4c>
   20508:	add	r4, r4, #8
   2050c:	b	204d8 <__assert_fail@plt+0xddec>
   20510:	cmp	r3, #0
   20514:	beq	20520 <__assert_fail@plt+0xde34>
   20518:	ldr	r0, [r6]
   2051c:	blx	r3
   20520:	ldr	r3, [r6, #4]
   20524:	ldr	r2, [r5, #36]	; 0x24
   20528:	str	r7, [r6]
   2052c:	str	r2, [r6, #4]
   20530:	str	r6, [r5, #36]	; 0x24
   20534:	mov	r6, r3
   20538:	cmp	r6, #0
   2053c:	ldr	r3, [r5, #32]
   20540:	bne	20510 <__assert_fail@plt+0xde24>
   20544:	cmp	r3, #0
   20548:	beq	20554 <__assert_fail@plt+0xde68>
   2054c:	ldr	r0, [r4, #-8]
   20550:	blx	r3
   20554:	str	r7, [r4, #-8]
   20558:	str	r7, [r4, #-4]
   2055c:	b	20508 <__assert_fail@plt+0xde1c>
   20560:	ldr	r3, [r0, #32]
   20564:	push	{r4, r5, r6, lr}
   20568:	mov	r4, r0
   2056c:	cmp	r3, #0
   20570:	bne	205a4 <__assert_fail@plt+0xdeb8>
   20574:	ldr	r5, [r4]
   20578:	ldr	r3, [r4, #4]
   2057c:	cmp	r3, r5
   20580:	bhi	205f4 <__assert_fail@plt+0xdf08>
   20584:	ldr	r0, [r4, #36]	; 0x24
   20588:	cmp	r0, #0
   2058c:	bne	20614 <__assert_fail@plt+0xdf28>
   20590:	ldr	r0, [r4]
   20594:	bl	284c4 <__assert_fail@plt+0x15dd8>
   20598:	mov	r0, r4
   2059c:	pop	{r4, r5, r6, lr}
   205a0:	b	284c4 <__assert_fail@plt+0x15dd8>
   205a4:	ldr	r3, [r0, #16]
   205a8:	cmp	r3, #0
   205ac:	ldrne	r5, [r0]
   205b0:	beq	20574 <__assert_fail@plt+0xde88>
   205b4:	ldr	r3, [r4, #4]
   205b8:	cmp	r3, r5
   205bc:	bls	20574 <__assert_fail@plt+0xde88>
   205c0:	ldr	r3, [r5]
   205c4:	cmp	r3, #0
   205c8:	bne	205d4 <__assert_fail@plt+0xdee8>
   205cc:	add	r5, r5, #8
   205d0:	b	205b4 <__assert_fail@plt+0xdec8>
   205d4:	mov	r6, r5
   205d8:	ldr	r0, [r6]
   205dc:	ldr	r3, [r4, #32]
   205e0:	blx	r3
   205e4:	ldr	r6, [r6, #4]
   205e8:	cmp	r6, #0
   205ec:	bne	205d8 <__assert_fail@plt+0xdeec>
   205f0:	b	205cc <__assert_fail@plt+0xdee0>
   205f4:	ldr	r0, [r5, #4]
   205f8:	cmp	r0, #0
   205fc:	addeq	r5, r5, #8
   20600:	beq	20578 <__assert_fail@plt+0xde8c>
   20604:	ldr	r6, [r0, #4]
   20608:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2060c:	mov	r0, r6
   20610:	b	205f8 <__assert_fail@plt+0xdf0c>
   20614:	ldr	r5, [r0, #4]
   20618:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2061c:	mov	r0, r5
   20620:	b	20588 <__assert_fail@plt+0xde9c>
   20624:	push	{r4, r5, lr}
   20628:	mov	r4, r0
   2062c:	sub	sp, sp, #44	; 0x2c
   20630:	mov	r0, r1
   20634:	ldr	r1, [r4, #20]
   20638:	bl	1fcd8 <__assert_fail@plt+0xd5ec>
   2063c:	subs	r5, r0, #0
   20640:	bne	20654 <__assert_fail@plt+0xdf68>
   20644:	mov	r5, #0
   20648:	mov	r0, r5
   2064c:	add	sp, sp, #44	; 0x2c
   20650:	pop	{r4, r5, pc}
   20654:	ldr	r3, [r4, #8]
   20658:	cmp	r3, r5
   2065c:	beq	2073c <__assert_fail@plt+0xe050>
   20660:	mov	r1, #8
   20664:	bl	27fbc <__assert_fail@plt+0x158d0>
   20668:	cmp	r0, #0
   2066c:	str	r0, [sp]
   20670:	beq	20644 <__assert_fail@plt+0xdf58>
   20674:	ldr	r3, [r4, #20]
   20678:	mov	r2, #0
   2067c:	add	r0, r0, r5, lsl #3
   20680:	mov	r1, r4
   20684:	stmib	sp, {r0, r5}
   20688:	mov	r0, sp
   2068c:	str	r2, [sp, #12]
   20690:	strd	r2, [sp, #16]
   20694:	ldr	r3, [r4, #24]
   20698:	str	r3, [sp, #24]
   2069c:	ldr	r3, [r4, #28]
   206a0:	str	r3, [sp, #28]
   206a4:	ldr	r3, [r4, #32]
   206a8:	str	r3, [sp, #32]
   206ac:	ldr	r3, [r4, #36]	; 0x24
   206b0:	str	r3, [sp, #36]	; 0x24
   206b4:	bl	1ff4c <__assert_fail@plt+0xd860>
   206b8:	subs	r5, r0, #0
   206bc:	beq	206f4 <__assert_fail@plt+0xe008>
   206c0:	ldr	r0, [r4]
   206c4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   206c8:	ldr	r3, [sp]
   206cc:	str	r3, [r4]
   206d0:	ldr	r3, [sp, #4]
   206d4:	str	r3, [r4, #4]
   206d8:	ldr	r3, [sp, #8]
   206dc:	str	r3, [r4, #8]
   206e0:	ldr	r3, [sp, #12]
   206e4:	str	r3, [r4, #12]
   206e8:	ldr	r3, [sp, #36]	; 0x24
   206ec:	str	r3, [r4, #36]	; 0x24
   206f0:	b	20648 <__assert_fail@plt+0xdf5c>
   206f4:	ldr	r3, [sp, #36]	; 0x24
   206f8:	mov	r2, #1
   206fc:	mov	r1, sp
   20700:	mov	r0, r4
   20704:	str	r3, [r4, #36]	; 0x24
   20708:	bl	1ff4c <__assert_fail@plt+0xd860>
   2070c:	cmp	r0, #0
   20710:	bne	20718 <__assert_fail@plt+0xe02c>
   20714:	bl	12698 <abort@plt>
   20718:	mov	r2, r5
   2071c:	mov	r1, sp
   20720:	mov	r0, r4
   20724:	bl	1ff4c <__assert_fail@plt+0xd860>
   20728:	cmp	r0, #0
   2072c:	beq	20714 <__assert_fail@plt+0xe028>
   20730:	ldr	r0, [sp]
   20734:	bl	284c4 <__assert_fail@plt+0x15dd8>
   20738:	b	20648 <__assert_fail@plt+0xdf5c>
   2073c:	mov	r5, #1
   20740:	b	20648 <__assert_fail@plt+0xdf5c>
   20744:	push	{r0, r1, r4, r5, r6, lr}
   20748:	subs	r6, r1, #0
   2074c:	bne	20754 <__assert_fail@plt+0xe068>
   20750:	bl	12698 <abort@plt>
   20754:	mov	r5, r2
   20758:	mov	r3, #0
   2075c:	add	r2, sp, #4
   20760:	mov	r4, r0
   20764:	bl	1fdc0 <__assert_fail@plt+0xd6d4>
   20768:	cmp	r0, #0
   2076c:	beq	20784 <__assert_fail@plt+0xe098>
   20770:	cmp	r5, #0
   20774:	strne	r0, [r5]
   20778:	movne	r0, #0
   2077c:	moveq	r0, r5
   20780:	b	20804 <__assert_fail@plt+0xe118>
   20784:	vldr	s15, [r4, #12]
   20788:	ldr	r3, [r4, #20]
   2078c:	vcvt.f32.u32	s14, s15
   20790:	vldr	s15, [r4, #8]
   20794:	vldr	s13, [r3, #8]
   20798:	vcvt.f32.u32	s15, s15
   2079c:	vmul.f32	s15, s15, s13
   207a0:	vcmpe.f32	s14, s15
   207a4:	vmrs	APSR_nzcv, fpscr
   207a8:	ble	20840 <__assert_fail@plt+0xe154>
   207ac:	add	r0, r4, #20
   207b0:	bl	1fe9c <__assert_fail@plt+0xd7b0>
   207b4:	vldr	s15, [r4, #8]
   207b8:	vldr	s14, [r4, #12]
   207bc:	ldr	r3, [r4, #20]
   207c0:	vcvt.f32.u32	s15, s15
   207c4:	vcvt.f32.u32	s14, s14
   207c8:	vldr	s13, [r3, #8]
   207cc:	vmul.f32	s12, s13, s15
   207d0:	vcmpe.f32	s14, s12
   207d4:	vmrs	APSR_nzcv, fpscr
   207d8:	ble	20840 <__assert_fail@plt+0xe154>
   207dc:	vldr	s14, [r3, #12]
   207e0:	ldrb	r3, [r3, #16]
   207e4:	vmul.f32	s15, s15, s14
   207e8:	vldr	s14, [pc, #204]	; 208bc <__assert_fail@plt+0xe1d0>
   207ec:	cmp	r3, #0
   207f0:	vmuleq.f32	s15, s15, s13
   207f4:	vcmpe.f32	s15, s14
   207f8:	vmrs	APSR_nzcv, fpscr
   207fc:	blt	2080c <__assert_fail@plt+0xe120>
   20800:	mvn	r0, #0
   20804:	add	sp, sp, #8
   20808:	pop	{r4, r5, r6, pc}
   2080c:	vcvt.u32.f32	s15, s15
   20810:	mov	r0, r4
   20814:	vmov	r1, s15
   20818:	bl	20624 <__assert_fail@plt+0xdf38>
   2081c:	cmp	r0, #0
   20820:	beq	20800 <__assert_fail@plt+0xe114>
   20824:	mov	r3, #0
   20828:	add	r2, sp, #4
   2082c:	mov	r1, r6
   20830:	mov	r0, r4
   20834:	bl	1fdc0 <__assert_fail@plt+0xd6d4>
   20838:	cmp	r0, #0
   2083c:	bne	20750 <__assert_fail@plt+0xe064>
   20840:	ldr	r3, [sp, #4]
   20844:	ldr	r2, [r3]
   20848:	cmp	r2, #0
   2084c:	beq	2089c <__assert_fail@plt+0xe1b0>
   20850:	ldr	r0, [r4, #36]	; 0x24
   20854:	cmp	r0, #0
   20858:	ldrne	r3, [r0, #4]
   2085c:	strne	r3, [r4, #36]	; 0x24
   20860:	bne	20874 <__assert_fail@plt+0xe188>
   20864:	mov	r0, #8
   20868:	bl	2a340 <__assert_fail@plt+0x17c54>
   2086c:	cmp	r0, #0
   20870:	beq	20800 <__assert_fail@plt+0xe114>
   20874:	ldr	r3, [sp, #4]
   20878:	ldr	r2, [r3, #4]
   2087c:	str	r6, [r0]
   20880:	str	r2, [r0, #4]
   20884:	str	r0, [r3, #4]
   20888:	ldr	r3, [r4, #16]
   2088c:	add	r3, r3, #1
   20890:	str	r3, [r4, #16]
   20894:	mov	r0, #1
   20898:	b	20804 <__assert_fail@plt+0xe118>
   2089c:	str	r6, [r3]
   208a0:	ldr	r3, [r4, #16]
   208a4:	add	r3, r3, #1
   208a8:	str	r3, [r4, #16]
   208ac:	ldr	r3, [r4, #12]
   208b0:	add	r3, r3, #1
   208b4:	str	r3, [r4, #12]
   208b8:	b	20894 <__assert_fail@plt+0xe1a8>
   208bc:	svcmi	0x00800000
   208c0:	push	{r0, r1, r4, lr}
   208c4:	add	r2, sp, #4
   208c8:	mov	r4, r1
   208cc:	bl	20744 <__assert_fail@plt+0xe058>
   208d0:	cmn	r0, #1
   208d4:	moveq	r4, #0
   208d8:	beq	208e4 <__assert_fail@plt+0xe1f8>
   208dc:	cmp	r0, #0
   208e0:	ldreq	r4, [sp, #4]
   208e4:	mov	r0, r4
   208e8:	add	sp, sp, #8
   208ec:	pop	{r4, pc}
   208f0:	push	{r0, r1, r4, r5, r6, lr}
   208f4:	mov	r3, #1
   208f8:	add	r2, sp, #4
   208fc:	mov	r4, r0
   20900:	bl	1fdc0 <__assert_fail@plt+0xd6d4>
   20904:	subs	r5, r0, #0
   20908:	beq	209c0 <__assert_fail@plt+0xe2d4>
   2090c:	ldr	r3, [r4, #16]
   20910:	sub	r3, r3, #1
   20914:	str	r3, [r4, #16]
   20918:	ldr	r3, [sp, #4]
   2091c:	ldr	r3, [r3]
   20920:	cmp	r3, #0
   20924:	bne	209c0 <__assert_fail@plt+0xe2d4>
   20928:	vldr	s14, [r4, #8]
   2092c:	ldr	r3, [r4, #12]
   20930:	vcvt.f32.u32	s14, s14
   20934:	sub	r3, r3, #1
   20938:	vmov	s15, r3
   2093c:	str	r3, [r4, #12]
   20940:	ldr	r3, [r4, #20]
   20944:	vldr	s13, [r3]
   20948:	vcvt.f32.u32	s15, s15
   2094c:	vmul.f32	s14, s14, s13
   20950:	vcmpe.f32	s15, s14
   20954:	vmrs	APSR_nzcv, fpscr
   20958:	bpl	209c0 <__assert_fail@plt+0xe2d4>
   2095c:	add	r0, r4, #20
   20960:	bl	1fe9c <__assert_fail@plt+0xd7b0>
   20964:	vldr	s15, [r4, #8]
   20968:	vldr	s14, [r4, #12]
   2096c:	ldr	r3, [r4, #20]
   20970:	vcvt.f32.u32	s15, s15
   20974:	vcvt.f32.u32	s13, s14
   20978:	vldr	s14, [r3]
   2097c:	vmul.f32	s14, s15, s14
   20980:	vcmpe.f32	s13, s14
   20984:	vmrs	APSR_nzcv, fpscr
   20988:	bpl	209c0 <__assert_fail@plt+0xe2d4>
   2098c:	ldrb	r2, [r3, #16]
   20990:	mov	r0, r4
   20994:	vldr	s14, [r3, #4]
   20998:	cmp	r2, #0
   2099c:	vmul.f32	s15, s15, s14
   209a0:	vldreq	s14, [r3, #8]
   209a4:	vmuleq.f32	s15, s15, s14
   209a8:	vcvt.u32.f32	s15, s15
   209ac:	vmov	r1, s15
   209b0:	bl	20624 <__assert_fail@plt+0xdf38>
   209b4:	cmp	r0, #0
   209b8:	ldreq	r0, [r4, #36]	; 0x24
   209bc:	beq	209d8 <__assert_fail@plt+0xe2ec>
   209c0:	mov	r0, r5
   209c4:	add	sp, sp, #8
   209c8:	pop	{r4, r5, r6, pc}
   209cc:	ldr	r6, [r0, #4]
   209d0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   209d4:	mov	r0, r6
   209d8:	cmp	r0, #0
   209dc:	bne	209cc <__assert_fail@plt+0xe2e0>
   209e0:	str	r0, [r4, #36]	; 0x24
   209e4:	b	209c0 <__assert_fail@plt+0xe2d4>
   209e8:	b	208f0 <__assert_fail@plt+0xe204>
   209ec:	andeq	r0, r0, r0
   209f0:	cmp	r0, #1
   209f4:	push	{r4, r6, r7, lr}
   209f8:	vpush	{d8}
   209fc:	vmov.f64	d8, d0
   20a00:	beq	20a64 <__assert_fail@plt+0xe378>
   20a04:	vldr	d7, [pc, #100]	; 20a70 <__assert_fail@plt+0xe384>
   20a08:	vcmpe.f64	d0, d7
   20a0c:	vmrs	APSR_nzcv, fpscr
   20a10:	bpl	20a64 <__assert_fail@plt+0xe378>
   20a14:	mov	r4, r0
   20a18:	vmov	r0, r1, d0
   20a1c:	bl	37700 <__assert_fail@plt+0x25014>
   20a20:	cmp	r4, #0
   20a24:	mov	r6, r0
   20a28:	mov	r7, r1
   20a2c:	movne	r0, #0
   20a30:	bne	20a4c <__assert_fail@plt+0xe360>
   20a34:	bl	37568 <__assert_fail@plt+0x24e7c>
   20a38:	vmov	d7, r0, r1
   20a3c:	vcmp.f64	d7, d8
   20a40:	vmrs	APSR_nzcv, fpscr
   20a44:	movne	r0, #1
   20a48:	moveq	r0, #0
   20a4c:	adds	r2, r6, r0
   20a50:	adc	r3, r7, r0, asr #31
   20a54:	mov	r0, r2
   20a58:	mov	r1, r3
   20a5c:	bl	37568 <__assert_fail@plt+0x24e7c>
   20a60:	vmov	d8, r0, r1
   20a64:	vmov.f64	d0, d8
   20a68:	vpop	{d8}
   20a6c:	pop	{r4, r6, r7, pc}
   20a70:	andeq	r0, r0, r0
   20a74:	mvnsmi	r0, #0
   20a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a7c:	mov	r7, r1
   20a80:	add	r5, r2, #644	; 0x284
   20a84:	mov	fp, r2
   20a88:	mov	r6, r0
   20a8c:	add	r5, r5, #3
   20a90:	vpush	{d8-d9}
   20a94:	sub	sp, sp, #100	; 0x64
   20a98:	str	r3, [sp]
   20a9c:	and	r3, r3, #3
   20aa0:	str	r3, [sp, #12]
   20aa4:	ldr	r3, [sp]
   20aa8:	ands	r3, r3, #32
   20aac:	str	r3, [sp, #32]
   20ab0:	movne	r3, #1024	; 0x400
   20ab4:	moveq	r3, #1000	; 0x3e8
   20ab8:	str	r3, [sp, #4]
   20abc:	bl	12584 <localeconv@plt>
   20ac0:	ldr	r3, [r0]
   20ac4:	mov	r4, r0
   20ac8:	mov	r0, r3
   20acc:	str	r3, [sp, #16]
   20ad0:	bl	123bc <strlen@plt>
   20ad4:	sub	r3, r0, #1
   20ad8:	ldr	r2, [sp, #16]
   20adc:	cmp	r3, #16
   20ae0:	mov	r3, r0
   20ae4:	movcc	r3, r0
   20ae8:	movcs	r3, #1
   20aec:	str	r3, [sp, #8]
   20af0:	ldr	r3, [pc, #1728]	; 211b8 <__assert_fail@plt+0xeacc>
   20af4:	movcc	r3, r2
   20af8:	str	r3, [sp, #16]
   20afc:	ldr	r3, [r4, #8]
   20b00:	str	r3, [sp, #36]	; 0x24
   20b04:	ldr	r3, [r4, #4]
   20b08:	mov	r0, r3
   20b0c:	str	r3, [sp, #20]
   20b10:	bl	123bc <strlen@plt>
   20b14:	ldr	r3, [pc, #1696]	; 211bc <__assert_fail@plt+0xead0>
   20b18:	cmp	r0, #16
   20b1c:	ldr	r2, [sp, #20]
   20b20:	ldrd	r0, [sp, #152]	; 0x98
   20b24:	movhi	r2, r3
   20b28:	str	r2, [sp, #20]
   20b2c:	ldrd	r2, [sp, #160]	; 0xa0
   20b30:	cmp	r3, r1
   20b34:	cmpeq	r2, r0
   20b38:	bhi	20b84 <__assert_fail@plt+0xe498>
   20b3c:	bl	376b0 <__assert_fail@plt+0x24fc4>
   20b40:	orrs	r3, r2, r3
   20b44:	bne	20cd4 <__assert_fail@plt+0xe5e8>
   20b48:	mul	r3, r0, r7
   20b4c:	mov	r2, r0
   20b50:	umull	r8, r9, r0, r6
   20b54:	mla	r3, r6, r1, r3
   20b58:	mov	r0, r8
   20b5c:	add	r9, r3, r9
   20b60:	mov	r3, r1
   20b64:	mov	r1, r9
   20b68:	bl	376b0 <__assert_fail@plt+0x24fc4>
   20b6c:	cmp	r1, r7
   20b70:	cmpeq	r0, r6
   20b74:	bne	20cd4 <__assert_fail@plt+0xe5e8>
   20b78:	mov	sl, #0
   20b7c:	mov	r7, sl
   20b80:	b	20c18 <__assert_fail@plt+0xe52c>
   20b84:	ldrd	r2, [sp, #152]	; 0x98
   20b88:	orrs	r3, r2, r3
   20b8c:	beq	20cd4 <__assert_fail@plt+0xe5e8>
   20b90:	ldrd	r2, [sp, #152]	; 0x98
   20b94:	ldrd	r0, [sp, #160]	; 0xa0
   20b98:	bl	376b0 <__assert_fail@plt+0x24fc4>
   20b9c:	orrs	r3, r2, r3
   20ba0:	strd	r0, [sp, #40]	; 0x28
   20ba4:	bne	20cd4 <__assert_fail@plt+0xe5e8>
   20ba8:	mov	r2, r0
   20bac:	mov	r3, r1
   20bb0:	mov	r0, r6
   20bb4:	mov	r1, r7
   20bb8:	bl	376b0 <__assert_fail@plt+0x24fc4>
   20bbc:	mov	ip, #10
   20bc0:	mov	r6, r0
   20bc4:	mov	r4, r1
   20bc8:	mov	r8, r6
   20bcc:	umull	r0, r1, r2, ip
   20bd0:	mov	r9, r4
   20bd4:	mla	r1, ip, r3, r1
   20bd8:	ldrd	r2, [sp, #40]	; 0x28
   20bdc:	bl	376b0 <__assert_fail@plt+0x24fc4>
   20be0:	adds	r2, r2, r2
   20be4:	mov	r7, r0
   20be8:	adc	r3, r3, r3
   20bec:	strd	r2, [sp, #24]
   20bf0:	ldrd	r0, [sp, #24]
   20bf4:	ldrd	r2, [sp, #40]	; 0x28
   20bf8:	cmp	r3, r1
   20bfc:	cmpeq	r2, r0
   20c00:	bls	20cc8 <__assert_fail@plt+0xe5dc>
   20c04:	ldr	r3, [sp, #24]
   20c08:	ldr	r2, [sp, #28]
   20c0c:	orrs	r3, r3, r2
   20c10:	movne	sl, #1
   20c14:	moveq	sl, #0
   20c18:	ldr	r3, [sp]
   20c1c:	ands	r3, r3, #16
   20c20:	moveq	r4, r5
   20c24:	mvneq	r6, #0
   20c28:	str	r3, [sp, #40]	; 0x28
   20c2c:	beq	20f74 <__assert_fail@plt+0xe888>
   20c30:	ldr	r2, [sp, #4]
   20c34:	mov	r3, #0
   20c38:	cmp	r3, r9
   20c3c:	cmpeq	r2, r8
   20c40:	strd	r2, [sp, #24]
   20c44:	movhi	r4, r5
   20c48:	movhi	r6, #0
   20c4c:	bhi	20f74 <__assert_fail@plt+0xe888>
   20c50:	mov	r6, #0
   20c54:	mov	r4, #10
   20c58:	mov	r0, r8
   20c5c:	mov	r1, r9
   20c60:	ldrd	r2, [sp, #24]
   20c64:	bl	376b0 <__assert_fail@plt+0x24fc4>
   20c68:	ldr	r3, [sp, #4]
   20c6c:	mla	r2, r4, r2, r7
   20c70:	mov	r8, r0
   20c74:	mov	r9, r1
   20c78:	udiv	ip, r2, r3
   20c7c:	mls	r2, r3, ip, r2
   20c80:	mov	r7, ip
   20c84:	asr	r3, sl, #1
   20c88:	add	r3, r3, r2, lsl #1
   20c8c:	ldr	r2, [sp, #4]
   20c90:	add	sl, sl, r3
   20c94:	cmp	r2, r3
   20c98:	bls	20ec4 <__assert_fail@plt+0xe7d8>
   20c9c:	adds	sl, sl, #0
   20ca0:	movne	sl, #1
   20ca4:	ldrd	r2, [sp, #24]
   20ca8:	add	r6, r6, #1
   20cac:	cmp	r3, r1
   20cb0:	cmpeq	r2, r0
   20cb4:	bhi	20ed8 <__assert_fail@plt+0xe7ec>
   20cb8:	cmp	r6, #8
   20cbc:	bne	20c58 <__assert_fail@plt+0xe56c>
   20cc0:	mov	r4, r5
   20cc4:	b	20f74 <__assert_fail@plt+0xe888>
   20cc8:	movcs	sl, #2
   20ccc:	movcc	sl, #3
   20cd0:	b	20c18 <__assert_fail@plt+0xe52c>
   20cd4:	ldrd	r0, [sp, #152]	; 0x98
   20cd8:	bl	37568 <__assert_fail@plt+0x24e7c>
   20cdc:	vmov	d9, r0, r1
   20ce0:	ldrd	r0, [sp, #160]	; 0xa0
   20ce4:	bl	37568 <__assert_fail@plt+0x24e7c>
   20ce8:	vmov	d7, r0, r1
   20cec:	mov	r0, r6
   20cf0:	mov	r1, r7
   20cf4:	vdiv.f64	d8, d9, d7
   20cf8:	bl	37568 <__assert_fail@plt+0x24e7c>
   20cfc:	vmov	d7, r0, r1
   20d00:	ldr	r3, [sp]
   20d04:	ands	r4, r3, #16
   20d08:	vmul.f64	d0, d8, d7
   20d0c:	bne	20df0 <__assert_fail@plt+0xe704>
   20d10:	ldr	r0, [sp, #12]
   20d14:	mvn	r6, #0
   20d18:	bl	209f0 <__assert_fail@plt+0xe304>
   20d1c:	vmov	r2, r3, d0
   20d20:	mov	r0, fp
   20d24:	ldr	r1, [pc, #1172]	; 211c0 <__assert_fail@plt+0xead4>
   20d28:	bl	12590 <sprintf@plt>
   20d2c:	mov	r0, fp
   20d30:	bl	123bc <strlen@plt>
   20d34:	mov	sl, r0
   20d38:	sub	r7, r5, sl
   20d3c:	sub	r4, sl, r4
   20d40:	mov	r2, sl
   20d44:	mov	r1, fp
   20d48:	mov	r0, r7
   20d4c:	add	r4, r7, r4
   20d50:	bl	1208c <memmove@plt>
   20d54:	ldr	r3, [sp]
   20d58:	tst	r3, #4
   20d5c:	beq	210a8 <__assert_fail@plt+0xe9bc>
   20d60:	ldr	r0, [sp, #20]
   20d64:	sub	r9, r4, r7
   20d68:	add	sl, sp, #52	; 0x34
   20d6c:	bl	123bc <strlen@plt>
   20d70:	mov	r2, r9
   20d74:	mov	r1, r7
   20d78:	str	r0, [sp, #8]
   20d7c:	mov	r0, sl
   20d80:	mvn	r8, #0
   20d84:	bl	120f8 <memcpy@plt>
   20d88:	ldr	r3, [sp, #36]	; 0x24
   20d8c:	ldrb	r2, [r3]
   20d90:	cmp	r2, #0
   20d94:	beq	20dac <__assert_fail@plt+0xe6c0>
   20d98:	cmp	r2, #255	; 0xff
   20d9c:	add	r3, r3, #1
   20da0:	movne	r8, r2
   20da4:	moveq	r8, r9
   20da8:	str	r3, [sp, #36]	; 0x24
   20dac:	cmp	r8, r9
   20db0:	movcs	r8, r9
   20db4:	sub	r9, r9, r8
   20db8:	sub	r7, r4, r8
   20dbc:	mov	r2, r8
   20dc0:	add	r1, sl, r9
   20dc4:	mov	r0, r7
   20dc8:	bl	120f8 <memcpy@plt>
   20dcc:	cmp	r9, #0
   20dd0:	beq	210a8 <__assert_fail@plt+0xe9bc>
   20dd4:	ldr	r3, [sp, #8]
   20dd8:	ldr	r1, [sp, #20]
   20ddc:	sub	r4, r7, r3
   20de0:	mov	r2, r3
   20de4:	mov	r0, r4
   20de8:	bl	120f8 <memcpy@plt>
   20dec:	b	20d88 <__assert_fail@plt+0xe69c>
   20df0:	vldr	s13, [sp, #4]
   20df4:	mov	r6, #0
   20df8:	vldr	d7, [pc, #936]	; 211a8 <__assert_fail@plt+0xeabc>
   20dfc:	vcvt.f64.s32	d6, s13
   20e00:	vmul.f64	d7, d7, d6
   20e04:	add	r6, r6, #1
   20e08:	vmul.f64	d5, d6, d7
   20e0c:	vcmpe.f64	d5, d0
   20e10:	vmrs	APSR_nzcv, fpscr
   20e14:	bhi	20e20 <__assert_fail@plt+0xe734>
   20e18:	cmp	r6, #8
   20e1c:	bne	20e00 <__assert_fail@plt+0xe714>
   20e20:	vdiv.f64	d9, d0, d7
   20e24:	ldr	r0, [sp, #12]
   20e28:	vmov.f64	d0, d9
   20e2c:	bl	209f0 <__assert_fail@plt+0xe304>
   20e30:	vmov	r2, r3, d0
   20e34:	mov	r0, fp
   20e38:	ldr	r1, [pc, #900]	; 211c4 <__assert_fail@plt+0xead8>
   20e3c:	bl	12590 <sprintf@plt>
   20e40:	mov	r0, fp
   20e44:	bl	123bc <strlen@plt>
   20e48:	ldr	r3, [sp, #8]
   20e4c:	mov	sl, r0
   20e50:	add	r4, r3, #1
   20e54:	ldr	r3, [sp, #32]
   20e58:	clz	r3, r3
   20e5c:	lsr	r3, r3, #5
   20e60:	add	r3, r3, #1
   20e64:	add	r3, r3, r4
   20e68:	cmp	r3, r0
   20e6c:	bcc	20e8c <__assert_fail@plt+0xe7a0>
   20e70:	ldr	r3, [sp]
   20e74:	tst	r3, #8
   20e78:	beq	20d38 <__assert_fail@plt+0xe64c>
   20e7c:	add	r3, fp, r0
   20e80:	ldrb	r3, [r3, #-1]
   20e84:	cmp	r3, #48	; 0x30
   20e88:	bne	20d38 <__assert_fail@plt+0xe64c>
   20e8c:	vldr	d8, [pc, #796]	; 211b0 <__assert_fail@plt+0xeac4>
   20e90:	mov	r4, #0
   20e94:	ldr	r0, [sp, #12]
   20e98:	vmul.f64	d0, d9, d8
   20e9c:	bl	209f0 <__assert_fail@plt+0xe304>
   20ea0:	vdiv.f64	d7, d0, d8
   20ea4:	ldr	r1, [pc, #788]	; 211c0 <__assert_fail@plt+0xead4>
   20ea8:	mov	r0, fp
   20eac:	vmov	r2, r3, d7
   20eb0:	bl	12590 <sprintf@plt>
   20eb4:	mov	r0, fp
   20eb8:	bl	123bc <strlen@plt>
   20ebc:	mov	sl, r0
   20ec0:	b	20d38 <__assert_fail@plt+0xe64c>
   20ec4:	ldr	r3, [sp, #4]
   20ec8:	cmp	r3, sl
   20ecc:	movcc	sl, #3
   20ed0:	movcs	sl, #2
   20ed4:	b	20ca4 <__assert_fail@plt+0xe5b8>
   20ed8:	cmp	r1, #0
   20edc:	cmpeq	r0, #9
   20ee0:	bhi	20cc0 <__assert_fail@plt+0xe5d4>
   20ee4:	ldr	r3, [sp, #12]
   20ee8:	cmp	r3, #1
   20eec:	bne	21068 <__assert_fail@plt+0xe97c>
   20ef0:	and	r3, ip, #1
   20ef4:	add	r3, r3, sl
   20ef8:	cmp	r3, #2
   20efc:	movle	r3, #0
   20f00:	movgt	r3, #1
   20f04:	cmp	r3, #0
   20f08:	beq	21188 <__assert_fail@plt+0xea9c>
   20f0c:	add	r7, ip, #1
   20f10:	cmp	r7, #10
   20f14:	bne	20f44 <__assert_fail@plt+0xe858>
   20f18:	adds	r8, r0, #1
   20f1c:	adc	r9, r1, #0
   20f20:	cmp	r9, #0
   20f24:	cmpeq	r8, #10
   20f28:	moveq	r4, r5
   20f2c:	moveq	sl, #0
   20f30:	beq	21084 <__assert_fail@plt+0xe998>
   20f34:	mov	sl, #0
   20f38:	ldr	r3, [sp]
   20f3c:	ands	r7, r3, #8
   20f40:	bne	21080 <__assert_fail@plt+0xe994>
   20f44:	ldr	r3, [sp, #8]
   20f48:	add	r7, r7, #48	; 0x30
   20f4c:	add	r4, fp, #644	; 0x284
   20f50:	add	r4, r4, #2
   20f54:	strb	r7, [fp, #646]	; 0x286
   20f58:	mov	r7, #0
   20f5c:	mov	sl, r7
   20f60:	ldr	r1, [sp, #16]
   20f64:	sub	r4, r4, r3
   20f68:	mov	r2, r3
   20f6c:	mov	r0, r4
   20f70:	bl	120f8 <memcpy@plt>
   20f74:	ldr	r3, [sp, #12]
   20f78:	cmp	r3, #1
   20f7c:	bne	2108c <__assert_fail@plt+0xe9a0>
   20f80:	and	r0, r8, #1
   20f84:	mov	r1, #0
   20f88:	adds	r2, r0, sl
   20f8c:	adc	r3, r1, sl, asr #31
   20f90:	orr	r2, r2, r3
   20f94:	cmp	r2, r1
   20f98:	addne	r7, r7, #1
   20f9c:	cmp	r7, #5
   20fa0:	movle	r7, #0
   20fa4:	movgt	r7, #1
   20fa8:	cmp	r7, #0
   20fac:	beq	2101c <__assert_fail@plt+0xe930>
   20fb0:	ldr	r3, [sp, #40]	; 0x28
   20fb4:	adds	r8, r8, #1
   20fb8:	adc	r9, r9, #0
   20fbc:	cmp	r3, #0
   20fc0:	beq	2101c <__assert_fail@plt+0xe930>
   20fc4:	ldr	r2, [sp, #4]
   20fc8:	mov	r3, #0
   20fcc:	cmp	r3, r9
   20fd0:	cmpeq	r2, r8
   20fd4:	bne	2101c <__assert_fail@plt+0xe930>
   20fd8:	cmp	r6, #8
   20fdc:	beq	2101c <__assert_fail@plt+0xe930>
   20fe0:	ldr	r3, [sp]
   20fe4:	add	r6, r6, #1
   20fe8:	tst	r3, #8
   20fec:	bne	21014 <__assert_fail@plt+0xe928>
   20ff0:	mov	r3, #48	; 0x30
   20ff4:	ldr	r2, [sp, #8]
   20ff8:	strb	r3, [r4, #-1]
   20ffc:	ldr	r3, [sp, #8]
   21000:	ldr	r1, [sp, #16]
   21004:	mvn	r3, r3
   21008:	add	r4, r4, r3
   2100c:	mov	r0, r4
   21010:	bl	120f8 <memcpy@plt>
   21014:	mov	r8, #1
   21018:	mov	r9, #0
   2101c:	mov	r7, r4
   21020:	mov	r2, #10
   21024:	mov	r3, #0
   21028:	mov	r0, r8
   2102c:	mov	r1, r9
   21030:	bl	376b0 <__assert_fail@plt+0x24fc4>
   21034:	add	r2, r2, #48	; 0x30
   21038:	mov	r3, #0
   2103c:	mov	r0, r8
   21040:	mov	r1, r9
   21044:	strb	r2, [r7, #-1]!
   21048:	mov	r2, #10
   2104c:	bl	376b0 <__assert_fail@plt+0x24fc4>
   21050:	cmp	r9, #0
   21054:	cmpeq	r8, #9
   21058:	bls	20d54 <__assert_fail@plt+0xe668>
   2105c:	mov	r8, r0
   21060:	mov	r9, r1
   21064:	b	21020 <__assert_fail@plt+0xe934>
   21068:	ldr	r2, [sp, #12]
   2106c:	adds	r3, sl, #0
   21070:	movne	r3, #1
   21074:	cmp	r2, #0
   21078:	movne	r3, #0
   2107c:	b	20f04 <__assert_fail@plt+0xe818>
   21080:	mov	r4, r5
   21084:	mov	r7, #0
   21088:	b	20f74 <__assert_fail@plt+0xe888>
   2108c:	ldr	r3, [sp, #12]
   21090:	cmp	r3, #0
   21094:	movne	r7, #0
   21098:	bne	20fa8 <__assert_fail@plt+0xe8bc>
   2109c:	add	r7, r7, sl
   210a0:	cmp	r7, #0
   210a4:	b	20fa0 <__assert_fail@plt+0xe8b4>
   210a8:	ldr	r3, [sp]
   210ac:	tst	r3, #128	; 0x80
   210b0:	beq	21170 <__assert_fail@plt+0xea84>
   210b4:	cmn	r6, #1
   210b8:	bne	210fc <__assert_fail@plt+0xea10>
   210bc:	mov	r2, #1
   210c0:	mov	r3, #0
   210c4:	mov	r6, #0
   210c8:	b	210ec <__assert_fail@plt+0xea00>
   210cc:	add	r6, r6, #1
   210d0:	cmp	r6, #8
   210d4:	beq	210fc <__assert_fail@plt+0xea10>
   210d8:	ldr	r1, [sp, #4]
   210dc:	ldr	r0, [sp, #4]
   210e0:	mul	r1, r1, r3
   210e4:	umull	r2, r3, r2, r0
   210e8:	add	r3, r1, r3
   210ec:	ldrd	r0, [sp, #160]	; 0xa0
   210f0:	cmp	r3, r1
   210f4:	cmpeq	r2, r0
   210f8:	bcc	210cc <__assert_fail@plt+0xe9e0>
   210fc:	ldr	r3, [sp]
   21100:	and	r2, r3, #256	; 0x100
   21104:	orrs	r3, r2, r6
   21108:	beq	21170 <__assert_fail@plt+0xea84>
   2110c:	ldr	r3, [sp]
   21110:	tst	r3, #64	; 0x40
   21114:	movne	r1, #32
   21118:	addne	r3, fp, #648	; 0x288
   2111c:	moveq	r3, r5
   21120:	strbne	r1, [fp, #647]	; 0x287
   21124:	cmp	r6, #0
   21128:	beq	21194 <__assert_fail@plt+0xeaa8>
   2112c:	ldr	r1, [sp, #32]
   21130:	mov	r5, r3
   21134:	cmp	r6, #1
   21138:	cmpeq	r1, #0
   2113c:	ldrne	r1, [pc, #132]	; 211c8 <__assert_fail@plt+0xeadc>
   21140:	moveq	r1, #107	; 0x6b
   21144:	ldrbne	r1, [r1, r6]
   21148:	cmp	r2, #0
   2114c:	strb	r1, [r5], #1
   21150:	beq	21170 <__assert_fail@plt+0xea84>
   21154:	ldr	r2, [sp, #32]
   21158:	cmp	r2, #0
   2115c:	movne	r2, #105	; 0x69
   21160:	addne	r5, r3, #2
   21164:	strbne	r2, [r3, #1]
   21168:	mov	r3, #66	; 0x42
   2116c:	strb	r3, [r5], #1
   21170:	mov	r3, #0
   21174:	mov	r0, r7
   21178:	strb	r3, [r5]
   2117c:	add	sp, sp, #100	; 0x64
   21180:	vpop	{d8-d9}
   21184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21188:	cmp	ip, #0
   2118c:	beq	20f38 <__assert_fail@plt+0xe84c>
   21190:	b	20f44 <__assert_fail@plt+0xe858>
   21194:	cmp	r2, #0
   21198:	mov	r5, r3
   2119c:	bne	21168 <__assert_fail@plt+0xea7c>
   211a0:	b	21170 <__assert_fail@plt+0xea84>
   211a4:	nop	{0}
   211a8:	andeq	r0, r0, r0
   211ac:	svccc	0x00f00000	; IMB
   211b0:	andeq	r0, r0, r0
   211b4:	eormi	r0, r4, r0
   211b8:	ldrdeq	r8, [r3], -r9
   211bc:	andeq	r9, r3, r7, ror r5
   211c0:	strdeq	fp, [r3], -ip
   211c4:	andeq	fp, r3, r2, lsl #24
   211c8:	ldrdeq	fp, [r3], -ip
   211cc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   211d0:	subs	r5, r0, #0
   211d4:	mov	r8, r1
   211d8:	mov	r6, r2
   211dc:	bne	2125c <__assert_fail@plt+0xeb70>
   211e0:	ldr	r0, [pc, #316]	; 21324 <__assert_fail@plt+0xec38>
   211e4:	bl	122fc <getenv@plt>
   211e8:	subs	r5, r0, #0
   211ec:	bne	2125c <__assert_fail@plt+0xeb70>
   211f0:	ldr	r0, [pc, #304]	; 21328 <__assert_fail@plt+0xec3c>
   211f4:	bl	122fc <getenv@plt>
   211f8:	subs	r5, r0, #0
   211fc:	bne	2125c <__assert_fail@plt+0xeb70>
   21200:	ldr	r0, [pc, #292]	; 2132c <__assert_fail@plt+0xec40>
   21204:	mov	r4, #0
   21208:	bl	122fc <getenv@plt>
   2120c:	cmp	r0, #0
   21210:	mov	r3, #0
   21214:	moveq	r2, #1024	; 0x400
   21218:	movne	r2, #512	; 0x200
   2121c:	strd	r2, [r6]
   21220:	mov	r0, #0
   21224:	str	r4, [r8]
   21228:	ldrd	r2, [r6]
   2122c:	orrs	r3, r2, r3
   21230:	bne	21254 <__assert_fail@plt+0xeb68>
   21234:	ldr	r0, [pc, #240]	; 2132c <__assert_fail@plt+0xec40>
   21238:	bl	122fc <getenv@plt>
   2123c:	cmp	r0, #0
   21240:	mov	r3, #0
   21244:	moveq	r2, #1024	; 0x400
   21248:	movne	r2, #512	; 0x200
   2124c:	mov	r0, #4
   21250:	strd	r2, [r6]
   21254:	add	sp, sp, #16
   21258:	pop	{r4, r5, r6, r7, r8, pc}
   2125c:	ldrb	r3, [r5]
   21260:	ldr	r7, [pc, #200]	; 21330 <__assert_fail@plt+0xec44>
   21264:	cmp	r3, #39	; 0x27
   21268:	mov	r3, #4
   2126c:	addeq	r5, r5, #1
   21270:	moveq	r4, #4
   21274:	add	r2, r7, #12
   21278:	add	r1, r7, #20
   2127c:	mov	r0, r5
   21280:	movne	r4, #0
   21284:	bl	365f8 <__assert_fail@plt+0x23f0c>
   21288:	cmp	r0, #0
   2128c:	blt	212ac <__assert_fail@plt+0xebc0>
   21290:	add	r7, r7, r0, lsl #2
   21294:	mov	r2, #1
   21298:	ldr	r3, [r7, #12]
   2129c:	orr	r4, r4, r3
   212a0:	mov	r3, #0
   212a4:	strd	r2, [r6]
   212a8:	b	21220 <__assert_fail@plt+0xeb34>
   212ac:	ldr	r3, [pc, #128]	; 21334 <__assert_fail@plt+0xec48>
   212b0:	mov	r2, #0
   212b4:	add	r1, sp, #12
   212b8:	mov	r0, r5
   212bc:	str	r3, [sp]
   212c0:	mov	r3, r6
   212c4:	bl	27bb0 <__assert_fail@plt+0x154c4>
   212c8:	cmp	r0, #0
   212cc:	movne	r3, #0
   212d0:	ldreq	r2, [sp, #12]
   212d4:	strne	r3, [r8]
   212d8:	bne	21228 <__assert_fail@plt+0xeb3c>
   212dc:	ldrb	r3, [r5]
   212e0:	sub	r3, r3, #48	; 0x30
   212e4:	cmp	r3, #9
   212e8:	bls	21220 <__assert_fail@plt+0xeb34>
   212ec:	cmp	r2, r5
   212f0:	bne	2131c <__assert_fail@plt+0xec30>
   212f4:	ldrb	r3, [r2, #-1]
   212f8:	cmp	r3, #66	; 0x42
   212fc:	orrne	r4, r4, #128	; 0x80
   21300:	bne	21314 <__assert_fail@plt+0xec28>
   21304:	ldrb	r3, [r2, #-2]
   21308:	orr	r4, r4, #384	; 0x180
   2130c:	cmp	r3, #105	; 0x69
   21310:	bne	21220 <__assert_fail@plt+0xeb34>
   21314:	orr	r4, r4, #32
   21318:	b	21220 <__assert_fail@plt+0xeb34>
   2131c:	add	r5, r5, #1
   21320:	b	212dc <__assert_fail@plt+0xebf0>
   21324:			; <UNDEFINED> instruction: 0x000397b6
   21328:	andeq	fp, r3, r8, lsl #24
   2132c:	muleq	r3, r1, r7
   21330:	ldrdeq	fp, [r3], -ip
   21334:	andeq	fp, r3, r2, lsl ip
   21338:	push	{r4, r5, r6, r7, r8, lr}
   2133c:	ldr	r5, [pc, #112]	; 213b4 <__assert_fail@plt+0xecc8>
   21340:	ldr	r4, [r5]
   21344:	cmp	r4, #0
   21348:	bne	213a0 <__assert_fail@plt+0xecb4>
   2134c:	mov	r6, r0
   21350:	bl	12014 <getpwuid@plt>
   21354:	cmp	r0, #0
   21358:	ldreq	r7, [pc, #88]	; 213b8 <__assert_fail@plt+0xeccc>
   2135c:	ldrne	r7, [r0]
   21360:	mov	r0, r7
   21364:	bl	123bc <strlen@plt>
   21368:	add	r0, r0, #12
   2136c:	bic	r0, r0, #3
   21370:	bl	273e0 <__assert_fail@plt+0x14cf4>
   21374:	mov	r4, r0
   21378:	mov	r1, r7
   2137c:	str	r6, [r0], #8
   21380:	bl	12278 <strcpy@plt>
   21384:	ldr	r3, [r5]
   21388:	str	r4, [r5]
   2138c:	str	r3, [r4, #4]
   21390:	ldrb	r0, [r4, #8]
   21394:	cmp	r0, #0
   21398:	addne	r0, r4, #8
   2139c:	pop	{r4, r5, r6, r7, r8, pc}
   213a0:	ldr	r3, [r4]
   213a4:	cmp	r3, r0
   213a8:	beq	21390 <__assert_fail@plt+0xeca4>
   213ac:	ldr	r4, [r4, #4]
   213b0:	b	21344 <__assert_fail@plt+0xec58>
   213b4:	andeq	lr, r4, ip, lsl #26
   213b8:	andeq	r9, r3, r7, ror r5
   213bc:	push	{r4, r5, r6, r7, r8, lr}
   213c0:	mov	r7, r0
   213c4:	ldr	r5, [pc, #200]	; 21494 <__assert_fail@plt+0xeda8>
   213c8:	ldr	r4, [r5]
   213cc:	cmp	r4, #0
   213d0:	bne	2143c <__assert_fail@plt+0xed50>
   213d4:	ldr	r6, [r5, #4]
   213d8:	cmp	r6, #0
   213dc:	bne	21468 <__assert_fail@plt+0xed7c>
   213e0:	mov	r0, r7
   213e4:	bl	11fd8 <getpwnam@plt>
   213e8:	mov	r4, r0
   213ec:	mov	r0, r7
   213f0:	bl	123bc <strlen@plt>
   213f4:	add	r0, r0, #12
   213f8:	bic	r0, r0, #3
   213fc:	bl	273e0 <__assert_fail@plt+0x14cf4>
   21400:	mov	r6, r0
   21404:	mov	r1, r7
   21408:	add	r0, r0, #8
   2140c:	bl	12278 <strcpy@plt>
   21410:	cmp	r4, #0
   21414:	ldrne	r3, [r4, #8]
   21418:	movne	r4, r6
   2141c:	ldreq	r3, [r5, #4]
   21420:	streq	r6, [r5, #4]
   21424:	strne	r3, [r6]
   21428:	ldrne	r3, [r5]
   2142c:	strne	r6, [r5]
   21430:	str	r3, [r6, #4]
   21434:	mov	r0, r4
   21438:	pop	{r4, r5, r6, r7, r8, pc}
   2143c:	ldrb	r2, [r4, #8]
   21440:	ldrb	r3, [r7]
   21444:	cmp	r2, r3
   21448:	bne	21460 <__assert_fail@plt+0xed74>
   2144c:	mov	r1, r7
   21450:	add	r0, r4, #8
   21454:	bl	11ffc <strcmp@plt>
   21458:	cmp	r0, #0
   2145c:	beq	21434 <__assert_fail@plt+0xed48>
   21460:	ldr	r4, [r4, #4]
   21464:	b	213cc <__assert_fail@plt+0xece0>
   21468:	ldrb	r2, [r6, #8]
   2146c:	ldrb	r3, [r7]
   21470:	cmp	r2, r3
   21474:	bne	2148c <__assert_fail@plt+0xeda0>
   21478:	mov	r1, r7
   2147c:	add	r0, r6, #8
   21480:	bl	11ffc <strcmp@plt>
   21484:	cmp	r0, #0
   21488:	beq	21434 <__assert_fail@plt+0xed48>
   2148c:	ldr	r6, [r6, #4]
   21490:	b	213d8 <__assert_fail@plt+0xecec>
   21494:	andeq	lr, r4, ip, lsl #26
   21498:	push	{r4, r5, r6, r7, r8, lr}
   2149c:	ldr	r5, [pc, #112]	; 21514 <__assert_fail@plt+0xee28>
   214a0:	ldr	r4, [r5, #8]
   214a4:	cmp	r4, #0
   214a8:	bne	21500 <__assert_fail@plt+0xee14>
   214ac:	mov	r6, r0
   214b0:	bl	126c8 <getgrgid@plt>
   214b4:	cmp	r0, #0
   214b8:	ldreq	r7, [pc, #88]	; 21518 <__assert_fail@plt+0xee2c>
   214bc:	ldrne	r7, [r0]
   214c0:	mov	r0, r7
   214c4:	bl	123bc <strlen@plt>
   214c8:	add	r0, r0, #12
   214cc:	bic	r0, r0, #3
   214d0:	bl	273e0 <__assert_fail@plt+0x14cf4>
   214d4:	mov	r4, r0
   214d8:	mov	r1, r7
   214dc:	str	r6, [r0], #8
   214e0:	bl	12278 <strcpy@plt>
   214e4:	ldr	r3, [r5, #8]
   214e8:	str	r4, [r5, #8]
   214ec:	str	r3, [r4, #4]
   214f0:	ldrb	r0, [r4, #8]
   214f4:	cmp	r0, #0
   214f8:	addne	r0, r4, #8
   214fc:	pop	{r4, r5, r6, r7, r8, pc}
   21500:	ldr	r3, [r4]
   21504:	cmp	r3, r0
   21508:	beq	214f0 <__assert_fail@plt+0xee04>
   2150c:	ldr	r4, [r4, #4]
   21510:	b	214a4 <__assert_fail@plt+0xedb8>
   21514:	andeq	lr, r4, ip, lsl #26
   21518:	andeq	r9, r3, r7, ror r5
   2151c:	push	{r4, r5, r6, r7, r8, lr}
   21520:	mov	r7, r0
   21524:	ldr	r5, [pc, #200]	; 215f4 <__assert_fail@plt+0xef08>
   21528:	ldr	r4, [r5, #8]
   2152c:	cmp	r4, #0
   21530:	bne	2159c <__assert_fail@plt+0xeeb0>
   21534:	ldr	r6, [r5, #12]
   21538:	cmp	r6, #0
   2153c:	bne	215c8 <__assert_fail@plt+0xeedc>
   21540:	mov	r0, r7
   21544:	bl	126d4 <getgrnam@plt>
   21548:	mov	r4, r0
   2154c:	mov	r0, r7
   21550:	bl	123bc <strlen@plt>
   21554:	add	r0, r0, #12
   21558:	bic	r0, r0, #3
   2155c:	bl	273e0 <__assert_fail@plt+0x14cf4>
   21560:	mov	r6, r0
   21564:	mov	r1, r7
   21568:	add	r0, r0, #8
   2156c:	bl	12278 <strcpy@plt>
   21570:	cmp	r4, #0
   21574:	ldrne	r3, [r4, #8]
   21578:	movne	r4, r6
   2157c:	ldreq	r3, [r5, #12]
   21580:	streq	r6, [r5, #12]
   21584:	strne	r3, [r6]
   21588:	ldrne	r3, [r5, #8]
   2158c:	strne	r6, [r5, #8]
   21590:	str	r3, [r6, #4]
   21594:	mov	r0, r4
   21598:	pop	{r4, r5, r6, r7, r8, pc}
   2159c:	ldrb	r2, [r4, #8]
   215a0:	ldrb	r3, [r7]
   215a4:	cmp	r2, r3
   215a8:	bne	215c0 <__assert_fail@plt+0xeed4>
   215ac:	mov	r1, r7
   215b0:	add	r0, r4, #8
   215b4:	bl	11ffc <strcmp@plt>
   215b8:	cmp	r0, #0
   215bc:	beq	21594 <__assert_fail@plt+0xeea8>
   215c0:	ldr	r4, [r4, #4]
   215c4:	b	2152c <__assert_fail@plt+0xee40>
   215c8:	ldrb	r2, [r6, #8]
   215cc:	ldrb	r3, [r7]
   215d0:	cmp	r2, r3
   215d4:	bne	215ec <__assert_fail@plt+0xef00>
   215d8:	mov	r1, r7
   215dc:	add	r0, r6, #8
   215e0:	bl	11ffc <strcmp@plt>
   215e4:	cmp	r0, #0
   215e8:	beq	21594 <__assert_fail@plt+0xeea8>
   215ec:	ldr	r6, [r6, #4]
   215f0:	b	21538 <__assert_fail@plt+0xee4c>
   215f4:	andeq	lr, r4, ip, lsl #26
   215f8:	push	{r4, r5, r6, r7, fp, lr}
   215fc:	mov	r7, r3
   21600:	lsrs	r3, r2, #30
   21604:	mov	r4, r0
   21608:	movne	r3, #1
   2160c:	moveq	r3, #0
   21610:	lsls	r0, r2, #2
   21614:	add	fp, sp, #20
   21618:	bmi	21624 <__assert_fail@plt+0xef38>
   2161c:	cmp	r3, #0
   21620:	beq	21630 <__assert_fail@plt+0xef44>
   21624:	mov	r0, #0
   21628:	sub	sp, fp, #20
   2162c:	pop	{r4, r5, r6, r7, fp, pc}
   21630:	cmp	r0, #4016	; 0xfb0
   21634:	mov	r5, r1
   21638:	mov	r6, r2
   2163c:	bhi	216bc <__assert_fail@plt+0xefd0>
   21640:	add	r0, r0, #22
   21644:	bic	r0, r0, #7
   21648:	sub	sp, sp, r0
   2164c:	add	r0, sp, #15
   21650:	bic	r0, r0, #15
   21654:	cmp	r0, #0
   21658:	beq	21624 <__assert_fail@plt+0xef38>
   2165c:	mov	r3, #1
   21660:	mov	ip, #0
   21664:	mov	lr, #2
   21668:	str	r3, [r0, #4]
   2166c:	mov	r3, r5
   21670:	cmp	lr, r6
   21674:	bcc	216c4 <__assert_fail@plt+0xefd8>
   21678:	mov	ip, #0
   2167c:	mov	r3, r4
   21680:	str	ip, [r7]
   21684:	ldrb	r2, [r3]
   21688:	cmp	r2, #0
   2168c:	beq	216b0 <__assert_fail@plt+0xefc4>
   21690:	ldrb	r1, [r5, ip]
   21694:	cmp	r1, r2
   21698:	bne	21700 <__assert_fail@plt+0xf014>
   2169c:	add	ip, ip, #1
   216a0:	add	r3, r3, #1
   216a4:	cmp	r6, ip
   216a8:	bne	21684 <__assert_fail@plt+0xef98>
   216ac:	str	r4, [r7]
   216b0:	bl	36ffc <__assert_fail@plt+0x24910>
   216b4:	mov	r0, #1
   216b8:	b	21628 <__assert_fail@plt+0xef3c>
   216bc:	bl	36fb4 <__assert_fail@plt+0x248c8>
   216c0:	b	21654 <__assert_fail@plt+0xef68>
   216c4:	ldrb	r1, [r3, #1]!
   216c8:	ldrb	r2, [r5, ip]
   216cc:	cmp	r2, r1
   216d0:	bne	216e8 <__assert_fail@plt+0xeffc>
   216d4:	add	ip, ip, #1
   216d8:	sub	r2, lr, ip
   216dc:	str	r2, [r0, lr, lsl #2]
   216e0:	add	lr, lr, #1
   216e4:	b	21670 <__assert_fail@plt+0xef84>
   216e8:	cmp	ip, #0
   216ec:	streq	lr, [r0, lr, lsl #2]
   216f0:	beq	216e0 <__assert_fail@plt+0xeff4>
   216f4:	ldr	r2, [r0, ip, lsl #2]
   216f8:	sub	ip, ip, r2
   216fc:	b	216c8 <__assert_fail@plt+0xefdc>
   21700:	cmp	ip, #0
   21704:	ldrne	r2, [r0, ip, lsl #2]
   21708:	addeq	r4, r4, #1
   2170c:	addeq	r3, r3, #1
   21710:	addne	r4, r4, r2
   21714:	subne	ip, ip, r2
   21718:	b	21684 <__assert_fail@plt+0xef98>
   2171c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21720:	add	fp, sp, #32
   21724:	sub	sp, sp, #132	; 0x84
   21728:	mov	r5, r1
   2172c:	str	r2, [fp, #-160]	; 0xffffff60
   21730:	str	r0, [fp, #-156]	; 0xffffff64
   21734:	mov	r0, r1
   21738:	bl	370bc <__assert_fail@plt+0x249d0>
   2173c:	mov	r9, r0
   21740:	mov	r0, #44	; 0x2c
   21744:	umull	r6, r7, r9, r0
   21748:	adds	r3, r7, #0
   2174c:	movne	r3, #1
   21750:	cmp	r6, #0
   21754:	blt	21760 <__assert_fail@plt+0xf074>
   21758:	cmp	r3, #0
   2175c:	beq	21774 <__assert_fail@plt+0xf088>
   21760:	mov	r3, #0
   21764:	str	r3, [fp, #-152]	; 0xffffff68
   21768:	ldr	r0, [fp, #-152]	; 0xffffff68
   2176c:	sub	sp, fp, #32
   21770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21774:	mul	r0, r0, r9
   21778:	cmp	r0, #4016	; 0xfb0
   2177c:	bhi	218c4 <__assert_fail@plt+0xf1d8>
   21780:	add	r0, r0, #22
   21784:	bic	r0, r0, #7
   21788:	sub	sp, sp, r0
   2178c:	add	r4, sp, #15
   21790:	bic	r4, r4, #15
   21794:	cmp	r4, #0
   21798:	beq	21760 <__assert_fail@plt+0xf074>
   2179c:	mov	r7, #40	; 0x28
   217a0:	mov	r6, #0
   217a4:	mov	r2, #0
   217a8:	mov	r3, #0
   217ac:	mla	r7, r7, r9, r4
   217b0:	mov	sl, r4
   217b4:	mov	r8, r4
   217b8:	strb	r6, [fp, #-92]	; 0xffffffa4
   217bc:	strd	r2, [fp, #-88]	; 0xffffffa8
   217c0:	strb	r6, [fp, #-80]	; 0xffffffb0
   217c4:	str	r5, [fp, #-76]	; 0xffffffb4
   217c8:	sub	r0, fp, #92	; 0x5c
   217cc:	bl	22080 <__assert_fail@plt+0xf994>
   217d0:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   217d4:	cmp	r3, #0
   217d8:	str	r3, [fp, #-152]	; 0xffffff68
   217dc:	beq	218d0 <__assert_fail@plt+0xf1e4>
   217e0:	ldr	r5, [fp, #-64]	; 0xffffffc0
   217e4:	cmp	r5, #0
   217e8:	bne	218d0 <__assert_fail@plt+0xf1e4>
   217ec:	mov	r2, #1
   217f0:	mov	r6, r5
   217f4:	mov	r8, #2
   217f8:	str	r2, [r7, #4]
   217fc:	cmp	r8, r9
   21800:	bcc	218f8 <__assert_fail@plt+0xf20c>
   21804:	ldr	r3, [fp, #-160]	; 0xffffff60
   21808:	mov	r6, #0
   2180c:	mov	r2, #0
   21810:	mov	r8, #40	; 0x28
   21814:	ldr	r1, [fp, #-156]	; 0xffffff64
   21818:	strb	r6, [fp, #-148]	; 0xffffff6c
   2181c:	strb	r6, [fp, #-136]	; 0xffffff78
   21820:	str	r6, [r3]
   21824:	ldr	r3, [fp, #-156]	; 0xffffff64
   21828:	str	r3, [fp, #-132]	; 0xffffff7c
   2182c:	mov	r3, #0
   21830:	strb	r6, [fp, #-92]	; 0xffffffa4
   21834:	strd	r2, [fp, #-144]	; 0xffffff70
   21838:	strd	r2, [fp, #-88]	; 0xffffffa8
   2183c:	strb	r6, [fp, #-80]	; 0xffffffb0
   21840:	str	r1, [fp, #-76]	; 0xffffffb4
   21844:	sub	r0, fp, #92	; 0x5c
   21848:	bl	22080 <__assert_fail@plt+0xf994>
   2184c:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   21850:	cmp	r0, #0
   21854:	beq	21864 <__assert_fail@plt+0xf178>
   21858:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2185c:	cmp	r3, #0
   21860:	beq	218b8 <__assert_fail@plt+0xf1cc>
   21864:	mla	r3, r8, r5, r4
   21868:	ldrb	r2, [r3, #8]
   2186c:	ands	r0, r0, r2
   21870:	beq	21998 <__assert_fail@plt+0xf2ac>
   21874:	ldr	r0, [r3, #12]
   21878:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2187c:	sub	r0, r0, r3
   21880:	clz	r0, r0
   21884:	lsr	r0, r0, #5
   21888:	cmp	r0, #0
   2188c:	beq	219c0 <__assert_fail@plt+0xf2d4>
   21890:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   21894:	add	r5, r5, #1
   21898:	cmp	r9, r5
   2189c:	strb	r6, [fp, #-80]	; 0xffffffb0
   218a0:	add	r3, r3, r2
   218a4:	str	r3, [fp, #-76]	; 0xffffffb4
   218a8:	bne	21844 <__assert_fail@plt+0xf158>
   218ac:	ldr	r2, [fp, #-160]	; 0xffffff60
   218b0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   218b4:	str	r3, [r2]
   218b8:	mov	r0, r4
   218bc:	bl	36ffc <__assert_fail@plt+0x24910>
   218c0:	b	21768 <__assert_fail@plt+0xf07c>
   218c4:	bl	36fb4 <__assert_fail@plt+0x248c8>
   218c8:	mov	r4, r0
   218cc:	b	21794 <__assert_fail@plt+0xf0a8>
   218d0:	sub	r1, fp, #76	; 0x4c
   218d4:	mov	r0, r8
   218d8:	bl	37048 <__assert_fail@plt+0x2495c>
   218dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   218e0:	add	r8, r8, #40	; 0x28
   218e4:	strb	r6, [fp, #-80]	; 0xffffffb0
   218e8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   218ec:	add	r2, r2, r1
   218f0:	str	r2, [fp, #-76]	; 0xffffffb4
   218f4:	b	217c8 <__assert_fail@plt+0xf0dc>
   218f8:	ldrb	r3, [sl, #48]	; 0x30
   218fc:	str	r3, [fp, #-164]	; 0xffffff5c
   21900:	mov	r3, #40	; 0x28
   21904:	mla	r1, r3, r6, r4
   21908:	ldr	r3, [fp, #-164]	; 0xffffff5c
   2190c:	cmp	r3, #0
   21910:	beq	21954 <__assert_fail@plt+0xf268>
   21914:	ldrb	r2, [r1, #8]
   21918:	cmp	r2, #0
   2191c:	beq	21954 <__assert_fail@plt+0xf268>
   21920:	ldr	r2, [r1, #12]
   21924:	ldr	r0, [sl, #52]	; 0x34
   21928:	sub	r0, r0, r2
   2192c:	clz	r0, r0
   21930:	lsr	r0, r0, #5
   21934:	cmp	r0, #0
   21938:	beq	21980 <__assert_fail@plt+0xf294>
   2193c:	add	r6, r6, #1
   21940:	sub	r2, r8, r6
   21944:	str	r2, [r7, r8, lsl #2]
   21948:	add	r8, r8, #1
   2194c:	add	sl, sl, #40	; 0x28
   21950:	b	217fc <__assert_fail@plt+0xf110>
   21954:	ldr	r0, [r1, #4]
   21958:	ldr	r2, [sl, #44]	; 0x2c
   2195c:	cmp	r2, r0
   21960:	movne	r0, #0
   21964:	bne	21934 <__assert_fail@plt+0xf248>
   21968:	ldr	r1, [r1]
   2196c:	ldr	r0, [sl, #40]	; 0x28
   21970:	bl	12158 <memcmp@plt>
   21974:	clz	r0, r0
   21978:	lsr	r0, r0, #5
   2197c:	b	21934 <__assert_fail@plt+0xf248>
   21980:	cmp	r6, #0
   21984:	streq	r8, [r7, r8, lsl #2]
   21988:	beq	21948 <__assert_fail@plt+0xf25c>
   2198c:	ldr	r2, [r7, r6, lsl #2]
   21990:	sub	r6, r6, r2
   21994:	b	21900 <__assert_fail@plt+0xf214>
   21998:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2199c:	ldr	r2, [r3, #4]
   219a0:	cmp	r2, r1
   219a4:	bne	21888 <__assert_fail@plt+0xf19c>
   219a8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   219ac:	ldr	r0, [r3]
   219b0:	bl	12158 <memcmp@plt>
   219b4:	clz	r0, r0
   219b8:	lsr	r0, r0, #5
   219bc:	b	21888 <__assert_fail@plt+0xf19c>
   219c0:	cmp	r5, #0
   219c4:	ldrne	r3, [r7, r5, lsl #2]
   219c8:	subne	r5, r5, r3
   219cc:	bne	21a30 <__assert_fail@plt+0xf344>
   219d0:	sub	r0, fp, #148	; 0x94
   219d4:	bl	22080 <__assert_fail@plt+0xf994>
   219d8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   219dc:	cmp	r3, #0
   219e0:	beq	219f0 <__assert_fail@plt+0xf304>
   219e4:	ldr	r3, [fp, #-120]	; 0xffffff88
   219e8:	cmp	r3, #0
   219ec:	beq	21a60 <__assert_fail@plt+0xf374>
   219f0:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   219f4:	strb	r6, [fp, #-136]	; 0xffffff78
   219f8:	strb	r6, [fp, #-80]	; 0xffffffb0
   219fc:	add	r3, r3, r2
   21a00:	ldr	r2, [fp, #-72]	; 0xffffffb8
   21a04:	str	r3, [fp, #-132]	; 0xffffff7c
   21a08:	ldr	r3, [fp, #-76]	; 0xffffffb4
   21a0c:	add	r3, r3, r2
   21a10:	str	r3, [fp, #-76]	; 0xffffffb4
   21a14:	b	21844 <__assert_fail@plt+0xf158>
   21a18:	ldr	r2, [fp, #-132]	; 0xffffff7c
   21a1c:	sub	r3, r3, #1
   21a20:	strb	r6, [fp, #-136]	; 0xffffff78
   21a24:	ldr	r1, [fp, #-128]	; 0xffffff80
   21a28:	add	r2, r2, r1
   21a2c:	str	r2, [fp, #-132]	; 0xffffff7c
   21a30:	cmp	r3, #0
   21a34:	beq	21844 <__assert_fail@plt+0xf158>
   21a38:	sub	r0, fp, #148	; 0x94
   21a3c:	str	r3, [fp, #-156]	; 0xffffff64
   21a40:	bl	22080 <__assert_fail@plt+0xf994>
   21a44:	ldrb	r2, [fp, #-124]	; 0xffffff84
   21a48:	ldr	r3, [fp, #-156]	; 0xffffff64
   21a4c:	cmp	r2, #0
   21a50:	beq	21a18 <__assert_fail@plt+0xf32c>
   21a54:	ldr	r2, [fp, #-120]	; 0xffffff88
   21a58:	cmp	r2, #0
   21a5c:	bne	21a18 <__assert_fail@plt+0xf32c>
   21a60:	bl	12698 <abort@plt>
   21a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a68:	sub	sp, sp, #300	; 0x12c
   21a6c:	mov	r4, r0
   21a70:	mov	r5, r1
   21a74:	bl	12260 <__ctype_get_mb_cur_max@plt>
   21a78:	cmp	r0, #1
   21a7c:	bls	21db8 <__assert_fail@plt+0xf6cc>
   21a80:	mov	r0, #0
   21a84:	mov	r1, #0
   21a88:	mov	r3, #0
   21a8c:	str	r5, [sp, #32]
   21a90:	strd	r0, [sp, #20]
   21a94:	add	r0, sp, #16
   21a98:	strb	r3, [sp, #16]
   21a9c:	strb	r3, [sp, #28]
   21aa0:	bl	22080 <__assert_fail@plt+0xf994>
   21aa4:	ldrb	r3, [sp, #40]	; 0x28
   21aa8:	cmp	r3, #0
   21aac:	beq	21abc <__assert_fail@plt+0xf3d0>
   21ab0:	ldr	r3, [sp, #44]	; 0x2c
   21ab4:	cmp	r3, #0
   21ab8:	beq	21cf0 <__assert_fail@plt+0xf604>
   21abc:	mov	r6, #0
   21ac0:	mov	r3, #1
   21ac4:	mov	fp, r6
   21ac8:	mov	r7, r6
   21acc:	mov	sl, r6
   21ad0:	mov	r8, r6
   21ad4:	str	r6, [sp, #4]
   21ad8:	strb	r6, [sp, #72]	; 0x48
   21adc:	str	r6, [sp, #76]	; 0x4c
   21ae0:	str	r6, [sp, #80]	; 0x50
   21ae4:	strb	r6, [sp, #84]	; 0x54
   21ae8:	str	r5, [sp, #88]	; 0x58
   21aec:	strb	r6, [sp, #128]	; 0x80
   21af0:	str	r6, [sp, #132]	; 0x84
   21af4:	str	r6, [sp, #136]	; 0x88
   21af8:	strb	r6, [sp, #140]	; 0x8c
   21afc:	str	r4, [sp, #144]	; 0x90
   21b00:	add	r0, sp, #128	; 0x80
   21b04:	str	r3, [sp, #8]
   21b08:	bl	22080 <__assert_fail@plt+0xf994>
   21b0c:	ldrb	r2, [sp, #152]	; 0x98
   21b10:	ldr	r3, [sp, #8]
   21b14:	cmp	r2, #0
   21b18:	beq	21b28 <__assert_fail@plt+0xf43c>
   21b1c:	ldr	r2, [sp, #156]	; 0x9c
   21b20:	cmp	r2, #0
   21b24:	beq	21df8 <__assert_fail@plt+0xf70c>
   21b28:	cmp	sl, #9
   21b2c:	movls	r9, #0
   21b30:	andhi	r9, r3, #1
   21b34:	cmp	r9, #0
   21b38:	beq	21c84 <__assert_fail@plt+0xf598>
   21b3c:	add	r3, sl, sl, lsl #2
   21b40:	cmp	r7, r3
   21b44:	subcs	r6, r7, r6
   21b48:	bcs	21c30 <__assert_fail@plt+0xf544>
   21b4c:	ldrb	r3, [sp, #152]	; 0x98
   21b50:	add	sl, sl, #1
   21b54:	add	r7, r7, #1
   21b58:	cmp	r3, #0
   21b5c:	beq	21c8c <__assert_fail@plt+0xf5a0>
   21b60:	ldrb	r3, [sp, #40]	; 0x28
   21b64:	cmp	r3, #0
   21b68:	beq	21c8c <__assert_fail@plt+0xf5a0>
   21b6c:	ldr	r3, [sp, #44]	; 0x2c
   21b70:	ldr	r0, [sp, #156]	; 0x9c
   21b74:	sub	r0, r0, r3
   21b78:	clz	r0, r0
   21b7c:	lsr	r0, r0, #5
   21b80:	cmp	r0, #0
   21b84:	beq	21da0 <__assert_fail@plt+0xf6b4>
   21b88:	add	ip, sp, #128	; 0x80
   21b8c:	add	lr, sp, #184	; 0xb8
   21b90:	str	r5, [sp, #256]	; 0x100
   21b94:	ldm	ip!, {r0, r1, r2, r3}
   21b98:	stmia	lr!, {r0, r1, r2, r3}
   21b9c:	ldm	ip!, {r0, r1, r2, r3}
   21ba0:	strb	r8, [sp, #196]	; 0xc4
   21ba4:	stmia	lr!, {r0, r1, r2, r3}
   21ba8:	ldm	ip!, {r0, r1, r2, r3}
   21bac:	stmia	lr!, {r0, r1, r2, r3}
   21bb0:	ldrd	r2, [sp, #200]	; 0xc8
   21bb4:	ldm	ip, {r0, r1}
   21bb8:	add	r3, r3, r2
   21bbc:	stm	lr, {r0, r1}
   21bc0:	add	r0, sp, #240	; 0xf0
   21bc4:	str	r3, [sp, #200]	; 0xc8
   21bc8:	strb	r8, [sp, #252]	; 0xfc
   21bcc:	ldr	r3, [sp, #4]
   21bd0:	strb	r8, [sp, #240]	; 0xf0
   21bd4:	str	r3, [sp, #244]	; 0xf4
   21bd8:	str	fp, [sp, #248]	; 0xf8
   21bdc:	bl	22080 <__assert_fail@plt+0xf994>
   21be0:	ldrb	r3, [sp, #264]	; 0x108
   21be4:	cmp	r3, #0
   21be8:	beq	21cb8 <__assert_fail@plt+0xf5cc>
   21bec:	ldr	r3, [sp, #268]	; 0x10c
   21bf0:	cmp	r3, #0
   21bf4:	bne	21cb8 <__assert_fail@plt+0xf5cc>
   21bf8:	bl	12698 <abort@plt>
   21bfc:	add	r0, sp, #72	; 0x48
   21c00:	bl	22080 <__assert_fail@plt+0xf994>
   21c04:	ldrb	r3, [sp, #96]	; 0x60
   21c08:	cmp	r3, #0
   21c0c:	beq	21c1c <__assert_fail@plt+0xf530>
   21c10:	ldr	r3, [sp, #100]	; 0x64
   21c14:	cmp	r3, #0
   21c18:	beq	21c38 <__assert_fail@plt+0xf54c>
   21c1c:	ldrd	r2, [sp, #88]	; 0x58
   21c20:	sub	r6, r6, #1
   21c24:	strb	r8, [sp, #84]	; 0x54
   21c28:	add	r3, r3, r2
   21c2c:	str	r3, [sp, #88]	; 0x58
   21c30:	cmp	r6, #0
   21c34:	bne	21bfc <__assert_fail@plt+0xf510>
   21c38:	add	r0, sp, #72	; 0x48
   21c3c:	bl	22080 <__assert_fail@plt+0xf994>
   21c40:	ldrb	r3, [sp, #96]	; 0x60
   21c44:	cmp	r3, #0
   21c48:	bne	21c54 <__assert_fail@plt+0xf568>
   21c4c:	mov	r6, r7
   21c50:	b	21b4c <__assert_fail@plt+0xf460>
   21c54:	ldr	r2, [sp, #100]	; 0x64
   21c58:	cmp	r2, #0
   21c5c:	movne	r6, r7
   21c60:	bne	21c84 <__assert_fail@plt+0xf598>
   21c64:	add	r2, sp, #240	; 0xf0
   21c68:	mov	r1, r5
   21c6c:	mov	r0, r4
   21c70:	bl	2171c <__assert_fail@plt+0xf030>
   21c74:	subs	r9, r0, #0
   21c78:	beq	21c4c <__assert_fail@plt+0xf560>
   21c7c:	ldr	r4, [sp, #240]	; 0xf0
   21c80:	b	21cf0 <__assert_fail@plt+0xf604>
   21c84:	mov	r9, r3
   21c88:	b	21b4c <__assert_fail@plt+0xf460>
   21c8c:	ldr	r3, [sp, #36]	; 0x24
   21c90:	ldr	r2, [sp, #148]	; 0x94
   21c94:	cmp	r2, r3
   21c98:	movne	r0, #0
   21c9c:	bne	21b80 <__assert_fail@plt+0xf494>
   21ca0:	ldr	r1, [sp, #32]
   21ca4:	ldr	r0, [sp, #144]	; 0x90
   21ca8:	bl	12158 <memcmp@plt>
   21cac:	clz	r0, r0
   21cb0:	lsr	r0, r0, #5
   21cb4:	b	21b80 <__assert_fail@plt+0xf494>
   21cb8:	ldr	r3, [sp, #256]	; 0x100
   21cbc:	strb	r8, [sp, #252]	; 0xfc
   21cc0:	ldr	r2, [sp, #260]	; 0x104
   21cc4:	add	r3, r3, r2
   21cc8:	str	r3, [sp, #256]	; 0x100
   21ccc:	add	r0, sp, #240	; 0xf0
   21cd0:	bl	22080 <__assert_fail@plt+0xf994>
   21cd4:	ldrb	r3, [sp, #264]	; 0x108
   21cd8:	cmp	r3, #0
   21cdc:	beq	21cfc <__assert_fail@plt+0xf610>
   21ce0:	ldr	r3, [sp, #268]	; 0x10c
   21ce4:	cmp	r3, #0
   21ce8:	bne	21cfc <__assert_fail@plt+0xf610>
   21cec:	ldr	r4, [sp, #144]	; 0x90
   21cf0:	mov	r0, r4
   21cf4:	add	sp, sp, #300	; 0x12c
   21cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cfc:	add	r0, sp, #184	; 0xb8
   21d00:	bl	22080 <__assert_fail@plt+0xf994>
   21d04:	ldrb	r2, [sp, #208]	; 0xd0
   21d08:	cmp	r2, #0
   21d0c:	beq	21d1c <__assert_fail@plt+0xf630>
   21d10:	ldr	r3, [sp, #212]	; 0xd4
   21d14:	cmp	r3, #0
   21d18:	beq	21df8 <__assert_fail@plt+0xf70c>
   21d1c:	cmp	r2, #0
   21d20:	add	r7, r7, #1
   21d24:	beq	21d74 <__assert_fail@plt+0xf688>
   21d28:	ldrb	r3, [sp, #264]	; 0x108
   21d2c:	cmp	r3, #0
   21d30:	beq	21d74 <__assert_fail@plt+0xf688>
   21d34:	ldr	r3, [sp, #212]	; 0xd4
   21d38:	ldr	r0, [sp, #268]	; 0x10c
   21d3c:	subs	r0, r3, r0
   21d40:	movne	r0, #1
   21d44:	cmp	r0, #0
   21d48:	bne	21da0 <__assert_fail@plt+0xf6b4>
   21d4c:	ldrd	r2, [sp, #200]	; 0xc8
   21d50:	strb	r0, [sp, #196]	; 0xc4
   21d54:	strb	r0, [sp, #252]	; 0xfc
   21d58:	add	r3, r3, r2
   21d5c:	ldr	r2, [sp, #260]	; 0x104
   21d60:	str	r3, [sp, #200]	; 0xc8
   21d64:	ldr	r3, [sp, #256]	; 0x100
   21d68:	add	r3, r3, r2
   21d6c:	str	r3, [sp, #256]	; 0x100
   21d70:	b	21ccc <__assert_fail@plt+0xf5e0>
   21d74:	ldr	r2, [sp, #204]	; 0xcc
   21d78:	ldr	r3, [sp, #260]	; 0x104
   21d7c:	cmp	r2, r3
   21d80:	movne	r0, #1
   21d84:	bne	21d44 <__assert_fail@plt+0xf658>
   21d88:	ldr	r0, [sp, #200]	; 0xc8
   21d8c:	ldr	r1, [sp, #256]	; 0x100
   21d90:	bl	12158 <memcmp@plt>
   21d94:	adds	r0, r0, #0
   21d98:	movne	r0, #1
   21d9c:	b	21d44 <__assert_fail@plt+0xf658>
   21da0:	ldrd	r2, [sp, #144]	; 0x90
   21da4:	strb	r8, [sp, #140]	; 0x8c
   21da8:	add	r3, r3, r2
   21dac:	str	r3, [sp, #144]	; 0x90
   21db0:	mov	r3, r9
   21db4:	b	21b00 <__assert_fail@plt+0xf414>
   21db8:	ldrb	fp, [r5]
   21dbc:	cmp	fp, #0
   21dc0:	beq	21cf0 <__assert_fail@plt+0xf604>
   21dc4:	mov	r9, #0
   21dc8:	add	r3, r5, #1
   21dcc:	mov	r7, r4
   21dd0:	mov	r2, r5
   21dd4:	mov	r6, r9
   21dd8:	mov	r8, r9
   21ddc:	str	r3, [sp, #4]
   21de0:	mov	r1, #1
   21de4:	mov	sl, r7
   21de8:	mov	r4, r7
   21dec:	ldrb	r3, [sl], #1
   21df0:	cmp	r3, #0
   21df4:	bne	21e00 <__assert_fail@plt+0xf714>
   21df8:	mov	r4, #0
   21dfc:	b	21cf0 <__assert_fail@plt+0xf604>
   21e00:	cmp	r8, #9
   21e04:	movls	r3, #0
   21e08:	andhi	r3, r1, #1
   21e0c:	cmp	r3, #0
   21e10:	beq	21ec8 <__assert_fail@plt+0xf7dc>
   21e14:	add	r1, r8, r8, lsl #2
   21e18:	cmp	r6, r1
   21e1c:	bcc	21e78 <__assert_fail@plt+0xf78c>
   21e20:	cmp	r2, #0
   21e24:	str	r3, [sp, #12]
   21e28:	beq	21e50 <__assert_fail@plt+0xf764>
   21e2c:	sub	r1, r6, r9
   21e30:	mov	r0, r2
   21e34:	str	r2, [sp, #8]
   21e38:	bl	124dc <strnlen@plt>
   21e3c:	ldrd	r2, [sp, #8]
   21e40:	mov	r9, r6
   21e44:	ldrb	r1, [r2, r0]!
   21e48:	cmp	r1, #0
   21e4c:	bne	21e78 <__assert_fail@plt+0xf78c>
   21e50:	mov	r0, r5
   21e54:	bl	123bc <strlen@plt>
   21e58:	mov	r2, r0
   21e5c:	add	r3, sp, #240	; 0xf0
   21e60:	mov	r1, r5
   21e64:	mov	r0, r7
   21e68:	bl	215f8 <__assert_fail@plt+0xef0c>
   21e6c:	subs	r3, r0, #0
   21e70:	bne	21c7c <__assert_fail@plt+0xf590>
   21e74:	mov	r2, r3
   21e78:	ldrb	r1, [sl, #-1]
   21e7c:	add	r8, r8, #1
   21e80:	add	r0, r6, #1
   21e84:	cmp	r1, fp
   21e88:	bne	21eb8 <__assert_fail@plt+0xf7cc>
   21e8c:	ldr	r1, [sp, #4]
   21e90:	sub	r6, r6, r5
   21e94:	ldrb	lr, [r1], #1
   21e98:	cmp	lr, #0
   21e9c:	beq	21cf0 <__assert_fail@plt+0xf604>
   21ea0:	ldrb	ip, [r7, #1]!
   21ea4:	cmp	ip, #0
   21ea8:	beq	21df8 <__assert_fail@plt+0xf70c>
   21eac:	cmp	lr, ip
   21eb0:	add	r0, r6, r1
   21eb4:	beq	21e94 <__assert_fail@plt+0xf7a8>
   21eb8:	mov	r7, sl
   21ebc:	mov	r6, r0
   21ec0:	mov	r1, r3
   21ec4:	b	21de4 <__assert_fail@plt+0xf6f8>
   21ec8:	mov	r3, r1
   21ecc:	b	21e78 <__assert_fail@plt+0xf78c>
   21ed0:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, lr}
   21ed4:	mov	r8, r2
   21ed8:	mov	r5, r0
   21edc:	add	r9, r0, r1
   21ee0:	mov	r4, #0
   21ee4:	bl	12260 <__ctype_get_mb_cur_max@plt>
   21ee8:	cmp	r0, #1
   21eec:	andls	r8, r8, #2
   21ef0:	bls	22028 <__assert_fail@plt+0xf93c>
   21ef4:	cmp	r5, r9
   21ef8:	bcs	2200c <__assert_fail@plt+0xf920>
   21efc:	ldrb	r3, [r5]
   21f00:	cmp	r3, #63	; 0x3f
   21f04:	bhi	21f28 <__assert_fail@plt+0xf83c>
   21f08:	cmp	r3, #37	; 0x25
   21f0c:	bcs	21f1c <__assert_fail@plt+0xf830>
   21f10:	sub	r3, r3, #32
   21f14:	cmp	r3, #3
   21f18:	bhi	21f44 <__assert_fail@plt+0xf858>
   21f1c:	add	r5, r5, #1
   21f20:	add	r4, r4, #1
   21f24:	b	21ef4 <__assert_fail@plt+0xf808>
   21f28:	cmp	r3, #65	; 0x41
   21f2c:	bcc	21f44 <__assert_fail@plt+0xf858>
   21f30:	cmp	r3, #95	; 0x5f
   21f34:	bls	21f1c <__assert_fail@plt+0xf830>
   21f38:	sub	r3, r3, #97	; 0x61
   21f3c:	cmp	r3, #29
   21f40:	b	21f18 <__assert_fail@plt+0xf82c>
   21f44:	mov	r2, #0
   21f48:	mov	r3, #0
   21f4c:	and	sl, r8, #2
   21f50:	mvn	fp, #-2147483648	; 0x80000000
   21f54:	strd	r2, [sp, #8]
   21f58:	add	r3, sp, #8
   21f5c:	sub	r2, r9, r5
   21f60:	mov	r1, r5
   21f64:	add	r0, sp, #4
   21f68:	bl	2a36c <__assert_fail@plt+0x17c80>
   21f6c:	cmn	r0, #1
   21f70:	mov	r6, r0
   21f74:	bne	21f88 <__assert_fail@plt+0xf89c>
   21f78:	tst	r8, #1
   21f7c:	beq	21f1c <__assert_fail@plt+0xf830>
   21f80:	mvn	r4, #0
   21f84:	b	2200c <__assert_fail@plt+0xf920>
   21f88:	cmn	r0, #2
   21f8c:	bne	21fa4 <__assert_fail@plt+0xf8b8>
   21f90:	tst	r8, #1
   21f94:	bne	21f80 <__assert_fail@plt+0xf894>
   21f98:	add	r4, r4, #1
   21f9c:	mov	r5, r9
   21fa0:	b	21ef4 <__assert_fail@plt+0xf808>
   21fa4:	cmp	r0, #0
   21fa8:	ldr	r0, [sp, #4]
   21fac:	moveq	r6, #1
   21fb0:	bl	12074 <wcwidth@plt>
   21fb4:	cmp	r0, #0
   21fb8:	blt	21fe4 <__assert_fail@plt+0xf8f8>
   21fbc:	sub	r2, fp, r4
   21fc0:	cmp	r2, r0
   21fc4:	blt	22008 <__assert_fail@plt+0xf91c>
   21fc8:	add	r4, r4, r0
   21fcc:	add	r0, sp, #8
   21fd0:	add	r5, r5, r6
   21fd4:	bl	12134 <mbsinit@plt>
   21fd8:	cmp	r0, #0
   21fdc:	beq	21f58 <__assert_fail@plt+0xf86c>
   21fe0:	b	21ef4 <__assert_fail@plt+0xf808>
   21fe4:	cmp	sl, #0
   21fe8:	bne	21f80 <__assert_fail@plt+0xf894>
   21fec:	ldr	r0, [sp, #4]
   21ff0:	bl	121dc <iswcntrl@plt>
   21ff4:	cmp	r0, #0
   21ff8:	bne	21fcc <__assert_fail@plt+0xf8e0>
   21ffc:	cmn	r4, #-2147483647	; 0x80000001
   22000:	addne	r4, r4, #1
   22004:	bne	21fcc <__assert_fail@plt+0xf8e0>
   22008:	mvn	r4, #-2147483648	; 0x80000000
   2200c:	mov	r0, r4
   22010:	add	sp, sp, #16
   22014:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   22018:	cmp	r8, #0
   2201c:	bne	21f80 <__assert_fail@plt+0xf894>
   22020:	tst	r3, #2
   22024:	beq	2204c <__assert_fail@plt+0xf960>
   22028:	cmp	r5, r9
   2202c:	bcs	2200c <__assert_fail@plt+0xf920>
   22030:	bl	12374 <__ctype_b_loc@plt>
   22034:	ldrb	r3, [r5], #1
   22038:	ldr	r2, [r0]
   2203c:	lsl	r3, r3, #1
   22040:	ldrh	r3, [r2, r3]
   22044:	tst	r3, #16384	; 0x4000
   22048:	beq	22018 <__assert_fail@plt+0xf92c>
   2204c:	cmn	r4, #-2147483647	; 0x80000001
   22050:	beq	2200c <__assert_fail@plt+0xf920>
   22054:	add	r4, r4, #1
   22058:	b	22028 <__assert_fail@plt+0xf93c>
   2205c:	push	{r4, r5, r6, lr}
   22060:	mov	r5, r1
   22064:	mov	r4, r0
   22068:	bl	123bc <strlen@plt>
   2206c:	mov	r1, r0
   22070:	mov	r2, r5
   22074:	mov	r0, r4
   22078:	pop	{r4, r5, r6, lr}
   2207c:	b	21ed0 <__assert_fail@plt+0xf7e4>
   22080:	ldrb	r3, [r0, #12]
   22084:	cmp	r3, #0
   22088:	bxne	lr
   2208c:	push	{r4, r5, r6, lr}
   22090:	mov	r4, r0
   22094:	ldrb	r3, [r0]
   22098:	ldr	r5, [r0, #16]
   2209c:	cmp	r3, #0
   220a0:	bne	22100 <__assert_fail@plt+0xfa14>
   220a4:	ldrb	r0, [r5]
   220a8:	bl	3709c <__assert_fail@plt+0x249b0>
   220ac:	cmp	r0, #0
   220b0:	beq	220d4 <__assert_fail@plt+0xf9e8>
   220b4:	mov	r3, #1
   220b8:	str	r3, [r4, #20]
   220bc:	ldrb	r2, [r5]
   220c0:	str	r2, [r4, #28]
   220c4:	strb	r3, [r4, #24]
   220c8:	mov	r3, #1
   220cc:	strb	r3, [r4, #12]
   220d0:	pop	{r4, r5, r6, pc}
   220d4:	add	r0, r4, #4
   220d8:	bl	12134 <mbsinit@plt>
   220dc:	cmp	r0, #0
   220e0:	movne	r3, #1
   220e4:	strbne	r3, [r4]
   220e8:	bne	22100 <__assert_fail@plt+0xfa14>
   220ec:	ldr	r3, [pc, #220]	; 221d0 <__assert_fail@plt+0xfae4>
   220f0:	mov	r2, #143	; 0x8f
   220f4:	ldr	r1, [pc, #216]	; 221d4 <__assert_fail@plt+0xfae8>
   220f8:	ldr	r0, [pc, #216]	; 221d8 <__assert_fail@plt+0xfaec>
   220fc:	bl	126ec <__assert_fail@plt>
   22100:	bl	12260 <__ctype_get_mb_cur_max@plt>
   22104:	mov	r1, r0
   22108:	mov	r0, r5
   2210c:	bl	26ef0 <__assert_fail@plt+0x14804>
   22110:	add	r6, r4, #4
   22114:	mov	r2, r0
   22118:	mov	r3, r6
   2211c:	mov	r1, r5
   22120:	add	r0, r4, #28
   22124:	bl	2a36c <__assert_fail@plt+0x17c80>
   22128:	cmn	r0, #1
   2212c:	str	r0, [r4, #20]
   22130:	bne	22144 <__assert_fail@plt+0xfa58>
   22134:	mov	r3, #1
   22138:	str	r3, [r4, #20]
   2213c:	mov	r3, #0
   22140:	b	220c4 <__assert_fail@plt+0xf9d8>
   22144:	cmn	r0, #2
   22148:	bne	2215c <__assert_fail@plt+0xfa70>
   2214c:	ldr	r0, [r4, #16]
   22150:	bl	123bc <strlen@plt>
   22154:	str	r0, [r4, #20]
   22158:	b	2213c <__assert_fail@plt+0xfa50>
   2215c:	cmp	r0, #0
   22160:	bne	221b0 <__assert_fail@plt+0xfac4>
   22164:	mov	r3, #1
   22168:	str	r3, [r4, #20]
   2216c:	ldr	r3, [r4, #16]
   22170:	ldrb	r3, [r3]
   22174:	cmp	r3, #0
   22178:	beq	22190 <__assert_fail@plt+0xfaa4>
   2217c:	ldr	r3, [pc, #76]	; 221d0 <__assert_fail@plt+0xfae4>
   22180:	mov	r2, #171	; 0xab
   22184:	ldr	r1, [pc, #72]	; 221d4 <__assert_fail@plt+0xfae8>
   22188:	ldr	r0, [pc, #76]	; 221dc <__assert_fail@plt+0xfaf0>
   2218c:	bl	126ec <__assert_fail@plt>
   22190:	ldr	r3, [r4, #28]
   22194:	cmp	r3, #0
   22198:	beq	221b0 <__assert_fail@plt+0xfac4>
   2219c:	ldr	r3, [pc, #44]	; 221d0 <__assert_fail@plt+0xfae4>
   221a0:	mov	r2, #172	; 0xac
   221a4:	ldr	r1, [pc, #40]	; 221d4 <__assert_fail@plt+0xfae8>
   221a8:	ldr	r0, [pc, #48]	; 221e0 <__assert_fail@plt+0xfaf4>
   221ac:	bl	126ec <__assert_fail@plt>
   221b0:	mov	r3, #1
   221b4:	mov	r0, r6
   221b8:	strb	r3, [r4, #24]
   221bc:	bl	12134 <mbsinit@plt>
   221c0:	cmp	r0, #0
   221c4:	movne	r3, #0
   221c8:	strbne	r3, [r4]
   221cc:	b	220c8 <__assert_fail@plt+0xf9dc>
   221d0:	andeq	fp, r3, r6, lsr ip
   221d4:	andeq	fp, r3, r9, asr #24
   221d8:	andeq	fp, r3, r3, asr ip
   221dc:	andeq	fp, r3, sl, ror #24
   221e0:	andeq	fp, r3, r1, lsl #25
   221e4:	ldr	r3, [r0, #16]
   221e8:	add	r1, r3, r1
   221ec:	str	r1, [r0, #16]
   221f0:	bx	lr
   221f4:	ldrb	r2, [r1]
   221f8:	mov	r3, r0
   221fc:	add	r0, r0, #16
   22200:	cmp	r2, #0
   22204:	strb	r2, [r3], #4
   22208:	movne	ip, r1
   2220c:	add	r1, r1, #16
   22210:	ldrne	r2, [ip, #4]!
   22214:	streq	r2, [r0, #-12]
   22218:	strne	r2, [r0, #-12]
   2221c:	ldrne	r2, [ip, #4]
   22220:	str	r2, [r3, #4]
   22224:	ldrb	r3, [r1, #-4]
   22228:	strb	r3, [r0, #-4]
   2222c:	b	37048 <__assert_fail@plt+0x2495c>
   22230:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22234:	mov	r5, r0
   22238:	ldrb	r3, [r0]
   2223c:	sub	r3, r3, #48	; 0x30
   22240:	cmp	r3, #7
   22244:	subhi	r3, r0, #1
   22248:	movhi	r0, #1
   2224c:	bhi	222e0 <__assert_fail@plt+0xfbf4>
   22250:	mov	r3, r5
   22254:	mov	r4, #0
   22258:	ldrb	r2, [r3], #1
   2225c:	lsl	r4, r4, #3
   22260:	sub	r4, r4, #48	; 0x30
   22264:	add	r4, r2, r4
   22268:	cmp	r4, #4096	; 0x1000
   2226c:	bcs	2251c <__assert_fail@plt+0xfe30>
   22270:	ldrb	r2, [r3]
   22274:	sub	r1, r2, #48	; 0x30
   22278:	cmp	r1, #7
   2227c:	bls	22258 <__assert_fail@plt+0xfb6c>
   22280:	cmp	r2, #0
   22284:	bne	2251c <__assert_fail@plt+0xfe30>
   22288:	sub	r3, r3, r5
   2228c:	mov	r0, #32
   22290:	cmp	r3, #4
   22294:	andle	r5, r4, #3072	; 0xc00
   22298:	movwgt	r5, #4095	; 0xfff
   2229c:	mvnle	r5, r5, lsr #10
   222a0:	mvnle	r5, r5, lsl #10
   222a4:	bl	273e0 <__assert_fail@plt+0x14cf4>
   222a8:	movw	r3, #317	; 0x13d
   222ac:	strh	r3, [r0]
   222b0:	movw	r3, #4095	; 0xfff
   222b4:	strd	r4, [r0, #8]
   222b8:	str	r3, [r0, #4]
   222bc:	mov	r3, #0
   222c0:	strb	r3, [r0, #17]
   222c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   222c8:	and	ip, r4, #239	; 0xef
   222cc:	cmp	r4, #43	; 0x2b
   222d0:	cmpne	ip, #45	; 0x2d
   222d4:	moveq	ip, #1
   222d8:	movne	ip, #0
   222dc:	add	r0, r0, ip
   222e0:	ldrb	r4, [r3, #1]!
   222e4:	cmp	r4, #0
   222e8:	bne	222c8 <__assert_fail@plt+0xfbdc>
   222ec:	mov	r1, #16
   222f0:	movw	r7, #519	; 0x207
   222f4:	bl	274a0 <__assert_fail@plt+0x14db4>
   222f8:	movw	r8, #1080	; 0x438
   222fc:	mov	ip, r4
   22300:	mov	r1, #0
   22304:	ldrb	r3, [r5]
   22308:	mov	r2, r5
   2230c:	add	r5, r5, #1
   22310:	cmp	r3, #97	; 0x61
   22314:	beq	223d0 <__assert_fail@plt+0xfce4>
   22318:	bhi	223a0 <__assert_fail@plt+0xfcb4>
   2231c:	cmp	r3, #45	; 0x2d
   22320:	beq	22334 <__assert_fail@plt+0xfc48>
   22324:	cmp	r3, #61	; 0x3d
   22328:	beq	22334 <__assert_fail@plt+0xfc48>
   2232c:	cmp	r3, #43	; 0x2b
   22330:	bne	22518 <__assert_fail@plt+0xfe2c>
   22334:	add	r4, r0, ip, lsl #4
   22338:	ldrb	lr, [r2, #1]
   2233c:	mov	r3, r2
   22340:	ldrb	r9, [r3], #1
   22344:	cmp	lr, #103	; 0x67
   22348:	beq	22494 <__assert_fail@plt+0xfda8>
   2234c:	bhi	223d8 <__assert_fail@plt+0xfcec>
   22350:	sub	lr, lr, #48	; 0x30
   22354:	cmp	lr, #7
   22358:	movls	r2, r3
   2235c:	movls	r3, #0
   22360:	bls	223fc <__assert_fail@plt+0xfd10>
   22364:	mov	lr, r3
   22368:	mov	r5, #1
   2236c:	mov	r3, #0
   22370:	ldrb	r6, [lr]
   22374:	mov	r2, lr
   22378:	add	lr, lr, #1
   2237c:	cmp	r6, #115	; 0x73
   22380:	beq	224f4 <__assert_fail@plt+0xfe08>
   22384:	bhi	224bc <__assert_fail@plt+0xfdd0>
   22388:	cmp	r6, #88	; 0x58
   2238c:	beq	224fc <__assert_fail@plt+0xfe10>
   22390:	cmp	r6, #114	; 0x72
   22394:	beq	224dc <__assert_fail@plt+0xfdf0>
   22398:	mov	lr, #0
   2239c:	b	22444 <__assert_fail@plt+0xfd58>
   223a0:	cmp	r3, #111	; 0x6f
   223a4:	beq	223c8 <__assert_fail@plt+0xfcdc>
   223a8:	cmp	r3, #117	; 0x75
   223ac:	beq	223c0 <__assert_fail@plt+0xfcd4>
   223b0:	cmp	r3, #103	; 0x67
   223b4:	bne	22518 <__assert_fail@plt+0xfe2c>
   223b8:	orr	r1, r1, r8
   223bc:	b	22304 <__assert_fail@plt+0xfc18>
   223c0:	orr	r1, r1, #2496	; 0x9c0
   223c4:	b	22304 <__assert_fail@plt+0xfc18>
   223c8:	orr	r1, r1, r7
   223cc:	b	22304 <__assert_fail@plt+0xfc18>
   223d0:	movw	r1, #4095	; 0xfff
   223d4:	b	22304 <__assert_fail@plt+0xfc18>
   223d8:	cmp	lr, #111	; 0x6f
   223dc:	beq	224a8 <__assert_fail@plt+0xfdbc>
   223e0:	cmp	lr, #117	; 0x75
   223e4:	bne	22364 <__assert_fail@plt+0xfc78>
   223e8:	add	r2, r2, #2
   223ec:	mov	r5, #3
   223f0:	mov	lr, #0
   223f4:	mov	r3, #448	; 0x1c0
   223f8:	b	22444 <__assert_fail@plt+0xfd58>
   223fc:	ldrb	lr, [r2], #1
   22400:	lsl	r3, r3, #3
   22404:	sub	r3, r3, #48	; 0x30
   22408:	add	r3, lr, r3
   2240c:	cmp	r3, #4096	; 0x1000
   22410:	bcs	22518 <__assert_fail@plt+0xfe2c>
   22414:	ldrb	lr, [r2]
   22418:	sub	r5, lr, #48	; 0x30
   2241c:	cmp	r5, #7
   22420:	bls	223fc <__assert_fail@plt+0xfd10>
   22424:	cmp	r1, #0
   22428:	bne	22518 <__assert_fail@plt+0xfe2c>
   2242c:	cmp	lr, #0
   22430:	cmpne	lr, #44	; 0x2c
   22434:	bne	22518 <__assert_fail@plt+0xfe2c>
   22438:	movw	r1, #4095	; 0xfff
   2243c:	mov	r5, #1
   22440:	mov	lr, r1
   22444:	cmp	lr, #0
   22448:	add	ip, ip, #1
   2244c:	strb	r9, [r4]
   22450:	strb	r5, [r4, #1]
   22454:	stmib	r4, {r1, r3}
   22458:	bne	22468 <__assert_fail@plt+0xfd7c>
   2245c:	cmp	r1, #0
   22460:	andne	lr, r1, r3
   22464:	moveq	lr, r3
   22468:	ldrb	r3, [r2]
   2246c:	add	r4, r4, #16
   22470:	str	lr, [r4, #-4]
   22474:	and	lr, r3, #239	; 0xef
   22478:	cmp	r3, #43	; 0x2b
   2247c:	cmpne	lr, #45	; 0x2d
   22480:	beq	22338 <__assert_fail@plt+0xfc4c>
   22484:	cmp	r3, #44	; 0x2c
   22488:	bne	22504 <__assert_fail@plt+0xfe18>
   2248c:	add	r5, r2, #1
   22490:	b	22300 <__assert_fail@plt+0xfc14>
   22494:	add	r2, r2, #2
   22498:	mov	r5, #3
   2249c:	mov	lr, #0
   224a0:	mov	r3, #56	; 0x38
   224a4:	b	22444 <__assert_fail@plt+0xfd58>
   224a8:	add	r2, r2, #2
   224ac:	mov	r5, #3
   224b0:	mov	lr, #0
   224b4:	mov	r3, #7
   224b8:	b	22444 <__assert_fail@plt+0xfd58>
   224bc:	cmp	r6, #119	; 0x77
   224c0:	beq	224e4 <__assert_fail@plt+0xfdf8>
   224c4:	cmp	r6, #120	; 0x78
   224c8:	beq	224ec <__assert_fail@plt+0xfe00>
   224cc:	cmp	r6, #116	; 0x74
   224d0:	bne	22398 <__assert_fail@plt+0xfcac>
   224d4:	orr	r3, r3, #512	; 0x200
   224d8:	b	22370 <__assert_fail@plt+0xfc84>
   224dc:	orr	r3, r3, #292	; 0x124
   224e0:	b	22370 <__assert_fail@plt+0xfc84>
   224e4:	orr	r3, r3, #146	; 0x92
   224e8:	b	22370 <__assert_fail@plt+0xfc84>
   224ec:	orr	r3, r3, #73	; 0x49
   224f0:	b	22370 <__assert_fail@plt+0xfc84>
   224f4:	orr	r3, r3, #3072	; 0xc00
   224f8:	b	22370 <__assert_fail@plt+0xfc84>
   224fc:	mov	r5, #2
   22500:	b	22370 <__assert_fail@plt+0xfc84>
   22504:	cmp	r3, #0
   22508:	bne	22518 <__assert_fail@plt+0xfe2c>
   2250c:	add	ip, r0, ip, lsl #4
   22510:	strb	r3, [ip, #1]
   22514:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22518:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2251c:	mov	r0, #0
   22520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22524:	push	{r4, r5, lr}
   22528:	sub	sp, sp, #108	; 0x6c
   2252c:	mov	r1, sp
   22530:	bl	378e4 <__assert_fail@plt+0x251f8>
   22534:	subs	r4, r0, #0
   22538:	movne	r0, #0
   2253c:	bne	22568 <__assert_fail@plt+0xfe7c>
   22540:	mov	r0, #32
   22544:	ldr	r5, [sp, #16]
   22548:	bl	273e0 <__assert_fail@plt+0x14cf4>
   2254c:	movw	r3, #317	; 0x13d
   22550:	strh	r3, [r0]
   22554:	movw	r3, #4095	; 0xfff
   22558:	str	r3, [r0, #4]
   2255c:	str	r5, [r0, #8]
   22560:	str	r3, [r0, #12]
   22564:	strb	r4, [r0, #17]
   22568:	add	sp, sp, #108	; 0x6c
   2256c:	pop	{r4, r5, pc}
   22570:	push	{r4, r5, r6, r7, r8, r9, lr}
   22574:	cmp	r1, #0
   22578:	ubfx	r0, r0, #0, #12
   2257c:	movne	r6, #3072	; 0xc00
   22580:	moveq	r6, #0
   22584:	add	r3, r3, #16
   22588:	mov	r4, #0
   2258c:	ldr	r5, [sp, #28]
   22590:	mvn	r2, r2
   22594:	ldrb	r7, [r3, #-15]
   22598:	cmp	r7, #0
   2259c:	bne	225ac <__assert_fail@plt+0xfec0>
   225a0:	cmp	r5, #0
   225a4:	strne	r4, [r5]
   225a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   225ac:	cmp	r7, #2
   225b0:	ldr	ip, [r3, #-12]
   225b4:	ldr	r8, [r3, #-4]
   225b8:	ldr	lr, [r3, #-8]
   225bc:	bic	r8, r6, r8
   225c0:	beq	22640 <__assert_fail@plt+0xff54>
   225c4:	cmp	r7, #3
   225c8:	bne	22600 <__assert_fail@plt+0xff14>
   225cc:	and	lr, lr, r0
   225d0:	tst	lr, #292	; 0x124
   225d4:	movne	r7, #292	; 0x124
   225d8:	moveq	r7, #0
   225dc:	tst	lr, #146	; 0x92
   225e0:	movne	r9, #146	; 0x92
   225e4:	moveq	r9, #0
   225e8:	tst	lr, #73	; 0x49
   225ec:	orr	r7, r7, r9
   225f0:	movne	r9, #73	; 0x49
   225f4:	moveq	r9, #0
   225f8:	orr	r7, r7, r9
   225fc:	orr	lr, r7, lr
   22600:	cmp	ip, #0
   22604:	bic	lr, lr, r8
   22608:	movne	r7, ip
   2260c:	moveq	r7, r2
   22610:	and	lr, lr, r7
   22614:	ldrb	r7, [r3, #-16]
   22618:	cmp	r7, #45	; 0x2d
   2261c:	orreq	r4, r4, lr
   22620:	biceq	r0, r0, lr
   22624:	beq	22670 <__assert_fail@plt+0xff84>
   22628:	cmp	r7, #61	; 0x3d
   2262c:	beq	22650 <__assert_fail@plt+0xff64>
   22630:	cmp	r7, #43	; 0x2b
   22634:	orreq	r4, r4, lr
   22638:	orreq	r0, r0, lr
   2263c:	b	22670 <__assert_fail@plt+0xff84>
   22640:	and	r7, r0, #73	; 0x49
   22644:	orrs	r7, r7, r1
   22648:	orrne	lr, lr, #73	; 0x49
   2264c:	b	22600 <__assert_fail@plt+0xff14>
   22650:	cmp	ip, #0
   22654:	mvnne	ip, ip
   22658:	orr	ip, ip, r8
   2265c:	mvn	r7, ip
   22660:	and	ip, ip, r0
   22664:	ubfx	r7, r7, #0, #12
   22668:	orr	r0, ip, lr
   2266c:	orr	r4, r4, r7
   22670:	add	r3, r3, #16
   22674:	b	22594 <__assert_fail@plt+0xfea8>
   22678:	ldr	r3, [pc, #44]	; 226ac <__assert_fail@plt+0xffc0>
   2267c:	mov	r5, r0
   22680:	mov	r2, #5
   22684:	push	{r4, lr}
   22688:	mov	r0, #0
   2268c:	ldr	r1, [pc, #28]	; 226b0 <__assert_fail@plt+0xffc4>
   22690:	ldr	r4, [r3]
   22694:	bl	1217c <dcgettext@plt>
   22698:	mov	r2, r0
   2269c:	mov	r1, r5
   226a0:	mov	r0, r4
   226a4:	bl	122c0 <error@plt>
   226a8:	bl	12698 <abort@plt>
   226ac:	andeq	lr, r4, r4, lsl #10
   226b0:	muleq	r3, r3, ip
   226b4:	ldr	r3, [pc, #44]	; 226e8 <__assert_fail@plt+0xfffc>
   226b8:	mov	r5, r0
   226bc:	mov	r2, #5
   226c0:	push	{r4, lr}
   226c4:	mov	r0, #0
   226c8:	ldr	r1, [pc, #28]	; 226ec <__assert_fail@plt+0x10000>
   226cc:	ldr	r4, [r3]
   226d0:	bl	1217c <dcgettext@plt>
   226d4:	mov	r2, r0
   226d8:	mov	r1, r5
   226dc:	mov	r0, r4
   226e0:	bl	122c0 <error@plt>
   226e4:	bl	12698 <abort@plt>
   226e8:	andeq	lr, r4, r4, lsl #10
   226ec:			; <UNDEFINED> instruction: 0x0003bcbe
   226f0:	push	{r2, r3}
   226f4:	push	{r0, r1, r2, lr}
   226f8:	ldr	r2, [sp, #16]
   226fc:	ands	r3, r2, #64	; 0x40
   22700:	addne	r3, sp, #20
   22704:	strne	r3, [sp, #4]
   22708:	ldrne	r3, [sp, #20]
   2270c:	bl	123e0 <openat64@plt>
   22710:	bl	26f28 <__assert_fail@plt+0x1483c>
   22714:	add	sp, sp, #12
   22718:	pop	{lr}		; (ldr lr, [sp], #4)
   2271c:	add	sp, sp, #8
   22720:	bx	lr
   22724:	andeq	r0, r0, r0
   22728:	sub	sp, sp, #8
   2272c:	push	{r4, r5, r6, r7, r8, lr}
   22730:	add	ip, sp, #24
   22734:	mov	r4, r0
   22738:	stm	ip, {r2, r3}
   2273c:	ldr	r3, [r0, #156]	; 0x9c
   22740:	ldrd	r6, [sp, #32]
   22744:	ldr	r5, [sp, #40]	; 0x28
   22748:	cmp	r3, #0
   2274c:	beq	227a0 <__assert_fail@plt+0x100b4>
   22750:	ldr	r2, [r0, #48]	; 0x30
   22754:	cmp	r2, #0
   22758:	bne	227a0 <__assert_fail@plt+0x100b4>
   2275c:	ldrb	r2, [r0, #153]	; 0x99
   22760:	cmp	r2, #0
   22764:	bne	227a0 <__assert_fail@plt+0x100b4>
   22768:	ldr	r3, [r0, #172]	; 0xac
   2276c:	cmp	r5, #2
   22770:	cmple	r3, #0
   22774:	beq	22810 <__assert_fail@plt+0x10124>
   22778:	mov	r3, #1
   2277c:	add	r4, r0, #32
   22780:	strb	r3, [r0, #180]	; 0xb4
   22784:	ldm	ip!, {r0, r1, r2, r3}
   22788:	stmia	r4!, {r0, r1, r2, r3}
   2278c:	ldm	ip, {r0, r1}
   22790:	stm	r4, {r0, r1}
   22794:	pop	{r4, r5, r6, r7, r8, lr}
   22798:	add	sp, sp, #8
   2279c:	bx	lr
   227a0:	cmp	r5, #4
   227a4:	ble	22810 <__assert_fail@plt+0x10124>
   227a8:	add	r3, r3, #1
   227ac:	mov	r2, #100	; 0x64
   227b0:	mov	r0, r6
   227b4:	mov	r1, r7
   227b8:	str	r3, [r4, #156]	; 0x9c
   227bc:	mov	r3, #0
   227c0:	sub	r5, r5, #4
   227c4:	bl	375dc <__assert_fail@plt+0x24ef0>
   227c8:	mov	r0, r6
   227cc:	mov	r1, r7
   227d0:	strd	r2, [r4, #64]	; 0x40
   227d4:	mov	r2, #100	; 0x64
   227d8:	mov	r3, #0
   227dc:	bl	375dc <__assert_fail@plt+0x24ef0>
   227e0:	mov	r2, #100	; 0x64
   227e4:	mov	r3, #0
   227e8:	bl	375dc <__assert_fail@plt+0x24ef0>
   227ec:	mov	r0, r6
   227f0:	mov	r1, r7
   227f4:	strd	r2, [r4, #56]	; 0x38
   227f8:	movw	r2, #10000	; 0x2710
   227fc:	mov	r3, #0
   22800:	bl	375dc <__assert_fail@plt+0x24ef0>
   22804:	strd	r0, [r4, #40]	; 0x28
   22808:	str	r5, [r4, #48]	; 0x30
   2280c:	b	22794 <__assert_fail@plt+0x100a8>
   22810:	ldr	r3, [r4, #172]	; 0xac
   22814:	cmp	r5, #2
   22818:	movle	r2, #0
   2281c:	strdle	r6, [r4, #72]	; 0x48
   22820:	add	r3, r3, #1
   22824:	str	r3, [r4, #172]	; 0xac
   22828:	movle	r3, #0
   2282c:	ble	2285c <__assert_fail@plt+0x10170>
   22830:	mov	r2, #100	; 0x64
   22834:	mov	r3, #0
   22838:	mov	r0, r6
   2283c:	mov	r1, r7
   22840:	bl	375dc <__assert_fail@plt+0x24ef0>
   22844:	mov	r2, #100	; 0x64
   22848:	mov	r3, #0
   2284c:	strd	r0, [r4, #72]	; 0x48
   22850:	mov	r0, r6
   22854:	mov	r1, r7
   22858:	bl	375dc <__assert_fail@plt+0x24ef0>
   2285c:	strd	r2, [r4, #80]	; 0x50
   22860:	mov	r3, #0
   22864:	str	r3, [r4, #88]	; 0x58
   22868:	str	r3, [r4, #92]	; 0x5c
   2286c:	mov	r3, #2
   22870:	str	r3, [r4, #28]
   22874:	b	22794 <__assert_fail@plt+0x100a8>
   22878:	ldr	r3, [r1, #24]
   2287c:	cmp	r3, #0
   22880:	blt	228e8 <__assert_fail@plt+0x101fc>
   22884:	ldm	r1, {r2, ip}
   22888:	ldr	r3, [r0]
   2288c:	eor	r3, r3, r2
   22890:	ldr	r2, [r0, #4]
   22894:	eor	r2, r2, ip
   22898:	ldr	ip, [r1, #8]
   2289c:	orr	r3, r3, r2
   228a0:	ldr	r2, [r0, #8]
   228a4:	eor	r2, r2, ip
   228a8:	ldr	ip, [r1, #12]
   228ac:	orr	r3, r3, r2
   228b0:	ldr	r2, [r0, #12]
   228b4:	eor	r2, r2, ip
   228b8:	ldr	ip, [r1, #16]
   228bc:	orr	r3, r3, r2
   228c0:	ldr	r2, [r0, #16]
   228c4:	ldr	r1, [r1, #20]
   228c8:	eor	r2, r2, ip
   228cc:	orr	r3, r3, r2
   228d0:	ldr	r2, [r0, #20]
   228d4:	eor	r2, r2, r1
   228d8:	orrs	r3, r3, r2
   228dc:	moveq	r0, #1
   228e0:	movne	r0, #0
   228e4:	bx	lr
   228e8:	mov	r0, #0
   228ec:	bx	lr
   228f0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228f4:	mov	r5, r3
   228f8:	mov	r6, r0
   228fc:	mov	lr, r1
   22900:	mov	r4, r2
   22904:	ldr	r3, [sp, #48]	; 0x30
   22908:	ldrd	r8, [sp, #56]	; 0x38
   2290c:	cmp	r3, #2
   22910:	bgt	229a0 <__assert_fail@plt+0x102b4>
   22914:	cmp	r8, #0
   22918:	sbcs	r3, r9, #0
   2291c:	bge	229ac <__assert_fail@plt+0x102c0>
   22920:	mov	r3, #100	; 0x64
   22924:	mul	r2, r3, r5
   22928:	umull	r4, r5, r4, r3
   2292c:	add	r5, r2, r5
   22930:	mov	r2, #100	; 0x64
   22934:	mov	r3, #0
   22938:	mov	r0, r4
   2293c:	mov	r1, r5
   22940:	bl	375dc <__assert_fail@plt+0x24ef0>
   22944:	mov	r3, #60	; 0x3c
   22948:	mov	r2, #100	; 0x64
   2294c:	umull	r8, r9, r0, r3
   22950:	mov	r0, r4
   22954:	mla	r9, r3, r1, r9
   22958:	mov	r3, #0
   2295c:	mov	r1, r5
   22960:	bl	375dc <__assert_fail@plt+0x24ef0>
   22964:	adds	r2, r8, r2
   22968:	adc	r3, r9, r3
   2296c:	adds	r1, r2, #1440	; 0x5a0
   22970:	adc	r3, r3, #0
   22974:	stm	sp, {r1, r3}
   22978:	ldrd	r0, [sp]
   2297c:	cmp	r1, #0
   22980:	cmpeq	r0, #2880	; 0xb40
   22984:	bhi	22a30 <__assert_fail@plt+0x10344>
   22988:	mov	r3, #60	; 0x3c
   2298c:	mov	r0, #1
   22990:	mul	r2, r3, r2
   22994:	str	r2, [r6]
   22998:	add	sp, sp, #12
   2299c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229a0:	cmp	r8, #0
   229a4:	sbcs	r3, r9, #0
   229a8:	blt	22930 <__assert_fail@plt+0x10244>
   229ac:	cmp	r5, r4, asr #31
   229b0:	mov	ip, #60	; 0x3c
   229b4:	mov	r7, #0
   229b8:	smulleq	r4, r5, r4, ip
   229bc:	moveq	r2, r4
   229c0:	moveq	ip, r5
   229c4:	beq	22a00 <__assert_fail@plt+0x10314>
   229c8:	cmp	r5, #0
   229cc:	umull	r2, r3, r4, ip
   229d0:	umull	r0, r1, ip, r5
   229d4:	bge	229e0 <__assert_fail@plt+0x102f4>
   229d8:	subs	r0, r0, r7
   229dc:	sbc	r1, r1, ip
   229e0:	adds	ip, r0, r3
   229e4:	mov	sl, #0
   229e8:	adc	sl, r1, sl
   229ec:	cmp	sl, ip, asr #31
   229f0:	movne	ip, #60	; 0x3c
   229f4:	movne	r7, #1
   229f8:	umullne	r2, r3, r4, ip
   229fc:	mlane	ip, ip, r5, r3
   22a00:	cmp	lr, #0
   22a04:	mov	r1, ip
   22a08:	beq	22a38 <__assert_fail@plt+0x1034c>
   22a0c:	subs	r4, r2, r8
   22a10:	mov	ip, #0
   22a14:	sbcs	r5, r1, r9
   22a18:	mov	r2, r4
   22a1c:	movvs	ip, #1
   22a20:	mov	r3, r5
   22a24:	mov	r1, ip
   22a28:	orrs	r1, r7, r1
   22a2c:	beq	2296c <__assert_fail@plt+0x10280>
   22a30:	mov	r0, #0
   22a34:	b	22998 <__assert_fail@plt+0x102ac>
   22a38:	adds	r4, r2, r8
   22a3c:	adcs	r5, ip, r9
   22a40:	mov	r2, r4
   22a44:	mov	r3, r5
   22a48:	movvs	r1, #1
   22a4c:	movvc	r1, #0
   22a50:	b	22a28 <__assert_fail@plt+0x1033c>
   22a54:	push	{r4, r5, r6, lr}
   22a58:	mov	r6, r0
   22a5c:	mov	r5, r1
   22a60:	ldr	r4, [pc, #124]	; 22ae4 <__assert_fail@plt+0x103f8>
   22a64:	ldr	r1, [r4]
   22a68:	cmp	r1, #0
   22a6c:	bne	22a9c <__assert_fail@plt+0x103b0>
   22a70:	add	r4, r6, #188	; 0xbc
   22a74:	ldr	r1, [r4]
   22a78:	cmp	r1, #0
   22a7c:	bne	22ab4 <__assert_fail@plt+0x103c8>
   22a80:	ldr	r4, [pc, #96]	; 22ae8 <__assert_fail@plt+0x103fc>
   22a84:	ldr	r1, [r4]
   22a88:	cmp	r1, #0
   22a8c:	bne	22acc <__assert_fail@plt+0x103e0>
   22a90:	mov	r4, r1
   22a94:	mov	r0, r4
   22a98:	pop	{r4, r5, r6, pc}
   22a9c:	mov	r0, r5
   22aa0:	bl	11ffc <strcmp@plt>
   22aa4:	cmp	r0, #0
   22aa8:	beq	22a94 <__assert_fail@plt+0x103a8>
   22aac:	add	r4, r4, #12
   22ab0:	b	22a64 <__assert_fail@plt+0x10378>
   22ab4:	mov	r0, r5
   22ab8:	bl	11ffc <strcmp@plt>
   22abc:	cmp	r0, #0
   22ac0:	beq	22a94 <__assert_fail@plt+0x103a8>
   22ac4:	add	r4, r4, #12
   22ac8:	b	22a74 <__assert_fail@plt+0x10388>
   22acc:	mov	r0, r5
   22ad0:	bl	11ffc <strcmp@plt>
   22ad4:	cmp	r0, #0
   22ad8:	beq	22a94 <__assert_fail@plt+0x103a8>
   22adc:	add	r4, r4, #12
   22ae0:	b	22a84 <__assert_fail@plt+0x10398>
   22ae4:	andeq	fp, r3, ip, ror #25
   22ae8:	andeq	fp, r3, ip, lsl sp
   22aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22af0:	sub	sp, sp, #1520	; 0x5f0
   22af4:	mov	r4, r0
   22af8:	sub	sp, sp, #4
   22afc:	add	r3, sp, #248	; 0xf8
   22b00:	add	r5, sp, #400	; 0x190
   22b04:	str	r3, [sp, #80]	; 0x50
   22b08:	mov	r3, #0
   22b0c:	mov	r8, r3
   22b10:	str	r3, [sp, #84]	; 0x54
   22b14:	mvn	r3, #1
   22b18:	str	r3, [sp, #48]	; 0x30
   22b1c:	ldr	r3, [sp, #80]	; 0x50
   22b20:	ldr	r2, [sp, #80]	; 0x50
   22b24:	strh	r8, [r3]
   22b28:	add	r3, sp, #284	; 0x11c
   22b2c:	add	r3, r3, #2
   22b30:	cmp	r2, r3
   22b34:	bcs	24560 <__assert_fail@plt+0x11e74>
   22b38:	cmp	r8, #12
   22b3c:	beq	24568 <__assert_fail@plt+0x11e7c>
   22b40:	ldr	r3, [pc, #3716]	; 239cc <__assert_fail@plt+0x112e0>
   22b44:	movw	r2, #1692	; 0x69c
   22b48:	add	r3, r3, r8
   22b4c:	ldrsb	r3, [r3, r2]
   22b50:	cmn	r3, #93	; 0x5d
   22b54:	str	r3, [sp, #20]
   22b58:	beq	230e8 <__assert_fail@plt+0x109fc>
   22b5c:	ldr	r3, [sp, #48]	; 0x30
   22b60:	cmn	r3, #2
   22b64:	bne	22ca4 <__assert_fail@plt+0x105b8>
   22b68:	ldr	r7, [r4]
   22b6c:	ldrb	r6, [r7]
   22b70:	mov	r0, r6
   22b74:	bl	36b90 <__assert_fail@plt+0x244a4>
   22b78:	subs	r9, r0, #0
   22b7c:	addne	r7, r7, #1
   22b80:	strne	r7, [r4]
   22b84:	bne	22b68 <__assert_fail@plt+0x1047c>
   22b88:	sub	r2, r6, #48	; 0x30
   22b8c:	sub	r3, r6, #43	; 0x2b
   22b90:	cmp	r2, #9
   22b94:	and	r3, r3, #253	; 0xfd
   22b98:	bls	22d68 <__assert_fail@plt+0x1067c>
   22b9c:	cmp	r3, #0
   22ba0:	beq	22d70 <__assert_fail@plt+0x10684>
   22ba4:	mov	r0, r6
   22ba8:	bl	36a68 <__assert_fail@plt+0x2437c>
   22bac:	subs	r3, r0, #0
   22bb0:	str	r3, [sp, #24]
   22bb4:	beq	23078 <__assert_fail@plt+0x1098c>
   22bb8:	add	r3, sp, #240	; 0xf0
   22bbc:	add	r9, sp, #228	; 0xe4
   22bc0:	mov	r7, r9
   22bc4:	add	fp, r3, #7
   22bc8:	ldr	r3, [r4]
   22bcc:	cmp	r9, fp
   22bd0:	strbcc	r6, [r9], #1
   22bd4:	add	r2, r3, #1
   22bd8:	str	r2, [r4]
   22bdc:	ldrb	r6, [r3, #1]
   22be0:	mov	r0, r6
   22be4:	bl	36a68 <__assert_fail@plt+0x2437c>
   22be8:	subs	sl, r0, #0
   22bec:	bne	22bc8 <__assert_fail@plt+0x104dc>
   22bf0:	cmp	r6, #46	; 0x2e
   22bf4:	beq	22bc8 <__assert_fail@plt+0x104dc>
   22bf8:	mov	r6, r7
   22bfc:	strb	sl, [r9]
   22c00:	str	r7, [sp, #28]
   22c04:	ldrb	r0, [r6], #1
   22c08:	cmp	r0, #0
   22c0c:	bne	22f04 <__assert_fail@plt+0x10818>
   22c10:	ldr	r6, [pc, #3512]	; 239d0 <__assert_fail@plt+0x112e4>
   22c14:	ldr	fp, [r6]
   22c18:	cmp	fp, #0
   22c1c:	bne	22f10 <__assert_fail@plt+0x10824>
   22c20:	mov	r0, r7
   22c24:	bl	123bc <strlen@plt>
   22c28:	cmp	r0, #3
   22c2c:	mov	r9, r0
   22c30:	moveq	fp, #1
   22c34:	beq	22c4c <__assert_fail@plt+0x10560>
   22c38:	cmp	r0, #4
   22c3c:	ldrbeq	r3, [sp, #231]	; 0xe7
   22c40:	subeq	fp, r3, #46	; 0x2e
   22c44:	clzeq	fp, fp
   22c48:	lsreq	fp, fp, #5
   22c4c:	ldr	r6, [pc, #3456]	; 239d4 <__assert_fail@plt+0x112e8>
   22c50:	ldr	r1, [r6]
   22c54:	cmp	r1, #0
   22c58:	bne	22f2c <__assert_fail@plt+0x10840>
   22c5c:	mov	r1, r7
   22c60:	mov	r0, r4
   22c64:	bl	22a54 <__assert_fail@plt+0x10368>
   22c68:	subs	r6, r0, #0
   22c6c:	bne	22c8c <__assert_fail@plt+0x105a0>
   22c70:	ldr	r1, [pc, #3424]	; 239d8 <__assert_fail@plt+0x112ec>
   22c74:	mov	r0, r7
   22c78:	bl	11ffc <strcmp@plt>
   22c7c:	cmp	r0, #0
   22c80:	ldrne	r6, [pc, #3412]	; 239dc <__assert_fail@plt+0x112f0>
   22c84:	bne	22f78 <__assert_fail@plt+0x1088c>
   22c88:	ldr	r6, [pc, #3408]	; 239e0 <__assert_fail@plt+0x112f4>
   22c8c:	add	r1, sp, #288	; 0x120
   22c90:	ldr	r2, [r6, #8]
   22c94:	asr	r3, r2, #31
   22c98:	strd	r2, [r1]
   22c9c:	ldr	r3, [r6, #4]
   22ca0:	str	r3, [sp, #48]	; 0x30
   22ca4:	ldr	r3, [sp, #48]	; 0x30
   22ca8:	cmp	r3, #0
   22cac:	ble	230dc <__assert_fail@plt+0x109f0>
   22cb0:	ldr	r2, [sp, #48]	; 0x30
   22cb4:	movw	r3, #277	; 0x115
   22cb8:	cmp	r2, r3
   22cbc:	movgt	r3, #2
   22cc0:	ble	22e94 <__assert_fail@plt+0x107a8>
   22cc4:	ldr	r2, [sp, #20]
   22cc8:	add	r1, r3, r2
   22ccc:	cmp	r1, #112	; 0x70
   22cd0:	bhi	230e8 <__assert_fail@plt+0x109fc>
   22cd4:	ldr	r2, [pc, #3312]	; 239cc <__assert_fail@plt+0x112e0>
   22cd8:	add	r2, r2, r1
   22cdc:	movw	r1, #2084	; 0x824
   22ce0:	ldrsb	r1, [r2, r1]
   22ce4:	cmp	r1, r3
   22ce8:	bne	230e8 <__assert_fail@plt+0x109fc>
   22cec:	ldrb	r3, [r2, #2197]	; 0x895
   22cf0:	cmp	r3, #0
   22cf4:	str	r3, [sp, #52]	; 0x34
   22cf8:	beq	23174 <__assert_fail@plt+0x10a88>
   22cfc:	ldr	r3, [sp, #84]	; 0x54
   22d00:	add	r1, sp, #296	; 0x128
   22d04:	add	ip, sp, #288	; 0x120
   22d08:	add	r5, r5, #56	; 0x38
   22d0c:	mov	lr, r5
   22d10:	cmp	r3, #0
   22d14:	subne	r3, r3, #1
   22d18:	strne	r3, [sp, #84]	; 0x54
   22d1c:	ldrd	r2, [sp, #144]	; 0x90
   22d20:	strd	r2, [r1]
   22d24:	ldr	r3, [sp, #140]	; 0x8c
   22d28:	str	r3, [sp, #304]	; 0x130
   22d2c:	ldm	ip!, {r0, r1, r2, r3}
   22d30:	stmia	lr!, {r0, r1, r2, r3}
   22d34:	ldm	ip!, {r0, r1, r2, r3}
   22d38:	stmia	lr!, {r0, r1, r2, r3}
   22d3c:	ldm	ip!, {r0, r1, r2, r3}
   22d40:	stmia	lr!, {r0, r1, r2, r3}
   22d44:	mvn	r3, #1
   22d48:	ldm	ip, {r0, r1}
   22d4c:	stm	lr, {r0, r1}
   22d50:	str	r3, [sp, #48]	; 0x30
   22d54:	ldr	r8, [sp, #52]	; 0x34
   22d58:	ldr	r3, [sp, #80]	; 0x50
   22d5c:	add	r3, r3, #2
   22d60:	str	r3, [sp, #80]	; 0x50
   22d64:	b	22b1c <__assert_fail@plt+0x10430>
   22d68:	cmp	r3, #0
   22d6c:	bne	22da4 <__assert_fail@plt+0x106b8>
   22d70:	cmp	r6, #45	; 0x2d
   22d74:	mvneq	r9, #0
   22d78:	movne	r9, #1
   22d7c:	add	r7, r7, #1
   22d80:	str	r7, [r4]
   22d84:	ldrb	r6, [r7]
   22d88:	mov	r0, r6
   22d8c:	bl	36b90 <__assert_fail@plt+0x244a4>
   22d90:	cmp	r0, #0
   22d94:	bne	22d7c <__assert_fail@plt+0x10690>
   22d98:	sub	r3, r6, #48	; 0x30
   22d9c:	cmp	r3, #9
   22da0:	bhi	22b68 <__assert_fail@plt+0x1047c>
   22da4:	mov	r2, #0
   22da8:	mov	r0, #10
   22dac:	smull	r2, r3, r2, r0
   22db0:	cmp	r3, r2, asr #31
   22db4:	bne	23070 <__assert_fail@plt+0x10984>
   22db8:	cmn	r9, #1
   22dbc:	rsbeq	r6, r6, #48	; 0x30
   22dc0:	subne	r6, r6, #48	; 0x30
   22dc4:	adds	r1, r2, r6
   22dc8:	mov	r2, r1
   22dcc:	bvs	23070 <__assert_fail@plt+0x10984>
   22dd0:	ldrb	r6, [r7, #1]!
   22dd4:	sub	r3, r6, #48	; 0x30
   22dd8:	cmp	r3, #9
   22ddc:	bls	22dac <__assert_fail@plt+0x106c0>
   22de0:	and	r6, r6, #253	; 0xfd
   22de4:	cmp	r6, #44	; 0x2c
   22de8:	bne	22ed0 <__assert_fail@plt+0x107e4>
   22dec:	ldrb	r3, [r7, #1]
   22df0:	sub	r3, r3, #48	; 0x30
   22df4:	cmp	r3, #9
   22df8:	bhi	22ed0 <__assert_fail@plt+0x107e4>
   22dfc:	add	r7, r7, #2
   22e00:	mov	ip, #8
   22e04:	mov	lr, #10
   22e08:	ldrb	r0, [r7]
   22e0c:	mul	r3, lr, r3
   22e10:	sub	r0, r0, #48	; 0x30
   22e14:	cmp	r0, #9
   22e18:	addls	r7, r7, #1
   22e1c:	addls	r3, r3, r0
   22e20:	subs	ip, ip, #1
   22e24:	bne	22e08 <__assert_fail@plt+0x1071c>
   22e28:	cmn	r9, #1
   22e2c:	moveq	ip, r7
   22e30:	beq	22ea8 <__assert_fail@plt+0x107bc>
   22e34:	mov	ip, r7
   22e38:	mov	r7, ip
   22e3c:	add	ip, ip, #1
   22e40:	ldrb	r0, [r7]
   22e44:	sub	r0, r0, #48	; 0x30
   22e48:	cmp	r0, #9
   22e4c:	bls	22e38 <__assert_fail@plt+0x1074c>
   22e50:	adds	r0, r3, #0
   22e54:	movne	r0, #1
   22e58:	ands	r0, r0, r9, lsr #31
   22e5c:	beq	22e74 <__assert_fail@plt+0x10788>
   22e60:	subs	r2, r1, #1
   22e64:	bvs	23070 <__assert_fail@plt+0x10984>
   22e68:	rsb	r3, r3, #998244352	; 0x3b800000
   22e6c:	add	r3, r3, #1753088	; 0x1ac000
   22e70:	add	r3, r3, #2560	; 0xa00
   22e74:	cmp	r9, #0
   22e78:	movw	r0, #277	; 0x115
   22e7c:	str	r7, [r4]
   22e80:	str	r3, [sp, #292]	; 0x124
   22e84:	movne	r3, #276	; 0x114
   22e88:	str	r2, [sp, #288]	; 0x120
   22e8c:	moveq	r3, r0
   22e90:	str	r3, [sp, #48]	; 0x30
   22e94:	ldr	r3, [pc, #2864]	; 239cc <__assert_fail@plt+0x112e0>
   22e98:	ldr	r2, [sp, #48]	; 0x30
   22e9c:	add	r3, r3, r2
   22ea0:	ldrb	r3, [r3, #1806]	; 0x70e
   22ea4:	b	22cc4 <__assert_fail@plt+0x105d8>
   22ea8:	ldrb	r0, [ip]
   22eac:	mov	r7, ip
   22eb0:	add	ip, ip, #1
   22eb4:	sub	lr, r0, #48	; 0x30
   22eb8:	cmp	lr, #9
   22ebc:	bhi	22e50 <__assert_fail@plt+0x10764>
   22ec0:	cmp	r0, #48	; 0x30
   22ec4:	beq	22ea8 <__assert_fail@plt+0x107bc>
   22ec8:	add	r3, r3, #1
   22ecc:	b	22e34 <__assert_fail@plt+0x10748>
   22ed0:	lsr	r3, r9, #31
   22ed4:	mov	r2, r1
   22ed8:	movw	r0, #275	; 0x113
   22edc:	cmp	r9, #0
   22ee0:	strb	r3, [sp, #288]	; 0x120
   22ee4:	asr	r3, r1, #31
   22ee8:	strd	r2, [sp, #144]	; 0x90
   22eec:	ldr	r3, [r4]
   22ef0:	str	r7, [r4]
   22ef4:	sub	r3, r7, r3
   22ef8:	str	r3, [sp, #140]	; 0x8c
   22efc:	movw	r3, #274	; 0x112
   22f00:	b	22e8c <__assert_fail@plt+0x107a0>
   22f04:	bl	36c1c <__assert_fail@plt+0x24530>
   22f08:	strb	r0, [r6, #-1]
   22f0c:	b	22c04 <__assert_fail@plt+0x10518>
   22f10:	mov	r1, fp
   22f14:	mov	r0, r7
   22f18:	bl	11ffc <strcmp@plt>
   22f1c:	cmp	r0, #0
   22f20:	beq	22c8c <__assert_fail@plt+0x105a0>
   22f24:	add	r6, r6, #12
   22f28:	b	22c14 <__assert_fail@plt+0x10528>
   22f2c:	cmp	fp, #0
   22f30:	beq	22f58 <__assert_fail@plt+0x1086c>
   22f34:	mov	r2, #3
   22f38:	mov	r0, r7
   22f3c:	bl	1268c <strncmp@plt>
   22f40:	clz	r0, r0
   22f44:	lsr	r0, r0, #5
   22f48:	cmp	r0, #0
   22f4c:	bne	22c8c <__assert_fail@plt+0x105a0>
   22f50:	add	r6, r6, #12
   22f54:	b	22c50 <__assert_fail@plt+0x10564>
   22f58:	mov	r0, r7
   22f5c:	bl	11ffc <strcmp@plt>
   22f60:	b	22f40 <__assert_fail@plt+0x10854>
   22f64:	mov	r0, r7
   22f68:	bl	11ffc <strcmp@plt>
   22f6c:	cmp	r0, #0
   22f70:	beq	22c8c <__assert_fail@plt+0x105a0>
   22f74:	add	r6, r6, #12
   22f78:	ldr	r1, [r6]
   22f7c:	cmp	r1, #0
   22f80:	bne	22f64 <__assert_fail@plt+0x10878>
   22f84:	sub	r3, r9, #1
   22f88:	ldrb	r2, [r7, r3]
   22f8c:	cmp	r2, #83	; 0x53
   22f90:	ldreq	r6, [pc, #2628]	; 239dc <__assert_fail@plt+0x112f0>
   22f94:	strbeq	r1, [r7, r3]
   22f98:	beq	22fe0 <__assert_fail@plt+0x108f4>
   22f9c:	ldr	r6, [pc, #2624]	; 239e4 <__assert_fail@plt+0x112f8>
   22fa0:	ldr	r1, [r6]
   22fa4:	cmp	r1, #0
   22fa8:	bne	22ff8 <__assert_fail@plt+0x1090c>
   22fac:	cmp	r9, #1
   22fb0:	ldrbeq	r2, [sp, #228]	; 0xe4
   22fb4:	ldreq	r6, [pc, #2604]	; 239e8 <__assert_fail@plt+0x112fc>
   22fb8:	beq	23020 <__assert_fail@plt+0x10934>
   22fbc:	mov	r3, r7
   22fc0:	b	2303c <__assert_fail@plt+0x10950>
   22fc4:	mov	r0, r7
   22fc8:	str	r3, [sp, #32]
   22fcc:	bl	11ffc <strcmp@plt>
   22fd0:	cmp	r0, #0
   22fd4:	beq	22c8c <__assert_fail@plt+0x105a0>
   22fd8:	ldr	r3, [sp, #32]
   22fdc:	add	r6, r6, #12
   22fe0:	ldr	r1, [r6]
   22fe4:	cmp	r1, #0
   22fe8:	bne	22fc4 <__assert_fail@plt+0x108d8>
   22fec:	mov	r2, #83	; 0x53
   22ff0:	strb	r2, [r7, r3]
   22ff4:	b	22f9c <__assert_fail@plt+0x108b0>
   22ff8:	mov	r0, r7
   22ffc:	bl	11ffc <strcmp@plt>
   23000:	cmp	r0, #0
   23004:	beq	22c8c <__assert_fail@plt+0x105a0>
   23008:	add	r6, r6, #12
   2300c:	b	22fa0 <__assert_fail@plt+0x108b4>
   23010:	ldrb	r3, [r3]
   23014:	cmp	r3, r2
   23018:	beq	22c8c <__assert_fail@plt+0x105a0>
   2301c:	add	r6, r6, #12
   23020:	ldr	r3, [r6]
   23024:	cmp	r3, #0
   23028:	bne	23010 <__assert_fail@plt+0x10924>
   2302c:	b	22fbc <__assert_fail@plt+0x108d0>
   23030:	cmp	r2, #46	; 0x2e
   23034:	ldreq	sl, [sp, #24]
   23038:	addne	r3, r3, #1
   2303c:	ldr	r1, [sp, #28]
   23040:	ldrb	r2, [r1], #1
   23044:	cmp	r2, #0
   23048:	strb	r2, [r3]
   2304c:	str	r1, [sp, #28]
   23050:	bne	23030 <__assert_fail@plt+0x10944>
   23054:	cmp	sl, #0
   23058:	beq	23070 <__assert_fail@plt+0x10984>
   2305c:	mov	r1, r7
   23060:	mov	r0, r4
   23064:	bl	22a54 <__assert_fail@plt+0x10368>
   23068:	subs	r6, r0, #0
   2306c:	bne	22c8c <__assert_fail@plt+0x105a0>
   23070:	mov	r3, #63	; 0x3f
   23074:	b	22e90 <__assert_fail@plt+0x107a4>
   23078:	cmp	r6, #40	; 0x28
   2307c:	beq	230a0 <__assert_fail@plt+0x109b4>
   23080:	add	r3, r7, #1
   23084:	str	r3, [r4]
   23088:	ldrb	r3, [r7]
   2308c:	cmp	r3, #0
   23090:	str	r3, [sp, #48]	; 0x30
   23094:	bne	22e94 <__assert_fail@plt+0x107a8>
   23098:	ldr	r3, [sp, #48]	; 0x30
   2309c:	b	22cc4 <__assert_fail@plt+0x105d8>
   230a0:	ldr	r2, [sp, #24]
   230a4:	ldr	r3, [r4]
   230a8:	add	r1, r3, #1
   230ac:	str	r1, [r4]
   230b0:	ldrb	r3, [r3]
   230b4:	cmp	r3, #0
   230b8:	beq	230e0 <__assert_fail@plt+0x109f4>
   230bc:	cmp	r3, #40	; 0x28
   230c0:	addeq	r2, r2, #1
   230c4:	beq	230d0 <__assert_fail@plt+0x109e4>
   230c8:	cmp	r3, #41	; 0x29
   230cc:	subeq	r2, r2, #1
   230d0:	cmp	r2, #0
   230d4:	bne	230a4 <__assert_fail@plt+0x109b8>
   230d8:	b	22b68 <__assert_fail@plt+0x1047c>
   230dc:	mov	r3, #0
   230e0:	str	r3, [sp, #48]	; 0x30
   230e4:	b	22cc4 <__assert_fail@plt+0x105d8>
   230e8:	ldr	r3, [pc, #2268]	; 239cc <__assert_fail@plt+0x112e0>
   230ec:	add	r3, r3, r8
   230f0:	ldrb	r3, [r3, #2310]	; 0x906
   230f4:	cmp	r3, #0
   230f8:	str	r3, [sp, #52]	; 0x34
   230fc:	bne	23174 <__assert_fail@plt+0x10a88>
   23100:	ldr	r3, [sp, #84]	; 0x54
   23104:	cmp	r3, #3
   23108:	beq	244f4 <__assert_fail@plt+0x11e08>
   2310c:	ldr	r2, [pc, #2232]	; 239cc <__assert_fail@plt+0x112e0>
   23110:	movw	r1, #1692	; 0x69c
   23114:	movw	r0, #2084	; 0x824
   23118:	add	r8, r2, r8
   2311c:	ldrsb	r3, [r8, r1]
   23120:	cmn	r3, #93	; 0x5d
   23124:	beq	23154 <__assert_fail@plt+0x10a68>
   23128:	add	r3, r3, #1
   2312c:	cmp	r3, #112	; 0x70
   23130:	bhi	23154 <__assert_fail@plt+0x10a68>
   23134:	add	r3, r2, r3
   23138:	ldrsb	ip, [r3, r0]
   2313c:	cmp	ip, #1
   23140:	bne	23154 <__assert_fail@plt+0x10a68>
   23144:	ldrb	r3, [r3, #2197]	; 0x895
   23148:	cmp	r3, #0
   2314c:	str	r3, [sp, #52]	; 0x34
   23150:	bne	24514 <__assert_fail@plt+0x11e28>
   23154:	ldr	r3, [sp, #80]	; 0x50
   23158:	add	ip, sp, #248	; 0xf8
   2315c:	cmp	r3, ip
   23160:	beq	23638 <__assert_fail@plt+0x10f4c>
   23164:	ldrsh	r8, [r3, #-2]!
   23168:	sub	r5, r5, #56	; 0x38
   2316c:	str	r3, [sp, #80]	; 0x50
   23170:	b	23118 <__assert_fail@plt+0x10a2c>
   23174:	ldr	r3, [pc, #2128]	; 239cc <__assert_fail@plt+0x112e0>
   23178:	add	ip, sp, #344	; 0x158
   2317c:	ldr	r2, [sp, #52]	; 0x34
   23180:	add	r3, r3, r2
   23184:	ldrb	r3, [r3, #2424]	; 0x978
   23188:	rsb	lr, r3, #1
   2318c:	str	r3, [sp, #136]	; 0x88
   23190:	mov	r3, #56	; 0x38
   23194:	mla	lr, r3, lr, r5
   23198:	mov	r6, lr
   2319c:	ldm	r6!, {r0, r1, r2, r3}
   231a0:	stmia	ip!, {r0, r1, r2, r3}
   231a4:	ldm	r6!, {r0, r1, r2, r3}
   231a8:	stmia	ip!, {r0, r1, r2, r3}
   231ac:	ldm	r6!, {r0, r1, r2, r3}
   231b0:	stmia	ip!, {r0, r1, r2, r3}
   231b4:	ldm	r6, {r0, r1}
   231b8:	ldr	r3, [lr, #8]
   231bc:	stm	ip, {r0, r1}
   231c0:	str	r3, [sp, #24]
   231c4:	ldr	r3, [lr, #12]
   231c8:	ldr	fp, [lr, #32]
   231cc:	ldr	sl, [lr, #36]	; 0x24
   231d0:	str	r3, [sp, #28]
   231d4:	ldr	r3, [lr, #16]
   231d8:	ldrd	r8, [lr, #40]	; 0x28
   231dc:	str	r3, [sp, #40]	; 0x28
   231e0:	ldr	r3, [lr, #20]
   231e4:	str	r3, [sp, #44]	; 0x2c
   231e8:	ldr	r3, [lr, #24]
   231ec:	str	r3, [sp, #32]
   231f0:	ldr	r3, [lr, #28]
   231f4:	str	r3, [sp, #36]	; 0x24
   231f8:	ldr	r3, [lr, #48]	; 0x30
   231fc:	str	r3, [sp, #20]
   23200:	ldr	r3, [sp, #52]	; 0x34
   23204:	sub	r3, r3, #4
   23208:	cmp	r3, #87	; 0x57
   2320c:	ldrls	pc, [pc, r3, lsl #2]
   23210:	b	23398 <__assert_fail@plt+0x10cac>
   23214:	andeq	r3, r2, r4, ror r3
   23218:	muleq	r2, r8, r3
   2321c:	muleq	r2, r8, r3
   23220:	andeq	r3, r2, r8, lsl #9
   23224:	andeq	r3, r2, ip, lsr #9
   23228:	andeq	r3, r2, r4, asr #9
   2322c:	ldrdeq	r3, [r2], -ip
   23230:	strdeq	r3, [r2], -r4
   23234:	andeq	r3, r2, ip, lsl #10
   23238:	andeq	r3, r2, r4, lsr #10
   2323c:	andeq	r3, r2, r0, lsr r5
   23240:	andeq	r3, r2, ip, lsr r5
   23244:	muleq	r2, r8, r3
   23248:	muleq	r2, r8, r3
   2324c:	andeq	r3, r2, r8, asr #10
   23250:	andeq	r3, r2, r4, ror r5
   23254:	andeq	r3, r2, r8, lsl #11
   23258:	muleq	r2, r8, r3
   2325c:	andeq	r3, r2, r8, lsr #11
   23260:	ldrdeq	r3, [r2], -r0
   23264:	andeq	r3, r2, r4, ror #11
   23268:	muleq	r2, r8, r3
   2326c:	muleq	r2, r8, r3
   23270:	andeq	r3, r2, r4, lsl #12
   23274:	andeq	r3, r2, r8, asr #12
   23278:	andeq	r3, r2, r4, asr r6
   2327c:	andeq	r3, r2, ip, ror #12
   23280:	andeq	r3, r2, r8, ror r6
   23284:	andeq	r3, r2, r0, lsl #13
   23288:	muleq	r2, r4, r7
   2328c:	muleq	r2, ip, r7
   23290:	andeq	r3, r2, r0, lsl #16
   23294:	andeq	r3, r2, ip, lsl #16
   23298:	andeq	r3, r2, r4, lsl r8
   2329c:	andeq	r3, r2, ip, lsr #16
   232a0:	andeq	r3, r2, r0, asr #16
   232a4:	andeq	r3, r2, ip, asr r8
   232a8:	andeq	r3, r2, r4, ror #16
   232ac:	andeq	r3, r2, r0, ror r8
   232b0:	andeq	r3, r2, ip, asr #17
   232b4:	andeq	r3, r2, r8, lsl #18
   232b8:	andeq	r3, r2, r4, lsr r9
   232bc:	andeq	r3, r2, ip, lsr r9
   232c0:	andeq	r3, r2, r4, asr r9
   232c4:	andeq	r3, r2, r8, ror #18
   232c8:	muleq	r2, r8, r3
   232cc:	andeq	r3, r2, ip, ror r9
   232d0:	andeq	r3, r2, r8, lsl sl
   232d4:	andeq	r4, r2, ip, ror #7
   232d8:	andeq	r4, r2, ip, ror #7
   232dc:	muleq	r2, r4, ip
   232e0:	andeq	r3, r2, r4, asr #25
   232e4:	ldrdeq	r3, [r2], -r4
   232e8:	strdeq	r3, [r2], -r4
   232ec:	andeq	r4, r2, r0, ror r1
   232f0:	andeq	r3, r2, r8, lsr sp
   232f4:	andeq	r3, r2, r8, ror sp
   232f8:	ldrdeq	r3, [r2], -r8
   232fc:	andeq	r4, r2, r0, lsr #6
   23300:	andeq	r4, r2, r4, lsl r0
   23304:	andeq	r4, r2, ip, asr #5
   23308:	andeq	r4, r2, r0, asr r0
   2330c:	muleq	r2, r0, r0
   23310:	andeq	r4, r2, ip, ror #5
   23314:	strheq	r4, [r2], -ip
   23318:	andeq	r4, r2, r8, ror #1
   2331c:	andeq	r4, r2, r8, lsl #6
   23320:	andeq	r4, r2, r8, lsl #2
   23324:	andeq	r4, r2, r8, lsl #2
   23328:	andeq	r4, r2, r8, asr #2
   2332c:	muleq	r2, r8, r3
   23330:	andeq	r3, r2, r4, asr #25
   23334:	andeq	r4, r2, r0, ror r1
   23338:	muleq	r2, r0, r1
   2333c:	andeq	r4, r2, ip, asr #5
   23340:	andeq	r4, r2, ip, ror #5
   23344:	andeq	r4, r2, r8, lsl #6
   23348:	andeq	r4, r2, r0, lsr #6
   2334c:	muleq	r2, r8, r3
   23350:	muleq	r2, r8, r3
   23354:	muleq	r2, r8, r3
   23358:	andeq	r4, r2, ip, asr #6
   2335c:	muleq	r2, r8, r3
   23360:	andeq	r4, r2, ip, lsl #7
   23364:			; <UNDEFINED> instruction: 0x000243b4
   23368:	ldrdeq	r4, [r2], -r0
   2336c:	ldrdeq	r4, [r2], -r8
   23370:	andeq	r4, r2, ip, ror #9
   23374:	ldm	r5, {r0, r1}
   23378:	add	r3, r4, #88	; 0x58
   2337c:	mov	r2, #5
   23380:	stm	r3, {r0, r1}
   23384:	mov	r3, #1
   23388:	ldr	r1, [pc, #1628]	; 239ec <__assert_fail@plt+0x11300>
   2338c:	strb	r3, [r4, #152]	; 0x98
   23390:	mov	r0, #0
   23394:	bl	1217c <dcgettext@plt>
   23398:	ldrsh	r3, [sp, #136]	; 0x88
   2339c:	add	ip, sp, #344	; 0x158
   233a0:	str	fp, [sp, #376]	; 0x178
   233a4:	str	sl, [sp, #380]	; 0x17c
   233a8:	rsb	r2, r3, r3, lsl #3
   233ac:	sub	r5, r5, r2, lsl #3
   233b0:	ldr	r2, [sp, #80]	; 0x50
   233b4:	add	r5, r5, #56	; 0x38
   233b8:	mov	lr, r5
   233bc:	sub	r3, r2, r3, lsl #1
   233c0:	str	r3, [sp, #80]	; 0x50
   233c4:	ldr	r3, [sp, #24]
   233c8:	str	r3, [sp, #352]	; 0x160
   233cc:	ldr	r3, [sp, #28]
   233d0:	str	r3, [sp, #356]	; 0x164
   233d4:	ldr	r3, [sp, #40]	; 0x28
   233d8:	str	r3, [sp, #360]	; 0x168
   233dc:	ldr	r3, [sp, #44]	; 0x2c
   233e0:	str	r3, [sp, #364]	; 0x16c
   233e4:	ldr	r3, [sp, #32]
   233e8:	str	r3, [sp, #368]	; 0x170
   233ec:	ldr	r3, [sp, #36]	; 0x24
   233f0:	str	r3, [sp, #372]	; 0x174
   233f4:	add	r3, sp, #384	; 0x180
   233f8:	strd	r8, [r3]
   233fc:	ldr	r3, [sp, #20]
   23400:	str	r3, [sp, #392]	; 0x188
   23404:	ldm	ip!, {r0, r1, r2, r3}
   23408:	stmia	lr!, {r0, r1, r2, r3}
   2340c:	ldm	ip!, {r0, r1, r2, r3}
   23410:	stmia	lr!, {r0, r1, r2, r3}
   23414:	ldm	ip!, {r0, r1, r2, r3}
   23418:	stmia	lr!, {r0, r1, r2, r3}
   2341c:	ldr	r3, [pc, #1448]	; 239cc <__assert_fail@plt+0x112e0>
   23420:	ldr	r2, [sp, #52]	; 0x34
   23424:	ldm	ip, {r0, r1}
   23428:	mov	ip, r3
   2342c:	add	r2, r3, r2
   23430:	ldrb	r2, [r2, #2516]	; 0x9d4
   23434:	stm	lr, {r0, r1}
   23438:	ldr	r1, [sp, #80]	; 0x50
   2343c:	sub	r2, r2, #28
   23440:	ldrsh	r0, [r1]
   23444:	add	r1, r3, r2
   23448:	add	r1, r1, #2608	; 0xa30
   2344c:	ldrsb	r1, [r1]
   23450:	add	r1, r1, r0
   23454:	cmp	r1, #112	; 0x70
   23458:	bhi	23474 <__assert_fail@plt+0x10d88>
   2345c:	add	r3, r3, r1
   23460:	movw	r1, #2084	; 0x824
   23464:	ldrsb	r1, [r3, r1]
   23468:	cmp	r1, r0
   2346c:	ldrbeq	r3, [r3, #2197]	; 0x895
   23470:	beq	23480 <__assert_fail@plt+0x10d94>
   23474:	add	r2, ip, r2
   23478:	movw	r3, #2634	; 0xa4a
   2347c:	ldrsb	r3, [r2, r3]
   23480:	str	r3, [sp, #52]	; 0x34
   23484:	b	22d54 <__assert_fail@plt+0x10668>
   23488:	ldr	r3, [r4, #172]	; 0xac
   2348c:	mov	r2, #5
   23490:	ldr	r1, [pc, #1368]	; 239f0 <__assert_fail@plt+0x11304>
   23494:	add	r3, r3, #1
   23498:	str	r3, [r4, #172]	; 0xac
   2349c:	ldr	r3, [r4, #156]	; 0x9c
   234a0:	add	r3, r3, #1
   234a4:	str	r3, [r4, #156]	; 0x9c
   234a8:	b	23390 <__assert_fail@plt+0x10ca4>
   234ac:	ldr	r3, [r4, #172]	; 0xac
   234b0:	mov	r2, #5
   234b4:	ldr	r1, [pc, #1336]	; 239f4 <__assert_fail@plt+0x11308>
   234b8:	add	r3, r3, #1
   234bc:	str	r3, [r4, #172]	; 0xac
   234c0:	b	23390 <__assert_fail@plt+0x10ca4>
   234c4:	ldr	r3, [r4, #164]	; 0xa4
   234c8:	mov	r2, #5
   234cc:	ldr	r1, [pc, #1316]	; 239f8 <__assert_fail@plt+0x1130c>
   234d0:	add	r3, r3, #1
   234d4:	str	r3, [r4, #164]	; 0xa4
   234d8:	b	23390 <__assert_fail@plt+0x10ca4>
   234dc:	ldr	r3, [r4, #176]	; 0xb0
   234e0:	mov	r2, #5
   234e4:	ldr	r1, [pc, #1296]	; 239fc <__assert_fail@plt+0x11310>
   234e8:	add	r3, r3, #1
   234ec:	str	r3, [r4, #176]	; 0xb0
   234f0:	b	23390 <__assert_fail@plt+0x10ca4>
   234f4:	ldr	r3, [r4, #156]	; 0x9c
   234f8:	mov	r2, #5
   234fc:	ldr	r1, [pc, #1276]	; 23a00 <__assert_fail@plt+0x11314>
   23500:	add	r3, r3, #1
   23504:	str	r3, [r4, #156]	; 0x9c
   23508:	b	23390 <__assert_fail@plt+0x10ca4>
   2350c:	ldr	r3, [r4, #160]	; 0xa0
   23510:	mov	r2, #5
   23514:	ldr	r1, [pc, #1256]	; 23a04 <__assert_fail@plt+0x11318>
   23518:	add	r3, r3, #1
   2351c:	str	r3, [r4, #160]	; 0xa0
   23520:	b	23390 <__assert_fail@plt+0x10ca4>
   23524:	mov	r2, #5
   23528:	ldr	r1, [pc, #1240]	; 23a08 <__assert_fail@plt+0x1131c>
   2352c:	b	23390 <__assert_fail@plt+0x10ca4>
   23530:	mov	r2, #5
   23534:	ldr	r1, [pc, #1232]	; 23a0c <__assert_fail@plt+0x11320>
   23538:	b	23390 <__assert_fail@plt+0x10ca4>
   2353c:	mov	r2, #5
   23540:	ldr	r1, [pc, #1224]	; 23a10 <__assert_fail@plt+0x11324>
   23544:	b	23390 <__assert_fail@plt+0x10ca4>
   23548:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   2354c:	strd	r2, [r4, #72]	; 0x48
   23550:	mov	r2, #0
   23554:	mov	r3, #0
   23558:	strd	r2, [r4, #80]	; 0x50
   2355c:	mov	r3, #0
   23560:	str	r3, [r4, #88]	; 0x58
   23564:	str	r3, [r4, #92]	; 0x5c
   23568:	ldr	r3, [r5]
   2356c:	str	r3, [r4, #28]
   23570:	b	23398 <__assert_fail@plt+0x10cac>
   23574:	ldrd	r2, [r5, #-160]	; 0xffffff60
   23578:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   2357c:	strd	r2, [r4, #72]	; 0x48
   23580:	strd	r0, [r4, #80]	; 0x50
   23584:	b	2355c <__assert_fail@plt+0x10e70>
   23588:	sub	r3, r5, #272	; 0x110
   2358c:	ldrd	r0, [r5, #-160]	; 0xffffff60
   23590:	ldrd	r6, [r5, #-56]	; 0xffffffc8
   23594:	ldrd	r2, [r3]
   23598:	strd	r2, [r4, #72]	; 0x48
   2359c:	strd	r0, [r4, #80]	; 0x50
   235a0:	strd	r6, [r4, #88]	; 0x58
   235a4:	b	23568 <__assert_fail@plt+0x10e7c>
   235a8:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   235ac:	strd	r2, [r4, #72]	; 0x48
   235b0:	mov	r2, #0
   235b4:	mov	r3, #0
   235b8:	strd	r2, [r4, #80]	; 0x50
   235bc:	mov	r3, #0
   235c0:	str	r3, [r4, #88]	; 0x58
   235c4:	str	r3, [r4, #92]	; 0x5c
   235c8:	mov	r3, #2
   235cc:	b	2356c <__assert_fail@plt+0x10e80>
   235d0:	ldrd	r2, [r5, #-160]	; 0xffffff60
   235d4:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   235d8:	strd	r2, [r4, #72]	; 0x48
   235dc:	strd	r0, [r4, #80]	; 0x50
   235e0:	b	235bc <__assert_fail@plt+0x10ed0>
   235e4:	sub	r3, r5, #272	; 0x110
   235e8:	ldrd	r0, [r5, #-160]	; 0xffffff60
   235ec:	ldrd	r6, [r5, #-56]	; 0xffffffc8
   235f0:	ldrd	r2, [r3]
   235f4:	strd	r2, [r4, #72]	; 0x48
   235f8:	strd	r0, [r4, #80]	; 0x50
   235fc:	strd	r6, [r4, #88]	; 0x58
   23600:	b	235c8 <__assert_fail@plt+0x10edc>
   23604:	ldr	r3, [r4, #176]	; 0xb0
   23608:	add	r0, r4, #24
   2360c:	ldrb	r1, [r5, #-56]	; 0xffffffc8
   23610:	add	r3, r3, #1
   23614:	str	r3, [r4, #176]	; 0xb0
   23618:	ldrd	r2, [r5]
   2361c:	strd	r2, [sp, #8]
   23620:	ldr	r3, [r5, #-40]	; 0xffffffd8
   23624:	str	r3, [sp]
   23628:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   2362c:	bl	228f0 <__assert_fail@plt+0x10204>
   23630:	cmp	r0, #0
   23634:	bne	23398 <__assert_fail@plt+0x10cac>
   23638:	mov	r0, #1
   2363c:	add	sp, sp, #1520	; 0x5f0
   23640:	add	sp, sp, #4
   23644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23648:	ldr	r3, [r5]
   2364c:	str	r3, [r4, #20]
   23650:	b	23398 <__assert_fail@plt+0x10cac>
   23654:	mov	r3, #1
   23658:	str	r3, [r4, #20]
   2365c:	ldr	r3, [r4, #168]	; 0xa8
   23660:	add	r3, r3, #1
   23664:	str	r3, [r4, #168]	; 0xa8
   23668:	b	23398 <__assert_fail@plt+0x10cac>
   2366c:	ldr	r3, [r5]
   23670:	str	r3, [r4, #24]
   23674:	b	23398 <__assert_fail@plt+0x10cac>
   23678:	ldr	r3, [pc, #916]	; 23a14 <__assert_fail@plt+0x11328>
   2367c:	b	23670 <__assert_fail@plt+0x10f84>
   23680:	ldr	r3, [r5, #-56]	; 0xffffffc8
   23684:	str	r3, [r4, #24]
   23688:	ldr	r2, [r4, #144]	; 0x90
   2368c:	ldr	r3, [r5, #48]	; 0x30
   23690:	ldrd	r6, [r5, #40]	; 0x28
   23694:	adds	r3, r2, r3
   23698:	movvs	r2, #1
   2369c:	movvc	r2, #0
   236a0:	str	r3, [r4, #144]	; 0x90
   236a4:	str	r2, [sp, #88]	; 0x58
   236a8:	ldrd	r2, [r4, #136]	; 0x88
   236ac:	adds	r0, r2, r6
   236b0:	adcs	r1, r3, r7
   236b4:	ldrd	r2, [r5, #32]
   236b8:	movvs	ip, #1
   236bc:	movvc	ip, #0
   236c0:	strd	r0, [r4, #136]	; 0x88
   236c4:	ldrd	r0, [r4, #128]	; 0x80
   236c8:	adds	r6, r0, r2
   236cc:	adcs	r7, r1, r3
   236d0:	ldrd	r0, [r5, #24]
   236d4:	movvs	r3, #1
   236d8:	movvc	r3, #0
   236dc:	strd	r6, [r4, #128]	; 0x80
   236e0:	str	r3, [sp, #96]	; 0x60
   236e4:	ldrd	r2, [r4, #120]	; 0x78
   236e8:	adds	r6, r2, r0
   236ec:	adcs	r7, r3, r1
   236f0:	ldrd	r0, [r5, #16]
   236f4:	movvs	lr, #1
   236f8:	movvc	lr, #0
   236fc:	ldrd	r2, [r4, #112]	; 0x70
   23700:	strd	r6, [r4, #120]	; 0x78
   23704:	adds	r6, r2, r0
   23708:	adcs	r7, r3, r1
   2370c:	ldrd	r0, [r4, #104]	; 0x68
   23710:	movvs	r3, #1
   23714:	movvc	r3, #0
   23718:	strd	r6, [r4, #112]	; 0x70
   2371c:	str	r3, [sp, #104]	; 0x68
   23720:	ldrd	r2, [r5, #8]
   23724:	adds	r6, r0, r2
   23728:	adcs	r7, r1, r3
   2372c:	ldrd	r0, [r5]
   23730:	movvs	r3, #1
   23734:	movvc	r3, #0
   23738:	strd	r6, [r4, #104]	; 0x68
   2373c:	str	r3, [sp, #112]	; 0x70
   23740:	ldrd	r2, [r4, #96]	; 0x60
   23744:	adds	r6, r2, r0
   23748:	ldr	r2, [sp, #112]	; 0x70
   2374c:	adcs	r7, r3, r1
   23750:	ldr	r3, [sp, #88]	; 0x58
   23754:	strd	r6, [r4, #96]	; 0x60
   23758:	orr	ip, r3, ip
   2375c:	ldr	r3, [sp, #96]	; 0x60
   23760:	orr	r1, ip, r3
   23764:	ldr	r3, [sp, #104]	; 0x68
   23768:	orr	lr, r1, lr
   2376c:	orr	r3, lr, r3
   23770:	orrvc	r0, r3, r2
   23774:	movvs	r0, #1
   23778:	cmp	r0, #0
   2377c:	bne	23638 <__assert_fail@plt+0x10f4c>
   23780:	mov	r3, #1
   23784:	mov	r2, #5
   23788:	ldr	r1, [pc, #632]	; 23a08 <__assert_fail@plt+0x1131c>
   2378c:	strb	r3, [r4, #153]	; 0x99
   23790:	b	23394 <__assert_fail@plt+0x10ca8>
   23794:	ldr	r3, [pc, #632]	; 23a14 <__assert_fail@plt+0x11328>
   23798:	b	23684 <__assert_fail@plt+0x10f98>
   2379c:	ldrd	r2, [r5]
   237a0:	add	r0, r4, #24
   237a4:	ldrb	r1, [r5, #-56]	; 0xffffffc8
   237a8:	strd	r2, [sp, #8]
   237ac:	ldr	r3, [r5, #-40]	; 0xffffffd8
   237b0:	str	r3, [sp]
   237b4:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   237b8:	bl	228f0 <__assert_fail@plt+0x10204>
   237bc:	cmp	r0, #0
   237c0:	beq	23638 <__assert_fail@plt+0x10f4c>
   237c4:	ldr	r0, [r4, #24]
   237c8:	ldrd	r2, [r5, #-112]	; 0xffffff90
   237cc:	asr	r1, r0, #31
   237d0:	adds	r6, r0, r2
   237d4:	adcs	r7, r1, r3
   237d8:	asr	r3, r6, #31
   237dc:	movvs	r1, #1
   237e0:	movvc	r1, #0
   237e4:	str	r6, [r4, #24]
   237e8:	cmp	r7, r3
   237ec:	cmpeq	r6, r6
   237f0:	movne	r1, #1
   237f4:	cmp	r1, #0
   237f8:	beq	23398 <__assert_fail@plt+0x10cac>
   237fc:	b	23638 <__assert_fail@plt+0x10f4c>
   23800:	ldr	r3, [r5]
   23804:	add	r3, r3, #3600	; 0xe10
   23808:	b	23670 <__assert_fail@plt+0x10f84>
   2380c:	ldr	r3, [r5, #-56]	; 0xffffffc8
   23810:	b	23804 <__assert_fail@plt+0x11118>
   23814:	mov	r3, #0
   23818:	mov	r2, #0
   2381c:	strd	r2, [r4, #8]
   23820:	ldr	r3, [r5]
   23824:	str	r3, [r4, #16]
   23828:	b	23398 <__assert_fail@plt+0x10cac>
   2382c:	mov	r3, #0
   23830:	mov	r2, #0
   23834:	strd	r2, [r4, #8]
   23838:	ldr	r3, [r5, #-56]	; 0xffffffc8
   2383c:	b	23824 <__assert_fail@plt+0x11138>
   23840:	ldrd	r2, [r5, #-56]	; 0xffffffc8
   23844:	strd	r2, [r4, #8]
   23848:	ldr	r3, [r5]
   2384c:	str	r3, [r4, #16]
   23850:	mov	r3, #1
   23854:	strb	r3, [r4, #187]	; 0xbb
   23858:	b	23398 <__assert_fail@plt+0x10cac>
   2385c:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   23860:	b	23844 <__assert_fail@plt+0x11158>
   23864:	ldrd	r2, [r5, #-104]	; 0xffffff98
   23868:	strd	r2, [r4, #56]	; 0x38
   2386c:	b	2389c <__assert_fail@plt+0x111b0>
   23870:	ldr	r3, [r5, #-208]	; 0xffffff30
   23874:	add	ip, r4, #32
   23878:	ldrd	r6, [r5, #-104]	; 0xffffff98
   2387c:	cmp	r3, #3
   23880:	ble	238a8 <__assert_fail@plt+0x111bc>
   23884:	sub	lr, r5, #224	; 0xe0
   23888:	ldm	lr!, {r0, r1, r2, r3}
   2388c:	stmia	ip!, {r0, r1, r2, r3}
   23890:	ldm	lr, {r0, r1}
   23894:	stm	ip, {r0, r1}
   23898:	strd	r6, [r4, #56]	; 0x38
   2389c:	ldrd	r2, [r5, #8]
   238a0:	strd	r2, [r4, #64]	; 0x40
   238a4:	b	23398 <__assert_fail@plt+0x10cac>
   238a8:	ldrd	r2, [r5, #-216]	; 0xffffff28
   238ac:	strd	r2, [r4, #56]	; 0x38
   238b0:	strd	r6, [r4, #64]	; 0x40
   238b4:	mov	lr, r5
   238b8:	ldm	lr!, {r0, r1, r2, r3}
   238bc:	stmia	ip!, {r0, r1, r2, r3}
   238c0:	ldm	lr, {r0, r1}
   238c4:	stm	ip, {r0, r1}
   238c8:	b	23398 <__assert_fail@plt+0x10cac>
   238cc:	ldrd	r2, [r5, #-104]	; 0xffffff98
   238d0:	mov	r1, #0
   238d4:	strd	r2, [r4, #64]	; 0x40
   238d8:	ldrd	r2, [r5, #-56]	; 0xffffffc8
   238dc:	strd	r2, [r4, #56]	; 0x38
   238e0:	ldrd	r2, [r5, #8]
   238e4:	rsbs	r2, r2, #0
   238e8:	rscs	r3, r3, #0
   238ec:	movvs	r1, #1
   238f0:	cmp	r1, #0
   238f4:	strd	r2, [r4, #40]	; 0x28
   238f8:	bne	23638 <__assert_fail@plt+0x10f4c>
   238fc:	ldr	r3, [r5, #16]
   23900:	str	r3, [r4, #48]	; 0x30
   23904:	b	23398 <__assert_fail@plt+0x10cac>
   23908:	ldrd	r2, [r5, #-112]	; 0xffffff90
   2390c:	mov	r1, #0
   23910:	strd	r2, [r4, #56]	; 0x38
   23914:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   23918:	rsbs	r2, r2, #0
   2391c:	rscs	r3, r3, #0
   23920:	movvs	r1, #1
   23924:	cmp	r1, #0
   23928:	strd	r2, [r4, #64]	; 0x40
   2392c:	beq	238e0 <__assert_fail@plt+0x111f4>
   23930:	b	23638 <__assert_fail@plt+0x10f4c>
   23934:	ldrd	r2, [r5, #-56]	; 0xffffffc8
   23938:	b	23868 <__assert_fail@plt+0x1117c>
   2393c:	ldrd	r2, [r5, #-168]	; 0xffffff58
   23940:	strd	r2, [r4, #56]	; 0x38
   23944:	ldrd	r2, [r5, #-104]	; 0xffffff98
   23948:	strd	r2, [r4, #64]	; 0x40
   2394c:	add	ip, r4, #32
   23950:	b	238b4 <__assert_fail@plt+0x111c8>
   23954:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   23958:	strd	r2, [r4, #64]	; 0x40
   2395c:	ldrd	r2, [r5]
   23960:	strd	r2, [r4, #56]	; 0x38
   23964:	b	23398 <__assert_fail@plt+0x10cac>
   23968:	ldrd	r2, [r5, #-104]	; 0xffffff98
   2396c:	strd	r2, [r4, #64]	; 0x40
   23970:	ldrd	r2, [r5, #-56]	; 0xffffffc8
   23974:	strd	r2, [r4, #56]	; 0x38
   23978:	b	2394c <__assert_fail@plt+0x11260>
   2397c:	sub	lr, r5, #112	; 0x70
   23980:	add	ip, r4, #32
   23984:	ldm	lr!, {r0, r1, r2, r3}
   23988:	stmia	ip!, {r0, r1, r2, r3}
   2398c:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   23990:	ldm	lr, {r0, r1}
   23994:	rsbs	r2, r2, #0
   23998:	rscs	r3, r3, #0
   2399c:	stm	ip, {r0, r1}
   239a0:	mov	r1, #0
   239a4:	movvs	r1, #1
   239a8:	cmp	r1, #0
   239ac:	strd	r2, [r4, #56]	; 0x38
   239b0:	bne	23638 <__assert_fail@plt+0x10f4c>
   239b4:	ldrd	r2, [r5, #8]
   239b8:	rsbs	r2, r2, #0
   239bc:	rscs	r3, r3, #0
   239c0:	movvs	r1, #1
   239c4:	strd	r2, [r4, #64]	; 0x40
   239c8:	b	237f4 <__assert_fail@plt+0x11108>
   239cc:	andeq	fp, r3, ip, ror #25
   239d0:	andeq	fp, r3, ip, asr pc
   239d4:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   239d8:	andeq	ip, r3, r0, asr r7
   239dc:	andeq	ip, r3, r4, asr #1
   239e0:	andeq	ip, r3, ip, ror r3
   239e4:	andeq	ip, r3, r8, asr #2
   239e8:	andeq	ip, r3, r4, asr #4
   239ec:	strdeq	sl, [r3], -r7
   239f0:	andeq	ip, r3, r4, asr r7
   239f4:	andeq	sl, r3, r9, lsl fp
   239f8:	andeq	ip, r3, sp, asr r7
   239fc:	andeq	ip, r3, r3, ror #14
   23a00:	andeq	ip, r3, r8, ror #14
   23a04:	andeq	ip, r3, sp, ror #14
   23a08:	andeq	ip, r3, r1, ror r7
   23a0c:	andeq	fp, r3, pc, lsl #10
   23a10:	andeq	ip, r3, sl, ror r7
   23a14:			; <UNDEFINED> instruction: 0xffff9d90
   23a18:	ldrd	r2, [r5, #-56]	; 0xffffffc8
   23a1c:	ldrd	r6, [r4, #136]	; 0x88
   23a20:	ldr	r1, [r5, #-8]
   23a24:	strd	r2, [sp, #88]	; 0x58
   23a28:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   23a2c:	strd	r2, [sp, #96]	; 0x60
   23a30:	ldrd	r2, [r5, #-40]	; 0xffffffd8
   23a34:	strd	r6, [sp, #176]	; 0xb0
   23a38:	ldrd	r6, [r4, #128]	; 0x80
   23a3c:	strd	r2, [sp, #104]	; 0x68
   23a40:	ldrd	r2, [r5, #-32]	; 0xffffffe0
   23a44:	strd	r6, [sp, #192]	; 0xc0
   23a48:	ldrd	r6, [r4, #120]	; 0x78
   23a4c:	strd	r2, [sp, #112]	; 0x70
   23a50:	ldrd	r2, [r5, #-24]	; 0xffffffe8
   23a54:	strd	r6, [sp, #168]	; 0xa8
   23a58:	ldrd	r6, [r4, #112]	; 0x70
   23a5c:	strd	r2, [sp, #120]	; 0x78
   23a60:	ldrd	r2, [r5, #-16]
   23a64:	strd	r6, [sp, #160]	; 0xa0
   23a68:	ldrd	r6, [r4, #104]	; 0x68
   23a6c:	strd	r2, [sp, #128]	; 0x80
   23a70:	ldr	r3, [r5]
   23a74:	ldr	r2, [r4, #144]	; 0x90
   23a78:	strd	r6, [sp, #184]	; 0xb8
   23a7c:	ldrd	r6, [r4, #96]	; 0x60
   23a80:	cmp	r3, #0
   23a84:	strd	r6, [sp, #152]	; 0x98
   23a88:	bge	23ba8 <__assert_fail@plt+0x114bc>
   23a8c:	mov	r3, #0
   23a90:	subs	r2, r2, r1
   23a94:	ldrd	r0, [sp, #128]	; 0x80
   23a98:	mov	ip, #0
   23a9c:	mov	lr, #0
   23aa0:	str	r3, [sp, #216]	; 0xd8
   23aa4:	movvs	r3, #1
   23aa8:	str	r2, [r4, #144]	; 0x90
   23aac:	strvs	r3, [sp, #216]	; 0xd8
   23ab0:	mov	r3, #0
   23ab4:	str	r3, [sp, #220]	; 0xdc
   23ab8:	ldrd	r2, [sp, #176]	; 0xb0
   23abc:	subs	r6, r2, r0
   23ac0:	sbcs	r7, r3, r1
   23ac4:	ldrd	r0, [sp, #120]	; 0x78
   23ac8:	movvs	r3, #1
   23acc:	strd	r6, [r4, #136]	; 0x88
   23ad0:	strvs	r3, [sp, #220]	; 0xdc
   23ad4:	mov	r3, #0
   23ad8:	str	r3, [sp, #128]	; 0x80
   23adc:	ldrd	r2, [sp, #192]	; 0xc0
   23ae0:	subs	r6, r2, r0
   23ae4:	sbcs	r7, r3, r1
   23ae8:	ldrd	r0, [sp, #168]	; 0xa8
   23aec:	movvs	r3, #1
   23af0:	strd	r6, [r4, #128]	; 0x80
   23af4:	strvs	r3, [sp, #128]	; 0x80
   23af8:	mov	r3, #0
   23afc:	str	r3, [sp, #120]	; 0x78
   23b00:	ldrd	r2, [sp, #112]	; 0x70
   23b04:	subs	r6, r0, r2
   23b08:	sbcs	r7, r1, r3
   23b0c:	ldrd	r0, [sp, #104]	; 0x68
   23b10:	movvs	r3, #1
   23b14:	strd	r6, [r4, #120]	; 0x78
   23b18:	strvs	r3, [sp, #120]	; 0x78
   23b1c:	ldrd	r2, [sp, #160]	; 0xa0
   23b20:	subs	r6, r2, r0
   23b24:	sbcs	r7, r3, r1
   23b28:	ldrd	r0, [sp, #96]	; 0x60
   23b2c:	movvs	ip, #1
   23b30:	ldrd	r2, [sp, #184]	; 0xb8
   23b34:	strd	r6, [r4, #112]	; 0x70
   23b38:	subs	r6, r2, r0
   23b3c:	sbcs	r7, r3, r1
   23b40:	ldrd	r0, [sp, #152]	; 0x98
   23b44:	mov	r3, #0
   23b48:	movvs	lr, #1
   23b4c:	strd	r6, [r4, #104]	; 0x68
   23b50:	ldrd	r6, [sp, #88]	; 0x58
   23b54:	str	r3, [sp, #96]	; 0x60
   23b58:	subs	r2, r0, r6
   23b5c:	sbcs	r3, r1, r7
   23b60:	movvs	r1, #1
   23b64:	strd	r2, [r4, #96]	; 0x60
   23b68:	ldrd	r2, [sp, #216]	; 0xd8
   23b6c:	strvs	r1, [sp, #96]	; 0x60
   23b70:	orr	r3, r3, r2
   23b74:	ldr	r2, [sp, #128]	; 0x80
   23b78:	orr	r1, r3, r2
   23b7c:	ldr	r3, [sp, #120]	; 0x78
   23b80:	orr	r2, r1, r3
   23b84:	ldr	r3, [sp, #96]	; 0x60
   23b88:	orr	ip, r2, ip
   23b8c:	orr	lr, ip, lr
   23b90:	orr	r3, lr, r3
   23b94:	cmp	r3, #0
   23b98:	bne	23638 <__assert_fail@plt+0x10f4c>
   23b9c:	mov	r3, #1
   23ba0:	strb	r3, [r4, #153]	; 0x99
   23ba4:	b	23398 <__assert_fail@plt+0x10cac>
   23ba8:	adds	r2, r2, r1
   23bac:	ldrd	r0, [sp, #176]	; 0xb0
   23bb0:	movvs	r3, #1
   23bb4:	movvc	r3, #0
   23bb8:	str	r2, [r4, #144]	; 0x90
   23bbc:	str	r3, [sp, #216]	; 0xd8
   23bc0:	ldrd	r2, [sp, #128]	; 0x80
   23bc4:	adds	r6, r0, r2
   23bc8:	adcs	r7, r1, r3
   23bcc:	ldrd	r0, [sp, #120]	; 0x78
   23bd0:	movvs	r3, #1
   23bd4:	movvc	r3, #0
   23bd8:	strd	r6, [r4, #136]	; 0x88
   23bdc:	str	r3, [sp, #128]	; 0x80
   23be0:	ldrd	r2, [sp, #192]	; 0xc0
   23be4:	adds	r6, r2, r0
   23be8:	adcs	r7, r3, r1
   23bec:	ldrd	r0, [sp, #112]	; 0x70
   23bf0:	movvs	r3, #1
   23bf4:	movvc	r3, #0
   23bf8:	strd	r6, [r4, #128]	; 0x80
   23bfc:	str	r3, [sp, #120]	; 0x78
   23c00:	ldrd	r2, [sp, #168]	; 0xa8
   23c04:	adds	r6, r2, r0
   23c08:	adcs	r7, r3, r1
   23c0c:	ldrd	r0, [sp, #160]	; 0xa0
   23c10:	movvs	r3, #1
   23c14:	movvc	r3, #0
   23c18:	strd	r6, [r4, #120]	; 0x78
   23c1c:	str	r3, [sp, #112]	; 0x70
   23c20:	ldrd	r2, [sp, #104]	; 0x68
   23c24:	adds	r6, r0, r2
   23c28:	adcs	r7, r1, r3
   23c2c:	ldrd	r0, [sp, #96]	; 0x60
   23c30:	movvs	ip, #1
   23c34:	movvc	ip, #0
   23c38:	ldrd	r2, [sp, #184]	; 0xb8
   23c3c:	strd	r6, [r4, #112]	; 0x70
   23c40:	adds	r6, r2, r0
   23c44:	adcs	r7, r3, r1
   23c48:	ldrd	r0, [sp, #88]	; 0x58
   23c4c:	movvs	lr, #1
   23c50:	movvc	lr, #0
   23c54:	ldrd	r2, [sp, #152]	; 0x98
   23c58:	strd	r6, [r4, #104]	; 0x68
   23c5c:	adds	r6, r2, r0
   23c60:	ldr	r2, [sp, #128]	; 0x80
   23c64:	adcs	r7, r3, r1
   23c68:	ldr	r3, [sp, #216]	; 0xd8
   23c6c:	strd	r6, [r4, #96]	; 0x60
   23c70:	orr	r3, r3, r2
   23c74:	ldr	r2, [sp, #120]	; 0x78
   23c78:	orr	r3, r3, r2
   23c7c:	ldr	r2, [sp, #112]	; 0x70
   23c80:	orr	r3, r3, r2
   23c84:	orr	r3, r3, ip
   23c88:	orrvc	r3, lr, r3
   23c8c:	movvs	r3, #1
   23c90:	b	23b94 <__assert_fail@plt+0x114a8>
   23c94:	ldrd	r2, [r5, #-56]	; 0xffffffc8
   23c98:	mov	r1, #0
   23c9c:	str	r1, [sp, #396]	; 0x18c
   23ca0:	add	r0, sp, #344	; 0x158
   23ca4:	str	r1, [sp, #20]
   23ca8:	strd	r2, [r0]
   23cac:	mov	r8, #0
   23cb0:	mov	r9, #0
   23cb4:	mov	fp, r8
   23cb8:	mov	sl, r9
   23cbc:	strd	r8, [sp, #32]
   23cc0:	b	24084 <__assert_fail@plt+0x11998>
   23cc4:	mov	r1, #0
   23cc8:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   23ccc:	str	r1, [sp, #396]	; 0x18c
   23cd0:	b	23ca0 <__assert_fail@plt+0x115b4>
   23cd4:	mov	r3, #0
   23cd8:	mov	r0, #1
   23cdc:	mov	r1, #0
   23ce0:	add	r2, sp, #344	; 0x158
   23ce4:	str	r3, [sp, #20]
   23ce8:	strd	r0, [r2]
   23cec:	str	r3, [sp, #396]	; 0x18c
   23cf0:	b	23cac <__assert_fail@plt+0x115c0>
   23cf4:	mov	r2, #56	; 0x38
   23cf8:	mov	r1, #0
   23cfc:	add	r0, sp, #344	; 0x158
   23d00:	bl	12434 <memset@plt>
   23d04:	ldr	r3, [r5, #-56]	; 0xffffffc8
   23d08:	str	r3, [sp, #24]
   23d0c:	ldr	r3, [r5, #-52]	; 0xffffffcc
   23d10:	mov	r8, #0
   23d14:	mov	r9, #0
   23d18:	str	r3, [sp, #28]
   23d1c:	mov	r3, #0
   23d20:	mov	fp, r8
   23d24:	mov	sl, r9
   23d28:	str	r3, [sp, #20]
   23d2c:	strd	r8, [sp, #32]
   23d30:	strd	r8, [sp, #40]	; 0x28
   23d34:	b	23398 <__assert_fail@plt+0x10cac>
   23d38:	mov	r2, #56	; 0x38
   23d3c:	mov	r1, #0
   23d40:	add	r0, sp, #344	; 0x158
   23d44:	mov	r8, #0
   23d48:	bl	12434 <memset@plt>
   23d4c:	mov	r9, #0
   23d50:	mov	r3, #0
   23d54:	mov	r6, #1
   23d58:	mov	r7, #0
   23d5c:	mov	fp, r8
   23d60:	mov	sl, r9
   23d64:	str	r3, [sp, #20]
   23d68:	strd	r6, [sp, #24]
   23d6c:	strd	r8, [sp, #32]
   23d70:	strd	r8, [sp, #40]	; 0x28
   23d74:	b	23398 <__assert_fail@plt+0x10cac>
   23d78:	mov	r2, #56	; 0x38
   23d7c:	mov	r1, #0
   23d80:	add	r0, sp, #344	; 0x158
   23d84:	bl	12434 <memset@plt>
   23d88:	ldr	r2, [r5, #-56]	; 0xffffffc8
   23d8c:	mov	lr, #0
   23d90:	ldr	r7, [r5, #-52]	; 0xffffffcc
   23d94:	ldr	ip, [r5]
   23d98:	ldr	r1, [r5, #4]
   23d9c:	cmp	r7, r2, asr #31
   23da0:	asr	r3, ip, #31
   23da4:	bne	23e3c <__assert_fail@plt+0x11750>
   23da8:	cmp	r3, r1
   23dac:	smulleq	r2, r3, r2, ip
   23db0:	strdeq	r2, [sp, #56]	; 0x38
   23db4:	beq	23ea4 <__assert_fail@plt+0x117b8>
   23db8:	ldm	r5, {r6, r8}
   23dbc:	mov	r7, r1
   23dc0:	mov	ip, r2
   23dc4:	cmp	r7, #0
   23dc8:	ldr	r0, [r5, #-56]	; 0xffffffc8
   23dcc:	ldr	r3, [r5]
   23dd0:	umull	r0, r1, r0, r3
   23dd4:	umull	r2, r3, ip, r7
   23dd8:	bge	23de8 <__assert_fail@plt+0x116fc>
   23ddc:	mov	r7, #0
   23de0:	subs	r2, r2, r7
   23de4:	sbc	r3, r3, ip
   23de8:	cmp	ip, #0
   23dec:	bge	23df8 <__assert_fail@plt+0x1170c>
   23df0:	subs	r2, r2, r6
   23df4:	sbc	r3, r3, r8
   23df8:	adds	ip, r2, r1
   23dfc:	mov	r6, #0
   23e00:	adc	r6, r3, r6
   23e04:	cmp	r6, ip, asr #31
   23e08:	streq	r0, [sp, #56]	; 0x38
   23e0c:	streq	ip, [sp, #60]	; 0x3c
   23e10:	beq	23ea4 <__assert_fail@plt+0x117b8>
   23e14:	ldr	r2, [r5, #-56]	; 0xffffffc8
   23e18:	ldr	r1, [r5, #-52]	; 0xffffffcc
   23e1c:	ldr	r3, [r5, #4]
   23e20:	ldr	ip, [r5]
   23e24:	mul	r3, r2, r3
   23e28:	mla	r1, ip, r1, r3
   23e2c:	umull	r2, r3, r2, ip
   23e30:	add	r3, r1, r3
   23e34:	strd	r2, [sp, #56]	; 0x38
   23e38:	b	23e90 <__assert_fail@plt+0x117a4>
   23e3c:	cmp	r3, r1
   23e40:	ldreq	r6, [r5, #-56]	; 0xffffffc8
   23e44:	ldreq	r8, [r5, #-52]	; 0xffffffcc
   23e48:	beq	23dc4 <__assert_fail@plt+0x116d8>
   23e4c:	mul	r0, r2, r1
   23e50:	umull	r2, r3, r2, ip
   23e54:	mla	r0, ip, r7, r0
   23e58:	add	r3, r0, r3
   23e5c:	strd	r2, [sp, #56]	; 0x38
   23e60:	add	r3, r7, #1
   23e64:	cmp	r3, #1
   23e68:	bhi	23e90 <__assert_fail@plt+0x117a4>
   23e6c:	add	r3, r1, #1
   23e70:	cmp	r3, #1
   23e74:	bhi	23e90 <__assert_fail@plt+0x117a4>
   23e78:	cmp	r7, r1
   23e7c:	ldrd	r2, [sp, #56]	; 0x38
   23e80:	bne	23e98 <__assert_fail@plt+0x117ac>
   23e84:	cmp	r2, #1
   23e88:	sbcs	r3, r3, #0
   23e8c:	bge	23ea4 <__assert_fail@plt+0x117b8>
   23e90:	mov	lr, #1
   23e94:	b	23ea4 <__assert_fail@plt+0x117b8>
   23e98:	cmp	r2, #0
   23e9c:	sbcs	r3, r3, #0
   23ea0:	bge	23e90 <__assert_fail@plt+0x117a4>
   23ea4:	ldr	r3, [sp, #56]	; 0x38
   23ea8:	str	r3, [sp, #40]	; 0x28
   23eac:	ldr	r3, [sp, #60]	; 0x3c
   23eb0:	cmp	lr, #0
   23eb4:	str	r3, [sp, #44]	; 0x2c
   23eb8:	bne	23638 <__assert_fail@plt+0x10f4c>
   23ebc:	str	lr, [sp, #20]
   23ec0:	mov	r8, #0
   23ec4:	mov	r9, #0
   23ec8:	mov	fp, r8
   23ecc:	mov	sl, r9
   23ed0:	strd	r8, [sp, #32]
   23ed4:	b	24088 <__assert_fail@plt+0x1199c>
   23ed8:	mov	r2, #56	; 0x38
   23edc:	mov	r1, #0
   23ee0:	add	r0, sp, #344	; 0x158
   23ee4:	bl	12434 <memset@plt>
   23ee8:	ldr	r2, [r5, #-48]	; 0xffffffd0
   23eec:	mov	lr, #0
   23ef0:	ldr	r7, [r5, #-44]	; 0xffffffd4
   23ef4:	ldr	ip, [r5]
   23ef8:	ldr	r1, [r5, #4]
   23efc:	cmp	r7, r2, asr #31
   23f00:	asr	r3, ip, #31
   23f04:	bne	23f9c <__assert_fail@plt+0x118b0>
   23f08:	cmp	r3, r1
   23f0c:	smulleq	r2, r3, r2, ip
   23f10:	strdeq	r2, [sp, #64]	; 0x40
   23f14:	beq	24004 <__assert_fail@plt+0x11918>
   23f18:	ldm	r5, {r6, r8}
   23f1c:	mov	r7, r1
   23f20:	mov	ip, r2
   23f24:	cmp	r7, #0
   23f28:	ldr	r0, [r5, #-48]	; 0xffffffd0
   23f2c:	ldr	r3, [r5]
   23f30:	umull	r0, r1, r0, r3
   23f34:	umull	r2, r3, ip, r7
   23f38:	bge	23f48 <__assert_fail@plt+0x1185c>
   23f3c:	mov	r7, #0
   23f40:	subs	r2, r2, r7
   23f44:	sbc	r3, r3, ip
   23f48:	cmp	ip, #0
   23f4c:	bge	23f58 <__assert_fail@plt+0x1186c>
   23f50:	subs	r2, r2, r6
   23f54:	sbc	r3, r3, r8
   23f58:	adds	ip, r2, r1
   23f5c:	mov	r6, #0
   23f60:	adc	r6, r3, r6
   23f64:	cmp	r6, ip, asr #31
   23f68:	streq	r0, [sp, #64]	; 0x40
   23f6c:	streq	ip, [sp, #68]	; 0x44
   23f70:	beq	24004 <__assert_fail@plt+0x11918>
   23f74:	ldr	r2, [r5, #-48]	; 0xffffffd0
   23f78:	ldr	r1, [r5, #-44]	; 0xffffffd4
   23f7c:	ldr	r3, [r5, #4]
   23f80:	ldr	ip, [r5]
   23f84:	mul	r3, r2, r3
   23f88:	mla	r1, ip, r1, r3
   23f8c:	umull	r2, r3, r2, ip
   23f90:	add	r3, r1, r3
   23f94:	strd	r2, [sp, #64]	; 0x40
   23f98:	b	23ff0 <__assert_fail@plt+0x11904>
   23f9c:	cmp	r3, r1
   23fa0:	ldreq	r6, [r5, #-48]	; 0xffffffd0
   23fa4:	ldreq	r8, [r5, #-44]	; 0xffffffd4
   23fa8:	beq	23f24 <__assert_fail@plt+0x11838>
   23fac:	mul	r0, r2, r1
   23fb0:	umull	r2, r3, r2, ip
   23fb4:	mla	r0, ip, r7, r0
   23fb8:	add	r3, r0, r3
   23fbc:	strd	r2, [sp, #64]	; 0x40
   23fc0:	add	r3, r7, #1
   23fc4:	cmp	r3, #1
   23fc8:	bhi	23ff0 <__assert_fail@plt+0x11904>
   23fcc:	add	r3, r1, #1
   23fd0:	cmp	r3, #1
   23fd4:	bhi	23ff0 <__assert_fail@plt+0x11904>
   23fd8:	cmp	r7, r1
   23fdc:	ldrd	r2, [sp, #64]	; 0x40
   23fe0:	bne	23ff8 <__assert_fail@plt+0x1190c>
   23fe4:	cmp	r2, #1
   23fe8:	sbcs	r3, r3, #0
   23fec:	bge	24004 <__assert_fail@plt+0x11918>
   23ff0:	mov	lr, #1
   23ff4:	b	24004 <__assert_fail@plt+0x11918>
   23ff8:	cmp	r2, #0
   23ffc:	sbcs	r3, r3, #0
   24000:	bge	23ff0 <__assert_fail@plt+0x11904>
   24004:	ldr	r3, [sp, #64]	; 0x40
   24008:	str	r3, [sp, #40]	; 0x28
   2400c:	ldr	r3, [sp, #68]	; 0x44
   24010:	b	23eb0 <__assert_fail@plt+0x117c4>
   24014:	mov	r2, #56	; 0x38
   24018:	mov	r1, #0
   2401c:	add	r0, sp, #344	; 0x158
   24020:	bl	12434 <memset@plt>
   24024:	ldr	r3, [r5, #-56]	; 0xffffffc8
   24028:	str	r3, [sp, #32]
   2402c:	ldr	r3, [r5, #-52]	; 0xffffffcc
   24030:	str	r3, [sp, #36]	; 0x24
   24034:	mov	r3, #0
   24038:	mov	r8, #0
   2403c:	mov	r9, #0
   24040:	mov	fp, r8
   24044:	mov	sl, r9
   24048:	str	r3, [sp, #20]
   2404c:	b	24084 <__assert_fail@plt+0x11998>
   24050:	mov	r1, #0
   24054:	mov	r2, #56	; 0x38
   24058:	add	r0, sp, #344	; 0x158
   2405c:	mov	r8, #0
   24060:	mov	r9, #0
   24064:	mov	fp, r8
   24068:	bl	12434 <memset@plt>
   2406c:	mov	sl, r9
   24070:	mov	r3, #0
   24074:	mov	r0, #1
   24078:	mov	r1, #0
   2407c:	str	r3, [sp, #20]
   24080:	strd	r0, [sp, #32]
   24084:	strd	r8, [sp, #40]	; 0x28
   24088:	strd	r8, [sp, #24]
   2408c:	b	23398 <__assert_fail@plt+0x10cac>
   24090:	mov	r2, #56	; 0x38
   24094:	mov	r1, #0
   24098:	add	r0, sp, #344	; 0x158
   2409c:	bl	12434 <memset@plt>
   240a0:	ldr	fp, [r5, #-56]	; 0xffffffc8
   240a4:	ldr	sl, [r5, #-52]	; 0xffffffcc
   240a8:	mov	r3, #0
   240ac:	mov	r8, #0
   240b0:	mov	r9, #0
   240b4:	str	r3, [sp, #20]
   240b8:	b	23cbc <__assert_fail@plt+0x115d0>
   240bc:	mov	r2, #56	; 0x38
   240c0:	mov	r1, #0
   240c4:	add	r0, sp, #344	; 0x158
   240c8:	mov	r8, #0
   240cc:	bl	12434 <memset@plt>
   240d0:	mov	r3, #0
   240d4:	mov	r9, #0
   240d8:	mov	fp, #1
   240dc:	mov	sl, r3
   240e0:	str	r3, [sp, #20]
   240e4:	b	23cbc <__assert_fail@plt+0x115d0>
   240e8:	mov	r2, #56	; 0x38
   240ec:	mov	r1, #0
   240f0:	add	r0, sp, #344	; 0x158
   240f4:	bl	12434 <memset@plt>
   240f8:	ldrd	r8, [r5, #-56]	; 0xffffffc8
   240fc:	mov	r3, #0
   24100:	str	r3, [sp, #20]
   24104:	b	24168 <__assert_fail@plt+0x11a7c>
   24108:	mov	r2, #56	; 0x38
   2410c:	mov	r1, #0
   24110:	add	r0, sp, #344	; 0x158
   24114:	mov	fp, #0
   24118:	bl	12434 <memset@plt>
   2411c:	ldr	r3, [r5, #-56]	; 0xffffffc8
   24120:	mov	r8, r3
   24124:	asr	r9, r3, #31
   24128:	ldr	r3, [r5, #-52]	; 0xffffffcc
   2412c:	str	r3, [sp, #20]
   24130:	mov	sl, fp
   24134:	str	fp, [sp, #24]
   24138:	strd	sl, [sp, #28]
   2413c:	strd	sl, [sp, #36]	; 0x24
   24140:	str	fp, [sp, #44]	; 0x2c
   24144:	b	23398 <__assert_fail@plt+0x10cac>
   24148:	mov	r2, #56	; 0x38
   2414c:	mov	r1, #0
   24150:	add	r0, sp, #344	; 0x158
   24154:	mov	r8, #1
   24158:	bl	12434 <memset@plt>
   2415c:	mov	r9, #0
   24160:	mov	r3, #0
   24164:	str	r3, [sp, #20]
   24168:	mov	fp, r3
   2416c:	b	24130 <__assert_fail@plt+0x11a44>
   24170:	mov	r2, #56	; 0x38
   24174:	mov	r1, #0
   24178:	add	r0, sp, #344	; 0x158
   2417c:	bl	12434 <memset@plt>
   24180:	ldr	r3, [r5, #-48]	; 0xffffffd0
   24184:	str	r3, [sp, #24]
   24188:	ldr	r3, [r5, #-44]	; 0xffffffd4
   2418c:	b	23d10 <__assert_fail@plt+0x11624>
   24190:	mov	r2, #56	; 0x38
   24194:	mov	r1, #0
   24198:	add	r0, sp, #344	; 0x158
   2419c:	bl	12434 <memset@plt>
   241a0:	ldr	r2, [r5, #-48]	; 0xffffffd0
   241a4:	mov	lr, #0
   241a8:	ldr	r7, [r5, #-44]	; 0xffffffd4
   241ac:	ldr	ip, [r5]
   241b0:	ldr	r1, [r5, #4]
   241b4:	cmp	r7, r2, asr #31
   241b8:	asr	r3, ip, #31
   241bc:	bne	24254 <__assert_fail@plt+0x11b68>
   241c0:	cmp	r3, r1
   241c4:	smulleq	r2, r3, r2, ip
   241c8:	strdeq	r2, [sp, #72]	; 0x48
   241cc:	beq	242bc <__assert_fail@plt+0x11bd0>
   241d0:	ldm	r5, {r6, r8}
   241d4:	mov	r7, r1
   241d8:	mov	ip, r2
   241dc:	cmp	r7, #0
   241e0:	ldr	r0, [r5, #-48]	; 0xffffffd0
   241e4:	ldr	r3, [r5]
   241e8:	umull	r0, r1, r0, r3
   241ec:	umull	r2, r3, ip, r7
   241f0:	bge	24200 <__assert_fail@plt+0x11b14>
   241f4:	mov	r7, #0
   241f8:	subs	r2, r2, r7
   241fc:	sbc	r3, r3, ip
   24200:	cmp	ip, #0
   24204:	bge	24210 <__assert_fail@plt+0x11b24>
   24208:	subs	r2, r2, r6
   2420c:	sbc	r3, r3, r8
   24210:	adds	ip, r2, r1
   24214:	mov	r6, #0
   24218:	adc	r6, r3, r6
   2421c:	cmp	r6, ip, asr #31
   24220:	streq	r0, [sp, #72]	; 0x48
   24224:	streq	ip, [sp, #76]	; 0x4c
   24228:	beq	242bc <__assert_fail@plt+0x11bd0>
   2422c:	ldr	r2, [r5, #-48]	; 0xffffffd0
   24230:	ldr	r1, [r5, #-44]	; 0xffffffd4
   24234:	ldr	r3, [r5, #4]
   24238:	ldr	ip, [r5]
   2423c:	mul	r3, r2, r3
   24240:	mla	r1, ip, r1, r3
   24244:	umull	r2, r3, r2, ip
   24248:	add	r3, r1, r3
   2424c:	strd	r2, [sp, #72]	; 0x48
   24250:	b	242a8 <__assert_fail@plt+0x11bbc>
   24254:	cmp	r3, r1
   24258:	ldreq	r6, [r5, #-48]	; 0xffffffd0
   2425c:	ldreq	r8, [r5, #-44]	; 0xffffffd4
   24260:	beq	241dc <__assert_fail@plt+0x11af0>
   24264:	mul	r0, r2, r1
   24268:	umull	r2, r3, r2, ip
   2426c:	mla	r0, ip, r7, r0
   24270:	add	r3, r0, r3
   24274:	strd	r2, [sp, #72]	; 0x48
   24278:	add	r3, r7, #1
   2427c:	cmp	r3, #1
   24280:	bhi	242a8 <__assert_fail@plt+0x11bbc>
   24284:	add	r3, r1, #1
   24288:	cmp	r3, #1
   2428c:	bhi	242a8 <__assert_fail@plt+0x11bbc>
   24290:	cmp	r7, r1
   24294:	ldrd	r2, [sp, #72]	; 0x48
   24298:	bne	242b0 <__assert_fail@plt+0x11bc4>
   2429c:	cmp	r2, #1
   242a0:	sbcs	r3, r3, #0
   242a4:	bge	242bc <__assert_fail@plt+0x11bd0>
   242a8:	mov	lr, #1
   242ac:	b	242bc <__assert_fail@plt+0x11bd0>
   242b0:	cmp	r2, #0
   242b4:	sbcs	r3, r3, #0
   242b8:	bge	242a8 <__assert_fail@plt+0x11bbc>
   242bc:	ldr	r3, [sp, #72]	; 0x48
   242c0:	str	r3, [sp, #40]	; 0x28
   242c4:	ldr	r3, [sp, #76]	; 0x4c
   242c8:	b	23eb0 <__assert_fail@plt+0x117c4>
   242cc:	mov	r2, #56	; 0x38
   242d0:	mov	r1, #0
   242d4:	add	r0, sp, #344	; 0x158
   242d8:	bl	12434 <memset@plt>
   242dc:	ldr	r3, [r5, #-48]	; 0xffffffd0
   242e0:	str	r3, [sp, #32]
   242e4:	ldr	r3, [r5, #-44]	; 0xffffffd4
   242e8:	b	24030 <__assert_fail@plt+0x11944>
   242ec:	mov	r2, #56	; 0x38
   242f0:	mov	r1, #0
   242f4:	add	r0, sp, #344	; 0x158
   242f8:	bl	12434 <memset@plt>
   242fc:	ldr	fp, [r5, #-48]	; 0xffffffd0
   24300:	ldr	sl, [r5, #-44]	; 0xffffffd4
   24304:	b	240a8 <__assert_fail@plt+0x119bc>
   24308:	mov	r2, #56	; 0x38
   2430c:	mov	r1, #0
   24310:	add	r0, sp, #344	; 0x158
   24314:	bl	12434 <memset@plt>
   24318:	ldrd	r8, [r5, #-48]	; 0xffffffd0
   2431c:	b	240fc <__assert_fail@plt+0x11a10>
   24320:	mov	r2, #56	; 0x38
   24324:	mov	r1, #0
   24328:	add	r0, sp, #344	; 0x158
   2432c:	bl	12434 <memset@plt>
   24330:	ldr	r3, [r5]
   24334:	str	r3, [sp, #40]	; 0x28
   24338:	ldr	r3, [r5, #4]
   2433c:	str	r3, [sp, #44]	; 0x2c
   24340:	mov	r3, #0
   24344:	str	r3, [sp, #20]
   24348:	b	23ec0 <__assert_fail@plt+0x117d4>
   2434c:	ldr	r3, [r5, #8]
   24350:	mvn	r0, #0
   24354:	ldr	r2, [r5, #12]
   24358:	adds	r1, r3, #-2147483648	; 0x80000000
   2435c:	adc	r2, r2, #0
   24360:	str	r1, [sp, #200]	; 0xc8
   24364:	mov	r1, #0
   24368:	str	r2, [sp, #204]	; 0xcc
   2436c:	ldrd	r6, [sp, #200]	; 0xc8
   24370:	cmp	r7, r1
   24374:	cmpeq	r6, r0
   24378:	bhi	23638 <__assert_fail@plt+0x10f4c>
   2437c:	str	r3, [sp, #344]	; 0x158
   24380:	mov	r3, #0
   24384:	str	r3, [sp, #348]	; 0x15c
   24388:	b	23398 <__assert_fail@plt+0x10cac>
   2438c:	ldr	r3, [r5, #8]
   24390:	mvn	r0, #0
   24394:	ldr	r2, [r5, #12]
   24398:	adds	r1, r3, #-2147483648	; 0x80000000
   2439c:	adc	r2, r2, #0
   243a0:	str	r1, [sp, #208]	; 0xd0
   243a4:	mov	r1, #0
   243a8:	str	r2, [sp, #212]	; 0xd4
   243ac:	ldrd	r6, [sp, #208]	; 0xd0
   243b0:	b	24370 <__assert_fail@plt+0x11c84>
   243b4:	add	r3, r5, #8
   243b8:	ldm	r3, {r0, r1, r2, r3}
   243bc:	stm	sp, {r0, r1, r2, r3}
   243c0:	mov	r0, r4
   243c4:	ldm	r5, {r2, r3}
   243c8:	bl	22728 <__assert_fail@plt+0x1003c>
   243cc:	b	23398 <__assert_fail@plt+0x10cac>
   243d0:	sub	r3, r5, #48	; 0x30
   243d4:	ldm	r3, {r0, r1, r2, r3}
   243d8:	stm	sp, {r0, r1, r2, r3}
   243dc:	sub	r3, r5, #56	; 0x38
   243e0:	mov	r0, r4
   243e4:	ldm	r3, {r2, r3}
   243e8:	bl	22728 <__assert_fail@plt+0x1003c>
   243ec:	ldr	r2, [r4, #144]	; 0x90
   243f0:	ldr	r3, [r5, #48]	; 0x30
   243f4:	ldrd	r0, [r5, #40]	; 0x28
   243f8:	adds	r3, r2, r3
   243fc:	movvs	r2, #1
   24400:	movvc	r2, #0
   24404:	str	r3, [r4, #144]	; 0x90
   24408:	str	r2, [sp, #88]	; 0x58
   2440c:	ldrd	r2, [r4, #136]	; 0x88
   24410:	adds	r6, r2, r0
   24414:	adcs	r7, r3, r1
   24418:	ldrd	r0, [r5, #32]
   2441c:	movvs	r3, #1
   24420:	movvc	r3, #0
   24424:	strd	r6, [r4, #136]	; 0x88
   24428:	str	r3, [sp, #96]	; 0x60
   2442c:	ldrd	r2, [r4, #128]	; 0x80
   24430:	adds	r6, r2, r0
   24434:	adcs	r7, r3, r1
   24438:	ldrd	r0, [r5, #24]
   2443c:	movvs	r3, #1
   24440:	movvc	r3, #0
   24444:	strd	r6, [r4, #128]	; 0x80
   24448:	str	r3, [sp, #104]	; 0x68
   2444c:	ldrd	r2, [r4, #120]	; 0x78
   24450:	adds	r6, r2, r0
   24454:	adcs	r7, r3, r1
   24458:	ldrd	r0, [r5, #16]
   2445c:	movvs	ip, #1
   24460:	movvc	ip, #0
   24464:	ldrd	r2, [r4, #112]	; 0x70
   24468:	strd	r6, [r4, #120]	; 0x78
   2446c:	adds	r6, r2, r0
   24470:	adcs	r7, r3, r1
   24474:	ldrd	r0, [r5, #8]
   24478:	movvs	lr, #1
   2447c:	movvc	lr, #0
   24480:	ldrd	r2, [r4, #104]	; 0x68
   24484:	strd	r6, [r4, #112]	; 0x70
   24488:	adds	r6, r2, r0
   2448c:	adcs	r7, r3, r1
   24490:	ldrd	r0, [r4, #96]	; 0x60
   24494:	movvs	r3, #1
   24498:	movvc	r3, #0
   2449c:	strd	r6, [r4, #104]	; 0x68
   244a0:	str	r3, [sp, #112]	; 0x70
   244a4:	ldrd	r2, [r5]
   244a8:	adds	r6, r0, r2
   244ac:	ldr	r2, [sp, #96]	; 0x60
   244b0:	adcs	r7, r1, r3
   244b4:	ldr	r3, [sp, #88]	; 0x58
   244b8:	strd	r6, [r4, #96]	; 0x60
   244bc:	orr	r0, r3, r2
   244c0:	ldr	r3, [sp, #104]	; 0x68
   244c4:	orr	r1, r0, r3
   244c8:	ldr	r3, [sp, #112]	; 0x70
   244cc:	orr	ip, r1, ip
   244d0:	orr	lr, ip, lr
   244d4:	b	23c88 <__assert_fail@plt+0x1159c>
   244d8:	mvn	r2, #0
   244dc:	mvn	r3, #0
   244e0:	add	r1, sp, #344	; 0x158
   244e4:	strd	r2, [r1]
   244e8:	b	23398 <__assert_fail@plt+0x10cac>
   244ec:	ldrd	r2, [r5, #8]
   244f0:	b	244e0 <__assert_fail@plt+0x11df4>
   244f4:	ldr	r3, [sp, #48]	; 0x30
   244f8:	cmp	r3, #0
   244fc:	bgt	24508 <__assert_fail@plt+0x11e1c>
   24500:	bne	2310c <__assert_fail@plt+0x10a20>
   24504:	b	23638 <__assert_fail@plt+0x10f4c>
   24508:	mvn	r3, #1
   2450c:	str	r3, [sp, #48]	; 0x30
   24510:	b	2310c <__assert_fail@plt+0x10a20>
   24514:	ldrd	r2, [sp, #144]	; 0x90
   24518:	add	r1, sp, #296	; 0x128
   2451c:	add	ip, sp, #288	; 0x120
   24520:	add	r5, r5, #56	; 0x38
   24524:	mov	lr, r5
   24528:	strd	r2, [r1]
   2452c:	ldr	r3, [sp, #140]	; 0x8c
   24530:	str	r3, [sp, #304]	; 0x130
   24534:	ldm	ip!, {r0, r1, r2, r3}
   24538:	stmia	lr!, {r0, r1, r2, r3}
   2453c:	ldm	ip!, {r0, r1, r2, r3}
   24540:	stmia	lr!, {r0, r1, r2, r3}
   24544:	ldm	ip!, {r0, r1, r2, r3}
   24548:	stmia	lr!, {r0, r1, r2, r3}
   2454c:	mov	r3, #3
   24550:	ldm	ip, {r0, r1}
   24554:	stm	lr, {r0, r1}
   24558:	str	r3, [sp, #84]	; 0x54
   2455c:	b	22d54 <__assert_fail@plt+0x10668>
   24560:	mov	r0, #2
   24564:	b	2363c <__assert_fail@plt+0x10f50>
   24568:	mov	r0, #0
   2456c:	b	2363c <__assert_fail@plt+0x10f50>
   24570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24574:	sub	sp, sp, #612	; 0x264
   24578:	subs	r6, r2, #0
   2457c:	mov	r4, r1
   24580:	str	r3, [sp, #40]	; 0x28
   24584:	str	r0, [sp, #44]	; 0x2c
   24588:	bne	24598 <__assert_fail@plt+0x11eac>
   2458c:	add	r0, sp, #52	; 0x34
   24590:	add	r6, sp, #52	; 0x34
   24594:	bl	36e08 <__assert_fail@plt+0x2471c>
   24598:	ldm	r6, {r5, r7}
   2459c:	mov	r8, r4
   245a0:	ldrb	r0, [r4], #1
   245a4:	bl	36b90 <__assert_fail@plt+0x244a4>
   245a8:	subs	r3, r0, #0
   245ac:	str	r3, [sp, #8]
   245b0:	bne	2459c <__assert_fail@plt+0x11eb0>
   245b4:	mov	r1, r3
   245b8:	mov	r2, #56	; 0x38
   245bc:	add	r0, sp, #224	; 0xe0
   245c0:	bl	12434 <memset@plt>
   245c4:	mov	r2, #4
   245c8:	ldr	r1, [pc, #2992]	; 25180 <__assert_fail@plt+0x12a94>
   245cc:	mov	r0, r8
   245d0:	bl	1268c <strncmp@plt>
   245d4:	cmp	r0, #0
   245d8:	addeq	r9, r8, #4
   245dc:	moveq	r0, #1
   245e0:	moveq	r3, r9
   245e4:	beq	248c4 <__assert_fail@plt+0x121d8>
   245e8:	ldr	r3, [sp, #8]
   245ec:	ldr	r4, [sp, #40]	; 0x28
   245f0:	str	r3, [sp, #12]
   245f4:	b	246a4 <__assert_fail@plt+0x11fb8>
   245f8:	cmp	r2, #92	; 0x5c
   245fc:	bne	24620 <__assert_fail@plt+0x11f34>
   24600:	add	r2, r3, #1
   24604:	ldrb	r3, [r3, #1]
   24608:	cmp	r3, #92	; 0x5c
   2460c:	cmpne	r3, #34	; 0x22
   24610:	beq	248bc <__assert_fail@plt+0x121d0>
   24614:	mov	r3, #0
   24618:	ldr	r4, [sp, #40]	; 0x28
   2461c:	b	245f0 <__assert_fail@plt+0x11f04>
   24620:	cmp	r2, #34	; 0x22
   24624:	bne	248b8 <__assert_fail@plt+0x121cc>
   24628:	cmp	r0, #100	; 0x64
   2462c:	movle	r3, #0
   24630:	addle	r0, sp, #284	; 0x11c
   24634:	strle	r3, [sp, #12]
   24638:	ble	24664 <__assert_fail@plt+0x11f78>
   2463c:	bl	2a340 <__assert_fail@plt+0x17c54>
   24640:	subs	r3, r0, #0
   24644:	movne	r0, r3
   24648:	str	r3, [sp, #12]
   2464c:	bne	24664 <__assert_fail@plt+0x11f78>
   24650:	ldr	r0, [sp, #12]
   24654:	bl	284c4 <__assert_fail@plt+0x15dd8>
   24658:	ldr	r0, [sp, #8]
   2465c:	add	sp, sp, #612	; 0x264
   24660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24664:	mov	r2, r0
   24668:	ldrb	r3, [r9]
   2466c:	cmp	r3, #34	; 0x22
   24670:	bne	24898 <__assert_fail@plt+0x121ac>
   24674:	mov	r3, #0
   24678:	strb	r3, [r2]
   2467c:	bl	361b8 <__assert_fail@plt+0x23acc>
   24680:	subs	r4, r0, #0
   24684:	beq	24650 <__assert_fail@plt+0x11f64>
   24688:	add	r9, r9, #1
   2468c:	mov	r8, r9
   24690:	add	r9, r9, #1
   24694:	ldrb	r0, [r8]
   24698:	bl	36b90 <__assert_fail@plt+0x244a4>
   2469c:	cmp	r0, #0
   246a0:	bne	2468c <__assert_fail@plt+0x11fa0>
   246a4:	add	r2, sp, #136	; 0x88
   246a8:	mov	r1, r6
   246ac:	mov	r0, r4
   246b0:	bl	36460 <__assert_fail@plt+0x23d74>
   246b4:	cmp	r0, #0
   246b8:	beq	24880 <__assert_fail@plt+0x12194>
   246bc:	ldrb	r2, [r8]
   246c0:	mov	r9, #0
   246c4:	add	lr, sp, #224	; 0xe0
   246c8:	add	ip, sp, #480	; 0x1e0
   246cc:	str	r7, [sp, #476]	; 0x1dc
   246d0:	mov	r6, #0
   246d4:	ldr	r3, [pc, #2728]	; 25184 <__assert_fail@plt+0x12a98>
   246d8:	str	r6, [sp, #432]	; 0x1b0
   246dc:	ldr	r1, [sp, #156]	; 0x9c
   246e0:	cmp	r2, #0
   246e4:	ldr	r7, [sp, #168]	; 0xa8
   246e8:	moveq	r8, r3
   246ec:	str	r8, [sp, #384]	; 0x180
   246f0:	movw	r8, #1900	; 0x76c
   246f4:	adds	r2, r8, r1
   246f8:	str	r7, [sp, #124]	; 0x7c
   246fc:	adc	r3, r9, r1, asr #31
   24700:	add	r1, sp, #424	; 0x1a8
   24704:	ldr	r8, [pc, #2684]	; 25188 <__assert_fail@plt+0x12a9c>
   24708:	strd	r2, [r1]
   2470c:	add	r1, sp, #440	; 0x1b8
   24710:	ldr	r2, [sp, #152]	; 0x98
   24714:	add	r2, r2, #1
   24718:	asr	r3, r2, #31
   2471c:	strd	r2, [r1]
   24720:	add	r1, sp, #448	; 0x1c0
   24724:	ldr	r2, [sp, #148]	; 0x94
   24728:	asr	r3, r2, #31
   2472c:	strd	r2, [r1]
   24730:	add	r1, sp, #456	; 0x1c8
   24734:	ldr	r2, [sp, #144]	; 0x90
   24738:	asr	r3, r2, #31
   2473c:	strd	r2, [r1]
   24740:	add	r1, sp, #464	; 0x1d0
   24744:	ldr	r2, [sp, #140]	; 0x8c
   24748:	asr	r3, r2, #31
   2474c:	strd	r2, [r1]
   24750:	ldr	r3, [sp, #136]	; 0x88
   24754:	str	r3, [sp, #472]	; 0x1d8
   24758:	mov	r3, #2
   2475c:	str	r3, [sp, #412]	; 0x19c
   24760:	ldm	lr!, {r0, r1, r2, r3}
   24764:	stmia	ip!, {r0, r1, r2, r3}
   24768:	ldm	lr!, {r0, r1, r2, r3}
   2476c:	stmia	ip!, {r0, r1, r2, r3}
   24770:	ldm	lr!, {r0, r1, r2, r3}
   24774:	str	r6, [sp, #540]	; 0x21c
   24778:	str	r6, [sp, #544]	; 0x220
   2477c:	stmia	ip!, {r0, r1, r2, r3}
   24780:	add	r3, sp, #536	; 0x218
   24784:	ldm	lr, {r0, r1}
   24788:	str	r6, [sp, #548]	; 0x224
   2478c:	str	r6, [sp, #552]	; 0x228
   24790:	str	r6, [sp, #556]	; 0x22c
   24794:	str	r6, [sp, #560]	; 0x230
   24798:	stm	ip, {r0, r1}
   2479c:	strh	r6, [r3]
   247a0:	ldr	r3, [sp, #176]	; 0xb0
   247a4:	str	r6, [sp, #564]	; 0x234
   247a8:	str	r6, [sp, #568]	; 0x238
   247ac:	str	r6, [sp, #584]	; 0x248
   247b0:	ldr	r6, [pc, #2516]	; 2518c <__assert_fail@plt+0x12aa0>
   247b4:	str	r3, [sp, #572]	; 0x23c
   247b8:	movw	r3, #269	; 0x10d
   247bc:	str	r7, [sp, #580]	; 0x244
   247c0:	str	r3, [sp, #576]	; 0x240
   247c4:	adds	r3, r5, r6
   247c8:	movvs	r7, #1
   247cc:	movvc	r7, #0
   247d0:	cmp	r7, #0
   247d4:	str	r3, [sp, #60]	; 0x3c
   247d8:	bne	24824 <__assert_fail@plt+0x12138>
   247dc:	add	r2, sp, #180	; 0xb4
   247e0:	add	r1, sp, #60	; 0x3c
   247e4:	mov	r0, r4
   247e8:	bl	36460 <__assert_fail@plt+0x23d74>
   247ec:	cmp	r0, #0
   247f0:	beq	248dc <__assert_fail@plt+0x121f0>
   247f4:	ldr	r2, [sp, #220]	; 0xdc
   247f8:	cmp	r2, #0
   247fc:	beq	248dc <__assert_fail@plt+0x121f0>
   24800:	ldr	r3, [sp, #212]	; 0xd4
   24804:	ldr	r1, [sp, #580]	; 0x244
   24808:	cmp	r3, r1
   2480c:	beq	248dc <__assert_fail@plt+0x121f0>
   24810:	str	r2, [sp, #584]	; 0x248
   24814:	movw	r2, #269	; 0x10d
   24818:	str	r2, [sp, #588]	; 0x24c
   2481c:	str	r3, [sp, #592]	; 0x250
   24820:	str	r7, [sp, #596]	; 0x254
   24824:	ldr	r0, [sp, #572]	; 0x23c
   24828:	cmp	r0, #0
   2482c:	beq	24850 <__assert_fail@plt+0x12164>
   24830:	ldr	r1, [sp, #584]	; 0x248
   24834:	cmp	r1, #0
   24838:	beq	24850 <__assert_fail@plt+0x12164>
   2483c:	bl	11ffc <strcmp@plt>
   24840:	cmp	r0, #0
   24844:	mvneq	r3, #0
   24848:	streq	r0, [sp, #584]	; 0x248
   2484c:	streq	r3, [sp, #580]	; 0x244
   24850:	add	r0, sp, #384	; 0x180
   24854:	bl	22aec <__assert_fail@plt+0x10400>
   24858:	cmp	r0, #0
   2485c:	bne	24880 <__assert_fail@plt+0x12194>
   24860:	ldrb	r5, [sp, #536]	; 0x218
   24864:	cmp	r5, #0
   24868:	beq	248f0 <__assert_fail@plt+0x12204>
   2486c:	add	r3, sp, #472	; 0x1d8
   24870:	str	r5, [sp, #8]
   24874:	ldm	r3, {r0, r1}
   24878:	ldr	r3, [sp, #44]	; 0x2c
   2487c:	stm	r3, {r0, r1}
   24880:	ldr	r3, [sp, #40]	; 0x28
   24884:	cmp	r4, r3
   24888:	beq	24650 <__assert_fail@plt+0x11f64>
   2488c:	mov	r0, r4
   24890:	bl	3633c <__assert_fail@plt+0x23c50>
   24894:	b	24650 <__assert_fail@plt+0x11f64>
   24898:	sub	r3, r3, #92	; 0x5c
   2489c:	clz	r3, r3
   248a0:	lsr	r3, r3, #5
   248a4:	add	r1, r9, r3
   248a8:	ldrb	r3, [r9, r3]
   248ac:	add	r9, r1, #1
   248b0:	strb	r3, [r2], #1
   248b4:	b	24668 <__assert_fail@plt+0x11f7c>
   248b8:	mov	r2, r3
   248bc:	add	r3, r2, #1
   248c0:	add	r0, r0, #1
   248c4:	ldrb	r2, [r3]
   248c8:	cmp	r2, #0
   248cc:	bne	245f8 <__assert_fail@plt+0x11f0c>
   248d0:	str	r2, [sp, #12]
   248d4:	ldr	r4, [sp, #40]	; 0x28
   248d8:	b	246a4 <__assert_fail@plt+0x11fb8>
   248dc:	add	r6, r6, #7733248	; 0x760000
   248e0:	add	r6, r6, #42752	; 0xa700
   248e4:	cmp	r6, r8
   248e8:	bne	247c4 <__assert_fail@plt+0x120d8>
   248ec:	b	24824 <__assert_fail@plt+0x12138>
   248f0:	add	r0, sp, #540	; 0x21c
   248f4:	ldr	r2, [sp, #552]	; 0x228
   248f8:	ldm	r0, {r0, ip, lr}
   248fc:	ldr	r1, [sp, #556]	; 0x22c
   24900:	orr	r3, r1, r0
   24904:	orr	r8, r3, ip
   24908:	ldr	r3, [sp, #560]	; 0x230
   2490c:	add	r3, lr, r3
   24910:	orr	r3, r3, r2
   24914:	orr	r3, r3, r8
   24918:	cmp	r3, #1
   2491c:	bgt	24880 <__assert_fail@plt+0x12194>
   24920:	add	r3, sp, #424	; 0x1a8
   24924:	ldrd	r2, [r3]
   24928:	cmp	r2, #0
   2492c:	sbcs	r6, r3, #0
   24930:	blt	2505c <__assert_fail@plt+0x12970>
   24934:	ldr	r5, [sp, #432]	; 0x1b0
   24938:	cmp	r5, #2
   2493c:	bne	2495c <__assert_fail@plt+0x12270>
   24940:	cmp	r2, #69	; 0x45
   24944:	mov	r6, #0
   24948:	sbcs	r5, r3, #0
   2494c:	movwge	r5, #1900	; 0x76c
   24950:	movlt	r5, #2000	; 0x7d0
   24954:	adds	r2, r2, r5
   24958:	adc	r3, r3, r6
   2495c:	ldr	r6, [pc, #2092]	; 25190 <__assert_fail@plt+0x12aa4>
   24960:	mov	r7, #0
   24964:	mov	r5, #0
   24968:	adds	sl, r2, r6
   2496c:	movw	r6, #1900	; 0x76c
   24970:	sbc	fp, r3, #0
   24974:	cmp	r3, r7
   24978:	cmpeq	r2, r6
   2497c:	bcs	25154 <__assert_fail@plt+0x12a68>
   24980:	cmp	sl, #0
   24984:	sbcs	r3, fp, #0
   24988:	blt	25160 <__assert_fail@plt+0x12a74>
   2498c:	mov	r5, #1
   24990:	b	25160 <__assert_fail@plt+0x12a74>
   24994:	subs	r0, r2, #1
   24998:	str	r0, [sp, #24]
   2499c:	sbc	r0, r3, #0
   249a0:	str	r0, [sp, #28]
   249a4:	ldrd	r6, [sp, #24]
   249a8:	cmp	r7, #0
   249ac:	cmpeq	r6, #10
   249b0:	bls	2514c <__assert_fail@plt+0x12a60>
   249b4:	cmp	r3, #0
   249b8:	cmpeq	r2, #12
   249bc:	streq	r1, [sp, #100]	; 0x64
   249c0:	beq	24a10 <__assert_fail@plt+0x12324>
   249c4:	mvn	r3, #0
   249c8:	str	r3, [sp, #100]	; 0x64
   249cc:	mov	r3, #0
   249d0:	str	r3, [sp, #8]
   249d4:	b	24880 <__assert_fail@plt+0x12194>
   249d8:	subs	r1, r2, #1
   249dc:	str	r1, [sp, #32]
   249e0:	sbc	r1, r3, #0
   249e4:	str	r1, [sp, #36]	; 0x24
   249e8:	ldrd	r0, [sp, #32]
   249ec:	cmp	r1, #0
   249f0:	cmpeq	r0, #10
   249f4:	addls	r2, r2, #12
   249f8:	bls	2514c <__assert_fail@plt+0x12a60>
   249fc:	cmp	r3, #0
   24a00:	cmpeq	r2, #12
   24a04:	moveq	r3, #12
   24a08:	streq	r3, [sp, #100]	; 0x64
   24a0c:	bne	249c4 <__assert_fail@plt+0x122d8>
   24a10:	ldr	r3, [sp, #464]	; 0x1d0
   24a14:	str	r3, [sp, #96]	; 0x60
   24a18:	ldr	r3, [sp, #472]	; 0x1d8
   24a1c:	str	r3, [sp, #92]	; 0x5c
   24a20:	cmp	r8, #0
   24a24:	ldr	sl, [sp, #96]	; 0x60
   24a28:	add	r1, sp, #92	; 0x5c
   24a2c:	mvnne	r3, #0
   24a30:	mov	r0, r4
   24a34:	ldr	r5, [sp, #100]	; 0x64
   24a38:	strne	r3, [sp, #124]	; 0x7c
   24a3c:	cmp	lr, #0
   24a40:	ldrne	r3, [sp, #404]	; 0x194
   24a44:	str	sl, [sp, #184]	; 0xb8
   24a48:	ldr	r9, [sp, #112]	; 0x70
   24a4c:	str	r5, [sp, #188]	; 0xbc
   24a50:	strne	r3, [sp, #124]	; 0x7c
   24a54:	ldr	r3, [sp, #92]	; 0x5c
   24a58:	str	r3, [sp, #24]
   24a5c:	str	r3, [sp, #180]	; 0xb4
   24a60:	ldr	r3, [sp, #16]
   24a64:	str	r9, [sp, #200]	; 0xc8
   24a68:	str	r3, [sp, #192]	; 0xc0
   24a6c:	ldr	r3, [sp]
   24a70:	str	r3, [sp, #196]	; 0xc4
   24a74:	ldr	r3, [sp, #124]	; 0x7c
   24a78:	str	r3, [sp, #32]
   24a7c:	str	r3, [sp, #212]	; 0xd4
   24a80:	mvn	r3, #0
   24a84:	str	r3, [sp, #116]	; 0x74
   24a88:	bl	364ec <__assert_fail@plt+0x23e00>
   24a8c:	mov	r8, r0
   24a90:	add	r1, sp, #92	; 0x5c
   24a94:	add	r0, sp, #180	; 0xb4
   24a98:	bl	22878 <__assert_fail@plt+0x1018c>
   24a9c:	cmp	r0, #0
   24aa0:	bne	24be8 <__assert_fail@plt+0x124fc>
   24aa4:	ldr	r3, [sp, #560]	; 0x230
   24aa8:	cmp	r3, #0
   24aac:	beq	24880 <__assert_fail@plt+0x12194>
   24ab0:	ldr	r8, [sp, #408]	; 0x198
   24ab4:	mov	fp, #3600	; 0xe10
   24ab8:	add	r7, sp, #60	; 0x3c
   24abc:	movw	r3, #22616	; 0x5858
   24ac0:	ldr	r1, [pc, #1740]	; 25194 <__assert_fail@plt+0x12aa8>
   24ac4:	strh	r3, [r7], #3
   24ac8:	mov	r3, #88	; 0x58
   24acc:	mov	r0, r7
   24ad0:	sdiv	r6, r8, fp
   24ad4:	strb	r3, [sp, #62]	; 0x3e
   24ad8:	cmp	r8, #0
   24adc:	movlt	r2, #45	; 0x2d
   24ae0:	movge	r2, #43	; 0x2b
   24ae4:	eor	r3, r6, r6, asr #31
   24ae8:	sub	r3, r3, r6, asr #31
   24aec:	mls	r6, fp, r6, r8
   24af0:	bl	12590 <sprintf@plt>
   24af4:	cmp	r6, #0
   24af8:	beq	24b74 <__assert_fail@plt+0x12488>
   24afc:	cmp	r6, #0
   24b00:	mov	r2, #60	; 0x3c
   24b04:	rsblt	r6, r6, #0
   24b08:	mov	ip, #58	; 0x3a
   24b0c:	add	r3, r7, r0
   24b10:	mov	fp, #600	; 0x258
   24b14:	udiv	r1, r6, r2
   24b18:	strb	ip, [r7, r0]
   24b1c:	mov	r0, #10
   24b20:	udiv	lr, r1, r0
   24b24:	mls	r2, r2, r1, r6
   24b28:	udiv	r6, r6, fp
   24b2c:	cmp	r2, #0
   24b30:	addeq	ip, r3, #3
   24b34:	mls	r1, r0, lr, r1
   24b38:	add	r1, r1, #48	; 0x30
   24b3c:	add	r6, r6, #48	; 0x30
   24b40:	strb	r6, [r3, #1]
   24b44:	strb	r1, [r3, #2]
   24b48:	beq	24b6c <__assert_fail@plt+0x12480>
   24b4c:	udiv	r1, r2, r0
   24b50:	strb	ip, [r3, #3]
   24b54:	mls	r2, r0, r1, r2
   24b58:	add	ip, r1, #48	; 0x30
   24b5c:	strb	ip, [r3, #4]
   24b60:	add	ip, r3, #6
   24b64:	add	r2, r2, #48	; 0x30
   24b68:	strb	r2, [r3, #5]
   24b6c:	mov	r3, #0
   24b70:	strb	r3, [ip]
   24b74:	add	r0, sp, #60	; 0x3c
   24b78:	bl	361b8 <__assert_fail@plt+0x23acc>
   24b7c:	subs	r6, r0, #0
   24b80:	streq	r6, [sp, #8]
   24b84:	beq	24880 <__assert_fail@plt+0x12194>
   24b88:	ldr	r3, [sp, #24]
   24b8c:	add	r1, sp, #92	; 0x5c
   24b90:	str	r3, [sp, #92]	; 0x5c
   24b94:	ldr	r3, [sp, #16]
   24b98:	str	sl, [sp, #96]	; 0x60
   24b9c:	str	r5, [sp, #100]	; 0x64
   24ba0:	str	r9, [sp, #112]	; 0x70
   24ba4:	str	r3, [sp, #104]	; 0x68
   24ba8:	ldr	r3, [sp]
   24bac:	str	r3, [sp, #108]	; 0x6c
   24bb0:	ldr	r3, [sp, #32]
   24bb4:	str	r3, [sp, #124]	; 0x7c
   24bb8:	mvn	r3, #0
   24bbc:	str	r3, [sp, #116]	; 0x74
   24bc0:	bl	364ec <__assert_fail@plt+0x23e00>
   24bc4:	mov	r8, r0
   24bc8:	add	r1, sp, #92	; 0x5c
   24bcc:	add	r0, sp, #180	; 0xb4
   24bd0:	bl	22878 <__assert_fail@plt+0x1018c>
   24bd4:	mov	r7, r0
   24bd8:	mov	r0, r6
   24bdc:	bl	3633c <__assert_fail@plt+0x23c50>
   24be0:	cmp	r7, #0
   24be4:	beq	24880 <__assert_fail@plt+0x12194>
   24be8:	ldr	r3, [sp, #544]	; 0x220
   24bec:	cmp	r3, #0
   24bf0:	beq	24cdc <__assert_fail@plt+0x125f0>
   24bf4:	ldr	r1, [sp, #540]	; 0x21c
   24bf8:	cmp	r1, #0
   24bfc:	bne	24cdc <__assert_fail@plt+0x125f0>
   24c00:	add	r3, sp, #392	; 0x188
   24c04:	ldrd	r2, [r3]
   24c08:	cmp	r2, #1
   24c0c:	sbcs	r0, r3, #0
   24c10:	blt	24c24 <__assert_fail@plt+0x12538>
   24c14:	ldr	r1, [sp, #116]	; 0x74
   24c18:	ldr	r0, [sp, #400]	; 0x190
   24c1c:	subs	r1, r1, r0
   24c20:	movne	r1, #1
   24c24:	subs	r6, r2, r1
   24c28:	mov	lr, #0
   24c2c:	sbc	r7, r3, r1, asr #31
   24c30:	mov	ip, #7
   24c34:	strd	r6, [sp]
   24c38:	ldrd	r2, [sp]
   24c3c:	cmp	r3, r2, asr #31
   24c40:	bne	2500c <__assert_fail@plt+0x12920>
   24c44:	smull	r2, r3, r2, ip
   24c48:	mov	r0, r2
   24c4c:	mov	ip, r3
   24c50:	cmp	lr, #0
   24c54:	bne	24880 <__assert_fail@plt+0x12194>
   24c58:	ldr	r3, [sp, #116]	; 0x74
   24c5c:	ldr	r2, [sp, #400]	; 0x190
   24c60:	sub	r2, r2, r3
   24c64:	mov	r3, #7
   24c68:	add	r2, r2, #7
   24c6c:	sdiv	r3, r2, r3
   24c70:	rsb	r3, r3, r3, lsl #3
   24c74:	sub	r2, r2, r3
   24c78:	asr	r3, r2, #31
   24c7c:	adds	r0, r2, r0
   24c80:	adcs	r1, r3, ip
   24c84:	bvs	24880 <__assert_fail@plt+0x12194>
   24c88:	ldr	r2, [sp, #104]	; 0x68
   24c8c:	asr	r3, r2, #31
   24c90:	adds	r6, r0, r2
   24c94:	adcs	r7, r1, r3
   24c98:	asr	r3, r6, #31
   24c9c:	str	r6, [sp, #104]	; 0x68
   24ca0:	movvs	r1, #1
   24ca4:	movvc	r1, #0
   24ca8:	cmp	r7, r3
   24cac:	cmpeq	r6, r6
   24cb0:	movne	r1, #1
   24cb4:	cmp	r1, #0
   24cb8:	bne	24880 <__assert_fail@plt+0x12194>
   24cbc:	mvn	r3, #0
   24cc0:	add	r1, sp, #92	; 0x5c
   24cc4:	mov	r0, r4
   24cc8:	str	r3, [sp, #124]	; 0x7c
   24ccc:	bl	364ec <__assert_fail@plt+0x23e00>
   24cd0:	cmn	r0, #1
   24cd4:	mov	r8, r0
   24cd8:	beq	24880 <__assert_fail@plt+0x12194>
   24cdc:	add	ip, sp, #496	; 0x1f0
   24ce0:	add	r3, sp, #480	; 0x1e0
   24ce4:	ldrd	r6, [ip]
   24ce8:	ldrd	r0, [r3]
   24cec:	add	r3, sp, #488	; 0x1e8
   24cf0:	ldrd	r2, [r3]
   24cf4:	strd	r6, [sp]
   24cf8:	ldr	r9, [sp]
   24cfc:	orr	lr, r0, r2
   24d00:	orr	ip, r1, r3
   24d04:	orr	r6, lr, r9
   24d08:	ldr	lr, [sp, #4]
   24d0c:	orr	r7, ip, lr
   24d10:	orrs	ip, r6, r7
   24d14:	beq	24df4 <__assert_fail@plt+0x12708>
   24d18:	ldr	r8, [sp, #112]	; 0x70
   24d1c:	asr	r9, r8, #31
   24d20:	adds	r6, r8, r0
   24d24:	adcs	r7, r9, r1
   24d28:	asr	r1, r6, #31
   24d2c:	movvs	ip, #1
   24d30:	movvc	ip, #0
   24d34:	cmp	r7, r1
   24d38:	cmpeq	r6, r6
   24d3c:	bne	24880 <__assert_fail@plt+0x12194>
   24d40:	cmp	ip, #0
   24d44:	bne	24880 <__assert_fail@plt+0x12194>
   24d48:	ldr	r8, [sp, #108]	; 0x6c
   24d4c:	asr	r9, r8, #31
   24d50:	adds	r0, r8, r2
   24d54:	adcs	r1, r9, r3
   24d58:	movvs	ip, #1
   24d5c:	movvc	ip, #0
   24d60:	strd	r0, [sp, #16]
   24d64:	ldr	r2, [sp, #16]
   24d68:	asr	r3, r2, #31
   24d6c:	cmp	r1, r3
   24d70:	cmpeq	r0, r2
   24d74:	bne	24880 <__assert_fail@plt+0x12194>
   24d78:	cmp	ip, #0
   24d7c:	bne	24880 <__assert_fail@plt+0x12194>
   24d80:	ldrd	r0, [sp]
   24d84:	ldr	r2, [sp, #104]	; 0x68
   24d88:	asr	r3, r2, #31
   24d8c:	adds	r8, r2, r0
   24d90:	adcs	r9, r3, r1
   24d94:	asr	r3, r8, #31
   24d98:	movvs	ip, #1
   24d9c:	movvc	ip, #0
   24da0:	cmp	r9, r3
   24da4:	cmpeq	r8, r8
   24da8:	bne	24880 <__assert_fail@plt+0x12194>
   24dac:	cmp	ip, #0
   24db0:	bne	24880 <__assert_fail@plt+0x12194>
   24db4:	ldr	r3, [sp, #16]
   24db8:	add	r1, sp, #92	; 0x5c
   24dbc:	mov	r0, r4
   24dc0:	str	sl, [sp, #96]	; 0x60
   24dc4:	str	r5, [sp, #100]	; 0x64
   24dc8:	str	r8, [sp, #104]	; 0x68
   24dcc:	str	r3, [sp, #108]	; 0x6c
   24dd0:	ldr	r3, [sp, #24]
   24dd4:	str	r6, [sp, #112]	; 0x70
   24dd8:	str	r3, [sp, #92]	; 0x5c
   24ddc:	ldr	r3, [sp, #32]
   24de0:	str	r3, [sp, #124]	; 0x7c
   24de4:	bl	364ec <__assert_fail@plt+0x23e00>
   24de8:	cmn	r0, #1
   24dec:	mov	r8, r0
   24df0:	beq	24880 <__assert_fail@plt+0x12194>
   24df4:	ldr	r3, [sp, #560]	; 0x230
   24df8:	cmp	r3, #0
   24dfc:	beq	24e34 <__assert_fail@plt+0x12748>
   24e00:	ldr	r2, [sp, #128]	; 0x80
   24e04:	ldr	r1, [sp, #408]	; 0x198
   24e08:	asr	r7, r2, #31
   24e0c:	subs	r2, r1, r2
   24e10:	rsc	r3, r7, r1, asr #31
   24e14:	subs	r6, r8, r2
   24e18:	asr	r1, r6, #31
   24e1c:	mov	r0, r6
   24e20:	rsc	r7, r3, r8, asr #31
   24e24:	cmp	r7, r1
   24e28:	cmpeq	r6, r6
   24e2c:	bne	24880 <__assert_fail@plt+0x12194>
   24e30:	mov	r8, r6
   24e34:	ldr	r2, [sp, #504]	; 0x1f8
   24e38:	mov	r5, #3600	; 0xe10
   24e3c:	mov	ip, #0
   24e40:	ldr	lr, [sp, #508]	; 0x1fc
   24e44:	cmp	lr, r2, asr #31
   24e48:	smulleq	r2, r3, r2, r5
   24e4c:	moveq	r5, r2
   24e50:	moveq	lr, r3
   24e54:	beq	24ea0 <__assert_fail@plt+0x127b4>
   24e58:	cmp	lr, #0
   24e5c:	umull	r2, r3, r2, r5
   24e60:	umull	sl, fp, r5, lr
   24e64:	bge	24e70 <__assert_fail@plt+0x12784>
   24e68:	subs	sl, sl, ip
   24e6c:	sbc	fp, fp, r5
   24e70:	adds	r0, sl, r3
   24e74:	mov	r5, #0
   24e78:	adc	r5, fp, r5
   24e7c:	cmp	r5, r0, asr #31
   24e80:	ldrne	r2, [sp, #504]	; 0x1f8
   24e84:	movne	r1, #3600	; 0xe10
   24e88:	moveq	r5, r2
   24e8c:	moveq	lr, r0
   24e90:	movne	ip, #1
   24e94:	umullne	r2, r3, r2, r1
   24e98:	mlane	lr, r1, lr, r3
   24e9c:	movne	r5, r2
   24ea0:	cmp	ip, #0
   24ea4:	mov	r3, lr
   24ea8:	bne	24880 <__assert_fail@plt+0x12194>
   24eac:	asr	r9, r8, #31
   24eb0:	adds	r6, r8, r5
   24eb4:	adcs	r7, r9, lr
   24eb8:	movvs	ip, #1
   24ebc:	movvc	ip, #0
   24ec0:	bvs	24880 <__assert_fail@plt+0x12194>
   24ec4:	ldr	r2, [sp, #512]	; 0x200
   24ec8:	mov	lr, #60	; 0x3c
   24ecc:	ldr	r5, [sp, #516]	; 0x204
   24ed0:	cmp	r5, r2, asr #31
   24ed4:	smulleq	r0, r1, r2, lr
   24ed8:	moveq	r2, r0
   24edc:	moveq	r3, r1
   24ee0:	beq	24f30 <__assert_fail@plt+0x12844>
   24ee4:	cmp	r5, #0
   24ee8:	umull	r2, r3, r2, lr
   24eec:	umull	sl, fp, lr, r5
   24ef0:	bge	24f00 <__assert_fail@plt+0x12814>
   24ef4:	subs	sl, sl, ip
   24ef8:	mov	r8, lr
   24efc:	sbc	fp, fp, lr
   24f00:	adds	r0, sl, r3
   24f04:	mov	lr, #0
   24f08:	adc	lr, fp, lr
   24f0c:	cmp	lr, r0, asr #31
   24f10:	ldrne	r2, [sp, #512]	; 0x200
   24f14:	movne	r0, #60	; 0x3c
   24f18:	moveq	r3, r0
   24f1c:	movne	ip, #1
   24f20:	ldrne	r1, [sp, #516]	; 0x204
   24f24:	umullne	r8, r9, r2, r0
   24f28:	mlane	r3, r0, r1, r9
   24f2c:	movne	r2, r8
   24f30:	cmp	ip, #0
   24f34:	bne	24880 <__assert_fail@plt+0x12194>
   24f38:	adds	r0, r6, r2
   24f3c:	adcs	r1, r7, r3
   24f40:	bvs	24880 <__assert_fail@plt+0x12194>
   24f44:	add	r3, sp, #520	; 0x208
   24f48:	ldrd	r2, [r3]
   24f4c:	adds	r8, r0, r2
   24f50:	adcs	r9, r1, r3
   24f54:	bvs	24880 <__assert_fail@plt+0x12194>
   24f58:	ldr	r3, [sp, #476]	; 0x1dc
   24f5c:	mov	fp, #0
   24f60:	ldr	r6, [sp, #528]	; 0x210
   24f64:	ldr	r5, [pc, #556]	; 25198 <__assert_fail@plt+0x12aac>
   24f68:	asr	r7, r6, #31
   24f6c:	adds	r0, r6, r3
   24f70:	mov	r6, r0
   24f74:	adc	r1, r7, r3, asr #31
   24f78:	add	r3, pc, #504	; 0x1f8
   24f7c:	ldrd	r2, [r3]
   24f80:	mov	r7, r1
   24f84:	bl	375dc <__assert_fail@plt+0x24ef0>
   24f88:	adds	r0, r2, r5
   24f8c:	mov	r2, r5
   24f90:	adc	r1, r3, fp
   24f94:	mov	r3, fp
   24f98:	bl	375dc <__assert_fail@plt+0x24ef0>
   24f9c:	mov	sl, r2
   24fa0:	mov	r1, r3
   24fa4:	subs	r0, r6, sl
   24fa8:	mov	r2, r5
   24fac:	mov	r3, fp
   24fb0:	sbc	r1, r7, r1
   24fb4:	bl	375dc <__assert_fail@plt+0x24ef0>
   24fb8:	asr	r1, r0, #31
   24fbc:	adds	r2, r8, r0
   24fc0:	adcs	r3, r9, r1
   24fc4:	asr	r1, r2, #31
   24fc8:	movvs	ip, #1
   24fcc:	movvc	ip, fp
   24fd0:	cmp	r3, r1
   24fd4:	cmpeq	r2, r2
   24fd8:	bne	24880 <__assert_fail@plt+0x12194>
   24fdc:	cmp	ip, fp
   24fe0:	bne	24880 <__assert_fail@plt+0x12194>
   24fe4:	ldr	r1, [sp, #44]	; 0x2c
   24fe8:	mov	r3, #1
   24fec:	str	r2, [r1]
   24ff0:	str	sl, [r1, #4]
   24ff4:	b	249d0 <__assert_fail@plt+0x122e4>
   24ff8:	str	r1, [sp, #92]	; 0x5c
   24ffc:	str	r1, [sp, #96]	; 0x60
   25000:	str	r1, [sp, #100]	; 0x64
   25004:	str	r1, [sp, #476]	; 0x1dc
   25008:	b	24a20 <__assert_fail@plt+0x12334>
   2500c:	ldr	r3, [sp]
   25010:	umull	r0, r1, r3, ip
   25014:	ldr	r3, [sp, #4]
   25018:	cmp	r3, #0
   2501c:	umull	r6, r7, ip, r3
   25020:	bge	2502c <__assert_fail@plt+0x12940>
   25024:	subs	r6, r6, lr
   25028:	sbc	r7, r7, ip
   2502c:	adds	ip, r6, r1
   25030:	mov	r8, #0
   25034:	adc	r8, r7, r8
   25038:	cmp	r8, ip, asr #31
   2503c:	beq	24c50 <__assert_fail@plt+0x12564>
   25040:	ldr	r3, [sp]
   25044:	mov	ip, #7
   25048:	mov	lr, #1
   2504c:	umull	r0, r1, r3, ip
   25050:	ldr	r3, [sp, #4]
   25054:	mla	ip, ip, r3, r1
   25058:	b	24c50 <__assert_fail@plt+0x12564>
   2505c:	ldr	sl, [pc, #300]	; 25190 <__assert_fail@plt+0x12aa4>
   25060:	mvn	fp, #0
   25064:	subs	r6, sl, r2
   25068:	sbcs	r7, fp, r3
   2506c:	asr	r3, r6, #31
   25070:	movvs	r5, #1
   25074:	str	r6, [sp, #112]	; 0x70
   25078:	cmp	r7, r3
   2507c:	cmpeq	r6, r6
   25080:	movne	r5, #1
   25084:	and	r5, r5, #1
   25088:	cmp	r5, #0
   2508c:	bne	24880 <__assert_fail@plt+0x12194>
   25090:	add	r3, sp, #440	; 0x1b8
   25094:	mvn	r6, #0
   25098:	ldrd	r2, [r3]
   2509c:	mvn	r7, #0
   250a0:	adds	sl, r2, r6
   250a4:	adcs	fp, r3, r7
   250a8:	movvs	r5, #1
   250ac:	movvc	r5, #0
   250b0:	strd	sl, [sp]
   250b4:	ldr	r2, [sp]
   250b8:	asr	r3, r2, #31
   250bc:	cmp	fp, r3
   250c0:	ldr	r3, [sp]
   250c4:	cmpeq	sl, r2
   250c8:	movne	r5, #1
   250cc:	cmp	r5, #0
   250d0:	str	r3, [sp, #108]	; 0x6c
   250d4:	bne	24880 <__assert_fail@plt+0x12194>
   250d8:	add	r3, sp, #448	; 0x1c0
   250dc:	ldrd	r2, [r3]
   250e0:	strd	r2, [sp, #16]
   250e4:	ldr	r2, [sp, #16]
   250e8:	ldrd	r6, [sp, #16]
   250ec:	ldr	r5, [sp, #16]
   250f0:	asr	r3, r2, #31
   250f4:	cmp	r7, r3
   250f8:	cmpeq	r6, r2
   250fc:	str	r5, [sp, #104]	; 0x68
   25100:	bne	24880 <__assert_fail@plt+0x12194>
   25104:	cmp	r1, #0
   25108:	bne	25124 <__assert_fail@plt+0x12a38>
   2510c:	orrs	r3, r0, ip
   25110:	ldrb	r3, [sp, #537]	; 0x219
   25114:	movne	r3, #0
   25118:	andeq	r3, r3, #1
   2511c:	cmp	r3, #0
   25120:	beq	24ff8 <__assert_fail@plt+0x1290c>
   25124:	ldr	r1, [sp, #412]	; 0x19c
   25128:	add	r3, sp, #456	; 0x1c8
   2512c:	ldrd	r2, [r3]
   25130:	cmp	r1, #0
   25134:	beq	24994 <__assert_fail@plt+0x122a8>
   25138:	cmp	r1, #1
   2513c:	beq	249d8 <__assert_fail@plt+0x122ec>
   25140:	cmp	r3, #0
   25144:	cmpeq	r2, #23
   25148:	bhi	249c4 <__assert_fail@plt+0x122d8>
   2514c:	str	r2, [sp, #100]	; 0x64
   25150:	b	24a10 <__assert_fail@plt+0x12324>
   25154:	cmp	sl, #0
   25158:	sbcs	r3, fp, #0
   2515c:	blt	2498c <__assert_fail@plt+0x122a0>
   25160:	asr	r3, sl, #31
   25164:	str	sl, [sp, #112]	; 0x70
   25168:	cmp	fp, r3
   2516c:	cmpeq	sl, sl
   25170:	movne	r5, #1
   25174:	b	25084 <__assert_fail@plt+0x12998>
   25178:	blcc	fe6d7980 <stdout@@GLIBC_2.4+0xfe689414>
   2517c:	andeq	r0, r0, r0
   25180:	andeq	ip, r3, r1, lsl #15
   25184:	ldrdeq	r8, [r3], -r2
   25188:	bicseq	r9, sl, r0, lsl #24
   2518c:	rsbseq	sl, r6, r0, lsl #14
   25190:			; <UNDEFINED> instruction: 0xfffff894
   25194:	andeq	ip, r3, r6, lsl #15
   25198:	blcc	fe6d79a0 <stdout@@GLIBC_2.4+0xfe689434>
   2519c:	push	{r4, r5, r6, r7, r8, lr}
   251a0:	mov	r5, r0
   251a4:	mov	r6, r1
   251a8:	mov	r7, r2
   251ac:	ldr	r0, [pc, #56]	; 251ec <__assert_fail@plt+0x12b00>
   251b0:	bl	122fc <getenv@plt>
   251b4:	bl	361b8 <__assert_fail@plt+0x23acc>
   251b8:	subs	r4, r0, #0
   251bc:	moveq	r5, r4
   251c0:	beq	251e4 <__assert_fail@plt+0x12af8>
   251c4:	mov	r0, r5
   251c8:	mov	r3, r4
   251cc:	mov	r2, r7
   251d0:	mov	r1, r6
   251d4:	bl	24570 <__assert_fail@plt+0x11e84>
   251d8:	mov	r5, r0
   251dc:	mov	r0, r4
   251e0:	bl	3633c <__assert_fail@plt+0x23c50>
   251e4:	mov	r0, r5
   251e8:	pop	{r4, r5, r6, r7, r8, pc}
   251ec:	andeq	ip, r3, sp, lsl #15
   251f0:	push	{r4, r5, r6, lr}
   251f4:	subs	r4, r0, #0
   251f8:	bne	25210 <__assert_fail@plt+0x12b24>
   251fc:	ldr	r3, [pc, #124]	; 25280 <__assert_fail@plt+0x12b94>
   25200:	ldr	r0, [pc, #124]	; 25284 <__assert_fail@plt+0x12b98>
   25204:	ldr	r1, [r3]
   25208:	bl	12680 <fputs@plt>
   2520c:	bl	12698 <abort@plt>
   25210:	mov	r1, #47	; 0x2f
   25214:	bl	12548 <strrchr@plt>
   25218:	subs	r6, r0, #0
   2521c:	beq	2526c <__assert_fail@plt+0x12b80>
   25220:	add	r5, r6, #1
   25224:	sub	r3, r5, r4
   25228:	cmp	r3, #6
   2522c:	ble	2526c <__assert_fail@plt+0x12b80>
   25230:	mov	r2, #7
   25234:	ldr	r1, [pc, #76]	; 25288 <__assert_fail@plt+0x12b9c>
   25238:	sub	r0, r6, #6
   2523c:	bl	1268c <strncmp@plt>
   25240:	cmp	r0, #0
   25244:	bne	2526c <__assert_fail@plt+0x12b80>
   25248:	mov	r2, #3
   2524c:	ldr	r1, [pc, #56]	; 2528c <__assert_fail@plt+0x12ba0>
   25250:	mov	r0, r5
   25254:	bl	1268c <strncmp@plt>
   25258:	cmp	r0, #0
   2525c:	ldreq	r3, [pc, #44]	; 25290 <__assert_fail@plt+0x12ba4>
   25260:	addeq	r4, r6, #4
   25264:	movne	r4, r5
   25268:	streq	r4, [r3]
   2526c:	ldr	r3, [pc, #32]	; 25294 <__assert_fail@plt+0x12ba8>
   25270:	str	r4, [r3]
   25274:	ldr	r3, [pc, #28]	; 25298 <__assert_fail@plt+0x12bac>
   25278:	str	r4, [r3]
   2527c:	pop	{r4, r5, r6, pc}
   25280:	andeq	lr, r4, r0, ror #10
   25284:	ldrdeq	ip, [r3], -r0
   25288:	andeq	ip, r3, r8, lsl #20
   2528c:	andeq	ip, r3, r0, lsl sl
   25290:	andeq	lr, r4, r0, asr r5
   25294:	andeq	lr, r4, ip, lsl sp
   25298:	andeq	lr, r4, r8, asr r5
   2529c:	push	{r4, lr}
   252a0:	mov	r2, #48	; 0x30
   252a4:	mov	r4, r1
   252a8:	mov	r1, #0
   252ac:	bl	12434 <memset@plt>
   252b0:	cmp	r4, #10
   252b4:	bne	252bc <__assert_fail@plt+0x12bd0>
   252b8:	bl	12698 <abort@plt>
   252bc:	str	r4, [r0]
   252c0:	pop	{r4, pc}
   252c4:	push	{r4, r5, r6, lr}
   252c8:	mov	r2, #5
   252cc:	mov	r6, r0
   252d0:	mov	r5, r1
   252d4:	mov	r1, r0
   252d8:	mov	r0, #0
   252dc:	bl	1217c <dcgettext@plt>
   252e0:	cmp	r6, r0
   252e4:	mov	r4, r0
   252e8:	bne	25358 <__assert_fail@plt+0x12c6c>
   252ec:	bl	36f80 <__assert_fail@plt+0x24894>
   252f0:	ldrb	r3, [r0]
   252f4:	bic	r3, r3, #32
   252f8:	cmp	r3, #85	; 0x55
   252fc:	bne	25360 <__assert_fail@plt+0x12c74>
   25300:	ldrb	r3, [r0, #1]
   25304:	bic	r3, r3, #32
   25308:	cmp	r3, #84	; 0x54
   2530c:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25310:	ldrb	r3, [r0, #2]
   25314:	bic	r3, r3, #32
   25318:	cmp	r3, #70	; 0x46
   2531c:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25320:	ldrb	r3, [r0, #3]
   25324:	cmp	r3, #45	; 0x2d
   25328:	bne	253d0 <__assert_fail@plt+0x12ce4>
   2532c:	ldrb	r3, [r0, #4]
   25330:	cmp	r3, #56	; 0x38
   25334:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25338:	ldrb	r3, [r0, #5]
   2533c:	cmp	r3, #0
   25340:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25344:	ldrb	r2, [r4]
   25348:	ldr	r3, [pc, #144]	; 253e0 <__assert_fail@plt+0x12cf4>
   2534c:	ldr	r4, [pc, #144]	; 253e4 <__assert_fail@plt+0x12cf8>
   25350:	cmp	r2, #96	; 0x60
   25354:	movne	r4, r3
   25358:	mov	r0, r4
   2535c:	pop	{r4, r5, r6, pc}
   25360:	cmp	r3, #71	; 0x47
   25364:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25368:	ldrb	r3, [r0, #1]
   2536c:	bic	r3, r3, #32
   25370:	cmp	r3, #66	; 0x42
   25374:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25378:	ldrb	r3, [r0, #2]
   2537c:	cmp	r3, #49	; 0x31
   25380:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25384:	ldrb	r3, [r0, #3]
   25388:	cmp	r3, #56	; 0x38
   2538c:	bne	253d0 <__assert_fail@plt+0x12ce4>
   25390:	ldrb	r3, [r0, #4]
   25394:	cmp	r3, #48	; 0x30
   25398:	bne	253d0 <__assert_fail@plt+0x12ce4>
   2539c:	ldrb	r3, [r0, #5]
   253a0:	cmp	r3, #51	; 0x33
   253a4:	bne	253d0 <__assert_fail@plt+0x12ce4>
   253a8:	ldrb	r3, [r0, #6]
   253ac:	cmp	r3, #48	; 0x30
   253b0:	bne	253d0 <__assert_fail@plt+0x12ce4>
   253b4:	ldrb	r3, [r0, #7]
   253b8:	cmp	r3, #0
   253bc:	bne	253d0 <__assert_fail@plt+0x12ce4>
   253c0:	ldrb	r2, [r4]
   253c4:	ldr	r3, [pc, #28]	; 253e8 <__assert_fail@plt+0x12cfc>
   253c8:	ldr	r4, [pc, #28]	; 253ec <__assert_fail@plt+0x12d00>
   253cc:	b	25350 <__assert_fail@plt+0x12c64>
   253d0:	ldr	r4, [pc, #24]	; 253f0 <__assert_fail@plt+0x12d04>
   253d4:	cmp	r5, #9
   253d8:	ldr	r3, [pc, #20]	; 253f4 <__assert_fail@plt+0x12d08>
   253dc:	b	25354 <__assert_fail@plt+0x12c68>
   253e0:	andeq	ip, r3, r8, ror #20
   253e4:	andeq	ip, r3, r3, ror sl
   253e8:	andeq	ip, r3, ip, ror #20
   253ec:	andeq	ip, r3, pc, ror #20
   253f0:	andeq	ip, r3, r4, lsl #15
   253f4:	strdeq	r9, [r3], -fp
   253f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253fc:	sub	sp, sp, #108	; 0x6c
   25400:	mov	r8, r0
   25404:	mov	r5, r1
   25408:	mov	r6, #0
   2540c:	str	r3, [sp, #40]	; 0x28
   25410:	str	r2, [sp, #48]	; 0x30
   25414:	ldr	sl, [sp, #144]	; 0x90
   25418:	bl	12260 <__ctype_get_mb_cur_max@plt>
   2541c:	ldr	r3, [sp, #148]	; 0x94
   25420:	str	r6, [sp, #24]
   25424:	str	r6, [sp, #32]
   25428:	str	r6, [sp, #44]	; 0x2c
   2542c:	str	r6, [sp, #52]	; 0x34
   25430:	ubfx	r7, r3, #1, #1
   25434:	mov	r3, #1
   25438:	str	r6, [sp, #60]	; 0x3c
   2543c:	str	r3, [sp, #72]	; 0x48
   25440:	str	r0, [sp, #76]	; 0x4c
   25444:	cmp	sl, #10
   25448:	ldrls	pc, [pc, sl, lsl #2]
   2544c:	b	25690 <__assert_fail@plt+0x12fa4>
   25450:	andeq	r5, r2, ip, ror r4
   25454:	andeq	r5, r2, r8, lsr #13
   25458:	andeq	r5, r2, ip, lsr #12
   2545c:	andeq	r5, r2, r4, asr #12
   25460:	andeq	r5, r2, r4, lsl r6
   25464:	andeq	r5, r2, ip, ror #10
   25468:	andeq	r5, r2, ip, asr #10
   2546c:	muleq	r2, r4, r6
   25470:	muleq	r2, ip, r5
   25474:	muleq	r2, ip, r5
   25478:	muleq	r2, ip, r5
   2547c:	mov	r4, sl
   25480:	mov	r7, #0
   25484:	mov	r9, r5
   25488:	mov	r3, #0
   2548c:	str	r6, [sp, #68]	; 0x44
   25490:	str	r3, [sp, #28]
   25494:	ldr	r3, [sp, #40]	; 0x28
   25498:	cmn	r3, #1
   2549c:	bne	2603c <__assert_fail@plt+0x13950>
   254a0:	ldr	r2, [sp, #28]
   254a4:	ldr	r3, [sp, #48]	; 0x30
   254a8:	ldrb	r3, [r3, r2]
   254ac:	adds	r3, r3, #0
   254b0:	movne	r3, #1
   254b4:	str	r3, [sp, #36]	; 0x24
   254b8:	ldr	r3, [sp, #36]	; 0x24
   254bc:	cmp	r3, #0
   254c0:	bne	256cc <__assert_fail@plt+0x12fe0>
   254c4:	sub	r3, sl, #2
   254c8:	cmp	r4, #0
   254cc:	clz	r3, r3
   254d0:	movne	r2, #0
   254d4:	lsr	r3, r3, #5
   254d8:	andeq	r2, r3, r7
   254dc:	cmp	r2, #0
   254e0:	bne	25890 <__assert_fail@plt+0x131a4>
   254e4:	eor	r7, r7, #1
   254e8:	ands	r3, r3, r7
   254ec:	beq	260b4 <__assert_fail@plt+0x139c8>
   254f0:	ldr	r2, [sp, #68]	; 0x44
   254f4:	cmp	r2, #0
   254f8:	beq	2607c <__assert_fail@plt+0x13990>
   254fc:	ldr	r3, [sp, #72]	; 0x48
   25500:	cmp	r3, #0
   25504:	beq	26050 <__assert_fail@plt+0x13964>
   25508:	ldr	r2, [sp, #48]	; 0x30
   2550c:	ldr	r3, [sp, #160]	; 0xa0
   25510:	ldr	r1, [sp, #60]	; 0x3c
   25514:	str	r3, [sp, #16]
   25518:	ldr	r3, [sp, #156]	; 0x9c
   2551c:	str	r3, [sp, #12]
   25520:	ldr	r3, [sp, #152]	; 0x98
   25524:	str	r3, [sp, #8]
   25528:	ldr	r3, [sp, #148]	; 0x94
   2552c:	str	r3, [sp, #4]
   25530:	mov	r3, #5
   25534:	str	r3, [sp]
   25538:	ldr	r3, [sp, #40]	; 0x28
   2553c:	mov	r0, r8
   25540:	bl	253f8 <__assert_fail@plt+0x12d0c>
   25544:	mov	r4, r0
   25548:	b	260a8 <__assert_fail@plt+0x139bc>
   2554c:	ldr	r3, [pc, #2948]	; 260d8 <__assert_fail@plt+0x139ec>
   25550:	mov	r7, #1
   25554:	mov	r4, #0
   25558:	mov	sl, #5
   2555c:	str	r7, [sp, #24]
   25560:	str	r7, [sp, #32]
   25564:	str	r3, [sp, #44]	; 0x2c
   25568:	b	25484 <__assert_fail@plt+0x12d98>
   2556c:	cmp	r7, #0
   25570:	bne	256b4 <__assert_fail@plt+0x12fc8>
   25574:	cmp	r5, #0
   25578:	mov	r4, #1
   2557c:	movne	r3, #34	; 0x22
   25580:	strbne	r3, [r8]
   25584:	mov	r3, #1
   25588:	str	r3, [sp, #24]
   2558c:	str	r3, [sp, #32]
   25590:	ldr	r3, [pc, #2880]	; 260d8 <__assert_fail@plt+0x139ec>
   25594:	str	r3, [sp, #44]	; 0x2c
   25598:	b	25484 <__assert_fail@plt+0x12d98>
   2559c:	cmp	sl, #10
   255a0:	beq	255c4 <__assert_fail@plt+0x12ed8>
   255a4:	mov	r1, sl
   255a8:	ldr	r0, [pc, #2860]	; 260dc <__assert_fail@plt+0x139f0>
   255ac:	bl	252c4 <__assert_fail@plt+0x12bd8>
   255b0:	mov	r1, sl
   255b4:	str	r0, [sp, #156]	; 0x9c
   255b8:	ldr	r0, [pc, #2848]	; 260e0 <__assert_fail@plt+0x139f4>
   255bc:	bl	252c4 <__assert_fail@plt+0x12bd8>
   255c0:	str	r0, [sp, #160]	; 0xa0
   255c4:	cmp	r7, #0
   255c8:	moveq	r4, r7
   255cc:	beq	255e4 <__assert_fail@plt+0x12ef8>
   255d0:	mov	r4, #0
   255d4:	b	255f4 <__assert_fail@plt+0x12f08>
   255d8:	cmp	r5, r4
   255dc:	strbhi	r3, [r8, r4]
   255e0:	add	r4, r4, #1
   255e4:	ldr	r3, [sp, #156]	; 0x9c
   255e8:	ldrb	r3, [r3, r4]
   255ec:	cmp	r3, #0
   255f0:	bne	255d8 <__assert_fail@plt+0x12eec>
   255f4:	ldr	r0, [sp, #160]	; 0xa0
   255f8:	bl	123bc <strlen@plt>
   255fc:	ldr	r3, [sp, #160]	; 0xa0
   25600:	str	r0, [sp, #32]
   25604:	str	r3, [sp, #44]	; 0x2c
   25608:	mov	r3, #1
   2560c:	str	r3, [sp, #24]
   25610:	b	25484 <__assert_fail@plt+0x12d98>
   25614:	mov	r3, #1
   25618:	cmp	r7, #0
   2561c:	streq	r3, [sp, #24]
   25620:	beq	25664 <__assert_fail@plt+0x12f78>
   25624:	str	r3, [sp, #32]
   25628:	b	25650 <__assert_fail@plt+0x12f64>
   2562c:	cmp	r7, #0
   25630:	beq	25664 <__assert_fail@plt+0x12f78>
   25634:	mov	r3, #1
   25638:	str	r3, [sp, #32]
   2563c:	ldr	r3, [pc, #2716]	; 260e0 <__assert_fail@plt+0x139f4>
   25640:	b	256c4 <__assert_fail@plt+0x12fd8>
   25644:	mov	r7, #1
   25648:	str	r7, [sp, #24]
   2564c:	str	r7, [sp, #32]
   25650:	ldr	r3, [pc, #2696]	; 260e0 <__assert_fail@plt+0x139f4>
   25654:	mov	r4, #0
   25658:	str	r3, [sp, #44]	; 0x2c
   2565c:	mov	sl, #2
   25660:	b	25484 <__assert_fail@plt+0x12d98>
   25664:	cmp	r5, #0
   25668:	movne	r3, #39	; 0x27
   2566c:	movne	r7, #0
   25670:	strbne	r3, [r8]
   25674:	moveq	r7, r5
   25678:	mov	r3, #1
   2567c:	mov	r4, #1
   25680:	str	r3, [sp, #32]
   25684:	ldr	r3, [pc, #2644]	; 260e0 <__assert_fail@plt+0x139f4>
   25688:	str	r3, [sp, #44]	; 0x2c
   2568c:	b	2565c <__assert_fail@plt+0x12f70>
   25690:	bl	12698 <abort@plt>
   25694:	mov	r3, #1
   25698:	mov	r7, #0
   2569c:	str	r3, [sp, #24]
   256a0:	mov	r4, #0
   256a4:	b	25484 <__assert_fail@plt+0x12d98>
   256a8:	mov	r7, #1
   256ac:	str	sl, [sp, #32]
   256b0:	b	25650 <__assert_fail@plt+0x12f64>
   256b4:	mov	r3, #1
   256b8:	str	r7, [sp, #24]
   256bc:	str	r3, [sp, #32]
   256c0:	ldr	r3, [pc, #2576]	; 260d8 <__assert_fail@plt+0x139ec>
   256c4:	str	r3, [sp, #44]	; 0x2c
   256c8:	b	256a0 <__assert_fail@plt+0x12fb4>
   256cc:	ldr	fp, [sp, #24]
   256d0:	ldr	r3, [sp, #32]
   256d4:	cmp	sl, #2
   256d8:	moveq	fp, #0
   256dc:	andne	fp, fp, #1
   256e0:	adds	r5, r3, #0
   256e4:	movne	r5, #1
   256e8:	ands	r3, fp, r5
   256ec:	str	r3, [sp, #64]	; 0x40
   256f0:	beq	257c0 <__assert_fail@plt+0x130d4>
   256f4:	ldr	r3, [sp, #28]
   256f8:	ldr	r2, [sp, #32]
   256fc:	cmp	r2, #1
   25700:	add	r6, r3, r2
   25704:	mov	r3, r2
   25708:	ldr	r2, [sp, #40]	; 0x28
   2570c:	movls	r3, #0
   25710:	movhi	r3, #1
   25714:	cmn	r2, #1
   25718:	movne	r3, #0
   2571c:	cmp	r3, #0
   25720:	beq	25730 <__assert_fail@plt+0x13044>
   25724:	ldr	r0, [sp, #48]	; 0x30
   25728:	bl	123bc <strlen@plt>
   2572c:	str	r0, [sp, #40]	; 0x28
   25730:	ldr	r3, [sp, #40]	; 0x28
   25734:	cmp	r6, r3
   25738:	bhi	257b8 <__assert_fail@plt+0x130cc>
   2573c:	ldr	r0, [sp, #28]
   25740:	ldr	r2, [sp, #32]
   25744:	ldr	r3, [sp, #48]	; 0x30
   25748:	ldr	r1, [sp, #44]	; 0x2c
   2574c:	add	r0, r3, r0
   25750:	bl	12158 <memcmp@plt>
   25754:	cmp	r0, #0
   25758:	bne	257b8 <__assert_fail@plt+0x130cc>
   2575c:	cmp	r7, #0
   25760:	beq	257c0 <__assert_fail@plt+0x130d4>
   25764:	str	r7, [sp, #24]
   25768:	ldr	r3, [sp, #24]
   2576c:	mov	r1, r9
   25770:	ldr	r2, [sp, #48]	; 0x30
   25774:	cmp	sl, #2
   25778:	movne	r3, #0
   2577c:	andeq	r3, r3, #1
   25780:	cmp	r3, #0
   25784:	ldr	r3, [sp, #160]	; 0xa0
   25788:	movne	sl, #4
   2578c:	str	sl, [sp]
   25790:	str	r3, [sp, #16]
   25794:	ldr	r3, [sp, #156]	; 0x9c
   25798:	str	r3, [sp, #12]
   2579c:	mov	r3, #0
   257a0:	str	r3, [sp, #8]
   257a4:	ldr	r3, [sp, #148]	; 0x94
   257a8:	bic	r3, r3, #2
   257ac:	str	r3, [sp, #4]
   257b0:	ldr	r3, [sp, #40]	; 0x28
   257b4:	b	2553c <__assert_fail@plt+0x12e50>
   257b8:	mov	r3, #0
   257bc:	str	r3, [sp, #64]	; 0x40
   257c0:	ldr	r2, [sp, #28]
   257c4:	ldr	r3, [sp, #48]	; 0x30
   257c8:	add	r3, r3, r2
   257cc:	str	r3, [sp, #80]	; 0x50
   257d0:	ldr	r3, [sp, #48]	; 0x30
   257d4:	ldrb	r6, [r3, r2]
   257d8:	cmp	r6, #58	; 0x3a
   257dc:	bhi	25940 <__assert_fail@plt+0x13254>
   257e0:	cmp	r6, #43	; 0x2b
   257e4:	bcs	25b00 <__assert_fail@plt+0x13414>
   257e8:	cmp	r6, #32
   257ec:	beq	25b54 <__assert_fail@plt+0x13468>
   257f0:	bhi	25898 <__assert_fail@plt+0x131ac>
   257f4:	cmp	r6, #9
   257f8:	beq	25cfc <__assert_fail@plt+0x13610>
   257fc:	bhi	2585c <__assert_fail@plt+0x13170>
   25800:	cmp	r6, #7
   25804:	beq	25d0c <__assert_fail@plt+0x13620>
   25808:	bhi	25d28 <__assert_fail@plt+0x1363c>
   2580c:	cmp	r6, #0
   25810:	beq	25b70 <__assert_fail@plt+0x13484>
   25814:	ldr	r3, [sp, #76]	; 0x4c
   25818:	cmp	r3, #1
   2581c:	bne	25d74 <__assert_fail@plt+0x13688>
   25820:	bl	12374 <__ctype_b_loc@plt>
   25824:	ldr	r2, [r0]
   25828:	sxth	r3, r6
   2582c:	lsl	r3, r3, #1
   25830:	ldrh	r5, [r2, r3]
   25834:	ldr	r3, [sp, #76]	; 0x4c
   25838:	ubfx	r5, r5, #14, #1
   2583c:	str	r3, [sp, #56]	; 0x38
   25840:	ldr	r3, [sp, #24]
   25844:	eor	fp, r5, #1
   25848:	and	fp, fp, r3
   2584c:	ands	fp, fp, #255	; 0xff
   25850:	beq	25a30 <__assert_fail@plt+0x13344>
   25854:	mov	r5, #0
   25858:	b	25e20 <__assert_fail@plt+0x13734>
   2585c:	cmp	r6, #11
   25860:	beq	25d30 <__assert_fail@plt+0x13644>
   25864:	bcc	25d04 <__assert_fail@plt+0x13618>
   25868:	cmp	r6, #12
   2586c:	beq	25d38 <__assert_fail@plt+0x1364c>
   25870:	cmp	r6, #13
   25874:	moveq	r3, #114	; 0x72
   25878:	bne	25814 <__assert_fail@plt+0x13128>
   2587c:	cmp	sl, #2
   25880:	movne	r2, #0
   25884:	andeq	r2, r7, #1
   25888:	cmp	r2, #0
   2588c:	beq	25d10 <__assert_fail@plt+0x13624>
   25890:	mov	sl, #2
   25894:	b	25768 <__assert_fail@plt+0x1307c>
   25898:	cmp	r6, #37	; 0x25
   2589c:	beq	25b00 <__assert_fail@plt+0x13414>
   258a0:	bhi	258b4 <__assert_fail@plt+0x131c8>
   258a4:	cmp	r6, #35	; 0x23
   258a8:	beq	25b48 <__assert_fail@plt+0x1345c>
   258ac:	mov	r5, #0
   258b0:	b	25b58 <__assert_fail@plt+0x1346c>
   258b4:	cmp	r6, #39	; 0x27
   258b8:	bne	258ac <__assert_fail@plt+0x131c0>
   258bc:	cmp	sl, #2
   258c0:	ldrne	r5, [sp, #36]	; 0x24
   258c4:	movne	r3, r5
   258c8:	strne	r3, [sp, #68]	; 0x44
   258cc:	bne	25c4c <__assert_fail@plt+0x13560>
   258d0:	cmp	r7, #0
   258d4:	bne	25768 <__assert_fail@plt+0x1307c>
   258d8:	ldr	r3, [sp, #60]	; 0x3c
   258dc:	cmp	r9, #0
   258e0:	clz	r3, r3
   258e4:	lsr	r3, r3, #5
   258e8:	moveq	r3, #0
   258ec:	cmp	r3, #0
   258f0:	strne	r9, [sp, #60]	; 0x3c
   258f4:	movne	r9, #0
   258f8:	bne	25908 <__assert_fail@plt+0x1321c>
   258fc:	cmp	r9, r4
   25900:	movhi	r3, #39	; 0x27
   25904:	strbhi	r3, [r8, r4]
   25908:	add	r3, r4, #1
   2590c:	ldr	r5, [sp, #36]	; 0x24
   25910:	mov	fp, #0
   25914:	cmp	r3, r9
   25918:	movcc	r2, #92	; 0x5c
   2591c:	str	fp, [sp, #52]	; 0x34
   25920:	strbcc	r2, [r8, r3]
   25924:	add	r3, r4, #2
   25928:	add	r4, r4, #3
   2592c:	cmp	r3, r9
   25930:	str	r5, [sp, #68]	; 0x44
   25934:	movcc	r2, #39	; 0x27
   25938:	strbcc	r2, [r8, r3]
   2593c:	b	25a30 <__assert_fail@plt+0x13344>
   25940:	cmp	r6, #94	; 0x5e
   25944:	beq	258ac <__assert_fail@plt+0x131c0>
   25948:	bhi	25b08 <__assert_fail@plt+0x1341c>
   2594c:	cmp	r6, #90	; 0x5a
   25950:	bhi	25af4 <__assert_fail@plt+0x13408>
   25954:	cmp	r6, #65	; 0x41
   25958:	bcs	25b00 <__assert_fail@plt+0x13414>
   2595c:	cmp	r6, #62	; 0x3e
   25960:	bls	258ac <__assert_fail@plt+0x131c0>
   25964:	cmp	r6, #63	; 0x3f
   25968:	bne	25814 <__assert_fail@plt+0x13128>
   2596c:	cmp	sl, #2
   25970:	beq	25c54 <__assert_fail@plt+0x13568>
   25974:	cmp	sl, #5
   25978:	movne	fp, #0
   2597c:	bne	26024 <__assert_fail@plt+0x13938>
   25980:	ldr	r3, [sp, #148]	; 0x94
   25984:	tst	r3, #4
   25988:	beq	25c5c <__assert_fail@plt+0x13570>
   2598c:	ldr	r3, [sp, #28]
   25990:	add	r2, r3, #2
   25994:	ldr	r3, [sp, #40]	; 0x28
   25998:	cmp	r2, r3
   2599c:	bcs	25c5c <__assert_fail@plt+0x13570>
   259a0:	ldr	r1, [sp, #28]
   259a4:	ldr	r3, [sp, #48]	; 0x30
   259a8:	add	r3, r3, r1
   259ac:	ldrb	r1, [r3, #1]
   259b0:	cmp	r1, #63	; 0x3f
   259b4:	bne	25c5c <__assert_fail@plt+0x13570>
   259b8:	ldr	r3, [sp, #48]	; 0x30
   259bc:	ldrb	r6, [r3, r2]
   259c0:	sub	r3, r6, #33	; 0x21
   259c4:	uxtb	r3, r3
   259c8:	cmp	r3, #29
   259cc:	bhi	2602c <__assert_fail@plt+0x13940>
   259d0:	ldr	r0, [pc, #1804]	; 260e4 <__assert_fail@plt+0x139f8>
   259d4:	mov	r5, #1
   259d8:	ands	r5, r0, r5, lsl r3
   259dc:	beq	26034 <__assert_fail@plt+0x13948>
   259e0:	cmp	r7, #0
   259e4:	bne	25768 <__assert_fail@plt+0x1307c>
   259e8:	cmp	r9, r4
   259ec:	add	r3, r4, #1
   259f0:	str	r2, [sp, #28]
   259f4:	mov	r5, #0
   259f8:	strbhi	r1, [r8, r4]
   259fc:	cmp	r9, r3
   25a00:	mov	fp, r5
   25a04:	movhi	r1, #34	; 0x22
   25a08:	strbhi	r1, [r8, r3]
   25a0c:	add	r3, r4, #2
   25a10:	cmp	r9, r3
   25a14:	movhi	r1, #34	; 0x22
   25a18:	strbhi	r1, [r8, r3]
   25a1c:	add	r3, r4, #3
   25a20:	add	r4, r4, #4
   25a24:	cmp	r9, r3
   25a28:	movhi	r1, #63	; 0x3f
   25a2c:	strbhi	r1, [r8, r3]
   25a30:	ldr	r3, [sp, #24]
   25a34:	eor	r3, r3, #1
   25a38:	cmp	sl, #2
   25a3c:	orreq	r3, r3, #1
   25a40:	eor	r3, r3, #1
   25a44:	orr	r3, r7, r3
   25a48:	tst	r3, #255	; 0xff
   25a4c:	beq	25a78 <__assert_fail@plt+0x1338c>
   25a50:	ldr	r3, [sp, #152]	; 0x98
   25a54:	cmp	r3, #0
   25a58:	beq	25a78 <__assert_fail@plt+0x1338c>
   25a5c:	ldr	r1, [sp, #152]	; 0x98
   25a60:	ubfx	r2, r6, #5, #8
   25a64:	and	r3, r6, #31
   25a68:	ldr	r2, [r1, r2, lsl #2]
   25a6c:	lsr	r3, r2, r3
   25a70:	tst	r3, #1
   25a74:	bne	25a84 <__assert_fail@plt+0x13398>
   25a78:	ldr	r3, [sp, #64]	; 0x40
   25a7c:	cmp	r3, #0
   25a80:	beq	25c7c <__assert_fail@plt+0x13590>
   25a84:	sub	r3, sl, #2
   25a88:	cmp	r7, #0
   25a8c:	clz	r3, r3
   25a90:	lsr	r3, r3, #5
   25a94:	bne	25768 <__assert_fail@plt+0x1307c>
   25a98:	ldr	r2, [sp, #52]	; 0x34
   25a9c:	eor	r2, r2, #1
   25aa0:	ands	r3, r3, r2
   25aa4:	beq	25adc <__assert_fail@plt+0x133f0>
   25aa8:	cmp	r9, r4
   25aac:	str	r3, [sp, #52]	; 0x34
   25ab0:	movhi	r2, #39	; 0x27
   25ab4:	strbhi	r2, [r8, r4]
   25ab8:	add	r2, r4, #1
   25abc:	cmp	r9, r2
   25ac0:	movhi	r1, #36	; 0x24
   25ac4:	strbhi	r1, [r8, r2]
   25ac8:	add	r2, r4, #2
   25acc:	add	r4, r4, #3
   25ad0:	cmp	r9, r2
   25ad4:	movhi	r1, #39	; 0x27
   25ad8:	strbhi	r1, [r8, r2]
   25adc:	cmp	r9, r4
   25ae0:	ldr	fp, [sp, #36]	; 0x24
   25ae4:	movhi	r3, #92	; 0x5c
   25ae8:	strbhi	r3, [r8, r4]
   25aec:	add	r4, r4, #1
   25af0:	b	25c7c <__assert_fail@plt+0x13590>
   25af4:	cmp	r6, #92	; 0x5c
   25af8:	beq	25c64 <__assert_fail@plt+0x13578>
   25afc:	bls	258ac <__assert_fail@plt+0x131c0>
   25b00:	ldr	r5, [sp, #36]	; 0x24
   25b04:	b	25c4c <__assert_fail@plt+0x13560>
   25b08:	cmp	r6, #122	; 0x7a
   25b0c:	bhi	25b2c <__assert_fail@plt+0x13440>
   25b10:	cmp	r6, #97	; 0x61
   25b14:	bcs	25b00 <__assert_fail@plt+0x13414>
   25b18:	cmp	r6, #95	; 0x5f
   25b1c:	beq	25b00 <__assert_fail@plt+0x13414>
   25b20:	cmp	r6, #96	; 0x60
   25b24:	bne	25814 <__assert_fail@plt+0x13128>
   25b28:	b	258ac <__assert_fail@plt+0x131c0>
   25b2c:	cmp	r6, #124	; 0x7c
   25b30:	beq	258ac <__assert_fail@plt+0x131c0>
   25b34:	bcc	25d40 <__assert_fail@plt+0x13654>
   25b38:	cmp	r6, #125	; 0x7d
   25b3c:	beq	25d40 <__assert_fail@plt+0x13654>
   25b40:	cmp	r6, #126	; 0x7e
   25b44:	bne	25814 <__assert_fail@plt+0x13128>
   25b48:	ldr	r3, [sp, #28]
   25b4c:	cmp	r3, #0
   25b50:	bne	25c5c <__assert_fail@plt+0x13570>
   25b54:	ldr	r5, [sp, #36]	; 0x24
   25b58:	cmp	sl, #2
   25b5c:	movne	fp, #0
   25b60:	andeq	fp, r7, #1
   25b64:	cmp	fp, #0
   25b68:	beq	25a30 <__assert_fail@plt+0x13344>
   25b6c:	b	25890 <__assert_fail@plt+0x131a4>
   25b70:	ldr	r3, [sp, #24]
   25b74:	cmp	r3, #0
   25b78:	beq	25c40 <__assert_fail@plt+0x13554>
   25b7c:	sub	r2, sl, #2
   25b80:	cmp	r7, #0
   25b84:	clz	r2, r2
   25b88:	lsr	r2, r2, #5
   25b8c:	bne	25764 <__assert_fail@plt+0x13078>
   25b90:	ldr	r3, [sp, #52]	; 0x34
   25b94:	eor	r3, r3, #1
   25b98:	ands	r2, r2, r3
   25b9c:	moveq	r3, r4
   25ba0:	beq	25bd8 <__assert_fail@plt+0x134ec>
   25ba4:	cmp	r9, r4
   25ba8:	str	r2, [sp, #52]	; 0x34
   25bac:	movhi	r3, #39	; 0x27
   25bb0:	strbhi	r3, [r8, r4]
   25bb4:	add	r3, r4, #1
   25bb8:	cmp	r9, r3
   25bbc:	movhi	r1, #36	; 0x24
   25bc0:	strbhi	r1, [r8, r3]
   25bc4:	add	r3, r4, #2
   25bc8:	cmp	r9, r3
   25bcc:	movhi	r1, #39	; 0x27
   25bd0:	strbhi	r1, [r8, r3]
   25bd4:	add	r3, r4, #3
   25bd8:	cmp	r9, r3
   25bdc:	add	r4, r3, #1
   25be0:	movhi	r2, #92	; 0x5c
   25be4:	strbhi	r2, [r8, r3]
   25be8:	cmp	fp, #0
   25bec:	beq	26014 <__assert_fail@plt+0x13928>
   25bf0:	ldr	r2, [sp, #28]
   25bf4:	ldr	r1, [sp, #40]	; 0x28
   25bf8:	add	r2, r2, #1
   25bfc:	cmp	r2, r1
   25c00:	bcs	25c38 <__assert_fail@plt+0x1354c>
   25c04:	ldr	r1, [sp, #48]	; 0x30
   25c08:	mov	r6, #48	; 0x30
   25c0c:	ldrb	r2, [r1, r2]
   25c10:	sub	r2, r2, #48	; 0x30
   25c14:	cmp	r2, #9
   25c18:	bhi	26024 <__assert_fail@plt+0x13938>
   25c1c:	cmp	r9, r4
   25c20:	add	r2, r3, #2
   25c24:	strbhi	r6, [r8, r4]
   25c28:	cmp	r9, r2
   25c2c:	add	r4, r3, #3
   25c30:	movhi	r1, #48	; 0x30
   25c34:	strbhi	r1, [r8, r2]
   25c38:	mov	r5, #0
   25c3c:	b	2601c <__assert_fail@plt+0x13930>
   25c40:	ldr	r3, [sp, #148]	; 0x94
   25c44:	ands	r5, r3, #1
   25c48:	bne	25cd0 <__assert_fail@plt+0x135e4>
   25c4c:	mov	fp, #0
   25c50:	b	25a30 <__assert_fail@plt+0x13344>
   25c54:	cmp	r7, #0
   25c58:	bne	25768 <__assert_fail@plt+0x1307c>
   25c5c:	mov	r5, #0
   25c60:	b	25c4c <__assert_fail@plt+0x13560>
   25c64:	cmp	sl, #2
   25c68:	bne	25cdc <__assert_fail@plt+0x135f0>
   25c6c:	cmp	r7, #0
   25c70:	bne	25768 <__assert_fail@plt+0x1307c>
   25c74:	mov	r5, r7
   25c78:	mov	fp, r7
   25c7c:	ldr	r3, [sp, #52]	; 0x34
   25c80:	eor	fp, fp, #1
   25c84:	tst	r3, fp
   25c88:	beq	25cb4 <__assert_fail@plt+0x135c8>
   25c8c:	cmp	r9, r4
   25c90:	movhi	r3, #39	; 0x27
   25c94:	strbhi	r3, [r8, r4]
   25c98:	add	r3, r4, #1
   25c9c:	add	r4, r4, #2
   25ca0:	cmp	r9, r3
   25ca4:	movhi	r2, #39	; 0x27
   25ca8:	strbhi	r2, [r8, r3]
   25cac:	mov	r3, #0
   25cb0:	str	r3, [sp, #52]	; 0x34
   25cb4:	cmp	r9, r4
   25cb8:	ldr	r3, [sp, #72]	; 0x48
   25cbc:	strbhi	r6, [r8, r4]
   25cc0:	cmp	r5, #0
   25cc4:	add	r4, r4, #1
   25cc8:	moveq	r3, #0
   25ccc:	str	r3, [sp, #72]	; 0x48
   25cd0:	ldr	r3, [sp, #28]
   25cd4:	add	r3, r3, #1
   25cd8:	b	25490 <__assert_fail@plt+0x12da4>
   25cdc:	ldr	r3, [sp, #24]
   25ce0:	and	r3, r3, r7
   25ce4:	tst	r5, r3
   25ce8:	moveq	r3, r6
   25cec:	beq	2587c <__assert_fail@plt+0x13190>
   25cf0:	mov	fp, #0
   25cf4:	mov	r5, fp
   25cf8:	b	25c7c <__assert_fail@plt+0x13590>
   25cfc:	mov	r3, #116	; 0x74
   25d00:	b	2587c <__assert_fail@plt+0x13190>
   25d04:	mov	r3, #110	; 0x6e
   25d08:	b	2587c <__assert_fail@plt+0x13190>
   25d0c:	mov	r3, #97	; 0x61
   25d10:	ldr	r2, [sp, #24]
   25d14:	cmp	r2, #0
   25d18:	beq	25c5c <__assert_fail@plt+0x13570>
   25d1c:	mov	r6, r3
   25d20:	mov	r5, #0
   25d24:	b	25a84 <__assert_fail@plt+0x13398>
   25d28:	mov	r3, #98	; 0x62
   25d2c:	b	25d10 <__assert_fail@plt+0x13624>
   25d30:	mov	r3, #118	; 0x76
   25d34:	b	25d10 <__assert_fail@plt+0x13624>
   25d38:	mov	r3, #102	; 0x66
   25d3c:	b	25d10 <__assert_fail@plt+0x13624>
   25d40:	ldr	r3, [sp, #40]	; 0x28
   25d44:	cmn	r3, #1
   25d48:	bne	25d68 <__assert_fail@plt+0x1367c>
   25d4c:	ldr	r3, [sp, #48]	; 0x30
   25d50:	ldrb	r3, [r3, #1]
   25d54:	adds	r3, r3, #0
   25d58:	movne	r3, #1
   25d5c:	cmp	r3, #0
   25d60:	bne	25c5c <__assert_fail@plt+0x13570>
   25d64:	b	25b48 <__assert_fail@plt+0x1345c>
   25d68:	ldr	r3, [sp, #40]	; 0x28
   25d6c:	subs	r3, r3, #1
   25d70:	b	25d58 <__assert_fail@plt+0x1366c>
   25d74:	mov	r3, #0
   25d78:	mov	r2, #0
   25d7c:	strd	r2, [sp, #96]	; 0x60
   25d80:	ldr	r3, [sp, #40]	; 0x28
   25d84:	cmn	r3, #1
   25d88:	bne	25d98 <__assert_fail@plt+0x136ac>
   25d8c:	ldr	r0, [sp, #48]	; 0x30
   25d90:	bl	123bc <strlen@plt>
   25d94:	str	r0, [sp, #40]	; 0x28
   25d98:	ldr	r5, [sp, #36]	; 0x24
   25d9c:	mov	r3, #0
   25da0:	str	r3, [sp, #56]	; 0x38
   25da4:	ldr	r3, [sp, #28]
   25da8:	add	r0, sp, #92	; 0x5c
   25dac:	ldr	r1, [sp, #40]	; 0x28
   25db0:	ldr	r2, [sp, #56]	; 0x38
   25db4:	add	r2, r3, r2
   25db8:	ldr	r3, [sp, #48]	; 0x30
   25dbc:	add	fp, r3, r2
   25dc0:	sub	r2, r1, r2
   25dc4:	add	r3, sp, #96	; 0x60
   25dc8:	mov	r1, fp
   25dcc:	bl	2a36c <__assert_fail@plt+0x17c80>
   25dd0:	subs	r2, r0, #0
   25dd4:	beq	25e14 <__assert_fail@plt+0x13728>
   25dd8:	cmn	r2, #1
   25ddc:	beq	25fe8 <__assert_fail@plt+0x138fc>
   25de0:	cmn	r2, #2
   25de4:	bne	25f58 <__assert_fail@plt+0x1386c>
   25de8:	ldr	r3, [sp, #28]
   25dec:	ldr	r2, [sp, #56]	; 0x38
   25df0:	add	r3, r3, r2
   25df4:	ldr	r2, [sp, #40]	; 0x28
   25df8:	cmp	r2, r3
   25dfc:	bls	25fe8 <__assert_fail@plt+0x138fc>
   25e00:	ldr	r2, [sp, #56]	; 0x38
   25e04:	ldr	r3, [sp, #80]	; 0x50
   25e08:	ldrb	r5, [r3, r2]
   25e0c:	cmp	r5, #0
   25e10:	bne	25f48 <__assert_fail@plt+0x1385c>
   25e14:	ldr	r3, [sp, #56]	; 0x38
   25e18:	cmp	r3, #1
   25e1c:	bls	25840 <__assert_fail@plt+0x13154>
   25e20:	ldr	r3, [sp, #28]
   25e24:	mov	fp, #0
   25e28:	mov	ip, #92	; 0x5c
   25e2c:	ldr	r2, [sp, #56]	; 0x38
   25e30:	add	r3, r3, r2
   25e34:	ldr	r2, [sp, #24]
   25e38:	str	r3, [sp, #36]	; 0x24
   25e3c:	eor	r3, r5, #1
   25e40:	and	r3, r3, r2
   25e44:	mov	r2, #39	; 0x27
   25e48:	uxtb	r3, r3
   25e4c:	cmp	r3, #0
   25e50:	beq	25ff0 <__assert_fail@plt+0x13904>
   25e54:	sub	r0, sl, #2
   25e58:	cmp	r7, #0
   25e5c:	clz	r0, r0
   25e60:	lsr	r0, r0, #5
   25e64:	bne	25764 <__assert_fail@plt+0x13078>
   25e68:	ldr	r1, [sp, #52]	; 0x34
   25e6c:	eor	r1, r1, #1
   25e70:	ands	r1, r0, r1
   25e74:	beq	25ea4 <__assert_fail@plt+0x137b8>
   25e78:	cmp	r9, r4
   25e7c:	add	r0, r4, #1
   25e80:	str	r1, [sp, #52]	; 0x34
   25e84:	strbhi	r2, [r8, r4]
   25e88:	cmp	r9, r0
   25e8c:	movhi	lr, #36	; 0x24
   25e90:	strbhi	lr, [r8, r0]
   25e94:	add	r0, r4, #2
   25e98:	add	r4, r4, #3
   25e9c:	cmp	r9, r0
   25ea0:	strbhi	r2, [r8, r0]
   25ea4:	cmp	r9, r4
   25ea8:	add	r0, r4, #1
   25eac:	mov	fp, r3
   25eb0:	strbhi	ip, [r8, r4]
   25eb4:	cmp	r9, r0
   25eb8:	lsrhi	r1, r6, #6
   25ebc:	addhi	r1, r1, #48	; 0x30
   25ec0:	strbhi	r1, [r8, r0]
   25ec4:	add	r0, r4, #2
   25ec8:	add	r4, r4, #3
   25ecc:	cmp	r9, r0
   25ed0:	ubfxhi	r1, r6, #3, #3
   25ed4:	and	r6, r6, #7
   25ed8:	add	r6, r6, #48	; 0x30
   25edc:	addhi	r1, r1, #48	; 0x30
   25ee0:	strbhi	r1, [r8, r0]
   25ee4:	eor	r0, fp, #1
   25ee8:	ldr	r1, [sp, #28]
   25eec:	ldr	lr, [sp, #52]	; 0x34
   25ef0:	add	r1, r1, #1
   25ef4:	and	r0, r0, lr
   25ef8:	ldr	lr, [sp, #36]	; 0x24
   25efc:	cmp	r1, lr
   25f00:	bcs	25c7c <__assert_fail@plt+0x13590>
   25f04:	cmp	r0, #0
   25f08:	beq	25f2c <__assert_fail@plt+0x13840>
   25f0c:	cmp	r9, r4
   25f10:	add	r0, r4, #1
   25f14:	strbhi	r2, [r8, r4]
   25f18:	cmp	r9, r0
   25f1c:	add	r4, r4, #2
   25f20:	strbhi	r2, [r8, r0]
   25f24:	mov	r0, #0
   25f28:	str	r0, [sp, #52]	; 0x34
   25f2c:	ldr	r0, [sp, #48]	; 0x30
   25f30:	cmp	r9, r4
   25f34:	str	r1, [sp, #28]
   25f38:	strbhi	r6, [r8, r4]
   25f3c:	add	r4, r4, #1
   25f40:	ldrb	r6, [r0, r1]
   25f44:	b	25e4c <__assert_fail@plt+0x13760>
   25f48:	ldr	r3, [sp, #56]	; 0x38
   25f4c:	add	r3, r3, #1
   25f50:	str	r3, [sp, #56]	; 0x38
   25f54:	b	25de8 <__assert_fail@plt+0x136fc>
   25f58:	cmp	sl, #2
   25f5c:	movne	r3, #0
   25f60:	andeq	r3, r7, #1
   25f64:	cmp	r3, #0
   25f68:	movne	r1, #1
   25f6c:	bne	25fc8 <__assert_fail@plt+0x138dc>
   25f70:	ldr	r0, [sp, #92]	; 0x5c
   25f74:	str	r2, [sp, #84]	; 0x54
   25f78:	bl	12200 <iswprint@plt>
   25f7c:	ldr	r3, [sp, #56]	; 0x38
   25f80:	cmp	r0, #0
   25f84:	add	r0, sp, #96	; 0x60
   25f88:	moveq	r5, #0
   25f8c:	ldr	r2, [sp, #84]	; 0x54
   25f90:	add	r3, r3, r2
   25f94:	str	r3, [sp, #56]	; 0x38
   25f98:	bl	12134 <mbsinit@plt>
   25f9c:	cmp	r0, #0
   25fa0:	beq	25da4 <__assert_fail@plt+0x136b8>
   25fa4:	b	25e14 <__assert_fail@plt+0x13728>
   25fa8:	ldrb	r3, [fp, #1]!
   25fac:	cmp	r3, #94	; 0x5e
   25fb0:	beq	25890 <__assert_fail@plt+0x131a4>
   25fb4:	bhi	25fd4 <__assert_fail@plt+0x138e8>
   25fb8:	sub	r3, r3, #91	; 0x5b
   25fbc:	cmp	r3, #1
   25fc0:	bls	25890 <__assert_fail@plt+0x131a4>
   25fc4:	add	r1, r1, #1
   25fc8:	cmp	r1, r2
   25fcc:	bne	25fa8 <__assert_fail@plt+0x138bc>
   25fd0:	b	25f70 <__assert_fail@plt+0x13884>
   25fd4:	cmp	r3, #96	; 0x60
   25fd8:	beq	25890 <__assert_fail@plt+0x131a4>
   25fdc:	cmp	r3, #124	; 0x7c
   25fe0:	bne	25fc4 <__assert_fail@plt+0x138d8>
   25fe4:	b	25890 <__assert_fail@plt+0x131a4>
   25fe8:	mov	r5, #0
   25fec:	b	25e14 <__assert_fail@plt+0x13728>
   25ff0:	ldr	r1, [sp, #64]	; 0x40
   25ff4:	cmp	r1, #0
   25ff8:	beq	25ee4 <__assert_fail@plt+0x137f8>
   25ffc:	cmp	r9, r4
   26000:	mov	r1, #0
   26004:	strbhi	ip, [r8, r4]
   26008:	add	r4, r4, #1
   2600c:	str	r1, [sp, #64]	; 0x40
   26010:	b	25ee4 <__assert_fail@plt+0x137f8>
   26014:	mov	r5, fp
   26018:	ldr	fp, [sp, #24]
   2601c:	mov	r6, #48	; 0x30
   26020:	b	25a30 <__assert_fail@plt+0x13344>
   26024:	mov	r5, #0
   26028:	b	25a30 <__assert_fail@plt+0x13344>
   2602c:	mov	r6, r1
   26030:	b	25c5c <__assert_fail@plt+0x13570>
   26034:	mov	r6, r1
   26038:	b	25c4c <__assert_fail@plt+0x13560>
   2603c:	ldr	r2, [sp, #28]
   26040:	ldr	r3, [sp, #40]	; 0x28
   26044:	subs	r3, r3, r2
   26048:	movne	r3, #1
   2604c:	b	254b4 <__assert_fail@plt+0x12dc8>
   26050:	ldr	r3, [sp, #60]	; 0x3c
   26054:	mov	sl, #2
   26058:	ldr	r7, [sp, #72]	; 0x48
   2605c:	adds	r6, r3, #0
   26060:	mov	r5, r3
   26064:	movne	r6, #1
   26068:	cmp	r9, #0
   2606c:	movne	r6, #0
   26070:	cmp	r6, #0
   26074:	bne	25444 <__assert_fail@plt+0x12d58>
   26078:	ldr	r3, [sp, #68]	; 0x44
   2607c:	ldr	r2, [sp, #44]	; 0x2c
   26080:	cmp	r2, #0
   26084:	moveq	r3, #0
   26088:	andne	r3, r3, #1
   2608c:	cmp	r3, #0
   26090:	movne	r3, r2
   26094:	subne	r3, r3, #1
   26098:	bne	260c8 <__assert_fail@plt+0x139dc>
   2609c:	cmp	r9, r4
   260a0:	movhi	r3, #0
   260a4:	strbhi	r3, [r8, r4]
   260a8:	mov	r0, r4
   260ac:	add	sp, sp, #108	; 0x6c
   260b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260b4:	mov	r3, r7
   260b8:	b	2607c <__assert_fail@plt+0x13990>
   260bc:	cmp	r9, r4
   260c0:	strbhi	r2, [r8, r4]
   260c4:	add	r4, r4, #1
   260c8:	ldrb	r2, [r3, #1]!
   260cc:	cmp	r2, #0
   260d0:	bne	260bc <__assert_fail@plt+0x139d0>
   260d4:	b	2609c <__assert_fail@plt+0x139b0>
   260d8:	andeq	ip, r3, r4, lsl #15
   260dc:	andeq	ip, r3, r7, ror sl
   260e0:	strdeq	r9, [r3], -fp
   260e4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   260e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260ec:	sub	sp, sp, #52	; 0x34
   260f0:	mov	r6, r0
   260f4:	mov	r5, r3
   260f8:	mov	r8, r1
   260fc:	mov	r9, r2
   26100:	bl	12404 <__errno_location@plt>
   26104:	ldr	r3, [r0]
   26108:	cmn	r6, #-2147483647	; 0x80000001
   2610c:	str	r0, [sp, #24]
   26110:	ldr	r7, [pc, #368]	; 26288 <__assert_fail@plt+0x13b9c>
   26114:	str	r3, [sp, #32]
   26118:	movne	r3, #0
   2611c:	moveq	r3, #1
   26120:	orrs	r3, r3, r6, lsr #31
   26124:	ldr	r4, [r7]
   26128:	beq	26130 <__assert_fail@plt+0x13a44>
   2612c:	bl	12698 <abort@plt>
   26130:	ldr	r2, [r7, #4]
   26134:	cmp	r2, r6
   26138:	bgt	261a8 <__assert_fail@plt+0x13abc>
   2613c:	add	sl, r7, #8
   26140:	mov	r3, #8
   26144:	cmp	r4, sl
   26148:	add	r1, sp, #44	; 0x2c
   2614c:	str	r2, [sp, #44]	; 0x2c
   26150:	sub	r2, r6, r2
   26154:	movne	r0, r4
   26158:	moveq	r0, #0
   2615c:	add	r2, r2, #1
   26160:	str	r3, [sp]
   26164:	mvn	r3, #-2147483648	; 0x80000000
   26168:	bl	27518 <__assert_fail@plt+0x14e2c>
   2616c:	cmp	r4, sl
   26170:	mov	fp, r0
   26174:	str	r0, [r7]
   26178:	ldmeq	r4, {r0, r1}
   2617c:	mov	r4, fp
   26180:	ldr	r2, [sp, #44]	; 0x2c
   26184:	stmeq	fp, {r0, r1}
   26188:	mov	r1, #0
   2618c:	ldr	r0, [r7, #4]
   26190:	sub	r2, r2, r0
   26194:	add	r0, fp, r0, lsl #3
   26198:	lsl	r2, r2, #3
   2619c:	bl	12434 <memset@plt>
   261a0:	ldr	r3, [sp, #44]	; 0x2c
   261a4:	str	r3, [r7, #4]
   261a8:	ldr	r3, [r5, #4]
   261ac:	add	sl, r4, r6, lsl #3
   261b0:	mov	r2, r8
   261b4:	ldr	fp, [r4, r6, lsl #3]
   261b8:	ldr	r7, [sl, #4]
   261bc:	orr	r3, r3, #1
   261c0:	str	r3, [sp, #28]
   261c4:	add	r3, r5, #8
   261c8:	mov	r1, fp
   261cc:	str	r3, [sp, #36]	; 0x24
   261d0:	mov	r0, r7
   261d4:	ldr	r3, [r5, #44]	; 0x2c
   261d8:	str	r3, [sp, #16]
   261dc:	ldr	r3, [r5, #40]	; 0x28
   261e0:	str	r3, [sp, #12]
   261e4:	add	r3, r5, #8
   261e8:	str	r3, [sp, #8]
   261ec:	ldr	r3, [sp, #28]
   261f0:	str	r3, [sp, #4]
   261f4:	ldr	r3, [r5]
   261f8:	str	r3, [sp]
   261fc:	mov	r3, r9
   26200:	bl	253f8 <__assert_fail@plt+0x12d0c>
   26204:	cmp	fp, r0
   26208:	bhi	26270 <__assert_fail@plt+0x13b84>
   2620c:	ldr	r3, [pc, #120]	; 2628c <__assert_fail@plt+0x13ba0>
   26210:	add	fp, r0, #1
   26214:	str	fp, [r4, r6, lsl #3]
   26218:	cmp	r7, r3
   2621c:	beq	26228 <__assert_fail@plt+0x13b3c>
   26220:	mov	r0, r7
   26224:	bl	284c4 <__assert_fail@plt+0x15dd8>
   26228:	mov	r0, fp
   2622c:	bl	27408 <__assert_fail@plt+0x14d1c>
   26230:	ldr	r3, [r5, #44]	; 0x2c
   26234:	mov	r2, r8
   26238:	mov	r1, fp
   2623c:	str	r0, [sl, #4]
   26240:	mov	r7, r0
   26244:	str	r3, [sp, #16]
   26248:	ldr	r3, [r5, #40]	; 0x28
   2624c:	str	r3, [sp, #12]
   26250:	add	r3, r5, #8
   26254:	str	r3, [sp, #8]
   26258:	ldr	r3, [sp, #28]
   2625c:	str	r3, [sp, #4]
   26260:	ldr	r3, [r5]
   26264:	str	r3, [sp]
   26268:	mov	r3, r9
   2626c:	bl	253f8 <__assert_fail@plt+0x12d0c>
   26270:	ldr	r3, [sp, #24]
   26274:	mov	r0, r7
   26278:	ldr	r2, [sp, #32]
   2627c:	str	r2, [r3]
   26280:	add	sp, sp, #52	; 0x34
   26284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26288:	andeq	lr, r4, r8, lsl #10
   2628c:	andeq	lr, r4, r0, lsr #26
   26290:	push	{r4, r5, r6, lr}
   26294:	mov	r5, r0
   26298:	bl	12404 <__errno_location@plt>
   2629c:	mov	r4, r0
   262a0:	cmp	r5, #0
   262a4:	ldr	r0, [pc, #20]	; 262c0 <__assert_fail@plt+0x13bd4>
   262a8:	mov	r1, #48	; 0x30
   262ac:	movne	r0, r5
   262b0:	ldr	r6, [r4]
   262b4:	bl	27608 <__assert_fail@plt+0x14f1c>
   262b8:	str	r6, [r4]
   262bc:	pop	{r4, r5, r6, pc}
   262c0:	andeq	lr, r4, r0, lsr #28
   262c4:	ldr	r3, [pc, #12]	; 262d8 <__assert_fail@plt+0x13bec>
   262c8:	cmp	r0, #0
   262cc:	moveq	r0, r3
   262d0:	ldr	r0, [r0]
   262d4:	bx	lr
   262d8:	andeq	lr, r4, r0, lsr #28
   262dc:	ldr	r3, [pc, #12]	; 262f0 <__assert_fail@plt+0x13c04>
   262e0:	cmp	r0, #0
   262e4:	moveq	r0, r3
   262e8:	str	r1, [r0]
   262ec:	bx	lr
   262f0:	andeq	lr, r4, r0, lsr #28
   262f4:	ldr	r3, [pc, #52]	; 26330 <__assert_fail@plt+0x13c44>
   262f8:	cmp	r0, #0
   262fc:	push	{lr}		; (str lr, [sp, #-4]!)
   26300:	lsr	lr, r1, #5
   26304:	and	r1, r1, #31
   26308:	moveq	r0, r3
   2630c:	add	r3, r0, #8
   26310:	ldr	ip, [r3, lr, lsl #2]
   26314:	lsr	r0, ip, r1
   26318:	eor	r2, r2, r0
   2631c:	and	r0, r0, #1
   26320:	and	r2, r2, #1
   26324:	eor	r1, ip, r2, lsl r1
   26328:	str	r1, [r3, lr, lsl #2]
   2632c:	pop	{pc}		; (ldr pc, [sp], #4)
   26330:	andeq	lr, r4, r0, lsr #28
   26334:	ldr	r3, [pc, #16]	; 2634c <__assert_fail@plt+0x13c60>
   26338:	cmp	r0, #0
   2633c:	movne	r3, r0
   26340:	ldr	r0, [r3, #4]
   26344:	str	r1, [r3, #4]
   26348:	bx	lr
   2634c:	andeq	lr, r4, r0, lsr #28
   26350:	ldr	r3, [pc, #44]	; 26384 <__assert_fail@plt+0x13c98>
   26354:	cmp	r0, #0
   26358:	moveq	r0, r3
   2635c:	mov	r3, #10
   26360:	cmp	r2, #0
   26364:	cmpne	r1, #0
   26368:	str	r3, [r0]
   2636c:	bne	26378 <__assert_fail@plt+0x13c8c>
   26370:	push	{r4, lr}
   26374:	bl	12698 <abort@plt>
   26378:	str	r1, [r0, #40]	; 0x28
   2637c:	str	r2, [r0, #44]	; 0x2c
   26380:	bx	lr
   26384:	andeq	lr, r4, r0, lsr #28
   26388:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2638c:	sub	sp, sp, #24
   26390:	mov	sl, r3
   26394:	mov	r7, r0
   26398:	mov	r8, r1
   2639c:	mov	r9, r2
   263a0:	ldr	r4, [sp, #56]	; 0x38
   263a4:	ldr	r3, [pc, #88]	; 26404 <__assert_fail@plt+0x13d18>
   263a8:	cmp	r4, #0
   263ac:	moveq	r4, r3
   263b0:	bl	12404 <__errno_location@plt>
   263b4:	ldr	r3, [r4, #44]	; 0x2c
   263b8:	mov	r5, r0
   263bc:	mov	r2, r9
   263c0:	mov	r1, r8
   263c4:	mov	r0, r7
   263c8:	ldr	r6, [r5]
   263cc:	str	r3, [sp, #16]
   263d0:	ldr	r3, [r4, #40]	; 0x28
   263d4:	str	r3, [sp, #12]
   263d8:	add	r3, r4, #8
   263dc:	str	r3, [sp, #8]
   263e0:	ldr	r3, [r4, #4]
   263e4:	str	r3, [sp, #4]
   263e8:	ldr	r3, [r4]
   263ec:	str	r3, [sp]
   263f0:	mov	r3, sl
   263f4:	bl	253f8 <__assert_fail@plt+0x12d0c>
   263f8:	str	r6, [r5]
   263fc:	add	sp, sp, #24
   26400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26404:	andeq	lr, r4, r0, lsr #28
   26408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2640c:	cmp	r3, #0
   26410:	sub	sp, sp, #44	; 0x2c
   26414:	mov	r6, r2
   26418:	mov	sl, r1
   2641c:	mov	r9, r0
   26420:	ldr	r4, [pc, #176]	; 264d8 <__assert_fail@plt+0x13dec>
   26424:	movne	r4, r3
   26428:	bl	12404 <__errno_location@plt>
   2642c:	ldr	r3, [r0]
   26430:	mov	r1, #0
   26434:	mov	r2, r9
   26438:	mov	r8, r0
   2643c:	mov	r0, r1
   26440:	ldr	r5, [r4, #4]
   26444:	add	fp, r4, #8
   26448:	str	r3, [sp, #28]
   2644c:	ldr	r3, [r4, #44]	; 0x2c
   26450:	cmp	r6, #0
   26454:	orreq	r5, r5, #1
   26458:	str	r3, [sp, #16]
   2645c:	ldr	r3, [r4, #40]	; 0x28
   26460:	stmib	sp, {r5, fp}
   26464:	str	r3, [sp, #12]
   26468:	ldr	r3, [r4]
   2646c:	str	r3, [sp]
   26470:	mov	r3, sl
   26474:	bl	253f8 <__assert_fail@plt+0x12d0c>
   26478:	add	r1, r0, #1
   2647c:	mov	r7, r0
   26480:	mov	r0, r1
   26484:	str	r1, [sp, #36]	; 0x24
   26488:	bl	27408 <__assert_fail@plt+0x14d1c>
   2648c:	ldr	r3, [r4, #44]	; 0x2c
   26490:	mov	r2, r9
   26494:	ldr	r1, [sp, #36]	; 0x24
   26498:	str	r3, [sp, #16]
   2649c:	ldr	r3, [r4, #40]	; 0x28
   264a0:	stmib	sp, {r5, fp}
   264a4:	str	r0, [sp, #32]
   264a8:	str	r3, [sp, #12]
   264ac:	ldr	r3, [r4]
   264b0:	str	r3, [sp]
   264b4:	mov	r3, sl
   264b8:	bl	253f8 <__assert_fail@plt+0x12d0c>
   264bc:	ldr	r3, [sp, #28]
   264c0:	cmp	r6, #0
   264c4:	ldr	r0, [sp, #32]
   264c8:	str	r3, [r8]
   264cc:	strne	r7, [r6]
   264d0:	add	sp, sp, #44	; 0x2c
   264d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264d8:	andeq	lr, r4, r0, lsr #28
   264dc:	mov	r3, r2
   264e0:	mov	r2, #0
   264e4:	b	26408 <__assert_fail@plt+0x13d1c>
   264e8:	push	{r4, r5, r6, r7, r8, lr}
   264ec:	mov	r6, #1
   264f0:	ldr	r4, [pc, #100]	; 2655c <__assert_fail@plt+0x13e70>
   264f4:	ldr	r5, [r4]
   264f8:	add	r7, r5, #4
   264fc:	ldr	r3, [r4, #4]
   26500:	cmp	r3, r6
   26504:	bgt	2654c <__assert_fail@plt+0x13e60>
   26508:	ldr	r6, [pc, #80]	; 26560 <__assert_fail@plt+0x13e74>
   2650c:	ldr	r0, [r5, #4]
   26510:	cmp	r0, r6
   26514:	beq	26528 <__assert_fail@plt+0x13e3c>
   26518:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2651c:	mov	r3, #256	; 0x100
   26520:	str	r3, [r4, #8]
   26524:	str	r6, [r4, #12]
   26528:	ldr	r6, [pc, #52]	; 26564 <__assert_fail@plt+0x13e78>
   2652c:	cmp	r5, r6
   26530:	beq	26540 <__assert_fail@plt+0x13e54>
   26534:	mov	r0, r5
   26538:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2653c:	str	r6, [r4]
   26540:	mov	r3, #1
   26544:	str	r3, [r4, #4]
   26548:	pop	{r4, r5, r6, r7, r8, pc}
   2654c:	ldr	r0, [r7, r6, lsl #3]
   26550:	add	r6, r6, #1
   26554:	bl	284c4 <__assert_fail@plt+0x15dd8>
   26558:	b	264fc <__assert_fail@plt+0x13e10>
   2655c:	andeq	lr, r4, r8, lsl #10
   26560:	andeq	lr, r4, r0, lsr #26
   26564:	andeq	lr, r4, r0, lsl r5
   26568:	ldr	r3, [pc, #4]	; 26574 <__assert_fail@plt+0x13e88>
   2656c:	mvn	r2, #0
   26570:	b	260e8 <__assert_fail@plt+0x139fc>
   26574:	andeq	lr, r4, r0, lsr #28
   26578:	ldr	r3, [pc]	; 26580 <__assert_fail@plt+0x13e94>
   2657c:	b	260e8 <__assert_fail@plt+0x139fc>
   26580:	andeq	lr, r4, r0, lsr #28
   26584:	mov	r1, r0
   26588:	mov	r0, #0
   2658c:	b	26568 <__assert_fail@plt+0x13e7c>
   26590:	mov	r2, r1
   26594:	mov	r1, r0
   26598:	mov	r0, #0
   2659c:	b	26578 <__assert_fail@plt+0x13e8c>
   265a0:	push	{r4, r5, lr}
   265a4:	sub	sp, sp, #52	; 0x34
   265a8:	mov	r5, r2
   265ac:	mov	r4, r0
   265b0:	mov	r0, sp
   265b4:	bl	2529c <__assert_fail@plt+0x12bb0>
   265b8:	mov	r3, sp
   265bc:	mvn	r2, #0
   265c0:	mov	r1, r5
   265c4:	mov	r0, r4
   265c8:	bl	260e8 <__assert_fail@plt+0x139fc>
   265cc:	add	sp, sp, #52	; 0x34
   265d0:	pop	{r4, r5, pc}
   265d4:	push	{r4, r5, r6, lr}
   265d8:	sub	sp, sp, #48	; 0x30
   265dc:	mov	r5, r2
   265e0:	mov	r6, r3
   265e4:	mov	r4, r0
   265e8:	mov	r0, sp
   265ec:	bl	2529c <__assert_fail@plt+0x12bb0>
   265f0:	mov	r3, sp
   265f4:	mov	r2, r6
   265f8:	mov	r1, r5
   265fc:	mov	r0, r4
   26600:	bl	260e8 <__assert_fail@plt+0x139fc>
   26604:	add	sp, sp, #48	; 0x30
   26608:	pop	{r4, r5, r6, pc}
   2660c:	mov	r2, r1
   26610:	mov	r1, r0
   26614:	mov	r0, #0
   26618:	b	265a0 <__assert_fail@plt+0x13eb4>
   2661c:	mov	r3, r2
   26620:	mov	r2, r1
   26624:	mov	r1, r0
   26628:	mov	r0, #0
   2662c:	b	265d4 <__assert_fail@plt+0x13ee8>
   26630:	push	{r4, r5, r6, lr}
   26634:	mov	r4, r0
   26638:	mov	r5, r1
   2663c:	mov	r6, r2
   26640:	sub	sp, sp, #48	; 0x30
   26644:	mov	ip, sp
   26648:	ldr	lr, [pc, #64]	; 26690 <__assert_fail@plt+0x13fa4>
   2664c:	ldm	lr!, {r0, r1, r2, r3}
   26650:	stmia	ip!, {r0, r1, r2, r3}
   26654:	ldm	lr!, {r0, r1, r2, r3}
   26658:	stmia	ip!, {r0, r1, r2, r3}
   2665c:	ldm	lr, {r0, r1, r2, r3}
   26660:	stm	ip, {r0, r1, r2, r3}
   26664:	mov	r1, r6
   26668:	mov	r2, #1
   2666c:	mov	r0, sp
   26670:	bl	262f4 <__assert_fail@plt+0x13c08>
   26674:	mov	r3, sp
   26678:	mov	r2, r5
   2667c:	mov	r1, r4
   26680:	mov	r0, #0
   26684:	bl	260e8 <__assert_fail@plt+0x139fc>
   26688:	add	sp, sp, #48	; 0x30
   2668c:	pop	{r4, r5, r6, pc}
   26690:	andeq	lr, r4, r0, lsr #28
   26694:	mov	r2, r1
   26698:	mvn	r1, #0
   2669c:	b	26630 <__assert_fail@plt+0x13f44>
   266a0:	mov	r1, #58	; 0x3a
   266a4:	b	26694 <__assert_fail@plt+0x13fa8>
   266a8:	mov	r2, #58	; 0x3a
   266ac:	b	26630 <__assert_fail@plt+0x13f44>
   266b0:	push	{r4, r5, lr}
   266b4:	sub	sp, sp, #100	; 0x64
   266b8:	mov	r4, r0
   266bc:	mov	r0, sp
   266c0:	mov	r5, r2
   266c4:	bl	2529c <__assert_fail@plt+0x12bb0>
   266c8:	mov	ip, sp
   266cc:	add	lr, sp, #48	; 0x30
   266d0:	ldm	ip!, {r0, r1, r2, r3}
   266d4:	stmia	lr!, {r0, r1, r2, r3}
   266d8:	ldm	ip!, {r0, r1, r2, r3}
   266dc:	stmia	lr!, {r0, r1, r2, r3}
   266e0:	ldm	ip, {r0, r1, r2, r3}
   266e4:	stm	lr, {r0, r1, r2, r3}
   266e8:	mov	r2, #1
   266ec:	mov	r1, #58	; 0x3a
   266f0:	add	r0, sp, #48	; 0x30
   266f4:	bl	262f4 <__assert_fail@plt+0x13c08>
   266f8:	add	r3, sp, #48	; 0x30
   266fc:	mvn	r2, #0
   26700:	mov	r1, r5
   26704:	mov	r0, r4
   26708:	bl	260e8 <__assert_fail@plt+0x139fc>
   2670c:	add	sp, sp, #100	; 0x64
   26710:	pop	{r4, r5, pc}
   26714:	push	{r4, r5, r6, r7, lr}
   26718:	mov	r4, r0
   2671c:	mov	r6, r1
   26720:	mov	r7, r2
   26724:	mov	r5, r3
   26728:	sub	sp, sp, #52	; 0x34
   2672c:	ldr	lr, [pc, #68]	; 26778 <__assert_fail@plt+0x1408c>
   26730:	mov	ip, sp
   26734:	ldm	lr!, {r0, r1, r2, r3}
   26738:	stmia	ip!, {r0, r1, r2, r3}
   2673c:	ldm	lr!, {r0, r1, r2, r3}
   26740:	stmia	ip!, {r0, r1, r2, r3}
   26744:	ldm	lr, {r0, r1, r2, r3}
   26748:	stm	ip, {r0, r1, r2, r3}
   2674c:	mov	r2, r7
   26750:	mov	r1, r6
   26754:	mov	r0, sp
   26758:	bl	26350 <__assert_fail@plt+0x13c64>
   2675c:	ldr	r2, [sp, #72]	; 0x48
   26760:	mov	r3, sp
   26764:	mov	r1, r5
   26768:	mov	r0, r4
   2676c:	bl	260e8 <__assert_fail@plt+0x139fc>
   26770:	add	sp, sp, #52	; 0x34
   26774:	pop	{r4, r5, r6, r7, pc}
   26778:	andeq	lr, r4, r0, lsr #28
   2677c:	mvn	ip, #0
   26780:	push	{r0, r1, r2, lr}
   26784:	str	ip, [sp]
   26788:	bl	26714 <__assert_fail@plt+0x14028>
   2678c:	add	sp, sp, #12
   26790:	pop	{pc}		; (ldr pc, [sp], #4)
   26794:	mov	r3, r2
   26798:	mov	r2, r1
   2679c:	mov	r1, r0
   267a0:	mov	r0, #0
   267a4:	b	2677c <__assert_fail@plt+0x14090>
   267a8:	push	{r0, r1, r2, lr}
   267ac:	str	r3, [sp]
   267b0:	mov	r3, r2
   267b4:	mov	r2, r1
   267b8:	mov	r1, r0
   267bc:	mov	r0, #0
   267c0:	bl	26714 <__assert_fail@plt+0x14028>
   267c4:	add	sp, sp, #12
   267c8:	pop	{pc}		; (ldr pc, [sp], #4)
   267cc:	ldr	r3, [pc]	; 267d4 <__assert_fail@plt+0x140e8>
   267d0:	b	260e8 <__assert_fail@plt+0x139fc>
   267d4:	andeq	lr, r4, r8, lsl r5
   267d8:	mov	r2, r1
   267dc:	mov	r1, r0
   267e0:	mov	r0, #0
   267e4:	b	267cc <__assert_fail@plt+0x140e0>
   267e8:	mvn	r2, #0
   267ec:	b	267cc <__assert_fail@plt+0x140e0>
   267f0:	mov	r1, r0
   267f4:	mov	r0, #0
   267f8:	b	267e8 <__assert_fail@plt+0x140fc>
   267fc:	push	{r4, r5, r6, lr}
   26800:	mov	r4, #0
   26804:	mov	r5, r0
   26808:	mov	r1, #524288	; 0x80000
   2680c:	str	r4, [r0, #4]
   26810:	ldr	r0, [pc, #52]	; 2684c <__assert_fail@plt+0x14160>
   26814:	bl	1fa94 <__assert_fail@plt+0xd3a8>
   26818:	cmp	r0, r4
   2681c:	str	r0, [r5]
   26820:	bge	26844 <__assert_fail@plt+0x14158>
   26824:	mov	r1, r4
   26828:	mov	r0, r4
   2682c:	bl	12380 <getcwd@plt>
   26830:	str	r0, [r5, #4]
   26834:	clz	r0, r0
   26838:	lsr	r0, r0, #5
   2683c:	rsb	r0, r0, #0
   26840:	pop	{r4, r5, r6, pc}
   26844:	mov	r0, r4
   26848:	pop	{r4, r5, r6, pc}
   2684c:	ldrdeq	r8, [r3], -r9
   26850:	mov	r3, r0
   26854:	ldr	r0, [r0]
   26858:	cmp	r0, #0
   2685c:	blt	26864 <__assert_fail@plt+0x14178>
   26860:	b	125d8 <fchdir@plt>
   26864:	ldr	r0, [r3, #4]
   26868:	b	28080 <__assert_fail@plt+0x15994>
   2686c:	push	{r4, lr}
   26870:	mov	r4, r0
   26874:	ldr	r0, [r0]
   26878:	cmp	r0, #0
   2687c:	blt	26884 <__assert_fail@plt+0x14198>
   26880:	bl	126a4 <close@plt>
   26884:	ldr	r0, [r4, #4]
   26888:	pop	{r4, lr}
   2688c:	b	284c4 <__assert_fail@plt+0x15dd8>
   26890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26894:	cmn	r0, #100	; 0x64
   26898:	sub	sp, sp, #4032	; 0xfc0
   2689c:	sub	sp, sp, #4
   268a0:	mov	r8, r1
   268a4:	mov	r9, r2
   268a8:	beq	268b8 <__assert_fail@plt+0x141cc>
   268ac:	ldrb	r3, [r1]
   268b0:	cmp	r3, #47	; 0x2f
   268b4:	bne	268d8 <__assert_fail@plt+0x141ec>
   268b8:	mov	r1, r9
   268bc:	mov	r0, r8
   268c0:	bl	2a2f8 <__assert_fail@plt+0x17c0c>
   268c4:	mov	r4, r0
   268c8:	mov	r0, r4
   268cc:	add	sp, sp, #4032	; 0xfc0
   268d0:	add	sp, sp, #4
   268d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268d8:	mov	r5, sp
   268dc:	mov	r2, r1
   268e0:	mov	r6, r0
   268e4:	mov	r1, r0
   268e8:	mov	r0, r5
   268ec:	bl	368b4 <__assert_fail@plt+0x241c8>
   268f0:	subs	fp, r0, #0
   268f4:	beq	26954 <__assert_fail@plt+0x14268>
   268f8:	mov	r1, r9
   268fc:	bl	2a2f8 <__assert_fail@plt+0x17c0c>
   26900:	mov	r4, r0
   26904:	bl	12404 <__errno_location@plt>
   26908:	cmp	fp, r5
   2690c:	mov	sl, r0
   26910:	ldr	r7, [r0]
   26914:	beq	26920 <__assert_fail@plt+0x14234>
   26918:	mov	r0, fp
   2691c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   26920:	cmn	r4, #1
   26924:	bne	268c8 <__assert_fail@plt+0x141dc>
   26928:	cmp	r7, #20
   2692c:	bls	26944 <__assert_fail@plt+0x14258>
   26930:	cmp	r7, #38	; 0x26
   26934:	cmpne	r7, #95	; 0x5f
   26938:	beq	26954 <__assert_fail@plt+0x14268>
   2693c:	str	r7, [sl]
   26940:	b	268c8 <__assert_fail@plt+0x141dc>
   26944:	ldr	r3, [pc, #216]	; 26a24 <__assert_fail@plt+0x14338>
   26948:	mvn	r3, r3, lsr r7
   2694c:	tst	r3, #1
   26950:	bne	2693c <__assert_fail@plt+0x14250>
   26954:	mov	r0, r5
   26958:	bl	267fc <__assert_fail@plt+0x14110>
   2695c:	cmp	r0, #0
   26960:	beq	26970 <__assert_fail@plt+0x14284>
   26964:	bl	12404 <__errno_location@plt>
   26968:	ldr	r0, [r0]
   2696c:	bl	22678 <__assert_fail@plt+0xff8c>
   26970:	cmp	r6, #0
   26974:	blt	269a0 <__assert_fail@plt+0x142b4>
   26978:	ldr	r3, [sp]
   2697c:	cmp	r3, r6
   26980:	bne	269a0 <__assert_fail@plt+0x142b4>
   26984:	mov	r0, r5
   26988:	bl	2686c <__assert_fail@plt+0x14180>
   2698c:	bl	12404 <__errno_location@plt>
   26990:	mov	r3, #9
   26994:	str	r3, [r0]
   26998:	mvn	r4, #0
   2699c:	b	268c8 <__assert_fail@plt+0x141dc>
   269a0:	mov	r0, r6
   269a4:	bl	125d8 <fchdir@plt>
   269a8:	subs	r6, r0, #0
   269ac:	beq	269cc <__assert_fail@plt+0x142e0>
   269b0:	bl	12404 <__errno_location@plt>
   269b4:	mov	r4, r0
   269b8:	mov	r0, r5
   269bc:	ldr	r6, [r4]
   269c0:	bl	2686c <__assert_fail@plt+0x14180>
   269c4:	str	r6, [r4]
   269c8:	b	26998 <__assert_fail@plt+0x142ac>
   269cc:	mov	r1, r9
   269d0:	mov	r0, r8
   269d4:	bl	2a2f8 <__assert_fail@plt+0x17c0c>
   269d8:	cmn	r0, #1
   269dc:	mov	r4, r0
   269e0:	bne	269ec <__assert_fail@plt+0x14300>
   269e4:	bl	12404 <__errno_location@plt>
   269e8:	ldr	r6, [r0]
   269ec:	mov	r0, r5
   269f0:	bl	26850 <__assert_fail@plt+0x14164>
   269f4:	cmp	r0, #0
   269f8:	beq	26a08 <__assert_fail@plt+0x1431c>
   269fc:	bl	12404 <__errno_location@plt>
   26a00:	ldr	r0, [r0]
   26a04:	bl	226b4 <__assert_fail@plt+0xffc8>
   26a08:	mov	r0, r5
   26a0c:	bl	2686c <__assert_fail@plt+0x14180>
   26a10:	cmp	r6, #0
   26a14:	beq	268c8 <__assert_fail@plt+0x141dc>
   26a18:	bl	12404 <__errno_location@plt>
   26a1c:	str	r6, [r0]
   26a20:	b	268c8 <__assert_fail@plt+0x141dc>
   26a24:	andseq	r2, r0, r6
   26a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a2c:	cmn	r0, #100	; 0x64
   26a30:	sub	sp, sp, #4032	; 0xfc0
   26a34:	sub	sp, sp, #4
   26a38:	mov	r8, r1
   26a3c:	mov	r9, r2
   26a40:	beq	26a50 <__assert_fail@plt+0x14364>
   26a44:	ldrb	r3, [r1]
   26a48:	cmp	r3, #47	; 0x2f
   26a4c:	bne	26a70 <__assert_fail@plt+0x14384>
   26a50:	mov	r1, r9
   26a54:	mov	r0, r8
   26a58:	bl	2a310 <__assert_fail@plt+0x17c24>
   26a5c:	mov	r4, r0
   26a60:	mov	r0, r4
   26a64:	add	sp, sp, #4032	; 0xfc0
   26a68:	add	sp, sp, #4
   26a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a70:	mov	r5, sp
   26a74:	mov	r2, r1
   26a78:	mov	r6, r0
   26a7c:	mov	r1, r0
   26a80:	mov	r0, r5
   26a84:	bl	368b4 <__assert_fail@plt+0x241c8>
   26a88:	subs	fp, r0, #0
   26a8c:	beq	26aec <__assert_fail@plt+0x14400>
   26a90:	mov	r1, r9
   26a94:	bl	2a310 <__assert_fail@plt+0x17c24>
   26a98:	mov	r4, r0
   26a9c:	bl	12404 <__errno_location@plt>
   26aa0:	cmp	fp, r5
   26aa4:	mov	sl, r0
   26aa8:	ldr	r7, [r0]
   26aac:	beq	26ab8 <__assert_fail@plt+0x143cc>
   26ab0:	mov	r0, fp
   26ab4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   26ab8:	cmn	r4, #1
   26abc:	bne	26a60 <__assert_fail@plt+0x14374>
   26ac0:	cmp	r7, #20
   26ac4:	bls	26adc <__assert_fail@plt+0x143f0>
   26ac8:	cmp	r7, #38	; 0x26
   26acc:	cmpne	r7, #95	; 0x5f
   26ad0:	beq	26aec <__assert_fail@plt+0x14400>
   26ad4:	str	r7, [sl]
   26ad8:	b	26a60 <__assert_fail@plt+0x14374>
   26adc:	ldr	r3, [pc, #216]	; 26bbc <__assert_fail@plt+0x144d0>
   26ae0:	mvn	r3, r3, lsr r7
   26ae4:	tst	r3, #1
   26ae8:	bne	26ad4 <__assert_fail@plt+0x143e8>
   26aec:	mov	r0, r5
   26af0:	bl	267fc <__assert_fail@plt+0x14110>
   26af4:	cmp	r0, #0
   26af8:	beq	26b08 <__assert_fail@plt+0x1441c>
   26afc:	bl	12404 <__errno_location@plt>
   26b00:	ldr	r0, [r0]
   26b04:	bl	22678 <__assert_fail@plt+0xff8c>
   26b08:	cmp	r6, #0
   26b0c:	blt	26b38 <__assert_fail@plt+0x1444c>
   26b10:	ldr	r3, [sp]
   26b14:	cmp	r3, r6
   26b18:	bne	26b38 <__assert_fail@plt+0x1444c>
   26b1c:	mov	r0, r5
   26b20:	bl	2686c <__assert_fail@plt+0x14180>
   26b24:	bl	12404 <__errno_location@plt>
   26b28:	mov	r3, #9
   26b2c:	str	r3, [r0]
   26b30:	mvn	r4, #0
   26b34:	b	26a60 <__assert_fail@plt+0x14374>
   26b38:	mov	r0, r6
   26b3c:	bl	125d8 <fchdir@plt>
   26b40:	subs	r6, r0, #0
   26b44:	beq	26b64 <__assert_fail@plt+0x14478>
   26b48:	bl	12404 <__errno_location@plt>
   26b4c:	mov	r4, r0
   26b50:	mov	r0, r5
   26b54:	ldr	r6, [r4]
   26b58:	bl	2686c <__assert_fail@plt+0x14180>
   26b5c:	str	r6, [r4]
   26b60:	b	26b30 <__assert_fail@plt+0x14444>
   26b64:	mov	r1, r9
   26b68:	mov	r0, r8
   26b6c:	bl	2a310 <__assert_fail@plt+0x17c24>
   26b70:	cmn	r0, #1
   26b74:	mov	r4, r0
   26b78:	bne	26b84 <__assert_fail@plt+0x14498>
   26b7c:	bl	12404 <__errno_location@plt>
   26b80:	ldr	r6, [r0]
   26b84:	mov	r0, r5
   26b88:	bl	26850 <__assert_fail@plt+0x14164>
   26b8c:	cmp	r0, #0
   26b90:	beq	26ba0 <__assert_fail@plt+0x144b4>
   26b94:	bl	12404 <__errno_location@plt>
   26b98:	ldr	r0, [r0]
   26b9c:	bl	226b4 <__assert_fail@plt+0xffc8>
   26ba0:	mov	r0, r5
   26ba4:	bl	2686c <__assert_fail@plt+0x14180>
   26ba8:	cmp	r6, #0
   26bac:	beq	26a60 <__assert_fail@plt+0x14374>
   26bb0:	bl	12404 <__errno_location@plt>
   26bb4:	str	r6, [r0]
   26bb8:	b	26a60 <__assert_fail@plt+0x14374>
   26bbc:	andseq	r2, r0, r6
   26bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26bc4:	cmn	r0, #100	; 0x64
   26bc8:	sub	sp, sp, #4032	; 0xfc0
   26bcc:	sub	sp, sp, #4
   26bd0:	mov	r8, r1
   26bd4:	mov	r9, r2
   26bd8:	beq	26be8 <__assert_fail@plt+0x144fc>
   26bdc:	ldrb	r3, [r1]
   26be0:	cmp	r3, #47	; 0x2f
   26be4:	bne	26c08 <__assert_fail@plt+0x1451c>
   26be8:	mov	r1, r9
   26bec:	mov	r0, r8
   26bf0:	bl	124b8 <setfilecon@plt>
   26bf4:	mov	r4, r0
   26bf8:	mov	r0, r4
   26bfc:	add	sp, sp, #4032	; 0xfc0
   26c00:	add	sp, sp, #4
   26c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c08:	mov	r5, sp
   26c0c:	mov	r2, r1
   26c10:	mov	r6, r0
   26c14:	mov	r1, r0
   26c18:	mov	r0, r5
   26c1c:	bl	368b4 <__assert_fail@plt+0x241c8>
   26c20:	subs	fp, r0, #0
   26c24:	beq	26c84 <__assert_fail@plt+0x14598>
   26c28:	mov	r1, r9
   26c2c:	bl	124b8 <setfilecon@plt>
   26c30:	mov	r4, r0
   26c34:	bl	12404 <__errno_location@plt>
   26c38:	cmp	fp, r5
   26c3c:	mov	sl, r0
   26c40:	ldr	r7, [r0]
   26c44:	beq	26c50 <__assert_fail@plt+0x14564>
   26c48:	mov	r0, fp
   26c4c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   26c50:	cmn	r4, #1
   26c54:	bne	26bf8 <__assert_fail@plt+0x1450c>
   26c58:	cmp	r7, #20
   26c5c:	bls	26c74 <__assert_fail@plt+0x14588>
   26c60:	cmp	r7, #38	; 0x26
   26c64:	cmpne	r7, #95	; 0x5f
   26c68:	beq	26c84 <__assert_fail@plt+0x14598>
   26c6c:	str	r7, [sl]
   26c70:	b	26bf8 <__assert_fail@plt+0x1450c>
   26c74:	ldr	r3, [pc, #216]	; 26d54 <__assert_fail@plt+0x14668>
   26c78:	mvn	r3, r3, lsr r7
   26c7c:	tst	r3, #1
   26c80:	bne	26c6c <__assert_fail@plt+0x14580>
   26c84:	mov	r0, r5
   26c88:	bl	267fc <__assert_fail@plt+0x14110>
   26c8c:	cmp	r0, #0
   26c90:	beq	26ca0 <__assert_fail@plt+0x145b4>
   26c94:	bl	12404 <__errno_location@plt>
   26c98:	ldr	r0, [r0]
   26c9c:	bl	22678 <__assert_fail@plt+0xff8c>
   26ca0:	cmp	r6, #0
   26ca4:	blt	26cd0 <__assert_fail@plt+0x145e4>
   26ca8:	ldr	r3, [sp]
   26cac:	cmp	r3, r6
   26cb0:	bne	26cd0 <__assert_fail@plt+0x145e4>
   26cb4:	mov	r0, r5
   26cb8:	bl	2686c <__assert_fail@plt+0x14180>
   26cbc:	bl	12404 <__errno_location@plt>
   26cc0:	mov	r3, #9
   26cc4:	str	r3, [r0]
   26cc8:	mvn	r4, #0
   26ccc:	b	26bf8 <__assert_fail@plt+0x1450c>
   26cd0:	mov	r0, r6
   26cd4:	bl	125d8 <fchdir@plt>
   26cd8:	subs	r6, r0, #0
   26cdc:	beq	26cfc <__assert_fail@plt+0x14610>
   26ce0:	bl	12404 <__errno_location@plt>
   26ce4:	mov	r4, r0
   26ce8:	mov	r0, r5
   26cec:	ldr	r6, [r4]
   26cf0:	bl	2686c <__assert_fail@plt+0x14180>
   26cf4:	str	r6, [r4]
   26cf8:	b	26cc8 <__assert_fail@plt+0x145dc>
   26cfc:	mov	r1, r9
   26d00:	mov	r0, r8
   26d04:	bl	124b8 <setfilecon@plt>
   26d08:	cmn	r0, #1
   26d0c:	mov	r4, r0
   26d10:	bne	26d1c <__assert_fail@plt+0x14630>
   26d14:	bl	12404 <__errno_location@plt>
   26d18:	ldr	r6, [r0]
   26d1c:	mov	r0, r5
   26d20:	bl	26850 <__assert_fail@plt+0x14164>
   26d24:	cmp	r0, #0
   26d28:	beq	26d38 <__assert_fail@plt+0x1464c>
   26d2c:	bl	12404 <__errno_location@plt>
   26d30:	ldr	r0, [r0]
   26d34:	bl	226b4 <__assert_fail@plt+0xffc8>
   26d38:	mov	r0, r5
   26d3c:	bl	2686c <__assert_fail@plt+0x14180>
   26d40:	cmp	r6, #0
   26d44:	beq	26bf8 <__assert_fail@plt+0x1450c>
   26d48:	bl	12404 <__errno_location@plt>
   26d4c:	str	r6, [r0]
   26d50:	b	26bf8 <__assert_fail@plt+0x1450c>
   26d54:	andseq	r2, r0, r6
   26d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d5c:	cmn	r0, #100	; 0x64
   26d60:	sub	sp, sp, #4032	; 0xfc0
   26d64:	sub	sp, sp, #4
   26d68:	mov	r8, r1
   26d6c:	mov	r9, r2
   26d70:	beq	26d80 <__assert_fail@plt+0x14694>
   26d74:	ldrb	r3, [r1]
   26d78:	cmp	r3, #47	; 0x2f
   26d7c:	bne	26da0 <__assert_fail@plt+0x146b4>
   26d80:	mov	r1, r9
   26d84:	mov	r0, r8
   26d88:	bl	12080 <lsetfilecon@plt>
   26d8c:	mov	r4, r0
   26d90:	mov	r0, r4
   26d94:	add	sp, sp, #4032	; 0xfc0
   26d98:	add	sp, sp, #4
   26d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26da0:	mov	r5, sp
   26da4:	mov	r2, r1
   26da8:	mov	r6, r0
   26dac:	mov	r1, r0
   26db0:	mov	r0, r5
   26db4:	bl	368b4 <__assert_fail@plt+0x241c8>
   26db8:	subs	fp, r0, #0
   26dbc:	beq	26e1c <__assert_fail@plt+0x14730>
   26dc0:	mov	r1, r9
   26dc4:	bl	12080 <lsetfilecon@plt>
   26dc8:	mov	r4, r0
   26dcc:	bl	12404 <__errno_location@plt>
   26dd0:	cmp	fp, r5
   26dd4:	mov	sl, r0
   26dd8:	ldr	r7, [r0]
   26ddc:	beq	26de8 <__assert_fail@plt+0x146fc>
   26de0:	mov	r0, fp
   26de4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   26de8:	cmn	r4, #1
   26dec:	bne	26d90 <__assert_fail@plt+0x146a4>
   26df0:	cmp	r7, #20
   26df4:	bls	26e0c <__assert_fail@plt+0x14720>
   26df8:	cmp	r7, #38	; 0x26
   26dfc:	cmpne	r7, #95	; 0x5f
   26e00:	beq	26e1c <__assert_fail@plt+0x14730>
   26e04:	str	r7, [sl]
   26e08:	b	26d90 <__assert_fail@plt+0x146a4>
   26e0c:	ldr	r3, [pc, #216]	; 26eec <__assert_fail@plt+0x14800>
   26e10:	mvn	r3, r3, lsr r7
   26e14:	tst	r3, #1
   26e18:	bne	26e04 <__assert_fail@plt+0x14718>
   26e1c:	mov	r0, r5
   26e20:	bl	267fc <__assert_fail@plt+0x14110>
   26e24:	cmp	r0, #0
   26e28:	beq	26e38 <__assert_fail@plt+0x1474c>
   26e2c:	bl	12404 <__errno_location@plt>
   26e30:	ldr	r0, [r0]
   26e34:	bl	22678 <__assert_fail@plt+0xff8c>
   26e38:	cmp	r6, #0
   26e3c:	blt	26e68 <__assert_fail@plt+0x1477c>
   26e40:	ldr	r3, [sp]
   26e44:	cmp	r3, r6
   26e48:	bne	26e68 <__assert_fail@plt+0x1477c>
   26e4c:	mov	r0, r5
   26e50:	bl	2686c <__assert_fail@plt+0x14180>
   26e54:	bl	12404 <__errno_location@plt>
   26e58:	mov	r3, #9
   26e5c:	str	r3, [r0]
   26e60:	mvn	r4, #0
   26e64:	b	26d90 <__assert_fail@plt+0x146a4>
   26e68:	mov	r0, r6
   26e6c:	bl	125d8 <fchdir@plt>
   26e70:	subs	r6, r0, #0
   26e74:	beq	26e94 <__assert_fail@plt+0x147a8>
   26e78:	bl	12404 <__errno_location@plt>
   26e7c:	mov	r4, r0
   26e80:	mov	r0, r5
   26e84:	ldr	r6, [r4]
   26e88:	bl	2686c <__assert_fail@plt+0x14180>
   26e8c:	str	r6, [r4]
   26e90:	b	26e60 <__assert_fail@plt+0x14774>
   26e94:	mov	r1, r9
   26e98:	mov	r0, r8
   26e9c:	bl	12080 <lsetfilecon@plt>
   26ea0:	cmn	r0, #1
   26ea4:	mov	r4, r0
   26ea8:	bne	26eb4 <__assert_fail@plt+0x147c8>
   26eac:	bl	12404 <__errno_location@plt>
   26eb0:	ldr	r6, [r0]
   26eb4:	mov	r0, r5
   26eb8:	bl	26850 <__assert_fail@plt+0x14164>
   26ebc:	cmp	r0, #0
   26ec0:	beq	26ed0 <__assert_fail@plt+0x147e4>
   26ec4:	bl	12404 <__errno_location@plt>
   26ec8:	ldr	r0, [r0]
   26ecc:	bl	226b4 <__assert_fail@plt+0xffc8>
   26ed0:	mov	r0, r5
   26ed4:	bl	2686c <__assert_fail@plt+0x14180>
   26ed8:	cmp	r6, #0
   26edc:	beq	26d90 <__assert_fail@plt+0x146a4>
   26ee0:	bl	12404 <__errno_location@plt>
   26ee4:	str	r6, [r0]
   26ee8:	b	26d90 <__assert_fail@plt+0x146a4>
   26eec:	andseq	r2, r0, r6
   26ef0:	push	{r4, r5, r6, lr}
   26ef4:	mov	r2, r1
   26ef8:	mov	r4, r1
   26efc:	mov	r1, #0
   26f00:	mov	r5, r0
   26f04:	bl	124ac <memchr@plt>
   26f08:	cmp	r0, #0
   26f0c:	subne	r4, r0, r5
   26f10:	addne	r4, r4, #1
   26f14:	mov	r0, r4
   26f18:	pop	{r4, r5, r6, pc}
   26f1c:	mov	r2, #3
   26f20:	mov	r1, #0
   26f24:	b	282c4 <__assert_fail@plt+0x15bd8>
   26f28:	cmp	r0, #2
   26f2c:	push	{r4, r5, r6, r7, r8, lr}
   26f30:	mov	r4, r0
   26f34:	bhi	26f5c <__assert_fail@plt+0x14870>
   26f38:	bl	26f1c <__assert_fail@plt+0x14830>
   26f3c:	mov	r6, r0
   26f40:	bl	12404 <__errno_location@plt>
   26f44:	mov	r5, r0
   26f48:	mov	r0, r4
   26f4c:	ldr	r7, [r5]
   26f50:	mov	r4, r6
   26f54:	bl	126a4 <close@plt>
   26f58:	str	r7, [r5]
   26f5c:	mov	r0, r4
   26f60:	pop	{r4, r5, r6, r7, r8, pc}
   26f64:	push	{r4, r5, r6, lr}
   26f68:	cmp	r1, #0
   26f6c:	sub	sp, sp, #32
   26f70:	mov	r5, r0
   26f74:	ldr	r4, [sp, #48]	; 0x30
   26f78:	ldr	r6, [sp, #52]	; 0x34
   26f7c:	beq	27028 <__assert_fail@plt+0x1493c>
   26f80:	mov	lr, r3
   26f84:	mov	r3, r2
   26f88:	mov	r2, r1
   26f8c:	ldr	r1, [pc, #740]	; 27278 <__assert_fail@plt+0x14b8c>
   26f90:	str	lr, [sp]
   26f94:	bl	123f8 <fprintf@plt>
   26f98:	mov	r2, #5
   26f9c:	ldr	r1, [pc, #728]	; 2727c <__assert_fail@plt+0x14b90>
   26fa0:	mov	r0, #0
   26fa4:	bl	1217c <dcgettext@plt>
   26fa8:	mov	r2, r0
   26fac:	movw	r3, #2022	; 0x7e6
   26fb0:	ldr	r1, [pc, #712]	; 27280 <__assert_fail@plt+0x14b94>
   26fb4:	mov	r0, r5
   26fb8:	bl	123f8 <fprintf@plt>
   26fbc:	mov	r1, r5
   26fc0:	mov	r0, #10
   26fc4:	bl	1256c <fputc@plt>
   26fc8:	mov	r2, #5
   26fcc:	ldr	r1, [pc, #688]	; 27284 <__assert_fail@plt+0x14b98>
   26fd0:	mov	r0, #0
   26fd4:	bl	1217c <dcgettext@plt>
   26fd8:	mov	r1, r0
   26fdc:	ldr	r2, [pc, #676]	; 27288 <__assert_fail@plt+0x14b9c>
   26fe0:	mov	r0, r5
   26fe4:	bl	123f8 <fprintf@plt>
   26fe8:	mov	r1, r5
   26fec:	mov	r0, #10
   26ff0:	bl	1256c <fputc@plt>
   26ff4:	cmp	r6, #9
   26ff8:	ldrls	pc, [pc, r6, lsl #2]
   26ffc:	b	2726c <__assert_fail@plt+0x14b80>
   27000:	andeq	r7, r2, r4, lsr #2
   27004:	andeq	r7, r2, r4, lsr r0
   27008:	andeq	r7, r2, ip, asr r0
   2700c:	andeq	r7, r2, r4, lsl #1
   27010:	strheq	r7, [r2], -r4
   27014:	andeq	r7, r2, ip, ror #1
   27018:	andeq	r7, r2, ip, lsr #2
   2701c:	andeq	r7, r2, r0, ror r1
   27020:			; <UNDEFINED> instruction: 0x000271bc
   27024:	andeq	r7, r2, r0, lsl r2
   27028:	ldr	r1, [pc, #604]	; 2728c <__assert_fail@plt+0x14ba0>
   2702c:	bl	123f8 <fprintf@plt>
   27030:	b	26f98 <__assert_fail@plt+0x148ac>
   27034:	mov	r2, #5
   27038:	ldr	r1, [pc, #592]	; 27290 <__assert_fail@plt+0x14ba4>
   2703c:	mov	r0, #0
   27040:	bl	1217c <dcgettext@plt>
   27044:	ldr	r2, [r4]
   27048:	mov	r1, r0
   2704c:	mov	r0, r5
   27050:	add	sp, sp, #32
   27054:	pop	{r4, r5, r6, lr}
   27058:	b	123f8 <fprintf@plt>
   2705c:	mov	r2, #5
   27060:	ldr	r1, [pc, #556]	; 27294 <__assert_fail@plt+0x14ba8>
   27064:	mov	r0, #0
   27068:	bl	1217c <dcgettext@plt>
   2706c:	ldrd	r2, [r4]
   27070:	mov	r1, r0
   27074:	mov	r0, r5
   27078:	add	sp, sp, #32
   2707c:	pop	{r4, r5, r6, lr}
   27080:	b	123f8 <fprintf@plt>
   27084:	mov	r2, #5
   27088:	ldr	r1, [pc, #520]	; 27298 <__assert_fail@plt+0x14bac>
   2708c:	mov	r0, #0
   27090:	bl	1217c <dcgettext@plt>
   27094:	ldr	r3, [r4, #8]
   27098:	mov	r1, r0
   2709c:	mov	r0, r5
   270a0:	str	r3, [sp, #48]	; 0x30
   270a4:	ldrd	r2, [r4]
   270a8:	add	sp, sp, #32
   270ac:	pop	{r4, r5, r6, lr}
   270b0:	b	123f8 <fprintf@plt>
   270b4:	mov	r2, #5
   270b8:	ldr	r1, [pc, #476]	; 2729c <__assert_fail@plt+0x14bb0>
   270bc:	mov	r0, #0
   270c0:	bl	1217c <dcgettext@plt>
   270c4:	ldr	r3, [r4, #12]
   270c8:	mov	r1, r0
   270cc:	mov	r0, r5
   270d0:	str	r3, [sp, #52]	; 0x34
   270d4:	ldr	r3, [r4, #8]
   270d8:	str	r3, [sp, #48]	; 0x30
   270dc:	ldrd	r2, [r4]
   270e0:	add	sp, sp, #32
   270e4:	pop	{r4, r5, r6, lr}
   270e8:	b	123f8 <fprintf@plt>
   270ec:	mov	r2, #5
   270f0:	ldr	r1, [pc, #424]	; 272a0 <__assert_fail@plt+0x14bb4>
   270f4:	mov	r0, #0
   270f8:	bl	1217c <dcgettext@plt>
   270fc:	ldr	r3, [r4, #16]
   27100:	mov	r1, r0
   27104:	mov	r0, r5
   27108:	str	r3, [sp, #8]
   2710c:	ldr	r3, [r4, #12]
   27110:	str	r3, [sp, #4]
   27114:	ldr	r3, [r4, #8]
   27118:	str	r3, [sp]
   2711c:	ldrd	r2, [r4]
   27120:	bl	123f8 <fprintf@plt>
   27124:	add	sp, sp, #32
   27128:	pop	{r4, r5, r6, pc}
   2712c:	mov	r2, #5
   27130:	ldr	r1, [pc, #364]	; 272a4 <__assert_fail@plt+0x14bb8>
   27134:	mov	r0, #0
   27138:	bl	1217c <dcgettext@plt>
   2713c:	ldr	r3, [r4, #20]
   27140:	mov	r1, r0
   27144:	mov	r0, r5
   27148:	str	r3, [sp, #12]
   2714c:	ldr	r3, [r4, #16]
   27150:	str	r3, [sp, #8]
   27154:	ldr	r3, [r4, #12]
   27158:	str	r3, [sp, #4]
   2715c:	ldr	r3, [r4, #8]
   27160:	str	r3, [sp]
   27164:	ldrd	r2, [r4]
   27168:	bl	123f8 <fprintf@plt>
   2716c:	b	27124 <__assert_fail@plt+0x14a38>
   27170:	mov	r2, #5
   27174:	ldr	r1, [pc, #300]	; 272a8 <__assert_fail@plt+0x14bbc>
   27178:	mov	r0, #0
   2717c:	bl	1217c <dcgettext@plt>
   27180:	ldr	r3, [r4, #24]
   27184:	mov	r1, r0
   27188:	mov	r0, r5
   2718c:	str	r3, [sp, #16]
   27190:	ldr	r3, [r4, #20]
   27194:	str	r3, [sp, #12]
   27198:	ldr	r3, [r4, #16]
   2719c:	str	r3, [sp, #8]
   271a0:	ldr	r3, [r4, #12]
   271a4:	str	r3, [sp, #4]
   271a8:	ldr	r3, [r4, #8]
   271ac:	str	r3, [sp]
   271b0:	ldrd	r2, [r4]
   271b4:	bl	123f8 <fprintf@plt>
   271b8:	b	27124 <__assert_fail@plt+0x14a38>
   271bc:	mov	r2, #5
   271c0:	ldr	r1, [pc, #228]	; 272ac <__assert_fail@plt+0x14bc0>
   271c4:	mov	r0, #0
   271c8:	bl	1217c <dcgettext@plt>
   271cc:	ldr	r3, [r4, #28]
   271d0:	mov	r1, r0
   271d4:	mov	r0, r5
   271d8:	str	r3, [sp, #20]
   271dc:	ldr	r3, [r4, #24]
   271e0:	str	r3, [sp, #16]
   271e4:	ldr	r3, [r4, #20]
   271e8:	str	r3, [sp, #12]
   271ec:	ldr	r3, [r4, #16]
   271f0:	str	r3, [sp, #8]
   271f4:	ldr	r3, [r4, #12]
   271f8:	str	r3, [sp, #4]
   271fc:	ldr	r3, [r4, #8]
   27200:	str	r3, [sp]
   27204:	ldrd	r2, [r4]
   27208:	bl	123f8 <fprintf@plt>
   2720c:	b	27124 <__assert_fail@plt+0x14a38>
   27210:	ldr	r1, [pc, #152]	; 272b0 <__assert_fail@plt+0x14bc4>
   27214:	mov	r2, #5
   27218:	mov	r0, #0
   2721c:	bl	1217c <dcgettext@plt>
   27220:	ldr	r3, [r4, #32]
   27224:	mov	r1, r0
   27228:	mov	r0, r5
   2722c:	str	r3, [sp, #24]
   27230:	ldr	r3, [r4, #28]
   27234:	str	r3, [sp, #20]
   27238:	ldr	r3, [r4, #24]
   2723c:	str	r3, [sp, #16]
   27240:	ldr	r3, [r4, #20]
   27244:	str	r3, [sp, #12]
   27248:	ldr	r3, [r4, #16]
   2724c:	str	r3, [sp, #8]
   27250:	ldr	r3, [r4, #12]
   27254:	str	r3, [sp, #4]
   27258:	ldr	r3, [r4, #8]
   2725c:	str	r3, [sp]
   27260:	ldrd	r2, [r4]
   27264:	bl	123f8 <fprintf@plt>
   27268:	b	27124 <__assert_fail@plt+0x14a38>
   2726c:	mov	r2, #5
   27270:	ldr	r1, [pc, #60]	; 272b4 <__assert_fail@plt+0x14bc8>
   27274:	b	27218 <__assert_fail@plt+0x14b2c>
   27278:	andeq	ip, r3, r5, asr #21
   2727c:	ldrdeq	ip, [r3], -r8
   27280:	muleq	r3, r0, sp
   27284:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   27288:	andeq	ip, r3, r7, lsl #23
   2728c:	ldrdeq	ip, [r3], -r1
   27290:	andeq	ip, r3, r9, lsr #23
   27294:			; <UNDEFINED> instruction: 0x0003cbb9
   27298:	ldrdeq	ip, [r3], -r0
   2729c:	andeq	ip, r3, ip, ror #23
   272a0:	andeq	ip, r3, ip, lsl #24
   272a4:	andeq	ip, r3, r0, lsr ip
   272a8:	andeq	ip, r3, r8, asr ip
   272ac:	andeq	ip, r3, r4, lsl #25
   272b0:			; <UNDEFINED> instruction: 0x0003ccb4
   272b4:	andeq	ip, r3, r8, ror #25
   272b8:	push	{r0, r1, r4, lr}
   272bc:	mov	ip, #0
   272c0:	ldr	lr, [sp, #16]
   272c4:	ldr	r4, [lr, ip, lsl #2]
   272c8:	cmp	r4, #0
   272cc:	bne	272e4 <__assert_fail@plt+0x14bf8>
   272d0:	str	lr, [sp]
   272d4:	str	ip, [sp, #4]
   272d8:	bl	26f64 <__assert_fail@plt+0x14878>
   272dc:	add	sp, sp, #8
   272e0:	pop	{r4, pc}
   272e4:	add	ip, ip, #1
   272e8:	b	272c4 <__assert_fail@plt+0x14bd8>
   272ec:	push	{r4, r5, r6, lr}
   272f0:	sub	sp, sp, #48	; 0x30
   272f4:	mov	ip, #0
   272f8:	add	lr, sp, #8
   272fc:	mov	r5, lr
   27300:	ldr	r6, [sp, #64]	; 0x40
   27304:	ldr	r4, [r6, ip, lsl #2]
   27308:	cmp	r4, #0
   2730c:	str	r4, [lr], #4
   27310:	beq	27320 <__assert_fail@plt+0x14c34>
   27314:	add	ip, ip, #1
   27318:	cmp	ip, #10
   2731c:	bne	27304 <__assert_fail@plt+0x14c18>
   27320:	stm	sp, {r5, ip}
   27324:	bl	26f64 <__assert_fail@plt+0x14878>
   27328:	add	sp, sp, #48	; 0x30
   2732c:	pop	{r4, r5, r6, pc}
   27330:	push	{r3}		; (str r3, [sp, #-4]!)
   27334:	push	{r0, r1, r2, r3, lr}
   27338:	add	r3, sp, #24
   2733c:	str	r3, [sp]
   27340:	str	r3, [sp, #12]
   27344:	ldr	r3, [sp, #20]
   27348:	bl	272ec <__assert_fail@plt+0x14c00>
   2734c:	add	sp, sp, #16
   27350:	pop	{lr}		; (ldr lr, [sp], #4)
   27354:	add	sp, sp, #4
   27358:	bx	lr
   2735c:	ldr	r3, [pc, #92]	; 273c0 <__assert_fail@plt+0x14cd4>
   27360:	mov	r0, #10
   27364:	push	{r4, lr}
   27368:	ldr	r1, [r3]
   2736c:	bl	1256c <fputc@plt>
   27370:	mov	r2, #5
   27374:	ldr	r1, [pc, #72]	; 273c4 <__assert_fail@plt+0x14cd8>
   27378:	mov	r0, #0
   2737c:	bl	1217c <dcgettext@plt>
   27380:	ldr	r1, [pc, #64]	; 273c8 <__assert_fail@plt+0x14cdc>
   27384:	bl	1202c <printf@plt>
   27388:	mov	r2, #5
   2738c:	ldr	r1, [pc, #56]	; 273cc <__assert_fail@plt+0x14ce0>
   27390:	mov	r0, #0
   27394:	bl	1217c <dcgettext@plt>
   27398:	ldr	r2, [pc, #48]	; 273d0 <__assert_fail@plt+0x14ce4>
   2739c:	ldr	r1, [pc, #48]	; 273d4 <__assert_fail@plt+0x14ce8>
   273a0:	bl	1202c <printf@plt>
   273a4:	ldr	r1, [pc, #44]	; 273d8 <__assert_fail@plt+0x14cec>
   273a8:	mov	r2, #5
   273ac:	mov	r0, #0
   273b0:	bl	1217c <dcgettext@plt>
   273b4:	ldr	r1, [pc, #32]	; 273dc <__assert_fail@plt+0x14cf0>
   273b8:	pop	{r4, lr}
   273bc:	b	1202c <printf@plt>
   273c0:	andeq	lr, r4, ip, ror #10
   273c4:	andeq	ip, r3, r4, lsr #26
   273c8:	andeq	fp, r3, r1, lsl #22
   273cc:	andeq	ip, r3, r8, lsr sp
   273d0:	ldrdeq	fp, [r3], -sl
   273d4:	strdeq	fp, [r3], -ip
   273d8:	andeq	ip, r3, ip, asr #26
   273dc:	andeq	ip, r3, r3, ror sp
   273e0:	push	{r4, lr}
   273e4:	bl	2a340 <__assert_fail@plt+0x17c54>
   273e8:	cmp	r0, #0
   273ec:	popne	{r4, pc}
   273f0:	bl	27698 <__assert_fail@plt+0x14fac>
   273f4:	push	{r4, lr}
   273f8:	bl	2a340 <__assert_fail@plt+0x17c54>
   273fc:	cmp	r0, #0
   27400:	popne	{r4, pc}
   27404:	bl	27698 <__assert_fail@plt+0x14fac>
   27408:	b	273e0 <__assert_fail@plt+0x14cf4>
   2740c:	push	{r4, r5, r6, lr}
   27410:	mov	r5, r0
   27414:	mov	r4, r1
   27418:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2741c:	cmp	r0, #0
   27420:	popne	{r4, r5, r6, pc}
   27424:	adds	r4, r4, #0
   27428:	movne	r4, #1
   2742c:	cmp	r5, #0
   27430:	moveq	r4, #1
   27434:	cmp	r4, #0
   27438:	popeq	{r4, r5, r6, pc}
   2743c:	bl	27698 <__assert_fail@plt+0x14fac>
   27440:	push	{r4, lr}
   27444:	bl	36f5c <__assert_fail@plt+0x24870>
   27448:	cmp	r0, #0
   2744c:	popne	{r4, pc}
   27450:	bl	27698 <__assert_fail@plt+0x14fac>
   27454:	push	{r4, r5, r6, lr}
   27458:	mov	r6, r0
   2745c:	mov	r5, r1
   27460:	mov	r4, r2
   27464:	bl	2ad08 <__assert_fail@plt+0x1861c>
   27468:	cmp	r0, #0
   2746c:	popne	{r4, r5, r6, pc}
   27470:	cmp	r6, #0
   27474:	beq	27484 <__assert_fail@plt+0x14d98>
   27478:	cmp	r5, #0
   2747c:	cmpne	r4, #0
   27480:	popeq	{r4, r5, r6, pc}
   27484:	bl	27698 <__assert_fail@plt+0x14fac>
   27488:	b	27454 <__assert_fail@plt+0x14d68>
   2748c:	push	{r4, lr}
   27490:	bl	36f6c <__assert_fail@plt+0x24880>
   27494:	cmp	r0, #0
   27498:	popne	{r4, pc}
   2749c:	bl	27698 <__assert_fail@plt+0x14fac>
   274a0:	mov	r2, r1
   274a4:	mov	r1, r0
   274a8:	mov	r0, #0
   274ac:	b	27454 <__assert_fail@plt+0x14d68>
   274b0:	mov	r2, r1
   274b4:	mov	r1, r0
   274b8:	mov	r0, #0
   274bc:	b	2748c <__assert_fail@plt+0x14da0>
   274c0:	cmp	r0, #0
   274c4:	push	{r4, r5, r6, lr}
   274c8:	mov	r5, r1
   274cc:	ldr	r4, [r1]
   274d0:	bne	274fc <__assert_fail@plt+0x14e10>
   274d4:	cmp	r4, #0
   274d8:	bne	274ec <__assert_fail@plt+0x14e00>
   274dc:	mov	r4, #64	; 0x40
   274e0:	udiv	r4, r4, r2
   274e4:	cmp	r2, #64	; 0x40
   274e8:	addhi	r4, r4, #1
   274ec:	mov	r1, r4
   274f0:	bl	27454 <__assert_fail@plt+0x14d68>
   274f4:	str	r4, [r5]
   274f8:	pop	{r4, r5, r6, pc}
   274fc:	lsr	r3, r4, #1
   27500:	add	r3, r3, #1
   27504:	adds	r4, r4, r3
   27508:	bcc	274ec <__assert_fail@plt+0x14e00>
   2750c:	bl	27698 <__assert_fail@plt+0x14fac>
   27510:	mov	r2, #1
   27514:	b	274c0 <__assert_fail@plt+0x14dd4>
   27518:	ldr	ip, [r1]
   2751c:	push	{r4, r5, r6, r7, r8, lr}
   27520:	mov	r5, r1
   27524:	mvn	r8, r3
   27528:	lsr	r8, r8, #31
   2752c:	ldr	lr, [sp, #24]
   27530:	asr	r1, ip, #1
   27534:	adds	r4, ip, r1
   27538:	mvnvs	r4, #-2147483648	; 0x80000000
   2753c:	cmp	r3, r4
   27540:	movge	r1, #0
   27544:	andlt	r1, r8, #1
   27548:	cmp	r1, #0
   2754c:	movne	r4, r3
   27550:	smull	r6, r7, r4, lr
   27554:	cmp	r7, r6, asr #31
   27558:	bne	27570 <__assert_fail@plt+0x14e84>
   2755c:	cmp	r6, #63	; 0x3f
   27560:	mov	r1, r6
   27564:	bgt	27580 <__assert_fail@plt+0x14e94>
   27568:	mov	r1, #64	; 0x40
   2756c:	b	27574 <__assert_fail@plt+0x14e88>
   27570:	mvn	r1, #-2147483648	; 0x80000000
   27574:	sdiv	r4, r1, lr
   27578:	mls	r6, lr, r4, r1
   2757c:	sub	r1, r1, r6
   27580:	cmp	r0, #0
   27584:	sub	r6, r4, ip
   27588:	streq	r0, [r5]
   2758c:	cmp	r6, r2
   27590:	bge	275c4 <__assert_fail@plt+0x14ed8>
   27594:	adds	r4, ip, r2
   27598:	bvs	275c0 <__assert_fail@plt+0x14ed4>
   2759c:	cmp	r4, r3
   275a0:	movle	r3, #0
   275a4:	andgt	r3, r8, #1
   275a8:	cmp	r3, #0
   275ac:	bne	275c0 <__assert_fail@plt+0x14ed4>
   275b0:	smull	r2, r3, r4, lr
   275b4:	cmp	r3, r2, asr #31
   275b8:	mov	r1, r2
   275bc:	beq	275c4 <__assert_fail@plt+0x14ed8>
   275c0:	bl	27698 <__assert_fail@plt+0x14fac>
   275c4:	bl	2740c <__assert_fail@plt+0x14d20>
   275c8:	str	r4, [r5]
   275cc:	pop	{r4, r5, r6, r7, r8, pc}
   275d0:	push	{r4, lr}
   275d4:	bl	27fbc <__assert_fail@plt+0x158d0>
   275d8:	cmp	r0, #0
   275dc:	popne	{r4, pc}
   275e0:	bl	27698 <__assert_fail@plt+0x14fac>
   275e4:	mov	r1, #1
   275e8:	b	275d0 <__assert_fail@plt+0x14ee4>
   275ec:	push	{r4, lr}
   275f0:	bl	27fbc <__assert_fail@plt+0x158d0>
   275f4:	cmp	r0, #0
   275f8:	popne	{r4, pc}
   275fc:	bl	27698 <__assert_fail@plt+0x14fac>
   27600:	mov	r1, #1
   27604:	b	275ec <__assert_fail@plt+0x14f00>
   27608:	push	{r4, r5, r6, lr}
   2760c:	mov	r4, r1
   27610:	mov	r5, r0
   27614:	mov	r0, r1
   27618:	bl	273e0 <__assert_fail@plt+0x14cf4>
   2761c:	mov	r2, r4
   27620:	mov	r1, r5
   27624:	pop	{r4, r5, r6, lr}
   27628:	b	120f8 <memcpy@plt>
   2762c:	push	{r4, r5, r6, lr}
   27630:	mov	r4, r1
   27634:	mov	r5, r0
   27638:	mov	r0, r1
   2763c:	bl	273f4 <__assert_fail@plt+0x14d08>
   27640:	mov	r2, r4
   27644:	mov	r1, r5
   27648:	pop	{r4, r5, r6, lr}
   2764c:	b	120f8 <memcpy@plt>
   27650:	push	{r4, r5, r6, lr}
   27654:	mov	r5, r0
   27658:	add	r0, r1, #1
   2765c:	mov	r4, r1
   27660:	bl	273f4 <__assert_fail@plt+0x14d08>
   27664:	mov	r2, #0
   27668:	mov	r1, r5
   2766c:	strb	r2, [r0, r4]
   27670:	mov	r2, r4
   27674:	pop	{r4, r5, r6, lr}
   27678:	b	120f8 <memcpy@plt>
   2767c:	push	{r4, lr}
   27680:	mov	r4, r0
   27684:	bl	123bc <strlen@plt>
   27688:	add	r1, r0, #1
   2768c:	mov	r0, r4
   27690:	pop	{r4, lr}
   27694:	b	27608 <__assert_fail@plt+0x14f1c>
   27698:	ldr	r3, [pc, #44]	; 276cc <__assert_fail@plt+0x14fe0>
   2769c:	mov	r2, #5
   276a0:	mov	r0, #0
   276a4:	push	{r4, lr}
   276a8:	ldr	r1, [pc, #32]	; 276d0 <__assert_fail@plt+0x14fe4>
   276ac:	ldr	r4, [r3]
   276b0:	bl	1217c <dcgettext@plt>
   276b4:	mov	r3, r0
   276b8:	ldr	r2, [pc, #20]	; 276d4 <__assert_fail@plt+0x14fe8>
   276bc:	mov	r1, #0
   276c0:	mov	r0, r4
   276c4:	bl	122c0 <error@plt>
   276c8:	bl	12698 <abort@plt>
   276cc:	andeq	lr, r4, r4, lsl #10
   276d0:			; <UNDEFINED> instruction: 0x0003cdbf
   276d4:	andeq	sp, r3, fp, lsl r2
   276d8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   276dc:	mov	r4, #0
   276e0:	mov	r7, r0
   276e4:	mov	r9, r3
   276e8:	mov	r5, r1
   276ec:	mov	r8, r2
   276f0:	bl	12404 <__errno_location@plt>
   276f4:	mov	r6, r0
   276f8:	add	r1, sp, #4
   276fc:	str	r4, [r0]
   27700:	mov	r0, r7
   27704:	blx	r9
   27708:	ldr	r3, [sp, #4]
   2770c:	cmp	r3, r7
   27710:	beq	27740 <__assert_fail@plt+0x15054>
   27714:	cmp	r5, r4
   27718:	bne	27748 <__assert_fail@plt+0x1505c>
   2771c:	ldrb	r2, [r3]
   27720:	cmp	r2, r4
   27724:	movne	r0, r5
   27728:	bne	27770 <__assert_fail@plt+0x15084>
   2772c:	vcmp.f64	d0, #0.0
   27730:	vmrs	APSR_nzcv, fpscr
   27734:	bne	27758 <__assert_fail@plt+0x1506c>
   27738:	mov	r0, #1
   2773c:	b	27770 <__assert_fail@plt+0x15084>
   27740:	mov	r0, r4
   27744:	b	27764 <__assert_fail@plt+0x15078>
   27748:	vcmp.f64	d0, #0.0
   2774c:	vmrs	APSR_nzcv, fpscr
   27750:	moveq	r0, #1
   27754:	beq	2776c <__assert_fail@plt+0x15080>
   27758:	ldr	r0, [r6]
   2775c:	subs	r0, r0, #34	; 0x22
   27760:	movne	r0, #1
   27764:	cmp	r5, #0
   27768:	beq	27770 <__assert_fail@plt+0x15084>
   2776c:	str	r3, [r5]
   27770:	vstr	d0, [r8]
   27774:	add	sp, sp, #12
   27778:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2777c:	subs	r2, r2, #1
   27780:	mov	ip, r0
   27784:	mov	r0, #0
   27788:	bxcc	lr
   2778c:	push	{r4, r5, lr}
   27790:	mov	lr, #0
   27794:	sub	r2, r2, #1
   27798:	ldr	r3, [ip]
   2779c:	umull	r5, r4, r1, r3
   277a0:	cmp	r4, lr
   277a4:	mvnne	r3, #0
   277a8:	movne	lr, #1
   277ac:	muleq	r3, r1, r3
   277b0:	cmn	r2, #1
   277b4:	orr	r0, r0, lr
   277b8:	str	r3, [ip]
   277bc:	bne	27790 <__assert_fail@plt+0x150a4>
   277c0:	pop	{r4, r5, pc}
   277c4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277c8:	cmp	r2, #36	; 0x24
   277cc:	ldr	r6, [sp, #48]	; 0x30
   277d0:	bls	277e8 <__assert_fail@plt+0x150fc>
   277d4:	ldr	r3, [pc, #840]	; 27b24 <__assert_fail@plt+0x15438>
   277d8:	mov	r2, #84	; 0x54
   277dc:	ldr	r1, [pc, #836]	; 27b28 <__assert_fail@plt+0x1543c>
   277e0:	ldr	r0, [pc, #836]	; 27b2c <__assert_fail@plt+0x15440>
   277e4:	bl	126ec <__assert_fail@plt>
   277e8:	cmp	r1, #0
   277ec:	mov	r7, r1
   277f0:	mov	r4, r0
   277f4:	mov	fp, r2
   277f8:	mov	r8, r3
   277fc:	moveq	r7, sp
   27800:	bl	12404 <__errno_location@plt>
   27804:	mov	r3, #0
   27808:	mov	sl, r0
   2780c:	str	r3, [r0]
   27810:	bl	12374 <__ctype_b_loc@plt>
   27814:	ldrb	r9, [r4]
   27818:	mov	r3, r4
   2781c:	ldr	r1, [r0]
   27820:	lsl	r2, r9, #1
   27824:	ldrh	r5, [r1, r2]
   27828:	ands	r5, r5, #8192	; 0x2000
   2782c:	bne	27848 <__assert_fail@plt+0x1515c>
   27830:	cmp	r9, #45	; 0x2d
   27834:	bne	27850 <__assert_fail@plt+0x15164>
   27838:	mov	r5, #4
   2783c:	mov	r0, r5
   27840:	add	sp, sp, #12
   27844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27848:	ldrb	r9, [r3, #1]!
   2784c:	b	27820 <__assert_fail@plt+0x15134>
   27850:	mov	r2, fp
   27854:	mov	r1, r7
   27858:	mov	r0, r4
   2785c:	bl	123b0 <strtoul@plt>
   27860:	ldr	r9, [r7]
   27864:	str	r0, [sp, #4]
   27868:	cmp	r9, r4
   2786c:	bne	278cc <__assert_fail@plt+0x151e0>
   27870:	cmp	r6, #0
   27874:	beq	27838 <__assert_fail@plt+0x1514c>
   27878:	ldrb	r1, [r4]
   2787c:	cmp	r1, #0
   27880:	beq	27838 <__assert_fail@plt+0x1514c>
   27884:	mov	r0, r6
   27888:	bl	123c8 <strchr@plt>
   2788c:	cmp	r0, #0
   27890:	movne	r3, #1
   27894:	strne	r3, [sp, #4]
   27898:	beq	27838 <__assert_fail@plt+0x1514c>
   2789c:	ldrb	r4, [r9]
   278a0:	cmp	r4, #0
   278a4:	beq	27adc <__assert_fail@plt+0x153f0>
   278a8:	mov	r1, r4
   278ac:	mov	r0, r6
   278b0:	bl	123c8 <strchr@plt>
   278b4:	cmp	r0, #0
   278b8:	bne	278f4 <__assert_fail@plt+0x15208>
   278bc:	ldr	r3, [sp, #4]
   278c0:	orr	r5, r5, #2
   278c4:	str	r3, [r8]
   278c8:	b	2783c <__assert_fail@plt+0x15150>
   278cc:	ldr	r5, [sl]
   278d0:	cmp	r5, #0
   278d4:	beq	278e4 <__assert_fail@plt+0x151f8>
   278d8:	cmp	r5, #34	; 0x22
   278dc:	bne	27838 <__assert_fail@plt+0x1514c>
   278e0:	mov	r5, #1
   278e4:	cmp	r6, #0
   278e8:	streq	r0, [r8]
   278ec:	bne	2789c <__assert_fail@plt+0x151b0>
   278f0:	b	2783c <__assert_fail@plt+0x15150>
   278f4:	cmp	r4, #84	; 0x54
   278f8:	beq	2794c <__assert_fail@plt+0x15260>
   278fc:	bhi	27934 <__assert_fail@plt+0x15248>
   27900:	cmp	r4, #75	; 0x4b
   27904:	beq	2794c <__assert_fail@plt+0x15260>
   27908:	bhi	27924 <__assert_fail@plt+0x15238>
   2790c:	cmp	r4, #69	; 0x45
   27910:	beq	2794c <__assert_fail@plt+0x15260>
   27914:	cmp	r4, #71	; 0x47
   27918:	beq	2794c <__assert_fail@plt+0x15260>
   2791c:	mov	r6, #1
   27920:	b	27a08 <__assert_fail@plt+0x1531c>
   27924:	cmp	r4, #77	; 0x4d
   27928:	beq	2794c <__assert_fail@plt+0x15260>
   2792c:	cmp	r4, #80	; 0x50
   27930:	b	27918 <__assert_fail@plt+0x1522c>
   27934:	cmp	r4, #103	; 0x67
   27938:	beq	2794c <__assert_fail@plt+0x15260>
   2793c:	bhi	279e0 <__assert_fail@plt+0x152f4>
   27940:	sub	r3, r4, #89	; 0x59
   27944:	cmp	r3, #1
   27948:	bhi	2791c <__assert_fail@plt+0x15230>
   2794c:	mov	r1, #48	; 0x30
   27950:	mov	r0, r6
   27954:	bl	123c8 <strchr@plt>
   27958:	cmp	r0, #0
   2795c:	beq	2791c <__assert_fail@plt+0x15230>
   27960:	ldrb	r3, [r9, #1]
   27964:	cmp	r3, #68	; 0x44
   27968:	moveq	r6, #2
   2796c:	moveq	r1, #1000	; 0x3e8
   27970:	beq	27990 <__assert_fail@plt+0x152a4>
   27974:	cmp	r3, #105	; 0x69
   27978:	beq	279f8 <__assert_fail@plt+0x1530c>
   2797c:	cmp	r3, #66	; 0x42
   27980:	moveq	r6, #2
   27984:	movne	r6, #1
   27988:	moveq	r1, #1000	; 0x3e8
   2798c:	movne	r1, #1024	; 0x400
   27990:	cmp	r4, #89	; 0x59
   27994:	beq	27b14 <__assert_fail@plt+0x15428>
   27998:	bhi	27a30 <__assert_fail@plt+0x15344>
   2799c:	cmp	r4, #75	; 0x4b
   279a0:	beq	27a70 <__assert_fail@plt+0x15384>
   279a4:	bhi	27a10 <__assert_fail@plt+0x15324>
   279a8:	cmp	r4, #69	; 0x45
   279ac:	beq	27ae8 <__assert_fail@plt+0x153fc>
   279b0:	cmp	r4, #71	; 0x47
   279b4:	beq	27af4 <__assert_fail@plt+0x15408>
   279b8:	cmp	r4, #66	; 0x42
   279bc:	bne	278bc <__assert_fail@plt+0x151d0>
   279c0:	ldr	r3, [sp, #4]
   279c4:	lsrs	r2, r3, #22
   279c8:	movne	r0, #1
   279cc:	moveq	r0, #0
   279d0:	bne	27ab4 <__assert_fail@plt+0x153c8>
   279d4:	lsl	r3, r3, #10
   279d8:	str	r3, [sp, #4]
   279dc:	b	27ac0 <__assert_fail@plt+0x153d4>
   279e0:	cmp	r4, #109	; 0x6d
   279e4:	beq	2794c <__assert_fail@plt+0x15260>
   279e8:	cmp	r4, #116	; 0x74
   279ec:	beq	2794c <__assert_fail@plt+0x15260>
   279f0:	cmp	r4, #107	; 0x6b
   279f4:	b	27918 <__assert_fail@plt+0x1522c>
   279f8:	ldrb	r3, [r9, #2]
   279fc:	cmp	r3, #66	; 0x42
   27a00:	movne	r6, #1
   27a04:	moveq	r6, #3
   27a08:	mov	r1, #1024	; 0x400
   27a0c:	b	27990 <__assert_fail@plt+0x152a4>
   27a10:	cmp	r4, #80	; 0x50
   27a14:	beq	27afc <__assert_fail@plt+0x15410>
   27a18:	cmp	r4, #84	; 0x54
   27a1c:	beq	27b04 <__assert_fail@plt+0x15418>
   27a20:	cmp	r4, #77	; 0x4d
   27a24:	bne	278bc <__assert_fail@plt+0x151d0>
   27a28:	mov	r2, #2
   27a2c:	b	27aec <__assert_fail@plt+0x15400>
   27a30:	cmp	r4, #103	; 0x67
   27a34:	beq	27af4 <__assert_fail@plt+0x15408>
   27a38:	bhi	27a5c <__assert_fail@plt+0x15370>
   27a3c:	cmp	r4, #98	; 0x62
   27a40:	beq	27a9c <__assert_fail@plt+0x153b0>
   27a44:	cmp	r4, #99	; 0x63
   27a48:	beq	27b1c <__assert_fail@plt+0x15430>
   27a4c:	cmp	r4, #90	; 0x5a
   27a50:	bne	278bc <__assert_fail@plt+0x151d0>
   27a54:	mov	r2, #7
   27a58:	b	27aec <__assert_fail@plt+0x15400>
   27a5c:	cmp	r4, #109	; 0x6d
   27a60:	beq	27a28 <__assert_fail@plt+0x1533c>
   27a64:	bhi	27a78 <__assert_fail@plt+0x1538c>
   27a68:	cmp	r4, #107	; 0x6b
   27a6c:	bne	278bc <__assert_fail@plt+0x151d0>
   27a70:	mov	r2, #1
   27a74:	b	27aec <__assert_fail@plt+0x15400>
   27a78:	cmp	r4, #116	; 0x74
   27a7c:	beq	27b04 <__assert_fail@plt+0x15418>
   27a80:	cmp	r4, #119	; 0x77
   27a84:	bne	278bc <__assert_fail@plt+0x151d0>
   27a88:	ldr	r3, [sp, #4]
   27a8c:	lsrs	r0, r3, #31
   27a90:	lsleq	r3, r3, #1
   27a94:	beq	279d8 <__assert_fail@plt+0x152ec>
   27a98:	b	27ab4 <__assert_fail@plt+0x153c8>
   27a9c:	ldr	r3, [sp, #4]
   27aa0:	lsrs	r2, r3, #23
   27aa4:	movne	r0, #1
   27aa8:	moveq	r0, #0
   27aac:	lsleq	r3, r3, #9
   27ab0:	beq	279d8 <__assert_fail@plt+0x152ec>
   27ab4:	mvn	r3, #0
   27ab8:	mov	r0, #1
   27abc:	str	r3, [sp, #4]
   27ac0:	ldr	r3, [r7]
   27ac4:	orr	r5, r5, r0
   27ac8:	add	r2, r3, r6
   27acc:	str	r2, [r7]
   27ad0:	ldrb	r3, [r3, r6]
   27ad4:	cmp	r3, #0
   27ad8:	orrne	r5, r5, #2
   27adc:	ldr	r3, [sp, #4]
   27ae0:	str	r3, [r8]
   27ae4:	b	2783c <__assert_fail@plt+0x15150>
   27ae8:	mov	r2, #6
   27aec:	add	r0, sp, #4
   27af0:	b	27b0c <__assert_fail@plt+0x15420>
   27af4:	mov	r2, #3
   27af8:	b	27aec <__assert_fail@plt+0x15400>
   27afc:	mov	r2, #5
   27b00:	b	27aec <__assert_fail@plt+0x15400>
   27b04:	mov	r2, #4
   27b08:	add	r0, sp, r2
   27b0c:	bl	2777c <__assert_fail@plt+0x15090>
   27b10:	b	27ac0 <__assert_fail@plt+0x153d4>
   27b14:	mov	r2, #8
   27b18:	b	27aec <__assert_fail@plt+0x15400>
   27b1c:	mov	r0, #0
   27b20:	b	27ac0 <__assert_fail@plt+0x153d4>
   27b24:	ldrdeq	ip, [r3], -r0
   27b28:	ldrdeq	ip, [r3], -r9
   27b2c:	andeq	ip, r3, r3, ror #27
   27b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b34:	asr	fp, r1, #31
   27b38:	mov	lr, #0
   27b3c:	mov	sl, r1
   27b40:	subs	r2, r2, #1
   27b44:	bcs	27b50 <__assert_fail@plt+0x15464>
   27b48:	mov	r0, lr
   27b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b50:	ldm	r0, {r3, ip}
   27b54:	mov	r6, #0
   27b58:	mov	r7, #0
   27b5c:	cmp	ip, #0
   27b60:	beq	27b80 <__assert_fail@plt+0x15494>
   27b64:	umull	r8, r9, r3, r1
   27b68:	mov	r5, #0
   27b6c:	mov	r4, r9
   27b70:	umlal	r4, r5, ip, r1
   27b74:	cmp	r5, #0
   27b78:	movne	r6, #1
   27b7c:	movne	r7, #0
   27b80:	orrs	r4, r6, r7
   27b84:	mvnne	r4, #0
   27b88:	mvnne	r5, #0
   27b8c:	muleq	r4, r3, fp
   27b90:	movne	r3, #1
   27b94:	mlaeq	ip, r1, ip, r4
   27b98:	umulleq	r4, r5, r3, r1
   27b9c:	moveq	r3, #0
   27ba0:	orr	lr, lr, r3
   27ba4:	addeq	r5, ip, r5
   27ba8:	strd	r4, [r0]
   27bac:	b	27b40 <__assert_fail@plt+0x15454>
   27bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bb4:	cmp	r2, #36	; 0x24
   27bb8:	sub	sp, sp, #20
   27bbc:	ldr	r6, [sp, #56]	; 0x38
   27bc0:	bls	27bd8 <__assert_fail@plt+0x154ec>
   27bc4:	ldr	r3, [pc, #888]	; 27f44 <__assert_fail@plt+0x15858>
   27bc8:	mov	r2, #84	; 0x54
   27bcc:	ldr	r1, [pc, #884]	; 27f48 <__assert_fail@plt+0x1585c>
   27bd0:	ldr	r0, [pc, #884]	; 27f4c <__assert_fail@plt+0x15860>
   27bd4:	bl	126ec <__assert_fail@plt>
   27bd8:	cmp	r1, #0
   27bdc:	mov	r7, r1
   27be0:	mov	r4, r0
   27be4:	mov	fp, r2
   27be8:	mov	r8, r3
   27bec:	addeq	r7, sp, #4
   27bf0:	bl	12404 <__errno_location@plt>
   27bf4:	mov	r3, #0
   27bf8:	mov	sl, r0
   27bfc:	str	r3, [r0]
   27c00:	bl	12374 <__ctype_b_loc@plt>
   27c04:	ldrb	r9, [r4]
   27c08:	mov	r3, r4
   27c0c:	ldr	r1, [r0]
   27c10:	lsl	r2, r9, #1
   27c14:	ldrh	r5, [r1, r2]
   27c18:	ands	r5, r5, #8192	; 0x2000
   27c1c:	bne	27c38 <__assert_fail@plt+0x1554c>
   27c20:	cmp	r9, #45	; 0x2d
   27c24:	bne	27c40 <__assert_fail@plt+0x15554>
   27c28:	mov	r5, #4
   27c2c:	mov	r0, r5
   27c30:	add	sp, sp, #20
   27c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c38:	ldrb	r9, [r3, #1]!
   27c3c:	b	27c10 <__assert_fail@plt+0x15524>
   27c40:	mov	r2, fp
   27c44:	mov	r1, r7
   27c48:	mov	r0, r4
   27c4c:	bl	124a0 <strtoumax@plt>
   27c50:	ldr	r9, [r7]
   27c54:	strd	r0, [sp, #8]
   27c58:	cmp	r9, r4
   27c5c:	bne	27cc0 <__assert_fail@plt+0x155d4>
   27c60:	cmp	r6, #0
   27c64:	beq	27c28 <__assert_fail@plt+0x1553c>
   27c68:	ldrb	r1, [r4]
   27c6c:	cmp	r1, #0
   27c70:	beq	27c28 <__assert_fail@plt+0x1553c>
   27c74:	mov	r0, r6
   27c78:	bl	123c8 <strchr@plt>
   27c7c:	cmp	r0, #0
   27c80:	movne	r2, #1
   27c84:	movne	r3, #0
   27c88:	strdne	r2, [sp, #8]
   27c8c:	beq	27c28 <__assert_fail@plt+0x1553c>
   27c90:	ldrb	r4, [r9]
   27c94:	cmp	r4, #0
   27c98:	beq	27efc <__assert_fail@plt+0x15810>
   27c9c:	mov	r1, r4
   27ca0:	mov	r0, r6
   27ca4:	bl	123c8 <strchr@plt>
   27ca8:	cmp	r0, #0
   27cac:	bne	27ce8 <__assert_fail@plt+0x155fc>
   27cb0:	ldrd	r2, [sp, #8]
   27cb4:	orr	r5, r5, #2
   27cb8:	strd	r2, [r8]
   27cbc:	b	27c2c <__assert_fail@plt+0x15540>
   27cc0:	ldr	r5, [sl]
   27cc4:	cmp	r5, #0
   27cc8:	beq	27cd8 <__assert_fail@plt+0x155ec>
   27ccc:	cmp	r5, #34	; 0x22
   27cd0:	bne	27c28 <__assert_fail@plt+0x1553c>
   27cd4:	mov	r5, #1
   27cd8:	cmp	r6, #0
   27cdc:	strdeq	r0, [r8]
   27ce0:	bne	27c90 <__assert_fail@plt+0x155a4>
   27ce4:	b	27c2c <__assert_fail@plt+0x15540>
   27ce8:	cmp	r4, #84	; 0x54
   27cec:	beq	27d40 <__assert_fail@plt+0x15654>
   27cf0:	bhi	27d28 <__assert_fail@plt+0x1563c>
   27cf4:	cmp	r4, #75	; 0x4b
   27cf8:	beq	27d40 <__assert_fail@plt+0x15654>
   27cfc:	bhi	27d18 <__assert_fail@plt+0x1562c>
   27d00:	cmp	r4, #69	; 0x45
   27d04:	beq	27d40 <__assert_fail@plt+0x15654>
   27d08:	cmp	r4, #71	; 0x47
   27d0c:	beq	27d40 <__assert_fail@plt+0x15654>
   27d10:	mov	r6, #1
   27d14:	b	27e04 <__assert_fail@plt+0x15718>
   27d18:	cmp	r4, #77	; 0x4d
   27d1c:	beq	27d40 <__assert_fail@plt+0x15654>
   27d20:	cmp	r4, #80	; 0x50
   27d24:	b	27d0c <__assert_fail@plt+0x15620>
   27d28:	cmp	r4, #103	; 0x67
   27d2c:	beq	27d40 <__assert_fail@plt+0x15654>
   27d30:	bhi	27ddc <__assert_fail@plt+0x156f0>
   27d34:	sub	r3, r4, #89	; 0x59
   27d38:	cmp	r3, #1
   27d3c:	bhi	27d10 <__assert_fail@plt+0x15624>
   27d40:	mov	r1, #48	; 0x30
   27d44:	mov	r0, r6
   27d48:	bl	123c8 <strchr@plt>
   27d4c:	cmp	r0, #0
   27d50:	beq	27d10 <__assert_fail@plt+0x15624>
   27d54:	ldrb	r3, [r9, #1]
   27d58:	cmp	r3, #68	; 0x44
   27d5c:	moveq	r6, #2
   27d60:	moveq	r1, #1000	; 0x3e8
   27d64:	beq	27d84 <__assert_fail@plt+0x15698>
   27d68:	cmp	r3, #105	; 0x69
   27d6c:	beq	27df4 <__assert_fail@plt+0x15708>
   27d70:	cmp	r3, #66	; 0x42
   27d74:	moveq	r6, #2
   27d78:	movne	r6, #1
   27d7c:	moveq	r1, #1000	; 0x3e8
   27d80:	movne	r1, #1024	; 0x400
   27d84:	cmp	r4, #89	; 0x59
   27d88:	beq	27f2c <__assert_fail@plt+0x15840>
   27d8c:	bhi	27e2c <__assert_fail@plt+0x15740>
   27d90:	cmp	r4, #75	; 0x4b
   27d94:	beq	27e6c <__assert_fail@plt+0x15780>
   27d98:	bhi	27e0c <__assert_fail@plt+0x15720>
   27d9c:	cmp	r4, #69	; 0x45
   27da0:	beq	27f08 <__assert_fail@plt+0x1581c>
   27da4:	cmp	r4, #71	; 0x47
   27da8:	beq	27f14 <__assert_fail@plt+0x15828>
   27dac:	cmp	r4, #66	; 0x42
   27db0:	bne	27cb0 <__assert_fail@plt+0x155c4>
   27db4:	ldrd	r2, [sp, #8]
   27db8:	mov	r0, #0
   27dbc:	lsr	r1, r3, #22
   27dc0:	cmp	r1, r0
   27dc4:	bne	27ed0 <__assert_fail@plt+0x157e4>
   27dc8:	lsl	r3, r3, #10
   27dcc:	orr	r3, r3, r2, lsr #22
   27dd0:	lsl	r2, r2, #10
   27dd4:	strd	r2, [sp, #8]
   27dd8:	b	27ee0 <__assert_fail@plt+0x157f4>
   27ddc:	cmp	r4, #109	; 0x6d
   27de0:	beq	27d40 <__assert_fail@plt+0x15654>
   27de4:	cmp	r4, #116	; 0x74
   27de8:	beq	27d40 <__assert_fail@plt+0x15654>
   27dec:	cmp	r4, #107	; 0x6b
   27df0:	b	27d0c <__assert_fail@plt+0x15620>
   27df4:	ldrb	r3, [r9, #2]
   27df8:	cmp	r3, #66	; 0x42
   27dfc:	movne	r6, #1
   27e00:	moveq	r6, #3
   27e04:	mov	r1, #1024	; 0x400
   27e08:	b	27d84 <__assert_fail@plt+0x15698>
   27e0c:	cmp	r4, #80	; 0x50
   27e10:	beq	27f1c <__assert_fail@plt+0x15830>
   27e14:	cmp	r4, #84	; 0x54
   27e18:	beq	27f24 <__assert_fail@plt+0x15838>
   27e1c:	cmp	r4, #77	; 0x4d
   27e20:	bne	27cb0 <__assert_fail@plt+0x155c4>
   27e24:	mov	r2, #2
   27e28:	b	27f0c <__assert_fail@plt+0x15820>
   27e2c:	cmp	r4, #103	; 0x67
   27e30:	beq	27f14 <__assert_fail@plt+0x15828>
   27e34:	bhi	27e58 <__assert_fail@plt+0x1576c>
   27e38:	cmp	r4, #98	; 0x62
   27e3c:	beq	27eb0 <__assert_fail@plt+0x157c4>
   27e40:	cmp	r4, #99	; 0x63
   27e44:	beq	27f3c <__assert_fail@plt+0x15850>
   27e48:	cmp	r4, #90	; 0x5a
   27e4c:	bne	27cb0 <__assert_fail@plt+0x155c4>
   27e50:	mov	r2, #7
   27e54:	b	27f0c <__assert_fail@plt+0x15820>
   27e58:	cmp	r4, #109	; 0x6d
   27e5c:	beq	27e24 <__assert_fail@plt+0x15738>
   27e60:	bhi	27e74 <__assert_fail@plt+0x15788>
   27e64:	cmp	r4, #107	; 0x6b
   27e68:	bne	27cb0 <__assert_fail@plt+0x155c4>
   27e6c:	mov	r2, #1
   27e70:	b	27f0c <__assert_fail@plt+0x15820>
   27e74:	cmp	r4, #116	; 0x74
   27e78:	beq	27f24 <__assert_fail@plt+0x15838>
   27e7c:	cmp	r4, #119	; 0x77
   27e80:	bne	27cb0 <__assert_fail@plt+0x155c4>
   27e84:	mov	r0, #0
   27e88:	ldr	r3, [sp, #8]
   27e8c:	ldr	r2, [sp, #12]
   27e90:	lsr	r1, r2, #31
   27e94:	cmp	r1, r0
   27e98:	bne	27ed0 <__assert_fail@plt+0x157e4>
   27e9c:	adds	r3, r3, r3
   27ea0:	adc	r2, r2, r2
   27ea4:	str	r3, [sp, #8]
   27ea8:	str	r2, [sp, #12]
   27eac:	b	27ee0 <__assert_fail@plt+0x157f4>
   27eb0:	ldrd	r2, [sp, #8]
   27eb4:	mov	r0, #0
   27eb8:	lsr	r1, r3, #23
   27ebc:	cmp	r1, r0
   27ec0:	lsleq	r3, r3, #9
   27ec4:	orreq	r3, r3, r2, lsr #23
   27ec8:	lsleq	r2, r2, #9
   27ecc:	beq	27dd4 <__assert_fail@plt+0x156e8>
   27ed0:	mvn	r2, #0
   27ed4:	mvn	r3, #0
   27ed8:	mov	r0, #1
   27edc:	strd	r2, [sp, #8]
   27ee0:	ldr	r3, [r7]
   27ee4:	orr	r5, r5, r0
   27ee8:	add	r2, r3, r6
   27eec:	str	r2, [r7]
   27ef0:	ldrb	r3, [r3, r6]
   27ef4:	cmp	r3, #0
   27ef8:	orrne	r5, r5, #2
   27efc:	ldrd	r2, [sp, #8]
   27f00:	strd	r2, [r8]
   27f04:	b	27c2c <__assert_fail@plt+0x15540>
   27f08:	mov	r2, #6
   27f0c:	add	r0, sp, #8
   27f10:	b	27f34 <__assert_fail@plt+0x15848>
   27f14:	mov	r2, #3
   27f18:	b	27f0c <__assert_fail@plt+0x15820>
   27f1c:	mov	r2, #5
   27f20:	b	27f0c <__assert_fail@plt+0x15820>
   27f24:	mov	r2, #4
   27f28:	b	27f0c <__assert_fail@plt+0x15820>
   27f2c:	mov	r2, #8
   27f30:	add	r0, sp, r2
   27f34:	bl	27b30 <__assert_fail@plt+0x15444>
   27f38:	b	27ee0 <__assert_fail@plt+0x157f4>
   27f3c:	mov	r0, #0
   27f40:	b	27ee0 <__assert_fail@plt+0x157f4>
   27f44:	andeq	ip, r3, r9, lsl #28
   27f48:	ldrdeq	ip, [r3], -r9
   27f4c:	andeq	ip, r3, r3, ror #27
   27f50:	ldr	r3, [pc, #96]	; 27fb8 <__assert_fail@plt+0x158cc>
   27f54:	push	{r0, r1, r4, lr}
   27f58:	mov	r4, #0
   27f5c:	add	r1, sp, #4
   27f60:	mov	r0, sp
   27f64:	str	r4, [sp]
   27f68:	ldr	r2, [r3]
   27f6c:	str	r4, [sp, #4]
   27f70:	bl	12638 <getline@plt>
   27f74:	cmp	r0, #0
   27f78:	ble	27fa4 <__assert_fail@plt+0x158b8>
   27f7c:	ldr	r3, [sp]
   27f80:	sub	r0, r0, #1
   27f84:	ldrb	r2, [r3, r0]
   27f88:	cmp	r2, #10
   27f8c:	strbeq	r4, [r3, r0]
   27f90:	ldr	r0, [sp]
   27f94:	bl	1250c <rpmatch@plt>
   27f98:	cmp	r0, #0
   27f9c:	movle	r4, #0
   27fa0:	movgt	r4, #1
   27fa4:	ldr	r0, [sp]
   27fa8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   27fac:	mov	r0, r4
   27fb0:	add	sp, sp, #8
   27fb4:	pop	{r4, pc}
   27fb8:	andeq	lr, r4, r8, ror #10
   27fbc:	cmp	r1, #0
   27fc0:	cmpne	r0, #0
   27fc4:	beq	27ffc <__assert_fail@plt+0x15910>
   27fc8:	push	{r4, r5, r6, lr}
   27fcc:	umull	r4, r5, r0, r1
   27fd0:	adds	r3, r5, #0
   27fd4:	movne	r3, #1
   27fd8:	cmp	r4, #0
   27fdc:	blt	27fe8 <__assert_fail@plt+0x158fc>
   27fe0:	cmp	r3, #0
   27fe4:	beq	28008 <__assert_fail@plt+0x1591c>
   27fe8:	bl	12404 <__errno_location@plt>
   27fec:	mov	r3, #12
   27ff0:	str	r3, [r0]
   27ff4:	mov	r0, #0
   27ff8:	pop	{r4, r5, r6, pc}
   27ffc:	mov	r1, #1
   28000:	mov	r0, r1
   28004:	b	11f84 <calloc@plt>
   28008:	pop	{r4, r5, r6, lr}
   2800c:	b	28004 <__assert_fail@plt+0x15918>
   28010:	cmp	r0, #0
   28014:	bxlt	lr
   28018:	push	{r4, lr}
   2801c:	bl	126a4 <close@plt>
   28020:	cmp	r0, #0
   28024:	popeq	{r4, pc}
   28028:	ldr	r3, [pc, #12]	; 2803c <__assert_fail@plt+0x15950>
   2802c:	mov	r2, #64	; 0x40
   28030:	ldr	r1, [pc, #8]	; 28040 <__assert_fail@plt+0x15954>
   28034:	ldr	r0, [pc, #8]	; 28044 <__assert_fail@plt+0x15958>
   28038:	bl	126ec <__assert_fail@plt>
   2803c:	andeq	ip, r3, r4, lsl lr
   28040:	andeq	ip, r3, r8, lsr #28
   28044:	andeq	ip, r3, r5, lsr lr
   28048:	push	{r4, r5, r6, lr}
   2804c:	mov	r2, #18688	; 0x4900
   28050:	mov	r4, r0
   28054:	ldr	r0, [r0]
   28058:	bl	123e0 <openat64@plt>
   2805c:	subs	r5, r0, #0
   28060:	blt	28078 <__assert_fail@plt+0x1598c>
   28064:	ldr	r0, [r4]
   28068:	bl	28010 <__assert_fail@plt+0x15924>
   2806c:	mov	r0, #0
   28070:	str	r5, [r4]
   28074:	pop	{r4, r5, r6, pc}
   28078:	mvn	r0, #0
   2807c:	pop	{r4, r5, r6, pc}
   28080:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28084:	mov	r5, r0
   28088:	bl	121e8 <chdir@plt>
   2808c:	subs	r4, r0, #0
   28090:	beq	28280 <__assert_fail@plt+0x15b94>
   28094:	bl	12404 <__errno_location@plt>
   28098:	ldr	r3, [r0]
   2809c:	mov	r7, r0
   280a0:	cmp	r3, #36	; 0x24
   280a4:	bne	28280 <__assert_fail@plt+0x15b94>
   280a8:	mov	r0, r5
   280ac:	bl	123bc <strlen@plt>
   280b0:	mvn	r3, #99	; 0x63
   280b4:	subs	r6, r0, #0
   280b8:	str	r3, [sp, #4]
   280bc:	bne	280d4 <__assert_fail@plt+0x159e8>
   280c0:	ldr	r3, [pc, #476]	; 282a4 <__assert_fail@plt+0x15bb8>
   280c4:	mov	r2, #126	; 0x7e
   280c8:	ldr	r1, [pc, #472]	; 282a8 <__assert_fail@plt+0x15bbc>
   280cc:	ldr	r0, [pc, #472]	; 282ac <__assert_fail@plt+0x15bc0>
   280d0:	bl	126ec <__assert_fail@plt>
   280d4:	cmp	r6, #4096	; 0x1000
   280d8:	bcs	280f0 <__assert_fail@plt+0x15a04>
   280dc:	ldr	r3, [pc, #448]	; 282a4 <__assert_fail@plt+0x15bb8>
   280e0:	mov	r2, #127	; 0x7f
   280e4:	ldr	r1, [pc, #444]	; 282a8 <__assert_fail@plt+0x15bbc>
   280e8:	ldr	r0, [pc, #448]	; 282b0 <__assert_fail@plt+0x15bc4>
   280ec:	b	280d0 <__assert_fail@plt+0x159e4>
   280f0:	ldr	r1, [pc, #444]	; 282b4 <__assert_fail@plt+0x15bc8>
   280f4:	mov	r0, r5
   280f8:	bl	126e0 <strspn@plt>
   280fc:	cmp	r0, #2
   28100:	mov	r4, r0
   28104:	bne	28180 <__assert_fail@plt+0x15a94>
   28108:	sub	r2, r6, #3
   2810c:	mov	r1, #47	; 0x2f
   28110:	add	r0, r5, #3
   28114:	bl	124ac <memchr@plt>
   28118:	subs	r4, r0, #0
   2811c:	bne	28128 <__assert_fail@plt+0x15a3c>
   28120:	mvn	r4, #0
   28124:	b	28280 <__assert_fail@plt+0x15b94>
   28128:	mov	r3, #0
   2812c:	mov	r1, r5
   28130:	add	r0, sp, #4
   28134:	strb	r3, [r4]
   28138:	bl	28048 <__assert_fail@plt+0x1595c>
   2813c:	mov	r3, #47	; 0x2f
   28140:	cmp	r0, #0
   28144:	strb	r3, [r4]
   28148:	bne	281a4 <__assert_fail@plt+0x15ab8>
   2814c:	add	r4, r4, #1
   28150:	ldr	r1, [pc, #348]	; 282b4 <__assert_fail@plt+0x15bc8>
   28154:	mov	r0, r4
   28158:	bl	126e0 <strspn@plt>
   2815c:	add	r4, r4, r0
   28160:	ldrb	r3, [r4]
   28164:	cmp	r3, #47	; 0x2f
   28168:	bne	281b8 <__assert_fail@plt+0x15acc>
   2816c:	ldr	r3, [pc, #304]	; 282a4 <__assert_fail@plt+0x15bb8>
   28170:	mov	r2, #162	; 0xa2
   28174:	ldr	r1, [pc, #300]	; 282a8 <__assert_fail@plt+0x15bbc>
   28178:	ldr	r0, [pc, #312]	; 282b8 <__assert_fail@plt+0x15bcc>
   2817c:	b	280d0 <__assert_fail@plt+0x159e4>
   28180:	cmp	r0, #0
   28184:	moveq	r4, r5
   28188:	beq	28160 <__assert_fail@plt+0x15a74>
   2818c:	ldr	r1, [pc, #288]	; 282b4 <__assert_fail@plt+0x15bc8>
   28190:	add	r0, sp, #4
   28194:	bl	28048 <__assert_fail@plt+0x1595c>
   28198:	cmp	r0, #0
   2819c:	addeq	r4, r5, r4
   281a0:	beq	28160 <__assert_fail@plt+0x15a74>
   281a4:	ldr	r4, [r7]
   281a8:	ldr	r0, [sp, #4]
   281ac:	bl	28010 <__assert_fail@plt+0x15924>
   281b0:	str	r4, [r7]
   281b4:	b	28120 <__assert_fail@plt+0x15a34>
   281b8:	add	r6, r5, r6
   281bc:	cmp	r4, r6
   281c0:	movls	r8, #47	; 0x2f
   281c4:	ldrls	r9, [pc, #232]	; 282b4 <__assert_fail@plt+0x15bc8>
   281c8:	bls	28254 <__assert_fail@plt+0x15b68>
   281cc:	ldr	r3, [pc, #208]	; 282a4 <__assert_fail@plt+0x15bb8>
   281d0:	mov	r2, #163	; 0xa3
   281d4:	ldr	r1, [pc, #204]	; 282a8 <__assert_fail@plt+0x15bbc>
   281d8:	ldr	r0, [pc, #220]	; 282bc <__assert_fail@plt+0x15bd0>
   281dc:	b	280d0 <__assert_fail@plt+0x159e4>
   281e0:	mov	r2, #4096	; 0x1000
   281e4:	mov	r1, #47	; 0x2f
   281e8:	mov	r0, r4
   281ec:	bl	123ec <memrchr@plt>
   281f0:	subs	r5, r0, #0
   281f4:	moveq	r3, #36	; 0x24
   281f8:	streq	r3, [r7]
   281fc:	beq	28120 <__assert_fail@plt+0x15a34>
   28200:	mov	r3, #0
   28204:	strb	r3, [r5]
   28208:	sub	r3, r5, r4
   2820c:	cmp	r3, #4096	; 0x1000
   28210:	blt	28228 <__assert_fail@plt+0x15b3c>
   28214:	ldr	r3, [pc, #136]	; 282a4 <__assert_fail@plt+0x15bb8>
   28218:	mov	r2, #179	; 0xb3
   2821c:	ldr	r1, [pc, #132]	; 282a8 <__assert_fail@plt+0x15bbc>
   28220:	ldr	r0, [pc, #152]	; 282c0 <__assert_fail@plt+0x15bd4>
   28224:	b	280d0 <__assert_fail@plt+0x159e4>
   28228:	mov	r1, r4
   2822c:	add	r0, sp, #4
   28230:	bl	28048 <__assert_fail@plt+0x1595c>
   28234:	cmp	r0, #0
   28238:	strb	r8, [r5]
   2823c:	bne	281a4 <__assert_fail@plt+0x15ab8>
   28240:	add	r4, r5, #1
   28244:	mov	r1, r9
   28248:	mov	r0, r4
   2824c:	bl	126e0 <strspn@plt>
   28250:	add	r4, r4, r0
   28254:	sub	r3, r6, r4
   28258:	cmp	r3, #4096	; 0x1000
   2825c:	bge	281e0 <__assert_fail@plt+0x15af4>
   28260:	cmp	r4, r6
   28264:	bcc	2828c <__assert_fail@plt+0x15ba0>
   28268:	ldr	r0, [sp, #4]
   2826c:	bl	125d8 <fchdir@plt>
   28270:	subs	r4, r0, #0
   28274:	bne	281a4 <__assert_fail@plt+0x15ab8>
   28278:	ldr	r0, [sp, #4]
   2827c:	bl	28010 <__assert_fail@plt+0x15924>
   28280:	mov	r0, r4
   28284:	add	sp, sp, #12
   28288:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2828c:	mov	r1, r4
   28290:	add	r0, sp, #4
   28294:	bl	28048 <__assert_fail@plt+0x1595c>
   28298:	cmp	r0, #0
   2829c:	beq	28268 <__assert_fail@plt+0x15b7c>
   282a0:	b	281a4 <__assert_fail@plt+0x15ab8>
   282a4:	andeq	ip, r3, sp, lsl lr
   282a8:	andeq	ip, r3, r8, lsr #28
   282ac:	andeq	ip, r3, r2, asr #28
   282b0:	andeq	ip, r3, sl, asr #28
   282b4:	ldrdeq	r8, [r3], -r7
   282b8:	andeq	ip, r3, r6, asr lr
   282bc:	andeq	ip, r3, r2, ror #28
   282c0:	andeq	ip, r3, r1, ror lr
   282c4:	push	{r1, r2, r3}
   282c8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   282cc:	add	r2, sp, #40	; 0x28
   282d0:	ldr	r1, [sp, #36]	; 0x24
   282d4:	str	r2, [sp, #4]
   282d8:	cmp	r1, #0
   282dc:	beq	2832c <__assert_fail@plt+0x15c40>
   282e0:	movw	r3, #1030	; 0x406
   282e4:	mov	r5, r0
   282e8:	cmp	r1, r3
   282ec:	beq	28338 <__assert_fail@plt+0x15c4c>
   282f0:	cmp	r1, #11
   282f4:	beq	2831c <__assert_fail@plt+0x15c30>
   282f8:	bgt	2842c <__assert_fail@plt+0x15d40>
   282fc:	cmp	r1, #4
   28300:	beq	28444 <__assert_fail@plt+0x15d58>
   28304:	bgt	28424 <__assert_fail@plt+0x15d38>
   28308:	cmp	r1, #2
   2830c:	beq	28444 <__assert_fail@plt+0x15d58>
   28310:	bgt	2831c <__assert_fail@plt+0x15c30>
   28314:	cmp	r1, #1
   28318:	bne	28444 <__assert_fail@plt+0x15d58>
   2831c:	mov	r0, r5
   28320:	bl	12500 <fcntl64@plt>
   28324:	mov	r4, r0
   28328:	b	28380 <__assert_fail@plt+0x15c94>
   2832c:	ldr	r2, [sp, #40]	; 0x28
   28330:	bl	12500 <fcntl64@plt>
   28334:	b	28324 <__assert_fail@plt+0x15c38>
   28338:	ldr	r6, [pc, #304]	; 28470 <__assert_fail@plt+0x15d84>
   2833c:	add	r3, sp, #44	; 0x2c
   28340:	str	r3, [sp, #4]
   28344:	ldr	r7, [r2]
   28348:	ldr	r3, [r6]
   2834c:	mov	r8, r6
   28350:	mov	r2, r7
   28354:	cmp	r3, #0
   28358:	blt	283e8 <__assert_fail@plt+0x15cfc>
   2835c:	bl	12500 <fcntl64@plt>
   28360:	subs	r4, r0, #0
   28364:	bge	28378 <__assert_fail@plt+0x15c8c>
   28368:	bl	12404 <__errno_location@plt>
   2836c:	ldr	r3, [r0]
   28370:	cmp	r3, #22
   28374:	beq	28394 <__assert_fail@plt+0x15ca8>
   28378:	mov	r3, #1
   2837c:	str	r3, [r8]
   28380:	mov	r0, r4
   28384:	add	sp, sp, #12
   28388:	pop	{r4, r5, r6, r7, r8, lr}
   2838c:	add	sp, sp, #12
   28390:	bx	lr
   28394:	mov	r2, r7
   28398:	mov	r1, #0
   2839c:	mov	r0, r5
   283a0:	bl	12500 <fcntl64@plt>
   283a4:	subs	r4, r0, #0
   283a8:	mvnge	r3, #0
   283ac:	strge	r3, [r6]
   283b0:	blt	28380 <__assert_fail@plt+0x15c94>
   283b4:	mov	r1, #1
   283b8:	mov	r0, r4
   283bc:	bl	12500 <fcntl64@plt>
   283c0:	subs	r2, r0, #0
   283c4:	bge	28408 <__assert_fail@plt+0x15d1c>
   283c8:	bl	12404 <__errno_location@plt>
   283cc:	mov	r5, r0
   283d0:	mov	r0, r4
   283d4:	ldr	r6, [r5]
   283d8:	mvn	r4, #0
   283dc:	bl	126a4 <close@plt>
   283e0:	str	r6, [r5]
   283e4:	b	28380 <__assert_fail@plt+0x15c94>
   283e8:	mov	r1, #0
   283ec:	bl	12500 <fcntl64@plt>
   283f0:	subs	r4, r0, #0
   283f4:	blt	28380 <__assert_fail@plt+0x15c94>
   283f8:	ldr	r3, [r6]
   283fc:	cmn	r3, #1
   28400:	bne	28380 <__assert_fail@plt+0x15c94>
   28404:	b	283b4 <__assert_fail@plt+0x15cc8>
   28408:	orr	r2, r2, #1
   2840c:	mov	r1, #2
   28410:	mov	r0, r4
   28414:	bl	12500 <fcntl64@plt>
   28418:	cmn	r0, #1
   2841c:	bne	28380 <__assert_fail@plt+0x15c94>
   28420:	b	283c8 <__assert_fail@plt+0x15cdc>
   28424:	cmp	r1, #9
   28428:	b	28318 <__assert_fail@plt+0x15c2c>
   2842c:	movw	r2, #1031	; 0x407
   28430:	cmp	r1, r2
   28434:	bgt	28454 <__assert_fail@plt+0x15d68>
   28438:	cmp	r1, r3
   2843c:	movwlt	r3, #1025	; 0x401
   28440:	blt	28468 <__assert_fail@plt+0x15d7c>
   28444:	ldr	r3, [sp, #4]
   28448:	mov	r0, r5
   2844c:	ldr	r2, [r3]
   28450:	b	28330 <__assert_fail@plt+0x15c44>
   28454:	movw	r3, #1033	; 0x409
   28458:	cmp	r1, r3
   2845c:	beq	28444 <__assert_fail@plt+0x15d58>
   28460:	blt	2831c <__assert_fail@plt+0x15c30>
   28464:	movw	r3, #1034	; 0x40a
   28468:	cmp	r1, r3
   2846c:	b	28318 <__assert_fail@plt+0x15c2c>
   28470:	andeq	lr, r4, r0, asr lr
   28474:	push	{r0, r1, r4, lr}
   28478:	subs	r4, r0, #0
   2847c:	bne	28490 <__assert_fail@plt+0x15da4>
   28480:	mov	r0, r4
   28484:	add	sp, sp, #8
   28488:	pop	{r4, lr}
   2848c:	b	1205c <fflush@plt>
   28490:	bl	12344 <__freading@plt>
   28494:	cmp	r0, #0
   28498:	beq	28480 <__assert_fail@plt+0x15d94>
   2849c:	ldr	r3, [r4]
   284a0:	tst	r3, #256	; 0x100
   284a4:	beq	28480 <__assert_fail@plt+0x15d94>
   284a8:	mov	r3, #1
   284ac:	mov	r2, #0
   284b0:	mov	r0, r4
   284b4:	str	r3, [sp]
   284b8:	mov	r3, #0
   284bc:	bl	28514 <__assert_fail@plt+0x15e28>
   284c0:	b	28480 <__assert_fail@plt+0x15d94>
   284c4:	push	{r0, r1, r2, r4, r5, lr}
   284c8:	mov	r5, r0
   284cc:	bl	12404 <__errno_location@plt>
   284d0:	mov	r4, r0
   284d4:	mov	r0, r5
   284d8:	ldr	r3, [r4]
   284dc:	str	r3, [sp]
   284e0:	str	r3, [sp, #4]
   284e4:	mov	r3, #0
   284e8:	str	r3, [r4]
   284ec:	bl	12098 <free@plt>
   284f0:	ldr	r3, [r4]
   284f4:	add	r2, sp, #8
   284f8:	clz	r3, r3
   284fc:	lsr	r3, r3, #5
   28500:	add	r3, r2, r3, lsl #2
   28504:	ldr	r3, [r3, #-8]
   28508:	str	r3, [r4]
   2850c:	add	sp, sp, #12
   28510:	pop	{r4, r5, pc}
   28514:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   28518:	mov	r4, r0
   2851c:	ldmib	r0, {ip, lr}
   28520:	ldr	r8, [sp, #32]
   28524:	cmp	lr, ip
   28528:	bne	28598 <__assert_fail@plt+0x15eac>
   2852c:	ldr	ip, [r0, #16]
   28530:	ldr	lr, [r0, #20]
   28534:	cmp	lr, ip
   28538:	bne	28598 <__assert_fail@plt+0x15eac>
   2853c:	ldr	r5, [r0, #36]	; 0x24
   28540:	cmp	r5, #0
   28544:	bne	28598 <__assert_fail@plt+0x15eac>
   28548:	mov	r6, r2
   2854c:	mov	r7, r3
   28550:	bl	12488 <fileno@plt>
   28554:	mov	r2, r6
   28558:	mov	r3, r7
   2855c:	str	r8, [sp]
   28560:	bl	12248 <lseek64@plt>
   28564:	mvn	r3, #0
   28568:	mvn	r2, #0
   2856c:	cmp	r1, r3
   28570:	cmpeq	r0, r2
   28574:	mvneq	r0, #0
   28578:	beq	28590 <__assert_fail@plt+0x15ea4>
   2857c:	ldr	r3, [r4]
   28580:	strd	r0, [r4, #80]	; 0x50
   28584:	mov	r0, r5
   28588:	bic	r3, r3, #16
   2858c:	str	r3, [r4]
   28590:	add	sp, sp, #8
   28594:	pop	{r4, r5, r6, r7, r8, pc}
   28598:	mov	r0, r4
   2859c:	str	r8, [sp, #32]
   285a0:	add	sp, sp, #8
   285a4:	pop	{r4, r5, r6, r7, r8, lr}
   285a8:	b	124e8 <fseeko64@plt>
   285ac:	push	{r4, r5, lr}
   285b0:	ldrd	r2, [r1, #8]
   285b4:	ldrd	r4, [r0, #8]
   285b8:	cmp	r5, r3
   285bc:	cmpeq	r4, r2
   285c0:	bne	285e0 <__assert_fail@plt+0x15ef4>
   285c4:	ldrd	r4, [r0]
   285c8:	ldrd	r2, [r1]
   285cc:	cmp	r5, r3
   285d0:	cmpeq	r4, r2
   285d4:	moveq	r0, #1
   285d8:	movne	r0, #0
   285dc:	pop	{r4, r5, pc}
   285e0:	mov	r0, #0
   285e4:	pop	{r4, r5, pc}
   285e8:	push	{r4, lr}
   285ec:	mov	r2, r1
   285f0:	mov	r3, #0
   285f4:	ldrd	r0, [r0, #8]
   285f8:	bl	376b0 <__assert_fail@plt+0x24fc4>
   285fc:	mov	r0, r2
   28600:	pop	{r4, pc}
   28604:	push	{r4, lr}
   28608:	mov	r2, r1
   2860c:	mov	r3, #0
   28610:	ldrd	r0, [r0]
   28614:	bl	376b0 <__assert_fail@plt+0x24fc4>
   28618:	mov	r0, r2
   2861c:	pop	{r4, pc}
   28620:	push	{r4, r5, lr}
   28624:	ldrd	r2, [r1]
   28628:	ldrd	r4, [r0]
   2862c:	cmp	r5, r3
   28630:	cmpeq	r4, r2
   28634:	moveq	r0, #1
   28638:	movne	r0, #0
   2863c:	pop	{r4, r5, pc}
   28640:	ldr	r3, [r0]
   28644:	push	{r4, r5, lr}
   28648:	ldrd	r4, [r3, #160]	; 0xa0
   2864c:	ldr	r3, [r1]
   28650:	ldrd	r2, [r3, #160]	; 0xa0
   28654:	cmp	r5, r3
   28658:	cmpeq	r4, r2
   2865c:	movhi	r0, #1
   28660:	movls	r0, #0
   28664:	movcc	r3, #1
   28668:	movcs	r3, #0
   2866c:	sub	r0, r0, r3
   28670:	pop	{r4, r5, pc}
   28674:	push	{r4, r5, r6, lr}
   28678:	mov	r4, r1
   2867c:	add	r5, r1, #64	; 0x40
   28680:	ldr	r1, [r1, #48]	; 0x30
   28684:	ldr	r3, [r0, #48]	; 0x30
   28688:	cmp	r1, #0
   2868c:	bne	28698 <__assert_fail@plt+0x15fac>
   28690:	tst	r3, #1
   28694:	bne	286a4 <__assert_fail@plt+0x15fb8>
   28698:	ubfx	r3, r3, #1, #1
   2869c:	orrs	r3, r2, r3
   286a0:	beq	2870c <__assert_fail@plt+0x16020>
   286a4:	mov	r1, r5
   286a8:	ldr	r0, [r4, #24]
   286ac:	bl	378e4 <__assert_fail@plt+0x251f8>
   286b0:	cmp	r0, #0
   286b4:	beq	28734 <__assert_fail@plt+0x16048>
   286b8:	bl	12404 <__errno_location@plt>
   286bc:	ldr	r3, [r0]
   286c0:	mov	r6, r0
   286c4:	cmp	r3, #2
   286c8:	bne	286ec <__assert_fail@plt+0x16000>
   286cc:	mov	r1, r5
   286d0:	ldr	r0, [r4, #24]
   286d4:	bl	37904 <__assert_fail@plt+0x25218>
   286d8:	cmp	r0, #0
   286dc:	bne	286ec <__assert_fail@plt+0x16000>
   286e0:	str	r0, [r6]
   286e4:	mov	r0, #13
   286e8:	pop	{r4, r5, r6, pc}
   286ec:	ldr	r3, [r6]
   286f0:	mov	r2, #104	; 0x68
   286f4:	mov	r1, #0
   286f8:	str	r3, [r4, #32]
   286fc:	mov	r0, r5
   28700:	bl	12434 <memset@plt>
   28704:	mov	r0, #10
   28708:	pop	{r4, r5, r6, pc}
   2870c:	mov	r3, #256	; 0x100
   28710:	mov	r2, r5
   28714:	ldr	r1, [r4, #24]
   28718:	ldr	r0, [r0, #32]
   2871c:	bl	37914 <__assert_fail@plt+0x25228>
   28720:	cmp	r0, #0
   28724:	beq	28734 <__assert_fail@plt+0x16048>
   28728:	bl	12404 <__errno_location@plt>
   2872c:	ldr	r3, [r0]
   28730:	b	286f0 <__assert_fail@plt+0x16004>
   28734:	ldr	r3, [r4, #80]	; 0x50
   28738:	and	r3, r3, #61440	; 0xf000
   2873c:	cmp	r3, #16384	; 0x4000
   28740:	bne	28784 <__assert_fail@plt+0x16098>
   28744:	ldrb	r3, [r4, #168]	; 0xa8
   28748:	cmp	r3, #46	; 0x2e
   2874c:	bne	2879c <__assert_fail@plt+0x160b0>
   28750:	ldrb	r3, [r4, #169]	; 0xa9
   28754:	cmp	r3, #0
   28758:	beq	28770 <__assert_fail@plt+0x16084>
   2875c:	ldr	r3, [r4, #168]	; 0xa8
   28760:	bic	r3, r3, #-16777216	; 0xff000000
   28764:	bic	r3, r3, #255	; 0xff
   28768:	cmp	r3, #11776	; 0x2e00
   2876c:	bne	2879c <__assert_fail@plt+0x160b0>
   28770:	ldr	r3, [r4, #48]	; 0x30
   28774:	cmp	r3, #0
   28778:	moveq	r0, #1
   2877c:	movne	r0, #5
   28780:	pop	{r4, r5, r6, pc}
   28784:	cmp	r3, #40960	; 0xa000
   28788:	beq	287a4 <__assert_fail@plt+0x160b8>
   2878c:	cmp	r3, #32768	; 0x8000
   28790:	movne	r0, #3
   28794:	moveq	r0, #8
   28798:	pop	{r4, r5, r6, pc}
   2879c:	mov	r0, #1
   287a0:	pop	{r4, r5, r6, pc}
   287a4:	mov	r0, #12
   287a8:	pop	{r4, r5, r6, pc}
   287ac:	ldr	r3, [r0, #40]	; 0x28
   287b0:	push	{r4, r5, r6, r7, r8, lr}
   287b4:	mov	r4, r0
   287b8:	mov	r6, r1
   287bc:	mov	r5, r2
   287c0:	ldr	r7, [r0, #44]	; 0x2c
   287c4:	cmp	r3, r2
   287c8:	bcs	28810 <__assert_fail@plt+0x16124>
   287cc:	add	r1, r2, #40	; 0x28
   287d0:	ldr	r0, [r0, #8]
   287d4:	cmn	r1, #-1073741823	; 0xc0000001
   287d8:	str	r1, [r4, #40]	; 0x28
   287dc:	bls	287fc <__assert_fail@plt+0x16110>
   287e0:	ldr	r0, [r4, #8]
   287e4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   287e8:	mov	r3, #0
   287ec:	str	r3, [r4, #8]
   287f0:	str	r3, [r4, #40]	; 0x28
   287f4:	mov	r0, r6
   287f8:	pop	{r4, r5, r6, r7, r8, pc}
   287fc:	lsl	r1, r1, #2
   28800:	bl	2acc4 <__assert_fail@plt+0x185d8>
   28804:	cmp	r0, #0
   28808:	beq	287e0 <__assert_fail@plt+0x160f4>
   2880c:	str	r0, [r4, #8]
   28810:	ldr	r0, [r4, #8]
   28814:	mov	r2, r0
   28818:	cmp	r6, #0
   2881c:	bne	2884c <__assert_fail@plt+0x16160>
   28820:	mov	r3, r7
   28824:	mov	r2, #4
   28828:	mov	r1, r5
   2882c:	bl	125f0 <qsort@plt>
   28830:	ldr	r3, [r4, #8]
   28834:	ldr	r6, [r3]
   28838:	subs	r5, r5, #1
   2883c:	ldr	r2, [r3]
   28840:	bne	28858 <__assert_fail@plt+0x1616c>
   28844:	str	r5, [r2, #8]
   28848:	b	287f4 <__assert_fail@plt+0x16108>
   2884c:	str	r6, [r2], #4
   28850:	ldr	r6, [r6, #8]
   28854:	b	28818 <__assert_fail@plt+0x1612c>
   28858:	ldr	r1, [r3, #4]!
   2885c:	str	r1, [r2, #8]
   28860:	b	28838 <__assert_fail@plt+0x1614c>
   28864:	push	{r4, r5, r6, r7, r8, lr}
   28868:	mov	r6, r0
   2886c:	add	r0, r2, #176	; 0xb0
   28870:	bic	r0, r0, #7
   28874:	mov	r7, r1
   28878:	mov	r5, r2
   2887c:	bl	2a340 <__assert_fail@plt+0x17c54>
   28880:	subs	r4, r0, #0
   28884:	beq	288d0 <__assert_fail@plt+0x161e4>
   28888:	mov	r2, r5
   2888c:	mov	r1, r7
   28890:	add	r0, r4, #168	; 0xa8
   28894:	bl	120f8 <memcpy@plt>
   28898:	mov	r3, #0
   2889c:	add	r2, r4, r5
   288a0:	strb	r3, [r2, #168]	; 0xa8
   288a4:	ldr	r2, [r6, #24]
   288a8:	str	r3, [r4, #12]
   288ac:	str	r3, [r4, #16]
   288b0:	str	r3, [r4, #20]
   288b4:	str	r2, [r4, #28]
   288b8:	mov	r2, #3
   288bc:	str	r3, [r4, #32]
   288c0:	str	r6, [r4, #44]	; 0x2c
   288c4:	str	r5, [r4, #52]	; 0x34
   288c8:	strh	r3, [r4, #58]	; 0x3a
   288cc:	strh	r2, [r4, #60]	; 0x3c
   288d0:	mov	r0, r4
   288d4:	pop	{r4, r5, r6, r7, r8, pc}
   288d8:	mov	r3, r0
   288dc:	mov	r0, r1
   288e0:	ldr	ip, [r3, #48]	; 0x30
   288e4:	lsl	r2, ip, #11
   288e8:	tst	ip, #512	; 0x200
   288ec:	and	r2, r2, #32768	; 0x8000
   288f0:	orr	r2, r2, #540672	; 0x84000
   288f4:	orr	r2, r2, #2304	; 0x900
   288f8:	beq	28904 <__assert_fail@plt+0x16218>
   288fc:	ldr	r0, [r3, #32]
   28900:	b	226f0 <__assert_fail@plt+0x10004>
   28904:	mov	r1, r2
   28908:	b	1fa94 <__assert_fail@plt+0xd3a8>
   2890c:	push	{r4, r5, r6, lr}
   28910:	mov	r4, r0
   28914:	cmp	r4, #0
   28918:	popeq	{r4, r5, r6, pc}
   2891c:	ldr	r5, [r4, #8]
   28920:	ldr	r0, [r4, #12]
   28924:	cmp	r0, #0
   28928:	beq	28930 <__assert_fail@plt+0x16244>
   2892c:	bl	126bc <closedir@plt>
   28930:	mov	r0, r4
   28934:	mov	r4, r5
   28938:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2893c:	b	28914 <__assert_fail@plt+0x16228>
   28940:	push	{r4, lr}
   28944:	mov	r4, r0
   28948:	mov	r0, r4
   2894c:	bl	36ec4 <__assert_fail@plt+0x247d8>
   28950:	cmp	r0, #0
   28954:	popne	{r4, pc}
   28958:	mov	r0, r4
   2895c:	bl	36f10 <__assert_fail@plt+0x24824>
   28960:	cmp	r0, #0
   28964:	blt	28948 <__assert_fail@plt+0x1625c>
   28968:	bl	126a4 <close@plt>
   2896c:	b	28948 <__assert_fail@plt+0x1625c>
   28970:	push	{r4, r5, r6, r7, lr}
   28974:	sub	sp, sp, #100	; 0x64
   28978:	ldr	r5, [r0, #44]	; 0x2c
   2897c:	ldr	r3, [r5, #48]	; 0x30
   28980:	tst	r3, #512	; 0x200
   28984:	bne	28994 <__assert_fail@plt+0x162a8>
   28988:	mov	r0, #0
   2898c:	add	sp, sp, #100	; 0x64
   28990:	pop	{r4, r5, r6, r7, pc}
   28994:	ldr	r4, [r5, #52]	; 0x34
   28998:	mov	r7, r1
   2899c:	mov	r6, r0
   289a0:	cmp	r4, #0
   289a4:	bne	289d4 <__assert_fail@plt+0x162e8>
   289a8:	ldr	r3, [pc, #184]	; 28a68 <__assert_fail@plt+0x1637c>
   289ac:	mov	r1, r4
   289b0:	mov	r0, #13
   289b4:	ldr	r2, [pc, #176]	; 28a6c <__assert_fail@plt+0x16380>
   289b8:	str	r3, [sp]
   289bc:	ldr	r3, [pc, #172]	; 28a70 <__assert_fail@plt+0x16384>
   289c0:	bl	203f8 <__assert_fail@plt+0xdd0c>
   289c4:	cmp	r0, #0
   289c8:	mov	r4, r0
   289cc:	str	r0, [r5, #52]	; 0x34
   289d0:	beq	289f4 <__assert_fail@plt+0x16308>
   289d4:	ldrd	r2, [r6, #64]	; 0x40
   289d8:	add	r1, sp, #8
   289dc:	mov	r0, r4
   289e0:	strd	r2, [sp, #8]
   289e4:	bl	201e8 <__assert_fail@plt+0xdafc>
   289e8:	cmp	r0, #0
   289ec:	ldrne	r0, [r0, #8]
   289f0:	bne	2898c <__assert_fail@plt+0x162a0>
   289f4:	cmp	r7, #0
   289f8:	blt	28988 <__assert_fail@plt+0x1629c>
   289fc:	add	r1, sp, #8
   28a00:	mov	r0, r7
   28a04:	bl	11f78 <fstatfs64@plt>
   28a08:	cmp	r0, #0
   28a0c:	bne	28988 <__assert_fail@plt+0x1629c>
   28a10:	cmp	r4, #0
   28a14:	beq	28a60 <__assert_fail@plt+0x16374>
   28a18:	mov	r0, #16
   28a1c:	bl	2a340 <__assert_fail@plt+0x17c54>
   28a20:	subs	r5, r0, #0
   28a24:	beq	28a60 <__assert_fail@plt+0x16374>
   28a28:	ldrd	r2, [r6, #64]	; 0x40
   28a2c:	mov	r1, r5
   28a30:	mov	r0, r4
   28a34:	strd	r2, [r5]
   28a38:	ldr	r3, [sp, #8]
   28a3c:	str	r3, [r5, #8]
   28a40:	bl	208c0 <__assert_fail@plt+0xe1d4>
   28a44:	cmp	r0, #0
   28a48:	beq	28a58 <__assert_fail@plt+0x1636c>
   28a4c:	cmp	r5, r0
   28a50:	beq	28a60 <__assert_fail@plt+0x16374>
   28a54:	bl	12698 <abort@plt>
   28a58:	mov	r0, r5
   28a5c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   28a60:	ldr	r0, [sp, #8]
   28a64:	b	2898c <__assert_fail@plt+0x162a0>
   28a68:	andeq	r8, r2, r4, asr #9
   28a6c:	andeq	r8, r2, r4, lsl #12
   28a70:	andeq	r8, r2, r0, lsr #12
   28a74:	push	{r4, r5, r6, lr}
   28a78:	mov	r5, r1
   28a7c:	ldr	r1, [r0, #32]
   28a80:	sub	r3, r1, r5
   28a84:	cmn	r1, #100	; 0x64
   28a88:	clz	r3, r3
   28a8c:	lsr	r3, r3, #5
   28a90:	moveq	r3, #0
   28a94:	cmp	r3, #0
   28a98:	beq	28aa0 <__assert_fail@plt+0x163b4>
   28a9c:	bl	12698 <abort@plt>
   28aa0:	cmp	r2, #0
   28aa4:	mov	r4, r0
   28aa8:	beq	28ac8 <__assert_fail@plt+0x163dc>
   28aac:	add	r0, r0, #60	; 0x3c
   28ab0:	bl	36ecc <__assert_fail@plt+0x247e0>
   28ab4:	cmp	r0, #0
   28ab8:	blt	28ac0 <__assert_fail@plt+0x163d4>
   28abc:	bl	126a4 <close@plt>
   28ac0:	str	r5, [r4, #32]
   28ac4:	pop	{r4, r5, r6, pc}
   28ac8:	ldr	r3, [r0, #48]	; 0x30
   28acc:	mvn	r2, r1
   28ad0:	lsr	r2, r2, #31
   28ad4:	eor	r3, r3, #4
   28ad8:	ands	r3, r2, r3, lsr #2
   28adc:	beq	28ac0 <__assert_fail@plt+0x163d4>
   28ae0:	mov	r0, r1
   28ae4:	b	28abc <__assert_fail@plt+0x163d0>
   28ae8:	ldr	r3, [r0, #48]	; 0x30
   28aec:	push	{r4, r5, r6, lr}
   28af0:	mov	r5, r0
   28af4:	ands	r4, r3, #4
   28af8:	movne	r4, #0
   28afc:	bne	28b14 <__assert_fail@plt+0x16428>
   28b00:	tst	r3, #512	; 0x200
   28b04:	beq	28b24 <__assert_fail@plt+0x16438>
   28b08:	mov	r2, #1
   28b0c:	mvn	r1, #99	; 0x63
   28b10:	bl	28a74 <__assert_fail@plt+0x16388>
   28b14:	add	r0, r5, #60	; 0x3c
   28b18:	bl	28940 <__assert_fail@plt+0x16254>
   28b1c:	mov	r0, r4
   28b20:	pop	{r4, r5, r6, pc}
   28b24:	ldr	r0, [r0, #28]
   28b28:	bl	125d8 <fchdir@plt>
   28b2c:	adds	r4, r0, #0
   28b30:	movne	r4, #1
   28b34:	b	28b14 <__assert_fail@plt+0x16428>
   28b38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28b3c:	subs	sl, r3, #0
   28b40:	sub	sp, sp, #104	; 0x68
   28b44:	mov	r7, r0
   28b48:	mov	r8, r1
   28b4c:	mov	r6, r2
   28b50:	moveq	r9, sl
   28b54:	beq	28b6c <__assert_fail@plt+0x16480>
   28b58:	ldr	r1, [pc, #368]	; 28cd0 <__assert_fail@plt+0x165e4>
   28b5c:	mov	r0, sl
   28b60:	bl	11ffc <strcmp@plt>
   28b64:	clz	r9, r0
   28b68:	lsr	r9, r9, #5
   28b6c:	ldr	r3, [r7, #48]	; 0x30
   28b70:	ands	r4, r3, #4
   28b74:	beq	28ba0 <__assert_fail@plt+0x164b4>
   28b78:	mvn	r4, r6
   28b7c:	lsr	r4, r4, #31
   28b80:	ands	r4, r4, r3, lsr #9
   28b84:	beq	28b94 <__assert_fail@plt+0x164a8>
   28b88:	mov	r0, r6
   28b8c:	mov	r4, #0
   28b90:	bl	126a4 <close@plt>
   28b94:	mov	r0, r4
   28b98:	add	sp, sp, #104	; 0x68
   28b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28ba0:	ands	r2, r9, r6, lsr #31
   28ba4:	beq	28c90 <__assert_fail@plt+0x165a4>
   28ba8:	tst	r3, #512	; 0x200
   28bac:	bne	28bcc <__assert_fail@plt+0x164e0>
   28bb0:	mov	r1, sl
   28bb4:	mov	r0, r7
   28bb8:	bl	288d8 <__assert_fail@plt+0x161ec>
   28bbc:	subs	r5, r0, #0
   28bc0:	bge	28bf8 <__assert_fail@plt+0x1650c>
   28bc4:	mvn	r4, #0
   28bc8:	b	28b94 <__assert_fail@plt+0x164a8>
   28bcc:	add	r5, r7, #60	; 0x3c
   28bd0:	mov	r0, r5
   28bd4:	bl	36ec4 <__assert_fail@plt+0x247d8>
   28bd8:	cmp	r0, #0
   28bdc:	bne	28bb0 <__assert_fail@plt+0x164c4>
   28be0:	mov	r0, r5
   28be4:	bl	36f10 <__assert_fail@plt+0x24824>
   28be8:	subs	r5, r0, #0
   28bec:	movge	r6, r5
   28bf0:	movge	sl, r4
   28bf4:	blt	28bb0 <__assert_fail@plt+0x164c4>
   28bf8:	ldr	r3, [r7, #48]	; 0x30
   28bfc:	tst	r3, #2
   28c00:	bne	28c20 <__assert_fail@plt+0x16534>
   28c04:	cmp	sl, #0
   28c08:	beq	28ca0 <__assert_fail@plt+0x165b4>
   28c0c:	ldr	r1, [pc, #188]	; 28cd0 <__assert_fail@plt+0x165e4>
   28c10:	mov	r0, sl
   28c14:	bl	11ffc <strcmp@plt>
   28c18:	cmp	r0, #0
   28c1c:	bne	28ca0 <__assert_fail@plt+0x165b4>
   28c20:	mov	r1, sp
   28c24:	mov	r0, r5
   28c28:	bl	378f4 <__assert_fail@plt+0x25208>
   28c2c:	cmp	r0, #0
   28c30:	bne	28c68 <__assert_fail@plt+0x1657c>
   28c34:	ldrd	r2, [sp]
   28c38:	ldrd	r0, [r8, #64]	; 0x40
   28c3c:	cmp	r1, r3
   28c40:	cmpeq	r0, r2
   28c44:	bne	28c5c <__assert_fail@plt+0x16570>
   28c48:	ldrd	r2, [sp, #96]	; 0x60
   28c4c:	ldrd	r0, [r8, #160]	; 0xa0
   28c50:	cmp	r1, r3
   28c54:	cmpeq	r0, r2
   28c58:	beq	28ca0 <__assert_fail@plt+0x165b4>
   28c5c:	bl	12404 <__errno_location@plt>
   28c60:	mov	r3, #2
   28c64:	str	r3, [r0]
   28c68:	mvn	r4, #0
   28c6c:	cmp	r6, #0
   28c70:	bge	28b94 <__assert_fail@plt+0x164a8>
   28c74:	bl	12404 <__errno_location@plt>
   28c78:	mov	r6, r0
   28c7c:	mov	r0, r5
   28c80:	ldr	r7, [r6]
   28c84:	bl	126a4 <close@plt>
   28c88:	str	r7, [r6]
   28c8c:	b	28b94 <__assert_fail@plt+0x164a8>
   28c90:	cmp	r6, #0
   28c94:	movge	r5, r6
   28c98:	bge	28bf8 <__assert_fail@plt+0x1650c>
   28c9c:	b	28bb0 <__assert_fail@plt+0x164c4>
   28ca0:	ldr	r3, [r7, #48]	; 0x30
   28ca4:	tst	r3, #512	; 0x200
   28ca8:	beq	28cc0 <__assert_fail@plt+0x165d4>
   28cac:	eor	r2, r9, #1
   28cb0:	mov	r1, r5
   28cb4:	mov	r0, r7
   28cb8:	bl	28a74 <__assert_fail@plt+0x16388>
   28cbc:	b	28b94 <__assert_fail@plt+0x164a8>
   28cc0:	mov	r0, r5
   28cc4:	bl	125d8 <fchdir@plt>
   28cc8:	mov	r4, r0
   28ccc:	b	28c6c <__assert_fail@plt+0x16580>
   28cd0:	muleq	r3, ip, lr
   28cd4:	ldr	r3, [r0, #36]	; 0x24
   28cd8:	add	r1, r1, #256	; 0x100
   28cdc:	push	{r4, r5, r6, lr}
   28ce0:	mov	r5, r0
   28ce4:	ldr	r0, [r0, #24]
   28ce8:	adds	r1, r3, r1
   28cec:	bcc	28d10 <__assert_fail@plt+0x16624>
   28cf0:	mov	r4, #0
   28cf4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   28cf8:	str	r4, [r5, #24]
   28cfc:	bl	12404 <__errno_location@plt>
   28d00:	mov	r3, #36	; 0x24
   28d04:	str	r3, [r0]
   28d08:	mov	r0, r4
   28d0c:	pop	{r4, r5, r6, pc}
   28d10:	str	r1, [r5, #36]	; 0x24
   28d14:	bl	2acc4 <__assert_fail@plt+0x185d8>
   28d18:	subs	r4, r0, #0
   28d1c:	bne	28d30 <__assert_fail@plt+0x16644>
   28d20:	ldr	r0, [r5, #24]
   28d24:	bl	284c4 <__assert_fail@plt+0x15dd8>
   28d28:	str	r4, [r5, #24]
   28d2c:	b	28d08 <__assert_fail@plt+0x1661c>
   28d30:	mov	r0, #1
   28d34:	str	r4, [r5, #24]
   28d38:	pop	{r4, r5, r6, pc}
   28d3c:	ldr	r3, [r0, #48]	; 0x30
   28d40:	movw	r2, #258	; 0x102
   28d44:	push	{r0, r1, r4, lr}
   28d48:	mov	r4, r0
   28d4c:	tst	r2, r3
   28d50:	beq	28d84 <__assert_fail@plt+0x16698>
   28d54:	ldr	r3, [pc, #72]	; 28da4 <__assert_fail@plt+0x166b8>
   28d58:	mov	r1, #0
   28d5c:	mov	r0, #31
   28d60:	ldr	r2, [pc, #64]	; 28da8 <__assert_fail@plt+0x166bc>
   28d64:	str	r3, [sp]
   28d68:	ldr	r3, [pc, #60]	; 28dac <__assert_fail@plt+0x166c0>
   28d6c:	bl	203f8 <__assert_fail@plt+0xdd0c>
   28d70:	str	r0, [r4, #56]	; 0x38
   28d74:	adds	r0, r0, #0
   28d78:	movne	r0, #1
   28d7c:	add	sp, sp, #8
   28d80:	pop	{r4, pc}
   28d84:	mov	r0, #32
   28d88:	bl	2a340 <__assert_fail@plt+0x17c54>
   28d8c:	cmp	r0, #0
   28d90:	str	r0, [r4, #56]	; 0x38
   28d94:	beq	28d7c <__assert_fail@plt+0x16690>
   28d98:	bl	36c9c <__assert_fail@plt+0x245b0>
   28d9c:	mov	r0, #1
   28da0:	b	28d7c <__assert_fail@plt+0x16690>
   28da4:	andeq	r8, r2, r4, asr #9
   28da8:	andeq	r8, r2, r8, ror #11
   28dac:	andeq	r8, r2, ip, lsr #11
   28db0:	mov	r3, r0
   28db4:	movw	r2, #258	; 0x102
   28db8:	ldr	r0, [r0, #56]	; 0x38
   28dbc:	ldr	r3, [r3, #48]	; 0x30
   28dc0:	tst	r2, r3
   28dc4:	beq	28dd4 <__assert_fail@plt+0x166e8>
   28dc8:	cmp	r0, #0
   28dcc:	bxeq	lr
   28dd0:	b	20560 <__assert_fail@plt+0xde74>
   28dd4:	b	284c4 <__assert_fail@plt+0x15dd8>
   28dd8:	ldr	r3, [r0, #48]	; 0x30
   28ddc:	movw	r2, #258	; 0x102
   28de0:	push	{r4, r5, r6, lr}
   28de4:	mov	r6, r0
   28de8:	mov	r4, r1
   28dec:	tst	r2, r3
   28df0:	beq	28e64 <__assert_fail@plt+0x16778>
   28df4:	mov	r0, #24
   28df8:	bl	2a340 <__assert_fail@plt+0x17c54>
   28dfc:	subs	r5, r0, #0
   28e00:	bne	28e0c <__assert_fail@plt+0x16720>
   28e04:	mov	r0, #0
   28e08:	pop	{r4, r5, r6, pc}
   28e0c:	ldrd	r2, [r4, #64]	; 0x40
   28e10:	mov	r1, r5
   28e14:	ldr	r0, [r6, #56]	; 0x38
   28e18:	strd	r2, [r5]
   28e1c:	ldrd	r2, [r4, #160]	; 0xa0
   28e20:	str	r4, [r5, #16]
   28e24:	strd	r2, [r5, #8]
   28e28:	bl	208c0 <__assert_fail@plt+0xe1d4>
   28e2c:	cmp	r5, r0
   28e30:	mov	r6, r0
   28e34:	bne	28e40 <__assert_fail@plt+0x16754>
   28e38:	mov	r0, #1
   28e3c:	pop	{r4, r5, r6, pc}
   28e40:	mov	r0, r5
   28e44:	bl	284c4 <__assert_fail@plt+0x15dd8>
   28e48:	cmp	r6, #0
   28e4c:	beq	28e04 <__assert_fail@plt+0x16718>
   28e50:	ldr	r3, [r6, #16]
   28e54:	str	r3, [r4]
   28e58:	mov	r3, #2
   28e5c:	strh	r3, [r4, #56]	; 0x38
   28e60:	b	28e38 <__assert_fail@plt+0x1674c>
   28e64:	add	r1, r1, #64	; 0x40
   28e68:	ldr	r0, [r0, #56]	; 0x38
   28e6c:	bl	36cb8 <__assert_fail@plt+0x245cc>
   28e70:	cmp	r0, #0
   28e74:	beq	28e38 <__assert_fail@plt+0x1674c>
   28e78:	mov	r3, #2
   28e7c:	str	r4, [r4]
   28e80:	strh	r3, [r4, #56]	; 0x38
   28e84:	pop	{r4, r5, r6, pc}
   28e88:	ldr	r3, [r0, #48]	; 0x30
   28e8c:	mov	r2, r1
   28e90:	movw	r1, #258	; 0x102
   28e94:	push	{r4, r5, lr}
   28e98:	sub	sp, sp, #28
   28e9c:	tst	r1, r3
   28ea0:	beq	28ed8 <__assert_fail@plt+0x167ec>
   28ea4:	ldrd	r4, [r2, #64]	; 0x40
   28ea8:	mov	r1, sp
   28eac:	ldrd	r2, [r2, #160]	; 0xa0
   28eb0:	ldr	r0, [r0, #56]	; 0x38
   28eb4:	strd	r4, [sp]
   28eb8:	strd	r2, [sp, #8]
   28ebc:	bl	208f0 <__assert_fail@plt+0xe204>
   28ec0:	cmp	r0, #0
   28ec4:	bne	28ecc <__assert_fail@plt+0x167e0>
   28ec8:	bl	12698 <abort@plt>
   28ecc:	bl	284c4 <__assert_fail@plt+0x15dd8>
   28ed0:	add	sp, sp, #28
   28ed4:	pop	{r4, r5, pc}
   28ed8:	ldr	ip, [r2, #4]
   28edc:	cmp	ip, #0
   28ee0:	beq	28ed0 <__assert_fail@plt+0x167e4>
   28ee4:	ldr	r3, [ip, #48]	; 0x30
   28ee8:	cmp	r3, #0
   28eec:	blt	28ed0 <__assert_fail@plt+0x167e4>
   28ef0:	ldr	r3, [r0, #56]	; 0x38
   28ef4:	ldrd	r0, [r3, #16]
   28ef8:	orrs	r1, r0, r1
   28efc:	beq	28ec8 <__assert_fail@plt+0x167dc>
   28f00:	ldrd	r4, [r3]
   28f04:	ldrd	r0, [r2, #160]	; 0xa0
   28f08:	cmp	r5, r1
   28f0c:	cmpeq	r4, r0
   28f10:	bne	28ed0 <__assert_fail@plt+0x167e4>
   28f14:	ldrd	r0, [r3, #8]
   28f18:	ldrd	r4, [r2, #64]	; 0x40
   28f1c:	cmp	r1, r5
   28f20:	cmpeq	r0, r4
   28f24:	ldrdeq	r0, [ip, #64]	; 0x40
   28f28:	strdeq	r0, [r3, #8]
   28f2c:	ldrdeq	r0, [ip, #160]	; 0xa0
   28f30:	strdeq	r0, [r3]
   28f34:	b	28ed0 <__assert_fail@plt+0x167e4>
   28f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f3c:	sub	sp, sp, #60	; 0x3c
   28f40:	mov	r4, r0
   28f44:	ldr	r5, [r0]
   28f48:	str	r1, [sp, #8]
   28f4c:	ldr	r3, [r5, #12]
   28f50:	cmp	r3, #0
   28f54:	str	r3, [sp]
   28f58:	beq	28fac <__assert_fail@plt+0x168c0>
   28f5c:	mov	r0, r3
   28f60:	bl	125cc <dirfd@plt>
   28f64:	cmp	r0, #0
   28f68:	str	r0, [sp, #52]	; 0x34
   28f6c:	bge	2901c <__assert_fail@plt+0x16930>
   28f70:	mov	r6, #0
   28f74:	ldr	r0, [r5, #12]
   28f78:	bl	126bc <closedir@plt>
   28f7c:	str	r6, [r5, #12]
   28f80:	ldr	r3, [sp, #8]
   28f84:	cmp	r3, #3
   28f88:	bne	291a4 <__assert_fail@plt+0x16ab8>
   28f8c:	mov	r3, #4
   28f90:	strh	r3, [r5, #56]	; 0x38
   28f94:	bl	12404 <__errno_location@plt>
   28f98:	ldr	r3, [r0]
   28f9c:	str	r3, [r5, #32]
   28fa0:	mov	r0, r6
   28fa4:	add	sp, sp, #60	; 0x3c
   28fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fac:	ldr	r3, [r0, #48]	; 0x30
   28fb0:	ldr	r1, [r5, #24]
   28fb4:	and	r2, r3, #516	; 0x204
   28fb8:	cmp	r2, #512	; 0x200
   28fbc:	ldreq	r0, [r0, #32]
   28fc0:	mvnne	r0, #99	; 0x63
   28fc4:	ands	r2, r3, #16
   28fc8:	beq	28fe4 <__assert_fail@plt+0x168f8>
   28fcc:	tst	r3, #1
   28fd0:	moveq	r2, #32768	; 0x8000
   28fd4:	beq	28fe4 <__assert_fail@plt+0x168f8>
   28fd8:	ldr	r2, [r5, #48]	; 0x30
   28fdc:	cmp	r2, #0
   28fe0:	movne	r2, #32768	; 0x8000
   28fe4:	add	r3, sp, #52	; 0x34
   28fe8:	bl	37148 <__assert_fail@plt+0x24a5c>
   28fec:	cmp	r0, #0
   28ff0:	mov	r6, r0
   28ff4:	str	r0, [r5, #12]
   28ff8:	beq	28f80 <__assert_fail@plt+0x16894>
   28ffc:	ldrh	r3, [r5, #56]	; 0x38
   29000:	cmp	r3, #11
   29004:	bne	291ac <__assert_fail@plt+0x16ac0>
   29008:	mov	r2, #0
   2900c:	mov	r1, r5
   29010:	mov	r0, r4
   29014:	bl	28674 <__assert_fail@plt+0x15f88>
   29018:	strh	r0, [r5, #56]	; 0x38
   2901c:	ldr	r3, [r4, #44]	; 0x2c
   29020:	cmp	r3, #0
   29024:	ldr	r3, [pc, #1812]	; 29740 <__assert_fail@plt+0x17054>
   29028:	mvnne	r3, #0
   2902c:	str	r3, [sp, #36]	; 0x24
   29030:	ldr	r3, [sp]
   29034:	cmp	r3, #0
   29038:	beq	291f8 <__assert_fail@plt+0x16b0c>
   2903c:	mov	r3, #1
   29040:	str	r3, [sp, #24]
   29044:	ldr	r2, [r5, #28]
   29048:	mov	r8, #0
   2904c:	mov	r9, r8
   29050:	mov	r6, r8
   29054:	ldr	r3, [r5, #40]	; 0x28
   29058:	str	r8, [sp, #20]
   2905c:	str	r8, [sp, #32]
   29060:	sub	fp, r3, #1
   29064:	ldrb	r2, [r2, fp]
   29068:	cmp	r2, #47	; 0x2f
   2906c:	movne	fp, r3
   29070:	ldr	r3, [r4, #48]	; 0x30
   29074:	ands	r3, r3, #4
   29078:	ldrne	r3, [r4, #24]
   2907c:	streq	r3, [sp, #4]
   29080:	addne	r2, r3, fp
   29084:	addne	r2, r2, #1
   29088:	strne	r2, [sp, #4]
   2908c:	movne	r2, #47	; 0x2f
   29090:	strbne	r2, [r3, fp]
   29094:	add	r3, fp, #1
   29098:	add	r2, fp, #1
   2909c:	str	r3, [sp, #16]
   290a0:	ldr	r3, [r4, #36]	; 0x24
   290a4:	sub	r3, r3, r2
   290a8:	str	r3, [sp, #28]
   290ac:	ldr	r3, [r5, #48]	; 0x30
   290b0:	add	r3, r3, #1
   290b4:	str	r3, [sp, #40]	; 0x28
   290b8:	ldr	r7, [r5, #12]
   290bc:	cmp	r7, #0
   290c0:	beq	2910c <__assert_fail@plt+0x16a20>
   290c4:	bl	12404 <__errno_location@plt>
   290c8:	mov	r3, #0
   290cc:	str	r0, [sp, #12]
   290d0:	str	r3, [r0]
   290d4:	mov	r0, r7
   290d8:	bl	1259c <readdir64@plt>
   290dc:	subs	r3, r0, #0
   290e0:	bne	2933c <__assert_fail@plt+0x16c50>
   290e4:	ldr	r3, [sp, #12]
   290e8:	ldr	r3, [r3]
   290ec:	cmp	r3, #0
   290f0:	beq	2910c <__assert_fail@plt+0x16a20>
   290f4:	str	r3, [r5, #32]
   290f8:	ldr	r3, [sp]
   290fc:	orrs	r3, r3, r9
   29100:	moveq	r3, #4
   29104:	movne	r3, #7
   29108:	strh	r3, [r5, #56]	; 0x38
   2910c:	ldr	r0, [r5, #12]
   29110:	cmp	r0, #0
   29114:	beq	29124 <__assert_fail@plt+0x16a38>
   29118:	bl	126bc <closedir@plt>
   2911c:	mov	r3, #0
   29120:	str	r3, [r5, #12]
   29124:	ldr	r3, [sp, #20]
   29128:	cmp	r3, #0
   2912c:	bne	295fc <__assert_fail@plt+0x16f10>
   29130:	ldr	r3, [r4, #48]	; 0x30
   29134:	tst	r3, #4
   29138:	bne	29678 <__assert_fail@plt+0x16f8c>
   2913c:	ldr	r2, [sp]
   29140:	ldr	r3, [sp, #24]
   29144:	cmp	r2, #0
   29148:	movne	r3, #0
   2914c:	cmp	r3, #0
   29150:	beq	296bc <__assert_fail@plt+0x16fd0>
   29154:	ldr	r3, [sp, #8]
   29158:	cmp	r9, #0
   2915c:	cmpne	r3, #1
   29160:	bne	296e8 <__assert_fail@plt+0x16ffc>
   29164:	ldr	r3, [r5, #48]	; 0x30
   29168:	cmp	r3, #0
   2916c:	bne	296a4 <__assert_fail@plt+0x16fb8>
   29170:	mov	r0, r4
   29174:	bl	28ae8 <__assert_fail@plt+0x163fc>
   29178:	adds	r0, r0, #0
   2917c:	movne	r0, #1
   29180:	cmp	r0, #0
   29184:	beq	296bc <__assert_fail@plt+0x16fd0>
   29188:	mov	r3, #7
   2918c:	strh	r3, [r5, #56]	; 0x38
   29190:	ldr	r3, [r4, #48]	; 0x30
   29194:	orr	r3, r3, #8192	; 0x2000
   29198:	str	r3, [r4, #48]	; 0x30
   2919c:	mov	r0, r6
   291a0:	bl	2890c <__assert_fail@plt+0x16220>
   291a4:	mov	r6, #0
   291a8:	b	28fa0 <__assert_fail@plt+0x168b4>
   291ac:	ldr	r3, [r4, #48]	; 0x30
   291b0:	tst	r3, #256	; 0x100
   291b4:	beq	2901c <__assert_fail@plt+0x16930>
   291b8:	mov	r1, r5
   291bc:	mov	r0, r4
   291c0:	bl	28e88 <__assert_fail@plt+0x1679c>
   291c4:	mov	r2, #0
   291c8:	mov	r1, r5
   291cc:	mov	r0, r4
   291d0:	bl	28674 <__assert_fail@plt+0x15f88>
   291d4:	mov	r1, r5
   291d8:	mov	r0, r4
   291dc:	bl	28dd8 <__assert_fail@plt+0x166ec>
   291e0:	subs	r6, r0, #0
   291e4:	bne	2901c <__assert_fail@plt+0x16930>
   291e8:	bl	12404 <__errno_location@plt>
   291ec:	mov	r3, #12
   291f0:	str	r3, [r0]
   291f4:	b	28fa0 <__assert_fail@plt+0x168b4>
   291f8:	ldr	r3, [sp, #8]
   291fc:	cmp	r3, #2
   29200:	ldreq	r0, [sp]
   29204:	beq	29278 <__assert_fail@plt+0x16b8c>
   29208:	ldr	r3, [r4, #48]	; 0x30
   2920c:	and	r3, r3, #56	; 0x38
   29210:	cmp	r3, #24
   29214:	bne	29254 <__assert_fail@plt+0x16b68>
   29218:	ldr	r3, [r5, #84]	; 0x54
   2921c:	cmp	r3, #2
   29220:	bne	29254 <__assert_fail@plt+0x16b68>
   29224:	mov	r0, r5
   29228:	ldr	r1, [sp, #52]	; 0x34
   2922c:	bl	28970 <__assert_fail@plt+0x16284>
   29230:	movw	r3, #26985	; 0x6969
   29234:	cmp	r0, r3
   29238:	beq	29254 <__assert_fail@plt+0x16b68>
   2923c:	bgt	2925c <__assert_fail@plt+0x16b70>
   29240:	ldr	r3, [pc, #1276]	; 29744 <__assert_fail@plt+0x17058>
   29244:	cmp	r0, r3
   29248:	clzne	r0, r0
   2924c:	lsrne	r0, r0, #5
   29250:	bne	29278 <__assert_fail@plt+0x16b8c>
   29254:	mov	r0, #1
   29258:	b	29278 <__assert_fail@plt+0x16b8c>
   2925c:	movw	r3, #40864	; 0x9fa0
   29260:	cmp	r0, r3
   29264:	beq	29254 <__assert_fail@plt+0x16b68>
   29268:	ldr	r3, [pc, #1240]	; 29748 <__assert_fail@plt+0x1705c>
   2926c:	sub	r0, r0, r3
   29270:	clz	r0, r0
   29274:	lsr	r0, r0, #5
   29278:	ldr	r3, [sp, #8]
   2927c:	mov	r6, r0
   29280:	sub	r7, r3, #3
   29284:	clz	r7, r7
   29288:	lsr	r7, r7, #5
   2928c:	orrs	r3, r7, r0
   29290:	str	r3, [sp, #24]
   29294:	beq	29044 <__assert_fail@plt+0x16958>
   29298:	ldr	r3, [r4, #48]	; 0x30
   2929c:	tst	r3, #512	; 0x200
   292a0:	beq	292b8 <__assert_fail@plt+0x16bcc>
   292a4:	mov	r2, #3
   292a8:	movw	r1, #1030	; 0x406
   292ac:	ldr	r0, [sp, #52]	; 0x34
   292b0:	bl	282c4 <__assert_fail@plt+0x15bd8>
   292b4:	str	r0, [sp, #52]	; 0x34
   292b8:	ldr	r2, [sp, #52]	; 0x34
   292bc:	cmp	r2, #0
   292c0:	bge	29310 <__assert_fail@plt+0x16c24>
   292c4:	tst	r7, r6
   292c8:	bne	2932c <__assert_fail@plt+0x16c40>
   292cc:	ldrh	r3, [r5, #58]	; 0x3a
   292d0:	ldr	r0, [r5, #12]
   292d4:	orr	r3, r3, #1
   292d8:	strh	r3, [r5, #58]	; 0x3a
   292dc:	bl	126bc <closedir@plt>
   292e0:	mov	r3, #0
   292e4:	str	r3, [r5, #12]
   292e8:	ldr	r3, [r4, #48]	; 0x30
   292ec:	tst	r3, #512	; 0x200
   292f0:	beq	29304 <__assert_fail@plt+0x16c18>
   292f4:	ldr	r0, [sp, #52]	; 0x34
   292f8:	cmp	r0, #0
   292fc:	blt	29304 <__assert_fail@plt+0x16c18>
   29300:	bl	126a4 <close@plt>
   29304:	mov	r3, #0
   29308:	str	r3, [r5, #12]
   2930c:	b	29040 <__assert_fail@plt+0x16954>
   29310:	mov	r3, #0
   29314:	mov	r1, r5
   29318:	mov	r0, r4
   2931c:	bl	28b38 <__assert_fail@plt+0x1644c>
   29320:	cmp	r0, #0
   29324:	bne	292c4 <__assert_fail@plt+0x16bd8>
   29328:	b	2903c <__assert_fail@plt+0x16950>
   2932c:	bl	12404 <__errno_location@plt>
   29330:	ldr	r3, [r0]
   29334:	str	r3, [r5, #32]
   29338:	b	292cc <__assert_fail@plt+0x16be0>
   2933c:	ldr	r2, [r4, #48]	; 0x30
   29340:	tst	r2, #32
   29344:	bne	2936c <__assert_fail@plt+0x16c80>
   29348:	ldrb	r2, [r3, #19]
   2934c:	cmp	r2, #46	; 0x2e
   29350:	bne	2936c <__assert_fail@plt+0x16c80>
   29354:	ldrb	r2, [r3, #20]
   29358:	cmp	r2, #0
   2935c:	beq	290b8 <__assert_fail@plt+0x169cc>
   29360:	ldrh	r2, [r3, #20]
   29364:	cmp	r2, #46	; 0x2e
   29368:	beq	290b8 <__assert_fail@plt+0x169cc>
   2936c:	add	r7, r3, #19
   29370:	str	r3, [sp, #44]	; 0x2c
   29374:	mov	r0, r7
   29378:	bl	123bc <strlen@plt>
   2937c:	mov	r2, r0
   29380:	mov	r1, r7
   29384:	mov	sl, r0
   29388:	mov	r0, r4
   2938c:	bl	28864 <__assert_fail@plt+0x16178>
   29390:	subs	r7, r0, #0
   29394:	beq	293d0 <__assert_fail@plt+0x16ce4>
   29398:	ldr	r3, [sp, #28]
   2939c:	cmp	r3, sl
   293a0:	ldr	r3, [sp, #44]	; 0x2c
   293a4:	bhi	29450 <__assert_fail@plt+0x16d64>
   293a8:	ldr	r2, [r4, #24]
   293ac:	add	r1, fp, #2
   293b0:	mov	r0, r4
   293b4:	add	r1, r1, sl
   293b8:	str	r2, [sp, #28]
   293bc:	bl	28cd4 <__assert_fail@plt+0x165e8>
   293c0:	cmp	r0, #0
   293c4:	ldr	r2, [sp, #28]
   293c8:	ldr	r3, [sp, #44]	; 0x2c
   293cc:	bne	29418 <__assert_fail@plt+0x16d2c>
   293d0:	ldr	r3, [sp, #12]
   293d4:	mov	r0, r7
   293d8:	ldr	r8, [r3]
   293dc:	bl	284c4 <__assert_fail@plt+0x15dd8>
   293e0:	mov	r0, r6
   293e4:	mov	r6, #0
   293e8:	bl	2890c <__assert_fail@plt+0x16220>
   293ec:	ldr	r0, [r5, #12]
   293f0:	bl	126bc <closedir@plt>
   293f4:	mov	r3, #7
   293f8:	str	r6, [r5, #12]
   293fc:	strh	r3, [r5, #56]	; 0x38
   29400:	ldr	r3, [r4, #48]	; 0x30
   29404:	orr	r3, r3, #8192	; 0x2000
   29408:	str	r3, [r4, #48]	; 0x30
   2940c:	ldr	r3, [sp, #12]
   29410:	str	r8, [r3]
   29414:	b	28fa0 <__assert_fail@plt+0x168b4>
   29418:	ldr	r1, [r4, #24]
   2941c:	cmp	r1, r2
   29420:	ldreq	r0, [sp, #20]
   29424:	beq	2943c <__assert_fail@plt+0x16d50>
   29428:	ldr	r2, [r4, #48]	; 0x30
   2942c:	tst	r2, #4
   29430:	ldrne	r2, [sp, #16]
   29434:	addne	r2, r1, r2
   29438:	strne	r2, [sp, #4]
   2943c:	ldr	r1, [sp, #16]
   29440:	str	r0, [sp, #20]
   29444:	ldr	r2, [r4, #36]	; 0x24
   29448:	sub	r2, r2, r1
   2944c:	str	r2, [sp, #28]
   29450:	ldr	r2, [sp, #16]
   29454:	adds	r2, r2, sl
   29458:	movcs	sl, #1
   2945c:	movcc	sl, #0
   29460:	bcc	294a8 <__assert_fail@plt+0x16dbc>
   29464:	mov	r0, r7
   29468:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2946c:	mov	r0, r6
   29470:	mov	r6, #0
   29474:	bl	2890c <__assert_fail@plt+0x16220>
   29478:	ldr	r0, [r5, #12]
   2947c:	bl	126bc <closedir@plt>
   29480:	mov	r3, #7
   29484:	ldr	r2, [sp, #12]
   29488:	str	r6, [r5, #12]
   2948c:	strh	r3, [r5, #56]	; 0x38
   29490:	ldr	r3, [r4, #48]	; 0x30
   29494:	orr	r3, r3, #8192	; 0x2000
   29498:	str	r3, [r4, #48]	; 0x30
   2949c:	mov	r3, #36	; 0x24
   294a0:	str	r3, [r2]
   294a4:	b	28fa0 <__assert_fail@plt+0x168b4>
   294a8:	ldr	r1, [sp, #40]	; 0x28
   294ac:	str	r1, [r7, #48]	; 0x30
   294b0:	ldr	r1, [r4]
   294b4:	str	r1, [r7, #4]
   294b8:	str	r2, [r7, #40]	; 0x28
   294bc:	ldrd	r0, [r3]
   294c0:	ldr	r2, [r4, #48]	; 0x30
   294c4:	strd	r0, [r7, #160]	; 0xa0
   294c8:	add	r1, r7, #168	; 0xa8
   294cc:	tst	r2, #4
   294d0:	streq	r1, [r7, #24]
   294d4:	beq	294f8 <__assert_fail@plt+0x16e0c>
   294d8:	ldr	r2, [r7, #28]
   294dc:	str	r3, [sp, #12]
   294e0:	ldr	r0, [sp, #4]
   294e4:	str	r2, [r7, #24]
   294e8:	ldr	r2, [r7, #52]	; 0x34
   294ec:	add	r2, r2, #1
   294f0:	bl	1208c <memmove@plt>
   294f4:	ldr	r3, [sp, #12]
   294f8:	ldr	r2, [r4, #44]	; 0x2c
   294fc:	ldr	r1, [r4, #48]	; 0x30
   29500:	cmp	r2, #0
   29504:	beq	29510 <__assert_fail@plt+0x16e24>
   29508:	ands	r2, r1, #1024	; 0x400
   2950c:	beq	295e0 <__assert_fail@plt+0x16ef4>
   29510:	ands	r2, r1, #8
   29514:	ldrb	r3, [r3, #18]
   29518:	beq	29534 <__assert_fail@plt+0x16e48>
   2951c:	ands	r2, r3, #251	; 0xfb
   29520:	beq	29534 <__assert_fail@plt+0x16e48>
   29524:	ubfx	r1, r1, #4, #1
   29528:	cmp	r3, #10
   2952c:	moveq	r2, r1
   29530:	orrne	r2, r1, #1
   29534:	mov	r1, #11
   29538:	sub	r3, r3, #1
   2953c:	cmp	r3, r1
   29540:	strh	r1, [r7, #56]	; 0x38
   29544:	lslls	r3, r3, #1
   29548:	ldrls	r1, [pc, #508]	; 2974c <__assert_fail@plt+0x17060>
   2954c:	ldrhls	sl, [r1, r3]
   29550:	cmp	r2, #0
   29554:	mov	r3, #0
   29558:	movne	r2, #1
   2955c:	moveq	r2, #2
   29560:	str	sl, [r7, #80]	; 0x50
   29564:	strd	r2, [r7, #112]	; 0x70
   29568:	mov	r3, #0
   2956c:	cmp	r6, r3
   29570:	str	r3, [r7, #8]
   29574:	moveq	r6, r7
   29578:	ldrne	r3, [sp, #32]
   2957c:	strne	r7, [r3, #8]
   29580:	movw	r3, #10000	; 0x2710
   29584:	cmp	r9, r3
   29588:	bne	295c8 <__assert_fail@plt+0x16edc>
   2958c:	ldr	sl, [r4, #44]	; 0x2c
   29590:	cmp	sl, #0
   29594:	bne	295c8 <__assert_fail@plt+0x16edc>
   29598:	mov	r0, r5
   2959c:	ldr	r1, [sp, #52]	; 0x34
   295a0:	bl	28970 <__assert_fail@plt+0x16284>
   295a4:	movw	r3, #26985	; 0x6969
   295a8:	cmp	r0, r3
   295ac:	beq	295f4 <__assert_fail@plt+0x16f08>
   295b0:	ldr	r3, [pc, #408]	; 29750 <__assert_fail@plt+0x17064>
   295b4:	cmp	r0, r3
   295b8:	beq	295f4 <__assert_fail@plt+0x16f08>
   295bc:	ldr	r3, [pc, #384]	; 29744 <__assert_fail@plt+0x17058>
   295c0:	subs	r8, r0, r3
   295c4:	movne	r8, #1
   295c8:	ldr	r3, [sp, #36]	; 0x24
   295cc:	add	r9, r9, #1
   295d0:	cmp	r3, r9
   295d4:	bls	29124 <__assert_fail@plt+0x16a38>
   295d8:	str	r7, [sp, #32]
   295dc:	b	290b8 <__assert_fail@plt+0x169cc>
   295e0:	mov	r1, r7
   295e4:	mov	r0, r4
   295e8:	bl	28674 <__assert_fail@plt+0x15f88>
   295ec:	strh	r0, [r7, #56]	; 0x38
   295f0:	b	29568 <__assert_fail@plt+0x16e7c>
   295f4:	mov	r8, sl
   295f8:	b	295c8 <__assert_fail@plt+0x16edc>
   295fc:	ldr	r3, [r4, #4]
   29600:	ldr	r1, [r4, #24]
   29604:	cmp	r3, #0
   29608:	bne	29650 <__assert_fail@plt+0x16f64>
   2960c:	mov	r3, r6
   29610:	ldr	r2, [r3, #48]	; 0x30
   29614:	cmp	r2, #0
   29618:	blt	29130 <__assert_fail@plt+0x16a44>
   2961c:	ldr	r2, [r3, #24]
   29620:	add	r0, r3, #168	; 0xa8
   29624:	cmp	r2, r0
   29628:	ldrne	r0, [r3, #28]
   2962c:	str	r1, [r3, #28]
   29630:	subne	r2, r2, r0
   29634:	addne	r2, r1, r2
   29638:	strne	r2, [r3, #24]
   2963c:	ldr	r2, [r3, #8]
   29640:	cmp	r2, #0
   29644:	ldreq	r2, [r3, #4]
   29648:	mov	r3, r2
   2964c:	b	29610 <__assert_fail@plt+0x16f24>
   29650:	ldr	r2, [r3, #24]
   29654:	add	r0, r3, #168	; 0xa8
   29658:	cmp	r2, r0
   2965c:	ldrne	r0, [r3, #28]
   29660:	str	r1, [r3, #28]
   29664:	subne	r2, r2, r0
   29668:	addne	r2, r1, r2
   2966c:	strne	r2, [r3, #24]
   29670:	ldr	r3, [r3, #8]
   29674:	b	29604 <__assert_fail@plt+0x16f18>
   29678:	ldr	r2, [sp, #16]
   2967c:	ldr	r3, [r4, #36]	; 0x24
   29680:	cmp	r9, #0
   29684:	cmpne	r3, r2
   29688:	ldreq	r3, [sp, #4]
   2968c:	subeq	r3, r3, #1
   29690:	streq	r3, [sp, #4]
   29694:	mov	r3, #0
   29698:	ldr	r2, [sp, #4]
   2969c:	strb	r3, [r2]
   296a0:	b	2913c <__assert_fail@plt+0x16a50>
   296a4:	ldr	r3, [pc, #168]	; 29754 <__assert_fail@plt+0x17068>
   296a8:	mvn	r2, #0
   296ac:	mov	r0, r4
   296b0:	ldr	r1, [r5, #4]
   296b4:	bl	28b38 <__assert_fail@plt+0x1644c>
   296b8:	b	29178 <__assert_fail@plt+0x16a8c>
   296bc:	cmp	r9, #0
   296c0:	bne	296e8 <__assert_fail@plt+0x16ffc>
   296c4:	ldr	r3, [sp, #8]
   296c8:	cmp	r3, #3
   296cc:	bne	2919c <__assert_fail@plt+0x16ab0>
   296d0:	ldrh	r3, [r5, #56]	; 0x38
   296d4:	cmp	r3, #4
   296d8:	cmpne	r3, #7
   296dc:	movne	r3, #6
   296e0:	strhne	r3, [r5, #56]	; 0x38
   296e4:	b	2919c <__assert_fail@plt+0x16ab0>
   296e8:	cmp	r8, #0
   296ec:	beq	29718 <__assert_fail@plt+0x1702c>
   296f0:	ldr	r3, [pc, #96]	; 29758 <__assert_fail@plt+0x1706c>
   296f4:	mov	r1, r6
   296f8:	mov	r2, r9
   296fc:	mov	r0, r4
   29700:	str	r3, [r4, #44]	; 0x2c
   29704:	bl	287ac <__assert_fail@plt+0x160c0>
   29708:	mov	r3, #0
   2970c:	mov	r6, r0
   29710:	str	r3, [r4, #44]	; 0x2c
   29714:	b	28fa0 <__assert_fail@plt+0x168b4>
   29718:	ldr	r3, [r4, #44]	; 0x2c
   2971c:	cmp	r3, #0
   29720:	cmpne	r9, #1
   29724:	beq	28fa0 <__assert_fail@plt+0x168b4>
   29728:	mov	r1, r6
   2972c:	mov	r2, r9
   29730:	mov	r0, r4
   29734:	bl	287ac <__assert_fail@plt+0x160c0>
   29738:	mov	r6, r0
   2973c:	b	28fa0 <__assert_fail@plt+0x168b4>
   29740:	andeq	r8, r1, r0, lsr #13
   29744:			; <UNDEFINED> instruction: 0xff534d42
   29748:	movtpl	r4, #24911	; 0x614f
   2974c:	andeq	ip, r3, r4, lsl #29
   29750:			; <UNDEFINED> instruction: 0x01021994
   29754:	muleq	r3, ip, lr
   29758:	andeq	r8, r2, r0, asr #12
   2975c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29760:	bic	r4, r1, #4080	; 0xff0
   29764:	bic	r4, r4, #15
   29768:	cmp	r4, #0
   2976c:	str	r0, [sp]
   29770:	beq	29788 <__assert_fail@plt+0x1709c>
   29774:	bl	12404 <__errno_location@plt>
   29778:	mov	r3, #22
   2977c:	str	r3, [r0]
   29780:	mov	r4, #0
   29784:	b	297a4 <__assert_fail@plt+0x170b8>
   29788:	and	r3, r1, #516	; 0x204
   2978c:	mov	r6, r1
   29790:	cmp	r3, #516	; 0x204
   29794:	bne	297b0 <__assert_fail@plt+0x170c4>
   29798:	bl	12404 <__errno_location@plt>
   2979c:	mov	r3, #22
   297a0:	str	r3, [r0]
   297a4:	mov	r0, r4
   297a8:	add	sp, sp, #12
   297ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297b0:	ands	r4, r1, #18
   297b4:	beq	29798 <__assert_fail@plt+0x170ac>
   297b8:	mov	r1, #96	; 0x60
   297bc:	mov	r0, #1
   297c0:	mov	sl, r2
   297c4:	bl	27fbc <__assert_fail@plt+0x158d0>
   297c8:	subs	r4, r0, #0
   297cc:	beq	297a4 <__assert_fail@plt+0x170b8>
   297d0:	tst	r6, #2
   297d4:	mov	r5, #0
   297d8:	str	sl, [r4, #44]	; 0x2c
   297dc:	bicne	r3, r6, #512	; 0x200
   297e0:	orrne	r3, r3, #4
   297e4:	streq	r6, [r4, #48]	; 0x30
   297e8:	strne	r3, [r4, #48]	; 0x30
   297ec:	mvn	r3, #99	; 0x63
   297f0:	str	r3, [r4, #32]
   297f4:	ldr	r3, [sp]
   297f8:	sub	r8, r3, #4
   297fc:	ldr	r7, [r8, #4]!
   29800:	cmp	r7, #0
   29804:	bne	29928 <__assert_fail@plt+0x1723c>
   29808:	add	r1, r5, #1
   2980c:	mov	r0, r4
   29810:	cmp	r1, #4096	; 0x1000
   29814:	movcc	r1, #4096	; 0x1000
   29818:	bl	28cd4 <__assert_fail@plt+0x165e8>
   2981c:	cmp	r0, #0
   29820:	beq	29a38 <__assert_fail@plt+0x1734c>
   29824:	ldr	r3, [sp]
   29828:	ldr	r8, [r3]
   2982c:	cmp	r8, #0
   29830:	beq	29854 <__assert_fail@plt+0x17168>
   29834:	mov	r2, r7
   29838:	ldr	r1, [pc, #516]	; 29a44 <__assert_fail@plt+0x17358>
   2983c:	mov	r0, r4
   29840:	bl	28864 <__assert_fail@plt+0x16178>
   29844:	subs	r8, r0, #0
   29848:	beq	29a30 <__assert_fail@plt+0x17344>
   2984c:	mvn	r3, #0
   29850:	str	r3, [r8, #48]	; 0x30
   29854:	cmp	sl, #0
   29858:	eor	r6, r6, #2048	; 0x800
   2985c:	ldrne	r3, [r4, #48]	; 0x30
   29860:	mov	fp, #0
   29864:	ubfx	r6, r6, #11, #1
   29868:	moveq	r3, #1
   2986c:	mov	r7, fp
   29870:	mov	r9, fp
   29874:	ubfxne	r3, r3, #10, #1
   29878:	str	r3, [sp, #4]
   2987c:	ldr	r3, [sp]
   29880:	ldr	r5, [r3, r9, lsl #2]
   29884:	cmp	r5, #0
   29888:	bne	2993c <__assert_fail@plt+0x17250>
   2988c:	cmp	sl, #0
   29890:	cmpne	r9, #1
   29894:	bls	298ac <__assert_fail@plt+0x171c0>
   29898:	mov	r1, r7
   2989c:	mov	r2, r9
   298a0:	mov	r0, r4
   298a4:	bl	287ac <__assert_fail@plt+0x160c0>
   298a8:	mov	r7, r0
   298ac:	mov	r2, #0
   298b0:	ldr	r1, [pc, #396]	; 29a44 <__assert_fail@plt+0x17358>
   298b4:	mov	r0, r4
   298b8:	bl	28864 <__assert_fail@plt+0x16178>
   298bc:	cmp	r0, #0
   298c0:	str	r0, [r4]
   298c4:	beq	29a20 <__assert_fail@plt+0x17334>
   298c8:	mov	r3, #9
   298cc:	str	r7, [r0, #8]
   298d0:	strh	r3, [r0, #56]	; 0x38
   298d4:	mov	r3, #1
   298d8:	str	r3, [r0, #48]	; 0x30
   298dc:	mov	r0, r4
   298e0:	bl	28d3c <__assert_fail@plt+0x16650>
   298e4:	cmp	r0, #0
   298e8:	beq	29a20 <__assert_fail@plt+0x17334>
   298ec:	ldr	r3, [r4, #48]	; 0x30
   298f0:	tst	r3, #516	; 0x204
   298f4:	bne	29918 <__assert_fail@plt+0x1722c>
   298f8:	ldr	r1, [pc, #328]	; 29a48 <__assert_fail@plt+0x1735c>
   298fc:	mov	r0, r4
   29900:	bl	288d8 <__assert_fail@plt+0x161ec>
   29904:	cmp	r0, #0
   29908:	str	r0, [r4, #28]
   2990c:	ldrlt	r3, [r4, #48]	; 0x30
   29910:	orrlt	r3, r3, #4
   29914:	strlt	r3, [r4, #48]	; 0x30
   29918:	mvn	r1, #0
   2991c:	add	r0, r4, #60	; 0x3c
   29920:	bl	36e98 <__assert_fail@plt+0x247ac>
   29924:	b	297a4 <__assert_fail@plt+0x170b8>
   29928:	mov	r0, r7
   2992c:	bl	123bc <strlen@plt>
   29930:	cmp	r5, r0
   29934:	movcc	r5, r0
   29938:	b	297fc <__assert_fail@plt+0x17110>
   2993c:	mov	r0, r5
   29940:	bl	123bc <strlen@plt>
   29944:	cmp	r0, #2
   29948:	movls	r1, #0
   2994c:	andhi	r1, r6, #1
   29950:	mov	r2, r0
   29954:	cmp	r1, #0
   29958:	beq	29970 <__assert_fail@plt+0x17284>
   2995c:	add	r1, r5, r0
   29960:	ldrb	r1, [r1, #-1]
   29964:	cmp	r1, #47	; 0x2f
   29968:	subeq	r0, r5, #2
   2996c:	beq	299fc <__assert_fail@plt+0x17310>
   29970:	mov	r1, r5
   29974:	mov	r0, r4
   29978:	bl	28864 <__assert_fail@plt+0x16178>
   2997c:	subs	r5, r0, #0
   29980:	beq	29a20 <__assert_fail@plt+0x17334>
   29984:	mov	r2, #0
   29988:	cmp	r7, #0
   2998c:	str	r8, [r5, #4]
   29990:	str	r2, [r5, #48]	; 0x30
   29994:	add	r2, r5, #168	; 0xa8
   29998:	str	r2, [r5, #24]
   2999c:	ldr	r2, [sp, #4]
   299a0:	moveq	r2, #0
   299a4:	cmp	r2, #0
   299a8:	beq	29a0c <__assert_fail@plt+0x17320>
   299ac:	mov	r2, #11
   299b0:	mov	r0, #2
   299b4:	mov	r1, #0
   299b8:	strh	r2, [r5, #56]	; 0x38
   299bc:	strd	r0, [r5, #112]	; 0x70
   299c0:	cmp	sl, #0
   299c4:	strne	r7, [r5, #8]
   299c8:	bne	299e4 <__assert_fail@plt+0x172f8>
   299cc:	cmp	r7, #0
   299d0:	str	sl, [r5, #8]
   299d4:	moveq	fp, r5
   299d8:	strne	r5, [fp, #8]
   299dc:	movne	fp, r5
   299e0:	movne	r5, r7
   299e4:	add	r9, r9, #1
   299e8:	mov	r7, r5
   299ec:	b	2987c <__assert_fail@plt+0x17190>
   299f0:	sub	r2, r2, #1
   299f4:	cmp	r2, #1
   299f8:	beq	29970 <__assert_fail@plt+0x17284>
   299fc:	ldrb	r1, [r0, r2]
   29a00:	cmp	r1, #47	; 0x2f
   29a04:	beq	299f0 <__assert_fail@plt+0x17304>
   29a08:	b	29970 <__assert_fail@plt+0x17284>
   29a0c:	mov	r1, r5
   29a10:	mov	r0, r4
   29a14:	bl	28674 <__assert_fail@plt+0x15f88>
   29a18:	strh	r0, [r5, #56]	; 0x38
   29a1c:	b	299c0 <__assert_fail@plt+0x172d4>
   29a20:	mov	r0, r7
   29a24:	bl	2890c <__assert_fail@plt+0x16220>
   29a28:	mov	r0, r8
   29a2c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29a30:	ldr	r0, [r4, #24]
   29a34:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29a38:	mov	r0, r4
   29a3c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29a40:	b	29780 <__assert_fail@plt+0x17094>
   29a44:	andeq	r9, r3, r7, ror r5
   29a48:	ldrdeq	r8, [r3], -r9
   29a4c:	push	{r4, r5, r6, lr}
   29a50:	mov	r4, r0
   29a54:	ldr	r0, [r0]
   29a58:	cmp	r0, #0
   29a5c:	bne	29af4 <__assert_fail@plt+0x17408>
   29a60:	ldr	r0, [r4, #4]
   29a64:	cmp	r0, #0
   29a68:	beq	29a70 <__assert_fail@plt+0x17384>
   29a6c:	bl	2890c <__assert_fail@plt+0x16220>
   29a70:	ldr	r0, [r4, #8]
   29a74:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29a78:	ldr	r0, [r4, #24]
   29a7c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29a80:	ldr	r3, [r4, #48]	; 0x30
   29a84:	tst	r3, #512	; 0x200
   29a88:	beq	29b20 <__assert_fail@plt+0x17434>
   29a8c:	ldr	r0, [r4, #32]
   29a90:	cmp	r0, #0
   29a94:	bge	29b08 <__assert_fail@plt+0x1741c>
   29a98:	mov	r5, #0
   29a9c:	add	r0, r4, #60	; 0x3c
   29aa0:	bl	28940 <__assert_fail@plt+0x16254>
   29aa4:	ldr	r0, [r4, #52]	; 0x34
   29aa8:	cmp	r0, #0
   29aac:	beq	29ab4 <__assert_fail@plt+0x173c8>
   29ab0:	bl	20560 <__assert_fail@plt+0xde74>
   29ab4:	mov	r0, r4
   29ab8:	bl	28db0 <__assert_fail@plt+0x166c4>
   29abc:	mov	r0, r4
   29ac0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29ac4:	cmp	r5, #0
   29ac8:	beq	29ad8 <__assert_fail@plt+0x173ec>
   29acc:	bl	12404 <__errno_location@plt>
   29ad0:	str	r5, [r0]
   29ad4:	mvn	r5, #0
   29ad8:	mov	r0, r5
   29adc:	pop	{r4, r5, r6, pc}
   29ae0:	ldr	r5, [r0, #8]
   29ae4:	cmp	r5, #0
   29ae8:	ldreq	r5, [r0, #4]
   29aec:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29af0:	mov	r0, r5
   29af4:	ldr	r3, [r0, #48]	; 0x30
   29af8:	cmp	r3, #0
   29afc:	bge	29ae0 <__assert_fail@plt+0x173f4>
   29b00:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29b04:	b	29a60 <__assert_fail@plt+0x17374>
   29b08:	bl	126a4 <close@plt>
   29b0c:	cmp	r0, #0
   29b10:	beq	29a98 <__assert_fail@plt+0x173ac>
   29b14:	bl	12404 <__errno_location@plt>
   29b18:	ldr	r5, [r0]
   29b1c:	b	29a9c <__assert_fail@plt+0x173b0>
   29b20:	tst	r3, #4
   29b24:	bne	29a98 <__assert_fail@plt+0x173ac>
   29b28:	ldr	r0, [r4, #28]
   29b2c:	bl	125d8 <fchdir@plt>
   29b30:	subs	r5, r0, #0
   29b34:	beq	29b40 <__assert_fail@plt+0x17454>
   29b38:	bl	12404 <__errno_location@plt>
   29b3c:	ldr	r5, [r0]
   29b40:	ldr	r0, [r4, #28]
   29b44:	bl	126a4 <close@plt>
   29b48:	adds	r0, r0, #0
   29b4c:	movne	r0, #1
   29b50:	cmp	r5, #0
   29b54:	movne	r0, #0
   29b58:	cmp	r0, #0
   29b5c:	beq	29a9c <__assert_fail@plt+0x173b0>
   29b60:	b	29b14 <__assert_fail@plt+0x17428>
   29b64:	push	{r4, r5, r6, r7, r8, lr}
   29b68:	ldr	r4, [r0]
   29b6c:	cmp	r4, #0
   29b70:	bne	29b80 <__assert_fail@plt+0x17494>
   29b74:	mov	r4, #0
   29b78:	mov	r0, r4
   29b7c:	pop	{r4, r5, r6, r7, r8, pc}
   29b80:	ldr	r1, [r0, #48]	; 0x30
   29b84:	mov	r5, r0
   29b88:	ands	r2, r1, #8192	; 0x2000
   29b8c:	bne	29b74 <__assert_fail@plt+0x17488>
   29b90:	ldrh	ip, [r4, #60]	; 0x3c
   29b94:	mov	r3, #3
   29b98:	strh	r3, [r4, #60]	; 0x3c
   29b9c:	cmp	ip, #1
   29ba0:	bne	29bb4 <__assert_fail@plt+0x174c8>
   29ba4:	mov	r1, r4
   29ba8:	bl	28674 <__assert_fail@plt+0x15f88>
   29bac:	strh	r0, [r4, #56]	; 0x38
   29bb0:	b	29b78 <__assert_fail@plt+0x1748c>
   29bb4:	cmp	ip, #2
   29bb8:	ldrh	r3, [r4, #56]	; 0x38
   29bbc:	bne	29c9c <__assert_fail@plt+0x175b0>
   29bc0:	sub	r2, r3, #12
   29bc4:	cmp	r2, #1
   29bc8:	bhi	2a090 <__assert_fail@plt+0x179a4>
   29bcc:	mov	r2, #1
   29bd0:	mov	r1, r4
   29bd4:	bl	28674 <__assert_fail@plt+0x15f88>
   29bd8:	cmp	r0, #1
   29bdc:	strh	r0, [r4, #56]	; 0x38
   29be0:	bne	29c28 <__assert_fail@plt+0x1753c>
   29be4:	ldr	r3, [r5, #48]	; 0x30
   29be8:	tst	r3, #4
   29bec:	bne	29c28 <__assert_fail@plt+0x1753c>
   29bf0:	ldr	r1, [pc, #1320]	; 2a120 <__assert_fail@plt+0x17a34>
   29bf4:	mov	r0, r5
   29bf8:	bl	288d8 <__assert_fail@plt+0x161ec>
   29bfc:	cmp	r0, #0
   29c00:	str	r0, [r4, #36]	; 0x24
   29c04:	ldrhge	r3, [r4, #58]	; 0x3a
   29c08:	orrge	r3, r3, #2
   29c0c:	strhge	r3, [r4, #58]	; 0x3a
   29c10:	bge	29c28 <__assert_fail@plt+0x1753c>
   29c14:	bl	12404 <__errno_location@plt>
   29c18:	ldr	r3, [r0]
   29c1c:	str	r3, [r4, #32]
   29c20:	mov	r3, #7
   29c24:	strh	r3, [r4, #56]	; 0x38
   29c28:	ldrh	r3, [r4, #56]	; 0x38
   29c2c:	str	r4, [r5]
   29c30:	cmp	r3, #11
   29c34:	bne	29c5c <__assert_fail@plt+0x17570>
   29c38:	ldrd	r2, [r4, #112]	; 0x70
   29c3c:	cmp	r3, #0
   29c40:	cmpeq	r2, #2
   29c44:	bne	29ed8 <__assert_fail@plt+0x177ec>
   29c48:	mov	r2, #0
   29c4c:	mov	r1, r4
   29c50:	mov	r0, r5
   29c54:	bl	28674 <__assert_fail@plt+0x15f88>
   29c58:	strh	r0, [r4, #56]	; 0x38
   29c5c:	ldrh	r3, [r4, #56]	; 0x38
   29c60:	cmp	r3, #1
   29c64:	bne	29b78 <__assert_fail@plt+0x1748c>
   29c68:	ldr	r3, [r4, #48]	; 0x30
   29c6c:	mov	r0, r5
   29c70:	mov	r1, r4
   29c74:	cmp	r3, #0
   29c78:	ldrdeq	r2, [r4, #64]	; 0x40
   29c7c:	strdeq	r2, [r5, #16]
   29c80:	bl	28dd8 <__assert_fail@plt+0x166ec>
   29c84:	subs	r5, r0, #0
   29c88:	bne	29b78 <__assert_fail@plt+0x1748c>
   29c8c:	bl	12404 <__errno_location@plt>
   29c90:	mov	r3, #12
   29c94:	str	r3, [r0]
   29c98:	b	29b74 <__assert_fail@plt+0x17488>
   29c9c:	cmp	r3, #1
   29ca0:	bne	2a098 <__assert_fail@plt+0x179ac>
   29ca4:	cmp	ip, #4
   29ca8:	beq	29cc8 <__assert_fail@plt+0x175dc>
   29cac:	tst	r1, #64	; 0x40
   29cb0:	beq	29d0c <__assert_fail@plt+0x17620>
   29cb4:	ldrd	r2, [r5, #16]
   29cb8:	ldrd	r6, [r4, #64]	; 0x40
   29cbc:	cmp	r7, r3
   29cc0:	cmpeq	r6, r2
   29cc4:	beq	29d0c <__assert_fail@plt+0x17620>
   29cc8:	ldrh	r3, [r4, #58]	; 0x3a
   29ccc:	tst	r3, #2
   29cd0:	beq	29cdc <__assert_fail@plt+0x175f0>
   29cd4:	ldr	r0, [r4, #36]	; 0x24
   29cd8:	bl	126a4 <close@plt>
   29cdc:	ldr	r0, [r5, #4]
   29ce0:	cmp	r0, #0
   29ce4:	beq	29cf4 <__assert_fail@plt+0x17608>
   29ce8:	bl	2890c <__assert_fail@plt+0x16220>
   29cec:	mov	r3, #0
   29cf0:	str	r3, [r5, #4]
   29cf4:	mov	r3, #6
   29cf8:	strh	r3, [r4, #56]	; 0x38
   29cfc:	mov	r1, r4
   29d00:	mov	r0, r5
   29d04:	bl	28e88 <__assert_fail@plt+0x1679c>
   29d08:	b	29b78 <__assert_fail@plt+0x1748c>
   29d0c:	ldr	r0, [r5, #4]
   29d10:	cmp	r0, #0
   29d14:	beq	29d34 <__assert_fail@plt+0x17648>
   29d18:	tst	r1, #4096	; 0x1000
   29d1c:	beq	2a000 <__assert_fail@plt+0x17914>
   29d20:	bic	r1, r1, #4096	; 0x1000
   29d24:	str	r1, [r5, #48]	; 0x30
   29d28:	bl	2890c <__assert_fail@plt+0x16220>
   29d2c:	mov	r3, #0
   29d30:	str	r3, [r5, #4]
   29d34:	mov	r1, #3
   29d38:	mov	r0, r5
   29d3c:	bl	28f38 <__assert_fail@plt+0x1684c>
   29d40:	cmp	r0, #0
   29d44:	str	r0, [r5, #4]
   29d48:	bne	2a040 <__assert_fail@plt+0x17954>
   29d4c:	ldr	r3, [r5, #48]	; 0x30
   29d50:	tst	r3, #8192	; 0x2000
   29d54:	bne	29b74 <__assert_fail@plt+0x17488>
   29d58:	ldr	r3, [r4, #32]
   29d5c:	cmp	r3, #0
   29d60:	beq	29cfc <__assert_fail@plt+0x17610>
   29d64:	ldrh	r3, [r4, #56]	; 0x38
   29d68:	cmp	r3, #4
   29d6c:	beq	29cfc <__assert_fail@plt+0x17610>
   29d70:	mov	r3, #7
   29d74:	b	29cf8 <__assert_fail@plt+0x1760c>
   29d78:	ldr	r2, [r3, #4]
   29d7c:	ldr	r2, [r2, #24]
   29d80:	str	r2, [r3, #24]
   29d84:	ldr	r3, [r3, #8]
   29d88:	b	2a038 <__assert_fail@plt+0x1794c>
   29d8c:	mov	r0, r6
   29d90:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29d94:	b	2a04c <__assert_fail@plt+0x17960>
   29d98:	mov	r0, r6
   29d9c:	str	r4, [r5]
   29da0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   29da4:	ldr	r6, [r4, #48]	; 0x30
   29da8:	cmp	r6, #0
   29dac:	bne	29e54 <__assert_fail@plt+0x17768>
   29db0:	mov	r0, r5
   29db4:	bl	28ae8 <__assert_fail@plt+0x163fc>
   29db8:	cmp	r0, #0
   29dbc:	ldrne	r3, [r5, #48]	; 0x30
   29dc0:	orrne	r3, r3, #8192	; 0x2000
   29dc4:	strne	r3, [r5, #48]	; 0x30
   29dc8:	bne	29b74 <__assert_fail@plt+0x17488>
   29dcc:	mov	r0, r5
   29dd0:	add	r6, r4, #168	; 0xa8
   29dd4:	bl	28db0 <__assert_fail@plt+0x166c4>
   29dd8:	ldr	r2, [r4, #52]	; 0x34
   29ddc:	mov	r1, r6
   29de0:	ldr	r0, [r5, #24]
   29de4:	str	r2, [r4, #40]	; 0x28
   29de8:	add	r2, r2, #1
   29dec:	bl	1208c <memmove@plt>
   29df0:	mov	r1, #47	; 0x2f
   29df4:	mov	r0, r6
   29df8:	bl	12548 <strrchr@plt>
   29dfc:	cmp	r0, #0
   29e00:	beq	29e3c <__assert_fail@plt+0x17750>
   29e04:	cmp	r6, r0
   29e08:	bne	29e18 <__assert_fail@plt+0x1772c>
   29e0c:	ldrb	r3, [r6, #1]
   29e10:	cmp	r3, #0
   29e14:	beq	29e3c <__assert_fail@plt+0x17750>
   29e18:	add	r7, r0, #1
   29e1c:	mov	r0, r7
   29e20:	bl	123bc <strlen@plt>
   29e24:	mov	r8, r0
   29e28:	add	r2, r0, #1
   29e2c:	mov	r1, r7
   29e30:	mov	r0, r6
   29e34:	bl	1208c <memmove@plt>
   29e38:	str	r8, [r4, #52]	; 0x34
   29e3c:	ldr	r3, [r5, #24]
   29e40:	mov	r0, r5
   29e44:	str	r3, [r4, #24]
   29e48:	str	r3, [r4, #28]
   29e4c:	bl	28d3c <__assert_fail@plt+0x16650>
   29e50:	b	29c28 <__assert_fail@plt+0x1753c>
   29e54:	ldrh	r3, [r4, #60]	; 0x3c
   29e58:	mov	r6, r4
   29e5c:	cmp	r3, #4
   29e60:	beq	2a09c <__assert_fail@plt+0x179b0>
   29e64:	cmp	r3, #2
   29e68:	bne	2a04c <__assert_fail@plt+0x17960>
   29e6c:	mov	r2, #1
   29e70:	mov	r1, r4
   29e74:	mov	r0, r5
   29e78:	bl	28674 <__assert_fail@plt+0x15f88>
   29e7c:	cmp	r0, #1
   29e80:	strh	r0, [r4, #56]	; 0x38
   29e84:	bne	29ecc <__assert_fail@plt+0x177e0>
   29e88:	ldr	r3, [r5, #48]	; 0x30
   29e8c:	tst	r3, #4
   29e90:	bne	29ecc <__assert_fail@plt+0x177e0>
   29e94:	ldr	r1, [pc, #644]	; 2a120 <__assert_fail@plt+0x17a34>
   29e98:	mov	r0, r5
   29e9c:	bl	288d8 <__assert_fail@plt+0x161ec>
   29ea0:	cmp	r0, #0
   29ea4:	str	r0, [r4, #36]	; 0x24
   29ea8:	ldrhge	r3, [r4, #58]	; 0x3a
   29eac:	orrge	r3, r3, #2
   29eb0:	strhge	r3, [r4, #58]	; 0x3a
   29eb4:	bge	29ecc <__assert_fail@plt+0x177e0>
   29eb8:	bl	12404 <__errno_location@plt>
   29ebc:	ldr	r3, [r0]
   29ec0:	str	r3, [r4, #32]
   29ec4:	mov	r3, #7
   29ec8:	strh	r3, [r4, #56]	; 0x38
   29ecc:	mov	r3, #3
   29ed0:	strh	r3, [r4, #60]	; 0x3c
   29ed4:	b	2a04c <__assert_fail@plt+0x17960>
   29ed8:	cmp	r3, #0
   29edc:	cmpeq	r2, #1
   29ee0:	beq	29b78 <__assert_fail@plt+0x1748c>
   29ee4:	bl	12698 <abort@plt>
   29ee8:	ldrh	r3, [r4, #56]	; 0x38
   29eec:	cmp	r3, #11
   29ef0:	beq	29ee4 <__assert_fail@plt+0x177f8>
   29ef4:	ldr	r2, [r5, #24]
   29ef8:	mov	r1, #0
   29efc:	ldr	r3, [r4, #40]	; 0x28
   29f00:	strb	r1, [r2, r3]
   29f04:	ldr	r3, [r4, #48]	; 0x30
   29f08:	cmp	r3, r1
   29f0c:	bne	29f3c <__assert_fail@plt+0x17850>
   29f10:	mov	r0, r5
   29f14:	bl	28ae8 <__assert_fail@plt+0x163fc>
   29f18:	cmp	r0, #0
   29f1c:	beq	29f74 <__assert_fail@plt+0x17888>
   29f20:	bl	12404 <__errno_location@plt>
   29f24:	ldr	r3, [r0]
   29f28:	str	r3, [r4, #32]
   29f2c:	ldr	r3, [r5, #48]	; 0x30
   29f30:	orr	r3, r3, #8192	; 0x2000
   29f34:	str	r3, [r5, #48]	; 0x30
   29f38:	b	29f74 <__assert_fail@plt+0x17888>
   29f3c:	ldrh	r3, [r4, #58]	; 0x3a
   29f40:	tst	r3, #2
   29f44:	beq	29fe0 <__assert_fail@plt+0x178f4>
   29f48:	ldr	r3, [r5, #48]	; 0x30
   29f4c:	tst	r3, #4
   29f50:	bne	29f6c <__assert_fail@plt+0x17880>
   29f54:	tst	r3, #512	; 0x200
   29f58:	ldr	r1, [r4, #36]	; 0x24
   29f5c:	beq	29fb4 <__assert_fail@plt+0x178c8>
   29f60:	mov	r2, #1
   29f64:	mov	r0, r5
   29f68:	bl	28a74 <__assert_fail@plt+0x16388>
   29f6c:	ldr	r0, [r4, #36]	; 0x24
   29f70:	bl	126a4 <close@plt>
   29f74:	ldrh	r3, [r4, #56]	; 0x38
   29f78:	cmp	r3, #2
   29f7c:	beq	29fa4 <__assert_fail@plt+0x178b8>
   29f80:	ldr	r3, [r4, #32]
   29f84:	cmp	r3, #0
   29f88:	movne	r3, #7
   29f8c:	moveq	r3, #6
   29f90:	strh	r3, [r4, #56]	; 0x38
   29f94:	bne	29fa4 <__assert_fail@plt+0x178b8>
   29f98:	mov	r1, r4
   29f9c:	mov	r0, r5
   29fa0:	bl	28e88 <__assert_fail@plt+0x1679c>
   29fa4:	ldr	r3, [r5, #48]	; 0x30
   29fa8:	tst	r3, #8192	; 0x2000
   29fac:	beq	29b78 <__assert_fail@plt+0x1748c>
   29fb0:	b	29b74 <__assert_fail@plt+0x17488>
   29fb4:	mov	r0, r1
   29fb8:	bl	125d8 <fchdir@plt>
   29fbc:	cmp	r0, #0
   29fc0:	beq	29f6c <__assert_fail@plt+0x17880>
   29fc4:	bl	12404 <__errno_location@plt>
   29fc8:	ldr	r3, [r0]
   29fcc:	str	r3, [r4, #32]
   29fd0:	ldr	r3, [r5, #48]	; 0x30
   29fd4:	orr	r3, r3, #8192	; 0x2000
   29fd8:	str	r3, [r5, #48]	; 0x30
   29fdc:	b	29f6c <__assert_fail@plt+0x17880>
   29fe0:	tst	r3, #1
   29fe4:	bne	29f74 <__assert_fail@plt+0x17888>
   29fe8:	ldr	r3, [pc, #308]	; 2a124 <__assert_fail@plt+0x17a38>
   29fec:	mvn	r2, #0
   29ff0:	mov	r0, r5
   29ff4:	ldr	r1, [r4, #4]
   29ff8:	bl	28b38 <__assert_fail@plt+0x1644c>
   29ffc:	b	29f18 <__assert_fail@plt+0x1782c>
   2a000:	mvn	r2, #0
   2a004:	mov	r1, r4
   2a008:	ldr	r3, [r4, #24]
   2a00c:	mov	r0, r5
   2a010:	bl	28b38 <__assert_fail@plt+0x1644c>
   2a014:	cmp	r0, #0
   2a018:	beq	2a040 <__assert_fail@plt+0x17954>
   2a01c:	bl	12404 <__errno_location@plt>
   2a020:	ldr	r3, [r0]
   2a024:	str	r3, [r4, #32]
   2a028:	ldrh	r3, [r4, #58]	; 0x3a
   2a02c:	orr	r3, r3, #1
   2a030:	strh	r3, [r4, #58]	; 0x3a
   2a034:	ldr	r3, [r5, #4]
   2a038:	cmp	r3, #0
   2a03c:	bne	29d78 <__assert_fail@plt+0x1768c>
   2a040:	mov	r3, #0
   2a044:	ldr	r4, [r5, #4]
   2a048:	str	r3, [r5, #4]
   2a04c:	ldr	r0, [r4, #4]
   2a050:	ldr	r2, [r5, #24]
   2a054:	ldr	r1, [r0, #40]	; 0x28
   2a058:	ldr	r0, [r0, #28]
   2a05c:	sub	r3, r1, #1
   2a060:	ldrb	r0, [r0, r3]
   2a064:	cmp	r0, #47	; 0x2f
   2a068:	movne	r3, r1
   2a06c:	mov	r1, #47	; 0x2f
   2a070:	add	r0, r2, r3
   2a074:	strb	r1, [r2, r3]
   2a078:	add	r0, r0, #1
   2a07c:	add	r1, r4, #168	; 0xa8
   2a080:	ldr	r2, [r4, #52]	; 0x34
   2a084:	add	r2, r2, #1
   2a088:	bl	1208c <memmove@plt>
   2a08c:	b	29c28 <__assert_fail@plt+0x1753c>
   2a090:	cmp	r3, #1
   2a094:	beq	29cac <__assert_fail@plt+0x175c0>
   2a098:	mov	r6, r4
   2a09c:	ldr	r4, [r6, #8]
   2a0a0:	cmp	r4, #0
   2a0a4:	bne	29d98 <__assert_fail@plt+0x176ac>
   2a0a8:	ldr	r3, [r6, #4]
   2a0ac:	ldr	r2, [r3, #12]
   2a0b0:	cmp	r2, #0
   2a0b4:	beq	2a0e8 <__assert_fail@plt+0x179fc>
   2a0b8:	str	r3, [r5]
   2a0bc:	mov	r1, #3
   2a0c0:	mov	r0, r5
   2a0c4:	ldr	r2, [r5, #24]
   2a0c8:	ldr	r3, [r3, #40]	; 0x28
   2a0cc:	strb	r4, [r2, r3]
   2a0d0:	bl	28f38 <__assert_fail@plt+0x1684c>
   2a0d4:	subs	r4, r0, #0
   2a0d8:	bne	29d8c <__assert_fail@plt+0x176a0>
   2a0dc:	ldr	r3, [r5, #48]	; 0x30
   2a0e0:	tst	r3, #8192	; 0x2000
   2a0e4:	bne	29b74 <__assert_fail@plt+0x17488>
   2a0e8:	ldr	r4, [r6, #4]
   2a0ec:	mov	r0, r6
   2a0f0:	str	r4, [r5]
   2a0f4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2a0f8:	ldr	r3, [r4, #48]	; 0x30
   2a0fc:	cmn	r3, #1
   2a100:	bne	29ee8 <__assert_fail@plt+0x177fc>
   2a104:	mov	r0, r4
   2a108:	mov	r4, #0
   2a10c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2a110:	bl	12404 <__errno_location@plt>
   2a114:	str	r4, [r0]
   2a118:	str	r4, [r5]
   2a11c:	b	29b78 <__assert_fail@plt+0x1748c>
   2a120:	ldrdeq	r8, [r3], -r9
   2a124:	muleq	r3, ip, lr
   2a128:	cmp	r2, #4
   2a12c:	bls	2a148 <__assert_fail@plt+0x17a5c>
   2a130:	push	{r4, lr}
   2a134:	bl	12404 <__errno_location@plt>
   2a138:	mov	r3, #22
   2a13c:	str	r3, [r0]
   2a140:	mov	r0, #1
   2a144:	pop	{r4, pc}
   2a148:	mov	r0, #0
   2a14c:	strh	r2, [r1, #60]	; 0x3c
   2a150:	bx	lr
   2a154:	push	{r4, r5, r6, r7, r8, lr}
   2a158:	mov	r7, r1
   2a15c:	mov	r5, r0
   2a160:	bl	12404 <__errno_location@plt>
   2a164:	bics	r2, r7, #4096	; 0x1000
   2a168:	mov	r6, r0
   2a16c:	beq	2a180 <__assert_fail@plt+0x17a94>
   2a170:	mov	r3, #22
   2a174:	str	r3, [r0]
   2a178:	mov	r0, #0
   2a17c:	pop	{r4, r5, r6, r7, r8, pc}
   2a180:	ldr	r4, [r5]
   2a184:	str	r2, [r0]
   2a188:	ldr	r3, [r5, #48]	; 0x30
   2a18c:	ands	r0, r3, #8192	; 0x2000
   2a190:	bne	2a178 <__assert_fail@plt+0x17a8c>
   2a194:	ldrh	r3, [r4, #56]	; 0x38
   2a198:	cmp	r3, #9
   2a19c:	bne	2a1a8 <__assert_fail@plt+0x17abc>
   2a1a0:	ldr	r0, [r4, #8]
   2a1a4:	pop	{r4, r5, r6, r7, r8, pc}
   2a1a8:	cmp	r3, #1
   2a1ac:	popne	{r4, r5, r6, r7, r8, pc}
   2a1b0:	ldr	r0, [r5, #4]
   2a1b4:	cmp	r0, #0
   2a1b8:	beq	2a1c0 <__assert_fail@plt+0x17ad4>
   2a1bc:	bl	2890c <__assert_fail@plt+0x16220>
   2a1c0:	cmp	r7, #4096	; 0x1000
   2a1c4:	ldreq	r3, [r5, #48]	; 0x30
   2a1c8:	moveq	r8, #2
   2a1cc:	movne	r8, #1
   2a1d0:	orreq	r3, r3, #4096	; 0x1000
   2a1d4:	streq	r3, [r5, #48]	; 0x30
   2a1d8:	ldr	r3, [r4, #48]	; 0x30
   2a1dc:	cmp	r3, #0
   2a1e0:	bne	2a200 <__assert_fail@plt+0x17b14>
   2a1e4:	ldr	r3, [r4, #24]
   2a1e8:	ldrb	r3, [r3]
   2a1ec:	cmp	r3, #47	; 0x2f
   2a1f0:	beq	2a200 <__assert_fail@plt+0x17b14>
   2a1f4:	ldr	r0, [r5, #48]	; 0x30
   2a1f8:	ands	r4, r0, #4
   2a1fc:	beq	2a214 <__assert_fail@plt+0x17b28>
   2a200:	mov	r1, r8
   2a204:	mov	r0, r5
   2a208:	bl	28f38 <__assert_fail@plt+0x1684c>
   2a20c:	str	r0, [r5, #4]
   2a210:	pop	{r4, r5, r6, r7, r8, pc}
   2a214:	ldr	r1, [pc, #116]	; 2a290 <__assert_fail@plt+0x17ba4>
   2a218:	mov	r0, r5
   2a21c:	bl	288d8 <__assert_fail@plt+0x161ec>
   2a220:	subs	r7, r0, #0
   2a224:	strlt	r4, [r5, #4]
   2a228:	blt	2a178 <__assert_fail@plt+0x17a8c>
   2a22c:	mov	r1, r8
   2a230:	mov	r0, r5
   2a234:	bl	28f38 <__assert_fail@plt+0x1684c>
   2a238:	str	r0, [r5, #4]
   2a23c:	ldr	r0, [r5, #48]	; 0x30
   2a240:	ands	r4, r0, #512	; 0x200
   2a244:	beq	2a260 <__assert_fail@plt+0x17b74>
   2a248:	mov	r2, #1
   2a24c:	mov	r1, r7
   2a250:	mov	r0, r5
   2a254:	bl	28a74 <__assert_fail@plt+0x16388>
   2a258:	ldr	r0, [r5, #4]
   2a25c:	pop	{r4, r5, r6, r7, r8, pc}
   2a260:	mov	r0, r7
   2a264:	bl	125d8 <fchdir@plt>
   2a268:	cmp	r0, #0
   2a26c:	beq	2a284 <__assert_fail@plt+0x17b98>
   2a270:	ldr	r5, [r6]
   2a274:	mov	r0, r7
   2a278:	bl	126a4 <close@plt>
   2a27c:	str	r5, [r6]
   2a280:	b	2a178 <__assert_fail@plt+0x17a8c>
   2a284:	mov	r0, r7
   2a288:	bl	126a4 <close@plt>
   2a28c:	b	2a258 <__assert_fail@plt+0x17b6c>
   2a290:	ldrdeq	r8, [r3], -r9
   2a294:	push	{r4, r5, r6, r7, r8, lr}
   2a298:	subs	r4, r0, #0
   2a29c:	bne	2a2b8 <__assert_fail@plt+0x17bcc>
   2a2a0:	bl	12404 <__errno_location@plt>
   2a2a4:	mov	r3, #95	; 0x5f
   2a2a8:	mvn	r4, #0
   2a2ac:	str	r3, [r0]
   2a2b0:	mov	r0, r4
   2a2b4:	pop	{r4, r5, r6, r7, r8, pc}
   2a2b8:	cmp	r4, #10
   2a2bc:	bne	2a2b0 <__assert_fail@plt+0x17bc4>
   2a2c0:	mov	r5, r1
   2a2c4:	ldr	r1, [pc, #40]	; 2a2f4 <__assert_fail@plt+0x17c08>
   2a2c8:	ldr	r6, [r5]
   2a2cc:	mov	r0, r6
   2a2d0:	bl	11ffc <strcmp@plt>
   2a2d4:	subs	r7, r0, #0
   2a2d8:	bne	2a2b0 <__assert_fail@plt+0x17bc4>
   2a2dc:	mov	r0, r6
   2a2e0:	bl	125fc <freecon@plt>
   2a2e4:	str	r7, [r5]
   2a2e8:	bl	12404 <__errno_location@plt>
   2a2ec:	mov	r3, #61	; 0x3d
   2a2f0:	b	2a2a8 <__assert_fail@plt+0x17bbc>
   2a2f4:	muleq	r3, pc, lr	; <UNPREDICTABLE>
   2a2f8:	push	{r4, lr}
   2a2fc:	mov	r4, r1
   2a300:	bl	123a4 <getfilecon@plt>
   2a304:	mov	r1, r4
   2a308:	pop	{r4, lr}
   2a30c:	b	2a294 <__assert_fail@plt+0x17ba8>
   2a310:	push	{r4, lr}
   2a314:	mov	r4, r1
   2a318:	bl	12308 <lgetfilecon@plt>
   2a31c:	mov	r1, r4
   2a320:	pop	{r4, lr}
   2a324:	b	2a294 <__assert_fail@plt+0x17ba8>
   2a328:	push	{r4, lr}
   2a32c:	mov	r4, r1
   2a330:	bl	121b8 <fgetfilecon@plt>
   2a334:	mov	r1, r4
   2a338:	pop	{r4, lr}
   2a33c:	b	2a294 <__assert_fail@plt+0x17ba8>
   2a340:	cmp	r0, #0
   2a344:	beq	2a364 <__assert_fail@plt+0x17c78>
   2a348:	bge	2a368 <__assert_fail@plt+0x17c7c>
   2a34c:	push	{r4, lr}
   2a350:	bl	12404 <__errno_location@plt>
   2a354:	mov	r3, #12
   2a358:	str	r3, [r0]
   2a35c:	mov	r0, #0
   2a360:	pop	{r4, pc}
   2a364:	mov	r0, #1
   2a368:	b	12314 <malloc@plt>
   2a36c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a370:	subs	r5, r0, #0
   2a374:	mov	r7, r2
   2a378:	addeq	r5, sp, #4
   2a37c:	mov	r6, r1
   2a380:	mov	r0, r5
   2a384:	bl	122a8 <mbrtowc@plt>
   2a388:	cmp	r7, #0
   2a38c:	cmnne	r0, #3
   2a390:	mov	r4, r0
   2a394:	bls	2a3b0 <__assert_fail@plt+0x17cc4>
   2a398:	mov	r0, #0
   2a39c:	bl	36e3c <__assert_fail@plt+0x24750>
   2a3a0:	cmp	r0, #0
   2a3a4:	ldrbeq	r3, [r6]
   2a3a8:	moveq	r4, #1
   2a3ac:	streq	r3, [r5]
   2a3b0:	mov	r0, r4
   2a3b4:	add	sp, sp, #12
   2a3b8:	pop	{r4, r5, r6, r7, pc}
   2a3bc:	push	{r4, lr}
   2a3c0:	mov	r1, #32
   2a3c4:	bl	123c8 <strchr@plt>
   2a3c8:	cmp	r0, #0
   2a3cc:	movne	r3, #0
   2a3d0:	strbne	r3, [r0]
   2a3d4:	pop	{r4, pc}
   2a3d8:	push	{r4, r5, r6, lr}
   2a3dc:	mov	r4, r0
   2a3e0:	bl	123bc <strlen@plt>
   2a3e4:	add	r0, r0, #1
   2a3e8:	mov	ip, r4
   2a3ec:	mov	r2, #0
   2a3f0:	ldrb	r6, [r4, r2]
   2a3f4:	cmp	r6, #92	; 0x5c
   2a3f8:	bne	2a458 <__assert_fail@plt+0x17d6c>
   2a3fc:	add	r3, r2, #4
   2a400:	cmp	r3, r0
   2a404:	bcs	2a458 <__assert_fail@plt+0x17d6c>
   2a408:	add	r5, r4, r2
   2a40c:	ldrb	r1, [r5, #1]
   2a410:	sub	lr, r1, #48	; 0x30
   2a414:	uxtb	r3, lr
   2a418:	cmp	r3, #3
   2a41c:	bhi	2a458 <__assert_fail@plt+0x17d6c>
   2a420:	ldrb	r1, [r5, #2]
   2a424:	sub	r1, r1, #48	; 0x30
   2a428:	uxtb	r3, r1
   2a42c:	cmp	r3, #7
   2a430:	bhi	2a458 <__assert_fail@plt+0x17d6c>
   2a434:	add	r5, r2, #3
   2a438:	ldrb	r3, [r4, r5]
   2a43c:	sub	r3, r3, #48	; 0x30
   2a440:	uxtb	r3, r3
   2a444:	cmp	r3, #7
   2a448:	addls	r1, r1, lr, lsl #3
   2a44c:	addls	r3, r3, r1, lsl #3
   2a450:	strbls	r3, [ip]
   2a454:	bls	2a460 <__assert_fail@plt+0x17d74>
   2a458:	mov	r5, r2
   2a45c:	strb	r6, [ip]
   2a460:	add	r2, r5, #1
   2a464:	add	ip, ip, #1
   2a468:	cmp	r0, r2
   2a46c:	bhi	2a3f0 <__assert_fail@plt+0x17d04>
   2a470:	pop	{r4, r5, r6, pc}
   2a474:	push	{r4, lr}
   2a478:	mov	r4, r0
   2a47c:	ldr	r0, [r0]
   2a480:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2a484:	ldr	r0, [r4, #4]
   2a488:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2a48c:	ldr	r0, [r4, #8]
   2a490:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2a494:	ldrb	r3, [r4, #24]
   2a498:	tst	r3, #4
   2a49c:	beq	2a4a8 <__assert_fail@plt+0x17dbc>
   2a4a0:	ldr	r0, [r4, #12]
   2a4a4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2a4a8:	mov	r0, r4
   2a4ac:	pop	{r4, lr}
   2a4b0:	b	284c4 <__assert_fail@plt+0x15dd8>
   2a4b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a4b8:	sub	sp, sp, #36	; 0x24
   2a4bc:	ldr	r1, [pc, #1912]	; 2ac3c <__assert_fail@plt+0x18550>
   2a4c0:	ldr	r0, [pc, #1912]	; 2ac40 <__assert_fail@plt+0x18554>
   2a4c4:	bl	125e4 <fopen64@plt>
   2a4c8:	subs	r9, r0, #0
   2a4cc:	beq	2a908 <__assert_fail@plt+0x1821c>
   2a4d0:	ldr	fp, [pc, #1900]	; 2ac44 <__assert_fail@plt+0x18558>
   2a4d4:	mov	r3, #0
   2a4d8:	add	r5, sp, #8
   2a4dc:	str	r3, [sp, #12]
   2a4e0:	str	r3, [sp, #16]
   2a4e4:	mov	r2, r9
   2a4e8:	add	r1, sp, #16
   2a4ec:	add	r0, sp, #12
   2a4f0:	bl	12638 <getline@plt>
   2a4f4:	cmn	r0, #1
   2a4f8:	bne	2a554 <__assert_fail@plt+0x17e68>
   2a4fc:	ldr	r0, [sp, #12]
   2a500:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2a504:	mov	r0, r9
   2a508:	bl	1229c <ferror_unlocked@plt>
   2a50c:	cmp	r0, #0
   2a510:	beq	2a8e0 <__assert_fail@plt+0x181f4>
   2a514:	bl	12404 <__errno_location@plt>
   2a518:	mov	r4, r0
   2a51c:	mov	r0, r9
   2a520:	ldr	r6, [r4]
   2a524:	bl	124d0 <fclose@plt>
   2a528:	str	r6, [r4]
   2a52c:	bl	12404 <__errno_location@plt>
   2a530:	ldr	r6, [r0]
   2a534:	mov	r3, #0
   2a538:	mov	r4, r0
   2a53c:	str	r3, [r5]
   2a540:	ldr	r7, [sp, #8]
   2a544:	cmp	r7, #0
   2a548:	bne	2ac28 <__assert_fail@plt+0x1853c>
   2a54c:	str	r6, [r4]
   2a550:	b	2a8fc <__assert_fail@plt+0x18210>
   2a554:	add	r3, sp, #28
   2a558:	add	r2, sp, #20
   2a55c:	ldr	r1, [pc, #1764]	; 2ac48 <__assert_fail@plt+0x1855c>
   2a560:	str	r3, [sp]
   2a564:	add	r3, sp, #24
   2a568:	ldr	r0, [sp, #12]
   2a56c:	bl	12578 <sscanf@plt>
   2a570:	sub	r0, r0, #2
   2a574:	cmp	r0, #1
   2a578:	bhi	2a4e4 <__assert_fail@plt+0x17df8>
   2a57c:	ldr	r7, [sp, #12]
   2a580:	ldr	r3, [sp, #28]
   2a584:	add	r7, r7, r3
   2a588:	mov	r0, r7
   2a58c:	bl	2a3bc <__assert_fail@plt+0x17cd0>
   2a590:	cmp	r0, #0
   2a594:	beq	2a4e4 <__assert_fail@plt+0x17df8>
   2a598:	add	r8, r0, #1
   2a59c:	mov	r0, r8
   2a5a0:	bl	2a3bc <__assert_fail@plt+0x17cd0>
   2a5a4:	cmp	r0, #0
   2a5a8:	beq	2a4e4 <__assert_fail@plt+0x17df8>
   2a5ac:	ldr	r1, [pc, #1688]	; 2ac4c <__assert_fail@plt+0x18560>
   2a5b0:	add	r0, r0, #1
   2a5b4:	bl	35ef4 <__assert_fail@plt+0x23808>
   2a5b8:	cmp	r0, #0
   2a5bc:	beq	2a4e4 <__assert_fail@plt+0x17df8>
   2a5c0:	add	r6, r0, #3
   2a5c4:	mov	r0, r6
   2a5c8:	bl	2a3bc <__assert_fail@plt+0x17cd0>
   2a5cc:	cmp	r0, #0
   2a5d0:	beq	2a4e4 <__assert_fail@plt+0x17df8>
   2a5d4:	add	sl, r0, #1
   2a5d8:	mov	r0, sl
   2a5dc:	bl	2a3bc <__assert_fail@plt+0x17cd0>
   2a5e0:	cmp	r0, #0
   2a5e4:	beq	2a4e4 <__assert_fail@plt+0x17df8>
   2a5e8:	mov	r0, sl
   2a5ec:	bl	2a3d8 <__assert_fail@plt+0x17cec>
   2a5f0:	mov	r0, r8
   2a5f4:	bl	2a3d8 <__assert_fail@plt+0x17cec>
   2a5f8:	mov	r0, r7
   2a5fc:	bl	2a3d8 <__assert_fail@plt+0x17cec>
   2a600:	mov	r0, r6
   2a604:	bl	2a3d8 <__assert_fail@plt+0x17cec>
   2a608:	mov	r0, #32
   2a60c:	bl	273e0 <__assert_fail@plt+0x14cf4>
   2a610:	mov	r4, r0
   2a614:	mov	r0, sl
   2a618:	bl	2767c <__assert_fail@plt+0x14f90>
   2a61c:	str	r0, [r4]
   2a620:	mov	r0, r8
   2a624:	bl	2767c <__assert_fail@plt+0x14f90>
   2a628:	str	r0, [r4, #4]
   2a62c:	mov	r0, r7
   2a630:	bl	2767c <__assert_fail@plt+0x14f90>
   2a634:	str	r0, [r4, #8]
   2a638:	mov	r0, r6
   2a63c:	bl	2767c <__assert_fail@plt+0x14f90>
   2a640:	ldrb	r3, [r4, #24]
   2a644:	mov	r6, r0
   2a648:	ldrd	r0, [sp, #20]
   2a64c:	str	r6, [r4, #12]
   2a650:	orr	r3, r3, #4
   2a654:	strb	r3, [r4, #24]
   2a658:	bl	12020 <gnu_dev_makedev@plt>
   2a65c:	strd	r0, [r4, #16]
   2a660:	mov	r1, fp
   2a664:	mov	r0, r6
   2a668:	bl	11ffc <strcmp@plt>
   2a66c:	cmp	r0, #0
   2a670:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a674:	ldr	r1, [pc, #1492]	; 2ac50 <__assert_fail@plt+0x18564>
   2a678:	mov	r0, r6
   2a67c:	bl	11ffc <strcmp@plt>
   2a680:	cmp	r0, #0
   2a684:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a688:	ldr	r1, [pc, #1476]	; 2ac54 <__assert_fail@plt+0x18568>
   2a68c:	mov	r0, r6
   2a690:	bl	11ffc <strcmp@plt>
   2a694:	cmp	r0, #0
   2a698:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a69c:	ldr	r1, [pc, #1460]	; 2ac58 <__assert_fail@plt+0x1856c>
   2a6a0:	mov	r0, r6
   2a6a4:	bl	11ffc <strcmp@plt>
   2a6a8:	cmp	r0, #0
   2a6ac:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a6b0:	ldr	r1, [pc, #1444]	; 2ac5c <__assert_fail@plt+0x18570>
   2a6b4:	mov	r0, r6
   2a6b8:	bl	11ffc <strcmp@plt>
   2a6bc:	cmp	r0, #0
   2a6c0:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a6c4:	ldr	r1, [pc, #1428]	; 2ac60 <__assert_fail@plt+0x18574>
   2a6c8:	mov	r0, r6
   2a6cc:	bl	11ffc <strcmp@plt>
   2a6d0:	cmp	r0, #0
   2a6d4:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a6d8:	ldr	r1, [pc, #1412]	; 2ac64 <__assert_fail@plt+0x18578>
   2a6dc:	mov	r0, r6
   2a6e0:	bl	11ffc <strcmp@plt>
   2a6e4:	cmp	r0, #0
   2a6e8:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a6ec:	ldr	r1, [pc, #1396]	; 2ac68 <__assert_fail@plt+0x1857c>
   2a6f0:	mov	r0, r6
   2a6f4:	bl	11ffc <strcmp@plt>
   2a6f8:	cmp	r0, #0
   2a6fc:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a700:	ldr	r1, [pc, #1380]	; 2ac6c <__assert_fail@plt+0x18580>
   2a704:	mov	r0, r6
   2a708:	bl	11ffc <strcmp@plt>
   2a70c:	cmp	r0, #0
   2a710:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a714:	ldr	r1, [pc, #1364]	; 2ac70 <__assert_fail@plt+0x18584>
   2a718:	mov	r0, r6
   2a71c:	bl	11ffc <strcmp@plt>
   2a720:	cmp	r0, #0
   2a724:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a728:	ldr	r1, [pc, #1348]	; 2ac74 <__assert_fail@plt+0x18588>
   2a72c:	mov	r0, r6
   2a730:	bl	11ffc <strcmp@plt>
   2a734:	cmp	r0, #0
   2a738:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a73c:	ldr	r1, [pc, #1332]	; 2ac78 <__assert_fail@plt+0x1858c>
   2a740:	mov	r0, r6
   2a744:	bl	11ffc <strcmp@plt>
   2a748:	cmp	r0, #0
   2a74c:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a750:	ldr	r1, [pc, #1316]	; 2ac7c <__assert_fail@plt+0x18590>
   2a754:	mov	r0, r6
   2a758:	bl	11ffc <strcmp@plt>
   2a75c:	cmp	r0, #0
   2a760:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a764:	ldr	r1, [pc, #1300]	; 2ac80 <__assert_fail@plt+0x18594>
   2a768:	mov	r0, r6
   2a76c:	bl	11ffc <strcmp@plt>
   2a770:	clz	r0, r0
   2a774:	lsr	r0, r0, #5
   2a778:	ldrb	r3, [r4, #24]
   2a77c:	mov	r1, #58	; 0x3a
   2a780:	ldr	r7, [r4]
   2a784:	bfi	r3, r0, #0, #1
   2a788:	mov	r0, r7
   2a78c:	strb	r3, [r4, #24]
   2a790:	bl	123c8 <strchr@plt>
   2a794:	cmp	r0, #0
   2a798:	bne	2a8d8 <__assert_fail@plt+0x181ec>
   2a79c:	ldrb	r3, [r7]
   2a7a0:	cmp	r3, #47	; 0x2f
   2a7a4:	bne	2a7f0 <__assert_fail@plt+0x18104>
   2a7a8:	ldrb	r3, [r7, #1]
   2a7ac:	cmp	r3, #47	; 0x2f
   2a7b0:	bne	2a7f0 <__assert_fail@plt+0x18104>
   2a7b4:	ldr	r1, [pc, #1224]	; 2ac84 <__assert_fail@plt+0x18598>
   2a7b8:	mov	r0, r6
   2a7bc:	bl	11ffc <strcmp@plt>
   2a7c0:	cmp	r0, #0
   2a7c4:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a7c8:	ldr	r1, [pc, #1208]	; 2ac88 <__assert_fail@plt+0x1859c>
   2a7cc:	mov	r0, r6
   2a7d0:	bl	11ffc <strcmp@plt>
   2a7d4:	cmp	r0, #0
   2a7d8:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a7dc:	ldr	r1, [pc, #1192]	; 2ac8c <__assert_fail@plt+0x185a0>
   2a7e0:	mov	r0, r6
   2a7e4:	bl	11ffc <strcmp@plt>
   2a7e8:	cmp	r0, #0
   2a7ec:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a7f0:	ldr	r1, [pc, #1176]	; 2ac90 <__assert_fail@plt+0x185a4>
   2a7f4:	mov	r0, r6
   2a7f8:	bl	11ffc <strcmp@plt>
   2a7fc:	cmp	r0, #0
   2a800:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a804:	ldr	r1, [pc, #1160]	; 2ac94 <__assert_fail@plt+0x185a8>
   2a808:	mov	r0, r6
   2a80c:	bl	11ffc <strcmp@plt>
   2a810:	cmp	r0, #0
   2a814:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a818:	ldr	r1, [pc, #1144]	; 2ac98 <__assert_fail@plt+0x185ac>
   2a81c:	mov	r0, r6
   2a820:	bl	11ffc <strcmp@plt>
   2a824:	cmp	r0, #0
   2a828:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a82c:	ldr	r1, [pc, #1128]	; 2ac9c <__assert_fail@plt+0x185b0>
   2a830:	mov	r0, r6
   2a834:	bl	11ffc <strcmp@plt>
   2a838:	cmp	r0, #0
   2a83c:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a840:	ldr	r1, [pc, #1112]	; 2aca0 <__assert_fail@plt+0x185b4>
   2a844:	mov	r0, r6
   2a848:	bl	11ffc <strcmp@plt>
   2a84c:	cmp	r0, #0
   2a850:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a854:	ldr	r1, [pc, #1096]	; 2aca4 <__assert_fail@plt+0x185b8>
   2a858:	mov	r0, r6
   2a85c:	bl	11ffc <strcmp@plt>
   2a860:	cmp	r0, #0
   2a864:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a868:	ldr	r1, [pc, #1080]	; 2aca8 <__assert_fail@plt+0x185bc>
   2a86c:	mov	r0, r6
   2a870:	bl	11ffc <strcmp@plt>
   2a874:	cmp	r0, #0
   2a878:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a87c:	ldr	r1, [pc, #1064]	; 2acac <__assert_fail@plt+0x185c0>
   2a880:	mov	r0, r6
   2a884:	bl	11ffc <strcmp@plt>
   2a888:	cmp	r0, #0
   2a88c:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a890:	ldr	r1, [pc, #1048]	; 2acb0 <__assert_fail@plt+0x185c4>
   2a894:	mov	r0, r6
   2a898:	bl	11ffc <strcmp@plt>
   2a89c:	cmp	r0, #0
   2a8a0:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a8a4:	mov	r1, r7
   2a8a8:	ldr	r0, [pc, #1028]	; 2acb4 <__assert_fail@plt+0x185c8>
   2a8ac:	bl	11ffc <strcmp@plt>
   2a8b0:	clz	r0, r0
   2a8b4:	lsr	r0, r0, #5
   2a8b8:	ldrb	r3, [r4, #24]
   2a8bc:	bfi	r3, r0, #1, #1
   2a8c0:	strb	r3, [r4, #24]
   2a8c4:	str	r4, [r5]
   2a8c8:	add	r5, r4, #28
   2a8cc:	b	2a4e4 <__assert_fail@plt+0x17df8>
   2a8d0:	mov	r0, #1
   2a8d4:	b	2a778 <__assert_fail@plt+0x1808c>
   2a8d8:	mov	r0, #1
   2a8dc:	b	2a8b8 <__assert_fail@plt+0x181cc>
   2a8e0:	mov	r0, r9
   2a8e4:	bl	124d0 <fclose@plt>
   2a8e8:	cmn	r0, #1
   2a8ec:	movne	r3, #0
   2a8f0:	strne	r3, [r5]
   2a8f4:	ldrne	r7, [sp, #8]
   2a8f8:	beq	2a52c <__assert_fail@plt+0x17e40>
   2a8fc:	mov	r0, r7
   2a900:	add	sp, sp, #36	; 0x24
   2a904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a908:	ldr	r1, [pc, #936]	; 2acb8 <__assert_fail@plt+0x185cc>
   2a90c:	ldr	r0, [pc, #936]	; 2acbc <__assert_fail@plt+0x185d0>
   2a910:	bl	12614 <setmntent@plt>
   2a914:	subs	r7, r0, #0
   2a918:	beq	2a8fc <__assert_fail@plt+0x18210>
   2a91c:	ldr	r8, [pc, #924]	; 2acc0 <__assert_fail@plt+0x185d4>
   2a920:	add	r5, sp, #8
   2a924:	ldr	r9, [pc, #792]	; 2ac44 <__assert_fail@plt+0x18558>
   2a928:	ldr	sl, [pc, #800]	; 2ac50 <__assert_fail@plt+0x18564>
   2a92c:	mov	r0, r7
   2a930:	bl	122cc <getmntent@plt>
   2a934:	subs	r4, r0, #0
   2a938:	bne	2a94c <__assert_fail@plt+0x18260>
   2a93c:	mov	r0, r7
   2a940:	bl	124f4 <endmntent@plt>
   2a944:	cmp	r0, #0
   2a948:	b	2a8ec <__assert_fail@plt+0x18200>
   2a94c:	mov	r1, r8
   2a950:	bl	1226c <hasmntopt@plt>
   2a954:	mov	fp, r0
   2a958:	mov	r0, #32
   2a95c:	bl	273e0 <__assert_fail@plt+0x14cf4>
   2a960:	mov	r6, r0
   2a964:	ldr	r0, [r4]
   2a968:	bl	2767c <__assert_fail@plt+0x14f90>
   2a96c:	str	r0, [r6]
   2a970:	ldr	r0, [r4, #4]
   2a974:	bl	2767c <__assert_fail@plt+0x14f90>
   2a978:	mov	r3, #0
   2a97c:	stmib	r6, {r0, r3}
   2a980:	ldr	r0, [r4, #8]
   2a984:	bl	2767c <__assert_fail@plt+0x14f90>
   2a988:	ldrb	r3, [r6, #24]
   2a98c:	mov	r1, r9
   2a990:	mov	r4, r0
   2a994:	str	r0, [r6, #12]
   2a998:	orr	r3, r3, #4
   2a99c:	strb	r3, [r6, #24]
   2a9a0:	bl	11ffc <strcmp@plt>
   2a9a4:	cmp	r0, #0
   2a9a8:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2a9ac:	mov	r1, sl
   2a9b0:	mov	r0, r4
   2a9b4:	bl	11ffc <strcmp@plt>
   2a9b8:	cmp	r0, #0
   2a9bc:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2a9c0:	ldr	r1, [pc, #652]	; 2ac54 <__assert_fail@plt+0x18568>
   2a9c4:	mov	r0, r4
   2a9c8:	bl	11ffc <strcmp@plt>
   2a9cc:	cmp	r0, #0
   2a9d0:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2a9d4:	ldr	r1, [pc, #636]	; 2ac58 <__assert_fail@plt+0x1856c>
   2a9d8:	mov	r0, r4
   2a9dc:	bl	11ffc <strcmp@plt>
   2a9e0:	cmp	r0, #0
   2a9e4:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2a9e8:	ldr	r1, [pc, #620]	; 2ac5c <__assert_fail@plt+0x18570>
   2a9ec:	mov	r0, r4
   2a9f0:	bl	11ffc <strcmp@plt>
   2a9f4:	cmp	r0, #0
   2a9f8:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2a9fc:	ldr	r1, [pc, #604]	; 2ac60 <__assert_fail@plt+0x18574>
   2aa00:	mov	r0, r4
   2aa04:	bl	11ffc <strcmp@plt>
   2aa08:	cmp	r0, #0
   2aa0c:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa10:	ldr	r1, [pc, #588]	; 2ac64 <__assert_fail@plt+0x18578>
   2aa14:	mov	r0, r4
   2aa18:	bl	11ffc <strcmp@plt>
   2aa1c:	cmp	r0, #0
   2aa20:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa24:	ldr	r1, [pc, #572]	; 2ac68 <__assert_fail@plt+0x1857c>
   2aa28:	mov	r0, r4
   2aa2c:	bl	11ffc <strcmp@plt>
   2aa30:	cmp	r0, #0
   2aa34:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa38:	ldr	r1, [pc, #556]	; 2ac6c <__assert_fail@plt+0x18580>
   2aa3c:	mov	r0, r4
   2aa40:	bl	11ffc <strcmp@plt>
   2aa44:	cmp	r0, #0
   2aa48:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa4c:	ldr	r1, [pc, #540]	; 2ac70 <__assert_fail@plt+0x18584>
   2aa50:	mov	r0, r4
   2aa54:	bl	11ffc <strcmp@plt>
   2aa58:	cmp	r0, #0
   2aa5c:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa60:	ldr	r1, [pc, #524]	; 2ac74 <__assert_fail@plt+0x18588>
   2aa64:	mov	r0, r4
   2aa68:	bl	11ffc <strcmp@plt>
   2aa6c:	cmp	r0, #0
   2aa70:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa74:	ldr	r1, [pc, #508]	; 2ac78 <__assert_fail@plt+0x1858c>
   2aa78:	mov	r0, r4
   2aa7c:	bl	11ffc <strcmp@plt>
   2aa80:	cmp	r0, #0
   2aa84:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa88:	ldr	r1, [pc, #492]	; 2ac7c <__assert_fail@plt+0x18590>
   2aa8c:	mov	r0, r4
   2aa90:	bl	11ffc <strcmp@plt>
   2aa94:	cmp	r0, #0
   2aa98:	beq	2ac18 <__assert_fail@plt+0x1852c>
   2aa9c:	ldr	r1, [pc, #476]	; 2ac80 <__assert_fail@plt+0x18594>
   2aaa0:	mov	r0, r4
   2aaa4:	bl	11ffc <strcmp@plt>
   2aaa8:	orrs	r3, fp, r0
   2aaac:	moveq	r3, #1
   2aab0:	movne	r3, #0
   2aab4:	ldrb	r2, [r6, #24]
   2aab8:	mov	r1, #58	; 0x3a
   2aabc:	ldr	fp, [r6]
   2aac0:	bfi	r2, r3, #0, #1
   2aac4:	mov	r0, fp
   2aac8:	strb	r2, [r6, #24]
   2aacc:	bl	123c8 <strchr@plt>
   2aad0:	cmp	r0, #0
   2aad4:	bne	2ac20 <__assert_fail@plt+0x18534>
   2aad8:	ldrb	r3, [fp]
   2aadc:	cmp	r3, #47	; 0x2f
   2aae0:	bne	2ab2c <__assert_fail@plt+0x18440>
   2aae4:	ldrb	r3, [fp, #1]
   2aae8:	cmp	r3, #47	; 0x2f
   2aaec:	bne	2ab2c <__assert_fail@plt+0x18440>
   2aaf0:	ldr	r1, [pc, #396]	; 2ac84 <__assert_fail@plt+0x18598>
   2aaf4:	mov	r0, r4
   2aaf8:	bl	11ffc <strcmp@plt>
   2aafc:	cmp	r0, #0
   2ab00:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab04:	ldr	r1, [pc, #380]	; 2ac88 <__assert_fail@plt+0x1859c>
   2ab08:	mov	r0, r4
   2ab0c:	bl	11ffc <strcmp@plt>
   2ab10:	cmp	r0, #0
   2ab14:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab18:	ldr	r1, [pc, #364]	; 2ac8c <__assert_fail@plt+0x185a0>
   2ab1c:	mov	r0, r4
   2ab20:	bl	11ffc <strcmp@plt>
   2ab24:	cmp	r0, #0
   2ab28:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab2c:	ldr	r1, [pc, #348]	; 2ac90 <__assert_fail@plt+0x185a4>
   2ab30:	mov	r0, r4
   2ab34:	bl	11ffc <strcmp@plt>
   2ab38:	cmp	r0, #0
   2ab3c:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab40:	ldr	r1, [pc, #332]	; 2ac94 <__assert_fail@plt+0x185a8>
   2ab44:	mov	r0, r4
   2ab48:	bl	11ffc <strcmp@plt>
   2ab4c:	cmp	r0, #0
   2ab50:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab54:	ldr	r1, [pc, #316]	; 2ac98 <__assert_fail@plt+0x185ac>
   2ab58:	mov	r0, r4
   2ab5c:	bl	11ffc <strcmp@plt>
   2ab60:	cmp	r0, #0
   2ab64:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab68:	ldr	r1, [pc, #300]	; 2ac9c <__assert_fail@plt+0x185b0>
   2ab6c:	mov	r0, r4
   2ab70:	bl	11ffc <strcmp@plt>
   2ab74:	cmp	r0, #0
   2ab78:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab7c:	ldr	r1, [pc, #284]	; 2aca0 <__assert_fail@plt+0x185b4>
   2ab80:	mov	r0, r4
   2ab84:	bl	11ffc <strcmp@plt>
   2ab88:	cmp	r0, #0
   2ab8c:	beq	2ac20 <__assert_fail@plt+0x18534>
   2ab90:	ldr	r1, [pc, #268]	; 2aca4 <__assert_fail@plt+0x185b8>
   2ab94:	mov	r0, r4
   2ab98:	bl	11ffc <strcmp@plt>
   2ab9c:	cmp	r0, #0
   2aba0:	beq	2ac20 <__assert_fail@plt+0x18534>
   2aba4:	ldr	r1, [pc, #252]	; 2aca8 <__assert_fail@plt+0x185bc>
   2aba8:	mov	r0, r4
   2abac:	bl	11ffc <strcmp@plt>
   2abb0:	cmp	r0, #0
   2abb4:	beq	2ac20 <__assert_fail@plt+0x18534>
   2abb8:	ldr	r1, [pc, #236]	; 2acac <__assert_fail@plt+0x185c0>
   2abbc:	mov	r0, r4
   2abc0:	bl	11ffc <strcmp@plt>
   2abc4:	cmp	r0, #0
   2abc8:	beq	2ac20 <__assert_fail@plt+0x18534>
   2abcc:	ldr	r1, [pc, #220]	; 2acb0 <__assert_fail@plt+0x185c4>
   2abd0:	mov	r0, r4
   2abd4:	bl	11ffc <strcmp@plt>
   2abd8:	cmp	r0, #0
   2abdc:	beq	2ac20 <__assert_fail@plt+0x18534>
   2abe0:	mov	r1, fp
   2abe4:	ldr	r0, [pc, #200]	; 2acb4 <__assert_fail@plt+0x185c8>
   2abe8:	bl	11ffc <strcmp@plt>
   2abec:	clz	r0, r0
   2abf0:	lsr	r0, r0, #5
   2abf4:	ldrb	r3, [r6, #24]
   2abf8:	mvn	r2, #0
   2abfc:	bfi	r3, r0, #1, #1
   2ac00:	strb	r3, [r6, #24]
   2ac04:	mvn	r3, #0
   2ac08:	strd	r2, [r6, #16]
   2ac0c:	str	r6, [r5]
   2ac10:	add	r5, r6, #28
   2ac14:	b	2a92c <__assert_fail@plt+0x18240>
   2ac18:	mov	r3, #1
   2ac1c:	b	2aab4 <__assert_fail@plt+0x183c8>
   2ac20:	mov	r0, #1
   2ac24:	b	2abf4 <__assert_fail@plt+0x18508>
   2ac28:	ldr	r5, [r7, #28]
   2ac2c:	mov	r0, r7
   2ac30:	bl	2a474 <__assert_fail@plt+0x17d88>
   2ac34:	str	r5, [sp, #8]
   2ac38:	b	2a540 <__assert_fail@plt+0x17e54>
   2ac3c:	andeq	fp, r3, r6, lsr r5
   2ac40:	andeq	ip, r3, r9, lsr #29
   2ac44:	ldrdeq	ip, [r3], -r3
   2ac48:			; <UNDEFINED> instruction: 0x0003cebe
   2ac4c:	andeq	ip, r3, pc, asr #29
   2ac50:	ldrdeq	ip, [r3], -sl
   2ac54:	ldrdeq	ip, [r3], -pc	; <UNPREDICTABLE>
   2ac58:	andeq	ip, r3, r5, ror #29
   2ac5c:	andeq	ip, r3, sp, ror #29
   2ac60:	strdeq	ip, [r3], -r4
   2ac64:	strdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   2ac68:	andeq	ip, r3, r8, lsl #30
   2ac6c:	andeq	ip, r3, pc, lsl #30
   2ac70:	andeq	ip, r3, sl, lsl pc
   2ac74:	andeq	ip, r3, r0, lsr #30
   2ac78:	andeq	ip, r3, r6, lsr #30
   2ac7c:	ldrdeq	r9, [r3], -sl
   2ac80:	andeq	ip, r3, sp, lsr #30
   2ac84:	andeq	ip, r3, r2, lsr pc
   2ac88:	andeq	ip, r3, r8, lsr pc
   2ac8c:	andeq	ip, r3, sp, lsr pc
   2ac90:	andeq	ip, r3, r2, asr #30
   2ac94:	andeq	r9, r3, r1, ror #29
   2ac98:	andeq	ip, r3, r7, asr #30
   2ac9c:	andeq	ip, r3, ip, asr #30
   2aca0:	andeq	ip, r3, r7, asr pc
   2aca4:	andeq	ip, r3, sp, asr pc
   2aca8:	andeq	ip, r3, r2, ror #30
   2acac:	andeq	ip, r3, r8, ror #30
   2acb0:	andeq	ip, r3, lr, ror #30
   2acb4:	andeq	ip, r3, r3, ror pc
   2acb8:	andeq	fp, r3, r2, lsr #16
   2acbc:	andeq	ip, r3, sl, ror pc
   2acc0:	andeq	ip, r3, r4, lsl #31
   2acc4:	cmp	r0, #0
   2acc8:	bne	2acd4 <__assert_fail@plt+0x185e8>
   2accc:	mov	r0, r1
   2acd0:	b	2a340 <__assert_fail@plt+0x17c54>
   2acd4:	cmp	r1, #0
   2acd8:	push	{r4, lr}
   2acdc:	bne	2acec <__assert_fail@plt+0x18600>
   2ace0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2ace4:	mov	r0, #0
   2ace8:	pop	{r4, pc}
   2acec:	blt	2acf8 <__assert_fail@plt+0x1860c>
   2acf0:	pop	{r4, lr}
   2acf4:	b	121ac <realloc@plt>
   2acf8:	bl	12404 <__errno_location@plt>
   2acfc:	mov	r3, #12
   2ad00:	str	r3, [r0]
   2ad04:	b	2ace4 <__assert_fail@plt+0x185f8>
   2ad08:	umull	r2, r3, r1, r2
   2ad0c:	cmp	r3, #0
   2ad10:	bne	2ad1c <__assert_fail@plt+0x18630>
   2ad14:	mov	r1, r2
   2ad18:	b	2acc4 <__assert_fail@plt+0x185d8>
   2ad1c:	push	{r4, lr}
   2ad20:	bl	12404 <__errno_location@plt>
   2ad24:	mov	r3, #12
   2ad28:	str	r3, [r0]
   2ad2c:	mov	r0, #0
   2ad30:	pop	{r4, pc}
   2ad34:	cmp	r1, #0
   2ad38:	add	r3, r1, #31
   2ad3c:	movge	r3, r1
   2ad40:	rsbs	r2, r1, #0
   2ad44:	asr	r3, r3, #5
   2ad48:	and	r2, r2, #31
   2ad4c:	and	r1, r1, #31
   2ad50:	rsbpl	r1, r2, #0
   2ad54:	mov	ip, #1
   2ad58:	ldr	r2, [r0, r3, lsl #2]
   2ad5c:	orr	r1, r2, ip, lsl r1
   2ad60:	str	r1, [r0, r3, lsl #2]
   2ad64:	bx	lr
   2ad68:	asr	r3, r1, #5
   2ad6c:	and	r1, r1, #31
   2ad70:	ldr	r0, [r0, r3, lsl #2]
   2ad74:	lsr	r0, r0, r1
   2ad78:	and	r0, r0, #1
   2ad7c:	bx	lr
   2ad80:	sub	r3, r0, #4
   2ad84:	add	r0, r0, #28
   2ad88:	ldr	r2, [r3, #4]!
   2ad8c:	mvn	r2, r2
   2ad90:	cmp	r3, r0
   2ad94:	str	r2, [r3]
   2ad98:	bne	2ad88 <__assert_fail@plt+0x1869c>
   2ad9c:	bx	lr
   2ada0:	sub	r3, r0, #4
   2ada4:	sub	r1, r1, #4
   2ada8:	add	r0, r0, #28
   2adac:	ldr	r2, [r3, #4]!
   2adb0:	ldr	ip, [r1, #4]!
   2adb4:	cmp	r3, r0
   2adb8:	orr	r2, r2, ip
   2adbc:	str	r2, [r3]
   2adc0:	bne	2adac <__assert_fail@plt+0x186c0>
   2adc4:	bx	lr
   2adc8:	sub	r3, r0, #4
   2adcc:	sub	r1, r1, #4
   2add0:	add	r0, r0, #28
   2add4:	ldr	r2, [r3, #4]!
   2add8:	ldr	ip, [r1, #4]!
   2addc:	cmp	r3, r0
   2ade0:	and	r2, r2, ip
   2ade4:	str	r2, [r3]
   2ade8:	bne	2add4 <__assert_fail@plt+0x186e8>
   2adec:	bx	lr
   2adf0:	ldr	r3, [r0, #80]	; 0x50
   2adf4:	cmp	r3, #1
   2adf8:	ldreq	r3, [r0, #4]
   2adfc:	ldrne	r3, [r0, #8]
   2ae00:	ldrbeq	r0, [r3, r1]
   2ae04:	ldrne	r0, [r3, r1, lsl #2]
   2ae08:	bx	lr
   2ae0c:	ldr	r3, [r0, #36]	; 0x24
   2ae10:	ldr	r2, [r0, #48]	; 0x30
   2ae14:	cmp	r3, r2
   2ae18:	movlt	r2, r3
   2ae1c:	ldr	r3, [r0, #28]
   2ae20:	cmp	r3, r2
   2ae24:	blt	2ae34 <__assert_fail@plt+0x18748>
   2ae28:	str	r3, [r0, #28]
   2ae2c:	str	r3, [r0, #32]
   2ae30:	bx	lr
   2ae34:	ldr	r1, [r0]
   2ae38:	ldr	ip, [r0, #24]
   2ae3c:	add	r1, r1, r3
   2ae40:	ldrb	r1, [r1, ip]
   2ae44:	ldr	ip, [r0, #64]	; 0x40
   2ae48:	ldrb	ip, [ip, r1]
   2ae4c:	ldr	r1, [r0, #4]
   2ae50:	strb	ip, [r1, r3]
   2ae54:	add	r3, r3, #1
   2ae58:	b	2ae20 <__assert_fail@plt+0x18734>
   2ae5c:	mov	r2, r1
   2ae60:	clz	r1, r1
   2ae64:	lsr	r1, r1, #5
   2ae68:	cmp	r0, #0
   2ae6c:	moveq	r1, #1
   2ae70:	cmp	r1, #0
   2ae74:	bne	2ae98 <__assert_fail@plt+0x187ac>
   2ae78:	ldr	r3, [r0, #4]
   2ae7c:	ldr	ip, [r2, #4]
   2ae80:	cmp	r3, ip
   2ae84:	bne	2ae9c <__assert_fail@plt+0x187b0>
   2ae88:	subs	r3, r3, #1
   2ae8c:	bpl	2aea4 <__assert_fail@plt+0x187b8>
   2ae90:	mov	r1, #1
   2ae94:	b	2ae9c <__assert_fail@plt+0x187b0>
   2ae98:	mov	r1, #0
   2ae9c:	mov	r0, r1
   2aea0:	bx	lr
   2aea4:	push	{lr}		; (str lr, [sp, #-4]!)
   2aea8:	ldr	lr, [r0, #8]
   2aeac:	ldr	ip, [r2, #8]
   2aeb0:	ldr	lr, [lr, r3, lsl #2]
   2aeb4:	ldr	ip, [ip, r3, lsl #2]
   2aeb8:	cmp	lr, ip
   2aebc:	bne	2aecc <__assert_fail@plt+0x187e0>
   2aec0:	subs	r3, r3, #1
   2aec4:	bpl	2aea8 <__assert_fail@plt+0x187bc>
   2aec8:	mov	r1, #1
   2aecc:	mov	r0, r1
   2aed0:	pop	{pc}		; (ldr pc, [sp], #4)
   2aed4:	ldr	r3, [r0, #4]
   2aed8:	cmp	r3, #0
   2aedc:	ble	2af08 <__assert_fail@plt+0x1881c>
   2aee0:	sub	r3, r3, #1
   2aee4:	ldr	ip, [r0, #8]
   2aee8:	mov	r0, #0
   2aeec:	cmp	r0, r3
   2aef0:	bcc	2af10 <__assert_fail@plt+0x18824>
   2aef4:	ldr	r3, [ip, r0, lsl #2]
   2aef8:	cmp	r3, r1
   2aefc:	bne	2af08 <__assert_fail@plt+0x1881c>
   2af00:	add	r0, r0, #1
   2af04:	bx	lr
   2af08:	mov	r0, #0
   2af0c:	bx	lr
   2af10:	push	{lr}		; (str lr, [sp, #-4]!)
   2af14:	add	r2, r0, r3
   2af18:	lsr	r2, r2, #1
   2af1c:	ldr	lr, [ip, r2, lsl #2]
   2af20:	cmp	lr, r1
   2af24:	addlt	r0, r2, #1
   2af28:	movge	r3, r2
   2af2c:	cmp	r0, r3
   2af30:	bcc	2af14 <__assert_fail@plt+0x18828>
   2af34:	ldr	r3, [ip, r0, lsl #2]
   2af38:	cmp	r3, r1
   2af3c:	addeq	r0, r0, #1
   2af40:	movne	r0, #0
   2af44:	pop	{pc}		; (ldr pc, [sp], #4)
   2af48:	push	{r4, r5, r6, lr}
   2af4c:	mov	r4, r0
   2af50:	mov	r5, r1
   2af54:	mov	r6, r2
   2af58:	ldr	r3, [r4, #4]
   2af5c:	cmp	r3, #0
   2af60:	bne	2afb8 <__assert_fail@plt+0x188cc>
   2af64:	ldr	r3, [r4, #8]
   2af68:	cmp	r3, #0
   2af6c:	bne	2afb8 <__assert_fail@plt+0x188cc>
   2af70:	mov	r1, r4
   2af74:	mov	r0, r6
   2af78:	blx	r5
   2af7c:	cmp	r0, #0
   2af80:	popne	{r4, r5, r6, pc}
   2af84:	ldr	r1, [r4]
   2af88:	cmp	r1, #0
   2af8c:	popeq	{r4, r5, r6, pc}
   2af90:	ldr	r3, [r1, #8]
   2af94:	sub	r4, r3, r4
   2af98:	cmp	r3, #0
   2af9c:	clz	r4, r4
   2afa0:	moveq	r2, #1
   2afa4:	lsr	r4, r4, #5
   2afa8:	movne	r2, r4
   2afac:	mov	r4, r1
   2afb0:	cmp	r2, #0
   2afb4:	bne	2af70 <__assert_fail@plt+0x18884>
   2afb8:	mov	r4, r3
   2afbc:	b	2af58 <__assert_fail@plt+0x1886c>
   2afc0:	ldr	r3, [r1, #40]	; 0x28
   2afc4:	ldr	ip, [r1, #56]	; 0x38
   2afc8:	cmp	ip, r3
   2afcc:	bgt	2afe4 <__assert_fail@plt+0x188f8>
   2afd0:	mov	r3, #2
   2afd4:	strb	r3, [r0, #4]
   2afd8:	mov	r3, #0
   2afdc:	mov	r0, r3
   2afe0:	bx	lr
   2afe4:	push	{r4, lr}
   2afe8:	ldr	lr, [r1, #4]
   2afec:	ldr	r4, [r1, #80]	; 0x50
   2aff0:	ldrb	ip, [lr, r3]
   2aff4:	cmp	r4, #1
   2aff8:	strb	ip, [r0]
   2affc:	ble	2b028 <__assert_fail@plt+0x1893c>
   2b000:	ldr	r4, [r1, #28]
   2b004:	cmp	r3, r4
   2b008:	beq	2b028 <__assert_fail@plt+0x1893c>
   2b00c:	ldr	r4, [r1, #8]
   2b010:	ldr	r4, [r4, r3, lsl #2]
   2b014:	cmn	r4, #1
   2b018:	bne	2b028 <__assert_fail@plt+0x1893c>
   2b01c:	mov	r3, #1
   2b020:	strb	r3, [r0, #4]
   2b024:	b	2b0b4 <__assert_fail@plt+0x189c8>
   2b028:	cmp	ip, #92	; 0x5c
   2b02c:	bne	2b054 <__assert_fail@plt+0x18968>
   2b030:	tst	r2, #1
   2b034:	beq	2b01c <__assert_fail@plt+0x18930>
   2b038:	ldr	r2, [r1, #48]	; 0x30
   2b03c:	add	r3, r3, #1
   2b040:	cmp	r3, r2
   2b044:	strlt	r3, [r1, #40]	; 0x28
   2b048:	ldrblt	r3, [lr, r3]
   2b04c:	strblt	r3, [r0]
   2b050:	b	2b01c <__assert_fail@plt+0x18930>
   2b054:	cmp	ip, #91	; 0x5b
   2b058:	bne	2b0cc <__assert_fail@plt+0x189e0>
   2b05c:	ldr	r1, [r1, #48]	; 0x30
   2b060:	add	ip, r3, #1
   2b064:	cmp	ip, r1
   2b068:	bge	2b094 <__assert_fail@plt+0x189a8>
   2b06c:	add	r3, lr, r3
   2b070:	ldrb	r3, [r3, #1]
   2b074:	cmp	r3, #58	; 0x3a
   2b078:	strb	r3, [r0]
   2b07c:	beq	2b0bc <__assert_fail@plt+0x189d0>
   2b080:	cmp	r3, #61	; 0x3d
   2b084:	beq	2b0a8 <__assert_fail@plt+0x189bc>
   2b088:	cmp	r3, #46	; 0x2e
   2b08c:	moveq	r3, #26
   2b090:	beq	2b0ac <__assert_fail@plt+0x189c0>
   2b094:	mov	r3, #1
   2b098:	mov	r2, #91	; 0x5b
   2b09c:	strb	r2, [r0]
   2b0a0:	strb	r3, [r0, #4]
   2b0a4:	b	2b0b4 <__assert_fail@plt+0x189c8>
   2b0a8:	mov	r3, #28
   2b0ac:	strb	r3, [r0, #4]
   2b0b0:	mov	r3, #2
   2b0b4:	mov	r0, r3
   2b0b8:	pop	{r4, pc}
   2b0bc:	tst	r2, #4
   2b0c0:	beq	2b094 <__assert_fail@plt+0x189a8>
   2b0c4:	mov	r3, #30
   2b0c8:	b	2b0ac <__assert_fail@plt+0x189c0>
   2b0cc:	cmp	ip, #93	; 0x5d
   2b0d0:	beq	2b0f8 <__assert_fail@plt+0x18a0c>
   2b0d4:	cmp	ip, #94	; 0x5e
   2b0d8:	moveq	r3, #25
   2b0dc:	beq	2b0ec <__assert_fail@plt+0x18a00>
   2b0e0:	cmp	ip, #45	; 0x2d
   2b0e4:	moveq	r3, #22
   2b0e8:	bne	2b01c <__assert_fail@plt+0x18930>
   2b0ec:	strb	r3, [r0, #4]
   2b0f0:	mov	r3, #1
   2b0f4:	b	2b0b4 <__assert_fail@plt+0x189c8>
   2b0f8:	mov	r3, #21
   2b0fc:	b	2b0ec <__assert_fail@plt+0x18a00>
   2b100:	ldrb	r3, [r1, #24]
   2b104:	cmp	r3, #17
   2b108:	bne	2b120 <__assert_fail@plt+0x18a34>
   2b10c:	ldr	r3, [r1, #20]
   2b110:	cmp	r0, r3
   2b114:	ldrbeq	r3, [r1, #26]
   2b118:	orreq	r3, r3, #8
   2b11c:	strbeq	r3, [r1, #26]
   2b120:	mov	r0, #0
   2b124:	bx	lr
   2b128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b12c:	sub	sp, sp, #36	; 0x24
   2b130:	mov	r6, r2
   2b134:	mov	r9, #12
   2b138:	mov	fp, r0
   2b13c:	mov	r4, r1
   2b140:	mov	r8, #0
   2b144:	ldr	sl, [r0, #84]	; 0x54
   2b148:	str	r3, [sp, #12]
   2b14c:	ldr	r2, [sp, #12]
   2b150:	ldr	r3, [sl, #24]
   2b154:	mla	r9, r9, r2, r3
   2b158:	mov	r3, #1
   2b15c:	ldr	r2, [sp, #72]	; 0x48
   2b160:	lsl	r3, r3, r6
   2b164:	str	r3, [sp, #8]
   2b168:	mvn	r3, r3
   2b16c:	str	r3, [sp, #20]
   2b170:	mov	r3, #24
   2b174:	mla	r3, r2, r3, r3
   2b178:	str	r3, [sp, #28]
   2b17c:	ldr	r3, [r9, #4]
   2b180:	cmp	r3, r8
   2b184:	asrle	r0, r4, #1
   2b188:	ble	2b22c <__assert_fail@plt+0x18b40>
   2b18c:	ldr	r3, [r9, #8]
   2b190:	ldr	r7, [r3, r8, lsl #2]
   2b194:	ldr	r3, [sl]
   2b198:	add	r2, r3, r7, lsl #3
   2b19c:	ldrb	r2, [r2, #4]
   2b1a0:	cmp	r2, #8
   2b1a4:	beq	2b2a4 <__assert_fail@plt+0x18bb8>
   2b1a8:	cmp	r2, #9
   2b1ac:	beq	2b2bc <__assert_fail@plt+0x18bd0>
   2b1b0:	cmp	r2, #4
   2b1b4:	bne	2b29c <__assert_fail@plt+0x18bb0>
   2b1b8:	ldr	r3, [sp, #72]	; 0x48
   2b1bc:	cmn	r3, #1
   2b1c0:	beq	2b29c <__assert_fail@plt+0x18bb0>
   2b1c4:	mov	r3, #12
   2b1c8:	ldr	r5, [fp, #116]	; 0x74
   2b1cc:	mul	r3, r3, r7
   2b1d0:	str	r3, [sp, #16]
   2b1d4:	ldr	r3, [sp, #28]
   2b1d8:	add	r5, r5, r3
   2b1dc:	and	r3, r4, #2
   2b1e0:	str	r3, [sp, #24]
   2b1e4:	ldr	r3, [r5, #-24]	; 0xffffffe8
   2b1e8:	cmp	r3, r7
   2b1ec:	bne	2b28c <__assert_fail@plt+0x18ba0>
   2b1f0:	cmp	r6, #31
   2b1f4:	bgt	2b208 <__assert_fail@plt+0x18b1c>
   2b1f8:	ldr	r3, [r5, #-8]
   2b1fc:	ldr	r2, [sp, #8]
   2b200:	tst	r2, r3
   2b204:	beq	2b28c <__assert_fail@plt+0x18ba0>
   2b208:	ldr	r2, [sp, #16]
   2b20c:	ldr	r3, [sl, #20]
   2b210:	add	r3, r3, r2
   2b214:	ldr	r2, [sp, #12]
   2b218:	ldr	r3, [r3, #8]
   2b21c:	ldr	r3, [r3]
   2b220:	cmp	r2, r3
   2b224:	bne	2b234 <__assert_fail@plt+0x18b48>
   2b228:	sbfx	r0, r4, #0, #1
   2b22c:	add	sp, sp, #36	; 0x24
   2b230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b234:	ldr	r2, [sp, #72]	; 0x48
   2b238:	mov	r1, r4
   2b23c:	mov	r0, fp
   2b240:	str	r2, [sp]
   2b244:	mov	r2, r6
   2b248:	bl	2b128 <__assert_fail@plt+0x18a3c>
   2b24c:	cmn	r0, #1
   2b250:	bne	2b25c <__assert_fail@plt+0x18b70>
   2b254:	mvn	r0, #0
   2b258:	b	2b22c <__assert_fail@plt+0x18b40>
   2b25c:	cmp	r0, #0
   2b260:	bne	2b278 <__assert_fail@plt+0x18b8c>
   2b264:	ldr	r3, [sp, #24]
   2b268:	cmp	r3, #0
   2b26c:	beq	2b278 <__assert_fail@plt+0x18b8c>
   2b270:	mov	r0, #0
   2b274:	b	2b22c <__assert_fail@plt+0x18b40>
   2b278:	cmp	r6, #31
   2b27c:	ldrle	r3, [r5, #-8]
   2b280:	ldrle	r2, [sp, #20]
   2b284:	andle	r3, r3, r2
   2b288:	strle	r3, [r5, #-8]
   2b28c:	add	r5, r5, #24
   2b290:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   2b294:	cmp	r3, #0
   2b298:	bne	2b1e4 <__assert_fail@plt+0x18af8>
   2b29c:	add	r8, r8, #1
   2b2a0:	b	2b17c <__assert_fail@plt+0x18a90>
   2b2a4:	tst	r4, #1
   2b2a8:	beq	2b29c <__assert_fail@plt+0x18bb0>
   2b2ac:	ldr	r3, [r3, r7, lsl #3]
   2b2b0:	cmp	r3, r6
   2b2b4:	bne	2b29c <__assert_fail@plt+0x18bb0>
   2b2b8:	b	2b254 <__assert_fail@plt+0x18b68>
   2b2bc:	tst	r4, #2
   2b2c0:	beq	2b29c <__assert_fail@plt+0x18bb0>
   2b2c4:	ldr	r3, [r3, r7, lsl #3]
   2b2c8:	cmp	r3, r6
   2b2cc:	bne	2b29c <__assert_fail@plt+0x18bb0>
   2b2d0:	b	2b270 <__assert_fail@plt+0x18b84>
   2b2d4:	push	{r4, r5, lr}
   2b2d8:	mov	lr, #24
   2b2dc:	ldr	r5, [r0, #116]	; 0x74
   2b2e0:	ldr	ip, [sp, #12]
   2b2e4:	ldr	r4, [sp, #16]
   2b2e8:	mla	r1, lr, r1, r5
   2b2ec:	ldr	lr, [r1, #8]
   2b2f0:	cmp	lr, ip
   2b2f4:	bgt	2b32c <__assert_fail@plt+0x18c40>
   2b2f8:	ldr	r1, [r1, #12]
   2b2fc:	cmp	r1, ip
   2b300:	blt	2b338 <__assert_fail@plt+0x18c4c>
   2b304:	cmp	r1, ip
   2b308:	moveq	r1, #2
   2b30c:	movne	r1, #0
   2b310:	cmp	lr, ip
   2b314:	orreq	r1, r1, #1
   2b318:	cmp	r1, #0
   2b31c:	beq	2b330 <__assert_fail@plt+0x18c44>
   2b320:	str	r4, [sp, #12]
   2b324:	pop	{r4, r5, lr}
   2b328:	b	2b128 <__assert_fail@plt+0x18a3c>
   2b32c:	mvn	r1, #0
   2b330:	mov	r0, r1
   2b334:	pop	{r4, r5, pc}
   2b338:	mov	r1, #1
   2b33c:	b	2b330 <__assert_fail@plt+0x18c44>
   2b340:	push	{r4, r5, lr}
   2b344:	mov	r3, #0
   2b348:	mov	r5, #24
   2b34c:	ldr	r4, [r0, #108]	; 0x6c
   2b350:	mov	ip, r4
   2b354:	cmp	ip, r3
   2b358:	bgt	2b388 <__assert_fail@plt+0x18c9c>
   2b35c:	cmp	r4, r3
   2b360:	mvnle	r3, #0
   2b364:	ble	2b380 <__assert_fail@plt+0x18c94>
   2b368:	ldr	r0, [r0, #116]	; 0x74
   2b36c:	mov	r2, #24
   2b370:	mla	r2, r2, r3, r0
   2b374:	ldr	r2, [r2, #4]
   2b378:	cmp	r2, r1
   2b37c:	mvnne	r3, #0
   2b380:	mov	r0, r3
   2b384:	pop	{r4, r5, pc}
   2b388:	ldr	lr, [r0, #116]	; 0x74
   2b38c:	add	r2, ip, r3
   2b390:	asr	r2, r2, #1
   2b394:	mla	lr, r5, r2, lr
   2b398:	ldr	lr, [lr, #4]
   2b39c:	cmp	lr, r1
   2b3a0:	addlt	r3, r2, #1
   2b3a4:	movge	ip, r2
   2b3a8:	b	2b354 <__assert_fail@plt+0x18c68>
   2b3ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3b0:	mov	r6, r1
   2b3b4:	sub	sp, sp, #20
   2b3b8:	mov	r1, r3
   2b3bc:	mov	r5, r0
   2b3c0:	mov	sl, r2
   2b3c4:	mov	r7, r3
   2b3c8:	ldr	r9, [r0, #84]	; 0x54
   2b3cc:	mov	r4, #0
   2b3d0:	bl	2b340 <__assert_fail@plt+0x18c54>
   2b3d4:	str	r0, [sp, #8]
   2b3d8:	mov	r0, r5
   2b3dc:	ldr	r1, [sp, #60]	; 0x3c
   2b3e0:	bl	2b340 <__assert_fail@plt+0x18c54>
   2b3e4:	str	r0, [sp, #12]
   2b3e8:	ldr	r3, [r6, #4]
   2b3ec:	cmp	r3, r4
   2b3f0:	bgt	2b400 <__assert_fail@plt+0x18d14>
   2b3f4:	mov	r0, #0
   2b3f8:	add	sp, sp, #20
   2b3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b400:	ldr	r3, [r6, #8]
   2b404:	mov	r0, r5
   2b408:	ldr	r2, [r5, #116]	; 0x74
   2b40c:	ldr	r1, [r3, r4, lsl #2]
   2b410:	mov	r3, #24
   2b414:	mul	r3, r3, r1
   2b418:	ldr	r2, [r2, r3]
   2b41c:	ldr	r3, [r9]
   2b420:	ldr	r8, [r3, r2, lsl #3]
   2b424:	str	r7, [sp]
   2b428:	ldr	r3, [sp, #8]
   2b42c:	mov	r2, r8
   2b430:	str	r3, [sp, #4]
   2b434:	mov	r3, sl
   2b438:	bl	2b2d4 <__assert_fail@plt+0x18be8>
   2b43c:	ldr	r3, [sp, #12]
   2b440:	mov	fp, r0
   2b444:	mov	r2, r8
   2b448:	mov	r0, r5
   2b44c:	ldr	r1, [r6, #8]
   2b450:	str	r3, [sp, #4]
   2b454:	ldr	r3, [sp, #60]	; 0x3c
   2b458:	str	r3, [sp]
   2b45c:	ldr	r1, [r1, r4, lsl #2]
   2b460:	ldr	r3, [sp, #56]	; 0x38
   2b464:	bl	2b2d4 <__assert_fail@plt+0x18be8>
   2b468:	cmp	fp, r0
   2b46c:	addeq	r4, r4, #1
   2b470:	beq	2b3e8 <__assert_fail@plt+0x18cfc>
   2b474:	mov	r0, #1
   2b478:	b	2b3f8 <__assert_fail@plt+0x18d0c>
   2b47c:	ldr	r3, [r0, #80]	; 0x50
   2b480:	push	{r4, r5, r6, lr}
   2b484:	mov	r4, r0
   2b488:	mov	r5, r1
   2b48c:	cmp	r3, #1
   2b490:	ble	2b4e0 <__assert_fail@plt+0x18df4>
   2b494:	cmn	r1, #-1073741823	; 0xc0000001
   2b498:	bls	2b4a4 <__assert_fail@plt+0x18db8>
   2b49c:	mov	r0, #12
   2b4a0:	pop	{r4, r5, r6, pc}
   2b4a4:	lsl	r6, r1, #2
   2b4a8:	ldr	r0, [r0, #8]
   2b4ac:	mov	r1, r6
   2b4b0:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2b4b4:	cmp	r0, #0
   2b4b8:	beq	2b49c <__assert_fail@plt+0x18db0>
   2b4bc:	str	r0, [r4, #8]
   2b4c0:	ldr	r0, [r4, #12]
   2b4c4:	cmp	r0, #0
   2b4c8:	beq	2b4e0 <__assert_fail@plt+0x18df4>
   2b4cc:	mov	r1, r6
   2b4d0:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2b4d4:	cmp	r0, #0
   2b4d8:	beq	2b49c <__assert_fail@plt+0x18db0>
   2b4dc:	str	r0, [r4, #12]
   2b4e0:	ldrb	r3, [r4, #75]	; 0x4b
   2b4e4:	cmp	r3, #0
   2b4e8:	beq	2b504 <__assert_fail@plt+0x18e18>
   2b4ec:	mov	r1, r5
   2b4f0:	ldr	r0, [r4, #4]
   2b4f4:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2b4f8:	cmp	r0, #0
   2b4fc:	beq	2b49c <__assert_fail@plt+0x18db0>
   2b500:	str	r0, [r4, #4]
   2b504:	mov	r0, #0
   2b508:	str	r5, [r4, #36]	; 0x24
   2b50c:	pop	{r4, r5, r6, pc}
   2b510:	push	{r4, r5, r6, lr}
   2b514:	mov	r5, r1
   2b518:	mov	r4, r0
   2b51c:	ldm	r0, {r1, r3}
   2b520:	cmp	r1, r3
   2b524:	bne	2b54c <__assert_fail@plt+0x18e60>
   2b528:	add	r1, r1, #1
   2b52c:	ldr	r0, [r0, #8]
   2b530:	lsl	r3, r1, #1
   2b534:	lsl	r1, r1, #3
   2b538:	str	r3, [r4]
   2b53c:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2b540:	cmp	r0, #0
   2b544:	popeq	{r4, r5, r6, pc}
   2b548:	str	r0, [r4, #8]
   2b54c:	ldr	r3, [r4, #4]
   2b550:	mov	r0, #1
   2b554:	ldr	r2, [r4, #8]
   2b558:	add	r1, r3, #1
   2b55c:	str	r1, [r4, #4]
   2b560:	str	r5, [r2, r3, lsl #2]
   2b564:	pop	{r4, r5, r6, pc}
   2b568:	mov	r2, #32
   2b56c:	mov	r1, #0
   2b570:	b	12434 <memset@plt>
   2b574:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b578:	mov	r9, r3
   2b57c:	mov	r4, r0
   2b580:	mov	r7, r1
   2b584:	mov	r8, r2
   2b588:	ldr	r3, [r0, #64]	; 0x40
   2b58c:	cmp	r3, #31
   2b590:	bne	2b5b8 <__assert_fail@plt+0x18ecc>
   2b594:	mov	r0, #996	; 0x3e4
   2b598:	bl	2a340 <__assert_fail@plt+0x17c54>
   2b59c:	subs	r5, r0, #0
   2b5a0:	beq	2b620 <__assert_fail@plt+0x18f34>
   2b5a4:	ldr	r3, [r4, #56]	; 0x38
   2b5a8:	str	r0, [r4, #56]	; 0x38
   2b5ac:	str	r3, [r0]
   2b5b0:	mov	r3, #0
   2b5b4:	str	r3, [r4, #64]	; 0x40
   2b5b8:	ldr	r6, [r4, #56]	; 0x38
   2b5bc:	mov	r2, #0
   2b5c0:	cmp	r7, r2
   2b5c4:	ldr	ip, [r4, #64]	; 0x40
   2b5c8:	add	r3, ip, #1
   2b5cc:	lsl	ip, ip, #5
   2b5d0:	add	lr, r6, ip
   2b5d4:	str	r3, [r4, #64]	; 0x40
   2b5d8:	add	r5, ip, #4
   2b5dc:	add	r3, lr, #24
   2b5e0:	add	ip, ip, #16
   2b5e4:	stmib	lr, {r2, r7, r8}
   2b5e8:	add	ip, r6, ip
   2b5ec:	add	r5, r6, r5
   2b5f0:	ldm	r9, {r0, r1}
   2b5f4:	stm	r3, {r0, r1}
   2b5f8:	ldrb	r3, [ip, #14]
   2b5fc:	bic	r3, r3, #12
   2b600:	strb	r3, [ip, #14]
   2b604:	mvn	r3, #0
   2b608:	str	r2, [lr, #16]
   2b60c:	str	r2, [lr, #20]
   2b610:	str	r3, [lr, #32]
   2b614:	strne	r5, [r7]
   2b618:	cmp	r8, #0
   2b61c:	strne	r5, [r8]
   2b620:	mov	r0, r5
   2b624:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b628:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b62c:	mov	r5, r0
   2b630:	mov	r7, r1
   2b634:	add	r6, sp, #4
   2b638:	ldr	r4, [r0]
   2b63c:	mov	r2, #0
   2b640:	add	r3, r5, #20
   2b644:	mov	r1, r2
   2b648:	mov	r0, r7
   2b64c:	bl	2b574 <__assert_fail@plt+0x18e88>
   2b650:	cmp	r0, #0
   2b654:	str	r0, [r6]
   2b658:	beq	2b6b8 <__assert_fail@plt+0x18fcc>
   2b65c:	str	r4, [r0]
   2b660:	ldr	r4, [r6]
   2b664:	ldrb	r3, [r4, #26]
   2b668:	orr	r3, r3, #4
   2b66c:	strb	r3, [r4, #26]
   2b670:	ldr	r3, [r5, #4]
   2b674:	cmp	r3, #0
   2b678:	addne	r6, r4, #4
   2b67c:	bne	2b698 <__assert_fail@plt+0x18fac>
   2b680:	ldr	r2, [r5, #8]
   2b684:	cmp	r2, r3
   2b688:	cmpne	r2, #0
   2b68c:	beq	2b6a0 <__assert_fail@plt+0x18fb4>
   2b690:	add	r6, r4, #8
   2b694:	mov	r3, r2
   2b698:	mov	r5, r3
   2b69c:	b	2b63c <__assert_fail@plt+0x18f50>
   2b6a0:	ldr	r2, [r5]
   2b6a4:	mov	r3, r5
   2b6a8:	ldr	r4, [r4]
   2b6ac:	cmp	r2, #0
   2b6b0:	bne	2b6c0 <__assert_fail@plt+0x18fd4>
   2b6b4:	ldr	r0, [sp, #4]
   2b6b8:	add	sp, sp, #12
   2b6bc:	pop	{r4, r5, r6, r7, pc}
   2b6c0:	mov	r5, r2
   2b6c4:	b	2b680 <__assert_fail@plt+0x18f94>
   2b6c8:	push	{r0, r1, r2, r4, r5, lr}
   2b6cc:	mov	r4, #0
   2b6d0:	mov	r5, #0
   2b6d4:	strd	r4, [sp]
   2b6d8:	strb	r3, [sp, #4]
   2b6dc:	mov	r3, sp
   2b6e0:	bl	2b574 <__assert_fail@plt+0x18e88>
   2b6e4:	add	sp, sp, #12
   2b6e8:	pop	{r4, r5, pc}
   2b6ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b6f0:	ldr	r4, [r2, #4]
   2b6f4:	ldr	r9, [r1]
   2b6f8:	ldrb	r1, [r1, #28]
   2b6fc:	adds	r3, r4, #0
   2b700:	movne	r3, #1
   2b704:	ands	r3, r3, r1, lsr #4
   2b708:	beq	2b728 <__assert_fail@plt+0x1903c>
   2b70c:	ldr	r1, [r2, #20]
   2b710:	cmp	r1, #31
   2b714:	bgt	2b7c0 <__assert_fail@plt+0x190d4>
   2b718:	ldr	r3, [r9, #80]	; 0x50
   2b71c:	lsr	r3, r3, r1
   2b720:	tst	r3, #1
   2b724:	beq	2b7c0 <__assert_fail@plt+0x190d4>
   2b728:	mov	sl, r2
   2b72c:	mov	r2, #0
   2b730:	mov	r1, r2
   2b734:	mov	r3, #8
   2b738:	mov	r6, r0
   2b73c:	mov	r0, r9
   2b740:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   2b744:	mov	r2, #0
   2b748:	mov	r8, r0
   2b74c:	mov	r3, #9
   2b750:	mov	r1, r2
   2b754:	mov	r0, r9
   2b758:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   2b75c:	cmp	r4, #0
   2b760:	mov	r5, r0
   2b764:	moveq	r7, r0
   2b768:	beq	2b784 <__assert_fail@plt+0x19098>
   2b76c:	mov	r2, r0
   2b770:	mov	r3, #16
   2b774:	mov	r1, r4
   2b778:	mov	r0, r9
   2b77c:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   2b780:	mov	r7, r0
   2b784:	mov	r3, #16
   2b788:	mov	r2, r7
   2b78c:	mov	r1, r8
   2b790:	mov	r0, r9
   2b794:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   2b798:	cmp	r7, #0
   2b79c:	cmpne	r0, #0
   2b7a0:	mov	r4, r0
   2b7a4:	beq	2b7b4 <__assert_fail@plt+0x190c8>
   2b7a8:	cmp	r5, #0
   2b7ac:	cmpne	r8, #0
   2b7b0:	bne	2b7c8 <__assert_fail@plt+0x190dc>
   2b7b4:	mov	r3, #12
   2b7b8:	mov	r4, #0
   2b7bc:	str	r3, [r6]
   2b7c0:	mov	r0, r4
   2b7c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b7c8:	ldr	r3, [sl, #20]
   2b7cc:	str	r3, [r5, #20]
   2b7d0:	str	r3, [r8, #20]
   2b7d4:	ldrb	r3, [sl, #26]
   2b7d8:	ldrb	r2, [r5, #26]
   2b7dc:	ubfx	r3, r3, #3, #1
   2b7e0:	bfi	r2, r3, #3, #1
   2b7e4:	strb	r2, [r5, #26]
   2b7e8:	ldrb	r2, [r8, #26]
   2b7ec:	bfi	r2, r3, #3, #1
   2b7f0:	strb	r2, [r8, #26]
   2b7f4:	b	2b7c0 <__assert_fail@plt+0x190d4>
   2b7f8:	push	{r0, r1, r2, r4, r5, lr}
   2b7fc:	mov	r3, #0
   2b800:	mov	r5, r0
   2b804:	mov	r4, r1
   2b808:	ldr	r2, [r1, #4]
   2b80c:	str	r3, [sp, #4]
   2b810:	cmp	r2, r3
   2b814:	beq	2b83c <__assert_fail@plt+0x19150>
   2b818:	ldrb	r3, [r2, #24]
   2b81c:	cmp	r3, #17
   2b820:	bne	2b83c <__assert_fail@plt+0x19150>
   2b824:	mov	r1, r0
   2b828:	add	r0, sp, #4
   2b82c:	bl	2b6ec <__assert_fail@plt+0x19000>
   2b830:	cmp	r0, #0
   2b834:	str	r0, [r4, #4]
   2b838:	strne	r4, [r0]
   2b83c:	ldr	r2, [r4, #8]
   2b840:	cmp	r2, #0
   2b844:	beq	2b86c <__assert_fail@plt+0x19180>
   2b848:	ldrb	r3, [r2, #24]
   2b84c:	cmp	r3, #17
   2b850:	bne	2b86c <__assert_fail@plt+0x19180>
   2b854:	mov	r1, r5
   2b858:	add	r0, sp, #4
   2b85c:	bl	2b6ec <__assert_fail@plt+0x19000>
   2b860:	cmp	r0, #0
   2b864:	str	r0, [r4, #8]
   2b868:	strne	r4, [r0]
   2b86c:	ldr	r0, [sp, #4]
   2b870:	add	sp, sp, #12
   2b874:	pop	{r4, r5, pc}
   2b878:	mov	r3, #1
   2b87c:	push	{r4, r5, r6, lr}
   2b880:	mov	r4, r0
   2b884:	mov	r5, r1
   2b888:	str	r3, [r0]
   2b88c:	str	r3, [r0, #4]
   2b890:	mov	r0, #4
   2b894:	bl	2a340 <__assert_fail@plt+0x17c54>
   2b898:	cmp	r0, #0
   2b89c:	str	r0, [r4, #8]
   2b8a0:	streq	r0, [r4]
   2b8a4:	streq	r0, [r4, #4]
   2b8a8:	moveq	r0, #12
   2b8ac:	strne	r5, [r0]
   2b8b0:	movne	r0, #0
   2b8b4:	pop	{r4, r5, r6, pc}
   2b8b8:	push	{r4, lr}
   2b8bc:	mov	r3, #0
   2b8c0:	mov	r4, r0
   2b8c4:	lsl	r0, r1, #2
   2b8c8:	stm	r4, {r1, r3}
   2b8cc:	bl	2a340 <__assert_fail@plt+0x17c54>
   2b8d0:	cmp	r0, #0
   2b8d4:	str	r0, [r4, #8]
   2b8d8:	moveq	r0, #12
   2b8dc:	movne	r0, #0
   2b8e0:	pop	{r4, pc}
   2b8e4:	push	{r4, r5, r6, r7, r8, lr}
   2b8e8:	sub	sp, sp, #80	; 0x50
   2b8ec:	mov	r4, r0
   2b8f0:	add	r7, sp, #8
   2b8f4:	add	r6, r0, #16
   2b8f8:	ldr	r5, [r0, #28]
   2b8fc:	ldr	r8, [r0, #36]	; 0x24
   2b900:	ldr	r3, [r0, #48]	; 0x30
   2b904:	cmp	r8, r3
   2b908:	movge	r8, r3
   2b90c:	cmp	r5, r8
   2b910:	bge	2ba28 <__assert_fail@plt+0x1933c>
   2b914:	ldr	r3, [r4, #64]	; 0x40
   2b918:	sub	r2, r8, r5
   2b91c:	ldm	r6, {r0, r1}
   2b920:	cmp	r3, #0
   2b924:	stm	r7, {r0, r1}
   2b928:	beq	2ba0c <__assert_fail@plt+0x19320>
   2b92c:	mov	r3, #0
   2b930:	add	r1, sp, #16
   2b934:	b	2b968 <__assert_fail@plt+0x1927c>
   2b938:	ldr	r0, [r4]
   2b93c:	ldr	ip, [r4, #24]
   2b940:	add	r0, r0, r5
   2b944:	add	r0, r0, r3
   2b948:	ldrb	r0, [r0, ip]
   2b94c:	ldr	ip, [r4, #64]	; 0x40
   2b950:	ldrb	ip, [ip, r0]
   2b954:	ldr	r0, [r4, #4]
   2b958:	add	r0, r0, r3
   2b95c:	strb	ip, [r0, r5]
   2b960:	strb	ip, [r1, r3]
   2b964:	add	r3, r3, #1
   2b968:	ldr	r0, [r4, #80]	; 0x50
   2b96c:	cmp	r2, r0
   2b970:	movlt	r0, r2
   2b974:	cmp	r0, r3
   2b978:	bgt	2b938 <__assert_fail@plt+0x1924c>
   2b97c:	mov	r3, r6
   2b980:	add	r0, sp, #4
   2b984:	bl	2a36c <__assert_fail@plt+0x17c80>
   2b988:	sub	r3, r0, #1
   2b98c:	cmn	r3, #3
   2b990:	bhi	2b9ac <__assert_fail@plt+0x192c0>
   2b994:	cmn	r0, #2
   2b998:	bne	2b9dc <__assert_fail@plt+0x192f0>
   2b99c:	ldr	r2, [r4, #36]	; 0x24
   2b9a0:	ldr	r3, [r4, #48]	; 0x30
   2b9a4:	cmp	r2, r3
   2b9a8:	blt	2ba20 <__assert_fail@plt+0x19334>
   2b9ac:	ldr	r3, [r4]
   2b9b0:	ldr	r2, [r4, #24]
   2b9b4:	ldm	r7, {r0, r1}
   2b9b8:	add	r3, r3, r5
   2b9bc:	ldrb	r3, [r3, r2]
   2b9c0:	ldr	r2, [r4, #64]	; 0x40
   2b9c4:	str	r3, [sp, #4]
   2b9c8:	cmp	r2, #0
   2b9cc:	ldrbne	r3, [r2, r3]
   2b9d0:	stm	r6, {r0, r1}
   2b9d4:	mov	r0, #1
   2b9d8:	strne	r3, [sp, #4]
   2b9dc:	ldr	r3, [sp, #4]
   2b9e0:	add	r0, r5, r0
   2b9e4:	mvn	r1, #0
   2b9e8:	ldr	r2, [r4, #8]
   2b9ec:	str	r3, [r2, r5, lsl #2]
   2b9f0:	add	r3, r5, #1
   2b9f4:	cmp	r3, r0
   2b9f8:	mov	r5, r3
   2b9fc:	bge	2b90c <__assert_fail@plt+0x19220>
   2ba00:	str	r1, [r2, r3, lsl #2]
   2ba04:	add	r3, r3, #1
   2ba08:	b	2b9f4 <__assert_fail@plt+0x19308>
   2ba0c:	ldr	r1, [r4, #24]
   2ba10:	add	r3, r5, r1
   2ba14:	ldr	r1, [r4]
   2ba18:	add	r1, r1, r3
   2ba1c:	b	2b97c <__assert_fail@plt+0x19290>
   2ba20:	ldm	r7, {r0, r1}
   2ba24:	stm	r6, {r0, r1}
   2ba28:	str	r5, [r4, #28]
   2ba2c:	str	r5, [r4, #32]
   2ba30:	add	sp, sp, #80	; 0x50
   2ba34:	pop	{r4, r5, r6, r7, r8, pc}
   2ba38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba3c:	mov	r4, r0
   2ba40:	sub	sp, sp, #100	; 0x64
   2ba44:	ldr	r5, [r0, #28]
   2ba48:	ldr	r7, [r0, #36]	; 0x24
   2ba4c:	ldr	r3, [r0, #48]	; 0x30
   2ba50:	cmp	r7, r3
   2ba54:	movge	r7, r3
   2ba58:	ldrb	r3, [r0, #74]	; 0x4a
   2ba5c:	cmp	r3, #0
   2ba60:	bne	2ba84 <__assert_fail@plt+0x19398>
   2ba64:	ldr	r3, [r0, #64]	; 0x40
   2ba68:	cmp	r3, #0
   2ba6c:	bne	2ba84 <__assert_fail@plt+0x19398>
   2ba70:	ldrb	r3, [r0, #76]	; 0x4c
   2ba74:	cmp	r3, #0
   2ba78:	addeq	r6, r0, #16
   2ba7c:	addeq	r8, sp, #24
   2ba80:	beq	2bae8 <__assert_fail@plt+0x193fc>
   2ba84:	mov	r6, r5
   2ba88:	ldr	r5, [r4, #32]
   2ba8c:	cmp	r6, r7
   2ba90:	blt	2bb98 <__assert_fail@plt+0x194ac>
   2ba94:	b	2bc68 <__assert_fail@plt+0x1957c>
   2ba98:	ldr	fp, [r4]
   2ba9c:	str	r5, [sp, #4]
   2baa0:	ldr	sl, [r4, #24]
   2baa4:	add	r3, fp, sl
   2baa8:	ldrb	r9, [r3, r5]
   2baac:	tst	r9, #128	; 0x80
   2bab0:	bne	2baf4 <__assert_fail@plt+0x19408>
   2bab4:	mov	r0, r6
   2bab8:	bl	12134 <mbsinit@plt>
   2babc:	cmp	r0, #0
   2bac0:	beq	2baf4 <__assert_fail@plt+0x19408>
   2bac4:	mov	r0, r9
   2bac8:	bl	12674 <towupper@plt>
   2bacc:	bics	r3, r0, #127	; 0x7f
   2bad0:	bne	2baf4 <__assert_fail@plt+0x19408>
   2bad4:	ldr	r3, [r4, #4]
   2bad8:	strb	r0, [r3, r5]
   2badc:	ldr	r3, [r4, #8]
   2bae0:	str	r0, [r3, r5, lsl #2]
   2bae4:	add	r5, r5, #1
   2bae8:	cmp	r5, r7
   2baec:	blt	2ba98 <__assert_fail@plt+0x193ac>
   2baf0:	b	2bcd4 <__assert_fail@plt+0x195e8>
   2baf4:	ldm	r6, {r0, r1}
   2baf8:	mov	r3, r6
   2bafc:	sub	r2, r7, r5
   2bb00:	stm	r8, {r0, r1}
   2bb04:	add	r1, sl, r5
   2bb08:	add	r0, sp, #20
   2bb0c:	add	r1, fp, r1
   2bb10:	bl	2a36c <__assert_fail@plt+0x17c80>
   2bb14:	sub	r3, r0, #1
   2bb18:	mov	sl, r0
   2bb1c:	cmn	r3, #4
   2bb20:	bhi	2bc8c <__assert_fail@plt+0x195a0>
   2bb24:	ldr	fp, [sp, #20]
   2bb28:	mov	r0, fp
   2bb2c:	bl	12674 <towupper@plt>
   2bb30:	cmp	fp, r0
   2bb34:	mov	r9, r0
   2bb38:	beq	2bc70 <__assert_fail@plt+0x19584>
   2bb3c:	mov	r1, r0
   2bb40:	mov	r2, r8
   2bb44:	add	r0, sp, #32
   2bb48:	bl	11fc0 <wcrtomb@plt>
   2bb4c:	cmp	sl, r0
   2bb50:	bne	2bb94 <__assert_fail@plt+0x194a8>
   2bb54:	ldr	r0, [r4, #4]
   2bb58:	mov	r2, sl
   2bb5c:	add	r1, sp, #32
   2bb60:	add	r0, r0, r5
   2bb64:	add	sl, sl, r5
   2bb68:	bl	120f8 <memcpy@plt>
   2bb6c:	ldr	r2, [r4, #8]
   2bb70:	add	r3, r5, #1
   2bb74:	mvn	r1, #0
   2bb78:	str	r9, [r2, r5, lsl #2]
   2bb7c:	cmp	r3, sl
   2bb80:	mov	r5, r3
   2bb84:	bge	2bae8 <__assert_fail@plt+0x193fc>
   2bb88:	str	r1, [r2, r3, lsl #2]
   2bb8c:	add	r3, r3, #1
   2bb90:	b	2bb7c <__assert_fail@plt+0x19490>
   2bb94:	mov	r6, r5
   2bb98:	add	r3, r4, #16
   2bb9c:	ldr	ip, [r4, #64]	; 0x40
   2bba0:	add	sl, sp, #24
   2bba4:	sub	r2, r7, r6
   2bba8:	ldm	r3, {r0, r1}
   2bbac:	str	r3, [sp, #4]
   2bbb0:	cmp	ip, #0
   2bbb4:	stm	sl, {r0, r1}
   2bbb8:	beq	2bd0c <__assert_fail@plt+0x19620>
   2bbbc:	ldr	r0, [r4, #80]	; 0x50
   2bbc0:	mov	r3, #0
   2bbc4:	add	r9, sp, #32
   2bbc8:	cmp	r2, r0
   2bbcc:	movlt	r0, r2
   2bbd0:	cmp	r0, r3
   2bbd4:	bgt	2bce8 <__assert_fail@plt+0x195fc>
   2bbd8:	mov	r1, r9
   2bbdc:	add	r0, sp, #20
   2bbe0:	ldr	r3, [sp, #4]
   2bbe4:	bl	2a36c <__assert_fail@plt+0x17c80>
   2bbe8:	sub	r3, r0, #1
   2bbec:	mov	r8, r0
   2bbf0:	cmn	r3, #4
   2bbf4:	str	r3, [sp, #8]
   2bbf8:	bhi	2be90 <__assert_fail@plt+0x197a4>
   2bbfc:	ldr	r3, [sp, #20]
   2bc00:	mov	r0, r3
   2bc04:	str	r3, [sp, #12]
   2bc08:	bl	12674 <towupper@plt>
   2bc0c:	ldr	r3, [sp, #12]
   2bc10:	mov	fp, r0
   2bc14:	cmp	r3, r0
   2bc18:	beq	2be1c <__assert_fail@plt+0x19730>
   2bc1c:	mov	r1, r0
   2bc20:	mov	r2, sl
   2bc24:	add	r0, sp, #32
   2bc28:	bl	11fc0 <wcrtomb@plt>
   2bc2c:	cmp	r8, r0
   2bc30:	mov	r3, r0
   2bc34:	moveq	r2, r8
   2bc38:	addeq	r1, sp, #32
   2bc3c:	ldreq	r0, [r4, #4]
   2bc40:	beq	2be28 <__assert_fail@plt+0x1973c>
   2bc44:	cmn	r3, #1
   2bc48:	beq	2be1c <__assert_fail@plt+0x19730>
   2bc4c:	ldr	r0, [r4, #36]	; 0x24
   2bc50:	add	r9, r3, r6
   2bc54:	cmp	r9, r0
   2bc58:	bls	2bd20 <__assert_fail@plt+0x19634>
   2bc5c:	ldm	sl, {r0, r1}
   2bc60:	ldr	r3, [sp, #4]
   2bc64:	stm	r3, {r0, r1}
   2bc68:	str	r6, [r4, #28]
   2bc6c:	b	2bcd8 <__assert_fail@plt+0x195ec>
   2bc70:	ldr	r1, [r4]
   2bc74:	mov	r2, sl
   2bc78:	ldr	r3, [r4, #24]
   2bc7c:	ldr	r0, [r4, #4]
   2bc80:	add	r3, r5, r3
   2bc84:	add	r1, r1, r3
   2bc88:	b	2bb60 <__assert_fail@plt+0x19474>
   2bc8c:	cmn	r3, #3
   2bc90:	bne	2bca4 <__assert_fail@plt+0x195b8>
   2bc94:	ldr	r2, [r4, #36]	; 0x24
   2bc98:	ldr	r3, [r4, #48]	; 0x30
   2bc9c:	cmp	r2, r3
   2bca0:	blt	2bccc <__assert_fail@plt+0x195e0>
   2bca4:	ldr	r3, [r4, #4]
   2bca8:	cmn	sl, #1
   2bcac:	ldr	r2, [sp, #4]
   2bcb0:	strb	r9, [r3, r5]
   2bcb4:	add	r5, r5, #1
   2bcb8:	ldr	r3, [r4, #8]
   2bcbc:	str	r9, [r3, r2, lsl #2]
   2bcc0:	ldmeq	r8, {r0, r1}
   2bcc4:	stmeq	r6, {r0, r1}
   2bcc8:	b	2bae8 <__assert_fail@plt+0x193fc>
   2bccc:	ldm	r8, {r0, r1}
   2bcd0:	stm	r6, {r0, r1}
   2bcd4:	str	r5, [r4, #28]
   2bcd8:	mov	r0, #0
   2bcdc:	str	r5, [r4, #32]
   2bce0:	add	sp, sp, #100	; 0x64
   2bce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bce8:	ldr	r1, [r4]
   2bcec:	ldr	lr, [r4, #24]
   2bcf0:	add	r1, r1, r5
   2bcf4:	add	r1, r1, r3
   2bcf8:	ldrb	r1, [r1, lr]
   2bcfc:	ldrb	r1, [ip, r1]
   2bd00:	strb	r1, [r9, r3]
   2bd04:	add	r3, r3, #1
   2bd08:	b	2bbd0 <__assert_fail@plt+0x194e4>
   2bd0c:	ldr	r9, [r4, #24]
   2bd10:	add	r3, r5, r9
   2bd14:	ldr	r9, [r4]
   2bd18:	add	r9, r9, r3
   2bd1c:	b	2bbd8 <__assert_fail@plt+0x194ec>
   2bd20:	ldr	r2, [r4, #12]
   2bd24:	cmp	r2, #0
   2bd28:	bne	2bd4c <__assert_fail@plt+0x19660>
   2bd2c:	lsl	r0, r0, #2
   2bd30:	str	r3, [sp, #4]
   2bd34:	bl	2a340 <__assert_fail@plt+0x17c54>
   2bd38:	cmp	r0, #0
   2bd3c:	str	r0, [r4, #12]
   2bd40:	moveq	r0, #12
   2bd44:	ldr	r3, [sp, #4]
   2bd48:	beq	2bce0 <__assert_fail@plt+0x195f4>
   2bd4c:	ldrb	r2, [r4, #76]	; 0x4c
   2bd50:	cmp	r2, #0
   2bd54:	beq	2bde8 <__assert_fail@plt+0x196fc>
   2bd58:	ldr	r0, [r4, #4]
   2bd5c:	mov	r2, r3
   2bd60:	add	r1, sp, #32
   2bd64:	str	r3, [sp, #4]
   2bd68:	add	r0, r0, r6
   2bd6c:	bl	120f8 <memcpy@plt>
   2bd70:	ldr	r1, [r4, #8]
   2bd74:	lsl	r2, r6, #2
   2bd78:	mvn	lr, #0
   2bd7c:	ldr	r0, [r4, #12]
   2bd80:	ldr	r3, [sp, #4]
   2bd84:	str	fp, [r1, r6, lsl #2]
   2bd88:	add	r1, r1, r2
   2bd8c:	str	r5, [r0, r6, lsl #2]
   2bd90:	add	r0, r0, r2
   2bd94:	mov	r2, #1
   2bd98:	cmp	r2, r3
   2bd9c:	bcc	2bdfc <__assert_fail@plt+0x19710>
   2bda0:	ldr	r7, [r4, #48]	; 0x30
   2bda4:	sub	r3, r3, r8
   2bda8:	mov	r6, r9
   2bdac:	ldr	r2, [r4, #52]	; 0x34
   2bdb0:	add	r7, r3, r7
   2bdb4:	cmp	r2, r5
   2bdb8:	add	r5, r5, r8
   2bdbc:	str	r7, [r4, #48]	; 0x30
   2bdc0:	ldrgt	r2, [r4, #56]	; 0x38
   2bdc4:	addgt	r3, r2, r3
   2bdc8:	strgt	r3, [r4, #56]	; 0x38
   2bdcc:	ldr	r3, [r4, #36]	; 0x24
   2bdd0:	cmp	r7, r3
   2bdd4:	movge	r7, r3
   2bdd8:	b	2ba8c <__assert_fail@plt+0x193a0>
   2bddc:	ldr	r1, [r4, #12]
   2bde0:	str	r2, [r1, r2, lsl #2]
   2bde4:	add	r2, r2, #1
   2bde8:	cmp	r2, r6
   2bdec:	bne	2bddc <__assert_fail@plt+0x196f0>
   2bdf0:	mov	r2, #1
   2bdf4:	strb	r2, [r4, #76]	; 0x4c
   2bdf8:	b	2bd58 <__assert_fail@plt+0x1966c>
   2bdfc:	ldr	ip, [sp, #8]
   2be00:	cmp	r2, r8
   2be04:	movcc	ip, r2
   2be08:	add	r2, r2, #1
   2be0c:	add	ip, r5, ip
   2be10:	str	ip, [r0, #4]!
   2be14:	str	lr, [r1, #4]!
   2be18:	b	2bd98 <__assert_fail@plt+0x196ac>
   2be1c:	ldr	r0, [r4, #4]
   2be20:	mov	r2, r8
   2be24:	mov	r1, r9
   2be28:	add	r0, r0, r6
   2be2c:	bl	120f8 <memcpy@plt>
   2be30:	ldrb	r3, [r4, #76]	; 0x4c
   2be34:	cmp	r3, #0
   2be38:	bne	2be6c <__assert_fail@plt+0x19780>
   2be3c:	ldr	r2, [r4, #8]
   2be40:	add	r5, r5, r8
   2be44:	add	r3, r6, #1
   2be48:	add	r8, r8, r6
   2be4c:	mvn	r1, #0
   2be50:	str	fp, [r2, r6, lsl #2]
   2be54:	cmp	r3, r8
   2be58:	mov	r6, r3
   2be5c:	bge	2ba8c <__assert_fail@plt+0x193a0>
   2be60:	str	r1, [r2, r3, lsl #2]
   2be64:	add	r3, r3, #1
   2be68:	b	2be54 <__assert_fail@plt+0x19768>
   2be6c:	ldr	r2, [r4, #12]
   2be70:	mov	r3, #0
   2be74:	add	r2, r2, r6, lsl #2
   2be78:	add	r1, r5, r3
   2be7c:	add	r3, r3, #1
   2be80:	cmp	r8, r3
   2be84:	str	r1, [r2], #4
   2be88:	bne	2be78 <__assert_fail@plt+0x1978c>
   2be8c:	b	2be3c <__assert_fail@plt+0x19750>
   2be90:	sub	r3, r0, #1
   2be94:	cmn	r3, #3
   2be98:	bne	2beac <__assert_fail@plt+0x197c0>
   2be9c:	ldr	r2, [r4, #36]	; 0x24
   2bea0:	ldr	r3, [r4, #48]	; 0x30
   2bea4:	cmp	r2, r3
   2bea8:	blt	2bc5c <__assert_fail@plt+0x19570>
   2beac:	ldr	r3, [r4]
   2beb0:	ldr	r2, [r4, #24]
   2beb4:	add	r3, r3, r5
   2beb8:	ldrb	r3, [r3, r2]
   2bebc:	ldr	r2, [r4, #64]	; 0x40
   2bec0:	cmp	r2, #0
   2bec4:	ldrbne	r3, [r2, r3]
   2bec8:	ldr	r2, [r4, #4]
   2becc:	strb	r3, [r2, r6]
   2bed0:	lsl	r2, r6, #2
   2bed4:	ldrb	r1, [r4, #76]	; 0x4c
   2bed8:	cmp	r1, #0
   2bedc:	ldrne	r1, [r4, #12]
   2bee0:	strne	r5, [r1, r6, lsl #2]
   2bee4:	cmn	r8, #1
   2bee8:	add	r5, r5, #1
   2beec:	ldr	r1, [r4, #8]
   2bef0:	add	r6, r6, #1
   2bef4:	str	r3, [r1, r2]
   2bef8:	ldreq	r3, [sp, #4]
   2befc:	ldmeq	sl, {r0, r1}
   2bf00:	stmeq	r3, {r0, r1}
   2bf04:	b	2ba8c <__assert_fail@plt+0x193a0>
   2bf08:	push	{r4, r5, r6, lr}
   2bf0c:	mov	r4, r0
   2bf10:	ldr	r5, [r0, #28]
   2bf14:	ldr	r3, [r0, #36]	; 0x24
   2bf18:	ldr	r6, [r0, #48]	; 0x30
   2bf1c:	cmp	r3, r6
   2bf20:	movlt	r6, r3
   2bf24:	cmp	r5, r6
   2bf28:	blt	2bf38 <__assert_fail@plt+0x1984c>
   2bf2c:	str	r5, [r4, #28]
   2bf30:	str	r5, [r4, #32]
   2bf34:	pop	{r4, r5, r6, pc}
   2bf38:	ldr	r3, [r4]
   2bf3c:	ldr	r2, [r4, #24]
   2bf40:	add	r3, r3, r5
   2bf44:	ldrb	r0, [r3, r2]
   2bf48:	ldr	r3, [r4, #64]	; 0x40
   2bf4c:	cmp	r3, #0
   2bf50:	ldrbne	r0, [r3, r0]
   2bf54:	bl	1253c <toupper@plt>
   2bf58:	ldr	r3, [r4, #4]
   2bf5c:	strb	r0, [r3, r5]
   2bf60:	add	r5, r5, #1
   2bf64:	b	2bf24 <__assert_fail@plt+0x19838>
   2bf68:	ldr	r3, [r0, #36]	; 0x24
   2bf6c:	push	{r4, r5, r6, lr}
   2bf70:	cmn	r3, #-536870910	; 0xe0000002
   2bf74:	bls	2bf84 <__assert_fail@plt+0x19898>
   2bf78:	mov	r5, #12
   2bf7c:	mov	r0, r5
   2bf80:	pop	{r4, r5, r6, pc}
   2bf84:	ldr	r2, [r0, #48]	; 0x30
   2bf88:	lsl	r3, r3, #1
   2bf8c:	mov	r4, r0
   2bf90:	cmp	r3, r2
   2bf94:	movge	r3, r2
   2bf98:	cmp	r3, r1
   2bf9c:	movge	r1, r3
   2bfa0:	bl	2b47c <__assert_fail@plt+0x18d90>
   2bfa4:	subs	r5, r0, #0
   2bfa8:	bne	2bf7c <__assert_fail@plt+0x19890>
   2bfac:	ldr	r0, [r4, #100]	; 0x64
   2bfb0:	cmp	r0, #0
   2bfb4:	beq	2bfd4 <__assert_fail@plt+0x198e8>
   2bfb8:	ldr	r1, [r4, #36]	; 0x24
   2bfbc:	add	r1, r1, #1
   2bfc0:	lsl	r1, r1, #2
   2bfc4:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2bfc8:	cmp	r0, #0
   2bfcc:	beq	2bf78 <__assert_fail@plt+0x1988c>
   2bfd0:	str	r0, [r4, #100]	; 0x64
   2bfd4:	ldrb	r2, [r4, #72]	; 0x48
   2bfd8:	ldr	r3, [r4, #80]	; 0x50
   2bfdc:	cmp	r2, #0
   2bfe0:	beq	2c000 <__assert_fail@plt+0x19914>
   2bfe4:	cmp	r3, #1
   2bfe8:	mov	r0, r4
   2bfec:	ble	2bff8 <__assert_fail@plt+0x1990c>
   2bff0:	pop	{r4, r5, r6, lr}
   2bff4:	b	2ba38 <__assert_fail@plt+0x1934c>
   2bff8:	bl	2bf08 <__assert_fail@plt+0x1981c>
   2bffc:	b	2bf7c <__assert_fail@plt+0x19890>
   2c000:	cmp	r3, #1
   2c004:	ble	2c014 <__assert_fail@plt+0x19928>
   2c008:	mov	r0, r4
   2c00c:	bl	2b8e4 <__assert_fail@plt+0x191f8>
   2c010:	b	2bf7c <__assert_fail@plt+0x19890>
   2c014:	ldr	r3, [r4, #64]	; 0x40
   2c018:	cmp	r3, #0
   2c01c:	beq	2bf7c <__assert_fail@plt+0x19890>
   2c020:	mov	r0, r4
   2c024:	bl	2ae0c <__assert_fail@plt+0x18720>
   2c028:	b	2bf7c <__assert_fail@plt+0x19890>
   2c02c:	push	{r4, lr}
   2c030:	mov	r4, r0
   2c034:	ldr	r0, [r0]
   2c038:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c03c:	ldr	r0, [r4, #4]
   2c040:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c044:	ldr	r0, [r4, #8]
   2c048:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c04c:	ldr	r0, [r4, #12]
   2c050:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c054:	mov	r0, r4
   2c058:	pop	{r4, lr}
   2c05c:	b	284c4 <__assert_fail@plt+0x15dd8>
   2c060:	ldr	r3, [pc, #36]	; 2c08c <__assert_fail@plt+0x199a0>
   2c064:	ldr	r2, [r0, #4]
   2c068:	and	r3, r3, r2
   2c06c:	cmp	r3, #6
   2c070:	bne	2c07c <__assert_fail@plt+0x19990>
   2c074:	ldr	r0, [r0]
   2c078:	b	2c02c <__assert_fail@plt+0x19940>
   2c07c:	cmp	r3, #3
   2c080:	bxne	lr
   2c084:	ldr	r0, [r0]
   2c088:	b	284c4 <__assert_fail@plt+0x15dd8>
   2c08c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   2c090:	add	r0, r1, #20
   2c094:	push	{r4, lr}
   2c098:	bl	2c060 <__assert_fail@plt+0x19974>
   2c09c:	mov	r0, #0
   2c0a0:	pop	{r4, pc}
   2c0a4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c0a8:	mov	r7, sp
   2c0ac:	mov	r4, r0
   2c0b0:	ldr	r6, [r0, #4]
   2c0b4:	stm	r7, {r1, r2}
   2c0b8:	ldr	r3, [r0, #8]
   2c0bc:	ldrb	r5, [sp, #4]
   2c0c0:	cmp	r3, r6
   2c0c4:	bcc	2c198 <__assert_fail@plt+0x19aac>
   2c0c8:	ldr	r3, [pc, #372]	; 2c244 <__assert_fail@plt+0x19b58>
   2c0cc:	lsl	r8, r6, #1
   2c0d0:	cmp	r8, r3
   2c0d4:	bls	2c0e4 <__assert_fail@plt+0x199f8>
   2c0d8:	mvn	r0, #0
   2c0dc:	add	sp, sp, #12
   2c0e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c0e4:	lsl	r1, r6, #4
   2c0e8:	ldr	r0, [r0]
   2c0ec:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2c0f0:	cmp	r0, #0
   2c0f4:	beq	2c0d8 <__assert_fail@plt+0x199ec>
   2c0f8:	lsl	r9, r6, #3
   2c0fc:	str	r0, [r4]
   2c100:	ldr	r0, [r4, #12]
   2c104:	mov	r1, r9
   2c108:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2c10c:	mov	sl, r0
   2c110:	mov	r1, r9
   2c114:	ldr	r0, [r4, #16]
   2c118:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2c11c:	mov	r3, #24
   2c120:	mov	r9, r0
   2c124:	ldr	r0, [r4, #20]
   2c128:	mul	r6, r3, r6
   2c12c:	mov	r1, r6
   2c130:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2c134:	mov	fp, r0
   2c138:	mov	r1, r6
   2c13c:	ldr	r0, [r4, #24]
   2c140:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2c144:	cmp	r9, #0
   2c148:	cmpne	sl, #0
   2c14c:	mov	r6, r0
   2c150:	beq	2c160 <__assert_fail@plt+0x19a74>
   2c154:	cmp	r0, #0
   2c158:	cmpne	fp, #0
   2c15c:	bne	2c184 <__assert_fail@plt+0x19a98>
   2c160:	mov	r0, sl
   2c164:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c168:	mov	r0, r9
   2c16c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c170:	mov	r0, fp
   2c174:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c178:	mov	r0, r6
   2c17c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c180:	b	2c0d8 <__assert_fail@plt+0x199ec>
   2c184:	str	r8, [r4, #4]
   2c188:	str	sl, [r4, #12]
   2c18c:	str	r9, [r4, #16]
   2c190:	str	fp, [r4, #20]
   2c194:	str	r0, [r4, #24]
   2c198:	ldr	r3, [r4]
   2c19c:	cmp	r5, #5
   2c1a0:	ldr	r2, [r4, #8]
   2c1a4:	ldm	r7, {r0, r1}
   2c1a8:	add	r3, r3, r2, lsl #3
   2c1ac:	stm	r3, {r0, r1}
   2c1b0:	bfc	r1, #8, #10
   2c1b4:	str	r1, [r3, #4]
   2c1b8:	bne	2c234 <__assert_fail@plt+0x19b48>
   2c1bc:	ldr	r5, [r4, #92]	; 0x5c
   2c1c0:	cmp	r5, #1
   2c1c4:	movle	r5, #0
   2c1c8:	movgt	r5, #1
   2c1cc:	ldrb	r1, [r3, #6]
   2c1d0:	bfi	r1, r5, #4, #1
   2c1d4:	strb	r1, [r3, #6]
   2c1d8:	mvn	r1, #0
   2c1dc:	ldr	r3, [r4, #12]
   2c1e0:	ldr	ip, [r4, #20]
   2c1e4:	str	r1, [r3, r2, lsl #2]
   2c1e8:	mov	r2, #12
   2c1ec:	mov	r3, #0
   2c1f0:	ldr	r1, [r4, #8]
   2c1f4:	mul	r1, r2, r1
   2c1f8:	add	r0, ip, r1
   2c1fc:	str	r3, [ip, r1]
   2c200:	str	r3, [r0, #4]
   2c204:	str	r3, [r0, #8]
   2c208:	ldr	r1, [r4, #8]
   2c20c:	ldr	r0, [r4, #24]
   2c210:	mul	r2, r2, r1
   2c214:	add	r1, r0, r2
   2c218:	str	r3, [r0, r2]
   2c21c:	str	r3, [r1, #4]
   2c220:	str	r3, [r1, #8]
   2c224:	ldr	r0, [r4, #8]
   2c228:	add	r3, r0, #1
   2c22c:	str	r3, [r4, #8]
   2c230:	b	2c0dc <__assert_fail@plt+0x199f0>
   2c234:	sub	r5, r5, #6
   2c238:	clz	r5, r5
   2c23c:	lsr	r5, r5, #5
   2c240:	b	2c1cc <__assert_fail@plt+0x19ae0>
   2c244:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   2c248:	ldr	r3, [r0]
   2c24c:	push	{r4, r5, r6, r7, r8, lr}
   2c250:	lsl	r7, r1, #3
   2c254:	mov	r6, r1
   2c258:	mov	r4, r2
   2c25c:	mov	r5, r0
   2c260:	add	r3, r3, r7
   2c264:	ldm	r3, {r1, r2}
   2c268:	bl	2c0a4 <__assert_fail@plt+0x199b8>
   2c26c:	cmn	r0, #1
   2c270:	popeq	{r4, r5, r6, r7, r8, pc}
   2c274:	ubfx	r2, r4, #0, #10
   2c278:	ldr	ip, [r5]
   2c27c:	add	r1, ip, r0, lsl #3
   2c280:	add	ip, ip, r7
   2c284:	ldr	r3, [r1, #4]
   2c288:	bfi	r3, r2, #8, #10
   2c28c:	str	r3, [r1, #4]
   2c290:	ldr	ip, [ip, #4]
   2c294:	ubfx	ip, ip, #8, #10
   2c298:	orr	r2, r2, ip
   2c29c:	bfi	r3, r2, #8, #10
   2c2a0:	str	r3, [r1, #4]
   2c2a4:	ubfx	r3, r3, #16, #8
   2c2a8:	orr	r3, r3, #4
   2c2ac:	strb	r3, [r1, #6]
   2c2b0:	ldr	r3, [r5, #16]
   2c2b4:	str	r6, [r3, r0, lsl #2]
   2c2b8:	pop	{r4, r5, r6, r7, r8, pc}
   2c2bc:	push	{r4, lr}
   2c2c0:	mov	r4, r0
   2c2c4:	ldr	r0, [r0, #24]
   2c2c8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c2cc:	ldr	r0, [r4, #36]	; 0x24
   2c2d0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c2d4:	ldr	r3, [r4, #40]	; 0x28
   2c2d8:	add	r2, r4, #4
   2c2dc:	cmp	r3, r2
   2c2e0:	beq	2c2f4 <__assert_fail@plt+0x19c08>
   2c2e4:	ldr	r0, [r3, #8]
   2c2e8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c2ec:	ldr	r0, [r4, #40]	; 0x28
   2c2f0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c2f4:	ldr	r0, [r4, #12]
   2c2f8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c2fc:	ldr	r0, [r4, #48]	; 0x30
   2c300:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c304:	ldr	r0, [r4, #44]	; 0x2c
   2c308:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c30c:	mov	r0, r4
   2c310:	pop	{r4, lr}
   2c314:	b	284c4 <__assert_fail@plt+0x15dd8>
   2c318:	push	{r4, lr}
   2c31c:	mov	r4, r0
   2c320:	ldr	r0, [r0, #8]
   2c324:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c328:	ldr	r0, [r4, #12]
   2c32c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c330:	ldrb	r3, [r4, #75]	; 0x4b
   2c334:	cmp	r3, #0
   2c338:	popeq	{r4, pc}
   2c33c:	ldr	r0, [r4, #4]
   2c340:	pop	{r4, lr}
   2c344:	b	284c4 <__assert_fail@plt+0x15dd8>
   2c348:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c34c:	mov	r4, #0
   2c350:	mov	r6, r0
   2c354:	mov	r8, r4
   2c358:	ldr	r3, [r6, #124]	; 0x7c
   2c35c:	cmp	r3, r4
   2c360:	bgt	2c370 <__assert_fail@plt+0x19c84>
   2c364:	str	r8, [r6, #108]	; 0x6c
   2c368:	str	r8, [r6, #124]	; 0x7c
   2c36c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c370:	ldr	r3, [r6, #132]	; 0x84
   2c374:	mov	r7, #0
   2c378:	ldr	r5, [r3, r4, lsl #2]
   2c37c:	ldr	r3, [r5, #16]
   2c380:	ldr	r0, [r5, #20]
   2c384:	cmp	r3, r7
   2c388:	bgt	2c3bc <__assert_fail@plt+0x19cd0>
   2c38c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c390:	ldr	r3, [r5, #8]
   2c394:	cmp	r3, #0
   2c398:	beq	2c3ac <__assert_fail@plt+0x19cc0>
   2c39c:	ldr	r0, [r3, #8]
   2c3a0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c3a4:	ldr	r0, [r5, #8]
   2c3a8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c3ac:	mov	r0, r5
   2c3b0:	add	r4, r4, #1
   2c3b4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c3b8:	b	2c358 <__assert_fail@plt+0x19c6c>
   2c3bc:	ldr	r9, [r0, r7, lsl #2]
   2c3c0:	add	r7, r7, #1
   2c3c4:	ldr	r0, [r9, #16]
   2c3c8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c3cc:	mov	r0, r9
   2c3d0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c3d4:	b	2c37c <__assert_fail@plt+0x19c90>
   2c3d8:	mov	r3, r1
   2c3dc:	ldr	r2, [r1, #28]
   2c3e0:	ldrb	r1, [r1, #24]
   2c3e4:	sub	r1, r1, #2
   2c3e8:	cmp	r1, #14
   2c3ec:	ldrls	pc, [pc, r1, lsl #2]
   2c3f0:	b	2c504 <__assert_fail@plt+0x19e18>
   2c3f4:	andeq	ip, r2, r4, lsl r5
   2c3f8:	andeq	ip, r2, r4, lsl #10
   2c3fc:	andeq	ip, r2, r0, ror #9
   2c400:	andeq	ip, r2, r4, lsl #10
   2c404:	andeq	ip, r2, r4, lsl #10
   2c408:	andeq	ip, r2, r4, lsl #10
   2c40c:	andeq	ip, r2, r8, asr #9
   2c410:	andeq	ip, r2, r8, asr #9
   2c414:	andeq	ip, r2, r0, lsr r4
   2c418:	andeq	ip, r2, r0, lsr r4
   2c41c:	andeq	ip, r2, r8, asr #9
   2c420:	andeq	ip, r2, r4, lsl #10
   2c424:	andeq	ip, r2, r4, lsl #10
   2c428:	andeq	ip, r2, r4, lsl #10
   2c42c:	andeq	ip, r2, r4, lsl r5
   2c430:	ldrb	r1, [r0, #88]	; 0x58
   2c434:	push	{r4, r5, r6, r7, r8, lr}
   2c438:	mov	r4, #12
   2c43c:	mov	r8, #2
   2c440:	mul	r2, r4, r2
   2c444:	orr	r1, r1, #1
   2c448:	strb	r1, [r0, #88]	; 0x58
   2c44c:	ldr	r1, [r3, #4]
   2c450:	cmp	r1, #0
   2c454:	ldreq	r1, [r3, #16]
   2c458:	ldrne	r1, [r1, #12]
   2c45c:	ldr	r5, [r1, #28]
   2c460:	ldr	r1, [r3, #8]
   2c464:	cmp	r1, #0
   2c468:	ldrne	r3, [r1, #12]
   2c46c:	ldreq	r3, [r3, #16]
   2c470:	ldr	r6, [r3, #28]
   2c474:	ldr	r3, [r0, #20]
   2c478:	mov	r0, #8
   2c47c:	str	r8, [r3, r2]
   2c480:	add	r7, r3, r2
   2c484:	bl	2a340 <__assert_fail@plt+0x17c54>
   2c488:	cmp	r0, #0
   2c48c:	str	r0, [r7, #8]
   2c490:	bne	2c49c <__assert_fail@plt+0x19db0>
   2c494:	mov	r0, r4
   2c498:	pop	{r4, r5, r6, r7, r8, pc}
   2c49c:	cmp	r5, r6
   2c4a0:	moveq	r3, #1
   2c4a4:	streq	r3, [r7, #4]
   2c4a8:	streq	r5, [r0]
   2c4ac:	beq	2c4c0 <__assert_fail@plt+0x19dd4>
   2c4b0:	str	r8, [r7, #4]
   2c4b4:	stmlt	r0, {r5, r6}
   2c4b8:	strge	r6, [r0]
   2c4bc:	strge	r5, [r0, #4]
   2c4c0:	mov	r0, #0
   2c4c4:	pop	{r4, r5, r6, r7, r8, pc}
   2c4c8:	ldr	r1, [r3, #16]
   2c4cc:	ldr	r3, [r0, #20]
   2c4d0:	ldr	r1, [r1, #28]
   2c4d4:	mov	r0, #12
   2c4d8:	mla	r0, r0, r2, r3
   2c4dc:	b	2b878 <__assert_fail@plt+0x1918c>
   2c4e0:	ldr	r1, [r3, #16]
   2c4e4:	ldr	ip, [r0, #12]
   2c4e8:	ldr	r1, [r1, #28]
   2c4ec:	str	r1, [ip, r2, lsl #2]
   2c4f0:	ldrb	r3, [r3, #24]
   2c4f4:	cmp	r3, #4
   2c4f8:	bne	2c514 <__assert_fail@plt+0x19e28>
   2c4fc:	ldr	r3, [r0, #20]
   2c500:	b	2c4d4 <__assert_fail@plt+0x19de8>
   2c504:	ldr	r3, [r3, #16]
   2c508:	ldr	r1, [r3, #28]
   2c50c:	ldr	r3, [r0, #12]
   2c510:	str	r1, [r3, r2, lsl #2]
   2c514:	mov	r0, #0
   2c518:	bx	lr
   2c51c:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c520:	mov	r4, r0
   2c524:	mov	r8, r1
   2c528:	mov	r7, r2
   2c52c:	mov	r5, #0
   2c530:	ldr	r9, [r0, #84]	; 0x54
   2c534:	ldr	r3, [r8, #4]
   2c538:	cmp	r3, r5
   2c53c:	movle	r0, #0
   2c540:	ble	2c5a8 <__assert_fail@plt+0x19ebc>
   2c544:	ldr	r3, [r8, #8]
   2c548:	ldr	r6, [r3, r5, lsl #2]
   2c54c:	ldr	r3, [r9]
   2c550:	add	r2, r3, r6, lsl #3
   2c554:	ldrb	r2, [r2, #4]
   2c558:	cmp	r2, #8
   2c55c:	bne	2c5f4 <__assert_fail@plt+0x19f08>
   2c560:	ldr	r2, [r3, r6, lsl #3]
   2c564:	cmp	r2, #31
   2c568:	bgt	2c5f4 <__assert_fail@plt+0x19f08>
   2c56c:	ldr	r3, [r9, #80]	; 0x50
   2c570:	lsr	r3, r3, r2
   2c574:	tst	r3, #1
   2c578:	beq	2c5f4 <__assert_fail@plt+0x19f08>
   2c57c:	ldr	r3, [r4, #124]	; 0x7c
   2c580:	ldr	r1, [r4, #128]	; 0x80
   2c584:	ldr	r0, [r4, #132]	; 0x84
   2c588:	cmp	r1, r3
   2c58c:	bne	2c5b8 <__assert_fail@plt+0x19ecc>
   2c590:	lsl	sl, r1, #1
   2c594:	lsl	r1, r1, #3
   2c598:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2c59c:	cmp	r0, #0
   2c5a0:	bne	2c5b0 <__assert_fail@plt+0x19ec4>
   2c5a4:	mov	r0, #12
   2c5a8:	add	sp, sp, #4
   2c5ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5b0:	str	sl, [r4, #128]	; 0x80
   2c5b4:	str	r0, [r4, #132]	; 0x84
   2c5b8:	mov	r1, #24
   2c5bc:	mov	r0, #1
   2c5c0:	ldr	fp, [r4, #124]	; 0x7c
   2c5c4:	ldr	sl, [r4, #132]	; 0x84
   2c5c8:	bl	27fbc <__assert_fail@plt+0x158d0>
   2c5cc:	ldr	r3, [r4, #124]	; 0x7c
   2c5d0:	ldr	r2, [r4, #132]	; 0x84
   2c5d4:	str	r0, [sl, fp, lsl #2]
   2c5d8:	ldr	r2, [r2, r3, lsl #2]
   2c5dc:	cmp	r2, #0
   2c5e0:	beq	2c5a4 <__assert_fail@plt+0x19eb8>
   2c5e4:	add	r3, r3, #1
   2c5e8:	str	r6, [r2, #4]
   2c5ec:	str	r3, [r4, #124]	; 0x7c
   2c5f0:	str	r7, [r2]
   2c5f4:	add	r5, r5, #1
   2c5f8:	b	2c534 <__assert_fail@plt+0x19e48>
   2c5fc:	ldr	r3, [r0, #36]	; 0x24
   2c600:	push	{r4, r5, r6, lr}
   2c604:	mov	r4, r0
   2c608:	mov	r5, r1
   2c60c:	ldr	r6, [r0, #104]	; 0x68
   2c610:	cmp	r3, r1
   2c614:	bgt	2c624 <__assert_fail@plt+0x19f38>
   2c618:	ldr	r2, [r0, #48]	; 0x30
   2c61c:	cmp	r3, r2
   2c620:	blt	2c64c <__assert_fail@plt+0x19f60>
   2c624:	ldr	r3, [r4, #28]
   2c628:	cmp	r3, r5
   2c62c:	ble	2c640 <__assert_fail@plt+0x19f54>
   2c630:	cmp	r6, r5
   2c634:	blt	2c664 <__assert_fail@plt+0x19f78>
   2c638:	mov	r0, #0
   2c63c:	pop	{r4, r5, r6, pc}
   2c640:	ldr	r2, [r4, #48]	; 0x30
   2c644:	cmp	r3, r2
   2c648:	bge	2c630 <__assert_fail@plt+0x19f44>
   2c64c:	add	r1, r5, #1
   2c650:	mov	r0, r4
   2c654:	bl	2bf68 <__assert_fail@plt+0x1987c>
   2c658:	cmp	r0, #0
   2c65c:	beq	2c630 <__assert_fail@plt+0x19f44>
   2c660:	pop	{r4, r5, r6, pc}
   2c664:	ldr	r0, [r4, #100]	; 0x64
   2c668:	sub	r2, r5, r6
   2c66c:	add	r6, r6, #1
   2c670:	lsl	r2, r2, #2
   2c674:	mov	r1, #0
   2c678:	add	r0, r0, r6, lsl #2
   2c67c:	bl	12434 <memset@plt>
   2c680:	str	r5, [r4, #104]	; 0x68
   2c684:	b	2c638 <__assert_fail@plt+0x19f4c>
   2c688:	push	{r4, r5, r6, r7, r8, lr}
   2c68c:	subs	r4, r0, #0
   2c690:	ldr	r7, [sp, #28]
   2c694:	beq	2c728 <__assert_fail@plt+0x1a03c>
   2c698:	ldr	r5, [r4]
   2c69c:	cmp	r5, #0
   2c6a0:	beq	2c728 <__assert_fail@plt+0x1a03c>
   2c6a4:	mov	r0, r3
   2c6a8:	sub	r5, r5, #1
   2c6ac:	lsl	r6, r2, #3
   2c6b0:	mov	r3, #24
   2c6b4:	str	r5, [r4]
   2c6b8:	mov	r2, r6
   2c6bc:	mul	r5, r3, r5
   2c6c0:	ldr	r3, [r4, #8]
   2c6c4:	add	ip, r3, r5
   2c6c8:	ldr	r3, [r3, r5]
   2c6cc:	str	r3, [r1]
   2c6d0:	ldr	r1, [ip, #8]
   2c6d4:	bl	120f8 <memcpy@plt>
   2c6d8:	ldr	r3, [r4, #8]
   2c6dc:	mov	r2, r6
   2c6e0:	ldr	r0, [sp, #24]
   2c6e4:	add	r3, r3, r5
   2c6e8:	ldr	r1, [r3, #8]
   2c6ec:	add	r1, r1, r6
   2c6f0:	bl	120f8 <memcpy@plt>
   2c6f4:	ldr	r0, [r7, #8]
   2c6f8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c6fc:	ldr	r3, [r4, #8]
   2c700:	add	r3, r3, r5
   2c704:	ldr	r0, [r3, #8]
   2c708:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2c70c:	ldr	r3, [r4, #8]
   2c710:	add	r5, r3, r5
   2c714:	add	r3, r5, #12
   2c718:	ldm	r3, {r0, r1, r2}
   2c71c:	stm	r7, {r0, r1, r2}
   2c720:	ldr	r0, [r5, #4]
   2c724:	pop	{r4, r5, r6, r7, r8, pc}
   2c728:	mvn	r0, #0
   2c72c:	pop	{r4, r5, r6, r7, r8, pc}
   2c730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c734:	mov	r9, r3
   2c738:	mov	r5, r0
   2c73c:	mov	r4, r1
   2c740:	mov	r8, r2
   2c744:	ldr	r6, [sp, #32]
   2c748:	ldr	r3, [sp, #36]	; 0x24
   2c74c:	tst	r3, #4194304	; 0x400000
   2c750:	beq	2c784 <__assert_fail@plt+0x1a098>
   2c754:	mov	r0, r6
   2c758:	ldr	r1, [pc, #1720]	; 2ce18 <__assert_fail@plt+0x1a72c>
   2c75c:	bl	11ffc <strcmp@plt>
   2c760:	cmp	r0, #0
   2c764:	ldreq	r6, [pc, #1712]	; 2ce1c <__assert_fail@plt+0x1a730>
   2c768:	beq	2c784 <__assert_fail@plt+0x1a098>
   2c76c:	mov	r0, r6
   2c770:	ldr	r1, [pc, #1704]	; 2ce20 <__assert_fail@plt+0x1a734>
   2c774:	bl	11ffc <strcmp@plt>
   2c778:	ldr	r3, [pc, #1692]	; 2ce1c <__assert_fail@plt+0x1a730>
   2c77c:	cmp	r0, #0
   2c780:	moveq	r6, r3
   2c784:	ldr	r7, [r9]
   2c788:	ldr	r3, [r8, #36]	; 0x24
   2c78c:	cmp	r7, r3
   2c790:	bne	2c7b8 <__assert_fail@plt+0x1a0cc>
   2c794:	lsl	r7, r7, #1
   2c798:	ldr	r0, [r8, #12]
   2c79c:	add	r7, r7, #1
   2c7a0:	lsl	r1, r7, #2
   2c7a4:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2c7a8:	cmp	r0, #0
   2c7ac:	beq	2ce08 <__assert_fail@plt+0x1a71c>
   2c7b0:	str	r0, [r8, #12]
   2c7b4:	str	r7, [r9]
   2c7b8:	ldr	r9, [r8, #12]
   2c7bc:	mov	r0, r6
   2c7c0:	ldr	r7, [r8, #36]	; 0x24
   2c7c4:	add	r3, r7, #1
   2c7c8:	str	r3, [r8, #36]	; 0x24
   2c7cc:	bl	11f9c <wctype@plt>
   2c7d0:	ldr	r1, [pc, #1612]	; 2ce24 <__assert_fail@plt+0x1a738>
   2c7d4:	str	r0, [r9, r7, lsl #2]
   2c7d8:	mov	r0, r6
   2c7dc:	bl	11ffc <strcmp@plt>
   2c7e0:	subs	r7, r0, #0
   2c7e4:	bne	2c85c <__assert_fail@plt+0x1a170>
   2c7e8:	bl	12374 <__ctype_b_loc@plt>
   2c7ec:	cmp	r5, #0
   2c7f0:	mov	r6, r0
   2c7f4:	beq	2c82c <__assert_fail@plt+0x1a140>
   2c7f8:	ldr	r2, [r6]
   2c7fc:	lsl	r3, r7, #1
   2c800:	ldrh	r3, [r2, r3]
   2c804:	tst	r3, #8
   2c808:	beq	2c818 <__assert_fail@plt+0x1a12c>
   2c80c:	ldrb	r1, [r5, r7]
   2c810:	mov	r0, r4
   2c814:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c818:	add	r7, r7, #1
   2c81c:	cmp	r7, #256	; 0x100
   2c820:	bne	2c7f8 <__assert_fail@plt+0x1a10c>
   2c824:	mov	r0, #0
   2c828:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c82c:	ldr	r2, [r6]
   2c830:	lsl	r3, r7, #1
   2c834:	ldrh	r3, [r2, r3]
   2c838:	tst	r3, #8
   2c83c:	beq	2c84c <__assert_fail@plt+0x1a160>
   2c840:	mov	r1, r7
   2c844:	mov	r0, r4
   2c848:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c84c:	add	r7, r7, #1
   2c850:	cmp	r7, #256	; 0x100
   2c854:	bne	2c82c <__assert_fail@plt+0x1a140>
   2c858:	b	2c824 <__assert_fail@plt+0x1a138>
   2c85c:	ldr	r1, [pc, #1476]	; 2ce28 <__assert_fail@plt+0x1a73c>
   2c860:	mov	r0, r6
   2c864:	bl	11ffc <strcmp@plt>
   2c868:	subs	r7, r0, #0
   2c86c:	bne	2c8e0 <__assert_fail@plt+0x1a1f4>
   2c870:	bl	12374 <__ctype_b_loc@plt>
   2c874:	cmp	r5, #0
   2c878:	mov	r6, r0
   2c87c:	beq	2c8b0 <__assert_fail@plt+0x1a1c4>
   2c880:	ldr	r2, [r6]
   2c884:	lsl	r3, r7, #1
   2c888:	ldrh	r3, [r2, r3]
   2c88c:	tst	r3, #2
   2c890:	beq	2c8a0 <__assert_fail@plt+0x1a1b4>
   2c894:	ldrb	r1, [r5, r7]
   2c898:	mov	r0, r4
   2c89c:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c8a0:	add	r7, r7, #1
   2c8a4:	cmp	r7, #256	; 0x100
   2c8a8:	bne	2c880 <__assert_fail@plt+0x1a194>
   2c8ac:	b	2c824 <__assert_fail@plt+0x1a138>
   2c8b0:	ldr	r2, [r6]
   2c8b4:	lsl	r3, r7, #1
   2c8b8:	ldrh	r3, [r2, r3]
   2c8bc:	tst	r3, #2
   2c8c0:	beq	2c8d0 <__assert_fail@plt+0x1a1e4>
   2c8c4:	mov	r1, r7
   2c8c8:	mov	r0, r4
   2c8cc:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c8d0:	add	r7, r7, #1
   2c8d4:	cmp	r7, #256	; 0x100
   2c8d8:	bne	2c8b0 <__assert_fail@plt+0x1a1c4>
   2c8dc:	b	2c824 <__assert_fail@plt+0x1a138>
   2c8e0:	ldr	r1, [pc, #1336]	; 2ce20 <__assert_fail@plt+0x1a734>
   2c8e4:	mov	r0, r6
   2c8e8:	bl	11ffc <strcmp@plt>
   2c8ec:	subs	r7, r0, #0
   2c8f0:	bne	2c964 <__assert_fail@plt+0x1a278>
   2c8f4:	bl	12374 <__ctype_b_loc@plt>
   2c8f8:	cmp	r5, #0
   2c8fc:	mov	r6, r0
   2c900:	beq	2c934 <__assert_fail@plt+0x1a248>
   2c904:	ldr	r2, [r6]
   2c908:	lsl	r3, r7, #1
   2c90c:	ldrh	r3, [r2, r3]
   2c910:	tst	r3, #512	; 0x200
   2c914:	beq	2c924 <__assert_fail@plt+0x1a238>
   2c918:	ldrb	r1, [r5, r7]
   2c91c:	mov	r0, r4
   2c920:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c924:	add	r7, r7, #1
   2c928:	cmp	r7, #256	; 0x100
   2c92c:	bne	2c904 <__assert_fail@plt+0x1a218>
   2c930:	b	2c824 <__assert_fail@plt+0x1a138>
   2c934:	ldr	r2, [r6]
   2c938:	lsl	r3, r7, #1
   2c93c:	ldrh	r3, [r2, r3]
   2c940:	tst	r3, #512	; 0x200
   2c944:	beq	2c954 <__assert_fail@plt+0x1a268>
   2c948:	mov	r1, r7
   2c94c:	mov	r0, r4
   2c950:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c954:	add	r7, r7, #1
   2c958:	cmp	r7, #256	; 0x100
   2c95c:	bne	2c934 <__assert_fail@plt+0x1a248>
   2c960:	b	2c824 <__assert_fail@plt+0x1a138>
   2c964:	ldr	r1, [pc, #1216]	; 2ce2c <__assert_fail@plt+0x1a740>
   2c968:	mov	r0, r6
   2c96c:	bl	11ffc <strcmp@plt>
   2c970:	subs	r7, r0, #0
   2c974:	bne	2c9e8 <__assert_fail@plt+0x1a2fc>
   2c978:	bl	12374 <__ctype_b_loc@plt>
   2c97c:	cmp	r5, #0
   2c980:	mov	r6, r0
   2c984:	beq	2c9b8 <__assert_fail@plt+0x1a2cc>
   2c988:	ldr	r2, [r6]
   2c98c:	lsl	r3, r7, #1
   2c990:	ldrh	r3, [r2, r3]
   2c994:	tst	r3, #8192	; 0x2000
   2c998:	beq	2c9a8 <__assert_fail@plt+0x1a2bc>
   2c99c:	ldrb	r1, [r5, r7]
   2c9a0:	mov	r0, r4
   2c9a4:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c9a8:	add	r7, r7, #1
   2c9ac:	cmp	r7, #256	; 0x100
   2c9b0:	bne	2c988 <__assert_fail@plt+0x1a29c>
   2c9b4:	b	2c824 <__assert_fail@plt+0x1a138>
   2c9b8:	ldr	r2, [r6]
   2c9bc:	lsl	r3, r7, #1
   2c9c0:	ldrh	r3, [r2, r3]
   2c9c4:	tst	r3, #8192	; 0x2000
   2c9c8:	beq	2c9d8 <__assert_fail@plt+0x1a2ec>
   2c9cc:	mov	r1, r7
   2c9d0:	mov	r0, r4
   2c9d4:	bl	2ad34 <__assert_fail@plt+0x18648>
   2c9d8:	add	r7, r7, #1
   2c9dc:	cmp	r7, #256	; 0x100
   2c9e0:	bne	2c9b8 <__assert_fail@plt+0x1a2cc>
   2c9e4:	b	2c824 <__assert_fail@plt+0x1a138>
   2c9e8:	ldr	r1, [pc, #1068]	; 2ce1c <__assert_fail@plt+0x1a730>
   2c9ec:	mov	r0, r6
   2c9f0:	bl	11ffc <strcmp@plt>
   2c9f4:	subs	r7, r0, #0
   2c9f8:	bne	2ca6c <__assert_fail@plt+0x1a380>
   2c9fc:	bl	12374 <__ctype_b_loc@plt>
   2ca00:	cmp	r5, #0
   2ca04:	mov	r6, r0
   2ca08:	beq	2ca3c <__assert_fail@plt+0x1a350>
   2ca0c:	ldr	r2, [r6]
   2ca10:	lsl	r3, r7, #1
   2ca14:	ldrh	r3, [r2, r3]
   2ca18:	tst	r3, #1024	; 0x400
   2ca1c:	beq	2ca2c <__assert_fail@plt+0x1a340>
   2ca20:	ldrb	r1, [r5, r7]
   2ca24:	mov	r0, r4
   2ca28:	bl	2ad34 <__assert_fail@plt+0x18648>
   2ca2c:	add	r7, r7, #1
   2ca30:	cmp	r7, #256	; 0x100
   2ca34:	bne	2ca0c <__assert_fail@plt+0x1a320>
   2ca38:	b	2c824 <__assert_fail@plt+0x1a138>
   2ca3c:	ldr	r2, [r6]
   2ca40:	lsl	r3, r7, #1
   2ca44:	ldrh	r3, [r2, r3]
   2ca48:	tst	r3, #1024	; 0x400
   2ca4c:	beq	2ca5c <__assert_fail@plt+0x1a370>
   2ca50:	mov	r1, r7
   2ca54:	mov	r0, r4
   2ca58:	bl	2ad34 <__assert_fail@plt+0x18648>
   2ca5c:	add	r7, r7, #1
   2ca60:	cmp	r7, #256	; 0x100
   2ca64:	bne	2ca3c <__assert_fail@plt+0x1a350>
   2ca68:	b	2c824 <__assert_fail@plt+0x1a138>
   2ca6c:	ldr	r1, [pc, #956]	; 2ce30 <__assert_fail@plt+0x1a744>
   2ca70:	mov	r0, r6
   2ca74:	bl	11ffc <strcmp@plt>
   2ca78:	subs	r7, r0, #0
   2ca7c:	bne	2caf0 <__assert_fail@plt+0x1a404>
   2ca80:	bl	12374 <__ctype_b_loc@plt>
   2ca84:	cmp	r5, #0
   2ca88:	mov	r6, r0
   2ca8c:	beq	2cac0 <__assert_fail@plt+0x1a3d4>
   2ca90:	ldr	r2, [r6]
   2ca94:	lsl	r3, r7, #1
   2ca98:	ldrh	r3, [r2, r3]
   2ca9c:	tst	r3, #2048	; 0x800
   2caa0:	beq	2cab0 <__assert_fail@plt+0x1a3c4>
   2caa4:	ldrb	r1, [r5, r7]
   2caa8:	mov	r0, r4
   2caac:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cab0:	add	r7, r7, #1
   2cab4:	cmp	r7, #256	; 0x100
   2cab8:	bne	2ca90 <__assert_fail@plt+0x1a3a4>
   2cabc:	b	2c824 <__assert_fail@plt+0x1a138>
   2cac0:	ldr	r2, [r6]
   2cac4:	lsl	r3, r7, #1
   2cac8:	ldrh	r3, [r2, r3]
   2cacc:	tst	r3, #2048	; 0x800
   2cad0:	beq	2cae0 <__assert_fail@plt+0x1a3f4>
   2cad4:	mov	r1, r7
   2cad8:	mov	r0, r4
   2cadc:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cae0:	add	r7, r7, #1
   2cae4:	cmp	r7, #256	; 0x100
   2cae8:	bne	2cac0 <__assert_fail@plt+0x1a3d4>
   2caec:	b	2c824 <__assert_fail@plt+0x1a138>
   2caf0:	ldr	r1, [pc, #828]	; 2ce34 <__assert_fail@plt+0x1a748>
   2caf4:	mov	r0, r6
   2caf8:	bl	11ffc <strcmp@plt>
   2cafc:	subs	r7, r0, #0
   2cb00:	bne	2cb74 <__assert_fail@plt+0x1a488>
   2cb04:	bl	12374 <__ctype_b_loc@plt>
   2cb08:	cmp	r5, #0
   2cb0c:	mov	r6, r0
   2cb10:	beq	2cb44 <__assert_fail@plt+0x1a458>
   2cb14:	ldr	r2, [r6]
   2cb18:	lsl	r3, r7, #1
   2cb1c:	ldrh	r3, [r2, r3]
   2cb20:	tst	r3, #16384	; 0x4000
   2cb24:	beq	2cb34 <__assert_fail@plt+0x1a448>
   2cb28:	ldrb	r1, [r5, r7]
   2cb2c:	mov	r0, r4
   2cb30:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cb34:	add	r7, r7, #1
   2cb38:	cmp	r7, #256	; 0x100
   2cb3c:	bne	2cb14 <__assert_fail@plt+0x1a428>
   2cb40:	b	2c824 <__assert_fail@plt+0x1a138>
   2cb44:	ldr	r2, [r6]
   2cb48:	lsl	r3, r7, #1
   2cb4c:	ldrh	r3, [r2, r3]
   2cb50:	tst	r3, #16384	; 0x4000
   2cb54:	beq	2cb64 <__assert_fail@plt+0x1a478>
   2cb58:	mov	r1, r7
   2cb5c:	mov	r0, r4
   2cb60:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cb64:	add	r7, r7, #1
   2cb68:	cmp	r7, #256	; 0x100
   2cb6c:	bne	2cb44 <__assert_fail@plt+0x1a458>
   2cb70:	b	2c824 <__assert_fail@plt+0x1a138>
   2cb74:	ldr	r1, [pc, #668]	; 2ce18 <__assert_fail@plt+0x1a72c>
   2cb78:	mov	r0, r6
   2cb7c:	bl	11ffc <strcmp@plt>
   2cb80:	subs	r7, r0, #0
   2cb84:	bne	2cbf8 <__assert_fail@plt+0x1a50c>
   2cb88:	bl	12374 <__ctype_b_loc@plt>
   2cb8c:	cmp	r5, #0
   2cb90:	mov	r6, r0
   2cb94:	beq	2cbc8 <__assert_fail@plt+0x1a4dc>
   2cb98:	ldr	r2, [r6]
   2cb9c:	lsl	r3, r7, #1
   2cba0:	ldrh	r3, [r2, r3]
   2cba4:	tst	r3, #256	; 0x100
   2cba8:	beq	2cbb8 <__assert_fail@plt+0x1a4cc>
   2cbac:	ldrb	r1, [r5, r7]
   2cbb0:	mov	r0, r4
   2cbb4:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cbb8:	add	r7, r7, #1
   2cbbc:	cmp	r7, #256	; 0x100
   2cbc0:	bne	2cb98 <__assert_fail@plt+0x1a4ac>
   2cbc4:	b	2c824 <__assert_fail@plt+0x1a138>
   2cbc8:	ldr	r2, [r6]
   2cbcc:	lsl	r3, r7, #1
   2cbd0:	ldrh	r3, [r2, r3]
   2cbd4:	tst	r3, #256	; 0x100
   2cbd8:	beq	2cbe8 <__assert_fail@plt+0x1a4fc>
   2cbdc:	mov	r1, r7
   2cbe0:	mov	r0, r4
   2cbe4:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cbe8:	add	r7, r7, #1
   2cbec:	cmp	r7, #256	; 0x100
   2cbf0:	bne	2cbc8 <__assert_fail@plt+0x1a4dc>
   2cbf4:	b	2c824 <__assert_fail@plt+0x1a138>
   2cbf8:	ldr	r1, [pc, #568]	; 2ce38 <__assert_fail@plt+0x1a74c>
   2cbfc:	mov	r0, r6
   2cc00:	bl	11ffc <strcmp@plt>
   2cc04:	subs	r7, r0, #0
   2cc08:	bne	2cc7c <__assert_fail@plt+0x1a590>
   2cc0c:	bl	12374 <__ctype_b_loc@plt>
   2cc10:	cmp	r5, #0
   2cc14:	mov	r6, r0
   2cc18:	beq	2cc4c <__assert_fail@plt+0x1a560>
   2cc1c:	ldr	r2, [r6]
   2cc20:	lsl	r3, r7, #1
   2cc24:	ldrh	r3, [r2, r3]
   2cc28:	tst	r3, #1
   2cc2c:	beq	2cc3c <__assert_fail@plt+0x1a550>
   2cc30:	ldrb	r1, [r5, r7]
   2cc34:	mov	r0, r4
   2cc38:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cc3c:	add	r7, r7, #1
   2cc40:	cmp	r7, #256	; 0x100
   2cc44:	bne	2cc1c <__assert_fail@plt+0x1a530>
   2cc48:	b	2c824 <__assert_fail@plt+0x1a138>
   2cc4c:	ldr	r2, [r6]
   2cc50:	lsl	r3, r7, #1
   2cc54:	ldrh	r3, [r2, r3]
   2cc58:	tst	r3, #1
   2cc5c:	beq	2cc6c <__assert_fail@plt+0x1a580>
   2cc60:	mov	r1, r7
   2cc64:	mov	r0, r4
   2cc68:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cc6c:	add	r7, r7, #1
   2cc70:	cmp	r7, #256	; 0x100
   2cc74:	bne	2cc4c <__assert_fail@plt+0x1a560>
   2cc78:	b	2c824 <__assert_fail@plt+0x1a138>
   2cc7c:	ldr	r1, [pc, #440]	; 2ce3c <__assert_fail@plt+0x1a750>
   2cc80:	mov	r0, r6
   2cc84:	bl	11ffc <strcmp@plt>
   2cc88:	subs	r7, r0, #0
   2cc8c:	bne	2cd00 <__assert_fail@plt+0x1a614>
   2cc90:	bl	12374 <__ctype_b_loc@plt>
   2cc94:	cmp	r5, #0
   2cc98:	mov	r6, r0
   2cc9c:	beq	2ccd0 <__assert_fail@plt+0x1a5e4>
   2cca0:	ldr	r2, [r6]
   2cca4:	lsl	r3, r7, #1
   2cca8:	ldrsh	r3, [r2, r3]
   2ccac:	cmp	r3, #0
   2ccb0:	bge	2ccc0 <__assert_fail@plt+0x1a5d4>
   2ccb4:	ldrb	r1, [r5, r7]
   2ccb8:	mov	r0, r4
   2ccbc:	bl	2ad34 <__assert_fail@plt+0x18648>
   2ccc0:	add	r7, r7, #1
   2ccc4:	cmp	r7, #256	; 0x100
   2ccc8:	bne	2cca0 <__assert_fail@plt+0x1a5b4>
   2cccc:	b	2c824 <__assert_fail@plt+0x1a138>
   2ccd0:	ldr	r2, [r6]
   2ccd4:	lsl	r3, r7, #1
   2ccd8:	ldrsh	r3, [r2, r3]
   2ccdc:	cmp	r3, #0
   2cce0:	bge	2ccf0 <__assert_fail@plt+0x1a604>
   2cce4:	mov	r1, r7
   2cce8:	mov	r0, r4
   2ccec:	bl	2ad34 <__assert_fail@plt+0x18648>
   2ccf0:	add	r7, r7, #1
   2ccf4:	cmp	r7, #256	; 0x100
   2ccf8:	bne	2ccd0 <__assert_fail@plt+0x1a5e4>
   2ccfc:	b	2c824 <__assert_fail@plt+0x1a138>
   2cd00:	ldr	r1, [pc, #312]	; 2ce40 <__assert_fail@plt+0x1a754>
   2cd04:	mov	r0, r6
   2cd08:	bl	11ffc <strcmp@plt>
   2cd0c:	subs	r7, r0, #0
   2cd10:	bne	2cd84 <__assert_fail@plt+0x1a698>
   2cd14:	bl	12374 <__ctype_b_loc@plt>
   2cd18:	cmp	r5, #0
   2cd1c:	mov	r6, r0
   2cd20:	beq	2cd54 <__assert_fail@plt+0x1a668>
   2cd24:	ldr	r2, [r6]
   2cd28:	lsl	r3, r7, #1
   2cd2c:	ldrh	r3, [r2, r3]
   2cd30:	tst	r3, #4
   2cd34:	beq	2cd44 <__assert_fail@plt+0x1a658>
   2cd38:	ldrb	r1, [r5, r7]
   2cd3c:	mov	r0, r4
   2cd40:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cd44:	add	r7, r7, #1
   2cd48:	cmp	r7, #256	; 0x100
   2cd4c:	bne	2cd24 <__assert_fail@plt+0x1a638>
   2cd50:	b	2c824 <__assert_fail@plt+0x1a138>
   2cd54:	ldr	r2, [r6]
   2cd58:	lsl	r3, r7, #1
   2cd5c:	ldrh	r3, [r2, r3]
   2cd60:	tst	r3, #4
   2cd64:	beq	2cd74 <__assert_fail@plt+0x1a688>
   2cd68:	mov	r1, r7
   2cd6c:	mov	r0, r4
   2cd70:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cd74:	add	r7, r7, #1
   2cd78:	cmp	r7, #256	; 0x100
   2cd7c:	bne	2cd54 <__assert_fail@plt+0x1a668>
   2cd80:	b	2c824 <__assert_fail@plt+0x1a138>
   2cd84:	mov	r0, r6
   2cd88:	ldr	r1, [pc, #180]	; 2ce44 <__assert_fail@plt+0x1a758>
   2cd8c:	bl	11ffc <strcmp@plt>
   2cd90:	subs	r6, r0, #0
   2cd94:	bne	2ce10 <__assert_fail@plt+0x1a724>
   2cd98:	bl	12374 <__ctype_b_loc@plt>
   2cd9c:	cmp	r5, #0
   2cda0:	mov	r7, r0
   2cda4:	beq	2cdd8 <__assert_fail@plt+0x1a6ec>
   2cda8:	ldr	r2, [r7]
   2cdac:	lsl	r3, r6, #1
   2cdb0:	ldrh	r3, [r2, r3]
   2cdb4:	tst	r3, #4096	; 0x1000
   2cdb8:	beq	2cdc8 <__assert_fail@plt+0x1a6dc>
   2cdbc:	ldrb	r1, [r5, r6]
   2cdc0:	mov	r0, r4
   2cdc4:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cdc8:	add	r6, r6, #1
   2cdcc:	cmp	r6, #256	; 0x100
   2cdd0:	bne	2cda8 <__assert_fail@plt+0x1a6bc>
   2cdd4:	b	2c824 <__assert_fail@plt+0x1a138>
   2cdd8:	ldr	r2, [r7]
   2cddc:	lsl	r3, r6, #1
   2cde0:	ldrh	r3, [r2, r3]
   2cde4:	tst	r3, #4096	; 0x1000
   2cde8:	beq	2cdf8 <__assert_fail@plt+0x1a70c>
   2cdec:	mov	r1, r6
   2cdf0:	mov	r0, r4
   2cdf4:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cdf8:	add	r6, r6, #1
   2cdfc:	cmp	r6, #256	; 0x100
   2ce00:	bne	2cdd8 <__assert_fail@plt+0x1a6ec>
   2ce04:	b	2c824 <__assert_fail@plt+0x1a138>
   2ce08:	mov	r0, #12
   2ce0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ce10:	mov	r0, #4
   2ce14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ce18:	andeq	sp, r3, r6, ror r1
   2ce1c:	andeq	sp, r3, r0, ror r1
   2ce20:	andeq	sp, r3, ip, ror r1
   2ce24:	andeq	sp, r3, r2, lsl #3
   2ce28:	andeq	sp, r3, r8, lsl #3
   2ce2c:	andeq	sp, r3, lr, lsl #3
   2ce30:	andeq	sp, r3, r7, lsr #3
   2ce34:	strdeq	r8, [r3], -r2
   2ce38:	muleq	r3, r4, r1
   2ce3c:	muleq	r3, sl, r1
   2ce40:	andeq	sp, r3, r0, lsr #3
   2ce44:	andeq	sp, r3, r6, lsr #3
   2ce48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce4c:	mov	r9, #0
   2ce50:	sub	sp, sp, #36	; 0x24
   2ce54:	mov	r6, r0
   2ce58:	mov	fp, r1
   2ce5c:	mov	r0, #32
   2ce60:	mov	r1, #1
   2ce64:	ldr	r7, [sp, #76]	; 0x4c
   2ce68:	mov	r8, r3
   2ce6c:	str	r2, [sp, #12]
   2ce70:	ldrb	sl, [sp, #72]	; 0x48
   2ce74:	str	r9, [sp, #20]
   2ce78:	bl	27fbc <__assert_fail@plt+0x158d0>
   2ce7c:	subs	r4, r0, #0
   2ce80:	moveq	r3, #12
   2ce84:	streq	r3, [r7]
   2ce88:	beq	2cfc8 <__assert_fail@plt+0x1a8dc>
   2ce8c:	mov	r1, #1
   2ce90:	mov	r0, #40	; 0x28
   2ce94:	bl	27fbc <__assert_fail@plt+0x158d0>
   2ce98:	subs	r5, r0, #0
   2ce9c:	bne	2ceb4 <__assert_fail@plt+0x1a7c8>
   2cea0:	mov	r0, r4
   2cea4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2cea8:	mov	r3, #12
   2ceac:	str	r3, [r7]
   2ceb0:	b	2cf00 <__assert_fail@plt+0x1a814>
   2ceb4:	ldrb	r3, [r5, #16]
   2ceb8:	mov	r0, fp
   2cebc:	mov	r2, r5
   2cec0:	mov	r1, r4
   2cec4:	bfi	r3, sl, #0, #1
   2cec8:	strb	r3, [r5, #16]
   2cecc:	ldr	r3, [sp, #12]
   2ced0:	str	r3, [sp]
   2ced4:	add	r3, sp, #20
   2ced8:	str	r9, [sp, #4]
   2cedc:	bl	2c730 <__assert_fail@plt+0x1a044>
   2cee0:	subs	fp, r0, #0
   2cee4:	subeq	r8, r8, #1
   2cee8:	beq	2cf10 <__assert_fail@plt+0x1a824>
   2ceec:	mov	r0, r4
   2cef0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2cef4:	mov	r0, r5
   2cef8:	bl	2c02c <__assert_fail@plt+0x19940>
   2cefc:	str	fp, [r7]
   2cf00:	mov	r4, #0
   2cf04:	b	2cfc8 <__assert_fail@plt+0x1a8dc>
   2cf08:	mov	r0, r4
   2cf0c:	bl	2ad34 <__assert_fail@plt+0x18648>
   2cf10:	ldrb	r1, [r8, #1]!
   2cf14:	cmp	r1, #0
   2cf18:	bne	2cf08 <__assert_fail@plt+0x1a81c>
   2cf1c:	cmp	sl, #0
   2cf20:	beq	2cf2c <__assert_fail@plt+0x1a840>
   2cf24:	mov	r0, r4
   2cf28:	bl	2ad80 <__assert_fail@plt+0x18694>
   2cf2c:	ldr	r3, [r6, #92]	; 0x5c
   2cf30:	cmp	r3, #1
   2cf34:	ble	2cf44 <__assert_fail@plt+0x1a858>
   2cf38:	mov	r0, r4
   2cf3c:	ldr	r1, [r6, #60]	; 0x3c
   2cf40:	bl	2adc8 <__assert_fail@plt+0x186dc>
   2cf44:	mov	r8, #0
   2cf48:	mov	r3, #3
   2cf4c:	str	r4, [sp, #24]
   2cf50:	mov	r2, r8
   2cf54:	mov	r1, r8
   2cf58:	mov	r0, r6
   2cf5c:	str	r8, [sp, #28]
   2cf60:	strb	r3, [sp, #28]
   2cf64:	add	r3, sp, #24
   2cf68:	bl	2b574 <__assert_fail@plt+0x18e88>
   2cf6c:	subs	r9, r0, #0
   2cf70:	beq	2cfe4 <__assert_fail@plt+0x1a8f8>
   2cf74:	ldr	r3, [r6, #92]	; 0x5c
   2cf78:	cmp	r3, #1
   2cf7c:	ble	2cfd4 <__assert_fail@plt+0x1a8e8>
   2cf80:	mov	r3, #6
   2cf84:	mov	r2, r8
   2cf88:	str	r5, [sp, #24]
   2cf8c:	mov	r1, r8
   2cf90:	mov	r0, r6
   2cf94:	strb	r3, [sp, #28]
   2cf98:	ldrb	r3, [r6, #88]	; 0x58
   2cf9c:	orr	r3, r3, #2
   2cfa0:	strb	r3, [r6, #88]	; 0x58
   2cfa4:	add	r3, sp, #24
   2cfa8:	bl	2b574 <__assert_fail@plt+0x18e88>
   2cfac:	subs	r2, r0, #0
   2cfb0:	beq	2cfe4 <__assert_fail@plt+0x1a8f8>
   2cfb4:	mov	r3, #10
   2cfb8:	mov	r1, r9
   2cfbc:	mov	r0, r6
   2cfc0:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   2cfc4:	mov	r4, r0
   2cfc8:	mov	r0, r4
   2cfcc:	add	sp, sp, #36	; 0x24
   2cfd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfd4:	mov	r0, r5
   2cfd8:	mov	r4, r9
   2cfdc:	bl	2c02c <__assert_fail@plt+0x19940>
   2cfe0:	b	2cfc8 <__assert_fail@plt+0x1a8dc>
   2cfe4:	mov	r0, r4
   2cfe8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2cfec:	mov	r0, r5
   2cff0:	bl	2c02c <__assert_fail@plt+0x19940>
   2cff4:	b	2cea8 <__assert_fail@plt+0x1a7bc>
   2cff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cffc:	mov	r7, r0
   2d000:	sub	sp, sp, #300	; 0x12c
   2d004:	mov	fp, r1
   2d008:	mov	r4, r2
   2d00c:	ldr	r5, [r0]
   2d010:	ldr	r3, [r5, #92]	; 0x5c
   2d014:	cmp	r3, #1
   2d018:	mov	r3, #0
   2d01c:	ldreq	r6, [r0, #12]
   2d020:	movne	r6, #0
   2d024:	str	r3, [sp, #4]
   2d028:	str	r3, [sp, #8]
   2d02c:	str	r3, [sp, #12]
   2d030:	ubfxeq	r6, r6, #22, #1
   2d034:	ldr	r2, [sp, #4]
   2d038:	ldr	r3, [fp, #8]
   2d03c:	cmp	r3, r2
   2d040:	ble	2d33c <__assert_fail@plt+0x1ac50>
   2d044:	ldr	r2, [sp, #4]
   2d048:	ldr	r3, [fp, #12]
   2d04c:	ldr	sl, [r3, r2, lsl #2]
   2d050:	ldr	r3, [r5]
   2d054:	lsl	r9, sl, #3
   2d058:	add	r2, r3, r9
   2d05c:	ldrb	r8, [r2, #4]
   2d060:	cmp	r8, #1
   2d064:	bne	2d150 <__assert_fail@plt+0x1aa64>
   2d068:	ldrb	r0, [r3, sl, lsl #3]
   2d06c:	cmp	r6, #0
   2d070:	strb	r8, [r4, r0]
   2d074:	beq	2d080 <__assert_fail@plt+0x1a994>
   2d078:	bl	12110 <tolower@plt>
   2d07c:	strb	r8, [r4, r0]
   2d080:	ldr	r3, [r7, #12]
   2d084:	tst	r3, #4194304	; 0x400000
   2d088:	beq	2d134 <__assert_fail@plt+0x1aa48>
   2d08c:	ldr	r3, [r5, #92]	; 0x5c
   2d090:	cmp	r3, #1
   2d094:	ble	2d134 <__assert_fail@plt+0x1aa48>
   2d098:	ldr	r3, [r5]
   2d09c:	add	r8, sp, #41	; 0x29
   2d0a0:	ldr	r1, [pc, #668]	; 2d344 <__assert_fail@plt+0x1ac58>
   2d0a4:	ldrb	r3, [r3, r9]
   2d0a8:	strb	r3, [sp, #40]	; 0x28
   2d0ac:	ldr	r3, [r5, #8]
   2d0b0:	add	sl, sl, #1
   2d0b4:	cmp	r3, sl
   2d0b8:	bls	2d0dc <__assert_fail@plt+0x1a9f0>
   2d0bc:	ldr	r2, [r5]
   2d0c0:	add	r3, r2, sl, lsl #3
   2d0c4:	ldr	r3, [r3, #4]
   2d0c8:	bic	r3, r3, #-16777216	; 0xff000000
   2d0cc:	bic	r3, r3, #14614528	; 0xdf0000
   2d0d0:	bic	r3, r3, #65280	; 0xff00
   2d0d4:	cmp	r3, r1
   2d0d8:	beq	2d144 <__assert_fail@plt+0x1aa58>
   2d0dc:	mov	r3, #0
   2d0e0:	add	r9, sp, #40	; 0x28
   2d0e4:	sub	r8, r8, r9
   2d0e8:	mov	r1, r9
   2d0ec:	mov	r2, r8
   2d0f0:	add	r0, sp, #28
   2d0f4:	str	r3, [sp, #32]
   2d0f8:	str	r3, [sp, #36]	; 0x24
   2d0fc:	add	r3, sp, #32
   2d100:	bl	2a36c <__assert_fail@plt+0x17c80>
   2d104:	cmp	r8, r0
   2d108:	bne	2d134 <__assert_fail@plt+0x1aa48>
   2d10c:	ldr	r0, [sp, #28]
   2d110:	bl	12128 <towlower@plt>
   2d114:	mov	r1, r0
   2d118:	add	r2, sp, #32
   2d11c:	mov	r0, r9
   2d120:	bl	11fc0 <wcrtomb@plt>
   2d124:	cmn	r0, #1
   2d128:	ldrbne	r3, [sp, #40]	; 0x28
   2d12c:	movne	r2, #1
   2d130:	strbne	r2, [r4, r3]
   2d134:	ldr	r3, [sp, #4]
   2d138:	add	r3, r3, #1
   2d13c:	str	r3, [sp, #4]
   2d140:	b	2d034 <__assert_fail@plt+0x1a948>
   2d144:	ldrb	r3, [r2, sl, lsl #3]
   2d148:	strb	r3, [r8], #1
   2d14c:	b	2d0ac <__assert_fail@plt+0x1a9c0>
   2d150:	cmp	r8, #3
   2d154:	bne	2d1cc <__assert_fail@plt+0x1aae0>
   2d158:	mov	r8, #0
   2d15c:	mov	r2, #1
   2d160:	ldr	r1, [r5]
   2d164:	lsl	r3, r8, #3
   2d168:	mov	sl, #0
   2d16c:	ldr	r1, [r1, r9]
   2d170:	ldr	r1, [r1, r8]
   2d174:	lsr	r0, r1, sl
   2d178:	tst	r0, #1
   2d17c:	beq	2d1ac <__assert_fail@plt+0x1aac0>
   2d180:	cmp	r6, #0
   2d184:	strb	r2, [r4, r3]
   2d188:	beq	2d1ac <__assert_fail@plt+0x1aac0>
   2d18c:	mov	r0, r3
   2d190:	str	r3, [sp, #16]
   2d194:	str	r1, [sp, #20]
   2d198:	bl	12110 <tolower@plt>
   2d19c:	ldr	r3, [sp, #16]
   2d1a0:	mov	r2, #1
   2d1a4:	ldr	r1, [sp, #20]
   2d1a8:	strb	r2, [r4, r0]
   2d1ac:	add	sl, sl, #1
   2d1b0:	add	r3, r3, #1
   2d1b4:	cmp	sl, #32
   2d1b8:	bne	2d174 <__assert_fail@plt+0x1aa88>
   2d1bc:	add	r8, r8, #4
   2d1c0:	cmp	r8, #32
   2d1c4:	bne	2d160 <__assert_fail@plt+0x1aa74>
   2d1c8:	b	2d134 <__assert_fail@plt+0x1aa48>
   2d1cc:	cmp	r8, #6
   2d1d0:	bne	2d308 <__assert_fail@plt+0x1ac1c>
   2d1d4:	ldr	sl, [r3, r9]
   2d1d8:	ldr	r3, [r5, #92]	; 0x5c
   2d1dc:	cmp	r3, #1
   2d1e0:	ble	2d300 <__assert_fail@plt+0x1ac14>
   2d1e4:	ldr	r3, [sl, #36]	; 0x24
   2d1e8:	cmp	r3, #0
   2d1ec:	bne	2d208 <__assert_fail@plt+0x1ab1c>
   2d1f0:	ldrb	r3, [sl, #16]
   2d1f4:	tst	r3, #1
   2d1f8:	bne	2d208 <__assert_fail@plt+0x1ab1c>
   2d1fc:	ldr	r8, [sl, #32]
   2d200:	cmp	r8, #0
   2d204:	beq	2d2f0 <__assert_fail@plt+0x1ac04>
   2d208:	mov	r3, #0
   2d20c:	strb	r3, [sp, #32]
   2d210:	ldr	r3, [sp, #8]
   2d214:	mov	r2, #1
   2d218:	add	r1, sp, #32
   2d21c:	mov	r0, #0
   2d220:	str	r3, [sp, #40]	; 0x28
   2d224:	ldr	r3, [sp, #12]
   2d228:	str	r3, [sp, #44]	; 0x2c
   2d22c:	add	r3, sp, #40	; 0x28
   2d230:	bl	2a36c <__assert_fail@plt+0x17c80>
   2d234:	ldrb	r3, [sp, #32]
   2d238:	cmn	r0, #2
   2d23c:	moveq	r2, #1
   2d240:	strbeq	r2, [r4, r3]
   2d244:	add	r3, r3, #1
   2d248:	uxtb	r3, r3
   2d24c:	cmp	r3, #0
   2d250:	strb	r3, [sp, #32]
   2d254:	bne	2d210 <__assert_fail@plt+0x1ab24>
   2d258:	b	2d134 <__assert_fail@plt+0x1aa48>
   2d25c:	mov	r3, #0
   2d260:	add	r2, sp, #32
   2d264:	lsl	r9, r8, #2
   2d268:	add	r0, sp, #40	; 0x28
   2d26c:	str	r3, [sp, #32]
   2d270:	str	r3, [sp, #36]	; 0x24
   2d274:	ldr	r3, [sl]
   2d278:	ldr	r1, [r3, r8, lsl #2]
   2d27c:	bl	11fc0 <wcrtomb@plt>
   2d280:	cmn	r0, #1
   2d284:	beq	2d2a8 <__assert_fail@plt+0x1abbc>
   2d288:	ldrb	r0, [sp, #40]	; 0x28
   2d28c:	mov	r3, #1
   2d290:	cmp	r6, #0
   2d294:	strb	r3, [r4, r0]
   2d298:	beq	2d2a8 <__assert_fail@plt+0x1abbc>
   2d29c:	bl	12110 <tolower@plt>
   2d2a0:	mov	r3, #1
   2d2a4:	strb	r3, [r4, r0]
   2d2a8:	ldr	r3, [r7, #12]
   2d2ac:	tst	r3, #4194304	; 0x400000
   2d2b0:	beq	2d2ec <__assert_fail@plt+0x1ac00>
   2d2b4:	ldr	r3, [r5, #92]	; 0x5c
   2d2b8:	cmp	r3, #1
   2d2bc:	ble	2d2ec <__assert_fail@plt+0x1ac00>
   2d2c0:	ldr	r3, [sl]
   2d2c4:	ldr	r0, [r3, r9]
   2d2c8:	bl	12128 <towlower@plt>
   2d2cc:	mov	r1, r0
   2d2d0:	add	r2, sp, #32
   2d2d4:	add	r0, sp, #40	; 0x28
   2d2d8:	bl	11fc0 <wcrtomb@plt>
   2d2dc:	cmn	r0, #1
   2d2e0:	ldrbne	r3, [sp, #40]	; 0x28
   2d2e4:	movne	r2, #1
   2d2e8:	strbne	r2, [r4, r3]
   2d2ec:	add	r8, r8, #1
   2d2f0:	ldr	r3, [sl, #20]
   2d2f4:	cmp	r3, r8
   2d2f8:	bgt	2d25c <__assert_fail@plt+0x1ab70>
   2d2fc:	b	2d134 <__assert_fail@plt+0x1aa48>
   2d300:	mov	r8, #0
   2d304:	b	2d2f0 <__assert_fail@plt+0x1ac04>
   2d308:	and	r3, r8, #253	; 0xfd
   2d30c:	cmp	r3, #5
   2d310:	beq	2d31c <__assert_fail@plt+0x1ac30>
   2d314:	cmp	r8, #2
   2d318:	bne	2d134 <__assert_fail@plt+0x1aa48>
   2d31c:	mov	r2, #256	; 0x100
   2d320:	mov	r1, #1
   2d324:	mov	r0, r4
   2d328:	bl	12434 <memset@plt>
   2d32c:	cmp	r8, #2
   2d330:	ldrbeq	r3, [r7, #28]
   2d334:	orreq	r3, r3, #1
   2d338:	strbeq	r3, [r7, #28]
   2d33c:	add	sp, sp, #300	; 0x12c
   2d340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d344:	eoreq	r0, r0, r1
   2d348:	ldr	r2, [r0, #80]	; 0x50
   2d34c:	cmp	r2, #1
   2d350:	beq	2d368 <__assert_fail@plt+0x1ac7c>
   2d354:	ldr	ip, [r0, #28]
   2d358:	add	r3, r1, #1
   2d35c:	sub	r2, r3, r1
   2d360:	cmp	ip, r3
   2d364:	bgt	2d370 <__assert_fail@plt+0x1ac84>
   2d368:	mov	r0, r2
   2d36c:	bx	lr
   2d370:	push	{lr}		; (str lr, [sp, #-4]!)
   2d374:	ldr	lr, [r0, #8]
   2d378:	ldr	lr, [lr, r3, lsl #2]
   2d37c:	add	r3, r3, #1
   2d380:	cmn	lr, #1
   2d384:	bne	2d394 <__assert_fail@plt+0x1aca8>
   2d388:	cmp	ip, r3
   2d38c:	sub	r2, r3, r1
   2d390:	bgt	2d374 <__assert_fail@plt+0x1ac88>
   2d394:	mov	r0, r2
   2d398:	pop	{pc}		; (ldr pc, [sp], #4)
   2d39c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d3a0:	ldr	r9, [r0]
   2d3a4:	add	ip, r9, r1, lsl #3
   2d3a8:	ldrb	r5, [ip, #4]
   2d3ac:	cmp	r5, #7
   2d3b0:	bne	2d49c <__assert_fail@plt+0x1adb0>
   2d3b4:	ldr	r0, [r2, #4]
   2d3b8:	ldrb	ip, [r0, r3]
   2d3bc:	add	r1, r0, r3
   2d3c0:	cmp	ip, #193	; 0xc1
   2d3c4:	bls	2d3f4 <__assert_fail@plt+0x1ad08>
   2d3c8:	ldr	r0, [r2, #48]	; 0x30
   2d3cc:	add	r2, r3, #1
   2d3d0:	cmp	r2, r0
   2d3d4:	bge	2d3f4 <__assert_fail@plt+0x1ad08>
   2d3d8:	cmp	ip, #223	; 0xdf
   2d3dc:	ldrb	r2, [r1, #1]
   2d3e0:	bhi	2d400 <__assert_fail@plt+0x1ad14>
   2d3e4:	eor	r2, r2, #128	; 0x80
   2d3e8:	cmp	r2, #63	; 0x3f
   2d3ec:	movls	r4, #2
   2d3f0:	bls	2d3f8 <__assert_fail@plt+0x1ad0c>
   2d3f4:	mov	r4, #0
   2d3f8:	mov	r0, r4
   2d3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d400:	cmp	ip, #239	; 0xef
   2d404:	bhi	2d448 <__assert_fail@plt+0x1ad5c>
   2d408:	cmp	r2, #159	; 0x9f
   2d40c:	cmpls	ip, #224	; 0xe0
   2d410:	movne	r4, #3
   2d414:	beq	2d3f4 <__assert_fail@plt+0x1ad08>
   2d418:	add	r3, r4, r3
   2d41c:	cmp	r0, r3
   2d420:	blt	2d3f4 <__assert_fail@plt+0x1ad08>
   2d424:	mov	r3, #1
   2d428:	ldrb	r2, [r1, #1]!
   2d42c:	eor	r2, r2, #128	; 0x80
   2d430:	cmp	r2, #63	; 0x3f
   2d434:	bhi	2d3f4 <__assert_fail@plt+0x1ad08>
   2d438:	add	r3, r3, #1
   2d43c:	cmp	r4, r3
   2d440:	bne	2d428 <__assert_fail@plt+0x1ad3c>
   2d444:	b	2d3f8 <__assert_fail@plt+0x1ad0c>
   2d448:	cmp	ip, #247	; 0xf7
   2d44c:	bhi	2d464 <__assert_fail@plt+0x1ad78>
   2d450:	cmp	r2, #143	; 0x8f
   2d454:	cmpls	ip, #240	; 0xf0
   2d458:	movne	r4, #4
   2d45c:	bne	2d418 <__assert_fail@plt+0x1ad2c>
   2d460:	b	2d3f4 <__assert_fail@plt+0x1ad08>
   2d464:	cmp	ip, #251	; 0xfb
   2d468:	bhi	2d480 <__assert_fail@plt+0x1ad94>
   2d46c:	cmp	r2, #135	; 0x87
   2d470:	cmpls	ip, #248	; 0xf8
   2d474:	movne	r4, #5
   2d478:	bne	2d418 <__assert_fail@plt+0x1ad2c>
   2d47c:	b	2d3f4 <__assert_fail@plt+0x1ad08>
   2d480:	cmp	ip, #253	; 0xfd
   2d484:	bhi	2d3f4 <__assert_fail@plt+0x1ad08>
   2d488:	cmp	r2, #131	; 0x83
   2d48c:	cmpls	ip, #252	; 0xfc
   2d490:	beq	2d3f4 <__assert_fail@plt+0x1ad08>
   2d494:	mov	r4, #6
   2d498:	b	2d418 <__assert_fail@plt+0x1ad2c>
   2d49c:	mov	r7, r1
   2d4a0:	mov	sl, r0
   2d4a4:	mov	r1, r3
   2d4a8:	mov	r0, r2
   2d4ac:	mov	r6, r3
   2d4b0:	mov	r8, r2
   2d4b4:	bl	2d348 <__assert_fail@plt+0x1ac5c>
   2d4b8:	cmp	r5, #5
   2d4bc:	mov	r4, r0
   2d4c0:	bne	2d504 <__assert_fail@plt+0x1ae18>
   2d4c4:	cmp	r0, #1
   2d4c8:	ble	2d3f4 <__assert_fail@plt+0x1ad08>
   2d4cc:	ldr	r3, [sl, #128]	; 0x80
   2d4d0:	tst	r3, #64	; 0x40
   2d4d4:	bne	2d4e8 <__assert_fail@plt+0x1adfc>
   2d4d8:	ldr	r2, [r8, #4]
   2d4dc:	ldrb	r2, [r2, r6]
   2d4e0:	cmp	r2, #10
   2d4e4:	beq	2d3f4 <__assert_fail@plt+0x1ad08>
   2d4e8:	tst	r3, #128	; 0x80
   2d4ec:	beq	2d3f8 <__assert_fail@plt+0x1ad0c>
   2d4f0:	ldr	r3, [r8, #4]
   2d4f4:	ldrb	r3, [r3, r6]
   2d4f8:	cmp	r3, #0
   2d4fc:	beq	2d3f4 <__assert_fail@plt+0x1ad08>
   2d500:	b	2d3f8 <__assert_fail@plt+0x1ad0c>
   2d504:	sub	r3, r5, #6
   2d508:	cmp	r0, #1
   2d50c:	clz	r3, r3
   2d510:	lsr	r3, r3, #5
   2d514:	movle	r3, #0
   2d518:	cmp	r3, #0
   2d51c:	beq	2d3f4 <__assert_fail@plt+0x1ad08>
   2d520:	ldr	r7, [r9, r7, lsl #3]
   2d524:	ldr	r2, [r7, #20]
   2d528:	ldr	r3, [r7, #32]
   2d52c:	cmp	r3, #0
   2d530:	bne	2d540 <__assert_fail@plt+0x1ae54>
   2d534:	ldr	r5, [r7, #36]	; 0x24
   2d538:	orrs	r5, r2, r5
   2d53c:	beq	2d56c <__assert_fail@plt+0x1ae80>
   2d540:	mov	r1, r6
   2d544:	mov	r0, r8
   2d548:	bl	2adf0 <__assert_fail@plt+0x18704>
   2d54c:	mov	r5, r0
   2d550:	mov	r3, #0
   2d554:	cmp	r3, r2
   2d558:	blt	2d59c <__assert_fail@plt+0x1aeb0>
   2d55c:	mov	r6, #0
   2d560:	ldr	r3, [r7, #36]	; 0x24
   2d564:	cmp	r3, r6
   2d568:	bgt	2d5b4 <__assert_fail@plt+0x1aec8>
   2d56c:	ldr	r2, [r7, #32]
   2d570:	mov	r3, #0
   2d574:	cmp	r2, r3
   2d578:	bgt	2d5d4 <__assert_fail@plt+0x1aee8>
   2d57c:	mov	r3, #0
   2d580:	ldrb	r2, [r7, #16]
   2d584:	tst	r2, #1
   2d588:	moveq	r4, r3
   2d58c:	beq	2d3f8 <__assert_fail@plt+0x1ad0c>
   2d590:	cmp	r3, #0
   2d594:	bne	2d3f4 <__assert_fail@plt+0x1ad08>
   2d598:	b	2d3f8 <__assert_fail@plt+0x1ad0c>
   2d59c:	ldr	r1, [r7]
   2d5a0:	ldr	r1, [r1, r3, lsl #2]
   2d5a4:	cmp	r1, r5
   2d5a8:	beq	2d5fc <__assert_fail@plt+0x1af10>
   2d5ac:	add	r3, r3, #1
   2d5b0:	b	2d554 <__assert_fail@plt+0x1ae68>
   2d5b4:	ldr	r3, [r7, #12]
   2d5b8:	mov	r0, r5
   2d5bc:	ldr	r1, [r3, r6, lsl #2]
   2d5c0:	bl	11ff0 <iswctype@plt>
   2d5c4:	cmp	r0, #0
   2d5c8:	bne	2d5fc <__assert_fail@plt+0x1af10>
   2d5cc:	add	r6, r6, #1
   2d5d0:	b	2d560 <__assert_fail@plt+0x1ae74>
   2d5d4:	ldr	r1, [r7, #4]
   2d5d8:	ldr	r1, [r1, r3, lsl #2]
   2d5dc:	cmp	r1, r5
   2d5e0:	bhi	2d5f4 <__assert_fail@plt+0x1af08>
   2d5e4:	ldr	r1, [r7, #8]
   2d5e8:	ldr	r1, [r1, r3, lsl #2]
   2d5ec:	cmp	r1, r5
   2d5f0:	bcs	2d5fc <__assert_fail@plt+0x1af10>
   2d5f4:	add	r3, r3, #1
   2d5f8:	b	2d574 <__assert_fail@plt+0x1ae88>
   2d5fc:	mov	r3, r4
   2d600:	b	2d580 <__assert_fail@plt+0x1ae94>
   2d604:	cmp	r1, #0
   2d608:	bxlt	lr
   2d60c:	ldr	r3, [r0, #4]
   2d610:	cmp	r3, r1
   2d614:	subgt	r3, r3, #1
   2d618:	strgt	r3, [r0, #4]
   2d61c:	bxle	lr
   2d620:	ldr	r3, [r0, #4]
   2d624:	cmp	r1, r3
   2d628:	bxge	lr
   2d62c:	add	r1, r1, #1
   2d630:	ldr	r3, [r0, #8]
   2d634:	ldr	r2, [r3, r1, lsl #2]
   2d638:	add	r3, r3, r1, lsl #2
   2d63c:	str	r2, [r3, #-4]
   2d640:	b	2d620 <__assert_fail@plt+0x1af34>
   2d644:	ldrb	r3, [r1, #24]
   2d648:	cmp	r3, #4
   2d64c:	bne	2d680 <__assert_fail@plt+0x1af94>
   2d650:	ldr	r3, [r0, #132]	; 0x84
   2d654:	cmp	r3, #0
   2d658:	beq	2d678 <__assert_fail@plt+0x1af8c>
   2d65c:	ldr	r2, [r1, #20]
   2d660:	ldr	r2, [r3, r2, lsl #2]
   2d664:	ldr	r3, [r0, #80]	; 0x50
   2d668:	str	r2, [r1, #20]
   2d66c:	mov	r1, #1
   2d670:	orr	r3, r3, r1, lsl r2
   2d674:	str	r3, [r0, #80]	; 0x50
   2d678:	mov	r0, #0
   2d67c:	bx	lr
   2d680:	cmp	r3, #17
   2d684:	bne	2d678 <__assert_fail@plt+0x1af8c>
   2d688:	ldr	r3, [r1, #4]
   2d68c:	cmp	r3, #0
   2d690:	beq	2d678 <__assert_fail@plt+0x1af8c>
   2d694:	ldrb	r2, [r3, #24]
   2d698:	cmp	r2, #17
   2d69c:	bne	2d678 <__assert_fail@plt+0x1af8c>
   2d6a0:	ldr	r2, [r3, #20]
   2d6a4:	ldr	r3, [r3, #4]
   2d6a8:	cmp	r3, #0
   2d6ac:	str	r3, [r1, #4]
   2d6b0:	strne	r1, [r3]
   2d6b4:	cmp	r2, #31
   2d6b8:	ldr	r1, [r1, #20]
   2d6bc:	ldr	r3, [r0, #132]	; 0x84
   2d6c0:	ldr	r1, [r3, r1, lsl #2]
   2d6c4:	str	r1, [r3, r2, lsl #2]
   2d6c8:	bgt	2d678 <__assert_fail@plt+0x1af8c>
   2d6cc:	ldr	r3, [r0, #80]	; 0x50
   2d6d0:	mov	r1, #1
   2d6d4:	bic	r3, r3, r1, lsl r2
   2d6d8:	b	2d674 <__assert_fail@plt+0x1af88>
   2d6dc:	ldrb	r3, [r1, #24]
   2d6e0:	ldr	r2, [r1, #4]
   2d6e4:	cmp	r3, #11
   2d6e8:	streq	r1, [r2, #16]
   2d6ec:	beq	2d710 <__assert_fail@plt+0x1b024>
   2d6f0:	cmp	r3, #16
   2d6f4:	ldr	r3, [r1, #8]
   2d6f8:	beq	2d718 <__assert_fail@plt+0x1b02c>
   2d6fc:	cmp	r2, #0
   2d700:	ldrne	r0, [r1, #16]
   2d704:	strne	r0, [r2, #16]
   2d708:	cmp	r3, #0
   2d70c:	bne	2d720 <__assert_fail@plt+0x1b034>
   2d710:	mov	r0, #0
   2d714:	bx	lr
   2d718:	ldr	r0, [r3, #12]
   2d71c:	str	r0, [r2, #16]
   2d720:	ldr	r2, [r1, #16]
   2d724:	str	r2, [r3, #16]
   2d728:	b	2d710 <__assert_fail@plt+0x1b024>
   2d72c:	push	{r4, r5, r6, lr}
   2d730:	mov	r4, r0
   2d734:	mov	r5, r1
   2d738:	mov	r6, r2
   2d73c:	mov	r1, r4
   2d740:	mov	r0, r6
   2d744:	blx	r5
   2d748:	cmp	r0, #0
   2d74c:	popne	{r4, r5, r6, pc}
   2d750:	ldr	r3, [r4, #4]
   2d754:	cmp	r3, #0
   2d758:	moveq	r1, r0
   2d75c:	beq	2d77c <__assert_fail@plt+0x1b090>
   2d760:	mov	r4, r3
   2d764:	b	2d73c <__assert_fail@plt+0x1b050>
   2d768:	ldr	r3, [r4]
   2d76c:	mov	r1, r4
   2d770:	cmp	r3, #0
   2d774:	popeq	{r4, r5, r6, pc}
   2d778:	mov	r4, r3
   2d77c:	ldr	r3, [r4, #8]
   2d780:	cmp	r3, #0
   2d784:	cmpne	r3, r1
   2d788:	beq	2d768 <__assert_fail@plt+0x1b07c>
   2d78c:	b	2d760 <__assert_fail@plt+0x1b074>
   2d790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d794:	mov	r7, r1
   2d798:	mov	r9, r0
   2d79c:	mov	r5, r1
   2d7a0:	mov	r4, r2
   2d7a4:	str	r2, [r7], #16
   2d7a8:	mov	r0, r7
   2d7ac:	ldr	r1, [r1, #8]
   2d7b0:	bl	2b8b8 <__assert_fail@plt+0x191cc>
   2d7b4:	subs	r8, r0, #0
   2d7b8:	moveq	r6, r8
   2d7bc:	beq	2d7ec <__assert_fail@plt+0x1b100>
   2d7c0:	mov	r8, #12
   2d7c4:	mov	r0, r8
   2d7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d7cc:	ldr	r3, [r5, #12]
   2d7d0:	ldr	r1, [r3, r6, lsl #2]
   2d7d4:	ldr	r3, [r9]
   2d7d8:	add	r3, r3, r1, lsl #3
   2d7dc:	ldrb	r3, [r3, #4]
   2d7e0:	tst	r3, #8
   2d7e4:	beq	2d85c <__assert_fail@plt+0x1b170>
   2d7e8:	add	r6, r6, #1
   2d7ec:	ldr	r3, [r5, #8]
   2d7f0:	cmp	r3, r6
   2d7f4:	bgt	2d7cc <__assert_fail@plt+0x1b0e0>
   2d7f8:	ldr	r7, [r9, #32]
   2d7fc:	ldr	r3, [r9, #68]	; 0x44
   2d800:	and	r4, r4, r3
   2d804:	mov	r3, #12
   2d808:	mul	r4, r3, r4
   2d80c:	add	r6, r7, r4
   2d810:	ldr	r1, [r7, r4]
   2d814:	ldr	r3, [r6, #4]
   2d818:	cmp	r3, r1
   2d81c:	bgt	2d844 <__assert_fail@plt+0x1b158>
   2d820:	add	r1, r1, #1
   2d824:	ldr	r0, [r6, #8]
   2d828:	lsl	r9, r1, #1
   2d82c:	lsl	r1, r1, #3
   2d830:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2d834:	cmp	r0, #0
   2d838:	beq	2d7c0 <__assert_fail@plt+0x1b0d4>
   2d83c:	str	r9, [r6, #4]
   2d840:	str	r0, [r6, #8]
   2d844:	ldr	r3, [r7, r4]
   2d848:	ldr	r2, [r6, #8]
   2d84c:	add	r1, r3, #1
   2d850:	str	r1, [r7, r4]
   2d854:	str	r5, [r2, r3, lsl #2]
   2d858:	b	2d7c4 <__assert_fail@plt+0x1b0d8>
   2d85c:	mov	r0, r7
   2d860:	bl	2b510 <__assert_fail@plt+0x18e24>
   2d864:	cmp	r0, #0
   2d868:	bne	2d7e8 <__assert_fail@plt+0x1b0fc>
   2d86c:	b	2d7c0 <__assert_fail@plt+0x1b0d4>
   2d870:	ldr	r3, [r1, #4]
   2d874:	cmp	r3, #0
   2d878:	str	r3, [r0, #4]
   2d87c:	ble	2d8d0 <__assert_fail@plt+0x1b1e4>
   2d880:	push	{r4, r5, r6, lr}
   2d884:	mov	r4, r0
   2d888:	lsl	r0, r3, #2
   2d88c:	mov	r5, r1
   2d890:	str	r3, [r4]
   2d894:	bl	2a340 <__assert_fail@plt+0x17c54>
   2d898:	cmp	r0, #0
   2d89c:	mov	r3, r0
   2d8a0:	str	r0, [r4, #8]
   2d8a4:	bne	2d8b8 <__assert_fail@plt+0x1b1cc>
   2d8a8:	mov	r0, #12
   2d8ac:	str	r3, [r4]
   2d8b0:	str	r3, [r4, #4]
   2d8b4:	pop	{r4, r5, r6, pc}
   2d8b8:	ldr	r2, [r5, #4]
   2d8bc:	ldr	r1, [r5, #8]
   2d8c0:	lsl	r2, r2, #2
   2d8c4:	bl	120f8 <memcpy@plt>
   2d8c8:	mov	r0, #0
   2d8cc:	pop	{r4, r5, r6, pc}
   2d8d0:	mov	r3, #0
   2d8d4:	str	r3, [r0]
   2d8d8:	str	r3, [r0, #4]
   2d8dc:	str	r3, [r0, #8]
   2d8e0:	mov	r0, r3
   2d8e4:	bx	lr
   2d8e8:	cmp	r1, #0
   2d8ec:	beq	2d990 <__assert_fail@plt+0x1b2a4>
   2d8f0:	ldr	r3, [r1, #4]
   2d8f4:	cmp	r2, #0
   2d8f8:	cmpne	r3, #0
   2d8fc:	ble	2d984 <__assert_fail@plt+0x1b298>
   2d900:	ldr	ip, [r2, #4]
   2d904:	cmp	ip, #0
   2d908:	ble	2d98c <__assert_fail@plt+0x1b2a0>
   2d90c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d910:	mov	r7, r0
   2d914:	add	r0, r3, ip
   2d918:	mov	r9, r1
   2d91c:	mov	r8, r2
   2d920:	str	r0, [r7]
   2d924:	lsl	r0, r0, #2
   2d928:	bl	2a340 <__assert_fail@plt+0x17c54>
   2d92c:	cmp	r0, #0
   2d930:	mov	lr, r0
   2d934:	str	r0, [r7, #8]
   2d938:	beq	2d9f0 <__assert_fail@plt+0x1b304>
   2d93c:	ldr	r5, [r8, #4]
   2d940:	mov	ip, #0
   2d944:	mov	r3, ip
   2d948:	mov	r6, ip
   2d94c:	ldr	r2, [r9, #4]
   2d950:	cmp	r2, r6
   2d954:	mov	r4, ip
   2d958:	ble	2d9f8 <__assert_fail@plt+0x1b30c>
   2d95c:	ldr	sl, [r9, #8]
   2d960:	cmp	r5, r3
   2d964:	add	r0, lr, ip, lsl #2
   2d968:	add	r1, sl, r6, lsl #2
   2d96c:	bgt	2d9c0 <__assert_fail@plt+0x1b2d4>
   2d970:	sub	r6, r2, r6
   2d974:	lsl	r2, r6, #2
   2d978:	add	r4, r4, r6
   2d97c:	bl	120f8 <memcpy@plt>
   2d980:	b	2da1c <__assert_fail@plt+0x1b330>
   2d984:	cmp	r3, #0
   2d988:	ble	2d990 <__assert_fail@plt+0x1b2a4>
   2d98c:	b	2d870 <__assert_fail@plt+0x1b184>
   2d990:	cmp	r2, #0
   2d994:	beq	2d9a8 <__assert_fail@plt+0x1b2bc>
   2d998:	ldr	r3, [r2, #4]
   2d99c:	cmp	r3, #0
   2d9a0:	movgt	r1, r2
   2d9a4:	bgt	2d98c <__assert_fail@plt+0x1b2a0>
   2d9a8:	mov	r3, #0
   2d9ac:	str	r3, [r0]
   2d9b0:	str	r3, [r0, #4]
   2d9b4:	str	r3, [r0, #8]
   2d9b8:	mov	r0, r3
   2d9bc:	bx	lr
   2d9c0:	ldr	r0, [r8, #8]
   2d9c4:	ldr	r1, [sl, r6, lsl #2]
   2d9c8:	ldr	r0, [r0, r3, lsl #2]
   2d9cc:	cmp	r1, r0
   2d9d0:	addgt	r3, r3, #1
   2d9d4:	strgt	r0, [lr, ip, lsl #2]
   2d9d8:	bgt	2d9e8 <__assert_fail@plt+0x1b2fc>
   2d9dc:	addeq	r3, r3, #1
   2d9e0:	add	r6, r6, #1
   2d9e4:	str	r1, [lr, ip, lsl #2]
   2d9e8:	add	ip, ip, #1
   2d9ec:	b	2d950 <__assert_fail@plt+0x1b264>
   2d9f0:	mov	r0, #12
   2d9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d9f8:	cmp	r5, r3
   2d9fc:	ble	2da1c <__assert_fail@plt+0x1b330>
   2da00:	ldr	r1, [r8, #8]
   2da04:	sub	r5, r5, r3
   2da08:	add	r0, lr, r4, lsl #2
   2da0c:	lsl	r2, r5, #2
   2da10:	add	r4, r4, r5
   2da14:	add	r1, r1, r3, lsl #2
   2da18:	bl	120f8 <memcpy@plt>
   2da1c:	mov	r0, #0
   2da20:	str	r4, [r7, #4]
   2da24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2da28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da2c:	sub	sp, sp, #20
   2da30:	ldr	r4, [r2, #4]
   2da34:	cmp	r4, #0
   2da38:	addne	r9, r4, r3
   2da3c:	movne	ip, #0
   2da40:	streq	r4, [r0]
   2da44:	bne	2da64 <__assert_fail@plt+0x1b378>
   2da48:	mov	r0, r4
   2da4c:	add	sp, sp, #20
   2da50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2da54:	ldr	lr, [r2, #8]
   2da58:	ldr	lr, [lr, ip, lsl #2]
   2da5c:	add	ip, ip, #1
   2da60:	add	r9, r9, lr
   2da64:	cmp	r4, ip
   2da68:	bgt	2da54 <__assert_fail@plt+0x1b368>
   2da6c:	mov	r5, r3
   2da70:	ldr	r3, [r1, #68]	; 0x44
   2da74:	mov	r6, r2
   2da78:	mov	r8, r1
   2da7c:	mov	r7, #0
   2da80:	str	r0, [sp, #8]
   2da84:	and	r2, r9, r3
   2da88:	mov	r3, #12
   2da8c:	mul	r3, r3, r2
   2da90:	ldr	r2, [r1, #32]
   2da94:	ldr	fp, [r2, r3]
   2da98:	add	sl, r2, r3
   2da9c:	cmp	fp, r7
   2daa0:	bgt	2daec <__assert_fail@plt+0x1b400>
   2daa4:	mov	r1, #1
   2daa8:	mov	r0, #56	; 0x38
   2daac:	bl	27fbc <__assert_fail@plt+0x158d0>
   2dab0:	subs	r4, r0, #0
   2dab4:	beq	2dad8 <__assert_fail@plt+0x1b3ec>
   2dab8:	add	sl, r4, #4
   2dabc:	mov	r1, r6
   2dac0:	mov	r0, sl
   2dac4:	bl	2d870 <__assert_fail@plt+0x1b184>
   2dac8:	subs	r3, r0, #0
   2dacc:	beq	2db2c <__assert_fail@plt+0x1b440>
   2dad0:	mov	r0, r4
   2dad4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2dad8:	ldr	r2, [sp, #8]
   2dadc:	mov	r3, #12
   2dae0:	mov	r4, #0
   2dae4:	str	r3, [r2]
   2dae8:	b	2da48 <__assert_fail@plt+0x1b35c>
   2daec:	ldr	r3, [sl, #8]
   2daf0:	ldr	r4, [r3, r7, lsl #2]
   2daf4:	ldr	r3, [r4]
   2daf8:	cmp	r3, r9
   2dafc:	bne	2db24 <__assert_fail@plt+0x1b438>
   2db00:	ldrb	r3, [r4, #52]	; 0x34
   2db04:	and	r3, r3, #15
   2db08:	cmp	r3, r5
   2db0c:	bne	2db24 <__assert_fail@plt+0x1b438>
   2db10:	mov	r1, r6
   2db14:	ldr	r0, [r4, #40]	; 0x28
   2db18:	bl	2ae5c <__assert_fail@plt+0x18770>
   2db1c:	cmp	r0, #0
   2db20:	bne	2da48 <__assert_fail@plt+0x1b35c>
   2db24:	add	r7, r7, #1
   2db28:	b	2da9c <__assert_fail@plt+0x1b3b0>
   2db2c:	ldrb	r2, [r4, #52]	; 0x34
   2db30:	mov	fp, r3
   2db34:	str	sl, [r4, #40]	; 0x28
   2db38:	bfi	r2, r5, #0, #4
   2db3c:	strb	r2, [r4, #52]	; 0x34
   2db40:	and	r2, r5, #4
   2db44:	str	r2, [sp]
   2db48:	and	r2, r5, #2
   2db4c:	and	r5, r5, #1
   2db50:	str	r2, [sp, #4]
   2db54:	ldr	r1, [r6, #4]
   2db58:	cmp	fp, r1
   2db5c:	blt	2db7c <__assert_fail@plt+0x1b490>
   2db60:	mov	r2, r9
   2db64:	mov	r1, r4
   2db68:	mov	r0, r8
   2db6c:	bl	2d790 <__assert_fail@plt+0x1b0a4>
   2db70:	cmp	r0, #0
   2db74:	beq	2da48 <__assert_fail@plt+0x1b35c>
   2db78:	b	2dc08 <__assert_fail@plt+0x1b51c>
   2db7c:	ldr	r1, [r6, #8]
   2db80:	ldr	r0, [r8]
   2db84:	ldr	r1, [r1, fp, lsl #2]
   2db88:	add	r0, r0, r1, lsl #3
   2db8c:	ldr	r7, [r0, #4]
   2db90:	ldrb	ip, [r0, #4]
   2db94:	ubfx	r7, r7, #8, #10
   2db98:	cmp	ip, #1
   2db9c:	cmpeq	r7, #0
   2dba0:	beq	2dc94 <__assert_fail@plt+0x1b5a8>
   2dba4:	ldrb	r1, [r4, #52]	; 0x34
   2dba8:	cmp	ip, #2
   2dbac:	ldrb	r0, [r0, #6]
   2dbb0:	ubfx	lr, r1, #5, #1
   2dbb4:	ubfx	r0, r0, #4, #1
   2dbb8:	orr	r0, lr, r0
   2dbbc:	bfi	r1, r0, #5, #1
   2dbc0:	strb	r1, [r4, #52]	; 0x34
   2dbc4:	uxtbeq	r1, r1
   2dbc8:	orreq	r1, r1, #16
   2dbcc:	beq	2dbe0 <__assert_fail@plt+0x1b4f4>
   2dbd0:	cmp	ip, #4
   2dbd4:	bne	2dbe4 <__assert_fail@plt+0x1b4f8>
   2dbd8:	ldrb	r1, [r4, #52]	; 0x34
   2dbdc:	orr	r1, r1, #64	; 0x40
   2dbe0:	strb	r1, [r4, #52]	; 0x34
   2dbe4:	cmp	r7, #0
   2dbe8:	beq	2dc94 <__assert_fail@plt+0x1b5a8>
   2dbec:	ldr	r1, [r4, #40]	; 0x28
   2dbf0:	cmp	sl, r1
   2dbf4:	bne	2dc34 <__assert_fail@plt+0x1b548>
   2dbf8:	mov	r0, #12
   2dbfc:	bl	2a340 <__assert_fail@plt+0x17c54>
   2dc00:	subs	r3, r0, #0
   2dc04:	bne	2dc14 <__assert_fail@plt+0x1b528>
   2dc08:	mov	r0, r4
   2dc0c:	bl	2c2bc <__assert_fail@plt+0x19bd0>
   2dc10:	b	2dad8 <__assert_fail@plt+0x1b3ec>
   2dc14:	mov	r1, r6
   2dc18:	str	r3, [r4, #40]	; 0x28
   2dc1c:	bl	2d870 <__assert_fail@plt+0x1b184>
   2dc20:	subs	r3, r0, #0
   2dc24:	bne	2dc08 <__assert_fail@plt+0x1b51c>
   2dc28:	ldrb	r1, [r4, #52]	; 0x34
   2dc2c:	orr	r1, r1, #128	; 0x80
   2dc30:	strb	r1, [r4, #52]	; 0x34
   2dc34:	tst	r7, #1
   2dc38:	beq	2dc44 <__assert_fail@plt+0x1b558>
   2dc3c:	cmp	r5, #0
   2dc40:	beq	2dc7c <__assert_fail@plt+0x1b590>
   2dc44:	tst	r7, #2
   2dc48:	beq	2dc54 <__assert_fail@plt+0x1b568>
   2dc4c:	cmp	r5, #0
   2dc50:	bne	2dc7c <__assert_fail@plt+0x1b590>
   2dc54:	tst	r7, #16
   2dc58:	beq	2dc68 <__assert_fail@plt+0x1b57c>
   2dc5c:	ldr	r2, [sp, #4]
   2dc60:	cmp	r2, #0
   2dc64:	beq	2dc7c <__assert_fail@plt+0x1b590>
   2dc68:	tst	r7, #64	; 0x40
   2dc6c:	beq	2dc94 <__assert_fail@plt+0x1b5a8>
   2dc70:	ldr	r2, [sp]
   2dc74:	cmp	r2, #0
   2dc78:	bne	2dc94 <__assert_fail@plt+0x1b5a8>
   2dc7c:	sub	r1, fp, r3
   2dc80:	mov	r0, sl
   2dc84:	str	r3, [sp, #12]
   2dc88:	bl	2d604 <__assert_fail@plt+0x1af18>
   2dc8c:	ldr	r3, [sp, #12]
   2dc90:	add	r3, r3, #1
   2dc94:	add	fp, fp, #1
   2dc98:	b	2db54 <__assert_fail@plt+0x1b468>
   2dc9c:	ldr	r3, [r1, #4]
   2dca0:	cmp	r3, #0
   2dca4:	beq	2ddf8 <__assert_fail@plt+0x1b70c>
   2dca8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dcac:	ldr	r4, [r2, #4]
   2dcb0:	cmp	r4, #0
   2dcb4:	beq	2dddc <__assert_fail@plt+0x1b6f0>
   2dcb8:	mov	r6, r2
   2dcbc:	ldr	r2, [r0, #4]
   2dcc0:	add	r3, r3, r4
   2dcc4:	mov	r7, r1
   2dcc8:	mov	r5, r0
   2dccc:	ldr	r4, [r0]
   2dcd0:	add	r2, r3, r2
   2dcd4:	cmp	r2, r4
   2dcd8:	ble	2dd00 <__assert_fail@plt+0x1b614>
   2dcdc:	add	r4, r3, r4
   2dce0:	ldr	r0, [r0, #8]
   2dce4:	lsl	r1, r4, #2
   2dce8:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2dcec:	cmp	r0, #0
   2dcf0:	moveq	r3, #12
   2dcf4:	beq	2dde0 <__assert_fail@plt+0x1b6f4>
   2dcf8:	str	r4, [r5]
   2dcfc:	str	r0, [r5, #8]
   2dd00:	ldr	r2, [r5, #4]
   2dd04:	ldmib	r7, {r3, r4}
   2dd08:	ldmib	r6, {r0, r8}
   2dd0c:	add	ip, r2, r3
   2dd10:	sub	r3, r3, #1
   2dd14:	sub	r2, r2, #1
   2dd18:	add	ip, ip, r0
   2dd1c:	sub	r0, r0, #1
   2dd20:	ldr	lr, [r8, r0, lsl #2]
   2dd24:	ldr	r1, [r4, r3, lsl #2]
   2dd28:	cmp	r1, lr
   2dd2c:	ldreq	lr, [r5, #8]
   2dd30:	beq	2dd44 <__assert_fail@plt+0x1b658>
   2dd34:	blt	2dd6c <__assert_fail@plt+0x1b680>
   2dd38:	subs	r3, r3, #1
   2dd3c:	b	2dd70 <__assert_fail@plt+0x1b684>
   2dd40:	sub	r2, r2, #1
   2dd44:	cmp	r2, #0
   2dd48:	blt	2dd5c <__assert_fail@plt+0x1b670>
   2dd4c:	ldr	r9, [lr, r2, lsl #2]
   2dd50:	cmp	r1, r9
   2dd54:	blt	2dd40 <__assert_fail@plt+0x1b654>
   2dd58:	beq	2dd64 <__assert_fail@plt+0x1b678>
   2dd5c:	sub	ip, ip, #1
   2dd60:	str	r1, [lr, ip, lsl #2]
   2dd64:	subs	r3, r3, #1
   2dd68:	bmi	2dd74 <__assert_fail@plt+0x1b688>
   2dd6c:	subs	r0, r0, #1
   2dd70:	bpl	2dd20 <__assert_fail@plt+0x1b634>
   2dd74:	ldr	r1, [r5, #4]
   2dd78:	ldr	r2, [r7, #4]
   2dd7c:	ldr	r0, [r6, #4]
   2dd80:	sub	r3, r1, #1
   2dd84:	add	r2, r1, r2
   2dd88:	add	r2, r2, r0
   2dd8c:	ldr	r0, [r5, #8]
   2dd90:	sub	lr, r2, #1
   2dd94:	sub	r2, r2, ip
   2dd98:	add	r1, r1, r2
   2dd9c:	cmp	r3, #0
   2dda0:	cmpge	r2, #0
   2dda4:	str	r1, [r5, #4]
   2dda8:	ble	2ddd0 <__assert_fail@plt+0x1b6e4>
   2ddac:	ldr	r5, [r0, lr, lsl #2]
   2ddb0:	add	r1, r3, r2
   2ddb4:	ldr	r4, [r0, r3, lsl #2]
   2ddb8:	cmp	r5, r4
   2ddbc:	ble	2dde8 <__assert_fail@plt+0x1b6fc>
   2ddc0:	subs	r2, r2, #1
   2ddc4:	sub	lr, lr, #1
   2ddc8:	str	r5, [r0, r1, lsl #2]
   2ddcc:	bne	2ddac <__assert_fail@plt+0x1b6c0>
   2ddd0:	lsl	r2, r2, #2
   2ddd4:	add	r1, r0, ip, lsl #2
   2ddd8:	bl	120f8 <memcpy@plt>
   2dddc:	mov	r3, #0
   2dde0:	mov	r0, r3
   2dde4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dde8:	subs	r3, r3, #1
   2ddec:	str	r4, [r0, r1, lsl #2]
   2ddf0:	bcs	2ddac <__assert_fail@plt+0x1b6c0>
   2ddf4:	b	2ddd0 <__assert_fail@plt+0x1b6e4>
   2ddf8:	mov	r0, r3
   2ddfc:	bx	lr
   2de00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de04:	mov	r9, #12
   2de08:	sub	sp, sp, #28
   2de0c:	mov	r4, #0
   2de10:	mov	r8, r0
   2de14:	mov	fp, r1
   2de18:	mov	r7, r2
   2de1c:	ldr	r5, [r0, #28]
   2de20:	str	r3, [sp]
   2de24:	str	r4, [sp, #12]
   2de28:	str	r4, [sp, #16]
   2de2c:	str	r4, [sp, #20]
   2de30:	mla	r5, r9, r1, r5
   2de34:	ldr	r3, [r5, #4]
   2de38:	cmp	r3, r4
   2de3c:	bgt	2de60 <__assert_fail@plt+0x1b774>
   2de40:	mov	r4, #0
   2de44:	ldr	r3, [r5, #4]
   2de48:	cmp	r3, r4
   2de4c:	bgt	2df3c <__assert_fail@plt+0x1b850>
   2de50:	ldr	r0, [sp, #20]
   2de54:	mov	r6, #0
   2de58:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2de5c:	b	2df28 <__assert_fail@plt+0x1b83c>
   2de60:	ldr	r3, [r5, #8]
   2de64:	ldr	r6, [r3, r4, lsl #2]
   2de68:	cmp	fp, r6
   2de6c:	beq	2df34 <__assert_fail@plt+0x1b848>
   2de70:	ldr	r3, [r8]
   2de74:	add	r3, r3, r6, lsl #3
   2de78:	ldrb	r3, [r3, #4]
   2de7c:	tst	r3, #8
   2de80:	beq	2df34 <__assert_fail@plt+0x1b848>
   2de84:	ldr	r3, [r8, #20]
   2de88:	mul	r6, r9, r6
   2de8c:	mov	r0, r5
   2de90:	add	r3, r3, r6
   2de94:	ldr	r1, [r3, #8]
   2de98:	ldr	r3, [r3, #4]
   2de9c:	ldr	r2, [r1]
   2dea0:	cmp	r3, #1
   2dea4:	ldrgt	sl, [r1, #4]
   2dea8:	mvnle	sl, #0
   2deac:	mov	r1, r2
   2deb0:	str	r2, [sp, #4]
   2deb4:	bl	2aed4 <__assert_fail@plt+0x187e8>
   2deb8:	cmp	r0, #0
   2debc:	bne	2ded8 <__assert_fail@plt+0x1b7ec>
   2dec0:	ldr	r2, [sp, #4]
   2dec4:	mov	r0, r7
   2dec8:	mov	r1, r2
   2decc:	bl	2aed4 <__assert_fail@plt+0x187e8>
   2ded0:	cmp	r0, #0
   2ded4:	bne	2df04 <__assert_fail@plt+0x1b818>
   2ded8:	cmp	sl, #0
   2dedc:	ble	2df34 <__assert_fail@plt+0x1b848>
   2dee0:	mov	r1, sl
   2dee4:	mov	r0, r5
   2dee8:	bl	2aed4 <__assert_fail@plt+0x187e8>
   2deec:	cmp	r0, #0
   2def0:	bne	2df34 <__assert_fail@plt+0x1b848>
   2def4:	mov	r0, r7
   2def8:	bl	2aed4 <__assert_fail@plt+0x187e8>
   2defc:	cmp	r0, #0
   2df00:	beq	2df34 <__assert_fail@plt+0x1b848>
   2df04:	ldr	r2, [r8, #28]
   2df08:	add	r0, sp, #12
   2df0c:	ldr	r1, [sp]
   2df10:	add	r2, r2, r6
   2df14:	bl	2dc9c <__assert_fail@plt+0x1b5b0>
   2df18:	subs	r6, r0, #0
   2df1c:	beq	2df34 <__assert_fail@plt+0x1b848>
   2df20:	ldr	r0, [sp, #20]
   2df24:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2df28:	mov	r0, r6
   2df2c:	add	sp, sp, #28
   2df30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2df34:	add	r4, r4, #1
   2df38:	b	2de34 <__assert_fail@plt+0x1b748>
   2df3c:	ldr	r3, [r5, #8]
   2df40:	add	r0, sp, #12
   2df44:	ldr	r6, [r3, r4, lsl #2]
   2df48:	mov	r1, r6
   2df4c:	bl	2aed4 <__assert_fail@plt+0x187e8>
   2df50:	cmp	r0, #0
   2df54:	bne	2df6c <__assert_fail@plt+0x1b880>
   2df58:	mov	r0, r7
   2df5c:	bl	2aed4 <__assert_fail@plt+0x187e8>
   2df60:	sub	r1, r0, #1
   2df64:	mov	r0, r7
   2df68:	bl	2d604 <__assert_fail@plt+0x1af18>
   2df6c:	add	r4, r4, #1
   2df70:	b	2de44 <__assert_fail@plt+0x1b758>
   2df74:	ldrb	r3, [r1, #24]
   2df78:	cmp	r3, #16
   2df7c:	bne	2df9c <__assert_fail@plt+0x1b8b0>
   2df80:	ldr	r3, [r1, #4]
   2df84:	mov	r0, #0
   2df88:	ldr	r2, [r3, #12]
   2df8c:	ldr	r3, [r3, #28]
   2df90:	str	r2, [r1, #12]
   2df94:	str	r3, [r1, #28]
   2df98:	bx	lr
   2df9c:	push	{r4, r5, r6, lr}
   2dfa0:	mov	r4, r1
   2dfa4:	add	r3, r1, #20
   2dfa8:	mov	r5, r0
   2dfac:	ldm	r3, {r1, r2}
   2dfb0:	str	r4, [r4, #12]
   2dfb4:	bl	2c0a4 <__assert_fail@plt+0x199b8>
   2dfb8:	cmn	r0, #1
   2dfbc:	str	r0, [r4, #28]
   2dfc0:	beq	2dff0 <__assert_fail@plt+0x1b904>
   2dfc4:	ldrb	r3, [r4, #24]
   2dfc8:	cmp	r3, #12
   2dfcc:	bne	2dfe8 <__assert_fail@plt+0x1b8fc>
   2dfd0:	ldr	r3, [r5]
   2dfd4:	ldr	r2, [r4, #20]
   2dfd8:	add	r0, r3, r0, lsl #3
   2dfdc:	ldr	r3, [r0, #4]
   2dfe0:	bfi	r3, r2, #8, #10
   2dfe4:	str	r3, [r0, #4]
   2dfe8:	mov	r0, #0
   2dfec:	pop	{r4, r5, r6, pc}
   2dff0:	mov	r0, #12
   2dff4:	pop	{r4, r5, r6, pc}
   2dff8:	ldr	r3, [r0]
   2dffc:	push	{r4, r5, r6, r7, r8, lr}
   2e000:	mov	r4, r0
   2e004:	cmp	r3, #0
   2e008:	movne	r5, #0
   2e00c:	bne	2e09c <__assert_fail@plt+0x1b9b0>
   2e010:	ldr	r0, [r4, #12]
   2e014:	mov	r5, #0
   2e018:	mov	r6, #12
   2e01c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e020:	ldr	r3, [r4, #8]
   2e024:	cmp	r3, r5
   2e028:	bhi	2e0ac <__assert_fail@plt+0x1b9c0>
   2e02c:	ldr	r0, [r4, #20]
   2e030:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e034:	ldr	r0, [r4, #24]
   2e038:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e03c:	ldr	r0, [r4, #28]
   2e040:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e044:	ldr	r0, [r4]
   2e048:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e04c:	ldr	r3, [r4, #32]
   2e050:	cmp	r3, #0
   2e054:	movne	r5, #0
   2e058:	movne	r8, #12
   2e05c:	bne	2e11c <__assert_fail@plt+0x1ba30>
   2e060:	ldr	r0, [r4, #32]
   2e064:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e068:	ldr	r3, [pc, #216]	; 2e148 <__assert_fail@plt+0x1ba5c>
   2e06c:	ldr	r0, [r4, #60]	; 0x3c
   2e070:	cmp	r0, r3
   2e074:	bne	2e140 <__assert_fail@plt+0x1ba54>
   2e078:	ldr	r0, [r4, #132]	; 0x84
   2e07c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e080:	mov	r0, r4
   2e084:	pop	{r4, r5, r6, r7, r8, lr}
   2e088:	b	284c4 <__assert_fail@plt+0x15dd8>
   2e08c:	ldr	r0, [r4]
   2e090:	add	r0, r0, r5, lsl #3
   2e094:	add	r5, r5, #1
   2e098:	bl	2c060 <__assert_fail@plt+0x19974>
   2e09c:	ldr	r3, [r4, #8]
   2e0a0:	cmp	r3, r5
   2e0a4:	bhi	2e08c <__assert_fail@plt+0x1b9a0>
   2e0a8:	b	2e010 <__assert_fail@plt+0x1b924>
   2e0ac:	ldr	r3, [r4, #24]
   2e0b0:	cmp	r3, #0
   2e0b4:	beq	2e0c4 <__assert_fail@plt+0x1b9d8>
   2e0b8:	mla	r3, r6, r5, r3
   2e0bc:	ldr	r0, [r3, #8]
   2e0c0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e0c4:	ldr	r3, [r4, #28]
   2e0c8:	cmp	r3, #0
   2e0cc:	beq	2e0dc <__assert_fail@plt+0x1b9f0>
   2e0d0:	mla	r3, r6, r5, r3
   2e0d4:	ldr	r0, [r3, #8]
   2e0d8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e0dc:	ldr	r3, [r4, #20]
   2e0e0:	cmp	r3, #0
   2e0e4:	beq	2e0f4 <__assert_fail@plt+0x1ba08>
   2e0e8:	mla	r3, r6, r5, r3
   2e0ec:	ldr	r0, [r3, #8]
   2e0f0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e0f4:	add	r5, r5, #1
   2e0f8:	b	2e020 <__assert_fail@plt+0x1b934>
   2e0fc:	mla	r6, r8, r5, r6
   2e100:	mov	r7, #0
   2e104:	ldr	r3, [r6]
   2e108:	ldr	r0, [r6, #8]
   2e10c:	cmp	r7, r3
   2e110:	blt	2e130 <__assert_fail@plt+0x1ba44>
   2e114:	add	r5, r5, #1
   2e118:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e11c:	ldr	r6, [r4, #32]
   2e120:	ldr	r3, [r4, #68]	; 0x44
   2e124:	cmp	r5, r3
   2e128:	bls	2e0fc <__assert_fail@plt+0x1ba10>
   2e12c:	b	2e060 <__assert_fail@plt+0x1b974>
   2e130:	ldr	r0, [r0, r7, lsl #2]
   2e134:	add	r7, r7, #1
   2e138:	bl	2c2bc <__assert_fail@plt+0x19bd0>
   2e13c:	b	2e104 <__assert_fail@plt+0x1ba18>
   2e140:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e144:	b	2e078 <__assert_fail@plt+0x1b98c>
   2e148:	andeq	ip, r3, ip, lsl #31
   2e14c:	push	{r4, r5, r6, r7, r8, lr}
   2e150:	subs	r4, r0, #0
   2e154:	movne	r5, #0
   2e158:	movne	r7, #24
   2e15c:	bne	2e18c <__assert_fail@plt+0x1baa0>
   2e160:	mov	r0, #0
   2e164:	pop	{r4, r5, r6, r7, r8, pc}
   2e168:	mul	r6, r7, r5
   2e16c:	add	r5, r5, #1
   2e170:	add	r0, r0, r6
   2e174:	ldr	r0, [r0, #20]
   2e178:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e17c:	ldr	r3, [r4, #8]
   2e180:	add	r3, r3, r6
   2e184:	ldr	r0, [r3, #8]
   2e188:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e18c:	ldr	r3, [r4]
   2e190:	ldr	r0, [r4, #8]
   2e194:	cmp	r5, r3
   2e198:	blt	2e168 <__assert_fail@plt+0x1ba7c>
   2e19c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e1a0:	b	2e160 <__assert_fail@plt+0x1ba74>
   2e1a4:	ldr	r3, [r0]
   2e1a8:	push	{r4, r5, r6, lr}
   2e1ac:	cmp	r3, #0
   2e1b0:	bne	2e1c4 <__assert_fail@plt+0x1bad8>
   2e1b4:	bl	2b878 <__assert_fail@plt+0x1918c>
   2e1b8:	clz	r0, r0
   2e1bc:	lsr	r0, r0, #5
   2e1c0:	pop	{r4, r5, r6, pc}
   2e1c4:	ldr	r2, [r0, #4]
   2e1c8:	mov	r4, r0
   2e1cc:	mov	r5, r1
   2e1d0:	ldr	r0, [r0, #8]
   2e1d4:	cmp	r2, #0
   2e1d8:	streq	r1, [r0]
   2e1dc:	beq	2e250 <__assert_fail@plt+0x1bb64>
   2e1e0:	cmp	r3, r2
   2e1e4:	bne	2e204 <__assert_fail@plt+0x1bb18>
   2e1e8:	lsl	r2, r3, #1
   2e1ec:	lsl	r1, r3, #3
   2e1f0:	str	r2, [r4]
   2e1f4:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2e1f8:	cmp	r0, #0
   2e1fc:	popeq	{r4, r5, r6, pc}
   2e200:	str	r0, [r4, #8]
   2e204:	ldr	r2, [r4, #4]
   2e208:	ldr	r1, [r4, #8]
   2e20c:	ldr	r3, [r1]
   2e210:	cmp	r5, r3
   2e214:	lsl	r3, r2, #2
   2e218:	add	r3, r1, r3
   2e21c:	blt	2e238 <__assert_fail@plt+0x1bb4c>
   2e220:	ldr	r0, [r3, #-4]
   2e224:	cmp	r5, r0
   2e228:	bge	2e24c <__assert_fail@plt+0x1bb60>
   2e22c:	sub	r2, r2, #1
   2e230:	str	r0, [r3], #-4
   2e234:	b	2e220 <__assert_fail@plt+0x1bb34>
   2e238:	mov	r0, r2
   2e23c:	cmp	r0, #0
   2e240:	bgt	2e264 <__assert_fail@plt+0x1bb78>
   2e244:	cmp	r2, #0
   2e248:	subge	r2, r2, r2
   2e24c:	str	r5, [r1, r2, lsl #2]
   2e250:	ldr	r3, [r4, #4]
   2e254:	mov	r0, #1
   2e258:	add	r3, r3, #1
   2e25c:	str	r3, [r4, #4]
   2e260:	pop	{r4, r5, r6, pc}
   2e264:	ldr	ip, [r3, #-4]
   2e268:	sub	r0, r0, #1
   2e26c:	str	ip, [r3], #-4
   2e270:	b	2e23c <__assert_fail@plt+0x1bb50>
   2e274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e278:	sub	sp, sp, #20
   2e27c:	mov	r4, r0
   2e280:	mov	r7, r1
   2e284:	mov	fp, r2
   2e288:	mov	r9, #12
   2e28c:	mov	sl, #0
   2e290:	ldr	r6, [sp, #56]	; 0x38
   2e294:	str	r3, [sp, #8]
   2e298:	ldr	ip, [r4]
   2e29c:	ldr	r0, [r4, #20]
   2e2a0:	add	r1, ip, r7, lsl #3
   2e2a4:	ldrb	lr, [r1, #4]
   2e2a8:	cmp	lr, #4
   2e2ac:	bne	2e324 <__assert_fail@plt+0x1bc38>
   2e2b0:	ldr	r1, [r4, #12]
   2e2b4:	mul	r8, r9, fp
   2e2b8:	mov	r2, r6
   2e2bc:	str	fp, [sp, #12]
   2e2c0:	add	r0, r0, r8
   2e2c4:	ldr	r5, [r1, r7, lsl #2]
   2e2c8:	str	sl, [r0, #4]
   2e2cc:	mov	r0, r4
   2e2d0:	mov	r1, r5
   2e2d4:	bl	2c248 <__assert_fail@plt+0x19b5c>
   2e2d8:	cmn	r0, #1
   2e2dc:	mov	fp, r0
   2e2e0:	ldr	r3, [sp, #12]
   2e2e4:	bne	2e2f8 <__assert_fail@plt+0x1bc0c>
   2e2e8:	mov	r3, #12
   2e2ec:	mov	r0, r3
   2e2f0:	add	sp, sp, #20
   2e2f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e2f8:	ldr	r1, [r4, #12]
   2e2fc:	ldr	r0, [r1, r7, lsl #2]
   2e300:	str	r0, [r1, r3, lsl #2]
   2e304:	ldr	r0, [r4, #20]
   2e308:	mov	r1, fp
   2e30c:	add	r0, r0, r8
   2e310:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   2e314:	cmp	r0, #0
   2e318:	beq	2e2e8 <__assert_fail@plt+0x1bbfc>
   2e31c:	mov	r7, r5
   2e320:	b	2e298 <__assert_fail@plt+0x1bbac>
   2e324:	mul	r3, r9, r7
   2e328:	add	lr, r0, r3
   2e32c:	str	r3, [sp, #12]
   2e330:	ldr	r3, [lr, #4]
   2e334:	cmp	r3, #0
   2e338:	bne	2e34c <__assert_fail@plt+0x1bc60>
   2e33c:	ldr	r1, [r4, #12]
   2e340:	ldr	r0, [r1, r7, lsl #2]
   2e344:	str	r0, [r1, fp, lsl #2]
   2e348:	b	2e2ec <__assert_fail@plt+0x1bc00>
   2e34c:	mul	r8, r9, fp
   2e350:	ldr	lr, [lr, #8]
   2e354:	cmp	r3, #1
   2e358:	ldrne	r1, [r4, #8]
   2e35c:	add	r0, r0, r8
   2e360:	ldr	r5, [lr]
   2e364:	str	sl, [r0, #4]
   2e368:	bne	2e3f0 <__assert_fail@plt+0x1bd04>
   2e36c:	ldr	r3, [sp, #8]
   2e370:	cmp	r7, fp
   2e374:	sub	r3, r7, r3
   2e378:	clz	r3, r3
   2e37c:	lsr	r3, r3, #5
   2e380:	moveq	r3, #0
   2e384:	cmp	r3, #0
   2e388:	beq	2e3a4 <__assert_fail@plt+0x1bcb8>
   2e38c:	mov	r1, r5
   2e390:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   2e394:	cmp	r0, #0
   2e398:	movne	r3, #0
   2e39c:	bne	2e2ec <__assert_fail@plt+0x1bc00>
   2e3a0:	b	2e2e8 <__assert_fail@plt+0x1bbfc>
   2e3a4:	ldr	r3, [r1, #4]
   2e3a8:	ubfx	r3, r3, #8, #10
   2e3ac:	orr	r6, r6, r3
   2e3b0:	mov	r2, r6
   2e3b4:	mov	r1, r5
   2e3b8:	mov	r0, r4
   2e3bc:	bl	2c248 <__assert_fail@plt+0x19b5c>
   2e3c0:	cmn	r0, #1
   2e3c4:	mov	fp, r0
   2e3c8:	bne	2e304 <__assert_fail@plt+0x1bc18>
   2e3cc:	b	2e2e8 <__assert_fail@plt+0x1bbfc>
   2e3d0:	ldr	r2, [r4, #16]
   2e3d4:	ldr	r2, [r2, r1, lsl #2]
   2e3d8:	cmp	r2, r5
   2e3dc:	bne	2e3f0 <__assert_fail@plt+0x1bd04>
   2e3e0:	ldr	r3, [r3, #4]
   2e3e4:	ubfx	r3, r3, #8, #10
   2e3e8:	cmp	r6, r3
   2e3ec:	beq	2e47c <__assert_fail@plt+0x1bd90>
   2e3f0:	sub	r1, r1, #1
   2e3f4:	add	r3, ip, r1, lsl #3
   2e3f8:	cmp	r1, #0
   2e3fc:	movle	r2, #0
   2e400:	movgt	r2, #1
   2e404:	ldrb	lr, [r3, #6]
   2e408:	ands	r2, r2, lr, lsr #2
   2e40c:	bne	2e3d0 <__assert_fail@plt+0x1bce4>
   2e410:	mov	r2, r6
   2e414:	mov	r1, r5
   2e418:	mov	r0, r4
   2e41c:	bl	2c248 <__assert_fail@plt+0x19b5c>
   2e420:	cmn	r0, #1
   2e424:	mov	r7, r0
   2e428:	beq	2e2e8 <__assert_fail@plt+0x1bbfc>
   2e42c:	ldr	r0, [r4, #20]
   2e430:	mov	r1, r7
   2e434:	add	r0, r0, r8
   2e438:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   2e43c:	cmp	r0, #0
   2e440:	beq	2e2e8 <__assert_fail@plt+0x1bbfc>
   2e444:	mov	r2, r7
   2e448:	mov	r1, r5
   2e44c:	str	r6, [sp]
   2e450:	mov	r0, r4
   2e454:	ldr	r3, [sp, #8]
   2e458:	bl	2e274 <__assert_fail@plt+0x1bb88>
   2e45c:	subs	r3, r0, #0
   2e460:	bne	2e2ec <__assert_fail@plt+0x1bc00>
   2e464:	ldr	r2, [sp, #12]
   2e468:	ldr	r3, [r4, #20]
   2e46c:	add	r3, r3, r2
   2e470:	ldr	r3, [r3, #8]
   2e474:	ldr	r5, [r3, #4]
   2e478:	b	2e3b0 <__assert_fail@plt+0x1bcc4>
   2e47c:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   2e480:	cmp	r0, #0
   2e484:	bne	2e464 <__assert_fail@plt+0x1bd78>
   2e488:	b	2e2e8 <__assert_fail@plt+0x1bbfc>
   2e48c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2e490:	mov	r6, r0
   2e494:	mov	r5, r1
   2e498:	mov	r4, r2
   2e49c:	mov	r8, r3
   2e4a0:	mov	r9, #12
   2e4a4:	ldr	r7, [sp, #40]	; 0x28
   2e4a8:	mov	r1, r4
   2e4ac:	mov	r0, r5
   2e4b0:	bl	2aed4 <__assert_fail@plt+0x187e8>
   2e4b4:	cmp	r0, #0
   2e4b8:	beq	2e4c4 <__assert_fail@plt+0x1bdd8>
   2e4bc:	mov	r0, #0
   2e4c0:	b	2e504 <__assert_fail@plt+0x1be18>
   2e4c4:	ldr	r3, [r6]
   2e4c8:	add	r2, r3, r4, lsl #3
   2e4cc:	ldrb	r2, [r2, #4]
   2e4d0:	cmp	r2, r7
   2e4d4:	bne	2e50c <__assert_fail@plt+0x1be20>
   2e4d8:	ldr	r3, [r3, r4, lsl #3]
   2e4dc:	cmp	r3, r8
   2e4e0:	bne	2e50c <__assert_fail@plt+0x1be20>
   2e4e4:	cmp	r7, #9
   2e4e8:	bne	2e4bc <__assert_fail@plt+0x1bdd0>
   2e4ec:	mov	r1, r4
   2e4f0:	mov	r0, r5
   2e4f4:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   2e4f8:	cmp	r0, #0
   2e4fc:	bne	2e4bc <__assert_fail@plt+0x1bdd0>
   2e500:	mov	r0, #12
   2e504:	add	sp, sp, #12
   2e508:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e50c:	mov	r1, r4
   2e510:	mov	r0, r5
   2e514:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   2e518:	cmp	r0, #0
   2e51c:	beq	2e500 <__assert_fail@plt+0x1be14>
   2e520:	ldr	r3, [r6, #20]
   2e524:	mul	r4, r9, r4
   2e528:	add	r3, r3, r4
   2e52c:	ldr	r2, [r3, #4]
   2e530:	cmp	r2, #0
   2e534:	beq	2e4bc <__assert_fail@plt+0x1bdd0>
   2e538:	cmp	r2, #2
   2e53c:	beq	2e554 <__assert_fail@plt+0x1be68>
   2e540:	ldr	r2, [r6, #20]
   2e544:	add	r4, r2, r4
   2e548:	ldr	r3, [r4, #8]
   2e54c:	ldr	r4, [r3]
   2e550:	b	2e4a8 <__assert_fail@plt+0x1bdbc>
   2e554:	ldr	r2, [r3, #8]
   2e558:	mov	r1, r5
   2e55c:	mov	r0, r6
   2e560:	mov	r3, r8
   2e564:	str	r7, [sp]
   2e568:	ldr	r2, [r2, #4]
   2e56c:	bl	2e48c <__assert_fail@plt+0x1bda0>
   2e570:	cmp	r0, #0
   2e574:	beq	2e540 <__assert_fail@plt+0x1be54>
   2e578:	b	2e504 <__assert_fail@plt+0x1be18>
   2e57c:	push	{r4, r5, r6, r7, r8, lr}
   2e580:	subs	r7, r1, #0
   2e584:	bne	2e590 <__assert_fail@plt+0x1bea4>
   2e588:	mov	r5, #0
   2e58c:	b	2e604 <__assert_fail@plt+0x1bf18>
   2e590:	ldr	r3, [r7, #4]
   2e594:	cmp	r3, #0
   2e598:	beq	2e588 <__assert_fail@plt+0x1be9c>
   2e59c:	ldm	r0, {r1, r2}
   2e5a0:	mov	r4, r0
   2e5a4:	add	r2, r2, r3, lsl #1
   2e5a8:	cmp	r1, r2
   2e5ac:	bge	2e5d8 <__assert_fail@plt+0x1beec>
   2e5b0:	add	r1, r3, r1
   2e5b4:	ldr	r0, [r0, #8]
   2e5b8:	lsl	r5, r1, #1
   2e5bc:	lsl	r1, r1, #3
   2e5c0:	bl	2acc4 <__assert_fail@plt+0x185d8>
   2e5c4:	cmp	r0, #0
   2e5c8:	moveq	r5, #12
   2e5cc:	beq	2e604 <__assert_fail@plt+0x1bf18>
   2e5d0:	str	r5, [r4]
   2e5d4:	str	r0, [r4, #8]
   2e5d8:	ldr	r5, [r4, #4]
   2e5dc:	ldr	r2, [r7, #4]
   2e5e0:	cmp	r5, #0
   2e5e4:	addne	r6, r5, r2, lsl #1
   2e5e8:	bne	2e624 <__assert_fail@plt+0x1bf38>
   2e5ec:	ldr	r1, [r7, #8]
   2e5f0:	str	r2, [r4, #4]
   2e5f4:	ldr	r2, [r7, #4]
   2e5f8:	ldr	r0, [r4, #8]
   2e5fc:	lsl	r2, r2, #2
   2e600:	bl	120f8 <memcpy@plt>
   2e604:	mov	r0, r5
   2e608:	pop	{r4, r5, r6, r7, r8, pc}
   2e60c:	ldr	r3, [r4, #8]
   2e610:	ldr	r1, [r7, #8]
   2e614:	ldr	r0, [r3, r5, lsl #2]
   2e618:	ldr	r1, [r1, r2, lsl #2]
   2e61c:	cmp	r0, r1
   2e620:	bne	2e630 <__assert_fail@plt+0x1bf44>
   2e624:	sub	r2, r2, #1
   2e628:	sub	r5, r5, #1
   2e62c:	b	2e640 <__assert_fail@plt+0x1bf54>
   2e630:	bge	2e628 <__assert_fail@plt+0x1bf3c>
   2e634:	sub	r6, r6, #1
   2e638:	sub	r2, r2, #1
   2e63c:	str	r1, [r3, r6, lsl #2]
   2e640:	cmp	r2, #0
   2e644:	cmpge	r5, #0
   2e648:	bge	2e60c <__assert_fail@plt+0x1bf20>
   2e64c:	cmp	r2, #0
   2e650:	blt	2e670 <__assert_fail@plt+0x1bf84>
   2e654:	ldr	r0, [r4, #8]
   2e658:	add	r2, r2, #1
   2e65c:	sub	r6, r6, r2
   2e660:	lsl	r2, r2, #2
   2e664:	ldr	r1, [r7, #8]
   2e668:	add	r0, r0, r6, lsl #2
   2e66c:	bl	120f8 <memcpy@plt>
   2e670:	ldr	r1, [r4, #4]
   2e674:	ldr	r2, [r7, #4]
   2e678:	add	r2, r1, r2, lsl #1
   2e67c:	sub	ip, r2, #1
   2e680:	subs	r2, r2, r6
   2e684:	beq	2e588 <__assert_fail@plt+0x1be9c>
   2e688:	ldr	r0, [r4, #8]
   2e68c:	sub	r3, r1, #1
   2e690:	add	r1, r1, r2
   2e694:	str	r1, [r4, #4]
   2e698:	ldr	r4, [r0, ip, lsl #2]
   2e69c:	add	r1, r3, r2
   2e6a0:	ldr	lr, [r0, r3, lsl #2]
   2e6a4:	cmp	r4, lr
   2e6a8:	ble	2e6c0 <__assert_fail@plt+0x1bfd4>
   2e6ac:	subs	r2, r2, #1
   2e6b0:	sub	ip, ip, #1
   2e6b4:	str	r4, [r0, r1, lsl #2]
   2e6b8:	bne	2e698 <__assert_fail@plt+0x1bfac>
   2e6bc:	b	2e588 <__assert_fail@plt+0x1be9c>
   2e6c0:	subs	r3, r3, #1
   2e6c4:	str	lr, [r0, r1, lsl #2]
   2e6c8:	bpl	2e698 <__assert_fail@plt+0x1bfac>
   2e6cc:	lsl	r2, r2, #2
   2e6d0:	add	r1, r0, r6, lsl #2
   2e6d4:	bl	120f8 <memcpy@plt>
   2e6d8:	b	2e588 <__assert_fail@plt+0x1be9c>
   2e6dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6e0:	sub	sp, sp, #44	; 0x2c
   2e6e4:	mov	r6, #12
   2e6e8:	mov	r4, r1
   2e6ec:	add	r5, sp, #16
   2e6f0:	mul	r6, r6, r2
   2e6f4:	mov	r7, r2
   2e6f8:	str	r0, [sp, #8]
   2e6fc:	mov	r0, r5
   2e700:	str	r3, [sp, #12]
   2e704:	ldr	r3, [r1, #20]
   2e708:	add	r3, r3, r6
   2e70c:	ldr	r1, [r3, #4]
   2e710:	add	r1, r1, #1
   2e714:	bl	2b8b8 <__assert_fail@plt+0x191cc>
   2e718:	subs	r9, r0, #0
   2e71c:	bne	2e84c <__assert_fail@plt+0x1c160>
   2e720:	ldr	r3, [sp, #20]
   2e724:	lsl	r8, r7, #3
   2e728:	ldr	r1, [pc, #404]	; 2e8c4 <__assert_fail@plt+0x1c1d8>
   2e72c:	add	r2, r3, #1
   2e730:	str	r2, [sp, #20]
   2e734:	ldr	r2, [sp, #24]
   2e738:	str	r7, [r2, r3, lsl #2]
   2e73c:	mvn	r2, #0
   2e740:	ldr	r3, [r4, #24]
   2e744:	add	r3, r3, r6
   2e748:	str	r2, [r3, #4]
   2e74c:	ldr	r2, [r4]
   2e750:	add	r3, r2, r8
   2e754:	ldr	r3, [r3, #4]
   2e758:	and	r1, r1, r3
   2e75c:	cmp	r1, #0
   2e760:	bne	2e78c <__assert_fail@plt+0x1c0a0>
   2e764:	ldr	r3, [r4]
   2e768:	add	r8, r3, r8
   2e76c:	ldrb	r3, [r8, #4]
   2e770:	tst	r3, #8
   2e774:	bne	2e8b4 <__assert_fail@plt+0x1c1c8>
   2e778:	ldr	r3, [r4, #24]
   2e77c:	ldm	r5, {r0, r1, r2}
   2e780:	add	r6, r3, r6
   2e784:	stm	r6, {r0, r1, r2}
   2e788:	b	2e840 <__assert_fail@plt+0x1c154>
   2e78c:	ldr	r1, [r4, #20]
   2e790:	add	r1, r1, r6
   2e794:	ldr	r0, [r1, #4]
   2e798:	cmp	r0, #0
   2e79c:	beq	2e764 <__assert_fail@plt+0x1c078>
   2e7a0:	ldr	r1, [r1, #8]
   2e7a4:	ldr	r1, [r1]
   2e7a8:	add	r2, r2, r1, lsl #3
   2e7ac:	ldrb	r2, [r2, #6]
   2e7b0:	tst	r2, #4
   2e7b4:	bne	2e764 <__assert_fail@plt+0x1c078>
   2e7b8:	ubfx	r3, r3, #8, #10
   2e7bc:	mov	r0, r4
   2e7c0:	mov	r2, r7
   2e7c4:	mov	r1, r7
   2e7c8:	str	r3, [sp]
   2e7cc:	mov	r3, r7
   2e7d0:	bl	2e274 <__assert_fail@plt+0x1bb88>
   2e7d4:	cmp	r0, #0
   2e7d8:	beq	2e764 <__assert_fail@plt+0x1c078>
   2e7dc:	mov	r9, r0
   2e7e0:	b	2e84c <__assert_fail@plt+0x1c160>
   2e7e4:	ldr	r3, [r3, #8]
   2e7e8:	ldr	r2, [r3, r7, lsl #2]
   2e7ec:	mov	r3, #12
   2e7f0:	mul	fp, r3, r2
   2e7f4:	add	r1, r1, fp
   2e7f8:	ldr	r3, [r1, #4]
   2e7fc:	cmn	r3, #1
   2e800:	bne	2e858 <__assert_fail@plt+0x1c16c>
   2e804:	mov	sl, #1
   2e808:	add	r7, r7, #1
   2e80c:	ldr	r3, [r4, #20]
   2e810:	ldr	r1, [r4, #24]
   2e814:	add	r3, r3, r6
   2e818:	ldr	r2, [r3, #4]
   2e81c:	cmp	r2, r7
   2e820:	bgt	2e7e4 <__assert_fail@plt+0x1c0f8>
   2e824:	ldr	r3, [sp, #12]
   2e828:	add	r1, r1, r6
   2e82c:	eor	r3, r3, #1
   2e830:	tst	sl, r3
   2e834:	movne	r3, #0
   2e838:	strne	r3, [r1, #4]
   2e83c:	beq	2e778 <__assert_fail@plt+0x1c08c>
   2e840:	ldm	r5, {r0, r1, r2}
   2e844:	ldr	r3, [sp, #8]
   2e848:	stm	r3, {r0, r1, r2}
   2e84c:	mov	r0, r9
   2e850:	add	sp, sp, #44	; 0x2c
   2e854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e858:	cmp	r3, #0
   2e85c:	bne	2e8a8 <__assert_fail@plt+0x1c1bc>
   2e860:	mov	r1, r4
   2e864:	mov	r0, r8
   2e868:	bl	2e6dc <__assert_fail@plt+0x1bff0>
   2e86c:	cmp	r0, #0
   2e870:	bne	2e7dc <__assert_fail@plt+0x1c0f0>
   2e874:	mov	r1, r8
   2e878:	mov	r0, r5
   2e87c:	bl	2e57c <__assert_fail@plt+0x1be90>
   2e880:	cmp	r0, #0
   2e884:	bne	2e7dc <__assert_fail@plt+0x1c0f0>
   2e888:	ldr	r3, [r4, #24]
   2e88c:	add	fp, r3, fp
   2e890:	ldr	r3, [fp, #4]
   2e894:	cmp	r3, #0
   2e898:	bne	2e808 <__assert_fail@plt+0x1c11c>
   2e89c:	ldr	r0, [sp, #36]	; 0x24
   2e8a0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2e8a4:	b	2e804 <__assert_fail@plt+0x1c118>
   2e8a8:	ldm	r1, {r0, r1, r2}
   2e8ac:	stm	r8, {r0, r1, r2}
   2e8b0:	b	2e874 <__assert_fail@plt+0x1c188>
   2e8b4:	mov	r7, #0
   2e8b8:	add	r8, sp, #28
   2e8bc:	mov	sl, r7
   2e8c0:	b	2e80c <__assert_fail@plt+0x1c120>
   2e8c4:	andeq	pc, r3, r0, lsl #30
   2e8c8:	cmp	r1, #0
   2e8cc:	push	{r4, r5, r6, lr}
   2e8d0:	mov	r4, r0
   2e8d4:	bge	2e8e0 <__assert_fail@plt+0x1c1f4>
   2e8d8:	ldr	r0, [r4, #60]	; 0x3c
   2e8dc:	pop	{r4, r5, r6, pc}
   2e8e0:	ldr	r3, [r0, #48]	; 0x30
   2e8e4:	cmp	r3, r1
   2e8e8:	bne	2e8fc <__assert_fail@plt+0x1c210>
   2e8ec:	tst	r2, #2
   2e8f0:	movne	r0, #8
   2e8f4:	moveq	r0, #10
   2e8f8:	pop	{r4, r5, r6, pc}
   2e8fc:	ldr	r3, [r0, #80]	; 0x50
   2e900:	cmp	r3, #1
   2e904:	ldrgt	r3, [r0, #8]
   2e908:	bgt	2e93c <__assert_fail@plt+0x1c250>
   2e90c:	ldr	r3, [r0, #4]
   2e910:	ldr	r0, [r0, #68]	; 0x44
   2e914:	ldrb	r2, [r3, r1]
   2e918:	mov	r1, r2
   2e91c:	bl	2ad68 <__assert_fail@plt+0x1867c>
   2e920:	cmp	r0, #0
   2e924:	bne	2e9a0 <__assert_fail@plt+0x1c2b4>
   2e928:	cmp	r2, #10
   2e92c:	popne	{r4, r5, r6, pc}
   2e930:	b	2e984 <__assert_fail@plt+0x1c298>
   2e934:	subs	r1, r1, #1
   2e938:	bcc	2e8d8 <__assert_fail@plt+0x1c1ec>
   2e93c:	ldr	r5, [r3, r1, lsl #2]
   2e940:	cmn	r5, #1
   2e944:	beq	2e934 <__assert_fail@plt+0x1c248>
   2e948:	ldrb	r3, [r4, #78]	; 0x4e
   2e94c:	cmp	r3, #0
   2e950:	beq	2e97c <__assert_fail@plt+0x1c290>
   2e954:	mov	r0, r5
   2e958:	bl	12410 <iswalnum@plt>
   2e95c:	sub	r3, r5, #95	; 0x5f
   2e960:	cmp	r0, #0
   2e964:	clz	r3, r3
   2e968:	movne	r0, #1
   2e96c:	lsr	r3, r3, #5
   2e970:	moveq	r0, r3
   2e974:	cmp	r0, #0
   2e978:	bne	2e9a0 <__assert_fail@plt+0x1c2b4>
   2e97c:	cmp	r5, #10
   2e980:	bne	2e998 <__assert_fail@plt+0x1c2ac>
   2e984:	ldrb	r3, [r4, #77]	; 0x4d
   2e988:	cmp	r3, #0
   2e98c:	moveq	r0, #0
   2e990:	movne	r0, #2
   2e994:	pop	{r4, r5, r6, pc}
   2e998:	mov	r0, #0
   2e99c:	pop	{r4, r5, r6, pc}
   2e9a0:	mov	r0, #1
   2e9a4:	pop	{r4, r5, r6, pc}
   2e9a8:	ldr	r3, [r0, #4]
   2e9ac:	push	{r4, r5, r6, lr}
   2e9b0:	mov	r4, r1
   2e9b4:	mov	r5, r0
   2e9b8:	mov	r6, r2
   2e9bc:	ldrb	r1, [r3, r2]
   2e9c0:	ldrb	r3, [r4, #4]
   2e9c4:	sub	r3, r3, #1
   2e9c8:	cmp	r3, #6
   2e9cc:	ldrls	pc, [pc, r3, lsl #2]
   2e9d0:	b	2eab4 <__assert_fail@plt+0x1c3c8>
   2e9d4:	strdeq	lr, [r2], -r0
   2e9d8:			; <UNDEFINED> instruction: 0x0002eab4
   2e9dc:	andeq	lr, r2, r4, ror #20
   2e9e0:			; <UNDEFINED> instruction: 0x0002eab4
   2e9e4:	andeq	lr, r2, r0, lsl #21
   2e9e8:			; <UNDEFINED> instruction: 0x0002eab4
   2e9ec:	andeq	lr, r2, r8, ror sl
   2e9f0:	ldrb	r3, [r4]
   2e9f4:	cmp	r3, r1
   2e9f8:	bne	2eab4 <__assert_fail@plt+0x1c3c8>
   2e9fc:	ldr	r3, [pc, #192]	; 2eac4 <__assert_fail@plt+0x1c3d8>
   2ea00:	ldr	r4, [r4, #4]
   2ea04:	and	r3, r3, r4
   2ea08:	cmp	r3, #0
   2ea0c:	beq	2eabc <__assert_fail@plt+0x1c3d0>
   2ea10:	mov	r1, r6
   2ea14:	mov	r0, r5
   2ea18:	ldr	r2, [r5, #88]	; 0x58
   2ea1c:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   2ea20:	ubfx	r3, r4, #8, #10
   2ea24:	tst	r3, #4
   2ea28:	beq	2ea34 <__assert_fail@plt+0x1c348>
   2ea2c:	ands	r1, r0, #1
   2ea30:	beq	2eab4 <__assert_fail@plt+0x1c3c8>
   2ea34:	tst	r3, #8
   2ea38:	beq	2ea44 <__assert_fail@plt+0x1c358>
   2ea3c:	tst	r0, #1
   2ea40:	bne	2eab4 <__assert_fail@plt+0x1c3c8>
   2ea44:	tst	r3, #32
   2ea48:	beq	2ea54 <__assert_fail@plt+0x1c368>
   2ea4c:	ands	r1, r0, #2
   2ea50:	beq	2eab4 <__assert_fail@plt+0x1c3c8>
   2ea54:	tst	r3, #128	; 0x80
   2ea58:	beq	2eabc <__assert_fail@plt+0x1c3d0>
   2ea5c:	ubfx	r0, r0, #3, #1
   2ea60:	pop	{r4, r5, r6, pc}
   2ea64:	ldr	r0, [r4]
   2ea68:	bl	2ad68 <__assert_fail@plt+0x1867c>
   2ea6c:	cmp	r0, #0
   2ea70:	bne	2e9fc <__assert_fail@plt+0x1c310>
   2ea74:	pop	{r4, r5, r6, pc}
   2ea78:	tst	r1, #128	; 0x80
   2ea7c:	bne	2eab4 <__assert_fail@plt+0x1c3c8>
   2ea80:	cmp	r1, #10
   2ea84:	bne	2ea9c <__assert_fail@plt+0x1c3b0>
   2ea88:	ldr	r3, [r5, #84]	; 0x54
   2ea8c:	ldr	r0, [r3, #128]	; 0x80
   2ea90:	ands	r0, r0, #64	; 0x40
   2ea94:	bne	2e9fc <__assert_fail@plt+0x1c310>
   2ea98:	pop	{r4, r5, r6, pc}
   2ea9c:	cmp	r1, #0
   2eaa0:	bne	2e9fc <__assert_fail@plt+0x1c310>
   2eaa4:	ldr	r3, [r5, #84]	; 0x54
   2eaa8:	ldr	r3, [r3, #128]	; 0x80
   2eaac:	tst	r3, #128	; 0x80
   2eab0:	beq	2e9fc <__assert_fail@plt+0x1c310>
   2eab4:	mov	r0, #0
   2eab8:	pop	{r4, r5, r6, pc}
   2eabc:	mov	r0, #1
   2eac0:	pop	{r4, r5, r6, pc}
   2eac4:	andeq	pc, r3, r0, lsl #30
   2eac8:	push	{r4, r5, r6, r7, r8, lr}
   2eacc:	mov	r5, r1
   2ead0:	mov	r1, r2
   2ead4:	mov	r4, r0
   2ead8:	ldr	r2, [r0, #88]	; 0x58
   2eadc:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   2eae0:	ldr	lr, [r5, #8]
   2eae4:	mov	ip, #0
   2eae8:	and	r6, r0, #8
   2eaec:	and	r7, r0, #2
   2eaf0:	and	r1, r0, #1
   2eaf4:	cmp	lr, ip
   2eaf8:	bgt	2eb04 <__assert_fail@plt+0x1c418>
   2eafc:	mov	r0, #0
   2eb00:	pop	{r4, r5, r6, r7, r8, pc}
   2eb04:	ldr	r3, [r5, #12]
   2eb08:	ldr	r0, [r3, ip, lsl #2]
   2eb0c:	ldr	r3, [r4, #84]	; 0x54
   2eb10:	ldr	r2, [r3]
   2eb14:	add	r2, r2, r0, lsl #3
   2eb18:	ldr	r3, [r2, #4]
   2eb1c:	ldrb	r2, [r2, #4]
   2eb20:	ubfx	r3, r3, #8, #10
   2eb24:	cmp	r2, #2
   2eb28:	bne	2eb74 <__assert_fail@plt+0x1c488>
   2eb2c:	cmp	r3, #0
   2eb30:	popeq	{r4, r5, r6, r7, r8, pc}
   2eb34:	tst	r3, #4
   2eb38:	beq	2eb44 <__assert_fail@plt+0x1c458>
   2eb3c:	cmp	r1, #0
   2eb40:	beq	2eb74 <__assert_fail@plt+0x1c488>
   2eb44:	tst	r3, #8
   2eb48:	beq	2eb54 <__assert_fail@plt+0x1c468>
   2eb4c:	cmp	r1, #0
   2eb50:	bne	2eb74 <__assert_fail@plt+0x1c488>
   2eb54:	tst	r3, #32
   2eb58:	beq	2eb64 <__assert_fail@plt+0x1c478>
   2eb5c:	cmp	r7, #0
   2eb60:	beq	2eb74 <__assert_fail@plt+0x1c488>
   2eb64:	tst	r3, #128	; 0x80
   2eb68:	popeq	{r4, r5, r6, r7, r8, pc}
   2eb6c:	cmp	r6, #0
   2eb70:	popne	{r4, r5, r6, r7, r8, pc}
   2eb74:	add	ip, ip, #1
   2eb78:	b	2eaf4 <__assert_fail@plt+0x1c408>
   2eb7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eb80:	mov	r4, r0
   2eb84:	sub	sp, sp, #28
   2eb88:	mov	r6, r1
   2eb8c:	mov	sl, r2
   2eb90:	ldr	r5, [r0, #24]
   2eb94:	cmp	r5, r1
   2eb98:	suble	r5, r1, r5
   2eb9c:	ble	2ebfc <__assert_fail@plt+0x1c510>
   2eba0:	ldr	r3, [r0, #80]	; 0x50
   2eba4:	mov	r5, r1
   2eba8:	cmp	r3, #1
   2ebac:	movgt	r3, #0
   2ebb0:	movgt	r2, #0
   2ebb4:	strdgt	r2, [r0, #16]
   2ebb8:	tst	sl, #1
   2ebbc:	ldr	r3, [r0, #44]	; 0x2c
   2ebc0:	str	r3, [r0, #48]	; 0x30
   2ebc4:	ldr	r3, [r0, #52]	; 0x34
   2ebc8:	str	r3, [r0, #56]	; 0x38
   2ebcc:	mov	r3, #0
   2ebd0:	str	r3, [r0, #24]
   2ebd4:	str	r3, [r0, #28]
   2ebd8:	str	r3, [r0, #32]
   2ebdc:	strb	r3, [r0, #76]	; 0x4c
   2ebe0:	movne	r3, #4
   2ebe4:	moveq	r3, #6
   2ebe8:	str	r3, [r0, #60]	; 0x3c
   2ebec:	ldrb	r3, [r0, #75]	; 0x4b
   2ebf0:	cmp	r3, #0
   2ebf4:	ldreq	r3, [r0]
   2ebf8:	streq	r3, [r0, #4]
   2ebfc:	cmp	r5, #0
   2ec00:	beq	2ed00 <__assert_fail@plt+0x1c614>
   2ec04:	ldrb	r3, [r4, #76]	; 0x4c
   2ec08:	ldr	r2, [r4, #32]
   2ec0c:	ldr	r8, [r4, #28]
   2ec10:	cmp	r2, r5
   2ec14:	ble	2eea4 <__assert_fail@plt+0x1c7b8>
   2ec18:	cmp	r3, #0
   2ec1c:	beq	2ee34 <__assert_fail@plt+0x1c748>
   2ec20:	ldr	r9, [r4, #12]
   2ec24:	mov	r3, r8
   2ec28:	mov	r2, #0
   2ec2c:	add	r7, r2, r3
   2ec30:	add	r7, r7, r7, lsr #31
   2ec34:	asr	r7, r7, #1
   2ec38:	ldr	r1, [r9, r7, lsl #2]
   2ec3c:	cmp	r1, r5
   2ec40:	bgt	2ed4c <__assert_fail@plt+0x1c660>
   2ec44:	bge	2ec5c <__assert_fail@plt+0x1c570>
   2ec48:	add	r2, r7, #1
   2ec4c:	cmp	r2, r3
   2ec50:	blt	2ec2c <__assert_fail@plt+0x1c540>
   2ec54:	cmp	r1, r5
   2ec58:	addlt	r7, r7, #1
   2ec5c:	mov	r2, sl
   2ec60:	sub	r1, r7, #1
   2ec64:	mov	r0, r4
   2ec68:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   2ec6c:	sub	r3, r5, r7
   2ec70:	cmp	r5, r8
   2ec74:	str	r0, [r4, #60]	; 0x3c
   2ec78:	clz	r3, r3
   2ec7c:	lsr	r3, r3, #5
   2ec80:	movge	r3, #0
   2ec84:	cmp	r3, #0
   2ec88:	beq	2ed70 <__assert_fail@plt+0x1c684>
   2ec8c:	ldr	r3, [r9, r7, lsl #2]
   2ec90:	cmp	r3, r5
   2ec94:	bne	2ed70 <__assert_fail@plt+0x1c684>
   2ec98:	ldr	r0, [r4, #8]
   2ec9c:	lsl	r7, r5, #2
   2eca0:	sub	r2, r8, r5
   2eca4:	lsl	r2, r2, #2
   2eca8:	add	r1, r0, r7
   2ecac:	bl	1208c <memmove@plt>
   2ecb0:	ldr	r0, [r4, #4]
   2ecb4:	ldr	r2, [r4, #28]
   2ecb8:	add	r1, r0, r5
   2ecbc:	sub	r2, r2, r5
   2ecc0:	bl	1208c <memmove@plt>
   2ecc4:	ldr	r3, [r4, #28]
   2ecc8:	sub	r3, r3, r5
   2eccc:	str	r3, [r4, #28]
   2ecd0:	ldr	r3, [r4, #32]
   2ecd4:	sub	r3, r3, r5
   2ecd8:	str	r3, [r4, #32]
   2ecdc:	mov	r3, #0
   2ece0:	ldr	r2, [r4, #28]
   2ece4:	cmp	r2, r3
   2ece8:	bgt	2ed54 <__assert_fail@plt+0x1c668>
   2ecec:	ldrb	r3, [r4, #75]	; 0x4b
   2ecf0:	cmp	r3, #0
   2ecf4:	ldreq	r3, [r4, #4]
   2ecf8:	addeq	r3, r3, r5
   2ecfc:	streq	r3, [r4, #4]
   2ed00:	ldr	r3, [r4, #48]	; 0x30
   2ed04:	str	r6, [r4, #24]
   2ed08:	ldr	r2, [r4, #56]	; 0x38
   2ed0c:	sub	r3, r3, r5
   2ed10:	sub	r5, r2, r5
   2ed14:	ldr	r2, [r4, #80]	; 0x50
   2ed18:	str	r3, [r4, #48]	; 0x30
   2ed1c:	str	r5, [r4, #56]	; 0x38
   2ed20:	cmp	r2, #1
   2ed24:	ble	2f178 <__assert_fail@plt+0x1ca8c>
   2ed28:	ldrb	r3, [r4, #72]	; 0x48
   2ed2c:	mov	r0, r4
   2ed30:	cmp	r3, #0
   2ed34:	beq	2f168 <__assert_fail@plt+0x1ca7c>
   2ed38:	bl	2ba38 <__assert_fail@plt+0x1934c>
   2ed3c:	cmp	r0, #0
   2ed40:	beq	2f16c <__assert_fail@plt+0x1ca80>
   2ed44:	add	sp, sp, #28
   2ed48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed4c:	mov	r3, r7
   2ed50:	b	2ec4c <__assert_fail@plt+0x1c560>
   2ed54:	ldr	r1, [r4, #12]
   2ed58:	ldr	r2, [r1, r7]
   2ed5c:	add	r7, r7, #4
   2ed60:	sub	r2, r2, r5
   2ed64:	str	r2, [r1, r3, lsl #2]
   2ed68:	add	r3, r3, #1
   2ed6c:	b	2ece0 <__assert_fail@plt+0x1c5f4>
   2ed70:	ldr	r3, [r4, #44]	; 0x2c
   2ed74:	sub	r3, r3, r6
   2ed78:	add	r3, r3, r5
   2ed7c:	str	r3, [r4, #48]	; 0x30
   2ed80:	ldr	r3, [r4, #52]	; 0x34
   2ed84:	sub	r3, r3, r6
   2ed88:	add	r3, r3, r5
   2ed8c:	str	r3, [r4, #56]	; 0x38
   2ed90:	mov	r3, #0
   2ed94:	strb	r3, [r4, #76]	; 0x4c
   2ed98:	add	r3, r9, r7, lsl #2
   2ed9c:	cmp	r7, #0
   2eda0:	ble	2edb0 <__assert_fail@plt+0x1c6c4>
   2eda4:	ldr	r2, [r3, #-4]!
   2eda8:	cmp	r2, r5
   2edac:	beq	2ede0 <__assert_fail@plt+0x1c6f4>
   2edb0:	cmp	r7, r8
   2edb4:	blt	2ede8 <__assert_fail@plt+0x1c6fc>
   2edb8:	moveq	r3, #0
   2edbc:	streq	r3, [r4, #28]
   2edc0:	beq	2edd8 <__assert_fail@plt+0x1c6ec>
   2edc4:	ldr	r3, [r9, r7, lsl #2]
   2edc8:	sub	r3, r3, r5
   2edcc:	cmp	r3, #0
   2edd0:	str	r3, [r4, #28]
   2edd4:	bne	2ee28 <__assert_fail@plt+0x1c73c>
   2edd8:	ldr	r3, [r4, #28]
   2eddc:	b	2ee9c <__assert_fail@plt+0x1c7b0>
   2ede0:	sub	r7, r7, #1
   2ede4:	b	2ed9c <__assert_fail@plt+0x1c6b0>
   2ede8:	ldr	r3, [r4, #8]
   2edec:	ldr	r3, [r3, r7, lsl #2]
   2edf0:	cmn	r3, #1
   2edf4:	bne	2edc4 <__assert_fail@plt+0x1c6d8>
   2edf8:	add	r7, r7, #1
   2edfc:	b	2edb0 <__assert_fail@plt+0x1c6c4>
   2ee00:	ldr	r2, [r4, #8]
   2ee04:	str	r1, [r2, r3, lsl #2]
   2ee08:	add	r3, r3, #1
   2ee0c:	ldr	r2, [r4, #28]
   2ee10:	cmp	r2, r3
   2ee14:	bgt	2ee00 <__assert_fail@plt+0x1c714>
   2ee18:	mov	r1, #255	; 0xff
   2ee1c:	ldr	r0, [r4, #4]
   2ee20:	bl	12434 <memset@plt>
   2ee24:	b	2edd8 <__assert_fail@plt+0x1c6ec>
   2ee28:	mov	r3, #0
   2ee2c:	mvn	r1, #0
   2ee30:	b	2ee0c <__assert_fail@plt+0x1c720>
   2ee34:	mov	r2, sl
   2ee38:	sub	r1, r5, #1
   2ee3c:	mov	r0, r4
   2ee40:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   2ee44:	ldr	r3, [r4, #80]	; 0x50
   2ee48:	str	r0, [r4, #60]	; 0x3c
   2ee4c:	cmp	r3, #1
   2ee50:	ble	2ee68 <__assert_fail@plt+0x1c77c>
   2ee54:	ldr	r0, [r4, #8]
   2ee58:	sub	r2, r8, r5
   2ee5c:	lsl	r2, r2, #2
   2ee60:	add	r1, r0, r5, lsl #2
   2ee64:	bl	1208c <memmove@plt>
   2ee68:	ldrb	r3, [r4, #75]	; 0x4b
   2ee6c:	cmp	r3, #0
   2ee70:	beq	2ee88 <__assert_fail@plt+0x1c79c>
   2ee74:	ldr	r0, [r4, #4]
   2ee78:	ldr	r2, [r4, #28]
   2ee7c:	add	r1, r0, r5
   2ee80:	sub	r2, r2, r5
   2ee84:	bl	1208c <memmove@plt>
   2ee88:	ldr	r3, [r4, #28]
   2ee8c:	sub	r3, r3, r5
   2ee90:	str	r3, [r4, #28]
   2ee94:	ldr	r3, [r4, #32]
   2ee98:	sub	r3, r3, r5
   2ee9c:	str	r3, [r4, #32]
   2eea0:	b	2ecec <__assert_fail@plt+0x1c600>
   2eea4:	cmp	r3, #0
   2eea8:	beq	2eed4 <__assert_fail@plt+0x1c7e8>
   2eeac:	ldr	r3, [r4, #44]	; 0x2c
   2eeb0:	sub	r3, r3, r6
   2eeb4:	add	r3, r3, r5
   2eeb8:	str	r3, [r4, #48]	; 0x30
   2eebc:	ldr	r3, [r4, #52]	; 0x34
   2eec0:	sub	r3, r3, r6
   2eec4:	add	r3, r3, r5
   2eec8:	str	r3, [r4, #56]	; 0x38
   2eecc:	mov	r3, #0
   2eed0:	strb	r3, [r4, #76]	; 0x4c
   2eed4:	mov	r1, #0
   2eed8:	ldr	r7, [r4, #24]
   2eedc:	ldr	r3, [r4, #80]	; 0x50
   2eee0:	str	r1, [r4, #28]
   2eee4:	cmp	r3, #1
   2eee8:	ble	2f110 <__assert_fail@plt+0x1ca24>
   2eeec:	ldrb	r2, [r4, #73]	; 0x49
   2eef0:	cmp	r2, r1
   2eef4:	beq	2efc4 <__assert_fail@plt+0x1c8d8>
   2eef8:	ldr	r2, [r4]
   2eefc:	sub	r3, r5, r3
   2ef00:	add	r7, r2, r7
   2ef04:	add	r3, r7, r3
   2ef08:	cmp	r2, r3
   2ef0c:	movcs	r3, r2
   2ef10:	sub	r2, r5, #1
   2ef14:	add	r2, r7, r2
   2ef18:	cmp	r2, r3
   2ef1c:	mov	r9, r2
   2ef20:	bcc	2efc4 <__assert_fail@plt+0x1c8d8>
   2ef24:	mov	r2, r9
   2ef28:	ldrb	r1, [r2], #-1
   2ef2c:	and	r1, r1, #192	; 0xc0
   2ef30:	cmp	r1, #128	; 0x80
   2ef34:	beq	2ef18 <__assert_fail@plt+0x1c82c>
   2ef38:	ldr	r2, [r4, #48]	; 0x30
   2ef3c:	ldr	r0, [r4, #64]	; 0x40
   2ef40:	add	r2, r7, r2
   2ef44:	sub	r2, r2, r9
   2ef48:	cmp	r0, #0
   2ef4c:	moveq	ip, r9
   2ef50:	beq	2ef70 <__assert_fail@plt+0x1c884>
   2ef54:	cmp	r2, #6
   2ef58:	add	r1, sp, #8
   2ef5c:	movlt	r3, r2
   2ef60:	movge	r3, #6
   2ef64:	subs	r3, r3, #1
   2ef68:	bpl	2f01c <__assert_fail@plt+0x1c930>
   2ef6c:	mov	ip, r1
   2ef70:	mov	r0, #0
   2ef74:	mov	r1, #0
   2ef78:	add	r3, sp, #16
   2ef7c:	add	r7, r7, r5
   2ef80:	strd	r0, [sp, #16]
   2ef84:	mov	r1, ip
   2ef88:	add	r0, sp, #4
   2ef8c:	sub	r9, r7, r9
   2ef90:	bl	2a36c <__assert_fail@plt+0x17c80>
   2ef94:	cmp	r9, r0
   2ef98:	bhi	2efc4 <__assert_fail@plt+0x1c8d8>
   2ef9c:	cmn	r0, #3
   2efa0:	bhi	2efc4 <__assert_fail@plt+0x1c8d8>
   2efa4:	ldr	fp, [sp, #4]
   2efa8:	mov	r2, #0
   2efac:	mov	r3, #0
   2efb0:	sub	r0, r0, r9
   2efb4:	strd	r2, [r4, #16]
   2efb8:	str	r0, [r4, #28]
   2efbc:	cmn	fp, #1
   2efc0:	bne	2f094 <__assert_fail@plt+0x1c9a8>
   2efc4:	ldr	r7, [r4, #24]
   2efc8:	mvn	fp, #0
   2efcc:	add	r9, r4, #16
   2efd0:	ldr	r3, [r4, #32]
   2efd4:	add	r7, r7, r3
   2efd8:	cmp	r6, r7
   2efdc:	bgt	2f02c <__assert_fail@plt+0x1c940>
   2efe0:	sub	r7, r7, r6
   2efe4:	cmn	fp, #1
   2efe8:	str	r7, [r4, #28]
   2efec:	bne	2f094 <__assert_fail@plt+0x1c9a8>
   2eff0:	mov	r2, sl
   2eff4:	sub	r1, r8, #1
   2eff8:	mov	r0, r4
   2effc:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   2f000:	str	r0, [r4, #60]	; 0x3c
   2f004:	ldr	r3, [r4, #28]
   2f008:	cmp	r3, #0
   2f00c:	beq	2edd8 <__assert_fail@plt+0x1c6ec>
   2f010:	mov	r3, #0
   2f014:	mvn	r1, #0
   2f018:	b	2f0f4 <__assert_fail@plt+0x1ca08>
   2f01c:	ldrb	ip, [r9, r3]
   2f020:	ldrb	ip, [r0, ip]
   2f024:	strb	ip, [r1, r3]
   2f028:	b	2ef64 <__assert_fail@plt+0x1c878>
   2f02c:	ldm	r9, {r0, r1}
   2f030:	add	r3, sp, #16
   2f034:	ldr	fp, [r4, #44]	; 0x2c
   2f038:	stm	r3, {r0, r1}
   2f03c:	mov	r3, r9
   2f040:	add	r0, sp, #8
   2f044:	ldr	r1, [r4]
   2f048:	sub	fp, fp, r7
   2f04c:	mov	r2, fp
   2f050:	add	r1, r1, r7
   2f054:	bl	2a36c <__assert_fail@plt+0x17c80>
   2f058:	sub	r3, r0, #1
   2f05c:	cmn	r3, #4
   2f060:	ldrls	fp, [sp, #8]
   2f064:	bls	2f08c <__assert_fail@plt+0x1c9a0>
   2f068:	cmp	fp, #0
   2f06c:	cmpne	r0, #0
   2f070:	ldrne	r3, [r4]
   2f074:	moveq	fp, #0
   2f078:	ldrbne	fp, [r3, r7]
   2f07c:	add	r3, sp, #16
   2f080:	ldm	r3, {r0, r1}
   2f084:	stm	r9, {r0, r1}
   2f088:	mov	r0, #1
   2f08c:	add	r7, r7, r0
   2f090:	b	2efd8 <__assert_fail@plt+0x1c8ec>
   2f094:	ldrb	r3, [r4, #78]	; 0x4e
   2f098:	cmp	r3, #0
   2f09c:	beq	2f0c4 <__assert_fail@plt+0x1c9d8>
   2f0a0:	mov	r0, fp
   2f0a4:	bl	12410 <iswalnum@plt>
   2f0a8:	subs	r3, fp, #95	; 0x5f
   2f0ac:	movne	r3, #1
   2f0b0:	cmp	r0, #0
   2f0b4:	movne	r3, #0
   2f0b8:	cmp	r3, #0
   2f0bc:	moveq	r3, #1
   2f0c0:	beq	2f0e0 <__assert_fail@plt+0x1c9f4>
   2f0c4:	cmp	fp, #10
   2f0c8:	movne	r3, #0
   2f0cc:	bne	2f0e0 <__assert_fail@plt+0x1c9f4>
   2f0d0:	ldrb	r3, [r4, #77]	; 0x4d
   2f0d4:	cmp	r3, #0
   2f0d8:	moveq	r3, #0
   2f0dc:	movne	r3, #2
   2f0e0:	str	r3, [r4, #60]	; 0x3c
   2f0e4:	b	2f004 <__assert_fail@plt+0x1c918>
   2f0e8:	ldr	r2, [r4, #8]
   2f0ec:	str	r1, [r2, r3, lsl #2]
   2f0f0:	add	r3, r3, #1
   2f0f4:	ldr	r2, [r4, #28]
   2f0f8:	cmp	r2, r3
   2f0fc:	bgt	2f0e8 <__assert_fail@plt+0x1c9fc>
   2f100:	ldrb	r3, [r4, #75]	; 0x4b
   2f104:	cmp	r3, #0
   2f108:	beq	2edd8 <__assert_fail@plt+0x1c6ec>
   2f10c:	b	2ee18 <__assert_fail@plt+0x1c72c>
   2f110:	ldr	r3, [r4]
   2f114:	ldr	r0, [r4, #68]	; 0x44
   2f118:	add	r3, r3, r5
   2f11c:	add	r7, r3, r7
   2f120:	ldr	r3, [r4, #64]	; 0x40
   2f124:	ldrb	r2, [r7, #-1]
   2f128:	str	r1, [r4, #32]
   2f12c:	cmp	r3, #0
   2f130:	ldrbne	r2, [r3, r2]
   2f134:	mov	r1, r2
   2f138:	bl	2ad68 <__assert_fail@plt+0x1867c>
   2f13c:	cmp	r0, #0
   2f140:	movne	r0, #1
   2f144:	bne	2f160 <__assert_fail@plt+0x1ca74>
   2f148:	cmp	r2, #10
   2f14c:	bne	2f160 <__assert_fail@plt+0x1ca74>
   2f150:	ldrb	r3, [r4, #77]	; 0x4d
   2f154:	cmp	r3, #0
   2f158:	moveq	r0, #0
   2f15c:	movne	r0, #2
   2f160:	str	r0, [r4, #60]	; 0x3c
   2f164:	b	2ecec <__assert_fail@plt+0x1c600>
   2f168:	bl	2b8e4 <__assert_fail@plt+0x191f8>
   2f16c:	mov	r0, #0
   2f170:	str	r0, [r4, #40]	; 0x28
   2f174:	b	2ed44 <__assert_fail@plt+0x1c658>
   2f178:	ldrb	r2, [r4, #75]	; 0x4b
   2f17c:	cmp	r2, #0
   2f180:	streq	r3, [r4, #28]
   2f184:	beq	2f16c <__assert_fail@plt+0x1ca80>
   2f188:	ldrb	r3, [r4, #72]	; 0x48
   2f18c:	cmp	r3, #0
   2f190:	beq	2f1a0 <__assert_fail@plt+0x1cab4>
   2f194:	mov	r0, r4
   2f198:	bl	2bf08 <__assert_fail@plt+0x1981c>
   2f19c:	b	2f16c <__assert_fail@plt+0x1ca80>
   2f1a0:	ldr	r3, [r4, #64]	; 0x40
   2f1a4:	cmp	r3, #0
   2f1a8:	beq	2f16c <__assert_fail@plt+0x1ca80>
   2f1ac:	mov	r0, r4
   2f1b0:	bl	2ae0c <__assert_fail@plt+0x18720>
   2f1b4:	b	2f16c <__assert_fail@plt+0x1ca80>
   2f1b8:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2f1bc:	mov	r6, r0
   2f1c0:	mov	r4, r1
   2f1c4:	mov	r0, r1
   2f1c8:	mov	r7, r2
   2f1cc:	mov	r8, r3
   2f1d0:	ldr	r5, [r1, #40]	; 0x28
   2f1d4:	mov	r1, r5
   2f1d8:	bl	2d348 <__assert_fail@plt+0x1ac5c>
   2f1dc:	cmp	r0, #1
   2f1e0:	ble	2f210 <__assert_fail@plt+0x1cb24>
   2f1e4:	mov	r3, #1
   2f1e8:	mov	r2, r0
   2f1ec:	mov	r0, r4
   2f1f0:	str	r3, [r6]
   2f1f4:	bl	2adf0 <__assert_fail@plt+0x18704>
   2f1f8:	add	r5, r5, r2
   2f1fc:	str	r0, [r6, #4]
   2f200:	mov	r0, #0
   2f204:	str	r5, [r4, #40]	; 0x28
   2f208:	add	sp, sp, #8
   2f20c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f210:	ldrb	r2, [r7, #4]
   2f214:	add	r5, r5, r8
   2f218:	str	r5, [r4, #40]	; 0x28
   2f21c:	and	r3, r2, #251	; 0xfb
   2f220:	cmp	r2, #28
   2f224:	cmpne	r3, #26
   2f228:	bne	2f370 <__assert_fail@plt+0x1cc84>
   2f22c:	ldr	r3, [r4, #56]	; 0x38
   2f230:	cmp	r5, r3
   2f234:	ldrblt	sl, [r7]
   2f238:	movlt	r9, #0
   2f23c:	blt	2f2e0 <__assert_fail@plt+0x1cbf4>
   2f240:	mov	r0, #7
   2f244:	b	2f208 <__assert_fail@plt+0x1cb1c>
   2f248:	ldrb	r3, [r4, #76]	; 0x4c
   2f24c:	cmp	r3, #0
   2f250:	beq	2f30c <__assert_fail@plt+0x1cc20>
   2f254:	ldr	r3, [r4, #28]
   2f258:	cmp	r5, r3
   2f25c:	beq	2f270 <__assert_fail@plt+0x1cb84>
   2f260:	ldr	r3, [r4, #8]
   2f264:	ldr	r3, [r3, r5, lsl #2]
   2f268:	cmn	r3, #1
   2f26c:	beq	2f2fc <__assert_fail@plt+0x1cc10>
   2f270:	ldr	r3, [r4]
   2f274:	ldr	r2, [r4, #12]
   2f278:	ldr	r1, [r2, r5, lsl #2]
   2f27c:	ldr	r2, [r4, #24]
   2f280:	add	r3, r3, r1
   2f284:	ldrb	r8, [r3, r2]
   2f288:	tst	r8, #128	; 0x80
   2f28c:	bne	2f2fc <__assert_fail@plt+0x1cc10>
   2f290:	mov	r1, r5
   2f294:	mov	r0, r4
   2f298:	bl	2d348 <__assert_fail@plt+0x1ac5c>
   2f29c:	add	r0, r5, r0
   2f2a0:	str	r0, [r4, #40]	; 0x28
   2f2a4:	ldr	r3, [r4, #40]	; 0x28
   2f2a8:	ldr	r2, [r4, #56]	; 0x38
   2f2ac:	cmp	r2, r3
   2f2b0:	ble	2f240 <__assert_fail@plt+0x1cb54>
   2f2b4:	cmp	sl, r8
   2f2b8:	ldr	r2, [r6, #4]
   2f2bc:	bne	2f2d0 <__assert_fail@plt+0x1cbe4>
   2f2c0:	ldr	r1, [r4, #4]
   2f2c4:	ldrb	r1, [r1, r3]
   2f2c8:	cmp	r1, #93	; 0x5d
   2f2cc:	beq	2f328 <__assert_fail@plt+0x1cc3c>
   2f2d0:	strb	r8, [r2, r9]
   2f2d4:	add	r9, r9, #1
   2f2d8:	cmp	r9, #32
   2f2dc:	beq	2f240 <__assert_fail@plt+0x1cb54>
   2f2e0:	ldrb	r3, [r7, #4]
   2f2e4:	ldr	r5, [r4, #40]	; 0x28
   2f2e8:	cmp	r3, #30
   2f2ec:	bne	2f2fc <__assert_fail@plt+0x1cc10>
   2f2f0:	ldrb	r3, [r4, #75]	; 0x4b
   2f2f4:	cmp	r3, #0
   2f2f8:	bne	2f248 <__assert_fail@plt+0x1cb5c>
   2f2fc:	add	r2, r5, #1
   2f300:	ldr	r3, [r4, #4]
   2f304:	str	r2, [r4, #40]	; 0x28
   2f308:	b	2f320 <__assert_fail@plt+0x1cc34>
   2f30c:	ldr	r0, [r4]
   2f310:	add	r2, r5, #1
   2f314:	ldr	r3, [r4, #24]
   2f318:	str	r2, [r4, #40]	; 0x28
   2f31c:	add	r5, r0, r5
   2f320:	ldrb	r8, [r3, r5]
   2f324:	b	2f2a4 <__assert_fail@plt+0x1cbb8>
   2f328:	add	r3, r3, #1
   2f32c:	mov	r0, #0
   2f330:	str	r3, [r4, #40]	; 0x28
   2f334:	strb	r0, [r2, r9]
   2f338:	ldrb	r3, [r7, #4]
   2f33c:	cmp	r3, #28
   2f340:	beq	2f360 <__assert_fail@plt+0x1cc74>
   2f344:	cmp	r3, #30
   2f348:	beq	2f368 <__assert_fail@plt+0x1cc7c>
   2f34c:	cmp	r3, #26
   2f350:	moveq	r3, #3
   2f354:	bne	2f208 <__assert_fail@plt+0x1cb1c>
   2f358:	str	r3, [r6]
   2f35c:	b	2f208 <__assert_fail@plt+0x1cb1c>
   2f360:	mov	r3, #2
   2f364:	b	2f358 <__assert_fail@plt+0x1cc6c>
   2f368:	mov	r3, #4
   2f36c:	b	2f358 <__assert_fail@plt+0x1cc6c>
   2f370:	ldrb	r3, [sp, #44]	; 0x2c
   2f374:	cmp	r2, #22
   2f378:	orrne	r3, r3, #1
   2f37c:	cmp	r3, #0
   2f380:	bne	2f3a4 <__assert_fail@plt+0x1ccb8>
   2f384:	mov	r1, r4
   2f388:	mov	r0, sp
   2f38c:	ldr	r2, [sp, #40]	; 0x28
   2f390:	bl	2afc0 <__assert_fail@plt+0x188d4>
   2f394:	ldrb	r3, [sp, #4]
   2f398:	cmp	r3, #21
   2f39c:	movne	r0, #11
   2f3a0:	bne	2f208 <__assert_fail@plt+0x1cb1c>
   2f3a4:	ldrb	r3, [r7]
   2f3a8:	mov	r0, #0
   2f3ac:	str	r0, [r6]
   2f3b0:	strb	r3, [r6, #4]
   2f3b4:	b	2f208 <__assert_fail@plt+0x1cb1c>
   2f3b8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f3bc:	ldr	r8, [r1, #40]	; 0x28
   2f3c0:	ldr	r3, [r1, #56]	; 0x38
   2f3c4:	cmp	r3, r8
   2f3c8:	movle	r3, #2
   2f3cc:	strble	r3, [r0, #4]
   2f3d0:	movle	r0, #0
   2f3d4:	ble	2f5a8 <__assert_fail@plt+0x1cebc>
   2f3d8:	ldrb	r3, [r0, #6]
   2f3dc:	ldr	sl, [r1, #4]
   2f3e0:	bic	r3, r3, #96	; 0x60
   2f3e4:	ldrb	r6, [sl, r8]
   2f3e8:	strb	r3, [r0, #6]
   2f3ec:	ldr	r3, [r1, #80]	; 0x50
   2f3f0:	strb	r6, [r0]
   2f3f4:	cmp	r3, #1
   2f3f8:	ble	2f438 <__assert_fail@plt+0x1cd4c>
   2f3fc:	ldr	ip, [r1, #28]
   2f400:	cmp	r8, ip
   2f404:	beq	2f438 <__assert_fail@plt+0x1cd4c>
   2f408:	ldr	ip, [r1, #8]
   2f40c:	ldr	ip, [ip, r8, lsl #2]
   2f410:	cmn	ip, #1
   2f414:	bne	2f438 <__assert_fail@plt+0x1cd4c>
   2f418:	ldr	r3, [r0, #4]
   2f41c:	bic	r3, r3, #2097152	; 0x200000
   2f420:	bic	r3, r3, #255	; 0xff
   2f424:	orr	r3, r3, #2097152	; 0x200000
   2f428:	orr	r3, r3, #1
   2f42c:	str	r3, [r0, #4]
   2f430:	mov	r0, #1
   2f434:	b	2f5a8 <__assert_fail@plt+0x1cebc>
   2f438:	cmp	r6, #92	; 0x5c
   2f43c:	mov	r4, r2
   2f440:	mov	r7, r1
   2f444:	mov	r5, r0
   2f448:	bne	2f780 <__assert_fail@plt+0x1d094>
   2f44c:	ldr	r2, [r7, #48]	; 0x30
   2f450:	add	r1, r8, #1
   2f454:	cmp	r1, r2
   2f458:	movge	r3, #36	; 0x24
   2f45c:	bge	2f8ac <__assert_fail@plt+0x1d1c0>
   2f460:	ldrb	r2, [r7, #75]	; 0x4b
   2f464:	cmp	r2, #0
   2f468:	bne	2f474 <__assert_fail@plt+0x1cd88>
   2f46c:	ldrb	r6, [sl, r1]
   2f470:	b	2f4e4 <__assert_fail@plt+0x1cdf8>
   2f474:	cmp	r3, #1
   2f478:	ble	2f4b0 <__assert_fail@plt+0x1cdc4>
   2f47c:	ldr	r2, [r7, #8]
   2f480:	lsl	r0, r1, #2
   2f484:	ldr	ip, [r2, r1, lsl #2]
   2f488:	cmn	ip, #1
   2f48c:	beq	2f46c <__assert_fail@plt+0x1cd80>
   2f490:	ldr	ip, [r7, #28]
   2f494:	add	r8, r8, #2
   2f498:	cmp	ip, r8
   2f49c:	beq	2f4b0 <__assert_fail@plt+0x1cdc4>
   2f4a0:	add	r2, r2, r0
   2f4a4:	ldr	r2, [r2, #4]
   2f4a8:	cmn	r2, #1
   2f4ac:	beq	2f46c <__assert_fail@plt+0x1cd80>
   2f4b0:	ldrb	r0, [r7, #76]	; 0x4c
   2f4b4:	ldr	lr, [r7, #24]
   2f4b8:	cmp	r0, #0
   2f4bc:	ldrne	r2, [r7, #12]
   2f4c0:	moveq	ip, r1
   2f4c4:	ldrne	ip, [r2, r1, lsl #2]
   2f4c8:	cmp	r0, #0
   2f4cc:	ldr	r2, [r7]
   2f4d0:	add	r2, r2, ip
   2f4d4:	ldrb	r6, [r2, lr]
   2f4d8:	beq	2f4e4 <__assert_fail@plt+0x1cdf8>
   2f4dc:	tst	r6, #128	; 0x80
   2f4e0:	bne	2f46c <__assert_fail@plt+0x1cd80>
   2f4e4:	mov	r2, #1
   2f4e8:	ldrb	r8, [r5, #6]
   2f4ec:	cmp	r3, r2
   2f4f0:	strb	r6, [r5]
   2f4f4:	strb	r2, [r5, #4]
   2f4f8:	ble	2f55c <__assert_fail@plt+0x1ce70>
   2f4fc:	mov	r0, r7
   2f500:	bl	2adf0 <__assert_fail@plt+0x18704>
   2f504:	mov	r7, r0
   2f508:	bl	12410 <iswalnum@plt>
   2f50c:	adds	r0, r0, #0
   2f510:	movne	r0, #1
   2f514:	cmp	r7, #95	; 0x5f
   2f518:	orreq	r0, r0, #1
   2f51c:	bfi	r8, r0, #6, #1
   2f520:	cmp	r6, #66	; 0x42
   2f524:	strb	r8, [r5, #6]
   2f528:	beq	2f6cc <__assert_fail@plt+0x1cfe0>
   2f52c:	bhi	2f5e4 <__assert_fail@plt+0x1cef8>
   2f530:	cmp	r6, #57	; 0x39
   2f534:	bhi	2f5b0 <__assert_fail@plt+0x1cec4>
   2f538:	cmp	r6, #49	; 0x31
   2f53c:	bcs	2f698 <__assert_fail@plt+0x1cfac>
   2f540:	cmp	r6, #40	; 0x28
   2f544:	beq	2f734 <__assert_fail@plt+0x1d048>
   2f548:	bhi	2f580 <__assert_fail@plt+0x1ce94>
   2f54c:	cmp	r6, #39	; 0x27
   2f550:	beq	2f71c <__assert_fail@plt+0x1d030>
   2f554:	mov	r0, #2
   2f558:	b	2f5a8 <__assert_fail@plt+0x1cebc>
   2f55c:	bl	12374 <__ctype_b_loc@plt>
   2f560:	ldr	r2, [r0]
   2f564:	lsl	r3, r6, #1
   2f568:	ldrh	r3, [r2, r3]
   2f56c:	ubfx	r3, r3, #3, #1
   2f570:	cmp	r6, #95	; 0x5f
   2f574:	orreq	r3, r3, #1
   2f578:	bfi	r8, r3, #6, #1
   2f57c:	b	2f520 <__assert_fail@plt+0x1ce34>
   2f580:	cmp	r6, #41	; 0x29
   2f584:	beq	2f744 <__assert_fail@plt+0x1d058>
   2f588:	cmp	r6, #43	; 0x2b
   2f58c:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f590:	movw	r0, #1026	; 0x402
   2f594:	and	r0, r4, r0
   2f598:	cmp	r0, #2
   2f59c:	moveq	r3, #18
   2f5a0:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f5a4:	strb	r3, [r5, #4]
   2f5a8:	add	sp, sp, #12
   2f5ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5b0:	cmp	r6, #62	; 0x3e
   2f5b4:	beq	2f6b4 <__assert_fail@plt+0x1cfc8>
   2f5b8:	cmp	r6, #63	; 0x3f
   2f5bc:	beq	2f754 <__assert_fail@plt+0x1d068>
   2f5c0:	cmp	r6, #60	; 0x3c
   2f5c4:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f5c8:	tst	r4, #524288	; 0x80000
   2f5cc:	moveq	r3, #12
   2f5d0:	strbeq	r3, [r5, #4]
   2f5d4:	moveq	r3, #6
   2f5d8:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f5dc:	str	r3, [r5]
   2f5e0:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f5e4:	cmp	r6, #115	; 0x73
   2f5e8:	beq	2f6f4 <__assert_fail@plt+0x1d008>
   2f5ec:	bhi	2f63c <__assert_fail@plt+0x1cf50>
   2f5f0:	cmp	r6, #87	; 0x57
   2f5f4:	beq	2f6e4 <__assert_fail@plt+0x1cff8>
   2f5f8:	bhi	2f614 <__assert_fail@plt+0x1cf28>
   2f5fc:	cmp	r6, #83	; 0x53
   2f600:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f604:	tst	r4, #524288	; 0x80000
   2f608:	moveq	r3, #35	; 0x23
   2f60c:	beq	2f690 <__assert_fail@plt+0x1cfa4>
   2f610:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f614:	cmp	r6, #96	; 0x60
   2f618:	beq	2f704 <__assert_fail@plt+0x1d018>
   2f61c:	cmp	r6, #98	; 0x62
   2f620:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f624:	tst	r4, #524288	; 0x80000
   2f628:	moveq	r3, #12
   2f62c:	strbeq	r3, [r5, #4]
   2f630:	moveq	r3, #256	; 0x100
   2f634:	beq	2f5dc <__assert_fail@plt+0x1cef0>
   2f638:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f63c:	cmp	r6, #123	; 0x7b
   2f640:	beq	2f76c <__assert_fail@plt+0x1d080>
   2f644:	bhi	2f660 <__assert_fail@plt+0x1cf74>
   2f648:	cmp	r6, #119	; 0x77
   2f64c:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f650:	tst	r4, #524288	; 0x80000
   2f654:	moveq	r3, #32
   2f658:	beq	2f690 <__assert_fail@plt+0x1cfa4>
   2f65c:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f660:	cmp	r6, #124	; 0x7c
   2f664:	beq	2f684 <__assert_fail@plt+0x1cf98>
   2f668:	cmp	r6, #125	; 0x7d
   2f66c:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f670:	and	r4, r4, #4608	; 0x1200
   2f674:	cmp	r4, #512	; 0x200
   2f678:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f67c:	mov	r3, #24
   2f680:	b	2f690 <__assert_fail@plt+0x1cfa4>
   2f684:	tst	r4, #33792	; 0x8400
   2f688:	moveq	r3, #10
   2f68c:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f690:	strb	r3, [r5, #4]
   2f694:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f698:	tst	r4, #16384	; 0x4000
   2f69c:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f6a0:	mov	r3, #4
   2f6a4:	sub	r6, r6, #49	; 0x31
   2f6a8:	str	r6, [r5]
   2f6ac:	strb	r3, [r5, #4]
   2f6b0:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f6b4:	tst	r4, #524288	; 0x80000
   2f6b8:	moveq	r3, #12
   2f6bc:	strbeq	r3, [r5, #4]
   2f6c0:	moveq	r3, #9
   2f6c4:	beq	2f5dc <__assert_fail@plt+0x1cef0>
   2f6c8:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f6cc:	tst	r4, #524288	; 0x80000
   2f6d0:	moveq	r3, #12
   2f6d4:	strbeq	r3, [r5, #4]
   2f6d8:	moveq	r3, #512	; 0x200
   2f6dc:	beq	2f5dc <__assert_fail@plt+0x1cef0>
   2f6e0:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f6e4:	tst	r4, #524288	; 0x80000
   2f6e8:	moveq	r3, #33	; 0x21
   2f6ec:	beq	2f690 <__assert_fail@plt+0x1cfa4>
   2f6f0:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f6f4:	tst	r4, #524288	; 0x80000
   2f6f8:	moveq	r3, #34	; 0x22
   2f6fc:	beq	2f690 <__assert_fail@plt+0x1cfa4>
   2f700:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f704:	tst	r4, #524288	; 0x80000
   2f708:	moveq	r3, #12
   2f70c:	strbeq	r3, [r5, #4]
   2f710:	moveq	r3, #64	; 0x40
   2f714:	beq	2f5dc <__assert_fail@plt+0x1cef0>
   2f718:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f71c:	tst	r4, #524288	; 0x80000
   2f720:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f724:	mov	r3, #12
   2f728:	strb	r3, [r5, #4]
   2f72c:	mov	r3, #128	; 0x80
   2f730:	b	2f5dc <__assert_fail@plt+0x1cef0>
   2f734:	tst	r4, #8192	; 0x2000
   2f738:	moveq	r3, #8
   2f73c:	beq	2f690 <__assert_fail@plt+0x1cfa4>
   2f740:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f744:	tst	r4, #8192	; 0x2000
   2f748:	moveq	r3, #9
   2f74c:	beq	2f690 <__assert_fail@plt+0x1cfa4>
   2f750:	b	2f554 <__assert_fail@plt+0x1ce68>
   2f754:	movw	r0, #1026	; 0x402
   2f758:	and	r0, r4, r0
   2f75c:	cmp	r0, #2
   2f760:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f764:	mov	r3, #19
   2f768:	b	2f5a4 <__assert_fail@plt+0x1ceb8>
   2f76c:	and	r4, r4, #4608	; 0x1200
   2f770:	cmp	r4, #512	; 0x200
   2f774:	moveq	r3, #23
   2f778:	bne	2f554 <__assert_fail@plt+0x1ce68>
   2f77c:	b	2f690 <__assert_fail@plt+0x1cfa4>
   2f780:	mov	r2, #1
   2f784:	ldrb	r9, [r0, #6]
   2f788:	cmp	r3, r2
   2f78c:	strb	r2, [r0, #4]
   2f790:	ble	2f840 <__assert_fail@plt+0x1d154>
   2f794:	mov	r1, r8
   2f798:	mov	r0, r7
   2f79c:	bl	2adf0 <__assert_fail@plt+0x18704>
   2f7a0:	mov	fp, r0
   2f7a4:	bl	12410 <iswalnum@plt>
   2f7a8:	adds	r0, r0, #0
   2f7ac:	movne	r0, #1
   2f7b0:	cmp	fp, #95	; 0x5f
   2f7b4:	orreq	r0, r0, #1
   2f7b8:	bfi	r9, r0, #6, #1
   2f7bc:	cmp	r6, #46	; 0x2e
   2f7c0:	strb	r9, [r5, #6]
   2f7c4:	beq	2f950 <__assert_fail@plt+0x1d264>
   2f7c8:	bhi	2f88c <__assert_fail@plt+0x1d1a0>
   2f7cc:	cmp	r6, #40	; 0x28
   2f7d0:	beq	2f930 <__assert_fail@plt+0x1d244>
   2f7d4:	bhi	2f864 <__assert_fail@plt+0x1d178>
   2f7d8:	cmp	r6, #10
   2f7dc:	beq	2f8e0 <__assert_fail@plt+0x1d1f4>
   2f7e0:	cmp	r6, #36	; 0x24
   2f7e4:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f7e8:	tst	r4, #8
   2f7ec:	bne	2f830 <__assert_fail@plt+0x1d144>
   2f7f0:	ldr	r3, [r7, #48]	; 0x30
   2f7f4:	add	r8, r8, #1
   2f7f8:	cmp	r8, r3
   2f7fc:	beq	2f830 <__assert_fail@plt+0x1d144>
   2f800:	mov	r2, r4
   2f804:	mov	r1, r7
   2f808:	str	r8, [r7, #40]	; 0x28
   2f80c:	mov	r0, sp
   2f810:	bl	2f3b8 <__assert_fail@plt+0x1cccc>
   2f814:	ldr	r3, [r7, #40]	; 0x28
   2f818:	sub	r3, r3, #1
   2f81c:	str	r3, [r7, #40]	; 0x28
   2f820:	ldrb	r3, [sp, #4]
   2f824:	sub	r3, r3, #9
   2f828:	cmp	r3, #1
   2f82c:	bhi	2f430 <__assert_fail@plt+0x1cd44>
   2f830:	mov	r3, #12
   2f834:	strb	r3, [r5, #4]
   2f838:	mov	r3, #32
   2f83c:	b	2f9a4 <__assert_fail@plt+0x1d2b8>
   2f840:	bl	12374 <__ctype_b_loc@plt>
   2f844:	ldr	r2, [r0]
   2f848:	lsl	r3, r6, #1
   2f84c:	ldrh	r3, [r2, r3]
   2f850:	ubfx	r3, r3, #3, #1
   2f854:	cmp	r6, #95	; 0x5f
   2f858:	orreq	r3, r3, #1
   2f85c:	bfi	r9, r3, #6, #1
   2f860:	b	2f7bc <__assert_fail@plt+0x1d0d0>
   2f864:	cmp	r6, #42	; 0x2a
   2f868:	beq	2f900 <__assert_fail@plt+0x1d214>
   2f86c:	bcc	2f940 <__assert_fail@plt+0x1d254>
   2f870:	cmp	r6, #43	; 0x2b
   2f874:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f878:	movw	r3, #1026	; 0x402
   2f87c:	tst	r4, r3
   2f880:	moveq	r3, #18
   2f884:	beq	2f8ac <__assert_fail@plt+0x1d1c0>
   2f888:	b	2f430 <__assert_fail@plt+0x1cd44>
   2f88c:	cmp	r6, #94	; 0x5e
   2f890:	beq	2f958 <__assert_fail@plt+0x1d26c>
   2f894:	bhi	2f8b4 <__assert_fail@plt+0x1d1c8>
   2f898:	cmp	r6, #63	; 0x3f
   2f89c:	beq	2f908 <__assert_fail@plt+0x1d21c>
   2f8a0:	cmp	r6, #91	; 0x5b
   2f8a4:	moveq	r3, #20
   2f8a8:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f8ac:	strb	r3, [r5, #4]
   2f8b0:	b	2f430 <__assert_fail@plt+0x1cd44>
   2f8b4:	cmp	r6, #124	; 0x7c
   2f8b8:	beq	2f8f0 <__assert_fail@plt+0x1d204>
   2f8bc:	cmp	r6, #125	; 0x7d
   2f8c0:	beq	2f91c <__assert_fail@plt+0x1d230>
   2f8c4:	cmp	r6, #123	; 0x7b
   2f8c8:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f8cc:	and	r4, r4, #4608	; 0x1200
   2f8d0:	cmp	r4, #4608	; 0x1200
   2f8d4:	moveq	r3, #23
   2f8d8:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f8dc:	b	2f8ac <__assert_fail@plt+0x1d1c0>
   2f8e0:	tst	r4, #2048	; 0x800
   2f8e4:	beq	2f430 <__assert_fail@plt+0x1cd44>
   2f8e8:	mov	r3, #10
   2f8ec:	b	2f8ac <__assert_fail@plt+0x1d1c0>
   2f8f0:	and	r4, r4, #33792	; 0x8400
   2f8f4:	cmp	r4, #32768	; 0x8000
   2f8f8:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f8fc:	b	2f8e8 <__assert_fail@plt+0x1d1fc>
   2f900:	mov	r3, #11
   2f904:	b	2f8ac <__assert_fail@plt+0x1d1c0>
   2f908:	movw	r3, #1026	; 0x402
   2f90c:	tst	r4, r3
   2f910:	moveq	r3, #19
   2f914:	beq	2f8ac <__assert_fail@plt+0x1d1c0>
   2f918:	b	2f430 <__assert_fail@plt+0x1cd44>
   2f91c:	and	r4, r4, #4608	; 0x1200
   2f920:	cmp	r4, #4608	; 0x1200
   2f924:	moveq	r3, #24
   2f928:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f92c:	b	2f8ac <__assert_fail@plt+0x1d1c0>
   2f930:	tst	r4, #8192	; 0x2000
   2f934:	movne	r3, #8
   2f938:	bne	2f8ac <__assert_fail@plt+0x1d1c0>
   2f93c:	b	2f430 <__assert_fail@plt+0x1cd44>
   2f940:	tst	r4, #8192	; 0x2000
   2f944:	movne	r3, #9
   2f948:	bne	2f8ac <__assert_fail@plt+0x1d1c0>
   2f94c:	b	2f430 <__assert_fail@plt+0x1cd44>
   2f950:	mov	r3, #5
   2f954:	b	2f8ac <__assert_fail@plt+0x1d1c0>
   2f958:	ldr	r3, [pc, #76]	; 2f9ac <__assert_fail@plt+0x1d2c0>
   2f95c:	tst	r4, r3
   2f960:	moveq	r3, #1
   2f964:	movne	r3, #0
   2f968:	cmp	r8, #0
   2f96c:	moveq	r3, #0
   2f970:	cmp	r3, #0
   2f974:	beq	2f998 <__assert_fail@plt+0x1d2ac>
   2f978:	add	r8, sl, r8
   2f97c:	eor	r4, r4, #2048	; 0x800
   2f980:	ldrb	r2, [r8, #-1]
   2f984:	ubfx	r4, r4, #11, #1
   2f988:	cmp	r2, #10
   2f98c:	orrne	r4, r4, #1
   2f990:	cmp	r4, #0
   2f994:	bne	2f430 <__assert_fail@plt+0x1cd44>
   2f998:	mov	r3, #12
   2f99c:	strb	r3, [r5, #4]
   2f9a0:	mov	r3, #16
   2f9a4:	str	r3, [r5]
   2f9a8:	b	2f430 <__assert_fail@plt+0x1cd44>
   2f9ac:	addeq	r0, r0, r8
   2f9b0:	push	{r4, lr}
   2f9b4:	mov	r4, r1
   2f9b8:	bl	2f3b8 <__assert_fail@plt+0x1cccc>
   2f9bc:	ldr	r3, [r4, #40]	; 0x28
   2f9c0:	add	r0, r3, r0
   2f9c4:	str	r0, [r4, #40]	; 0x28
   2f9c8:	pop	{r4, pc}
   2f9cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f9d0:	mov	r8, r0
   2f9d4:	mov	r5, r1
   2f9d8:	mov	r9, r2
   2f9dc:	mvn	r4, #0
   2f9e0:	mov	r7, #10
   2f9e4:	movw	r6, #32816	; 0x8030
   2f9e8:	mov	r2, r9
   2f9ec:	mov	r1, r8
   2f9f0:	mov	r0, r5
   2f9f4:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   2f9f8:	ldrb	r2, [r5, #4]
   2f9fc:	ldrb	r3, [r5]
   2fa00:	cmp	r2, #2
   2fa04:	beq	2fa68 <__assert_fail@plt+0x1d37c>
   2fa08:	cmp	r3, #44	; 0x2c
   2fa0c:	cmpne	r2, #24
   2fa10:	beq	2fa6c <__assert_fail@plt+0x1d380>
   2fa14:	cmp	r2, #1
   2fa18:	bne	2fa60 <__assert_fail@plt+0x1d374>
   2fa1c:	sub	r1, r3, #48	; 0x30
   2fa20:	uxtb	r0, r1
   2fa24:	cmp	r0, #9
   2fa28:	movhi	r2, #0
   2fa2c:	movls	r2, #1
   2fa30:	cmn	r4, #2
   2fa34:	moveq	r2, #0
   2fa38:	cmp	r2, #0
   2fa3c:	beq	2fa60 <__assert_fail@plt+0x1d374>
   2fa40:	cmn	r4, #1
   2fa44:	moveq	r4, r1
   2fa48:	beq	2f9e8 <__assert_fail@plt+0x1d2fc>
   2fa4c:	mla	r4, r7, r4, r3
   2fa50:	cmp	r4, r6
   2fa54:	movge	r4, r6
   2fa58:	sub	r4, r4, #48	; 0x30
   2fa5c:	b	2f9e8 <__assert_fail@plt+0x1d2fc>
   2fa60:	mvn	r4, #1
   2fa64:	b	2f9e8 <__assert_fail@plt+0x1d2fc>
   2fa68:	mvn	r4, #1
   2fa6c:	mov	r0, r4
   2fa70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fa74:	push	{r4, r5, r6, lr}
   2fa78:	add	r5, r0, #12
   2fa7c:	mov	r4, r0
   2fa80:	ldr	r0, [r0, #8]
   2fa84:	cmp	r0, r5
   2fa88:	beq	2fa90 <__assert_fail@plt+0x1d3a4>
   2fa8c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2fa90:	mov	r3, #0
   2fa94:	str	r3, [r4]
   2fa98:	mov	r3, #16
   2fa9c:	str	r5, [r4, #8]
   2faa0:	str	r3, [r4, #4]
   2faa4:	pop	{r4, r5, r6, pc}
   2faa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2faac:	mov	fp, #0
   2fab0:	sub	sp, sp, #14400	; 0x3840
   2fab4:	sub	sp, sp, #4
   2fab8:	mov	sl, r0
   2fabc:	add	r0, sp, #64	; 0x40
   2fac0:	mov	r9, r1
   2fac4:	str	fp, [r1, #44]	; 0x2c
   2fac8:	str	fp, [r1, #48]	; 0x30
   2facc:	bl	2b568 <__assert_fail@plt+0x18e7c>
   2fad0:	str	fp, [sp, #4]
   2fad4:	ldr	r2, [sp, #4]
   2fad8:	ldr	r3, [r9, #8]
   2fadc:	cmp	r2, r3
   2fae0:	blt	2fb14 <__assert_fail@plt+0x1d428>
   2fae4:	cmp	fp, #0
   2fae8:	bgt	2ff34 <__assert_fail@plt+0x1d848>
   2faec:	bne	2ff1c <__assert_fail@plt+0x1d830>
   2faf0:	mov	r1, #256	; 0x100
   2faf4:	mov	r0, #4
   2faf8:	bl	27fbc <__assert_fail@plt+0x158d0>
   2fafc:	str	r0, [r9, #44]	; 0x2c
   2fb00:	adds	r0, r0, #0
   2fb04:	movne	r0, #1
   2fb08:	add	sp, sp, #14400	; 0x3840
   2fb0c:	add	sp, sp, #4
   2fb10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb14:	ldr	r3, [sp, #4]
   2fb18:	ldr	r2, [sp, #4]
   2fb1c:	lsl	r3, r3, #2
   2fb20:	str	r3, [sp, #12]
   2fb24:	ldr	r3, [r9, #12]
   2fb28:	ldr	r2, [r3, r2, lsl #2]
   2fb2c:	ldr	r3, [sl]
   2fb30:	add	r1, r3, r2, lsl #3
   2fb34:	ldrb	r5, [r1, #4]
   2fb38:	str	r1, [sp, #8]
   2fb3c:	ldr	r4, [r1, #4]
   2fb40:	cmp	r5, #1
   2fb44:	ubfx	r4, r4, #8, #10
   2fb48:	bne	2fba0 <__assert_fail@plt+0x1d4b4>
   2fb4c:	ldrb	r1, [r3, r2, lsl #3]
   2fb50:	add	r0, sp, #64	; 0x40
   2fb54:	bl	2ad34 <__assert_fail@plt+0x18648>
   2fb58:	cmp	r4, #0
   2fb5c:	beq	2fc40 <__assert_fail@plt+0x1d554>
   2fb60:	tst	r4, #32
   2fb64:	beq	2fb8c <__assert_fail@plt+0x1d4a0>
   2fb68:	ldr	r6, [sp, #64]	; 0x40
   2fb6c:	add	r0, sp, #64	; 0x40
   2fb70:	bl	2b568 <__assert_fail@plt+0x18e7c>
   2fb74:	and	r6, r6, #1024	; 0x400
   2fb78:	cmp	r6, #0
   2fb7c:	beq	2fcbc <__assert_fail@plt+0x1d5d0>
   2fb80:	ldr	r3, [sp, #64]	; 0x40
   2fb84:	orr	r3, r3, #1024	; 0x400
   2fb88:	str	r3, [sp, #64]	; 0x40
   2fb8c:	tst	r4, #128	; 0x80
   2fb90:	beq	2fc30 <__assert_fail@plt+0x1d544>
   2fb94:	add	r0, sp, #64	; 0x40
   2fb98:	bl	2b568 <__assert_fail@plt+0x18e7c>
   2fb9c:	b	2fcbc <__assert_fail@plt+0x1d5d0>
   2fba0:	cmp	r5, #3
   2fba4:	bne	2fbb8 <__assert_fail@plt+0x1d4cc>
   2fba8:	add	r0, sp, #64	; 0x40
   2fbac:	ldr	r1, [r3, r2, lsl #3]
   2fbb0:	bl	2ada0 <__assert_fail@plt+0x186b4>
   2fbb4:	b	2fb58 <__assert_fail@plt+0x1d46c>
   2fbb8:	cmp	r5, #5
   2fbbc:	bne	2fc14 <__assert_fail@plt+0x1d528>
   2fbc0:	ldr	r3, [sl, #92]	; 0x5c
   2fbc4:	cmp	r3, #1
   2fbc8:	ble	2fc00 <__assert_fail@plt+0x1d514>
   2fbcc:	add	r0, sp, #64	; 0x40
   2fbd0:	ldr	r1, [sl, #60]	; 0x3c
   2fbd4:	bl	2ada0 <__assert_fail@plt+0x186b4>
   2fbd8:	ldr	r2, [sl, #128]	; 0x80
   2fbdc:	tst	r2, #64	; 0x40
   2fbe0:	ldreq	r3, [sp, #64]	; 0x40
   2fbe4:	biceq	r3, r3, #1024	; 0x400
   2fbe8:	streq	r3, [sp, #64]	; 0x40
   2fbec:	tst	r2, #128	; 0x80
   2fbf0:	ldrne	r3, [sp, #64]	; 0x40
   2fbf4:	bicne	r3, r3, #1
   2fbf8:	strne	r3, [sp, #64]	; 0x40
   2fbfc:	b	2fb58 <__assert_fail@plt+0x1d46c>
   2fc00:	mov	r2, #32
   2fc04:	mvn	r1, #0
   2fc08:	add	r0, sp, #64	; 0x40
   2fc0c:	bl	12434 <memset@plt>
   2fc10:	b	2fbd8 <__assert_fail@plt+0x1d4ec>
   2fc14:	cmp	r5, #7
   2fc18:	bne	2fcbc <__assert_fail@plt+0x1d5d0>
   2fc1c:	mvn	r2, #0
   2fc20:	mvn	r3, #0
   2fc24:	strd	r2, [sp, #64]	; 0x40
   2fc28:	strd	r2, [sp, #72]	; 0x48
   2fc2c:	b	2fbd8 <__assert_fail@plt+0x1d4ec>
   2fc30:	tst	r4, #4
   2fc34:	bne	2fc50 <__assert_fail@plt+0x1d564>
   2fc38:	tst	r4, #8
   2fc3c:	bne	2fcf4 <__assert_fail@plt+0x1d608>
   2fc40:	add	r4, sp, #6208	; 0x1840
   2fc44:	mov	r6, #0
   2fc48:	add	r4, r4, #28
   2fc4c:	b	2feb0 <__assert_fail@plt+0x1d7c4>
   2fc50:	cmp	r5, #1
   2fc54:	bne	2fc68 <__assert_fail@plt+0x1d57c>
   2fc58:	ldr	r3, [sp, #8]
   2fc5c:	ldrb	r3, [r3, #6]
   2fc60:	tst	r3, #64	; 0x40
   2fc64:	beq	2fb94 <__assert_fail@plt+0x1d4a8>
   2fc68:	ldr	r3, [sl, #92]	; 0x5c
   2fc6c:	add	r2, sl, #96	; 0x60
   2fc70:	cmp	r3, #1
   2fc74:	add	r3, sp, #64	; 0x40
   2fc78:	ble	2fccc <__assert_fail@plt+0x1d5e0>
   2fc7c:	ldr	ip, [sl, #60]	; 0x3c
   2fc80:	add	lr, sl, #128	; 0x80
   2fc84:	mov	r0, #0
   2fc88:	sub	ip, ip, #4
   2fc8c:	ldr	r1, [ip, #4]!
   2fc90:	ldr	r6, [r2], #4
   2fc94:	ldr	r7, [r3]
   2fc98:	mvn	r1, r1
   2fc9c:	orr	r1, r1, r6
   2fca0:	cmp	lr, r2
   2fca4:	and	r1, r1, r7
   2fca8:	orr	r0, r0, r1
   2fcac:	str	r1, [r3], #4
   2fcb0:	bne	2fc8c <__assert_fail@plt+0x1d5a0>
   2fcb4:	cmp	r0, #0
   2fcb8:	bne	2fc38 <__assert_fail@plt+0x1d54c>
   2fcbc:	ldr	r3, [sp, #4]
   2fcc0:	add	r3, r3, #1
   2fcc4:	str	r3, [sp, #4]
   2fcc8:	b	2fad4 <__assert_fail@plt+0x1d3e8>
   2fccc:	add	ip, sl, #128	; 0x80
   2fcd0:	mov	r0, #0
   2fcd4:	ldr	lr, [r2], #4
   2fcd8:	ldr	r1, [r3]
   2fcdc:	cmp	r2, ip
   2fce0:	and	r1, r1, lr
   2fce4:	orr	r0, r0, r1
   2fce8:	str	r1, [r3], #4
   2fcec:	bne	2fcd4 <__assert_fail@plt+0x1d5e8>
   2fcf0:	b	2fcb4 <__assert_fail@plt+0x1d5c8>
   2fcf4:	cmp	r5, #1
   2fcf8:	bne	2fd0c <__assert_fail@plt+0x1d620>
   2fcfc:	ldr	r3, [sp, #8]
   2fd00:	ldrb	r3, [r3, #6]
   2fd04:	tst	r3, #64	; 0x40
   2fd08:	bne	2fb94 <__assert_fail@plt+0x1d4a8>
   2fd0c:	ldr	r3, [sl, #92]	; 0x5c
   2fd10:	add	r2, sl, #96	; 0x60
   2fd14:	cmp	r3, #1
   2fd18:	add	r3, sp, #64	; 0x40
   2fd1c:	ble	2fd60 <__assert_fail@plt+0x1d674>
   2fd20:	ldr	r0, [sl, #60]	; 0x3c
   2fd24:	add	lr, sl, #128	; 0x80
   2fd28:	mov	r1, #0
   2fd2c:	sub	r0, r0, #4
   2fd30:	ldr	ip, [r2], #4
   2fd34:	ldr	r4, [r0, #4]!
   2fd38:	ldr	r6, [r3]
   2fd3c:	cmp	lr, r2
   2fd40:	and	ip, ip, r4
   2fd44:	bic	ip, r6, ip
   2fd48:	orr	r1, r1, ip
   2fd4c:	str	ip, [r3], #4
   2fd50:	bne	2fd30 <__assert_fail@plt+0x1d644>
   2fd54:	cmp	r1, #0
   2fd58:	beq	2fcbc <__assert_fail@plt+0x1d5d0>
   2fd5c:	b	2fc40 <__assert_fail@plt+0x1d554>
   2fd60:	add	ip, sl, #128	; 0x80
   2fd64:	mov	r1, #0
   2fd68:	ldr	lr, [r2], #4
   2fd6c:	ldr	r0, [r3]
   2fd70:	cmp	ip, r2
   2fd74:	bic	r0, r0, lr
   2fd78:	orr	r1, r1, r0
   2fd7c:	str	r0, [r3], #4
   2fd80:	bne	2fd68 <__assert_fail@plt+0x1d67c>
   2fd84:	b	2fd54 <__assert_fail@plt+0x1d668>
   2fd88:	cmp	r5, #1
   2fd8c:	sub	r0, r4, #28
   2fd90:	bne	2fda8 <__assert_fail@plt+0x1d6bc>
   2fd94:	ldr	r3, [sp, #8]
   2fd98:	ldrb	r1, [r3]
   2fd9c:	bl	2ad68 <__assert_fail@plt+0x1867c>
   2fda0:	cmp	r0, #0
   2fda4:	beq	2fea8 <__assert_fail@plt+0x1d7bc>
   2fda8:	add	r1, sp, #64	; 0x40
   2fdac:	sub	r2, r4, #32
   2fdb0:	add	lr, sp, #1088	; 0x440
   2fdb4:	mov	ip, r2
   2fdb8:	mov	r7, r1
   2fdbc:	mov	r0, #0
   2fdc0:	ldr	r8, [ip, #4]!
   2fdc4:	ldr	r3, [r7], #4
   2fdc8:	cmp	ip, r4
   2fdcc:	and	r3, r3, r8
   2fdd0:	orr	r0, r0, r3
   2fdd4:	str	r3, [lr], #4
   2fdd8:	bne	2fdc0 <__assert_fail@plt+0x1d6d4>
   2fddc:	cmp	r0, #0
   2fde0:	beq	2fea8 <__assert_fail@plt+0x1d7bc>
   2fde4:	mov	r7, #0
   2fde8:	add	r8, sp, #2112	; 0x840
   2fdec:	mov	r0, r7
   2fdf0:	ldr	ip, [r2, #4]!
   2fdf4:	ldr	r3, [r1]
   2fdf8:	cmp	r4, r2
   2fdfc:	bic	lr, ip, r3
   2fe00:	bic	r3, r3, ip
   2fe04:	orr	r0, r0, lr
   2fe08:	orr	r7, r7, r3
   2fe0c:	str	lr, [r8], #4
   2fe10:	str	r3, [r1], #4
   2fe14:	bne	2fdf0 <__assert_fail@plt+0x1d704>
   2fe18:	mov	r3, #12
   2fe1c:	add	r2, sp, #3136	; 0xc40
   2fe20:	cmp	r0, #0
   2fe24:	mla	r8, r3, r6, r2
   2fe28:	beq	2fe84 <__assert_fail@plt+0x1d798>
   2fe2c:	add	r2, sp, #14400	; 0x3840
   2fe30:	add	lr, sp, #2112	; 0x840
   2fe34:	add	ip, r2, fp, lsl #5
   2fe38:	ldm	lr!, {r0, r1, r2, r3}
   2fe3c:	sub	ip, ip, #8192	; 0x2000
   2fe40:	stmia	ip!, {r0, r1, r2, r3}
   2fe44:	ldm	lr, {r0, r1, r2, r3}
   2fe48:	add	lr, sp, #1088	; 0x440
   2fe4c:	stm	ip, {r0, r1, r2, r3}
   2fe50:	sub	ip, r4, #28
   2fe54:	ldm	lr!, {r0, r1, r2, r3}
   2fe58:	stmia	ip!, {r0, r1, r2, r3}
   2fe5c:	ldm	lr, {r0, r1, r2, r3}
   2fe60:	stm	ip, {r0, r1, r2, r3}
   2fe64:	mov	r3, #12
   2fe68:	add	r2, sp, #3136	; 0xc40
   2fe6c:	mov	r1, r8
   2fe70:	mla	r0, r3, fp, r2
   2fe74:	bl	2d870 <__assert_fail@plt+0x1b184>
   2fe78:	cmp	r0, #0
   2fe7c:	bne	2ff08 <__assert_fail@plt+0x1d81c>
   2fe80:	add	fp, fp, #1
   2fe84:	ldr	r3, [r9, #12]
   2fe88:	mov	r0, r8
   2fe8c:	ldr	r2, [sp, #12]
   2fe90:	ldr	r1, [r3, r2]
   2fe94:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   2fe98:	cmp	r0, #0
   2fe9c:	beq	2ff08 <__assert_fail@plt+0x1d81c>
   2fea0:	cmp	r7, #0
   2fea4:	beq	2feb8 <__assert_fail@plt+0x1d7cc>
   2fea8:	add	r6, r6, #1
   2feac:	add	r4, r4, #32
   2feb0:	cmp	r6, fp
   2feb4:	blt	2fd88 <__assert_fail@plt+0x1d69c>
   2feb8:	cmp	r6, fp
   2febc:	bne	2fcbc <__assert_fail@plt+0x1d5d0>
   2fec0:	add	r3, sp, #14400	; 0x3840
   2fec4:	add	lr, sp, #64	; 0x40
   2fec8:	add	ip, r3, fp, lsl #5
   2fecc:	ldm	lr!, {r0, r1, r2, r3}
   2fed0:	sub	ip, ip, #8192	; 0x2000
   2fed4:	stmia	ip!, {r0, r1, r2, r3}
   2fed8:	ldm	lr, {r0, r1, r2, r3}
   2fedc:	stm	ip, {r0, r1, r2, r3}
   2fee0:	ldr	r3, [r9, #12]
   2fee4:	ldr	r2, [sp, #12]
   2fee8:	ldr	r1, [r3, r2]
   2feec:	mov	r3, #12
   2fef0:	add	r2, sp, #3136	; 0xc40
   2fef4:	mla	r0, r3, fp, r2
   2fef8:	bl	2b878 <__assert_fail@plt+0x1918c>
   2fefc:	cmp	r0, #0
   2ff00:	addeq	fp, fp, #1
   2ff04:	beq	2fb94 <__assert_fail@plt+0x1d4a8>
   2ff08:	add	r5, sp, #3136	; 0xc40
   2ff0c:	mov	r4, #0
   2ff10:	cmp	r4, fp
   2ff14:	add	r5, r5, #12
   2ff18:	blt	2ff24 <__assert_fail@plt+0x1d838>
   2ff1c:	mov	r0, #0
   2ff20:	b	2fb08 <__assert_fail@plt+0x1d41c>
   2ff24:	ldr	r0, [r5, #-4]
   2ff28:	add	r4, r4, #1
   2ff2c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2ff30:	b	2ff10 <__assert_fail@plt+0x1d824>
   2ff34:	add	r1, fp, #1
   2ff38:	add	r0, sp, #20
   2ff3c:	bl	2b8b8 <__assert_fail@plt+0x191cc>
   2ff40:	add	r4, sp, #2112	; 0x840
   2ff44:	cmp	r0, #0
   2ff48:	str	r0, [r4, #-2096]	; 0xfffff7d0
   2ff4c:	mov	r6, r0
   2ff50:	beq	2ff80 <__assert_fail@plt+0x1d894>
   2ff54:	ldr	r0, [sp, #28]
   2ff58:	add	r5, sp, #3136	; 0xc40
   2ff5c:	mov	r4, #0
   2ff60:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2ff64:	add	r4, r4, #1
   2ff68:	ldr	r0, [r5, #8]
   2ff6c:	add	r5, r5, #12
   2ff70:	bl	284c4 <__assert_fail@plt+0x15dd8>
   2ff74:	cmp	r4, fp
   2ff78:	bne	2ff64 <__assert_fail@plt+0x1d878>
   2ff7c:	b	2ff1c <__assert_fail@plt+0x1d830>
   2ff80:	add	r0, sp, #32
   2ff84:	mov	r5, r6
   2ff88:	bl	2b568 <__assert_fail@plt+0x18e7c>
   2ff8c:	add	r3, sp, #3136	; 0xc40
   2ff90:	str	r6, [sp, #4]
   2ff94:	mov	r8, r3
   2ff98:	str	r3, [sp, #8]
   2ff9c:	mov	r3, #0
   2ffa0:	mov	r7, r3
   2ffa4:	str	r3, [r4, #-2088]	; 0xfffff7d8
   2ffa8:	ldr	r3, [r8, #4]
   2ffac:	cmp	r3, r7
   2ffb0:	bgt	30048 <__assert_fail@plt+0x1d95c>
   2ffb4:	mov	r3, #0
   2ffb8:	add	r2, sp, #20
   2ffbc:	mov	r1, sl
   2ffc0:	add	r0, sp, #16
   2ffc4:	bl	2da28 <__assert_fail@plt+0x1b33c>
   2ffc8:	add	r3, sp, #64	; 0x40
   2ffcc:	cmp	r0, #0
   2ffd0:	mov	r7, r0
   2ffd4:	str	r0, [r3, r5, lsl #2]
   2ffd8:	bne	2ffe8 <__assert_fail@plt+0x1d8fc>
   2ffdc:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   2ffe0:	cmp	r3, #0
   2ffe4:	bne	2ff54 <__assert_fail@plt+0x1d868>
   2ffe8:	ldrsb	r3, [r7, #52]	; 0x34
   2ffec:	cmp	r3, #0
   2fff0:	addge	r3, sp, #1088	; 0x440
   2fff4:	strge	r7, [r4, r5, lsl #2]
   2fff8:	strge	r7, [r3, r5, lsl #2]
   2fffc:	bge	300c0 <__assert_fail@plt+0x1d9d4>
   30000:	mov	r3, #1
   30004:	add	r2, sp, #20
   30008:	mov	r1, sl
   3000c:	add	r0, sp, #16
   30010:	bl	2da28 <__assert_fail@plt+0x1b33c>
   30014:	add	r3, sp, #1088	; 0x440
   30018:	cmp	r0, #0
   3001c:	str	r0, [r3, r5, lsl #2]
   30020:	bne	3008c <__assert_fail@plt+0x1d9a0>
   30024:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   30028:	cmp	r3, #0
   3002c:	bne	2ff54 <__assert_fail@plt+0x1d868>
   30030:	ldr	r3, [sl, #92]	; 0x5c
   30034:	cmp	r3, #2
   30038:	ldr	r3, [sp, #4]
   3003c:	movge	r3, #1
   30040:	str	r3, [sp, #4]
   30044:	b	30094 <__assert_fail@plt+0x1d9a8>
   30048:	ldr	r3, [r8, #8]
   3004c:	ldr	r2, [r3, r7, lsl #2]
   30050:	ldr	r3, [sl, #12]
   30054:	ldr	r3, [r3, r2, lsl #2]
   30058:	cmn	r3, #1
   3005c:	bne	30068 <__assert_fail@plt+0x1d97c>
   30060:	add	r7, r7, #1
   30064:	b	2ffa8 <__assert_fail@plt+0x1d8bc>
   30068:	ldr	r1, [sl, #24]
   3006c:	mov	r2, #12
   30070:	add	r0, sp, #20
   30074:	mla	r1, r2, r3, r1
   30078:	bl	2e57c <__assert_fail@plt+0x1be90>
   3007c:	cmp	r0, #0
   30080:	str	r0, [r4, #-2096]	; 0xfffff7d0
   30084:	beq	30060 <__assert_fail@plt+0x1d974>
   30088:	b	2ff54 <__assert_fail@plt+0x1d868>
   3008c:	cmp	r7, r0
   30090:	bne	30030 <__assert_fail@plt+0x1d944>
   30094:	mov	r3, #2
   30098:	add	r2, sp, #20
   3009c:	mov	r1, sl
   300a0:	add	r0, sp, #16
   300a4:	bl	2da28 <__assert_fail@plt+0x1b33c>
   300a8:	cmp	r0, #0
   300ac:	str	r0, [r4, r5, lsl #2]
   300b0:	bne	300c0 <__assert_fail@plt+0x1d9d4>
   300b4:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   300b8:	cmp	r3, #0
   300bc:	bne	2ff54 <__assert_fail@plt+0x1d868>
   300c0:	add	r7, sp, #6208	; 0x1840
   300c4:	add	r0, sp, #32
   300c8:	add	r1, r7, r5, lsl #5
   300cc:	add	r5, r5, #1
   300d0:	add	r8, r8, #12
   300d4:	bl	2ada0 <__assert_fail@plt+0x186b4>
   300d8:	cmp	r5, fp
   300dc:	bne	2ff9c <__assert_fail@plt+0x1d8b0>
   300e0:	ldr	r3, [sp, #4]
   300e4:	cmp	r3, #0
   300e8:	bne	301fc <__assert_fail@plt+0x1db10>
   300ec:	mov	r1, #256	; 0x100
   300f0:	mov	r0, #4
   300f4:	bl	27fbc <__assert_fail@plt+0x158d0>
   300f8:	cmp	r0, #0
   300fc:	mov	r2, r0
   30100:	str	r0, [r9, #44]	; 0x2c
   30104:	beq	2ff54 <__assert_fail@plt+0x1d868>
   30108:	ldr	r0, [sp, #4]
   3010c:	add	r1, sp, #32
   30110:	mov	r5, r7
   30114:	add	r9, sl, #96	; 0x60
   30118:	ldr	ip, [r1], #4
   3011c:	add	r4, r2, r0, lsl #7
   30120:	mov	lr, #1
   30124:	cmp	ip, #0
   30128:	bne	301ac <__assert_fail@plt+0x1dac0>
   3012c:	add	r0, r0, #1
   30130:	add	r5, r5, #4
   30134:	cmp	r0, #8
   30138:	bne	30118 <__assert_fail@plt+0x1da2c>
   3013c:	add	r5, sp, #2112	; 0x840
   30140:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   30144:	tst	r3, #1024	; 0x400
   30148:	beq	30178 <__assert_fail@plt+0x1da8c>
   3014c:	mov	r4, #0
   30150:	mov	r1, #10
   30154:	mov	r0, r7
   30158:	bl	2ad68 <__assert_fail@plt+0x1867c>
   3015c:	cmp	r0, #0
   30160:	beq	30294 <__assert_fail@plt+0x1dba8>
   30164:	ldr	r1, [sp, #4]
   30168:	ldr	r3, [r5, r4, lsl #2]
   3016c:	cmp	r1, #0
   30170:	strne	r3, [r2, #1064]	; 0x428
   30174:	str	r3, [r2, #40]	; 0x28
   30178:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   3017c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30180:	ldr	r3, [sp, #8]
   30184:	add	r6, r6, #1
   30188:	ldr	r0, [r3, #8]
   3018c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30190:	ldr	r3, [sp, #8]
   30194:	cmp	r6, fp
   30198:	add	r3, r3, #12
   3019c:	str	r3, [sp, #8]
   301a0:	bne	30180 <__assert_fail@plt+0x1da94>
   301a4:	mov	r0, #1
   301a8:	b	2fb08 <__assert_fail@plt+0x1d41c>
   301ac:	tst	ip, #1
   301b0:	beq	301ec <__assert_fail@plt+0x1db00>
   301b4:	mov	r3, #0
   301b8:	b	301c0 <__assert_fail@plt+0x1dad4>
   301bc:	add	r3, r3, #1
   301c0:	ldr	sl, [r5, r3, lsl #5]
   301c4:	tst	lr, sl
   301c8:	beq	301bc <__assert_fail@plt+0x1dad0>
   301cc:	ldr	sl, [r9, r0, lsl #2]
   301d0:	lsl	r3, r3, #2
   301d4:	add	r8, sp, #2112	; 0x840
   301d8:	add	r3, r8, r3
   301dc:	tst	lr, sl
   301e0:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   301e4:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   301e8:	str	r3, [r4]
   301ec:	lsl	lr, lr, #1
   301f0:	add	r4, r4, #4
   301f4:	lsr	ip, ip, #1
   301f8:	b	30124 <__assert_fail@plt+0x1da38>
   301fc:	mov	r1, #512	; 0x200
   30200:	mov	r0, #4
   30204:	bl	27fbc <__assert_fail@plt+0x158d0>
   30208:	cmp	r0, #0
   3020c:	mov	r2, r0
   30210:	str	r0, [r9, #48]	; 0x30
   30214:	beq	2ff54 <__assert_fail@plt+0x1d868>
   30218:	add	r3, sp, #32
   3021c:	add	r9, r0, #1024	; 0x400
   30220:	mov	r4, r7
   30224:	ldr	ip, [r3], #4
   30228:	mov	lr, r0
   3022c:	mov	r5, #1
   30230:	cmp	ip, #0
   30234:	bne	3024c <__assert_fail@plt+0x1db60>
   30238:	add	r0, r0, #128	; 0x80
   3023c:	add	r4, r4, #4
   30240:	cmp	r0, r9
   30244:	bne	30224 <__assert_fail@plt+0x1db38>
   30248:	b	3013c <__assert_fail@plt+0x1da50>
   3024c:	tst	ip, #1
   30250:	beq	30284 <__assert_fail@plt+0x1db98>
   30254:	mov	r1, #0
   30258:	b	30260 <__assert_fail@plt+0x1db74>
   3025c:	add	r1, r1, #1
   30260:	ldr	sl, [r4, r1, lsl #5]
   30264:	tst	r5, sl
   30268:	beq	3025c <__assert_fail@plt+0x1db70>
   3026c:	add	r8, sp, #2112	; 0x840
   30270:	add	r1, r8, r1, lsl #2
   30274:	ldr	sl, [r1, #-2048]	; 0xfffff800
   30278:	str	sl, [lr]
   3027c:	ldr	r1, [r1, #-1024]	; 0xfffffc00
   30280:	str	r1, [lr, #1024]	; 0x400
   30284:	lsl	r5, r5, #1
   30288:	add	lr, lr, #4
   3028c:	lsr	ip, ip, #1
   30290:	b	30230 <__assert_fail@plt+0x1db44>
   30294:	add	r4, r4, #1
   30298:	add	r7, r7, #32
   3029c:	cmp	r4, fp
   302a0:	bne	30150 <__assert_fail@plt+0x1da64>
   302a4:	b	30178 <__assert_fail@plt+0x1da8c>
   302a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   302ac:	sub	sp, sp, #28
   302b0:	mov	r8, r0
   302b4:	add	r5, sp, #12
   302b8:	mov	r4, r1
   302bc:	mov	r0, r5
   302c0:	mov	r9, r2
   302c4:	ldr	r1, [r1, #4]
   302c8:	mov	sl, r3
   302cc:	bl	2b8b8 <__assert_fail@plt+0x191cc>
   302d0:	subs	r6, r0, #0
   302d4:	moveq	r7, r6
   302d8:	beq	3037c <__assert_fail@plt+0x1dc90>
   302dc:	mov	r0, r6
   302e0:	add	sp, sp, #28
   302e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302e8:	ldr	r2, [r0, r7, lsl #2]
   302ec:	mov	r3, #12
   302f0:	ldr	r1, [r8, #24]
   302f4:	mla	r1, r3, r2, r1
   302f8:	mov	r3, #0
   302fc:	ldr	lr, [r1, #4]
   30300:	cmp	r3, lr
   30304:	blt	30328 <__assert_fail@plt+0x1dc3c>
   30308:	mov	r0, r5
   3030c:	bl	2e57c <__assert_fail@plt+0x1be90>
   30310:	subs	fp, r0, #0
   30314:	beq	30378 <__assert_fail@plt+0x1dc8c>
   30318:	ldr	r0, [sp, #20]
   3031c:	mov	r6, fp
   30320:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30324:	b	302dc <__assert_fail@plt+0x1dbf0>
   30328:	ldr	r0, [r1, #8]
   3032c:	ldr	ip, [r8]
   30330:	ldr	r0, [r0, r3, lsl #2]
   30334:	add	fp, ip, r0, lsl #3
   30338:	ldrb	fp, [fp, #4]
   3033c:	cmp	sl, fp
   30340:	bne	30350 <__assert_fail@plt+0x1dc64>
   30344:	ldr	ip, [ip, r0, lsl #3]
   30348:	cmp	r9, ip
   3034c:	beq	30358 <__assert_fail@plt+0x1dc6c>
   30350:	add	r3, r3, #1
   30354:	b	30300 <__assert_fail@plt+0x1dc14>
   30358:	cmn	r0, #1
   3035c:	beq	30308 <__assert_fail@plt+0x1dc1c>
   30360:	mov	r3, r9
   30364:	mov	r1, r5
   30368:	str	sl, [sp]
   3036c:	mov	r0, r8
   30370:	bl	2e48c <__assert_fail@plt+0x1bda0>
   30374:	b	30310 <__assert_fail@plt+0x1dc24>
   30378:	add	r7, r7, #1
   3037c:	ldr	r3, [r4, #4]
   30380:	ldr	r0, [r4, #8]
   30384:	cmp	r3, r7
   30388:	bgt	302e8 <__assert_fail@plt+0x1dbfc>
   3038c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30390:	ldm	r5, {r0, r1, r2}
   30394:	stm	r4, {r0, r1, r2}
   30398:	b	302dc <__assert_fail@plt+0x1dbf0>
   3039c:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   303a0:	ldr	r4, [r2, #4]
   303a4:	cmp	r4, #0
   303a8:	movne	r7, r4
   303ac:	movne	r3, #0
   303b0:	streq	r4, [r0]
   303b4:	bne	303d4 <__assert_fail@plt+0x1dce8>
   303b8:	mov	r0, r4
   303bc:	add	sp, sp, #4
   303c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   303c4:	ldr	ip, [r2, #8]
   303c8:	ldr	ip, [ip, r3, lsl #2]
   303cc:	add	r3, r3, #1
   303d0:	add	r7, r7, ip
   303d4:	cmp	r4, r3
   303d8:	bgt	303c4 <__assert_fail@plt+0x1dcd8>
   303dc:	ldr	r3, [r1, #68]	; 0x44
   303e0:	mov	r5, r2
   303e4:	mov	r6, r1
   303e8:	mov	r8, r0
   303ec:	mov	r9, #0
   303f0:	and	r2, r7, r3
   303f4:	mov	r3, #12
   303f8:	mul	r3, r3, r2
   303fc:	ldr	r2, [r1, #32]
   30400:	ldr	sl, [r2, r3]
   30404:	add	fp, r2, r3
   30408:	cmp	sl, r9
   3040c:	bgt	30454 <__assert_fail@plt+0x1dd68>
   30410:	mov	r1, #1
   30414:	mov	r0, #56	; 0x38
   30418:	bl	27fbc <__assert_fail@plt+0x158d0>
   3041c:	subs	r4, r0, #0
   30420:	beq	30444 <__assert_fail@plt+0x1dd58>
   30424:	add	r9, r4, #4
   30428:	mov	r1, r5
   3042c:	mov	r0, r9
   30430:	bl	2d870 <__assert_fail@plt+0x1b184>
   30434:	cmp	r0, #0
   30438:	beq	30484 <__assert_fail@plt+0x1dd98>
   3043c:	mov	r0, r4
   30440:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30444:	mov	r3, #12
   30448:	mov	r4, #0
   3044c:	str	r3, [r8]
   30450:	b	303b8 <__assert_fail@plt+0x1dccc>
   30454:	ldr	r3, [fp, #8]
   30458:	ldr	r4, [r3, r9, lsl #2]
   3045c:	ldr	r3, [r4]
   30460:	cmp	r3, r7
   30464:	bne	3047c <__assert_fail@plt+0x1dd90>
   30468:	mov	r1, r5
   3046c:	add	r0, r4, #4
   30470:	bl	2ae5c <__assert_fail@plt+0x18770>
   30474:	cmp	r0, #0
   30478:	bne	303b8 <__assert_fail@plt+0x1dccc>
   3047c:	add	r9, r9, #1
   30480:	b	30408 <__assert_fail@plt+0x1dd1c>
   30484:	ldr	r1, [pc, #188]	; 30548 <__assert_fail@plt+0x1de5c>
   30488:	str	r9, [r4, #40]	; 0x28
   3048c:	ldr	lr, [r5, #4]
   30490:	cmp	r0, lr
   30494:	blt	304bc <__assert_fail@plt+0x1ddd0>
   30498:	mov	r2, r7
   3049c:	mov	r1, r4
   304a0:	mov	r0, r6
   304a4:	bl	2d790 <__assert_fail@plt+0x1b0a4>
   304a8:	cmp	r0, #0
   304ac:	beq	303b8 <__assert_fail@plt+0x1dccc>
   304b0:	mov	r0, r4
   304b4:	bl	2c2bc <__assert_fail@plt+0x19bd0>
   304b8:	b	30444 <__assert_fail@plt+0x1dd58>
   304bc:	ldr	r3, [r5, #8]
   304c0:	ldr	r2, [r3, r0, lsl #2]
   304c4:	ldr	r3, [r6]
   304c8:	add	r3, r3, r2, lsl #3
   304cc:	ldrb	r2, [r3, #4]
   304d0:	cmp	r2, #1
   304d4:	bne	304e4 <__assert_fail@plt+0x1ddf8>
   304d8:	ldr	ip, [r3, #4]
   304dc:	tst	r1, ip
   304e0:	beq	30540 <__assert_fail@plt+0x1de54>
   304e4:	ldrb	sl, [r3, #6]
   304e8:	cmp	r2, #2
   304ec:	ldrb	ip, [r4, #52]	; 0x34
   304f0:	ubfx	sl, sl, #4, #1
   304f4:	ubfx	r9, ip, #5, #1
   304f8:	orr	r9, r9, sl
   304fc:	bfi	ip, r9, #5, #1
   30500:	uxtbeq	r3, ip
   30504:	orreq	r3, r3, #16
   30508:	strb	ip, [r4, #52]	; 0x34
   3050c:	beq	3053c <__assert_fail@plt+0x1de50>
   30510:	cmp	r2, #4
   30514:	ldrbeq	r3, [r4, #52]	; 0x34
   30518:	orreq	r3, r3, #64	; 0x40
   3051c:	beq	3053c <__assert_fail@plt+0x1de50>
   30520:	cmp	r2, #12
   30524:	beq	30534 <__assert_fail@plt+0x1de48>
   30528:	ldr	r3, [r3, #4]
   3052c:	tst	r1, r3
   30530:	beq	30540 <__assert_fail@plt+0x1de54>
   30534:	ldrb	r3, [r4, #52]	; 0x34
   30538:	orr	r3, r3, #128	; 0x80
   3053c:	strb	r3, [r4, #52]	; 0x34
   30540:	add	r0, r0, #1
   30544:	b	30490 <__assert_fail@plt+0x1dda4>
   30548:	andeq	pc, r3, r0, lsl #30
   3054c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30550:	mov	r7, r0
   30554:	mov	r5, r1
   30558:	mov	r8, r2
   3055c:	mov	r6, r3
   30560:	mov	r4, #0
   30564:	cmp	r4, r6
   30568:	blt	30578 <__assert_fail@plt+0x1de8c>
   3056c:	mov	r0, #0
   30570:	add	sp, sp, #16
   30574:	pop	{r4, r5, r6, r7, r8, pc}
   30578:	ldr	r1, [r5, r4, lsl #2]
   3057c:	ldr	r2, [r8, r4, lsl #2]
   30580:	cmp	r1, #0
   30584:	streq	r2, [r5, r4, lsl #2]
   30588:	beq	305d8 <__assert_fail@plt+0x1deec>
   3058c:	cmp	r2, #0
   30590:	beq	305d8 <__assert_fail@plt+0x1deec>
   30594:	add	r2, r2, #4
   30598:	add	r1, r1, #4
   3059c:	add	r0, sp, #4
   305a0:	bl	2d8e8 <__assert_fail@plt+0x1b1fc>
   305a4:	cmp	r0, #0
   305a8:	str	r0, [sp]
   305ac:	bne	30570 <__assert_fail@plt+0x1de84>
   305b0:	add	r2, sp, #4
   305b4:	mov	r1, r7
   305b8:	mov	r0, sp
   305bc:	bl	3039c <__assert_fail@plt+0x1dcb0>
   305c0:	str	r0, [r5, r4, lsl #2]
   305c4:	ldr	r0, [sp, #12]
   305c8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   305cc:	ldr	r0, [sp]
   305d0:	cmp	r0, #0
   305d4:	bne	30570 <__assert_fail@plt+0x1de84>
   305d8:	add	r4, r4, #1
   305dc:	b	30564 <__assert_fail@plt+0x1de78>
   305e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   305e4:	sub	sp, sp, #36	; 0x24
   305e8:	mov	r8, r1
   305ec:	mov	r1, r2
   305f0:	mov	r6, r0
   305f4:	mov	r9, r2
   305f8:	str	r3, [sp, #4]
   305fc:	bl	2b340 <__assert_fail@plt+0x18c54>
   30600:	cmn	r0, #1
   30604:	bne	30614 <__assert_fail@plt+0x1df28>
   30608:	mov	r0, #0
   3060c:	add	sp, sp, #36	; 0x24
   30610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30614:	mov	r3, #24
   30618:	ldr	r7, [r6, #84]	; 0x54
   3061c:	mla	r3, r0, r3, r3
   30620:	str	r3, [sp, #8]
   30624:	ldr	r3, [sp, #8]
   30628:	mov	fp, #12
   3062c:	ldr	r4, [r6, #116]	; 0x74
   30630:	add	r4, r4, r3
   30634:	ldr	sl, [r4, #-24]	; 0xffffffe8
   30638:	mov	r0, r8
   3063c:	mov	r1, sl
   30640:	bl	2aed4 <__assert_fail@plt+0x187e8>
   30644:	cmp	r0, #0
   30648:	beq	30794 <__assert_fail@plt+0x1e0a8>
   3064c:	ldr	r2, [r4, #-16]
   30650:	ldr	r5, [r4, #-12]
   30654:	add	r5, r9, r5
   30658:	sub	r5, r5, r2
   3065c:	cmp	r9, r5
   30660:	bne	306ec <__assert_fail@plt+0x1e000>
   30664:	ldr	r2, [r7, #20]
   30668:	mov	r0, r8
   3066c:	mla	r3, fp, sl, r2
   30670:	ldr	r3, [r3, #8]
   30674:	ldr	r5, [r3]
   30678:	mov	r1, r5
   3067c:	bl	2aed4 <__assert_fail@plt+0x187e8>
   30680:	cmp	r0, #0
   30684:	bne	30794 <__assert_fail@plt+0x1e0a8>
   30688:	add	r0, sp, #20
   3068c:	bl	2b878 <__assert_fail@plt+0x1918c>
   30690:	add	r1, sp, #20
   30694:	str	r0, [sp, #16]
   30698:	mov	r0, r7
   3069c:	ldr	r2, [sp, #4]
   306a0:	ldr	r3, [sp, #72]	; 0x48
   306a4:	bl	302a8 <__assert_fail@plt+0x1dbbc>
   306a8:	mov	r4, r0
   306ac:	add	r1, sp, #20
   306b0:	mov	r0, r8
   306b4:	bl	2e57c <__assert_fail@plt+0x1be90>
   306b8:	mov	r5, r0
   306bc:	ldr	r0, [sp, #28]
   306c0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   306c4:	ldr	r0, [sp, #16]
   306c8:	orr	r3, r4, r5
   306cc:	orrs	r3, r3, r0
   306d0:	beq	30624 <__assert_fail@plt+0x1df38>
   306d4:	cmp	r0, #0
   306d8:	bne	3060c <__assert_fail@plt+0x1df20>
   306dc:	cmp	r4, #0
   306e0:	movne	r0, r4
   306e4:	moveq	r0, r5
   306e8:	b	3060c <__assert_fail@plt+0x1df20>
   306ec:	ldr	r3, [r6, #100]	; 0x64
   306f0:	ldr	r2, [r7, #12]
   306f4:	ldr	r3, [r3, r5, lsl #2]
   306f8:	ldr	sl, [r2, sl, lsl #2]
   306fc:	cmp	r3, #0
   30700:	beq	307c0 <__assert_fail@plt+0x1e0d4>
   30704:	add	r3, r3, #4
   30708:	mov	r1, sl
   3070c:	mov	r0, r3
   30710:	str	r3, [sp, #12]
   30714:	bl	2aed4 <__assert_fail@plt+0x187e8>
   30718:	cmp	r0, #0
   3071c:	bne	30794 <__assert_fail@plt+0x1e0a8>
   30720:	ldr	r3, [sp, #12]
   30724:	add	r0, sp, #20
   30728:	mov	r1, r3
   3072c:	bl	2d870 <__assert_fail@plt+0x1b184>
   30730:	mov	r1, sl
   30734:	str	r0, [sp, #16]
   30738:	add	r0, sp, #20
   3073c:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   30740:	ldr	r3, [sp, #16]
   30744:	eor	r0, r0, #1
   30748:	cmp	r3, #0
   3074c:	orrne	r0, r0, #1
   30750:	tst	r0, #255	; 0xff
   30754:	bne	307a8 <__assert_fail@plt+0x1e0bc>
   30758:	ldr	sl, [r6, #100]	; 0x64
   3075c:	add	r2, sp, #20
   30760:	mov	r1, r7
   30764:	add	r0, sp, #16
   30768:	bl	3039c <__assert_fail@plt+0x1dcb0>
   3076c:	str	r0, [sl, r5, lsl #2]
   30770:	ldr	r0, [sp, #28]
   30774:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30778:	ldr	r3, [r6, #100]	; 0x64
   3077c:	ldr	r3, [r3, r5, lsl #2]
   30780:	cmp	r3, #0
   30784:	bne	30794 <__assert_fail@plt+0x1e0a8>
   30788:	ldr	r0, [sp, #16]
   3078c:	cmp	r0, #0
   30790:	bne	3060c <__assert_fail@plt+0x1df20>
   30794:	add	r4, r4, #24
   30798:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3079c:	cmp	r3, #0
   307a0:	bne	30634 <__assert_fail@plt+0x1df48>
   307a4:	b	30608 <__assert_fail@plt+0x1df1c>
   307a8:	ldr	r0, [sp, #28]
   307ac:	bl	284c4 <__assert_fail@plt+0x15dd8>
   307b0:	ldr	r0, [sp, #16]
   307b4:	cmp	r0, #0
   307b8:	moveq	r0, #12
   307bc:	b	3060c <__assert_fail@plt+0x1df20>
   307c0:	mov	r1, sl
   307c4:	add	r0, sp, #20
   307c8:	bl	2b878 <__assert_fail@plt+0x1918c>
   307cc:	cmp	r0, #0
   307d0:	str	r0, [sp, #16]
   307d4:	beq	30758 <__assert_fail@plt+0x1e06c>
   307d8:	b	3060c <__assert_fail@plt+0x1df20>
   307dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   307e0:	mov	r9, r3
   307e4:	sub	sp, sp, #84	; 0x54
   307e8:	mov	sl, #0
   307ec:	mov	r4, r0
   307f0:	mov	r7, r1
   307f4:	mov	r6, r2
   307f8:	ldr	r3, [r0, #84]	; 0x54
   307fc:	ldr	r5, [r0, #120]	; 0x78
   30800:	ldr	r8, [r1, #4]
   30804:	str	r3, [sp, #12]
   30808:	ldr	r3, [r3]
   3080c:	str	sl, [sp, #48]	; 0x30
   30810:	ldr	r3, [r3, r2, lsl #3]
   30814:	str	r3, [sp, #16]
   30818:	ldr	r3, [sp, #124]	; 0x7c
   3081c:	add	r5, r3, r5
   30820:	cmp	r5, r8
   30824:	blt	30880 <__assert_fail@plt+0x1e194>
   30828:	mvn	r3, #-2147483648	; 0x80000000
   3082c:	add	r5, r5, #1
   30830:	sub	r3, r3, r8
   30834:	cmp	r3, r5
   30838:	bge	30848 <__assert_fail@plt+0x1e15c>
   3083c:	mov	r0, #12
   30840:	add	sp, sp, #84	; 0x54
   30844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30848:	add	fp, r8, r5
   3084c:	cmn	fp, #-1073741823	; 0xc0000001
   30850:	bhi	3083c <__assert_fail@plt+0x1e150>
   30854:	lsl	r1, fp, #2
   30858:	ldr	r0, [r7, #8]
   3085c:	bl	2acc4 <__assert_fail@plt+0x185d8>
   30860:	cmp	r0, #0
   30864:	beq	3083c <__assert_fail@plt+0x1e150>
   30868:	lsl	r2, r5, #2
   3086c:	mov	r1, sl
   30870:	str	fp, [r7, #4]
   30874:	str	r0, [r7, #8]
   30878:	add	r0, r0, r8, lsl #2
   3087c:	bl	12434 <memset@plt>
   30880:	ldr	r5, [r7]
   30884:	mov	r0, r4
   30888:	ldr	r3, [r4, #100]	; 0x64
   3088c:	ldr	sl, [r7, #8]
   30890:	cmp	r5, #0
   30894:	moveq	r5, r9
   30898:	ldr	r2, [r4, #88]	; 0x58
   3089c:	str	r3, [sp, #32]
   308a0:	sub	r1, r5, #1
   308a4:	ldr	r3, [r4, #40]	; 0x28
   308a8:	str	r5, [r4, #40]	; 0x28
   308ac:	str	sl, [r4, #100]	; 0x64
   308b0:	str	r3, [sp, #36]	; 0x24
   308b4:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   308b8:	cmp	r5, r9
   308bc:	mov	r8, r0
   308c0:	bne	3093c <__assert_fail@plt+0x1e250>
   308c4:	mov	r1, r6
   308c8:	add	r0, sp, #56	; 0x38
   308cc:	bl	2b878 <__assert_fail@plt+0x1918c>
   308d0:	cmp	r0, #0
   308d4:	str	r0, [sp, #48]	; 0x30
   308d8:	bne	30840 <__assert_fail@plt+0x1e154>
   308dc:	add	r1, sp, #56	; 0x38
   308e0:	ldr	r0, [sp, #12]
   308e4:	ldr	r2, [sp, #16]
   308e8:	ldr	r3, [sp, #128]	; 0x80
   308ec:	bl	302a8 <__assert_fail@plt+0x1dbbc>
   308f0:	cmp	r0, #0
   308f4:	str	r0, [sp, #48]	; 0x30
   308f8:	bne	30a2c <__assert_fail@plt+0x1e340>
   308fc:	ldr	r3, [sp, #60]	; 0x3c
   30900:	cmp	r3, #0
   30904:	bne	30a04 <__assert_fail@plt+0x1e318>
   30908:	mov	r3, r8
   3090c:	add	r2, sp, #56	; 0x38
   30910:	ldr	r1, [sp, #12]
   30914:	add	r0, sp, #48	; 0x30
   30918:	bl	2da28 <__assert_fail@plt+0x1b33c>
   3091c:	subs	r6, r0, #0
   30920:	bne	30930 <__assert_fail@plt+0x1e244>
   30924:	ldr	r3, [sp, #48]	; 0x30
   30928:	cmp	r3, #0
   3092c:	bne	30a2c <__assert_fail@plt+0x1e340>
   30930:	ldr	r3, [r4, #100]	; 0x64
   30934:	str	r6, [r3, r5, lsl #2]
   30938:	b	30978 <__assert_fail@plt+0x1e28c>
   3093c:	ldr	r6, [sl, r5, lsl #2]
   30940:	cmp	r6, #0
   30944:	beq	309e8 <__assert_fail@plt+0x1e2fc>
   30948:	ldrb	r3, [r6, #52]	; 0x34
   3094c:	tst	r3, #64	; 0x40
   30950:	beq	309e8 <__assert_fail@plt+0x1e2fc>
   30954:	add	r1, r6, #4
   30958:	add	r0, sp, #56	; 0x38
   3095c:	bl	2d870 <__assert_fail@plt+0x1b184>
   30960:	cmp	r0, #0
   30964:	str	r0, [sp, #48]	; 0x30
   30968:	bne	30840 <__assert_fail@plt+0x1e154>
   3096c:	ldrb	r3, [r6, #52]	; 0x34
   30970:	tst	r3, #64	; 0x40
   30974:	bne	308fc <__assert_fail@plt+0x1e210>
   30978:	mov	fp, #0
   3097c:	mov	r8, fp
   30980:	ldr	r3, [sp, #124]	; 0x7c
   30984:	cmp	r5, r3
   30988:	bge	30998 <__assert_fail@plt+0x1e2ac>
   3098c:	ldr	r3, [r4, #120]	; 0x78
   30990:	cmp	r3, fp
   30994:	bge	30a3c <__assert_fail@plt+0x1e350>
   30998:	ldr	r0, [sp, #64]	; 0x40
   3099c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   309a0:	ldr	r3, [r4, #100]	; 0x64
   309a4:	ldr	r2, [sp, #124]	; 0x7c
   309a8:	ldr	r0, [r3, r2, lsl #2]
   309ac:	str	r5, [r7]
   309b0:	ldr	r3, [sp, #32]
   309b4:	cmp	r0, #0
   309b8:	addne	r0, r0, #4
   309bc:	str	r3, [r4, #100]	; 0x64
   309c0:	cmp	r0, #0
   309c4:	ldr	r3, [sp, #36]	; 0x24
   309c8:	moveq	r0, #1
   309cc:	str	r3, [r4, #40]	; 0x28
   309d0:	beq	30840 <__assert_fail@plt+0x1e154>
   309d4:	ldr	r1, [sp, #120]	; 0x78
   309d8:	bl	2aed4 <__assert_fail@plt+0x187e8>
   309dc:	clz	r0, r0
   309e0:	lsr	r0, r0, #5
   309e4:	b	30840 <__assert_fail@plt+0x1e154>
   309e8:	mov	r3, #0
   309ec:	cmp	r6, r3
   309f0:	str	r3, [sp, #56]	; 0x38
   309f4:	str	r3, [sp, #60]	; 0x3c
   309f8:	str	r3, [sp, #64]	; 0x40
   309fc:	bne	3096c <__assert_fail@plt+0x1e280>
   30a00:	b	30978 <__assert_fail@plt+0x1e28c>
   30a04:	ldr	r3, [sp, #128]	; 0x80
   30a08:	mov	r2, r5
   30a0c:	add	r1, sp, #56	; 0x38
   30a10:	mov	r0, r4
   30a14:	str	r3, [sp]
   30a18:	ldr	r3, [sp, #16]
   30a1c:	bl	305e0 <__assert_fail@plt+0x1def4>
   30a20:	cmp	r0, #0
   30a24:	str	r0, [sp, #48]	; 0x30
   30a28:	beq	30908 <__assert_fail@plt+0x1e21c>
   30a2c:	ldr	r0, [sp, #64]	; 0x40
   30a30:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30a34:	ldr	r0, [sp, #48]	; 0x30
   30a38:	b	30840 <__assert_fail@plt+0x1e154>
   30a3c:	add	r3, r5, #1
   30a40:	add	r2, r5, #1
   30a44:	str	r3, [sp, #40]	; 0x28
   30a48:	ldr	r3, [r4, #100]	; 0x64
   30a4c:	str	r8, [sp, #60]	; 0x3c
   30a50:	ldr	r1, [r3, r2, lsl #2]
   30a54:	cmp	r1, #0
   30a58:	beq	30a74 <__assert_fail@plt+0x1e388>
   30a5c:	add	r1, r1, #4
   30a60:	add	r0, sp, #56	; 0x38
   30a64:	bl	2e57c <__assert_fail@plt+0x1be90>
   30a68:	cmp	r0, #0
   30a6c:	str	r0, [sp, #48]	; 0x30
   30a70:	bne	30a2c <__assert_fail@plt+0x1e340>
   30a74:	cmp	r6, #0
   30a78:	beq	30b8c <__assert_fail@plt+0x1e4a0>
   30a7c:	ldr	sl, [r4, #84]	; 0x54
   30a80:	add	r3, sp, #68	; 0x44
   30a84:	mov	r2, #0
   30a88:	str	r2, [sp, #20]
   30a8c:	str	r3, [sp, #28]
   30a90:	str	r8, [sp, #52]	; 0x34
   30a94:	str	r8, [sp, #68]	; 0x44
   30a98:	str	r8, [sp, #72]	; 0x48
   30a9c:	str	r8, [sp, #76]	; 0x4c
   30aa0:	ldr	r3, [r6, #20]
   30aa4:	ldr	r2, [sp, #20]
   30aa8:	cmp	r2, r3
   30aac:	blt	30ac0 <__assert_fail@plt+0x1e3d4>
   30ab0:	ldr	r0, [sp, #76]	; 0x4c
   30ab4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30ab8:	str	r8, [sp, #48]	; 0x30
   30abc:	b	30b8c <__assert_fail@plt+0x1e4a0>
   30ac0:	ldr	r2, [sp, #20]
   30ac4:	ldr	r3, [r6, #24]
   30ac8:	ldr	r3, [r3, r2, lsl #2]
   30acc:	lsl	r9, r3, #3
   30ad0:	str	r3, [sp, #24]
   30ad4:	ldr	r3, [sl]
   30ad8:	add	r3, r3, r9
   30adc:	ldrb	r3, [r3, #6]
   30ae0:	tst	r3, #16
   30ae4:	bne	30b14 <__assert_fail@plt+0x1e428>
   30ae8:	ldr	r1, [sl]
   30aec:	mov	r2, r5
   30af0:	mov	r0, r4
   30af4:	add	r1, r1, r9
   30af8:	bl	2e9a8 <__assert_fail@plt+0x1c2bc>
   30afc:	cmp	r0, #0
   30b00:	bne	30c94 <__assert_fail@plt+0x1e5a8>
   30b04:	ldr	r3, [sp, #20]
   30b08:	add	r3, r3, #1
   30b0c:	str	r3, [sp, #20]
   30b10:	b	30aa0 <__assert_fail@plt+0x1e3b4>
   30b14:	mov	r3, r5
   30b18:	mov	r2, r4
   30b1c:	ldr	r1, [sp, #24]
   30b20:	mov	r0, sl
   30b24:	bl	2d39c <__assert_fail@plt+0x1acb0>
   30b28:	cmp	r0, #1
   30b2c:	ble	30cc4 <__assert_fail@plt+0x1e5d8>
   30b30:	ldr	r3, [sl, #12]
   30b34:	add	r9, r5, r0
   30b38:	ldr	r2, [sp, #24]
   30b3c:	ldr	r3, [r3, r2, lsl #2]
   30b40:	ldr	r2, [r4, #100]	; 0x64
   30b44:	ldr	r1, [r2, r9, lsl #2]
   30b48:	str	r8, [sp, #72]	; 0x48
   30b4c:	cmp	r1, #0
   30b50:	beq	30c3c <__assert_fail@plt+0x1e550>
   30b54:	add	r1, r1, #4
   30b58:	ldr	r0, [sp, #28]
   30b5c:	str	r3, [sp, #44]	; 0x2c
   30b60:	bl	2e57c <__assert_fail@plt+0x1be90>
   30b64:	cmp	r0, #0
   30b68:	str	r0, [sp, #52]	; 0x34
   30b6c:	ldr	r3, [sp, #44]	; 0x2c
   30b70:	beq	30c3c <__assert_fail@plt+0x1e550>
   30b74:	ldr	r0, [sp, #76]	; 0x4c
   30b78:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30b7c:	ldr	r3, [sp, #52]	; 0x34
   30b80:	cmp	r3, #0
   30b84:	str	r3, [sp, #48]	; 0x30
   30b88:	bne	30a2c <__assert_fail@plt+0x1e340>
   30b8c:	ldr	r3, [sp, #60]	; 0x3c
   30b90:	add	r9, r5, #1
   30b94:	cmp	r3, #0
   30b98:	beq	30be4 <__assert_fail@plt+0x1e4f8>
   30b9c:	add	r1, sp, #56	; 0x38
   30ba0:	ldr	r0, [sp, #12]
   30ba4:	ldr	r2, [sp, #16]
   30ba8:	ldr	r3, [sp, #128]	; 0x80
   30bac:	bl	302a8 <__assert_fail@plt+0x1dbbc>
   30bb0:	cmp	r0, #0
   30bb4:	str	r0, [sp, #48]	; 0x30
   30bb8:	bne	30a2c <__assert_fail@plt+0x1e340>
   30bbc:	ldr	r3, [sp, #128]	; 0x80
   30bc0:	mov	r2, r9
   30bc4:	add	r1, sp, #56	; 0x38
   30bc8:	mov	r0, r4
   30bcc:	str	r3, [sp]
   30bd0:	ldr	r3, [sp, #16]
   30bd4:	bl	305e0 <__assert_fail@plt+0x1def4>
   30bd8:	cmp	r0, #0
   30bdc:	str	r0, [sp, #48]	; 0x30
   30be0:	bne	30a2c <__assert_fail@plt+0x1e340>
   30be4:	mov	r1, r5
   30be8:	mov	r0, r4
   30bec:	ldr	r2, [r4, #88]	; 0x58
   30bf0:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   30bf4:	mov	r3, r0
   30bf8:	add	r2, sp, #56	; 0x38
   30bfc:	ldr	r1, [sp, #12]
   30c00:	add	r0, sp, #48	; 0x30
   30c04:	bl	2da28 <__assert_fail@plt+0x1b33c>
   30c08:	subs	r6, r0, #0
   30c0c:	bne	30c1c <__assert_fail@plt+0x1e530>
   30c10:	ldr	r3, [sp, #48]	; 0x30
   30c14:	cmp	r3, #0
   30c18:	bne	30a2c <__assert_fail@plt+0x1e340>
   30c1c:	ldr	r2, [sp, #40]	; 0x28
   30c20:	cmp	r6, #0
   30c24:	addeq	fp, fp, #1
   30c28:	ldr	r3, [r4, #100]	; 0x64
   30c2c:	str	r6, [r3, r2, lsl #2]
   30c30:	movne	fp, #0
   30c34:	mov	r5, r9
   30c38:	b	30980 <__assert_fail@plt+0x1e294>
   30c3c:	mov	r1, r3
   30c40:	ldr	r0, [sp, #28]
   30c44:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   30c48:	cmp	r0, #0
   30c4c:	bne	30c64 <__assert_fail@plt+0x1e578>
   30c50:	ldr	r0, [sp, #76]	; 0x4c
   30c54:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30c58:	mov	r3, #12
   30c5c:	str	r3, [sp, #48]	; 0x30
   30c60:	b	30a2c <__assert_fail@plt+0x1e340>
   30c64:	ldr	r3, [r4, #100]	; 0x64
   30c68:	mov	r1, sl
   30c6c:	add	r0, sp, #52	; 0x34
   30c70:	ldr	r2, [sp, #28]
   30c74:	str	r3, [sp, #44]	; 0x2c
   30c78:	bl	3039c <__assert_fail@plt+0x1dcb0>
   30c7c:	ldr	r3, [sp, #44]	; 0x2c
   30c80:	str	r0, [r3, r9, lsl #2]
   30c84:	ldr	r3, [r4, #100]	; 0x64
   30c88:	ldr	r3, [r3, r9, lsl #2]
   30c8c:	cmp	r3, #0
   30c90:	beq	30cb4 <__assert_fail@plt+0x1e5c8>
   30c94:	ldr	r3, [sl, #12]
   30c98:	add	r0, sp, #56	; 0x38
   30c9c:	ldr	r2, [sp, #24]
   30ca0:	ldr	r1, [r3, r2, lsl #2]
   30ca4:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   30ca8:	cmp	r0, #0
   30cac:	bne	30b04 <__assert_fail@plt+0x1e418>
   30cb0:	b	30c50 <__assert_fail@plt+0x1e564>
   30cb4:	ldr	r3, [sp, #52]	; 0x34
   30cb8:	cmp	r3, #0
   30cbc:	beq	30c94 <__assert_fail@plt+0x1e5a8>
   30cc0:	b	30b74 <__assert_fail@plt+0x1e488>
   30cc4:	cmp	r0, #0
   30cc8:	beq	30ae8 <__assert_fail@plt+0x1e3fc>
   30ccc:	b	30c94 <__assert_fail@plt+0x1e5a8>
   30cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30cd4:	sub	sp, sp, #20
   30cd8:	mov	r9, r3
   30cdc:	mov	r3, #8
   30ce0:	mov	r8, r1
   30ce4:	mov	r7, r2
   30ce8:	add	r1, r2, #8
   30cec:	ldr	r5, [sp, #56]	; 0x38
   30cf0:	mov	r4, r0
   30cf4:	str	r9, [sp]
   30cf8:	str	r5, [sp, #4]
   30cfc:	str	r3, [sp, #8]
   30d00:	ldrd	r2, [r2]
   30d04:	bl	307dc <__assert_fail@plt+0x1e0f0>
   30d08:	subs	fp, r0, #0
   30d0c:	bne	30d48 <__assert_fail@plt+0x1e65c>
   30d10:	ldrd	r2, [r4, #108]	; 0x6c
   30d14:	ldr	sl, [r8]
   30d18:	ldr	r6, [r7, #4]
   30d1c:	cmp	r2, r3
   30d20:	blt	30d80 <__assert_fail@plt+0x1e694>
   30d24:	mov	r1, #48	; 0x30
   30d28:	ldr	r0, [r4, #116]	; 0x74
   30d2c:	mul	r1, r1, r3
   30d30:	bl	2acc4 <__assert_fail@plt+0x185d8>
   30d34:	subs	r3, r0, #0
   30d38:	bne	30d54 <__assert_fail@plt+0x1e668>
   30d3c:	ldr	r0, [r4, #116]	; 0x74
   30d40:	mov	fp, #12
   30d44:	bl	284c4 <__assert_fail@plt+0x15dd8>
   30d48:	mov	r0, fp
   30d4c:	add	sp, sp, #20
   30d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d54:	ldr	ip, [r4, #108]	; 0x6c
   30d58:	mov	r0, #24
   30d5c:	mov	r1, fp
   30d60:	str	r3, [r4, #116]	; 0x74
   30d64:	ldr	r2, [r4, #112]	; 0x70
   30d68:	mul	r2, r0, r2
   30d6c:	mla	r0, r0, ip, r3
   30d70:	bl	12434 <memset@plt>
   30d74:	ldr	r3, [r4, #112]	; 0x70
   30d78:	lsl	r3, r3, #1
   30d7c:	str	r3, [r4, #112]	; 0x70
   30d80:	ldr	r2, [r4, #108]	; 0x6c
   30d84:	mov	r1, #24
   30d88:	ldr	r0, [r4, #116]	; 0x74
   30d8c:	cmp	r2, #0
   30d90:	mul	r1, r1, r2
   30d94:	ble	30db0 <__assert_fail@plt+0x1e6c4>
   30d98:	sub	r3, r1, #24
   30d9c:	add	r3, r0, r3
   30da0:	ldr	ip, [r3, #4]
   30da4:	cmp	r5, ip
   30da8:	moveq	ip, #1
   30dac:	strbeq	ip, [r3, #20]
   30db0:	cmp	sl, r6
   30db4:	add	r3, r0, r1
   30db8:	str	r9, [r0, r1]
   30dbc:	add	r2, r2, #1
   30dc0:	movne	r1, #0
   30dc4:	mvneq	r1, #0
   30dc8:	stmib	r3, {r5, sl}
   30dcc:	mov	r0, r4
   30dd0:	str	r6, [r3, #12]
   30dd4:	sub	r6, r6, sl
   30dd8:	str	r1, [r3, #16]
   30ddc:	str	r2, [r4, #108]	; 0x6c
   30de0:	mov	r2, #0
   30de4:	strb	r2, [r3, #20]
   30de8:	ldr	r3, [r4, #120]	; 0x78
   30dec:	ldr	r1, [r7, #4]
   30df0:	cmp	r3, r6
   30df4:	add	r5, r5, r1
   30df8:	strlt	r6, [r4, #120]	; 0x78
   30dfc:	ldr	r1, [r8]
   30e00:	sub	r1, r5, r1
   30e04:	add	sp, sp, #20
   30e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30e0c:	b	2c5fc <__assert_fail@plt+0x19f10>
   30e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30e14:	sub	sp, sp, #84	; 0x54
   30e18:	mov	r4, r0
   30e1c:	ldr	r9, [r0, #40]	; 0x28
   30e20:	str	r1, [sp, #56]	; 0x38
   30e24:	ldr	sl, [r0, #84]	; 0x54
   30e28:	lsl	r3, r9, #2
   30e2c:	str	r3, [sp, #44]	; 0x2c
   30e30:	mov	r3, #0
   30e34:	str	r3, [sp, #20]
   30e38:	ldr	r2, [sp, #20]
   30e3c:	ldr	r3, [sp, #56]	; 0x38
   30e40:	ldr	r3, [r3, #4]
   30e44:	cmp	r3, r2
   30e48:	movle	r3, #0
   30e4c:	ble	312a4 <__assert_fail@plt+0x1ebb8>
   30e50:	ldr	r2, [sp, #20]
   30e54:	ldr	r3, [sp, #56]	; 0x38
   30e58:	ldr	r3, [r3, #8]
   30e5c:	ldr	r3, [r3, r2, lsl #2]
   30e60:	str	r3, [sp, #16]
   30e64:	ldr	r3, [sl]
   30e68:	ldr	r2, [sp, #16]
   30e6c:	add	r3, r3, r2, lsl #3
   30e70:	ldrb	r2, [r3, #4]
   30e74:	cmp	r2, #4
   30e78:	beq	30e88 <__assert_fail@plt+0x1e79c>
   30e7c:	ldr	r3, [sp, #20]
   30e80:	add	r3, r3, #1
   30e84:	b	30e34 <__assert_fail@plt+0x1e748>
   30e88:	ldr	r5, [r3, #4]
   30e8c:	ldr	r3, [pc, #1400]	; 3140c <__assert_fail@plt+0x1ed20>
   30e90:	and	r3, r3, r5
   30e94:	cmp	r3, #0
   30e98:	beq	30ef0 <__assert_fail@plt+0x1e804>
   30e9c:	mov	r1, r9
   30ea0:	mov	r0, r4
   30ea4:	ldr	r2, [r4, #88]	; 0x58
   30ea8:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   30eac:	ubfx	r3, r5, #8, #10
   30eb0:	tst	r3, #4
   30eb4:	beq	30ec0 <__assert_fail@plt+0x1e7d4>
   30eb8:	tst	r0, #1
   30ebc:	beq	30e7c <__assert_fail@plt+0x1e790>
   30ec0:	tst	r3, #8
   30ec4:	beq	30ed0 <__assert_fail@plt+0x1e7e4>
   30ec8:	tst	r0, #1
   30ecc:	bne	30e7c <__assert_fail@plt+0x1e790>
   30ed0:	tst	r3, #32
   30ed4:	beq	30ee0 <__assert_fail@plt+0x1e7f4>
   30ed8:	tst	r0, #2
   30edc:	beq	30e7c <__assert_fail@plt+0x1e790>
   30ee0:	tst	r3, #128	; 0x80
   30ee4:	beq	30ef0 <__assert_fail@plt+0x1e804>
   30ee8:	tst	r0, #8
   30eec:	beq	30e7c <__assert_fail@plt+0x1e790>
   30ef0:	ldr	r3, [r4, #108]	; 0x6c
   30ef4:	mov	r1, r9
   30ef8:	mov	r0, r4
   30efc:	str	r3, [sp, #24]
   30f00:	bl	2b340 <__assert_fail@plt+0x18c54>
   30f04:	cmn	r0, #1
   30f08:	beq	30fa0 <__assert_fail@plt+0x1e8b4>
   30f0c:	mov	r3, #24
   30f10:	mla	r3, r0, r3, r3
   30f14:	ldr	r0, [r4, #116]	; 0x74
   30f18:	add	r0, r0, r3
   30f1c:	ldr	r3, [r0, #-24]	; 0xffffffe8
   30f20:	ldr	r2, [sp, #16]
   30f24:	cmp	r2, r3
   30f28:	bne	30f90 <__assert_fail@plt+0x1e8a4>
   30f2c:	mov	r3, #0
   30f30:	ldr	r2, [sp, #16]
   30f34:	str	r3, [sp, #64]	; 0x40
   30f38:	ldr	r3, [sp, #16]
   30f3c:	lsl	r3, r3, #2
   30f40:	str	r3, [sp, #28]
   30f44:	mov	r3, #12
   30f48:	mul	fp, r3, r2
   30f4c:	ldr	r2, [sp, #24]
   30f50:	ldr	r3, [r4, #108]	; 0x6c
   30f54:	cmp	r3, r2
   30f58:	ble	30e7c <__assert_fail@plt+0x1e790>
   30f5c:	ldr	r2, [sp, #24]
   30f60:	mov	r3, #24
   30f64:	ldr	r1, [r4, #116]	; 0x74
   30f68:	mul	r3, r3, r2
   30f6c:	add	r2, r1, r3
   30f70:	ldr	r3, [r1, r3]
   30f74:	ldr	r1, [sp, #16]
   30f78:	cmp	r3, r1
   30f7c:	beq	312ac <__assert_fail@plt+0x1ebc0>
   30f80:	ldr	r3, [sp, #24]
   30f84:	add	r3, r3, #1
   30f88:	str	r3, [sp, #24]
   30f8c:	b	30f4c <__assert_fail@plt+0x1e860>
   30f90:	add	r0, r0, #24
   30f94:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   30f98:	cmp	r3, #0
   30f9c:	bne	30f1c <__assert_fail@plt+0x1e830>
   30fa0:	ldr	r2, [sp, #16]
   30fa4:	ldr	r3, [r4, #84]	; 0x54
   30fa8:	ldr	r7, [r4, #4]
   30fac:	str	r3, [sp, #36]	; 0x24
   30fb0:	ldr	r3, [r3]
   30fb4:	ldr	r3, [r3, r2, lsl #3]
   30fb8:	str	r3, [sp, #48]	; 0x30
   30fbc:	mov	r3, #0
   30fc0:	str	r3, [sp, #28]
   30fc4:	ldr	r2, [sp, #28]
   30fc8:	ldr	r3, [r4, #124]	; 0x7c
   30fcc:	cmp	r2, r3
   30fd0:	bge	30f2c <__assert_fail@plt+0x1e840>
   30fd4:	ldr	r2, [sp, #28]
   30fd8:	ldr	r3, [r4, #132]	; 0x84
   30fdc:	ldr	r5, [r3, r2, lsl #2]
   30fe0:	ldr	r3, [sp, #36]	; 0x24
   30fe4:	ldr	r2, [r5, #4]
   30fe8:	ldr	r3, [r3]
   30fec:	ldr	r3, [r3, r2, lsl #3]
   30ff0:	ldr	r2, [sp, #48]	; 0x30
   30ff4:	cmp	r2, r3
   30ff8:	moveq	fp, r9
   30ffc:	moveq	r8, #0
   31000:	ldreq	r6, [r5]
   31004:	beq	31148 <__assert_fail@plt+0x1ea5c>
   31008:	ldr	r3, [sp, #28]
   3100c:	add	r3, r3, #1
   31010:	b	30fc0 <__assert_fail@plt+0x1e8d4>
   31014:	ldr	r3, [r4, #28]
   31018:	add	r1, r2, fp
   3101c:	cmp	r3, r1
   31020:	bge	31054 <__assert_fail@plt+0x1e968>
   31024:	str	r2, [sp, #60]	; 0x3c
   31028:	ldr	r2, [sp, #32]
   3102c:	ldr	r3, [r4, #48]	; 0x30
   31030:	cmp	r3, r2
   31034:	blt	31068 <__assert_fail@plt+0x1e97c>
   31038:	mov	r1, r2
   3103c:	mov	r0, r4
   31040:	bl	2c5fc <__assert_fail@plt+0x19f10>
   31044:	cmp	r0, #0
   31048:	bne	311a0 <__assert_fail@plt+0x1eab4>
   3104c:	ldr	r7, [r4, #4]
   31050:	ldr	r2, [sp, #60]	; 0x3c
   31054:	add	r1, r7, r6
   31058:	add	r0, r7, fp
   3105c:	bl	12158 <memcmp@plt>
   31060:	cmp	r0, #0
   31064:	beq	3117c <__assert_fail@plt+0x1ea90>
   31068:	ldr	r3, [r5, #16]
   3106c:	cmp	r8, r3
   31070:	blt	31008 <__assert_fail@plt+0x1e91c>
   31074:	cmp	r8, #0
   31078:	ble	31080 <__assert_fail@plt+0x1e994>
   3107c:	add	r6, r6, #1
   31080:	cmp	r9, r6
   31084:	blt	31008 <__assert_fail@plt+0x1e91c>
   31088:	ldr	r3, [r5]
   3108c:	sub	r3, r6, r3
   31090:	cmp	r3, #0
   31094:	ble	310e4 <__assert_fail@plt+0x1e9f8>
   31098:	ldr	r3, [r4, #28]
   3109c:	cmp	r3, fp
   310a0:	bgt	310c8 <__assert_fail@plt+0x1e9dc>
   310a4:	ldr	r3, [r4, #48]	; 0x30
   310a8:	cmp	fp, r3
   310ac:	bge	31008 <__assert_fail@plt+0x1e91c>
   310b0:	add	r1, fp, #1
   310b4:	mov	r0, r4
   310b8:	bl	2bf68 <__assert_fail@plt+0x1987c>
   310bc:	cmp	r0, #0
   310c0:	bne	311a0 <__assert_fail@plt+0x1eab4>
   310c4:	ldr	r7, [r4, #4]
   310c8:	add	r3, r7, r6
   310cc:	add	r2, fp, #1
   310d0:	ldrb	r1, [r7, fp]
   310d4:	ldrb	r3, [r3, #-1]
   310d8:	cmp	r1, r3
   310dc:	bne	31008 <__assert_fail@plt+0x1e91c>
   310e0:	mov	fp, r2
   310e4:	ldr	r3, [r4, #100]	; 0x64
   310e8:	ldr	r2, [r3, r6, lsl #2]
   310ec:	cmp	r2, #0
   310f0:	movne	r3, #0
   310f4:	ldrne	r0, [r2, #8]
   310f8:	beq	3107c <__assert_fail@plt+0x1e990>
   310fc:	cmp	r3, r0
   31100:	bge	3107c <__assert_fail@plt+0x1e990>
   31104:	ldr	r1, [r2, #12]
   31108:	ldr	r8, [r1, r3, lsl #2]
   3110c:	ldr	r1, [sp, #36]	; 0x24
   31110:	ldr	r1, [r1]
   31114:	add	ip, r1, r8, lsl #3
   31118:	ldrb	ip, [ip, #4]
   3111c:	cmp	ip, #9
   31120:	bne	31134 <__assert_fail@plt+0x1ea48>
   31124:	ldr	r1, [r1, r8, lsl #3]
   31128:	ldr	ip, [sp, #48]	; 0x30
   3112c:	cmp	ip, r1
   31130:	beq	311b0 <__assert_fail@plt+0x1eac4>
   31134:	add	r3, r3, #1
   31138:	b	310fc <__assert_fail@plt+0x1ea10>
   3113c:	ldr	fp, [sp, #32]
   31140:	add	r8, r8, #1
   31144:	ldr	r6, [sp, #40]	; 0x28
   31148:	ldr	r3, [r5, #16]
   3114c:	cmp	r8, r3
   31150:	bge	31068 <__assert_fail@plt+0x1e97c>
   31154:	ldr	r3, [r5, #20]
   31158:	ldr	r3, [r3, r8, lsl #2]
   3115c:	str	r3, [sp, #52]	; 0x34
   31160:	ldr	r3, [r3, #4]
   31164:	sub	r2, r3, r6
   31168:	str	r3, [sp, #40]	; 0x28
   3116c:	add	r3, r2, fp
   31170:	cmp	r2, #0
   31174:	str	r3, [sp, #32]
   31178:	bgt	31014 <__assert_fail@plt+0x1e928>
   3117c:	mov	r1, r5
   31180:	mov	r0, r4
   31184:	str	r9, [sp]
   31188:	ldr	r3, [sp, #16]
   3118c:	ldr	r2, [sp, #52]	; 0x34
   31190:	bl	30cd0 <__assert_fail@plt+0x1e5e4>
   31194:	cmp	r0, #1
   31198:	ldr	r7, [r4, #4]
   3119c:	bls	3113c <__assert_fail@plt+0x1ea50>
   311a0:	str	r0, [sp, #64]	; 0x40
   311a4:	ldr	r0, [sp, #64]	; 0x40
   311a8:	add	sp, sp, #84	; 0x54
   311ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   311b0:	cmn	r8, #1
   311b4:	beq	3107c <__assert_fail@plt+0x1e990>
   311b8:	ldr	r3, [r5, #8]
   311bc:	cmp	r3, #0
   311c0:	beq	31280 <__assert_fail@plt+0x1eb94>
   311c4:	mov	r3, #9
   311c8:	mov	r0, r4
   311cc:	str	r8, [sp]
   311d0:	str	r6, [sp, #4]
   311d4:	str	r3, [sp, #8]
   311d8:	ldr	r3, [r5]
   311dc:	ldr	r2, [r5, #4]
   311e0:	ldr	r1, [r5, #8]
   311e4:	bl	307dc <__assert_fail@plt+0x1e0f0>
   311e8:	cmp	r0, #1
   311ec:	beq	3107c <__assert_fail@plt+0x1e990>
   311f0:	cmp	r0, #0
   311f4:	bne	311a0 <__assert_fail@plt+0x1eab4>
   311f8:	ldr	r3, [r5, #12]
   311fc:	ldr	r7, [r5, #16]
   31200:	cmp	r7, r3
   31204:	bne	3122c <__assert_fail@plt+0x1eb40>
   31208:	lsl	r7, r7, #1
   3120c:	ldr	r0, [r5, #20]
   31210:	add	r7, r7, #1
   31214:	lsl	r1, r7, #2
   31218:	bl	2acc4 <__assert_fail@plt+0x185d8>
   3121c:	cmp	r0, #0
   31220:	beq	312a0 <__assert_fail@plt+0x1ebb4>
   31224:	str	r7, [r5, #12]
   31228:	str	r0, [r5, #20]
   3122c:	mov	r1, #20
   31230:	mov	r0, #1
   31234:	bl	27fbc <__assert_fail@plt+0x158d0>
   31238:	subs	r2, r0, #0
   3123c:	beq	312a0 <__assert_fail@plt+0x1ebb4>
   31240:	ldr	r3, [r5, #16]
   31244:	mov	r0, r4
   31248:	ldr	r1, [r5, #20]
   3124c:	str	r2, [r1, r3, lsl #2]
   31250:	add	r3, r3, #1
   31254:	mov	r1, r5
   31258:	str	r8, [r2]
   3125c:	str	r6, [r2, #4]
   31260:	str	r3, [r5, #16]
   31264:	str	r9, [sp]
   31268:	ldr	r3, [sp, #16]
   3126c:	bl	30cd0 <__assert_fail@plt+0x1e5e4>
   31270:	cmp	r0, #1
   31274:	ldr	r7, [r4, #4]
   31278:	bls	3107c <__assert_fail@plt+0x1e990>
   3127c:	b	311a0 <__assert_fail@plt+0x1eab4>
   31280:	ldr	r1, [r5]
   31284:	mov	r0, #12
   31288:	sub	r1, r6, r1
   3128c:	add	r1, r1, #1
   31290:	bl	27fbc <__assert_fail@plt+0x158d0>
   31294:	cmp	r0, #0
   31298:	str	r0, [r5, #8]
   3129c:	bne	311c4 <__assert_fail@plt+0x1ead8>
   312a0:	mov	r3, #12
   312a4:	str	r3, [sp, #64]	; 0x40
   312a8:	b	311a4 <__assert_fail@plt+0x1eab8>
   312ac:	ldr	r3, [r2, #4]
   312b0:	cmp	r3, r9
   312b4:	bne	30f80 <__assert_fail@plt+0x1e894>
   312b8:	ldr	r3, [r2, #8]
   312bc:	mov	r0, r4
   312c0:	ldr	r5, [r2, #12]
   312c4:	ldr	r6, [sl, #24]
   312c8:	subs	r2, r5, r3
   312cc:	add	r5, r5, r9
   312d0:	ldrne	r1, [sp, #28]
   312d4:	sub	r5, r5, r3
   312d8:	str	r2, [sp, #32]
   312dc:	ldreq	r2, [sl, #20]
   312e0:	ldrne	r2, [sl, #12]
   312e4:	addeq	r2, r2, fp
   312e8:	ldreq	r2, [r2, #8]
   312ec:	ldrne	r2, [r2, r1]
   312f0:	mov	r1, #12
   312f4:	ldreq	r2, [r2]
   312f8:	mla	r6, r1, r2, r6
   312fc:	sub	r1, r5, #1
   31300:	ldr	r2, [r4, #88]	; 0x58
   31304:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   31308:	ldr	r2, [sp, #44]	; 0x2c
   3130c:	mov	r3, r0
   31310:	ldr	r8, [r4, #100]	; 0x64
   31314:	ldr	r7, [r8, r2]
   31318:	ldr	r1, [r8, r5, lsl #2]
   3131c:	cmp	r7, #0
   31320:	ldrne	r7, [r7, #8]
   31324:	cmp	r1, #0
   31328:	bne	313b8 <__assert_fail@plt+0x1eccc>
   3132c:	mov	r2, r6
   31330:	mov	r1, sl
   31334:	add	r0, sp, #64	; 0x40
   31338:	bl	2da28 <__assert_fail@plt+0x1b33c>
   3133c:	str	r0, [r8, r5, lsl #2]
   31340:	ldr	r3, [r4, #100]	; 0x64
   31344:	ldr	r3, [r3, r5, lsl #2]
   31348:	cmp	r3, #0
   3134c:	bne	3135c <__assert_fail@plt+0x1ec70>
   31350:	ldr	r3, [sp, #64]	; 0x40
   31354:	cmp	r3, #0
   31358:	bne	311a4 <__assert_fail@plt+0x1eab8>
   3135c:	ldr	r3, [sp, #32]
   31360:	cmp	r3, #0
   31364:	bne	30f80 <__assert_fail@plt+0x1e894>
   31368:	ldr	r2, [sp, #44]	; 0x2c
   3136c:	ldr	r3, [r4, #100]	; 0x64
   31370:	ldr	r3, [r3, r2]
   31374:	ldr	r3, [r3, #8]
   31378:	cmp	r3, r7
   3137c:	ble	30f80 <__assert_fail@plt+0x1e894>
   31380:	mov	r2, r9
   31384:	mov	r1, r6
   31388:	mov	r0, r4
   3138c:	bl	2c51c <__assert_fail@plt+0x19e30>
   31390:	cmp	r0, #0
   31394:	str	r0, [sp, #64]	; 0x40
   31398:	bne	311a4 <__assert_fail@plt+0x1eab8>
   3139c:	mov	r1, r6
   313a0:	mov	r0, r4
   313a4:	bl	30e10 <__assert_fail@plt+0x1e724>
   313a8:	cmp	r0, #0
   313ac:	str	r0, [sp, #64]	; 0x40
   313b0:	beq	30f80 <__assert_fail@plt+0x1e894>
   313b4:	b	311a4 <__assert_fail@plt+0x1eab8>
   313b8:	mov	r2, r6
   313bc:	add	r0, sp, #68	; 0x44
   313c0:	ldr	r1, [r1, #40]	; 0x28
   313c4:	str	r3, [sp, #36]	; 0x24
   313c8:	bl	2d8e8 <__assert_fail@plt+0x1b1fc>
   313cc:	cmp	r0, #0
   313d0:	str	r0, [sp, #64]	; 0x40
   313d4:	ldr	r3, [sp, #36]	; 0x24
   313d8:	beq	313e8 <__assert_fail@plt+0x1ecfc>
   313dc:	ldr	r0, [sp, #76]	; 0x4c
   313e0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   313e4:	b	311a4 <__assert_fail@plt+0x1eab8>
   313e8:	ldr	r8, [r4, #100]	; 0x64
   313ec:	add	r2, sp, #68	; 0x44
   313f0:	mov	r1, sl
   313f4:	add	r0, sp, #64	; 0x40
   313f8:	bl	2da28 <__assert_fail@plt+0x1b33c>
   313fc:	str	r0, [r8, r5, lsl #2]
   31400:	ldr	r0, [sp, #76]	; 0x4c
   31404:	bl	284c4 <__assert_fail@plt+0x15dd8>
   31408:	b	31340 <__assert_fail@plt+0x1ec54>
   3140c:	andeq	pc, r3, r0, lsl #30
   31410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31414:	mov	r4, r2
   31418:	sub	sp, sp, #20
   3141c:	mov	r8, r0
   31420:	mov	r5, r1
   31424:	ldr	r6, [r1, #40]	; 0x28
   31428:	ldr	sl, [r1, #84]	; 0x54
   3142c:	ldr	r2, [r1, #104]	; 0x68
   31430:	ldr	r3, [r1, #100]	; 0x64
   31434:	cmp	r2, r6
   31438:	strlt	r4, [r3, r6, lsl #2]
   3143c:	strlt	r6, [r1, #104]	; 0x68
   31440:	blt	314e0 <__assert_fail@plt+0x1edf4>
   31444:	ldr	r2, [r3, r6, lsl #2]
   31448:	cmp	r2, #0
   3144c:	streq	r4, [r3, r6, lsl #2]
   31450:	beq	314e0 <__assert_fail@plt+0x1edf4>
   31454:	cmp	r4, #0
   31458:	add	r7, sp, #4
   3145c:	ldr	r2, [r2, #40]	; 0x28
   31460:	beq	31490 <__assert_fail@plt+0x1eda4>
   31464:	ldr	r9, [r4, #40]	; 0x28
   31468:	mov	r0, r7
   3146c:	mov	r1, r9
   31470:	bl	2d8e8 <__assert_fail@plt+0x1b1fc>
   31474:	cmp	r0, #0
   31478:	str	r0, [r8]
   3147c:	beq	3149c <__assert_fail@plt+0x1edb0>
   31480:	mov	r4, #0
   31484:	mov	r0, r4
   31488:	add	sp, sp, #20
   3148c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31490:	ldm	r2, {r0, r1, r2}
   31494:	mov	r9, r4
   31498:	stm	r7, {r0, r1, r2}
   3149c:	mov	r0, r5
   314a0:	ldr	r1, [r5, #40]	; 0x28
   314a4:	ldr	r2, [r5, #88]	; 0x58
   314a8:	sub	r1, r1, #1
   314ac:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   314b0:	ldr	fp, [r5, #100]	; 0x64
   314b4:	mov	r3, r0
   314b8:	mov	r2, r7
   314bc:	mov	r1, sl
   314c0:	mov	r0, r8
   314c4:	bl	2da28 <__assert_fail@plt+0x1b33c>
   314c8:	cmp	r9, #0
   314cc:	mov	r4, r0
   314d0:	str	r0, [fp, r6, lsl #2]
   314d4:	beq	314e0 <__assert_fail@plt+0x1edf4>
   314d8:	ldr	r0, [sp, #12]
   314dc:	bl	284c4 <__assert_fail@plt+0x15dd8>
   314e0:	ldr	r3, [sl, #76]	; 0x4c
   314e4:	cmp	r3, #0
   314e8:	beq	31484 <__assert_fail@plt+0x1ed98>
   314ec:	cmp	r4, #0
   314f0:	beq	31480 <__assert_fail@plt+0x1ed94>
   314f4:	add	r7, r4, #4
   314f8:	mov	r2, r6
   314fc:	mov	r1, r7
   31500:	mov	r0, r5
   31504:	bl	2c51c <__assert_fail@plt+0x19e30>
   31508:	cmp	r0, #0
   3150c:	str	r0, [r8]
   31510:	bne	31480 <__assert_fail@plt+0x1ed94>
   31514:	ldrb	r3, [r4, #52]	; 0x34
   31518:	tst	r3, #64	; 0x40
   3151c:	beq	31484 <__assert_fail@plt+0x1ed98>
   31520:	mov	r1, r7
   31524:	mov	r0, r5
   31528:	bl	30e10 <__assert_fail@plt+0x1e724>
   3152c:	cmp	r0, #0
   31530:	str	r0, [r8]
   31534:	bne	31480 <__assert_fail@plt+0x1ed94>
   31538:	ldr	r3, [r5, #100]	; 0x64
   3153c:	ldr	r4, [r3, r6, lsl #2]
   31540:	b	31484 <__assert_fail@plt+0x1ed98>
   31544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31548:	mov	r4, r3
   3154c:	sub	sp, sp, #84	; 0x54
   31550:	mov	r3, #0
   31554:	mov	r5, r2
   31558:	mov	r7, r0
   3155c:	mov	r6, r1
   31560:	str	r3, [sp, #48]	; 0x30
   31564:	lsl	r3, r2, #2
   31568:	ldr	r8, [r0, #84]	; 0x54
   3156c:	str	r3, [sp, #24]
   31570:	ldr	r3, [r0, #100]	; 0x64
   31574:	ldr	fp, [r3, r2, lsl #2]
   31578:	ldr	r3, [r4, #4]
   3157c:	cmp	fp, #0
   31580:	addne	fp, fp, #4
   31584:	cmp	r3, #0
   31588:	ldreq	r2, [r1]
   3158c:	streq	r3, [r2, r5, lsl #2]
   31590:	beq	31888 <__assert_fail@plt+0x1f19c>
   31594:	cmp	fp, #0
   31598:	bne	315cc <__assert_fail@plt+0x1eee0>
   3159c:	mov	r2, r4
   315a0:	mov	r1, r8
   315a4:	ldr	r9, [r6]
   315a8:	add	r0, sp, #48	; 0x30
   315ac:	bl	3039c <__assert_fail@plt+0x1dcb0>
   315b0:	ldr	r3, [sp, #48]	; 0x30
   315b4:	str	r0, [r9, r5, lsl #2]
   315b8:	cmp	r3, #0
   315bc:	beq	31888 <__assert_fail@plt+0x1f19c>
   315c0:	mov	r0, r3
   315c4:	add	sp, sp, #84	; 0x54
   315c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   315cc:	mov	r3, #0
   315d0:	mov	r2, r4
   315d4:	mov	r1, r8
   315d8:	add	r0, sp, #52	; 0x34
   315dc:	str	r3, [sp, #52]	; 0x34
   315e0:	bl	3039c <__assert_fail@plt+0x1dcb0>
   315e4:	ldr	r3, [sp, #52]	; 0x34
   315e8:	cmp	r3, #0
   315ec:	bne	31614 <__assert_fail@plt+0x1ef28>
   315f0:	ldr	r3, [r0, #28]
   315f4:	add	sl, r0, #28
   315f8:	cmp	r3, #0
   315fc:	beq	31650 <__assert_fail@plt+0x1ef64>
   31600:	mov	r2, sl
   31604:	mov	r1, fp
   31608:	mov	r0, r4
   3160c:	bl	2dc9c <__assert_fail@plt+0x1b5b0>
   31610:	mov	r3, r0
   31614:	cmp	r3, #0
   31618:	str	r3, [sp, #48]	; 0x30
   3161c:	bne	315c0 <__assert_fail@plt+0x1eed4>
   31620:	ldr	r2, [r6, #20]
   31624:	cmp	r2, #0
   31628:	ldrne	r2, [r7, #116]	; 0x74
   3162c:	strne	r2, [sp, #16]
   31630:	beq	3159c <__assert_fail@plt+0x1eeb0>
   31634:	str	r3, [sp, #12]
   31638:	ldr	r2, [sp, #12]
   3163c:	ldr	r3, [r6, #20]
   31640:	cmp	r2, r3
   31644:	blt	316b0 <__assert_fail@plt+0x1efc4>
   31648:	mov	r3, #0
   3164c:	b	3179c <__assert_fail@plt+0x1f0b0>
   31650:	mov	r0, sl
   31654:	ldr	r1, [r4, #4]
   31658:	bl	2b8b8 <__assert_fail@plt+0x191cc>
   3165c:	cmp	r0, #0
   31660:	mov	r9, r0
   31664:	str	r0, [sp, #52]	; 0x34
   31668:	movne	r3, #12
   3166c:	bne	315c0 <__assert_fail@plt+0x1eed4>
   31670:	ldr	r3, [r4, #4]
   31674:	mov	r2, #12
   31678:	cmp	r9, r3
   3167c:	bge	31600 <__assert_fail@plt+0x1ef14>
   31680:	ldr	r3, [r4, #8]
   31684:	mov	r0, sl
   31688:	ldr	r1, [r3, r9, lsl #2]
   3168c:	ldr	r3, [r8, #28]
   31690:	mla	r1, r2, r1, r3
   31694:	bl	2e57c <__assert_fail@plt+0x1be90>
   31698:	cmp	r0, #0
   3169c:	str	r0, [sp, #52]	; 0x34
   316a0:	addeq	r9, r9, #1
   316a4:	beq	31670 <__assert_fail@plt+0x1ef84>
   316a8:	mov	r3, #12
   316ac:	b	31614 <__assert_fail@plt+0x1ef28>
   316b0:	ldr	r2, [sp, #12]
   316b4:	ldr	r3, [r6, #24]
   316b8:	ldr	r3, [r3, r2, lsl #2]
   316bc:	mov	r2, #24
   316c0:	mul	r3, r2, r3
   316c4:	ldr	r2, [sp, #16]
   316c8:	add	r2, r2, r3
   316cc:	ldr	r1, [r2, #8]
   316d0:	cmp	r5, r1
   316d4:	bgt	316e4 <__assert_fail@plt+0x1eff8>
   316d8:	ldr	r3, [sp, #12]
   316dc:	add	r3, r3, #1
   316e0:	b	31634 <__assert_fail@plt+0x1ef48>
   316e4:	ldr	r1, [r2, #4]
   316e8:	cmp	r5, r1
   316ec:	bgt	316d8 <__assert_fail@plt+0x1efec>
   316f0:	ldr	r1, [sp, #16]
   316f4:	ldr	r0, [r8]
   316f8:	ldr	r3, [r1, r3]
   316fc:	ldr	r9, [r0, r3, lsl #3]
   31700:	ldr	r3, [r2, #12]
   31704:	cmp	r5, r3
   31708:	movne	sl, #0
   3170c:	bne	31850 <__assert_fail@plt+0x1f164>
   31710:	ldr	lr, [r4, #4]
   31714:	mvn	sl, #0
   31718:	mov	r2, #0
   3171c:	mov	r1, sl
   31720:	cmp	r2, lr
   31724:	blt	31740 <__assert_fail@plt+0x1f054>
   31728:	cmp	r1, #0
   3172c:	bge	31784 <__assert_fail@plt+0x1f098>
   31730:	cmp	sl, #0
   31734:	blt	316d8 <__assert_fail@plt+0x1efec>
   31738:	mov	r9, #0
   3173c:	b	3181c <__assert_fail@plt+0x1f130>
   31740:	ldr	r3, [r4, #8]
   31744:	ldr	r3, [r3, r2, lsl #2]
   31748:	add	ip, r0, r3, lsl #3
   3174c:	ldrb	ip, [ip, #4]
   31750:	cmp	ip, #8
   31754:	bne	3176c <__assert_fail@plt+0x1f080>
   31758:	ldr	ip, [r0, r3, lsl #3]
   3175c:	cmp	r9, ip
   31760:	moveq	r1, r3
   31764:	add	r2, r2, #1
   31768:	b	31720 <__assert_fail@plt+0x1f034>
   3176c:	cmp	ip, #9
   31770:	bne	31764 <__assert_fail@plt+0x1f078>
   31774:	ldr	ip, [r0, r3, lsl #3]
   31778:	cmp	r9, ip
   3177c:	moveq	sl, r3
   31780:	b	31764 <__assert_fail@plt+0x1f078>
   31784:	mov	r3, fp
   31788:	mov	r2, r4
   3178c:	mov	r0, r8
   31790:	bl	2de00 <__assert_fail@plt+0x1b714>
   31794:	subs	r3, r0, #0
   31798:	beq	31730 <__assert_fail@plt+0x1f044>
   3179c:	cmp	r3, #0
   317a0:	str	r3, [sp, #48]	; 0x30
   317a4:	beq	3159c <__assert_fail@plt+0x1eeb0>
   317a8:	b	315c0 <__assert_fail@plt+0x1eed4>
   317ac:	ldr	r3, [r4, #8]
   317b0:	mov	r1, sl
   317b4:	ldr	r0, [r8, #28]
   317b8:	ldr	r3, [r3, r9, lsl #2]
   317bc:	str	r3, [sp, #20]
   317c0:	mov	r3, #12
   317c4:	ldr	r2, [sp, #20]
   317c8:	mul	r3, r3, r2
   317cc:	add	r0, r0, r3
   317d0:	str	r3, [sp, #28]
   317d4:	bl	2aed4 <__assert_fail@plt+0x187e8>
   317d8:	cmp	r0, #0
   317dc:	bne	31818 <__assert_fail@plt+0x1f12c>
   317e0:	ldr	r0, [r8, #24]
   317e4:	ldr	r3, [sp, #28]
   317e8:	add	r0, r0, r3
   317ec:	bl	2aed4 <__assert_fail@plt+0x187e8>
   317f0:	cmp	r0, #0
   317f4:	bne	31818 <__assert_fail@plt+0x1f12c>
   317f8:	mov	r3, fp
   317fc:	mov	r2, r4
   31800:	ldr	r1, [sp, #20]
   31804:	mov	r0, r8
   31808:	bl	2de00 <__assert_fail@plt+0x1b714>
   3180c:	subs	r3, r0, #0
   31810:	bne	3179c <__assert_fail@plt+0x1f0b0>
   31814:	sub	r9, r9, #1
   31818:	add	r9, r9, #1
   3181c:	ldr	r3, [r4, #4]
   31820:	cmp	r9, r3
   31824:	blt	317ac <__assert_fail@plt+0x1f0c0>
   31828:	b	316d8 <__assert_fail@plt+0x1efec>
   3182c:	ldr	r3, [r4, #8]
   31830:	ldr	r2, [r8]
   31834:	ldr	r1, [r3, sl, lsl #2]
   31838:	add	r3, r2, r1, lsl #3
   3183c:	ldrb	r3, [r3, #4]
   31840:	sub	r3, r3, #8
   31844:	cmp	r3, #1
   31848:	bls	31860 <__assert_fail@plt+0x1f174>
   3184c:	add	sl, sl, #1
   31850:	ldr	r3, [r4, #4]
   31854:	cmp	sl, r3
   31858:	blt	3182c <__assert_fail@plt+0x1f140>
   3185c:	b	316d8 <__assert_fail@plt+0x1efec>
   31860:	ldr	r3, [r2, r1, lsl #3]
   31864:	cmp	r9, r3
   31868:	bne	3184c <__assert_fail@plt+0x1f160>
   3186c:	mov	r3, fp
   31870:	mov	r2, r4
   31874:	mov	r0, r8
   31878:	bl	2de00 <__assert_fail@plt+0x1b714>
   3187c:	subs	r3, r0, #0
   31880:	beq	3184c <__assert_fail@plt+0x1f160>
   31884:	b	3179c <__assert_fail@plt+0x1f0b0>
   31888:	cmp	fp, #0
   3188c:	moveq	r3, fp
   31890:	beq	315c0 <__assert_fail@plt+0x1eed4>
   31894:	ldr	r3, [r7, #100]	; 0x64
   31898:	ldr	r3, [r3, r5, lsl #2]
   3189c:	ldrb	r3, [r3, #52]	; 0x34
   318a0:	ands	r3, r3, #64	; 0x40
   318a4:	beq	315c0 <__assert_fail@plt+0x1eed4>
   318a8:	mov	r1, r5
   318ac:	mov	r0, r7
   318b0:	bl	2b340 <__assert_fail@plt+0x18c54>
   318b4:	cmn	r0, #1
   318b8:	mov	r2, #0
   318bc:	str	r0, [sp, #16]
   318c0:	mov	r3, r0
   318c4:	moveq	r3, r2
   318c8:	beq	315c0 <__assert_fail@plt+0x1eed4>
   318cc:	ldr	r1, [sp, #16]
   318d0:	mov	r3, #24
   318d4:	str	r2, [sp, #12]
   318d8:	ldr	sl, [r7, #84]	; 0x54
   318dc:	str	r2, [sp, #52]	; 0x34
   318e0:	mul	r3, r3, r1
   318e4:	str	r3, [sp, #28]
   318e8:	add	r3, r6, #16
   318ec:	str	r3, [sp, #20]
   318f0:	ldr	r3, [fp, #4]
   318f4:	ldr	r2, [sp, #12]
   318f8:	cmp	r2, r3
   318fc:	movge	r3, #0
   31900:	bge	31a3c <__assert_fail@plt+0x1f350>
   31904:	ldr	r3, [fp, #8]
   31908:	ldr	r2, [sp, #12]
   3190c:	ldr	r8, [r3, r2, lsl #2]
   31910:	ldr	r3, [sl]
   31914:	ldr	r2, [r6, #8]
   31918:	add	r3, r3, r8, lsl #3
   3191c:	cmp	r8, r2
   31920:	ldrb	r3, [r3, #4]
   31924:	bne	31944 <__assert_fail@plt+0x1f258>
   31928:	ldr	r2, [r6, #12]
   3192c:	cmp	r5, r2
   31930:	bne	31944 <__assert_fail@plt+0x1f258>
   31934:	ldr	r3, [sp, #12]
   31938:	add	r3, r3, #1
   3193c:	str	r3, [sp, #12]
   31940:	b	318f0 <__assert_fail@plt+0x1f204>
   31944:	cmp	r3, #4
   31948:	bne	31934 <__assert_fail@plt+0x1f248>
   3194c:	ldr	r4, [r7, #116]	; 0x74
   31950:	ldr	r3, [sp, #28]
   31954:	ldr	r9, [sp, #16]
   31958:	add	r4, r4, r3
   3195c:	mov	r3, #12
   31960:	mul	r3, r3, r8
   31964:	str	r3, [sp, #36]	; 0x24
   31968:	lsl	r3, r8, #2
   3196c:	str	r3, [sp, #32]
   31970:	ldr	r3, [r4]
   31974:	cmp	r8, r3
   31978:	bne	31aec <__assert_fail@plt+0x1f400>
   3197c:	ldrd	r2, [r4, #8]
   31980:	sub	r3, r3, r2
   31984:	cmp	r3, #0
   31988:	add	r2, r5, r3
   3198c:	ldreq	r1, [sp, #36]	; 0x24
   31990:	ldreq	r3, [sl, #20]
   31994:	ldrne	r1, [sp, #32]
   31998:	ldrne	r3, [sl, #12]
   3199c:	addeq	r3, r3, r1
   319a0:	ldreq	r3, [r3, #8]
   319a4:	ldrne	r3, [r3, r1]
   319a8:	ldr	r1, [r6, #12]
   319ac:	ldreq	r3, [r3]
   319b0:	cmp	r2, r1
   319b4:	bgt	31aec <__assert_fail@plt+0x1f400>
   319b8:	ldr	r1, [r6]
   319bc:	str	r2, [sp, #44]	; 0x2c
   319c0:	ldr	r0, [r1, r2, lsl #2]
   319c4:	cmp	r0, #0
   319c8:	beq	31aec <__assert_fail@plt+0x1f400>
   319cc:	mov	r1, r3
   319d0:	add	r0, r0, #4
   319d4:	str	r3, [sp, #40]	; 0x28
   319d8:	bl	2aed4 <__assert_fail@plt+0x187e8>
   319dc:	cmp	r0, #0
   319e0:	beq	31aec <__assert_fail@plt+0x1f400>
   319e4:	mov	r0, r7
   319e8:	ldr	r1, [sp, #20]
   319ec:	ldr	r3, [sp, #40]	; 0x28
   319f0:	ldr	r2, [sp, #44]	; 0x2c
   319f4:	str	r3, [sp]
   319f8:	mov	r3, r5
   319fc:	str	r2, [sp, #4]
   31a00:	mov	r2, r8
   31a04:	bl	2b3ac <__assert_fail@plt+0x18cc0>
   31a08:	cmp	r0, #0
   31a0c:	bne	31aec <__assert_fail@plt+0x1f400>
   31a10:	ldr	r3, [sp, #52]	; 0x34
   31a14:	cmp	r3, #0
   31a18:	beq	31a5c <__assert_fail@plt+0x1f370>
   31a1c:	mov	r1, r9
   31a20:	add	r0, sp, #68	; 0x44
   31a24:	str	r8, [sp, #60]	; 0x3c
   31a28:	str	r5, [sp, #64]	; 0x40
   31a2c:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   31a30:	cmp	r0, #0
   31a34:	bne	31a90 <__assert_fail@plt+0x1f3a4>
   31a38:	mov	r3, #12
   31a3c:	ldr	r2, [sp, #52]	; 0x34
   31a40:	cmp	r2, #0
   31a44:	beq	315c0 <__assert_fail@plt+0x1eed4>
   31a48:	ldr	r0, [sp, #76]	; 0x4c
   31a4c:	str	r3, [sp, #12]
   31a50:	bl	284c4 <__assert_fail@plt+0x15dd8>
   31a54:	ldr	r3, [sp, #12]
   31a58:	b	315c0 <__assert_fail@plt+0x1eed4>
   31a5c:	mov	lr, r6
   31a60:	add	ip, sp, #52	; 0x34
   31a64:	ldm	lr!, {r0, r1, r2, r3}
   31a68:	stmia	ip!, {r0, r1, r2, r3}
   31a6c:	ldr	r3, [sp, #20]
   31a70:	ldm	r3, {r0, r1, r2}
   31a74:	stm	ip, {r0, r1, r2}
   31a78:	mov	r1, r3
   31a7c:	add	r0, sp, #68	; 0x44
   31a80:	bl	2d870 <__assert_fail@plt+0x1b184>
   31a84:	subs	r3, r0, #0
   31a88:	beq	31a1c <__assert_fail@plt+0x1f330>
   31a8c:	b	31a3c <__assert_fail@plt+0x1f350>
   31a90:	ldr	r2, [sp, #24]
   31a94:	add	r1, sp, #52	; 0x34
   31a98:	mov	r0, r7
   31a9c:	ldr	r3, [sp, #52]	; 0x34
   31aa0:	ldr	r4, [r3, r2]
   31aa4:	bl	31b24 <__assert_fail@plt+0x1f438>
   31aa8:	subs	r3, r0, #0
   31aac:	bne	31a3c <__assert_fail@plt+0x1f350>
   31ab0:	ldr	r1, [r6, #4]
   31ab4:	cmp	r1, #0
   31ab8:	bne	31b08 <__assert_fail@plt+0x1f41c>
   31abc:	ldr	r2, [sp, #24]
   31ac0:	mov	r1, r9
   31ac4:	add	r0, sp, #68	; 0x44
   31ac8:	ldr	r3, [sp, #52]	; 0x34
   31acc:	str	r4, [r3, r2]
   31ad0:	mov	r4, #24
   31ad4:	bl	2aed4 <__assert_fail@plt+0x187e8>
   31ad8:	sub	r1, r0, #1
   31adc:	add	r0, sp, #68	; 0x44
   31ae0:	bl	2d604 <__assert_fail@plt+0x1af18>
   31ae4:	ldr	r3, [r7, #116]	; 0x74
   31ae8:	mla	r4, r4, r9, r3
   31aec:	ldrb	r3, [r4, #20]
   31af0:	add	r9, r9, #1
   31af4:	add	r2, r4, #24
   31af8:	cmp	r3, #0
   31afc:	beq	31934 <__assert_fail@plt+0x1f248>
   31b00:	mov	r4, r2
   31b04:	b	31970 <__assert_fail@plt+0x1f284>
   31b08:	add	r3, r5, #1
   31b0c:	mov	r0, sl
   31b10:	ldr	r2, [sp, #52]	; 0x34
   31b14:	bl	3054c <__assert_fail@plt+0x1de60>
   31b18:	subs	r3, r0, #0
   31b1c:	beq	31abc <__assert_fail@plt+0x1f3d0>
   31b20:	b	31a3c <__assert_fail@plt+0x1f350>
   31b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31b28:	sub	sp, sp, #52	; 0x34
   31b2c:	mov	r6, r0
   31b30:	mov	r5, r1
   31b34:	add	r0, sp, #36	; 0x24
   31b38:	ldr	r4, [r1, #12]
   31b3c:	ldr	r1, [r1, #8]
   31b40:	bl	2b878 <__assert_fail@plt+0x1918c>
   31b44:	subs	r8, r0, #0
   31b48:	bne	31b7c <__assert_fail@plt+0x1f490>
   31b4c:	add	r3, sp, #36	; 0x24
   31b50:	mov	r2, r4
   31b54:	mov	r1, r5
   31b58:	mov	r0, r6
   31b5c:	bl	31544 <__assert_fail@plt+0x1ee58>
   31b60:	subs	r8, r0, #0
   31b64:	addeq	r3, r5, #16
   31b68:	moveq	fp, r8
   31b6c:	streq	r3, [sp, #28]
   31b70:	beq	31d44 <__assert_fail@plt+0x1f658>
   31b74:	ldr	r0, [sp, #44]	; 0x2c
   31b78:	bl	284c4 <__assert_fail@plt+0x15dd8>
   31b7c:	mov	r0, r8
   31b80:	add	sp, sp, #52	; 0x34
   31b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b88:	mov	r3, #0
   31b8c:	ldr	r2, [sp, #16]
   31b90:	sub	r4, r4, #1
   31b94:	str	r3, [sp, #40]	; 0x28
   31b98:	ldr	r3, [r6, #100]	; 0x64
   31b9c:	add	r3, r3, r2
   31ba0:	ldr	sl, [r3, #-4]
   31ba4:	cmp	sl, #0
   31ba8:	movne	r3, #0
   31bac:	ldrne	r9, [r6, #84]	; 0x54
   31bb0:	bne	31c2c <__assert_fail@plt+0x1f540>
   31bb4:	add	r3, sp, #36	; 0x24
   31bb8:	mov	r2, r4
   31bbc:	mov	r1, r5
   31bc0:	mov	r0, r6
   31bc4:	bl	31544 <__assert_fail@plt+0x1ee58>
   31bc8:	cmp	r0, #0
   31bcc:	beq	31d44 <__assert_fail@plt+0x1f658>
   31bd0:	mov	r8, r0
   31bd4:	b	31b74 <__assert_fail@plt+0x1f488>
   31bd8:	ldr	r2, [sp, #12]
   31bdc:	ldr	r3, [sl, #24]
   31be0:	ldr	r7, [r3, r2, lsl #2]
   31be4:	lsl	r3, r7, #3
   31be8:	lsl	r2, r7, #3
   31bec:	str	r3, [sp, #20]
   31bf0:	ldr	r3, [r9]
   31bf4:	add	r3, r3, r2
   31bf8:	ldrb	r3, [r3, #6]
   31bfc:	tst	r3, #16
   31c00:	bne	31c44 <__assert_fail@plt+0x1f558>
   31c04:	ldr	r1, [r9]
   31c08:	lsl	r3, r7, #3
   31c0c:	mov	r2, r4
   31c10:	mov	r0, r6
   31c14:	add	r1, r1, r3
   31c18:	bl	2e9a8 <__assert_fail@plt+0x1c2bc>
   31c1c:	cmp	r0, #0
   31c20:	bne	31ce4 <__assert_fail@plt+0x1f5f8>
   31c24:	ldr	r3, [sp, #12]
   31c28:	add	r3, r3, #1
   31c2c:	str	r3, [sp, #12]
   31c30:	ldr	r2, [sp, #12]
   31c34:	ldr	r3, [sl, #20]
   31c38:	cmp	r2, r3
   31c3c:	blt	31bd8 <__assert_fail@plt+0x1f4ec>
   31c40:	b	31bb4 <__assert_fail@plt+0x1f4c8>
   31c44:	ldr	r3, [r5, #12]
   31c48:	mov	r2, r6
   31c4c:	mov	r1, r7
   31c50:	str	r3, [sp, #24]
   31c54:	ldr	r3, [r6, #84]	; 0x54
   31c58:	str	r3, [sp, #20]
   31c5c:	mov	r3, r4
   31c60:	ldr	r0, [sp, #20]
   31c64:	bl	2d39c <__assert_fail@plt+0x1acb0>
   31c68:	subs	r3, r0, #0
   31c6c:	ble	31cdc <__assert_fail@plt+0x1f5f0>
   31c70:	ldr	r1, [sp, #24]
   31c74:	add	r2, r4, r3
   31c78:	cmp	r1, r2
   31c7c:	blt	31cb4 <__assert_fail@plt+0x1f5c8>
   31c80:	ldr	r1, [r5]
   31c84:	str	r3, [sp, #24]
   31c88:	ldr	r0, [r1, r2, lsl #2]
   31c8c:	cmp	r0, #0
   31c90:	beq	31c04 <__assert_fail@plt+0x1f518>
   31c94:	ldr	r3, [sp, #20]
   31c98:	add	r0, r0, #4
   31c9c:	ldr	r2, [r3, #12]
   31ca0:	ldr	r1, [r2, r7, lsl #2]
   31ca4:	bl	2aed4 <__assert_fail@plt+0x187e8>
   31ca8:	cmp	r0, #0
   31cac:	ldrne	r3, [sp, #24]
   31cb0:	beq	31c04 <__assert_fail@plt+0x1f518>
   31cb4:	ldr	r2, [r5, #20]
   31cb8:	cmp	r2, #0
   31cbc:	bne	31d18 <__assert_fail@plt+0x1f62c>
   31cc0:	mov	r1, r7
   31cc4:	add	r0, sp, #36	; 0x24
   31cc8:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   31ccc:	cmp	r0, #0
   31cd0:	bne	31c24 <__assert_fail@plt+0x1f538>
   31cd4:	mov	r8, #12
   31cd8:	b	31b74 <__assert_fail@plt+0x1f488>
   31cdc:	beq	31c04 <__assert_fail@plt+0x1f518>
   31ce0:	b	31cb4 <__assert_fail@plt+0x1f5c8>
   31ce4:	ldr	r3, [r5]
   31ce8:	ldr	r2, [sp, #16]
   31cec:	ldr	r0, [r3, r2]
   31cf0:	cmp	r0, #0
   31cf4:	beq	31c24 <__assert_fail@plt+0x1f538>
   31cf8:	ldr	r3, [r9, #12]
   31cfc:	add	r0, r0, #4
   31d00:	ldr	r1, [r3, r7, lsl #2]
   31d04:	bl	2aed4 <__assert_fail@plt+0x187e8>
   31d08:	cmp	r0, #0
   31d0c:	beq	31c24 <__assert_fail@plt+0x1f538>
   31d10:	mov	r3, #1
   31d14:	b	31cb4 <__assert_fail@plt+0x1f5c8>
   31d18:	ldr	r2, [r9, #12]
   31d1c:	add	r3, r4, r3
   31d20:	mov	r0, r6
   31d24:	str	r7, [sp]
   31d28:	str	r4, [sp, #4]
   31d2c:	ldr	r1, [sp, #28]
   31d30:	ldr	r2, [r2, r7, lsl #2]
   31d34:	bl	2b3ac <__assert_fail@plt+0x18cc0>
   31d38:	cmp	r0, #0
   31d3c:	beq	31cc0 <__assert_fail@plt+0x1f5d4>
   31d40:	b	31c24 <__assert_fail@plt+0x1f538>
   31d44:	cmp	r4, #0
   31d48:	ble	31b74 <__assert_fail@plt+0x1f488>
   31d4c:	ldr	r0, [r5]
   31d50:	lsl	r3, r4, #2
   31d54:	str	r3, [sp, #16]
   31d58:	ldr	r3, [r0, r4, lsl #2]
   31d5c:	cmp	r3, #0
   31d60:	ldr	r3, [r6, #120]	; 0x78
   31d64:	addeq	fp, fp, #1
   31d68:	movne	fp, #0
   31d6c:	cmp	r3, fp
   31d70:	bge	31b88 <__assert_fail@plt+0x1f49c>
   31d74:	mov	r1, #0
   31d78:	ldr	r2, [sp, #16]
   31d7c:	bl	12434 <memset@plt>
   31d80:	b	31b74 <__assert_fail@plt+0x1f488>
   31d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d88:	sub	sp, sp, #412	; 0x19c
   31d8c:	mov	sl, r0
   31d90:	add	r4, sp, #448	; 0x1c0
   31d94:	mov	r7, r3
   31d98:	str	r2, [sp, #24]
   31d9c:	mov	r2, #136	; 0x88
   31da0:	str	r1, [sp, #40]	; 0x28
   31da4:	mov	r1, #0
   31da8:	ldr	fp, [r0]
   31dac:	add	r0, sp, #132	; 0x84
   31db0:	ldm	r4, {r4, r6, r8}
   31db4:	ldr	r5, [sp, #460]	; 0x1cc
   31db8:	bl	12434 <memset@plt>
   31dbc:	ldr	r3, [sl, #16]
   31dc0:	cmp	r3, #0
   31dc4:	str	r3, [sp, #16]
   31dc8:	str	fp, [sp, #216]	; 0xd8
   31dcc:	beq	31df4 <__assert_fail@plt+0x1f708>
   31dd0:	ldrb	r2, [sl, #28]
   31dd4:	subs	r3, r7, r4
   31dd8:	movne	r3, #1
   31ddc:	ands	r3, r3, r2, lsr #3
   31de0:	beq	31df0 <__assert_fail@plt+0x1f704>
   31de4:	tst	r2, #1
   31de8:	ldr	r3, [sp, #16]
   31dec:	movne	r3, #0
   31df0:	str	r3, [sp, #16]
   31df4:	ldr	r3, [sl, #24]
   31df8:	cmp	r3, r8
   31dfc:	subcc	r2, r8, #1
   31e00:	movcs	r3, #0
   31e04:	subcc	r3, r2, r3
   31e08:	str	r3, [sp, #56]	; 0x38
   31e0c:	ldr	r3, [sl, #8]
   31e10:	cmp	r3, #0
   31e14:	beq	33368 <__assert_fail@plt+0x20c7c>
   31e18:	ldr	r1, [fp, #36]	; 0x24
   31e1c:	cmp	r1, #0
   31e20:	beq	33368 <__assert_fail@plt+0x20c7c>
   31e24:	ldr	r2, [fp, #40]	; 0x28
   31e28:	cmp	r2, #0
   31e2c:	beq	33368 <__assert_fail@plt+0x20c7c>
   31e30:	ldr	r3, [fp, #44]	; 0x2c
   31e34:	cmp	r3, #0
   31e38:	beq	33368 <__assert_fail@plt+0x20c7c>
   31e3c:	ldr	r0, [fp, #48]	; 0x30
   31e40:	cmp	r0, #0
   31e44:	beq	33368 <__assert_fail@plt+0x20c7c>
   31e48:	ldr	r1, [r1, #8]
   31e4c:	cmp	r1, #0
   31e50:	bne	31e94 <__assert_fail@plt+0x1f7a8>
   31e54:	ldr	r2, [r2, #8]
   31e58:	cmp	r2, #0
   31e5c:	bne	31e94 <__assert_fail@plt+0x1f7a8>
   31e60:	ldr	r3, [r3, #8]
   31e64:	cmp	r3, #0
   31e68:	beq	31e78 <__assert_fail@plt+0x1f78c>
   31e6c:	ldrsb	r3, [sl, #28]
   31e70:	cmp	r3, #0
   31e74:	blt	31e94 <__assert_fail@plt+0x1f7a8>
   31e78:	adds	r4, r4, #0
   31e7c:	movne	r4, #1
   31e80:	cmp	r7, #0
   31e84:	moveq	r4, #0
   31e88:	cmp	r4, #0
   31e8c:	bne	33368 <__assert_fail@plt+0x20c7c>
   31e90:	mov	r7, r4
   31e94:	ldr	r3, [sp, #56]	; 0x38
   31e98:	subs	r3, r8, r3
   31e9c:	str	r3, [sp, #8]
   31ea0:	movne	r3, #1
   31ea4:	bne	31eb4 <__assert_fail@plt+0x1f7c8>
   31ea8:	ldr	r3, [fp, #76]	; 0x4c
   31eac:	adds	r3, r3, #0
   31eb0:	movne	r3, #1
   31eb4:	str	r3, [sp, #36]	; 0x24
   31eb8:	ldr	ip, [sp, #40]	; 0x28
   31ebc:	ldr	r2, [sl, #12]
   31ec0:	ldr	r3, [sl, #20]
   31ec4:	ldr	r0, [fp, #92]	; 0x5c
   31ec8:	ldr	r1, [sp, #24]
   31ecc:	str	ip, [sp, #132]	; 0x84
   31ed0:	ldr	ip, [sp, #24]
   31ed4:	str	r3, [sp, #20]
   31ed8:	ldr	r3, [fp, #8]
   31edc:	add	r1, r1, #1
   31ee0:	str	ip, [sp, #176]	; 0xb0
   31ee4:	str	ip, [sp, #180]	; 0xb4
   31ee8:	ldr	ip, [sp, #20]
   31eec:	add	r3, r3, #1
   31ef0:	cmp	r3, r0
   31ef4:	movlt	r3, r0
   31ef8:	str	ip, [sp, #196]	; 0xc4
   31efc:	and	ip, r2, #4194304	; 0x400000
   31f00:	ubfx	r2, r2, #22, #1
   31f04:	str	r0, [sp, #212]	; 0xd4
   31f08:	strb	r2, [sp, #204]	; 0xcc
   31f0c:	ldr	r2, [sp, #20]
   31f10:	orrs	r2, r2, ip
   31f14:	movne	r2, #1
   31f18:	moveq	r2, #0
   31f1c:	cmp	r3, r1
   31f20:	strb	r2, [sp, #207]	; 0xcf
   31f24:	movlt	r1, r3
   31f28:	ldrb	r2, [fp, #88]	; 0x58
   31f2c:	ubfx	r0, r2, #2, #1
   31f30:	ubfx	r2, r2, #3, #1
   31f34:	strb	r0, [sp, #205]	; 0xcd
   31f38:	add	r0, sp, #132	; 0x84
   31f3c:	strb	r2, [sp, #206]	; 0xce
   31f40:	ldr	r2, [sp, #24]
   31f44:	str	r2, [sp, #184]	; 0xb8
   31f48:	str	r2, [sp, #188]	; 0xbc
   31f4c:	bl	2b47c <__assert_fail@plt+0x18d90>
   31f50:	cmp	r0, #0
   31f54:	bne	33044 <__assert_fail@plt+0x20958>
   31f58:	add	r3, fp, #96	; 0x60
   31f5c:	str	r3, [sp, #200]	; 0xc8
   31f60:	ldrb	r3, [fp, #88]	; 0x58
   31f64:	ubfx	r3, r3, #4, #1
   31f68:	strb	r3, [sp, #210]	; 0xd2
   31f6c:	ldrb	r3, [sp, #207]	; 0xcf
   31f70:	cmp	r3, #0
   31f74:	ldrne	r2, [sp, #136]	; 0x88
   31f78:	ldreq	r2, [sp, #40]	; 0x28
   31f7c:	cmp	r3, #0
   31f80:	movne	r3, #0
   31f84:	str	r2, [sp, #136]	; 0x88
   31f88:	bne	31f9c <__assert_fail@plt+0x1f8b0>
   31f8c:	ldr	r3, [fp, #92]	; 0x5c
   31f90:	cmp	r3, #1
   31f94:	ldr	r3, [sp, #24]
   31f98:	movgt	r3, #0
   31f9c:	str	r3, [sp, #160]	; 0xa0
   31fa0:	str	r3, [sp, #164]	; 0xa4
   31fa4:	ldrb	r3, [sl, #28]
   31fa8:	str	r6, [sp, #184]	; 0xb8
   31fac:	str	r6, [sp, #188]	; 0xbc
   31fb0:	ubfx	r3, r3, #7, #1
   31fb4:	strb	r3, [sp, #209]	; 0xd1
   31fb8:	ldr	r8, [fp, #76]	; 0x4c
   31fbc:	ldr	r3, [sp, #464]	; 0x1d0
   31fc0:	lsl	r6, r8, #1
   31fc4:	str	r3, [sp, #220]	; 0xdc
   31fc8:	mvn	r3, #0
   31fcc:	cmp	r6, #0
   31fd0:	str	r3, [sp, #224]	; 0xe0
   31fd4:	bgt	3205c <__assert_fail@plt+0x1f970>
   31fd8:	mov	r3, #1
   31fdc:	str	r6, [sp, #244]	; 0xf4
   31fe0:	str	r3, [sp, #252]	; 0xfc
   31fe4:	ldr	r3, [sp, #8]
   31fe8:	str	r6, [sp, #260]	; 0x104
   31fec:	cmp	r3, #1
   31ff0:	bhi	320a0 <__assert_fail@plt+0x1f9b4>
   31ff4:	ldrb	r3, [fp, #88]	; 0x58
   31ff8:	tst	r3, #2
   31ffc:	bne	320a0 <__assert_fail@plt+0x1f9b4>
   32000:	ldr	r3, [sp, #464]	; 0x1d0
   32004:	str	r7, [sp, #100]	; 0x64
   32008:	tst	r3, #1
   3200c:	movne	r3, #4
   32010:	moveq	r3, #6
   32014:	cmp	r7, r4
   32018:	str	r3, [sp, #192]	; 0xc0
   3201c:	mvngt	r3, #0
   32020:	movle	r3, #1
   32024:	str	r3, [sp, #76]	; 0x4c
   32028:	movlt	r3, r7
   3202c:	movge	r3, r4
   32030:	str	r3, [sp, #60]	; 0x3c
   32034:	movge	r3, r7
   32038:	movlt	r3, r4
   3203c:	str	r3, [sp, #28]
   32040:	ldr	r3, [fp, #92]	; 0x5c
   32044:	str	r3, [sp, #72]	; 0x48
   32048:	ldr	r3, [sp, #16]
   3204c:	cmp	r3, #0
   32050:	bne	320c8 <__assert_fail@plt+0x1f9dc>
   32054:	mov	r3, #8
   32058:	b	3210c <__assert_fail@plt+0x1fa20>
   3205c:	ldr	r3, [pc, #4072]	; 3304c <__assert_fail@plt+0x20960>
   32060:	cmp	r6, r3
   32064:	ble	32070 <__assert_fail@plt+0x1f984>
   32068:	mov	r3, #12
   3206c:	b	321f4 <__assert_fail@plt+0x1fb08>
   32070:	mov	r0, #24
   32074:	mul	r0, r0, r6
   32078:	bl	2a340 <__assert_fail@plt+0x17c54>
   3207c:	str	r0, [sp, #248]	; 0xf8
   32080:	lsl	r0, r8, #3
   32084:	bl	2a340 <__assert_fail@plt+0x17c54>
   32088:	ldr	r3, [sp, #248]	; 0xf8
   3208c:	str	r0, [sp, #264]	; 0x108
   32090:	cmp	r0, #0
   32094:	cmpne	r3, #0
   32098:	bne	31fd8 <__assert_fail@plt+0x1f8ec>
   3209c:	b	32068 <__assert_fail@plt+0x1f97c>
   320a0:	ldr	r0, [sp, #168]	; 0xa8
   320a4:	cmn	r0, #-1073741822	; 0xc0000002
   320a8:	bhi	32068 <__assert_fail@plt+0x1f97c>
   320ac:	add	r0, r0, #1
   320b0:	lsl	r0, r0, #2
   320b4:	bl	2a340 <__assert_fail@plt+0x17c54>
   320b8:	cmp	r0, #0
   320bc:	str	r0, [sp, #232]	; 0xe8
   320c0:	bne	32000 <__assert_fail@plt+0x1f914>
   320c4:	b	32068 <__assert_fail@plt+0x1f97c>
   320c8:	ldr	r3, [sp, #72]	; 0x48
   320cc:	cmp	r3, #1
   320d0:	moveq	r3, #4
   320d4:	beq	320f0 <__assert_fail@plt+0x1fa04>
   320d8:	ldr	r3, [sl, #12]
   320dc:	ldr	r2, [sp, #20]
   320e0:	and	r3, r3, #4194304	; 0x400000
   320e4:	orrs	r3, r2, r3
   320e8:	moveq	r3, #4
   320ec:	movne	r3, #0
   320f0:	ldr	r1, [sp, #20]
   320f4:	cmp	r7, r4
   320f8:	movle	r2, #2
   320fc:	movgt	r2, #0
   32100:	cmp	r1, #0
   32104:	orrne	r3, r3, #1
   32108:	orr	r3, r3, r2
   3210c:	cmp	r7, r4
   32110:	str	r3, [sp, #80]	; 0x50
   32114:	add	r3, sp, #408	; 0x198
   32118:	suble	r3, r3, #308	; 0x134
   3211c:	movgt	r3, #0
   32120:	str	r3, [sp, #84]	; 0x54
   32124:	adds	r3, r3, #0
   32128:	movne	r3, #1
   3212c:	str	r3, [sp, #88]	; 0x58
   32130:	ldr	r2, [sp, #28]
   32134:	ldr	r1, [sp, #60]	; 0x3c
   32138:	ldr	r3, [sp, #100]	; 0x64
   3213c:	cmp	r3, r2
   32140:	movle	r2, #0
   32144:	movgt	r2, #1
   32148:	cmp	r3, r1
   3214c:	orrlt	r2, r2, #1
   32150:	cmp	r2, #0
   32154:	str	r2, [sp, #32]
   32158:	bne	321f0 <__assert_fail@plt+0x1fb04>
   3215c:	ldr	r2, [sp, #80]	; 0x50
   32160:	sub	r2, r2, #4
   32164:	cmp	r2, #4
   32168:	ldrls	pc, [pc, r2, lsl #2]
   3216c:	b	3230c <__assert_fail@plt+0x1fc20>
   32170:	andeq	r2, r3, r0, ror r2
   32174:	andeq	r2, r3, r0, ror r2
   32178:	andeq	r2, r3, r8, lsr r2
   3217c:	andeq	r2, r3, r4, lsl #3
   32180:	andeq	r2, r3, ip, lsr #7
   32184:	mov	r2, #0
   32188:	ldr	r0, [sp, #28]
   3218c:	mov	r1, r3
   32190:	cmp	r0, r3
   32194:	bgt	32298 <__assert_fail@plt+0x1fbac>
   32198:	cmp	r2, #0
   3219c:	strne	r3, [sp, #100]	; 0x64
   321a0:	ldr	r2, [sp, #28]
   321a4:	ldr	r3, [sp, #100]	; 0x64
   321a8:	cmp	r3, r2
   321ac:	bne	323ac <__assert_fail@plt+0x1fcc0>
   321b0:	mov	r3, r2
   321b4:	ldr	r1, [sp, #20]
   321b8:	ldr	r2, [sp, #24]
   321bc:	cmp	r3, r2
   321c0:	ldrlt	r3, [sp, #40]	; 0x28
   321c4:	movge	r3, #0
   321c8:	ldrlt	r2, [sp, #28]
   321cc:	ldrblt	r3, [r3, r2]
   321d0:	cmp	r1, #0
   321d4:	mov	r2, r3
   321d8:	movne	r2, r1
   321dc:	ldrbne	r2, [r2, r3]
   321e0:	ldr	r3, [sp, #16]
   321e4:	ldrb	r3, [r3, r2]
   321e8:	cmp	r3, #0
   321ec:	bne	323ac <__assert_fail@plt+0x1fcc0>
   321f0:	mov	r3, #1
   321f4:	str	r3, [sp, #12]
   321f8:	ldr	r0, [sp, #232]	; 0xe8
   321fc:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32200:	ldr	r3, [fp, #76]	; 0x4c
   32204:	cmp	r3, #0
   32208:	beq	32224 <__assert_fail@plt+0x1fb38>
   3220c:	add	r0, sp, #132	; 0x84
   32210:	bl	2c348 <__assert_fail@plt+0x19c5c>
   32214:	ldr	r0, [sp, #264]	; 0x108
   32218:	bl	284c4 <__assert_fail@plt+0x15dd8>
   3221c:	ldr	r0, [sp, #248]	; 0xf8
   32220:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32224:	add	r0, sp, #132	; 0x84
   32228:	bl	2c318 <__assert_fail@plt+0x19c2c>
   3222c:	ldr	r0, [sp, #12]
   32230:	add	sp, sp, #412	; 0x19c
   32234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32238:	mov	r2, #0
   3223c:	ldr	r0, [sp, #28]
   32240:	mov	r1, r3
   32244:	cmp	r0, r3
   32248:	ble	32198 <__assert_fail@plt+0x1faac>
   3224c:	ldr	ip, [sp, #16]
   32250:	ldr	r0, [sp, #40]	; 0x28
   32254:	ldrb	r0, [r0, r3]
   32258:	add	r3, r3, #1
   3225c:	ldrb	r0, [ip, r0]
   32260:	cmp	r0, #0
   32264:	bne	322bc <__assert_fail@plt+0x1fbd0>
   32268:	mov	r2, #1
   3226c:	b	3223c <__assert_fail@plt+0x1fb50>
   32270:	mov	r2, #0
   32274:	ldr	r1, [sp, #60]	; 0x3c
   32278:	mov	ip, r3
   3227c:	cmp	r1, r3
   32280:	ble	322c8 <__assert_fail@plt+0x1fbdc>
   32284:	cmp	r2, #0
   32288:	strne	r3, [sp, #100]	; 0x64
   3228c:	b	321f0 <__assert_fail@plt+0x1fb04>
   32290:	mov	r2, #1
   32294:	b	32188 <__assert_fail@plt+0x1fa9c>
   32298:	ldr	ip, [sp, #20]
   3229c:	ldr	r0, [sp, #40]	; 0x28
   322a0:	ldrb	r0, [r0, r3]
   322a4:	add	r3, r3, #1
   322a8:	ldrb	r0, [ip, r0]
   322ac:	ldr	ip, [sp, #16]
   322b0:	ldrb	r0, [ip, r0]
   322b4:	cmp	r0, #0
   322b8:	beq	32290 <__assert_fail@plt+0x1fba4>
   322bc:	cmp	r2, #0
   322c0:	strne	r1, [sp, #100]	; 0x64
   322c4:	b	321a0 <__assert_fail@plt+0x1fab4>
   322c8:	ldr	lr, [sp, #20]
   322cc:	ldr	r1, [sp, #24]
   322d0:	cmp	r1, r3
   322d4:	ldrgt	r1, [sp, #40]	; 0x28
   322d8:	movle	r1, #0
   322dc:	ldrbgt	r1, [r1, r3]
   322e0:	cmp	lr, #0
   322e4:	sub	r3, r3, #1
   322e8:	mov	r0, r1
   322ec:	movne	r0, lr
   322f0:	ldrbne	r0, [r0, r1]
   322f4:	ldr	r1, [sp, #16]
   322f8:	ldrb	r1, [r1, r0]
   322fc:	cmp	r1, #0
   32300:	bne	323a4 <__assert_fail@plt+0x1fcb8>
   32304:	mov	r2, #1
   32308:	b	32274 <__assert_fail@plt+0x1fb88>
   3230c:	ldr	r4, [sp, #100]	; 0x64
   32310:	ldr	r3, [sp, #156]	; 0x9c
   32314:	ldr	r2, [sp, #164]	; 0xa4
   32318:	sub	r3, r4, r3
   3231c:	cmp	r2, r3
   32320:	bhi	32348 <__assert_fail@plt+0x1fc5c>
   32324:	mov	r1, r4
   32328:	add	r0, sp, #132	; 0x84
   3232c:	ldr	r2, [sp, #464]	; 0x1d0
   32330:	bl	2eb7c <__assert_fail@plt+0x1c490>
   32334:	subs	r3, r0, #0
   32338:	str	r3, [sp, #12]
   3233c:	bne	321f8 <__assert_fail@plt+0x1fb0c>
   32340:	ldr	r3, [sp, #156]	; 0x9c
   32344:	sub	r3, r4, r3
   32348:	ldr	r2, [sp, #160]	; 0xa0
   3234c:	cmp	r2, r3
   32350:	ldrhi	r2, [sp, #136]	; 0x88
   32354:	movls	r3, #0
   32358:	ldrbhi	r3, [r2, r3]
   3235c:	ldr	r2, [sp, #16]
   32360:	ldrb	r3, [r2, r3]
   32364:	cmp	r3, #0
   32368:	bne	323ac <__assert_fail@plt+0x1fcc0>
   3236c:	ldr	r2, [sp, #60]	; 0x3c
   32370:	ldr	r3, [sp, #76]	; 0x4c
   32374:	add	r4, r4, r3
   32378:	ldr	r3, [sp, #28]
   3237c:	str	r4, [sp, #100]	; 0x64
   32380:	cmp	r4, r3
   32384:	movle	r3, #0
   32388:	movgt	r3, #1
   3238c:	cmp	r4, r2
   32390:	movge	r4, r3
   32394:	orrlt	r4, r3, #1
   32398:	cmp	r4, #0
   3239c:	beq	3230c <__assert_fail@plt+0x1fc20>
   323a0:	b	321f0 <__assert_fail@plt+0x1fb04>
   323a4:	cmp	r2, #0
   323a8:	strne	ip, [sp, #100]	; 0x64
   323ac:	add	r0, sp, #132	; 0x84
   323b0:	ldr	r1, [sp, #100]	; 0x64
   323b4:	ldr	r2, [sp, #464]	; 0x1d0
   323b8:	bl	2eb7c <__assert_fail@plt+0x1c490>
   323bc:	subs	r3, r0, #0
   323c0:	str	r3, [sp, #12]
   323c4:	bne	321f8 <__assert_fail@plt+0x1fb0c>
   323c8:	ldr	r3, [sp, #72]	; 0x48
   323cc:	cmp	r3, #1
   323d0:	beq	323f0 <__assert_fail@plt+0x1fd04>
   323d4:	ldr	r3, [sp, #160]	; 0xa0
   323d8:	cmp	r3, #0
   323dc:	beq	323f0 <__assert_fail@plt+0x1fd04>
   323e0:	ldr	r3, [sp, #140]	; 0x8c
   323e4:	ldr	r3, [r3]
   323e8:	cmn	r3, #1
   323ec:	beq	324fc <__assert_fail@plt+0x1fe10>
   323f0:	mov	r3, #0
   323f4:	ldr	r9, [sp, #172]	; 0xac
   323f8:	ldr	r4, [sp, #216]	; 0xd8
   323fc:	ldr	r6, [r4, #36]	; 0x24
   32400:	str	r3, [sp, #108]	; 0x6c
   32404:	str	r3, [sp, #236]	; 0xec
   32408:	str	r3, [sp, #240]	; 0xf0
   3240c:	str	r3, [sp, #252]	; 0xfc
   32410:	ldrsb	r3, [r6, #52]	; 0x34
   32414:	cmp	r3, #0
   32418:	bge	32484 <__assert_fail@plt+0x1fd98>
   3241c:	sub	r1, r9, #1
   32420:	add	r0, sp, #132	; 0x84
   32424:	ldr	r2, [sp, #220]	; 0xdc
   32428:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   3242c:	tst	r0, #1
   32430:	mov	r3, r0
   32434:	ldrne	r6, [r4, #40]	; 0x28
   32438:	bne	3247c <__assert_fail@plt+0x1fd90>
   3243c:	cmp	r0, #0
   32440:	beq	32484 <__assert_fail@plt+0x1fd98>
   32444:	and	r2, r0, #6
   32448:	cmp	r2, #6
   3244c:	ldreq	r6, [r4, #48]	; 0x30
   32450:	beq	3247c <__assert_fail@plt+0x1fd90>
   32454:	tst	r0, #2
   32458:	ldrne	r6, [r4, #44]	; 0x2c
   3245c:	bne	3247c <__assert_fail@plt+0x1fd90>
   32460:	tst	r0, #4
   32464:	beq	32484 <__assert_fail@plt+0x1fd98>
   32468:	mov	r1, r4
   3246c:	add	r0, sp, #108	; 0x6c
   32470:	ldr	r2, [r6, #40]	; 0x28
   32474:	bl	2da28 <__assert_fail@plt+0x1b33c>
   32478:	mov	r6, r0
   3247c:	cmp	r6, #0
   32480:	beq	32068 <__assert_fail@plt+0x1f97c>
   32484:	ldr	r3, [sp, #232]	; 0xe8
   32488:	cmp	r3, #0
   3248c:	beq	32510 <__assert_fail@plt+0x1fe24>
   32490:	str	r6, [r3, r9, lsl #2]
   32494:	ldr	r3, [r4, #76]	; 0x4c
   32498:	cmp	r3, #0
   3249c:	beq	32510 <__assert_fail@plt+0x1fe24>
   324a0:	add	r7, r6, #4
   324a4:	mov	r2, #0
   324a8:	mov	r1, r7
   324ac:	add	r0, sp, #132	; 0x84
   324b0:	bl	2c51c <__assert_fail@plt+0x19e30>
   324b4:	cmp	r0, #0
   324b8:	mov	r4, r0
   324bc:	str	r0, [sp, #108]	; 0x6c
   324c0:	bne	324ec <__assert_fail@plt+0x1fe00>
   324c4:	ldrb	r3, [r6, #52]	; 0x34
   324c8:	tst	r3, #64	; 0x40
   324cc:	beq	32518 <__assert_fail@plt+0x1fe2c>
   324d0:	mov	r1, r7
   324d4:	add	r0, sp, #132	; 0x84
   324d8:	bl	30e10 <__assert_fail@plt+0x1e724>
   324dc:	cmp	r0, #0
   324e0:	mov	r4, r0
   324e4:	str	r0, [sp, #108]	; 0x6c
   324e8:	beq	32518 <__assert_fail@plt+0x1fe2c>
   324ec:	cmn	r4, #1
   324f0:	bne	329a0 <__assert_fail@plt+0x202b4>
   324f4:	add	r0, sp, #132	; 0x84
   324f8:	bl	2c348 <__assert_fail@plt+0x19c5c>
   324fc:	ldr	r2, [sp, #76]	; 0x4c
   32500:	ldr	r3, [sp, #100]	; 0x64
   32504:	add	r3, r3, r2
   32508:	str	r3, [sp, #100]	; 0x64
   3250c:	b	32130 <__assert_fail@plt+0x1fa44>
   32510:	ldr	r3, [sp, #88]	; 0x58
   32514:	str	r3, [sp, #32]
   32518:	ldrb	r3, [r6, #52]	; 0x34
   3251c:	ubfx	r3, r3, #4, #1
   32520:	cmp	r3, #0
   32524:	streq	r3, [sp, #44]	; 0x2c
   32528:	beq	32998 <__assert_fail@plt+0x202ac>
   3252c:	ldrsb	r3, [r6, #52]	; 0x34
   32530:	cmp	r3, #0
   32534:	bge	32554 <__assert_fail@plt+0x1fe68>
   32538:	mov	r2, r9
   3253c:	mov	r1, r6
   32540:	add	r0, sp, #132	; 0x84
   32544:	bl	2eac8 <__assert_fail@plt+0x1c3dc>
   32548:	subs	r3, r0, #0
   3254c:	str	r3, [sp, #44]	; 0x2c
   32550:	beq	32998 <__assert_fail@plt+0x202ac>
   32554:	ldr	r3, [sp, #36]	; 0x24
   32558:	mov	r4, r9
   3255c:	cmp	r3, #0
   32560:	ldrne	r3, [sp, #36]	; 0x24
   32564:	strne	r3, [sp, #44]	; 0x2c
   32568:	beq	324ec <__assert_fail@plt+0x1fe00>
   3256c:	ldr	r3, [sp, #84]	; 0x54
   32570:	str	r3, [sp, #48]	; 0x30
   32574:	ldr	r1, [sp, #172]	; 0xac
   32578:	ldr	r3, [sp, #188]	; 0xbc
   3257c:	cmp	r1, r3
   32580:	bge	32684 <__assert_fail@plt+0x1ff98>
   32584:	add	r3, r1, #1
   32588:	add	r2, r1, #1
   3258c:	str	r3, [sp, #64]	; 0x40
   32590:	ldr	r3, [sp, #168]	; 0xa8
   32594:	cmp	r2, r3
   32598:	blt	325a8 <__assert_fail@plt+0x1febc>
   3259c:	ldr	r2, [sp, #180]	; 0xb4
   325a0:	cmp	r3, r2
   325a4:	blt	325c4 <__assert_fail@plt+0x1fed8>
   325a8:	ldr	r3, [sp, #160]	; 0xa0
   325ac:	add	r2, r1, #1
   325b0:	cmp	r2, r3
   325b4:	blt	325dc <__assert_fail@plt+0x1fef0>
   325b8:	ldr	r2, [sp, #180]	; 0xb4
   325bc:	cmp	r3, r2
   325c0:	bge	325dc <__assert_fail@plt+0x1fef0>
   325c4:	add	r1, r1, #2
   325c8:	add	r0, sp, #132	; 0x84
   325cc:	bl	2bf68 <__assert_fail@plt+0x1987c>
   325d0:	cmp	r0, #0
   325d4:	str	r0, [sp, #108]	; 0x6c
   325d8:	bne	32068 <__assert_fail@plt+0x1f97c>
   325dc:	ldrb	r3, [r6, #52]	; 0x34
   325e0:	tst	r3, #32
   325e4:	bne	326a0 <__assert_fail@plt+0x1ffb4>
   325e8:	ldr	r3, [sp, #172]	; 0xac
   325ec:	add	r2, r3, #1
   325f0:	str	r2, [sp, #172]	; 0xac
   325f4:	ldr	r2, [sp, #136]	; 0x88
   325f8:	ldrb	r8, [r2, r3]
   325fc:	ldr	r3, [r6, #44]	; 0x2c
   32600:	cmp	r3, #0
   32604:	beq	32878 <__assert_fail@plt+0x2018c>
   32608:	ldr	r7, [r3, r8, lsl #2]
   3260c:	ldr	r3, [sp, #232]	; 0xe8
   32610:	cmp	r3, #0
   32614:	beq	3262c <__assert_fail@plt+0x1ff40>
   32618:	mov	r2, r7
   3261c:	add	r1, sp, #132	; 0x84
   32620:	add	r0, sp, #108	; 0x6c
   32624:	bl	31410 <__assert_fail@plt+0x1ed24>
   32628:	mov	r7, r0
   3262c:	cmp	r7, #0
   32630:	bne	32908 <__assert_fail@plt+0x2021c>
   32634:	ldr	r2, [sp, #108]	; 0x6c
   32638:	ldr	r3, [sp, #232]	; 0xe8
   3263c:	cmp	r2, #0
   32640:	bne	32068 <__assert_fail@plt+0x1f97c>
   32644:	cmp	r3, #0
   32648:	beq	32684 <__assert_fail@plt+0x1ff98>
   3264c:	ldr	r3, [sp, #36]	; 0x24
   32650:	ldr	r2, [sp, #44]	; 0x2c
   32654:	eor	r3, r3, #1
   32658:	tst	r2, r3
   3265c:	bne	32684 <__assert_fail@plt+0x1ff98>
   32660:	ldr	r3, [sp, #172]	; 0xac
   32664:	mov	r2, #0
   32668:	ldr	r0, [sp, #232]	; 0xe8
   3266c:	ldr	ip, [sp, #236]	; 0xec
   32670:	add	r1, r3, #1
   32674:	cmp	ip, r1
   32678:	bge	328c8 <__assert_fail@plt+0x201dc>
   3267c:	cmp	r2, #0
   32680:	strne	r3, [sp, #172]	; 0xac
   32684:	ldr	r3, [sp, #48]	; 0x30
   32688:	cmp	r3, #0
   3268c:	ldrne	r3, [r3]
   32690:	ldrne	r2, [sp, #48]	; 0x30
   32694:	addne	r3, r3, r9
   32698:	strne	r3, [r2]
   3269c:	b	324ec <__assert_fail@plt+0x1fe00>
   326a0:	ldr	r8, [sp, #216]	; 0xd8
   326a4:	mov	r3, #0
   326a8:	str	r3, [sp, #52]	; 0x34
   326ac:	ldr	r3, [r6, #8]
   326b0:	ldr	r2, [sp, #52]	; 0x34
   326b4:	cmp	r2, r3
   326b8:	movge	r0, #0
   326bc:	bge	32864 <__assert_fail@plt+0x20178>
   326c0:	ldr	r3, [r6, #12]
   326c4:	ldr	r2, [sp, #52]	; 0x34
   326c8:	ldr	r3, [r3, r2, lsl #2]
   326cc:	str	r3, [sp, #68]	; 0x44
   326d0:	ldr	r3, [r8]
   326d4:	ldr	r2, [sp, #68]	; 0x44
   326d8:	add	r3, r3, r2, lsl #3
   326dc:	ldrb	r2, [r3, #6]
   326e0:	tst	r2, #16
   326e4:	beq	3283c <__assert_fail@plt+0x20150>
   326e8:	ldr	r7, [r3, #4]
   326ec:	ldr	r3, [pc, #2396]	; 33050 <__assert_fail@plt+0x20964>
   326f0:	ldr	r2, [sp, #172]	; 0xac
   326f4:	tst	r3, r7
   326f8:	str	r2, [sp, #92]	; 0x5c
   326fc:	beq	32754 <__assert_fail@plt+0x20068>
   32700:	ubfx	r7, r7, #8, #10
   32704:	add	r0, sp, #132	; 0x84
   32708:	ldr	r1, [sp, #92]	; 0x5c
   3270c:	ldr	r2, [sp, #220]	; 0xdc
   32710:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   32714:	tst	r7, #4
   32718:	beq	32724 <__assert_fail@plt+0x20038>
   3271c:	tst	r0, #1
   32720:	beq	3283c <__assert_fail@plt+0x20150>
   32724:	tst	r7, #8
   32728:	beq	32734 <__assert_fail@plt+0x20048>
   3272c:	tst	r0, #1
   32730:	bne	3283c <__assert_fail@plt+0x20150>
   32734:	tst	r7, #32
   32738:	beq	32744 <__assert_fail@plt+0x20058>
   3273c:	tst	r0, #2
   32740:	beq	3283c <__assert_fail@plt+0x20150>
   32744:	tst	r7, #128	; 0x80
   32748:	beq	32754 <__assert_fail@plt+0x20068>
   3274c:	tst	r0, #8
   32750:	beq	3283c <__assert_fail@plt+0x20150>
   32754:	add	r2, sp, #132	; 0x84
   32758:	mov	r0, r8
   3275c:	ldr	r1, [sp, #68]	; 0x44
   32760:	ldr	r3, [sp, #92]	; 0x5c
   32764:	bl	2d39c <__assert_fail@plt+0x1acb0>
   32768:	cmp	r0, #0
   3276c:	beq	3283c <__assert_fail@plt+0x20150>
   32770:	ldr	r7, [sp, #172]	; 0xac
   32774:	ldr	r3, [sp, #252]	; 0xfc
   32778:	add	r7, r0, r7
   3277c:	mov	r1, r7
   32780:	cmp	r3, r0
   32784:	strge	r3, [sp, #252]	; 0xfc
   32788:	strlt	r0, [sp, #252]	; 0xfc
   3278c:	add	r0, sp, #132	; 0x84
   32790:	bl	2c5fc <__assert_fail@plt+0x19f10>
   32794:	cmp	r0, #0
   32798:	str	r0, [sp, #120]	; 0x78
   3279c:	bne	32864 <__assert_fail@plt+0x20178>
   327a0:	ldr	r3, [r8, #12]
   327a4:	mov	r1, #12
   327a8:	ldr	r2, [sp, #68]	; 0x44
   327ac:	ldr	r2, [r3, r2, lsl #2]
   327b0:	ldr	r3, [r8, #24]
   327b4:	mla	r2, r1, r2, r3
   327b8:	ldr	r3, [sp, #232]	; 0xe8
   327bc:	ldr	r3, [r3, r7, lsl #2]
   327c0:	cmp	r3, #0
   327c4:	str	r3, [sp, #68]	; 0x44
   327c8:	add	r3, sp, #268	; 0x10c
   327cc:	bne	32848 <__assert_fail@plt+0x2015c>
   327d0:	ldm	r2, {r0, r1, r2}
   327d4:	stm	r3, {r0, r1, r2}
   327d8:	sub	r1, r7, #1
   327dc:	add	r0, sp, #132	; 0x84
   327e0:	ldr	r2, [sp, #220]	; 0xdc
   327e4:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   327e8:	ldr	r3, [sp, #232]	; 0xe8
   327ec:	add	r2, sp, #268	; 0x10c
   327f0:	mov	r1, r8
   327f4:	str	r3, [sp, #92]	; 0x5c
   327f8:	mov	r3, r0
   327fc:	add	r0, sp, #120	; 0x78
   32800:	bl	2da28 <__assert_fail@plt+0x1b33c>
   32804:	ldr	r3, [sp, #92]	; 0x5c
   32808:	str	r0, [r3, r7, lsl #2]
   3280c:	ldr	r3, [sp, #68]	; 0x44
   32810:	cmp	r3, #0
   32814:	beq	32820 <__assert_fail@plt+0x20134>
   32818:	ldr	r0, [sp, #276]	; 0x114
   3281c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32820:	ldr	r3, [sp, #232]	; 0xe8
   32824:	ldr	r3, [r3, r7, lsl #2]
   32828:	cmp	r3, #0
   3282c:	bne	3283c <__assert_fail@plt+0x20150>
   32830:	ldr	r0, [sp, #120]	; 0x78
   32834:	cmp	r0, #0
   32838:	bne	32864 <__assert_fail@plt+0x20178>
   3283c:	ldr	r3, [sp, #52]	; 0x34
   32840:	add	r3, r3, #1
   32844:	b	326a8 <__assert_fail@plt+0x1ffbc>
   32848:	ldr	r1, [sp, #68]	; 0x44
   3284c:	mov	r0, r3
   32850:	ldr	r1, [r1, #40]	; 0x28
   32854:	bl	2d8e8 <__assert_fail@plt+0x1b1fc>
   32858:	cmp	r0, #0
   3285c:	str	r0, [sp, #120]	; 0x78
   32860:	beq	327d8 <__assert_fail@plt+0x200ec>
   32864:	cmp	r0, #0
   32868:	str	r0, [sp, #108]	; 0x6c
   3286c:	beq	325e8 <__assert_fail@plt+0x1fefc>
   32870:	mov	r7, #0
   32874:	b	3260c <__assert_fail@plt+0x1ff20>
   32878:	ldr	r7, [r6, #48]	; 0x30
   3287c:	cmp	r7, #0
   32880:	beq	328a8 <__assert_fail@plt+0x201bc>
   32884:	ldr	r1, [sp, #172]	; 0xac
   32888:	add	r0, sp, #132	; 0x84
   3288c:	ldr	r2, [sp, #220]	; 0xdc
   32890:	sub	r1, r1, #1
   32894:	bl	2e8c8 <__assert_fail@plt+0x1c1dc>
   32898:	tst	r0, #1
   3289c:	addne	r8, r8, #256	; 0x100
   328a0:	ldr	r7, [r7, r8, lsl #2]
   328a4:	b	3260c <__assert_fail@plt+0x1ff20>
   328a8:	mov	r1, r6
   328ac:	ldr	r0, [sp, #216]	; 0xd8
   328b0:	bl	2faa8 <__assert_fail@plt+0x1d3bc>
   328b4:	cmp	r0, #0
   328b8:	bne	325fc <__assert_fail@plt+0x1ff10>
   328bc:	mov	r3, #12
   328c0:	str	r3, [sp, #108]	; 0x6c
   328c4:	b	3260c <__assert_fail@plt+0x1ff20>
   328c8:	mov	r3, r1
   328cc:	ldr	r1, [r0, r1, lsl #2]
   328d0:	mov	r2, #1
   328d4:	cmp	r1, #0
   328d8:	beq	32670 <__assert_fail@plt+0x1ff84>
   328dc:	mov	r2, #0
   328e0:	add	r1, sp, #132	; 0x84
   328e4:	str	r3, [sp, #172]	; 0xac
   328e8:	add	r0, sp, #108	; 0x6c
   328ec:	bl	31410 <__assert_fail@plt+0x1ed24>
   328f0:	ldr	r3, [sp, #108]	; 0x6c
   328f4:	mov	r7, r0
   328f8:	cmp	r3, #0
   328fc:	bne	3298c <__assert_fail@plt+0x202a0>
   32900:	cmp	r0, #0
   32904:	beq	32660 <__assert_fail@plt+0x1ff74>
   32908:	ldr	r3, [sp, #32]
   3290c:	cmp	r6, r7
   32910:	movne	r3, #0
   32914:	andeq	r3, r3, #1
   32918:	str	r3, [sp, #32]
   3291c:	ldr	r2, [sp, #32]
   32920:	ldr	r3, [sp, #64]	; 0x40
   32924:	cmp	r2, #0
   32928:	moveq	r3, r9
   3292c:	str	r3, [sp, #64]	; 0x40
   32930:	ldrb	r3, [r7, #52]	; 0x34
   32934:	tst	r3, #16
   32938:	beq	32980 <__assert_fail@plt+0x20294>
   3293c:	tst	r3, #128	; 0x80
   32940:	ldr	r6, [sp, #172]	; 0xac
   32944:	beq	32960 <__assert_fail@plt+0x20274>
   32948:	mov	r2, r6
   3294c:	mov	r1, r7
   32950:	add	r0, sp, #132	; 0x84
   32954:	bl	2eac8 <__assert_fail@plt+0x1c3dc>
   32958:	cmp	r0, #0
   3295c:	beq	32980 <__assert_fail@plt+0x20294>
   32960:	ldr	r3, [sp, #36]	; 0x24
   32964:	mov	r4, r6
   32968:	cmp	r3, #0
   3296c:	beq	324ec <__assert_fail@plt+0x1fe00>
   32970:	ldr	r3, [sp, #36]	; 0x24
   32974:	str	r3, [sp, #44]	; 0x2c
   32978:	mov	r3, #0
   3297c:	str	r3, [sp, #48]	; 0x30
   32980:	mov	r6, r7
   32984:	ldr	r9, [sp, #64]	; 0x40
   32988:	b	32574 <__assert_fail@plt+0x1fe88>
   3298c:	cmp	r0, #0
   32990:	bne	32908 <__assert_fail@plt+0x2021c>
   32994:	b	32684 <__assert_fail@plt+0x1ff98>
   32998:	mvn	r4, #0
   3299c:	b	3256c <__assert_fail@plt+0x1fe80>
   329a0:	cmn	r4, #2
   329a4:	beq	32068 <__assert_fail@plt+0x1f97c>
   329a8:	ldr	r2, [sp, #8]
   329ac:	str	r4, [sp, #224]	; 0xe0
   329b0:	ldrb	r3, [sl, #28]
   329b4:	cmp	r2, #1
   329b8:	movls	r2, #0
   329bc:	movhi	r2, #1
   329c0:	eor	r3, r3, #16
   329c4:	ands	r6, r2, r3, lsr #4
   329c8:	bne	329d8 <__assert_fail@plt+0x202ec>
   329cc:	ldr	r3, [fp, #76]	; 0x4c
   329d0:	cmp	r3, #0
   329d4:	beq	32a04 <__assert_fail@plt+0x20318>
   329d8:	ldr	r3, [sp, #232]	; 0xe8
   329dc:	mov	r2, r4
   329e0:	add	r0, sp, #132	; 0x84
   329e4:	ldr	r1, [r3, r4, lsl #2]
   329e8:	bl	2eac8 <__assert_fail@plt+0x1c3dc>
   329ec:	cmp	r6, #0
   329f0:	str	r0, [sp, #228]	; 0xe4
   329f4:	beq	32a04 <__assert_fail@plt+0x20318>
   329f8:	ldrb	r3, [fp, #88]	; 0x58
   329fc:	tst	r3, #1
   32a00:	bne	32a10 <__assert_fail@plt+0x20324>
   32a04:	ldr	r3, [fp, #76]	; 0x4c
   32a08:	cmp	r3, #0
   32a0c:	beq	33380 <__assert_fail@plt+0x20c94>
   32a10:	ldr	r3, [sp, #216]	; 0xd8
   32a14:	cmn	r4, #-1073741822	; 0xc0000002
   32a18:	ldr	r8, [sp, #228]	; 0xe4
   32a1c:	str	r3, [sp, #32]
   32a20:	bhi	32068 <__assert_fail@plt+0x1f97c>
   32a24:	add	r9, r4, #1
   32a28:	lsl	r9, r9, #2
   32a2c:	mov	r0, r9
   32a30:	bl	2a340 <__assert_fail@plt+0x17c54>
   32a34:	subs	r7, r0, #0
   32a38:	beq	32b9c <__assert_fail@plt+0x204b0>
   32a3c:	ldr	r3, [sp, #32]
   32a40:	ldr	r6, [r3, #76]	; 0x4c
   32a44:	cmp	r6, #0
   32a48:	beq	32b34 <__assert_fail@plt+0x20448>
   32a4c:	mov	r0, r9
   32a50:	bl	2a340 <__assert_fail@plt+0x17c54>
   32a54:	subs	r6, r0, #0
   32a58:	beq	32ba0 <__assert_fail@plt+0x204b4>
   32a5c:	add	r3, r4, #1
   32a60:	mov	r1, #0
   32a64:	lsl	r2, r3, #2
   32a68:	mov	r0, r6
   32a6c:	str	r3, [sp, #44]	; 0x2c
   32a70:	bl	12434 <memset@plt>
   32a74:	mov	r3, #0
   32a78:	add	r1, sp, #268	; 0x10c
   32a7c:	str	r7, [sp, #268]	; 0x10c
   32a80:	add	r0, sp, #132	; 0x84
   32a84:	str	r6, [sp, #272]	; 0x110
   32a88:	str	r8, [sp, #276]	; 0x114
   32a8c:	str	r4, [sp, #280]	; 0x118
   32a90:	str	r3, [sp, #284]	; 0x11c
   32a94:	str	r3, [sp, #288]	; 0x120
   32a98:	str	r3, [sp, #292]	; 0x124
   32a9c:	bl	31b24 <__assert_fail@plt+0x1f438>
   32aa0:	mov	r9, r0
   32aa4:	ldr	r0, [sp, #292]	; 0x124
   32aa8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32aac:	cmp	r9, #0
   32ab0:	bne	32ba4 <__assert_fail@plt+0x204b8>
   32ab4:	ldr	r2, [r7]
   32ab8:	ldr	r3, [sp, #44]	; 0x2c
   32abc:	cmp	r2, #0
   32ac0:	bne	32b08 <__assert_fail@plt+0x2041c>
   32ac4:	ldr	r2, [r6]
   32ac8:	cmp	r2, #0
   32acc:	bne	32b08 <__assert_fail@plt+0x2041c>
   32ad0:	ldr	r2, [sp, #232]	; 0xe8
   32ad4:	subs	r4, r4, #1
   32ad8:	bcc	32bcc <__assert_fail@plt+0x204e0>
   32adc:	ldr	r1, [r2, r4, lsl #2]
   32ae0:	cmp	r1, #0
   32ae4:	beq	32ad4 <__assert_fail@plt+0x203e8>
   32ae8:	ldrb	r3, [r1, #52]	; 0x34
   32aec:	tst	r3, #16
   32af0:	beq	32ad4 <__assert_fail@plt+0x203e8>
   32af4:	mov	r2, r4
   32af8:	add	r0, sp, #132	; 0x84
   32afc:	bl	2eac8 <__assert_fail@plt+0x1c3dc>
   32b00:	mov	r8, r0
   32b04:	b	32a5c <__assert_fail@plt+0x20370>
   32b08:	mov	r2, r6
   32b0c:	mov	r1, r7
   32b10:	ldr	r0, [sp, #32]
   32b14:	bl	3054c <__assert_fail@plt+0x1de60>
   32b18:	mov	r9, r0
   32b1c:	mov	r0, r6
   32b20:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32b24:	cmp	r9, #0
   32b28:	beq	32b7c <__assert_fail@plt+0x20490>
   32b2c:	mov	r6, #0
   32b30:	b	32ba4 <__assert_fail@plt+0x204b8>
   32b34:	add	r1, sp, #268	; 0x10c
   32b38:	add	r0, sp, #132	; 0x84
   32b3c:	str	r7, [sp, #268]	; 0x10c
   32b40:	str	r6, [sp, #272]	; 0x110
   32b44:	str	r8, [sp, #276]	; 0x114
   32b48:	str	r4, [sp, #280]	; 0x118
   32b4c:	str	r6, [sp, #284]	; 0x11c
   32b50:	str	r6, [sp, #288]	; 0x120
   32b54:	str	r6, [sp, #292]	; 0x124
   32b58:	bl	31b24 <__assert_fail@plt+0x1f438>
   32b5c:	mov	r9, r0
   32b60:	ldr	r0, [sp, #292]	; 0x124
   32b64:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32b68:	cmp	r9, #0
   32b6c:	bne	32ba4 <__assert_fail@plt+0x204b8>
   32b70:	ldr	r6, [r7]
   32b74:	cmp	r6, #0
   32b78:	beq	32bcc <__assert_fail@plt+0x204e0>
   32b7c:	ldr	r0, [sp, #232]	; 0xe8
   32b80:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32b84:	str	r4, [sp, #224]	; 0xe0
   32b88:	str	r7, [sp, #232]	; 0xe8
   32b8c:	mov	r7, #0
   32b90:	mov	r9, r7
   32b94:	str	r8, [sp, #228]	; 0xe4
   32b98:	b	32b2c <__assert_fail@plt+0x20440>
   32b9c:	mov	r6, r7
   32ba0:	mov	r9, #12
   32ba4:	mov	r0, r7
   32ba8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32bac:	mov	r0, r6
   32bb0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32bb4:	cmp	r9, #0
   32bb8:	beq	33380 <__assert_fail@plt+0x20c94>
   32bbc:	cmp	r9, #1
   32bc0:	beq	324f4 <__assert_fail@plt+0x1fe08>
   32bc4:	str	r9, [sp, #12]
   32bc8:	b	321f8 <__assert_fail@plt+0x1fb0c>
   32bcc:	mov	r9, #1
   32bd0:	b	32ba4 <__assert_fail@plt+0x204b8>
   32bd4:	str	r2, [r1, r3, lsl #3]
   32bd8:	str	r2, [r5, r3, lsl #3]
   32bdc:	add	r3, r3, #1
   32be0:	ldr	r0, [sp, #8]
   32be4:	cmp	r3, r0
   32be8:	bne	32bd4 <__assert_fail@plt+0x204e8>
   32bec:	mov	r3, #0
   32bf0:	subs	r2, r0, #1
   32bf4:	movne	r2, #1
   32bf8:	str	r3, [r5]
   32bfc:	ldr	r3, [sp, #224]	; 0xe0
   32c00:	str	r3, [r5, #4]
   32c04:	ldrb	r3, [sl, #28]
   32c08:	eor	r3, r3, #16
   32c0c:	ands	r3, r2, r3, lsr #4
   32c10:	beq	33260 <__assert_fail@plt+0x20b74>
   32c14:	ldrb	r4, [fp, #88]	; 0x58
   32c18:	ands	r4, r4, #1
   32c1c:	beq	32c30 <__assert_fail@plt+0x20544>
   32c20:	ldr	r4, [fp, #76]	; 0x4c
   32c24:	cmp	r4, #0
   32c28:	movle	r4, #0
   32c2c:	movgt	r4, #1
   32c30:	ldr	r3, [sl]
   32c34:	mov	r2, #2
   32c38:	add	r7, sp, #280	; 0x118
   32c3c:	cmp	r4, #0
   32c40:	str	r3, [sp, #16]
   32c44:	mov	r3, #0
   32c48:	str	r2, [sp, #124]	; 0x7c
   32c4c:	str	r3, [sp, #120]	; 0x78
   32c50:	str	r3, [sp, #128]	; 0x80
   32c54:	str	r3, [sp, #268]	; 0x10c
   32c58:	mov	r3, #16
   32c5c:	str	r7, [sp, #276]	; 0x114
   32c60:	str	r3, [sp, #272]	; 0x110
   32c64:	beq	32c80 <__assert_fail@plt+0x20594>
   32c68:	mov	r0, #48	; 0x30
   32c6c:	bl	2a340 <__assert_fail@plt+0x17c54>
   32c70:	cmp	r0, #0
   32c74:	str	r0, [sp, #128]	; 0x80
   32c78:	addne	r4, sp, #120	; 0x78
   32c7c:	beq	32068 <__assert_fail@plt+0x1f97c>
   32c80:	ldr	r2, [sp, #8]
   32c84:	ldr	r3, [sp, #16]
   32c88:	ldr	r6, [r3, #72]	; 0x48
   32c8c:	mov	r3, #0
   32c90:	str	r3, [sp, #108]	; 0x6c
   32c94:	str	r3, [sp, #112]	; 0x70
   32c98:	str	r3, [sp, #116]	; 0x74
   32c9c:	ldr	r3, [sp, #268]	; 0x10c
   32ca0:	cmp	r2, r3
   32ca4:	ldrls	r3, [sp, #8]
   32ca8:	strls	r3, [sp, #268]	; 0x10c
   32cac:	bls	32d04 <__assert_fail@plt+0x20618>
   32cb0:	mov	r3, #8
   32cb4:	mov	r2, r7
   32cb8:	ldr	r1, [sp, #8]
   32cbc:	add	r0, sp, #268	; 0x10c
   32cc0:	bl	36d68 <__assert_fail@plt+0x2467c>
   32cc4:	cmp	r0, #0
   32cc8:	bne	32d04 <__assert_fail@plt+0x20618>
   32ccc:	ldr	r0, [sp, #276]	; 0x114
   32cd0:	cmp	r0, r7
   32cd4:	beq	32cdc <__assert_fail@plt+0x205f0>
   32cd8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   32cdc:	mov	r3, #0
   32ce0:	str	r3, [sp, #268]	; 0x10c
   32ce4:	mvn	r3, #0
   32ce8:	str	r7, [sp, #276]	; 0x114
   32cec:	str	r3, [sp, #272]	; 0x110
   32cf0:	add	r0, sp, #268	; 0x10c
   32cf4:	bl	2fa74 <__assert_fail@plt+0x1d388>
   32cf8:	mov	r0, r4
   32cfc:	bl	2e14c <__assert_fail@plt+0x1ba60>
   32d00:	b	32068 <__assert_fail@plt+0x1f97c>
   32d04:	ldr	r3, [sp, #8]
   32d08:	mov	r1, r5
   32d0c:	ldr	r7, [sp, #276]	; 0x114
   32d10:	lsl	r8, r3, #3
   32d14:	mov	r0, r7
   32d18:	mov	r2, r8
   32d1c:	bl	120f8 <memcpy@plt>
   32d20:	mov	r2, r5
   32d24:	ldr	r3, [r2], #4
   32d28:	str	r2, [sp, #28]
   32d2c:	str	r3, [sp, #104]	; 0x68
   32d30:	ldr	r3, [sp, #8]
   32d34:	lsl	r3, r3, #4
   32d38:	str	r3, [sp, #24]
   32d3c:	ldr	r3, [r5, #4]
   32d40:	ldr	r2, [sp, #104]	; 0x68
   32d44:	cmp	r2, r3
   32d48:	bgt	33024 <__assert_fail@plt+0x20938>
   32d4c:	ldr	r3, [sp, #16]
   32d50:	lsl	r0, r6, #3
   32d54:	ldr	r3, [r3]
   32d58:	add	r1, r3, r0
   32d5c:	ldrb	ip, [r1, #4]
   32d60:	cmp	ip, #8
   32d64:	bne	32fa8 <__assert_fail@plt+0x208bc>
   32d68:	ldr	r3, [r3, r6, lsl #3]
   32d6c:	ldr	r1, [sp, #8]
   32d70:	add	r3, r3, #1
   32d74:	cmp	r1, r3
   32d78:	ble	32d8c <__assert_fail@plt+0x206a0>
   32d7c:	add	r1, r5, r3, lsl #3
   32d80:	str	r2, [r5, r3, lsl #3]
   32d84:	mvn	r3, #0
   32d88:	str	r3, [r1, #4]
   32d8c:	ldr	r2, [r5, #4]
   32d90:	ldr	r3, [sp, #104]	; 0x68
   32d94:	cmp	r2, r3
   32d98:	bne	32da8 <__assert_fail@plt+0x206bc>
   32d9c:	ldr	r3, [sp, #228]	; 0xe4
   32da0:	cmp	r6, r3
   32da4:	beq	3301c <__assert_fail@plt+0x20930>
   32da8:	cmp	r4, #0
   32dac:	beq	32e0c <__assert_fail@plt+0x20720>
   32db0:	mov	r1, r6
   32db4:	add	r0, sp, #108	; 0x6c
   32db8:	bl	2aed4 <__assert_fail@plt+0x187e8>
   32dbc:	cmp	r0, #0
   32dc0:	beq	32e0c <__assert_fail@plt+0x20720>
   32dc4:	mov	r3, #0
   32dc8:	ldr	r2, [r5, r3, lsl #3]
   32dcc:	cmp	r2, #0
   32dd0:	blt	33054 <__assert_fail@plt+0x20968>
   32dd4:	ldr	r2, [sp, #28]
   32dd8:	ldr	r2, [r2, r3, lsl #3]
   32ddc:	cmn	r2, #1
   32de0:	bne	33054 <__assert_fail@plt+0x20968>
   32de4:	add	r3, sp, #108	; 0x6c
   32de8:	add	r1, sp, #104	; 0x68
   32dec:	str	r7, [sp]
   32df0:	mov	r0, r4
   32df4:	ldr	r2, [sp, #8]
   32df8:	str	r3, [sp, #4]
   32dfc:	mov	r3, r5
   32e00:	bl	2c688 <__assert_fail@plt+0x19f9c>
   32e04:	subs	r6, r0, #0
   32e08:	blt	33024 <__assert_fail@plt+0x20938>
   32e0c:	ldr	r9, [sp, #216]	; 0xd8
   32e10:	lsl	sl, r6, #3
   32e14:	str	r6, [sp, #20]
   32e18:	ldr	r3, [r9]
   32e1c:	add	r1, r3, sl
   32e20:	ldrb	r2, [r1, #4]
   32e24:	tst	r2, #8
   32e28:	beq	33090 <__assert_fail@plt+0x209a4>
   32e2c:	ldr	r2, [sp, #104]	; 0x68
   32e30:	mov	r1, r6
   32e34:	add	r0, sp, #108	; 0x6c
   32e38:	ldr	r3, [sp, #232]	; 0xe8
   32e3c:	ldr	sl, [r3, r2, lsl #2]
   32e40:	mov	r2, #12
   32e44:	add	r3, sl, #4
   32e48:	str	r3, [sp, #20]
   32e4c:	ldr	r3, [r9, #20]
   32e50:	mla	sl, r2, r6, r3
   32e54:	bl	2aed4 <__assert_fail@plt+0x187e8>
   32e58:	cmp	r0, #0
   32e5c:	beq	33068 <__assert_fail@plt+0x2097c>
   32e60:	ldr	r2, [sl, #4]
   32e64:	mov	r3, #0
   32e68:	mvn	r6, #0
   32e6c:	cmp	r3, r2
   32e70:	bge	32f94 <__assert_fail@plt+0x208a8>
   32e74:	ldr	r1, [sl, #8]
   32e78:	str	r3, [sp, #32]
   32e7c:	ldr	r0, [sp, #20]
   32e80:	str	r2, [sp, #36]	; 0x24
   32e84:	ldr	r9, [r1, r3, lsl #2]
   32e88:	mov	r1, r9
   32e8c:	bl	2aed4 <__assert_fail@plt+0x187e8>
   32e90:	cmp	r0, #0
   32e94:	ldr	r3, [sp, #32]
   32e98:	ldr	r2, [sp, #36]	; 0x24
   32e9c:	beq	33088 <__assert_fail@plt+0x2099c>
   32ea0:	cmn	r6, #1
   32ea4:	beq	33084 <__assert_fail@plt+0x20998>
   32ea8:	mov	r1, r6
   32eac:	add	r0, sp, #108	; 0x6c
   32eb0:	bl	2aed4 <__assert_fail@plt+0x187e8>
   32eb4:	cmp	r0, #0
   32eb8:	bne	33258 <__assert_fail@plt+0x20b6c>
   32ebc:	cmp	r4, #0
   32ec0:	beq	32f94 <__assert_fail@plt+0x208a8>
   32ec4:	ldr	sl, [r4]
   32ec8:	ldr	r3, [sp, #104]	; 0x68
   32ecc:	ldr	r2, [r4, #4]
   32ed0:	str	r3, [sp, #20]
   32ed4:	add	r3, sl, #1
   32ed8:	cmp	r3, r2
   32edc:	str	r3, [r4]
   32ee0:	bne	32f0c <__assert_fail@plt+0x20820>
   32ee4:	mov	r1, #48	; 0x30
   32ee8:	ldr	r0, [r4, #8]
   32eec:	mul	r1, r1, r3
   32ef0:	bl	2acc4 <__assert_fail@plt+0x185d8>
   32ef4:	cmp	r0, #0
   32ef8:	beq	33078 <__assert_fail@plt+0x2098c>
   32efc:	ldr	r3, [r4, #4]
   32f00:	str	r0, [r4, #8]
   32f04:	lsl	r3, r3, #1
   32f08:	str	r3, [r4, #4]
   32f0c:	mov	r0, #24
   32f10:	ldr	r2, [r4, #8]
   32f14:	mul	sl, r0, sl
   32f18:	ldr	r1, [sp, #20]
   32f1c:	ldr	r0, [sp, #24]
   32f20:	add	r3, r2, sl
   32f24:	str	r1, [r2, sl]
   32f28:	str	r9, [r3, #4]
   32f2c:	str	r3, [sp, #20]
   32f30:	bl	2a340 <__assert_fail@plt+0x17c54>
   32f34:	ldr	r3, [sp, #20]
   32f38:	str	r0, [r3, #8]
   32f3c:	ldr	r3, [r4, #8]
   32f40:	add	r3, r3, sl
   32f44:	ldr	r0, [r3, #8]
   32f48:	cmp	r0, #0
   32f4c:	beq	33078 <__assert_fail@plt+0x2098c>
   32f50:	mov	r2, r8
   32f54:	mov	r1, r5
   32f58:	bl	120f8 <memcpy@plt>
   32f5c:	ldr	r3, [r4, #8]
   32f60:	mov	r2, r8
   32f64:	mov	r1, r7
   32f68:	add	r3, r3, sl
   32f6c:	ldr	r0, [r3, #8]
   32f70:	add	r0, r0, r8
   32f74:	bl	120f8 <memcpy@plt>
   32f78:	ldr	r0, [r4, #8]
   32f7c:	add	r1, sp, #108	; 0x6c
   32f80:	add	r0, r0, sl
   32f84:	add	r0, r0, #12
   32f88:	bl	2d870 <__assert_fail@plt+0x1b184>
   32f8c:	cmp	r0, #0
   32f90:	bne	33078 <__assert_fail@plt+0x2098c>
   32f94:	cmp	r6, #0
   32f98:	bge	32d3c <__assert_fail@plt+0x20650>
   32f9c:	cmn	r6, #2
   32fa0:	bne	330d8 <__assert_fail@plt+0x209ec>
   32fa4:	b	33078 <__assert_fail@plt+0x2098c>
   32fa8:	cmp	ip, #9
   32fac:	bne	32d8c <__assert_fail@plt+0x206a0>
   32fb0:	ldr	r3, [r3, r0]
   32fb4:	ldr	r0, [sp, #8]
   32fb8:	add	r3, r3, #1
   32fbc:	cmp	r0, r3
   32fc0:	ble	32d8c <__assert_fail@plt+0x206a0>
   32fc4:	ldr	ip, [r5, r3, lsl #3]
   32fc8:	add	r0, r5, r3, lsl #3
   32fcc:	cmp	r2, ip
   32fd0:	ble	32fec <__assert_fail@plt+0x20900>
   32fd4:	mov	r1, r5
   32fd8:	str	r2, [r0, #4]
   32fdc:	mov	r2, r8
   32fe0:	mov	r0, r7
   32fe4:	bl	120f8 <memcpy@plt>
   32fe8:	b	32d8c <__assert_fail@plt+0x206a0>
   32fec:	ldrb	r1, [r1, #6]
   32ff0:	tst	r1, #8
   32ff4:	beq	33014 <__assert_fail@plt+0x20928>
   32ff8:	ldr	r3, [r7, r3, lsl #3]
   32ffc:	cmn	r3, #1
   33000:	beq	33014 <__assert_fail@plt+0x20928>
   33004:	mov	r2, r8
   33008:	mov	r1, r7
   3300c:	mov	r0, r5
   33010:	b	32fe4 <__assert_fail@plt+0x208f8>
   33014:	str	r2, [r0, #4]
   33018:	b	32d8c <__assert_fail@plt+0x206a0>
   3301c:	cmp	r4, #0
   33020:	bne	32dc4 <__assert_fail@plt+0x206d8>
   33024:	ldr	r0, [sp, #116]	; 0x74
   33028:	bl	284c4 <__assert_fail@plt+0x15dd8>
   3302c:	add	r0, sp, #268	; 0x10c
   33030:	bl	2fa74 <__assert_fail@plt+0x1d388>
   33034:	mov	r0, r4
   33038:	bl	2e14c <__assert_fail@plt+0x1ba60>
   3303c:	cmp	r0, #0
   33040:	beq	33260 <__assert_fail@plt+0x20b74>
   33044:	str	r0, [sp, #12]
   33048:	b	321f8 <__assert_fail@plt+0x1fb0c>
   3304c:	beq	feaddafc <stdout@@GLIBC_2.4+0xfea8f590>
   33050:	andeq	pc, r3, r0, lsl #30
   33054:	ldr	r2, [sp, #8]
   33058:	add	r3, r3, #1
   3305c:	cmp	r2, r3
   33060:	bne	32dc8 <__assert_fail@plt+0x206dc>
   33064:	b	33024 <__assert_fail@plt+0x20938>
   33068:	add	r0, sp, #108	; 0x6c
   3306c:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   33070:	cmp	r0, #0
   33074:	bne	32e60 <__assert_fail@plt+0x20774>
   33078:	ldr	r0, [sp, #116]	; 0x74
   3307c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   33080:	b	32cf0 <__assert_fail@plt+0x20604>
   33084:	mov	r6, r9
   33088:	add	r3, r3, #1
   3308c:	b	32e6c <__assert_fail@plt+0x20780>
   33090:	ldrb	r1, [r1, #6]
   33094:	tst	r1, #16
   33098:	beq	3311c <__assert_fail@plt+0x20a30>
   3309c:	add	r2, sp, #132	; 0x84
   330a0:	mov	r0, r9
   330a4:	ldr	r1, [sp, #20]
   330a8:	ldr	r3, [sp, #104]	; 0x68
   330ac:	bl	2d39c <__assert_fail@plt+0x1acb0>
   330b0:	subs	r3, r0, #0
   330b4:	bne	331a0 <__assert_fail@plt+0x20ab4>
   330b8:	ldr	r1, [r9]
   330bc:	add	r0, sp, #132	; 0x84
   330c0:	ldr	r2, [sp, #104]	; 0x68
   330c4:	add	r1, r1, sl
   330c8:	bl	2e9a8 <__assert_fail@plt+0x1c2bc>
   330cc:	cmp	r0, #0
   330d0:	movne	r3, #0
   330d4:	bne	331a0 <__assert_fail@plt+0x20ab4>
   330d8:	add	r3, sp, #108	; 0x6c
   330dc:	add	r1, sp, #104	; 0x68
   330e0:	str	r7, [sp]
   330e4:	mov	r0, r4
   330e8:	ldr	r2, [sp, #8]
   330ec:	str	r3, [sp, #4]
   330f0:	mov	r3, r5
   330f4:	bl	2c688 <__assert_fail@plt+0x19f9c>
   330f8:	subs	r6, r0, #0
   330fc:	bge	32d3c <__assert_fail@plt+0x20650>
   33100:	ldr	r0, [sp, #116]	; 0x74
   33104:	bl	284c4 <__assert_fail@plt+0x15dd8>
   33108:	add	r0, sp, #268	; 0x10c
   3310c:	bl	2fa74 <__assert_fail@plt+0x1d388>
   33110:	mov	r0, r4
   33114:	bl	2e14c <__assert_fail@plt+0x1ba60>
   33118:	b	321f0 <__assert_fail@plt+0x1fb04>
   3311c:	cmp	r2, #4
   33120:	bne	330b8 <__assert_fail@plt+0x209cc>
   33124:	ldr	r3, [r3, sl]
   33128:	ldr	r2, [sp, #8]
   3312c:	add	r3, r3, #1
   33130:	cmp	r2, r3
   33134:	ble	33374 <__assert_fail@plt+0x20c88>
   33138:	add	r2, r5, r3, lsl #3
   3313c:	ldr	r0, [r5, r3, lsl #3]
   33140:	cmp	r4, #0
   33144:	ldr	r2, [r2, #4]
   33148:	sub	r3, r2, r0
   3314c:	beq	33204 <__assert_fail@plt+0x20b18>
   33150:	cmn	r0, #1
   33154:	beq	330d8 <__assert_fail@plt+0x209ec>
   33158:	cmn	r2, #1
   3315c:	beq	330d8 <__assert_fail@plt+0x209ec>
   33160:	cmp	r3, #0
   33164:	beq	3320c <__assert_fail@plt+0x20b20>
   33168:	ldr	r1, [sp, #104]	; 0x68
   3316c:	ldr	ip, [sp, #136]	; 0x88
   33170:	ldr	r2, [sp, #160]	; 0xa0
   33174:	sub	r2, r2, r1
   33178:	cmp	r3, r2
   3317c:	bgt	330d8 <__assert_fail@plt+0x209ec>
   33180:	mov	r2, r3
   33184:	add	r1, ip, r1
   33188:	str	r3, [sp, #32]
   3318c:	add	r0, ip, r0
   33190:	bl	12158 <memcmp@plt>
   33194:	cmp	r0, #0
   33198:	ldr	r3, [sp, #32]
   3319c:	bne	330d8 <__assert_fail@plt+0x209ec>
   331a0:	ldr	r2, [r9, #12]
   331a4:	cmp	r3, #0
   331a8:	ldr	r1, [sp, #20]
   331ac:	ldr	r6, [r2, r1, lsl #2]
   331b0:	ldr	r2, [sp, #104]	; 0x68
   331b4:	addeq	r3, r2, #1
   331b8:	addne	r3, r2, r3
   331bc:	cmp	r4, #0
   331c0:	str	r3, [sp, #104]	; 0x68
   331c4:	beq	331f8 <__assert_fail@plt+0x20b0c>
   331c8:	ldr	r2, [sp, #224]	; 0xe0
   331cc:	cmp	r3, r2
   331d0:	bgt	330d8 <__assert_fail@plt+0x209ec>
   331d4:	ldr	r2, [sp, #232]	; 0xe8
   331d8:	ldr	r0, [r2, r3, lsl #2]
   331dc:	cmp	r0, #0
   331e0:	beq	330d8 <__assert_fail@plt+0x209ec>
   331e4:	mov	r1, r6
   331e8:	add	r0, r0, #4
   331ec:	bl	2aed4 <__assert_fail@plt+0x187e8>
   331f0:	cmp	r0, #0
   331f4:	beq	330d8 <__assert_fail@plt+0x209ec>
   331f8:	mov	r3, #0
   331fc:	str	r3, [sp, #112]	; 0x70
   33200:	b	32f94 <__assert_fail@plt+0x208a8>
   33204:	cmp	r3, #0
   33208:	bne	331a0 <__assert_fail@plt+0x20ab4>
   3320c:	mov	r1, r6
   33210:	add	r0, sp, #108	; 0x6c
   33214:	bl	2e1a4 <__assert_fail@plt+0x1bab8>
   33218:	cmp	r0, #0
   3321c:	beq	33078 <__assert_fail@plt+0x2098c>
   33220:	ldr	r2, [r9, #20]
   33224:	mov	r3, #12
   33228:	mla	r6, r3, r6, r2
   3322c:	ldr	r2, [sp, #104]	; 0x68
   33230:	ldr	r3, [r6, #8]
   33234:	ldr	r6, [r3]
   33238:	ldr	r3, [sp, #232]	; 0xe8
   3323c:	mov	r1, r6
   33240:	ldr	r0, [r3, r2, lsl #2]
   33244:	add	r0, r0, #4
   33248:	bl	2aed4 <__assert_fail@plt+0x187e8>
   3324c:	cmp	r0, #0
   33250:	beq	330b8 <__assert_fail@plt+0x209cc>
   33254:	b	32f94 <__assert_fail@plt+0x208a8>
   33258:	mov	r6, r9
   3325c:	b	32f94 <__assert_fail@plt+0x208a8>
   33260:	ldrb	r6, [sp, #208]	; 0xd0
   33264:	mov	r2, r5
   33268:	mov	r3, #0
   3326c:	ldr	r0, [sp, #100]	; 0x64
   33270:	ldr	lr, [sp, #144]	; 0x90
   33274:	ldr	r4, [sp, #160]	; 0xa0
   33278:	ldr	ip, [sp, #164]	; 0xa4
   3327c:	ldr	r1, [r5, r3, lsl #3]
   33280:	cmn	r1, #1
   33284:	beq	332cc <__assert_fail@plt+0x20be0>
   33288:	cmp	r6, #0
   3328c:	beq	332b4 <__assert_fail@plt+0x20bc8>
   33290:	cmp	r1, r4
   33294:	ldrne	r1, [lr, r1, lsl #2]
   33298:	moveq	r1, ip
   3329c:	str	r1, [r5, r3, lsl #3]
   332a0:	ldr	r1, [r2, #4]
   332a4:	cmp	r4, r1
   332a8:	ldrne	r1, [lr, r1, lsl #2]
   332ac:	moveq	r1, ip
   332b0:	str	r1, [r2, #4]
   332b4:	ldr	r1, [r5, r3, lsl #3]
   332b8:	add	r1, r1, r0
   332bc:	str	r1, [r5, r3, lsl #3]
   332c0:	ldr	r1, [r2, #4]
   332c4:	add	r1, r1, r0
   332c8:	str	r1, [r2, #4]
   332cc:	ldr	r1, [sp, #8]
   332d0:	add	r3, r3, #1
   332d4:	add	r2, r2, #8
   332d8:	cmp	r3, r1
   332dc:	bne	3327c <__assert_fail@plt+0x20b90>
   332e0:	ldr	r3, [sp, #8]
   332e4:	mov	r2, #0
   332e8:	mvn	r1, #0
   332ec:	add	r3, r5, r3, lsl #3
   332f0:	ldr	r0, [sp, #56]	; 0x38
   332f4:	add	r3, r3, #8
   332f8:	cmp	r2, r0
   332fc:	blt	33358 <__assert_fail@plt+0x20c6c>
   33300:	ldr	r3, [fp, #132]	; 0x84
   33304:	cmp	r3, #0
   33308:	movne	r0, #0
   3330c:	addne	ip, r5, #4
   33310:	beq	321f8 <__assert_fail@plt+0x1fb0c>
   33314:	ldr	r1, [sp, #8]
   33318:	add	r2, r0, #1
   3331c:	cmp	r2, r1
   33320:	beq	321f8 <__assert_fail@plt+0x1fb0c>
   33324:	ldr	r1, [r3]
   33328:	cmp	r1, r0
   3332c:	beq	3334c <__assert_fail@plt+0x20c60>
   33330:	add	r1, r1, #1
   33334:	ldr	r1, [r5, r1, lsl #3]
   33338:	str	r1, [r5, r2, lsl #3]
   3333c:	ldr	r1, [r3]
   33340:	add	r1, r5, r1, lsl #3
   33344:	ldr	r1, [r1, #12]
   33348:	str	r1, [ip, r2, lsl #3]
   3334c:	add	r3, r3, #4
   33350:	mov	r0, r2
   33354:	b	33314 <__assert_fail@plt+0x20c28>
   33358:	add	r2, r2, #1
   3335c:	str	r1, [r3, #-8]
   33360:	str	r1, [r3, #-4]
   33364:	b	332f0 <__assert_fail@plt+0x20c04>
   33368:	mov	r3, #1
   3336c:	str	r3, [sp, #12]
   33370:	b	3222c <__assert_fail@plt+0x1fb40>
   33374:	cmp	r4, #0
   33378:	beq	3320c <__assert_fail@plt+0x20b20>
   3337c:	b	330d8 <__assert_fail@plt+0x209ec>
   33380:	ldr	r3, [sp, #8]
   33384:	cmp	r3, #0
   33388:	movne	r3, #1
   3338c:	addne	r1, r5, #4
   33390:	mvnne	r2, #0
   33394:	bne	32be0 <__assert_fail@plt+0x204f4>
   33398:	b	321f8 <__assert_fail@plt+0x1fb0c>
   3339c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   333a0:	sub	sp, sp, #148	; 0x94
   333a4:	mov	fp, r0
   333a8:	mov	r6, r1
   333ac:	mov	r5, r2
   333b0:	and	r7, r3, #16777216	; 0x1000000
   333b4:	and	r8, r3, #32
   333b8:	ldr	sl, [sp, #188]	; 0xbc
   333bc:	and	r9, r3, #16
   333c0:	str	r3, [sp, #8]
   333c4:	ldrb	r3, [r5, #4]
   333c8:	ldr	r4, [r6]
   333cc:	sub	r2, r3, #1
   333d0:	cmp	r2, #35	; 0x23
   333d4:	ldrls	pc, [pc, r2, lsl #2]
   333d8:	b	34074 <__assert_fail@plt+0x21988>
   333dc:	andeq	r3, r3, ip, ror #8
   333e0:	muleq	r3, r8, r6
   333e4:	andeq	r4, r3, r4, ror r0
   333e8:	andeq	r3, r3, ip, asr #26
   333ec:	andeq	r3, r3, r8, ror #31
   333f0:	andeq	r4, r3, r4, ror r0
   333f4:	andeq	r4, r3, r4, ror r0
   333f8:			; <UNDEFINED> instruction: 0x000335b8
   333fc:	andeq	r3, r3, r8, ror #27
   33400:	muleq	r3, r8, r6
   33404:			; <UNDEFINED> instruction: 0x00033dbc
   33408:	andeq	r3, r3, r0, lsr lr
   3340c:	andeq	r4, r3, r4, ror r0
   33410:	andeq	r4, r3, r4, ror r0
   33414:	andeq	r4, r3, r4, ror r0
   33418:	andeq	r4, r3, r4, ror r0
   3341c:	andeq	r4, r3, r4, ror r0
   33420:			; <UNDEFINED> instruction: 0x00033dbc
   33424:			; <UNDEFINED> instruction: 0x00033dbc
   33428:	andeq	r3, r3, r0, lsr #13
   3342c:	andeq	r4, r3, r4, ror r0
   33430:	andeq	r4, r3, r4, ror r0
   33434:	andeq	r3, r3, ip, lsr #27
   33438:	andeq	r3, r3, r8, lsl #28
   3343c:	andeq	r4, r3, r4, ror r0
   33440:	andeq	r4, r3, r4, ror r0
   33444:	andeq	r4, r3, r4, ror r0
   33448:	andeq	r4, r3, r4, ror r0
   3344c:	andeq	r4, r3, r4, ror r0
   33450:	andeq	r4, r3, r4, ror r0
   33454:	andeq	r4, r3, r4, ror r0
   33458:	andeq	r4, r3, r4, lsl r0
   3345c:	andeq	r4, r3, r4, lsl r0
   33460:	andeq	r4, r3, r8, asr r0
   33464:	andeq	r4, r3, r8, asr r0
   33468:	andeq	r4, r3, r4, ror r0
   3346c:	mov	r2, #0
   33470:	mov	r3, r5
   33474:	mov	r1, r2
   33478:	mov	r0, r4
   3347c:	bl	2b574 <__assert_fail@plt+0x18e88>
   33480:	subs	r6, r0, #0
   33484:	bne	33494 <__assert_fail@plt+0x20da8>
   33488:	mov	r3, #12
   3348c:	str	r3, [sl]
   33490:	b	33698 <__assert_fail@plt+0x20fac>
   33494:	ldr	r3, [r4, #92]	; 0x5c
   33498:	cmp	r3, #1
   3349c:	bgt	33588 <__assert_fail@plt+0x20e9c>
   334a0:	mov	r1, fp
   334a4:	mov	r0, r5
   334a8:	ldr	r2, [sp, #8]
   334ac:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   334b0:	ldrb	r3, [r5, #4]
   334b4:	cmp	r3, #23
   334b8:	bhi	33dfc <__assert_fail@plt+0x21710>
   334bc:	ldr	r2, [pc, #3904]	; 34404 <__assert_fail@plt+0x21d18>
   334c0:	sub	r9, r3, #18
   334c4:	clz	r9, r9
   334c8:	lsr	r9, r9, #5
   334cc:	mvn	r8, r2, lsr r3
   334d0:	ands	r8, r8, #1
   334d4:	bne	33dfc <__assert_fail@plt+0x21710>
   334d8:	ldr	r2, [fp, #40]	; 0x28
   334dc:	cmp	r3, #23
   334e0:	ldm	r5, {r0, r1}
   334e4:	str	r2, [sp, #12]
   334e8:	add	r2, sp, #112	; 0x70
   334ec:	stm	r2, {r0, r1}
   334f0:	bne	341c8 <__assert_fail@plt+0x21adc>
   334f4:	mov	r1, r5
   334f8:	mov	r0, fp
   334fc:	ldr	r2, [sp, #8]
   33500:	bl	2f9cc <__assert_fail@plt+0x1d2e0>
   33504:	cmn	r0, #1
   33508:	mov	r9, r0
   3350c:	bne	3407c <__assert_fail@plt+0x21990>
   33510:	ldrb	r3, [r5, #4]
   33514:	cmp	r3, #1
   33518:	bne	3352c <__assert_fail@plt+0x20e40>
   3351c:	ldrb	r3, [r5]
   33520:	cmp	r3, #44	; 0x2c
   33524:	moveq	r9, r8
   33528:	beq	340e8 <__assert_fail@plt+0x219fc>
   3352c:	mov	r3, #10
   33530:	mov	r7, #0
   33534:	str	r3, [sl]
   33538:	b	340b0 <__assert_fail@plt+0x219c4>
   3353c:	mov	r1, fp
   33540:	mov	r0, r5
   33544:	ldr	r2, [sp, #8]
   33548:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   3354c:	mov	r2, #0
   33550:	mov	r3, r5
   33554:	mov	r1, r2
   33558:	mov	r0, r4
   3355c:	bl	2b574 <__assert_fail@plt+0x18e88>
   33560:	mov	r7, r0
   33564:	mov	r2, r0
   33568:	mov	r1, r6
   3356c:	mov	r3, #16
   33570:	mov	r0, r4
   33574:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   33578:	cmp	r0, #0
   3357c:	cmpne	r7, #0
   33580:	mov	r6, r0
   33584:	beq	33488 <__assert_fail@plt+0x20d9c>
   33588:	ldr	r3, [fp, #40]	; 0x28
   3358c:	ldr	r2, [fp, #56]	; 0x38
   33590:	cmp	r2, r3
   33594:	ble	334a0 <__assert_fail@plt+0x20db4>
   33598:	ldr	r2, [fp, #28]
   3359c:	cmp	r3, r2
   335a0:	beq	334a0 <__assert_fail@plt+0x20db4>
   335a4:	ldr	r2, [fp, #8]
   335a8:	ldr	r3, [r2, r3, lsl #2]
   335ac:	cmn	r3, #1
   335b0:	beq	3353c <__assert_fail@plt+0x20e50>
   335b4:	b	334a0 <__assert_fail@plt+0x20db4>
   335b8:	ldr	r7, [r6, #24]
   335bc:	mov	r1, fp
   335c0:	mov	r0, r5
   335c4:	add	r3, r7, #1
   335c8:	str	r3, [r6, #24]
   335cc:	ldr	r3, [sp, #8]
   335d0:	orr	r2, r3, #8388608	; 0x800000
   335d4:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   335d8:	ldrb	r3, [r5, #4]
   335dc:	cmp	r3, #9
   335e0:	moveq	r1, #0
   335e4:	beq	33644 <__assert_fail@plt+0x20f58>
   335e8:	ldr	r3, [sp, #184]	; 0xb8
   335ec:	mov	r2, r5
   335f0:	mov	r1, r6
   335f4:	mov	r0, fp
   335f8:	add	r3, r3, #1
   335fc:	stm	sp, {r3, sl}
   33600:	ldr	r3, [sp, #8]
   33604:	bl	34574 <__assert_fail@plt+0x21e88>
   33608:	ldr	r2, [sl]
   3360c:	mov	r1, r0
   33610:	cmp	r2, #0
   33614:	bne	3363c <__assert_fail@plt+0x20f50>
   33618:	ldrb	r3, [r5, #4]
   3361c:	cmp	r3, #9
   33620:	beq	33644 <__assert_fail@plt+0x20f58>
   33624:	cmp	r0, #0
   33628:	beq	33634 <__assert_fail@plt+0x20f48>
   3362c:	ldr	r1, [pc, #3540]	; 34408 <__assert_fail@plt+0x21d1c>
   33630:	bl	2af48 <__assert_fail@plt+0x1885c>
   33634:	mov	r3, #8
   33638:	str	r3, [sl]
   3363c:	mov	r6, #0
   33640:	b	3367c <__assert_fail@plt+0x20f90>
   33644:	cmp	r7, #8
   33648:	mov	r0, r4
   3364c:	ldrls	r3, [r4, #84]	; 0x54
   33650:	movls	r2, #1
   33654:	orrls	r3, r3, r2, lsl r7
   33658:	mov	r2, #0
   3365c:	strls	r3, [r4, #84]	; 0x54
   33660:	mov	r3, #17
   33664:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   33668:	subs	r6, r0, #0
   3366c:	strne	r7, [r6, #20]
   33670:	bne	3367c <__assert_fail@plt+0x20f90>
   33674:	mov	r3, #12
   33678:	str	r3, [sl]
   3367c:	ldr	r2, [sl]
   33680:	clz	r3, r6
   33684:	lsr	r3, r3, #5
   33688:	cmp	r2, #0
   3368c:	moveq	r3, #0
   33690:	cmp	r3, #0
   33694:	beq	334a0 <__assert_fail@plt+0x20db4>
   33698:	mov	r6, #0
   3369c:	b	33dfc <__assert_fail@plt+0x21710>
   336a0:	mov	r6, #0
   336a4:	mov	r1, #1
   336a8:	mov	r0, #32
   336ac:	str	r6, [sp, #52]	; 0x34
   336b0:	bl	27fbc <__assert_fail@plt+0x158d0>
   336b4:	mov	r1, #1
   336b8:	str	r0, [sp, #12]
   336bc:	mov	r0, #40	; 0x28
   336c0:	bl	27fbc <__assert_fail@plt+0x158d0>
   336c4:	ldr	r3, [sp, #12]
   336c8:	mov	r7, r0
   336cc:	clz	r0, r0
   336d0:	lsr	r0, r0, #5
   336d4:	cmp	r3, r6
   336d8:	movne	r8, r0
   336dc:	moveq	r8, #1
   336e0:	cmp	r8, r6
   336e4:	beq	336fc <__assert_fail@plt+0x21010>
   336e8:	mov	r0, r3
   336ec:	bl	284c4 <__assert_fail@plt+0x15dd8>
   336f0:	mov	r0, r7
   336f4:	bl	284c4 <__assert_fail@plt+0x15dd8>
   336f8:	b	33674 <__assert_fail@plt+0x20f88>
   336fc:	mov	r1, fp
   33700:	mov	r0, r5
   33704:	ldr	r2, [sp, #8]
   33708:	bl	2afc0 <__assert_fail@plt+0x188d4>
   3370c:	ldrb	r3, [r5, #4]
   33710:	str	r0, [sp, #20]
   33714:	cmp	r3, #2
   33718:	bne	33728 <__assert_fail@plt+0x2103c>
   3371c:	mov	r3, #2
   33720:	str	r3, [sl]
   33724:	b	337f8 <__assert_fail@plt+0x2110c>
   33728:	cmp	r3, #25
   3372c:	strne	r8, [sp, #32]
   33730:	bne	33790 <__assert_fail@plt+0x210a4>
   33734:	ldrb	r3, [r7, #16]
   33738:	orr	r3, r3, #1
   3373c:	strb	r3, [r7, #16]
   33740:	ldr	r3, [sp, #8]
   33744:	tst	r3, #256	; 0x100
   33748:	beq	33758 <__assert_fail@plt+0x2106c>
   3374c:	mov	r1, #10
   33750:	ldr	r0, [sp, #12]
   33754:	bl	2ad34 <__assert_fail@plt+0x18648>
   33758:	ldr	r2, [sp, #20]
   3375c:	mov	r1, fp
   33760:	mov	r0, r5
   33764:	ldr	r3, [fp, #40]	; 0x28
   33768:	add	r3, r3, r2
   3376c:	ldr	r2, [sp, #8]
   33770:	str	r3, [fp, #40]	; 0x28
   33774:	bl	2afc0 <__assert_fail@plt+0x188d4>
   33778:	ldrb	r3, [r5, #4]
   3377c:	str	r0, [sp, #20]
   33780:	cmp	r3, #2
   33784:	movne	r3, #1
   33788:	strne	r3, [sp, #32]
   3378c:	beq	3371c <__assert_fail@plt+0x21030>
   33790:	ldrb	r3, [r5, #4]
   33794:	mov	r2, #0
   33798:	cmp	r3, #21
   3379c:	moveq	r3, #1
   337a0:	strbeq	r3, [r5, #4]
   337a4:	mov	r3, #0
   337a8:	strd	r2, [sp, #24]
   337ac:	mov	r3, #1
   337b0:	ldr	r2, [sp, #8]
   337b4:	ubfx	r2, r2, #16, #1
   337b8:	str	r2, [sp, #36]	; 0x24
   337bc:	str	r3, [sp, #4]
   337c0:	add	r2, sp, #80	; 0x50
   337c4:	mov	r6, #3
   337c8:	ldr	r3, [sp, #8]
   337cc:	mov	r1, fp
   337d0:	add	r0, sp, #56	; 0x38
   337d4:	str	r2, [sp, #60]	; 0x3c
   337d8:	mov	r2, r5
   337dc:	str	r3, [sp]
   337e0:	ldr	r3, [sp, #20]
   337e4:	str	r6, [sp, #56]	; 0x38
   337e8:	bl	2f1b8 <__assert_fail@plt+0x1cacc>
   337ec:	cmp	r0, #0
   337f0:	beq	3380c <__assert_fail@plt+0x21120>
   337f4:	str	r0, [sl]
   337f8:	ldr	r0, [sp, #12]
   337fc:	bl	284c4 <__assert_fail@plt+0x15dd8>
   33800:	mov	r0, r7
   33804:	bl	2c02c <__assert_fail@plt+0x19940>
   33808:	b	3363c <__assert_fail@plt+0x20f50>
   3380c:	mov	r1, fp
   33810:	mov	r0, r5
   33814:	ldr	r2, [sp, #8]
   33818:	bl	2afc0 <__assert_fail@plt+0x188d4>
   3381c:	ldr	r3, [sp, #56]	; 0x38
   33820:	str	r0, [sp, #20]
   33824:	sub	r3, r3, #2
   33828:	bics	r3, r3, #2
   3382c:	beq	338dc <__assert_fail@plt+0x211f0>
   33830:	ldrb	r3, [r5, #4]
   33834:	cmp	r3, #2
   33838:	bne	33844 <__assert_fail@plt+0x21158>
   3383c:	mov	r3, #7
   33840:	b	33720 <__assert_fail@plt+0x21034>
   33844:	cmp	r3, #22
   33848:	bne	338dc <__assert_fail@plt+0x211f0>
   3384c:	ldr	r2, [sp, #20]
   33850:	mov	r1, fp
   33854:	add	r0, sp, #72	; 0x48
   33858:	ldr	r3, [fp, #40]	; 0x28
   3385c:	add	r3, r3, r2
   33860:	ldr	r2, [sp, #8]
   33864:	str	r3, [fp, #40]	; 0x28
   33868:	bl	2afc0 <__assert_fail@plt+0x188d4>
   3386c:	ldrb	r2, [sp, #76]	; 0x4c
   33870:	mov	r3, r0
   33874:	cmp	r2, #2
   33878:	beq	3383c <__assert_fail@plt+0x21150>
   3387c:	cmp	r2, #21
   33880:	beq	338c4 <__assert_fail@plt+0x211d8>
   33884:	add	r2, sp, #112	; 0x70
   33888:	mov	r1, fp
   3388c:	str	r6, [sp, #64]	; 0x40
   33890:	add	r0, sp, #64	; 0x40
   33894:	str	r2, [sp, #68]	; 0x44
   33898:	mov	r2, #1
   3389c:	str	r2, [sp, #4]
   338a0:	ldr	r2, [sp, #8]
   338a4:	str	r2, [sp]
   338a8:	add	r2, sp, #72	; 0x48
   338ac:	bl	2f1b8 <__assert_fail@plt+0x1cacc>
   338b0:	subs	r3, r0, #0
   338b4:	str	r3, [sp, #16]
   338b8:	beq	33900 <__assert_fail@plt+0x21214>
   338bc:	ldr	r3, [sp, #16]
   338c0:	b	33720 <__assert_fail@plt+0x21034>
   338c4:	ldr	r2, [sp, #20]
   338c8:	ldr	r3, [fp, #40]	; 0x28
   338cc:	sub	r3, r3, r2
   338d0:	str	r3, [fp, #40]	; 0x28
   338d4:	mov	r3, #1
   338d8:	strb	r3, [r5, #4]
   338dc:	ldr	r3, [sp, #56]	; 0x38
   338e0:	cmp	r3, #4
   338e4:	ldrls	pc, [pc, r3, lsl #2]
   338e8:	b	33bf8 <__assert_fail@plt+0x2150c>
   338ec:	andeq	r3, r3, r0, asr fp
   338f0:	andeq	r3, r3, r8, ror fp
   338f4:	andeq	r3, r3, r8, asr #23
   338f8:	andeq	r3, r3, r8, asr #23
   338fc:	strdeq	r3, [r3], -r8
   33900:	mov	r1, fp
   33904:	mov	r0, r5
   33908:	ldr	r2, [sp, #8]
   3390c:	bl	2afc0 <__assert_fail@plt+0x188d4>
   33910:	ldr	r2, [sp, #56]	; 0x38
   33914:	str	r0, [sp, #20]
   33918:	sub	r3, r2, #2
   3391c:	bics	r3, r3, #2
   33920:	beq	33b48 <__assert_fail@plt+0x2145c>
   33924:	ldr	r8, [sp, #64]	; 0x40
   33928:	sub	r3, r8, #2
   3392c:	bics	r3, r3, #2
   33930:	beq	33b48 <__assert_fail@plt+0x2145c>
   33934:	cmp	r2, #3
   33938:	moveq	r9, #1
   3393c:	movne	r9, #0
   33940:	bne	33964 <__assert_fail@plt+0x21278>
   33944:	ldr	r0, [sp, #60]	; 0x3c
   33948:	str	r2, [sp, #40]	; 0x28
   3394c:	bl	123bc <strlen@plt>
   33950:	cmp	r0, #1
   33954:	ldr	r2, [sp, #40]	; 0x28
   33958:	bls	343dc <__assert_fail@plt+0x21cf0>
   3395c:	mov	r3, #3
   33960:	b	33aa0 <__assert_fail@plt+0x213b4>
   33964:	cmp	r8, #3
   33968:	bne	343e8 <__assert_fail@plt+0x21cfc>
   3396c:	ldr	r0, [sp, #68]	; 0x44
   33970:	str	r2, [sp, #40]	; 0x28
   33974:	bl	123bc <strlen@plt>
   33978:	cmp	r0, #1
   3397c:	bhi	3395c <__assert_fail@plt+0x21270>
   33980:	ldr	r2, [sp, #40]	; 0x28
   33984:	cmp	r2, #0
   33988:	bne	33aa8 <__assert_fail@plt+0x213bc>
   3398c:	ldrb	r6, [sp, #60]	; 0x3c
   33990:	cmp	r8, #0
   33994:	bne	33acc <__assert_fail@plt+0x213e0>
   33998:	ldrb	r8, [sp, #68]	; 0x44
   3399c:	cmp	r2, #0
   339a0:	moveq	r9, #1
   339a4:	cmp	r9, #0
   339a8:	ldreq	r6, [sp, #60]	; 0x3c
   339ac:	beq	339c8 <__assert_fail@plt+0x212dc>
   339b0:	ldr	r3, [r4, #92]	; 0x5c
   339b4:	cmp	r3, #1
   339b8:	ble	339c8 <__assert_fail@plt+0x212dc>
   339bc:	mov	r0, r6
   339c0:	bl	12470 <btowc@plt>
   339c4:	mov	r6, r0
   339c8:	ldr	r3, [sp, #64]	; 0x40
   339cc:	cmp	r3, #3
   339d0:	cmpne	r3, #0
   339d4:	ldrne	r8, [sp, #68]	; 0x44
   339d8:	bne	339f4 <__assert_fail@plt+0x21308>
   339dc:	ldr	r3, [r4, #92]	; 0x5c
   339e0:	cmp	r3, #1
   339e4:	ble	339f4 <__assert_fail@plt+0x21308>
   339e8:	mov	r0, r8
   339ec:	bl	12470 <btowc@plt>
   339f0:	mov	r8, r0
   339f4:	cmn	r6, #1
   339f8:	cmnne	r8, #1
   339fc:	beq	3395c <__assert_fail@plt+0x21270>
   33a00:	ldr	r3, [sp, #36]	; 0x24
   33a04:	cmp	r6, r8
   33a08:	movls	r3, #0
   33a0c:	andhi	r3, r3, #1
   33a10:	cmp	r3, #0
   33a14:	bne	33b48 <__assert_fail@plt+0x2145c>
   33a18:	ldr	r3, [r4, #92]	; 0x5c
   33a1c:	cmp	r3, #1
   33a20:	ble	33afc <__assert_fail@plt+0x21410>
   33a24:	ldr	r2, [sp, #28]
   33a28:	ldr	r3, [r7, #32]
   33a2c:	cmp	r3, r2
   33a30:	bne	33adc <__assert_fail@plt+0x213f0>
   33a34:	lsl	r9, r2, #1
   33a38:	ldr	r0, [r7, #4]
   33a3c:	add	r9, r9, #1
   33a40:	lsl	r3, r9, #2
   33a44:	mov	r1, r3
   33a48:	str	r3, [sp, #44]	; 0x2c
   33a4c:	bl	2acc4 <__assert_fail@plt+0x185d8>
   33a50:	ldr	r3, [sp, #44]	; 0x2c
   33a54:	mov	r2, r0
   33a58:	ldr	r0, [r7, #8]
   33a5c:	str	r2, [sp, #40]	; 0x28
   33a60:	mov	r1, r3
   33a64:	bl	2acc4 <__assert_fail@plt+0x185d8>
   33a68:	ldr	r2, [sp, #40]	; 0x28
   33a6c:	mov	r3, r0
   33a70:	cmp	r0, #0
   33a74:	cmpne	r2, #0
   33a78:	strdne	r2, [r7, #4]
   33a7c:	strne	r9, [sp, #28]
   33a80:	bne	33adc <__assert_fail@plt+0x213f0>
   33a84:	mov	r0, r2
   33a88:	str	r3, [sp, #16]
   33a8c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   33a90:	ldr	r3, [sp, #16]
   33a94:	mov	r0, r3
   33a98:	bl	284c4 <__assert_fail@plt+0x15dd8>
   33a9c:	mov	r3, #12
   33aa0:	str	r3, [sp, #16]
   33aa4:	b	33b34 <__assert_fail@plt+0x21448>
   33aa8:	cmp	r2, #3
   33aac:	bne	33abc <__assert_fail@plt+0x213d0>
   33ab0:	ldr	r3, [sp, #60]	; 0x3c
   33ab4:	ldrb	r6, [r3]
   33ab8:	b	33990 <__assert_fail@plt+0x212a4>
   33abc:	mov	r6, #0
   33ac0:	ldr	r3, [sp, #68]	; 0x44
   33ac4:	ldrb	r8, [r3]
   33ac8:	b	3399c <__assert_fail@plt+0x212b0>
   33acc:	cmp	r8, #3
   33ad0:	beq	33ac0 <__assert_fail@plt+0x213d4>
   33ad4:	mov	r8, #0
   33ad8:	b	3399c <__assert_fail@plt+0x212b0>
   33adc:	ldr	r3, [r7, #4]
   33ae0:	ldr	r2, [r7, #32]
   33ae4:	str	r6, [r3, r2, lsl #2]
   33ae8:	ldr	r2, [r7, #8]
   33aec:	ldr	r3, [r7, #32]
   33af0:	add	r1, r3, #1
   33af4:	str	r1, [r7, #32]
   33af8:	str	r8, [r2, r3, lsl #2]
   33afc:	mov	r9, #0
   33b00:	cmp	r6, r9
   33b04:	movhi	r3, #0
   33b08:	movls	r3, #1
   33b0c:	cmp	r8, r9
   33b10:	movcc	r3, #0
   33b14:	cmp	r3, #0
   33b18:	beq	33b28 <__assert_fail@plt+0x2143c>
   33b1c:	mov	r1, r9
   33b20:	ldr	r0, [sp, #12]
   33b24:	bl	2ad34 <__assert_fail@plt+0x18648>
   33b28:	add	r9, r9, #1
   33b2c:	cmp	r9, #256	; 0x100
   33b30:	bne	33b00 <__assert_fail@plt+0x21414>
   33b34:	ldr	r3, [sp, #16]
   33b38:	cmp	r3, #0
   33b3c:	str	r3, [sl]
   33b40:	beq	33b5c <__assert_fail@plt+0x21470>
   33b44:	b	337f8 <__assert_fail@plt+0x2110c>
   33b48:	mov	r3, #11
   33b4c:	b	33aa0 <__assert_fail@plt+0x213b4>
   33b50:	ldrb	r1, [sp, #60]	; 0x3c
   33b54:	ldr	r0, [sp, #12]
   33b58:	bl	2ad34 <__assert_fail@plt+0x18648>
   33b5c:	ldrb	r3, [r5, #4]
   33b60:	cmp	r3, #2
   33b64:	beq	3383c <__assert_fail@plt+0x21150>
   33b68:	cmp	r3, #21
   33b6c:	beq	33c28 <__assert_fail@plt+0x2153c>
   33b70:	mov	r3, #0
   33b74:	b	337bc <__assert_fail@plt+0x210d0>
   33b78:	ldr	r3, [r7, #20]
   33b7c:	ldr	r2, [sp, #24]
   33b80:	cmp	r3, r2
   33b84:	bne	33bac <__assert_fail@plt+0x214c0>
   33b88:	lsl	r3, r2, #1
   33b8c:	ldr	r0, [r7]
   33b90:	add	r3, r3, #1
   33b94:	lsl	r1, r3, #2
   33b98:	str	r3, [sp, #24]
   33b9c:	bl	2acc4 <__assert_fail@plt+0x185d8>
   33ba0:	cmp	r0, #0
   33ba4:	beq	343d4 <__assert_fail@plt+0x21ce8>
   33ba8:	str	r0, [r7]
   33bac:	ldr	r2, [r7]
   33bb0:	ldr	r3, [r7, #20]
   33bb4:	add	r1, r3, #1
   33bb8:	str	r1, [r7, #20]
   33bbc:	ldr	r1, [sp, #60]	; 0x3c
   33bc0:	str	r1, [r2, r3, lsl #2]
   33bc4:	b	33b5c <__assert_fail@plt+0x21470>
   33bc8:	ldr	r6, [sp, #60]	; 0x3c
   33bcc:	mov	r0, r6
   33bd0:	bl	123bc <strlen@plt>
   33bd4:	cmp	r0, #1
   33bd8:	movne	r3, #3
   33bdc:	bne	33720 <__assert_fail@plt+0x21034>
   33be0:	ldrb	r1, [r6]
   33be4:	ldr	r0, [sp, #12]
   33be8:	bl	2ad34 <__assert_fail@plt+0x18648>
   33bec:	mov	r3, #0
   33bf0:	str	r3, [sl]
   33bf4:	b	33b5c <__assert_fail@plt+0x21470>
   33bf8:	ldr	r3, [sp, #8]
   33bfc:	mov	r2, r7
   33c00:	ldr	r0, [fp, #64]	; 0x40
   33c04:	ldr	r1, [sp, #12]
   33c08:	str	r3, [sp, #4]
   33c0c:	ldr	r3, [sp, #60]	; 0x3c
   33c10:	str	r3, [sp]
   33c14:	add	r3, sp, #52	; 0x34
   33c18:	bl	2c730 <__assert_fail@plt+0x1a044>
   33c1c:	cmp	r0, #0
   33c20:	str	r0, [sl]
   33c24:	b	33b40 <__assert_fail@plt+0x21454>
   33c28:	ldr	r2, [sp, #20]
   33c2c:	ldr	r3, [fp, #40]	; 0x28
   33c30:	add	r3, r3, r2
   33c34:	str	r3, [fp, #40]	; 0x28
   33c38:	ldr	r3, [sp, #32]
   33c3c:	cmp	r3, #0
   33c40:	beq	33c4c <__assert_fail@plt+0x21560>
   33c44:	ldr	r0, [sp, #12]
   33c48:	bl	2ad80 <__assert_fail@plt+0x18694>
   33c4c:	ldr	r3, [r4, #92]	; 0x5c
   33c50:	cmp	r3, #1
   33c54:	ble	33c64 <__assert_fail@plt+0x21578>
   33c58:	ldr	r0, [sp, #12]
   33c5c:	ldr	r1, [r4, #60]	; 0x3c
   33c60:	bl	2adc8 <__assert_fail@plt+0x186dc>
   33c64:	ldr	r3, [r7, #20]
   33c68:	cmp	r3, #0
   33c6c:	bne	33cb8 <__assert_fail@plt+0x215cc>
   33c70:	ldr	r3, [r7, #24]
   33c74:	cmp	r3, #0
   33c78:	bne	33cb8 <__assert_fail@plt+0x215cc>
   33c7c:	ldr	r3, [r7, #28]
   33c80:	cmp	r3, #0
   33c84:	bne	33cb8 <__assert_fail@plt+0x215cc>
   33c88:	ldr	r3, [r7, #32]
   33c8c:	cmp	r3, #0
   33c90:	bne	33cb8 <__assert_fail@plt+0x215cc>
   33c94:	ldr	r3, [r4, #92]	; 0x5c
   33c98:	cmp	r3, #1
   33c9c:	ble	33d1c <__assert_fail@plt+0x21630>
   33ca0:	ldr	r3, [r7, #36]	; 0x24
   33ca4:	cmp	r3, #0
   33ca8:	bne	33cb8 <__assert_fail@plt+0x215cc>
   33cac:	ldrb	r3, [r7, #16]
   33cb0:	tst	r3, #1
   33cb4:	beq	33d1c <__assert_fail@plt+0x21630>
   33cb8:	ldrb	r3, [r4, #88]	; 0x58
   33cbc:	mov	r2, #0
   33cc0:	mov	r0, r4
   33cc4:	mov	r1, r2
   33cc8:	orr	r3, r3, #2
   33ccc:	strb	r3, [r4, #88]	; 0x58
   33cd0:	mov	r3, #6
   33cd4:	str	r7, [sp, #112]	; 0x70
   33cd8:	strb	r3, [sp, #116]	; 0x74
   33cdc:	add	r3, sp, #112	; 0x70
   33ce0:	bl	2b574 <__assert_fail@plt+0x18e88>
   33ce4:	subs	r6, r0, #0
   33ce8:	beq	343d4 <__assert_fail@plt+0x21ce8>
   33cec:	ldr	r3, [sp, #12]
   33cf0:	ldr	r2, [sp, #12]
   33cf4:	sub	r3, r3, #4
   33cf8:	add	r2, r2, #28
   33cfc:	ldr	r1, [r3, #4]!
   33d00:	cmp	r1, #0
   33d04:	bne	34390 <__assert_fail@plt+0x21ca4>
   33d08:	cmp	r2, r3
   33d0c:	bne	33cfc <__assert_fail@plt+0x21610>
   33d10:	ldr	r0, [sp, #12]
   33d14:	bl	284c4 <__assert_fail@plt+0x15dd8>
   33d18:	b	3367c <__assert_fail@plt+0x20f90>
   33d1c:	mov	r0, r7
   33d20:	bl	2c02c <__assert_fail@plt+0x19940>
   33d24:	mov	r3, #3
   33d28:	mov	r2, #0
   33d2c:	mov	r1, r2
   33d30:	mov	r0, r4
   33d34:	strb	r3, [sp, #116]	; 0x74
   33d38:	ldr	r3, [sp, #12]
   33d3c:	str	r3, [sp, #112]	; 0x70
   33d40:	add	r3, sp, #112	; 0x70
   33d44:	bl	2b574 <__assert_fail@plt+0x18e88>
   33d48:	b	343cc <__assert_fail@plt+0x21ce0>
   33d4c:	ldr	r2, [r5]
   33d50:	mov	r3, #1
   33d54:	ldr	r6, [r4, #84]	; 0x54
   33d58:	lsl	r3, r3, r2
   33d5c:	ands	r6, r3, r6
   33d60:	moveq	r3, #6
   33d64:	beq	33df8 <__assert_fail@plt+0x2170c>
   33d68:	ldr	r2, [r4, #80]	; 0x50
   33d6c:	mov	r0, r4
   33d70:	orr	r3, r2, r3
   33d74:	mov	r2, #0
   33d78:	mov	r1, r2
   33d7c:	str	r3, [r4, #80]	; 0x50
   33d80:	mov	r3, r5
   33d84:	bl	2b574 <__assert_fail@plt+0x18e88>
   33d88:	subs	r6, r0, #0
   33d8c:	ldrne	r3, [r4, #76]	; 0x4c
   33d90:	addne	r3, r3, #1
   33d94:	strne	r3, [r4, #76]	; 0x4c
   33d98:	beq	33488 <__assert_fail@plt+0x20d9c>
   33d9c:	ldrb	r3, [r4, #88]	; 0x58
   33da0:	orr	r3, r3, #2
   33da4:	strb	r3, [r4, #88]	; 0x58
   33da8:	b	334a0 <__assert_fail@plt+0x20db4>
   33dac:	cmp	r7, #0
   33db0:	beq	33dbc <__assert_fail@plt+0x216d0>
   33db4:	mov	r3, #13
   33db8:	b	3348c <__assert_fail@plt+0x20da0>
   33dbc:	cmp	r8, #0
   33dc0:	bne	33db4 <__assert_fail@plt+0x216c8>
   33dc4:	cmp	r9, #0
   33dc8:	beq	33de0 <__assert_fail@plt+0x216f4>
   33dcc:	mov	r1, fp
   33dd0:	mov	r0, r5
   33dd4:	ldr	r2, [sp, #8]
   33dd8:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   33ddc:	b	333c4 <__assert_fail@plt+0x20cd8>
   33de0:	cmp	r3, #9
   33de4:	bne	33e08 <__assert_fail@plt+0x2171c>
   33de8:	ldr	r3, [sp, #8]
   33dec:	ands	r6, r3, #131072	; 0x20000
   33df0:	bne	33e08 <__assert_fail@plt+0x2171c>
   33df4:	mov	r3, #16
   33df8:	str	r3, [sl]
   33dfc:	mov	r0, r6
   33e00:	add	sp, sp, #148	; 0x94
   33e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e08:	mov	r3, #1
   33e0c:	mov	r2, #0
   33e10:	mov	r1, r2
   33e14:	mov	r0, r4
   33e18:	strb	r3, [r5, #4]
   33e1c:	mov	r3, r5
   33e20:	bl	2b574 <__assert_fail@plt+0x18e88>
   33e24:	subs	r6, r0, #0
   33e28:	bne	334a0 <__assert_fail@plt+0x20db4>
   33e2c:	b	33488 <__assert_fail@plt+0x20d9c>
   33e30:	ldr	r3, [r5]
   33e34:	movw	r2, #783	; 0x30f
   33e38:	tst	r2, r3
   33e3c:	beq	33e88 <__assert_fail@plt+0x2179c>
   33e40:	ldrb	r3, [r4, #88]	; 0x58
   33e44:	ands	r7, r3, #16
   33e48:	bne	33e88 <__assert_fail@plt+0x2179c>
   33e4c:	orr	r3, r3, #16
   33e50:	ands	r1, r3, #8
   33e54:	strb	r3, [r4, #88]	; 0x58
   33e58:	bne	33f78 <__assert_fail@plt+0x2188c>
   33e5c:	ldr	r2, [pc, #1448]	; 3440c <__assert_fail@plt+0x21d20>
   33e60:	mvn	r6, #2013265921	; 0x78000001
   33e64:	mvn	r7, #-134217727	; 0xf8000001
   33e68:	tst	r3, #4
   33e6c:	str	r1, [r4, #96]	; 0x60
   33e70:	str	r2, [r4, #100]	; 0x64
   33e74:	strd	r6, [r4, #104]	; 0x68
   33e78:	beq	33f98 <__assert_fail@plt+0x218ac>
   33e7c:	mov	r2, #16
   33e80:	add	r0, r4, #112	; 0x70
   33e84:	bl	12434 <memset@plt>
   33e88:	ldr	r3, [r5]
   33e8c:	sub	r2, r3, #256	; 0x100
   33e90:	bics	r2, r2, #256	; 0x100
   33e94:	bne	33fc8 <__assert_fail@plt+0x218dc>
   33e98:	cmp	r3, #256	; 0x100
   33e9c:	bne	33fa4 <__assert_fail@plt+0x218b8>
   33ea0:	mov	r3, #6
   33ea4:	mov	r1, r2
   33ea8:	mov	r0, r4
   33eac:	str	r3, [r5]
   33eb0:	mov	r3, r5
   33eb4:	bl	2b574 <__assert_fail@plt+0x18e88>
   33eb8:	mov	r7, r0
   33ebc:	mov	r3, #9
   33ec0:	mov	r2, #0
   33ec4:	mov	r0, r4
   33ec8:	str	r3, [r5]
   33ecc:	mov	r1, r2
   33ed0:	mov	r3, r5
   33ed4:	bl	2b574 <__assert_fail@plt+0x18e88>
   33ed8:	mov	r6, r0
   33edc:	mov	r2, r0
   33ee0:	mov	r3, #10
   33ee4:	mov	r1, r7
   33ee8:	mov	r0, r4
   33eec:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   33ef0:	clz	r2, r6
   33ef4:	cmp	r7, #0
   33ef8:	lsr	r2, r2, #5
   33efc:	moveq	r2, #1
   33f00:	cmp	r0, #0
   33f04:	moveq	r2, #1
   33f08:	mov	r6, r0
   33f0c:	cmp	r2, #0
   33f10:	bne	33488 <__assert_fail@plt+0x20d9c>
   33f14:	mov	r1, fp
   33f18:	mov	r0, r5
   33f1c:	ldr	r2, [sp, #8]
   33f20:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   33f24:	b	33dfc <__assert_fail@plt+0x21710>
   33f28:	ldrh	r8, [r0], #2
   33f2c:	add	r1, r2, r7
   33f30:	ubfx	r8, r8, #3, #1
   33f34:	cmp	r1, #95	; 0x5f
   33f38:	movne	r1, r8
   33f3c:	orreq	r1, r8, #1
   33f40:	cmp	r1, #0
   33f44:	ldrne	r1, [r3]
   33f48:	orrne	r1, r1, r6, lsl r2
   33f4c:	add	r2, r2, #1
   33f50:	strne	r1, [r3]
   33f54:	cmp	r2, #32
   33f58:	bne	33f28 <__assert_fail@plt+0x2183c>
   33f5c:	add	r3, r3, #4
   33f60:	add	r7, r7, #32
   33f64:	cmp	lr, r3
   33f68:	beq	33e88 <__assert_fail@plt+0x2179c>
   33f6c:	add	r0, ip, r7, lsl #1
   33f70:	mov	r2, #0
   33f74:	b	33f28 <__assert_fail@plt+0x2183c>
   33f78:	mov	r6, r7
   33f7c:	bl	12374 <__ctype_b_loc@plt>
   33f80:	add	r3, r6, #24
   33f84:	add	lr, r4, #128	; 0x80
   33f88:	ldr	ip, [r0]
   33f8c:	add	r3, r4, r3, lsl #2
   33f90:	mov	r6, #1
   33f94:	b	33f6c <__assert_fail@plt+0x21880>
   33f98:	mov	r7, #128	; 0x80
   33f9c:	mov	r6, #4
   33fa0:	b	33f7c <__assert_fail@plt+0x21890>
   33fa4:	mov	r3, #5
   33fa8:	mov	r1, r2
   33fac:	mov	r0, r4
   33fb0:	str	r3, [r5]
   33fb4:	mov	r3, r5
   33fb8:	bl	2b574 <__assert_fail@plt+0x18e88>
   33fbc:	mov	r7, r0
   33fc0:	mov	r3, #10
   33fc4:	b	33ec0 <__assert_fail@plt+0x217d4>
   33fc8:	mov	r2, #0
   33fcc:	mov	r3, r5
   33fd0:	mov	r1, r2
   33fd4:	mov	r0, r4
   33fd8:	bl	2b574 <__assert_fail@plt+0x18e88>
   33fdc:	subs	r6, r0, #0
   33fe0:	bne	33f14 <__assert_fail@plt+0x21828>
   33fe4:	b	33488 <__assert_fail@plt+0x20d9c>
   33fe8:	mov	r2, #0
   33fec:	mov	r3, r5
   33ff0:	mov	r1, r2
   33ff4:	mov	r0, r4
   33ff8:	bl	2b574 <__assert_fail@plt+0x18e88>
   33ffc:	subs	r6, r0, #0
   34000:	beq	33488 <__assert_fail@plt+0x20d9c>
   34004:	ldr	r3, [r4, #92]	; 0x5c
   34008:	cmp	r3, #1
   3400c:	bgt	33d9c <__assert_fail@plt+0x216b0>
   34010:	b	334a0 <__assert_fail@plt+0x20db4>
   34014:	sub	r3, r3, #33	; 0x21
   34018:	ldr	r2, [pc, #1008]	; 34410 <__assert_fail@plt+0x21d24>
   3401c:	clz	r3, r3
   34020:	lsr	r3, r3, #5
   34024:	stm	sp, {r3, sl}
   34028:	ldr	r3, [pc, #996]	; 34414 <__assert_fail@plt+0x21d28>
   3402c:	mov	r0, r4
   34030:	ldr	r1, [fp, #64]	; 0x40
   34034:	bl	2ce48 <__assert_fail@plt+0x1a75c>
   34038:	ldr	r3, [sl]
   3403c:	mov	r6, r0
   34040:	clz	r0, r0
   34044:	lsr	r0, r0, #5
   34048:	cmp	r3, #0
   3404c:	moveq	r0, #0
   34050:	cmp	r0, #0
   34054:	b	33694 <__assert_fail@plt+0x20fa8>
   34058:	sub	r3, r3, #35	; 0x23
   3405c:	ldr	r2, [pc, #948]	; 34418 <__assert_fail@plt+0x21d2c>
   34060:	clz	r3, r3
   34064:	lsr	r3, r3, #5
   34068:	stm	sp, {r3, sl}
   3406c:	ldr	r3, [pc, #936]	; 3441c <__assert_fail@plt+0x21d30>
   34070:	b	3402c <__assert_fail@plt+0x21940>
   34074:	mov	r3, #5
   34078:	b	3348c <__assert_fail@plt+0x20da0>
   3407c:	cmn	r0, #2
   34080:	bne	340e8 <__assert_fail@plt+0x219fc>
   34084:	cmn	r9, #2
   34088:	cmnne	r8, #2
   3408c:	bne	34150 <__assert_fail@plt+0x21a64>
   34090:	ldr	r3, [sp, #8]
   34094:	ands	r7, r3, #2097152	; 0x200000
   34098:	bne	3412c <__assert_fail@plt+0x21a40>
   3409c:	ldrb	r3, [r5, #4]
   340a0:	cmp	r3, #2
   340a4:	moveq	r3, #9
   340a8:	streq	r3, [sl]
   340ac:	bne	3352c <__assert_fail@plt+0x20e40>
   340b0:	ldr	r3, [sl]
   340b4:	clz	r2, r7
   340b8:	lsr	r2, r2, #5
   340bc:	cmp	r3, #0
   340c0:	moveq	r2, #0
   340c4:	cmp	r2, #0
   340c8:	beq	34354 <__assert_fail@plt+0x21c68>
   340cc:	cmp	r6, #0
   340d0:	beq	33698 <__assert_fail@plt+0x20fac>
   340d4:	mov	r2, #0
   340d8:	ldr	r1, [pc, #808]	; 34408 <__assert_fail@plt+0x21d1c>
   340dc:	mov	r0, r6
   340e0:	bl	2af48 <__assert_fail@plt+0x1885c>
   340e4:	b	33698 <__assert_fail@plt+0x20fac>
   340e8:	ldrb	r3, [r5, #4]
   340ec:	cmp	r3, #24
   340f0:	moveq	r8, r9
   340f4:	beq	34084 <__assert_fail@plt+0x21998>
   340f8:	cmp	r3, #1
   340fc:	bne	34124 <__assert_fail@plt+0x21a38>
   34100:	ldrb	r3, [r5]
   34104:	cmp	r3, #44	; 0x2c
   34108:	bne	34124 <__assert_fail@plt+0x21a38>
   3410c:	mov	r1, r5
   34110:	mov	r0, fp
   34114:	ldr	r2, [sp, #8]
   34118:	bl	2f9cc <__assert_fail@plt+0x1d2e0>
   3411c:	mov	r8, r0
   34120:	b	34084 <__assert_fail@plt+0x21998>
   34124:	mvn	r8, #1
   34128:	b	34084 <__assert_fail@plt+0x21998>
   3412c:	ldr	r3, [sp, #12]
   34130:	str	r3, [fp, #40]	; 0x28
   34134:	add	r3, sp, #112	; 0x70
   34138:	ldm	r3, {r0, r1}
   3413c:	mov	r3, #1
   34140:	stm	r5, {r0, r1}
   34144:	strb	r3, [r5, #4]
   34148:	mov	r7, r6
   3414c:	b	340b0 <__assert_fail@plt+0x219c4>
   34150:	cmn	r8, #1
   34154:	cmpne	r9, r8
   34158:	bgt	3352c <__assert_fail@plt+0x20e40>
   3415c:	ldrb	r3, [r5, #4]
   34160:	cmp	r3, #24
   34164:	bne	3352c <__assert_fail@plt+0x20e40>
   34168:	cmn	r8, #1
   3416c:	movw	r3, #32767	; 0x7fff
   34170:	bne	341c0 <__assert_fail@plt+0x21ad4>
   34174:	cmp	r9, r3
   34178:	movle	r3, #0
   3417c:	movgt	r3, #1
   34180:	cmp	r3, #0
   34184:	movne	r3, #15
   34188:	bne	33530 <__assert_fail@plt+0x20e44>
   3418c:	mov	r1, fp
   34190:	mov	r0, r5
   34194:	ldr	r2, [sp, #8]
   34198:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   3419c:	cmp	r6, #0
   341a0:	beq	34148 <__assert_fail@plt+0x21a5c>
   341a4:	orrs	r7, r9, r8
   341a8:	bne	341d8 <__assert_fail@plt+0x21aec>
   341ac:	mov	r2, r7
   341b0:	ldr	r1, [pc, #592]	; 34408 <__assert_fail@plt+0x21d1c>
   341b4:	mov	r0, r6
   341b8:	bl	2af48 <__assert_fail@plt+0x1885c>
   341bc:	b	340b0 <__assert_fail@plt+0x219c4>
   341c0:	cmp	r8, r3
   341c4:	b	34178 <__assert_fail@plt+0x21a8c>
   341c8:	cmp	r3, #19
   341cc:	moveq	r8, #1
   341d0:	mvnne	r8, #0
   341d4:	b	3418c <__assert_fail@plt+0x21aa0>
   341d8:	cmp	r9, #0
   341dc:	movle	r3, #0
   341e0:	strle	r6, [sp, #12]
   341e4:	strle	r3, [sp, #16]
   341e8:	ble	34270 <__assert_fail@plt+0x21b84>
   341ec:	mov	r7, r6
   341f0:	mov	r3, #2
   341f4:	str	r6, [sp, #12]
   341f8:	b	3423c <__assert_fail@plt+0x21b50>
   341fc:	mov	r1, r4
   34200:	ldr	r0, [sp, #12]
   34204:	bl	2b628 <__assert_fail@plt+0x18f3c>
   34208:	mov	r2, r0
   3420c:	mov	r3, #16
   34210:	str	r0, [sp, #12]
   34214:	mov	r1, r7
   34218:	mov	r0, r4
   3421c:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   34220:	ldr	r3, [sp, #12]
   34224:	mov	r7, r0
   34228:	cmp	r0, #0
   3422c:	cmpne	r3, #0
   34230:	beq	342bc <__assert_fail@plt+0x21bd0>
   34234:	ldr	r3, [sp, #16]
   34238:	add	r3, r3, #1
   3423c:	str	r3, [sp, #16]
   34240:	ldr	r3, [sp, #16]
   34244:	cmp	r9, r3
   34248:	bge	341fc <__assert_fail@plt+0x21b10>
   3424c:	cmp	r9, r8
   34250:	beq	340b0 <__assert_fail@plt+0x219c4>
   34254:	mov	r1, r4
   34258:	ldr	r0, [sp, #12]
   3425c:	bl	2b628 <__assert_fail@plt+0x18f3c>
   34260:	subs	r3, r0, #0
   34264:	str	r3, [sp, #12]
   34268:	beq	342bc <__assert_fail@plt+0x21bd0>
   3426c:	str	r7, [sp, #16]
   34270:	ldr	r3, [sp, #12]
   34274:	ldrb	r3, [r3, #24]
   34278:	cmp	r3, #17
   3427c:	bne	34294 <__assert_fail@plt+0x21ba8>
   34280:	ldr	r3, [sp, #12]
   34284:	ldr	r1, [pc, #404]	; 34420 <__assert_fail@plt+0x21d34>
   34288:	mov	r0, r3
   3428c:	ldr	r2, [r3, #20]
   34290:	bl	2af48 <__assert_fail@plt+0x1885c>
   34294:	cmn	r8, #1
   34298:	mov	r2, #0
   3429c:	ldr	r1, [sp, #12]
   342a0:	moveq	r3, #11
   342a4:	movne	r3, #10
   342a8:	mov	r0, r4
   342ac:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   342b0:	subs	r7, r0, #0
   342b4:	addne	r9, r9, #2
   342b8:	bne	34324 <__assert_fail@plt+0x21c38>
   342bc:	mov	r3, #12
   342c0:	b	33530 <__assert_fail@plt+0x20e44>
   342c4:	mov	r1, r4
   342c8:	ldr	r0, [sp, #12]
   342cc:	bl	2b628 <__assert_fail@plt+0x18f3c>
   342d0:	mov	r2, r0
   342d4:	mov	r3, #16
   342d8:	str	r0, [sp, #12]
   342dc:	mov	r1, r7
   342e0:	mov	r0, r4
   342e4:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   342e8:	ldr	r3, [sp, #12]
   342ec:	mov	r1, r0
   342f0:	clz	r0, r0
   342f4:	lsr	r0, r0, #5
   342f8:	cmp	r3, #0
   342fc:	movne	r2, r0
   34300:	moveq	r2, #1
   34304:	cmp	r2, #0
   34308:	bne	342bc <__assert_fail@plt+0x21bd0>
   3430c:	mov	r3, #10
   34310:	mov	r0, r4
   34314:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   34318:	subs	r7, r0, #0
   3431c:	beq	342bc <__assert_fail@plt+0x21bd0>
   34320:	add	r9, r9, #1
   34324:	cmp	r8, r9
   34328:	bge	342c4 <__assert_fail@plt+0x21bd8>
   3432c:	ldr	r3, [sp, #16]
   34330:	cmp	r3, #0
   34334:	beq	340b0 <__assert_fail@plt+0x219c4>
   34338:	mov	r2, r7
   3433c:	mov	r3, #16
   34340:	ldr	r1, [sp, #16]
   34344:	mov	r0, r4
   34348:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   3434c:	mov	r7, r0
   34350:	b	340b0 <__assert_fail@plt+0x219c4>
   34354:	ldr	r3, [sp, #8]
   34358:	tst	r3, #16777216	; 0x1000000
   3435c:	beq	34388 <__assert_fail@plt+0x21c9c>
   34360:	ldrb	r3, [r5, #4]
   34364:	cmp	r3, #23
   34368:	cmpne	r3, #11
   3436c:	bne	34388 <__assert_fail@plt+0x21c9c>
   34370:	cmp	r7, #0
   34374:	beq	33db4 <__assert_fail@plt+0x216c8>
   34378:	ldr	r1, [pc, #136]	; 34408 <__assert_fail@plt+0x21d1c>
   3437c:	mov	r0, r7
   34380:	bl	2af48 <__assert_fail@plt+0x1885c>
   34384:	b	33db4 <__assert_fail@plt+0x216c8>
   34388:	mov	r6, r7
   3438c:	b	334b0 <__assert_fail@plt+0x20dc4>
   34390:	mov	r3, #3
   34394:	mov	r2, #0
   34398:	mov	r1, r2
   3439c:	mov	r0, r4
   343a0:	strb	r3, [sp, #116]	; 0x74
   343a4:	ldr	r3, [sp, #12]
   343a8:	str	r3, [sp, #112]	; 0x70
   343ac:	add	r3, sp, #112	; 0x70
   343b0:	bl	2b574 <__assert_fail@plt+0x18e88>
   343b4:	subs	r1, r0, #0
   343b8:	beq	343d4 <__assert_fail@plt+0x21ce8>
   343bc:	mov	r3, #10
   343c0:	mov	r2, r6
   343c4:	mov	r0, r4
   343c8:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   343cc:	subs	r6, r0, #0
   343d0:	bne	3367c <__assert_fail@plt+0x20f90>
   343d4:	mov	r3, #12
   343d8:	b	33720 <__assert_fail@plt+0x21034>
   343dc:	cmp	r8, #3
   343e0:	bne	33ab0 <__assert_fail@plt+0x213c4>
   343e4:	b	3396c <__assert_fail@plt+0x21280>
   343e8:	cmp	r2, #0
   343ec:	beq	3398c <__assert_fail@plt+0x212a0>
   343f0:	cmp	r8, #0
   343f4:	movne	r6, #0
   343f8:	bne	33ad4 <__assert_fail@plt+0x213e8>
   343fc:	mov	r6, r8
   34400:	b	33998 <__assert_fail@plt+0x212ac>
   34404:	addeq	r0, ip, r0, lsl #16
   34408:	muleq	r2, r0, r0
   3440c:	mvnseq	r0, #0
   34410:	andeq	sp, r3, r2, lsl #3
   34414:	andeq	sp, r3, sp, lsr #3
   34418:	andeq	sp, r3, lr, lsl #3
   3441c:	andeq	r9, r3, r7, ror r5
   34420:	andeq	fp, r2, r0, lsl #2
   34424:	ldr	ip, [r1]
   34428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3442c:	sub	sp, sp, #20
   34430:	mov	fp, r3
   34434:	mov	sl, r0
   34438:	mov	r7, r1
   3443c:	mov	r8, r2
   34440:	ldr	r5, [sp, #60]	; 0x3c
   34444:	str	ip, [sp, #12]
   34448:	ldr	ip, [sp, #56]	; 0x38
   3444c:	str	ip, [sp]
   34450:	str	r5, [sp, #4]
   34454:	bl	3339c <__assert_fail@plt+0x20cb0>
   34458:	ldr	r3, [r5]
   3445c:	mov	r4, r0
   34460:	clz	r0, r0
   34464:	lsr	r0, r0, #5
   34468:	cmp	r3, #0
   3446c:	moveq	r0, #0
   34470:	cmp	r0, #0
   34474:	beq	344e4 <__assert_fail@plt+0x21df8>
   34478:	mov	r4, #0
   3447c:	mov	r0, r4
   34480:	add	sp, sp, #20
   34484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34488:	cmp	r4, #0
   3448c:	cmpne	r6, #0
   34490:	beq	344dc <__assert_fail@plt+0x21df0>
   34494:	mov	r3, #16
   34498:	mov	r2, r6
   3449c:	ldr	r0, [sp, #12]
   344a0:	mov	r1, r4
   344a4:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   344a8:	subs	r9, r0, #0
   344ac:	bne	34568 <__assert_fail@plt+0x21e7c>
   344b0:	mov	r2, r9
   344b4:	ldr	r1, [pc, #180]	; 34570 <__assert_fail@plt+0x21e84>
   344b8:	mov	r0, r6
   344bc:	bl	2af48 <__assert_fail@plt+0x1885c>
   344c0:	mov	r2, r9
   344c4:	ldr	r1, [pc, #164]	; 34570 <__assert_fail@plt+0x21e84>
   344c8:	mov	r0, r4
   344cc:	bl	2af48 <__assert_fail@plt+0x1885c>
   344d0:	mov	r2, #12
   344d4:	str	r2, [r5]
   344d8:	b	34478 <__assert_fail@plt+0x21d8c>
   344dc:	cmp	r4, #0
   344e0:	moveq	r4, r6
   344e4:	ldrb	r2, [r8, #4]
   344e8:	and	r3, r2, #247	; 0xf7
   344ec:	cmp	r3, #2
   344f0:	beq	3447c <__assert_fail@plt+0x21d90>
   344f4:	ldr	r3, [sp, #56]	; 0x38
   344f8:	clz	r3, r3
   344fc:	lsr	r3, r3, #5
   34500:	cmp	r2, #9
   34504:	orrne	r3, r3, #1
   34508:	cmp	r3, #0
   3450c:	beq	3447c <__assert_fail@plt+0x21d90>
   34510:	ldr	r3, [sp, #56]	; 0x38
   34514:	mov	r2, r8
   34518:	mov	r1, r7
   3451c:	mov	r0, sl
   34520:	stm	sp, {r3, r5}
   34524:	mov	r3, fp
   34528:	bl	3339c <__assert_fail@plt+0x20cb0>
   3452c:	ldr	r3, [r5]
   34530:	mov	r6, r0
   34534:	clz	r0, r0
   34538:	lsr	r0, r0, #5
   3453c:	cmp	r3, #0
   34540:	moveq	r0, #0
   34544:	cmp	r0, #0
   34548:	beq	34488 <__assert_fail@plt+0x21d9c>
   3454c:	cmp	r4, #0
   34550:	beq	34478 <__assert_fail@plt+0x21d8c>
   34554:	mov	r2, #0
   34558:	ldr	r1, [pc, #16]	; 34570 <__assert_fail@plt+0x21e84>
   3455c:	mov	r0, r4
   34560:	bl	2af48 <__assert_fail@plt+0x1885c>
   34564:	b	34478 <__assert_fail@plt+0x21d8c>
   34568:	mov	r4, r9
   3456c:	b	344e4 <__assert_fail@plt+0x21df8>
   34570:	muleq	r2, r0, r0
   34574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34578:	sub	sp, sp, #20
   3457c:	mov	sl, r3
   34580:	mov	r8, r0
   34584:	mov	r9, r1
   34588:	mov	r7, r2
   3458c:	ldr	r5, [r1]
   34590:	ldr	r6, [sp, #60]	; 0x3c
   34594:	ldr	ip, [r5, #84]	; 0x54
   34598:	stmib	sp, {r6, ip}
   3459c:	ldr	ip, [sp, #56]	; 0x38
   345a0:	str	ip, [sp]
   345a4:	bl	34424 <__assert_fail@plt+0x21d38>
   345a8:	ldr	r3, [r6]
   345ac:	mov	r4, r0
   345b0:	clz	r0, r0
   345b4:	lsr	r0, r0, #5
   345b8:	cmp	r3, #0
   345bc:	moveq	r0, #0
   345c0:	cmp	r0, #0
   345c4:	orreq	r3, sl, #8388608	; 0x800000
   345c8:	streq	r3, [sp, #12]
   345cc:	beq	34618 <__assert_fail@plt+0x21f2c>
   345d0:	mov	r4, #0
   345d4:	mov	r0, r4
   345d8:	add	sp, sp, #20
   345dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   345e0:	ldr	r3, [r5, #84]	; 0x54
   345e4:	orr	fp, r3, fp
   345e8:	str	fp, [r5, #84]	; 0x54
   345ec:	mov	r1, r4
   345f0:	mov	r3, #10
   345f4:	mov	r0, r5
   345f8:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   345fc:	subs	r4, r0, #0
   34600:	bne	34618 <__assert_fail@plt+0x21f2c>
   34604:	mov	r3, #12
   34608:	str	r3, [r6]
   3460c:	b	345d4 <__assert_fail@plt+0x21ee8>
   34610:	mov	r2, #0
   34614:	b	345ec <__assert_fail@plt+0x21f00>
   34618:	ldrb	r3, [r7, #4]
   3461c:	cmp	r3, #10
   34620:	bne	345d4 <__assert_fail@plt+0x21ee8>
   34624:	mov	r1, r8
   34628:	mov	r0, r7
   3462c:	ldr	r2, [sp, #12]
   34630:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   34634:	ldrb	r3, [r7, #4]
   34638:	and	r2, r3, #247	; 0xf7
   3463c:	cmp	r2, #2
   34640:	beq	34610 <__assert_fail@plt+0x21f24>
   34644:	ldr	r2, [sp, #56]	; 0x38
   34648:	clz	r2, r2
   3464c:	lsr	r2, r2, #5
   34650:	cmp	r3, #9
   34654:	orrne	r2, r2, #1
   34658:	cmp	r2, #0
   3465c:	beq	345ec <__assert_fail@plt+0x21f00>
   34660:	ldr	r3, [sp, #8]
   34664:	mov	r2, r7
   34668:	mov	r1, r9
   3466c:	mov	r0, r8
   34670:	ldr	fp, [r5, #84]	; 0x54
   34674:	str	r3, [r5, #84]	; 0x54
   34678:	ldr	r3, [sp, #56]	; 0x38
   3467c:	str	r3, [sp]
   34680:	mov	r3, sl
   34684:	str	r6, [sp, #4]
   34688:	bl	34424 <__assert_fail@plt+0x21d38>
   3468c:	ldr	r3, [r6]
   34690:	mov	r2, r0
   34694:	clz	r0, r0
   34698:	lsr	r0, r0, #5
   3469c:	cmp	r3, #0
   346a0:	moveq	r0, #0
   346a4:	cmp	r0, #0
   346a8:	beq	345e0 <__assert_fail@plt+0x21ef4>
   346ac:	cmp	r4, #0
   346b0:	beq	345d0 <__assert_fail@plt+0x21ee4>
   346b4:	mov	r2, #0
   346b8:	ldr	r1, [pc, #8]	; 346c8 <__assert_fail@plt+0x21fdc>
   346bc:	mov	r0, r4
   346c0:	bl	2af48 <__assert_fail@plt+0x1885c>
   346c4:	b	345d0 <__assert_fail@plt+0x21ee4>
   346c8:	muleq	r2, r0, r0
   346cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   346d0:	mov	r8, r3
   346d4:	sub	sp, sp, #132	; 0x84
   346d8:	mov	r3, #0
   346dc:	mov	r6, r0
   346e0:	mov	r9, r1
   346e4:	mov	r5, r2
   346e8:	str	r3, [r0, #8]
   346ec:	str	r3, [sp, #24]
   346f0:	str	r3, [r0, #24]
   346f4:	ldrb	r3, [r0, #28]
   346f8:	str	r8, [r0, #12]
   346fc:	ldr	r4, [r0]
   34700:	bic	r3, r3, #111	; 0x6f
   34704:	strb	r3, [r0, #28]
   34708:	ldr	r3, [r0, #4]
   3470c:	cmp	r3, #159	; 0x9f
   34710:	bhi	34734 <__assert_fail@plt+0x22048>
   34714:	mov	r0, r4
   34718:	mov	r1, #160	; 0xa0
   3471c:	bl	2acc4 <__assert_fail@plt+0x185d8>
   34720:	subs	r4, r0, #0
   34724:	beq	35228 <__assert_fail@plt+0x22b3c>
   34728:	mov	r3, #160	; 0xa0
   3472c:	str	r4, [r6]
   34730:	str	r3, [r6, #4]
   34734:	mov	r2, #160	; 0xa0
   34738:	mov	r1, #0
   3473c:	mov	r0, r4
   34740:	str	r2, [r6, #8]
   34744:	bl	12434 <memset@plt>
   34748:	mov	r3, #31
   3474c:	str	r3, [r4, #64]	; 0x40
   34750:	ldr	r3, [pc, #2780]	; 35234 <__assert_fail@plt+0x22b48>
   34754:	cmp	r5, r3
   34758:	bhi	348cc <__assert_fail@plt+0x221e0>
   3475c:	add	sl, r5, #1
   34760:	mov	r7, #1
   34764:	lsl	r0, sl, #3
   34768:	str	sl, [r4, #4]
   3476c:	bl	2a340 <__assert_fail@plt+0x17c54>
   34770:	str	r0, [r4]
   34774:	cmp	r5, r7
   34778:	lslcs	r7, r7, #1
   3477c:	bcs	34774 <__assert_fail@plt+0x22088>
   34780:	mov	r1, r7
   34784:	mov	r0, #12
   34788:	sub	r7, r7, #1
   3478c:	bl	27fbc <__assert_fail@plt+0x158d0>
   34790:	str	r0, [r4, #32]
   34794:	str	r7, [r4, #68]	; 0x44
   34798:	bl	12260 <__ctype_get_mb_cur_max@plt>
   3479c:	str	r0, [r4, #92]	; 0x5c
   347a0:	mov	r0, #14
   347a4:	bl	12560 <nl_langinfo@plt>
   347a8:	ldrb	r3, [r0]
   347ac:	and	r3, r3, #223	; 0xdf
   347b0:	cmp	r3, #85	; 0x55
   347b4:	bne	34804 <__assert_fail@plt+0x22118>
   347b8:	ldrb	r3, [r0, #1]
   347bc:	and	r3, r3, #223	; 0xdf
   347c0:	cmp	r3, #84	; 0x54
   347c4:	bne	34804 <__assert_fail@plt+0x22118>
   347c8:	ldrb	r3, [r0, #2]
   347cc:	and	r3, r3, #223	; 0xdf
   347d0:	cmp	r3, #70	; 0x46
   347d4:	bne	34804 <__assert_fail@plt+0x22118>
   347d8:	ldrb	r3, [r0, #3]
   347dc:	ldr	r1, [pc, #2644]	; 35238 <__assert_fail@plt+0x22b4c>
   347e0:	cmp	r3, #45	; 0x2d
   347e4:	moveq	r3, #4
   347e8:	movne	r3, #3
   347ec:	add	r0, r0, r3
   347f0:	bl	11ffc <strcmp@plt>
   347f4:	cmp	r0, #0
   347f8:	ldrbeq	r3, [r4, #88]	; 0x58
   347fc:	orreq	r3, r3, #4
   34800:	strbeq	r3, [r4, #88]	; 0x58
   34804:	ldrb	r3, [r4, #88]	; 0x58
   34808:	bfc	r3, #3, #1
   3480c:	strb	r3, [r4, #88]	; 0x58
   34810:	ldr	r3, [r4, #92]	; 0x5c
   34814:	cmp	r3, #1
   34818:	ble	348b4 <__assert_fail@plt+0x221c8>
   3481c:	ldrb	r7, [r4, #88]	; 0x58
   34820:	ands	r7, r7, #4
   34824:	ldrne	r3, [pc, #2576]	; 3523c <__assert_fail@plt+0x22b50>
   34828:	strne	r3, [r4, #60]	; 0x3c
   3482c:	bne	348b4 <__assert_fail@plt+0x221c8>
   34830:	mov	r1, #1
   34834:	mov	r0, #32
   34838:	bl	27fbc <__assert_fail@plt+0x158d0>
   3483c:	cmp	r0, #0
   34840:	str	r0, [r4, #60]	; 0x3c
   34844:	beq	348cc <__assert_fail@plt+0x221e0>
   34848:	lsl	r2, r7, #3
   3484c:	mov	fp, #0
   34850:	add	r3, fp, r2
   34854:	mov	r0, r3
   34858:	str	r3, [sp, #12]
   3485c:	str	r2, [sp, #16]
   34860:	bl	12470 <btowc@plt>
   34864:	cmn	r0, #1
   34868:	ldr	r3, [sp, #12]
   3486c:	mov	r1, #1
   34870:	ldrne	lr, [r4, #60]	; 0x3c
   34874:	ldr	r2, [sp, #16]
   34878:	ldrne	ip, [lr, r7]
   3487c:	orrne	ip, ip, r1, lsl fp
   34880:	strne	ip, [lr, r7]
   34884:	bics	ip, r3, #127	; 0x7f
   34888:	bne	3489c <__assert_fail@plt+0x221b0>
   3488c:	cmp	r0, r3
   34890:	ldrbne	r3, [r4, #88]	; 0x58
   34894:	orrne	r3, r3, #8
   34898:	strbne	r3, [r4, #88]	; 0x58
   3489c:	add	fp, fp, #1
   348a0:	cmp	fp, #32
   348a4:	bne	34850 <__assert_fail@plt+0x22164>
   348a8:	add	r7, r7, #4
   348ac:	cmp	r7, #32
   348b0:	bne	34848 <__assert_fail@plt+0x2215c>
   348b4:	ldr	r3, [r4]
   348b8:	cmp	r3, #0
   348bc:	beq	348cc <__assert_fail@plt+0x221e0>
   348c0:	ldr	r3, [r4, #32]
   348c4:	cmp	r3, #0
   348c8:	bne	348ec <__assert_fail@plt+0x22200>
   348cc:	mov	r3, #12
   348d0:	str	r3, [sp, #24]
   348d4:	mov	r0, r4
   348d8:	bl	2dff8 <__assert_fail@plt+0x1b90c>
   348dc:	mov	r3, #0
   348e0:	str	r3, [r6]
   348e4:	str	r3, [r6, #4]
   348e8:	b	34ea0 <__assert_fail@plt+0x227b4>
   348ec:	ldr	r2, [pc, #2380]	; 35240 <__assert_fail@plt+0x22b54>
   348f0:	mov	r3, #0
   348f4:	ldr	r1, [pc, #2376]	; 35244 <__assert_fail@plt+0x22b58>
   348f8:	str	r3, [sp, #24]
   348fc:	mov	r3, #1
   34900:	cmp	r2, #0
   34904:	moveq	r3, r2
   34908:	mov	r2, #1
   3490c:	cmp	r1, #0
   34910:	moveq	r2, r1
   34914:	orr	r3, r3, r2
   34918:	ands	r3, r3, #255	; 0xff
   3491c:	str	r3, [sp, #16]
   34920:	beq	34944 <__assert_fail@plt+0x22258>
   34924:	mov	r1, #0
   34928:	add	r0, r4, #136	; 0x88
   3492c:	bl	1211c <pthread_mutex_init@plt>
   34930:	cmp	r0, #0
   34934:	bne	348cc <__assert_fail@plt+0x221e0>
   34938:	ldr	r3, [sp, #24]
   3493c:	cmp	r3, #0
   34940:	bne	348d4 <__assert_fail@plt+0x221e8>
   34944:	ldr	r3, [r6, #20]
   34948:	and	r7, r8, #4194304	; 0x400000
   3494c:	mov	r2, #76	; 0x4c
   34950:	mov	r1, #0
   34954:	add	r0, sp, #48	; 0x30
   34958:	orr	fp, r3, r7
   3495c:	str	r3, [sp, #12]
   34960:	bl	12434 <memset@plt>
   34964:	ldr	r3, [sp, #12]
   34968:	str	r9, [sp, #44]	; 0x2c
   3496c:	str	r5, [sp, #88]	; 0x58
   34970:	str	r5, [sp, #92]	; 0x5c
   34974:	str	r5, [sp, #96]	; 0x60
   34978:	str	r5, [sp, #100]	; 0x64
   3497c:	str	r3, [sp, #108]	; 0x6c
   34980:	adds	r3, r7, #0
   34984:	movne	r3, #1
   34988:	strb	r3, [sp, #116]	; 0x74
   3498c:	adds	r3, fp, #0
   34990:	movne	r3, #1
   34994:	cmp	r5, #0
   34998:	strb	r3, [sp, #119]	; 0x77
   3499c:	ldr	r3, [r4, #92]	; 0x5c
   349a0:	str	r3, [sp, #124]	; 0x7c
   349a4:	ldrb	r3, [r4, #88]	; 0x58
   349a8:	ubfx	r2, r3, #2, #1
   349ac:	ubfx	r3, r3, #3, #1
   349b0:	strb	r2, [sp, #117]	; 0x75
   349b4:	strb	r3, [sp, #118]	; 0x76
   349b8:	bne	34a2c <__assert_fail@plt+0x22340>
   349bc:	ldrb	r3, [sp, #119]	; 0x77
   349c0:	cmp	r3, #0
   349c4:	ldr	r3, [r4, #92]	; 0x5c
   349c8:	ldrne	r9, [sp, #48]	; 0x30
   349cc:	cmp	r7, #0
   349d0:	str	r9, [sp, #48]	; 0x30
   349d4:	beq	34b60 <__assert_fail@plt+0x22474>
   349d8:	cmp	r3, #1
   349dc:	ble	34a98 <__assert_fail@plt+0x223ac>
   349e0:	add	r0, sp, #44	; 0x2c
   349e4:	bl	2ba38 <__assert_fail@plt+0x1934c>
   349e8:	cmp	r0, #0
   349ec:	bne	34a40 <__assert_fail@plt+0x22354>
   349f0:	ldr	r3, [sp, #76]	; 0x4c
   349f4:	cmp	r5, r3
   349f8:	ble	34a40 <__assert_fail@plt+0x22354>
   349fc:	ldr	r3, [sp, #72]	; 0x48
   34a00:	ldr	r2, [r4, #92]	; 0x5c
   34a04:	ldr	r1, [sp, #80]	; 0x50
   34a08:	add	r3, r3, r2
   34a0c:	cmp	r1, r3
   34a10:	bgt	34a40 <__assert_fail@plt+0x22354>
   34a14:	lsl	r1, r1, #1
   34a18:	add	r0, sp, #44	; 0x2c
   34a1c:	bl	2b47c <__assert_fail@plt+0x18d90>
   34a20:	cmp	r0, #0
   34a24:	beq	349e0 <__assert_fail@plt+0x222f4>
   34a28:	b	34a40 <__assert_fail@plt+0x22354>
   34a2c:	mov	r1, sl
   34a30:	add	r0, sp, #44	; 0x2c
   34a34:	bl	2b47c <__assert_fail@plt+0x18d90>
   34a38:	cmp	r0, #0
   34a3c:	beq	349bc <__assert_fail@plt+0x222d0>
   34a40:	cmp	r0, #0
   34a44:	str	r0, [sp, #24]
   34a48:	beq	34aa8 <__assert_fail@plt+0x223bc>
   34a4c:	ldr	r7, [r6]
   34a50:	ldr	r5, [r7, #56]	; 0x38
   34a54:	cmp	r5, #0
   34a58:	bne	34b98 <__assert_fail@plt+0x224ac>
   34a5c:	mov	r3, #31
   34a60:	str	r5, [r7, #52]	; 0x34
   34a64:	str	r5, [r7, #56]	; 0x38
   34a68:	str	r3, [r7, #64]	; 0x40
   34a6c:	ldr	r0, [r7, #16]
   34a70:	bl	284c4 <__assert_fail@plt+0x15dd8>
   34a74:	add	r0, sp, #44	; 0x2c
   34a78:	str	r5, [r7, #16]
   34a7c:	bl	2c318 <__assert_fail@plt+0x19c2c>
   34a80:	ldr	r3, [sp, #16]
   34a84:	cmp	r3, #0
   34a88:	beq	348d4 <__assert_fail@plt+0x221e8>
   34a8c:	add	r0, r4, #136	; 0x88
   34a90:	bl	12044 <pthread_mutex_destroy@plt>
   34a94:	b	348d4 <__assert_fail@plt+0x221e8>
   34a98:	add	r0, sp, #44	; 0x2c
   34a9c:	bl	2bf08 <__assert_fail@plt+0x1981c>
   34aa0:	mov	r3, #0
   34aa4:	str	r3, [sp, #24]
   34aa8:	ldr	r9, [r6]
   34aac:	mov	r5, #0
   34ab0:	orr	r2, r8, #8388608	; 0x800000
   34ab4:	add	r1, sp, #44	; 0x2c
   34ab8:	add	r0, sp, #32
   34abc:	str	r5, [r6, #24]
   34ac0:	str	r8, [r9, #128]	; 0x80
   34ac4:	bl	2f9b0 <__assert_fail@plt+0x1d2c4>
   34ac8:	add	r3, sp, #24
   34acc:	add	r2, sp, #32
   34ad0:	str	r5, [sp]
   34ad4:	mov	r1, r6
   34ad8:	add	r0, sp, #44	; 0x2c
   34adc:	str	r3, [sp, #4]
   34ae0:	mov	r3, r8
   34ae4:	bl	34574 <__assert_fail@plt+0x21e88>
   34ae8:	ldr	r2, [sp, #24]
   34aec:	mov	sl, r0
   34af0:	clz	r0, r0
   34af4:	lsr	r0, r0, #5
   34af8:	cmp	r2, r5
   34afc:	movne	r2, r0
   34b00:	moveq	r2, r5
   34b04:	cmp	r2, r5
   34b08:	bne	34bac <__assert_fail@plt+0x224c0>
   34b0c:	mov	r3, #2
   34b10:	mov	r1, r2
   34b14:	mov	r0, r9
   34b18:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   34b1c:	cmp	sl, r5
   34b20:	mov	r8, r0
   34b24:	beq	34b3c <__assert_fail@plt+0x22450>
   34b28:	mov	r3, #16
   34b2c:	mov	r2, r8
   34b30:	mov	r1, sl
   34b34:	mov	r0, r9
   34b38:	bl	2b6c8 <__assert_fail@plt+0x18fdc>
   34b3c:	cmp	r0, #0
   34b40:	cmpne	r8, #0
   34b44:	ldr	r5, [r6]
   34b48:	bne	34bb4 <__assert_fail@plt+0x224c8>
   34b4c:	mov	r3, #12
   34b50:	str	r3, [sp, #24]
   34b54:	mov	r3, #0
   34b58:	str	r3, [r4, #52]	; 0x34
   34b5c:	b	34a4c <__assert_fail@plt+0x22360>
   34b60:	cmp	r3, #1
   34b64:	ble	34b78 <__assert_fail@plt+0x2248c>
   34b68:	add	r0, sp, #44	; 0x2c
   34b6c:	bl	2b8e4 <__assert_fail@plt+0x191f8>
   34b70:	str	r7, [sp, #24]
   34b74:	b	34aa8 <__assert_fail@plt+0x223bc>
   34b78:	cmp	fp, #0
   34b7c:	ldreq	r3, [sp, #80]	; 0x50
   34b80:	streq	r3, [sp, #72]	; 0x48
   34b84:	streq	r3, [sp, #76]	; 0x4c
   34b88:	beq	34b70 <__assert_fail@plt+0x22484>
   34b8c:	add	r0, sp, #44	; 0x2c
   34b90:	bl	2ae0c <__assert_fail@plt+0x18720>
   34b94:	b	34b70 <__assert_fail@plt+0x22484>
   34b98:	ldr	r8, [r5]
   34b9c:	mov	r0, r5
   34ba0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   34ba4:	mov	r5, r8
   34ba8:	b	34a54 <__assert_fail@plt+0x22368>
   34bac:	str	r5, [r4, #52]	; 0x34
   34bb0:	b	34a4c <__assert_fail@plt+0x22360>
   34bb4:	str	r0, [r4, #52]	; 0x34
   34bb8:	mov	r8, #12
   34bbc:	ldr	r0, [r5, #4]
   34bc0:	lsl	r0, r0, #2
   34bc4:	bl	2a340 <__assert_fail@plt+0x17c54>
   34bc8:	str	r0, [r5, #12]
   34bcc:	ldr	r0, [r5, #4]
   34bd0:	lsl	r0, r0, #2
   34bd4:	bl	2a340 <__assert_fail@plt+0x17c54>
   34bd8:	str	r0, [r5, #16]
   34bdc:	ldr	r0, [r5, #4]
   34be0:	mul	r0, r8, r0
   34be4:	bl	2a340 <__assert_fail@plt+0x17c54>
   34be8:	str	r0, [r5, #20]
   34bec:	ldr	r0, [r5, #4]
   34bf0:	mul	r0, r8, r0
   34bf4:	bl	2a340 <__assert_fail@plt+0x17c54>
   34bf8:	ldr	r3, [r5, #12]
   34bfc:	str	r0, [r5, #24]
   34c00:	cmp	r3, #0
   34c04:	bne	34c14 <__assert_fail@plt+0x22528>
   34c08:	mov	r3, #12
   34c0c:	str	r3, [sp, #24]
   34c10:	b	34a4c <__assert_fail@plt+0x22360>
   34c14:	ldr	r3, [r5, #16]
   34c18:	cmp	r3, #0
   34c1c:	beq	34c08 <__assert_fail@plt+0x2251c>
   34c20:	ldr	r3, [r5, #20]
   34c24:	clz	r0, r0
   34c28:	lsr	r0, r0, #5
   34c2c:	cmp	r3, #0
   34c30:	moveq	r0, #1
   34c34:	cmp	r0, #0
   34c38:	str	r0, [sp, #12]
   34c3c:	bne	34c08 <__assert_fail@plt+0x2251c>
   34c40:	ldr	r0, [r6, #24]
   34c44:	lsl	r0, r0, #2
   34c48:	bl	2a340 <__assert_fail@plt+0x17c54>
   34c4c:	cmp	r0, #0
   34c50:	str	r0, [r5, #132]	; 0x84
   34c54:	ldrne	r2, [r6, #24]
   34c58:	ldrne	r3, [sp, #12]
   34c5c:	bne	34d30 <__assert_fail@plt+0x22644>
   34c60:	mov	r2, r6
   34c64:	ldr	r1, [pc, #1500]	; 35248 <__assert_fail@plt+0x22b5c>
   34c68:	ldr	r0, [r5, #52]	; 0x34
   34c6c:	bl	2af48 <__assert_fail@plt+0x1885c>
   34c70:	subs	r8, r0, #0
   34c74:	bne	34d18 <__assert_fail@plt+0x2262c>
   34c78:	mov	r2, r5
   34c7c:	ldr	r1, [pc, #1480]	; 3524c <__assert_fail@plt+0x22b60>
   34c80:	ldr	r0, [r5, #52]	; 0x34
   34c84:	bl	2af48 <__assert_fail@plt+0x1885c>
   34c88:	subs	r8, r0, #0
   34c8c:	bne	34d18 <__assert_fail@plt+0x2262c>
   34c90:	mov	r2, r5
   34c94:	ldr	r1, [pc, #1460]	; 35250 <__assert_fail@plt+0x22b64>
   34c98:	ldr	r0, [r5, #52]	; 0x34
   34c9c:	bl	2d72c <__assert_fail@plt+0x1b040>
   34ca0:	mov	r2, r5
   34ca4:	ldr	r1, [pc, #1448]	; 35254 <__assert_fail@plt+0x22b68>
   34ca8:	ldr	r0, [r5, #52]	; 0x34
   34cac:	bl	2d72c <__assert_fail@plt+0x1b040>
   34cb0:	subs	r8, r0, #0
   34cb4:	bne	34d18 <__assert_fail@plt+0x2262c>
   34cb8:	mov	sl, r8
   34cbc:	mov	r9, r8
   34cc0:	ldr	r3, [r5, #8]
   34cc4:	cmp	r3, r9
   34cc8:	bne	34cdc <__assert_fail@plt+0x225f0>
   34ccc:	cmp	sl, #0
   34cd0:	beq	34dac <__assert_fail@plt+0x226c0>
   34cd4:	mov	sl, #0
   34cd8:	mov	r9, sl
   34cdc:	mov	r3, #12
   34ce0:	mul	fp, r3, r9
   34ce4:	ldr	r3, [r5, #24]
   34ce8:	add	r3, r3, fp
   34cec:	ldr	r3, [r3, #4]
   34cf0:	cmp	r3, #0
   34cf4:	bne	34da4 <__assert_fail@plt+0x226b8>
   34cf8:	mov	r3, #1
   34cfc:	mov	r2, r9
   34d00:	mov	r1, r5
   34d04:	add	r0, sp, #32
   34d08:	bl	2e6dc <__assert_fail@plt+0x1bff0>
   34d0c:	cmp	r0, #0
   34d10:	beq	34d84 <__assert_fail@plt+0x22698>
   34d14:	mov	r8, r0
   34d18:	cmp	r8, #0
   34d1c:	str	r8, [sp, #24]
   34d20:	beq	34dc8 <__assert_fail@plt+0x226dc>
   34d24:	b	34a4c <__assert_fail@plt+0x22360>
   34d28:	str	r3, [r0, r3, lsl #2]
   34d2c:	add	r3, r3, #1
   34d30:	cmp	r3, r2
   34d34:	bne	34d28 <__assert_fail@plt+0x2263c>
   34d38:	mov	r2, r5
   34d3c:	ldr	r1, [pc, #1300]	; 35258 <__assert_fail@plt+0x22b6c>
   34d40:	ldr	r0, [r5, #52]	; 0x34
   34d44:	bl	2d72c <__assert_fail@plt+0x1b040>
   34d48:	ldr	r2, [r6, #24]
   34d4c:	mov	r3, #0
   34d50:	cmp	r3, r2
   34d54:	bne	34d6c <__assert_fail@plt+0x22680>
   34d58:	ldr	r0, [r5, #132]	; 0x84
   34d5c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   34d60:	mov	r3, #0
   34d64:	str	r3, [r5, #132]	; 0x84
   34d68:	b	34c60 <__assert_fail@plt+0x22574>
   34d6c:	ldr	r1, [r5, #132]	; 0x84
   34d70:	ldr	r1, [r1, r3, lsl #2]
   34d74:	cmp	r1, r3
   34d78:	bne	34c60 <__assert_fail@plt+0x22574>
   34d7c:	add	r3, r3, #1
   34d80:	b	34d50 <__assert_fail@plt+0x22664>
   34d84:	ldr	r3, [r5, #24]
   34d88:	add	fp, r3, fp
   34d8c:	ldr	r3, [fp, #4]
   34d90:	cmp	r3, #0
   34d94:	bne	34da4 <__assert_fail@plt+0x226b8>
   34d98:	ldr	r0, [sp, #40]	; 0x28
   34d9c:	mov	sl, #1
   34da0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   34da4:	add	r9, r9, #1
   34da8:	b	34cc0 <__assert_fail@plt+0x225d4>
   34dac:	ldrb	r3, [r6, #28]
   34db0:	tst	r3, #16
   34db4:	beq	34ea8 <__assert_fail@plt+0x227bc>
   34db8:	ldr	r3, [r5, #76]	; 0x4c
   34dbc:	cmp	r3, #0
   34dc0:	streq	r3, [sp, #24]
   34dc4:	bne	34ec0 <__assert_fail@plt+0x227d4>
   34dc8:	ldrb	r3, [r4, #88]	; 0x58
   34dcc:	clz	r7, r7
   34dd0:	lsr	r7, r7, #5
   34dd4:	ands	r7, r7, r3, lsr #2
   34dd8:	beq	34df0 <__assert_fail@plt+0x22704>
   34ddc:	ldr	r3, [r6, #20]
   34de0:	cmp	r3, #0
   34de4:	moveq	r2, r3
   34de8:	ldreq	ip, [r4, #8]
   34dec:	beq	34fe0 <__assert_fail@plt+0x228f4>
   34df0:	mov	r8, #12
   34df4:	add	r0, sp, #32
   34df8:	ldr	r1, [r4, #24]
   34dfc:	ldr	r3, [r4, #52]	; 0x34
   34e00:	ldr	r3, [r3, #12]
   34e04:	ldr	r3, [r3, #28]
   34e08:	mla	r1, r8, r3, r1
   34e0c:	str	r3, [r4, #72]	; 0x48
   34e10:	bl	2d870 <__assert_fail@plt+0x1b184>
   34e14:	cmp	r0, #0
   34e18:	mov	r5, r0
   34e1c:	str	r0, [sp, #28]
   34e20:	bne	34e5c <__assert_fail@plt+0x22770>
   34e24:	ldr	r3, [r4, #76]	; 0x4c
   34e28:	cmp	r3, #0
   34e2c:	movgt	r7, r0
   34e30:	addgt	r9, sp, #32
   34e34:	bgt	35104 <__assert_fail@plt+0x22a18>
   34e38:	mov	r3, #0
   34e3c:	add	r2, sp, #32
   34e40:	mov	r1, r4
   34e44:	add	r0, sp, #28
   34e48:	bl	2da28 <__assert_fail@plt+0x1b33c>
   34e4c:	cmp	r0, #0
   34e50:	str	r0, [r4, #36]	; 0x24
   34e54:	bne	3518c <__assert_fail@plt+0x22aa0>
   34e58:	ldr	r5, [sp, #28]
   34e5c:	str	r5, [sp, #24]
   34e60:	ldr	r7, [r6]
   34e64:	ldr	r5, [r7, #56]	; 0x38
   34e68:	cmp	r5, #0
   34e6c:	bne	35214 <__assert_fail@plt+0x22b28>
   34e70:	mov	r3, #31
   34e74:	str	r5, [r7, #52]	; 0x34
   34e78:	str	r5, [r7, #56]	; 0x38
   34e7c:	str	r3, [r7, #64]	; 0x40
   34e80:	ldr	r0, [r7, #16]
   34e84:	bl	284c4 <__assert_fail@plt+0x15dd8>
   34e88:	add	r0, sp, #44	; 0x2c
   34e8c:	str	r5, [r7, #16]
   34e90:	bl	2c318 <__assert_fail@plt+0x19c2c>
   34e94:	ldr	r3, [sp, #24]
   34e98:	cmp	r3, #0
   34e9c:	bne	34a80 <__assert_fail@plt+0x22394>
   34ea0:	ldr	r0, [sp, #24]
   34ea4:	b	3522c <__assert_fail@plt+0x22b40>
   34ea8:	ldr	r3, [r6, #24]
   34eac:	cmp	r3, #0
   34eb0:	beq	34db8 <__assert_fail@plt+0x226cc>
   34eb4:	ldrb	r3, [r5, #88]	; 0x58
   34eb8:	tst	r3, #1
   34ebc:	beq	34db8 <__assert_fail@plt+0x226cc>
   34ec0:	mov	sl, #12
   34ec4:	mul	r0, sl, r9
   34ec8:	bl	2a340 <__assert_fail@plt+0x17c54>
   34ecc:	cmp	r0, #0
   34ed0:	str	r0, [r5, #28]
   34ed4:	movne	r3, #0
   34ed8:	movne	ip, r3
   34edc:	beq	34c08 <__assert_fail@plt+0x2251c>
   34ee0:	ldr	r2, [r5, #8]
   34ee4:	cmp	r2, r3
   34ee8:	bhi	34f30 <__assert_fail@plt+0x22844>
   34eec:	mov	r9, #0
   34ef0:	mov	r2, #12
   34ef4:	ldr	r3, [r5, #8]
   34ef8:	cmp	r3, r9
   34efc:	bls	34d18 <__assert_fail@plt+0x2262c>
   34f00:	ldr	r3, [r5, #24]
   34f04:	mul	fp, r2, r9
   34f08:	mov	sl, #0
   34f0c:	add	r3, r3, fp
   34f10:	ldr	r3, [r3, #8]
   34f14:	ldr	r1, [r5, #24]
   34f18:	add	r1, r1, fp
   34f1c:	ldr	r1, [r1, #4]
   34f20:	cmp	sl, r1
   34f24:	blt	34f50 <__assert_fail@plt+0x22864>
   34f28:	add	r9, r9, #1
   34f2c:	b	34ef4 <__assert_fail@plt+0x22808>
   34f30:	ldr	r0, [r5, #28]
   34f34:	mul	r1, sl, r3
   34f38:	add	r3, r3, #1
   34f3c:	add	r2, r0, r1
   34f40:	str	ip, [r0, r1]
   34f44:	str	ip, [r2, #4]
   34f48:	str	ip, [r2, #8]
   34f4c:	b	34ee0 <__assert_fail@plt+0x227f4>
   34f50:	ldr	ip, [r3, sl, lsl #2]
   34f54:	mov	r1, r9
   34f58:	str	r3, [sp, #20]
   34f5c:	ldr	r0, [r5, #28]
   34f60:	mla	r0, r2, ip, r0
   34f64:	bl	2b510 <__assert_fail@plt+0x18e24>
   34f68:	cmp	r0, #0
   34f6c:	beq	34f80 <__assert_fail@plt+0x22894>
   34f70:	add	sl, sl, #1
   34f74:	mov	r2, #12
   34f78:	ldr	r3, [sp, #20]
   34f7c:	b	34f14 <__assert_fail@plt+0x22828>
   34f80:	mov	r8, #12
   34f84:	b	34d18 <__assert_fail@plt+0x2262c>
   34f88:	ldr	r1, [r4]
   34f8c:	lsl	lr, r2, #3
   34f90:	add	r0, r1, lr
   34f94:	ldrb	r0, [r0, #4]
   34f98:	sub	r0, r0, #1
   34f9c:	cmp	r0, #11
   34fa0:	ldrls	pc, [pc, r0, lsl #2]
   34fa4:	b	35088 <__assert_fail@plt+0x2299c>
   34fa8:	andeq	r5, r3, r0, lsr #32
   34fac:	ldrdeq	r4, [r3], -ip
   34fb0:	andeq	r5, r3, r4, rrx
   34fb4:	ldrdeq	r4, [r3], -ip
   34fb8:	ldrdeq	r4, [r3], -r8
   34fbc:	strdeq	r4, [r3], -r0
   34fc0:	andeq	r5, r3, r8, lsl #1
   34fc4:	ldrdeq	r4, [r3], -ip
   34fc8:	ldrdeq	r4, [r3], -ip
   34fcc:	ldrdeq	r4, [r3], -ip
   34fd0:	ldrdeq	r4, [r3], -ip
   34fd4:	andeq	r5, r3, r8, lsr r0
   34fd8:	mov	r3, r7
   34fdc:	add	r2, r2, #1
   34fe0:	cmp	r2, ip
   34fe4:	bne	34f88 <__assert_fail@plt+0x2289c>
   34fe8:	ldr	r2, [sp, #12]
   34fec:	orr	r0, r2, r3
   34ff0:	tst	r0, #255	; 0xff
   34ff4:	bne	350d4 <__assert_fail@plt+0x229e8>
   34ff8:	mov	r2, #1
   34ffc:	ldr	r1, [r4, #76]	; 0x4c
   35000:	str	r2, [r4, #92]	; 0x5c
   35004:	ldrb	r2, [r4, #88]	; 0x58
   35008:	cmp	r1, #0
   3500c:	orrgt	r3, r3, #1
   35010:	and	r2, r2, #251	; 0xfb
   35014:	bfi	r2, r3, #1, #1
   35018:	strb	r2, [r4, #88]	; 0x58
   3501c:	b	34df0 <__assert_fail@plt+0x22704>
   35020:	ldrsb	r1, [r1, lr]
   35024:	ldr	r0, [sp, #12]
   35028:	cmp	r1, #0
   3502c:	movlt	r0, r7
   35030:	str	r0, [sp, #12]
   35034:	b	34fdc <__assert_fail@plt+0x228f0>
   35038:	ldr	r1, [r1, r2, lsl #3]
   3503c:	cmp	r1, #32
   35040:	beq	34fdc <__assert_fail@plt+0x228f0>
   35044:	bhi	35054 <__assert_fail@plt+0x22968>
   35048:	cmp	r1, #16
   3504c:	beq	34fdc <__assert_fail@plt+0x228f0>
   35050:	b	34df0 <__assert_fail@plt+0x22704>
   35054:	cmp	r1, #64	; 0x40
   35058:	beq	34fdc <__assert_fail@plt+0x228f0>
   3505c:	cmp	r1, #128	; 0x80
   35060:	b	3504c <__assert_fail@plt+0x22960>
   35064:	ldr	r1, [r1, r2, lsl #3]
   35068:	add	r0, r1, #12
   3506c:	add	r1, r1, #28
   35070:	ldr	lr, [r0, #4]!
   35074:	cmp	lr, #0
   35078:	bne	34df0 <__assert_fail@plt+0x22704>
   3507c:	cmp	r1, r0
   35080:	bne	35070 <__assert_fail@plt+0x22984>
   35084:	b	34fdc <__assert_fail@plt+0x228f0>
   35088:	bl	12698 <abort@plt>
   3508c:	ldr	r5, [r4]
   35090:	lsl	lr, r2, #3
   35094:	add	r1, r5, lr
   35098:	ldrb	r0, [r1, #4]
   3509c:	cmp	r0, #1
   350a0:	bne	350c8 <__assert_fail@plt+0x229dc>
   350a4:	ldrsb	r0, [r5, lr]
   350a8:	cmp	r0, #0
   350ac:	ldrblt	r0, [r1, #6]
   350b0:	bfclt	r0, #5, #1
   350b4:	strblt	r0, [r1, #6]
   350b8:	add	r2, r2, #1
   350bc:	cmp	r2, ip
   350c0:	bne	3508c <__assert_fail@plt+0x229a0>
   350c4:	b	34ff8 <__assert_fail@plt+0x2290c>
   350c8:	cmp	r0, #5
   350cc:	strbeq	r7, [r1, #4]
   350d0:	b	350b8 <__assert_fail@plt+0x229cc>
   350d4:	mov	r2, #0
   350d8:	mov	r7, #7
   350dc:	b	350bc <__assert_fail@plt+0x229d0>
   350e0:	ldr	r0, [sp, #40]	; 0x28
   350e4:	ldr	r1, [r4]
   350e8:	ldr	r3, [r0, r7, lsl #2]
   350ec:	add	ip, r1, r3, lsl #3
   350f0:	ldrb	r2, [ip, #4]
   350f4:	cmp	r2, #4
   350f8:	moveq	r2, #0
   350fc:	beq	3513c <__assert_fail@plt+0x22a50>
   35100:	add	r7, r7, #1
   35104:	ldr	fp, [sp, #36]	; 0x24
   35108:	cmp	r7, fp
   3510c:	blt	350e0 <__assert_fail@plt+0x229f4>
   35110:	b	34e38 <__assert_fail@plt+0x2274c>
   35114:	ldr	lr, [r0, r2, lsl #2]
   35118:	add	sl, r1, lr, lsl #3
   3511c:	ldrb	sl, [sl, #4]
   35120:	cmp	sl, #9
   35124:	bne	35138 <__assert_fail@plt+0x22a4c>
   35128:	ldr	sl, [r1, lr, lsl #3]
   3512c:	ldr	lr, [ip]
   35130:	cmp	sl, lr
   35134:	beq	35148 <__assert_fail@plt+0x22a5c>
   35138:	add	r2, r2, #1
   3513c:	cmp	r2, fp
   35140:	blt	35114 <__assert_fail@plt+0x22a28>
   35144:	beq	35100 <__assert_fail@plt+0x22a14>
   35148:	ldr	r2, [r4, #20]
   3514c:	mov	r0, r9
   35150:	mla	r3, r8, r3, r2
   35154:	ldr	r3, [r3, #8]
   35158:	ldr	sl, [r3]
   3515c:	mov	r1, sl
   35160:	bl	2aed4 <__assert_fail@plt+0x187e8>
   35164:	cmp	r0, #0
   35168:	bne	35100 <__assert_fail@plt+0x22a14>
   3516c:	ldr	r1, [r4, #24]
   35170:	mov	r0, r9
   35174:	mla	r1, r8, sl, r1
   35178:	bl	2e57c <__assert_fail@plt+0x1be90>
   3517c:	subs	r7, r0, #0
   35180:	beq	35100 <__assert_fail@plt+0x22a14>
   35184:	mov	r5, r7
   35188:	b	34e5c <__assert_fail@plt+0x22770>
   3518c:	ldrsb	r3, [r0, #52]	; 0x34
   35190:	cmp	r3, #0
   35194:	strge	r0, [r4, #40]	; 0x28
   35198:	strge	r0, [r4, #44]	; 0x2c
   3519c:	strge	r0, [r4, #48]	; 0x30
   351a0:	bge	35208 <__assert_fail@plt+0x22b1c>
   351a4:	mov	r3, #1
   351a8:	add	r2, sp, #32
   351ac:	mov	r1, r4
   351b0:	add	r0, sp, #28
   351b4:	bl	2da28 <__assert_fail@plt+0x1b33c>
   351b8:	mov	r3, #2
   351bc:	add	r2, sp, #32
   351c0:	str	r0, [r4, #40]	; 0x28
   351c4:	mov	r1, r4
   351c8:	add	r0, sp, #28
   351cc:	bl	2da28 <__assert_fail@plt+0x1b33c>
   351d0:	mov	r3, #6
   351d4:	add	r2, sp, #32
   351d8:	str	r0, [r4, #44]	; 0x2c
   351dc:	mov	r1, r4
   351e0:	add	r0, sp, #28
   351e4:	bl	2da28 <__assert_fail@plt+0x1b33c>
   351e8:	ldr	r3, [r4, #40]	; 0x28
   351ec:	str	r0, [r4, #48]	; 0x30
   351f0:	cmp	r3, #0
   351f4:	beq	34e58 <__assert_fail@plt+0x2276c>
   351f8:	ldr	r3, [r4, #44]	; 0x2c
   351fc:	cmp	r0, #0
   35200:	cmpne	r3, #0
   35204:	beq	34e58 <__assert_fail@plt+0x2276c>
   35208:	ldr	r0, [sp, #40]	; 0x28
   3520c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   35210:	b	34e5c <__assert_fail@plt+0x22770>
   35214:	ldr	r8, [r5]
   35218:	mov	r0, r5
   3521c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   35220:	mov	r5, r8
   35224:	b	34e68 <__assert_fail@plt+0x2277c>
   35228:	mov	r0, #12
   3522c:	add	sp, sp, #132	; 0x84
   35230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35234:	beq	feadfce0 <stdout@@GLIBC_2.4+0xfea91774>
   35238:	andeq	sp, r3, pc, lsr #3
   3523c:	andeq	ip, r3, ip, lsl #31
   35240:	andeq	r2, r1, r8, asr #1
   35244:	andeq	r2, r1, r4, ror #8
   35248:	strdeq	fp, [r2], -r8
   3524c:	andeq	sp, r2, r4, ror pc
   35250:	ldrdeq	sp, [r2], -ip
   35254:	ldrdeq	ip, [r2], -r8
   35258:	andeq	sp, r2, r4, asr #12
   3525c:	ldr	r3, [pc, #92]	; 352c0 <__assert_fail@plt+0x22bd4>
   35260:	mov	ip, r2
   35264:	push	{r4, lr}
   35268:	ldrb	r2, [r2, #28]
   3526c:	ldr	r3, [r3]
   35270:	ubfx	lr, r3, #25, #1
   35274:	bfi	r2, lr, #4, #1
   35278:	mvn	r2, r2, lsl #25
   3527c:	mvn	r2, r2, lsr #25
   35280:	strb	r2, [ip, #28]
   35284:	mov	r2, r1
   35288:	mov	r1, r0
   3528c:	mov	r0, ip
   35290:	bl	346cc <__assert_fail@plt+0x21fe0>
   35294:	subs	r2, r0, #0
   35298:	popeq	{r4, pc}
   3529c:	mov	r0, #0
   352a0:	pop	{r4, lr}
   352a4:	ldr	r3, [pc, #24]	; 352c4 <__assert_fail@plt+0x22bd8>
   352a8:	add	r1, r3, #32
   352ac:	add	r3, r3, r2, lsl #2
   352b0:	mov	r2, #5
   352b4:	ldr	r3, [r3, #416]	; 0x1a0
   352b8:	add	r1, r1, r3
   352bc:	b	1217c <dcgettext@plt>
   352c0:	ldrdeq	lr, [r4], -r8
   352c4:	andeq	ip, r3, ip, lsl #31
   352c8:	ldr	r3, [pc, #12]	; 352dc <__assert_fail@plt+0x22bf0>
   352cc:	ldr	r2, [r3]
   352d0:	str	r0, [r3]
   352d4:	mov	r0, r2
   352d8:	bx	lr
   352dc:	ldrdeq	lr, [r4], -r8
   352e0:	push	{r4, r5, r6, lr}
   352e4:	mov	r2, #256	; 0x100
   352e8:	mov	r4, r0
   352ec:	mov	r1, #0
   352f0:	ldr	r5, [r0]
   352f4:	ldr	r6, [r0, #16]
   352f8:	mov	r0, r6
   352fc:	bl	12434 <memset@plt>
   35300:	mov	r2, r6
   35304:	mov	r0, r4
   35308:	ldr	r1, [r5, #36]	; 0x24
   3530c:	bl	2cff8 <__assert_fail@plt+0x1a90c>
   35310:	ldr	r3, [r5, #36]	; 0x24
   35314:	ldr	r1, [r5, #40]	; 0x28
   35318:	cmp	r3, r1
   3531c:	beq	3532c <__assert_fail@plt+0x22c40>
   35320:	mov	r2, r6
   35324:	mov	r0, r4
   35328:	bl	2cff8 <__assert_fail@plt+0x1a90c>
   3532c:	ldr	r3, [r5, #36]	; 0x24
   35330:	ldr	r1, [r5, #44]	; 0x2c
   35334:	cmp	r3, r1
   35338:	beq	35348 <__assert_fail@plt+0x22c5c>
   3533c:	mov	r2, r6
   35340:	mov	r0, r4
   35344:	bl	2cff8 <__assert_fail@plt+0x1a90c>
   35348:	ldr	r3, [r5, #36]	; 0x24
   3534c:	ldr	r1, [r5, #48]	; 0x30
   35350:	cmp	r3, r1
   35354:	beq	35364 <__assert_fail@plt+0x22c78>
   35358:	mov	r2, r6
   3535c:	mov	r0, r4
   35360:	bl	2cff8 <__assert_fail@plt+0x1a90c>
   35364:	ldrb	r3, [r4, #28]
   35368:	mov	r0, #0
   3536c:	orr	r3, r3, #8
   35370:	strb	r3, [r4, #28]
   35374:	pop	{r4, r5, r6, pc}
   35378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3537c:	sub	sp, sp, #44	; 0x2c
   35380:	cmp	r3, r2
   35384:	ldr	lr, [r0]
   35388:	ldr	ip, [sp, #80]	; 0x50
   3538c:	ldr	r4, [sp, #88]	; 0x58
   35390:	str	lr, [sp, #24]
   35394:	movle	lr, #0
   35398:	movgt	lr, #1
   3539c:	orrs	lr, lr, r3, lsr #31
   353a0:	add	r6, r3, ip
   353a4:	mvnne	r4, #0
   353a8:	bne	35514 <__assert_fail@plt+0x22e28>
   353ac:	cmp	r6, r2
   353b0:	bgt	35520 <__assert_fail@plt+0x22e34>
   353b4:	cmp	ip, #0
   353b8:	cmpge	r3, r6
   353bc:	movgt	lr, #1
   353c0:	movle	lr, #0
   353c4:	bgt	35520 <__assert_fail@plt+0x22e34>
   353c8:	cmp	r6, #0
   353cc:	movlt	r6, lr
   353d0:	blt	353e8 <__assert_fail@plt+0x22cfc>
   353d4:	cmp	r3, r6
   353d8:	movgt	lr, #0
   353dc:	movle	lr, #1
   353e0:	ands	ip, lr, ip, lsr #31
   353e4:	movne	r6, #0
   353e8:	ldr	lr, [pc, #672]	; 35690 <__assert_fail@plt+0x22fa4>
   353ec:	mov	ip, #1
   353f0:	mov	r8, r3
   353f4:	mov	r9, r1
   353f8:	mov	r7, r0
   353fc:	str	r2, [sp, #32]
   35400:	ldr	r5, [pc, #652]	; 35694 <__assert_fail@plt+0x22fa8>
   35404:	cmp	lr, #0
   35408:	moveq	ip, lr
   3540c:	mov	lr, #1
   35410:	cmp	r5, #0
   35414:	moveq	lr, r5
   35418:	orr	ip, ip, lr
   3541c:	ands	r3, ip, #255	; 0xff
   35420:	str	r3, [sp, #28]
   35424:	beq	35434 <__assert_fail@plt+0x22d48>
   35428:	ldr	r3, [sp, #24]
   3542c:	add	r0, r3, #136	; 0x88
   35430:	bl	120a4 <pthread_mutex_lock@plt>
   35434:	ldrb	r2, [r7, #28]
   35438:	cmp	r6, r8
   3543c:	ubfx	fp, r2, #5, #2
   35440:	ble	35460 <__assert_fail@plt+0x22d74>
   35444:	ldr	r1, [r7, #16]
   35448:	cmp	r1, #0
   3544c:	beq	35460 <__assert_fail@plt+0x22d74>
   35450:	tst	r2, #8
   35454:	bne	35460 <__assert_fail@plt+0x22d74>
   35458:	mov	r0, r7
   3545c:	bl	352e0 <__assert_fail@plt+0x22bf4>
   35460:	ldrb	r1, [r7, #28]
   35464:	ubfx	r2, r1, #4, #1
   35468:	cmp	r4, #0
   3546c:	orreq	r2, r2, #1
   35470:	ands	r2, r2, #255	; 0xff
   35474:	movne	r5, #1
   35478:	movne	r4, #0
   3547c:	bne	354a8 <__assert_fail@plt+0x22dbc>
   35480:	and	r1, r1, #6
   35484:	ldr	r5, [r7, #24]
   35488:	cmp	r1, #4
   3548c:	bne	35528 <__assert_fail@plt+0x22e3c>
   35490:	ldr	r1, [r4]
   35494:	cmp	r5, r1
   35498:	bcc	35528 <__assert_fail@plt+0x22e3c>
   3549c:	subs	r5, r1, #0
   354a0:	movle	r5, #1
   354a4:	movle	r4, r2
   354a8:	lsl	r0, r5, #3
   354ac:	bl	2a340 <__assert_fail@plt+0x17c54>
   354b0:	subs	sl, r0, #0
   354b4:	mvneq	r4, #1
   354b8:	beq	354fc <__assert_fail@plt+0x22e10>
   354bc:	ldr	r2, [sp, #84]	; 0x54
   354c0:	mov	r1, r9
   354c4:	mov	r3, r8
   354c8:	mov	r0, r7
   354cc:	str	r6, [sp]
   354d0:	stmib	sp, {r2, r5, sl, fp}
   354d4:	ldr	r2, [sp, #32]
   354d8:	bl	31d84 <__assert_fail@plt+0x1f698>
   354dc:	subs	r9, r0, #0
   354e0:	beq	35530 <__assert_fail@plt+0x22e44>
   354e4:	cmp	r9, #1
   354e8:	mvneq	r4, #0
   354ec:	beq	354f4 <__assert_fail@plt+0x22e08>
   354f0:	mvn	r4, #1
   354f4:	mov	r0, sl
   354f8:	bl	284c4 <__assert_fail@plt+0x15dd8>
   354fc:	ldr	r3, [sp, #28]
   35500:	cmp	r3, #0
   35504:	beq	35514 <__assert_fail@plt+0x22e28>
   35508:	ldr	r3, [sp, #24]
   3550c:	add	r0, r3, #136	; 0x88
   35510:	bl	11f60 <pthread_mutex_unlock@plt>
   35514:	mov	r0, r4
   35518:	add	sp, sp, #44	; 0x2c
   3551c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35520:	mov	r6, r2
   35524:	b	353e8 <__assert_fail@plt+0x22cfc>
   35528:	add	r5, r5, #1
   3552c:	b	354a8 <__assert_fail@plt+0x22dbc>
   35530:	cmp	r4, #0
   35534:	bne	35550 <__assert_fail@plt+0x22e64>
   35538:	ldrb	r3, [sp, #92]	; 0x5c
   3553c:	ldr	r4, [sl]
   35540:	cmp	r3, #0
   35544:	ldrne	r4, [sl, #4]
   35548:	subne	r4, r4, r8
   3554c:	b	354f4 <__assert_fail@plt+0x22e08>
   35550:	ldrb	r6, [r7, #28]
   35554:	add	fp, r5, #1
   35558:	ubfx	r6, r6, #1, #2
   3555c:	cmp	r6, #0
   35560:	bne	355c8 <__assert_fail@plt+0x22edc>
   35564:	lsl	r6, fp, #2
   35568:	mov	r0, r6
   3556c:	bl	2a340 <__assert_fail@plt+0x17c54>
   35570:	cmp	r0, #0
   35574:	str	r0, [r4, #4]
   35578:	bne	3559c <__assert_fail@plt+0x22eb0>
   3557c:	mov	r6, #0
   35580:	ldrb	r3, [r7, #28]
   35584:	bfi	r3, r6, #1, #2
   35588:	strb	r3, [r7, #28]
   3558c:	and	r3, r3, #6
   35590:	cmp	r3, #0
   35594:	bne	35538 <__assert_fail@plt+0x22e4c>
   35598:	b	354f0 <__assert_fail@plt+0x22e04>
   3559c:	mov	r0, r6
   355a0:	bl	2a340 <__assert_fail@plt+0x17c54>
   355a4:	cmp	r0, #0
   355a8:	mov	r6, r0
   355ac:	str	r0, [r4, #8]
   355b0:	movne	r6, #1
   355b4:	strne	fp, [r4]
   355b8:	bne	35638 <__assert_fail@plt+0x22f4c>
   355bc:	ldr	r0, [r4, #4]
   355c0:	bl	284c4 <__assert_fail@plt+0x15dd8>
   355c4:	b	35580 <__assert_fail@plt+0x22e94>
   355c8:	cmp	r6, #1
   355cc:	movne	r6, #2
   355d0:	bne	35638 <__assert_fail@plt+0x22f4c>
   355d4:	ldr	r3, [r4]
   355d8:	cmp	r3, fp
   355dc:	bcs	35638 <__assert_fail@plt+0x22f4c>
   355e0:	lsl	r2, fp, #2
   355e4:	ldr	r0, [r4, #4]
   355e8:	mov	r1, r2
   355ec:	str	r2, [sp, #36]	; 0x24
   355f0:	bl	2acc4 <__assert_fail@plt+0x185d8>
   355f4:	subs	r3, r0, #0
   355f8:	str	r3, [sp, #32]
   355fc:	beq	3557c <__assert_fail@plt+0x22e90>
   35600:	ldr	r2, [sp, #36]	; 0x24
   35604:	ldr	r0, [r4, #8]
   35608:	mov	r1, r2
   3560c:	bl	2acc4 <__assert_fail@plt+0x185d8>
   35610:	ldr	r3, [sp, #32]
   35614:	subs	r2, r0, #0
   35618:	strne	fp, [r4]
   3561c:	strne	r2, [r4, #8]
   35620:	strne	r3, [r4, #4]
   35624:	bne	35638 <__assert_fail@plt+0x22f4c>
   35628:	mov	r0, r3
   3562c:	str	r2, [sp, #32]
   35630:	bl	284c4 <__assert_fail@plt+0x15dd8>
   35634:	b	3557c <__assert_fail@plt+0x22e90>
   35638:	add	r3, sl, #4
   3563c:	cmp	r5, r9
   35640:	bgt	35670 <__assert_fail@plt+0x22f84>
   35644:	bic	r5, r5, r5, asr #31
   35648:	mvn	r3, #0
   3564c:	ldr	r2, [r4]
   35650:	cmp	r5, r2
   35654:	bcs	35580 <__assert_fail@plt+0x22e94>
   35658:	ldr	r2, [r4, #8]
   3565c:	str	r3, [r2, r5, lsl #2]
   35660:	ldr	r2, [r4, #4]
   35664:	str	r3, [r2, r5, lsl #2]
   35668:	add	r5, r5, #1
   3566c:	b	3564c <__assert_fail@plt+0x22f60>
   35670:	ldr	r1, [sl, r9, lsl #3]
   35674:	ldr	r2, [r4, #4]
   35678:	str	r1, [r2, r9, lsl #2]
   3567c:	ldr	r1, [r3, r9, lsl #3]
   35680:	ldr	r2, [r4, #8]
   35684:	str	r1, [r2, r9, lsl #2]
   35688:	add	r9, r9, #1
   3568c:	b	3563c <__assert_fail@plt+0x22f50>
   35690:	andeq	r2, r1, r4, ror #8
   35694:	andeq	r2, r1, r8, asr #1
   35698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3569c:	sub	sp, sp, #20
   356a0:	mov	sl, r3
   356a4:	ldr	r5, [sp, #56]	; 0x38
   356a8:	ldr	r9, [sp, #72]	; 0x48
   356ac:	orr	r3, r5, r2
   356b0:	orrs	r3, r3, r9
   356b4:	bpl	356c8 <__assert_fail@plt+0x22fdc>
   356b8:	mvn	r4, #1
   356bc:	mov	r0, r4
   356c0:	add	sp, sp, #20
   356c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   356c8:	adds	r8, r2, r5
   356cc:	mov	r4, r2
   356d0:	bvs	356b8 <__assert_fail@plt+0x22fcc>
   356d4:	cmp	r5, #0
   356d8:	mov	fp, r0
   356dc:	mov	r7, r1
   356e0:	beq	35764 <__assert_fail@plt+0x23078>
   356e4:	cmp	r2, #0
   356e8:	moveq	r7, sl
   356ec:	moveq	r6, r2
   356f0:	beq	35724 <__assert_fail@plt+0x23038>
   356f4:	mov	r0, r8
   356f8:	bl	2a340 <__assert_fail@plt+0x17c54>
   356fc:	subs	r6, r0, #0
   35700:	beq	356b8 <__assert_fail@plt+0x22fcc>
   35704:	mov	r1, r7
   35708:	mov	r2, r4
   3570c:	bl	120f8 <memcpy@plt>
   35710:	mov	r7, r6
   35714:	mov	r2, r5
   35718:	mov	r1, sl
   3571c:	add	r0, r6, r4
   35720:	bl	120f8 <memcpy@plt>
   35724:	ldrb	r3, [sp, #76]	; 0x4c
   35728:	mov	r2, r8
   3572c:	mov	r1, r7
   35730:	mov	r0, fp
   35734:	str	r9, [sp, #4]
   35738:	str	r3, [sp, #12]
   3573c:	ldr	r3, [sp, #68]	; 0x44
   35740:	str	r3, [sp, #8]
   35744:	ldr	r3, [sp, #64]	; 0x40
   35748:	str	r3, [sp]
   3574c:	ldr	r3, [sp, #60]	; 0x3c
   35750:	bl	35378 <__assert_fail@plt+0x22c8c>
   35754:	mov	r4, r0
   35758:	mov	r0, r6
   3575c:	bl	284c4 <__assert_fail@plt+0x15dd8>
   35760:	b	356bc <__assert_fail@plt+0x22fd0>
   35764:	mov	r6, r5
   35768:	b	35724 <__assert_fail@plt+0x23038>
   3576c:	push	{r4, r5, r6, r7, r8, lr}
   35770:	mov	r3, #0
   35774:	tst	r2, #1
   35778:	mov	r4, r0
   3577c:	mov	r7, r1
   35780:	mov	r6, r2
   35784:	ldr	r5, [pc, #184]	; 35844 <__assert_fail@plt+0x23158>
   35788:	str	r3, [r0]
   3578c:	str	r3, [r0, #4]
   35790:	str	r3, [r0, #8]
   35794:	mov	r0, #256	; 0x100
   35798:	ldr	r8, [pc, #168]	; 35848 <__assert_fail@plt+0x2315c>
   3579c:	movne	r8, r5
   357a0:	bl	2a340 <__assert_fail@plt+0x17c54>
   357a4:	cmp	r0, #0
   357a8:	str	r0, [r4, #16]
   357ac:	moveq	r5, #12
   357b0:	beq	35824 <__assert_fail@plt+0x23138>
   357b4:	ldrb	r3, [r4, #28]
   357b8:	ands	r2, r6, #4
   357bc:	lsl	r5, r6, #21
   357c0:	movne	r2, #1
   357c4:	ubfx	r6, r6, #3, #1
   357c8:	mov	r0, r7
   357cc:	and	r5, r5, #4194304	; 0x400000
   357d0:	orr	r5, r5, r8
   357d4:	bicne	r5, r5, #64	; 0x40
   357d8:	bfi	r3, r2, #7, #1
   357dc:	orrne	r5, r5, #256	; 0x100
   357e0:	bfi	r3, r6, #4, #1
   357e4:	strb	r3, [r4, #28]
   357e8:	mov	r3, #0
   357ec:	str	r3, [r4, #20]
   357f0:	bl	123bc <strlen@plt>
   357f4:	mov	r2, r0
   357f8:	mov	r3, r5
   357fc:	mov	r1, r7
   35800:	mov	r0, r4
   35804:	bl	346cc <__assert_fail@plt+0x21fe0>
   35808:	cmp	r0, #16
   3580c:	mov	r5, r0
   35810:	beq	3582c <__assert_fail@plt+0x23140>
   35814:	cmp	r0, #0
   35818:	bne	35830 <__assert_fail@plt+0x23144>
   3581c:	mov	r0, r4
   35820:	bl	352e0 <__assert_fail@plt+0x22bf4>
   35824:	mov	r0, r5
   35828:	pop	{r4, r5, r6, r7, r8, pc}
   3582c:	mov	r5, #8
   35830:	ldr	r0, [r4, #16]
   35834:	bl	284c4 <__assert_fail@plt+0x15dd8>
   35838:	mov	r3, #0
   3583c:	str	r3, [r4, #16]
   35840:	b	35824 <__assert_fail@plt+0x23138>
   35844:	strdeq	fp, [r3], -ip
   35848:	smlabteq	r1, r6, r2, r0
   3584c:	cmp	r0, #16
   35850:	push	{r4, r5, r6, r7, r8, lr}
   35854:	bls	3585c <__assert_fail@plt+0x23170>
   35858:	bl	12698 <abort@plt>
   3585c:	mov	r4, r3
   35860:	ldr	r3, [pc, #88]	; 358c0 <__assert_fail@plt+0x231d4>
   35864:	mov	r6, r2
   35868:	mov	r2, #5
   3586c:	add	r1, r3, #32
   35870:	add	r3, r3, r0, lsl #2
   35874:	mov	r0, #0
   35878:	ldr	r3, [r3, #416]	; 0x1a0
   3587c:	add	r1, r1, r3
   35880:	bl	1217c <dcgettext@plt>
   35884:	mov	r7, r0
   35888:	bl	123bc <strlen@plt>
   3588c:	cmp	r4, #0
   35890:	add	r5, r0, #1
   35894:	beq	358b8 <__assert_fail@plt+0x231cc>
   35898:	cmp	r5, r4
   3589c:	mov	r1, r7
   358a0:	subhi	r2, r4, #1
   358a4:	movhi	r3, #0
   358a8:	movls	r2, r5
   358ac:	mov	r0, r6
   358b0:	strbhi	r3, [r6, r2]
   358b4:	bl	120f8 <memcpy@plt>
   358b8:	mov	r0, r5
   358bc:	pop	{r4, r5, r6, r7, r8, pc}
   358c0:	andeq	ip, r3, ip, lsl #31
   358c4:	push	{r4, r5, r6, lr}
   358c8:	mov	r4, r0
   358cc:	ldr	r5, [r0]
   358d0:	cmp	r5, #0
   358d4:	beq	35914 <__assert_fail@plt+0x23228>
   358d8:	ldr	r2, [pc, #92]	; 3593c <__assert_fail@plt+0x23250>
   358dc:	mov	r3, #1
   358e0:	ldr	r1, [pc, #88]	; 35940 <__assert_fail@plt+0x23254>
   358e4:	cmp	r2, #0
   358e8:	moveq	r3, r2
   358ec:	mov	r2, #1
   358f0:	cmp	r1, #0
   358f4:	moveq	r2, r1
   358f8:	orr	r3, r3, r2
   358fc:	tst	r3, #1
   35900:	beq	3590c <__assert_fail@plt+0x23220>
   35904:	add	r0, r5, #136	; 0x88
   35908:	bl	12044 <pthread_mutex_destroy@plt>
   3590c:	mov	r0, r5
   35910:	bl	2dff8 <__assert_fail@plt+0x1b90c>
   35914:	mov	r5, #0
   35918:	ldr	r0, [r4, #16]
   3591c:	str	r5, [r4]
   35920:	str	r5, [r4, #4]
   35924:	bl	284c4 <__assert_fail@plt+0x15dd8>
   35928:	str	r5, [r4, #16]
   3592c:	ldr	r0, [r4, #20]
   35930:	bl	284c4 <__assert_fail@plt+0x15dd8>
   35934:	str	r5, [r4, #20]
   35938:	pop	{r4, r5, r6, pc}
   3593c:	andeq	r2, r1, r8, asr #1
   35940:	andeq	r2, r1, r4, ror #8
   35944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35948:	sub	sp, sp, #36	; 0x24
   3594c:	ldr	r9, [sp, #72]	; 0x48
   35950:	bics	ip, r9, #7
   35954:	movne	r0, #2
   35958:	bne	35a1c <__assert_fail@plt+0x23330>
   3595c:	ands	fp, r9, #4
   35960:	mov	r8, r3
   35964:	str	r2, [sp, #28]
   35968:	mov	r7, r1
   3596c:	mov	r6, r0
   35970:	ldrne	fp, [r3]
   35974:	ldrne	r5, [r3, #4]
   35978:	bne	35988 <__assert_fail@plt+0x2329c>
   3597c:	mov	r0, r1
   35980:	bl	123bc <strlen@plt>
   35984:	mov	r5, r0
   35988:	ldr	r2, [pc, #148]	; 35a24 <__assert_fail@plt+0x23338>
   3598c:	mov	r4, #1
   35990:	ldr	r1, [pc, #144]	; 35a28 <__assert_fail@plt+0x2333c>
   35994:	ldr	sl, [r6]
   35998:	cmp	r2, #0
   3599c:	moveq	r4, r2
   359a0:	mov	r2, #1
   359a4:	cmp	r1, #0
   359a8:	moveq	r2, r1
   359ac:	orr	r4, r4, r2
   359b0:	ands	r4, r4, #255	; 0xff
   359b4:	beq	359c0 <__assert_fail@plt+0x232d4>
   359b8:	add	r0, sl, #136	; 0x88
   359bc:	bl	120a4 <pthread_mutex_lock@plt>
   359c0:	ldrb	r2, [r6, #28]
   359c4:	mov	r1, r7
   359c8:	mov	r0, r6
   359cc:	str	r5, [sp]
   359d0:	str	r5, [sp, #4]
   359d4:	str	r9, [sp, #16]
   359d8:	tst	r2, #16
   359dc:	ldreq	r3, [sp, #28]
   359e0:	movne	r2, #0
   359e4:	streq	r8, [sp, #12]
   359e8:	strne	r2, [sp, #8]
   359ec:	strne	r2, [sp, #12]
   359f0:	mov	r2, r5
   359f4:	streq	r3, [sp, #8]
   359f8:	mov	r3, fp
   359fc:	bl	31d84 <__assert_fail@plt+0x1f698>
   35a00:	cmp	r4, #0
   35a04:	mov	r5, r0
   35a08:	beq	35a14 <__assert_fail@plt+0x23328>
   35a0c:	add	r0, sl, #136	; 0x88
   35a10:	bl	11f60 <pthread_mutex_unlock@plt>
   35a14:	adds	r0, r5, #0
   35a18:	movne	r0, #1
   35a1c:	add	sp, sp, #36	; 0x24
   35a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a24:	andeq	r2, r1, r4, ror #8
   35a28:	andeq	r2, r1, r8, asr #1
   35a2c:	mov	ip, #1
   35a30:	push	{r0, r1, r2, r3, r4, lr}
   35a34:	str	r2, [sp, #4]
   35a38:	str	ip, [sp, #12]
   35a3c:	ldr	ip, [sp, #24]
   35a40:	str	ip, [sp, #8]
   35a44:	mov	ip, #0
   35a48:	str	ip, [sp]
   35a4c:	bl	35378 <__assert_fail@plt+0x22c8c>
   35a50:	add	sp, sp, #20
   35a54:	pop	{pc}		; (ldr pc, [sp], #4)
   35a58:	mov	ip, #0
   35a5c:	push	{r0, r1, r2, r3, r4, lr}
   35a60:	str	r2, [sp, #4]
   35a64:	str	ip, [sp, #12]
   35a68:	ldr	ip, [sp, #28]
   35a6c:	str	ip, [sp, #8]
   35a70:	ldr	ip, [sp, #24]
   35a74:	str	ip, [sp]
   35a78:	bl	35378 <__assert_fail@plt+0x22c8c>
   35a7c:	add	sp, sp, #20
   35a80:	pop	{pc}		; (ldr pc, [sp], #4)
   35a84:	mov	ip, #1
   35a88:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   35a8c:	str	ip, [sp, #20]
   35a90:	ldr	ip, [sp, #44]	; 0x2c
   35a94:	str	ip, [sp, #16]
   35a98:	ldr	ip, [sp, #40]	; 0x28
   35a9c:	str	ip, [sp, #12]
   35aa0:	mov	ip, #0
   35aa4:	str	ip, [sp, #8]
   35aa8:	ldr	ip, [sp, #36]	; 0x24
   35aac:	str	ip, [sp, #4]
   35ab0:	ldr	ip, [sp, #32]
   35ab4:	str	ip, [sp]
   35ab8:	bl	35698 <__assert_fail@plt+0x22fac>
   35abc:	add	sp, sp, #28
   35ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   35ac4:	mov	ip, #0
   35ac8:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   35acc:	str	ip, [sp, #20]
   35ad0:	ldr	ip, [sp, #48]	; 0x30
   35ad4:	str	ip, [sp, #16]
   35ad8:	ldr	ip, [sp, #44]	; 0x2c
   35adc:	str	ip, [sp, #12]
   35ae0:	ldr	ip, [sp, #40]	; 0x28
   35ae4:	str	ip, [sp, #8]
   35ae8:	ldr	ip, [sp, #36]	; 0x24
   35aec:	str	ip, [sp, #4]
   35af0:	ldr	ip, [sp, #32]
   35af4:	str	ip, [sp]
   35af8:	bl	35698 <__assert_fail@plt+0x22fac>
   35afc:	add	sp, sp, #28
   35b00:	pop	{pc}		; (ldr pc, [sp], #4)
   35b04:	cmp	r2, #0
   35b08:	ldrb	ip, [r0, #28]
   35b0c:	beq	35b30 <__assert_fail@plt+0x23444>
   35b10:	push	{lr}		; (str lr, [sp, #-4]!)
   35b14:	mov	lr, #1
   35b18:	bfi	ip, lr, #1, #2
   35b1c:	strb	ip, [r0, #28]
   35b20:	strd	r2, [r1]
   35b24:	ldr	r3, [sp, #4]
   35b28:	str	r3, [r1, #8]
   35b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   35b30:	bfi	ip, r2, #1, #2
   35b34:	strb	ip, [r0, #28]
   35b38:	str	r2, [r1]
   35b3c:	str	r2, [r1, #4]
   35b40:	str	r2, [r1, #8]
   35b44:	bx	lr
   35b48:	push	{r4, r5, r6, r7, r8, lr}
   35b4c:	mov	lr, #1
   35b50:	mov	r5, #0
   35b54:	mov	ip, lr
   35b58:	mvn	r3, #0
   35b5c:	add	r4, ip, r5
   35b60:	cmp	r4, r1
   35b64:	bcc	35ba0 <__assert_fail@plt+0x234b4>
   35b68:	mov	r4, #1
   35b6c:	mov	r6, #0
   35b70:	str	lr, [r2]
   35b74:	mov	ip, r4
   35b78:	mvn	lr, #0
   35b7c:	add	r5, ip, r6
   35b80:	cmp	r1, r5
   35b84:	bhi	35bec <__assert_fail@plt+0x23500>
   35b88:	add	r0, r3, #1
   35b8c:	add	lr, lr, #1
   35b90:	cmp	lr, r0
   35b94:	movcs	r0, lr
   35b98:	strcs	r4, [r2]
   35b9c:	pop	{r4, r5, r6, r7, r8, pc}
   35ba0:	add	r6, r0, r3
   35ba4:	ldrb	r7, [r0, r4]
   35ba8:	ldrb	r6, [r6, ip]
   35bac:	cmp	r7, r6
   35bb0:	subcc	lr, r4, r3
   35bb4:	bcc	35bcc <__assert_fail@plt+0x234e0>
   35bb8:	bne	35bd8 <__assert_fail@plt+0x234ec>
   35bbc:	cmp	ip, lr
   35bc0:	addne	ip, ip, #1
   35bc4:	movne	r4, r5
   35bc8:	bne	35bd0 <__assert_fail@plt+0x234e4>
   35bcc:	mov	ip, #1
   35bd0:	mov	r5, r4
   35bd4:	b	35b5c <__assert_fail@plt+0x23470>
   35bd8:	mov	lr, #1
   35bdc:	add	r4, r5, #1
   35be0:	mov	r3, r5
   35be4:	mov	ip, lr
   35be8:	b	35bd0 <__assert_fail@plt+0x234e4>
   35bec:	add	r7, r0, lr
   35bf0:	ldrb	r8, [r0, r5]
   35bf4:	ldrb	r7, [r7, ip]
   35bf8:	cmp	r8, r7
   35bfc:	subhi	r4, r5, lr
   35c00:	bhi	35c18 <__assert_fail@plt+0x2352c>
   35c04:	bne	35c24 <__assert_fail@plt+0x23538>
   35c08:	cmp	ip, r4
   35c0c:	addne	ip, ip, #1
   35c10:	movne	r5, r6
   35c14:	bne	35c1c <__assert_fail@plt+0x23530>
   35c18:	mov	ip, #1
   35c1c:	mov	r6, r5
   35c20:	b	35b7c <__assert_fail@plt+0x23490>
   35c24:	mov	r4, #1
   35c28:	add	r5, r6, #1
   35c2c:	mov	lr, r6
   35c30:	mov	ip, r4
   35c34:	b	35c1c <__assert_fail@plt+0x23530>
   35c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35c3c:	cmp	r3, #2
   35c40:	sub	sp, sp, #1040	; 0x410
   35c44:	mov	sl, r3
   35c48:	sub	sp, sp, #12
   35c4c:	movls	r3, #1
   35c50:	mov	r8, r0
   35c54:	mov	fp, r1
   35c58:	mov	r9, r2
   35c5c:	subls	r4, sl, #1
   35c60:	strls	r3, [sp, #20]
   35c64:	bls	35c7c <__assert_fail@plt+0x23590>
   35c68:	add	r2, sp, #20
   35c6c:	mov	r1, sl
   35c70:	mov	r0, r9
   35c74:	bl	35b48 <__assert_fail@plt+0x2345c>
   35c78:	mov	r4, r0
   35c7c:	add	r3, sp, #24
   35c80:	mov	r2, #0
   35c84:	add	r2, r2, #1
   35c88:	str	sl, [r3], #4
   35c8c:	cmp	r2, #256	; 0x100
   35c90:	bne	35c84 <__assert_fail@plt+0x23598>
   35c94:	sub	r3, sl, #1
   35c98:	mov	r1, r9
   35c9c:	str	r3, [sp]
   35ca0:	cmn	r3, #1
   35ca4:	bne	35d3c <__assert_fail@plt+0x23650>
   35ca8:	ldr	r5, [sp, #20]
   35cac:	mov	r2, r4
   35cb0:	mov	r0, r9
   35cb4:	add	r1, r9, r5
   35cb8:	bl	12158 <memcmp@plt>
   35cbc:	subs	r7, r0, #0
   35cc0:	beq	35e5c <__assert_fail@plt+0x23770>
   35cc4:	sub	r7, sl, r4
   35cc8:	mov	r5, #0
   35ccc:	cmp	r7, r4
   35cd0:	rsb	r3, r4, #1
   35cd4:	movcc	r7, r4
   35cd8:	add	r7, r7, #1
   35cdc:	add	r6, r5, sl
   35ce0:	mov	r1, #0
   35ce4:	str	r3, [sp, #4]
   35ce8:	sub	r2, r6, fp
   35cec:	add	r0, r8, fp
   35cf0:	bl	124ac <memchr@plt>
   35cf4:	adds	r2, r6, #0
   35cf8:	ldr	r3, [sp, #4]
   35cfc:	movne	r2, #1
   35d00:	cmp	r0, #0
   35d04:	moveq	r0, r2
   35d08:	movne	r0, #0
   35d0c:	cmp	r0, #0
   35d10:	beq	35e44 <__assert_fail@plt+0x23758>
   35d14:	add	r2, r8, r6
   35d18:	add	r1, sp, #1040	; 0x410
   35d1c:	ldrb	r2, [r2, #-1]
   35d20:	add	r1, r1, #8
   35d24:	add	r2, r1, r2, lsl #2
   35d28:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   35d2c:	cmp	r2, #0
   35d30:	beq	35e9c <__assert_fail@plt+0x237b0>
   35d34:	add	r5, r2, r5
   35d38:	b	35eec <__assert_fail@plt+0x23800>
   35d3c:	ldrb	r2, [r1], #1
   35d40:	add	r0, sp, #1040	; 0x410
   35d44:	add	r0, r0, #8
   35d48:	add	r2, r0, r2, lsl #2
   35d4c:	str	r3, [r2, #-1024]	; 0xfffffc00
   35d50:	sub	r3, r3, #1
   35d54:	b	35ca0 <__assert_fail@plt+0x235b4>
   35d58:	add	r2, r8, r3
   35d5c:	add	r1, sp, #1040	; 0x410
   35d60:	ldrb	r2, [r2, #-1]
   35d64:	add	r1, r1, #8
   35d68:	add	r2, r1, r2, lsl #2
   35d6c:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   35d70:	cmp	r2, #0
   35d74:	beq	35dd0 <__assert_fail@plt+0x236e4>
   35d78:	cmp	r7, #0
   35d7c:	cmpne	r5, r2
   35d80:	ldrhi	r2, [sp, #4]
   35d84:	add	r6, r6, r2
   35d88:	mov	r2, #0
   35d8c:	mov	r7, r2
   35d90:	mov	fp, r3
   35d94:	add	r3, r6, sl
   35d98:	mov	r1, #0
   35d9c:	sub	r2, r3, fp
   35da0:	add	r0, r8, fp
   35da4:	str	r3, [sp, #12]
   35da8:	bl	124ac <memchr@plt>
   35dac:	ldr	r3, [sp, #12]
   35db0:	adds	r2, r3, #0
   35db4:	movne	r2, #1
   35db8:	cmp	r0, #0
   35dbc:	moveq	r0, r2
   35dc0:	movne	r0, #0
   35dc4:	cmp	r0, #0
   35dc8:	bne	35d58 <__assert_fail@plt+0x2366c>
   35dcc:	b	35e44 <__assert_fail@plt+0x23758>
   35dd0:	cmp	r7, r4
   35dd4:	add	lr, r8, r6
   35dd8:	movcs	r1, r7
   35ddc:	movcc	r1, r4
   35de0:	ldr	r0, [sp]
   35de4:	cmp	r1, r0
   35de8:	bcs	35ea8 <__assert_fail@plt+0x237bc>
   35dec:	ldrb	ip, [r9, r1]
   35df0:	ldrb	r0, [lr, r1]
   35df4:	cmp	ip, r0
   35df8:	beq	35e0c <__assert_fail@plt+0x23720>
   35dfc:	ldr	r0, [sp, #8]
   35e00:	add	r6, r0, r6
   35e04:	add	r6, r6, r1
   35e08:	b	35d8c <__assert_fail@plt+0x236a0>
   35e0c:	add	r1, r1, #1
   35e10:	b	35de0 <__assert_fail@plt+0x236f4>
   35e14:	ldrb	ip, [r1, #-1]!
   35e18:	sub	lr, r2, #1
   35e1c:	ldrb	r0, [fp, #-1]!
   35e20:	cmp	ip, r0
   35e24:	bne	35e34 <__assert_fail@plt+0x23748>
   35e28:	mov	r2, lr
   35e2c:	cmp	r7, r2
   35e30:	bcc	35e14 <__assert_fail@plt+0x23728>
   35e34:	add	r7, r7, #1
   35e38:	cmp	r7, r2
   35e3c:	bls	35e50 <__assert_fail@plt+0x23764>
   35e40:	add	r0, r8, r6
   35e44:	add	sp, sp, #1040	; 0x410
   35e48:	add	sp, sp, #12
   35e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35e50:	add	r6, r6, r5
   35e54:	ldr	r2, [sp, #4]
   35e58:	b	35d8c <__assert_fail@plt+0x236a0>
   35e5c:	sub	r3, sl, r5
   35e60:	mov	r6, r7
   35e64:	str	r3, [sp, #4]
   35e68:	rsb	r3, r4, #1
   35e6c:	str	r3, [sp, #8]
   35e70:	b	35d94 <__assert_fail@plt+0x236a8>
   35e74:	add	r2, r2, #1
   35e78:	ldr	r1, [sp]
   35e7c:	cmp	r2, r1
   35e80:	bcs	35ec4 <__assert_fail@plt+0x237d8>
   35e84:	ldrb	r0, [r9, r2]
   35e88:	ldrb	r1, [ip, r2]
   35e8c:	cmp	r0, r1
   35e90:	beq	35e74 <__assert_fail@plt+0x23788>
   35e94:	add	r5, r3, r5
   35e98:	b	35d34 <__assert_fail@plt+0x23648>
   35e9c:	mov	r2, r4
   35ea0:	add	ip, r8, r5
   35ea4:	b	35e78 <__assert_fail@plt+0x2378c>
   35ea8:	add	fp, r6, r4
   35eac:	add	r1, r9, r4
   35eb0:	add	fp, r8, fp
   35eb4:	mov	r2, r4
   35eb8:	b	35e2c <__assert_fail@plt+0x23740>
   35ebc:	add	r0, r8, r5
   35ec0:	b	35e44 <__assert_fail@plt+0x23758>
   35ec4:	add	r2, r5, r4
   35ec8:	add	r1, r9, r4
   35ecc:	add	r2, r8, r2
   35ed0:	cmp	r9, r1
   35ed4:	beq	35ebc <__assert_fail@plt+0x237d0>
   35ed8:	ldrb	ip, [r1, #-1]!
   35edc:	ldrb	r0, [r2, #-1]!
   35ee0:	cmp	ip, r0
   35ee4:	beq	35ed0 <__assert_fail@plt+0x237e4>
   35ee8:	add	r5, r5, r7
   35eec:	mov	fp, r6
   35ef0:	b	35cdc <__assert_fail@plt+0x235f0>
   35ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ef8:	mov	ip, r1
   35efc:	sub	sp, sp, #28
   35f00:	sub	lr, r0, #1
   35f04:	mov	r3, #1
   35f08:	mov	r8, ip
   35f0c:	ldrb	r4, [lr, #1]!
   35f10:	ldrb	r2, [ip], #1
   35f14:	cmp	r4, #0
   35f18:	beq	36020 <__assert_fail@plt+0x23934>
   35f1c:	cmp	r2, #0
   35f20:	bne	36010 <__assert_fail@plt+0x23924>
   35f24:	cmp	r3, #0
   35f28:	bne	36100 <__assert_fail@plt+0x23a14>
   35f2c:	mov	r5, r0
   35f30:	sub	r7, r8, r1
   35f34:	ldrb	r1, [r1]
   35f38:	add	r0, r0, #1
   35f3c:	bl	123c8 <strchr@plt>
   35f40:	subs	r4, r0, #0
   35f44:	beq	36028 <__assert_fail@plt+0x2393c>
   35f48:	cmp	r7, #1
   35f4c:	beq	36028 <__assert_fail@plt+0x2393c>
   35f50:	add	r5, r5, r7
   35f54:	sub	r8, r8, r7
   35f58:	cmp	r5, r4
   35f5c:	subcs	r5, r5, r4
   35f60:	movcc	r5, #1
   35f64:	cmp	r7, #31
   35f68:	bhi	36178 <__assert_fail@plt+0x23a8c>
   35f6c:	cmp	r7, #2
   35f70:	movls	r3, #1
   35f74:	subls	r6, r7, #1
   35f78:	strls	r3, [sp, #20]
   35f7c:	bls	35f94 <__assert_fail@plt+0x238a8>
   35f80:	add	r2, sp, #20
   35f84:	mov	r1, r7
   35f88:	mov	r0, r8
   35f8c:	bl	35b48 <__assert_fail@plt+0x2345c>
   35f90:	mov	r6, r0
   35f94:	ldr	r3, [sp, #20]
   35f98:	mov	r2, r6
   35f9c:	mov	r0, r8
   35fa0:	add	r1, r8, r3
   35fa4:	str	r3, [sp, #4]
   35fa8:	bl	12158 <memcmp@plt>
   35fac:	subs	r9, r0, #0
   35fb0:	ldr	r3, [sp, #4]
   35fb4:	beq	36108 <__assert_fail@plt+0x23a1c>
   35fb8:	sub	sl, r7, r6
   35fbc:	mov	r9, #0
   35fc0:	cmp	sl, r6
   35fc4:	rsb	r3, r6, #1
   35fc8:	movcc	sl, r6
   35fcc:	add	sl, sl, #1
   35fd0:	add	fp, r7, r9
   35fd4:	mov	r1, #0
   35fd8:	str	r3, [sp, #4]
   35fdc:	sub	r2, fp, r5
   35fe0:	add	r0, r4, r5
   35fe4:	bl	124ac <memchr@plt>
   35fe8:	clz	r0, r0
   35fec:	cmp	fp, #0
   35ff0:	ldr	r3, [sp, #4]
   35ff4:	lsr	r0, r0, #5
   35ff8:	moveq	r0, #0
   35ffc:	cmp	r0, #0
   36000:	beq	36100 <__assert_fail@plt+0x23a14>
   36004:	mov	r2, r6
   36008:	add	ip, r4, r9
   3600c:	b	36124 <__assert_fail@plt+0x23a38>
   36010:	cmp	r4, r2
   36014:	movne	r3, #0
   36018:	andeq	r3, r3, #1
   3601c:	b	35f08 <__assert_fail@plt+0x2381c>
   36020:	cmp	r2, #0
   36024:	beq	35f24 <__assert_fail@plt+0x23838>
   36028:	mov	r0, r4
   3602c:	add	sp, sp, #28
   36030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36034:	cmp	r9, r6
   36038:	add	ip, r4, sl
   3603c:	movcs	r2, r9
   36040:	movcc	r2, r6
   36044:	cmp	r7, r2
   36048:	bls	36078 <__assert_fail@plt+0x2398c>
   3604c:	ldrb	r0, [r8, r2]
   36050:	ldrb	r1, [ip, r2]
   36054:	cmp	r0, r1
   36058:	beq	36070 <__assert_fail@plt+0x23984>
   3605c:	ldr	r1, [sp, #8]
   36060:	mov	r9, #0
   36064:	add	sl, r1, sl
   36068:	add	sl, r2, sl
   3606c:	b	360c8 <__assert_fail@plt+0x239dc>
   36070:	add	r2, r2, #1
   36074:	b	36044 <__assert_fail@plt+0x23958>
   36078:	add	r1, sl, r6
   3607c:	add	r0, r8, r6
   36080:	add	r1, r4, r1
   36084:	mov	r2, r6
   36088:	cmp	r9, r2
   3608c:	bcs	360a4 <__assert_fail@plt+0x239b8>
   36090:	ldrb	lr, [r0, #-1]!
   36094:	sub	r5, r2, #1
   36098:	ldrb	ip, [r1, #-1]!
   3609c:	cmp	lr, ip
   360a0:	beq	360b8 <__assert_fail@plt+0x239cc>
   360a4:	add	r9, r9, #1
   360a8:	cmp	r9, r2
   360ac:	bls	360c0 <__assert_fail@plt+0x239d4>
   360b0:	add	r4, r4, sl
   360b4:	b	36028 <__assert_fail@plt+0x2393c>
   360b8:	mov	r2, r5
   360bc:	b	36088 <__assert_fail@plt+0x2399c>
   360c0:	ldr	r9, [sp, #4]
   360c4:	add	sl, sl, r3
   360c8:	mov	r5, fp
   360cc:	add	fp, r7, sl
   360d0:	mov	r1, #0
   360d4:	str	r3, [sp, #12]
   360d8:	sub	r2, fp, r5
   360dc:	add	r0, r4, r5
   360e0:	bl	124ac <memchr@plt>
   360e4:	clz	r0, r0
   360e8:	cmp	fp, #0
   360ec:	ldr	r3, [sp, #12]
   360f0:	lsr	r0, r0, #5
   360f4:	moveq	r0, #0
   360f8:	cmp	r0, #0
   360fc:	bne	36034 <__assert_fail@plt+0x23948>
   36100:	mov	r4, r0
   36104:	b	36028 <__assert_fail@plt+0x2393c>
   36108:	sub	r2, r7, r3
   3610c:	mov	sl, r9
   36110:	str	r2, [sp, #4]
   36114:	rsb	r2, r6, #1
   36118:	str	r2, [sp, #8]
   3611c:	b	360cc <__assert_fail@plt+0x239e0>
   36120:	add	r2, r2, #1
   36124:	cmp	r7, r2
   36128:	bls	3614c <__assert_fail@plt+0x23a60>
   3612c:	ldrb	r0, [r8, r2]
   36130:	ldrb	r1, [ip, r2]
   36134:	cmp	r0, r1
   36138:	beq	36120 <__assert_fail@plt+0x23a34>
   3613c:	add	r9, r3, r9
   36140:	add	r9, r9, r2
   36144:	mov	r5, fp
   36148:	b	35fd0 <__assert_fail@plt+0x238e4>
   3614c:	add	r2, r9, r6
   36150:	add	r1, r8, r6
   36154:	add	r2, r4, r2
   36158:	cmp	r8, r1
   3615c:	beq	36190 <__assert_fail@plt+0x23aa4>
   36160:	ldrb	ip, [r1, #-1]!
   36164:	ldrb	r0, [r2, #-1]!
   36168:	cmp	ip, r0
   3616c:	beq	36158 <__assert_fail@plt+0x23a6c>
   36170:	add	r9, r9, sl
   36174:	b	36144 <__assert_fail@plt+0x23a58>
   36178:	mov	r3, r7
   3617c:	mov	r2, r8
   36180:	mov	r1, r5
   36184:	mov	r0, r4
   36188:	bl	35c38 <__assert_fail@plt+0x2354c>
   3618c:	b	36100 <__assert_fail@plt+0x23a14>
   36190:	add	r4, r4, r9
   36194:	b	36028 <__assert_fail@plt+0x2393c>
   36198:	subs	r1, r0, #0
   3619c:	beq	361ac <__assert_fail@plt+0x23ac0>
   361a0:	mov	r2, #1
   361a4:	ldr	r0, [pc, #8]	; 361b4 <__assert_fail@plt+0x23ac8>
   361a8:	b	123d4 <setenv@plt>
   361ac:	ldr	r0, [pc]	; 361b4 <__assert_fail@plt+0x23ac8>
   361b0:	b	12668 <unsetenv@plt>
   361b4:	andeq	ip, r3, sp, lsl #15
   361b8:	push	{r4, r5, r6, r7, r8, lr}
   361bc:	subs	r7, r0, #0
   361c0:	moveq	r5, r7
   361c4:	beq	361d0 <__assert_fail@plt+0x23ae4>
   361c8:	bl	123bc <strlen@plt>
   361cc:	add	r5, r0, #1
   361d0:	cmp	r5, #58	; 0x3a
   361d4:	movcs	r0, r5
   361d8:	movcc	r0, #58	; 0x3a
   361dc:	add	r0, r0, #9
   361e0:	bic	r0, r0, #3
   361e4:	bl	2a340 <__assert_fail@plt+0x17c54>
   361e8:	subs	r4, r0, #0
   361ec:	beq	36228 <__assert_fail@plt+0x23b3c>
   361f0:	mov	r6, #0
   361f4:	cmp	r7, r6
   361f8:	movne	r3, #1
   361fc:	moveq	r3, r6
   36200:	str	r6, [r4]
   36204:	strb	r3, [r4, #4]
   36208:	strb	r6, [r4, #5]
   3620c:	beq	36228 <__assert_fail@plt+0x23b3c>
   36210:	add	r3, r4, #5
   36214:	mov	r2, r5
   36218:	mov	r1, r7
   3621c:	mov	r0, r3
   36220:	bl	120f8 <memcpy@plt>
   36224:	strb	r6, [r0, r5]
   36228:	mov	r0, r4
   3622c:	pop	{r4, r5, r6, r7, r8, pc}
   36230:	push	{r4, r5, r6, r7, r8, lr}
   36234:	ldr	r5, [r1, #40]	; 0x28
   36238:	cmp	r5, #0
   3623c:	beq	36330 <__assert_fail@plt+0x23c44>
   36240:	cmp	r1, r5
   36244:	mov	r6, r0
   36248:	mov	r7, r1
   3624c:	bhi	3625c <__assert_fail@plt+0x23b70>
   36250:	add	r3, r1, #44	; 0x2c
   36254:	cmp	r5, r3
   36258:	bcc	36330 <__assert_fail@plt+0x23c44>
   3625c:	ldrb	r3, [r5]
   36260:	cmp	r3, #0
   36264:	addne	r4, r6, #5
   36268:	bne	362a8 <__assert_fail@plt+0x23bbc>
   3626c:	ldr	r4, [pc, #196]	; 36338 <__assert_fail@plt+0x23c4c>
   36270:	b	3632c <__assert_fail@plt+0x23c40>
   36274:	ldrb	r3, [r6, #4]
   36278:	cmp	r3, #0
   3627c:	beq	362d4 <__assert_fail@plt+0x23be8>
   36280:	mov	r0, r4
   36284:	bl	123bc <strlen@plt>
   36288:	add	r0, r0, #1
   3628c:	ldrb	r3, [r4, r0]!
   36290:	cmp	r3, #0
   36294:	bne	362a8 <__assert_fail@plt+0x23bbc>
   36298:	ldr	r3, [r6]
   3629c:	cmp	r3, #0
   362a0:	addne	r4, r3, #5
   362a4:	movne	r6, r3
   362a8:	mov	r1, r5
   362ac:	mov	r0, r4
   362b0:	bl	11ffc <strcmp@plt>
   362b4:	cmp	r0, #0
   362b8:	beq	3632c <__assert_fail@plt+0x23c40>
   362bc:	ldrb	r3, [r4]
   362c0:	cmp	r3, #0
   362c4:	bne	36280 <__assert_fail@plt+0x23b94>
   362c8:	add	r3, r6, #5
   362cc:	cmp	r4, r3
   362d0:	beq	36274 <__assert_fail@plt+0x23b88>
   362d4:	mov	r0, r5
   362d8:	bl	123bc <strlen@plt>
   362dc:	add	r3, r6, #64	; 0x40
   362e0:	add	r8, r0, #1
   362e4:	sub	r3, r3, r4
   362e8:	cmp	r3, r8
   362ec:	bgt	36314 <__assert_fail@plt+0x23c28>
   362f0:	mov	r0, r5
   362f4:	bl	361b8 <__assert_fail@plt+0x23acc>
   362f8:	cmp	r0, #0
   362fc:	str	r0, [r6]
   36300:	movne	r3, #0
   36304:	addne	r4, r0, #5
   36308:	strbne	r3, [r0, #4]
   3630c:	bne	3632c <__assert_fail@plt+0x23c40>
   36310:	pop	{r4, r5, r6, r7, r8, pc}
   36314:	mov	r2, r8
   36318:	mov	r1, r5
   3631c:	mov	r0, r4
   36320:	bl	120f8 <memcpy@plt>
   36324:	mov	r3, #0
   36328:	strb	r3, [r4, r8]
   3632c:	str	r4, [r7, #40]	; 0x28
   36330:	mov	r0, #1
   36334:	pop	{r4, r5, r6, r7, r8, pc}
   36338:	andeq	r9, r3, r7, ror r5
   3633c:	cmp	r0, #1
   36340:	bxeq	lr
   36344:	cmp	r0, #0
   36348:	bxeq	lr
   3634c:	push	{r4, lr}
   36350:	ldr	r4, [r0]
   36354:	bl	284c4 <__assert_fail@plt+0x15dd8>
   36358:	cmp	r4, #0
   3635c:	mov	r0, r4
   36360:	bne	36350 <__assert_fail@plt+0x23c64>
   36364:	pop	{r4, pc}
   36368:	push	{r4, r5, r6, lr}
   3636c:	mov	r6, r0
   36370:	ldr	r0, [pc, #148]	; 3640c <__assert_fail@plt+0x23d20>
   36374:	bl	122fc <getenv@plt>
   36378:	subs	r5, r0, #0
   3637c:	ldrb	r4, [r6, #4]
   36380:	beq	363fc <__assert_fail@plt+0x23d10>
   36384:	cmp	r4, #0
   36388:	beq	363a0 <__assert_fail@plt+0x23cb4>
   3638c:	mov	r1, r5
   36390:	add	r0, r6, #5
   36394:	bl	11ffc <strcmp@plt>
   36398:	clz	r4, r0
   3639c:	lsr	r4, r4, #5
   363a0:	cmp	r4, #0
   363a4:	movne	r5, #1
   363a8:	bne	363f4 <__assert_fail@plt+0x23d08>
   363ac:	mov	r0, r5
   363b0:	bl	361b8 <__assert_fail@plt+0x23acc>
   363b4:	subs	r5, r0, #0
   363b8:	beq	363f4 <__assert_fail@plt+0x23d08>
   363bc:	ldrb	r3, [r6, #4]
   363c0:	cmp	r3, #0
   363c4:	addne	r0, r6, #5
   363c8:	moveq	r0, r4
   363cc:	bl	36198 <__assert_fail@plt+0x23aac>
   363d0:	cmp	r0, #0
   363d4:	beq	36404 <__assert_fail@plt+0x23d18>
   363d8:	bl	12404 <__errno_location@plt>
   363dc:	mov	r4, r0
   363e0:	mov	r0, r5
   363e4:	ldr	r6, [r4]
   363e8:	mov	r5, #0
   363ec:	bl	3633c <__assert_fail@plt+0x23c50>
   363f0:	str	r6, [r4]
   363f4:	mov	r0, r5
   363f8:	pop	{r4, r5, r6, pc}
   363fc:	clz	r4, r4
   36400:	b	3639c <__assert_fail@plt+0x23cb0>
   36404:	bl	1220c <tzset@plt>
   36408:	b	363f4 <__assert_fail@plt+0x23d08>
   3640c:	andeq	ip, r3, sp, lsl #15
   36410:	push	{r4, r5, r6, r7, r8, lr}
   36414:	mov	r5, r0
   36418:	bl	12404 <__errno_location@plt>
   3641c:	mov	r4, r0
   36420:	ldr	r7, [r0]
   36424:	ldrb	r0, [r5, #4]
   36428:	cmp	r0, #0
   3642c:	addne	r0, r5, #5
   36430:	bl	36198 <__assert_fail@plt+0x23aac>
   36434:	cmp	r0, #0
   36438:	movne	r6, #0
   3643c:	ldrne	r7, [r4]
   36440:	bne	3644c <__assert_fail@plt+0x23d60>
   36444:	mov	r6, #1
   36448:	bl	1220c <tzset@plt>
   3644c:	mov	r0, r5
   36450:	bl	3633c <__assert_fail@plt+0x23c50>
   36454:	mov	r0, r6
   36458:	str	r7, [r4]
   3645c:	pop	{r4, r5, r6, r7, r8, pc}
   36460:	push	{r4, r5, r6, r7, r8, lr}
   36464:	subs	r7, r0, #0
   36468:	mov	r5, r1
   3646c:	mov	r4, r2
   36470:	bne	36484 <__assert_fail@plt+0x23d98>
   36474:	mov	r0, r5
   36478:	mov	r1, r2
   3647c:	pop	{r4, r5, r6, r7, r8, lr}
   36480:	b	11fcc <gmtime_r@plt>
   36484:	bl	36368 <__assert_fail@plt+0x23c7c>
   36488:	subs	r6, r0, #0
   3648c:	beq	364d4 <__assert_fail@plt+0x23de8>
   36490:	mov	r0, r5
   36494:	mov	r1, r4
   36498:	bl	121c4 <localtime_r@plt>
   3649c:	subs	r5, r0, #0
   364a0:	beq	364e0 <__assert_fail@plt+0x23df4>
   364a4:	mov	r1, r4
   364a8:	mov	r0, r7
   364ac:	bl	36230 <__assert_fail@plt+0x23b44>
   364b0:	cmp	r6, #1
   364b4:	mov	r5, r0
   364b8:	beq	364cc <__assert_fail@plt+0x23de0>
   364bc:	mov	r0, r6
   364c0:	bl	36410 <__assert_fail@plt+0x23d24>
   364c4:	cmp	r0, #0
   364c8:	beq	364d4 <__assert_fail@plt+0x23de8>
   364cc:	cmp	r5, #0
   364d0:	bne	364d8 <__assert_fail@plt+0x23dec>
   364d4:	mov	r4, #0
   364d8:	mov	r0, r4
   364dc:	pop	{r4, r5, r6, r7, r8, pc}
   364e0:	cmp	r6, #1
   364e4:	bne	364bc <__assert_fail@plt+0x23dd0>
   364e8:	b	364d4 <__assert_fail@plt+0x23de8>
   364ec:	push	{r4, r5, r6, r7, lr}
   364f0:	subs	r7, r0, #0
   364f4:	sub	sp, sp, #52	; 0x34
   364f8:	mov	r4, r1
   364fc:	bne	36518 <__assert_fail@plt+0x23e2c>
   36500:	mov	r0, r1
   36504:	bl	125b4 <timegm@plt>
   36508:	mov	r5, r0
   3650c:	mov	r0, r5
   36510:	add	sp, sp, #52	; 0x34
   36514:	pop	{r4, r5, r6, r7, pc}
   36518:	bl	36368 <__assert_fail@plt+0x23c7c>
   3651c:	subs	r6, r0, #0
   36520:	beq	365dc <__assert_fail@plt+0x23ef0>
   36524:	ldr	r3, [r4]
   36528:	add	r0, sp, #4
   3652c:	str	r3, [sp, #4]
   36530:	ldr	r3, [r4, #4]
   36534:	str	r3, [sp, #8]
   36538:	ldr	r3, [r4, #8]
   3653c:	str	r3, [sp, #12]
   36540:	ldr	r3, [r4, #12]
   36544:	str	r3, [sp, #16]
   36548:	ldr	r3, [r4, #16]
   3654c:	str	r3, [sp, #20]
   36550:	ldr	r3, [r4, #20]
   36554:	str	r3, [sp, #24]
   36558:	mvn	r3, #0
   3655c:	str	r3, [sp, #32]
   36560:	ldr	r3, [r4, #32]
   36564:	str	r3, [sp, #36]	; 0x24
   36568:	bl	12050 <mktime@plt>
   3656c:	ldr	r3, [sp, #32]
   36570:	mov	r5, r0
   36574:	cmp	r3, #0
   36578:	blt	365d0 <__assert_fail@plt+0x23ee4>
   3657c:	mov	r0, r7
   36580:	add	r1, sp, #4
   36584:	bl	36230 <__assert_fail@plt+0x23b44>
   36588:	cmp	r6, #1
   3658c:	mov	r7, r0
   36590:	beq	365a4 <__assert_fail@plt+0x23eb8>
   36594:	mov	r0, r6
   36598:	bl	36410 <__assert_fail@plt+0x23d24>
   3659c:	cmp	r0, #0
   365a0:	beq	365dc <__assert_fail@plt+0x23ef0>
   365a4:	cmp	r7, #0
   365a8:	beq	365dc <__assert_fail@plt+0x23ef0>
   365ac:	add	lr, sp, #4
   365b0:	mov	ip, r4
   365b4:	ldm	lr!, {r0, r1, r2, r3}
   365b8:	stmia	ip!, {r0, r1, r2, r3}
   365bc:	ldm	lr!, {r0, r1, r2, r3}
   365c0:	stmia	ip!, {r0, r1, r2, r3}
   365c4:	ldm	lr, {r0, r1, r2}
   365c8:	stm	ip, {r0, r1, r2}
   365cc:	b	3650c <__assert_fail@plt+0x23e20>
   365d0:	cmp	r6, #1
   365d4:	movne	r7, #0
   365d8:	bne	36594 <__assert_fail@plt+0x23ea8>
   365dc:	mvn	r5, #0
   365e0:	b	3650c <__assert_fail@plt+0x23e20>
   365e4:	ldr	r3, [pc, #8]	; 365f4 <__assert_fail@plt+0x23f08>
   365e8:	push	{r4, lr}
   365ec:	ldr	r0, [r3]
   365f0:	bl	1238c <exit@plt>
   365f4:	andeq	lr, r4, r4, lsl #10
   365f8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   365fc:	mov	fp, r1
   36600:	mov	r8, r2
   36604:	mov	r9, r3
   36608:	mov	r7, r2
   3660c:	mov	r5, #0
   36610:	mvn	r4, #0
   36614:	str	r0, [sp]
   36618:	mov	r6, r5
   3661c:	bl	123bc <strlen@plt>
   36620:	mov	sl, r0
   36624:	ldr	r3, [fp, r6, lsl #2]
   36628:	cmp	r3, #0
   3662c:	bne	3663c <__assert_fail@plt+0x23f50>
   36630:	cmp	r5, #0
   36634:	mvnne	r4, #1
   36638:	b	36670 <__assert_fail@plt+0x23f84>
   3663c:	mov	r2, sl
   36640:	mov	r0, r3
   36644:	ldr	r1, [sp]
   36648:	str	r3, [sp, #4]
   3664c:	bl	1268c <strncmp@plt>
   36650:	cmp	r0, #0
   36654:	bne	366ac <__assert_fail@plt+0x23fc0>
   36658:	ldr	r3, [sp, #4]
   3665c:	mov	r0, r3
   36660:	bl	123bc <strlen@plt>
   36664:	cmp	r0, sl
   36668:	bne	3667c <__assert_fail@plt+0x23f90>
   3666c:	mov	r4, r6
   36670:	mov	r0, r4
   36674:	add	sp, sp, #12
   36678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3667c:	cmn	r4, #1
   36680:	moveq	r4, r6
   36684:	beq	366ac <__assert_fail@plt+0x23fc0>
   36688:	cmp	r8, #0
   3668c:	moveq	r5, #1
   36690:	beq	366ac <__assert_fail@plt+0x23fc0>
   36694:	mov	r2, r9
   36698:	mov	r1, r7
   3669c:	mla	r0, r9, r4, r8
   366a0:	bl	12158 <memcmp@plt>
   366a4:	cmp	r0, #0
   366a8:	movne	r5, #1
   366ac:	add	r6, r6, #1
   366b0:	add	r7, r7, r9
   366b4:	b	36624 <__assert_fail@plt+0x23f38>
   366b8:	cmn	r2, #1
   366bc:	push	{r0, r1, r4, r5, r6, lr}
   366c0:	mov	r2, #5
   366c4:	mov	r5, r1
   366c8:	mov	r6, r0
   366cc:	mov	r0, #0
   366d0:	ldreq	r1, [pc, #72]	; 36720 <__assert_fail@plt+0x24034>
   366d4:	ldrne	r1, [pc, #72]	; 36724 <__assert_fail@plt+0x24038>
   366d8:	bl	1217c <dcgettext@plt>
   366dc:	mov	r4, r0
   366e0:	mov	r2, r5
   366e4:	mov	r1, #8
   366e8:	mov	r0, #0
   366ec:	bl	265a0 <__assert_fail@plt+0x13eb4>
   366f0:	mov	r5, r0
   366f4:	mov	r1, r6
   366f8:	mov	r0, #1
   366fc:	bl	267e8 <__assert_fail@plt+0x140fc>
   36700:	mov	r1, #0
   36704:	mov	r3, r5
   36708:	str	r0, [sp]
   3670c:	mov	r2, r4
   36710:	mov	r0, r1
   36714:	bl	122c0 <error@plt>
   36718:	add	sp, sp, #8
   3671c:	pop	{r4, r5, r6, pc}
   36720:	andeq	sp, r3, r4, asr #3
   36724:	ldrdeq	sp, [r3], -pc	; <UNPREDICTABLE>
   36728:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3672c:	mov	r6, #0
   36730:	mov	sl, r0
   36734:	mov	r4, r1
   36738:	mov	r8, r2
   3673c:	mov	r0, #0
   36740:	mov	r2, #5
   36744:	ldr	r7, [pc, #180]	; 36800 <__assert_fail@plt+0x24114>
   36748:	mov	r5, r6
   3674c:	ldr	fp, [pc, #176]	; 36804 <__assert_fail@plt+0x24118>
   36750:	ldr	r1, [pc, #176]	; 36808 <__assert_fail@plt+0x2411c>
   36754:	bl	1217c <dcgettext@plt>
   36758:	ldr	r1, [r7]
   3675c:	bl	12680 <fputs@plt>
   36760:	str	r7, [sp]
   36764:	ldr	r3, [sl, r5, lsl #2]
   36768:	ldr	r2, [sp]
   3676c:	cmp	r3, #0
   36770:	ldr	r7, [r2]
   36774:	bne	3678c <__assert_fail@plt+0x240a0>
   36778:	mov	r1, r7
   3677c:	mov	r0, #10
   36780:	add	sp, sp, #12
   36784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36788:	b	125c0 <putc@plt>
   3678c:	cmp	r5, #0
   36790:	mov	r9, r4
   36794:	beq	367b8 <__assert_fail@plt+0x240cc>
   36798:	mov	r2, r8
   3679c:	mov	r1, r4
   367a0:	str	r3, [sp, #4]
   367a4:	mov	r0, r6
   367a8:	bl	12158 <memcmp@plt>
   367ac:	cmp	r0, #0
   367b0:	ldr	r3, [sp, #4]
   367b4:	beq	367e0 <__assert_fail@plt+0x240f4>
   367b8:	mov	r0, r3
   367bc:	bl	267f0 <__assert_fail@plt+0x14104>
   367c0:	mov	r2, r0
   367c4:	ldr	r1, [pc, #64]	; 3680c <__assert_fail@plt+0x24120>
   367c8:	mov	r0, r7
   367cc:	bl	123f8 <fprintf@plt>
   367d0:	add	r5, r5, #1
   367d4:	add	r4, r4, r8
   367d8:	mov	r6, r9
   367dc:	b	36764 <__assert_fail@plt+0x24078>
   367e0:	mov	r0, r3
   367e4:	mov	r9, r6
   367e8:	bl	267f0 <__assert_fail@plt+0x14104>
   367ec:	mov	r2, r0
   367f0:	mov	r1, fp
   367f4:	mov	r0, r7
   367f8:	bl	123f8 <fprintf@plt>
   367fc:	b	367d0 <__assert_fail@plt+0x240e4>
   36800:	andeq	lr, r4, r0, ror #10
   36804:	andeq	sp, r3, r9, lsl r2
   36808:	strdeq	sp, [r3], -ip
   3680c:	andeq	sp, r3, r1, lsl r2
   36810:	push	{r4, r5, r6, r7, r8, lr}
   36814:	mov	r6, r1
   36818:	mov	r4, r2
   3681c:	mov	r7, r0
   36820:	mov	r2, r3
   36824:	mov	r5, r3
   36828:	mov	r1, r4
   3682c:	mov	r0, r6
   36830:	ldr	r3, [sp, #24]
   36834:	bl	365f8 <__assert_fail@plt+0x23f0c>
   36838:	cmp	r0, #0
   3683c:	popge	{r4, r5, r6, r7, r8, pc}
   36840:	mov	r2, r0
   36844:	mov	r1, r6
   36848:	mov	r0, r7
   3684c:	bl	366b8 <__assert_fail@plt+0x23fcc>
   36850:	mov	r0, r4
   36854:	mov	r1, r5
   36858:	ldr	r2, [sp, #24]
   3685c:	bl	36728 <__assert_fail@plt+0x2403c>
   36860:	ldr	r3, [sp, #28]
   36864:	blx	r3
   36868:	mvn	r0, #0
   3686c:	pop	{r4, r5, r6, r7, r8, pc}
   36870:	push	{r4, r5, r6, r7, r8, lr}
   36874:	mov	r8, r0
   36878:	mov	r7, r3
   3687c:	sub	r6, r1, #4
   36880:	mov	r4, r2
   36884:	ldr	r5, [r6, #4]!
   36888:	cmp	r5, #0
   3688c:	beq	368ac <__assert_fail@plt+0x241c0>
   36890:	mov	r1, r4
   36894:	mov	r2, r7
   36898:	mov	r0, r8
   3689c:	add	r4, r4, r7
   368a0:	bl	12158 <memcmp@plt>
   368a4:	cmp	r0, #0
   368a8:	bne	36884 <__assert_fail@plt+0x24198>
   368ac:	mov	r0, r5
   368b0:	pop	{r4, r5, r6, r7, r8, pc}
   368b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   368b8:	mov	r4, r0
   368bc:	sub	sp, sp, #32
   368c0:	ldrb	r3, [r2]
   368c4:	cmp	r3, #0
   368c8:	strbeq	r3, [r0]
   368cc:	beq	3694c <__assert_fail@plt+0x24260>
   368d0:	ldr	r7, [pc, #192]	; 36998 <__assert_fail@plt+0x242ac>
   368d4:	mov	sl, r1
   368d8:	mov	r5, r2
   368dc:	ldr	r6, [r7]
   368e0:	mov	r8, r7
   368e4:	cmp	r6, #0
   368e8:	bne	3693c <__assert_fail@plt+0x24250>
   368ec:	ldr	r1, [pc, #168]	; 3699c <__assert_fail@plt+0x242b0>
   368f0:	ldr	r0, [pc, #168]	; 369a0 <__assert_fail@plt+0x242b4>
   368f4:	bl	122f0 <open64@plt>
   368f8:	subs	r9, r0, #0
   368fc:	mvnlt	r3, #0
   36900:	strlt	r3, [r7]
   36904:	blt	36948 <__assert_fail@plt+0x2425c>
   36908:	mov	r2, r9
   3690c:	ldr	r1, [pc, #144]	; 369a4 <__assert_fail@plt+0x242b8>
   36910:	mov	r0, sp
   36914:	bl	12590 <sprintf@plt>
   36918:	mov	r1, r6
   3691c:	mov	r0, sp
   36920:	bl	124c4 <access@plt>
   36924:	cmp	r0, #0
   36928:	mov	r0, r9
   3692c:	mvnne	r3, #0
   36930:	moveq	r3, #1
   36934:	str	r3, [r7]
   36938:	bl	126a4 <close@plt>
   3693c:	ldr	r3, [r8]
   36940:	cmp	r3, #0
   36944:	bge	36958 <__assert_fail@plt+0x2426c>
   36948:	mov	r4, #0
   3694c:	mov	r0, r4
   36950:	add	sp, sp, #32
   36954:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36958:	mov	r0, r5
   3695c:	bl	123bc <strlen@plt>
   36960:	add	r0, r0, #27
   36964:	cmp	r0, #4032	; 0xfc0
   36968:	bls	36978 <__assert_fail@plt+0x2428c>
   3696c:	bl	2a340 <__assert_fail@plt+0x17c54>
   36970:	subs	r4, r0, #0
   36974:	beq	36948 <__assert_fail@plt+0x2425c>
   36978:	mov	r2, sl
   3697c:	ldr	r1, [pc, #36]	; 369a8 <__assert_fail@plt+0x242bc>
   36980:	mov	r0, r4
   36984:	bl	12590 <sprintf@plt>
   36988:	add	r0, r4, r0
   3698c:	mov	r1, r5
   36990:	bl	12278 <strcpy@plt>
   36994:	b	3694c <__assert_fail@plt+0x24260>
   36998:	andeq	lr, r4, r4, asr lr
   3699c:	andeq	r4, r8, r0, lsl #18
   369a0:	strdeq	fp, [r3], -sp
   369a4:	andeq	sp, r3, lr, lsl r2
   369a8:	andeq	sp, r3, r5, lsr r2
   369ac:	mov	r3, r0
   369b0:	mov	r2, r3
   369b4:	mov	r0, r3
   369b8:	ldrb	r1, [r2], #1
   369bc:	cmp	r1, #47	; 0x2f
   369c0:	beq	369cc <__assert_fail@plt+0x242e0>
   369c4:	mov	r2, #0
   369c8:	b	369e8 <__assert_fail@plt+0x242fc>
   369cc:	mov	r3, r2
   369d0:	b	369b0 <__assert_fail@plt+0x242c4>
   369d4:	cmp	r1, #47	; 0x2f
   369d8:	moveq	r2, #1
   369dc:	beq	369e8 <__assert_fail@plt+0x242fc>
   369e0:	cmp	r2, #0
   369e4:	bne	369fc <__assert_fail@plt+0x24310>
   369e8:	mov	ip, r3
   369ec:	ldrb	r1, [r3], #1
   369f0:	cmp	r1, #0
   369f4:	bne	369d4 <__assert_fail@plt+0x242e8>
   369f8:	bx	lr
   369fc:	mov	r0, ip
   36a00:	b	369c4 <__assert_fail@plt+0x242d8>
   36a04:	push	{r4, lr}
   36a08:	mov	r4, r0
   36a0c:	bl	123bc <strlen@plt>
   36a10:	cmp	r0, #1
   36a14:	popls	{r4, pc}
   36a18:	sub	r3, r0, #1
   36a1c:	ldrb	r2, [r4, r3]
   36a20:	cmp	r2, #47	; 0x2f
   36a24:	popne	{r4, pc}
   36a28:	mov	r0, r3
   36a2c:	b	36a10 <__assert_fail@plt+0x24324>
   36a30:	cmp	r0, #90	; 0x5a
   36a34:	bgt	36a54 <__assert_fail@plt+0x24368>
   36a38:	cmp	r0, #65	; 0x41
   36a3c:	bge	36a60 <__assert_fail@plt+0x24374>
   36a40:	sub	r0, r0, #48	; 0x30
   36a44:	cmp	r0, #9
   36a48:	movhi	r0, #0
   36a4c:	movls	r0, #1
   36a50:	bx	lr
   36a54:	sub	r0, r0, #97	; 0x61
   36a58:	cmp	r0, #25
   36a5c:	b	36a48 <__assert_fail@plt+0x2435c>
   36a60:	mov	r0, #1
   36a64:	bx	lr
   36a68:	cmp	r0, #65	; 0x41
   36a6c:	blt	36a8c <__assert_fail@plt+0x243a0>
   36a70:	cmp	r0, #90	; 0x5a
   36a74:	ble	36a94 <__assert_fail@plt+0x243a8>
   36a78:	sub	r0, r0, #97	; 0x61
   36a7c:	cmp	r0, #25
   36a80:	movhi	r0, #0
   36a84:	movls	r0, #1
   36a88:	bx	lr
   36a8c:	mov	r0, #0
   36a90:	bx	lr
   36a94:	mov	r0, #1
   36a98:	bx	lr
   36a9c:	cmp	r0, #127	; 0x7f
   36aa0:	movhi	r0, #0
   36aa4:	movls	r0, #1
   36aa8:	bx	lr
   36aac:	cmp	r0, #9
   36ab0:	cmpne	r0, #32
   36ab4:	moveq	r0, #1
   36ab8:	movne	r0, #0
   36abc:	bx	lr
   36ac0:	cmp	r0, #0
   36ac4:	blt	36ae0 <__assert_fail@plt+0x243f4>
   36ac8:	cmp	r0, #31
   36acc:	ble	36ae8 <__assert_fail@plt+0x243fc>
   36ad0:	sub	r0, r0, #127	; 0x7f
   36ad4:	clz	r0, r0
   36ad8:	lsr	r0, r0, #5
   36adc:	bx	lr
   36ae0:	mov	r0, #0
   36ae4:	bx	lr
   36ae8:	mov	r0, #1
   36aec:	bx	lr
   36af0:	sub	r0, r0, #48	; 0x30
   36af4:	cmp	r0, #9
   36af8:	movhi	r0, #0
   36afc:	movls	r0, #1
   36b00:	bx	lr
   36b04:	sub	r0, r0, #33	; 0x21
   36b08:	cmp	r0, #93	; 0x5d
   36b0c:	movhi	r0, #0
   36b10:	movls	r0, #1
   36b14:	bx	lr
   36b18:	sub	r0, r0, #97	; 0x61
   36b1c:	cmp	r0, #25
   36b20:	movhi	r0, #0
   36b24:	movls	r0, #1
   36b28:	bx	lr
   36b2c:	sub	r0, r0, #32
   36b30:	cmp	r0, #94	; 0x5e
   36b34:	movhi	r0, #0
   36b38:	movls	r0, #1
   36b3c:	bx	lr
   36b40:	cmp	r0, #64	; 0x40
   36b44:	bgt	36b64 <__assert_fail@plt+0x24478>
   36b48:	cmp	r0, #58	; 0x3a
   36b4c:	bge	36b88 <__assert_fail@plt+0x2449c>
   36b50:	sub	r0, r0, #33	; 0x21
   36b54:	cmp	r0, #14
   36b58:	movhi	r0, #0
   36b5c:	movls	r0, #1
   36b60:	bx	lr
   36b64:	cmp	r0, #91	; 0x5b
   36b68:	blt	36b80 <__assert_fail@plt+0x24494>
   36b6c:	cmp	r0, #96	; 0x60
   36b70:	ble	36b88 <__assert_fail@plt+0x2449c>
   36b74:	sub	r0, r0, #123	; 0x7b
   36b78:	cmp	r0, #3
   36b7c:	b	36b58 <__assert_fail@plt+0x2446c>
   36b80:	mov	r0, #0
   36b84:	bx	lr
   36b88:	mov	r0, #1
   36b8c:	bx	lr
   36b90:	sub	r0, r0, #9
   36b94:	cmp	r0, #23
   36b98:	bhi	36bb4 <__assert_fail@plt+0x244c8>
   36b9c:	ldr	r3, [pc, #24]	; 36bbc <__assert_fail@plt+0x244d0>
   36ba0:	mov	r2, #1
   36ba4:	ands	r3, r3, r2, lsl r0
   36ba8:	movne	r0, r2
   36bac:	moveq	r0, #0
   36bb0:	bx	lr
   36bb4:	mov	r0, #0
   36bb8:	bx	lr
   36bbc:	addeq	r0, r0, pc, lsl r0
   36bc0:	sub	r0, r0, #65	; 0x41
   36bc4:	cmp	r0, #25
   36bc8:	movhi	r0, #0
   36bcc:	movls	r0, #1
   36bd0:	bx	lr
   36bd4:	cmp	r0, #70	; 0x46
   36bd8:	bgt	36bf8 <__assert_fail@plt+0x2450c>
   36bdc:	cmp	r0, #65	; 0x41
   36be0:	bge	36c04 <__assert_fail@plt+0x24518>
   36be4:	sub	r0, r0, #48	; 0x30
   36be8:	cmp	r0, #9
   36bec:	movhi	r0, #0
   36bf0:	movls	r0, #1
   36bf4:	bx	lr
   36bf8:	sub	r0, r0, #97	; 0x61
   36bfc:	cmp	r0, #5
   36c00:	b	36bec <__assert_fail@plt+0x24500>
   36c04:	mov	r0, #1
   36c08:	bx	lr
   36c0c:	sub	r3, r0, #65	; 0x41
   36c10:	cmp	r3, #25
   36c14:	addls	r0, r0, #32
   36c18:	bx	lr
   36c1c:	sub	r3, r0, #97	; 0x61
   36c20:	cmp	r3, #25
   36c24:	subls	r0, r0, #32
   36c28:	bx	lr
   36c2c:	push	{r4, r5, r6, lr}
   36c30:	mov	r4, r0
   36c34:	bl	12290 <__fpending@plt>
   36c38:	mov	r5, r0
   36c3c:	mov	r0, r4
   36c40:	bl	120bc <ferror@plt>
   36c44:	mov	r6, r0
   36c48:	mov	r0, r4
   36c4c:	bl	124d0 <fclose@plt>
   36c50:	cmp	r6, #0
   36c54:	mov	r4, r0
   36c58:	bne	36c84 <__assert_fail@plt+0x24598>
   36c5c:	cmp	r0, #0
   36c60:	beq	36c7c <__assert_fail@plt+0x24590>
   36c64:	cmp	r5, #0
   36c68:	bne	36c94 <__assert_fail@plt+0x245a8>
   36c6c:	bl	12404 <__errno_location@plt>
   36c70:	ldr	r4, [r0]
   36c74:	subs	r4, r4, #9
   36c78:	mvnne	r4, #0
   36c7c:	mov	r0, r4
   36c80:	pop	{r4, r5, r6, pc}
   36c84:	cmp	r0, #0
   36c88:	bne	36c94 <__assert_fail@plt+0x245a8>
   36c8c:	bl	12404 <__errno_location@plt>
   36c90:	str	r4, [r0]
   36c94:	mvn	r4, #0
   36c98:	b	36c7c <__assert_fail@plt+0x24590>
   36c9c:	mov	r3, #0
   36ca0:	mov	r2, #0
   36ca4:	strd	r2, [r0, #16]
   36ca8:	ldr	r3, [pc, #4]	; 36cb4 <__assert_fail@plt+0x245c8>
   36cac:	str	r3, [r0, #24]
   36cb0:	bx	lr
   36cb4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   36cb8:	ldr	r3, [pc, #152]	; 36d58 <__assert_fail@plt+0x2466c>
   36cbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36cc0:	ldr	r2, [r0, #24]
   36cc4:	cmp	r2, r3
   36cc8:	beq	36ce0 <__assert_fail@plt+0x245f4>
   36ccc:	ldr	r3, [pc, #136]	; 36d5c <__assert_fail@plt+0x24670>
   36cd0:	mov	r2, #60	; 0x3c
   36cd4:	ldr	r1, [pc, #132]	; 36d60 <__assert_fail@plt+0x24674>
   36cd8:	ldr	r0, [pc, #132]	; 36d64 <__assert_fail@plt+0x24678>
   36cdc:	bl	126ec <__assert_fail@plt>
   36ce0:	ldrd	r6, [r0, #16]
   36ce4:	orrs	r3, r6, r7
   36ce8:	beq	36d1c <__assert_fail@plt+0x24630>
   36cec:	ldrd	r2, [r0]
   36cf0:	ldrd	r4, [r1, #96]	; 0x60
   36cf4:	cmp	r5, r3
   36cf8:	cmpeq	r4, r2
   36cfc:	bne	36d1c <__assert_fail@plt+0x24630>
   36d00:	ldrd	r4, [r1]
   36d04:	ldrd	r2, [r0, #8]
   36d08:	cmp	r5, r3
   36d0c:	cmpeq	r4, r2
   36d10:	bne	36d1c <__assert_fail@plt+0x24630>
   36d14:	mov	r0, #1
   36d18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36d1c:	adds	r8, r6, #1
   36d20:	adc	r9, r7, #0
   36d24:	and	r2, r6, r8
   36d28:	and	r3, r7, r9
   36d2c:	orrs	r3, r2, r3
   36d30:	strd	r8, [r0, #16]
   36d34:	bne	36d50 <__assert_fail@plt+0x24664>
   36d38:	orrs	r3, r8, r9
   36d3c:	beq	36d14 <__assert_fail@plt+0x24628>
   36d40:	ldrd	r2, [r1]
   36d44:	strd	r2, [r0, #8]
   36d48:	ldrd	r2, [r1, #96]	; 0x60
   36d4c:	strd	r2, [r0]
   36d50:	mov	r0, #0
   36d54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36d58:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   36d5c:	andeq	sp, r3, r7, asr #4
   36d60:	andeq	sp, r3, r3, asr r2
   36d64:	andeq	sp, r3, r1, ror #4
   36d68:	ldr	ip, [r0, #4]
   36d6c:	cmp	ip, r1
   36d70:	bcc	36d80 <__assert_fail@plt+0x24694>
   36d74:	str	r1, [r0]
   36d78:	mov	r0, #1
   36d7c:	bx	lr
   36d80:	push	{r4, r5, r6, r7, r8, lr}
   36d84:	umull	r6, r7, r1, r3
   36d88:	mov	r8, r3
   36d8c:	mov	r5, r1
   36d90:	mov	r4, r0
   36d94:	cmp	r7, #0
   36d98:	bne	36de0 <__assert_fail@plt+0x246f4>
   36d9c:	ldr	r0, [r0, #8]
   36da0:	cmp	r0, r2
   36da4:	bne	36df4 <__assert_fail@plt+0x24708>
   36da8:	mov	r0, r6
   36dac:	bl	2a340 <__assert_fail@plt+0x17c54>
   36db0:	subs	r6, r0, #0
   36db4:	beq	36dec <__assert_fail@plt+0x24700>
   36db8:	ldr	r1, [r4, #8]
   36dbc:	cmp	r1, #0
   36dc0:	beq	36dd0 <__assert_fail@plt+0x246e4>
   36dc4:	ldr	r2, [r4]
   36dc8:	mul	r2, r2, r8
   36dcc:	bl	120f8 <memcpy@plt>
   36dd0:	mov	r0, #1
   36dd4:	str	r5, [r4]
   36dd8:	stmib	r4, {r5, r6}
   36ddc:	pop	{r4, r5, r6, r7, r8, pc}
   36de0:	bl	12404 <__errno_location@plt>
   36de4:	mov	r3, #12
   36de8:	str	r3, [r0]
   36dec:	mov	r0, #0
   36df0:	pop	{r4, r5, r6, r7, r8, pc}
   36df4:	mov	r1, r6
   36df8:	bl	2acc4 <__assert_fail@plt+0x185d8>
   36dfc:	subs	r6, r0, #0
   36e00:	bne	36dd0 <__assert_fail@plt+0x246e4>
   36e04:	b	36dec <__assert_fail@plt+0x24700>
   36e08:	mov	r1, r0
   36e0c:	mov	r0, #0
   36e10:	b	120e0 <clock_gettime@plt>
   36e14:	push	{r0, r1, r2, r4, r5, lr}
   36e18:	mov	r5, sp
   36e1c:	mov	r4, r0
   36e20:	mov	r0, r5
   36e24:	bl	36e08 <__assert_fail@plt+0x2471c>
   36e28:	ldm	r5, {r0, r1}
   36e2c:	stm	r4, {r0, r1}
   36e30:	mov	r0, r4
   36e34:	add	sp, sp, #12
   36e38:	pop	{r4, r5, pc}
   36e3c:	push	{lr}		; (str lr, [sp, #-4]!)
   36e40:	sub	sp, sp, #268	; 0x10c
   36e44:	movw	r2, #257	; 0x101
   36e48:	add	r1, sp, #4
   36e4c:	bl	37198 <__assert_fail@plt+0x24aac>
   36e50:	cmp	r0, #0
   36e54:	movne	r0, #0
   36e58:	bne	36e88 <__assert_fail@plt+0x2479c>
   36e5c:	ldr	r1, [pc, #44]	; 36e90 <__assert_fail@plt+0x247a4>
   36e60:	add	r0, sp, #4
   36e64:	bl	11ffc <strcmp@plt>
   36e68:	cmp	r0, #0
   36e6c:	beq	36e84 <__assert_fail@plt+0x24798>
   36e70:	ldr	r1, [pc, #28]	; 36e94 <__assert_fail@plt+0x247a8>
   36e74:	add	r0, sp, #4
   36e78:	bl	11ffc <strcmp@plt>
   36e7c:	adds	r0, r0, #0
   36e80:	movne	r0, #1
   36e84:	and	r0, r0, #1
   36e88:	add	sp, sp, #268	; 0x10c
   36e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   36e90:	andeq	r7, r3, r3, lsl #29
   36e94:	andeq	sp, r3, r9, ror r2
   36e98:	mov	r3, #1
   36e9c:	str	r1, [r0]
   36ea0:	str	r1, [r0, #4]
   36ea4:	str	r1, [r0, #8]
   36ea8:	strb	r3, [r0, #28]
   36eac:	mov	r3, #0
   36eb0:	str	r1, [r0, #12]
   36eb4:	str	r1, [r0, #16]
   36eb8:	str	r3, [r0, #20]
   36ebc:	str	r3, [r0, #24]
   36ec0:	bx	lr
   36ec4:	ldrb	r0, [r0, #28]
   36ec8:	bx	lr
   36ecc:	ldrb	r2, [r0, #28]
   36ed0:	mov	r3, r0
   36ed4:	ldr	ip, [r0, #20]
   36ed8:	eor	r2, r2, #1
   36edc:	add	ip, r2, ip
   36ee0:	and	ip, ip, #3
   36ee4:	ldr	r0, [r0, ip, lsl #2]
   36ee8:	str	r1, [r3, ip, lsl #2]
   36eec:	ldr	r1, [r3, #24]
   36ef0:	str	ip, [r3, #20]
   36ef4:	cmp	r1, ip
   36ef8:	addeq	r2, r2, r1
   36efc:	andeq	r2, r2, #3
   36f00:	streq	r2, [r3, #24]
   36f04:	mov	r2, #0
   36f08:	strb	r2, [r3, #28]
   36f0c:	bx	lr
   36f10:	ldrb	r2, [r0, #28]
   36f14:	cmp	r2, #0
   36f18:	beq	36f24 <__assert_fail@plt+0x24838>
   36f1c:	push	{r4, lr}
   36f20:	bl	12698 <abort@plt>
   36f24:	ldr	r1, [r0, #16]
   36f28:	mov	r3, r0
   36f2c:	ldr	r2, [r0, #20]
   36f30:	ldr	r0, [r0, r2, lsl #2]
   36f34:	str	r1, [r3, r2, lsl #2]
   36f38:	ldr	r1, [r3, #24]
   36f3c:	cmp	r2, r1
   36f40:	addne	r2, r2, #3
   36f44:	moveq	r2, #1
   36f48:	andne	r2, r2, #3
   36f4c:	strbeq	r2, [r3, #28]
   36f50:	strne	r2, [r3, #20]
   36f54:	bx	lr
   36f58:	b	2a340 <__assert_fail@plt+0x17c54>
   36f5c:	cmp	r1, #0
   36f60:	orreq	r1, r1, #1
   36f64:	b	2acc4 <__assert_fail@plt+0x185d8>
   36f68:	b	27fbc <__assert_fail@plt+0x158d0>
   36f6c:	cmp	r2, #0
   36f70:	cmpne	r1, #0
   36f74:	moveq	r2, #1
   36f78:	moveq	r1, r2
   36f7c:	b	2ad08 <__assert_fail@plt+0x1861c>
   36f80:	push	{r4, lr}
   36f84:	mov	r0, #14
   36f88:	bl	12560 <nl_langinfo@plt>
   36f8c:	cmp	r0, #0
   36f90:	beq	36fa8 <__assert_fail@plt+0x248bc>
   36f94:	ldrb	r2, [r0]
   36f98:	ldr	r3, [pc, #16]	; 36fb0 <__assert_fail@plt+0x248c4>
   36f9c:	cmp	r2, #0
   36fa0:	moveq	r0, r3
   36fa4:	pop	{r4, pc}
   36fa8:	ldr	r0, [pc]	; 36fb0 <__assert_fail@plt+0x248c4>
   36fac:	pop	{r4, pc}
   36fb0:	andeq	sp, r3, pc, ror r2
   36fb4:	mov	r3, r0
   36fb8:	adds	r0, r0, #16
   36fbc:	bmi	36ff4 <__assert_fail@plt+0x24908>
   36fc0:	cmp	r0, r3
   36fc4:	bcc	36ff4 <__assert_fail@plt+0x24908>
   36fc8:	push	{r4, lr}
   36fcc:	bl	12314 <malloc@plt>
   36fd0:	cmp	r0, #0
   36fd4:	addne	r3, r0, #8
   36fd8:	rsbne	r2, r0, #8
   36fdc:	bicne	r3, r3, #15
   36fe0:	moveq	r0, #0
   36fe4:	addne	r3, r3, r2
   36fe8:	addne	r0, r0, r3
   36fec:	strbne	r3, [r0, #-1]
   36ff0:	pop	{r4, pc}
   36ff4:	mov	r0, #0
   36ff8:	bx	lr
   36ffc:	tst	r0, #7
   37000:	beq	3700c <__assert_fail@plt+0x24920>
   37004:	push	{r4, lr}
   37008:	bl	12698 <abort@plt>
   3700c:	tst	r0, #8
   37010:	bxeq	lr
   37014:	ldrb	r3, [r0, #-1]
   37018:	sub	r0, r0, r3
   3701c:	b	284c4 <__assert_fail@plt+0x15dd8>
   37020:	push	{r4, lr}
   37024:	mov	r4, r0
   37028:	bl	12074 <wcwidth@plt>
   3702c:	cmp	r0, #0
   37030:	popge	{r4, pc}
   37034:	mov	r0, r4
   37038:	bl	121dc <iswcntrl@plt>
   3703c:	clz	r0, r0
   37040:	lsr	r0, r0, #5
   37044:	pop	{r4, pc}
   37048:	mov	r3, r1
   3704c:	push	{r4, r5, r6, lr}
   37050:	mov	r5, r1
   37054:	mov	r4, r0
   37058:	ldr	r1, [r3], #16
   3705c:	cmp	r1, r3
   37060:	strne	r1, [r0]
   37064:	bne	3707c <__assert_fail@plt+0x24990>
   37068:	add	r3, r0, #16
   3706c:	ldr	r2, [r5, #4]
   37070:	mov	r0, r3
   37074:	bl	120f8 <memcpy@plt>
   37078:	str	r0, [r4]
   3707c:	ldr	r3, [r5, #4]
   37080:	str	r3, [r4, #4]
   37084:	ldrb	r3, [r5, #8]
   37088:	cmp	r3, #0
   3708c:	strb	r3, [r4, #8]
   37090:	ldrne	r3, [r5, #12]
   37094:	strne	r3, [r4, #12]
   37098:	pop	{r4, r5, r6, pc}
   3709c:	ldr	r3, [pc, #20]	; 370b8 <__assert_fail@plt+0x249cc>
   370a0:	lsr	r2, r0, #5
   370a4:	and	r0, r0, #31
   370a8:	ldr	r3, [r3, r2, lsl #2]
   370ac:	lsr	r0, r3, r0
   370b0:	and	r0, r0, #1
   370b4:	bx	lr
   370b8:	andeq	sp, r3, r8, lsl #5
   370bc:	push	{r4, r5, lr}
   370c0:	sub	sp, sp, #60	; 0x3c
   370c4:	mov	r4, r0
   370c8:	bl	12260 <__ctype_get_mb_cur_max@plt>
   370cc:	cmp	r0, #1
   370d0:	bls	37138 <__assert_fail@plt+0x24a4c>
   370d4:	str	r4, [sp, #16]
   370d8:	mov	r4, #0
   370dc:	mov	r2, #0
   370e0:	mov	r3, #0
   370e4:	mov	r5, r4
   370e8:	strb	r4, [sp]
   370ec:	strd	r2, [sp, #4]
   370f0:	strb	r4, [sp, #12]
   370f4:	mov	r0, sp
   370f8:	bl	22080 <__assert_fail@plt+0xf994>
   370fc:	ldrb	r3, [sp, #24]
   37100:	cmp	r3, #0
   37104:	beq	37120 <__assert_fail@plt+0x24a34>
   37108:	ldr	r3, [sp, #28]
   3710c:	cmp	r3, #0
   37110:	bne	37120 <__assert_fail@plt+0x24a34>
   37114:	mov	r0, r4
   37118:	add	sp, sp, #60	; 0x3c
   3711c:	pop	{r4, r5, pc}
   37120:	ldrd	r2, [sp, #16]
   37124:	add	r4, r4, #1
   37128:	strb	r5, [sp, #12]
   3712c:	add	r3, r3, r2
   37130:	str	r3, [sp, #16]
   37134:	b	370f4 <__assert_fail@plt+0x24a08>
   37138:	mov	r0, r4
   3713c:	bl	123bc <strlen@plt>
   37140:	mov	r4, r0
   37144:	b	37114 <__assert_fail@plt+0x24a28>
   37148:	orr	r2, r2, #540672	; 0x84000
   3714c:	push	{r4, r5, r6, r7, r8, lr}
   37150:	mov	r5, r3
   37154:	orr	r2, r2, #2304	; 0x900
   37158:	bl	226f0 <__assert_fail@plt+0x10004>
   3715c:	subs	r6, r0, #0
   37160:	movlt	r4, #0
   37164:	blt	37190 <__assert_fail@plt+0x24aa4>
   37168:	bl	125a8 <fdopendir@plt>
   3716c:	subs	r4, r0, #0
   37170:	strne	r6, [r5]
   37174:	bne	37190 <__assert_fail@plt+0x24aa4>
   37178:	bl	12404 <__errno_location@plt>
   3717c:	mov	r5, r0
   37180:	mov	r0, r6
   37184:	ldr	r7, [r5]
   37188:	bl	126a4 <close@plt>
   3718c:	str	r7, [r5]
   37190:	mov	r0, r4
   37194:	pop	{r4, r5, r6, r7, r8, pc}
   37198:	push	{r4, r5, r6, lr}
   3719c:	mov	r5, r1
   371a0:	mov	r1, #0
   371a4:	mov	r4, r2
   371a8:	bl	12518 <setlocale@plt>
   371ac:	subs	r6, r0, #0
   371b0:	bne	371c4 <__assert_fail@plt+0x24ad8>
   371b4:	cmp	r4, #0
   371b8:	mov	r0, #22
   371bc:	strbne	r6, [r5]
   371c0:	pop	{r4, r5, r6, pc}
   371c4:	bl	123bc <strlen@plt>
   371c8:	cmp	r4, r0
   371cc:	bls	371e8 <__assert_fail@plt+0x24afc>
   371d0:	add	r2, r0, #1
   371d4:	mov	r1, r6
   371d8:	mov	r0, r5
   371dc:	bl	120f8 <memcpy@plt>
   371e0:	mov	r0, #0
   371e4:	pop	{r4, r5, r6, pc}
   371e8:	cmp	r4, #0
   371ec:	beq	3720c <__assert_fail@plt+0x24b20>
   371f0:	sub	r4, r4, #1
   371f4:	mov	r1, r6
   371f8:	mov	r2, r4
   371fc:	mov	r0, r5
   37200:	bl	120f8 <memcpy@plt>
   37204:	mov	r3, #0
   37208:	strb	r3, [r5, r4]
   3720c:	mov	r0, #34	; 0x22
   37210:	pop	{r4, r5, r6, pc}
   37214:	mov	r1, #0
   37218:	b	12518 <setlocale@plt>
   3721c:	eor	r1, r1, #-2147483648	; 0x80000000
   37220:	b	37228 <__assert_fail@plt+0x24b3c>
   37224:	eor	r3, r3, #-2147483648	; 0x80000000
   37228:	push	{r4, r5, lr}
   3722c:	lsl	r4, r1, #1
   37230:	lsl	r5, r3, #1
   37234:	teq	r4, r5
   37238:	teqeq	r0, r2
   3723c:	orrsne	ip, r4, r0
   37240:	orrsne	ip, r5, r2
   37244:	mvnsne	ip, r4, asr #21
   37248:	mvnsne	ip, r5, asr #21
   3724c:	beq	37438 <__assert_fail@plt+0x24d4c>
   37250:	lsr	r4, r4, #21
   37254:	rsbs	r5, r4, r5, lsr #21
   37258:	rsblt	r5, r5, #0
   3725c:	ble	3727c <__assert_fail@plt+0x24b90>
   37260:	add	r4, r4, r5
   37264:	eor	r2, r0, r2
   37268:	eor	r3, r1, r3
   3726c:	eor	r0, r2, r0
   37270:	eor	r1, r3, r1
   37274:	eor	r2, r0, r2
   37278:	eor	r3, r1, r3
   3727c:	cmp	r5, #54	; 0x36
   37280:	pophi	{r4, r5, pc}
   37284:	tst	r1, #-2147483648	; 0x80000000
   37288:	lsl	r1, r1, #12
   3728c:	mov	ip, #1048576	; 0x100000
   37290:	orr	r1, ip, r1, lsr #12
   37294:	beq	372a0 <__assert_fail@plt+0x24bb4>
   37298:	rsbs	r0, r0, #0
   3729c:	rsc	r1, r1, #0
   372a0:	tst	r3, #-2147483648	; 0x80000000
   372a4:	lsl	r3, r3, #12
   372a8:	orr	r3, ip, r3, lsr #12
   372ac:	beq	372b8 <__assert_fail@plt+0x24bcc>
   372b0:	rsbs	r2, r2, #0
   372b4:	rsc	r3, r3, #0
   372b8:	teq	r4, r5
   372bc:	beq	37420 <__assert_fail@plt+0x24d34>
   372c0:	sub	r4, r4, #1
   372c4:	rsbs	lr, r5, #32
   372c8:	blt	372e4 <__assert_fail@plt+0x24bf8>
   372cc:	lsl	ip, r2, lr
   372d0:	adds	r0, r0, r2, lsr r5
   372d4:	adc	r1, r1, #0
   372d8:	adds	r0, r0, r3, lsl lr
   372dc:	adcs	r1, r1, r3, asr r5
   372e0:	b	37300 <__assert_fail@plt+0x24c14>
   372e4:	sub	r5, r5, #32
   372e8:	add	lr, lr, #32
   372ec:	cmp	r2, #1
   372f0:	lsl	ip, r3, lr
   372f4:	orrcs	ip, ip, #2
   372f8:	adds	r0, r0, r3, asr r5
   372fc:	adcs	r1, r1, r3, asr #31
   37300:	and	r5, r1, #-2147483648	; 0x80000000
   37304:	bpl	37314 <__assert_fail@plt+0x24c28>
   37308:	rsbs	ip, ip, #0
   3730c:	rscs	r0, r0, #0
   37310:	rsc	r1, r1, #0
   37314:	cmp	r1, #1048576	; 0x100000
   37318:	bcc	37358 <__assert_fail@plt+0x24c6c>
   3731c:	cmp	r1, #2097152	; 0x200000
   37320:	bcc	37340 <__assert_fail@plt+0x24c54>
   37324:	lsrs	r1, r1, #1
   37328:	rrxs	r0, r0
   3732c:	rrx	ip, ip
   37330:	add	r4, r4, #1
   37334:	lsl	r2, r4, #21
   37338:	cmn	r2, #4194304	; 0x400000
   3733c:	bcs	37498 <__assert_fail@plt+0x24dac>
   37340:	cmp	ip, #-2147483648	; 0x80000000
   37344:	lsrseq	ip, r0, #1
   37348:	adcs	r0, r0, #0
   3734c:	adc	r1, r1, r4, lsl #20
   37350:	orr	r1, r1, r5
   37354:	pop	{r4, r5, pc}
   37358:	lsls	ip, ip, #1
   3735c:	adcs	r0, r0, r0
   37360:	adc	r1, r1, r1
   37364:	tst	r1, #1048576	; 0x100000
   37368:	sub	r4, r4, #1
   3736c:	bne	37340 <__assert_fail@plt+0x24c54>
   37370:	teq	r1, #0
   37374:	moveq	r1, r0
   37378:	moveq	r0, #0
   3737c:	clz	r3, r1
   37380:	addeq	r3, r3, #32
   37384:	sub	r3, r3, #11
   37388:	subs	r2, r3, #32
   3738c:	bge	373b0 <__assert_fail@plt+0x24cc4>
   37390:	adds	r2, r2, #12
   37394:	ble	373ac <__assert_fail@plt+0x24cc0>
   37398:	add	ip, r2, #20
   3739c:	rsb	r2, r2, #12
   373a0:	lsl	r0, r1, ip
   373a4:	lsr	r1, r1, r2
   373a8:	b	373c0 <__assert_fail@plt+0x24cd4>
   373ac:	add	r2, r2, #20
   373b0:	rsble	ip, r2, #32
   373b4:	lsl	r1, r1, r2
   373b8:	orrle	r1, r1, r0, lsr ip
   373bc:	lslle	r0, r0, r2
   373c0:	subs	r4, r4, r3
   373c4:	addge	r1, r1, r4, lsl #20
   373c8:	orrge	r1, r1, r5
   373cc:	popge	{r4, r5, pc}
   373d0:	mvn	r4, r4
   373d4:	subs	r4, r4, #31
   373d8:	bge	37414 <__assert_fail@plt+0x24d28>
   373dc:	adds	r4, r4, #12
   373e0:	bgt	373fc <__assert_fail@plt+0x24d10>
   373e4:	add	r4, r4, #20
   373e8:	rsb	r2, r4, #32
   373ec:	lsr	r0, r0, r4
   373f0:	orr	r0, r0, r1, lsl r2
   373f4:	orr	r1, r5, r1, lsr r4
   373f8:	pop	{r4, r5, pc}
   373fc:	rsb	r4, r4, #12
   37400:	rsb	r2, r4, #32
   37404:	lsr	r0, r0, r2
   37408:	orr	r0, r0, r1, lsl r4
   3740c:	mov	r1, r5
   37410:	pop	{r4, r5, pc}
   37414:	lsr	r0, r1, r4
   37418:	mov	r1, r5
   3741c:	pop	{r4, r5, pc}
   37420:	teq	r4, #0
   37424:	eor	r3, r3, #1048576	; 0x100000
   37428:	eoreq	r1, r1, #1048576	; 0x100000
   3742c:	addeq	r4, r4, #1
   37430:	subne	r5, r5, #1
   37434:	b	372c0 <__assert_fail@plt+0x24bd4>
   37438:	mvns	ip, r4, asr #21
   3743c:	mvnsne	ip, r5, asr #21
   37440:	beq	374a8 <__assert_fail@plt+0x24dbc>
   37444:	teq	r4, r5
   37448:	teqeq	r0, r2
   3744c:	beq	37460 <__assert_fail@plt+0x24d74>
   37450:	orrs	ip, r4, r0
   37454:	moveq	r1, r3
   37458:	moveq	r0, r2
   3745c:	pop	{r4, r5, pc}
   37460:	teq	r1, r3
   37464:	movne	r1, #0
   37468:	movne	r0, #0
   3746c:	popne	{r4, r5, pc}
   37470:	lsrs	ip, r4, #21
   37474:	bne	37488 <__assert_fail@plt+0x24d9c>
   37478:	lsls	r0, r0, #1
   3747c:	adcs	r1, r1, r1
   37480:	orrcs	r1, r1, #-2147483648	; 0x80000000
   37484:	pop	{r4, r5, pc}
   37488:	adds	r4, r4, #4194304	; 0x400000
   3748c:	addcc	r1, r1, #1048576	; 0x100000
   37490:	popcc	{r4, r5, pc}
   37494:	and	r5, r1, #-2147483648	; 0x80000000
   37498:	orr	r1, r5, #2130706432	; 0x7f000000
   3749c:	orr	r1, r1, #15728640	; 0xf00000
   374a0:	mov	r0, #0
   374a4:	pop	{r4, r5, pc}
   374a8:	mvns	ip, r4, asr #21
   374ac:	movne	r1, r3
   374b0:	movne	r0, r2
   374b4:	mvnseq	ip, r5, asr #21
   374b8:	movne	r3, r1
   374bc:	movne	r2, r0
   374c0:	orrs	r4, r0, r1, lsl #12
   374c4:	orrseq	r5, r2, r3, lsl #12
   374c8:	teqeq	r1, r3
   374cc:	orrne	r1, r1, #524288	; 0x80000
   374d0:	pop	{r4, r5, pc}
   374d4:	teq	r0, #0
   374d8:	moveq	r1, #0
   374dc:	bxeq	lr
   374e0:	push	{r4, r5, lr}
   374e4:	mov	r4, #1024	; 0x400
   374e8:	add	r4, r4, #50	; 0x32
   374ec:	mov	r5, #0
   374f0:	mov	r1, #0
   374f4:	b	37370 <__assert_fail@plt+0x24c84>
   374f8:	teq	r0, #0
   374fc:	moveq	r1, #0
   37500:	bxeq	lr
   37504:	push	{r4, r5, lr}
   37508:	mov	r4, #1024	; 0x400
   3750c:	add	r4, r4, #50	; 0x32
   37510:	ands	r5, r0, #-2147483648	; 0x80000000
   37514:	rsbmi	r0, r0, #0
   37518:	mov	r1, #0
   3751c:	b	37370 <__assert_fail@plt+0x24c84>
   37520:	lsls	r2, r0, #1
   37524:	asr	r1, r2, #3
   37528:	rrx	r1, r1
   3752c:	lsl	r0, r2, #28
   37530:	andsne	r3, r2, #-16777216	; 0xff000000
   37534:	teqne	r3, #-16777216	; 0xff000000
   37538:	eorne	r1, r1, #939524096	; 0x38000000
   3753c:	bxne	lr
   37540:	bics	r2, r2, #-16777216	; 0xff000000
   37544:	bxeq	lr
   37548:	teq	r3, #-16777216	; 0xff000000
   3754c:	orreq	r1, r1, #524288	; 0x80000
   37550:	bxeq	lr
   37554:	push	{r4, r5, lr}
   37558:	mov	r4, #896	; 0x380
   3755c:	and	r5, r1, #-2147483648	; 0x80000000
   37560:	bic	r1, r1, #-2147483648	; 0x80000000
   37564:	b	37370 <__assert_fail@plt+0x24c84>
   37568:	orrs	r2, r0, r1
   3756c:	bxeq	lr
   37570:	push	{r4, r5, lr}
   37574:	mov	r5, #0
   37578:	b	37598 <__assert_fail@plt+0x24eac>
   3757c:	orrs	r2, r0, r1
   37580:	bxeq	lr
   37584:	push	{r4, r5, lr}
   37588:	ands	r5, r1, #-2147483648	; 0x80000000
   3758c:	bpl	37598 <__assert_fail@plt+0x24eac>
   37590:	rsbs	r0, r0, #0
   37594:	rsc	r1, r1, #0
   37598:	mov	r4, #1024	; 0x400
   3759c:	add	r4, r4, #50	; 0x32
   375a0:	lsrs	ip, r1, #22
   375a4:	beq	37314 <__assert_fail@plt+0x24c28>
   375a8:	mov	r2, #3
   375ac:	lsrs	ip, ip, #3
   375b0:	addne	r2, r2, #3
   375b4:	lsrs	ip, ip, #3
   375b8:	addne	r2, r2, #3
   375bc:	add	r2, r2, ip, lsr #3
   375c0:	rsb	r3, r2, #32
   375c4:	lsl	ip, r0, r3
   375c8:	lsr	r0, r0, r2
   375cc:	orr	r0, r0, r1, lsl r3
   375d0:	lsr	r1, r1, r2
   375d4:	add	r4, r4, r2
   375d8:	b	37314 <__assert_fail@plt+0x24c28>
   375dc:	cmp	r3, #0
   375e0:	cmpeq	r2, #0
   375e4:	bne	37608 <__assert_fail@plt+0x24f1c>
   375e8:	cmp	r1, #0
   375ec:	movlt	r1, #-2147483648	; 0x80000000
   375f0:	movlt	r0, #0
   375f4:	blt	37604 <__assert_fail@plt+0x24f18>
   375f8:	cmpeq	r0, #0
   375fc:	mvnne	r1, #-2147483648	; 0x80000000
   37600:	mvnne	r0, #0
   37604:	b	376ec <__assert_fail@plt+0x25000>
   37608:	sub	sp, sp, #8
   3760c:	push	{sp, lr}
   37610:	cmp	r1, #0
   37614:	blt	37634 <__assert_fail@plt+0x24f48>
   37618:	cmp	r3, #0
   3761c:	blt	37668 <__assert_fail@plt+0x24f7c>
   37620:	bl	37740 <__assert_fail@plt+0x25054>
   37624:	ldr	lr, [sp, #4]
   37628:	add	sp, sp, #8
   3762c:	pop	{r2, r3}
   37630:	bx	lr
   37634:	rsbs	r0, r0, #0
   37638:	sbc	r1, r1, r1, lsl #1
   3763c:	cmp	r3, #0
   37640:	blt	3768c <__assert_fail@plt+0x24fa0>
   37644:	bl	37740 <__assert_fail@plt+0x25054>
   37648:	ldr	lr, [sp, #4]
   3764c:	add	sp, sp, #8
   37650:	pop	{r2, r3}
   37654:	rsbs	r0, r0, #0
   37658:	sbc	r1, r1, r1, lsl #1
   3765c:	rsbs	r2, r2, #0
   37660:	sbc	r3, r3, r3, lsl #1
   37664:	bx	lr
   37668:	rsbs	r2, r2, #0
   3766c:	sbc	r3, r3, r3, lsl #1
   37670:	bl	37740 <__assert_fail@plt+0x25054>
   37674:	ldr	lr, [sp, #4]
   37678:	add	sp, sp, #8
   3767c:	pop	{r2, r3}
   37680:	rsbs	r0, r0, #0
   37684:	sbc	r1, r1, r1, lsl #1
   37688:	bx	lr
   3768c:	rsbs	r2, r2, #0
   37690:	sbc	r3, r3, r3, lsl #1
   37694:	bl	37740 <__assert_fail@plt+0x25054>
   37698:	ldr	lr, [sp, #4]
   3769c:	add	sp, sp, #8
   376a0:	pop	{r2, r3}
   376a4:	rsbs	r2, r2, #0
   376a8:	sbc	r3, r3, r3, lsl #1
   376ac:	bx	lr
   376b0:	cmp	r3, #0
   376b4:	cmpeq	r2, #0
   376b8:	bne	376d0 <__assert_fail@plt+0x24fe4>
   376bc:	cmp	r1, #0
   376c0:	cmpeq	r0, #0
   376c4:	mvnne	r1, #0
   376c8:	mvnne	r0, #0
   376cc:	b	376ec <__assert_fail@plt+0x25000>
   376d0:	sub	sp, sp, #8
   376d4:	push	{sp, lr}
   376d8:	bl	37740 <__assert_fail@plt+0x25054>
   376dc:	ldr	lr, [sp, #4]
   376e0:	add	sp, sp, #8
   376e4:	pop	{r2, r3}
   376e8:	bx	lr
   376ec:	push	{r1, lr}
   376f0:	mov	r0, #8
   376f4:	bl	11fb4 <raise@plt>
   376f8:	pop	{r1, pc}
   376fc:	andeq	r0, r0, r0
   37700:	vmov	d6, r0, r1
   37704:	vldr	d7, [pc, #36]	; 37730 <__assert_fail@plt+0x25044>
   37708:	vldr	d5, [pc, #40]	; 37738 <__assert_fail@plt+0x2504c>
   3770c:	vmul.f64	d7, d6, d7
   37710:	vcvt.u32.f64	s14, d7
   37714:	vcvt.f64.u32	d4, s14
   37718:	vmov	r1, s14
   3771c:	vmls.f64	d6, d4, d5
   37720:	vcvt.u32.f64	s15, d6
   37724:	vmov	r0, s15
   37728:	bx	lr
   3772c:	nop			; (mov r0, r0)
   37730:	andeq	r0, r0, r0
   37734:	ldclcc	0, cr0, [r0]
   37738:	andeq	r0, r0, r0
   3773c:	mvnsmi	r0, r0
   37740:	cmp	r1, r3
   37744:	cmpeq	r0, r2
   37748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3774c:	mov	r4, r0
   37750:	movcc	r0, #0
   37754:	mov	r5, r1
   37758:	ldr	lr, [sp, #36]	; 0x24
   3775c:	movcc	r1, r0
   37760:	bcc	3785c <__assert_fail@plt+0x25170>
   37764:	cmp	r3, #0
   37768:	clzeq	ip, r2
   3776c:	clzne	ip, r3
   37770:	addeq	ip, ip, #32
   37774:	cmp	r5, #0
   37778:	clzeq	r1, r4
   3777c:	addeq	r1, r1, #32
   37780:	clzne	r1, r5
   37784:	sub	ip, ip, r1
   37788:	sub	sl, ip, #32
   3778c:	lsl	r9, r3, ip
   37790:	rsb	fp, ip, #32
   37794:	orr	r9, r9, r2, lsl sl
   37798:	orr	r9, r9, r2, lsr fp
   3779c:	lsl	r8, r2, ip
   377a0:	cmp	r5, r9
   377a4:	cmpeq	r4, r8
   377a8:	movcc	r0, #0
   377ac:	movcc	r1, r0
   377b0:	bcc	377cc <__assert_fail@plt+0x250e0>
   377b4:	mov	r0, #1
   377b8:	subs	r4, r4, r8
   377bc:	lsl	r1, r0, sl
   377c0:	orr	r1, r1, r0, lsr fp
   377c4:	lsl	r0, r0, ip
   377c8:	sbc	r5, r5, r9
   377cc:	cmp	ip, #0
   377d0:	beq	3785c <__assert_fail@plt+0x25170>
   377d4:	lsr	r6, r8, #1
   377d8:	orr	r6, r6, r9, lsl #31
   377dc:	lsr	r7, r9, #1
   377e0:	mov	r2, ip
   377e4:	b	37808 <__assert_fail@plt+0x2511c>
   377e8:	subs	r3, r4, r6
   377ec:	sbc	r8, r5, r7
   377f0:	adds	r3, r3, r3
   377f4:	adc	r8, r8, r8
   377f8:	adds	r4, r3, #1
   377fc:	adc	r5, r8, #0
   37800:	subs	r2, r2, #1
   37804:	beq	37824 <__assert_fail@plt+0x25138>
   37808:	cmp	r5, r7
   3780c:	cmpeq	r4, r6
   37810:	bcs	377e8 <__assert_fail@plt+0x250fc>
   37814:	adds	r4, r4, r4
   37818:	adc	r5, r5, r5
   3781c:	subs	r2, r2, #1
   37820:	bne	37808 <__assert_fail@plt+0x2511c>
   37824:	lsr	r3, r4, ip
   37828:	orr	r3, r3, r5, lsl fp
   3782c:	lsr	r2, r5, ip
   37830:	orr	r3, r3, r5, lsr sl
   37834:	adds	r0, r0, r4
   37838:	mov	r4, r3
   3783c:	lsl	r3, r2, ip
   37840:	orr	r3, r3, r4, lsl sl
   37844:	lsl	ip, r4, ip
   37848:	orr	r3, r3, r4, lsr fp
   3784c:	adc	r1, r1, r5
   37850:	subs	r0, r0, ip
   37854:	mov	r5, r2
   37858:	sbc	r1, r1, r3
   3785c:	cmp	lr, #0
   37860:	strdne	r4, [lr]
   37864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3786c:	mov	r7, r0
   37870:	ldr	r6, [pc, #72]	; 378c0 <__assert_fail@plt+0x251d4>
   37874:	ldr	r5, [pc, #72]	; 378c4 <__assert_fail@plt+0x251d8>
   37878:	add	r6, pc, r6
   3787c:	add	r5, pc, r5
   37880:	sub	r6, r6, r5
   37884:	mov	r8, r1
   37888:	mov	r9, r2
   3788c:	bl	11f40 <pthread_mutex_unlock@plt-0x20>
   37890:	asrs	r6, r6, #2
   37894:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37898:	mov	r4, #0
   3789c:	add	r4, r4, #1
   378a0:	ldr	r3, [r5], #4
   378a4:	mov	r2, r9
   378a8:	mov	r1, r8
   378ac:	mov	r0, r7
   378b0:	blx	r3
   378b4:	cmp	r6, r4
   378b8:	bne	3789c <__assert_fail@plt+0x251b0>
   378bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   378c0:	andeq	r6, r1, r4, lsl #13
   378c4:	andeq	r6, r1, ip, ror r6
   378c8:	bx	lr
   378cc:	ldr	r3, [pc, #12]	; 378e0 <__assert_fail@plt+0x251f4>
   378d0:	mov	r1, #0
   378d4:	add	r3, pc, r3
   378d8:	ldr	r2, [r3]
   378dc:	b	12428 <__cxa_atexit@plt>
   378e0:	andeq	r6, r1, r0, asr #19
   378e4:	mov	r2, r1
   378e8:	mov	r1, r0
   378ec:	mov	r0, #3
   378f0:	b	12650 <__xstat64@plt>
   378f4:	mov	r2, r1
   378f8:	mov	r1, r0
   378fc:	mov	r0, #3
   37900:	b	12224 <__fxstat64@plt>
   37904:	mov	r2, r1
   37908:	mov	r1, r0
   3790c:	mov	r0, #3
   37910:	b	126b0 <__lxstat64@plt>
   37914:	push	{lr}		; (str lr, [sp, #-4]!)
   37918:	sub	sp, sp, #12
   3791c:	str	r3, [sp]
   37920:	mov	r3, r2
   37924:	mov	r2, r1
   37928:	mov	r1, r0
   3792c:	mov	r0, #3
   37930:	bl	121f4 <__fxstatat64@plt>
   37934:	add	sp, sp, #12
   37938:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0003793c <.fini>:
   3793c:	push	{r3, lr}
   37940:	pop	{r3, pc}
