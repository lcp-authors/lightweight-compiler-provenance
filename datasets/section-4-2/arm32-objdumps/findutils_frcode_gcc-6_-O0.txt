
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b3c <.init>:
   10b3c:	push	{r3, lr}
   10b40:	bl	10dc0 <__assert_fail@plt+0x48>
   10b44:	pop	{r3, pc}

Disassembly of section .plt:

00010b48 <calloc@plt-0x14>:
   10b48:	push	{lr}		; (str lr, [sp, #-4]!)
   10b4c:	ldr	lr, [pc, #4]	; 10b58 <calloc@plt-0x4>
   10b50:	add	lr, pc, lr
   10b54:	ldr	pc, [lr, #8]!
   10b58:	andeq	r7, r1, r8, lsr #9

00010b5c <calloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b68 <raise@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b74 <strcmp@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1176]!	; 0x498

00010b80 <strtol@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1168]!	; 0x490

00010b8c <printf@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1160]!	; 0x488

00010b98 <fflush@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #94208	; 0x17000
   10ba0:	ldr	pc, [ip, #1152]!	; 0x480

00010ba4 <free@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #94208	; 0x17000
   10bac:	ldr	pc, [ip, #1144]!	; 0x478

00010bb0 <ferror@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #94208	; 0x17000
   10bb8:	ldr	pc, [ip, #1136]!	; 0x470

00010bbc <_exit@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #94208	; 0x17000
   10bc4:	ldr	pc, [ip, #1128]!	; 0x468

00010bc8 <memcpy@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #94208	; 0x17000
   10bd0:	ldr	pc, [ip, #1120]!	; 0x460

00010bd4 <mbsinit@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #94208	; 0x17000
   10bdc:	ldr	pc, [ip, #1112]!	; 0x458

00010be0 <memcmp@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #94208	; 0x17000
   10be8:	ldr	pc, [ip, #1104]!	; 0x450

00010bec <realloc@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #94208	; 0x17000
   10bf4:	ldr	pc, [ip, #1096]!	; 0x448

00010bf8 <iswprint@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #94208	; 0x17000
   10c00:	ldr	pc, [ip, #1088]!	; 0x440

00010c04 <fwrite@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #94208	; 0x17000
   10c0c:	ldr	pc, [ip, #1080]!	; 0x438

00010c10 <lseek64@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #94208	; 0x17000
   10c18:	ldr	pc, [ip, #1072]!	; 0x430

00010c1c <__ctype_get_mb_cur_max@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #94208	; 0x17000
   10c24:	ldr	pc, [ip, #1064]!	; 0x428

00010c28 <__fpending@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #94208	; 0x17000
   10c30:	ldr	pc, [ip, #1056]!	; 0x420

00010c34 <mbrtowc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #94208	; 0x17000
   10c3c:	ldr	pc, [ip, #1048]!	; 0x418

00010c40 <error@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #94208	; 0x17000
   10c48:	ldr	pc, [ip, #1040]!	; 0x410

00010c4c <malloc@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #94208	; 0x17000
   10c54:	ldr	pc, [ip, #1032]!	; 0x408

00010c58 <__libc_start_main@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #94208	; 0x17000
   10c60:	ldr	pc, [ip, #1024]!	; 0x400

00010c64 <__freading@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #94208	; 0x17000
   10c6c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c70 <__gmon_start__@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c7c <getopt_long@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c88 <__ctype_b_loc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #992]!	; 0x3e0

00010c94 <exit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #94208	; 0x17000
   10c9c:	ldr	pc, [ip, #984]!	; 0x3d8

00010ca0 <gettext@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #94208	; 0x17000
   10ca8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cac <strlen@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #94208	; 0x17000
   10cb4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cb8 <fprintf@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #94208	; 0x17000
   10cc0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cc4 <__errno_location@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #94208	; 0x17000
   10ccc:	ldr	pc, [ip, #952]!	; 0x3b8

00010cd0 <__cxa_atexit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cdc <memset@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #936]!	; 0x3a8

00010ce8 <fileno@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #94208	; 0x17000
   10cf0:	ldr	pc, [ip, #928]!	; 0x3a0

00010cf4 <fclose@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #94208	; 0x17000
   10cfc:	ldr	pc, [ip, #920]!	; 0x398

00010d00 <fseeko64@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #912]!	; 0x390

00010d0c <setlocale@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #904]!	; 0x388

00010d18 <strrchr@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #896]!	; 0x380

00010d24 <nl_langinfo@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #888]!	; 0x378

00010d30 <fputc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #880]!	; 0x370

00010d3c <putc@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #872]!	; 0x368

00010d48 <getdelim@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #864]!	; 0x360

00010d54 <fputs@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #856]!	; 0x358

00010d60 <strncmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #848]!	; 0x350

00010d6c <abort@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #840]!	; 0x348

00010d78 <__assert_fail@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #832]!	; 0x340

Disassembly of section .text:

00010d84 <.text>:
   10d84:	mov	fp, #0
   10d88:	mov	lr, #0
   10d8c:	pop	{r1}		; (ldr r1, [sp], #4)
   10d90:	mov	r2, sp
   10d94:	push	{r2}		; (str r2, [sp, #-4]!)
   10d98:	push	{r0}		; (str r0, [sp, #-4]!)
   10d9c:	ldr	ip, [pc, #16]	; 10db4 <__assert_fail@plt+0x3c>
   10da0:	push	{ip}		; (str ip, [sp, #-4]!)
   10da4:	ldr	r0, [pc, #12]	; 10db8 <__assert_fail@plt+0x40>
   10da8:	ldr	r3, [pc, #12]	; 10dbc <__assert_fail@plt+0x44>
   10dac:	bl	10c58 <__libc_start_main@plt>
   10db0:	bl	10d6c <abort@plt>
   10db4:	muleq	r1, r0, r8
   10db8:	strdeq	r1, [r1], -r0
   10dbc:	andeq	r6, r1, r0, lsr r8
   10dc0:	ldr	r3, [pc, #20]	; 10ddc <__assert_fail@plt+0x64>
   10dc4:	ldr	r2, [pc, #20]	; 10de0 <__assert_fail@plt+0x68>
   10dc8:	add	r3, pc, r3
   10dcc:	ldr	r2, [r3, r2]
   10dd0:	cmp	r2, #0
   10dd4:	bxeq	lr
   10dd8:	b	10c70 <__gmon_start__@plt>
   10ddc:	andeq	r7, r1, r0, lsr r2
   10de0:	andeq	r0, r0, r4, asr #1
   10de4:	ldr	r3, [pc, #28]	; 10e08 <__assert_fail@plt+0x90>
   10de8:	ldr	r0, [pc, #28]	; 10e0c <__assert_fail@plt+0x94>
   10dec:	sub	r3, r3, r0
   10df0:	cmp	r3, #6
   10df4:	bxls	lr
   10df8:	ldr	r3, [pc, #16]	; 10e10 <__assert_fail@plt+0x98>
   10dfc:	cmp	r3, #0
   10e00:	bxeq	lr
   10e04:	bx	r3
   10e08:	andeq	r8, r2, fp, lsl r1
   10e0c:	andeq	r8, r2, r8, lsl r1
   10e10:	andeq	r0, r0, r0
   10e14:	ldr	r1, [pc, #36]	; 10e40 <__assert_fail@plt+0xc8>
   10e18:	ldr	r0, [pc, #36]	; 10e44 <__assert_fail@plt+0xcc>
   10e1c:	sub	r1, r1, r0
   10e20:	asr	r1, r1, #2
   10e24:	add	r1, r1, r1, lsr #31
   10e28:	asrs	r1, r1, #1
   10e2c:	bxeq	lr
   10e30:	ldr	r3, [pc, #16]	; 10e48 <__assert_fail@plt+0xd0>
   10e34:	cmp	r3, #0
   10e38:	bxeq	lr
   10e3c:	bx	r3
   10e40:	andeq	r8, r2, r8, lsl r1
   10e44:	andeq	r8, r2, r8, lsl r1
   10e48:	andeq	r0, r0, r0
   10e4c:	push	{r4, lr}
   10e50:	ldr	r4, [pc, #24]	; 10e70 <__assert_fail@plt+0xf8>
   10e54:	ldrb	r3, [r4]
   10e58:	cmp	r3, #0
   10e5c:	popne	{r4, pc}
   10e60:	bl	10de4 <__assert_fail@plt+0x6c>
   10e64:	mov	r3, #1
   10e68:	strb	r3, [r4]
   10e6c:	pop	{r4, pc}
   10e70:	andeq	r8, r2, ip, lsr r1
   10e74:	ldr	r0, [pc, #40]	; 10ea4 <__assert_fail@plt+0x12c>
   10e78:	ldr	r3, [r0]
   10e7c:	cmp	r3, #0
   10e80:	bne	10e88 <__assert_fail@plt+0x110>
   10e84:	b	10e14 <__assert_fail@plt+0x9c>
   10e88:	ldr	r3, [pc, #24]	; 10ea8 <__assert_fail@plt+0x130>
   10e8c:	cmp	r3, #0
   10e90:	beq	10e84 <__assert_fail@plt+0x10c>
   10e94:	push	{r4, lr}
   10e98:	blx	r3
   10e9c:	pop	{r4, lr}
   10ea0:	b	10e14 <__assert_fail@plt+0x9c>
   10ea4:	andeq	r7, r2, r4, lsl pc
   10ea8:	andeq	r0, r0, r0
   10eac:	push	{fp, lr}
   10eb0:	add	fp, sp, #4
   10eb4:	sub	sp, sp, #8
   10eb8:	str	r0, [fp, #-8]
   10ebc:	str	r1, [fp, #-12]
   10ec0:	ldr	r3, [fp, #-8]
   10ec4:	cmp	r3, #32768	; 0x8000
   10ec8:	blt	10ee0 <__assert_fail@plt+0x168>
   10ecc:	ldr	r3, [pc, #124]	; 10f50 <__assert_fail@plt+0x1d8>
   10ed0:	mov	r2, #104	; 0x68
   10ed4:	ldr	r1, [pc, #120]	; 10f54 <__assert_fail@plt+0x1dc>
   10ed8:	ldr	r0, [pc, #120]	; 10f58 <__assert_fail@plt+0x1e0>
   10edc:	bl	10d78 <__assert_fail@plt>
   10ee0:	ldr	r3, [fp, #-8]
   10ee4:	cmn	r3, #32768	; 0x8000
   10ee8:	bge	10f00 <__assert_fail@plt+0x188>
   10eec:	ldr	r3, [pc, #92]	; 10f50 <__assert_fail@plt+0x1d8>
   10ef0:	mov	r2, #105	; 0x69
   10ef4:	ldr	r1, [pc, #88]	; 10f54 <__assert_fail@plt+0x1dc>
   10ef8:	ldr	r0, [pc, #92]	; 10f5c <__assert_fail@plt+0x1e4>
   10efc:	bl	10d78 <__assert_fail@plt>
   10f00:	ldr	r3, [fp, #-8]
   10f04:	asr	r3, r3, #8
   10f08:	ldr	r1, [fp, #-12]
   10f0c:	mov	r0, r3
   10f10:	bl	10d3c <putc@plt>
   10f14:	mov	r3, r0
   10f18:	cmn	r3, #1
   10f1c:	beq	10f40 <__assert_fail@plt+0x1c8>
   10f20:	ldr	r1, [fp, #-12]
   10f24:	ldr	r0, [fp, #-8]
   10f28:	bl	10d3c <putc@plt>
   10f2c:	mov	r3, r0
   10f30:	cmn	r3, #1
   10f34:	beq	10f40 <__assert_fail@plt+0x1c8>
   10f38:	mov	r3, #1
   10f3c:	b	10f44 <__assert_fail@plt+0x1cc>
   10f40:	mov	r3, #0
   10f44:	mov	r0, r3
   10f48:	sub	sp, fp, #4
   10f4c:	pop	{fp, pc}
   10f50:	andeq	r6, r1, r4, lsl fp
   10f54:			; <UNDEFINED> instruction: 0x000168b8
   10f58:	andeq	r6, r1, r4, asr #17
   10f5c:	ldrdeq	r6, [r1], -r4
   10f60:	push	{r4, fp}
   10f64:	add	fp, sp, #4
   10f68:	sub	sp, sp, #16
   10f6c:	str	r0, [fp, #-16]
   10f70:	str	r1, [fp, #-20]	; 0xffffffec
   10f74:	mvn	r3, #-2147483648	; 0x80000000
   10f78:	str	r3, [fp, #-8]
   10f7c:	ldr	r4, [fp, #-16]
   10f80:	b	10fb4 <__assert_fail@plt+0x23c>
   10f84:	ldr	r3, [fp, #-8]
   10f88:	sub	r3, r3, #1
   10f8c:	str	r3, [fp, #-8]
   10f90:	ldr	r3, [fp, #-8]
   10f94:	cmp	r3, #0
   10f98:	beq	10fe0 <__assert_fail@plt+0x268>
   10f9c:	ldr	r3, [fp, #-16]
   10fa0:	add	r3, r3, #1
   10fa4:	str	r3, [fp, #-16]
   10fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   10fac:	add	r3, r3, #1
   10fb0:	str	r3, [fp, #-20]	; 0xffffffec
   10fb4:	ldr	r3, [fp, #-16]
   10fb8:	ldrb	r2, [r3]
   10fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   10fc0:	ldrb	r3, [r3]
   10fc4:	cmp	r2, r3
   10fc8:	bne	10fe4 <__assert_fail@plt+0x26c>
   10fcc:	ldr	r3, [fp, #-16]
   10fd0:	ldrb	r3, [r3]
   10fd4:	cmp	r3, #0
   10fd8:	bne	10f84 <__assert_fail@plt+0x20c>
   10fdc:	b	10fe4 <__assert_fail@plt+0x26c>
   10fe0:	nop			; (mov r0, r0)
   10fe4:	ldr	r3, [fp, #-16]
   10fe8:	mov	r2, r4
   10fec:	sub	r3, r3, r2
   10ff0:	mov	r0, r3
   10ff4:	sub	sp, fp, #4
   10ff8:	pop	{r4, fp}
   10ffc:	bx	lr
   11000:	push	{r4, fp, lr}
   11004:	add	fp, sp, #8
   11008:	sub	sp, sp, #12
   1100c:	str	r0, [fp, #-16]
   11010:	ldr	r3, [fp, #-16]
   11014:	cmp	r3, #0
   11018:	beq	1104c <__assert_fail@plt+0x2d4>
   1101c:	ldr	r3, [pc, #116]	; 11098 <__assert_fail@plt+0x320>
   11020:	ldr	r4, [r3]
   11024:	ldr	r0, [pc, #112]	; 1109c <__assert_fail@plt+0x324>
   11028:	bl	10ca0 <gettext@plt>
   1102c:	mov	r1, r0
   11030:	ldr	r3, [pc, #104]	; 110a0 <__assert_fail@plt+0x328>
   11034:	ldr	r3, [r3]
   11038:	mov	r2, r3
   1103c:	mov	r0, r4
   11040:	bl	10cb8 <fprintf@plt>
   11044:	ldr	r0, [fp, #-16]
   11048:	bl	10c94 <exit@plt>
   1104c:	ldr	r3, [pc, #80]	; 110a4 <__assert_fail@plt+0x32c>
   11050:	ldr	r4, [r3]
   11054:	ldr	r0, [pc, #76]	; 110a8 <__assert_fail@plt+0x330>
   11058:	bl	10ca0 <gettext@plt>
   1105c:	mov	r1, r0
   11060:	ldr	r3, [pc, #56]	; 110a0 <__assert_fail@plt+0x328>
   11064:	ldr	r3, [r3]
   11068:	mov	r2, r3
   1106c:	mov	r0, r4
   11070:	bl	10cb8 <fprintf@plt>
   11074:	ldr	r3, [pc, #40]	; 110a4 <__assert_fail@plt+0x32c>
   11078:	ldr	r2, [r3]
   1107c:	ldr	r3, [pc, #28]	; 110a0 <__assert_fail@plt+0x328>
   11080:	ldr	r3, [r3]
   11084:	mov	r1, r3
   11088:	mov	r0, r2
   1108c:	bl	11780 <__assert_fail@plt+0xa08>
   11090:	ldr	r0, [fp, #-16]
   11094:	bl	10c94 <exit@plt>
   11098:	andeq	r8, r2, r8, lsr #2
   1109c:	andeq	r6, r1, ip, lsr r9
   110a0:	andeq	r8, r2, r8, asr #2
   110a4:	andeq	r8, r2, r4, lsr r1
   110a8:	andeq	r6, r1, r4, ror #18
   110ac:	push	{fp, lr}
   110b0:	add	fp, sp, #4
   110b4:	sub	sp, sp, #24
   110b8:	str	r0, [fp, #-16]
   110bc:	bl	10cc4 <__errno_location@plt>
   110c0:	mov	r2, r0
   110c4:	mov	r3, #0
   110c8:	str	r3, [r2]
   110cc:	sub	r3, fp, #12
   110d0:	mov	r2, #10
   110d4:	mov	r1, r3
   110d8:	ldr	r0, [fp, #-16]
   110dc:	bl	10b80 <strtol@plt>
   110e0:	str	r0, [fp, #-8]
   110e4:	ldr	r3, [fp, #-8]
   110e8:	cmp	r3, #0
   110ec:	bne	11120 <__assert_fail@plt+0x3a8>
   110f0:	ldr	r2, [fp, #-12]
   110f4:	ldr	r3, [pc, #176]	; 111ac <__assert_fail@plt+0x434>
   110f8:	ldr	r3, [r3]
   110fc:	cmp	r2, r3
   11100:	bne	11120 <__assert_fail@plt+0x3a8>
   11104:	ldr	r0, [pc, #164]	; 111b0 <__assert_fail@plt+0x438>
   11108:	bl	10ca0 <gettext@plt>
   1110c:	mov	r3, r0
   11110:	mov	r2, r3
   11114:	mov	r1, #0
   11118:	mov	r0, #1
   1111c:	bl	10c40 <error@plt>
   11120:	ldr	r3, [fp, #-8]
   11124:	cmp	r3, #-2147483648	; 0x80000000
   11128:	beq	11138 <__assert_fail@plt+0x3c0>
   1112c:	ldr	r3, [fp, #-8]
   11130:	cmn	r3, #-2147483647	; 0x80000001
   11134:	bne	11168 <__assert_fail@plt+0x3f0>
   11138:	bl	10cc4 <__errno_location@plt>
   1113c:	mov	r3, r0
   11140:	ldr	r3, [r3]
   11144:	cmp	r3, #0
   11148:	beq	11168 <__assert_fail@plt+0x3f0>
   1114c:	ldr	r0, [pc, #96]	; 111b4 <__assert_fail@plt+0x43c>
   11150:	bl	10ca0 <gettext@plt>
   11154:	mov	r2, r0
   11158:	ldr	r3, [fp, #-16]
   1115c:	mov	r1, #0
   11160:	mov	r0, #1
   11164:	bl	10c40 <error@plt>
   11168:	ldr	r3, [fp, #-12]
   1116c:	ldrb	r3, [r3]
   11170:	cmp	r3, #0
   11174:	beq	1119c <__assert_fail@plt+0x424>
   11178:	ldr	r0, [pc, #56]	; 111b8 <__assert_fail@plt+0x440>
   1117c:	bl	10ca0 <gettext@plt>
   11180:	mov	r2, r0
   11184:	ldr	r3, [fp, #-12]
   11188:	str	r3, [sp]
   1118c:	ldr	r3, [fp, #-16]
   11190:	mov	r1, #0
   11194:	mov	r0, #1
   11198:	bl	10c40 <error@plt>
   1119c:	ldr	r3, [fp, #-8]
   111a0:	mov	r0, r3
   111a4:	sub	sp, fp, #4
   111a8:	pop	{fp, pc}
   111ac:	andeq	r8, r2, r8, lsr r1
   111b0:	muleq	r1, r4, r9
   111b4:	ldrdeq	r6, [r1], -r0
   111b8:	andeq	r6, r1, r4, lsl #20
   111bc:	push	{r4, r5, fp, lr}
   111c0:	add	fp, sp, #12
   111c4:	bl	10cc4 <__errno_location@plt>
   111c8:	mov	r3, r0
   111cc:	ldr	r4, [r3]
   111d0:	ldr	r0, [pc, #20]	; 111ec <__assert_fail@plt+0x474>
   111d4:	bl	10ca0 <gettext@plt>
   111d8:	mov	r3, r0
   111dc:	mov	r2, r3
   111e0:	mov	r1, r4
   111e4:	mov	r0, #1
   111e8:	bl	10c40 <error@plt>
   111ec:	andeq	r6, r1, r0, lsr sl
   111f0:	push	{r4, fp, lr}
   111f4:	add	fp, sp, #8
   111f8:	sub	sp, sp, #76	; 0x4c
   111fc:	str	r0, [fp, #-72]	; 0xffffffb8
   11200:	str	r1, [fp, #-76]	; 0xffffffb4
   11204:	mov	r3, #10
   11208:	str	r3, [fp, #-36]	; 0xffffffdc
   1120c:	mov	r3, #0
   11210:	str	r3, [fp, #-40]	; 0xffffffd8
   11214:	mov	r3, #0
   11218:	str	r3, [fp, #-44]	; 0xffffffd4
   1121c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11220:	ldr	r3, [r3]
   11224:	cmp	r3, #0
   11228:	beq	11240 <__assert_fail@plt+0x4c8>
   1122c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11230:	ldr	r3, [r3]
   11234:	mov	r0, r3
   11238:	bl	11984 <__assert_fail@plt+0xc0c>
   1123c:	b	11248 <__assert_fail@plt+0x4d0>
   11240:	ldr	r0, [pc, #1112]	; 116a0 <__assert_fail@plt+0x928>
   11244:	bl	11984 <__assert_fail@plt+0xc0c>
   11248:	ldr	r0, [pc, #1108]	; 116a4 <__assert_fail@plt+0x92c>
   1124c:	bl	16894 <__assert_fail@plt+0x5b1c>
   11250:	mov	r3, r0
   11254:	cmp	r3, #0
   11258:	beq	11284 <__assert_fail@plt+0x50c>
   1125c:	bl	10cc4 <__errno_location@plt>
   11260:	mov	r3, r0
   11264:	ldr	r4, [r3]
   11268:	ldr	r0, [pc, #1080]	; 116a8 <__assert_fail@plt+0x930>
   1126c:	bl	10ca0 <gettext@plt>
   11270:	mov	r3, r0
   11274:	mov	r2, r3
   11278:	mov	r1, r4
   1127c:	mov	r0, #1
   11280:	bl	10c40 <error@plt>
   11284:	ldr	r3, [pc, #1056]	; 116ac <__assert_fail@plt+0x934>
   11288:	str	r3, [fp, #-20]	; 0xffffffec
   1128c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11290:	str	r3, [fp, #-68]	; 0xffffffbc
   11294:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11298:	mov	r0, r3
   1129c:	bl	148cc <__assert_fail@plt+0x3b54>
   112a0:	mov	r3, r0
   112a4:	str	r3, [fp, #-64]	; 0xffffffc0
   112a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   112ac:	bl	148cc <__assert_fail@plt+0x3b54>
   112b0:	mov	r3, r0
   112b4:	str	r3, [fp, #-16]
   112b8:	ldr	r3, [fp, #-16]
   112bc:	mov	r2, #0
   112c0:	strb	r2, [r3]
   112c4:	mov	r3, #0
   112c8:	str	r3, [fp, #-28]	; 0xffffffe4
   112cc:	b	11380 <__assert_fail@plt+0x608>
   112d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   112d4:	cmp	r3, #83	; 0x53
   112d8:	beq	11310 <__assert_fail@plt+0x598>
   112dc:	cmp	r3, #83	; 0x53
   112e0:	bgt	112f0 <__assert_fail@plt+0x578>
   112e4:	cmp	r3, #48	; 0x30
   112e8:	beq	11304 <__assert_fail@plt+0x58c>
   112ec:	b	11378 <__assert_fail@plt+0x600>
   112f0:	cmp	r3, #104	; 0x68
   112f4:	beq	11360 <__assert_fail@plt+0x5e8>
   112f8:	cmp	r3, #118	; 0x76
   112fc:	beq	11368 <__assert_fail@plt+0x5f0>
   11300:	b	11378 <__assert_fail@plt+0x600>
   11304:	mov	r3, #0
   11308:	str	r3, [fp, #-36]	; 0xffffffdc
   1130c:	b	11380 <__assert_fail@plt+0x608>
   11310:	mov	r3, #1
   11314:	str	r3, [fp, #-40]	; 0xffffffd8
   11318:	ldr	r3, [pc, #912]	; 116b0 <__assert_fail@plt+0x938>
   1131c:	ldr	r3, [r3]
   11320:	mov	r0, r3
   11324:	bl	110ac <__assert_fail@plt+0x334>
   11328:	str	r0, [fp, #-44]	; 0xffffffd4
   1132c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11330:	cmp	r3, #0
   11334:	blt	11344 <__assert_fail@plt+0x5cc>
   11338:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1133c:	cmp	r3, #1
   11340:	ble	11380 <__assert_fail@plt+0x608>
   11344:	ldr	r0, [pc, #872]	; 116b4 <__assert_fail@plt+0x93c>
   11348:	bl	10ca0 <gettext@plt>
   1134c:	mov	r2, r0
   11350:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11354:	mov	r1, #0
   11358:	mov	r0, #1
   1135c:	bl	10c40 <error@plt>
   11360:	mov	r0, #0
   11364:	bl	11000 <__assert_fail@plt+0x288>
   11368:	ldr	r0, [pc, #816]	; 116a0 <__assert_fail@plt+0x928>
   1136c:	bl	116dc <__assert_fail@plt+0x964>
   11370:	mov	r3, #0
   11374:	b	11694 <__assert_fail@plt+0x91c>
   11378:	mov	r0, #1
   1137c:	bl	11000 <__assert_fail@plt+0x288>
   11380:	mov	r3, #0
   11384:	str	r3, [sp]
   11388:	ldr	r3, [pc, #808]	; 116b8 <__assert_fail@plt+0x940>
   1138c:	ldr	r2, [pc, #808]	; 116bc <__assert_fail@plt+0x944>
   11390:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11394:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11398:	bl	10c7c <getopt_long@plt>
   1139c:	str	r0, [fp, #-48]	; 0xffffffd0
   113a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   113a4:	cmn	r3, #1
   113a8:	bne	112d0 <__assert_fail@plt+0x558>
   113ac:	ldr	r3, [pc, #780]	; 116c0 <__assert_fail@plt+0x948>
   113b0:	ldr	r2, [r3]
   113b4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   113b8:	cmp	r2, r3
   113bc:	beq	113e4 <__assert_fail@plt+0x66c>
   113c0:	ldr	r0, [pc, #764]	; 116c4 <__assert_fail@plt+0x94c>
   113c4:	bl	10ca0 <gettext@plt>
   113c8:	mov	r3, r0
   113cc:	mov	r2, r3
   113d0:	mov	r1, #0
   113d4:	mov	r0, #0
   113d8:	bl	10c40 <error@plt>
   113dc:	mov	r0, #1
   113e0:	bl	11000 <__assert_fail@plt+0x288>
   113e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   113e8:	cmp	r3, #0
   113ec:	beq	11434 <__assert_fail@plt+0x6bc>
   113f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   113f4:	cmp	r3, #0
   113f8:	beq	11404 <__assert_fail@plt+0x68c>
   113fc:	mov	r2, #49	; 0x31
   11400:	b	11408 <__assert_fail@plt+0x690>
   11404:	mov	r2, #48	; 0x30
   11408:	ldr	r3, [pc, #696]	; 116c8 <__assert_fail@plt+0x950>
   1140c:	ldr	r3, [r3]
   11410:	mov	r1, r3
   11414:	mov	r0, r2
   11418:	bl	10d30 <fputc@plt>
   1141c:	ldr	r3, [pc, #676]	; 116c8 <__assert_fail@plt+0x950>
   11420:	ldr	r3, [r3]
   11424:	mov	r1, r3
   11428:	mov	r0, #0
   1142c:	bl	10d30 <fputc@plt>
   11430:	b	11654 <__assert_fail@plt+0x8dc>
   11434:	ldr	r3, [pc, #652]	; 116c8 <__assert_fail@plt+0x950>
   11438:	ldr	r3, [r3]
   1143c:	mov	r2, #10
   11440:	mov	r1, #1
   11444:	ldr	r0, [pc, #640]	; 116cc <__assert_fail@plt+0x954>
   11448:	bl	10c04 <fwrite@plt>
   1144c:	mov	r3, r0
   11450:	cmp	r3, #10
   11454:	beq	11654 <__assert_fail@plt+0x8dc>
   11458:	bl	10cc4 <__errno_location@plt>
   1145c:	mov	r3, r0
   11460:	ldr	r4, [r3]
   11464:	ldr	r0, [pc, #612]	; 116d0 <__assert_fail@plt+0x958>
   11468:	bl	10ca0 <gettext@plt>
   1146c:	mov	r3, r0
   11470:	mov	r2, r3
   11474:	mov	r1, r4
   11478:	mov	r0, #1
   1147c:	bl	10c40 <error@plt>
   11480:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11484:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11488:	sub	r3, r3, #1
   1148c:	add	r3, r2, r3
   11490:	ldrb	r3, [r3]
   11494:	mov	r2, r3
   11498:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1149c:	cmp	r2, r3
   114a0:	beq	114c4 <__assert_fail@plt+0x74c>
   114a4:	ldr	r0, [pc, #552]	; 116d4 <__assert_fail@plt+0x95c>
   114a8:	bl	10ca0 <gettext@plt>
   114ac:	mov	r3, r0
   114b0:	mov	r2, r3
   114b4:	mov	r1, #0
   114b8:	mov	r0, #0
   114bc:	bl	10c40 <error@plt>
   114c0:	b	114dc <__assert_fail@plt+0x764>
   114c4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   114c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   114cc:	sub	r3, r3, #1
   114d0:	add	r3, r2, r3
   114d4:	mov	r2, #0
   114d8:	strb	r2, [r3]
   114dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   114e0:	mov	r1, r3
   114e4:	ldr	r0, [fp, #-16]
   114e8:	bl	10f60 <__assert_fail@plt+0x1e8>
   114ec:	str	r0, [fp, #-24]	; 0xffffffe8
   114f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   114f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   114f8:	sub	r3, r2, r3
   114fc:	str	r3, [fp, #-32]	; 0xffffffe0
   11500:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11504:	cmp	r3, #32768	; 0x8000
   11508:	bge	11518 <__assert_fail@plt+0x7a0>
   1150c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11510:	cmn	r3, #32768	; 0x8000
   11514:	bge	1152c <__assert_fail@plt+0x7b4>
   11518:	mov	r3, #0
   1151c:	str	r3, [fp, #-24]	; 0xffffffe8
   11520:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11524:	rsb	r3, r3, #0
   11528:	str	r3, [fp, #-32]	; 0xffffffe0
   1152c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11530:	str	r3, [fp, #-28]	; 0xffffffe4
   11534:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11538:	cmp	r3, #0
   1153c:	beq	1154c <__assert_fail@plt+0x7d4>
   11540:	mov	r3, #0
   11544:	str	r3, [fp, #-40]	; 0xffffffd8
   11548:	b	115d4 <__assert_fail@plt+0x85c>
   1154c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11550:	cmn	r3, #127	; 0x7f
   11554:	blt	11564 <__assert_fail@plt+0x7ec>
   11558:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1155c:	cmp	r3, #127	; 0x7f
   11560:	ble	115b0 <__assert_fail@plt+0x838>
   11564:	ldr	r3, [pc, #348]	; 116c8 <__assert_fail@plt+0x950>
   11568:	ldr	r3, [r3]
   1156c:	mov	r1, r3
   11570:	mov	r0, #128	; 0x80
   11574:	bl	10d3c <putc@plt>
   11578:	mov	r3, r0
   1157c:	cmn	r3, #1
   11580:	bne	11588 <__assert_fail@plt+0x810>
   11584:	bl	111bc <__assert_fail@plt+0x444>
   11588:	ldr	r3, [pc, #312]	; 116c8 <__assert_fail@plt+0x950>
   1158c:	ldr	r3, [r3]
   11590:	mov	r1, r3
   11594:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11598:	bl	10eac <__assert_fail@plt+0x134>
   1159c:	mov	r3, r0
   115a0:	cmp	r3, #0
   115a4:	bne	115d4 <__assert_fail@plt+0x85c>
   115a8:	bl	111bc <__assert_fail@plt+0x444>
   115ac:	b	115d4 <__assert_fail@plt+0x85c>
   115b0:	ldr	r3, [pc, #272]	; 116c8 <__assert_fail@plt+0x950>
   115b4:	ldr	r3, [r3]
   115b8:	mov	r1, r3
   115bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   115c0:	bl	10d3c <putc@plt>
   115c4:	mov	r3, r0
   115c8:	cmn	r3, #1
   115cc:	bne	115d4 <__assert_fail@plt+0x85c>
   115d0:	bl	111bc <__assert_fail@plt+0x444>
   115d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   115d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115dc:	add	r2, r2, r3
   115e0:	ldr	r3, [pc, #224]	; 116c8 <__assert_fail@plt+0x950>
   115e4:	ldr	r3, [r3]
   115e8:	mov	r1, r3
   115ec:	mov	r0, r2
   115f0:	bl	10d54 <fputs@plt>
   115f4:	mov	r3, r0
   115f8:	cmn	r3, #1
   115fc:	beq	11620 <__assert_fail@plt+0x8a8>
   11600:	ldr	r3, [pc, #192]	; 116c8 <__assert_fail@plt+0x950>
   11604:	ldr	r3, [r3]
   11608:	mov	r1, r3
   1160c:	mov	r0, #0
   11610:	bl	10d3c <putc@plt>
   11614:	mov	r3, r0
   11618:	cmn	r3, #1
   1161c:	bne	11624 <__assert_fail@plt+0x8ac>
   11620:	bl	111bc <__assert_fail@plt+0x444>
   11624:	ldr	r3, [fp, #-16]
   11628:	str	r3, [fp, #-56]	; 0xffffffc8
   1162c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11630:	str	r3, [fp, #-60]	; 0xffffffc4
   11634:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11638:	str	r3, [fp, #-16]
   1163c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11640:	str	r3, [fp, #-20]	; 0xffffffec
   11644:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11648:	str	r3, [fp, #-64]	; 0xffffffc0
   1164c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11650:	str	r3, [fp, #-68]	; 0xffffffbc
   11654:	ldr	r3, [pc, #124]	; 116d8 <__assert_fail@plt+0x960>
   11658:	ldr	r3, [r3]
   1165c:	sub	r1, fp, #68	; 0x44
   11660:	sub	r0, fp, #64	; 0x40
   11664:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11668:	bl	10d48 <getdelim@plt>
   1166c:	str	r0, [fp, #-52]	; 0xffffffcc
   11670:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11674:	cmp	r3, #0
   11678:	bgt	11480 <__assert_fail@plt+0x708>
   1167c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11680:	mov	r0, r3
   11684:	bl	15590 <__assert_fail@plt+0x4818>
   11688:	ldr	r0, [fp, #-16]
   1168c:	bl	15590 <__assert_fail@plt+0x4818>
   11690:	mov	r3, #0
   11694:	mov	r0, r3
   11698:	sub	sp, fp, #8
   1169c:	pop	{r4, fp, pc}
   116a0:	andeq	r6, r1, ip, lsr sl
   116a4:	andeq	r1, r1, r0, asr r8
   116a8:	andeq	r6, r1, r4, asr #20
   116ac:	andeq	r0, r0, r2, lsl #8
   116b0:	andeq	r8, r2, r8, lsr r1
   116b4:	andeq	r6, r1, r8, ror #20
   116b8:	strdeq	r6, [r1], -ip
   116bc:	muleq	r1, r4, sl
   116c0:	andeq	r8, r2, r0, lsr #2
   116c4:	muleq	r1, ip, sl
   116c8:	andeq	r8, r2, r4, lsr r1
   116cc:			; <UNDEFINED> instruction: 0x00016ab4
   116d0:	andeq	r6, r1, r0, asr #21
   116d4:	andeq	r6, r1, r4, ror #21
   116d8:	andeq	r8, r2, r0, lsr r1
   116dc:	push	{r4, r5, r6, r7, fp, lr}
   116e0:	add	fp, sp, #20
   116e4:	sub	sp, sp, #24
   116e8:	str	r0, [fp, #-24]	; 0xffffffe8
   116ec:	ldr	r3, [pc, #112]	; 11764 <__assert_fail@plt+0x9ec>
   116f0:	ldr	r3, [r3]
   116f4:	mov	r0, r3
   116f8:	bl	15530 <__assert_fail@plt+0x47b8>
   116fc:	ldr	r3, [pc, #100]	; 11768 <__assert_fail@plt+0x9f0>
   11700:	ldr	r4, [r3]
   11704:	ldr	r3, [pc, #96]	; 1176c <__assert_fail@plt+0x9f4>
   11708:	ldr	r5, [r3]
   1170c:	ldr	r0, [pc, #92]	; 11770 <__assert_fail@plt+0x9f8>
   11710:	bl	10ca0 <gettext@plt>
   11714:	mov	r6, r0
   11718:	ldr	r0, [pc, #84]	; 11774 <__assert_fail@plt+0x9fc>
   1171c:	bl	10ca0 <gettext@plt>
   11720:	mov	r7, r0
   11724:	ldr	r0, [pc, #76]	; 11778 <__assert_fail@plt+0xa00>
   11728:	bl	10ca0 <gettext@plt>
   1172c:	mov	r2, r0
   11730:	mov	r3, #0
   11734:	str	r3, [sp, #12]
   11738:	str	r2, [sp, #8]
   1173c:	str	r7, [sp, #4]
   11740:	str	r6, [sp]
   11744:	mov	r3, r5
   11748:	ldr	r2, [pc, #44]	; 1177c <__assert_fail@plt+0xa04>
   1174c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11750:	mov	r0, r4
   11754:	bl	14780 <__assert_fail@plt+0x3a08>
   11758:	nop			; (mov r0, r0)
   1175c:	sub	sp, fp, #20
   11760:	pop	{r4, r5, r6, r7, fp, pc}
   11764:	andeq	r8, r2, r8, lsr #2
   11768:	andeq	r8, r2, r4, lsr r1
   1176c:	ldrdeq	r8, [r2], -r0
   11770:	andeq	r6, r1, r0, lsr fp
   11774:	andeq	r6, r1, r0, asr #22
   11778:	andeq	r6, r1, r0, asr fp
   1177c:	andeq	r6, r1, r0, ror #22
   11780:	push	{fp, lr}
   11784:	add	fp, sp, #4
   11788:	sub	sp, sp, #24
   1178c:	str	r0, [fp, #-8]
   11790:	str	r1, [fp, #-12]
   11794:	ldr	r0, [pc, #60]	; 117d8 <__assert_fail@plt+0xa60>
   11798:	bl	10ca0 <gettext@plt>
   1179c:	mov	r1, r0
   117a0:	ldr	r3, [pc, #52]	; 117dc <__assert_fail@plt+0xa64>
   117a4:	str	r3, [sp, #8]
   117a8:	ldr	r3, [pc, #48]	; 117e0 <__assert_fail@plt+0xa68>
   117ac:	str	r3, [sp, #4]
   117b0:	ldr	r3, [pc, #44]	; 117e4 <__assert_fail@plt+0xa6c>
   117b4:	str	r3, [sp]
   117b8:	ldr	r3, [fp, #-12]
   117bc:	ldr	r2, [pc, #36]	; 117e8 <__assert_fail@plt+0xa70>
   117c0:	ldr	r0, [fp, #-8]
   117c4:	bl	10cb8 <fprintf@plt>
   117c8:	mov	r3, r0
   117cc:	mov	r0, r3
   117d0:	sub	sp, fp, #4
   117d4:	pop	{fp, pc}
   117d8:	andeq	r6, r1, r0, ror fp
   117dc:	andeq	r6, r1, r8, ror #24
   117e0:	andeq	r6, r1, r0, lsl #25
   117e4:			; <UNDEFINED> instruction: 0x00016cb0
   117e8:	andeq	r6, r1, r0, asr #24
   117ec:	push	{fp}		; (str fp, [sp, #-4]!)
   117f0:	add	fp, sp, #0
   117f4:	sub	sp, sp, #12
   117f8:	str	r0, [fp, #-8]
   117fc:	ldr	r2, [pc, #20]	; 11818 <__assert_fail@plt+0xaa0>
   11800:	ldr	r3, [fp, #-8]
   11804:	str	r3, [r2]
   11808:	nop			; (mov r0, r0)
   1180c:	add	sp, fp, #0
   11810:	pop	{fp}		; (ldr fp, [sp], #4)
   11814:	bx	lr
   11818:	andeq	r8, r2, r0, asr #2
   1181c:	push	{fp}		; (str fp, [sp, #-4]!)
   11820:	add	fp, sp, #0
   11824:	sub	sp, sp, #12
   11828:	mov	r3, r0
   1182c:	strb	r3, [fp, #-5]
   11830:	ldr	r2, [pc, #20]	; 1184c <__assert_fail@plt+0xad4>
   11834:	ldrb	r3, [fp, #-5]
   11838:	strb	r3, [r2]
   1183c:	nop			; (mov r0, r0)
   11840:	add	sp, fp, #0
   11844:	pop	{fp}		; (ldr fp, [sp], #4)
   11848:	bx	lr
   1184c:	andeq	r8, r2, r4, asr #2
   11850:	push	{r4, fp, lr}
   11854:	add	fp, sp, #8
   11858:	sub	sp, sp, #20
   1185c:	ldr	r3, [pc, #256]	; 11964 <__assert_fail@plt+0xbec>
   11860:	ldr	r3, [r3]
   11864:	mov	r0, r3
   11868:	bl	15a6c <__assert_fail@plt+0x4cf4>
   1186c:	mov	r3, r0
   11870:	cmp	r3, #0
   11874:	beq	1192c <__assert_fail@plt+0xbb4>
   11878:	ldr	r3, [pc, #232]	; 11968 <__assert_fail@plt+0xbf0>
   1187c:	ldrb	r3, [r3]
   11880:	eor	r3, r3, #1
   11884:	uxtb	r3, r3
   11888:	cmp	r3, #0
   1188c:	bne	118a4 <__assert_fail@plt+0xb2c>
   11890:	bl	10cc4 <__errno_location@plt>
   11894:	mov	r3, r0
   11898:	ldr	r3, [r3]
   1189c:	cmp	r3, #32
   118a0:	beq	1192c <__assert_fail@plt+0xbb4>
   118a4:	ldr	r0, [pc, #192]	; 1196c <__assert_fail@plt+0xbf4>
   118a8:	bl	10ca0 <gettext@plt>
   118ac:	str	r0, [fp, #-16]
   118b0:	ldr	r3, [pc, #184]	; 11970 <__assert_fail@plt+0xbf8>
   118b4:	ldr	r3, [r3]
   118b8:	cmp	r3, #0
   118bc:	beq	11900 <__assert_fail@plt+0xb88>
   118c0:	bl	10cc4 <__errno_location@plt>
   118c4:	mov	r3, r0
   118c8:	ldr	r4, [r3]
   118cc:	ldr	r3, [pc, #156]	; 11970 <__assert_fail@plt+0xbf8>
   118d0:	ldr	r3, [r3]
   118d4:	mov	r0, r3
   118d8:	bl	13de4 <__assert_fail@plt+0x306c>
   118dc:	mov	r2, r0
   118e0:	ldr	r3, [fp, #-16]
   118e4:	str	r3, [sp]
   118e8:	mov	r3, r2
   118ec:	ldr	r2, [pc, #128]	; 11974 <__assert_fail@plt+0xbfc>
   118f0:	mov	r1, r4
   118f4:	mov	r0, #0
   118f8:	bl	10c40 <error@plt>
   118fc:	b	1191c <__assert_fail@plt+0xba4>
   11900:	bl	10cc4 <__errno_location@plt>
   11904:	mov	r3, r0
   11908:	ldr	r1, [r3]
   1190c:	ldr	r3, [fp, #-16]
   11910:	ldr	r2, [pc, #96]	; 11978 <__assert_fail@plt+0xc00>
   11914:	mov	r0, #0
   11918:	bl	10c40 <error@plt>
   1191c:	ldr	r3, [pc, #88]	; 1197c <__assert_fail@plt+0xc04>
   11920:	ldr	r3, [r3]
   11924:	mov	r0, r3
   11928:	bl	10bbc <_exit@plt>
   1192c:	ldr	r3, [pc, #76]	; 11980 <__assert_fail@plt+0xc08>
   11930:	ldr	r3, [r3]
   11934:	mov	r0, r3
   11938:	bl	15a6c <__assert_fail@plt+0x4cf4>
   1193c:	mov	r3, r0
   11940:	cmp	r3, #0
   11944:	beq	11958 <__assert_fail@plt+0xbe0>
   11948:	ldr	r3, [pc, #44]	; 1197c <__assert_fail@plt+0xc04>
   1194c:	ldr	r3, [r3]
   11950:	mov	r0, r3
   11954:	bl	10bbc <_exit@plt>
   11958:	nop			; (mov r0, r0)
   1195c:	sub	sp, fp, #8
   11960:	pop	{r4, fp, pc}
   11964:	andeq	r8, r2, r4, lsr r1
   11968:	andeq	r8, r2, r4, asr #2
   1196c:	andeq	r6, r1, r0, asr #25
   11970:	andeq	r8, r2, r0, asr #2
   11974:	andeq	r6, r1, ip, asr #25
   11978:	ldrdeq	r6, [r1], -r4
   1197c:	ldrdeq	r8, [r2], -r4
   11980:	andeq	r8, r2, r8, lsr #2
   11984:	push	{fp, lr}
   11988:	add	fp, sp, #4
   1198c:	sub	sp, sp, #16
   11990:	str	r0, [fp, #-16]
   11994:	ldr	r3, [fp, #-16]
   11998:	cmp	r3, #0
   1199c:	bne	119bc <__assert_fail@plt+0xc44>
   119a0:	ldr	r3, [pc, #220]	; 11a84 <__assert_fail@plt+0xd0c>
   119a4:	ldr	r3, [r3]
   119a8:	mov	r2, #55	; 0x37
   119ac:	mov	r1, #1
   119b0:	ldr	r0, [pc, #208]	; 11a88 <__assert_fail@plt+0xd10>
   119b4:	bl	10c04 <fwrite@plt>
   119b8:	bl	10d6c <abort@plt>
   119bc:	mov	r1, #47	; 0x2f
   119c0:	ldr	r0, [fp, #-16]
   119c4:	bl	10d18 <strrchr@plt>
   119c8:	str	r0, [fp, #-8]
   119cc:	ldr	r3, [fp, #-8]
   119d0:	cmp	r3, #0
   119d4:	beq	119e4 <__assert_fail@plt+0xc6c>
   119d8:	ldr	r3, [fp, #-8]
   119dc:	add	r3, r3, #1
   119e0:	b	119e8 <__assert_fail@plt+0xc70>
   119e4:	ldr	r3, [fp, #-16]
   119e8:	str	r3, [fp, #-12]
   119ec:	ldr	r2, [fp, #-12]
   119f0:	ldr	r3, [fp, #-16]
   119f4:	sub	r3, r2, r3
   119f8:	cmp	r3, #6
   119fc:	ble	11a60 <__assert_fail@plt+0xce8>
   11a00:	ldr	r3, [fp, #-12]
   11a04:	sub	r3, r3, #7
   11a08:	mov	r2, #7
   11a0c:	ldr	r1, [pc, #120]	; 11a8c <__assert_fail@plt+0xd14>
   11a10:	mov	r0, r3
   11a14:	bl	10d60 <strncmp@plt>
   11a18:	mov	r3, r0
   11a1c:	cmp	r3, #0
   11a20:	bne	11a60 <__assert_fail@plt+0xce8>
   11a24:	ldr	r3, [fp, #-12]
   11a28:	str	r3, [fp, #-16]
   11a2c:	mov	r2, #3
   11a30:	ldr	r1, [pc, #88]	; 11a90 <__assert_fail@plt+0xd18>
   11a34:	ldr	r0, [fp, #-12]
   11a38:	bl	10d60 <strncmp@plt>
   11a3c:	mov	r3, r0
   11a40:	cmp	r3, #0
   11a44:	bne	11a60 <__assert_fail@plt+0xce8>
   11a48:	ldr	r3, [fp, #-12]
   11a4c:	add	r3, r3, #3
   11a50:	str	r3, [fp, #-16]
   11a54:	ldr	r2, [pc, #56]	; 11a94 <__assert_fail@plt+0xd1c>
   11a58:	ldr	r3, [fp, #-16]
   11a5c:	str	r3, [r2]
   11a60:	ldr	r2, [pc, #48]	; 11a98 <__assert_fail@plt+0xd20>
   11a64:	ldr	r3, [fp, #-16]
   11a68:	str	r3, [r2]
   11a6c:	ldr	r2, [pc, #40]	; 11a9c <__assert_fail@plt+0xd24>
   11a70:	ldr	r3, [fp, #-16]
   11a74:	str	r3, [r2]
   11a78:	nop			; (mov r0, r0)
   11a7c:	sub	sp, fp, #4
   11a80:	pop	{fp, pc}
   11a84:	andeq	r8, r2, r8, lsr #2
   11a88:	ldrdeq	r6, [r1], -r8
   11a8c:	andeq	r6, r1, r0, lsl sp
   11a90:	andeq	r6, r1, r8, lsl sp
   11a94:	andeq	r8, r2, r8, lsl r1
   11a98:	andeq	r8, r2, r8, asr #2
   11a9c:	andeq	r8, r2, ip, lsl r1
   11aa0:	push	{fp, lr}
   11aa4:	add	fp, sp, #4
   11aa8:	sub	sp, sp, #16
   11aac:	str	r0, [fp, #-16]
   11ab0:	bl	10cc4 <__errno_location@plt>
   11ab4:	mov	r3, r0
   11ab8:	ldr	r3, [r3]
   11abc:	str	r3, [fp, #-8]
   11ac0:	ldr	r3, [fp, #-16]
   11ac4:	cmp	r3, #0
   11ac8:	beq	11ad4 <__assert_fail@plt+0xd5c>
   11acc:	ldr	r3, [fp, #-16]
   11ad0:	b	11ad8 <__assert_fail@plt+0xd60>
   11ad4:	ldr	r3, [pc, #48]	; 11b0c <__assert_fail@plt+0xd94>
   11ad8:	mov	r1, #48	; 0x30
   11adc:	mov	r0, r3
   11ae0:	bl	152c4 <__assert_fail@plt+0x454c>
   11ae4:	mov	r3, r0
   11ae8:	str	r3, [fp, #-12]
   11aec:	bl	10cc4 <__errno_location@plt>
   11af0:	mov	r2, r0
   11af4:	ldr	r3, [fp, #-8]
   11af8:	str	r3, [r2]
   11afc:	ldr	r3, [fp, #-12]
   11b00:	mov	r0, r3
   11b04:	sub	sp, fp, #4
   11b08:	pop	{fp, pc}
   11b0c:	andeq	r8, r2, ip, asr #2
   11b10:	push	{fp}		; (str fp, [sp, #-4]!)
   11b14:	add	fp, sp, #0
   11b18:	sub	sp, sp, #12
   11b1c:	str	r0, [fp, #-8]
   11b20:	ldr	r3, [fp, #-8]
   11b24:	cmp	r3, #0
   11b28:	beq	11b34 <__assert_fail@plt+0xdbc>
   11b2c:	ldr	r3, [fp, #-8]
   11b30:	b	11b38 <__assert_fail@plt+0xdc0>
   11b34:	ldr	r3, [pc, #16]	; 11b4c <__assert_fail@plt+0xdd4>
   11b38:	ldr	r3, [r3]
   11b3c:	mov	r0, r3
   11b40:	add	sp, fp, #0
   11b44:	pop	{fp}		; (ldr fp, [sp], #4)
   11b48:	bx	lr
   11b4c:	andeq	r8, r2, ip, asr #2
   11b50:	push	{fp}		; (str fp, [sp, #-4]!)
   11b54:	add	fp, sp, #0
   11b58:	sub	sp, sp, #12
   11b5c:	str	r0, [fp, #-8]
   11b60:	str	r1, [fp, #-12]
   11b64:	ldr	r3, [fp, #-8]
   11b68:	cmp	r3, #0
   11b6c:	beq	11b78 <__assert_fail@plt+0xe00>
   11b70:	ldr	r3, [fp, #-8]
   11b74:	b	11b7c <__assert_fail@plt+0xe04>
   11b78:	ldr	r3, [pc, #20]	; 11b94 <__assert_fail@plt+0xe1c>
   11b7c:	ldr	r2, [fp, #-12]
   11b80:	str	r2, [r3]
   11b84:	nop			; (mov r0, r0)
   11b88:	add	sp, fp, #0
   11b8c:	pop	{fp}		; (ldr fp, [sp], #4)
   11b90:	bx	lr
   11b94:	andeq	r8, r2, ip, asr #2
   11b98:	push	{fp}		; (str fp, [sp, #-4]!)
   11b9c:	add	fp, sp, #0
   11ba0:	sub	sp, sp, #36	; 0x24
   11ba4:	str	r0, [fp, #-24]	; 0xffffffe8
   11ba8:	mov	r3, r1
   11bac:	str	r2, [fp, #-32]	; 0xffffffe0
   11bb0:	strb	r3, [fp, #-25]	; 0xffffffe7
   11bb4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11bb8:	strb	r3, [fp, #-5]
   11bbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bc0:	cmp	r3, #0
   11bc4:	beq	11bd0 <__assert_fail@plt+0xe58>
   11bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bcc:	b	11bd4 <__assert_fail@plt+0xe5c>
   11bd0:	ldr	r3, [pc, #124]	; 11c54 <__assert_fail@plt+0xedc>
   11bd4:	add	r2, r3, #8
   11bd8:	ldrb	r3, [fp, #-5]
   11bdc:	lsr	r3, r3, #5
   11be0:	uxtb	r3, r3
   11be4:	lsl	r3, r3, #2
   11be8:	add	r3, r2, r3
   11bec:	str	r3, [fp, #-12]
   11bf0:	ldrb	r3, [fp, #-5]
   11bf4:	and	r3, r3, #31
   11bf8:	str	r3, [fp, #-16]
   11bfc:	ldr	r3, [fp, #-12]
   11c00:	ldr	r2, [r3]
   11c04:	ldr	r3, [fp, #-16]
   11c08:	lsr	r3, r2, r3
   11c0c:	and	r3, r3, #1
   11c10:	str	r3, [fp, #-20]	; 0xffffffec
   11c14:	ldr	r3, [fp, #-12]
   11c18:	ldr	r3, [r3]
   11c1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11c20:	and	r1, r2, #1
   11c24:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c28:	eor	r1, r1, r2
   11c2c:	ldr	r2, [fp, #-16]
   11c30:	lsl	r2, r1, r2
   11c34:	eor	r2, r2, r3
   11c38:	ldr	r3, [fp, #-12]
   11c3c:	str	r2, [r3]
   11c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c44:	mov	r0, r3
   11c48:	add	sp, fp, #0
   11c4c:	pop	{fp}		; (ldr fp, [sp], #4)
   11c50:	bx	lr
   11c54:	andeq	r8, r2, ip, asr #2
   11c58:	push	{fp}		; (str fp, [sp, #-4]!)
   11c5c:	add	fp, sp, #0
   11c60:	sub	sp, sp, #20
   11c64:	str	r0, [fp, #-16]
   11c68:	str	r1, [fp, #-20]	; 0xffffffec
   11c6c:	ldr	r3, [fp, #-16]
   11c70:	cmp	r3, #0
   11c74:	bne	11c80 <__assert_fail@plt+0xf08>
   11c78:	ldr	r3, [pc, #44]	; 11cac <__assert_fail@plt+0xf34>
   11c7c:	str	r3, [fp, #-16]
   11c80:	ldr	r3, [fp, #-16]
   11c84:	ldr	r3, [r3, #4]
   11c88:	str	r3, [fp, #-8]
   11c8c:	ldr	r3, [fp, #-16]
   11c90:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c94:	str	r2, [r3, #4]
   11c98:	ldr	r3, [fp, #-8]
   11c9c:	mov	r0, r3
   11ca0:	add	sp, fp, #0
   11ca4:	pop	{fp}		; (ldr fp, [sp], #4)
   11ca8:	bx	lr
   11cac:	andeq	r8, r2, ip, asr #2
   11cb0:	push	{fp, lr}
   11cb4:	add	fp, sp, #4
   11cb8:	sub	sp, sp, #16
   11cbc:	str	r0, [fp, #-8]
   11cc0:	str	r1, [fp, #-12]
   11cc4:	str	r2, [fp, #-16]
   11cc8:	ldr	r3, [fp, #-8]
   11ccc:	cmp	r3, #0
   11cd0:	bne	11cdc <__assert_fail@plt+0xf64>
   11cd4:	ldr	r3, [pc, #76]	; 11d28 <__assert_fail@plt+0xfb0>
   11cd8:	str	r3, [fp, #-8]
   11cdc:	ldr	r3, [fp, #-8]
   11ce0:	mov	r2, #10
   11ce4:	str	r2, [r3]
   11ce8:	ldr	r3, [fp, #-12]
   11cec:	cmp	r3, #0
   11cf0:	beq	11d00 <__assert_fail@plt+0xf88>
   11cf4:	ldr	r3, [fp, #-16]
   11cf8:	cmp	r3, #0
   11cfc:	bne	11d04 <__assert_fail@plt+0xf8c>
   11d00:	bl	10d6c <abort@plt>
   11d04:	ldr	r3, [fp, #-8]
   11d08:	ldr	r2, [fp, #-12]
   11d0c:	str	r2, [r3, #40]	; 0x28
   11d10:	ldr	r3, [fp, #-8]
   11d14:	ldr	r2, [fp, #-16]
   11d18:	str	r2, [r3, #44]	; 0x2c
   11d1c:	nop			; (mov r0, r0)
   11d20:	sub	sp, fp, #4
   11d24:	pop	{fp, pc}
   11d28:	andeq	r8, r2, ip, asr #2
   11d2c:	push	{fp, lr}
   11d30:	add	fp, sp, #4
   11d34:	sub	sp, sp, #56	; 0x38
   11d38:	str	r0, [fp, #-56]	; 0xffffffc8
   11d3c:	str	r1, [fp, #-60]	; 0xffffffc4
   11d40:	sub	r3, fp, #52	; 0x34
   11d44:	mov	r2, #48	; 0x30
   11d48:	mov	r1, #0
   11d4c:	mov	r0, r3
   11d50:	bl	10cdc <memset@plt>
   11d54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11d58:	cmp	r3, #10
   11d5c:	bne	11d64 <__assert_fail@plt+0xfec>
   11d60:	bl	10d6c <abort@plt>
   11d64:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11d68:	str	r3, [fp, #-52]	; 0xffffffcc
   11d6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11d70:	mov	lr, r3
   11d74:	sub	ip, fp, #52	; 0x34
   11d78:	ldm	ip!, {r0, r1, r2, r3}
   11d7c:	stmia	lr!, {r0, r1, r2, r3}
   11d80:	ldm	ip!, {r0, r1, r2, r3}
   11d84:	stmia	lr!, {r0, r1, r2, r3}
   11d88:	ldm	ip, {r0, r1, r2, r3}
   11d8c:	stm	lr, {r0, r1, r2, r3}
   11d90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11d94:	sub	sp, fp, #4
   11d98:	pop	{fp, pc}
   11d9c:	push	{fp, lr}
   11da0:	add	fp, sp, #4
   11da4:	sub	sp, sp, #16
   11da8:	str	r0, [fp, #-16]
   11dac:	str	r1, [fp, #-20]	; 0xffffffec
   11db0:	ldr	r0, [fp, #-16]
   11db4:	bl	10ca0 <gettext@plt>
   11db8:	str	r0, [fp, #-8]
   11dbc:	ldr	r2, [fp, #-8]
   11dc0:	ldr	r3, [fp, #-16]
   11dc4:	cmp	r2, r3
   11dc8:	beq	11dd4 <__assert_fail@plt+0x105c>
   11dcc:	ldr	r3, [fp, #-8]
   11dd0:	b	11e64 <__assert_fail@plt+0x10ec>
   11dd4:	bl	15d1c <__assert_fail@plt+0x4fa4>
   11dd8:	str	r0, [fp, #-12]
   11ddc:	ldr	r1, [pc, #140]	; 11e70 <__assert_fail@plt+0x10f8>
   11de0:	ldr	r0, [fp, #-12]
   11de4:	bl	159d4 <__assert_fail@plt+0x4c5c>
   11de8:	mov	r3, r0
   11dec:	cmp	r3, #0
   11df0:	bne	11e14 <__assert_fail@plt+0x109c>
   11df4:	ldr	r3, [fp, #-16]
   11df8:	ldrb	r3, [r3]
   11dfc:	cmp	r3, #96	; 0x60
   11e00:	bne	11e0c <__assert_fail@plt+0x1094>
   11e04:	ldr	r3, [pc, #104]	; 11e74 <__assert_fail@plt+0x10fc>
   11e08:	b	11e64 <__assert_fail@plt+0x10ec>
   11e0c:	ldr	r3, [pc, #100]	; 11e78 <__assert_fail@plt+0x1100>
   11e10:	b	11e64 <__assert_fail@plt+0x10ec>
   11e14:	ldr	r1, [pc, #96]	; 11e7c <__assert_fail@plt+0x1104>
   11e18:	ldr	r0, [fp, #-12]
   11e1c:	bl	159d4 <__assert_fail@plt+0x4c5c>
   11e20:	mov	r3, r0
   11e24:	cmp	r3, #0
   11e28:	bne	11e4c <__assert_fail@plt+0x10d4>
   11e2c:	ldr	r3, [fp, #-16]
   11e30:	ldrb	r3, [r3]
   11e34:	cmp	r3, #96	; 0x60
   11e38:	bne	11e44 <__assert_fail@plt+0x10cc>
   11e3c:	ldr	r3, [pc, #60]	; 11e80 <__assert_fail@plt+0x1108>
   11e40:	b	11e64 <__assert_fail@plt+0x10ec>
   11e44:	ldr	r3, [pc, #56]	; 11e84 <__assert_fail@plt+0x110c>
   11e48:	b	11e64 <__assert_fail@plt+0x10ec>
   11e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e50:	cmp	r3, #9
   11e54:	bne	11e60 <__assert_fail@plt+0x10e8>
   11e58:	ldr	r3, [pc, #40]	; 11e88 <__assert_fail@plt+0x1110>
   11e5c:	b	11e64 <__assert_fail@plt+0x10ec>
   11e60:	ldr	r3, [pc, #36]	; 11e8c <__assert_fail@plt+0x1114>
   11e64:	mov	r0, r3
   11e68:	sub	sp, fp, #4
   11e6c:	pop	{fp, pc}
   11e70:	ldrdeq	r6, [r1], -r8
   11e74:	andeq	r6, r1, r0, ror #27
   11e78:	andeq	r6, r1, r4, ror #27
   11e7c:	andeq	r6, r1, r8, ror #27
   11e80:	strdeq	r6, [r1], -r0
   11e84:	strdeq	r6, [r1], -r4
   11e88:	strdeq	r6, [r1], -r8
   11e8c:	strdeq	r6, [r1], -ip
   11e90:	push	{r4, fp, lr}
   11e94:	add	fp, sp, #8
   11e98:	sub	sp, sp, #116	; 0x74
   11e9c:	str	r0, [fp, #-88]	; 0xffffffa8
   11ea0:	str	r1, [fp, #-92]	; 0xffffffa4
   11ea4:	str	r2, [fp, #-96]	; 0xffffffa0
   11ea8:	str	r3, [fp, #-100]	; 0xffffff9c
   11eac:	mov	r3, #0
   11eb0:	str	r3, [fp, #-20]	; 0xffffffec
   11eb4:	mov	r3, #0
   11eb8:	str	r3, [fp, #-24]	; 0xffffffe8
   11ebc:	mov	r3, #0
   11ec0:	str	r3, [fp, #-28]	; 0xffffffe4
   11ec4:	mov	r3, #0
   11ec8:	str	r3, [fp, #-32]	; 0xffffffe0
   11ecc:	mov	r3, #0
   11ed0:	strb	r3, [fp, #-33]	; 0xffffffdf
   11ed4:	bl	10c1c <__ctype_get_mb_cur_max@plt>
   11ed8:	mov	r3, r0
   11edc:	cmp	r3, #1
   11ee0:	moveq	r3, #1
   11ee4:	movne	r3, #0
   11ee8:	strb	r3, [fp, #-57]	; 0xffffffc7
   11eec:	ldr	r3, [fp, #8]
   11ef0:	and	r3, r3, #2
   11ef4:	cmp	r3, #0
   11ef8:	movne	r3, #1
   11efc:	moveq	r3, #0
   11f00:	strb	r3, [fp, #-34]	; 0xffffffde
   11f04:	mov	r3, #0
   11f08:	strb	r3, [fp, #-35]	; 0xffffffdd
   11f0c:	mov	r3, #0
   11f10:	strb	r3, [fp, #-36]	; 0xffffffdc
   11f14:	mov	r3, #1
   11f18:	strb	r3, [fp, #-37]	; 0xffffffdb
   11f1c:	ldr	r3, [fp, #4]
   11f20:	cmp	r3, #10
   11f24:	ldrls	pc, [pc, r3, lsl #2]
   11f28:	b	12130 <__assert_fail@plt+0x13b8>
   11f2c:	andeq	r2, r1, r4, lsr #2
   11f30:	andeq	r2, r1, r0, lsr #1
   11f34:	andeq	r2, r1, r4, asr #1
   11f38:	muleq	r1, r8, r0
   11f3c:	andeq	r2, r1, r8, lsr #1
   11f40:	andeq	r1, r1, r8, ror #30
   11f44:	andeq	r1, r1, r8, asr pc
   11f48:	andeq	r1, r1, r8, asr #31
   11f4c:	ldrdeq	r1, [r1], -ip
   11f50:	ldrdeq	r1, [r1], -ip
   11f54:	ldrdeq	r1, [r1], -ip
   11f58:	mov	r3, #5
   11f5c:	str	r3, [fp, #4]
   11f60:	mov	r3, #1
   11f64:	strb	r3, [fp, #-34]	; 0xffffffde
   11f68:	ldrb	r3, [fp, #-34]	; 0xffffffde
   11f6c:	eor	r3, r3, #1
   11f70:	uxtb	r3, r3
   11f74:	cmp	r3, #0
   11f78:	beq	11fac <__assert_fail@plt+0x1234>
   11f7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11f84:	cmp	r2, r3
   11f88:	bcs	11fa0 <__assert_fail@plt+0x1228>
   11f8c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   11f90:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f94:	add	r3, r2, r3
   11f98:	mov	r2, #34	; 0x22
   11f9c:	strb	r2, [r3]
   11fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fa4:	add	r3, r3, #1
   11fa8:	str	r3, [fp, #-20]	; 0xffffffec
   11fac:	mov	r3, #1
   11fb0:	strb	r3, [fp, #-33]	; 0xffffffdf
   11fb4:	ldr	r3, [pc, #3872]	; 12edc <__assert_fail@plt+0x2164>
   11fb8:	str	r3, [fp, #-28]	; 0xffffffe4
   11fbc:	mov	r3, #1
   11fc0:	str	r3, [fp, #-32]	; 0xffffffe0
   11fc4:	b	12134 <__assert_fail@plt+0x13bc>
   11fc8:	mov	r3, #1
   11fcc:	strb	r3, [fp, #-33]	; 0xffffffdf
   11fd0:	mov	r3, #0
   11fd4:	strb	r3, [fp, #-34]	; 0xffffffde
   11fd8:	b	12134 <__assert_fail@plt+0x13bc>
   11fdc:	ldr	r3, [fp, #4]
   11fe0:	cmp	r3, #10
   11fe4:	beq	12008 <__assert_fail@plt+0x1290>
   11fe8:	ldr	r1, [fp, #4]
   11fec:	ldr	r0, [pc, #3820]	; 12ee0 <__assert_fail@plt+0x2168>
   11ff0:	bl	11d9c <__assert_fail@plt+0x1024>
   11ff4:	str	r0, [fp, #16]
   11ff8:	ldr	r1, [fp, #4]
   11ffc:	ldr	r0, [pc, #3808]	; 12ee4 <__assert_fail@plt+0x216c>
   12000:	bl	11d9c <__assert_fail@plt+0x1024>
   12004:	str	r0, [fp, #20]
   12008:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1200c:	eor	r3, r3, #1
   12010:	uxtb	r3, r3
   12014:	cmp	r3, #0
   12018:	beq	12078 <__assert_fail@plt+0x1300>
   1201c:	ldr	r3, [fp, #16]
   12020:	str	r3, [fp, #-28]	; 0xffffffe4
   12024:	b	12068 <__assert_fail@plt+0x12f0>
   12028:	ldr	r2, [fp, #-20]	; 0xffffffec
   1202c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12030:	cmp	r2, r3
   12034:	bcs	12050 <__assert_fail@plt+0x12d8>
   12038:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1203c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12040:	add	r3, r2, r3
   12044:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12048:	ldrb	r2, [r2]
   1204c:	strb	r2, [r3]
   12050:	ldr	r3, [fp, #-20]	; 0xffffffec
   12054:	add	r3, r3, #1
   12058:	str	r3, [fp, #-20]	; 0xffffffec
   1205c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12060:	add	r3, r3, #1
   12064:	str	r3, [fp, #-28]	; 0xffffffe4
   12068:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1206c:	ldrb	r3, [r3]
   12070:	cmp	r3, #0
   12074:	bne	12028 <__assert_fail@plt+0x12b0>
   12078:	mov	r3, #1
   1207c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12080:	ldr	r3, [fp, #20]
   12084:	str	r3, [fp, #-28]	; 0xffffffe4
   12088:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1208c:	bl	10cac <strlen@plt>
   12090:	str	r0, [fp, #-32]	; 0xffffffe0
   12094:	b	12134 <__assert_fail@plt+0x13bc>
   12098:	mov	r3, #1
   1209c:	strb	r3, [fp, #-33]	; 0xffffffdf
   120a0:	mov	r3, #1
   120a4:	strb	r3, [fp, #-34]	; 0xffffffde
   120a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   120ac:	eor	r3, r3, #1
   120b0:	uxtb	r3, r3
   120b4:	cmp	r3, #0
   120b8:	beq	120c4 <__assert_fail@plt+0x134c>
   120bc:	mov	r3, #1
   120c0:	strb	r3, [fp, #-33]	; 0xffffffdf
   120c4:	mov	r3, #2
   120c8:	str	r3, [fp, #4]
   120cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   120d0:	eor	r3, r3, #1
   120d4:	uxtb	r3, r3
   120d8:	cmp	r3, #0
   120dc:	beq	12110 <__assert_fail@plt+0x1398>
   120e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   120e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120e8:	cmp	r2, r3
   120ec:	bcs	12104 <__assert_fail@plt+0x138c>
   120f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   120f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   120f8:	add	r3, r2, r3
   120fc:	mov	r2, #39	; 0x27
   12100:	strb	r2, [r3]
   12104:	ldr	r3, [fp, #-20]	; 0xffffffec
   12108:	add	r3, r3, #1
   1210c:	str	r3, [fp, #-20]	; 0xffffffec
   12110:	ldr	r3, [pc, #3532]	; 12ee4 <__assert_fail@plt+0x216c>
   12114:	str	r3, [fp, #-28]	; 0xffffffe4
   12118:	mov	r3, #1
   1211c:	str	r3, [fp, #-32]	; 0xffffffe0
   12120:	b	12134 <__assert_fail@plt+0x13bc>
   12124:	mov	r3, #0
   12128:	strb	r3, [fp, #-34]	; 0xffffffde
   1212c:	b	12134 <__assert_fail@plt+0x13bc>
   12130:	bl	10d6c <abort@plt>
   12134:	mov	r3, #0
   12138:	str	r3, [fp, #-16]
   1213c:	b	132cc <__assert_fail@plt+0x2554>
   12140:	mov	r3, #0
   12144:	strb	r3, [fp, #-40]	; 0xffffffd8
   12148:	mov	r3, #0
   1214c:	strb	r3, [fp, #-41]	; 0xffffffd7
   12150:	mov	r3, #0
   12154:	strb	r3, [fp, #-42]	; 0xffffffd6
   12158:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1215c:	cmp	r3, #0
   12160:	beq	121fc <__assert_fail@plt+0x1484>
   12164:	ldr	r3, [fp, #4]
   12168:	cmp	r3, #2
   1216c:	beq	121fc <__assert_fail@plt+0x1484>
   12170:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12174:	cmp	r3, #0
   12178:	beq	121fc <__assert_fail@plt+0x1484>
   1217c:	ldr	r2, [fp, #-16]
   12180:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12184:	add	r4, r2, r3
   12188:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1218c:	cmn	r3, #1
   12190:	bne	121b4 <__assert_fail@plt+0x143c>
   12194:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12198:	cmp	r3, #1
   1219c:	bls	121b4 <__assert_fail@plt+0x143c>
   121a0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   121a4:	bl	10cac <strlen@plt>
   121a8:	str	r0, [fp, #-100]	; 0xffffff9c
   121ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   121b0:	b	121b8 <__assert_fail@plt+0x1440>
   121b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   121b8:	cmp	r4, r3
   121bc:	bhi	121fc <__assert_fail@plt+0x1484>
   121c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   121c4:	ldr	r3, [fp, #-16]
   121c8:	add	r3, r2, r3
   121cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   121d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   121d4:	mov	r0, r3
   121d8:	bl	10be0 <memcmp@plt>
   121dc:	mov	r3, r0
   121e0:	cmp	r3, #0
   121e4:	bne	121fc <__assert_fail@plt+0x1484>
   121e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   121ec:	cmp	r3, #0
   121f0:	bne	13488 <__assert_fail@plt+0x2710>
   121f4:	mov	r3, #1
   121f8:	strb	r3, [fp, #-40]	; 0xffffffd8
   121fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12200:	ldr	r3, [fp, #-16]
   12204:	add	r3, r2, r3
   12208:	ldrb	r3, [r3]
   1220c:	strb	r3, [fp, #-38]	; 0xffffffda
   12210:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12214:	cmp	r3, #126	; 0x7e
   12218:	ldrls	pc, [pc, r3, lsl #2]
   1221c:	b	12a48 <__assert_fail@plt+0x1cd0>
   12220:	andeq	r2, r1, ip, lsl r4
   12224:	andeq	r2, r1, r8, asr #20
   12228:	andeq	r2, r1, r8, asr #20
   1222c:	andeq	r2, r1, r8, asr #20
   12230:	andeq	r2, r1, r8, asr #20
   12234:	andeq	r2, r1, r8, asr #20
   12238:	andeq	r2, r1, r8, asr #20
   1223c:	andeq	r2, r1, ip, lsl #16
   12240:	andeq	r2, r1, r8, lsl r8
   12244:	andeq	r2, r1, r8, asr #16
   12248:	andeq	r2, r1, r0, lsr r8
   1224c:	andeq	r2, r1, r4, asr r8
   12250:	andeq	r2, r1, r4, lsr #16
   12254:	andeq	r2, r1, ip, lsr r8
   12258:	andeq	r2, r1, r8, asr #20
   1225c:	andeq	r2, r1, r8, asr #20
   12260:	andeq	r2, r1, r8, asr #20
   12264:	andeq	r2, r1, r8, asr #20
   12268:	andeq	r2, r1, r8, asr #20
   1226c:	andeq	r2, r1, r8, asr #20
   12270:	andeq	r2, r1, r8, asr #20
   12274:	andeq	r2, r1, r8, asr #20
   12278:	andeq	r2, r1, r8, asr #20
   1227c:	andeq	r2, r1, r8, asr #20
   12280:	andeq	r2, r1, r8, asr #20
   12284:	andeq	r2, r1, r8, asr #20
   12288:	andeq	r2, r1, r8, asr #20
   1228c:	andeq	r2, r1, r8, asr #20
   12290:	andeq	r2, r1, r8, asr #20
   12294:	andeq	r2, r1, r8, asr #20
   12298:	andeq	r2, r1, r8, asr #20
   1229c:	andeq	r2, r1, r8, asr #20
   122a0:	andeq	r2, r1, ip, lsr #18
   122a4:	andeq	r2, r1, r4, lsr r9
   122a8:	andeq	r2, r1, r4, lsr r9
   122ac:	andeq	r2, r1, r0, lsr #18
   122b0:	andeq	r2, r1, r4, lsr r9
   122b4:	andeq	r2, r1, ip, lsr sl
   122b8:	andeq	r2, r1, r4, lsr r9
   122bc:	andeq	r2, r1, r0, asr r9
   122c0:	andeq	r2, r1, r4, lsr r9
   122c4:	andeq	r2, r1, r4, lsr r9
   122c8:	andeq	r2, r1, r4, lsr r9
   122cc:	andeq	r2, r1, ip, lsr sl
   122d0:	andeq	r2, r1, ip, lsr sl
   122d4:	andeq	r2, r1, ip, lsr sl
   122d8:	andeq	r2, r1, ip, lsr sl
   122dc:	andeq	r2, r1, ip, lsr sl
   122e0:	andeq	r2, r1, ip, lsr sl
   122e4:	andeq	r2, r1, ip, lsr sl
   122e8:	andeq	r2, r1, ip, lsr sl
   122ec:	andeq	r2, r1, ip, lsr sl
   122f0:	andeq	r2, r1, ip, lsr sl
   122f4:	andeq	r2, r1, ip, lsr sl
   122f8:	andeq	r2, r1, ip, lsr sl
   122fc:	andeq	r2, r1, ip, lsr sl
   12300:	andeq	r2, r1, ip, lsr sl
   12304:	andeq	r2, r1, ip, lsr sl
   12308:	andeq	r2, r1, ip, lsr sl
   1230c:	andeq	r2, r1, r4, lsr r9
   12310:	andeq	r2, r1, r4, lsr r9
   12314:	andeq	r2, r1, r4, lsr r9
   12318:	andeq	r2, r1, r4, lsr r9
   1231c:	strdeq	r2, [r1], -ip
   12320:	andeq	r2, r1, r8, asr #20
   12324:	andeq	r2, r1, ip, lsr sl
   12328:	andeq	r2, r1, ip, lsr sl
   1232c:	andeq	r2, r1, ip, lsr sl
   12330:	andeq	r2, r1, ip, lsr sl
   12334:	andeq	r2, r1, ip, lsr sl
   12338:	andeq	r2, r1, ip, lsr sl
   1233c:	andeq	r2, r1, ip, lsr sl
   12340:	andeq	r2, r1, ip, lsr sl
   12344:	andeq	r2, r1, ip, lsr sl
   12348:	andeq	r2, r1, ip, lsr sl
   1234c:	andeq	r2, r1, ip, lsr sl
   12350:	andeq	r2, r1, ip, lsr sl
   12354:	andeq	r2, r1, ip, lsr sl
   12358:	andeq	r2, r1, ip, lsr sl
   1235c:	andeq	r2, r1, ip, lsr sl
   12360:	andeq	r2, r1, ip, lsr sl
   12364:	andeq	r2, r1, ip, lsr sl
   12368:	andeq	r2, r1, ip, lsr sl
   1236c:	andeq	r2, r1, ip, lsr sl
   12370:	andeq	r2, r1, ip, lsr sl
   12374:	andeq	r2, r1, ip, lsr sl
   12378:	andeq	r2, r1, ip, lsr sl
   1237c:	andeq	r2, r1, ip, lsr sl
   12380:	andeq	r2, r1, ip, lsr sl
   12384:	andeq	r2, r1, ip, lsr sl
   12388:	andeq	r2, r1, ip, lsr sl
   1238c:	andeq	r2, r1, r4, lsr r9
   12390:	andeq	r2, r1, r0, ror #16
   12394:	andeq	r2, r1, ip, lsr sl
   12398:	andeq	r2, r1, r4, lsr r9
   1239c:	andeq	r2, r1, ip, lsr sl
   123a0:	andeq	r2, r1, r4, lsr r9
   123a4:	andeq	r2, r1, ip, lsr sl
   123a8:	andeq	r2, r1, ip, lsr sl
   123ac:	andeq	r2, r1, ip, lsr sl
   123b0:	andeq	r2, r1, ip, lsr sl
   123b4:	andeq	r2, r1, ip, lsr sl
   123b8:	andeq	r2, r1, ip, lsr sl
   123bc:	andeq	r2, r1, ip, lsr sl
   123c0:	andeq	r2, r1, ip, lsr sl
   123c4:	andeq	r2, r1, ip, lsr sl
   123c8:	andeq	r2, r1, ip, lsr sl
   123cc:	andeq	r2, r1, ip, lsr sl
   123d0:	andeq	r2, r1, ip, lsr sl
   123d4:	andeq	r2, r1, ip, lsr sl
   123d8:	andeq	r2, r1, ip, lsr sl
   123dc:	andeq	r2, r1, ip, lsr sl
   123e0:	andeq	r2, r1, ip, lsr sl
   123e4:	andeq	r2, r1, ip, lsr sl
   123e8:	andeq	r2, r1, ip, lsr sl
   123ec:	andeq	r2, r1, ip, lsr sl
   123f0:	andeq	r2, r1, ip, lsr sl
   123f4:	andeq	r2, r1, ip, lsr sl
   123f8:	andeq	r2, r1, ip, lsr sl
   123fc:	andeq	r2, r1, ip, lsr sl
   12400:	andeq	r2, r1, ip, lsr sl
   12404:	andeq	r2, r1, ip, lsr sl
   12408:	andeq	r2, r1, ip, lsr sl
   1240c:	ldrdeq	r2, [r1], -r8
   12410:	andeq	r2, r1, r4, lsr r9
   12414:	ldrdeq	r2, [r1], -r8
   12418:	andeq	r2, r1, r0, lsr #18
   1241c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12420:	cmp	r3, #0
   12424:	beq	125e8 <__assert_fail@plt+0x1870>
   12428:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1242c:	cmp	r3, #0
   12430:	bne	13490 <__assert_fail@plt+0x2718>
   12434:	mov	r3, #1
   12438:	strb	r3, [fp, #-41]	; 0xffffffd7
   1243c:	ldr	r3, [fp, #4]
   12440:	cmp	r3, #2
   12444:	bne	124f4 <__assert_fail@plt+0x177c>
   12448:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1244c:	eor	r3, r3, #1
   12450:	uxtb	r3, r3
   12454:	cmp	r3, #0
   12458:	beq	124f4 <__assert_fail@plt+0x177c>
   1245c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12460:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12464:	cmp	r2, r3
   12468:	bcs	12480 <__assert_fail@plt+0x1708>
   1246c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12470:	ldr	r3, [fp, #-20]	; 0xffffffec
   12474:	add	r3, r2, r3
   12478:	mov	r2, #39	; 0x27
   1247c:	strb	r2, [r3]
   12480:	ldr	r3, [fp, #-20]	; 0xffffffec
   12484:	add	r3, r3, #1
   12488:	str	r3, [fp, #-20]	; 0xffffffec
   1248c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12490:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12494:	cmp	r2, r3
   12498:	bcs	124b0 <__assert_fail@plt+0x1738>
   1249c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   124a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   124a4:	add	r3, r2, r3
   124a8:	mov	r2, #36	; 0x24
   124ac:	strb	r2, [r3]
   124b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   124b4:	add	r3, r3, #1
   124b8:	str	r3, [fp, #-20]	; 0xffffffec
   124bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   124c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   124c4:	cmp	r2, r3
   124c8:	bcs	124e0 <__assert_fail@plt+0x1768>
   124cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   124d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   124d4:	add	r3, r2, r3
   124d8:	mov	r2, #39	; 0x27
   124dc:	strb	r2, [r3]
   124e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   124e4:	add	r3, r3, #1
   124e8:	str	r3, [fp, #-20]	; 0xffffffec
   124ec:	mov	r3, #1
   124f0:	strb	r3, [fp, #-35]	; 0xffffffdd
   124f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   124f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   124fc:	cmp	r2, r3
   12500:	bcs	12518 <__assert_fail@plt+0x17a0>
   12504:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1250c:	add	r3, r2, r3
   12510:	mov	r2, #92	; 0x5c
   12514:	strb	r2, [r3]
   12518:	ldr	r3, [fp, #-20]	; 0xffffffec
   1251c:	add	r3, r3, #1
   12520:	str	r3, [fp, #-20]	; 0xffffffec
   12524:	ldr	r3, [fp, #4]
   12528:	cmp	r3, #2
   1252c:	beq	125dc <__assert_fail@plt+0x1864>
   12530:	ldr	r3, [fp, #-16]
   12534:	add	r2, r3, #1
   12538:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1253c:	cmp	r2, r3
   12540:	bcs	125dc <__assert_fail@plt+0x1864>
   12544:	ldr	r3, [fp, #-16]
   12548:	add	r3, r3, #1
   1254c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12550:	add	r3, r2, r3
   12554:	ldrb	r3, [r3]
   12558:	cmp	r3, #47	; 0x2f
   1255c:	bls	125dc <__assert_fail@plt+0x1864>
   12560:	ldr	r3, [fp, #-16]
   12564:	add	r3, r3, #1
   12568:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1256c:	add	r3, r2, r3
   12570:	ldrb	r3, [r3]
   12574:	cmp	r3, #57	; 0x39
   12578:	bhi	125dc <__assert_fail@plt+0x1864>
   1257c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12580:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12584:	cmp	r2, r3
   12588:	bcs	125a0 <__assert_fail@plt+0x1828>
   1258c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12590:	ldr	r3, [fp, #-20]	; 0xffffffec
   12594:	add	r3, r2, r3
   12598:	mov	r2, #48	; 0x30
   1259c:	strb	r2, [r3]
   125a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   125a4:	add	r3, r3, #1
   125a8:	str	r3, [fp, #-20]	; 0xffffffec
   125ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   125b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   125b4:	cmp	r2, r3
   125b8:	bcs	125d0 <__assert_fail@plt+0x1858>
   125bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   125c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   125c4:	add	r3, r2, r3
   125c8:	mov	r2, #48	; 0x30
   125cc:	strb	r2, [r3]
   125d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   125d4:	add	r3, r3, #1
   125d8:	str	r3, [fp, #-20]	; 0xffffffec
   125dc:	mov	r3, #48	; 0x30
   125e0:	strb	r3, [fp, #-38]	; 0xffffffda
   125e4:	b	13024 <__assert_fail@plt+0x22ac>
   125e8:	ldr	r3, [fp, #8]
   125ec:	and	r3, r3, #1
   125f0:	cmp	r3, #0
   125f4:	beq	13024 <__assert_fail@plt+0x22ac>
   125f8:	b	132c0 <__assert_fail@plt+0x2548>
   125fc:	ldr	r3, [fp, #4]
   12600:	cmp	r3, #2
   12604:	beq	12614 <__assert_fail@plt+0x189c>
   12608:	cmp	r3, #5
   1260c:	beq	12624 <__assert_fail@plt+0x18ac>
   12610:	b	12808 <__assert_fail@plt+0x1a90>
   12614:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12618:	cmp	r3, #0
   1261c:	beq	127fc <__assert_fail@plt+0x1a84>
   12620:	b	134cc <__assert_fail@plt+0x2754>
   12624:	ldr	r3, [fp, #8]
   12628:	and	r3, r3, #4
   1262c:	cmp	r3, #0
   12630:	beq	12804 <__assert_fail@plt+0x1a8c>
   12634:	ldr	r3, [fp, #-16]
   12638:	add	r2, r3, #2
   1263c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12640:	cmp	r2, r3
   12644:	bcs	12804 <__assert_fail@plt+0x1a8c>
   12648:	ldr	r3, [fp, #-16]
   1264c:	add	r3, r3, #1
   12650:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12654:	add	r3, r2, r3
   12658:	ldrb	r3, [r3]
   1265c:	cmp	r3, #63	; 0x3f
   12660:	bne	12804 <__assert_fail@plt+0x1a8c>
   12664:	ldr	r3, [fp, #-16]
   12668:	add	r3, r3, #2
   1266c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12670:	add	r3, r2, r3
   12674:	ldrb	r3, [r3]
   12678:	sub	r3, r3, #33	; 0x21
   1267c:	cmp	r3, #29
   12680:	ldrls	pc, [pc, r3, lsl #2]
   12684:	b	127f4 <__assert_fail@plt+0x1a7c>
   12688:	andeq	r2, r1, r0, lsl #14
   1268c:	strdeq	r2, [r1], -r4
   12690:	strdeq	r2, [r1], -r4
   12694:	strdeq	r2, [r1], -r4
   12698:	strdeq	r2, [r1], -r4
   1269c:	strdeq	r2, [r1], -r4
   126a0:	andeq	r2, r1, r0, lsl #14
   126a4:	andeq	r2, r1, r0, lsl #14
   126a8:	andeq	r2, r1, r0, lsl #14
   126ac:	strdeq	r2, [r1], -r4
   126b0:	strdeq	r2, [r1], -r4
   126b4:	strdeq	r2, [r1], -r4
   126b8:	andeq	r2, r1, r0, lsl #14
   126bc:	strdeq	r2, [r1], -r4
   126c0:	andeq	r2, r1, r0, lsl #14
   126c4:	strdeq	r2, [r1], -r4
   126c8:	strdeq	r2, [r1], -r4
   126cc:	strdeq	r2, [r1], -r4
   126d0:	strdeq	r2, [r1], -r4
   126d4:	strdeq	r2, [r1], -r4
   126d8:	strdeq	r2, [r1], -r4
   126dc:	strdeq	r2, [r1], -r4
   126e0:	strdeq	r2, [r1], -r4
   126e4:	strdeq	r2, [r1], -r4
   126e8:	strdeq	r2, [r1], -r4
   126ec:	strdeq	r2, [r1], -r4
   126f0:	strdeq	r2, [r1], -r4
   126f4:	andeq	r2, r1, r0, lsl #14
   126f8:	andeq	r2, r1, r0, lsl #14
   126fc:	andeq	r2, r1, r0, lsl #14
   12700:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12704:	cmp	r3, #0
   12708:	bne	13498 <__assert_fail@plt+0x2720>
   1270c:	ldr	r3, [fp, #-16]
   12710:	add	r3, r3, #2
   12714:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12718:	add	r3, r2, r3
   1271c:	ldrb	r3, [r3]
   12720:	strb	r3, [fp, #-38]	; 0xffffffda
   12724:	ldr	r3, [fp, #-16]
   12728:	add	r3, r3, #2
   1272c:	str	r3, [fp, #-16]
   12730:	ldr	r2, [fp, #-20]	; 0xffffffec
   12734:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12738:	cmp	r2, r3
   1273c:	bcs	12754 <__assert_fail@plt+0x19dc>
   12740:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12744:	ldr	r3, [fp, #-20]	; 0xffffffec
   12748:	add	r3, r2, r3
   1274c:	mov	r2, #63	; 0x3f
   12750:	strb	r2, [r3]
   12754:	ldr	r3, [fp, #-20]	; 0xffffffec
   12758:	add	r3, r3, #1
   1275c:	str	r3, [fp, #-20]	; 0xffffffec
   12760:	ldr	r2, [fp, #-20]	; 0xffffffec
   12764:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12768:	cmp	r2, r3
   1276c:	bcs	12784 <__assert_fail@plt+0x1a0c>
   12770:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12774:	ldr	r3, [fp, #-20]	; 0xffffffec
   12778:	add	r3, r2, r3
   1277c:	mov	r2, #34	; 0x22
   12780:	strb	r2, [r3]
   12784:	ldr	r3, [fp, #-20]	; 0xffffffec
   12788:	add	r3, r3, #1
   1278c:	str	r3, [fp, #-20]	; 0xffffffec
   12790:	ldr	r2, [fp, #-20]	; 0xffffffec
   12794:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12798:	cmp	r2, r3
   1279c:	bcs	127b4 <__assert_fail@plt+0x1a3c>
   127a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   127a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   127a8:	add	r3, r2, r3
   127ac:	mov	r2, #34	; 0x22
   127b0:	strb	r2, [r3]
   127b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   127b8:	add	r3, r3, #1
   127bc:	str	r3, [fp, #-20]	; 0xffffffec
   127c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   127c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   127c8:	cmp	r2, r3
   127cc:	bcs	127e4 <__assert_fail@plt+0x1a6c>
   127d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   127d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   127d8:	add	r3, r2, r3
   127dc:	mov	r2, #63	; 0x3f
   127e0:	strb	r2, [r3]
   127e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   127e8:	add	r3, r3, #1
   127ec:	str	r3, [fp, #-20]	; 0xffffffec
   127f0:	b	127f8 <__assert_fail@plt+0x1a80>
   127f4:	nop			; (mov r0, r0)
   127f8:	b	12804 <__assert_fail@plt+0x1a8c>
   127fc:	nop			; (mov r0, r0)
   12800:	b	13050 <__assert_fail@plt+0x22d8>
   12804:	nop			; (mov r0, r0)
   12808:	b	13050 <__assert_fail@plt+0x22d8>
   1280c:	mov	r3, #97	; 0x61
   12810:	strb	r3, [fp, #-39]	; 0xffffffd9
   12814:	b	128c0 <__assert_fail@plt+0x1b48>
   12818:	mov	r3, #98	; 0x62
   1281c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12820:	b	128c0 <__assert_fail@plt+0x1b48>
   12824:	mov	r3, #102	; 0x66
   12828:	strb	r3, [fp, #-39]	; 0xffffffd9
   1282c:	b	128c0 <__assert_fail@plt+0x1b48>
   12830:	mov	r3, #110	; 0x6e
   12834:	strb	r3, [fp, #-39]	; 0xffffffd9
   12838:	b	128a8 <__assert_fail@plt+0x1b30>
   1283c:	mov	r3, #114	; 0x72
   12840:	strb	r3, [fp, #-39]	; 0xffffffd9
   12844:	b	128a8 <__assert_fail@plt+0x1b30>
   12848:	mov	r3, #116	; 0x74
   1284c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12850:	b	128a8 <__assert_fail@plt+0x1b30>
   12854:	mov	r3, #118	; 0x76
   12858:	strb	r3, [fp, #-39]	; 0xffffffd9
   1285c:	b	128c0 <__assert_fail@plt+0x1b48>
   12860:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12864:	strb	r3, [fp, #-39]	; 0xffffffd9
   12868:	ldr	r3, [fp, #4]
   1286c:	cmp	r3, #2
   12870:	bne	12884 <__assert_fail@plt+0x1b0c>
   12874:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12878:	cmp	r3, #0
   1287c:	beq	131d8 <__assert_fail@plt+0x2460>
   12880:	b	134cc <__assert_fail@plt+0x2754>
   12884:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12888:	cmp	r3, #0
   1288c:	beq	128a8 <__assert_fail@plt+0x1b30>
   12890:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12894:	cmp	r3, #0
   12898:	beq	128a8 <__assert_fail@plt+0x1b30>
   1289c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   128a0:	cmp	r3, #0
   128a4:	bne	131e0 <__assert_fail@plt+0x2468>
   128a8:	ldr	r3, [fp, #4]
   128ac:	cmp	r3, #2
   128b0:	bne	128c0 <__assert_fail@plt+0x1b48>
   128b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   128b8:	cmp	r3, #0
   128bc:	bne	134a0 <__assert_fail@plt+0x2728>
   128c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   128c4:	cmp	r3, #0
   128c8:	beq	1302c <__assert_fail@plt+0x22b4>
   128cc:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   128d0:	strb	r3, [fp, #-38]	; 0xffffffda
   128d4:	b	130d8 <__assert_fail@plt+0x2360>
   128d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   128dc:	cmn	r3, #1
   128e0:	bne	12904 <__assert_fail@plt+0x1b8c>
   128e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   128e8:	add	r3, r3, #1
   128ec:	ldrb	r3, [r3]
   128f0:	cmp	r3, #0
   128f4:	movne	r3, #1
   128f8:	moveq	r3, #0
   128fc:	uxtb	r3, r3
   12900:	b	12918 <__assert_fail@plt+0x1ba0>
   12904:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12908:	cmp	r3, #1
   1290c:	movne	r3, #1
   12910:	moveq	r3, #0
   12914:	uxtb	r3, r3
   12918:	cmp	r3, #0
   1291c:	bne	13034 <__assert_fail@plt+0x22bc>
   12920:	ldr	r3, [fp, #-16]
   12924:	cmp	r3, #0
   12928:	bne	1303c <__assert_fail@plt+0x22c4>
   1292c:	mov	r3, #1
   12930:	strb	r3, [fp, #-42]	; 0xffffffd6
   12934:	ldr	r3, [fp, #4]
   12938:	cmp	r3, #2
   1293c:	bne	13044 <__assert_fail@plt+0x22cc>
   12940:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12944:	cmp	r3, #0
   12948:	beq	13044 <__assert_fail@plt+0x22cc>
   1294c:	b	134cc <__assert_fail@plt+0x2754>
   12950:	mov	r3, #1
   12954:	strb	r3, [fp, #-36]	; 0xffffffdc
   12958:	mov	r3, #1
   1295c:	strb	r3, [fp, #-42]	; 0xffffffd6
   12960:	ldr	r3, [fp, #4]
   12964:	cmp	r3, #2
   12968:	bne	1304c <__assert_fail@plt+0x22d4>
   1296c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12970:	cmp	r3, #0
   12974:	bne	134a8 <__assert_fail@plt+0x2730>
   12978:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1297c:	cmp	r3, #0
   12980:	beq	129a0 <__assert_fail@plt+0x1c28>
   12984:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12988:	cmp	r3, #0
   1298c:	bne	129a0 <__assert_fail@plt+0x1c28>
   12990:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12994:	str	r3, [fp, #-24]	; 0xffffffe8
   12998:	mov	r3, #0
   1299c:	str	r3, [fp, #-92]	; 0xffffffa4
   129a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   129a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   129a8:	cmp	r2, r3
   129ac:	bcs	129c4 <__assert_fail@plt+0x1c4c>
   129b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   129b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   129b8:	add	r3, r2, r3
   129bc:	mov	r2, #39	; 0x27
   129c0:	strb	r2, [r3]
   129c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   129c8:	add	r3, r3, #1
   129cc:	str	r3, [fp, #-20]	; 0xffffffec
   129d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   129d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   129d8:	cmp	r2, r3
   129dc:	bcs	129f4 <__assert_fail@plt+0x1c7c>
   129e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   129e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   129e8:	add	r3, r2, r3
   129ec:	mov	r2, #92	; 0x5c
   129f0:	strb	r2, [r3]
   129f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   129f8:	add	r3, r3, #1
   129fc:	str	r3, [fp, #-20]	; 0xffffffec
   12a00:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a08:	cmp	r2, r3
   12a0c:	bcs	12a24 <__assert_fail@plt+0x1cac>
   12a10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a14:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a18:	add	r3, r2, r3
   12a1c:	mov	r2, #39	; 0x27
   12a20:	strb	r2, [r3]
   12a24:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a28:	add	r3, r3, #1
   12a2c:	str	r3, [fp, #-20]	; 0xffffffec
   12a30:	mov	r3, #0
   12a34:	strb	r3, [fp, #-35]	; 0xffffffdd
   12a38:	b	1304c <__assert_fail@plt+0x22d4>
   12a3c:	mov	r3, #1
   12a40:	strb	r3, [fp, #-42]	; 0xffffffd6
   12a44:	b	13050 <__assert_fail@plt+0x22d8>
   12a48:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   12a4c:	cmp	r3, #0
   12a50:	beq	12a90 <__assert_fail@plt+0x1d18>
   12a54:	mov	r3, #1
   12a58:	str	r3, [fp, #-48]	; 0xffffffd0
   12a5c:	bl	10c88 <__ctype_b_loc@plt>
   12a60:	mov	r3, r0
   12a64:	ldr	r2, [r3]
   12a68:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12a6c:	lsl	r3, r3, #1
   12a70:	add	r3, r2, r3
   12a74:	ldrh	r3, [r3]
   12a78:	and	r3, r3, #16384	; 0x4000
   12a7c:	cmp	r3, #0
   12a80:	movne	r3, #1
   12a84:	moveq	r3, #0
   12a88:	strb	r3, [fp, #-49]	; 0xffffffcf
   12a8c:	b	12cdc <__assert_fail@plt+0x1f64>
   12a90:	sub	r3, fp, #76	; 0x4c
   12a94:	mov	r2, #8
   12a98:	mov	r1, #0
   12a9c:	mov	r0, r3
   12aa0:	bl	10cdc <memset@plt>
   12aa4:	mov	r3, #0
   12aa8:	str	r3, [fp, #-48]	; 0xffffffd0
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [fp, #-49]	; 0xffffffcf
   12ab4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12ab8:	cmn	r3, #1
   12abc:	bne	12acc <__assert_fail@plt+0x1d54>
   12ac0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12ac4:	bl	10cac <strlen@plt>
   12ac8:	str	r0, [fp, #-100]	; 0xffffff9c
   12acc:	ldr	r2, [fp, #-16]
   12ad0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ad4:	add	r3, r2, r3
   12ad8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12adc:	add	r1, r2, r3
   12ae0:	ldr	r2, [fp, #-16]
   12ae4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ae8:	add	r3, r2, r3
   12aec:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12af0:	sub	r2, r2, r3
   12af4:	sub	r3, fp, #76	; 0x4c
   12af8:	sub	r0, fp, #80	; 0x50
   12afc:	bl	157a8 <__assert_fail@plt+0x4a30>
   12b00:	str	r0, [fp, #-64]	; 0xffffffc0
   12b04:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12b08:	cmp	r3, #0
   12b0c:	beq	12cd0 <__assert_fail@plt+0x1f58>
   12b10:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12b14:	cmn	r3, #1
   12b18:	bne	12b28 <__assert_fail@plt+0x1db0>
   12b1c:	mov	r3, #0
   12b20:	strb	r3, [fp, #-49]	; 0xffffffcf
   12b24:	b	12cdc <__assert_fail@plt+0x1f64>
   12b28:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12b2c:	cmn	r3, #2
   12b30:	bne	12b88 <__assert_fail@plt+0x1e10>
   12b34:	mov	r3, #0
   12b38:	strb	r3, [fp, #-49]	; 0xffffffcf
   12b3c:	b	12b4c <__assert_fail@plt+0x1dd4>
   12b40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b44:	add	r3, r3, #1
   12b48:	str	r3, [fp, #-48]	; 0xffffffd0
   12b4c:	ldr	r2, [fp, #-16]
   12b50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b54:	add	r2, r2, r3
   12b58:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12b5c:	cmp	r2, r3
   12b60:	bcs	12cd8 <__assert_fail@plt+0x1f60>
   12b64:	ldr	r2, [fp, #-16]
   12b68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b6c:	add	r3, r2, r3
   12b70:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12b74:	add	r3, r2, r3
   12b78:	ldrb	r3, [r3]
   12b7c:	cmp	r3, #0
   12b80:	bne	12b40 <__assert_fail@plt+0x1dc8>
   12b84:	b	12cd8 <__assert_fail@plt+0x1f60>
   12b88:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12b8c:	cmp	r3, #0
   12b90:	beq	12c84 <__assert_fail@plt+0x1f0c>
   12b94:	ldr	r3, [fp, #4]
   12b98:	cmp	r3, #2
   12b9c:	bne	12c84 <__assert_fail@plt+0x1f0c>
   12ba0:	mov	r3, #1
   12ba4:	str	r3, [fp, #-56]	; 0xffffffc8
   12ba8:	b	12c74 <__assert_fail@plt+0x1efc>
   12bac:	ldr	r2, [fp, #-16]
   12bb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12bb4:	add	r2, r2, r3
   12bb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12bbc:	add	r3, r2, r3
   12bc0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12bc4:	add	r3, r2, r3
   12bc8:	ldrb	r3, [r3]
   12bcc:	sub	r3, r3, #91	; 0x5b
   12bd0:	cmp	r3, #33	; 0x21
   12bd4:	ldrls	pc, [pc, r3, lsl #2]
   12bd8:	b	12c64 <__assert_fail@plt+0x1eec>
   12bdc:			; <UNDEFINED> instruction: 0x000134b0
   12be0:			; <UNDEFINED> instruction: 0x000134b0
   12be4:	andeq	r2, r1, r4, ror #24
   12be8:			; <UNDEFINED> instruction: 0x000134b0
   12bec:	andeq	r2, r1, r4, ror #24
   12bf0:			; <UNDEFINED> instruction: 0x000134b0
   12bf4:	andeq	r2, r1, r4, ror #24
   12bf8:	andeq	r2, r1, r4, ror #24
   12bfc:	andeq	r2, r1, r4, ror #24
   12c00:	andeq	r2, r1, r4, ror #24
   12c04:	andeq	r2, r1, r4, ror #24
   12c08:	andeq	r2, r1, r4, ror #24
   12c0c:	andeq	r2, r1, r4, ror #24
   12c10:	andeq	r2, r1, r4, ror #24
   12c14:	andeq	r2, r1, r4, ror #24
   12c18:	andeq	r2, r1, r4, ror #24
   12c1c:	andeq	r2, r1, r4, ror #24
   12c20:	andeq	r2, r1, r4, ror #24
   12c24:	andeq	r2, r1, r4, ror #24
   12c28:	andeq	r2, r1, r4, ror #24
   12c2c:	andeq	r2, r1, r4, ror #24
   12c30:	andeq	r2, r1, r4, ror #24
   12c34:	andeq	r2, r1, r4, ror #24
   12c38:	andeq	r2, r1, r4, ror #24
   12c3c:	andeq	r2, r1, r4, ror #24
   12c40:	andeq	r2, r1, r4, ror #24
   12c44:	andeq	r2, r1, r4, ror #24
   12c48:	andeq	r2, r1, r4, ror #24
   12c4c:	andeq	r2, r1, r4, ror #24
   12c50:	andeq	r2, r1, r4, ror #24
   12c54:	andeq	r2, r1, r4, ror #24
   12c58:	andeq	r2, r1, r4, ror #24
   12c5c:	andeq	r2, r1, r4, ror #24
   12c60:			; <UNDEFINED> instruction: 0x000134b0
   12c64:	nop			; (mov r0, r0)
   12c68:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c6c:	add	r3, r3, #1
   12c70:	str	r3, [fp, #-56]	; 0xffffffc8
   12c74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12c7c:	cmp	r2, r3
   12c80:	bcc	12bac <__assert_fail@plt+0x1e34>
   12c84:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12c88:	mov	r0, r3
   12c8c:	bl	10bf8 <iswprint@plt>
   12c90:	mov	r3, r0
   12c94:	cmp	r3, #0
   12c98:	bne	12ca4 <__assert_fail@plt+0x1f2c>
   12c9c:	mov	r3, #0
   12ca0:	strb	r3, [fp, #-49]	; 0xffffffcf
   12ca4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ca8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12cac:	add	r3, r2, r3
   12cb0:	str	r3, [fp, #-48]	; 0xffffffd0
   12cb4:	sub	r3, fp, #76	; 0x4c
   12cb8:	mov	r0, r3
   12cbc:	bl	10bd4 <mbsinit@plt>
   12cc0:	mov	r3, r0
   12cc4:	cmp	r3, #0
   12cc8:	beq	12acc <__assert_fail@plt+0x1d54>
   12ccc:	b	12cdc <__assert_fail@plt+0x1f64>
   12cd0:	nop			; (mov r0, r0)
   12cd4:	b	12cdc <__assert_fail@plt+0x1f64>
   12cd8:	nop			; (mov r0, r0)
   12cdc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12ce0:	strb	r3, [fp, #-42]	; 0xffffffd6
   12ce4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ce8:	cmp	r3, #1
   12cec:	bhi	12d10 <__assert_fail@plt+0x1f98>
   12cf0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12cf4:	cmp	r3, #0
   12cf8:	beq	13050 <__assert_fail@plt+0x22d8>
   12cfc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12d00:	eor	r3, r3, #1
   12d04:	uxtb	r3, r3
   12d08:	cmp	r3, #0
   12d0c:	beq	13050 <__assert_fail@plt+0x22d8>
   12d10:	ldr	r2, [fp, #-16]
   12d14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d18:	add	r3, r2, r3
   12d1c:	str	r3, [fp, #-68]	; 0xffffffbc
   12d20:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12d24:	cmp	r3, #0
   12d28:	beq	12ee8 <__assert_fail@plt+0x2170>
   12d2c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12d30:	eor	r3, r3, #1
   12d34:	uxtb	r3, r3
   12d38:	cmp	r3, #0
   12d3c:	beq	12ee8 <__assert_fail@plt+0x2170>
   12d40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d44:	cmp	r3, #0
   12d48:	bne	134b8 <__assert_fail@plt+0x2740>
   12d4c:	mov	r3, #1
   12d50:	strb	r3, [fp, #-41]	; 0xffffffd7
   12d54:	ldr	r3, [fp, #4]
   12d58:	cmp	r3, #2
   12d5c:	bne	12e0c <__assert_fail@plt+0x2094>
   12d60:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12d64:	eor	r3, r3, #1
   12d68:	uxtb	r3, r3
   12d6c:	cmp	r3, #0
   12d70:	beq	12e0c <__assert_fail@plt+0x2094>
   12d74:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d7c:	cmp	r2, r3
   12d80:	bcs	12d98 <__assert_fail@plt+0x2020>
   12d84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d8c:	add	r3, r2, r3
   12d90:	mov	r2, #39	; 0x27
   12d94:	strb	r2, [r3]
   12d98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d9c:	add	r3, r3, #1
   12da0:	str	r3, [fp, #-20]	; 0xffffffec
   12da4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12da8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12dac:	cmp	r2, r3
   12db0:	bcs	12dc8 <__assert_fail@plt+0x2050>
   12db4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12db8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dbc:	add	r3, r2, r3
   12dc0:	mov	r2, #36	; 0x24
   12dc4:	strb	r2, [r3]
   12dc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dcc:	add	r3, r3, #1
   12dd0:	str	r3, [fp, #-20]	; 0xffffffec
   12dd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ddc:	cmp	r2, r3
   12de0:	bcs	12df8 <__assert_fail@plt+0x2080>
   12de4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dec:	add	r3, r2, r3
   12df0:	mov	r2, #39	; 0x27
   12df4:	strb	r2, [r3]
   12df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dfc:	add	r3, r3, #1
   12e00:	str	r3, [fp, #-20]	; 0xffffffec
   12e04:	mov	r3, #1
   12e08:	strb	r3, [fp, #-35]	; 0xffffffdd
   12e0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e14:	cmp	r2, r3
   12e18:	bcs	12e30 <__assert_fail@plt+0x20b8>
   12e1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e24:	add	r3, r2, r3
   12e28:	mov	r2, #92	; 0x5c
   12e2c:	strb	r2, [r3]
   12e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e34:	add	r3, r3, #1
   12e38:	str	r3, [fp, #-20]	; 0xffffffec
   12e3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e44:	cmp	r2, r3
   12e48:	bcs	12e70 <__assert_fail@plt+0x20f8>
   12e4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e54:	add	r3, r2, r3
   12e58:	ldrb	r2, [fp, #-38]	; 0xffffffda
   12e5c:	lsr	r2, r2, #6
   12e60:	uxtb	r2, r2
   12e64:	add	r2, r2, #48	; 0x30
   12e68:	uxtb	r2, r2
   12e6c:	strb	r2, [r3]
   12e70:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e74:	add	r3, r3, #1
   12e78:	str	r3, [fp, #-20]	; 0xffffffec
   12e7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e84:	cmp	r2, r3
   12e88:	bcs	12eb8 <__assert_fail@plt+0x2140>
   12e8c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e90:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e94:	add	r3, r2, r3
   12e98:	ldrb	r2, [fp, #-38]	; 0xffffffda
   12e9c:	lsr	r2, r2, #3
   12ea0:	uxtb	r2, r2
   12ea4:	and	r2, r2, #7
   12ea8:	uxtb	r2, r2
   12eac:	add	r2, r2, #48	; 0x30
   12eb0:	uxtb	r2, r2
   12eb4:	strb	r2, [r3]
   12eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ebc:	add	r3, r3, #1
   12ec0:	str	r3, [fp, #-20]	; 0xffffffec
   12ec4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12ec8:	and	r3, r3, #7
   12ecc:	uxtb	r3, r3
   12ed0:	add	r3, r3, #48	; 0x30
   12ed4:	strb	r3, [fp, #-38]	; 0xffffffda
   12ed8:	b	12f2c <__assert_fail@plt+0x21b4>
   12edc:	strdeq	r6, [r1], -r8
   12ee0:	andeq	r6, r1, r0, lsl #28
   12ee4:	strdeq	r6, [r1], -ip
   12ee8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   12eec:	cmp	r3, #0
   12ef0:	beq	12f2c <__assert_fail@plt+0x21b4>
   12ef4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ef8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12efc:	cmp	r2, r3
   12f00:	bcs	12f18 <__assert_fail@plt+0x21a0>
   12f04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f08:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f0c:	add	r3, r2, r3
   12f10:	mov	r2, #92	; 0x5c
   12f14:	strb	r2, [r3]
   12f18:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f1c:	add	r3, r3, #1
   12f20:	str	r3, [fp, #-20]	; 0xffffffec
   12f24:	mov	r3, #0
   12f28:	strb	r3, [fp, #-40]	; 0xffffffd8
   12f2c:	ldr	r3, [fp, #-16]
   12f30:	add	r2, r3, #1
   12f34:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12f38:	cmp	r2, r3
   12f3c:	bcs	1301c <__assert_fail@plt+0x22a4>
   12f40:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12f44:	cmp	r3, #0
   12f48:	beq	12fc8 <__assert_fail@plt+0x2250>
   12f4c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   12f50:	eor	r3, r3, #1
   12f54:	uxtb	r3, r3
   12f58:	cmp	r3, #0
   12f5c:	beq	12fc8 <__assert_fail@plt+0x2250>
   12f60:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f68:	cmp	r2, r3
   12f6c:	bcs	12f84 <__assert_fail@plt+0x220c>
   12f70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f78:	add	r3, r2, r3
   12f7c:	mov	r2, #39	; 0x27
   12f80:	strb	r2, [r3]
   12f84:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f88:	add	r3, r3, #1
   12f8c:	str	r3, [fp, #-20]	; 0xffffffec
   12f90:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f94:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f98:	cmp	r2, r3
   12f9c:	bcs	12fb4 <__assert_fail@plt+0x223c>
   12fa0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fa8:	add	r3, r2, r3
   12fac:	mov	r2, #39	; 0x27
   12fb0:	strb	r2, [r3]
   12fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fb8:	add	r3, r3, #1
   12fbc:	str	r3, [fp, #-20]	; 0xffffffec
   12fc0:	mov	r3, #0
   12fc4:	strb	r3, [fp, #-35]	; 0xffffffdd
   12fc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12fcc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12fd0:	cmp	r2, r3
   12fd4:	bcs	12fec <__assert_fail@plt+0x2274>
   12fd8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fe0:	add	r3, r2, r3
   12fe4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   12fe8:	strb	r2, [r3]
   12fec:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ff0:	add	r3, r3, #1
   12ff4:	str	r3, [fp, #-20]	; 0xffffffec
   12ff8:	ldr	r3, [fp, #-16]
   12ffc:	add	r3, r3, #1
   13000:	str	r3, [fp, #-16]
   13004:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13008:	ldr	r3, [fp, #-16]
   1300c:	add	r3, r2, r3
   13010:	ldrb	r3, [r3]
   13014:	strb	r3, [fp, #-38]	; 0xffffffda
   13018:	b	12d20 <__assert_fail@plt+0x1fa8>
   1301c:	nop			; (mov r0, r0)
   13020:	b	131ec <__assert_fail@plt+0x2474>
   13024:	nop			; (mov r0, r0)
   13028:	b	13050 <__assert_fail@plt+0x22d8>
   1302c:	nop			; (mov r0, r0)
   13030:	b	13050 <__assert_fail@plt+0x22d8>
   13034:	nop			; (mov r0, r0)
   13038:	b	13050 <__assert_fail@plt+0x22d8>
   1303c:	nop			; (mov r0, r0)
   13040:	b	13050 <__assert_fail@plt+0x22d8>
   13044:	nop			; (mov r0, r0)
   13048:	b	13050 <__assert_fail@plt+0x22d8>
   1304c:	nop			; (mov r0, r0)
   13050:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13054:	eor	r3, r3, #1
   13058:	uxtb	r3, r3
   1305c:	cmp	r3, #0
   13060:	bne	13070 <__assert_fail@plt+0x22f8>
   13064:	ldr	r3, [fp, #4]
   13068:	cmp	r3, #2
   1306c:	bne	13084 <__assert_fail@plt+0x230c>
   13070:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13074:	eor	r3, r3, #1
   13078:	uxtb	r3, r3
   1307c:	cmp	r3, #0
   13080:	bne	130c4 <__assert_fail@plt+0x234c>
   13084:	ldr	r3, [fp, #12]
   13088:	cmp	r3, #0
   1308c:	beq	130c4 <__assert_fail@plt+0x234c>
   13090:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13094:	lsr	r3, r3, #5
   13098:	uxtb	r3, r3
   1309c:	lsl	r3, r3, #2
   130a0:	ldr	r2, [fp, #12]
   130a4:	add	r3, r2, r3
   130a8:	ldr	r2, [r3]
   130ac:	ldrb	r3, [fp, #-38]	; 0xffffffda
   130b0:	and	r3, r3, #31
   130b4:	lsr	r3, r2, r3
   130b8:	and	r3, r3, #1
   130bc:	cmp	r3, #0
   130c0:	bne	130d8 <__assert_fail@plt+0x2360>
   130c4:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   130c8:	eor	r3, r3, #1
   130cc:	uxtb	r3, r3
   130d0:	cmp	r3, #0
   130d4:	bne	131e8 <__assert_fail@plt+0x2470>
   130d8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   130dc:	cmp	r3, #0
   130e0:	bne	134c0 <__assert_fail@plt+0x2748>
   130e4:	mov	r3, #1
   130e8:	strb	r3, [fp, #-41]	; 0xffffffd7
   130ec:	ldr	r3, [fp, #4]
   130f0:	cmp	r3, #2
   130f4:	bne	131a4 <__assert_fail@plt+0x242c>
   130f8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   130fc:	eor	r3, r3, #1
   13100:	uxtb	r3, r3
   13104:	cmp	r3, #0
   13108:	beq	131a4 <__assert_fail@plt+0x242c>
   1310c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13110:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13114:	cmp	r2, r3
   13118:	bcs	13130 <__assert_fail@plt+0x23b8>
   1311c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13120:	ldr	r3, [fp, #-20]	; 0xffffffec
   13124:	add	r3, r2, r3
   13128:	mov	r2, #39	; 0x27
   1312c:	strb	r2, [r3]
   13130:	ldr	r3, [fp, #-20]	; 0xffffffec
   13134:	add	r3, r3, #1
   13138:	str	r3, [fp, #-20]	; 0xffffffec
   1313c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13140:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13144:	cmp	r2, r3
   13148:	bcs	13160 <__assert_fail@plt+0x23e8>
   1314c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13150:	ldr	r3, [fp, #-20]	; 0xffffffec
   13154:	add	r3, r2, r3
   13158:	mov	r2, #36	; 0x24
   1315c:	strb	r2, [r3]
   13160:	ldr	r3, [fp, #-20]	; 0xffffffec
   13164:	add	r3, r3, #1
   13168:	str	r3, [fp, #-20]	; 0xffffffec
   1316c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13170:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13174:	cmp	r2, r3
   13178:	bcs	13190 <__assert_fail@plt+0x2418>
   1317c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13180:	ldr	r3, [fp, #-20]	; 0xffffffec
   13184:	add	r3, r2, r3
   13188:	mov	r2, #39	; 0x27
   1318c:	strb	r2, [r3]
   13190:	ldr	r3, [fp, #-20]	; 0xffffffec
   13194:	add	r3, r3, #1
   13198:	str	r3, [fp, #-20]	; 0xffffffec
   1319c:	mov	r3, #1
   131a0:	strb	r3, [fp, #-35]	; 0xffffffdd
   131a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   131a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131ac:	cmp	r2, r3
   131b0:	bcs	131c8 <__assert_fail@plt+0x2450>
   131b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131bc:	add	r3, r2, r3
   131c0:	mov	r2, #92	; 0x5c
   131c4:	strb	r2, [r3]
   131c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131cc:	add	r3, r3, #1
   131d0:	str	r3, [fp, #-20]	; 0xffffffec
   131d4:	b	131ec <__assert_fail@plt+0x2474>
   131d8:	nop			; (mov r0, r0)
   131dc:	b	131ec <__assert_fail@plt+0x2474>
   131e0:	nop			; (mov r0, r0)
   131e4:	b	131ec <__assert_fail@plt+0x2474>
   131e8:	nop			; (mov r0, r0)
   131ec:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   131f0:	cmp	r3, #0
   131f4:	beq	13274 <__assert_fail@plt+0x24fc>
   131f8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   131fc:	eor	r3, r3, #1
   13200:	uxtb	r3, r3
   13204:	cmp	r3, #0
   13208:	beq	13274 <__assert_fail@plt+0x24fc>
   1320c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13210:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13214:	cmp	r2, r3
   13218:	bcs	13230 <__assert_fail@plt+0x24b8>
   1321c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13220:	ldr	r3, [fp, #-20]	; 0xffffffec
   13224:	add	r3, r2, r3
   13228:	mov	r2, #39	; 0x27
   1322c:	strb	r2, [r3]
   13230:	ldr	r3, [fp, #-20]	; 0xffffffec
   13234:	add	r3, r3, #1
   13238:	str	r3, [fp, #-20]	; 0xffffffec
   1323c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13240:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13244:	cmp	r2, r3
   13248:	bcs	13260 <__assert_fail@plt+0x24e8>
   1324c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13250:	ldr	r3, [fp, #-20]	; 0xffffffec
   13254:	add	r3, r2, r3
   13258:	mov	r2, #39	; 0x27
   1325c:	strb	r2, [r3]
   13260:	ldr	r3, [fp, #-20]	; 0xffffffec
   13264:	add	r3, r3, #1
   13268:	str	r3, [fp, #-20]	; 0xffffffec
   1326c:	mov	r3, #0
   13270:	strb	r3, [fp, #-35]	; 0xffffffdd
   13274:	ldr	r2, [fp, #-20]	; 0xffffffec
   13278:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1327c:	cmp	r2, r3
   13280:	bcs	13298 <__assert_fail@plt+0x2520>
   13284:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1328c:	add	r3, r2, r3
   13290:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13294:	strb	r2, [r3]
   13298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1329c:	add	r3, r3, #1
   132a0:	str	r3, [fp, #-20]	; 0xffffffec
   132a4:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   132a8:	eor	r3, r3, #1
   132ac:	uxtb	r3, r3
   132b0:	cmp	r3, #0
   132b4:	beq	132c0 <__assert_fail@plt+0x2548>
   132b8:	mov	r3, #0
   132bc:	strb	r3, [fp, #-37]	; 0xffffffdb
   132c0:	ldr	r3, [fp, #-16]
   132c4:	add	r3, r3, #1
   132c8:	str	r3, [fp, #-16]
   132cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   132d0:	cmn	r3, #1
   132d4:	bne	132fc <__assert_fail@plt+0x2584>
   132d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   132dc:	ldr	r3, [fp, #-16]
   132e0:	add	r3, r2, r3
   132e4:	ldrb	r3, [r3]
   132e8:	cmp	r3, #0
   132ec:	movne	r3, #1
   132f0:	moveq	r3, #0
   132f4:	uxtb	r3, r3
   132f8:	b	13314 <__assert_fail@plt+0x259c>
   132fc:	ldr	r2, [fp, #-16]
   13300:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13304:	cmp	r2, r3
   13308:	movne	r3, #1
   1330c:	moveq	r3, #0
   13310:	uxtb	r3, r3
   13314:	cmp	r3, #0
   13318:	bne	12140 <__assert_fail@plt+0x13c8>
   1331c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13320:	cmp	r3, #0
   13324:	bne	13340 <__assert_fail@plt+0x25c8>
   13328:	ldr	r3, [fp, #4]
   1332c:	cmp	r3, #2
   13330:	bne	13340 <__assert_fail@plt+0x25c8>
   13334:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13338:	cmp	r3, #0
   1333c:	bne	134c8 <__assert_fail@plt+0x2750>
   13340:	ldr	r3, [fp, #4]
   13344:	cmp	r3, #2
   13348:	bne	133e8 <__assert_fail@plt+0x2670>
   1334c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13350:	eor	r3, r3, #1
   13354:	uxtb	r3, r3
   13358:	cmp	r3, #0
   1335c:	beq	133e8 <__assert_fail@plt+0x2670>
   13360:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   13364:	cmp	r3, #0
   13368:	beq	133e8 <__assert_fail@plt+0x2670>
   1336c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13370:	cmp	r3, #0
   13374:	beq	133bc <__assert_fail@plt+0x2644>
   13378:	ldr	r3, [fp, #20]
   1337c:	str	r3, [sp, #16]
   13380:	ldr	r3, [fp, #16]
   13384:	str	r3, [sp, #12]
   13388:	ldr	r3, [fp, #12]
   1338c:	str	r3, [sp, #8]
   13390:	ldr	r3, [fp, #8]
   13394:	str	r3, [sp, #4]
   13398:	mov	r3, #5
   1339c:	str	r3, [sp]
   133a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   133a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   133ac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   133b0:	bl	11e90 <__assert_fail@plt+0x1118>
   133b4:	mov	r3, r0
   133b8:	b	13530 <__assert_fail@plt+0x27b8>
   133bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133c0:	cmp	r3, #0
   133c4:	bne	133e8 <__assert_fail@plt+0x2670>
   133c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   133cc:	cmp	r3, #0
   133d0:	beq	133e8 <__assert_fail@plt+0x2670>
   133d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   133d8:	str	r3, [fp, #-92]	; 0xffffffa4
   133dc:	mov	r3, #0
   133e0:	str	r3, [fp, #-20]	; 0xffffffec
   133e4:	b	11f1c <__assert_fail@plt+0x11a4>
   133e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   133ec:	cmp	r3, #0
   133f0:	beq	1345c <__assert_fail@plt+0x26e4>
   133f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   133f8:	eor	r3, r3, #1
   133fc:	uxtb	r3, r3
   13400:	cmp	r3, #0
   13404:	beq	1345c <__assert_fail@plt+0x26e4>
   13408:	b	1344c <__assert_fail@plt+0x26d4>
   1340c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13410:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13414:	cmp	r2, r3
   13418:	bcs	13434 <__assert_fail@plt+0x26bc>
   1341c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13420:	ldr	r3, [fp, #-20]	; 0xffffffec
   13424:	add	r3, r2, r3
   13428:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1342c:	ldrb	r2, [r2]
   13430:	strb	r2, [r3]
   13434:	ldr	r3, [fp, #-20]	; 0xffffffec
   13438:	add	r3, r3, #1
   1343c:	str	r3, [fp, #-20]	; 0xffffffec
   13440:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13444:	add	r3, r3, #1
   13448:	str	r3, [fp, #-28]	; 0xffffffe4
   1344c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13450:	ldrb	r3, [r3]
   13454:	cmp	r3, #0
   13458:	bne	1340c <__assert_fail@plt+0x2694>
   1345c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13460:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13464:	cmp	r2, r3
   13468:	bcs	13480 <__assert_fail@plt+0x2708>
   1346c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13470:	ldr	r3, [fp, #-20]	; 0xffffffec
   13474:	add	r3, r2, r3
   13478:	mov	r2, #0
   1347c:	strb	r2, [r3]
   13480:	ldr	r3, [fp, #-20]	; 0xffffffec
   13484:	b	13530 <__assert_fail@plt+0x27b8>
   13488:	nop			; (mov r0, r0)
   1348c:	b	134cc <__assert_fail@plt+0x2754>
   13490:	nop			; (mov r0, r0)
   13494:	b	134cc <__assert_fail@plt+0x2754>
   13498:	nop			; (mov r0, r0)
   1349c:	b	134cc <__assert_fail@plt+0x2754>
   134a0:	nop			; (mov r0, r0)
   134a4:	b	134cc <__assert_fail@plt+0x2754>
   134a8:	nop			; (mov r0, r0)
   134ac:	b	134cc <__assert_fail@plt+0x2754>
   134b0:	nop			; (mov r0, r0)
   134b4:	b	134cc <__assert_fail@plt+0x2754>
   134b8:	nop			; (mov r0, r0)
   134bc:	b	134cc <__assert_fail@plt+0x2754>
   134c0:	nop			; (mov r0, r0)
   134c4:	b	134cc <__assert_fail@plt+0x2754>
   134c8:	nop			; (mov r0, r0)
   134cc:	ldr	r3, [fp, #4]
   134d0:	cmp	r3, #2
   134d4:	bne	134ec <__assert_fail@plt+0x2774>
   134d8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   134dc:	cmp	r3, #0
   134e0:	beq	134ec <__assert_fail@plt+0x2774>
   134e4:	mov	r3, #4
   134e8:	str	r3, [fp, #4]
   134ec:	ldr	r3, [fp, #8]
   134f0:	bic	r3, r3, #2
   134f4:	ldr	r2, [fp, #20]
   134f8:	str	r2, [sp, #16]
   134fc:	ldr	r2, [fp, #16]
   13500:	str	r2, [sp, #12]
   13504:	mov	r2, #0
   13508:	str	r2, [sp, #8]
   1350c:	str	r3, [sp, #4]
   13510:	ldr	r3, [fp, #4]
   13514:	str	r3, [sp]
   13518:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1351c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13520:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13524:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13528:	bl	11e90 <__assert_fail@plt+0x1118>
   1352c:	mov	r3, r0
   13530:	mov	r0, r3
   13534:	sub	sp, fp, #8
   13538:	pop	{r4, fp, pc}
   1353c:	push	{fp, lr}
   13540:	add	fp, sp, #4
   13544:	sub	sp, sp, #56	; 0x38
   13548:	str	r0, [fp, #-24]	; 0xffffffe8
   1354c:	str	r1, [fp, #-28]	; 0xffffffe4
   13550:	str	r2, [fp, #-32]	; 0xffffffe0
   13554:	str	r3, [fp, #-36]	; 0xffffffdc
   13558:	ldr	r3, [fp, #4]
   1355c:	cmp	r3, #0
   13560:	beq	1356c <__assert_fail@plt+0x27f4>
   13564:	ldr	r3, [fp, #4]
   13568:	b	13570 <__assert_fail@plt+0x27f8>
   1356c:	ldr	r3, [pc, #132]	; 135f8 <__assert_fail@plt+0x2880>
   13570:	str	r3, [fp, #-8]
   13574:	bl	10cc4 <__errno_location@plt>
   13578:	mov	r3, r0
   1357c:	ldr	r3, [r3]
   13580:	str	r3, [fp, #-12]
   13584:	ldr	r3, [fp, #-8]
   13588:	ldr	r3, [r3]
   1358c:	ldr	r2, [fp, #-8]
   13590:	ldr	r2, [r2, #4]
   13594:	ldr	r1, [fp, #-8]
   13598:	add	r1, r1, #8
   1359c:	ldr	r0, [fp, #-8]
   135a0:	ldr	r0, [r0, #40]	; 0x28
   135a4:	ldr	ip, [fp, #-8]
   135a8:	ldr	ip, [ip, #44]	; 0x2c
   135ac:	str	ip, [sp, #16]
   135b0:	str	r0, [sp, #12]
   135b4:	str	r1, [sp, #8]
   135b8:	str	r2, [sp, #4]
   135bc:	str	r3, [sp]
   135c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   135c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   135c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   135cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135d0:	bl	11e90 <__assert_fail@plt+0x1118>
   135d4:	str	r0, [fp, #-16]
   135d8:	bl	10cc4 <__errno_location@plt>
   135dc:	mov	r2, r0
   135e0:	ldr	r3, [fp, #-12]
   135e4:	str	r3, [r2]
   135e8:	ldr	r3, [fp, #-16]
   135ec:	mov	r0, r3
   135f0:	sub	sp, fp, #4
   135f4:	pop	{fp, pc}
   135f8:	andeq	r8, r2, ip, asr #2
   135fc:	push	{fp, lr}
   13600:	add	fp, sp, #4
   13604:	sub	sp, sp, #16
   13608:	str	r0, [fp, #-8]
   1360c:	str	r1, [fp, #-12]
   13610:	str	r2, [fp, #-16]
   13614:	ldr	r3, [fp, #-16]
   13618:	mov	r2, #0
   1361c:	ldr	r1, [fp, #-12]
   13620:	ldr	r0, [fp, #-8]
   13624:	bl	13638 <__assert_fail@plt+0x28c0>
   13628:	mov	r3, r0
   1362c:	mov	r0, r3
   13630:	sub	sp, fp, #4
   13634:	pop	{fp, pc}
   13638:	push	{fp, lr}
   1363c:	add	fp, sp, #4
   13640:	sub	sp, sp, #64	; 0x40
   13644:	str	r0, [fp, #-32]	; 0xffffffe0
   13648:	str	r1, [fp, #-36]	; 0xffffffdc
   1364c:	str	r2, [fp, #-40]	; 0xffffffd8
   13650:	str	r3, [fp, #-44]	; 0xffffffd4
   13654:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13658:	cmp	r3, #0
   1365c:	beq	13668 <__assert_fail@plt+0x28f0>
   13660:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13664:	b	1366c <__assert_fail@plt+0x28f4>
   13668:	ldr	r3, [pc, #292]	; 13794 <__assert_fail@plt+0x2a1c>
   1366c:	str	r3, [fp, #-8]
   13670:	bl	10cc4 <__errno_location@plt>
   13674:	mov	r3, r0
   13678:	ldr	r3, [r3]
   1367c:	str	r3, [fp, #-12]
   13680:	ldr	r3, [fp, #-8]
   13684:	ldr	r3, [r3, #4]
   13688:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1368c:	cmp	r2, #0
   13690:	moveq	r2, #1
   13694:	movne	r2, #0
   13698:	uxtb	r2, r2
   1369c:	orr	r3, r3, r2
   136a0:	str	r3, [fp, #-16]
   136a4:	ldr	r3, [fp, #-8]
   136a8:	ldr	r3, [r3]
   136ac:	ldr	r2, [fp, #-8]
   136b0:	add	r2, r2, #8
   136b4:	ldr	r1, [fp, #-8]
   136b8:	ldr	r1, [r1, #40]	; 0x28
   136bc:	ldr	r0, [fp, #-8]
   136c0:	ldr	r0, [r0, #44]	; 0x2c
   136c4:	str	r0, [sp, #16]
   136c8:	str	r1, [sp, #12]
   136cc:	str	r2, [sp, #8]
   136d0:	ldr	r2, [fp, #-16]
   136d4:	str	r2, [sp, #4]
   136d8:	str	r3, [sp]
   136dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   136e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   136e4:	mov	r1, #0
   136e8:	mov	r0, #0
   136ec:	bl	11e90 <__assert_fail@plt+0x1118>
   136f0:	mov	r3, r0
   136f4:	add	r3, r3, #1
   136f8:	str	r3, [fp, #-20]	; 0xffffffec
   136fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   13700:	bl	14934 <__assert_fail@plt+0x3bbc>
   13704:	mov	r3, r0
   13708:	str	r3, [fp, #-24]	; 0xffffffe8
   1370c:	ldr	r3, [fp, #-8]
   13710:	ldr	r3, [r3]
   13714:	ldr	r2, [fp, #-8]
   13718:	add	r2, r2, #8
   1371c:	ldr	r1, [fp, #-8]
   13720:	ldr	r1, [r1, #40]	; 0x28
   13724:	ldr	r0, [fp, #-8]
   13728:	ldr	r0, [r0, #44]	; 0x2c
   1372c:	str	r0, [sp, #16]
   13730:	str	r1, [sp, #12]
   13734:	str	r2, [sp, #8]
   13738:	ldr	r2, [fp, #-16]
   1373c:	str	r2, [sp, #4]
   13740:	str	r3, [sp]
   13744:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13748:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1374c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13750:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13754:	bl	11e90 <__assert_fail@plt+0x1118>
   13758:	bl	10cc4 <__errno_location@plt>
   1375c:	mov	r2, r0
   13760:	ldr	r3, [fp, #-12]
   13764:	str	r3, [r2]
   13768:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1376c:	cmp	r3, #0
   13770:	beq	13784 <__assert_fail@plt+0x2a0c>
   13774:	ldr	r3, [fp, #-20]	; 0xffffffec
   13778:	sub	r2, r3, #1
   1377c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13780:	str	r2, [r3]
   13784:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13788:	mov	r0, r3
   1378c:	sub	sp, fp, #4
   13790:	pop	{fp, pc}
   13794:	andeq	r8, r2, ip, asr #2
   13798:	push	{fp, lr}
   1379c:	add	fp, sp, #4
   137a0:	sub	sp, sp, #8
   137a4:	ldr	r3, [pc, #196]	; 13870 <__assert_fail@plt+0x2af8>
   137a8:	ldr	r3, [r3]
   137ac:	str	r3, [fp, #-12]
   137b0:	mov	r3, #1
   137b4:	str	r3, [fp, #-8]
   137b8:	b	137e4 <__assert_fail@plt+0x2a6c>
   137bc:	ldr	r3, [fp, #-8]
   137c0:	lsl	r3, r3, #3
   137c4:	ldr	r2, [fp, #-12]
   137c8:	add	r3, r2, r3
   137cc:	ldr	r3, [r3, #4]
   137d0:	mov	r0, r3
   137d4:	bl	15590 <__assert_fail@plt+0x4818>
   137d8:	ldr	r3, [fp, #-8]
   137dc:	add	r3, r3, #1
   137e0:	str	r3, [fp, #-8]
   137e4:	ldr	r3, [pc, #136]	; 13874 <__assert_fail@plt+0x2afc>
   137e8:	ldr	r3, [r3]
   137ec:	ldr	r2, [fp, #-8]
   137f0:	cmp	r2, r3
   137f4:	blt	137bc <__assert_fail@plt+0x2a44>
   137f8:	ldr	r3, [fp, #-12]
   137fc:	ldr	r3, [r3, #4]
   13800:	ldr	r2, [pc, #112]	; 13878 <__assert_fail@plt+0x2b00>
   13804:	cmp	r3, r2
   13808:	beq	13834 <__assert_fail@plt+0x2abc>
   1380c:	ldr	r3, [fp, #-12]
   13810:	ldr	r3, [r3, #4]
   13814:	mov	r0, r3
   13818:	bl	15590 <__assert_fail@plt+0x4818>
   1381c:	ldr	r3, [pc, #88]	; 1387c <__assert_fail@plt+0x2b04>
   13820:	mov	r2, #256	; 0x100
   13824:	str	r2, [r3]
   13828:	ldr	r3, [pc, #76]	; 1387c <__assert_fail@plt+0x2b04>
   1382c:	ldr	r2, [pc, #68]	; 13878 <__assert_fail@plt+0x2b00>
   13830:	str	r2, [r3, #4]
   13834:	ldr	r3, [fp, #-12]
   13838:	ldr	r2, [pc, #60]	; 1387c <__assert_fail@plt+0x2b04>
   1383c:	cmp	r3, r2
   13840:	beq	13858 <__assert_fail@plt+0x2ae0>
   13844:	ldr	r0, [fp, #-12]
   13848:	bl	15590 <__assert_fail@plt+0x4818>
   1384c:	ldr	r3, [pc, #28]	; 13870 <__assert_fail@plt+0x2af8>
   13850:	ldr	r2, [pc, #36]	; 1387c <__assert_fail@plt+0x2b04>
   13854:	str	r2, [r3]
   13858:	ldr	r3, [pc, #20]	; 13874 <__assert_fail@plt+0x2afc>
   1385c:	mov	r2, #1
   13860:	str	r2, [r3]
   13864:	nop			; (mov r0, r0)
   13868:	sub	sp, fp, #4
   1386c:	pop	{fp, pc}
   13870:	andeq	r8, r2, r4, ror #1
   13874:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13878:	andeq	r8, r2, ip, ror r1
   1387c:	ldrdeq	r8, [r2], -ip
   13880:	push	{r4, fp, lr}
   13884:	add	fp, sp, #8
   13888:	sub	sp, sp, #84	; 0x54
   1388c:	str	r0, [fp, #-56]	; 0xffffffc8
   13890:	str	r1, [fp, #-60]	; 0xffffffc4
   13894:	str	r2, [fp, #-64]	; 0xffffffc0
   13898:	str	r3, [fp, #-68]	; 0xffffffbc
   1389c:	bl	10cc4 <__errno_location@plt>
   138a0:	mov	r3, r0
   138a4:	ldr	r3, [r3]
   138a8:	str	r3, [fp, #-24]	; 0xffffffe8
   138ac:	ldr	r3, [pc, #640]	; 13b34 <__assert_fail@plt+0x2dbc>
   138b0:	ldr	r3, [r3]
   138b4:	str	r3, [fp, #-16]
   138b8:	mvn	r3, #-2147483648	; 0x80000000
   138bc:	str	r3, [fp, #-28]	; 0xffffffe4
   138c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138c4:	cmp	r3, #0
   138c8:	blt	138dc <__assert_fail@plt+0x2b64>
   138cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   138d4:	cmp	r2, r3
   138d8:	blt	138e0 <__assert_fail@plt+0x2b68>
   138dc:	bl	10d6c <abort@plt>
   138e0:	ldr	r3, [pc, #592]	; 13b38 <__assert_fail@plt+0x2dc0>
   138e4:	ldr	r2, [r3]
   138e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138ec:	cmp	r2, r3
   138f0:	bgt	139c4 <__assert_fail@plt+0x2c4c>
   138f4:	ldr	r3, [fp, #-16]
   138f8:	ldr	r2, [pc, #572]	; 13b3c <__assert_fail@plt+0x2dc4>
   138fc:	cmp	r3, r2
   13900:	moveq	r3, #1
   13904:	movne	r3, #0
   13908:	strb	r3, [fp, #-29]	; 0xffffffe3
   1390c:	ldr	r3, [pc, #548]	; 13b38 <__assert_fail@plt+0x2dc0>
   13910:	ldr	r3, [r3]
   13914:	str	r3, [fp, #-48]	; 0xffffffd0
   13918:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1391c:	cmp	r3, #0
   13920:	beq	1392c <__assert_fail@plt+0x2bb4>
   13924:	mov	r0, #0
   13928:	b	13930 <__assert_fail@plt+0x2bb8>
   1392c:	ldr	r0, [fp, #-16]
   13930:	ldr	r3, [pc, #512]	; 13b38 <__assert_fail@plt+0x2dc0>
   13934:	ldr	r3, [r3]
   13938:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1393c:	sub	r3, r2, r3
   13940:	add	r2, r3, #1
   13944:	sub	r1, fp, #48	; 0x30
   13948:	mov	r3, #8
   1394c:	str	r3, [sp]
   13950:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13954:	bl	14c54 <__assert_fail@plt+0x3edc>
   13958:	str	r0, [fp, #-16]
   1395c:	ldr	r2, [pc, #464]	; 13b34 <__assert_fail@plt+0x2dbc>
   13960:	ldr	r3, [fp, #-16]
   13964:	str	r3, [r2]
   13968:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1396c:	cmp	r3, #0
   13970:	beq	13984 <__assert_fail@plt+0x2c0c>
   13974:	ldr	r3, [fp, #-16]
   13978:	ldr	r2, [pc, #444]	; 13b3c <__assert_fail@plt+0x2dc4>
   1397c:	ldm	r2, {r0, r1}
   13980:	stm	r3, {r0, r1}
   13984:	ldr	r3, [pc, #428]	; 13b38 <__assert_fail@plt+0x2dc0>
   13988:	ldr	r3, [r3]
   1398c:	lsl	r3, r3, #3
   13990:	ldr	r2, [fp, #-16]
   13994:	add	r0, r2, r3
   13998:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1399c:	ldr	r3, [pc, #404]	; 13b38 <__assert_fail@plt+0x2dc0>
   139a0:	ldr	r3, [r3]
   139a4:	sub	r3, r2, r3
   139a8:	lsl	r3, r3, #3
   139ac:	mov	r2, r3
   139b0:	mov	r1, #0
   139b4:	bl	10cdc <memset@plt>
   139b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139bc:	ldr	r2, [pc, #372]	; 13b38 <__assert_fail@plt+0x2dc0>
   139c0:	str	r3, [r2]
   139c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139c8:	lsl	r3, r3, #3
   139cc:	ldr	r2, [fp, #-16]
   139d0:	add	r3, r2, r3
   139d4:	ldr	r3, [r3]
   139d8:	str	r3, [fp, #-36]	; 0xffffffdc
   139dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139e0:	lsl	r3, r3, #3
   139e4:	ldr	r2, [fp, #-16]
   139e8:	add	r3, r2, r3
   139ec:	ldr	r3, [r3, #4]
   139f0:	str	r3, [fp, #-20]	; 0xffffffec
   139f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   139f8:	ldr	r3, [r3, #4]
   139fc:	orr	r3, r3, #1
   13a00:	str	r3, [fp, #-40]	; 0xffffffd8
   13a04:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13a08:	ldr	r3, [r3]
   13a0c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13a10:	add	r2, r2, #8
   13a14:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13a18:	ldr	r1, [r1, #40]	; 0x28
   13a1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a20:	ldr	r0, [r0, #44]	; 0x2c
   13a24:	str	r0, [sp, #16]
   13a28:	str	r1, [sp, #12]
   13a2c:	str	r2, [sp, #8]
   13a30:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13a34:	str	r2, [sp, #4]
   13a38:	str	r3, [sp]
   13a3c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13a40:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13a44:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13a48:	ldr	r0, [fp, #-20]	; 0xffffffec
   13a4c:	bl	11e90 <__assert_fail@plt+0x1118>
   13a50:	str	r0, [fp, #-44]	; 0xffffffd4
   13a54:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13a58:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13a5c:	cmp	r2, r3
   13a60:	bhi	13b14 <__assert_fail@plt+0x2d9c>
   13a64:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a68:	lsl	r3, r3, #3
   13a6c:	ldr	r2, [fp, #-16]
   13a70:	add	r3, r2, r3
   13a74:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13a78:	add	r2, r2, #1
   13a7c:	str	r2, [fp, #-36]	; 0xffffffdc
   13a80:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13a84:	str	r2, [r3]
   13a88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a8c:	ldr	r2, [pc, #172]	; 13b40 <__assert_fail@plt+0x2dc8>
   13a90:	cmp	r3, r2
   13a94:	beq	13aa0 <__assert_fail@plt+0x2d28>
   13a98:	ldr	r0, [fp, #-20]	; 0xffffffec
   13a9c:	bl	15590 <__assert_fail@plt+0x4818>
   13aa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13aa4:	lsl	r3, r3, #3
   13aa8:	ldr	r2, [fp, #-16]
   13aac:	add	r4, r2, r3
   13ab0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13ab4:	bl	14934 <__assert_fail@plt+0x3bbc>
   13ab8:	mov	r3, r0
   13abc:	str	r3, [fp, #-20]	; 0xffffffec
   13ac0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ac4:	str	r3, [r4, #4]
   13ac8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13acc:	ldr	r3, [r3]
   13ad0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ad4:	add	r2, r2, #8
   13ad8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13adc:	ldr	r1, [r1, #40]	; 0x28
   13ae0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ae4:	ldr	r0, [r0, #44]	; 0x2c
   13ae8:	str	r0, [sp, #16]
   13aec:	str	r1, [sp, #12]
   13af0:	str	r2, [sp, #8]
   13af4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13af8:	str	r2, [sp, #4]
   13afc:	str	r3, [sp]
   13b00:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13b04:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13b08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13b0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b10:	bl	11e90 <__assert_fail@plt+0x1118>
   13b14:	bl	10cc4 <__errno_location@plt>
   13b18:	mov	r2, r0
   13b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b20:	str	r3, [r2]
   13b24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b28:	mov	r0, r3
   13b2c:	sub	sp, fp, #8
   13b30:	pop	{r4, fp, pc}
   13b34:	andeq	r8, r2, r4, ror #1
   13b38:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13b3c:	ldrdeq	r8, [r2], -ip
   13b40:	andeq	r8, r2, ip, ror r1
   13b44:	push	{fp, lr}
   13b48:	add	fp, sp, #4
   13b4c:	sub	sp, sp, #8
   13b50:	str	r0, [fp, #-8]
   13b54:	str	r1, [fp, #-12]
   13b58:	ldr	r3, [pc, #28]	; 13b7c <__assert_fail@plt+0x2e04>
   13b5c:	mvn	r2, #0
   13b60:	ldr	r1, [fp, #-12]
   13b64:	ldr	r0, [fp, #-8]
   13b68:	bl	13880 <__assert_fail@plt+0x2b08>
   13b6c:	mov	r3, r0
   13b70:	mov	r0, r3
   13b74:	sub	sp, fp, #4
   13b78:	pop	{fp, pc}
   13b7c:	andeq	r8, r2, ip, asr #2
   13b80:	push	{fp, lr}
   13b84:	add	fp, sp, #4
   13b88:	sub	sp, sp, #16
   13b8c:	str	r0, [fp, #-8]
   13b90:	str	r1, [fp, #-12]
   13b94:	str	r2, [fp, #-16]
   13b98:	ldr	r3, [pc, #28]	; 13bbc <__assert_fail@plt+0x2e44>
   13b9c:	ldr	r2, [fp, #-16]
   13ba0:	ldr	r1, [fp, #-12]
   13ba4:	ldr	r0, [fp, #-8]
   13ba8:	bl	13880 <__assert_fail@plt+0x2b08>
   13bac:	mov	r3, r0
   13bb0:	mov	r0, r3
   13bb4:	sub	sp, fp, #4
   13bb8:	pop	{fp, pc}
   13bbc:	andeq	r8, r2, ip, asr #2
   13bc0:	push	{fp, lr}
   13bc4:	add	fp, sp, #4
   13bc8:	sub	sp, sp, #8
   13bcc:	str	r0, [fp, #-8]
   13bd0:	ldr	r1, [fp, #-8]
   13bd4:	mov	r0, #0
   13bd8:	bl	13b44 <__assert_fail@plt+0x2dcc>
   13bdc:	mov	r3, r0
   13be0:	mov	r0, r3
   13be4:	sub	sp, fp, #4
   13be8:	pop	{fp, pc}
   13bec:	push	{fp, lr}
   13bf0:	add	fp, sp, #4
   13bf4:	sub	sp, sp, #8
   13bf8:	str	r0, [fp, #-8]
   13bfc:	str	r1, [fp, #-12]
   13c00:	ldr	r2, [fp, #-12]
   13c04:	ldr	r1, [fp, #-8]
   13c08:	mov	r0, #0
   13c0c:	bl	13b80 <__assert_fail@plt+0x2e08>
   13c10:	mov	r3, r0
   13c14:	mov	r0, r3
   13c18:	sub	sp, fp, #4
   13c1c:	pop	{fp, pc}
   13c20:	push	{fp, lr}
   13c24:	add	fp, sp, #4
   13c28:	sub	sp, sp, #64	; 0x40
   13c2c:	str	r0, [fp, #-56]	; 0xffffffc8
   13c30:	str	r1, [fp, #-60]	; 0xffffffc4
   13c34:	str	r2, [fp, #-64]	; 0xffffffc0
   13c38:	sub	r3, fp, #52	; 0x34
   13c3c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13c40:	mov	r0, r3
   13c44:	bl	11d2c <__assert_fail@plt+0xfb4>
   13c48:	sub	r3, fp, #52	; 0x34
   13c4c:	mvn	r2, #0
   13c50:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13c54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c58:	bl	13880 <__assert_fail@plt+0x2b08>
   13c5c:	mov	r3, r0
   13c60:	mov	r0, r3
   13c64:	sub	sp, fp, #4
   13c68:	pop	{fp, pc}
   13c6c:	push	{fp, lr}
   13c70:	add	fp, sp, #4
   13c74:	sub	sp, sp, #64	; 0x40
   13c78:	str	r0, [fp, #-56]	; 0xffffffc8
   13c7c:	str	r1, [fp, #-60]	; 0xffffffc4
   13c80:	str	r2, [fp, #-64]	; 0xffffffc0
   13c84:	str	r3, [fp, #-68]	; 0xffffffbc
   13c88:	sub	r3, fp, #52	; 0x34
   13c8c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13c90:	mov	r0, r3
   13c94:	bl	11d2c <__assert_fail@plt+0xfb4>
   13c98:	sub	r3, fp, #52	; 0x34
   13c9c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ca0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13ca4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13ca8:	bl	13880 <__assert_fail@plt+0x2b08>
   13cac:	mov	r3, r0
   13cb0:	mov	r0, r3
   13cb4:	sub	sp, fp, #4
   13cb8:	pop	{fp, pc}
   13cbc:	push	{fp, lr}
   13cc0:	add	fp, sp, #4
   13cc4:	sub	sp, sp, #8
   13cc8:	str	r0, [fp, #-8]
   13ccc:	str	r1, [fp, #-12]
   13cd0:	ldr	r2, [fp, #-12]
   13cd4:	ldr	r1, [fp, #-8]
   13cd8:	mov	r0, #0
   13cdc:	bl	13c20 <__assert_fail@plt+0x2ea8>
   13ce0:	mov	r3, r0
   13ce4:	mov	r0, r3
   13ce8:	sub	sp, fp, #4
   13cec:	pop	{fp, pc}
   13cf0:	push	{fp, lr}
   13cf4:	add	fp, sp, #4
   13cf8:	sub	sp, sp, #16
   13cfc:	str	r0, [fp, #-8]
   13d00:	str	r1, [fp, #-12]
   13d04:	str	r2, [fp, #-16]
   13d08:	ldr	r3, [fp, #-16]
   13d0c:	ldr	r2, [fp, #-12]
   13d10:	ldr	r1, [fp, #-8]
   13d14:	mov	r0, #0
   13d18:	bl	13c6c <__assert_fail@plt+0x2ef4>
   13d1c:	mov	r3, r0
   13d20:	mov	r0, r3
   13d24:	sub	sp, fp, #4
   13d28:	pop	{fp, pc}
   13d2c:	push	{fp, lr}
   13d30:	add	fp, sp, #4
   13d34:	sub	sp, sp, #64	; 0x40
   13d38:	str	r0, [fp, #-56]	; 0xffffffc8
   13d3c:	str	r1, [fp, #-60]	; 0xffffffc4
   13d40:	mov	r3, r2
   13d44:	strb	r3, [fp, #-61]	; 0xffffffc3
   13d48:	ldr	r3, [pc, #84]	; 13da4 <__assert_fail@plt+0x302c>
   13d4c:	sub	ip, fp, #52	; 0x34
   13d50:	mov	lr, r3
   13d54:	ldm	lr!, {r0, r1, r2, r3}
   13d58:	stmia	ip!, {r0, r1, r2, r3}
   13d5c:	ldm	lr!, {r0, r1, r2, r3}
   13d60:	stmia	ip!, {r0, r1, r2, r3}
   13d64:	ldm	lr, {r0, r1, r2, r3}
   13d68:	stm	ip, {r0, r1, r2, r3}
   13d6c:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   13d70:	sub	r3, fp, #52	; 0x34
   13d74:	mov	r2, #1
   13d78:	mov	r0, r3
   13d7c:	bl	11b98 <__assert_fail@plt+0xe20>
   13d80:	sub	r3, fp, #52	; 0x34
   13d84:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13d88:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13d8c:	mov	r0, #0
   13d90:	bl	13880 <__assert_fail@plt+0x2b08>
   13d94:	mov	r3, r0
   13d98:	mov	r0, r3
   13d9c:	sub	sp, fp, #4
   13da0:	pop	{fp, pc}
   13da4:	andeq	r8, r2, ip, asr #2
   13da8:	push	{fp, lr}
   13dac:	add	fp, sp, #4
   13db0:	sub	sp, sp, #8
   13db4:	str	r0, [fp, #-8]
   13db8:	mov	r3, r1
   13dbc:	strb	r3, [fp, #-9]
   13dc0:	ldrb	r3, [fp, #-9]
   13dc4:	mov	r2, r3
   13dc8:	mvn	r1, #0
   13dcc:	ldr	r0, [fp, #-8]
   13dd0:	bl	13d2c <__assert_fail@plt+0x2fb4>
   13dd4:	mov	r3, r0
   13dd8:	mov	r0, r3
   13ddc:	sub	sp, fp, #4
   13de0:	pop	{fp, pc}
   13de4:	push	{fp, lr}
   13de8:	add	fp, sp, #4
   13dec:	sub	sp, sp, #8
   13df0:	str	r0, [fp, #-8]
   13df4:	mov	r1, #58	; 0x3a
   13df8:	ldr	r0, [fp, #-8]
   13dfc:	bl	13da8 <__assert_fail@plt+0x3030>
   13e00:	mov	r3, r0
   13e04:	mov	r0, r3
   13e08:	sub	sp, fp, #4
   13e0c:	pop	{fp, pc}
   13e10:	push	{fp, lr}
   13e14:	add	fp, sp, #4
   13e18:	sub	sp, sp, #8
   13e1c:	str	r0, [fp, #-8]
   13e20:	str	r1, [fp, #-12]
   13e24:	mov	r2, #58	; 0x3a
   13e28:	ldr	r1, [fp, #-12]
   13e2c:	ldr	r0, [fp, #-8]
   13e30:	bl	13d2c <__assert_fail@plt+0x2fb4>
   13e34:	mov	r3, r0
   13e38:	mov	r0, r3
   13e3c:	sub	sp, fp, #4
   13e40:	pop	{fp, pc}
   13e44:	push	{fp, lr}
   13e48:	add	fp, sp, #4
   13e4c:	sub	sp, sp, #112	; 0x70
   13e50:	str	r0, [fp, #-56]	; 0xffffffc8
   13e54:	str	r1, [fp, #-60]	; 0xffffffc4
   13e58:	str	r2, [fp, #-64]	; 0xffffffc0
   13e5c:	sub	r3, fp, #116	; 0x74
   13e60:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e64:	mov	r0, r3
   13e68:	bl	11d2c <__assert_fail@plt+0xfb4>
   13e6c:	sub	ip, fp, #52	; 0x34
   13e70:	sub	lr, fp, #116	; 0x74
   13e74:	ldm	lr!, {r0, r1, r2, r3}
   13e78:	stmia	ip!, {r0, r1, r2, r3}
   13e7c:	ldm	lr!, {r0, r1, r2, r3}
   13e80:	stmia	ip!, {r0, r1, r2, r3}
   13e84:	ldm	lr, {r0, r1, r2, r3}
   13e88:	stm	ip, {r0, r1, r2, r3}
   13e8c:	sub	r3, fp, #52	; 0x34
   13e90:	mov	r2, #1
   13e94:	mov	r1, #58	; 0x3a
   13e98:	mov	r0, r3
   13e9c:	bl	11b98 <__assert_fail@plt+0xe20>
   13ea0:	sub	r3, fp, #52	; 0x34
   13ea4:	mvn	r2, #0
   13ea8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13eac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13eb0:	bl	13880 <__assert_fail@plt+0x2b08>
   13eb4:	mov	r3, r0
   13eb8:	mov	r0, r3
   13ebc:	sub	sp, fp, #4
   13ec0:	pop	{fp, pc}
   13ec4:	push	{fp, lr}
   13ec8:	add	fp, sp, #4
   13ecc:	sub	sp, sp, #24
   13ed0:	str	r0, [fp, #-8]
   13ed4:	str	r1, [fp, #-12]
   13ed8:	str	r2, [fp, #-16]
   13edc:	str	r3, [fp, #-20]	; 0xffffffec
   13ee0:	mvn	r3, #0
   13ee4:	str	r3, [sp]
   13ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13eec:	ldr	r2, [fp, #-16]
   13ef0:	ldr	r1, [fp, #-12]
   13ef4:	ldr	r0, [fp, #-8]
   13ef8:	bl	13f0c <__assert_fail@plt+0x3194>
   13efc:	mov	r3, r0
   13f00:	mov	r0, r3
   13f04:	sub	sp, fp, #4
   13f08:	pop	{fp, pc}
   13f0c:	push	{fp, lr}
   13f10:	add	fp, sp, #4
   13f14:	sub	sp, sp, #64	; 0x40
   13f18:	str	r0, [fp, #-56]	; 0xffffffc8
   13f1c:	str	r1, [fp, #-60]	; 0xffffffc4
   13f20:	str	r2, [fp, #-64]	; 0xffffffc0
   13f24:	str	r3, [fp, #-68]	; 0xffffffbc
   13f28:	ldr	r3, [pc, #84]	; 13f84 <__assert_fail@plt+0x320c>
   13f2c:	sub	ip, fp, #52	; 0x34
   13f30:	mov	lr, r3
   13f34:	ldm	lr!, {r0, r1, r2, r3}
   13f38:	stmia	ip!, {r0, r1, r2, r3}
   13f3c:	ldm	lr!, {r0, r1, r2, r3}
   13f40:	stmia	ip!, {r0, r1, r2, r3}
   13f44:	ldm	lr, {r0, r1, r2, r3}
   13f48:	stm	ip, {r0, r1, r2, r3}
   13f4c:	sub	r3, fp, #52	; 0x34
   13f50:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13f54:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13f58:	mov	r0, r3
   13f5c:	bl	11cb0 <__assert_fail@plt+0xf38>
   13f60:	sub	r3, fp, #52	; 0x34
   13f64:	ldr	r2, [fp, #4]
   13f68:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13f6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f70:	bl	13880 <__assert_fail@plt+0x2b08>
   13f74:	mov	r3, r0
   13f78:	mov	r0, r3
   13f7c:	sub	sp, fp, #4
   13f80:	pop	{fp, pc}
   13f84:	andeq	r8, r2, ip, asr #2
   13f88:	push	{fp, lr}
   13f8c:	add	fp, sp, #4
   13f90:	sub	sp, sp, #16
   13f94:	str	r0, [fp, #-8]
   13f98:	str	r1, [fp, #-12]
   13f9c:	str	r2, [fp, #-16]
   13fa0:	ldr	r3, [fp, #-16]
   13fa4:	ldr	r2, [fp, #-12]
   13fa8:	ldr	r1, [fp, #-8]
   13fac:	mov	r0, #0
   13fb0:	bl	13ec4 <__assert_fail@plt+0x314c>
   13fb4:	mov	r3, r0
   13fb8:	mov	r0, r3
   13fbc:	sub	sp, fp, #4
   13fc0:	pop	{fp, pc}
   13fc4:	push	{fp, lr}
   13fc8:	add	fp, sp, #4
   13fcc:	sub	sp, sp, #24
   13fd0:	str	r0, [fp, #-8]
   13fd4:	str	r1, [fp, #-12]
   13fd8:	str	r2, [fp, #-16]
   13fdc:	str	r3, [fp, #-20]	; 0xffffffec
   13fe0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fe4:	str	r3, [sp]
   13fe8:	ldr	r3, [fp, #-16]
   13fec:	ldr	r2, [fp, #-12]
   13ff0:	ldr	r1, [fp, #-8]
   13ff4:	mov	r0, #0
   13ff8:	bl	13f0c <__assert_fail@plt+0x3194>
   13ffc:	mov	r3, r0
   14000:	mov	r0, r3
   14004:	sub	sp, fp, #4
   14008:	pop	{fp, pc}
   1400c:	push	{fp, lr}
   14010:	add	fp, sp, #4
   14014:	sub	sp, sp, #16
   14018:	str	r0, [fp, #-8]
   1401c:	str	r1, [fp, #-12]
   14020:	str	r2, [fp, #-16]
   14024:	ldr	r3, [pc, #28]	; 14048 <__assert_fail@plt+0x32d0>
   14028:	ldr	r2, [fp, #-16]
   1402c:	ldr	r1, [fp, #-12]
   14030:	ldr	r0, [fp, #-8]
   14034:	bl	13880 <__assert_fail@plt+0x2b08>
   14038:	mov	r3, r0
   1403c:	mov	r0, r3
   14040:	sub	sp, fp, #4
   14044:	pop	{fp, pc}
   14048:	andeq	r8, r2, r8, ror #1
   1404c:	push	{fp, lr}
   14050:	add	fp, sp, #4
   14054:	sub	sp, sp, #8
   14058:	str	r0, [fp, #-8]
   1405c:	str	r1, [fp, #-12]
   14060:	ldr	r2, [fp, #-12]
   14064:	ldr	r1, [fp, #-8]
   14068:	mov	r0, #0
   1406c:	bl	1400c <__assert_fail@plt+0x3294>
   14070:	mov	r3, r0
   14074:	mov	r0, r3
   14078:	sub	sp, fp, #4
   1407c:	pop	{fp, pc}
   14080:	push	{fp, lr}
   14084:	add	fp, sp, #4
   14088:	sub	sp, sp, #8
   1408c:	str	r0, [fp, #-8]
   14090:	str	r1, [fp, #-12]
   14094:	mvn	r2, #0
   14098:	ldr	r1, [fp, #-12]
   1409c:	ldr	r0, [fp, #-8]
   140a0:	bl	1400c <__assert_fail@plt+0x3294>
   140a4:	mov	r3, r0
   140a8:	mov	r0, r3
   140ac:	sub	sp, fp, #4
   140b0:	pop	{fp, pc}
   140b4:	push	{fp, lr}
   140b8:	add	fp, sp, #4
   140bc:	sub	sp, sp, #8
   140c0:	str	r0, [fp, #-8]
   140c4:	ldr	r1, [fp, #-8]
   140c8:	mov	r0, #0
   140cc:	bl	14080 <__assert_fail@plt+0x3308>
   140d0:	mov	r3, r0
   140d4:	mov	r0, r3
   140d8:	sub	sp, fp, #4
   140dc:	pop	{fp, pc}
   140e0:	push	{r4, r5, r6, r7, fp, lr}
   140e4:	add	fp, sp, #20
   140e8:	sub	sp, sp, #48	; 0x30
   140ec:	str	r0, [fp, #-24]	; 0xffffffe8
   140f0:	str	r1, [fp, #-28]	; 0xffffffe4
   140f4:	str	r2, [fp, #-32]	; 0xffffffe0
   140f8:	str	r3, [fp, #-36]	; 0xffffffdc
   140fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14100:	cmp	r3, #0
   14104:	beq	14128 <__assert_fail@plt+0x33b0>
   14108:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1410c:	str	r3, [sp]
   14110:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14114:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14118:	ldr	r1, [pc, #1260]	; 1460c <__assert_fail@plt+0x3894>
   1411c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14120:	bl	10cb8 <fprintf@plt>
   14124:	b	1413c <__assert_fail@plt+0x33c4>
   14128:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1412c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14130:	ldr	r1, [pc, #1240]	; 14610 <__assert_fail@plt+0x3898>
   14134:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14138:	bl	10cb8 <fprintf@plt>
   1413c:	ldr	r0, [pc, #1232]	; 14614 <__assert_fail@plt+0x389c>
   14140:	bl	10ca0 <gettext@plt>
   14144:	mov	r2, r0
   14148:	ldr	r3, [pc, #1224]	; 14618 <__assert_fail@plt+0x38a0>
   1414c:	ldr	r1, [pc, #1224]	; 1461c <__assert_fail@plt+0x38a4>
   14150:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14154:	bl	10cb8 <fprintf@plt>
   14158:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1415c:	mov	r0, #10
   14160:	bl	10d30 <fputc@plt>
   14164:	ldr	r0, [pc, #1204]	; 14620 <__assert_fail@plt+0x38a8>
   14168:	bl	10ca0 <gettext@plt>
   1416c:	mov	r3, r0
   14170:	ldr	r2, [pc, #1196]	; 14624 <__assert_fail@plt+0x38ac>
   14174:	mov	r1, r3
   14178:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1417c:	bl	10cb8 <fprintf@plt>
   14180:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14184:	mov	r0, #10
   14188:	bl	10d30 <fputc@plt>
   1418c:	ldr	r3, [fp, #8]
   14190:	cmp	r3, #9
   14194:	ldrls	pc, [pc, r3, lsl #2]
   14198:	b	14554 <__assert_fail@plt+0x37dc>
   1419c:	strdeq	r4, [r1], -ip
   141a0:	andeq	r4, r1, r4, asr #3
   141a4:	andeq	r4, r1, r8, ror #3
   141a8:	andeq	r4, r1, r4, lsl r2
   141ac:	andeq	r4, r1, r4, asr r2
   141b0:	andeq	r4, r1, ip, lsr #5
   141b4:	andeq	r4, r1, r4, lsl r3
   141b8:	andeq	r4, r1, ip, lsl #7
   141bc:	andeq	r4, r1, r4, lsl r4
   141c0:	andeq	r4, r1, ip, lsr #9
   141c4:	ldr	r0, [pc, #1116]	; 14628 <__assert_fail@plt+0x38b0>
   141c8:	bl	10ca0 <gettext@plt>
   141cc:	mov	r1, r0
   141d0:	ldr	r3, [fp, #4]
   141d4:	ldr	r3, [r3]
   141d8:	mov	r2, r3
   141dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141e0:	bl	10cb8 <fprintf@plt>
   141e4:	b	14600 <__assert_fail@plt+0x3888>
   141e8:	ldr	r0, [pc, #1084]	; 1462c <__assert_fail@plt+0x38b4>
   141ec:	bl	10ca0 <gettext@plt>
   141f0:	mov	r1, r0
   141f4:	ldr	r3, [fp, #4]
   141f8:	ldr	r2, [r3]
   141fc:	ldr	r3, [fp, #4]
   14200:	add	r3, r3, #4
   14204:	ldr	r3, [r3]
   14208:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1420c:	bl	10cb8 <fprintf@plt>
   14210:	b	14600 <__assert_fail@plt+0x3888>
   14214:	ldr	r0, [pc, #1044]	; 14630 <__assert_fail@plt+0x38b8>
   14218:	bl	10ca0 <gettext@plt>
   1421c:	ldr	r3, [fp, #4]
   14220:	ldr	r2, [r3]
   14224:	ldr	r3, [fp, #4]
   14228:	add	r3, r3, #4
   1422c:	ldr	r1, [r3]
   14230:	ldr	r3, [fp, #4]
   14234:	add	r3, r3, #8
   14238:	ldr	r3, [r3]
   1423c:	str	r3, [sp]
   14240:	mov	r3, r1
   14244:	mov	r1, r0
   14248:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1424c:	bl	10cb8 <fprintf@plt>
   14250:	b	14600 <__assert_fail@plt+0x3888>
   14254:	ldr	r0, [pc, #984]	; 14634 <__assert_fail@plt+0x38bc>
   14258:	bl	10ca0 <gettext@plt>
   1425c:	mov	ip, r0
   14260:	ldr	r3, [fp, #4]
   14264:	ldr	r1, [r3]
   14268:	ldr	r3, [fp, #4]
   1426c:	add	r3, r3, #4
   14270:	ldr	r0, [r3]
   14274:	ldr	r3, [fp, #4]
   14278:	add	r3, r3, #8
   1427c:	ldr	r3, [r3]
   14280:	ldr	r2, [fp, #4]
   14284:	add	r2, r2, #12
   14288:	ldr	r2, [r2]
   1428c:	str	r2, [sp, #4]
   14290:	str	r3, [sp]
   14294:	mov	r3, r0
   14298:	mov	r2, r1
   1429c:	mov	r1, ip
   142a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   142a4:	bl	10cb8 <fprintf@plt>
   142a8:	b	14600 <__assert_fail@plt+0x3888>
   142ac:	ldr	r0, [pc, #900]	; 14638 <__assert_fail@plt+0x38c0>
   142b0:	bl	10ca0 <gettext@plt>
   142b4:	mov	lr, r0
   142b8:	ldr	r3, [fp, #4]
   142bc:	ldr	r0, [r3]
   142c0:	ldr	r3, [fp, #4]
   142c4:	add	r3, r3, #4
   142c8:	ldr	ip, [r3]
   142cc:	ldr	r3, [fp, #4]
   142d0:	add	r3, r3, #8
   142d4:	ldr	r3, [r3]
   142d8:	ldr	r2, [fp, #4]
   142dc:	add	r2, r2, #12
   142e0:	ldr	r2, [r2]
   142e4:	ldr	r1, [fp, #4]
   142e8:	add	r1, r1, #16
   142ec:	ldr	r1, [r1]
   142f0:	str	r1, [sp, #8]
   142f4:	str	r2, [sp, #4]
   142f8:	str	r3, [sp]
   142fc:	mov	r3, ip
   14300:	mov	r2, r0
   14304:	mov	r1, lr
   14308:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1430c:	bl	10cb8 <fprintf@plt>
   14310:	b	14600 <__assert_fail@plt+0x3888>
   14314:	ldr	r0, [pc, #800]	; 1463c <__assert_fail@plt+0x38c4>
   14318:	bl	10ca0 <gettext@plt>
   1431c:	mov	r4, r0
   14320:	ldr	r3, [fp, #4]
   14324:	ldr	ip, [r3]
   14328:	ldr	r3, [fp, #4]
   1432c:	add	r3, r3, #4
   14330:	ldr	lr, [r3]
   14334:	ldr	r3, [fp, #4]
   14338:	add	r3, r3, #8
   1433c:	ldr	r3, [r3]
   14340:	ldr	r2, [fp, #4]
   14344:	add	r2, r2, #12
   14348:	ldr	r2, [r2]
   1434c:	ldr	r1, [fp, #4]
   14350:	add	r1, r1, #16
   14354:	ldr	r1, [r1]
   14358:	ldr	r0, [fp, #4]
   1435c:	add	r0, r0, #20
   14360:	ldr	r0, [r0]
   14364:	str	r0, [sp, #12]
   14368:	str	r1, [sp, #8]
   1436c:	str	r2, [sp, #4]
   14370:	str	r3, [sp]
   14374:	mov	r3, lr
   14378:	mov	r2, ip
   1437c:	mov	r1, r4
   14380:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14384:	bl	10cb8 <fprintf@plt>
   14388:	b	14600 <__assert_fail@plt+0x3888>
   1438c:	ldr	r0, [pc, #684]	; 14640 <__assert_fail@plt+0x38c8>
   14390:	bl	10ca0 <gettext@plt>
   14394:	mov	r5, r0
   14398:	ldr	r3, [fp, #4]
   1439c:	ldr	lr, [r3]
   143a0:	ldr	r3, [fp, #4]
   143a4:	add	r3, r3, #4
   143a8:	ldr	r4, [r3]
   143ac:	ldr	r3, [fp, #4]
   143b0:	add	r3, r3, #8
   143b4:	ldr	r3, [r3]
   143b8:	ldr	r2, [fp, #4]
   143bc:	add	r2, r2, #12
   143c0:	ldr	r2, [r2]
   143c4:	ldr	r1, [fp, #4]
   143c8:	add	r1, r1, #16
   143cc:	ldr	r1, [r1]
   143d0:	ldr	r0, [fp, #4]
   143d4:	add	r0, r0, #20
   143d8:	ldr	r0, [r0]
   143dc:	ldr	ip, [fp, #4]
   143e0:	add	ip, ip, #24
   143e4:	ldr	ip, [ip]
   143e8:	str	ip, [sp, #16]
   143ec:	str	r0, [sp, #12]
   143f0:	str	r1, [sp, #8]
   143f4:	str	r2, [sp, #4]
   143f8:	str	r3, [sp]
   143fc:	mov	r3, r4
   14400:	mov	r2, lr
   14404:	mov	r1, r5
   14408:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1440c:	bl	10cb8 <fprintf@plt>
   14410:	b	14600 <__assert_fail@plt+0x3888>
   14414:	ldr	r0, [pc, #552]	; 14644 <__assert_fail@plt+0x38cc>
   14418:	bl	10ca0 <gettext@plt>
   1441c:	mov	r6, r0
   14420:	ldr	r3, [fp, #4]
   14424:	ldr	r4, [r3]
   14428:	ldr	r3, [fp, #4]
   1442c:	add	r3, r3, #4
   14430:	ldr	r5, [r3]
   14434:	ldr	r3, [fp, #4]
   14438:	add	r3, r3, #8
   1443c:	ldr	r3, [r3]
   14440:	ldr	r2, [fp, #4]
   14444:	add	r2, r2, #12
   14448:	ldr	r2, [r2]
   1444c:	ldr	r1, [fp, #4]
   14450:	add	r1, r1, #16
   14454:	ldr	r1, [r1]
   14458:	ldr	r0, [fp, #4]
   1445c:	add	r0, r0, #20
   14460:	ldr	r0, [r0]
   14464:	ldr	ip, [fp, #4]
   14468:	add	ip, ip, #24
   1446c:	ldr	ip, [ip]
   14470:	ldr	lr, [fp, #4]
   14474:	add	lr, lr, #28
   14478:	ldr	lr, [lr]
   1447c:	str	lr, [sp, #20]
   14480:	str	ip, [sp, #16]
   14484:	str	r0, [sp, #12]
   14488:	str	r1, [sp, #8]
   1448c:	str	r2, [sp, #4]
   14490:	str	r3, [sp]
   14494:	mov	r3, r5
   14498:	mov	r2, r4
   1449c:	mov	r1, r6
   144a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144a4:	bl	10cb8 <fprintf@plt>
   144a8:	b	14600 <__assert_fail@plt+0x3888>
   144ac:	ldr	r0, [pc, #404]	; 14648 <__assert_fail@plt+0x38d0>
   144b0:	bl	10ca0 <gettext@plt>
   144b4:	mov	r7, r0
   144b8:	ldr	r3, [fp, #4]
   144bc:	ldr	r5, [r3]
   144c0:	ldr	r3, [fp, #4]
   144c4:	add	r3, r3, #4
   144c8:	ldr	r6, [r3]
   144cc:	ldr	r3, [fp, #4]
   144d0:	add	r3, r3, #8
   144d4:	ldr	r3, [r3]
   144d8:	ldr	r2, [fp, #4]
   144dc:	add	r2, r2, #12
   144e0:	ldr	r2, [r2]
   144e4:	ldr	r1, [fp, #4]
   144e8:	add	r1, r1, #16
   144ec:	ldr	r1, [r1]
   144f0:	ldr	r0, [fp, #4]
   144f4:	add	r0, r0, #20
   144f8:	ldr	r0, [r0]
   144fc:	ldr	ip, [fp, #4]
   14500:	add	ip, ip, #24
   14504:	ldr	ip, [ip]
   14508:	ldr	lr, [fp, #4]
   1450c:	add	lr, lr, #28
   14510:	ldr	lr, [lr]
   14514:	ldr	r4, [fp, #4]
   14518:	add	r4, r4, #32
   1451c:	ldr	r4, [r4]
   14520:	str	r4, [sp, #24]
   14524:	str	lr, [sp, #20]
   14528:	str	ip, [sp, #16]
   1452c:	str	r0, [sp, #12]
   14530:	str	r1, [sp, #8]
   14534:	str	r2, [sp, #4]
   14538:	str	r3, [sp]
   1453c:	mov	r3, r6
   14540:	mov	r2, r5
   14544:	mov	r1, r7
   14548:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1454c:	bl	10cb8 <fprintf@plt>
   14550:	b	14600 <__assert_fail@plt+0x3888>
   14554:	ldr	r0, [pc, #240]	; 1464c <__assert_fail@plt+0x38d4>
   14558:	bl	10ca0 <gettext@plt>
   1455c:	mov	r7, r0
   14560:	ldr	r3, [fp, #4]
   14564:	ldr	r5, [r3]
   14568:	ldr	r3, [fp, #4]
   1456c:	add	r3, r3, #4
   14570:	ldr	r6, [r3]
   14574:	ldr	r3, [fp, #4]
   14578:	add	r3, r3, #8
   1457c:	ldr	r3, [r3]
   14580:	ldr	r2, [fp, #4]
   14584:	add	r2, r2, #12
   14588:	ldr	r2, [r2]
   1458c:	ldr	r1, [fp, #4]
   14590:	add	r1, r1, #16
   14594:	ldr	r1, [r1]
   14598:	ldr	r0, [fp, #4]
   1459c:	add	r0, r0, #20
   145a0:	ldr	r0, [r0]
   145a4:	ldr	ip, [fp, #4]
   145a8:	add	ip, ip, #24
   145ac:	ldr	ip, [ip]
   145b0:	ldr	lr, [fp, #4]
   145b4:	add	lr, lr, #28
   145b8:	ldr	lr, [lr]
   145bc:	ldr	r4, [fp, #4]
   145c0:	add	r4, r4, #32
   145c4:	ldr	r4, [r4]
   145c8:	str	r4, [sp, #24]
   145cc:	str	lr, [sp, #20]
   145d0:	str	ip, [sp, #16]
   145d4:	str	r0, [sp, #12]
   145d8:	str	r1, [sp, #8]
   145dc:	str	r2, [sp, #4]
   145e0:	str	r3, [sp]
   145e4:	mov	r3, r6
   145e8:	mov	r2, r5
   145ec:	mov	r1, r7
   145f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   145f4:	bl	10cb8 <fprintf@plt>
   145f8:	b	14600 <__assert_fail@plt+0x3888>
   145fc:	nop			; (mov r0, r0)
   14600:	nop			; (mov r0, r0)
   14604:	sub	sp, fp, #20
   14608:	pop	{r4, r5, r6, r7, fp, pc}
   1460c:	andeq	r6, r1, r4, lsl #28
   14610:	andeq	r6, r1, r0, lsl lr
   14614:	andeq	r6, r1, r8, lsl lr
   14618:	andeq	r0, r0, r6, ror #15
   1461c:	andeq	r7, r1, r8, lsr #2
   14620:	andeq	r6, r1, ip, lsl lr
   14624:	andeq	r6, r1, r8, asr #29
   14628:	andeq	r6, r1, ip, ror #29
   1462c:	strdeq	r6, [r1], -ip
   14630:	andeq	r6, r1, r4, lsl pc
   14634:	andeq	r6, r1, r0, lsr pc
   14638:	andeq	r6, r1, r0, asr pc
   1463c:	andeq	r6, r1, r4, ror pc
   14640:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14644:	andeq	r6, r1, r8, asr #31
   14648:	strdeq	r6, [r1], -r8
   1464c:	andeq	r7, r1, ip, lsr #32
   14650:	push	{fp, lr}
   14654:	add	fp, sp, #4
   14658:	sub	sp, sp, #32
   1465c:	str	r0, [fp, #-16]
   14660:	str	r1, [fp, #-20]	; 0xffffffec
   14664:	str	r2, [fp, #-24]	; 0xffffffe8
   14668:	str	r3, [fp, #-28]	; 0xffffffe4
   1466c:	mov	r3, #0
   14670:	str	r3, [fp, #-8]
   14674:	b	14684 <__assert_fail@plt+0x390c>
   14678:	ldr	r3, [fp, #-8]
   1467c:	add	r3, r3, #1
   14680:	str	r3, [fp, #-8]
   14684:	ldr	r3, [fp, #-8]
   14688:	lsl	r3, r3, #2
   1468c:	ldr	r2, [fp, #4]
   14690:	add	r3, r2, r3
   14694:	ldr	r3, [r3]
   14698:	cmp	r3, #0
   1469c:	bne	14678 <__assert_fail@plt+0x3900>
   146a0:	ldr	r3, [fp, #-8]
   146a4:	str	r3, [sp, #4]
   146a8:	ldr	r3, [fp, #4]
   146ac:	str	r3, [sp]
   146b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   146b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   146b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   146bc:	ldr	r0, [fp, #-16]
   146c0:	bl	140e0 <__assert_fail@plt+0x3368>
   146c4:	nop			; (mov r0, r0)
   146c8:	sub	sp, fp, #4
   146cc:	pop	{fp, pc}
   146d0:	push	{fp, lr}
   146d4:	add	fp, sp, #4
   146d8:	sub	sp, sp, #72	; 0x48
   146dc:	str	r0, [fp, #-56]	; 0xffffffc8
   146e0:	str	r1, [fp, #-60]	; 0xffffffc4
   146e4:	str	r2, [fp, #-64]	; 0xffffffc0
   146e8:	str	r3, [fp, #-68]	; 0xffffffbc
   146ec:	mov	r3, #0
   146f0:	str	r3, [fp, #-8]
   146f4:	b	14704 <__assert_fail@plt+0x398c>
   146f8:	ldr	r3, [fp, #-8]
   146fc:	add	r3, r3, #1
   14700:	str	r3, [fp, #-8]
   14704:	ldr	r3, [fp, #-8]
   14708:	cmp	r3, #9
   1470c:	bhi	14750 <__assert_fail@plt+0x39d8>
   14710:	ldr	r3, [fp, #4]
   14714:	add	r2, r3, #4
   14718:	str	r2, [fp, #4]
   1471c:	ldr	r2, [r3]
   14720:	ldr	r3, [fp, #-8]
   14724:	lsl	r3, r3, #2
   14728:	sub	r1, fp, #4
   1472c:	add	r3, r1, r3
   14730:	str	r2, [r3, #-44]	; 0xffffffd4
   14734:	ldr	r3, [fp, #-8]
   14738:	lsl	r3, r3, #2
   1473c:	sub	r2, fp, #4
   14740:	add	r3, r2, r3
   14744:	ldr	r3, [r3, #-44]	; 0xffffffd4
   14748:	cmp	r3, #0
   1474c:	bne	146f8 <__assert_fail@plt+0x3980>
   14750:	ldr	r3, [fp, #-8]
   14754:	str	r3, [sp, #4]
   14758:	sub	r3, fp, #48	; 0x30
   1475c:	str	r3, [sp]
   14760:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14764:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14768:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1476c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14770:	bl	140e0 <__assert_fail@plt+0x3368>
   14774:	nop			; (mov r0, r0)
   14778:	sub	sp, fp, #4
   1477c:	pop	{fp, pc}
   14780:	push	{r3}		; (str r3, [sp, #-4]!)
   14784:	push	{fp, lr}
   14788:	add	fp, sp, #4
   1478c:	sub	sp, sp, #36	; 0x24
   14790:	str	r0, [fp, #-20]	; 0xffffffec
   14794:	str	r1, [fp, #-24]	; 0xffffffe8
   14798:	str	r2, [fp, #-28]	; 0xffffffe4
   1479c:	add	r3, fp, #8
   147a0:	str	r3, [fp, #-12]
   147a4:	ldr	r3, [fp, #-12]
   147a8:	str	r3, [sp]
   147ac:	ldr	r3, [fp, #4]
   147b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   147b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   147b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   147bc:	bl	146d0 <__assert_fail@plt+0x3958>
   147c0:	nop			; (mov r0, r0)
   147c4:	sub	sp, fp, #4
   147c8:	pop	{fp, lr}
   147cc:	add	sp, sp, #4
   147d0:	bx	lr
   147d4:	push	{fp, lr}
   147d8:	add	fp, sp, #4
   147dc:	ldr	r3, [pc, #96]	; 14844 <__assert_fail@plt+0x3acc>
   147e0:	ldr	r3, [r3]
   147e4:	mov	r1, r3
   147e8:	mov	r0, #10
   147ec:	bl	10d30 <fputc@plt>
   147f0:	ldr	r0, [pc, #80]	; 14848 <__assert_fail@plt+0x3ad0>
   147f4:	bl	10ca0 <gettext@plt>
   147f8:	mov	r3, r0
   147fc:	ldr	r1, [pc, #72]	; 1484c <__assert_fail@plt+0x3ad4>
   14800:	mov	r0, r3
   14804:	bl	10b8c <printf@plt>
   14808:	ldr	r0, [pc, #64]	; 14850 <__assert_fail@plt+0x3ad8>
   1480c:	bl	10ca0 <gettext@plt>
   14810:	mov	r3, r0
   14814:	ldr	r2, [pc, #56]	; 14854 <__assert_fail@plt+0x3adc>
   14818:	ldr	r1, [pc, #56]	; 14858 <__assert_fail@plt+0x3ae0>
   1481c:	mov	r0, r3
   14820:	bl	10b8c <printf@plt>
   14824:	ldr	r0, [pc, #48]	; 1485c <__assert_fail@plt+0x3ae4>
   14828:	bl	10ca0 <gettext@plt>
   1482c:	mov	r3, r0
   14830:	ldr	r1, [pc, #40]	; 14860 <__assert_fail@plt+0x3ae8>
   14834:	mov	r0, r3
   14838:	bl	10b8c <printf@plt>
   1483c:	nop			; (mov r0, r0)
   14840:	pop	{fp, pc}
   14844:	andeq	r8, r2, r4, lsr r1
   14848:	andeq	r7, r1, r8, rrx
   1484c:	andeq	r7, r1, ip, ror r0
   14850:	muleq	r1, r4, r0
   14854:	andeq	r7, r1, r8, lsr #1
   14858:	ldrdeq	r7, [r1], -r0
   1485c:	andeq	r7, r1, r0, ror #1
   14860:	andeq	r7, r1, r8, lsl #2
   14864:	push	{fp, lr}
   14868:	add	fp, sp, #4
   1486c:	sub	sp, sp, #16
   14870:	str	r0, [fp, #-8]
   14874:	str	r1, [fp, #-12]
   14878:	str	r2, [fp, #-16]
   1487c:	ldr	r2, [fp, #-16]
   14880:	ldr	r1, [fp, #-12]
   14884:	ldr	r0, [fp, #-8]
   14888:	bl	149f4 <__assert_fail@plt+0x3c7c>
   1488c:	mov	r3, r0
   14890:	mov	r0, r3
   14894:	sub	sp, fp, #4
   14898:	pop	{fp, pc}
   1489c:	push	{fp, lr}
   148a0:	add	fp, sp, #4
   148a4:	sub	sp, sp, #8
   148a8:	str	r0, [fp, #-8]
   148ac:	ldr	r3, [fp, #-8]
   148b0:	cmp	r3, #0
   148b4:	bne	148bc <__assert_fail@plt+0x3b44>
   148b8:	bl	153e8 <__assert_fail@plt+0x4670>
   148bc:	ldr	r3, [fp, #-8]
   148c0:	mov	r0, r3
   148c4:	sub	sp, fp, #4
   148c8:	pop	{fp, pc}
   148cc:	push	{fp, lr}
   148d0:	add	fp, sp, #4
   148d4:	sub	sp, sp, #8
   148d8:	str	r0, [fp, #-8]
   148dc:	ldr	r0, [fp, #-8]
   148e0:	bl	15700 <__assert_fail@plt+0x4988>
   148e4:	mov	r3, r0
   148e8:	mov	r0, r3
   148ec:	bl	1489c <__assert_fail@plt+0x3b24>
   148f0:	mov	r3, r0
   148f4:	mov	r0, r3
   148f8:	sub	sp, fp, #4
   148fc:	pop	{fp, pc}
   14900:	push	{fp, lr}
   14904:	add	fp, sp, #4
   14908:	sub	sp, sp, #8
   1490c:	str	r0, [fp, #-8]
   14910:	ldr	r0, [fp, #-8]
   14914:	bl	15c04 <__assert_fail@plt+0x4e8c>
   14918:	mov	r3, r0
   1491c:	mov	r0, r3
   14920:	bl	1489c <__assert_fail@plt+0x3b24>
   14924:	mov	r3, r0
   14928:	mov	r0, r3
   1492c:	sub	sp, fp, #4
   14930:	pop	{fp, pc}
   14934:	push	{fp, lr}
   14938:	add	fp, sp, #4
   1493c:	sub	sp, sp, #8
   14940:	str	r0, [fp, #-8]
   14944:	ldr	r0, [fp, #-8]
   14948:	bl	148cc <__assert_fail@plt+0x3b54>
   1494c:	mov	r3, r0
   14950:	mov	r0, r3
   14954:	sub	sp, fp, #4
   14958:	pop	{fp, pc}
   1495c:	push	{fp, lr}
   14960:	add	fp, sp, #4
   14964:	sub	sp, sp, #16
   14968:	str	r0, [fp, #-16]
   1496c:	str	r1, [fp, #-20]	; 0xffffffec
   14970:	ldr	r1, [fp, #-20]	; 0xffffffec
   14974:	ldr	r0, [fp, #-16]
   14978:	bl	15854 <__assert_fail@plt+0x4adc>
   1497c:	str	r0, [fp, #-8]
   14980:	ldr	r3, [fp, #-8]
   14984:	cmp	r3, #0
   14988:	bne	149a8 <__assert_fail@plt+0x3c30>
   1498c:	ldr	r3, [fp, #-16]
   14990:	cmp	r3, #0
   14994:	beq	149a4 <__assert_fail@plt+0x3c2c>
   14998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1499c:	cmp	r3, #0
   149a0:	beq	149a8 <__assert_fail@plt+0x3c30>
   149a4:	bl	153e8 <__assert_fail@plt+0x4670>
   149a8:	ldr	r3, [fp, #-8]
   149ac:	mov	r0, r3
   149b0:	sub	sp, fp, #4
   149b4:	pop	{fp, pc}
   149b8:	push	{fp, lr}
   149bc:	add	fp, sp, #4
   149c0:	sub	sp, sp, #8
   149c4:	str	r0, [fp, #-8]
   149c8:	str	r1, [fp, #-12]
   149cc:	ldr	r1, [fp, #-12]
   149d0:	ldr	r0, [fp, #-8]
   149d4:	bl	15c30 <__assert_fail@plt+0x4eb8>
   149d8:	mov	r3, r0
   149dc:	mov	r0, r3
   149e0:	bl	1489c <__assert_fail@plt+0x3b24>
   149e4:	mov	r3, r0
   149e8:	mov	r0, r3
   149ec:	sub	sp, fp, #4
   149f0:	pop	{fp, pc}
   149f4:	push	{fp, lr}
   149f8:	add	fp, sp, #4
   149fc:	sub	sp, sp, #24
   14a00:	str	r0, [fp, #-16]
   14a04:	str	r1, [fp, #-20]	; 0xffffffec
   14a08:	str	r2, [fp, #-24]	; 0xffffffe8
   14a0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14a10:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a14:	ldr	r0, [fp, #-16]
   14a18:	bl	15924 <__assert_fail@plt+0x4bac>
   14a1c:	str	r0, [fp, #-8]
   14a20:	ldr	r3, [fp, #-8]
   14a24:	cmp	r3, #0
   14a28:	bne	14a54 <__assert_fail@plt+0x3cdc>
   14a2c:	ldr	r3, [fp, #-16]
   14a30:	cmp	r3, #0
   14a34:	beq	14a50 <__assert_fail@plt+0x3cd8>
   14a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a3c:	cmp	r3, #0
   14a40:	beq	14a54 <__assert_fail@plt+0x3cdc>
   14a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a48:	cmp	r3, #0
   14a4c:	beq	14a54 <__assert_fail@plt+0x3cdc>
   14a50:	bl	153e8 <__assert_fail@plt+0x4670>
   14a54:	ldr	r3, [fp, #-8]
   14a58:	mov	r0, r3
   14a5c:	sub	sp, fp, #4
   14a60:	pop	{fp, pc}
   14a64:	push	{fp, lr}
   14a68:	add	fp, sp, #4
   14a6c:	sub	sp, sp, #16
   14a70:	str	r0, [fp, #-8]
   14a74:	str	r1, [fp, #-12]
   14a78:	str	r2, [fp, #-16]
   14a7c:	ldr	r2, [fp, #-16]
   14a80:	ldr	r1, [fp, #-12]
   14a84:	ldr	r0, [fp, #-8]
   14a88:	bl	15cb8 <__assert_fail@plt+0x4f40>
   14a8c:	mov	r3, r0
   14a90:	mov	r0, r3
   14a94:	bl	1489c <__assert_fail@plt+0x3b24>
   14a98:	mov	r3, r0
   14a9c:	mov	r0, r3
   14aa0:	sub	sp, fp, #4
   14aa4:	pop	{fp, pc}
   14aa8:	push	{fp, lr}
   14aac:	add	fp, sp, #4
   14ab0:	sub	sp, sp, #8
   14ab4:	str	r0, [fp, #-8]
   14ab8:	str	r1, [fp, #-12]
   14abc:	ldr	r2, [fp, #-12]
   14ac0:	ldr	r1, [fp, #-8]
   14ac4:	mov	r0, #0
   14ac8:	bl	149f4 <__assert_fail@plt+0x3c7c>
   14acc:	mov	r3, r0
   14ad0:	mov	r0, r3
   14ad4:	sub	sp, fp, #4
   14ad8:	pop	{fp, pc}
   14adc:	push	{fp, lr}
   14ae0:	add	fp, sp, #4
   14ae4:	sub	sp, sp, #8
   14ae8:	str	r0, [fp, #-8]
   14aec:	str	r1, [fp, #-12]
   14af0:	ldr	r2, [fp, #-12]
   14af4:	ldr	r1, [fp, #-8]
   14af8:	mov	r0, #0
   14afc:	bl	14a64 <__assert_fail@plt+0x3cec>
   14b00:	mov	r3, r0
   14b04:	mov	r0, r3
   14b08:	sub	sp, fp, #4
   14b0c:	pop	{fp, pc}
   14b10:	push	{fp, lr}
   14b14:	add	fp, sp, #4
   14b18:	sub	sp, sp, #8
   14b1c:	str	r0, [fp, #-8]
   14b20:	str	r1, [fp, #-12]
   14b24:	mov	r2, #1
   14b28:	ldr	r1, [fp, #-12]
   14b2c:	ldr	r0, [fp, #-8]
   14b30:	bl	14b44 <__assert_fail@plt+0x3dcc>
   14b34:	mov	r3, r0
   14b38:	mov	r0, r3
   14b3c:	sub	sp, fp, #4
   14b40:	pop	{fp, pc}
   14b44:	push	{fp, lr}
   14b48:	add	fp, sp, #4
   14b4c:	sub	sp, sp, #24
   14b50:	str	r0, [fp, #-16]
   14b54:	str	r1, [fp, #-20]	; 0xffffffec
   14b58:	str	r2, [fp, #-24]	; 0xffffffe8
   14b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b60:	ldr	r3, [r3]
   14b64:	str	r3, [fp, #-8]
   14b68:	ldr	r3, [fp, #-16]
   14b6c:	cmp	r3, #0
   14b70:	bne	14bbc <__assert_fail@plt+0x3e44>
   14b74:	ldr	r3, [fp, #-8]
   14b78:	cmp	r3, #0
   14b7c:	bne	14c20 <__assert_fail@plt+0x3ea8>
   14b80:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14b84:	mov	r0, #64	; 0x40
   14b88:	bl	163d4 <__assert_fail@plt+0x565c>
   14b8c:	mov	r3, r0
   14b90:	str	r3, [fp, #-8]
   14b94:	ldr	r3, [fp, #-8]
   14b98:	cmp	r3, #0
   14b9c:	moveq	r3, #1
   14ba0:	movne	r3, #0
   14ba4:	uxtb	r3, r3
   14ba8:	mov	r2, r3
   14bac:	ldr	r3, [fp, #-8]
   14bb0:	add	r3, r2, r3
   14bb4:	str	r3, [fp, #-8]
   14bb8:	b	14c20 <__assert_fail@plt+0x3ea8>
   14bbc:	ldr	r3, [fp, #-8]
   14bc0:	lsr	r3, r3, #1
   14bc4:	add	r3, r3, #1
   14bc8:	mvn	r2, r3
   14bcc:	ldr	r3, [fp, #-8]
   14bd0:	cmp	r2, r3
   14bd4:	bcs	14bf8 <__assert_fail@plt+0x3e80>
   14bd8:	ldr	r3, [fp, #-8]
   14bdc:	lsr	r2, r3, #1
   14be0:	ldr	r3, [fp, #-8]
   14be4:	add	r3, r2, r3
   14be8:	add	r3, r3, #1
   14bec:	str	r3, [fp, #-8]
   14bf0:	mov	r3, #1
   14bf4:	b	14c14 <__assert_fail@plt+0x3e9c>
   14bf8:	ldr	r3, [fp, #-8]
   14bfc:	lsr	r2, r3, #1
   14c00:	ldr	r3, [fp, #-8]
   14c04:	add	r3, r2, r3
   14c08:	add	r3, r3, #1
   14c0c:	str	r3, [fp, #-8]
   14c10:	mov	r3, #0
   14c14:	cmp	r3, #0
   14c18:	beq	14c20 <__assert_fail@plt+0x3ea8>
   14c1c:	bl	153e8 <__assert_fail@plt+0x4670>
   14c20:	ldr	r3, [fp, #-8]
   14c24:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14c28:	mov	r1, r3
   14c2c:	ldr	r0, [fp, #-16]
   14c30:	bl	149f4 <__assert_fail@plt+0x3c7c>
   14c34:	str	r0, [fp, #-16]
   14c38:	ldr	r2, [fp, #-8]
   14c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c40:	str	r2, [r3]
   14c44:	ldr	r3, [fp, #-16]
   14c48:	mov	r0, r3
   14c4c:	sub	sp, fp, #4
   14c50:	pop	{fp, pc}
   14c54:	push	{fp, lr}
   14c58:	add	fp, sp, #4
   14c5c:	sub	sp, sp, #32
   14c60:	str	r0, [fp, #-24]	; 0xffffffe8
   14c64:	str	r1, [fp, #-28]	; 0xffffffe4
   14c68:	str	r2, [fp, #-32]	; 0xffffffe0
   14c6c:	str	r3, [fp, #-36]	; 0xffffffdc
   14c70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14c74:	ldr	r3, [r3]
   14c78:	str	r3, [fp, #-8]
   14c7c:	ldr	r3, [fp, #-8]
   14c80:	asr	r3, r3, #1
   14c84:	cmp	r3, #0
   14c88:	bge	14cb0 <__assert_fail@plt+0x3f38>
   14c8c:	ldr	r3, [fp, #-8]
   14c90:	asr	r3, r3, #1
   14c94:	rsb	r2, r3, #-2147483648	; 0x80000000
   14c98:	ldr	r3, [fp, #-8]
   14c9c:	cmp	r2, r3
   14ca0:	movgt	r3, #1
   14ca4:	movle	r3, #0
   14ca8:	uxtb	r3, r3
   14cac:	b	14d04 <__assert_fail@plt+0x3f8c>
   14cb0:	ldr	r3, [fp, #-8]
   14cb4:	cmp	r3, #0
   14cb8:	bge	14ce0 <__assert_fail@plt+0x3f68>
   14cbc:	ldr	r3, [fp, #-8]
   14cc0:	asr	r2, r3, #1
   14cc4:	ldr	r3, [fp, #-8]
   14cc8:	rsb	r3, r3, #-2147483648	; 0x80000000
   14ccc:	cmp	r2, r3
   14cd0:	movlt	r3, #1
   14cd4:	movge	r3, #0
   14cd8:	uxtb	r3, r3
   14cdc:	b	14d04 <__assert_fail@plt+0x3f8c>
   14ce0:	ldr	r3, [fp, #-8]
   14ce4:	asr	r2, r3, #1
   14ce8:	mvn	r3, #-2147483648	; 0x80000000
   14cec:	sub	r3, r3, r2
   14cf0:	ldr	r2, [fp, #-8]
   14cf4:	cmp	r3, r2
   14cf8:	movlt	r3, #1
   14cfc:	movge	r3, #0
   14d00:	uxtb	r3, r3
   14d04:	cmp	r3, #0
   14d08:	beq	14d2c <__assert_fail@plt+0x3fb4>
   14d0c:	ldr	r3, [fp, #-8]
   14d10:	asr	r3, r3, #1
   14d14:	mov	r2, r3
   14d18:	ldr	r3, [fp, #-8]
   14d1c:	add	r3, r2, r3
   14d20:	str	r3, [fp, #-16]
   14d24:	mov	r3, #1
   14d28:	b	14d48 <__assert_fail@plt+0x3fd0>
   14d2c:	ldr	r3, [fp, #-8]
   14d30:	asr	r3, r3, #1
   14d34:	mov	r2, r3
   14d38:	ldr	r3, [fp, #-8]
   14d3c:	add	r3, r2, r3
   14d40:	str	r3, [fp, #-16]
   14d44:	mov	r3, #0
   14d48:	cmp	r3, #0
   14d4c:	beq	14d58 <__assert_fail@plt+0x3fe0>
   14d50:	mvn	r3, #-2147483648	; 0x80000000
   14d54:	str	r3, [fp, #-16]
   14d58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d5c:	cmp	r3, #0
   14d60:	blt	14d7c <__assert_fail@plt+0x4004>
   14d64:	ldr	r3, [fp, #-16]
   14d68:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14d6c:	cmp	r2, r3
   14d70:	bge	14d7c <__assert_fail@plt+0x4004>
   14d74:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d78:	str	r3, [fp, #-16]
   14d7c:	ldr	r3, [fp, #4]
   14d80:	cmp	r3, #0
   14d84:	bge	14e14 <__assert_fail@plt+0x409c>
   14d88:	ldr	r3, [fp, #-16]
   14d8c:	cmp	r3, #0
   14d90:	bge	14dc0 <__assert_fail@plt+0x4048>
   14d94:	ldr	r1, [fp, #4]
   14d98:	mvn	r0, #-2147483648	; 0x80000000
   14d9c:	bl	165e0 <__assert_fail@plt+0x5868>
   14da0:	mov	r3, r0
   14da4:	mov	r2, r3
   14da8:	ldr	r3, [fp, #-16]
   14dac:	cmp	r2, r3
   14db0:	movgt	r3, #1
   14db4:	movle	r3, #0
   14db8:	uxtb	r3, r3
   14dbc:	b	14eb4 <__assert_fail@plt+0x413c>
   14dc0:	ldr	r3, [fp, #4]
   14dc4:	cmn	r3, #1
   14dc8:	bne	14de8 <__assert_fail@plt+0x4070>
   14dcc:	ldr	r3, [fp, #-16]
   14dd0:	add	r3, r3, #-2147483648	; 0x80000000
   14dd4:	cmp	r3, #0
   14dd8:	movgt	r3, #1
   14ddc:	movle	r3, #0
   14de0:	uxtb	r3, r3
   14de4:	b	14eb4 <__assert_fail@plt+0x413c>
   14de8:	ldr	r1, [fp, #4]
   14dec:	mov	r0, #-2147483648	; 0x80000000
   14df0:	bl	165e0 <__assert_fail@plt+0x5868>
   14df4:	mov	r3, r0
   14df8:	mov	r2, r3
   14dfc:	ldr	r3, [fp, #-16]
   14e00:	cmp	r2, r3
   14e04:	movlt	r3, #1
   14e08:	movge	r3, #0
   14e0c:	uxtb	r3, r3
   14e10:	b	14eb4 <__assert_fail@plt+0x413c>
   14e14:	ldr	r3, [fp, #4]
   14e18:	cmp	r3, #0
   14e1c:	beq	14eb0 <__assert_fail@plt+0x4138>
   14e20:	ldr	r3, [fp, #-16]
   14e24:	cmp	r3, #0
   14e28:	bge	14e84 <__assert_fail@plt+0x410c>
   14e2c:	ldr	r3, [fp, #-16]
   14e30:	cmn	r3, #1
   14e34:	bne	14e54 <__assert_fail@plt+0x40dc>
   14e38:	ldr	r3, [fp, #4]
   14e3c:	add	r3, r3, #-2147483648	; 0x80000000
   14e40:	cmp	r3, #0
   14e44:	movgt	r3, #1
   14e48:	movle	r3, #0
   14e4c:	uxtb	r3, r3
   14e50:	b	14eb4 <__assert_fail@plt+0x413c>
   14e54:	ldr	r3, [fp, #-16]
   14e58:	mov	r1, r3
   14e5c:	mov	r0, #-2147483648	; 0x80000000
   14e60:	bl	165e0 <__assert_fail@plt+0x5868>
   14e64:	mov	r3, r0
   14e68:	mov	r2, r3
   14e6c:	ldr	r3, [fp, #4]
   14e70:	cmp	r2, r3
   14e74:	movlt	r3, #1
   14e78:	movge	r3, #0
   14e7c:	uxtb	r3, r3
   14e80:	b	14eb4 <__assert_fail@plt+0x413c>
   14e84:	ldr	r1, [fp, #4]
   14e88:	mvn	r0, #-2147483648	; 0x80000000
   14e8c:	bl	165e0 <__assert_fail@plt+0x5868>
   14e90:	mov	r3, r0
   14e94:	mov	r2, r3
   14e98:	ldr	r3, [fp, #-16]
   14e9c:	cmp	r2, r3
   14ea0:	movlt	r3, #1
   14ea4:	movge	r3, #0
   14ea8:	uxtb	r3, r3
   14eac:	b	14eb4 <__assert_fail@plt+0x413c>
   14eb0:	mov	r3, #0
   14eb4:	cmp	r3, #0
   14eb8:	beq	14ed8 <__assert_fail@plt+0x4160>
   14ebc:	ldr	r3, [fp, #-16]
   14ec0:	mov	r2, r3
   14ec4:	ldr	r3, [fp, #4]
   14ec8:	mul	r3, r3, r2
   14ecc:	str	r3, [fp, #-20]	; 0xffffffec
   14ed0:	mov	r3, #1
   14ed4:	b	14ef0 <__assert_fail@plt+0x4178>
   14ed8:	ldr	r3, [fp, #-16]
   14edc:	mov	r2, r3
   14ee0:	ldr	r3, [fp, #4]
   14ee4:	mul	r3, r3, r2
   14ee8:	str	r3, [fp, #-20]	; 0xffffffec
   14eec:	mov	r3, #0
   14ef0:	cmp	r3, #0
   14ef4:	beq	14f00 <__assert_fail@plt+0x4188>
   14ef8:	mvn	r3, #-2147483648	; 0x80000000
   14efc:	b	14f18 <__assert_fail@plt+0x41a0>
   14f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f04:	cmp	r3, #63	; 0x3f
   14f08:	bgt	14f14 <__assert_fail@plt+0x419c>
   14f0c:	mov	r3, #64	; 0x40
   14f10:	b	14f18 <__assert_fail@plt+0x41a0>
   14f14:	mov	r3, #0
   14f18:	str	r3, [fp, #-12]
   14f1c:	ldr	r3, [fp, #-12]
   14f20:	cmp	r3, #0
   14f24:	beq	14f60 <__assert_fail@plt+0x41e8>
   14f28:	ldr	r1, [fp, #4]
   14f2c:	ldr	r0, [fp, #-12]
   14f30:	bl	165e0 <__assert_fail@plt+0x5868>
   14f34:	mov	r3, r0
   14f38:	str	r3, [fp, #-16]
   14f3c:	ldr	r3, [fp, #-12]
   14f40:	ldr	r1, [fp, #4]
   14f44:	mov	r0, r3
   14f48:	bl	16800 <__assert_fail@plt+0x5a88>
   14f4c:	mov	r3, r1
   14f50:	mov	r2, r3
   14f54:	ldr	r3, [fp, #-12]
   14f58:	sub	r3, r3, r2
   14f5c:	str	r3, [fp, #-20]	; 0xffffffec
   14f60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f64:	cmp	r3, #0
   14f68:	bne	14f78 <__assert_fail@plt+0x4200>
   14f6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f70:	mov	r2, #0
   14f74:	str	r2, [r3]
   14f78:	ldr	r2, [fp, #-16]
   14f7c:	ldr	r3, [fp, #-8]
   14f80:	sub	r2, r2, r3
   14f84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14f88:	cmp	r2, r3
   14f8c:	bge	151c4 <__assert_fail@plt+0x444c>
   14f90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14f94:	cmp	r3, #0
   14f98:	bge	14fbc <__assert_fail@plt+0x4244>
   14f9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fa0:	rsb	r2, r3, #-2147483648	; 0x80000000
   14fa4:	ldr	r3, [fp, #-8]
   14fa8:	cmp	r2, r3
   14fac:	movgt	r3, #1
   14fb0:	movle	r3, #0
   14fb4:	uxtb	r3, r3
   14fb8:	b	15008 <__assert_fail@plt+0x4290>
   14fbc:	ldr	r3, [fp, #-8]
   14fc0:	cmp	r3, #0
   14fc4:	bge	14fe8 <__assert_fail@plt+0x4270>
   14fc8:	ldr	r3, [fp, #-8]
   14fcc:	rsb	r2, r3, #-2147483648	; 0x80000000
   14fd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fd4:	cmp	r2, r3
   14fd8:	movgt	r3, #1
   14fdc:	movle	r3, #0
   14fe0:	uxtb	r3, r3
   14fe4:	b	15008 <__assert_fail@plt+0x4290>
   14fe8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14fec:	mvn	r3, #-2147483648	; 0x80000000
   14ff0:	sub	r3, r3, r2
   14ff4:	ldr	r2, [fp, #-8]
   14ff8:	cmp	r3, r2
   14ffc:	movlt	r3, #1
   15000:	movge	r3, #0
   15004:	uxtb	r3, r3
   15008:	cmp	r3, #0
   1500c:	beq	15024 <__assert_fail@plt+0x42ac>
   15010:	ldr	r2, [fp, #-8]
   15014:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15018:	add	r3, r2, r3
   1501c:	str	r3, [fp, #-16]
   15020:	b	151c0 <__assert_fail@plt+0x4448>
   15024:	ldr	r2, [fp, #-8]
   15028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1502c:	add	r3, r2, r3
   15030:	str	r3, [fp, #-16]
   15034:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15038:	cmp	r3, #0
   1503c:	blt	15050 <__assert_fail@plt+0x42d8>
   15040:	ldr	r3, [fp, #-16]
   15044:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15048:	cmp	r2, r3
   1504c:	blt	151c0 <__assert_fail@plt+0x4448>
   15050:	ldr	r3, [fp, #4]
   15054:	cmp	r3, #0
   15058:	bge	150e8 <__assert_fail@plt+0x4370>
   1505c:	ldr	r3, [fp, #-16]
   15060:	cmp	r3, #0
   15064:	bge	15094 <__assert_fail@plt+0x431c>
   15068:	ldr	r1, [fp, #4]
   1506c:	mvn	r0, #-2147483648	; 0x80000000
   15070:	bl	165e0 <__assert_fail@plt+0x5868>
   15074:	mov	r3, r0
   15078:	mov	r2, r3
   1507c:	ldr	r3, [fp, #-16]
   15080:	cmp	r2, r3
   15084:	movgt	r3, #1
   15088:	movle	r3, #0
   1508c:	uxtb	r3, r3
   15090:	b	15188 <__assert_fail@plt+0x4410>
   15094:	ldr	r3, [fp, #4]
   15098:	cmn	r3, #1
   1509c:	bne	150bc <__assert_fail@plt+0x4344>
   150a0:	ldr	r3, [fp, #-16]
   150a4:	add	r3, r3, #-2147483648	; 0x80000000
   150a8:	cmp	r3, #0
   150ac:	movgt	r3, #1
   150b0:	movle	r3, #0
   150b4:	uxtb	r3, r3
   150b8:	b	15188 <__assert_fail@plt+0x4410>
   150bc:	ldr	r1, [fp, #4]
   150c0:	mov	r0, #-2147483648	; 0x80000000
   150c4:	bl	165e0 <__assert_fail@plt+0x5868>
   150c8:	mov	r3, r0
   150cc:	mov	r2, r3
   150d0:	ldr	r3, [fp, #-16]
   150d4:	cmp	r2, r3
   150d8:	movlt	r3, #1
   150dc:	movge	r3, #0
   150e0:	uxtb	r3, r3
   150e4:	b	15188 <__assert_fail@plt+0x4410>
   150e8:	ldr	r3, [fp, #4]
   150ec:	cmp	r3, #0
   150f0:	beq	15184 <__assert_fail@plt+0x440c>
   150f4:	ldr	r3, [fp, #-16]
   150f8:	cmp	r3, #0
   150fc:	bge	15158 <__assert_fail@plt+0x43e0>
   15100:	ldr	r3, [fp, #-16]
   15104:	cmn	r3, #1
   15108:	bne	15128 <__assert_fail@plt+0x43b0>
   1510c:	ldr	r3, [fp, #4]
   15110:	add	r3, r3, #-2147483648	; 0x80000000
   15114:	cmp	r3, #0
   15118:	movgt	r3, #1
   1511c:	movle	r3, #0
   15120:	uxtb	r3, r3
   15124:	b	15188 <__assert_fail@plt+0x4410>
   15128:	ldr	r3, [fp, #-16]
   1512c:	mov	r1, r3
   15130:	mov	r0, #-2147483648	; 0x80000000
   15134:	bl	165e0 <__assert_fail@plt+0x5868>
   15138:	mov	r3, r0
   1513c:	mov	r2, r3
   15140:	ldr	r3, [fp, #4]
   15144:	cmp	r2, r3
   15148:	movlt	r3, #1
   1514c:	movge	r3, #0
   15150:	uxtb	r3, r3
   15154:	b	15188 <__assert_fail@plt+0x4410>
   15158:	ldr	r1, [fp, #4]
   1515c:	mvn	r0, #-2147483648	; 0x80000000
   15160:	bl	165e0 <__assert_fail@plt+0x5868>
   15164:	mov	r3, r0
   15168:	mov	r2, r3
   1516c:	ldr	r3, [fp, #-16]
   15170:	cmp	r2, r3
   15174:	movlt	r3, #1
   15178:	movge	r3, #0
   1517c:	uxtb	r3, r3
   15180:	b	15188 <__assert_fail@plt+0x4410>
   15184:	mov	r3, #0
   15188:	cmp	r3, #0
   1518c:	beq	151a8 <__assert_fail@plt+0x4430>
   15190:	ldr	r3, [fp, #-16]
   15194:	mov	r2, r3
   15198:	ldr	r3, [fp, #4]
   1519c:	mul	r3, r3, r2
   151a0:	str	r3, [fp, #-20]	; 0xffffffec
   151a4:	b	151c0 <__assert_fail@plt+0x4448>
   151a8:	ldr	r3, [fp, #-16]
   151ac:	mov	r2, r3
   151b0:	ldr	r3, [fp, #4]
   151b4:	mul	r3, r3, r2
   151b8:	str	r3, [fp, #-20]	; 0xffffffec
   151bc:	b	151c4 <__assert_fail@plt+0x444c>
   151c0:	bl	153e8 <__assert_fail@plt+0x4670>
   151c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   151c8:	mov	r1, r3
   151cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   151d0:	bl	1495c <__assert_fail@plt+0x3be4>
   151d4:	str	r0, [fp, #-24]	; 0xffffffe8
   151d8:	ldr	r2, [fp, #-16]
   151dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151e0:	str	r2, [r3]
   151e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151e8:	mov	r0, r3
   151ec:	sub	sp, fp, #4
   151f0:	pop	{fp, pc}
   151f4:	push	{fp, lr}
   151f8:	add	fp, sp, #4
   151fc:	sub	sp, sp, #8
   15200:	str	r0, [fp, #-8]
   15204:	mov	r1, #1
   15208:	ldr	r0, [fp, #-8]
   1520c:	bl	1524c <__assert_fail@plt+0x44d4>
   15210:	mov	r3, r0
   15214:	mov	r0, r3
   15218:	sub	sp, fp, #4
   1521c:	pop	{fp, pc}
   15220:	push	{fp, lr}
   15224:	add	fp, sp, #4
   15228:	sub	sp, sp, #8
   1522c:	str	r0, [fp, #-8]
   15230:	mov	r1, #1
   15234:	ldr	r0, [fp, #-8]
   15238:	bl	15288 <__assert_fail@plt+0x4510>
   1523c:	mov	r3, r0
   15240:	mov	r0, r3
   15244:	sub	sp, fp, #4
   15248:	pop	{fp, pc}
   1524c:	push	{fp, lr}
   15250:	add	fp, sp, #4
   15254:	sub	sp, sp, #8
   15258:	str	r0, [fp, #-8]
   1525c:	str	r1, [fp, #-12]
   15260:	ldr	r1, [fp, #-12]
   15264:	ldr	r0, [fp, #-8]
   15268:	bl	15424 <__assert_fail@plt+0x46ac>
   1526c:	mov	r3, r0
   15270:	mov	r0, r3
   15274:	bl	1489c <__assert_fail@plt+0x3b24>
   15278:	mov	r3, r0
   1527c:	mov	r0, r3
   15280:	sub	sp, fp, #4
   15284:	pop	{fp, pc}
   15288:	push	{fp, lr}
   1528c:	add	fp, sp, #4
   15290:	sub	sp, sp, #8
   15294:	str	r0, [fp, #-8]
   15298:	str	r1, [fp, #-12]
   1529c:	ldr	r1, [fp, #-12]
   152a0:	ldr	r0, [fp, #-8]
   152a4:	bl	15c80 <__assert_fail@plt+0x4f08>
   152a8:	mov	r3, r0
   152ac:	mov	r0, r3
   152b0:	bl	1489c <__assert_fail@plt+0x3b24>
   152b4:	mov	r3, r0
   152b8:	mov	r0, r3
   152bc:	sub	sp, fp, #4
   152c0:	pop	{fp, pc}
   152c4:	push	{fp, lr}
   152c8:	add	fp, sp, #4
   152cc:	sub	sp, sp, #8
   152d0:	str	r0, [fp, #-8]
   152d4:	str	r1, [fp, #-12]
   152d8:	ldr	r0, [fp, #-12]
   152dc:	bl	148cc <__assert_fail@plt+0x3b54>
   152e0:	mov	r3, r0
   152e4:	ldr	r2, [fp, #-12]
   152e8:	ldr	r1, [fp, #-8]
   152ec:	mov	r0, r3
   152f0:	bl	10bc8 <memcpy@plt>
   152f4:	mov	r3, r0
   152f8:	mov	r0, r3
   152fc:	sub	sp, fp, #4
   15300:	pop	{fp, pc}
   15304:	push	{fp, lr}
   15308:	add	fp, sp, #4
   1530c:	sub	sp, sp, #8
   15310:	str	r0, [fp, #-8]
   15314:	str	r1, [fp, #-12]
   15318:	ldr	r0, [fp, #-12]
   1531c:	bl	14900 <__assert_fail@plt+0x3b88>
   15320:	mov	r3, r0
   15324:	mov	r0, r3
   15328:	ldr	r3, [fp, #-12]
   1532c:	mov	r2, r3
   15330:	ldr	r1, [fp, #-8]
   15334:	bl	10bc8 <memcpy@plt>
   15338:	mov	r3, r0
   1533c:	mov	r0, r3
   15340:	sub	sp, fp, #4
   15344:	pop	{fp, pc}
   15348:	push	{fp, lr}
   1534c:	add	fp, sp, #4
   15350:	sub	sp, sp, #16
   15354:	str	r0, [fp, #-16]
   15358:	str	r1, [fp, #-20]	; 0xffffffec
   1535c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15360:	add	r3, r3, #1
   15364:	mov	r0, r3
   15368:	bl	14900 <__assert_fail@plt+0x3b88>
   1536c:	mov	r3, r0
   15370:	str	r3, [fp, #-8]
   15374:	ldr	r3, [fp, #-20]	; 0xffffffec
   15378:	ldr	r2, [fp, #-8]
   1537c:	add	r3, r2, r3
   15380:	mov	r2, #0
   15384:	strb	r2, [r3]
   15388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1538c:	mov	r2, r3
   15390:	ldr	r1, [fp, #-16]
   15394:	ldr	r0, [fp, #-8]
   15398:	bl	10bc8 <memcpy@plt>
   1539c:	mov	r3, r0
   153a0:	mov	r0, r3
   153a4:	sub	sp, fp, #4
   153a8:	pop	{fp, pc}
   153ac:	push	{fp, lr}
   153b0:	add	fp, sp, #4
   153b4:	sub	sp, sp, #8
   153b8:	str	r0, [fp, #-8]
   153bc:	ldr	r0, [fp, #-8]
   153c0:	bl	10cac <strlen@plt>
   153c4:	mov	r3, r0
   153c8:	add	r3, r3, #1
   153cc:	mov	r1, r3
   153d0:	ldr	r0, [fp, #-8]
   153d4:	bl	152c4 <__assert_fail@plt+0x454c>
   153d8:	mov	r3, r0
   153dc:	mov	r0, r3
   153e0:	sub	sp, fp, #4
   153e4:	pop	{fp, pc}
   153e8:	push	{r4, r5, fp, lr}
   153ec:	add	fp, sp, #12
   153f0:	ldr	r3, [pc, #32]	; 15418 <__assert_fail@plt+0x46a0>
   153f4:	ldr	r4, [r3]
   153f8:	ldr	r0, [pc, #28]	; 1541c <__assert_fail@plt+0x46a4>
   153fc:	bl	10ca0 <gettext@plt>
   15400:	mov	r3, r0
   15404:	ldr	r2, [pc, #20]	; 15420 <__assert_fail@plt+0x46a8>
   15408:	mov	r1, #0
   1540c:	mov	r0, r4
   15410:	bl	10c40 <error@plt>
   15414:	bl	10d6c <abort@plt>
   15418:	ldrdeq	r8, [r2], -r4
   1541c:	andeq	r7, r1, r8, asr r1
   15420:	andeq	r7, r1, ip, ror #2
   15424:	push	{r4, r5, fp, lr}
   15428:	add	fp, sp, #12
   1542c:	sub	sp, sp, #16
   15430:	str	r0, [fp, #-24]	; 0xffffffe8
   15434:	str	r1, [fp, #-28]	; 0xffffffe4
   15438:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1543c:	cmp	r3, #0
   15440:	beq	15450 <__assert_fail@plt+0x46d8>
   15444:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15448:	cmp	r3, #0
   1544c:	bne	15460 <__assert_fail@plt+0x46e8>
   15450:	mov	r3, #1
   15454:	str	r3, [fp, #-28]	; 0xffffffe4
   15458:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1545c:	str	r3, [fp, #-24]	; 0xffffffe8
   15460:	mov	r1, #0
   15464:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15468:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1546c:	umull	r2, r3, r2, r3
   15470:	mov	r4, r3
   15474:	mov	r5, #0
   15478:	cmp	r4, #0
   1547c:	beq	15484 <__assert_fail@plt+0x470c>
   15480:	mov	r1, #1
   15484:	cmp	r2, #0
   15488:	bge	15490 <__assert_fail@plt+0x4718>
   1548c:	mov	r1, #1
   15490:	mov	r3, r2
   15494:	str	r3, [fp, #-20]	; 0xffffffec
   15498:	mov	r3, r1
   1549c:	and	r3, r3, #1
   154a0:	uxtb	r3, r3
   154a4:	cmp	r3, #0
   154a8:	beq	154c4 <__assert_fail@plt+0x474c>
   154ac:	bl	10cc4 <__errno_location@plt>
   154b0:	mov	r2, r0
   154b4:	mov	r3, #12
   154b8:	str	r3, [r2]
   154bc:	mov	r3, #0
   154c0:	b	154dc <__assert_fail@plt+0x4764>
   154c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   154c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154cc:	bl	10b5c <calloc@plt>
   154d0:	mov	r3, r0
   154d4:	str	r3, [fp, #-16]
   154d8:	ldr	r3, [fp, #-16]
   154dc:	mov	r0, r3
   154e0:	sub	sp, fp, #12
   154e4:	pop	{r4, r5, fp, pc}
   154e8:	push	{fp, lr}
   154ec:	add	fp, sp, #4
   154f0:	sub	sp, sp, #16
   154f4:	str	r0, [fp, #-8]
   154f8:	ldr	r3, [fp, #-8]
   154fc:	ldr	r3, [r3]
   15500:	and	r3, r3, #256	; 0x100
   15504:	cmp	r3, #0
   15508:	beq	15524 <__assert_fail@plt+0x47ac>
   1550c:	mov	r3, #1
   15510:	str	r3, [sp]
   15514:	mov	r2, #0
   15518:	mov	r3, #0
   1551c:	ldr	r0, [fp, #-8]
   15520:	bl	1561c <__assert_fail@plt+0x48a4>
   15524:	nop			; (mov r0, r0)
   15528:	sub	sp, fp, #4
   1552c:	pop	{fp, pc}
   15530:	push	{fp, lr}
   15534:	add	fp, sp, #4
   15538:	sub	sp, sp, #8
   1553c:	str	r0, [fp, #-8]
   15540:	ldr	r3, [fp, #-8]
   15544:	cmp	r3, #0
   15548:	beq	15560 <__assert_fail@plt+0x47e8>
   1554c:	ldr	r0, [fp, #-8]
   15550:	bl	10c64 <__freading@plt>
   15554:	mov	r3, r0
   15558:	cmp	r3, #0
   1555c:	bne	15570 <__assert_fail@plt+0x47f8>
   15560:	ldr	r0, [fp, #-8]
   15564:	bl	10b98 <fflush@plt>
   15568:	mov	r3, r0
   1556c:	b	15584 <__assert_fail@plt+0x480c>
   15570:	ldr	r0, [fp, #-8]
   15574:	bl	154e8 <__assert_fail@plt+0x4770>
   15578:	ldr	r0, [fp, #-8]
   1557c:	bl	10b98 <fflush@plt>
   15580:	mov	r3, r0
   15584:	mov	r0, r3
   15588:	sub	sp, fp, #4
   1558c:	pop	{fp, pc}
   15590:	push	{r4, fp, lr}
   15594:	add	fp, sp, #8
   15598:	sub	sp, sp, #20
   1559c:	str	r0, [fp, #-24]	; 0xffffffe8
   155a0:	bl	10cc4 <__errno_location@plt>
   155a4:	mov	r3, r0
   155a8:	ldr	r3, [r3]
   155ac:	str	r3, [fp, #-20]	; 0xffffffec
   155b0:	bl	10cc4 <__errno_location@plt>
   155b4:	mov	r3, r0
   155b8:	ldr	r3, [r3]
   155bc:	str	r3, [fp, #-16]
   155c0:	bl	10cc4 <__errno_location@plt>
   155c4:	mov	r2, r0
   155c8:	mov	r3, #0
   155cc:	str	r3, [r2]
   155d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155d4:	bl	10ba4 <free@plt>
   155d8:	bl	10cc4 <__errno_location@plt>
   155dc:	mov	r4, r0
   155e0:	bl	10cc4 <__errno_location@plt>
   155e4:	mov	r3, r0
   155e8:	ldr	r3, [r3]
   155ec:	cmp	r3, #0
   155f0:	moveq	r3, #1
   155f4:	movne	r3, #0
   155f8:	uxtb	r3, r3
   155fc:	lsl	r3, r3, #2
   15600:	sub	r2, fp, #12
   15604:	add	r3, r2, r3
   15608:	ldr	r3, [r3, #-8]
   1560c:	str	r3, [r4]
   15610:	nop			; (mov r0, r0)
   15614:	sub	sp, fp, #8
   15618:	pop	{r4, fp, pc}
   1561c:	push	{fp, lr}
   15620:	add	fp, sp, #4
   15624:	sub	sp, sp, #32
   15628:	str	r0, [fp, #-16]
   1562c:	strd	r2, [fp, #-28]	; 0xffffffe4
   15630:	ldr	r3, [fp, #-16]
   15634:	ldr	r2, [r3, #8]
   15638:	ldr	r3, [fp, #-16]
   1563c:	ldr	r3, [r3, #4]
   15640:	cmp	r2, r3
   15644:	bne	156dc <__assert_fail@plt+0x4964>
   15648:	ldr	r3, [fp, #-16]
   1564c:	ldr	r2, [r3, #20]
   15650:	ldr	r3, [fp, #-16]
   15654:	ldr	r3, [r3, #16]
   15658:	cmp	r2, r3
   1565c:	bne	156dc <__assert_fail@plt+0x4964>
   15660:	ldr	r3, [fp, #-16]
   15664:	ldr	r3, [r3, #36]	; 0x24
   15668:	cmp	r3, #0
   1566c:	bne	156dc <__assert_fail@plt+0x4964>
   15670:	ldr	r0, [fp, #-16]
   15674:	bl	10ce8 <fileno@plt>
   15678:	mov	r1, r0
   1567c:	ldr	r3, [fp, #4]
   15680:	str	r3, [sp]
   15684:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15688:	mov	r0, r1
   1568c:	bl	10c10 <lseek64@plt>
   15690:	strd	r0, [fp, #-12]
   15694:	ldrd	r2, [fp, #-12]
   15698:	mvn	r0, #0
   1569c:	mvn	r1, #0
   156a0:	cmp	r3, r1
   156a4:	cmpeq	r2, r0
   156a8:	bne	156b4 <__assert_fail@plt+0x493c>
   156ac:	mvn	r3, #0
   156b0:	b	156f4 <__assert_fail@plt+0x497c>
   156b4:	ldr	r3, [fp, #-16]
   156b8:	ldr	r3, [r3]
   156bc:	bic	r2, r3, #16
   156c0:	ldr	r3, [fp, #-16]
   156c4:	str	r2, [r3]
   156c8:	ldr	r1, [fp, #-16]
   156cc:	ldrd	r2, [fp, #-12]
   156d0:	strd	r2, [r1, #80]	; 0x50
   156d4:	mov	r3, #0
   156d8:	b	156f4 <__assert_fail@plt+0x497c>
   156dc:	ldr	r3, [fp, #4]
   156e0:	str	r3, [sp]
   156e4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   156e8:	ldr	r0, [fp, #-16]
   156ec:	bl	10d00 <fseeko64@plt>
   156f0:	mov	r3, r0
   156f4:	mov	r0, r3
   156f8:	sub	sp, fp, #4
   156fc:	pop	{fp, pc}
   15700:	push	{r4, r5, fp, lr}
   15704:	add	fp, sp, #12
   15708:	sub	sp, sp, #16
   1570c:	str	r0, [fp, #-24]	; 0xffffffe8
   15710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15714:	cmp	r3, #0
   15718:	bne	15724 <__assert_fail@plt+0x49ac>
   1571c:	mov	r3, #1
   15720:	str	r3, [fp, #-24]	; 0xffffffe8
   15724:	mov	r1, #0
   15728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1572c:	mov	r2, r3
   15730:	mov	r3, #0
   15734:	mov	r4, r3
   15738:	mov	r5, #0
   1573c:	cmp	r4, #0
   15740:	beq	15748 <__assert_fail@plt+0x49d0>
   15744:	mov	r1, #1
   15748:	cmp	r2, #0
   1574c:	bge	15754 <__assert_fail@plt+0x49dc>
   15750:	mov	r1, #1
   15754:	mov	r3, r2
   15758:	str	r3, [fp, #-20]	; 0xffffffec
   1575c:	mov	r3, r1
   15760:	and	r3, r3, #1
   15764:	uxtb	r3, r3
   15768:	cmp	r3, #0
   1576c:	beq	15788 <__assert_fail@plt+0x4a10>
   15770:	bl	10cc4 <__errno_location@plt>
   15774:	mov	r2, r0
   15778:	mov	r3, #12
   1577c:	str	r3, [r2]
   15780:	mov	r3, #0
   15784:	b	1579c <__assert_fail@plt+0x4a24>
   15788:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1578c:	bl	10c4c <malloc@plt>
   15790:	mov	r3, r0
   15794:	str	r3, [fp, #-16]
   15798:	ldr	r3, [fp, #-16]
   1579c:	mov	r0, r3
   157a0:	sub	sp, fp, #12
   157a4:	pop	{r4, r5, fp, pc}
   157a8:	push	{fp, lr}
   157ac:	add	fp, sp, #4
   157b0:	sub	sp, sp, #32
   157b4:	str	r0, [fp, #-24]	; 0xffffffe8
   157b8:	str	r1, [fp, #-28]	; 0xffffffe4
   157bc:	str	r2, [fp, #-32]	; 0xffffffe0
   157c0:	str	r3, [fp, #-36]	; 0xffffffdc
   157c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157c8:	cmp	r3, #0
   157cc:	bne	157d8 <__assert_fail@plt+0x4a60>
   157d0:	sub	r3, fp, #16
   157d4:	str	r3, [fp, #-24]	; 0xffffffe8
   157d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   157dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   157e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   157e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157e8:	bl	10c34 <mbrtowc@plt>
   157ec:	str	r0, [fp, #-8]
   157f0:	ldr	r3, [fp, #-8]
   157f4:	cmn	r3, #3
   157f8:	bls	15844 <__assert_fail@plt+0x4acc>
   157fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15800:	cmp	r3, #0
   15804:	beq	15844 <__assert_fail@plt+0x4acc>
   15808:	mov	r0, #0
   1580c:	bl	15b44 <__assert_fail@plt+0x4dcc>
   15810:	mov	r3, r0
   15814:	eor	r3, r3, #1
   15818:	uxtb	r3, r3
   1581c:	cmp	r3, #0
   15820:	beq	15844 <__assert_fail@plt+0x4acc>
   15824:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15828:	ldrb	r3, [r3]
   1582c:	strb	r3, [fp, #-9]
   15830:	ldrb	r2, [fp, #-9]
   15834:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15838:	str	r2, [r3]
   1583c:	mov	r3, #1
   15840:	b	15848 <__assert_fail@plt+0x4ad0>
   15844:	ldr	r3, [fp, #-8]
   15848:	mov	r0, r3
   1584c:	sub	sp, fp, #4
   15850:	pop	{fp, pc}
   15854:	push	{r4, r5, fp, lr}
   15858:	add	fp, sp, #12
   1585c:	sub	sp, sp, #16
   15860:	str	r0, [fp, #-24]	; 0xffffffe8
   15864:	str	r1, [fp, #-28]	; 0xffffffe4
   15868:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1586c:	cmp	r3, #0
   15870:	bne	15884 <__assert_fail@plt+0x4b0c>
   15874:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15878:	bl	15700 <__assert_fail@plt+0x4988>
   1587c:	mov	r3, r0
   15880:	b	15918 <__assert_fail@plt+0x4ba0>
   15884:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15888:	cmp	r3, #0
   1588c:	bne	158a0 <__assert_fail@plt+0x4b28>
   15890:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15894:	bl	15590 <__assert_fail@plt+0x4818>
   15898:	mov	r3, #0
   1589c:	b	15918 <__assert_fail@plt+0x4ba0>
   158a0:	mov	r1, #0
   158a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158a8:	mov	r2, r3
   158ac:	mov	r3, #0
   158b0:	mov	r4, r3
   158b4:	mov	r5, #0
   158b8:	cmp	r4, #0
   158bc:	beq	158c4 <__assert_fail@plt+0x4b4c>
   158c0:	mov	r1, #1
   158c4:	cmp	r2, #0
   158c8:	bge	158d0 <__assert_fail@plt+0x4b58>
   158cc:	mov	r1, #1
   158d0:	mov	r3, r2
   158d4:	str	r3, [fp, #-20]	; 0xffffffec
   158d8:	mov	r3, r1
   158dc:	and	r3, r3, #1
   158e0:	uxtb	r3, r3
   158e4:	cmp	r3, #0
   158e8:	beq	15904 <__assert_fail@plt+0x4b8c>
   158ec:	bl	10cc4 <__errno_location@plt>
   158f0:	mov	r2, r0
   158f4:	mov	r3, #12
   158f8:	str	r3, [r2]
   158fc:	mov	r3, #0
   15900:	b	15918 <__assert_fail@plt+0x4ba0>
   15904:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15908:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1590c:	bl	10bec <realloc@plt>
   15910:	str	r0, [fp, #-16]
   15914:	ldr	r3, [fp, #-16]
   15918:	mov	r0, r3
   1591c:	sub	sp, fp, #12
   15920:	pop	{r4, r5, fp, pc}
   15924:	push	{fp, lr}
   15928:	add	fp, sp, #4
   1592c:	sub	sp, sp, #24
   15930:	str	r0, [fp, #-16]
   15934:	str	r1, [fp, #-20]	; 0xffffffec
   15938:	str	r2, [fp, #-24]	; 0xffffffe8
   1593c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15940:	cmp	r3, #0
   15944:	beq	15980 <__assert_fail@plt+0x4c08>
   15948:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1594c:	mvn	r0, #0
   15950:	bl	163d4 <__assert_fail@plt+0x565c>
   15954:	mov	r3, r0
   15958:	mov	r2, r3
   1595c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15960:	cmp	r2, r3
   15964:	bcs	15980 <__assert_fail@plt+0x4c08>
   15968:	ldr	r3, [fp, #-20]	; 0xffffffec
   1596c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15970:	mul	r3, r2, r3
   15974:	str	r3, [fp, #-8]
   15978:	mov	r3, #1
   1597c:	b	15994 <__assert_fail@plt+0x4c1c>
   15980:	ldr	r3, [fp, #-20]	; 0xffffffec
   15984:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15988:	mul	r3, r2, r3
   1598c:	str	r3, [fp, #-8]
   15990:	mov	r3, #0
   15994:	cmp	r3, #0
   15998:	beq	159b4 <__assert_fail@plt+0x4c3c>
   1599c:	bl	10cc4 <__errno_location@plt>
   159a0:	mov	r2, r0
   159a4:	mov	r3, #12
   159a8:	str	r3, [r2]
   159ac:	mov	r3, #0
   159b0:	b	159c8 <__assert_fail@plt+0x4c50>
   159b4:	ldr	r3, [fp, #-8]
   159b8:	mov	r1, r3
   159bc:	ldr	r0, [fp, #-16]
   159c0:	bl	15854 <__assert_fail@plt+0x4adc>
   159c4:	mov	r3, r0
   159c8:	mov	r0, r3
   159cc:	sub	sp, fp, #4
   159d0:	pop	{fp, pc}
   159d4:	push	{r4, r5, fp, lr}
   159d8:	add	fp, sp, #12
   159dc:	sub	sp, sp, #16
   159e0:	str	r0, [fp, #-24]	; 0xffffffe8
   159e4:	str	r1, [fp, #-28]	; 0xffffffe4
   159e8:	ldr	r5, [fp, #-24]	; 0xffffffe8
   159ec:	ldr	r4, [fp, #-28]	; 0xffffffe4
   159f0:	cmp	r5, r4
   159f4:	bne	15a00 <__assert_fail@plt+0x4c88>
   159f8:	mov	r3, #0
   159fc:	b	15a60 <__assert_fail@plt+0x4ce8>
   15a00:	ldrb	r3, [r5]
   15a04:	mov	r0, r3
   15a08:	bl	16354 <__assert_fail@plt+0x55dc>
   15a0c:	mov	r3, r0
   15a10:	strb	r3, [fp, #-13]
   15a14:	ldrb	r3, [r4]
   15a18:	mov	r0, r3
   15a1c:	bl	16354 <__assert_fail@plt+0x55dc>
   15a20:	mov	r3, r0
   15a24:	strb	r3, [fp, #-14]
   15a28:	ldrb	r3, [fp, #-13]
   15a2c:	cmp	r3, #0
   15a30:	beq	15a50 <__assert_fail@plt+0x4cd8>
   15a34:	add	r5, r5, #1
   15a38:	add	r4, r4, #1
   15a3c:	ldrb	r2, [fp, #-13]
   15a40:	ldrb	r3, [fp, #-14]
   15a44:	cmp	r2, r3
   15a48:	beq	15a00 <__assert_fail@plt+0x4c88>
   15a4c:	b	15a54 <__assert_fail@plt+0x4cdc>
   15a50:	nop			; (mov r0, r0)
   15a54:	ldrb	r2, [fp, #-13]
   15a58:	ldrb	r3, [fp, #-14]
   15a5c:	sub	r3, r2, r3
   15a60:	mov	r0, r3
   15a64:	sub	sp, fp, #12
   15a68:	pop	{r4, r5, fp, pc}
   15a6c:	push	{fp, lr}
   15a70:	add	fp, sp, #4
   15a74:	sub	sp, sp, #16
   15a78:	str	r0, [fp, #-16]
   15a7c:	ldr	r0, [fp, #-16]
   15a80:	bl	10c28 <__fpending@plt>
   15a84:	mov	r3, r0
   15a88:	cmp	r3, #0
   15a8c:	movne	r3, #1
   15a90:	moveq	r3, #0
   15a94:	strb	r3, [fp, #-5]
   15a98:	ldr	r0, [fp, #-16]
   15a9c:	bl	10bb0 <ferror@plt>
   15aa0:	mov	r3, r0
   15aa4:	cmp	r3, #0
   15aa8:	movne	r3, #1
   15aac:	moveq	r3, #0
   15ab0:	strb	r3, [fp, #-6]
   15ab4:	ldr	r0, [fp, #-16]
   15ab8:	bl	10cf4 <fclose@plt>
   15abc:	mov	r3, r0
   15ac0:	cmp	r3, #0
   15ac4:	movne	r3, #1
   15ac8:	moveq	r3, #0
   15acc:	strb	r3, [fp, #-7]
   15ad0:	ldrb	r3, [fp, #-6]
   15ad4:	cmp	r3, #0
   15ad8:	bne	15b08 <__assert_fail@plt+0x4d90>
   15adc:	ldrb	r3, [fp, #-7]
   15ae0:	cmp	r3, #0
   15ae4:	beq	15b34 <__assert_fail@plt+0x4dbc>
   15ae8:	ldrb	r3, [fp, #-5]
   15aec:	cmp	r3, #0
   15af0:	bne	15b08 <__assert_fail@plt+0x4d90>
   15af4:	bl	10cc4 <__errno_location@plt>
   15af8:	mov	r3, r0
   15afc:	ldr	r3, [r3]
   15b00:	cmp	r3, #9
   15b04:	beq	15b34 <__assert_fail@plt+0x4dbc>
   15b08:	ldrb	r3, [fp, #-7]
   15b0c:	eor	r3, r3, #1
   15b10:	uxtb	r3, r3
   15b14:	cmp	r3, #0
   15b18:	beq	15b2c <__assert_fail@plt+0x4db4>
   15b1c:	bl	10cc4 <__errno_location@plt>
   15b20:	mov	r2, r0
   15b24:	mov	r3, #0
   15b28:	str	r3, [r2]
   15b2c:	mvn	r3, #0
   15b30:	b	15b38 <__assert_fail@plt+0x4dc0>
   15b34:	mov	r3, #0
   15b38:	mov	r0, r3
   15b3c:	sub	sp, fp, #4
   15b40:	pop	{fp, pc}
   15b44:	push	{fp, lr}
   15b48:	add	fp, sp, #4
   15b4c:	sub	sp, sp, #272	; 0x110
   15b50:	str	r0, [fp, #-272]	; 0xfffffef0
   15b54:	sub	r3, fp, #264	; 0x108
   15b58:	ldr	r2, [pc, #116]	; 15bd4 <__assert_fail@plt+0x4e5c>
   15b5c:	mov	r1, r3
   15b60:	ldr	r0, [fp, #-272]	; 0xfffffef0
   15b64:	bl	15e80 <__assert_fail@plt+0x5108>
   15b68:	mov	r3, r0
   15b6c:	cmp	r3, #0
   15b70:	beq	15b7c <__assert_fail@plt+0x4e04>
   15b74:	mov	r3, #0
   15b78:	b	15bc8 <__assert_fail@plt+0x4e50>
   15b7c:	sub	r3, fp, #264	; 0x108
   15b80:	ldr	r1, [pc, #80]	; 15bd8 <__assert_fail@plt+0x4e60>
   15b84:	mov	r0, r3
   15b88:	bl	10b74 <strcmp@plt>
   15b8c:	mov	r3, r0
   15b90:	cmp	r3, #0
   15b94:	beq	15bbc <__assert_fail@plt+0x4e44>
   15b98:	sub	r3, fp, #264	; 0x108
   15b9c:	ldr	r1, [pc, #56]	; 15bdc <__assert_fail@plt+0x4e64>
   15ba0:	mov	r0, r3
   15ba4:	bl	10b74 <strcmp@plt>
   15ba8:	mov	r3, r0
   15bac:	cmp	r3, #0
   15bb0:	beq	15bbc <__assert_fail@plt+0x4e44>
   15bb4:	mov	r3, #1
   15bb8:	b	15bc0 <__assert_fail@plt+0x4e48>
   15bbc:	mov	r3, #0
   15bc0:	and	r3, r3, #1
   15bc4:	uxtb	r3, r3
   15bc8:	mov	r0, r3
   15bcc:	sub	sp, fp, #4
   15bd0:	pop	{fp, pc}
   15bd4:	andeq	r0, r0, r1, lsl #2
   15bd8:	andeq	r7, r1, r0, ror r1
   15bdc:	andeq	r7, r1, r4, ror r1
   15be0:	push	{fp, lr}
   15be4:	add	fp, sp, #4
   15be8:	bl	10cc4 <__errno_location@plt>
   15bec:	mov	r2, r0
   15bf0:	mov	r3, #12
   15bf4:	str	r3, [r2]
   15bf8:	mov	r3, #0
   15bfc:	mov	r0, r3
   15c00:	pop	{fp, pc}
   15c04:	push	{fp, lr}
   15c08:	add	fp, sp, #4
   15c0c:	sub	sp, sp, #8
   15c10:	str	r0, [fp, #-8]
   15c14:	ldr	r3, [fp, #-8]
   15c18:	mov	r0, r3
   15c1c:	bl	15700 <__assert_fail@plt+0x4988>
   15c20:	mov	r3, r0
   15c24:	mov	r0, r3
   15c28:	sub	sp, fp, #4
   15c2c:	pop	{fp, pc}
   15c30:	push	{fp, lr}
   15c34:	add	fp, sp, #4
   15c38:	sub	sp, sp, #8
   15c3c:	str	r0, [fp, #-8]
   15c40:	str	r1, [fp, #-12]
   15c44:	ldr	r3, [fp, #-12]
   15c48:	cmp	r3, #0
   15c4c:	moveq	r3, #1
   15c50:	movne	r3, #0
   15c54:	uxtb	r3, r3
   15c58:	mov	r2, r3
   15c5c:	ldr	r3, [fp, #-12]
   15c60:	orr	r3, r2, r3
   15c64:	mov	r1, r3
   15c68:	ldr	r0, [fp, #-8]
   15c6c:	bl	15854 <__assert_fail@plt+0x4adc>
   15c70:	mov	r3, r0
   15c74:	mov	r0, r3
   15c78:	sub	sp, fp, #4
   15c7c:	pop	{fp, pc}
   15c80:	push	{fp, lr}
   15c84:	add	fp, sp, #4
   15c88:	sub	sp, sp, #8
   15c8c:	str	r0, [fp, #-8]
   15c90:	str	r1, [fp, #-12]
   15c94:	ldr	r3, [fp, #-8]
   15c98:	ldr	r2, [fp, #-12]
   15c9c:	mov	r1, r2
   15ca0:	mov	r0, r3
   15ca4:	bl	15424 <__assert_fail@plt+0x46ac>
   15ca8:	mov	r3, r0
   15cac:	mov	r0, r3
   15cb0:	sub	sp, fp, #4
   15cb4:	pop	{fp, pc}
   15cb8:	push	{fp, lr}
   15cbc:	add	fp, sp, #4
   15cc0:	sub	sp, sp, #16
   15cc4:	str	r0, [fp, #-8]
   15cc8:	str	r1, [fp, #-12]
   15ccc:	str	r2, [fp, #-16]
   15cd0:	ldr	r3, [fp, #-12]
   15cd4:	cmp	r3, #0
   15cd8:	beq	15ce8 <__assert_fail@plt+0x4f70>
   15cdc:	ldr	r3, [fp, #-16]
   15ce0:	cmp	r3, #0
   15ce4:	bne	15cf8 <__assert_fail@plt+0x4f80>
   15ce8:	mov	r3, #1
   15cec:	str	r3, [fp, #-16]
   15cf0:	ldr	r3, [fp, #-16]
   15cf4:	str	r3, [fp, #-12]
   15cf8:	ldr	r3, [fp, #-12]
   15cfc:	ldr	r2, [fp, #-16]
   15d00:	mov	r1, r3
   15d04:	ldr	r0, [fp, #-8]
   15d08:	bl	15924 <__assert_fail@plt+0x4bac>
   15d0c:	mov	r3, r0
   15d10:	mov	r0, r3
   15d14:	sub	sp, fp, #4
   15d18:	pop	{fp, pc}
   15d1c:	push	{fp, lr}
   15d20:	add	fp, sp, #4
   15d24:	sub	sp, sp, #8
   15d28:	mov	r0, #14
   15d2c:	bl	10d24 <nl_langinfo@plt>
   15d30:	str	r0, [fp, #-8]
   15d34:	ldr	r3, [fp, #-8]
   15d38:	cmp	r3, #0
   15d3c:	bne	15d48 <__assert_fail@plt+0x4fd0>
   15d40:	ldr	r3, [pc, #40]	; 15d70 <__assert_fail@plt+0x4ff8>
   15d44:	str	r3, [fp, #-8]
   15d48:	ldr	r3, [fp, #-8]
   15d4c:	ldrb	r3, [r3]
   15d50:	cmp	r3, #0
   15d54:	bne	15d60 <__assert_fail@plt+0x4fe8>
   15d58:	ldr	r3, [pc, #20]	; 15d74 <__assert_fail@plt+0x4ffc>
   15d5c:	str	r3, [fp, #-8]
   15d60:	ldr	r3, [fp, #-8]
   15d64:	mov	r0, r3
   15d68:	sub	sp, fp, #4
   15d6c:	pop	{fp, pc}
   15d70:	andeq	r7, r1, ip, ror r1
   15d74:	andeq	r7, r1, r0, lsl #3
   15d78:	push	{fp, lr}
   15d7c:	add	fp, sp, #4
   15d80:	sub	sp, sp, #16
   15d84:	str	r0, [fp, #-16]
   15d88:	mov	r1, #0
   15d8c:	ldr	r0, [fp, #-16]
   15d90:	bl	10d0c <setlocale@plt>
   15d94:	str	r0, [fp, #-8]
   15d98:	ldr	r3, [fp, #-8]
   15d9c:	mov	r0, r3
   15da0:	sub	sp, fp, #4
   15da4:	pop	{fp, pc}
   15da8:	push	{fp, lr}
   15dac:	add	fp, sp, #4
   15db0:	sub	sp, sp, #24
   15db4:	str	r0, [fp, #-16]
   15db8:	str	r1, [fp, #-20]	; 0xffffffec
   15dbc:	str	r2, [fp, #-24]	; 0xffffffe8
   15dc0:	ldr	r0, [fp, #-16]
   15dc4:	bl	15d78 <__assert_fail@plt+0x5000>
   15dc8:	str	r0, [fp, #-8]
   15dcc:	ldr	r3, [fp, #-8]
   15dd0:	cmp	r3, #0
   15dd4:	bne	15df8 <__assert_fail@plt+0x5080>
   15dd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ddc:	cmp	r3, #0
   15de0:	beq	15df0 <__assert_fail@plt+0x5078>
   15de4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15de8:	mov	r2, #0
   15dec:	strb	r2, [r3]
   15df0:	mov	r3, #22
   15df4:	b	15e74 <__assert_fail@plt+0x50fc>
   15df8:	ldr	r0, [fp, #-8]
   15dfc:	bl	10cac <strlen@plt>
   15e00:	str	r0, [fp, #-12]
   15e04:	ldr	r2, [fp, #-12]
   15e08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e0c:	cmp	r2, r3
   15e10:	bcs	15e34 <__assert_fail@plt+0x50bc>
   15e14:	ldr	r3, [fp, #-12]
   15e18:	add	r3, r3, #1
   15e1c:	mov	r2, r3
   15e20:	ldr	r1, [fp, #-8]
   15e24:	ldr	r0, [fp, #-20]	; 0xffffffec
   15e28:	bl	10bc8 <memcpy@plt>
   15e2c:	mov	r3, #0
   15e30:	b	15e74 <__assert_fail@plt+0x50fc>
   15e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e38:	cmp	r3, #0
   15e3c:	beq	15e70 <__assert_fail@plt+0x50f8>
   15e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e44:	sub	r3, r3, #1
   15e48:	mov	r2, r3
   15e4c:	ldr	r1, [fp, #-8]
   15e50:	ldr	r0, [fp, #-20]	; 0xffffffec
   15e54:	bl	10bc8 <memcpy@plt>
   15e58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e5c:	sub	r3, r3, #1
   15e60:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e64:	add	r3, r2, r3
   15e68:	mov	r2, #0
   15e6c:	strb	r2, [r3]
   15e70:	mov	r3, #34	; 0x22
   15e74:	mov	r0, r3
   15e78:	sub	sp, fp, #4
   15e7c:	pop	{fp, pc}
   15e80:	push	{fp, lr}
   15e84:	add	fp, sp, #4
   15e88:	sub	sp, sp, #16
   15e8c:	str	r0, [fp, #-8]
   15e90:	str	r1, [fp, #-12]
   15e94:	str	r2, [fp, #-16]
   15e98:	ldr	r2, [fp, #-16]
   15e9c:	ldr	r1, [fp, #-12]
   15ea0:	ldr	r0, [fp, #-8]
   15ea4:	bl	15da8 <__assert_fail@plt+0x5030>
   15ea8:	mov	r3, r0
   15eac:	mov	r0, r3
   15eb0:	sub	sp, fp, #4
   15eb4:	pop	{fp, pc}
   15eb8:	push	{fp, lr}
   15ebc:	add	fp, sp, #4
   15ec0:	sub	sp, sp, #8
   15ec4:	str	r0, [fp, #-8]
   15ec8:	ldr	r0, [fp, #-8]
   15ecc:	bl	15d78 <__assert_fail@plt+0x5000>
   15ed0:	mov	r3, r0
   15ed4:	mov	r0, r3
   15ed8:	sub	sp, fp, #4
   15edc:	pop	{fp, pc}
   15ee0:	push	{fp}		; (str fp, [sp, #-4]!)
   15ee4:	add	fp, sp, #0
   15ee8:	sub	sp, sp, #12
   15eec:	str	r0, [fp, #-8]
   15ef0:	ldr	r3, [fp, #-8]
   15ef4:	cmp	r3, #90	; 0x5a
   15ef8:	bgt	15f14 <__assert_fail@plt+0x519c>
   15efc:	cmp	r3, #65	; 0x41
   15f00:	bge	15f20 <__assert_fail@plt+0x51a8>
   15f04:	sub	r3, r3, #48	; 0x30
   15f08:	cmp	r3, #9
   15f0c:	bhi	15f28 <__assert_fail@plt+0x51b0>
   15f10:	b	15f20 <__assert_fail@plt+0x51a8>
   15f14:	sub	r3, r3, #97	; 0x61
   15f18:	cmp	r3, #25
   15f1c:	bhi	15f28 <__assert_fail@plt+0x51b0>
   15f20:	mov	r3, #1
   15f24:	b	15f2c <__assert_fail@plt+0x51b4>
   15f28:	mov	r3, #0
   15f2c:	mov	r0, r3
   15f30:	add	sp, fp, #0
   15f34:	pop	{fp}		; (ldr fp, [sp], #4)
   15f38:	bx	lr
   15f3c:	push	{fp}		; (str fp, [sp, #-4]!)
   15f40:	add	fp, sp, #0
   15f44:	sub	sp, sp, #12
   15f48:	str	r0, [fp, #-8]
   15f4c:	ldr	r3, [fp, #-8]
   15f50:	cmp	r3, #65	; 0x41
   15f54:	blt	15f74 <__assert_fail@plt+0x51fc>
   15f58:	cmp	r3, #90	; 0x5a
   15f5c:	ble	15f6c <__assert_fail@plt+0x51f4>
   15f60:	sub	r3, r3, #97	; 0x61
   15f64:	cmp	r3, #25
   15f68:	bhi	15f74 <__assert_fail@plt+0x51fc>
   15f6c:	mov	r3, #1
   15f70:	b	15f78 <__assert_fail@plt+0x5200>
   15f74:	mov	r3, #0
   15f78:	mov	r0, r3
   15f7c:	add	sp, fp, #0
   15f80:	pop	{fp}		; (ldr fp, [sp], #4)
   15f84:	bx	lr
   15f88:	push	{fp}		; (str fp, [sp, #-4]!)
   15f8c:	add	fp, sp, #0
   15f90:	sub	sp, sp, #12
   15f94:	str	r0, [fp, #-8]
   15f98:	ldr	r3, [fp, #-8]
   15f9c:	add	r3, r3, #0
   15fa0:	cmp	r3, #127	; 0x7f
   15fa4:	bhi	15fb0 <__assert_fail@plt+0x5238>
   15fa8:	mov	r3, #1
   15fac:	b	15fb4 <__assert_fail@plt+0x523c>
   15fb0:	mov	r3, #0
   15fb4:	mov	r0, r3
   15fb8:	add	sp, fp, #0
   15fbc:	pop	{fp}		; (ldr fp, [sp], #4)
   15fc0:	bx	lr
   15fc4:	push	{fp}		; (str fp, [sp, #-4]!)
   15fc8:	add	fp, sp, #0
   15fcc:	sub	sp, sp, #12
   15fd0:	str	r0, [fp, #-8]
   15fd4:	ldr	r3, [fp, #-8]
   15fd8:	cmp	r3, #32
   15fdc:	beq	15fec <__assert_fail@plt+0x5274>
   15fe0:	ldr	r3, [fp, #-8]
   15fe4:	cmp	r3, #9
   15fe8:	bne	15ff4 <__assert_fail@plt+0x527c>
   15fec:	mov	r3, #1
   15ff0:	b	15ff8 <__assert_fail@plt+0x5280>
   15ff4:	mov	r3, #0
   15ff8:	and	r3, r3, #1
   15ffc:	uxtb	r3, r3
   16000:	mov	r0, r3
   16004:	add	sp, fp, #0
   16008:	pop	{fp}		; (ldr fp, [sp], #4)
   1600c:	bx	lr
   16010:	push	{fp}		; (str fp, [sp, #-4]!)
   16014:	add	fp, sp, #0
   16018:	sub	sp, sp, #12
   1601c:	str	r0, [fp, #-8]
   16020:	ldr	r3, [fp, #-8]
   16024:	cmp	r3, #0
   16028:	blt	16044 <__assert_fail@plt+0x52cc>
   1602c:	cmp	r3, #31
   16030:	ble	1603c <__assert_fail@plt+0x52c4>
   16034:	cmp	r3, #127	; 0x7f
   16038:	bne	16044 <__assert_fail@plt+0x52cc>
   1603c:	mov	r3, #1
   16040:	b	16048 <__assert_fail@plt+0x52d0>
   16044:	mov	r3, #0
   16048:	mov	r0, r3
   1604c:	add	sp, fp, #0
   16050:	pop	{fp}		; (ldr fp, [sp], #4)
   16054:	bx	lr
   16058:	push	{fp}		; (str fp, [sp, #-4]!)
   1605c:	add	fp, sp, #0
   16060:	sub	sp, sp, #12
   16064:	str	r0, [fp, #-8]
   16068:	ldr	r3, [fp, #-8]
   1606c:	sub	r3, r3, #48	; 0x30
   16070:	cmp	r3, #9
   16074:	bhi	16080 <__assert_fail@plt+0x5308>
   16078:	mov	r3, #1
   1607c:	b	16084 <__assert_fail@plt+0x530c>
   16080:	mov	r3, #0
   16084:	mov	r0, r3
   16088:	add	sp, fp, #0
   1608c:	pop	{fp}		; (ldr fp, [sp], #4)
   16090:	bx	lr
   16094:	push	{fp}		; (str fp, [sp, #-4]!)
   16098:	add	fp, sp, #0
   1609c:	sub	sp, sp, #12
   160a0:	str	r0, [fp, #-8]
   160a4:	ldr	r3, [fp, #-8]
   160a8:	sub	r3, r3, #33	; 0x21
   160ac:	cmp	r3, #93	; 0x5d
   160b0:	bhi	160bc <__assert_fail@plt+0x5344>
   160b4:	mov	r3, #1
   160b8:	b	160c0 <__assert_fail@plt+0x5348>
   160bc:	mov	r3, #0
   160c0:	mov	r0, r3
   160c4:	add	sp, fp, #0
   160c8:	pop	{fp}		; (ldr fp, [sp], #4)
   160cc:	bx	lr
   160d0:	push	{fp}		; (str fp, [sp, #-4]!)
   160d4:	add	fp, sp, #0
   160d8:	sub	sp, sp, #12
   160dc:	str	r0, [fp, #-8]
   160e0:	ldr	r3, [fp, #-8]
   160e4:	sub	r3, r3, #97	; 0x61
   160e8:	cmp	r3, #25
   160ec:	bhi	160f8 <__assert_fail@plt+0x5380>
   160f0:	mov	r3, #1
   160f4:	b	160fc <__assert_fail@plt+0x5384>
   160f8:	mov	r3, #0
   160fc:	mov	r0, r3
   16100:	add	sp, fp, #0
   16104:	pop	{fp}		; (ldr fp, [sp], #4)
   16108:	bx	lr
   1610c:	push	{fp}		; (str fp, [sp, #-4]!)
   16110:	add	fp, sp, #0
   16114:	sub	sp, sp, #12
   16118:	str	r0, [fp, #-8]
   1611c:	ldr	r3, [fp, #-8]
   16120:	sub	r3, r3, #32
   16124:	cmp	r3, #94	; 0x5e
   16128:	bhi	16134 <__assert_fail@plt+0x53bc>
   1612c:	mov	r3, #1
   16130:	b	16138 <__assert_fail@plt+0x53c0>
   16134:	mov	r3, #0
   16138:	mov	r0, r3
   1613c:	add	sp, fp, #0
   16140:	pop	{fp}		; (ldr fp, [sp], #4)
   16144:	bx	lr
   16148:	push	{fp}		; (str fp, [sp, #-4]!)
   1614c:	add	fp, sp, #0
   16150:	sub	sp, sp, #12
   16154:	str	r0, [fp, #-8]
   16158:	ldr	r3, [fp, #-8]
   1615c:	cmp	r3, #64	; 0x40
   16160:	bgt	1617c <__assert_fail@plt+0x5404>
   16164:	cmp	r3, #58	; 0x3a
   16168:	bge	16198 <__assert_fail@plt+0x5420>
   1616c:	sub	r3, r3, #33	; 0x21
   16170:	cmp	r3, #14
   16174:	bhi	161a0 <__assert_fail@plt+0x5428>
   16178:	b	16198 <__assert_fail@plt+0x5420>
   1617c:	cmp	r3, #91	; 0x5b
   16180:	blt	161a0 <__assert_fail@plt+0x5428>
   16184:	cmp	r3, #96	; 0x60
   16188:	ble	16198 <__assert_fail@plt+0x5420>
   1618c:	sub	r3, r3, #123	; 0x7b
   16190:	cmp	r3, #3
   16194:	bhi	161a0 <__assert_fail@plt+0x5428>
   16198:	mov	r3, #1
   1619c:	b	161a4 <__assert_fail@plt+0x542c>
   161a0:	mov	r3, #0
   161a4:	mov	r0, r3
   161a8:	add	sp, fp, #0
   161ac:	pop	{fp}		; (ldr fp, [sp], #4)
   161b0:	bx	lr
   161b4:	push	{fp}		; (str fp, [sp, #-4]!)
   161b8:	add	fp, sp, #0
   161bc:	sub	sp, sp, #12
   161c0:	str	r0, [fp, #-8]
   161c4:	ldr	r3, [fp, #-8]
   161c8:	cmp	r3, #9
   161cc:	blt	161e8 <__assert_fail@plt+0x5470>
   161d0:	cmp	r3, #13
   161d4:	ble	161e0 <__assert_fail@plt+0x5468>
   161d8:	cmp	r3, #32
   161dc:	bne	161e8 <__assert_fail@plt+0x5470>
   161e0:	mov	r3, #1
   161e4:	b	161ec <__assert_fail@plt+0x5474>
   161e8:	mov	r3, #0
   161ec:	mov	r0, r3
   161f0:	add	sp, fp, #0
   161f4:	pop	{fp}		; (ldr fp, [sp], #4)
   161f8:	bx	lr
   161fc:	push	{fp}		; (str fp, [sp, #-4]!)
   16200:	add	fp, sp, #0
   16204:	sub	sp, sp, #12
   16208:	str	r0, [fp, #-8]
   1620c:	ldr	r3, [fp, #-8]
   16210:	sub	r3, r3, #65	; 0x41
   16214:	cmp	r3, #25
   16218:	bhi	16224 <__assert_fail@plt+0x54ac>
   1621c:	mov	r3, #1
   16220:	b	16228 <__assert_fail@plt+0x54b0>
   16224:	mov	r3, #0
   16228:	mov	r0, r3
   1622c:	add	sp, fp, #0
   16230:	pop	{fp}		; (ldr fp, [sp], #4)
   16234:	bx	lr
   16238:	push	{fp}		; (str fp, [sp, #-4]!)
   1623c:	add	fp, sp, #0
   16240:	sub	sp, sp, #12
   16244:	str	r0, [fp, #-8]
   16248:	ldr	r3, [fp, #-8]
   1624c:	sub	r3, r3, #48	; 0x30
   16250:	cmp	r3, #54	; 0x36
   16254:	ldrls	pc, [pc, r3, lsl #2]
   16258:	b	16340 <__assert_fail@plt+0x55c8>
   1625c:	andeq	r6, r1, r8, lsr r3
   16260:	andeq	r6, r1, r8, lsr r3
   16264:	andeq	r6, r1, r8, lsr r3
   16268:	andeq	r6, r1, r8, lsr r3
   1626c:	andeq	r6, r1, r8, lsr r3
   16270:	andeq	r6, r1, r8, lsr r3
   16274:	andeq	r6, r1, r8, lsr r3
   16278:	andeq	r6, r1, r8, lsr r3
   1627c:	andeq	r6, r1, r8, lsr r3
   16280:	andeq	r6, r1, r8, lsr r3
   16284:	andeq	r6, r1, r0, asr #6
   16288:	andeq	r6, r1, r0, asr #6
   1628c:	andeq	r6, r1, r0, asr #6
   16290:	andeq	r6, r1, r0, asr #6
   16294:	andeq	r6, r1, r0, asr #6
   16298:	andeq	r6, r1, r0, asr #6
   1629c:	andeq	r6, r1, r0, asr #6
   162a0:	andeq	r6, r1, r8, lsr r3
   162a4:	andeq	r6, r1, r8, lsr r3
   162a8:	andeq	r6, r1, r8, lsr r3
   162ac:	andeq	r6, r1, r8, lsr r3
   162b0:	andeq	r6, r1, r8, lsr r3
   162b4:	andeq	r6, r1, r8, lsr r3
   162b8:	andeq	r6, r1, r0, asr #6
   162bc:	andeq	r6, r1, r0, asr #6
   162c0:	andeq	r6, r1, r0, asr #6
   162c4:	andeq	r6, r1, r0, asr #6
   162c8:	andeq	r6, r1, r0, asr #6
   162cc:	andeq	r6, r1, r0, asr #6
   162d0:	andeq	r6, r1, r0, asr #6
   162d4:	andeq	r6, r1, r0, asr #6
   162d8:	andeq	r6, r1, r0, asr #6
   162dc:	andeq	r6, r1, r0, asr #6
   162e0:	andeq	r6, r1, r0, asr #6
   162e4:	andeq	r6, r1, r0, asr #6
   162e8:	andeq	r6, r1, r0, asr #6
   162ec:	andeq	r6, r1, r0, asr #6
   162f0:	andeq	r6, r1, r0, asr #6
   162f4:	andeq	r6, r1, r0, asr #6
   162f8:	andeq	r6, r1, r0, asr #6
   162fc:	andeq	r6, r1, r0, asr #6
   16300:	andeq	r6, r1, r0, asr #6
   16304:	andeq	r6, r1, r0, asr #6
   16308:	andeq	r6, r1, r0, asr #6
   1630c:	andeq	r6, r1, r0, asr #6
   16310:	andeq	r6, r1, r0, asr #6
   16314:	andeq	r6, r1, r0, asr #6
   16318:	andeq	r6, r1, r0, asr #6
   1631c:	andeq	r6, r1, r0, asr #6
   16320:	andeq	r6, r1, r8, lsr r3
   16324:	andeq	r6, r1, r8, lsr r3
   16328:	andeq	r6, r1, r8, lsr r3
   1632c:	andeq	r6, r1, r8, lsr r3
   16330:	andeq	r6, r1, r8, lsr r3
   16334:	andeq	r6, r1, r8, lsr r3
   16338:	mov	r3, #1
   1633c:	b	16344 <__assert_fail@plt+0x55cc>
   16340:	mov	r3, #0
   16344:	mov	r0, r3
   16348:	add	sp, fp, #0
   1634c:	pop	{fp}		; (ldr fp, [sp], #4)
   16350:	bx	lr
   16354:	push	{fp}		; (str fp, [sp, #-4]!)
   16358:	add	fp, sp, #0
   1635c:	sub	sp, sp, #12
   16360:	str	r0, [fp, #-8]
   16364:	ldr	r3, [fp, #-8]
   16368:	sub	r3, r3, #65	; 0x41
   1636c:	cmp	r3, #25
   16370:	bhi	16380 <__assert_fail@plt+0x5608>
   16374:	ldr	r3, [fp, #-8]
   16378:	add	r3, r3, #32
   1637c:	b	16384 <__assert_fail@plt+0x560c>
   16380:	ldr	r3, [fp, #-8]
   16384:	mov	r0, r3
   16388:	add	sp, fp, #0
   1638c:	pop	{fp}		; (ldr fp, [sp], #4)
   16390:	bx	lr
   16394:	push	{fp}		; (str fp, [sp, #-4]!)
   16398:	add	fp, sp, #0
   1639c:	sub	sp, sp, #12
   163a0:	str	r0, [fp, #-8]
   163a4:	ldr	r3, [fp, #-8]
   163a8:	sub	r3, r3, #97	; 0x61
   163ac:	cmp	r3, #25
   163b0:	bhi	163c0 <__assert_fail@plt+0x5648>
   163b4:	ldr	r3, [fp, #-8]
   163b8:	sub	r3, r3, #32
   163bc:	b	163c4 <__assert_fail@plt+0x564c>
   163c0:	ldr	r3, [fp, #-8]
   163c4:	mov	r0, r3
   163c8:	add	sp, fp, #0
   163cc:	pop	{fp}		; (ldr fp, [sp], #4)
   163d0:	bx	lr
   163d4:	subs	r2, r1, #1
   163d8:	bxeq	lr
   163dc:	bcc	165b4 <__assert_fail@plt+0x583c>
   163e0:	cmp	r0, r1
   163e4:	bls	16598 <__assert_fail@plt+0x5820>
   163e8:	tst	r1, r2
   163ec:	beq	165a4 <__assert_fail@plt+0x582c>
   163f0:	clz	r3, r0
   163f4:	clz	r2, r1
   163f8:	sub	r3, r2, r3
   163fc:	rsbs	r3, r3, #31
   16400:	addne	r3, r3, r3, lsl #1
   16404:	mov	r2, #0
   16408:	addne	pc, pc, r3, lsl #2
   1640c:	nop			; (mov r0, r0)
   16410:	cmp	r0, r1, lsl #31
   16414:	adc	r2, r2, r2
   16418:	subcs	r0, r0, r1, lsl #31
   1641c:	cmp	r0, r1, lsl #30
   16420:	adc	r2, r2, r2
   16424:	subcs	r0, r0, r1, lsl #30
   16428:	cmp	r0, r1, lsl #29
   1642c:	adc	r2, r2, r2
   16430:	subcs	r0, r0, r1, lsl #29
   16434:	cmp	r0, r1, lsl #28
   16438:	adc	r2, r2, r2
   1643c:	subcs	r0, r0, r1, lsl #28
   16440:	cmp	r0, r1, lsl #27
   16444:	adc	r2, r2, r2
   16448:	subcs	r0, r0, r1, lsl #27
   1644c:	cmp	r0, r1, lsl #26
   16450:	adc	r2, r2, r2
   16454:	subcs	r0, r0, r1, lsl #26
   16458:	cmp	r0, r1, lsl #25
   1645c:	adc	r2, r2, r2
   16460:	subcs	r0, r0, r1, lsl #25
   16464:	cmp	r0, r1, lsl #24
   16468:	adc	r2, r2, r2
   1646c:	subcs	r0, r0, r1, lsl #24
   16470:	cmp	r0, r1, lsl #23
   16474:	adc	r2, r2, r2
   16478:	subcs	r0, r0, r1, lsl #23
   1647c:	cmp	r0, r1, lsl #22
   16480:	adc	r2, r2, r2
   16484:	subcs	r0, r0, r1, lsl #22
   16488:	cmp	r0, r1, lsl #21
   1648c:	adc	r2, r2, r2
   16490:	subcs	r0, r0, r1, lsl #21
   16494:	cmp	r0, r1, lsl #20
   16498:	adc	r2, r2, r2
   1649c:	subcs	r0, r0, r1, lsl #20
   164a0:	cmp	r0, r1, lsl #19
   164a4:	adc	r2, r2, r2
   164a8:	subcs	r0, r0, r1, lsl #19
   164ac:	cmp	r0, r1, lsl #18
   164b0:	adc	r2, r2, r2
   164b4:	subcs	r0, r0, r1, lsl #18
   164b8:	cmp	r0, r1, lsl #17
   164bc:	adc	r2, r2, r2
   164c0:	subcs	r0, r0, r1, lsl #17
   164c4:	cmp	r0, r1, lsl #16
   164c8:	adc	r2, r2, r2
   164cc:	subcs	r0, r0, r1, lsl #16
   164d0:	cmp	r0, r1, lsl #15
   164d4:	adc	r2, r2, r2
   164d8:	subcs	r0, r0, r1, lsl #15
   164dc:	cmp	r0, r1, lsl #14
   164e0:	adc	r2, r2, r2
   164e4:	subcs	r0, r0, r1, lsl #14
   164e8:	cmp	r0, r1, lsl #13
   164ec:	adc	r2, r2, r2
   164f0:	subcs	r0, r0, r1, lsl #13
   164f4:	cmp	r0, r1, lsl #12
   164f8:	adc	r2, r2, r2
   164fc:	subcs	r0, r0, r1, lsl #12
   16500:	cmp	r0, r1, lsl #11
   16504:	adc	r2, r2, r2
   16508:	subcs	r0, r0, r1, lsl #11
   1650c:	cmp	r0, r1, lsl #10
   16510:	adc	r2, r2, r2
   16514:	subcs	r0, r0, r1, lsl #10
   16518:	cmp	r0, r1, lsl #9
   1651c:	adc	r2, r2, r2
   16520:	subcs	r0, r0, r1, lsl #9
   16524:	cmp	r0, r1, lsl #8
   16528:	adc	r2, r2, r2
   1652c:	subcs	r0, r0, r1, lsl #8
   16530:	cmp	r0, r1, lsl #7
   16534:	adc	r2, r2, r2
   16538:	subcs	r0, r0, r1, lsl #7
   1653c:	cmp	r0, r1, lsl #6
   16540:	adc	r2, r2, r2
   16544:	subcs	r0, r0, r1, lsl #6
   16548:	cmp	r0, r1, lsl #5
   1654c:	adc	r2, r2, r2
   16550:	subcs	r0, r0, r1, lsl #5
   16554:	cmp	r0, r1, lsl #4
   16558:	adc	r2, r2, r2
   1655c:	subcs	r0, r0, r1, lsl #4
   16560:	cmp	r0, r1, lsl #3
   16564:	adc	r2, r2, r2
   16568:	subcs	r0, r0, r1, lsl #3
   1656c:	cmp	r0, r1, lsl #2
   16570:	adc	r2, r2, r2
   16574:	subcs	r0, r0, r1, lsl #2
   16578:	cmp	r0, r1, lsl #1
   1657c:	adc	r2, r2, r2
   16580:	subcs	r0, r0, r1, lsl #1
   16584:	cmp	r0, r1
   16588:	adc	r2, r2, r2
   1658c:	subcs	r0, r0, r1
   16590:	mov	r0, r2
   16594:	bx	lr
   16598:	moveq	r0, #1
   1659c:	movne	r0, #0
   165a0:	bx	lr
   165a4:	clz	r2, r1
   165a8:	rsb	r2, r2, #31
   165ac:	lsr	r0, r0, r2
   165b0:	bx	lr
   165b4:	cmp	r0, #0
   165b8:	mvnne	r0, #0
   165bc:	b	16820 <__assert_fail@plt+0x5aa8>
   165c0:	cmp	r1, #0
   165c4:	beq	165b4 <__assert_fail@plt+0x583c>
   165c8:	push	{r0, r1, lr}
   165cc:	bl	163d4 <__assert_fail@plt+0x565c>
   165d0:	pop	{r1, r2, lr}
   165d4:	mul	r3, r2, r0
   165d8:	sub	r1, r1, r3
   165dc:	bx	lr
   165e0:	cmp	r1, #0
   165e4:	beq	167f0 <__assert_fail@plt+0x5a78>
   165e8:	eor	ip, r0, r1
   165ec:	rsbmi	r1, r1, #0
   165f0:	subs	r2, r1, #1
   165f4:	beq	167bc <__assert_fail@plt+0x5a44>
   165f8:	movs	r3, r0
   165fc:	rsbmi	r3, r0, #0
   16600:	cmp	r3, r1
   16604:	bls	167c8 <__assert_fail@plt+0x5a50>
   16608:	tst	r1, r2
   1660c:	beq	167d8 <__assert_fail@plt+0x5a60>
   16610:	clz	r2, r3
   16614:	clz	r0, r1
   16618:	sub	r2, r0, r2
   1661c:	rsbs	r2, r2, #31
   16620:	addne	r2, r2, r2, lsl #1
   16624:	mov	r0, #0
   16628:	addne	pc, pc, r2, lsl #2
   1662c:	nop			; (mov r0, r0)
   16630:	cmp	r3, r1, lsl #31
   16634:	adc	r0, r0, r0
   16638:	subcs	r3, r3, r1, lsl #31
   1663c:	cmp	r3, r1, lsl #30
   16640:	adc	r0, r0, r0
   16644:	subcs	r3, r3, r1, lsl #30
   16648:	cmp	r3, r1, lsl #29
   1664c:	adc	r0, r0, r0
   16650:	subcs	r3, r3, r1, lsl #29
   16654:	cmp	r3, r1, lsl #28
   16658:	adc	r0, r0, r0
   1665c:	subcs	r3, r3, r1, lsl #28
   16660:	cmp	r3, r1, lsl #27
   16664:	adc	r0, r0, r0
   16668:	subcs	r3, r3, r1, lsl #27
   1666c:	cmp	r3, r1, lsl #26
   16670:	adc	r0, r0, r0
   16674:	subcs	r3, r3, r1, lsl #26
   16678:	cmp	r3, r1, lsl #25
   1667c:	adc	r0, r0, r0
   16680:	subcs	r3, r3, r1, lsl #25
   16684:	cmp	r3, r1, lsl #24
   16688:	adc	r0, r0, r0
   1668c:	subcs	r3, r3, r1, lsl #24
   16690:	cmp	r3, r1, lsl #23
   16694:	adc	r0, r0, r0
   16698:	subcs	r3, r3, r1, lsl #23
   1669c:	cmp	r3, r1, lsl #22
   166a0:	adc	r0, r0, r0
   166a4:	subcs	r3, r3, r1, lsl #22
   166a8:	cmp	r3, r1, lsl #21
   166ac:	adc	r0, r0, r0
   166b0:	subcs	r3, r3, r1, lsl #21
   166b4:	cmp	r3, r1, lsl #20
   166b8:	adc	r0, r0, r0
   166bc:	subcs	r3, r3, r1, lsl #20
   166c0:	cmp	r3, r1, lsl #19
   166c4:	adc	r0, r0, r0
   166c8:	subcs	r3, r3, r1, lsl #19
   166cc:	cmp	r3, r1, lsl #18
   166d0:	adc	r0, r0, r0
   166d4:	subcs	r3, r3, r1, lsl #18
   166d8:	cmp	r3, r1, lsl #17
   166dc:	adc	r0, r0, r0
   166e0:	subcs	r3, r3, r1, lsl #17
   166e4:	cmp	r3, r1, lsl #16
   166e8:	adc	r0, r0, r0
   166ec:	subcs	r3, r3, r1, lsl #16
   166f0:	cmp	r3, r1, lsl #15
   166f4:	adc	r0, r0, r0
   166f8:	subcs	r3, r3, r1, lsl #15
   166fc:	cmp	r3, r1, lsl #14
   16700:	adc	r0, r0, r0
   16704:	subcs	r3, r3, r1, lsl #14
   16708:	cmp	r3, r1, lsl #13
   1670c:	adc	r0, r0, r0
   16710:	subcs	r3, r3, r1, lsl #13
   16714:	cmp	r3, r1, lsl #12
   16718:	adc	r0, r0, r0
   1671c:	subcs	r3, r3, r1, lsl #12
   16720:	cmp	r3, r1, lsl #11
   16724:	adc	r0, r0, r0
   16728:	subcs	r3, r3, r1, lsl #11
   1672c:	cmp	r3, r1, lsl #10
   16730:	adc	r0, r0, r0
   16734:	subcs	r3, r3, r1, lsl #10
   16738:	cmp	r3, r1, lsl #9
   1673c:	adc	r0, r0, r0
   16740:	subcs	r3, r3, r1, lsl #9
   16744:	cmp	r3, r1, lsl #8
   16748:	adc	r0, r0, r0
   1674c:	subcs	r3, r3, r1, lsl #8
   16750:	cmp	r3, r1, lsl #7
   16754:	adc	r0, r0, r0
   16758:	subcs	r3, r3, r1, lsl #7
   1675c:	cmp	r3, r1, lsl #6
   16760:	adc	r0, r0, r0
   16764:	subcs	r3, r3, r1, lsl #6
   16768:	cmp	r3, r1, lsl #5
   1676c:	adc	r0, r0, r0
   16770:	subcs	r3, r3, r1, lsl #5
   16774:	cmp	r3, r1, lsl #4
   16778:	adc	r0, r0, r0
   1677c:	subcs	r3, r3, r1, lsl #4
   16780:	cmp	r3, r1, lsl #3
   16784:	adc	r0, r0, r0
   16788:	subcs	r3, r3, r1, lsl #3
   1678c:	cmp	r3, r1, lsl #2
   16790:	adc	r0, r0, r0
   16794:	subcs	r3, r3, r1, lsl #2
   16798:	cmp	r3, r1, lsl #1
   1679c:	adc	r0, r0, r0
   167a0:	subcs	r3, r3, r1, lsl #1
   167a4:	cmp	r3, r1
   167a8:	adc	r0, r0, r0
   167ac:	subcs	r3, r3, r1
   167b0:	cmp	ip, #0
   167b4:	rsbmi	r0, r0, #0
   167b8:	bx	lr
   167bc:	teq	ip, r0
   167c0:	rsbmi	r0, r0, #0
   167c4:	bx	lr
   167c8:	movcc	r0, #0
   167cc:	asreq	r0, ip, #31
   167d0:	orreq	r0, r0, #1
   167d4:	bx	lr
   167d8:	clz	r2, r1
   167dc:	rsb	r2, r2, #31
   167e0:	cmp	ip, #0
   167e4:	lsr	r0, r3, r2
   167e8:	rsbmi	r0, r0, #0
   167ec:	bx	lr
   167f0:	cmp	r0, #0
   167f4:	mvngt	r0, #-2147483648	; 0x80000000
   167f8:	movlt	r0, #-2147483648	; 0x80000000
   167fc:	b	16820 <__assert_fail@plt+0x5aa8>
   16800:	cmp	r1, #0
   16804:	beq	167f0 <__assert_fail@plt+0x5a78>
   16808:	push	{r0, r1, lr}
   1680c:	bl	165e8 <__assert_fail@plt+0x5870>
   16810:	pop	{r1, r2, lr}
   16814:	mul	r3, r2, r0
   16818:	sub	r1, r1, r3
   1681c:	bx	lr
   16820:	push	{r1, lr}
   16824:	mov	r0, #8
   16828:	bl	10b68 <raise@plt>
   1682c:	pop	{r1, pc}
   16830:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16834:	mov	r7, r0
   16838:	ldr	r6, [pc, #72]	; 16888 <__assert_fail@plt+0x5b10>
   1683c:	ldr	r5, [pc, #72]	; 1688c <__assert_fail@plt+0x5b14>
   16840:	add	r6, pc, r6
   16844:	add	r5, pc, r5
   16848:	sub	r6, r6, r5
   1684c:	mov	r8, r1
   16850:	mov	r9, r2
   16854:	bl	10b3c <calloc@plt-0x20>
   16858:	asrs	r6, r6, #2
   1685c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16860:	mov	r4, #0
   16864:	add	r4, r4, #1
   16868:	ldr	r3, [r5], #4
   1686c:	mov	r2, r9
   16870:	mov	r1, r8
   16874:	mov	r0, r7
   16878:	blx	r3
   1687c:	cmp	r6, r4
   16880:	bne	16864 <__assert_fail@plt+0x5aec>
   16884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16888:	andeq	r1, r1, r8, asr #13
   1688c:	andeq	r1, r1, r0, asr #13
   16890:	bx	lr
   16894:	ldr	r3, [pc, #12]	; 168a8 <__assert_fail@plt+0x5b30>
   16898:	mov	r1, #0
   1689c:	add	r3, pc, r3
   168a0:	ldr	r2, [r3]
   168a4:	b	10cd0 <__cxa_atexit@plt>
   168a8:	andeq	r1, r1, r8, lsr #16

Disassembly of section .fini:

000168ac <.fini>:
   168ac:	push	{r3, lr}
   168b0:	pop	{r3, pc}
