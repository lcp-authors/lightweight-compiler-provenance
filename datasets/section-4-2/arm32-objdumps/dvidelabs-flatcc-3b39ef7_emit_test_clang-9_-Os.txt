
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c4 <.init>:
   123c4:	push	{r3, lr}
   123c8:	bl	124f8 <_start@@Base+0x3c>
   123cc:	pop	{r3, pc}

Disassembly of section .plt:

000123d0 <printf@plt-0x14>:
   123d0:	push	{lr}		; (str lr, [sp, #-4]!)
   123d4:	ldr	lr, [pc, #4]	; 123e0 <printf@plt-0x4>
   123d8:	add	lr, pc, lr
   123dc:	ldr	pc, [lr, #8]!
   123e0:	andeq	r6, r1, r0, lsr #24

000123e4 <printf@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #90112	; 0x16000
   123ec:	ldr	pc, [ip, #3104]!	; 0xc20

000123f0 <free@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #90112	; 0x16000
   123f8:	ldr	pc, [ip, #3096]!	; 0xc18

000123fc <memcpy@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #90112	; 0x16000
   12404:	ldr	pc, [ip, #3088]!	; 0xc10

00012408 <realloc@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #90112	; 0x16000
   12410:	ldr	pc, [ip, #3080]!	; 0xc08

00012414 <fwrite@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #90112	; 0x16000
   1241c:	ldr	pc, [ip, #3072]!	; 0xc00

00012420 <puts@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #90112	; 0x16000
   12428:	ldr	pc, [ip, #3064]!	; 0xbf8

0001242c <malloc@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #90112	; 0x16000
   12434:	ldr	pc, [ip, #3056]!	; 0xbf0

00012438 <__libc_start_main@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #90112	; 0x16000
   12440:	ldr	pc, [ip, #3048]!	; 0xbe8

00012444 <__gmon_start__@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #90112	; 0x16000
   1244c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012450 <bcmp@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #90112	; 0x16000
   12458:	ldr	pc, [ip, #3032]!	; 0xbd8

0001245c <strlen@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #90112	; 0x16000
   12464:	ldr	pc, [ip, #3024]!	; 0xbd0

00012468 <fprintf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #90112	; 0x16000
   12470:	ldr	pc, [ip, #3016]!	; 0xbc8

00012474 <posix_memalign@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #90112	; 0x16000
   1247c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012480 <memset@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #90112	; 0x16000
   12488:	ldr	pc, [ip, #3000]!	; 0xbb8

0001248c <memchr@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #90112	; 0x16000
   12494:	ldr	pc, [ip, #2992]!	; 0xbb0

00012498 <fputc@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #90112	; 0x16000
   124a0:	ldr	pc, [ip, #2984]!	; 0xba8

000124a4 <abort@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #90112	; 0x16000
   124ac:	ldr	pc, [ip, #2976]!	; 0xba0

000124b0 <__assert_fail@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #90112	; 0x16000
   124b8:	ldr	pc, [ip, #2968]!	; 0xb98

Disassembly of section .text:

000124bc <_start@@Base>:
   124bc:	mov	fp, #0
   124c0:	mov	lr, #0
   124c4:	pop	{r1}		; (ldr r1, [sp], #4)
   124c8:	mov	r2, sp
   124cc:	push	{r2}		; (str r2, [sp, #-4]!)
   124d0:	push	{r0}		; (str r0, [sp, #-4]!)
   124d4:	ldr	ip, [pc, #16]	; 124ec <_start@@Base+0x30>
   124d8:	push	{ip}		; (str ip, [sp, #-4]!)
   124dc:	ldr	r0, [pc, #12]	; 124f0 <_start@@Base+0x34>
   124e0:	ldr	r3, [pc, #12]	; 124f4 <_start@@Base+0x38>
   124e4:	bl	12438 <__libc_start_main@plt>
   124e8:	bl	124a4 <abort@plt>
   124ec:	andeq	r6, r1, ip, lsr #28
   124f0:	andeq	r2, r1, r8, lsr #22
   124f4:	andeq	r6, r1, ip, asr #27
   124f8:	ldr	r3, [pc, #20]	; 12514 <_start@@Base+0x58>
   124fc:	ldr	r2, [pc, #20]	; 12518 <_start@@Base+0x5c>
   12500:	add	r3, pc, r3
   12504:	ldr	r2, [r3, r2]
   12508:	cmp	r2, #0
   1250c:	bxeq	lr
   12510:	b	12444 <__gmon_start__@plt>
   12514:	strdeq	r6, [r1], -r8
   12518:	andeq	r0, r0, r4, asr r0
   1251c:	ldr	r0, [pc, #24]	; 1253c <_start@@Base+0x80>
   12520:	ldr	r3, [pc, #24]	; 12540 <_start@@Base+0x84>
   12524:	cmp	r3, r0
   12528:	bxeq	lr
   1252c:	ldr	r3, [pc, #16]	; 12544 <_start@@Base+0x88>
   12530:	cmp	r3, #0
   12534:	bxeq	lr
   12538:	bx	r3
   1253c:	andeq	r9, r2, r0, rrx
   12540:	andeq	r9, r2, r0, rrx
   12544:	andeq	r0, r0, r0
   12548:	ldr	r0, [pc, #36]	; 12574 <_start@@Base+0xb8>
   1254c:	ldr	r1, [pc, #36]	; 12578 <_start@@Base+0xbc>
   12550:	sub	r1, r1, r0
   12554:	asr	r1, r1, #2
   12558:	add	r1, r1, r1, lsr #31
   1255c:	asrs	r1, r1, #1
   12560:	bxeq	lr
   12564:	ldr	r3, [pc, #16]	; 1257c <_start@@Base+0xc0>
   12568:	cmp	r3, #0
   1256c:	bxeq	lr
   12570:	bx	r3
   12574:	andeq	r9, r2, r0, rrx
   12578:	andeq	r9, r2, r0, rrx
   1257c:	andeq	r0, r0, r0
   12580:	push	{r4, lr}
   12584:	ldr	r4, [pc, #24]	; 125a4 <_start@@Base+0xe8>
   12588:	ldrb	r3, [r4]
   1258c:	cmp	r3, #0
   12590:	popne	{r4, pc}
   12594:	bl	1251c <_start@@Base+0x60>
   12598:	mov	r3, #1
   1259c:	strb	r3, [r4]
   125a0:	pop	{r4, pc}
   125a4:	andeq	r9, r2, r4, rrx
   125a8:	b	12548 <_start@@Base+0x8c>

000125ac <dbg_emitter@@Base>:
   125ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125b0:	add	fp, sp, #24
   125b4:	mov	r4, r3
   125b8:	ldr	r3, [fp, #8]
   125bc:	movw	r0, #28220	; 0x6e3c
   125c0:	mov	r6, r1
   125c4:	mov	r5, r2
   125c8:	mov	r1, r2
   125cc:	movt	r0, #1
   125d0:	mov	r2, r4
   125d4:	bl	123e4 <printf@plt>
   125d8:	cmp	r5, #1
   125dc:	blt	12644 <dbg_emitter@@Base+0x98>
   125e0:	movw	r7, #28904	; 0x70e8
   125e4:	movw	r8, #28269	; 0x6e6d
   125e8:	movw	r9, #28302	; 0x6e8e
   125ec:	add	r6, r6, #4
   125f0:	movt	r7, #1
   125f4:	movt	r8, #1
   125f8:	movt	r9, #1
   125fc:	ldr	r0, [r6, #-4]
   12600:	cmp	r0, r7
   12604:	bne	1261c <dbg_emitter@@Base+0x70>
   12608:	ldr	r2, [r6]
   1260c:	mov	r0, r8
   12610:	mov	r1, r4
   12614:	bl	123e4 <printf@plt>
   12618:	ldr	r0, [r6, #-4]
   1261c:	cmp	r0, #0
   12620:	bne	12634 <dbg_emitter@@Base+0x88>
   12624:	ldr	r2, [r6]
   12628:	mov	r0, r9
   1262c:	mov	r1, r4
   12630:	bl	123e4 <printf@plt>
   12634:	ldr	r0, [r6], #8
   12638:	subs	r5, r5, #1
   1263c:	add	r4, r0, r4
   12640:	bne	125fc <dbg_emitter@@Base+0x50>
   12644:	mov	r0, #0
   12648:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0001264c <debug_test@@Base>:
   1264c:	push	{r4, r5, r6, r7, fp, lr}
   12650:	add	fp, sp, #16
   12654:	sub	sp, sp, #280	; 0x118
   12658:	vmov.i32	q8, #0	; 0x00000000
   1265c:	add	r4, sp, #8
   12660:	mov	r5, #0
   12664:	add	r0, r4, #16
   12668:	mov	r1, r4
   1266c:	str	r5, [sp, #40]	; 0x28
   12670:	vst1.64	{d16-d17}, [r0]
   12674:	mov	r0, #36	; 0x24
   12678:	vst1.64	{d16-d17}, [r1], r0
   1267c:	movw	r0, #28741	; 0x7045
   12680:	movt	r0, #1
   12684:	str	r5, [r1]
   12688:	bl	12420 <puts@plt>
   1268c:	movw	r1, #9644	; 0x25ac
   12690:	str	r5, [sp]
   12694:	add	r5, sp, #48	; 0x30
   12698:	mov	r2, #0
   1269c:	mov	r3, #0
   126a0:	movt	r1, #1
   126a4:	mov	r0, r5
   126a8:	bl	12c84 <flatcc_builder_custom_init@@Base>
   126ac:	mvn	r0, #-1073741824	; 0xc0000000
   126b0:	mov	r1, #4
   126b4:	mov	r2, #10
   126b8:	mov	r3, #4
   126bc:	str	r1, [sp]
   126c0:	str	r0, [sp, #4]
   126c4:	mov	r0, r5
   126c8:	mov	r1, r4
   126cc:	bl	15230 <flatcc_builder_create_vector@@Base>
   126d0:	mov	r1, r0
   126d4:	mov	r0, r5
   126d8:	bl	126f0 <debug_test@@Base+0xa4>
   126dc:	mov	r0, r5
   126e0:	bl	12e90 <flatcc_builder_clear@@Base>
   126e4:	mov	r0, #0
   126e8:	sub	sp, fp, #16
   126ec:	pop	{r4, r5, r6, r7, fp, pc}
   126f0:	push	{r4, r5, r6, r7, fp, lr}
   126f4:	add	fp, sp, #16
   126f8:	mov	r5, r1
   126fc:	mov	r1, #0
   12700:	mov	r2, #0
   12704:	mov	r3, #0
   12708:	mov	r4, r0
   1270c:	mov	r7, #0
   12710:	bl	136bc <flatcc_builder_start_buffer@@Base>
   12714:	cmp	r0, #0
   12718:	popne	{r4, r5, r6, r7, fp, pc}
   1271c:	mov	r0, r4
   12720:	mov	r1, #3
   12724:	bl	14718 <flatcc_builder_start_table@@Base>
   12728:	cmp	r0, #0
   1272c:	bne	12760 <debug_test@@Base+0x114>
   12730:	mov	r0, r4
   12734:	mov	r1, #0
   12738:	mov	r2, #8
   1273c:	mov	r3, #8
   12740:	mov	r7, #0
   12744:	bl	15964 <flatcc_builder_table_add@@Base>
   12748:	cmp	r0, #0
   1274c:	movne	r7, #0
   12750:	movne	r6, #42	; 0x2a
   12754:	strdne	r6, [r0]
   12758:	cmpne	r5, #0
   1275c:	bne	12770 <debug_test@@Base+0x124>
   12760:	mov	r0, r4
   12764:	mov	r1, r7
   12768:	pop	{r4, r5, r6, r7, fp, lr}
   1276c:	b	138ac <flatcc_builder_end_buffer@@Base>
   12770:	mov	r0, r4
   12774:	mov	r1, #2
   12778:	bl	15838 <flatcc_builder_table_add_offset@@Base>
   1277c:	cmp	r0, #0
   12780:	beq	12760 <debug_test@@Base+0x114>
   12784:	str	r5, [r0]
   12788:	mov	r0, r4
   1278c:	mov	r1, #1
   12790:	mov	r2, #1
   12794:	mov	r3, #1
   12798:	mov	r5, #1
   1279c:	bl	15964 <flatcc_builder_table_add@@Base>
   127a0:	cmp	r0, #0
   127a4:	beq	12760 <debug_test@@Base+0x114>
   127a8:	movw	r1, #28884	; 0x70d4
   127ac:	strb	r5, [r0]
   127b0:	mov	r0, r4
   127b4:	mov	r2, #0
   127b8:	movt	r1, #1
   127bc:	bl	14ff8 <flatcc_builder_check_required@@Base>
   127c0:	cmp	r0, #0
   127c4:	beq	127d8 <debug_test@@Base+0x18c>
   127c8:	mov	r0, r4
   127cc:	bl	15078 <flatcc_builder_end_table@@Base>
   127d0:	mov	r7, r0
   127d4:	b	12760 <debug_test@@Base+0x114>
   127d8:	movw	r0, #28466	; 0x6f32
   127dc:	movw	r1, #28574	; 0x6f9e
   127e0:	movw	r3, #28667	; 0x6ffb
   127e4:	mov	r2, #21
   127e8:	movt	r0, #1
   127ec:	movt	r1, #1
   127f0:	movt	r3, #1
   127f4:	bl	124b0 <__assert_fail@plt>

000127f8 <emit_test@@Base>:
   127f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127fc:	add	fp, sp, #28
   12800:	sub	sp, sp, #284	; 0x11c
   12804:	movw	r0, #28888	; 0x70d8
   12808:	add	r6, sp, #28
   1280c:	add	r4, sp, #8
   12810:	movt	r0, #1
   12814:	vld1.64	{d16-d17}, [r0]
   12818:	mov	r0, r6
   1281c:	vst1.64	{d16-d17}, [r4]
   12820:	bl	12cf0 <flatcc_builder_init@@Base>
   12824:	mov	r0, r6
   12828:	bl	167e4 <flatcc_builder_get_emit_context@@Base>
   1282c:	mov	r5, r0
   12830:	mvn	r0, #-1073741824	; 0xc0000000
   12834:	mov	r1, #4
   12838:	mov	r2, #4
   1283c:	mov	r3, #4
   12840:	str	r1, [sp]
   12844:	str	r0, [sp, #4]
   12848:	mov	r0, r6
   1284c:	mov	r1, r4
   12850:	bl	15230 <flatcc_builder_create_vector@@Base>
   12854:	mov	r1, r0
   12858:	mov	r0, r6
   1285c:	bl	126f0 <debug_test@@Base+0xa4>
   12860:	ldm	r5, {r1, r2}
   12864:	mvn	r0, #0
   12868:	cmp	r1, r2
   1286c:	bne	12a84 <emit_test@@Base+0x28c>
   12870:	ldr	r4, [r5, #8]
   12874:	cmp	r4, #0
   12878:	beq	12a84 <emit_test@@Base+0x28c>
   1287c:	ldr	r5, [r5, #24]
   12880:	add	r0, sp, #28
   12884:	bl	16538 <flatcc_builder_get_buffer_size@@Base>
   12888:	cmp	r5, r0
   1288c:	bne	12ac8 <emit_test@@Base+0x2d0>
   12890:	movw	r6, #36960	; 0x9060
   12894:	movw	r1, #28439	; 0x6f17
   12898:	mov	r2, r5
   1289c:	movt	r6, #2
   128a0:	movt	r1, #1
   128a4:	ldr	r0, [r6]
   128a8:	bl	12468 <fprintf@plt>
   128ac:	ldr	r6, [r6]
   128b0:	movw	r1, #28712	; 0x7028
   128b4:	movw	r2, #28456	; 0x6f28
   128b8:	movt	r1, #1
   128bc:	movt	r2, #1
   128c0:	mov	r0, r6
   128c4:	bl	12468 <fprintf@plt>
   128c8:	cmp	r5, #0
   128cc:	beq	129a8 <emit_test@@Base+0x1b0>
   128d0:	movw	sl, #28731	; 0x703b
   128d4:	sub	r7, fp, #49	; 0x31
   128d8:	mov	r8, #0
   128dc:	movt	sl, #1
   128e0:	ands	r9, r8, #15
   128e4:	bne	1291c <emit_test@@Base+0x124>
   128e8:	cmp	r8, #0
   128ec:	beq	12904 <emit_test@@Base+0x10c>
   128f0:	movw	r1, #28717	; 0x702d
   128f4:	mov	r0, r6
   128f8:	mov	r2, r7
   128fc:	movt	r1, #1
   12900:	bl	12468 <fprintf@plt>
   12904:	movw	r1, #28723	; 0x7033
   12908:	mov	r0, r6
   1290c:	mov	r2, r8
   12910:	movt	r1, #1
   12914:	bl	12468 <fprintf@plt>
   12918:	b	12930 <emit_test@@Base+0x138>
   1291c:	tst	r8, #7
   12920:	bne	12930 <emit_test@@Base+0x138>
   12924:	mov	r0, #32
   12928:	mov	r1, r6
   1292c:	bl	12498 <fputc@plt>
   12930:	ldrb	r2, [r4, r8]
   12934:	mov	r0, r6
   12938:	mov	r1, sl
   1293c:	bl	12468 <fprintf@plt>
   12940:	ldrb	r0, [r4, r8]
   12944:	add	r8, r8, #1
   12948:	sub	r1, r0, #32
   1294c:	uxtb	r1, r1
   12950:	cmp	r1, #94	; 0x5e
   12954:	mov	r1, #0
   12958:	movwhi	r0, #46	; 0x2e
   1295c:	cmp	r5, r8
   12960:	strb	r0, [r7, r9]
   12964:	add	r0, r7, r9
   12968:	strb	r1, [r0, #1]
   1296c:	bne	128e0 <emit_test@@Base+0xe8>
   12970:	tst	r5, #15
   12974:	beq	129a8 <emit_test@@Base+0x1b0>
   12978:	movw	r8, #28737	; 0x7041
   1297c:	add	r7, r5, #1
   12980:	movt	r8, #1
   12984:	mov	r0, r8
   12988:	mov	r1, #3
   1298c:	mov	r2, #1
   12990:	mov	r3, r6
   12994:	bl	12414 <fwrite@plt>
   12998:	add	r0, r7, #1
   1299c:	tst	r7, #15
   129a0:	mov	r7, r0
   129a4:	bne	12984 <emit_test@@Base+0x18c>
   129a8:	movw	r1, #28717	; 0x702d
   129ac:	sub	r2, fp, #49	; 0x31
   129b0:	mov	r0, r6
   129b4:	movt	r1, #1
   129b8:	bl	12468 <fprintf@plt>
   129bc:	cmp	r5, #58	; 0x3a
   129c0:	bne	12adc <emit_test@@Base+0x2e4>
   129c4:	movw	r1, #28824	; 0x7098
   129c8:	mov	r0, r4
   129cc:	mov	r2, #58	; 0x3a
   129d0:	movt	r1, #1
   129d4:	bl	12450 <bcmp@plt>
   129d8:	cmp	r0, #0
   129dc:	bne	12af0 <emit_test@@Base+0x2f8>
   129e0:	ldr	r0, [r4]
   129e4:	ldr	r1, [r4, r0]!
   129e8:	mov	r0, r4
   129ec:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   129f0:	cmp	r1, #6
   129f4:	bcc	12a8c <emit_test@@Base+0x294>
   129f8:	ldrh	r2, [r0, #4]
   129fc:	cmp	r2, #0
   12a00:	beq	12a8c <emit_test@@Base+0x294>
   12a04:	mov	r3, r4
   12a08:	ldr	r2, [r3, r2]!
   12a0c:	ldr	r3, [r3, #4]
   12a10:	eor	r2, r2, #42	; 0x2a
   12a14:	orrs	r2, r2, r3
   12a18:	bne	12a8c <emit_test@@Base+0x294>
   12a1c:	cmp	r1, #8
   12a20:	bcc	12aa0 <emit_test@@Base+0x2a8>
   12a24:	ldrh	r2, [r0, #6]
   12a28:	cmp	r2, #0
   12a2c:	beq	12aa0 <emit_test@@Base+0x2a8>
   12a30:	ldrb	r2, [r4, r2]
   12a34:	cmp	r2, #1
   12a38:	bne	12aa0 <emit_test@@Base+0x2a8>
   12a3c:	cmp	r1, #10
   12a40:	bcc	12ab4 <emit_test@@Base+0x2bc>
   12a44:	ldrh	r0, [r0, #8]
   12a48:	cmp	r0, #0
   12a4c:	beq	12ab4 <emit_test@@Base+0x2bc>
   12a50:	ldr	r0, [r4, r0]!
   12a54:	ldr	r0, [r4, r0]!
   12a58:	cmp	r0, #4
   12a5c:	bne	12ab4 <emit_test@@Base+0x2bc>
   12a60:	add	r0, r4, #4
   12a64:	vldr	s0, [pc, #184]	; 12b24 <emit_test@@Base+0x32c>
   12a68:	vldr	s2, [r0, #8]
   12a6c:	vcmp.f32	s2, s0
   12a70:	vmrs	APSR_nzcv, fpscr
   12a74:	bne	12b04 <emit_test@@Base+0x30c>
   12a78:	add	r0, sp, #28
   12a7c:	bl	12e90 <flatcc_builder_clear@@Base>
   12a80:	mov	r0, #0
   12a84:	sub	sp, fp, #28
   12a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a8c:	movw	r0, #33952	; 0x84a0
   12a90:	movw	r1, #28348	; 0x6ebc
   12a94:	movw	r3, #28423	; 0x6f07
   12a98:	mov	r2, #112	; 0x70
   12a9c:	b	12b14 <emit_test@@Base+0x31c>
   12aa0:	movw	r0, #33952	; 0x84a0
   12aa4:	movw	r1, #28348	; 0x6ebc
   12aa8:	movw	r3, #28423	; 0x6f07
   12aac:	mov	r2, #113	; 0x71
   12ab0:	b	12b14 <emit_test@@Base+0x31c>
   12ab4:	movw	r0, #33952	; 0x84a0
   12ab8:	movw	r1, #28348	; 0x6ebc
   12abc:	movw	r3, #28423	; 0x6f07
   12ac0:	mov	r2, #114	; 0x72
   12ac4:	b	12b14 <emit_test@@Base+0x31c>
   12ac8:	movw	r0, #33952	; 0x84a0
   12acc:	movw	r1, #28348	; 0x6ebc
   12ad0:	movw	r3, #28423	; 0x6f07
   12ad4:	mov	r2, #101	; 0x65
   12ad8:	b	12b14 <emit_test@@Base+0x31c>
   12adc:	movw	r0, #33952	; 0x84a0
   12ae0:	movw	r1, #28348	; 0x6ebc
   12ae4:	movw	r3, #28423	; 0x6f07
   12ae8:	mov	r2, #106	; 0x6a
   12aec:	b	12b14 <emit_test@@Base+0x31c>
   12af0:	movw	r0, #33952	; 0x84a0
   12af4:	movw	r1, #28348	; 0x6ebc
   12af8:	movw	r3, #28423	; 0x6f07
   12afc:	mov	r2, #108	; 0x6c
   12b00:	b	12b14 <emit_test@@Base+0x31c>
   12b04:	movw	r0, #33952	; 0x84a0
   12b08:	movw	r1, #28348	; 0x6ebc
   12b0c:	movw	r3, #28423	; 0x6f07
   12b10:	mov	r2, #115	; 0x73
   12b14:	movt	r0, #1
   12b18:	movt	r1, #1
   12b1c:	movt	r3, #1
   12b20:	bl	124b0 <__assert_fail@plt>
   12b24:	svccc	0x0099999a

00012b28 <main@@Base>:
   12b28:	push	{fp, lr}
   12b2c:	mov	fp, sp
   12b30:	bl	1264c <debug_test@@Base>
   12b34:	pop	{fp, lr}
   12b38:	b	127f8 <emit_test@@Base>

00012b3c <flatcc_builder_default_alloc@@Base>:
   12b3c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b40:	add	fp, sp, #24
   12b44:	mov	r4, r1
   12b48:	cmp	r2, #0
   12b4c:	beq	12b94 <flatcc_builder_default_alloc@@Base+0x58>
   12b50:	ldr	r0, [fp, #8]
   12b54:	mov	r8, r3
   12b58:	sub	r1, r0, #1
   12b5c:	cmp	r1, #6
   12b60:	bhi	12bbc <flatcc_builder_default_alloc@@Base+0x80>
   12b64:	add	r3, pc, #4
   12b68:	mov	r0, #256	; 0x100
   12b6c:	ldr	pc, [r3, r1, lsl #2]
   12b70:	ldrdeq	r2, [r1], -r0
   12b74:			; <UNDEFINED> instruction: 0x00012bbc
   12b78:			; <UNDEFINED> instruction: 0x00012bbc
   12b7c:	andeq	r2, r1, ip, lsl #23
   12b80:	andeq	r2, r1, r4, asr #23
   12b84:			; <UNDEFINED> instruction: 0x00012bbc
   12b88:	andeq	r2, r1, ip, asr #23
   12b8c:	mov	r0, #288	; 0x120
   12b90:	b	12bd0 <flatcc_builder_default_alloc@@Base+0x94>
   12b94:	ldr	r0, [r4]
   12b98:	cmp	r0, #0
   12b9c:	beq	12bb4 <flatcc_builder_default_alloc@@Base+0x78>
   12ba0:	bl	123f0 <free@plt>
   12ba4:	mov	r6, #0
   12ba8:	str	r6, [r4]
   12bac:	str	r6, [r4, #4]
   12bb0:	b	12c40 <flatcc_builder_default_alloc@@Base+0x104>
   12bb4:	mov	r6, #0
   12bb8:	b	12c40 <flatcc_builder_default_alloc@@Base+0x104>
   12bbc:	mov	r0, #32
   12bc0:	b	12bd0 <flatcc_builder_default_alloc@@Base+0x94>
   12bc4:	mov	r0, r2
   12bc8:	b	12bd0 <flatcc_builder_default_alloc@@Base+0x94>
   12bcc:	mov	r0, #64	; 0x40
   12bd0:	mov	r7, r0
   12bd4:	lsl	r0, r0, #1
   12bd8:	cmp	r7, r2
   12bdc:	bcc	12bd0 <flatcc_builder_default_alloc@@Base+0x94>
   12be0:	ldr	r0, [r4, #4]
   12be4:	mov	r6, #0
   12be8:	cmp	r0, r2
   12bec:	lsrcs	r0, r0, #1
   12bf0:	cmpcs	r0, r7
   12bf4:	bcs	12c40 <flatcc_builder_default_alloc@@Base+0x104>
   12bf8:	ldr	r0, [r4]
   12bfc:	mov	r1, r7
   12c00:	bl	12408 <realloc@plt>
   12c04:	cmp	r0, #0
   12c08:	beq	12c3c <flatcc_builder_default_alloc@@Base+0x100>
   12c0c:	mov	r5, r0
   12c10:	cmp	r8, #0
   12c14:	beq	12c34 <flatcc_builder_default_alloc@@Base+0xf8>
   12c18:	ldr	r1, [r4, #4]
   12c1c:	cmp	r7, r1
   12c20:	bls	12c34 <flatcc_builder_default_alloc@@Base+0xf8>
   12c24:	add	r0, r5, r1
   12c28:	sub	r2, r7, r1
   12c2c:	mov	r1, #0
   12c30:	bl	12480 <memset@plt>
   12c34:	stm	r4, {r5, r7}
   12c38:	b	12c40 <flatcc_builder_default_alloc@@Base+0x104>
   12c3c:	mvn	r6, #0
   12c40:	mov	r0, r6
   12c44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012c48 <flatcc_builder_flush_vtable_cache@@Base>:
   12c48:	push	{r4, r5, fp, lr}
   12c4c:	add	fp, sp, #8
   12c50:	mov	r4, r0
   12c54:	ldr	r0, [r0, #116]	; 0x74
   12c58:	cmp	r0, #0
   12c5c:	popeq	{r4, r5, fp, pc}
   12c60:	ldr	r0, [r4, #92]	; 0x5c
   12c64:	ldr	r2, [r4, #96]	; 0x60
   12c68:	mov	r1, #0
   12c6c:	mov	r5, #0
   12c70:	bl	12480 <memset@plt>
   12c74:	mov	r0, #16
   12c78:	str	r5, [r4, #120]	; 0x78
   12c7c:	str	r0, [r4, #124]	; 0x7c
   12c80:	pop	{r4, r5, fp, pc}

00012c84 <flatcc_builder_custom_init@@Base>:
   12c84:	push	{r4, r5, r6, r7, fp, lr}
   12c88:	add	fp, sp, #16
   12c8c:	mov	r6, r2
   12c90:	mov	r7, r1
   12c94:	mov	r1, #0
   12c98:	mov	r2, #232	; 0xe8
   12c9c:	mov	r5, r3
   12ca0:	mov	r4, r0
   12ca4:	bl	12480 <memset@plt>
   12ca8:	ldr	r0, [fp, #8]
   12cac:	cmp	r7, #0
   12cb0:	bne	12cc8 <flatcc_builder_custom_init@@Base+0x44>
   12cb4:	movw	r7, #27120	; 0x69f0
   12cb8:	mov	r1, #1
   12cbc:	add	r6, r4, #188	; 0xbc
   12cc0:	movt	r7, #1
   12cc4:	str	r1, [r4, #184]	; 0xb8
   12cc8:	movw	r1, #11068	; 0x2b3c
   12ccc:	cmp	r5, #0
   12cd0:	str	r6, [r4, #36]	; 0x24
   12cd4:	str	r0, [r4, #40]	; 0x28
   12cd8:	mov	r0, #0
   12cdc:	str	r7, [r4, #44]	; 0x2c
   12ce0:	movt	r1, #1
   12ce4:	movne	r1, r5
   12ce8:	str	r1, [r4, #48]	; 0x30
   12cec:	pop	{r4, r5, r6, r7, fp, pc}

00012cf0 <flatcc_builder_init@@Base>:
   12cf0:	push	{r4, r5, fp, lr}
   12cf4:	add	fp, sp, #8
   12cf8:	mov	r1, #0
   12cfc:	mov	r2, #232	; 0xe8
   12d00:	mov	r4, r0
   12d04:	mov	r5, #0
   12d08:	bl	12480 <memset@plt>
   12d0c:	mov	r0, #1
   12d10:	movw	r1, #27120	; 0x69f0
   12d14:	add	r2, r4, #188	; 0xbc
   12d18:	str	r0, [r4, #184]	; 0xb8
   12d1c:	movw	r0, #11068	; 0x2b3c
   12d20:	movt	r1, #1
   12d24:	str	r2, [r4, #36]	; 0x24
   12d28:	str	r5, [r4, #40]	; 0x28
   12d2c:	movt	r0, #1
   12d30:	str	r1, [r4, #44]	; 0x2c
   12d34:	str	r0, [r4, #48]	; 0x30
   12d38:	mov	r0, #0
   12d3c:	pop	{r4, r5, fp, pc}

00012d40 <flatcc_builder_custom_reset@@Base>:
   12d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d44:	add	fp, sp, #28
   12d48:	sub	sp, sp, #4
   12d4c:	mov	r9, r2
   12d50:	mov	r8, r1
   12d54:	mov	sl, r0
   12d58:	add	r7, r0, #52	; 0x34
   12d5c:	mov	r5, #0
   12d60:	add	r6, sl, r5, lsl #3
   12d64:	ldr	r0, [r6, #52]	; 0x34
   12d68:	cmp	r0, #0
   12d6c:	beq	12db4 <flatcc_builder_custom_reset@@Base+0x74>
   12d70:	cmp	r9, #0
   12d74:	cmpne	r5, #5
   12d78:	beq	12da4 <flatcc_builder_custom_reset@@Base+0x64>
   12d7c:	ldr	r0, [sl, #40]	; 0x28
   12d80:	ldr	r4, [sl, #48]	; 0x30
   12d84:	mov	r1, r7
   12d88:	mov	r2, #1
   12d8c:	mov	r3, #1
   12d90:	str	r5, [sp]
   12d94:	blx	r4
   12d98:	cmp	r0, #0
   12d9c:	bne	12e54 <flatcc_builder_custom_reset@@Base+0x114>
   12da0:	ldr	r0, [r6, #52]	; 0x34
   12da4:	ldr	r2, [r6, #56]	; 0x38
   12da8:	mov	r1, #0
   12dac:	bl	12480 <memset@plt>
   12db0:	b	12dc0 <flatcc_builder_custom_reset@@Base+0x80>
   12db4:	ldr	r0, [r6, #56]	; 0x38
   12db8:	cmp	r0, #0
   12dbc:	bne	12e64 <flatcc_builder_custom_reset@@Base+0x124>
   12dc0:	add	r5, r5, #1
   12dc4:	add	r7, r7, #8
   12dc8:	cmp	r5, #8
   12dcc:	bne	12d60 <flatcc_builder_custom_reset@@Base+0x20>
   12dd0:	mov	r0, #0
   12dd4:	vmov.i32	q8, #0	; 0x00000000
   12dd8:	mov	r5, #0
   12ddc:	str	r0, [sl, #120]	; 0x78
   12de0:	ldr	r1, [sl, #124]	; 0x7c
   12de4:	cmp	r1, #0
   12de8:	movne	r1, #16
   12dec:	strne	r1, [sl, #124]	; 0x7c
   12df0:	add	r1, sl, #148	; 0x94
   12df4:	str	r0, [sl, #136]	; 0x88
   12df8:	str	r0, [sl, #140]	; 0x8c
   12dfc:	strh	r0, [sl, #128]	; 0x80
   12e00:	str	r0, [sl, #32]
   12e04:	cmp	r8, #0
   12e08:	vst1.32	{d16-d17}, [r1]
   12e0c:	ldr	r2, [sl, #60]	; 0x3c
   12e10:	ldr	r1, [sl, #52]	; 0x34
   12e14:	ldr	r3, [sl, #76]	; 0x4c
   12e18:	str	r2, [sl, #16]
   12e1c:	str	r0, [sl, #20]
   12e20:	str	r0, [sl, #24]
   12e24:	movne	r0, #0
   12e28:	str	r3, [sl]
   12e2c:	str	r1, [sl, #4]
   12e30:	strne	r0, [sl, #172]	; 0xac
   12e34:	strne	r0, [sl, #176]	; 0xb0
   12e38:	strne	r0, [sl, #180]	; 0xb4
   12e3c:	ldr	r0, [sl, #184]	; 0xb8
   12e40:	cmp	r0, #0
   12e44:	beq	12e58 <flatcc_builder_custom_reset@@Base+0x118>
   12e48:	add	r0, sl, #188	; 0xbc
   12e4c:	bl	168c0 <flatcc_emitter_reset@@Base>
   12e50:	b	12e58 <flatcc_builder_custom_reset@@Base+0x118>
   12e54:	mvn	r5, #0
   12e58:	mov	r0, r5
   12e5c:	sub	sp, fp, #28
   12e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e64:	movw	r0, #29416	; 0x72e8
   12e68:	movw	r1, #29434	; 0x72fa
   12e6c:	movw	r3, #29504	; 0x7340
   12e70:	movw	r2, #434	; 0x1b2
   12e74:	movt	r0, #1
   12e78:	movt	r1, #1
   12e7c:	movt	r3, #1
   12e80:	bl	124b0 <__assert_fail@plt>

00012e84 <flatcc_builder_reset@@Base>:
   12e84:	mov	r1, #0
   12e88:	mov	r2, #0
   12e8c:	b	12d40 <flatcc_builder_custom_reset@@Base>

00012e90 <flatcc_builder_clear@@Base>:
   12e90:	push	{r4, r5, r6, r7, fp, lr}
   12e94:	add	fp, sp, #16
   12e98:	sub	sp, sp, #8
   12e9c:	mov	r7, r0
   12ea0:	add	r5, r0, #52	; 0x34
   12ea4:	mov	r6, #0
   12ea8:	ldr	r0, [r7, #40]	; 0x28
   12eac:	ldr	r4, [r7, #48]	; 0x30
   12eb0:	mov	r1, r5
   12eb4:	mov	r2, #0
   12eb8:	mov	r3, #0
   12ebc:	str	r6, [sp]
   12ec0:	blx	r4
   12ec4:	add	r6, r6, #1
   12ec8:	add	r5, r5, #8
   12ecc:	cmp	r6, #8
   12ed0:	bne	12ea8 <flatcc_builder_clear@@Base+0x18>
   12ed4:	ldr	r0, [r7, #184]	; 0xb8
   12ed8:	cmp	r0, #0
   12edc:	beq	12ee8 <flatcc_builder_clear@@Base+0x58>
   12ee0:	add	r0, r7, #188	; 0xbc
   12ee4:	bl	1698c <flatcc_emitter_clear@@Base>
   12ee8:	mov	r0, r7
   12eec:	mov	r1, #0
   12ef0:	mov	r2, #232	; 0xe8
   12ef4:	sub	sp, fp, #16
   12ef8:	pop	{r4, r5, r6, r7, fp, lr}
   12efc:	b	12480 <memset@plt>

00012f00 <flatcc_builder_enter_user_frame_ptr@@Base>:
   12f00:	push	{r4, r5, r6, r7, fp, lr}
   12f04:	add	fp, sp, #16
   12f08:	sub	sp, sp, #8
   12f0c:	mov	r4, r0
   12f10:	ldr	r0, [r0, #112]	; 0x70
   12f14:	add	r1, r1, #7
   12f18:	ldr	r7, [r4, #228]	; 0xe4
   12f1c:	bic	r5, r1, #3
   12f20:	add	r6, r4, #108	; 0x6c
   12f24:	add	r2, r7, r5
   12f28:	cmp	r2, r0
   12f2c:	bls	12f54 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   12f30:	ldr	r0, [r4, #40]	; 0x28
   12f34:	ldr	ip, [r4, #48]	; 0x30
   12f38:	mov	r1, #7
   12f3c:	mov	r3, #0
   12f40:	str	r1, [sp]
   12f44:	mov	r1, r6
   12f48:	blx	ip
   12f4c:	cmp	r0, #0
   12f50:	bne	12fa0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   12f54:	ldr	r0, [r6]
   12f58:	adds	r6, r0, r7
   12f5c:	beq	12f90 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   12f60:	mov	r0, r6
   12f64:	mov	r1, #0
   12f68:	mov	r2, r5
   12f6c:	bl	12480 <memset@plt>
   12f70:	ldr	r0, [r4, #224]	; 0xe0
   12f74:	str	r0, [r6], #4
   12f78:	ldr	r0, [r4, #228]	; 0xe4
   12f7c:	add	r1, r0, #4
   12f80:	add	r0, r0, r5
   12f84:	str	r1, [r4, #224]	; 0xe0
   12f88:	str	r0, [r4, #228]	; 0xe4
   12f8c:	b	12f94 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   12f90:	mov	r6, #0
   12f94:	mov	r0, r6
   12f98:	sub	sp, fp, #16
   12f9c:	pop	{r4, r5, r6, r7, fp, pc}
   12fa0:	movw	r0, #33952	; 0x84a0
   12fa4:	movw	r1, #29434	; 0x72fa
   12fa8:	movw	r3, #33498	; 0x82da
   12fac:	mov	r2, #308	; 0x134
   12fb0:	movt	r0, #1
   12fb4:	movt	r1, #1
   12fb8:	movt	r3, #1
   12fbc:	bl	124b0 <__assert_fail@plt>

00012fc0 <flatcc_builder_enter_user_frame@@Base>:
   12fc0:	push	{r4, r5, r6, r7, fp, lr}
   12fc4:	add	fp, sp, #16
   12fc8:	sub	sp, sp, #8
   12fcc:	mov	r4, r0
   12fd0:	ldr	r0, [r0, #112]	; 0x70
   12fd4:	add	r1, r1, #7
   12fd8:	ldr	r7, [r4, #228]	; 0xe4
   12fdc:	bic	r5, r1, #3
   12fe0:	add	r6, r4, #108	; 0x6c
   12fe4:	add	r2, r7, r5
   12fe8:	cmp	r2, r0
   12fec:	bls	13014 <flatcc_builder_enter_user_frame@@Base+0x54>
   12ff0:	ldr	r0, [r4, #40]	; 0x28
   12ff4:	ldr	ip, [r4, #48]	; 0x30
   12ff8:	mov	r1, #7
   12ffc:	mov	r3, #0
   13000:	str	r1, [sp]
   13004:	mov	r1, r6
   13008:	blx	ip
   1300c:	cmp	r0, #0
   13010:	bne	1305c <flatcc_builder_enter_user_frame@@Base+0x9c>
   13014:	ldr	r0, [r6]
   13018:	adds	r6, r0, r7
   1301c:	beq	13050 <flatcc_builder_enter_user_frame@@Base+0x90>
   13020:	mov	r0, r6
   13024:	mov	r1, #0
   13028:	mov	r2, r5
   1302c:	bl	12480 <memset@plt>
   13030:	ldr	r0, [r4, #224]	; 0xe0
   13034:	str	r0, [r6]
   13038:	ldr	r1, [r4, #228]	; 0xe4
   1303c:	add	r0, r1, #4
   13040:	add	r1, r1, r5
   13044:	str	r0, [r4, #224]	; 0xe0
   13048:	str	r1, [r4, #228]	; 0xe4
   1304c:	b	13054 <flatcc_builder_enter_user_frame@@Base+0x94>
   13050:	mov	r0, #0
   13054:	sub	sp, fp, #16
   13058:	pop	{r4, r5, r6, r7, fp, pc}
   1305c:	movw	r0, #33952	; 0x84a0
   13060:	movw	r1, #29434	; 0x72fa
   13064:	movw	r3, #33498	; 0x82da
   13068:	mov	r2, #308	; 0x134
   1306c:	movt	r0, #1
   13070:	movt	r1, #1
   13074:	movt	r3, #1
   13078:	bl	124b0 <__assert_fail@plt>

0001307c <flatcc_builder_exit_user_frame@@Base>:
   1307c:	push	{fp, lr}
   13080:	mov	fp, sp
   13084:	ldr	r1, [r0, #224]	; 0xe0
   13088:	cmp	r1, #0
   1308c:	subne	r2, r1, #4
   13090:	strne	r2, [r0, #228]	; 0xe4
   13094:	ldrne	r2, [r0, #108]	; 0x6c
   13098:	addne	r1, r2, r1
   1309c:	ldrne	r1, [r1, #-4]
   130a0:	strne	r1, [r0, #224]	; 0xe0
   130a4:	movne	r0, r1
   130a8:	popne	{fp, pc}
   130ac:	movw	r0, #29566	; 0x737e
   130b0:	movw	r1, #29434	; 0x72fa
   130b4:	movw	r3, #29591	; 0x7397
   130b8:	movw	r2, #542	; 0x21e
   130bc:	movt	r0, #1
   130c0:	movt	r1, #1
   130c4:	movt	r3, #1
   130c8:	bl	124b0 <__assert_fail@plt>

000130cc <flatcc_builder_exit_user_frame_at@@Base>:
   130cc:	push	{fp, lr}
   130d0:	mov	fp, sp
   130d4:	ldr	r2, [r0, #224]	; 0xe0
   130d8:	cmp	r2, r1
   130dc:	bcc	130ec <flatcc_builder_exit_user_frame_at@@Base+0x20>
   130e0:	str	r1, [r0, #224]	; 0xe0
   130e4:	pop	{fp, lr}
   130e8:	b	1307c <flatcc_builder_exit_user_frame@@Base>
   130ec:	movw	r0, #29649	; 0x73d1
   130f0:	movw	r1, #29434	; 0x72fa
   130f4:	movw	r3, #29680	; 0x73f0
   130f8:	movw	r2, #551	; 0x227
   130fc:	movt	r0, #1
   13100:	movt	r1, #1
   13104:	movt	r3, #1
   13108:	bl	124b0 <__assert_fail@plt>

0001310c <flatcc_builder_get_current_user_frame@@Base>:
   1310c:	ldr	r0, [r0, #224]	; 0xe0
   13110:	bx	lr

00013114 <flatcc_builder_get_user_frame_ptr@@Base>:
   13114:	ldr	r0, [r0, #108]	; 0x6c
   13118:	add	r0, r0, r1
   1311c:	bx	lr

00013120 <flatcc_builder_embed_buffer@@Base>:
   13120:	push	{r4, r5, r6, r7, fp, lr}
   13124:	add	fp, sp, #16
   13128:	sub	sp, sp, #88	; 0x58
   1312c:	mov	r4, r0
   13130:	ldr	r0, [fp, #8]
   13134:	mov	r5, r3
   13138:	mov	r7, r2
   1313c:	mov	r2, r1
   13140:	sub	r1, fp, #18
   13144:	strh	r0, [fp, #-18]	; 0xffffffee
   13148:	mov	r0, r4
   1314c:	ldr	r3, [r4, #152]	; 0x98
   13150:	cmp	r3, #0
   13154:	movwne	r3, #1
   13158:	bl	13284 <flatcc_builder_embed_buffer@@Base+0x164>
   1315c:	ldr	r1, [fp, #12]
   13160:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13164:	ldr	r0, [r4, #136]	; 0x88
   13168:	mov	r2, #0
   1316c:	str	r2, [sp, #12]
   13170:	str	r2, [sp, #8]
   13174:	and	r1, r1, #2
   13178:	sub	r3, r3, #1
   1317c:	add	r1, r5, r1, lsl #1
   13180:	sub	r1, r0, r1
   13184:	and	r3, r1, r3
   13188:	add	r1, r3, r5
   1318c:	str	r1, [fp, #-24]	; 0xffffffe8
   13190:	ldr	r1, [r4, #152]	; 0x98
   13194:	cmp	r1, #0
   13198:	mov	r1, #0
   1319c:	beq	131bc <flatcc_builder_embed_buffer@@Base+0x9c>
   131a0:	mov	r1, #4
   131a4:	sub	r2, fp, #24
   131a8:	str	r1, [sp, #20]
   131ac:	str	r2, [sp, #16]
   131b0:	mov	r2, #1
   131b4:	str	r1, [sp, #8]
   131b8:	str	r2, [sp, #12]
   131bc:	cmp	r5, #0
   131c0:	beq	131e4 <flatcc_builder_embed_buffer@@Base+0xc4>
   131c4:	add	r6, sp, #8
   131c8:	add	r1, r1, r5
   131cc:	add	r6, r6, r2, lsl #3
   131d0:	add	r2, r2, #1
   131d4:	str	r1, [sp, #8]
   131d8:	str	r7, [r6, #8]
   131dc:	str	r5, [r6, #12]
   131e0:	str	r2, [sp, #12]
   131e4:	cmp	r3, #0
   131e8:	beq	13214 <flatcc_builder_embed_buffer@@Base+0xf4>
   131ec:	add	r7, sp, #8
   131f0:	movw	r6, #28904	; 0x70e8
   131f4:	add	r1, r1, r3
   131f8:	add	r7, r7, r2, lsl #3
   131fc:	movt	r6, #1
   13200:	add	r2, r2, #1
   13204:	str	r1, [sp, #8]
   13208:	str	r6, [r7, #8]
   1320c:	str	r3, [r7, #12]
   13210:	str	r2, [sp, #12]
   13214:	cmp	r1, #0
   13218:	ble	13270 <flatcc_builder_embed_buffer@@Base+0x150>
   1321c:	sub	r5, r0, r1
   13220:	ldr	r0, [r4, #36]	; 0x24
   13224:	ldr	r7, [r4, #44]	; 0x2c
   13228:	str	r1, [sp]
   1322c:	add	r1, sp, #8
   13230:	add	r1, r1, #8
   13234:	mov	r3, r5
   13238:	blx	r7
   1323c:	cmp	r0, #0
   13240:	streq	r5, [r4, #136]	; 0x88
   13244:	moveq	r0, r5
   13248:	subeq	sp, fp, #16
   1324c:	popeq	{r4, r5, r6, r7, fp, pc}
   13250:	movw	r0, #33952	; 0x84a0
   13254:	movw	r1, #29434	; 0x72fa
   13258:	movw	r3, #33631	; 0x835f
   1325c:	movw	r2, #651	; 0x28b
   13260:	movt	r0, #1
   13264:	movt	r1, #1
   13268:	movt	r3, #1
   1326c:	bl	124b0 <__assert_fail@plt>
   13270:	movw	r0, #33952	; 0x84a0
   13274:	movw	r1, #29434	; 0x72fa
   13278:	movw	r3, #33631	; 0x835f
   1327c:	movw	r2, #647	; 0x287
   13280:	b	13260 <flatcc_builder_embed_buffer@@Base+0x140>
   13284:	push	{r4, sl, fp, lr}
   13288:	add	fp, sp, #8
   1328c:	sub	sp, sp, #80	; 0x50
   13290:	cmp	r2, #0
   13294:	bne	132a4 <flatcc_builder_embed_buffer@@Base+0x184>
   13298:	ldrh	r2, [r0, #132]	; 0x84
   1329c:	cmp	r2, #0
   132a0:	movweq	r2, #1
   132a4:	ldrh	r4, [r1]
   132a8:	cmp	r4, #4
   132ac:	movwcc	r4, #4
   132b0:	cmpcs	r4, r2
   132b4:	bcs	132c4 <flatcc_builder_embed_buffer@@Base+0x1a4>
   132b8:	cmp	r4, r2
   132bc:	movcc	r4, r2
   132c0:	strh	r4, [r1]
   132c4:	cmp	r3, #0
   132c8:	bne	1333c <flatcc_builder_embed_buffer@@Base+0x21c>
   132cc:	ldr	r4, [r0, #140]	; 0x8c
   132d0:	sub	r1, r2, #1
   132d4:	ands	r1, r4, r1
   132d8:	beq	1333c <flatcc_builder_embed_buffer@@Base+0x21c>
   132dc:	movw	r2, #28904	; 0x70e8
   132e0:	str	r1, [sp, #20]
   132e4:	cmn	r1, #1
   132e8:	movt	r2, #1
   132ec:	str	r2, [sp, #16]
   132f0:	mov	r2, #1
   132f4:	str	r1, [sp, #8]
   132f8:	str	r2, [sp, #12]
   132fc:	add	r2, r1, r4
   13300:	str	r2, [r0, #140]	; 0x8c
   13304:	ble	13344 <flatcc_builder_embed_buffer@@Base+0x224>
   13308:	ldr	r2, [r0, #36]	; 0x24
   1330c:	ldr	ip, [r0, #44]	; 0x2c
   13310:	add	r0, sp, #8
   13314:	str	r1, [sp]
   13318:	mov	r3, r4
   1331c:	add	r1, r0, #8
   13320:	mov	r0, r2
   13324:	mov	r2, #1
   13328:	blx	ip
   1332c:	cmp	r0, #0
   13330:	bne	13358 <flatcc_builder_embed_buffer@@Base+0x238>
   13334:	cmn	r4, #1
   13338:	beq	13378 <flatcc_builder_embed_buffer@@Base+0x258>
   1333c:	sub	sp, fp, #8
   13340:	pop	{r4, sl, fp, pc}
   13344:	movw	r0, #33952	; 0x84a0
   13348:	movw	r1, #29434	; 0x72fa
   1334c:	movw	r3, #33819	; 0x841b
   13350:	movw	r2, #673	; 0x2a1
   13354:	b	13368 <flatcc_builder_embed_buffer@@Base+0x248>
   13358:	movw	r0, #33952	; 0x84a0
   1335c:	movw	r1, #29434	; 0x72fa
   13360:	movw	r3, #33819	; 0x841b
   13364:	movw	r2, #677	; 0x2a5
   13368:	movt	r0, #1
   1336c:	movt	r1, #1
   13370:	movt	r3, #1
   13374:	bl	124b0 <__assert_fail@plt>
   13378:	movw	r0, #33952	; 0x84a0
   1337c:	movw	r1, #29434	; 0x72fa
   13380:	movw	r3, #33565	; 0x831d
   13384:	movw	r2, #702	; 0x2be
   13388:	movt	r0, #1
   1338c:	movt	r1, #1
   13390:	movt	r3, #1
   13394:	bl	124b0 <__assert_fail@plt>

00013398 <flatcc_builder_create_buffer@@Base>:
   13398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1339c:	add	fp, sp, #28
   133a0:	sub	sp, sp, #100	; 0x64
   133a4:	ldr	sl, [fp, #12]
   133a8:	mov	r4, r0
   133ac:	ldr	r0, [fp, #8]
   133b0:	mov	r7, r1
   133b4:	mov	r5, #0
   133b8:	mov	r6, r3
   133bc:	sub	r1, fp, #30
   133c0:	str	r5, [sp, #12]
   133c4:	and	r9, sl, #1
   133c8:	strh	r0, [fp, #-30]	; 0xffffffe2
   133cc:	mov	r0, r4
   133d0:	mov	r3, r9
   133d4:	bl	13284 <flatcc_builder_embed_buffer@@Base+0x164>
   133d8:	ldrh	r0, [r4, #128]	; 0x80
   133dc:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   133e0:	str	r6, [sp, #8]
   133e4:	cmp	r0, r1
   133e8:	strhcc	r1, [r4, #128]	; 0x80
   133ec:	cmp	r7, #0
   133f0:	beq	1340c <flatcc_builder_create_buffer@@Base+0x74>
   133f4:	ldr	r5, [r7]
   133f8:	cmp	r5, #0
   133fc:	str	r5, [sp, #12]
   13400:	movwne	r5, #1
   13404:	lsl	r7, r5, #2
   13408:	b	13410 <flatcc_builder_create_buffer@@Base+0x78>
   1340c:	mov	r7, #0
   13410:	ldr	r0, [r4, #136]	; 0x88
   13414:	and	r2, sl, #2
   13418:	mov	r3, #0
   1341c:	sub	r6, r1, #1
   13420:	ands	ip, sl, #3
   13424:	mov	sl, #4
   13428:	mov	r1, #4
   1342c:	str	r3, [sp, #20]
   13430:	str	r3, [sp, #16]
   13434:	sub	r2, r0, r2, lsl #1
   13438:	sub	r2, r2, r7
   1343c:	sub	r2, r2, #4
   13440:	beq	13464 <flatcc_builder_create_buffer@@Base+0xcc>
   13444:	mov	r1, #4
   13448:	sub	r3, fp, #40	; 0x28
   1344c:	str	r1, [sp, #28]
   13450:	str	r3, [sp, #24]
   13454:	str	r1, [sp, #16]
   13458:	mov	r3, #1
   1345c:	mov	r1, #8
   13460:	str	r3, [sp, #20]
   13464:	add	lr, sp, #16
   13468:	and	r6, r2, r6
   1346c:	sub	r8, fp, #36	; 0x24
   13470:	str	r1, [sp, #16]
   13474:	cmp	r5, #0
   13478:	add	r2, lr, r3, lsl #3
   1347c:	str	r8, [r2, #8]
   13480:	str	sl, [r2, #12]
   13484:	add	r2, r3, #1
   13488:	str	r2, [sp, #20]
   1348c:	beq	134b0 <flatcc_builder_create_buffer@@Base+0x118>
   13490:	add	r2, lr, r2, lsl #3
   13494:	add	r1, r1, r7
   13498:	add	r5, sp, #12
   1349c:	str	r1, [sp, #16]
   134a0:	str	r5, [r2, #8]
   134a4:	str	r7, [r2, #12]
   134a8:	orr	r2, r3, #2
   134ac:	str	r2, [sp, #20]
   134b0:	cmp	r6, #0
   134b4:	beq	134dc <flatcc_builder_create_buffer@@Base+0x144>
   134b8:	movw	r5, #28904	; 0x70e8
   134bc:	add	r3, lr, r2, lsl #3
   134c0:	add	r1, r1, r6
   134c4:	add	r2, r2, #1
   134c8:	movt	r5, #1
   134cc:	str	r1, [sp, #16]
   134d0:	str	r5, [r3, #8]
   134d4:	str	r6, [r3, #12]
   134d8:	str	r2, [sp, #20]
   134dc:	sub	r7, r0, r1
   134e0:	cmp	ip, #0
   134e4:	mov	r6, #144	; 0x90
   134e8:	ldr	r3, [sp, #8]
   134ec:	mov	r0, r7
   134f0:	addne	r0, r0, #4
   134f4:	cmp	r9, #0
   134f8:	movweq	r6, #140	; 0x8c
   134fc:	cmp	r1, #0
   13500:	ldr	r6, [r4, r6]
   13504:	sub	r3, r3, r0
   13508:	str	r3, [fp, #-36]	; 0xffffffdc
   1350c:	sub	r0, r6, r0
   13510:	str	r0, [fp, #-40]	; 0xffffffd8
   13514:	ble	1356c <flatcc_builder_create_buffer@@Base+0x1d4>
   13518:	ldr	r0, [r4, #36]	; 0x24
   1351c:	ldr	r6, [r4, #44]	; 0x2c
   13520:	str	r1, [sp]
   13524:	add	r1, lr, #8
   13528:	mov	r3, r7
   1352c:	blx	r6
   13530:	cmp	r0, #0
   13534:	bne	13580 <flatcc_builder_create_buffer@@Base+0x1e8>
   13538:	cmp	r7, #0
   1353c:	str	r7, [r4, #136]	; 0x88
   13540:	movne	r0, r7
   13544:	subne	sp, fp, #28
   13548:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1354c:	movw	r0, #33952	; 0x84a0
   13550:	movw	r1, #29434	; 0x72fa
   13554:	movw	r3, #29749	; 0x7435
   13558:	mov	r2, #772	; 0x304
   1355c:	movt	r0, #1
   13560:	movt	r1, #1
   13564:	movt	r3, #1
   13568:	bl	124b0 <__assert_fail@plt>
   1356c:	movw	r0, #33952	; 0x84a0
   13570:	movw	r1, #29434	; 0x72fa
   13574:	movw	r3, #33631	; 0x835f
   13578:	movw	r2, #647	; 0x287
   1357c:	b	13590 <flatcc_builder_create_buffer@@Base+0x1f8>
   13580:	movw	r0, #33952	; 0x84a0
   13584:	movw	r1, #29434	; 0x72fa
   13588:	movw	r3, #33631	; 0x835f
   1358c:	movw	r2, #651	; 0x28b
   13590:	movt	r0, #1
   13594:	movt	r1, #1
   13598:	movt	r3, #1
   1359c:	bl	124b0 <__assert_fail@plt>

000135a0 <flatcc_builder_create_struct@@Base>:
   135a0:	push	{r4, r5, r6, sl, fp, lr}
   135a4:	add	fp, sp, #16
   135a8:	sub	sp, sp, #80	; 0x50
   135ac:	cmp	r3, #0
   135b0:	beq	13688 <flatcc_builder_create_struct@@Base+0xe8>
   135b4:	mov	r5, r0
   135b8:	ldrh	r0, [r0, #128]	; 0x80
   135bc:	mov	r4, #0
   135c0:	cmp	r0, r3
   135c4:	strhcc	r3, [r5, #128]	; 0x80
   135c8:	sub	r3, r3, #1
   135cc:	cmp	r2, #0
   135d0:	ldr	r0, [r5, #136]	; 0x88
   135d4:	str	r4, [sp, #12]
   135d8:	str	r4, [sp, #8]
   135dc:	movne	r4, #1
   135e0:	strne	r2, [sp, #20]
   135e4:	strne	r1, [sp, #16]
   135e8:	strne	r2, [sp, #8]
   135ec:	strne	r4, [sp, #12]
   135f0:	sub	r6, r0, r2
   135f4:	and	r3, r6, r3
   135f8:	cmp	r3, #0
   135fc:	beq	13628 <flatcc_builder_create_struct@@Base+0x88>
   13600:	add	r1, sp, #8
   13604:	movw	r6, #28904	; 0x70e8
   13608:	add	r2, r3, r2
   1360c:	add	r1, r1, r4, lsl #3
   13610:	movt	r6, #1
   13614:	add	r4, r4, #1
   13618:	str	r2, [sp, #8]
   1361c:	str	r6, [r1, #8]
   13620:	str	r3, [r1, #12]
   13624:	str	r4, [sp, #12]
   13628:	cmp	r2, #0
   1362c:	ble	136a8 <flatcc_builder_create_struct@@Base+0x108>
   13630:	sub	r6, r0, r2
   13634:	ldr	r0, [r5, #36]	; 0x24
   13638:	ldr	ip, [r5, #44]	; 0x2c
   1363c:	add	r1, sp, #8
   13640:	str	r2, [sp]
   13644:	mov	r2, r4
   13648:	add	r1, r1, #8
   1364c:	mov	r3, r6
   13650:	blx	ip
   13654:	cmp	r0, #0
   13658:	streq	r6, [r5, #136]	; 0x88
   1365c:	moveq	r0, r6
   13660:	subeq	sp, fp, #16
   13664:	popeq	{r4, r5, r6, sl, fp, pc}
   13668:	movw	r0, #33952	; 0x84a0
   1366c:	movw	r1, #29434	; 0x72fa
   13670:	movw	r3, #33631	; 0x835f
   13674:	movw	r2, #651	; 0x28b
   13678:	movt	r0, #1
   1367c:	movt	r1, #1
   13680:	movt	r3, #1
   13684:	bl	124b0 <__assert_fail@plt>
   13688:	movw	r0, #29880	; 0x74b8
   1368c:	movw	r1, #29434	; 0x72fa
   13690:	movw	r3, #29891	; 0x74c3
   13694:	movw	r2, #783	; 0x30f
   13698:	movt	r0, #1
   1369c:	movt	r1, #1
   136a0:	movt	r3, #1
   136a4:	bl	124b0 <__assert_fail@plt>
   136a8:	movw	r0, #33952	; 0x84a0
   136ac:	movw	r1, #29434	; 0x72fa
   136b0:	movw	r3, #33631	; 0x835f
   136b4:	movw	r2, #647	; 0x287
   136b8:	b	13678 <flatcc_builder_create_struct@@Base+0xd8>

000136bc <flatcc_builder_start_buffer@@Base>:
   136bc:	push	{r4, r5, r6, r7, fp, lr}
   136c0:	add	fp, sp, #16
   136c4:	mov	r5, r1
   136c8:	ldrh	r1, [r0, #128]	; 0x80
   136cc:	mov	r6, r3
   136d0:	mov	r7, r2
   136d4:	mov	r4, r0
   136d8:	bl	13778 <flatcc_builder_start_buffer@@Base+0xbc>
   136dc:	mov	r1, r0
   136e0:	mvn	r0, #0
   136e4:	cmp	r1, #0
   136e8:	popne	{r4, r5, r6, r7, fp, pc}
   136ec:	mov	r0, #1
   136f0:	cmp	r5, #0
   136f4:	strh	r0, [r4, #128]	; 0x80
   136f8:	ldrh	r1, [r4, #132]	; 0x84
   136fc:	ldr	r2, [r4, #32]
   13700:	strh	r1, [r2, #34]	; 0x22
   13704:	strh	r7, [r4, #132]	; 0x84
   13708:	ldrh	r1, [r4, #164]	; 0xa4
   1370c:	ldr	r2, [r4, #32]
   13710:	strh	r1, [r2, #32]
   13714:	strh	r6, [r4, #164]	; 0xa4
   13718:	ldr	r1, [r4, #32]
   1371c:	ldr	r2, [r4, #144]	; 0x90
   13720:	str	r2, [r1, #20]
   13724:	ldr	r1, [r4, #32]
   13728:	ldr	r2, [r4, #152]	; 0x98
   1372c:	str	r2, [r1, #28]
   13730:	ldr	r3, [r4, #148]	; 0x94
   13734:	ldr	r1, [r4, #32]
   13738:	ldr	r2, [r4, #136]	; 0x88
   1373c:	ldr	r7, [r4, #168]	; 0xa8
   13740:	add	r6, r3, #1
   13744:	str	r2, [r4, #144]	; 0x90
   13748:	str	r6, [r4, #148]	; 0x94
   1374c:	str	r3, [r4, #152]	; 0x98
   13750:	str	r7, [r1, #16]
   13754:	movw	r1, #28904	; 0x70e8
   13758:	movt	r1, #1
   1375c:	movne	r1, r5
   13760:	ldr	r1, [r1]
   13764:	str	r1, [r4, #168]	; 0xa8
   13768:	ldr	r1, [r4, #32]
   1376c:	strh	r0, [r1, #14]
   13770:	mov	r0, #0
   13774:	pop	{r4, r5, r6, r7, fp, pc}
   13778:	push	{r4, r5, r6, r7, fp, lr}
   1377c:	add	fp, sp, #16
   13780:	sub	sp, sp, #8
   13784:	mov	r5, r1
   13788:	ldr	r1, [r0, #156]	; 0x9c
   1378c:	ldr	r2, [r0, #160]	; 0xa0
   13790:	mov	r4, r0
   13794:	add	r0, r1, #1
   13798:	cmp	r1, r2
   1379c:	str	r0, [r4, #156]	; 0x9c
   137a0:	bge	137b4 <flatcc_builder_start_buffer@@Base+0xf8>
   137a4:	ldr	r0, [r4, #32]
   137a8:	add	r0, r0, #36	; 0x24
   137ac:	str	r0, [r4, #32]
   137b0:	b	13848 <flatcc_builder_start_buffer@@Base+0x18c>
   137b4:	ldr	r2, [r4, #176]	; 0xb0
   137b8:	mvn	r6, #0
   137bc:	cmp	r2, #1
   137c0:	cmpge	r1, r2
   137c4:	bge	13880 <flatcc_builder_start_buffer@@Base+0x1c4>
   137c8:	add	r7, r0, r0, lsl #3
   137cc:	ldr	r0, [r4, #88]	; 0x58
   137d0:	lsl	r2, r7, #2
   137d4:	cmp	r2, r0
   137d8:	bls	13800 <flatcc_builder_start_buffer@@Base+0x144>
   137dc:	ldr	r0, [r4, #40]	; 0x28
   137e0:	ldr	ip, [r4, #48]	; 0x30
   137e4:	mov	r3, #4
   137e8:	add	r1, r4, #84	; 0x54
   137ec:	str	r3, [sp]
   137f0:	mov	r3, #0
   137f4:	blx	ip
   137f8:	cmp	r0, #0
   137fc:	bne	1388c <flatcc_builder_start_buffer@@Base+0x1d0>
   13800:	ldr	r1, [r4, #84]	; 0x54
   13804:	mvn	r0, #35	; 0x23
   13808:	add	r0, r0, r7, lsl #2
   1380c:	adds	r0, r0, r1
   13810:	str	r0, [r4, #32]
   13814:	beq	13880 <flatcc_builder_start_buffer@@Base+0x1c4>
   13818:	ldr	r1, [r4, #88]	; 0x58
   1381c:	movw	r3, #36409	; 0x8e39
   13820:	ldr	r2, [r4, #176]	; 0xb0
   13824:	movt	r3, #14563	; 0x38e3
   13828:	umull	r1, r3, r1, r3
   1382c:	cmp	r2, r3, lsr #3
   13830:	lsr	r1, r3, #3
   13834:	mov	r3, r1
   13838:	movlt	r3, r2
   1383c:	cmp	r2, #0
   13840:	movle	r3, r1
   13844:	str	r3, [r4, #160]	; 0xa0
   13848:	ldr	r1, [r4, #20]
   1384c:	mvn	r3, #3
   13850:	mov	r6, #0
   13854:	str	r1, [r0, #8]
   13858:	ldrh	r2, [r4, #130]	; 0x82
   1385c:	strh	r2, [r0, #12]
   13860:	strh	r5, [r4, #130]	; 0x82
   13864:	ldr	r2, [r4, #28]
   13868:	stm	r0, {r2, r3}
   1386c:	add	r0, r1, r2
   13870:	str	r6, [r4, #20]
   13874:	add	r0, r0, #7
   13878:	bic	r0, r0, #7
   1387c:	str	r0, [r4, #28]
   13880:	mov	r0, r6
   13884:	sub	sp, fp, #16
   13888:	pop	{r4, r5, r6, r7, fp, pc}
   1388c:	movw	r0, #33952	; 0x84a0
   13890:	movw	r1, #29434	; 0x72fa
   13894:	movw	r3, #33498	; 0x82da
   13898:	mov	r2, #308	; 0x134
   1389c:	movt	r0, #1
   138a0:	movt	r1, #1
   138a4:	movt	r3, #1
   138a8:	bl	124b0 <__assert_fail@plt>

000138ac <flatcc_builder_end_buffer@@Base>:
   138ac:	push	{r4, r5, r6, sl, fp, lr}
   138b0:	add	fp, sp, #16
   138b4:	sub	sp, sp, #8
   138b8:	mov	r4, r0
   138bc:	ldr	r0, [r0, #32]
   138c0:	ldrh	r0, [r0, #14]
   138c4:	cmp	r0, #1
   138c8:	bne	139bc <flatcc_builder_end_buffer@@Base+0x110>
   138cc:	mov	r3, r1
   138d0:	ldr	r1, [r4, #152]	; 0x98
   138d4:	ldrh	r0, [r4, #164]	; 0xa4
   138d8:	ldrh	r2, [r4, #132]	; 0x84
   138dc:	cmp	r1, #0
   138e0:	ldrh	r1, [r4, #128]	; 0x80
   138e4:	and	r0, r0, #2
   138e8:	orrne	r0, r0, #1
   138ec:	cmp	r1, r2
   138f0:	movcc	r1, r2
   138f4:	strhcc	r2, [r4, #128]	; 0x80
   138f8:	str	r0, [sp, #4]
   138fc:	mov	r0, r4
   13900:	str	r1, [sp]
   13904:	add	r1, r4, #168	; 0xa8
   13908:	bl	13398 <flatcc_builder_create_buffer@@Base>
   1390c:	mov	r6, r0
   13910:	cmp	r0, #0
   13914:	beq	139b0 <flatcc_builder_end_buffer@@Base+0x104>
   13918:	ldr	r1, [r4, #32]
   1391c:	ldr	r0, [r4, #16]
   13920:	ldr	r2, [r4, #20]
   13924:	ldr	r3, [r1, #20]
   13928:	str	r3, [r4, #144]	; 0x90
   1392c:	ldr	r3, [r1, #28]
   13930:	str	r3, [r4, #152]	; 0x98
   13934:	ldr	r3, [r1, #16]
   13938:	str	r3, [r4, #168]	; 0xa8
   1393c:	ldrh	r1, [r1, #32]
   13940:	strh	r1, [r4, #164]	; 0xa4
   13944:	mov	r1, #0
   13948:	bl	12480 <memset@plt>
   1394c:	ldr	r0, [r4, #32]
   13950:	ldr	r1, [r4, #60]	; 0x3c
   13954:	ldr	r2, [r4, #64]	; 0x40
   13958:	ldr	r3, [r0, #8]
   1395c:	str	r3, [r4, #20]
   13960:	ldr	r3, [r0]
   13964:	str	r3, [r4, #28]
   13968:	add	r1, r1, r3
   1396c:	ldr	r5, [r0, #4]
   13970:	str	r1, [r4, #16]
   13974:	sub	r1, r2, r3
   13978:	cmp	r1, r5
   1397c:	movhi	r1, r5
   13980:	str	r1, [r4, #24]
   13984:	ldrh	r1, [r4, #130]	; 0x82
   13988:	ldrh	r2, [r4, #128]	; 0x80
   1398c:	cmp	r2, r1
   13990:	strhcc	r1, [r4, #128]	; 0x80
   13994:	ldrh	r1, [r0, #12]
   13998:	sub	r0, r0, #36	; 0x24
   1399c:	str	r0, [r4, #32]
   139a0:	strh	r1, [r4, #130]	; 0x82
   139a4:	ldr	r0, [r4, #156]	; 0x9c
   139a8:	sub	r0, r0, #1
   139ac:	str	r0, [r4, #156]	; 0x9c
   139b0:	mov	r0, r6
   139b4:	sub	sp, fp, #16
   139b8:	pop	{r4, r5, r6, sl, fp, pc}
   139bc:	movw	r0, #29993	; 0x7529
   139c0:	movw	r1, #29434	; 0x72fa
   139c4:	movw	r3, #30037	; 0x7555
   139c8:	movw	r2, #838	; 0x346
   139cc:	movt	r0, #1
   139d0:	movt	r1, #1
   139d4:	movt	r3, #1
   139d8:	bl	124b0 <__assert_fail@plt>

000139dc <flatcc_builder_start_struct@@Base>:
   139dc:	push	{r4, r5, r6, r7, fp, lr}
   139e0:	add	fp, sp, #16
   139e4:	mov	r6, r1
   139e8:	mov	r1, r2
   139ec:	mov	r4, r0
   139f0:	bl	13778 <flatcc_builder_start_buffer@@Base+0xbc>
   139f4:	mov	r5, #0
   139f8:	cmp	r0, #0
   139fc:	bne	13a6c <flatcc_builder_start_struct@@Base+0x90>
   13a00:	ldr	r1, [r4, #32]
   13a04:	mov	r0, #2
   13a08:	strh	r0, [r1, #14]
   13a0c:	ldr	r2, [r4, #28]
   13a10:	ldr	r0, [r4, #60]	; 0x3c
   13a14:	ldr	r3, [r4, #64]	; 0x40
   13a18:	add	r0, r0, r2
   13a1c:	sub	r2, r3, r2
   13a20:	mvn	r3, #3
   13a24:	cmn	r2, #4
   13a28:	str	r0, [r4, #16]
   13a2c:	movcs	r2, r3
   13a30:	str	r2, [r4, #24]
   13a34:	str	r3, [r1, #4]
   13a38:	ldr	r7, [r4, #20]
   13a3c:	add	r1, r7, r6
   13a40:	cmp	r1, r2
   13a44:	str	r1, [r4, #20]
   13a48:	bcc	13a68 <flatcc_builder_start_struct@@Base+0x8c>
   13a4c:	add	r1, r1, #1
   13a50:	mov	r0, r4
   13a54:	mvn	r2, #3
   13a58:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   13a5c:	cmp	r0, #0
   13a60:	bne	13a6c <flatcc_builder_start_struct@@Base+0x90>
   13a64:	ldr	r0, [r4, #16]
   13a68:	add	r5, r0, r7
   13a6c:	mov	r0, r5
   13a70:	pop	{r4, r5, r6, r7, fp, pc}

00013a74 <flatcc_builder_struct_edit@@Base>:
   13a74:	ldr	r0, [r0, #16]
   13a78:	bx	lr

00013a7c <flatcc_builder_end_struct@@Base>:
   13a7c:	push	{r4, r5, fp, lr}
   13a80:	add	fp, sp, #8
   13a84:	mov	r4, r0
   13a88:	ldr	r0, [r0, #32]
   13a8c:	ldrh	r0, [r0, #14]
   13a90:	cmp	r0, #2
   13a94:	bne	13b34 <flatcc_builder_end_struct@@Base+0xb8>
   13a98:	ldrh	r3, [r4, #130]	; 0x82
   13a9c:	ldr	r1, [r4, #16]
   13aa0:	ldr	r2, [r4, #20]
   13aa4:	mov	r0, r4
   13aa8:	bl	135a0 <flatcc_builder_create_struct@@Base>
   13aac:	mov	r5, r0
   13ab0:	cmp	r0, #0
   13ab4:	beq	13b2c <flatcc_builder_end_struct@@Base+0xb0>
   13ab8:	ldr	r0, [r4, #16]
   13abc:	ldr	r2, [r4, #20]
   13ac0:	mov	r1, #0
   13ac4:	bl	12480 <memset@plt>
   13ac8:	ldr	r0, [r4, #32]
   13acc:	ldr	r1, [r4, #60]	; 0x3c
   13ad0:	ldr	ip, [r4, #64]	; 0x40
   13ad4:	ldr	r3, [r0, #8]
   13ad8:	str	r3, [r4, #20]
   13adc:	ldr	r3, [r0]
   13ae0:	str	r3, [r4, #28]
   13ae4:	add	r1, r1, r3
   13ae8:	ldr	r2, [r0, #4]
   13aec:	str	r1, [r4, #16]
   13af0:	sub	r1, ip, r3
   13af4:	cmp	r1, r2
   13af8:	movhi	r1, r2
   13afc:	str	r1, [r4, #24]
   13b00:	ldrh	r1, [r4, #130]	; 0x82
   13b04:	ldrh	r2, [r4, #128]	; 0x80
   13b08:	cmp	r2, r1
   13b0c:	strhcc	r1, [r4, #128]	; 0x80
   13b10:	ldrh	r1, [r0, #12]
   13b14:	sub	r0, r0, #36	; 0x24
   13b18:	str	r0, [r4, #32]
   13b1c:	strh	r1, [r4, #130]	; 0x82
   13b20:	ldr	r0, [r4, #156]	; 0x9c
   13b24:	sub	r0, r0, #1
   13b28:	str	r0, [r4, #156]	; 0x9c
   13b2c:	mov	r0, r5
   13b30:	pop	{r4, r5, fp, pc}
   13b34:	movw	r0, #30126	; 0x75ae
   13b38:	movw	r1, #29434	; 0x72fa
   13b3c:	movw	r3, #30170	; 0x75da
   13b40:	mov	r2, #872	; 0x368
   13b44:	movt	r0, #1
   13b48:	movt	r1, #1
   13b4c:	movt	r3, #1
   13b50:	bl	124b0 <__assert_fail@plt>

00013b54 <flatcc_builder_extend_vector@@Base>:
   13b54:	push	{r4, r5, fp, lr}
   13b58:	add	fp, sp, #8
   13b5c:	mov	r4, r0
   13b60:	ldr	r0, [r0, #32]
   13b64:	ldr	r2, [r0, #20]
   13b68:	adds	r2, r2, r1
   13b6c:	bcs	13bcc <flatcc_builder_extend_vector@@Base+0x78>
   13b70:	ldr	r3, [r0, #24]
   13b74:	cmp	r2, r3
   13b78:	bhi	13bcc <flatcc_builder_extend_vector@@Base+0x78>
   13b7c:	str	r2, [r0, #20]
   13b80:	ldr	r0, [r4, #32]
   13b84:	ldr	r5, [r4, #20]
   13b88:	ldr	r2, [r4, #24]
   13b8c:	ldr	r0, [r0, #16]
   13b90:	mla	r0, r0, r1, r5
   13b94:	cmp	r0, r2
   13b98:	str	r0, [r4, #20]
   13b9c:	bcc	13bc0 <flatcc_builder_extend_vector@@Base+0x6c>
   13ba0:	add	r1, r0, #1
   13ba4:	mov	r0, r4
   13ba8:	mvn	r2, #3
   13bac:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   13bb0:	mov	r1, r0
   13bb4:	mov	r0, #0
   13bb8:	cmp	r1, #0
   13bbc:	popne	{r4, r5, fp, pc}
   13bc0:	ldr	r0, [r4, #16]
   13bc4:	add	r0, r0, r5
   13bc8:	pop	{r4, r5, fp, pc}
   13bcc:	movw	r0, #33705	; 0x83a9
   13bd0:	movw	r1, #29434	; 0x72fa
   13bd4:	movw	r3, #33732	; 0x83c4
   13bd8:	mov	r2, #892	; 0x37c
   13bdc:	movt	r0, #1
   13be0:	movt	r1, #1
   13be4:	movt	r3, #1
   13be8:	bl	124b0 <__assert_fail@plt>

00013bec <flatcc_builder_vector_push@@Base>:
   13bec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bf0:	add	fp, sp, #24
   13bf4:	mov	r5, r0
   13bf8:	ldr	r0, [r0, #32]
   13bfc:	mov	r8, r1
   13c00:	ldrh	r1, [r0, #14]
   13c04:	cmp	r1, #4
   13c08:	bne	13c8c <flatcc_builder_vector_push@@Base+0xa0>
   13c0c:	ldr	r1, [r0, #20]
   13c10:	ldr	r2, [r0, #24]
   13c14:	cmp	r1, r2
   13c18:	bhi	13ca4 <flatcc_builder_vector_push@@Base+0xb8>
   13c1c:	add	r1, r1, #1
   13c20:	str	r1, [r0, #20]
   13c24:	ldr	r0, [r5, #32]
   13c28:	ldr	r4, [r5, #20]
   13c2c:	ldr	r1, [r5, #24]
   13c30:	ldr	r6, [r0, #16]
   13c34:	add	r0, r4, r6
   13c38:	cmp	r0, r1
   13c3c:	str	r0, [r5, #20]
   13c40:	bcc	13c60 <flatcc_builder_vector_push@@Base+0x74>
   13c44:	add	r1, r0, #1
   13c48:	mov	r0, r5
   13c4c:	mvn	r2, #3
   13c50:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   13c54:	mov	r7, #0
   13c58:	cmp	r0, #0
   13c5c:	bne	13c84 <flatcc_builder_vector_push@@Base+0x98>
   13c60:	ldr	r0, [r5, #16]
   13c64:	adds	r7, r0, r4
   13c68:	beq	13c80 <flatcc_builder_vector_push@@Base+0x94>
   13c6c:	mov	r0, r7
   13c70:	mov	r1, r8
   13c74:	mov	r2, r6
   13c78:	bl	123fc <memcpy@plt>
   13c7c:	b	13c84 <flatcc_builder_vector_push@@Base+0x98>
   13c80:	mov	r7, #0
   13c84:	mov	r0, r7
   13c88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c8c:	movw	r0, #30237	; 0x761d
   13c90:	movw	r1, #29434	; 0x72fa
   13c94:	movw	r3, #30281	; 0x7649
   13c98:	movw	r2, #907	; 0x38b
   13c9c:	movt	r0, #1
   13ca0:	b	13cb8 <flatcc_builder_vector_push@@Base+0xcc>
   13ca4:	movw	r0, #30348	; 0x768c
   13ca8:	movw	r1, #29434	; 0x72fa
   13cac:	movw	r3, #30281	; 0x7649
   13cb0:	mov	r2, #908	; 0x38c
   13cb4:	movt	r0, #1
   13cb8:	movt	r1, #1
   13cbc:	movt	r3, #1
   13cc0:	bl	124b0 <__assert_fail@plt>

00013cc4 <flatcc_builder_append_vector@@Base>:
   13cc4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13cc8:	add	fp, sp, #24
   13ccc:	mov	r6, r0
   13cd0:	ldr	r0, [r0, #32]
   13cd4:	mov	r8, r1
   13cd8:	ldrh	r1, [r0, #14]
   13cdc:	cmp	r1, #4
   13ce0:	bne	13d8c <flatcc_builder_append_vector@@Base+0xc8>
   13ce4:	ldr	r1, [r0, #20]
   13ce8:	mov	r9, r2
   13cec:	adds	r1, r1, r2
   13cf0:	bcs	13d6c <flatcc_builder_append_vector@@Base+0xa8>
   13cf4:	ldr	r2, [r0, #24]
   13cf8:	cmp	r1, r2
   13cfc:	bhi	13d6c <flatcc_builder_append_vector@@Base+0xa8>
   13d00:	str	r1, [r0, #20]
   13d04:	ldr	r0, [r6, #32]
   13d08:	ldr	r4, [r6, #20]
   13d0c:	ldr	r1, [r6, #24]
   13d10:	ldr	r5, [r0, #16]
   13d14:	mla	r0, r5, r9, r4
   13d18:	cmp	r0, r1
   13d1c:	str	r0, [r6, #20]
   13d20:	bcc	13d40 <flatcc_builder_append_vector@@Base+0x7c>
   13d24:	add	r1, r0, #1
   13d28:	mov	r0, r6
   13d2c:	mvn	r2, #3
   13d30:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   13d34:	mov	r7, #0
   13d38:	cmp	r0, #0
   13d3c:	bne	13d64 <flatcc_builder_append_vector@@Base+0xa0>
   13d40:	ldr	r0, [r6, #16]
   13d44:	adds	r7, r0, r4
   13d48:	beq	13d60 <flatcc_builder_append_vector@@Base+0x9c>
   13d4c:	mul	r2, r5, r9
   13d50:	mov	r0, r7
   13d54:	mov	r1, r8
   13d58:	bl	123fc <memcpy@plt>
   13d5c:	b	13d64 <flatcc_builder_append_vector@@Base+0xa0>
   13d60:	mov	r7, #0
   13d64:	mov	r0, r7
   13d68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d6c:	movw	r0, #33705	; 0x83a9
   13d70:	movw	r1, #29434	; 0x72fa
   13d74:	movw	r3, #33732	; 0x83c4
   13d78:	mov	r2, #892	; 0x37c
   13d7c:	movt	r0, #1
   13d80:	movt	r1, #1
   13d84:	movt	r3, #1
   13d88:	bl	124b0 <__assert_fail@plt>
   13d8c:	movw	r0, #30237	; 0x761d
   13d90:	movw	r1, #29434	; 0x72fa
   13d94:	movw	r3, #30409	; 0x76c9
   13d98:	movw	r2, #915	; 0x393
   13d9c:	movt	r0, #1
   13da0:	movt	r1, #1
   13da4:	movt	r3, #1
   13da8:	bl	124b0 <__assert_fail@plt>

00013dac <flatcc_builder_extend_offset_vector@@Base>:
   13dac:	push	{r4, r5, fp, lr}
   13db0:	add	fp, sp, #8
   13db4:	mov	r4, r0
   13db8:	ldr	r0, [r0, #32]
   13dbc:	ldr	r2, [r0, #20]
   13dc0:	adds	r2, r2, r1
   13dc4:	cmpcc	r2, #1073741824	; 0x40000000
   13dc8:	bcc	13dec <flatcc_builder_extend_offset_vector@@Base+0x40>
   13dcc:	movw	r0, #33705	; 0x83a9
   13dd0:	movw	r1, #29434	; 0x72fa
   13dd4:	movw	r3, #33732	; 0x83c4
   13dd8:	mov	r2, #892	; 0x37c
   13ddc:	movt	r0, #1
   13de0:	movt	r1, #1
   13de4:	movt	r3, #1
   13de8:	bl	124b0 <__assert_fail@plt>
   13dec:	str	r2, [r0, #20]
   13df0:	ldr	r5, [r4, #20]
   13df4:	ldr	r2, [r4, #24]
   13df8:	add	r0, r5, r1, lsl #2
   13dfc:	cmp	r0, r2
   13e00:	str	r0, [r4, #20]
   13e04:	bcc	13e28 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   13e08:	add	r1, r0, #1
   13e0c:	mov	r0, r4
   13e10:	mvn	r2, #3
   13e14:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   13e18:	mov	r1, r0
   13e1c:	mov	r0, #0
   13e20:	cmp	r1, #0
   13e24:	popne	{r4, r5, fp, pc}
   13e28:	ldr	r0, [r4, #16]
   13e2c:	add	r0, r0, r5
   13e30:	pop	{r4, r5, fp, pc}

00013e34 <flatcc_builder_offset_vector_push@@Base>:
   13e34:	push	{r4, r5, r6, r7, fp, lr}
   13e38:	add	fp, sp, #16
   13e3c:	mov	r6, r0
   13e40:	ldr	r0, [r0, #32]
   13e44:	mov	r4, r1
   13e48:	ldrh	r1, [r0, #14]
   13e4c:	cmp	r1, #5
   13e50:	bne	13eb4 <flatcc_builder_offset_vector_push@@Base+0x80>
   13e54:	ldr	r1, [r0, #20]
   13e58:	mov	r5, #0
   13e5c:	cmn	r1, #-1073741823	; 0xc0000001
   13e60:	beq	13eac <flatcc_builder_offset_vector_push@@Base+0x78>
   13e64:	add	r1, r1, #1
   13e68:	str	r1, [r0, #20]
   13e6c:	ldr	r7, [r6, #20]
   13e70:	ldr	r0, [r6, #24]
   13e74:	add	r1, r7, #4
   13e78:	cmp	r1, r0
   13e7c:	str	r1, [r6, #20]
   13e80:	bcc	13e9c <flatcc_builder_offset_vector_push@@Base+0x68>
   13e84:	add	r1, r7, #5
   13e88:	mov	r0, r6
   13e8c:	mvn	r2, #3
   13e90:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   13e94:	cmp	r0, #0
   13e98:	bne	13eac <flatcc_builder_offset_vector_push@@Base+0x78>
   13e9c:	ldr	r0, [r6, #16]
   13ea0:	adds	r0, r0, r7
   13ea4:	movne	r5, r0
   13ea8:	strne	r4, [r0]
   13eac:	mov	r0, r5
   13eb0:	pop	{r4, r5, r6, r7, fp, pc}
   13eb4:	movw	r0, #30486	; 0x7716
   13eb8:	movw	r1, #29434	; 0x72fa
   13ebc:	movw	r3, #30537	; 0x7749
   13ec0:	movw	r2, #934	; 0x3a6
   13ec4:	movt	r0, #1
   13ec8:	movt	r1, #1
   13ecc:	movt	r3, #1
   13ed0:	bl	124b0 <__assert_fail@plt>

00013ed4 <flatcc_builder_append_offset_vector@@Base>:
   13ed4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ed8:	add	fp, sp, #24
   13edc:	mov	r6, r0
   13ee0:	ldr	r0, [r0, #32]
   13ee4:	mov	r8, r1
   13ee8:	ldrh	r1, [r0, #14]
   13eec:	cmp	r1, #5
   13ef0:	bne	13f8c <flatcc_builder_append_offset_vector@@Base+0xb8>
   13ef4:	ldr	r1, [r0, #20]
   13ef8:	mov	r5, r2
   13efc:	adds	r1, r1, r2
   13f00:	cmpcc	r1, #1073741824	; 0x40000000
   13f04:	bcc	13f28 <flatcc_builder_append_offset_vector@@Base+0x54>
   13f08:	movw	r0, #33705	; 0x83a9
   13f0c:	movw	r1, #29434	; 0x72fa
   13f10:	movw	r3, #33732	; 0x83c4
   13f14:	mov	r2, #892	; 0x37c
   13f18:	movt	r0, #1
   13f1c:	movt	r1, #1
   13f20:	movt	r3, #1
   13f24:	bl	124b0 <__assert_fail@plt>
   13f28:	str	r1, [r0, #20]
   13f2c:	ldr	r4, [r6, #20]
   13f30:	ldr	r1, [r6, #24]
   13f34:	add	r0, r4, r5, lsl #2
   13f38:	cmp	r0, r1
   13f3c:	str	r0, [r6, #20]
   13f40:	bcc	13f60 <flatcc_builder_append_offset_vector@@Base+0x8c>
   13f44:	add	r1, r0, #1
   13f48:	mov	r0, r6
   13f4c:	mvn	r2, #3
   13f50:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   13f54:	mov	r7, #0
   13f58:	cmp	r0, #0
   13f5c:	bne	13f84 <flatcc_builder_append_offset_vector@@Base+0xb0>
   13f60:	ldr	r0, [r6, #16]
   13f64:	adds	r7, r0, r4
   13f68:	beq	13f80 <flatcc_builder_append_offset_vector@@Base+0xac>
   13f6c:	lsl	r2, r5, #2
   13f70:	mov	r0, r7
   13f74:	mov	r1, r8
   13f78:	bl	123fc <memcpy@plt>
   13f7c:	b	13f84 <flatcc_builder_append_offset_vector@@Base+0xb0>
   13f80:	mov	r7, #0
   13f84:	mov	r0, r7
   13f88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f8c:	movw	r0, #30486	; 0x7716
   13f90:	movw	r1, #29434	; 0x72fa
   13f94:	movw	r3, #30635	; 0x77ab
   13f98:	mov	r2, #948	; 0x3b4
   13f9c:	movt	r0, #1
   13fa0:	movt	r1, #1
   13fa4:	movt	r3, #1
   13fa8:	bl	124b0 <__assert_fail@plt>

00013fac <flatcc_builder_extend_string@@Base>:
   13fac:	push	{r4, r5, fp, lr}
   13fb0:	add	fp, sp, #8
   13fb4:	mov	r4, r0
   13fb8:	ldr	r0, [r0, #32]
   13fbc:	ldrh	r2, [r0, #14]
   13fc0:	cmp	r2, #6
   13fc4:	bne	1401c <flatcc_builder_extend_string@@Base+0x70>
   13fc8:	ldr	r2, [r0, #20]
   13fcc:	adds	r2, r2, r1
   13fd0:	bcs	1403c <flatcc_builder_extend_string@@Base+0x90>
   13fd4:	str	r2, [r0, #20]
   13fd8:	ldr	r5, [r4, #20]
   13fdc:	ldr	r2, [r4, #24]
   13fe0:	add	r0, r5, r1
   13fe4:	cmp	r0, r2
   13fe8:	str	r0, [r4, #20]
   13fec:	bcc	14010 <flatcc_builder_extend_string@@Base+0x64>
   13ff0:	add	r1, r0, #1
   13ff4:	mov	r0, r4
   13ff8:	mvn	r2, #3
   13ffc:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   14000:	mov	r1, r0
   14004:	mov	r0, #0
   14008:	cmp	r1, #0
   1400c:	popne	{r4, r5, fp, pc}
   14010:	ldr	r0, [r4, #16]
   14014:	add	r0, r0, r5
   14018:	pop	{r4, r5, fp, pc}
   1401c:	movw	r0, #30751	; 0x781f
   14020:	movw	r1, #29434	; 0x72fa
   14024:	movw	r3, #30795	; 0x784b
   14028:	movw	r2, #957	; 0x3bd
   1402c:	movt	r0, #1
   14030:	movt	r1, #1
   14034:	movt	r3, #1
   14038:	bl	124b0 <__assert_fail@plt>
   1403c:	movw	r0, #33705	; 0x83a9
   14040:	movw	r1, #29434	; 0x72fa
   14044:	movw	r3, #33732	; 0x83c4
   14048:	mov	r2, #892	; 0x37c
   1404c:	movt	r0, #1
   14050:	movt	r1, #1
   14054:	movt	r3, #1
   14058:	bl	124b0 <__assert_fail@plt>

0001405c <flatcc_builder_append_string@@Base>:
   1405c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14060:	add	fp, sp, #24
   14064:	mov	r6, r0
   14068:	ldr	r0, [r0, #32]
   1406c:	mov	r8, r1
   14070:	ldrh	r1, [r0, #14]
   14074:	cmp	r1, #6
   14078:	bne	140f0 <flatcc_builder_append_string@@Base+0x94>
   1407c:	ldr	r1, [r0, #20]
   14080:	mov	r4, r2
   14084:	adds	r1, r1, r2
   14088:	bcs	14110 <flatcc_builder_append_string@@Base+0xb4>
   1408c:	str	r1, [r0, #20]
   14090:	ldr	r5, [r6, #20]
   14094:	ldr	r1, [r6, #24]
   14098:	add	r0, r5, r4
   1409c:	cmp	r0, r1
   140a0:	str	r0, [r6, #20]
   140a4:	bcc	140c4 <flatcc_builder_append_string@@Base+0x68>
   140a8:	add	r1, r0, #1
   140ac:	mov	r0, r6
   140b0:	mvn	r2, #3
   140b4:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   140b8:	mov	r7, #0
   140bc:	cmp	r0, #0
   140c0:	bne	140e8 <flatcc_builder_append_string@@Base+0x8c>
   140c4:	ldr	r0, [r6, #16]
   140c8:	adds	r7, r0, r5
   140cc:	beq	140e4 <flatcc_builder_append_string@@Base+0x88>
   140d0:	mov	r0, r7
   140d4:	mov	r1, r8
   140d8:	mov	r2, r4
   140dc:	bl	123fc <memcpy@plt>
   140e0:	b	140e8 <flatcc_builder_append_string@@Base+0x8c>
   140e4:	mov	r7, #0
   140e8:	mov	r0, r7
   140ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140f0:	movw	r0, #30751	; 0x781f
   140f4:	movw	r1, #29434	; 0x72fa
   140f8:	movw	r3, #30858	; 0x788a
   140fc:	movw	r2, #966	; 0x3c6
   14100:	movt	r0, #1
   14104:	movt	r1, #1
   14108:	movt	r3, #1
   1410c:	bl	124b0 <__assert_fail@plt>
   14110:	movw	r0, #33705	; 0x83a9
   14114:	movw	r1, #29434	; 0x72fa
   14118:	movw	r3, #33732	; 0x83c4
   1411c:	mov	r2, #892	; 0x37c
   14120:	movt	r0, #1
   14124:	movt	r1, #1
   14128:	movt	r3, #1
   1412c:	bl	124b0 <__assert_fail@plt>

00014130 <flatcc_builder_append_string_str@@Base>:
   14130:	push	{r4, r5, fp, lr}
   14134:	add	fp, sp, #8
   14138:	mov	r5, r0
   1413c:	mov	r0, r1
   14140:	mov	r4, r1
   14144:	bl	1245c <strlen@plt>
   14148:	mov	r2, r0
   1414c:	mov	r0, r5
   14150:	mov	r1, r4
   14154:	pop	{r4, r5, fp, lr}
   14158:	b	1405c <flatcc_builder_append_string@@Base>

0001415c <flatcc_builder_append_string_strn@@Base>:
   1415c:	push	{r4, r5, r6, sl, fp, lr}
   14160:	add	fp, sp, #16
   14164:	mov	r6, r0
   14168:	mov	r5, r1
   1416c:	mov	r0, r1
   14170:	mov	r1, #0
   14174:	mov	r4, r2
   14178:	bl	1248c <memchr@plt>
   1417c:	cmp	r0, #0
   14180:	mov	r1, r5
   14184:	subne	r4, r0, r5
   14188:	mov	r0, r6
   1418c:	mov	r2, r4
   14190:	pop	{r4, r5, r6, sl, fp, lr}
   14194:	b	1405c <flatcc_builder_append_string@@Base>

00014198 <flatcc_builder_truncate_vector@@Base>:
   14198:	push	{fp, lr}
   1419c:	mov	fp, sp
   141a0:	ldr	r2, [r0, #32]
   141a4:	ldrh	r3, [r2, #14]
   141a8:	cmp	r3, #4
   141ac:	bne	141f4 <flatcc_builder_truncate_vector@@Base+0x5c>
   141b0:	ldr	r3, [r2, #20]
   141b4:	cmp	r3, r1
   141b8:	bcc	1420c <flatcc_builder_truncate_vector@@Base+0x74>
   141bc:	sub	r3, r3, r1
   141c0:	str	r3, [r2, #20]
   141c4:	ldr	r2, [r0, #32]
   141c8:	ldr	r3, [r0, #20]
   141cc:	ldr	ip, [r0, #16]
   141d0:	ldr	r2, [r2, #16]
   141d4:	mls	r3, r2, r1, r3
   141d8:	mul	r2, r2, r1
   141dc:	mov	r1, #0
   141e0:	str	r3, [r0, #20]
   141e4:	add	r0, ip, r3
   141e8:	bl	12480 <memset@plt>
   141ec:	mov	r0, #0
   141f0:	pop	{fp, pc}
   141f4:	movw	r0, #30237	; 0x761d
   141f8:	movw	r1, #29434	; 0x72fa
   141fc:	movw	r3, #30935	; 0x78d7
   14200:	movw	r2, #985	; 0x3d9
   14204:	movt	r0, #1
   14208:	b	14220 <flatcc_builder_truncate_vector@@Base+0x88>
   1420c:	movw	r0, #30998	; 0x7916
   14210:	movw	r1, #29434	; 0x72fa
   14214:	movw	r3, #30935	; 0x78d7
   14218:	movw	r2, #986	; 0x3da
   1421c:	movt	r0, #1
   14220:	movt	r1, #1
   14224:	movt	r3, #1
   14228:	bl	124b0 <__assert_fail@plt>

0001422c <flatcc_builder_truncate_offset_vector@@Base>:
   1422c:	push	{fp, lr}
   14230:	mov	fp, sp
   14234:	ldr	r2, [r0, #32]
   14238:	ldrh	r3, [r2, #14]
   1423c:	cmp	r3, #5
   14240:	bne	14288 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14244:	ldr	r3, [r2, #20]
   14248:	cmp	r3, r1
   1424c:	bcc	142a0 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   14250:	sub	r3, r3, r1
   14254:	str	r3, [r2, #20]
   14258:	ldr	r2, [r0, #32]
   1425c:	ldr	r3, [r0, #20]
   14260:	ldr	ip, [r0, #16]
   14264:	ldr	r2, [r2, #16]
   14268:	mls	r3, r2, r1, r3
   1426c:	mul	r2, r2, r1
   14270:	mov	r1, #0
   14274:	str	r3, [r0, #20]
   14278:	add	r0, ip, r3
   1427c:	bl	12480 <memset@plt>
   14280:	mov	r0, #0
   14284:	pop	{fp, pc}
   14288:	movw	r0, #30486	; 0x7716
   1428c:	movw	r1, #29434	; 0x72fa
   14290:	movw	r3, #31034	; 0x793a
   14294:	movw	r2, #994	; 0x3e2
   14298:	movt	r0, #1
   1429c:	b	142b4 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   142a0:	movw	r0, #31104	; 0x7980
   142a4:	movw	r1, #29434	; 0x72fa
   142a8:	movw	r3, #31034	; 0x793a
   142ac:	movw	r2, #995	; 0x3e3
   142b0:	movt	r0, #1
   142b4:	movt	r1, #1
   142b8:	movt	r3, #1
   142bc:	bl	124b0 <__assert_fail@plt>

000142c0 <flatcc_builder_truncate_string@@Base>:
   142c0:	push	{fp, lr}
   142c4:	mov	fp, sp
   142c8:	mov	r2, r1
   142cc:	ldr	r1, [r0, #32]
   142d0:	ldrh	r3, [r1, #14]
   142d4:	cmp	r3, #6
   142d8:	bne	14314 <flatcc_builder_truncate_string@@Base+0x54>
   142dc:	ldr	r3, [r1, #20]
   142e0:	cmp	r3, r2
   142e4:	bcc	1432c <flatcc_builder_truncate_string@@Base+0x6c>
   142e8:	sub	r3, r3, r2
   142ec:	str	r3, [r1, #20]
   142f0:	ldr	r3, [r0, #20]
   142f4:	ldr	r1, [r0, #16]
   142f8:	sub	r3, r3, r2
   142fc:	str	r3, [r0, #20]
   14300:	add	r0, r1, r3
   14304:	mov	r1, #0
   14308:	bl	12480 <memset@plt>
   1430c:	mov	r0, #0
   14310:	pop	{fp, pc}
   14314:	movw	r0, #30751	; 0x781f
   14318:	movw	r1, #29434	; 0x72fa
   1431c:	movw	r3, #31163	; 0x79bb
   14320:	movw	r2, #1003	; 0x3eb
   14324:	movt	r0, #1
   14328:	b	14340 <flatcc_builder_truncate_string@@Base+0x80>
   1432c:	movw	r0, #31226	; 0x79fa
   14330:	movw	r1, #29434	; 0x72fa
   14334:	movw	r3, #31163	; 0x79bb
   14338:	mov	r2, #1004	; 0x3ec
   1433c:	movt	r0, #1
   14340:	movt	r1, #1
   14344:	movt	r3, #1
   14348:	bl	124b0 <__assert_fail@plt>

0001434c <flatcc_builder_start_vector@@Base>:
   1434c:	push	{r4, r5, r6, r7, fp, lr}
   14350:	add	fp, sp, #16
   14354:	mov	r7, #4
   14358:	cmp	r2, #4
   1435c:	mov	r6, r1
   14360:	mov	r5, r3
   14364:	mov	r4, r0
   14368:	movls	r2, r7
   1436c:	mov	r1, r2
   14370:	bl	13778 <flatcc_builder_start_buffer@@Base+0xbc>
   14374:	mov	r1, r0
   14378:	mvn	r0, #0
   1437c:	cmp	r1, #0
   14380:	popne	{r4, r5, r6, r7, fp, pc}
   14384:	ldr	r0, [r4, #32]
   14388:	str	r6, [r0, #16]
   1438c:	mov	r0, #0
   14390:	ldr	r1, [r4, #32]
   14394:	str	r0, [r1, #20]
   14398:	ldr	r1, [r4, #32]
   1439c:	str	r5, [r1, #24]
   143a0:	ldr	r1, [r4, #32]
   143a4:	strh	r7, [r1, #14]
   143a8:	ldr	r2, [r4, #28]
   143ac:	ldr	r3, [r4, #60]	; 0x3c
   143b0:	ldr	r7, [r4, #64]	; 0x40
   143b4:	add	r3, r3, r2
   143b8:	sub	r2, r7, r2
   143bc:	str	r3, [r4, #16]
   143c0:	mvn	r3, #3
   143c4:	cmn	r2, #4
   143c8:	movcs	r2, r3
   143cc:	str	r2, [r4, #24]
   143d0:	str	r3, [r1, #4]
   143d4:	pop	{r4, r5, r6, r7, fp, pc}

000143d8 <flatcc_builder_start_offset_vector@@Base>:
   143d8:	push	{r4, r5, fp, lr}
   143dc:	add	fp, sp, #8
   143e0:	mov	r1, #4
   143e4:	mov	r4, r0
   143e8:	mov	r5, #4
   143ec:	bl	13778 <flatcc_builder_start_buffer@@Base+0xbc>
   143f0:	mov	r1, r0
   143f4:	mvn	r0, #0
   143f8:	cmp	r1, #0
   143fc:	popne	{r4, r5, fp, pc}
   14400:	ldr	r0, [r4, #32]
   14404:	mov	r2, #5
   14408:	str	r5, [r0, #16]
   1440c:	mov	r0, #0
   14410:	ldr	r1, [r4, #32]
   14414:	str	r0, [r1, #20]
   14418:	ldr	r1, [r4, #32]
   1441c:	strh	r2, [r1, #14]
   14420:	ldr	r2, [r4, #28]
   14424:	ldr	r3, [r4, #60]	; 0x3c
   14428:	ldr	r5, [r4, #64]	; 0x40
   1442c:	add	r3, r3, r2
   14430:	sub	r2, r5, r2
   14434:	str	r3, [r4, #16]
   14438:	mvn	r3, #3
   1443c:	cmn	r2, #4
   14440:	movcs	r2, r3
   14444:	str	r2, [r4, #24]
   14448:	str	r3, [r1, #4]
   1444c:	pop	{r4, r5, fp, pc}

00014450 <flatcc_builder_create_offset_vector@@Base>:
   14450:	push	{r4, r5, r6, sl, fp, lr}
   14454:	add	fp, sp, #16
   14458:	mov	r6, r2
   1445c:	mov	r5, r1
   14460:	mov	r4, r0
   14464:	bl	143d8 <flatcc_builder_start_offset_vector@@Base>
   14468:	cmp	r0, #0
   1446c:	beq	14478 <flatcc_builder_create_offset_vector@@Base+0x28>
   14470:	mov	r0, #0
   14474:	pop	{r4, r5, r6, sl, fp, pc}
   14478:	mov	r0, r4
   1447c:	mov	r1, r6
   14480:	bl	13dac <flatcc_builder_extend_offset_vector@@Base>
   14484:	cmp	r0, #0
   14488:	beq	14470 <flatcc_builder_create_offset_vector@@Base+0x20>
   1448c:	lsl	r2, r6, #2
   14490:	mov	r1, r5
   14494:	bl	123fc <memcpy@plt>
   14498:	mov	r0, r4
   1449c:	pop	{r4, r5, r6, sl, fp, lr}
   144a0:	b	144a4 <flatcc_builder_end_offset_vector@@Base>

000144a4 <flatcc_builder_end_offset_vector@@Base>:
   144a4:	push	{r4, r5, fp, lr}
   144a8:	add	fp, sp, #8
   144ac:	mov	r4, r0
   144b0:	ldr	r0, [r0, #32]
   144b4:	ldrh	r1, [r0, #14]
   144b8:	cmp	r1, #5
   144bc:	bne	1455c <flatcc_builder_end_offset_vector@@Base+0xb8>
   144c0:	ldr	r2, [r0, #20]
   144c4:	ldr	r1, [r4, #16]
   144c8:	mov	r0, r4
   144cc:	mov	r3, #0
   144d0:	bl	15484 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   144d4:	mov	r5, r0
   144d8:	cmp	r0, #0
   144dc:	beq	14554 <flatcc_builder_end_offset_vector@@Base+0xb0>
   144e0:	ldr	r0, [r4, #16]
   144e4:	ldr	r2, [r4, #20]
   144e8:	mov	r1, #0
   144ec:	bl	12480 <memset@plt>
   144f0:	ldr	r0, [r4, #32]
   144f4:	ldr	r1, [r4, #60]	; 0x3c
   144f8:	ldr	ip, [r4, #64]	; 0x40
   144fc:	ldr	r3, [r0, #8]
   14500:	str	r3, [r4, #20]
   14504:	ldr	r3, [r0]
   14508:	str	r3, [r4, #28]
   1450c:	add	r1, r1, r3
   14510:	ldr	r2, [r0, #4]
   14514:	str	r1, [r4, #16]
   14518:	sub	r1, ip, r3
   1451c:	cmp	r1, r2
   14520:	movhi	r1, r2
   14524:	str	r1, [r4, #24]
   14528:	ldrh	r1, [r4, #130]	; 0x82
   1452c:	ldrh	r2, [r4, #128]	; 0x80
   14530:	cmp	r2, r1
   14534:	strhcc	r1, [r4, #128]	; 0x80
   14538:	ldrh	r1, [r0, #12]
   1453c:	sub	r0, r0, #36	; 0x24
   14540:	str	r0, [r4, #32]
   14544:	strh	r1, [r4, #130]	; 0x82
   14548:	ldr	r0, [r4, #156]	; 0x9c
   1454c:	sub	r0, r0, #1
   14550:	str	r0, [r4, #156]	; 0x9c
   14554:	mov	r0, r5
   14558:	pop	{r4, r5, fp, pc}
   1455c:	movw	r0, #30486	; 0x7716
   14560:	movw	r1, #29434	; 0x72fa
   14564:	movw	r3, #32069	; 0x7d45
   14568:	movw	r2, #1480	; 0x5c8
   1456c:	movt	r0, #1
   14570:	movt	r1, #1
   14574:	movt	r3, #1
   14578:	bl	124b0 <__assert_fail@plt>

0001457c <flatcc_builder_start_string@@Base>:
   1457c:	push	{r4, r5, fp, lr}
   14580:	add	fp, sp, #8
   14584:	mov	r1, #1
   14588:	mov	r4, r0
   1458c:	mov	r5, #1
   14590:	bl	13778 <flatcc_builder_start_buffer@@Base+0xbc>
   14594:	mov	r1, r0
   14598:	mvn	r0, #0
   1459c:	cmp	r1, #0
   145a0:	popne	{r4, r5, fp, pc}
   145a4:	ldr	r0, [r4, #32]
   145a8:	mov	r2, #6
   145ac:	str	r5, [r0, #16]
   145b0:	mov	r0, #0
   145b4:	ldr	r1, [r4, #32]
   145b8:	str	r0, [r1, #20]
   145bc:	ldr	r1, [r4, #32]
   145c0:	strh	r2, [r1, #14]
   145c4:	ldr	r2, [r4, #28]
   145c8:	ldr	r3, [r4, #60]	; 0x3c
   145cc:	ldr	r5, [r4, #64]	; 0x40
   145d0:	add	r3, r3, r2
   145d4:	sub	r2, r5, r2
   145d8:	str	r3, [r4, #16]
   145dc:	mvn	r3, #3
   145e0:	cmn	r2, #4
   145e4:	movcs	r2, r3
   145e8:	str	r2, [r4, #24]
   145ec:	str	r3, [r1, #4]
   145f0:	pop	{r4, r5, fp, pc}

000145f4 <flatcc_builder_reserve_table@@Base>:
   145f4:	push	{r4, r5, r6, sl, fp, lr}
   145f8:	add	fp, sp, #16
   145fc:	sub	sp, sp, #8
   14600:	cmn	r1, #1
   14604:	ble	146d8 <flatcc_builder_reserve_table@@Base+0xe4>
   14608:	mov	r4, r0
   1460c:	ldr	r0, [r0, #32]
   14610:	mov	r5, r1
   14614:	ldr	r1, [r4, #56]	; 0x38
   14618:	ldrh	r2, [r0, #28]
   1461c:	ldr	r0, [r0, #16]
   14620:	add	r6, r0, r2, lsl #1
   14624:	add	r0, r6, r5, lsl #1
   14628:	add	r2, r0, #4
   1462c:	cmp	r2, r1
   14630:	bls	14658 <flatcc_builder_reserve_table@@Base+0x64>
   14634:	ldr	r0, [r4, #40]	; 0x28
   14638:	ldr	ip, [r4, #48]	; 0x30
   1463c:	mov	r3, #0
   14640:	add	r1, r4, #52	; 0x34
   14644:	str	r3, [sp]
   14648:	mov	r3, #1
   1464c:	blx	ip
   14650:	cmp	r0, #0
   14654:	bne	146f8 <flatcc_builder_reserve_table@@Base+0x104>
   14658:	ldr	r0, [r4, #52]	; 0x34
   1465c:	adds	r0, r0, r6
   14660:	str	r0, [r4, #4]
   14664:	beq	146cc <flatcc_builder_reserve_table@@Base+0xd8>
   14668:	add	r0, r0, #4
   1466c:	lsl	r1, r5, #1
   14670:	str	r0, [r4, #4]
   14674:	ldr	r0, [r4, #32]
   14678:	ldr	r3, [r4, #80]	; 0x50
   1467c:	ldr	r5, [r0, #20]
   14680:	orr	r0, r1, #1
   14684:	add	r2, r5, r0
   14688:	cmp	r2, r3
   1468c:	bls	146b4 <flatcc_builder_reserve_table@@Base+0xc0>
   14690:	ldr	r0, [r4, #40]	; 0x28
   14694:	ldr	r6, [r4, #48]	; 0x30
   14698:	mov	r3, #3
   1469c:	add	r1, r4, #76	; 0x4c
   146a0:	str	r3, [sp]
   146a4:	mov	r3, #0
   146a8:	blx	r6
   146ac:	cmp	r0, #0
   146b0:	bne	146f8 <flatcc_builder_reserve_table@@Base+0x104>
   146b4:	ldr	r0, [r4, #76]	; 0x4c
   146b8:	adds	r0, r0, r5
   146bc:	str	r0, [r4]
   146c0:	mov	r0, #0
   146c4:	mvneq	r0, #0
   146c8:	b	146d0 <flatcc_builder_reserve_table@@Base+0xdc>
   146cc:	mvn	r0, #0
   146d0:	sub	sp, fp, #16
   146d4:	pop	{r4, r5, r6, sl, fp, pc}
   146d8:	movw	r0, #31325	; 0x7a5d
   146dc:	movw	r1, #29434	; 0x72fa
   146e0:	movw	r3, #31260	; 0x7a1c
   146e4:	movw	r2, #1065	; 0x429
   146e8:	movt	r0, #1
   146ec:	movt	r1, #1
   146f0:	movt	r3, #1
   146f4:	bl	124b0 <__assert_fail@plt>
   146f8:	movw	r0, #33952	; 0x84a0
   146fc:	movw	r1, #29434	; 0x72fa
   14700:	movw	r3, #33498	; 0x82da
   14704:	mov	r2, #308	; 0x134
   14708:	movt	r0, #1
   1470c:	movt	r1, #1
   14710:	movt	r3, #1
   14714:	bl	124b0 <__assert_fail@plt>

00014718 <flatcc_builder_start_table@@Base>:
   14718:	push	{r4, r5, r6, r7, fp, lr}
   1471c:	add	fp, sp, #16
   14720:	sub	sp, sp, #8
   14724:	mov	r6, r1
   14728:	mov	r1, #4
   1472c:	mov	r4, r0
   14730:	bl	13778 <flatcc_builder_start_buffer@@Base+0xbc>
   14734:	mvn	r5, #0
   14738:	cmp	r0, #0
   1473c:	beq	1474c <flatcc_builder_start_table@@Base+0x34>
   14740:	mov	r0, r5
   14744:	sub	sp, fp, #16
   14748:	pop	{r4, r5, r6, r7, fp, pc}
   1474c:	mov	r1, r4
   14750:	ldr	r2, [r4, #4]
   14754:	ldr	r3, [r4, #32]
   14758:	ldr	r0, [r1, #52]!	; 0x34
   1475c:	sub	r0, r2, r0
   14760:	str	r0, [r3, #16]
   14764:	ldr	r0, [r4]
   14768:	ldr	r3, [r4, #76]	; 0x4c
   1476c:	ldr	r2, [r4, #32]
   14770:	sub	r0, r0, r3
   14774:	mov	r3, #0
   14778:	str	r0, [r2, #20]
   1477c:	ldr	r0, [r4, #12]
   14780:	ldr	r2, [r4, #32]
   14784:	str	r0, [r2, #24]
   14788:	ldr	r0, [r4, #32]
   1478c:	ldrh	r2, [r4, #8]
   14790:	strh	r2, [r0, #28]
   14794:	movw	r0, #15186	; 0x3b52
   14798:	strh	r3, [r4, #8]
   1479c:	mov	r2, #3
   147a0:	movt	r0, #12137	; 0x2f69
   147a4:	str	r0, [r4, #12]
   147a8:	ldr	r0, [r4, #32]
   147ac:	strh	r2, [r0, #14]
   147b0:	ldrh	r2, [r0, #28]
   147b4:	ldr	r0, [r0, #16]
   147b8:	add	r7, r0, r2, lsl #1
   147bc:	add	r0, r7, r6, lsl #1
   147c0:	add	r2, r0, #4
   147c4:	ldr	r0, [r4, #56]	; 0x38
   147c8:	cmp	r2, r0
   147cc:	bls	147ec <flatcc_builder_start_table@@Base+0xd4>
   147d0:	ldr	r0, [r4, #40]	; 0x28
   147d4:	ldr	ip, [r4, #48]	; 0x30
   147d8:	str	r3, [sp]
   147dc:	mov	r3, #1
   147e0:	blx	ip
   147e4:	cmp	r0, #0
   147e8:	bne	14890 <flatcc_builder_start_table@@Base+0x178>
   147ec:	ldr	r0, [r4, #52]	; 0x34
   147f0:	adds	r0, r0, r7
   147f4:	str	r0, [r4, #4]
   147f8:	beq	14740 <flatcc_builder_start_table@@Base+0x28>
   147fc:	add	r0, r0, #4
   14800:	lsl	r1, r6, #1
   14804:	str	r0, [r4, #4]
   14808:	ldr	r0, [r4, #32]
   1480c:	ldr	r3, [r4, #80]	; 0x50
   14810:	ldr	r6, [r0, #20]
   14814:	orr	r0, r1, #1
   14818:	add	r2, r6, r0
   1481c:	cmp	r2, r3
   14820:	bls	14848 <flatcc_builder_start_table@@Base+0x130>
   14824:	ldr	r0, [r4, #40]	; 0x28
   14828:	ldr	r7, [r4, #48]	; 0x30
   1482c:	mov	r3, #3
   14830:	add	r1, r4, #76	; 0x4c
   14834:	str	r3, [sp]
   14838:	mov	r3, #0
   1483c:	blx	r7
   14840:	cmp	r0, #0
   14844:	bne	14890 <flatcc_builder_start_table@@Base+0x178>
   14848:	ldr	r0, [r4, #76]	; 0x4c
   1484c:	adds	r0, r0, r6
   14850:	str	r0, [r4]
   14854:	beq	14740 <flatcc_builder_start_table@@Base+0x28>
   14858:	ldr	r0, [r4, #28]
   1485c:	ldr	r2, [r4, #60]	; 0x3c
   14860:	ldr	r3, [r4, #64]	; 0x40
   14864:	ldr	r1, [r4, #32]
   14868:	mov	r5, #0
   1486c:	add	r2, r2, r0
   14870:	sub	r0, r3, r0
   14874:	str	r2, [r4, #16]
   14878:	movw	r2, #65532	; 0xfffc
   1487c:	cmp	r0, r2
   14880:	movcs	r0, r2
   14884:	str	r0, [r4, #24]
   14888:	str	r2, [r1, #4]
   1488c:	b	14740 <flatcc_builder_start_table@@Base+0x28>
   14890:	movw	r0, #33952	; 0x84a0
   14894:	movw	r1, #29434	; 0x72fa
   14898:	movw	r3, #33498	; 0x82da
   1489c:	mov	r2, #308	; 0x134
   148a0:	movt	r0, #1
   148a4:	movt	r1, #1
   148a8:	movt	r3, #1
   148ac:	bl	124b0 <__assert_fail@plt>

000148b0 <flatcc_builder_create_vtable@@Base>:
   148b0:	push	{r4, r5, fp, lr}
   148b4:	add	fp, sp, #8
   148b8:	sub	sp, sp, #80	; 0x50
   148bc:	mov	r3, r2
   148c0:	mov	r2, #0
   148c4:	mov	r4, r0
   148c8:	cmp	r3, #0
   148cc:	str	r2, [sp, #12]
   148d0:	str	r2, [sp, #8]
   148d4:	movne	r2, #1
   148d8:	strne	r3, [sp, #20]
   148dc:	strne	r1, [sp, #16]
   148e0:	strne	r3, [sp, #8]
   148e4:	strne	r2, [sp, #12]
   148e8:	ldr	r0, [r4, #152]	; 0x98
   148ec:	cmp	r0, #0
   148f0:	bne	14900 <flatcc_builder_create_vtable@@Base+0x50>
   148f4:	ldr	r0, [r4, #180]	; 0xb4
   148f8:	cmp	r0, #0
   148fc:	beq	14954 <flatcc_builder_create_vtable@@Base+0xa4>
   14900:	cmp	r3, #0
   14904:	beq	14998 <flatcc_builder_create_vtable@@Base+0xe8>
   14908:	ldr	r0, [r4, #136]	; 0x88
   1490c:	ldr	ip, [r4, #44]	; 0x2c
   14910:	add	r1, sp, #8
   14914:	add	r1, r1, #8
   14918:	sub	r5, r0, r3
   1491c:	ldr	r0, [r4, #36]	; 0x24
   14920:	str	r3, [sp]
   14924:	mov	r3, r5
   14928:	blx	ip
   1492c:	cmp	r0, #0
   14930:	bne	149ac <flatcc_builder_create_vtable@@Base+0xfc>
   14934:	cmp	r5, #0
   14938:	str	r5, [r4, #136]	; 0x88
   1493c:	beq	1494c <flatcc_builder_create_vtable@@Base+0x9c>
   14940:	add	r1, r5, #1
   14944:	mov	r0, r1
   14948:	b	14990 <flatcc_builder_create_vtable@@Base+0xe0>
   1494c:	mov	r0, #0
   14950:	b	14990 <flatcc_builder_create_vtable@@Base+0xe0>
   14954:	ldr	r5, [r4, #140]	; 0x8c
   14958:	ldr	r0, [r4, #36]	; 0x24
   1495c:	ldr	ip, [r4, #44]	; 0x2c
   14960:	add	r1, r5, r3
   14964:	str	r1, [r4, #140]	; 0x8c
   14968:	add	r1, sp, #8
   1496c:	str	r3, [sp]
   14970:	mov	r3, r5
   14974:	add	r1, r1, #8
   14978:	blx	ip
   1497c:	cmp	r0, #0
   14980:	bne	149cc <flatcc_builder_create_vtable@@Base+0x11c>
   14984:	adds	r1, r5, #1
   14988:	mov	r0, #0
   1498c:	movcc	r0, r1
   14990:	sub	sp, fp, #8
   14994:	pop	{r4, r5, fp, pc}
   14998:	movw	r0, #33952	; 0x84a0
   1499c:	movw	r1, #29434	; 0x72fa
   149a0:	movw	r3, #33631	; 0x835f
   149a4:	movw	r2, #647	; 0x287
   149a8:	b	149bc <flatcc_builder_create_vtable@@Base+0x10c>
   149ac:	movw	r0, #33952	; 0x84a0
   149b0:	movw	r1, #29434	; 0x72fa
   149b4:	movw	r3, #33631	; 0x835f
   149b8:	movw	r2, #651	; 0x28b
   149bc:	movt	r0, #1
   149c0:	movt	r1, #1
   149c4:	movt	r3, #1
   149c8:	bl	124b0 <__assert_fail@plt>
   149cc:	movw	r0, #33952	; 0x84a0
   149d0:	movw	r1, #29434	; 0x72fa
   149d4:	movw	r3, #33819	; 0x841b
   149d8:	movw	r2, #677	; 0x2a5
   149dc:	movt	r0, #1
   149e0:	movt	r1, #1
   149e4:	movt	r3, #1
   149e8:	bl	124b0 <__assert_fail@plt>

000149ec <flatcc_builder_create_cached_vtable@@Base>:
   149ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149f0:	add	fp, sp, #28
   149f4:	sub	sp, sp, #20
   149f8:	mov	sl, r0
   149fc:	ldr	r0, [r0, #116]	; 0x74
   14a00:	mov	r8, r3
   14a04:	mov	r5, r2
   14a08:	str	r1, [sp, #16]
   14a0c:	cmp	r0, #0
   14a10:	beq	14ab4 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14a14:	ldr	r1, [sl, #92]	; 0x5c
   14a18:	rsb	r0, r0, #32
   14a1c:	lsr	r0, r8, r0
   14a20:	add	r6, r1, r0, lsl #2
   14a24:	cmp	r6, #0
   14a28:	beq	14b78 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   14a2c:	ldr	r7, [r6]
   14a30:	str	r6, [sp, #12]
   14a34:	cmp	r7, #0
   14a38:	beq	14b80 <flatcc_builder_create_cached_vtable@@Base+0x194>
   14a3c:	ldr	r4, [sl, #68]	; 0x44
   14a40:	ldr	r8, [sl, #100]	; 0x64
   14a44:	mov	r0, #0
   14a48:	str	r0, [sp, #8]
   14a4c:	add	r9, r8, r7
   14a50:	mov	r1, r4
   14a54:	ldr	r0, [r9, #8]
   14a58:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14a5c:	cmp	r0, r5
   14a60:	bne	14a78 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   14a64:	ldr	r0, [sp, #16]
   14a68:	mov	r2, r5
   14a6c:	bl	12450 <bcmp@plt>
   14a70:	cmp	r0, #0
   14a74:	beq	14a8c <flatcc_builder_create_cached_vtable@@Base+0xa0>
   14a78:	ldr	r7, [r9, #12]!
   14a7c:	mov	r6, r9
   14a80:	cmp	r7, #0
   14a84:	bne	14a4c <flatcc_builder_create_cached_vtable@@Base+0x60>
   14a88:	b	14b70 <flatcc_builder_create_cached_vtable@@Base+0x184>
   14a8c:	ldr	r0, [sl, #152]	; 0x98
   14a90:	ldr	r1, [r9, #4]
   14a94:	cmp	r1, r0
   14a98:	beq	14ce4 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14a9c:	mov	r6, r9
   14aa0:	mov	r0, r9
   14aa4:	ldr	r7, [r6, #12]!
   14aa8:	cmp	r7, #0
   14aac:	bne	14a48 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14ab0:	b	14b84 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14ab4:	ldr	r0, [sl, #124]	; 0x7c
   14ab8:	cmp	r0, #0
   14abc:	bne	14d30 <flatcc_builder_create_cached_vtable@@Base+0x344>
   14ac0:	ldr	r0, [sl, #104]	; 0x68
   14ac4:	add	r7, sl, #100	; 0x64
   14ac8:	cmp	r0, #15
   14acc:	bhi	14af8 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   14ad0:	ldr	r0, [sl, #40]	; 0x28
   14ad4:	ldr	r6, [sl, #48]	; 0x30
   14ad8:	mov	r1, #6
   14adc:	mov	r2, #16
   14ae0:	mov	r3, #0
   14ae4:	str	r1, [sp]
   14ae8:	mov	r1, r7
   14aec:	blx	r6
   14af0:	cmp	r0, #0
   14af4:	bne	14d10 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14af8:	ldr	r0, [r7]
   14afc:	mov	r7, #0
   14b00:	cmp	r0, #0
   14b04:	beq	14c24 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14b08:	mov	r0, #16
   14b0c:	mov	r2, #5
   14b10:	add	r1, sl, #92	; 0x5c
   14b14:	mov	r3, #1
   14b18:	mov	r4, #256	; 0x100
   14b1c:	str	r0, [sl, #124]	; 0x7c
   14b20:	ldr	r0, [sl, #40]	; 0x28
   14b24:	ldr	r6, [sl, #48]	; 0x30
   14b28:	str	r2, [sp]
   14b2c:	mov	r2, #256	; 0x100
   14b30:	blx	r6
   14b34:	cmp	r0, #0
   14b38:	bne	14c24 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14b3c:	ldr	r0, [sl, #96]	; 0x60
   14b40:	mov	r1, r4
   14b44:	lsl	r4, r4, #1
   14b48:	cmp	r0, r1, lsl #1
   14b4c:	bcs	14b40 <flatcc_builder_create_cached_vtable@@Base+0x154>
   14b50:	lsr	r1, r1, #2
   14b54:	mvn	r0, #0
   14b58:	mov	r2, #1
   14b5c:	add	r0, r0, #1
   14b60:	cmp	r1, r2, lsl r0
   14b64:	bhi	14b5c <flatcc_builder_create_cached_vtable@@Base+0x170>
   14b68:	str	r0, [sl, #116]	; 0x74
   14b6c:	b	14a14 <flatcc_builder_create_cached_vtable@@Base+0x28>
   14b70:	ldr	r9, [sp, #8]
   14b74:	b	14b84 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14b78:	mov	r7, #0
   14b7c:	b	14c24 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14b80:	mov	r9, #0
   14b84:	ldr	r4, [sl, #124]	; 0x7c
   14b88:	ldr	r0, [sl, #104]	; 0x68
   14b8c:	add	r7, sl, #100	; 0x64
   14b90:	add	r2, r4, #16
   14b94:	cmp	r2, r0
   14b98:	bls	14bc0 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14b9c:	ldr	r0, [sl, #40]	; 0x28
   14ba0:	ldr	r6, [sl, #48]	; 0x30
   14ba4:	mov	r1, #6
   14ba8:	mov	r3, #0
   14bac:	str	r1, [sp]
   14bb0:	mov	r1, r7
   14bb4:	blx	r6
   14bb8:	cmp	r0, #0
   14bbc:	bne	14d10 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14bc0:	ldr	r0, [r7]
   14bc4:	mov	r7, #0
   14bc8:	adds	r4, r0, r4
   14bcc:	beq	14c24 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14bd0:	ldr	r0, [sl, #124]	; 0x7c
   14bd4:	ldr	r1, [sl, #152]	; 0x98
   14bd8:	add	r2, r0, #16
   14bdc:	str	r2, [sl, #124]	; 0x7c
   14be0:	ldr	r2, [sp, #12]
   14be4:	str	r1, [r4, #4]
   14be8:	ldr	r1, [r2]
   14bec:	str	r1, [r4, #12]
   14bf0:	ldr	r1, [sp, #16]
   14bf4:	str	r0, [r2]
   14bf8:	mov	r0, sl
   14bfc:	mov	r2, r5
   14c00:	bl	148b0 <flatcc_builder_create_vtable@@Base>
   14c04:	cmp	r0, #0
   14c08:	str	r0, [r4]
   14c0c:	beq	14c24 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14c10:	cmp	r9, #0
   14c14:	beq	14c30 <flatcc_builder_create_cached_vtable@@Base+0x244>
   14c18:	ldr	r0, [r9, #8]
   14c1c:	str	r0, [r4, #8]
   14c20:	ldr	r7, [r4]
   14c24:	mov	r0, r7
   14c28:	sub	sp, fp, #28
   14c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c30:	ldr	r6, [sl, #120]	; 0x78
   14c34:	ldr	r0, [sl, #172]	; 0xac
   14c38:	add	r2, r6, r5
   14c3c:	cmp	r0, #0
   14c40:	beq	14c7c <flatcc_builder_create_cached_vtable@@Base+0x290>
   14c44:	cmp	r0, r2
   14c48:	bcs	14c7c <flatcc_builder_create_cached_vtable@@Base+0x290>
   14c4c:	ldr	r0, [sl, #116]	; 0x74
   14c50:	cmp	r0, #0
   14c54:	beq	14c20 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14c58:	ldr	r0, [sl, #92]	; 0x5c
   14c5c:	ldr	r2, [sl, #96]	; 0x60
   14c60:	mov	r1, #0
   14c64:	mov	r5, #0
   14c68:	bl	12480 <memset@plt>
   14c6c:	mov	r0, #16
   14c70:	str	r5, [sl, #120]	; 0x78
   14c74:	str	r0, [sl, #124]	; 0x7c
   14c78:	b	14c20 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14c7c:	ldr	r0, [sl, #72]	; 0x48
   14c80:	add	r7, sl, #68	; 0x44
   14c84:	cmp	r2, r0
   14c88:	bls	14cb0 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   14c8c:	ldr	r0, [sl, #40]	; 0x28
   14c90:	ldr	ip, [sl, #48]	; 0x30
   14c94:	mov	r1, #2
   14c98:	mov	r3, #0
   14c9c:	str	r1, [sp]
   14ca0:	mov	r1, r7
   14ca4:	blx	ip
   14ca8:	cmp	r0, #0
   14cac:	bne	14d10 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14cb0:	ldr	r0, [r7]
   14cb4:	adds	r0, r0, r6
   14cb8:	beq	14cdc <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   14cbc:	ldr	r1, [sl, #120]	; 0x78
   14cc0:	mov	r2, r5
   14cc4:	str	r1, [r4, #8]
   14cc8:	add	r1, r1, r5
   14ccc:	str	r1, [sl, #120]	; 0x78
   14cd0:	ldr	r1, [sp, #16]
   14cd4:	bl	123fc <memcpy@plt>
   14cd8:	b	14c20 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14cdc:	mvn	r7, #0
   14ce0:	b	14c24 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14ce4:	ldr	r0, [sp, #12]
   14ce8:	cmp	r6, r0
   14cec:	beq	14d08 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   14cf0:	mov	r1, r0
   14cf4:	ldr	r0, [r9, #12]
   14cf8:	str	r0, [r6]
   14cfc:	ldr	r0, [r1]
   14d00:	str	r0, [r9, #12]
   14d04:	str	r7, [r1]
   14d08:	ldr	r7, [r9]
   14d0c:	b	14c24 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14d10:	movw	r0, #33952	; 0x84a0
   14d14:	movw	r1, #29434	; 0x72fa
   14d18:	movw	r3, #33498	; 0x82da
   14d1c:	mov	r2, #308	; 0x134
   14d20:	movt	r0, #1
   14d24:	movt	r1, #1
   14d28:	movt	r3, #1
   14d2c:	bl	124b0 <__assert_fail@plt>
   14d30:	movw	r0, #33892	; 0x8464
   14d34:	movw	r1, #29434	; 0x72fa
   14d38:	movw	r3, #33907	; 0x8473
   14d3c:	movw	r2, #342	; 0x156
   14d40:	movt	r0, #1
   14d44:	movt	r1, #1
   14d48:	movt	r3, #1
   14d4c:	bl	124b0 <__assert_fail@plt>

00014d50 <flatcc_builder_create_table@@Base>:
   14d50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d54:	add	fp, sp, #24
   14d58:	sub	sp, sp, #80	; 0x50
   14d5c:	ldr	r5, [fp, #12]
   14d60:	cmn	r5, #1
   14d64:	ble	14eb0 <flatcc_builder_create_table@@Base+0x160>
   14d68:	ldr	ip, [fp, #16]
   14d6c:	tst	ip, #1
   14d70:	beq	14ec8 <flatcc_builder_create_table@@Base+0x178>
   14d74:	mov	r8, r0
   14d78:	ldrh	r0, [r0, #128]	; 0x80
   14d7c:	cmp	r3, #4
   14d80:	movls	r3, #4
   14d84:	cmp	r0, r3
   14d88:	strhcc	r3, [r8, #128]	; 0x80
   14d8c:	cmp	r5, #1
   14d90:	ldr	r0, [r8, #136]	; 0x88
   14d94:	sub	r4, r0, r2
   14d98:	sub	r0, r3, #1
   14d9c:	and	r0, r4, r0
   14da0:	sub	r4, r4, #4
   14da4:	add	r3, ip, r0
   14da8:	sub	r3, r4, r3
   14dac:	add	r3, r3, #1
   14db0:	str	r3, [fp, #-28]	; 0xffffffe4
   14db4:	blt	14de4 <flatcc_builder_create_table@@Base+0x94>
   14db8:	ldr	r3, [fp, #8]
   14dbc:	sub	ip, r4, r0
   14dc0:	mvn	r4, #3
   14dc4:	sub	r4, r4, ip
   14dc8:	ldrh	r6, [r3], #2
   14dcc:	subs	r5, r5, #1
   14dd0:	ldr	r7, [r6, r1]
   14dd4:	add	r7, r4, r7
   14dd8:	sub	r7, r7, r6
   14ddc:	str	r7, [r6, r1]
   14de0:	bne	14dc8 <flatcc_builder_create_table@@Base+0x78>
   14de4:	mov	r4, #4
   14de8:	sub	r3, fp, #28
   14dec:	cmp	r2, #0
   14df0:	str	r4, [sp, #16]
   14df4:	str	r3, [sp, #12]
   14df8:	mov	r3, #1
   14dfc:	str	r4, [sp, #4]
   14e00:	addne	r4, r2, #4
   14e04:	str	r3, [sp, #8]
   14e08:	movne	r3, #2
   14e0c:	strne	r2, [sp, #24]
   14e10:	strne	r1, [sp, #20]
   14e14:	strne	r3, [sp, #8]
   14e18:	strne	r4, [sp, #4]
   14e1c:	cmp	r0, #0
   14e20:	beq	14e4c <flatcc_builder_create_table@@Base+0xfc>
   14e24:	add	r1, sp, #4
   14e28:	movw	r2, #28904	; 0x70e8
   14e2c:	add	r4, r4, r0
   14e30:	add	r1, r1, r3, lsl #3
   14e34:	movt	r2, #1
   14e38:	add	r3, r3, #1
   14e3c:	str	r4, [sp, #4]
   14e40:	str	r2, [r1, #8]
   14e44:	str	r0, [r1, #12]
   14e48:	str	r3, [sp, #8]
   14e4c:	cmp	r4, #0
   14e50:	ble	14ee8 <flatcc_builder_create_table@@Base+0x198>
   14e54:	ldr	r0, [r8, #136]	; 0x88
   14e58:	ldr	r7, [r8, #44]	; 0x2c
   14e5c:	add	r1, sp, #4
   14e60:	mov	r2, r3
   14e64:	add	r1, r1, #8
   14e68:	sub	r5, r0, r4
   14e6c:	ldr	r0, [r8, #36]	; 0x24
   14e70:	str	r4, [sp]
   14e74:	mov	r3, r5
   14e78:	blx	r7
   14e7c:	cmp	r0, #0
   14e80:	streq	r5, [r8, #136]	; 0x88
   14e84:	moveq	r0, r5
   14e88:	subeq	sp, fp, #24
   14e8c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e90:	movw	r0, #33952	; 0x84a0
   14e94:	movw	r1, #29434	; 0x72fa
   14e98:	movw	r3, #33631	; 0x835f
   14e9c:	movw	r2, #651	; 0x28b
   14ea0:	movt	r0, #1
   14ea4:	movt	r1, #1
   14ea8:	movt	r3, #1
   14eac:	bl	124b0 <__assert_fail@plt>
   14eb0:	movw	r0, #31318	; 0x7a56
   14eb4:	movw	r1, #29434	; 0x72fa
   14eb8:	movw	r3, #31336	; 0x7a68
   14ebc:	movw	r2, #1237	; 0x4d5
   14ec0:	movt	r0, #1
   14ec4:	b	14edc <flatcc_builder_create_table@@Base+0x18c>
   14ec8:	movw	r0, #31492	; 0x7b04
   14ecc:	movw	r1, #29434	; 0x72fa
   14ed0:	movw	r3, #31336	; 0x7a68
   14ed4:	movw	r2, #1243	; 0x4db
   14ed8:	movt	r0, #1
   14edc:	movt	r1, #1
   14ee0:	movt	r3, #1
   14ee4:	bl	124b0 <__assert_fail@plt>
   14ee8:	movw	r0, #33952	; 0x84a0
   14eec:	movw	r1, #29434	; 0x72fa
   14ef0:	movw	r3, #33631	; 0x835f
   14ef4:	movw	r2, #647	; 0x287
   14ef8:	b	14ea0 <flatcc_builder_create_table@@Base+0x150>

00014efc <flatcc_builder_check_required_field@@Base>:
   14efc:	push	{fp, lr}
   14f00:	mov	fp, sp
   14f04:	ldr	r2, [r0, #32]
   14f08:	ldrh	r2, [r2, #14]
   14f0c:	cmp	r2, #3
   14f10:	bne	14f40 <flatcc_builder_check_required_field@@Base+0x44>
   14f14:	ldrh	r3, [r0, #8]
   14f18:	mov	r2, #0
   14f1c:	cmp	r3, r1
   14f20:	bls	14f38 <flatcc_builder_check_required_field@@Base+0x3c>
   14f24:	ldr	r0, [r0, #4]
   14f28:	add	r0, r0, r1, lsl #1
   14f2c:	ldrh	r2, [r0]
   14f30:	cmp	r2, #0
   14f34:	movwne	r2, #1
   14f38:	mov	r0, r2
   14f3c:	pop	{fp, pc}
   14f40:	movw	r0, #31503	; 0x7b0f
   14f44:	movw	r1, #29434	; 0x72fa
   14f48:	movw	r3, #31546	; 0x7b3a
   14f4c:	movw	r2, #1272	; 0x4f8
   14f50:	movt	r0, #1
   14f54:	movt	r1, #1
   14f58:	movt	r3, #1
   14f5c:	bl	124b0 <__assert_fail@plt>

00014f60 <flatcc_builder_check_union_field@@Base>:
   14f60:	push	{fp, lr}
   14f64:	mov	fp, sp
   14f68:	mov	r2, r0
   14f6c:	ldr	r0, [r0, #32]
   14f70:	ldrh	r0, [r0, #14]
   14f74:	cmp	r0, #3
   14f78:	bne	14fd8 <flatcc_builder_check_union_field@@Base+0x78>
   14f7c:	mov	r0, #0
   14f80:	cmp	r1, #0
   14f84:	beq	14fc4 <flatcc_builder_check_union_field@@Base+0x64>
   14f88:	ldrh	r3, [r2, #8]
   14f8c:	cmp	r3, r1
   14f90:	popls	{fp, pc}
   14f94:	ldr	r0, [r2, #4]
   14f98:	add	r0, r0, r1, lsl #1
   14f9c:	ldrh	r1, [r0, #-2]
   14fa0:	cmp	r1, #0
   14fa4:	beq	14fc8 <flatcc_builder_check_union_field@@Base+0x68>
   14fa8:	ldr	r2, [r2, #16]
   14fac:	ldrh	r0, [r0]
   14fb0:	ldrb	r1, [r2, r1]
   14fb4:	cmp	r1, #0
   14fb8:	beq	14fcc <flatcc_builder_check_union_field@@Base+0x6c>
   14fbc:	cmp	r0, #0
   14fc0:	movwne	r0, #1
   14fc4:	pop	{fp, pc}
   14fc8:	ldrh	r0, [r0]
   14fcc:	clz	r0, r0
   14fd0:	lsr	r0, r0, #5
   14fd4:	pop	{fp, pc}
   14fd8:	movw	r0, #31503	; 0x7b0f
   14fdc:	movw	r1, #29434	; 0x72fa
   14fe0:	movw	r3, #31629	; 0x7b8d
   14fe4:	movw	r2, #1279	; 0x4ff
   14fe8:	movt	r0, #1
   14fec:	movt	r1, #1
   14ff0:	movt	r3, #1
   14ff4:	bl	124b0 <__assert_fail@plt>

00014ff8 <flatcc_builder_check_required@@Base>:
   14ff8:	push	{fp, lr}
   14ffc:	mov	fp, sp
   15000:	mov	r3, r0
   15004:	ldr	r0, [r0, #32]
   15008:	ldrh	r0, [r0, #14]
   1500c:	cmp	r0, #3
   15010:	bne	15058 <flatcc_builder_check_required@@Base+0x60>
   15014:	ldrh	ip, [r3, #8]
   15018:	mov	r0, #0
   1501c:	cmp	ip, r2
   15020:	poplt	{fp, pc}
   15024:	cmp	r2, #1
   15028:	blt	15050 <flatcc_builder_check_required@@Base+0x58>
   1502c:	ldr	ip, [r3, #4]
   15030:	ldrh	r3, [r1]
   15034:	add	r3, ip, r3, lsl #1
   15038:	ldrh	r3, [r3]
   1503c:	cmp	r3, #0
   15040:	beq	15054 <flatcc_builder_check_required@@Base+0x5c>
   15044:	add	r1, r1, #2
   15048:	subs	r2, r2, #1
   1504c:	bne	15030 <flatcc_builder_check_required@@Base+0x38>
   15050:	mov	r0, #1
   15054:	pop	{fp, pc}
   15058:	movw	r0, #31503	; 0x7b0f
   1505c:	movw	r1, #29434	; 0x72fa
   15060:	movw	r3, #31709	; 0x7bdd
   15064:	movw	r2, #1297	; 0x511
   15068:	movt	r0, #1
   1506c:	movt	r1, #1
   15070:	movt	r3, #1
   15074:	bl	124b0 <__assert_fail@plt>

00015078 <flatcc_builder_end_table@@Base>:
   15078:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1507c:	add	fp, sp, #24
   15080:	sub	sp, sp, #16
   15084:	mov	r4, r0
   15088:	ldr	r0, [r0, #32]
   1508c:	ldrh	r0, [r0, #14]
   15090:	cmp	r0, #3
   15094:	bne	15210 <flatcc_builder_end_table@@Base+0x198>
   15098:	ldrh	r0, [r4, #8]
   1509c:	ldr	r5, [r4, #4]
   150a0:	mov	r1, #4
   150a4:	movw	r2, #31153	; 0x79b1
   150a8:	movt	r2, #40503	; 0x9e37
   150ac:	add	r0, r1, r0, lsl #1
   150b0:	strh	r0, [r5, #-4]!
   150b4:	ldrh	r1, [r4, #20]
   150b8:	uxth	r6, r0
   150bc:	add	r1, r1, #4
   150c0:	strh	r1, [r5, #2]
   150c4:	uxth	r1, r1
   150c8:	ldr	r0, [r4, #12]
   150cc:	eor	r0, r0, r6
   150d0:	mul	r0, r0, r2
   150d4:	eor	r0, r0, r1
   150d8:	mov	r1, r5
   150dc:	mul	r3, r0, r2
   150e0:	mov	r0, r4
   150e4:	mov	r2, r6
   150e8:	str	r3, [r4, #12]
   150ec:	bl	149ec <flatcc_builder_create_cached_vtable@@Base>
   150f0:	cmp	r0, #0
   150f4:	beq	15200 <flatcc_builder_end_table@@Base+0x188>
   150f8:	mov	r7, r0
   150fc:	mov	r0, r5
   15100:	mov	r1, #0
   15104:	mov	r2, r6
   15108:	mov	r8, #0
   1510c:	bl	12480 <memset@plt>
   15110:	ldr	r5, [r4, #32]
   15114:	ldr	r0, [r4, #76]	; 0x4c
   15118:	ldr	r6, [r4]
   1511c:	ldrh	r3, [r4, #130]	; 0x82
   15120:	ldr	r1, [r4, #16]
   15124:	ldr	r2, [r4, #20]
   15128:	ldr	r5, [r5, #20]
   1512c:	add	r0, r0, r5
   15130:	sub	r6, r6, r0
   15134:	asr	r6, r6, #1
   15138:	stm	sp, {r0, r6, r7}
   1513c:	mov	r0, r4
   15140:	bl	14d50 <flatcc_builder_create_table@@Base>
   15144:	cmp	r0, #0
   15148:	beq	15204 <flatcc_builder_end_table@@Base+0x18c>
   1514c:	ldr	r1, [r4, #32]
   15150:	mov	r5, r0
   15154:	ldr	r0, [r4, #16]
   15158:	ldr	r2, [r4, #20]
   1515c:	ldr	r3, [r4, #52]	; 0x34
   15160:	ldr	r7, [r1, #24]
   15164:	str	r7, [r4, #12]
   15168:	ldrh	r7, [r1, #28]
   1516c:	strh	r7, [r4, #8]
   15170:	ldr	r7, [r1, #16]
   15174:	add	r3, r3, r7
   15178:	str	r3, [r4, #4]
   1517c:	ldr	r3, [r4, #76]	; 0x4c
   15180:	ldr	r1, [r1, #20]
   15184:	add	r1, r3, r1
   15188:	str	r1, [r4]
   1518c:	mov	r1, #0
   15190:	bl	12480 <memset@plt>
   15194:	ldr	r0, [r4, #32]
   15198:	ldr	r1, [r4, #60]	; 0x3c
   1519c:	ldr	r2, [r4, #64]	; 0x40
   151a0:	mov	r8, r5
   151a4:	ldr	r3, [r0, #8]
   151a8:	str	r3, [r4, #20]
   151ac:	ldr	r3, [r0]
   151b0:	str	r3, [r4, #28]
   151b4:	add	r1, r1, r3
   151b8:	ldr	r7, [r0, #4]
   151bc:	str	r1, [r4, #16]
   151c0:	sub	r1, r2, r3
   151c4:	cmp	r1, r7
   151c8:	movhi	r1, r7
   151cc:	str	r1, [r4, #24]
   151d0:	ldrh	r1, [r4, #130]	; 0x82
   151d4:	ldrh	r2, [r4, #128]	; 0x80
   151d8:	cmp	r2, r1
   151dc:	strhcc	r1, [r4, #128]	; 0x80
   151e0:	ldrh	r1, [r0, #12]
   151e4:	sub	r0, r0, #36	; 0x24
   151e8:	str	r0, [r4, #32]
   151ec:	strh	r1, [r4, #130]	; 0x82
   151f0:	ldr	r0, [r4, #156]	; 0x9c
   151f4:	sub	r0, r0, #1
   151f8:	str	r0, [r4, #156]	; 0x9c
   151fc:	b	15204 <flatcc_builder_end_table@@Base+0x18c>
   15200:	mov	r8, #0
   15204:	mov	r0, r8
   15208:	sub	sp, fp, #24
   1520c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15210:	movw	r0, #31503	; 0x7b0f
   15214:	movw	r1, #29434	; 0x72fa
   15218:	movw	r3, #31799	; 0x7c37
   1521c:	movw	r2, #1317	; 0x525
   15220:	movt	r0, #1
   15224:	movt	r1, #1
   15228:	movt	r3, #1
   1522c:	bl	124b0 <__assert_fail@plt>

00015230 <flatcc_builder_create_vector@@Base>:
   15230:	push	{r4, r5, r6, r7, fp, lr}
   15234:	add	fp, sp, #16
   15238:	sub	sp, sp, #80	; 0x50
   1523c:	mov	r7, r0
   15240:	ldr	r0, [fp, #12]
   15244:	cmp	r2, r0
   15248:	bhi	15344 <flatcc_builder_create_vector@@Base+0x114>
   1524c:	ldr	r0, [fp, #8]
   15250:	mov	r4, r2
   15254:	ldrh	r2, [r7, #128]	; 0x80
   15258:	mov	r5, #4
   1525c:	cmp	r0, #4
   15260:	movls	r0, r5
   15264:	cmp	r2, r0
   15268:	sub	r2, fp, #20
   1526c:	strhcc	r0, [r7, #128]	; 0x80
   15270:	str	r4, [fp, #-20]	; 0xffffffec
   15274:	sub	r0, r0, #1
   15278:	ldr	ip, [r7, #136]	; 0x88
   1527c:	str	r5, [sp, #16]
   15280:	str	r2, [sp, #12]
   15284:	mov	r2, #1
   15288:	str	r5, [sp, #4]
   1528c:	str	r2, [sp, #8]
   15290:	mls	r6, r3, r4, ip
   15294:	mul	r3, r3, r4
   15298:	cmp	r3, #0
   1529c:	and	r0, r6, r0
   152a0:	movne	r2, #2
   152a4:	addne	r5, r3, #4
   152a8:	strne	r3, [sp, #24]
   152ac:	strne	r1, [sp, #20]
   152b0:	strne	r2, [sp, #8]
   152b4:	strne	r5, [sp, #4]
   152b8:	cmp	r0, #0
   152bc:	beq	152e8 <flatcc_builder_create_vector@@Base+0xb8>
   152c0:	add	r1, sp, #4
   152c4:	movw	r3, #28904	; 0x70e8
   152c8:	add	r5, r5, r0
   152cc:	add	r1, r1, r2, lsl #3
   152d0:	movt	r3, #1
   152d4:	add	r2, r2, #1
   152d8:	str	r5, [sp, #4]
   152dc:	str	r3, [r1, #8]
   152e0:	str	r0, [r1, #12]
   152e4:	str	r2, [sp, #8]
   152e8:	cmp	r5, #0
   152ec:	ble	15364 <flatcc_builder_create_vector@@Base+0x134>
   152f0:	ldr	r0, [r7, #36]	; 0x24
   152f4:	ldr	r6, [r7, #44]	; 0x2c
   152f8:	add	r1, sp, #4
   152fc:	sub	r4, ip, r5
   15300:	str	r5, [sp]
   15304:	add	r1, r1, #8
   15308:	mov	r3, r4
   1530c:	blx	r6
   15310:	cmp	r0, #0
   15314:	streq	r4, [r7, #136]	; 0x88
   15318:	moveq	r0, r4
   1531c:	subeq	sp, fp, #16
   15320:	popeq	{r4, r5, r6, r7, fp, pc}
   15324:	movw	r0, #33952	; 0x84a0
   15328:	movw	r1, #29434	; 0x72fa
   1532c:	movw	r3, #33631	; 0x835f
   15330:	movw	r2, #651	; 0x28b
   15334:	movt	r0, #1
   15338:	movt	r1, #1
   1533c:	movt	r3, #1
   15340:	bl	124b0 <__assert_fail@plt>
   15344:	movw	r0, #31865	; 0x7c79
   15348:	movw	r1, #29434	; 0x72fa
   1534c:	movw	r3, #31884	; 0x7c8c
   15350:	movw	r2, #1365	; 0x555
   15354:	movt	r0, #1
   15358:	movt	r1, #1
   1535c:	movt	r3, #1
   15360:	bl	124b0 <__assert_fail@plt>
   15364:	movw	r0, #33952	; 0x84a0
   15368:	movw	r1, #29434	; 0x72fa
   1536c:	movw	r3, #33631	; 0x835f
   15370:	movw	r2, #647	; 0x287
   15374:	b	15334 <flatcc_builder_create_vector@@Base+0x104>

00015378 <flatcc_builder_end_vector@@Base>:
   15378:	push	{r4, r5, fp, lr}
   1537c:	add	fp, sp, #8
   15380:	sub	sp, sp, #8
   15384:	mov	r4, r0
   15388:	ldr	r0, [r0, #32]
   1538c:	ldrh	r1, [r0, #14]
   15390:	cmp	r1, #4
   15394:	bne	15448 <flatcc_builder_end_vector@@Base+0xd0>
   15398:	ldr	r3, [r0, #16]
   1539c:	ldr	r2, [r0, #20]
   153a0:	ldr	r0, [r0, #24]
   153a4:	ldr	r1, [r4, #16]
   153a8:	ldrh	r5, [r4, #130]	; 0x82
   153ac:	str	r0, [sp, #4]
   153b0:	mov	r0, r4
   153b4:	str	r5, [sp]
   153b8:	bl	15230 <flatcc_builder_create_vector@@Base>
   153bc:	mov	r5, r0
   153c0:	cmp	r0, #0
   153c4:	beq	1543c <flatcc_builder_end_vector@@Base+0xc4>
   153c8:	ldr	r0, [r4, #16]
   153cc:	ldr	r2, [r4, #20]
   153d0:	mov	r1, #0
   153d4:	bl	12480 <memset@plt>
   153d8:	ldr	r0, [r4, #32]
   153dc:	ldr	r1, [r4, #60]	; 0x3c
   153e0:	ldr	ip, [r4, #64]	; 0x40
   153e4:	ldr	r3, [r0, #8]
   153e8:	str	r3, [r4, #20]
   153ec:	ldr	r3, [r0]
   153f0:	str	r3, [r4, #28]
   153f4:	add	r1, r1, r3
   153f8:	ldr	r2, [r0, #4]
   153fc:	str	r1, [r4, #16]
   15400:	sub	r1, ip, r3
   15404:	cmp	r1, r2
   15408:	movhi	r1, r2
   1540c:	str	r1, [r4, #24]
   15410:	ldrh	r1, [r4, #130]	; 0x82
   15414:	ldrh	r2, [r4, #128]	; 0x80
   15418:	cmp	r2, r1
   1541c:	strhcc	r1, [r4, #128]	; 0x80
   15420:	ldrh	r1, [r0, #12]
   15424:	sub	r0, r0, #36	; 0x24
   15428:	str	r0, [r4, #32]
   1542c:	strh	r1, [r4, #130]	; 0x82
   15430:	ldr	r0, [r4, #156]	; 0x9c
   15434:	sub	r0, r0, #1
   15438:	str	r0, [r4, #156]	; 0x9c
   1543c:	mov	r0, r5
   15440:	sub	sp, fp, #8
   15444:	pop	{r4, r5, fp, pc}
   15448:	movw	r0, #30237	; 0x761d
   1544c:	movw	r1, #29434	; 0x72fa
   15450:	movw	r3, #32002	; 0x7d02
   15454:	movw	r2, #1400	; 0x578
   15458:	movt	r0, #1
   1545c:	movt	r1, #1
   15460:	movt	r3, #1
   15464:	bl	124b0 <__assert_fail@plt>

00015468 <flatcc_builder_vector_count@@Base>:
   15468:	ldr	r0, [r0, #32]
   1546c:	ldr	r0, [r0, #20]
   15470:	bx	lr

00015474 <flatcc_builder_vector_edit@@Base>:
   15474:	ldr	r0, [r0, #16]
   15478:	bx	lr

0001547c <flatcc_builder_create_offset_vector_direct@@Base>:
   1547c:	mov	r3, #0
   15480:	b	15484 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15484:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15488:	add	fp, sp, #24
   1548c:	sub	sp, sp, #80	; 0x50
   15490:	mov	r6, #0
   15494:	cmn	r2, #-1073741823	; 0xc0000001
   15498:	bhi	155d4 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   1549c:	mov	r8, r0
   154a0:	ldrh	r0, [r0, #128]	; 0x80
   154a4:	mov	r5, #4
   154a8:	sub	r7, fp, #28
   154ac:	mov	r4, #1
   154b0:	cmp	r0, #3
   154b4:	movls	r0, #4
   154b8:	strhls	r0, [r8, #128]	; 0x80
   154bc:	str	r2, [fp, #-28]	; 0xffffffe4
   154c0:	ldr	ip, [r8, #136]	; 0x88
   154c4:	str	r5, [sp, #16]
   154c8:	str	r7, [sp, #12]
   154cc:	mov	r7, #0
   154d0:	str	r5, [sp, #4]
   154d4:	str	r4, [sp, #8]
   154d8:	cmp	r7, r2, lsl #2
   154dc:	and	r6, ip, #3
   154e0:	beq	15500 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   154e4:	lsl	r7, r2, #2
   154e8:	mov	r4, #2
   154ec:	add	r5, r7, #4
   154f0:	str	r7, [sp, #24]
   154f4:	str	r1, [sp, #20]
   154f8:	str	r4, [sp, #8]
   154fc:	str	r5, [sp, #4]
   15500:	cmp	r6, #0
   15504:	beq	15530 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   15508:	add	r7, sp, #4
   1550c:	movw	r0, #28904	; 0x70e8
   15510:	add	r5, r5, r6
   15514:	add	r7, r7, r4, lsl #3
   15518:	movt	r0, #1
   1551c:	add	r4, r4, #1
   15520:	str	r5, [sp, #4]
   15524:	str	r0, [r7, #8]
   15528:	str	r6, [r7, #12]
   1552c:	str	r4, [sp, #8]
   15530:	cmp	r2, #0
   15534:	beq	1559c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15538:	sub	r0, r5, ip
   1553c:	mov	r6, r3
   15540:	sub	r0, r0, #4
   15544:	ldr	r7, [r1]
   15548:	cmp	r7, #0
   1554c:	beq	15570 <flatcc_builder_create_offset_vector_direct@@Base+0xf4>
   15550:	add	r7, r0, r7
   15554:	cmp	r3, #0
   15558:	str	r7, [r1]
   1555c:	beq	15584 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   15560:	ldrb	r7, [r6]
   15564:	cmp	r7, #0
   15568:	bne	15584 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   1556c:	b	155e0 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15570:	cmp	r3, #0
   15574:	beq	15610 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   15578:	ldrb	r7, [r6]
   1557c:	cmp	r7, #0
   15580:	bne	155f8 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   15584:	sub	r0, r0, #4
   15588:	add	r1, r1, #4
   1558c:	add	r6, r6, #1
   15590:	subs	r2, r2, #1
   15594:	bne	15544 <flatcc_builder_create_offset_vector_direct@@Base+0xc8>
   15598:	ldr	ip, [r8, #136]	; 0x88
   1559c:	cmp	r5, #0
   155a0:	ble	15630 <flatcc_builder_create_offset_vector_direct@@Base+0x1b4>
   155a4:	ldr	r0, [r8, #36]	; 0x24
   155a8:	ldr	r7, [r8, #44]	; 0x2c
   155ac:	add	r1, sp, #4
   155b0:	sub	r6, ip, r5
   155b4:	mov	r2, r4
   155b8:	str	r5, [sp]
   155bc:	add	r1, r1, #8
   155c0:	mov	r3, r6
   155c4:	blx	r7
   155c8:	cmp	r0, #0
   155cc:	bne	15644 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   155d0:	str	r6, [r8, #136]	; 0x88
   155d4:	mov	r0, r6
   155d8:	sub	sp, fp, #24
   155dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155e0:	movw	r0, #33940	; 0x8494
   155e4:	movw	r1, #29434	; 0x72fa
   155e8:	movw	r3, #33954	; 0x84a2
   155ec:	movw	r2, #1457	; 0x5b1
   155f0:	movt	r0, #1
   155f4:	b	15624 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   155f8:	movw	r0, #34085	; 0x8525
   155fc:	movw	r1, #29434	; 0x72fa
   15600:	movw	r3, #33954	; 0x84a2
   15604:	movw	r2, #1461	; 0x5b5
   15608:	movt	r0, #1
   1560c:	b	15624 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   15610:	movw	r0, #33952	; 0x84a0
   15614:	movw	r1, #29434	; 0x72fa
   15618:	movw	r3, #33954	; 0x84a2
   1561c:	movw	r2, #1463	; 0x5b7
   15620:	movt	r0, #1
   15624:	movt	r1, #1
   15628:	movt	r3, #1
   1562c:	bl	124b0 <__assert_fail@plt>
   15630:	movw	r0, #33952	; 0x84a0
   15634:	movw	r1, #29434	; 0x72fa
   15638:	movw	r3, #33631	; 0x835f
   1563c:	movw	r2, #647	; 0x287
   15640:	b	15654 <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   15644:	movw	r0, #33952	; 0x84a0
   15648:	movw	r1, #29434	; 0x72fa
   1564c:	movw	r3, #33631	; 0x835f
   15650:	movw	r2, #651	; 0x28b
   15654:	movt	r0, #1
   15658:	movt	r1, #1
   1565c:	movt	r3, #1
   15660:	bl	124b0 <__assert_fail@plt>

00015664 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15664:	push	{r4, r5, fp, lr}
   15668:	add	fp, sp, #8
   1566c:	mov	r4, r0
   15670:	ldr	r0, [r0, #32]
   15674:	mov	r3, r1
   15678:	ldrh	r1, [r0, #14]
   1567c:	cmp	r1, #5
   15680:	bne	1571c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   15684:	ldr	r2, [r0, #20]
   15688:	ldr	r1, [r4, #16]
   1568c:	mov	r0, r4
   15690:	bl	15484 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15694:	mov	r5, r0
   15698:	cmp	r0, #0
   1569c:	beq	15714 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   156a0:	ldr	r0, [r4, #16]
   156a4:	ldr	r2, [r4, #20]
   156a8:	mov	r1, #0
   156ac:	bl	12480 <memset@plt>
   156b0:	ldr	r0, [r4, #32]
   156b4:	ldr	r1, [r4, #60]	; 0x3c
   156b8:	ldr	ip, [r4, #64]	; 0x40
   156bc:	ldr	r3, [r0, #8]
   156c0:	str	r3, [r4, #20]
   156c4:	ldr	r3, [r0]
   156c8:	str	r3, [r4, #28]
   156cc:	add	r1, r1, r3
   156d0:	ldr	r2, [r0, #4]
   156d4:	str	r1, [r4, #16]
   156d8:	sub	r1, ip, r3
   156dc:	cmp	r1, r2
   156e0:	movhi	r1, r2
   156e4:	str	r1, [r4, #24]
   156e8:	ldrh	r1, [r4, #130]	; 0x82
   156ec:	ldrh	r2, [r4, #128]	; 0x80
   156f0:	cmp	r2, r1
   156f4:	strhcc	r1, [r4, #128]	; 0x80
   156f8:	ldrh	r1, [r0, #12]
   156fc:	sub	r0, r0, #36	; 0x24
   15700:	str	r0, [r4, #32]
   15704:	strh	r1, [r4, #130]	; 0x82
   15708:	ldr	r0, [r4, #156]	; 0x9c
   1570c:	sub	r0, r0, #1
   15710:	str	r0, [r4, #156]	; 0x9c
   15714:	mov	r0, r5
   15718:	pop	{r4, r5, fp, pc}
   1571c:	movw	r0, #30486	; 0x7716
   15720:	movw	r1, #29434	; 0x72fa
   15724:	movw	r3, #32143	; 0x7d8f
   15728:	movw	r2, #1493	; 0x5d5
   1572c:	movt	r0, #1
   15730:	movt	r1, #1
   15734:	movt	r3, #1
   15738:	bl	124b0 <__assert_fail@plt>

0001573c <flatcc_builder_offset_vector_edit@@Base>:
   1573c:	ldr	r0, [r0, #16]
   15740:	bx	lr

00015744 <flatcc_builder_offset_vector_count@@Base>:
   15744:	ldr	r0, [r0, #32]
   15748:	ldr	r0, [r0, #20]
   1574c:	bx	lr

00015750 <flatcc_builder_table_add_union@@Base>:
   15750:	push	{r4, r5, r6, r7, fp, lr}
   15754:	add	fp, sp, #16
   15758:	mov	r5, r0
   1575c:	ldr	r0, [r0, #32]
   15760:	ldrh	r0, [r0, #14]
   15764:	cmp	r0, #3
   15768:	bne	157f0 <flatcc_builder_table_add_union@@Base+0xa0>
   1576c:	mov	r7, r3
   15770:	mov	r4, r2
   15774:	mov	r6, r1
   15778:	cmp	r3, #0
   1577c:	beq	1578c <flatcc_builder_table_add_union@@Base+0x3c>
   15780:	uxtb	r0, r4
   15784:	cmp	r0, #0
   15788:	beq	15808 <flatcc_builder_table_add_union@@Base+0xb8>
   1578c:	cmp	r7, #0
   15790:	beq	157ac <flatcc_builder_table_add_union@@Base+0x5c>
   15794:	mov	r0, r5
   15798:	mov	r1, r6
   1579c:	bl	15838 <flatcc_builder_table_add_offset@@Base>
   157a0:	cmp	r0, #0
   157a4:	beq	15820 <flatcc_builder_table_add_union@@Base+0xd0>
   157a8:	str	r7, [r0]
   157ac:	sub	r1, r6, #1
   157b0:	mov	r0, r5
   157b4:	mov	r2, #1
   157b8:	mov	r3, #1
   157bc:	bl	15964 <flatcc_builder_table_add@@Base>
   157c0:	cmp	r0, #0
   157c4:	strbne	r4, [r0]
   157c8:	movne	r0, #0
   157cc:	popne	{r4, r5, r6, r7, fp, pc}
   157d0:	movw	r0, #32389	; 0x7e85
   157d4:	movw	r1, #29434	; 0x72fa
   157d8:	movw	r3, #32257	; 0x7e01
   157dc:	movw	r2, #1526	; 0x5f6
   157e0:	movt	r0, #1
   157e4:	movt	r1, #1
   157e8:	movt	r3, #1
   157ec:	bl	124b0 <__assert_fail@plt>
   157f0:	movw	r0, #31503	; 0x7b0f
   157f4:	movw	r1, #29434	; 0x72fa
   157f8:	movw	r3, #32257	; 0x7e01
   157fc:	movw	r2, #1518	; 0x5ee
   15800:	movt	r0, #1
   15804:	b	157e4 <flatcc_builder_table_add_union@@Base+0x94>
   15808:	movw	r0, #32345	; 0x7e59
   1580c:	movw	r1, #29434	; 0x72fa
   15810:	movw	r3, #32257	; 0x7e01
   15814:	movw	r2, #1519	; 0x5ef
   15818:	movt	r0, #1
   1581c:	b	157e4 <flatcc_builder_table_add_union@@Base+0x94>
   15820:	movw	r0, #32379	; 0x7e7b
   15824:	movw	r1, #29434	; 0x72fa
   15828:	movw	r3, #32257	; 0x7e01
   1582c:	movw	r2, #1522	; 0x5f2
   15830:	movt	r0, #1
   15834:	b	157e4 <flatcc_builder_table_add_union@@Base+0x94>

00015838 <flatcc_builder_table_add_offset@@Base>:
   15838:	push	{r4, r5, r6, r7, fp, lr}
   1583c:	add	fp, sp, #16
   15840:	mov	r4, r0
   15844:	ldr	r0, [r0, #32]
   15848:	ldrh	r0, [r0, #14]
   1584c:	cmp	r0, #3
   15850:	bne	15914 <flatcc_builder_table_add_offset@@Base+0xdc>
   15854:	movw	r0, #32765	; 0x7ffd
   15858:	mov	r5, r1
   1585c:	cmp	r1, r0
   15860:	bcs	1592c <flatcc_builder_table_add_offset@@Base+0xf4>
   15864:	ldr	r0, [r4, #4]
   15868:	add	r1, r0, r5, lsl #1
   1586c:	ldrh	r1, [r1]
   15870:	cmp	r1, #0
   15874:	bne	15944 <flatcc_builder_table_add_offset@@Base+0x10c>
   15878:	ldr	r2, [r4, #20]
   1587c:	ldr	r1, [r4, #12]
   15880:	ldr	r3, [r4, #24]
   15884:	add	r2, r2, #3
   15888:	eor	r1, r1, r5
   1588c:	bic	r7, r2, #3
   15890:	movw	r2, #31153	; 0x79b1
   15894:	movt	r2, #40503	; 0x9e37
   15898:	add	r6, r7, #4
   1589c:	cmp	r6, r3
   158a0:	str	r6, [r4, #20]
   158a4:	mul	r1, r1, r2
   158a8:	eor	r1, r1, #4
   158ac:	mul	r1, r1, r2
   158b0:	str	r1, [r4, #12]
   158b4:	bls	158dc <flatcc_builder_table_add_offset@@Base+0xa4>
   158b8:	mov	r0, r4
   158bc:	mov	r1, r6
   158c0:	movw	r2, #65532	; 0xfffc
   158c4:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   158c8:	mov	r1, r0
   158cc:	mov	r0, #0
   158d0:	cmp	r1, #0
   158d4:	popne	{r4, r5, r6, r7, fp, pc}
   158d8:	ldr	r0, [r4, #4]
   158dc:	uxth	r1, r5
   158e0:	add	r0, r0, r1, lsl #1
   158e4:	strh	r6, [r0]
   158e8:	ldrh	r0, [r4, #8]
   158ec:	cmp	r0, r1
   158f0:	addls	r0, r5, #1
   158f4:	strhls	r0, [r4, #8]
   158f8:	ldr	r0, [r4]
   158fc:	add	r1, r0, #2
   15900:	str	r1, [r4]
   15904:	strh	r7, [r0]
   15908:	ldr	r0, [r4, #16]
   1590c:	add	r0, r0, r7
   15910:	pop	{r4, r5, r6, r7, fp, pc}
   15914:	movw	r0, #31503	; 0x7b0f
   15918:	movw	r1, #29434	; 0x72fa
   1591c:	movw	r3, #33283	; 0x8203
   15920:	movw	r2, #1811	; 0x713
   15924:	movt	r0, #1
   15928:	b	15958 <flatcc_builder_table_add_offset@@Base+0x120>
   1592c:	movw	r0, #33155	; 0x8183
   15930:	movw	r1, #29434	; 0x72fa
   15934:	movw	r3, #33283	; 0x8203
   15938:	movw	r2, #1812	; 0x714
   1593c:	movt	r0, #1
   15940:	b	15958 <flatcc_builder_table_add_offset@@Base+0x120>
   15944:	movw	r0, #33952	; 0x84a0
   15948:	movw	r1, #29434	; 0x72fa
   1594c:	movw	r3, #33283	; 0x8203
   15950:	movw	r2, #1819	; 0x71b
   15954:	movt	r0, #1
   15958:	movt	r1, #1
   1595c:	movt	r3, #1
   15960:	bl	124b0 <__assert_fail@plt>

00015964 <flatcc_builder_table_add@@Base>:
   15964:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15968:	add	fp, sp, #24
   1596c:	mov	r4, r0
   15970:	ldr	r0, [r0, #32]
   15974:	ldrh	r0, [r0, #14]
   15978:	cmp	r0, #3
   1597c:	bne	15a4c <flatcc_builder_table_add@@Base+0xe8>
   15980:	movw	r0, #32765	; 0x7ffd
   15984:	mov	r8, r1
   15988:	cmp	r1, r0
   1598c:	bcs	15a64 <flatcc_builder_table_add@@Base+0x100>
   15990:	ldrh	r0, [r4, #130]	; 0x82
   15994:	cmp	r0, r3
   15998:	strhcc	r3, [r4, #130]	; 0x82
   1599c:	ldr	r0, [r4, #4]
   159a0:	add	r1, r0, r8, lsl #1
   159a4:	ldrh	r1, [r1]
   159a8:	cmp	r1, #0
   159ac:	bne	15a7c <flatcc_builder_table_add@@Base+0x118>
   159b0:	ldr	r1, [r4, #12]
   159b4:	movw	r7, #31153	; 0x79b1
   159b8:	ldr	r6, [r4, #20]
   159bc:	ldr	r5, [r4, #24]
   159c0:	movt	r7, #40503	; 0x9e37
   159c4:	eor	r1, r1, r8
   159c8:	mul	r1, r1, r7
   159cc:	eor	r1, r1, r2
   159d0:	mul	r1, r1, r7
   159d4:	str	r1, [r4, #12]
   159d8:	add	r1, r3, r6
   159dc:	rsb	r3, r3, #0
   159e0:	sub	r1, r1, #1
   159e4:	and	r6, r1, r3
   159e8:	add	r1, r6, r2
   159ec:	cmp	r1, r5
   159f0:	str	r1, [r4, #20]
   159f4:	bcc	15a20 <flatcc_builder_table_add@@Base+0xbc>
   159f8:	add	r1, r1, #1
   159fc:	mov	r0, r4
   15a00:	movw	r2, #65532	; 0xfffc
   15a04:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   15a08:	mov	r1, r0
   15a0c:	mov	r0, #0
   15a10:	cmp	r1, #0
   15a14:	beq	15a1c <flatcc_builder_table_add@@Base+0xb8>
   15a18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a1c:	ldr	r0, [r4, #4]
   15a20:	uxth	r1, r8
   15a24:	add	r2, r6, #4
   15a28:	add	r0, r0, r1, lsl #1
   15a2c:	strh	r2, [r0]
   15a30:	ldrh	r0, [r4, #8]
   15a34:	cmp	r0, r1
   15a38:	addls	r0, r8, #1
   15a3c:	strhls	r0, [r4, #8]
   15a40:	ldr	r0, [r4, #16]
   15a44:	add	r0, r0, r6
   15a48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a4c:	movw	r0, #31503	; 0x7b0f
   15a50:	movw	r1, #29434	; 0x72fa
   15a54:	movw	r3, #33081	; 0x8139
   15a58:	movw	r2, #1773	; 0x6ed
   15a5c:	movt	r0, #1
   15a60:	b	15a90 <flatcc_builder_table_add@@Base+0x12c>
   15a64:	movw	r0, #33155	; 0x8183
   15a68:	movw	r1, #29434	; 0x72fa
   15a6c:	movw	r3, #33081	; 0x8139
   15a70:	movw	r2, #1774	; 0x6ee
   15a74:	movt	r0, #1
   15a78:	b	15a90 <flatcc_builder_table_add@@Base+0x12c>
   15a7c:	movw	r0, #33952	; 0x84a0
   15a80:	movw	r1, #29434	; 0x72fa
   15a84:	movw	r3, #33081	; 0x8139
   15a88:	movw	r2, #1784	; 0x6f8
   15a8c:	movt	r0, #1
   15a90:	movt	r1, #1
   15a94:	movt	r3, #1
   15a98:	bl	124b0 <__assert_fail@plt>

00015a9c <flatcc_builder_table_add_union_vector@@Base>:
   15a9c:	push	{r4, r5, r6, r7, fp, lr}
   15aa0:	add	fp, sp, #16
   15aa4:	mov	r6, r0
   15aa8:	ldr	r0, [r0, #32]
   15aac:	ldrh	r0, [r0, #14]
   15ab0:	cmp	r0, #3
   15ab4:	bne	15b20 <flatcc_builder_table_add_union_vector@@Base+0x84>
   15ab8:	mov	r5, r1
   15abc:	clz	r1, r3
   15ac0:	cmp	r2, #0
   15ac4:	mov	r0, r2
   15ac8:	mov	r4, r3
   15acc:	mov	r7, r2
   15ad0:	movwne	r0, #1
   15ad4:	lsr	r1, r1, #5
   15ad8:	teq	r1, r0
   15adc:	beq	15b38 <flatcc_builder_table_add_union_vector@@Base+0x9c>
   15ae0:	cmp	r7, #0
   15ae4:	beq	15b18 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   15ae8:	sub	r1, r5, #1
   15aec:	mov	r0, r6
   15af0:	bl	15838 <flatcc_builder_table_add_offset@@Base>
   15af4:	cmp	r0, #0
   15af8:	beq	15b50 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   15afc:	str	r7, [r0]
   15b00:	mov	r0, r6
   15b04:	mov	r1, r5
   15b08:	bl	15838 <flatcc_builder_table_add_offset@@Base>
   15b0c:	cmp	r0, #0
   15b10:	beq	15b64 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   15b14:	str	r4, [r0]
   15b18:	mov	r0, #0
   15b1c:	pop	{r4, r5, r6, r7, fp, pc}
   15b20:	movw	r0, #31503	; 0x7b0f
   15b24:	movw	r1, #29434	; 0x72fa
   15b28:	movw	r3, #32401	; 0x7e91
   15b2c:	mov	r2, #1536	; 0x600
   15b30:	movt	r0, #1
   15b34:	b	15b78 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15b38:	movw	r0, #32500	; 0x7ef4
   15b3c:	movw	r1, #29434	; 0x72fa
   15b40:	movw	r3, #32401	; 0x7e91
   15b44:	movw	r2, #1537	; 0x601
   15b48:	movt	r0, #1
   15b4c:	b	15b78 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15b50:	movw	r0, #32379	; 0x7e7b
   15b54:	movw	r1, #29434	; 0x72fa
   15b58:	movw	r3, #32401	; 0x7e91
   15b5c:	movw	r2, #1540	; 0x604
   15b60:	b	15b74 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   15b64:	movw	r0, #32379	; 0x7e7b
   15b68:	movw	r1, #29434	; 0x72fa
   15b6c:	movw	r3, #32401	; 0x7e91
   15b70:	movw	r2, #1544	; 0x608
   15b74:	movt	r0, #1
   15b78:	movt	r1, #1
   15b7c:	movt	r3, #1
   15b80:	bl	124b0 <__assert_fail@plt>

00015b84 <flatcc_builder_create_union_vector@@Base>:
   15b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b88:	add	fp, sp, #28
   15b8c:	sub	sp, sp, #20
   15b90:	mov	sl, r0
   15b94:	mov	r0, #0
   15b98:	mov	r9, r3
   15b9c:	mov	r7, r2
   15ba0:	mov	r4, r1
   15ba4:	str	r0, [sl]
   15ba8:	str	r0, [sl, #4]
   15bac:	mov	r0, r1
   15bb0:	bl	143d8 <flatcc_builder_start_offset_vector@@Base>
   15bb4:	cmp	r0, #0
   15bb8:	beq	15bc4 <flatcc_builder_create_union_vector@@Base+0x40>
   15bbc:	sub	sp, fp, #28
   15bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bc4:	mov	r0, r4
   15bc8:	mov	r1, r9
   15bcc:	bl	13dac <flatcc_builder_extend_offset_vector@@Base>
   15bd0:	cmp	r0, #0
   15bd4:	beq	15bbc <flatcc_builder_create_union_vector@@Base+0x38>
   15bd8:	ldr	r8, [r4, #20]
   15bdc:	ldr	r1, [r4, #24]
   15be0:	add	r0, r8, r9
   15be4:	cmp	r0, r1
   15be8:	str	r0, [r4, #20]
   15bec:	bcc	15c08 <flatcc_builder_create_union_vector@@Base+0x84>
   15bf0:	add	r1, r0, #1
   15bf4:	mov	r0, r4
   15bf8:	mvn	r2, #3
   15bfc:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   15c00:	cmp	r0, #0
   15c04:	bne	15bbc <flatcc_builder_create_union_vector@@Base+0x38>
   15c08:	ldr	r3, [r4, #16]
   15c0c:	adds	r2, r3, r8
   15c10:	beq	15bbc <flatcc_builder_create_union_vector@@Base+0x38>
   15c14:	cmp	r9, #0
   15c18:	beq	15c48 <flatcc_builder_create_union_vector@@Base+0xc4>
   15c1c:	add	r0, r7, #4
   15c20:	mov	r1, r2
   15c24:	mov	r7, r3
   15c28:	mov	r6, r9
   15c2c:	ldrb	r5, [r0, #-4]
   15c30:	subs	r6, r6, #1
   15c34:	strb	r5, [r1], #1
   15c38:	ldr	r5, [r0]
   15c3c:	add	r0, r0, #8
   15c40:	str	r5, [r7], #4
   15c44:	bne	15c2c <flatcc_builder_create_union_vector@@Base+0xa8>
   15c48:	add	r0, sp, #8
   15c4c:	mov	r1, r4
   15c50:	str	r9, [sp]
   15c54:	bl	15cdc <flatcc_builder_create_union_vector_direct@@Base>
   15c58:	ldr	r0, [sp, #8]
   15c5c:	ldr	r1, [sp, #12]
   15c60:	stm	sl, {r0, r1}
   15c64:	mov	r1, #0
   15c68:	ldr	r0, [r4, #16]
   15c6c:	ldr	r2, [r4, #20]
   15c70:	bl	12480 <memset@plt>
   15c74:	ldr	r0, [r4, #32]
   15c78:	ldr	r1, [r4, #60]	; 0x3c
   15c7c:	ldr	r2, [r4, #64]	; 0x40
   15c80:	ldr	r3, [r0, #8]
   15c84:	str	r3, [r4, #20]
   15c88:	ldr	r3, [r0]
   15c8c:	str	r3, [r4, #28]
   15c90:	add	r1, r1, r3
   15c94:	ldr	r7, [r0, #4]
   15c98:	str	r1, [r4, #16]
   15c9c:	sub	r1, r2, r3
   15ca0:	cmp	r1, r7
   15ca4:	movhi	r1, r7
   15ca8:	str	r1, [r4, #24]
   15cac:	ldrh	r1, [r4, #130]	; 0x82
   15cb0:	ldrh	r2, [r4, #128]	; 0x80
   15cb4:	cmp	r2, r1
   15cb8:	strhcc	r1, [r4, #128]	; 0x80
   15cbc:	ldrh	r1, [r0, #12]
   15cc0:	sub	r0, r0, #36	; 0x24
   15cc4:	str	r0, [r4, #32]
   15cc8:	strh	r1, [r4, #130]	; 0x82
   15ccc:	ldr	r0, [r4, #156]	; 0x9c
   15cd0:	sub	r0, r0, #1
   15cd4:	str	r0, [r4, #156]	; 0x9c
   15cd8:	b	15bbc <flatcc_builder_create_union_vector@@Base+0x38>

00015cdc <flatcc_builder_create_union_vector_direct@@Base>:
   15cdc:	push	{r4, r5, r6, r7, fp, lr}
   15ce0:	add	fp, sp, #16
   15ce4:	sub	sp, sp, #8
   15ce8:	ldr	r7, [fp, #8]
   15cec:	mov	r5, r2
   15cf0:	mov	r4, r0
   15cf4:	mov	r0, #0
   15cf8:	mov	r6, r1
   15cfc:	str	r0, [r4]
   15d00:	str	r0, [r4, #4]
   15d04:	mov	r0, r1
   15d08:	mov	r1, r3
   15d0c:	mov	r3, r5
   15d10:	mov	r2, r7
   15d14:	bl	15484 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15d18:	cmp	r0, #0
   15d1c:	str	r0, [r4, #4]
   15d20:	beq	15d4c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   15d24:	mvn	r0, #0
   15d28:	mov	r1, #1
   15d2c:	mov	r2, r7
   15d30:	mov	r3, #1
   15d34:	str	r1, [sp]
   15d38:	str	r0, [sp, #4]
   15d3c:	mov	r0, r6
   15d40:	mov	r1, r5
   15d44:	bl	15230 <flatcc_builder_create_vector@@Base>
   15d48:	str	r0, [r4]
   15d4c:	sub	sp, fp, #16
   15d50:	pop	{r4, r5, r6, r7, fp, pc}

00015d54 <flatcc_builder_start_union_vector@@Base>:
   15d54:	push	{r4, sl, fp, lr}
   15d58:	add	fp, sp, #8
   15d5c:	mov	r1, #4
   15d60:	mov	r4, r0
   15d64:	bl	13778 <flatcc_builder_start_buffer@@Base+0xbc>
   15d68:	mov	r1, r0
   15d6c:	mvn	r0, #0
   15d70:	cmp	r1, #0
   15d74:	popne	{r4, sl, fp, pc}
   15d78:	ldr	r0, [r4, #32]
   15d7c:	mov	r1, #8
   15d80:	mov	r2, #7
   15d84:	str	r1, [r0, #16]
   15d88:	mov	r0, #0
   15d8c:	ldr	r1, [r4, #32]
   15d90:	str	r0, [r1, #20]
   15d94:	ldr	r1, [r4, #32]
   15d98:	strh	r2, [r1, #14]
   15d9c:	ldr	r2, [r4, #28]
   15da0:	ldr	r3, [r4, #60]	; 0x3c
   15da4:	ldr	ip, [r4, #64]	; 0x40
   15da8:	add	r3, r3, r2
   15dac:	sub	r2, ip, r2
   15db0:	str	r3, [r4, #16]
   15db4:	mvn	r3, #3
   15db8:	cmn	r2, #4
   15dbc:	movcs	r2, r3
   15dc0:	str	r2, [r4, #24]
   15dc4:	str	r3, [r1, #4]
   15dc8:	pop	{r4, sl, fp, pc}

00015dcc <flatcc_builder_end_union_vector@@Base>:
   15dcc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15dd0:	add	fp, sp, #24
   15dd4:	sub	sp, sp, #16
   15dd8:	mov	r8, r0
   15ddc:	mov	r0, #0
   15de0:	mov	r4, r1
   15de4:	str	r0, [r8]
   15de8:	str	r0, [r8, #4]
   15dec:	ldr	r0, [r1, #32]
   15df0:	ldrh	r1, [r0, #14]
   15df4:	cmp	r1, #7
   15df8:	bne	15f10 <flatcc_builder_end_union_vector@@Base+0x144>
   15dfc:	ldr	r9, [r0, #20]
   15e00:	ldr	r7, [r4, #20]
   15e04:	ldr	r1, [r4, #24]
   15e08:	add	r0, r9, r9, lsl #2
   15e0c:	add	r0, r7, r0
   15e10:	cmp	r0, r1
   15e14:	str	r0, [r4, #20]
   15e18:	bcc	15e34 <flatcc_builder_end_union_vector@@Base+0x68>
   15e1c:	add	r1, r0, #1
   15e20:	mov	r0, r4
   15e24:	mvn	r2, #3
   15e28:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   15e2c:	cmp	r0, #0
   15e30:	bne	15f08 <flatcc_builder_end_union_vector@@Base+0x13c>
   15e34:	ldr	r0, [r4, #16]
   15e38:	adds	r3, r0, r7
   15e3c:	beq	15f08 <flatcc_builder_end_union_vector@@Base+0x13c>
   15e40:	add	r2, r3, r9, lsl #2
   15e44:	cmp	r9, #0
   15e48:	beq	15e78 <flatcc_builder_end_union_vector@@Base+0xac>
   15e4c:	add	r0, r0, #4
   15e50:	mov	r1, r2
   15e54:	mov	r7, r3
   15e58:	mov	r6, r9
   15e5c:	ldrb	r5, [r0, #-4]
   15e60:	subs	r6, r6, #1
   15e64:	strb	r5, [r1], #1
   15e68:	ldr	r5, [r0]
   15e6c:	add	r0, r0, #8
   15e70:	str	r5, [r7], #4
   15e74:	bne	15e5c <flatcc_builder_end_union_vector@@Base+0x90>
   15e78:	add	r0, sp, #8
   15e7c:	mov	r1, r4
   15e80:	str	r9, [sp]
   15e84:	bl	15cdc <flatcc_builder_create_union_vector_direct@@Base>
   15e88:	ldr	r0, [sp, #8]
   15e8c:	ldr	r1, [sp, #12]
   15e90:	stm	r8, {r0, r1}
   15e94:	mov	r1, #0
   15e98:	ldr	r0, [r4, #16]
   15e9c:	ldr	r2, [r4, #20]
   15ea0:	bl	12480 <memset@plt>
   15ea4:	ldr	r0, [r4, #32]
   15ea8:	ldr	r1, [r4, #60]	; 0x3c
   15eac:	ldr	r2, [r4, #64]	; 0x40
   15eb0:	ldr	r3, [r0, #8]
   15eb4:	str	r3, [r4, #20]
   15eb8:	ldr	r3, [r0]
   15ebc:	str	r3, [r4, #28]
   15ec0:	add	r1, r1, r3
   15ec4:	ldr	r7, [r0, #4]
   15ec8:	str	r1, [r4, #16]
   15ecc:	sub	r1, r2, r3
   15ed0:	cmp	r1, r7
   15ed4:	movhi	r1, r7
   15ed8:	str	r1, [r4, #24]
   15edc:	ldrh	r1, [r4, #130]	; 0x82
   15ee0:	ldrh	r2, [r4, #128]	; 0x80
   15ee4:	cmp	r2, r1
   15ee8:	strhcc	r1, [r4, #128]	; 0x80
   15eec:	ldrh	r1, [r0, #12]
   15ef0:	sub	r0, r0, #36	; 0x24
   15ef4:	str	r0, [r4, #32]
   15ef8:	strh	r1, [r4, #130]	; 0x82
   15efc:	ldr	r0, [r4, #156]	; 0x9c
   15f00:	sub	r0, r0, #1
   15f04:	str	r0, [r4, #156]	; 0x9c
   15f08:	sub	sp, fp, #24
   15f0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15f10:	movw	r0, #32540	; 0x7f1c
   15f14:	movw	r1, #29434	; 0x72fa
   15f18:	movw	r3, #32590	; 0x7f4e
   15f1c:	movw	r2, #1617	; 0x651
   15f20:	movt	r0, #1
   15f24:	movt	r1, #1
   15f28:	movt	r3, #1
   15f2c:	bl	124b0 <__assert_fail@plt>

00015f30 <flatcc_builder_union_vector_count@@Base>:
   15f30:	ldr	r0, [r0, #32]
   15f34:	ldr	r0, [r0, #20]
   15f38:	bx	lr

00015f3c <flatcc_builder_union_vector_edit@@Base>:
   15f3c:	ldr	r0, [r0, #16]
   15f40:	bx	lr

00015f44 <flatcc_builder_extend_union_vector@@Base>:
   15f44:	push	{r4, r5, fp, lr}
   15f48:	add	fp, sp, #8
   15f4c:	mov	r4, r0
   15f50:	ldr	r0, [r0, #32]
   15f54:	ldr	r2, [r0, #20]
   15f58:	adds	r2, r2, r1
   15f5c:	cmpcc	r2, #536870912	; 0x20000000
   15f60:	bcc	15f84 <flatcc_builder_extend_union_vector@@Base+0x40>
   15f64:	movw	r0, #33705	; 0x83a9
   15f68:	movw	r1, #29434	; 0x72fa
   15f6c:	movw	r3, #33732	; 0x83c4
   15f70:	mov	r2, #892	; 0x37c
   15f74:	movt	r0, #1
   15f78:	movt	r1, #1
   15f7c:	movt	r3, #1
   15f80:	bl	124b0 <__assert_fail@plt>
   15f84:	str	r2, [r0, #20]
   15f88:	ldr	r5, [r4, #20]
   15f8c:	ldr	r2, [r4, #24]
   15f90:	add	r0, r5, r1, lsl #3
   15f94:	cmp	r0, r2
   15f98:	str	r0, [r4, #20]
   15f9c:	bcc	15fc0 <flatcc_builder_extend_union_vector@@Base+0x7c>
   15fa0:	add	r1, r0, #1
   15fa4:	mov	r0, r4
   15fa8:	mvn	r2, #3
   15fac:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   15fb0:	mov	r1, r0
   15fb4:	mov	r0, #0
   15fb8:	cmp	r1, #0
   15fbc:	popne	{r4, r5, fp, pc}
   15fc0:	ldr	r0, [r4, #16]
   15fc4:	add	r0, r0, r5
   15fc8:	pop	{r4, r5, fp, pc}

00015fcc <flatcc_builder_truncate_union_vector@@Base>:
   15fcc:	push	{fp, lr}
   15fd0:	mov	fp, sp
   15fd4:	ldr	r2, [r0, #32]
   15fd8:	ldrh	r3, [r2, #14]
   15fdc:	cmp	r3, #7
   15fe0:	bne	16028 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   15fe4:	ldr	r3, [r2, #20]
   15fe8:	cmp	r3, r1
   15fec:	bcc	16040 <flatcc_builder_truncate_union_vector@@Base+0x74>
   15ff0:	sub	r3, r3, r1
   15ff4:	str	r3, [r2, #20]
   15ff8:	ldr	r2, [r0, #32]
   15ffc:	ldr	r3, [r0, #20]
   16000:	ldr	ip, [r0, #16]
   16004:	ldr	r2, [r2, #16]
   16008:	mls	r3, r2, r1, r3
   1600c:	mul	r2, r2, r1
   16010:	mov	r1, #0
   16014:	str	r3, [r0, #20]
   16018:	add	r0, ip, r3
   1601c:	bl	12480 <memset@plt>
   16020:	mov	r0, #0
   16024:	pop	{fp, pc}
   16028:	movw	r0, #32540	; 0x7f1c
   1602c:	movw	r1, #29434	; 0x72fa
   16030:	movw	r3, #32673	; 0x7fa1
   16034:	movw	r2, #1665	; 0x681
   16038:	movt	r0, #1
   1603c:	b	16054 <flatcc_builder_truncate_union_vector@@Base+0x88>
   16040:	movw	r0, #31104	; 0x7980
   16044:	movw	r1, #29434	; 0x72fa
   16048:	movw	r3, #32673	; 0x7fa1
   1604c:	movw	r2, #1666	; 0x682
   16050:	movt	r0, #1
   16054:	movt	r1, #1
   16058:	movt	r3, #1
   1605c:	bl	124b0 <__assert_fail@plt>

00016060 <flatcc_builder_union_vector_push@@Base>:
   16060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16064:	add	fp, sp, #24
   16068:	mov	r7, r0
   1606c:	ldr	r0, [r0, #32]
   16070:	mov	r5, r1
   16074:	ldrh	r1, [r0, #14]
   16078:	cmp	r1, #7
   1607c:	bne	160e4 <flatcc_builder_union_vector_push@@Base+0x84>
   16080:	ldr	r1, [r0, #20]
   16084:	mov	r6, #0
   16088:	cmn	r1, #-536870911	; 0xe0000001
   1608c:	beq	160dc <flatcc_builder_union_vector_push@@Base+0x7c>
   16090:	add	r1, r1, #1
   16094:	mov	r8, r2
   16098:	str	r1, [r0, #20]
   1609c:	ldr	r4, [r7, #20]
   160a0:	ldr	r0, [r7, #24]
   160a4:	add	r1, r4, #8
   160a8:	cmp	r1, r0
   160ac:	str	r1, [r7, #20]
   160b0:	bcc	160cc <flatcc_builder_union_vector_push@@Base+0x6c>
   160b4:	add	r1, r4, #9
   160b8:	mov	r0, r7
   160bc:	mvn	r2, #3
   160c0:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   160c4:	cmp	r0, #0
   160c8:	bne	160dc <flatcc_builder_union_vector_push@@Base+0x7c>
   160cc:	ldr	r0, [r7, #16]
   160d0:	adds	r0, r0, r4
   160d4:	movne	r6, r0
   160d8:	stmne	r0, {r5, r8}
   160dc:	mov	r0, r6
   160e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160e4:	movw	r0, #32540	; 0x7f1c
   160e8:	movw	r1, #29434	; 0x72fa
   160ec:	movw	r3, #32742	; 0x7fe6
   160f0:	movw	r2, #1677	; 0x68d
   160f4:	movt	r0, #1
   160f8:	movt	r1, #1
   160fc:	movt	r3, #1
   16100:	bl	124b0 <__assert_fail@plt>

00016104 <flatcc_builder_append_union_vector@@Base>:
   16104:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16108:	add	fp, sp, #24
   1610c:	mov	r6, r0
   16110:	ldr	r0, [r0, #32]
   16114:	mov	r8, r1
   16118:	ldrh	r1, [r0, #14]
   1611c:	cmp	r1, #7
   16120:	bne	161bc <flatcc_builder_append_union_vector@@Base+0xb8>
   16124:	ldr	r1, [r0, #20]
   16128:	mov	r5, r2
   1612c:	adds	r1, r1, r2
   16130:	cmpcc	r1, #536870912	; 0x20000000
   16134:	bcc	16158 <flatcc_builder_append_union_vector@@Base+0x54>
   16138:	movw	r0, #33705	; 0x83a9
   1613c:	movw	r1, #29434	; 0x72fa
   16140:	movw	r3, #33732	; 0x83c4
   16144:	mov	r2, #892	; 0x37c
   16148:	movt	r0, #1
   1614c:	movt	r1, #1
   16150:	movt	r3, #1
   16154:	bl	124b0 <__assert_fail@plt>
   16158:	str	r1, [r0, #20]
   1615c:	ldr	r4, [r6, #20]
   16160:	ldr	r1, [r6, #24]
   16164:	add	r0, r4, r5, lsl #3
   16168:	cmp	r0, r1
   1616c:	str	r0, [r6, #20]
   16170:	bcc	16190 <flatcc_builder_append_union_vector@@Base+0x8c>
   16174:	add	r1, r0, #1
   16178:	mov	r0, r6
   1617c:	mvn	r2, #3
   16180:	bl	167ec <flatcc_builder_get_emit_context@@Base+0x8>
   16184:	mov	r7, #0
   16188:	cmp	r0, #0
   1618c:	bne	161b4 <flatcc_builder_append_union_vector@@Base+0xb0>
   16190:	ldr	r0, [r6, #16]
   16194:	adds	r7, r0, r4
   16198:	beq	161b0 <flatcc_builder_append_union_vector@@Base+0xac>
   1619c:	lsl	r2, r5, #3
   161a0:	mov	r0, r7
   161a4:	mov	r1, r8
   161a8:	bl	123fc <memcpy@plt>
   161ac:	b	161b4 <flatcc_builder_append_union_vector@@Base+0xb0>
   161b0:	mov	r7, #0
   161b4:	mov	r0, r7
   161b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161bc:	movw	r0, #32540	; 0x7f1c
   161c0:	movw	r1, #29434	; 0x72fa
   161c4:	movw	r3, #32851	; 0x8053
   161c8:	movw	r2, #1692	; 0x69c
   161cc:	movt	r0, #1
   161d0:	movt	r1, #1
   161d4:	movt	r3, #1
   161d8:	bl	124b0 <__assert_fail@plt>

000161dc <flatcc_builder_create_string@@Base>:
   161dc:	push	{r4, r5, r6, sl, fp, lr}
   161e0:	add	fp, sp, #16
   161e4:	sub	sp, sp, #80	; 0x50
   161e8:	str	r2, [fp, #-20]	; 0xffffffec
   161ec:	mvn	r5, r2
   161f0:	mov	r6, r0
   161f4:	sub	r3, fp, #20
   161f8:	cmp	r2, #0
   161fc:	add	lr, sp, #4
   16200:	ldr	ip, [r0, #136]	; 0x88
   16204:	mov	r0, #4
   16208:	str	r0, [sp, #16]
   1620c:	str	r3, [sp, #12]
   16210:	mov	r3, #1
   16214:	str	r0, [sp, #4]
   16218:	addne	r0, r2, #4
   1621c:	str	r3, [sp, #8]
   16220:	strne	r2, [sp, #24]
   16224:	movw	r2, #28904	; 0x70e8
   16228:	movne	r3, #2
   1622c:	strne	r1, [sp, #20]
   16230:	strne	r3, [sp, #8]
   16234:	strne	r0, [sp, #4]
   16238:	movt	r2, #1
   1623c:	add	r5, ip, r5
   16240:	and	r5, r5, #3
   16244:	add	r5, r5, #1
   16248:	add	r1, r0, r5
   1624c:	add	r0, lr, r3, lsl #3
   16250:	str	r1, [sp, #4]
   16254:	cmp	r1, #0
   16258:	str	r2, [r0, #8]
   1625c:	add	r2, r3, #1
   16260:	str	r5, [r0, #12]
   16264:	str	r2, [sp, #8]
   16268:	ble	162bc <flatcc_builder_create_string@@Base+0xe0>
   1626c:	ldr	r0, [r6, #36]	; 0x24
   16270:	ldr	r4, [r6, #44]	; 0x2c
   16274:	sub	r5, ip, r1
   16278:	str	r1, [sp]
   1627c:	add	r1, lr, #8
   16280:	mov	r3, r5
   16284:	blx	r4
   16288:	cmp	r0, #0
   1628c:	streq	r5, [r6, #136]	; 0x88
   16290:	moveq	r0, r5
   16294:	subeq	sp, fp, #16
   16298:	popeq	{r4, r5, r6, sl, fp, pc}
   1629c:	movw	r0, #33952	; 0x84a0
   162a0:	movw	r1, #29434	; 0x72fa
   162a4:	movw	r3, #33631	; 0x835f
   162a8:	movw	r2, #651	; 0x28b
   162ac:	movt	r0, #1
   162b0:	movt	r1, #1
   162b4:	movt	r3, #1
   162b8:	bl	124b0 <__assert_fail@plt>
   162bc:	movw	r0, #33952	; 0x84a0
   162c0:	movw	r1, #29434	; 0x72fa
   162c4:	movw	r3, #33631	; 0x835f
   162c8:	movw	r2, #647	; 0x287
   162cc:	movt	r0, #1
   162d0:	movt	r1, #1
   162d4:	movt	r3, #1
   162d8:	bl	124b0 <__assert_fail@plt>

000162dc <flatcc_builder_create_string_str@@Base>:
   162dc:	push	{r4, r5, fp, lr}
   162e0:	add	fp, sp, #8
   162e4:	mov	r5, r0
   162e8:	mov	r0, r1
   162ec:	mov	r4, r1
   162f0:	bl	1245c <strlen@plt>
   162f4:	mov	r2, r0
   162f8:	mov	r0, r5
   162fc:	mov	r1, r4
   16300:	pop	{r4, r5, fp, lr}
   16304:	b	161dc <flatcc_builder_create_string@@Base>

00016308 <flatcc_builder_create_string_strn@@Base>:
   16308:	push	{r4, r5, r6, sl, fp, lr}
   1630c:	add	fp, sp, #16
   16310:	mov	r6, r0
   16314:	mov	r5, r1
   16318:	mov	r0, r1
   1631c:	mov	r1, #0
   16320:	mov	r4, r2
   16324:	bl	1248c <memchr@plt>
   16328:	cmp	r0, #0
   1632c:	mov	r1, r5
   16330:	subne	r4, r0, r5
   16334:	mov	r0, r6
   16338:	mov	r2, r4
   1633c:	pop	{r4, r5, r6, sl, fp, lr}
   16340:	b	161dc <flatcc_builder_create_string@@Base>

00016344 <flatcc_builder_end_string@@Base>:
   16344:	push	{r4, r5, fp, lr}
   16348:	add	fp, sp, #8
   1634c:	mov	r4, r0
   16350:	ldr	r0, [r0, #32]
   16354:	ldrh	r1, [r0, #14]
   16358:	cmp	r1, #6
   1635c:	bne	16404 <flatcc_builder_end_string@@Base+0xc0>
   16360:	ldr	r2, [r0, #20]
   16364:	ldr	r0, [r4, #20]
   16368:	cmp	r2, r0
   1636c:	bne	1641c <flatcc_builder_end_string@@Base+0xd8>
   16370:	ldr	r1, [r4, #16]
   16374:	mov	r0, r4
   16378:	bl	161dc <flatcc_builder_create_string@@Base>
   1637c:	mov	r5, r0
   16380:	cmp	r0, #0
   16384:	beq	163fc <flatcc_builder_end_string@@Base+0xb8>
   16388:	ldr	r0, [r4, #16]
   1638c:	ldr	r2, [r4, #20]
   16390:	mov	r1, #0
   16394:	bl	12480 <memset@plt>
   16398:	ldr	r0, [r4, #32]
   1639c:	ldr	r1, [r4, #60]	; 0x3c
   163a0:	ldr	ip, [r4, #64]	; 0x40
   163a4:	ldr	r3, [r0, #8]
   163a8:	str	r3, [r4, #20]
   163ac:	ldr	r3, [r0]
   163b0:	str	r3, [r4, #28]
   163b4:	add	r1, r1, r3
   163b8:	ldr	r2, [r0, #4]
   163bc:	str	r1, [r4, #16]
   163c0:	sub	r1, ip, r3
   163c4:	cmp	r1, r2
   163c8:	movhi	r1, r2
   163cc:	str	r1, [r4, #24]
   163d0:	ldrh	r1, [r4, #130]	; 0x82
   163d4:	ldrh	r2, [r4, #128]	; 0x80
   163d8:	cmp	r2, r1
   163dc:	strhcc	r1, [r4, #128]	; 0x80
   163e0:	ldrh	r1, [r0, #12]
   163e4:	sub	r0, r0, #36	; 0x24
   163e8:	str	r0, [r4, #32]
   163ec:	strh	r1, [r4, #130]	; 0x82
   163f0:	ldr	r0, [r4, #156]	; 0x9c
   163f4:	sub	r0, r0, #1
   163f8:	str	r0, [r4, #156]	; 0x9c
   163fc:	mov	r0, r5
   16400:	pop	{r4, r5, fp, pc}
   16404:	movw	r0, #30751	; 0x781f
   16408:	movw	r1, #29434	; 0x72fa
   1640c:	movw	r3, #32978	; 0x80d2
   16410:	movw	r2, #1732	; 0x6c4
   16414:	movt	r0, #1
   16418:	b	16430 <flatcc_builder_end_string@@Base+0xec>
   1641c:	movw	r0, #33045	; 0x8115
   16420:	movw	r1, #29434	; 0x72fa
   16424:	movw	r3, #32978	; 0x80d2
   16428:	movw	r2, #1733	; 0x6c5
   1642c:	movt	r0, #1
   16430:	movt	r1, #1
   16434:	movt	r3, #1
   16438:	bl	124b0 <__assert_fail@plt>

0001643c <flatcc_builder_string_edit@@Base>:
   1643c:	ldr	r0, [r0, #16]
   16440:	bx	lr

00016444 <flatcc_builder_string_len@@Base>:
   16444:	ldr	r0, [r0, #32]
   16448:	ldr	r0, [r0, #20]
   1644c:	bx	lr

00016450 <flatcc_builder_table_edit@@Base>:
   16450:	push	{fp, lr}
   16454:	mov	fp, sp
   16458:	ldr	r2, [r0, #32]
   1645c:	ldrh	r2, [r2, #14]
   16460:	cmp	r2, #3
   16464:	ldreq	r2, [r0, #16]
   16468:	ldreq	r0, [r0, #20]
   1646c:	addeq	r0, r2, r0
   16470:	subeq	r0, r0, r1
   16474:	popeq	{fp, pc}
   16478:	movw	r0, #31503	; 0x7b0f
   1647c:	movw	r1, #29434	; 0x72fa
   16480:	movw	r3, #33223	; 0x81c7
   16484:	movw	r2, #1794	; 0x702
   16488:	movt	r0, #1
   1648c:	movt	r1, #1
   16490:	movt	r3, #1
   16494:	bl	124b0 <__assert_fail@plt>

00016498 <flatcc_builder_table_add_copy@@Base>:
   16498:	push	{r4, r5, r6, sl, fp, lr}
   1649c:	add	fp, sp, #16
   164a0:	mov	r4, r3
   164a4:	ldr	r3, [fp, #8]
   164a8:	mov	r5, r2
   164ac:	mov	r2, r4
   164b0:	bl	15964 <flatcc_builder_table_add@@Base>
   164b4:	mov	r6, r0
   164b8:	cmp	r0, #0
   164bc:	beq	164d0 <flatcc_builder_table_add_copy@@Base+0x38>
   164c0:	mov	r0, r6
   164c4:	mov	r1, r5
   164c8:	mov	r2, r4
   164cc:	bl	123fc <memcpy@plt>
   164d0:	mov	r0, r6
   164d4:	pop	{r4, r5, r6, sl, fp, pc}

000164d8 <flatcc_builder_push_buffer_alignment@@Base>:
   164d8:	ldrh	r1, [r0, #128]	; 0x80
   164dc:	mov	r2, #4
   164e0:	strh	r2, [r0, #128]	; 0x80
   164e4:	mov	r0, r1
   164e8:	bx	lr

000164ec <flatcc_builder_pop_buffer_alignment@@Base>:
   164ec:	ldrh	r2, [r0, #128]	; 0x80
   164f0:	cmp	r2, r1
   164f4:	strhcc	r1, [r0, #128]	; 0x80
   164f8:	bx	lr

000164fc <flatcc_builder_get_buffer_alignment@@Base>:
   164fc:	ldrh	r0, [r0, #128]	; 0x80
   16500:	bx	lr

00016504 <flatcc_builder_set_vtable_clustering@@Base>:
   16504:	clz	r1, r1
   16508:	lsr	r1, r1, #5
   1650c:	str	r1, [r0, #180]	; 0xb4
   16510:	bx	lr

00016514 <flatcc_builder_set_block_align@@Base>:
   16514:	strh	r1, [r0, #132]	; 0x84
   16518:	bx	lr

0001651c <flatcc_builder_get_level@@Base>:
   1651c:	ldr	r0, [r0, #156]	; 0x9c
   16520:	bx	lr

00016524 <flatcc_builder_set_max_level@@Base>:
   16524:	str	r1, [r0, #176]	; 0xb0
   16528:	ldr	r2, [r0, #160]	; 0xa0
   1652c:	cmp	r2, r1
   16530:	strlt	r1, [r0, #160]	; 0xa0
   16534:	bx	lr

00016538 <flatcc_builder_get_buffer_size@@Base>:
   16538:	ldr	r1, [r0, #136]	; 0x88
   1653c:	ldr	r0, [r0, #140]	; 0x8c
   16540:	sub	r0, r0, r1
   16544:	bx	lr

00016548 <flatcc_builder_get_buffer_start@@Base>:
   16548:	ldr	r0, [r0, #136]	; 0x88
   1654c:	bx	lr

00016550 <flatcc_builder_get_buffer_end@@Base>:
   16550:	ldr	r0, [r0, #140]	; 0x8c
   16554:	bx	lr

00016558 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16558:	str	r1, [r0, #172]	; 0xac
   1655c:	bx	lr

00016560 <flatcc_builder_set_identifier@@Base>:
   16560:	movw	r2, #28904	; 0x70e8
   16564:	cmp	r1, #0
   16568:	movt	r2, #1
   1656c:	movne	r2, r1
   16570:	ldr	r1, [r2]
   16574:	str	r1, [r0, #168]	; 0xa8
   16578:	bx	lr

0001657c <flatcc_builder_get_type@@Base>:
   1657c:	ldr	r0, [r0, #32]
   16580:	cmp	r0, #0
   16584:	ldrhne	r0, [r0, #14]
   16588:	moveq	r0, #0
   1658c:	bx	lr

00016590 <flatcc_builder_get_type_at@@Base>:
   16590:	mov	r2, r0
   16594:	mov	r0, #0
   16598:	cmp	r1, #1
   1659c:	blt	165c0 <flatcc_builder_get_type_at@@Base+0x30>
   165a0:	ldr	r3, [r2, #156]	; 0x9c
   165a4:	cmp	r3, r1
   165a8:	bxlt	lr
   165ac:	sub	r0, r1, r3
   165b0:	ldr	r1, [r2, #32]
   165b4:	add	r0, r0, r0, lsl #3
   165b8:	add	r0, r1, r0, lsl #2
   165bc:	ldrh	r0, [r0, #14]
   165c0:	bx	lr

000165c4 <flatcc_builder_get_direct_buffer@@Base>:
   165c4:	ldr	r2, [r0, #184]	; 0xb8
   165c8:	cmp	r2, #0
   165cc:	beq	165e0 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   165d0:	ldr	r2, [r0, #188]	; 0xbc
   165d4:	ldr	r3, [r0, #192]	; 0xc0
   165d8:	cmp	r2, r3
   165dc:	beq	165f0 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   165e0:	mov	r0, #0
   165e4:	cmp	r1, #0
   165e8:	strne	r0, [r1]
   165ec:	bx	lr
   165f0:	cmp	r1, #0
   165f4:	ldrne	r2, [r0, #212]	; 0xd4
   165f8:	strne	r2, [r1]
   165fc:	ldr	r0, [r0, #196]	; 0xc4
   16600:	bx	lr

00016604 <flatcc_builder_copy_buffer@@Base>:
   16604:	push	{fp, lr}
   16608:	mov	fp, sp
   1660c:	ldr	r3, [r0, #184]	; 0xb8
   16610:	cmp	r3, #0
   16614:	beq	16648 <flatcc_builder_copy_buffer@@Base+0x44>
   16618:	add	r0, r0, #188	; 0xbc
   1661c:	bl	16d10 <flatcc_emitter_copy_buffer@@Base>
   16620:	cmp	r0, #0
   16624:	popne	{fp, pc}
   16628:	movw	r0, #28816	; 0x7090
   1662c:	movw	r1, #29434	; 0x72fa
   16630:	movw	r3, #33362	; 0x8252
   16634:	movw	r2, #1926	; 0x786
   16638:	movt	r0, #1
   1663c:	movt	r1, #1
   16640:	movt	r3, #1
   16644:	bl	124b0 <__assert_fail@plt>
   16648:	mov	r0, #0
   1664c:	pop	{fp, pc}

00016650 <flatcc_builder_finalize_buffer@@Base>:
   16650:	push	{r4, r5, r6, sl, fp, lr}
   16654:	add	fp, sp, #16
   16658:	mov	r4, r0
   1665c:	ldr	r0, [r0, #136]	; 0x88
   16660:	cmp	r1, #0
   16664:	ldr	r2, [r4, #140]	; 0x8c
   16668:	sub	r5, r2, r0
   1666c:	mov	r0, r5
   16670:	strne	r5, [r1]
   16674:	bl	1242c <malloc@plt>
   16678:	cmp	r0, #0
   1667c:	beq	166c0 <flatcc_builder_finalize_buffer@@Base+0x70>
   16680:	mov	r6, r0
   16684:	mov	r0, r4
   16688:	mov	r2, r5
   1668c:	mov	r1, r6
   16690:	bl	16604 <flatcc_builder_copy_buffer@@Base>
   16694:	cmp	r0, #0
   16698:	movne	r0, r6
   1669c:	popne	{r4, r5, r6, sl, fp, pc}
   166a0:	movw	r0, #33952	; 0x84a0
   166a4:	movw	r1, #29434	; 0x72fa
   166a8:	movw	r3, #33431	; 0x8297
   166ac:	movw	r2, #1948	; 0x79c
   166b0:	movt	r0, #1
   166b4:	movt	r1, #1
   166b8:	movt	r3, #1
   166bc:	bl	124b0 <__assert_fail@plt>
   166c0:	movw	r0, #33952	; 0x84a0
   166c4:	movw	r1, #29434	; 0x72fa
   166c8:	movw	r3, #33431	; 0x8297
   166cc:	movw	r2, #1944	; 0x798
   166d0:	movt	r0, #1
   166d4:	movt	r1, #1
   166d8:	movt	r3, #1
   166dc:	bl	124b0 <__assert_fail@plt>

000166e0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   166e0:	push	{r4, r5, r6, r7, fp, lr}
   166e4:	add	fp, sp, #16
   166e8:	sub	sp, sp, #8
   166ec:	mov	r5, r0
   166f0:	mov	r4, r1
   166f4:	ldr	r0, [r0, #136]	; 0x88
   166f8:	ldr	r1, [r5, #140]	; 0x8c
   166fc:	cmp	r4, #0
   16700:	sub	r0, r1, r0
   16704:	mov	r1, #0
   16708:	strne	r0, [r4]
   1670c:	ldrh	r2, [r5, #128]	; 0x80
   16710:	str	r1, [sp, #4]
   16714:	add	r0, r0, r2
   16718:	cmp	r2, #4
   1671c:	mov	r1, r2
   16720:	rsb	r2, r2, #0
   16724:	sub	r0, r0, #1
   16728:	movls	r1, #4
   1672c:	and	r7, r0, r2
   16730:	add	r0, sp, #4
   16734:	mov	r2, r7
   16738:	bl	12474 <posix_memalign@plt>
   1673c:	ldr	r6, [sp, #4]
   16740:	cmp	r0, #0
   16744:	cmpne	r6, #0
   16748:	bne	1676c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   1674c:	cmp	r6, #0
   16750:	beq	16774 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   16754:	mov	r0, r5
   16758:	mov	r1, r6
   1675c:	mov	r2, r7
   16760:	bl	16604 <flatcc_builder_copy_buffer@@Base>
   16764:	cmp	r0, #0
   16768:	bne	16780 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   1676c:	mov	r0, r6
   16770:	bl	123f0 <free@plt>
   16774:	mov	r6, #0
   16778:	cmp	r4, #0
   1677c:	strne	r6, [r4]
   16780:	mov	r0, r6
   16784:	sub	sp, fp, #16
   16788:	pop	{r4, r5, r6, r7, fp, pc}

0001678c <flatcc_builder_aligned_alloc@@Base>:
   1678c:	push	{fp, lr}
   16790:	mov	fp, sp
   16794:	sub	sp, sp, #8
   16798:	mov	r2, r1
   1679c:	mov	r1, r0
   167a0:	mov	r0, #0
   167a4:	cmp	r1, #4
   167a8:	str	r0, [sp, #4]
   167ac:	add	r0, sp, #4
   167b0:	movls	r1, #4
   167b4:	bl	12474 <posix_memalign@plt>
   167b8:	mov	r1, r0
   167bc:	ldr	r0, [sp, #4]
   167c0:	cmp	r1, #0
   167c4:	cmpne	r0, #0
   167c8:	beq	167d8 <flatcc_builder_aligned_alloc@@Base+0x4c>
   167cc:	bl	123f0 <free@plt>
   167d0:	mov	r0, #0
   167d4:	str	r0, [sp, #4]
   167d8:	mov	sp, fp
   167dc:	pop	{fp, pc}

000167e0 <flatcc_builder_aligned_free@@Base>:
   167e0:	b	123f0 <free@plt>

000167e4 <flatcc_builder_get_emit_context@@Base>:
   167e4:	ldr	r0, [r0, #36]	; 0x24
   167e8:	bx	lr
   167ec:	push	{r4, r5, r6, sl, fp, lr}
   167f0:	add	fp, sp, #16
   167f4:	sub	sp, sp, #8
   167f8:	mov	r6, r2
   167fc:	ldr	r2, [r0, #28]
   16800:	mov	r5, r0
   16804:	ldr	r0, [r0, #40]	; 0x28
   16808:	mov	r3, #1
   1680c:	ldr	r4, [r5, #48]	; 0x30
   16810:	str	r3, [sp]
   16814:	mov	r3, #1
   16818:	add	r2, r2, r1
   1681c:	add	r1, r5, #60	; 0x3c
   16820:	blx	r4
   16824:	mov	r1, r0
   16828:	mvn	r0, #0
   1682c:	cmp	r1, #0
   16830:	bne	16864 <flatcc_builder_get_emit_context@@Base+0x80>
   16834:	ldr	r0, [r5, #28]
   16838:	ldr	r2, [r5, #60]	; 0x3c
   1683c:	ldr	r3, [r5, #64]	; 0x40
   16840:	ldr	r1, [r5, #32]
   16844:	add	r2, r2, r0
   16848:	sub	r0, r3, r0
   1684c:	cmp	r0, r6
   16850:	str	r2, [r5, #16]
   16854:	movhi	r0, r6
   16858:	str	r0, [r5, #24]
   1685c:	mov	r0, #0
   16860:	str	r6, [r1, #4]
   16864:	sub	sp, fp, #16
   16868:	pop	{r4, r5, r6, sl, fp, pc}

0001686c <flatcc_emitter_recycle_page@@Base>:
   1686c:	ldr	r3, [r0]
   16870:	mov	r2, r0
   16874:	mvn	r0, #0
   16878:	cmp	r3, r1
   1687c:	beq	168bc <flatcc_emitter_recycle_page@@Base+0x50>
   16880:	ldr	r2, [r2, #4]
   16884:	cmp	r2, r1
   16888:	bxeq	lr
   1688c:	ldr	r0, [r1, #2944]	; 0xb80
   16890:	ldr	r2, [r1, #2948]	; 0xb84
   16894:	str	r2, [r0, #2948]	; 0xb84
   16898:	ldr	r2, [r1, #2948]	; 0xb84
   1689c:	str	r0, [r2, #2944]	; 0xb80
   168a0:	ldr	r0, [r3, #2948]	; 0xb84
   168a4:	str	r3, [r1, #2944]	; 0xb80
   168a8:	str	r0, [r1, #2948]	; 0xb84
   168ac:	str	r1, [r0, #2944]	; 0xb80
   168b0:	ldr	r0, [r1, #2944]	; 0xb80
   168b4:	str	r1, [r0, #2948]	; 0xb84
   168b8:	mov	r0, #0
   168bc:	bx	lr

000168c0 <flatcc_emitter_reset@@Base>:
   168c0:	push	{r4, sl, fp, lr}
   168c4:	add	fp, sp, #8
   168c8:	ldr	r1, [r0]
   168cc:	cmp	r1, #0
   168d0:	beq	16988 <flatcc_emitter_reset@@Base+0xc8>
   168d4:	mov	r4, r0
   168d8:	add	r2, r1, #1472	; 0x5c0
   168dc:	mov	r0, #1472	; 0x5c0
   168e0:	mov	r3, #0
   168e4:	stmib	r4, {r1, r2}
   168e8:	str	r0, [r4, #12]
   168ec:	str	r2, [r4, #16]
   168f0:	str	r0, [r4, #20]
   168f4:	movw	r0, #64064	; 0xfa40
   168f8:	movt	r0, #65535	; 0xffff
   168fc:	str	r0, [r1, #2952]	; 0xb88
   16900:	ldr	r2, [r4, #32]
   16904:	ldr	r0, [r4, #24]
   16908:	cmp	r2, #0
   1690c:	moveq	r2, r0
   16910:	streq	r0, [r4, #32]
   16914:	str	r3, [r4, #24]
   16918:	add	r2, r2, r2, lsl #1
   1691c:	lsr	r2, r2, #2
   16920:	add	r0, r2, r0, lsr #2
   16924:	str	r0, [r4, #32]
   16928:	ldr	r2, [r4, #28]
   1692c:	cmp	r2, r0, lsl #1
   16930:	bls	16988 <flatcc_emitter_reset@@Base+0xc8>
   16934:	mov	r2, r1
   16938:	ldr	r0, [r2, #2944]!	; 0xb80
   1693c:	cmp	r0, r1
   16940:	popeq	{r4, sl, fp, pc}
   16944:	ldr	r3, [r0, #2944]	; 0xb80
   16948:	str	r3, [r2]
   1694c:	ldr	r2, [r0, #2944]	; 0xb80
   16950:	str	r1, [r2, #2948]	; 0xb84
   16954:	bl	123f0 <free@plt>
   16958:	ldr	r0, [r4, #28]
   1695c:	ldr	r1, [r4, #32]
   16960:	sub	r0, r0, #2944	; 0xb80
   16964:	cmp	r0, r1, lsl #1
   16968:	str	r0, [r4, #28]
   1696c:	bls	16988 <flatcc_emitter_reset@@Base+0xc8>
   16970:	ldr	r1, [r4, #4]
   16974:	ldr	r3, [r4]
   16978:	mov	r2, r1
   1697c:	ldr	r0, [r2, #2944]!	; 0xb80
   16980:	cmp	r0, r3
   16984:	bne	16944 <flatcc_emitter_reset@@Base+0x84>
   16988:	pop	{r4, sl, fp, pc}

0001698c <flatcc_emitter_clear@@Base>:
   1698c:	push	{r4, r5, r6, sl, fp, lr}
   16990:	add	fp, sp, #16
   16994:	ldr	r5, [r0]
   16998:	cmp	r5, #0
   1699c:	beq	169ec <flatcc_emitter_clear@@Base+0x60>
   169a0:	mov	r4, r0
   169a4:	ldr	r0, [r5, #2948]	; 0xb84
   169a8:	mov	r6, #0
   169ac:	str	r6, [r0, #2944]	; 0xb80
   169b0:	ldr	r0, [r5, #2944]	; 0xb80
   169b4:	cmp	r0, #0
   169b8:	beq	169cc <flatcc_emitter_clear@@Base+0x40>
   169bc:	mov	r5, r0
   169c0:	ldr	r0, [r0, #2948]	; 0xb84
   169c4:	bl	123f0 <free@plt>
   169c8:	b	169b0 <flatcc_emitter_clear@@Base+0x24>
   169cc:	mov	r0, r5
   169d0:	bl	123f0 <free@plt>
   169d4:	vmov.i32	q8, #0	; 0x00000000
   169d8:	add	r0, r4, #16
   169dc:	vst1.32	{d16-d17}, [r0]
   169e0:	mov	r0, #32
   169e4:	vst1.32	{d16-d17}, [r4], r0
   169e8:	str	r6, [r4]
   169ec:	pop	{r4, r5, r6, sl, fp, pc}

000169f0 <flatcc_emitter@@Base>:
   169f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169f4:	add	fp, sp, #28
   169f8:	sub	sp, sp, #4
   169fc:	mov	r6, r0
   16a00:	mov	r7, r1
   16a04:	ldr	r0, [r0, #24]
   16a08:	ldr	r1, [fp, #8]
   16a0c:	mov	r4, r2
   16a10:	cmn	r3, #1
   16a14:	mov	r9, r6
   16a18:	add	r0, r0, r1
   16a1c:	str	r0, [r6, #24]
   16a20:	ble	16b5c <flatcc_emitter@@Base+0x16c>
   16a24:	ldr	r0, [r9, #20]!
   16a28:	cmp	r0, r1
   16a2c:	bcs	16cac <flatcc_emitter@@Base+0x2bc>
   16a30:	mov	r8, #0
   16a34:	cmp	r4, #0
   16a38:	beq	16d04 <flatcc_emitter@@Base+0x314>
   16a3c:	movw	sl, #64064	; 0xfa40
   16a40:	movt	sl, #65535	; 0xffff
   16a44:	ldr	r8, [r7, #4]
   16a48:	cmp	r8, #0
   16a4c:	beq	16b48 <flatcc_emitter@@Base+0x158>
   16a50:	ldr	r9, [r7]
   16a54:	cmp	r8, r0
   16a58:	mov	r5, r8
   16a5c:	bls	16b14 <flatcc_emitter@@Base+0x124>
   16a60:	mov	r5, r0
   16a64:	cmp	r5, #0
   16a68:	bne	16b14 <flatcc_emitter@@Base+0x124>
   16a6c:	ldr	r5, [r6, #4]
   16a70:	cmp	r5, #0
   16a74:	beq	16a88 <flatcc_emitter@@Base+0x98>
   16a78:	ldr	r0, [r5, #2944]	; 0xb80
   16a7c:	ldr	r1, [r6]
   16a80:	cmp	r0, r1
   16a84:	bne	16ac0 <flatcc_emitter@@Base+0xd0>
   16a88:	movw	r0, #2956	; 0xb8c
   16a8c:	bl	1242c <malloc@plt>
   16a90:	cmp	r0, #0
   16a94:	beq	16cbc <flatcc_emitter@@Base+0x2cc>
   16a98:	ldr	r1, [r6, #28]
   16a9c:	cmp	r5, #0
   16aa0:	add	r1, r1, #2944	; 0xb80
   16aa4:	str	r1, [r6, #28]
   16aa8:	beq	16ae4 <flatcc_emitter@@Base+0xf4>
   16aac:	ldr	r1, [r6]
   16ab0:	str	r1, [r0, #2944]	; 0xb80
   16ab4:	str	r5, [r0, #2948]	; 0xb84
   16ab8:	str	r0, [r1, #2948]	; 0xb84
   16abc:	str	r0, [r5, #2944]	; 0xb80
   16ac0:	mov	r5, #2944	; 0xb80
   16ac4:	str	r0, [r6, #4]
   16ac8:	str	r0, [r6, #16]
   16acc:	str	r5, [r6, #20]
   16ad0:	ldr	r1, [r0, #2948]	; 0xb84
   16ad4:	ldr	r1, [r1, #2952]	; 0xb88
   16ad8:	add	r1, r1, #2944	; 0xb80
   16adc:	str	r1, [r0, #2952]	; 0xb88
   16ae0:	b	16b08 <flatcc_emitter@@Base+0x118>
   16ae4:	mov	r5, #1472	; 0x5c0
   16ae8:	add	r1, r0, #1472	; 0x5c0
   16aec:	str	r0, [r6]
   16af0:	stmib	r6, {r0, r1, r5}
   16af4:	str	r1, [r6, #16]
   16af8:	str	r5, [r6, #20]
   16afc:	str	r0, [r0, #2944]	; 0xb80
   16b00:	str	r0, [r0, #2948]	; 0xb84
   16b04:	str	sl, [r0, #2952]	; 0xb88
   16b08:	cmp	r8, r5
   16b0c:	bhi	16a64 <flatcc_emitter@@Base+0x74>
   16b10:	mov	r5, r8
   16b14:	ldr	r0, [r6, #16]
   16b18:	mov	r1, r9
   16b1c:	mov	r2, r5
   16b20:	bl	123fc <memcpy@plt>
   16b24:	ldr	r0, [r6, #16]
   16b28:	ldr	r1, [r6, #20]
   16b2c:	add	r9, r9, r5
   16b30:	subs	r8, r8, r5
   16b34:	add	r2, r0, r5
   16b38:	sub	r0, r1, r5
   16b3c:	str	r2, [r6, #16]
   16b40:	str	r0, [r6, #20]
   16b44:	bne	16a54 <flatcc_emitter@@Base+0x64>
   16b48:	subs	r4, r4, #1
   16b4c:	add	r7, r7, #8
   16b50:	bne	16a44 <flatcc_emitter@@Base+0x54>
   16b54:	mov	r8, #0
   16b58:	b	16d04 <flatcc_emitter@@Base+0x314>
   16b5c:	ldr	r0, [r9, #12]!
   16b60:	cmp	r0, r1
   16b64:	bcs	16cc4 <flatcc_emitter@@Base+0x2d4>
   16b68:	mov	r8, #0
   16b6c:	cmp	r4, #0
   16b70:	beq	16d04 <flatcc_emitter@@Base+0x314>
   16b74:	add	r0, r7, r4, lsl #3
   16b78:	ldr	sl, [r0, #-4]
   16b7c:	sub	r1, r0, #8
   16b80:	str	r1, [sp]
   16b84:	cmp	sl, #0
   16b88:	beq	16c9c <flatcc_emitter@@Base+0x2ac>
   16b8c:	ldr	r0, [sp]
   16b90:	ldr	r0, [r0]
   16b94:	add	r7, r0, sl
   16b98:	ldr	r1, [r9]
   16b9c:	cmp	sl, r1
   16ba0:	bls	16c6c <flatcc_emitter@@Base+0x27c>
   16ba4:	cmp	r1, #0
   16ba8:	mov	r5, r1
   16bac:	bne	16c70 <flatcc_emitter@@Base+0x280>
   16bb0:	ldr	r5, [r6]
   16bb4:	cmp	r5, #0
   16bb8:	beq	16bdc <flatcc_emitter@@Base+0x1ec>
   16bbc:	ldr	r0, [r5, #2948]	; 0xb84
   16bc0:	ldr	r1, [r6, #4]
   16bc4:	cmp	r0, r1
   16bc8:	beq	16bdc <flatcc_emitter@@Base+0x1ec>
   16bcc:	ldr	r1, [r5, #2952]	; 0xb88
   16bd0:	sub	r1, r1, #2944	; 0xb80
   16bd4:	str	r1, [r0, #2952]	; 0xb88
   16bd8:	b	16c14 <flatcc_emitter@@Base+0x224>
   16bdc:	movw	r0, #2956	; 0xb8c
   16be0:	bl	1242c <malloc@plt>
   16be4:	cmp	r0, #0
   16be8:	beq	16cbc <flatcc_emitter@@Base+0x2cc>
   16bec:	ldr	r1, [r6, #28]
   16bf0:	cmp	r5, #0
   16bf4:	add	r1, r1, #2944	; 0xb80
   16bf8:	str	r1, [r6, #28]
   16bfc:	beq	16c38 <flatcc_emitter@@Base+0x248>
   16c00:	ldr	r1, [r6, #4]
   16c04:	str	r5, [r0, #2944]	; 0xb80
   16c08:	str	r1, [r0, #2948]	; 0xb84
   16c0c:	str	r0, [r5, #2948]	; 0xb84
   16c10:	str	r0, [r1, #2944]	; 0xb80
   16c14:	mov	r1, #2944	; 0xb80
   16c18:	add	r2, r0, #2944	; 0xb80
   16c1c:	str	r0, [r6]
   16c20:	str	r2, [r6, #8]
   16c24:	str	r1, [r6, #12]
   16c28:	ldr	r2, [r0, #2944]	; 0xb80
   16c2c:	ldr	r2, [r2, #2952]	; 0xb88
   16c30:	sub	r2, r2, #2944	; 0xb80
   16c34:	b	16c64 <flatcc_emitter@@Base+0x274>
   16c38:	add	r2, r0, #1472	; 0x5c0
   16c3c:	mov	r1, #1472	; 0x5c0
   16c40:	str	r0, [r6]
   16c44:	stmib	r6, {r0, r2}
   16c48:	str	r1, [r6, #12]
   16c4c:	str	r2, [r6, #16]
   16c50:	movw	r2, #64064	; 0xfa40
   16c54:	str	r1, [r6, #20]
   16c58:	str	r0, [r0, #2944]	; 0xb80
   16c5c:	str	r0, [r0, #2948]	; 0xb84
   16c60:	movt	r2, #65535	; 0xffff
   16c64:	str	r2, [r0, #2952]	; 0xb88
   16c68:	b	16b9c <flatcc_emitter@@Base+0x1ac>
   16c6c:	mov	r5, sl
   16c70:	sub	r0, r1, r5
   16c74:	sub	r7, r7, r5
   16c78:	mov	r2, r5
   16c7c:	str	r0, [r6, #12]
   16c80:	mov	r1, r7
   16c84:	ldr	r0, [r6, #8]
   16c88:	sub	r0, r0, r5
   16c8c:	str	r0, [r6, #8]
   16c90:	bl	123fc <memcpy@plt>
   16c94:	subs	sl, sl, r5
   16c98:	bne	16b98 <flatcc_emitter@@Base+0x1a8>
   16c9c:	ldr	r0, [sp]
   16ca0:	subs	r4, r4, #1
   16ca4:	bne	16b78 <flatcc_emitter@@Base+0x188>
   16ca8:	b	16d04 <flatcc_emitter@@Base+0x314>
   16cac:	ldr	r5, [r6, #16]
   16cb0:	add	r2, r5, r1
   16cb4:	str	r2, [r6, #16]
   16cb8:	b	16cd0 <flatcc_emitter@@Base+0x2e0>
   16cbc:	mvn	r8, #0
   16cc0:	b	16d04 <flatcc_emitter@@Base+0x314>
   16cc4:	ldr	r2, [r6, #8]
   16cc8:	sub	r5, r2, r1
   16ccc:	str	r5, [r6, #8]
   16cd0:	sub	r0, r0, r1
   16cd4:	mov	r8, #0
   16cd8:	cmp	r4, #0
   16cdc:	str	r0, [r9]
   16ce0:	beq	16d04 <flatcc_emitter@@Base+0x314>
   16ce4:	ldm	r7, {r1, r2}
   16ce8:	mov	r0, r5
   16cec:	bl	123fc <memcpy@plt>
   16cf0:	ldr	r0, [r7, #4]
   16cf4:	add	r7, r7, #8
   16cf8:	subs	r4, r4, #1
   16cfc:	add	r5, r5, r0
   16d00:	bne	16ce4 <flatcc_emitter@@Base+0x2f4>
   16d04:	mov	r0, r8
   16d08:	sub	sp, fp, #28
   16d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016d10 <flatcc_emitter_copy_buffer@@Base>:
   16d10:	push	{r4, r5, r6, sl, fp, lr}
   16d14:	add	fp, sp, #16
   16d18:	mov	r3, r2
   16d1c:	ldr	r2, [r0, #24]
   16d20:	mov	r5, #0
   16d24:	cmp	r2, r3
   16d28:	bhi	16dc4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16d2c:	mov	r4, r0
   16d30:	ldr	r0, [r0]
   16d34:	cmp	r0, #0
   16d38:	beq	16dc4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16d3c:	mov	r6, r1
   16d40:	ldr	r1, [r4, #4]
   16d44:	cmp	r0, r1
   16d48:	beq	16db4 <flatcc_emitter_copy_buffer@@Base+0xa4>
   16d4c:	ldr	r0, [r4, #12]
   16d50:	ldr	r1, [r4, #8]
   16d54:	rsb	r5, r0, #2944	; 0xb80
   16d58:	mov	r0, r6
   16d5c:	mov	r2, r5
   16d60:	bl	123fc <memcpy@plt>
   16d64:	ldm	r4, {r0, r1}
   16d68:	add	r5, r6, r5
   16d6c:	ldr	r6, [r0, #2944]	; 0xb80
   16d70:	cmp	r6, r1
   16d74:	beq	16d9c <flatcc_emitter_copy_buffer@@Base+0x8c>
   16d78:	mov	r0, r5
   16d7c:	mov	r1, r6
   16d80:	mov	r2, #2944	; 0xb80
   16d84:	bl	123fc <memcpy@plt>
   16d88:	ldr	r6, [r6, #2944]	; 0xb80
   16d8c:	ldr	r0, [r4, #4]
   16d90:	add	r5, r5, #2944	; 0xb80
   16d94:	cmp	r6, r0
   16d98:	bne	16d78 <flatcc_emitter_copy_buffer@@Base+0x68>
   16d9c:	ldr	r0, [r4, #20]
   16da0:	mov	r1, r6
   16da4:	rsb	r2, r0, #2944	; 0xb80
   16da8:	mov	r0, r5
   16dac:	bl	123fc <memcpy@plt>
   16db0:	b	16dc4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16db4:	ldr	r1, [r4, #8]
   16db8:	mov	r0, r6
   16dbc:	bl	123fc <memcpy@plt>
   16dc0:	mov	r5, r6
   16dc4:	mov	r0, r5
   16dc8:	pop	{r4, r5, r6, sl, fp, pc}

00016dcc <__libc_csu_init@@Base>:
   16dcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16dd0:	mov	r7, r0
   16dd4:	ldr	r6, [pc, #72]	; 16e24 <__libc_csu_init@@Base+0x58>
   16dd8:	ldr	r5, [pc, #72]	; 16e28 <__libc_csu_init@@Base+0x5c>
   16ddc:	add	r6, pc, r6
   16de0:	add	r5, pc, r5
   16de4:	sub	r6, r6, r5
   16de8:	mov	r8, r1
   16dec:	mov	r9, r2
   16df0:	bl	123c4 <printf@plt-0x20>
   16df4:	asrs	r6, r6, #2
   16df8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16dfc:	mov	r4, #0
   16e00:	add	r4, r4, #1
   16e04:	ldr	r3, [r5], #4
   16e08:	mov	r2, r9
   16e0c:	mov	r1, r8
   16e10:	mov	r0, r7
   16e14:	blx	r3
   16e18:	cmp	r6, r4
   16e1c:	bne	16e00 <__libc_csu_init@@Base+0x34>
   16e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e24:	andeq	r2, r1, r8, lsr #2
   16e28:	andeq	r2, r1, r0, lsr #2

00016e2c <__libc_csu_fini@@Base>:
   16e2c:	bx	lr

Disassembly of section .fini:

00016e30 <.fini>:
   16e30:	push	{r3, lr}
   16e34:	pop	{r3, pc}
