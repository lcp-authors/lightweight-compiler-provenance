
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010d78 <.init>:
   10d78:	push	{r3, lr}
   10d7c:	bl	11020 <__assert_fail@plt+0x48>
   10d80:	pop	{r3, pc}

Disassembly of section .plt:

00010d84 <calloc@plt-0x14>:
   10d84:	push	{lr}		; (str lr, [sp, #-4]!)
   10d88:	ldr	lr, [pc, #4]	; 10d94 <calloc@plt-0x4>
   10d8c:	add	lr, pc, lr
   10d90:	ldr	pc, [lr, #8]!
   10d94:	andeq	r5, r1, ip, ror #4

00010d98 <calloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #620]!	; 0x26c

00010da4 <fputs_unlocked@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #612]!	; 0x264

00010db0 <raise@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #604]!	; 0x25c

00010dbc <strcmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #596]!	; 0x254

00010dc8 <posix_fadvise64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #588]!	; 0x24c

00010dd4 <fflush@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #580]!	; 0x244

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #572]!	; 0x23c

00010dec <_exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #564]!	; 0x234

00010df8 <memcpy@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #556]!	; 0x22c

00010e04 <mbsinit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #548]!	; 0x224

00010e10 <memcmp@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #540]!	; 0x21c

00010e1c <dcgettext@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #532]!	; 0x214

00010e28 <realloc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #524]!	; 0x20c

00010e34 <textdomain@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #516]!	; 0x204

00010e40 <iswprint@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #508]!	; 0x1fc

00010e4c <fwrite@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #500]!	; 0x1f4

00010e58 <lseek64@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #492]!	; 0x1ec

00010e64 <__ctype_get_mb_cur_max@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e70 <__fpending@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #476]!	; 0x1dc

00010e7c <mbrtowc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #468]!	; 0x1d4

00010e88 <error@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #460]!	; 0x1cc

00010e94 <malloc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea0 <__libc_start_main@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eac <__freading@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #436]!	; 0x1b4

00010eb8 <__gmon_start__@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec4 <getopt_long@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed0 <__ctype_b_loc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #412]!	; 0x19c

00010edc <exit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #404]!	; 0x194

00010ee8 <strlen@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #396]!	; 0x18c

00010ef4 <__errno_location@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #388]!	; 0x184

00010f00 <__cxa_atexit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #380]!	; 0x17c

00010f0c <memset@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #372]!	; 0x174

00010f18 <__printf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #364]!	; 0x16c

00010f24 <fileno@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #356]!	; 0x164

00010f30 <__fprintf_chk@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #348]!	; 0x15c

00010f3c <fclose@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #340]!	; 0x154

00010f48 <fseeko64@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #332]!	; 0x14c

00010f54 <__uflow@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #324]!	; 0x144

00010f60 <__overflow@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #316]!	; 0x13c

00010f6c <setlocale@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #308]!	; 0x134

00010f78 <strrchr@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #300]!	; 0x12c

00010f84 <nl_langinfo@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #292]!	; 0x124

00010f90 <clearerr_unlocked@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #284]!	; 0x11c

00010f9c <fopen64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #276]!	; 0x114

00010fa8 <bindtextdomain@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #268]!	; 0x10c

00010fb4 <strncmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #260]!	; 0x104

00010fc0 <abort@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #252]!	; 0xfc

00010fcc <strspn@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #244]!	; 0xf4

00010fd8 <__assert_fail@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe4 <.text>:
   10fe4:	mov	fp, #0
   10fe8:	mov	lr, #0
   10fec:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff0:	mov	r2, sp
   10ff4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ff8:	push	{r0}		; (str r0, [sp, #-4]!)
   10ffc:	ldr	ip, [pc, #16]	; 11014 <__assert_fail@plt+0x3c>
   11000:	push	{ip}		; (str ip, [sp, #-4]!)
   11004:	ldr	r0, [pc, #12]	; 11018 <__assert_fail@plt+0x40>
   11008:	ldr	r3, [pc, #12]	; 1101c <__assert_fail@plt+0x44>
   1100c:	bl	10ea0 <__libc_start_main@plt>
   11010:	bl	10fc0 <abort@plt>
   11014:	ldrdeq	r5, [r1], -ip
   11018:	andeq	r1, r1, r0, ror r3
   1101c:	andeq	r5, r1, ip, ror r2
   11020:	ldr	r3, [pc, #20]	; 1103c <__assert_fail@plt+0x64>
   11024:	ldr	r2, [pc, #20]	; 11040 <__assert_fail@plt+0x68>
   11028:	add	r3, pc, r3
   1102c:	ldr	r2, [r3, r2]
   11030:	cmp	r2, #0
   11034:	bxeq	lr
   11038:	b	10eb8 <__gmon_start__@plt>
   1103c:	ldrdeq	r4, [r1], -r0
   11040:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11044:	ldr	r0, [pc, #24]	; 11064 <__assert_fail@plt+0x8c>
   11048:	ldr	r3, [pc, #24]	; 11068 <__assert_fail@plt+0x90>
   1104c:	cmp	r3, r0
   11050:	bxeq	lr
   11054:	ldr	r3, [pc, #16]	; 1106c <__assert_fail@plt+0x94>
   11058:	cmp	r3, #0
   1105c:	bxeq	lr
   11060:	bx	r3
   11064:	andeq	r6, r2, r0, lsr r1
   11068:	andeq	r6, r2, r0, lsr r1
   1106c:	andeq	r0, r0, r0
   11070:	ldr	r0, [pc, #36]	; 1109c <__assert_fail@plt+0xc4>
   11074:	ldr	r1, [pc, #36]	; 110a0 <__assert_fail@plt+0xc8>
   11078:	sub	r1, r1, r0
   1107c:	asr	r1, r1, #2
   11080:	add	r1, r1, r1, lsr #31
   11084:	asrs	r1, r1, #1
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0xcc>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r6, r2, r0, lsr r1
   110a0:	andeq	r6, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	push	{r4, lr}
   110ac:	ldr	r4, [pc, #24]	; 110cc <__assert_fail@plt+0xf4>
   110b0:	ldrb	r3, [r4]
   110b4:	cmp	r3, #0
   110b8:	popne	{r4, pc}
   110bc:	bl	11044 <__assert_fail@plt+0x6c>
   110c0:	mov	r3, #1
   110c4:	strb	r3, [r4]
   110c8:	pop	{r4, pc}
   110cc:	andeq	r6, r2, r4, asr r1
   110d0:	b	11070 <__assert_fail@plt+0x98>
   110d4:	push	{fp, lr}
   110d8:	mov	fp, sp
   110dc:	sub	sp, sp, #56	; 0x38
   110e0:	mov	r4, r0
   110e4:	cmp	r0, #0
   110e8:	bne	1132c <__assert_fail@plt+0x354>
   110ec:	movw	r1, #21291	; 0x532b
   110f0:	mov	r0, #0
   110f4:	mov	r2, #5
   110f8:	movt	r1, #1
   110fc:	bl	10e1c <dcgettext@plt>
   11100:	mov	r1, r0
   11104:	movw	r0, #24988	; 0x619c
   11108:	movt	r0, #2
   1110c:	ldr	r2, [r0]
   11110:	mov	r0, #1
   11114:	bl	10f18 <__printf_chk@plt>
   11118:	movw	r1, #21324	; 0x534c
   1111c:	mov	r0, #0
   11120:	mov	r2, #5
   11124:	movt	r1, #1
   11128:	bl	10e1c <dcgettext@plt>
   1112c:	movw	r7, #24908	; 0x614c
   11130:	movt	r7, #2
   11134:	ldr	r1, [r7]
   11138:	bl	10da4 <fputs_unlocked@plt>
   1113c:	movw	r1, #21662	; 0x549e
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	movt	r1, #1
   1114c:	bl	10e1c <dcgettext@plt>
   11150:	ldr	r1, [r7]
   11154:	bl	10da4 <fputs_unlocked@plt>
   11158:	movw	r1, #21718	; 0x54d6
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10e1c <dcgettext@plt>
   1116c:	ldr	r1, [r7]
   11170:	bl	10da4 <fputs_unlocked@plt>
   11174:	movw	r1, #21390	; 0x538e
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	movt	r1, #1
   11184:	bl	10e1c <dcgettext@plt>
   11188:	ldr	r1, [r7]
   1118c:	bl	10da4 <fputs_unlocked@plt>
   11190:	bl	120b0 <__assert_fail@plt+0x10d8>
   11194:	movw	r1, #21502	; 0x53fe
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e1c <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10da4 <fputs_unlocked@plt>
   111b0:	movw	r1, #21547	; 0x542b
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e1c <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10da4 <fputs_unlocked@plt>
   111cc:	movw	r0, #22288	; 0x5710
   111d0:	mov	r2, #48	; 0x30
   111d4:	mov	r6, sp
   111d8:	movw	r5, #21601	; 0x5461
   111dc:	movt	r0, #1
   111e0:	movt	r5, #1
   111e4:	add	r1, r0, #32
   111e8:	add	r3, r0, #16
   111ec:	vld1.64	{d18-d19}, [r0], r2
   111f0:	vld1.64	{d16-d17}, [r1]
   111f4:	vld1.64	{d20-d21}, [r3]
   111f8:	add	r1, r6, #32
   111fc:	vldr	d22, [r0]
   11200:	add	r0, r6, #16
   11204:	vst1.64	{d16-d17}, [r1]
   11208:	movw	r1, #21793	; 0x5521
   1120c:	vst1.64	{d20-d21}, [r0]
   11210:	mov	r0, r6
   11214:	vst1.64	{d18-d19}, [r0], r2
   11218:	movt	r1, #1
   1121c:	vstr	d22, [r0]
   11220:	mov	r0, r5
   11224:	bl	10dbc <strcmp@plt>
   11228:	cmp	r0, #0
   1122c:	ldrne	r1, [r6, #8]!
   11230:	cmpne	r1, #0
   11234:	bne	11220 <__assert_fail@plt+0x248>
   11238:	ldr	r6, [r6, #4]
   1123c:	movw	r1, #21888	; 0x5580
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10e1c <dcgettext@plt>
   11250:	movw	r2, #21632	; 0x5480
   11254:	movw	r3, #21911	; 0x5597
   11258:	mov	r1, r0
   1125c:	mov	r0, #1
   11260:	movt	r2, #1
   11264:	movt	r3, #1
   11268:	bl	10f18 <__printf_chk@plt>
   1126c:	cmp	r6, #0
   11270:	mov	r0, #5
   11274:	mov	r1, #0
   11278:	moveq	r6, r5
   1127c:	bl	10f6c <setlocale@plt>
   11280:	cmp	r0, #0
   11284:	beq	112bc <__assert_fail@plt+0x2e4>
   11288:	movw	r1, #21951	; 0x55bf
   1128c:	mov	r2, #3
   11290:	movt	r1, #1
   11294:	bl	10fb4 <strncmp@plt>
   11298:	cmp	r0, #0
   1129c:	beq	112bc <__assert_fail@plt+0x2e4>
   112a0:	movw	r1, #21955	; 0x55c3
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10e1c <dcgettext@plt>
   112b4:	ldr	r1, [r7]
   112b8:	bl	10da4 <fputs_unlocked@plt>
   112bc:	movw	r1, #22026	; 0x560a
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10e1c <dcgettext@plt>
   112d0:	movw	r2, #21911	; 0x5597
   112d4:	mov	r1, r0
   112d8:	mov	r0, #1
   112dc:	mov	r3, r5
   112e0:	movt	r2, #1
   112e4:	bl	10f18 <__printf_chk@plt>
   112e8:	movw	r1, #22053	; 0x5625
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10e1c <dcgettext@plt>
   112fc:	movw	r3, #22103	; 0x5657
   11300:	mov	r1, r0
   11304:	movw	r0, #21821	; 0x553d
   11308:	cmp	r6, r5
   1130c:	mov	r2, r6
   11310:	movt	r0, #1
   11314:	movt	r3, #1
   11318:	moveq	r3, r0
   1131c:	mov	r0, #1
   11320:	bl	10f18 <__printf_chk@plt>
   11324:	mov	r0, r4
   11328:	bl	10edc <exit@plt>
   1132c:	movw	r0, #24896	; 0x6140
   11330:	movw	r1, #21252	; 0x5304
   11334:	mov	r2, #5
   11338:	movt	r0, #2
   1133c:	movt	r1, #1
   11340:	ldr	r5, [r0]
   11344:	mov	r0, #0
   11348:	bl	10e1c <dcgettext@plt>
   1134c:	mov	r2, r0
   11350:	movw	r0, #24988	; 0x619c
   11354:	mov	r1, #1
   11358:	movt	r0, #2
   1135c:	ldr	r3, [r0]
   11360:	mov	r0, r5
   11364:	bl	10f30 <__fprintf_chk@plt>
   11368:	mov	r0, r4
   1136c:	bl	10edc <exit@plt>
   11370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11374:	add	fp, sp, #28
   11378:	sub	sp, sp, #20
   1137c:	mov	r5, r0
   11380:	ldr	r0, [r1]
   11384:	mov	r4, r1
   11388:	bl	12408 <__assert_fail@plt+0x1430>
   1138c:	movw	r1, #22103	; 0x5657
   11390:	mov	r0, #6
   11394:	movt	r1, #1
   11398:	bl	10f6c <setlocale@plt>
   1139c:	movw	r6, #21636	; 0x5484
   113a0:	movw	r1, #21608	; 0x5468
   113a4:	movt	r6, #1
   113a8:	movt	r1, #1
   113ac:	mov	r0, r6
   113b0:	bl	10fa8 <bindtextdomain@plt>
   113b4:	mov	r0, r6
   113b8:	bl	10e34 <textdomain@plt>
   113bc:	movw	r0, #8476	; 0x211c
   113c0:	movt	r0, #1
   113c4:	bl	152e0 <__assert_fail@plt+0x4308>
   113c8:	movw	r1, #24920	; 0x6158
   113cc:	movw	r9, #22168	; 0x5698
   113d0:	movw	r7, #22204	; 0x56bc
   113d4:	movw	sl, #24912	; 0x6150
   113d8:	mov	r0, #1
   113dc:	mov	r6, #0
   113e0:	add	r8, sp, #13
   113e4:	movt	r1, #2
   113e8:	movt	r9, #1
   113ec:	movt	r7, #1
   113f0:	movt	sl, #2
   113f4:	strb	r0, [r1]
   113f8:	b	11404 <__assert_fail@plt+0x42c>
   113fc:	sub	r0, r1, #1
   11400:	bl	11874 <__assert_fail@plt+0x89c>
   11404:	mov	r0, r5
   11408:	mov	r1, r4
   1140c:	mov	r2, r9
   11410:	mov	r3, r7
   11414:	str	r6, [sp]
   11418:	bl	10ec4 <getopt_long@plt>
   1141c:	sub	r1, r0, #48	; 0x30
   11420:	cmp	r1, #10
   11424:	bcs	11448 <__assert_fail@plt+0x470>
   11428:	ldr	r1, [sl]
   1142c:	cmp	r1, #0
   11430:	bne	113fc <__assert_fail@plt+0x424>
   11434:	strb	r6, [sp, #14]
   11438:	strb	r0, [sp, #13]
   1143c:	mov	r0, r8
   11440:	bl	11874 <__assert_fail@plt+0x89c>
   11444:	b	11404 <__assert_fail@plt+0x42c>
   11448:	cmp	r0, #104	; 0x68
   1144c:	ble	1147c <__assert_fail@plt+0x4a4>
   11450:	cmp	r0, #116	; 0x74
   11454:	beq	11470 <__assert_fail@plt+0x498>
   11458:	cmp	r0, #105	; 0x69
   1145c:	bne	11734 <__assert_fail@plt+0x75c>
   11460:	movw	r0, #24920	; 0x6158
   11464:	movt	r0, #2
   11468:	strb	r6, [r0]
   1146c:	b	11404 <__assert_fail@plt+0x42c>
   11470:	ldr	r0, [sl]
   11474:	bl	11874 <__assert_fail@plt+0x89c>
   11478:	b	11404 <__assert_fail@plt+0x42c>
   1147c:	cmn	r0, #1
   11480:	bne	116d4 <__assert_fail@plt+0x6fc>
   11484:	bl	11c0c <__assert_fail@plt+0xc34>
   11488:	movw	r0, #24888	; 0x6138
   1148c:	movt	r0, #2
   11490:	ldr	r1, [r0]
   11494:	mov	r0, #0
   11498:	cmp	r1, r5
   1149c:	addlt	r0, r4, r1, lsl #2
   114a0:	bl	11e48 <__assert_fail@plt+0xe70>
   114a4:	mov	r0, #0
   114a8:	bl	11e78 <__assert_fail@plt+0xea0>
   114ac:	cmp	r0, #0
   114b0:	beq	116bc <__assert_fail@plt+0x6e4>
   114b4:	movw	r8, #24908	; 0x614c
   114b8:	movw	r4, #24920	; 0x6158
   114bc:	mov	sl, r0
   114c0:	movt	r8, #2
   114c4:	movt	r4, #2
   114c8:	mov	r7, #0
   114cc:	mov	r9, #1
   114d0:	mov	r5, #0
   114d4:	str	r7, [sp, #16]
   114d8:	ldmib	sl, {r0, r1}
   114dc:	cmp	r0, r1
   114e0:	bcs	11614 <__assert_fail@plt+0x63c>
   114e4:	add	r1, r0, #1
   114e8:	str	r1, [sl, #4]
   114ec:	ldrb	r6, [r0]
   114f0:	tst	r9, #1
   114f4:	beq	11648 <__assert_fail@plt+0x670>
   114f8:	cmp	r6, #8
   114fc:	beq	11598 <__assert_fail@plt+0x5c0>
   11500:	cmp	r6, #9
   11504:	bne	115c8 <__assert_fail@plt+0x5f0>
   11508:	mov	r0, r7
   1150c:	mov	r1, r5
   11510:	add	r2, sp, #16
   11514:	add	r3, sp, #15
   11518:	bl	11d44 <__assert_fail@plt+0xd6c>
   1151c:	ldrb	r2, [sp, #15]
   11520:	adds	r6, r7, #1
   11524:	adc	r4, r5, #0
   11528:	cmp	r2, #0
   1152c:	moveq	r6, r0
   11530:	moveq	r4, r1
   11534:	subs	r0, r6, r7
   11538:	sbcs	r0, r4, r5
   1153c:	bcc	1173c <__assert_fail@plt+0x764>
   11540:	adds	r7, r7, #1
   11544:	adc	r5, r5, #0
   11548:	subs	r0, r7, r6
   1154c:	sbcs	r0, r5, r4
   11550:	bcs	115dc <__assert_fail@plt+0x604>
   11554:	ldr	r0, [r8]
   11558:	ldr	r1, [r0, #20]
   1155c:	ldr	r2, [r0, #24]
   11560:	cmp	r1, r2
   11564:	bcs	11584 <__assert_fail@plt+0x5ac>
   11568:	add	r2, r1, #1
   1156c:	str	r2, [r0, #20]
   11570:	mov	r0, #32
   11574:	strb	r0, [r1]
   11578:	cmn	r0, #1
   1157c:	bgt	11540 <__assert_fail@plt+0x568>
   11580:	b	11690 <__assert_fail@plt+0x6b8>
   11584:	mov	r1, #32
   11588:	bl	10f60 <__overflow@plt>
   1158c:	cmn	r0, #1
   11590:	bgt	11540 <__assert_fail@plt+0x568>
   11594:	b	11690 <__assert_fail@plt+0x6b8>
   11598:	ldr	r0, [sp, #16]
   1159c:	mov	r6, #8
   115a0:	cmp	r0, #0
   115a4:	subne	r0, r0, #1
   115a8:	subs	r1, r7, #1
   115ac:	str	r0, [sp, #16]
   115b0:	orr	r0, r7, r5
   115b4:	sbc	r2, r5, #0
   115b8:	cmp	r0, #0
   115bc:	movne	r5, r2
   115c0:	movne	r7, r1
   115c4:	b	115e8 <__assert_fail@plt+0x610>
   115c8:	adds	r7, r7, #1
   115cc:	adc	r5, r5, #0
   115d0:	orrs	r0, r7, r5
   115d4:	bne	115e8 <__assert_fail@plt+0x610>
   115d8:	b	1173c <__assert_fail@plt+0x764>
   115dc:	movw	r4, #24920	; 0x6158
   115e0:	mov	r6, #32
   115e4:	movt	r4, #2
   115e8:	ldrb	r0, [r4]
   115ec:	mov	r9, #1
   115f0:	cmp	r0, #0
   115f4:	bne	1164c <__assert_fail@plt+0x674>
   115f8:	bl	10ed0 <__ctype_b_loc@plt>
   115fc:	ldr	r0, [r0]
   11600:	ldrb	r0, [r0, r6, lsl #1]
   11604:	and	r9, r0, #1
   11608:	cmp	r6, #0
   1160c:	bge	11654 <__assert_fail@plt+0x67c>
   11610:	b	116bc <__assert_fail@plt+0x6e4>
   11614:	mov	r0, sl
   11618:	bl	10f54 <__uflow@plt>
   1161c:	mov	r6, r0
   11620:	cmn	r0, #1
   11624:	bgt	114f0 <__assert_fail@plt+0x518>
   11628:	mov	r0, sl
   1162c:	bl	11e78 <__assert_fail@plt+0xea0>
   11630:	mov	sl, r0
   11634:	cmp	r0, #0
   11638:	bne	114d8 <__assert_fail@plt+0x500>
   1163c:	mov	sl, #0
   11640:	tst	r9, #1
   11644:	bne	114f8 <__assert_fail@plt+0x520>
   11648:	mov	r9, #0
   1164c:	cmp	r6, #0
   11650:	blt	116bc <__assert_fail@plt+0x6e4>
   11654:	ldr	r0, [r8]
   11658:	ldr	r1, [r0, #20]
   1165c:	ldr	r2, [r0, #24]
   11660:	cmp	r1, r2
   11664:	bcs	11680 <__assert_fail@plt+0x6a8>
   11668:	add	r2, r1, #1
   1166c:	str	r2, [r0, #20]
   11670:	strb	r6, [r1]
   11674:	cmp	r6, #10
   11678:	bne	114d8 <__assert_fail@plt+0x500>
   1167c:	b	114c8 <__assert_fail@plt+0x4f0>
   11680:	uxtb	r1, r6
   11684:	bl	10f60 <__overflow@plt>
   11688:	cmn	r0, #1
   1168c:	bgt	11674 <__assert_fail@plt+0x69c>
   11690:	bl	10ef4 <__errno_location@plt>
   11694:	ldr	r4, [r0]
   11698:	movw	r1, #22153	; 0x5689
   1169c:	mov	r0, #0
   116a0:	mov	r2, #5
   116a4:	movt	r1, #1
   116a8:	bl	10e1c <dcgettext@plt>
   116ac:	mov	r2, r0
   116b0:	mov	r0, #1
   116b4:	mov	r1, r4
   116b8:	bl	10e88 <error@plt>
   116bc:	bl	12060 <__assert_fail@plt+0x1088>
   116c0:	movw	r0, #24924	; 0x615c
   116c4:	movt	r0, #2
   116c8:	ldr	r0, [r0]
   116cc:	sub	sp, fp, #28
   116d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116d4:	cmn	r0, #3
   116d8:	beq	116ec <__assert_fail@plt+0x714>
   116dc:	cmn	r0, #2
   116e0:	bne	11734 <__assert_fail@plt+0x75c>
   116e4:	mov	r0, #0
   116e8:	bl	110d4 <__assert_fail@plt+0xfc>
   116ec:	movw	r0, #24808	; 0x60e8
   116f0:	movw	r2, #21646	; 0x548e
   116f4:	mov	r1, #0
   116f8:	movt	r0, #2
   116fc:	movt	r2, #1
   11700:	str	r1, [sp, #4]
   11704:	movw	r1, #21601	; 0x5461
   11708:	ldr	r3, [r0]
   1170c:	movw	r0, #24908	; 0x614c
   11710:	str	r2, [sp]
   11714:	movw	r2, #21632	; 0x5480
   11718:	movt	r1, #1
   1171c:	movt	r0, #2
   11720:	movt	r2, #1
   11724:	ldr	r0, [r0]
   11728:	bl	145f8 <__assert_fail@plt+0x3620>
   1172c:	mov	r0, #0
   11730:	bl	10edc <exit@plt>
   11734:	mov	r0, #1
   11738:	bl	110d4 <__assert_fail@plt+0xfc>
   1173c:	movw	r1, #22130	; 0x5672
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	10e1c <dcgettext@plt>
   11750:	mov	r2, r0
   11754:	mov	r0, #1
   11758:	mov	r1, #0
   1175c:	bl	10e88 <error@plt>
   11760:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11764:	add	fp, sp, #24
   11768:	movw	r8, #24928	; 0x6160
   1176c:	mov	r4, r1
   11770:	mov	r6, r0
   11774:	mov	r0, #0
   11778:	movt	r8, #2
   1177c:	ldr	r1, [r8]
   11780:	cmp	r1, #0
   11784:	beq	117a0 <__assert_fail@plt+0x7c8>
   11788:	movw	r2, #24932	; 0x6164
   1178c:	movt	r2, #2
   11790:	ldr	r2, [r2]
   11794:	add	r2, r2, r1, lsl #3
   11798:	ldrd	r2, [r2, #-8]
   1179c:	b	117a8 <__assert_fail@plt+0x7d0>
   117a0:	mov	r2, #0
   117a4:	mov	r3, #0
   117a8:	subs	r7, r6, r2
   117ac:	mov	r5, r6
   117b0:	sbcs	r7, r4, r3
   117b4:	movwcc	r0, #1
   117b8:	cmp	r0, #0
   117bc:	mov	r0, r4
   117c0:	movne	r5, r2
   117c4:	movne	r0, r3
   117c8:	subs	r7, r5, r2
   117cc:	sbc	r5, r0, r3
   117d0:	movw	r0, #24936	; 0x6168
   117d4:	movt	r0, #2
   117d8:	ldr	r0, [r0]
   117dc:	cmp	r1, r0
   117e0:	bne	1180c <__assert_fail@plt+0x834>
   117e4:	movw	r9, #24932	; 0x6164
   117e8:	movw	r1, #24936	; 0x6168
   117ec:	mov	r2, #8
   117f0:	movt	r9, #2
   117f4:	movt	r1, #2
   117f8:	ldr	r0, [r9]
   117fc:	bl	149d8 <__assert_fail@plt+0x3a00>
   11800:	ldr	r1, [r8]
   11804:	str	r0, [r9]
   11808:	b	11818 <__assert_fail@plt+0x840>
   1180c:	movw	r0, #24932	; 0x6164
   11810:	movt	r0, #2
   11814:	ldr	r0, [r0]
   11818:	add	r2, r1, #1
   1181c:	str	r2, [r8]
   11820:	str	r6, [r0, r1, lsl #3]!
   11824:	str	r4, [r0, #4]
   11828:	movw	r0, #25296	; 0x62d0
   1182c:	movt	r0, #2
   11830:	ldr	r1, [r0]
   11834:	subs	r1, r1, r7
   11838:	rscs	r1, r5, #0
   1183c:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   11840:	cmp	r5, #0
   11844:	bne	11850 <__assert_fail@plt+0x878>
   11848:	str	r7, [r0]
   1184c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11850:	movw	r1, #22344	; 0x5748
   11854:	mov	r0, #0
   11858:	mov	r2, #5
   1185c:	movt	r1, #1
   11860:	bl	10e1c <dcgettext@plt>
   11864:	mov	r2, r0
   11868:	mov	r0, #1
   1186c:	mov	r1, #0
   11870:	bl	10e88 <error@plt>
   11874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11878:	add	fp, sp, #28
   1187c:	sub	sp, sp, #12
   11880:	mov	r5, r0
   11884:	mov	r0, #1
   11888:	mov	r7, #0
   1188c:	mov	r8, #0
   11890:	mov	r9, #0
   11894:	mov	sl, #0
   11898:	mov	r6, #0
   1189c:	str	r0, [sp, #4]
   118a0:	mov	r0, #0
   118a4:	str	r0, [sp, #8]
   118a8:	b	118b4 <__assert_fail@plt+0x8dc>
   118ac:	mov	r6, #0
   118b0:	add	r5, r5, #1
   118b4:	ldrb	r4, [r5]
   118b8:	cmp	r4, #44	; 0x2c
   118bc:	beq	11934 <__assert_fail@plt+0x95c>
   118c0:	cmp	r4, #0
   118c4:	beq	11b18 <__assert_fail@plt+0xb40>
   118c8:	bl	10ed0 <__ctype_b_loc@plt>
   118cc:	ldr	r0, [r0]
   118d0:	ldrb	r0, [r0, r4, lsl #1]
   118d4:	tst	r0, #1
   118d8:	bne	11934 <__assert_fail@plt+0x95c>
   118dc:	cmp	r4, #43	; 0x2b
   118e0:	beq	119a0 <__assert_fail@plt+0x9c8>
   118e4:	cmp	r4, #47	; 0x2f
   118e8:	bne	119fc <__assert_fail@plt+0xa24>
   118ec:	mov	sl, #0
   118f0:	tst	r6, #1
   118f4:	beq	11b00 <__assert_fail@plt+0xb28>
   118f8:	movw	r1, #22367	; 0x575f
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	10e1c <dcgettext@plt>
   1190c:	mov	r6, r0
   11910:	mov	r0, r5
   11914:	bl	1403c <__assert_fail@plt+0x3064>
   11918:	mov	r3, r0
   1191c:	mov	r0, #0
   11920:	mov	r1, #0
   11924:	mov	r2, r6
   11928:	bl	10e88 <error@plt>
   1192c:	mov	r9, #1
   11930:	b	119e4 <__assert_fail@plt+0xa0c>
   11934:	tst	r6, #1
   11938:	beq	118ac <__assert_fail@plt+0x8d4>
   1193c:	tst	r9, #1
   11940:	beq	11964 <__assert_fail@plt+0x98c>
   11944:	movw	r4, #24944	; 0x6170
   11948:	movt	r4, #2
   1194c:	ldrd	r0, [r4]
   11950:	orrs	r0, r0, r1
   11954:	bne	11b44 <__assert_fail@plt+0xb6c>
   11958:	stm	r4, {r7, r8}
   1195c:	mov	r9, #1
   11960:	b	118ac <__assert_fail@plt+0x8d4>
   11964:	tst	sl, #1
   11968:	beq	11988 <__assert_fail@plt+0x9b0>
   1196c:	movw	r4, #24952	; 0x6178
   11970:	movt	r4, #2
   11974:	ldrd	r0, [r4]
   11978:	orrs	r0, r0, r1
   1197c:	bne	11bdc <__assert_fail@plt+0xc04>
   11980:	stm	r4, {r7, r8}
   11984:	b	119f0 <__assert_fail@plt+0xa18>
   11988:	mov	r0, r7
   1198c:	mov	r1, r8
   11990:	bl	11760 <__assert_fail@plt+0x788>
   11994:	mov	r9, #0
   11998:	mov	sl, #0
   1199c:	b	118ac <__assert_fail@plt+0x8d4>
   119a0:	tst	r6, #1
   119a4:	beq	119f0 <__assert_fail@plt+0xa18>
   119a8:	movw	r1, #22408	; 0x5788
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	mov	r9, #0
   119b8:	movt	r1, #1
   119bc:	bl	10e1c <dcgettext@plt>
   119c0:	mov	r6, r0
   119c4:	mov	r0, r5
   119c8:	bl	1403c <__assert_fail@plt+0x3064>
   119cc:	mov	r3, r0
   119d0:	mov	r0, #0
   119d4:	mov	r1, #0
   119d8:	mov	r2, r6
   119dc:	bl	10e88 <error@plt>
   119e0:	mov	sl, #1
   119e4:	mov	r0, #0
   119e8:	str	r0, [sp, #4]
   119ec:	b	11af4 <__assert_fail@plt+0xb1c>
   119f0:	mov	sl, #1
   119f4:	mov	r9, #0
   119f8:	b	118ac <__assert_fail@plt+0x8d4>
   119fc:	sub	r0, r4, #48	; 0x30
   11a00:	cmp	r0, #9
   11a04:	bhi	11ba0 <__assert_fail@plt+0xbc8>
   11a08:	ldr	r2, [sp, #8]
   11a0c:	ands	r1, r6, #1
   11a10:	movw	r3, #39321	; 0x9999
   11a14:	movt	r3, #39321	; 0x9999
   11a18:	moveq	r2, r5
   11a1c:	str	r2, [sp, #8]
   11a20:	mov	r2, r1
   11a24:	movne	r1, r7
   11a28:	movne	r2, r8
   11a2c:	subs	r3, r3, r1
   11a30:	movw	r3, #39321	; 0x9999
   11a34:	movt	r3, #6553	; 0x1999
   11a38:	sbcs	r3, r3, r2
   11a3c:	bcc	11a70 <__assert_fail@plt+0xa98>
   11a40:	mov	r3, #10
   11a44:	add	r6, r2, r2, lsl #2
   11a48:	mov	r8, r2
   11a4c:	umull	r3, r7, r1, r3
   11a50:	add	r7, r7, r6, lsl #1
   11a54:	adds	r3, r3, r0
   11a58:	mov	r6, #1
   11a5c:	adc	r0, r7, r0, asr #31
   11a60:	subs	r7, r3, r1
   11a64:	sbcs	r7, r0, r2
   11a68:	mov	r7, r1
   11a6c:	bcs	11b08 <__assert_fail@plt+0xb30>
   11a70:	str	sl, [sp]
   11a74:	movw	r1, #22449	; 0x57b1
   11a78:	ldr	sl, [sp, #8]
   11a7c:	movt	r1, #1
   11a80:	mov	r0, sl
   11a84:	bl	10fcc <strspn@plt>
   11a88:	mov	r5, r0
   11a8c:	mov	r0, sl
   11a90:	mov	r1, r5
   11a94:	bl	14d04 <__assert_fail@plt+0x3d2c>
   11a98:	movw	r1, #22460	; 0x57bc
   11a9c:	mov	r6, r0
   11aa0:	mov	r0, #0
   11aa4:	mov	r2, #5
   11aa8:	str	r0, [sp, #4]
   11aac:	mov	r0, #0
   11ab0:	movt	r1, #1
   11ab4:	bl	10e1c <dcgettext@plt>
   11ab8:	mov	r4, r8
   11abc:	mov	r8, r0
   11ac0:	mov	r0, r6
   11ac4:	bl	1403c <__assert_fail@plt+0x3064>
   11ac8:	mov	r3, r0
   11acc:	mov	r2, r8
   11ad0:	mov	r0, #0
   11ad4:	mov	r1, #0
   11ad8:	mov	r8, r4
   11adc:	bl	10e88 <error@plt>
   11ae0:	mov	r0, r6
   11ae4:	bl	1233c <__assert_fail@plt+0x1364>
   11ae8:	add	r0, sl, r5
   11aec:	ldr	sl, [sp]
   11af0:	sub	r5, r0, #1
   11af4:	mov	r6, #1
   11af8:	add	r5, r5, #1
   11afc:	b	118b4 <__assert_fail@plt+0x8dc>
   11b00:	mov	r9, #1
   11b04:	b	118ac <__assert_fail@plt+0x8d4>
   11b08:	mov	r7, r3
   11b0c:	mov	r8, r0
   11b10:	add	r5, r5, #1
   11b14:	b	118b4 <__assert_fail@plt+0x8dc>
   11b18:	ldr	r1, [sp, #4]
   11b1c:	and	r0, r1, r6
   11b20:	tst	r0, #1
   11b24:	beq	11b50 <__assert_fail@plt+0xb78>
   11b28:	tst	r9, #1
   11b2c:	beq	11b64 <__assert_fail@plt+0xb8c>
   11b30:	movw	r4, #24944	; 0x6170
   11b34:	movt	r4, #2
   11b38:	ldrd	r0, [r4]
   11b3c:	orrs	r0, r0, r1
   11b40:	beq	11b80 <__assert_fail@plt+0xba8>
   11b44:	movw	r1, #23010	; 0x59e2
   11b48:	movt	r1, #1
   11b4c:	b	11be4 <__assert_fail@plt+0xc0c>
   11b50:	tst	r1, #1
   11b54:	subne	sp, fp, #28
   11b58:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b5c:	mov	r0, #1
   11b60:	bl	10edc <exit@plt>
   11b64:	tst	sl, #1
   11b68:	beq	11b8c <__assert_fail@plt+0xbb4>
   11b6c:	movw	r4, #24952	; 0x6178
   11b70:	movt	r4, #2
   11b74:	ldrd	r0, [r4]
   11b78:	orrs	r0, r0, r1
   11b7c:	bne	11bdc <__assert_fail@plt+0xc04>
   11b80:	stm	r4, {r7, r8}
   11b84:	sub	sp, fp, #28
   11b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b8c:	mov	r0, r7
   11b90:	mov	r1, r8
   11b94:	sub	sp, fp, #28
   11b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b9c:	b	11760 <__assert_fail@plt+0x788>
   11ba0:	movw	r1, #22485	; 0x57d5
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	movt	r1, #1
   11bb0:	bl	10e1c <dcgettext@plt>
   11bb4:	mov	r4, r0
   11bb8:	mov	r0, r5
   11bbc:	bl	1403c <__assert_fail@plt+0x3064>
   11bc0:	mov	r3, r0
   11bc4:	mov	r0, #0
   11bc8:	mov	r1, #0
   11bcc:	mov	r2, r4
   11bd0:	bl	10e88 <error@plt>
   11bd4:	mov	r0, #1
   11bd8:	bl	10edc <exit@plt>
   11bdc:	movw	r1, #23057	; 0x5a11
   11be0:	movt	r1, #1
   11be4:	mov	r0, #0
   11be8:	mov	r2, #5
   11bec:	bl	10e1c <dcgettext@plt>
   11bf0:	mov	r2, r0
   11bf4:	mov	r0, #0
   11bf8:	mov	r1, #0
   11bfc:	bl	10e88 <error@plt>
   11c00:	mov	r0, #1
   11c04:	stm	r4, {r7, r8}
   11c08:	bl	10edc <exit@plt>
   11c0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c10:	add	fp, sp, #24
   11c14:	movw	r0, #24928	; 0x6160
   11c18:	movt	r0, #2
   11c1c:	ldr	r1, [r0]
   11c20:	movw	r0, #24932	; 0x6164
   11c24:	movt	r0, #2
   11c28:	ldr	r0, [r0]
   11c2c:	cmp	r1, #0
   11c30:	beq	11c78 <__assert_fail@plt+0xca0>
   11c34:	mov	r2, #0
   11c38:	mov	r3, r0
   11c3c:	mov	r6, #0
   11c40:	mov	r4, #0
   11c44:	ldr	r8, [r3]
   11c48:	ldr	r5, [r3, #4]
   11c4c:	orrs	r7, r8, r5
   11c50:	beq	11d08 <__assert_fail@plt+0xd30>
   11c54:	subs	r7, r6, r8
   11c58:	sbcs	r7, r4, r5
   11c5c:	bcs	11d14 <__assert_fail@plt+0xd3c>
   11c60:	add	r2, r2, #1
   11c64:	add	r3, r3, #8
   11c68:	mov	r6, r8
   11c6c:	mov	r4, r5
   11c70:	cmp	r2, r1
   11c74:	bcc	11c44 <__assert_fail@plt+0xc6c>
   11c78:	movw	r2, #24944	; 0x6170
   11c7c:	movt	r2, #2
   11c80:	ldrd	r4, [r2]
   11c84:	movw	r2, #24952	; 0x6178
   11c88:	movt	r2, #2
   11c8c:	ldrd	r2, [r2]
   11c90:	orrs	r7, r2, r3
   11c94:	orrsne	r6, r4, r5
   11c98:	bne	11d38 <__assert_fail@plt+0xd60>
   11c9c:	cmp	r1, #0
   11ca0:	beq	11cc8 <__assert_fail@plt+0xcf0>
   11ca4:	mov	r6, #0
   11ca8:	cmp	r1, #1
   11cac:	bne	11cf4 <__assert_fail@plt+0xd1c>
   11cb0:	orr	r1, r4, r2
   11cb4:	orr	r2, r5, r3
   11cb8:	mov	r7, #0
   11cbc:	orrs	r1, r1, r2
   11cc0:	ldrdeq	r6, [r0]
   11cc4:	b	11cf8 <__assert_fail@plt+0xd20>
   11cc8:	cmp	r7, #0
   11ccc:	orr	r0, r4, r5
   11cd0:	mov	r7, #0
   11cd4:	movweq	r2, #8
   11cd8:	cmp	r0, #0
   11cdc:	movw	r0, #25296	; 0x62d0
   11ce0:	movne	r2, r4
   11ce4:	movt	r0, #2
   11ce8:	str	r2, [r0]
   11cec:	mov	r6, r2
   11cf0:	b	11cf8 <__assert_fail@plt+0xd20>
   11cf4:	mov	r7, #0
   11cf8:	movw	r0, #24960	; 0x6180
   11cfc:	movt	r0, #2
   11d00:	strd	r6, [r0]
   11d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d08:	movw	r1, #23104	; 0x5a40
   11d0c:	movt	r1, #1
   11d10:	b	11d1c <__assert_fail@plt+0xd44>
   11d14:	movw	r1, #23125	; 0x5a55
   11d18:	movt	r1, #1
   11d1c:	mov	r0, #0
   11d20:	mov	r2, #5
   11d24:	bl	10e1c <dcgettext@plt>
   11d28:	mov	r2, r0
   11d2c:	mov	r0, #1
   11d30:	mov	r1, #0
   11d34:	bl	10e88 <error@plt>
   11d38:	movw	r1, #23153	; 0x5a71
   11d3c:	movt	r1, #1
   11d40:	b	11d1c <__assert_fail@plt+0xd44>
   11d44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d48:	add	fp, sp, #24
   11d4c:	mov	r9, r0
   11d50:	mov	r0, #0
   11d54:	mov	r8, r1
   11d58:	strb	r0, [r3]
   11d5c:	movw	r0, #24960	; 0x6180
   11d60:	movt	r0, #2
   11d64:	ldrd	r6, [r0]
   11d68:	orrs	r0, r6, r7
   11d6c:	bne	11dd0 <__assert_fail@plt+0xdf8>
   11d70:	movw	r0, #24928	; 0x6160
   11d74:	ldr	r1, [r2]
   11d78:	movt	r0, #2
   11d7c:	ldr	r0, [r0]
   11d80:	cmp	r1, r0
   11d84:	bcs	11dbc <__assert_fail@plt+0xde4>
   11d88:	movw	r7, #24932	; 0x6164
   11d8c:	movt	r7, #2
   11d90:	ldr	r7, [r7]
   11d94:	add	r4, r7, r1, lsl #3
   11d98:	ldrd	r6, [r4]
   11d9c:	subs	r5, r9, r6
   11da0:	sbcs	r5, r8, r7
   11da4:	bcc	11df4 <__assert_fail@plt+0xe1c>
   11da8:	add	r1, r1, #1
   11dac:	add	r4, r4, #8
   11db0:	cmp	r1, r0
   11db4:	str	r1, [r2]
   11db8:	bcc	11d98 <__assert_fail@plt+0xdc0>
   11dbc:	movw	r1, #24944	; 0x6170
   11dc0:	movt	r1, #2
   11dc4:	ldrd	r6, [r1]
   11dc8:	orrs	r1, r6, r7
   11dcc:	beq	11e00 <__assert_fail@plt+0xe28>
   11dd0:	mov	r0, r9
   11dd4:	mov	r1, r8
   11dd8:	mov	r2, r6
   11ddc:	mov	r3, r7
   11de0:	bl	15108 <__assert_fail@plt+0x4130>
   11de4:	adds	r0, r6, r9
   11de8:	adc	r1, r7, r8
   11dec:	subs	r6, r0, r2
   11df0:	sbc	r7, r1, r3
   11df4:	mov	r0, r6
   11df8:	mov	r1, r7
   11dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e00:	movw	r1, #24952	; 0x6178
   11e04:	movt	r1, #2
   11e08:	ldrd	r6, [r1]
   11e0c:	orrs	r1, r6, r7
   11e10:	beq	11e34 <__assert_fail@plt+0xe5c>
   11e14:	movw	r1, #24932	; 0x6164
   11e18:	movt	r1, #2
   11e1c:	ldr	r1, [r1]
   11e20:	add	r0, r1, r0, lsl #3
   11e24:	ldrd	r0, [r0, #-8]
   11e28:	subs	r0, r9, r0
   11e2c:	sbc	r1, r8, r1
   11e30:	b	11dd8 <__assert_fail@plt+0xe00>
   11e34:	mov	r0, #1
   11e38:	mov	r6, #0
   11e3c:	mov	r7, #0
   11e40:	strb	r0, [r3]
   11e44:	b	11df4 <__assert_fail@plt+0xe1c>
   11e48:	movw	r1, #24968	; 0x6188
   11e4c:	mov	r2, #0
   11e50:	cmp	r0, #0
   11e54:	movt	r1, #2
   11e58:	strb	r2, [r1]
   11e5c:	movw	r1, #24800	; 0x60e0
   11e60:	movt	r1, #2
   11e64:	movne	r1, r0
   11e68:	movw	r0, #24972	; 0x618c
   11e6c:	movt	r0, #2
   11e70:	str	r1, [r0]
   11e74:	bx	lr
   11e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e7c:	add	fp, sp, #28
   11e80:	sub	sp, sp, #4
   11e84:	cmp	r0, #0
   11e88:	beq	11f24 <__assert_fail@plt+0xf4c>
   11e8c:	movw	r8, #24976	; 0x6190
   11e90:	movt	r8, #2
   11e94:	ldr	r7, [r8]
   11e98:	cmp	r7, #0
   11e9c:	beq	12040 <__assert_fail@plt+0x1068>
   11ea0:	mov	r5, r0
   11ea4:	bl	10ef4 <__errno_location@plt>
   11ea8:	ldr	r1, [r5]
   11eac:	mov	r6, r0
   11eb0:	ldr	r0, [r0]
   11eb4:	lsl	r1, r1, #26
   11eb8:	and	r4, r0, r1, asr #31
   11ebc:	movw	r1, #23286	; 0x5af6
   11ec0:	mov	r0, r7
   11ec4:	movt	r1, #1
   11ec8:	bl	10dbc <strcmp@plt>
   11ecc:	cmp	r0, #0
   11ed0:	beq	1202c <__assert_fail@plt+0x1054>
   11ed4:	mov	r0, r5
   11ed8:	bl	12244 <__assert_fail@plt+0x126c>
   11edc:	cmp	r0, #0
   11ee0:	ldrne	r4, [r6]
   11ee4:	cmp	r4, #0
   11ee8:	beq	11f24 <__assert_fail@plt+0xf4c>
   11eec:	ldr	r2, [r8]
   11ef0:	mov	r0, #0
   11ef4:	mov	r1, #3
   11ef8:	bl	13d90 <__assert_fail@plt+0x2db8>
   11efc:	movw	r2, #22525	; 0x57fd
   11f00:	mov	r3, r0
   11f04:	mov	r0, #0
   11f08:	mov	r1, r4
   11f0c:	movt	r2, #1
   11f10:	bl	10e88 <error@plt>
   11f14:	movw	r0, #24924	; 0x615c
   11f18:	mov	r1, #1
   11f1c:	movt	r0, #2
   11f20:	str	r1, [r0]
   11f24:	movw	r5, #24972	; 0x618c
   11f28:	movt	r5, #2
   11f2c:	ldr	r0, [r5]
   11f30:	add	r1, r0, #4
   11f34:	str	r1, [r5]
   11f38:	ldr	r7, [r0]
   11f3c:	cmp	r7, #0
   11f40:	beq	12000 <__assert_fail@plt+0x1028>
   11f44:	movw	sl, #22525	; 0x57fd
   11f48:	movw	r9, #24924	; 0x615c
   11f4c:	mov	r8, #1
   11f50:	movt	sl, #1
   11f54:	movt	r9, #2
   11f58:	movw	r1, #23286	; 0x5af6
   11f5c:	mov	r0, r7
   11f60:	movt	r1, #1
   11f64:	bl	10dbc <strcmp@plt>
   11f68:	cmp	r0, #0
   11f6c:	beq	11f90 <__assert_fail@plt+0xfb8>
   11f70:	movw	r1, #22163	; 0x5693
   11f74:	mov	r0, r7
   11f78:	movt	r1, #1
   11f7c:	bl	10f9c <fopen64@plt>
   11f80:	mov	r6, r0
   11f84:	cmp	r6, #0
   11f88:	beq	11fb0 <__assert_fail@plt+0xfd8>
   11f8c:	b	12008 <__assert_fail@plt+0x1030>
   11f90:	movw	r0, #24968	; 0x6188
   11f94:	movt	r0, #2
   11f98:	strb	r8, [r0]
   11f9c:	movw	r0, #24904	; 0x6148
   11fa0:	movt	r0, #2
   11fa4:	ldr	r6, [r0]
   11fa8:	cmp	r6, #0
   11fac:	bne	12008 <__assert_fail@plt+0x1030>
   11fb0:	bl	10ef4 <__errno_location@plt>
   11fb4:	ldr	r4, [r0]
   11fb8:	mov	r0, #0
   11fbc:	mov	r1, #3
   11fc0:	mov	r2, r7
   11fc4:	mov	r6, #0
   11fc8:	bl	13d90 <__assert_fail@plt+0x2db8>
   11fcc:	mov	r3, r0
   11fd0:	mov	r0, #0
   11fd4:	mov	r1, r4
   11fd8:	mov	r2, sl
   11fdc:	bl	10e88 <error@plt>
   11fe0:	ldr	r0, [r5]
   11fe4:	str	r8, [r9]
   11fe8:	add	r1, r0, #4
   11fec:	str	r1, [r5]
   11ff0:	ldr	r7, [r0]
   11ff4:	cmp	r7, #0
   11ff8:	bne	11f58 <__assert_fail@plt+0xf80>
   11ffc:	b	12020 <__assert_fail@plt+0x1048>
   12000:	mov	r6, #0
   12004:	b	12020 <__assert_fail@plt+0x1048>
   12008:	movw	r0, #24976	; 0x6190
   1200c:	mov	r1, #2
   12010:	movt	r0, #2
   12014:	str	r7, [r0]
   12018:	mov	r0, r6
   1201c:	bl	12208 <__assert_fail@plt+0x1230>
   12020:	mov	r0, r6
   12024:	sub	sp, fp, #28
   12028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1202c:	mov	r0, r5
   12030:	bl	10f90 <clearerr_unlocked@plt>
   12034:	cmp	r4, #0
   12038:	bne	11eec <__assert_fail@plt+0xf14>
   1203c:	b	11f24 <__assert_fail@plt+0xf4c>
   12040:	movw	r0, #22528	; 0x5800
   12044:	movw	r1, #22538	; 0x580a
   12048:	movw	r3, #22558	; 0x581e
   1204c:	mov	r2, #340	; 0x154
   12050:	movt	r0, #1
   12054:	movt	r1, #1
   12058:	movt	r3, #1
   1205c:	bl	10fd8 <__assert_fail@plt>
   12060:	push	{fp, lr}
   12064:	mov	fp, sp
   12068:	movw	r0, #24968	; 0x6188
   1206c:	movt	r0, #2
   12070:	ldrb	r0, [r0]
   12074:	cmp	r0, #1
   12078:	popne	{fp, pc}
   1207c:	movw	r0, #24904	; 0x6148
   12080:	movt	r0, #2
   12084:	ldr	r0, [r0]
   12088:	bl	12244 <__assert_fail@plt+0x126c>
   1208c:	cmp	r0, #0
   12090:	bne	12098 <__assert_fail@plt+0x10c0>
   12094:	pop	{fp, pc}
   12098:	bl	10ef4 <__errno_location@plt>
   1209c:	ldr	r1, [r0]
   120a0:	movw	r2, #23286	; 0x5af6
   120a4:	mov	r0, #1
   120a8:	movt	r2, #1
   120ac:	bl	10e88 <error@plt>
   120b0:	push	{r4, sl, fp, lr}
   120b4:	add	fp, sp, #8
   120b8:	movw	r1, #22582	; 0x5836
   120bc:	mov	r0, #0
   120c0:	mov	r2, #5
   120c4:	movt	r1, #1
   120c8:	bl	10e1c <dcgettext@plt>
   120cc:	movw	r4, #24908	; 0x614c
   120d0:	movt	r4, #2
   120d4:	ldr	r1, [r4]
   120d8:	bl	10da4 <fputs_unlocked@plt>
   120dc:	movw	r1, #22645	; 0x5875
   120e0:	mov	r0, #0
   120e4:	mov	r2, #5
   120e8:	movt	r1, #1
   120ec:	bl	10e1c <dcgettext@plt>
   120f0:	ldr	r1, [r4]
   120f4:	pop	{r4, sl, fp, lr}
   120f8:	b	10da4 <fputs_unlocked@plt>
   120fc:	movw	r1, #24980	; 0x6194
   12100:	movt	r1, #2
   12104:	str	r0, [r1]
   12108:	bx	lr
   1210c:	movw	r1, #24984	; 0x6198
   12110:	movt	r1, #2
   12114:	strb	r0, [r1]
   12118:	bx	lr
   1211c:	push	{r4, r5, r6, sl, fp, lr}
   12120:	add	fp, sp, #16
   12124:	sub	sp, sp, #8
   12128:	movw	r0, #24908	; 0x614c
   1212c:	movt	r0, #2
   12130:	ldr	r0, [r0]
   12134:	bl	14ea8 <__assert_fail@plt+0x3ed0>
   12138:	cmp	r0, #0
   1213c:	beq	12164 <__assert_fail@plt+0x118c>
   12140:	movw	r0, #24984	; 0x6198
   12144:	movt	r0, #2
   12148:	ldrb	r0, [r0]
   1214c:	cmp	r0, #0
   12150:	beq	12184 <__assert_fail@plt+0x11ac>
   12154:	bl	10ef4 <__errno_location@plt>
   12158:	ldr	r0, [r0]
   1215c:	cmp	r0, #32
   12160:	bne	12184 <__assert_fail@plt+0x11ac>
   12164:	movw	r0, #24896	; 0x6140
   12168:	movt	r0, #2
   1216c:	ldr	r0, [r0]
   12170:	bl	14ea8 <__assert_fail@plt+0x3ed0>
   12174:	cmp	r0, #0
   12178:	subeq	sp, fp, #16
   1217c:	popeq	{r4, r5, r6, sl, fp, pc}
   12180:	b	121f4 <__assert_fail@plt+0x121c>
   12184:	movw	r1, #22153	; 0x5689
   12188:	mov	r0, #0
   1218c:	mov	r2, #5
   12190:	movt	r1, #1
   12194:	bl	10e1c <dcgettext@plt>
   12198:	mov	r4, r0
   1219c:	movw	r0, #24980	; 0x6194
   121a0:	movt	r0, #2
   121a4:	ldr	r6, [r0]
   121a8:	bl	10ef4 <__errno_location@plt>
   121ac:	ldr	r5, [r0]
   121b0:	cmp	r6, #0
   121b4:	bne	121d0 <__assert_fail@plt+0x11f8>
   121b8:	movw	r2, #22525	; 0x57fd
   121bc:	mov	r0, #0
   121c0:	mov	r1, r5
   121c4:	mov	r3, r4
   121c8:	movt	r2, #1
   121cc:	b	121f0 <__assert_fail@plt+0x1218>
   121d0:	mov	r0, r6
   121d4:	bl	13cb4 <__assert_fail@plt+0x2cdc>
   121d8:	movw	r2, #23213	; 0x5aad
   121dc:	mov	r3, r0
   121e0:	str	r4, [sp]
   121e4:	mov	r0, #0
   121e8:	mov	r1, r5
   121ec:	movt	r2, #1
   121f0:	bl	10e88 <error@plt>
   121f4:	movw	r0, #24812	; 0x60ec
   121f8:	movt	r0, #2
   121fc:	ldr	r0, [r0]
   12200:	bl	10dec <_exit@plt>
   12204:	b	10dc8 <posix_fadvise64@plt>
   12208:	cmp	r0, #0
   1220c:	bxeq	lr
   12210:	push	{r4, sl, fp, lr}
   12214:	add	fp, sp, #8
   12218:	sub	sp, sp, #16
   1221c:	mov	r4, r1
   12220:	bl	10f24 <fileno@plt>
   12224:	mov	r1, #0
   12228:	mov	r2, #0
   1222c:	mov	r3, #0
   12230:	str	r1, [sp]
   12234:	stmib	sp, {r1, r4}
   12238:	bl	10dc8 <posix_fadvise64@plt>
   1223c:	sub	sp, fp, #8
   12240:	pop	{r4, sl, fp, pc}
   12244:	push	{r4, r5, r6, sl, fp, lr}
   12248:	add	fp, sp, #16
   1224c:	sub	sp, sp, #8
   12250:	mov	r4, r0
   12254:	bl	10f24 <fileno@plt>
   12258:	cmn	r0, #1
   1225c:	ble	122d0 <__assert_fail@plt+0x12f8>
   12260:	mov	r0, r4
   12264:	bl	10eac <__freading@plt>
   12268:	cmp	r0, #0
   1226c:	beq	12298 <__assert_fail@plt+0x12c0>
   12270:	mov	r0, r4
   12274:	bl	10f24 <fileno@plt>
   12278:	mov	r1, #1
   1227c:	mov	r2, #0
   12280:	mov	r3, #0
   12284:	str	r1, [sp]
   12288:	bl	10e58 <lseek64@plt>
   1228c:	and	r0, r0, r1
   12290:	cmn	r0, #1
   12294:	beq	122d0 <__assert_fail@plt+0x12f8>
   12298:	mov	r0, r4
   1229c:	bl	122e0 <__assert_fail@plt+0x1308>
   122a0:	cmp	r0, #0
   122a4:	beq	122d0 <__assert_fail@plt+0x12f8>
   122a8:	bl	10ef4 <__errno_location@plt>
   122ac:	ldr	r6, [r0]
   122b0:	mov	r5, r0
   122b4:	mov	r0, r4
   122b8:	bl	10f3c <fclose@plt>
   122bc:	cmp	r6, #0
   122c0:	strne	r6, [r5]
   122c4:	mvnne	r0, #0
   122c8:	sub	sp, fp, #16
   122cc:	pop	{r4, r5, r6, sl, fp, pc}
   122d0:	mov	r0, r4
   122d4:	sub	sp, fp, #16
   122d8:	pop	{r4, r5, r6, sl, fp, lr}
   122dc:	b	10f3c <fclose@plt>
   122e0:	push	{r4, sl, fp, lr}
   122e4:	add	fp, sp, #8
   122e8:	sub	sp, sp, #8
   122ec:	mov	r4, r0
   122f0:	cmp	r0, #0
   122f4:	beq	12310 <__assert_fail@plt+0x1338>
   122f8:	mov	r0, r4
   122fc:	bl	10eac <__freading@plt>
   12300:	cmp	r0, #0
   12304:	ldrbne	r0, [r4, #1]
   12308:	tstne	r0, #1
   1230c:	bne	12320 <__assert_fail@plt+0x1348>
   12310:	mov	r0, r4
   12314:	sub	sp, fp, #8
   12318:	pop	{r4, sl, fp, lr}
   1231c:	b	10dd4 <fflush@plt>
   12320:	mov	r0, #1
   12324:	mov	r2, #0
   12328:	mov	r3, #0
   1232c:	str	r0, [sp]
   12330:	mov	r0, r4
   12334:	bl	12364 <__assert_fail@plt+0x138c>
   12338:	b	12310 <__assert_fail@plt+0x1338>
   1233c:	push	{r4, r5, r6, sl, fp, lr}
   12340:	add	fp, sp, #16
   12344:	mov	r4, r0
   12348:	bl	10ef4 <__errno_location@plt>
   1234c:	ldr	r6, [r0]
   12350:	mov	r5, r0
   12354:	mov	r0, r4
   12358:	bl	10de0 <free@plt>
   1235c:	str	r6, [r5]
   12360:	pop	{r4, r5, r6, sl, fp, pc}
   12364:	push	{r4, r5, r6, r7, fp, lr}
   12368:	add	fp, sp, #16
   1236c:	sub	sp, sp, #8
   12370:	mov	r4, r0
   12374:	ldr	r0, [r0, #4]
   12378:	mov	r5, r3
   1237c:	mov	r6, r2
   12380:	ldr	r1, [r4, #8]
   12384:	cmp	r1, r0
   12388:	bne	123a4 <__assert_fail@plt+0x13cc>
   1238c:	ldrd	r0, [r4, #16]
   12390:	cmp	r1, r0
   12394:	bne	123a4 <__assert_fail@plt+0x13cc>
   12398:	ldr	r0, [r4, #36]	; 0x24
   1239c:	cmp	r0, #0
   123a0:	beq	123bc <__assert_fail@plt+0x13e4>
   123a4:	mov	r0, r4
   123a8:	mov	r2, r6
   123ac:	mov	r3, r5
   123b0:	sub	sp, fp, #16
   123b4:	pop	{r4, r5, r6, r7, fp, lr}
   123b8:	b	10f48 <fseeko64@plt>
   123bc:	ldr	r7, [fp, #8]
   123c0:	mov	r0, r4
   123c4:	bl	10f24 <fileno@plt>
   123c8:	mov	r2, r6
   123cc:	mov	r3, r5
   123d0:	str	r7, [sp]
   123d4:	bl	10e58 <lseek64@plt>
   123d8:	and	r2, r0, r1
   123dc:	cmn	r2, #1
   123e0:	mvneq	r0, #0
   123e4:	subeq	sp, fp, #16
   123e8:	popeq	{r4, r5, r6, r7, fp, pc}
   123ec:	strd	r0, [r4, #80]	; 0x50
   123f0:	ldr	r0, [r4]
   123f4:	bic	r0, r0, #16
   123f8:	str	r0, [r4]
   123fc:	mov	r0, #0
   12400:	sub	sp, fp, #16
   12404:	pop	{r4, r5, r6, r7, fp, pc}
   12408:	push	{r4, r5, fp, lr}
   1240c:	add	fp, sp, #8
   12410:	cmp	r0, #0
   12414:	beq	124a8 <__assert_fail@plt+0x14d0>
   12418:	mov	r1, #47	; 0x2f
   1241c:	mov	r4, r0
   12420:	bl	10f78 <strrchr@plt>
   12424:	cmp	r0, #0
   12428:	mov	r5, r4
   1242c:	addne	r5, r0, #1
   12430:	sub	r0, r5, r4
   12434:	cmp	r0, #7
   12438:	blt	1248c <__assert_fail@plt+0x14b4>
   1243c:	movw	r1, #23276	; 0x5aec
   12440:	sub	r0, r5, #7
   12444:	mov	r2, #7
   12448:	movt	r1, #1
   1244c:	bl	10fb4 <strncmp@plt>
   12450:	cmp	r0, #0
   12454:	bne	1248c <__assert_fail@plt+0x14b4>
   12458:	movw	r1, #23284	; 0x5af4
   1245c:	mov	r0, r5
   12460:	mov	r2, #3
   12464:	movt	r1, #1
   12468:	bl	10fb4 <strncmp@plt>
   1246c:	cmp	r0, #0
   12470:	beq	1247c <__assert_fail@plt+0x14a4>
   12474:	mov	r4, r5
   12478:	b	1248c <__assert_fail@plt+0x14b4>
   1247c:	movw	r0, #24880	; 0x6130
   12480:	add	r4, r5, #3
   12484:	movt	r0, #2
   12488:	str	r4, [r0]
   1248c:	movw	r0, #24884	; 0x6134
   12490:	movt	r0, #2
   12494:	str	r4, [r0]
   12498:	movw	r0, #24988	; 0x619c
   1249c:	movt	r0, #2
   124a0:	str	r4, [r0]
   124a4:	pop	{r4, r5, fp, pc}
   124a8:	movw	r0, #24896	; 0x6140
   124ac:	mov	r1, #55	; 0x37
   124b0:	mov	r2, #1
   124b4:	movt	r0, #2
   124b8:	ldr	r3, [r0]
   124bc:	movw	r0, #23220	; 0x5ab4
   124c0:	movt	r0, #1
   124c4:	bl	10e4c <fwrite@plt>
   124c8:	bl	10fc0 <abort@plt>
   124cc:	push	{r4, r5, r6, sl, fp, lr}
   124d0:	add	fp, sp, #16
   124d4:	mov	r4, r0
   124d8:	movw	r0, #24992	; 0x61a0
   124dc:	movt	r0, #2
   124e0:	cmp	r4, #0
   124e4:	moveq	r4, r0
   124e8:	bl	10ef4 <__errno_location@plt>
   124ec:	ldr	r6, [r0]
   124f0:	mov	r5, r0
   124f4:	mov	r0, r4
   124f8:	mov	r1, #48	; 0x30
   124fc:	bl	14c8c <__assert_fail@plt+0x3cb4>
   12500:	str	r6, [r5]
   12504:	pop	{r4, r5, r6, sl, fp, pc}
   12508:	movw	r1, #24992	; 0x61a0
   1250c:	cmp	r0, #0
   12510:	movt	r1, #2
   12514:	movne	r1, r0
   12518:	ldr	r0, [r1]
   1251c:	bx	lr
   12520:	movw	r2, #24992	; 0x61a0
   12524:	cmp	r0, #0
   12528:	movt	r2, #2
   1252c:	movne	r2, r0
   12530:	str	r1, [r2]
   12534:	bx	lr
   12538:	movw	r3, #24992	; 0x61a0
   1253c:	cmp	r0, #0
   12540:	movt	r3, #2
   12544:	movne	r3, r0
   12548:	ubfx	r0, r1, #5, #3
   1254c:	and	r1, r1, #31
   12550:	add	r0, r3, r0, lsl #2
   12554:	ldr	r3, [r0, #8]
   12558:	eor	r2, r2, r3, lsr r1
   1255c:	and	r2, r2, #1
   12560:	eor	r2, r3, r2, lsl r1
   12564:	str	r2, [r0, #8]
   12568:	mov	r0, #1
   1256c:	and	r0, r0, r3, lsr r1
   12570:	bx	lr
   12574:	movw	r2, #24992	; 0x61a0
   12578:	cmp	r0, #0
   1257c:	movt	r2, #2
   12580:	movne	r2, r0
   12584:	ldr	r0, [r2, #4]
   12588:	str	r1, [r2, #4]
   1258c:	bx	lr
   12590:	movw	r3, #24992	; 0x61a0
   12594:	cmp	r0, #0
   12598:	movt	r3, #2
   1259c:	movne	r3, r0
   125a0:	cmp	r1, #0
   125a4:	mov	r0, #10
   125a8:	cmpne	r2, #0
   125ac:	str	r0, [r3]
   125b0:	bne	125c0 <__assert_fail@plt+0x15e8>
   125b4:	push	{fp, lr}
   125b8:	mov	fp, sp
   125bc:	bl	10fc0 <abort@plt>
   125c0:	str	r1, [r3, #40]	; 0x28
   125c4:	str	r2, [r3, #44]	; 0x2c
   125c8:	bx	lr
   125cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d0:	add	fp, sp, #28
   125d4:	sub	sp, sp, #20
   125d8:	mov	r7, r0
   125dc:	ldr	r0, [fp, #8]
   125e0:	movw	r5, #24992	; 0x61a0
   125e4:	mov	r8, r3
   125e8:	mov	r9, r2
   125ec:	mov	sl, r1
   125f0:	movt	r5, #2
   125f4:	cmp	r0, #0
   125f8:	movne	r5, r0
   125fc:	bl	10ef4 <__errno_location@plt>
   12600:	mov	r4, r0
   12604:	ldm	r5, {r0, r1}
   12608:	ldr	r2, [r5, #40]	; 0x28
   1260c:	ldr	r3, [r5, #44]	; 0x2c
   12610:	add	r5, r5, #8
   12614:	ldr	r6, [r4]
   12618:	stm	sp, {r0, r1, r5}
   1261c:	str	r2, [sp, #12]
   12620:	str	r3, [sp, #16]
   12624:	mov	r0, r7
   12628:	mov	r1, sl
   1262c:	mov	r2, r9
   12630:	mov	r3, r8
   12634:	bl	12644 <__assert_fail@plt+0x166c>
   12638:	str	r6, [r4]
   1263c:	sub	sp, fp, #28
   12640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12648:	add	fp, sp, #28
   1264c:	sub	sp, sp, #156	; 0x9c
   12650:	str	r0, [sp, #80]	; 0x50
   12654:	ldr	r0, [fp, #12]
   12658:	mov	r6, r1
   1265c:	mov	r9, r3
   12660:	str	r2, [fp, #-84]	; 0xffffffac
   12664:	and	r1, r0, #4
   12668:	str	r1, [sp, #32]
   1266c:	and	r1, r0, #1
   12670:	str	r1, [sp, #36]	; 0x24
   12674:	ubfx	r4, r0, #1, #1
   12678:	bl	10e64 <__ctype_get_mb_cur_max@plt>
   1267c:	str	r0, [sp, #40]	; 0x28
   12680:	ldr	r0, [fp, #24]
   12684:	ldr	r7, [fp, #8]
   12688:	mov	r1, #0
   1268c:	mov	r5, #1
   12690:	str	r1, [fp, #-56]	; 0xffffffc8
   12694:	mov	r1, #0
   12698:	str	r1, [sp, #60]	; 0x3c
   1269c:	str	r0, [sp, #76]	; 0x4c
   126a0:	ldr	r0, [fp, #20]
   126a4:	str	r0, [sp, #72]	; 0x48
   126a8:	mov	r0, #0
   126ac:	str	r0, [sp, #56]	; 0x38
   126b0:	mov	r0, #0
   126b4:	str	r0, [sp, #92]	; 0x5c
   126b8:	mov	r0, #0
   126bc:	str	r0, [fp, #-76]	; 0xffffffb4
   126c0:	mov	r0, #0
   126c4:	cmp	r7, #10
   126c8:	bhi	13648 <__assert_fail@plt+0x2670>
   126cc:	add	r1, pc, #28
   126d0:	mov	sl, r6
   126d4:	ldr	r6, [sp, #80]	; 0x50
   126d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   126dc:	mov	r8, #0
   126e0:	mov	r2, #1
   126e4:	mov	r3, #0
   126e8:	mov	lr, r9
   126ec:	ldr	pc, [r1, r7, lsl #2]
   126f0:	ldrdeq	r2, [r1], -r4
   126f4:	andeq	r2, r1, r0, lsl #16
   126f8:	andeq	r2, r1, r4, asr #15
   126fc:			; <UNDEFINED> instruction: 0x000127bc
   12700:	strdeq	r2, [r1], -r4
   12704:	andeq	r2, r1, r8, asr #16
   12708:	andeq	r2, r1, r4, ror #15
   1270c:	andeq	r2, r1, r4, lsr #17
   12710:	andeq	r2, r1, ip, lsl r7
   12714:	andeq	r2, r1, ip, lsl r7
   12718:	andeq	r2, r1, r4, asr #14
   1271c:	movw	r0, #23366	; 0x5b46
   12720:	mov	r1, r7
   12724:	movt	r0, #1
   12728:	bl	14054 <__assert_fail@plt+0x307c>
   1272c:	str	r0, [sp, #72]	; 0x48
   12730:	movw	r0, #23196	; 0x5a9c
   12734:	mov	r1, r7
   12738:	movt	r0, #1
   1273c:	bl	14054 <__assert_fail@plt+0x307c>
   12740:	str	r0, [sp, #76]	; 0x4c
   12744:	str	r5, [fp, #-48]	; 0xffffffd0
   12748:	mov	r8, #0
   1274c:	mov	r5, r7
   12750:	tst	r4, #1
   12754:	bne	1278c <__assert_fail@plt+0x17b4>
   12758:	ldr	r0, [sp, #72]	; 0x48
   1275c:	ldrb	r0, [r0]
   12760:	cmp	r0, #0
   12764:	beq	1278c <__assert_fail@plt+0x17b4>
   12768:	ldr	r1, [sp, #72]	; 0x48
   1276c:	mov	r8, #0
   12770:	add	r1, r1, #1
   12774:	cmp	r8, sl
   12778:	strbcc	r0, [r6, r8]
   1277c:	ldrb	r0, [r1, r8]
   12780:	add	r8, r8, #1
   12784:	cmp	r0, #0
   12788:	bne	12774 <__assert_fail@plt+0x179c>
   1278c:	ldr	r7, [sp, #76]	; 0x4c
   12790:	mov	r0, r7
   12794:	bl	10ee8 <strlen@plt>
   12798:	str	r7, [sp, #92]	; 0x5c
   1279c:	mov	r7, r5
   127a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   127a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127a8:	str	r0, [fp, #-76]	; 0xffffffb4
   127ac:	mov	r2, #1
   127b0:	mov	r3, r4
   127b4:	mov	lr, r9
   127b8:	b	128a4 <__assert_fail@plt+0x18cc>
   127bc:	mov	r0, #1
   127c0:	b	12800 <__assert_fail@plt+0x1828>
   127c4:	tst	r4, #1
   127c8:	bne	12800 <__assert_fail@plt+0x1828>
   127cc:	mov	r2, r0
   127d0:	b	12828 <__assert_fail@plt+0x1850>
   127d4:	mov	r7, #0
   127d8:	mov	r8, #0
   127dc:	mov	r2, r0
   127e0:	b	128a0 <__assert_fail@plt+0x18c8>
   127e4:	mov	r0, #1
   127e8:	mov	r8, #0
   127ec:	mov	r7, #5
   127f0:	b	1285c <__assert_fail@plt+0x1884>
   127f4:	mov	r2, #1
   127f8:	tst	r4, #1
   127fc:	beq	12828 <__assert_fail@plt+0x1850>
   12800:	mov	r1, #1
   12804:	mov	r8, #0
   12808:	mov	r7, #2
   1280c:	mov	r2, r0
   12810:	mov	r3, #1
   12814:	str	r1, [fp, #-76]	; 0xffffffb4
   12818:	movw	r1, #23196	; 0x5a9c
   1281c:	movt	r1, #1
   12820:	str	r1, [sp, #92]	; 0x5c
   12824:	b	128a4 <__assert_fail@plt+0x18cc>
   12828:	cmp	sl, #0
   1282c:	mov	r8, #1
   12830:	mov	r7, #2
   12834:	movne	r0, #39	; 0x27
   12838:	strbne	r0, [r6]
   1283c:	movw	r0, #23196	; 0x5a9c
   12840:	movt	r0, #1
   12844:	b	12894 <__assert_fail@plt+0x18bc>
   12848:	mov	r7, #5
   1284c:	tst	r4, #1
   12850:	beq	12878 <__assert_fail@plt+0x18a0>
   12854:	mov	r0, #1
   12858:	mov	r8, #0
   1285c:	str	r0, [fp, #-76]	; 0xffffffb4
   12860:	movw	r0, #23364	; 0x5b44
   12864:	mov	r2, #1
   12868:	mov	r3, #1
   1286c:	movt	r0, #1
   12870:	str	r0, [sp, #92]	; 0x5c
   12874:	b	128a4 <__assert_fail@plt+0x18cc>
   12878:	cmp	sl, #0
   1287c:	mov	r8, #1
   12880:	mov	r2, #1
   12884:	movne	r0, #34	; 0x22
   12888:	strbne	r0, [r6]
   1288c:	movw	r0, #23364	; 0x5b44
   12890:	movt	r0, #1
   12894:	str	r0, [sp, #92]	; 0x5c
   12898:	mov	r0, #1
   1289c:	str	r0, [fp, #-76]	; 0xffffffb4
   128a0:	mov	r3, #0
   128a4:	ldr	r0, [fp, #16]
   128a8:	str	r3, [fp, #-72]	; 0xffffffb8
   128ac:	str	r7, [fp, #-64]	; 0xffffffc0
   128b0:	str	r2, [sp, #84]	; 0x54
   128b4:	cmp	r0, #0
   128b8:	movwne	r0, #1
   128bc:	and	r0, r0, r3
   128c0:	str	r0, [fp, #-88]	; 0xffffffa8
   128c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128c8:	cmp	r0, #0
   128cc:	movwne	r0, #1
   128d0:	subs	r4, r7, #2
   128d4:	mov	r7, #0
   128d8:	and	r1, r0, r3
   128dc:	str	r4, [fp, #-80]	; 0xffffffb0
   128e0:	and	r1, r2, r1
   128e4:	str	r1, [sp, #48]	; 0x30
   128e8:	clz	r1, r4
   128ec:	lsr	r1, r1, #5
   128f0:	and	r1, r1, r3
   128f4:	eor	r3, r3, #1
   128f8:	str	r1, [sp, #64]	; 0x40
   128fc:	mov	r1, r4
   12900:	str	r3, [sp, #88]	; 0x58
   12904:	movwne	r1, #1
   12908:	orr	r3, r1, r3
   1290c:	and	r1, r1, r2
   12910:	and	r0, r0, r1
   12914:	str	r3, [sp, #68]	; 0x44
   12918:	str	r1, [fp, #-68]	; 0xffffffbc
   1291c:	str	r0, [fp, #-60]	; 0xffffffc4
   12920:	eor	r0, r2, #1
   12924:	str	r0, [sp, #52]	; 0x34
   12928:	cmn	lr, #1
   1292c:	beq	1293c <__assert_fail@plt+0x1964>
   12930:	cmp	r7, lr
   12934:	bne	12948 <__assert_fail@plt+0x1970>
   12938:	b	13470 <__assert_fail@plt+0x2498>
   1293c:	ldrb	r0, [ip, r7]
   12940:	cmp	r0, #0
   12944:	beq	13478 <__assert_fail@plt+0x24a0>
   12948:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1294c:	mov	r9, #0
   12950:	str	r5, [fp, #-48]	; 0xffffffd0
   12954:	cmp	r0, #0
   12958:	beq	1298c <__assert_fail@plt+0x19b4>
   1295c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12960:	add	r4, r7, r0
   12964:	cmp	r0, #2
   12968:	bcc	12984 <__assert_fail@plt+0x19ac>
   1296c:	cmn	lr, #1
   12970:	bne	12984 <__assert_fail@plt+0x19ac>
   12974:	mov	r0, ip
   12978:	bl	10ee8 <strlen@plt>
   1297c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12980:	mov	lr, r0
   12984:	cmp	r4, lr
   12988:	bls	12994 <__assert_fail@plt+0x19bc>
   1298c:	mov	r0, #0
   12990:	b	129d4 <__assert_fail@plt+0x19fc>
   12994:	ldr	r1, [sp, #92]	; 0x5c
   12998:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1299c:	add	r0, ip, r7
   129a0:	mov	r4, lr
   129a4:	bl	10e10 <memcmp@plt>
   129a8:	ldr	r2, [sp, #88]	; 0x58
   129ac:	cmp	r0, #0
   129b0:	mov	r1, r0
   129b4:	movwne	r1, #1
   129b8:	orr	r1, r1, r2
   129bc:	tst	r1, #1
   129c0:	beq	13508 <__assert_fail@plt+0x2530>
   129c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129c8:	clz	r0, r0
   129cc:	mov	lr, r4
   129d0:	lsr	r0, r0, #5
   129d4:	str	r0, [fp, #-52]	; 0xffffffcc
   129d8:	ldrb	r5, [ip, r7]
   129dc:	cmp	r5, #126	; 0x7e
   129e0:	bhi	12d98 <__assert_fail@plt+0x1dc0>
   129e4:	add	r3, pc, #16
   129e8:	mov	r4, #1
   129ec:	mov	r2, #110	; 0x6e
   129f0:	mov	r0, #97	; 0x61
   129f4:	mov	r1, #0
   129f8:	ldr	pc, [r3, r5, lsl #2]
   129fc:	muleq	r1, r4, ip
   12a00:	muleq	r1, r8, sp
   12a04:	muleq	r1, r8, sp
   12a08:	muleq	r1, r8, sp
   12a0c:	muleq	r1, r8, sp
   12a10:	muleq	r1, r8, sp
   12a14:	muleq	r1, r8, sp
   12a18:	andeq	r2, r1, ip, asr #28
   12a1c:	andeq	r2, r1, r4, ror ip
   12a20:	andeq	r2, r1, ip, ror #24
   12a24:	andeq	r2, r1, r0, lsl #25
   12a28:	andeq	r2, r1, r0, lsl #26
   12a2c:	andeq	r2, r1, r4, ror #24
   12a30:	andeq	r2, r1, ip, ror ip
   12a34:	muleq	r1, r8, sp
   12a38:	muleq	r1, r8, sp
   12a3c:	muleq	r1, r8, sp
   12a40:	muleq	r1, r8, sp
   12a44:	muleq	r1, r8, sp
   12a48:	muleq	r1, r8, sp
   12a4c:	muleq	r1, r8, sp
   12a50:	muleq	r1, r8, sp
   12a54:	muleq	r1, r8, sp
   12a58:	muleq	r1, r8, sp
   12a5c:	muleq	r1, r8, sp
   12a60:	muleq	r1, r8, sp
   12a64:	muleq	r1, r8, sp
   12a68:	muleq	r1, r8, sp
   12a6c:	muleq	r1, r8, sp
   12a70:	muleq	r1, r8, sp
   12a74:	muleq	r1, r8, sp
   12a78:	muleq	r1, r8, sp
   12a7c:	andeq	r2, r1, r4, lsl #28
   12a80:	andeq	r2, r1, r8, lsl #28
   12a84:	andeq	r2, r1, r8, lsl #28
   12a88:	andeq	r2, r1, ip, lsl #24
   12a8c:	andeq	r2, r1, r8, lsl #28
   12a90:	strdeq	r2, [r1], -r8
   12a94:	andeq	r2, r1, r8, lsl #28
   12a98:	andeq	r2, r1, r8, lsl #26
   12a9c:	andeq	r2, r1, r8, lsl #28
   12aa0:	andeq	r2, r1, r8, lsl #28
   12aa4:	andeq	r2, r1, r8, lsl #28
   12aa8:	strdeq	r2, [r1], -r8
   12aac:	strdeq	r2, [r1], -r8
   12ab0:	strdeq	r2, [r1], -r8
   12ab4:	strdeq	r2, [r1], -r8
   12ab8:	strdeq	r2, [r1], -r8
   12abc:	strdeq	r2, [r1], -r8
   12ac0:	strdeq	r2, [r1], -r8
   12ac4:	strdeq	r2, [r1], -r8
   12ac8:	strdeq	r2, [r1], -r8
   12acc:	strdeq	r2, [r1], -r8
   12ad0:	strdeq	r2, [r1], -r8
   12ad4:	strdeq	r2, [r1], -r8
   12ad8:	strdeq	r2, [r1], -r8
   12adc:	strdeq	r2, [r1], -r8
   12ae0:	strdeq	r2, [r1], -r8
   12ae4:	strdeq	r2, [r1], -r8
   12ae8:	andeq	r2, r1, r8, lsl #28
   12aec:	andeq	r2, r1, r8, lsl #28
   12af0:	andeq	r2, r1, r8, lsl #28
   12af4:	andeq	r2, r1, r8, lsl #28
   12af8:	ldrdeq	r2, [r1], -r4
   12afc:	muleq	r1, r8, sp
   12b00:	strdeq	r2, [r1], -r8
   12b04:	strdeq	r2, [r1], -r8
   12b08:	strdeq	r2, [r1], -r8
   12b0c:	strdeq	r2, [r1], -r8
   12b10:	strdeq	r2, [r1], -r8
   12b14:	strdeq	r2, [r1], -r8
   12b18:	strdeq	r2, [r1], -r8
   12b1c:	strdeq	r2, [r1], -r8
   12b20:	strdeq	r2, [r1], -r8
   12b24:	strdeq	r2, [r1], -r8
   12b28:	strdeq	r2, [r1], -r8
   12b2c:	strdeq	r2, [r1], -r8
   12b30:	strdeq	r2, [r1], -r8
   12b34:	strdeq	r2, [r1], -r8
   12b38:	strdeq	r2, [r1], -r8
   12b3c:	strdeq	r2, [r1], -r8
   12b40:	strdeq	r2, [r1], -r8
   12b44:	strdeq	r2, [r1], -r8
   12b48:	strdeq	r2, [r1], -r8
   12b4c:	strdeq	r2, [r1], -r8
   12b50:	strdeq	r2, [r1], -r8
   12b54:	strdeq	r2, [r1], -r8
   12b58:	strdeq	r2, [r1], -r8
   12b5c:	strdeq	r2, [r1], -r8
   12b60:	strdeq	r2, [r1], -r8
   12b64:	strdeq	r2, [r1], -r8
   12b68:	andeq	r2, r1, r8, lsl #28
   12b6c:	andeq	r2, r1, r0, asr #24
   12b70:	strdeq	r2, [r1], -r8
   12b74:	andeq	r2, r1, r8, lsl #28
   12b78:	strdeq	r2, [r1], -r8
   12b7c:	andeq	r2, r1, r8, lsl #28
   12b80:	strdeq	r2, [r1], -r8
   12b84:	strdeq	r2, [r1], -r8
   12b88:	strdeq	r2, [r1], -r8
   12b8c:	strdeq	r2, [r1], -r8
   12b90:	strdeq	r2, [r1], -r8
   12b94:	strdeq	r2, [r1], -r8
   12b98:	strdeq	r2, [r1], -r8
   12b9c:	strdeq	r2, [r1], -r8
   12ba0:	strdeq	r2, [r1], -r8
   12ba4:	strdeq	r2, [r1], -r8
   12ba8:	strdeq	r2, [r1], -r8
   12bac:	strdeq	r2, [r1], -r8
   12bb0:	strdeq	r2, [r1], -r8
   12bb4:	strdeq	r2, [r1], -r8
   12bb8:	strdeq	r2, [r1], -r8
   12bbc:	strdeq	r2, [r1], -r8
   12bc0:	strdeq	r2, [r1], -r8
   12bc4:	strdeq	r2, [r1], -r8
   12bc8:	strdeq	r2, [r1], -r8
   12bcc:	strdeq	r2, [r1], -r8
   12bd0:	strdeq	r2, [r1], -r8
   12bd4:	strdeq	r2, [r1], -r8
   12bd8:	strdeq	r2, [r1], -r8
   12bdc:	strdeq	r2, [r1], -r8
   12be0:	strdeq	r2, [r1], -r8
   12be4:	strdeq	r2, [r1], -r8
   12be8:	andeq	r2, r1, r0, lsr #24
   12bec:	andeq	r2, r1, r8, lsl #28
   12bf0:	andeq	r2, r1, r0, lsr #24
   12bf4:	andeq	r2, r1, ip, lsl #24
   12bf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bfc:	cmp	r0, #0
   12c00:	beq	12e60 <__assert_fail@plt+0x1e88>
   12c04:	ldr	r0, [fp, #16]
   12c08:	b	12e64 <__assert_fail@plt+0x1e8c>
   12c0c:	mov	r4, #0
   12c10:	cmp	r7, #0
   12c14:	beq	12e04 <__assert_fail@plt+0x1e2c>
   12c18:	mov	r9, #0
   12c1c:	b	12bf8 <__assert_fail@plt+0x1c20>
   12c20:	mov	r4, #0
   12c24:	cmn	lr, #1
   12c28:	beq	12de8 <__assert_fail@plt+0x1e10>
   12c2c:	cmp	r7, #0
   12c30:	bne	12c18 <__assert_fail@plt+0x1c40>
   12c34:	cmp	lr, #1
   12c38:	beq	12e04 <__assert_fail@plt+0x1e2c>
   12c3c:	b	12c18 <__assert_fail@plt+0x1c40>
   12c40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c44:	cmp	r0, #2
   12c48:	bne	12e28 <__assert_fail@plt+0x1e50>
   12c4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c50:	tst	r0, #1
   12c54:	bne	13524 <__assert_fail@plt+0x254c>
   12c58:	mov	r9, #0
   12c5c:	mov	r0, #92	; 0x5c
   12c60:	b	12e3c <__assert_fail@plt+0x1e64>
   12c64:	mov	r0, #102	; 0x66
   12c68:	b	12e4c <__assert_fail@plt+0x1e74>
   12c6c:	mov	r2, #116	; 0x74
   12c70:	b	12c80 <__assert_fail@plt+0x1ca8>
   12c74:	mov	r0, #98	; 0x62
   12c78:	b	12e4c <__assert_fail@plt+0x1e74>
   12c7c:	mov	r2, #114	; 0x72
   12c80:	ldr	r0, [sp, #68]	; 0x44
   12c84:	tst	r0, #1
   12c88:	mov	r0, r2
   12c8c:	bne	12e4c <__assert_fail@plt+0x1e74>
   12c90:	b	13524 <__assert_fail@plt+0x254c>
   12c94:	ldr	r0, [sp, #84]	; 0x54
   12c98:	tst	r0, #1
   12c9c:	beq	12f3c <__assert_fail@plt+0x1f64>
   12ca0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ca4:	tst	r0, #1
   12ca8:	bne	13634 <__assert_fail@plt+0x265c>
   12cac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cb0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12cb4:	cmp	r0, #2
   12cb8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12cbc:	movwne	r0, #1
   12cc0:	orr	r0, r0, r2
   12cc4:	tst	r0, #1
   12cc8:	beq	1330c <__assert_fail@plt+0x2334>
   12ccc:	mov	r0, r8
   12cd0:	b	13340 <__assert_fail@plt+0x2368>
   12cd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cd8:	mov	r9, #0
   12cdc:	mov	r5, #63	; 0x3f
   12ce0:	cmp	r0, #5
   12ce4:	beq	130f0 <__assert_fail@plt+0x2118>
   12ce8:	cmp	r0, #2
   12cec:	bne	13194 <__assert_fail@plt+0x21bc>
   12cf0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cf4:	tst	r0, #1
   12cf8:	beq	13198 <__assert_fail@plt+0x21c0>
   12cfc:	b	13524 <__assert_fail@plt+0x254c>
   12d00:	mov	r0, #118	; 0x76
   12d04:	b	12e4c <__assert_fail@plt+0x1e74>
   12d08:	mov	r0, #1
   12d0c:	mov	r5, #39	; 0x27
   12d10:	str	r0, [sp, #60]	; 0x3c
   12d14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d18:	cmp	r0, #2
   12d1c:	bne	12d90 <__assert_fail@plt+0x1db8>
   12d20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d24:	tst	r0, #1
   12d28:	bne	13524 <__assert_fail@plt+0x254c>
   12d2c:	ldr	r2, [sp, #56]	; 0x38
   12d30:	clz	r1, sl
   12d34:	mov	r9, #0
   12d38:	lsr	r1, r1, #5
   12d3c:	cmp	r2, #0
   12d40:	mov	r0, r2
   12d44:	movwne	r0, #1
   12d48:	orrs	r0, r0, r1
   12d4c:	moveq	r2, sl
   12d50:	moveq	sl, r0
   12d54:	cmp	r8, sl
   12d58:	str	r2, [sp, #56]	; 0x38
   12d5c:	movcc	r0, #39	; 0x27
   12d60:	strbcc	r0, [r6, r8]
   12d64:	add	r0, r8, #1
   12d68:	cmp	r0, sl
   12d6c:	movcc	r1, #92	; 0x5c
   12d70:	strbcc	r1, [r6, r0]
   12d74:	add	r0, r8, #2
   12d78:	add	r8, r8, #3
   12d7c:	cmp	r0, sl
   12d80:	movcc	r1, #39	; 0x27
   12d84:	strbcc	r1, [r6, r0]
   12d88:	mov	r0, #0
   12d8c:	str	r0, [fp, #-56]	; 0xffffffc8
   12d90:	mov	r4, #1
   12d94:	b	12bf8 <__assert_fail@plt+0x1c20>
   12d98:	ldr	r0, [sp, #40]	; 0x28
   12d9c:	cmp	r0, #1
   12da0:	bne	12f68 <__assert_fail@plt+0x1f90>
   12da4:	str	lr, [sp, #28]
   12da8:	bl	10ed0 <__ctype_b_loc@plt>
   12dac:	ldr	r0, [r0]
   12db0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12db4:	mov	r1, #1
   12db8:	add	r0, r0, r5, lsl #1
   12dbc:	ldrb	r0, [r0, #1]
   12dc0:	ubfx	r4, r0, #6, #1
   12dc4:	ldr	r0, [sp, #52]	; 0x34
   12dc8:	mov	r2, r1
   12dcc:	cmp	r1, #1
   12dd0:	orr	r0, r4, r0
   12dd4:	bhi	131a0 <__assert_fail@plt+0x21c8>
   12dd8:	tst	r0, #1
   12ddc:	beq	131a0 <__assert_fail@plt+0x21c8>
   12de0:	ldr	lr, [sp, #28]
   12de4:	b	12bf8 <__assert_fail@plt+0x1c20>
   12de8:	cmp	r7, #0
   12dec:	ldrbeq	r0, [ip, #1]
   12df0:	cmpeq	r0, #0
   12df4:	beq	12e04 <__assert_fail@plt+0x1e2c>
   12df8:	mvn	lr, #0
   12dfc:	mov	r9, #0
   12e00:	b	12bf8 <__assert_fail@plt+0x1c20>
   12e04:	mov	r1, #1
   12e08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e0c:	cmp	r0, #2
   12e10:	bne	12e20 <__assert_fail@plt+0x1e48>
   12e14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e18:	tst	r0, #1
   12e1c:	bne	13524 <__assert_fail@plt+0x254c>
   12e20:	mov	r4, r1
   12e24:	b	12bf8 <__assert_fail@plt+0x1c20>
   12e28:	ldr	r1, [sp, #48]	; 0x30
   12e2c:	mov	r9, #0
   12e30:	mov	r0, #92	; 0x5c
   12e34:	cmp	r1, #0
   12e38:	beq	12e4c <__assert_fail@plt+0x1e74>
   12e3c:	mov	r4, #0
   12e40:	cmp	r9, #0
   12e44:	beq	133d8 <__assert_fail@plt+0x2400>
   12e48:	b	13414 <__assert_fail@plt+0x243c>
   12e4c:	ldr	r1, [sp, #84]	; 0x54
   12e50:	mov	r4, #0
   12e54:	mov	r9, #0
   12e58:	tst	r1, #1
   12e5c:	bne	12e9c <__assert_fail@plt+0x1ec4>
   12e60:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12e64:	cmp	r0, #0
   12e68:	mov	r0, r5
   12e6c:	beq	12e90 <__assert_fail@plt+0x1eb8>
   12e70:	ldr	r1, [fp, #16]
   12e74:	ubfx	r0, r5, #5, #3
   12e78:	mov	r2, #1
   12e7c:	ldr	r0, [r1, r0, lsl #2]
   12e80:	and	r1, r5, #31
   12e84:	tst	r0, r2, lsl r1
   12e88:	mov	r0, r5
   12e8c:	bne	12e9c <__assert_fail@plt+0x1ec4>
   12e90:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12e94:	cmp	r1, #0
   12e98:	beq	133d0 <__assert_fail@plt+0x23f8>
   12e9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12ea0:	tst	r1, #1
   12ea4:	bne	134fc <__assert_fail@plt+0x2524>
   12ea8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12eac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12eb0:	cmp	r1, #2
   12eb4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12eb8:	movwne	r1, #1
   12ebc:	orr	r1, r1, r2
   12ec0:	tst	r1, #1
   12ec4:	beq	12ed0 <__assert_fail@plt+0x1ef8>
   12ec8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ecc:	b	12f0c <__assert_fail@plt+0x1f34>
   12ed0:	cmp	r8, sl
   12ed4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ed8:	movcc	r1, #39	; 0x27
   12edc:	strbcc	r1, [r6, r8]
   12ee0:	add	r1, r8, #1
   12ee4:	cmp	r1, sl
   12ee8:	movcc	r2, #36	; 0x24
   12eec:	strbcc	r2, [r6, r1]
   12ef0:	add	r1, r8, #2
   12ef4:	add	r8, r8, #3
   12ef8:	cmp	r1, sl
   12efc:	movcc	r2, #39	; 0x27
   12f00:	strbcc	r2, [r6, r1]
   12f04:	mov	r1, #1
   12f08:	str	r1, [fp, #-56]	; 0xffffffc8
   12f0c:	cmp	r8, sl
   12f10:	movcc	r1, #92	; 0x5c
   12f14:	strbcc	r1, [r6, r8]
   12f18:	add	r8, r8, #1
   12f1c:	cmp	r8, sl
   12f20:	and	r5, r5, r4
   12f24:	add	r7, r7, #1
   12f28:	strbcc	r0, [r6, r8]
   12f2c:	add	r8, r8, #1
   12f30:	cmn	lr, #1
   12f34:	bne	12930 <__assert_fail@plt+0x1958>
   12f38:	b	1293c <__assert_fail@plt+0x1964>
   12f3c:	ldr	r0, [sp, #36]	; 0x24
   12f40:	mov	r4, #0
   12f44:	mov	r9, #0
   12f48:	mov	r5, #0
   12f4c:	cmp	r0, #0
   12f50:	beq	12e60 <__assert_fail@plt+0x1e88>
   12f54:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12f58:	add	r7, r7, #1
   12f5c:	cmn	lr, #1
   12f60:	bne	12930 <__assert_fail@plt+0x1958>
   12f64:	b	1293c <__assert_fail@plt+0x1964>
   12f68:	mov	r0, #0
   12f6c:	cmn	lr, #1
   12f70:	str	r0, [fp, #-36]	; 0xffffffdc
   12f74:	str	r0, [fp, #-40]	; 0xffffffd8
   12f78:	bne	12f8c <__assert_fail@plt+0x1fb4>
   12f7c:	mov	r0, ip
   12f80:	bl	10ee8 <strlen@plt>
   12f84:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f88:	mov	lr, r0
   12f8c:	add	r0, ip, r7
   12f90:	mov	r4, #1
   12f94:	mov	r6, #0
   12f98:	str	lr, [sp, #28]
   12f9c:	str	r0, [sp, #24]
   12fa0:	sub	r0, fp, #40	; 0x28
   12fa4:	mov	r3, r0
   12fa8:	str	r6, [sp, #44]	; 0x2c
   12fac:	add	r6, r6, r7
   12fb0:	sub	r0, fp, #44	; 0x2c
   12fb4:	add	r1, ip, r6
   12fb8:	sub	r2, lr, r6
   12fbc:	bl	14f64 <__assert_fail@plt+0x3f8c>
   12fc0:	cmp	r0, #0
   12fc4:	beq	1345c <__assert_fail@plt+0x2484>
   12fc8:	cmn	r0, #1
   12fcc:	beq	1341c <__assert_fail@plt+0x2444>
   12fd0:	ldr	lr, [sp, #28]
   12fd4:	cmn	r0, #2
   12fd8:	beq	13424 <__assert_fail@plt+0x244c>
   12fdc:	ldr	r2, [sp, #64]	; 0x40
   12fe0:	cmp	r0, #2
   12fe4:	mov	r1, #0
   12fe8:	movwcc	r1, #1
   12fec:	eor	r2, r2, #1
   12ff0:	orrs	r1, r2, r1
   12ff4:	bne	130b4 <__assert_fail@plt+0x20dc>
   12ff8:	ldr	r1, [sp, #44]	; 0x2c
   12ffc:	ldr	r2, [sp, #24]
   13000:	add	r1, r2, r1
   13004:	mov	r2, #1
   13008:	ldrb	r3, [r1, r2]
   1300c:	sub	r3, r3, #91	; 0x5b
   13010:	cmp	r3, #33	; 0x21
   13014:	bhi	130a8 <__assert_fail@plt+0x20d0>
   13018:	add	r6, pc, #0
   1301c:	ldr	pc, [r6, r3, lsl #2]
   13020:	andeq	r3, r1, ip, lsl r5
   13024:	andeq	r3, r1, ip, lsl r5
   13028:	andeq	r3, r1, r8, lsr #1
   1302c:	andeq	r3, r1, ip, lsl r5
   13030:	andeq	r3, r1, r8, lsr #1
   13034:	andeq	r3, r1, ip, lsl r5
   13038:	andeq	r3, r1, r8, lsr #1
   1303c:	andeq	r3, r1, r8, lsr #1
   13040:	andeq	r3, r1, r8, lsr #1
   13044:	andeq	r3, r1, r8, lsr #1
   13048:	andeq	r3, r1, r8, lsr #1
   1304c:	andeq	r3, r1, r8, lsr #1
   13050:	andeq	r3, r1, r8, lsr #1
   13054:	andeq	r3, r1, r8, lsr #1
   13058:	andeq	r3, r1, r8, lsr #1
   1305c:	andeq	r3, r1, r8, lsr #1
   13060:	andeq	r3, r1, r8, lsr #1
   13064:	andeq	r3, r1, r8, lsr #1
   13068:	andeq	r3, r1, r8, lsr #1
   1306c:	andeq	r3, r1, r8, lsr #1
   13070:	andeq	r3, r1, r8, lsr #1
   13074:	andeq	r3, r1, r8, lsr #1
   13078:	andeq	r3, r1, r8, lsr #1
   1307c:	andeq	r3, r1, r8, lsr #1
   13080:	andeq	r3, r1, r8, lsr #1
   13084:	andeq	r3, r1, r8, lsr #1
   13088:	andeq	r3, r1, r8, lsr #1
   1308c:	andeq	r3, r1, r8, lsr #1
   13090:	andeq	r3, r1, r8, lsr #1
   13094:	andeq	r3, r1, r8, lsr #1
   13098:	andeq	r3, r1, r8, lsr #1
   1309c:	andeq	r3, r1, r8, lsr #1
   130a0:	andeq	r3, r1, r8, lsr #1
   130a4:	andeq	r3, r1, ip, lsl r5
   130a8:	add	r2, r2, #1
   130ac:	cmp	r2, r0
   130b0:	bcc	13008 <__assert_fail@plt+0x2030>
   130b4:	ldr	r6, [sp, #44]	; 0x2c
   130b8:	add	r6, r0, r6
   130bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   130c0:	bl	10e40 <iswprint@plt>
   130c4:	cmp	r0, #0
   130c8:	movwne	r0, #1
   130cc:	and	r4, r4, r0
   130d0:	sub	r0, fp, #40	; 0x28
   130d4:	bl	10e04 <mbsinit@plt>
   130d8:	ldr	lr, [sp, #28]
   130dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   130e0:	sub	r3, fp, #40	; 0x28
   130e4:	cmp	r0, #0
   130e8:	beq	12fa8 <__assert_fail@plt+0x1fd0>
   130ec:	b	13464 <__assert_fail@plt+0x248c>
   130f0:	ldr	r0, [sp, #32]
   130f4:	cmp	r0, #0
   130f8:	beq	13194 <__assert_fail@plt+0x21bc>
   130fc:	add	r0, r7, #2
   13100:	cmp	r0, lr
   13104:	bcs	13194 <__assert_fail@plt+0x21bc>
   13108:	add	r1, ip, r7
   1310c:	ldrb	r1, [r1, #1]
   13110:	cmp	r1, #63	; 0x3f
   13114:	bne	13194 <__assert_fail@plt+0x21bc>
   13118:	ldrb	r5, [ip, r0]
   1311c:	sub	r1, r5, #33	; 0x21
   13120:	cmp	r1, #29
   13124:	bhi	13194 <__assert_fail@plt+0x21bc>
   13128:	movw	r3, #20929	; 0x51c1
   1312c:	mov	r2, #1
   13130:	movt	r3, #14336	; 0x3800
   13134:	tst	r3, r2, lsl r1
   13138:	beq	13194 <__assert_fail@plt+0x21bc>
   1313c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13140:	tst	r1, #1
   13144:	bne	1363c <__assert_fail@plt+0x2664>
   13148:	cmp	r8, sl
   1314c:	mov	r7, r0
   13150:	mov	r4, #0
   13154:	movcc	r1, #63	; 0x3f
   13158:	strbcc	r1, [r6, r8]
   1315c:	add	r1, r8, #1
   13160:	cmp	r1, sl
   13164:	movcc	r2, #34	; 0x22
   13168:	strbcc	r2, [r6, r1]
   1316c:	add	r1, r8, #2
   13170:	cmp	r1, sl
   13174:	movcc	r2, #34	; 0x22
   13178:	strbcc	r2, [r6, r1]
   1317c:	add	r1, r8, #3
   13180:	add	r8, r8, #4
   13184:	cmp	r1, sl
   13188:	movcc	r2, #63	; 0x3f
   1318c:	strbcc	r2, [r6, r1]
   13190:	b	12bf8 <__assert_fail@plt+0x1c20>
   13194:	mov	r5, #63	; 0x3f
   13198:	mov	r4, #0
   1319c:	b	12bf8 <__assert_fail@plt+0x1c20>
   131a0:	add	r1, r2, r7
   131a4:	ldr	lr, [sp, #28]
   131a8:	mov	r3, #0
   131ac:	str	r1, [sp, #44]	; 0x2c
   131b0:	add	r1, r7, #1
   131b4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   131b8:	tst	r0, #1
   131bc:	bne	13290 <__assert_fail@plt+0x22b8>
   131c0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   131c4:	tst	r2, #1
   131c8:	bne	13584 <__assert_fail@plt+0x25ac>
   131cc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   131d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   131d4:	cmp	r7, #2
   131d8:	movwne	r3, #1
   131dc:	orr	r3, r3, r2
   131e0:	tst	r3, #1
   131e4:	bne	13220 <__assert_fail@plt+0x2248>
   131e8:	cmp	r8, sl
   131ec:	add	r3, r8, #1
   131f0:	movcc	r2, #39	; 0x27
   131f4:	strbcc	r2, [r6, r8]
   131f8:	cmp	r3, sl
   131fc:	movcc	r2, #36	; 0x24
   13200:	strbcc	r2, [r6, r3]
   13204:	add	r3, r8, #2
   13208:	add	r8, r8, #3
   1320c:	cmp	r3, sl
   13210:	movcc	r2, #39	; 0x27
   13214:	strbcc	r2, [r6, r3]
   13218:	mov	r2, #1
   1321c:	str	r2, [fp, #-56]	; 0xffffffc8
   13220:	cmp	r8, sl
   13224:	movcc	r3, #92	; 0x5c
   13228:	strbcc	r3, [r6, r8]
   1322c:	add	r3, r8, #1
   13230:	cmp	r3, sl
   13234:	andcc	r7, r5, #192	; 0xc0
   13238:	movcc	r2, #48	; 0x30
   1323c:	orrcc	r7, r2, r7, lsr #6
   13240:	strbcc	r7, [r6, r3]
   13244:	add	r3, r8, #2
   13248:	add	r8, r8, #3
   1324c:	cmp	r3, sl
   13250:	lsrcc	r7, r5, #3
   13254:	movcc	r2, #6
   13258:	bficc	r7, r2, #3, #29
   1325c:	mov	r2, #6
   13260:	strbcc	r7, [r6, r3]
   13264:	bfi	r5, r2, #3, #29
   13268:	mov	r3, #1
   1326c:	b	132b4 <__assert_fail@plt+0x22dc>
   13270:	cmp	r8, sl
   13274:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13278:	strbcc	r5, [r6, r8]
   1327c:	add	r8, r8, #1
   13280:	ldrb	r5, [ip, r1]
   13284:	add	r1, r1, #1
   13288:	tst	r0, #1
   1328c:	beq	131c0 <__assert_fail@plt+0x21e8>
   13290:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13294:	tst	r2, #1
   13298:	beq	132ac <__assert_fail@plt+0x22d4>
   1329c:	cmp	r8, sl
   132a0:	movcc	r7, #92	; 0x5c
   132a4:	strbcc	r7, [r6, r8]
   132a8:	add	r8, r8, #1
   132ac:	mov	r2, #0
   132b0:	str	r2, [fp, #-52]	; 0xffffffcc
   132b4:	ldr	r2, [sp, #44]	; 0x2c
   132b8:	and	r9, r3, #1
   132bc:	cmp	r2, r1
   132c0:	bls	133c0 <__assert_fail@plt+0x23e8>
   132c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   132c8:	cmp	r9, #0
   132cc:	movwne	r9, #1
   132d0:	mvn	r7, r2
   132d4:	orr	r7, r7, r9
   132d8:	tst	r7, #1
   132dc:	bne	13270 <__assert_fail@plt+0x2298>
   132e0:	cmp	r8, sl
   132e4:	movcc	r7, #39	; 0x27
   132e8:	strbcc	r7, [r6, r8]
   132ec:	add	r7, r8, #1
   132f0:	add	r8, r8, #2
   132f4:	cmp	r7, sl
   132f8:	movcc	r2, #39	; 0x27
   132fc:	strbcc	r2, [r6, r7]
   13300:	mov	r2, #0
   13304:	str	r2, [fp, #-56]	; 0xffffffc8
   13308:	b	13270 <__assert_fail@plt+0x2298>
   1330c:	cmp	r8, sl
   13310:	mov	r2, #1
   13314:	movcc	r0, #39	; 0x27
   13318:	strbcc	r0, [r6, r8]
   1331c:	add	r0, r8, #1
   13320:	cmp	r0, sl
   13324:	movcc	r1, #36	; 0x24
   13328:	strbcc	r1, [r6, r0]
   1332c:	add	r0, r8, #2
   13330:	cmp	r0, sl
   13334:	movcc	r1, #39	; 0x27
   13338:	strbcc	r1, [r6, r0]
   1333c:	add	r0, r8, #3
   13340:	cmp	r0, sl
   13344:	add	r8, r0, #1
   13348:	str	r2, [fp, #-56]	; 0xffffffc8
   1334c:	movcc	r1, #92	; 0x5c
   13350:	strbcc	r1, [r6, r0]
   13354:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13358:	cmp	r1, #2
   1335c:	beq	133b0 <__assert_fail@plt+0x23d8>
   13360:	add	r1, r7, #1
   13364:	mov	r4, #0
   13368:	mov	r9, #1
   1336c:	mov	r5, #48	; 0x30
   13370:	cmp	r1, lr
   13374:	bcs	12bf8 <__assert_fail@plt+0x1c20>
   13378:	ldrb	r1, [ip, r1]
   1337c:	sub	r1, r1, #48	; 0x30
   13380:	uxtb	r1, r1
   13384:	cmp	r1, #9
   13388:	bhi	12bf8 <__assert_fail@plt+0x1c20>
   1338c:	cmp	r8, sl
   13390:	movcc	r1, #48	; 0x30
   13394:	strbcc	r1, [r6, r8]
   13398:	add	r1, r0, #2
   1339c:	add	r8, r0, #3
   133a0:	cmp	r1, sl
   133a4:	movcc	r2, #48	; 0x30
   133a8:	strbcc	r2, [r6, r1]
   133ac:	b	12bf8 <__assert_fail@plt+0x1c20>
   133b0:	mov	r0, #48	; 0x30
   133b4:	mov	r9, #1
   133b8:	mov	r4, #0
   133bc:	b	12e90 <__assert_fail@plt+0x1eb8>
   133c0:	cmp	r9, #0
   133c4:	sub	r7, r1, #1
   133c8:	mov	r0, r5
   133cc:	movwne	r9, #1
   133d0:	cmp	r9, #0
   133d4:	bne	13414 <__assert_fail@plt+0x243c>
   133d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   133dc:	tst	r1, #1
   133e0:	beq	13414 <__assert_fail@plt+0x243c>
   133e4:	cmp	r8, sl
   133e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   133ec:	movcc	r1, #39	; 0x27
   133f0:	strbcc	r1, [r6, r8]
   133f4:	add	r1, r8, #1
   133f8:	add	r8, r8, #2
   133fc:	cmp	r1, sl
   13400:	movcc	r2, #39	; 0x27
   13404:	strbcc	r2, [r6, r1]
   13408:	mov	r1, #0
   1340c:	str	r1, [fp, #-56]	; 0xffffffc8
   13410:	b	12f1c <__assert_fail@plt+0x1f44>
   13414:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13418:	b	12f1c <__assert_fail@plt+0x1f44>
   1341c:	mov	r4, #0
   13420:	b	1345c <__assert_fail@plt+0x2484>
   13424:	mov	r4, #0
   13428:	cmp	lr, r6
   1342c:	bls	1345c <__assert_fail@plt+0x2484>
   13430:	ldr	ip, [fp, #-84]	; 0xffffffac
   13434:	ldr	r6, [sp, #44]	; 0x2c
   13438:	ldr	r0, [sp, #24]
   1343c:	ldrb	r0, [r0, r6]
   13440:	cmp	r0, #0
   13444:	beq	13464 <__assert_fail@plt+0x248c>
   13448:	add	r6, r6, #1
   1344c:	add	r0, r7, r6
   13450:	cmp	r0, lr
   13454:	bcc	13438 <__assert_fail@plt+0x2460>
   13458:	b	13464 <__assert_fail@plt+0x248c>
   1345c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13460:	ldr	r6, [sp, #44]	; 0x2c
   13464:	mov	r1, r6
   13468:	ldr	r6, [sp, #80]	; 0x50
   1346c:	b	12dc4 <__assert_fail@plt+0x1dec>
   13470:	mov	lr, r7
   13474:	b	1347c <__assert_fail@plt+0x24a4>
   13478:	mvn	lr, #0
   1347c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13480:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13484:	eor	r0, r7, #2
   13488:	orr	r0, r0, r8
   1348c:	clz	r0, r0
   13490:	lsr	r0, r0, #5
   13494:	tst	r1, r0
   13498:	bne	13524 <__assert_fail@plt+0x254c>
   1349c:	mov	r0, r1
   134a0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   134a4:	cmp	r7, #2
   134a8:	movwne	r1, #1
   134ac:	orr	r0, r0, r1
   134b0:	tst	r0, #1
   134b4:	ldreq	r0, [sp, #60]	; 0x3c
   134b8:	eoreq	r0, r0, #1
   134bc:	tsteq	r0, #1
   134c0:	bne	135d0 <__assert_fail@plt+0x25f8>
   134c4:	mov	r9, lr
   134c8:	tst	r5, #1
   134cc:	bne	1358c <__assert_fail@plt+0x25b4>
   134d0:	ldr	r6, [sp, #56]	; 0x38
   134d4:	mov	r4, #0
   134d8:	cmp	r6, #0
   134dc:	beq	135c8 <__assert_fail@plt+0x25f0>
   134e0:	ldr	r0, [sp, #84]	; 0x54
   134e4:	mov	r1, #0
   134e8:	cmp	sl, #0
   134ec:	mov	r5, #0
   134f0:	str	r1, [fp, #-72]	; 0xffffffb8
   134f4:	beq	126c4 <__assert_fail@plt+0x16ec>
   134f8:	b	135d0 <__assert_fail@plt+0x25f8>
   134fc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13500:	ldr	r2, [sp, #84]	; 0x54
   13504:	b	1352c <__assert_fail@plt+0x2554>
   13508:	ldr	ip, [fp, #-84]	; 0xffffffac
   1350c:	mov	r2, #1
   13510:	mov	lr, r4
   13514:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13518:	b	1352c <__assert_fail@plt+0x2554>
   1351c:	ldr	r6, [sp, #80]	; 0x50
   13520:	ldr	ip, [fp, #-84]	; 0xffffffac
   13524:	ldr	r2, [sp, #84]	; 0x54
   13528:	mov	r7, #2
   1352c:	mov	r0, #0
   13530:	ldr	r1, [fp, #12]
   13534:	tst	r2, #1
   13538:	mov	r2, r7
   1353c:	mov	r3, lr
   13540:	str	r0, [sp, #8]
   13544:	ldr	r0, [sp, #72]	; 0x48
   13548:	movwne	r2, #4
   1354c:	cmp	r7, #2
   13550:	movne	r2, r7
   13554:	str	r2, [sp]
   13558:	mov	r2, ip
   1355c:	bic	r1, r1, #2
   13560:	str	r0, [sp, #12]
   13564:	ldr	r0, [sp, #76]	; 0x4c
   13568:	str	r1, [sp, #4]
   1356c:	mov	r1, sl
   13570:	str	r0, [sp, #16]
   13574:	mov	r0, r6
   13578:	bl	12644 <__assert_fail@plt+0x166c>
   1357c:	mov	r8, r0
   13580:	b	13628 <__assert_fail@plt+0x2650>
   13584:	ldr	r2, [sp, #84]	; 0x54
   13588:	b	1352c <__assert_fail@plt+0x2554>
   1358c:	mov	r0, #5
   13590:	ldr	r1, [sp, #56]	; 0x38
   13594:	ldr	r2, [fp, #-84]	; 0xffffffac
   13598:	mov	r3, r9
   1359c:	str	r0, [sp]
   135a0:	ldr	r0, [fp, #12]
   135a4:	str	r0, [sp, #4]
   135a8:	ldr	r0, [fp, #16]
   135ac:	str	r0, [sp, #8]
   135b0:	ldr	r0, [sp, #72]	; 0x48
   135b4:	str	r0, [sp, #12]
   135b8:	ldr	r0, [sp, #76]	; 0x4c
   135bc:	str	r0, [sp, #16]
   135c0:	ldr	r0, [sp, #80]	; 0x50
   135c4:	b	13578 <__assert_fail@plt+0x25a0>
   135c8:	mov	r0, #0
   135cc:	str	r0, [fp, #-72]	; 0xffffffb8
   135d0:	ldr	r1, [sp, #92]	; 0x5c
   135d4:	cmp	r1, #0
   135d8:	beq	13618 <__assert_fail@plt+0x2640>
   135dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   135e0:	ldr	r2, [sp, #80]	; 0x50
   135e4:	tst	r0, #1
   135e8:	bne	1361c <__assert_fail@plt+0x2644>
   135ec:	ldrb	r0, [r1]
   135f0:	cmp	r0, #0
   135f4:	beq	1361c <__assert_fail@plt+0x2644>
   135f8:	add	r1, r1, #1
   135fc:	cmp	r8, sl
   13600:	strbcc	r0, [r2, r8]
   13604:	add	r8, r8, #1
   13608:	ldrb	r0, [r1], #1
   1360c:	cmp	r0, #0
   13610:	bne	135fc <__assert_fail@plt+0x2624>
   13614:	b	1361c <__assert_fail@plt+0x2644>
   13618:	ldr	r2, [sp, #80]	; 0x50
   1361c:	cmp	r8, sl
   13620:	movcc	r0, #0
   13624:	strbcc	r0, [r2, r8]
   13628:	mov	r0, r8
   1362c:	sub	sp, fp, #28
   13630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13634:	mov	r2, #1
   13638:	b	13514 <__assert_fail@plt+0x253c>
   1363c:	ldr	r2, [sp, #84]	; 0x54
   13640:	mov	r7, #5
   13644:	b	1352c <__assert_fail@plt+0x2554>
   13648:	bl	10fc0 <abort@plt>
   1364c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13650:	add	fp, sp, #28
   13654:	sub	sp, sp, #28
   13658:	movw	r5, #24992	; 0x61a0
   1365c:	cmp	r2, #0
   13660:	mov	r4, r1
   13664:	mov	r7, r0
   13668:	str	r0, [sp, #20]
   1366c:	movt	r5, #2
   13670:	movne	r5, r2
   13674:	bl	10ef4 <__errno_location@plt>
   13678:	mov	sl, r0
   1367c:	ldm	r5, {r0, r1}
   13680:	ldr	r2, [r5, #40]	; 0x28
   13684:	ldr	r3, [r5, #44]	; 0x2c
   13688:	add	r9, r5, #8
   1368c:	ldr	r6, [sl]
   13690:	orr	r8, r1, #1
   13694:	mov	r1, #0
   13698:	str	r6, [sp, #24]
   1369c:	stm	sp, {r0, r8, r9}
   136a0:	str	r2, [sp, #12]
   136a4:	str	r3, [sp, #16]
   136a8:	mov	r0, #0
   136ac:	mov	r2, r7
   136b0:	mov	r3, r4
   136b4:	mov	r6, r4
   136b8:	bl	12644 <__assert_fail@plt+0x166c>
   136bc:	add	r7, r0, #1
   136c0:	mov	r0, r7
   136c4:	bl	1485c <__assert_fail@plt+0x3884>
   136c8:	mov	r4, r0
   136cc:	ldr	r0, [r5]
   136d0:	ldr	r2, [r5, #44]	; 0x2c
   136d4:	ldr	r1, [r5, #40]	; 0x28
   136d8:	mov	r3, r6
   136dc:	stm	sp, {r0, r8, r9}
   136e0:	str	r2, [sp, #16]
   136e4:	str	r1, [sp, #12]
   136e8:	mov	r0, r4
   136ec:	mov	r1, r7
   136f0:	ldr	r2, [sp, #20]
   136f4:	bl	12644 <__assert_fail@plt+0x166c>
   136f8:	ldr	r0, [sp, #24]
   136fc:	str	r0, [sl]
   13700:	mov	r0, r4
   13704:	sub	sp, fp, #28
   13708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1370c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13710:	add	fp, sp, #28
   13714:	sub	sp, sp, #36	; 0x24
   13718:	movw	r8, #24992	; 0x61a0
   1371c:	cmp	r3, #0
   13720:	mov	r4, r2
   13724:	str	r2, [sp, #24]
   13728:	mov	r5, r1
   1372c:	mov	r6, r0
   13730:	str	r0, [sp, #20]
   13734:	movt	r8, #2
   13738:	movne	r8, r3
   1373c:	bl	10ef4 <__errno_location@plt>
   13740:	str	r0, [sp, #28]
   13744:	cmp	r4, #0
   13748:	add	sl, r8, #8
   1374c:	ldm	r8, {r3, r9}
   13750:	ldr	r7, [r0]
   13754:	ldr	r1, [r8, #40]	; 0x28
   13758:	ldr	r2, [r8, #44]	; 0x2c
   1375c:	mov	r0, #0
   13760:	orreq	r9, r9, #1
   13764:	str	r7, [sp, #32]
   13768:	mov	r7, r5
   1376c:	stm	sp, {r3, r9, sl}
   13770:	str	r1, [sp, #12]
   13774:	str	r2, [sp, #16]
   13778:	mov	r1, #0
   1377c:	mov	r2, r6
   13780:	mov	r3, r5
   13784:	bl	12644 <__assert_fail@plt+0x166c>
   13788:	add	r4, r0, #1
   1378c:	mov	r5, r0
   13790:	mov	r0, r4
   13794:	bl	1485c <__assert_fail@plt+0x3884>
   13798:	mov	r6, r0
   1379c:	ldr	r0, [r8]
   137a0:	ldr	r2, [r8, #44]	; 0x2c
   137a4:	ldr	r1, [r8, #40]	; 0x28
   137a8:	mov	r3, r7
   137ac:	stm	sp, {r0, r9, sl}
   137b0:	str	r2, [sp, #16]
   137b4:	str	r1, [sp, #12]
   137b8:	mov	r0, r6
   137bc:	mov	r1, r4
   137c0:	ldr	r2, [sp, #20]
   137c4:	bl	12644 <__assert_fail@plt+0x166c>
   137c8:	ldr	r0, [sp, #24]
   137cc:	ldr	r1, [sp, #32]
   137d0:	ldr	r2, [sp, #28]
   137d4:	cmp	r0, #0
   137d8:	str	r1, [r2]
   137dc:	strne	r5, [r0]
   137e0:	mov	r0, r6
   137e4:	sub	sp, fp, #28
   137e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137f0:	add	fp, sp, #24
   137f4:	movw	r5, #24820	; 0x60f4
   137f8:	movw	r8, #24816	; 0x60f0
   137fc:	movt	r5, #2
   13800:	movt	r8, #2
   13804:	ldr	r0, [r5]
   13808:	ldr	r4, [r8]
   1380c:	cmp	r0, #2
   13810:	blt	1383c <__assert_fail@plt+0x2864>
   13814:	add	r7, r4, #12
   13818:	mov	r6, #0
   1381c:	ldr	r0, [r7, r6, lsl #3]
   13820:	bl	1233c <__assert_fail@plt+0x1364>
   13824:	ldr	r1, [r5]
   13828:	add	r2, r6, #2
   1382c:	add	r0, r6, #1
   13830:	mov	r6, r0
   13834:	cmp	r2, r1
   13838:	blt	1381c <__assert_fail@plt+0x2844>
   1383c:	ldr	r0, [r4, #4]
   13840:	movw	r7, #25040	; 0x61d0
   13844:	movt	r7, #2
   13848:	cmp	r0, r7
   1384c:	beq	13864 <__assert_fail@plt+0x288c>
   13850:	bl	1233c <__assert_fail@plt+0x1364>
   13854:	movw	r0, #24824	; 0x60f8
   13858:	mov	r6, #256	; 0x100
   1385c:	movt	r0, #2
   13860:	strd	r6, [r0]
   13864:	movw	r6, #24824	; 0x60f8
   13868:	movt	r6, #2
   1386c:	cmp	r4, r6
   13870:	beq	13880 <__assert_fail@plt+0x28a8>
   13874:	mov	r0, r4
   13878:	bl	1233c <__assert_fail@plt+0x1364>
   1387c:	str	r6, [r8]
   13880:	mov	r0, #1
   13884:	str	r0, [r5]
   13888:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1388c:	movw	r3, #24992	; 0x61a0
   13890:	mvn	r2, #0
   13894:	movt	r3, #2
   13898:	b	1389c <__assert_fail@plt+0x28c4>
   1389c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a0:	add	fp, sp, #28
   138a4:	sub	sp, sp, #44	; 0x2c
   138a8:	mov	r7, r3
   138ac:	str	r2, [sp, #36]	; 0x24
   138b0:	str	r1, [sp, #32]
   138b4:	mov	r5, r0
   138b8:	bl	10ef4 <__errno_location@plt>
   138bc:	cmp	r5, #0
   138c0:	blt	13a2c <__assert_fail@plt+0x2a54>
   138c4:	cmn	r5, #-2147483647	; 0x80000001
   138c8:	beq	13a2c <__assert_fail@plt+0x2a54>
   138cc:	movw	r8, #24820	; 0x60f4
   138d0:	movw	r4, #24816	; 0x60f0
   138d4:	str	r0, [sp, #28]
   138d8:	ldr	r0, [r0]
   138dc:	movt	r8, #2
   138e0:	movt	r4, #2
   138e4:	ldr	r1, [r8]
   138e8:	ldr	r6, [r4]
   138ec:	str	r0, [sp, #24]
   138f0:	cmp	r1, r5
   138f4:	ble	13900 <__assert_fail@plt+0x2928>
   138f8:	mov	sl, r6
   138fc:	b	13968 <__assert_fail@plt+0x2990>
   13900:	movw	r9, #24824	; 0x60f8
   13904:	mov	r0, #8
   13908:	add	r2, r5, #1
   1390c:	str	r1, [fp, #-32]	; 0xffffffe0
   13910:	mvn	r3, #-2147483648	; 0x80000000
   13914:	movt	r9, #2
   13918:	str	r0, [sp]
   1391c:	sub	r2, r2, r1
   13920:	sub	r1, fp, #32
   13924:	subs	r0, r6, r9
   13928:	movne	r0, r6
   1392c:	bl	14a5c <__assert_fail@plt+0x3a84>
   13930:	cmp	r6, r9
   13934:	mov	sl, r0
   13938:	str	r0, [r4]
   1393c:	ldrdeq	r0, [r9]
   13940:	stmeq	sl, {r0, r1}
   13944:	ldr	r1, [r8]
   13948:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1394c:	add	r0, sl, r1, lsl #3
   13950:	sub	r1, r2, r1
   13954:	lsl	r2, r1, #3
   13958:	mov	r1, #0
   1395c:	bl	10f0c <memset@plt>
   13960:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13964:	str	r0, [r8]
   13968:	mov	r9, sl
   1396c:	ldr	r6, [r9, r5, lsl #3]!
   13970:	ldr	r4, [r9, #4]!
   13974:	ldm	r7, {r0, r1}
   13978:	ldr	r2, [r7, #40]	; 0x28
   1397c:	ldr	r3, [r7, #44]	; 0x2c
   13980:	orr	r8, r1, #1
   13984:	add	r1, r7, #8
   13988:	stm	sp, {r0, r8}
   1398c:	add	r0, sp, #8
   13990:	str	r1, [sp, #20]
   13994:	stm	r0, {r1, r2, r3}
   13998:	mov	r0, r4
   1399c:	mov	r1, r6
   139a0:	ldr	r2, [sp, #32]
   139a4:	ldr	r3, [sp, #36]	; 0x24
   139a8:	bl	12644 <__assert_fail@plt+0x166c>
   139ac:	cmp	r6, r0
   139b0:	bhi	13a14 <__assert_fail@plt+0x2a3c>
   139b4:	add	r6, r0, #1
   139b8:	movw	r0, #25040	; 0x61d0
   139bc:	movt	r0, #2
   139c0:	str	r6, [sl, r5, lsl #3]
   139c4:	cmp	r4, r0
   139c8:	beq	139d4 <__assert_fail@plt+0x29fc>
   139cc:	mov	r0, r4
   139d0:	bl	1233c <__assert_fail@plt+0x1364>
   139d4:	mov	r0, r6
   139d8:	bl	1485c <__assert_fail@plt+0x3884>
   139dc:	str	r0, [r9]
   139e0:	mov	r4, r0
   139e4:	add	r3, sp, #8
   139e8:	ldr	r0, [r7]
   139ec:	ldr	r1, [r7, #40]	; 0x28
   139f0:	ldr	r2, [r7, #44]	; 0x2c
   139f4:	stm	sp, {r0, r8}
   139f8:	ldr	r0, [sp, #20]
   139fc:	stm	r3, {r0, r1, r2}
   13a00:	mov	r0, r4
   13a04:	mov	r1, r6
   13a08:	ldr	r2, [sp, #32]
   13a0c:	ldr	r3, [sp, #36]	; 0x24
   13a10:	bl	12644 <__assert_fail@plt+0x166c>
   13a14:	ldr	r0, [sp, #28]
   13a18:	ldr	r1, [sp, #24]
   13a1c:	str	r1, [r0]
   13a20:	mov	r0, r4
   13a24:	sub	sp, fp, #28
   13a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a2c:	bl	10fc0 <abort@plt>
   13a30:	movw	r3, #24992	; 0x61a0
   13a34:	movt	r3, #2
   13a38:	b	1389c <__assert_fail@plt+0x28c4>
   13a3c:	movw	r3, #24992	; 0x61a0
   13a40:	mov	r1, r0
   13a44:	mov	r0, #0
   13a48:	mvn	r2, #0
   13a4c:	movt	r3, #2
   13a50:	b	1389c <__assert_fail@plt+0x28c4>
   13a54:	movw	r3, #24992	; 0x61a0
   13a58:	mov	r2, r1
   13a5c:	mov	r1, r0
   13a60:	mov	r0, #0
   13a64:	movt	r3, #2
   13a68:	b	1389c <__assert_fail@plt+0x28c4>
   13a6c:	push	{fp, lr}
   13a70:	mov	fp, sp
   13a74:	sub	sp, sp, #48	; 0x30
   13a78:	vmov.i32	q8, #0	; 0x00000000
   13a7c:	mov	ip, #32
   13a80:	mov	r3, sp
   13a84:	mov	lr, r2
   13a88:	cmp	r1, #10
   13a8c:	add	r2, r3, #16
   13a90:	vst1.64	{d16-d17}, [r3], ip
   13a94:	vst1.64	{d16-d17}, [r3]
   13a98:	vst1.64	{d16-d17}, [r2]
   13a9c:	beq	13abc <__assert_fail@plt+0x2ae4>
   13aa0:	str	r1, [sp]
   13aa4:	mov	r3, sp
   13aa8:	mov	r1, lr
   13aac:	mvn	r2, #0
   13ab0:	bl	1389c <__assert_fail@plt+0x28c4>
   13ab4:	mov	sp, fp
   13ab8:	pop	{fp, pc}
   13abc:	bl	10fc0 <abort@plt>
   13ac0:	push	{r4, sl, fp, lr}
   13ac4:	add	fp, sp, #8
   13ac8:	sub	sp, sp, #48	; 0x30
   13acc:	mov	ip, r3
   13ad0:	mov	r3, sp
   13ad4:	vmov.i32	q8, #0	; 0x00000000
   13ad8:	mov	lr, #32
   13adc:	cmp	r1, #10
   13ae0:	add	r4, r3, #16
   13ae4:	vst1.64	{d16-d17}, [r3], lr
   13ae8:	vst1.64	{d16-d17}, [r3]
   13aec:	vst1.64	{d16-d17}, [r4]
   13af0:	beq	13b10 <__assert_fail@plt+0x2b38>
   13af4:	str	r1, [sp]
   13af8:	mov	r1, r2
   13afc:	mov	r3, sp
   13b00:	mov	r2, ip
   13b04:	bl	1389c <__assert_fail@plt+0x28c4>
   13b08:	sub	sp, fp, #8
   13b0c:	pop	{r4, sl, fp, pc}
   13b10:	bl	10fc0 <abort@plt>
   13b14:	push	{fp, lr}
   13b18:	mov	fp, sp
   13b1c:	sub	sp, sp, #48	; 0x30
   13b20:	mov	r3, sp
   13b24:	vmov.i32	q8, #0	; 0x00000000
   13b28:	mov	ip, #32
   13b2c:	cmp	r0, #10
   13b30:	add	r2, r3, #16
   13b34:	vst1.64	{d16-d17}, [r3], ip
   13b38:	vst1.64	{d16-d17}, [r3]
   13b3c:	vst1.64	{d16-d17}, [r2]
   13b40:	beq	13b60 <__assert_fail@plt+0x2b88>
   13b44:	str	r0, [sp]
   13b48:	mov	r3, sp
   13b4c:	mov	r0, #0
   13b50:	mvn	r2, #0
   13b54:	bl	1389c <__assert_fail@plt+0x28c4>
   13b58:	mov	sp, fp
   13b5c:	pop	{fp, pc}
   13b60:	bl	10fc0 <abort@plt>
   13b64:	push	{fp, lr}
   13b68:	mov	fp, sp
   13b6c:	sub	sp, sp, #48	; 0x30
   13b70:	mov	r3, sp
   13b74:	vmov.i32	q8, #0	; 0x00000000
   13b78:	mov	ip, #32
   13b7c:	cmp	r0, #10
   13b80:	add	lr, r3, #16
   13b84:	vst1.64	{d16-d17}, [r3], ip
   13b88:	vst1.64	{d16-d17}, [r3]
   13b8c:	vst1.64	{d16-d17}, [lr]
   13b90:	beq	13bac <__assert_fail@plt+0x2bd4>
   13b94:	str	r0, [sp]
   13b98:	mov	r3, sp
   13b9c:	mov	r0, #0
   13ba0:	bl	1389c <__assert_fail@plt+0x28c4>
   13ba4:	mov	sp, fp
   13ba8:	pop	{fp, pc}
   13bac:	bl	10fc0 <abort@plt>
   13bb0:	push	{r4, sl, fp, lr}
   13bb4:	add	fp, sp, #8
   13bb8:	sub	sp, sp, #48	; 0x30
   13bbc:	mov	lr, r0
   13bc0:	movw	r0, #24992	; 0x61a0
   13bc4:	mov	r3, #32
   13bc8:	mov	ip, r1
   13bcc:	mov	r4, #1
   13bd0:	movt	r0, #2
   13bd4:	add	r1, r0, #16
   13bd8:	vld1.64	{d16-d17}, [r0], r3
   13bdc:	mov	r3, sp
   13be0:	vld1.64	{d18-d19}, [r1]
   13be4:	add	r1, r3, #16
   13be8:	vld1.64	{d20-d21}, [r0]
   13bec:	add	r0, r3, #32
   13bf0:	vst1.64	{d18-d19}, [r1]
   13bf4:	mov	r1, r3
   13bf8:	vst1.64	{d20-d21}, [r0]
   13bfc:	mov	r0, #28
   13c00:	and	r0, r0, r2, lsr #3
   13c04:	and	r2, r2, #31
   13c08:	vst1.64	{d16-d17}, [r1], r0
   13c0c:	ldr	r0, [r1, #8]
   13c10:	bic	r4, r4, r0, lsr r2
   13c14:	eor	r0, r0, r4, lsl r2
   13c18:	mov	r2, ip
   13c1c:	str	r0, [r1, #8]
   13c20:	mov	r0, #0
   13c24:	mov	r1, lr
   13c28:	bl	1389c <__assert_fail@plt+0x28c4>
   13c2c:	sub	sp, fp, #8
   13c30:	pop	{r4, sl, fp, pc}
   13c34:	push	{fp, lr}
   13c38:	mov	fp, sp
   13c3c:	sub	sp, sp, #48	; 0x30
   13c40:	mov	ip, r0
   13c44:	movw	r0, #24992	; 0x61a0
   13c48:	mov	r3, #32
   13c4c:	movt	r0, #2
   13c50:	add	r2, r0, #16
   13c54:	vld1.64	{d16-d17}, [r0], r3
   13c58:	mov	r3, sp
   13c5c:	vld1.64	{d18-d19}, [r2]
   13c60:	add	r2, r3, #16
   13c64:	vld1.64	{d20-d21}, [r0]
   13c68:	add	r0, r3, #32
   13c6c:	vst1.64	{d18-d19}, [r2]
   13c70:	mov	r2, r3
   13c74:	vst1.64	{d20-d21}, [r0]
   13c78:	mov	r0, #28
   13c7c:	and	r0, r0, r1, lsr #3
   13c80:	and	r1, r1, #31
   13c84:	vst1.64	{d16-d17}, [r2], r0
   13c88:	mov	r0, #1
   13c8c:	ldr	lr, [r2, #8]
   13c90:	bic	r0, r0, lr, lsr r1
   13c94:	eor	r0, lr, r0, lsl r1
   13c98:	mov	r1, ip
   13c9c:	str	r0, [r2, #8]
   13ca0:	mov	r0, #0
   13ca4:	mvn	r2, #0
   13ca8:	bl	1389c <__assert_fail@plt+0x28c4>
   13cac:	mov	sp, fp
   13cb0:	pop	{fp, pc}
   13cb4:	push	{fp, lr}
   13cb8:	mov	fp, sp
   13cbc:	sub	sp, sp, #48	; 0x30
   13cc0:	movw	r2, #24992	; 0x61a0
   13cc4:	mov	r3, #32
   13cc8:	mov	r1, r0
   13ccc:	movt	r2, #2
   13cd0:	add	r0, r2, #16
   13cd4:	vld1.64	{d16-d17}, [r2], r3
   13cd8:	mov	r3, sp
   13cdc:	vld1.64	{d18-d19}, [r0]
   13ce0:	add	r0, r3, #16
   13ce4:	vld1.64	{d20-d21}, [r2]
   13ce8:	mov	r2, r3
   13cec:	vst1.64	{d18-d19}, [r0]
   13cf0:	add	r0, r3, #32
   13cf4:	vst1.64	{d20-d21}, [r0]
   13cf8:	mov	r0, #12
   13cfc:	vst1.64	{d16-d17}, [r2], r0
   13d00:	ldr	r0, [r2]
   13d04:	orr	r0, r0, #67108864	; 0x4000000
   13d08:	str	r0, [r2]
   13d0c:	mov	r0, #0
   13d10:	mvn	r2, #0
   13d14:	bl	1389c <__assert_fail@plt+0x28c4>
   13d18:	mov	sp, fp
   13d1c:	pop	{fp, pc}
   13d20:	push	{fp, lr}
   13d24:	mov	fp, sp
   13d28:	sub	sp, sp, #48	; 0x30
   13d2c:	mov	ip, r1
   13d30:	mov	r1, r0
   13d34:	movw	r0, #24992	; 0x61a0
   13d38:	mov	r3, #32
   13d3c:	movt	r0, #2
   13d40:	add	r2, r0, #16
   13d44:	vld1.64	{d16-d17}, [r0], r3
   13d48:	mov	r3, sp
   13d4c:	vld1.64	{d18-d19}, [r2]
   13d50:	add	r2, r3, #16
   13d54:	vld1.64	{d20-d21}, [r0]
   13d58:	add	r0, r3, #32
   13d5c:	vst1.64	{d18-d19}, [r2]
   13d60:	mov	r2, r3
   13d64:	vst1.64	{d20-d21}, [r0]
   13d68:	mov	r0, #12
   13d6c:	vst1.64	{d16-d17}, [r2], r0
   13d70:	ldr	r0, [r2]
   13d74:	orr	r0, r0, #67108864	; 0x4000000
   13d78:	str	r0, [r2]
   13d7c:	mov	r0, #0
   13d80:	mov	r2, ip
   13d84:	bl	1389c <__assert_fail@plt+0x28c4>
   13d88:	mov	sp, fp
   13d8c:	pop	{fp, pc}
   13d90:	push	{r4, sl, fp, lr}
   13d94:	add	fp, sp, #8
   13d98:	sub	sp, sp, #96	; 0x60
   13d9c:	mov	ip, r2
   13da0:	mov	r2, sp
   13da4:	vmov.i32	q8, #0	; 0x00000000
   13da8:	mov	r4, #28
   13dac:	cmp	r1, #10
   13db0:	mov	r3, r2
   13db4:	add	lr, r2, #16
   13db8:	vst1.64	{d16-d17}, [r3], r4
   13dbc:	vst1.64	{d16-d17}, [lr]
   13dc0:	vst1.32	{d16-d17}, [r3]
   13dc4:	beq	13e14 <__assert_fail@plt+0x2e3c>
   13dc8:	vld1.64	{d16-d17}, [r2], r4
   13dcc:	vld1.64	{d18-d19}, [lr]
   13dd0:	add	r3, sp, #48	; 0x30
   13dd4:	add	r4, r3, #4
   13dd8:	vld1.32	{d20-d21}, [r2]
   13ddc:	add	r2, r3, #20
   13de0:	vst1.32	{d16-d17}, [r4]
   13de4:	vst1.32	{d18-d19}, [r2]
   13de8:	add	r2, r3, #32
   13dec:	vst1.32	{d20-d21}, [r2]
   13df0:	str	r1, [sp, #48]	; 0x30
   13df4:	mvn	r2, #0
   13df8:	ldr	r1, [sp, #60]	; 0x3c
   13dfc:	orr	r1, r1, #67108864	; 0x4000000
   13e00:	str	r1, [sp, #60]	; 0x3c
   13e04:	mov	r1, ip
   13e08:	bl	1389c <__assert_fail@plt+0x28c4>
   13e0c:	sub	sp, fp, #8
   13e10:	pop	{r4, sl, fp, pc}
   13e14:	bl	10fc0 <abort@plt>
   13e18:	push	{r4, r5, fp, lr}
   13e1c:	add	fp, sp, #8
   13e20:	sub	sp, sp, #48	; 0x30
   13e24:	mov	ip, r3
   13e28:	movw	r3, #24992	; 0x61a0
   13e2c:	mov	lr, #32
   13e30:	cmp	r1, #0
   13e34:	mov	r5, sp
   13e38:	movt	r3, #2
   13e3c:	cmpne	r2, #0
   13e40:	add	r4, r3, #16
   13e44:	vld1.64	{d16-d17}, [r3], lr
   13e48:	vld1.64	{d18-d19}, [r4]
   13e4c:	add	r4, r5, #16
   13e50:	vld1.64	{d20-d21}, [r3]
   13e54:	vst1.64	{d16-d17}, [r5], lr
   13e58:	mov	r3, #10
   13e5c:	vst1.64	{d18-d19}, [r4]
   13e60:	vst1.64	{d20-d21}, [r5]
   13e64:	str	r3, [sp]
   13e68:	bne	13e70 <__assert_fail@plt+0x2e98>
   13e6c:	bl	10fc0 <abort@plt>
   13e70:	str	r2, [sp, #44]	; 0x2c
   13e74:	str	r1, [sp, #40]	; 0x28
   13e78:	mov	r3, sp
   13e7c:	mov	r1, ip
   13e80:	mvn	r2, #0
   13e84:	bl	1389c <__assert_fail@plt+0x28c4>
   13e88:	sub	sp, fp, #8
   13e8c:	pop	{r4, r5, fp, pc}
   13e90:	push	{r4, r5, fp, lr}
   13e94:	add	fp, sp, #8
   13e98:	sub	sp, sp, #48	; 0x30
   13e9c:	mov	lr, r3
   13ea0:	movw	r3, #24992	; 0x61a0
   13ea4:	mov	ip, #32
   13ea8:	cmp	r1, #0
   13eac:	mov	r5, sp
   13eb0:	movt	r3, #2
   13eb4:	cmpne	r2, #0
   13eb8:	add	r4, r3, #16
   13ebc:	vld1.64	{d16-d17}, [r3], ip
   13ec0:	vld1.64	{d18-d19}, [r4]
   13ec4:	add	r4, r5, #16
   13ec8:	vld1.64	{d20-d21}, [r3]
   13ecc:	vst1.64	{d16-d17}, [r5], ip
   13ed0:	mov	r3, #10
   13ed4:	vst1.64	{d18-d19}, [r4]
   13ed8:	vst1.64	{d20-d21}, [r5]
   13edc:	str	r3, [sp]
   13ee0:	bne	13ee8 <__assert_fail@plt+0x2f10>
   13ee4:	bl	10fc0 <abort@plt>
   13ee8:	ldr	ip, [fp, #8]
   13eec:	str	r2, [sp, #44]	; 0x2c
   13ef0:	str	r1, [sp, #40]	; 0x28
   13ef4:	mov	r3, sp
   13ef8:	mov	r1, lr
   13efc:	mov	r2, ip
   13f00:	bl	1389c <__assert_fail@plt+0x28c4>
   13f04:	sub	sp, fp, #8
   13f08:	pop	{r4, r5, fp, pc}
   13f0c:	push	{r4, sl, fp, lr}
   13f10:	add	fp, sp, #8
   13f14:	sub	sp, sp, #48	; 0x30
   13f18:	mov	ip, r2
   13f1c:	movw	r2, #24992	; 0x61a0
   13f20:	mov	lr, #32
   13f24:	cmp	r0, #0
   13f28:	mov	r4, sp
   13f2c:	movt	r2, #2
   13f30:	cmpne	r1, #0
   13f34:	add	r3, r2, #16
   13f38:	vld1.64	{d16-d17}, [r2], lr
   13f3c:	vld1.64	{d18-d19}, [r3]
   13f40:	add	r3, r4, #16
   13f44:	vld1.64	{d20-d21}, [r2]
   13f48:	vst1.64	{d16-d17}, [r4], lr
   13f4c:	mov	r2, #10
   13f50:	vst1.64	{d18-d19}, [r3]
   13f54:	vst1.64	{d20-d21}, [r4]
   13f58:	str	r2, [sp]
   13f5c:	bne	13f64 <__assert_fail@plt+0x2f8c>
   13f60:	bl	10fc0 <abort@plt>
   13f64:	str	r1, [sp, #44]	; 0x2c
   13f68:	str	r0, [sp, #40]	; 0x28
   13f6c:	mov	r3, sp
   13f70:	mov	r0, #0
   13f74:	mov	r1, ip
   13f78:	mvn	r2, #0
   13f7c:	bl	1389c <__assert_fail@plt+0x28c4>
   13f80:	sub	sp, fp, #8
   13f84:	pop	{r4, sl, fp, pc}
   13f88:	push	{r4, r5, fp, lr}
   13f8c:	add	fp, sp, #8
   13f90:	sub	sp, sp, #48	; 0x30
   13f94:	mov	lr, r2
   13f98:	movw	r2, #24992	; 0x61a0
   13f9c:	mov	ip, r3
   13fa0:	mov	r3, #32
   13fa4:	cmp	r0, #0
   13fa8:	mov	r5, sp
   13fac:	movt	r2, #2
   13fb0:	cmpne	r1, #0
   13fb4:	add	r4, r2, #16
   13fb8:	vld1.64	{d16-d17}, [r2], r3
   13fbc:	vld1.64	{d18-d19}, [r4]
   13fc0:	add	r4, r5, #16
   13fc4:	vld1.64	{d20-d21}, [r2]
   13fc8:	vst1.64	{d16-d17}, [r5], r3
   13fcc:	mov	r2, #10
   13fd0:	vst1.64	{d18-d19}, [r4]
   13fd4:	vst1.64	{d20-d21}, [r5]
   13fd8:	str	r2, [sp]
   13fdc:	bne	13fe4 <__assert_fail@plt+0x300c>
   13fe0:	bl	10fc0 <abort@plt>
   13fe4:	str	r1, [sp, #44]	; 0x2c
   13fe8:	str	r0, [sp, #40]	; 0x28
   13fec:	mov	r3, sp
   13ff0:	mov	r0, #0
   13ff4:	mov	r1, lr
   13ff8:	mov	r2, ip
   13ffc:	bl	1389c <__assert_fail@plt+0x28c4>
   14000:	sub	sp, fp, #8
   14004:	pop	{r4, r5, fp, pc}
   14008:	movw	r3, #24832	; 0x6100
   1400c:	movt	r3, #2
   14010:	b	1389c <__assert_fail@plt+0x28c4>
   14014:	movw	r3, #24832	; 0x6100
   14018:	mov	r2, r1
   1401c:	mov	r1, r0
   14020:	mov	r0, #0
   14024:	movt	r3, #2
   14028:	b	1389c <__assert_fail@plt+0x28c4>
   1402c:	movw	r3, #24832	; 0x6100
   14030:	mvn	r2, #0
   14034:	movt	r3, #2
   14038:	b	1389c <__assert_fail@plt+0x28c4>
   1403c:	movw	r3, #24832	; 0x6100
   14040:	mov	r1, r0
   14044:	mov	r0, #0
   14048:	mvn	r2, #0
   1404c:	movt	r3, #2
   14050:	b	1389c <__assert_fail@plt+0x28c4>
   14054:	push	{r4, r5, fp, lr}
   14058:	add	fp, sp, #8
   1405c:	mov	r5, r0
   14060:	mov	r4, r1
   14064:	mov	r0, #0
   14068:	mov	r2, #5
   1406c:	mov	r1, r5
   14070:	bl	10e1c <dcgettext@plt>
   14074:	cmp	r0, r5
   14078:	popne	{r4, r5, fp, pc}
   1407c:	bl	14f2c <__assert_fail@plt+0x3f54>
   14080:	ldrb	r1, [r0]
   14084:	and	r1, r1, #223	; 0xdf
   14088:	cmp	r1, #71	; 0x47
   1408c:	beq	140f4 <__assert_fail@plt+0x311c>
   14090:	cmp	r1, #85	; 0x55
   14094:	bne	14118 <__assert_fail@plt+0x3140>
   14098:	ldrb	r1, [r0, #1]
   1409c:	and	r1, r1, #223	; 0xdf
   140a0:	cmp	r1, #84	; 0x54
   140a4:	bne	14118 <__assert_fail@plt+0x3140>
   140a8:	ldrb	r1, [r0, #2]
   140ac:	and	r1, r1, #223	; 0xdf
   140b0:	cmp	r1, #70	; 0x46
   140b4:	ldrbeq	r1, [r0, #3]
   140b8:	cmpeq	r1, #45	; 0x2d
   140bc:	bne	14118 <__assert_fail@plt+0x3140>
   140c0:	ldrb	r1, [r0, #4]
   140c4:	cmp	r1, #56	; 0x38
   140c8:	ldrbeq	r0, [r0, #5]
   140cc:	cmpeq	r0, #0
   140d0:	bne	14118 <__assert_fail@plt+0x3140>
   140d4:	ldrb	r1, [r5]
   140d8:	movw	r2, #23368	; 0x5b48
   140dc:	movw	r0, #23372	; 0x5b4c
   140e0:	movt	r2, #1
   140e4:	movt	r0, #1
   140e8:	cmp	r1, #96	; 0x60
   140ec:	moveq	r0, r2
   140f0:	pop	{r4, r5, fp, pc}
   140f4:	ldrb	r1, [r0, #1]
   140f8:	and	r1, r1, #223	; 0xdf
   140fc:	cmp	r1, #66	; 0x42
   14100:	bne	14118 <__assert_fail@plt+0x3140>
   14104:	ldrb	r1, [r0, #2]
   14108:	cmp	r1, #49	; 0x31
   1410c:	ldrbeq	r1, [r0, #3]
   14110:	cmpeq	r1, #56	; 0x38
   14114:	beq	14134 <__assert_fail@plt+0x315c>
   14118:	movw	r1, #23364	; 0x5b44
   1411c:	movw	r0, #23196	; 0x5a9c
   14120:	cmp	r4, #9
   14124:	movt	r1, #1
   14128:	movt	r0, #1
   1412c:	moveq	r0, r1
   14130:	pop	{r4, r5, fp, pc}
   14134:	ldrb	r1, [r0, #4]
   14138:	cmp	r1, #48	; 0x30
   1413c:	ldrbeq	r1, [r0, #5]
   14140:	cmpeq	r1, #51	; 0x33
   14144:	bne	14118 <__assert_fail@plt+0x3140>
   14148:	ldrb	r1, [r0, #6]
   1414c:	cmp	r1, #48	; 0x30
   14150:	ldrbeq	r0, [r0, #7]
   14154:	cmpeq	r0, #0
   14158:	bne	14118 <__assert_fail@plt+0x3140>
   1415c:	ldrb	r1, [r5]
   14160:	movw	r2, #23376	; 0x5b50
   14164:	movw	r0, #23380	; 0x5b54
   14168:	movt	r2, #1
   1416c:	movt	r0, #1
   14170:	b	140e8 <__assert_fail@plt+0x3110>
   14174:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14178:	add	fp, sp, #24
   1417c:	sub	sp, sp, #32
   14180:	ldr	r6, [fp, #12]
   14184:	ldr	r7, [fp, #8]
   14188:	mov	r4, r2
   1418c:	mov	r8, r0
   14190:	cmp	r1, #0
   14194:	beq	141bc <__assert_fail@plt+0x31e4>
   14198:	movw	r2, #23468	; 0x5bac
   1419c:	mov	r5, r1
   141a0:	str	r3, [sp, #4]
   141a4:	str	r4, [sp]
   141a8:	mov	r0, r8
   141ac:	mov	r1, #1
   141b0:	movt	r2, #1
   141b4:	mov	r3, r5
   141b8:	b	141d4 <__assert_fail@plt+0x31fc>
   141bc:	movw	r2, #23480	; 0x5bb8
   141c0:	str	r3, [sp]
   141c4:	mov	r0, r8
   141c8:	mov	r1, #1
   141cc:	mov	r3, r4
   141d0:	movt	r2, #1
   141d4:	bl	10f30 <__fprintf_chk@plt>
   141d8:	movw	r1, #23487	; 0x5bbf
   141dc:	mov	r0, #0
   141e0:	mov	r2, #5
   141e4:	movt	r1, #1
   141e8:	bl	10e1c <dcgettext@plt>
   141ec:	movw	r2, #24205	; 0x5e8d
   141f0:	mov	r3, r0
   141f4:	movw	r0, #2022	; 0x7e6
   141f8:	mov	r1, #1
   141fc:	str	r0, [sp]
   14200:	movt	r2, #1
   14204:	mov	r0, r8
   14208:	bl	10f30 <__fprintf_chk@plt>
   1420c:	movw	r4, #22102	; 0x5656
   14210:	mov	r1, r8
   14214:	movt	r4, #1
   14218:	mov	r0, r4
   1421c:	bl	10da4 <fputs_unlocked@plt>
   14220:	movw	r1, #23491	; 0x5bc3
   14224:	mov	r0, #0
   14228:	mov	r2, #5
   1422c:	movt	r1, #1
   14230:	bl	10e1c <dcgettext@plt>
   14234:	movw	r3, #23662	; 0x5c6e
   14238:	mov	r2, r0
   1423c:	mov	r0, r8
   14240:	mov	r1, #1
   14244:	movt	r3, #1
   14248:	bl	10f30 <__fprintf_chk@plt>
   1424c:	mov	r0, r4
   14250:	mov	r1, r8
   14254:	bl	10da4 <fputs_unlocked@plt>
   14258:	cmp	r6, #9
   1425c:	bhi	14298 <__assert_fail@plt+0x32c0>
   14260:	add	r0, pc, #0
   14264:	ldr	pc, [r0, r6, lsl #2]
   14268:	muleq	r1, r0, r2
   1426c:	andeq	r4, r1, r4, lsr #5
   14270:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14274:	strdeq	r4, [r1], -ip
   14278:	andeq	r4, r1, r4, lsr #6
   1427c:	andeq	r4, r1, ip, asr #6
   14280:	andeq	r4, r1, r4, ror r3
   14284:	andeq	r4, r1, ip, lsr #7
   14288:	andeq	r4, r1, ip, asr #8
   1428c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14290:	sub	sp, fp, #24
   14294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14298:	movw	r1, #24015	; 0x5dcf
   1429c:	movt	r1, #1
   142a0:	b	143fc <__assert_fail@plt+0x3424>
   142a4:	movw	r1, #23696	; 0x5c90
   142a8:	mov	r0, #0
   142ac:	mov	r2, #5
   142b0:	movt	r1, #1
   142b4:	bl	10e1c <dcgettext@plt>
   142b8:	ldr	r3, [r7]
   142bc:	mov	r2, r0
   142c0:	mov	r0, r8
   142c4:	mov	r1, #1
   142c8:	sub	sp, fp, #24
   142cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   142d0:	b	10f30 <__fprintf_chk@plt>
   142d4:	movw	r1, #23712	; 0x5ca0
   142d8:	mov	r0, #0
   142dc:	mov	r2, #5
   142e0:	movt	r1, #1
   142e4:	bl	10e1c <dcgettext@plt>
   142e8:	mov	r2, r0
   142ec:	ldr	r3, [r7]
   142f0:	ldr	r0, [r7, #4]
   142f4:	str	r0, [sp]
   142f8:	b	143e8 <__assert_fail@plt+0x3410>
   142fc:	movw	r1, #23735	; 0x5cb7
   14300:	mov	r0, #0
   14304:	mov	r2, #5
   14308:	movt	r1, #1
   1430c:	bl	10e1c <dcgettext@plt>
   14310:	ldr	r3, [r7]
   14314:	mov	r2, r0
   14318:	ldmib	r7, {r0, r1}
   1431c:	stm	sp, {r0, r1}
   14320:	b	143e8 <__assert_fail@plt+0x3410>
   14324:	movw	r1, #23763	; 0x5cd3
   14328:	mov	r0, #0
   1432c:	mov	r2, #5
   14330:	movt	r1, #1
   14334:	bl	10e1c <dcgettext@plt>
   14338:	ldr	r3, [r7]
   1433c:	mov	r2, r0
   14340:	ldmib	r7, {r0, r1, r7}
   14344:	stm	sp, {r0, r1, r7}
   14348:	b	143e8 <__assert_fail@plt+0x3410>
   1434c:	movw	r1, #23795	; 0x5cf3
   14350:	mov	r0, #0
   14354:	mov	r2, #5
   14358:	movt	r1, #1
   1435c:	bl	10e1c <dcgettext@plt>
   14360:	ldr	r3, [r7]
   14364:	mov	r2, r0
   14368:	ldmib	r7, {r0, r1, r6, r7}
   1436c:	stm	sp, {r0, r1, r6, r7}
   14370:	b	143e8 <__assert_fail@plt+0x3410>
   14374:	movw	r1, #23831	; 0x5d17
   14378:	mov	r0, #0
   1437c:	mov	r2, #5
   14380:	movt	r1, #1
   14384:	bl	10e1c <dcgettext@plt>
   14388:	ldr	r3, [r7]
   1438c:	mov	r2, r0
   14390:	ldmib	r7, {r0, r1, r6}
   14394:	ldr	r5, [r7, #16]
   14398:	ldr	r7, [r7, #20]
   1439c:	stm	sp, {r0, r1, r6}
   143a0:	str	r5, [sp, #12]
   143a4:	str	r7, [sp, #16]
   143a8:	b	143e8 <__assert_fail@plt+0x3410>
   143ac:	movw	r1, #23871	; 0x5d3f
   143b0:	mov	r0, #0
   143b4:	mov	r2, #5
   143b8:	movt	r1, #1
   143bc:	bl	10e1c <dcgettext@plt>
   143c0:	ldr	r3, [r7]
   143c4:	mov	r2, r0
   143c8:	ldmib	r7, {r0, r1, r6}
   143cc:	ldr	r5, [r7, #16]
   143d0:	ldr	r4, [r7, #20]
   143d4:	ldr	r7, [r7, #24]
   143d8:	stm	sp, {r0, r1, r6}
   143dc:	str	r5, [sp, #12]
   143e0:	str	r4, [sp, #16]
   143e4:	str	r7, [sp, #20]
   143e8:	mov	r0, r8
   143ec:	mov	r1, #1
   143f0:	b	1449c <__assert_fail@plt+0x34c4>
   143f4:	movw	r1, #23963	; 0x5d9b
   143f8:	movt	r1, #1
   143fc:	mov	r0, #0
   14400:	mov	r2, #5
   14404:	bl	10e1c <dcgettext@plt>
   14408:	mov	ip, r0
   1440c:	ldr	r3, [r7]
   14410:	ldr	r0, [r7, #4]
   14414:	ldr	r1, [r7, #8]
   14418:	ldr	r6, [r7, #12]
   1441c:	ldr	r5, [r7, #16]
   14420:	ldr	r4, [r7, #20]
   14424:	ldr	r2, [r7, #24]
   14428:	ldr	lr, [r7, #28]
   1442c:	ldr	r7, [r7, #32]
   14430:	stm	sp, {r0, r1, r6}
   14434:	str	r5, [sp, #12]
   14438:	str	r4, [sp, #16]
   1443c:	str	r2, [sp, #20]
   14440:	str	lr, [sp, #24]
   14444:	str	r7, [sp, #28]
   14448:	b	14490 <__assert_fail@plt+0x34b8>
   1444c:	movw	r1, #23915	; 0x5d6b
   14450:	mov	r0, #0
   14454:	mov	r2, #5
   14458:	movt	r1, #1
   1445c:	bl	10e1c <dcgettext@plt>
   14460:	mov	ip, r0
   14464:	ldr	r3, [r7]
   14468:	ldmib	r7, {r0, r1, r6}
   1446c:	ldr	r5, [r7, #16]
   14470:	ldr	r4, [r7, #20]
   14474:	ldr	r2, [r7, #24]
   14478:	ldr	r7, [r7, #28]
   1447c:	stm	sp, {r0, r1, r6}
   14480:	str	r5, [sp, #12]
   14484:	str	r4, [sp, #16]
   14488:	str	r2, [sp, #20]
   1448c:	str	r7, [sp, #24]
   14490:	mov	r0, r8
   14494:	mov	r1, #1
   14498:	mov	r2, ip
   1449c:	bl	10f30 <__fprintf_chk@plt>
   144a0:	sub	sp, fp, #24
   144a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144a8:	push	{r4, sl, fp, lr}
   144ac:	add	fp, sp, #8
   144b0:	sub	sp, sp, #8
   144b4:	ldr	ip, [fp, #8]
   144b8:	mov	lr, #0
   144bc:	ldr	r4, [ip, lr, lsl #2]
   144c0:	add	lr, lr, #1
   144c4:	cmp	r4, #0
   144c8:	bne	144bc <__assert_fail@plt+0x34e4>
   144cc:	sub	r4, lr, #1
   144d0:	str	ip, [sp]
   144d4:	str	r4, [sp, #4]
   144d8:	bl	14174 <__assert_fail@plt+0x319c>
   144dc:	sub	sp, fp, #8
   144e0:	pop	{r4, sl, fp, pc}
   144e4:	push	{fp, lr}
   144e8:	mov	fp, sp
   144ec:	sub	sp, sp, #48	; 0x30
   144f0:	ldr	ip, [fp, #8]
   144f4:	ldr	lr, [ip]
   144f8:	cmp	lr, #0
   144fc:	str	lr, [sp, #8]
   14500:	beq	1459c <__assert_fail@plt+0x35c4>
   14504:	ldr	lr, [ip, #4]
   14508:	cmp	lr, #0
   1450c:	str	lr, [sp, #12]
   14510:	beq	145a4 <__assert_fail@plt+0x35cc>
   14514:	ldr	lr, [ip, #8]
   14518:	cmp	lr, #0
   1451c:	str	lr, [sp, #16]
   14520:	beq	145ac <__assert_fail@plt+0x35d4>
   14524:	ldr	lr, [ip, #12]
   14528:	cmp	lr, #0
   1452c:	str	lr, [sp, #20]
   14530:	beq	145b4 <__assert_fail@plt+0x35dc>
   14534:	ldr	lr, [ip, #16]
   14538:	cmp	lr, #0
   1453c:	str	lr, [sp, #24]
   14540:	beq	145bc <__assert_fail@plt+0x35e4>
   14544:	ldr	lr, [ip, #20]
   14548:	cmp	lr, #0
   1454c:	str	lr, [sp, #28]
   14550:	beq	145c4 <__assert_fail@plt+0x35ec>
   14554:	ldr	lr, [ip, #24]
   14558:	cmp	lr, #0
   1455c:	str	lr, [sp, #32]
   14560:	beq	145cc <__assert_fail@plt+0x35f4>
   14564:	ldr	lr, [ip, #28]
   14568:	cmp	lr, #0
   1456c:	str	lr, [sp, #36]	; 0x24
   14570:	beq	145d4 <__assert_fail@plt+0x35fc>
   14574:	ldr	lr, [ip, #32]
   14578:	cmp	lr, #0
   1457c:	str	lr, [sp, #40]	; 0x28
   14580:	beq	145dc <__assert_fail@plt+0x3604>
   14584:	ldr	lr, [ip, #36]	; 0x24
   14588:	mov	ip, #10
   1458c:	cmp	lr, #0
   14590:	str	lr, [sp, #44]	; 0x2c
   14594:	movweq	ip, #9
   14598:	b	145e0 <__assert_fail@plt+0x3608>
   1459c:	mov	ip, #0
   145a0:	b	145e0 <__assert_fail@plt+0x3608>
   145a4:	mov	ip, #1
   145a8:	b	145e0 <__assert_fail@plt+0x3608>
   145ac:	mov	ip, #2
   145b0:	b	145e0 <__assert_fail@plt+0x3608>
   145b4:	mov	ip, #3
   145b8:	b	145e0 <__assert_fail@plt+0x3608>
   145bc:	mov	ip, #4
   145c0:	b	145e0 <__assert_fail@plt+0x3608>
   145c4:	mov	ip, #5
   145c8:	b	145e0 <__assert_fail@plt+0x3608>
   145cc:	mov	ip, #6
   145d0:	b	145e0 <__assert_fail@plt+0x3608>
   145d4:	mov	ip, #7
   145d8:	b	145e0 <__assert_fail@plt+0x3608>
   145dc:	mov	ip, #8
   145e0:	add	lr, sp, #8
   145e4:	str	ip, [sp, #4]
   145e8:	str	lr, [sp]
   145ec:	bl	14174 <__assert_fail@plt+0x319c>
   145f0:	mov	sp, fp
   145f4:	pop	{fp, pc}
   145f8:	push	{fp, lr}
   145fc:	mov	fp, sp
   14600:	sub	sp, sp, #56	; 0x38
   14604:	add	ip, fp, #8
   14608:	str	ip, [sp, #12]
   1460c:	ldr	lr, [fp, #8]
   14610:	cmp	lr, #0
   14614:	str	lr, [sp, #16]
   14618:	beq	146b4 <__assert_fail@plt+0x36dc>
   1461c:	ldr	lr, [ip, #4]
   14620:	cmp	lr, #0
   14624:	str	lr, [sp, #20]
   14628:	beq	146bc <__assert_fail@plt+0x36e4>
   1462c:	ldr	lr, [ip, #8]
   14630:	cmp	lr, #0
   14634:	str	lr, [sp, #24]
   14638:	beq	146c4 <__assert_fail@plt+0x36ec>
   1463c:	ldr	lr, [ip, #12]
   14640:	cmp	lr, #0
   14644:	str	lr, [sp, #28]
   14648:	beq	146cc <__assert_fail@plt+0x36f4>
   1464c:	ldr	lr, [ip, #16]
   14650:	cmp	lr, #0
   14654:	str	lr, [sp, #32]
   14658:	beq	146d4 <__assert_fail@plt+0x36fc>
   1465c:	ldr	lr, [ip, #20]
   14660:	cmp	lr, #0
   14664:	str	lr, [sp, #36]	; 0x24
   14668:	beq	146dc <__assert_fail@plt+0x3704>
   1466c:	ldr	lr, [ip, #24]
   14670:	cmp	lr, #0
   14674:	str	lr, [sp, #40]	; 0x28
   14678:	beq	146e4 <__assert_fail@plt+0x370c>
   1467c:	ldr	lr, [ip, #28]
   14680:	cmp	lr, #0
   14684:	str	lr, [sp, #44]	; 0x2c
   14688:	beq	146ec <__assert_fail@plt+0x3714>
   1468c:	ldr	lr, [ip, #32]
   14690:	cmp	lr, #0
   14694:	str	lr, [sp, #48]	; 0x30
   14698:	beq	146f4 <__assert_fail@plt+0x371c>
   1469c:	ldr	lr, [ip, #36]	; 0x24
   146a0:	mov	ip, #10
   146a4:	cmp	lr, #0
   146a8:	str	lr, [sp, #52]	; 0x34
   146ac:	movweq	ip, #9
   146b0:	b	146f8 <__assert_fail@plt+0x3720>
   146b4:	mov	ip, #0
   146b8:	b	146f8 <__assert_fail@plt+0x3720>
   146bc:	mov	ip, #1
   146c0:	b	146f8 <__assert_fail@plt+0x3720>
   146c4:	mov	ip, #2
   146c8:	b	146f8 <__assert_fail@plt+0x3720>
   146cc:	mov	ip, #3
   146d0:	b	146f8 <__assert_fail@plt+0x3720>
   146d4:	mov	ip, #4
   146d8:	b	146f8 <__assert_fail@plt+0x3720>
   146dc:	mov	ip, #5
   146e0:	b	146f8 <__assert_fail@plt+0x3720>
   146e4:	mov	ip, #6
   146e8:	b	146f8 <__assert_fail@plt+0x3720>
   146ec:	mov	ip, #7
   146f0:	b	146f8 <__assert_fail@plt+0x3720>
   146f4:	mov	ip, #8
   146f8:	add	lr, sp, #16
   146fc:	str	ip, [sp, #4]
   14700:	str	lr, [sp]
   14704:	bl	14174 <__assert_fail@plt+0x319c>
   14708:	mov	sp, fp
   1470c:	pop	{fp, pc}
   14710:	push	{fp, lr}
   14714:	mov	fp, sp
   14718:	movw	r0, #24908	; 0x614c
   1471c:	movt	r0, #2
   14720:	ldr	r1, [r0]
   14724:	movw	r0, #22102	; 0x5656
   14728:	movt	r0, #1
   1472c:	bl	10da4 <fputs_unlocked@plt>
   14730:	movw	r1, #24075	; 0x5e0b
   14734:	mov	r0, #0
   14738:	mov	r2, #5
   1473c:	movt	r1, #1
   14740:	bl	10e1c <dcgettext@plt>
   14744:	movw	r2, #24095	; 0x5e1f
   14748:	mov	r1, r0
   1474c:	mov	r0, #1
   14750:	movt	r2, #1
   14754:	bl	10f18 <__printf_chk@plt>
   14758:	movw	r1, #24117	; 0x5e35
   1475c:	mov	r0, #0
   14760:	mov	r2, #5
   14764:	movt	r1, #1
   14768:	bl	10e1c <dcgettext@plt>
   1476c:	movw	r2, #21632	; 0x5480
   14770:	movw	r3, #21911	; 0x5597
   14774:	mov	r1, r0
   14778:	mov	r0, #1
   1477c:	movt	r2, #1
   14780:	movt	r3, #1
   14784:	bl	10f18 <__printf_chk@plt>
   14788:	movw	r1, #24137	; 0x5e49
   1478c:	mov	r0, #0
   14790:	mov	r2, #5
   14794:	movt	r1, #1
   14798:	bl	10e1c <dcgettext@plt>
   1479c:	movw	r2, #24176	; 0x5e70
   147a0:	mov	r1, r0
   147a4:	mov	r0, #1
   147a8:	movt	r2, #1
   147ac:	pop	{fp, lr}
   147b0:	b	10f18 <__printf_chk@plt>
   147b4:	push	{r4, r5, r6, sl, fp, lr}
   147b8:	add	fp, sp, #16
   147bc:	mov	r4, r2
   147c0:	mov	r5, r1
   147c4:	mov	r6, r0
   147c8:	bl	14fc4 <__assert_fail@plt+0x3fec>
   147cc:	cmp	r0, #0
   147d0:	popne	{r4, r5, r6, sl, fp, pc}
   147d4:	cmp	r6, #0
   147d8:	beq	147ec <__assert_fail@plt+0x3814>
   147dc:	cmp	r5, #0
   147e0:	cmpne	r4, #0
   147e4:	bne	147ec <__assert_fail@plt+0x3814>
   147e8:	pop	{r4, r5, r6, sl, fp, pc}
   147ec:	bl	14d8c <__assert_fail@plt+0x3db4>
   147f0:	push	{r4, r5, r6, sl, fp, lr}
   147f4:	add	fp, sp, #16
   147f8:	mov	r4, r2
   147fc:	mov	r5, r1
   14800:	mov	r6, r0
   14804:	bl	14fc4 <__assert_fail@plt+0x3fec>
   14808:	cmp	r0, #0
   1480c:	popne	{r4, r5, r6, sl, fp, pc}
   14810:	cmp	r6, #0
   14814:	beq	14828 <__assert_fail@plt+0x3850>
   14818:	cmp	r5, #0
   1481c:	cmpne	r4, #0
   14820:	bne	14828 <__assert_fail@plt+0x3850>
   14824:	pop	{r4, r5, r6, sl, fp, pc}
   14828:	bl	14d8c <__assert_fail@plt+0x3db4>
   1482c:	push	{fp, lr}
   14830:	mov	fp, sp
   14834:	bl	14e24 <__assert_fail@plt+0x3e4c>
   14838:	cmp	r0, #0
   1483c:	popne	{fp, pc}
   14840:	bl	14d8c <__assert_fail@plt+0x3db4>
   14844:	push	{fp, lr}
   14848:	mov	fp, sp
   1484c:	bl	14e24 <__assert_fail@plt+0x3e4c>
   14850:	cmp	r0, #0
   14854:	popne	{fp, pc}
   14858:	bl	14d8c <__assert_fail@plt+0x3db4>
   1485c:	push	{fp, lr}
   14860:	mov	fp, sp
   14864:	bl	14e24 <__assert_fail@plt+0x3e4c>
   14868:	cmp	r0, #0
   1486c:	popne	{fp, pc}
   14870:	bl	14d8c <__assert_fail@plt+0x3db4>
   14874:	push	{r4, r5, fp, lr}
   14878:	add	fp, sp, #8
   1487c:	mov	r4, r1
   14880:	mov	r5, r0
   14884:	bl	14e54 <__assert_fail@plt+0x3e7c>
   14888:	cmp	r0, #0
   1488c:	popne	{r4, r5, fp, pc}
   14890:	cmp	r5, #0
   14894:	beq	148a4 <__assert_fail@plt+0x38cc>
   14898:	cmp	r4, #0
   1489c:	bne	148a4 <__assert_fail@plt+0x38cc>
   148a0:	pop	{r4, r5, fp, pc}
   148a4:	bl	14d8c <__assert_fail@plt+0x3db4>
   148a8:	push	{fp, lr}
   148ac:	mov	fp, sp
   148b0:	cmp	r1, #0
   148b4:	orreq	r1, r1, #1
   148b8:	bl	14e54 <__assert_fail@plt+0x3e7c>
   148bc:	cmp	r0, #0
   148c0:	popne	{fp, pc}
   148c4:	bl	14d8c <__assert_fail@plt+0x3db4>
   148c8:	push	{fp, lr}
   148cc:	mov	fp, sp
   148d0:	clz	r3, r2
   148d4:	lsr	ip, r3, #5
   148d8:	clz	r3, r1
   148dc:	lsr	r3, r3, #5
   148e0:	orrs	r3, r3, ip
   148e4:	movwne	r1, #1
   148e8:	movwne	r2, #1
   148ec:	bl	14fc4 <__assert_fail@plt+0x3fec>
   148f0:	cmp	r0, #0
   148f4:	popne	{fp, pc}
   148f8:	bl	14d8c <__assert_fail@plt+0x3db4>
   148fc:	push	{fp, lr}
   14900:	mov	fp, sp
   14904:	mov	r2, r1
   14908:	mov	r1, r0
   1490c:	mov	r0, #0
   14910:	bl	14fc4 <__assert_fail@plt+0x3fec>
   14914:	cmp	r0, #0
   14918:	popne	{fp, pc}
   1491c:	bl	14d8c <__assert_fail@plt+0x3db4>
   14920:	push	{fp, lr}
   14924:	mov	fp, sp
   14928:	mov	r2, r1
   1492c:	mov	r1, r0
   14930:	clz	r0, r2
   14934:	clz	r3, r1
   14938:	lsr	r0, r0, #5
   1493c:	lsr	r3, r3, #5
   14940:	orrs	r0, r3, r0
   14944:	movwne	r1, #1
   14948:	movwne	r2, #1
   1494c:	mov	r0, #0
   14950:	bl	14fc4 <__assert_fail@plt+0x3fec>
   14954:	cmp	r0, #0
   14958:	popne	{fp, pc}
   1495c:	bl	14d8c <__assert_fail@plt+0x3db4>
   14960:	push	{r4, r5, r6, sl, fp, lr}
   14964:	add	fp, sp, #16
   14968:	ldr	r5, [r1]
   1496c:	mov	r4, r1
   14970:	mov	r6, r0
   14974:	cmp	r0, #0
   14978:	beq	14990 <__assert_fail@plt+0x39b8>
   1497c:	mov	r0, #1
   14980:	add	r0, r0, r5, lsr #1
   14984:	adds	r5, r5, r0
   14988:	bcc	14998 <__assert_fail@plt+0x39c0>
   1498c:	b	149d4 <__assert_fail@plt+0x39fc>
   14990:	cmp	r5, #0
   14994:	movweq	r5, #64	; 0x40
   14998:	mov	r0, r6
   1499c:	mov	r1, r5
   149a0:	mov	r2, #1
   149a4:	bl	14fc4 <__assert_fail@plt+0x3fec>
   149a8:	cmp	r5, #0
   149ac:	mov	r1, r5
   149b0:	movwne	r1, #1
   149b4:	cmp	r0, #0
   149b8:	bne	149cc <__assert_fail@plt+0x39f4>
   149bc:	clz	r2, r6
   149c0:	lsr	r2, r2, #5
   149c4:	orrs	r1, r2, r1
   149c8:	bne	149d4 <__assert_fail@plt+0x39fc>
   149cc:	str	r5, [r4]
   149d0:	pop	{r4, r5, r6, sl, fp, pc}
   149d4:	bl	14d8c <__assert_fail@plt+0x3db4>
   149d8:	push	{r4, r5, r6, r7, fp, lr}
   149dc:	add	fp, sp, #16
   149e0:	ldr	r5, [r1]
   149e4:	mov	r6, r2
   149e8:	mov	r4, r1
   149ec:	mov	r7, r0
   149f0:	cmp	r0, #0
   149f4:	beq	14a0c <__assert_fail@plt+0x3a34>
   149f8:	mov	r0, #1
   149fc:	add	r0, r0, r5, lsr #1
   14a00:	adds	r5, r5, r0
   14a04:	bcc	14a24 <__assert_fail@plt+0x3a4c>
   14a08:	b	14a58 <__assert_fail@plt+0x3a80>
   14a0c:	cmp	r5, #0
   14a10:	bne	14a24 <__assert_fail@plt+0x3a4c>
   14a14:	mov	r0, #64	; 0x40
   14a18:	cmp	r6, #64	; 0x40
   14a1c:	udiv	r5, r0, r6
   14a20:	addhi	r5, r5, #1
   14a24:	mov	r0, r7
   14a28:	mov	r1, r5
   14a2c:	mov	r2, r6
   14a30:	bl	14fc4 <__assert_fail@plt+0x3fec>
   14a34:	cmp	r0, #0
   14a38:	bne	14a50 <__assert_fail@plt+0x3a78>
   14a3c:	cmp	r7, #0
   14a40:	beq	14a58 <__assert_fail@plt+0x3a80>
   14a44:	cmp	r6, #0
   14a48:	cmpne	r5, #0
   14a4c:	bne	14a58 <__assert_fail@plt+0x3a80>
   14a50:	str	r5, [r4]
   14a54:	pop	{r4, r5, r6, r7, fp, pc}
   14a58:	bl	14d8c <__assert_fail@plt+0x3db4>
   14a5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a60:	add	fp, sp, #24
   14a64:	mov	r8, r1
   14a68:	ldr	r1, [r1]
   14a6c:	mov	r5, r0
   14a70:	add	r0, r1, r1, asr #1
   14a74:	cmp	r0, r1
   14a78:	mvnvs	r0, #-2147483648	; 0x80000000
   14a7c:	cmp	r0, r3
   14a80:	mov	r7, r0
   14a84:	movgt	r7, r3
   14a88:	cmn	r3, #1
   14a8c:	movle	r7, r0
   14a90:	ldr	r0, [fp, #8]
   14a94:	cmn	r0, #1
   14a98:	ble	14ac0 <__assert_fail@plt+0x3ae8>
   14a9c:	cmp	r0, #0
   14aa0:	beq	14b14 <__assert_fail@plt+0x3b3c>
   14aa4:	cmn	r7, #1
   14aa8:	ble	14ae8 <__assert_fail@plt+0x3b10>
   14aac:	mvn	r4, #-2147483648	; 0x80000000
   14ab0:	udiv	r6, r4, r0
   14ab4:	cmp	r6, r7
   14ab8:	bge	14b14 <__assert_fail@plt+0x3b3c>
   14abc:	b	14b24 <__assert_fail@plt+0x3b4c>
   14ac0:	cmn	r7, #1
   14ac4:	ble	14b04 <__assert_fail@plt+0x3b2c>
   14ac8:	cmn	r0, #1
   14acc:	beq	14b14 <__assert_fail@plt+0x3b3c>
   14ad0:	mov	r6, #-2147483648	; 0x80000000
   14ad4:	mvn	r4, #-2147483648	; 0x80000000
   14ad8:	sdiv	r6, r6, r0
   14adc:	cmp	r6, r7
   14ae0:	bge	14b14 <__assert_fail@plt+0x3b3c>
   14ae4:	b	14b24 <__assert_fail@plt+0x3b4c>
   14ae8:	beq	14b14 <__assert_fail@plt+0x3b3c>
   14aec:	mov	r6, #-2147483648	; 0x80000000
   14af0:	mvn	r4, #-2147483648	; 0x80000000
   14af4:	sdiv	r6, r6, r7
   14af8:	cmp	r6, r0
   14afc:	bge	14b14 <__assert_fail@plt+0x3b3c>
   14b00:	b	14b24 <__assert_fail@plt+0x3b4c>
   14b04:	mvn	r4, #-2147483648	; 0x80000000
   14b08:	sdiv	r6, r4, r0
   14b0c:	cmp	r7, r6
   14b10:	blt	14b24 <__assert_fail@plt+0x3b4c>
   14b14:	mul	r6, r7, r0
   14b18:	mov	r4, #64	; 0x40
   14b1c:	cmp	r6, #63	; 0x3f
   14b20:	bgt	14b2c <__assert_fail@plt+0x3b54>
   14b24:	sdiv	r7, r4, r0
   14b28:	mul	r6, r7, r0
   14b2c:	cmp	r5, #0
   14b30:	moveq	r4, #0
   14b34:	streq	r4, [r8]
   14b38:	sub	r4, r7, r1
   14b3c:	cmp	r4, r2
   14b40:	bge	14bec <__assert_fail@plt+0x3c14>
   14b44:	add	r7, r1, r2
   14b48:	mov	r6, #0
   14b4c:	mov	r2, #0
   14b50:	cmp	r7, r3
   14b54:	movwgt	r6, #1
   14b58:	cmn	r3, #1
   14b5c:	movwgt	r2, #1
   14b60:	cmp	r7, r1
   14b64:	bvs	14c20 <__assert_fail@plt+0x3c48>
   14b68:	ands	r1, r2, r6
   14b6c:	bne	14c20 <__assert_fail@plt+0x3c48>
   14b70:	cmn	r0, #1
   14b74:	ble	14b9c <__assert_fail@plt+0x3bc4>
   14b78:	cmp	r0, #0
   14b7c:	beq	14be8 <__assert_fail@plt+0x3c10>
   14b80:	cmn	r7, #1
   14b84:	ble	14bc0 <__assert_fail@plt+0x3be8>
   14b88:	mvn	r1, #-2147483648	; 0x80000000
   14b8c:	udiv	r1, r1, r0
   14b90:	cmp	r1, r7
   14b94:	bge	14be8 <__assert_fail@plt+0x3c10>
   14b98:	b	14c20 <__assert_fail@plt+0x3c48>
   14b9c:	cmn	r7, #1
   14ba0:	ble	14bd8 <__assert_fail@plt+0x3c00>
   14ba4:	cmn	r0, #1
   14ba8:	beq	14be8 <__assert_fail@plt+0x3c10>
   14bac:	mov	r1, #-2147483648	; 0x80000000
   14bb0:	sdiv	r1, r1, r0
   14bb4:	cmp	r1, r7
   14bb8:	bge	14be8 <__assert_fail@plt+0x3c10>
   14bbc:	b	14c20 <__assert_fail@plt+0x3c48>
   14bc0:	beq	14be8 <__assert_fail@plt+0x3c10>
   14bc4:	mov	r1, #-2147483648	; 0x80000000
   14bc8:	sdiv	r1, r1, r7
   14bcc:	cmp	r1, r0
   14bd0:	bge	14be8 <__assert_fail@plt+0x3c10>
   14bd4:	b	14c20 <__assert_fail@plt+0x3c48>
   14bd8:	mvn	r1, #-2147483648	; 0x80000000
   14bdc:	sdiv	r1, r1, r0
   14be0:	cmp	r7, r1
   14be4:	blt	14c20 <__assert_fail@plt+0x3c48>
   14be8:	mul	r6, r7, r0
   14bec:	mov	r0, r5
   14bf0:	mov	r1, r6
   14bf4:	bl	14e54 <__assert_fail@plt+0x3e7c>
   14bf8:	cmp	r6, #0
   14bfc:	movwne	r6, #1
   14c00:	cmp	r0, #0
   14c04:	bne	14c18 <__assert_fail@plt+0x3c40>
   14c08:	clz	r1, r5
   14c0c:	lsr	r1, r1, #5
   14c10:	orrs	r1, r1, r6
   14c14:	bne	14c20 <__assert_fail@plt+0x3c48>
   14c18:	str	r7, [r8]
   14c1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c20:	bl	14d8c <__assert_fail@plt+0x3db4>
   14c24:	push	{fp, lr}
   14c28:	mov	fp, sp
   14c2c:	mov	r1, #1
   14c30:	bl	14dd0 <__assert_fail@plt+0x3df8>
   14c34:	cmp	r0, #0
   14c38:	popne	{fp, pc}
   14c3c:	bl	14d8c <__assert_fail@plt+0x3db4>
   14c40:	push	{fp, lr}
   14c44:	mov	fp, sp
   14c48:	bl	14dd0 <__assert_fail@plt+0x3df8>
   14c4c:	cmp	r0, #0
   14c50:	popne	{fp, pc}
   14c54:	bl	14d8c <__assert_fail@plt+0x3db4>
   14c58:	push	{fp, lr}
   14c5c:	mov	fp, sp
   14c60:	mov	r1, #1
   14c64:	bl	14dd0 <__assert_fail@plt+0x3df8>
   14c68:	cmp	r0, #0
   14c6c:	popne	{fp, pc}
   14c70:	bl	14d8c <__assert_fail@plt+0x3db4>
   14c74:	push	{fp, lr}
   14c78:	mov	fp, sp
   14c7c:	bl	14dd0 <__assert_fail@plt+0x3df8>
   14c80:	cmp	r0, #0
   14c84:	popne	{fp, pc}
   14c88:	bl	14d8c <__assert_fail@plt+0x3db4>
   14c8c:	push	{r4, r5, r6, sl, fp, lr}
   14c90:	add	fp, sp, #16
   14c94:	mov	r5, r0
   14c98:	mov	r0, r1
   14c9c:	mov	r4, r1
   14ca0:	bl	14e24 <__assert_fail@plt+0x3e4c>
   14ca4:	cmp	r0, #0
   14ca8:	beq	14cc4 <__assert_fail@plt+0x3cec>
   14cac:	mov	r1, r5
   14cb0:	mov	r2, r4
   14cb4:	mov	r6, r0
   14cb8:	bl	10df8 <memcpy@plt>
   14cbc:	mov	r0, r6
   14cc0:	pop	{r4, r5, r6, sl, fp, pc}
   14cc4:	bl	14d8c <__assert_fail@plt+0x3db4>
   14cc8:	push	{r4, r5, r6, sl, fp, lr}
   14ccc:	add	fp, sp, #16
   14cd0:	mov	r5, r0
   14cd4:	mov	r0, r1
   14cd8:	mov	r4, r1
   14cdc:	bl	14e24 <__assert_fail@plt+0x3e4c>
   14ce0:	cmp	r0, #0
   14ce4:	beq	14d00 <__assert_fail@plt+0x3d28>
   14ce8:	mov	r1, r5
   14cec:	mov	r2, r4
   14cf0:	mov	r6, r0
   14cf4:	bl	10df8 <memcpy@plt>
   14cf8:	mov	r0, r6
   14cfc:	pop	{r4, r5, r6, sl, fp, pc}
   14d00:	bl	14d8c <__assert_fail@plt+0x3db4>
   14d04:	push	{r4, r5, r6, sl, fp, lr}
   14d08:	add	fp, sp, #16
   14d0c:	mov	r5, r0
   14d10:	add	r0, r1, #1
   14d14:	mov	r4, r1
   14d18:	bl	14e24 <__assert_fail@plt+0x3e4c>
   14d1c:	cmp	r0, #0
   14d20:	beq	14d48 <__assert_fail@plt+0x3d70>
   14d24:	mov	r6, r0
   14d28:	mov	r0, #0
   14d2c:	mov	r1, r5
   14d30:	mov	r2, r4
   14d34:	strb	r0, [r6, r4]
   14d38:	mov	r0, r6
   14d3c:	bl	10df8 <memcpy@plt>
   14d40:	mov	r0, r6
   14d44:	pop	{r4, r5, r6, sl, fp, pc}
   14d48:	bl	14d8c <__assert_fail@plt+0x3db4>
   14d4c:	push	{r4, r5, r6, sl, fp, lr}
   14d50:	add	fp, sp, #16
   14d54:	mov	r4, r0
   14d58:	bl	10ee8 <strlen@plt>
   14d5c:	add	r5, r0, #1
   14d60:	mov	r0, r5
   14d64:	bl	14e24 <__assert_fail@plt+0x3e4c>
   14d68:	cmp	r0, #0
   14d6c:	beq	14d88 <__assert_fail@plt+0x3db0>
   14d70:	mov	r1, r4
   14d74:	mov	r2, r5
   14d78:	mov	r6, r0
   14d7c:	bl	10df8 <memcpy@plt>
   14d80:	mov	r0, r6
   14d84:	pop	{r4, r5, r6, sl, fp, pc}
   14d88:	bl	14d8c <__assert_fail@plt+0x3db4>
   14d8c:	push	{fp, lr}
   14d90:	mov	fp, sp
   14d94:	movw	r0, #24812	; 0x60ec
   14d98:	movw	r1, #24252	; 0x5ebc
   14d9c:	mov	r2, #5
   14da0:	movt	r0, #2
   14da4:	movt	r1, #1
   14da8:	ldr	r4, [r0]
   14dac:	mov	r0, #0
   14db0:	bl	10e1c <dcgettext@plt>
   14db4:	movw	r2, #22525	; 0x57fd
   14db8:	mov	r3, r0
   14dbc:	mov	r0, r4
   14dc0:	mov	r1, #0
   14dc4:	movt	r2, #1
   14dc8:	bl	10e88 <error@plt>
   14dcc:	bl	10fc0 <abort@plt>
   14dd0:	clz	r2, r1
   14dd4:	clz	r3, r0
   14dd8:	lsr	r2, r2, #5
   14ddc:	lsr	r3, r3, #5
   14de0:	orrs	r2, r3, r2
   14de4:	movwne	r1, #1
   14de8:	movwne	r0, #1
   14dec:	cmp	r1, #0
   14df0:	beq	14e20 <__assert_fail@plt+0x3e48>
   14df4:	mvn	r2, #-2147483648	; 0x80000000
   14df8:	udiv	r2, r2, r1
   14dfc:	cmp	r2, r0
   14e00:	bcs	14e20 <__assert_fail@plt+0x3e48>
   14e04:	push	{fp, lr}
   14e08:	mov	fp, sp
   14e0c:	bl	10ef4 <__errno_location@plt>
   14e10:	mov	r1, #12
   14e14:	str	r1, [r0]
   14e18:	mov	r0, #0
   14e1c:	pop	{fp, pc}
   14e20:	b	10d98 <calloc@plt>
   14e24:	cmp	r0, #0
   14e28:	movweq	r0, #1
   14e2c:	cmn	r0, #1
   14e30:	ble	14e38 <__assert_fail@plt+0x3e60>
   14e34:	b	10e94 <malloc@plt>
   14e38:	push	{fp, lr}
   14e3c:	mov	fp, sp
   14e40:	bl	10ef4 <__errno_location@plt>
   14e44:	mov	r1, #12
   14e48:	str	r1, [r0]
   14e4c:	mov	r0, #0
   14e50:	pop	{fp, pc}
   14e54:	push	{fp, lr}
   14e58:	mov	fp, sp
   14e5c:	cmp	r0, #0
   14e60:	beq	14e7c <__assert_fail@plt+0x3ea4>
   14e64:	cmp	r1, #0
   14e68:	beq	14e88 <__assert_fail@plt+0x3eb0>
   14e6c:	cmn	r1, #1
   14e70:	ble	14e94 <__assert_fail@plt+0x3ebc>
   14e74:	pop	{fp, lr}
   14e78:	b	10e28 <realloc@plt>
   14e7c:	mov	r0, r1
   14e80:	pop	{fp, lr}
   14e84:	b	14e24 <__assert_fail@plt+0x3e4c>
   14e88:	bl	1233c <__assert_fail@plt+0x1364>
   14e8c:	mov	r0, #0
   14e90:	pop	{fp, pc}
   14e94:	bl	10ef4 <__errno_location@plt>
   14e98:	mov	r1, #12
   14e9c:	str	r1, [r0]
   14ea0:	mov	r0, #0
   14ea4:	pop	{fp, pc}
   14ea8:	push	{r4, r5, r6, sl, fp, lr}
   14eac:	add	fp, sp, #16
   14eb0:	mov	r4, r0
   14eb4:	bl	10e70 <__fpending@plt>
   14eb8:	ldr	r6, [r4]
   14ebc:	mov	r5, r0
   14ec0:	mov	r0, r4
   14ec4:	bl	12244 <__assert_fail@plt+0x126c>
   14ec8:	tst	r6, #32
   14ecc:	bne	14f04 <__assert_fail@plt+0x3f2c>
   14ed0:	cmp	r0, #0
   14ed4:	mov	r4, r0
   14ed8:	mvnne	r4, #0
   14edc:	cmp	r5, #0
   14ee0:	bne	14f10 <__assert_fail@plt+0x3f38>
   14ee4:	cmp	r0, #0
   14ee8:	beq	14f10 <__assert_fail@plt+0x3f38>
   14eec:	bl	10ef4 <__errno_location@plt>
   14ef0:	ldr	r0, [r0]
   14ef4:	subs	r4, r0, #9
   14ef8:	mvnne	r4, #0
   14efc:	mov	r0, r4
   14f00:	pop	{r4, r5, r6, sl, fp, pc}
   14f04:	mvn	r4, #0
   14f08:	cmp	r0, #0
   14f0c:	beq	14f18 <__assert_fail@plt+0x3f40>
   14f10:	mov	r0, r4
   14f14:	pop	{r4, r5, r6, sl, fp, pc}
   14f18:	bl	10ef4 <__errno_location@plt>
   14f1c:	mov	r1, #0
   14f20:	str	r1, [r0]
   14f24:	mov	r0, r4
   14f28:	pop	{r4, r5, r6, sl, fp, pc}
   14f2c:	push	{fp, lr}
   14f30:	mov	fp, sp
   14f34:	mov	r0, #14
   14f38:	bl	10f84 <nl_langinfo@plt>
   14f3c:	movw	r1, #22103	; 0x5657
   14f40:	cmp	r0, #0
   14f44:	movt	r1, #1
   14f48:	movne	r1, r0
   14f4c:	movw	r0, #24269	; 0x5ecd
   14f50:	ldrb	r2, [r1]
   14f54:	movt	r0, #1
   14f58:	cmp	r2, #0
   14f5c:	movne	r0, r1
   14f60:	pop	{fp, pc}
   14f64:	push	{r4, r5, r6, r7, fp, lr}
   14f68:	add	fp, sp, #16
   14f6c:	sub	sp, sp, #8
   14f70:	add	r5, sp, #4
   14f74:	cmp	r0, #0
   14f78:	mov	r7, r2
   14f7c:	mov	r4, r1
   14f80:	movne	r5, r0
   14f84:	mov	r0, r5
   14f88:	bl	10e7c <mbrtowc@plt>
   14f8c:	mov	r6, r0
   14f90:	cmp	r7, #0
   14f94:	beq	14fb8 <__assert_fail@plt+0x3fe0>
   14f98:	cmn	r6, #2
   14f9c:	bcc	14fb8 <__assert_fail@plt+0x3fe0>
   14fa0:	mov	r0, #0
   14fa4:	bl	15000 <__assert_fail@plt+0x4028>
   14fa8:	cmp	r0, #0
   14fac:	ldrbeq	r0, [r4]
   14fb0:	moveq	r6, #1
   14fb4:	streq	r0, [r5]
   14fb8:	mov	r0, r6
   14fbc:	sub	sp, fp, #16
   14fc0:	pop	{r4, r5, r6, r7, fp, pc}
   14fc4:	cmp	r2, #0
   14fc8:	beq	14ff8 <__assert_fail@plt+0x4020>
   14fcc:	mvn	r3, #0
   14fd0:	udiv	r3, r3, r2
   14fd4:	cmp	r3, r1
   14fd8:	bcs	14ff8 <__assert_fail@plt+0x4020>
   14fdc:	push	{fp, lr}
   14fe0:	mov	fp, sp
   14fe4:	bl	10ef4 <__errno_location@plt>
   14fe8:	mov	r1, #12
   14fec:	str	r1, [r0]
   14ff0:	mov	r0, #0
   14ff4:	pop	{fp, pc}
   14ff8:	mul	r1, r2, r1
   14ffc:	b	14e54 <__assert_fail@plt+0x3e7c>
   15000:	push	{r4, sl, fp, lr}
   15004:	add	fp, sp, #8
   15008:	sub	sp, sp, #264	; 0x108
   1500c:	add	r1, sp, #7
   15010:	movw	r2, #257	; 0x101
   15014:	bl	15064 <__assert_fail@plt+0x408c>
   15018:	mov	r4, #0
   1501c:	cmp	r0, #0
   15020:	bne	15058 <__assert_fail@plt+0x4080>
   15024:	movw	r1, #24275	; 0x5ed3
   15028:	add	r0, sp, #7
   1502c:	movt	r1, #1
   15030:	bl	10dbc <strcmp@plt>
   15034:	cmp	r0, #0
   15038:	beq	15058 <__assert_fail@plt+0x4080>
   1503c:	movw	r1, #24277	; 0x5ed5
   15040:	add	r0, sp, #7
   15044:	movt	r1, #1
   15048:	bl	10dbc <strcmp@plt>
   1504c:	mov	r4, r0
   15050:	cmp	r0, #0
   15054:	movwne	r4, #1
   15058:	mov	r0, r4
   1505c:	sub	sp, fp, #8
   15060:	pop	{r4, sl, fp, pc}
   15064:	push	{r4, r5, r6, r7, fp, lr}
   15068:	add	fp, sp, #16
   1506c:	mov	r4, r1
   15070:	mov	r1, #0
   15074:	mov	r6, r2
   15078:	bl	10f6c <setlocale@plt>
   1507c:	cmp	r0, #0
   15080:	beq	150b0 <__assert_fail@plt+0x40d8>
   15084:	mov	r7, r0
   15088:	bl	10ee8 <strlen@plt>
   1508c:	cmp	r0, r6
   15090:	bcs	150d0 <__assert_fail@plt+0x40f8>
   15094:	add	r2, r0, #1
   15098:	mov	r0, r4
   1509c:	mov	r1, r7
   150a0:	bl	10df8 <memcpy@plt>
   150a4:	mov	r5, #0
   150a8:	mov	r0, r5
   150ac:	pop	{r4, r5, r6, r7, fp, pc}
   150b0:	cmp	r6, #0
   150b4:	mov	r5, #22
   150b8:	movne	r0, #0
   150bc:	strbne	r0, [r4]
   150c0:	movne	r0, r5
   150c4:	popne	{r4, r5, r6, r7, fp, pc}
   150c8:	mov	r0, r5
   150cc:	pop	{r4, r5, r6, r7, fp, pc}
   150d0:	mov	r5, #34	; 0x22
   150d4:	cmp	r6, #0
   150d8:	beq	150f8 <__assert_fail@plt+0x4120>
   150dc:	sub	r6, r6, #1
   150e0:	mov	r0, r4
   150e4:	mov	r1, r7
   150e8:	mov	r2, r6
   150ec:	bl	10df8 <memcpy@plt>
   150f0:	mov	r0, #0
   150f4:	strb	r0, [r4, r6]
   150f8:	mov	r0, r5
   150fc:	pop	{r4, r5, r6, r7, fp, pc}
   15100:	mov	r1, #0
   15104:	b	10f6c <setlocale@plt>
   15108:	cmp	r3, #0
   1510c:	cmpeq	r2, #0
   15110:	bne	15128 <__assert_fail@plt+0x4150>
   15114:	cmp	r1, #0
   15118:	cmpeq	r0, #0
   1511c:	mvnne	r1, #0
   15120:	mvnne	r0, #0
   15124:	b	15144 <__assert_fail@plt+0x416c>
   15128:	sub	sp, sp, #8
   1512c:	push	{sp, lr}
   15130:	bl	15154 <__assert_fail@plt+0x417c>
   15134:	ldr	lr, [sp, #4]
   15138:	add	sp, sp, #8
   1513c:	pop	{r2, r3}
   15140:	bx	lr
   15144:	push	{r1, lr}
   15148:	mov	r0, #8
   1514c:	bl	10db0 <raise@plt>
   15150:	pop	{r1, pc}
   15154:	cmp	r1, r3
   15158:	cmpeq	r0, r2
   1515c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15160:	mov	r4, r0
   15164:	movcc	r0, #0
   15168:	mov	r5, r1
   1516c:	ldr	lr, [sp, #36]	; 0x24
   15170:	movcc	r1, r0
   15174:	bcc	15270 <__assert_fail@plt+0x4298>
   15178:	cmp	r3, #0
   1517c:	clzeq	ip, r2
   15180:	clzne	ip, r3
   15184:	addeq	ip, ip, #32
   15188:	cmp	r5, #0
   1518c:	clzeq	r1, r4
   15190:	addeq	r1, r1, #32
   15194:	clzne	r1, r5
   15198:	sub	ip, ip, r1
   1519c:	sub	sl, ip, #32
   151a0:	lsl	r9, r3, ip
   151a4:	rsb	fp, ip, #32
   151a8:	orr	r9, r9, r2, lsl sl
   151ac:	orr	r9, r9, r2, lsr fp
   151b0:	lsl	r8, r2, ip
   151b4:	cmp	r5, r9
   151b8:	cmpeq	r4, r8
   151bc:	movcc	r0, #0
   151c0:	movcc	r1, r0
   151c4:	bcc	151e0 <__assert_fail@plt+0x4208>
   151c8:	mov	r0, #1
   151cc:	subs	r4, r4, r8
   151d0:	lsl	r1, r0, sl
   151d4:	orr	r1, r1, r0, lsr fp
   151d8:	lsl	r0, r0, ip
   151dc:	sbc	r5, r5, r9
   151e0:	cmp	ip, #0
   151e4:	beq	15270 <__assert_fail@plt+0x4298>
   151e8:	lsr	r6, r8, #1
   151ec:	orr	r6, r6, r9, lsl #31
   151f0:	lsr	r7, r9, #1
   151f4:	mov	r2, ip
   151f8:	b	1521c <__assert_fail@plt+0x4244>
   151fc:	subs	r3, r4, r6
   15200:	sbc	r8, r5, r7
   15204:	adds	r3, r3, r3
   15208:	adc	r8, r8, r8
   1520c:	adds	r4, r3, #1
   15210:	adc	r5, r8, #0
   15214:	subs	r2, r2, #1
   15218:	beq	15238 <__assert_fail@plt+0x4260>
   1521c:	cmp	r5, r7
   15220:	cmpeq	r4, r6
   15224:	bcs	151fc <__assert_fail@plt+0x4224>
   15228:	adds	r4, r4, r4
   1522c:	adc	r5, r5, r5
   15230:	subs	r2, r2, #1
   15234:	bne	1521c <__assert_fail@plt+0x4244>
   15238:	lsr	r3, r4, ip
   1523c:	orr	r3, r3, r5, lsl fp
   15240:	lsr	r2, r5, ip
   15244:	orr	r3, r3, r5, lsr sl
   15248:	adds	r0, r0, r4
   1524c:	mov	r4, r3
   15250:	lsl	r3, r2, ip
   15254:	orr	r3, r3, r4, lsl sl
   15258:	lsl	ip, r4, ip
   1525c:	orr	r3, r3, r4, lsr fp
   15260:	adc	r1, r1, r5
   15264:	subs	r0, r0, ip
   15268:	mov	r5, r2
   1526c:	sbc	r1, r1, r3
   15270:	cmp	lr, #0
   15274:	strdne	r4, [lr]
   15278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1527c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15280:	mov	r7, r0
   15284:	ldr	r6, [pc, #72]	; 152d4 <__assert_fail@plt+0x42fc>
   15288:	ldr	r5, [pc, #72]	; 152d8 <__assert_fail@plt+0x4300>
   1528c:	add	r6, pc, r6
   15290:	add	r5, pc, r5
   15294:	sub	r6, r6, r5
   15298:	mov	r8, r1
   1529c:	mov	r9, r2
   152a0:	bl	10d78 <calloc@plt-0x20>
   152a4:	asrs	r6, r6, #2
   152a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   152ac:	mov	r4, #0
   152b0:	add	r4, r4, #1
   152b4:	ldr	r3, [r5], #4
   152b8:	mov	r2, r9
   152bc:	mov	r1, r8
   152c0:	mov	r0, r7
   152c4:	blx	r3
   152c8:	cmp	r6, r4
   152cc:	bne	152b0 <__assert_fail@plt+0x42d8>
   152d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152d4:	andeq	r0, r1, r8, ror ip
   152d8:	andeq	r0, r1, r0, ror ip
   152dc:	bx	lr
   152e0:	ldr	r3, [pc, #12]	; 152f4 <__assert_fail@plt+0x431c>
   152e4:	mov	r1, #0
   152e8:	add	r3, pc, r3
   152ec:	ldr	r2, [r3]
   152f0:	b	10f00 <__cxa_atexit@plt>
   152f4:	andeq	r0, r1, ip, ror #27

Disassembly of section .fini:

000152f8 <.fini>:
   152f8:	push	{r3, lr}
   152fc:	pop	{r3, pc}
