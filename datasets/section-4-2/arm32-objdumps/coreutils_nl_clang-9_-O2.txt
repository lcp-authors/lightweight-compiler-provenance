
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00011184 <.init>:
   11184:	push	{r3, lr}
   11188:	bl	114fc <__assert_fail@plt+0x4c>
   1118c:	pop	{r3, pc}

Disassembly of section .plt:

00011190 <pthread_mutex_unlock@plt-0x14>:
   11190:	push	{lr}		; (str lr, [sp, #-4]!)
   11194:	ldr	lr, [pc, #4]	; 111a0 <pthread_mutex_unlock@plt-0x4>
   11198:	add	lr, pc, lr
   1119c:	ldr	pc, [lr, #8]!
   111a0:	andeq	r9, r2, r0, ror #28

000111a4 <pthread_mutex_unlock@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #167936	; 0x29000
   111ac:	ldr	pc, [ip, #3680]!	; 0xe60

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #167936	; 0x29000
   111b8:	ldr	pc, [ip, #3672]!	; 0xe58

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #167936	; 0x29000
   111c4:	ldr	pc, [ip, #3664]!	; 0xe50

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #167936	; 0x29000
   111d0:	ldr	pc, [ip, #3656]!	; 0xe48

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #167936	; 0x29000
   111dc:	ldr	pc, [ip, #3648]!	; 0xe40

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #167936	; 0x29000
   111e8:	ldr	pc, [ip, #3640]!	; 0xe38

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #167936	; 0x29000
   111f4:	ldr	pc, [ip, #3632]!	; 0xe30

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #167936	; 0x29000
   11200:	ldr	pc, [ip, #3624]!	; 0xe28

00011204 <posix_fadvise64@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #167936	; 0x29000
   1120c:	ldr	pc, [ip, #3616]!	; 0xe20

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #167936	; 0x29000
   11218:	ldr	pc, [ip, #3608]!	; 0xe18

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #167936	; 0x29000
   11224:	ldr	pc, [ip, #3600]!	; 0xe10

00011228 <memmove@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #167936	; 0x29000
   11230:	ldr	pc, [ip, #3592]!	; 0xe08

00011234 <free@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #167936	; 0x29000
   1123c:	ldr	pc, [ip, #3584]!	; 0xe00

00011240 <pthread_mutex_lock@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #167936	; 0x29000
   11248:	ldr	pc, [ip, #3576]!	; 0xdf8

0001124c <_exit@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #167936	; 0x29000
   11254:	ldr	pc, [ip, #3568]!	; 0xdf0

00011258 <memcpy@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #167936	; 0x29000
   11260:	ldr	pc, [ip, #3560]!	; 0xde8

00011264 <pthread_mutex_init@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #167936	; 0x29000
   1126c:	ldr	pc, [ip, #3552]!	; 0xde0

00011270 <towlower@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #167936	; 0x29000
   11278:	ldr	pc, [ip, #3544]!	; 0xdd8

0001127c <mbsinit@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #167936	; 0x29000
   11284:	ldr	pc, [ip, #3536]!	; 0xdd0

00011288 <fwrite_unlocked@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #167936	; 0x29000
   11290:	ldr	pc, [ip, #3528]!	; 0xdc8

00011294 <stpcpy@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #167936	; 0x29000
   1129c:	ldr	pc, [ip, #3520]!	; 0xdc0

000112a0 <dcgettext@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #167936	; 0x29000
   112a8:	ldr	pc, [ip, #3512]!	; 0xdb8

000112ac <realloc@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #167936	; 0x29000
   112b4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112b8 <textdomain@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #167936	; 0x29000
   112c0:	ldr	pc, [ip, #3496]!	; 0xda8

000112c4 <iswprint@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #167936	; 0x29000
   112cc:	ldr	pc, [ip, #3488]!	; 0xda0

000112d0 <fwrite@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #167936	; 0x29000
   112d8:	ldr	pc, [ip, #3480]!	; 0xd98

000112dc <lseek64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #167936	; 0x29000
   112e4:	ldr	pc, [ip, #3472]!	; 0xd90

000112e8 <__ctype_get_mb_cur_max@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #167936	; 0x29000
   112f0:	ldr	pc, [ip, #3464]!	; 0xd88

000112f4 <__fpending@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #167936	; 0x29000
   112fc:	ldr	pc, [ip, #3456]!	; 0xd80

00011300 <mbrtowc@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #167936	; 0x29000
   11308:	ldr	pc, [ip, #3448]!	; 0xd78

0001130c <error@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #167936	; 0x29000
   11314:	ldr	pc, [ip, #3440]!	; 0xd70

00011318 <malloc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #167936	; 0x29000
   11320:	ldr	pc, [ip, #3432]!	; 0xd68

00011324 <__libc_start_main@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #167936	; 0x29000
   1132c:	ldr	pc, [ip, #3424]!	; 0xd60

00011330 <__freading@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #167936	; 0x29000
   11338:	ldr	pc, [ip, #3416]!	; 0xd58

0001133c <__ctype_tolower_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #167936	; 0x29000
   11344:	ldr	pc, [ip, #3408]!	; 0xd50

00011348 <__ctype_toupper_loc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #167936	; 0x29000
   11350:	ldr	pc, [ip, #3400]!	; 0xd48

00011354 <__gmon_start__@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #167936	; 0x29000
   1135c:	ldr	pc, [ip, #3392]!	; 0xd40

00011360 <getopt_long@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #167936	; 0x29000
   11368:	ldr	pc, [ip, #3384]!	; 0xd38

0001136c <__ctype_b_loc@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #167936	; 0x29000
   11374:	ldr	pc, [ip, #3376]!	; 0xd30

00011378 <exit@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #167936	; 0x29000
   11380:	ldr	pc, [ip, #3368]!	; 0xd28

00011384 <bcmp@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #167936	; 0x29000
   1138c:	ldr	pc, [ip, #3360]!	; 0xd20

00011390 <strlen@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #167936	; 0x29000
   11398:	ldr	pc, [ip, #3352]!	; 0xd18

0001139c <strchr@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #167936	; 0x29000
   113a4:	ldr	pc, [ip, #3344]!	; 0xd10

000113a8 <__errno_location@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #167936	; 0x29000
   113b0:	ldr	pc, [ip, #3336]!	; 0xd08

000113b4 <iswalnum@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #167936	; 0x29000
   113bc:	ldr	pc, [ip, #3328]!	; 0xd00

000113c0 <__cxa_atexit@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #167936	; 0x29000
   113c8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113cc <memset@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #167936	; 0x29000
   113d4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113d8 <btowc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #167936	; 0x29000
   113e0:	ldr	pc, [ip, #3304]!	; 0xce8

000113e4 <__printf_chk@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #167936	; 0x29000
   113ec:	ldr	pc, [ip, #3296]!	; 0xce0

000113f0 <fileno@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #167936	; 0x29000
   113f8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113fc <__fprintf_chk@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #167936	; 0x29000
   11404:	ldr	pc, [ip, #3280]!	; 0xcd0

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #167936	; 0x29000
   11410:	ldr	pc, [ip, #3272]!	; 0xcc8

00011414 <fseeko64@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #167936	; 0x29000
   1141c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011420 <__uflow@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #167936	; 0x29000
   11428:	ldr	pc, [ip, #3256]!	; 0xcb8

0001142c <__overflow@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #167936	; 0x29000
   11434:	ldr	pc, [ip, #3248]!	; 0xcb0

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #167936	; 0x29000
   11440:	ldr	pc, [ip, #3240]!	; 0xca8

00011444 <strrchr@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #167936	; 0x29000
   1144c:	ldr	pc, [ip, #3232]!	; 0xca0

00011450 <nl_langinfo@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #167936	; 0x29000
   11458:	ldr	pc, [ip, #3224]!	; 0xc98

0001145c <clearerr_unlocked@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #167936	; 0x29000
   11464:	ldr	pc, [ip, #3216]!	; 0xc90

00011468 <__strtoll_internal@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #167936	; 0x29000
   11470:	ldr	pc, [ip, #3208]!	; 0xc88

00011474 <fopen64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #167936	; 0x29000
   1147c:	ldr	pc, [ip, #3200]!	; 0xc80

00011480 <bindtextdomain@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #167936	; 0x29000
   11488:	ldr	pc, [ip, #3192]!	; 0xc78

0001148c <towupper@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #167936	; 0x29000
   11494:	ldr	pc, [ip, #3184]!	; 0xc70

00011498 <strncmp@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #167936	; 0x29000
   114a0:	ldr	pc, [ip, #3176]!	; 0xc68

000114a4 <abort@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #167936	; 0x29000
   114ac:	ldr	pc, [ip, #3168]!	; 0xc60

000114b0 <__assert_fail@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #167936	; 0x29000
   114b8:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114c0 <.text>:
   114c0:	mov	fp, #0
   114c4:	mov	lr, #0
   114c8:	pop	{r1}		; (ldr r1, [sp], #4)
   114cc:	mov	r2, sp
   114d0:	push	{r2}		; (str r2, [sp, #-4]!)
   114d4:	push	{r0}		; (str r0, [sp, #-4]!)
   114d8:	ldr	ip, [pc, #16]	; 114f0 <__assert_fail@plt+0x40>
   114dc:	push	{ip}		; (str ip, [sp, #-4]!)
   114e0:	ldr	r0, [pc, #12]	; 114f4 <__assert_fail@plt+0x44>
   114e4:	ldr	r3, [pc, #12]	; 114f8 <__assert_fail@plt+0x48>
   114e8:	bl	11324 <__libc_start_main@plt>
   114ec:	bl	114a4 <abort@plt>
   114f0:	ldrdeq	r9, [r2], -r4
   114f4:	ldrdeq	r1, [r1], -r4
   114f8:	andeq	r9, r2, r4, ror r6
   114fc:	ldr	r3, [pc, #20]	; 11518 <__assert_fail@plt+0x68>
   11500:	ldr	r2, [pc, #20]	; 1151c <__assert_fail@plt+0x6c>
   11504:	add	r3, pc, r3
   11508:	ldr	r2, [r3, r2]
   1150c:	cmp	r2, #0
   11510:	bxeq	lr
   11514:	b	11354 <__gmon_start__@plt>
   11518:	strdeq	r9, [r2], -r4
   1151c:	andeq	r0, r0, r4, lsl r1
   11520:	ldr	r0, [pc, #24]	; 11540 <__assert_fail@plt+0x90>
   11524:	ldr	r3, [pc, #24]	; 11544 <__assert_fail@plt+0x94>
   11528:	cmp	r3, r0
   1152c:	bxeq	lr
   11530:	ldr	r3, [pc, #16]	; 11548 <__assert_fail@plt+0x98>
   11534:	cmp	r3, #0
   11538:	bxeq	lr
   1153c:	bx	r3
   11540:	andeq	fp, r3, r8, lsr #3
   11544:	andeq	fp, r3, r8, lsr #3
   11548:	andeq	r0, r0, r0
   1154c:	ldr	r0, [pc, #36]	; 11578 <__assert_fail@plt+0xc8>
   11550:	ldr	r1, [pc, #36]	; 1157c <__assert_fail@plt+0xcc>
   11554:	sub	r1, r1, r0
   11558:	asr	r1, r1, #2
   1155c:	add	r1, r1, r1, lsr #31
   11560:	asrs	r1, r1, #1
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0xd0>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	fp, r3, r8, lsr #3
   1157c:	andeq	fp, r3, r8, lsr #3
   11580:	andeq	r0, r0, r0
   11584:	push	{r4, lr}
   11588:	ldr	r4, [pc, #24]	; 115a8 <__assert_fail@plt+0xf8>
   1158c:	ldrb	r3, [r4]
   11590:	cmp	r3, #0
   11594:	popne	{r4, pc}
   11598:	bl	11520 <__assert_fail@plt+0x70>
   1159c:	mov	r3, #1
   115a0:	strb	r3, [r4]
   115a4:	pop	{r4, pc}
   115a8:	andeq	fp, r3, ip, asr #3
   115ac:	b	1154c <__assert_fail@plt+0x9c>
   115b0:	push	{fp, lr}
   115b4:	mov	fp, sp
   115b8:	sub	sp, sp, #56	; 0x38
   115bc:	mov	r4, r0
   115c0:	cmp	r0, #0
   115c4:	bne	11890 <__assert_fail@plt+0x3e0>
   115c8:	movw	r1, #38691	; 0x9723
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	movt	r1, #2
   115d8:	bl	112a0 <dcgettext@plt>
   115dc:	mov	r1, r0
   115e0:	movw	r0, #46472	; 0xb588
   115e4:	movt	r0, #3
   115e8:	ldr	r2, [r0]
   115ec:	mov	r0, #1
   115f0:	bl	113e4 <__printf_chk@plt>
   115f4:	movw	r1, #38724	; 0x9744
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	movt	r1, #2
   11604:	bl	112a0 <dcgettext@plt>
   11608:	movw	r7, #45508	; 0xb1c4
   1160c:	movt	r7, #3
   11610:	ldr	r1, [r7]
   11614:	bl	111bc <fputs_unlocked@plt>
   11618:	movw	r1, #40718	; 0x9f0e
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	movt	r1, #2
   11628:	bl	112a0 <dcgettext@plt>
   1162c:	ldr	r1, [r7]
   11630:	bl	111bc <fputs_unlocked@plt>
   11634:	movw	r1, #40774	; 0x9f46
   11638:	mov	r0, #0
   1163c:	mov	r2, #5
   11640:	movt	r1, #2
   11644:	bl	112a0 <dcgettext@plt>
   11648:	ldr	r1, [r7]
   1164c:	bl	111bc <fputs_unlocked@plt>
   11650:	movw	r1, #38786	; 0x9782
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #2
   11660:	bl	112a0 <dcgettext@plt>
   11664:	ldr	r1, [r7]
   11668:	bl	111bc <fputs_unlocked@plt>
   1166c:	movw	r1, #38996	; 0x9854
   11670:	mov	r0, #0
   11674:	mov	r2, #5
   11678:	movt	r1, #2
   1167c:	bl	112a0 <dcgettext@plt>
   11680:	ldr	r1, [r7]
   11684:	bl	111bc <fputs_unlocked@plt>
   11688:	movw	r1, #39439	; 0x9a0f
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #2
   11698:	bl	112a0 <dcgettext@plt>
   1169c:	ldr	r1, [r7]
   116a0:	bl	111bc <fputs_unlocked@plt>
   116a4:	movw	r1, #39582	; 0x9a9e
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	movt	r1, #2
   116b4:	bl	112a0 <dcgettext@plt>
   116b8:	ldr	r1, [r7]
   116bc:	bl	111bc <fputs_unlocked@plt>
   116c0:	movw	r1, #39627	; 0x9acb
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	movt	r1, #2
   116d0:	bl	112a0 <dcgettext@plt>
   116d4:	ldr	r1, [r7]
   116d8:	bl	111bc <fputs_unlocked@plt>
   116dc:	movw	r1, #39681	; 0x9b01
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #2
   116ec:	bl	112a0 <dcgettext@plt>
   116f0:	ldr	r1, [r7]
   116f4:	bl	111bc <fputs_unlocked@plt>
   116f8:	movw	r1, #40004	; 0x9c44
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #2
   11708:	bl	112a0 <dcgettext@plt>
   1170c:	ldr	r1, [r7]
   11710:	bl	111bc <fputs_unlocked@plt>
   11714:	movw	r1, #40206	; 0x9d0e
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #2
   11724:	bl	112a0 <dcgettext@plt>
   11728:	ldr	r1, [r7]
   1172c:	bl	111bc <fputs_unlocked@plt>
   11730:	movw	r0, #41664	; 0xa2c0
   11734:	mov	r2, #48	; 0x30
   11738:	mov	r6, sp
   1173c:	movw	r5, #40353	; 0x9da1
   11740:	movt	r0, #2
   11744:	movt	r5, #2
   11748:	add	r1, r0, #32
   1174c:	add	r3, r0, #16
   11750:	vld1.64	{d18-d19}, [r0], r2
   11754:	vld1.64	{d16-d17}, [r1]
   11758:	vld1.64	{d20-d21}, [r3]
   1175c:	vldr	d22, [r0]
   11760:	add	r1, r6, #32
   11764:	add	r0, r6, #16
   11768:	vst1.64	{d16-d17}, [r1]
   1176c:	movw	r1, #40849	; 0x9f91
   11770:	vst1.64	{d20-d21}, [r0]
   11774:	mov	r0, r6
   11778:	movt	r1, #2
   1177c:	vst1.64	{d18-d19}, [r0], r2
   11780:	vstr	d22, [r0]
   11784:	mov	r0, r5
   11788:	bl	111f8 <strcmp@plt>
   1178c:	cmp	r0, #0
   11790:	ldrne	r1, [r6, #8]!
   11794:	cmpne	r1, #0
   11798:	bne	11784 <__assert_fail@plt+0x2d4>
   1179c:	movw	r1, #40944	; 0x9ff0
   117a0:	ldr	r6, [r6, #4]
   117a4:	mov	r0, #0
   117a8:	mov	r2, #5
   117ac:	movt	r1, #2
   117b0:	bl	112a0 <dcgettext@plt>
   117b4:	movw	r2, #40674	; 0x9ee2
   117b8:	movw	r3, #40967	; 0xa007
   117bc:	mov	r1, r0
   117c0:	mov	r0, #1
   117c4:	movt	r2, #2
   117c8:	movt	r3, #2
   117cc:	bl	113e4 <__printf_chk@plt>
   117d0:	cmp	r6, #0
   117d4:	mov	r0, #5
   117d8:	mov	r1, #0
   117dc:	moveq	r6, r5
   117e0:	bl	11438 <setlocale@plt>
   117e4:	cmp	r0, #0
   117e8:	beq	11820 <__assert_fail@plt+0x370>
   117ec:	movw	r1, #41007	; 0xa02f
   117f0:	mov	r2, #3
   117f4:	movt	r1, #2
   117f8:	bl	11498 <strncmp@plt>
   117fc:	cmp	r0, #0
   11800:	beq	11820 <__assert_fail@plt+0x370>
   11804:	movw	r1, #41011	; 0xa033
   11808:	mov	r0, #0
   1180c:	mov	r2, #5
   11810:	movt	r1, #2
   11814:	bl	112a0 <dcgettext@plt>
   11818:	ldr	r1, [r7]
   1181c:	bl	111bc <fputs_unlocked@plt>
   11820:	movw	r1, #41082	; 0xa07a
   11824:	mov	r0, #0
   11828:	mov	r2, #5
   1182c:	movt	r1, #2
   11830:	bl	112a0 <dcgettext@plt>
   11834:	movw	r2, #40967	; 0xa007
   11838:	mov	r1, r0
   1183c:	mov	r0, #1
   11840:	mov	r3, r5
   11844:	movt	r2, #2
   11848:	bl	113e4 <__printf_chk@plt>
   1184c:	movw	r1, #41109	; 0xa095
   11850:	mov	r0, #0
   11854:	mov	r2, #5
   11858:	movt	r1, #2
   1185c:	bl	112a0 <dcgettext@plt>
   11860:	mov	r1, r0
   11864:	movw	r0, #40877	; 0x9fad
   11868:	movw	r3, #41350	; 0xa186
   1186c:	cmp	r6, r5
   11870:	mov	r2, r6
   11874:	movt	r0, #2
   11878:	movt	r3, #2
   1187c:	moveq	r3, r0
   11880:	mov	r0, #1
   11884:	bl	113e4 <__printf_chk@plt>
   11888:	mov	r0, r4
   1188c:	bl	11378 <exit@plt>
   11890:	movw	r0, #45496	; 0xb1b8
   11894:	movw	r1, #38652	; 0x96fc
   11898:	mov	r2, #5
   1189c:	movt	r0, #3
   118a0:	movt	r1, #2
   118a4:	ldr	r5, [r0]
   118a8:	mov	r0, #0
   118ac:	bl	112a0 <dcgettext@plt>
   118b0:	mov	r2, r0
   118b4:	movw	r0, #46472	; 0xb588
   118b8:	mov	r1, #1
   118bc:	movt	r0, #3
   118c0:	ldr	r3, [r0]
   118c4:	mov	r0, r5
   118c8:	bl	113fc <__fprintf_chk@plt>
   118cc:	mov	r0, r4
   118d0:	bl	11378 <exit@plt>
   118d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d8:	add	fp, sp, #28
   118dc:	sub	sp, sp, #20
   118e0:	mov	r5, r0
   118e4:	ldr	r0, [r1]
   118e8:	mov	r9, r1
   118ec:	bl	12e04 <__assert_fail@plt+0x1954>
   118f0:	movw	r1, #41350	; 0xa186
   118f4:	mov	r0, #6
   118f8:	movt	r1, #2
   118fc:	bl	11438 <setlocale@plt>
   11900:	movw	r6, #40678	; 0x9ee6
   11904:	movw	r1, #40356	; 0x9da4
   11908:	movt	r6, #2
   1190c:	movt	r1, #2
   11910:	mov	r0, r6
   11914:	bl	11480 <bindtextdomain@plt>
   11918:	mov	r0, r6
   1191c:	bl	112b8 <textdomain@plt>
   11920:	movw	r0, #10564	; 0x2944
   11924:	movt	r0, #1
   11928:	bl	296d8 <__assert_fail@plt+0x18228>
   1192c:	movw	r0, #45520	; 0xb1d0
   11930:	movw	r7, #40380	; 0x9dbc
   11934:	mov	r1, #0
   11938:	mov	r4, #0
   1193c:	mov	r6, #1
   11940:	movt	r0, #3
   11944:	movt	r7, #2
   11948:	strb	r1, [r0]
   1194c:	b	119bc <__assert_fail@plt+0x50c>
   11950:	movw	r0, #45512	; 0xb1c8
   11954:	movw	r1, #40534	; 0x9e56
   11958:	mov	r2, #5
   1195c:	movt	r0, #3
   11960:	movt	r1, #2
   11964:	ldr	r7, [r0]
   11968:	mov	r0, #0
   1196c:	bl	112a0 <dcgettext@plt>
   11970:	mvn	r1, #0
   11974:	str	r0, [sp, #12]
   11978:	mov	r0, r7
   1197c:	movw	r7, #40380	; 0x9dbc
   11980:	mov	r2, #0
   11984:	mov	r3, #-2147483648	; 0x80000000
   11988:	str	r4, [sp, #16]
   1198c:	str	r1, [sp]
   11990:	mvn	r1, #-2147483648	; 0x80000000
   11994:	movt	r7, #2
   11998:	str	r1, [sp, #4]
   1199c:	movw	r1, #41350	; 0xa186
   119a0:	movt	r1, #2
   119a4:	str	r1, [sp, #8]
   119a8:	bl	276e0 <__assert_fail@plt+0x16230>
   119ac:	movw	r2, #45368	; 0xb138
   119b0:	movt	r2, #3
   119b4:	strd	r0, [r2]
   119b8:	mov	r6, sl
   119bc:	movw	r3, #41408	; 0xa1c0
   119c0:	mov	r0, r5
   119c4:	mov	r1, r9
   119c8:	mov	r2, r7
   119cc:	mov	sl, r6
   119d0:	str	r4, [sp]
   119d4:	movt	r3, #2
   119d8:	bl	11360 <getopt_long@plt>
   119dc:	add	r0, r0, #3
   119e0:	mov	r6, #0
   119e4:	cmp	r0, #122	; 0x7a
   119e8:	bhi	119bc <__assert_fail@plt+0x50c>
   119ec:	add	r1, pc, #4
   119f0:	mov	r6, #0
   119f4:	ldr	pc, [r1, r0, lsl #2]
   119f8:	andeq	r2, r1, r0, lsl #3
   119fc:	ldrdeq	r2, [r1], -r4
   11a00:	andeq	r1, r1, r8, lsr #31
   11a04:			; <UNDEFINED> instruction: 0x000119bc
   11a08:			; <UNDEFINED> instruction: 0x000119bc
   11a0c:			; <UNDEFINED> instruction: 0x000119bc
   11a10:			; <UNDEFINED> instruction: 0x000119bc
   11a14:			; <UNDEFINED> instruction: 0x000119bc
   11a18:			; <UNDEFINED> instruction: 0x000119bc
   11a1c:			; <UNDEFINED> instruction: 0x000119bc
   11a20:			; <UNDEFINED> instruction: 0x000119bc
   11a24:			; <UNDEFINED> instruction: 0x000119bc
   11a28:			; <UNDEFINED> instruction: 0x000119bc
   11a2c:			; <UNDEFINED> instruction: 0x000119bc
   11a30:			; <UNDEFINED> instruction: 0x000119bc
   11a34:			; <UNDEFINED> instruction: 0x000119bc
   11a38:			; <UNDEFINED> instruction: 0x000119bc
   11a3c:			; <UNDEFINED> instruction: 0x000119bc
   11a40:			; <UNDEFINED> instruction: 0x000119bc
   11a44:			; <UNDEFINED> instruction: 0x000119bc
   11a48:			; <UNDEFINED> instruction: 0x000119bc
   11a4c:			; <UNDEFINED> instruction: 0x000119bc
   11a50:			; <UNDEFINED> instruction: 0x000119bc
   11a54:			; <UNDEFINED> instruction: 0x000119bc
   11a58:			; <UNDEFINED> instruction: 0x000119bc
   11a5c:			; <UNDEFINED> instruction: 0x000119bc
   11a60:			; <UNDEFINED> instruction: 0x000119bc
   11a64:			; <UNDEFINED> instruction: 0x000119bc
   11a68:			; <UNDEFINED> instruction: 0x000119bc
   11a6c:			; <UNDEFINED> instruction: 0x000119bc
   11a70:			; <UNDEFINED> instruction: 0x000119bc
   11a74:			; <UNDEFINED> instruction: 0x000119bc
   11a78:			; <UNDEFINED> instruction: 0x000119bc
   11a7c:			; <UNDEFINED> instruction: 0x000119bc
   11a80:			; <UNDEFINED> instruction: 0x000119bc
   11a84:			; <UNDEFINED> instruction: 0x000119bc
   11a88:			; <UNDEFINED> instruction: 0x000119bc
   11a8c:			; <UNDEFINED> instruction: 0x000119bc
   11a90:			; <UNDEFINED> instruction: 0x000119bc
   11a94:			; <UNDEFINED> instruction: 0x000119bc
   11a98:			; <UNDEFINED> instruction: 0x000119bc
   11a9c:			; <UNDEFINED> instruction: 0x000119bc
   11aa0:			; <UNDEFINED> instruction: 0x000119bc
   11aa4:			; <UNDEFINED> instruction: 0x000119bc
   11aa8:			; <UNDEFINED> instruction: 0x000119bc
   11aac:			; <UNDEFINED> instruction: 0x000119bc
   11ab0:			; <UNDEFINED> instruction: 0x000119bc
   11ab4:			; <UNDEFINED> instruction: 0x000119bc
   11ab8:			; <UNDEFINED> instruction: 0x000119bc
   11abc:			; <UNDEFINED> instruction: 0x000119bc
   11ac0:			; <UNDEFINED> instruction: 0x000119bc
   11ac4:			; <UNDEFINED> instruction: 0x000119bc
   11ac8:			; <UNDEFINED> instruction: 0x000119bc
   11acc:			; <UNDEFINED> instruction: 0x000119bc
   11ad0:			; <UNDEFINED> instruction: 0x000119bc
   11ad4:			; <UNDEFINED> instruction: 0x000119bc
   11ad8:			; <UNDEFINED> instruction: 0x000119bc
   11adc:			; <UNDEFINED> instruction: 0x000119bc
   11ae0:			; <UNDEFINED> instruction: 0x000119bc
   11ae4:			; <UNDEFINED> instruction: 0x000119bc
   11ae8:			; <UNDEFINED> instruction: 0x000119bc
   11aec:			; <UNDEFINED> instruction: 0x000119bc
   11af0:			; <UNDEFINED> instruction: 0x000119bc
   11af4:			; <UNDEFINED> instruction: 0x000119bc
   11af8:			; <UNDEFINED> instruction: 0x000119bc
   11afc:			; <UNDEFINED> instruction: 0x000119bc
   11b00:			; <UNDEFINED> instruction: 0x000119bc
   11b04:			; <UNDEFINED> instruction: 0x000119bc
   11b08:			; <UNDEFINED> instruction: 0x000119bc
   11b0c:			; <UNDEFINED> instruction: 0x000119bc
   11b10:			; <UNDEFINED> instruction: 0x000119bc
   11b14:			; <UNDEFINED> instruction: 0x000119bc
   11b18:			; <UNDEFINED> instruction: 0x000119bc
   11b1c:			; <UNDEFINED> instruction: 0x000119bc
   11b20:			; <UNDEFINED> instruction: 0x000119bc
   11b24:			; <UNDEFINED> instruction: 0x000119bc
   11b28:			; <UNDEFINED> instruction: 0x000119bc
   11b2c:			; <UNDEFINED> instruction: 0x000119bc
   11b30:			; <UNDEFINED> instruction: 0x000119bc
   11b34:			; <UNDEFINED> instruction: 0x000119bc
   11b38:			; <UNDEFINED> instruction: 0x000119bc
   11b3c:			; <UNDEFINED> instruction: 0x000119bc
   11b40:			; <UNDEFINED> instruction: 0x000119bc
   11b44:			; <UNDEFINED> instruction: 0x000119bc
   11b48:			; <UNDEFINED> instruction: 0x000119bc
   11b4c:			; <UNDEFINED> instruction: 0x000119bc
   11b50:			; <UNDEFINED> instruction: 0x000119bc
   11b54:			; <UNDEFINED> instruction: 0x000119bc
   11b58:			; <UNDEFINED> instruction: 0x000119bc
   11b5c:			; <UNDEFINED> instruction: 0x000119bc
   11b60:			; <UNDEFINED> instruction: 0x000119bc
   11b64:			; <UNDEFINED> instruction: 0x000119bc
   11b68:			; <UNDEFINED> instruction: 0x000119bc
   11b6c:			; <UNDEFINED> instruction: 0x000119bc
   11b70:			; <UNDEFINED> instruction: 0x000119bc
   11b74:			; <UNDEFINED> instruction: 0x000119bc
   11b78:			; <UNDEFINED> instruction: 0x000119bc
   11b7c:			; <UNDEFINED> instruction: 0x000119bc
   11b80:			; <UNDEFINED> instruction: 0x000119bc
   11b84:			; <UNDEFINED> instruction: 0x000119bc
   11b88:			; <UNDEFINED> instruction: 0x000119bc
   11b8c:	andeq	r1, r1, r4, ror #23
   11b90:			; <UNDEFINED> instruction: 0x000119bc
   11b94:	strdeq	r1, [r1], -r4
   11b98:			; <UNDEFINED> instruction: 0x000119bc
   11b9c:	andeq	r1, r1, r0, ror #28
   11ba0:			; <UNDEFINED> instruction: 0x000119bc
   11ba4:	andeq	r1, r1, r8, lsr sp
   11ba8:	andeq	r1, r1, r0, asr r9
   11bac:			; <UNDEFINED> instruction: 0x000119bc
   11bb0:			; <UNDEFINED> instruction: 0x000119bc
   11bb4:	ldrdeq	r1, [r1], -r0
   11bb8:			; <UNDEFINED> instruction: 0x000119bc
   11bbc:	andeq	r1, r1, r8, lsr ip
   11bc0:			; <UNDEFINED> instruction: 0x000119bc
   11bc4:	andeq	r1, r1, r4, ror sp
   11bc8:			; <UNDEFINED> instruction: 0x000119bc
   11bcc:			; <UNDEFINED> instruction: 0x000119bc
   11bd0:	andeq	r1, r1, r0, lsr #24
   11bd4:			; <UNDEFINED> instruction: 0x000119bc
   11bd8:			; <UNDEFINED> instruction: 0x000119bc
   11bdc:	andeq	r1, r1, ip, lsl #27
   11be0:	ldrdeq	r1, [r1], -r4
   11be4:	movw	r0, #45348	; 0xb124
   11be8:	movw	r1, #45812	; 0xb2f4
   11bec:	movw	r2, #45844	; 0xb314
   11bf0:	movt	r0, #3
   11bf4:	movt	r1, #3
   11bf8:	movt	r2, #3
   11bfc:	bl	121fc <__assert_fail@plt+0xd4c>
   11c00:	cmp	r0, #0
   11c04:	mov	r6, sl
   11c08:	bne	119bc <__assert_fail@plt+0x50c>
   11c0c:	movw	r1, #40437	; 0x9df5
   11c10:	mov	r6, #0
   11c14:	mov	r0, #0
   11c18:	movt	r1, #2
   11c1c:	b	11e98 <__assert_fail@plt+0x9e8>
   11c20:	movw	r0, #45512	; 0xb1c8
   11c24:	movw	r1, #45384	; 0xb148
   11c28:	movt	r0, #3
   11c2c:	movt	r1, #3
   11c30:	ldr	r0, [r0]
   11c34:	b	11f3c <__assert_fail@plt+0xa8c>
   11c38:	movw	r0, #45512	; 0xb1c8
   11c3c:	movw	r1, #40631	; 0x9eb7
   11c40:	movt	r0, #3
   11c44:	movt	r1, #2
   11c48:	ldr	r7, [r0]
   11c4c:	mov	r0, r7
   11c50:	bl	111f8 <strcmp@plt>
   11c54:	cmp	r0, #0
   11c58:	beq	11f5c <__assert_fail@plt+0xaac>
   11c5c:	movw	r1, #40634	; 0x9eba
   11c60:	mov	r0, r7
   11c64:	movt	r1, #2
   11c68:	bl	111f8 <strcmp@plt>
   11c6c:	cmp	r0, #0
   11c70:	beq	11f70 <__assert_fail@plt+0xac0>
   11c74:	movw	r1, #40637	; 0x9ebd
   11c78:	mov	r0, r7
   11c7c:	movt	r1, #2
   11c80:	bl	111f8 <strcmp@plt>
   11c84:	cmp	r0, #0
   11c88:	beq	11f84 <__assert_fail@plt+0xad4>
   11c8c:	movw	r1, #40640	; 0x9ec0
   11c90:	mov	r0, #0
   11c94:	mov	r2, #5
   11c98:	mov	r6, #0
   11c9c:	movt	r1, #2
   11ca0:	bl	112a0 <dcgettext@plt>
   11ca4:	mov	r7, r0
   11ca8:	movw	r0, #45512	; 0xb1c8
   11cac:	movt	r0, #3
   11cb0:	ldr	r0, [r0]
   11cb4:	bl	14a58 <__assert_fail@plt+0x35a8>
   11cb8:	mov	r3, r0
   11cbc:	mov	r0, #0
   11cc0:	mov	r1, #0
   11cc4:	mov	r2, r7
   11cc8:	bl	1130c <error@plt>
   11ccc:	b	11f9c <__assert_fail@plt+0xaec>
   11cd0:	movw	r0, #45512	; 0xb1c8
   11cd4:	movw	r1, #40564	; 0x9e74
   11cd8:	mov	r2, #5
   11cdc:	movt	r0, #3
   11ce0:	movt	r1, #2
   11ce4:	ldr	r7, [r0]
   11ce8:	mov	r0, #0
   11cec:	bl	112a0 <dcgettext@plt>
   11cf0:	mvn	r1, #0
   11cf4:	str	r0, [sp, #12]
   11cf8:	mov	r0, r7
   11cfc:	movw	r7, #40380	; 0x9dbc
   11d00:	mov	r2, #1
   11d04:	mov	r3, #0
   11d08:	str	r4, [sp, #16]
   11d0c:	str	r1, [sp]
   11d10:	mvn	r1, #-2147483648	; 0x80000000
   11d14:	movt	r7, #2
   11d18:	str	r1, [sp, #4]
   11d1c:	movw	r1, #41350	; 0xa186
   11d20:	movt	r1, #2
   11d24:	str	r1, [sp, #8]
   11d28:	bl	276e0 <__assert_fail@plt+0x16230>
   11d2c:	movw	r2, #45376	; 0xb140
   11d30:	movt	r2, #3
   11d34:	b	119b4 <__assert_fail@plt+0x504>
   11d38:	movw	r0, #45344	; 0xb120
   11d3c:	movw	r1, #45524	; 0xb1d4
   11d40:	movw	r2, #45556	; 0xb1f4
   11d44:	movt	r0, #3
   11d48:	movt	r1, #3
   11d4c:	movt	r2, #3
   11d50:	bl	121fc <__assert_fail@plt+0xd4c>
   11d54:	cmp	r0, #0
   11d58:	mov	r6, sl
   11d5c:	bne	119bc <__assert_fail@plt+0x50c>
   11d60:	movw	r1, #40402	; 0x9dd2
   11d64:	mov	r6, #0
   11d68:	mov	r0, #0
   11d6c:	movt	r1, #2
   11d70:	b	11e98 <__assert_fail@plt+0x9e8>
   11d74:	movw	r1, #46388	; 0xb534
   11d78:	mov	r0, #1
   11d7c:	mov	r6, sl
   11d80:	movt	r1, #3
   11d84:	strb	r0, [r1]
   11d88:	b	119bc <__assert_fail@plt+0x50c>
   11d8c:	movw	r0, #45512	; 0xb1c8
   11d90:	movw	r1, #40505	; 0x9e39
   11d94:	mov	r2, #5
   11d98:	movt	r0, #3
   11d9c:	movt	r1, #2
   11da0:	ldr	r7, [r0]
   11da4:	mov	r0, #0
   11da8:	bl	112a0 <dcgettext@plt>
   11dac:	mvn	r1, #0
   11db0:	str	r0, [sp, #12]
   11db4:	mov	r0, r7
   11db8:	movw	r7, #40380	; 0x9dbc
   11dbc:	mov	r2, #0
   11dc0:	mov	r3, #-2147483648	; 0x80000000
   11dc4:	str	r4, [sp, #16]
   11dc8:	str	r1, [sp]
   11dcc:	mvn	r1, #-2147483648	; 0x80000000
   11dd0:	movt	r7, #2
   11dd4:	str	r1, [sp, #4]
   11dd8:	movw	r1, #41350	; 0xa186
   11ddc:	movt	r1, #2
   11de0:	str	r1, [sp, #8]
   11de4:	bl	276e0 <__assert_fail@plt+0x16230>
   11de8:	movw	r2, #45360	; 0xb130
   11dec:	movt	r2, #3
   11df0:	b	119b4 <__assert_fail@plt+0x504>
   11df4:	movw	r0, #45512	; 0xb1c8
   11df8:	movt	r0, #3
   11dfc:	ldr	r8, [r0]
   11e00:	mov	r0, r8
   11e04:	bl	11390 <strlen@plt>
   11e08:	sub	r0, r0, #1
   11e0c:	cmp	r0, #1
   11e10:	bhi	11f48 <__assert_fail@plt+0xa98>
   11e14:	ldrb	r0, [r8]
   11e18:	mov	r6, sl
   11e1c:	cmp	r0, #0
   11e20:	beq	119bc <__assert_fail@plt+0x50c>
   11e24:	movw	r0, #45396	; 0xb154
   11e28:	movw	r2, #45512	; 0xb1c8
   11e2c:	movt	r0, #3
   11e30:	movt	r2, #3
   11e34:	ldr	r0, [r0]
   11e38:	add	r1, r8, #1
   11e3c:	str	r1, [r2]
   11e40:	ldrb	r1, [r8]
   11e44:	strb	r1, [r0], #1
   11e48:	ldr	r8, [r2]
   11e4c:	ldrb	r1, [r8]
   11e50:	cmp	r1, #0
   11e54:	bne	11e38 <__assert_fail@plt+0x988>
   11e58:	mov	r6, sl
   11e5c:	b	119bc <__assert_fail@plt+0x50c>
   11e60:	movw	r0, #45352	; 0xb128
   11e64:	movw	r1, #46100	; 0xb414
   11e68:	movw	r2, #46132	; 0xb434
   11e6c:	movt	r0, #3
   11e70:	movt	r1, #3
   11e74:	movt	r2, #3
   11e78:	bl	121fc <__assert_fail@plt+0xd4c>
   11e7c:	cmp	r0, #0
   11e80:	mov	r6, sl
   11e84:	bne	119bc <__assert_fail@plt+0x50c>
   11e88:	movw	r1, #40470	; 0x9e16
   11e8c:	mov	r6, #0
   11e90:	mov	r0, #0
   11e94:	movt	r1, #2
   11e98:	mov	r2, #5
   11e9c:	bl	112a0 <dcgettext@plt>
   11ea0:	mov	r7, r0
   11ea4:	movw	r0, #45512	; 0xb1c8
   11ea8:	movt	r0, #3
   11eac:	ldr	r0, [r0]
   11eb0:	bl	14a58 <__assert_fail@plt+0x35a8>
   11eb4:	mov	r3, r0
   11eb8:	mov	r2, r7
   11ebc:	movw	r7, #40380	; 0x9dbc
   11ec0:	mov	r0, #0
   11ec4:	mov	r1, #0
   11ec8:	movt	r7, #2
   11ecc:	bl	1130c <error@plt>
   11ed0:	b	119bc <__assert_fail@plt+0x50c>
   11ed4:	movw	r0, #45512	; 0xb1c8
   11ed8:	movw	r1, #40599	; 0x9e97
   11edc:	mov	r2, #5
   11ee0:	movt	r0, #3
   11ee4:	movt	r1, #2
   11ee8:	ldr	r7, [r0]
   11eec:	mov	r0, #0
   11ef0:	bl	112a0 <dcgettext@plt>
   11ef4:	mvn	r1, #-2147483648	; 0x80000000
   11ef8:	mov	r2, #0
   11efc:	str	r0, [sp, #12]
   11f00:	mov	r0, r7
   11f04:	movw	r7, #40380	; 0x9dbc
   11f08:	mov	r3, #0
   11f0c:	mov	r4, #0
   11f10:	str	r1, [sp]
   11f14:	movw	r1, #41350	; 0xa186
   11f18:	str	r2, [sp, #4]
   11f1c:	str	r2, [sp, #16]
   11f20:	mov	r2, #1
   11f24:	movt	r7, #2
   11f28:	movt	r1, #2
   11f2c:	str	r1, [sp, #8]
   11f30:	bl	276e0 <__assert_fail@plt+0x16230>
   11f34:	movw	r1, #45388	; 0xb14c
   11f38:	movt	r1, #3
   11f3c:	str	r0, [r1]
   11f40:	mov	r6, sl
   11f44:	b	119bc <__assert_fail@plt+0x50c>
   11f48:	movw	r0, #45396	; 0xb154
   11f4c:	mov	r6, sl
   11f50:	movt	r0, #3
   11f54:	str	r8, [r0]
   11f58:	b	119bc <__assert_fail@plt+0x50c>
   11f5c:	movw	r0, #45392	; 0xb150
   11f60:	movw	r1, #41632	; 0xa2a0
   11f64:	movt	r0, #3
   11f68:	movt	r1, #2
   11f6c:	b	11f94 <__assert_fail@plt+0xae4>
   11f70:	movw	r0, #45392	; 0xb150
   11f74:	movw	r1, #41641	; 0xa2a9
   11f78:	movt	r0, #3
   11f7c:	movt	r1, #2
   11f80:	b	11f94 <__assert_fail@plt+0xae4>
   11f84:	movw	r0, #45392	; 0xb150
   11f88:	movw	r1, #41649	; 0xa2b1
   11f8c:	movt	r0, #3
   11f90:	movt	r1, #2
   11f94:	mov	r6, sl
   11f98:	str	r1, [r0]
   11f9c:	movw	r7, #40380	; 0x9dbc
   11fa0:	movt	r7, #2
   11fa4:	b	119bc <__assert_fail@plt+0x50c>
   11fa8:	tst	sl, #1
   11fac:	beq	121dc <__assert_fail@plt+0xd2c>
   11fb0:	movw	r0, #45396	; 0xb154
   11fb4:	movt	r0, #3
   11fb8:	mov	r4, r0
   11fbc:	ldr	r0, [r0]
   11fc0:	bl	11390 <strlen@plt>
   11fc4:	movw	r1, #46392	; 0xb538
   11fc8:	mov	r6, r0
   11fcc:	add	r0, r0, r0, lsl #1
   11fd0:	movt	r1, #3
   11fd4:	str	r0, [r1]
   11fd8:	add	r0, r0, #1
   11fdc:	bl	27058 <__assert_fail@plt+0x15ba8>
   11fe0:	ldr	r1, [r4]
   11fe4:	movw	r7, #46396	; 0xb53c
   11fe8:	movt	r7, #3
   11fec:	str	r0, [r7]
   11ff0:	bl	11294 <stpcpy@plt>
   11ff4:	ldr	r1, [r4]
   11ff8:	bl	11294 <stpcpy@plt>
   11ffc:	ldr	r1, [r4]
   12000:	bl	11294 <stpcpy@plt>
   12004:	movw	r1, #46400	; 0xb540
   12008:	lsl	r0, r6, #1
   1200c:	movt	r1, #3
   12010:	str	r0, [r1]
   12014:	movw	r0, #46408	; 0xb548
   12018:	movw	r1, #46404	; 0xb544
   1201c:	movt	r0, #3
   12020:	movt	r1, #3
   12024:	str	r6, [r0]
   12028:	ldr	r0, [r7]
   1202c:	add	r0, r0, r6
   12030:	str	r0, [r1]
   12034:	movw	r1, #46412	; 0xb54c
   12038:	add	r0, r0, r6
   1203c:	movt	r1, #3
   12040:	str	r0, [r1]
   12044:	movw	r0, #46416	; 0xb550
   12048:	movt	r0, #3
   1204c:	bl	12c0c <__assert_fail@plt+0x175c>
   12050:	movw	r0, #45384	; 0xb148
   12054:	movt	r0, #3
   12058:	ldr	r0, [r0]
   1205c:	bl	11390 <strlen@plt>
   12060:	mov	r6, r0
   12064:	movw	r0, #45388	; 0xb14c
   12068:	movt	r0, #3
   1206c:	mov	r4, r0
   12070:	ldr	r0, [r0]
   12074:	add	r0, r6, r0
   12078:	add	r0, r0, #1
   1207c:	bl	27058 <__assert_fail@plt+0x15ba8>
   12080:	mov	r7, r0
   12084:	movw	r0, #46428	; 0xb55c
   12088:	mov	r1, #32
   1208c:	movt	r0, #3
   12090:	str	r7, [r0]
   12094:	ldr	r0, [r4]
   12098:	add	r6, r0, r6
   1209c:	mov	r0, r7
   120a0:	mov	r2, r6
   120a4:	bl	113cc <memset@plt>
   120a8:	mov	r0, #0
   120ac:	movw	r1, #45812	; 0xb2f4
   120b0:	movw	r2, #46432	; 0xb560
   120b4:	strb	r0, [r7, r6]
   120b8:	movw	r0, #46444	; 0xb56c
   120bc:	movt	r1, #3
   120c0:	movw	r7, #45488	; 0xb1b0
   120c4:	movt	r2, #3
   120c8:	movt	r0, #3
   120cc:	movt	r7, #3
   120d0:	str	r1, [r0]
   120d4:	movw	r0, #45348	; 0xb124
   120d8:	movw	r1, #46440	; 0xb568
   120dc:	movt	r0, #3
   120e0:	movt	r1, #3
   120e4:	ldr	r0, [r0]
   120e8:	str	r0, [r1]
   120ec:	movw	r0, #45360	; 0xb130
   120f0:	movt	r0, #3
   120f4:	ldrd	r0, [r0]
   120f8:	strd	r0, [r2]
   120fc:	ldr	r1, [r7]
   12100:	cmp	r1, r5
   12104:	bne	1211c <__assert_fail@plt+0xc6c>
   12108:	movw	r0, #41820	; 0xa35c
   1210c:	movt	r0, #2
   12110:	bl	12300 <__assert_fail@plt+0xe50>
   12114:	mov	r6, r0
   12118:	b	12148 <__assert_fail@plt+0xc98>
   1211c:	mov	r6, #1
   12120:	bge	12148 <__assert_fail@plt+0xc98>
   12124:	mov	r6, #1
   12128:	ldr	r0, [r9, r1, lsl #2]
   1212c:	bl	12300 <__assert_fail@plt+0xe50>
   12130:	ldr	r1, [r7]
   12134:	and	r6, r6, r0
   12138:	add	r1, r1, #1
   1213c:	cmp	r1, r5
   12140:	str	r1, [r7]
   12144:	blt	12128 <__assert_fail@plt+0xc78>
   12148:	movw	r0, #45520	; 0xb1d0
   1214c:	movt	r0, #3
   12150:	ldrb	r0, [r0]
   12154:	cmp	r0, #1
   12158:	bne	12174 <__assert_fail@plt+0xcc4>
   1215c:	movw	r0, #45504	; 0xb1c0
   12160:	movt	r0, #3
   12164:	ldr	r0, [r0]
   12168:	bl	12a6c <__assert_fail@plt+0x15bc>
   1216c:	cmn	r0, #1
   12170:	beq	121e4 <__assert_fail@plt+0xd34>
   12174:	eor	r0, r6, #1
   12178:	sub	sp, fp, #28
   1217c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12180:	movw	r0, #45404	; 0xb15c
   12184:	movw	r2, #40702	; 0x9efe
   12188:	mov	r1, #0
   1218c:	movw	r7, #40688	; 0x9ef0
   12190:	movt	r0, #3
   12194:	movt	r2, #2
   12198:	str	r1, [sp, #8]
   1219c:	movw	r1, #40353	; 0x9da1
   121a0:	movt	r7, #2
   121a4:	movt	r1, #2
   121a8:	ldr	r3, [r0]
   121ac:	movw	r0, #45508	; 0xb1c4
   121b0:	str	r2, [sp, #4]
   121b4:	movw	r2, #40674	; 0x9ee2
   121b8:	str	r7, [sp]
   121bc:	movt	r0, #3
   121c0:	movt	r2, #2
   121c4:	ldr	r0, [r0]
   121c8:	bl	26e24 <__assert_fail@plt+0x15974>
   121cc:	mov	r0, #0
   121d0:	bl	11378 <exit@plt>
   121d4:	mov	r0, #0
   121d8:	bl	115b0 <__assert_fail@plt+0x100>
   121dc:	mov	r0, #1
   121e0:	bl	115b0 <__assert_fail@plt+0x100>
   121e4:	bl	113a8 <__errno_location@plt>
   121e8:	ldr	r1, [r0]
   121ec:	movw	r2, #41820	; 0xa35c
   121f0:	mov	r0, #1
   121f4:	movt	r2, #2
   121f8:	bl	1130c <error@plt>
   121fc:	push	{r4, r5, r6, sl, fp, lr}
   12200:	add	fp, sp, #16
   12204:	movw	ip, #45512	; 0xb1c8
   12208:	mov	r6, r1
   1220c:	mov	r1, r0
   12210:	movt	ip, #3
   12214:	ldr	r5, [ip]
   12218:	ldrb	r0, [r5]
   1221c:	sub	r3, r0, #97	; 0x61
   12220:	mov	r0, #0
   12224:	cmp	r3, #19
   12228:	bhi	1228c <__assert_fail@plt+0xddc>
   1222c:	add	r4, pc, #0
   12230:	ldr	pc, [r4, r3, lsl #2]
   12234:	andeq	r2, r1, r4, lsl #5
   12238:	andeq	r2, r1, ip, lsl #5
   1223c:	andeq	r2, r1, ip, lsl #5
   12240:	andeq	r2, r1, ip, lsl #5
   12244:	andeq	r2, r1, ip, lsl #5
   12248:	andeq	r2, r1, ip, lsl #5
   1224c:	andeq	r2, r1, ip, lsl #5
   12250:	andeq	r2, r1, ip, lsl #5
   12254:	andeq	r2, r1, ip, lsl #5
   12258:	andeq	r2, r1, ip, lsl #5
   1225c:	andeq	r2, r1, ip, lsl #5
   12260:	andeq	r2, r1, ip, lsl #5
   12264:	andeq	r2, r1, ip, lsl #5
   12268:	andeq	r2, r1, r4, lsl #5
   1226c:	andeq	r2, r1, ip, lsl #5
   12270:	muleq	r1, r0, r2
   12274:	andeq	r2, r1, ip, lsl #5
   12278:	andeq	r2, r1, ip, lsl #5
   1227c:	andeq	r2, r1, ip, lsl #5
   12280:	andeq	r2, r1, r4, lsl #5
   12284:	mov	r0, #1
   12288:	str	r5, [r1]
   1228c:	pop	{r4, r5, r6, sl, fp, pc}
   12290:	add	r0, r5, #1
   12294:	str	r0, [ip]
   12298:	mov	r0, #0
   1229c:	str	r5, [r1]
   122a0:	str	r2, [r6, #16]
   122a4:	movw	r1, #710	; 0x2c6
   122a8:	str	r0, [r6, #20]
   122ac:	str	r0, [r6]
   122b0:	str	r0, [r6, #4]
   122b4:	movw	r0, #46784	; 0xb6c0
   122b8:	ldr	r5, [ip]
   122bc:	movt	r0, #3
   122c0:	str	r1, [r0]
   122c4:	mov	r0, r5
   122c8:	bl	11390 <strlen@plt>
   122cc:	mov	r1, r0
   122d0:	mov	r0, r5
   122d4:	mov	r2, r6
   122d8:	bl	14bb0 <__assert_fail@plt+0x3700>
   122dc:	mov	r3, r0
   122e0:	mov	r0, #1
   122e4:	cmp	r3, #0
   122e8:	popeq	{r4, r5, r6, sl, fp, pc}
   122ec:	movw	r2, #40434	; 0x9df2
   122f0:	mov	r0, #1
   122f4:	mov	r1, #0
   122f8:	movt	r2, #2
   122fc:	bl	1130c <error@plt>
   12300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12304:	add	fp, sp, #28
   12308:	sub	sp, sp, #20
   1230c:	movw	r1, #41820	; 0xa35c
   12310:	mov	r7, r0
   12314:	movt	r1, #2
   12318:	bl	111f8 <strcmp@plt>
   1231c:	cmp	r0, #0
   12320:	beq	1234c <__assert_fail@plt+0xe9c>
   12324:	movw	r1, #40532	; 0x9e54
   12328:	mov	r0, r7
   1232c:	movt	r1, #2
   12330:	bl	11474 <fopen64@plt>
   12334:	mov	r5, r0
   12338:	cmp	r0, #0
   1233c:	bne	12368 <__assert_fail@plt+0xeb8>
   12340:	bl	113a8 <__errno_location@plt>
   12344:	ldr	r6, [r0]
   12348:	b	12884 <__assert_fail@plt+0x13d4>
   1234c:	movw	r0, #45520	; 0xb1d0
   12350:	mov	r1, #1
   12354:	movt	r0, #3
   12358:	strb	r1, [r0]
   1235c:	movw	r0, #45504	; 0xb1c0
   12360:	movt	r0, #3
   12364:	ldr	r5, [r0]
   12368:	mov	r0, r5
   1236c:	mov	r1, #2
   12370:	str	r7, [sp, #16]
   12374:	bl	12a30 <__assert_fail@plt+0x1580>
   12378:	movw	r6, #46416	; 0xb550
   1237c:	mov	r1, r5
   12380:	movt	r6, #3
   12384:	mov	r0, r6
   12388:	bl	12c20 <__assert_fail@plt+0x1770>
   1238c:	cmp	r0, #0
   12390:	beq	12830 <__assert_fail@plt+0x1380>
   12394:	movw	r8, #45508	; 0xb1c4
   12398:	movt	r8, #3
   1239c:	ldr	sl, [r6, #4]
   123a0:	sub	r7, sl, #1
   123a4:	cmp	r7, #2
   123a8:	bcc	123e4 <__assert_fail@plt+0xf34>
   123ac:	movw	r0, #46408	; 0xb548
   123b0:	movt	r0, #3
   123b4:	ldr	r9, [r0]
   123b8:	cmp	r9, #2
   123bc:	bcc	123e4 <__assert_fail@plt+0xf34>
   123c0:	movw	r0, #45396	; 0xb154
   123c4:	ldr	r4, [r6, #8]
   123c8:	mov	r2, #2
   123cc:	movt	r0, #3
   123d0:	ldr	r1, [r0]
   123d4:	mov	r0, r4
   123d8:	bl	11384 <bcmp@plt>
   123dc:	cmp	r0, #0
   123e0:	beq	1257c <__assert_fail@plt+0x10cc>
   123e4:	movw	r0, #46440	; 0xb568
   123e8:	movt	r0, #3
   123ec:	ldr	r0, [r0]
   123f0:	ldrb	r0, [r0]
   123f4:	sub	r0, r0, #97	; 0x61
   123f8:	cmp	r0, #19
   123fc:	bhi	12748 <__assert_fail@plt+0x1298>
   12400:	add	r1, pc, #0
   12404:	ldr	pc, [r1, r0, lsl #2]
   12408:	andeq	r2, r1, r8, asr r4
   1240c:	andeq	r2, r1, r8, asr #14
   12410:	andeq	r2, r1, r8, asr #14
   12414:	andeq	r2, r1, r8, asr #14
   12418:	andeq	r2, r1, r8, asr #14
   1241c:	andeq	r2, r1, r8, asr #14
   12420:	andeq	r2, r1, r8, asr #14
   12424:	andeq	r2, r1, r8, asr #14
   12428:	andeq	r2, r1, r8, asr #14
   1242c:	andeq	r2, r1, r8, asr #14
   12430:	andeq	r2, r1, r8, asr #14
   12434:	andeq	r2, r1, r8, asr #14
   12438:	andeq	r2, r1, r8, asr #14
   1243c:	andeq	r2, r1, r4, lsr r7
   12440:	andeq	r2, r1, r8, asr #14
   12444:	andeq	r2, r1, ip, lsr #12
   12448:	andeq	r2, r1, r8, asr #14
   1244c:	andeq	r2, r1, r8, asr #14
   12450:	andeq	r2, r1, r8, asr #14
   12454:	andeq	r2, r1, r8, ror #12
   12458:	movw	r0, #45376	; 0xb140
   1245c:	movt	r0, #3
   12460:	ldrd	r0, [r0]
   12464:	subs	r2, r0, #2
   12468:	sbcs	r2, r1, #0
   1246c:	blt	12670 <__assert_fail@plt+0x11c0>
   12470:	cmp	sl, #1
   12474:	bgt	124a4 <__assert_fail@plt+0xff4>
   12478:	movw	r2, #46456	; 0xb578
   1247c:	movt	r2, #3
   12480:	mov	r7, r2
   12484:	ldrd	r2, [r2]
   12488:	adds	r2, r2, #1
   1248c:	adc	r3, r3, #0
   12490:	eor	r0, r2, r0
   12494:	eor	r1, r3, r1
   12498:	strd	r2, [r7]
   1249c:	orrs	r0, r0, r1
   124a0:	bne	12734 <__assert_fail@plt+0x1284>
   124a4:	movw	r0, #46448	; 0xb570
   124a8:	movt	r0, #3
   124ac:	ldrb	r0, [r0]
   124b0:	cmp	r0, #1
   124b4:	beq	128d4 <__assert_fail@plt+0x1424>
   124b8:	movw	r0, #45388	; 0xb14c
   124bc:	movw	r7, #45384	; 0xb148
   124c0:	movt	r0, #3
   124c4:	movt	r7, #3
   124c8:	ldr	r2, [r0]
   124cc:	movw	r0, #45392	; 0xb150
   124d0:	ldr	r7, [r7]
   124d4:	movt	r0, #3
   124d8:	ldr	r1, [r0]
   124dc:	movw	r0, #46432	; 0xb560
   124e0:	movt	r0, #3
   124e4:	mov	r4, r0
   124e8:	ldm	r0, {r0, r3}
   124ec:	stm	sp, {r0, r3, r7}
   124f0:	mov	r0, #1
   124f4:	bl	113e4 <__printf_chk@plt>
   124f8:	movw	r0, #45368	; 0xb138
   124fc:	ldrd	r2, [r4]
   12500:	movt	r0, #3
   12504:	ldrd	r0, [r0]
   12508:	adds	r0, r2, r0
   1250c:	mov	r2, #0
   12510:	adc	r7, r3, r1
   12514:	cmn	r3, #1
   12518:	stm	r4, {r0, r7}
   1251c:	mov	r0, #0
   12520:	movwgt	r0, #1
   12524:	cmn	r7, #1
   12528:	movwgt	r2, #1
   1252c:	subs	r2, r0, r2
   12530:	movwne	r2, #1
   12534:	cmn	r1, #1
   12538:	mov	r1, #0
   1253c:	movwgt	r1, #1
   12540:	sub	r0, r0, r1
   12544:	clz	r0, r0
   12548:	lsr	r0, r0, #5
   1254c:	and	r0, r0, r2
   12550:	cmp	r0, #1
   12554:	movweq	r1, #46448	; 0xb570
   12558:	moveq	r0, #1
   1255c:	movteq	r1, #3
   12560:	strbeq	r0, [r1]
   12564:	movw	r1, #46456	; 0xb578
   12568:	mov	r0, #0
   1256c:	movt	r1, #3
   12570:	str	r0, [r1]
   12574:	str	r0, [r1, #4]
   12578:	b	12748 <__assert_fail@plt+0x1298>
   1257c:	movw	r0, #46392	; 0xb538
   12580:	movt	r0, #3
   12584:	ldr	r0, [r0]
   12588:	cmp	r7, r0
   1258c:	bne	125b0 <__assert_fail@plt+0x1100>
   12590:	movw	r0, #46396	; 0xb53c
   12594:	mov	r2, r7
   12598:	movt	r0, #3
   1259c:	ldr	r1, [r0]
   125a0:	mov	r0, r4
   125a4:	bl	11384 <bcmp@plt>
   125a8:	cmp	r0, #0
   125ac:	beq	12774 <__assert_fail@plt+0x12c4>
   125b0:	movw	r0, #46400	; 0xb540
   125b4:	movt	r0, #3
   125b8:	ldr	r0, [r0]
   125bc:	cmp	r7, r0
   125c0:	bne	125e4 <__assert_fail@plt+0x1134>
   125c4:	movw	r0, #46404	; 0xb544
   125c8:	mov	r2, r7
   125cc:	movt	r0, #3
   125d0:	ldr	r1, [r0]
   125d4:	mov	r0, r4
   125d8:	bl	11384 <bcmp@plt>
   125dc:	cmp	r0, #0
   125e0:	beq	12794 <__assert_fail@plt+0x12e4>
   125e4:	cmp	r7, r9
   125e8:	bne	123e4 <__assert_fail@plt+0xf34>
   125ec:	movw	r0, #46412	; 0xb54c
   125f0:	mov	r2, r7
   125f4:	movt	r0, #3
   125f8:	ldr	r1, [r0]
   125fc:	mov	r0, r4
   12600:	bl	11384 <bcmp@plt>
   12604:	cmp	r0, #0
   12608:	bne	123e4 <__assert_fail@plt+0xf34>
   1260c:	movw	r0, #46444	; 0xb56c
   12610:	movw	r1, #46100	; 0xb414
   12614:	movt	r0, #3
   12618:	movt	r1, #3
   1261c:	str	r1, [r0]
   12620:	movw	r0, #45352	; 0xb128
   12624:	movt	r0, #3
   12628:	b	127b0 <__assert_fail@plt+0x1300>
   1262c:	movw	r0, #46444	; 0xb56c
   12630:	ldr	r1, [r6, #8]
   12634:	mov	r2, #0
   12638:	mov	r3, #0
   1263c:	str	r7, [sp]
   12640:	movt	r0, #3
   12644:	str	r2, [sp, #4]
   12648:	mov	r2, r7
   1264c:	ldr	r0, [r0]
   12650:	bl	19d0c <__assert_fail@plt+0x885c>
   12654:	cmn	r0, #1
   12658:	beq	12734 <__assert_fail@plt+0x1284>
   1265c:	cmn	r0, #2
   12660:	bne	12670 <__assert_fail@plt+0x11c0>
   12664:	b	128f8 <__assert_fail@plt+0x1448>
   12668:	cmp	sl, #2
   1266c:	blt	12734 <__assert_fail@plt+0x1284>
   12670:	movw	r0, #46448	; 0xb570
   12674:	movt	r0, #3
   12678:	ldrb	r0, [r0]
   1267c:	cmp	r0, #1
   12680:	beq	128d4 <__assert_fail@plt+0x1424>
   12684:	movw	r0, #45388	; 0xb14c
   12688:	movw	r7, #45384	; 0xb148
   1268c:	movt	r0, #3
   12690:	movt	r7, #3
   12694:	ldr	r2, [r0]
   12698:	movw	r0, #45392	; 0xb150
   1269c:	ldr	r7, [r7]
   126a0:	movt	r0, #3
   126a4:	ldr	r1, [r0]
   126a8:	movw	r0, #46432	; 0xb560
   126ac:	movt	r0, #3
   126b0:	mov	r4, r0
   126b4:	ldm	r0, {r0, r3}
   126b8:	stm	sp, {r0, r3, r7}
   126bc:	mov	r0, #1
   126c0:	bl	113e4 <__printf_chk@plt>
   126c4:	movw	r0, #45368	; 0xb138
   126c8:	ldrd	r2, [r4]
   126cc:	movt	r0, #3
   126d0:	ldrd	r0, [r0]
   126d4:	adds	r0, r2, r0
   126d8:	mov	r2, #0
   126dc:	adc	r7, r3, r1
   126e0:	cmn	r3, #1
   126e4:	stm	r4, {r0, r7}
   126e8:	mov	r0, #0
   126ec:	movwgt	r0, #1
   126f0:	cmn	r7, #1
   126f4:	movwgt	r2, #1
   126f8:	subs	r2, r0, r2
   126fc:	movwne	r2, #1
   12700:	cmn	r1, #1
   12704:	mov	r1, #0
   12708:	movwgt	r1, #1
   1270c:	sub	r0, r0, r1
   12710:	clz	r0, r0
   12714:	lsr	r0, r0, #5
   12718:	and	r0, r0, r2
   1271c:	cmp	r0, #1
   12720:	movweq	r1, #46448	; 0xb570
   12724:	moveq	r0, #1
   12728:	movteq	r1, #3
   1272c:	strbeq	r0, [r1]
   12730:	b	12748 <__assert_fail@plt+0x1298>
   12734:	movw	r0, #46428	; 0xb55c
   12738:	ldr	r1, [r8]
   1273c:	movt	r0, #3
   12740:	ldr	r0, [r0]
   12744:	bl	111bc <fputs_unlocked@plt>
   12748:	ldr	r3, [r8]
   1274c:	ldr	r2, [r6, #4]
   12750:	ldr	r0, [r6, #8]
   12754:	mov	r1, #1
   12758:	bl	11288 <fwrite_unlocked@plt>
   1275c:	mov	r0, r6
   12760:	mov	r1, r5
   12764:	bl	12c20 <__assert_fail@plt+0x1770>
   12768:	cmp	r0, #0
   1276c:	bne	1239c <__assert_fail@plt+0xeec>
   12770:	b	12830 <__assert_fail@plt+0x1380>
   12774:	movw	r0, #46444	; 0xb56c
   12778:	movw	r1, #45524	; 0xb1d4
   1277c:	movt	r0, #3
   12780:	movt	r1, #3
   12784:	str	r1, [r0]
   12788:	movw	r0, #45344	; 0xb120
   1278c:	movt	r0, #3
   12790:	b	127b0 <__assert_fail@plt+0x1300>
   12794:	movw	r0, #46444	; 0xb56c
   12798:	movw	r1, #45812	; 0xb2f4
   1279c:	movt	r0, #3
   127a0:	movt	r1, #3
   127a4:	str	r1, [r0]
   127a8:	movw	r0, #45348	; 0xb124
   127ac:	movt	r0, #3
   127b0:	ldr	r0, [r0]
   127b4:	movw	r1, #46440	; 0xb568
   127b8:	movt	r1, #3
   127bc:	str	r0, [r1]
   127c0:	movw	r0, #46388	; 0xb534
   127c4:	movt	r0, #3
   127c8:	ldrb	r0, [r0]
   127cc:	cmp	r0, #0
   127d0:	bne	127fc <__assert_fail@plt+0x134c>
   127d4:	movw	r0, #46448	; 0xb570
   127d8:	mov	r1, #0
   127dc:	movw	r2, #46432	; 0xb560
   127e0:	movt	r0, #3
   127e4:	movt	r2, #3
   127e8:	strb	r1, [r0]
   127ec:	movw	r0, #45360	; 0xb130
   127f0:	movt	r0, #3
   127f4:	ldrd	r0, [r0]
   127f8:	strd	r0, [r2]
   127fc:	ldr	r0, [r8]
   12800:	ldr	r1, [r0, #20]
   12804:	ldr	r2, [r0, #24]
   12808:	cmp	r1, r2
   1280c:	bcs	12824 <__assert_fail@plt+0x1374>
   12810:	add	r2, r1, #1
   12814:	str	r2, [r0, #20]
   12818:	mov	r0, #10
   1281c:	strb	r0, [r1]
   12820:	b	1275c <__assert_fail@plt+0x12ac>
   12824:	mov	r1, #10
   12828:	bl	1142c <__overflow@plt>
   1282c:	b	1275c <__assert_fail@plt+0x12ac>
   12830:	bl	113a8 <__errno_location@plt>
   12834:	ldr	r1, [r5]
   12838:	mov	r4, r0
   1283c:	ldr	r0, [r0]
   12840:	ldr	r7, [sp, #16]
   12844:	lsl	r1, r1, #26
   12848:	and	r6, r0, r1, asr #31
   1284c:	movw	r1, #41820	; 0xa35c
   12850:	mov	r0, r7
   12854:	movt	r1, #2
   12858:	bl	111f8 <strcmp@plt>
   1285c:	cmp	r0, #0
   12860:	beq	128b4 <__assert_fail@plt+0x1404>
   12864:	mov	r0, r5
   12868:	bl	12a6c <__assert_fail@plt+0x15bc>
   1286c:	cmp	r6, #0
   12870:	bne	1287c <__assert_fail@plt+0x13cc>
   12874:	cmp	r0, #0
   12878:	ldrne	r6, [r4]
   1287c:	cmp	r6, #0
   12880:	beq	128c4 <__assert_fail@plt+0x1414>
   12884:	mov	r0, #0
   12888:	mov	r1, #3
   1288c:	mov	r2, r7
   12890:	mov	r4, #0
   12894:	bl	147ac <__assert_fail@plt+0x32fc>
   12898:	movw	r2, #40434	; 0x9df2
   1289c:	mov	r3, r0
   128a0:	mov	r0, #0
   128a4:	mov	r1, r6
   128a8:	movt	r2, #2
   128ac:	bl	1130c <error@plt>
   128b0:	b	128c8 <__assert_fail@plt+0x1418>
   128b4:	mov	r0, r5
   128b8:	bl	1145c <clearerr_unlocked@plt>
   128bc:	cmp	r6, #0
   128c0:	bne	12884 <__assert_fail@plt+0x13d4>
   128c4:	mov	r4, #1
   128c8:	mov	r0, r4
   128cc:	sub	sp, fp, #28
   128d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128d4:	movw	r1, #41386	; 0xa1aa
   128d8:	mov	r0, #0
   128dc:	mov	r2, #5
   128e0:	movt	r1, #2
   128e4:	bl	112a0 <dcgettext@plt>
   128e8:	mov	r2, r0
   128ec:	mov	r0, #1
   128f0:	mov	r1, #0
   128f4:	bl	1130c <error@plt>
   128f8:	bl	113a8 <__errno_location@plt>
   128fc:	movw	r1, #41351	; 0xa187
   12900:	ldr	r4, [r0]
   12904:	mov	r0, #0
   12908:	mov	r2, #5
   1290c:	movt	r1, #2
   12910:	bl	112a0 <dcgettext@plt>
   12914:	mov	r2, r0
   12918:	mov	r0, #1
   1291c:	mov	r1, r4
   12920:	bl	1130c <error@plt>
   12924:	movw	r1, #46464	; 0xb580
   12928:	movt	r1, #3
   1292c:	str	r0, [r1]
   12930:	bx	lr
   12934:	movw	r1, #46468	; 0xb584
   12938:	movt	r1, #3
   1293c:	strb	r0, [r1]
   12940:	bx	lr
   12944:	push	{r4, r5, r6, sl, fp, lr}
   12948:	add	fp, sp, #16
   1294c:	sub	sp, sp, #8
   12950:	movw	r0, #45508	; 0xb1c4
   12954:	movt	r0, #3
   12958:	ldr	r0, [r0]
   1295c:	bl	290d8 <__assert_fail@plt+0x17c28>
   12960:	cmp	r0, #0
   12964:	beq	1298c <__assert_fail@plt+0x14dc>
   12968:	movw	r0, #46468	; 0xb584
   1296c:	movt	r0, #3
   12970:	ldrb	r0, [r0]
   12974:	cmp	r0, #0
   12978:	beq	129ac <__assert_fail@plt+0x14fc>
   1297c:	bl	113a8 <__errno_location@plt>
   12980:	ldr	r0, [r0]
   12984:	cmp	r0, #32
   12988:	bne	129ac <__assert_fail@plt+0x14fc>
   1298c:	movw	r0, #45496	; 0xb1b8
   12990:	movt	r0, #3
   12994:	ldr	r0, [r0]
   12998:	bl	290d8 <__assert_fail@plt+0x17c28>
   1299c:	cmp	r0, #0
   129a0:	subeq	sp, fp, #16
   129a4:	popeq	{r4, r5, r6, sl, fp, pc}
   129a8:	b	12a1c <__assert_fail@plt+0x156c>
   129ac:	movw	r1, #41735	; 0xa307
   129b0:	mov	r0, #0
   129b4:	mov	r2, #5
   129b8:	movt	r1, #2
   129bc:	bl	112a0 <dcgettext@plt>
   129c0:	mov	r4, r0
   129c4:	movw	r0, #46464	; 0xb580
   129c8:	movt	r0, #3
   129cc:	ldr	r6, [r0]
   129d0:	bl	113a8 <__errno_location@plt>
   129d4:	ldr	r5, [r0]
   129d8:	cmp	r6, #0
   129dc:	bne	129f8 <__assert_fail@plt+0x1548>
   129e0:	movw	r2, #40434	; 0x9df2
   129e4:	mov	r0, #0
   129e8:	mov	r1, r5
   129ec:	mov	r3, r4
   129f0:	movt	r2, #2
   129f4:	b	12a18 <__assert_fail@plt+0x1568>
   129f8:	mov	r0, r6
   129fc:	bl	146d0 <__assert_fail@plt+0x3220>
   12a00:	movw	r2, #41747	; 0xa313
   12a04:	mov	r3, r0
   12a08:	str	r4, [sp]
   12a0c:	mov	r0, #0
   12a10:	mov	r1, r5
   12a14:	movt	r2, #2
   12a18:	bl	1130c <error@plt>
   12a1c:	movw	r0, #45408	; 0xb160
   12a20:	movt	r0, #3
   12a24:	ldr	r0, [r0]
   12a28:	bl	1124c <_exit@plt>
   12a2c:	b	11204 <posix_fadvise64@plt>
   12a30:	cmp	r0, #0
   12a34:	bxeq	lr
   12a38:	push	{r4, sl, fp, lr}
   12a3c:	add	fp, sp, #8
   12a40:	sub	sp, sp, #16
   12a44:	mov	r4, r1
   12a48:	bl	113f0 <fileno@plt>
   12a4c:	mov	r1, #0
   12a50:	mov	r2, #0
   12a54:	mov	r3, #0
   12a58:	str	r1, [sp]
   12a5c:	stmib	sp, {r1, r4}
   12a60:	bl	11204 <posix_fadvise64@plt>
   12a64:	sub	sp, fp, #8
   12a68:	pop	{r4, sl, fp, pc}
   12a6c:	push	{r4, r5, r6, sl, fp, lr}
   12a70:	add	fp, sp, #16
   12a74:	sub	sp, sp, #8
   12a78:	mov	r4, r0
   12a7c:	bl	113f0 <fileno@plt>
   12a80:	cmn	r0, #1
   12a84:	ble	12af8 <__assert_fail@plt+0x1648>
   12a88:	mov	r0, r4
   12a8c:	bl	11330 <__freading@plt>
   12a90:	cmp	r0, #0
   12a94:	beq	12ac0 <__assert_fail@plt+0x1610>
   12a98:	mov	r0, r4
   12a9c:	bl	113f0 <fileno@plt>
   12aa0:	mov	r1, #1
   12aa4:	mov	r2, #0
   12aa8:	mov	r3, #0
   12aac:	str	r1, [sp]
   12ab0:	bl	112dc <lseek64@plt>
   12ab4:	and	r0, r0, r1
   12ab8:	cmn	r0, #1
   12abc:	beq	12af8 <__assert_fail@plt+0x1648>
   12ac0:	mov	r0, r4
   12ac4:	bl	12b08 <__assert_fail@plt+0x1658>
   12ac8:	cmp	r0, #0
   12acc:	beq	12af8 <__assert_fail@plt+0x1648>
   12ad0:	bl	113a8 <__errno_location@plt>
   12ad4:	ldr	r6, [r0]
   12ad8:	mov	r5, r0
   12adc:	mov	r0, r4
   12ae0:	bl	11408 <fclose@plt>
   12ae4:	cmp	r6, #0
   12ae8:	strne	r6, [r5]
   12aec:	mvnne	r0, #0
   12af0:	sub	sp, fp, #16
   12af4:	pop	{r4, r5, r6, sl, fp, pc}
   12af8:	mov	r0, r4
   12afc:	sub	sp, fp, #16
   12b00:	pop	{r4, r5, r6, sl, fp, lr}
   12b04:	b	11408 <fclose@plt>
   12b08:	push	{r4, sl, fp, lr}
   12b0c:	add	fp, sp, #8
   12b10:	sub	sp, sp, #8
   12b14:	mov	r4, r0
   12b18:	cmp	r0, #0
   12b1c:	beq	12b54 <__assert_fail@plt+0x16a4>
   12b20:	mov	r0, r4
   12b24:	bl	11330 <__freading@plt>
   12b28:	cmp	r0, #0
   12b2c:	beq	12b54 <__assert_fail@plt+0x16a4>
   12b30:	ldrb	r0, [r4, #1]
   12b34:	tst	r0, #1
   12b38:	beq	12b54 <__assert_fail@plt+0x16a4>
   12b3c:	mov	r0, #1
   12b40:	mov	r2, #0
   12b44:	mov	r3, #0
   12b48:	str	r0, [sp]
   12b4c:	mov	r0, r4
   12b50:	bl	12b64 <__assert_fail@plt+0x16b4>
   12b54:	mov	r0, r4
   12b58:	sub	sp, fp, #8
   12b5c:	pop	{r4, sl, fp, lr}
   12b60:	b	1121c <fflush@plt>
   12b64:	push	{r4, r5, r6, r7, fp, lr}
   12b68:	add	fp, sp, #16
   12b6c:	sub	sp, sp, #8
   12b70:	mov	r4, r0
   12b74:	ldr	r0, [r0, #4]
   12b78:	mov	r5, r3
   12b7c:	mov	r6, r2
   12b80:	ldr	r1, [r4, #8]
   12b84:	cmp	r1, r0
   12b88:	bne	12ba4 <__assert_fail@plt+0x16f4>
   12b8c:	ldrd	r0, [r4, #16]
   12b90:	cmp	r1, r0
   12b94:	bne	12ba4 <__assert_fail@plt+0x16f4>
   12b98:	ldr	r0, [r4, #36]	; 0x24
   12b9c:	cmp	r0, #0
   12ba0:	beq	12bbc <__assert_fail@plt+0x170c>
   12ba4:	mov	r0, r4
   12ba8:	mov	r2, r6
   12bac:	mov	r3, r5
   12bb0:	sub	sp, fp, #16
   12bb4:	pop	{r4, r5, r6, r7, fp, lr}
   12bb8:	b	11414 <fseeko64@plt>
   12bbc:	ldr	r7, [fp, #8]
   12bc0:	mov	r0, r4
   12bc4:	bl	113f0 <fileno@plt>
   12bc8:	mov	r2, r6
   12bcc:	mov	r3, r5
   12bd0:	str	r7, [sp]
   12bd4:	bl	112dc <lseek64@plt>
   12bd8:	and	r2, r0, r1
   12bdc:	cmn	r2, #1
   12be0:	beq	12c00 <__assert_fail@plt+0x1750>
   12be4:	strd	r0, [r4, #80]	; 0x50
   12be8:	ldr	r0, [r4]
   12bec:	bic	r0, r0, #16
   12bf0:	str	r0, [r4]
   12bf4:	mov	r0, #0
   12bf8:	sub	sp, fp, #16
   12bfc:	pop	{r4, r5, r6, r7, fp, pc}
   12c00:	mvn	r0, #0
   12c04:	sub	sp, fp, #16
   12c08:	pop	{r4, r5, r6, r7, fp, pc}
   12c0c:	mov	r1, #0
   12c10:	str	r1, [r0]
   12c14:	str	r1, [r0, #4]
   12c18:	str	r1, [r0, #8]
   12c1c:	bx	lr
   12c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c24:	add	fp, sp, #28
   12c28:	sub	sp, sp, #4
   12c2c:	mov	r9, r0
   12c30:	ldrb	r0, [r1]
   12c34:	tst	r0, #16
   12c38:	bne	12cfc <__assert_fail@plt+0x184c>
   12c3c:	ldr	r4, [r9, #8]
   12c40:	ldr	r0, [r9]
   12c44:	mov	r5, r1
   12c48:	mov	r8, #1
   12c4c:	add	sl, r4, r0
   12c50:	mov	r6, r4
   12c54:	b	12c64 <__assert_fail@plt+0x17b4>
   12c58:	strb	r7, [r6], #1
   12c5c:	cmp	r7, #10
   12c60:	beq	12cf0 <__assert_fail@plt+0x1840>
   12c64:	ldmib	r5, {r0, r1}
   12c68:	cmp	r0, r1
   12c6c:	bcs	12cb8 <__assert_fail@plt+0x1808>
   12c70:	add	r1, r0, #1
   12c74:	str	r1, [r5, #4]
   12c78:	ldrb	r7, [r0]
   12c7c:	cmp	r6, sl
   12c80:	bne	12c58 <__assert_fail@plt+0x17a8>
   12c84:	ldr	r6, [r9]
   12c88:	mov	r0, r4
   12c8c:	mov	r1, r9
   12c90:	mov	r2, #1
   12c94:	mvn	r3, #0
   12c98:	str	r8, [sp]
   12c9c:	bl	27288 <__assert_fail@plt+0x15dd8>
   12ca0:	str	r0, [r9, #8]
   12ca4:	mov	r4, r0
   12ca8:	add	r6, r0, r6
   12cac:	ldr	r0, [r9]
   12cb0:	add	sl, r4, r0
   12cb4:	b	12c58 <__assert_fail@plt+0x17a8>
   12cb8:	mov	r0, r5
   12cbc:	bl	11420 <__uflow@plt>
   12cc0:	mov	r7, r0
   12cc4:	cmn	r0, #1
   12cc8:	bne	12c7c <__assert_fail@plt+0x17cc>
   12ccc:	cmp	r6, r4
   12cd0:	beq	12cfc <__assert_fail@plt+0x184c>
   12cd4:	ldrb	r0, [r5]
   12cd8:	tst	r0, #32
   12cdc:	bne	12cfc <__assert_fail@plt+0x184c>
   12ce0:	ldrb	r0, [r6, #-1]
   12ce4:	mov	r7, #10
   12ce8:	cmp	r0, #10
   12cec:	bne	12c7c <__assert_fail@plt+0x17cc>
   12cf0:	sub	r0, r6, r4
   12cf4:	str	r0, [r9, #4]
   12cf8:	b	12d00 <__assert_fail@plt+0x1850>
   12cfc:	mov	r9, #0
   12d00:	mov	r0, r9
   12d04:	sub	sp, fp, #28
   12d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d10:	add	fp, sp, #28
   12d14:	sub	sp, sp, #4
   12d18:	mov	sl, r0
   12d1c:	ldrb	r0, [r1]
   12d20:	tst	r0, #16
   12d24:	bne	12dec <__assert_fail@plt+0x193c>
   12d28:	ldr	r4, [sl, #8]
   12d2c:	ldr	r0, [sl]
   12d30:	mov	r8, r2
   12d34:	mov	r6, r1
   12d38:	add	r9, r4, r0
   12d3c:	mov	r7, r4
   12d40:	b	12d50 <__assert_fail@plt+0x18a0>
   12d44:	strb	r5, [r7], #1
   12d48:	cmp	r5, r8
   12d4c:	beq	12de0 <__assert_fail@plt+0x1930>
   12d50:	ldmib	r6, {r0, r1}
   12d54:	cmp	r0, r1
   12d58:	bcs	12da8 <__assert_fail@plt+0x18f8>
   12d5c:	add	r1, r0, #1
   12d60:	str	r1, [r6, #4]
   12d64:	ldrb	r5, [r0]
   12d68:	cmp	r7, r9
   12d6c:	bne	12d44 <__assert_fail@plt+0x1894>
   12d70:	ldr	r7, [sl]
   12d74:	mov	r0, #1
   12d78:	mov	r1, sl
   12d7c:	mov	r2, #1
   12d80:	mvn	r3, #0
   12d84:	str	r0, [sp]
   12d88:	mov	r0, r4
   12d8c:	bl	27288 <__assert_fail@plt+0x15dd8>
   12d90:	str	r0, [sl, #8]
   12d94:	mov	r4, r0
   12d98:	add	r7, r0, r7
   12d9c:	ldr	r0, [sl]
   12da0:	add	r9, r4, r0
   12da4:	b	12d44 <__assert_fail@plt+0x1894>
   12da8:	mov	r0, r6
   12dac:	bl	11420 <__uflow@plt>
   12db0:	mov	r5, r0
   12db4:	cmn	r0, #1
   12db8:	bne	12d68 <__assert_fail@plt+0x18b8>
   12dbc:	cmp	r7, r4
   12dc0:	beq	12dec <__assert_fail@plt+0x193c>
   12dc4:	ldrb	r0, [r6]
   12dc8:	tst	r0, #32
   12dcc:	bne	12dec <__assert_fail@plt+0x193c>
   12dd0:	ldrb	r0, [r7, #-1]
   12dd4:	mov	r5, r8
   12dd8:	cmp	r0, r8
   12ddc:	bne	12d68 <__assert_fail@plt+0x18b8>
   12de0:	sub	r0, r7, r4
   12de4:	str	r0, [sl, #4]
   12de8:	b	12df0 <__assert_fail@plt+0x1940>
   12dec:	mov	sl, #0
   12df0:	mov	r0, sl
   12df4:	sub	sp, fp, #28
   12df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dfc:	ldr	r0, [r0, #8]
   12e00:	b	29220 <__assert_fail@plt+0x17d70>
   12e04:	push	{r4, r5, fp, lr}
   12e08:	add	fp, sp, #8
   12e0c:	cmp	r0, #0
   12e10:	beq	12ea4 <__assert_fail@plt+0x19f4>
   12e14:	mov	r1, #47	; 0x2f
   12e18:	mov	r4, r0
   12e1c:	bl	11444 <strrchr@plt>
   12e20:	cmp	r0, #0
   12e24:	mov	r5, r4
   12e28:	addne	r5, r0, #1
   12e2c:	sub	r0, r5, r4
   12e30:	cmp	r0, #7
   12e34:	blt	12e88 <__assert_fail@plt+0x19d8>
   12e38:	movw	r1, #41810	; 0xa352
   12e3c:	sub	r0, r5, #7
   12e40:	mov	r2, #7
   12e44:	movt	r1, #2
   12e48:	bl	11498 <strncmp@plt>
   12e4c:	cmp	r0, #0
   12e50:	bne	12e88 <__assert_fail@plt+0x19d8>
   12e54:	movw	r1, #41818	; 0xa35a
   12e58:	mov	r0, r5
   12e5c:	mov	r2, #3
   12e60:	movt	r1, #2
   12e64:	bl	11498 <strncmp@plt>
   12e68:	cmp	r0, #0
   12e6c:	beq	12e78 <__assert_fail@plt+0x19c8>
   12e70:	mov	r4, r5
   12e74:	b	12e88 <__assert_fail@plt+0x19d8>
   12e78:	movw	r0, #45480	; 0xb1a8
   12e7c:	add	r4, r5, #3
   12e80:	movt	r0, #3
   12e84:	str	r4, [r0]
   12e88:	movw	r0, #45484	; 0xb1ac
   12e8c:	movt	r0, #3
   12e90:	str	r4, [r0]
   12e94:	movw	r0, #46472	; 0xb588
   12e98:	movt	r0, #3
   12e9c:	str	r4, [r0]
   12ea0:	pop	{r4, r5, fp, pc}
   12ea4:	movw	r0, #45496	; 0xb1b8
   12ea8:	mov	r1, #55	; 0x37
   12eac:	mov	r2, #1
   12eb0:	movt	r0, #3
   12eb4:	ldr	r3, [r0]
   12eb8:	movw	r0, #41754	; 0xa31a
   12ebc:	movt	r0, #2
   12ec0:	bl	112d0 <fwrite@plt>
   12ec4:	bl	114a4 <abort@plt>
   12ec8:	push	{r4, r5, r6, sl, fp, lr}
   12ecc:	add	fp, sp, #16
   12ed0:	mov	r4, r0
   12ed4:	movw	r0, #46480	; 0xb590
   12ed8:	movt	r0, #3
   12edc:	cmp	r4, #0
   12ee0:	moveq	r4, r0
   12ee4:	bl	113a8 <__errno_location@plt>
   12ee8:	ldr	r6, [r0]
   12eec:	mov	r5, r0
   12ef0:	mov	r0, r4
   12ef4:	mov	r1, #48	; 0x30
   12ef8:	bl	274b8 <__assert_fail@plt+0x16008>
   12efc:	str	r6, [r5]
   12f00:	pop	{r4, r5, r6, sl, fp, pc}
   12f04:	movw	r1, #46480	; 0xb590
   12f08:	cmp	r0, #0
   12f0c:	movt	r1, #3
   12f10:	movne	r1, r0
   12f14:	ldr	r0, [r1]
   12f18:	bx	lr
   12f1c:	movw	r2, #46480	; 0xb590
   12f20:	cmp	r0, #0
   12f24:	movt	r2, #3
   12f28:	movne	r2, r0
   12f2c:	str	r1, [r2]
   12f30:	bx	lr
   12f34:	movw	r3, #46480	; 0xb590
   12f38:	cmp	r0, #0
   12f3c:	and	r2, r2, #1
   12f40:	movt	r3, #3
   12f44:	movne	r3, r0
   12f48:	ubfx	r0, r1, #5, #3
   12f4c:	and	r1, r1, #31
   12f50:	add	ip, r3, r0, lsl #2
   12f54:	mov	r0, #1
   12f58:	ldr	r3, [ip, #8]
   12f5c:	and	r0, r0, r3, lsr r1
   12f60:	eor	r2, r0, r2
   12f64:	eor	r1, r3, r2, lsl r1
   12f68:	str	r1, [ip, #8]
   12f6c:	bx	lr
   12f70:	movw	r2, #46480	; 0xb590
   12f74:	cmp	r0, #0
   12f78:	movt	r2, #3
   12f7c:	movne	r2, r0
   12f80:	ldr	r0, [r2, #4]
   12f84:	str	r1, [r2, #4]
   12f88:	bx	lr
   12f8c:	push	{fp, lr}
   12f90:	mov	fp, sp
   12f94:	movw	r3, #46480	; 0xb590
   12f98:	cmp	r0, #0
   12f9c:	movt	r3, #3
   12fa0:	movne	r3, r0
   12fa4:	cmp	r1, #0
   12fa8:	mov	r0, #10
   12fac:	cmpne	r2, #0
   12fb0:	str	r0, [r3]
   12fb4:	bne	12fbc <__assert_fail@plt+0x1b0c>
   12fb8:	bl	114a4 <abort@plt>
   12fbc:	str	r1, [r3, #40]	; 0x28
   12fc0:	str	r2, [r3, #44]	; 0x2c
   12fc4:	pop	{fp, pc}
   12fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fcc:	add	fp, sp, #28
   12fd0:	sub	sp, sp, #20
   12fd4:	mov	r7, r0
   12fd8:	ldr	r0, [fp, #8]
   12fdc:	movw	r5, #46480	; 0xb590
   12fe0:	mov	r8, r3
   12fe4:	mov	r9, r2
   12fe8:	mov	sl, r1
   12fec:	movt	r5, #3
   12ff0:	cmp	r0, #0
   12ff4:	movne	r5, r0
   12ff8:	bl	113a8 <__errno_location@plt>
   12ffc:	ldr	r2, [r5, #40]	; 0x28
   13000:	ldr	r3, [r5, #44]	; 0x2c
   13004:	mov	r4, r0
   13008:	ldm	r5, {r0, r1}
   1300c:	add	r5, r5, #8
   13010:	ldr	r6, [r4]
   13014:	stm	sp, {r0, r1, r5}
   13018:	mov	r0, r7
   1301c:	mov	r1, sl
   13020:	str	r2, [sp, #12]
   13024:	str	r3, [sp, #16]
   13028:	mov	r2, r9
   1302c:	mov	r3, r8
   13030:	bl	13040 <__assert_fail@plt+0x1b90>
   13034:	str	r6, [r4]
   13038:	sub	sp, fp, #28
   1303c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13044:	add	fp, sp, #28
   13048:	sub	sp, sp, #156	; 0x9c
   1304c:	mov	r5, r0
   13050:	add	r0, r2, #1
   13054:	mov	r6, r1
   13058:	mov	sl, r3
   1305c:	str	r2, [fp, #-80]	; 0xffffffb0
   13060:	str	r0, [sp, #72]	; 0x48
   13064:	ldr	r0, [fp, #12]
   13068:	and	r1, r0, #1
   1306c:	str	r1, [sp, #36]	; 0x24
   13070:	and	r1, r0, #4
   13074:	str	r1, [sp, #32]
   13078:	ubfx	r9, r0, #1, #1
   1307c:	bl	112e8 <__ctype_get_mb_cur_max@plt>
   13080:	str	r0, [sp, #40]	; 0x28
   13084:	ldr	r0, [fp, #24]
   13088:	ldr	r7, [fp, #8]
   1308c:	mov	r1, #0
   13090:	str	r5, [fp, #-84]	; 0xffffffac
   13094:	str	r1, [fp, #-56]	; 0xffffffc8
   13098:	mov	r1, #0
   1309c:	str	r1, [sp, #60]	; 0x3c
   130a0:	mov	r1, #1
   130a4:	str	r1, [fp, #-48]	; 0xffffffd0
   130a8:	str	r0, [sp, #80]	; 0x50
   130ac:	ldr	r0, [fp, #20]
   130b0:	str	r0, [sp, #76]	; 0x4c
   130b4:	mov	r0, #0
   130b8:	str	r0, [sp, #56]	; 0x38
   130bc:	mov	r0, #0
   130c0:	str	r0, [fp, #-88]	; 0xffffffa8
   130c4:	mov	r0, #0
   130c8:	str	r0, [fp, #-72]	; 0xffffffb8
   130cc:	mov	r0, #0
   130d0:	cmp	r7, #10
   130d4:	bhi	14068 <__assert_fail@plt+0x2bb8>
   130d8:	add	r1, pc, #24
   130dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   130e0:	mov	r4, r6
   130e4:	mov	r8, #0
   130e8:	mov	r2, #1
   130ec:	mov	r3, #0
   130f0:	mov	lr, sl
   130f4:	ldr	pc, [r1, r7, lsl #2]
   130f8:			; <UNDEFINED> instruction: 0x000131bc
   130fc:	andeq	r3, r1, r0, lsl r2
   13100:	ldrdeq	r3, [r1], -r0
   13104:			; <UNDEFINED> instruction: 0x000131b4
   13108:	andeq	r3, r1, r4, lsl #4
   1310c:	andeq	r3, r1, r8, lsr r2
   13110:	andeq	r3, r1, r0, ror #3
   13114:			; <UNDEFINED> instruction: 0x000132bc
   13118:	andeq	r3, r1, r4, lsr #2
   1311c:	andeq	r3, r1, r4, lsr #2
   13120:	andeq	r3, r1, ip, asr #2
   13124:	movw	r0, #41900	; 0xa3ac
   13128:	mov	r1, r7
   1312c:	movt	r0, #2
   13130:	bl	14a70 <__assert_fail@plt+0x35c0>
   13134:	str	r0, [sp, #76]	; 0x4c
   13138:	movw	r0, #41902	; 0xa3ae
   1313c:	mov	r1, r7
   13140:	movt	r0, #2
   13144:	bl	14a70 <__assert_fail@plt+0x35c0>
   13148:	str	r0, [sp, #80]	; 0x50
   1314c:	mov	r8, #0
   13150:	tst	r9, #1
   13154:	bne	1318c <__assert_fail@plt+0x1cdc>
   13158:	ldr	r0, [sp, #76]	; 0x4c
   1315c:	ldrb	r0, [r0]
   13160:	cmp	r0, #0
   13164:	beq	1318c <__assert_fail@plt+0x1cdc>
   13168:	ldr	r1, [sp, #76]	; 0x4c
   1316c:	mov	r8, #0
   13170:	add	r1, r1, #1
   13174:	cmp	r8, r4
   13178:	strbcc	r0, [r5, r8]
   1317c:	ldrb	r0, [r1, r8]
   13180:	add	r8, r8, #1
   13184:	cmp	r0, #0
   13188:	bne	13174 <__assert_fail@plt+0x1cc4>
   1318c:	ldr	r6, [sp, #80]	; 0x50
   13190:	mov	r0, r6
   13194:	bl	11390 <strlen@plt>
   13198:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1319c:	str	r0, [fp, #-72]	; 0xffffffb8
   131a0:	str	r6, [fp, #-88]	; 0xffffffa8
   131a4:	mov	r2, #1
   131a8:	mov	r3, r9
   131ac:	mov	lr, sl
   131b0:	b	132bc <__assert_fail@plt+0x1e0c>
   131b4:	mov	r0, #1
   131b8:	b	13210 <__assert_fail@plt+0x1d60>
   131bc:	mov	r7, #0
   131c0:	mov	r8, #0
   131c4:	mov	r2, r0
   131c8:	mov	r3, #0
   131cc:	b	132bc <__assert_fail@plt+0x1e0c>
   131d0:	tst	r9, #1
   131d4:	bne	13210 <__assert_fail@plt+0x1d60>
   131d8:	mov	r2, r0
   131dc:	b	13268 <__assert_fail@plt+0x1db8>
   131e0:	mov	r0, #1
   131e4:	mov	r8, #0
   131e8:	mov	r7, #5
   131ec:	mov	r2, #1
   131f0:	str	r0, [fp, #-72]	; 0xffffffb8
   131f4:	movw	r0, #41898	; 0xa3aa
   131f8:	movt	r0, #2
   131fc:	str	r0, [fp, #-88]	; 0xffffffa8
   13200:	b	13230 <__assert_fail@plt+0x1d80>
   13204:	mov	r2, #1
   13208:	tst	r9, #1
   1320c:	beq	13268 <__assert_fail@plt+0x1db8>
   13210:	mov	r1, #1
   13214:	mov	r8, #0
   13218:	mov	r7, #2
   1321c:	mov	r2, r0
   13220:	str	r1, [fp, #-72]	; 0xffffffb8
   13224:	movw	r1, #41902	; 0xa3ae
   13228:	movt	r1, #2
   1322c:	str	r1, [fp, #-88]	; 0xffffffa8
   13230:	mov	r3, #1
   13234:	b	132bc <__assert_fail@plt+0x1e0c>
   13238:	tst	r9, #1
   1323c:	beq	1328c <__assert_fail@plt+0x1ddc>
   13240:	mov	r0, #1
   13244:	mov	r8, #0
   13248:	mov	r2, #1
   1324c:	mov	r3, #1
   13250:	mov	r7, #5
   13254:	str	r0, [fp, #-72]	; 0xffffffb8
   13258:	movw	r0, #41898	; 0xa3aa
   1325c:	movt	r0, #2
   13260:	str	r0, [fp, #-88]	; 0xffffffa8
   13264:	b	132bc <__assert_fail@plt+0x1e0c>
   13268:	cmp	r4, #0
   1326c:	mov	r8, #1
   13270:	mov	r3, #0
   13274:	mov	r7, #2
   13278:	movne	r0, #39	; 0x27
   1327c:	strbne	r0, [r5]
   13280:	movw	r0, #41902	; 0xa3ae
   13284:	movt	r0, #2
   13288:	b	132b0 <__assert_fail@plt+0x1e00>
   1328c:	cmp	r4, #0
   13290:	mov	r8, #1
   13294:	mov	r2, #1
   13298:	mov	r7, #5
   1329c:	mov	r3, #0
   132a0:	movne	r0, #34	; 0x22
   132a4:	strbne	r0, [r5]
   132a8:	movw	r0, #41898	; 0xa3aa
   132ac:	movt	r0, #2
   132b0:	str	r0, [fp, #-88]	; 0xffffffa8
   132b4:	mov	r0, #1
   132b8:	str	r0, [fp, #-72]	; 0xffffffb8
   132bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132c0:	eor	r6, r3, #1
   132c4:	str	r7, [fp, #-68]	; 0xffffffbc
   132c8:	str	r3, [fp, #-76]	; 0xffffffb4
   132cc:	str	r2, [sp, #84]	; 0x54
   132d0:	str	r6, [sp, #92]	; 0x5c
   132d4:	cmp	r0, #0
   132d8:	movwne	r0, #1
   132dc:	and	r1, r0, r3
   132e0:	and	r1, r2, r1
   132e4:	str	r1, [sp, #48]	; 0x30
   132e8:	sub	r1, r7, #2
   132ec:	clz	r1, r1
   132f0:	lsr	r1, r1, #5
   132f4:	and	r1, r1, r3
   132f8:	str	r1, [sp, #64]	; 0x40
   132fc:	subs	r1, r7, #2
   13300:	mov	r7, #0
   13304:	movwne	r1, #1
   13308:	orr	r6, r1, r6
   1330c:	and	r1, r1, r2
   13310:	and	r0, r0, r1
   13314:	str	r6, [sp, #68]	; 0x44
   13318:	str	r0, [fp, #-60]	; 0xffffffc4
   1331c:	orr	r0, r1, r3
   13320:	ldr	r1, [fp, #16]
   13324:	eor	r0, r0, #1
   13328:	clz	r1, r1
   1332c:	lsr	r1, r1, #5
   13330:	orr	r0, r1, r0
   13334:	str	r0, [fp, #-64]	; 0xffffffc0
   13338:	eor	r0, r2, #1
   1333c:	str	r0, [sp, #52]	; 0x34
   13340:	cmn	lr, #1
   13344:	beq	13354 <__assert_fail@plt+0x1ea4>
   13348:	cmp	r7, lr
   1334c:	bne	13360 <__assert_fail@plt+0x1eb0>
   13350:	b	13ea8 <__assert_fail@plt+0x29f8>
   13354:	ldrb	r0, [ip, r7]
   13358:	cmp	r0, #0
   1335c:	beq	13eb0 <__assert_fail@plt+0x2a00>
   13360:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13364:	mov	sl, #0
   13368:	cmp	r0, #0
   1336c:	beq	133a4 <__assert_fail@plt+0x1ef4>
   13370:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13374:	add	r5, r7, r0
   13378:	cmp	r0, #2
   1337c:	bcc	13398 <__assert_fail@plt+0x1ee8>
   13380:	cmn	lr, #1
   13384:	bne	13398 <__assert_fail@plt+0x1ee8>
   13388:	mov	r0, ip
   1338c:	bl	11390 <strlen@plt>
   13390:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13394:	mov	lr, r0
   13398:	cmp	r5, lr
   1339c:	bls	133ac <__assert_fail@plt+0x1efc>
   133a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   133a4:	mov	r0, #0
   133a8:	b	133f8 <__assert_fail@plt+0x1f48>
   133ac:	ldr	r1, [fp, #-88]	; 0xffffffa8
   133b0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   133b4:	add	r0, ip, r7
   133b8:	mov	r6, r4
   133bc:	mov	r4, lr
   133c0:	bl	11384 <bcmp@plt>
   133c4:	ldr	r2, [sp, #92]	; 0x5c
   133c8:	cmp	r0, #0
   133cc:	ldr	r5, [fp, #-84]	; 0xffffffac
   133d0:	mov	r1, r0
   133d4:	movwne	r1, #1
   133d8:	orr	r1, r1, r2
   133dc:	tst	r1, #1
   133e0:	beq	13f38 <__assert_fail@plt+0x2a88>
   133e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   133e8:	clz	r0, r0
   133ec:	mov	lr, r4
   133f0:	mov	r4, r6
   133f4:	lsr	r0, r0, #5
   133f8:	str	r0, [fp, #-52]	; 0xffffffcc
   133fc:	ldrb	r6, [ip, r7]
   13400:	cmp	r6, #126	; 0x7e
   13404:	bhi	13934 <__assert_fail@plt+0x2484>
   13408:	add	r3, pc, #16
   1340c:	mov	r9, #1
   13410:	mov	r2, #110	; 0x6e
   13414:	mov	r0, #97	; 0x61
   13418:	mov	r1, #0
   1341c:	ldr	pc, [r3, r6, lsl #2]
   13420:	muleq	r1, r4, r7
   13424:	andeq	r3, r1, r4, lsr r9
   13428:	andeq	r3, r1, r4, lsr r9
   1342c:	andeq	r3, r1, r4, lsr r9
   13430:	andeq	r3, r1, r4, lsr r9
   13434:	andeq	r3, r1, r4, lsr r9
   13438:	andeq	r3, r1, r4, lsr r9
   1343c:	andeq	r3, r1, r0, lsl sl
   13440:	andeq	r3, r1, r4, ror r7
   13444:	andeq	r3, r1, ip, ror #14
   13448:	andeq	r3, r1, r0, lsl #15
   1344c:	muleq	r1, ip, r8
   13450:	andeq	r3, r1, r4, ror #14
   13454:	andeq	r3, r1, ip, ror r7
   13458:	andeq	r3, r1, r4, lsr r9
   1345c:	andeq	r3, r1, r4, lsr r9
   13460:	andeq	r3, r1, r4, lsr r9
   13464:	andeq	r3, r1, r4, lsr r9
   13468:	andeq	r3, r1, r4, lsr r9
   1346c:	andeq	r3, r1, r4, lsr r9
   13470:	andeq	r3, r1, r4, lsr r9
   13474:	andeq	r3, r1, r4, lsr r9
   13478:	andeq	r3, r1, r4, lsr r9
   1347c:	andeq	r3, r1, r4, lsr r9
   13480:	andeq	r3, r1, r4, lsr r9
   13484:	andeq	r3, r1, r4, lsr r9
   13488:	andeq	r3, r1, r4, lsr r9
   1348c:	andeq	r3, r1, r4, lsr r9
   13490:	andeq	r3, r1, r4, lsr r9
   13494:	andeq	r3, r1, r4, lsr r9
   13498:	andeq	r3, r1, r4, lsr r9
   1349c:	andeq	r3, r1, r4, lsr r9
   134a0:	andeq	r3, r1, r8, lsl r7
   134a4:	andeq	r3, r1, ip, lsl r7
   134a8:	andeq	r3, r1, ip, lsl r7
   134ac:	andeq	r3, r1, r4, lsl #14
   134b0:	andeq	r3, r1, ip, lsl r7
   134b4:	andeq	r3, r1, ip, lsl r6
   134b8:	andeq	r3, r1, ip, lsl r7
   134bc:	andeq	r3, r1, r4, lsr #17
   134c0:	andeq	r3, r1, ip, lsl r7
   134c4:	andeq	r3, r1, ip, lsl r7
   134c8:	andeq	r3, r1, ip, lsl r7
   134cc:	andeq	r3, r1, ip, lsl r6
   134d0:	andeq	r3, r1, ip, lsl r6
   134d4:	andeq	r3, r1, ip, lsl r6
   134d8:	andeq	r3, r1, ip, lsl r6
   134dc:	andeq	r3, r1, ip, lsl r6
   134e0:	andeq	r3, r1, ip, lsl r6
   134e4:	andeq	r3, r1, ip, lsl r6
   134e8:	andeq	r3, r1, ip, lsl r6
   134ec:	andeq	r3, r1, ip, lsl r6
   134f0:	andeq	r3, r1, ip, lsl r6
   134f4:	andeq	r3, r1, ip, lsl r6
   134f8:	andeq	r3, r1, ip, lsl r6
   134fc:	andeq	r3, r1, ip, lsl r6
   13500:	andeq	r3, r1, ip, lsl r6
   13504:	andeq	r3, r1, ip, lsl r6
   13508:	andeq	r3, r1, ip, lsl r6
   1350c:	andeq	r3, r1, ip, lsl r7
   13510:	andeq	r3, r1, ip, lsl r7
   13514:	andeq	r3, r1, ip, lsl r7
   13518:	andeq	r3, r1, ip, lsl r7
   1351c:	andeq	r3, r1, ip, ror #16
   13520:	andeq	r3, r1, r4, lsr r9
   13524:	andeq	r3, r1, ip, lsl r6
   13528:	andeq	r3, r1, ip, lsl r6
   1352c:	andeq	r3, r1, ip, lsl r6
   13530:	andeq	r3, r1, ip, lsl r6
   13534:	andeq	r3, r1, ip, lsl r6
   13538:	andeq	r3, r1, ip, lsl r6
   1353c:	andeq	r3, r1, ip, lsl r6
   13540:	andeq	r3, r1, ip, lsl r6
   13544:	andeq	r3, r1, ip, lsl r6
   13548:	andeq	r3, r1, ip, lsl r6
   1354c:	andeq	r3, r1, ip, lsl r6
   13550:	andeq	r3, r1, ip, lsl r6
   13554:	andeq	r3, r1, ip, lsl r6
   13558:	andeq	r3, r1, ip, lsl r6
   1355c:	andeq	r3, r1, ip, lsl r6
   13560:	andeq	r3, r1, ip, lsl r6
   13564:	andeq	r3, r1, ip, lsl r6
   13568:	andeq	r3, r1, ip, lsl r6
   1356c:	andeq	r3, r1, ip, lsl r6
   13570:	andeq	r3, r1, ip, lsl r6
   13574:	andeq	r3, r1, ip, lsl r6
   13578:	andeq	r3, r1, ip, lsl r6
   1357c:	andeq	r3, r1, ip, lsl r6
   13580:	andeq	r3, r1, ip, lsl r6
   13584:	andeq	r3, r1, ip, lsl r6
   13588:	andeq	r3, r1, ip, lsl r6
   1358c:	andeq	r3, r1, ip, lsl r7
   13590:	andeq	r3, r1, r4, asr #14
   13594:	andeq	r3, r1, ip, lsl r6
   13598:	andeq	r3, r1, ip, lsl r7
   1359c:	andeq	r3, r1, ip, lsl r6
   135a0:	andeq	r3, r1, ip, lsl r7
   135a4:	andeq	r3, r1, ip, lsl r6
   135a8:	andeq	r3, r1, ip, lsl r6
   135ac:	andeq	r3, r1, ip, lsl r6
   135b0:	andeq	r3, r1, ip, lsl r6
   135b4:	andeq	r3, r1, ip, lsl r6
   135b8:	andeq	r3, r1, ip, lsl r6
   135bc:	andeq	r3, r1, ip, lsl r6
   135c0:	andeq	r3, r1, ip, lsl r6
   135c4:	andeq	r3, r1, ip, lsl r6
   135c8:	andeq	r3, r1, ip, lsl r6
   135cc:	andeq	r3, r1, ip, lsl r6
   135d0:	andeq	r3, r1, ip, lsl r6
   135d4:	andeq	r3, r1, ip, lsl r6
   135d8:	andeq	r3, r1, ip, lsl r6
   135dc:	andeq	r3, r1, ip, lsl r6
   135e0:	andeq	r3, r1, ip, lsl r6
   135e4:	andeq	r3, r1, ip, lsl r6
   135e8:	andeq	r3, r1, ip, lsl r6
   135ec:	andeq	r3, r1, ip, lsl r6
   135f0:	andeq	r3, r1, ip, lsl r6
   135f4:	andeq	r3, r1, ip, lsl r6
   135f8:	andeq	r3, r1, ip, lsl r6
   135fc:	andeq	r3, r1, ip, lsl r6
   13600:	andeq	r3, r1, ip, lsl r6
   13604:	andeq	r3, r1, ip, lsl r6
   13608:	andeq	r3, r1, ip, lsl r6
   1360c:	ldrdeq	r3, [r1], -r8
   13610:	andeq	r3, r1, ip, lsl r7
   13614:	ldrdeq	r3, [r1], -r8
   13618:	andeq	r3, r1, r4, lsl #14
   1361c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13620:	tst	r0, #1
   13624:	bne	13650 <__assert_fail@plt+0x21a0>
   13628:	ldr	r1, [fp, #16]
   1362c:	ubfx	r0, r6, #5, #3
   13630:	mov	r2, #1
   13634:	ldr	r0, [r1, r0, lsl #2]
   13638:	and	r1, r6, #31
   1363c:	tst	r0, r2, lsl r1
   13640:	beq	13650 <__assert_fail@plt+0x21a0>
   13644:	mov	r0, r6
   13648:	mov	r1, r9
   1364c:	b	13664 <__assert_fail@plt+0x21b4>
   13650:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13654:	mov	r1, r9
   13658:	cmp	r0, #0
   1365c:	mov	r0, r6
   13660:	beq	139a4 <__assert_fail@plt+0x24f4>
   13664:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13668:	tst	r2, #1
   1366c:	bne	13f74 <__assert_fail@plt+0x2ac4>
   13670:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13674:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13678:	subs	r2, r2, #2
   1367c:	movwne	r2, #1
   13680:	orr	r2, r2, r3
   13684:	tst	r2, #1
   13688:	bne	136c4 <__assert_fail@plt+0x2214>
   1368c:	cmp	r8, r4
   13690:	movcc	r2, #39	; 0x27
   13694:	strbcc	r2, [r5, r8]
   13698:	add	r2, r8, #1
   1369c:	cmp	r2, r4
   136a0:	movcc	r3, #36	; 0x24
   136a4:	strbcc	r3, [r5, r2]
   136a8:	add	r2, r8, #2
   136ac:	add	r8, r8, #3
   136b0:	cmp	r2, r4
   136b4:	movcc	r3, #39	; 0x27
   136b8:	strbcc	r3, [r5, r2]
   136bc:	mov	r2, #1
   136c0:	str	r2, [fp, #-56]	; 0xffffffc8
   136c4:	cmp	r8, r4
   136c8:	movcc	r2, #92	; 0x5c
   136cc:	strbcc	r2, [r5, r8]
   136d0:	add	r8, r8, #1
   136d4:	b	139e8 <__assert_fail@plt+0x2538>
   136d8:	cmp	lr, #1
   136dc:	beq	13704 <__assert_fail@plt+0x2254>
   136e0:	mov	r9, #0
   136e4:	cmn	lr, #1
   136e8:	bne	13710 <__assert_fail@plt+0x2260>
   136ec:	ldrb	r0, [ip, #1]
   136f0:	cmp	r0, #0
   136f4:	beq	13704 <__assert_fail@plt+0x2254>
   136f8:	mvn	lr, #0
   136fc:	mov	sl, #0
   13700:	b	1361c <__assert_fail@plt+0x216c>
   13704:	mov	r9, #0
   13708:	cmp	r7, #0
   1370c:	beq	13718 <__assert_fail@plt+0x2268>
   13710:	mov	sl, #0
   13714:	b	1361c <__assert_fail@plt+0x216c>
   13718:	mov	r1, #1
   1371c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13720:	cmp	r0, #2
   13724:	bne	1373c <__assert_fail@plt+0x228c>
   13728:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1372c:	mov	r9, r1
   13730:	tst	r0, #1
   13734:	beq	1361c <__assert_fail@plt+0x216c>
   13738:	b	13f74 <__assert_fail@plt+0x2ac4>
   1373c:	mov	r9, r1
   13740:	b	1361c <__assert_fail@plt+0x216c>
   13744:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13748:	cmp	r0, #2
   1374c:	bne	13988 <__assert_fail@plt+0x24d8>
   13750:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13754:	tst	r0, #1
   13758:	bne	13f74 <__assert_fail@plt+0x2ac4>
   1375c:	mov	sl, #0
   13760:	b	1399c <__assert_fail@plt+0x24ec>
   13764:	mov	r0, #102	; 0x66
   13768:	b	13a10 <__assert_fail@plt+0x2560>
   1376c:	mov	r2, #116	; 0x74
   13770:	b	13780 <__assert_fail@plt+0x22d0>
   13774:	mov	r0, #98	; 0x62
   13778:	b	13a10 <__assert_fail@plt+0x2560>
   1377c:	mov	r2, #114	; 0x72
   13780:	ldr	r0, [sp, #68]	; 0x44
   13784:	tst	r0, #1
   13788:	mov	r0, r2
   1378c:	bne	13a10 <__assert_fail@plt+0x2560>
   13790:	b	13f74 <__assert_fail@plt+0x2ac4>
   13794:	ldr	r0, [sp, #84]	; 0x54
   13798:	tst	r0, #1
   1379c:	beq	13a2c <__assert_fail@plt+0x257c>
   137a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   137a4:	tst	r0, #1
   137a8:	bne	14060 <__assert_fail@plt+0x2bb0>
   137ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   137b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   137b4:	subs	r0, r0, #2
   137b8:	movwne	r0, #1
   137bc:	orr	r0, r0, r1
   137c0:	tst	r0, #1
   137c4:	bne	13800 <__assert_fail@plt+0x2350>
   137c8:	cmp	r8, r4
   137cc:	movcc	r0, #39	; 0x27
   137d0:	strbcc	r0, [r5, r8]
   137d4:	add	r0, r8, #1
   137d8:	cmp	r0, r4
   137dc:	movcc	r1, #36	; 0x24
   137e0:	strbcc	r1, [r5, r0]
   137e4:	add	r0, r8, #2
   137e8:	add	r8, r8, #3
   137ec:	cmp	r0, r4
   137f0:	movcc	r1, #39	; 0x27
   137f4:	strbcc	r1, [r5, r0]
   137f8:	mov	r0, #1
   137fc:	str	r0, [fp, #-56]	; 0xffffffc8
   13800:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13804:	cmp	r8, r4
   13808:	mov	r9, #0
   1380c:	mov	sl, #1
   13810:	mov	r6, #48	; 0x30
   13814:	movcc	r0, #92	; 0x5c
   13818:	strbcc	r0, [r5, r8]
   1381c:	add	r0, r8, #1
   13820:	cmp	r1, #2
   13824:	beq	13bf4 <__assert_fail@plt+0x2744>
   13828:	add	r1, r7, #1
   1382c:	cmp	r1, lr
   13830:	bcs	13bf4 <__assert_fail@plt+0x2744>
   13834:	ldrb	r1, [ip, r1]
   13838:	sub	r1, r1, #48	; 0x30
   1383c:	uxtb	r1, r1
   13840:	cmp	r1, #9
   13844:	bhi	13bf4 <__assert_fail@plt+0x2744>
   13848:	cmp	r0, r4
   1384c:	movcc	r1, #48	; 0x30
   13850:	strbcc	r1, [r5, r0]
   13854:	add	r0, r8, #2
   13858:	add	r8, r8, #3
   1385c:	cmp	r0, r4
   13860:	movcc	r1, #48	; 0x30
   13864:	strbcc	r1, [r5, r0]
   13868:	b	1361c <__assert_fail@plt+0x216c>
   1386c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13870:	mov	sl, #0
   13874:	mov	r6, #63	; 0x3f
   13878:	cmp	r0, #5
   1387c:	beq	13bfc <__assert_fail@plt+0x274c>
   13880:	cmp	r0, #2
   13884:	bne	13ca4 <__assert_fail@plt+0x27f4>
   13888:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1388c:	mov	r9, #0
   13890:	tst	r0, #1
   13894:	beq	1361c <__assert_fail@plt+0x216c>
   13898:	b	13f74 <__assert_fail@plt+0x2ac4>
   1389c:	mov	r0, #118	; 0x76
   138a0:	b	13a10 <__assert_fail@plt+0x2560>
   138a4:	mov	r0, #1
   138a8:	mov	r6, #39	; 0x27
   138ac:	str	r0, [sp, #60]	; 0x3c
   138b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138b4:	cmp	r0, #2
   138b8:	bne	13a48 <__assert_fail@plt+0x2598>
   138bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   138c0:	tst	r0, #1
   138c4:	bne	13f74 <__assert_fail@plt+0x2ac4>
   138c8:	ldr	r2, [sp, #56]	; 0x38
   138cc:	clz	r1, r4
   138d0:	mov	sl, #0
   138d4:	mov	r9, #1
   138d8:	lsr	r1, r1, #5
   138dc:	cmp	r2, #0
   138e0:	mov	r0, r2
   138e4:	movwne	r0, #1
   138e8:	orrs	r0, r0, r1
   138ec:	moveq	r2, r4
   138f0:	moveq	r4, r0
   138f4:	cmp	r8, r4
   138f8:	str	r2, [sp, #56]	; 0x38
   138fc:	movcc	r0, #39	; 0x27
   13900:	strbcc	r0, [r5, r8]
   13904:	add	r0, r8, #1
   13908:	cmp	r0, r4
   1390c:	movcc	r1, #92	; 0x5c
   13910:	strbcc	r1, [r5, r0]
   13914:	add	r0, r8, #2
   13918:	add	r8, r8, #3
   1391c:	cmp	r0, r4
   13920:	movcc	r1, #39	; 0x27
   13924:	strbcc	r1, [r5, r0]
   13928:	mov	r0, #0
   1392c:	str	r0, [fp, #-56]	; 0xffffffc8
   13930:	b	1361c <__assert_fail@plt+0x216c>
   13934:	ldr	r0, [sp, #40]	; 0x28
   13938:	str	r4, [sp, #88]	; 0x58
   1393c:	cmp	r0, #1
   13940:	bne	13a50 <__assert_fail@plt+0x25a0>
   13944:	str	lr, [sp, #28]
   13948:	bl	1136c <__ctype_b_loc@plt>
   1394c:	ldr	r0, [r0]
   13950:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13954:	mov	r2, #1
   13958:	add	r0, r0, r6, lsl #1
   1395c:	ldrb	r0, [r0, #1]
   13960:	ubfx	r9, r0, #6, #1
   13964:	ldr	r0, [sp, #52]	; 0x34
   13968:	cmp	r2, #1
   1396c:	orr	r0, r9, r0
   13970:	bhi	13cac <__assert_fail@plt+0x27fc>
   13974:	tst	r0, #1
   13978:	beq	13cac <__assert_fail@plt+0x27fc>
   1397c:	ldr	lr, [sp, #28]
   13980:	ldr	r4, [sp, #88]	; 0x58
   13984:	b	1361c <__assert_fail@plt+0x216c>
   13988:	ldr	r1, [sp, #48]	; 0x30
   1398c:	mov	sl, #0
   13990:	mov	r0, #92	; 0x5c
   13994:	cmp	r1, #0
   13998:	beq	13a10 <__assert_fail@plt+0x2560>
   1399c:	mov	r6, #92	; 0x5c
   139a0:	mov	r9, #0
   139a4:	cmp	sl, #0
   139a8:	bne	139e0 <__assert_fail@plt+0x2530>
   139ac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   139b0:	tst	r0, #1
   139b4:	beq	139e0 <__assert_fail@plt+0x2530>
   139b8:	cmp	r8, r4
   139bc:	movcc	r0, #39	; 0x27
   139c0:	strbcc	r0, [r5, r8]
   139c4:	add	r0, r8, #1
   139c8:	add	r8, r8, #2
   139cc:	cmp	r0, r4
   139d0:	movcc	r1, #39	; 0x27
   139d4:	strbcc	r1, [r5, r0]
   139d8:	mov	r0, #0
   139dc:	str	r0, [fp, #-56]	; 0xffffffc8
   139e0:	mov	r1, r9
   139e4:	mov	r0, r6
   139e8:	cmp	r8, r4
   139ec:	strbcc	r0, [r5, r8]
   139f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   139f4:	add	r8, r8, #1
   139f8:	and	r0, r0, r1
   139fc:	str	r0, [fp, #-48]	; 0xffffffd0
   13a00:	add	r7, r7, #1
   13a04:	cmn	lr, #1
   13a08:	bne	13348 <__assert_fail@plt+0x1e98>
   13a0c:	b	13354 <__assert_fail@plt+0x1ea4>
   13a10:	ldr	r1, [sp, #84]	; 0x54
   13a14:	mov	sl, #0
   13a18:	mov	r9, #0
   13a1c:	tst	r1, #1
   13a20:	mov	r1, #0
   13a24:	beq	1361c <__assert_fail@plt+0x216c>
   13a28:	b	13664 <__assert_fail@plt+0x21b4>
   13a2c:	ldr	r0, [sp, #36]	; 0x24
   13a30:	mov	r6, #0
   13a34:	mov	sl, #0
   13a38:	mov	r9, #0
   13a3c:	cmp	r0, #0
   13a40:	beq	1361c <__assert_fail@plt+0x216c>
   13a44:	b	13a00 <__assert_fail@plt+0x2550>
   13a48:	mov	r9, #1
   13a4c:	b	1361c <__assert_fail@plt+0x216c>
   13a50:	mov	r0, #0
   13a54:	cmn	lr, #1
   13a58:	sub	r4, fp, #40	; 0x28
   13a5c:	str	r0, [fp, #-36]	; 0xffffffdc
   13a60:	str	r0, [fp, #-40]	; 0xffffffd8
   13a64:	bne	13a78 <__assert_fail@plt+0x25c8>
   13a68:	mov	r0, ip
   13a6c:	bl	11390 <strlen@plt>
   13a70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a74:	mov	lr, r0
   13a78:	ldr	r0, [sp, #72]	; 0x48
   13a7c:	mov	r9, #1
   13a80:	mov	r2, #0
   13a84:	str	lr, [sp, #28]
   13a88:	add	r0, r0, r7
   13a8c:	str	r0, [sp, #20]
   13a90:	b	13ad4 <__assert_fail@plt+0x2624>
   13a94:	ldr	r5, [sp, #44]	; 0x2c
   13a98:	add	r5, r0, r5
   13a9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13aa0:	bl	112c4 <iswprint@plt>
   13aa4:	cmp	r0, #0
   13aa8:	sub	r4, fp, #40	; 0x28
   13aac:	movwne	r0, #1
   13ab0:	and	r9, r9, r0
   13ab4:	mov	r0, r4
   13ab8:	bl	1127c <mbsinit@plt>
   13abc:	mov	r2, r5
   13ac0:	ldr	lr, [sp, #28]
   13ac4:	ldr	r5, [fp, #-84]	; 0xffffffac
   13ac8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13acc:	cmp	r0, #0
   13ad0:	bne	13964 <__assert_fail@plt+0x24b4>
   13ad4:	add	r0, r2, r7
   13ad8:	str	r2, [sp, #44]	; 0x2c
   13adc:	mov	r3, r4
   13ae0:	add	r1, ip, r0
   13ae4:	str	r0, [sp, #24]
   13ae8:	sub	r2, lr, r0
   13aec:	sub	r0, fp, #44	; 0x2c
   13af0:	bl	29280 <__assert_fail@plt+0x17dd0>
   13af4:	cmp	r0, #0
   13af8:	beq	13e9c <__assert_fail@plt+0x29ec>
   13afc:	cmn	r0, #1
   13b00:	beq	13e58 <__assert_fail@plt+0x29a8>
   13b04:	ldr	lr, [sp, #28]
   13b08:	cmn	r0, #2
   13b0c:	beq	13e60 <__assert_fail@plt+0x29b0>
   13b10:	ldr	r2, [sp, #64]	; 0x40
   13b14:	ldr	r4, [sp, #88]	; 0x58
   13b18:	ldr	ip, [sp, #84]	; 0x54
   13b1c:	cmp	r0, #2
   13b20:	mov	r1, #0
   13b24:	movwcc	r1, #1
   13b28:	eor	r2, r2, #1
   13b2c:	orrs	r1, r2, r1
   13b30:	bne	13a94 <__assert_fail@plt+0x25e4>
   13b34:	ldr	r1, [sp, #44]	; 0x2c
   13b38:	ldr	r2, [sp, #20]
   13b3c:	add	r1, r2, r1
   13b40:	sub	r2, r0, #1
   13b44:	b	13b54 <__assert_fail@plt+0x26a4>
   13b48:	add	r1, r1, #1
   13b4c:	subs	r2, r2, #1
   13b50:	beq	13a94 <__assert_fail@plt+0x25e4>
   13b54:	ldrb	r3, [r1]
   13b58:	sub	r3, r3, #91	; 0x5b
   13b5c:	cmp	r3, #33	; 0x21
   13b60:	bhi	13b48 <__assert_fail@plt+0x2698>
   13b64:	add	r5, pc, #0
   13b68:	ldr	pc, [r5, r3, lsl #2]
   13b6c:	andeq	r3, r1, r0, asr pc
   13b70:	andeq	r3, r1, r0, asr pc
   13b74:	andeq	r3, r1, r8, asr #22
   13b78:	andeq	r3, r1, r0, asr pc
   13b7c:	andeq	r3, r1, r8, asr #22
   13b80:	andeq	r3, r1, r0, asr pc
   13b84:	andeq	r3, r1, r8, asr #22
   13b88:	andeq	r3, r1, r8, asr #22
   13b8c:	andeq	r3, r1, r8, asr #22
   13b90:	andeq	r3, r1, r8, asr #22
   13b94:	andeq	r3, r1, r8, asr #22
   13b98:	andeq	r3, r1, r8, asr #22
   13b9c:	andeq	r3, r1, r8, asr #22
   13ba0:	andeq	r3, r1, r8, asr #22
   13ba4:	andeq	r3, r1, r8, asr #22
   13ba8:	andeq	r3, r1, r8, asr #22
   13bac:	andeq	r3, r1, r8, asr #22
   13bb0:	andeq	r3, r1, r8, asr #22
   13bb4:	andeq	r3, r1, r8, asr #22
   13bb8:	andeq	r3, r1, r8, asr #22
   13bbc:	andeq	r3, r1, r8, asr #22
   13bc0:	andeq	r3, r1, r8, asr #22
   13bc4:	andeq	r3, r1, r8, asr #22
   13bc8:	andeq	r3, r1, r8, asr #22
   13bcc:	andeq	r3, r1, r8, asr #22
   13bd0:	andeq	r3, r1, r8, asr #22
   13bd4:	andeq	r3, r1, r8, asr #22
   13bd8:	andeq	r3, r1, r8, asr #22
   13bdc:	andeq	r3, r1, r8, asr #22
   13be0:	andeq	r3, r1, r8, asr #22
   13be4:	andeq	r3, r1, r8, asr #22
   13be8:	andeq	r3, r1, r8, asr #22
   13bec:	andeq	r3, r1, r8, asr #22
   13bf0:	andeq	r3, r1, r0, asr pc
   13bf4:	mov	r8, r0
   13bf8:	b	1361c <__assert_fail@plt+0x216c>
   13bfc:	ldr	r0, [sp, #32]
   13c00:	cmp	r0, #0
   13c04:	beq	13ca4 <__assert_fail@plt+0x27f4>
   13c08:	add	r0, r7, #2
   13c0c:	cmp	r0, lr
   13c10:	bcs	13ca4 <__assert_fail@plt+0x27f4>
   13c14:	add	r1, r7, ip
   13c18:	ldrb	r1, [r1, #1]
   13c1c:	cmp	r1, #63	; 0x3f
   13c20:	bne	13ca4 <__assert_fail@plt+0x27f4>
   13c24:	ldrb	r9, [ip, r0]
   13c28:	sub	r2, r9, #33	; 0x21
   13c2c:	cmp	r2, #29
   13c30:	bhi	13ca4 <__assert_fail@plt+0x27f4>
   13c34:	movw	r1, #20929	; 0x51c1
   13c38:	mov	r3, #1
   13c3c:	movt	r1, #14336	; 0x3800
   13c40:	tst	r1, r3, lsl r2
   13c44:	beq	13ca4 <__assert_fail@plt+0x27f4>
   13c48:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13c4c:	tst	r1, #1
   13c50:	bne	13f74 <__assert_fail@plt+0x2ac4>
   13c54:	cmp	r8, r4
   13c58:	add	r2, r8, #1
   13c5c:	mov	r6, r9
   13c60:	mov	r7, r0
   13c64:	mov	r9, #0
   13c68:	movcc	r1, #63	; 0x3f
   13c6c:	strbcc	r1, [r5, r8]
   13c70:	cmp	r2, r4
   13c74:	movcc	r1, #34	; 0x22
   13c78:	strbcc	r1, [r5, r2]
   13c7c:	add	r2, r8, #2
   13c80:	cmp	r2, r4
   13c84:	movcc	r1, #34	; 0x22
   13c88:	strbcc	r1, [r5, r2]
   13c8c:	add	r2, r8, #3
   13c90:	add	r8, r8, #4
   13c94:	cmp	r2, r4
   13c98:	movcc	r1, #63	; 0x3f
   13c9c:	strbcc	r1, [r5, r2]
   13ca0:	b	1361c <__assert_fail@plt+0x216c>
   13ca4:	mov	r9, #0
   13ca8:	b	1361c <__assert_fail@plt+0x216c>
   13cac:	ldr	lr, [sp, #28]
   13cb0:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13cb4:	add	r1, r2, r7
   13cb8:	mov	r2, #0
   13cbc:	str	r1, [sp, #44]	; 0x2c
   13cc0:	tst	r0, #1
   13cc4:	bne	13de0 <__assert_fail@plt+0x2930>
   13cc8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13ccc:	tst	r1, #1
   13cd0:	bne	13f70 <__assert_fail@plt+0x2ac0>
   13cd4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13cd8:	subs	r2, r1, #2
   13cdc:	movwne	r2, #1
   13ce0:	orr	r2, r2, r4
   13ce4:	tst	r2, #1
   13ce8:	bne	13d2c <__assert_fail@plt+0x287c>
   13cec:	ldr	r1, [sp, #88]	; 0x58
   13cf0:	add	r2, r8, #1
   13cf4:	mov	r4, #1
   13cf8:	cmp	r8, r1
   13cfc:	movcc	r1, #39	; 0x27
   13d00:	strbcc	r1, [r5, r8]
   13d04:	ldr	r1, [sp, #88]	; 0x58
   13d08:	cmp	r2, r1
   13d0c:	movcc	r1, #36	; 0x24
   13d10:	strbcc	r1, [r5, r2]
   13d14:	ldr	r1, [sp, #88]	; 0x58
   13d18:	add	r2, r8, #2
   13d1c:	add	r8, r8, #3
   13d20:	cmp	r2, r1
   13d24:	movcc	r1, #39	; 0x27
   13d28:	strbcc	r1, [r5, r2]
   13d2c:	ldr	r1, [sp, #88]	; 0x58
   13d30:	add	r2, r8, #1
   13d34:	cmp	r8, r1
   13d38:	movcc	r1, #92	; 0x5c
   13d3c:	strbcc	r1, [r5, r8]
   13d40:	ldr	r1, [sp, #88]	; 0x58
   13d44:	cmp	r2, r1
   13d48:	bcs	13d5c <__assert_fail@plt+0x28ac>
   13d4c:	uxtb	r3, r6
   13d50:	mov	r1, #48	; 0x30
   13d54:	orr	r3, r1, r3, lsr #6
   13d58:	strb	r3, [r5, r2]
   13d5c:	ldr	r1, [sp, #88]	; 0x58
   13d60:	add	r2, r8, #2
   13d64:	add	r8, r8, #3
   13d68:	cmp	r2, r1
   13d6c:	lsrcc	r3, r6, #3
   13d70:	movcc	r1, #6
   13d74:	bficc	r3, r1, #3, #29
   13d78:	mov	r1, #6
   13d7c:	bfi	r6, r1, #3, #29
   13d80:	strbcc	r3, [r5, r2]
   13d84:	mov	r2, #1
   13d88:	b	13e08 <__assert_fail@plt+0x2958>
   13d8c:	ldr	r1, [sp, #88]	; 0x58
   13d90:	ldr	r5, [fp, #-84]	; 0xffffffac
   13d94:	ldr	r4, [sp, #88]	; 0x58
   13d98:	cmp	r8, r1
   13d9c:	movcc	r1, #39	; 0x27
   13da0:	strbcc	r1, [r5, r8]
   13da4:	add	r1, r8, #1
   13da8:	add	r8, r8, #2
   13dac:	cmp	r1, r4
   13db0:	movcc	r4, #39	; 0x27
   13db4:	strbcc	r4, [r5, r1]
   13db8:	mov	r4, #0
   13dbc:	ldr	r1, [sp, #88]	; 0x58
   13dc0:	cmp	r8, r1
   13dc4:	ldr	r1, [sp, #72]	; 0x48
   13dc8:	strbcc	r6, [r5, r8]
   13dcc:	add	r8, r8, #1
   13dd0:	ldrb	r6, [r1, r7]
   13dd4:	mov	r7, r3
   13dd8:	tst	r0, #1
   13ddc:	beq	13cc8 <__assert_fail@plt+0x2818>
   13de0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13de4:	tst	r1, #1
   13de8:	beq	13e00 <__assert_fail@plt+0x2950>
   13dec:	ldr	r1, [sp, #88]	; 0x58
   13df0:	cmp	r8, r1
   13df4:	movcc	r1, #92	; 0x5c
   13df8:	strbcc	r1, [r5, r8]
   13dfc:	add	r8, r8, #1
   13e00:	mov	r1, #0
   13e04:	str	r1, [fp, #-52]	; 0xffffffcc
   13e08:	ldr	r1, [sp, #44]	; 0x2c
   13e0c:	add	r3, r7, #1
   13e10:	and	sl, r2, #1
   13e14:	cmp	r1, r3
   13e18:	bls	13e3c <__assert_fail@plt+0x298c>
   13e1c:	cmp	sl, #0
   13e20:	mvn	r5, r4
   13e24:	movwne	sl, #1
   13e28:	orr	r5, r5, sl
   13e2c:	tst	r5, #1
   13e30:	beq	13d8c <__assert_fail@plt+0x28dc>
   13e34:	ldr	r5, [fp, #-84]	; 0xffffffac
   13e38:	b	13dbc <__assert_fail@plt+0x290c>
   13e3c:	str	r4, [fp, #-56]	; 0xffffffc8
   13e40:	ldr	r4, [sp, #88]	; 0x58
   13e44:	cmp	sl, #0
   13e48:	movwne	sl, #1
   13e4c:	cmp	sl, #0
   13e50:	beq	139ac <__assert_fail@plt+0x24fc>
   13e54:	b	139e0 <__assert_fail@plt+0x2530>
   13e58:	mov	r9, #0
   13e5c:	b	13e9c <__assert_fail@plt+0x29ec>
   13e60:	ldr	r0, [sp, #24]
   13e64:	mov	r9, #0
   13e68:	cmp	lr, r0
   13e6c:	bls	13e9c <__assert_fail@plt+0x29ec>
   13e70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e74:	ldr	r2, [sp, #44]	; 0x2c
   13e78:	add	r0, ip, r7
   13e7c:	ldrb	r1, [r0, r2]
   13e80:	cmp	r1, #0
   13e84:	beq	13964 <__assert_fail@plt+0x24b4>
   13e88:	add	r2, r2, #1
   13e8c:	add	r1, r7, r2
   13e90:	cmp	r1, lr
   13e94:	bcc	13e7c <__assert_fail@plt+0x29cc>
   13e98:	b	13964 <__assert_fail@plt+0x24b4>
   13e9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ea0:	ldr	r2, [sp, #44]	; 0x2c
   13ea4:	b	13964 <__assert_fail@plt+0x24b4>
   13ea8:	mov	lr, r7
   13eac:	b	13eb4 <__assert_fail@plt+0x2a04>
   13eb0:	mvn	lr, #0
   13eb4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13eb8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13ebc:	eor	r0, r1, #2
   13ec0:	orr	r0, r0, r8
   13ec4:	clz	r0, r0
   13ec8:	lsr	r0, r0, #5
   13ecc:	tst	r2, r0
   13ed0:	bne	13f74 <__assert_fail@plt+0x2ac4>
   13ed4:	subs	r0, r1, #2
   13ed8:	movwne	r0, #1
   13edc:	orr	r0, r2, r0
   13ee0:	tst	r0, #1
   13ee4:	ldreq	r0, [sp, #60]	; 0x3c
   13ee8:	eoreq	r0, r0, #1
   13eec:	tsteq	r0, #1
   13ef0:	bne	14008 <__assert_fail@plt+0x2b58>
   13ef4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ef8:	mov	sl, lr
   13efc:	tst	r0, #1
   13f00:	bne	13fd4 <__assert_fail@plt+0x2b24>
   13f04:	ldr	r6, [sp, #56]	; 0x38
   13f08:	mov	r9, #0
   13f0c:	cmp	r6, #0
   13f10:	beq	14000 <__assert_fail@plt+0x2b50>
   13f14:	ldr	r0, [sp, #84]	; 0x54
   13f18:	mov	r1, #0
   13f1c:	mov	r7, #2
   13f20:	cmp	r4, #0
   13f24:	str	r1, [fp, #-48]	; 0xffffffd0
   13f28:	mov	r1, #0
   13f2c:	str	r1, [fp, #-76]	; 0xffffffb4
   13f30:	beq	130d0 <__assert_fail@plt+0x1c20>
   13f34:	b	14008 <__assert_fail@plt+0x2b58>
   13f38:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f3c:	ldr	r1, [fp, #12]
   13f40:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13f44:	mov	lr, r4
   13f48:	mov	r4, r6
   13f4c:	b	13f94 <__assert_fail@plt+0x2ae4>
   13f50:	tst	ip, #1
   13f54:	ldr	r5, [fp, #-84]	; 0xffffffac
   13f58:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f5c:	ldr	r1, [fp, #12]
   13f60:	mov	r0, #2
   13f64:	movwne	r0, #4
   13f68:	mov	r2, r0
   13f6c:	b	13f94 <__assert_fail@plt+0x2ae4>
   13f70:	ldr	r4, [sp, #88]	; 0x58
   13f74:	ldr	r1, [sp, #84]	; 0x54
   13f78:	mov	r0, #2
   13f7c:	tst	r1, #1
   13f80:	movwne	r0, #4
   13f84:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13f88:	ldr	r1, [fp, #12]
   13f8c:	cmp	r2, #2
   13f90:	moveq	r2, r0
   13f94:	mov	r0, #0
   13f98:	bic	r1, r1, #2
   13f9c:	str	r2, [sp]
   13fa0:	mov	r2, ip
   13fa4:	mov	r3, lr
   13fa8:	str	r0, [sp, #8]
   13fac:	ldr	r0, [sp, #76]	; 0x4c
   13fb0:	str	r1, [sp, #4]
   13fb4:	mov	r1, r4
   13fb8:	str	r0, [sp, #12]
   13fbc:	ldr	r0, [sp, #80]	; 0x50
   13fc0:	str	r0, [sp, #16]
   13fc4:	mov	r0, r5
   13fc8:	bl	13040 <__assert_fail@plt+0x1b90>
   13fcc:	mov	r8, r0
   13fd0:	b	14054 <__assert_fail@plt+0x2ba4>
   13fd4:	mov	r0, #5
   13fd8:	ldr	r1, [sp, #56]	; 0x38
   13fdc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13fe0:	mov	r3, sl
   13fe4:	str	r0, [sp]
   13fe8:	ldr	r0, [fp, #12]
   13fec:	str	r0, [sp, #4]
   13ff0:	ldr	r0, [fp, #16]
   13ff4:	str	r0, [sp, #8]
   13ff8:	ldr	r0, [sp, #76]	; 0x4c
   13ffc:	b	13fb8 <__assert_fail@plt+0x2b08>
   14000:	mov	r0, #0
   14004:	str	r0, [fp, #-76]	; 0xffffffb4
   14008:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1400c:	cmp	r1, #0
   14010:	beq	14048 <__assert_fail@plt+0x2b98>
   14014:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14018:	tst	r0, #1
   1401c:	bne	14048 <__assert_fail@plt+0x2b98>
   14020:	ldrb	r0, [r1]
   14024:	cmp	r0, #0
   14028:	beq	14048 <__assert_fail@plt+0x2b98>
   1402c:	add	r1, r1, #1
   14030:	cmp	r8, r4
   14034:	strbcc	r0, [r5, r8]
   14038:	add	r8, r8, #1
   1403c:	ldrb	r0, [r1], #1
   14040:	cmp	r0, #0
   14044:	bne	14030 <__assert_fail@plt+0x2b80>
   14048:	cmp	r8, r4
   1404c:	movcc	r0, #0
   14050:	strbcc	r0, [r5, r8]
   14054:	mov	r0, r8
   14058:	sub	sp, fp, #28
   1405c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14060:	mov	r0, #4
   14064:	b	13f84 <__assert_fail@plt+0x2ad4>
   14068:	bl	114a4 <abort@plt>
   1406c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14070:	add	fp, sp, #28
   14074:	sub	sp, sp, #28
   14078:	movw	r5, #46480	; 0xb590
   1407c:	cmp	r2, #0
   14080:	mov	r4, r1
   14084:	mov	r7, r0
   14088:	str	r0, [sp, #20]
   1408c:	movt	r5, #3
   14090:	movne	r5, r2
   14094:	bl	113a8 <__errno_location@plt>
   14098:	mov	sl, r0
   1409c:	ldr	r2, [r5, #40]	; 0x28
   140a0:	ldr	r3, [r5, #44]	; 0x2c
   140a4:	ldm	r5, {r0, r1}
   140a8:	orr	r8, r1, #1
   140ac:	add	r9, r5, #8
   140b0:	mov	r1, #0
   140b4:	ldr	r6, [sl]
   140b8:	stm	sp, {r0, r8, r9}
   140bc:	mov	r0, #0
   140c0:	str	r2, [sp, #12]
   140c4:	str	r3, [sp, #16]
   140c8:	mov	r2, r7
   140cc:	mov	r3, r4
   140d0:	str	r6, [sp, #24]
   140d4:	mov	r6, r4
   140d8:	bl	13040 <__assert_fail@plt+0x1b90>
   140dc:	add	r7, r0, #1
   140e0:	mov	r0, r7
   140e4:	bl	27088 <__assert_fail@plt+0x15bd8>
   140e8:	mov	r4, r0
   140ec:	ldr	r0, [r5]
   140f0:	ldr	r2, [r5, #44]	; 0x2c
   140f4:	ldr	r1, [r5, #40]	; 0x28
   140f8:	mov	r3, r6
   140fc:	stm	sp, {r0, r8, r9}
   14100:	str	r2, [sp, #16]
   14104:	ldr	r2, [sp, #20]
   14108:	str	r1, [sp, #12]
   1410c:	mov	r0, r4
   14110:	mov	r1, r7
   14114:	bl	13040 <__assert_fail@plt+0x1b90>
   14118:	ldr	r0, [sp, #24]
   1411c:	str	r0, [sl]
   14120:	mov	r0, r4
   14124:	sub	sp, fp, #28
   14128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14130:	add	fp, sp, #28
   14134:	sub	sp, sp, #36	; 0x24
   14138:	movw	r8, #46480	; 0xb590
   1413c:	cmp	r3, #0
   14140:	mov	r4, r2
   14144:	str	r2, [sp, #24]
   14148:	mov	r5, r1
   1414c:	mov	r6, r0
   14150:	str	r0, [sp, #20]
   14154:	movt	r8, #3
   14158:	movne	r8, r3
   1415c:	bl	113a8 <__errno_location@plt>
   14160:	str	r0, [sp, #28]
   14164:	ldr	r1, [r8, #40]	; 0x28
   14168:	ldr	r2, [r8, #44]	; 0x2c
   1416c:	ldr	r7, [r0]
   14170:	cmp	r4, #0
   14174:	add	sl, r8, #8
   14178:	mov	r0, #0
   1417c:	ldm	r8, {r3, r9}
   14180:	orreq	r9, r9, #1
   14184:	stm	sp, {r3, r9, sl}
   14188:	str	r1, [sp, #12]
   1418c:	str	r2, [sp, #16]
   14190:	mov	r1, #0
   14194:	mov	r2, r6
   14198:	mov	r3, r5
   1419c:	str	r7, [sp, #32]
   141a0:	mov	r7, r5
   141a4:	bl	13040 <__assert_fail@plt+0x1b90>
   141a8:	add	r4, r0, #1
   141ac:	mov	r5, r0
   141b0:	mov	r0, r4
   141b4:	bl	27088 <__assert_fail@plt+0x15bd8>
   141b8:	mov	r6, r0
   141bc:	ldr	r0, [r8]
   141c0:	ldr	r2, [r8, #44]	; 0x2c
   141c4:	ldr	r1, [r8, #40]	; 0x28
   141c8:	mov	r3, r7
   141cc:	stm	sp, {r0, r9, sl}
   141d0:	str	r2, [sp, #16]
   141d4:	ldr	r2, [sp, #20]
   141d8:	str	r1, [sp, #12]
   141dc:	mov	r0, r6
   141e0:	mov	r1, r4
   141e4:	bl	13040 <__assert_fail@plt+0x1b90>
   141e8:	ldr	r0, [sp, #24]
   141ec:	ldr	r1, [sp, #32]
   141f0:	ldr	r2, [sp, #28]
   141f4:	cmp	r0, #0
   141f8:	str	r1, [r2]
   141fc:	strne	r5, [r0]
   14200:	mov	r0, r6
   14204:	sub	sp, fp, #28
   14208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1420c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14210:	add	fp, sp, #24
   14214:	movw	r5, #45420	; 0xb16c
   14218:	movw	r8, #45416	; 0xb168
   1421c:	movt	r5, #3
   14220:	movt	r8, #3
   14224:	ldr	r0, [r5]
   14228:	ldr	r4, [r8]
   1422c:	cmp	r0, #2
   14230:	blt	1425c <__assert_fail@plt+0x2dac>
   14234:	add	r7, r4, #12
   14238:	mov	r6, #0
   1423c:	ldr	r0, [r7, r6, lsl #3]
   14240:	bl	29220 <__assert_fail@plt+0x17d70>
   14244:	ldr	r1, [r5]
   14248:	add	r2, r6, #2
   1424c:	add	r0, r6, #1
   14250:	mov	r6, r0
   14254:	cmp	r2, r1
   14258:	blt	1423c <__assert_fail@plt+0x2d8c>
   1425c:	ldr	r0, [r4, #4]
   14260:	movw	r9, #46528	; 0xb5c0
   14264:	movw	r7, #45424	; 0xb170
   14268:	movt	r9, #3
   1426c:	movt	r7, #3
   14270:	cmp	r0, r9
   14274:	beq	14284 <__assert_fail@plt+0x2dd4>
   14278:	bl	29220 <__assert_fail@plt+0x17d70>
   1427c:	mov	r0, #256	; 0x100
   14280:	stm	r7, {r0, r9}
   14284:	cmp	r4, r7
   14288:	beq	14298 <__assert_fail@plt+0x2de8>
   1428c:	mov	r0, r4
   14290:	bl	29220 <__assert_fail@plt+0x17d70>
   14294:	str	r7, [r8]
   14298:	mov	r0, #1
   1429c:	str	r0, [r5]
   142a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   142a4:	movw	r3, #46480	; 0xb590
   142a8:	mvn	r2, #0
   142ac:	movt	r3, #3
   142b0:	b	142b4 <__assert_fail@plt+0x2e04>
   142b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142b8:	add	fp, sp, #28
   142bc:	sub	sp, sp, #44	; 0x2c
   142c0:	mov	r7, r3
   142c4:	str	r2, [sp, #36]	; 0x24
   142c8:	str	r1, [sp, #32]
   142cc:	mov	r5, r0
   142d0:	bl	113a8 <__errno_location@plt>
   142d4:	cmp	r5, #0
   142d8:	bmi	14448 <__assert_fail@plt+0x2f98>
   142dc:	cmn	r5, #-2147483647	; 0x80000001
   142e0:	beq	14448 <__assert_fail@plt+0x2f98>
   142e4:	movw	r8, #45420	; 0xb16c
   142e8:	movw	r4, #45416	; 0xb168
   142ec:	str	r0, [sp, #28]
   142f0:	ldr	r0, [r0]
   142f4:	movt	r8, #3
   142f8:	movt	r4, #3
   142fc:	ldr	r1, [r8]
   14300:	ldr	r6, [r4]
   14304:	str	r0, [sp, #24]
   14308:	cmp	r1, r5
   1430c:	ble	14318 <__assert_fail@plt+0x2e68>
   14310:	mov	sl, r6
   14314:	b	14384 <__assert_fail@plt+0x2ed4>
   14318:	movw	r9, #45424	; 0xb170
   1431c:	mov	r0, #8
   14320:	str	r1, [fp, #-32]	; 0xffffffe0
   14324:	sub	r1, r5, r1
   14328:	mvn	r3, #-2147483648	; 0x80000000
   1432c:	movt	r9, #3
   14330:	str	r0, [sp]
   14334:	add	r2, r1, #1
   14338:	sub	r1, fp, #32
   1433c:	subs	r0, r6, r9
   14340:	movne	r0, r6
   14344:	bl	27288 <__assert_fail@plt+0x15dd8>
   14348:	mov	sl, r0
   1434c:	cmp	r6, r9
   14350:	str	r0, [r4]
   14354:	bne	14360 <__assert_fail@plt+0x2eb0>
   14358:	ldrd	r0, [r9]
   1435c:	stm	sl, {r0, r1}
   14360:	ldr	r1, [r8]
   14364:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14368:	add	r0, sl, r1, lsl #3
   1436c:	sub	r1, r2, r1
   14370:	lsl	r2, r1, #3
   14374:	mov	r1, #0
   14378:	bl	113cc <memset@plt>
   1437c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14380:	str	r0, [r8]
   14384:	mov	r9, sl
   14388:	ldm	r7, {r0, r1}
   1438c:	orr	r8, r1, #1
   14390:	add	r1, r7, #8
   14394:	ldr	r2, [r7, #40]	; 0x28
   14398:	ldr	r3, [r7, #44]	; 0x2c
   1439c:	ldr	r6, [r9, r5, lsl #3]!
   143a0:	str	r1, [sp, #20]
   143a4:	ldr	r4, [r9, #4]!
   143a8:	stm	sp, {r0, r8}
   143ac:	add	r0, sp, #8
   143b0:	stm	r0, {r1, r2, r3}
   143b4:	ldr	r2, [sp, #32]
   143b8:	ldr	r3, [sp, #36]	; 0x24
   143bc:	mov	r1, r6
   143c0:	mov	r0, r4
   143c4:	bl	13040 <__assert_fail@plt+0x1b90>
   143c8:	cmp	r6, r0
   143cc:	bhi	14430 <__assert_fail@plt+0x2f80>
   143d0:	add	r6, r0, #1
   143d4:	movw	r0, #46528	; 0xb5c0
   143d8:	movt	r0, #3
   143dc:	str	r6, [sl, r5, lsl #3]
   143e0:	cmp	r4, r0
   143e4:	beq	143f0 <__assert_fail@plt+0x2f40>
   143e8:	mov	r0, r4
   143ec:	bl	29220 <__assert_fail@plt+0x17d70>
   143f0:	mov	r0, r6
   143f4:	bl	27088 <__assert_fail@plt+0x15bd8>
   143f8:	str	r0, [r9]
   143fc:	mov	r4, r0
   14400:	add	r3, sp, #8
   14404:	ldr	r0, [r7]
   14408:	ldr	r1, [r7, #40]	; 0x28
   1440c:	ldr	r2, [r7, #44]	; 0x2c
   14410:	stm	sp, {r0, r8}
   14414:	ldr	r0, [sp, #20]
   14418:	stm	r3, {r0, r1, r2}
   1441c:	ldr	r2, [sp, #32]
   14420:	ldr	r3, [sp, #36]	; 0x24
   14424:	mov	r0, r4
   14428:	mov	r1, r6
   1442c:	bl	13040 <__assert_fail@plt+0x1b90>
   14430:	ldr	r0, [sp, #28]
   14434:	ldr	r1, [sp, #24]
   14438:	str	r1, [r0]
   1443c:	mov	r0, r4
   14440:	sub	sp, fp, #28
   14444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14448:	bl	114a4 <abort@plt>
   1444c:	movw	r3, #46480	; 0xb590
   14450:	movt	r3, #3
   14454:	b	142b4 <__assert_fail@plt+0x2e04>
   14458:	movw	r3, #46480	; 0xb590
   1445c:	mov	r1, r0
   14460:	mov	r0, #0
   14464:	mvn	r2, #0
   14468:	movt	r3, #3
   1446c:	b	142b4 <__assert_fail@plt+0x2e04>
   14470:	movw	r3, #46480	; 0xb590
   14474:	mov	r2, r1
   14478:	mov	r1, r0
   1447c:	mov	r0, #0
   14480:	movt	r3, #3
   14484:	b	142b4 <__assert_fail@plt+0x2e04>
   14488:	push	{fp, lr}
   1448c:	mov	fp, sp
   14490:	sub	sp, sp, #48	; 0x30
   14494:	vmov.i32	q8, #0	; 0x00000000
   14498:	mov	ip, #32
   1449c:	mov	r3, sp
   144a0:	mov	lr, r2
   144a4:	cmp	r1, #10
   144a8:	add	r2, r3, #16
   144ac:	vst1.64	{d16-d17}, [r3], ip
   144b0:	vst1.64	{d16-d17}, [r2]
   144b4:	vst1.64	{d16-d17}, [r3]
   144b8:	beq	144d8 <__assert_fail@plt+0x3028>
   144bc:	str	r1, [sp]
   144c0:	mov	r3, sp
   144c4:	mov	r1, lr
   144c8:	mvn	r2, #0
   144cc:	bl	142b4 <__assert_fail@plt+0x2e04>
   144d0:	mov	sp, fp
   144d4:	pop	{fp, pc}
   144d8:	bl	114a4 <abort@plt>
   144dc:	push	{r4, sl, fp, lr}
   144e0:	add	fp, sp, #8
   144e4:	sub	sp, sp, #48	; 0x30
   144e8:	vmov.i32	q8, #0	; 0x00000000
   144ec:	mov	ip, r3
   144f0:	mov	r3, sp
   144f4:	mov	lr, #32
   144f8:	cmp	r1, #10
   144fc:	add	r4, r3, #16
   14500:	vst1.64	{d16-d17}, [r3], lr
   14504:	vst1.64	{d16-d17}, [r4]
   14508:	vst1.64	{d16-d17}, [r3]
   1450c:	beq	1452c <__assert_fail@plt+0x307c>
   14510:	str	r1, [sp]
   14514:	mov	r1, r2
   14518:	mov	r3, sp
   1451c:	mov	r2, ip
   14520:	bl	142b4 <__assert_fail@plt+0x2e04>
   14524:	sub	sp, fp, #8
   14528:	pop	{r4, sl, fp, pc}
   1452c:	bl	114a4 <abort@plt>
   14530:	push	{fp, lr}
   14534:	mov	fp, sp
   14538:	sub	sp, sp, #48	; 0x30
   1453c:	vmov.i32	q8, #0	; 0x00000000
   14540:	mov	r3, sp
   14544:	mov	ip, #32
   14548:	cmp	r0, #10
   1454c:	add	r2, r3, #16
   14550:	vst1.64	{d16-d17}, [r3], ip
   14554:	vst1.64	{d16-d17}, [r2]
   14558:	vst1.64	{d16-d17}, [r3]
   1455c:	beq	1457c <__assert_fail@plt+0x30cc>
   14560:	str	r0, [sp]
   14564:	mov	r3, sp
   14568:	mov	r0, #0
   1456c:	mvn	r2, #0
   14570:	bl	142b4 <__assert_fail@plt+0x2e04>
   14574:	mov	sp, fp
   14578:	pop	{fp, pc}
   1457c:	bl	114a4 <abort@plt>
   14580:	push	{fp, lr}
   14584:	mov	fp, sp
   14588:	sub	sp, sp, #48	; 0x30
   1458c:	vmov.i32	q8, #0	; 0x00000000
   14590:	mov	r3, sp
   14594:	mov	ip, #32
   14598:	cmp	r0, #10
   1459c:	add	lr, r3, #16
   145a0:	vst1.64	{d16-d17}, [r3], ip
   145a4:	vst1.64	{d16-d17}, [lr]
   145a8:	vst1.64	{d16-d17}, [r3]
   145ac:	beq	145c8 <__assert_fail@plt+0x3118>
   145b0:	str	r0, [sp]
   145b4:	mov	r3, sp
   145b8:	mov	r0, #0
   145bc:	bl	142b4 <__assert_fail@plt+0x2e04>
   145c0:	mov	sp, fp
   145c4:	pop	{fp, pc}
   145c8:	bl	114a4 <abort@plt>
   145cc:	push	{r4, sl, fp, lr}
   145d0:	add	fp, sp, #8
   145d4:	sub	sp, sp, #48	; 0x30
   145d8:	mov	lr, r0
   145dc:	movw	r0, #46480	; 0xb590
   145e0:	mov	ip, r1
   145e4:	mov	r1, #32
   145e8:	mov	r4, #1
   145ec:	movt	r0, #3
   145f0:	add	r3, r0, #16
   145f4:	vld1.64	{d16-d17}, [r0], r1
   145f8:	vld1.64	{d20-d21}, [r0]
   145fc:	vld1.64	{d18-d19}, [r3]
   14600:	mov	r3, sp
   14604:	add	r0, r3, #32
   14608:	add	r1, r3, #16
   1460c:	vst1.64	{d20-d21}, [r0]
   14610:	mov	r0, #28
   14614:	vst1.64	{d18-d19}, [r1]
   14618:	mov	r1, r3
   1461c:	and	r0, r0, r2, lsr #3
   14620:	and	r2, r2, #31
   14624:	vst1.64	{d16-d17}, [r1], r0
   14628:	ldr	r0, [r1, #8]
   1462c:	bic	r4, r4, r0, lsr r2
   14630:	eor	r0, r0, r4, lsl r2
   14634:	mov	r2, ip
   14638:	str	r0, [r1, #8]
   1463c:	mov	r0, #0
   14640:	mov	r1, lr
   14644:	bl	142b4 <__assert_fail@plt+0x2e04>
   14648:	sub	sp, fp, #8
   1464c:	pop	{r4, sl, fp, pc}
   14650:	push	{fp, lr}
   14654:	mov	fp, sp
   14658:	sub	sp, sp, #48	; 0x30
   1465c:	mov	ip, r0
   14660:	movw	r0, #46480	; 0xb590
   14664:	mov	r2, #32
   14668:	movt	r0, #3
   1466c:	add	r3, r0, #16
   14670:	vld1.64	{d16-d17}, [r0], r2
   14674:	vld1.64	{d20-d21}, [r0]
   14678:	vld1.64	{d18-d19}, [r3]
   1467c:	mov	r3, sp
   14680:	add	r0, r3, #32
   14684:	add	r2, r3, #16
   14688:	vst1.64	{d20-d21}, [r0]
   1468c:	mov	r0, #28
   14690:	vst1.64	{d18-d19}, [r2]
   14694:	mov	r2, r3
   14698:	and	r0, r0, r1, lsr #3
   1469c:	and	r1, r1, #31
   146a0:	vst1.64	{d16-d17}, [r2], r0
   146a4:	mov	r0, #1
   146a8:	ldr	lr, [r2, #8]
   146ac:	bic	r0, r0, lr, lsr r1
   146b0:	eor	r0, lr, r0, lsl r1
   146b4:	mov	r1, ip
   146b8:	str	r0, [r2, #8]
   146bc:	mov	r0, #0
   146c0:	mvn	r2, #0
   146c4:	bl	142b4 <__assert_fail@plt+0x2e04>
   146c8:	mov	sp, fp
   146cc:	pop	{fp, pc}
   146d0:	push	{fp, lr}
   146d4:	mov	fp, sp
   146d8:	sub	sp, sp, #48	; 0x30
   146dc:	mov	r1, r0
   146e0:	movw	r0, #46480	; 0xb590
   146e4:	mov	r3, #32
   146e8:	movt	r0, #3
   146ec:	add	r2, r0, #16
   146f0:	vld1.64	{d16-d17}, [r0], r3
   146f4:	mov	r3, sp
   146f8:	vld1.64	{d18-d19}, [r2]
   146fc:	vld1.64	{d20-d21}, [r0]
   14700:	add	r2, r3, #16
   14704:	add	r0, r3, #32
   14708:	vst1.64	{d18-d19}, [r2]
   1470c:	vst1.64	{d20-d21}, [r0]
   14710:	mov	r0, #12
   14714:	mov	r2, r3
   14718:	vst1.64	{d16-d17}, [r2], r0
   1471c:	ldr	r0, [r2]
   14720:	orr	r0, r0, #67108864	; 0x4000000
   14724:	str	r0, [r2]
   14728:	mov	r0, #0
   1472c:	mvn	r2, #0
   14730:	bl	142b4 <__assert_fail@plt+0x2e04>
   14734:	mov	sp, fp
   14738:	pop	{fp, pc}
   1473c:	push	{fp, lr}
   14740:	mov	fp, sp
   14744:	sub	sp, sp, #48	; 0x30
   14748:	mov	ip, r1
   1474c:	mov	r1, r0
   14750:	movw	r0, #46480	; 0xb590
   14754:	mov	r2, #32
   14758:	movt	r0, #3
   1475c:	add	r3, r0, #16
   14760:	vld1.64	{d16-d17}, [r0], r2
   14764:	vld1.64	{d18-d19}, [r3]
   14768:	vld1.64	{d20-d21}, [r0]
   1476c:	mov	r3, sp
   14770:	add	r2, r3, #16
   14774:	add	r0, r3, #32
   14778:	vst1.64	{d18-d19}, [r2]
   1477c:	vst1.64	{d20-d21}, [r0]
   14780:	mov	r0, #12
   14784:	mov	r2, r3
   14788:	vst1.64	{d16-d17}, [r2], r0
   1478c:	ldr	r0, [r2]
   14790:	orr	r0, r0, #67108864	; 0x4000000
   14794:	str	r0, [r2]
   14798:	mov	r0, #0
   1479c:	mov	r2, ip
   147a0:	bl	142b4 <__assert_fail@plt+0x2e04>
   147a4:	mov	sp, fp
   147a8:	pop	{fp, pc}
   147ac:	push	{r4, sl, fp, lr}
   147b0:	add	fp, sp, #8
   147b4:	sub	sp, sp, #96	; 0x60
   147b8:	vmov.i32	q8, #0	; 0x00000000
   147bc:	mov	ip, r2
   147c0:	mov	r2, sp
   147c4:	mov	r4, #28
   147c8:	cmp	r1, #10
   147cc:	mov	r3, r2
   147d0:	add	lr, r2, #16
   147d4:	vst1.64	{d16-d17}, [r3], r4
   147d8:	vst1.64	{d16-d17}, [lr]
   147dc:	vst1.32	{d16-d17}, [r3]
   147e0:	beq	14830 <__assert_fail@plt+0x3380>
   147e4:	vld1.64	{d16-d17}, [r2], r4
   147e8:	vld1.64	{d18-d19}, [lr]
   147ec:	add	r3, sp, #48	; 0x30
   147f0:	vld1.32	{d20-d21}, [r2]
   147f4:	add	r2, r3, #20
   147f8:	add	r4, r3, #4
   147fc:	vst1.32	{d18-d19}, [r2]
   14800:	add	r2, r3, #32
   14804:	vst1.32	{d16-d17}, [r4]
   14808:	vst1.32	{d20-d21}, [r2]
   1480c:	str	r1, [sp, #48]	; 0x30
   14810:	mvn	r2, #0
   14814:	ldr	r1, [sp, #60]	; 0x3c
   14818:	orr	r1, r1, #67108864	; 0x4000000
   1481c:	str	r1, [sp, #60]	; 0x3c
   14820:	mov	r1, ip
   14824:	bl	142b4 <__assert_fail@plt+0x2e04>
   14828:	sub	sp, fp, #8
   1482c:	pop	{r4, sl, fp, pc}
   14830:	bl	114a4 <abort@plt>
   14834:	push	{r4, r5, r6, sl, fp, lr}
   14838:	add	fp, sp, #16
   1483c:	sub	sp, sp, #48	; 0x30
   14840:	mov	ip, r3
   14844:	movw	r3, #46480	; 0xb590
   14848:	mov	r6, #32
   1484c:	cmp	r1, #0
   14850:	mov	r4, sp
   14854:	movt	r3, #3
   14858:	cmpne	r2, #0
   1485c:	add	r5, r4, #16
   14860:	add	lr, r3, #16
   14864:	vld1.64	{d16-d17}, [r3], r6
   14868:	vld1.64	{d18-d19}, [lr]
   1486c:	vld1.64	{d20-d21}, [r3]
   14870:	mov	r3, #10
   14874:	vst1.64	{d16-d17}, [r4], r6
   14878:	vst1.64	{d18-d19}, [r5]
   1487c:	vst1.64	{d20-d21}, [r4]
   14880:	str	r3, [sp]
   14884:	bne	1488c <__assert_fail@plt+0x33dc>
   14888:	bl	114a4 <abort@plt>
   1488c:	str	r2, [sp, #44]	; 0x2c
   14890:	str	r1, [sp, #40]	; 0x28
   14894:	mov	r3, sp
   14898:	mov	r1, ip
   1489c:	mvn	r2, #0
   148a0:	bl	142b4 <__assert_fail@plt+0x2e04>
   148a4:	sub	sp, fp, #16
   148a8:	pop	{r4, r5, r6, sl, fp, pc}
   148ac:	push	{r4, r5, r6, sl, fp, lr}
   148b0:	add	fp, sp, #16
   148b4:	sub	sp, sp, #48	; 0x30
   148b8:	mov	lr, r3
   148bc:	movw	r3, #46480	; 0xb590
   148c0:	mov	r6, #32
   148c4:	cmp	r1, #0
   148c8:	mov	r4, sp
   148cc:	movt	r3, #3
   148d0:	cmpne	r2, #0
   148d4:	add	r5, r4, #16
   148d8:	add	ip, r3, #16
   148dc:	vld1.64	{d16-d17}, [r3], r6
   148e0:	vld1.64	{d18-d19}, [ip]
   148e4:	vld1.64	{d20-d21}, [r3]
   148e8:	mov	r3, #10
   148ec:	vst1.64	{d16-d17}, [r4], r6
   148f0:	vst1.64	{d18-d19}, [r5]
   148f4:	vst1.64	{d20-d21}, [r4]
   148f8:	str	r3, [sp]
   148fc:	bne	14904 <__assert_fail@plt+0x3454>
   14900:	bl	114a4 <abort@plt>
   14904:	ldr	ip, [fp, #8]
   14908:	str	r2, [sp, #44]	; 0x2c
   1490c:	str	r1, [sp, #40]	; 0x28
   14910:	mov	r3, sp
   14914:	mov	r1, lr
   14918:	mov	r2, ip
   1491c:	bl	142b4 <__assert_fail@plt+0x2e04>
   14920:	sub	sp, fp, #16
   14924:	pop	{r4, r5, r6, sl, fp, pc}
   14928:	push	{r4, sl, fp, lr}
   1492c:	add	fp, sp, #8
   14930:	sub	sp, sp, #48	; 0x30
   14934:	movw	r3, #46480	; 0xb590
   14938:	mov	lr, #32
   1493c:	mov	ip, r2
   14940:	cmp	r0, #0
   14944:	movt	r3, #3
   14948:	cmpne	r1, #0
   1494c:	add	r2, r3, #16
   14950:	vld1.64	{d16-d17}, [r3], lr
   14954:	vld1.64	{d20-d21}, [r3]
   14958:	vld1.64	{d18-d19}, [r2]
   1495c:	mov	r2, sp
   14960:	add	r4, r2, #16
   14964:	vst1.64	{d16-d17}, [r2], lr
   14968:	vst1.64	{d20-d21}, [r2]
   1496c:	mov	r2, #10
   14970:	vst1.64	{d18-d19}, [r4]
   14974:	str	r2, [sp]
   14978:	bne	14980 <__assert_fail@plt+0x34d0>
   1497c:	bl	114a4 <abort@plt>
   14980:	str	r1, [sp, #44]	; 0x2c
   14984:	str	r0, [sp, #40]	; 0x28
   14988:	mov	r3, sp
   1498c:	mov	r0, #0
   14990:	mov	r1, ip
   14994:	mvn	r2, #0
   14998:	bl	142b4 <__assert_fail@plt+0x2e04>
   1499c:	sub	sp, fp, #8
   149a0:	pop	{r4, sl, fp, pc}
   149a4:	push	{r4, r5, fp, lr}
   149a8:	add	fp, sp, #8
   149ac:	sub	sp, sp, #48	; 0x30
   149b0:	mov	ip, r3
   149b4:	movw	r3, #46480	; 0xb590
   149b8:	mov	r4, #32
   149bc:	mov	lr, r2
   149c0:	cmp	r0, #0
   149c4:	movt	r3, #3
   149c8:	cmpne	r1, #0
   149cc:	add	r2, r3, #16
   149d0:	vld1.64	{d16-d17}, [r3], r4
   149d4:	vld1.64	{d20-d21}, [r3]
   149d8:	vld1.64	{d18-d19}, [r2]
   149dc:	mov	r2, sp
   149e0:	add	r5, r2, #16
   149e4:	vst1.64	{d16-d17}, [r2], r4
   149e8:	vst1.64	{d20-d21}, [r2]
   149ec:	mov	r2, #10
   149f0:	vst1.64	{d18-d19}, [r5]
   149f4:	str	r2, [sp]
   149f8:	bne	14a00 <__assert_fail@plt+0x3550>
   149fc:	bl	114a4 <abort@plt>
   14a00:	str	r1, [sp, #44]	; 0x2c
   14a04:	str	r0, [sp, #40]	; 0x28
   14a08:	mov	r3, sp
   14a0c:	mov	r0, #0
   14a10:	mov	r1, lr
   14a14:	mov	r2, ip
   14a18:	bl	142b4 <__assert_fail@plt+0x2e04>
   14a1c:	sub	sp, fp, #8
   14a20:	pop	{r4, r5, fp, pc}
   14a24:	movw	r3, #45432	; 0xb178
   14a28:	movt	r3, #3
   14a2c:	b	142b4 <__assert_fail@plt+0x2e04>
   14a30:	movw	r3, #45432	; 0xb178
   14a34:	mov	r2, r1
   14a38:	mov	r1, r0
   14a3c:	mov	r0, #0
   14a40:	movt	r3, #3
   14a44:	b	142b4 <__assert_fail@plt+0x2e04>
   14a48:	movw	r3, #45432	; 0xb178
   14a4c:	mvn	r2, #0
   14a50:	movt	r3, #3
   14a54:	b	142b4 <__assert_fail@plt+0x2e04>
   14a58:	movw	r3, #45432	; 0xb178
   14a5c:	mov	r1, r0
   14a60:	mov	r0, #0
   14a64:	mvn	r2, #0
   14a68:	movt	r3, #3
   14a6c:	b	142b4 <__assert_fail@plt+0x2e04>
   14a70:	push	{r4, r5, fp, lr}
   14a74:	add	fp, sp, #8
   14a78:	mov	r5, r0
   14a7c:	mov	r4, r1
   14a80:	mov	r0, #0
   14a84:	mov	r2, #5
   14a88:	mov	r1, r5
   14a8c:	bl	112a0 <dcgettext@plt>
   14a90:	cmp	r0, r5
   14a94:	popne	{r4, r5, fp, pc}
   14a98:	bl	29248 <__assert_fail@plt+0x17d98>
   14a9c:	ldrb	r1, [r0]
   14aa0:	and	r1, r1, #223	; 0xdf
   14aa4:	cmp	r1, #71	; 0x47
   14aa8:	beq	14b10 <__assert_fail@plt+0x3660>
   14aac:	cmp	r1, #85	; 0x55
   14ab0:	bne	14b68 <__assert_fail@plt+0x36b8>
   14ab4:	ldrb	r1, [r0, #1]
   14ab8:	and	r1, r1, #223	; 0xdf
   14abc:	cmp	r1, #84	; 0x54
   14ac0:	bne	14b68 <__assert_fail@plt+0x36b8>
   14ac4:	ldrb	r1, [r0, #2]
   14ac8:	and	r1, r1, #223	; 0xdf
   14acc:	cmp	r1, #70	; 0x46
   14ad0:	bne	14b68 <__assert_fail@plt+0x36b8>
   14ad4:	ldrb	r1, [r0, #3]
   14ad8:	cmp	r1, #45	; 0x2d
   14adc:	bne	14b68 <__assert_fail@plt+0x36b8>
   14ae0:	ldrb	r1, [r0, #4]
   14ae4:	cmp	r1, #56	; 0x38
   14ae8:	bne	14b68 <__assert_fail@plt+0x36b8>
   14aec:	ldrb	r0, [r0, #5]
   14af0:	cmp	r0, #0
   14af4:	bne	14b68 <__assert_fail@plt+0x36b8>
   14af8:	ldrb	r1, [r5]
   14afc:	movw	r2, #41904	; 0xa3b0
   14b00:	movw	r0, #41908	; 0xa3b4
   14b04:	movt	r2, #2
   14b08:	movt	r0, #2
   14b0c:	b	14b98 <__assert_fail@plt+0x36e8>
   14b10:	ldrb	r1, [r0, #1]
   14b14:	and	r1, r1, #223	; 0xdf
   14b18:	cmp	r1, #66	; 0x42
   14b1c:	bne	14b68 <__assert_fail@plt+0x36b8>
   14b20:	ldrb	r1, [r0, #2]
   14b24:	cmp	r1, #49	; 0x31
   14b28:	bne	14b68 <__assert_fail@plt+0x36b8>
   14b2c:	ldrb	r1, [r0, #3]
   14b30:	cmp	r1, #56	; 0x38
   14b34:	bne	14b68 <__assert_fail@plt+0x36b8>
   14b38:	ldrb	r1, [r0, #4]
   14b3c:	cmp	r1, #48	; 0x30
   14b40:	bne	14b68 <__assert_fail@plt+0x36b8>
   14b44:	ldrb	r1, [r0, #5]
   14b48:	cmp	r1, #51	; 0x33
   14b4c:	bne	14b68 <__assert_fail@plt+0x36b8>
   14b50:	ldrb	r1, [r0, #6]
   14b54:	cmp	r1, #48	; 0x30
   14b58:	bne	14b68 <__assert_fail@plt+0x36b8>
   14b5c:	ldrb	r0, [r0, #7]
   14b60:	cmp	r0, #0
   14b64:	beq	14b84 <__assert_fail@plt+0x36d4>
   14b68:	movw	r1, #41898	; 0xa3aa
   14b6c:	movw	r0, #41902	; 0xa3ae
   14b70:	cmp	r4, #9
   14b74:	movt	r1, #2
   14b78:	movt	r0, #2
   14b7c:	moveq	r0, r1
   14b80:	pop	{r4, r5, fp, pc}
   14b84:	ldrb	r1, [r5]
   14b88:	movw	r2, #41912	; 0xa3b8
   14b8c:	movw	r0, #41916	; 0xa3bc
   14b90:	movt	r2, #2
   14b94:	movt	r0, #2
   14b98:	cmp	r1, #96	; 0x60
   14b9c:	moveq	r0, r2
   14ba0:	pop	{r4, r5, fp, pc}
	...
   14bb0:	push	{fp, lr}
   14bb4:	mov	fp, sp
   14bb8:	mov	lr, r0
   14bbc:	movw	r0, #46784	; 0xb6c0
   14bc0:	mov	ip, r1
   14bc4:	ldrb	r1, [r2, #28]
   14bc8:	movt	r0, #3
   14bcc:	ldr	r3, [r0]
   14bd0:	mov	r0, #16
   14bd4:	and	r1, r1, #111	; 0x6f
   14bd8:	and	r0, r0, r3, lsr #21
   14bdc:	orr	r0, r1, r0
   14be0:	mov	r1, lr
   14be4:	orr	r0, r0, #128	; 0x80
   14be8:	strb	r0, [r2, #28]
   14bec:	mov	r0, r2
   14bf0:	mov	r2, ip
   14bf4:	bl	14c30 <__assert_fail@plt+0x3780>
   14bf8:	cmp	r0, #0
   14bfc:	beq	14c28 <__assert_fail@plt+0x3778>
   14c00:	movw	r1, #42392	; 0xa598
   14c04:	mov	r2, #5
   14c08:	movt	r1, #2
   14c0c:	ldr	r0, [r1, r0, lsl #2]
   14c10:	movw	r1, #42008	; 0xa418
   14c14:	movt	r1, #2
   14c18:	add	r1, r1, r0
   14c1c:	mov	r0, #0
   14c20:	pop	{fp, lr}
   14c24:	b	112a0 <dcgettext@plt>
   14c28:	mov	r0, #0
   14c2c:	pop	{fp, pc}
   14c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c34:	add	fp, sp, #28
   14c38:	sub	sp, sp, #140	; 0x8c
   14c3c:	mov	sl, r0
   14c40:	mov	r0, #0
   14c44:	str	r3, [sp, #24]
   14c48:	mov	r5, r1
   14c4c:	mov	r9, r2
   14c50:	str	r0, [fp, #-52]	; 0xffffffcc
   14c54:	str	r0, [sl, #24]
   14c58:	str	r0, [sl, #8]
   14c5c:	str	r3, [sl, #12]
   14c60:	ldrb	r0, [sl, #28]
   14c64:	and	r0, r0, #144	; 0x90
   14c68:	strb	r0, [sl, #28]
   14c6c:	ldm	sl, {r0, r1}
   14c70:	cmp	r1, #159	; 0x9f
   14c74:	bls	15454 <__assert_fail@plt+0x3fa4>
   14c78:	mov	r1, #160	; 0xa0
   14c7c:	mov	r2, #160	; 0xa0
   14c80:	str	r0, [sp, #28]
   14c84:	str	r1, [sl, #8]
   14c88:	mov	r1, #0
   14c8c:	bl	113cc <memset@plt>
   14c90:	ldr	r3, [sp, #28]
   14c94:	mov	r0, #31
   14c98:	str	r0, [r3, #64]	; 0x40
   14c9c:	movw	r0, #43689	; 0xaaa9
   14ca0:	movt	r0, #2730	; 0xaaa
   14ca4:	cmp	r9, r0
   14ca8:	bhi	14e48 <__assert_fail@plt+0x3998>
   14cac:	add	r7, r9, #1
   14cb0:	mov	r4, r3
   14cb4:	lsl	r0, r7, #3
   14cb8:	str	r7, [r3, #4]
   14cbc:	bl	29054 <__assert_fail@plt+0x17ba4>
   14cc0:	str	r0, [r4]
   14cc4:	mov	r0, #1
   14cc8:	mov	r6, r0
   14ccc:	lsl	r0, r0, #1
   14cd0:	cmp	r6, r9
   14cd4:	bls	14cc8 <__assert_fail@plt+0x3818>
   14cd8:	mov	r0, #12
   14cdc:	mov	r1, r6
   14ce0:	str	r7, [sp, #12]
   14ce4:	str	r5, [sp, #20]
   14ce8:	bl	29000 <__assert_fail@plt+0x17b50>
   14cec:	ldr	r4, [sp, #28]
   14cf0:	sub	r1, r6, #1
   14cf4:	str	r1, [r4, #68]	; 0x44
   14cf8:	str	r0, [r4, #32]
   14cfc:	bl	112e8 <__ctype_get_mb_cur_max@plt>
   14d00:	str	r0, [r4, #92]	; 0x5c
   14d04:	mov	r0, #14
   14d08:	bl	11450 <nl_langinfo@plt>
   14d0c:	ldrb	r1, [r0]
   14d10:	orr	r1, r1, #32
   14d14:	cmp	r1, #117	; 0x75
   14d18:	bne	14d6c <__assert_fail@plt+0x38bc>
   14d1c:	ldrb	r1, [r0, #1]
   14d20:	orr	r1, r1, #32
   14d24:	cmp	r1, #116	; 0x74
   14d28:	bne	14d6c <__assert_fail@plt+0x38bc>
   14d2c:	ldrb	r1, [r0, #2]
   14d30:	orr	r1, r1, #32
   14d34:	cmp	r1, #102	; 0x66
   14d38:	bne	14d6c <__assert_fail@plt+0x38bc>
   14d3c:	ldrb	r1, [r0, #3]!
   14d40:	cmp	r1, #45	; 0x2d
   14d44:	movw	r1, #42508	; 0xa60c
   14d48:	movt	r1, #2
   14d4c:	addeq	r0, r0, #1
   14d50:	bl	111f8 <strcmp@plt>
   14d54:	cmp	r0, #0
   14d58:	bne	14d6c <__assert_fail@plt+0x38bc>
   14d5c:	ldr	r1, [sp, #28]
   14d60:	ldrb	r0, [r1, #88]	; 0x58
   14d64:	orr	r0, r0, #4
   14d68:	strb	r0, [r1, #88]	; 0x58
   14d6c:	ldr	r3, [sp, #28]
   14d70:	ldrb	r0, [r3, #88]	; 0x58
   14d74:	and	r1, r0, #247	; 0xf7
   14d78:	strb	r1, [r3, #88]	; 0x58
   14d7c:	ldr	r1, [r3, #92]	; 0x5c
   14d80:	cmp	r1, #2
   14d84:	blt	14e30 <__assert_fail@plt+0x3980>
   14d88:	tst	r0, #4
   14d8c:	bne	14e24 <__assert_fail@plt+0x3974>
   14d90:	mov	r0, #32
   14d94:	mov	r1, #1
   14d98:	mov	r4, #1
   14d9c:	bl	29000 <__assert_fail@plt+0x17b50>
   14da0:	ldr	r3, [sp, #28]
   14da4:	cmp	r0, #0
   14da8:	str	r0, [r3, #60]	; 0x3c
   14dac:	beq	14e48 <__assert_fail@plt+0x3998>
   14db0:	mov	r5, #0
   14db4:	mov	r7, #0
   14db8:	b	14dcc <__assert_fail@plt+0x391c>
   14dbc:	add	r7, r7, #1
   14dc0:	add	r5, r5, r8
   14dc4:	cmp	r7, #8
   14dc8:	beq	14e30 <__assert_fail@plt+0x3980>
   14dcc:	mov	r8, #0
   14dd0:	b	14de0 <__assert_fail@plt+0x3930>
   14dd4:	add	r8, r8, #1
   14dd8:	cmp	r8, #32
   14ddc:	beq	14dbc <__assert_fail@plt+0x390c>
   14de0:	add	r6, r5, r8
   14de4:	mov	r0, r6
   14de8:	bl	113d8 <btowc@plt>
   14dec:	ldr	r3, [sp, #28]
   14df0:	cmn	r0, #1
   14df4:	beq	14e08 <__assert_fail@plt+0x3958>
   14df8:	ldr	r1, [r3, #60]	; 0x3c
   14dfc:	ldr	r2, [r1, r7, lsl #2]
   14e00:	orr	r2, r2, r4, lsl r8
   14e04:	str	r2, [r1, r7, lsl #2]
   14e08:	cmp	r6, #127	; 0x7f
   14e0c:	bhi	14dd4 <__assert_fail@plt+0x3924>
   14e10:	cmp	r6, r0
   14e14:	ldrbne	r0, [r3, #88]	; 0x58
   14e18:	orrne	r0, r0, #8
   14e1c:	strbne	r0, [r3, #88]	; 0x58
   14e20:	b	14dd4 <__assert_fail@plt+0x3924>
   14e24:	movw	r0, #42460	; 0xa5dc
   14e28:	movt	r0, #2
   14e2c:	str	r0, [r3, #60]	; 0x3c
   14e30:	ldr	r0, [r3]
   14e34:	ldr	r7, [sp, #20]
   14e38:	cmp	r0, #0
   14e3c:	ldrne	r0, [r3, #32]
   14e40:	cmpne	r0, #0
   14e44:	bne	14e68 <__assert_fail@plt+0x39b8>
   14e48:	mov	r4, #12
   14e4c:	mov	r0, r3
   14e50:	str	r4, [fp, #-52]	; 0xffffffcc
   14e54:	bl	167dc <__assert_fail@plt+0x532c>
   14e58:	mov	r0, #0
   14e5c:	str	r0, [sl]
   14e60:	str	r0, [sl, #4]
   14e64:	b	16078 <__assert_fail@plt+0x4bc8>
   14e68:	movw	r0, #0
   14e6c:	movw	r1, #0
   14e70:	mov	r6, #0
   14e74:	movt	r0, #0
   14e78:	movt	r1, #0
   14e7c:	str	r6, [fp, #-52]	; 0xffffffcc
   14e80:	orrs	r4, r1, r0
   14e84:	beq	14ea0 <__assert_fail@plt+0x39f0>
   14e88:	add	r0, r3, #136	; 0x88
   14e8c:	mov	r1, #0
   14e90:	bl	11264 <pthread_mutex_init@plt>
   14e94:	ldr	r3, [sp, #28]
   14e98:	cmp	r0, #0
   14e9c:	bne	14e48 <__assert_fail@plt+0x3998>
   14ea0:	vmov.i32	q8, #0	; 0x00000000
   14ea4:	add	r1, sp, #32
   14ea8:	str	r4, [sp, #8]
   14eac:	ldr	r4, [sl, #20]
   14eb0:	ldr	r2, [sp, #24]
   14eb4:	add	r0, r1, #64	; 0x40
   14eb8:	vst1.32	{d16-d17}, [r0]
   14ebc:	add	r0, r1, #52	; 0x34
   14ec0:	vst1.32	{d16-d17}, [r0]
   14ec4:	add	r0, r1, #36	; 0x24
   14ec8:	vst1.32	{d16-d17}, [r0]
   14ecc:	add	r0, r1, #20
   14ed0:	vst1.32	{d16-d17}, [r0]
   14ed4:	add	r0, r1, #4
   14ed8:	add	r1, r1, #44	; 0x2c
   14edc:	vst1.32	{d16-d17}, [r0]
   14ee0:	str	r7, [sp, #32]
   14ee4:	ubfx	r0, r2, #22, #1
   14ee8:	vdup.32	q8, r9
   14eec:	strb	r0, [sp, #104]	; 0x68
   14ef0:	and	r0, r2, #4194304	; 0x400000
   14ef4:	str	r4, [sp, #96]	; 0x60
   14ef8:	orrs	r5, r0, r4
   14efc:	str	r0, [sp, #16]
   14f00:	movwne	r5, #1
   14f04:	cmp	r9, #1
   14f08:	strb	r5, [sp, #107]	; 0x6b
   14f0c:	ldr	r0, [r3, #92]	; 0x5c
   14f10:	str	r0, [sp, #112]	; 0x70
   14f14:	ldrb	r2, [r3, #88]	; 0x58
   14f18:	vst1.32	{d16-d17}, [r1]
   14f1c:	ubfx	r1, r2, #3, #1
   14f20:	strb	r1, [sp, #106]	; 0x6a
   14f24:	ubfx	r1, r2, #2, #1
   14f28:	strb	r1, [sp, #105]	; 0x69
   14f2c:	blt	14fa4 <__assert_fail@plt+0x3af4>
   14f30:	ldr	r8, [sp, #12]
   14f34:	cmp	r0, #2
   14f38:	blt	14f64 <__assert_fail@plt+0x3ab4>
   14f3c:	mov	r6, #12
   14f40:	cmn	r9, #-1073741822	; 0xc0000002
   14f44:	bhi	1544c <__assert_fail@plt+0x3f9c>
   14f48:	lsl	r1, r8, #2
   14f4c:	mov	r0, #0
   14f50:	bl	29084 <__assert_fail@plt+0x17bd4>
   14f54:	ldr	r3, [sp, #28]
   14f58:	cmp	r0, #0
   14f5c:	beq	1544c <__assert_fail@plt+0x3f9c>
   14f60:	str	r0, [sp, #40]	; 0x28
   14f64:	cmp	r5, #0
   14f68:	mov	r6, #0
   14f6c:	mov	r5, #0
   14f70:	beq	14f98 <__assert_fail@plt+0x3ae8>
   14f74:	mov	r0, #0
   14f78:	mov	r1, r8
   14f7c:	bl	29084 <__assert_fail@plt+0x17bd4>
   14f80:	cmp	r0, #0
   14f84:	beq	15448 <__assert_fail@plt+0x3f98>
   14f88:	ldr	r3, [sp, #28]
   14f8c:	mov	r6, r0
   14f90:	mov	r5, #1
   14f94:	str	r0, [sp, #36]	; 0x24
   14f98:	str	r8, [sp, #68]	; 0x44
   14f9c:	ldr	r0, [r3, #92]	; 0x5c
   14fa0:	b	14fa8 <__assert_fail@plt+0x3af8>
   14fa4:	mov	r8, #0
   14fa8:	ldr	r1, [sp, #16]
   14fac:	cmp	r5, #0
   14fb0:	moveq	r6, r7
   14fb4:	str	r6, [sp, #36]	; 0x24
   14fb8:	cmp	r1, #0
   14fbc:	beq	150a0 <__assert_fail@plt+0x3bf0>
   14fc0:	cmp	r0, #2
   14fc4:	blt	150b4 <__assert_fail@plt+0x3c04>
   14fc8:	add	r0, sp, #32
   14fcc:	bl	19fc0 <__assert_fail@plt+0x8b10>
   14fd0:	cmp	r0, #0
   14fd4:	bne	15440 <__assert_fail@plt+0x3f90>
   14fd8:	ldr	r1, [sp, #28]
   14fdc:	add	r5, sp, #32
   14fe0:	b	14ffc <__assert_fail@plt+0x3b4c>
   14fe4:	mov	r0, r5
   14fe8:	str	r4, [sp, #68]	; 0x44
   14fec:	bl	19fc0 <__assert_fail@plt+0x8b10>
   14ff0:	ldr	r1, [sp, #28]
   14ff4:	cmp	r0, #0
   14ff8:	bne	15440 <__assert_fail@plt+0x3f90>
   14ffc:	ldr	r0, [sp, #64]	; 0x40
   15000:	cmp	r0, r9
   15004:	bge	15190 <__assert_fail@plt+0x3ce0>
   15008:	ldr	r0, [r1, #92]	; 0x5c
   1500c:	ldr	r2, [sp, #60]	; 0x3c
   15010:	ldr	r1, [sp, #68]	; 0x44
   15014:	add	r0, r0, r2
   15018:	cmp	r1, r0
   1501c:	bgt	15190 <__assert_fail@plt+0x3ce0>
   15020:	ldr	r0, [sp, #112]	; 0x70
   15024:	lsl	r4, r1, #1
   15028:	cmp	r0, #2
   1502c:	blt	15078 <__assert_fail@plt+0x3bc8>
   15030:	mov	r6, #12
   15034:	cmn	r4, #-1073741823	; 0xc0000001
   15038:	bhi	1544c <__assert_fail@plt+0x3f9c>
   1503c:	ldr	r0, [sp, #40]	; 0x28
   15040:	lsl	r8, r1, #3
   15044:	mov	r1, r8
   15048:	bl	29084 <__assert_fail@plt+0x17bd4>
   1504c:	cmp	r0, #0
   15050:	beq	1544c <__assert_fail@plt+0x3f9c>
   15054:	str	r0, [sp, #40]	; 0x28
   15058:	ldr	r0, [sp, #44]	; 0x2c
   1505c:	cmp	r0, #0
   15060:	beq	15078 <__assert_fail@plt+0x3bc8>
   15064:	mov	r1, r8
   15068:	bl	29084 <__assert_fail@plt+0x17bd4>
   1506c:	cmp	r0, #0
   15070:	beq	1544c <__assert_fail@plt+0x3f9c>
   15074:	str	r0, [sp, #44]	; 0x2c
   15078:	ldrb	r0, [sp, #107]	; 0x6b
   1507c:	cmp	r0, #0
   15080:	beq	14fe4 <__assert_fail@plt+0x3b34>
   15084:	ldr	r0, [sp, #36]	; 0x24
   15088:	mov	r1, r4
   1508c:	bl	29084 <__assert_fail@plt+0x17bd4>
   15090:	cmp	r0, #0
   15094:	beq	15448 <__assert_fail@plt+0x3f98>
   15098:	str	r0, [sp, #36]	; 0x24
   1509c:	b	14fe4 <__assert_fail@plt+0x3b34>
   150a0:	cmp	r0, #2
   150a4:	blt	15118 <__assert_fail@plt+0x3c68>
   150a8:	add	r0, sp, #32
   150ac:	bl	1a8c0 <__assert_fail@plt+0x9410>
   150b0:	b	15190 <__assert_fail@plt+0x3ce0>
   150b4:	cmp	r8, r9
   150b8:	movgt	r8, r9
   150bc:	cmp	r8, #1
   150c0:	blt	15184 <__assert_fail@plt+0x3cd4>
   150c4:	mov	r5, #0
   150c8:	bl	11348 <__ctype_toupper_loc@plt>
   150cc:	mov	r1, #0
   150d0:	add	r2, r7, r5
   150d4:	cmp	r4, #0
   150d8:	ldrb	r2, [r2, r1]
   150dc:	bne	15110 <__assert_fail@plt+0x3c60>
   150e0:	ldr	r3, [r0]
   150e4:	ldr	r2, [r3, r2, lsl #2]
   150e8:	ldr	r3, [sp, #36]	; 0x24
   150ec:	strb	r2, [r3, r1]
   150f0:	add	r2, r1, #1
   150f4:	cmp	r2, r8
   150f8:	bge	1517c <__assert_fail@plt+0x3ccc>
   150fc:	ldr	r7, [sp, #32]
   15100:	ldr	r5, [sp, #56]	; 0x38
   15104:	ldr	r4, [sp, #96]	; 0x60
   15108:	mov	r1, r2
   1510c:	b	150d0 <__assert_fail@plt+0x3c20>
   15110:	ldrb	r2, [r4, r2]
   15114:	b	150e0 <__assert_fail@plt+0x3c30>
   15118:	cmp	r4, #0
   1511c:	beq	153a0 <__assert_fail@plt+0x3ef0>
   15120:	cmp	r8, r9
   15124:	movgt	r8, r9
   15128:	cmp	r8, #1
   1512c:	blt	15184 <__assert_fail@plt+0x3cd4>
   15130:	ldrb	r0, [r7]
   15134:	cmp	r8, #1
   15138:	ldrb	r0, [r4, r0]
   1513c:	strb	r0, [r6]
   15140:	mov	r0, #1
   15144:	beq	15188 <__assert_fail@plt+0x3cd8>
   15148:	mov	r0, #1
   1514c:	ldr	r1, [sp, #32]
   15150:	ldr	r3, [sp, #56]	; 0x38
   15154:	ldr	r7, [sp, #96]	; 0x60
   15158:	ldr	r2, [sp, #36]	; 0x24
   1515c:	add	r1, r1, r3
   15160:	ldrb	r1, [r1, r0]
   15164:	ldrb	r1, [r7, r1]
   15168:	strb	r1, [r2, r0]
   1516c:	add	r0, r0, #1
   15170:	cmp	r0, r8
   15174:	blt	1514c <__assert_fail@plt+0x3c9c>
   15178:	b	15188 <__assert_fail@plt+0x3cd8>
   1517c:	add	r0, r1, #1
   15180:	b	15188 <__assert_fail@plt+0x3cd8>
   15184:	mov	r0, #0
   15188:	str	r0, [sp, #64]	; 0x40
   1518c:	str	r0, [sp, #60]	; 0x3c
   15190:	mov	r5, #0
   15194:	ldr	r4, [sp, #24]
   15198:	sub	r8, fp, #48	; 0x30
   1519c:	add	r6, sp, #32
   151a0:	str	r5, [fp, #-52]	; 0xffffffcc
   151a4:	str	r5, [sl, #24]
   151a8:	mov	r0, r8
   151ac:	mov	r1, r6
   151b0:	ldr	r7, [sl]
   151b4:	orr	r2, r4, #8388608	; 0x800000
   151b8:	str	r4, [r7, #128]	; 0x80
   151bc:	bl	1ad30 <__assert_fail@plt+0x9880>
   151c0:	ldr	r1, [sp, #72]	; 0x48
   151c4:	mov	r2, r8
   151c8:	mov	r3, r4
   151cc:	str	r5, [sp]
   151d0:	add	r0, r1, r0
   151d4:	mov	r1, sl
   151d8:	str	r0, [sp, #72]	; 0x48
   151dc:	sub	r0, fp, #52	; 0x34
   151e0:	str	r0, [sp, #4]
   151e4:	mov	r0, r6
   151e8:	bl	1aac4 <__assert_fail@plt+0x9614>
   151ec:	ldr	r5, [sp, #28]
   151f0:	mov	r4, r0
   151f4:	cmp	r0, #0
   151f8:	bne	15208 <__assert_fail@plt+0x3d58>
   151fc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15200:	cmp	r0, #0
   15204:	bne	154d8 <__assert_fail@plt+0x4028>
   15208:	ldr	r1, [r7, #64]	; 0x40
   1520c:	cmp	r1, #31
   15210:	beq	15470 <__assert_fail@plt+0x3fc0>
   15214:	ldr	r0, [r7, #56]	; 0x38
   15218:	add	r0, r0, r1, lsl #5
   1521c:	add	r2, r1, #1
   15220:	vmov.i32	q8, #0	; 0x00000000
   15224:	mov	r1, #0
   15228:	str	r2, [r7, #64]	; 0x40
   1522c:	mov	r2, #2
   15230:	add	r6, r0, #4
   15234:	str	r1, [r0, #20]
   15238:	str	r1, [r0, #24]
   1523c:	str	r2, [r0, #28]
   15240:	mov	r0, #28
   15244:	mov	r1, r6
   15248:	vst1.32	{d16-d17}, [r1], r0
   1524c:	mvn	r0, #0
   15250:	str	r0, [r1]
   15254:	cmp	r4, #0
   15258:	mov	r0, r6
   1525c:	beq	152b0 <__assert_fail@plt+0x3e00>
   15260:	ldr	r1, [r7, #64]	; 0x40
   15264:	cmp	r1, #31
   15268:	beq	154a4 <__assert_fail@plt+0x3ff4>
   1526c:	ldr	r0, [r7, #56]	; 0x38
   15270:	add	r0, r0, r1, lsl #5
   15274:	add	r2, r1, #1
   15278:	mov	r1, #0
   1527c:	cmp	r6, #0
   15280:	mvn	r3, #0
   15284:	str	r2, [r7, #64]	; 0x40
   15288:	mov	r2, #16
   1528c:	str	r1, [r0, #4]!
   15290:	add	ip, r0, #20
   15294:	stmib	r0, {r4, r6}
   15298:	str	r1, [r0, #12]
   1529c:	str	r1, [r0, #16]
   152a0:	stm	ip, {r1, r2, r3}
   152a4:	str	r0, [r4]
   152a8:	beq	154d0 <__assert_fail@plt+0x4020>
   152ac:	str	r0, [r6]
   152b0:	cmp	r6, #0
   152b4:	cmpne	r0, #0
   152b8:	beq	154d0 <__assert_fail@plt+0x4020>
   152bc:	str	r0, [r5, #52]	; 0x34
   152c0:	ldr	r9, [sl]
   152c4:	ldr	r0, [r9, #4]
   152c8:	lsl	r0, r0, #2
   152cc:	bl	29054 <__assert_fail@plt+0x17ba4>
   152d0:	str	r0, [r9, #12]
   152d4:	ldr	r0, [r9, #4]
   152d8:	lsl	r0, r0, #2
   152dc:	bl	29054 <__assert_fail@plt+0x17ba4>
   152e0:	str	r0, [r9, #16]
   152e4:	ldr	r0, [r9, #4]
   152e8:	add	r0, r0, r0, lsl #1
   152ec:	lsl	r0, r0, #2
   152f0:	bl	29054 <__assert_fail@plt+0x17ba4>
   152f4:	str	r0, [r9, #20]
   152f8:	ldr	r0, [r9, #4]
   152fc:	add	r0, r0, r0, lsl #1
   15300:	lsl	r0, r0, #2
   15304:	bl	29054 <__assert_fail@plt+0x17ba4>
   15308:	str	r0, [r9, #24]
   1530c:	ldr	r1, [r9, #12]
   15310:	cmp	r1, #0
   15314:	ldrne	r1, [r9, #16]
   15318:	cmpne	r1, #0
   1531c:	beq	15330 <__assert_fail@plt+0x3e80>
   15320:	cmp	r0, #0
   15324:	ldrne	r0, [r9, #20]
   15328:	cmpne	r0, #0
   1532c:	bne	1533c <__assert_fail@plt+0x3e8c>
   15330:	mov	r0, #12
   15334:	str	r0, [fp, #-52]	; 0xffffffcc
   15338:	b	154e0 <__assert_fail@plt+0x4030>
   1533c:	ldr	r0, [sl, #24]
   15340:	lsl	r0, r0, #2
   15344:	bl	29054 <__assert_fail@plt+0x17ba4>
   15348:	cmp	r0, #0
   1534c:	str	r0, [r9, #132]	; 0x84
   15350:	beq	15764 <__assert_fail@plt+0x42b4>
   15354:	ldr	r1, [sl, #24]
   15358:	cmp	r1, #0
   1535c:	beq	15598 <__assert_fail@plt+0x40e8>
   15360:	mov	r2, #0
   15364:	cmp	r1, #4
   15368:	bcc	15588 <__assert_fail@plt+0x40d8>
   1536c:	bic	r2, r1, #3
   15370:	mov	r3, #1
   15374:	add	r7, pc, #964	; 0x3c4
   15378:	sub	r6, r2, #4
   1537c:	add	r3, r3, r6, lsr #2
   15380:	cmp	r6, #12
   15384:	and	ip, r3, #3
   15388:	bcs	153ac <__assert_fail@plt+0x3efc>
   1538c:	vld1.64	{d16-d17}, [r7 :128]
   15390:	mov	r7, #0
   15394:	cmp	ip, #0
   15398:	bne	1541c <__assert_fail@plt+0x3f6c>
   1539c:	b	15590 <__assert_fail@plt+0x40e0>
   153a0:	str	r8, [sp, #64]	; 0x40
   153a4:	str	r8, [sp, #60]	; 0x3c
   153a8:	b	15190 <__assert_fail@plt+0x3ce0>
   153ac:	sub	r6, r3, ip
   153b0:	add	r3, pc, #904	; 0x388
   153b4:	vmov.i32	q9, #12	; 0x0000000c
   153b8:	vmov.i32	q10, #8	; 0x00000008
   153bc:	vmov.i32	q11, #4	; 0x00000004
   153c0:	vmov.i32	q12, #16	; 0x00000010
   153c4:	mov	r7, #0
   153c8:	mov	lr, #64	; 0x40
   153cc:	mov	r4, r0
   153d0:	vld1.64	{d16-d17}, [r3 :128]
   153d4:	mov	r3, r0
   153d8:	vadd.i32	q13, q8, q9
   153dc:	add	r5, r3, #48	; 0x30
   153e0:	vadd.i32	q14, q8, q10
   153e4:	vadd.i32	q15, q8, q11
   153e8:	subs	r6, r6, #4
   153ec:	add	r7, r7, #16
   153f0:	vst1.32	{d26-d27}, [r5]
   153f4:	vst1.32	{d16-d17}, [r4], lr
   153f8:	vadd.i32	q8, q8, q12
   153fc:	add	r5, r3, #32
   15400:	add	r3, r3, #16
   15404:	vst1.32	{d28-d29}, [r5]
   15408:	vst1.32	{d30-d31}, [r3]
   1540c:	mov	r3, r4
   15410:	bne	153d8 <__assert_fail@plt+0x3f28>
   15414:	cmp	ip, #0
   15418:	beq	15590 <__assert_fail@plt+0x40e0>
   1541c:	vmov.i32	q9, #4	; 0x00000004
   15420:	add	r3, r0, r7, lsl #2
   15424:	rsb	r7, ip, #0
   15428:	vadd.i32	q10, q8, q9
   1542c:	vst1.32	{d16-d17}, [r3]!
   15430:	adds	r7, r7, #1
   15434:	vorr	q8, q10, q10
   15438:	bcc	15428 <__assert_fail@plt+0x3f78>
   1543c:	b	15590 <__assert_fail@plt+0x40e0>
   15440:	mov	r6, r0
   15444:	b	1544c <__assert_fail@plt+0x3f9c>
   15448:	mov	r6, #12
   1544c:	str	r6, [fp, #-52]	; 0xffffffcc
   15450:	b	154e0 <__assert_fail@plt+0x4030>
   15454:	mov	r1, #160	; 0xa0
   15458:	mov	r4, #160	; 0xa0
   1545c:	bl	29084 <__assert_fail@plt+0x17bd4>
   15460:	cmp	r0, #0
   15464:	beq	1549c <__assert_fail@plt+0x3fec>
   15468:	stm	sl, {r0, r4}
   1546c:	b	14c78 <__assert_fail@plt+0x37c8>
   15470:	mov	r0, #996	; 0x3e4
   15474:	bl	29054 <__assert_fail@plt+0x17ba4>
   15478:	cmp	r0, #0
   1547c:	beq	1557c <__assert_fail@plt+0x40cc>
   15480:	ldr	r1, [r7, #56]	; 0x38
   15484:	ldr	r5, [sp, #28]
   15488:	str	r1, [r0]
   1548c:	mov	r1, #0
   15490:	str	r1, [r7, #64]	; 0x40
   15494:	str	r0, [r7, #56]	; 0x38
   15498:	b	15218 <__assert_fail@plt+0x3d68>
   1549c:	mov	r4, #12
   154a0:	b	16078 <__assert_fail@plt+0x4bc8>
   154a4:	mov	r0, #996	; 0x3e4
   154a8:	bl	29054 <__assert_fail@plt+0x17ba4>
   154ac:	ldr	r5, [sp, #28]
   154b0:	cmp	r0, #0
   154b4:	beq	154d0 <__assert_fail@plt+0x4020>
   154b8:	ldr	r1, [r7, #56]	; 0x38
   154bc:	str	r1, [r0]
   154c0:	mov	r1, #0
   154c4:	str	r1, [r7, #64]	; 0x40
   154c8:	str	r0, [r7, #56]	; 0x38
   154cc:	b	15270 <__assert_fail@plt+0x3dc0>
   154d0:	mov	r0, #12
   154d4:	str	r0, [fp, #-52]	; 0xffffffcc
   154d8:	mov	r0, #0
   154dc:	str	r0, [r5, #52]	; 0x34
   154e0:	ldr	r4, [sl]
   154e4:	ldr	r0, [r4, #56]	; 0x38
   154e8:	cmp	r0, #0
   154ec:	beq	15504 <__assert_fail@plt+0x4054>
   154f0:	ldr	r5, [r0]
   154f4:	bl	29220 <__assert_fail@plt+0x17d70>
   154f8:	cmp	r5, #0
   154fc:	mov	r0, r5
   15500:	bne	154f0 <__assert_fail@plt+0x4040>
   15504:	mov	r0, #31
   15508:	mov	r5, #0
   1550c:	str	r0, [r4, #64]	; 0x40
   15510:	str	r5, [r4, #52]	; 0x34
   15514:	str	r5, [r4, #56]	; 0x38
   15518:	ldr	r0, [r4, #16]
   1551c:	bl	29220 <__assert_fail@plt+0x17d70>
   15520:	str	r5, [r4, #16]
   15524:	ldr	r0, [sp, #40]	; 0x28
   15528:	bl	29220 <__assert_fail@plt+0x17d70>
   1552c:	ldr	r0, [sp, #44]	; 0x2c
   15530:	bl	29220 <__assert_fail@plt+0x17d70>
   15534:	ldrb	r0, [sp, #107]	; 0x6b
   15538:	cmp	r0, #0
   1553c:	beq	15548 <__assert_fail@plt+0x4098>
   15540:	ldr	r0, [sp, #36]	; 0x24
   15544:	bl	29220 <__assert_fail@plt+0x17d70>
   15548:	ldr	r0, [sp, #8]
   1554c:	cmp	r0, #0
   15550:	beq	15560 <__assert_fail@plt+0x40b0>
   15554:	ldr	r0, [sp, #28]
   15558:	add	r0, r0, #136	; 0x88
   1555c:	bl	11210 <pthread_mutex_destroy@plt>
   15560:	ldr	r0, [sp, #28]
   15564:	bl	167dc <__assert_fail@plt+0x532c>
   15568:	mov	r0, #0
   1556c:	str	r0, [sl]
   15570:	str	r0, [sl, #4]
   15574:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15578:	b	16078 <__assert_fail@plt+0x4bc8>
   1557c:	ldr	r5, [sp, #28]
   15580:	mov	r6, #0
   15584:	b	15254 <__assert_fail@plt+0x3da4>
   15588:	str	r2, [r0, r2, lsl #2]
   1558c:	add	r2, r2, #1
   15590:	cmp	r1, r2
   15594:	bne	15588 <__assert_fail@plt+0x40d8>
   15598:	ldr	r2, [r9, #52]	; 0x34
   1559c:	ldrb	r1, [r2, #24]
   155a0:	cmp	r1, #17
   155a4:	beq	155d0 <__assert_fail@plt+0x4120>
   155a8:	cmp	r1, #4
   155ac:	bne	15620 <__assert_fail@plt+0x4170>
   155b0:	ldr	r1, [r2, #20]
   155b4:	mov	r3, #1
   155b8:	ldr	r0, [r0, r1, lsl #2]
   155bc:	str	r0, [r2, #20]
   155c0:	ldr	r1, [r9, #80]	; 0x50
   155c4:	orr	r0, r1, r3, lsl r0
   155c8:	str	r0, [r9, #80]	; 0x50
   155cc:	b	15620 <__assert_fail@plt+0x4170>
   155d0:	ldr	r1, [r2, #4]
   155d4:	cmp	r1, #0
   155d8:	beq	15620 <__assert_fail@plt+0x4170>
   155dc:	ldrb	r3, [r1, #24]
   155e0:	cmp	r3, #17
   155e4:	bne	15620 <__assert_fail@plt+0x4170>
   155e8:	ldr	r3, [r1, #4]
   155ec:	ldr	r1, [r1, #20]
   155f0:	cmp	r3, #0
   155f4:	str	r3, [r2, #4]
   155f8:	strne	r2, [r3]
   155fc:	cmp	r1, #31
   15600:	ldr	r3, [r2, #20]
   15604:	ldr	r3, [r0, r3, lsl #2]
   15608:	str	r3, [r0, r1, lsl #2]
   1560c:	bgt	15620 <__assert_fail@plt+0x4170>
   15610:	ldr	r0, [r9, #80]	; 0x50
   15614:	mov	r3, #1
   15618:	bic	r0, r0, r3, lsl r1
   1561c:	b	155c8 <__assert_fail@plt+0x4118>
   15620:	mov	r0, #1
   15624:	ldr	r7, [r2, #4]
   15628:	cmp	r7, #0
   1562c:	bne	1565c <__assert_fail@plt+0x41ac>
   15630:	mov	r3, #0
   15634:	ldr	r7, [r2, #8]
   15638:	mov	r1, r2
   1563c:	cmp	r7, r3
   15640:	cmpne	r7, #0
   15644:	bne	1565c <__assert_fail@plt+0x41ac>
   15648:	ldr	r2, [r1]
   1564c:	mov	r3, r1
   15650:	cmp	r2, #0
   15654:	bne	15634 <__assert_fail@plt+0x4184>
   15658:	b	15700 <__assert_fail@plt+0x4250>
   1565c:	ldrb	r1, [r7, #24]
   15660:	cmp	r1, #17
   15664:	beq	156a4 <__assert_fail@plt+0x41f4>
   15668:	cmp	r1, #4
   1566c:	mov	r2, r7
   15670:	bne	15624 <__assert_fail@plt+0x4174>
   15674:	ldr	r1, [r9, #132]	; 0x84
   15678:	mov	r2, r7
   1567c:	cmp	r1, #0
   15680:	beq	15624 <__assert_fail@plt+0x4174>
   15684:	ldr	r2, [r7, #20]
   15688:	ldr	r1, [r1, r2, lsl #2]
   1568c:	str	r1, [r7, #20]
   15690:	ldr	r2, [r9, #80]	; 0x50
   15694:	orr	r1, r2, r0, lsl r1
   15698:	str	r1, [r9, #80]	; 0x50
   1569c:	mov	r2, r7
   156a0:	b	15624 <__assert_fail@plt+0x4174>
   156a4:	ldr	r3, [r7, #4]
   156a8:	mov	r2, r7
   156ac:	cmp	r3, #0
   156b0:	beq	15624 <__assert_fail@plt+0x4174>
   156b4:	ldrb	r1, [r3, #24]
   156b8:	mov	r2, r7
   156bc:	cmp	r1, #17
   156c0:	bne	15624 <__assert_fail@plt+0x4174>
   156c4:	ldr	r1, [r3, #4]
   156c8:	ldr	r3, [r3, #20]
   156cc:	cmp	r1, #0
   156d0:	str	r1, [r7, #4]
   156d4:	strne	r7, [r1]
   156d8:	cmp	r3, #31
   156dc:	ldr	r1, [r7, #20]
   156e0:	ldr	r2, [r9, #132]	; 0x84
   156e4:	ldr	r1, [r2, r1, lsl #2]
   156e8:	str	r1, [r2, r3, lsl #2]
   156ec:	mov	r2, r7
   156f0:	bgt	15624 <__assert_fail@plt+0x4174>
   156f4:	ldr	r1, [r9, #80]	; 0x50
   156f8:	bic	r1, r1, r0, lsl r3
   156fc:	b	15698 <__assert_fail@plt+0x41e8>
   15700:	ldr	r1, [sl, #24]
   15704:	cmp	r1, #0
   15708:	beq	15730 <__assert_fail@plt+0x4280>
   1570c:	ldr	r0, [r9, #132]	; 0x84
   15710:	mov	r2, #0
   15714:	ldr	r3, [r0, r2, lsl #2]
   15718:	cmp	r2, r3
   1571c:	bne	15750 <__assert_fail@plt+0x42a0>
   15720:	add	r2, r2, #1
   15724:	cmp	r1, r2
   15728:	bne	15714 <__assert_fail@plt+0x4264>
   1572c:	b	15758 <__assert_fail@plt+0x42a8>
   15730:	ldr	r0, [r9, #132]	; 0x84
   15734:	b	15758 <__assert_fail@plt+0x42a8>
   15738:	nop	{0}
   1573c:	nop	{0}
   15740:	andeq	r0, r0, r0
   15744:	andeq	r0, r0, r1
   15748:	andeq	r0, r0, r2
   1574c:	andeq	r0, r0, r3
   15750:	cmp	r1, r2
   15754:	bne	15764 <__assert_fail@plt+0x42b4>
   15758:	bl	29220 <__assert_fail@plt+0x17d70>
   1575c:	mov	r0, #0
   15760:	str	r0, [r9, #132]	; 0x84
   15764:	ldr	r0, [r9, #52]	; 0x34
   15768:	mov	r7, #0
   1576c:	sub	r8, fp, #48	; 0x30
   15770:	mov	r4, r0
   15774:	ldr	r0, [r0, #4]
   15778:	cmp	r0, #0
   1577c:	bne	15770 <__assert_fail@plt+0x42c0>
   15780:	ldr	r0, [r4, #8]
   15784:	cmp	r0, #0
   15788:	bne	15770 <__assert_fail@plt+0x42c0>
   1578c:	mov	r2, #0
   15790:	cmp	r2, #0
   15794:	str	r7, [fp, #-48]	; 0xffffffd0
   15798:	beq	157c0 <__assert_fail@plt+0x4310>
   1579c:	ldrb	r0, [r2, #24]
   157a0:	cmp	r0, #17
   157a4:	bne	157c0 <__assert_fail@plt+0x4310>
   157a8:	mov	r0, r8
   157ac:	mov	r1, sl
   157b0:	bl	1f0dc <__assert_fail@plt+0xdc2c>
   157b4:	cmp	r0, #0
   157b8:	str	r0, [r4, #4]
   157bc:	strne	r4, [r0]
   157c0:	ldr	r2, [r4, #8]
   157c4:	cmp	r2, #0
   157c8:	beq	157f0 <__assert_fail@plt+0x4340>
   157cc:	ldrb	r0, [r2, #24]
   157d0:	cmp	r0, #17
   157d4:	bne	157f0 <__assert_fail@plt+0x4340>
   157d8:	mov	r0, r8
   157dc:	mov	r1, sl
   157e0:	bl	1f0dc <__assert_fail@plt+0xdc2c>
   157e4:	cmp	r0, #0
   157e8:	str	r0, [r4, #8]
   157ec:	strne	r4, [r0]
   157f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   157f4:	cmp	r0, #0
   157f8:	bne	15334 <__assert_fail@plt+0x3e84>
   157fc:	ldr	r1, [r4]
   15800:	cmp	r1, #0
   15804:	beq	15824 <__assert_fail@plt+0x4374>
   15808:	ldr	r0, [r1, #8]
   1580c:	cmp	r0, r4
   15810:	cmpne	r0, #0
   15814:	bne	15770 <__assert_fail@plt+0x42c0>
   15818:	ldr	r2, [r1, #4]
   1581c:	mov	r4, r1
   15820:	b	15790 <__assert_fail@plt+0x42e0>
   15824:	ldr	r0, [r9, #52]	; 0x34
   15828:	mov	r4, r0
   1582c:	ldr	r0, [r0, #4]
   15830:	cmp	r0, #0
   15834:	bne	15828 <__assert_fail@plt+0x4378>
   15838:	ldr	r0, [r4, #8]
   1583c:	cmp	r0, #0
   15840:	bne	15828 <__assert_fail@plt+0x4378>
   15844:	ldr	r2, [r4, #24]
   15848:	uxtb	r0, r2
   1584c:	cmp	r0, #16
   15850:	bne	1586c <__assert_fail@plt+0x43bc>
   15854:	ldr	r0, [r4, #4]
   15858:	ldr	r1, [r0, #12]
   1585c:	str	r1, [r4, #12]
   15860:	ldr	r0, [r0, #28]
   15864:	str	r0, [r4, #28]
   15868:	b	158ac <__assert_fail@plt+0x43fc>
   1586c:	str	r4, [r4, #12]
   15870:	mov	r0, r9
   15874:	ldr	r1, [r4, #20]
   15878:	bl	1f398 <__assert_fail@plt+0xdee8>
   1587c:	cmn	r0, #1
   15880:	str	r0, [r4, #28]
   15884:	beq	15330 <__assert_fail@plt+0x3e80>
   15888:	ldrb	r1, [r4, #24]
   1588c:	cmp	r1, #12
   15890:	bne	158ac <__assert_fail@plt+0x43fc>
   15894:	ldr	r1, [r9]
   15898:	ldr	r2, [r4, #20]
   1589c:	add	r0, r1, r0, lsl #3
   158a0:	ldr	r1, [r0, #4]
   158a4:	bfi	r1, r2, #8, #10
   158a8:	str	r1, [r0, #4]
   158ac:	ldr	r1, [r4]
   158b0:	cmp	r1, #0
   158b4:	beq	158d8 <__assert_fail@plt+0x4428>
   158b8:	ldr	r0, [r1, #8]
   158bc:	cmp	r0, r4
   158c0:	mov	r4, r1
   158c4:	beq	15844 <__assert_fail@plt+0x4394>
   158c8:	cmp	r0, #0
   158cc:	mov	r4, r1
   158d0:	beq	15844 <__assert_fail@plt+0x4394>
   158d4:	b	15828 <__assert_fail@plt+0x4378>
   158d8:	ldr	r4, [r9, #52]	; 0x34
   158dc:	ldrb	r0, [r4, #24]
   158e0:	cmp	r0, #16
   158e4:	beq	158fc <__assert_fail@plt+0x444c>
   158e8:	cmp	r0, #11
   158ec:	bne	1590c <__assert_fail@plt+0x445c>
   158f0:	ldr	r0, [r4, #4]
   158f4:	str	r4, [r0, #16]
   158f8:	b	15930 <__assert_fail@plt+0x4480>
   158fc:	ldmib	r4, {r0, r1}
   15900:	ldr	r2, [r1, #12]
   15904:	str	r2, [r0, #16]
   15908:	b	15928 <__assert_fail@plt+0x4478>
   1590c:	ldr	r0, [r4, #4]
   15910:	cmp	r0, #0
   15914:	ldrne	r1, [r4, #16]
   15918:	strne	r1, [r0, #16]
   1591c:	ldr	r1, [r4, #8]
   15920:	cmp	r1, #0
   15924:	beq	15930 <__assert_fail@plt+0x4480>
   15928:	ldr	r2, [r4, #16]
   1592c:	str	r2, [r1, #16]
   15930:	mov	r1, r4
   15934:	cmp	r0, #0
   15938:	bne	15950 <__assert_fail@plt+0x44a0>
   1593c:	b	159a4 <__assert_fail@plt+0x44f4>
   15940:	ldr	r0, [r1, #4]
   15944:	str	r1, [r0, #16]
   15948:	cmp	r0, #0
   1594c:	beq	159a4 <__assert_fail@plt+0x44f4>
   15950:	mov	r1, r0
   15954:	ldrb	r0, [r0, #24]
   15958:	cmp	r0, #16
   1595c:	beq	15988 <__assert_fail@plt+0x44d8>
   15960:	cmp	r0, #11
   15964:	beq	15940 <__assert_fail@plt+0x4490>
   15968:	ldr	r0, [r1, #4]
   1596c:	cmp	r0, #0
   15970:	ldrne	r2, [r1, #16]
   15974:	strne	r2, [r0, #16]
   15978:	ldr	r2, [r1, #8]
   1597c:	cmp	r2, #0
   15980:	beq	15948 <__assert_fail@plt+0x4498>
   15984:	b	15994 <__assert_fail@plt+0x44e4>
   15988:	ldmib	r1, {r0, r2}
   1598c:	ldr	r3, [r2, #12]
   15990:	str	r3, [r0, #16]
   15994:	ldr	r3, [r1, #16]
   15998:	str	r3, [r2, #16]
   1599c:	cmp	r0, #0
   159a0:	bne	15950 <__assert_fail@plt+0x44a0>
   159a4:	mov	r3, #0
   159a8:	ldr	r0, [r1, #8]
   159ac:	mov	r2, r1
   159b0:	cmp	r0, r3
   159b4:	cmpne	r0, #0
   159b8:	bne	15950 <__assert_fail@plt+0x44a0>
   159bc:	ldr	r1, [r2]
   159c0:	mov	r3, r2
   159c4:	cmp	r1, #0
   159c8:	bne	159a8 <__assert_fail@plt+0x44f8>
   159cc:	mov	r0, r9
   159d0:	mov	r1, r4
   159d4:	bl	1ef40 <__assert_fail@plt+0xda90>
   159d8:	cmp	r0, #0
   159dc:	beq	159fc <__assert_fail@plt+0x454c>
   159e0:	b	15334 <__assert_fail@plt+0x3e84>
   159e4:	mov	r0, r9
   159e8:	mov	r1, r7
   159ec:	bl	1ef40 <__assert_fail@plt+0xda90>
   159f0:	cmp	r0, #0
   159f4:	mov	r4, r7
   159f8:	bne	15334 <__assert_fail@plt+0x3e84>
   159fc:	ldr	r7, [r4, #4]
   15a00:	cmp	r7, #0
   15a04:	bne	159e4 <__assert_fail@plt+0x4534>
   15a08:	mov	r1, #0
   15a0c:	ldr	r7, [r4, #8]
   15a10:	mov	r0, r4
   15a14:	cmp	r7, r1
   15a18:	cmpne	r7, #0
   15a1c:	bne	159e4 <__assert_fail@plt+0x4534>
   15a20:	ldr	r4, [r0]
   15a24:	mov	r1, r0
   15a28:	cmp	r4, #0
   15a2c:	bne	15a0c <__assert_fail@plt+0x455c>
   15a30:	mov	r5, #0
   15a34:	sub	r4, fp, #48	; 0x30
   15a38:	mov	r7, #0
   15a3c:	b	15a6c <__assert_fail@plt+0x45bc>
   15a40:	mov	r1, r5
   15a44:	ldr	r2, [r9, #8]
   15a48:	add	r0, r7, #1
   15a4c:	subs	r3, r0, r2
   15a50:	mov	r7, r3
   15a54:	movwne	r3, #1
   15a58:	movne	r7, r0
   15a5c:	tst	r1, #1
   15a60:	and	r5, r1, r3
   15a64:	cmpeq	r0, r2
   15a68:	beq	15ac8 <__assert_fail@plt+0x4618>
   15a6c:	ldr	r0, [r9, #24]
   15a70:	add	r6, r7, r7, lsl #1
   15a74:	add	r0, r0, r6, lsl #2
   15a78:	ldr	r0, [r0, #4]
   15a7c:	cmp	r0, #0
   15a80:	bne	15a40 <__assert_fail@plt+0x4590>
   15a84:	mov	r0, r4
   15a88:	mov	r1, r9
   15a8c:	mov	r2, r7
   15a90:	mov	r3, #1
   15a94:	bl	1f568 <__assert_fail@plt+0xe0b8>
   15a98:	cmp	r0, #0
   15a9c:	bne	15334 <__assert_fail@plt+0x3e84>
   15aa0:	ldr	r0, [r9, #24]
   15aa4:	mov	r1, r5
   15aa8:	add	r0, r0, r6, lsl #2
   15aac:	ldr	r0, [r0, #4]
   15ab0:	cmp	r0, #0
   15ab4:	bne	15a44 <__assert_fail@plt+0x4594>
   15ab8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15abc:	bl	29220 <__assert_fail@plt+0x17d70>
   15ac0:	mov	r1, #1
   15ac4:	b	15a44 <__assert_fail@plt+0x4594>
   15ac8:	ldrb	r1, [sl, #28]
   15acc:	str	sl, [sp, #12]
   15ad0:	tst	r1, #16
   15ad4:	bne	15af4 <__assert_fail@plt+0x4644>
   15ad8:	ldr	r1, [sp, #12]
   15adc:	ldr	r1, [r1, #24]
   15ae0:	cmp	r1, #0
   15ae4:	beq	15af4 <__assert_fail@plt+0x4644>
   15ae8:	ldrb	r1, [r9, #88]	; 0x58
   15aec:	tst	r1, #1
   15af0:	bne	15b00 <__assert_fail@plt+0x4650>
   15af4:	ldr	r1, [r9, #76]	; 0x4c
   15af8:	cmp	r1, #0
   15afc:	beq	15c48 <__assert_fail@plt+0x4798>
   15b00:	add	r0, r0, r0, lsl #1
   15b04:	lsl	r0, r0, #2
   15b08:	bl	29054 <__assert_fail@plt+0x17ba4>
   15b0c:	cmp	r0, #0
   15b10:	str	r0, [r9, #28]
   15b14:	beq	16084 <__assert_fail@plt+0x4bd4>
   15b18:	ldr	r1, [r9, #8]
   15b1c:	cmp	r1, #0
   15b20:	beq	15c48 <__assert_fail@plt+0x4798>
   15b24:	mov	r1, #0
   15b28:	str	r1, [r0]
   15b2c:	str	r1, [r0, #4]
   15b30:	str	r1, [r0, #8]
   15b34:	ldr	r0, [r9, #8]
   15b38:	cmp	r0, #2
   15b3c:	bcc	15b6c <__assert_fail@plt+0x46bc>
   15b40:	mov	r2, #1
   15b44:	mov	r3, #12
   15b48:	ldr	r0, [r9, #28]
   15b4c:	add	r2, r2, #1
   15b50:	str	r1, [r0, r3]!
   15b54:	add	r3, r3, #12
   15b58:	str	r1, [r0, #4]
   15b5c:	str	r1, [r0, #8]
   15b60:	ldr	r0, [r9, #8]
   15b64:	cmp	r2, r0
   15b68:	bcc	15b48 <__assert_fail@plt+0x4698>
   15b6c:	cmp	r0, #0
   15b70:	beq	15c48 <__assert_fail@plt+0x4798>
   15b74:	ldr	ip, [r9, #24]
   15b78:	mov	r6, #0
   15b7c:	b	15b90 <__assert_fail@plt+0x46e0>
   15b80:	ldr	r0, [r9, #8]
   15b84:	add	r6, r6, #1
   15b88:	cmp	r6, r0
   15b8c:	bcs	15c48 <__assert_fail@plt+0x4798>
   15b90:	add	lr, r6, r6, lsl #1
   15b94:	add	r2, ip, lr, lsl #2
   15b98:	ldr	r3, [r2, #4]
   15b9c:	cmp	r3, #1
   15ba0:	blt	15b84 <__assert_fail@plt+0x46d4>
   15ba4:	ldr	r1, [r2, #8]
   15ba8:	mov	r5, #0
   15bac:	str	lr, [sp, #24]
   15bb0:	str	r1, [sp, #20]
   15bb4:	b	15be0 <__assert_fail@plt+0x4730>
   15bb8:	add	r0, r4, r0, lsl #2
   15bbc:	ldr	r0, [r0, #8]
   15bc0:	add	r3, r2, #1
   15bc4:	add	r5, r5, #1
   15bc8:	str	r3, [r8]
   15bcc:	str	r6, [r0, r2, lsl #2]
   15bd0:	add	r0, ip, lr, lsl #2
   15bd4:	ldr	r0, [r0, #4]
   15bd8:	cmp	r5, r0
   15bdc:	bge	15b80 <__assert_fail@plt+0x46d0>
   15be0:	ldr	r0, [r1, r5, lsl #2]
   15be4:	ldr	r4, [r9, #28]
   15be8:	add	r0, r0, r0, lsl #1
   15bec:	mov	r3, r4
   15bf0:	ldr	r7, [r3, r0, lsl #2]!
   15bf4:	mov	r8, r3
   15bf8:	ldr	r2, [r8, #4]!
   15bfc:	cmp	r7, r2
   15c00:	bne	15bb8 <__assert_fail@plt+0x4708>
   15c04:	mov	r1, #2
   15c08:	mov	sl, r9
   15c0c:	add	r9, r4, r0, lsl #2
   15c10:	add	r1, r1, r7, lsl #1
   15c14:	str	r1, [r3]
   15c18:	lsl	r1, r1, #2
   15c1c:	ldr	r0, [r9, #8]!
   15c20:	bl	29084 <__assert_fail@plt+0x17bd4>
   15c24:	cmp	r0, #0
   15c28:	beq	16084 <__assert_fail@plt+0x4bd4>
   15c2c:	str	r0, [r9]
   15c30:	ldr	lr, [sp, #24]
   15c34:	ldr	r1, [sp, #20]
   15c38:	mov	r9, sl
   15c3c:	ldr	ip, [sl, #24]
   15c40:	ldr	r2, [r8]
   15c44:	b	15bc0 <__assert_fail@plt+0x4710>
   15c48:	mov	r0, #0
   15c4c:	ldr	sl, [sp, #12]
   15c50:	str	r0, [fp, #-52]	; 0xffffffcc
   15c54:	ldr	r0, [sp, #16]
   15c58:	cmp	r0, #0
   15c5c:	bne	15da4 <__assert_fail@plt+0x48f4>
   15c60:	ldr	r0, [sp, #28]
   15c64:	ldrb	r2, [r0, #88]	; 0x58
   15c68:	ands	r0, r2, #4
   15c6c:	beq	15da4 <__assert_fail@plt+0x48f4>
   15c70:	ldr	r0, [sl, #20]
   15c74:	cmp	r0, #0
   15c78:	bne	15da4 <__assert_fail@plt+0x48f4>
   15c7c:	ldr	r5, [sp, #28]
   15c80:	mov	r9, #0
   15c84:	ldr	r7, [r5, #8]
   15c88:	cmp	r7, #0
   15c8c:	beq	15cac <__assert_fail@plt+0x47fc>
   15c90:	ldr	r3, [r5]
   15c94:	mov	r8, #0
   15c98:	mov	ip, #1
   15c9c:	mov	lr, #139	; 0x8b
   15ca0:	mov	r6, #0
   15ca4:	mov	r4, #0
   15ca8:	b	15cfc <__assert_fail@plt+0x484c>
   15cac:	mov	r8, #0
   15cb0:	mov	r0, #1
   15cb4:	and	r1, r2, #249	; 0xf9
   15cb8:	str	r0, [r5, #92]	; 0x5c
   15cbc:	ldr	r0, [r5, #76]	; 0x4c
   15cc0:	cmp	r0, #0
   15cc4:	movwgt	r9, #1
   15cc8:	orr	r0, r8, r9
   15ccc:	and	r0, r0, #1
   15cd0:	orr	r0, r1, r0, lsl #1
   15cd4:	strb	r0, [r5, #88]	; 0x58
   15cd8:	b	15da4 <__assert_fail@plt+0x48f4>
   15cdc:	ldrsb	r0, [r5]
   15ce0:	cmp	r0, #0
   15ce4:	mov	r0, #0
   15ce8:	movwmi	r0, #1
   15cec:	orr	r6, r6, r0
   15cf0:	add	r4, r4, #1
   15cf4:	cmp	r7, r4
   15cf8:	beq	16094 <__assert_fail@plt+0x4be4>
   15cfc:	add	r5, r3, r4, lsl #3
   15d00:	ldrb	r1, [r5, #4]
   15d04:	sub	r1, r1, #1
   15d08:	cmp	r1, #11
   15d0c:	bhi	16124 <__assert_fail@plt+0x4c74>
   15d10:	add	r0, pc, #0
   15d14:	ldr	pc, [r0, r1, lsl #2]
   15d18:	ldrdeq	r5, [r1], -ip
   15d1c:	strdeq	r5, [r1], -r0
   15d20:	andeq	r5, r1, r8, asr #26
   15d24:	strdeq	r5, [r1], -r0
   15d28:	muleq	r1, ip, sp
   15d2c:	andeq	r5, r1, r4, lsr #27
   15d30:	andeq	r6, r1, r4, lsr #2
   15d34:	strdeq	r5, [r1], -r0
   15d38:	strdeq	r5, [r1], -r0
   15d3c:	strdeq	r5, [r1], -r0
   15d40:	strdeq	r5, [r1], -r0
   15d44:	andeq	r5, r1, ip, ror sp
   15d48:	ldr	r5, [r3, r4, lsl #3]
   15d4c:	ldr	r0, [r5, #16]
   15d50:	cmp	r0, #0
   15d54:	bne	15da4 <__assert_fail@plt+0x48f4>
   15d58:	ldr	r0, [r5, #20]
   15d5c:	cmp	r0, #0
   15d60:	ldreq	r0, [r5, #24]
   15d64:	cmpeq	r0, #0
   15d68:	bne	15da4 <__assert_fail@plt+0x48f4>
   15d6c:	ldr	r0, [r5, #28]
   15d70:	cmp	r0, #0
   15d74:	beq	15cf0 <__assert_fail@plt+0x4840>
   15d78:	b	15da4 <__assert_fail@plt+0x48f4>
   15d7c:	ldr	r0, [r3, r4, lsl #3]
   15d80:	sub	r0, r0, #16
   15d84:	ror	r1, r0, #4
   15d88:	cmp	r1, #7
   15d8c:	bhi	15da4 <__assert_fail@plt+0x48f4>
   15d90:	tst	lr, ip, lsl r1
   15d94:	bne	15cf0 <__assert_fail@plt+0x4840>
   15d98:	b	15da4 <__assert_fail@plt+0x48f4>
   15d9c:	mov	r8, #1
   15da0:	b	15cf0 <__assert_fail@plt+0x4840>
   15da4:	ldr	lr, [sp, #28]
   15da8:	ldr	r1, [lr, #52]	; 0x34
   15dac:	ldr	r0, [lr, #24]
   15db0:	ldr	r1, [r1, #12]
   15db4:	ldr	r1, [r1, #28]
   15db8:	str	r1, [lr, #72]	; 0x48
   15dbc:	add	r1, r1, r1, lsl #1
   15dc0:	add	r5, r0, r1, lsl #2
   15dc4:	mov	r4, r5
   15dc8:	ldr	r7, [r4, #4]!
   15dcc:	str	r7, [fp, #-44]	; 0xffffffd4
   15dd0:	ldr	r0, [r4]
   15dd4:	cmp	r0, #1
   15dd8:	blt	15f24 <__assert_fail@plt+0x4a74>
   15ddc:	lsl	r0, r7, #2
   15de0:	str	r7, [fp, #-48]	; 0xffffffd0
   15de4:	bl	29054 <__assert_fail@plt+0x17ba4>
   15de8:	cmp	r0, #0
   15dec:	str	r0, [fp, #-40]	; 0xffffffd8
   15df0:	beq	1610c <__assert_fail@plt+0x4c5c>
   15df4:	mov	r6, r0
   15df8:	ldr	r0, [r4]
   15dfc:	ldr	r1, [r5, #8]
   15e00:	lsl	r2, r0, #2
   15e04:	mov	r0, r6
   15e08:	bl	11258 <memcpy@plt>
   15e0c:	ldr	lr, [sp, #28]
   15e10:	mov	r0, #0
   15e14:	cmp	r7, #1
   15e18:	str	r0, [fp, #-32]	; 0xffffffe0
   15e1c:	ldrge	r0, [lr, #76]	; 0x4c
   15e20:	cmpge	r0, #1
   15e24:	blt	15f38 <__assert_fail@plt+0x4a88>
   15e28:	mov	r0, #0
   15e2c:	sub	r8, fp, #48	; 0x30
   15e30:	mov	r9, #1
   15e34:	ldr	r1, [r6, r0, lsl #2]
   15e38:	ldr	r2, [lr]
   15e3c:	add	r3, r2, r1, lsl #3
   15e40:	ldrb	r3, [r3, #4]
   15e44:	cmp	r3, #4
   15e48:	bne	15f10 <__assert_fail@plt+0x4a60>
   15e4c:	mov	r3, #0
   15e50:	cmp	r7, #1
   15e54:	bge	15e68 <__assert_fail@plt+0x49b8>
   15e58:	b	15e8c <__assert_fail@plt+0x49dc>
   15e5c:	add	r3, r3, #1
   15e60:	cmp	r7, r3
   15e64:	beq	15f10 <__assert_fail@plt+0x4a60>
   15e68:	ldr	r5, [r6, r3, lsl #2]
   15e6c:	add	r4, r2, r5, lsl #3
   15e70:	ldrb	r4, [r4, #4]
   15e74:	cmp	r4, #9
   15e78:	bne	15e5c <__assert_fail@plt+0x49ac>
   15e7c:	ldr	r4, [r2, r1, lsl #3]
   15e80:	ldr	r5, [r2, r5, lsl #3]
   15e84:	cmp	r5, r4
   15e88:	bne	15e5c <__assert_fail@plt+0x49ac>
   15e8c:	cmp	r3, r7
   15e90:	beq	15f10 <__assert_fail@plt+0x4a60>
   15e94:	ldr	r2, [lr, #20]
   15e98:	add	r1, r1, r1, lsl #1
   15e9c:	cmp	r7, #1
   15ea0:	add	r1, r2, r1, lsl #2
   15ea4:	ldr	r1, [r1, #8]
   15ea8:	ldr	ip, [r1]
   15eac:	blt	15ee8 <__assert_fail@plt+0x4a38>
   15eb0:	mov	r2, #0
   15eb4:	subs	r3, r7, #1
   15eb8:	beq	15edc <__assert_fail@plt+0x4a2c>
   15ebc:	add	r5, r2, r3
   15ec0:	lsr	r4, r5, #1
   15ec4:	ldr	r1, [r6, r4, lsl #2]
   15ec8:	cmp	r1, ip
   15ecc:	addlt	r2, r9, r5, lsr #1
   15ed0:	movge	r3, r4
   15ed4:	cmp	r2, r3
   15ed8:	bcc	15ebc <__assert_fail@plt+0x4a0c>
   15edc:	ldr	r1, [r6, r2, lsl #2]
   15ee0:	cmp	r1, ip
   15ee4:	beq	15f10 <__assert_fail@plt+0x4a60>
   15ee8:	ldr	r0, [lr, #24]
   15eec:	add	r1, ip, ip, lsl #1
   15ef0:	add	r1, r0, r1, lsl #2
   15ef4:	mov	r0, r8
   15ef8:	bl	1fc18 <__assert_fail@plt+0xe768>
   15efc:	cmp	r0, #0
   15f00:	bne	16000 <__assert_fail@plt+0x4b50>
   15f04:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15f08:	ldr	lr, [sp, #28]
   15f0c:	mov	r0, #0
   15f10:	add	r0, r0, #1
   15f14:	cmp	r0, r7
   15f18:	bge	15f38 <__assert_fail@plt+0x4a88>
   15f1c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   15f20:	b	15e34 <__assert_fail@plt+0x4984>
   15f24:	mov	r0, #0
   15f28:	str	r0, [fp, #-44]	; 0xffffffd4
   15f2c:	str	r0, [fp, #-48]	; 0xffffffd0
   15f30:	str	r0, [fp, #-40]	; 0xffffffd8
   15f34:	str	r0, [fp, #-32]	; 0xffffffe0
   15f38:	sub	r0, fp, #32
   15f3c:	sub	r2, fp, #48	; 0x30
   15f40:	mov	r1, lr
   15f44:	mov	r3, #0
   15f48:	bl	1ff18 <__assert_fail@plt+0xea68>
   15f4c:	ldr	r1, [sp, #28]
   15f50:	cmp	r0, #0
   15f54:	str	r0, [r1, #36]	; 0x24
   15f58:	beq	15fe0 <__assert_fail@plt+0x4b30>
   15f5c:	ldrsb	r2, [r0, #52]	; 0x34
   15f60:	cmn	r2, #1
   15f64:	ble	15f78 <__assert_fail@plt+0x4ac8>
   15f68:	str	r0, [r1, #40]	; 0x28
   15f6c:	str	r0, [r1, #44]	; 0x2c
   15f70:	str	r0, [r1, #48]	; 0x30
   15f74:	b	15ff4 <__assert_fail@plt+0x4b44>
   15f78:	sub	r4, fp, #32
   15f7c:	sub	r6, fp, #48	; 0x30
   15f80:	mov	r3, #1
   15f84:	mov	r0, r4
   15f88:	mov	r2, r6
   15f8c:	bl	1ff18 <__assert_fail@plt+0xea68>
   15f90:	ldr	r1, [sp, #28]
   15f94:	mov	r2, r6
   15f98:	mov	r3, #2
   15f9c:	str	r0, [r1, #40]	; 0x28
   15fa0:	ldr	r1, [sp, #28]
   15fa4:	mov	r0, r4
   15fa8:	bl	1ff18 <__assert_fail@plt+0xea68>
   15fac:	ldr	r1, [sp, #28]
   15fb0:	mov	r2, r6
   15fb4:	mov	r3, #6
   15fb8:	str	r0, [r1, #44]	; 0x2c
   15fbc:	ldr	r1, [sp, #28]
   15fc0:	mov	r0, r4
   15fc4:	bl	1ff18 <__assert_fail@plt+0xea68>
   15fc8:	ldr	r2, [sp, #28]
   15fcc:	str	r0, [r2, #48]	; 0x30
   15fd0:	ldr	r1, [r2, #40]	; 0x28
   15fd4:	cmp	r1, #0
   15fd8:	cmpne	r0, #0
   15fdc:	bne	15fe8 <__assert_fail@plt+0x4b38>
   15fe0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15fe4:	b	16000 <__assert_fail@plt+0x4b50>
   15fe8:	ldr	r0, [r2, #44]	; 0x2c
   15fec:	cmp	r0, #0
   15ff0:	beq	15fe0 <__assert_fail@plt+0x4b30>
   15ff4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15ff8:	bl	29220 <__assert_fail@plt+0x17d70>
   15ffc:	mov	r0, #0
   16000:	str	r0, [fp, #-52]	; 0xffffffcc
   16004:	ldr	r5, [sl]
   16008:	ldr	r0, [r5, #56]	; 0x38
   1600c:	cmp	r0, #0
   16010:	beq	16028 <__assert_fail@plt+0x4b78>
   16014:	ldr	r4, [r0]
   16018:	bl	29220 <__assert_fail@plt+0x17d70>
   1601c:	cmp	r4, #0
   16020:	mov	r0, r4
   16024:	bne	16014 <__assert_fail@plt+0x4b64>
   16028:	mov	r0, #31
   1602c:	mov	r4, #0
   16030:	str	r0, [r5, #64]	; 0x40
   16034:	str	r4, [r5, #52]	; 0x34
   16038:	str	r4, [r5, #56]	; 0x38
   1603c:	ldr	r0, [r5, #16]
   16040:	bl	29220 <__assert_fail@plt+0x17d70>
   16044:	str	r4, [r5, #16]
   16048:	ldr	r0, [sp, #40]	; 0x28
   1604c:	bl	29220 <__assert_fail@plt+0x17d70>
   16050:	ldr	r0, [sp, #44]	; 0x2c
   16054:	bl	29220 <__assert_fail@plt+0x17d70>
   16058:	ldrb	r0, [sp, #107]	; 0x6b
   1605c:	cmp	r0, #0
   16060:	beq	1606c <__assert_fail@plt+0x4bbc>
   16064:	ldr	r0, [sp, #36]	; 0x24
   16068:	bl	29220 <__assert_fail@plt+0x17d70>
   1606c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16070:	cmp	r0, #0
   16074:	bne	15548 <__assert_fail@plt+0x4098>
   16078:	mov	r0, r4
   1607c:	sub	sp, fp, #28
   16080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16084:	ldr	sl, [sp, #12]
   16088:	mov	r0, #12
   1608c:	str	r0, [fp, #-52]	; 0xffffffcc
   16090:	b	154e0 <__assert_fail@plt+0x4030>
   16094:	orr	r0, r6, r8
   16098:	tst	r0, #1
   1609c:	beq	160fc <__assert_fail@plt+0x4c4c>
   160a0:	ldr	r5, [sp, #28]
   160a4:	mov	r2, #0
   160a8:	mov	r7, #7
   160ac:	add	r3, r3, r2, lsl #3
   160b0:	ldr	r6, [r3, #4]
   160b4:	uxtb	r1, r6
   160b8:	cmp	r1, #5
   160bc:	beq	160dc <__assert_fail@plt+0x4c2c>
   160c0:	cmp	r1, #1
   160c4:	bne	160e4 <__assert_fail@plt+0x4c34>
   160c8:	ldrsb	r0, [r3]
   160cc:	cmn	r0, #1
   160d0:	bicle	r0, r6, #2097152	; 0x200000
   160d4:	strle	r0, [r3, #4]
   160d8:	b	160e4 <__assert_fail@plt+0x4c34>
   160dc:	bfi	r6, r7, #0, #8
   160e0:	str	r6, [r3, #4]
   160e4:	ldr	r0, [r5, #8]
   160e8:	add	r2, r2, #1
   160ec:	cmp	r2, r0
   160f0:	bcs	16104 <__assert_fail@plt+0x4c54>
   160f4:	ldr	r3, [r5]
   160f8:	b	160ac <__assert_fail@plt+0x4bfc>
   160fc:	ldr	r5, [sp, #28]
   16100:	b	15cb0 <__assert_fail@plt+0x4800>
   16104:	ldrb	r2, [r5, #88]	; 0x58
   16108:	b	15cb0 <__assert_fail@plt+0x4800>
   1610c:	mov	r0, #0
   16110:	str	r0, [fp, #-48]	; 0xffffffd0
   16114:	str	r0, [fp, #-44]	; 0xffffffd4
   16118:	mov	r0, #12
   1611c:	str	r0, [fp, #-32]	; 0xffffffe0
   16120:	b	16000 <__assert_fail@plt+0x4b50>
   16124:	bl	114a4 <abort@plt>
   16128:	movw	r2, #46784	; 0xb6c0
   1612c:	movt	r2, #3
   16130:	ldr	r1, [r2]
   16134:	str	r0, [r2]
   16138:	mov	r0, r1
   1613c:	bx	lr
   16140:	push	{r4, r5, r6, sl, fp, lr}
   16144:	add	fp, sp, #16
   16148:	ldr	r5, [r0, #16]
   1614c:	ldr	r6, [r0]
   16150:	mov	r4, r0
   16154:	mov	r1, #0
   16158:	mov	r2, #256	; 0x100
   1615c:	mov	r0, r5
   16160:	bl	113cc <memset@plt>
   16164:	ldr	r1, [r6, #36]	; 0x24
   16168:	mov	r0, r4
   1616c:	mov	r2, r5
   16170:	bl	161d8 <__assert_fail@plt+0x4d28>
   16174:	ldr	r0, [r6, #36]	; 0x24
   16178:	ldr	r1, [r6, #40]	; 0x28
   1617c:	cmp	r0, r1
   16180:	beq	16194 <__assert_fail@plt+0x4ce4>
   16184:	mov	r0, r4
   16188:	mov	r2, r5
   1618c:	bl	161d8 <__assert_fail@plt+0x4d28>
   16190:	ldr	r0, [r6, #36]	; 0x24
   16194:	ldr	r1, [r6, #44]	; 0x2c
   16198:	cmp	r0, r1
   1619c:	beq	161b0 <__assert_fail@plt+0x4d00>
   161a0:	mov	r0, r4
   161a4:	mov	r2, r5
   161a8:	bl	161d8 <__assert_fail@plt+0x4d28>
   161ac:	ldr	r0, [r6, #36]	; 0x24
   161b0:	ldr	r1, [r6, #48]	; 0x30
   161b4:	cmp	r0, r1
   161b8:	movne	r0, r4
   161bc:	movne	r2, r5
   161c0:	blne	161d8 <__assert_fail@plt+0x4d28>
   161c4:	ldrb	r0, [r4, #28]
   161c8:	orr	r0, r0, #8
   161cc:	strb	r0, [r4, #28]
   161d0:	mov	r0, #0
   161d4:	pop	{r4, r5, r6, sl, fp, pc}
   161d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161dc:	add	fp, sp, #28
   161e0:	sub	sp, sp, #316	; 0x13c
   161e4:	ldr	sl, [r0]
   161e8:	str	r0, [sp, #20]
   161ec:	mov	r3, #0
   161f0:	str	r2, [sp, #36]	; 0x24
   161f4:	ldr	r0, [sl, #92]	; 0x5c
   161f8:	cmp	r0, #1
   161fc:	bne	1620c <__assert_fail@plt+0x4d5c>
   16200:	ldr	r0, [sp, #20]
   16204:	ldrb	r0, [r0, #14]
   16208:	ubfx	r3, r0, #6, #1
   1620c:	ldr	r0, [r1, #8]
   16210:	cmp	r0, #1
   16214:	blt	165e4 <__assert_fail@plt+0x5134>
   16218:	add	r0, sp, #40	; 0x28
   1621c:	mov	r4, #1
   16220:	mov	r2, #0
   16224:	str	r3, [sp, #32]
   16228:	str	r1, [sp, #12]
   1622c:	str	sl, [sp, #24]
   16230:	add	r0, r0, #1
   16234:	str	r0, [sp, #8]
   16238:	movw	r0, #1
   1623c:	movt	r0, #32
   16240:	add	r0, r0, #254	; 0xfe
   16244:	str	r0, [sp, #4]
   16248:	b	16268 <__assert_fail@plt+0x4db8>
   1624c:	ldr	r3, [sp, #32]
   16250:	ldr	r1, [sp, #12]
   16254:	ldr	r2, [sp, #16]
   16258:	ldr	r0, [r1, #8]
   1625c:	add	r2, r2, #1
   16260:	cmp	r2, r0
   16264:	bge	165e4 <__assert_fail@plt+0x5134>
   16268:	ldr	r0, [r1, #12]
   1626c:	str	r2, [sp, #16]
   16270:	ldr	r5, [r0, r2, lsl #2]
   16274:	ldr	r0, [sl]
   16278:	add	r1, r0, r5, lsl #3
   1627c:	ldrb	r6, [r1, #4]
   16280:	sub	r1, r6, #1
   16284:	cmp	r1, #6
   16288:	bhi	16250 <__assert_fail@plt+0x4da0>
   1628c:	add	r2, pc, #0
   16290:	ldr	pc, [r2, r1, lsl #2]
   16294:			; <UNDEFINED> instruction: 0x000162b0
   16298:			; <UNDEFINED> instruction: 0x000165bc
   1629c:	andeq	r6, r1, r4, asr #7
   162a0:	andeq	r6, r1, r0, asr r2
   162a4:			; <UNDEFINED> instruction: 0x000165bc
   162a8:	andeq	r6, r1, r0, ror #8
   162ac:			; <UNDEFINED> instruction: 0x000165bc
   162b0:	ldrb	r6, [r0, r5, lsl #3]
   162b4:	ldr	r0, [sp, #36]	; 0x24
   162b8:	cmp	r3, #0
   162bc:	strb	r4, [r0, r6]
   162c0:	beq	162dc <__assert_fail@plt+0x4e2c>
   162c4:	bl	1133c <__ctype_tolower_loc@plt>
   162c8:	ldr	r0, [r0]
   162cc:	ldr	r3, [sp, #32]
   162d0:	ldr	r1, [sp, #36]	; 0x24
   162d4:	ldr	r0, [r0, r6, lsl #2]
   162d8:	strb	r4, [r1, r0]
   162dc:	ldr	r0, [sp, #20]
   162e0:	ldrb	r0, [r0, #14]
   162e4:	tst	r0, #64	; 0x40
   162e8:	beq	16250 <__assert_fail@plt+0x4da0>
   162ec:	ldr	r0, [sl, #92]	; 0x5c
   162f0:	cmp	r0, #2
   162f4:	blt	16250 <__assert_fail@plt+0x4da0>
   162f8:	ldr	r0, [sl]
   162fc:	add	r1, r5, #1
   16300:	ldr	r7, [sp, #4]
   16304:	movw	r6, #1
   16308:	add	r8, sp, #40	; 0x28
   1630c:	mov	ip, #0
   16310:	sub	r9, fp, #48	; 0x30
   16314:	movt	r6, #32
   16318:	ldrb	r0, [r0, r5, lsl #3]
   1631c:	strb	r0, [sp, #40]	; 0x28
   16320:	ldr	r0, [sl, #8]
   16324:	cmp	r1, r0
   16328:	ldr	r0, [sp, #8]
   1632c:	bcs	1636c <__assert_fail@plt+0x4ebc>
   16330:	ldr	r0, [sp, #8]
   16334:	ldr	r1, [sl]
   16338:	add	r1, r1, r5, lsl #3
   1633c:	ldr	r2, [r1, #12]
   16340:	and	r2, r2, r7
   16344:	cmp	r2, r6
   16348:	bne	1636c <__assert_fail@plt+0x4ebc>
   1634c:	ldrb	r1, [r1, #8]
   16350:	add	r3, r5, #2
   16354:	strb	r1, [r0], #1
   16358:	add	r1, r5, #1
   1635c:	ldr	r2, [sl, #8]
   16360:	mov	r5, r1
   16364:	cmp	r3, r2
   16368:	bcc	16334 <__assert_fail@plt+0x4e84>
   1636c:	sub	r5, r0, r8
   16370:	sub	r0, fp, #36	; 0x24
   16374:	mov	r1, r8
   16378:	mov	r3, r9
   1637c:	str	ip, [fp, #-44]	; 0xffffffd4
   16380:	str	ip, [fp, #-48]	; 0xffffffd0
   16384:	mov	r2, r5
   16388:	bl	29280 <__assert_fail@plt+0x17dd0>
   1638c:	cmp	r0, r5
   16390:	bne	1624c <__assert_fail@plt+0x4d9c>
   16394:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16398:	bl	11270 <towlower@plt>
   1639c:	mov	r1, r0
   163a0:	mov	r0, r8
   163a4:	mov	r2, r9
   163a8:	bl	111e0 <wcrtomb@plt>
   163ac:	cmn	r0, #1
   163b0:	beq	1624c <__assert_fail@plt+0x4d9c>
   163b4:	ldrb	r0, [sp, #40]	; 0x28
   163b8:	ldr	r1, [sp, #36]	; 0x24
   163bc:	strb	r4, [r1, r0]
   163c0:	b	1624c <__assert_fail@plt+0x4d9c>
   163c4:	mov	r7, #0
   163c8:	mov	r6, #0
   163cc:	str	r5, [sp, #28]
   163d0:	ldr	r0, [r0, r5, lsl #3]
   163d4:	ldr	r1, [sp, #36]	; 0x24
   163d8:	lsl	sl, r7, #2
   163dc:	mov	r8, #0
   163e0:	add	r9, r1, r7
   163e4:	ldr	r5, [r0, r6, lsl #2]
   163e8:	b	16414 <__assert_fail@plt+0x4f64>
   163ec:	bl	1133c <__ctype_tolower_loc@plt>
   163f0:	ldr	r0, [r0]
   163f4:	ldr	r3, [sp, #32]
   163f8:	add	r0, r0, sl
   163fc:	ldr	r0, [r0, r8, lsl #2]
   16400:	ldr	r1, [sp, #36]	; 0x24
   16404:	strb	r4, [r1, r0]
   16408:	add	r8, r8, #1
   1640c:	cmp	r8, #32
   16410:	beq	16440 <__assert_fail@plt+0x4f90>
   16414:	tst	r5, r4, lsl r8
   16418:	strbne	r4, [r9, r8]
   1641c:	cmpne	r3, #0
   16420:	beq	16408 <__assert_fail@plt+0x4f58>
   16424:	add	r0, r7, r8
   16428:	add	r0, r0, #128	; 0x80
   1642c:	lsr	r0, r0, #7
   16430:	cmp	r0, #2
   16434:	bls	163ec <__assert_fail@plt+0x4f3c>
   16438:	add	r0, r7, r8
   1643c:	b	16400 <__assert_fail@plt+0x4f50>
   16440:	ldr	sl, [sp, #24]
   16444:	ldr	r5, [sp, #28]
   16448:	add	r6, r6, #1
   1644c:	cmp	r6, #8
   16450:	beq	16250 <__assert_fail@plt+0x4da0>
   16454:	ldr	r0, [sl]
   16458:	add	r7, r7, r8
   1645c:	b	163d0 <__assert_fail@plt+0x4f20>
   16460:	ldr	r6, [r0, r5, lsl #3]
   16464:	ldr	r0, [sl, #92]	; 0x5c
   16468:	cmp	r0, #2
   1646c:	blt	164e8 <__assert_fail@plt+0x5038>
   16470:	ldr	r0, [r6, #36]	; 0x24
   16474:	cmp	r0, #0
   16478:	bne	16494 <__assert_fail@plt+0x4fe4>
   1647c:	ldrb	r0, [r6, #16]
   16480:	tst	r0, #1
   16484:	bne	16494 <__assert_fail@plt+0x4fe4>
   16488:	ldr	r0, [r6, #32]
   1648c:	cmp	r0, #0
   16490:	beq	164e8 <__assert_fail@plt+0x5038>
   16494:	mov	r7, #0
   16498:	add	r8, sp, #40	; 0x28
   1649c:	sub	r6, fp, #48	; 0x30
   164a0:	strb	r7, [fp, #-48]	; 0xffffffd0
   164a4:	mov	r0, #0
   164a8:	mov	r1, r6
   164ac:	mov	r2, #1
   164b0:	mov	r3, r8
   164b4:	str	r7, [sp, #44]	; 0x2c
   164b8:	str	r7, [sp, #40]	; 0x28
   164bc:	bl	29280 <__assert_fail@plt+0x17dd0>
   164c0:	cmn	r0, #2
   164c4:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   164c8:	ldreq	r0, [sp, #36]	; 0x24
   164cc:	strbeq	r4, [r0, r1]
   164d0:	add	r0, r1, #1
   164d4:	uxtb	r1, r0
   164d8:	strb	r0, [fp, #-48]	; 0xffffffd0
   164dc:	cmp	r1, r0
   164e0:	beq	164a4 <__assert_fail@plt+0x4ff4>
   164e4:	b	1624c <__assert_fail@plt+0x4d9c>
   164e8:	ldr	r0, [r6, #20]
   164ec:	cmp	r0, #1
   164f0:	blt	16250 <__assert_fail@plt+0x4da0>
   164f4:	mov	r9, #0
   164f8:	b	1650c <__assert_fail@plt+0x505c>
   164fc:	ldr	r0, [r6, #20]
   16500:	add	r9, r9, #1
   16504:	cmp	r9, r0
   16508:	bge	16250 <__assert_fail@plt+0x4da0>
   1650c:	mov	r0, #0
   16510:	add	r8, sp, #40	; 0x28
   16514:	sub	r2, fp, #48	; 0x30
   16518:	str	r0, [fp, #-44]	; 0xffffffd4
   1651c:	str	r0, [fp, #-48]	; 0xffffffd0
   16520:	ldr	r0, [r6]
   16524:	ldr	r1, [r0, r9, lsl #2]
   16528:	mov	r0, r8
   1652c:	bl	111e0 <wcrtomb@plt>
   16530:	ldr	r3, [sp, #32]
   16534:	cmn	r0, #1
   16538:	beq	16568 <__assert_fail@plt+0x50b8>
   1653c:	ldrb	r7, [sp, #40]	; 0x28
   16540:	ldr	r0, [sp, #36]	; 0x24
   16544:	cmp	r3, #0
   16548:	strb	r4, [r0, r7]
   1654c:	beq	16568 <__assert_fail@plt+0x50b8>
   16550:	bl	1133c <__ctype_tolower_loc@plt>
   16554:	ldr	r0, [r0]
   16558:	ldr	r3, [sp, #32]
   1655c:	ldr	r1, [sp, #36]	; 0x24
   16560:	ldr	r0, [r0, r7, lsl #2]
   16564:	strb	r4, [r1, r0]
   16568:	ldr	r0, [sp, #20]
   1656c:	ldrb	r0, [r0, #14]
   16570:	tst	r0, #64	; 0x40
   16574:	beq	164fc <__assert_fail@plt+0x504c>
   16578:	ldr	r0, [sl, #92]	; 0x5c
   1657c:	cmp	r0, #2
   16580:	blt	164fc <__assert_fail@plt+0x504c>
   16584:	ldr	r0, [r6]
   16588:	ldr	r0, [r0, r9, lsl #2]
   1658c:	bl	11270 <towlower@plt>
   16590:	mov	r1, r0
   16594:	mov	r0, r8
   16598:	sub	r2, fp, #48	; 0x30
   1659c:	bl	111e0 <wcrtomb@plt>
   165a0:	ldr	r3, [sp, #32]
   165a4:	cmn	r0, #1
   165a8:	beq	164fc <__assert_fail@plt+0x504c>
   165ac:	ldrb	r0, [sp, #40]	; 0x28
   165b0:	ldr	r1, [sp, #36]	; 0x24
   165b4:	strb	r4, [r1, r0]
   165b8:	b	164fc <__assert_fail@plt+0x504c>
   165bc:	ldr	r0, [sp, #36]	; 0x24
   165c0:	mov	r1, #1
   165c4:	mov	r2, #256	; 0x100
   165c8:	bl	113cc <memset@plt>
   165cc:	cmp	r6, #2
   165d0:	bne	165e4 <__assert_fail@plt+0x5134>
   165d4:	ldr	r1, [sp, #20]
   165d8:	ldrb	r0, [r1, #28]
   165dc:	orr	r0, r0, #1
   165e0:	strb	r0, [r1, #28]
   165e4:	sub	sp, fp, #28
   165e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   165f0:	add	fp, sp, #24
   165f4:	mov	r4, r0
   165f8:	mov	r0, #0
   165fc:	mov	r6, r2
   16600:	mov	r8, r1
   16604:	str	r0, [r4]
   16608:	str	r0, [r4, #4]
   1660c:	str	r0, [r4, #8]
   16610:	mov	r0, #256	; 0x100
   16614:	bl	29054 <__assert_fail@plt+0x17ba4>
   16618:	cmp	r0, #0
   1661c:	str	r0, [r4, #16]
   16620:	beq	166d0 <__assert_fail@plt+0x5220>
   16624:	movw	r0, #45820	; 0xb2fc
   16628:	tst	r6, #1
   1662c:	and	r1, r6, #2
   16630:	movt	r0, #3
   16634:	movweq	r0, #710	; 0x2c6
   16638:	movteq	r0, #257	; 0x101
   1663c:	tst	r6, #4
   16640:	orr	r5, r0, r1, lsl #21
   16644:	bne	16658 <__assert_fail@plt+0x51a8>
   16648:	ldrb	r0, [r4, #28]
   1664c:	and	r0, r0, #127	; 0x7f
   16650:	strb	r0, [r4, #28]
   16654:	b	16678 <__assert_fail@plt+0x51c8>
   16658:	ldrb	r0, [r4, #28]
   1665c:	mvn	r1, #127	; 0x7f
   16660:	orr	r0, r0, r1
   16664:	movw	r1, #45758	; 0xb2be
   16668:	movt	r1, #323	; 0x143
   1666c:	strb	r0, [r4, #28]
   16670:	and	r1, r5, r1
   16674:	orr	r5, r1, #256	; 0x100
   16678:	and	r1, r6, #8
   1667c:	and	r0, r0, #239	; 0xef
   16680:	mov	r7, #0
   16684:	orr	r0, r0, r1, lsl #1
   16688:	str	r7, [r4, #20]
   1668c:	strb	r0, [r4, #28]
   16690:	mov	r0, r8
   16694:	bl	11390 <strlen@plt>
   16698:	mov	r2, r0
   1669c:	mov	r0, r4
   166a0:	mov	r1, r8
   166a4:	mov	r3, r5
   166a8:	bl	14c30 <__assert_fail@plt+0x3780>
   166ac:	cmp	r0, #16
   166b0:	mov	r5, r0
   166b4:	movweq	r5, #8
   166b8:	cmp	r5, #0
   166bc:	bne	166dc <__assert_fail@plt+0x522c>
   166c0:	mov	r0, r4
   166c4:	bl	16140 <__assert_fail@plt+0x4c90>
   166c8:	mov	r0, r7
   166cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   166d0:	mov	r7, #12
   166d4:	mov	r0, r7
   166d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   166dc:	ldr	r0, [r4, #16]
   166e0:	bl	29220 <__assert_fail@plt+0x17d70>
   166e4:	mov	r0, r5
   166e8:	str	r7, [r4, #16]
   166ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   166f0:	push	{r4, r5, r6, r7, fp, lr}
   166f4:	add	fp, sp, #16
   166f8:	cmp	r0, #17
   166fc:	bcs	16770 <__assert_fail@plt+0x52c0>
   16700:	movw	r1, #42392	; 0xa598
   16704:	mov	r4, r2
   16708:	mov	r2, #5
   1670c:	mov	r5, r3
   16710:	movt	r1, #2
   16714:	ldr	r0, [r1, r0, lsl #2]
   16718:	movw	r1, #42008	; 0xa418
   1671c:	movt	r1, #2
   16720:	add	r1, r1, r0
   16724:	mov	r0, #0
   16728:	bl	112a0 <dcgettext@plt>
   1672c:	mov	r6, r0
   16730:	bl	11390 <strlen@plt>
   16734:	add	r7, r0, #1
   16738:	cmp	r5, #0
   1673c:	beq	16758 <__assert_fail@plt+0x52a8>
   16740:	cmp	r7, r5
   16744:	mov	r2, r7
   16748:	bhi	16760 <__assert_fail@plt+0x52b0>
   1674c:	mov	r0, r4
   16750:	mov	r1, r6
   16754:	bl	11258 <memcpy@plt>
   16758:	mov	r0, r7
   1675c:	pop	{r4, r5, r6, r7, fp, pc}
   16760:	sub	r2, r5, #1
   16764:	mov	r0, #0
   16768:	strb	r0, [r4, r2]
   1676c:	b	1674c <__assert_fail@plt+0x529c>
   16770:	bl	114a4 <abort@plt>
   16774:	push	{r4, r5, fp, lr}
   16778:	add	fp, sp, #8
   1677c:	ldr	r5, [r0]
   16780:	mov	r4, r0
   16784:	cmp	r5, #0
   16788:	beq	167b4 <__assert_fail@plt+0x5304>
   1678c:	movw	r0, #0
   16790:	movw	r1, #0
   16794:	movt	r0, #0
   16798:	movt	r1, #0
   1679c:	orrs	r0, r1, r0
   167a0:	beq	167ac <__assert_fail@plt+0x52fc>
   167a4:	add	r0, r5, #136	; 0x88
   167a8:	bl	11210 <pthread_mutex_destroy@plt>
   167ac:	mov	r0, r5
   167b0:	bl	167dc <__assert_fail@plt+0x532c>
   167b4:	mov	r5, #0
   167b8:	str	r5, [r4]
   167bc:	str	r5, [r4, #4]
   167c0:	ldr	r0, [r4, #16]
   167c4:	bl	29220 <__assert_fail@plt+0x17d70>
   167c8:	str	r5, [r4, #16]
   167cc:	ldr	r0, [r4, #20]
   167d0:	bl	29220 <__assert_fail@plt+0x17d70>
   167d4:	str	r5, [r4, #20]
   167d8:	pop	{r4, r5, fp, pc}
   167dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167e0:	add	fp, sp, #24
   167e4:	mov	r8, r0
   167e8:	ldr	r0, [r0]
   167ec:	cmp	r0, #0
   167f0:	beq	16874 <__assert_fail@plt+0x53c4>
   167f4:	ldr	r1, [r8, #8]
   167f8:	cmp	r1, #0
   167fc:	beq	16874 <__assert_fail@plt+0x53c4>
   16800:	movw	r7, #255	; 0xff
   16804:	mov	r6, #0
   16808:	movt	r7, #4
   1680c:	add	r1, r0, r6, lsl #3
   16810:	ldr	r1, [r1, #4]
   16814:	and	r1, r1, r7
   16818:	cmp	r1, #3
   1681c:	beq	16850 <__assert_fail@plt+0x53a0>
   16820:	cmp	r1, #6
   16824:	bne	1685c <__assert_fail@plt+0x53ac>
   16828:	ldr	r5, [r0, r6, lsl #3]
   1682c:	ldr	r0, [r5]
   16830:	bl	29220 <__assert_fail@plt+0x17d70>
   16834:	ldr	r0, [r5, #4]
   16838:	bl	29220 <__assert_fail@plt+0x17d70>
   1683c:	ldr	r0, [r5, #8]
   16840:	bl	29220 <__assert_fail@plt+0x17d70>
   16844:	ldr	r0, [r5, #12]
   16848:	bl	29220 <__assert_fail@plt+0x17d70>
   1684c:	b	16854 <__assert_fail@plt+0x53a4>
   16850:	ldr	r5, [r0, r6, lsl #3]
   16854:	mov	r0, r5
   16858:	bl	29220 <__assert_fail@plt+0x17d70>
   1685c:	ldr	r0, [r8, #8]
   16860:	add	r6, r6, #1
   16864:	cmp	r6, r0
   16868:	bcs	16874 <__assert_fail@plt+0x53c4>
   1686c:	ldr	r0, [r8]
   16870:	b	1680c <__assert_fail@plt+0x535c>
   16874:	ldr	r0, [r8, #12]
   16878:	bl	29220 <__assert_fail@plt+0x17d70>
   1687c:	ldr	r0, [r8, #8]
   16880:	cmp	r0, #0
   16884:	beq	168e8 <__assert_fail@plt+0x5438>
   16888:	mov	r5, #0
   1688c:	mov	r6, #8
   16890:	b	168a8 <__assert_fail@plt+0x53f8>
   16894:	ldr	r0, [r8, #8]
   16898:	add	r5, r5, #1
   1689c:	add	r6, r6, #12
   168a0:	cmp	r5, r0
   168a4:	bcs	168e8 <__assert_fail@plt+0x5438>
   168a8:	ldr	r0, [r8, #24]
   168ac:	cmp	r0, #0
   168b0:	beq	168bc <__assert_fail@plt+0x540c>
   168b4:	ldr	r0, [r0, r6]
   168b8:	bl	29220 <__assert_fail@plt+0x17d70>
   168bc:	ldr	r0, [r8, #28]
   168c0:	cmp	r0, #0
   168c4:	beq	168d0 <__assert_fail@plt+0x5420>
   168c8:	ldr	r0, [r0, r6]
   168cc:	bl	29220 <__assert_fail@plt+0x17d70>
   168d0:	ldr	r0, [r8, #20]
   168d4:	cmp	r0, #0
   168d8:	beq	16894 <__assert_fail@plt+0x53e4>
   168dc:	ldr	r0, [r0, r6]
   168e0:	bl	29220 <__assert_fail@plt+0x17d70>
   168e4:	b	16894 <__assert_fail@plt+0x53e4>
   168e8:	ldr	r0, [r8, #20]
   168ec:	bl	29220 <__assert_fail@plt+0x17d70>
   168f0:	ldr	r0, [r8, #24]
   168f4:	bl	29220 <__assert_fail@plt+0x17d70>
   168f8:	ldr	r0, [r8, #28]
   168fc:	bl	29220 <__assert_fail@plt+0x17d70>
   16900:	ldr	r0, [r8]
   16904:	bl	29220 <__assert_fail@plt+0x17d70>
   16908:	ldr	r5, [r8, #32]
   1690c:	cmp	r5, #0
   16910:	beq	16970 <__assert_fail@plt+0x54c0>
   16914:	mov	r6, #0
   16918:	add	r0, r6, r6, lsl #1
   1691c:	ldr	r0, [r5, r0, lsl #2]!
   16920:	add	r7, r5, #8
   16924:	cmp	r0, #1
   16928:	blt	1694c <__assert_fail@plt+0x549c>
   1692c:	mov	r4, #0
   16930:	ldr	r0, [r7]
   16934:	ldr	r0, [r0, r4, lsl #2]
   16938:	bl	19f58 <__assert_fail@plt+0x8aa8>
   1693c:	ldr	r0, [r5]
   16940:	add	r4, r4, #1
   16944:	cmp	r4, r0
   16948:	blt	16930 <__assert_fail@plt+0x5480>
   1694c:	ldr	r0, [r7]
   16950:	bl	29220 <__assert_fail@plt+0x17d70>
   16954:	ldr	r0, [r8, #68]	; 0x44
   16958:	cmp	r6, r0
   1695c:	bcs	1696c <__assert_fail@plt+0x54bc>
   16960:	ldr	r5, [r8, #32]
   16964:	add	r6, r6, #1
   16968:	b	16918 <__assert_fail@plt+0x5468>
   1696c:	ldr	r5, [r8, #32]
   16970:	mov	r0, r5
   16974:	bl	29220 <__assert_fail@plt+0x17d70>
   16978:	ldr	r0, [r8, #60]	; 0x3c
   1697c:	movw	r1, #42460	; 0xa5dc
   16980:	movt	r1, #2
   16984:	cmp	r0, r1
   16988:	beq	16990 <__assert_fail@plt+0x54e0>
   1698c:	bl	29220 <__assert_fail@plt+0x17d70>
   16990:	ldr	r0, [r8, #132]	; 0x84
   16994:	bl	29220 <__assert_fail@plt+0x17d70>
   16998:	mov	r0, r8
   1699c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   169a0:	b	29220 <__assert_fail@plt+0x17d70>
   169a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a8:	add	fp, sp, #28
   169ac:	sub	sp, sp, #28
   169b0:	ldr	sl, [fp, #8]
   169b4:	mov	r7, #2
   169b8:	cmp	sl, #7
   169bc:	bhi	16a90 <__assert_fail@plt+0x55e0>
   169c0:	mov	r5, r0
   169c4:	ldr	r0, [r0]
   169c8:	mov	r6, r3
   169cc:	mov	r9, r2
   169d0:	mov	r4, r1
   169d4:	tst	sl, #4
   169d8:	str	r0, [sp, #24]
   169dc:	bne	169f4 <__assert_fail@plt+0x5544>
   169e0:	mov	r0, r4
   169e4:	bl	11390 <strlen@plt>
   169e8:	mov	r7, r0
   169ec:	mov	r8, #0
   169f0:	b	169fc <__assert_fail@plt+0x554c>
   169f4:	ldr	r8, [r6]
   169f8:	ldr	r7, [r6, #4]
   169fc:	movw	r0, #0
   16a00:	movw	r1, #0
   16a04:	movt	r0, #0
   16a08:	movt	r1, #0
   16a0c:	orrs	r0, r1, r0
   16a10:	str	r0, [sp, #20]
   16a14:	beq	16a24 <__assert_fail@plt+0x5574>
   16a18:	ldr	r0, [sp, #24]
   16a1c:	add	r0, r0, #136	; 0x88
   16a20:	bl	11240 <pthread_mutex_lock@plt>
   16a24:	ldrb	r0, [r5, #28]
   16a28:	tst	r0, #16
   16a2c:	bne	16a40 <__assert_fail@plt+0x5590>
   16a30:	str	r7, [sp]
   16a34:	stmib	sp, {r7, r9}
   16a38:	str	r6, [sp, #12]
   16a3c:	b	16a54 <__assert_fail@plt+0x55a4>
   16a40:	mov	r0, #0
   16a44:	str	r7, [sp]
   16a48:	str	r7, [sp, #4]
   16a4c:	str	r0, [sp, #8]
   16a50:	str	r0, [sp, #12]
   16a54:	mov	r0, r5
   16a58:	mov	r1, r4
   16a5c:	mov	r2, r7
   16a60:	mov	r3, r8
   16a64:	str	sl, [sp, #16]
   16a68:	bl	16a9c <__assert_fail@plt+0x55ec>
   16a6c:	mov	r7, r0
   16a70:	ldr	r0, [sp, #20]
   16a74:	cmp	r0, #0
   16a78:	beq	16a88 <__assert_fail@plt+0x55d8>
   16a7c:	ldr	r0, [sp, #24]
   16a80:	add	r0, r0, #136	; 0x88
   16a84:	bl	111a4 <pthread_mutex_unlock@plt>
   16a88:	cmp	r7, #0
   16a8c:	movwne	r7, #1
   16a90:	mov	r0, r7
   16a94:	sub	sp, fp, #28
   16a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16aa0:	add	fp, sp, #28
   16aa4:	sub	sp, sp, #412	; 0x19c
   16aa8:	ldr	r8, [r0]
   16aac:	str	r2, [sp, #68]	; 0x44
   16ab0:	str	r1, [sp, #100]	; 0x64
   16ab4:	mov	r4, r0
   16ab8:	add	r0, sp, #104	; 0x68
   16abc:	mov	r1, #0
   16ac0:	mov	r2, #136	; 0x88
   16ac4:	mov	r6, r3
   16ac8:	mov	r9, #0
   16acc:	bl	113cc <memset@plt>
   16ad0:	str	r8, [sp, #188]	; 0xbc
   16ad4:	ldr	lr, [fp, #16]
   16ad8:	ldr	ip, [fp, #8]
   16adc:	mov	r5, #0
   16ae0:	ldr	r1, [r4, #16]
   16ae4:	cmp	r1, #0
   16ae8:	beq	16b04 <__assert_fail@plt+0x5654>
   16aec:	ldrb	r2, [r4, #28]
   16af0:	and	r2, r2, #9
   16af4:	cmp	r2, #8
   16af8:	movne	r1, #0
   16afc:	subs	r5, r6, ip
   16b00:	movne	r5, r1
   16b04:	ldr	r2, [r4, #24]
   16b08:	ldr	r1, [r4, #8]
   16b0c:	mov	sl, #1
   16b10:	mvn	r3, r2
   16b14:	cmp	r2, lr
   16b18:	addcc	r9, r3, lr
   16b1c:	cmp	r1, #0
   16b20:	beq	195e8 <__assert_fail@plt+0x8138>
   16b24:	ldr	r1, [r8, #36]	; 0x24
   16b28:	cmp	r1, #0
   16b2c:	ldrne	r0, [r8, #40]	; 0x28
   16b30:	cmpne	r0, #0
   16b34:	beq	195e8 <__assert_fail@plt+0x8138>
   16b38:	ldr	r3, [r8, #44]	; 0x2c
   16b3c:	cmp	r3, #0
   16b40:	ldrne	r7, [r8, #48]	; 0x30
   16b44:	cmpne	r7, #0
   16b48:	beq	195e8 <__assert_fail@plt+0x8138>
   16b4c:	ldr	r1, [r1, #8]
   16b50:	ldr	r2, [r4, #20]
   16b54:	cmp	r1, #0
   16b58:	beq	16b64 <__assert_fail@plt+0x56b4>
   16b5c:	ldr	r7, [sp, #100]	; 0x64
   16b60:	b	16b74 <__assert_fail@plt+0x56c4>
   16b64:	ldr	r1, [r0, #8]
   16b68:	ldr	r7, [sp, #100]	; 0x64
   16b6c:	cmp	r1, #0
   16b70:	beq	186f4 <__assert_fail@plt+0x7244>
   16b74:	str	ip, [sp, #72]	; 0x48
   16b78:	subs	r0, lr, r9
   16b7c:	str	r9, [sp, #32]
   16b80:	str	r0, [sp, #84]	; 0x54
   16b84:	mov	r0, #1
   16b88:	str	r0, [sp, #44]	; 0x2c
   16b8c:	bne	16ba0 <__assert_fail@plt+0x56f0>
   16b90:	ldr	r0, [r8, #76]	; 0x4c
   16b94:	cmp	r0, #0
   16b98:	movwne	r0, #1
   16b9c:	str	r0, [sp, #44]	; 0x2c
   16ba0:	ldr	r0, [r4, #12]
   16ba4:	ldr	sl, [r8, #92]	; 0x5c
   16ba8:	ldr	ip, [r8, #8]
   16bac:	str	r2, [sp, #168]	; 0xa8
   16bb0:	str	r7, [sp, #104]	; 0x68
   16bb4:	mov	lr, r4
   16bb8:	str	sl, [sp, #184]	; 0xb8
   16bbc:	ubfx	r3, r0, #22, #1
   16bc0:	ldr	r4, [sp, #68]	; 0x44
   16bc4:	and	r0, r0, #4194304	; 0x400000
   16bc8:	add	r1, ip, #1
   16bcc:	orrs	r9, r2, r0
   16bd0:	strb	r3, [sp, #176]	; 0xb0
   16bd4:	add	r3, sp, #104	; 0x68
   16bd8:	movwne	r9, #1
   16bdc:	add	r3, r3, #44	; 0x2c
   16be0:	cmp	sl, r1
   16be4:	strb	r9, [sp, #179]	; 0xb3
   16be8:	movgt	r1, sl
   16bec:	vdup.32	q8, r4
   16bf0:	ldrb	r0, [r8, #88]	; 0x58
   16bf4:	vst1.32	{d16-d17}, [r3]
   16bf8:	ubfx	r3, r0, #3, #1
   16bfc:	strb	r3, [sp, #178]	; 0xb2
   16c00:	ubfx	r0, r0, #2, #1
   16c04:	str	r8, [sp, #96]	; 0x60
   16c08:	str	lr, [sp, #52]	; 0x34
   16c0c:	str	r5, [sp, #92]	; 0x5c
   16c10:	str	r2, [sp, #88]	; 0x58
   16c14:	strb	r0, [sp, #177]	; 0xb1
   16c18:	add	r0, r4, #1
   16c1c:	cmp	r0, r1
   16c20:	movlt	r1, r0
   16c24:	cmp	sl, #2
   16c28:	mov	r0, lr
   16c2c:	str	r1, [sp, #80]	; 0x50
   16c30:	blt	16c70 <__assert_fail@plt+0x57c0>
   16c34:	mov	sl, #12
   16c38:	cmn	r1, #-1073741823	; 0xc0000001
   16c3c:	bhi	19594 <__assert_fail@plt+0x80e4>
   16c40:	lsl	r1, r1, #2
   16c44:	mov	r0, #0
   16c48:	bl	29084 <__assert_fail@plt+0x17bd4>
   16c4c:	ldr	r1, [sp, #80]	; 0x50
   16c50:	ldr	r2, [sp, #88]	; 0x58
   16c54:	ldr	r5, [sp, #92]	; 0x5c
   16c58:	ldr	r7, [sp, #100]	; 0x64
   16c5c:	cmp	r0, #0
   16c60:	beq	19594 <__assert_fail@plt+0x80e4>
   16c64:	str	r0, [sp, #112]	; 0x70
   16c68:	ldr	r8, [sp, #96]	; 0x60
   16c6c:	ldr	r0, [sp, #52]	; 0x34
   16c70:	cmp	r9, #0
   16c74:	mov	r4, #1
   16c78:	mov	r9, r0
   16c7c:	beq	16ca8 <__assert_fail@plt+0x57f8>
   16c80:	mov	r0, #0
   16c84:	mov	r4, #0
   16c88:	bl	29084 <__assert_fail@plt+0x17bd4>
   16c8c:	cmp	r0, #0
   16c90:	beq	1947c <__assert_fail@plt+0x7fcc>
   16c94:	ldr	r7, [sp, #100]	; 0x64
   16c98:	ldr	r5, [sp, #92]	; 0x5c
   16c9c:	ldr	r2, [sp, #88]	; 0x58
   16ca0:	ldr	r1, [sp, #80]	; 0x50
   16ca4:	str	r0, [sp, #108]	; 0x6c
   16ca8:	add	r3, r8, #96	; 0x60
   16cac:	str	r1, [sp, #140]	; 0x8c
   16cb0:	ldr	r0, [fp, #12]
   16cb4:	cmp	r4, #0
   16cb8:	str	r3, [sp, #172]	; 0xac
   16cbc:	ldrb	r3, [r8, #88]	; 0x58
   16cc0:	ubfx	r3, r3, #4, #1
   16cc4:	strb	r3, [sp, #182]	; 0xb6
   16cc8:	mov	r3, #0
   16ccc:	beq	16ce4 <__assert_fail@plt+0x5834>
   16cd0:	str	r7, [sp, #108]	; 0x6c
   16cd4:	ldr	r3, [r8, #92]	; 0x5c
   16cd8:	cmp	r3, #1
   16cdc:	ldr	r3, [sp, #68]	; 0x44
   16ce0:	movwgt	r3, #0
   16ce4:	str	r0, [sp, #160]	; 0xa0
   16ce8:	str	r3, [sp, #136]	; 0x88
   16cec:	str	r3, [sp, #132]	; 0x84
   16cf0:	str	r0, [sp, #156]	; 0x9c
   16cf4:	ldrb	r0, [r9, #28]
   16cf8:	lsr	r0, r0, #7
   16cfc:	strb	r0, [sp, #181]	; 0xb5
   16d00:	mvn	r0, #0
   16d04:	ldr	r8, [r8, #76]	; 0x4c
   16d08:	str	r0, [sp, #196]	; 0xc4
   16d0c:	ldr	r0, [fp, #24]
   16d10:	lsl	r9, r8, #1
   16d14:	cmp	r8, #1
   16d18:	str	r0, [sp, #192]	; 0xc0
   16d1c:	blt	16d74 <__assert_fail@plt+0x58c4>
   16d20:	movw	r0, #43690	; 0xaaaa
   16d24:	mov	sl, #12
   16d28:	movt	r0, #2730	; 0xaaa
   16d2c:	cmp	r9, r0
   16d30:	bhi	19594 <__assert_fail@plt+0x80e4>
   16d34:	add	r0, r8, r8, lsl #1
   16d38:	lsl	r0, r0, #4
   16d3c:	bl	29054 <__assert_fail@plt+0x17ba4>
   16d40:	mov	r5, r0
   16d44:	str	r0, [sp, #220]	; 0xdc
   16d48:	lsl	r0, r8, #3
   16d4c:	bl	29054 <__assert_fail@plt+0x17ba4>
   16d50:	cmp	r0, #0
   16d54:	str	r0, [sp, #236]	; 0xec
   16d58:	beq	19594 <__assert_fail@plt+0x80e4>
   16d5c:	cmp	r5, #0
   16d60:	ldr	r7, [sp, #100]	; 0x64
   16d64:	ldr	r5, [sp, #92]	; 0x5c
   16d68:	ldr	r2, [sp, #88]	; 0x58
   16d6c:	ldr	r1, [sp, #80]	; 0x50
   16d70:	beq	19594 <__assert_fail@plt+0x80e4>
   16d74:	mov	r0, #1
   16d78:	str	r9, [sp, #232]	; 0xe8
   16d7c:	str	r0, [sp, #224]	; 0xe0
   16d80:	ldr	r0, [sp, #84]	; 0x54
   16d84:	str	r9, [sp, #216]	; 0xd8
   16d88:	cmp	r0, #1
   16d8c:	bhi	16da0 <__assert_fail@plt+0x58f0>
   16d90:	ldr	r0, [sp, #96]	; 0x60
   16d94:	ldrb	r0, [r0, #88]	; 0x58
   16d98:	tst	r0, #2
   16d9c:	beq	16dd0 <__assert_fail@plt+0x5920>
   16da0:	mov	sl, #12
   16da4:	cmn	r1, #-1073741822	; 0xc0000002
   16da8:	bhi	19594 <__assert_fail@plt+0x80e4>
   16dac:	mov	r0, #4
   16db0:	add	r0, r0, r1, lsl #2
   16db4:	bl	29054 <__assert_fail@plt+0x17ba4>
   16db8:	ldr	r2, [sp, #88]	; 0x58
   16dbc:	ldr	r5, [sp, #92]	; 0x5c
   16dc0:	ldr	r7, [sp, #100]	; 0x64
   16dc4:	cmp	r0, #0
   16dc8:	str	r0, [sp, #204]	; 0xcc
   16dcc:	beq	19594 <__assert_fail@plt+0x80e4>
   16dd0:	ldr	r1, [fp, #24]
   16dd4:	ldr	r3, [sp, #72]	; 0x48
   16dd8:	str	r6, [fp, #-200]	; 0xffffff38
   16ddc:	mov	r0, #4
   16de0:	mov	r8, #1
   16de4:	mov	r9, r6
   16de8:	tst	r1, #1
   16dec:	mov	r1, #4
   16df0:	mov	r4, r3
   16df4:	movweq	r1, #6
   16df8:	cmp	r3, r6
   16dfc:	str	r1, [sp, #164]	; 0xa4
   16e00:	ldr	r1, [sp, #96]	; 0x60
   16e04:	mvnlt	r8, #0
   16e08:	movlt	r4, r6
   16e0c:	movlt	r9, r3
   16e10:	cmp	r5, #0
   16e14:	ldr	r1, [r1, #92]	; 0x5c
   16e18:	str	r1, [sp, #56]	; 0x38
   16e1c:	beq	16e60 <__assert_fail@plt+0x59b0>
   16e20:	cmp	r1, #1
   16e24:	beq	16e44 <__assert_fail@plt+0x5994>
   16e28:	ldr	r0, [sp, #52]	; 0x34
   16e2c:	ldr	r0, [r0, #12]
   16e30:	and	r0, r0, #4194304	; 0x400000
   16e34:	orr	r0, r2, r0
   16e38:	clz	r0, r0
   16e3c:	lsr	r0, r0, #5
   16e40:	lsl	r0, r0, #2
   16e44:	cmp	r2, #0
   16e48:	mov	r1, r2
   16e4c:	movwne	r1, #1
   16e50:	cmp	r3, r6
   16e54:	orrge	r1, r1, #2
   16e58:	orr	r0, r1, r0
   16e5c:	b	16e64 <__assert_fail@plt+0x59b4>
   16e60:	mov	r0, #8
   16e64:	add	r1, sp, #104	; 0x68
   16e68:	cmp	r3, r6
   16e6c:	sub	r0, r0, #4
   16e70:	str	r8, [sp, #60]	; 0x3c
   16e74:	str	r4, [sp, #80]	; 0x50
   16e78:	str	r9, [sp, #76]	; 0x4c
   16e7c:	add	r1, r1, #32
   16e80:	str	r0, [sp, #72]	; 0x48
   16e84:	str	r1, [sp, #28]
   16e88:	sub	r1, fp, #200	; 0xc8
   16e8c:	movwlt	r1, #0
   16e90:	cmp	r1, #0
   16e94:	str	r1, [sp, #40]	; 0x28
   16e98:	movwne	r1, #1
   16e9c:	str	r1, [sp, #48]	; 0x30
   16ea0:	sub	r1, fp, #192	; 0xc0
   16ea4:	add	r1, r1, #16
   16ea8:	str	r1, [sp, #36]	; 0x24
   16eac:	ldr	r1, [sp, #72]	; 0x48
   16eb0:	cmp	r1, #4
   16eb4:	bhi	16f98 <__assert_fail@plt+0x5ae8>
   16eb8:	add	r0, pc, #0
   16ebc:	ldr	pc, [r0, r1, lsl #2]
   16ec0:	ldrdeq	r6, [r1], -r4
   16ec4:	ldrdeq	r6, [r1], -r4
   16ec8:	andeq	r6, r1, ip, asr #30
   16ecc:	andeq	r6, r1, r4, lsr #30
   16ed0:	andeq	r7, r1, ip, lsl r0
   16ed4:	mov	sl, #1
   16ed8:	cmp	r6, r9
   16edc:	blt	19594 <__assert_fail@plt+0x80e4>
   16ee0:	ldr	r1, [sp, #68]	; 0x44
   16ee4:	cmp	r6, r1
   16ee8:	mov	r0, #0
   16eec:	ldrblt	r0, [r7, r6]
   16ef0:	cmp	r2, #0
   16ef4:	ldrbne	r0, [r2, r0]
   16ef8:	ldrb	r0, [r5, r0]
   16efc:	cmp	r0, #0
   16f00:	bne	1701c <__assert_fail@plt+0x5b6c>
   16f04:	sub	r0, r6, #1
   16f08:	cmp	r6, r9
   16f0c:	mov	r6, r0
   16f10:	str	r0, [fp, #-200]	; 0xffffff38
   16f14:	bgt	16ee4 <__assert_fail@plt+0x5a34>
   16f18:	b	19594 <__assert_fail@plt+0x80e4>
   16f1c:	add	r6, r6, #1
   16f20:	str	r6, [fp, #-200]	; 0xffffff38
   16f24:	cmp	r6, r4
   16f28:	bge	16f64 <__assert_fail@plt+0x5ab4>
   16f2c:	ldrb	r0, [r7, r6]
   16f30:	ldrb	r0, [r2, r0]
   16f34:	ldrb	r0, [r5, r0]
   16f38:	cmp	r0, #0
   16f3c:	beq	16f1c <__assert_fail@plt+0x5a6c>
   16f40:	b	16f64 <__assert_fail@plt+0x5ab4>
   16f44:	add	r6, r6, #1
   16f48:	str	r6, [fp, #-200]	; 0xffffff38
   16f4c:	cmp	r6, r4
   16f50:	bge	16f64 <__assert_fail@plt+0x5ab4>
   16f54:	ldrb	r0, [r7, r6]
   16f58:	ldrb	r0, [r5, r0]
   16f5c:	cmp	r0, #0
   16f60:	beq	16f44 <__assert_fail@plt+0x5a94>
   16f64:	cmp	r6, r4
   16f68:	bne	1701c <__assert_fail@plt+0x5b6c>
   16f6c:	ldr	r1, [sp, #68]	; 0x44
   16f70:	mov	r0, #0
   16f74:	mov	r6, r4
   16f78:	cmp	r4, r1
   16f7c:	ldrblt	r0, [r7, r4]
   16f80:	cmp	r2, #0
   16f84:	ldrbne	r0, [r2, r0]
   16f88:	ldrb	r0, [r5, r0]
   16f8c:	cmp	r0, #0
   16f90:	bne	1701c <__assert_fail@plt+0x5b6c>
   16f94:	b	19750 <__assert_fail@plt+0x82a0>
   16f98:	ldr	r0, [sp, #128]	; 0x80
   16f9c:	ldr	r2, [sp, #136]	; 0x88
   16fa0:	sub	r1, r6, r0
   16fa4:	cmp	r1, r2
   16fa8:	bcs	16ff0 <__assert_fail@plt+0x5b40>
   16fac:	ldr	r3, [sp, #132]	; 0x84
   16fb0:	mov	r2, #0
   16fb4:	cmp	r1, r3
   16fb8:	bcs	16fc4 <__assert_fail@plt+0x5b14>
   16fbc:	ldr	r2, [sp, #108]	; 0x6c
   16fc0:	ldrb	r2, [r2, r1]
   16fc4:	ldrb	r1, [r5, r2]
   16fc8:	cmp	r1, #0
   16fcc:	bne	1701c <__assert_fail@plt+0x5b6c>
   16fd0:	add	r6, r6, r8
   16fd4:	mov	sl, #1
   16fd8:	cmp	r6, r9
   16fdc:	str	r6, [fp, #-200]	; 0xffffff38
   16fe0:	blt	19594 <__assert_fail@plt+0x80e4>
   16fe4:	cmp	r6, r4
   16fe8:	ble	16f9c <__assert_fail@plt+0x5aec>
   16fec:	b	19594 <__assert_fail@plt+0x80e4>
   16ff0:	ldr	r2, [fp, #24]
   16ff4:	add	r0, sp, #104	; 0x68
   16ff8:	mov	r1, r6
   16ffc:	bl	2050c <__assert_fail@plt+0xf05c>
   17000:	cmp	r0, #0
   17004:	bne	195fc <__assert_fail@plt+0x814c>
   17008:	ldr	r0, [sp, #128]	; 0x80
   1700c:	ldr	r6, [fp, #-200]	; 0xffffff38
   17010:	ldr	r5, [sp, #92]	; 0x5c
   17014:	sub	r1, r6, r0
   17018:	b	16fac <__assert_fail@plt+0x5afc>
   1701c:	ldr	r2, [fp, #24]
   17020:	add	r0, sp, #104	; 0x68
   17024:	mov	r1, r6
   17028:	bl	2050c <__assert_fail@plt+0xf05c>
   1702c:	cmp	r0, #0
   17030:	bne	195fc <__assert_fail@plt+0x814c>
   17034:	ldr	r0, [sp, #56]	; 0x38
   17038:	cmp	r0, #1
   1703c:	ldrne	r0, [sp, #132]	; 0x84
   17040:	cmpne	r0, #0
   17044:	bne	17084 <__assert_fail@plt+0x5bd4>
   17048:	mov	r0, #0
   1704c:	str	r0, [sp, #212]	; 0xd4
   17050:	str	r0, [sp, #224]	; 0xe0
   17054:	str	r0, [sp, #208]	; 0xd0
   17058:	str	r0, [fp, #-196]	; 0xffffff3c
   1705c:	ldr	r4, [sp, #188]	; 0xbc
   17060:	ldr	r5, [sp, #144]	; 0x90
   17064:	ldr	r9, [r4, #36]	; 0x24
   17068:	ldrsb	r0, [r9, #52]	; 0x34
   1706c:	cmn	r0, #1
   17070:	ble	17098 <__assert_fail@plt+0x5be8>
   17074:	ldr	r1, [sp, #48]	; 0x30
   17078:	cmp	r9, #0
   1707c:	bne	171c8 <__assert_fail@plt+0x5d18>
   17080:	b	1947c <__assert_fail@plt+0x7fcc>
   17084:	ldr	r0, [sp, #112]	; 0x70
   17088:	ldr	r0, [r0]
   1708c:	cmn	r0, #1
   17090:	bne	17048 <__assert_fail@plt+0x5b98>
   17094:	b	18470 <__assert_fail@plt+0x6fc0>
   17098:	cmp	r5, #0
   1709c:	ble	170d8 <__assert_fail@plt+0x5c28>
   170a0:	ldr	r1, [sp, #152]	; 0x98
   170a4:	sub	r0, r5, #1
   170a8:	cmp	r1, r0
   170ac:	beq	171a4 <__assert_fail@plt+0x5cf4>
   170b0:	ldr	r1, [sp, #184]	; 0xb8
   170b4:	cmp	r1, #2
   170b8:	blt	170ec <__assert_fail@plt+0x5c3c>
   170bc:	ldr	r1, [sp, #112]	; 0x70
   170c0:	ldr	r6, [r1, r0, lsl #2]
   170c4:	cmn	r6, #1
   170c8:	bne	17120 <__assert_fail@plt+0x5c70>
   170cc:	sub	r0, r0, #1
   170d0:	cmn	r0, #1
   170d4:	bne	170c0 <__assert_fail@plt+0x5c10>
   170d8:	ldr	r3, [sp, #164]	; 0xa4
   170dc:	ldr	r1, [sp, #48]	; 0x30
   170e0:	tst	r3, #1
   170e4:	beq	17150 <__assert_fail@plt+0x5ca0>
   170e8:	b	171bc <__assert_fail@plt+0x5d0c>
   170ec:	ldr	r1, [sp, #108]	; 0x6c
   170f0:	ldr	r2, [sp, #172]	; 0xac
   170f4:	mov	r3, #1
   170f8:	ldrb	r0, [r1, r0]
   170fc:	ubfx	r1, r0, #5, #3
   17100:	ldr	r1, [r2, r1, lsl #2]
   17104:	and	r2, r0, #31
   17108:	tst	r1, r3, lsl r2
   1710c:	ldr	r1, [sp, #48]	; 0x30
   17110:	bne	171bc <__assert_fail@plt+0x5d0c>
   17114:	cmp	r0, #10
   17118:	beq	17138 <__assert_fail@plt+0x5c88>
   1711c:	b	171c0 <__assert_fail@plt+0x5d10>
   17120:	ldrb	r0, [sp, #182]	; 0xb6
   17124:	ldr	r1, [sp, #48]	; 0x30
   17128:	cmp	r0, #0
   1712c:	bne	180b8 <__assert_fail@plt+0x6c08>
   17130:	cmp	r6, #10
   17134:	bne	171c0 <__assert_fail@plt+0x5d10>
   17138:	ldrb	r0, [sp, #181]	; 0xb5
   1713c:	cmp	r0, #0
   17140:	movwne	r0, #1
   17144:	lsl	r3, r0, #1
   17148:	tst	r3, #1
   1714c:	bne	171bc <__assert_fail@plt+0x5d0c>
   17150:	cmp	r3, #0
   17154:	beq	171c0 <__assert_fail@plt+0x5d10>
   17158:	ands	r1, r3, #2
   1715c:	and	r0, r3, #4
   17160:	cmpne	r0, #0
   17164:	bne	17194 <__assert_fail@plt+0x5ce4>
   17168:	cmp	r1, #0
   1716c:	bne	1719c <__assert_fail@plt+0x5cec>
   17170:	ldr	r9, [r4, #36]	; 0x24
   17174:	cmp	r0, #0
   17178:	beq	17074 <__assert_fail@plt+0x5bc4>
   1717c:	ldr	r2, [r9, #40]	; 0x28
   17180:	sub	r0, fp, #196	; 0xc4
   17184:	mov	r1, r4
   17188:	bl	1ff18 <__assert_fail@plt+0xea68>
   1718c:	mov	r9, r0
   17190:	b	17074 <__assert_fail@plt+0x5bc4>
   17194:	ldr	r9, [r4, #48]	; 0x30
   17198:	b	17074 <__assert_fail@plt+0x5bc4>
   1719c:	ldr	r9, [r4, #44]	; 0x2c
   171a0:	b	17074 <__assert_fail@plt+0x5bc4>
   171a4:	ldr	r0, [sp, #192]	; 0xc0
   171a8:	ldr	r1, [sp, #48]	; 0x30
   171ac:	and	r0, r0, #2
   171b0:	eor	r3, r0, #10
   171b4:	tst	r3, #1
   171b8:	beq	17150 <__assert_fail@plt+0x5ca0>
   171bc:	ldr	r9, [r4, #40]	; 0x28
   171c0:	cmp	r9, #0
   171c4:	beq	1947c <__assert_fail@plt+0x7fcc>
   171c8:	ldr	r0, [sp, #204]	; 0xcc
   171cc:	mov	r6, r1
   171d0:	cmp	r0, #0
   171d4:	beq	171ec <__assert_fail@plt+0x5d3c>
   171d8:	str	r9, [r0, r5, lsl #2]
   171dc:	mov	r6, r1
   171e0:	ldr	r0, [r4, #76]	; 0x4c
   171e4:	cmp	r0, #0
   171e8:	bne	17ee4 <__assert_fail@plt+0x6a34>
   171ec:	ldrb	r0, [r9, #52]	; 0x34
   171f0:	mvn	sl, #0
   171f4:	tst	r0, #16
   171f8:	bne	17eb8 <__assert_fail@plt+0x6a08>
   171fc:	mov	r0, #0
   17200:	str	r0, [sp, #64]	; 0x40
   17204:	ldr	r0, [sp, #144]	; 0x90
   17208:	ldr	r1, [sp, #160]	; 0xa0
   1720c:	cmp	r1, r0
   17210:	ble	1721c <__assert_fail@plt+0x5d6c>
   17214:	ldr	r8, [sp, #40]	; 0x28
   17218:	b	1723c <__assert_fail@plt+0x5d8c>
   1721c:	ldr	r8, [sp, #40]	; 0x28
   17220:	b	17adc <__assert_fail@plt+0x662c>
   17224:	ldr	r6, [sp, #24]
   17228:	mov	r5, lr
   1722c:	ldr	r0, [sp, #144]	; 0x90
   17230:	ldr	r1, [sp, #160]	; 0xa0
   17234:	cmp	r1, r0
   17238:	ble	17adc <__assert_fail@plt+0x662c>
   1723c:	ldr	r2, [sp, #140]	; 0x8c
   17240:	ldr	r1, [sp, #152]	; 0x98
   17244:	add	r7, r0, #1
   17248:	mov	r4, r9
   1724c:	cmp	r7, r2
   17250:	blt	1725c <__assert_fail@plt+0x5dac>
   17254:	cmp	r2, r1
   17258:	blt	17974 <__assert_fail@plt+0x64c4>
   1725c:	ldr	r2, [sp, #132]	; 0x84
   17260:	cmp	r7, r2
   17264:	blt	17270 <__assert_fail@plt+0x5dc0>
   17268:	cmp	r2, r1
   1726c:	blt	17974 <__assert_fail@plt+0x64c4>
   17270:	ldrb	r0, [r4, #52]	; 0x34
   17274:	tst	r0, #32
   17278:	bne	17534 <__assert_fail@plt+0x6084>
   1727c:	ldr	r1, [sp, #144]	; 0x90
   17280:	ldr	r0, [sp, #108]	; 0x6c
   17284:	add	r2, r1, #1
   17288:	str	r2, [sp, #144]	; 0x90
   1728c:	ldrb	r9, [r0, r1]
   17290:	ldr	r0, [r4, #44]	; 0x2c
   17294:	cmp	r0, #0
   17298:	bne	172cc <__assert_fail@plt+0x5e1c>
   1729c:	ldr	r2, [r4, #48]	; 0x30
   172a0:	cmp	r2, #0
   172a4:	bne	17990 <__assert_fail@plt+0x64e0>
   172a8:	ldr	r0, [sp, #188]	; 0xbc
   172ac:	mov	r1, r4
   172b0:	bl	23d5c <__assert_fail@plt+0x128ac>
   172b4:	cmp	r0, #0
   172b8:	bne	17290 <__assert_fail@plt+0x5de0>
   172bc:	mov	r0, #12
   172c0:	mov	r9, #0
   172c4:	str	r0, [fp, #-196]	; 0xffffff3c
   172c8:	b	172d0 <__assert_fail@plt+0x5e20>
   172cc:	ldr	r9, [r0, r9, lsl #2]
   172d0:	ldr	r0, [sp, #204]	; 0xcc
   172d4:	cmp	r0, #0
   172d8:	beq	172f0 <__assert_fail@plt+0x5e40>
   172dc:	sub	r0, fp, #196	; 0xc4
   172e0:	add	r1, sp, #104	; 0x68
   172e4:	mov	r2, r9
   172e8:	bl	21c2c <__assert_fail@plt+0x1077c>
   172ec:	mov	r9, r0
   172f0:	cmp	r9, #0
   172f4:	beq	17348 <__assert_fail@plt+0x5e98>
   172f8:	sub	r0, r4, r9
   172fc:	clz	r0, r0
   17300:	lsr	r0, r0, #5
   17304:	ands	r6, r6, r0
   17308:	ldrb	r0, [r9, #52]	; 0x34
   1730c:	moveq	r7, r5
   17310:	mov	r5, r7
   17314:	tst	r0, #16
   17318:	beq	1722c <__assert_fail@plt+0x5d7c>
   1731c:	sxtb	r0, r0
   17320:	cmn	r0, #1
   17324:	ble	173d4 <__assert_fail@plt+0x5f24>
   17328:	ldr	r0, [sp, #44]	; 0x2c
   1732c:	ldr	sl, [sp, #144]	; 0x90
   17330:	cmp	r0, #0
   17334:	beq	17af0 <__assert_fail@plt+0x6640>
   17338:	mov	r8, #0
   1733c:	mov	r0, #1
   17340:	str	r0, [sp, #64]	; 0x40
   17344:	b	1722c <__assert_fail@plt+0x5d7c>
   17348:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1734c:	cmp	r0, #0
   17350:	bne	1947c <__assert_fail@plt+0x7fcc>
   17354:	ldr	r0, [sp, #64]	; 0x40
   17358:	ldr	r1, [sp, #44]	; 0x2c
   1735c:	cmp	r0, #0
   17360:	mvn	r1, r1
   17364:	movwne	r0, #1
   17368:	tst	r1, r0
   1736c:	bne	17adc <__assert_fail@plt+0x662c>
   17370:	ldr	r0, [sp, #204]	; 0xcc
   17374:	cmp	r0, #0
   17378:	beq	17adc <__assert_fail@plt+0x662c>
   1737c:	ldr	r2, [sp, #144]	; 0x90
   17380:	ldr	r1, [sp, #208]	; 0xd0
   17384:	add	r0, r0, #4
   17388:	cmp	r2, r1
   1738c:	bge	17adc <__assert_fail@plt+0x662c>
   17390:	add	r3, r2, #1
   17394:	str	r3, [sp, #144]	; 0x90
   17398:	ldr	r2, [r0, r2, lsl #2]
   1739c:	cmp	r2, #0
   173a0:	mov	r2, r3
   173a4:	beq	17388 <__assert_fail@plt+0x5ed8>
   173a8:	sub	r0, fp, #196	; 0xc4
   173ac:	add	r1, sp, #104	; 0x68
   173b0:	mov	r2, #0
   173b4:	bl	21c2c <__assert_fail@plt+0x1077c>
   173b8:	cmp	r0, #0
   173bc:	mov	r9, r0
   173c0:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   173c4:	cmpeq	r0, #0
   173c8:	bne	1741c <__assert_fail@plt+0x5f6c>
   173cc:	ldr	r0, [sp, #204]	; 0xcc
   173d0:	b	1737c <__assert_fail@plt+0x5ecc>
   173d4:	ldr	r0, [sp, #144]	; 0x90
   173d8:	cmn	r0, #1
   173dc:	ble	17414 <__assert_fail@plt+0x5f64>
   173e0:	ldr	r1, [sp, #152]	; 0x98
   173e4:	cmp	r1, r0
   173e8:	beq	17a48 <__assert_fail@plt+0x6598>
   173ec:	ldr	r1, [sp, #184]	; 0xb8
   173f0:	cmp	r1, #2
   173f4:	blt	17428 <__assert_fail@plt+0x5f78>
   173f8:	ldr	r1, [sp, #112]	; 0x70
   173fc:	ldr	r4, [r1, r0, lsl #2]
   17400:	cmn	r4, #1
   17404:	bne	17458 <__assert_fail@plt+0x5fa8>
   17408:	sub	r0, r0, #1
   1740c:	cmn	r0, #1
   17410:	bne	173fc <__assert_fail@plt+0x5f4c>
   17414:	ldr	r3, [sp, #164]	; 0xa4
   17418:	b	17480 <__assert_fail@plt+0x5fd0>
   1741c:	cmp	r9, #0
   17420:	bne	172f8 <__assert_fail@plt+0x5e48>
   17424:	b	17adc <__assert_fail@plt+0x662c>
   17428:	ldr	r1, [sp, #108]	; 0x6c
   1742c:	ldr	r2, [sp, #172]	; 0xac
   17430:	mov	r3, #1
   17434:	ldrb	r0, [r1, r0]
   17438:	ubfx	r1, r0, #5, #3
   1743c:	ldr	r1, [r2, r1, lsl #2]
   17440:	and	r2, r0, #31
   17444:	tst	r1, r3, lsl r2
   17448:	moveq	r3, #0
   1744c:	cmpeq	r0, #10
   17450:	bne	17480 <__assert_fail@plt+0x5fd0>
   17454:	b	17470 <__assert_fail@plt+0x5fc0>
   17458:	ldrb	r0, [sp, #182]	; 0xb6
   1745c:	cmp	r0, #0
   17460:	bne	17a70 <__assert_fail@plt+0x65c0>
   17464:	mov	r3, #0
   17468:	cmp	r4, #10
   1746c:	bne	17480 <__assert_fail@plt+0x5fd0>
   17470:	ldrb	r0, [sp, #181]	; 0xb5
   17474:	cmp	r0, #0
   17478:	movwne	r0, #1
   1747c:	lsl	r3, r0, #1
   17480:	ldr	r0, [r9, #8]
   17484:	cmp	r0, #1
   17488:	blt	1722c <__assert_fail@plt+0x5d7c>
   1748c:	ldr	r1, [sp, #188]	; 0xbc
   17490:	mov	lr, r5
   17494:	ldr	r7, [r9, #12]
   17498:	and	ip, r3, #8
   1749c:	and	r2, r3, #2
   174a0:	and	r3, r3, #1
   174a4:	str	r6, [sp, #24]
   174a8:	ldr	r5, [r1]
   174ac:	b	174bc <__assert_fail@plt+0x600c>
   174b0:	add	r7, r7, #4
   174b4:	subs	r0, r0, #1
   174b8:	beq	17224 <__assert_fail@plt+0x5d74>
   174bc:	ldr	r4, [r7]
   174c0:	add	r1, r5, r4, lsl #3
   174c4:	ldr	r1, [r1, #4]
   174c8:	uxtb	r6, r1
   174cc:	cmp	r6, #2
   174d0:	bne	174b0 <__assert_fail@plt+0x6000>
   174d4:	movw	r6, #65280	; 0xff00
   174d8:	movt	r6, #3
   174dc:	tst	r1, r6
   174e0:	beq	17520 <__assert_fail@plt+0x6070>
   174e4:	cmp	r3, #0
   174e8:	bne	174f4 <__assert_fail@plt+0x6044>
   174ec:	ands	r6, r1, #1024	; 0x400
   174f0:	bne	174b0 <__assert_fail@plt+0x6000>
   174f4:	cmp	r3, #0
   174f8:	andsne	r6, r1, #2048	; 0x800
   174fc:	bne	174b0 <__assert_fail@plt+0x6000>
   17500:	cmp	r2, #0
   17504:	bne	17510 <__assert_fail@plt+0x6060>
   17508:	ands	r6, r1, #8192	; 0x2000
   1750c:	bne	174b0 <__assert_fail@plt+0x6000>
   17510:	cmp	ip, #0
   17514:	bne	17520 <__assert_fail@plt+0x6070>
   17518:	ands	r1, r1, #32768	; 0x8000
   1751c:	bne	174b0 <__assert_fail@plt+0x6000>
   17520:	ldr	r6, [sp, #24]
   17524:	cmp	r4, #0
   17528:	mov	r5, lr
   1752c:	bne	17328 <__assert_fail@plt+0x5e78>
   17530:	b	1722c <__assert_fail@plt+0x5d7c>
   17534:	ldr	r0, [r4, #8]
   17538:	str	r6, [sp, #24]
   1753c:	cmp	r0, #1
   17540:	blt	179dc <__assert_fail@plt+0x652c>
   17544:	ldr	ip, [sp, #188]	; 0xbc
   17548:	mov	r6, #0
   1754c:	str	r5, [sp, #12]
   17550:	str	ip, [sp, #20]
   17554:	b	17568 <__assert_fail@plt+0x60b8>
   17558:	ldr	r0, [r4, #8]
   1755c:	add	r6, r6, #1
   17560:	cmp	r6, r0
   17564:	bge	179dc <__assert_fail@plt+0x652c>
   17568:	ldr	r0, [r4, #12]
   1756c:	ldr	r1, [r0, r6, lsl #2]
   17570:	ldr	r0, [ip]
   17574:	add	r0, r0, r1, lsl #3
   17578:	ldr	r3, [r0, #4]
   1757c:	tst	r3, #1048576	; 0x100000
   17580:	beq	17558 <__assert_fail@plt+0x60a8>
   17584:	movw	r0, #65280	; 0xff00
   17588:	movt	r0, #3
   1758c:	tst	r3, r0
   17590:	beq	176a0 <__assert_fail@plt+0x61f0>
   17594:	ldr	r0, [sp, #144]	; 0x90
   17598:	cmn	r0, #1
   1759c:	ble	175d8 <__assert_fail@plt+0x6128>
   175a0:	ldr	r2, [sp, #152]	; 0x98
   175a4:	cmp	r2, r0
   175a8:	beq	178bc <__assert_fail@plt+0x640c>
   175ac:	ldr	r2, [sp, #184]	; 0xb8
   175b0:	cmp	r2, #2
   175b4:	blt	175e0 <__assert_fail@plt+0x6130>
   175b8:	ldr	r2, [sp, #112]	; 0x70
   175bc:	ldr	r5, [sp, #12]
   175c0:	ldr	r9, [r2, r0, lsl #2]
   175c4:	cmn	r9, #1
   175c8:	bne	17624 <__assert_fail@plt+0x6174>
   175cc:	sub	r0, r0, #1
   175d0:	cmn	r0, #1
   175d4:	bne	175c0 <__assert_fail@plt+0x6110>
   175d8:	ldr	lr, [sp, #164]	; 0xa4
   175dc:	b	1764c <__assert_fail@plt+0x619c>
   175e0:	mov	r9, r3
   175e4:	ldr	r3, [sp, #108]	; 0x6c
   175e8:	ldr	r2, [sp, #172]	; 0xac
   175ec:	mov	lr, #1
   175f0:	ldrb	r0, [r3, r0]
   175f4:	ubfx	r3, r0, #5, #3
   175f8:	and	r5, r0, #31
   175fc:	ldr	r3, [r2, r3, lsl #2]
   17600:	mov	r2, #0
   17604:	tst	r3, lr, lsl r5
   17608:	ldr	r5, [sp, #12]
   1760c:	bne	17664 <__assert_fail@plt+0x61b4>
   17610:	mov	r3, r9
   17614:	mov	lr, #0
   17618:	cmp	r0, #10
   1761c:	beq	1763c <__assert_fail@plt+0x618c>
   17620:	b	1764c <__assert_fail@plt+0x619c>
   17624:	ldrb	r0, [sp, #182]	; 0xb6
   17628:	cmp	r0, #0
   1762c:	bne	178f4 <__assert_fail@plt+0x6444>
   17630:	mov	lr, #0
   17634:	cmp	r9, #10
   17638:	bne	1764c <__assert_fail@plt+0x619c>
   1763c:	ldrb	r0, [sp, #181]	; 0xb5
   17640:	cmp	r0, #0
   17644:	movwne	r0, #1
   17648:	lsl	lr, r0, #1
   1764c:	and	r0, lr, #1
   17650:	tst	r3, #1024	; 0x400
   17654:	eor	r2, r0, #1
   17658:	beq	17664 <__assert_fail@plt+0x61b4>
   1765c:	cmp	r0, #0
   17660:	beq	17558 <__assert_fail@plt+0x60a8>
   17664:	ldr	r0, [ip]
   17668:	cmp	r2, #0
   1766c:	add	r0, r0, r1, lsl #3
   17670:	ldr	r0, [r0, #4]
   17674:	bne	17680 <__assert_fail@plt+0x61d0>
   17678:	ands	r2, r0, #2048	; 0x800
   1767c:	bne	17558 <__assert_fail@plt+0x60a8>
   17680:	tst	lr, #2
   17684:	bne	17690 <__assert_fail@plt+0x61e0>
   17688:	ands	r2, r0, #8192	; 0x2000
   1768c:	bne	17558 <__assert_fail@plt+0x60a8>
   17690:	tst	lr, #8
   17694:	bne	176a0 <__assert_fail@plt+0x61f0>
   17698:	ands	r0, r0, #32768	; 0x8000
   1769c:	bne	17558 <__assert_fail@plt+0x60a8>
   176a0:	ldr	r3, [sp, #144]	; 0x90
   176a4:	mov	r0, ip
   176a8:	add	r2, sp, #104	; 0x68
   176ac:	str	r6, [sp, #16]
   176b0:	mov	r9, r1
   176b4:	bl	237e8 <__assert_fail@plt+0x12338>
   176b8:	ldr	r6, [sp, #16]
   176bc:	ldr	ip, [sp, #20]
   176c0:	cmp	r0, #0
   176c4:	beq	17558 <__assert_fail@plt+0x60a8>
   176c8:	ldr	r1, [sp, #224]	; 0xe0
   176cc:	mov	r3, r9
   176d0:	cmp	r1, r0
   176d4:	movlt	r1, r0
   176d8:	str	r1, [sp, #224]	; 0xe0
   176dc:	ldr	r6, [sp, #144]	; 0x90
   176e0:	ldr	r2, [sp, #140]	; 0x8c
   176e4:	ldr	r1, [sp, #152]	; 0x98
   176e8:	ldr	r5, [sp, #208]	; 0xd0
   176ec:	add	r6, r6, r0
   176f0:	cmp	r2, r6
   176f4:	cmple	r2, r1
   176f8:	blt	1770c <__assert_fail@plt+0x625c>
   176fc:	ldr	r0, [sp, #132]	; 0x84
   17700:	cmp	r0, r6
   17704:	cmple	r0, r1
   17708:	bge	17728 <__assert_fail@plt+0x6278>
   1770c:	add	r1, r6, #1
   17710:	add	r0, sp, #104	; 0x68
   17714:	bl	21a30 <__assert_fail@plt+0x10580>
   17718:	ldr	ip, [sp, #20]
   1771c:	mov	r3, r9
   17720:	cmp	r0, #0
   17724:	bne	17a58 <__assert_fail@plt+0x65a8>
   17728:	cmp	r6, r5
   1772c:	ble	17758 <__assert_fail@plt+0x62a8>
   17730:	sub	r0, r6, r5
   17734:	mov	r1, #0
   17738:	lsl	r2, r0, #2
   1773c:	ldr	r0, [sp, #204]	; 0xcc
   17740:	add	r0, r0, r5, lsl #2
   17744:	add	r0, r0, #4
   17748:	bl	113cc <memset@plt>
   1774c:	ldr	ip, [sp, #20]
   17750:	mov	r3, r9
   17754:	str	r6, [sp, #208]	; 0xd0
   17758:	mov	r0, #0
   1775c:	str	r0, [fp, #-48]	; 0xffffffd0
   17760:	ldr	r0, [sp, #204]	; 0xcc
   17764:	ldr	r1, [ip, #24]
   17768:	ldr	r9, [r0, r6, lsl #2]
   1776c:	ldr	r0, [ip, #12]
   17770:	ldr	r0, [r0, r3, lsl #2]
   17774:	cmp	r9, #0
   17778:	add	r0, r0, r0, lsl #1
   1777c:	add	r2, r1, r0, lsl #2
   17780:	beq	177a4 <__assert_fail@plt+0x62f4>
   17784:	ldr	r1, [r9, #40]	; 0x28
   17788:	sub	r0, fp, #192	; 0xc0
   1778c:	bl	21e3c <__assert_fail@plt+0x1098c>
   17790:	ldr	r5, [sp, #12]
   17794:	cmp	r0, #0
   17798:	str	r0, [fp, #-48]	; 0xffffffd0
   1779c:	beq	177b8 <__assert_fail@plt+0x6308>
   177a0:	b	17a60 <__assert_fail@plt+0x65b0>
   177a4:	vldr	d16, [r2]
   177a8:	ldr	r0, [r2, #8]
   177ac:	ldr	r5, [sp, #12]
   177b0:	str	r0, [fp, #-184]	; 0xffffff48
   177b4:	vstr	d16, [fp, #-192]	; 0xffffff40
   177b8:	cmp	r6, #0
   177bc:	str	r6, [sp, #8]
   177c0:	str	r9, [sp, #4]
   177c4:	ble	178d0 <__assert_fail@plt+0x6420>
   177c8:	ldr	r1, [sp, #152]	; 0x98
   177cc:	sub	r3, r6, #1
   177d0:	cmp	r1, r3
   177d4:	ldr	r1, [sp, #20]
   177d8:	beq	178e0 <__assert_fail@plt+0x6430>
   177dc:	ldr	r0, [sp, #184]	; 0xb8
   177e0:	cmp	r0, #2
   177e4:	blt	17810 <__assert_fail@plt+0x6360>
   177e8:	ldr	r2, [sp, #112]	; 0x70
   177ec:	sub	r0, fp, #48	; 0x30
   177f0:	ldr	r9, [r2, r3, lsl #2]
   177f4:	cmn	r9, #1
   177f8:	bne	17844 <__assert_fail@plt+0x6394>
   177fc:	sub	r3, r3, #1
   17800:	cmn	r3, #1
   17804:	bne	177f0 <__assert_fail@plt+0x6340>
   17808:	ldr	r3, [sp, #164]	; 0xa4
   1780c:	b	1786c <__assert_fail@plt+0x63bc>
   17810:	ldr	r0, [sp, #108]	; 0x6c
   17814:	ldr	r2, [sp, #172]	; 0xac
   17818:	ldrb	r6, [r0, r3]
   1781c:	mov	r3, #1
   17820:	ubfx	r0, r6, #5, #3
   17824:	ldr	r0, [r2, r0, lsl #2]
   17828:	and	r2, r6, #31
   1782c:	tst	r0, r3, lsl r2
   17830:	sub	r0, fp, #48	; 0x30
   17834:	moveq	r3, #0
   17838:	cmpeq	r6, #10
   1783c:	bne	1786c <__assert_fail@plt+0x63bc>
   17840:	b	1785c <__assert_fail@plt+0x63ac>
   17844:	ldrb	r2, [sp, #182]	; 0xb6
   17848:	cmp	r2, #0
   1784c:	bne	17930 <__assert_fail@plt+0x6480>
   17850:	mov	r3, #0
   17854:	cmp	r9, #10
   17858:	bne	1786c <__assert_fail@plt+0x63bc>
   1785c:	ldrb	r2, [sp, #181]	; 0xb5
   17860:	cmp	r2, #0
   17864:	movwne	r2, #1
   17868:	lsl	r3, r2, #1
   1786c:	sub	r2, fp, #192	; 0xc0
   17870:	bl	1ff18 <__assert_fail@plt+0xea68>
   17874:	ldr	r1, [sp, #204]	; 0xcc
   17878:	ldr	r6, [sp, #8]
   1787c:	str	r0, [r1, r6, lsl #2]
   17880:	ldr	r0, [sp, #4]
   17884:	cmp	r0, #0
   17888:	beq	17894 <__assert_fail@plt+0x63e4>
   1788c:	ldr	r0, [fp, #-184]	; 0xffffff48
   17890:	bl	29220 <__assert_fail@plt+0x17d70>
   17894:	ldr	r0, [sp, #204]	; 0xcc
   17898:	ldr	ip, [sp, #20]
   1789c:	ldr	r0, [r0, r6, lsl #2]
   178a0:	ldr	r6, [sp, #16]
   178a4:	cmp	r0, #0
   178a8:	bne	17558 <__assert_fail@plt+0x60a8>
   178ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   178b0:	cmp	r0, #0
   178b4:	beq	17558 <__assert_fail@plt+0x60a8>
   178b8:	b	17a60 <__assert_fail@plt+0x65b0>
   178bc:	ldr	r0, [sp, #192]	; 0xc0
   178c0:	ldr	r5, [sp, #12]
   178c4:	and	r0, r0, #2
   178c8:	eor	lr, r0, #10
   178cc:	b	1764c <__assert_fail@plt+0x619c>
   178d0:	ldr	r3, [sp, #164]	; 0xa4
   178d4:	ldr	r1, [sp, #20]
   178d8:	sub	r0, fp, #48	; 0x30
   178dc:	b	1786c <__assert_fail@plt+0x63bc>
   178e0:	ldr	r0, [sp, #192]	; 0xc0
   178e4:	and	r0, r0, #2
   178e8:	eor	r3, r0, #10
   178ec:	sub	r0, fp, #48	; 0x30
   178f0:	b	1786c <__assert_fail@plt+0x63bc>
   178f4:	mov	r0, r9
   178f8:	str	r3, [sp, #4]
   178fc:	str	r1, [sp, #8]
   17900:	bl	113b4 <iswalnum@plt>
   17904:	mov	lr, #1
   17908:	mov	r2, #0
   1790c:	cmp	r9, #95	; 0x5f
   17910:	beq	1795c <__assert_fail@plt+0x64ac>
   17914:	ldr	r5, [sp, #12]
   17918:	ldr	ip, [sp, #20]
   1791c:	ldr	r1, [sp, #8]
   17920:	ldr	r3, [sp, #4]
   17924:	cmp	r0, #0
   17928:	beq	17630 <__assert_fail@plt+0x6180>
   1792c:	b	17664 <__assert_fail@plt+0x61b4>
   17930:	mov	r0, r9
   17934:	bl	113b4 <iswalnum@plt>
   17938:	mov	r3, #1
   1793c:	cmp	r9, #95	; 0x5f
   17940:	beq	1796c <__assert_fail@plt+0x64bc>
   17944:	ldr	r5, [sp, #12]
   17948:	ldr	r1, [sp, #20]
   1794c:	cmp	r0, #0
   17950:	sub	r0, fp, #48	; 0x30
   17954:	beq	17850 <__assert_fail@plt+0x63a0>
   17958:	b	1786c <__assert_fail@plt+0x63bc>
   1795c:	ldr	r5, [sp, #12]
   17960:	ldr	ip, [sp, #20]
   17964:	ldr	r1, [sp, #8]
   17968:	b	17664 <__assert_fail@plt+0x61b4>
   1796c:	ldr	r5, [sp, #12]
   17970:	b	178d4 <__assert_fail@plt+0x6424>
   17974:	add	r1, r0, #2
   17978:	add	r0, sp, #104	; 0x68
   1797c:	bl	21a30 <__assert_fail@plt+0x10580>
   17980:	cmp	r0, #0
   17984:	str	r0, [fp, #-196]	; 0xffffff3c
   17988:	beq	17270 <__assert_fail@plt+0x5dc0>
   1798c:	b	1947c <__assert_fail@plt+0x7fcc>
   17990:	ldr	r0, [sp, #144]	; 0x90
   17994:	cmp	r0, #0
   17998:	ble	179d4 <__assert_fail@plt+0x6524>
   1799c:	ldr	r1, [sp, #152]	; 0x98
   179a0:	sub	r3, r0, #1
   179a4:	cmp	r1, r3
   179a8:	beq	17a90 <__assert_fail@plt+0x65e0>
   179ac:	ldr	r1, [sp, #184]	; 0xb8
   179b0:	cmp	r1, #2
   179b4:	blt	179ec <__assert_fail@plt+0x653c>
   179b8:	ldr	r1, [sp, #112]	; 0x70
   179bc:	ldr	r0, [r1, r3, lsl #2]
   179c0:	cmn	r0, #1
   179c4:	bne	17a14 <__assert_fail@plt+0x6564>
   179c8:	sub	r3, r3, #1
   179cc:	cmn	r3, #1
   179d0:	bne	179bc <__assert_fail@plt+0x650c>
   179d4:	ldr	r1, [sp, #164]	; 0xa4
   179d8:	b	17a3c <__assert_fail@plt+0x658c>
   179dc:	ldr	r6, [sp, #24]
   179e0:	mov	r0, #0
   179e4:	str	r0, [fp, #-196]	; 0xffffff3c
   179e8:	b	1727c <__assert_fail@plt+0x5dcc>
   179ec:	ldr	r1, [sp, #108]	; 0x6c
   179f0:	ldr	ip, [sp, #172]	; 0xac
   179f4:	ldrb	r0, [r1, r3]
   179f8:	ubfx	r1, r0, #5, #3
   179fc:	and	r3, r0, #31
   17a00:	ldr	ip, [ip, r1, lsl #2]
   17a04:	mov	r1, #1
   17a08:	tst	ip, r1, lsl r3
   17a0c:	bne	17a3c <__assert_fail@plt+0x658c>
   17a10:	b	17a20 <__assert_fail@plt+0x6570>
   17a14:	ldrb	r1, [sp, #182]	; 0xb6
   17a18:	cmp	r1, #0
   17a1c:	bne	17a98 <__assert_fail@plt+0x65e8>
   17a20:	mov	r1, #0
   17a24:	cmp	r0, #10
   17a28:	bne	17a3c <__assert_fail@plt+0x658c>
   17a2c:	ldrb	r0, [sp, #181]	; 0xb5
   17a30:	cmp	r0, #0
   17a34:	movwne	r0, #1
   17a38:	lsl	r1, r0, #1
   17a3c:	bfi	r9, r1, #8, #1
   17a40:	ldr	r9, [r2, r9, lsl #2]
   17a44:	b	172d0 <__assert_fail@plt+0x5e20>
   17a48:	ldr	r0, [sp, #192]	; 0xc0
   17a4c:	and	r0, r0, #2
   17a50:	eor	r3, r0, #10
   17a54:	b	17480 <__assert_fail@plt+0x5fd0>
   17a58:	ldr	r5, [sp, #12]
   17a5c:	str	r0, [fp, #-48]	; 0xffffffd0
   17a60:	ldr	r6, [sp, #24]
   17a64:	str	r0, [fp, #-196]	; 0xffffff3c
   17a68:	mov	r9, #0
   17a6c:	b	172d0 <__assert_fail@plt+0x5e20>
   17a70:	mov	r0, r4
   17a74:	bl	113b4 <iswalnum@plt>
   17a78:	mov	r3, #1
   17a7c:	cmp	r4, #95	; 0x5f
   17a80:	beq	17480 <__assert_fail@plt+0x5fd0>
   17a84:	cmp	r0, #0
   17a88:	beq	17464 <__assert_fail@plt+0x5fb4>
   17a8c:	b	17480 <__assert_fail@plt+0x5fd0>
   17a90:	mov	r1, #10
   17a94:	b	17a3c <__assert_fail@plt+0x658c>
   17a98:	str	r5, [sp, #12]
   17a9c:	str	r2, [sp, #24]
   17aa0:	mov	r5, r0
   17aa4:	bl	113b4 <iswalnum@plt>
   17aa8:	mov	r1, #1
   17aac:	cmp	r5, #95	; 0x5f
   17ab0:	beq	17ad0 <__assert_fail@plt+0x6620>
   17ab4:	mov	r3, r5
   17ab8:	ldr	r5, [sp, #12]
   17abc:	ldr	r2, [sp, #24]
   17ac0:	cmp	r0, #0
   17ac4:	mov	r0, r3
   17ac8:	beq	17a20 <__assert_fail@plt+0x6570>
   17acc:	b	17a3c <__assert_fail@plt+0x658c>
   17ad0:	ldr	r5, [sp, #12]
   17ad4:	ldr	r2, [sp, #24]
   17ad8:	b	17a3c <__assert_fail@plt+0x658c>
   17adc:	cmp	r8, #0
   17ae0:	beq	17af0 <__assert_fail@plt+0x6640>
   17ae4:	ldr	r0, [r8]
   17ae8:	add	r0, r0, r5
   17aec:	str	r0, [r8]
   17af0:	ldr	r8, [sp, #60]	; 0x3c
   17af4:	ldr	r4, [sp, #80]	; 0x50
   17af8:	ldr	r9, [sp, #76]	; 0x4c
   17afc:	cmn	sl, #1
   17b00:	beq	18468 <__assert_fail@plt+0x6fb8>
   17b04:	cmn	sl, #2
   17b08:	beq	1947c <__assert_fail@plt+0x7fcc>
   17b0c:	ldr	r9, [sp, #52]	; 0x34
   17b10:	str	sl, [sp, #196]	; 0xc4
   17b14:	ldr	r2, [sp, #84]	; 0x54
   17b18:	ldr	lr, [sp, #96]	; 0x60
   17b1c:	ldrb	r0, [r9, #28]
   17b20:	cmp	r2, #2
   17b24:	bcc	17b30 <__assert_fail@plt+0x6680>
   17b28:	ands	r1, r0, #16
   17b2c:	beq	17b3c <__assert_fail@plt+0x668c>
   17b30:	ldr	r1, [lr, #76]	; 0x4c
   17b34:	cmp	r1, #0
   17b38:	beq	17c9c <__assert_fail@plt+0x67ec>
   17b3c:	ldr	r0, [sp, #204]	; 0xcc
   17b40:	cmn	sl, #1
   17b44:	ldr	r6, [r0, sl, lsl #2]
   17b48:	ble	17b80 <__assert_fail@plt+0x66d0>
   17b4c:	ldr	r0, [sp, #152]	; 0x98
   17b50:	cmp	r0, sl
   17b54:	beq	17fd8 <__assert_fail@plt+0x6b28>
   17b58:	ldr	r0, [sp, #184]	; 0xb8
   17b5c:	cmp	r0, #2
   17b60:	blt	17b90 <__assert_fail@plt+0x66e0>
   17b64:	ldr	r0, [sp, #112]	; 0x70
   17b68:	ldr	r4, [r0, sl, lsl #2]
   17b6c:	cmn	r4, #1
   17b70:	bne	17bc8 <__assert_fail@plt+0x6718>
   17b74:	sub	sl, sl, #1
   17b78:	cmn	sl, #1
   17b7c:	bne	17b68 <__assert_fail@plt+0x66b8>
   17b80:	ldr	r3, [sp, #164]	; 0xa4
   17b84:	movw	sl, #65280	; 0xff00
   17b88:	movt	sl, #3
   17b8c:	b	17bf8 <__assert_fail@plt+0x6748>
   17b90:	ldr	r0, [sp, #108]	; 0x6c
   17b94:	ldr	r1, [sp, #172]	; 0xac
   17b98:	mov	r3, #1
   17b9c:	ldrb	r0, [r0, sl]
   17ba0:	movw	sl, #65280	; 0xff00
   17ba4:	movt	sl, #3
   17ba8:	ubfx	r2, r0, #5, #3
   17bac:	ldr	r1, [r1, r2, lsl #2]
   17bb0:	and	r2, r0, #31
   17bb4:	tst	r1, r3, lsl r2
   17bb8:	moveq	r3, #0
   17bbc:	cmpeq	r0, #10
   17bc0:	bne	17bf8 <__assert_fail@plt+0x6748>
   17bc4:	b	17be8 <__assert_fail@plt+0x6738>
   17bc8:	ldrb	r0, [sp, #182]	; 0xb6
   17bcc:	movw	sl, #65280	; 0xff00
   17bd0:	movt	sl, #3
   17bd4:	cmp	r0, #0
   17bd8:	bne	18090 <__assert_fail@plt+0x6be0>
   17bdc:	mov	r3, #0
   17be0:	cmp	r4, #10
   17be4:	bne	17bf8 <__assert_fail@plt+0x6748>
   17be8:	ldrb	r0, [sp, #181]	; 0xb5
   17bec:	cmp	r0, #0
   17bf0:	movwne	r0, #1
   17bf4:	lsl	r3, r0, #1
   17bf8:	ldr	r0, [r6, #8]
   17bfc:	cmp	r0, #1
   17c00:	blt	17c8c <__assert_fail@plt+0x67dc>
   17c04:	ldr	r7, [r6, #12]
   17c08:	ldr	r6, [sp, #188]	; 0xbc
   17c0c:	and	ip, r3, #8
   17c10:	and	r2, r3, #2
   17c14:	and	r3, r3, #1
   17c18:	ldr	r6, [r6]
   17c1c:	b	17c2c <__assert_fail@plt+0x677c>
   17c20:	add	r7, r7, #4
   17c24:	subs	r0, r0, #1
   17c28:	beq	17c8c <__assert_fail@plt+0x67dc>
   17c2c:	ldr	r5, [r7]
   17c30:	add	r4, r6, r5, lsl #3
   17c34:	ldr	r4, [r4, #4]
   17c38:	uxtb	r1, r4
   17c3c:	cmp	r1, #2
   17c40:	bne	17c20 <__assert_fail@plt+0x6770>
   17c44:	tst	r4, sl
   17c48:	beq	17c90 <__assert_fail@plt+0x67e0>
   17c4c:	cmp	r3, #0
   17c50:	bne	17c5c <__assert_fail@plt+0x67ac>
   17c54:	ands	r1, r4, #1024	; 0x400
   17c58:	bne	17c20 <__assert_fail@plt+0x6770>
   17c5c:	cmp	r3, #0
   17c60:	andsne	r1, r4, #2048	; 0x800
   17c64:	bne	17c20 <__assert_fail@plt+0x6770>
   17c68:	cmp	r2, #0
   17c6c:	bne	17c78 <__assert_fail@plt+0x67c8>
   17c70:	ands	r1, r4, #8192	; 0x2000
   17c74:	bne	17c20 <__assert_fail@plt+0x6770>
   17c78:	cmp	ip, #0
   17c7c:	bne	17c90 <__assert_fail@plt+0x67e0>
   17c80:	ands	r1, r4, #32768	; 0x8000
   17c84:	bne	17c20 <__assert_fail@plt+0x6770>
   17c88:	b	17c90 <__assert_fail@plt+0x67e0>
   17c8c:	mov	r5, #0
   17c90:	str	r5, [sp, #200]	; 0xc8
   17c94:	ldr	r2, [sp, #84]	; 0x54
   17c98:	ldrb	r0, [r9, #28]
   17c9c:	ldr	r4, [sp, #80]	; 0x50
   17ca0:	ldr	r9, [sp, #76]	; 0x4c
   17ca4:	cmp	r2, #2
   17ca8:	bcc	17cc0 <__assert_fail@plt+0x6810>
   17cac:	ands	r0, r0, #16
   17cb0:	bne	17cc0 <__assert_fail@plt+0x6810>
   17cb4:	ldrb	r0, [lr, #88]	; 0x58
   17cb8:	tst	r0, #1
   17cbc:	bne	17ccc <__assert_fail@plt+0x681c>
   17cc0:	ldr	r0, [lr, #76]	; 0x4c
   17cc4:	cmp	r0, #0
   17cc8:	beq	18540 <__assert_fail@plt+0x7090>
   17ccc:	ldr	r6, [sp, #196]	; 0xc4
   17cd0:	cmn	r6, #-1073741823	; 0xc0000001
   17cd4:	bcs	1947c <__assert_fail@plt+0x7fcc>
   17cd8:	ldr	r0, [sp, #188]	; 0xbc
   17cdc:	ldr	r8, [sp, #200]	; 0xc8
   17ce0:	str	r0, [sp, #64]	; 0x40
   17ce4:	mov	r0, #4
   17ce8:	add	r5, r0, r6, lsl #2
   17cec:	mov	r0, r5
   17cf0:	bl	29054 <__assert_fail@plt+0x17ba4>
   17cf4:	mov	r7, r0
   17cf8:	cmp	r0, #0
   17cfc:	beq	19604 <__assert_fail@plt+0x8154>
   17d00:	ldr	r0, [sp, #64]	; 0x40
   17d04:	ldr	r0, [r0, #76]	; 0x4c
   17d08:	cmp	r0, #0
   17d0c:	beq	17e30 <__assert_fail@plt+0x6980>
   17d10:	mov	r0, r5
   17d14:	bl	29054 <__assert_fail@plt+0x17ba4>
   17d18:	cmp	r0, #0
   17d1c:	beq	19604 <__assert_fail@plt+0x8154>
   17d20:	add	r9, r6, #1
   17d24:	mov	r1, #0
   17d28:	mov	r5, r0
   17d2c:	lsl	r2, r9, #2
   17d30:	bl	113cc <memset@plt>
   17d34:	ldr	r0, [sp, #36]	; 0x24
   17d38:	mov	r1, #0
   17d3c:	str	r6, [fp, #-180]	; 0xffffff4c
   17d40:	str	r8, [fp, #-184]	; 0xffffff48
   17d44:	str	r5, [fp, #-188]	; 0xffffff44
   17d48:	str	r7, [fp, #-192]	; 0xffffff40
   17d4c:	str	r1, [r0]
   17d50:	str	r1, [r0, #4]
   17d54:	str	r1, [r0, #8]
   17d58:	add	r0, sp, #104	; 0x68
   17d5c:	sub	r1, fp, #192	; 0xc0
   17d60:	bl	24e90 <__assert_fail@plt+0x139e0>
   17d64:	mov	sl, r0
   17d68:	mov	r0, #0
   17d6c:	bl	29220 <__assert_fail@plt+0x17d70>
   17d70:	cmp	sl, #0
   17d74:	bne	184a0 <__assert_fail@plt+0x6ff0>
   17d78:	ldr	r0, [r7]
   17d7c:	cmp	r0, #0
   17d80:	beq	18234 <__assert_fail@plt+0x6d84>
   17d84:	mov	r1, #0
   17d88:	cmp	r6, #0
   17d8c:	mov	sl, #0
   17d90:	str	r5, [sp, #20]
   17d94:	str	r7, [sp, #24]
   17d98:	str	r6, [sp, #16]
   17d9c:	str	r1, [sp, #12]
   17da0:	bmi	17e8c <__assert_fail@plt+0x69dc>
   17da4:	ldr	r1, [sp, #24]
   17da8:	ldr	r6, [sp, #20]
   17dac:	sub	r7, r9, #1
   17db0:	add	r5, r1, #4
   17db4:	ldr	r2, [r6]
   17db8:	cmp	r0, #0
   17dbc:	beq	17e14 <__assert_fail@plt+0x6964>
   17dc0:	cmp	r2, #0
   17dc4:	beq	17e18 <__assert_fail@plt+0x6968>
   17dc8:	sub	r4, fp, #48	; 0x30
   17dcc:	add	r1, r0, #4
   17dd0:	add	r2, r2, #4
   17dd4:	mov	r0, r4
   17dd8:	bl	21e3c <__assert_fail@plt+0x1098c>
   17ddc:	cmp	r0, #0
   17de0:	str	r0, [fp, #-196]	; 0xffffff3c
   17de4:	bne	17eb0 <__assert_fail@plt+0x6a00>
   17de8:	ldr	r1, [sp, #64]	; 0x40
   17dec:	sub	r0, fp, #196	; 0xc4
   17df0:	mov	r2, r4
   17df4:	bl	234d0 <__assert_fail@plt+0x12020>
   17df8:	str	r0, [r5, #-4]
   17dfc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17e00:	bl	29220 <__assert_fail@plt+0x17d70>
   17e04:	ldr	sl, [fp, #-196]	; 0xffffff3c
   17e08:	cmp	sl, #0
   17e0c:	beq	17e18 <__assert_fail@plt+0x6968>
   17e10:	b	17e8c <__assert_fail@plt+0x69dc>
   17e14:	str	r2, [r5, #-4]
   17e18:	cmp	r7, #0
   17e1c:	beq	17e88 <__assert_fail@plt+0x69d8>
   17e20:	ldr	r0, [r5], #4
   17e24:	add	r6, r6, #4
   17e28:	sub	r7, r7, #1
   17e2c:	b	17db4 <__assert_fail@plt+0x6904>
   17e30:	ldr	r0, [sp, #36]	; 0x24
   17e34:	mov	r1, #0
   17e38:	str	r6, [fp, #-180]	; 0xffffff4c
   17e3c:	str	r8, [fp, #-184]	; 0xffffff48
   17e40:	str	r1, [fp, #-188]	; 0xffffff44
   17e44:	str	r7, [fp, #-192]	; 0xffffff40
   17e48:	str	r1, [r0]
   17e4c:	str	r1, [r0, #4]
   17e50:	str	r1, [r0, #8]
   17e54:	add	r0, sp, #104	; 0x68
   17e58:	sub	r1, fp, #192	; 0xc0
   17e5c:	bl	24e90 <__assert_fail@plt+0x139e0>
   17e60:	mov	sl, r0
   17e64:	mov	r0, #0
   17e68:	bl	29220 <__assert_fail@plt+0x17d70>
   17e6c:	cmp	sl, #0
   17e70:	bne	18084 <__assert_fail@plt+0x6bd4>
   17e74:	ldr	r0, [r7]
   17e78:	mov	r5, #0
   17e7c:	cmp	r0, #0
   17e80:	beq	18454 <__assert_fail@plt+0x6fa4>
   17e84:	b	18518 <__assert_fail@plt+0x7068>
   17e88:	mov	sl, #0
   17e8c:	ldr	r0, [sp, #20]
   17e90:	bl	29220 <__assert_fail@plt+0x17d70>
   17e94:	ldr	r4, [sp, #80]	; 0x50
   17e98:	ldr	r9, [sp, #76]	; 0x4c
   17e9c:	ldr	r7, [sp, #24]
   17ea0:	ldr	r6, [sp, #16]
   17ea4:	cmp	sl, #0
   17ea8:	beq	18518 <__assert_fail@plt+0x7068>
   17eac:	b	184ac <__assert_fail@plt+0x6ffc>
   17eb0:	mov	sl, r0
   17eb4:	b	17e8c <__assert_fail@plt+0x69dc>
   17eb8:	sxtb	r0, r0
   17ebc:	cmn	r0, #1
   17ec0:	ble	17fe8 <__assert_fail@plt+0x6b38>
   17ec4:	mov	r0, #1
   17ec8:	mov	sl, r5
   17ecc:	str	r0, [sp, #64]	; 0x40
   17ed0:	ldr	r0, [sp, #44]	; 0x2c
   17ed4:	cmp	r0, #0
   17ed8:	bne	17204 <__assert_fail@plt+0x5d54>
   17edc:	mov	sl, r5
   17ee0:	b	17af4 <__assert_fail@plt+0x6644>
   17ee4:	ldr	r0, [r9, #8]
   17ee8:	str	r5, [sp, #12]
   17eec:	cmp	r0, #1
   17ef0:	blt	17fbc <__assert_fail@plt+0x6b0c>
   17ef4:	ldr	r4, [sp, #188]	; 0xbc
   17ef8:	mov	r6, #0
   17efc:	b	17f24 <__assert_fail@plt+0x6a74>
   17f00:	add	r1, r1, #1
   17f04:	str	r5, [r0, #4]
   17f08:	str	r1, [sp, #228]	; 0xe4
   17f0c:	mov	r1, #0
   17f10:	str	r1, [r0]
   17f14:	ldr	r0, [r9, #8]
   17f18:	add	r6, r6, #1
   17f1c:	cmp	r6, r0
   17f20:	bge	17fbc <__assert_fail@plt+0x6b0c>
   17f24:	ldr	r1, [r9, #12]
   17f28:	ldr	r5, [r1, r6, lsl #2]
   17f2c:	ldr	r1, [r4]
   17f30:	add	r2, r1, r5, lsl #3
   17f34:	ldrb	r2, [r2, #4]
   17f38:	cmp	r2, #8
   17f3c:	bne	17f18 <__assert_fail@plt+0x6a68>
   17f40:	ldr	r1, [r1, r5, lsl #3]
   17f44:	cmp	r1, #31
   17f48:	bgt	17f18 <__assert_fail@plt+0x6a68>
   17f4c:	ldr	r2, [r4, #80]	; 0x50
   17f50:	mov	r3, #1
   17f54:	tst	r2, r3, lsl r1
   17f58:	beq	17f18 <__assert_fail@plt+0x6a68>
   17f5c:	ldr	r0, [sp, #228]	; 0xe4
   17f60:	ldr	r7, [sp, #232]	; 0xe8
   17f64:	cmp	r0, r7
   17f68:	beq	17f98 <__assert_fail@plt+0x6ae8>
   17f6c:	mov	r0, #1
   17f70:	mov	r1, #24
   17f74:	bl	29000 <__assert_fail@plt+0x17b50>
   17f78:	ldr	r1, [sp, #228]	; 0xe4
   17f7c:	ldr	r2, [sp, #236]	; 0xec
   17f80:	str	r0, [r2, r1, lsl #2]
   17f84:	ldr	r0, [sp, #236]	; 0xec
   17f88:	ldr	r0, [r0, r1, lsl #2]
   17f8c:	cmp	r0, #0
   17f90:	bne	17f00 <__assert_fail@plt+0x6a50>
   17f94:	b	184e0 <__assert_fail@plt+0x7030>
   17f98:	ldr	r0, [sp, #236]	; 0xec
   17f9c:	lsl	r1, r7, #3
   17fa0:	bl	29084 <__assert_fail@plt+0x17bd4>
   17fa4:	cmp	r0, #0
   17fa8:	beq	184e0 <__assert_fail@plt+0x7030>
   17fac:	str	r0, [sp, #236]	; 0xec
   17fb0:	lsl	r0, r7, #1
   17fb4:	str	r0, [sp, #232]	; 0xe8
   17fb8:	b	17f6c <__assert_fail@plt+0x6abc>
   17fbc:	mov	r6, #0
   17fc0:	str	r6, [fp, #-196]	; 0xffffff3c
   17fc4:	ldrb	r0, [r9, #52]	; 0x34
   17fc8:	tst	r0, #64	; 0x40
   17fcc:	bne	18030 <__assert_fail@plt+0x6b80>
   17fd0:	ldr	r5, [sp, #12]
   17fd4:	b	171ec <__assert_fail@plt+0x5d3c>
   17fd8:	ldr	r0, [sp, #192]	; 0xc0
   17fdc:	and	r0, r0, #2
   17fe0:	eor	r3, r0, #10
   17fe4:	b	17b84 <__assert_fail@plt+0x66d4>
   17fe8:	cmn	r5, #1
   17fec:	ble	18028 <__assert_fail@plt+0x6b78>
   17ff0:	ldr	r0, [sp, #152]	; 0x98
   17ff4:	cmp	r0, r5
   17ff8:	beq	184e8 <__assert_fail@plt+0x7038>
   17ffc:	ldr	r0, [sp, #184]	; 0xb8
   18000:	cmp	r0, #2
   18004:	blt	18054 <__assert_fail@plt+0x6ba4>
   18008:	ldr	r0, [sp, #112]	; 0x70
   1800c:	mov	r1, r5
   18010:	ldr	r4, [r0, r1, lsl #2]
   18014:	cmn	r4, #1
   18018:	bne	180d8 <__assert_fail@plt+0x6c28>
   1801c:	sub	r1, r1, #1
   18020:	cmn	r1, #1
   18024:	bne	18010 <__assert_fail@plt+0x6b60>
   18028:	ldr	r3, [sp, #164]	; 0xa4
   1802c:	b	18100 <__assert_fail@plt+0x6c50>
   18030:	add	r1, r9, #4
   18034:	add	r0, sp, #104	; 0x68
   18038:	bl	210b0 <__assert_fail@plt+0xfc00>
   1803c:	ldr	r5, [sp, #12]
   18040:	cmp	r0, #0
   18044:	str	r0, [fp, #-196]	; 0xffffff3c
   18048:	beq	171ec <__assert_fail@plt+0x5d3c>
   1804c:	mov	sl, r0
   18050:	b	17af4 <__assert_fail@plt+0x6644>
   18054:	ldr	r0, [sp, #108]	; 0x6c
   18058:	ldr	r1, [sp, #172]	; 0xac
   1805c:	mov	r3, #1
   18060:	ldrb	r0, [r0, r5]
   18064:	ubfx	r2, r0, #5, #3
   18068:	ldr	r1, [r1, r2, lsl #2]
   1806c:	and	r2, r0, #31
   18070:	tst	r1, r3, lsl r2
   18074:	moveq	r3, #0
   18078:	cmpeq	r0, #10
   1807c:	bne	18100 <__assert_fail@plt+0x6c50>
   18080:	b	180f0 <__assert_fail@plt+0x6c40>
   18084:	mov	r0, #0
   18088:	str	r0, [sp, #12]
   1808c:	b	184ac <__assert_fail@plt+0x6ffc>
   18090:	mov	r0, r4
   18094:	mov	r5, lr
   18098:	bl	113b4 <iswalnum@plt>
   1809c:	mov	r3, #1
   180a0:	cmp	r4, #95	; 0x5f
   180a4:	beq	184d8 <__assert_fail@plt+0x7028>
   180a8:	cmp	r0, #0
   180ac:	mov	lr, r5
   180b0:	beq	17bdc <__assert_fail@plt+0x672c>
   180b4:	b	17bf8 <__assert_fail@plt+0x6748>
   180b8:	mov	r0, r6
   180bc:	bl	113b4 <iswalnum@plt>
   180c0:	ldr	r1, [sp, #48]	; 0x30
   180c4:	cmp	r6, #95	; 0x5f
   180c8:	beq	171bc <__assert_fail@plt+0x5d0c>
   180cc:	cmp	r0, #0
   180d0:	beq	17130 <__assert_fail@plt+0x5c80>
   180d4:	b	171bc <__assert_fail@plt+0x5d0c>
   180d8:	ldrb	r0, [sp, #182]	; 0xb6
   180dc:	cmp	r0, #0
   180e0:	bne	184f8 <__assert_fail@plt+0x7048>
   180e4:	mov	r3, #0
   180e8:	cmp	r4, #10
   180ec:	bne	18100 <__assert_fail@plt+0x6c50>
   180f0:	ldrb	r0, [sp, #181]	; 0xb5
   180f4:	cmp	r0, #0
   180f8:	movwne	r0, #1
   180fc:	lsl	r3, r0, #1
   18100:	ldr	r0, [r9, #8]
   18104:	cmp	r0, #1
   18108:	blt	171fc <__assert_fail@plt+0x5d4c>
   1810c:	str	r6, [sp, #24]
   18110:	ldr	r6, [sp, #188]	; 0xbc
   18114:	ldr	r7, [r9, #12]
   18118:	mov	ip, r5
   1811c:	and	r1, r3, #8
   18120:	and	r2, r3, #2
   18124:	and	r3, r3, #1
   18128:	ldr	r6, [r6]
   1812c:	b	1813c <__assert_fail@plt+0x6c8c>
   18130:	add	r7, r7, #4
   18134:	subs	r0, r0, #1
   18138:	beq	181dc <__assert_fail@plt+0x6d2c>
   1813c:	ldr	r4, [r7]
   18140:	add	r5, r6, r4, lsl #3
   18144:	mov	lr, r4
   18148:	ldr	r5, [r5, #4]
   1814c:	uxtb	r4, r5
   18150:	cmp	r4, #2
   18154:	bne	18130 <__assert_fail@plt+0x6c80>
   18158:	movw	r4, #65280	; 0xff00
   1815c:	movt	r4, #3
   18160:	tst	r5, r4
   18164:	beq	181a4 <__assert_fail@plt+0x6cf4>
   18168:	cmp	r3, #0
   1816c:	bne	18178 <__assert_fail@plt+0x6cc8>
   18170:	ands	r4, r5, #1024	; 0x400
   18174:	bne	18130 <__assert_fail@plt+0x6c80>
   18178:	cmp	r3, #0
   1817c:	andsne	r4, r5, #2048	; 0x800
   18180:	bne	18130 <__assert_fail@plt+0x6c80>
   18184:	cmp	r2, #0
   18188:	bne	18194 <__assert_fail@plt+0x6ce4>
   1818c:	ands	r4, r5, #8192	; 0x2000
   18190:	bne	18130 <__assert_fail@plt+0x6c80>
   18194:	cmp	r1, #0
   18198:	bne	181a4 <__assert_fail@plt+0x6cf4>
   1819c:	ands	r5, r5, #32768	; 0x8000
   181a0:	bne	18130 <__assert_fail@plt+0x6c80>
   181a4:	ldr	r1, [sp, #44]	; 0x2c
   181a8:	clz	r0, lr
   181ac:	ldr	r6, [sp, #24]
   181b0:	cmp	lr, #0
   181b4:	mov	sl, ip
   181b8:	mov	r5, ip
   181bc:	lsr	r0, r0, #5
   181c0:	movwne	lr, #1
   181c4:	mvneq	sl, #0
   181c8:	str	lr, [sp, #64]	; 0x40
   181cc:	orr	r0, r1, r0
   181d0:	cmp	r0, #0
   181d4:	bne	17204 <__assert_fail@plt+0x5d54>
   181d8:	b	17edc <__assert_fail@plt+0x6a2c>
   181dc:	ldr	r6, [sp, #24]
   181e0:	mov	r0, #0
   181e4:	mov	r5, ip
   181e8:	b	17200 <__assert_fail@plt+0x5d50>
   181ec:	ldr	r3, [sp, #164]	; 0xa4
   181f0:	movw	lr, #65280	; 0xff00
   181f4:	movt	lr, #3
   181f8:	b	18344 <__assert_fail@plt+0x6e94>
   181fc:	ldr	r0, [sp, #192]	; 0xc0
   18200:	and	r0, r0, #2
   18204:	eor	r3, r0, #10
   18208:	b	18344 <__assert_fail@plt+0x6e94>
   1820c:	mov	r0, r7
   18210:	bl	113b4 <iswalnum@plt>
   18214:	mov	r3, #1
   18218:	cmp	r7, #95	; 0x5f
   1821c:	beq	181f0 <__assert_fail@plt+0x6d40>
   18220:	movw	lr, #65280	; 0xff00
   18224:	cmp	r0, #0
   18228:	movt	lr, #3
   1822c:	beq	18328 <__assert_fail@plt+0x6e78>
   18230:	b	18344 <__assert_fail@plt+0x6e94>
   18234:	ldr	r1, [r5]
   18238:	cmp	r1, #0
   1823c:	bne	17d84 <__assert_fail@plt+0x68d4>
   18240:	cmp	r6, #1
   18244:	blt	1844c <__assert_fail@plt+0x6f9c>
   18248:	ldr	r0, [sp, #204]	; 0xcc
   1824c:	lsl	r4, r6, #2
   18250:	mov	r9, r6
   18254:	sub	r0, r0, #4
   18258:	b	18270 <__assert_fail@plt+0x6dc0>
   1825c:	sub	r9, r9, #1
   18260:	sub	r4, r4, #4
   18264:	add	r1, r9, #1
   18268:	cmp	r1, #2
   1826c:	blt	1844c <__assert_fail@plt+0x6f9c>
   18270:	ldr	r6, [r0, r9, lsl #2]
   18274:	cmp	r6, #0
   18278:	beq	1825c <__assert_fail@plt+0x6dac>
   1827c:	ldrb	r1, [r6, #52]	; 0x34
   18280:	tst	r1, #16
   18284:	beq	1825c <__assert_fail@plt+0x6dac>
   18288:	sub	sl, r9, #1
   1828c:	cmp	r9, #0
   18290:	str	r7, [sp, #24]
   18294:	str	r5, [sp, #20]
   18298:	ble	181ec <__assert_fail@plt+0x6d3c>
   1829c:	ldr	r0, [sp, #152]	; 0x98
   182a0:	movw	lr, #65280	; 0xff00
   182a4:	movt	lr, #3
   182a8:	add	r0, r0, #1
   182ac:	cmp	r0, r9
   182b0:	beq	181fc <__assert_fail@plt+0x6d4c>
   182b4:	ldr	r0, [sp, #184]	; 0xb8
   182b8:	cmp	r0, #2
   182bc:	blt	182e8 <__assert_fail@plt+0x6e38>
   182c0:	ldr	r0, [sp, #112]	; 0x70
   182c4:	mov	r1, sl
   182c8:	ldr	r7, [r0, r1, lsl #2]
   182cc:	cmn	r7, #1
   182d0:	bne	1831c <__assert_fail@plt+0x6e6c>
   182d4:	sub	r1, r1, #1
   182d8:	cmn	r1, #1
   182dc:	bne	182c8 <__assert_fail@plt+0x6e18>
   182e0:	ldr	r3, [sp, #164]	; 0xa4
   182e4:	b	18344 <__assert_fail@plt+0x6e94>
   182e8:	ldr	r0, [sp, #108]	; 0x6c
   182ec:	ldr	r1, [sp, #172]	; 0xac
   182f0:	mov	r3, #1
   182f4:	add	r0, r0, r9
   182f8:	ldrb	r0, [r0, #-1]
   182fc:	ubfx	r2, r0, #5, #3
   18300:	ldr	r1, [r1, r2, lsl #2]
   18304:	and	r2, r0, #31
   18308:	tst	r1, r3, lsl r2
   1830c:	moveq	r3, #0
   18310:	cmpeq	r0, #10
   18314:	bne	18344 <__assert_fail@plt+0x6e94>
   18318:	b	18334 <__assert_fail@plt+0x6e84>
   1831c:	ldrb	r0, [sp, #182]	; 0xb6
   18320:	cmp	r0, #0
   18324:	bne	1820c <__assert_fail@plt+0x6d5c>
   18328:	mov	r3, #0
   1832c:	cmp	r7, #10
   18330:	bne	18344 <__assert_fail@plt+0x6e94>
   18334:	ldrb	r0, [sp, #181]	; 0xb5
   18338:	cmp	r0, #0
   1833c:	movwne	r0, #1
   18340:	lsl	r3, r0, #1
   18344:	ldr	r0, [r6, #8]
   18348:	cmp	r0, #1
   1834c:	blt	183d8 <__assert_fail@plt+0x6f28>
   18350:	ldr	r7, [r6, #12]
   18354:	ldr	r6, [sp, #188]	; 0xbc
   18358:	and	ip, r3, #8
   1835c:	and	r2, r3, #2
   18360:	and	r3, r3, #1
   18364:	ldr	r6, [r6]
   18368:	b	18378 <__assert_fail@plt+0x6ec8>
   1836c:	add	r7, r7, #4
   18370:	subs	r0, r0, #1
   18374:	beq	183d8 <__assert_fail@plt+0x6f28>
   18378:	ldr	r8, [r7]
   1837c:	add	r5, r6, r8, lsl #3
   18380:	ldr	r5, [r5, #4]
   18384:	uxtb	r1, r5
   18388:	cmp	r1, #2
   1838c:	bne	1836c <__assert_fail@plt+0x6ebc>
   18390:	tst	r5, lr
   18394:	beq	183dc <__assert_fail@plt+0x6f2c>
   18398:	cmp	r3, #0
   1839c:	bne	183a8 <__assert_fail@plt+0x6ef8>
   183a0:	ands	r1, r5, #1024	; 0x400
   183a4:	bne	1836c <__assert_fail@plt+0x6ebc>
   183a8:	cmp	r3, #0
   183ac:	andsne	r1, r5, #2048	; 0x800
   183b0:	bne	1836c <__assert_fail@plt+0x6ebc>
   183b4:	cmp	r2, #0
   183b8:	bne	183c4 <__assert_fail@plt+0x6f14>
   183bc:	ands	r1, r5, #8192	; 0x2000
   183c0:	bne	1836c <__assert_fail@plt+0x6ebc>
   183c4:	cmp	ip, #0
   183c8:	bne	183dc <__assert_fail@plt+0x6f2c>
   183cc:	ands	r1, r5, #32768	; 0x8000
   183d0:	bne	1836c <__assert_fail@plt+0x6ebc>
   183d4:	b	183dc <__assert_fail@plt+0x6f2c>
   183d8:	mov	r8, #0
   183dc:	ldr	r5, [sp, #20]
   183e0:	mov	r1, #0
   183e4:	mov	r2, r4
   183e8:	mov	r0, r5
   183ec:	bl	113cc <memset@plt>
   183f0:	sub	r0, fp, #188	; 0xbc
   183f4:	ldr	r7, [sp, #24]
   183f8:	mov	r1, #0
   183fc:	mov	r6, sl
   18400:	stm	r0, {r5, r8, sl}
   18404:	ldr	r0, [sp, #36]	; 0x24
   18408:	str	r7, [fp, #-192]	; 0xffffff40
   1840c:	str	r1, [r0]
   18410:	str	r1, [r0, #4]
   18414:	str	r1, [r0, #8]
   18418:	add	r0, sp, #104	; 0x68
   1841c:	sub	r1, fp, #192	; 0xc0
   18420:	bl	24e90 <__assert_fail@plt+0x139e0>
   18424:	mov	sl, r0
   18428:	mov	r0, #0
   1842c:	bl	29220 <__assert_fail@plt+0x17d70>
   18430:	cmp	sl, #0
   18434:	bne	184a0 <__assert_fail@plt+0x6ff0>
   18438:	ldr	r0, [r7]
   1843c:	cmp	r0, #0
   18440:	beq	18234 <__assert_fail@plt+0x6d84>
   18444:	sub	r6, r9, #1
   18448:	b	17d84 <__assert_fail@plt+0x68d4>
   1844c:	ldr	r4, [sp, #80]	; 0x50
   18450:	ldr	r9, [sp, #76]	; 0x4c
   18454:	mov	r0, r7
   18458:	bl	29220 <__assert_fail@plt+0x17d70>
   1845c:	mov	r0, r5
   18460:	bl	29220 <__assert_fail@plt+0x17d70>
   18464:	ldr	r8, [sp, #60]	; 0x3c
   18468:	add	r0, sp, #104	; 0x68
   1846c:	bl	20f00 <__assert_fail@plt+0xfa50>
   18470:	ldr	r0, [fp, #-200]	; 0xffffff38
   18474:	mov	sl, #1
   18478:	add	r6, r0, r8
   1847c:	cmp	r6, r9
   18480:	str	r6, [fp, #-200]	; 0xffffff38
   18484:	blt	19594 <__assert_fail@plt+0x80e4>
   18488:	ldr	r7, [sp, #100]	; 0x64
   1848c:	ldr	r5, [sp, #92]	; 0x5c
   18490:	ldr	r2, [sp, #88]	; 0x58
   18494:	cmp	r4, r6
   18498:	bge	16eac <__assert_fail@plt+0x59fc>
   1849c:	b	19594 <__assert_fail@plt+0x80e4>
   184a0:	ldr	r4, [sp, #80]	; 0x50
   184a4:	ldr	r9, [sp, #76]	; 0x4c
   184a8:	str	r5, [sp, #12]
   184ac:	mov	r0, r7
   184b0:	bl	29220 <__assert_fail@plt+0x17d70>
   184b4:	ldr	r0, [sp, #12]
   184b8:	bl	29220 <__assert_fail@plt+0x17d70>
   184bc:	ldr	r8, [sp, #60]	; 0x3c
   184c0:	ldr	lr, [sp, #96]	; 0x60
   184c4:	cmp	sl, #0
   184c8:	beq	18540 <__assert_fail@plt+0x7090>
   184cc:	cmp	sl, #1
   184d0:	beq	18468 <__assert_fail@plt+0x6fb8>
   184d4:	b	19594 <__assert_fail@plt+0x80e4>
   184d8:	mov	lr, r5
   184dc:	b	17bf8 <__assert_fail@plt+0x6748>
   184e0:	mov	sl, #12
   184e4:	b	17b0c <__assert_fail@plt+0x665c>
   184e8:	ldr	r0, [sp, #192]	; 0xc0
   184ec:	and	r0, r0, #2
   184f0:	eor	r3, r0, #10
   184f4:	b	18100 <__assert_fail@plt+0x6c50>
   184f8:	mov	r0, r4
   184fc:	bl	113b4 <iswalnum@plt>
   18500:	mov	r3, #1
   18504:	cmp	r4, #95	; 0x5f
   18508:	beq	18100 <__assert_fail@plt+0x6c50>
   1850c:	cmp	r0, #0
   18510:	beq	180e4 <__assert_fail@plt+0x6c34>
   18514:	b	18100 <__assert_fail@plt+0x6c50>
   18518:	ldr	r0, [sp, #204]	; 0xcc
   1851c:	bl	29220 <__assert_fail@plt+0x17d70>
   18520:	mov	r0, #0
   18524:	str	r8, [sp, #200]	; 0xc8
   18528:	str	r7, [sp, #204]	; 0xcc
   1852c:	str	r6, [sp, #196]	; 0xc4
   18530:	bl	29220 <__assert_fail@plt+0x17d70>
   18534:	mov	r0, #0
   18538:	bl	29220 <__assert_fail@plt+0x17d70>
   1853c:	ldr	lr, [sp, #96]	; 0x60
   18540:	ldr	r4, [sp, #84]	; 0x54
   18544:	cmp	r4, #0
   18548:	beq	19590 <__assert_fail@plt+0x80e0>
   1854c:	ldr	r5, [sp, #32]
   18550:	ldr	r9, [fp, #16]
   18554:	cmp	r4, #1
   18558:	beq	18580 <__assert_fail@plt+0x70d0>
   1855c:	mvn	r0, r5
   18560:	mov	r1, #255	; 0xff
   18564:	mov	r6, lr
   18568:	add	r0, r0, r9
   1856c:	lsl	r2, r0, #3
   18570:	ldr	r0, [fp, #20]
   18574:	add	r0, r0, #8
   18578:	bl	113cc <memset@plt>
   1857c:	mov	lr, r6
   18580:	ldr	r2, [fp, #20]
   18584:	cmp	r4, #2
   18588:	mov	r0, #0
   1858c:	ldr	r1, [sp, #196]	; 0xc4
   18590:	stm	r2, {r0, r1}
   18594:	bcc	19460 <__assert_fail@plt+0x7fb0>
   18598:	ldr	r0, [sp, #52]	; 0x34
   1859c:	ldrb	r0, [r0, #28]
   185a0:	ands	r0, r0, #16
   185a4:	bne	19460 <__assert_fail@plt+0x7fb0>
   185a8:	ldrb	r1, [lr, #88]	; 0x58
   185ac:	mov	r0, #0
   185b0:	tst	r1, #1
   185b4:	mov	r1, #0
   185b8:	beq	185cc <__assert_fail@plt+0x711c>
   185bc:	ldr	r2, [lr, #76]	; 0x4c
   185c0:	mov	r1, #0
   185c4:	cmp	r2, #0
   185c8:	movwgt	r1, #1
   185cc:	ldr	r2, [sp, #52]	; 0x34
   185d0:	cmp	r1, #0
   185d4:	mov	r1, #0
   185d8:	ldr	r7, [r2]
   185dc:	movw	r2, #42496	; 0xa600
   185e0:	movt	r2, #2
   185e4:	vldr	d16, [r2]
   185e8:	ldr	r2, [r2, #8]
   185ec:	str	r2, [fp, #-40]	; 0xffffffd8
   185f0:	sub	r2, fp, #192	; 0xc0
   185f4:	add	r6, r2, #12
   185f8:	mov	r2, #16
   185fc:	vstr	d16, [fp, #-48]	; 0xffffffd0
   18600:	str	r6, [fp, #-184]	; 0xffffff48
   18604:	str	r2, [fp, #-188]	; 0xffffff44
   18608:	str	r0, [fp, #-192]	; 0xffffff40
   1860c:	beq	1862c <__assert_fail@plt+0x717c>
   18610:	mov	r0, #48	; 0x30
   18614:	bl	29054 <__assert_fail@plt+0x17ba4>
   18618:	cmp	r0, #0
   1861c:	str	r0, [fp, #-40]	; 0xffffffd8
   18620:	beq	1947c <__assert_fail@plt+0x7fcc>
   18624:	ldr	r0, [fp, #-192]	; 0xffffff40
   18628:	sub	r1, fp, #48	; 0x30
   1862c:	ldr	sl, [r7, #72]	; 0x48
   18630:	cmp	r0, r4
   18634:	str	r1, [sp, #88]	; 0x58
   18638:	str	r6, [sp, #72]	; 0x48
   1863c:	str	r7, [sp, #76]	; 0x4c
   18640:	bcs	1872c <__assert_fail@plt+0x727c>
   18644:	sub	r0, fp, #192	; 0xc0
   18648:	mov	r1, r4
   1864c:	mov	r2, r6
   18650:	mov	r3, #8
   18654:	bl	2915c <__assert_fail@plt+0x17cac>
   18658:	cmp	r0, #0
   1865c:	bne	18730 <__assert_fail@plt+0x7280>
   18660:	ldr	r0, [fp, #-184]	; 0xffffff48
   18664:	ldr	r1, [sp, #72]	; 0x48
   18668:	cmp	r0, r1
   1866c:	beq	18674 <__assert_fail@plt+0x71c4>
   18670:	bl	29220 <__assert_fail@plt+0x17d70>
   18674:	ldr	r0, [sp, #72]	; 0x48
   18678:	mov	sl, #12
   1867c:	str	r0, [fp, #-184]	; 0xffffff48
   18680:	mov	r0, #16
   18684:	str	r0, [fp, #-188]	; 0xffffff44
   18688:	mov	r0, #0
   1868c:	str	r0, [fp, #-192]	; 0xffffff40
   18690:	ldr	r0, [sp, #88]	; 0x58
   18694:	cmp	r0, #0
   18698:	beq	19594 <__assert_fail@plt+0x80e4>
   1869c:	ldr	r0, [sp, #88]	; 0x58
   186a0:	ldr	r1, [r0]
   186a4:	ldr	r0, [r0, #8]
   186a8:	cmp	r1, #1
   186ac:	blt	196b0 <__assert_fail@plt+0x8200>
   186b0:	ldr	r4, [sp, #88]	; 0x58
   186b4:	mov	r5, #0
   186b8:	mov	r6, #0
   186bc:	add	r0, r0, r5
   186c0:	ldr	r0, [r0, #20]
   186c4:	bl	29220 <__assert_fail@plt+0x17d70>
   186c8:	ldr	r0, [r4, #8]
   186cc:	add	r0, r0, r5
   186d0:	ldr	r0, [r0, #8]
   186d4:	bl	29220 <__assert_fail@plt+0x17d70>
   186d8:	ldr	r1, [r4]
   186dc:	ldr	r0, [r4, #8]
   186e0:	add	r6, r6, #1
   186e4:	add	r5, r5, #24
   186e8:	cmp	r6, r1
   186ec:	blt	186bc <__assert_fail@plt+0x720c>
   186f0:	b	196b0 <__assert_fail@plt+0x8200>
   186f4:	ldr	r1, [r3, #8]
   186f8:	cmp	r1, #0
   186fc:	beq	1870c <__assert_fail@plt+0x725c>
   18700:	ldrsb	r1, [r4, #28]
   18704:	cmp	r1, #0
   18708:	bmi	16b74 <__assert_fail@plt+0x56c4>
   1870c:	mov	r0, #0
   18710:	cmp	r6, #0
   18714:	str	r0, [sp, #72]	; 0x48
   18718:	beq	19474 <__assert_fail@plt+0x7fc4>
   1871c:	cmp	ip, #0
   18720:	mov	r6, #0
   18724:	bne	195e8 <__assert_fail@plt+0x8138>
   18728:	b	16b78 <__assert_fail@plt+0x56c8>
   1872c:	str	r4, [fp, #-192]	; 0xffffff40
   18730:	ldr	r6, [fp, #20]
   18734:	ldr	r0, [fp, #-184]	; 0xffffff48
   18738:	lsl	r2, r4, #3
   1873c:	str	r2, [sp, #64]	; 0x40
   18740:	mov	r1, r6
   18744:	str	r0, [sp, #68]	; 0x44
   18748:	bl	11258 <memcpy@plt>
   1874c:	ldr	r3, [r6]
   18750:	ldr	r0, [r6, #4]
   18754:	mov	r6, #0
   18758:	cmp	r3, r0
   1875c:	ble	18804 <__assert_fail@plt+0x7354>
   18760:	mov	r0, r6
   18764:	bl	29220 <__assert_fail@plt+0x17d70>
   18768:	ldr	r0, [fp, #-184]	; 0xffffff48
   1876c:	ldr	r6, [sp, #72]	; 0x48
   18770:	cmp	r0, r6
   18774:	beq	1877c <__assert_fail@plt+0x72cc>
   18778:	bl	29220 <__assert_fail@plt+0x17d70>
   1877c:	str	r6, [fp, #-184]	; 0xffffff48
   18780:	ldr	r6, [sp, #88]	; 0x58
   18784:	ldr	lr, [sp, #96]	; 0x60
   18788:	mov	r0, #16
   1878c:	str	r0, [fp, #-188]	; 0xffffff44
   18790:	mov	r0, #0
   18794:	str	r0, [fp, #-192]	; 0xffffff40
   18798:	cmp	r6, #0
   1879c:	beq	19460 <__assert_fail@plt+0x7fb0>
   187a0:	ldr	r1, [r6]
   187a4:	ldr	r0, [r6, #8]
   187a8:	mov	r7, lr
   187ac:	cmp	r1, #1
   187b0:	blt	187f0 <__assert_fail@plt+0x7340>
   187b4:	mov	r4, #0
   187b8:	mov	r5, #0
   187bc:	add	r0, r0, r4
   187c0:	ldr	r0, [r0, #20]
   187c4:	bl	29220 <__assert_fail@plt+0x17d70>
   187c8:	ldr	r0, [r6, #8]
   187cc:	add	r0, r0, r4
   187d0:	ldr	r0, [r0, #8]
   187d4:	bl	29220 <__assert_fail@plt+0x17d70>
   187d8:	ldr	r1, [r6]
   187dc:	ldr	r0, [r6, #8]
   187e0:	add	r5, r5, #1
   187e4:	add	r4, r4, #24
   187e8:	cmp	r5, r1
   187ec:	blt	187bc <__assert_fail@plt+0x730c>
   187f0:	bl	29220 <__assert_fail@plt+0x17d70>
   187f4:	ldr	r5, [sp, #32]
   187f8:	ldr	r4, [sp, #84]	; 0x54
   187fc:	mov	lr, r7
   18800:	b	19460 <__assert_fail@plt+0x7fb0>
   18804:	ldr	r0, [fp, #20]
   18808:	mov	r8, #1
   1880c:	mov	ip, #0
   18810:	mov	r6, #0
   18814:	mov	lr, #0
   18818:	add	r0, r0, #4
   1881c:	str	r0, [sp, #52]	; 0x34
   18820:	lsl	r0, r4, #4
   18824:	str	r0, [sp, #44]	; 0x2c
   18828:	mov	r0, #0
   1882c:	str	r0, [sp, #60]	; 0x3c
   18830:	ldr	r0, [sp, #76]	; 0x4c
   18834:	ldr	r0, [r0]
   18838:	add	r1, r0, sl, lsl #3
   1883c:	ldr	r7, [r1, #4]
   18840:	uxtb	r2, r7
   18844:	cmp	r2, #9
   18848:	beq	18878 <__assert_fail@plt+0x73c8>
   1884c:	cmp	r2, #8
   18850:	bne	18900 <__assert_fail@plt+0x7450>
   18854:	ldr	r0, [r0, sl, lsl #3]
   18858:	add	r0, r0, #1
   1885c:	cmp	r0, r4
   18860:	bge	18900 <__assert_fail@plt+0x7450>
   18864:	ldr	r1, [fp, #20]
   18868:	str	r3, [r1, r0, lsl #3]!
   1886c:	mvn	r0, #0
   18870:	str	r0, [r1, #4]
   18874:	b	18900 <__assert_fail@plt+0x7450>
   18878:	ldr	r0, [r0, sl, lsl #3]
   1887c:	add	r0, r0, #1
   18880:	cmp	r0, r4
   18884:	bge	18900 <__assert_fail@plt+0x7450>
   18888:	ldr	r1, [fp, #20]
   1888c:	ldr	r2, [r1, r0, lsl #3]
   18890:	cmp	r2, r3
   18894:	bge	188a8 <__assert_fail@plt+0x73f8>
   18898:	add	r0, r1, r0, lsl #3
   1889c:	str	r3, [r0, #4]
   188a0:	ldr	r0, [sp, #68]	; 0x44
   188a4:	b	188c8 <__assert_fail@plt+0x7418>
   188a8:	tst	r7, #524288	; 0x80000
   188ac:	beq	188f4 <__assert_fail@plt+0x7444>
   188b0:	ldr	r1, [sp, #68]	; 0x44
   188b4:	ldr	r1, [r1, r0, lsl #3]
   188b8:	cmn	r1, #1
   188bc:	beq	188f4 <__assert_fail@plt+0x7444>
   188c0:	ldr	r0, [fp, #20]
   188c4:	ldr	r1, [sp, #68]	; 0x44
   188c8:	ldr	r2, [sp, #64]	; 0x40
   188cc:	str	r6, [sp, #48]	; 0x30
   188d0:	mov	r7, r3
   188d4:	mov	r6, ip
   188d8:	str	lr, [sp, #56]	; 0x38
   188dc:	bl	11258 <memcpy@plt>
   188e0:	mov	ip, r6
   188e4:	ldr	lr, [sp, #56]	; 0x38
   188e8:	ldr	r6, [sp, #48]	; 0x30
   188ec:	mov	r3, r7
   188f0:	b	18900 <__assert_fail@plt+0x7450>
   188f4:	ldr	r1, [fp, #20]
   188f8:	add	r0, r1, r0, lsl #3
   188fc:	str	r3, [r0, #4]
   18900:	ldr	r0, [fp, #20]
   18904:	ldr	r0, [r0, #4]
   18908:	cmp	r3, r0
   1890c:	ldreq	r0, [sp, #200]	; 0xc8
   18910:	cmpeq	sl, r0
   18914:	beq	18980 <__assert_fail@plt+0x74d0>
   18918:	ldr	r0, [sp, #88]	; 0x58
   1891c:	cmp	r0, #0
   18920:	beq	18a50 <__assert_fail@plt+0x75a0>
   18924:	cmp	lr, #1
   18928:	blt	18a50 <__assert_fail@plt+0x75a0>
   1892c:	mov	r0, lr
   18930:	mov	lr, r6
   18934:	subs	r1, r0, #1
   18938:	str	r0, [sp, #56]	; 0x38
   1893c:	beq	18968 <__assert_fail@plt+0x74b8>
   18940:	mov	r0, #0
   18944:	add	r2, r0, r1
   18948:	lsr	r6, r2, #1
   1894c:	ldr	r7, [ip, r6, lsl #2]
   18950:	cmp	r7, sl
   18954:	addlt	r0, r8, r2, lsr #1
   18958:	movge	r1, r6
   1895c:	cmp	r0, r1
   18960:	bcc	18944 <__assert_fail@plt+0x7494>
   18964:	b	1896c <__assert_fail@plt+0x74bc>
   18968:	mov	r0, #0
   1896c:	ldr	r0, [ip, r0, lsl #2]
   18970:	mov	r6, lr
   18974:	ldr	lr, [sp, #56]	; 0x38
   18978:	cmp	r0, sl
   1897c:	bne	18a50 <__assert_fail@plt+0x75a0>
   18980:	ldr	r7, [sp, #88]	; 0x58
   18984:	cmp	r7, #0
   18988:	beq	193c4 <__assert_fail@plt+0x7f14>
   1898c:	ldr	r1, [sp, #52]	; 0x34
   18990:	mov	r0, r4
   18994:	b	189a4 <__assert_fail@plt+0x74f4>
   18998:	subs	r0, r0, #1
   1899c:	add	r1, r1, #8
   189a0:	beq	193c4 <__assert_fail@plt+0x7f14>
   189a4:	ldr	r2, [r1, #-4]
   189a8:	cmp	r2, #0
   189ac:	bmi	18998 <__assert_fail@plt+0x74e8>
   189b0:	ldr	r2, [r1]
   189b4:	cmn	r2, #1
   189b8:	bne	18998 <__assert_fail@plt+0x74e8>
   189bc:	ldr	r0, [r7]
   189c0:	cmp	r0, #0
   189c4:	beq	193c4 <__assert_fail@plt+0x7f14>
   189c8:	sub	r0, r0, #1
   189cc:	mov	sl, r4
   189d0:	mov	r9, r6
   189d4:	ldr	r6, [sp, #64]	; 0x40
   189d8:	str	r0, [r7]
   189dc:	add	r5, r0, r0, lsl #1
   189e0:	ldr	r4, [r7, #8]
   189e4:	mov	r2, r6
   189e8:	ldr	r0, [r4, r5, lsl #3]!
   189ec:	ldr	r1, [r4, #8]
   189f0:	str	r0, [sp, #80]	; 0x50
   189f4:	ldr	r0, [fp, #20]
   189f8:	bl	11258 <memcpy@plt>
   189fc:	ldr	r0, [r4, #8]
   18a00:	mov	r2, r6
   18a04:	add	r1, r0, sl, lsl #3
   18a08:	ldr	r0, [sp, #68]	; 0x44
   18a0c:	bl	11258 <memcpy@plt>
   18a10:	mov	r0, r9
   18a14:	bl	29220 <__assert_fail@plt+0x17d70>
   18a18:	ldr	r0, [r7, #8]
   18a1c:	add	r0, r0, r5, lsl #3
   18a20:	ldr	r0, [r0, #8]
   18a24:	bl	29220 <__assert_fail@plt+0x17d70>
   18a28:	ldr	r0, [r7, #8]
   18a2c:	ldr	r3, [sp, #80]	; 0x50
   18a30:	add	r0, r0, r5, lsl #3
   18a34:	ldr	r5, [sp, #32]
   18a38:	ldr	r6, [r0, #20]
   18a3c:	ldr	r1, [r0, #12]
   18a40:	ldr	sl, [r0, #4]
   18a44:	ldr	lr, [r0, #16]
   18a48:	mov	ip, r6
   18a4c:	str	r1, [sp, #60]	; 0x3c
   18a50:	ldr	r4, [sp, #188]	; 0xbc
   18a54:	str	r3, [sp, #80]	; 0x50
   18a58:	ldr	r0, [r4]
   18a5c:	add	r1, r0, sl, lsl #3
   18a60:	ldr	r1, [r1, #4]
   18a64:	tst	r1, #8
   18a68:	bne	18b00 <__assert_fail@plt+0x7650>
   18a6c:	tst	r1, #1048576	; 0x100000
   18a70:	bne	18b78 <__assert_fail@plt+0x76c8>
   18a74:	uxtb	r1, r1
   18a78:	cmp	r1, #4
   18a7c:	bne	18ba0 <__assert_fail@plt+0x76f0>
   18a80:	ldr	r0, [r0, sl, lsl #3]
   18a84:	ldr	r1, [sp, #84]	; 0x54
   18a88:	mov	r7, #0
   18a8c:	add	r0, r0, #1
   18a90:	cmp	r0, r1
   18a94:	bge	18aa8 <__assert_fail@plt+0x75f8>
   18a98:	ldr	r1, [fp, #20]
   18a9c:	ldr	r2, [r1, r0, lsl #3]!
   18aa0:	ldr	r1, [r1, #4]
   18aa4:	sub	r7, r1, r2
   18aa8:	ldr	r1, [sp, #88]	; 0x58
   18aac:	cmp	r1, #0
   18ab0:	beq	18e88 <__assert_fail@plt+0x79d8>
   18ab4:	ldr	r1, [sp, #84]	; 0x54
   18ab8:	cmp	r0, r1
   18abc:	bge	18af8 <__assert_fail@plt+0x7648>
   18ac0:	ldr	r2, [fp, #20]
   18ac4:	ldr	r1, [r2, r0, lsl #3]
   18ac8:	cmn	r1, #1
   18acc:	beq	18af8 <__assert_fail@plt+0x7648>
   18ad0:	add	r0, r2, r0, lsl #3
   18ad4:	ldr	r0, [r0, #4]
   18ad8:	cmn	r0, #1
   18adc:	beq	18af8 <__assert_fail@plt+0x7648>
   18ae0:	cmp	r7, #0
   18ae4:	beq	18eac <__assert_fail@plt+0x79fc>
   18ae8:	ldr	r0, [sp, #132]	; 0x84
   18aec:	sub	r0, r0, r3
   18af0:	cmp	r0, r7
   18af4:	bge	1910c <__assert_fail@plt+0x7c5c>
   18af8:	ldr	r7, [sp, #88]	; 0x58
   18afc:	b	18d84 <__assert_fail@plt+0x78d4>
   18b00:	ldr	r0, [sp, #204]	; 0xcc
   18b04:	ldr	r4, [r4, #20]
   18b08:	cmp	lr, #1
   18b0c:	ldr	r0, [r0, r3, lsl #2]
   18b10:	str	r0, [sp, #100]	; 0x64
   18b14:	blt	18b58 <__assert_fail@plt+0x76a8>
   18b18:	mov	r0, #0
   18b1c:	subs	r1, lr, #1
   18b20:	beq	18b44 <__assert_fail@plt+0x7694>
   18b24:	add	r2, r0, r1
   18b28:	lsr	r3, r2, #1
   18b2c:	ldr	r7, [ip, r3, lsl #2]
   18b30:	cmp	r7, sl
   18b34:	addlt	r0, r8, r2, lsr #1
   18b38:	movge	r1, r3
   18b3c:	cmp	r0, r1
   18b40:	bcc	18b24 <__assert_fail@plt+0x7674>
   18b44:	ldr	r0, [ip, r0, lsl #2]
   18b48:	cmp	r0, sl
   18b4c:	bne	18b58 <__assert_fail@plt+0x76a8>
   18b50:	str	lr, [sp, #56]	; 0x38
   18b54:	b	18c98 <__assert_fail@plt+0x77e8>
   18b58:	ldr	r0, [sp, #60]	; 0x3c
   18b5c:	cmp	r0, #0
   18b60:	beq	18c6c <__assert_fail@plt+0x77bc>
   18b64:	cmp	lr, #0
   18b68:	bne	19164 <__assert_fail@plt+0x7cb4>
   18b6c:	mov	r0, #1
   18b70:	str	sl, [ip]
   18b74:	b	18c94 <__assert_fail@plt+0x77e4>
   18b78:	mov	r0, r4
   18b7c:	mov	r1, sl
   18b80:	add	r2, sp, #104	; 0x68
   18b84:	mov	r9, ip
   18b88:	bl	237e8 <__assert_fail@plt+0x12338>
   18b8c:	ldr	r3, [sp, #80]	; 0x50
   18b90:	mov	r1, r0
   18b94:	cmp	r1, #0
   18b98:	mov	ip, r9
   18b9c:	bne	18bd4 <__assert_fail@plt+0x7724>
   18ba0:	ldr	r0, [r4]
   18ba4:	mov	r2, r3
   18ba8:	mov	r7, r6
   18bac:	mov	r6, ip
   18bb0:	add	r1, r0, sl, lsl #3
   18bb4:	add	r0, sp, #104	; 0x68
   18bb8:	bl	23b4c <__assert_fail@plt+0x1269c>
   18bbc:	ldr	r3, [sp, #80]	; 0x50
   18bc0:	mov	ip, r6
   18bc4:	mov	r6, r7
   18bc8:	mov	r1, #1
   18bcc:	cmp	r0, #0
   18bd0:	beq	18d78 <__assert_fail@plt+0x78c8>
   18bd4:	ldr	r0, [r4, #12]
   18bd8:	ldr	r7, [sp, #88]	; 0x58
   18bdc:	add	r3, r1, r3
   18be0:	ldr	sl, [r0, sl, lsl #2]
   18be4:	cmp	r7, #0
   18be8:	beq	18e20 <__assert_fail@plt+0x7970>
   18bec:	ldr	r0, [sp, #196]	; 0xc4
   18bf0:	cmp	r3, r0
   18bf4:	bgt	18d84 <__assert_fail@plt+0x78d4>
   18bf8:	ldr	r0, [sp, #204]	; 0xcc
   18bfc:	ldr	r0, [r0, r3, lsl #2]
   18c00:	cmp	r0, #0
   18c04:	beq	18d84 <__assert_fail@plt+0x78d4>
   18c08:	ldr	r1, [r0, #8]
   18c0c:	cmp	r1, #1
   18c10:	blt	18d84 <__assert_fail@plt+0x78d4>
   18c14:	ldr	r0, [r0, #12]
   18c18:	mov	lr, ip
   18c1c:	mov	ip, r6
   18c20:	subs	r1, r1, #1
   18c24:	mov	r2, #0
   18c28:	beq	18c50 <__assert_fail@plt+0x77a0>
   18c2c:	mov	r2, #0
   18c30:	add	r4, r2, r1
   18c34:	lsr	r7, r4, #1
   18c38:	ldr	r6, [r0, r7, lsl #2]
   18c3c:	cmp	r6, sl
   18c40:	addlt	r2, r8, r4, lsr #1
   18c44:	movge	r1, r7
   18c48:	cmp	r2, r1
   18c4c:	bcc	18c30 <__assert_fail@plt+0x7780>
   18c50:	ldr	r0, [r0, r2, lsl #2]
   18c54:	mov	r6, ip
   18c58:	mov	ip, lr
   18c5c:	mov	lr, #0
   18c60:	cmp	r0, sl
   18c64:	beq	19028 <__assert_fail@plt+0x7b78>
   18c68:	b	18d78 <__assert_fail@plt+0x78c8>
   18c6c:	mov	r0, #4
   18c70:	bl	29054 <__assert_fail@plt+0x17ba4>
   18c74:	cmp	r0, #0
   18c78:	beq	19758 <__assert_fail@plt+0x82a8>
   18c7c:	mov	r6, r0
   18c80:	str	sl, [r0]
   18c84:	mov	r0, #1
   18c88:	str	r0, [sp, #60]	; 0x3c
   18c8c:	mov	r0, #1
   18c90:	mov	ip, r6
   18c94:	str	r0, [sp, #56]	; 0x38
   18c98:	add	r0, sl, sl, lsl #1
   18c9c:	add	r1, r4, r0, lsl #2
   18ca0:	ldr	lr, [r1, #4]
   18ca4:	cmp	lr, #1
   18ca8:	blt	18d78 <__assert_fail@plt+0x78c8>
   18cac:	ldr	r0, [sp, #100]	; 0x64
   18cb0:	str	ip, [sp, #40]	; 0x28
   18cb4:	ldr	ip, [r1, #8]
   18cb8:	str	r6, [sp, #48]	; 0x30
   18cbc:	mov	r6, #0
   18cc0:	ldr	r2, [r0, #8]
   18cc4:	mvn	r0, #0
   18cc8:	str	r0, [sp, #92]	; 0x5c
   18ccc:	sub	sl, r2, #1
   18cd0:	cmp	r2, #1
   18cd4:	bge	18cf4 <__assert_fail@plt+0x7844>
   18cd8:	b	18ce0 <__assert_fail@plt+0x7830>
   18cdc:	ldr	r5, [sp, #32]
   18ce0:	add	r6, r6, #1
   18ce4:	cmp	r6, lr
   18ce8:	beq	18d54 <__assert_fail@plt+0x78a4>
   18cec:	cmp	r2, #1
   18cf0:	blt	18ce0 <__assert_fail@plt+0x7830>
   18cf4:	ldr	r0, [sp, #100]	; 0x64
   18cf8:	ldr	r4, [ip, r6, lsl #2]
   18cfc:	mov	r5, #0
   18d00:	cmp	sl, #0
   18d04:	ldr	r7, [r0, #12]
   18d08:	beq	18d30 <__assert_fail@plt+0x7880>
   18d0c:	mov	r3, sl
   18d10:	add	r0, r5, r3
   18d14:	lsr	r1, r0, #1
   18d18:	ldr	r9, [r7, r1, lsl #2]
   18d1c:	cmp	r9, r4
   18d20:	addlt	r5, r8, r0, lsr #1
   18d24:	movge	r3, r1
   18d28:	cmp	r5, r3
   18d2c:	bcc	18d10 <__assert_fail@plt+0x7860>
   18d30:	ldr	r0, [r7, r5, lsl #2]
   18d34:	cmp	r0, r4
   18d38:	bne	18cdc <__assert_fail@plt+0x782c>
   18d3c:	ldr	r0, [sp, #92]	; 0x5c
   18d40:	ldr	r5, [sp, #32]
   18d44:	cmn	r0, #1
   18d48:	bne	18e30 <__assert_fail@plt+0x7980>
   18d4c:	str	r4, [sp, #92]	; 0x5c
   18d50:	b	18ce0 <__assert_fail@plt+0x7830>
   18d54:	ldr	r6, [sp, #48]	; 0x30
   18d58:	ldr	r3, [sp, #80]	; 0x50
   18d5c:	ldr	ip, [sp, #40]	; 0x28
   18d60:	ldr	lr, [sp, #56]	; 0x38
   18d64:	ldr	sl, [sp, #92]	; 0x5c
   18d68:	cmn	sl, #1
   18d6c:	bgt	19030 <__assert_fail@plt+0x7b80>
   18d70:	cmn	sl, #2
   18d74:	beq	196bc <__assert_fail@plt+0x820c>
   18d78:	ldr	r7, [sp, #88]	; 0x58
   18d7c:	cmp	r7, #0
   18d80:	beq	1961c <__assert_fail@plt+0x816c>
   18d84:	ldr	r0, [r7]
   18d88:	cmp	r0, #0
   18d8c:	beq	195f4 <__assert_fail@plt+0x8144>
   18d90:	sub	r0, r0, #1
   18d94:	mov	sl, r6
   18d98:	ldr	r6, [sp, #64]	; 0x40
   18d9c:	ldr	r9, [fp, #20]
   18da0:	str	r0, [r7]
   18da4:	add	r5, r0, r0, lsl #1
   18da8:	ldr	r4, [r7, #8]
   18dac:	mov	r2, r6
   18db0:	ldr	r0, [r4, r5, lsl #3]!
   18db4:	ldr	r1, [r4, #8]
   18db8:	str	r0, [sp, #80]	; 0x50
   18dbc:	mov	r0, r9
   18dc0:	bl	11258 <memcpy@plt>
   18dc4:	ldr	r0, [r4, #8]
   18dc8:	ldr	r4, [sp, #84]	; 0x54
   18dcc:	mov	r2, r6
   18dd0:	add	r1, r0, r4, lsl #3
   18dd4:	ldr	r0, [sp, #68]	; 0x44
   18dd8:	bl	11258 <memcpy@plt>
   18ddc:	mov	r0, sl
   18de0:	bl	29220 <__assert_fail@plt+0x17d70>
   18de4:	ldr	r0, [r7, #8]
   18de8:	add	r0, r0, r5, lsl #3
   18dec:	ldr	r0, [r0, #8]
   18df0:	bl	29220 <__assert_fail@plt+0x17d70>
   18df4:	ldr	r0, [r7, #8]
   18df8:	ldr	r3, [sp, #80]	; 0x50
   18dfc:	add	r0, r0, r5, lsl #3
   18e00:	ldr	r5, [sp, #32]
   18e04:	ldr	r6, [r0, #20]
   18e08:	ldr	r1, [r0, #12]
   18e0c:	ldr	sl, [r0, #4]
   18e10:	ldr	lr, [r0, #16]
   18e14:	mov	ip, r6
   18e18:	str	r1, [sp, #60]	; 0x3c
   18e1c:	b	19038 <__assert_fail@plt+0x7b88>
   18e20:	mov	lr, #0
   18e24:	cmn	sl, #1
   18e28:	bgt	19030 <__assert_fail@plt+0x7b80>
   18e2c:	b	18d70 <__assert_fail@plt+0x78c0>
   18e30:	ldr	lr, [sp, #56]	; 0x38
   18e34:	ldr	sl, [sp, #88]	; 0x58
   18e38:	ldr	r6, [sp, #48]	; 0x30
   18e3c:	ldr	r3, [sp, #80]	; 0x50
   18e40:	ldr	ip, [sp, #40]	; 0x28
   18e44:	cmp	lr, #1
   18e48:	blt	18ef4 <__assert_fail@plt+0x7a44>
   18e4c:	mov	r0, lr
   18e50:	mov	r9, lr
   18e54:	mov	r0, #0
   18e58:	subs	r1, lr, #1
   18e5c:	beq	18ecc <__assert_fail@plt+0x7a1c>
   18e60:	ldr	lr, [sp, #92]	; 0x5c
   18e64:	add	r2, r0, r1
   18e68:	lsr	r6, r2, #1
   18e6c:	ldr	r7, [ip, r6, lsl #2]
   18e70:	cmp	r7, lr
   18e74:	addlt	r0, r8, r2, lsr #1
   18e78:	movge	r1, r6
   18e7c:	cmp	r0, r1
   18e80:	bcc	18e64 <__assert_fail@plt+0x79b4>
   18e84:	b	18ed0 <__assert_fail@plt+0x7a20>
   18e88:	cmp	r7, #0
   18e8c:	beq	18eac <__assert_fail@plt+0x79fc>
   18e90:	ldr	r0, [r4, #12]
   18e94:	add	r3, r7, r3
   18e98:	mov	lr, #0
   18e9c:	ldr	sl, [r0, sl, lsl #2]
   18ea0:	cmn	sl, #1
   18ea4:	bgt	19030 <__assert_fail@plt+0x7b80>
   18ea8:	b	18d70 <__assert_fail@plt+0x78c0>
   18eac:	ldr	r0, [sp, #60]	; 0x3c
   18eb0:	cmp	r0, #0
   18eb4:	beq	1904c <__assert_fail@plt+0x7b9c>
   18eb8:	cmp	lr, #0
   18ebc:	bne	19290 <__assert_fail@plt+0x7de0>
   18ec0:	str	sl, [ip]
   18ec4:	mov	r2, #1
   18ec8:	b	19078 <__assert_fail@plt+0x7bc8>
   18ecc:	ldr	lr, [sp, #92]	; 0x5c
   18ed0:	ldr	r0, [ip, r0, lsl #2]
   18ed4:	ldr	r6, [sp, #48]	; 0x30
   18ed8:	cmp	r0, lr
   18edc:	mov	lr, r9
   18ee0:	bne	18ef4 <__assert_fail@plt+0x7a44>
   18ee4:	mov	sl, r4
   18ee8:	cmn	sl, #1
   18eec:	bgt	19030 <__assert_fail@plt+0x7b80>
   18ef0:	b	18d70 <__assert_fail@plt+0x78c0>
   18ef4:	cmp	sl, #0
   18ef8:	beq	18d64 <__assert_fail@plt+0x78b4>
   18efc:	ldr	r6, [sl]
   18f00:	ldr	r0, [sl, #4]
   18f04:	add	r1, r6, #1
   18f08:	cmp	r1, r0
   18f0c:	str	r1, [sl]
   18f10:	bne	18f44 <__assert_fail@plt+0x7a94>
   18f14:	ldr	r0, [sl, #8]
   18f18:	add	r1, r1, r1, lsl #1
   18f1c:	lsl	r1, r1, #4
   18f20:	bl	29084 <__assert_fail@plt+0x17bd4>
   18f24:	cmp	r0, #0
   18f28:	beq	196b8 <__assert_fail@plt+0x8208>
   18f2c:	str	r0, [sl, #8]
   18f30:	ldr	r3, [sp, #80]	; 0x50
   18f34:	ldr	r1, [sl, #4]
   18f38:	lsl	r1, r1, #1
   18f3c:	str	r1, [sl, #4]
   18f40:	b	18f48 <__assert_fail@plt+0x7a98>
   18f44:	ldr	r0, [sl, #8]
   18f48:	add	r6, r6, r6, lsl #1
   18f4c:	str	r3, [r0, r6, lsl #3]!
   18f50:	str	r4, [r0, #4]
   18f54:	ldr	r0, [sp, #44]	; 0x2c
   18f58:	bl	29054 <__assert_fail@plt+0x17ba4>
   18f5c:	ldr	r1, [sl, #8]
   18f60:	cmp	r0, #0
   18f64:	add	r4, r1, r6, lsl #3
   18f68:	str	r0, [r4, #8]!
   18f6c:	beq	196b8 <__assert_fail@plt+0x8208>
   18f70:	ldr	r5, [sp, #64]	; 0x40
   18f74:	ldr	r1, [fp, #20]
   18f78:	mov	r2, r5
   18f7c:	bl	11258 <memcpy@plt>
   18f80:	ldr	r0, [r4]
   18f84:	ldr	r1, [sp, #84]	; 0x54
   18f88:	mov	r2, r5
   18f8c:	add	r0, r0, r1, lsl #3
   18f90:	ldr	r1, [sp, #68]	; 0x44
   18f94:	bl	11258 <memcpy@plt>
   18f98:	ldr	r0, [sl, #8]
   18f9c:	ldr	lr, [sp, #56]	; 0x38
   18fa0:	add	r7, r0, r6, lsl #3
   18fa4:	cmp	lr, #1
   18fa8:	mov	r6, r7
   18fac:	str	lr, [r6, #16]!
   18fb0:	sub	r5, r6, #4
   18fb4:	blt	19004 <__assert_fail@plt+0x7b54>
   18fb8:	lsl	r4, lr, #2
   18fbc:	str	lr, [r5]
   18fc0:	mov	r0, r4
   18fc4:	bl	29054 <__assert_fail@plt+0x17ba4>
   18fc8:	ldr	sl, [sp, #92]	; 0x5c
   18fcc:	cmp	r0, #0
   18fd0:	str	r0, [r7, #20]
   18fd4:	beq	19760 <__assert_fail@plt+0x82b0>
   18fd8:	ldr	r6, [sp, #48]	; 0x30
   18fdc:	mov	r2, r4
   18fe0:	mov	r1, r6
   18fe4:	bl	11258 <memcpy@plt>
   18fe8:	ldr	r5, [sp, #32]
   18fec:	ldr	r3, [sp, #80]	; 0x50
   18ff0:	ldr	ip, [sp, #40]	; 0x28
   18ff4:	ldr	lr, [sp, #56]	; 0x38
   18ff8:	cmn	sl, #1
   18ffc:	bgt	19030 <__assert_fail@plt+0x7b80>
   19000:	b	18d70 <__assert_fail@plt+0x78c0>
   19004:	mov	r0, #0
   19008:	ldr	r6, [sp, #48]	; 0x30
   1900c:	ldr	r3, [sp, #80]	; 0x50
   19010:	ldr	ip, [sp, #40]	; 0x28
   19014:	ldr	sl, [sp, #92]	; 0x5c
   19018:	str	r0, [r5]
   1901c:	str	r0, [r5, #4]
   19020:	str	r0, [r5, #8]
   19024:	ldr	r5, [sp, #32]
   19028:	cmn	sl, #1
   1902c:	ble	18d70 <__assert_fail@plt+0x78c0>
   19030:	ldr	r4, [sp, #84]	; 0x54
   19034:	ldr	r9, [fp, #20]
   19038:	ldr	r0, [r9, #4]
   1903c:	ldr	r9, [fp, #16]
   19040:	cmp	r3, r0
   19044:	ble	18830 <__assert_fail@plt+0x7380>
   19048:	b	18760 <__assert_fail@plt+0x72b0>
   1904c:	mov	r0, #4
   19050:	bl	29054 <__assert_fail@plt+0x17ba4>
   19054:	cmp	r0, #0
   19058:	beq	19758 <__assert_fail@plt+0x82a8>
   1905c:	ldr	r3, [sp, #80]	; 0x50
   19060:	mov	r6, r0
   19064:	str	sl, [r0]
   19068:	mov	r0, #1
   1906c:	mov	r2, #1
   19070:	str	r0, [sp, #60]	; 0x3c
   19074:	mov	ip, r6
   19078:	ldr	r0, [sp, #204]	; 0xcc
   1907c:	ldr	r0, [r0, r3, lsl #2]
   19080:	ldr	r1, [r0, #8]
   19084:	cmp	r1, #1
   19088:	blt	18ba0 <__assert_fail@plt+0x76f0>
   1908c:	str	r2, [sp, #56]	; 0x38
   19090:	ldr	r2, [r4, #20]
   19094:	str	r7, [sp, #100]	; 0x64
   19098:	add	r7, sl, sl, lsl #1
   1909c:	ldr	lr, [r0, #12]
   190a0:	mov	r9, ip
   190a4:	str	r6, [sp, #48]	; 0x30
   190a8:	add	r2, r2, r7, lsl #2
   190ac:	ldr	r2, [r2, #8]
   190b0:	ldr	r2, [r2]
   190b4:	str	r2, [sp, #92]	; 0x5c
   190b8:	subs	r2, r1, #1
   190bc:	mov	r1, #0
   190c0:	beq	190ec <__assert_fail@plt+0x7c3c>
   190c4:	ldr	ip, [sp, #92]	; 0x5c
   190c8:	add	r0, r1, r2
   190cc:	lsr	r7, r0, #1
   190d0:	ldr	r6, [lr, r7, lsl #2]
   190d4:	cmp	r6, ip
   190d8:	addlt	r1, r8, r0, lsr #1
   190dc:	movge	r2, r7
   190e0:	cmp	r1, r2
   190e4:	bcc	190c8 <__assert_fail@plt+0x7c18>
   190e8:	b	190f0 <__assert_fail@plt+0x7c40>
   190ec:	ldr	ip, [sp, #92]	; 0x5c
   190f0:	ldr	r0, [lr, r1, lsl #2]
   190f4:	ldr	r6, [sp, #48]	; 0x30
   190f8:	ldr	r1, [sp, #100]	; 0x64
   190fc:	cmp	r0, ip
   19100:	bne	18b94 <__assert_fail@plt+0x76e4>
   19104:	mov	ip, r9
   19108:	b	18d60 <__assert_fail@plt+0x78b0>
   1910c:	ldr	r2, [sp, #108]	; 0x6c
   19110:	str	r6, [sp, #48]	; 0x30
   19114:	mov	r6, ip
   19118:	mov	r9, r3
   1911c:	add	r0, r2, r1
   19120:	add	r1, r2, r3
   19124:	mov	r2, r7
   19128:	bl	11384 <bcmp@plt>
   1912c:	cmp	r0, #0
   19130:	beq	19144 <__assert_fail@plt+0x7c94>
   19134:	mov	ip, r6
   19138:	ldr	r7, [sp, #88]	; 0x58
   1913c:	ldr	r6, [sp, #48]	; 0x30
   19140:	b	18d84 <__assert_fail@plt+0x78d4>
   19144:	ldr	r0, [r4, #12]
   19148:	add	r9, r7, r9
   1914c:	mov	ip, r6
   19150:	ldr	r7, [sp, #88]	; 0x58
   19154:	ldr	r6, [sp, #48]	; 0x30
   19158:	mov	r3, r9
   1915c:	ldr	sl, [r0, sl, lsl #2]
   19160:	b	18bec <__assert_fail@plt+0x773c>
   19164:	ldr	r1, [sp, #60]	; 0x3c
   19168:	mov	r9, ip
   1916c:	mov	r0, r6
   19170:	str	lr, [sp, #56]	; 0x38
   19174:	cmp	r1, lr
   19178:	bne	191ac <__assert_fail@plt+0x7cfc>
   1917c:	ldr	r1, [sp, #60]	; 0x3c
   19180:	lsl	r1, r1, #3
   19184:	bl	29084 <__assert_fail@plt+0x17bd4>
   19188:	cmp	r0, #0
   1918c:	mov	ip, r9
   19190:	beq	196bc <__assert_fail@plt+0x820c>
   19194:	mov	r1, r0
   19198:	ldr	r0, [sp, #60]	; 0x3c
   1919c:	mov	r9, r1
   191a0:	lsl	r0, r0, #1
   191a4:	str	r0, [sp, #60]	; 0x3c
   191a8:	mov	r0, r1
   191ac:	ldr	r1, [r9]
   191b0:	cmp	r1, sl
   191b4:	ble	19238 <__assert_fail@plt+0x7d88>
   191b8:	ldr	ip, [sp, #56]	; 0x38
   191bc:	cmp	ip, #1
   191c0:	blt	19270 <__assert_fail@plt+0x7dc0>
   191c4:	ldr	r5, [sp, #56]	; 0x38
   191c8:	ands	r1, r5, #3
   191cc:	sub	r2, r5, #1
   191d0:	beq	191f8 <__assert_fail@plt+0x7d48>
   191d4:	ldr	r5, [sp, #56]	; 0x38
   191d8:	add	r7, r9, r5, lsl #2
   191dc:	mov	r3, r7
   191e0:	ldr	r6, [r3, #-4]!
   191e4:	subs	r1, r1, #1
   191e8:	sub	r5, r5, #1
   191ec:	str	r6, [r7]
   191f0:	mov	r7, r3
   191f4:	bne	191e0 <__assert_fail@plt+0x7d30>
   191f8:	mov	ip, #0
   191fc:	cmp	r2, #3
   19200:	bcc	19270 <__assert_fail@plt+0x7dc0>
   19204:	add	r2, r9, r5, lsl #2
   19208:	sub	r2, r2, #8
   1920c:	ldr	r6, [r2]
   19210:	ldr	r1, [r2, #4]
   19214:	ldmdb	r2, {r3, r7}
   19218:	sub	r5, r5, #4
   1921c:	cmp	r5, #0
   19220:	stmda	r2, {r3, r7}
   19224:	str	r6, [r2, #4]
   19228:	str	r1, [r2, #8]
   1922c:	sub	r2, r2, #16
   19230:	bgt	1920c <__assert_fail@plt+0x7d5c>
   19234:	b	19270 <__assert_fail@plt+0x7dc0>
   19238:	ldr	ip, [sp, #56]	; 0x38
   1923c:	add	r3, r9, ip, lsl #2
   19240:	ldr	r2, [r3, #-4]
   19244:	cmp	r2, sl
   19248:	ble	19270 <__assert_fail@plt+0x7dc0>
   1924c:	ldr	r1, [sp, #56]	; 0x38
   19250:	sub	r1, r1, #2
   19254:	str	r2, [r3]
   19258:	sub	r1, r1, #1
   1925c:	ldr	r2, [r3, #-8]
   19260:	sub	r3, r3, #4
   19264:	cmp	r2, sl
   19268:	bgt	19254 <__assert_fail@plt+0x7da4>
   1926c:	add	ip, r1, #2
   19270:	ldr	r1, [sp, #56]	; 0x38
   19274:	ldr	r5, [sp, #32]
   19278:	str	sl, [r9, ip, lsl #2]
   1927c:	mov	ip, r9
   19280:	mov	r6, r0
   19284:	add	r1, r1, #1
   19288:	str	r1, [sp, #56]	; 0x38
   1928c:	b	18c98 <__assert_fail@plt+0x77e8>
   19290:	ldr	r1, [sp, #60]	; 0x3c
   19294:	mov	r9, ip
   19298:	mov	r0, r6
   1929c:	str	r7, [sp, #100]	; 0x64
   192a0:	str	lr, [sp, #56]	; 0x38
   192a4:	cmp	r1, lr
   192a8:	bne	192dc <__assert_fail@plt+0x7e2c>
   192ac:	ldr	r1, [sp, #60]	; 0x3c
   192b0:	lsl	r1, r1, #3
   192b4:	bl	29084 <__assert_fail@plt+0x17bd4>
   192b8:	cmp	r0, #0
   192bc:	mov	ip, r9
   192c0:	beq	196bc <__assert_fail@plt+0x820c>
   192c4:	mov	r1, r0
   192c8:	ldr	r0, [sp, #60]	; 0x3c
   192cc:	mov	r9, r1
   192d0:	lsl	r0, r0, #1
   192d4:	str	r0, [sp, #60]	; 0x3c
   192d8:	mov	r0, r1
   192dc:	ldr	r1, [r9]
   192e0:	cmp	r1, sl
   192e4:	ble	19368 <__assert_fail@plt+0x7eb8>
   192e8:	ldr	ip, [sp, #56]	; 0x38
   192ec:	cmp	ip, #1
   192f0:	blt	193a0 <__assert_fail@plt+0x7ef0>
   192f4:	ldr	r5, [sp, #56]	; 0x38
   192f8:	ands	r1, r5, #3
   192fc:	sub	r2, r5, #1
   19300:	beq	19328 <__assert_fail@plt+0x7e78>
   19304:	ldr	r5, [sp, #56]	; 0x38
   19308:	add	r7, r9, r5, lsl #2
   1930c:	mov	r3, r7
   19310:	ldr	r6, [r3, #-4]!
   19314:	subs	r1, r1, #1
   19318:	sub	r5, r5, #1
   1931c:	str	r6, [r7]
   19320:	mov	r7, r3
   19324:	bne	19310 <__assert_fail@plt+0x7e60>
   19328:	mov	ip, #0
   1932c:	cmp	r2, #3
   19330:	bcc	193a0 <__assert_fail@plt+0x7ef0>
   19334:	add	r2, r9, r5, lsl #2
   19338:	sub	r2, r2, #8
   1933c:	ldr	r6, [r2]
   19340:	ldr	r1, [r2, #4]
   19344:	ldmdb	r2, {r3, r7}
   19348:	sub	r5, r5, #4
   1934c:	cmp	r5, #0
   19350:	stmda	r2, {r3, r7}
   19354:	str	r6, [r2, #4]
   19358:	str	r1, [r2, #8]
   1935c:	sub	r2, r2, #16
   19360:	bgt	1933c <__assert_fail@plt+0x7e8c>
   19364:	b	193a0 <__assert_fail@plt+0x7ef0>
   19368:	ldr	ip, [sp, #56]	; 0x38
   1936c:	add	r3, r9, ip, lsl #2
   19370:	ldr	r2, [r3, #-4]
   19374:	cmp	r2, sl
   19378:	ble	193a0 <__assert_fail@plt+0x7ef0>
   1937c:	ldr	r1, [sp, #56]	; 0x38
   19380:	sub	r1, r1, #2
   19384:	str	r2, [r3]
   19388:	sub	r1, r1, #1
   1938c:	ldr	r2, [r3, #-8]
   19390:	sub	r3, r3, #4
   19394:	cmp	r2, sl
   19398:	bgt	19384 <__assert_fail@plt+0x7ed4>
   1939c:	add	ip, r1, #2
   193a0:	ldr	r2, [sp, #56]	; 0x38
   193a4:	ldr	r5, [sp, #32]
   193a8:	ldr	r3, [sp, #80]	; 0x50
   193ac:	ldr	r7, [sp, #100]	; 0x64
   193b0:	str	sl, [r9, ip, lsl #2]
   193b4:	mov	ip, r9
   193b8:	mov	r6, r0
   193bc:	add	r2, r2, #1
   193c0:	b	19078 <__assert_fail@plt+0x7bc8>
   193c4:	mov	r0, r6
   193c8:	bl	29220 <__assert_fail@plt+0x17d70>
   193cc:	ldr	r0, [fp, #-184]	; 0xffffff48
   193d0:	ldr	r6, [sp, #72]	; 0x48
   193d4:	cmp	r0, r6
   193d8:	beq	193e0 <__assert_fail@plt+0x7f30>
   193dc:	bl	29220 <__assert_fail@plt+0x17d70>
   193e0:	ldr	lr, [sp, #96]	; 0x60
   193e4:	mov	r0, #16
   193e8:	str	r6, [fp, #-184]	; 0xffffff48
   193ec:	cmp	r7, #0
   193f0:	str	r0, [fp, #-188]	; 0xffffff44
   193f4:	mov	r0, #0
   193f8:	str	r0, [fp, #-192]	; 0xffffff40
   193fc:	beq	19460 <__assert_fail@plt+0x7fb0>
   19400:	ldr	r1, [r7]
   19404:	ldr	r0, [r7, #8]
   19408:	mov	r6, lr
   1940c:	cmp	r1, #1
   19410:	blt	19450 <__assert_fail@plt+0x7fa0>
   19414:	mov	r4, #0
   19418:	mov	r5, #0
   1941c:	add	r0, r0, r4
   19420:	ldr	r0, [r0, #20]
   19424:	bl	29220 <__assert_fail@plt+0x17d70>
   19428:	ldr	r0, [r7, #8]
   1942c:	add	r0, r0, r4
   19430:	ldr	r0, [r0, #8]
   19434:	bl	29220 <__assert_fail@plt+0x17d70>
   19438:	ldr	r1, [r7]
   1943c:	ldr	r0, [r7, #8]
   19440:	add	r5, r5, #1
   19444:	add	r4, r4, #24
   19448:	cmp	r5, r1
   1944c:	blt	1941c <__assert_fail@plt+0x7f6c>
   19450:	bl	29220 <__assert_fail@plt+0x17d70>
   19454:	ldr	r5, [sp, #32]
   19458:	ldr	r4, [sp, #84]	; 0x54
   1945c:	mov	lr, r6
   19460:	ldr	r0, [fp, #20]
   19464:	ldrb	r1, [sp, #180]	; 0xb4
   19468:	mov	r2, r9
   1946c:	add	r0, r0, #4
   19470:	b	194dc <__assert_fail@plt+0x802c>
   19474:	mov	r6, #0
   19478:	b	16b78 <__assert_fail@plt+0x56c8>
   1947c:	mov	sl, #12
   19480:	b	19594 <__assert_fail@plt+0x80e4>
   19484:	ldr	r7, [sp, #132]	; 0x84
   19488:	ldr	r6, [sp, #28]
   1948c:	ldr	ip, [sp, #116]	; 0x74
   19490:	cmp	r3, r7
   19494:	mov	r5, r6
   19498:	addne	r5, ip, r3, lsl #2
   1949c:	ldr	r3, [r5]
   194a0:	str	r3, [r0, #-4]
   194a4:	ldr	r5, [r0]
   194a8:	cmp	r5, r7
   194ac:	addne	r6, ip, r5, lsl #2
   194b0:	ldr	r5, [sp, #32]
   194b4:	ldr	r7, [r6]
   194b8:	str	r7, [r0]
   194bc:	ldr	r6, [fp, #-200]	; 0xffffff38
   194c0:	add	r3, r3, r6
   194c4:	add	r7, r7, r6
   194c8:	stmda	r0, {r3, r7}
   194cc:	sub	r2, r2, #1
   194d0:	add	r0, r0, #8
   194d4:	cmp	r5, r2
   194d8:	beq	194f8 <__assert_fail@plt+0x8048>
   194dc:	ldr	r3, [r0, #-4]
   194e0:	cmn	r3, #1
   194e4:	beq	194cc <__assert_fail@plt+0x801c>
   194e8:	cmp	r1, #0
   194ec:	bne	19484 <__assert_fail@plt+0x7fd4>
   194f0:	ldr	r7, [r0]
   194f4:	b	194bc <__assert_fail@plt+0x800c>
   194f8:	cmp	r5, #1
   194fc:	blt	1951c <__assert_fail@plt+0x806c>
   19500:	ldr	r0, [fp, #20]
   19504:	lsl	r2, r5, #3
   19508:	mov	r1, #255	; 0xff
   1950c:	add	r0, r0, r4, lsl #3
   19510:	mov	r4, lr
   19514:	bl	113cc <memset@plt>
   19518:	mov	lr, r4
   1951c:	ldr	r0, [lr, #132]	; 0x84
   19520:	mov	sl, #0
   19524:	cmp	r0, #0
   19528:	beq	19594 <__assert_fail@plt+0x80e4>
   1952c:	ldr	r1, [sp, #84]	; 0x54
   19530:	cmp	r1, #2
   19534:	bcc	19594 <__assert_fail@plt+0x80e4>
   19538:	ldr	r1, [sp, #32]
   1953c:	ldr	r2, [fp, #16]
   19540:	ldr	r6, [fp, #20]
   19544:	mvn	r1, r1
   19548:	add	r1, r1, r2
   1954c:	mov	r2, #0
   19550:	b	19560 <__assert_fail@plt+0x80b0>
   19554:	add	r2, r2, #1
   19558:	cmp	r1, r2
   1955c:	beq	19590 <__assert_fail@plt+0x80e0>
   19560:	ldr	r3, [r0, r2, lsl #2]
   19564:	cmp	r2, r3
   19568:	beq	19554 <__assert_fail@plt+0x80a4>
   1956c:	add	r3, r6, r3, lsl #3
   19570:	add	r7, r6, r2, lsl #3
   19574:	ldr	r3, [r3, #8]
   19578:	str	r3, [r7, #8]
   1957c:	ldr	r3, [r0, r2, lsl #2]
   19580:	add	r3, r6, r3, lsl #3
   19584:	ldr	r3, [r3, #12]
   19588:	str	r3, [r7, #12]
   1958c:	b	19554 <__assert_fail@plt+0x80a4>
   19590:	mov	sl, #0
   19594:	ldr	r0, [sp, #204]	; 0xcc
   19598:	bl	29220 <__assert_fail@plt+0x17d70>
   1959c:	ldr	r0, [sp, #96]	; 0x60
   195a0:	ldr	r0, [r0, #76]	; 0x4c
   195a4:	cmp	r0, #0
   195a8:	beq	195c4 <__assert_fail@plt+0x8114>
   195ac:	add	r0, sp, #104	; 0x68
   195b0:	bl	20f00 <__assert_fail@plt+0xfa50>
   195b4:	ldr	r0, [sp, #236]	; 0xec
   195b8:	bl	29220 <__assert_fail@plt+0x17d70>
   195bc:	ldr	r0, [sp, #220]	; 0xdc
   195c0:	bl	29220 <__assert_fail@plt+0x17d70>
   195c4:	ldr	r0, [sp, #112]	; 0x70
   195c8:	bl	29220 <__assert_fail@plt+0x17d70>
   195cc:	ldr	r0, [sp, #116]	; 0x74
   195d0:	bl	29220 <__assert_fail@plt+0x17d70>
   195d4:	ldrb	r0, [sp, #179]	; 0xb3
   195d8:	cmp	r0, #0
   195dc:	beq	195e8 <__assert_fail@plt+0x8138>
   195e0:	ldr	r0, [sp, #108]	; 0x6c
   195e4:	bl	29220 <__assert_fail@plt+0x17d70>
   195e8:	mov	r0, sl
   195ec:	sub	sp, fp, #28
   195f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195f4:	mov	r5, #0
   195f8:	b	19620 <__assert_fail@plt+0x8170>
   195fc:	mov	sl, r0
   19600:	b	19594 <__assert_fail@plt+0x80e4>
   19604:	mov	r0, r7
   19608:	bl	29220 <__assert_fail@plt+0x17d70>
   1960c:	mov	r0, #0
   19610:	bl	29220 <__assert_fail@plt+0x17d70>
   19614:	mov	sl, #12
   19618:	b	19594 <__assert_fail@plt+0x80e4>
   1961c:	mov	r5, #1
   19620:	mov	r0, ip
   19624:	bl	29220 <__assert_fail@plt+0x17d70>
   19628:	ldr	r0, [fp, #-184]	; 0xffffff48
   1962c:	ldr	r4, [sp, #72]	; 0x48
   19630:	cmp	r0, r4
   19634:	beq	1963c <__assert_fail@plt+0x818c>
   19638:	bl	29220 <__assert_fail@plt+0x17d70>
   1963c:	mov	r0, #16
   19640:	str	r4, [fp, #-184]	; 0xffffff48
   19644:	mov	sl, #1
   19648:	cmp	r5, #0
   1964c:	str	r0, [fp, #-188]	; 0xffffff44
   19650:	mov	r0, #0
   19654:	str	r0, [fp, #-192]	; 0xffffff40
   19658:	bne	19594 <__assert_fail@plt+0x80e4>
   1965c:	ldr	r0, [sp, #88]	; 0x58
   19660:	ldr	r1, [r0]
   19664:	ldr	r0, [r0, #8]
   19668:	cmp	r1, #1
   1966c:	blt	196b0 <__assert_fail@plt+0x8200>
   19670:	ldr	r4, [sp, #88]	; 0x58
   19674:	mov	r5, #0
   19678:	mov	r6, #0
   1967c:	add	r0, r0, r5
   19680:	ldr	r0, [r0, #20]
   19684:	bl	29220 <__assert_fail@plt+0x17d70>
   19688:	ldr	r0, [r4, #8]
   1968c:	add	r0, r0, r5
   19690:	ldr	r0, [r0, #8]
   19694:	bl	29220 <__assert_fail@plt+0x17d70>
   19698:	ldr	r1, [r4]
   1969c:	ldr	r0, [r4, #8]
   196a0:	add	r6, r6, #1
   196a4:	add	r5, r5, #24
   196a8:	cmp	r6, r1
   196ac:	blt	1967c <__assert_fail@plt+0x81cc>
   196b0:	bl	29220 <__assert_fail@plt+0x17d70>
   196b4:	b	19594 <__assert_fail@plt+0x80e4>
   196b8:	ldr	ip, [sp, #40]	; 0x28
   196bc:	mov	r0, ip
   196c0:	bl	29220 <__assert_fail@plt+0x17d70>
   196c4:	ldr	r0, [fp, #-184]	; 0xffffff48
   196c8:	ldr	r4, [sp, #72]	; 0x48
   196cc:	cmp	r0, r4
   196d0:	beq	196d8 <__assert_fail@plt+0x8228>
   196d4:	bl	29220 <__assert_fail@plt+0x17d70>
   196d8:	mov	r0, #16
   196dc:	str	r4, [fp, #-184]	; 0xffffff48
   196e0:	mov	sl, #12
   196e4:	str	r0, [fp, #-188]	; 0xffffff44
   196e8:	mov	r0, #0
   196ec:	str	r0, [fp, #-192]	; 0xffffff40
   196f0:	ldr	r0, [sp, #88]	; 0x58
   196f4:	cmp	r0, #0
   196f8:	beq	19594 <__assert_fail@plt+0x80e4>
   196fc:	ldr	r1, [r0]
   19700:	ldr	r0, [r0, #8]
   19704:	cmp	r1, #1
   19708:	blt	196b0 <__assert_fail@plt+0x8200>
   1970c:	ldr	r4, [sp, #88]	; 0x58
   19710:	mov	r5, #0
   19714:	mov	r6, #0
   19718:	add	r0, r0, r5
   1971c:	ldr	r0, [r0, #20]
   19720:	bl	29220 <__assert_fail@plt+0x17d70>
   19724:	ldr	r0, [r4, #8]
   19728:	add	r0, r0, r5
   1972c:	ldr	r0, [r0, #8]
   19730:	bl	29220 <__assert_fail@plt+0x17d70>
   19734:	ldr	r1, [r4]
   19738:	ldr	r0, [r4, #8]
   1973c:	add	r6, r6, #1
   19740:	add	r5, r5, #24
   19744:	cmp	r6, r1
   19748:	blt	19718 <__assert_fail@plt+0x8268>
   1974c:	b	196b0 <__assert_fail@plt+0x8200>
   19750:	mov	sl, #1
   19754:	b	19594 <__assert_fail@plt+0x80e4>
   19758:	mov	ip, #0
   1975c:	b	196bc <__assert_fail@plt+0x820c>
   19760:	ldr	ip, [sp, #40]	; 0x28
   19764:	mov	r0, #0
   19768:	str	r0, [r6]
   1976c:	str	r0, [r5]
   19770:	b	196bc <__assert_fail@plt+0x820c>
   19774:	push	{fp, lr}
   19778:	mov	fp, sp
   1977c:	sub	sp, sp, #16
   19780:	mov	ip, #1
   19784:	str	r2, [sp, #4]
   19788:	str	ip, [sp, #12]
   1978c:	mov	ip, #0
   19790:	str	ip, [sp]
   19794:	ldr	ip, [fp, #8]
   19798:	str	ip, [sp, #8]
   1979c:	bl	197a8 <__assert_fail@plt+0x82f8>
   197a0:	mov	sp, fp
   197a4:	pop	{fp, pc}
   197a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197ac:	add	fp, sp, #28
   197b0:	sub	sp, sp, #60	; 0x3c
   197b4:	mvn	r4, #0
   197b8:	cmp	r3, #0
   197bc:	bmi	19944 <__assert_fail@plt+0x8494>
   197c0:	mov	r5, r3
   197c4:	mov	r8, r2
   197c8:	cmp	r3, r2
   197cc:	bgt	19944 <__assert_fail@plt+0x8494>
   197d0:	mov	r6, r0
   197d4:	ldr	r0, [fp, #8]
   197d8:	mov	sl, r1
   197dc:	movw	r1, #0
   197e0:	mov	r9, r8
   197e4:	ldr	r7, [r6]
   197e8:	movt	r1, #0
   197ec:	add	r0, r0, r5
   197f0:	cmp	r0, r8
   197f4:	bicle	r9, r0, r0, asr #31
   197f8:	movw	r0, #0
   197fc:	movt	r0, #0
   19800:	orrs	r4, r1, r0
   19804:	beq	19810 <__assert_fail@plt+0x8360>
   19808:	add	r0, r7, #136	; 0x88
   1980c:	bl	11240 <pthread_mutex_lock@plt>
   19810:	ldrb	r0, [r6, #28]
   19814:	ldr	r3, [fp, #16]
   19818:	str	r6, [fp, #-32]	; 0xffffffe0
   1981c:	cmp	r9, r5
   19820:	ubfx	r1, r0, #5, #2
   19824:	str	r7, [fp, #-36]	; 0xffffffdc
   19828:	str	r4, [fp, #-40]	; 0xffffffd8
   1982c:	str	sl, [sp, #44]	; 0x2c
   19830:	str	r1, [sp, #40]	; 0x28
   19834:	ble	19868 <__assert_fail@plt+0x83b8>
   19838:	tst	r0, #8
   1983c:	bne	19868 <__assert_fail@plt+0x83b8>
   19840:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19844:	ldr	r1, [r1, #16]
   19848:	cmp	r1, #0
   1984c:	beq	19868 <__assert_fail@plt+0x83b8>
   19850:	ldr	r4, [fp, #-32]	; 0xffffffe0
   19854:	mov	r6, r3
   19858:	mov	r0, r4
   1985c:	bl	16140 <__assert_fail@plt+0x4c90>
   19860:	ldrb	r0, [r4, #28]
   19864:	mov	r3, r6
   19868:	mov	sl, #1
   1986c:	mov	r2, #0
   19870:	cmp	r3, #0
   19874:	beq	198c4 <__assert_fail@plt+0x8414>
   19878:	ands	r1, r0, #16
   1987c:	bne	198c4 <__assert_fail@plt+0x8414>
   19880:	and	r0, r0, #6
   19884:	cmp	r0, #4
   19888:	bne	198b4 <__assert_fail@plt+0x8404>
   1988c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19890:	ldr	sl, [r3]
   19894:	ldr	r0, [r0, #24]
   19898:	cmp	sl, r0
   1989c:	bhi	198bc <__assert_fail@plt+0x840c>
   198a0:	cmp	sl, #1
   198a4:	bge	198c0 <__assert_fail@plt+0x8410>
   198a8:	mov	sl, #1
   198ac:	mov	r2, #0
   198b0:	b	198c4 <__assert_fail@plt+0x8414>
   198b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   198b8:	ldr	r0, [r0, #24]
   198bc:	add	sl, r0, #1
   198c0:	mov	r2, r3
   198c4:	lsl	r0, sl, #3
   198c8:	str	r2, [sp, #36]	; 0x24
   198cc:	bl	29054 <__assert_fail@plt+0x17ba4>
   198d0:	cmp	r0, #0
   198d4:	beq	19c64 <__assert_fail@plt+0x87b4>
   198d8:	mov	r6, r0
   198dc:	ldr	r0, [fp, #12]
   198e0:	str	r9, [sp]
   198e4:	ldr	r9, [fp, #-32]	; 0xffffffe0
   198e8:	ldr	r1, [sp, #44]	; 0x2c
   198ec:	mov	r2, r8
   198f0:	mov	r3, r5
   198f4:	stmib	sp, {r0, sl}
   198f8:	ldr	r0, [sp, #40]	; 0x28
   198fc:	str	r6, [sp, #12]
   19900:	str	r0, [sp, #16]
   19904:	mov	r0, r9
   19908:	bl	16a9c <__assert_fail@plt+0x55ec>
   1990c:	cmp	r0, #0
   19910:	mov	r8, r6
   19914:	beq	19950 <__assert_fail@plt+0x84a0>
   19918:	cmp	r0, #1
   1991c:	mvn	r4, #1
   19920:	mvneq	r4, #0
   19924:	ldr	r6, [fp, #-40]	; 0xffffffd8
   19928:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1992c:	mov	r0, r8
   19930:	bl	29220 <__assert_fail@plt+0x17d70>
   19934:	cmp	r6, #0
   19938:	beq	19944 <__assert_fail@plt+0x8494>
   1993c:	add	r0, r5, #136	; 0x88
   19940:	bl	111a4 <pthread_mutex_unlock@plt>
   19944:	mov	r0, r4
   19948:	sub	sp, fp, #28
   1994c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19950:	ldr	lr, [sp, #36]	; 0x24
   19954:	str	r5, [sp, #44]	; 0x2c
   19958:	cmp	lr, #0
   1995c:	beq	19c38 <__assert_fail@plt+0x8788>
   19960:	ldrb	r0, [r9, #28]
   19964:	add	r7, sl, #1
   19968:	ubfx	r0, r0, #1, #2
   1996c:	cmp	r0, #1
   19970:	beq	199d0 <__assert_fail@plt+0x8520>
   19974:	cmp	r0, #0
   19978:	bne	199fc <__assert_fail@plt+0x854c>
   1997c:	mov	r4, r8
   19980:	lsl	r8, r7, #2
   19984:	mov	r5, lr
   19988:	mov	r0, r8
   1998c:	bl	29054 <__assert_fail@plt+0x17ba4>
   19990:	mov	r6, #0
   19994:	cmp	r0, #0
   19998:	str	r0, [r5, #4]
   1999c:	beq	19c7c <__assert_fail@plt+0x87cc>
   199a0:	mov	r0, r8
   199a4:	bl	29054 <__assert_fail@plt+0x17ba4>
   199a8:	cmp	r0, #0
   199ac:	mov	lr, r5
   199b0:	str	r0, [r5, #8]
   199b4:	beq	19ce8 <__assert_fail@plt+0x8838>
   199b8:	str	r7, [lr]
   199bc:	mov	r6, #1
   199c0:	mov	r8, r4
   199c4:	cmp	sl, #1
   199c8:	bge	19a0c <__assert_fail@plt+0x855c>
   199cc:	b	199ec <__assert_fail@plt+0x853c>
   199d0:	ldr	r0, [lr]
   199d4:	mov	r6, #1
   199d8:	cmp	r7, r0
   199dc:	bhi	19c84 <__assert_fail@plt+0x87d4>
   199e0:	mov	r7, r0
   199e4:	cmp	sl, #1
   199e8:	bge	19a0c <__assert_fail@plt+0x855c>
   199ec:	mov	sl, #0
   199f0:	cmp	sl, r7
   199f4:	bcc	19c00 <__assert_fail@plt+0x8750>
   199f8:	b	19c20 <__assert_fail@plt+0x8770>
   199fc:	ldr	r7, [lr]
   19a00:	mov	r6, #2
   19a04:	cmp	sl, #1
   19a08:	blt	199ec <__assert_fail@plt+0x853c>
   19a0c:	ldr	r5, [lr, #4]
   19a10:	ldr	r4, [lr, #8]
   19a14:	mov	r2, #0
   19a18:	cmp	sl, #3
   19a1c:	str	r6, [sp, #40]	; 0x28
   19a20:	bhi	19ab0 <__assert_fail@plt+0x8600>
   19a24:	tst	sl, #1
   19a28:	mov	r3, r2
   19a2c:	beq	19a48 <__assert_fail@plt+0x8598>
   19a30:	mov	r0, r8
   19a34:	orr	r3, r2, #1
   19a38:	ldr	r1, [r0, r2, lsl #3]!
   19a3c:	str	r1, [r5, r2, lsl #2]
   19a40:	ldr	r0, [r0, #4]
   19a44:	str	r0, [r4, r2, lsl #2]
   19a48:	orr	r0, r2, #1
   19a4c:	cmp	sl, r0
   19a50:	beq	19bf0 <__assert_fail@plt+0x8740>
   19a54:	add	r2, r3, #1
   19a58:	add	ip, r8, r3, lsl #3
   19a5c:	sub	r0, sl, r3
   19a60:	mov	r6, #0
   19a64:	add	r1, r5, r2, lsl #2
   19a68:	add	r2, r4, r2, lsl #2
   19a6c:	add	r7, ip, #12
   19a70:	ldr	r4, [r7, #-12]
   19a74:	add	r5, r1, r6
   19a78:	subs	r0, r0, #2
   19a7c:	str	r4, [r5, #-4]
   19a80:	add	r4, ip, r6, lsl #1
   19a84:	add	r5, r2, r6
   19a88:	ldr	r3, [r4, #4]
   19a8c:	str	r3, [r5, #-4]
   19a90:	ldr	r3, [r4, #8]
   19a94:	str	r3, [r1, r6]
   19a98:	ldr	r3, [r7]
   19a9c:	add	r7, r7, #16
   19aa0:	str	r3, [r2, r6]
   19aa4:	add	r6, r6, #8
   19aa8:	bne	19a70 <__assert_fail@plt+0x85c0>
   19aac:	b	19bf0 <__assert_fail@plt+0x8740>
   19ab0:	add	lr, r4, sl, lsl #2
   19ab4:	add	r7, r8, sl, lsl #3
   19ab8:	add	r6, r5, sl, lsl #2
   19abc:	mov	r9, #0
   19ac0:	mov	r1, #0
   19ac4:	mov	r3, #0
   19ac8:	mov	r0, #0
   19acc:	mov	r2, #0
   19ad0:	cmp	r8, lr
   19ad4:	movwcc	r9, #1
   19ad8:	cmp	r7, r4
   19adc:	movwhi	r1, #1
   19ae0:	cmp	r8, r6
   19ae4:	movwcc	r3, #1
   19ae8:	cmp	r7, r5
   19aec:	mov	r7, #0
   19af0:	movwhi	r7, #1
   19af4:	cmp	r4, r6
   19af8:	mov	r6, #0
   19afc:	movwcc	r6, #1
   19b00:	cmp	r5, lr
   19b04:	movwcc	r0, #1
   19b08:	tst	r0, r6
   19b0c:	andseq	r0, r7, r3
   19b10:	bne	19b9c <__assert_fail@plt+0x86ec>
   19b14:	ands	r0, r1, r9
   19b18:	ldr	r9, [fp, #-32]	; 0xffffffe0
   19b1c:	ldr	lr, [sp, #36]	; 0x24
   19b20:	bne	19a24 <__assert_fail@plt+0x8574>
   19b24:	bic	r0, sl, #3
   19b28:	mov	r1, #1
   19b2c:	str	r4, [sp, #32]
   19b30:	str	r0, [sp, #28]
   19b34:	subs	r0, r0, #4
   19b38:	add	r0, r1, r0, lsr #2
   19b3c:	and	r1, r0, #1
   19b40:	str	r1, [sp, #24]
   19b44:	beq	19ba8 <__assert_fail@plt+0x86f8>
   19b48:	sub	r6, r0, r1
   19b4c:	mov	r1, r4
   19b50:	mov	r3, #0
   19b54:	mov	r7, #64	; 0x40
   19b58:	mov	r0, #32
   19b5c:	mov	lr, r5
   19b60:	mov	r4, r8
   19b64:	mov	r9, r8
   19b68:	add	ip, r9, #32
   19b6c:	vld2.32	{d16-d19}, [r9], r7
   19b70:	add	r8, lr, #16
   19b74:	add	r2, r1, #16
   19b78:	subs	r6, r6, #2
   19b7c:	add	r3, r3, #8
   19b80:	vst1.32	{d16-d17}, [lr], r0
   19b84:	vst1.32	{d18-d19}, [r1], r0
   19b88:	vld2.32	{d16-d19}, [ip]
   19b8c:	vst1.32	{d16-d17}, [r8]
   19b90:	vst1.32	{d18-d19}, [r2]
   19b94:	bne	19b68 <__assert_fail@plt+0x86b8>
   19b98:	b	19bb0 <__assert_fail@plt+0x8700>
   19b9c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   19ba0:	ldr	lr, [sp, #36]	; 0x24
   19ba4:	b	19a24 <__assert_fail@plt+0x8574>
   19ba8:	mov	r4, r8
   19bac:	mov	r3, #0
   19bb0:	ldr	r0, [sp, #24]
   19bb4:	mov	r8, r4
   19bb8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   19bbc:	ldr	lr, [sp, #36]	; 0x24
   19bc0:	ldr	r4, [sp, #32]
   19bc4:	cmp	r0, #0
   19bc8:	beq	19be4 <__assert_fail@plt+0x8734>
   19bcc:	add	r0, r8, r3, lsl #3
   19bd0:	vld2.32	{d16-d19}, [r0]
   19bd4:	add	r0, r5, r3, lsl #2
   19bd8:	vst1.32	{d16-d17}, [r0]
   19bdc:	add	r0, r4, r3, lsl #2
   19be0:	vst1.32	{d18-d19}, [r0]
   19be4:	ldr	r2, [sp, #28]
   19be8:	cmp	sl, r2
   19bec:	bne	19a24 <__assert_fail@plt+0x8574>
   19bf0:	ldr	r7, [lr]
   19bf4:	ldr	r6, [sp, #40]	; 0x28
   19bf8:	cmp	sl, r7
   19bfc:	bcs	19c20 <__assert_fail@plt+0x8770>
   19c00:	ldmib	lr, {r0, r1}
   19c04:	mvn	r2, #0
   19c08:	str	r2, [r1, sl, lsl #2]
   19c0c:	str	r2, [r0, sl, lsl #2]
   19c10:	add	sl, sl, #1
   19c14:	ldr	r3, [lr]
   19c18:	cmp	sl, r3
   19c1c:	bcc	19c08 <__assert_fail@plt+0x8758>
   19c20:	ldrb	r0, [r9, #28]
   19c24:	cmp	r6, #0
   19c28:	and	r0, r0, #249	; 0xf9
   19c2c:	orr	r0, r0, r6, lsl #1
   19c30:	strb	r0, [r9, #28]
   19c34:	beq	19c5c <__assert_fail@plt+0x87ac>
   19c38:	ldr	r0, [fp, #20]
   19c3c:	cmp	r0, #0
   19c40:	beq	19c54 <__assert_fail@plt+0x87a4>
   19c44:	ldr	r0, [r8, #4]
   19c48:	ldr	r1, [sp, #44]	; 0x2c
   19c4c:	sub	r4, r0, r1
   19c50:	b	19924 <__assert_fail@plt+0x8474>
   19c54:	ldr	r4, [r8]
   19c58:	b	19924 <__assert_fail@plt+0x8474>
   19c5c:	mvn	r4, #1
   19c60:	b	19924 <__assert_fail@plt+0x8474>
   19c64:	ldr	r6, [fp, #-40]	; 0xffffffd8
   19c68:	ldr	r5, [fp, #-36]	; 0xffffffdc
   19c6c:	mvn	r4, #1
   19c70:	cmp	r6, #0
   19c74:	bne	1993c <__assert_fail@plt+0x848c>
   19c78:	b	19944 <__assert_fail@plt+0x8494>
   19c7c:	mov	r8, r4
   19c80:	b	19c20 <__assert_fail@plt+0x8770>
   19c84:	ldr	r0, [lr, #4]
   19c88:	mov	r4, r8
   19c8c:	lsl	r8, r7, #2
   19c90:	mov	r1, r8
   19c94:	bl	29084 <__assert_fail@plt+0x17bd4>
   19c98:	mov	r6, #0
   19c9c:	cmp	r0, #0
   19ca0:	beq	19d00 <__assert_fail@plt+0x8850>
   19ca4:	mov	r5, r0
   19ca8:	ldr	r0, [sp, #36]	; 0x24
   19cac:	mov	r1, r8
   19cb0:	ldr	r0, [r0, #8]
   19cb4:	bl	29084 <__assert_fail@plt+0x17bd4>
   19cb8:	cmp	r0, #0
   19cbc:	beq	19cf8 <__assert_fail@plt+0x8848>
   19cc0:	ldr	lr, [sp, #36]	; 0x24
   19cc4:	ldr	r9, [fp, #-32]	; 0xffffffe0
   19cc8:	mov	r8, r4
   19ccc:	mov	r6, #1
   19cd0:	str	r7, [lr]
   19cd4:	str	r5, [lr, #4]
   19cd8:	str	r0, [lr, #8]
   19cdc:	cmp	sl, #1
   19ce0:	bge	19a0c <__assert_fail@plt+0x855c>
   19ce4:	b	199ec <__assert_fail@plt+0x853c>
   19ce8:	ldr	r0, [lr, #4]
   19cec:	bl	29220 <__assert_fail@plt+0x17d70>
   19cf0:	mov	r8, r4
   19cf4:	b	19c20 <__assert_fail@plt+0x8770>
   19cf8:	mov	r0, r5
   19cfc:	bl	29220 <__assert_fail@plt+0x17d70>
   19d00:	ldr	r9, [fp, #-32]	; 0xffffffe0
   19d04:	mov	r8, r4
   19d08:	b	19c20 <__assert_fail@plt+0x8770>
   19d0c:	push	{fp, lr}
   19d10:	mov	fp, sp
   19d14:	sub	sp, sp, #16
   19d18:	mov	ip, #0
   19d1c:	str	r2, [sp, #4]
   19d20:	str	ip, [sp, #12]
   19d24:	ldr	ip, [fp, #12]
   19d28:	str	ip, [sp, #8]
   19d2c:	ldr	ip, [fp, #8]
   19d30:	str	ip, [sp]
   19d34:	bl	197a8 <__assert_fail@plt+0x82f8>
   19d38:	mov	sp, fp
   19d3c:	pop	{fp, pc}
   19d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d44:	add	fp, sp, #28
   19d48:	sub	sp, sp, #20
   19d4c:	ldr	r4, [fp, #8]
   19d50:	mov	r8, r1
   19d54:	mov	r1, r0
   19d58:	mov	r6, r2
   19d5c:	orr	r0, r4, r2
   19d60:	ldr	r2, [fp, #20]
   19d64:	orrs	r0, r0, r2
   19d68:	bmi	19e28 <__assert_fail@plt+0x8978>
   19d6c:	adds	sl, r6, r4
   19d70:	bvs	19e28 <__assert_fail@plt+0x8978>
   19d74:	mov	r5, #0
   19d78:	cmp	r4, #1
   19d7c:	blt	19dd4 <__assert_fail@plt+0x8924>
   19d80:	mov	r9, r3
   19d84:	cmp	r6, #1
   19d88:	blt	19ddc <__assert_fail@plt+0x892c>
   19d8c:	mov	r0, sl
   19d90:	mov	r5, r1
   19d94:	bl	29054 <__assert_fail@plt+0x17ba4>
   19d98:	cmp	r0, #0
   19d9c:	beq	19e28 <__assert_fail@plt+0x8978>
   19da0:	mov	r1, r8
   19da4:	mov	r2, r6
   19da8:	mov	r7, r0
   19dac:	bl	11258 <memcpy@plt>
   19db0:	add	r0, r7, r6
   19db4:	mov	r1, r9
   19db8:	mov	r2, r4
   19dbc:	bl	11258 <memcpy@plt>
   19dc0:	ldr	r2, [fp, #20]
   19dc4:	mov	r1, r5
   19dc8:	mov	r4, r7
   19dcc:	mov	r5, #0
   19dd0:	b	19de4 <__assert_fail@plt+0x8934>
   19dd4:	mov	r7, r8
   19dd8:	b	19de0 <__assert_fail@plt+0x8930>
   19ddc:	mov	r7, r9
   19de0:	mov	r4, #0
   19de4:	ldr	r0, [fp, #16]
   19de8:	ldr	r3, [fp, #12]
   19dec:	mov	r6, #1
   19df0:	str	r2, [sp, #4]
   19df4:	mov	r2, sl
   19df8:	str	r5, [sp]
   19dfc:	str	r6, [sp, #12]
   19e00:	str	r0, [sp, #8]
   19e04:	mov	r0, r1
   19e08:	mov	r1, r7
   19e0c:	bl	197a8 <__assert_fail@plt+0x82f8>
   19e10:	mov	r5, r0
   19e14:	mov	r0, r4
   19e18:	bl	29220 <__assert_fail@plt+0x17d70>
   19e1c:	mov	r0, r5
   19e20:	sub	sp, fp, #28
   19e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e28:	mvn	r0, #1
   19e2c:	sub	sp, fp, #28
   19e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e38:	add	fp, sp, #28
   19e3c:	sub	sp, sp, #20
   19e40:	ldr	r4, [fp, #8]
   19e44:	mov	r8, r1
   19e48:	mov	r1, r0
   19e4c:	mov	r6, r2
   19e50:	orr	r0, r4, r2
   19e54:	ldr	r2, [fp, #24]
   19e58:	orrs	r0, r0, r2
   19e5c:	bmi	19f1c <__assert_fail@plt+0x8a6c>
   19e60:	adds	sl, r6, r4
   19e64:	bvs	19f1c <__assert_fail@plt+0x8a6c>
   19e68:	mov	r5, #0
   19e6c:	cmp	r4, #1
   19e70:	blt	19ec8 <__assert_fail@plt+0x8a18>
   19e74:	mov	r9, r3
   19e78:	cmp	r6, #1
   19e7c:	blt	19ed0 <__assert_fail@plt+0x8a20>
   19e80:	mov	r0, sl
   19e84:	mov	r5, r1
   19e88:	bl	29054 <__assert_fail@plt+0x17ba4>
   19e8c:	cmp	r0, #0
   19e90:	beq	19f1c <__assert_fail@plt+0x8a6c>
   19e94:	mov	r1, r8
   19e98:	mov	r2, r6
   19e9c:	mov	r7, r0
   19ea0:	bl	11258 <memcpy@plt>
   19ea4:	add	r0, r7, r6
   19ea8:	mov	r1, r9
   19eac:	mov	r2, r4
   19eb0:	bl	11258 <memcpy@plt>
   19eb4:	ldr	r2, [fp, #24]
   19eb8:	mov	r1, r5
   19ebc:	mov	r4, r7
   19ec0:	mov	r5, #0
   19ec4:	b	19ed8 <__assert_fail@plt+0x8a28>
   19ec8:	mov	r7, r8
   19ecc:	b	19ed4 <__assert_fail@plt+0x8a24>
   19ed0:	mov	r7, r9
   19ed4:	mov	r4, #0
   19ed8:	ldr	r0, [fp, #20]
   19edc:	ldr	r6, [fp, #16]
   19ee0:	ldr	r3, [fp, #12]
   19ee4:	str	r2, [sp, #4]
   19ee8:	mov	r2, sl
   19eec:	str	r5, [sp, #12]
   19ef0:	str	r0, [sp, #8]
   19ef4:	mov	r0, r1
   19ef8:	mov	r1, r7
   19efc:	str	r6, [sp]
   19f00:	bl	197a8 <__assert_fail@plt+0x82f8>
   19f04:	mov	r5, r0
   19f08:	mov	r0, r4
   19f0c:	bl	29220 <__assert_fail@plt+0x17d70>
   19f10:	mov	r0, r5
   19f14:	sub	sp, fp, #28
   19f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f1c:	mvn	r0, #1
   19f20:	sub	sp, fp, #28
   19f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f28:	ldrb	ip, [r0, #28]
   19f2c:	cmp	r2, #0
   19f30:	bic	ip, ip, #6
   19f34:	orrne	ip, ip, #2
   19f38:	strb	ip, [r0, #28]
   19f3c:	ldr	r0, [sp]
   19f40:	moveq	r0, r2
   19f44:	cmp	r2, #0
   19f48:	moveq	r3, r2
   19f4c:	stm	r1, {r2, r3}
   19f50:	str	r0, [r1, #8]
   19f54:	bx	lr
   19f58:	push	{r4, sl, fp, lr}
   19f5c:	add	fp, sp, #8
   19f60:	mov	r4, r0
   19f64:	ldr	r0, [r0, #24]
   19f68:	bl	29220 <__assert_fail@plt+0x17d70>
   19f6c:	ldr	r0, [r4, #36]	; 0x24
   19f70:	bl	29220 <__assert_fail@plt+0x17d70>
   19f74:	ldr	r0, [r4, #40]	; 0x28
   19f78:	add	r1, r4, #4
   19f7c:	cmp	r0, r1
   19f80:	beq	19f94 <__assert_fail@plt+0x8ae4>
   19f84:	ldr	r0, [r0, #8]
   19f88:	bl	29220 <__assert_fail@plt+0x17d70>
   19f8c:	ldr	r0, [r4, #40]	; 0x28
   19f90:	bl	29220 <__assert_fail@plt+0x17d70>
   19f94:	ldr	r0, [r4, #12]
   19f98:	bl	29220 <__assert_fail@plt+0x17d70>
   19f9c:	ldr	r0, [r4, #48]	; 0x30
   19fa0:	bl	29220 <__assert_fail@plt+0x17d70>
   19fa4:	ldr	r0, [r4, #44]	; 0x2c
   19fa8:	bl	29220 <__assert_fail@plt+0x17d70>
   19fac:	mov	r0, r4
   19fb0:	pop	{r4, sl, fp, lr}
   19fb4:	b	29220 <__assert_fail@plt+0x17d70>
   19fb8:	nop	{0}
   19fbc:	nop	{0}
   19fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fc4:	add	fp, sp, #28
   19fc8:	sub	sp, sp, #108	; 0x6c
   19fcc:	mov	r3, r0
   19fd0:	ldrb	r0, [r0, #74]	; 0x4a
   19fd4:	ldr	r9, [r3, #36]	; 0x24
   19fd8:	ldr	r1, [r3, #48]	; 0x30
   19fdc:	ldr	r8, [r3, #28]
   19fe0:	str	r3, [sp, #20]
   19fe4:	cmp	r9, r1
   19fe8:	movgt	r9, r1
   19fec:	cmp	r0, #0
   19ff0:	bne	1a00c <__assert_fail@plt+0x8b5c>
   19ff4:	ldr	r0, [r3, #64]	; 0x40
   19ff8:	cmp	r0, #0
   19ffc:	bne	1a00c <__assert_fail@plt+0x8b5c>
   1a000:	ldrb	r0, [r3, #76]	; 0x4c
   1a004:	cmp	r0, #0
   1a008:	beq	1a014 <__assert_fail@plt+0x8b64>
   1a00c:	ldr	r7, [r3, #32]
   1a010:	b	1a22c <__assert_fail@plt+0x8d7c>
   1a014:	cmp	r9, r8
   1a018:	ble	1a204 <__assert_fail@plt+0x8d54>
   1a01c:	add	r5, r3, #16
   1a020:	add	sl, sp, #32
   1a024:	str	r9, [sp, #16]
   1a028:	b	1a048 <__assert_fail@plt+0x8b98>
   1a02c:	mov	r8, r9
   1a030:	ldr	r9, [sp, #16]
   1a034:	mov	r3, sl
   1a038:	add	sl, sp, #32
   1a03c:	cmp	r9, r8
   1a040:	mov	r7, r8
   1a044:	ble	1a5fc <__assert_fail@plt+0x914c>
   1a048:	ldr	r6, [r3, #24]
   1a04c:	ldr	r4, [r3]
   1a050:	add	r0, r6, r8
   1a054:	ldrb	r7, [r4, r0]
   1a058:	tst	r7, #128	; 0x80
   1a05c:	bne	1a0a8 <__assert_fail@plt+0x8bf8>
   1a060:	mov	r0, r5
   1a064:	bl	1127c <mbsinit@plt>
   1a068:	cmp	r0, #0
   1a06c:	beq	1a0a8 <__assert_fail@plt+0x8bf8>
   1a070:	mov	r0, r7
   1a074:	bl	1148c <towupper@plt>
   1a078:	cmp	r0, #128	; 0x80
   1a07c:	bcs	1a09c <__assert_fail@plt+0x8bec>
   1a080:	ldr	r3, [sp, #20]
   1a084:	ldr	r1, [r3, #4]
   1a088:	strb	r0, [r1, r8]
   1a08c:	ldr	r1, [r3, #8]
   1a090:	str	r0, [r1, r8, lsl #2]
   1a094:	add	r8, r8, #1
   1a098:	b	1a03c <__assert_fail@plt+0x8b8c>
   1a09c:	ldr	r0, [sp, #20]
   1a0a0:	ldr	r4, [r0]
   1a0a4:	ldr	r6, [r0, #24]
   1a0a8:	ldm	r5, {r0, r1}
   1a0ac:	str	r1, [fp, #-36]	; 0xffffffdc
   1a0b0:	sub	r2, r9, r8
   1a0b4:	mov	r3, r5
   1a0b8:	str	r0, [fp, #-40]	; 0xffffffd8
   1a0bc:	add	r0, r4, r6
   1a0c0:	add	r1, r0, r8
   1a0c4:	add	r0, sp, #28
   1a0c8:	bl	29280 <__assert_fail@plt+0x17dd0>
   1a0cc:	sub	r4, r0, #1
   1a0d0:	mov	r6, r0
   1a0d4:	cmn	r4, #4
   1a0d8:	bhi	1a1b8 <__assert_fail@plt+0x8d08>
   1a0dc:	ldr	r0, [sp, #28]
   1a0e0:	bl	1148c <towupper@plt>
   1a0e4:	mov	r7, r0
   1a0e8:	ldr	r0, [sp, #28]
   1a0ec:	cmp	r7, r0
   1a0f0:	bne	1a114 <__assert_fail@plt+0x8c64>
   1a0f4:	ldr	sl, [sp, #20]
   1a0f8:	ldr	r1, [sl]
   1a0fc:	ldr	r2, [sl, #24]
   1a100:	ldr	r0, [sl, #4]
   1a104:	add	r1, r1, r2
   1a108:	add	r0, r0, r8
   1a10c:	add	r1, r1, r8
   1a110:	b	1a13c <__assert_fail@plt+0x8c8c>
   1a114:	mov	r0, sl
   1a118:	mov	r1, r7
   1a11c:	sub	r2, fp, #40	; 0x28
   1a120:	bl	111e0 <wcrtomb@plt>
   1a124:	cmp	r6, r0
   1a128:	bne	1a20c <__assert_fail@plt+0x8d5c>
   1a12c:	mov	r1, sl
   1a130:	ldr	sl, [sp, #20]
   1a134:	ldr	r0, [sl, #4]
   1a138:	add	r0, r0, r8
   1a13c:	mov	r2, r6
   1a140:	bl	11258 <memcpy@plt>
   1a144:	ldr	r0, [sl, #8]
   1a148:	add	r9, r8, #1
   1a14c:	str	r7, [r0, r8, lsl #2]
   1a150:	add	r7, r6, r8
   1a154:	cmp	r9, r7
   1a158:	bge	1a02c <__assert_fail@plt+0x8b7c>
   1a15c:	add	r0, r0, r8, lsl #2
   1a160:	mvn	r1, #3
   1a164:	add	r2, r1, r6, lsl #2
   1a168:	mov	r1, #255	; 0xff
   1a16c:	add	r0, r0, #4
   1a170:	bl	113cc <memset@plt>
   1a174:	sub	r0, r6, #2
   1a178:	ands	r1, r4, #7
   1a17c:	add	sl, sp, #32
   1a180:	beq	1a190 <__assert_fail@plt+0x8ce0>
   1a184:	subs	r1, r1, #1
   1a188:	add	r9, r9, #1
   1a18c:	bne	1a184 <__assert_fail@plt+0x8cd4>
   1a190:	ldr	r3, [sp, #20]
   1a194:	cmp	r0, #7
   1a198:	bcc	1a1ac <__assert_fail@plt+0x8cfc>
   1a19c:	add	r0, r6, r8
   1a1a0:	sub	r0, r0, r9
   1a1a4:	subs	r0, r0, #8
   1a1a8:	bne	1a1a4 <__assert_fail@plt+0x8cf4>
   1a1ac:	ldr	r9, [sp, #16]
   1a1b0:	mov	r8, r7
   1a1b4:	b	1a03c <__assert_fail@plt+0x8b8c>
   1a1b8:	ldr	r3, [sp, #20]
   1a1bc:	add	r0, r6, #1
   1a1c0:	cmp	r0, #2
   1a1c4:	bcc	1a1d8 <__assert_fail@plt+0x8d28>
   1a1c8:	ldr	r0, [r3, #36]	; 0x24
   1a1cc:	ldr	r1, [r3, #48]	; 0x30
   1a1d0:	cmp	r0, r1
   1a1d4:	blt	1a218 <__assert_fail@plt+0x8d68>
   1a1d8:	ldr	r0, [r3, #4]
   1a1dc:	cmn	r6, #1
   1a1e0:	strb	r7, [r0, r8]
   1a1e4:	ldr	r0, [r3, #8]
   1a1e8:	str	r7, [r0, r8, lsl #2]
   1a1ec:	add	r8, r8, #1
   1a1f0:	bne	1a03c <__assert_fail@plt+0x8b8c>
   1a1f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a1f8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a1fc:	stm	r5, {r0, r1}
   1a200:	b	1a03c <__assert_fail@plt+0x8b8c>
   1a204:	mov	r7, r8
   1a208:	b	1a5fc <__assert_fail@plt+0x914c>
   1a20c:	ldr	r3, [sp, #20]
   1a210:	mov	r7, r8
   1a214:	b	1a234 <__assert_fail@plt+0x8d84>
   1a218:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a21c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a220:	mov	r7, r8
   1a224:	stm	r5, {r0, r1}
   1a228:	b	1a5fc <__assert_fail@plt+0x914c>
   1a22c:	cmp	r8, r9
   1a230:	bge	1a5fc <__assert_fail@plt+0x914c>
   1a234:	mov	r4, r3
   1a238:	mov	sl, r9
   1a23c:	sub	r2, r9, r8
   1a240:	ldr	r0, [r4, #16]!
   1a244:	ldr	r1, [r4, #4]
   1a248:	str	r0, [fp, #-40]	; 0xffffffd8
   1a24c:	str	r1, [fp, #-36]	; 0xffffffdc
   1a250:	ldr	r0, [r4, #48]	; 0x30
   1a254:	cmp	r0, #0
   1a258:	bne	1a378 <__assert_fail@plt+0x8ec8>
   1a25c:	ldr	r0, [r3]
   1a260:	ldr	r1, [r3, #24]
   1a264:	mov	r9, r7
   1a268:	add	r0, r0, r1
   1a26c:	add	r7, r0, r7
   1a270:	add	r0, sp, #24
   1a274:	mov	r1, r7
   1a278:	mov	r3, r4
   1a27c:	bl	29280 <__assert_fail@plt+0x17dd0>
   1a280:	mov	r5, r0
   1a284:	sub	r0, r0, #1
   1a288:	cmn	r0, #4
   1a28c:	str	r0, [sp, #16]
   1a290:	bhi	1a3cc <__assert_fail@plt+0x8f1c>
   1a294:	ldr	r0, [sp, #24]
   1a298:	bl	1148c <towupper@plt>
   1a29c:	mov	r6, r0
   1a2a0:	ldr	r0, [sp, #24]
   1a2a4:	cmp	r6, r0
   1a2a8:	bne	1a2b8 <__assert_fail@plt+0x8e08>
   1a2ac:	ldr	r4, [sp, #20]
   1a2b0:	mov	r1, r7
   1a2b4:	b	1a2d8 <__assert_fail@plt+0x8e28>
   1a2b8:	add	r0, sp, #32
   1a2bc:	sub	r2, fp, #40	; 0x28
   1a2c0:	mov	r1, r6
   1a2c4:	bl	111e0 <wcrtomb@plt>
   1a2c8:	cmp	r0, r5
   1a2cc:	bne	1a44c <__assert_fail@plt+0x8f9c>
   1a2d0:	ldr	r4, [sp, #20]
   1a2d4:	add	r1, sp, #32
   1a2d8:	ldr	r0, [r4, #4]
   1a2dc:	add	r0, r0, r8
   1a2e0:	mov	r2, r5
   1a2e4:	bl	11258 <memcpy@plt>
   1a2e8:	ldrb	r0, [r4, #76]	; 0x4c
   1a2ec:	mov	r7, r9
   1a2f0:	mov	r9, sl
   1a2f4:	mov	r3, r4
   1a2f8:	cmp	r0, #0
   1a2fc:	bne	1a500 <__assert_fail@plt+0x9050>
   1a300:	ldr	r0, [r3, #8]
   1a304:	add	r4, r5, r8
   1a308:	add	r7, r5, r7
   1a30c:	str	r6, [r0, r8, lsl #2]
   1a310:	add	r6, r8, #1
   1a314:	cmp	r6, r4
   1a318:	bge	1a370 <__assert_fail@plt+0x8ec0>
   1a31c:	mvn	r1, #3
   1a320:	add	r0, r0, r6, lsl #2
   1a324:	add	r2, r1, r5, lsl #2
   1a328:	mov	r1, #255	; 0xff
   1a32c:	bl	113cc <memset@plt>
   1a330:	ldr	r1, [sp, #16]
   1a334:	sub	r0, r5, #2
   1a338:	ands	r1, r1, #7
   1a33c:	beq	1a34c <__assert_fail@plt+0x8e9c>
   1a340:	subs	r1, r1, #1
   1a344:	add	r6, r6, #1
   1a348:	bne	1a340 <__assert_fail@plt+0x8e90>
   1a34c:	ldr	r3, [sp, #20]
   1a350:	cmp	r0, #7
   1a354:	bcc	1a368 <__assert_fail@plt+0x8eb8>
   1a358:	add	r0, r5, r8
   1a35c:	sub	r0, r0, r6
   1a360:	subs	r0, r0, #8
   1a364:	bne	1a360 <__assert_fail@plt+0x8eb0>
   1a368:	mov	r8, r4
   1a36c:	b	1a22c <__assert_fail@plt+0x8d7c>
   1a370:	mov	r8, r6
   1a374:	b	1a22c <__assert_fail@plt+0x8d7c>
   1a378:	cmp	r2, #1
   1a37c:	mov	r9, r7
   1a380:	add	r7, sp, #32
   1a384:	ldrge	r1, [r3, #80]	; 0x50
   1a388:	cmpge	r1, #1
   1a38c:	blt	1a270 <__assert_fail@plt+0x8dc0>
   1a390:	ldr	r7, [r3, #24]
   1a394:	ldr	r6, [r3]
   1a398:	add	r7, r9, r7
   1a39c:	add	r3, r6, r7
   1a3a0:	mov	r6, #0
   1a3a4:	add	r7, sp, #32
   1a3a8:	ldrb	r5, [r3, r6]
   1a3ac:	ldrb	r5, [r0, r5]
   1a3b0:	strb	r5, [r7, r6]
   1a3b4:	add	r6, r6, #1
   1a3b8:	cmp	r6, r2
   1a3bc:	bge	1a270 <__assert_fail@plt+0x8dc0>
   1a3c0:	cmp	r6, r1
   1a3c4:	blt	1a3a8 <__assert_fail@plt+0x8ef8>
   1a3c8:	b	1a270 <__assert_fail@plt+0x8dc0>
   1a3cc:	ldr	r3, [sp, #20]
   1a3d0:	add	r0, r5, #1
   1a3d4:	cmp	r0, #2
   1a3d8:	bcc	1a3ec <__assert_fail@plt+0x8f3c>
   1a3dc:	ldr	r0, [r3, #36]	; 0x24
   1a3e0:	ldr	r1, [r3, #48]	; 0x30
   1a3e4:	cmp	r0, r1
   1a3e8:	blt	1a5ec <__assert_fail@plt+0x913c>
   1a3ec:	ldr	r2, [r3, #24]
   1a3f0:	ldr	r0, [r3]
   1a3f4:	ldr	r1, [r3, #64]	; 0x40
   1a3f8:	mov	r7, r9
   1a3fc:	add	r2, r2, r9
   1a400:	cmp	r1, #0
   1a404:	ldrb	r0, [r0, r2]
   1a408:	bne	1a880 <__assert_fail@plt+0x93d0>
   1a40c:	ldr	r1, [r3, #4]
   1a410:	mov	r9, sl
   1a414:	strb	r0, [r1, r8]
   1a418:	ldrb	r1, [r3, #76]	; 0x4c
   1a41c:	cmp	r1, #0
   1a420:	bne	1a888 <__assert_fail@plt+0x93d8>
   1a424:	ldr	r1, [r3, #8]
   1a428:	add	r7, r7, #1
   1a42c:	cmn	r5, #1
   1a430:	str	r0, [r1, r8, lsl #2]
   1a434:	add	r8, r8, #1
   1a438:	bne	1a22c <__assert_fail@plt+0x8d7c>
   1a43c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a440:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a444:	stm	r4, {r0, r1}
   1a448:	b	1a22c <__assert_fail@plt+0x8d7c>
   1a44c:	ldr	r3, [sp, #20]
   1a450:	mov	r2, r0
   1a454:	cmn	r0, #1
   1a458:	beq	1a57c <__assert_fail@plt+0x90cc>
   1a45c:	ldr	r1, [r3, #36]	; 0x24
   1a460:	add	r0, r2, r8
   1a464:	cmp	r0, r1
   1a468:	bhi	1a5ec <__assert_fail@plt+0x913c>
   1a46c:	str	r0, [sp, #12]
   1a470:	ldr	r0, [r3, #12]
   1a474:	mov	r7, r9
   1a478:	cmp	r0, #0
   1a47c:	bne	1a4a0 <__assert_fail@plt+0x8ff0>
   1a480:	lsl	r0, r1, #2
   1a484:	mov	r4, r2
   1a488:	bl	29054 <__assert_fail@plt+0x17ba4>
   1a48c:	ldr	r3, [sp, #20]
   1a490:	mov	r2, r4
   1a494:	cmp	r0, #0
   1a498:	str	r0, [r3, #12]
   1a49c:	beq	1a874 <__assert_fail@plt+0x93c4>
   1a4a0:	ldrb	r1, [r3, #76]	; 0x4c
   1a4a4:	ldr	r9, [sp, #16]
   1a4a8:	cmp	r1, #0
   1a4ac:	bne	1a6cc <__assert_fail@plt+0x921c>
   1a4b0:	cmp	r8, #0
   1a4b4:	beq	1a6c4 <__assert_fail@plt+0x9214>
   1a4b8:	mov	r1, #0
   1a4bc:	cmp	r8, #4
   1a4c0:	bcc	1a6b4 <__assert_fail@plt+0x9204>
   1a4c4:	bic	r1, r8, #3
   1a4c8:	stmib	sp, {r2, r7}
   1a4cc:	mov	r2, #1
   1a4d0:	add	r3, pc, #968	; 0x3c8
   1a4d4:	sub	r7, r1, #4
   1a4d8:	add	r2, r2, r7, lsr #2
   1a4dc:	cmp	r7, #12
   1a4e0:	and	r4, r2, #3
   1a4e4:	bcs	1a610 <__assert_fail@plt+0x9160>
   1a4e8:	vld1.64	{d16-d17}, [r3 :128]
   1a4ec:	mov	sl, r4
   1a4f0:	mov	r3, #0
   1a4f4:	cmp	sl, #0
   1a4f8:	bne	1a684 <__assert_fail@plt+0x91d4>
   1a4fc:	b	1a6a4 <__assert_fail@plt+0x91f4>
   1a500:	ldr	lr, [r3, #12]
   1a504:	mov	r1, #0
   1a508:	cmp	r5, #4
   1a50c:	bcc	1a5c8 <__assert_fail@plt+0x9118>
   1a510:	vdup.32	q8, r7
   1a514:	bic	r1, r5, #3
   1a518:	mov	r3, #1
   1a51c:	mov	r9, r7
   1a520:	subs	r2, r1, #4
   1a524:	add	r2, r3, r2, lsr #2
   1a528:	add	r3, pc, #880	; 0x370
   1a52c:	and	ip, r2, #1
   1a530:	beq	1a594 <__assert_fail@plt+0x90e4>
   1a534:	sub	r4, r2, ip
   1a538:	add	r2, pc, #864	; 0x360
   1a53c:	vmov.i32	q10, #4	; 0x00000004
   1a540:	vmov.i32	q11, #8	; 0x00000008
   1a544:	add	r7, lr, r8, lsl #2
   1a548:	mov	r3, #0
   1a54c:	vld1.64	{d18-d19}, [r2 :128]
   1a550:	mov	r2, #32
   1a554:	vadd.i32	q12, q9, q8
   1a558:	vadd.i32	q9, q9, q11
   1a55c:	add	r0, r7, #16
   1a560:	subs	r4, r4, #2
   1a564:	add	r3, r3, #8
   1a568:	vadd.i32	q13, q12, q10
   1a56c:	vst1.32	{d24-d25}, [r7], r2
   1a570:	vst1.32	{d26-d27}, [r0]
   1a574:	bne	1a554 <__assert_fail@plt+0x90a4>
   1a578:	b	1a59c <__assert_fail@plt+0x90ec>
   1a57c:	ldr	r0, [r3, #4]
   1a580:	mov	r1, r7
   1a584:	mov	r2, r5
   1a588:	mov	r4, r3
   1a58c:	add	r0, r0, r8
   1a590:	b	1a2e4 <__assert_fail@plt+0x8e34>
   1a594:	vld1.64	{d18-d19}, [r3 :128]
   1a598:	mov	r3, #0
   1a59c:	cmp	ip, #0
   1a5a0:	beq	1a5b4 <__assert_fail@plt+0x9104>
   1a5a4:	add	r0, r3, r8
   1a5a8:	vadd.i32	q8, q9, q8
   1a5ac:	add	r0, lr, r0, lsl #2
   1a5b0:	vst1.32	{d16-d17}, [r0]
   1a5b4:	ldr	r3, [sp, #20]
   1a5b8:	mov	r7, r9
   1a5bc:	cmp	r5, r1
   1a5c0:	mov	r9, sl
   1a5c4:	beq	1a300 <__assert_fail@plt+0x8e50>
   1a5c8:	add	r0, r8, r1
   1a5cc:	add	r2, r7, r1
   1a5d0:	sub	r4, r5, r1
   1a5d4:	add	r0, lr, r0, lsl #2
   1a5d8:	str	r2, [r0], #4
   1a5dc:	add	r2, r2, #1
   1a5e0:	subs	r4, r4, #1
   1a5e4:	bne	1a5d8 <__assert_fail@plt+0x9128>
   1a5e8:	b	1a300 <__assert_fail@plt+0x8e50>
   1a5ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a5f0:	mov	r7, r9
   1a5f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a5f8:	stm	r4, {r0, r1}
   1a5fc:	str	r8, [r3, #28]
   1a600:	str	r7, [r3, #32]
   1a604:	mov	r0, #0
   1a608:	sub	sp, fp, #28
   1a60c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a610:	mov	sl, r4
   1a614:	sub	r4, r2, r4
   1a618:	add	r2, pc, #640	; 0x280
   1a61c:	vmov.i32	q9, #12	; 0x0000000c
   1a620:	vmov.i32	q10, #8	; 0x00000008
   1a624:	vmov.i32	q11, #4	; 0x00000004
   1a628:	vmov.i32	q12, #16	; 0x00000010
   1a62c:	mov	r3, #0
   1a630:	mov	lr, #64	; 0x40
   1a634:	mov	r7, r0
   1a638:	vld1.64	{d16-d17}, [r2 :128]
   1a63c:	mov	r2, r0
   1a640:	vadd.i32	q13, q8, q9
   1a644:	add	ip, r2, #48	; 0x30
   1a648:	vadd.i32	q14, q8, q10
   1a64c:	vadd.i32	q15, q8, q11
   1a650:	subs	r4, r4, #4
   1a654:	add	r3, r3, #16
   1a658:	vst1.32	{d26-d27}, [ip]
   1a65c:	vst1.32	{d16-d17}, [r7], lr
   1a660:	vadd.i32	q8, q8, q12
   1a664:	add	ip, r2, #32
   1a668:	add	r2, r2, #16
   1a66c:	vst1.32	{d28-d29}, [ip]
   1a670:	vst1.32	{d30-d31}, [r2]
   1a674:	mov	r2, r7
   1a678:	bne	1a640 <__assert_fail@plt+0x9190>
   1a67c:	cmp	sl, #0
   1a680:	beq	1a6a4 <__assert_fail@plt+0x91f4>
   1a684:	vmov.i32	q9, #4	; 0x00000004
   1a688:	add	r2, r0, r3, lsl #2
   1a68c:	rsb	r3, sl, #0
   1a690:	vadd.i32	q10, q8, q9
   1a694:	vst1.32	{d16-d17}, [r2]!
   1a698:	adds	r3, r3, #1
   1a69c:	vorr	q8, q10, q10
   1a6a0:	bcc	1a690 <__assert_fail@plt+0x91e0>
   1a6a4:	ldr	r3, [sp, #20]
   1a6a8:	ldmib	sp, {r2, r7}
   1a6ac:	cmp	r8, r1
   1a6b0:	beq	1a6c4 <__assert_fail@plt+0x9214>
   1a6b4:	str	r1, [r0, r1, lsl #2]
   1a6b8:	add	r1, r1, #1
   1a6bc:	cmp	r8, r1
   1a6c0:	bne	1a6b4 <__assert_fail@plt+0x9204>
   1a6c4:	mov	r0, #1
   1a6c8:	strb	r0, [r3, #76]	; 0x4c
   1a6cc:	ldr	r0, [r3, #4]
   1a6d0:	add	r1, sp, #32
   1a6d4:	mov	r4, r3
   1a6d8:	mov	sl, r2
   1a6dc:	add	r0, r0, r8
   1a6e0:	bl	11258 <memcpy@plt>
   1a6e4:	ldr	r0, [r4, #8]
   1a6e8:	cmp	sl, #2
   1a6ec:	str	r6, [r0, r8, lsl #2]
   1a6f0:	mov	r6, r7
   1a6f4:	ldr	r1, [r4, #12]
   1a6f8:	str	r7, [r1, r8, lsl #2]
   1a6fc:	bcc	1a82c <__assert_fail@plt+0x937c>
   1a700:	sub	lr, sl, #1
   1a704:	mov	ip, r6
   1a708:	mov	r2, #1
   1a70c:	cmp	lr, #4
   1a710:	bcc	1a794 <__assert_fail@plt+0x92e4>
   1a714:	add	r7, sl, r8
   1a718:	add	r4, r8, #1
   1a71c:	str	ip, [sp, #8]
   1a720:	add	r6, r0, r4, lsl #2
   1a724:	add	r3, r0, r7, lsl #2
   1a728:	add	r4, r1, r4, lsl #2
   1a72c:	cmp	r4, r3
   1a730:	addcc	r3, r1, r7, lsl #2
   1a734:	cmpcc	r6, r3
   1a738:	bcc	1a794 <__assert_fail@plt+0x92e4>
   1a73c:	add	r2, pc, #364	; 0x16c
   1a740:	ldr	r3, [sp, #8]
   1a744:	vdup.32	q9, r9
   1a748:	vdup.32	q10, r5
   1a74c:	vmov.i32	q12, #4	; 0x00000004
   1a750:	vmov.i8	q13, #255	; 0xff
   1a754:	vld1.64	{d22-d23}, [r2 :128]
   1a758:	vdup.32	q8, r3
   1a75c:	bic	r3, lr, #3
   1a760:	orr	r2, r3, #1
   1a764:	mov	r7, r3
   1a768:	vcgt.u32	q14, q10, q11
   1a76c:	subs	r7, r7, #4
   1a770:	vbsl	q14, q11, q9
   1a774:	vadd.i32	q11, q11, q12
   1a778:	vadd.i32	q14, q14, q8
   1a77c:	vst1.32	{d28-d29}, [r4]!
   1a780:	vst1.32	{d26-d27}, [r6]!
   1a784:	bne	1a768 <__assert_fail@plt+0x92b8>
   1a788:	cmp	lr, r3
   1a78c:	mov	r6, ip
   1a790:	beq	1a82c <__assert_fail@plt+0x937c>
   1a794:	tst	sl, #1
   1a798:	mov	r3, r2
   1a79c:	bne	1a7c4 <__assert_fail@plt+0x9314>
   1a7a0:	cmp	r2, r5
   1a7a4:	mov	r3, r9
   1a7a8:	add	r7, r2, r8
   1a7ac:	movcc	r3, r2
   1a7b0:	add	r3, r3, ip
   1a7b4:	str	r3, [r1, r7, lsl #2]
   1a7b8:	mvn	r3, #0
   1a7bc:	str	r3, [r0, r7, lsl #2]
   1a7c0:	add	r3, r2, #1
   1a7c4:	add	r2, r2, #1
   1a7c8:	mov	r6, ip
   1a7cc:	cmp	sl, r2
   1a7d0:	beq	1a82c <__assert_fail@plt+0x937c>
   1a7d4:	add	r2, r8, r3
   1a7d8:	add	r2, r2, #1
   1a7dc:	add	r1, r1, r2, lsl #2
   1a7e0:	add	r0, r0, r2, lsl #2
   1a7e4:	mvn	r2, #0
   1a7e8:	cmp	r3, r5
   1a7ec:	mov	r7, r9
   1a7f0:	movcc	r7, r3
   1a7f4:	add	r7, r7, r6
   1a7f8:	str	r7, [r1, #-4]
   1a7fc:	add	r7, r3, #1
   1a800:	add	r3, r3, #2
   1a804:	str	r2, [r0, #-4]
   1a808:	cmp	r7, r5
   1a80c:	movcs	r7, r9
   1a810:	cmp	r3, sl
   1a814:	add	r7, r7, r6
   1a818:	str	r7, [r1]
   1a81c:	str	r2, [r0]
   1a820:	add	r1, r1, #8
   1a824:	add	r0, r0, #8
   1a828:	bne	1a7e8 <__assert_fail@plt+0x9338>
   1a82c:	ldr	r3, [sp, #20]
   1a830:	sub	r1, sl, r5
   1a834:	mov	r7, r6
   1a838:	ldr	r0, [r3, #48]	; 0x30
   1a83c:	ldr	r2, [r3, #52]	; 0x34
   1a840:	add	r0, r0, r1
   1a844:	cmp	r2, r6
   1a848:	str	r0, [r3, #48]	; 0x30
   1a84c:	ble	1a85c <__assert_fail@plt+0x93ac>
   1a850:	ldr	r2, [r3, #56]	; 0x38
   1a854:	add	r1, r2, r1
   1a858:	str	r1, [r3, #56]	; 0x38
   1a85c:	ldr	r9, [r3, #36]	; 0x24
   1a860:	ldr	r8, [sp, #12]
   1a864:	add	r7, r5, r7
   1a868:	cmp	r9, r0
   1a86c:	movgt	r9, r0
   1a870:	b	1a22c <__assert_fail@plt+0x8d7c>
   1a874:	mov	r0, #12
   1a878:	sub	sp, fp, #28
   1a87c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a880:	ldrb	r0, [r1, r0]
   1a884:	b	1a40c <__assert_fail@plt+0x8f5c>
   1a888:	ldr	r1, [r3, #12]
   1a88c:	str	r7, [r1, r8, lsl #2]
   1a890:	b	1a424 <__assert_fail@plt+0x8f74>
   1a894:	nop	{0}
   1a898:	nop	{0}
   1a89c:	nop	{0}
   1a8a0:	andeq	r0, r0, r0
   1a8a4:	andeq	r0, r0, r1
   1a8a8:	andeq	r0, r0, r2
   1a8ac:	andeq	r0, r0, r3
   1a8b0:	andeq	r0, r0, r1
   1a8b4:	andeq	r0, r0, r2
   1a8b8:	andeq	r0, r0, r3
   1a8bc:	andeq	r0, r0, r4
   1a8c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8c4:	add	fp, sp, #28
   1a8c8:	sub	sp, sp, #68	; 0x44
   1a8cc:	mov	r4, r0
   1a8d0:	ldr	r8, [r0, #28]
   1a8d4:	ldr	r5, [r0, #36]	; 0x24
   1a8d8:	ldr	r0, [r0, #48]	; 0x30
   1a8dc:	cmp	r5, r0
   1a8e0:	movgt	r5, r0
   1a8e4:	cmp	r5, r8
   1a8e8:	ble	1aab4 <__assert_fail@plt+0x9604>
   1a8ec:	add	r9, r4, #16
   1a8f0:	mov	r0, sp
   1a8f4:	ldr	r3, [r4, #64]	; 0x40
   1a8f8:	ldm	r9, {r6, sl}
   1a8fc:	sub	r2, r5, r8
   1a900:	cmp	r3, #0
   1a904:	bne	1a9f8 <__assert_fail@plt+0x9548>
   1a908:	ldr	r3, [r4]
   1a90c:	ldr	r1, [r4, #24]
   1a910:	add	r1, r3, r1
   1a914:	add	r1, r1, r8
   1a918:	mov	r3, r9
   1a91c:	bl	29280 <__assert_fail@plt+0x17dd0>
   1a920:	mov	r7, r0
   1a924:	add	r0, r0, #1
   1a928:	cmp	r0, #2
   1a92c:	bcc	1a948 <__assert_fail@plt+0x9498>
   1a930:	cmn	r7, #2
   1a934:	bne	1a974 <__assert_fail@plt+0x94c4>
   1a938:	ldr	r0, [r4, #36]	; 0x24
   1a93c:	ldr	r1, [r4, #48]	; 0x30
   1a940:	cmp	r0, r1
   1a944:	blt	1aab0 <__assert_fail@plt+0x9600>
   1a948:	ldr	r1, [r4, #24]
   1a94c:	ldr	r0, [r4]
   1a950:	add	r1, r1, r8
   1a954:	ldrb	r0, [r0, r1]
   1a958:	str	r0, [sp]
   1a95c:	ldr	r1, [r4, #64]	; 0x40
   1a960:	cmp	r1, #0
   1a964:	bne	1aaa4 <__assert_fail@plt+0x95f4>
   1a968:	mov	r7, #1
   1a96c:	stm	r9, {r6, sl}
   1a970:	b	1a978 <__assert_fail@plt+0x94c8>
   1a974:	ldr	r0, [sp]
   1a978:	ldr	r1, [r4, #8]
   1a97c:	add	sl, r7, r8
   1a980:	add	r6, r8, #1
   1a984:	cmp	r6, sl
   1a988:	str	r0, [r1, r8, lsl #2]
   1a98c:	bge	1a9e4 <__assert_fail@plt+0x9534>
   1a990:	mvn	r0, #3
   1a994:	add	r2, r0, r7, lsl #2
   1a998:	add	r0, r1, r8, lsl #2
   1a99c:	mov	r1, #255	; 0xff
   1a9a0:	add	r0, r0, #4
   1a9a4:	bl	113cc <memset@plt>
   1a9a8:	sub	r1, r7, #1
   1a9ac:	sub	r0, r7, #2
   1a9b0:	ands	r1, r1, #7
   1a9b4:	beq	1a9c4 <__assert_fail@plt+0x9514>
   1a9b8:	subs	r1, r1, #1
   1a9bc:	add	r6, r6, #1
   1a9c0:	bne	1a9b8 <__assert_fail@plt+0x9508>
   1a9c4:	cmp	r0, #7
   1a9c8:	bcc	1a9dc <__assert_fail@plt+0x952c>
   1a9cc:	add	r0, r7, r8
   1a9d0:	sub	r0, r0, r6
   1a9d4:	subs	r0, r0, #8
   1a9d8:	bne	1a9d4 <__assert_fail@plt+0x9524>
   1a9dc:	mov	r8, sl
   1a9e0:	b	1a9e8 <__assert_fail@plt+0x9538>
   1a9e4:	mov	r8, r6
   1a9e8:	mov	r0, sp
   1a9ec:	cmp	r5, r8
   1a9f0:	bgt	1a8f4 <__assert_fail@plt+0x9444>
   1a9f4:	b	1aab4 <__assert_fail@plt+0x9604>
   1a9f8:	cmp	r2, #1
   1a9fc:	add	r1, sp, #4
   1aa00:	blt	1a918 <__assert_fail@plt+0x9468>
   1aa04:	ldr	r1, [r4, #80]	; 0x50
   1aa08:	cmp	r1, #1
   1aa0c:	add	r1, sp, #4
   1aa10:	blt	1a918 <__assert_fail@plt+0x9468>
   1aa14:	ldr	r7, [r4, #24]
   1aa18:	ldm	r4, {r1, ip}
   1aa1c:	cmp	r2, #2
   1aa20:	add	r7, r8, r7
   1aa24:	ldrb	r1, [r1, r7]
   1aa28:	ldrb	r1, [r3, r1]
   1aa2c:	strb	r1, [ip, r8]
   1aa30:	strb	r1, [sp, #4]
   1aa34:	add	r1, sp, #4
   1aa38:	blt	1a918 <__assert_fail@plt+0x9468>
   1aa3c:	ldr	r1, [r4, #80]	; 0x50
   1aa40:	cmp	r1, #2
   1aa44:	add	r1, sp, #4
   1aa48:	blt	1a918 <__assert_fail@plt+0x9468>
   1aa4c:	mov	lr, r0
   1aa50:	mov	r0, #1
   1aa54:	ldr	r7, [r4, #24]
   1aa58:	ldm	r4, {r1, ip}
   1aa5c:	ldr	r3, [r4, #64]	; 0x40
   1aa60:	add	r1, r1, r7
   1aa64:	add	r1, r1, r8
   1aa68:	ldrb	r1, [r1, r0]
   1aa6c:	ldrb	r1, [r3, r1]
   1aa70:	add	r3, ip, r8
   1aa74:	strb	r1, [r3, r0]
   1aa78:	add	r3, sp, #4
   1aa7c:	strb	r1, [r3, r0]
   1aa80:	add	r0, r0, #1
   1aa84:	cmp	r0, r2
   1aa88:	bge	1aa98 <__assert_fail@plt+0x95e8>
   1aa8c:	ldr	r1, [r4, #80]	; 0x50
   1aa90:	cmp	r0, r1
   1aa94:	blt	1aa54 <__assert_fail@plt+0x95a4>
   1aa98:	add	r1, sp, #4
   1aa9c:	mov	r0, lr
   1aaa0:	b	1a918 <__assert_fail@plt+0x9468>
   1aaa4:	ldrb	r0, [r1, r0]
   1aaa8:	str	r0, [sp]
   1aaac:	b	1a968 <__assert_fail@plt+0x94b8>
   1aab0:	stm	r9, {r6, sl}
   1aab4:	str	r8, [r4, #28]
   1aab8:	str	r8, [r4, #32]
   1aabc:	sub	sp, fp, #28
   1aac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aac8:	add	fp, sp, #28
   1aacc:	sub	sp, sp, #28
   1aad0:	ldr	r9, [r1]
   1aad4:	mov	r5, r0
   1aad8:	ldr	r4, [fp, #12]
   1aadc:	mov	r6, r2
   1aae0:	str	r1, [sp, #16]
   1aae4:	str	r3, [sp, #20]
   1aae8:	ldr	r0, [r9, #84]	; 0x54
   1aaec:	str	r4, [sp, #4]
   1aaf0:	str	r0, [sp, #12]
   1aaf4:	ldr	r0, [fp, #8]
   1aaf8:	str	r0, [sp]
   1aafc:	mov	r0, r5
   1ab00:	bl	1b56c <__assert_fail@plt+0xa0bc>
   1ab04:	mov	r7, r0
   1ab08:	cmp	r0, #0
   1ab0c:	bne	1ab1c <__assert_fail@plt+0x966c>
   1ab10:	ldr	r0, [r4]
   1ab14:	cmp	r0, #0
   1ab18:	bne	1ad28 <__assert_fail@plt+0x9878>
   1ab1c:	ldrb	r0, [r6, #4]
   1ab20:	cmp	r0, #10
   1ab24:	bne	1ac64 <__assert_fail@plt+0x97b4>
   1ab28:	ldr	r0, [sp, #20]
   1ab2c:	mov	sl, #0
   1ab30:	orr	r0, r0, #8388608	; 0x800000
   1ab34:	str	r0, [sp, #24]
   1ab38:	ldr	r2, [sp, #24]
   1ab3c:	mov	r0, r6
   1ab40:	mov	r1, r5
   1ab44:	bl	1ad30 <__assert_fail@plt+0x9880>
   1ab48:	ldr	r1, [r5, #40]	; 0x28
   1ab4c:	mov	r8, #0
   1ab50:	add	r0, r1, r0
   1ab54:	str	r0, [r5, #40]	; 0x28
   1ab58:	ldrb	r0, [r6, #4]
   1ab5c:	orr	r1, r0, #8
   1ab60:	cmp	r1, #10
   1ab64:	bne	1abc8 <__assert_fail@plt+0x9718>
   1ab68:	ldr	r1, [r9, #64]	; 0x40
   1ab6c:	cmp	r1, #31
   1ab70:	beq	1ac3c <__assert_fail@plt+0x978c>
   1ab74:	ldr	r0, [r9, #56]	; 0x38
   1ab78:	add	r4, r0, r1, lsl #5
   1ab7c:	add	r2, r1, #1
   1ab80:	mov	r0, #10
   1ab84:	cmp	r7, #0
   1ab88:	str	r2, [r9, #64]	; 0x40
   1ab8c:	str	sl, [r4, #4]!
   1ab90:	stmib	r4, {r7, r8, sl}
   1ab94:	str	sl, [r4, #16]
   1ab98:	str	sl, [r4, #20]
   1ab9c:	str	r0, [r4, #24]
   1aba0:	mvn	r0, #0
   1aba4:	str	r0, [r4, #28]
   1aba8:	strne	r4, [r7]
   1abac:	cmp	r8, #0
   1abb0:	mov	r7, r4
   1abb4:	strne	r4, [r8]
   1abb8:	ldrb	r0, [r6, #4]
   1abbc:	cmp	r0, #10
   1abc0:	beq	1ab38 <__assert_fail@plt+0x9688>
   1abc4:	b	1ac68 <__assert_fail@plt+0x97b8>
   1abc8:	ldr	r1, [fp, #8]
   1abcc:	cmp	r1, #0
   1abd0:	beq	1abe0 <__assert_fail@plt+0x9730>
   1abd4:	cmp	r0, #9
   1abd8:	mov	r8, #0
   1abdc:	beq	1ab68 <__assert_fail@plt+0x96b8>
   1abe0:	ldr	r0, [sp, #12]
   1abe4:	ldr	r4, [r9, #84]	; 0x54
   1abe8:	ldr	r1, [sp, #16]
   1abec:	ldr	r3, [sp, #20]
   1abf0:	mov	r2, r6
   1abf4:	str	r0, [r9, #84]	; 0x54
   1abf8:	ldr	r0, [fp, #8]
   1abfc:	str	r0, [sp]
   1ac00:	ldr	r0, [fp, #12]
   1ac04:	str	r0, [sp, #4]
   1ac08:	mov	r0, r5
   1ac0c:	bl	1b56c <__assert_fail@plt+0xa0bc>
   1ac10:	mov	r8, r0
   1ac14:	cmp	r0, #0
   1ac18:	bne	1ac2c <__assert_fail@plt+0x977c>
   1ac1c:	ldr	r0, [fp, #12]
   1ac20:	ldr	r0, [r0]
   1ac24:	cmp	r0, #0
   1ac28:	bne	1ac74 <__assert_fail@plt+0x97c4>
   1ac2c:	ldr	r0, [r9, #84]	; 0x54
   1ac30:	orr	r0, r0, r4
   1ac34:	str	r0, [r9, #84]	; 0x54
   1ac38:	b	1ab68 <__assert_fail@plt+0x96b8>
   1ac3c:	mov	r0, #996	; 0x3e4
   1ac40:	bl	29054 <__assert_fail@plt+0x17ba4>
   1ac44:	cmp	r0, #0
   1ac48:	beq	1ad1c <__assert_fail@plt+0x986c>
   1ac4c:	ldr	r1, [r9, #56]	; 0x38
   1ac50:	str	r1, [r0]
   1ac54:	mov	r1, #0
   1ac58:	str	r1, [r9, #64]	; 0x40
   1ac5c:	str	r0, [r9, #56]	; 0x38
   1ac60:	b	1ab78 <__assert_fail@plt+0x96c8>
   1ac64:	mov	r4, r7
   1ac68:	mov	r0, r4
   1ac6c:	sub	sp, fp, #28
   1ac70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac74:	mov	r4, #0
   1ac78:	cmp	r7, #0
   1ac7c:	beq	1ac68 <__assert_fail@plt+0x97b8>
   1ac80:	movw	r8, #255	; 0xff
   1ac84:	movt	r8, #4
   1ac88:	mov	r6, r7
   1ac8c:	ldr	r7, [r7, #4]
   1ac90:	cmp	r7, #0
   1ac94:	bne	1ac88 <__assert_fail@plt+0x97d8>
   1ac98:	ldr	r7, [r6, #8]
   1ac9c:	cmp	r7, #0
   1aca0:	bne	1ac88 <__assert_fail@plt+0x97d8>
   1aca4:	ldr	r0, [r6, #24]
   1aca8:	and	r0, r0, r8
   1acac:	cmp	r0, #3
   1acb0:	beq	1ace4 <__assert_fail@plt+0x9834>
   1acb4:	cmp	r0, #6
   1acb8:	bne	1acf0 <__assert_fail@plt+0x9840>
   1acbc:	ldr	r5, [r6, #20]
   1acc0:	ldr	r0, [r5]
   1acc4:	bl	29220 <__assert_fail@plt+0x17d70>
   1acc8:	ldr	r0, [r5, #4]
   1accc:	bl	29220 <__assert_fail@plt+0x17d70>
   1acd0:	ldr	r0, [r5, #8]
   1acd4:	bl	29220 <__assert_fail@plt+0x17d70>
   1acd8:	ldr	r0, [r5, #12]
   1acdc:	bl	29220 <__assert_fail@plt+0x17d70>
   1ace0:	b	1ace8 <__assert_fail@plt+0x9838>
   1ace4:	ldr	r5, [r6, #20]
   1ace8:	mov	r0, r5
   1acec:	bl	29220 <__assert_fail@plt+0x17d70>
   1acf0:	ldr	r0, [r6]
   1acf4:	cmp	r0, #0
   1acf8:	beq	1ac68 <__assert_fail@plt+0x97b8>
   1acfc:	ldr	r7, [r0, #8]
   1ad00:	cmp	r7, r6
   1ad04:	mov	r6, r0
   1ad08:	beq	1aca4 <__assert_fail@plt+0x97f4>
   1ad0c:	cmp	r7, #0
   1ad10:	mov	r6, r0
   1ad14:	beq	1aca4 <__assert_fail@plt+0x97f4>
   1ad18:	b	1ac88 <__assert_fail@plt+0x97d8>
   1ad1c:	ldr	r1, [fp, #12]
   1ad20:	mov	r0, #12
   1ad24:	str	r0, [r1]
   1ad28:	mov	r4, #0
   1ad2c:	b	1ac68 <__assert_fail@plt+0x97b8>
   1ad30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ad34:	add	fp, sp, #24
   1ad38:	sub	sp, sp, #8
   1ad3c:	mov	r9, r0
   1ad40:	mov	r7, r1
   1ad44:	ldr	r0, [r1, #40]	; 0x28
   1ad48:	ldr	r1, [r1, #56]	; 0x38
   1ad4c:	cmp	r1, r0
   1ad50:	ble	1ae38 <__assert_fail@plt+0x9988>
   1ad54:	ldr	r1, [r7, #4]
   1ad58:	mov	r5, r9
   1ad5c:	mov	r8, r2
   1ad60:	ldrb	r6, [r1, r0]
   1ad64:	strb	r6, [r5], #4
   1ad68:	ldr	r0, [r5]
   1ad6c:	bic	r1, r0, #6291456	; 0x600000
   1ad70:	str	r1, [r5]
   1ad74:	ldr	r3, [r7, #80]	; 0x50
   1ad78:	cmp	r3, #2
   1ad7c:	blt	1ada0 <__assert_fail@plt+0x98f0>
   1ad80:	ldr	r2, [r7, #28]
   1ad84:	ldr	r1, [r7, #40]	; 0x28
   1ad88:	cmp	r1, r2
   1ad8c:	beq	1ada0 <__assert_fail@plt+0x98f0>
   1ad90:	ldr	r2, [r7, #8]
   1ad94:	ldr	r1, [r2, r1, lsl #2]
   1ad98:	cmn	r1, #1
   1ad9c:	beq	1b274 <__assert_fail@plt+0x9dc4>
   1ada0:	movw	r1, #65280	; 0xff00
   1ada4:	cmp	r6, #92	; 0x5c
   1ada8:	movt	r1, #65439	; 0xff9f
   1adac:	bne	1ae48 <__assert_fail@plt+0x9998>
   1adb0:	ldr	r6, [r7, #40]	; 0x28
   1adb4:	ldr	r4, [r7, #48]	; 0x30
   1adb8:	add	r2, r6, #1
   1adbc:	cmp	r2, r4
   1adc0:	bge	1ae9c <__assert_fail@plt+0x99ec>
   1adc4:	ldrb	r4, [r7, #75]	; 0x4b
   1adc8:	cmp	r4, #0
   1adcc:	bne	1b4f8 <__assert_fail@plt+0xa048>
   1add0:	ldr	r3, [r7, #4]
   1add4:	ldrb	r6, [r3, r2]
   1add8:	and	r0, r0, r1
   1addc:	strb	r6, [r9]
   1ade0:	orr	r4, r0, #1
   1ade4:	str	r4, [r9, #4]
   1ade8:	ldr	r0, [r7, #80]	; 0x50
   1adec:	cmp	r0, #2
   1adf0:	blt	1b0c0 <__assert_fail@plt+0x9c10>
   1adf4:	ldr	r0, [r7, #8]
   1adf8:	ldr	r1, [r7, #40]	; 0x28
   1adfc:	add	r0, r0, r1, lsl #2
   1ae00:	ldr	r4, [r0, #4]
   1ae04:	mov	r0, r4
   1ae08:	bl	113b4 <iswalnum@plt>
   1ae0c:	sub	r1, r4, #95	; 0x5f
   1ae10:	cmp	r0, #0
   1ae14:	clz	r1, r1
   1ae18:	movwne	r0, #1
   1ae1c:	lsr	r1, r1, #5
   1ae20:	orr	r0, r1, r0
   1ae24:	ldr	r1, [r5]
   1ae28:	bic	r1, r1, #4194304	; 0x400000
   1ae2c:	orr	r0, r1, r0, lsl #22
   1ae30:	uxtb	r1, r6
   1ae34:	b	1b0e4 <__assert_fail@plt+0x9c34>
   1ae38:	mov	r0, #2
   1ae3c:	mov	r4, #0
   1ae40:	strb	r0, [r9, #4]
   1ae44:	b	1b4ec <__assert_fail@plt+0xa03c>
   1ae48:	and	r0, r0, r1
   1ae4c:	orr	r4, r0, #1
   1ae50:	str	r4, [r5]
   1ae54:	ldr	r0, [r7, #80]	; 0x50
   1ae58:	cmp	r0, #2
   1ae5c:	blt	1aea8 <__assert_fail@plt+0x99f8>
   1ae60:	ldr	r0, [r7, #8]
   1ae64:	ldr	r1, [r7, #40]	; 0x28
   1ae68:	ldr	r4, [r0, r1, lsl #2]
   1ae6c:	mov	r0, r4
   1ae70:	bl	113b4 <iswalnum@plt>
   1ae74:	sub	r1, r4, #95	; 0x5f
   1ae78:	cmp	r0, #0
   1ae7c:	clz	r1, r1
   1ae80:	movwne	r0, #1
   1ae84:	lsr	r1, r1, #5
   1ae88:	orr	r0, r1, r0
   1ae8c:	ldr	r1, [r5]
   1ae90:	bic	r1, r1, #4194304	; 0x400000
   1ae94:	orr	r0, r1, r0, lsl #22
   1ae98:	b	1aec8 <__assert_fail@plt+0x9a18>
   1ae9c:	and	r0, r0, r1
   1aea0:	orr	r0, r0, #36	; 0x24
   1aea4:	b	1b288 <__assert_fail@plt+0x9dd8>
   1aea8:	bl	1136c <__ctype_b_loc@plt>
   1aeac:	ldr	r0, [r0]
   1aeb0:	cmp	r6, #95	; 0x5f
   1aeb4:	add	r0, r0, r6, lsl #1
   1aeb8:	ldrh	r0, [r0]
   1aebc:	ubfx	r0, r0, #3, #1
   1aec0:	movweq	r0, #1
   1aec4:	orr	r0, r4, r0, lsl #22
   1aec8:	sub	r1, r6, #10
   1aecc:	mov	r4, #1
   1aed0:	str	r0, [r5]
   1aed4:	cmp	r1, #115	; 0x73
   1aed8:	bhi	1b4ec <__assert_fail@plt+0xa03c>
   1aedc:	add	r2, pc, #0
   1aee0:	ldr	pc, [r2, r1, lsl #2]
   1aee4:	strheq	fp, [r1], -r4
   1aee8:	andeq	fp, r1, ip, ror #9
   1aeec:	andeq	fp, r1, ip, ror #9
   1aef0:	andeq	fp, r1, ip, ror #9
   1aef4:	andeq	fp, r1, ip, ror #9
   1aef8:	andeq	fp, r1, ip, ror #9
   1aefc:	andeq	fp, r1, ip, ror #9
   1af00:	andeq	fp, r1, ip, ror #9
   1af04:	andeq	fp, r1, ip, ror #9
   1af08:	andeq	fp, r1, ip, ror #9
   1af0c:	andeq	fp, r1, ip, ror #9
   1af10:	andeq	fp, r1, ip, ror #9
   1af14:	andeq	fp, r1, ip, ror #9
   1af18:	andeq	fp, r1, ip, ror #9
   1af1c:	andeq	fp, r1, ip, ror #9
   1af20:	andeq	fp, r1, ip, ror #9
   1af24:	andeq	fp, r1, ip, ror #9
   1af28:	andeq	fp, r1, ip, ror #9
   1af2c:	andeq	fp, r1, ip, ror #9
   1af30:	andeq	fp, r1, ip, ror #9
   1af34:	andeq	fp, r1, ip, ror #9
   1af38:	andeq	fp, r1, ip, ror #9
   1af3c:	andeq	fp, r1, ip, ror #9
   1af40:	andeq	fp, r1, ip, ror #9
   1af44:	andeq	fp, r1, ip, ror #9
   1af48:	andeq	fp, r1, ip, ror #9
   1af4c:	muleq	r1, r4, r2
   1af50:	andeq	fp, r1, ip, ror #9
   1af54:	andeq	fp, r1, ip, ror #9
   1af58:	andeq	fp, r1, ip, ror #9
   1af5c:	andeq	fp, r1, ip, ror #5
   1af60:	strdeq	fp, [r1], -r8
   1af64:	andeq	fp, r1, r4, lsl #6
   1af68:	andeq	fp, r1, ip, lsl #6
   1af6c:	andeq	fp, r1, ip, ror #9
   1af70:	andeq	fp, r1, ip, ror #9
   1af74:	andeq	fp, r1, ip, lsl r3
   1af78:	andeq	fp, r1, ip, ror #9
   1af7c:	andeq	fp, r1, ip, ror #9
   1af80:	andeq	fp, r1, ip, ror #9
   1af84:	andeq	fp, r1, ip, ror #9
   1af88:	andeq	fp, r1, ip, ror #9
   1af8c:	andeq	fp, r1, ip, ror #9
   1af90:	andeq	fp, r1, ip, ror #9
   1af94:	andeq	fp, r1, ip, ror #9
   1af98:	andeq	fp, r1, ip, ror #9
   1af9c:	andeq	fp, r1, ip, ror #9
   1afa0:	andeq	fp, r1, ip, ror #9
   1afa4:	andeq	fp, r1, ip, ror #9
   1afa8:	andeq	fp, r1, ip, ror #9
   1afac:	andeq	fp, r1, ip, ror #9
   1afb0:	andeq	fp, r1, ip, ror #9
   1afb4:	andeq	fp, r1, ip, ror #9
   1afb8:	andeq	fp, r1, r4, lsr #6
   1afbc:	andeq	fp, r1, ip, ror #9
   1afc0:	andeq	fp, r1, ip, ror #9
   1afc4:	andeq	fp, r1, ip, ror #9
   1afc8:	andeq	fp, r1, ip, ror #9
   1afcc:	andeq	fp, r1, ip, ror #9
   1afd0:	andeq	fp, r1, ip, ror #9
   1afd4:	andeq	fp, r1, ip, ror #9
   1afd8:	andeq	fp, r1, ip, ror #9
   1afdc:	andeq	fp, r1, ip, ror #9
   1afe0:	andeq	fp, r1, ip, ror #9
   1afe4:	andeq	fp, r1, ip, ror #9
   1afe8:	andeq	fp, r1, ip, ror #9
   1afec:	andeq	fp, r1, ip, ror #9
   1aff0:	andeq	fp, r1, ip, ror #9
   1aff4:	andeq	fp, r1, ip, ror #9
   1aff8:	andeq	fp, r1, ip, ror #9
   1affc:	andeq	fp, r1, ip, ror #9
   1b000:	andeq	fp, r1, ip, ror #9
   1b004:	andeq	fp, r1, ip, ror #9
   1b008:	andeq	fp, r1, ip, ror #9
   1b00c:	andeq	fp, r1, ip, ror #9
   1b010:	andeq	fp, r1, ip, ror #9
   1b014:	andeq	fp, r1, ip, ror #9
   1b018:	andeq	fp, r1, ip, ror #9
   1b01c:	andeq	fp, r1, ip, ror #9
   1b020:	andeq	fp, r1, ip, ror #9
   1b024:	andeq	fp, r1, ip, ror #9
   1b028:	andeq	fp, r1, r4, lsr r3
   1b02c:	andeq	fp, r1, ip, ror #9
   1b030:	andeq	fp, r1, ip, ror #9
   1b034:	andeq	fp, r1, ip, lsr r3
   1b038:	andeq	fp, r1, ip, ror #9
   1b03c:	andeq	fp, r1, ip, ror #9
   1b040:	andeq	fp, r1, ip, ror #9
   1b044:	andeq	fp, r1, ip, ror #9
   1b048:	andeq	fp, r1, ip, ror #9
   1b04c:	andeq	fp, r1, ip, ror #9
   1b050:	andeq	fp, r1, ip, ror #9
   1b054:	andeq	fp, r1, ip, ror #9
   1b058:	andeq	fp, r1, ip, ror #9
   1b05c:	andeq	fp, r1, ip, ror #9
   1b060:	andeq	fp, r1, ip, ror #9
   1b064:	andeq	fp, r1, ip, ror #9
   1b068:	andeq	fp, r1, ip, ror #9
   1b06c:	andeq	fp, r1, ip, ror #9
   1b070:	andeq	fp, r1, ip, ror #9
   1b074:	andeq	fp, r1, ip, ror #9
   1b078:	andeq	fp, r1, ip, ror #9
   1b07c:	andeq	fp, r1, ip, ror #9
   1b080:	andeq	fp, r1, ip, ror #9
   1b084:	andeq	fp, r1, ip, ror #9
   1b088:	andeq	fp, r1, ip, ror #9
   1b08c:	andeq	fp, r1, ip, ror #9
   1b090:	andeq	fp, r1, ip, ror #9
   1b094:	andeq	fp, r1, ip, ror #9
   1b098:	andeq	fp, r1, ip, ror #9
   1b09c:	andeq	fp, r1, ip, ror #9
   1b0a0:	andeq	fp, r1, ip, ror #9
   1b0a4:	andeq	fp, r1, ip, ror #9
   1b0a8:	andeq	fp, r1, r4, ror #6
   1b0ac:	andeq	fp, r1, r4, ror r3
   1b0b0:	andeq	fp, r1, r8, lsl #7
   1b0b4:	tst	r8, #2048	; 0x800
   1b0b8:	bne	1b380 <__assert_fail@plt+0x9ed0>
   1b0bc:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b0c0:	bl	1136c <__ctype_b_loc@plt>
   1b0c4:	ldr	r0, [r0]
   1b0c8:	uxtb	r1, r6
   1b0cc:	cmp	r1, #95	; 0x5f
   1b0d0:	add	r0, r0, r1, lsl #1
   1b0d4:	ldrh	r0, [r0]
   1b0d8:	ubfx	r0, r0, #3, #1
   1b0dc:	movweq	r0, #1
   1b0e0:	orr	r0, r4, r0, lsl #22
   1b0e4:	mvn	r2, #38	; 0x26
   1b0e8:	mov	r4, #2
   1b0ec:	str	r0, [r5]
   1b0f0:	uxtab	r2, r2, r6
   1b0f4:	cmp	r2, #86	; 0x56
   1b0f8:	bhi	1b4ec <__assert_fail@plt+0xa03c>
   1b0fc:	add	r3, pc, #0
   1b100:	ldr	pc, [r3, r2, lsl #2]
   1b104:	andeq	fp, r1, r4, asr #7
   1b108:	ldrdeq	fp, [r1], -r4
   1b10c:	andeq	fp, r1, r4, ror #7
   1b110:	andeq	fp, r1, ip, ror #9
   1b114:	strdeq	fp, [r1], -r4
   1b118:	andeq	fp, r1, ip, ror #9
   1b11c:	andeq	fp, r1, ip, ror #9
   1b120:	andeq	fp, r1, ip, ror #9
   1b124:	andeq	fp, r1, ip, ror #9
   1b128:	andeq	fp, r1, ip, ror #9
   1b12c:	andeq	fp, r1, r0, ror #4
   1b130:	andeq	fp, r1, r0, ror #4
   1b134:	andeq	fp, r1, r0, ror #4
   1b138:	andeq	fp, r1, r0, ror #4
   1b13c:	andeq	fp, r1, r0, ror #4
   1b140:	andeq	fp, r1, r0, ror #4
   1b144:	andeq	fp, r1, r0, ror #4
   1b148:	andeq	fp, r1, r0, ror #4
   1b14c:	andeq	fp, r1, r0, ror #4
   1b150:	andeq	fp, r1, ip, ror #9
   1b154:	andeq	fp, r1, ip, ror #9
   1b158:	andeq	fp, r1, ip, lsl #8
   1b15c:	andeq	fp, r1, ip, ror #9
   1b160:	andeq	fp, r1, ip, lsl r4
   1b164:	andeq	fp, r1, ip, lsr #8
   1b168:	andeq	fp, r1, ip, ror #9
   1b16c:	andeq	fp, r1, ip, ror #9
   1b170:	andeq	fp, r1, r4, asr #8
   1b174:	andeq	fp, r1, ip, ror #9
   1b178:	andeq	fp, r1, ip, ror #9
   1b17c:	andeq	fp, r1, ip, ror #9
   1b180:	andeq	fp, r1, ip, ror #9
   1b184:	andeq	fp, r1, ip, ror #9
   1b188:	andeq	fp, r1, ip, ror #9
   1b18c:	andeq	fp, r1, ip, ror #9
   1b190:	andeq	fp, r1, ip, ror #9
   1b194:	andeq	fp, r1, ip, ror #9
   1b198:	andeq	fp, r1, ip, ror #9
   1b19c:	andeq	fp, r1, ip, ror #9
   1b1a0:	andeq	fp, r1, ip, ror #9
   1b1a4:	andeq	fp, r1, ip, ror #9
   1b1a8:	andeq	fp, r1, ip, ror #9
   1b1ac:	andeq	fp, r1, ip, ror #9
   1b1b0:	andeq	fp, r1, ip, ror #9
   1b1b4:	andeq	fp, r1, r4, asr r4
   1b1b8:	andeq	fp, r1, ip, ror #9
   1b1bc:	andeq	fp, r1, ip, ror #9
   1b1c0:	andeq	fp, r1, ip, ror #9
   1b1c4:	andeq	fp, r1, r4, ror #8
   1b1c8:	andeq	fp, r1, ip, ror #9
   1b1cc:	andeq	fp, r1, ip, ror #9
   1b1d0:	andeq	fp, r1, ip, ror #9
   1b1d4:	andeq	fp, r1, ip, ror #9
   1b1d8:	andeq	fp, r1, ip, ror #9
   1b1dc:	andeq	fp, r1, ip, ror #9
   1b1e0:	andeq	fp, r1, ip, ror #9
   1b1e4:	andeq	fp, r1, ip, ror #9
   1b1e8:	andeq	fp, r1, r4, ror r4
   1b1ec:	andeq	fp, r1, ip, ror #9
   1b1f0:	andeq	fp, r1, r4, lsl #9
   1b1f4:	andeq	fp, r1, ip, ror #9
   1b1f8:	andeq	fp, r1, ip, ror #9
   1b1fc:	andeq	fp, r1, ip, ror #9
   1b200:	andeq	fp, r1, ip, ror #9
   1b204:	andeq	fp, r1, ip, ror #9
   1b208:	andeq	fp, r1, ip, ror #9
   1b20c:	andeq	fp, r1, ip, ror #9
   1b210:	andeq	fp, r1, ip, ror #9
   1b214:	andeq	fp, r1, ip, ror #9
   1b218:	andeq	fp, r1, ip, ror #9
   1b21c:	andeq	fp, r1, ip, ror #9
   1b220:	andeq	fp, r1, ip, ror #9
   1b224:	andeq	fp, r1, ip, ror #9
   1b228:	andeq	fp, r1, ip, ror #9
   1b22c:	andeq	fp, r1, ip, ror #9
   1b230:	andeq	fp, r1, ip, ror #9
   1b234:	muleq	r1, r4, r4
   1b238:	andeq	fp, r1, ip, ror #9
   1b23c:	andeq	fp, r1, ip, ror #9
   1b240:	andeq	fp, r1, ip, ror #9
   1b244:	andeq	fp, r1, r4, lsr #9
   1b248:	andeq	fp, r1, ip, ror #9
   1b24c:	andeq	fp, r1, ip, ror #9
   1b250:	andeq	fp, r1, ip, ror #9
   1b254:			; <UNDEFINED> instruction: 0x0001b4b4
   1b258:	andeq	fp, r1, r8, asr #9
   1b25c:	ldrdeq	fp, [r1], -r4
   1b260:	tst	r8, #16384	; 0x4000
   1b264:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b268:	sub	r1, r1, #49	; 0x31
   1b26c:	mov	r2, #4
   1b270:	b	1b354 <__assert_fail@plt+0x9ea4>
   1b274:	movw	r1, #65280	; 0xff00
   1b278:	movt	r1, #65439	; 0xff9f
   1b27c:	and	r0, r0, r1
   1b280:	orr	r0, r0, #1
   1b284:	orr	r0, r0, #2097152	; 0x200000
   1b288:	str	r0, [r5]
   1b28c:	mov	r4, #1
   1b290:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b294:	tst	r8, #8
   1b298:	bne	1b2e4 <__assert_fail@plt+0x9e34>
   1b29c:	ldr	r1, [r7, #40]	; 0x28
   1b2a0:	ldr	r2, [r7, #48]	; 0x30
   1b2a4:	add	r1, r1, #1
   1b2a8:	cmp	r1, r2
   1b2ac:	beq	1b2e4 <__assert_fail@plt+0x9e34>
   1b2b0:	str	r1, [r7, #40]	; 0x28
   1b2b4:	mov	r0, sp
   1b2b8:	mov	r1, r7
   1b2bc:	mov	r2, r8
   1b2c0:	bl	1ad30 <__assert_fail@plt+0x9880>
   1b2c4:	ldr	r0, [r7, #40]	; 0x28
   1b2c8:	sub	r0, r0, #1
   1b2cc:	str	r0, [r7, #40]	; 0x28
   1b2d0:	ldrb	r0, [sp, #4]
   1b2d4:	sub	r0, r0, #9
   1b2d8:	cmp	r0, #1
   1b2dc:	bhi	1b4ec <__assert_fail@plt+0xa03c>
   1b2e0:	ldr	r0, [r5]
   1b2e4:	mov	r1, #32
   1b2e8:	b	1b350 <__assert_fail@plt+0x9ea0>
   1b2ec:	tst	r8, #8192	; 0x2000
   1b2f0:	bne	1b3dc <__assert_fail@plt+0x9f2c>
   1b2f4:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b2f8:	tst	r8, #8192	; 0x2000
   1b2fc:	bne	1b3ec <__assert_fail@plt+0x9f3c>
   1b300:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b304:	mov	r1, #11
   1b308:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b30c:	movw	r1, #1026	; 0x402
   1b310:	tst	r8, r1
   1b314:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b318:	b	1b404 <__assert_fail@plt+0x9f54>
   1b31c:	mov	r1, #5
   1b320:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b324:	movw	r1, #1026	; 0x402
   1b328:	tst	r8, r1
   1b32c:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b330:	b	1b43c <__assert_fail@plt+0x9f8c>
   1b334:	mov	r1, #20
   1b338:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b33c:	movw	r1, #8
   1b340:	movt	r1, #128	; 0x80
   1b344:	tst	r8, r1
   1b348:	beq	1b398 <__assert_fail@plt+0x9ee8>
   1b34c:	mov	r1, #16
   1b350:	mov	r2, #12
   1b354:	bfi	r0, r2, #0, #8
   1b358:	str	r1, [r9]
   1b35c:	str	r0, [r9, #4]
   1b360:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b364:	and	r1, r8, #4608	; 0x1200
   1b368:	cmp	r1, #4608	; 0x1200
   1b36c:	beq	1b4c0 <__assert_fail@plt+0xa010>
   1b370:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b374:	and	r1, r8, #33792	; 0x8400
   1b378:	cmp	r1, #32768	; 0x8000
   1b37c:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b380:	mov	r1, #10
   1b384:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b388:	and	r1, r8, #4608	; 0x1200
   1b38c:	cmp	r1, #4608	; 0x1200
   1b390:	beq	1b4e0 <__assert_fail@plt+0xa030>
   1b394:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b398:	ldr	r1, [r7, #40]	; 0x28
   1b39c:	cmp	r1, #0
   1b3a0:	beq	1b34c <__assert_fail@plt+0x9e9c>
   1b3a4:	tst	r8, #2048	; 0x800
   1b3a8:	beq	1b4ec <__assert_fail@plt+0xa03c>
   1b3ac:	ldr	r2, [r7, #4]
   1b3b0:	add	r1, r1, r2
   1b3b4:	ldrb	r1, [r1, #-1]
   1b3b8:	cmp	r1, #10
   1b3bc:	beq	1b34c <__assert_fail@plt+0x9e9c>
   1b3c0:	b	1b4ec <__assert_fail@plt+0xa03c>
   1b3c4:	tst	r8, #524288	; 0x80000
   1b3c8:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b3cc:	mov	r1, #128	; 0x80
   1b3d0:	b	1b350 <__assert_fail@plt+0x9ea0>
   1b3d4:	tst	r8, #8192	; 0x2000
   1b3d8:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b3dc:	mov	r1, #8
   1b3e0:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b3e4:	tst	r8, #8192	; 0x2000
   1b3e8:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b3ec:	mov	r1, #9
   1b3f0:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b3f4:	movw	r1, #1026	; 0x402
   1b3f8:	and	r1, r8, r1
   1b3fc:	cmp	r1, #2
   1b400:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b404:	mov	r1, #18
   1b408:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b40c:	tst	r8, #524288	; 0x80000
   1b410:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b414:	mov	r1, #6
   1b418:	b	1b350 <__assert_fail@plt+0x9ea0>
   1b41c:	tst	r8, #524288	; 0x80000
   1b420:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b424:	mov	r1, #9
   1b428:	b	1b350 <__assert_fail@plt+0x9ea0>
   1b42c:	movw	r1, #1026	; 0x402
   1b430:	and	r1, r8, r1
   1b434:	cmp	r1, #2
   1b438:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b43c:	mov	r1, #19
   1b440:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b444:	tst	r8, #524288	; 0x80000
   1b448:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b44c:	mov	r1, #512	; 0x200
   1b450:	b	1b350 <__assert_fail@plt+0x9ea0>
   1b454:	tst	r8, #524288	; 0x80000
   1b458:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b45c:	mov	r1, #35	; 0x23
   1b460:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b464:	tst	r8, #524288	; 0x80000
   1b468:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b46c:	mov	r1, #33	; 0x21
   1b470:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b474:	tst	r8, #524288	; 0x80000
   1b478:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b47c:	mov	r1, #64	; 0x40
   1b480:	b	1b350 <__assert_fail@plt+0x9ea0>
   1b484:	tst	r8, #524288	; 0x80000
   1b488:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b48c:	mov	r1, #256	; 0x100
   1b490:	b	1b350 <__assert_fail@plt+0x9ea0>
   1b494:	tst	r8, #524288	; 0x80000
   1b498:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b49c:	mov	r1, #34	; 0x22
   1b4a0:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b4a4:	tst	r8, #524288	; 0x80000
   1b4a8:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b4ac:	mov	r1, #32
   1b4b0:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b4b4:	and	r1, r8, #4608	; 0x1200
   1b4b8:	cmp	r1, #512	; 0x200
   1b4bc:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b4c0:	mov	r1, #23
   1b4c4:	b	1b4e4 <__assert_fail@plt+0xa034>
   1b4c8:	tst	r8, #33792	; 0x8400
   1b4cc:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b4d0:	b	1b380 <__assert_fail@plt+0x9ed0>
   1b4d4:	and	r1, r8, #4608	; 0x1200
   1b4d8:	cmp	r1, #512	; 0x200
   1b4dc:	bne	1b4ec <__assert_fail@plt+0xa03c>
   1b4e0:	mov	r1, #24
   1b4e4:	bfi	r0, r1, #0, #8
   1b4e8:	str	r0, [r5]
   1b4ec:	mov	r0, r4
   1b4f0:	sub	sp, fp, #24
   1b4f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b4f8:	cmp	r3, #2
   1b4fc:	blt	1b52c <__assert_fail@plt+0xa07c>
   1b500:	ldr	r3, [r7, #8]
   1b504:	ldr	r4, [r3, r2, lsl #2]
   1b508:	cmn	r4, #1
   1b50c:	beq	1add0 <__assert_fail@plt+0x9920>
   1b510:	ldr	r4, [r7, #28]
   1b514:	add	r6, r6, #2
   1b518:	cmp	r4, r6
   1b51c:	beq	1b52c <__assert_fail@plt+0xa07c>
   1b520:	ldr	r3, [r3, r6, lsl #2]
   1b524:	cmn	r3, #1
   1b528:	beq	1add0 <__assert_fail@plt+0x9920>
   1b52c:	ldrb	r3, [r7, #76]	; 0x4c
   1b530:	mov	r6, r2
   1b534:	cmp	r3, #0
   1b538:	beq	1b544 <__assert_fail@plt+0xa094>
   1b53c:	ldr	r6, [r7, #12]
   1b540:	ldr	r6, [r6, r2, lsl #2]
   1b544:	ldr	r4, [r7, #24]
   1b548:	ldr	ip, [r7]
   1b54c:	cmp	r3, #0
   1b550:	add	r6, r4, r6
   1b554:	add	r6, ip, r6
   1b558:	ldrsb	r6, [r6]
   1b55c:	beq	1add8 <__assert_fail@plt+0x9928>
   1b560:	cmn	r6, #1
   1b564:	ble	1add0 <__assert_fail@plt+0x9920>
   1b568:	b	1add8 <__assert_fail@plt+0x9928>
   1b56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b570:	add	fp, sp, #28
   1b574:	sub	sp, sp, #20
   1b578:	ldr	r4, [fp, #12]
   1b57c:	ldr	r7, [fp, #8]
   1b580:	ldr	sl, [r1]
   1b584:	mov	r6, r2
   1b588:	str	r0, [sp, #12]
   1b58c:	str	r1, [sp, #8]
   1b590:	str	r3, [sp, #16]
   1b594:	str	r4, [sp, #4]
   1b598:	str	r7, [sp]
   1b59c:	bl	1b8c0 <__assert_fail@plt+0xa410>
   1b5a0:	mov	r3, r4
   1b5a4:	mov	r4, r0
   1b5a8:	cmp	r0, #0
   1b5ac:	bne	1b5d8 <__assert_fail@plt+0xa128>
   1b5b0:	ldr	r0, [r3]
   1b5b4:	cmp	r0, #0
   1b5b8:	beq	1b5d8 <__assert_fail@plt+0xa128>
   1b5bc:	b	1b8a8 <__assert_fail@plt+0xa3f8>
   1b5c0:	cmp	r4, #0
   1b5c4:	cmpne	r5, #0
   1b5c8:	bne	1b63c <__assert_fail@plt+0xa18c>
   1b5cc:	cmp	r4, #0
   1b5d0:	mov	r7, r8
   1b5d4:	moveq	r4, r5
   1b5d8:	ldrb	r0, [r6, #4]
   1b5dc:	orr	r1, r0, #8
   1b5e0:	cmp	r1, #10
   1b5e4:	beq	1b8ac <__assert_fail@plt+0xa3fc>
   1b5e8:	cmp	r7, #0
   1b5ec:	beq	1b5f8 <__assert_fail@plt+0xa148>
   1b5f0:	cmp	r0, #9
   1b5f4:	beq	1b8ac <__assert_fail@plt+0xa3fc>
   1b5f8:	str	r3, [sp, #4]
   1b5fc:	mov	r9, r3
   1b600:	ldr	r0, [sp, #12]
   1b604:	ldr	r1, [sp, #8]
   1b608:	ldr	r3, [sp, #16]
   1b60c:	mov	r2, r6
   1b610:	mov	r8, r7
   1b614:	str	r7, [sp]
   1b618:	bl	1b8c0 <__assert_fail@plt+0xa410>
   1b61c:	mov	r3, r9
   1b620:	mov	r5, r0
   1b624:	cmp	r0, #0
   1b628:	bne	1b5c0 <__assert_fail@plt+0xa110>
   1b62c:	ldr	r0, [r3]
   1b630:	cmp	r0, #0
   1b634:	beq	1b5c0 <__assert_fail@plt+0xa110>
   1b638:	b	1b6c0 <__assert_fail@plt+0xa210>
   1b63c:	ldr	r1, [sl, #64]	; 0x40
   1b640:	cmp	r1, #31
   1b644:	beq	1b694 <__assert_fail@plt+0xa1e4>
   1b648:	ldr	r0, [sl, #56]	; 0x38
   1b64c:	add	r0, r0, r1, lsl #5
   1b650:	add	r2, r1, #1
   1b654:	mov	r1, #0
   1b658:	mov	r7, r8
   1b65c:	str	r2, [sl, #64]	; 0x40
   1b660:	str	r1, [r0, #4]!
   1b664:	stmib	r0, {r4, r5}
   1b668:	str	r1, [r0, #12]
   1b66c:	str	r1, [r0, #16]
   1b670:	str	r1, [r0, #20]
   1b674:	mov	r1, #16
   1b678:	str	r1, [r0, #24]
   1b67c:	mvn	r1, #0
   1b680:	str	r1, [r0, #28]
   1b684:	str	r0, [r4]
   1b688:	str	r0, [r5]
   1b68c:	mov	r4, r0
   1b690:	b	1b5d8 <__assert_fail@plt+0xa128>
   1b694:	mov	r0, #996	; 0x3e4
   1b698:	bl	29054 <__assert_fail@plt+0x17ba4>
   1b69c:	cmp	r0, #0
   1b6a0:	beq	1b764 <__assert_fail@plt+0xa2b4>
   1b6a4:	ldr	r1, [sl, #56]	; 0x38
   1b6a8:	mov	r3, r9
   1b6ac:	str	r1, [r0]
   1b6b0:	mov	r1, #0
   1b6b4:	str	r1, [sl, #64]	; 0x40
   1b6b8:	str	r0, [sl, #56]	; 0x38
   1b6bc:	b	1b64c <__assert_fail@plt+0xa19c>
   1b6c0:	cmp	r4, #0
   1b6c4:	beq	1b8a8 <__assert_fail@plt+0xa3f8>
   1b6c8:	movw	r5, #255	; 0xff
   1b6cc:	movt	r5, #4
   1b6d0:	mov	r6, r4
   1b6d4:	ldr	r4, [r4, #4]
   1b6d8:	cmp	r4, #0
   1b6dc:	bne	1b6d0 <__assert_fail@plt+0xa220>
   1b6e0:	ldr	r4, [r6, #8]
   1b6e4:	cmp	r4, #0
   1b6e8:	bne	1b6d0 <__assert_fail@plt+0xa220>
   1b6ec:	ldr	r0, [r6, #24]
   1b6f0:	and	r0, r0, r5
   1b6f4:	cmp	r0, #3
   1b6f8:	beq	1b72c <__assert_fail@plt+0xa27c>
   1b6fc:	cmp	r0, #6
   1b700:	bne	1b738 <__assert_fail@plt+0xa288>
   1b704:	ldr	r4, [r6, #20]
   1b708:	ldr	r0, [r4]
   1b70c:	bl	29220 <__assert_fail@plt+0x17d70>
   1b710:	ldr	r0, [r4, #4]
   1b714:	bl	29220 <__assert_fail@plt+0x17d70>
   1b718:	ldr	r0, [r4, #8]
   1b71c:	bl	29220 <__assert_fail@plt+0x17d70>
   1b720:	ldr	r0, [r4, #12]
   1b724:	bl	29220 <__assert_fail@plt+0x17d70>
   1b728:	b	1b730 <__assert_fail@plt+0xa280>
   1b72c:	ldr	r4, [r6, #20]
   1b730:	mov	r0, r4
   1b734:	bl	29220 <__assert_fail@plt+0x17d70>
   1b738:	ldr	r0, [r6]
   1b73c:	cmp	r0, #0
   1b740:	beq	1b8a8 <__assert_fail@plt+0xa3f8>
   1b744:	ldr	r4, [r0, #8]
   1b748:	cmp	r4, r6
   1b74c:	mov	r6, r0
   1b750:	beq	1b6ec <__assert_fail@plt+0xa23c>
   1b754:	cmp	r4, #0
   1b758:	mov	r6, r0
   1b75c:	beq	1b6ec <__assert_fail@plt+0xa23c>
   1b760:	b	1b6d0 <__assert_fail@plt+0xa220>
   1b764:	movw	r6, #255	; 0xff
   1b768:	mov	r1, r9
   1b76c:	movt	r6, #4
   1b770:	mov	r7, r5
   1b774:	ldr	r5, [r5, #4]
   1b778:	cmp	r5, #0
   1b77c:	bne	1b770 <__assert_fail@plt+0xa2c0>
   1b780:	ldr	r5, [r7, #8]
   1b784:	cmp	r5, #0
   1b788:	bne	1b770 <__assert_fail@plt+0xa2c0>
   1b78c:	ldr	r0, [r7, #24]
   1b790:	and	r0, r0, r6
   1b794:	cmp	r0, #3
   1b798:	beq	1b7cc <__assert_fail@plt+0xa31c>
   1b79c:	cmp	r0, #6
   1b7a0:	bne	1b7dc <__assert_fail@plt+0xa32c>
   1b7a4:	ldr	r5, [r7, #20]
   1b7a8:	ldr	r0, [r5]
   1b7ac:	bl	29220 <__assert_fail@plt+0x17d70>
   1b7b0:	ldr	r0, [r5, #4]
   1b7b4:	bl	29220 <__assert_fail@plt+0x17d70>
   1b7b8:	ldr	r0, [r5, #8]
   1b7bc:	bl	29220 <__assert_fail@plt+0x17d70>
   1b7c0:	ldr	r0, [r5, #12]
   1b7c4:	bl	29220 <__assert_fail@plt+0x17d70>
   1b7c8:	b	1b7d0 <__assert_fail@plt+0xa320>
   1b7cc:	ldr	r5, [r7, #20]
   1b7d0:	mov	r0, r5
   1b7d4:	bl	29220 <__assert_fail@plt+0x17d70>
   1b7d8:	mov	r1, r9
   1b7dc:	ldr	r0, [r7]
   1b7e0:	cmp	r0, #0
   1b7e4:	beq	1b808 <__assert_fail@plt+0xa358>
   1b7e8:	ldr	r5, [r0, #8]
   1b7ec:	cmp	r5, r7
   1b7f0:	mov	r7, r0
   1b7f4:	beq	1b78c <__assert_fail@plt+0xa2dc>
   1b7f8:	cmp	r5, #0
   1b7fc:	mov	r7, r0
   1b800:	beq	1b78c <__assert_fail@plt+0xa2dc>
   1b804:	b	1b770 <__assert_fail@plt+0xa2c0>
   1b808:	mov	r5, r4
   1b80c:	ldr	r4, [r4, #4]
   1b810:	cmp	r4, #0
   1b814:	bne	1b808 <__assert_fail@plt+0xa358>
   1b818:	ldr	r4, [r5, #8]
   1b81c:	cmp	r4, #0
   1b820:	bne	1b808 <__assert_fail@plt+0xa358>
   1b824:	ldr	r0, [r5, #24]
   1b828:	and	r0, r0, r6
   1b82c:	cmp	r0, #3
   1b830:	beq	1b864 <__assert_fail@plt+0xa3b4>
   1b834:	cmp	r0, #6
   1b838:	bne	1b874 <__assert_fail@plt+0xa3c4>
   1b83c:	ldr	r4, [r5, #20]
   1b840:	ldr	r0, [r4]
   1b844:	bl	29220 <__assert_fail@plt+0x17d70>
   1b848:	ldr	r0, [r4, #4]
   1b84c:	bl	29220 <__assert_fail@plt+0x17d70>
   1b850:	ldr	r0, [r4, #8]
   1b854:	bl	29220 <__assert_fail@plt+0x17d70>
   1b858:	ldr	r0, [r4, #12]
   1b85c:	bl	29220 <__assert_fail@plt+0x17d70>
   1b860:	b	1b868 <__assert_fail@plt+0xa3b8>
   1b864:	ldr	r4, [r5, #20]
   1b868:	mov	r0, r4
   1b86c:	bl	29220 <__assert_fail@plt+0x17d70>
   1b870:	mov	r1, r9
   1b874:	ldr	r0, [r5]
   1b878:	cmp	r0, #0
   1b87c:	beq	1b8a0 <__assert_fail@plt+0xa3f0>
   1b880:	ldr	r4, [r0, #8]
   1b884:	cmp	r4, r5
   1b888:	mov	r5, r0
   1b88c:	beq	1b824 <__assert_fail@plt+0xa374>
   1b890:	cmp	r4, #0
   1b894:	mov	r5, r0
   1b898:	beq	1b824 <__assert_fail@plt+0xa374>
   1b89c:	b	1b808 <__assert_fail@plt+0xa358>
   1b8a0:	mov	r0, #12
   1b8a4:	str	r0, [r1]
   1b8a8:	mov	r4, #0
   1b8ac:	mov	r0, r4
   1b8b0:	sub	sp, fp, #28
   1b8b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8b8:	nop	{0}
   1b8bc:	nop	{0}
   1b8c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8c4:	add	fp, sp, #28
   1b8c8:	sub	sp, sp, #156	; 0x9c
   1b8cc:	mov	r5, r0
   1b8d0:	mov	lr, r2
   1b8d4:	ldr	r0, [r2, #4]
   1b8d8:	ldr	r2, [fp, #12]
   1b8dc:	mov	r7, r1
   1b8e0:	mvn	r1, #0
   1b8e4:	mov	r9, #0
   1b8e8:	mov	ip, r3
   1b8ec:	ldr	sl, [r7]
   1b8f0:	str	r2, [sp, #20]
   1b8f4:	uxtab	r1, r1, r0
   1b8f8:	ldr	r6, [fp, #8]
   1b8fc:	add	r2, pc, #12
   1b900:	str	r5, [sp, #28]
   1b904:	str	r3, [sp, #48]	; 0x30
   1b908:	str	lr, [sp, #44]	; 0x2c
   1b90c:	ldr	pc, [r2, r1, lsl #2]
   1b910:	andeq	fp, r1, r8, ror #23
   1b914:	andeq	sp, r1, r8, asr #15
   1b918:	andeq	sp, r1, r0, ror #28
   1b91c:	andeq	fp, r1, r8, lsr #27
   1b920:	andeq	fp, r1, r8, lsr #28
   1b924:	andeq	sp, r1, r0, ror #28
   1b928:	andeq	sp, r1, r0, ror #28
   1b92c:	muleq	r1, r0, lr
   1b930:	andeq	fp, r1, r0, asr #19
   1b934:	andeq	sp, r1, r8, asr #15
   1b938:			; <UNDEFINED> instruction: 0x0001b9b0
   1b93c:			; <UNDEFINED> instruction: 0x0001bab4
   1b940:	andeq	sp, r1, r0, ror #28
   1b944:	andeq	sp, r1, r0, ror #28
   1b948:	andeq	sp, r1, r0, ror #28
   1b94c:	andeq	sp, r1, r0, ror #28
   1b950:	andeq	sp, r1, r0, ror #28
   1b954:			; <UNDEFINED> instruction: 0x0001b9b0
   1b958:			; <UNDEFINED> instruction: 0x0001b9b0
   1b95c:	andeq	fp, r1, r4, ror fp
   1b960:	andeq	sp, r1, r0, ror #28
   1b964:	andeq	sp, r1, r0, ror #28
   1b968:	andeq	fp, r1, ip, lsl #30
   1b96c:	ldrdeq	fp, [r1], -r0
   1b970:	andeq	sp, r1, r0, ror #28
   1b974:	andeq	sp, r1, r0, ror #28
   1b978:	andeq	sp, r1, r0, ror #28
   1b97c:	andeq	sp, r1, r0, ror #28
   1b980:	andeq	sp, r1, r0, ror #28
   1b984:	andeq	sp, r1, r0, ror #28
   1b988:	andeq	sp, r1, r0, ror #28
   1b98c:	andeq	fp, r1, ip, lsr #20
   1b990:	andeq	fp, r1, ip, lsr #20
   1b994:	andeq	fp, r1, ip, asr #20
   1b998:	andeq	fp, r1, ip, asr #20
   1b99c:	andeq	fp, r1, ip, lsl pc
   1b9a0:	andeq	r0, r0, r0
   1b9a4:	mvnseq	r0, #0
   1b9a8:			; <UNDEFINED> instruction: 0x87fffffe
   1b9ac:			; <UNDEFINED> instruction: 0x07fffffe
   1b9b0:	tst	ip, #32
   1b9b4:	bne	1bf14 <__assert_fail@plt+0xaa64>
   1b9b8:	tst	ip, #16
   1b9bc:	bne	1bf2c <__assert_fail@plt+0xaa7c>
   1b9c0:	tst	ip, #131072	; 0x20000
   1b9c4:	uxtbeq	r1, r0
   1b9c8:	cmpeq	r1, #9
   1b9cc:	beq	1bf6c <__assert_fail@plt+0xaabc>
   1b9d0:	mov	r1, #1
   1b9d4:	bfi	r0, r1, #0, #8
   1b9d8:	str	r0, [lr, #4]
   1b9dc:	ldr	r1, [sl, #64]	; 0x40
   1b9e0:	cmp	r1, #31
   1b9e4:	beq	1d974 <__assert_fail@plt+0xc4c4>
   1b9e8:	ldr	r0, [sl, #56]	; 0x38
   1b9ec:	add	r7, r0, r1, lsl #5
   1b9f0:	add	r2, r1, #1
   1b9f4:	mov	r0, #0
   1b9f8:	mvn	r3, #0
   1b9fc:	str	r2, [sl, #64]	; 0x40
   1ba00:	str	r0, [r7, #4]!
   1ba04:	str	r0, [r7, #8]
   1ba08:	str	r0, [r7, #4]
   1ba0c:	ldm	lr, {r1, r2}
   1ba10:	str	r3, [r7, #28]
   1ba14:	str	r0, [r7, #16]
   1ba18:	str	r0, [r7, #12]
   1ba1c:	bic	r0, r2, #786432	; 0xc0000
   1ba20:	str	r1, [r7, #20]
   1ba24:	str	r0, [r7, #24]
   1ba28:	b	1c950 <__assert_fail@plt+0xb4a0>
   1ba2c:	mvn	r2, #32
   1ba30:	ldr	r1, [r5, #64]	; 0x40
   1ba34:	movw	r3, #41009	; 0xa031
   1ba38:	uxtab	r0, r2, r0
   1ba3c:	movw	r2, #42510	; 0xa60e
   1ba40:	movt	r3, #2
   1ba44:	movt	r2, #2
   1ba48:	b	1ba68 <__assert_fail@plt+0xa5b8>
   1ba4c:	mvn	r2, #34	; 0x22
   1ba50:	ldr	r1, [r5, #64]	; 0x40
   1ba54:	movw	r3, #41350	; 0xa186
   1ba58:	uxtab	r0, r2, r0
   1ba5c:	movw	r2, #42516	; 0xa614
   1ba60:	movt	r3, #2
   1ba64:	movt	r2, #2
   1ba68:	clz	r0, r0
   1ba6c:	lsr	r0, r0, #5
   1ba70:	str	r0, [sp]
   1ba74:	ldr	r4, [sp, #20]
   1ba78:	str	r4, [sp, #4]
   1ba7c:	mov	r0, sl
   1ba80:	bl	1de60 <__assert_fail@plt+0xc9b0>
   1ba84:	mov	r7, r0
   1ba88:	cmp	r0, #0
   1ba8c:	bne	1baa8 <__assert_fail@plt+0xa5f8>
   1ba90:	ldr	r0, [r4]
   1ba94:	cmp	r0, #0
   1ba98:	ldr	ip, [sp, #48]	; 0x30
   1ba9c:	ldr	lr, [sp, #44]	; 0x2c
   1baa0:	beq	1c950 <__assert_fail@plt+0xb4a0>
   1baa4:	b	1d7c8 <__assert_fail@plt+0xc318>
   1baa8:	ldr	ip, [sp, #48]	; 0x30
   1baac:	ldr	lr, [sp, #44]	; 0x2c
   1bab0:	b	1c950 <__assert_fail@plt+0xb4a0>
   1bab4:	ldr	r0, [lr]
   1bab8:	movw	r1, #783	; 0x30f
   1babc:	tst	r0, r1
   1bac0:	beq	1bb08 <__assert_fail@plt+0xa658>
   1bac4:	ldrb	r0, [sl, #88]	; 0x58
   1bac8:	tst	r0, #16
   1bacc:	bne	1bb04 <__assert_fail@plt+0xa654>
   1bad0:	orr	r1, r0, #16
   1bad4:	tst	r0, #8
   1bad8:	strb	r1, [sl, #88]	; 0x58
   1badc:	bne	1dc78 <__assert_fail@plt+0xc7c8>
   1bae0:	sub	r1, pc, #328	; 0x148
   1bae4:	tst	r0, #4
   1bae8:	vld1.64	{d16-d17}, [r1 :128]
   1baec:	add	r1, sl, #96	; 0x60
   1baf0:	vst1.32	{d16-d17}, [r1]
   1baf4:	beq	1dc84 <__assert_fail@plt+0xc7d4>
   1baf8:	vmov.i32	q8, #0	; 0x00000000
   1bafc:	add	r0, sl, #112	; 0x70
   1bb00:	vst1.32	{d16-d17}, [r0]
   1bb04:	ldr	r0, [lr]
   1bb08:	cmp	r0, #512	; 0x200
   1bb0c:	beq	1c750 <__assert_fail@plt+0xb2a0>
   1bb10:	cmp	r0, #256	; 0x100
   1bb14:	bne	1c85c <__assert_fail@plt+0xb3ac>
   1bb18:	mov	r0, #6
   1bb1c:	str	r0, [lr]
   1bb20:	ldr	r1, [sl, #64]	; 0x40
   1bb24:	cmp	r1, #31
   1bb28:	beq	1dbd8 <__assert_fail@plt+0xc728>
   1bb2c:	ldr	r0, [sl, #56]	; 0x38
   1bb30:	add	r4, r0, r1, lsl #5
   1bb34:	add	r2, r1, #1
   1bb38:	mov	r0, #0
   1bb3c:	mvn	r3, #0
   1bb40:	str	r2, [sl, #64]	; 0x40
   1bb44:	str	r0, [r4, #4]!
   1bb48:	str	r0, [r4, #8]
   1bb4c:	str	r0, [r4, #4]
   1bb50:	ldm	lr, {r1, r2}
   1bb54:	str	r3, [r4, #28]
   1bb58:	str	r0, [r4, #16]
   1bb5c:	str	r0, [r4, #12]
   1bb60:	bic	r0, r2, #786432	; 0xc0000
   1bb64:	str	r1, [r4, #20]
   1bb68:	str	r0, [r4, #24]
   1bb6c:	mov	r0, #9
   1bb70:	b	1c7a8 <__assert_fail@plt+0xb2f8>
   1bb74:	mov	r9, #0
   1bb78:	mov	r0, #32
   1bb7c:	mov	r1, #1
   1bb80:	str	r9, [fp, #-32]	; 0xffffffe0
   1bb84:	bl	29000 <__assert_fail@plt+0x17b50>
   1bb88:	mov	r8, r0
   1bb8c:	mov	r0, #40	; 0x28
   1bb90:	mov	r1, #1
   1bb94:	bl	29000 <__assert_fail@plt+0x17b50>
   1bb98:	mov	r7, r0
   1bb9c:	cmp	r8, #0
   1bba0:	cmpne	r7, #0
   1bba4:	beq	1d9d4 <__assert_fail@plt+0xc524>
   1bba8:	ldr	r6, [sp, #44]	; 0x2c
   1bbac:	ldr	r4, [sp, #48]	; 0x30
   1bbb0:	mov	r1, r5
   1bbb4:	mov	r0, r6
   1bbb8:	mov	r2, r4
   1bbbc:	bl	1e21c <__assert_fail@plt+0xcd6c>
   1bbc0:	mov	r3, r0
   1bbc4:	ldr	r0, [r6, #4]
   1bbc8:	str	r7, [sp, #60]	; 0x3c
   1bbcc:	uxtb	r1, r0
   1bbd0:	cmp	r1, #25
   1bbd4:	beq	1bf74 <__assert_fail@plt+0xaac4>
   1bbd8:	cmp	r1, #2
   1bbdc:	beq	1d9c0 <__assert_fail@plt+0xc510>
   1bbe0:	mov	r1, #0
   1bbe4:	b	1bfcc <__assert_fail@plt+0xab1c>
   1bbe8:	ldr	r1, [sl, #64]	; 0x40
   1bbec:	cmp	r1, #31
   1bbf0:	beq	1d9e8 <__assert_fail@plt+0xc538>
   1bbf4:	ldr	r0, [sl, #56]	; 0x38
   1bbf8:	add	r4, r0, r1, lsl #5
   1bbfc:	add	r2, r1, #1
   1bc00:	mov	r0, #0
   1bc04:	mvn	r3, #0
   1bc08:	str	r2, [sl, #64]	; 0x40
   1bc0c:	str	r0, [r4, #4]!
   1bc10:	str	r0, [r4, #8]
   1bc14:	str	r0, [r4, #4]
   1bc18:	ldm	lr, {r1, r2}
   1bc1c:	str	r3, [r4, #28]
   1bc20:	str	r0, [r4, #16]
   1bc24:	str	r0, [r4, #12]
   1bc28:	bic	r0, r2, #786432	; 0xc0000
   1bc2c:	str	r1, [r4, #20]
   1bc30:	str	r0, [r4, #24]
   1bc34:	ldr	r0, [sl, #92]	; 0x5c
   1bc38:	cmp	r0, #2
   1bc3c:	blt	1bf24 <__assert_fail@plt+0xaa74>
   1bc40:	ldr	r0, [r5, #40]	; 0x28
   1bc44:	ldr	r1, [r5, #56]	; 0x38
   1bc48:	cmp	r1, r0
   1bc4c:	ble	1bf24 <__assert_fail@plt+0xaa74>
   1bc50:	mov	r8, #0
   1bc54:	mvn	r9, #0
   1bc58:	ldr	r1, [r5, #28]
   1bc5c:	cmp	r0, r1
   1bc60:	beq	1bf24 <__assert_fail@plt+0xaa74>
   1bc64:	ldr	r1, [r5, #8]
   1bc68:	ldr	r0, [r1, r0, lsl #2]
   1bc6c:	cmn	r0, #1
   1bc70:	bne	1bf24 <__assert_fail@plt+0xaa74>
   1bc74:	mov	r0, lr
   1bc78:	mov	r1, r5
   1bc7c:	mov	r2, ip
   1bc80:	bl	1ad30 <__assert_fail@plt+0x9880>
   1bc84:	ldr	r1, [r5, #40]	; 0x28
   1bc88:	add	r0, r1, r0
   1bc8c:	str	r0, [r5, #40]	; 0x28
   1bc90:	ldr	r1, [sl, #64]	; 0x40
   1bc94:	cmp	r1, #31
   1bc98:	beq	1bd40 <__assert_fail@plt+0xa890>
   1bc9c:	ldr	r0, [sl, #56]	; 0x38
   1bca0:	add	r6, r0, r1, lsl #5
   1bca4:	ldr	lr, [sp, #44]	; 0x2c
   1bca8:	add	r2, r1, #1
   1bcac:	ldr	ip, [sp, #48]	; 0x30
   1bcb0:	str	r2, [sl, #64]	; 0x40
   1bcb4:	str	r8, [r6, #4]!
   1bcb8:	str	r8, [r6, #8]
   1bcbc:	str	r8, [r6, #4]
   1bcc0:	ldm	lr, {r0, r1}
   1bcc4:	str	r9, [r6, #28]
   1bcc8:	str	r8, [r6, #16]
   1bccc:	str	r8, [r6, #12]
   1bcd0:	str	r0, [r6, #20]
   1bcd4:	bic	r0, r1, #786432	; 0xc0000
   1bcd8:	str	r0, [r6, #24]
   1bcdc:	ldr	r1, [sl, #64]	; 0x40
   1bce0:	cmp	r1, #31
   1bce4:	beq	1bd68 <__assert_fail@plt+0xa8b8>
   1bce8:	ldr	r0, [sl, #56]	; 0x38
   1bcec:	add	r7, r0, r1, lsl #5
   1bcf0:	add	r2, r1, #1
   1bcf4:	mov	r0, #16
   1bcf8:	cmp	r6, #0
   1bcfc:	str	r2, [sl, #64]	; 0x40
   1bd00:	str	r8, [r7, #4]!
   1bd04:	stmib	r7, {r4, r6, r8}
   1bd08:	str	r8, [r7, #16]
   1bd0c:	str	r8, [r7, #20]
   1bd10:	str	r0, [r7, #24]
   1bd14:	str	r9, [r7, #28]
   1bd18:	str	r7, [r4]
   1bd1c:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1bd20:	ldr	r5, [sp, #28]
   1bd24:	str	r7, [r6]
   1bd28:	mov	r4, r7
   1bd2c:	ldr	r0, [r5, #40]	; 0x28
   1bd30:	ldr	r1, [r5, #56]	; 0x38
   1bd34:	cmp	r1, r0
   1bd38:	bgt	1bc58 <__assert_fail@plt+0xa7a8>
   1bd3c:	b	1c950 <__assert_fail@plt+0xb4a0>
   1bd40:	mov	r0, #996	; 0x3e4
   1bd44:	bl	29054 <__assert_fail@plt+0x17ba4>
   1bd48:	cmp	r0, #0
   1bd4c:	beq	1bd98 <__assert_fail@plt+0xa8e8>
   1bd50:	ldr	r1, [sl, #56]	; 0x38
   1bd54:	str	r1, [r0]
   1bd58:	mov	r1, #0
   1bd5c:	str	r1, [sl, #64]	; 0x40
   1bd60:	str	r0, [sl, #56]	; 0x38
   1bd64:	b	1bca0 <__assert_fail@plt+0xa7f0>
   1bd68:	mov	r0, #996	; 0x3e4
   1bd6c:	bl	29054 <__assert_fail@plt+0x17ba4>
   1bd70:	ldr	lr, [sp, #44]	; 0x2c
   1bd74:	ldr	ip, [sp, #48]	; 0x30
   1bd78:	cmp	r0, #0
   1bd7c:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1bd80:	ldr	r1, [sl, #56]	; 0x38
   1bd84:	str	r1, [r0]
   1bd88:	mov	r1, #0
   1bd8c:	str	r1, [sl, #64]	; 0x40
   1bd90:	str	r0, [sl, #56]	; 0x38
   1bd94:	b	1bcec <__assert_fail@plt+0xa83c>
   1bd98:	ldr	ip, [sp, #48]	; 0x30
   1bd9c:	ldr	lr, [sp, #44]	; 0x2c
   1bda0:	mov	r6, #0
   1bda4:	b	1bcdc <__assert_fail@plt+0xa82c>
   1bda8:	ldr	r0, [lr]
   1bdac:	ldr	r2, [sl, #84]	; 0x54
   1bdb0:	mov	r1, #1
   1bdb4:	tst	r2, r1, lsl r0
   1bdb8:	beq	1da1c <__assert_fail@plt+0xc56c>
   1bdbc:	lsl	r0, r1, r0
   1bdc0:	ldr	r1, [sl, #64]	; 0x40
   1bdc4:	ldr	r2, [sl, #80]	; 0x50
   1bdc8:	orr	r0, r2, r0
   1bdcc:	cmp	r1, #31
   1bdd0:	str	r0, [sl, #80]	; 0x50
   1bdd4:	beq	1da58 <__assert_fail@plt+0xc5a8>
   1bdd8:	ldr	r0, [sl, #56]	; 0x38
   1bddc:	add	r7, r0, r1, lsl #5
   1bde0:	add	r2, r1, #1
   1bde4:	mov	r0, #0
   1bde8:	mvn	r3, #0
   1bdec:	str	r2, [sl, #64]	; 0x40
   1bdf0:	str	r0, [r7, #4]!
   1bdf4:	str	r0, [r7, #8]
   1bdf8:	str	r0, [r7, #4]
   1bdfc:	ldm	lr, {r1, r2}
   1be00:	str	r3, [r7, #28]
   1be04:	str	r0, [r7, #16]
   1be08:	str	r0, [r7, #12]
   1be0c:	bic	r0, r2, #786432	; 0xc0000
   1be10:	str	r1, [r7, #20]
   1be14:	str	r0, [r7, #24]
   1be18:	ldr	r0, [sl, #76]	; 0x4c
   1be1c:	add	r0, r0, #1
   1be20:	str	r0, [sl, #76]	; 0x4c
   1be24:	b	1be80 <__assert_fail@plt+0xa9d0>
   1be28:	ldr	r1, [sl, #64]	; 0x40
   1be2c:	cmp	r1, #31
   1be30:	beq	1da24 <__assert_fail@plt+0xc574>
   1be34:	ldr	r0, [sl, #56]	; 0x38
   1be38:	add	r7, r0, r1, lsl #5
   1be3c:	add	r2, r1, #1
   1be40:	mov	r0, #0
   1be44:	mvn	r3, #0
   1be48:	str	r2, [sl, #64]	; 0x40
   1be4c:	str	r0, [r7, #4]!
   1be50:	str	r0, [r7, #8]
   1be54:	str	r0, [r7, #4]
   1be58:	ldm	lr, {r1, r2}
   1be5c:	str	r3, [r7, #28]
   1be60:	str	r0, [r7, #16]
   1be64:	str	r0, [r7, #12]
   1be68:	bic	r0, r2, #786432	; 0xc0000
   1be6c:	str	r1, [r7, #20]
   1be70:	str	r0, [r7, #24]
   1be74:	ldr	r0, [sl, #92]	; 0x5c
   1be78:	cmp	r0, #2
   1be7c:	blt	1c950 <__assert_fail@plt+0xb4a0>
   1be80:	ldrb	r0, [sl, #88]	; 0x58
   1be84:	orr	r0, r0, #2
   1be88:	strb	r0, [sl, #88]	; 0x58
   1be8c:	b	1c950 <__assert_fail@plt+0xb4a0>
   1be90:	ldr	r4, [r7, #24]
   1be94:	orr	r2, ip, #8388608	; 0x800000
   1be98:	mov	r1, r5
   1be9c:	add	r0, r4, #1
   1bea0:	str	r0, [r7, #24]
   1bea4:	mov	r0, lr
   1bea8:	bl	1ad30 <__assert_fail@plt+0x9880>
   1beac:	ldr	r1, [r5, #40]	; 0x28
   1beb0:	ldr	lr, [sp, #44]	; 0x2c
   1beb4:	mov	r9, #0
   1beb8:	add	r0, r1, r0
   1bebc:	str	r0, [r5, #40]	; 0x28
   1bec0:	ldrb	r0, [lr, #4]
   1bec4:	cmp	r0, #9
   1bec8:	beq	1c8e0 <__assert_fail@plt+0xb430>
   1becc:	add	r0, r6, #1
   1bed0:	mov	r1, r7
   1bed4:	mov	r2, lr
   1bed8:	mov	r7, lr
   1bedc:	str	r0, [sp]
   1bee0:	mov	r0, r5
   1bee4:	ldr	r6, [sp, #20]
   1bee8:	str	r6, [sp, #4]
   1beec:	ldr	r3, [sp, #48]	; 0x30
   1bef0:	bl	1aac4 <__assert_fail@plt+0x9614>
   1bef4:	mov	r9, r0
   1bef8:	ldr	r0, [r6]
   1befc:	cmp	r0, #0
   1bf00:	beq	1c8d0 <__assert_fail@plt+0xb420>
   1bf04:	mov	r9, #0
   1bf08:	b	1d7c8 <__assert_fail@plt+0xc318>
   1bf0c:	tst	ip, #16777216	; 0x1000000
   1bf10:	beq	1b9b0 <__assert_fail@plt+0xa500>
   1bf14:	mov	r0, #13
   1bf18:	b	1c854 <__assert_fail@plt+0xb3a4>
   1bf1c:	mov	r0, #5
   1bf20:	b	1c854 <__assert_fail@plt+0xb3a4>
   1bf24:	mov	r7, r4
   1bf28:	b	1c950 <__assert_fail@plt+0xb4a0>
   1bf2c:	mov	r0, lr
   1bf30:	mov	r1, r5
   1bf34:	mov	r2, ip
   1bf38:	mov	r4, ip
   1bf3c:	mov	r6, lr
   1bf40:	bl	1ad30 <__assert_fail@plt+0x9880>
   1bf44:	ldr	r1, [r5, #40]	; 0x28
   1bf48:	mov	r2, r6
   1bf4c:	mov	r3, r4
   1bf50:	add	r0, r1, r0
   1bf54:	mov	r1, r7
   1bf58:	str	r0, [r5, #40]	; 0x28
   1bf5c:	mov	r0, r5
   1bf60:	sub	sp, fp, #28
   1bf64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf68:	b	1b8c0 <__assert_fail@plt+0xa410>
   1bf6c:	mov	r0, #16
   1bf70:	b	1c854 <__assert_fail@plt+0xb3a4>
   1bf74:	ldrb	r0, [r7, #16]
   1bf78:	tst	r4, #256	; 0x100
   1bf7c:	orr	r0, r0, #1
   1bf80:	strb	r0, [r7, #16]
   1bf84:	beq	1bf94 <__assert_fail@plt+0xaae4>
   1bf88:	ldr	r0, [r8]
   1bf8c:	orr	r0, r0, #1024	; 0x400
   1bf90:	str	r0, [r8]
   1bf94:	ldr	r0, [r5, #40]	; 0x28
   1bf98:	mov	r1, r5
   1bf9c:	mov	r2, r4
   1bfa0:	add	r0, r0, r3
   1bfa4:	str	r0, [r5, #40]	; 0x28
   1bfa8:	mov	r0, r6
   1bfac:	bl	1e21c <__assert_fail@plt+0xcd6c>
   1bfb0:	ldr	r6, [sp, #44]	; 0x2c
   1bfb4:	mov	r3, r0
   1bfb8:	ldr	r0, [r6, #4]
   1bfbc:	uxtb	r1, r0
   1bfc0:	cmp	r1, #2
   1bfc4:	beq	1d9c0 <__assert_fail@plt+0xc510>
   1bfc8:	mov	r1, #1
   1bfcc:	str	r1, [sp, #56]	; 0x38
   1bfd0:	uxtb	r1, r0
   1bfd4:	mov	r2, r6
   1bfd8:	ldr	r7, [sp, #48]	; 0x30
   1bfdc:	cmp	r1, #21
   1bfe0:	moveq	r1, #1
   1bfe4:	bfieq	r0, r1, #0, #8
   1bfe8:	mov	r1, r5
   1bfec:	streq	r0, [r6, #4]
   1bff0:	sub	r0, fp, #80	; 0x50
   1bff4:	str	r0, [fp, #-36]	; 0xffffffdc
   1bff8:	mov	r0, #3
   1bffc:	str	r0, [fp, #-40]	; 0xffffffd8
   1c000:	mov	r0, #1
   1c004:	str	r7, [sp]
   1c008:	str	r0, [sp, #4]
   1c00c:	sub	r0, fp, #40	; 0x28
   1c010:	bl	1e394 <__assert_fail@plt+0xcee4>
   1c014:	cmp	r0, #0
   1c018:	bne	1d9a8 <__assert_fail@plt+0xc4f8>
   1c01c:	and	r0, r7, #65536	; 0x10000
   1c020:	mov	r2, r7
   1c024:	str	r0, [sp, #40]	; 0x28
   1c028:	mov	r0, #0
   1c02c:	str	r0, [sp, #36]	; 0x24
   1c030:	mov	r0, #0
   1c034:	str	r0, [sp, #32]
   1c038:	ldr	r4, [sp, #44]	; 0x2c
   1c03c:	ldr	r7, [sp, #60]	; 0x3c
   1c040:	mov	r0, r4
   1c044:	mov	r1, r5
   1c048:	bl	1e21c <__assert_fail@plt+0xcd6c>
   1c04c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1c050:	mov	r9, r0
   1c054:	cmp	r6, #2
   1c058:	beq	1c238 <__assert_fail@plt+0xad88>
   1c05c:	cmp	r6, #4
   1c060:	bne	1c0a4 <__assert_fail@plt+0xabf4>
   1c064:	ldr	r5, [sp, #28]
   1c068:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c06c:	mov	r2, r7
   1c070:	sub	r3, fp, #32
   1c074:	ldr	r0, [r5, #64]	; 0x40
   1c078:	str	r1, [sp]
   1c07c:	ldr	r1, [sp, #48]	; 0x30
   1c080:	str	r1, [sp, #4]
   1c084:	mov	r1, r8
   1c088:	bl	1e660 <__assert_fail@plt+0xd1b0>
   1c08c:	ldr	r1, [sp, #20]
   1c090:	ldr	lr, [sp, #44]	; 0x2c
   1c094:	cmp	r0, #0
   1c098:	str	r0, [r1]
   1c09c:	beq	1c280 <__assert_fail@plt+0xadd0>
   1c0a0:	b	1d930 <__assert_fail@plt+0xc480>
   1c0a4:	ldr	r0, [sp, #44]	; 0x2c
   1c0a8:	ldr	r2, [sp, #48]	; 0x30
   1c0ac:	mov	r4, r9
   1c0b0:	mov	r9, #7
   1c0b4:	str	sl, [sp, #52]	; 0x34
   1c0b8:	ldrb	r0, [r0, #4]
   1c0bc:	cmp	r0, #22
   1c0c0:	beq	1c0d0 <__assert_fail@plt+0xac20>
   1c0c4:	cmp	r0, #2
   1c0c8:	bne	1c1ec <__assert_fail@plt+0xad3c>
   1c0cc:	b	1d91c <__assert_fail@plt+0xc46c>
   1c0d0:	ldr	r7, [sp, #28]
   1c0d4:	mov	r5, r4
   1c0d8:	ldr	r0, [r7, #40]	; 0x28
   1c0dc:	mov	r1, r7
   1c0e0:	add	r0, r0, r4
   1c0e4:	str	r0, [r7, #40]	; 0x28
   1c0e8:	add	r0, sp, #64	; 0x40
   1c0ec:	bl	1e21c <__assert_fail@plt+0xcd6c>
   1c0f0:	mov	r3, r0
   1c0f4:	ldrb	r0, [sp, #68]	; 0x44
   1c0f8:	cmp	r0, #21
   1c0fc:	beq	1c1d4 <__assert_fail@plt+0xad24>
   1c100:	ldr	r4, [sp, #48]	; 0x30
   1c104:	cmp	r0, #2
   1c108:	beq	1d91c <__assert_fail@plt+0xc46c>
   1c10c:	mov	r0, #3
   1c110:	str	r8, [sp, #24]
   1c114:	add	r2, sp, #64	; 0x40
   1c118:	str	r0, [fp, #-48]	; 0xffffffd0
   1c11c:	add	r0, sp, #72	; 0x48
   1c120:	str	r0, [fp, #-44]	; 0xffffffd4
   1c124:	mov	r0, #1
   1c128:	str	r4, [sp]
   1c12c:	str	r0, [sp, #4]
   1c130:	sub	r0, fp, #48	; 0x30
   1c134:	ldr	r7, [sp, #28]
   1c138:	mov	r1, r7
   1c13c:	bl	1e394 <__assert_fail@plt+0xcee4>
   1c140:	cmp	r0, #0
   1c144:	bne	1ddcc <__assert_fail@plt+0xc91c>
   1c148:	ldr	r0, [sp, #44]	; 0x2c
   1c14c:	mov	r1, r7
   1c150:	mov	r2, r4
   1c154:	bl	1e21c <__assert_fail@plt+0xcd6c>
   1c158:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1c15c:	mov	r9, #11
   1c160:	str	r0, [sp, #16]
   1c164:	cmp	r8, #2
   1c168:	beq	1d918 <__assert_fail@plt+0xc468>
   1c16c:	cmp	r8, #4
   1c170:	beq	1d918 <__assert_fail@plt+0xc468>
   1c174:	cmp	r6, #3
   1c178:	bne	1c18c <__assert_fail@plt+0xacdc>
   1c17c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c180:	bl	11390 <strlen@plt>
   1c184:	cmp	r0, #1
   1c188:	bhi	1ddd8 <__assert_fail@plt+0xc928>
   1c18c:	cmp	r8, #3
   1c190:	bne	1c1a4 <__assert_fail@plt+0xacf4>
   1c194:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c198:	bl	11390 <strlen@plt>
   1c19c:	cmp	r0, #1
   1c1a0:	bhi	1ddd8 <__assert_fail@plt+0xc928>
   1c1a4:	ldr	lr, [sp, #44]	; 0x2c
   1c1a8:	cmp	r6, #3
   1c1ac:	beq	1c324 <__assert_fail@plt+0xae74>
   1c1b0:	cmp	r6, #0
   1c1b4:	mov	r7, #0
   1c1b8:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1c1bc:	cmp	r8, #3
   1c1c0:	beq	1c334 <__assert_fail@plt+0xae84>
   1c1c4:	cmp	r8, #0
   1c1c8:	mov	sl, #0
   1c1cc:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1c1d0:	b	1c33c <__assert_fail@plt+0xae8c>
   1c1d4:	ldr	r0, [r7, #40]	; 0x28
   1c1d8:	mov	r1, #1
   1c1dc:	sub	r0, r0, r5
   1c1e0:	str	r0, [r7, #40]	; 0x28
   1c1e4:	ldr	r0, [sp, #44]	; 0x2c
   1c1e8:	strb	r1, [r0, #4]
   1c1ec:	add	r0, pc, #12
   1c1f0:	ldr	sl, [sp, #52]	; 0x34
   1c1f4:	ldr	r7, [sp, #60]	; 0x3c
   1c1f8:	mov	r9, r4
   1c1fc:	ldr	pc, [r0, r6, lsl #2]
   1c200:	andeq	ip, r1, r0, lsl r2
   1c204:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c208:	andeq	ip, r1, r8, lsr r2
   1c20c:	andeq	ip, r1, ip, lsl #6
   1c210:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1c214:	mov	r3, #1
   1c218:	ubfx	r1, r0, #5, #3
   1c21c:	and	r0, r0, #31
   1c220:	ldr	r5, [sp, #28]
   1c224:	ldr	lr, [sp, #44]	; 0x2c
   1c228:	ldr	r2, [r8, r1, lsl #2]
   1c22c:	orr	r0, r2, r3, lsl r0
   1c230:	str	r0, [r8, r1, lsl #2]
   1c234:	b	1c280 <__assert_fail@plt+0xadd0>
   1c238:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c23c:	mov	r0, r7
   1c240:	bl	11390 <strlen@plt>
   1c244:	cmp	r0, #1
   1c248:	bne	1db1c <__assert_fail@plt+0xc66c>
   1c24c:	ldrb	r0, [r7]
   1c250:	mov	r3, #1
   1c254:	ubfx	r1, r0, #5, #3
   1c258:	and	r0, r0, #31
   1c25c:	ldr	r2, [r8, r1, lsl #2]
   1c260:	orr	r0, r2, r3, lsl r0
   1c264:	str	r0, [r8, r1, lsl #2]
   1c268:	mov	r1, #0
   1c26c:	ldr	r0, [sp, #20]
   1c270:	ldr	r5, [sp, #28]
   1c274:	ldr	lr, [sp, #44]	; 0x2c
   1c278:	ldr	r7, [sp, #60]	; 0x3c
   1c27c:	str	r1, [r0]
   1c280:	ldrb	r0, [lr, #4]
   1c284:	cmp	r0, #21
   1c288:	beq	1c508 <__assert_fail@plt+0xb058>
   1c28c:	cmp	r0, #2
   1c290:	ldr	r0, [sp, #48]	; 0x30
   1c294:	beq	1d9b4 <__assert_fail@plt+0xc504>
   1c298:	sub	r1, fp, #80	; 0x50
   1c29c:	mov	r2, lr
   1c2a0:	mov	r3, r9
   1c2a4:	mov	r4, lr
   1c2a8:	str	r1, [fp, #-36]	; 0xffffffdc
   1c2ac:	mov	r1, #3
   1c2b0:	str	r1, [fp, #-40]	; 0xffffffd8
   1c2b4:	str	r0, [sp]
   1c2b8:	mov	r0, #0
   1c2bc:	mov	r1, r5
   1c2c0:	str	r0, [sp, #4]
   1c2c4:	sub	r0, fp, #40	; 0x28
   1c2c8:	bl	1e394 <__assert_fail@plt+0xcee4>
   1c2cc:	ldr	r2, [sp, #48]	; 0x30
   1c2d0:	cmp	r0, #0
   1c2d4:	beq	1c040 <__assert_fail@plt+0xab90>
   1c2d8:	b	1d9a8 <__assert_fail@plt+0xc4f8>
   1c2dc:	ldr	r1, [r7, #20]
   1c2e0:	ldr	r0, [sp, #36]	; 0x24
   1c2e4:	cmp	r0, r1
   1c2e8:	beq	1c46c <__assert_fail@plt+0xafbc>
   1c2ec:	ldr	r0, [r7]
   1c2f0:	ldr	r5, [sp, #28]
   1c2f4:	ldr	lr, [sp, #44]	; 0x2c
   1c2f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c2fc:	add	r2, r1, #1
   1c300:	str	r2, [r7, #20]
   1c304:	str	r3, [r0, r1, lsl #2]
   1c308:	b	1c280 <__assert_fail@plt+0xadd0>
   1c30c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c310:	mov	r0, r7
   1c314:	bl	11390 <strlen@plt>
   1c318:	cmp	r0, #1
   1c31c:	beq	1c24c <__assert_fail@plt+0xad9c>
   1c320:	b	1db20 <__assert_fail@plt+0xc670>
   1c324:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c328:	ldrb	r7, [r0]
   1c32c:	cmp	r8, #3
   1c330:	bne	1c1c4 <__assert_fail@plt+0xad14>
   1c334:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c338:	ldrb	sl, [r0]
   1c33c:	cmp	r6, #3
   1c340:	cmpne	r6, #0
   1c344:	bne	1c36c <__assert_fail@plt+0xaebc>
   1c348:	ldr	r0, [sp, #52]	; 0x34
   1c34c:	ldr	r0, [r0, #92]	; 0x5c
   1c350:	cmp	r0, #2
   1c354:	blt	1c370 <__assert_fail@plt+0xaec0>
   1c358:	mov	r0, r7
   1c35c:	bl	113d8 <btowc@plt>
   1c360:	ldr	lr, [sp, #44]	; 0x2c
   1c364:	mov	r7, r0
   1c368:	b	1c370 <__assert_fail@plt+0xaec0>
   1c36c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c370:	cmp	r8, #3
   1c374:	cmpne	r8, #0
   1c378:	bne	1c3a0 <__assert_fail@plt+0xaef0>
   1c37c:	ldr	r0, [sp, #52]	; 0x34
   1c380:	ldr	r0, [r0, #92]	; 0x5c
   1c384:	cmp	r0, #2
   1c388:	blt	1c3a4 <__assert_fail@plt+0xaef4>
   1c38c:	mov	r0, sl
   1c390:	bl	113d8 <btowc@plt>
   1c394:	ldr	lr, [sp, #44]	; 0x2c
   1c398:	mov	sl, r0
   1c39c:	b	1c3a4 <__assert_fail@plt+0xaef4>
   1c3a0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1c3a4:	ldr	r8, [sp, #24]
   1c3a8:	cmn	r7, #1
   1c3ac:	mov	r9, #3
   1c3b0:	cmnne	sl, #1
   1c3b4:	beq	1d91c <__assert_fail@plt+0xc46c>
   1c3b8:	ldr	r0, [sp, #40]	; 0x28
   1c3bc:	cmp	r0, #0
   1c3c0:	beq	1c3d0 <__assert_fail@plt+0xaf20>
   1c3c4:	cmp	r7, sl
   1c3c8:	mov	r9, #11
   1c3cc:	bhi	1d91c <__assert_fail@plt+0xc46c>
   1c3d0:	ldr	r0, [sp, #52]	; 0x34
   1c3d4:	ldr	r0, [r0, #92]	; 0x5c
   1c3d8:	cmp	r0, #2
   1c3dc:	blt	1c414 <__assert_fail@plt+0xaf64>
   1c3e0:	ldr	r4, [sp, #60]	; 0x3c
   1c3e4:	ldr	r1, [sp, #32]
   1c3e8:	ldr	r5, [sp, #28]
   1c3ec:	ldr	r0, [r4, #32]
   1c3f0:	cmp	r1, r0
   1c3f4:	beq	1c4ac <__assert_fail@plt+0xaffc>
   1c3f8:	ldmib	r4, {r6, r9}
   1c3fc:	str	r7, [r6, r0, lsl #2]
   1c400:	ldr	r0, [r4, #32]
   1c404:	add	r1, r0, #1
   1c408:	str	r1, [r4, #32]
   1c40c:	str	sl, [r9, r0, lsl #2]
   1c410:	b	1c418 <__assert_fail@plt+0xaf68>
   1c414:	ldr	r5, [sp, #28]
   1c418:	ldr	r9, [sp, #16]
   1c41c:	mov	r0, #0
   1c420:	b	1c430 <__assert_fail@plt+0xaf80>
   1c424:	add	r0, r0, #1
   1c428:	cmp	r0, #256	; 0x100
   1c42c:	beq	1c458 <__assert_fail@plt+0xafa8>
   1c430:	cmp	r7, r0
   1c434:	cmpls	r0, sl
   1c438:	bhi	1c424 <__assert_fail@plt+0xaf74>
   1c43c:	ubfx	r1, r0, #5, #3
   1c440:	and	r3, r0, #31
   1c444:	mov	r4, #1
   1c448:	ldr	r2, [r8, r1, lsl #2]
   1c44c:	orr	r2, r2, r4, lsl r3
   1c450:	str	r2, [r8, r1, lsl #2]
   1c454:	b	1c424 <__assert_fail@plt+0xaf74>
   1c458:	ldr	r0, [sp, #20]
   1c45c:	ldr	sl, [sp, #52]	; 0x34
   1c460:	ldr	r7, [sp, #60]	; 0x3c
   1c464:	mov	r1, #0
   1c468:	b	1c27c <__assert_fail@plt+0xadcc>
   1c46c:	ldr	r1, [sp, #36]	; 0x24
   1c470:	mov	r0, #1
   1c474:	orr	r1, r0, r1, lsl #1
   1c478:	ldr	r0, [r7]
   1c47c:	str	r1, [sp, #36]	; 0x24
   1c480:	lsl	r1, r1, #2
   1c484:	bl	29084 <__assert_fail@plt+0x17bd4>
   1c488:	cmp	r0, #0
   1c48c:	beq	1de2c <__assert_fail@plt+0xc97c>
   1c490:	ldr	r7, [sp, #60]	; 0x3c
   1c494:	ldr	r5, [sp, #28]
   1c498:	ldr	lr, [sp, #44]	; 0x2c
   1c49c:	mov	r9, r4
   1c4a0:	str	r0, [r7]
   1c4a4:	ldr	r1, [r7, #20]
   1c4a8:	b	1c2f8 <__assert_fail@plt+0xae48>
   1c4ac:	ldr	r1, [sp, #32]
   1c4b0:	mov	r0, #1
   1c4b4:	orr	r1, r0, r1, lsl #1
   1c4b8:	ldr	r0, [r4, #4]
   1c4bc:	lsl	r9, r1, #2
   1c4c0:	str	r1, [sp, #32]
   1c4c4:	mov	r1, r9
   1c4c8:	bl	29084 <__assert_fail@plt+0x17bd4>
   1c4cc:	mov	r6, r0
   1c4d0:	ldr	r0, [r4, #8]
   1c4d4:	mov	r1, r9
   1c4d8:	bl	29084 <__assert_fail@plt+0x17bd4>
   1c4dc:	mov	r9, r0
   1c4e0:	cmp	r6, #0
   1c4e4:	cmpne	r9, #0
   1c4e8:	beq	1de44 <__assert_fail@plt+0xc994>
   1c4ec:	ldr	r4, [sp, #60]	; 0x3c
   1c4f0:	stmib	r4, {r6, r9}
   1c4f4:	ldr	r0, [r4, #32]
   1c4f8:	ldr	r5, [sp, #28]
   1c4fc:	ldr	lr, [sp, #44]	; 0x2c
   1c500:	ldr	r8, [sp, #24]
   1c504:	b	1c3fc <__assert_fail@plt+0xaf4c>
   1c508:	ldr	r0, [r5, #40]	; 0x28
   1c50c:	ldr	ip, [sp, #48]	; 0x30
   1c510:	add	r0, r0, r9
   1c514:	str	r0, [r5, #40]	; 0x28
   1c518:	ldr	r0, [sp, #56]	; 0x38
   1c51c:	cmp	r0, #0
   1c520:	beq	1c540 <__assert_fail@plt+0xb090>
   1c524:	vld1.32	{d16-d17}, [r8]
   1c528:	mov	r0, r8
   1c52c:	vmvn	q8, q8
   1c530:	vst1.32	{d16-d17}, [r0]!
   1c534:	vld1.32	{d16-d17}, [r0]
   1c538:	vmvn	q8, q8
   1c53c:	vst1.32	{d16-d17}, [r0]
   1c540:	ldr	r0, [sl, #92]	; 0x5c
   1c544:	cmp	r0, #2
   1c548:	blt	1c5cc <__assert_fail@plt+0xb11c>
   1c54c:	ldr	r6, [sl, #60]	; 0x3c
   1c550:	ldm	r8, {r1, r2, r3, r7}
   1c554:	ldr	r5, [r6]
   1c558:	and	r1, r1, r5
   1c55c:	ldr	r5, [sp, #28]
   1c560:	str	r1, [r8]
   1c564:	ldr	r1, [r6, #4]
   1c568:	and	r1, r2, r1
   1c56c:	str	r1, [r8, #4]
   1c570:	ldr	r1, [r6, #8]
   1c574:	and	r1, r3, r1
   1c578:	str	r1, [r8, #8]
   1c57c:	ldr	r1, [r6, #12]
   1c580:	and	r1, r7, r1
   1c584:	ldr	r7, [sp, #60]	; 0x3c
   1c588:	str	r1, [r8, #12]
   1c58c:	ldr	r1, [r8, #16]
   1c590:	ldr	r2, [r6, #16]
   1c594:	and	r1, r1, r2
   1c598:	str	r1, [r8, #16]
   1c59c:	ldr	r1, [r6, #20]
   1c5a0:	ldr	r2, [r8, #20]
   1c5a4:	and	r1, r2, r1
   1c5a8:	str	r1, [r8, #20]
   1c5ac:	ldr	r1, [r6, #24]
   1c5b0:	ldr	r2, [r8, #24]
   1c5b4:	and	r1, r2, r1
   1c5b8:	str	r1, [r8, #24]
   1c5bc:	ldr	r1, [r6, #28]
   1c5c0:	ldr	r2, [r8, #28]
   1c5c4:	and	r1, r2, r1
   1c5c8:	str	r1, [r8, #28]
   1c5cc:	ldr	r1, [r7, #20]
   1c5d0:	cmp	r1, #0
   1c5d4:	bne	1c5fc <__assert_fail@plt+0xb14c>
   1c5d8:	ldr	r1, [r7, #24]
   1c5dc:	cmp	r1, #0
   1c5e0:	bne	1c5fc <__assert_fail@plt+0xb14c>
   1c5e4:	ldr	r1, [r7, #28]
   1c5e8:	cmp	r1, #0
   1c5ec:	bne	1c5fc <__assert_fail@plt+0xb14c>
   1c5f0:	ldr	r1, [r7, #32]
   1c5f4:	cmp	r1, #0
   1c5f8:	beq	1d878 <__assert_fail@plt+0xc3c8>
   1c5fc:	ldrb	r0, [sl, #88]	; 0x58
   1c600:	orr	r0, r0, #2
   1c604:	strb	r0, [sl, #88]	; 0x58
   1c608:	ldr	r1, [sl, #64]	; 0x40
   1c60c:	cmp	r1, #31
   1c610:	beq	1da8c <__assert_fail@plt+0xc5dc>
   1c614:	ldr	r0, [sl, #56]	; 0x38
   1c618:	add	r0, r0, r1, lsl #5
   1c61c:	add	r2, r1, #1
   1c620:	vmov.i32	q8, #0	; 0x00000000
   1c624:	mov	r1, #6
   1c628:	str	r2, [sl, #64]	; 0x40
   1c62c:	mov	r2, #0
   1c630:	add	r4, r0, #4
   1c634:	str	r2, [r0, #20]
   1c638:	str	r7, [r0, #24]
   1c63c:	str	r1, [r0, #28]
   1c640:	mov	r0, #28
   1c644:	mov	r1, r4
   1c648:	vst1.32	{d16-d17}, [r1], r0
   1c64c:	mvn	r0, #0
   1c650:	str	r0, [r1]
   1c654:	ldr	r0, [r8]
   1c658:	cmp	r0, #0
   1c65c:	bne	1c6b4 <__assert_fail@plt+0xb204>
   1c660:	ldr	r0, [r8, #4]
   1c664:	cmp	r0, #0
   1c668:	bne	1c6b4 <__assert_fail@plt+0xb204>
   1c66c:	ldr	r0, [r8, #8]
   1c670:	cmp	r0, #0
   1c674:	bne	1c6b4 <__assert_fail@plt+0xb204>
   1c678:	ldr	r0, [r8, #12]
   1c67c:	cmp	r0, #0
   1c680:	bne	1c6b4 <__assert_fail@plt+0xb204>
   1c684:	ldr	r0, [r8, #16]
   1c688:	cmp	r0, #0
   1c68c:	bne	1c6b4 <__assert_fail@plt+0xb204>
   1c690:	ldr	r0, [r8, #20]
   1c694:	cmp	r0, #0
   1c698:	bne	1c6b4 <__assert_fail@plt+0xb204>
   1c69c:	ldr	r0, [r8, #24]
   1c6a0:	cmp	r0, #0
   1c6a4:	bne	1c6b4 <__assert_fail@plt+0xb204>
   1c6a8:	ldr	r0, [r8, #28]
   1c6ac:	cmp	r0, #0
   1c6b0:	beq	1db28 <__assert_fail@plt+0xc678>
   1c6b4:	ldr	r1, [sl, #64]	; 0x40
   1c6b8:	cmp	r1, #31
   1c6bc:	beq	1dabc <__assert_fail@plt+0xc60c>
   1c6c0:	ldr	r0, [sl, #56]	; 0x38
   1c6c4:	add	r0, r0, r1, lsl #5
   1c6c8:	add	r2, r1, #1
   1c6cc:	vmov.i32	q8, #0	; 0x00000000
   1c6d0:	mov	r1, #3
   1c6d4:	str	r2, [sl, #64]	; 0x40
   1c6d8:	mov	r2, #0
   1c6dc:	add	r6, r0, #4
   1c6e0:	str	r2, [r0, #20]
   1c6e4:	str	r8, [r0, #24]
   1c6e8:	str	r1, [r0, #28]
   1c6ec:	mov	r0, #28
   1c6f0:	mov	r1, r6
   1c6f4:	vst1.32	{d16-d17}, [r1], r0
   1c6f8:	mvn	r0, #0
   1c6fc:	str	r0, [r1]
   1c700:	ldr	r1, [sl, #64]	; 0x40
   1c704:	cmp	r1, #31
   1c708:	beq	1daec <__assert_fail@plt+0xc63c>
   1c70c:	ldr	r0, [sl, #56]	; 0x38
   1c710:	add	r7, r0, r1, lsl #5
   1c714:	add	r2, r1, #1
   1c718:	mov	r0, #0
   1c71c:	mov	r1, #10
   1c720:	str	r2, [sl, #64]	; 0x40
   1c724:	mvn	r2, #0
   1c728:	str	r0, [r7, #4]!
   1c72c:	add	r3, r7, #20
   1c730:	str	r6, [r7, #4]
   1c734:	str	r4, [r7, #8]
   1c738:	str	r0, [r7, #12]
   1c73c:	str	r0, [r7, #16]
   1c740:	stm	r3, {r0, r1, r2}
   1c744:	str	r7, [r6]
   1c748:	str	r7, [r4]
   1c74c:	b	1c950 <__assert_fail@plt+0xb4a0>
   1c750:	mov	r0, #5
   1c754:	str	r0, [lr]
   1c758:	ldr	r1, [sl, #64]	; 0x40
   1c75c:	cmp	r1, #31
   1c760:	beq	1dc0c <__assert_fail@plt+0xc75c>
   1c764:	ldr	r0, [sl, #56]	; 0x38
   1c768:	add	r4, r0, r1, lsl #5
   1c76c:	add	r2, r1, #1
   1c770:	mov	r0, #0
   1c774:	mvn	r3, #0
   1c778:	str	r2, [sl, #64]	; 0x40
   1c77c:	str	r0, [r4, #4]!
   1c780:	str	r0, [r4, #8]
   1c784:	str	r0, [r4, #4]
   1c788:	ldm	lr, {r1, r2}
   1c78c:	str	r3, [r4, #28]
   1c790:	str	r0, [r4, #16]
   1c794:	str	r0, [r4, #12]
   1c798:	bic	r0, r2, #786432	; 0xc0000
   1c79c:	str	r1, [r4, #20]
   1c7a0:	str	r0, [r4, #24]
   1c7a4:	mov	r0, #10
   1c7a8:	str	r0, [lr]
   1c7ac:	ldr	r1, [sl, #64]	; 0x40
   1c7b0:	cmp	r1, #31
   1c7b4:	beq	1db74 <__assert_fail@plt+0xc6c4>
   1c7b8:	ldr	r0, [sl, #56]	; 0x38
   1c7bc:	add	r5, r0, r1, lsl #5
   1c7c0:	add	r2, r1, #1
   1c7c4:	mov	r0, #0
   1c7c8:	mvn	r3, #0
   1c7cc:	str	r2, [sl, #64]	; 0x40
   1c7d0:	str	r0, [r5, #4]!
   1c7d4:	str	r0, [r5, #8]
   1c7d8:	str	r0, [r5, #4]
   1c7dc:	ldm	lr, {r1, r2}
   1c7e0:	str	r3, [r5, #28]
   1c7e4:	str	r0, [r5, #16]
   1c7e8:	str	r0, [r5, #12]
   1c7ec:	bic	r0, r2, #786432	; 0xc0000
   1c7f0:	str	r1, [r5, #20]
   1c7f4:	str	r0, [r5, #24]
   1c7f8:	ldr	r1, [sl, #64]	; 0x40
   1c7fc:	cmp	r1, #31
   1c800:	beq	1dba8 <__assert_fail@plt+0xc6f8>
   1c804:	ldr	r0, [sl, #56]	; 0x38
   1c808:	add	r6, r0, r1, lsl #5
   1c80c:	add	r2, r1, #1
   1c810:	mov	r0, #0
   1c814:	cmp	r4, #0
   1c818:	mov	r1, #10
   1c81c:	str	r2, [sl, #64]	; 0x40
   1c820:	mvn	r2, #0
   1c824:	str	r0, [r6, #4]!
   1c828:	add	r3, r6, #20
   1c82c:	stmib	r6, {r4, r5}
   1c830:	str	r0, [r6, #12]
   1c834:	str	r0, [r6, #16]
   1c838:	stm	r3, {r0, r1, r2}
   1c83c:	strne	r6, [r4]
   1c840:	cmp	r5, #0
   1c844:	strne	r6, [r5]
   1c848:	cmpne	r4, #0
   1c84c:	bne	1c8a8 <__assert_fail@plt+0xb3f8>
   1c850:	mov	r0, #12
   1c854:	ldr	r1, [sp, #20]
   1c858:	b	1d7c4 <__assert_fail@plt+0xc314>
   1c85c:	ldr	r1, [sl, #64]	; 0x40
   1c860:	cmp	r1, #31
   1c864:	beq	1dc40 <__assert_fail@plt+0xc790>
   1c868:	ldr	r0, [sl, #56]	; 0x38
   1c86c:	add	r6, r0, r1, lsl #5
   1c870:	add	r2, r1, #1
   1c874:	mov	r0, #0
   1c878:	mvn	r3, #0
   1c87c:	str	r2, [sl, #64]	; 0x40
   1c880:	str	r0, [r6, #4]!
   1c884:	str	r0, [r6, #8]
   1c888:	str	r0, [r6, #4]
   1c88c:	ldm	lr, {r1, r2}
   1c890:	str	r3, [r6, #28]
   1c894:	str	r0, [r6, #16]
   1c898:	str	r0, [r6, #12]
   1c89c:	bic	r0, r2, #786432	; 0xc0000
   1c8a0:	str	r1, [r6, #20]
   1c8a4:	str	r0, [r6, #24]
   1c8a8:	ldr	r4, [sp, #28]
   1c8ac:	mov	r0, lr
   1c8b0:	mov	r2, ip
   1c8b4:	mov	r1, r4
   1c8b8:	bl	1ad30 <__assert_fail@plt+0x9880>
   1c8bc:	ldr	r1, [r4, #40]	; 0x28
   1c8c0:	mov	r9, r6
   1c8c4:	add	r0, r1, r0
   1c8c8:	str	r0, [r4, #40]	; 0x28
   1c8cc:	b	1d7c8 <__assert_fail@plt+0xc318>
   1c8d0:	ldrb	r0, [r7, #4]
   1c8d4:	cmp	r0, #9
   1c8d8:	bne	1dd20 <__assert_fail@plt+0xc870>
   1c8dc:	mov	lr, r7
   1c8e0:	cmp	r4, #8
   1c8e4:	bhi	1c8f8 <__assert_fail@plt+0xb448>
   1c8e8:	ldr	r0, [sl, #84]	; 0x54
   1c8ec:	mov	r1, #1
   1c8f0:	orr	r0, r0, r1, lsl r4
   1c8f4:	str	r0, [sl, #84]	; 0x54
   1c8f8:	ldr	r1, [sl, #64]	; 0x40
   1c8fc:	ldr	ip, [sp, #48]	; 0x30
   1c900:	cmp	r1, #31
   1c904:	beq	1db40 <__assert_fail@plt+0xc690>
   1c908:	ldr	r0, [sl, #56]	; 0x38
   1c90c:	add	r0, r0, r1, lsl #5
   1c910:	add	r2, r1, #1
   1c914:	mov	r1, #0
   1c918:	cmp	r9, #0
   1c91c:	mvn	r3, #0
   1c920:	str	r2, [sl, #64]	; 0x40
   1c924:	mov	r2, #17
   1c928:	mov	r7, r0
   1c92c:	str	r1, [r7, #4]!
   1c930:	add	r6, r7, #20
   1c934:	str	r9, [r7, #4]
   1c938:	str	r1, [r7, #8]
   1c93c:	str	r1, [r7, #12]
   1c940:	str	r1, [r7, #16]
   1c944:	stm	r6, {r1, r2, r3}
   1c948:	strne	r7, [r9]
   1c94c:	str	r4, [r0, #24]
   1c950:	mov	r0, lr
   1c954:	mov	r1, r5
   1c958:	mov	r2, ip
   1c95c:	bl	1ad30 <__assert_fail@plt+0x9880>
   1c960:	ldr	r1, [r5, #40]	; 0x28
   1c964:	ldr	ip, [sp, #48]	; 0x30
   1c968:	ldr	lr, [sp, #44]	; 0x2c
   1c96c:	mov	r4, #0
   1c970:	add	r0, r1, r0
   1c974:	str	r0, [r5, #40]	; 0x28
   1c978:	and	r0, ip, #16777216	; 0x1000000
   1c97c:	str	r0, [sp, #32]
   1c980:	and	r0, ip, #2097152	; 0x200000
   1c984:	str	r0, [sp, #16]
   1c988:	add	r0, sl, #56	; 0x38
   1c98c:	str	r0, [sp, #60]	; 0x3c
   1c990:	add	r0, sl, #64	; 0x40
   1c994:	str	r0, [sp, #24]
   1c998:	ldrb	r0, [lr, #4]
   1c99c:	mov	r9, r7
   1c9a0:	cmp	r0, #23
   1c9a4:	bhi	1d7c8 <__assert_fail@plt+0xc318>
   1c9a8:	movw	r2, #2048	; 0x800
   1c9ac:	mov	r1, #1
   1c9b0:	movt	r2, #140	; 0x8c
   1c9b4:	tst	r2, r1, lsl r0
   1c9b8:	beq	1d7c8 <__assert_fail@plt+0xc318>
   1c9bc:	cmp	r0, #23
   1c9c0:	str	r9, [sp, #40]	; 0x28
   1c9c4:	bne	1ca74 <__assert_fail@plt+0xb5c4>
   1c9c8:	ldr	r9, [r5, #40]	; 0x28
   1c9cc:	ldm	lr, {r7, sl}
   1c9d0:	mov	r6, r5
   1c9d4:	mvn	r2, #0
   1c9d8:	mov	r8, r2
   1c9dc:	mov	r0, lr
   1c9e0:	mov	r1, r6
   1c9e4:	mov	r2, ip
   1c9e8:	mov	r5, r6
   1c9ec:	bl	1ad30 <__assert_fail@plt+0x9880>
   1c9f0:	ldr	r1, [r6, #40]	; 0x28
   1c9f4:	ldr	lr, [sp, #44]	; 0x2c
   1c9f8:	add	r0, r1, r0
   1c9fc:	str	r0, [r6, #40]	; 0x28
   1ca00:	ldrb	r0, [lr, #4]
   1ca04:	ldrb	r1, [lr]
   1ca08:	cmp	r0, #24
   1ca0c:	beq	1ca90 <__assert_fail@plt+0xb5e0>
   1ca10:	cmp	r0, #2
   1ca14:	beq	1d0a4 <__assert_fail@plt+0xbbf4>
   1ca18:	cmp	r1, #44	; 0x2c
   1ca1c:	beq	1ca90 <__assert_fail@plt+0xb5e0>
   1ca20:	ldr	ip, [sp, #48]	; 0x30
   1ca24:	mvn	r2, #1
   1ca28:	cmp	r1, #48	; 0x30
   1ca2c:	bcc	1c9d8 <__assert_fail@plt+0xb528>
   1ca30:	cmp	r0, #1
   1ca34:	bne	1c9d8 <__assert_fail@plt+0xb528>
   1ca38:	cmn	r8, #2
   1ca3c:	beq	1c9d8 <__assert_fail@plt+0xb528>
   1ca40:	cmp	r1, #57	; 0x39
   1ca44:	bhi	1c9d8 <__assert_fail@plt+0xb528>
   1ca48:	cmn	r8, #1
   1ca4c:	beq	1ca6c <__assert_fail@plt+0xb5bc>
   1ca50:	add	r0, r8, r8, lsl #2
   1ca54:	add	r0, r1, r0, lsl #1
   1ca58:	movw	r1, #32816	; 0x8030
   1ca5c:	cmp	r0, r1
   1ca60:	movge	r0, r1
   1ca64:	sub	r2, r0, #48	; 0x30
   1ca68:	b	1c9d8 <__assert_fail@plt+0xb528>
   1ca6c:	sub	r2, r1, #48	; 0x30
   1ca70:	b	1c9d8 <__assert_fail@plt+0xb528>
   1ca74:	cmp	r0, #19
   1ca78:	sub	r0, r0, #18
   1ca7c:	mvn	sl, #0
   1ca80:	clz	r0, r0
   1ca84:	movweq	sl, #1
   1ca88:	lsr	r8, r0, #5
   1ca8c:	b	1cc24 <__assert_fail@plt+0xb774>
   1ca90:	cmn	r8, #1
   1ca94:	bne	1cac8 <__assert_fail@plt+0xb618>
   1ca98:	ldr	ip, [sp, #48]	; 0x30
   1ca9c:	cmp	r1, #44	; 0x2c
   1caa0:	moveq	r8, #0
   1caa4:	cmpeq	r0, #1
   1caa8:	beq	1cb14 <__assert_fail@plt+0xb664>
   1caac:	ldr	r0, [sp, #20]
   1cab0:	mov	r1, #10
   1cab4:	str	r1, [r0]
   1cab8:	ldr	r9, [sp, #40]	; 0x28
   1cabc:	mov	r7, #0
   1cac0:	mov	r5, r6
   1cac4:	b	1d6d8 <__assert_fail@plt+0xc228>
   1cac8:	ldr	ip, [sp, #48]	; 0x30
   1cacc:	cmn	r8, #2
   1cad0:	beq	1cae8 <__assert_fail@plt+0xb638>
   1cad4:	cmp	r0, #24
   1cad8:	beq	1cbd0 <__assert_fail@plt+0xb720>
   1cadc:	cmp	r0, #1
   1cae0:	cmpeq	r1, #44	; 0x2c
   1cae4:	beq	1cb14 <__assert_fail@plt+0xb664>
   1cae8:	ldr	r1, [sp, #16]
   1caec:	cmp	r1, #0
   1caf0:	beq	1d634 <__assert_fail@plt+0xc184>
   1caf4:	mov	r0, #1
   1caf8:	str	r9, [r6, #40]	; 0x28
   1cafc:	mov	r5, r6
   1cb00:	bfi	sl, r0, #0, #8
   1cb04:	stm	lr, {r7, sl}
   1cb08:	ldr	r9, [sp, #40]	; 0x28
   1cb0c:	mov	r7, r9
   1cb10:	b	1d6d8 <__assert_fail@plt+0xc228>
   1cb14:	mvn	r2, #0
   1cb18:	str	r9, [sp, #56]	; 0x38
   1cb1c:	mov	r9, r2
   1cb20:	mov	r0, lr
   1cb24:	mov	r1, r6
   1cb28:	mov	r2, ip
   1cb2c:	mov	r5, r6
   1cb30:	bl	1ad30 <__assert_fail@plt+0x9880>
   1cb34:	ldr	r1, [r6, #40]	; 0x28
   1cb38:	ldr	lr, [sp, #44]	; 0x2c
   1cb3c:	add	r0, r1, r0
   1cb40:	str	r0, [r6, #40]	; 0x28
   1cb44:	ldrb	r0, [lr, #4]
   1cb48:	cmp	r0, #24
   1cb4c:	beq	1cbb8 <__assert_fail@plt+0xb708>
   1cb50:	cmp	r0, #2
   1cb54:	beq	1d4a8 <__assert_fail@plt+0xbff8>
   1cb58:	ldrb	r1, [lr]
   1cb5c:	ldr	ip, [sp, #48]	; 0x30
   1cb60:	cmp	r1, #44	; 0x2c
   1cb64:	beq	1cbbc <__assert_fail@plt+0xb70c>
   1cb68:	mvn	r2, #1
   1cb6c:	cmp	r1, #48	; 0x30
   1cb70:	bcc	1cb1c <__assert_fail@plt+0xb66c>
   1cb74:	cmp	r0, #1
   1cb78:	bne	1cb1c <__assert_fail@plt+0xb66c>
   1cb7c:	cmn	r9, #2
   1cb80:	beq	1cb1c <__assert_fail@plt+0xb66c>
   1cb84:	cmp	r1, #57	; 0x39
   1cb88:	bhi	1cb1c <__assert_fail@plt+0xb66c>
   1cb8c:	cmn	r9, #1
   1cb90:	beq	1cbb0 <__assert_fail@plt+0xb700>
   1cb94:	add	r0, r9, r9, lsl #2
   1cb98:	add	r0, r1, r0, lsl #1
   1cb9c:	movw	r1, #32816	; 0x8030
   1cba0:	cmp	r0, r1
   1cba4:	movge	r0, r1
   1cba8:	sub	r2, r0, #48	; 0x30
   1cbac:	b	1cb1c <__assert_fail@plt+0xb66c>
   1cbb0:	sub	r2, r1, #48	; 0x30
   1cbb4:	b	1cb1c <__assert_fail@plt+0xb66c>
   1cbb8:	ldr	ip, [sp, #48]	; 0x30
   1cbbc:	mov	r2, r9
   1cbc0:	ldr	r9, [sp, #56]	; 0x38
   1cbc4:	cmn	r2, #2
   1cbc8:	bne	1cbdc <__assert_fail@plt+0xb72c>
   1cbcc:	b	1cae8 <__assert_fail@plt+0xb638>
   1cbd0:	mov	r2, r8
   1cbd4:	cmn	r2, #2
   1cbd8:	beq	1cae8 <__assert_fail@plt+0xb638>
   1cbdc:	ldr	r9, [sp, #40]	; 0x28
   1cbe0:	cmp	r8, r2
   1cbe4:	mov	r1, #0
   1cbe8:	mov	r5, r6
   1cbec:	movwle	r1, #1
   1cbf0:	cmp	r0, #24
   1cbf4:	bne	1d468 <__assert_fail@plt+0xbfb8>
   1cbf8:	add	r0, r2, #1
   1cbfc:	mov	sl, r2
   1cc00:	clz	r0, r0
   1cc04:	lsr	r0, r0, #5
   1cc08:	orrs	r0, r1, r0
   1cc0c:	beq	1d468 <__assert_fail@plt+0xbfb8>
   1cc10:	cmn	sl, #1
   1cc14:	mov	r0, sl
   1cc18:	moveq	r0, r8
   1cc1c:	cmp	r0, #32768	; 0x8000
   1cc20:	bge	1d620 <__assert_fail@plt+0xc170>
   1cc24:	mov	r0, lr
   1cc28:	mov	r1, r5
   1cc2c:	mov	r2, ip
   1cc30:	bl	1ad30 <__assert_fail@plt+0x9880>
   1cc34:	ldr	r1, [r5, #40]	; 0x28
   1cc38:	mov	r7, #0
   1cc3c:	cmp	r9, #0
   1cc40:	add	r0, r1, r0
   1cc44:	str	r0, [r5, #40]	; 0x28
   1cc48:	beq	1d0ac <__assert_fail@plt+0xbbfc>
   1cc4c:	ldr	ip, [sp, #48]	; 0x30
   1cc50:	orrs	r0, sl, r8
   1cc54:	beq	1d0b8 <__assert_fail@plt+0xbc08>
   1cc58:	mov	r0, #0
   1cc5c:	cmp	r8, #1
   1cc60:	mov	r7, r9
   1cc64:	str	r0, [sp, #36]	; 0x24
   1cc68:	ldr	lr, [sp, #44]	; 0x2c
   1cc6c:	ldr	r5, [sp, #24]
   1cc70:	bge	1d16c <__assert_fail@plt+0xbcbc>
   1cc74:	ldrb	r0, [r7, #24]
   1cc78:	cmp	r0, #17
   1cc7c:	bne	1ccf0 <__assert_fail@plt+0xb840>
   1cc80:	ldr	r0, [r7, #20]
   1cc84:	mov	r2, r7
   1cc88:	mov	r1, r2
   1cc8c:	ldr	r2, [r2, #4]
   1cc90:	cmp	r2, #0
   1cc94:	bne	1cc88 <__assert_fail@plt+0xb7d8>
   1cc98:	ldr	r2, [r1, #8]
   1cc9c:	cmp	r2, #0
   1cca0:	bne	1cc88 <__assert_fail@plt+0xb7d8>
   1cca4:	ldr	r2, [r1, #24]
   1cca8:	uxtb	r3, r2
   1ccac:	cmp	r3, #17
   1ccb0:	bne	1ccc4 <__assert_fail@plt+0xb814>
   1ccb4:	ldr	r3, [r1, #20]
   1ccb8:	cmp	r3, r0
   1ccbc:	orreq	r2, r2, #524288	; 0x80000
   1ccc0:	streq	r2, [r1, #24]
   1ccc4:	ldr	r3, [r1]
   1ccc8:	cmp	r3, #0
   1cccc:	beq	1ccf0 <__assert_fail@plt+0xb840>
   1ccd0:	ldr	r2, [r3, #8]
   1ccd4:	cmp	r2, r1
   1ccd8:	mov	r1, r3
   1ccdc:	beq	1cca4 <__assert_fail@plt+0xb7f4>
   1cce0:	cmp	r2, #0
   1cce4:	mov	r1, r3
   1cce8:	beq	1cca4 <__assert_fail@plt+0xb7f4>
   1ccec:	b	1cc88 <__assert_fail@plt+0xb7d8>
   1ccf0:	ldr	r1, [r5]
   1ccf4:	cmn	sl, #1
   1ccf8:	mov	r6, #10
   1ccfc:	movweq	r6, #11
   1cd00:	cmp	r1, #31
   1cd04:	beq	1d418 <__assert_fail@plt+0xbf68>
   1cd08:	ldr	r0, [sp, #60]	; 0x3c
   1cd0c:	ldr	r0, [r0]
   1cd10:	add	r9, r0, r1, lsl #5
   1cd14:	add	r2, r1, #1
   1cd18:	mvn	r0, #0
   1cd1c:	str	r2, [r5]
   1cd20:	str	r4, [r9, #4]!
   1cd24:	str	r7, [r9, #4]
   1cd28:	str	r4, [r9, #8]
   1cd2c:	str	r4, [r9, #12]
   1cd30:	str	r4, [r9, #16]
   1cd34:	str	r4, [r9, #20]
   1cd38:	str	r6, [r9, #24]
   1cd3c:	str	r0, [r9, #28]
   1cd40:	add	r0, r8, #2
   1cd44:	str	r9, [r7]
   1cd48:	cmp	r0, sl
   1cd4c:	bgt	1d030 <__assert_fail@plt+0xbb80>
   1cd50:	str	sl, [sp, #52]	; 0x34
   1cd54:	mov	sl, r9
   1cd58:	ldr	r1, [r5]
   1cd5c:	str	r0, [sp, #56]	; 0x38
   1cd60:	cmp	r1, #31
   1cd64:	beq	1cf70 <__assert_fail@plt+0xbac0>
   1cd68:	ldr	r0, [sp, #60]	; 0x3c
   1cd6c:	ldr	r0, [r0]
   1cd70:	add	r8, r0, r1, lsl #5
   1cd74:	add	r3, r1, #1
   1cd78:	add	r2, r7, #20
   1cd7c:	sub	r6, fp, #80	; 0x50
   1cd80:	str	r3, [r5]
   1cd84:	str	r4, [r8, #4]!
   1cd88:	str	r4, [r8, #8]
   1cd8c:	str	r4, [r8, #4]
   1cd90:	ldm	r2, {r0, r1}
   1cd94:	mvn	r2, #0
   1cd98:	str	r2, [r8, #28]
   1cd9c:	str	r4, [r8, #16]
   1cda0:	str	r4, [r8, #12]
   1cda4:	str	r0, [r8, #20]
   1cda8:	bic	r0, r1, #786432	; 0xc0000
   1cdac:	str	r0, [r8, #24]
   1cdb0:	mov	r0, r8
   1cdb4:	str	r8, [fp, #-80]	; 0xffffffb0
   1cdb8:	str	r9, [r0]
   1cdbc:	ldr	r0, [r6]
   1cdc0:	ldr	r1, [r0, #24]
   1cdc4:	orr	r1, r1, #262144	; 0x40000
   1cdc8:	str	r1, [r0, #24]
   1cdcc:	ldr	r0, [r7, #4]
   1cdd0:	ldr	r9, [r6]
   1cdd4:	cmp	r0, #0
   1cdd8:	beq	1cde8 <__assert_fail@plt+0xb938>
   1cddc:	add	r6, r9, #4
   1cde0:	mov	r7, r0
   1cde4:	b	1ce1c <__assert_fail@plt+0xb96c>
   1cde8:	mov	r1, #0
   1cdec:	mov	r0, r7
   1cdf0:	ldr	r7, [r7, #8]
   1cdf4:	cmp	r7, r1
   1cdf8:	cmpne	r7, #0
   1cdfc:	bne	1ce18 <__assert_fail@plt+0xb968>
   1ce00:	ldr	r7, [r0]
   1ce04:	ldr	r9, [r9]
   1ce08:	mov	r1, r0
   1ce0c:	cmp	r7, #0
   1ce10:	bne	1cdec <__assert_fail@plt+0xb93c>
   1ce14:	b	1cea8 <__assert_fail@plt+0xb9f8>
   1ce18:	add	r6, r9, #8
   1ce1c:	ldr	r1, [r5]
   1ce20:	cmp	r1, #31
   1ce24:	beq	1ce74 <__assert_fail@plt+0xb9c4>
   1ce28:	ldr	r0, [sp, #60]	; 0x3c
   1ce2c:	ldr	r0, [r0]
   1ce30:	add	r0, r0, r1, lsl #5
   1ce34:	add	r3, r1, #1
   1ce38:	add	r2, r7, #20
   1ce3c:	str	r3, [r5]
   1ce40:	mvn	r3, #0
   1ce44:	str	r4, [r0, #4]!
   1ce48:	str	r4, [r0, #8]
   1ce4c:	str	r4, [r0, #4]
   1ce50:	ldm	r2, {r1, r2}
   1ce54:	str	r3, [r0, #28]
   1ce58:	str	r4, [r0, #16]
   1ce5c:	str	r4, [r0, #12]
   1ce60:	str	r1, [r0, #20]
   1ce64:	bic	r1, r2, #786432	; 0xc0000
   1ce68:	str	r1, [r0, #24]
   1ce6c:	str	r0, [r6]
   1ce70:	b	1cdb8 <__assert_fail@plt+0xb908>
   1ce74:	mov	r0, #996	; 0x3e4
   1ce78:	bl	29054 <__assert_fail@plt+0x17ba4>
   1ce7c:	cmp	r0, #0
   1ce80:	beq	1d018 <__assert_fail@plt+0xbb68>
   1ce84:	ldr	r2, [sp, #60]	; 0x3c
   1ce88:	ldr	ip, [sp, #48]	; 0x30
   1ce8c:	ldr	lr, [sp, #44]	; 0x2c
   1ce90:	ldr	r1, [r2]
   1ce94:	str	r1, [r0]
   1ce98:	mov	r1, #0
   1ce9c:	str	r0, [r2]
   1cea0:	str	r1, [r5]
   1cea4:	b	1ce30 <__assert_fail@plt+0xb980>
   1cea8:	mov	r7, r8
   1ceac:	ldr	r1, [r5]
   1ceb0:	cmp	r1, #31
   1ceb4:	beq	1cfa4 <__assert_fail@plt+0xbaf4>
   1ceb8:	ldr	r0, [sp, #60]	; 0x3c
   1cebc:	ldr	r0, [r0]
   1cec0:	add	r6, r0, r1, lsl #5
   1cec4:	add	r2, r1, #1
   1cec8:	mov	r0, #16
   1cecc:	cmp	r7, #0
   1ced0:	str	r2, [r5]
   1ced4:	str	r4, [r6, #4]!
   1ced8:	str	sl, [r6, #4]
   1cedc:	str	r7, [r6, #8]
   1cee0:	str	r4, [r6, #12]
   1cee4:	str	r4, [r6, #16]
   1cee8:	str	r4, [r6, #20]
   1ceec:	str	r0, [r6, #24]
   1cef0:	mvn	r0, #0
   1cef4:	str	r0, [r6, #28]
   1cef8:	str	r6, [sl]
   1cefc:	beq	1d6c0 <__assert_fail@plt+0xc210>
   1cf00:	str	r6, [r7]
   1cf04:	ldr	r1, [r5]
   1cf08:	cmp	r1, #31
   1cf0c:	beq	1cfd8 <__assert_fail@plt+0xbb28>
   1cf10:	ldr	r0, [sp, #60]	; 0x3c
   1cf14:	ldr	r0, [r0]
   1cf18:	add	sl, r0, r1, lsl #5
   1cf1c:	add	r2, r1, #1
   1cf20:	mov	r0, #10
   1cf24:	ldr	r1, [sp, #56]	; 0x38
   1cf28:	str	r2, [r5]
   1cf2c:	str	r4, [sl, #4]!
   1cf30:	str	r6, [sl, #4]
   1cf34:	str	r4, [sl, #8]
   1cf38:	str	r4, [sl, #12]
   1cf3c:	str	r4, [sl, #16]
   1cf40:	str	r4, [sl, #20]
   1cf44:	str	r0, [sl, #24]
   1cf48:	mvn	r0, #0
   1cf4c:	str	r0, [sl, #28]
   1cf50:	ldr	r0, [sp, #52]	; 0x34
   1cf54:	str	sl, [r6]
   1cf58:	cmp	r1, r0
   1cf5c:	bge	1d02c <__assert_fail@plt+0xbb7c>
   1cf60:	ldr	r9, [r7]
   1cf64:	mov	r0, r1
   1cf68:	add	r0, r1, #1
   1cf6c:	b	1cd58 <__assert_fail@plt+0xb8a8>
   1cf70:	mov	r0, #996	; 0x3e4
   1cf74:	bl	29054 <__assert_fail@plt+0x17ba4>
   1cf78:	cmp	r0, #0
   1cf7c:	beq	1d00c <__assert_fail@plt+0xbb5c>
   1cf80:	ldr	r2, [sp, #60]	; 0x3c
   1cf84:	ldr	ip, [sp, #48]	; 0x30
   1cf88:	ldr	lr, [sp, #44]	; 0x2c
   1cf8c:	ldr	r1, [r2]
   1cf90:	str	r1, [r0]
   1cf94:	mov	r1, #0
   1cf98:	str	r0, [r2]
   1cf9c:	str	r1, [r5]
   1cfa0:	b	1cd70 <__assert_fail@plt+0xb8c0>
   1cfa4:	mov	r0, #996	; 0x3e4
   1cfa8:	bl	29054 <__assert_fail@plt+0x17ba4>
   1cfac:	ldr	lr, [sp, #44]	; 0x2c
   1cfb0:	ldr	ip, [sp, #48]	; 0x30
   1cfb4:	cmp	r0, #0
   1cfb8:	beq	1d6c0 <__assert_fail@plt+0xc210>
   1cfbc:	ldr	r2, [sp, #60]	; 0x3c
   1cfc0:	ldr	r1, [r2]
   1cfc4:	str	r1, [r0]
   1cfc8:	mov	r1, #0
   1cfcc:	str	r0, [r2]
   1cfd0:	str	r1, [r5]
   1cfd4:	b	1cec0 <__assert_fail@plt+0xba10>
   1cfd8:	mov	r0, #996	; 0x3e4
   1cfdc:	bl	29054 <__assert_fail@plt+0x17ba4>
   1cfe0:	ldr	lr, [sp, #44]	; 0x2c
   1cfe4:	ldr	ip, [sp, #48]	; 0x30
   1cfe8:	cmp	r0, #0
   1cfec:	beq	1d6c0 <__assert_fail@plt+0xc210>
   1cff0:	ldr	r2, [sp, #60]	; 0x3c
   1cff4:	ldr	r1, [r2]
   1cff8:	str	r1, [r0]
   1cffc:	mov	r1, #0
   1d000:	str	r0, [r2]
   1d004:	str	r1, [r5]
   1d008:	b	1cf18 <__assert_fail@plt+0xba68>
   1d00c:	mov	r7, #0
   1d010:	str	r7, [fp, #-80]	; 0xffffffb0
   1d014:	b	1d020 <__assert_fail@plt+0xbb70>
   1d018:	mov	r7, #0
   1d01c:	str	r7, [r6]
   1d020:	ldr	ip, [sp, #48]	; 0x30
   1d024:	ldr	lr, [sp, #44]	; 0x2c
   1d028:	b	1ceac <__assert_fail@plt+0xb9fc>
   1d02c:	mov	r9, sl
   1d030:	ldr	r6, [sp, #36]	; 0x24
   1d034:	ldr	r8, [sp, #28]
   1d038:	cmp	r6, #0
   1d03c:	beq	1d094 <__assert_fail@plt+0xbbe4>
   1d040:	ldr	r1, [r5]
   1d044:	cmp	r1, #31
   1d048:	beq	1d474 <__assert_fail@plt+0xbfc4>
   1d04c:	ldr	r0, [sp, #60]	; 0x3c
   1d050:	ldr	r0, [r0]
   1d054:	add	r7, r0, r1, lsl #5
   1d058:	add	r2, r1, #1
   1d05c:	mov	r0, #0
   1d060:	mov	r1, #16
   1d064:	str	r2, [r5]
   1d068:	str	r0, [r7, #4]!
   1d06c:	stmib	r7, {r6, r9}
   1d070:	str	r0, [r7, #12]
   1d074:	str	r0, [r7, #16]
   1d078:	str	r0, [r7, #20]
   1d07c:	str	r1, [r7, #24]
   1d080:	mvn	r1, #0
   1d084:	str	r1, [r7, #28]
   1d088:	str	r7, [r6]
   1d08c:	str	r7, [r9]
   1d090:	b	1d09c <__assert_fail@plt+0xbbec>
   1d094:	mov	r0, #0
   1d098:	mov	r7, r9
   1d09c:	mov	r5, r8
   1d0a0:	b	1d6f8 <__assert_fail@plt+0xc248>
   1d0a4:	ldr	ip, [sp, #48]	; 0x30
   1d0a8:	b	1cae8 <__assert_fail@plt+0xb638>
   1d0ac:	ldr	ip, [sp, #48]	; 0x30
   1d0b0:	ldr	lr, [sp, #44]	; 0x2c
   1d0b4:	b	1d6d8 <__assert_fail@plt+0xc228>
   1d0b8:	ldr	lr, [sp, #44]	; 0x2c
   1d0bc:	mov	r0, r9
   1d0c0:	mov	r6, r0
   1d0c4:	ldr	r0, [r0, #4]
   1d0c8:	cmp	r0, #0
   1d0cc:	bne	1d0c0 <__assert_fail@plt+0xbc10>
   1d0d0:	ldr	r0, [r6, #8]
   1d0d4:	cmp	r0, #0
   1d0d8:	bne	1d0c0 <__assert_fail@plt+0xbc10>
   1d0dc:	ldr	r0, [r6, #24]
   1d0e0:	movw	r1, #255	; 0xff
   1d0e4:	movt	r1, #4
   1d0e8:	and	r0, r0, r1
   1d0ec:	cmp	r0, #3
   1d0f0:	beq	1d124 <__assert_fail@plt+0xbc74>
   1d0f4:	cmp	r0, #6
   1d0f8:	bne	1d138 <__assert_fail@plt+0xbc88>
   1d0fc:	ldr	r5, [r6, #20]
   1d100:	ldr	r0, [r5]
   1d104:	bl	29220 <__assert_fail@plt+0x17d70>
   1d108:	ldr	r0, [r5, #4]
   1d10c:	bl	29220 <__assert_fail@plt+0x17d70>
   1d110:	ldr	r0, [r5, #8]
   1d114:	bl	29220 <__assert_fail@plt+0x17d70>
   1d118:	ldr	r0, [r5, #12]
   1d11c:	bl	29220 <__assert_fail@plt+0x17d70>
   1d120:	b	1d128 <__assert_fail@plt+0xbc78>
   1d124:	ldr	r5, [r6, #20]
   1d128:	mov	r0, r5
   1d12c:	bl	29220 <__assert_fail@plt+0x17d70>
   1d130:	ldr	ip, [sp, #48]	; 0x30
   1d134:	ldr	lr, [sp, #44]	; 0x2c
   1d138:	ldr	r1, [r6]
   1d13c:	cmp	r1, #0
   1d140:	beq	1d164 <__assert_fail@plt+0xbcb4>
   1d144:	ldr	r0, [r1, #8]
   1d148:	cmp	r0, r6
   1d14c:	mov	r6, r1
   1d150:	beq	1d0dc <__assert_fail@plt+0xbc2c>
   1d154:	cmp	r0, #0
   1d158:	mov	r6, r1
   1d15c:	beq	1d0dc <__assert_fail@plt+0xbc2c>
   1d160:	b	1d0c0 <__assert_fail@plt+0xbc10>
   1d164:	ldr	r5, [sp, #28]
   1d168:	b	1d6d8 <__assert_fail@plt+0xc228>
   1d16c:	mov	r3, r9
   1d170:	str	sl, [sp, #52]	; 0x34
   1d174:	str	r9, [sp, #36]	; 0x24
   1d178:	beq	1d44c <__assert_fail@plt+0xbf9c>
   1d17c:	ldr	sl, [sp, #40]	; 0x28
   1d180:	ldr	r0, [sl]
   1d184:	mov	r3, sl
   1d188:	str	r0, [sp, #36]	; 0x24
   1d18c:	mov	r0, #2
   1d190:	ldr	r1, [r5]
   1d194:	str	r0, [sp, #56]	; 0x38
   1d198:	cmp	r1, #31
   1d19c:	beq	1d370 <__assert_fail@plt+0xbec0>
   1d1a0:	ldr	r0, [sp, #60]	; 0x3c
   1d1a4:	ldr	r0, [r0]
   1d1a8:	add	r6, r0, r1, lsl #5
   1d1ac:	add	r2, r3, #20
   1d1b0:	mov	r9, r3
   1d1b4:	add	r3, r1, #1
   1d1b8:	sub	r7, fp, #80	; 0x50
   1d1bc:	str	r3, [r5]
   1d1c0:	str	r4, [r6, #4]!
   1d1c4:	str	r4, [r6, #8]
   1d1c8:	str	r4, [r6, #4]
   1d1cc:	ldm	r2, {r0, r1}
   1d1d0:	mvn	r2, #0
   1d1d4:	str	r2, [r6, #28]
   1d1d8:	str	r4, [r6, #16]
   1d1dc:	str	r4, [r6, #12]
   1d1e0:	str	r0, [r6, #20]
   1d1e4:	bic	r0, r1, #786432	; 0xc0000
   1d1e8:	str	r0, [r6, #24]
   1d1ec:	mov	r0, r6
   1d1f0:	str	r6, [fp, #-80]	; 0xffffffb0
   1d1f4:	ldr	r1, [sp, #36]	; 0x24
   1d1f8:	str	r1, [r0]
   1d1fc:	ldr	r0, [r7]
   1d200:	ldr	r1, [r0, #24]
   1d204:	orr	r1, r1, #262144	; 0x40000
   1d208:	str	r1, [r0, #24]
   1d20c:	ldr	r0, [r9, #4]
   1d210:	ldr	r1, [r7]
   1d214:	cmp	r0, #0
   1d218:	str	r1, [sp, #36]	; 0x24
   1d21c:	beq	1d22c <__assert_fail@plt+0xbd7c>
   1d220:	add	r7, r1, #4
   1d224:	mov	r9, r0
   1d228:	b	1d26c <__assert_fail@plt+0xbdbc>
   1d22c:	mov	r1, #0
   1d230:	mov	r0, r9
   1d234:	ldr	r9, [r9, #8]
   1d238:	cmp	r9, r1
   1d23c:	cmpne	r9, #0
   1d240:	bne	1d264 <__assert_fail@plt+0xbdb4>
   1d244:	ldr	r1, [sp, #36]	; 0x24
   1d248:	ldr	r9, [r0]
   1d24c:	ldr	r1, [r1]
   1d250:	cmp	r9, #0
   1d254:	str	r1, [sp, #36]	; 0x24
   1d258:	mov	r1, r0
   1d25c:	bne	1d230 <__assert_fail@plt+0xbd80>
   1d260:	b	1d2f8 <__assert_fail@plt+0xbe48>
   1d264:	ldr	r0, [sp, #36]	; 0x24
   1d268:	add	r7, r0, #8
   1d26c:	ldr	r1, [r5]
   1d270:	cmp	r1, #31
   1d274:	beq	1d2c4 <__assert_fail@plt+0xbe14>
   1d278:	ldr	r0, [sp, #60]	; 0x3c
   1d27c:	ldr	r0, [r0]
   1d280:	add	r0, r0, r1, lsl #5
   1d284:	add	r3, r1, #1
   1d288:	add	r2, r9, #20
   1d28c:	str	r3, [r5]
   1d290:	mvn	r3, #0
   1d294:	str	r4, [r0, #4]!
   1d298:	str	r4, [r0, #8]
   1d29c:	str	r4, [r0, #4]
   1d2a0:	ldm	r2, {r1, r2}
   1d2a4:	str	r3, [r0, #28]
   1d2a8:	str	r4, [r0, #16]
   1d2ac:	str	r4, [r0, #12]
   1d2b0:	str	r1, [r0, #20]
   1d2b4:	bic	r1, r2, #786432	; 0xc0000
   1d2b8:	str	r1, [r0, #24]
   1d2bc:	str	r0, [r7]
   1d2c0:	b	1d1f4 <__assert_fail@plt+0xbd44>
   1d2c4:	mov	r0, #996	; 0x3e4
   1d2c8:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d2cc:	cmp	r0, #0
   1d2d0:	beq	1d404 <__assert_fail@plt+0xbf54>
   1d2d4:	ldr	r2, [sp, #60]	; 0x3c
   1d2d8:	ldr	ip, [sp, #48]	; 0x30
   1d2dc:	ldr	lr, [sp, #44]	; 0x2c
   1d2e0:	ldr	r1, [r2]
   1d2e4:	str	r1, [r0]
   1d2e8:	mov	r1, #0
   1d2ec:	str	r0, [r2]
   1d2f0:	str	r1, [r5]
   1d2f4:	b	1d280 <__assert_fail@plt+0xbdd0>
   1d2f8:	mov	r3, r6
   1d2fc:	ldr	r1, [r5]
   1d300:	cmp	r1, #31
   1d304:	beq	1d3b0 <__assert_fail@plt+0xbf00>
   1d308:	ldr	r0, [sp, #60]	; 0x3c
   1d30c:	ldr	r0, [r0]
   1d310:	add	r2, r1, #1
   1d314:	add	r1, r0, r1, lsl #5
   1d318:	mov	r0, #16
   1d31c:	cmp	r3, #0
   1d320:	str	r2, [r5]
   1d324:	str	r4, [r1, #4]!
   1d328:	str	sl, [r1, #4]
   1d32c:	str	r3, [r1, #8]
   1d330:	str	r4, [r1, #12]
   1d334:	str	r4, [r1, #16]
   1d338:	str	r4, [r1, #20]
   1d33c:	str	r0, [r1, #24]
   1d340:	mvn	r0, #0
   1d344:	str	r1, [sp, #36]	; 0x24
   1d348:	str	r0, [r1, #28]
   1d34c:	str	r1, [sl]
   1d350:	beq	1d6c0 <__assert_fail@plt+0xc210>
   1d354:	ldr	r1, [sp, #56]	; 0x38
   1d358:	ldr	sl, [sp, #36]	; 0x24
   1d35c:	add	r0, r1, #1
   1d360:	cmp	r1, r8
   1d364:	str	sl, [r3]
   1d368:	bne	1d190 <__assert_fail@plt+0xbce0>
   1d36c:	b	1d44c <__assert_fail@plt+0xbf9c>
   1d370:	mov	r0, #996	; 0x3e4
   1d374:	mov	r6, r3
   1d378:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d37c:	cmp	r0, #0
   1d380:	beq	1d3ec <__assert_fail@plt+0xbf3c>
   1d384:	ldr	r2, [sp, #60]	; 0x3c
   1d388:	ldr	r5, [sp, #24]
   1d38c:	ldr	ip, [sp, #48]	; 0x30
   1d390:	ldr	lr, [sp, #44]	; 0x2c
   1d394:	mov	r3, r6
   1d398:	ldr	r1, [r2]
   1d39c:	str	r1, [r0]
   1d3a0:	mov	r1, #0
   1d3a4:	str	r0, [r2]
   1d3a8:	str	r1, [r5]
   1d3ac:	b	1d1a8 <__assert_fail@plt+0xbcf8>
   1d3b0:	mov	r0, #996	; 0x3e4
   1d3b4:	mov	r6, r3
   1d3b8:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d3bc:	ldr	lr, [sp, #44]	; 0x2c
   1d3c0:	ldr	ip, [sp, #48]	; 0x30
   1d3c4:	cmp	r0, #0
   1d3c8:	beq	1d6c0 <__assert_fail@plt+0xc210>
   1d3cc:	ldr	r2, [sp, #60]	; 0x3c
   1d3d0:	mov	r3, r6
   1d3d4:	ldr	r1, [r2]
   1d3d8:	str	r1, [r0]
   1d3dc:	mov	r1, #0
   1d3e0:	str	r0, [r2]
   1d3e4:	str	r1, [r5]
   1d3e8:	b	1d310 <__assert_fail@plt+0xbe60>
   1d3ec:	ldr	ip, [sp, #48]	; 0x30
   1d3f0:	ldr	lr, [sp, #44]	; 0x2c
   1d3f4:	ldr	r5, [sp, #24]
   1d3f8:	mov	r3, #0
   1d3fc:	str	r3, [fp, #-80]	; 0xffffffb0
   1d400:	b	1d2fc <__assert_fail@plt+0xbe4c>
   1d404:	ldr	ip, [sp, #48]	; 0x30
   1d408:	ldr	lr, [sp, #44]	; 0x2c
   1d40c:	mov	r3, #0
   1d410:	str	r3, [r7]
   1d414:	b	1d2fc <__assert_fail@plt+0xbe4c>
   1d418:	mov	r0, #996	; 0x3e4
   1d41c:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d420:	ldr	lr, [sp, #44]	; 0x2c
   1d424:	ldr	ip, [sp, #48]	; 0x30
   1d428:	cmp	r0, #0
   1d42c:	beq	1d6c0 <__assert_fail@plt+0xc210>
   1d430:	ldr	r2, [sp, #60]	; 0x3c
   1d434:	ldr	r1, [r2]
   1d438:	str	r1, [r0]
   1d43c:	mov	r1, #0
   1d440:	str	r0, [r2]
   1d444:	str	r1, [r5]
   1d448:	b	1cd10 <__assert_fail@plt+0xb860>
   1d44c:	ldr	sl, [sp, #52]	; 0x34
   1d450:	mov	r0, #0
   1d454:	cmp	r8, sl
   1d458:	bne	1d4b4 <__assert_fail@plt+0xc004>
   1d45c:	ldr	r7, [sp, #36]	; 0x24
   1d460:	ldr	r5, [sp, #28]
   1d464:	b	1d6f8 <__assert_fail@plt+0xc248>
   1d468:	ldr	r0, [sp, #20]
   1d46c:	mov	r1, #10
   1d470:	b	1d628 <__assert_fail@plt+0xc178>
   1d474:	mov	r0, #996	; 0x3e4
   1d478:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d47c:	cmp	r0, #0
   1d480:	beq	1d64c <__assert_fail@plt+0xc19c>
   1d484:	ldr	r2, [sp, #60]	; 0x3c
   1d488:	ldr	ip, [sp, #48]	; 0x30
   1d48c:	ldr	lr, [sp, #44]	; 0x2c
   1d490:	ldr	r1, [r2]
   1d494:	str	r1, [r0]
   1d498:	mov	r1, #0
   1d49c:	str	r0, [r2]
   1d4a0:	str	r1, [r5]
   1d4a4:	b	1d054 <__assert_fail@plt+0xbba4>
   1d4a8:	ldr	ip, [sp, #48]	; 0x30
   1d4ac:	ldr	r9, [sp, #56]	; 0x38
   1d4b0:	b	1cae8 <__assert_fail@plt+0xb638>
   1d4b4:	mov	r6, r3
   1d4b8:	ldr	r1, [r5]
   1d4bc:	ldr	r9, [r6], #20
   1d4c0:	cmp	r1, #31
   1d4c4:	beq	1d664 <__assert_fail@plt+0xc1b4>
   1d4c8:	ldr	r0, [sp, #60]	; 0x3c
   1d4cc:	ldr	r0, [r0]
   1d4d0:	add	r7, r0, r1, lsl #5
   1d4d4:	add	r2, r1, #1
   1d4d8:	str	r2, [r5]
   1d4dc:	mvn	r2, #0
   1d4e0:	str	r4, [r7, #4]!
   1d4e4:	str	r4, [r7, #8]
   1d4e8:	str	r4, [r7, #4]
   1d4ec:	ldm	r6, {r0, r1}
   1d4f0:	str	r2, [r7, #28]
   1d4f4:	str	r4, [r7, #16]
   1d4f8:	str	r4, [r7, #12]
   1d4fc:	sub	r6, fp, #80	; 0x50
   1d500:	str	r0, [r7, #20]
   1d504:	bic	r0, r1, #786432	; 0xc0000
   1d508:	str	r0, [r7, #24]
   1d50c:	mov	r0, r7
   1d510:	str	r7, [fp, #-80]	; 0xffffffb0
   1d514:	str	r9, [r0]
   1d518:	ldr	r0, [r6]
   1d51c:	ldr	r1, [r0, #24]
   1d520:	orr	r1, r1, #262144	; 0x40000
   1d524:	str	r1, [r0, #24]
   1d528:	ldr	r0, [r3, #4]
   1d52c:	ldr	r9, [r6]
   1d530:	cmp	r0, #0
   1d534:	beq	1d544 <__assert_fail@plt+0xc094>
   1d538:	add	r2, r9, #4
   1d53c:	mov	r6, r0
   1d540:	b	1d578 <__assert_fail@plt+0xc0c8>
   1d544:	mov	r1, #0
   1d548:	ldr	r6, [r3, #8]
   1d54c:	mov	r0, r3
   1d550:	cmp	r6, r1
   1d554:	cmpne	r6, #0
   1d558:	bne	1d574 <__assert_fail@plt+0xc0c4>
   1d55c:	ldr	r3, [r0]
   1d560:	ldr	r9, [r9]
   1d564:	mov	r1, r0
   1d568:	cmp	r3, #0
   1d56c:	bne	1d548 <__assert_fail@plt+0xc098>
   1d570:	b	1cc74 <__assert_fail@plt+0xb7c4>
   1d574:	add	r2, r9, #8
   1d578:	ldr	r1, [r5]
   1d57c:	str	r2, [sp, #56]	; 0x38
   1d580:	cmp	r1, #31
   1d584:	beq	1d5dc <__assert_fail@plt+0xc12c>
   1d588:	ldr	r0, [sp, #60]	; 0x3c
   1d58c:	ldr	r0, [r0]
   1d590:	add	r0, r0, r1, lsl #5
   1d594:	add	r3, r1, #1
   1d598:	add	r2, r6, #20
   1d59c:	str	r3, [r5]
   1d5a0:	mvn	r3, #0
   1d5a4:	str	r4, [r0, #4]!
   1d5a8:	str	r4, [r0, #8]
   1d5ac:	str	r4, [r0, #4]
   1d5b0:	ldm	r2, {r1, r2}
   1d5b4:	str	r3, [r0, #28]
   1d5b8:	mov	r3, r6
   1d5bc:	ldr	r6, [sp, #56]	; 0x38
   1d5c0:	str	r4, [r0, #16]
   1d5c4:	str	r4, [r0, #12]
   1d5c8:	str	r1, [r0, #20]
   1d5cc:	bic	r1, r2, #786432	; 0xc0000
   1d5d0:	str	r1, [r0, #24]
   1d5d4:	str	r0, [r6]
   1d5d8:	b	1d514 <__assert_fail@plt+0xc064>
   1d5dc:	mov	r0, #996	; 0x3e4
   1d5e0:	str	r6, [sp, #12]
   1d5e4:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d5e8:	cmp	r0, #0
   1d5ec:	beq	1d6b0 <__assert_fail@plt+0xc200>
   1d5f0:	ldr	r2, [sp, #60]	; 0x3c
   1d5f4:	ldr	r5, [sp, #24]
   1d5f8:	ldr	ip, [sp, #48]	; 0x30
   1d5fc:	ldr	lr, [sp, #44]	; 0x2c
   1d600:	ldr	sl, [sp, #52]	; 0x34
   1d604:	ldr	r6, [sp, #12]
   1d608:	ldr	r1, [r2]
   1d60c:	str	r1, [r0]
   1d610:	mov	r1, #0
   1d614:	str	r0, [r2]
   1d618:	str	r1, [r5]
   1d61c:	b	1d590 <__assert_fail@plt+0xc0e0>
   1d620:	ldr	r0, [sp, #20]
   1d624:	mov	r1, #15
   1d628:	str	r1, [r0]
   1d62c:	mov	r7, #0
   1d630:	b	1d6d8 <__assert_fail@plt+0xc228>
   1d634:	ldr	r1, [sp, #20]
   1d638:	cmp	r0, #2
   1d63c:	mov	r0, #10
   1d640:	movweq	r0, #9
   1d644:	str	r0, [r1]
   1d648:	b	1cab8 <__assert_fail@plt+0xb608>
   1d64c:	ldr	ip, [sp, #48]	; 0x30
   1d650:	ldr	lr, [sp, #44]	; 0x2c
   1d654:	ldr	r9, [sp, #40]	; 0x28
   1d658:	mov	r7, #0
   1d65c:	mov	r5, r8
   1d660:	b	1d6d8 <__assert_fail@plt+0xc228>
   1d664:	mov	r0, #996	; 0x3e4
   1d668:	mov	r7, r3
   1d66c:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d670:	cmp	r0, #0
   1d674:	beq	1d6a8 <__assert_fail@plt+0xc1f8>
   1d678:	ldr	r2, [sp, #60]	; 0x3c
   1d67c:	ldr	r5, [sp, #24]
   1d680:	ldr	ip, [sp, #48]	; 0x30
   1d684:	ldr	lr, [sp, #44]	; 0x2c
   1d688:	ldr	sl, [sp, #52]	; 0x34
   1d68c:	mov	r3, r7
   1d690:	ldr	r1, [r2]
   1d694:	str	r1, [r0]
   1d698:	mov	r1, #0
   1d69c:	str	r0, [r2]
   1d6a0:	str	r1, [r5]
   1d6a4:	b	1d4d0 <__assert_fail@plt+0xc020>
   1d6a8:	str	r4, [fp, #-80]	; 0xffffffb0
   1d6ac:	b	1d6b8 <__assert_fail@plt+0xc208>
   1d6b0:	ldr	r0, [sp, #56]	; 0x38
   1d6b4:	str	r4, [r0]
   1d6b8:	ldr	ip, [sp, #48]	; 0x30
   1d6bc:	ldr	lr, [sp, #44]	; 0x2c
   1d6c0:	ldr	r0, [sp, #20]
   1d6c4:	ldr	r5, [sp, #28]
   1d6c8:	ldr	r9, [sp, #40]	; 0x28
   1d6cc:	mov	r1, #12
   1d6d0:	mov	r7, #0
   1d6d4:	str	r1, [r0]
   1d6d8:	clz	r0, r7
   1d6dc:	cmp	r7, #0
   1d6e0:	lsr	r0, r0, #5
   1d6e4:	bne	1d6f8 <__assert_fail@plt+0xc248>
   1d6e8:	ldr	r1, [sp, #20]
   1d6ec:	ldr	r1, [r1]
   1d6f0:	cmp	r1, #0
   1d6f4:	bne	1d7d4 <__assert_fail@plt+0xc324>
   1d6f8:	ldr	r1, [sp, #32]
   1d6fc:	cmp	r1, #0
   1d700:	beq	1c998 <__assert_fail@plt+0xb4e8>
   1d704:	ldrb	r1, [lr, #4]
   1d708:	cmp	r1, #23
   1d70c:	cmpne	r1, #11
   1d710:	bne	1c998 <__assert_fail@plt+0xb4e8>
   1d714:	movw	r6, #255	; 0xff
   1d718:	cmp	r0, #0
   1d71c:	movt	r6, #4
   1d720:	bne	1d7b8 <__assert_fail@plt+0xc308>
   1d724:	mov	r5, r7
   1d728:	ldr	r7, [r7, #4]
   1d72c:	cmp	r7, #0
   1d730:	bne	1d724 <__assert_fail@plt+0xc274>
   1d734:	ldr	r7, [r5, #8]
   1d738:	cmp	r7, #0
   1d73c:	bne	1d724 <__assert_fail@plt+0xc274>
   1d740:	ldr	r0, [r5, #24]
   1d744:	and	r0, r0, r6
   1d748:	cmp	r0, #3
   1d74c:	beq	1d780 <__assert_fail@plt+0xc2d0>
   1d750:	cmp	r0, #6
   1d754:	bne	1d78c <__assert_fail@plt+0xc2dc>
   1d758:	ldr	r4, [r5, #20]
   1d75c:	ldr	r0, [r4]
   1d760:	bl	29220 <__assert_fail@plt+0x17d70>
   1d764:	ldr	r0, [r4, #4]
   1d768:	bl	29220 <__assert_fail@plt+0x17d70>
   1d76c:	ldr	r0, [r4, #8]
   1d770:	bl	29220 <__assert_fail@plt+0x17d70>
   1d774:	ldr	r0, [r4, #12]
   1d778:	bl	29220 <__assert_fail@plt+0x17d70>
   1d77c:	b	1d784 <__assert_fail@plt+0xc2d4>
   1d780:	ldr	r4, [r5, #20]
   1d784:	mov	r0, r4
   1d788:	bl	29220 <__assert_fail@plt+0x17d70>
   1d78c:	ldr	r0, [r5]
   1d790:	cmp	r0, #0
   1d794:	beq	1d7b8 <__assert_fail@plt+0xc308>
   1d798:	ldr	r7, [r0, #8]
   1d79c:	cmp	r7, r5
   1d7a0:	mov	r5, r0
   1d7a4:	beq	1d740 <__assert_fail@plt+0xc290>
   1d7a8:	cmp	r7, #0
   1d7ac:	mov	r5, r0
   1d7b0:	beq	1d740 <__assert_fail@plt+0xc290>
   1d7b4:	b	1d724 <__assert_fail@plt+0xc274>
   1d7b8:	mov	r0, #13
   1d7bc:	ldr	r1, [sp, #20]
   1d7c0:	mov	r9, #0
   1d7c4:	str	r0, [r1]
   1d7c8:	mov	r0, r9
   1d7cc:	sub	sp, fp, #28
   1d7d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7d4:	cmp	r9, #0
   1d7d8:	beq	1bf04 <__assert_fail@plt+0xaa54>
   1d7dc:	movw	r6, #255	; 0xff
   1d7e0:	movt	r6, #4
   1d7e4:	mov	r5, r9
   1d7e8:	ldr	r9, [r9, #4]
   1d7ec:	cmp	r9, #0
   1d7f0:	bne	1d7e4 <__assert_fail@plt+0xc334>
   1d7f4:	ldr	r9, [r5, #8]
   1d7f8:	cmp	r9, #0
   1d7fc:	bne	1d7e4 <__assert_fail@plt+0xc334>
   1d800:	ldr	r0, [r5, #24]
   1d804:	and	r0, r0, r6
   1d808:	cmp	r0, #3
   1d80c:	beq	1d840 <__assert_fail@plt+0xc390>
   1d810:	cmp	r0, #6
   1d814:	bne	1d84c <__assert_fail@plt+0xc39c>
   1d818:	ldr	r4, [r5, #20]
   1d81c:	ldr	r0, [r4]
   1d820:	bl	29220 <__assert_fail@plt+0x17d70>
   1d824:	ldr	r0, [r4, #4]
   1d828:	bl	29220 <__assert_fail@plt+0x17d70>
   1d82c:	ldr	r0, [r4, #8]
   1d830:	bl	29220 <__assert_fail@plt+0x17d70>
   1d834:	ldr	r0, [r4, #12]
   1d838:	bl	29220 <__assert_fail@plt+0x17d70>
   1d83c:	b	1d844 <__assert_fail@plt+0xc394>
   1d840:	ldr	r4, [r5, #20]
   1d844:	mov	r0, r4
   1d848:	bl	29220 <__assert_fail@plt+0x17d70>
   1d84c:	ldr	r0, [r5]
   1d850:	cmp	r0, #0
   1d854:	beq	1bf04 <__assert_fail@plt+0xaa54>
   1d858:	ldr	r9, [r0, #8]
   1d85c:	cmp	r9, r5
   1d860:	mov	r5, r0
   1d864:	beq	1d800 <__assert_fail@plt+0xc350>
   1d868:	cmp	r9, #0
   1d86c:	mov	r5, r0
   1d870:	beq	1d800 <__assert_fail@plt+0xc350>
   1d874:	b	1d7e4 <__assert_fail@plt+0xc334>
   1d878:	cmp	r0, #2
   1d87c:	blt	1d898 <__assert_fail@plt+0xc3e8>
   1d880:	ldr	r0, [r7, #36]	; 0x24
   1d884:	cmp	r0, #0
   1d888:	bne	1c5fc <__assert_fail@plt+0xb14c>
   1d88c:	ldrb	r0, [r7, #16]
   1d890:	tst	r0, #1
   1d894:	bne	1c5fc <__assert_fail@plt+0xb14c>
   1d898:	ldr	r0, [r7]
   1d89c:	bl	29220 <__assert_fail@plt+0x17d70>
   1d8a0:	ldr	r0, [r7, #4]
   1d8a4:	bl	29220 <__assert_fail@plt+0x17d70>
   1d8a8:	ldr	r0, [r7, #8]
   1d8ac:	bl	29220 <__assert_fail@plt+0x17d70>
   1d8b0:	ldr	r0, [r7, #12]
   1d8b4:	bl	29220 <__assert_fail@plt+0x17d70>
   1d8b8:	mov	r0, r7
   1d8bc:	bl	29220 <__assert_fail@plt+0x17d70>
   1d8c0:	ldr	r1, [sl, #64]	; 0x40
   1d8c4:	cmp	r1, #31
   1d8c8:	beq	1de04 <__assert_fail@plt+0xc954>
   1d8cc:	ldr	r0, [sl, #56]	; 0x38
   1d8d0:	add	r0, r0, r1, lsl #5
   1d8d4:	add	r2, r1, #1
   1d8d8:	vmov.i32	q8, #0	; 0x00000000
   1d8dc:	ldr	ip, [sp, #48]	; 0x30
   1d8e0:	ldr	lr, [sp, #44]	; 0x2c
   1d8e4:	mov	r1, #3
   1d8e8:	str	r2, [sl, #64]	; 0x40
   1d8ec:	mov	r2, #0
   1d8f0:	add	r7, r0, #4
   1d8f4:	str	r2, [r0, #20]
   1d8f8:	str	r8, [r0, #24]
   1d8fc:	str	r1, [r0, #28]
   1d900:	mov	r0, #28
   1d904:	mov	r1, r7
   1d908:	vst1.32	{d16-d17}, [r1], r0
   1d90c:	mvn	r0, #0
   1d910:	str	r0, [r1]
   1d914:	b	1c950 <__assert_fail@plt+0xb4a0>
   1d918:	ldr	r8, [sp, #24]
   1d91c:	ldr	r0, [sp, #20]
   1d920:	ldr	r5, [sp, #28]
   1d924:	ldr	sl, [sp, #52]	; 0x34
   1d928:	ldr	r7, [sp, #60]	; 0x3c
   1d92c:	str	r9, [r0]
   1d930:	ldr	r4, [sp, #20]
   1d934:	mov	r0, r8
   1d938:	bl	29220 <__assert_fail@plt+0x17d70>
   1d93c:	ldr	r0, [r7]
   1d940:	bl	29220 <__assert_fail@plt+0x17d70>
   1d944:	ldr	r0, [r7, #4]
   1d948:	bl	29220 <__assert_fail@plt+0x17d70>
   1d94c:	ldr	r0, [r7, #8]
   1d950:	bl	29220 <__assert_fail@plt+0x17d70>
   1d954:	ldr	r0, [r7, #12]
   1d958:	bl	29220 <__assert_fail@plt+0x17d70>
   1d95c:	mov	r0, r7
   1d960:	bl	29220 <__assert_fail@plt+0x17d70>
   1d964:	ldr	r0, [r4]
   1d968:	mov	r7, #0
   1d96c:	mov	r9, #0
   1d970:	b	1ba94 <__assert_fail@plt+0xa5e4>
   1d974:	mov	r0, #996	; 0x3e4
   1d978:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d97c:	cmp	r0, #0
   1d980:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1d984:	ldr	r1, [sl, #56]	; 0x38
   1d988:	ldr	r5, [sp, #28]
   1d98c:	ldr	ip, [sp, #48]	; 0x30
   1d990:	ldr	lr, [sp, #44]	; 0x2c
   1d994:	str	r1, [r0]
   1d998:	mov	r1, #0
   1d99c:	str	r1, [sl, #64]	; 0x40
   1d9a0:	str	r0, [sl, #56]	; 0x38
   1d9a4:	b	1b9ec <__assert_fail@plt+0xa53c>
   1d9a8:	mov	r9, r0
   1d9ac:	str	sl, [sp, #52]	; 0x34
   1d9b0:	b	1d91c <__assert_fail@plt+0xc46c>
   1d9b4:	mov	r9, #7
   1d9b8:	str	sl, [sp, #52]	; 0x34
   1d9bc:	b	1d91c <__assert_fail@plt+0xc46c>
   1d9c0:	ldr	r4, [sp, #20]
   1d9c4:	ldr	r7, [sp, #60]	; 0x3c
   1d9c8:	mov	r0, #2
   1d9cc:	str	r0, [r4]
   1d9d0:	b	1d934 <__assert_fail@plt+0xc484>
   1d9d4:	mov	r0, r8
   1d9d8:	bl	29220 <__assert_fail@plt+0x17d70>
   1d9dc:	mov	r0, r7
   1d9e0:	bl	29220 <__assert_fail@plt+0x17d70>
   1d9e4:	b	1c850 <__assert_fail@plt+0xb3a0>
   1d9e8:	mov	r0, #996	; 0x3e4
   1d9ec:	bl	29054 <__assert_fail@plt+0x17ba4>
   1d9f0:	cmp	r0, #0
   1d9f4:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1d9f8:	ldr	r1, [sl, #56]	; 0x38
   1d9fc:	ldr	r5, [sp, #28]
   1da00:	ldr	ip, [sp, #48]	; 0x30
   1da04:	ldr	lr, [sp, #44]	; 0x2c
   1da08:	str	r1, [r0]
   1da0c:	mov	r1, #0
   1da10:	str	r1, [sl, #64]	; 0x40
   1da14:	str	r0, [sl, #56]	; 0x38
   1da18:	b	1bbf8 <__assert_fail@plt+0xa748>
   1da1c:	mov	r0, #6
   1da20:	b	1c854 <__assert_fail@plt+0xb3a4>
   1da24:	mov	r0, #996	; 0x3e4
   1da28:	bl	29054 <__assert_fail@plt+0x17ba4>
   1da2c:	cmp	r0, #0
   1da30:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1da34:	ldr	r1, [sl, #56]	; 0x38
   1da38:	ldr	r5, [sp, #28]
   1da3c:	ldr	ip, [sp, #48]	; 0x30
   1da40:	ldr	lr, [sp, #44]	; 0x2c
   1da44:	str	r1, [r0]
   1da48:	mov	r1, #0
   1da4c:	str	r1, [sl, #64]	; 0x40
   1da50:	str	r0, [sl, #56]	; 0x38
   1da54:	b	1be38 <__assert_fail@plt+0xa988>
   1da58:	mov	r0, #996	; 0x3e4
   1da5c:	bl	29054 <__assert_fail@plt+0x17ba4>
   1da60:	cmp	r0, #0
   1da64:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1da68:	ldr	r1, [sl, #56]	; 0x38
   1da6c:	ldr	r5, [sp, #28]
   1da70:	ldr	ip, [sp, #48]	; 0x30
   1da74:	ldr	lr, [sp, #44]	; 0x2c
   1da78:	str	r1, [r0]
   1da7c:	mov	r1, #0
   1da80:	str	r1, [sl, #64]	; 0x40
   1da84:	str	r0, [sl, #56]	; 0x38
   1da88:	b	1bddc <__assert_fail@plt+0xa92c>
   1da8c:	mov	r0, #996	; 0x3e4
   1da90:	bl	29054 <__assert_fail@plt+0x17ba4>
   1da94:	cmp	r0, #0
   1da98:	beq	1de34 <__assert_fail@plt+0xc984>
   1da9c:	ldr	r1, [sl, #56]	; 0x38
   1daa0:	ldr	ip, [sp, #48]	; 0x30
   1daa4:	ldr	lr, [sp, #44]	; 0x2c
   1daa8:	str	r1, [r0]
   1daac:	mov	r1, #0
   1dab0:	str	r1, [sl, #64]	; 0x40
   1dab4:	str	r0, [sl, #56]	; 0x38
   1dab8:	b	1c618 <__assert_fail@plt+0xb168>
   1dabc:	mov	r0, #996	; 0x3e4
   1dac0:	bl	29054 <__assert_fail@plt+0x17ba4>
   1dac4:	cmp	r0, #0
   1dac8:	beq	1de34 <__assert_fail@plt+0xc984>
   1dacc:	ldr	r1, [sl, #56]	; 0x38
   1dad0:	ldr	ip, [sp, #48]	; 0x30
   1dad4:	ldr	lr, [sp, #44]	; 0x2c
   1dad8:	str	r1, [r0]
   1dadc:	mov	r1, #0
   1dae0:	str	r1, [sl, #64]	; 0x40
   1dae4:	str	r0, [sl, #56]	; 0x38
   1dae8:	b	1c6c4 <__assert_fail@plt+0xb214>
   1daec:	mov	r0, #996	; 0x3e4
   1daf0:	bl	29054 <__assert_fail@plt+0x17ba4>
   1daf4:	cmp	r0, #0
   1daf8:	beq	1de34 <__assert_fail@plt+0xc984>
   1dafc:	ldr	r1, [sl, #56]	; 0x38
   1db00:	ldr	ip, [sp, #48]	; 0x30
   1db04:	ldr	lr, [sp, #44]	; 0x2c
   1db08:	str	r1, [r0]
   1db0c:	mov	r1, #0
   1db10:	str	r1, [sl, #64]	; 0x40
   1db14:	str	r0, [sl, #56]	; 0x38
   1db18:	b	1c710 <__assert_fail@plt+0xb260>
   1db1c:	str	sl, [sp, #52]	; 0x34
   1db20:	mov	r9, #3
   1db24:	b	1d91c <__assert_fail@plt+0xc46c>
   1db28:	mov	r0, r8
   1db2c:	bl	29220 <__assert_fail@plt+0x17d70>
   1db30:	ldr	lr, [sp, #44]	; 0x2c
   1db34:	ldr	ip, [sp, #48]	; 0x30
   1db38:	mov	r7, r4
   1db3c:	b	1c950 <__assert_fail@plt+0xb4a0>
   1db40:	mov	r0, #996	; 0x3e4
   1db44:	bl	29054 <__assert_fail@plt+0x17ba4>
   1db48:	cmp	r0, #0
   1db4c:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1db50:	ldr	r1, [sl, #56]	; 0x38
   1db54:	ldr	r5, [sp, #28]
   1db58:	ldr	ip, [sp, #48]	; 0x30
   1db5c:	ldr	lr, [sp, #44]	; 0x2c
   1db60:	str	r1, [r0]
   1db64:	mov	r1, #0
   1db68:	str	r1, [sl, #64]	; 0x40
   1db6c:	str	r0, [sl, #56]	; 0x38
   1db70:	b	1c90c <__assert_fail@plt+0xb45c>
   1db74:	mov	r0, #996	; 0x3e4
   1db78:	bl	29054 <__assert_fail@plt+0x17ba4>
   1db7c:	cmp	r0, #0
   1db80:	beq	1dd0c <__assert_fail@plt+0xc85c>
   1db84:	ldr	r1, [sl, #56]	; 0x38
   1db88:	ldr	ip, [sp, #48]	; 0x30
   1db8c:	ldr	lr, [sp, #44]	; 0x2c
   1db90:	mov	r9, #0
   1db94:	str	r1, [r0]
   1db98:	mov	r1, #0
   1db9c:	str	r1, [sl, #64]	; 0x40
   1dba0:	str	r0, [sl, #56]	; 0x38
   1dba4:	b	1c7bc <__assert_fail@plt+0xb30c>
   1dba8:	mov	r0, #996	; 0x3e4
   1dbac:	bl	29054 <__assert_fail@plt+0x17ba4>
   1dbb0:	ldr	lr, [sp, #44]	; 0x2c
   1dbb4:	ldr	ip, [sp, #48]	; 0x30
   1dbb8:	cmp	r0, #0
   1dbbc:	beq	1c850 <__assert_fail@plt+0xb3a0>
   1dbc0:	ldr	r1, [sl, #56]	; 0x38
   1dbc4:	str	r1, [r0]
   1dbc8:	mov	r1, #0
   1dbcc:	str	r1, [sl, #64]	; 0x40
   1dbd0:	str	r0, [sl, #56]	; 0x38
   1dbd4:	b	1c808 <__assert_fail@plt+0xb358>
   1dbd8:	mov	r0, #996	; 0x3e4
   1dbdc:	bl	29054 <__assert_fail@plt+0x17ba4>
   1dbe0:	cmp	r0, #0
   1dbe4:	beq	1dde0 <__assert_fail@plt+0xc930>
   1dbe8:	ldr	r1, [sl, #56]	; 0x38
   1dbec:	ldr	ip, [sp, #48]	; 0x30
   1dbf0:	ldr	lr, [sp, #44]	; 0x2c
   1dbf4:	mov	r9, #0
   1dbf8:	str	r1, [r0]
   1dbfc:	mov	r1, #0
   1dc00:	str	r1, [sl, #64]	; 0x40
   1dc04:	str	r0, [sl, #56]	; 0x38
   1dc08:	b	1bb30 <__assert_fail@plt+0xa680>
   1dc0c:	mov	r0, #996	; 0x3e4
   1dc10:	bl	29054 <__assert_fail@plt+0x17ba4>
   1dc14:	cmp	r0, #0
   1dc18:	beq	1ddec <__assert_fail@plt+0xc93c>
   1dc1c:	ldr	r1, [sl, #56]	; 0x38
   1dc20:	ldr	ip, [sp, #48]	; 0x30
   1dc24:	ldr	lr, [sp, #44]	; 0x2c
   1dc28:	mov	r9, #0
   1dc2c:	str	r1, [r0]
   1dc30:	mov	r1, #0
   1dc34:	str	r1, [sl, #64]	; 0x40
   1dc38:	str	r0, [sl, #56]	; 0x38
   1dc3c:	b	1c768 <__assert_fail@plt+0xb2b8>
   1dc40:	mov	r0, #996	; 0x3e4
   1dc44:	bl	29054 <__assert_fail@plt+0x17ba4>
   1dc48:	cmp	r0, #0
   1dc4c:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1dc50:	ldr	r1, [sl, #56]	; 0x38
   1dc54:	ldr	ip, [sp, #48]	; 0x30
   1dc58:	ldr	lr, [sp, #44]	; 0x2c
   1dc5c:	str	r1, [r0]
   1dc60:	mov	r1, #0
   1dc64:	str	r1, [sl, #64]	; 0x40
   1dc68:	str	r0, [sl, #56]	; 0x38
   1dc6c:	b	1c86c <__assert_fail@plt+0xb3bc>
   1dc70:	mov	r0, #12
   1dc74:	b	1d7bc <__assert_fail@plt+0xc30c>
   1dc78:	mov	r4, #0
   1dc7c:	mov	r5, #0
   1dc80:	b	1dc8c <__assert_fail@plt+0xc7dc>
   1dc84:	mov	r5, #4
   1dc88:	mov	r4, #128	; 0x80
   1dc8c:	bl	1136c <__ctype_b_loc@plt>
   1dc90:	ldr	r0, [r0]
   1dc94:	ldr	ip, [sp, #48]	; 0x30
   1dc98:	ldr	lr, [sp, #44]	; 0x2c
   1dc9c:	mov	r1, #1
   1dca0:	mov	r9, #0
   1dca4:	add	r7, r0, r4, lsl #1
   1dca8:	b	1dcc0 <__assert_fail@plt+0xc810>
   1dcac:	add	r5, r5, #1
   1dcb0:	add	r7, r7, #64	; 0x40
   1dcb4:	add	r4, r4, #32
   1dcb8:	cmp	r5, #8
   1dcbc:	beq	1bb04 <__assert_fail@plt+0xa654>
   1dcc0:	add	r0, sl, r5, lsl #2
   1dcc4:	mov	r3, #0
   1dcc8:	add	r2, r0, #96	; 0x60
   1dccc:	mov	r0, r7
   1dcd0:	b	1dcf0 <__assert_fail@plt+0xc840>
   1dcd4:	ldr	r6, [r2]
   1dcd8:	orr	r6, r6, r1, lsl r3
   1dcdc:	str	r6, [r2]
   1dce0:	add	r3, r3, #1
   1dce4:	add	r0, r0, #2
   1dce8:	cmp	r3, #32
   1dcec:	beq	1dcac <__assert_fail@plt+0xc7fc>
   1dcf0:	add	r6, r4, r3
   1dcf4:	cmp	r6, #95	; 0x5f
   1dcf8:	beq	1dcd4 <__assert_fail@plt+0xc824>
   1dcfc:	ldrh	r6, [r0]
   1dd00:	ands	r6, r6, #8
   1dd04:	beq	1dce0 <__assert_fail@plt+0xc830>
   1dd08:	b	1dcd4 <__assert_fail@plt+0xc824>
   1dd0c:	ldr	ip, [sp, #48]	; 0x30
   1dd10:	ldr	lr, [sp, #44]	; 0x2c
   1dd14:	mov	r5, #0
   1dd18:	mov	r9, #0
   1dd1c:	b	1c7f8 <__assert_fail@plt+0xb348>
   1dd20:	cmp	r9, #0
   1dd24:	beq	1ddc4 <__assert_fail@plt+0xc914>
   1dd28:	movw	r5, #255	; 0xff
   1dd2c:	movt	r5, #4
   1dd30:	mov	r6, r9
   1dd34:	ldr	r9, [r9, #4]
   1dd38:	cmp	r9, #0
   1dd3c:	bne	1dd30 <__assert_fail@plt+0xc880>
   1dd40:	ldr	r9, [r6, #8]
   1dd44:	cmp	r9, #0
   1dd48:	bne	1dd30 <__assert_fail@plt+0xc880>
   1dd4c:	ldr	r0, [r6, #24]
   1dd50:	and	r0, r0, r5
   1dd54:	cmp	r0, #3
   1dd58:	beq	1dd8c <__assert_fail@plt+0xc8dc>
   1dd5c:	cmp	r0, #6
   1dd60:	bne	1dd98 <__assert_fail@plt+0xc8e8>
   1dd64:	ldr	r4, [r6, #20]
   1dd68:	ldr	r0, [r4]
   1dd6c:	bl	29220 <__assert_fail@plt+0x17d70>
   1dd70:	ldr	r0, [r4, #4]
   1dd74:	bl	29220 <__assert_fail@plt+0x17d70>
   1dd78:	ldr	r0, [r4, #8]
   1dd7c:	bl	29220 <__assert_fail@plt+0x17d70>
   1dd80:	ldr	r0, [r4, #12]
   1dd84:	bl	29220 <__assert_fail@plt+0x17d70>
   1dd88:	b	1dd90 <__assert_fail@plt+0xc8e0>
   1dd8c:	ldr	r4, [r6, #20]
   1dd90:	mov	r0, r4
   1dd94:	bl	29220 <__assert_fail@plt+0x17d70>
   1dd98:	ldr	r0, [r6]
   1dd9c:	cmp	r0, #0
   1dda0:	beq	1ddc4 <__assert_fail@plt+0xc914>
   1dda4:	ldr	r9, [r0, #8]
   1dda8:	cmp	r9, r6
   1ddac:	mov	r6, r0
   1ddb0:	beq	1dd4c <__assert_fail@plt+0xc89c>
   1ddb4:	cmp	r9, #0
   1ddb8:	mov	r6, r0
   1ddbc:	beq	1dd4c <__assert_fail@plt+0xc89c>
   1ddc0:	b	1dd30 <__assert_fail@plt+0xc880>
   1ddc4:	mov	r0, #8
   1ddc8:	b	1d7bc <__assert_fail@plt+0xc30c>
   1ddcc:	ldr	r8, [sp, #24]
   1ddd0:	mov	r9, r0
   1ddd4:	b	1d91c <__assert_fail@plt+0xc46c>
   1ddd8:	ldr	r8, [sp, #24]
   1dddc:	b	1db20 <__assert_fail@plt+0xc670>
   1dde0:	mov	r4, #0
   1dde4:	mov	r0, #9
   1dde8:	b	1ddf4 <__assert_fail@plt+0xc944>
   1ddec:	mov	r4, #0
   1ddf0:	mov	r0, #10
   1ddf4:	ldr	ip, [sp, #48]	; 0x30
   1ddf8:	ldr	lr, [sp, #44]	; 0x2c
   1ddfc:	mov	r9, #0
   1de00:	b	1c7a8 <__assert_fail@plt+0xb2f8>
   1de04:	mov	r0, #996	; 0x3e4
   1de08:	bl	29054 <__assert_fail@plt+0x17ba4>
   1de0c:	cmp	r0, #0
   1de10:	beq	1de34 <__assert_fail@plt+0xc984>
   1de14:	ldr	r1, [sl, #56]	; 0x38
   1de18:	str	r1, [r0]
   1de1c:	mov	r1, #0
   1de20:	str	r1, [sl, #64]	; 0x40
   1de24:	str	r0, [sl, #56]	; 0x38
   1de28:	b	1d8d0 <__assert_fail@plt+0xc420>
   1de2c:	ldr	r5, [sp, #28]
   1de30:	ldr	r7, [sp, #60]	; 0x3c
   1de34:	ldr	r4, [sp, #20]
   1de38:	mov	r0, #12
   1de3c:	str	r0, [r4]
   1de40:	b	1d934 <__assert_fail@plt+0xc484>
   1de44:	mov	r0, r6
   1de48:	bl	29220 <__assert_fail@plt+0x17d70>
   1de4c:	mov	r0, r9
   1de50:	bl	29220 <__assert_fail@plt+0x17d70>
   1de54:	ldr	r8, [sp, #24]
   1de58:	mov	r9, #12
   1de5c:	b	1d91c <__assert_fail@plt+0xc46c>
   1de60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de64:	add	fp, sp, #28
   1de68:	sub	sp, sp, #12
   1de6c:	mov	r9, r1
   1de70:	mov	r6, r0
   1de74:	mov	r4, #0
   1de78:	mov	r0, #32
   1de7c:	mov	r1, #1
   1de80:	mov	sl, r3
   1de84:	mov	r5, r2
   1de88:	str	r4, [sp, #8]
   1de8c:	bl	29000 <__assert_fail@plt+0x17b50>
   1de90:	ldr	r1, [fp, #12]
   1de94:	cmp	r0, #0
   1de98:	beq	1e1e8 <__assert_fail@plt+0xcd38>
   1de9c:	mov	r7, r0
   1dea0:	mov	r0, #40	; 0x28
   1dea4:	mov	r1, #1
   1dea8:	bl	29000 <__assert_fail@plt+0x17b50>
   1deac:	cmp	r0, #0
   1deb0:	beq	1e108 <__assert_fail@plt+0xcc58>
   1deb4:	mov	r8, r0
   1deb8:	ldrb	r0, [r0, #16]
   1debc:	ldr	r1, [fp, #8]
   1dec0:	mov	r4, #0
   1dec4:	add	r3, sp, #8
   1dec8:	str	r5, [sp]
   1decc:	mov	r2, r8
   1ded0:	str	r4, [sp, #4]
   1ded4:	and	r0, r0, #254	; 0xfe
   1ded8:	orr	r0, r0, r1
   1dedc:	mov	r1, r7
   1dee0:	strb	r0, [r8, #16]
   1dee4:	mov	r0, r9
   1dee8:	bl	1e660 <__assert_fail@plt+0xd1b0>
   1deec:	cmp	r0, #0
   1def0:	bne	1e124 <__assert_fail@plt+0xcc74>
   1def4:	ldrb	r0, [sl]
   1def8:	cmp	r0, #0
   1defc:	beq	1df28 <__assert_fail@plt+0xca78>
   1df00:	add	r1, sl, #1
   1df04:	mov	r2, #1
   1df08:	ubfx	r3, r0, #5, #3
   1df0c:	and	r0, r0, #31
   1df10:	ldr	r5, [r7, r3, lsl #2]
   1df14:	orr	r0, r5, r2, lsl r0
   1df18:	str	r0, [r7, r3, lsl #2]
   1df1c:	ldrb	r0, [r1], #1
   1df20:	cmp	r0, #0
   1df24:	bne	1df08 <__assert_fail@plt+0xca58>
   1df28:	ldr	r0, [fp, #8]
   1df2c:	cmp	r0, #0
   1df30:	beq	1df50 <__assert_fail@plt+0xcaa0>
   1df34:	vld1.32	{d16-d17}, [r7]
   1df38:	mov	r0, r7
   1df3c:	vmvn	q8, q8
   1df40:	vst1.32	{d16-d17}, [r0]!
   1df44:	vld1.32	{d16-d17}, [r0]
   1df48:	vmvn	q8, q8
   1df4c:	vst1.32	{d16-d17}, [r0]
   1df50:	ldr	r0, [r6, #92]	; 0x5c
   1df54:	cmp	r0, #2
   1df58:	blt	1dfd4 <__assert_fail@plt+0xcb24>
   1df5c:	ldr	r5, [r6, #60]	; 0x3c
   1df60:	ldm	r7, {r0, r1, r2, ip}
   1df64:	ldr	r3, [r5]
   1df68:	and	r0, r0, r3
   1df6c:	str	r0, [r7]
   1df70:	ldr	r0, [r5, #4]
   1df74:	and	r0, r1, r0
   1df78:	str	r0, [r7, #4]
   1df7c:	ldr	r0, [r5, #8]
   1df80:	and	r0, r2, r0
   1df84:	str	r0, [r7, #8]
   1df88:	ldr	r0, [r5, #12]
   1df8c:	and	r0, ip, r0
   1df90:	str	r0, [r7, #12]
   1df94:	ldr	r0, [r7, #16]
   1df98:	ldr	r1, [r5, #16]
   1df9c:	and	r0, r0, r1
   1dfa0:	str	r0, [r7, #16]
   1dfa4:	ldr	r0, [r5, #20]
   1dfa8:	ldr	r1, [r7, #20]
   1dfac:	and	r0, r1, r0
   1dfb0:	str	r0, [r7, #20]
   1dfb4:	ldr	r0, [r5, #24]
   1dfb8:	ldr	r1, [r7, #24]
   1dfbc:	and	r0, r1, r0
   1dfc0:	str	r0, [r7, #24]
   1dfc4:	ldr	r0, [r5, #28]
   1dfc8:	ldr	r1, [r7, #28]
   1dfcc:	and	r0, r1, r0
   1dfd0:	str	r0, [r7, #28]
   1dfd4:	ldr	r1, [r6, #64]	; 0x40
   1dfd8:	cmp	r1, #31
   1dfdc:	beq	1e164 <__assert_fail@plt+0xccb4>
   1dfe0:	ldr	r0, [r6, #56]	; 0x38
   1dfe4:	add	r0, r0, r1, lsl #5
   1dfe8:	add	r2, r1, #1
   1dfec:	vmov.i32	q8, #0	; 0x00000000
   1dff0:	mov	r1, #3
   1dff4:	str	r2, [r6, #64]	; 0x40
   1dff8:	mov	r2, #0
   1dffc:	add	r5, r0, #4
   1e000:	str	r2, [r0, #20]
   1e004:	str	r7, [r0, #24]
   1e008:	str	r1, [r0, #28]
   1e00c:	mov	r0, #28
   1e010:	mov	r1, r5
   1e014:	vst1.32	{d16-d17}, [r1], r0
   1e018:	mvn	r0, #0
   1e01c:	str	r0, [r1]
   1e020:	ldr	r0, [r6, #92]	; 0x5c
   1e024:	cmp	r0, #2
   1e028:	blt	1e0d0 <__assert_fail@plt+0xcc20>
   1e02c:	ldrb	r0, [r6, #88]	; 0x58
   1e030:	orr	r0, r0, #2
   1e034:	strb	r0, [r6, #88]	; 0x58
   1e038:	ldr	r1, [r6, #64]	; 0x40
   1e03c:	cmp	r1, #31
   1e040:	beq	1e18c <__assert_fail@plt+0xccdc>
   1e044:	ldr	r0, [r6, #56]	; 0x38
   1e048:	add	r0, r0, r1, lsl #5
   1e04c:	vmov.i32	q8, #0	; 0x00000000
   1e050:	add	r2, r1, #1
   1e054:	mov	r1, #6
   1e058:	mov	r4, #0
   1e05c:	str	r2, [r6, #64]	; 0x40
   1e060:	add	r7, r0, #4
   1e064:	str	r4, [r0, #20]
   1e068:	str	r8, [r0, #24]
   1e06c:	str	r1, [r0, #28]
   1e070:	mov	r0, #28
   1e074:	mov	r1, r7
   1e078:	vst1.32	{d16-d17}, [r1], r0
   1e07c:	mvn	r0, #0
   1e080:	str	r0, [r1]
   1e084:	ldr	r1, [r6, #64]	; 0x40
   1e088:	cmp	r1, #31
   1e08c:	beq	1e1f4 <__assert_fail@plt+0xcd44>
   1e090:	ldr	r0, [r6, #56]	; 0x38
   1e094:	add	r4, r0, r1, lsl #5
   1e098:	add	r2, r1, #1
   1e09c:	mov	r0, #0
   1e0a0:	mov	r1, #10
   1e0a4:	str	r2, [r6, #64]	; 0x40
   1e0a8:	mvn	r2, #0
   1e0ac:	str	r0, [r4, #4]!
   1e0b0:	add	r3, r4, #20
   1e0b4:	stmib	r4, {r5, r7}
   1e0b8:	str	r0, [r4, #12]
   1e0bc:	str	r0, [r4, #16]
   1e0c0:	stm	r3, {r0, r1, r2}
   1e0c4:	str	r4, [r5]
   1e0c8:	str	r4, [r7]
   1e0cc:	b	1e0fc <__assert_fail@plt+0xcc4c>
   1e0d0:	ldr	r0, [r8]
   1e0d4:	bl	29220 <__assert_fail@plt+0x17d70>
   1e0d8:	ldr	r0, [r8, #4]
   1e0dc:	bl	29220 <__assert_fail@plt+0x17d70>
   1e0e0:	ldr	r0, [r8, #8]
   1e0e4:	bl	29220 <__assert_fail@plt+0x17d70>
   1e0e8:	ldr	r0, [r8, #12]
   1e0ec:	bl	29220 <__assert_fail@plt+0x17d70>
   1e0f0:	mov	r0, r8
   1e0f4:	bl	29220 <__assert_fail@plt+0x17d70>
   1e0f8:	mov	r4, r5
   1e0fc:	mov	r0, r4
   1e100:	sub	sp, fp, #28
   1e104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e108:	mov	r0, r7
   1e10c:	bl	29220 <__assert_fail@plt+0x17d70>
   1e110:	ldr	r1, [fp, #12]
   1e114:	mov	r0, #12
   1e118:	mov	r4, #0
   1e11c:	str	r0, [r1]
   1e120:	b	1e0fc <__assert_fail@plt+0xcc4c>
   1e124:	mov	r5, r0
   1e128:	mov	r0, r7
   1e12c:	bl	29220 <__assert_fail@plt+0x17d70>
   1e130:	ldr	r0, [r8]
   1e134:	bl	29220 <__assert_fail@plt+0x17d70>
   1e138:	ldr	r0, [r8, #4]
   1e13c:	bl	29220 <__assert_fail@plt+0x17d70>
   1e140:	ldr	r0, [r8, #8]
   1e144:	bl	29220 <__assert_fail@plt+0x17d70>
   1e148:	ldr	r0, [r8, #12]
   1e14c:	bl	29220 <__assert_fail@plt+0x17d70>
   1e150:	mov	r0, r8
   1e154:	bl	29220 <__assert_fail@plt+0x17d70>
   1e158:	ldr	r0, [fp, #12]
   1e15c:	str	r5, [r0]
   1e160:	b	1e0fc <__assert_fail@plt+0xcc4c>
   1e164:	mov	r0, #996	; 0x3e4
   1e168:	bl	29054 <__assert_fail@plt+0x17ba4>
   1e16c:	cmp	r0, #0
   1e170:	beq	1e1b4 <__assert_fail@plt+0xcd04>
   1e174:	ldr	r1, [r6, #56]	; 0x38
   1e178:	str	r1, [r0]
   1e17c:	mov	r1, #0
   1e180:	str	r1, [r6, #64]	; 0x40
   1e184:	str	r0, [r6, #56]	; 0x38
   1e188:	b	1dfe4 <__assert_fail@plt+0xcb34>
   1e18c:	mov	r0, #996	; 0x3e4
   1e190:	bl	29054 <__assert_fail@plt+0x17ba4>
   1e194:	cmp	r0, #0
   1e198:	beq	1e1b4 <__assert_fail@plt+0xcd04>
   1e19c:	ldr	r1, [r6, #56]	; 0x38
   1e1a0:	str	r1, [r0]
   1e1a4:	mov	r1, #0
   1e1a8:	str	r1, [r6, #64]	; 0x40
   1e1ac:	str	r0, [r6, #56]	; 0x38
   1e1b0:	b	1e048 <__assert_fail@plt+0xcb98>
   1e1b4:	mov	r0, r7
   1e1b8:	bl	29220 <__assert_fail@plt+0x17d70>
   1e1bc:	ldr	r0, [r8]
   1e1c0:	bl	29220 <__assert_fail@plt+0x17d70>
   1e1c4:	ldr	r0, [r8, #4]
   1e1c8:	bl	29220 <__assert_fail@plt+0x17d70>
   1e1cc:	ldr	r0, [r8, #8]
   1e1d0:	bl	29220 <__assert_fail@plt+0x17d70>
   1e1d4:	ldr	r0, [r8, #12]
   1e1d8:	bl	29220 <__assert_fail@plt+0x17d70>
   1e1dc:	mov	r0, r8
   1e1e0:	bl	29220 <__assert_fail@plt+0x17d70>
   1e1e4:	ldr	r1, [fp, #12]
   1e1e8:	mov	r0, #12
   1e1ec:	str	r0, [r1]
   1e1f0:	b	1e0fc <__assert_fail@plt+0xcc4c>
   1e1f4:	mov	r0, #996	; 0x3e4
   1e1f8:	bl	29054 <__assert_fail@plt+0x17ba4>
   1e1fc:	cmp	r0, #0
   1e200:	beq	1e0fc <__assert_fail@plt+0xcc4c>
   1e204:	ldr	r1, [r6, #56]	; 0x38
   1e208:	str	r1, [r0]
   1e20c:	mov	r1, #0
   1e210:	str	r1, [r6, #64]	; 0x40
   1e214:	str	r0, [r6, #56]	; 0x38
   1e218:	b	1e094 <__assert_fail@plt+0xcbe4>
   1e21c:	push	{fp, lr}
   1e220:	mov	fp, sp
   1e224:	ldr	ip, [r1, #40]	; 0x28
   1e228:	ldr	r3, [r1, #56]	; 0x38
   1e22c:	cmp	r3, ip
   1e230:	ble	1e2b0 <__assert_fail@plt+0xce00>
   1e234:	ldr	r3, [r1, #4]
   1e238:	ldrb	lr, [r3, ip]
   1e23c:	strb	lr, [r0]
   1e240:	ldr	r3, [r1, #80]	; 0x50
   1e244:	cmp	r3, #2
   1e248:	blt	1e26c <__assert_fail@plt+0xcdbc>
   1e24c:	ldr	r3, [r1, #28]
   1e250:	ldr	ip, [r1, #40]	; 0x28
   1e254:	cmp	ip, r3
   1e258:	beq	1e26c <__assert_fail@plt+0xcdbc>
   1e25c:	ldr	r3, [r1, #8]
   1e260:	ldr	r3, [r3, ip, lsl #2]
   1e264:	cmn	r3, #1
   1e268:	beq	1e360 <__assert_fail@plt+0xceb0>
   1e26c:	tst	r2, #1
   1e270:	beq	1e2c4 <__assert_fail@plt+0xce14>
   1e274:	cmp	lr, #92	; 0x5c
   1e278:	bne	1e2c4 <__assert_fail@plt+0xce14>
   1e27c:	ldr	r2, [r1, #40]	; 0x28
   1e280:	ldr	r3, [r1, #48]	; 0x30
   1e284:	add	r2, r2, #1
   1e288:	cmp	r2, r3
   1e28c:	bge	1e360 <__assert_fail@plt+0xceb0>
   1e290:	str	r2, [r1, #40]	; 0x28
   1e294:	ldr	r1, [r1, #4]
   1e298:	ldrb	r2, [r1, r2]
   1e29c:	mov	r1, #1
   1e2a0:	strb	r1, [r0, #4]
   1e2a4:	strb	r2, [r0]
   1e2a8:	mov	r0, r1
   1e2ac:	pop	{fp, pc}
   1e2b0:	mov	r1, #2
   1e2b4:	strb	r1, [r0, #4]
   1e2b8:	mov	r1, #0
   1e2bc:	mov	r0, r1
   1e2c0:	pop	{fp, pc}
   1e2c4:	cmp	lr, #92	; 0x5c
   1e2c8:	bgt	1e31c <__assert_fail@plt+0xce6c>
   1e2cc:	cmp	lr, #45	; 0x2d
   1e2d0:	beq	1e334 <__assert_fail@plt+0xce84>
   1e2d4:	cmp	lr, #91	; 0x5b
   1e2d8:	bne	1e360 <__assert_fail@plt+0xceb0>
   1e2dc:	ldr	r3, [r1, #40]	; 0x28
   1e2e0:	ldr	ip, [r1, #48]	; 0x30
   1e2e4:	add	r3, r3, #1
   1e2e8:	cmp	r3, ip
   1e2ec:	bge	1e350 <__assert_fail@plt+0xcea0>
   1e2f0:	ldr	r1, [r1, #4]
   1e2f4:	ldrb	r1, [r1, r3]
   1e2f8:	cmp	r1, #61	; 0x3d
   1e2fc:	strb	r1, [r0]
   1e300:	beq	1e370 <__assert_fail@plt+0xcec0>
   1e304:	cmp	r1, #58	; 0x3a
   1e308:	beq	1e378 <__assert_fail@plt+0xcec8>
   1e30c:	cmp	r1, #46	; 0x2e
   1e310:	bne	1e358 <__assert_fail@plt+0xcea8>
   1e314:	mov	r1, #26
   1e318:	b	1e384 <__assert_fail@plt+0xced4>
   1e31c:	cmp	lr, #93	; 0x5d
   1e320:	beq	1e33c <__assert_fail@plt+0xce8c>
   1e324:	cmp	lr, #94	; 0x5e
   1e328:	bne	1e360 <__assert_fail@plt+0xceb0>
   1e32c:	mov	r1, #25
   1e330:	b	1e340 <__assert_fail@plt+0xce90>
   1e334:	mov	r1, #22
   1e338:	b	1e340 <__assert_fail@plt+0xce90>
   1e33c:	mov	r1, #21
   1e340:	strb	r1, [r0, #4]
   1e344:	mov	r1, #1
   1e348:	mov	r0, r1
   1e34c:	pop	{fp, pc}
   1e350:	mov	r1, #0
   1e354:	strb	r1, [r0]
   1e358:	mov	r1, #91	; 0x5b
   1e35c:	strb	r1, [r0]
   1e360:	mov	r1, #1
   1e364:	strb	r1, [r0, #4]
   1e368:	mov	r0, r1
   1e36c:	pop	{fp, pc}
   1e370:	mov	r1, #28
   1e374:	b	1e384 <__assert_fail@plt+0xced4>
   1e378:	tst	r2, #4
   1e37c:	beq	1e358 <__assert_fail@plt+0xcea8>
   1e380:	mov	r1, #30
   1e384:	strb	r1, [r0, #4]
   1e388:	mov	r1, #2
   1e38c:	mov	r0, r1
   1e390:	pop	{fp, pc}
   1e394:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e398:	add	fp, sp, #24
   1e39c:	sub	sp, sp, #8
   1e3a0:	mov	r5, r2
   1e3a4:	ldr	r2, [r1, #80]	; 0x50
   1e3a8:	mov	r9, r0
   1e3ac:	ldr	r0, [r1, #40]	; 0x28
   1e3b0:	cmp	r2, #1
   1e3b4:	beq	1e42c <__assert_fail@plt+0xcf7c>
   1e3b8:	ldr	r2, [r1, #28]
   1e3bc:	add	r6, r0, #1
   1e3c0:	cmp	r6, r2
   1e3c4:	bge	1e42c <__assert_fail@plt+0xcf7c>
   1e3c8:	ldr	lr, [r1, #8]
   1e3cc:	sub	r4, r0, r2
   1e3d0:	sub	ip, r2, r0
   1e3d4:	mvn	r2, #0
   1e3d8:	add	r6, lr, r0, lsl #2
   1e3dc:	ldr	r7, [r6, -r2, lsl #2]
   1e3e0:	cmn	r7, #1
   1e3e4:	bne	1e3f8 <__assert_fail@plt+0xcf48>
   1e3e8:	sub	r2, r2, #1
   1e3ec:	cmp	r4, r2
   1e3f0:	bne	1e3dc <__assert_fail@plt+0xcf2c>
   1e3f4:	b	1e404 <__assert_fail@plt+0xcf54>
   1e3f8:	rsb	ip, r2, #0
   1e3fc:	cmp	ip, #2
   1e400:	bcc	1e42c <__assert_fail@plt+0xcf7c>
   1e404:	mov	r2, #1
   1e408:	str	r2, [r9]
   1e40c:	ldr	r0, [lr, r0, lsl #2]
   1e410:	str	r0, [r9, #4]
   1e414:	ldr	r0, [r1, #40]	; 0x28
   1e418:	add	r0, r0, ip
   1e41c:	str	r0, [r1, #40]	; 0x28
   1e420:	mov	r0, #0
   1e424:	sub	sp, fp, #24
   1e428:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e42c:	add	r2, r0, r3
   1e430:	str	r2, [r1, #40]	; 0x28
   1e434:	ldrb	r6, [r5, #4]
   1e438:	sub	r0, r6, #22
   1e43c:	cmp	r0, #8
   1e440:	bhi	1e648 <__assert_fail@plt+0xd198>
   1e444:	add	r3, pc, #0
   1e448:	ldr	pc, [r3, r0, lsl #2]
   1e44c:	andeq	lr, r1, r0, lsr #12
   1e450:	andeq	lr, r1, r8, asr #12
   1e454:	andeq	lr, r1, r8, asr #12
   1e458:	andeq	lr, r1, r8, asr #12
   1e45c:	andeq	lr, r1, r0, ror r4
   1e460:	andeq	lr, r1, r8, asr #12
   1e464:	andeq	lr, r1, r0, ror r4
   1e468:	andeq	lr, r1, r8, asr #12
   1e46c:	andeq	lr, r1, r0, ror r4
   1e470:	ldr	r3, [r1, #56]	; 0x38
   1e474:	mov	r0, #7
   1e478:	cmp	r3, r2
   1e47c:	ble	1e658 <__assert_fail@plt+0xd1a8>
   1e480:	ldrb	r3, [r5]
   1e484:	mov	r2, #0
   1e488:	uxtb	r7, r6
   1e48c:	cmp	r7, #30
   1e490:	bne	1e4a0 <__assert_fail@plt+0xcff0>
   1e494:	ldrb	r7, [r1, #75]	; 0x4b
   1e498:	cmp	r7, #0
   1e49c:	bne	1e4f8 <__assert_fail@plt+0xd048>
   1e4a0:	ldr	r4, [r1, #40]	; 0x28
   1e4a4:	ldr	r7, [r1, #4]
   1e4a8:	add	r6, r4, #1
   1e4ac:	str	r6, [r1, #40]	; 0x28
   1e4b0:	ldrb	r4, [r7, r4]
   1e4b4:	ldr	r7, [r1, #56]	; 0x38
   1e4b8:	cmp	r7, r6
   1e4bc:	ble	1e658 <__assert_fail@plt+0xd1a8>
   1e4c0:	uxtb	r7, r4
   1e4c4:	cmp	r7, r3
   1e4c8:	bne	1e4dc <__assert_fail@plt+0xd02c>
   1e4cc:	ldr	r7, [r1, #4]
   1e4d0:	ldrb	r7, [r7, r6]
   1e4d4:	cmp	r7, #93	; 0x5d
   1e4d8:	beq	1e5d0 <__assert_fail@plt+0xd120>
   1e4dc:	ldr	r7, [r9, #4]
   1e4e0:	strb	r4, [r7, r2]
   1e4e4:	add	r2, r2, #1
   1e4e8:	cmp	r2, #32
   1e4ec:	beq	1e658 <__assert_fail@plt+0xd1a8>
   1e4f0:	ldrb	r6, [r5, #4]
   1e4f4:	b	1e488 <__assert_fail@plt+0xcfd8>
   1e4f8:	ldrb	r7, [r1, #76]	; 0x4c
   1e4fc:	cmp	r7, #0
   1e500:	beq	1e59c <__assert_fail@plt+0xd0ec>
   1e504:	ldr	lr, [r1, #28]
   1e508:	ldr	ip, [r1, #40]	; 0x28
   1e50c:	cmp	lr, ip
   1e510:	beq	1e524 <__assert_fail@plt+0xd074>
   1e514:	ldr	r4, [r1, #8]
   1e518:	ldr	r4, [r4, ip, lsl #2]
   1e51c:	cmn	r4, #1
   1e520:	beq	1e5bc <__assert_fail@plt+0xd10c>
   1e524:	ldr	r6, [r1, #12]
   1e528:	ldr	r7, [r1, #24]
   1e52c:	ldr	r4, [r1]
   1e530:	ldr	r6, [r6, ip, lsl #2]
   1e534:	add	r6, r7, r6
   1e538:	add	r4, r4, r6
   1e53c:	ldrsb	r4, [r4]
   1e540:	cmn	r4, #1
   1e544:	ble	1e5bc <__assert_fail@plt+0xd10c>
   1e548:	ldr	r7, [r1, #80]	; 0x50
   1e54c:	mov	r6, #1
   1e550:	cmp	r7, #1
   1e554:	beq	1e590 <__assert_fail@plt+0xd0e0>
   1e558:	add	r7, ip, #1
   1e55c:	cmp	r7, lr
   1e560:	bge	1e590 <__assert_fail@plt+0xd0e0>
   1e564:	ldr	r6, [r1, #8]
   1e568:	sub	lr, lr, ip
   1e56c:	add	r8, r6, ip, lsl #2
   1e570:	mov	r6, #1
   1e574:	ldr	r7, [r8, r6, lsl #2]
   1e578:	cmn	r7, #1
   1e57c:	bne	1e590 <__assert_fail@plt+0xd0e0>
   1e580:	add	r6, r6, #1
   1e584:	cmp	lr, r6
   1e588:	bne	1e574 <__assert_fail@plt+0xd0c4>
   1e58c:	mov	r6, lr
   1e590:	add	r6, r6, ip
   1e594:	str	r6, [r1, #40]	; 0x28
   1e598:	b	1e4b4 <__assert_fail@plt+0xd004>
   1e59c:	ldr	r7, [r1, #40]	; 0x28
   1e5a0:	ldr	r4, [r1, #24]
   1e5a4:	ldr	ip, [r1]
   1e5a8:	add	r6, r7, #1
   1e5ac:	add	r7, r7, r4
   1e5b0:	str	r6, [r1, #40]	; 0x28
   1e5b4:	ldrb	r4, [ip, r7]
   1e5b8:	b	1e4b4 <__assert_fail@plt+0xd004>
   1e5bc:	add	r6, ip, #1
   1e5c0:	str	r6, [r1, #40]	; 0x28
   1e5c4:	ldr	r7, [r1, #4]
   1e5c8:	ldrb	r4, [r7, ip]
   1e5cc:	b	1e4b4 <__assert_fail@plt+0xd004>
   1e5d0:	add	r0, r6, #1
   1e5d4:	str	r0, [r1, #40]	; 0x28
   1e5d8:	mov	r0, #0
   1e5dc:	ldr	r1, [r9, #4]
   1e5e0:	strb	r0, [r1, r2]
   1e5e4:	ldrb	r1, [r5, #4]
   1e5e8:	cmp	r1, #30
   1e5ec:	beq	1e608 <__assert_fail@plt+0xd158>
   1e5f0:	cmp	r1, #28
   1e5f4:	beq	1e610 <__assert_fail@plt+0xd160>
   1e5f8:	cmp	r1, #26
   1e5fc:	bne	1e658 <__assert_fail@plt+0xd1a8>
   1e600:	mov	r1, #3
   1e604:	b	1e614 <__assert_fail@plt+0xd164>
   1e608:	mov	r1, #4
   1e60c:	b	1e614 <__assert_fail@plt+0xd164>
   1e610:	mov	r1, #2
   1e614:	str	r1, [r9]
   1e618:	sub	sp, fp, #24
   1e61c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e620:	ldr	r0, [fp, #12]
   1e624:	cmp	r0, #0
   1e628:	bne	1e648 <__assert_fail@plt+0xd198>
   1e62c:	ldr	r2, [fp, #8]
   1e630:	mov	r0, sp
   1e634:	bl	1e21c <__assert_fail@plt+0xcd6c>
   1e638:	ldrb	r1, [sp, #4]
   1e63c:	mov	r0, #11
   1e640:	cmp	r1, #21
   1e644:	bne	1e658 <__assert_fail@plt+0xd1a8>
   1e648:	mov	r0, #0
   1e64c:	str	r0, [r9]
   1e650:	ldrb	r1, [r5]
   1e654:	strb	r1, [r9, #4]
   1e658:	sub	sp, fp, #24
   1e65c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e660:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e664:	add	fp, sp, #24
   1e668:	mov	r8, r0
   1e66c:	ldrb	r0, [fp, #14]
   1e670:	ldr	r6, [fp, #8]
   1e674:	mov	r5, r3
   1e678:	mov	r7, r2
   1e67c:	mov	r4, r1
   1e680:	tst	r0, #64	; 0x40
   1e684:	beq	1e6c0 <__assert_fail@plt+0xd210>
   1e688:	movw	r1, #42522	; 0xa61a
   1e68c:	mov	r0, r6
   1e690:	movt	r1, #2
   1e694:	bl	111f8 <strcmp@plt>
   1e698:	cmp	r0, #0
   1e69c:	beq	1e6b8 <__assert_fail@plt+0xd208>
   1e6a0:	movw	r1, #42528	; 0xa620
   1e6a4:	mov	r0, r6
   1e6a8:	movt	r1, #2
   1e6ac:	bl	111f8 <strcmp@plt>
   1e6b0:	cmp	r0, #0
   1e6b4:	bne	1e6c0 <__assert_fail@plt+0xd210>
   1e6b8:	movw	r6, #42534	; 0xa626
   1e6bc:	movt	r6, #2
   1e6c0:	ldr	r0, [r5]
   1e6c4:	ldr	r1, [r7, #36]	; 0x24
   1e6c8:	cmp	r0, r1
   1e6cc:	beq	1ebf4 <__assert_fail@plt+0xd744>
   1e6d0:	mov	r0, r6
   1e6d4:	bl	111c8 <wctype@plt>
   1e6d8:	ldr	r2, [r7, #36]	; 0x24
   1e6dc:	ldr	r1, [r7, #12]
   1e6e0:	add	r3, r2, #1
   1e6e4:	str	r3, [r7, #36]	; 0x24
   1e6e8:	str	r0, [r1, r2, lsl #2]
   1e6ec:	movw	r1, #42510	; 0xa60e
   1e6f0:	mov	r0, r6
   1e6f4:	movt	r1, #2
   1e6f8:	bl	111f8 <strcmp@plt>
   1e6fc:	cmp	r0, #0
   1e700:	beq	1e830 <__assert_fail@plt+0xd380>
   1e704:	movw	r1, #42540	; 0xa62c
   1e708:	mov	r0, r6
   1e70c:	movt	r1, #2
   1e710:	bl	111f8 <strcmp@plt>
   1e714:	cmp	r0, #0
   1e718:	beq	1e880 <__assert_fail@plt+0xd3d0>
   1e71c:	movw	r1, #42528	; 0xa620
   1e720:	mov	r0, r6
   1e724:	movt	r1, #2
   1e728:	bl	111f8 <strcmp@plt>
   1e72c:	cmp	r0, #0
   1e730:	beq	1e8d0 <__assert_fail@plt+0xd420>
   1e734:	movw	r1, #42516	; 0xa614
   1e738:	mov	r0, r6
   1e73c:	movt	r1, #2
   1e740:	bl	111f8 <strcmp@plt>
   1e744:	cmp	r0, #0
   1e748:	beq	1e920 <__assert_fail@plt+0xd470>
   1e74c:	movw	r1, #42534	; 0xa626
   1e750:	mov	r0, r6
   1e754:	movt	r1, #2
   1e758:	bl	111f8 <strcmp@plt>
   1e75c:	cmp	r0, #0
   1e760:	beq	1e9a8 <__assert_fail@plt+0xd4f8>
   1e764:	movw	r1, #42571	; 0xa64b
   1e768:	mov	r0, r6
   1e76c:	movt	r1, #2
   1e770:	bl	111f8 <strcmp@plt>
   1e774:	cmp	r0, #0
   1e778:	beq	1e9f8 <__assert_fail@plt+0xd548>
   1e77c:	movw	r1, #42546	; 0xa632
   1e780:	mov	r0, r6
   1e784:	movt	r1, #2
   1e788:	bl	111f8 <strcmp@plt>
   1e78c:	cmp	r0, #0
   1e790:	beq	1ea50 <__assert_fail@plt+0xd5a0>
   1e794:	movw	r1, #42522	; 0xa61a
   1e798:	mov	r0, r6
   1e79c:	movt	r1, #2
   1e7a0:	bl	111f8 <strcmp@plt>
   1e7a4:	cmp	r0, #0
   1e7a8:	beq	1eaa4 <__assert_fail@plt+0xd5f4>
   1e7ac:	movw	r1, #42552	; 0xa638
   1e7b0:	mov	r0, r6
   1e7b4:	movt	r1, #2
   1e7b8:	bl	111f8 <strcmp@plt>
   1e7bc:	cmp	r0, #0
   1e7c0:	beq	1eaf8 <__assert_fail@plt+0xd648>
   1e7c4:	movw	r1, #42558	; 0xa63e
   1e7c8:	mov	r0, r6
   1e7cc:	movt	r1, #2
   1e7d0:	bl	111f8 <strcmp@plt>
   1e7d4:	cmp	r0, #0
   1e7d8:	beq	1eb4c <__assert_fail@plt+0xd69c>
   1e7dc:	movw	r1, #42564	; 0xa644
   1e7e0:	mov	r0, r6
   1e7e4:	movt	r1, #2
   1e7e8:	bl	111f8 <strcmp@plt>
   1e7ec:	cmp	r0, #0
   1e7f0:	beq	1eba0 <__assert_fail@plt+0xd6f0>
   1e7f4:	movw	r1, #42570	; 0xa64a
   1e7f8:	mov	r0, r6
   1e7fc:	movt	r1, #2
   1e800:	bl	111f8 <strcmp@plt>
   1e804:	mov	r1, r0
   1e808:	mov	r0, #4
   1e80c:	cmp	r1, #0
   1e810:	bne	1ef34 <__assert_fail@plt+0xda84>
   1e814:	bl	1136c <__ctype_b_loc@plt>
   1e818:	ldr	r1, [r0]
   1e81c:	mov	r2, #0
   1e820:	mov	r3, #1
   1e824:	cmp	r8, #0
   1e828:	beq	1e984 <__assert_fail@plt+0xd4d4>
   1e82c:	b	1ee7c <__assert_fail@plt+0xd9cc>
   1e830:	bl	1136c <__ctype_b_loc@plt>
   1e834:	ldr	r1, [r0]
   1e838:	cmp	r8, #0
   1e83c:	bne	1ec94 <__assert_fail@plt+0xd7e4>
   1e840:	mov	r0, #0
   1e844:	mov	r2, #1
   1e848:	b	1e85c <__assert_fail@plt+0xd3ac>
   1e84c:	add	r0, r0, #1
   1e850:	add	r1, r1, #2
   1e854:	cmp	r0, #256	; 0x100
   1e858:	beq	1ea48 <__assert_fail@plt+0xd598>
   1e85c:	ldrb	r3, [r1]
   1e860:	tst	r3, #8
   1e864:	beq	1e84c <__assert_fail@plt+0xd39c>
   1e868:	ubfx	r3, r0, #5, #3
   1e86c:	and	r6, r0, #31
   1e870:	ldr	r7, [r4, r3, lsl #2]
   1e874:	orr	r7, r7, r2, lsl r6
   1e878:	str	r7, [r4, r3, lsl #2]
   1e87c:	b	1e84c <__assert_fail@plt+0xd39c>
   1e880:	bl	1136c <__ctype_b_loc@plt>
   1e884:	ldr	r1, [r0]
   1e888:	cmp	r8, #0
   1e88c:	bne	1ed18 <__assert_fail@plt+0xd868>
   1e890:	mov	r0, #0
   1e894:	mov	r2, #1
   1e898:	b	1e8ac <__assert_fail@plt+0xd3fc>
   1e89c:	add	r0, r0, #1
   1e8a0:	add	r1, r1, #2
   1e8a4:	cmp	r0, #256	; 0x100
   1e8a8:	beq	1ea48 <__assert_fail@plt+0xd598>
   1e8ac:	ldrb	r3, [r1]
   1e8b0:	tst	r3, #2
   1e8b4:	beq	1e89c <__assert_fail@plt+0xd3ec>
   1e8b8:	ubfx	r3, r0, #5, #3
   1e8bc:	and	r6, r0, #31
   1e8c0:	ldr	r7, [r4, r3, lsl #2]
   1e8c4:	orr	r7, r7, r2, lsl r6
   1e8c8:	str	r7, [r4, r3, lsl #2]
   1e8cc:	b	1e89c <__assert_fail@plt+0xd3ec>
   1e8d0:	bl	1136c <__ctype_b_loc@plt>
   1e8d4:	ldr	r1, [r0]
   1e8d8:	cmp	r8, #0
   1e8dc:	bne	1ed9c <__assert_fail@plt+0xd8ec>
   1e8e0:	mov	r0, #0
   1e8e4:	mov	r2, #1
   1e8e8:	b	1e8fc <__assert_fail@plt+0xd44c>
   1e8ec:	add	r0, r0, #1
   1e8f0:	add	r1, r1, #2
   1e8f4:	cmp	r0, #256	; 0x100
   1e8f8:	beq	1ea48 <__assert_fail@plt+0xd598>
   1e8fc:	ldrb	r3, [r1, #1]
   1e900:	tst	r3, #2
   1e904:	beq	1e8ec <__assert_fail@plt+0xd43c>
   1e908:	ubfx	r3, r0, #5, #3
   1e90c:	and	r6, r0, #31
   1e910:	ldr	r7, [r4, r3, lsl #2]
   1e914:	orr	r7, r7, r2, lsl r6
   1e918:	str	r7, [r4, r3, lsl #2]
   1e91c:	b	1e8ec <__assert_fail@plt+0xd43c>
   1e920:	bl	1136c <__ctype_b_loc@plt>
   1e924:	ldr	r1, [r0]
   1e928:	cmp	r8, #0
   1e92c:	bne	1ee20 <__assert_fail@plt+0xd970>
   1e930:	mov	r0, #0
   1e934:	mov	r2, #1
   1e938:	b	1e94c <__assert_fail@plt+0xd49c>
   1e93c:	add	r0, r0, #1
   1e940:	add	r1, r1, #2
   1e944:	cmp	r0, #256	; 0x100
   1e948:	beq	1ea48 <__assert_fail@plt+0xd598>
   1e94c:	ldrb	r3, [r1, #1]
   1e950:	tst	r3, #32
   1e954:	beq	1e93c <__assert_fail@plt+0xd48c>
   1e958:	ubfx	r3, r0, #5, #3
   1e95c:	and	r6, r0, #31
   1e960:	ldr	r7, [r4, r3, lsl #2]
   1e964:	orr	r7, r7, r2, lsl r6
   1e968:	str	r7, [r4, r3, lsl #2]
   1e96c:	b	1e93c <__assert_fail@plt+0xd48c>
   1e970:	add	r2, r2, #1
   1e974:	add	r1, r1, #2
   1e978:	mov	r0, #0
   1e97c:	cmp	r2, #256	; 0x100
   1e980:	beq	1ef34 <__assert_fail@plt+0xda84>
   1e984:	ldrb	r0, [r1, #1]
   1e988:	tst	r0, #16
   1e98c:	beq	1e970 <__assert_fail@plt+0xd4c0>
   1e990:	ubfx	r0, r2, #5, #3
   1e994:	and	r6, r2, #31
   1e998:	ldr	r7, [r4, r0, lsl #2]
   1e99c:	orr	r7, r7, r3, lsl r6
   1e9a0:	str	r7, [r4, r0, lsl #2]
   1e9a4:	b	1e970 <__assert_fail@plt+0xd4c0>
   1e9a8:	bl	1136c <__ctype_b_loc@plt>
   1e9ac:	ldr	r1, [r0]
   1e9b0:	cmp	r8, #0
   1e9b4:	bne	1eea4 <__assert_fail@plt+0xd9f4>
   1e9b8:	mov	r0, #0
   1e9bc:	mov	r2, #1
   1e9c0:	b	1e9d4 <__assert_fail@plt+0xd524>
   1e9c4:	add	r0, r0, #1
   1e9c8:	add	r1, r1, #2
   1e9cc:	cmp	r0, #256	; 0x100
   1e9d0:	beq	1ea48 <__assert_fail@plt+0xd598>
   1e9d4:	ldrb	r3, [r1, #1]
   1e9d8:	tst	r3, #4
   1e9dc:	beq	1e9c4 <__assert_fail@plt+0xd514>
   1e9e0:	ubfx	r3, r0, #5, #3
   1e9e4:	and	r6, r0, #31
   1e9e8:	ldr	r7, [r4, r3, lsl #2]
   1e9ec:	orr	r7, r7, r2, lsl r6
   1e9f0:	str	r7, [r4, r3, lsl #2]
   1e9f4:	b	1e9c4 <__assert_fail@plt+0xd514>
   1e9f8:	bl	1136c <__ctype_b_loc@plt>
   1e9fc:	ldr	r1, [r0]
   1ea00:	cmp	r8, #0
   1ea04:	bne	1eeec <__assert_fail@plt+0xda3c>
   1ea08:	mov	r0, #0
   1ea0c:	mov	r2, #1
   1ea10:	b	1ea24 <__assert_fail@plt+0xd574>
   1ea14:	add	r0, r0, #1
   1ea18:	add	r1, r1, #2
   1ea1c:	cmp	r0, #256	; 0x100
   1ea20:	beq	1ea48 <__assert_fail@plt+0xd598>
   1ea24:	ldrb	r3, [r1, #1]
   1ea28:	tst	r3, #8
   1ea2c:	beq	1ea14 <__assert_fail@plt+0xd564>
   1ea30:	ubfx	r3, r0, #5, #3
   1ea34:	and	r6, r0, #31
   1ea38:	ldr	r7, [r4, r3, lsl #2]
   1ea3c:	orr	r7, r7, r2, lsl r6
   1ea40:	str	r7, [r4, r3, lsl #2]
   1ea44:	b	1ea14 <__assert_fail@plt+0xd564>
   1ea48:	mov	r0, #0
   1ea4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ea50:	bl	1136c <__ctype_b_loc@plt>
   1ea54:	ldr	r1, [r0]
   1ea58:	mov	r2, #0
   1ea5c:	mov	r3, #1
   1ea60:	cmp	r8, #0
   1ea64:	beq	1ea80 <__assert_fail@plt+0xd5d0>
   1ea68:	b	1ec30 <__assert_fail@plt+0xd780>
   1ea6c:	add	r2, r2, #1
   1ea70:	add	r1, r1, #2
   1ea74:	mov	r0, #0
   1ea78:	cmp	r2, #256	; 0x100
   1ea7c:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ea80:	ldrb	r0, [r1, #1]
   1ea84:	tst	r0, #64	; 0x40
   1ea88:	beq	1ea6c <__assert_fail@plt+0xd5bc>
   1ea8c:	ubfx	r0, r2, #5, #3
   1ea90:	and	r6, r2, #31
   1ea94:	ldr	r7, [r4, r0, lsl #2]
   1ea98:	orr	r7, r7, r3, lsl r6
   1ea9c:	str	r7, [r4, r0, lsl #2]
   1eaa0:	b	1ea6c <__assert_fail@plt+0xd5bc>
   1eaa4:	bl	1136c <__ctype_b_loc@plt>
   1eaa8:	ldr	r1, [r0]
   1eaac:	mov	r2, #0
   1eab0:	mov	r3, #1
   1eab4:	cmp	r8, #0
   1eab8:	beq	1ead4 <__assert_fail@plt+0xd624>
   1eabc:	b	1ec6c <__assert_fail@plt+0xd7bc>
   1eac0:	add	r2, r2, #1
   1eac4:	add	r1, r1, #2
   1eac8:	mov	r0, #0
   1eacc:	cmp	r2, #256	; 0x100
   1ead0:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ead4:	ldrb	r0, [r1, #1]
   1ead8:	tst	r0, #1
   1eadc:	beq	1eac0 <__assert_fail@plt+0xd610>
   1eae0:	ubfx	r0, r2, #5, #3
   1eae4:	and	r6, r2, #31
   1eae8:	ldr	r7, [r4, r0, lsl #2]
   1eaec:	orr	r7, r7, r3, lsl r6
   1eaf0:	str	r7, [r4, r0, lsl #2]
   1eaf4:	b	1eac0 <__assert_fail@plt+0xd610>
   1eaf8:	bl	1136c <__ctype_b_loc@plt>
   1eafc:	ldr	r1, [r0]
   1eb00:	mov	r2, #0
   1eb04:	mov	r3, #1
   1eb08:	cmp	r8, #0
   1eb0c:	beq	1eb28 <__assert_fail@plt+0xd678>
   1eb10:	b	1ecf0 <__assert_fail@plt+0xd840>
   1eb14:	add	r2, r2, #1
   1eb18:	add	r1, r1, #2
   1eb1c:	mov	r0, #0
   1eb20:	cmp	r2, #256	; 0x100
   1eb24:	beq	1ef34 <__assert_fail@plt+0xda84>
   1eb28:	ldrb	r0, [r1]
   1eb2c:	tst	r0, #1
   1eb30:	beq	1eb14 <__assert_fail@plt+0xd664>
   1eb34:	ubfx	r0, r2, #5, #3
   1eb38:	and	r6, r2, #31
   1eb3c:	ldr	r7, [r4, r0, lsl #2]
   1eb40:	orr	r7, r7, r3, lsl r6
   1eb44:	str	r7, [r4, r0, lsl #2]
   1eb48:	b	1eb14 <__assert_fail@plt+0xd664>
   1eb4c:	bl	1136c <__ctype_b_loc@plt>
   1eb50:	ldr	r1, [r0]
   1eb54:	mov	r2, #0
   1eb58:	mov	r3, #1
   1eb5c:	cmp	r8, #0
   1eb60:	beq	1eb7c <__assert_fail@plt+0xd6cc>
   1eb64:	b	1ed74 <__assert_fail@plt+0xd8c4>
   1eb68:	add	r2, r2, #1
   1eb6c:	add	r1, r1, #2
   1eb70:	mov	r0, #0
   1eb74:	cmp	r2, #256	; 0x100
   1eb78:	beq	1ef34 <__assert_fail@plt+0xda84>
   1eb7c:	ldrsh	r0, [r1]
   1eb80:	cmn	r0, #1
   1eb84:	bgt	1eb68 <__assert_fail@plt+0xd6b8>
   1eb88:	ubfx	r0, r2, #5, #3
   1eb8c:	and	r6, r2, #31
   1eb90:	ldr	r7, [r4, r0, lsl #2]
   1eb94:	orr	r7, r7, r3, lsl r6
   1eb98:	str	r7, [r4, r0, lsl #2]
   1eb9c:	b	1eb68 <__assert_fail@plt+0xd6b8>
   1eba0:	bl	1136c <__ctype_b_loc@plt>
   1eba4:	ldr	r1, [r0]
   1eba8:	mov	r2, #0
   1ebac:	mov	r3, #1
   1ebb0:	cmp	r8, #0
   1ebb4:	beq	1ebd0 <__assert_fail@plt+0xd720>
   1ebb8:	b	1edf8 <__assert_fail@plt+0xd948>
   1ebbc:	add	r2, r2, #1
   1ebc0:	add	r1, r1, #2
   1ebc4:	mov	r0, #0
   1ebc8:	cmp	r2, #256	; 0x100
   1ebcc:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ebd0:	ldrb	r0, [r1]
   1ebd4:	tst	r0, #4
   1ebd8:	beq	1ebbc <__assert_fail@plt+0xd70c>
   1ebdc:	ubfx	r0, r2, #5, #3
   1ebe0:	and	r6, r2, #31
   1ebe4:	ldr	r7, [r4, r0, lsl #2]
   1ebe8:	orr	r7, r7, r3, lsl r6
   1ebec:	str	r7, [r4, r0, lsl #2]
   1ebf0:	b	1ebbc <__assert_fail@plt+0xd70c>
   1ebf4:	mov	r1, #1
   1ebf8:	orr	r9, r1, r0, lsl #1
   1ebfc:	ldr	r0, [r7, #12]
   1ec00:	lsl	r1, r9, #2
   1ec04:	bl	29084 <__assert_fail@plt+0x17bd4>
   1ec08:	cmp	r0, #0
   1ec0c:	beq	1ef38 <__assert_fail@plt+0xda88>
   1ec10:	str	r0, [r7, #12]
   1ec14:	str	r9, [r5]
   1ec18:	b	1e6d0 <__assert_fail@plt+0xd220>
   1ec1c:	add	r2, r2, #1
   1ec20:	add	r1, r1, #2
   1ec24:	mov	r0, #0
   1ec28:	cmp	r2, #256	; 0x100
   1ec2c:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ec30:	ldrb	r0, [r1, #1]
   1ec34:	tst	r0, #64	; 0x40
   1ec38:	beq	1ec1c <__assert_fail@plt+0xd76c>
   1ec3c:	ldrb	r0, [r8, r2]
   1ec40:	ubfx	r7, r0, #5, #3
   1ec44:	and	r0, r0, #31
   1ec48:	ldr	r6, [r4, r7, lsl #2]
   1ec4c:	orr	r0, r6, r3, lsl r0
   1ec50:	str	r0, [r4, r7, lsl #2]
   1ec54:	b	1ec1c <__assert_fail@plt+0xd76c>
   1ec58:	add	r2, r2, #1
   1ec5c:	add	r1, r1, #2
   1ec60:	mov	r0, #0
   1ec64:	cmp	r2, #256	; 0x100
   1ec68:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ec6c:	ldrb	r0, [r1, #1]
   1ec70:	tst	r0, #1
   1ec74:	beq	1ec58 <__assert_fail@plt+0xd7a8>
   1ec78:	ldrb	r0, [r8, r2]
   1ec7c:	ubfx	r7, r0, #5, #3
   1ec80:	and	r0, r0, #31
   1ec84:	ldr	r6, [r4, r7, lsl #2]
   1ec88:	orr	r0, r6, r3, lsl r0
   1ec8c:	str	r0, [r4, r7, lsl #2]
   1ec90:	b	1ec58 <__assert_fail@plt+0xd7a8>
   1ec94:	mov	r2, #0
   1ec98:	mov	r3, #1
   1ec9c:	b	1ecb4 <__assert_fail@plt+0xd804>
   1eca0:	add	r2, r2, #1
   1eca4:	add	r1, r1, #2
   1eca8:	mov	r0, #0
   1ecac:	cmp	r2, #256	; 0x100
   1ecb0:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ecb4:	ldrb	r0, [r1]
   1ecb8:	tst	r0, #8
   1ecbc:	beq	1eca0 <__assert_fail@plt+0xd7f0>
   1ecc0:	ldrb	r0, [r8, r2]
   1ecc4:	ubfx	r7, r0, #5, #3
   1ecc8:	and	r0, r0, #31
   1eccc:	ldr	r6, [r4, r7, lsl #2]
   1ecd0:	orr	r0, r6, r3, lsl r0
   1ecd4:	str	r0, [r4, r7, lsl #2]
   1ecd8:	b	1eca0 <__assert_fail@plt+0xd7f0>
   1ecdc:	add	r2, r2, #1
   1ece0:	add	r1, r1, #2
   1ece4:	mov	r0, #0
   1ece8:	cmp	r2, #256	; 0x100
   1ecec:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ecf0:	ldrb	r0, [r1]
   1ecf4:	tst	r0, #1
   1ecf8:	beq	1ecdc <__assert_fail@plt+0xd82c>
   1ecfc:	ldrb	r0, [r8, r2]
   1ed00:	ubfx	r7, r0, #5, #3
   1ed04:	and	r0, r0, #31
   1ed08:	ldr	r6, [r4, r7, lsl #2]
   1ed0c:	orr	r0, r6, r3, lsl r0
   1ed10:	str	r0, [r4, r7, lsl #2]
   1ed14:	b	1ecdc <__assert_fail@plt+0xd82c>
   1ed18:	mov	r2, #0
   1ed1c:	mov	r3, #1
   1ed20:	b	1ed38 <__assert_fail@plt+0xd888>
   1ed24:	add	r2, r2, #1
   1ed28:	add	r1, r1, #2
   1ed2c:	mov	r0, #0
   1ed30:	cmp	r2, #256	; 0x100
   1ed34:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ed38:	ldrb	r0, [r1]
   1ed3c:	tst	r0, #2
   1ed40:	beq	1ed24 <__assert_fail@plt+0xd874>
   1ed44:	ldrb	r0, [r8, r2]
   1ed48:	ubfx	r7, r0, #5, #3
   1ed4c:	and	r0, r0, #31
   1ed50:	ldr	r6, [r4, r7, lsl #2]
   1ed54:	orr	r0, r6, r3, lsl r0
   1ed58:	str	r0, [r4, r7, lsl #2]
   1ed5c:	b	1ed24 <__assert_fail@plt+0xd874>
   1ed60:	add	r2, r2, #1
   1ed64:	add	r1, r1, #2
   1ed68:	mov	r0, #0
   1ed6c:	cmp	r2, #256	; 0x100
   1ed70:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ed74:	ldrsh	r0, [r1]
   1ed78:	cmn	r0, #1
   1ed7c:	bgt	1ed60 <__assert_fail@plt+0xd8b0>
   1ed80:	ldrb	r0, [r8, r2]
   1ed84:	ubfx	r7, r0, #5, #3
   1ed88:	and	r0, r0, #31
   1ed8c:	ldr	r6, [r4, r7, lsl #2]
   1ed90:	orr	r0, r6, r3, lsl r0
   1ed94:	str	r0, [r4, r7, lsl #2]
   1ed98:	b	1ed60 <__assert_fail@plt+0xd8b0>
   1ed9c:	mov	r2, #0
   1eda0:	mov	r3, #1
   1eda4:	b	1edbc <__assert_fail@plt+0xd90c>
   1eda8:	add	r2, r2, #1
   1edac:	add	r1, r1, #2
   1edb0:	mov	r0, #0
   1edb4:	cmp	r2, #256	; 0x100
   1edb8:	beq	1ef34 <__assert_fail@plt+0xda84>
   1edbc:	ldrb	r0, [r1, #1]
   1edc0:	tst	r0, #2
   1edc4:	beq	1eda8 <__assert_fail@plt+0xd8f8>
   1edc8:	ldrb	r0, [r8, r2]
   1edcc:	ubfx	r7, r0, #5, #3
   1edd0:	and	r0, r0, #31
   1edd4:	ldr	r6, [r4, r7, lsl #2]
   1edd8:	orr	r0, r6, r3, lsl r0
   1eddc:	str	r0, [r4, r7, lsl #2]
   1ede0:	b	1eda8 <__assert_fail@plt+0xd8f8>
   1ede4:	add	r2, r2, #1
   1ede8:	add	r1, r1, #2
   1edec:	mov	r0, #0
   1edf0:	cmp	r2, #256	; 0x100
   1edf4:	beq	1ef34 <__assert_fail@plt+0xda84>
   1edf8:	ldrb	r0, [r1]
   1edfc:	tst	r0, #4
   1ee00:	beq	1ede4 <__assert_fail@plt+0xd934>
   1ee04:	ldrb	r0, [r8, r2]
   1ee08:	ubfx	r7, r0, #5, #3
   1ee0c:	and	r0, r0, #31
   1ee10:	ldr	r6, [r4, r7, lsl #2]
   1ee14:	orr	r0, r6, r3, lsl r0
   1ee18:	str	r0, [r4, r7, lsl #2]
   1ee1c:	b	1ede4 <__assert_fail@plt+0xd934>
   1ee20:	mov	r2, #0
   1ee24:	mov	r3, #1
   1ee28:	b	1ee40 <__assert_fail@plt+0xd990>
   1ee2c:	add	r2, r2, #1
   1ee30:	add	r1, r1, #2
   1ee34:	mov	r0, #0
   1ee38:	cmp	r2, #256	; 0x100
   1ee3c:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ee40:	ldrb	r0, [r1, #1]
   1ee44:	tst	r0, #32
   1ee48:	beq	1ee2c <__assert_fail@plt+0xd97c>
   1ee4c:	ldrb	r0, [r8, r2]
   1ee50:	ubfx	r7, r0, #5, #3
   1ee54:	and	r0, r0, #31
   1ee58:	ldr	r6, [r4, r7, lsl #2]
   1ee5c:	orr	r0, r6, r3, lsl r0
   1ee60:	str	r0, [r4, r7, lsl #2]
   1ee64:	b	1ee2c <__assert_fail@plt+0xd97c>
   1ee68:	add	r2, r2, #1
   1ee6c:	add	r1, r1, #2
   1ee70:	mov	r0, #0
   1ee74:	cmp	r2, #256	; 0x100
   1ee78:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ee7c:	ldrb	r0, [r1, #1]
   1ee80:	tst	r0, #16
   1ee84:	beq	1ee68 <__assert_fail@plt+0xd9b8>
   1ee88:	ldrb	r0, [r8, r2]
   1ee8c:	ubfx	r7, r0, #5, #3
   1ee90:	and	r0, r0, #31
   1ee94:	ldr	r6, [r4, r7, lsl #2]
   1ee98:	orr	r0, r6, r3, lsl r0
   1ee9c:	str	r0, [r4, r7, lsl #2]
   1eea0:	b	1ee68 <__assert_fail@plt+0xd9b8>
   1eea4:	mov	r2, #0
   1eea8:	mov	r3, #1
   1eeac:	b	1eec4 <__assert_fail@plt+0xda14>
   1eeb0:	add	r2, r2, #1
   1eeb4:	add	r1, r1, #2
   1eeb8:	mov	r0, #0
   1eebc:	cmp	r2, #256	; 0x100
   1eec0:	beq	1ef34 <__assert_fail@plt+0xda84>
   1eec4:	ldrb	r0, [r1, #1]
   1eec8:	tst	r0, #4
   1eecc:	beq	1eeb0 <__assert_fail@plt+0xda00>
   1eed0:	ldrb	r0, [r8, r2]
   1eed4:	ubfx	r7, r0, #5, #3
   1eed8:	and	r0, r0, #31
   1eedc:	ldr	r6, [r4, r7, lsl #2]
   1eee0:	orr	r0, r6, r3, lsl r0
   1eee4:	str	r0, [r4, r7, lsl #2]
   1eee8:	b	1eeb0 <__assert_fail@plt+0xda00>
   1eeec:	mov	r2, #0
   1eef0:	mov	r3, #1
   1eef4:	b	1ef0c <__assert_fail@plt+0xda5c>
   1eef8:	add	r2, r2, #1
   1eefc:	add	r1, r1, #2
   1ef00:	mov	r0, #0
   1ef04:	cmp	r2, #256	; 0x100
   1ef08:	beq	1ef34 <__assert_fail@plt+0xda84>
   1ef0c:	ldrb	r0, [r1, #1]
   1ef10:	tst	r0, #8
   1ef14:	beq	1eef8 <__assert_fail@plt+0xda48>
   1ef18:	ldrb	r0, [r8, r2]
   1ef1c:	ubfx	r7, r0, #5, #3
   1ef20:	and	r0, r0, #31
   1ef24:	ldr	r6, [r4, r7, lsl #2]
   1ef28:	orr	r0, r6, r3, lsl r0
   1ef2c:	str	r0, [r4, r7, lsl #2]
   1ef30:	b	1eef8 <__assert_fail@plt+0xda48>
   1ef34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef38:	mov	r0, #12
   1ef3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef44:	add	fp, sp, #24
   1ef48:	ldr	r3, [r1, #24]
   1ef4c:	mvn	r7, #1
   1ef50:	ldr	r2, [r1, #28]
   1ef54:	mov	r4, #0
   1ef58:	uxtab	r3, r7, r3
   1ef5c:	cmp	r3, #14
   1ef60:	bhi	1f084 <__assert_fail@plt+0xdbd4>
   1ef64:	add	r7, pc, #0
   1ef68:	ldr	pc, [r7, r3, lsl #2]
   1ef6c:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   1ef70:	andeq	pc, r1, r4, lsl #1
   1ef74:	muleq	r1, ip, r0
   1ef78:	andeq	pc, r1, r4, lsl #1
   1ef7c:	andeq	pc, r1, r4, lsl #1
   1ef80:	andeq	pc, r1, r4, lsl #1
   1ef84:	andeq	lr, r1, r8, lsr #31
   1ef88:	andeq	lr, r1, r8, lsr #31
   1ef8c:	strdeq	lr, [r1], -ip
   1ef90:	strdeq	lr, [r1], -ip
   1ef94:	andeq	lr, r1, r8, lsr #31
   1ef98:	andeq	pc, r1, r4, lsl #1
   1ef9c:	andeq	pc, r1, r4, lsl #1
   1efa0:	andeq	pc, r1, r4, lsl #1
   1efa4:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   1efa8:	ldr	r1, [r1, #16]
   1efac:	ldr	r5, [r1, #28]
   1efb0:	ldr	r6, [r0, #20]
   1efb4:	add	r0, r2, r2, lsl #1
   1efb8:	mov	r1, #1
   1efbc:	str	r1, [r6, r0, lsl #2]!
   1efc0:	mov	r0, #4
   1efc4:	mov	r7, r6
   1efc8:	str	r1, [r7, #4]!
   1efcc:	bl	29054 <__assert_fail@plt+0x17ba4>
   1efd0:	cmp	r0, #0
   1efd4:	str	r0, [r6, #8]
   1efd8:	strne	r5, [r0]
   1efdc:	movne	r0, r4
   1efe0:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1efe4:	mov	r0, #0
   1efe8:	str	r0, [r7]
   1efec:	str	r0, [r6]
   1eff0:	mov	r4, #12
   1eff4:	mov	r0, r4
   1eff8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1effc:	ldrb	r3, [r0, #88]	; 0x58
   1f000:	add	r6, r1, #16
   1f004:	add	r5, r2, r2, lsl #1
   1f008:	orr	r3, r3, #1
   1f00c:	strb	r3, [r0, #88]	; 0x58
   1f010:	mov	r3, r6
   1f014:	ldr	r7, [r1, #4]
   1f018:	ldr	r1, [r1, #8]
   1f01c:	cmp	r1, #0
   1f020:	addne	r3, r1, #12
   1f024:	cmp	r7, #0
   1f028:	ldr	r1, [r3]
   1f02c:	addne	r6, r7, #12
   1f030:	ldr	r8, [r1, #28]
   1f034:	ldr	r1, [r6]
   1f038:	ldr	r6, [r0, #20]
   1f03c:	mov	r0, #2
   1f040:	ldr	r9, [r1, #28]
   1f044:	mov	r7, r6
   1f048:	str	r0, [r7, r5, lsl #2]!
   1f04c:	mov	r0, #8
   1f050:	bl	29054 <__assert_fail@plt+0x17ba4>
   1f054:	cmp	r0, #0
   1f058:	str	r0, [r7, #8]
   1f05c:	beq	1eff0 <__assert_fail@plt+0xdb40>
   1f060:	add	r1, r6, r5, lsl #2
   1f064:	cmp	r9, r8
   1f068:	add	r1, r1, #4
   1f06c:	bne	1f0c0 <__assert_fail@plt+0xdc10>
   1f070:	mov	r2, #1
   1f074:	str	r2, [r1]
   1f078:	str	r9, [r0]
   1f07c:	mov	r0, r4
   1f080:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f084:	ldr	r1, [r1, #16]
   1f088:	ldr	r0, [r0, #12]
   1f08c:	ldr	r1, [r1, #28]
   1f090:	str	r1, [r0, r2, lsl #2]
   1f094:	mov	r0, r4
   1f098:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f09c:	ldr	r7, [r1, #16]
   1f0a0:	ldr	r3, [r0, #12]
   1f0a4:	ldr	r5, [r7, #28]
   1f0a8:	str	r5, [r3, r2, lsl #2]
   1f0ac:	ldrb	r1, [r1, #24]
   1f0b0:	cmp	r1, #4
   1f0b4:	beq	1efb0 <__assert_fail@plt+0xdb00>
   1f0b8:	mov	r0, r4
   1f0bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f0c0:	mov	r2, #2
   1f0c4:	str	r2, [r1]
   1f0c8:	stmcs	r0, {r8, r9}
   1f0cc:	strcc	r9, [r0]
   1f0d0:	strcc	r8, [r0, #4]
   1f0d4:	mov	r0, r4
   1f0d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f0dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0e0:	add	fp, sp, #28
   1f0e4:	sub	sp, sp, #4
   1f0e8:	ldr	r6, [r2, #4]
   1f0ec:	mov	r8, r0
   1f0f0:	ldr	r5, [r1]
   1f0f4:	mov	r9, r2
   1f0f8:	cmp	r6, #0
   1f0fc:	ldrbne	r0, [r1, #28]
   1f100:	andsne	r0, r0, #16
   1f104:	bne	1f2a8 <__assert_fail@plt+0xddf8>
   1f108:	ldr	r1, [r5, #64]	; 0x40
   1f10c:	cmp	r1, #31
   1f110:	beq	1f2d0 <__assert_fail@plt+0xde20>
   1f114:	ldr	r0, [r5, #56]	; 0x38
   1f118:	add	r0, r0, r1, lsl #5
   1f11c:	add	r2, r1, #1
   1f120:	vmov.i32	q8, #0	; 0x00000000
   1f124:	mov	r1, #0
   1f128:	str	r2, [r5, #64]	; 0x40
   1f12c:	mov	r2, #8
   1f130:	add	sl, r0, #4
   1f134:	str	r1, [r0, #20]
   1f138:	str	r1, [r0, #24]
   1f13c:	str	r2, [r0, #28]
   1f140:	mov	r0, #28
   1f144:	mov	r1, sl
   1f148:	vst1.32	{d16-d17}, [r1], r0
   1f14c:	mvn	r0, #0
   1f150:	str	r0, [r1]
   1f154:	ldr	r1, [r5, #64]	; 0x40
   1f158:	cmp	r1, #31
   1f15c:	beq	1f2f8 <__assert_fail@plt+0xde48>
   1f160:	ldr	r0, [r5, #56]	; 0x38
   1f164:	add	r0, r0, r1, lsl #5
   1f168:	add	r2, r1, #1
   1f16c:	vmov.i32	q8, #0	; 0x00000000
   1f170:	mov	r1, #0
   1f174:	str	r2, [r5, #64]	; 0x40
   1f178:	mov	r2, #9
   1f17c:	add	r7, r0, #4
   1f180:	str	r1, [r0, #20]
   1f184:	str	r1, [r0, #24]
   1f188:	str	r2, [r0, #28]
   1f18c:	mov	r0, #28
   1f190:	mov	r1, r7
   1f194:	vst1.32	{d16-d17}, [r1], r0
   1f198:	mvn	r0, #0
   1f19c:	str	r0, [r1]
   1f1a0:	cmp	r6, #0
   1f1a4:	mov	r4, r7
   1f1a8:	beq	1f1f8 <__assert_fail@plt+0xdd48>
   1f1ac:	ldr	r1, [r5, #64]	; 0x40
   1f1b0:	cmp	r1, #31
   1f1b4:	beq	1f348 <__assert_fail@plt+0xde98>
   1f1b8:	ldr	r0, [r5, #56]	; 0x38
   1f1bc:	add	r4, r0, r1, lsl #5
   1f1c0:	add	r2, r1, #1
   1f1c4:	mov	r0, #0
   1f1c8:	cmp	r7, #0
   1f1cc:	mov	r1, #16
   1f1d0:	str	r2, [r5, #64]	; 0x40
   1f1d4:	mvn	r2, #0
   1f1d8:	str	r0, [r4, #4]!
   1f1dc:	add	r3, r4, #20
   1f1e0:	stmib	r4, {r6, r7}
   1f1e4:	str	r0, [r4, #12]
   1f1e8:	str	r0, [r4, #16]
   1f1ec:	stm	r3, {r0, r1, r2}
   1f1f0:	str	r4, [r6]
   1f1f4:	strne	r4, [r7]
   1f1f8:	ldr	r1, [r5, #64]	; 0x40
   1f1fc:	cmp	r1, #31
   1f200:	beq	1f320 <__assert_fail@plt+0xde70>
   1f204:	ldr	r0, [r5, #56]	; 0x38
   1f208:	add	r6, r0, r1, lsl #5
   1f20c:	add	r2, r1, #1
   1f210:	mov	r0, #0
   1f214:	cmp	sl, #0
   1f218:	mov	r1, #16
   1f21c:	str	r2, [r5, #64]	; 0x40
   1f220:	mvn	r2, #0
   1f224:	str	r0, [r6, #4]!
   1f228:	add	r3, r6, #20
   1f22c:	str	sl, [r6, #4]
   1f230:	str	r4, [r6, #8]
   1f234:	str	r0, [r6, #12]
   1f238:	str	r0, [r6, #16]
   1f23c:	stm	r3, {r0, r1, r2}
   1f240:	strne	r6, [sl]
   1f244:	cmp	r4, #0
   1f248:	strne	r6, [r4]
   1f24c:	cmp	r7, #0
   1f250:	beq	1f260 <__assert_fail@plt+0xddb0>
   1f254:	cmp	sl, #0
   1f258:	cmpne	r4, #0
   1f25c:	bne	1f270 <__assert_fail@plt+0xddc0>
   1f260:	mov	r0, #12
   1f264:	mov	r6, #0
   1f268:	str	r0, [r8]
   1f26c:	b	1f2c4 <__assert_fail@plt+0xde14>
   1f270:	cmp	r6, #0
   1f274:	beq	1f260 <__assert_fail@plt+0xddb0>
   1f278:	ldr	r0, [r9, #20]
   1f27c:	str	r0, [r7, #20]
   1f280:	str	r0, [sl, #20]
   1f284:	ldr	r1, [r9, #24]
   1f288:	ldr	r0, [r7, #24]
   1f28c:	lsr	r1, r1, #19
   1f290:	bfi	r0, r1, #19, #1
   1f294:	str	r0, [r7, #24]
   1f298:	ldr	r0, [sl, #24]
   1f29c:	bfi	r0, r1, #19, #1
   1f2a0:	str	r0, [sl, #24]
   1f2a4:	b	1f2c4 <__assert_fail@plt+0xde14>
   1f2a8:	ldr	r0, [r9, #20]
   1f2ac:	cmp	r0, #31
   1f2b0:	bgt	1f2c4 <__assert_fail@plt+0xde14>
   1f2b4:	ldr	r1, [r5, #80]	; 0x50
   1f2b8:	mov	r2, #1
   1f2bc:	tst	r1, r2, lsl r0
   1f2c0:	bne	1f108 <__assert_fail@plt+0xdc58>
   1f2c4:	mov	r0, r6
   1f2c8:	sub	sp, fp, #28
   1f2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2d0:	mov	r0, #996	; 0x3e4
   1f2d4:	bl	29054 <__assert_fail@plt+0x17ba4>
   1f2d8:	cmp	r0, #0
   1f2dc:	beq	1f370 <__assert_fail@plt+0xdec0>
   1f2e0:	ldr	r1, [r5, #56]	; 0x38
   1f2e4:	str	r1, [r0]
   1f2e8:	mov	r1, #0
   1f2ec:	str	r1, [r5, #64]	; 0x40
   1f2f0:	str	r0, [r5, #56]	; 0x38
   1f2f4:	b	1f118 <__assert_fail@plt+0xdc68>
   1f2f8:	mov	r0, #996	; 0x3e4
   1f2fc:	bl	29054 <__assert_fail@plt+0x17ba4>
   1f300:	cmp	r0, #0
   1f304:	beq	1f378 <__assert_fail@plt+0xdec8>
   1f308:	ldr	r1, [r5, #56]	; 0x38
   1f30c:	str	r1, [r0]
   1f310:	mov	r1, #0
   1f314:	str	r1, [r5, #64]	; 0x40
   1f318:	str	r0, [r5, #56]	; 0x38
   1f31c:	b	1f164 <__assert_fail@plt+0xdcb4>
   1f320:	mov	r0, #996	; 0x3e4
   1f324:	bl	29054 <__assert_fail@plt+0x17ba4>
   1f328:	cmp	r0, #0
   1f32c:	beq	1f380 <__assert_fail@plt+0xded0>
   1f330:	ldr	r1, [r5, #56]	; 0x38
   1f334:	str	r1, [r0]
   1f338:	mov	r1, #0
   1f33c:	str	r1, [r5, #64]	; 0x40
   1f340:	str	r0, [r5, #56]	; 0x38
   1f344:	b	1f208 <__assert_fail@plt+0xdd58>
   1f348:	mov	r0, #996	; 0x3e4
   1f34c:	bl	29054 <__assert_fail@plt+0x17ba4>
   1f350:	cmp	r0, #0
   1f354:	beq	1f390 <__assert_fail@plt+0xdee0>
   1f358:	ldr	r1, [r5, #56]	; 0x38
   1f35c:	str	r1, [r0]
   1f360:	mov	r1, #0
   1f364:	str	r1, [r5, #64]	; 0x40
   1f368:	str	r0, [r5, #56]	; 0x38
   1f36c:	b	1f1bc <__assert_fail@plt+0xdd0c>
   1f370:	mov	sl, #0
   1f374:	b	1f154 <__assert_fail@plt+0xdca4>
   1f378:	mov	r7, #0
   1f37c:	b	1f1a0 <__assert_fail@plt+0xdcf0>
   1f380:	mov	r6, #0
   1f384:	cmp	r7, #0
   1f388:	bne	1f254 <__assert_fail@plt+0xdda4>
   1f38c:	b	1f260 <__assert_fail@plt+0xddb0>
   1f390:	mov	r4, #0
   1f394:	b	1f1f8 <__assert_fail@plt+0xdd48>
   1f398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f39c:	add	fp, sp, #28
   1f3a0:	sub	sp, sp, #12
   1f3a4:	mov	r4, r0
   1f3a8:	ldr	r7, [r0, #4]
   1f3ac:	ldr	r0, [r0, #8]
   1f3b0:	mov	r5, r2
   1f3b4:	mov	r9, r1
   1f3b8:	cmp	r0, r7
   1f3bc:	bcs	1f488 <__assert_fail@plt+0xdfd8>
   1f3c0:	ldr	r1, [r4]
   1f3c4:	str	r9, [r1, r0, lsl #3]!
   1f3c8:	str	r5, [r1, #4]
   1f3cc:	ldr	r0, [r4]
   1f3d0:	ldr	r1, [r4, #8]
   1f3d4:	add	r0, r0, r1, lsl #3
   1f3d8:	ldr	r1, [r0, #4]
   1f3dc:	bfc	r1, #8, #10
   1f3e0:	str	r1, [r0, #4]
   1f3e4:	uxtb	r1, r5
   1f3e8:	cmp	r1, #5
   1f3ec:	bne	1f400 <__assert_fail@plt+0xdf50>
   1f3f0:	ldr	r2, [r4, #92]	; 0x5c
   1f3f4:	mov	r0, #1048576	; 0x100000
   1f3f8:	cmp	r2, #1
   1f3fc:	bgt	1f410 <__assert_fail@plt+0xdf60>
   1f400:	sub	r0, r1, #6
   1f404:	clz	r0, r0
   1f408:	lsr	r0, r0, #5
   1f40c:	lsl	r0, r0, #20
   1f410:	ldr	r1, [r4]
   1f414:	ldr	r2, [r4, #8]
   1f418:	add	r1, r1, r2, lsl #3
   1f41c:	ldr	r2, [r1, #4]
   1f420:	bic	r2, r2, #1048576	; 0x100000
   1f424:	orr	r0, r2, r0
   1f428:	mvn	r2, #0
   1f42c:	str	r0, [r1, #4]
   1f430:	ldr	r0, [r4, #8]
   1f434:	ldr	r1, [r4, #12]
   1f438:	str	r2, [r1, r0, lsl #2]
   1f43c:	mov	r2, #0
   1f440:	ldr	r0, [r4, #8]
   1f444:	ldr	r1, [r4, #20]
   1f448:	add	r0, r0, r0, lsl #1
   1f44c:	str	r2, [r1, r0, lsl #2]!
   1f450:	str	r2, [r1, #4]
   1f454:	str	r2, [r1, #8]
   1f458:	ldr	r0, [r4, #8]
   1f45c:	ldr	r1, [r4, #24]
   1f460:	add	r0, r0, r0, lsl #1
   1f464:	str	r2, [r1, r0, lsl #2]!
   1f468:	str	r2, [r1, #4]
   1f46c:	str	r2, [r1, #8]
   1f470:	ldr	r6, [r4, #8]
   1f474:	add	r0, r6, #1
   1f478:	str	r0, [r4, #8]
   1f47c:	mov	r0, r6
   1f480:	sub	sp, fp, #28
   1f484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f488:	movw	r0, #21845	; 0x5555
   1f48c:	lsl	r1, r7, #1
   1f490:	mvn	r6, #0
   1f494:	movt	r0, #5461	; 0x1555
   1f498:	cmp	r1, r0
   1f49c:	bhi	1f47c <__assert_fail@plt+0xdfcc>
   1f4a0:	ldr	r0, [r4]
   1f4a4:	str	r1, [sp, #8]
   1f4a8:	lsl	r1, r7, #4
   1f4ac:	bl	29084 <__assert_fail@plt+0x17bd4>
   1f4b0:	cmp	r0, #0
   1f4b4:	beq	1f47c <__assert_fail@plt+0xdfcc>
   1f4b8:	str	r0, [r4]
   1f4bc:	lsl	r8, r7, #3
   1f4c0:	ldr	r0, [r4, #12]
   1f4c4:	mov	r1, r8
   1f4c8:	bl	29084 <__assert_fail@plt+0x17bd4>
   1f4cc:	str	r0, [sp, #4]
   1f4d0:	ldr	r0, [r4, #16]
   1f4d4:	mov	r1, r8
   1f4d8:	bl	29084 <__assert_fail@plt+0x17bd4>
   1f4dc:	mov	r2, r0
   1f4e0:	add	r1, r7, r7, lsl #1
   1f4e4:	ldr	r0, [r4, #20]
   1f4e8:	mov	r7, r2
   1f4ec:	lsl	r8, r1, #3
   1f4f0:	mov	r1, r8
   1f4f4:	bl	29084 <__assert_fail@plt+0x17bd4>
   1f4f8:	mov	sl, r0
   1f4fc:	ldr	r0, [r4, #24]
   1f500:	mov	r1, r8
   1f504:	bl	29084 <__assert_fail@plt+0x17bd4>
   1f508:	mov	r8, r0
   1f50c:	ldr	r0, [sp, #4]
   1f510:	cmp	r0, #0
   1f514:	beq	1f524 <__assert_fail@plt+0xe074>
   1f518:	cmp	r7, #0
   1f51c:	cmpne	sl, #0
   1f520:	bne	1f544 <__assert_fail@plt+0xe094>
   1f524:	bl	29220 <__assert_fail@plt+0x17d70>
   1f528:	mov	r0, r7
   1f52c:	bl	29220 <__assert_fail@plt+0x17d70>
   1f530:	mov	r0, sl
   1f534:	bl	29220 <__assert_fail@plt+0x17d70>
   1f538:	mov	r0, r8
   1f53c:	bl	29220 <__assert_fail@plt+0x17d70>
   1f540:	b	1f47c <__assert_fail@plt+0xdfcc>
   1f544:	cmp	r8, #0
   1f548:	beq	1f524 <__assert_fail@plt+0xe074>
   1f54c:	add	r1, r4, #12
   1f550:	stm	r1, {r0, r7, sl}
   1f554:	str	r8, [r4, #24]
   1f558:	ldr	r0, [sp, #8]
   1f55c:	str	r0, [r4, #4]
   1f560:	ldr	r0, [r4, #8]
   1f564:	b	1f3c0 <__assert_fail@plt+0xdf10>
   1f568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f56c:	add	fp, sp, #28
   1f570:	sub	sp, sp, #44	; 0x2c
   1f574:	mov	r8, r0
   1f578:	ldr	r0, [r1, #20]
   1f57c:	add	r4, r2, r2, lsl #1
   1f580:	mov	r5, r1
   1f584:	mov	r1, #0
   1f588:	mov	r9, r3
   1f58c:	mov	r6, r2
   1f590:	add	r0, r0, r4, lsl #2
   1f594:	ldr	r0, [r0, #4]
   1f598:	str	r1, [sp, #36]	; 0x24
   1f59c:	add	r0, r0, #1
   1f5a0:	str	r0, [sp, #32]
   1f5a4:	lsl	r0, r0, #2
   1f5a8:	bl	29054 <__assert_fail@plt+0x17ba4>
   1f5ac:	cmp	r0, #0
   1f5b0:	str	r0, [sp, #40]	; 0x28
   1f5b4:	beq	1f784 <__assert_fail@plt+0xe2d4>
   1f5b8:	mov	r1, #1
   1f5bc:	str	r6, [r0]
   1f5c0:	str	r1, [sp, #36]	; 0x24
   1f5c4:	mvn	r1, #0
   1f5c8:	ldr	r0, [r5, #24]
   1f5cc:	add	r0, r0, r4, lsl #2
   1f5d0:	str	r1, [r0, #4]
   1f5d4:	ldr	r2, [r5]
   1f5d8:	add	r0, r2, r6, lsl #3
   1f5dc:	ldr	r0, [r0, #4]
   1f5e0:	ubfx	r1, r0, #8, #10
   1f5e4:	cmp	r1, #0
   1f5e8:	beq	1f644 <__assert_fail@plt+0xe194>
   1f5ec:	ldr	r3, [r5, #20]
   1f5f0:	add	r3, r3, r4, lsl #2
   1f5f4:	ldr	r7, [r3, #4]
   1f5f8:	cmp	r7, #0
   1f5fc:	beq	1f644 <__assert_fail@plt+0xe194>
   1f600:	ldr	r3, [r3, #8]
   1f604:	ldr	r3, [r3]
   1f608:	add	r2, r2, r3, lsl #3
   1f60c:	ldrb	r2, [r2, #6]
   1f610:	tst	r2, #4
   1f614:	bne	1f644 <__assert_fail@plt+0xe194>
   1f618:	str	r1, [sp]
   1f61c:	mov	r0, r5
   1f620:	mov	r1, r6
   1f624:	mov	r2, r6
   1f628:	mov	r3, r6
   1f62c:	bl	1f790 <__assert_fail@plt+0xe2e0>
   1f630:	cmp	r0, #0
   1f634:	bne	1f77c <__assert_fail@plt+0xe2cc>
   1f638:	ldr	r0, [r5]
   1f63c:	add	r0, r0, r6, lsl #3
   1f640:	ldr	r0, [r0, #4]
   1f644:	tst	r0, #8
   1f648:	beq	1f750 <__assert_fail@plt+0xe2a0>
   1f64c:	ldr	r0, [r5, #20]
   1f650:	add	r1, r0, r4, lsl #2
   1f654:	ldr	r1, [r1, #4]
   1f658:	cmp	r1, #1
   1f65c:	blt	1f750 <__assert_fail@plt+0xe2a0>
   1f660:	str	r8, [sp, #12]
   1f664:	mov	r8, #0
   1f668:	add	r7, sp, #16
   1f66c:	add	sl, sp, #32
   1f670:	mov	r6, #0
   1f674:	str	r9, [sp, #8]
   1f678:	b	1f698 <__assert_fail@plt+0xe1e8>
   1f67c:	mov	r8, #1
   1f680:	ldr	r0, [r5, #20]
   1f684:	add	r6, r6, #1
   1f688:	add	r1, r0, r4, lsl #2
   1f68c:	ldr	r1, [r1, #4]
   1f690:	cmp	r6, r1
   1f694:	bge	1f724 <__assert_fail@plt+0xe274>
   1f698:	add	r0, r0, r4, lsl #2
   1f69c:	ldr	r0, [r0, #8]
   1f6a0:	ldr	r2, [r0, r6, lsl #2]
   1f6a4:	ldr	r0, [r5, #24]
   1f6a8:	add	r9, r2, r2, lsl #1
   1f6ac:	add	r0, r0, r9, lsl #2
   1f6b0:	ldr	r1, [r0, #4]
   1f6b4:	cmn	r1, #1
   1f6b8:	beq	1f67c <__assert_fail@plt+0xe1cc>
   1f6bc:	cmp	r1, #0
   1f6c0:	bne	1f6e0 <__assert_fail@plt+0xe230>
   1f6c4:	mov	r0, r7
   1f6c8:	mov	r1, r5
   1f6cc:	mov	r3, #0
   1f6d0:	bl	1f568 <__assert_fail@plt+0xe0b8>
   1f6d4:	cmp	r0, #0
   1f6d8:	beq	1f6f0 <__assert_fail@plt+0xe240>
   1f6dc:	b	1f77c <__assert_fail@plt+0xe2cc>
   1f6e0:	vldr	d16, [r0]
   1f6e4:	ldr	r0, [r0, #8]
   1f6e8:	str	r0, [sp, #24]
   1f6ec:	vstr	d16, [sp, #16]
   1f6f0:	mov	r0, sl
   1f6f4:	mov	r1, r7
   1f6f8:	bl	1fc18 <__assert_fail@plt+0xe768>
   1f6fc:	cmp	r0, #0
   1f700:	bne	1f77c <__assert_fail@plt+0xe2cc>
   1f704:	ldr	r0, [r5, #24]
   1f708:	add	r0, r0, r9, lsl #2
   1f70c:	ldr	r0, [r0, #4]
   1f710:	cmp	r0, #0
   1f714:	bne	1f680 <__assert_fail@plt+0xe1d0>
   1f718:	ldr	r0, [sp, #24]
   1f71c:	bl	29220 <__assert_fail@plt+0x17d70>
   1f720:	b	1f67c <__assert_fail@plt+0xe1cc>
   1f724:	tst	r8, #1
   1f728:	ldr	r8, [sp, #12]
   1f72c:	ldr	r0, [sp, #8]
   1f730:	beq	1f750 <__assert_fail@plt+0xe2a0>
   1f734:	cmp	r0, #0
   1f738:	bne	1f750 <__assert_fail@plt+0xe2a0>
   1f73c:	ldr	r0, [r5, #24]
   1f740:	mov	r1, #0
   1f744:	add	r0, r0, r4, lsl #2
   1f748:	str	r1, [r0, #4]
   1f74c:	b	1f768 <__assert_fail@plt+0xe2b8>
   1f750:	ldr	r0, [r5, #24]
   1f754:	vldr	d16, [sp, #32]
   1f758:	ldr	r1, [sp, #40]	; 0x28
   1f75c:	add	r0, r0, r4, lsl #2
   1f760:	str	r1, [r0, #8]
   1f764:	vstr	d16, [r0]
   1f768:	ldr	r0, [sp, #40]	; 0x28
   1f76c:	vldr	d16, [sp, #32]
   1f770:	str	r0, [r8, #8]
   1f774:	mov	r0, #0
   1f778:	vstr	d16, [r8]
   1f77c:	sub	sp, fp, #28
   1f780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f784:	mov	r0, #12
   1f788:	sub	sp, fp, #28
   1f78c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f794:	add	fp, sp, #28
   1f798:	sub	sp, sp, #20
   1f79c:	mov	r9, r0
   1f7a0:	ldr	r0, [fp, #8]
   1f7a4:	mov	r8, r2
   1f7a8:	mov	r5, r1
   1f7ac:	str	r3, [sp, #8]
   1f7b0:	str	r0, [sp, #12]
   1f7b4:	ldr	r1, [sp, #12]
   1f7b8:	movw	r0, #65280	; 0xff00
   1f7bc:	movt	r0, #3
   1f7c0:	and	r0, r0, r1, lsl #8
   1f7c4:	str	r0, [sp, #16]
   1f7c8:	ldr	r2, [r9]
   1f7cc:	add	r3, r2, r5, lsl #3
   1f7d0:	ldrb	r0, [r3, #4]!
   1f7d4:	cmp	r0, #4
   1f7d8:	bne	1f8b0 <__assert_fail@plt+0xe400>
   1f7dc:	ldr	r0, [r9, #12]
   1f7e0:	ldr	r1, [r9, #20]
   1f7e4:	add	r7, r8, r8, lsl #1
   1f7e8:	ldr	r6, [r0, r5, lsl #2]
   1f7ec:	add	r0, r1, r7, lsl #2
   1f7f0:	mov	r1, #0
   1f7f4:	str	r1, [r0, #4]
   1f7f8:	mov	r0, r9
   1f7fc:	ldr	r1, [r2, r6, lsl #3]!
   1f800:	ldr	r2, [r2, #4]
   1f804:	bl	1f398 <__assert_fail@plt+0xdee8>
   1f808:	cmn	r0, #1
   1f80c:	beq	1fc10 <__assert_fail@plt+0xe760>
   1f810:	mov	r4, r0
   1f814:	ldr	r0, [r9]
   1f818:	movw	r2, #255	; 0xff
   1f81c:	movt	r2, #65532	; 0xfffc
   1f820:	add	r0, r0, r4, lsl #3
   1f824:	ldr	r1, [r0, #4]
   1f828:	and	r1, r1, r2
   1f82c:	ldr	r2, [sp, #16]
   1f830:	orr	r1, r1, r2
   1f834:	movw	r2, #65280	; 0xff00
   1f838:	str	r1, [r0, #4]
   1f83c:	movt	r2, #3
   1f840:	ldr	r0, [r9]
   1f844:	add	r1, r0, r6, lsl #3
   1f848:	add	r0, r0, r4, lsl #3
   1f84c:	ldr	r1, [r1, #4]
   1f850:	and	r1, r1, r2
   1f854:	ldr	r2, [r0, #4]
   1f858:	orr	r1, r1, r2
   1f85c:	str	r1, [r0, #4]
   1f860:	ldr	r0, [r9]
   1f864:	add	r0, r0, r4, lsl #3
   1f868:	ldr	r1, [r0, #4]
   1f86c:	orr	r1, r1, #262144	; 0x40000
   1f870:	str	r1, [r0, #4]
   1f874:	ldr	r0, [r9, #16]
   1f878:	str	r6, [r0, r4, lsl #2]
   1f87c:	ldr	r0, [r9, #12]
   1f880:	ldr	r1, [r0, r5, lsl #2]
   1f884:	str	r1, [r0, r8, lsl #2]
   1f888:	mov	r1, r4
   1f88c:	ldr	r0, [r9, #20]
   1f890:	add	r0, r0, r7, lsl #2
   1f894:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   1f898:	cmp	r0, #0
   1f89c:	mov	r5, r6
   1f8a0:	mov	r8, r4
   1f8a4:	mov	r7, #12
   1f8a8:	bne	1f7c8 <__assert_fail@plt+0xe318>
   1f8ac:	b	1fbe0 <__assert_fail@plt+0xe730>
   1f8b0:	ldr	r0, [r9, #20]
   1f8b4:	add	ip, r5, r5, lsl #1
   1f8b8:	add	r7, r0, ip, lsl #2
   1f8bc:	ldr	r1, [r7, #4]
   1f8c0:	cmp	r1, #0
   1f8c4:	beq	1fbc4 <__assert_fail@plt+0xe714>
   1f8c8:	ldr	r7, [r7, #8]
   1f8cc:	add	r4, r8, r8, lsl #1
   1f8d0:	cmp	r1, #1
   1f8d4:	add	r0, r0, r4, lsl #2
   1f8d8:	ldr	sl, [r7]
   1f8dc:	mov	r7, #0
   1f8e0:	str	r7, [r0, #4]
   1f8e4:	beq	1faec <__assert_fail@plt+0xe63c>
   1f8e8:	ldr	r1, [r9, #8]
   1f8ec:	mov	r8, r4
   1f8f0:	ldr	r4, [sp, #12]
   1f8f4:	sub	r3, r1, #1
   1f8f8:	cmp	r3, #1
   1f8fc:	blt	1f94c <__assert_fail@plt+0xe49c>
   1f900:	add	r3, r2, r3, lsl #3
   1f904:	ldr	r7, [r3, #4]
   1f908:	ands	r3, r7, #262144	; 0x40000
   1f90c:	beq	1f94c <__assert_fail@plt+0xe49c>
   1f910:	ldr	r6, [r9, #16]
   1f914:	sub	r3, r2, #12
   1f918:	sub	r6, r6, #4
   1f91c:	ldr	r5, [r6, r1, lsl #2]
   1f920:	cmp	r5, sl
   1f924:	ubfxeq	r7, r7, #8, #10
   1f928:	cmpeq	r7, r4
   1f92c:	beq	1fad0 <__assert_fail@plt+0xe620>
   1f930:	sub	r7, r1, #2
   1f934:	cmp	r7, #1
   1f938:	blt	1f94c <__assert_fail@plt+0xe49c>
   1f93c:	ldr	r7, [r3, r1, lsl #3]
   1f940:	sub	r1, r1, #1
   1f944:	ands	r5, r7, #262144	; 0x40000
   1f948:	bne	1f91c <__assert_fail@plt+0xe46c>
   1f94c:	ldr	r1, [r2, sl, lsl #3]!
   1f950:	mov	r0, r9
   1f954:	mov	r5, ip
   1f958:	ldr	r2, [r2, #4]
   1f95c:	bl	1f398 <__assert_fail@plt+0xdee8>
   1f960:	mov	r7, #12
   1f964:	cmn	r0, #1
   1f968:	beq	1fbe0 <__assert_fail@plt+0xe730>
   1f96c:	mov	r6, r0
   1f970:	ldr	r0, [r9]
   1f974:	movw	r2, #255	; 0xff
   1f978:	mov	r4, r8
   1f97c:	movt	r2, #65532	; 0xfffc
   1f980:	add	r0, r0, r6, lsl #3
   1f984:	ldr	r1, [r0, #4]
   1f988:	and	r1, r1, r2
   1f98c:	ldr	r2, [sp, #16]
   1f990:	orr	r1, r1, r2
   1f994:	movw	r2, #65280	; 0xff00
   1f998:	str	r1, [r0, #4]
   1f99c:	movt	r2, #3
   1f9a0:	ldr	r0, [r9]
   1f9a4:	add	r1, r0, sl, lsl #3
   1f9a8:	add	r0, r0, r6, lsl #3
   1f9ac:	ldr	r1, [r1, #4]
   1f9b0:	and	r1, r1, r2
   1f9b4:	ldr	r2, [r0, #4]
   1f9b8:	orr	r1, r1, r2
   1f9bc:	str	r1, [r0, #4]
   1f9c0:	ldr	r0, [r9]
   1f9c4:	add	r0, r0, r6, lsl #3
   1f9c8:	ldr	r1, [r0, #4]
   1f9cc:	orr	r1, r1, #262144	; 0x40000
   1f9d0:	str	r1, [r0, #4]
   1f9d4:	mov	r1, r6
   1f9d8:	ldr	r0, [r9, #16]
   1f9dc:	str	sl, [r0, r6, lsl #2]
   1f9e0:	ldr	r0, [r9, #20]
   1f9e4:	add	r0, r0, r8, lsl #2
   1f9e8:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   1f9ec:	cmp	r0, #0
   1f9f0:	beq	1fbe0 <__assert_fail@plt+0xe730>
   1f9f4:	ldr	r0, [sp, #12]
   1f9f8:	ldr	r3, [sp, #8]
   1f9fc:	mov	r1, sl
   1fa00:	mov	r2, r6
   1fa04:	str	r0, [sp]
   1fa08:	mov	r0, r9
   1fa0c:	bl	1f790 <__assert_fail@plt+0xe2e0>
   1fa10:	cmp	r0, #0
   1fa14:	bne	1fbdc <__assert_fail@plt+0xe72c>
   1fa18:	ldr	r1, [r9, #20]
   1fa1c:	ldr	r0, [r9]
   1fa20:	add	r1, r1, r5, lsl #2
   1fa24:	ldr	r1, [r1, #8]
   1fa28:	ldr	r5, [r1, #4]
   1fa2c:	ldr	r1, [r0, r5, lsl #3]!
   1fa30:	ldr	r2, [r0, #4]
   1fa34:	mov	r0, r9
   1fa38:	bl	1f398 <__assert_fail@plt+0xdee8>
   1fa3c:	mov	r7, #12
   1fa40:	cmn	r0, #1
   1fa44:	beq	1fbe0 <__assert_fail@plt+0xe730>
   1fa48:	mov	r8, r0
   1fa4c:	ldr	r0, [r9]
   1fa50:	movw	r2, #255	; 0xff
   1fa54:	movt	r2, #65532	; 0xfffc
   1fa58:	add	r0, r0, r8, lsl #3
   1fa5c:	ldr	r1, [r0, #4]
   1fa60:	and	r1, r1, r2
   1fa64:	ldr	r2, [sp, #16]
   1fa68:	orr	r1, r1, r2
   1fa6c:	movw	r2, #65280	; 0xff00
   1fa70:	str	r1, [r0, #4]
   1fa74:	movt	r2, #3
   1fa78:	ldr	r0, [r9]
   1fa7c:	add	r1, r0, r5, lsl #3
   1fa80:	add	r0, r0, r8, lsl #3
   1fa84:	ldr	r1, [r1, #4]
   1fa88:	and	r1, r1, r2
   1fa8c:	ldr	r2, [r0, #4]
   1fa90:	orr	r1, r1, r2
   1fa94:	str	r1, [r0, #4]
   1fa98:	ldr	r0, [r9]
   1fa9c:	add	r0, r0, r8, lsl #3
   1faa0:	ldr	r1, [r0, #4]
   1faa4:	orr	r1, r1, #262144	; 0x40000
   1faa8:	str	r1, [r0, #4]
   1faac:	mov	r1, r8
   1fab0:	ldr	r0, [r9, #16]
   1fab4:	str	r5, [r0, r8, lsl #2]
   1fab8:	ldr	r0, [r9, #20]
   1fabc:	add	r0, r0, r4, lsl #2
   1fac0:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   1fac4:	cmp	r0, #0
   1fac8:	bne	1f7c8 <__assert_fail@plt+0xe318>
   1facc:	b	1fbe0 <__assert_fail@plt+0xe730>
   1fad0:	sub	r1, r1, #1
   1fad4:	mov	r5, ip
   1fad8:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   1fadc:	cmp	r0, #0
   1fae0:	mov	r4, r8
   1fae4:	bne	1fa18 <__assert_fail@plt+0xe568>
   1fae8:	b	1fc10 <__assert_fail@plt+0xe760>
   1faec:	ldr	r1, [sp, #8]
   1faf0:	cmp	r5, r1
   1faf4:	bne	1fb00 <__assert_fail@plt+0xe650>
   1faf8:	cmp	r8, r5
   1fafc:	bne	1fbec <__assert_fail@plt+0xe73c>
   1fb00:	ldr	r1, [r2, sl, lsl #3]!
   1fb04:	ldr	r6, [r3]
   1fb08:	mov	r0, r9
   1fb0c:	ldr	r2, [r2, #4]
   1fb10:	bl	1f398 <__assert_fail@plt+0xdee8>
   1fb14:	mov	r8, r0
   1fb18:	ubfx	r0, r6, #8, #10
   1fb1c:	mov	r7, #12
   1fb20:	cmn	r8, #1
   1fb24:	beq	1fbe0 <__assert_fail@plt+0xe730>
   1fb28:	ldr	r1, [sp, #12]
   1fb2c:	movw	r7, #255	; 0xff
   1fb30:	movt	r7, #65532	; 0xfffc
   1fb34:	orr	r1, r0, r1
   1fb38:	movw	r0, #65280	; 0xff00
   1fb3c:	movt	r0, #3
   1fb40:	str	r1, [sp, #12]
   1fb44:	mov	r3, r0
   1fb48:	and	r0, r0, r1, lsl #8
   1fb4c:	ldr	r1, [r9]
   1fb50:	add	r1, r1, r8, lsl #3
   1fb54:	ldr	r2, [r1, #4]
   1fb58:	and	r2, r2, r7
   1fb5c:	mov	r7, #12
   1fb60:	orr	r0, r2, r0
   1fb64:	str	r0, [r1, #4]
   1fb68:	ldr	r0, [r9]
   1fb6c:	add	r1, r0, sl, lsl #3
   1fb70:	add	r0, r0, r8, lsl #3
   1fb74:	ldr	r1, [r1, #4]
   1fb78:	ldr	r2, [r0, #4]
   1fb7c:	and	r1, r1, r3
   1fb80:	orr	r1, r1, r2
   1fb84:	str	r1, [r0, #4]
   1fb88:	ldr	r0, [r9]
   1fb8c:	add	r0, r0, r8, lsl #3
   1fb90:	ldr	r1, [r0, #4]
   1fb94:	orr	r1, r1, #262144	; 0x40000
   1fb98:	str	r1, [r0, #4]
   1fb9c:	mov	r1, r8
   1fba0:	ldr	r0, [r9, #16]
   1fba4:	str	sl, [r0, r8, lsl #2]
   1fba8:	ldr	r0, [r9, #20]
   1fbac:	add	r0, r0, r4, lsl #2
   1fbb0:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   1fbb4:	cmp	r0, #0
   1fbb8:	mov	r5, sl
   1fbbc:	bne	1f7b4 <__assert_fail@plt+0xe304>
   1fbc0:	b	1fbe0 <__assert_fail@plt+0xe730>
   1fbc4:	ldr	r0, [r9, #12]
   1fbc8:	ldr	r1, [r0, r5, lsl #2]
   1fbcc:	str	r1, [r0, r8, lsl #2]
   1fbd0:	mov	r0, #0
   1fbd4:	sub	sp, fp, #28
   1fbd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbdc:	mov	r7, r0
   1fbe0:	mov	r0, r7
   1fbe4:	sub	sp, fp, #28
   1fbe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbec:	mov	r1, sl
   1fbf0:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   1fbf4:	mov	r1, r0
   1fbf8:	mov	r7, #12
   1fbfc:	mov	r0, #0
   1fc00:	cmp	r1, #0
   1fc04:	moveq	r0, r7
   1fc08:	sub	sp, fp, #28
   1fc0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc10:	mov	r7, #12
   1fc14:	b	1fbe0 <__assert_fail@plt+0xe730>
   1fc18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fc1c:	add	fp, sp, #24
   1fc20:	mov	r8, #0
   1fc24:	cmp	r1, #0
   1fc28:	beq	1fd78 <__assert_fail@plt+0xe8c8>
   1fc2c:	mov	r6, r1
   1fc30:	ldr	r1, [r1, #4]
   1fc34:	cmp	r1, #0
   1fc38:	beq	1fd78 <__assert_fail@plt+0xe8c8>
   1fc3c:	mov	r9, r0
   1fc40:	ldr	r2, [r0]
   1fc44:	ldr	r0, [r0, #4]
   1fc48:	add	r3, r0, r1, lsl #1
   1fc4c:	cmp	r2, r3
   1fc50:	bge	1fc7c <__assert_fail@plt+0xe7cc>
   1fc54:	ldr	r0, [r9, #8]
   1fc58:	add	r7, r2, r1
   1fc5c:	lsl	r1, r7, #3
   1fc60:	bl	29084 <__assert_fail@plt+0x17bd4>
   1fc64:	cmp	r0, #0
   1fc68:	beq	1fd98 <__assert_fail@plt+0xe8e8>
   1fc6c:	str	r0, [r9, #8]
   1fc70:	lsl	r0, r7, #1
   1fc74:	str	r0, [r9]
   1fc78:	ldr	r0, [r9, #4]
   1fc7c:	cmp	r0, #0
   1fc80:	beq	1fd80 <__assert_fail@plt+0xe8d0>
   1fc84:	ldr	r2, [r6, #4]
   1fc88:	sub	r1, r0, #1
   1fc8c:	add	r7, r0, r2, lsl #1
   1fc90:	sub	r0, r2, #1
   1fc94:	orrs	r2, r0, r1
   1fc98:	bmi	1fce0 <__assert_fail@plt+0xe830>
   1fc9c:	ldr	r2, [r6, #8]
   1fca0:	ldr	r3, [r9, #8]
   1fca4:	b	1fcc4 <__assert_fail@plt+0xe814>
   1fca8:	sublt	r7, r7, #1
   1fcac:	subge	r1, r1, #1
   1fcb0:	sublt	r0, r0, #1
   1fcb4:	strlt	r4, [r3, r7, lsl #2]
   1fcb8:	orr	r5, r0, r1
   1fcbc:	cmn	r5, #1
   1fcc0:	ble	1fce0 <__assert_fail@plt+0xe830>
   1fcc4:	ldr	r4, [r2, r0, lsl #2]
   1fcc8:	ldr	r5, [r3, r1, lsl #2]
   1fccc:	cmp	r5, r4
   1fcd0:	bne	1fca8 <__assert_fail@plt+0xe7f8>
   1fcd4:	sub	r1, r1, #1
   1fcd8:	sub	r0, r0, #1
   1fcdc:	b	1fcb8 <__assert_fail@plt+0xe808>
   1fce0:	cmp	r0, #0
   1fce4:	bmi	1fd04 <__assert_fail@plt+0xe854>
   1fce8:	add	r2, r0, #1
   1fcec:	ldr	r0, [r9, #8]
   1fcf0:	ldr	r1, [r6, #8]
   1fcf4:	sub	r7, r7, r2
   1fcf8:	lsl	r2, r2, #2
   1fcfc:	add	r0, r0, r7, lsl #2
   1fd00:	bl	11258 <memcpy@plt>
   1fd04:	ldr	r0, [r9, #4]
   1fd08:	ldr	r2, [r6, #4]
   1fd0c:	sub	r1, r0, #1
   1fd10:	add	r3, r1, r2, lsl #1
   1fd14:	sub	r2, r3, r7
   1fd18:	adds	r2, r2, #1
   1fd1c:	bcs	1fd78 <__assert_fail@plt+0xe8c8>
   1fd20:	add	r0, r2, r0
   1fd24:	str	r0, [r9, #4]
   1fd28:	ldr	r0, [r9, #8]
   1fd2c:	ldr	r6, [r0, r1, lsl #2]
   1fd30:	ldr	r5, [r0, r3, lsl #2]
   1fd34:	cmp	r5, r6
   1fd38:	ble	1fd54 <__assert_fail@plt+0xe8a4>
   1fd3c:	add	r6, r2, r1
   1fd40:	subs	r2, r2, #1
   1fd44:	sub	r3, r3, #1
   1fd48:	str	r5, [r0, r6, lsl #2]
   1fd4c:	bne	1fd2c <__assert_fail@plt+0xe87c>
   1fd50:	b	1fd78 <__assert_fail@plt+0xe8c8>
   1fd54:	add	r5, r2, r1
   1fd58:	cmp	r1, #0
   1fd5c:	str	r6, [r0, r5, lsl #2]
   1fd60:	sub	r6, r1, #1
   1fd64:	mov	r1, r6
   1fd68:	bgt	1fd2c <__assert_fail@plt+0xe87c>
   1fd6c:	add	r1, r0, r7, lsl #2
   1fd70:	lsl	r2, r2, #2
   1fd74:	bl	11258 <memcpy@plt>
   1fd78:	mov	r0, r8
   1fd7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fd80:	ldr	r0, [r6, #4]
   1fd84:	str	r0, [r9, #4]
   1fd88:	ldr	r0, [r9, #8]
   1fd8c:	ldr	r2, [r6, #4]
   1fd90:	ldr	r1, [r6, #8]
   1fd94:	b	1fd70 <__assert_fail@plt+0xe8c0>
   1fd98:	mov	r8, #12
   1fd9c:	mov	r0, r8
   1fda0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fda4:	push	{r4, r5, r6, sl, fp, lr}
   1fda8:	add	fp, sp, #16
   1fdac:	ldr	r2, [r0]
   1fdb0:	mov	r5, r1
   1fdb4:	mov	r4, r0
   1fdb8:	cmp	r2, #0
   1fdbc:	beq	1fdec <__assert_fail@plt+0xe93c>
   1fdc0:	ldr	r1, [r4, #4]
   1fdc4:	cmp	r1, #0
   1fdc8:	bne	1fe28 <__assert_fail@plt+0xe978>
   1fdcc:	ldr	r0, [r4, #8]
   1fdd0:	str	r5, [r0]
   1fdd4:	ldr	r0, [r4, #4]
   1fdd8:	mov	r6, #1
   1fddc:	add	r0, r0, #1
   1fde0:	str	r0, [r4, #4]
   1fde4:	mov	r0, r6
   1fde8:	pop	{r4, r5, r6, sl, fp, pc}
   1fdec:	mov	r6, #1
   1fdf0:	mov	r0, #4
   1fdf4:	str	r6, [r4]
   1fdf8:	str	r6, [r4, #4]
   1fdfc:	bl	29054 <__assert_fail@plt+0x17ba4>
   1fe00:	cmp	r0, #0
   1fe04:	str	r0, [r4, #8]
   1fe08:	strne	r5, [r0]
   1fe0c:	movne	r0, r6
   1fe10:	popne	{r4, r5, r6, sl, fp, pc}
   1fe14:	mov	r6, #0
   1fe18:	mov	r0, r6
   1fe1c:	str	r6, [r4]
   1fe20:	str	r6, [r4, #4]
   1fe24:	pop	{r4, r5, r6, sl, fp, pc}
   1fe28:	cmp	r2, r1
   1fe2c:	bne	1fe58 <__assert_fail@plt+0xe9a8>
   1fe30:	lsl	r0, r2, #1
   1fe34:	lsl	r1, r2, #3
   1fe38:	str	r0, [r4]
   1fe3c:	ldr	r0, [r4, #8]
   1fe40:	bl	29084 <__assert_fail@plt+0x17bd4>
   1fe44:	cmp	r0, #0
   1fe48:	beq	1ff0c <__assert_fail@plt+0xea5c>
   1fe4c:	str	r0, [r4, #8]
   1fe50:	ldr	r1, [r4, #4]
   1fe54:	b	1fe5c <__assert_fail@plt+0xe9ac>
   1fe58:	ldr	r0, [r4, #8]
   1fe5c:	ldr	r2, [r0]
   1fe60:	cmp	r2, r5
   1fe64:	ble	1fed4 <__assert_fail@plt+0xea24>
   1fe68:	cmp	r1, #1
   1fe6c:	blt	1ff04 <__assert_fail@plt+0xea54>
   1fe70:	ands	r3, r1, #3
   1fe74:	sub	ip, r1, #1
   1fe78:	beq	1fe9c <__assert_fail@plt+0xe9ec>
   1fe7c:	add	lr, r0, r1, lsl #2
   1fe80:	mov	r6, lr
   1fe84:	ldr	r2, [r6, #-4]!
   1fe88:	subs	r3, r3, #1
   1fe8c:	sub	r1, r1, #1
   1fe90:	str	r2, [lr]
   1fe94:	mov	lr, r6
   1fe98:	bne	1fe84 <__assert_fail@plt+0xe9d4>
   1fe9c:	cmp	ip, #3
   1fea0:	bcc	1fecc <__assert_fail@plt+0xea1c>
   1fea4:	add	r2, r0, r1, lsl #2
   1fea8:	sub	r2, r2, #8
   1feac:	sub	lr, r2, #8
   1feb0:	sub	r1, r1, #4
   1feb4:	sub	sl, r2, #4
   1feb8:	sub	r2, r2, #16
   1febc:	ldm	lr, {r3, r6, ip, lr}
   1fec0:	cmp	r1, #0
   1fec4:	stm	sl, {r3, r6, ip, lr}
   1fec8:	bgt	1feac <__assert_fail@plt+0xe9fc>
   1fecc:	mov	r1, #0
   1fed0:	b	1ff04 <__assert_fail@plt+0xea54>
   1fed4:	add	r2, r0, r1, lsl #2
   1fed8:	ldr	r3, [r2, #-4]
   1fedc:	cmp	r3, r5
   1fee0:	ble	1ff04 <__assert_fail@plt+0xea54>
   1fee4:	sub	r1, r1, #2
   1fee8:	str	r3, [r2]
   1feec:	sub	r1, r1, #1
   1fef0:	ldr	r3, [r2, #-8]
   1fef4:	sub	r2, r2, #4
   1fef8:	cmp	r3, r5
   1fefc:	bgt	1fee8 <__assert_fail@plt+0xea38>
   1ff00:	add	r1, r1, #2
   1ff04:	str	r5, [r0, r1, lsl #2]
   1ff08:	b	1fdd4 <__assert_fail@plt+0xe924>
   1ff0c:	mov	r6, #0
   1ff10:	mov	r0, r6
   1ff14:	pop	{r4, r5, r6, sl, fp, pc}
   1ff18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff1c:	add	fp, sp, #28
   1ff20:	sub	sp, sp, #28
   1ff24:	ldr	r8, [r2, #4]
   1ff28:	str	r2, [sp, #24]
   1ff2c:	cmp	r8, #0
   1ff30:	beq	2013c <__assert_fail@plt+0xec8c>
   1ff34:	mov	r9, r3
   1ff38:	add	r7, r8, r3
   1ff3c:	cmp	r8, #1
   1ff40:	str	r0, [sp, #4]
   1ff44:	blt	20028 <__assert_fail@plt+0xeb78>
   1ff48:	ldr	r0, [sp, #24]
   1ff4c:	mov	sl, #0
   1ff50:	cmp	r8, #4
   1ff54:	ldr	ip, [r0, #8]
   1ff58:	bcc	20010 <__assert_fail@plt+0xeb60>
   1ff5c:	mov	r3, #0
   1ff60:	bic	sl, r8, #3
   1ff64:	mov	r0, #1
   1ff68:	vdup.32	q8, r3
   1ff6c:	sub	r2, sl, #4
   1ff70:	add	r0, r0, r2, lsr #2
   1ff74:	cmp	r2, #12
   1ff78:	and	lr, r0, #3
   1ff7c:	vmov.32	d16[0], r7
   1ff80:	bcc	1ffd4 <__assert_fail@plt+0xeb24>
   1ff84:	sub	r5, r0, lr
   1ff88:	mov	r3, #0
   1ff8c:	mov	r4, #64	; 0x40
   1ff90:	mov	r7, ip
   1ff94:	mov	r6, ip
   1ff98:	vld1.32	{d18-d19}, [r6], r4
   1ff9c:	add	r2, r7, #16
   1ffa0:	add	r0, r7, #32
   1ffa4:	subs	r5, r5, #4
   1ffa8:	add	r3, r3, #16
   1ffac:	vld1.32	{d20-d21}, [r2]
   1ffb0:	vadd.i32	q8, q9, q8
   1ffb4:	vld1.32	{d18-d19}, [r0]
   1ffb8:	add	r0, r7, #48	; 0x30
   1ffbc:	mov	r7, r6
   1ffc0:	vadd.i32	q8, q10, q8
   1ffc4:	vld1.32	{d20-d21}, [r0]
   1ffc8:	vadd.i32	q8, q9, q8
   1ffcc:	vadd.i32	q8, q10, q8
   1ffd0:	bne	1ff98 <__assert_fail@plt+0xeae8>
   1ffd4:	cmp	lr, #0
   1ffd8:	beq	1fff4 <__assert_fail@plt+0xeb44>
   1ffdc:	add	r0, ip, r3, lsl #2
   1ffe0:	rsb	r3, lr, #0
   1ffe4:	vld1.32	{d18-d19}, [r0]!
   1ffe8:	adds	r3, r3, #1
   1ffec:	vadd.i32	q8, q9, q8
   1fff0:	bcc	1ffe4 <__assert_fail@plt+0xeb34>
   1fff4:	vext.8	q9, q8, q8, #8
   1fff8:	cmp	r8, sl
   1fffc:	vadd.i32	q8, q8, q9
   20000:	vdup.32	q9, d16[1]
   20004:	vadd.i32	q8, q8, q9
   20008:	vmov.32	r7, d16[0]
   2000c:	beq	20028 <__assert_fail@plt+0xeb78>
   20010:	add	r3, ip, sl, lsl #2
   20014:	sub	r2, r8, sl
   20018:	ldr	r0, [r3], #4
   2001c:	subs	r2, r2, #1
   20020:	add	r7, r0, r7
   20024:	bne	20018 <__assert_fail@plt+0xeb68>
   20028:	ldr	r0, [r1, #32]
   2002c:	mov	sl, r1
   20030:	ldr	r1, [r1, #68]	; 0x44
   20034:	and	r1, r1, r7
   20038:	add	r2, r1, r1, lsl #1
   2003c:	ldr	r1, [r0, r2, lsl #2]
   20040:	cmp	r1, #1
   20044:	blt	200dc <__assert_fail@plt+0xec2c>
   20048:	add	r0, r0, r2, lsl #2
   2004c:	sub	ip, r8, #1
   20050:	mov	r5, #0
   20054:	ldr	lr, [r0, #8]
   20058:	b	20068 <__assert_fail@plt+0xebb8>
   2005c:	add	r5, r5, #1
   20060:	cmp	r5, r1
   20064:	bge	200dc <__assert_fail@plt+0xec2c>
   20068:	ldr	r4, [lr, r5, lsl #2]
   2006c:	ldr	r0, [r4]
   20070:	cmp	r0, r7
   20074:	bne	2005c <__assert_fail@plt+0xebac>
   20078:	ldrb	r0, [r4, #52]	; 0x34
   2007c:	and	r0, r0, #15
   20080:	cmp	r0, r9
   20084:	bne	2005c <__assert_fail@plt+0xebac>
   20088:	ldr	r0, [sp, #24]
   2008c:	cmp	r0, #0
   20090:	ldrne	r3, [r4, #40]	; 0x28
   20094:	cmpne	r3, #0
   20098:	beq	2005c <__assert_fail@plt+0xebac>
   2009c:	ldr	r0, [r3, #4]
   200a0:	cmp	r0, r8
   200a4:	bne	2005c <__assert_fail@plt+0xebac>
   200a8:	mov	r0, ip
   200ac:	add	r6, r0, #1
   200b0:	cmp	r6, #1
   200b4:	blt	2037c <__assert_fail@plt+0xeecc>
   200b8:	ldr	r2, [sp, #24]
   200bc:	ldr	r6, [r2, #8]
   200c0:	ldr	r2, [r3, #8]
   200c4:	ldr	r6, [r6, r0, lsl #2]
   200c8:	ldr	r2, [r2, r0, lsl #2]
   200cc:	sub	r0, r0, #1
   200d0:	cmp	r2, r6
   200d4:	beq	200ac <__assert_fail@plt+0xebfc>
   200d8:	b	2005c <__assert_fail@plt+0xebac>
   200dc:	mov	r0, #56	; 0x38
   200e0:	mov	r1, #1
   200e4:	bl	29000 <__assert_fail@plt+0x17b50>
   200e8:	cmp	r0, #0
   200ec:	beq	2039c <__assert_fail@plt+0xeeec>
   200f0:	mov	r4, r0
   200f4:	ldr	r0, [sp, #24]
   200f8:	add	r6, r4, #4
   200fc:	ldr	r8, [r0, #4]
   20100:	cmp	r8, #1
   20104:	str	r8, [r4, #8]
   20108:	blt	20148 <__assert_fail@plt+0xec98>
   2010c:	lsl	r0, r8, #2
   20110:	str	r8, [r4, #4]
   20114:	bl	29054 <__assert_fail@plt+0x17ba4>
   20118:	cmp	r0, #0
   2011c:	str	r0, [r4, #12]
   20120:	beq	203b0 <__assert_fail@plt+0xef00>
   20124:	ldr	r1, [sp, #24]
   20128:	ldr	r8, [r1, #4]
   2012c:	ldr	r1, [r1, #8]
   20130:	lsl	r2, r8, #2
   20134:	bl	11258 <memcpy@plt>
   20138:	b	20158 <__assert_fail@plt+0xeca8>
   2013c:	mov	r4, #0
   20140:	str	r4, [r0]
   20144:	b	2037c <__assert_fail@plt+0xeecc>
   20148:	mov	r0, #0
   2014c:	str	r0, [r6]
   20150:	str	r0, [r6, #4]
   20154:	str	r0, [r6, #8]
   20158:	str	r6, [r4, #40]	; 0x28
   2015c:	and	r0, r9, #15
   20160:	cmp	r8, #1
   20164:	ldrb	r1, [r4, #52]	; 0x34
   20168:	and	r1, r1, #240	; 0xf0
   2016c:	orr	r0, r1, r0
   20170:	strb	r0, [r4, #52]	; 0x34
   20174:	mov	r0, sl
   20178:	blt	20368 <__assert_fail@plt+0xeeb8>
   2017c:	movw	lr, #65280	; 0xff00
   20180:	and	r1, r9, #4
   20184:	and	ip, r9, #1
   20188:	mov	sl, #0
   2018c:	mov	r5, #0
   20190:	str	r0, [sp, #16]
   20194:	movt	lr, #3
   20198:	str	r1, [sp]
   2019c:	and	r1, r9, #2
   201a0:	str	ip, [sp, #12]
   201a4:	str	r1, [sp, #8]
   201a8:	add	r1, lr, #255	; 0xff
   201ac:	str	r1, [sp, #20]
   201b0:	b	201c4 <__assert_fail@plt+0xed14>
   201b4:	add	r5, r5, #1
   201b8:	add	sl, sl, #1
   201bc:	cmp	sl, r8
   201c0:	bge	20368 <__assert_fail@plt+0xeeb8>
   201c4:	ldr	r1, [sp, #24]
   201c8:	ldr	r2, [r0]
   201cc:	ldr	r1, [r1, #8]
   201d0:	ldr	r1, [r1, sl, lsl #2]
   201d4:	add	r1, r2, r1, lsl #3
   201d8:	ldr	r9, [r1, #4]
   201dc:	ldr	r1, [sp, #20]
   201e0:	and	r1, r9, r1
   201e4:	cmp	r1, #1
   201e8:	beq	201b8 <__assert_fail@plt+0xed08>
   201ec:	ldrb	r3, [r4, #52]	; 0x34
   201f0:	mov	r2, #32
   201f4:	and	r1, r9, lr
   201f8:	and	r2, r2, r9, lsr #15
   201fc:	orr	r2, r3, r2
   20200:	uxtb	r3, r9
   20204:	strb	r2, [r4, #52]	; 0x34
   20208:	cmp	r3, #2
   2020c:	beq	20220 <__assert_fail@plt+0xed70>
   20210:	cmp	r3, #4
   20214:	bne	2022c <__assert_fail@plt+0xed7c>
   20218:	mov	r3, #64	; 0x40
   2021c:	b	20224 <__assert_fail@plt+0xed74>
   20220:	mov	r3, #16
   20224:	orr	r2, r2, r3
   20228:	strb	r2, [r4, #52]	; 0x34
   2022c:	cmp	r1, #0
   20230:	beq	201b8 <__assert_fail@plt+0xed08>
   20234:	ldr	r1, [r4, #40]	; 0x28
   20238:	cmp	r1, r6
   2023c:	beq	20254 <__assert_fail@plt+0xeda4>
   20240:	cmp	ip, #0
   20244:	bne	202e8 <__assert_fail@plt+0xee38>
   20248:	ands	r1, r9, #256	; 0x100
   2024c:	bne	2031c <__assert_fail@plt+0xee6c>
   20250:	b	202e8 <__assert_fail@plt+0xee38>
   20254:	mov	r0, #12
   20258:	bl	29054 <__assert_fail@plt+0x17ba4>
   2025c:	cmp	r0, #0
   20260:	beq	20394 <__assert_fail@plt+0xeee4>
   20264:	mov	r5, r0
   20268:	str	r0, [r4, #40]	; 0x28
   2026c:	ldr	r0, [sp, #24]
   20270:	ldr	r8, [r0, #4]
   20274:	cmp	r8, #1
   20278:	str	r8, [r5, #4]
   2027c:	blt	202b0 <__assert_fail@plt+0xee00>
   20280:	lsl	r0, r8, #2
   20284:	str	r8, [r5]
   20288:	bl	29054 <__assert_fail@plt+0x17ba4>
   2028c:	cmp	r0, #0
   20290:	str	r0, [r5, #8]
   20294:	beq	20388 <__assert_fail@plt+0xeed8>
   20298:	ldr	r1, [sp, #24]
   2029c:	ldr	r8, [r1, #4]
   202a0:	ldr	r1, [r1, #8]
   202a4:	lsl	r2, r8, #2
   202a8:	bl	11258 <memcpy@plt>
   202ac:	b	202c0 <__assert_fail@plt+0xee10>
   202b0:	mov	r0, #0
   202b4:	str	r0, [r5]
   202b8:	str	r0, [r5, #4]
   202bc:	str	r0, [r5, #8]
   202c0:	ldrb	r0, [r4, #52]	; 0x34
   202c4:	ldr	ip, [sp, #12]
   202c8:	movw	lr, #65280	; 0xff00
   202cc:	mov	r5, #0
   202d0:	movt	lr, #3
   202d4:	orr	r0, r0, #128	; 0x80
   202d8:	strb	r0, [r4, #52]	; 0x34
   202dc:	ldr	r0, [sp, #16]
   202e0:	cmp	ip, #0
   202e4:	beq	20248 <__assert_fail@plt+0xed98>
   202e8:	cmp	ip, #0
   202ec:	andsne	r1, r9, #512	; 0x200
   202f0:	bne	2031c <__assert_fail@plt+0xee6c>
   202f4:	ldr	r1, [sp, #8]
   202f8:	cmp	r1, #0
   202fc:	bne	20308 <__assert_fail@plt+0xee58>
   20300:	ands	r1, r9, #4096	; 0x1000
   20304:	bne	2031c <__assert_fail@plt+0xee6c>
   20308:	ldr	r1, [sp]
   2030c:	cmp	r1, #0
   20310:	bne	201b8 <__assert_fail@plt+0xed08>
   20314:	ands	r1, r9, #16384	; 0x4000
   20318:	beq	201b8 <__assert_fail@plt+0xed08>
   2031c:	subs	r1, sl, r5
   20320:	bmi	201b4 <__assert_fail@plt+0xed04>
   20324:	ldr	r2, [r4, #8]
   20328:	cmp	r2, r1
   2032c:	subgt	r2, r2, #1
   20330:	strgt	r2, [r4, #8]
   20334:	cmpgt	r2, r1
   20338:	ble	201b4 <__assert_fail@plt+0xed04>
   2033c:	ldr	r2, [r4, #12]
   20340:	add	r3, r2, r1, lsl #2
   20344:	ldr	r3, [r3, #4]
   20348:	str	r3, [r2, r1, lsl #2]
   2034c:	add	r1, r1, #1
   20350:	ldr	r3, [r4, #8]
   20354:	cmp	r1, r3
   20358:	blt	20340 <__assert_fail@plt+0xee90>
   2035c:	ldr	r1, [sp, #24]
   20360:	ldr	r8, [r1, #4]
   20364:	b	201b4 <__assert_fail@plt+0xed04>
   20368:	mov	r1, r4
   2036c:	mov	r2, r7
   20370:	bl	203c8 <__assert_fail@plt+0xef18>
   20374:	cmp	r0, #0
   20378:	bne	20394 <__assert_fail@plt+0xeee4>
   2037c:	mov	r0, r4
   20380:	sub	sp, fp, #28
   20384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20388:	mov	r0, #0
   2038c:	str	r0, [r5]
   20390:	str	r0, [r5, #4]
   20394:	mov	r0, r4
   20398:	bl	19f58 <__assert_fail@plt+0x8aa8>
   2039c:	ldr	r1, [sp, #4]
   203a0:	mov	r0, #12
   203a4:	mov	r4, #0
   203a8:	str	r0, [r1]
   203ac:	b	2037c <__assert_fail@plt+0xeecc>
   203b0:	mov	r0, #0
   203b4:	str	r0, [r4, #4]
   203b8:	str	r0, [r4, #8]
   203bc:	mov	r0, r4
   203c0:	bl	29220 <__assert_fail@plt+0x17d70>
   203c4:	b	2039c <__assert_fail@plt+0xeeec>
   203c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203cc:	add	fp, sp, #28
   203d0:	sub	sp, sp, #4
   203d4:	str	r2, [r1]
   203d8:	mov	r4, r1
   203dc:	mov	r7, r0
   203e0:	mov	r0, #0
   203e4:	mov	r9, r2
   203e8:	ldr	r1, [r1, #8]
   203ec:	str	r1, [r4, #16]
   203f0:	str	r0, [r4, #20]
   203f4:	lsl	r0, r1, #2
   203f8:	bl	29054 <__assert_fail@plt+0x17ba4>
   203fc:	mov	r8, #12
   20400:	cmp	r0, #0
   20404:	str	r0, [r4, #24]
   20408:	beq	204d0 <__assert_fail@plt+0xf020>
   2040c:	ldr	r1, [r4, #8]
   20410:	cmp	r1, #1
   20414:	blt	20490 <__assert_fail@plt+0xefe0>
   20418:	mov	r5, #0
   2041c:	mov	sl, #2
   20420:	b	20440 <__assert_fail@plt+0xef90>
   20424:	add	r2, r1, #1
   20428:	str	r2, [r4, #20]
   2042c:	str	r6, [r0, r1, lsl #2]
   20430:	ldr	r1, [r4, #8]
   20434:	add	r5, r5, #1
   20438:	cmp	r5, r1
   2043c:	bge	20490 <__assert_fail@plt+0xefe0>
   20440:	ldr	r2, [r4, #12]
   20444:	ldr	r6, [r2, r5, lsl #2]
   20448:	ldr	r2, [r7]
   2044c:	add	r2, r2, r6, lsl #3
   20450:	ldrb	r2, [r2, #4]
   20454:	tst	r2, #8
   20458:	bne	20434 <__assert_fail@plt+0xef84>
   2045c:	ldr	r2, [r4, #16]
   20460:	ldr	r1, [r4, #20]
   20464:	cmp	r2, r1
   20468:	bne	20424 <__assert_fail@plt+0xef74>
   2046c:	add	r1, sl, r2, lsl #1
   20470:	str	r1, [r4, #16]
   20474:	lsl	r1, r1, #2
   20478:	bl	29084 <__assert_fail@plt+0x17bd4>
   2047c:	cmp	r0, #0
   20480:	beq	204d0 <__assert_fail@plt+0xf020>
   20484:	str	r0, [r4, #24]
   20488:	ldr	r1, [r4, #20]
   2048c:	b	20424 <__assert_fail@plt+0xef74>
   20490:	ldr	r1, [r7, #68]	; 0x44
   20494:	ldr	r0, [r7, #32]
   20498:	and	r1, r1, r9
   2049c:	mov	r5, r0
   204a0:	add	r2, r1, r1, lsl #1
   204a4:	ldr	r1, [r5, r2, lsl #2]!
   204a8:	mov	r6, r5
   204ac:	ldr	r3, [r6, #4]!
   204b0:	cmp	r3, r1
   204b4:	ble	204dc <__assert_fail@plt+0xf02c>
   204b8:	add	r0, r0, r2, lsl #2
   204bc:	ldr	r0, [r0, #8]
   204c0:	add	r2, r1, #1
   204c4:	mov	r8, #0
   204c8:	str	r2, [r5]
   204cc:	str	r4, [r0, r1, lsl #2]
   204d0:	mov	r0, r8
   204d4:	sub	sp, fp, #28
   204d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204dc:	add	r7, r0, r2, lsl #2
   204e0:	mov	r2, #2
   204e4:	add	r9, r2, r1, lsl #1
   204e8:	ldr	r0, [r7, #8]!
   204ec:	lsl	r1, r9, #2
   204f0:	bl	29084 <__assert_fail@plt+0x17bd4>
   204f4:	cmp	r0, #0
   204f8:	beq	204d0 <__assert_fail@plt+0xf020>
   204fc:	str	r0, [r7]
   20500:	str	r9, [r6]
   20504:	ldr	r1, [r5]
   20508:	b	204c0 <__assert_fail@plt+0xf010>
   2050c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20510:	add	fp, sp, #28
   20514:	sub	sp, sp, #36	; 0x24
   20518:	mov	r4, r0
   2051c:	ldr	r0, [r0, #24]
   20520:	mov	r6, r2
   20524:	mov	r9, r1
   20528:	cmp	r0, r1
   2052c:	ble	20728 <__assert_fail@plt+0xf278>
   20530:	ldr	r0, [r4, #80]	; 0x50
   20534:	mov	r1, #4
   20538:	cmp	r0, #2
   2053c:	movge	r0, #0
   20540:	strge	r0, [r4, #16]
   20544:	strge	r0, [r4, #20]
   20548:	mov	r0, #0
   2054c:	tst	r6, #1
   20550:	strb	r0, [r4, #76]	; 0x4c
   20554:	str	r0, [r4, #24]
   20558:	str	r0, [r4, #28]
   2055c:	str	r0, [r4, #32]
   20560:	movweq	r1, #6
   20564:	ldr	r2, [r4, #44]	; 0x2c
   20568:	ldr	r3, [r4, #52]	; 0x34
   2056c:	str	r2, [r4, #48]	; 0x30
   20570:	str	r3, [r4, #56]	; 0x38
   20574:	str	r1, [r4, #60]	; 0x3c
   20578:	ldrb	r1, [r4, #75]	; 0x4b
   2057c:	cmp	r1, #0
   20580:	bne	2058c <__assert_fail@plt+0xf0dc>
   20584:	ldr	r1, [r4]
   20588:	str	r1, [r4, #4]
   2058c:	mov	r5, r9
   20590:	cmp	r5, #0
   20594:	beq	206b0 <__assert_fail@plt+0xf200>
   20598:	ldr	r1, [r4, #32]
   2059c:	cmp	r5, r1
   205a0:	bge	20738 <__assert_fail@plt+0xf288>
   205a4:	ldrb	r0, [r4, #76]	; 0x4c
   205a8:	cmp	r0, #0
   205ac:	bne	208b4 <__assert_fail@plt+0xf404>
   205b0:	cmp	r5, #0
   205b4:	ble	205f0 <__assert_fail@plt+0xf140>
   205b8:	ldr	r1, [r4, #48]	; 0x30
   205bc:	sub	r0, r5, #1
   205c0:	cmp	r1, r0
   205c4:	beq	2096c <__assert_fail@plt+0xf4bc>
   205c8:	ldr	r1, [r4, #80]	; 0x50
   205cc:	cmp	r1, #2
   205d0:	blt	205f8 <__assert_fail@plt+0xf148>
   205d4:	ldr	r1, [r4, #8]
   205d8:	ldr	r6, [r1, r0, lsl #2]
   205dc:	cmn	r6, #1
   205e0:	bne	20628 <__assert_fail@plt+0xf178>
   205e4:	sub	r0, r0, #1
   205e8:	cmn	r0, #1
   205ec:	bne	205d8 <__assert_fail@plt+0xf128>
   205f0:	ldr	r1, [r4, #60]	; 0x3c
   205f4:	b	20650 <__assert_fail@plt+0xf1a0>
   205f8:	ldr	r1, [r4, #4]
   205fc:	ldr	r2, [r4, #68]	; 0x44
   20600:	ldrb	r0, [r1, r0]
   20604:	ubfx	r1, r0, #5, #3
   20608:	and	r3, r0, #31
   2060c:	ldr	r2, [r2, r1, lsl #2]
   20610:	mov	r1, #1
   20614:	tst	r2, r1, lsl r3
   20618:	moveq	r1, #0
   2061c:	cmpeq	r0, #10
   20620:	bne	20650 <__assert_fail@plt+0xf1a0>
   20624:	b	20640 <__assert_fail@plt+0xf190>
   20628:	ldrb	r0, [r4, #78]	; 0x4e
   2062c:	cmp	r0, #0
   20630:	bne	20c04 <__assert_fail@plt+0xf754>
   20634:	mov	r1, #0
   20638:	cmp	r6, #10
   2063c:	bne	20650 <__assert_fail@plt+0xf1a0>
   20640:	ldrb	r0, [r4, #77]	; 0x4d
   20644:	cmp	r0, #0
   20648:	movwne	r0, #1
   2064c:	lsl	r1, r0, #1
   20650:	str	r1, [r4, #60]	; 0x3c
   20654:	ldr	r0, [r4, #80]	; 0x50
   20658:	cmp	r0, #2
   2065c:	blt	20678 <__assert_fail@plt+0xf1c8>
   20660:	ldr	r2, [r4, #28]
   20664:	ldr	r0, [r4, #8]
   20668:	sub	r2, r2, r5
   2066c:	add	r1, r0, r5, lsl #2
   20670:	lsl	r2, r2, #2
   20674:	bl	11228 <memmove@plt>
   20678:	ldrb	r0, [r4, #75]	; 0x4b
   2067c:	cmp	r0, #0
   20680:	bne	20954 <__assert_fail@plt+0xf4a4>
   20684:	ldr	r0, [r4, #28]
   20688:	ldr	r1, [r4, #32]
   2068c:	sub	r0, r0, r5
   20690:	sub	r1, r1, r5
   20694:	str	r0, [r4, #28]
   20698:	str	r1, [r4, #32]
   2069c:	ldrb	r0, [r4, #75]	; 0x4b
   206a0:	cmp	r0, #0
   206a4:	ldreq	r0, [r4, #4]
   206a8:	addeq	r0, r0, r5
   206ac:	streq	r0, [r4, #4]
   206b0:	str	r9, [r4, #24]
   206b4:	ldr	r0, [r4, #48]	; 0x30
   206b8:	ldr	r3, [r4, #80]	; 0x50
   206bc:	ldr	r1, [r4, #56]	; 0x38
   206c0:	sub	r2, r0, r5
   206c4:	cmp	r3, #2
   206c8:	sub	r0, r1, r5
   206cc:	str	r2, [r4, #48]	; 0x30
   206d0:	str	r0, [r4, #56]	; 0x38
   206d4:	blt	206fc <__assert_fail@plt+0xf24c>
   206d8:	ldrb	r0, [r4, #72]	; 0x48
   206dc:	cmp	r0, #0
   206e0:	beq	20710 <__assert_fail@plt+0xf260>
   206e4:	mov	r0, r4
   206e8:	bl	19fc0 <__assert_fail@plt+0x8b10>
   206ec:	cmp	r0, #0
   206f0:	beq	20718 <__assert_fail@plt+0xf268>
   206f4:	sub	sp, fp, #28
   206f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206fc:	ldrb	r0, [r4, #75]	; 0x4b
   20700:	cmp	r0, #0
   20704:	bne	20978 <__assert_fail@plt+0xf4c8>
   20708:	str	r2, [r4, #28]
   2070c:	b	20718 <__assert_fail@plt+0xf268>
   20710:	mov	r0, r4
   20714:	bl	1a8c0 <__assert_fail@plt+0x9410>
   20718:	mov	r0, #0
   2071c:	str	r0, [r4, #40]	; 0x28
   20720:	sub	sp, fp, #28
   20724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20728:	sub	r5, r9, r0
   2072c:	cmp	r5, #0
   20730:	bne	20598 <__assert_fail@plt+0xf0e8>
   20734:	b	206b0 <__assert_fail@plt+0xf200>
   20738:	ldrb	r2, [r4, #76]	; 0x4c
   2073c:	ldr	lr, [r4, #28]
   20740:	cmp	r2, #0
   20744:	bne	20dc4 <__assert_fail@plt+0xf914>
   20748:	mov	r2, #0
   2074c:	str	r2, [r4, #28]
   20750:	ldr	r3, [r4, #80]	; 0x50
   20754:	cmp	r3, #2
   20758:	blt	209e8 <__assert_fail@plt+0xf538>
   2075c:	ldrb	r2, [r4, #73]	; 0x49
   20760:	cmp	r2, #0
   20764:	beq	20820 <__assert_fail@plt+0xf370>
   20768:	ldr	r7, [r4]
   2076c:	sub	r3, r5, r3
   20770:	add	ip, r7, r0
   20774:	add	r3, ip, r3
   20778:	add	r8, ip, r5
   2077c:	cmp	r3, r7
   20780:	movcc	r3, r7
   20784:	mov	r7, r8
   20788:	sub	r7, r7, #1
   2078c:	cmp	r7, r3
   20790:	bcc	20820 <__assert_fail@plt+0xf370>
   20794:	ldrb	r2, [r7]
   20798:	and	r2, r2, #192	; 0xc0
   2079c:	cmp	r2, #128	; 0x80
   207a0:	beq	20788 <__assert_fail@plt+0xf2d8>
   207a4:	ldr	r0, [r4, #48]	; 0x30
   207a8:	mov	sl, lr
   207ac:	mov	r1, r7
   207b0:	add	r0, ip, r0
   207b4:	sub	r2, r0, r7
   207b8:	ldr	r0, [r4, #64]	; 0x40
   207bc:	cmp	r0, #0
   207c0:	bne	20e9c <__assert_fail@plt+0xf9ec>
   207c4:	mov	r0, #0
   207c8:	add	r3, sp, #24
   207cc:	str	r0, [sp, #28]
   207d0:	str	r0, [sp, #24]
   207d4:	add	r0, sp, #20
   207d8:	bl	29280 <__assert_fail@plt+0x17dd0>
   207dc:	sub	r1, r8, r7
   207e0:	mvn	r7, #0
   207e4:	cmp	r0, r1
   207e8:	bcc	2080c <__assert_fail@plt+0xf35c>
   207ec:	cmn	r0, #3
   207f0:	bhi	2080c <__assert_fail@plt+0xf35c>
   207f4:	mov	r2, #0
   207f8:	sub	r0, r0, r1
   207fc:	str	r2, [r4, #16]
   20800:	str	r2, [r4, #20]
   20804:	str	r0, [r4, #28]
   20808:	ldr	r7, [sp, #20]
   2080c:	cmn	r7, #1
   20810:	bne	20c44 <__assert_fail@plt+0xf794>
   20814:	ldr	r0, [r4, #24]
   20818:	ldr	r1, [r4, #32]
   2081c:	mov	lr, sl
   20820:	add	r8, r1, r0
   20824:	cmp	r8, r9
   20828:	bge	20c24 <__assert_fail@plt+0xf774>
   2082c:	add	sl, r4, #16
   20830:	str	lr, [sp]
   20834:	ldr	r0, [r4]
   20838:	ldr	r2, [r4, #44]	; 0x2c
   2083c:	mov	r3, sl
   20840:	add	r1, r0, r8
   20844:	ldr	r0, [sl]
   20848:	sub	r7, r2, r8
   2084c:	mov	r2, r7
   20850:	str	r0, [sp, #8]
   20854:	ldr	r0, [sl, #4]
   20858:	str	r0, [sp, #4]
   2085c:	add	r0, sp, #24
   20860:	bl	29280 <__assert_fail@plt+0x17dd0>
   20864:	sub	r1, r0, #1
   20868:	cmn	r1, #3
   2086c:	bcs	20884 <__assert_fail@plt+0xf3d4>
   20870:	ldr	r7, [sp, #24]
   20874:	add	r8, r0, r8
   20878:	cmp	r8, r9
   2087c:	blt	20834 <__assert_fail@plt+0xf384>
   20880:	b	20c30 <__assert_fail@plt+0xf780>
   20884:	ldr	r3, [sp, #4]
   20888:	ldr	r2, [sp, #8]
   2088c:	cmp	r7, #0
   20890:	mov	r1, #0
   20894:	cmpne	r0, #0
   20898:	beq	208a4 <__assert_fail@plt+0xf3f4>
   2089c:	ldr	r0, [r4]
   208a0:	ldrb	r1, [r0, r8]
   208a4:	stm	sl, {r2, r3}
   208a8:	mov	r0, #1
   208ac:	mov	r7, r1
   208b0:	b	20874 <__assert_fail@plt+0xf3c4>
   208b4:	ldr	ip, [r4, #12]
   208b8:	ldr	r0, [r4, #28]
   208bc:	mov	r2, #0
   208c0:	b	208d0 <__assert_fail@plt+0xf420>
   208c4:	cmp	r2, r3
   208c8:	mov	r0, r3
   208cc:	bge	208fc <__assert_fail@plt+0xf44c>
   208d0:	add	r1, r2, r0
   208d4:	add	r1, r1, r1, lsr #31
   208d8:	asr	r1, r1, #1
   208dc:	ldr	r7, [ip, r1, lsl #2]
   208e0:	mov	r3, r1
   208e4:	cmp	r7, r5
   208e8:	bgt	208c4 <__assert_fail@plt+0xf414>
   208ec:	bge	208fc <__assert_fail@plt+0xf44c>
   208f0:	add	r2, r1, #1
   208f4:	mov	r3, r0
   208f8:	b	208c4 <__assert_fail@plt+0xf414>
   208fc:	cmp	r7, r5
   20900:	mov	r0, #0
   20904:	movwlt	r0, #1
   20908:	add	r7, r1, r0
   2090c:	cmp	r7, #0
   20910:	ble	2094c <__assert_fail@plt+0xf49c>
   20914:	ldr	r1, [r4, #48]	; 0x30
   20918:	sub	r0, r7, #1
   2091c:	cmp	r1, r0
   20920:	beq	20dec <__assert_fail@plt+0xf93c>
   20924:	ldr	r1, [r4, #80]	; 0x50
   20928:	cmp	r1, #2
   2092c:	blt	20a34 <__assert_fail@plt+0xf584>
   20930:	ldr	r1, [r4, #8]
   20934:	ldr	r6, [r1, r0, lsl #2]
   20938:	cmn	r6, #1
   2093c:	bne	20a64 <__assert_fail@plt+0xf5b4>
   20940:	sub	r0, r0, #1
   20944:	cmn	r0, #1
   20948:	bne	20934 <__assert_fail@plt+0xf484>
   2094c:	ldr	r1, [r4, #60]	; 0x3c
   20950:	b	20a8c <__assert_fail@plt+0xf5dc>
   20954:	ldr	r2, [r4, #28]
   20958:	ldr	r0, [r4, #4]
   2095c:	add	r1, r0, r5
   20960:	sub	r2, r2, r5
   20964:	bl	11228 <memmove@plt>
   20968:	b	20684 <__assert_fail@plt+0xf1d4>
   2096c:	and	r0, r6, #2
   20970:	eor	r1, r0, #10
   20974:	b	20650 <__assert_fail@plt+0xf1a0>
   20978:	ldrb	r0, [r4, #72]	; 0x48
   2097c:	cmp	r0, #0
   20980:	beq	20ca8 <__assert_fail@plt+0xf7f8>
   20984:	ldr	r6, [r4, #36]	; 0x24
   20988:	ldr	r5, [r4, #28]
   2098c:	cmp	r6, r2
   20990:	movgt	r6, r2
   20994:	cmp	r5, r6
   20998:	bge	20d14 <__assert_fail@plt+0xf864>
   2099c:	bl	11348 <__ctype_toupper_loc@plt>
   209a0:	ldr	r1, [r4]
   209a4:	ldr	r2, [r4, #64]	; 0x40
   209a8:	add	r1, r1, r9
   209ac:	cmp	r2, #0
   209b0:	ldrb	r1, [r1, r5]
   209b4:	bne	209e0 <__assert_fail@plt+0xf530>
   209b8:	ldr	r2, [r0]
   209bc:	ldr	r1, [r2, r1, lsl #2]
   209c0:	ldr	r2, [r4, #4]
   209c4:	strb	r1, [r2, r5]
   209c8:	add	r1, r5, #1
   209cc:	cmp	r1, r6
   209d0:	bge	20d10 <__assert_fail@plt+0xf860>
   209d4:	ldr	r9, [r4, #24]
   209d8:	mov	r5, r1
   209dc:	b	209a0 <__assert_fail@plt+0xf4f0>
   209e0:	ldrb	r1, [r2, r1]
   209e4:	b	209b8 <__assert_fail@plt+0xf508>
   209e8:	ldr	r3, [r4]
   209ec:	add	r0, r5, r0
   209f0:	ldr	r1, [r4, #64]	; 0x40
   209f4:	add	r0, r0, r3
   209f8:	cmp	r1, #0
   209fc:	ldrb	r0, [r0, #-1]
   20a00:	str	r2, [r4, #32]
   20a04:	ldrbne	r0, [r1, r0]
   20a08:	ldr	r1, [r4, #68]	; 0x44
   20a0c:	ubfx	r2, r0, #5, #3
   20a10:	and	r3, r0, #31
   20a14:	ldr	r2, [r1, r2, lsl #2]
   20a18:	mov	r1, #1
   20a1c:	tst	r2, r1, lsl r3
   20a20:	moveq	r1, #0
   20a24:	cmpeq	r0, #10
   20a28:	beq	20d6c <__assert_fail@plt+0xf8bc>
   20a2c:	str	r1, [r4, #60]	; 0x3c
   20a30:	b	2069c <__assert_fail@plt+0xf1ec>
   20a34:	ldr	r1, [r4, #4]
   20a38:	ldr	r2, [r4, #68]	; 0x44
   20a3c:	ldrb	r0, [r1, r0]
   20a40:	ubfx	r1, r0, #5, #3
   20a44:	and	r3, r0, #31
   20a48:	ldr	r2, [r2, r1, lsl #2]
   20a4c:	mov	r1, #1
   20a50:	tst	r2, r1, lsl r3
   20a54:	moveq	r1, #0
   20a58:	cmpeq	r0, #10
   20a5c:	bne	20a8c <__assert_fail@plt+0xf5dc>
   20a60:	b	20a7c <__assert_fail@plt+0xf5cc>
   20a64:	ldrb	r0, [r4, #78]	; 0x4e
   20a68:	cmp	r0, #0
   20a6c:	bne	20e4c <__assert_fail@plt+0xf99c>
   20a70:	mov	r1, #0
   20a74:	cmp	r6, #10
   20a78:	bne	20a8c <__assert_fail@plt+0xf5dc>
   20a7c:	ldrb	r0, [r4, #77]	; 0x4d
   20a80:	cmp	r0, #0
   20a84:	movwne	r0, #1
   20a88:	lsl	r1, r0, #1
   20a8c:	str	r1, [r4, #60]	; 0x3c
   20a90:	cmp	r7, r5
   20a94:	ldr	r2, [r4, #28]
   20a98:	bne	20b28 <__assert_fail@plt+0xf678>
   20a9c:	cmp	r2, r5
   20aa0:	ble	20b28 <__assert_fail@plt+0xf678>
   20aa4:	ldr	r0, [r4, #12]
   20aa8:	ldr	r0, [r0, r5, lsl #2]
   20aac:	cmp	r0, r5
   20ab0:	bne	20b28 <__assert_fail@plt+0xf678>
   20ab4:	ldr	r0, [r4, #8]
   20ab8:	sub	r2, r2, r5
   20abc:	lsl	r2, r2, #2
   20ac0:	add	r1, r0, r5, lsl #2
   20ac4:	bl	11228 <memmove@plt>
   20ac8:	ldr	r2, [r4, #28]
   20acc:	ldr	r0, [r4, #4]
   20ad0:	add	r1, r0, r5
   20ad4:	sub	r2, r2, r5
   20ad8:	bl	11228 <memmove@plt>
   20adc:	ldr	r0, [r4, #28]
   20ae0:	ldr	r1, [r4, #32]
   20ae4:	sub	r0, r0, r5
   20ae8:	sub	r1, r1, r5
   20aec:	cmp	r0, #1
   20af0:	str	r0, [r4, #28]
   20af4:	str	r1, [r4, #32]
   20af8:	blt	2069c <__assert_fail@plt+0xf1ec>
   20afc:	ldr	r0, [r4, #12]
   20b00:	mov	r2, #0
   20b04:	add	r1, r0, r5, lsl #2
   20b08:	ldr	r3, [r1, r2, lsl #2]
   20b0c:	sub	r3, r3, r5
   20b10:	str	r3, [r0, r2, lsl #2]
   20b14:	add	r2, r2, #1
   20b18:	ldr	r3, [r4, #28]
   20b1c:	cmp	r2, r3
   20b20:	blt	20b08 <__assert_fail@plt+0xf658>
   20b24:	b	2069c <__assert_fail@plt+0xf1ec>
   20b28:	mov	r0, #0
   20b2c:	strb	r0, [r4, #76]	; 0x4c
   20b30:	sub	r0, r5, r9
   20b34:	ldr	r1, [r4, #44]	; 0x2c
   20b38:	ldr	r3, [r4, #52]	; 0x34
   20b3c:	add	r1, r0, r1
   20b40:	add	r0, r0, r3
   20b44:	str	r1, [r4, #48]	; 0x30
   20b48:	sub	r1, r7, #1
   20b4c:	str	r0, [r4, #56]	; 0x38
   20b50:	add	r0, r1, #1
   20b54:	cmp	r0, #1
   20b58:	blt	20b70 <__assert_fail@plt+0xf6c0>
   20b5c:	ldr	r3, [r4, #12]
   20b60:	ldr	r3, [r3, r1, lsl #2]
   20b64:	sub	r1, r1, #1
   20b68:	cmp	r3, r5
   20b6c:	beq	20b50 <__assert_fail@plt+0xf6a0>
   20b70:	cmp	r0, r2
   20b74:	bge	20b98 <__assert_fail@plt+0xf6e8>
   20b78:	ldr	r1, [r4, #8]
   20b7c:	ldr	r3, [r1, r0, lsl #2]
   20b80:	cmn	r3, #1
   20b84:	bne	20b98 <__assert_fail@plt+0xf6e8>
   20b88:	add	r0, r0, #1
   20b8c:	cmp	r2, r0
   20b90:	bne	20b7c <__assert_fail@plt+0xf6cc>
   20b94:	b	20ba0 <__assert_fail@plt+0xf6f0>
   20b98:	cmp	r0, r2
   20b9c:	bne	20bb0 <__assert_fail@plt+0xf700>
   20ba0:	mov	r0, #0
   20ba4:	str	r0, [r4, #28]
   20ba8:	str	r0, [r4, #32]
   20bac:	b	2069c <__assert_fail@plt+0xf1ec>
   20bb0:	ldr	r1, [r4, #12]
   20bb4:	ldr	r0, [r1, r0, lsl #2]
   20bb8:	subs	r2, r0, r5
   20bbc:	str	r2, [r4, #28]
   20bc0:	beq	20d60 <__assert_fail@plt+0xf8b0>
   20bc4:	cmp	r2, #1
   20bc8:	blt	20bec <__assert_fail@plt+0xf73c>
   20bcc:	ldr	r0, [r4, #8]
   20bd0:	mov	r1, #0
   20bd4:	mvn	r3, #0
   20bd8:	str	r3, [r0, r1, lsl #2]
   20bdc:	add	r1, r1, #1
   20be0:	ldr	r2, [r4, #28]
   20be4:	cmp	r1, r2
   20be8:	blt	20bd8 <__assert_fail@plt+0xf728>
   20bec:	ldr	r0, [r4, #4]
   20bf0:	mov	r1, #255	; 0xff
   20bf4:	bl	113cc <memset@plt>
   20bf8:	ldr	r0, [r4, #28]
   20bfc:	str	r0, [r4, #32]
   20c00:	b	2069c <__assert_fail@plt+0xf1ec>
   20c04:	mov	r0, r6
   20c08:	bl	113b4 <iswalnum@plt>
   20c0c:	mov	r1, #1
   20c10:	cmp	r6, #95	; 0x5f
   20c14:	beq	20650 <__assert_fail@plt+0xf1a0>
   20c18:	cmp	r0, #0
   20c1c:	beq	20634 <__assert_fail@plt+0xf184>
   20c20:	b	20650 <__assert_fail@plt+0xf1a0>
   20c24:	sub	r0, r8, r9
   20c28:	str	r0, [r4, #28]
   20c2c:	b	20c60 <__assert_fail@plt+0xf7b0>
   20c30:	ldr	lr, [sp]
   20c34:	sub	r0, r8, r9
   20c38:	cmn	r7, #1
   20c3c:	str	r0, [r4, #28]
   20c40:	beq	20c60 <__assert_fail@plt+0xf7b0>
   20c44:	ldrb	r0, [r4, #78]	; 0x4e
   20c48:	cmp	r0, #0
   20c4c:	bne	20e6c <__assert_fail@plt+0xf9bc>
   20c50:	mov	r1, #0
   20c54:	cmp	r7, #10
   20c58:	beq	20d98 <__assert_fail@plt+0xf8e8>
   20c5c:	b	20da8 <__assert_fail@plt+0xf8f8>
   20c60:	cmp	lr, #0
   20c64:	ble	20ca0 <__assert_fail@plt+0xf7f0>
   20c68:	ldr	r1, [r4, #48]	; 0x30
   20c6c:	sub	r0, lr, #1
   20c70:	cmp	r1, r0
   20c74:	beq	20e40 <__assert_fail@plt+0xf990>
   20c78:	ldr	r1, [r4, #80]	; 0x50
   20c7c:	cmp	r1, #2
   20c80:	blt	20d20 <__assert_fail@plt+0xf870>
   20c84:	ldr	r1, [r4, #8]
   20c88:	ldr	r6, [r1, r0, lsl #2]
   20c8c:	cmn	r6, #1
   20c90:	bne	20d80 <__assert_fail@plt+0xf8d0>
   20c94:	sub	r0, r0, #1
   20c98:	cmn	r0, #1
   20c9c:	bne	20c88 <__assert_fail@plt+0xf7d8>
   20ca0:	ldr	r1, [r4, #60]	; 0x3c
   20ca4:	b	20da8 <__assert_fail@plt+0xf8f8>
   20ca8:	ldr	r3, [r4, #64]	; 0x40
   20cac:	cmp	r3, #0
   20cb0:	beq	20718 <__assert_fail@plt+0xf268>
   20cb4:	ldr	r1, [r4, #36]	; 0x24
   20cb8:	ldr	r0, [r4, #28]
   20cbc:	cmp	r1, r2
   20cc0:	movgt	r1, r2
   20cc4:	cmp	r0, r1
   20cc8:	bge	20d54 <__assert_fail@plt+0xf8a4>
   20ccc:	ldr	r7, [r4]
   20cd0:	add	r2, r0, r9
   20cd4:	ldr	r6, [r4, #4]
   20cd8:	ldrb	r2, [r7, r2]
   20cdc:	ldrb	r2, [r3, r2]
   20ce0:	strb	r2, [r6, r0]
   20ce4:	add	r0, r0, #1
   20ce8:	cmp	r0, r1
   20cec:	bge	20d54 <__assert_fail@plt+0xf8a4>
   20cf0:	ldr	r7, [r4, #24]
   20cf4:	ldm	r4, {r2, r3}
   20cf8:	ldr	r6, [r4, #64]	; 0x40
   20cfc:	add	r2, r2, r7
   20d00:	ldrb	r2, [r2, r0]
   20d04:	ldrb	r2, [r6, r2]
   20d08:	strb	r2, [r3, r0]
   20d0c:	b	20ce4 <__assert_fail@plt+0xf834>
   20d10:	add	r5, r5, #1
   20d14:	str	r5, [r4, #28]
   20d18:	str	r5, [r4, #32]
   20d1c:	b	20718 <__assert_fail@plt+0xf268>
   20d20:	ldr	r1, [r4, #4]
   20d24:	ldr	r2, [r4, #68]	; 0x44
   20d28:	ldrb	r0, [r1, r0]
   20d2c:	ubfx	r1, r0, #5, #3
   20d30:	and	r3, r0, #31
   20d34:	ldr	r2, [r2, r1, lsl #2]
   20d38:	mov	r1, #1
   20d3c:	tst	r2, r1, lsl r3
   20d40:	bne	20da8 <__assert_fail@plt+0xf8f8>
   20d44:	mov	r1, #0
   20d48:	cmp	r0, #10
   20d4c:	beq	20d98 <__assert_fail@plt+0xf8e8>
   20d50:	b	20da8 <__assert_fail@plt+0xf8f8>
   20d54:	str	r0, [r4, #28]
   20d58:	str	r0, [r4, #32]
   20d5c:	b	20718 <__assert_fail@plt+0xf268>
   20d60:	mov	r0, #0
   20d64:	str	r0, [r4, #32]
   20d68:	b	2069c <__assert_fail@plt+0xf1ec>
   20d6c:	ldrb	r0, [r4, #77]	; 0x4d
   20d70:	cmp	r0, #0
   20d74:	movwne	r0, #1
   20d78:	lsl	r1, r0, #1
   20d7c:	b	20a2c <__assert_fail@plt+0xf57c>
   20d80:	ldrb	r0, [r4, #78]	; 0x4e
   20d84:	cmp	r0, #0
   20d88:	bne	20ed8 <__assert_fail@plt+0xfa28>
   20d8c:	mov	r1, #0
   20d90:	cmp	r6, #10
   20d94:	bne	20da8 <__assert_fail@plt+0xf8f8>
   20d98:	ldrb	r0, [r4, #77]	; 0x4d
   20d9c:	cmp	r0, #0
   20da0:	movwne	r0, #1
   20da4:	lsl	r1, r0, #1
   20da8:	str	r1, [r4, #60]	; 0x3c
   20dac:	mov	r0, #0
   20db0:	ldr	r2, [r4, #28]
   20db4:	cmp	r2, #0
   20db8:	bne	20df8 <__assert_fail@plt+0xf948>
   20dbc:	str	r0, [r4, #32]
   20dc0:	b	2069c <__assert_fail@plt+0xf1ec>
   20dc4:	mov	r2, #0
   20dc8:	strb	r2, [r4, #76]	; 0x4c
   20dcc:	sub	r2, r5, r9
   20dd0:	ldr	r3, [r4, #44]	; 0x2c
   20dd4:	ldr	r7, [r4, #52]	; 0x34
   20dd8:	add	r3, r2, r3
   20ddc:	add	r2, r2, r7
   20de0:	str	r3, [r4, #48]	; 0x30
   20de4:	str	r2, [r4, #56]	; 0x38
   20de8:	b	20748 <__assert_fail@plt+0xf298>
   20dec:	and	r0, r6, #2
   20df0:	eor	r1, r0, #10
   20df4:	b	20a8c <__assert_fail@plt+0xf5dc>
   20df8:	cmp	r2, #1
   20dfc:	blt	20e20 <__assert_fail@plt+0xf970>
   20e00:	ldr	r0, [r4, #8]
   20e04:	mov	r1, #0
   20e08:	mvn	r3, #0
   20e0c:	str	r3, [r0, r1, lsl #2]
   20e10:	add	r1, r1, #1
   20e14:	ldr	r2, [r4, #28]
   20e18:	cmp	r1, r2
   20e1c:	blt	20e0c <__assert_fail@plt+0xf95c>
   20e20:	ldrb	r0, [r4, #75]	; 0x4b
   20e24:	cmp	r0, #0
   20e28:	beq	20e90 <__assert_fail@plt+0xf9e0>
   20e2c:	ldr	r0, [r4, #4]
   20e30:	mov	r1, #255	; 0xff
   20e34:	bl	113cc <memset@plt>
   20e38:	ldr	r0, [r4, #28]
   20e3c:	b	20dbc <__assert_fail@plt+0xf90c>
   20e40:	and	r0, r6, #2
   20e44:	eor	r1, r0, #10
   20e48:	b	20da8 <__assert_fail@plt+0xf8f8>
   20e4c:	mov	r0, r6
   20e50:	bl	113b4 <iswalnum@plt>
   20e54:	mov	r1, #1
   20e58:	cmp	r6, #95	; 0x5f
   20e5c:	beq	20a8c <__assert_fail@plt+0xf5dc>
   20e60:	cmp	r0, #0
   20e64:	beq	20a70 <__assert_fail@plt+0xf5c0>
   20e68:	b	20a8c <__assert_fail@plt+0xf5dc>
   20e6c:	mov	r0, r7
   20e70:	bl	113b4 <iswalnum@plt>
   20e74:	mov	r1, #1
   20e78:	cmp	r7, #95	; 0x5f
   20e7c:	beq	20da8 <__assert_fail@plt+0xf8f8>
   20e80:	cmp	r0, #0
   20e84:	mov	r2, r7
   20e88:	beq	20c50 <__assert_fail@plt+0xf7a0>
   20e8c:	b	20da8 <__assert_fail@plt+0xf8f8>
   20e90:	mov	r0, r2
   20e94:	str	r2, [r4, #32]
   20e98:	b	2069c <__assert_fail@plt+0xf1ec>
   20e9c:	cmp	r2, #1
   20ea0:	blt	20ef8 <__assert_fail@plt+0xfa48>
   20ea4:	cmp	r2, #6
   20ea8:	mov	r1, r2
   20eac:	movge	r1, #6
   20eb0:	sub	ip, r1, #1
   20eb4:	add	r1, sp, #14
   20eb8:	ldrb	r3, [r7, ip]
   20ebc:	cmp	ip, #0
   20ec0:	ldrb	r3, [r0, r3]
   20ec4:	strb	r3, [r1, ip]
   20ec8:	sub	r3, ip, #1
   20ecc:	mov	ip, r3
   20ed0:	bgt	20eb8 <__assert_fail@plt+0xfa08>
   20ed4:	b	207c4 <__assert_fail@plt+0xf314>
   20ed8:	mov	r0, r6
   20edc:	bl	113b4 <iswalnum@plt>
   20ee0:	mov	r1, #1
   20ee4:	cmp	r6, #95	; 0x5f
   20ee8:	beq	20da8 <__assert_fail@plt+0xf8f8>
   20eec:	cmp	r0, #0
   20ef0:	beq	20d8c <__assert_fail@plt+0xf8dc>
   20ef4:	b	20da8 <__assert_fail@plt+0xf8f8>
   20ef8:	add	r1, sp, #14
   20efc:	b	207c4 <__assert_fail@plt+0xf314>
   20f00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20f04:	add	fp, sp, #24
   20f08:	mov	r8, r0
   20f0c:	ldr	r0, [r0, #124]	; 0x7c
   20f10:	cmp	r0, #1
   20f14:	blt	20fa0 <__assert_fail@plt+0xfaf0>
   20f18:	mov	r7, #0
   20f1c:	b	20f38 <__assert_fail@plt+0xfa88>
   20f20:	mov	r0, r5
   20f24:	bl	29220 <__assert_fail@plt+0x17d70>
   20f28:	ldr	r0, [r8, #124]	; 0x7c
   20f2c:	add	r7, r7, #1
   20f30:	cmp	r7, r0
   20f34:	bge	20fa0 <__assert_fail@plt+0xfaf0>
   20f38:	ldr	r0, [r8, #132]	; 0x84
   20f3c:	ldr	r5, [r0, r7, lsl #2]
   20f40:	ldr	r0, [r5, #16]
   20f44:	cmp	r0, #1
   20f48:	blt	20f78 <__assert_fail@plt+0xfac8>
   20f4c:	mov	r4, #0
   20f50:	ldr	r0, [r5, #20]
   20f54:	ldr	r6, [r0, r4, lsl #2]
   20f58:	ldr	r0, [r6, #16]
   20f5c:	bl	29220 <__assert_fail@plt+0x17d70>
   20f60:	mov	r0, r6
   20f64:	bl	29220 <__assert_fail@plt+0x17d70>
   20f68:	ldr	r0, [r5, #16]
   20f6c:	add	r4, r4, #1
   20f70:	cmp	r4, r0
   20f74:	blt	20f50 <__assert_fail@plt+0xfaa0>
   20f78:	ldr	r0, [r5, #20]
   20f7c:	bl	29220 <__assert_fail@plt+0x17d70>
   20f80:	ldr	r0, [r5, #8]
   20f84:	cmp	r0, #0
   20f88:	beq	20f20 <__assert_fail@plt+0xfa70>
   20f8c:	ldr	r0, [r0, #8]
   20f90:	bl	29220 <__assert_fail@plt+0x17d70>
   20f94:	ldr	r0, [r5, #8]
   20f98:	bl	29220 <__assert_fail@plt+0x17d70>
   20f9c:	b	20f20 <__assert_fail@plt+0xfa70>
   20fa0:	mov	r0, #0
   20fa4:	str	r0, [r8, #108]	; 0x6c
   20fa8:	str	r0, [r8, #124]	; 0x7c
   20fac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fb4:	add	fp, sp, #28
   20fb8:	sub	sp, sp, #4
   20fbc:	mov	sl, r0
   20fc0:	ldr	r0, [r1, #4]
   20fc4:	cmp	r0, #1
   20fc8:	blt	21098 <__assert_fail@plt+0xfbe8>
   20fcc:	ldr	r7, [sl, #84]	; 0x54
   20fd0:	mov	r8, r2
   20fd4:	mov	r5, r1
   20fd8:	mov	r4, #0
   20fdc:	b	20fec <__assert_fail@plt+0xfb3c>
   20fe0:	add	r4, r4, #1
   20fe4:	cmp	r4, r0
   20fe8:	bge	21098 <__assert_fail@plt+0xfbe8>
   20fec:	ldr	r1, [r5, #8]
   20ff0:	ldr	r6, [r1, r4, lsl #2]
   20ff4:	ldr	r1, [r7]
   20ff8:	add	r2, r1, r6, lsl #3
   20ffc:	ldrb	r2, [r2, #4]
   21000:	cmp	r2, #8
   21004:	bne	20fe0 <__assert_fail@plt+0xfb30>
   21008:	ldr	r1, [r1, r6, lsl #3]
   2100c:	cmp	r1, #31
   21010:	bgt	20fe0 <__assert_fail@plt+0xfb30>
   21014:	ldr	r2, [r7, #80]	; 0x50
   21018:	mov	r3, #1
   2101c:	tst	r2, r3, lsl r1
   21020:	beq	20fe0 <__assert_fail@plt+0xfb30>
   21024:	ldr	r0, [sl, #124]	; 0x7c
   21028:	ldr	r9, [sl, #128]	; 0x80
   2102c:	cmp	r0, r9
   21030:	beq	21074 <__assert_fail@plt+0xfbc4>
   21034:	mov	r0, #1
   21038:	mov	r1, #24
   2103c:	bl	29000 <__assert_fail@plt+0x17b50>
   21040:	ldr	r1, [sl, #124]	; 0x7c
   21044:	ldr	r2, [sl, #132]	; 0x84
   21048:	str	r0, [r2, r1, lsl #2]
   2104c:	ldr	r0, [sl, #132]	; 0x84
   21050:	ldr	r0, [r0, r1, lsl #2]
   21054:	cmp	r0, #0
   21058:	beq	210a4 <__assert_fail@plt+0xfbf4>
   2105c:	add	r1, r1, #1
   21060:	str	r6, [r0, #4]
   21064:	str	r1, [sl, #124]	; 0x7c
   21068:	str	r8, [r0]
   2106c:	ldr	r0, [r5, #4]
   21070:	b	20fe0 <__assert_fail@plt+0xfb30>
   21074:	ldr	r0, [sl, #132]	; 0x84
   21078:	lsl	r1, r9, #3
   2107c:	bl	29084 <__assert_fail@plt+0x17bd4>
   21080:	cmp	r0, #0
   21084:	beq	210a4 <__assert_fail@plt+0xfbf4>
   21088:	lsl	r1, r9, #1
   2108c:	str	r1, [sl, #128]	; 0x80
   21090:	str	r0, [sl, #132]	; 0x84
   21094:	b	21034 <__assert_fail@plt+0xfb84>
   21098:	mov	r0, #0
   2109c:	sub	sp, fp, #28
   210a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210a4:	mov	r0, #12
   210a8:	sub	sp, fp, #28
   210ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210b4:	add	fp, sp, #28
   210b8:	sub	sp, sp, #76	; 0x4c
   210bc:	mov	ip, r0
   210c0:	ldr	r0, [r1, #4]
   210c4:	cmp	r0, #1
   210c8:	blt	219f4 <__assert_fail@plt+0x10544>
   210cc:	ldr	r2, [ip, #84]	; 0x54
   210d0:	ldr	r0, [ip, #40]	; 0x28
   210d4:	mov	r3, #0
   210d8:	str	ip, [sp, #44]	; 0x2c
   210dc:	str	r1, [sp, #12]
   210e0:	str	r0, [sp, #52]	; 0x34
   210e4:	str	r2, [sp, #24]
   210e8:	b	21108 <__assert_fail@plt+0xfc58>
   210ec:	ldr	r1, [sp, #12]
   210f0:	ldr	r3, [sp, #16]
   210f4:	ldr	r2, [sp, #24]
   210f8:	ldr	r0, [r1, #4]
   210fc:	add	r3, r3, #1
   21100:	cmp	r3, r0
   21104:	bge	219f4 <__assert_fail@plt+0x10544>
   21108:	ldr	r0, [r1, #8]
   2110c:	str	r3, [sp, #16]
   21110:	ldr	r3, [r0, r3, lsl #2]
   21114:	ldr	r0, [r2]
   21118:	add	r4, r0, r3, lsl #3
   2111c:	mov	r1, r3
   21120:	str	r3, [sp, #48]	; 0x30
   21124:	ldr	r5, [r4, #4]!
   21128:	uxtb	r0, r5
   2112c:	cmp	r0, #4
   21130:	bne	210ec <__assert_fail@plt+0xfc3c>
   21134:	movw	r0, #65280	; 0xff00
   21138:	movt	r0, #3
   2113c:	tst	r5, r0
   21140:	beq	21240 <__assert_fail@plt+0xfd90>
   21144:	ldr	r1, [sp, #52]	; 0x34
   21148:	cmn	r1, #1
   2114c:	ble	21188 <__assert_fail@plt+0xfcd8>
   21150:	ldr	r0, [ip, #48]	; 0x30
   21154:	cmp	r0, r1
   21158:	beq	219b4 <__assert_fail@plt+0x10504>
   2115c:	ldr	r0, [ip, #80]	; 0x50
   21160:	cmp	r0, #2
   21164:	blt	21190 <__assert_fail@plt+0xfce0>
   21168:	ldr	r0, [ip, #8]
   2116c:	ldr	r1, [sp, #52]	; 0x34
   21170:	ldr	r6, [r0, r1, lsl #2]
   21174:	cmn	r6, #1
   21178:	bne	211cc <__assert_fail@plt+0xfd1c>
   2117c:	sub	r1, r1, #1
   21180:	cmn	r1, #1
   21184:	bne	21170 <__assert_fail@plt+0xfcc0>
   21188:	ldr	r1, [ip, #60]	; 0x3c
   2118c:	b	211f4 <__assert_fail@plt+0xfd44>
   21190:	ldr	r0, [ip, #4]
   21194:	ldr	r2, [sp, #52]	; 0x34
   21198:	ldr	r1, [ip, #68]	; 0x44
   2119c:	ldrb	r0, [r0, r2]
   211a0:	ubfx	r2, r0, #5, #3
   211a4:	and	r7, r0, #31
   211a8:	ldr	r3, [r1, r2, lsl #2]
   211ac:	mov	r1, #1
   211b0:	mov	r2, #0
   211b4:	tst	r3, r1, lsl r7
   211b8:	bne	2120c <__assert_fail@plt+0xfd5c>
   211bc:	mov	r1, #0
   211c0:	cmp	r0, #10
   211c4:	beq	211e4 <__assert_fail@plt+0xfd34>
   211c8:	b	211f4 <__assert_fail@plt+0xfd44>
   211cc:	ldrb	r0, [ip, #78]	; 0x4e
   211d0:	cmp	r0, #0
   211d4:	bne	219c4 <__assert_fail@plt+0x10514>
   211d8:	mov	r1, #0
   211dc:	cmp	r6, #10
   211e0:	bne	211f4 <__assert_fail@plt+0xfd44>
   211e4:	ldrb	r0, [ip, #77]	; 0x4d
   211e8:	cmp	r0, #0
   211ec:	movwne	r0, #1
   211f0:	lsl	r1, r0, #1
   211f4:	and	r0, r1, #1
   211f8:	tst	r5, #1024	; 0x400
   211fc:	eor	r2, r0, #1
   21200:	beq	2120c <__assert_fail@plt+0xfd5c>
   21204:	cmp	r0, #0
   21208:	beq	210ec <__assert_fail@plt+0xfc3c>
   2120c:	ldr	r0, [r4]
   21210:	cmp	r2, #0
   21214:	bne	21220 <__assert_fail@plt+0xfd70>
   21218:	ands	r2, r0, #2048	; 0x800
   2121c:	bne	210ec <__assert_fail@plt+0xfc3c>
   21220:	tst	r1, #2
   21224:	bne	21230 <__assert_fail@plt+0xfd80>
   21228:	ands	r2, r0, #8192	; 0x2000
   2122c:	bne	210ec <__assert_fail@plt+0xfc3c>
   21230:	tst	r1, #8
   21234:	bne	21240 <__assert_fail@plt+0xfd90>
   21238:	ands	r0, r0, #32768	; 0x8000
   2123c:	bne	210ec <__assert_fail@plt+0xfc3c>
   21240:	ldr	r2, [ip, #108]	; 0x6c
   21244:	ldr	r0, [ip, #84]	; 0x54
   21248:	ldr	r9, [ip, #4]
   2124c:	cmp	r2, #1
   21250:	str	r0, [sp, #36]	; 0x24
   21254:	str	r2, [sp, #20]
   21258:	blt	212a0 <__assert_fail@plt+0xfdf0>
   2125c:	ldr	r4, [sp, #52]	; 0x34
   21260:	ldr	r1, [ip, #116]	; 0x74
   21264:	mov	r0, #0
   21268:	mov	r5, #1
   2126c:	mov	lr, r4
   21270:	add	r3, r2, r0
   21274:	add	r3, r3, r3, lsr #31
   21278:	asr	r7, r3, #1
   2127c:	add	r6, r7, r7, lsl #1
   21280:	add	r6, r1, r6, lsl #3
   21284:	ldr	r6, [r6, #4]
   21288:	cmp	r6, lr
   2128c:	addlt	r0, r5, r3, asr #1
   21290:	movge	r2, r7
   21294:	cmp	r0, r2
   21298:	blt	21270 <__assert_fail@plt+0xfdc0>
   2129c:	b	212ac <__assert_fail@plt+0xfdfc>
   212a0:	ldr	r4, [sp, #52]	; 0x34
   212a4:	mov	r0, #0
   212a8:	mov	lr, r4
   212ac:	ldr	r1, [sp, #20]
   212b0:	cmp	r0, r1
   212b4:	bge	212f8 <__assert_fail@plt+0xfe48>
   212b8:	cmn	r0, #1
   212bc:	beq	212f8 <__assert_fail@plt+0xfe48>
   212c0:	ldr	r1, [ip, #116]	; 0x74
   212c4:	add	r0, r0, r0, lsl #1
   212c8:	add	r0, r1, r0, lsl #3
   212cc:	ldr	r1, [r0, #4]
   212d0:	cmp	r1, lr
   212d4:	bne	212f8 <__assert_fail@plt+0xfe48>
   212d8:	ldr	r1, [r0]
   212dc:	ldr	r2, [sp, #48]	; 0x30
   212e0:	cmp	r1, r2
   212e4:	beq	21700 <__assert_fail@plt+0x10250>
   212e8:	ldrb	r1, [r0, #20]
   212ec:	add	r0, r0, #24
   212f0:	cmp	r1, #0
   212f4:	bne	212d8 <__assert_fail@plt+0xfe28>
   212f8:	ldr	r0, [ip, #124]	; 0x7c
   212fc:	cmp	r0, #1
   21300:	ldr	r0, [sp, #20]
   21304:	blt	21704 <__assert_fail@plt+0x10254>
   21308:	ldr	r0, [sp, #36]	; 0x24
   2130c:	ldr	r1, [sp, #48]	; 0x30
   21310:	mov	r3, #0
   21314:	ldr	r0, [r0]
   21318:	ldr	r2, [r0, r1, lsl #3]
   2131c:	str	r2, [sp, #32]
   21320:	ldr	r1, [ip, #132]	; 0x84
   21324:	str	r3, [sp, #28]
   21328:	ldr	r6, [r1, r3, lsl #2]
   2132c:	ldr	r1, [r6, #4]
   21330:	ldr	r0, [r0, r1, lsl #3]
   21334:	cmp	r0, r2
   21338:	bne	216d4 <__assert_fail@plt+0x10224>
   2133c:	ldr	r0, [r6, #16]
   21340:	ldr	r1, [r6]
   21344:	mov	r8, #0
   21348:	mov	r7, lr
   2134c:	str	r6, [sp, #40]	; 0x28
   21350:	cmp	r0, #1
   21354:	blt	2148c <__assert_fail@plt+0xffdc>
   21358:	mov	r5, r1
   2135c:	ldr	r1, [r6, #20]
   21360:	ldr	r4, [r1, r8, lsl #2]
   21364:	ldr	r1, [r4, #4]
   21368:	sub	sl, r1, r5
   2136c:	str	r1, [fp, #-48]	; 0xffffffd0
   21370:	cmp	sl, #1
   21374:	blt	213a8 <__assert_fail@plt+0xfef8>
   21378:	ldr	r1, [ip, #28]
   2137c:	add	r3, sl, r7
   21380:	cmp	r3, r1
   21384:	bgt	213fc <__assert_fail@plt+0xff4c>
   21388:	add	r0, r9, r7
   2138c:	add	r1, r9, r5
   21390:	mov	r2, sl
   21394:	bl	11384 <bcmp@plt>
   21398:	ldr	ip, [sp, #44]	; 0x2c
   2139c:	ldr	lr, [sp, #52]	; 0x34
   213a0:	cmp	r0, #0
   213a4:	bne	21484 <__assert_fail@plt+0xffd4>
   213a8:	ldr	r3, [sp, #48]	; 0x30
   213ac:	mov	r2, r4
   213b0:	mov	r0, ip
   213b4:	mov	r1, r6
   213b8:	str	lr, [sp]
   213bc:	mov	r4, ip
   213c0:	bl	220c4 <__assert_fail@plt+0x10c14>
   213c4:	cmp	r0, #1
   213c8:	bhi	21a08 <__assert_fail@plt+0x10558>
   213cc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   213d0:	ldr	r0, [r6, #16]
   213d4:	ldr	r9, [r4, #4]
   213d8:	mov	ip, r4
   213dc:	ldr	r4, [sp, #52]	; 0x34
   213e0:	add	r8, r8, #1
   213e4:	add	r7, sl, r7
   213e8:	cmp	r8, r0
   213ec:	mov	r5, r1
   213f0:	mov	lr, r4
   213f4:	blt	2135c <__assert_fail@plt+0xfeac>
   213f8:	b	2148c <__assert_fail@plt+0xffdc>
   213fc:	ldr	r2, [ip, #48]	; 0x30
   21400:	cmp	r3, r2
   21404:	bgt	216c8 <__assert_fail@plt+0x10218>
   21408:	ldr	r0, [ip, #36]	; 0x24
   2140c:	ldr	r6, [ip, #104]	; 0x68
   21410:	cmp	r0, r3
   21414:	cmple	r0, r2
   21418:	blt	21428 <__assert_fail@plt+0xff78>
   2141c:	cmp	r1, r3
   21420:	cmple	r1, r2
   21424:	bge	21448 <__assert_fail@plt+0xff98>
   21428:	add	r1, r3, #1
   2142c:	mov	r0, ip
   21430:	mov	r9, r3
   21434:	bl	21a30 <__assert_fail@plt+0x10580>
   21438:	ldr	ip, [sp, #44]	; 0x2c
   2143c:	mov	r3, r9
   21440:	cmp	r0, #0
   21444:	bne	21a08 <__assert_fail@plt+0x10558>
   21448:	cmp	r3, r6
   2144c:	ble	21478 <__assert_fail@plt+0xffc8>
   21450:	sub	r0, r3, r6
   21454:	mov	r1, #0
   21458:	lsl	r2, r0, #2
   2145c:	ldr	r0, [ip, #100]	; 0x64
   21460:	add	r0, r0, r6, lsl #2
   21464:	mov	r6, r3
   21468:	add	r0, r0, #4
   2146c:	bl	113cc <memset@plt>
   21470:	ldr	ip, [sp, #44]	; 0x2c
   21474:	str	r6, [ip, #104]	; 0x68
   21478:	ldr	r9, [ip, #4]
   2147c:	ldr	r6, [sp, #40]	; 0x28
   21480:	b	21388 <__assert_fail@plt+0xfed8>
   21484:	ldr	r0, [r6, #16]
   21488:	mov	r1, r5
   2148c:	cmp	r8, r0
   21490:	blt	216d4 <__assert_fail@plt+0x10224>
   21494:	cmp	r8, #0
   21498:	addne	r1, r1, #1
   2149c:	cmp	r1, lr
   214a0:	ble	214bc <__assert_fail@plt+0x1000c>
   214a4:	b	216d4 <__assert_fail@plt+0x10224>
   214a8:	ldr	r6, [sp, #40]	; 0x28
   214ac:	add	r1, sl, #1
   214b0:	cmp	sl, lr
   214b4:	mov	r9, r8
   214b8:	bge	216d4 <__assert_fail@plt+0x10224>
   214bc:	ldr	r0, [r6]
   214c0:	mov	sl, r1
   214c4:	cmp	r1, r0
   214c8:	ble	214f4 <__assert_fail@plt+0x10044>
   214cc:	ldr	r0, [ip, #28]
   214d0:	cmp	r7, r0
   214d4:	bge	21658 <__assert_fail@plt+0x101a8>
   214d8:	add	r5, r7, #1
   214dc:	add	r1, sl, r9
   214e0:	ldrb	r0, [r9, r7]
   214e4:	ldrb	r1, [r1, #-1]
   214e8:	cmp	r0, r1
   214ec:	beq	214f8 <__assert_fail@plt+0x10048>
   214f0:	b	216d4 <__assert_fail@plt+0x10224>
   214f4:	mov	r5, r7
   214f8:	ldr	r0, [ip, #100]	; 0x64
   214fc:	mov	r8, r9
   21500:	mov	r7, r5
   21504:	ldr	r2, [r0, sl, lsl #2]
   21508:	cmp	r2, #0
   2150c:	beq	214a8 <__assert_fail@plt+0xfff8>
   21510:	ldr	r0, [r2, #8]
   21514:	cmp	r0, #1
   21518:	blt	214a8 <__assert_fail@plt+0xfff8>
   2151c:	ldr	r1, [sp, #36]	; 0x24
   21520:	ldr	r2, [r2, #12]
   21524:	ldr	r4, [sp, #32]
   21528:	ldr	r1, [r1]
   2152c:	b	2153c <__assert_fail@plt+0x1008c>
   21530:	add	r2, r2, #4
   21534:	subs	r0, r0, #1
   21538:	beq	214a8 <__assert_fail@plt+0xfff8>
   2153c:	ldr	r5, [r2]
   21540:	add	r3, r1, r5, lsl #3
   21544:	ldrb	r3, [r3, #4]
   21548:	cmp	r3, #9
   2154c:	bne	21530 <__assert_fail@plt+0x10080>
   21550:	ldr	r3, [r1, r5, lsl #3]
   21554:	cmp	r3, r4
   21558:	bne	21530 <__assert_fail@plt+0x10080>
   2155c:	cmn	r5, #1
   21560:	beq	214a8 <__assert_fail@plt+0xfff8>
   21564:	ldr	r1, [r6, #8]
   21568:	mov	r4, lr
   2156c:	str	r7, [fp, #-48]	; 0xffffffd0
   21570:	cmp	r1, #0
   21574:	bne	215a4 <__assert_fail@plt+0x100f4>
   21578:	ldr	r0, [r6]
   2157c:	mov	r9, #12
   21580:	sub	r0, sl, r0
   21584:	add	r1, r0, #1
   21588:	mov	r0, #12
   2158c:	bl	29000 <__assert_fail@plt+0x17b50>
   21590:	ldr	ip, [sp, #44]	; 0x2c
   21594:	mov	r1, r0
   21598:	cmp	r0, #0
   2159c:	str	r0, [r6, #8]
   215a0:	beq	219f8 <__assert_fail@plt+0x10548>
   215a4:	ldr	r3, [r6]
   215a8:	ldr	r2, [r6, #4]
   215ac:	mov	r0, #9
   215b0:	stm	sp, {r5, sl}
   215b4:	str	r0, [sp, #8]
   215b8:	mov	r0, ip
   215bc:	bl	2228c <__assert_fail@plt+0x10ddc>
   215c0:	ldr	ip, [sp, #44]	; 0x2c
   215c4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   215c8:	cmp	r0, #1
   215cc:	mov	lr, r4
   215d0:	beq	214a8 <__assert_fail@plt+0xfff8>
   215d4:	mov	r9, r0
   215d8:	cmp	r0, #0
   215dc:	bne	219f8 <__assert_fail@plt+0x10548>
   215e0:	ldr	r7, [sp, #40]	; 0x28
   215e4:	ldr	r1, [r7, #12]
   215e8:	ldr	r0, [r7, #16]
   215ec:	cmp	r0, r1
   215f0:	beq	216a0 <__assert_fail@plt+0x101f0>
   215f4:	mov	r0, #1
   215f8:	mov	r1, #20
   215fc:	bl	29000 <__assert_fail@plt+0x17b50>
   21600:	cmp	r0, #0
   21604:	beq	21a20 <__assert_fail@plt+0x10570>
   21608:	mov	r2, r0
   2160c:	ldr	r0, [r7, #16]
   21610:	ldr	r1, [r7, #20]
   21614:	ldr	r3, [sp, #48]	; 0x30
   21618:	str	r2, [r1, r0, lsl #2]
   2161c:	stm	r2, {r5, sl}
   21620:	ldr	r5, [sp, #44]	; 0x2c
   21624:	add	r0, r0, #1
   21628:	mov	r1, r7
   2162c:	str	r0, [r7, #16]
   21630:	str	r4, [sp]
   21634:	mov	r0, r5
   21638:	bl	220c4 <__assert_fail@plt+0x10c14>
   2163c:	cmp	r0, #1
   21640:	bhi	21a08 <__assert_fail@plt+0x10558>
   21644:	ldr	r8, [r5, #4]
   21648:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2164c:	mov	ip, r5
   21650:	mov	lr, r4
   21654:	b	214a8 <__assert_fail@plt+0xfff8>
   21658:	ldr	r0, [ip, #48]	; 0x30
   2165c:	cmp	r7, r0
   21660:	bge	216d4 <__assert_fail@plt+0x10224>
   21664:	add	r5, r7, #1
   21668:	mov	r0, ip
   2166c:	mov	r8, r7
   21670:	mov	r4, ip
   21674:	mov	r1, r5
   21678:	bl	21a30 <__assert_fail@plt+0x10580>
   2167c:	cmp	r0, #0
   21680:	bne	21a08 <__assert_fail@plt+0x10558>
   21684:	ldr	r9, [r4, #4]
   21688:	mov	ip, r4
   2168c:	ldr	r4, [sp, #52]	; 0x34
   21690:	ldr	r6, [sp, #40]	; 0x28
   21694:	mov	r7, r8
   21698:	mov	lr, r4
   2169c:	b	214dc <__assert_fail@plt+0x1002c>
   216a0:	mov	r1, #1
   216a4:	orr	r6, r1, r0, lsl #1
   216a8:	ldr	r0, [r7, #20]
   216ac:	lsl	r1, r6, #2
   216b0:	bl	29084 <__assert_fail@plt+0x17bd4>
   216b4:	cmp	r0, #0
   216b8:	beq	21a20 <__assert_fail@plt+0x10570>
   216bc:	str	r6, [r7, #12]
   216c0:	str	r0, [r7, #20]
   216c4:	b	215f4 <__assert_fail@plt+0x10144>
   216c8:	mov	r1, r5
   216cc:	cmp	r8, r0
   216d0:	bge	21494 <__assert_fail@plt+0xffe4>
   216d4:	ldr	r3, [sp, #28]
   216d8:	ldr	r0, [ip, #124]	; 0x7c
   216dc:	add	r3, r3, #1
   216e0:	cmp	r3, r0
   216e4:	bge	216f8 <__assert_fail@plt+0x10248>
   216e8:	ldr	r0, [sp, #36]	; 0x24
   216ec:	ldr	r2, [sp, #32]
   216f0:	ldr	r0, [r0]
   216f4:	b	21320 <__assert_fail@plt+0xfe70>
   216f8:	ldr	r0, [ip, #108]	; 0x6c
   216fc:	b	21704 <__assert_fail@plt+0x10254>
   21700:	ldr	r0, [sp, #20]
   21704:	ldr	r7, [sp, #20]
   21708:	mov	r1, #0
   2170c:	str	r1, [fp, #-32]	; 0xffffffe0
   21710:	cmp	r7, r0
   21714:	blt	2172c <__assert_fail@plt+0x1027c>
   21718:	b	210ec <__assert_fail@plt+0xfc3c>
   2171c:	ldr	r0, [ip, #108]	; 0x6c
   21720:	add	r7, r7, #1
   21724:	cmp	r7, r0
   21728:	bge	210ec <__assert_fail@plt+0xfc3c>
   2172c:	ldr	r0, [ip, #116]	; 0x74
   21730:	add	r1, r7, r7, lsl #1
   21734:	ldr	r3, [sp, #48]	; 0x30
   21738:	ldr	r2, [r0, r1, lsl #3]
   2173c:	cmp	r2, r3
   21740:	bne	2171c <__assert_fail@plt+0x1026c>
   21744:	add	r0, r0, r1, lsl #3
   21748:	ldr	r2, [sp, #52]	; 0x34
   2174c:	ldr	r1, [r0, #4]
   21750:	cmp	r1, r2
   21754:	bne	2171c <__assert_fail@plt+0x1026c>
   21758:	str	r7, [sp, #20]
   2175c:	ldr	r4, [r0, #8]
   21760:	ldr	r7, [r0, #12]
   21764:	ldr	r0, [sp, #24]
   21768:	ldr	r8, [r0, #24]
   2176c:	cmp	r7, r4
   21770:	bne	2178c <__assert_fail@plt+0x102dc>
   21774:	ldr	r1, [sp, #48]	; 0x30
   21778:	ldr	r0, [r0, #20]
   2177c:	add	r1, r1, r1, lsl #1
   21780:	add	r0, r0, r1, lsl #2
   21784:	ldr	r0, [r0, #8]
   21788:	b	21798 <__assert_fail@plt+0x102e8>
   2178c:	ldr	r0, [r0, #12]
   21790:	ldr	r1, [sp, #48]	; 0x30
   21794:	add	r0, r0, r1, lsl #2
   21798:	ldr	r9, [r0]
   2179c:	ldr	r0, [sp, #52]	; 0x34
   217a0:	add	r0, r7, r0
   217a4:	sub	r5, r0, r4
   217a8:	cmp	r5, #0
   217ac:	ble	217e8 <__assert_fail@plt+0x10338>
   217b0:	ldr	r1, [ip, #48]	; 0x30
   217b4:	sub	r0, r5, #1
   217b8:	cmp	r1, r0
   217bc:	beq	21978 <__assert_fail@plt+0x104c8>
   217c0:	ldr	r1, [ip, #80]	; 0x50
   217c4:	cmp	r1, #2
   217c8:	blt	217f0 <__assert_fail@plt+0x10340>
   217cc:	ldr	r1, [ip, #8]
   217d0:	ldr	r6, [r1, r0, lsl #2]
   217d4:	cmn	r6, #1
   217d8:	bne	21820 <__assert_fail@plt+0x10370>
   217dc:	sub	r0, r0, #1
   217e0:	cmn	r0, #1
   217e4:	bne	217d0 <__assert_fail@plt+0x10320>
   217e8:	ldr	sl, [ip, #60]	; 0x3c
   217ec:	b	21848 <__assert_fail@plt+0x10398>
   217f0:	ldr	r1, [ip, #4]
   217f4:	ldr	r2, [ip, #68]	; 0x44
   217f8:	mov	sl, #1
   217fc:	ldrb	r0, [r1, r0]
   21800:	ubfx	r1, r0, #5, #3
   21804:	ldr	r1, [r2, r1, lsl #2]
   21808:	and	r2, r0, #31
   2180c:	tst	r1, sl, lsl r2
   21810:	moveq	sl, #0
   21814:	cmpeq	r0, #10
   21818:	bne	21848 <__assert_fail@plt+0x10398>
   2181c:	b	21838 <__assert_fail@plt+0x10388>
   21820:	ldrb	r0, [ip, #78]	; 0x4e
   21824:	cmp	r0, #0
   21828:	bne	21988 <__assert_fail@plt+0x104d8>
   2182c:	mov	sl, #0
   21830:	cmp	r6, #10
   21834:	bne	21848 <__assert_fail@plt+0x10398>
   21838:	ldrb	r0, [ip, #77]	; 0x4d
   2183c:	cmp	r0, #0
   21840:	movwne	r0, #1
   21844:	lsl	sl, r0, #1
   21848:	ldr	r0, [ip, #100]	; 0x64
   2184c:	ldr	r2, [sp, #52]	; 0x34
   21850:	add	r1, r9, r9, lsl #1
   21854:	ldr	r2, [r0, r2, lsl #2]
   21858:	ldr	r0, [r0, r5, lsl #2]
   2185c:	cmp	r2, #0
   21860:	beq	2186c <__assert_fail@plt+0x103bc>
   21864:	ldr	r2, [r2, #8]
   21868:	b	21870 <__assert_fail@plt+0x103c0>
   2186c:	mov	r2, #0
   21870:	add	r8, r8, r1, lsl #2
   21874:	sub	r6, fp, #44	; 0x2c
   21878:	cmp	r0, #0
   2187c:	str	r2, [fp, #-48]	; 0xffffffd0
   21880:	beq	218d4 <__assert_fail@plt+0x10424>
   21884:	ldr	r1, [r0, #40]	; 0x28
   21888:	mov	r0, r6
   2188c:	mov	r2, r8
   21890:	bl	21e3c <__assert_fail@plt+0x1098c>
   21894:	cmp	r0, #0
   21898:	str	r0, [fp, #-32]	; 0xffffffe0
   2189c:	bne	21a10 <__assert_fail@plt+0x10560>
   218a0:	ldr	r1, [sp, #24]
   218a4:	sub	r0, fp, #32
   218a8:	mov	r2, r6
   218ac:	mov	r3, sl
   218b0:	bl	1ff18 <__assert_fail@plt+0xea68>
   218b4:	ldr	r6, [sp, #44]	; 0x2c
   218b8:	ldr	r1, [r6, #100]	; 0x64
   218bc:	str	r0, [r1, r5, lsl #2]
   218c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   218c4:	bl	29220 <__assert_fail@plt+0x17d70>
   218c8:	ldr	r0, [r6, #100]	; 0x64
   218cc:	mov	ip, r6
   218d0:	b	218f8 <__assert_fail@plt+0x10448>
   218d4:	ldr	r1, [sp, #24]
   218d8:	sub	r0, fp, #32
   218dc:	mov	r2, r8
   218e0:	mov	r3, sl
   218e4:	bl	1ff18 <__assert_fail@plt+0xea68>
   218e8:	ldr	ip, [sp, #44]	; 0x2c
   218ec:	ldr	r1, [ip, #100]	; 0x64
   218f0:	str	r0, [r1, r5, lsl #2]
   218f4:	ldr	r0, [ip, #100]	; 0x64
   218f8:	ldr	r1, [r0, r5, lsl #2]
   218fc:	cmp	r1, #0
   21900:	bne	21910 <__assert_fail@plt+0x10460>
   21904:	ldr	r9, [fp, #-32]	; 0xffffffe0
   21908:	cmp	r9, #0
   2190c:	bne	219fc <__assert_fail@plt+0x1054c>
   21910:	cmp	r7, r4
   21914:	ldr	r7, [sp, #20]
   21918:	bne	2171c <__assert_fail@plt+0x1026c>
   2191c:	ldr	r1, [sp, #52]	; 0x34
   21920:	ldr	r0, [r0, r1, lsl #2]
   21924:	ldr	r1, [fp, #-48]	; 0xffffffd0
   21928:	ldr	r0, [r0, #8]
   2192c:	cmp	r0, r1
   21930:	ble	2171c <__assert_fail@plt+0x1026c>
   21934:	ldr	r2, [sp, #52]	; 0x34
   21938:	mov	r0, ip
   2193c:	mov	r1, r8
   21940:	mov	r4, ip
   21944:	bl	20fb0 <__assert_fail@plt+0xfb00>
   21948:	cmp	r0, #0
   2194c:	str	r0, [fp, #-32]	; 0xffffffe0
   21950:	bne	21a28 <__assert_fail@plt+0x10578>
   21954:	mov	r0, r4
   21958:	mov	r1, r8
   2195c:	bl	210b0 <__assert_fail@plt+0xfc00>
   21960:	ldr	r7, [sp, #20]
   21964:	cmp	r0, #0
   21968:	mov	ip, r4
   2196c:	str	r0, [fp, #-32]	; 0xffffffe0
   21970:	beq	2171c <__assert_fail@plt+0x1026c>
   21974:	b	21a28 <__assert_fail@plt+0x10578>
   21978:	ldr	r0, [ip, #88]	; 0x58
   2197c:	and	r0, r0, #2
   21980:	eor	sl, r0, #10
   21984:	b	21848 <__assert_fail@plt+0x10398>
   21988:	mov	r0, r6
   2198c:	bl	113b4 <iswalnum@plt>
   21990:	mov	sl, #1
   21994:	cmp	r6, #95	; 0x5f
   21998:	beq	219ac <__assert_fail@plt+0x104fc>
   2199c:	ldr	ip, [sp, #44]	; 0x2c
   219a0:	cmp	r0, #0
   219a4:	beq	2182c <__assert_fail@plt+0x1037c>
   219a8:	b	21848 <__assert_fail@plt+0x10398>
   219ac:	ldr	ip, [sp, #44]	; 0x2c
   219b0:	b	21848 <__assert_fail@plt+0x10398>
   219b4:	ldr	r0, [ip, #88]	; 0x58
   219b8:	and	r0, r0, #2
   219bc:	eor	r1, r0, #10
   219c0:	b	211f4 <__assert_fail@plt+0xfd44>
   219c4:	mov	r0, r6
   219c8:	bl	113b4 <iswalnum@plt>
   219cc:	mov	r1, #1
   219d0:	mov	r2, #0
   219d4:	cmp	r6, #95	; 0x5f
   219d8:	beq	219ec <__assert_fail@plt+0x1053c>
   219dc:	ldr	ip, [sp, #44]	; 0x2c
   219e0:	cmp	r0, #0
   219e4:	beq	211d8 <__assert_fail@plt+0xfd28>
   219e8:	b	2120c <__assert_fail@plt+0xfd5c>
   219ec:	ldr	ip, [sp, #44]	; 0x2c
   219f0:	b	2120c <__assert_fail@plt+0xfd5c>
   219f4:	mov	r9, #0
   219f8:	str	r9, [fp, #-32]	; 0xffffffe0
   219fc:	mov	r0, r9
   21a00:	sub	sp, fp, #28
   21a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a08:	mov	r9, r0
   21a0c:	b	219f8 <__assert_fail@plt+0x10548>
   21a10:	mov	r9, r0
   21a14:	ldr	r0, [fp, #-36]	; 0xffffffdc
   21a18:	bl	29220 <__assert_fail@plt+0x17d70>
   21a1c:	b	219fc <__assert_fail@plt+0x1054c>
   21a20:	mov	r9, #12
   21a24:	b	219f8 <__assert_fail@plt+0x10548>
   21a28:	mov	r9, r0
   21a2c:	b	219fc <__assert_fail@plt+0x1054c>
   21a30:	push	{r4, r5, r6, r7, fp, lr}
   21a34:	add	fp, sp, #16
   21a38:	mov	r4, r0
   21a3c:	ldr	r0, [r0, #36]	; 0x24
   21a40:	mov	r5, #12
   21a44:	cmn	r0, #-536870910	; 0xe0000002
   21a48:	bhi	21c24 <__assert_fail@plt+0x10774>
   21a4c:	ldr	r6, [r4, #48]	; 0x30
   21a50:	ldr	r2, [r4, #80]	; 0x50
   21a54:	cmp	r6, r0, lsl #1
   21a58:	lslge	r6, r0, #1
   21a5c:	cmp	r6, r1
   21a60:	movle	r6, r1
   21a64:	cmp	r2, #2
   21a68:	blt	21ab0 <__assert_fail@plt+0x10600>
   21a6c:	cmn	r6, #-1073741823	; 0xc0000001
   21a70:	bhi	21c24 <__assert_fail@plt+0x10774>
   21a74:	ldr	r0, [r4, #8]
   21a78:	lsl	r7, r6, #2
   21a7c:	mov	r1, r7
   21a80:	bl	29084 <__assert_fail@plt+0x17bd4>
   21a84:	cmp	r0, #0
   21a88:	beq	21c24 <__assert_fail@plt+0x10774>
   21a8c:	str	r0, [r4, #8]
   21a90:	ldr	r0, [r4, #12]
   21a94:	cmp	r0, #0
   21a98:	beq	21ab0 <__assert_fail@plt+0x10600>
   21a9c:	mov	r1, r7
   21aa0:	bl	29084 <__assert_fail@plt+0x17bd4>
   21aa4:	cmp	r0, #0
   21aa8:	beq	21c24 <__assert_fail@plt+0x10774>
   21aac:	str	r0, [r4, #12]
   21ab0:	ldrb	r0, [r4, #75]	; 0x4b
   21ab4:	cmp	r0, #0
   21ab8:	beq	21ad4 <__assert_fail@plt+0x10624>
   21abc:	ldr	r0, [r4, #4]
   21ac0:	mov	r1, r6
   21ac4:	bl	29084 <__assert_fail@plt+0x17bd4>
   21ac8:	cmp	r0, #0
   21acc:	beq	21c24 <__assert_fail@plt+0x10774>
   21ad0:	str	r0, [r4, #4]
   21ad4:	str	r6, [r4, #36]	; 0x24
   21ad8:	ldr	r0, [r4, #100]	; 0x64
   21adc:	cmp	r0, #0
   21ae0:	beq	21afc <__assert_fail@plt+0x1064c>
   21ae4:	mov	r1, #4
   21ae8:	add	r1, r1, r6, lsl #2
   21aec:	bl	29084 <__assert_fail@plt+0x17bd4>
   21af0:	cmp	r0, #0
   21af4:	beq	21c24 <__assert_fail@plt+0x10774>
   21af8:	str	r0, [r4, #100]	; 0x64
   21afc:	ldrb	r1, [r4, #72]	; 0x48
   21b00:	ldr	r0, [r4, #80]	; 0x50
   21b04:	cmp	r1, #0
   21b08:	beq	21b28 <__assert_fail@plt+0x10678>
   21b0c:	cmp	r0, #2
   21b10:	blt	21b3c <__assert_fail@plt+0x1068c>
   21b14:	mov	r0, r4
   21b18:	bl	19fc0 <__assert_fail@plt+0x8b10>
   21b1c:	cmp	r0, #0
   21b20:	beq	21c20 <__assert_fail@plt+0x10770>
   21b24:	pop	{r4, r5, r6, r7, fp, pc}
   21b28:	cmp	r0, #2
   21b2c:	blt	21bac <__assert_fail@plt+0x106fc>
   21b30:	mov	r0, r4
   21b34:	bl	1a8c0 <__assert_fail@plt+0x9410>
   21b38:	b	21c20 <__assert_fail@plt+0x10770>
   21b3c:	ldr	r6, [r4, #36]	; 0x24
   21b40:	ldr	r0, [r4, #48]	; 0x30
   21b44:	ldr	r5, [r4, #28]
   21b48:	cmp	r6, r0
   21b4c:	movgt	r6, r0
   21b50:	cmp	r5, r6
   21b54:	bge	21ba0 <__assert_fail@plt+0x106f0>
   21b58:	bl	11348 <__ctype_toupper_loc@plt>
   21b5c:	ldr	r1, [r4]
   21b60:	ldr	r3, [r4, #24]
   21b64:	ldr	r2, [r4, #64]	; 0x40
   21b68:	add	r1, r1, r3
   21b6c:	cmp	r2, #0
   21b70:	ldrb	r1, [r1, r5]
   21b74:	bne	21b98 <__assert_fail@plt+0x106e8>
   21b78:	ldr	r2, [r0]
   21b7c:	ldr	r1, [r2, r1, lsl #2]
   21b80:	ldr	r2, [r4, #4]
   21b84:	strb	r1, [r2, r5]
   21b88:	add	r5, r5, #1
   21b8c:	cmp	r5, r6
   21b90:	blt	21b5c <__assert_fail@plt+0x106ac>
   21b94:	b	21ba0 <__assert_fail@plt+0x106f0>
   21b98:	ldrb	r1, [r2, r1]
   21b9c:	b	21b78 <__assert_fail@plt+0x106c8>
   21ba0:	str	r5, [r4, #28]
   21ba4:	str	r5, [r4, #32]
   21ba8:	b	21c20 <__assert_fail@plt+0x10770>
   21bac:	ldr	r2, [r4, #64]	; 0x40
   21bb0:	cmp	r2, #0
   21bb4:	beq	21c20 <__assert_fail@plt+0x10770>
   21bb8:	ldr	r1, [r4, #36]	; 0x24
   21bbc:	ldr	r3, [r4, #48]	; 0x30
   21bc0:	ldr	r0, [r4, #28]
   21bc4:	cmp	r1, r3
   21bc8:	movgt	r1, r3
   21bcc:	cmp	r0, r1
   21bd0:	bge	21c18 <__assert_fail@plt+0x10768>
   21bd4:	ldr	r6, [r4, #24]
   21bd8:	ldm	r4, {r3, r7}
   21bdc:	add	r6, r6, r0
   21be0:	ldrb	r3, [r3, r6]
   21be4:	ldrb	r2, [r2, r3]
   21be8:	strb	r2, [r7, r0]
   21bec:	add	r0, r0, #1
   21bf0:	cmp	r0, r1
   21bf4:	bge	21c18 <__assert_fail@plt+0x10768>
   21bf8:	ldr	r7, [r4, #24]
   21bfc:	ldm	r4, {r2, r3}
   21c00:	ldr	r6, [r4, #64]	; 0x40
   21c04:	add	r2, r2, r7
   21c08:	ldrb	r2, [r2, r0]
   21c0c:	ldrb	r2, [r6, r2]
   21c10:	strb	r2, [r3, r0]
   21c14:	b	21bec <__assert_fail@plt+0x1073c>
   21c18:	str	r0, [r4, #28]
   21c1c:	str	r0, [r4, #32]
   21c20:	mov	r5, #0
   21c24:	mov	r0, r5
   21c28:	pop	{r4, r5, r6, r7, fp, pc}
   21c2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21c30:	add	fp, sp, #24
   21c34:	sub	sp, sp, #16
   21c38:	mov	r9, r0
   21c3c:	mov	r4, r1
   21c40:	ldr	r5, [r1, #40]	; 0x28
   21c44:	ldr	r7, [r1, #84]	; 0x54
   21c48:	ldr	r0, [r1, #100]	; 0x64
   21c4c:	ldr	r1, [r1, #104]	; 0x68
   21c50:	mov	r6, r2
   21c54:	cmp	r5, r1
   21c58:	ble	21c68 <__assert_fail@plt+0x107b8>
   21c5c:	str	r6, [r0, r5, lsl #2]
   21c60:	str	r5, [r4, #104]	; 0x68
   21c64:	b	21d98 <__assert_fail@plt+0x108e8>
   21c68:	ldr	r1, [r0, r5, lsl #2]
   21c6c:	cmp	r1, #0
   21c70:	beq	21cac <__assert_fail@plt+0x107fc>
   21c74:	ldr	r2, [r1, #40]	; 0x28
   21c78:	cmp	r6, #0
   21c7c:	beq	21cb4 <__assert_fail@plt+0x10804>
   21c80:	ldr	r8, [r6, #40]	; 0x28
   21c84:	mov	r0, sp
   21c88:	mov	r1, r8
   21c8c:	bl	21e3c <__assert_fail@plt+0x1098c>
   21c90:	cmp	r0, #0
   21c94:	str	r0, [r9]
   21c98:	bne	21e04 <__assert_fail@plt+0x10954>
   21c9c:	ldr	r0, [r4, #40]	; 0x28
   21ca0:	cmp	r0, #0
   21ca4:	bgt	21cd4 <__assert_fail@plt+0x10824>
   21ca8:	b	21d0c <__assert_fail@plt+0x1085c>
   21cac:	str	r6, [r0, r5, lsl #2]
   21cb0:	b	21d98 <__assert_fail@plt+0x108e8>
   21cb4:	vldr	d16, [r2]
   21cb8:	ldr	r0, [r2, #8]
   21cbc:	mov	r8, #0
   21cc0:	str	r0, [sp, #8]
   21cc4:	mov	r0, r5
   21cc8:	vstr	d16, [sp]
   21ccc:	cmp	r0, #0
   21cd0:	ble	21d0c <__assert_fail@plt+0x1085c>
   21cd4:	ldr	r1, [r4, #48]	; 0x30
   21cd8:	sub	r0, r0, #1
   21cdc:	cmp	r1, r0
   21ce0:	beq	21e0c <__assert_fail@plt+0x1095c>
   21ce4:	ldr	r1, [r4, #80]	; 0x50
   21ce8:	cmp	r1, #2
   21cec:	blt	21d14 <__assert_fail@plt+0x10864>
   21cf0:	ldr	r1, [r4, #8]
   21cf4:	ldr	r6, [r1, r0, lsl #2]
   21cf8:	cmn	r6, #1
   21cfc:	bne	21d44 <__assert_fail@plt+0x10894>
   21d00:	sub	r0, r0, #1
   21d04:	cmn	r0, #1
   21d08:	bne	21cf4 <__assert_fail@plt+0x10844>
   21d0c:	ldr	r3, [r4, #60]	; 0x3c
   21d10:	b	21d6c <__assert_fail@plt+0x108bc>
   21d14:	ldr	r1, [r4, #4]
   21d18:	ldr	r2, [r4, #68]	; 0x44
   21d1c:	mov	r3, #1
   21d20:	ldrb	r0, [r1, r0]
   21d24:	ubfx	r1, r0, #5, #3
   21d28:	ldr	r1, [r2, r1, lsl #2]
   21d2c:	and	r2, r0, #31
   21d30:	tst	r1, r3, lsl r2
   21d34:	moveq	r3, #0
   21d38:	cmpeq	r0, #10
   21d3c:	bne	21d6c <__assert_fail@plt+0x108bc>
   21d40:	b	21d5c <__assert_fail@plt+0x108ac>
   21d44:	ldrb	r0, [r4, #78]	; 0x4e
   21d48:	cmp	r0, #0
   21d4c:	bne	21e1c <__assert_fail@plt+0x1096c>
   21d50:	mov	r3, #0
   21d54:	cmp	r6, #10
   21d58:	bne	21d6c <__assert_fail@plt+0x108bc>
   21d5c:	ldrb	r0, [r4, #77]	; 0x4d
   21d60:	cmp	r0, #0
   21d64:	movwne	r0, #1
   21d68:	lsl	r3, r0, #1
   21d6c:	mov	r2, sp
   21d70:	mov	r0, r9
   21d74:	mov	r1, r7
   21d78:	bl	1ff18 <__assert_fail@plt+0xea68>
   21d7c:	mov	r6, r0
   21d80:	ldr	r0, [r4, #100]	; 0x64
   21d84:	cmp	r8, #0
   21d88:	str	r6, [r0, r5, lsl #2]
   21d8c:	beq	21d98 <__assert_fail@plt+0x108e8>
   21d90:	ldr	r0, [sp, #8]
   21d94:	bl	29220 <__assert_fail@plt+0x17d70>
   21d98:	cmp	r6, #0
   21d9c:	ldrne	r0, [r7, #76]	; 0x4c
   21da0:	cmpne	r0, #0
   21da4:	bne	21db4 <__assert_fail@plt+0x10904>
   21da8:	mov	r0, r6
   21dac:	sub	sp, fp, #24
   21db0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21db4:	add	r7, r6, #4
   21db8:	mov	r0, r4
   21dbc:	mov	r2, r5
   21dc0:	mov	r1, r7
   21dc4:	bl	20fb0 <__assert_fail@plt+0xfb00>
   21dc8:	cmp	r0, #0
   21dcc:	str	r0, [r9]
   21dd0:	bne	21e04 <__assert_fail@plt+0x10954>
   21dd4:	ldrb	r0, [r6, #52]	; 0x34
   21dd8:	tst	r0, #64	; 0x40
   21ddc:	beq	21da8 <__assert_fail@plt+0x108f8>
   21de0:	mov	r0, r4
   21de4:	mov	r1, r7
   21de8:	bl	210b0 <__assert_fail@plt+0xfc00>
   21dec:	str	r0, [r9]
   21df0:	cmp	r0, #0
   21df4:	mov	r6, #0
   21df8:	ldreq	r0, [r4, #100]	; 0x64
   21dfc:	ldreq	r6, [r0, r5, lsl #2]
   21e00:	b	21da8 <__assert_fail@plt+0x108f8>
   21e04:	mov	r6, #0
   21e08:	b	21da8 <__assert_fail@plt+0x108f8>
   21e0c:	ldr	r0, [r4, #88]	; 0x58
   21e10:	and	r0, r0, #2
   21e14:	eor	r3, r0, #10
   21e18:	b	21d6c <__assert_fail@plt+0x108bc>
   21e1c:	mov	r0, r6
   21e20:	bl	113b4 <iswalnum@plt>
   21e24:	mov	r3, #1
   21e28:	cmp	r6, #95	; 0x5f
   21e2c:	beq	21d6c <__assert_fail@plt+0x108bc>
   21e30:	cmp	r0, #0
   21e34:	beq	21d50 <__assert_fail@plt+0x108a0>
   21e38:	b	21d6c <__assert_fail@plt+0x108bc>
   21e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e40:	add	fp, sp, #28
   21e44:	sub	sp, sp, #20
   21e48:	mov	sl, r2
   21e4c:	cmp	r1, #0
   21e50:	str	r0, [sp, #16]
   21e54:	beq	21fc8 <__assert_fail@plt+0x10b18>
   21e58:	ldr	r0, [r1, #4]
   21e5c:	mov	r8, r1
   21e60:	cmp	sl, #0
   21e64:	beq	21f84 <__assert_fail@plt+0x10ad4>
   21e68:	cmp	r0, #1
   21e6c:	blt	21f84 <__assert_fail@plt+0x10ad4>
   21e70:	ldr	r1, [sl, #4]
   21e74:	cmp	r1, #1
   21e78:	blt	21f84 <__assert_fail@plt+0x10ad4>
   21e7c:	ldr	r4, [sp, #16]
   21e80:	add	r0, r1, r0
   21e84:	str	r0, [r4]
   21e88:	lsl	r0, r0, #2
   21e8c:	bl	29054 <__assert_fail@plt+0x17ba4>
   21e90:	cmp	r0, #0
   21e94:	str	r0, [r4, #8]
   21e98:	beq	220b8 <__assert_fail@plt+0x10c08>
   21e9c:	ldr	r9, [sl, #4]
   21ea0:	ldr	lr, [r8, #4]
   21ea4:	mov	r7, #0
   21ea8:	mov	r1, #0
   21eac:	cmp	r9, #0
   21eb0:	movwgt	r1, #1
   21eb4:	cmp	lr, #1
   21eb8:	blt	2203c <__assert_fail@plt+0x10b8c>
   21ebc:	mov	r2, #0
   21ec0:	mov	ip, #0
   21ec4:	str	r2, [sp, #8]
   21ec8:	mov	r2, #0
   21ecc:	str	r2, [sp, #12]
   21ed0:	mov	r2, #0
   21ed4:	ldr	r4, [sp, #12]
   21ed8:	mov	r7, ip
   21edc:	tst	r1, #1
   21ee0:	beq	2206c <__assert_fail@plt+0x10bbc>
   21ee4:	ldr	r1, [sl, #8]
   21ee8:	ldr	r5, [r1, r7, lsl #2]
   21eec:	ldr	r1, [r8, #8]
   21ef0:	ldr	r3, [r1, r2, lsl #2]
   21ef4:	cmp	r3, r5
   21ef8:	ble	21f20 <__assert_fail@plt+0x10a70>
   21efc:	add	r7, r7, #1
   21f00:	str	r5, [r0, r4, lsl #2]
   21f04:	mov	r1, #0
   21f08:	add	r4, r4, #1
   21f0c:	cmp	r9, r7
   21f10:	movwgt	r1, #1
   21f14:	cmp	lr, r2
   21f18:	bgt	21edc <__assert_fail@plt+0x10a2c>
   21f1c:	b	22040 <__assert_fail@plt+0x10b90>
   21f20:	str	r3, [r0, r4, lsl #2]
   21f24:	ldr	r6, [sp, #8]
   21f28:	add	r1, r7, #1
   21f2c:	mov	ip, r7
   21f30:	add	r2, r2, #1
   21f34:	ldr	r9, [sl, #4]
   21f38:	ldr	lr, [r8, #4]
   21f3c:	moveq	ip, r1
   21f40:	str	r1, [sp, #4]
   21f44:	mov	r1, #0
   21f48:	sub	r6, r6, #1
   21f4c:	cmp	r9, ip
   21f50:	str	r6, [sp, #8]
   21f54:	add	r6, r4, #1
   21f58:	movwgt	r1, #1
   21f5c:	cmp	lr, r2
   21f60:	str	r6, [sp, #12]
   21f64:	bgt	21ed4 <__assert_fail@plt+0x10a24>
   21f68:	ldr	r2, [sp, #4]
   21f6c:	cmp	r3, r5
   21f70:	add	r4, r4, #1
   21f74:	moveq	r7, r2
   21f78:	cmp	r1, #0
   21f7c:	bne	22048 <__assert_fail@plt+0x10b98>
   21f80:	b	22094 <__assert_fail@plt+0x10be4>
   21f84:	cmp	r0, #1
   21f88:	blt	21fc8 <__assert_fail@plt+0x10b18>
   21f8c:	ldr	r1, [sp, #16]
   21f90:	str	r0, [r1, #4]
   21f94:	ldr	r1, [r8, #4]
   21f98:	cmp	r1, #1
   21f9c:	blt	22020 <__assert_fail@plt+0x10b70>
   21fa0:	ldr	r4, [sp, #16]
   21fa4:	str	r0, [r4]
   21fa8:	lsl	r0, r0, #2
   21fac:	bl	29054 <__assert_fail@plt+0x17ba4>
   21fb0:	cmp	r0, #0
   21fb4:	str	r0, [r4, #8]
   21fb8:	beq	220a8 <__assert_fail@plt+0x10bf8>
   21fbc:	ldr	r2, [r8, #4]
   21fc0:	ldr	r1, [r8, #8]
   21fc4:	b	22014 <__assert_fail@plt+0x10b64>
   21fc8:	cmp	sl, #0
   21fcc:	beq	22020 <__assert_fail@plt+0x10b70>
   21fd0:	ldr	r0, [sl, #4]
   21fd4:	cmp	r0, #1
   21fd8:	blt	22020 <__assert_fail@plt+0x10b70>
   21fdc:	ldr	r1, [sp, #16]
   21fe0:	str	r0, [r1, #4]
   21fe4:	ldr	r1, [sl, #4]
   21fe8:	cmp	r1, #1
   21fec:	blt	22020 <__assert_fail@plt+0x10b70>
   21ff0:	ldr	r4, [sp, #16]
   21ff4:	str	r0, [r4]
   21ff8:	lsl	r0, r0, #2
   21ffc:	bl	29054 <__assert_fail@plt+0x17ba4>
   22000:	cmp	r0, #0
   22004:	str	r0, [r4, #8]
   22008:	beq	220a8 <__assert_fail@plt+0x10bf8>
   2200c:	ldr	r2, [sl, #4]
   22010:	ldr	r1, [sl, #8]
   22014:	lsl	r2, r2, #2
   22018:	bl	11258 <memcpy@plt>
   2201c:	b	2209c <__assert_fail@plt+0x10bec>
   22020:	ldr	r1, [sp, #16]
   22024:	mov	r0, #0
   22028:	str	r0, [r1]
   2202c:	str	r0, [r1, #4]
   22030:	str	r0, [r1, #8]
   22034:	sub	sp, fp, #28
   22038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2203c:	mov	r4, #0
   22040:	cmp	r1, #0
   22044:	beq	22094 <__assert_fail@plt+0x10be4>
   22048:	ldr	r1, [sl, #8]
   2204c:	sub	r2, r9, r7
   22050:	add	r0, r0, r4, lsl #2
   22054:	lsl	r2, r2, #2
   22058:	add	r1, r1, r7, lsl #2
   2205c:	bl	11258 <memcpy@plt>
   22060:	sub	r0, r4, r7
   22064:	add	r4, r0, r9
   22068:	b	22094 <__assert_fail@plt+0x10be4>
   2206c:	ldr	r1, [r8, #8]
   22070:	add	r0, r0, r4, lsl #2
   22074:	add	r1, r1, r2, lsl #2
   22078:	sub	r2, lr, r2
   2207c:	lsl	r2, r2, #2
   22080:	bl	11258 <memcpy@plt>
   22084:	ldr	r0, [r8, #4]
   22088:	ldr	r1, [sp, #8]
   2208c:	add	r0, r0, r1
   22090:	add	r4, r0, r4
   22094:	ldr	r0, [sp, #16]
   22098:	str	r4, [r0, #4]
   2209c:	mov	r0, #0
   220a0:	sub	sp, fp, #28
   220a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220a8:	ldr	r1, [sp, #16]
   220ac:	mov	r0, #0
   220b0:	str	r0, [r1]
   220b4:	str	r0, [r1, #4]
   220b8:	mov	r0, #12
   220bc:	sub	sp, fp, #28
   220c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220c8:	add	fp, sp, #28
   220cc:	sub	sp, sp, #12
   220d0:	mov	r6, r2
   220d4:	mov	r7, r3
   220d8:	ldr	r2, [r2]
   220dc:	mov	r4, r0
   220e0:	mov	r0, #8
   220e4:	mov	r8, r1
   220e8:	ldr	r9, [fp, #8]
   220ec:	ldr	r3, [r6, #4]
   220f0:	str	r0, [sp, #8]
   220f4:	add	r1, r6, #8
   220f8:	mov	r0, r4
   220fc:	stm	sp, {r7, r9}
   22100:	bl	2228c <__assert_fail@plt+0x10ddc>
   22104:	mov	r5, r0
   22108:	cmp	r0, #0
   2210c:	beq	2211c <__assert_fail@plt+0x10c6c>
   22110:	mov	r0, r5
   22114:	sub	sp, fp, #28
   22118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2211c:	ldr	r0, [r4, #108]	; 0x6c
   22120:	ldr	r1, [r4, #112]	; 0x70
   22124:	ldr	sl, [r6, #4]
   22128:	ldr	r5, [r8]
   2212c:	cmp	r0, r1
   22130:	blt	22180 <__assert_fail@plt+0x10cd0>
   22134:	ldr	r0, [r4, #116]	; 0x74
   22138:	add	r1, r1, r1, lsl #1
   2213c:	lsl	r1, r1, #4
   22140:	bl	29084 <__assert_fail@plt+0x17bd4>
   22144:	cmp	r0, #0
   22148:	beq	2227c <__assert_fail@plt+0x10dcc>
   2214c:	str	r0, [r4, #116]	; 0x74
   22150:	ldr	r1, [r4, #108]	; 0x6c
   22154:	ldr	r2, [r4, #112]	; 0x70
   22158:	add	r1, r1, r1, lsl #1
   2215c:	add	r0, r0, r1, lsl #3
   22160:	add	r1, r2, r2, lsl #1
   22164:	lsl	r2, r1, #3
   22168:	mov	r1, #0
   2216c:	bl	113cc <memset@plt>
   22170:	ldr	r1, [r4, #112]	; 0x70
   22174:	ldr	r0, [r4, #108]	; 0x6c
   22178:	lsl	r1, r1, #1
   2217c:	str	r1, [r4, #112]	; 0x70
   22180:	ldr	r1, [r4, #116]	; 0x74
   22184:	cmp	r0, #1
   22188:	blt	221a8 <__assert_fail@plt+0x10cf8>
   2218c:	sub	r2, r0, #1
   22190:	add	r2, r2, r2, lsl #1
   22194:	add	r2, r1, r2, lsl #3
   22198:	ldr	r3, [r2, #4]
   2219c:	cmp	r3, r9
   221a0:	moveq	r3, #1
   221a4:	strbeq	r3, [r2, #20]
   221a8:	add	r2, r0, r0, lsl #1
   221ac:	cmp	sl, r5
   221b0:	mov	r3, #0
   221b4:	mov	ip, #0
   221b8:	add	r0, r0, #1
   221bc:	mvneq	r3, #0
   221c0:	str	r7, [r1, r2, lsl #3]!
   221c4:	str	r9, [r1, #4]
   221c8:	str	r5, [r1, #8]
   221cc:	str	sl, [r1, #12]
   221d0:	str	r3, [r1, #16]
   221d4:	str	r0, [r4, #108]	; 0x6c
   221d8:	strb	ip, [r1, #20]
   221dc:	sub	r0, sl, r5
   221e0:	ldr	r1, [r4, #120]	; 0x78
   221e4:	cmp	r1, r0
   221e8:	strlt	r0, [r4, #120]	; 0x78
   221ec:	ldr	r0, [r6, #4]
   221f0:	ldr	r1, [r8]
   221f4:	ldr	r7, [r4, #104]	; 0x68
   221f8:	add	r0, r0, r9
   221fc:	sub	r6, r0, r1
   22200:	ldr	r0, [r4, #36]	; 0x24
   22204:	cmp	r0, r6
   22208:	bgt	22218 <__assert_fail@plt+0x10d68>
   2220c:	ldr	r1, [r4, #48]	; 0x30
   22210:	cmp	r0, r1
   22214:	blt	22230 <__assert_fail@plt+0x10d80>
   22218:	ldr	r0, [r4, #28]
   2221c:	cmp	r0, r6
   22220:	bgt	22248 <__assert_fail@plt+0x10d98>
   22224:	ldr	r1, [r4, #48]	; 0x30
   22228:	cmp	r0, r1
   2222c:	bge	22248 <__assert_fail@plt+0x10d98>
   22230:	add	r1, r6, #1
   22234:	mov	r0, r4
   22238:	bl	21a30 <__assert_fail@plt+0x10580>
   2223c:	mov	r5, r0
   22240:	cmp	r0, #0
   22244:	bne	22110 <__assert_fail@plt+0x10c60>
   22248:	mov	r5, #0
   2224c:	cmp	r6, r7
   22250:	ble	22110 <__assert_fail@plt+0x10c60>
   22254:	sub	r0, r6, r7
   22258:	mov	r1, #0
   2225c:	mov	r5, #0
   22260:	lsl	r2, r0, #2
   22264:	ldr	r0, [r4, #100]	; 0x64
   22268:	add	r0, r0, r7, lsl #2
   2226c:	add	r0, r0, #4
   22270:	bl	113cc <memset@plt>
   22274:	str	r6, [r4, #104]	; 0x68
   22278:	b	22110 <__assert_fail@plt+0x10c60>
   2227c:	ldr	r0, [r4, #116]	; 0x74
   22280:	bl	29220 <__assert_fail@plt+0x17d70>
   22284:	mov	r5, #12
   22288:	b	22110 <__assert_fail@plt+0x10c60>
   2228c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22290:	add	fp, sp, #28
   22294:	sub	sp, sp, #84	; 0x54
   22298:	ldr	r7, [r0, #84]	; 0x54
   2229c:	mov	ip, r1
   222a0:	mov	r1, #0
   222a4:	mov	lr, r2
   222a8:	mov	r9, r3
   222ac:	str	r0, [sp, #44]	; 0x2c
   222b0:	str	r1, [fp, #-52]	; 0xffffffcc
   222b4:	ldr	r4, [ip, #4]
   222b8:	ldr	r1, [r7]
   222bc:	str	r7, [sp, #24]
   222c0:	ldr	sl, [r1, r2, lsl #3]
   222c4:	ldr	r1, [r0, #120]	; 0x78
   222c8:	ldr	r2, [fp, #12]
   222cc:	add	r2, r1, r2
   222d0:	cmp	r4, r2
   222d4:	str	sl, [sp, #20]
   222d8:	ble	22be8 <__assert_fail@plt+0x11738>
   222dc:	ldr	r2, [r0, #100]	; 0x64
   222e0:	ldr	r5, [ip]
   222e4:	ldr	r4, [r0, #40]	; 0x28
   222e8:	ldr	r1, [r0, #88]	; 0x58
   222ec:	str	r2, [sp, #8]
   222f0:	ldr	r2, [ip, #8]
   222f4:	cmp	r5, #0
   222f8:	str	r4, [sp, #12]
   222fc:	moveq	r5, r9
   22300:	cmp	r5, #0
   22304:	str	r2, [r0, #100]	; 0x64
   22308:	str	r5, [r0, #40]	; 0x28
   2230c:	ble	22c58 <__assert_fail@plt+0x117a8>
   22310:	ldr	r2, [r0, #48]	; 0x30
   22314:	sub	r3, r5, #1
   22318:	cmp	r2, r3
   2231c:	beq	22c60 <__assert_fail@plt+0x117b0>
   22320:	ldr	r1, [r0, #80]	; 0x50
   22324:	cmp	r1, #2
   22328:	blt	22354 <__assert_fail@plt+0x10ea4>
   2232c:	ldr	r1, [r0, #8]
   22330:	ldr	r6, [r1, r3, lsl #2]
   22334:	cmn	r6, #1
   22338:	bne	22384 <__assert_fail@plt+0x10ed4>
   2233c:	sub	r3, r3, #1
   22340:	cmn	r3, #1
   22344:	bne	22330 <__assert_fail@plt+0x10e80>
   22348:	ldr	r0, [sp, #44]	; 0x2c
   2234c:	ldr	r8, [r0, #60]	; 0x3c
   22350:	b	223b4 <__assert_fail@plt+0x10f04>
   22354:	ldr	r1, [r0, #4]
   22358:	ldr	r2, [r0, #68]	; 0x44
   2235c:	mov	r8, #1
   22360:	ldrb	r0, [r1, r3]
   22364:	ubfx	r1, r0, #5, #3
   22368:	ldr	r1, [r2, r1, lsl #2]
   2236c:	and	r2, r0, #31
   22370:	tst	r1, r8, lsl r2
   22374:	moveq	r8, #0
   22378:	cmpeq	r0, #10
   2237c:	bne	223b4 <__assert_fail@plt+0x10f04>
   22380:	b	223a0 <__assert_fail@plt+0x10ef0>
   22384:	ldr	r0, [sp, #44]	; 0x2c
   22388:	ldrb	r0, [r0, #78]	; 0x4e
   2238c:	cmp	r0, #0
   22390:	bne	22c94 <__assert_fail@plt+0x117e4>
   22394:	mov	r8, #0
   22398:	cmp	r6, #10
   2239c:	bne	223b4 <__assert_fail@plt+0x10f04>
   223a0:	ldr	r0, [sp, #44]	; 0x2c
   223a4:	ldrb	r0, [r0, #77]	; 0x4d
   223a8:	cmp	r0, #0
   223ac:	movwne	r0, #1
   223b0:	lsl	r8, r0, #1
   223b4:	cmp	r5, r9
   223b8:	str	ip, [sp, #16]
   223bc:	bne	22480 <__assert_fail@plt+0x10fd0>
   223c0:	mov	r0, #1
   223c4:	mov	r6, lr
   223c8:	str	r0, [sp, #52]	; 0x34
   223cc:	str	r0, [sp, #48]	; 0x30
   223d0:	mov	r0, #4
   223d4:	bl	29054 <__assert_fail@plt+0x17ba4>
   223d8:	cmp	r0, #0
   223dc:	str	r0, [sp, #56]	; 0x38
   223e0:	beq	22c7c <__assert_fail@plt+0x117cc>
   223e4:	ldr	r3, [fp, #16]
   223e8:	str	r6, [r0]
   223ec:	mov	r0, #0
   223f0:	add	r1, sp, #48	; 0x30
   223f4:	mov	r2, sl
   223f8:	str	r0, [fp, #-52]	; 0xffffffcc
   223fc:	mov	r0, r7
   22400:	bl	22cd0 <__assert_fail@plt+0x11820>
   22404:	cmp	r0, #0
   22408:	str	r0, [fp, #-52]	; 0xffffffcc
   2240c:	bne	22c6c <__assert_fail@plt+0x117bc>
   22410:	ldr	r0, [sp, #52]	; 0x34
   22414:	ldr	r9, [sp, #44]	; 0x2c
   22418:	cmp	r0, #0
   2241c:	beq	22448 <__assert_fail@plt+0x10f98>
   22420:	ldr	r0, [fp, #16]
   22424:	ldr	r3, [sp, #20]
   22428:	add	r1, sp, #48	; 0x30
   2242c:	mov	r2, r5
   22430:	str	r0, [sp]
   22434:	mov	r0, r9
   22438:	bl	22e08 <__assert_fail@plt+0x11958>
   2243c:	cmp	r0, #0
   22440:	str	r0, [fp, #-52]	; 0xffffffcc
   22444:	bne	22c6c <__assert_fail@plt+0x117bc>
   22448:	ldr	r1, [sp, #24]
   2244c:	sub	r0, fp, #52	; 0x34
   22450:	add	r2, sp, #48	; 0x30
   22454:	mov	r3, r8
   22458:	bl	1ff18 <__assert_fail@plt+0xea68>
   2245c:	mov	r6, r0
   22460:	cmp	r0, #0
   22464:	bne	22474 <__assert_fail@plt+0x10fc4>
   22468:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2246c:	cmp	r0, #0
   22470:	bne	22bc4 <__assert_fail@plt+0x11714>
   22474:	ldr	r0, [r9, #100]	; 0x64
   22478:	str	r6, [r0, r5, lsl #2]
   2247c:	b	22514 <__assert_fail@plt+0x11064>
   22480:	ldr	r9, [sp, #44]	; 0x2c
   22484:	ldr	r0, [r9, #100]	; 0x64
   22488:	ldr	r6, [r0, r5, lsl #2]
   2248c:	cmp	r6, #0
   22490:	beq	224b4 <__assert_fail@plt+0x11004>
   22494:	ldrb	r0, [r6, #52]	; 0x34
   22498:	tst	r0, #64	; 0x40
   2249c:	bne	224c8 <__assert_fail@plt+0x11018>
   224a0:	mov	r0, #0
   224a4:	str	r0, [sp, #52]	; 0x34
   224a8:	str	r0, [sp, #48]	; 0x30
   224ac:	str	r0, [sp, #56]	; 0x38
   224b0:	b	22514 <__assert_fail@plt+0x11064>
   224b4:	mov	r6, #0
   224b8:	str	r6, [sp, #52]	; 0x34
   224bc:	str	r6, [sp, #48]	; 0x30
   224c0:	str	r6, [sp, #56]	; 0x38
   224c4:	b	22514 <__assert_fail@plt+0x11064>
   224c8:	ldr	r0, [r6, #8]
   224cc:	cmp	r0, #1
   224d0:	str	r0, [sp, #52]	; 0x34
   224d4:	blt	22b88 <__assert_fail@plt+0x116d8>
   224d8:	str	r0, [sp, #48]	; 0x30
   224dc:	lsl	r0, r0, #2
   224e0:	bl	29054 <__assert_fail@plt+0x17ba4>
   224e4:	cmp	r0, #0
   224e8:	str	r0, [sp, #56]	; 0x38
   224ec:	beq	22c7c <__assert_fail@plt+0x117cc>
   224f0:	ldr	r2, [r6, #8]
   224f4:	ldr	r1, [r6, #12]
   224f8:	lsl	r2, r2, #2
   224fc:	bl	11258 <memcpy@plt>
   22500:	ldrb	r0, [r6, #52]	; 0x34
   22504:	mov	r1, #0
   22508:	str	r1, [fp, #-52]	; 0xffffffcc
   2250c:	tst	r0, #64	; 0x40
   22510:	bne	22420 <__assert_fail@plt+0x10f70>
   22514:	ldr	r4, [fp, #12]
   22518:	cmp	r5, r4
   2251c:	bge	22ae0 <__assert_fail@plt+0x11630>
   22520:	ldr	r7, [sp, #24]
   22524:	ldr	sl, [sp, #20]
   22528:	ldr	r4, [fp, #16]
   2252c:	add	r8, sp, #48	; 0x30
   22530:	mov	r0, #0
   22534:	str	r6, [sp, #40]	; 0x28
   22538:	b	22568 <__assert_fail@plt+0x110b8>
   2253c:	ldr	r1, [sp, #40]	; 0x28
   22540:	ldr	r0, [r9, #100]	; 0x64
   22544:	ldr	r5, [sp, #28]
   22548:	str	r1, [r0, r5, lsl #2]
   2254c:	cmp	r1, #0
   22550:	ldr	r1, [sp, #32]
   22554:	mov	r0, #0
   22558:	addeq	r0, r1, #1
   2255c:	ldr	r1, [fp, #12]
   22560:	cmp	r5, r1
   22564:	beq	22adc <__assert_fail@plt+0x1162c>
   22568:	str	r0, [sp, #32]
   2256c:	ldr	r0, [r9, #120]	; 0x78
   22570:	ldr	r1, [sp, #32]
   22574:	cmp	r1, r0
   22578:	bgt	22ae0 <__assert_fail@plt+0x11630>
   2257c:	mov	r0, #0
   22580:	add	r1, r5, #1
   22584:	str	r0, [sp, #52]	; 0x34
   22588:	str	r1, [sp, #28]
   2258c:	ldr	r0, [r9, #100]	; 0x64
   22590:	ldr	r0, [r0, r1, lsl #2]
   22594:	cmp	r0, #0
   22598:	beq	225b4 <__assert_fail@plt+0x11104>
   2259c:	add	r1, r0, #4
   225a0:	mov	r0, r8
   225a4:	bl	1fc18 <__assert_fail@plt+0xe768>
   225a8:	cmp	r0, #0
   225ac:	str	r0, [fp, #-52]	; 0xffffffcc
   225b0:	bne	22bc4 <__assert_fail@plt+0x11714>
   225b4:	ldr	r1, [sp, #40]	; 0x28
   225b8:	cmp	r1, #0
   225bc:	beq	22994 <__assert_fail@plt+0x114e4>
   225c0:	mov	r0, #0
   225c4:	ldr	r8, [r9, #84]	; 0x54
   225c8:	str	r0, [fp, #-32]	; 0xffffffe0
   225cc:	str	r0, [fp, #-44]	; 0xffffffd4
   225d0:	str	r0, [fp, #-48]	; 0xffffffd0
   225d4:	str	r0, [fp, #-40]	; 0xffffffd8
   225d8:	ldr	r1, [r1, #20]
   225dc:	cmp	r1, #1
   225e0:	blt	22980 <__assert_fail@plt+0x114d0>
   225e4:	ldr	r7, [sp, #40]	; 0x28
   225e8:	mov	r4, #0
   225ec:	b	22620 <__assert_fail@plt+0x11170>
   225f0:	ldr	r1, [sp, #52]	; 0x34
   225f4:	cmp	r1, #0
   225f8:	bne	2279c <__assert_fail@plt+0x112ec>
   225fc:	ldr	r0, [sp, #56]	; 0x38
   22600:	str	r6, [r0]
   22604:	ldr	r0, [sp, #52]	; 0x34
   22608:	add	r0, r0, #1
   2260c:	str	r0, [sp, #52]	; 0x34
   22610:	ldr	r0, [r7, #20]
   22614:	add	r4, r4, #1
   22618:	cmp	r4, r0
   2261c:	bge	22974 <__assert_fail@plt+0x114c4>
   22620:	ldr	r0, [r7, #24]
   22624:	ldr	sl, [r0, r4, lsl #2]
   22628:	ldr	r0, [r8]
   2262c:	add	r1, r0, sl, lsl #3
   22630:	ldrb	r1, [r1, #6]
   22634:	tst	r1, #16
   22638:	beq	22748 <__assert_fail@plt+0x11298>
   2263c:	mov	r0, r8
   22640:	mov	r1, sl
   22644:	mov	r2, r9
   22648:	mov	r3, r5
   2264c:	bl	237e8 <__assert_fail@plt+0x12338>
   22650:	mov	r9, r0
   22654:	cmp	r0, #2
   22658:	blt	22734 <__assert_fail@plt+0x11284>
   2265c:	ldr	r0, [sp, #44]	; 0x2c
   22660:	ldr	r1, [r8, #12]
   22664:	add	r6, r9, r5
   22668:	ldr	r0, [r0, #100]	; 0x64
   2266c:	ldr	r1, [r1, sl, lsl #2]
   22670:	ldr	r0, [r0, r6, lsl #2]
   22674:	str	r1, [sp, #36]	; 0x24
   22678:	mov	r1, #0
   2267c:	str	r1, [fp, #-44]	; 0xffffffd4
   22680:	cmp	r0, #0
   22684:	beq	226a0 <__assert_fail@plt+0x111f0>
   22688:	add	r1, r0, #4
   2268c:	sub	r0, fp, #48	; 0x30
   22690:	bl	1fc18 <__assert_fail@plt+0xe768>
   22694:	cmp	r0, #0
   22698:	str	r0, [fp, #-32]	; 0xffffffe0
   2269c:	bne	22bb4 <__assert_fail@plt+0x11704>
   226a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   226a4:	cmp	r2, #0
   226a8:	beq	226d4 <__assert_fail@plt+0x11224>
   226ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   226b0:	ldr	r7, [sp, #36]	; 0x24
   226b4:	cmp	r1, #0
   226b8:	bne	22884 <__assert_fail@plt+0x113d4>
   226bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   226c0:	str	r7, [r0]
   226c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   226c8:	add	r0, r0, #1
   226cc:	str	r0, [fp, #-44]	; 0xffffffd4
   226d0:	b	226fc <__assert_fail@plt+0x1124c>
   226d4:	mov	r0, #1
   226d8:	str	r0, [fp, #-44]	; 0xffffffd4
   226dc:	str	r0, [fp, #-48]	; 0xffffffd0
   226e0:	mov	r0, #4
   226e4:	bl	29054 <__assert_fail@plt+0x17ba4>
   226e8:	ldr	r1, [sp, #36]	; 0x24
   226ec:	cmp	r0, #0
   226f0:	str	r0, [fp, #-40]	; 0xffffffd8
   226f4:	beq	22bd4 <__assert_fail@plt+0x11724>
   226f8:	str	r1, [r0]
   226fc:	sub	r0, fp, #32
   22700:	mov	r1, r8
   22704:	sub	r2, fp, #48	; 0x30
   22708:	bl	234d0 <__assert_fail@plt+0x12020>
   2270c:	ldr	r2, [sp, #44]	; 0x2c
   22710:	ldr	r1, [r2, #100]	; 0x64
   22714:	str	r0, [r1, r6, lsl #2]
   22718:	ldr	r0, [r2, #100]	; 0x64
   2271c:	ldr	r0, [r0, r6, lsl #2]
   22720:	cmp	r0, #0
   22724:	bne	22734 <__assert_fail@plt+0x11284>
   22728:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2272c:	cmp	r7, #0
   22730:	bne	22bb8 <__assert_fail@plt+0x11708>
   22734:	cmp	r9, #0
   22738:	ldr	r9, [sp, #44]	; 0x2c
   2273c:	ldr	r7, [sp, #40]	; 0x28
   22740:	bne	22760 <__assert_fail@plt+0x112b0>
   22744:	ldr	r0, [r8]
   22748:	add	r1, r0, sl, lsl #3
   2274c:	mov	r0, r9
   22750:	mov	r2, r5
   22754:	bl	23b4c <__assert_fail@plt+0x1269c>
   22758:	cmp	r0, #0
   2275c:	beq	22610 <__assert_fail@plt+0x11160>
   22760:	ldr	r0, [r8, #12]
   22764:	ldr	r2, [sp, #48]	; 0x30
   22768:	ldr	r6, [r0, sl, lsl #2]
   2276c:	cmp	r2, #0
   22770:	bne	225f0 <__assert_fail@plt+0x11140>
   22774:	mov	r0, #1
   22778:	str	r0, [sp, #52]	; 0x34
   2277c:	str	r0, [sp, #48]	; 0x30
   22780:	mov	r0, #4
   22784:	bl	29054 <__assert_fail@plt+0x17ba4>
   22788:	cmp	r0, #0
   2278c:	str	r0, [sp, #56]	; 0x38
   22790:	beq	22ba0 <__assert_fail@plt+0x116f0>
   22794:	str	r6, [r0]
   22798:	b	22610 <__assert_fail@plt+0x11160>
   2279c:	cmp	r2, r1
   227a0:	bne	227cc <__assert_fail@plt+0x1131c>
   227a4:	lsl	r0, r2, #1
   227a8:	lsl	r1, r2, #3
   227ac:	str	r0, [sp, #48]	; 0x30
   227b0:	ldr	r0, [sp, #56]	; 0x38
   227b4:	bl	29084 <__assert_fail@plt+0x17bd4>
   227b8:	cmp	r0, #0
   227bc:	beq	22bac <__assert_fail@plt+0x116fc>
   227c0:	str	r0, [sp, #56]	; 0x38
   227c4:	ldr	r1, [sp, #52]	; 0x34
   227c8:	b	227d0 <__assert_fail@plt+0x11320>
   227cc:	ldr	r0, [sp, #56]	; 0x38
   227d0:	ldr	r2, [r0]
   227d4:	cmp	r2, r6
   227d8:	ble	2284c <__assert_fail@plt+0x1139c>
   227dc:	cmp	r1, #1
   227e0:	blt	2287c <__assert_fail@plt+0x113cc>
   227e4:	ands	r7, r1, #3
   227e8:	sub	ip, r1, #1
   227ec:	beq	22810 <__assert_fail@plt+0x11360>
   227f0:	add	lr, r0, r1, lsl #2
   227f4:	mov	r3, lr
   227f8:	ldr	r2, [r3, #-4]!
   227fc:	subs	r7, r7, #1
   22800:	sub	r1, r1, #1
   22804:	str	r2, [lr]
   22808:	mov	lr, r3
   2280c:	bne	227f8 <__assert_fail@plt+0x11348>
   22810:	cmp	ip, #3
   22814:	bcc	22840 <__assert_fail@plt+0x11390>
   22818:	add	r2, r0, r1, lsl #2
   2281c:	sub	r2, r2, #8
   22820:	sub	lr, r2, #8
   22824:	sub	r1, r1, #4
   22828:	sub	sl, r2, #4
   2282c:	sub	r2, r2, #16
   22830:	ldm	lr, {r3, r7, ip, lr}
   22834:	cmp	r1, #0
   22838:	stm	sl, {r3, r7, ip, lr}
   2283c:	bgt	22820 <__assert_fail@plt+0x11370>
   22840:	ldr	r7, [sp, #40]	; 0x28
   22844:	mov	r1, #0
   22848:	b	2287c <__assert_fail@plt+0x113cc>
   2284c:	add	r2, r0, r1, lsl #2
   22850:	ldr	r3, [r2, #-4]
   22854:	cmp	r3, r6
   22858:	ble	2287c <__assert_fail@plt+0x113cc>
   2285c:	sub	r1, r1, #2
   22860:	str	r3, [r2]
   22864:	sub	r1, r1, #1
   22868:	ldr	r3, [r2, #-8]
   2286c:	sub	r2, r2, #4
   22870:	cmp	r3, r6
   22874:	bgt	22860 <__assert_fail@plt+0x113b0>
   22878:	add	r1, r1, #2
   2287c:	str	r6, [r0, r1, lsl #2]
   22880:	b	22604 <__assert_fail@plt+0x11154>
   22884:	cmp	r2, r1
   22888:	bne	228b4 <__assert_fail@plt+0x11404>
   2288c:	lsl	r0, r2, #1
   22890:	lsl	r1, r2, #3
   22894:	str	r0, [fp, #-48]	; 0xffffffd0
   22898:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2289c:	bl	29084 <__assert_fail@plt+0x17bd4>
   228a0:	cmp	r0, #0
   228a4:	beq	22bac <__assert_fail@plt+0x116fc>
   228a8:	str	r0, [fp, #-40]	; 0xffffffd8
   228ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   228b0:	b	228b8 <__assert_fail@plt+0x11408>
   228b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   228b8:	ldr	r2, [r0]
   228bc:	cmp	r2, r7
   228c0:	ble	2293c <__assert_fail@plt+0x1148c>
   228c4:	cmp	r1, #1
   228c8:	blt	2296c <__assert_fail@plt+0x114bc>
   228cc:	ands	r3, r1, #3
   228d0:	sub	ip, r1, #1
   228d4:	beq	228f8 <__assert_fail@plt+0x11448>
   228d8:	add	lr, r0, r1, lsl #2
   228dc:	mov	r7, lr
   228e0:	ldr	r2, [r7, #-4]!
   228e4:	subs	r3, r3, #1
   228e8:	sub	r1, r1, #1
   228ec:	str	r2, [lr]
   228f0:	mov	lr, r7
   228f4:	bne	228e0 <__assert_fail@plt+0x11430>
   228f8:	cmp	ip, #3
   228fc:	bcc	22930 <__assert_fail@plt+0x11480>
   22900:	add	r2, r0, r1, lsl #2
   22904:	sub	r2, r2, #8
   22908:	sub	lr, r2, #8
   2290c:	sub	r1, r1, #4
   22910:	ldm	lr, {r3, r7, ip, lr}
   22914:	cmp	r1, #0
   22918:	str	r3, [r2, #-4]
   2291c:	str	r7, [r2]
   22920:	str	ip, [r2, #4]
   22924:	str	lr, [r2, #8]
   22928:	sub	r2, r2, #16
   2292c:	bgt	22908 <__assert_fail@plt+0x11458>
   22930:	ldr	r7, [sp, #36]	; 0x24
   22934:	mov	r1, #0
   22938:	b	2296c <__assert_fail@plt+0x114bc>
   2293c:	add	r2, r0, r1, lsl #2
   22940:	ldr	r3, [r2, #-4]
   22944:	cmp	r3, r7
   22948:	ble	2296c <__assert_fail@plt+0x114bc>
   2294c:	sub	r1, r1, #2
   22950:	str	r3, [r2]
   22954:	sub	r1, r1, #1
   22958:	ldr	r3, [r2, #-8]
   2295c:	sub	r2, r2, #4
   22960:	cmp	r3, r7
   22964:	bgt	22950 <__assert_fail@plt+0x114a0>
   22968:	add	r1, r1, #2
   2296c:	str	r7, [r0, r1, lsl #2]
   22970:	b	226c4 <__assert_fail@plt+0x11214>
   22974:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22978:	ldr	r7, [sp, #24]
   2297c:	ldr	sl, [sp, #20]
   22980:	bl	29220 <__assert_fail@plt+0x17d70>
   22984:	ldr	r4, [fp, #16]
   22988:	mov	r0, #0
   2298c:	add	r8, sp, #48	; 0x30
   22990:	str	r0, [fp, #-52]	; 0xffffffcc
   22994:	ldr	r0, [sp, #52]	; 0x34
   22998:	cmp	r0, #0
   2299c:	beq	229e4 <__assert_fail@plt+0x11534>
   229a0:	mov	r0, r7
   229a4:	mov	r1, r8
   229a8:	mov	r2, sl
   229ac:	mov	r3, r4
   229b0:	bl	22cd0 <__assert_fail@plt+0x11820>
   229b4:	cmp	r0, #0
   229b8:	str	r0, [fp, #-52]	; 0xffffffcc
   229bc:	bne	22bc4 <__assert_fail@plt+0x11714>
   229c0:	ldr	r2, [sp, #28]
   229c4:	mov	r0, r9
   229c8:	mov	r1, r8
   229cc:	mov	r3, sl
   229d0:	str	r4, [sp]
   229d4:	bl	22e08 <__assert_fail@plt+0x11958>
   229d8:	cmp	r0, #0
   229dc:	str	r0, [fp, #-52]	; 0xffffffcc
   229e0:	bne	22bc4 <__assert_fail@plt+0x11714>
   229e4:	cmn	r5, #1
   229e8:	ble	22a20 <__assert_fail@plt+0x11570>
   229ec:	ldr	r0, [r9, #48]	; 0x30
   229f0:	cmp	r0, r5
   229f4:	beq	22aac <__assert_fail@plt+0x115fc>
   229f8:	ldr	r0, [r9, #80]	; 0x50
   229fc:	cmp	r0, #2
   22a00:	blt	22a28 <__assert_fail@plt+0x11578>
   22a04:	ldr	r0, [r9, #8]
   22a08:	ldr	r6, [r0, r5, lsl #2]
   22a0c:	cmn	r6, #1
   22a10:	bne	22a58 <__assert_fail@plt+0x115a8>
   22a14:	sub	r5, r5, #1
   22a18:	cmn	r5, #1
   22a1c:	bne	22a08 <__assert_fail@plt+0x11558>
   22a20:	ldr	r3, [r9, #60]	; 0x3c
   22a24:	b	22a80 <__assert_fail@plt+0x115d0>
   22a28:	ldr	r0, [r9, #4]
   22a2c:	ldr	r1, [r9, #68]	; 0x44
   22a30:	mov	r3, #1
   22a34:	ldrb	r0, [r0, r5]
   22a38:	ubfx	r2, r0, #5, #3
   22a3c:	ldr	r1, [r1, r2, lsl #2]
   22a40:	and	r2, r0, #31
   22a44:	tst	r1, r3, lsl r2
   22a48:	moveq	r3, #0
   22a4c:	cmpeq	r0, #10
   22a50:	bne	22a80 <__assert_fail@plt+0x115d0>
   22a54:	b	22a70 <__assert_fail@plt+0x115c0>
   22a58:	ldrb	r0, [r9, #78]	; 0x4e
   22a5c:	cmp	r0, #0
   22a60:	bne	22abc <__assert_fail@plt+0x1160c>
   22a64:	mov	r3, #0
   22a68:	cmp	r6, #10
   22a6c:	bne	22a80 <__assert_fail@plt+0x115d0>
   22a70:	ldrb	r0, [r9, #77]	; 0x4d
   22a74:	cmp	r0, #0
   22a78:	movwne	r0, #1
   22a7c:	lsl	r3, r0, #1
   22a80:	sub	r0, fp, #52	; 0x34
   22a84:	mov	r1, r7
   22a88:	mov	r2, r8
   22a8c:	bl	1ff18 <__assert_fail@plt+0xea68>
   22a90:	cmp	r0, #0
   22a94:	str	r0, [sp, #40]	; 0x28
   22a98:	bne	2253c <__assert_fail@plt+0x1108c>
   22a9c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22aa0:	cmp	r0, #0
   22aa4:	beq	2253c <__assert_fail@plt+0x1108c>
   22aa8:	b	22bc4 <__assert_fail@plt+0x11714>
   22aac:	ldr	r0, [r9, #88]	; 0x58
   22ab0:	and	r0, r0, #2
   22ab4:	eor	r3, r0, #10
   22ab8:	b	22a80 <__assert_fail@plt+0x115d0>
   22abc:	mov	r0, r6
   22ac0:	bl	113b4 <iswalnum@plt>
   22ac4:	mov	r3, #1
   22ac8:	cmp	r6, #95	; 0x5f
   22acc:	beq	22a80 <__assert_fail@plt+0x115d0>
   22ad0:	cmp	r0, #0
   22ad4:	beq	22a64 <__assert_fail@plt+0x115b4>
   22ad8:	b	22a80 <__assert_fail@plt+0x115d0>
   22adc:	ldr	r5, [fp, #12]
   22ae0:	ldr	r0, [sp, #56]	; 0x38
   22ae4:	bl	29220 <__assert_fail@plt+0x17d70>
   22ae8:	ldr	r0, [r9, #100]	; 0x64
   22aec:	ldr	r1, [fp, #12]
   22af0:	mov	sl, #1
   22af4:	ldr	r1, [r0, r1, lsl #2]
   22af8:	ldr	r0, [sp, #16]
   22afc:	str	r5, [r0]
   22b00:	ldr	r0, [sp, #12]
   22b04:	cmp	r1, #0
   22b08:	addne	r1, r1, #4
   22b0c:	str	r0, [r9, #40]	; 0x28
   22b10:	ldr	r0, [sp, #8]
   22b14:	str	r0, [r9, #100]	; 0x64
   22b18:	beq	22b7c <__assert_fail@plt+0x116cc>
   22b1c:	ldr	r2, [r1, #4]
   22b20:	cmp	r2, #1
   22b24:	blt	22b78 <__assert_fail@plt+0x116c8>
   22b28:	ldr	r0, [fp, #8]
   22b2c:	ldr	r1, [r1, #8]
   22b30:	subs	r2, r2, #1
   22b34:	mov	sl, #0
   22b38:	mov	r3, #0
   22b3c:	beq	22b68 <__assert_fail@plt+0x116b8>
   22b40:	mov	r3, #0
   22b44:	mov	r7, #1
   22b48:	add	r5, r3, r2
   22b4c:	lsr	r4, r5, #1
   22b50:	ldr	r6, [r1, r4, lsl #2]
   22b54:	cmp	r6, r0
   22b58:	addlt	r3, r7, r5, lsr #1
   22b5c:	movge	r2, r4
   22b60:	cmp	r3, r2
   22b64:	bcc	22b48 <__assert_fail@plt+0x11698>
   22b68:	ldr	r1, [r1, r3, lsl #2]
   22b6c:	cmp	r1, r0
   22b70:	movne	sl, #1
   22b74:	b	22b7c <__assert_fail@plt+0x116cc>
   22b78:	mov	sl, #1
   22b7c:	mov	r0, sl
   22b80:	sub	sp, fp, #28
   22b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b88:	mov	r0, #0
   22b8c:	str	r0, [sp, #52]	; 0x34
   22b90:	str	r0, [sp, #48]	; 0x30
   22b94:	str	r0, [sp, #56]	; 0x38
   22b98:	str	r0, [fp, #-52]	; 0xffffffcc
   22b9c:	b	22448 <__assert_fail@plt+0x10f98>
   22ba0:	mov	r0, #0
   22ba4:	str	r0, [sp, #48]	; 0x30
   22ba8:	str	r0, [sp, #52]	; 0x34
   22bac:	mov	r7, #12
   22bb0:	b	22bb8 <__assert_fail@plt+0x11708>
   22bb4:	mov	r7, r0
   22bb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22bbc:	bl	29220 <__assert_fail@plt+0x17d70>
   22bc0:	str	r7, [fp, #-52]	; 0xffffffcc
   22bc4:	ldr	r0, [sp, #56]	; 0x38
   22bc8:	bl	29220 <__assert_fail@plt+0x17d70>
   22bcc:	ldr	sl, [fp, #-52]	; 0xffffffcc
   22bd0:	b	22b7c <__assert_fail@plt+0x116cc>
   22bd4:	mov	r0, #0
   22bd8:	mov	r7, #12
   22bdc:	str	r0, [fp, #-48]	; 0xffffffd0
   22be0:	str	r0, [fp, #-44]	; 0xffffffd4
   22be4:	b	22bbc <__assert_fail@plt+0x1170c>
   22be8:	mvn	r1, #-2147483648	; 0x80000000
   22bec:	mov	sl, #12
   22bf0:	sub	r1, r1, r4
   22bf4:	cmp	r1, r2
   22bf8:	ble	22b7c <__assert_fail@plt+0x116cc>
   22bfc:	add	r8, r2, #1
   22c00:	str	lr, [sp, #40]	; 0x28
   22c04:	add	r5, r8, r4
   22c08:	cmn	r5, #-1073741823	; 0xc0000001
   22c0c:	bhi	22b7c <__assert_fail@plt+0x116cc>
   22c10:	ldr	r0, [ip, #8]
   22c14:	lsl	r1, r5, #2
   22c18:	mov	r6, ip
   22c1c:	bl	29084 <__assert_fail@plt+0x17bd4>
   22c20:	cmp	r0, #0
   22c24:	beq	22b7c <__assert_fail@plt+0x116cc>
   22c28:	str	r5, [r6, #4]
   22c2c:	str	r0, [r6, #8]
   22c30:	add	r0, r0, r4, lsl #2
   22c34:	lsl	r2, r8, #2
   22c38:	mov	r1, #0
   22c3c:	bl	113cc <memset@plt>
   22c40:	ldr	r0, [sp, #44]	; 0x2c
   22c44:	ldr	r7, [sp, #24]
   22c48:	ldr	sl, [sp, #20]
   22c4c:	ldr	lr, [sp, #40]	; 0x28
   22c50:	mov	ip, r6
   22c54:	b	222dc <__assert_fail@plt+0x10e2c>
   22c58:	ldr	r8, [r0, #60]	; 0x3c
   22c5c:	b	223b4 <__assert_fail@plt+0x10f04>
   22c60:	and	r0, r1, #2
   22c64:	eor	r8, r0, #10
   22c68:	b	223b4 <__assert_fail@plt+0x10f04>
   22c6c:	mov	sl, r0
   22c70:	ldr	r0, [sp, #56]	; 0x38
   22c74:	bl	29220 <__assert_fail@plt+0x17d70>
   22c78:	b	22b7c <__assert_fail@plt+0x116cc>
   22c7c:	mov	r0, #0
   22c80:	mov	sl, #12
   22c84:	str	r0, [sp, #48]	; 0x30
   22c88:	str	r0, [sp, #52]	; 0x34
   22c8c:	str	sl, [fp, #-52]	; 0xffffffcc
   22c90:	b	22b7c <__assert_fail@plt+0x116cc>
   22c94:	mov	r0, r6
   22c98:	str	lr, [sp, #40]	; 0x28
   22c9c:	mov	r4, ip
   22ca0:	bl	113b4 <iswalnum@plt>
   22ca4:	mov	r8, #1
   22ca8:	cmp	r6, #95	; 0x5f
   22cac:	beq	22cc4 <__assert_fail@plt+0x11814>
   22cb0:	ldr	lr, [sp, #40]	; 0x28
   22cb4:	cmp	r0, #0
   22cb8:	mov	ip, r4
   22cbc:	beq	22394 <__assert_fail@plt+0x10ee4>
   22cc0:	b	223b4 <__assert_fail@plt+0x10f04>
   22cc4:	ldr	lr, [sp, #40]	; 0x28
   22cc8:	mov	ip, r4
   22ccc:	b	223b4 <__assert_fail@plt+0x10f04>
   22cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22cd4:	add	fp, sp, #28
   22cd8:	sub	sp, sp, #20
   22cdc:	str	r0, [sp, #4]
   22ce0:	ldr	r0, [r1, #4]
   22ce4:	mov	sl, r1
   22ce8:	mov	r1, #0
   22cec:	mov	r5, r3
   22cf0:	mov	r8, r2
   22cf4:	str	r1, [sp, #12]
   22cf8:	str	r0, [sp, #8]
   22cfc:	lsl	r0, r0, #2
   22d00:	bl	29054 <__assert_fail@plt+0x17ba4>
   22d04:	cmp	r0, #0
   22d08:	str	r0, [sp, #16]
   22d0c:	beq	22e00 <__assert_fail@plt+0x11950>
   22d10:	ldr	r0, [sl, #4]
   22d14:	cmp	r0, #1
   22d18:	blt	22dc8 <__assert_fail@plt+0x11918>
   22d1c:	mov	r9, #0
   22d20:	ldr	r0, [sl, #8]
   22d24:	ldr	r1, [sp, #4]
   22d28:	ldr	r2, [r0, r9, lsl #2]
   22d2c:	ldr	r1, [r1, #24]
   22d30:	add	r0, r2, r2, lsl #1
   22d34:	add	r1, r1, r0, lsl #2
   22d38:	ldr	r0, [r1, #4]
   22d3c:	cmp	r0, #1
   22d40:	blt	22da8 <__assert_fail@plt+0x118f8>
   22d44:	ldr	r7, [sp, #4]
   22d48:	ldr	r3, [r1, #8]
   22d4c:	ldr	r7, [r7]
   22d50:	b	22d60 <__assert_fail@plt+0x118b0>
   22d54:	add	r3, r3, #4
   22d58:	subs	r0, r0, #1
   22d5c:	beq	22da8 <__assert_fail@plt+0x118f8>
   22d60:	ldr	r6, [r3]
   22d64:	add	r4, r7, r6, lsl #3
   22d68:	ldrb	r4, [r4, #4]
   22d6c:	cmp	r4, r5
   22d70:	bne	22d54 <__assert_fail@plt+0x118a4>
   22d74:	ldr	r4, [r7, r6, lsl #3]
   22d78:	cmp	r4, r8
   22d7c:	bne	22d54 <__assert_fail@plt+0x118a4>
   22d80:	cmn	r6, #1
   22d84:	beq	22da8 <__assert_fail@plt+0x118f8>
   22d88:	ldr	r0, [sp, #4]
   22d8c:	add	r1, sp, #8
   22d90:	mov	r3, r8
   22d94:	str	r5, [sp]
   22d98:	bl	23398 <__assert_fail@plt+0x11ee8>
   22d9c:	cmp	r0, #0
   22da0:	beq	22db8 <__assert_fail@plt+0x11908>
   22da4:	b	22df0 <__assert_fail@plt+0x11940>
   22da8:	add	r0, sp, #8
   22dac:	bl	1fc18 <__assert_fail@plt+0xe768>
   22db0:	cmp	r0, #0
   22db4:	bne	22df0 <__assert_fail@plt+0x11940>
   22db8:	ldr	r0, [sl, #4]
   22dbc:	add	r9, r9, #1
   22dc0:	cmp	r9, r0
   22dc4:	blt	22d20 <__assert_fail@plt+0x11870>
   22dc8:	ldr	r0, [sl, #8]
   22dcc:	bl	29220 <__assert_fail@plt+0x17d70>
   22dd0:	vldr	d16, [sp, #8]
   22dd4:	ldr	r0, [sp, #16]
   22dd8:	mov	r7, #0
   22ddc:	str	r0, [sl, #8]
   22de0:	vstr	d16, [sl]
   22de4:	mov	r0, r7
   22de8:	sub	sp, fp, #28
   22dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22df0:	mov	r7, r0
   22df4:	ldr	r0, [sp, #16]
   22df8:	bl	29220 <__assert_fail@plt+0x17d70>
   22dfc:	b	22de4 <__assert_fail@plt+0x11934>
   22e00:	mov	r7, #12
   22e04:	b	22de4 <__assert_fail@plt+0x11934>
   22e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e0c:	add	fp, sp, #28
   22e10:	sub	sp, sp, #52	; 0x34
   22e14:	ldr	ip, [r0, #108]	; 0x6c
   22e18:	mov	lr, r1
   22e1c:	ldr	r1, [r0, #84]	; 0x54
   22e20:	str	r0, [sp, #24]
   22e24:	mov	sl, r2
   22e28:	mov	r8, #0
   22e2c:	mov	r0, #0
   22e30:	cmp	ip, #1
   22e34:	str	r1, [sp, #28]
   22e38:	blt	22e7c <__assert_fail@plt+0x119cc>
   22e3c:	ldr	r0, [sp, #24]
   22e40:	mov	r7, #1
   22e44:	mov	r1, ip
   22e48:	ldr	r2, [r0, #116]	; 0x74
   22e4c:	mov	r0, #0
   22e50:	add	r6, r1, r0
   22e54:	add	r6, r6, r6, lsr #31
   22e58:	asr	r4, r6, #1
   22e5c:	add	r5, r4, r4, lsl #1
   22e60:	add	r5, r2, r5, lsl #3
   22e64:	ldr	r5, [r5, #4]
   22e68:	cmp	r5, sl
   22e6c:	addlt	r0, r7, r6, asr #1
   22e70:	movge	r1, r4
   22e74:	cmp	r0, r1
   22e78:	blt	22e50 <__assert_fail@plt+0x119a0>
   22e7c:	cmp	r0, ip
   22e80:	bge	23384 <__assert_fail@plt+0x11ed4>
   22e84:	cmn	r0, #1
   22e88:	beq	23384 <__assert_fail@plt+0x11ed4>
   22e8c:	ldr	r1, [sp, #24]
   22e90:	add	r0, r0, r0, lsl #1
   22e94:	str	r0, [sp, #8]
   22e98:	ldr	r1, [r1, #116]	; 0x74
   22e9c:	add	r0, r1, r0, lsl #3
   22ea0:	ldr	r0, [r0, #4]
   22ea4:	cmp	r0, sl
   22ea8:	bne	23384 <__assert_fail@plt+0x11ed4>
   22eac:	str	r3, [sp, #12]
   22eb0:	mov	r9, #1
   22eb4:	str	lr, [sp, #16]
   22eb8:	ldr	r0, [sp, #8]
   22ebc:	add	r0, r1, r0, lsl #3
   22ec0:	b	22f60 <__assert_fail@plt+0x11ab0>
   22ec4:	mov	r0, #4
   22ec8:	str	r9, [sp, #36]	; 0x24
   22ecc:	mov	r4, r1
   22ed0:	str	r9, [sp, #32]
   22ed4:	bl	29054 <__assert_fail@plt+0x17ba4>
   22ed8:	cmp	r0, #0
   22edc:	str	r0, [sp, #40]	; 0x28
   22ee0:	beq	231f8 <__assert_fail@plt+0x11d48>
   22ee4:	str	r4, [r0]
   22ee8:	mov	r0, #0
   22eec:	str	r0, [fp, #-32]	; 0xffffffe0
   22ef0:	ldr	r1, [sp, #28]
   22ef4:	sub	r0, fp, #32
   22ef8:	add	r2, sp, #32
   22efc:	bl	234d0 <__assert_fail@plt+0x12020>
   22f00:	ldr	r4, [sp, #24]
   22f04:	ldr	r1, [r4, #100]	; 0x64
   22f08:	str	r0, [r1, r7, lsl #2]
   22f0c:	ldr	r0, [sp, #40]	; 0x28
   22f10:	bl	29220 <__assert_fail@plt+0x17d70>
   22f14:	ldr	r0, [r4, #100]	; 0x64
   22f18:	ldr	r1, [fp, #-32]	; 0xffffffe0
   22f1c:	ldr	r0, [r0, r7, lsl #2]
   22f20:	cmp	r1, #0
   22f24:	mov	r2, r1
   22f28:	movwne	r2, #1
   22f2c:	clz	r0, r0
   22f30:	lsr	r0, r0, #5
   22f34:	ands	r0, r0, r2
   22f38:	ldreq	r1, [sp, #20]
   22f3c:	str	r1, [sp, #20]
   22f40:	ldr	lr, [sp, #16]
   22f44:	cmp	r0, #0
   22f48:	cmpne	r0, #4
   22f4c:	bne	2336c <__assert_fail@plt+0x11ebc>
   22f50:	ldrb	r1, [r8, #20]
   22f54:	add	r0, r8, #24
   22f58:	cmp	r1, #0
   22f5c:	beq	23380 <__assert_fail@plt+0x11ed0>
   22f60:	mov	r8, r0
   22f64:	ldr	r0, [lr, #4]
   22f68:	cmp	r0, #1
   22f6c:	blt	22f50 <__assert_fail@plt+0x11aa0>
   22f70:	subs	r6, r0, #1
   22f74:	ldr	r2, [r8]
   22f78:	ldr	r0, [lr, #8]
   22f7c:	mov	r3, #0
   22f80:	beq	22fa8 <__assert_fail@plt+0x11af8>
   22f84:	mov	r1, r6
   22f88:	add	r7, r3, r1
   22f8c:	lsr	r5, r7, #1
   22f90:	ldr	r4, [r0, r5, lsl #2]
   22f94:	cmp	r4, r2
   22f98:	addlt	r3, r9, r7, lsr #1
   22f9c:	movge	r1, r5
   22fa0:	cmp	r3, r1
   22fa4:	bcc	22f88 <__assert_fail@plt+0x11ad8>
   22fa8:	ldr	r1, [r0, r3, lsl #2]
   22fac:	cmp	r1, r2
   22fb0:	bne	22f50 <__assert_fail@plt+0x11aa0>
   22fb4:	ldr	r3, [r8, #12]
   22fb8:	ldr	r1, [r8, #8]
   22fbc:	add	r3, r3, sl
   22fc0:	sub	r7, r3, r1
   22fc4:	cmp	r7, sl
   22fc8:	bne	230b4 <__assert_fail@plt+0x11c04>
   22fcc:	ldr	r1, [sp, #28]
   22fd0:	add	r2, r2, r2, lsl #1
   22fd4:	cmp	r6, #0
   22fd8:	ldr	r1, [r1, #20]
   22fdc:	add	r1, r1, r2, lsl #2
   22fe0:	mov	r2, #0
   22fe4:	ldr	r1, [r1, #8]
   22fe8:	ldr	r4, [r1]
   22fec:	beq	23010 <__assert_fail@plt+0x11b60>
   22ff0:	add	r1, r2, r6
   22ff4:	lsr	r3, r1, #1
   22ff8:	ldr	r7, [r0, r3, lsl #2]
   22ffc:	cmp	r7, r4
   23000:	addlt	r2, r9, r1, lsr #1
   23004:	movge	r6, r3
   23008:	cmp	r2, r6
   2300c:	bcc	22ff0 <__assert_fail@plt+0x11b40>
   23010:	ldr	r1, [r0, r2, lsl #2]
   23014:	mov	r0, #4
   23018:	cmp	r1, r4
   2301c:	beq	22f44 <__assert_fail@plt+0x11a94>
   23020:	mov	r0, #4
   23024:	str	r9, [sp, #36]	; 0x24
   23028:	str	r9, [sp, #32]
   2302c:	bl	29054 <__assert_fail@plt+0x17ba4>
   23030:	cmp	r0, #0
   23034:	str	r0, [sp, #40]	; 0x28
   23038:	beq	231e4 <__assert_fail@plt+0x11d34>
   2303c:	mov	r6, #0
   23040:	str	r4, [r0]
   23044:	ldr	r0, [sp, #28]
   23048:	ldr	r2, [sp, #12]
   2304c:	ldr	r3, [fp, #8]
   23050:	add	r4, sp, #32
   23054:	str	r6, [fp, #-32]	; 0xffffffe0
   23058:	mov	r1, r4
   2305c:	bl	22cd0 <__assert_fail@plt+0x11820>
   23060:	ldr	r5, [sp, #16]
   23064:	mov	r7, r0
   23068:	mov	r1, r4
   2306c:	mov	r0, r5
   23070:	bl	1fc18 <__assert_fail@plt+0xe768>
   23074:	mov	r4, r0
   23078:	ldr	r0, [sp, #40]	; 0x28
   2307c:	bl	29220 <__assert_fail@plt+0x17d70>
   23080:	orr	r0, r7, r6
   23084:	mov	lr, r5
   23088:	orrs	r0, r0, r4
   2308c:	mov	r0, #2
   23090:	beq	22f44 <__assert_fail@plt+0x11a94>
   23094:	cmp	r7, #0
   23098:	mov	r0, #1
   2309c:	movne	r4, r7
   230a0:	cmp	r6, #0
   230a4:	movne	r4, r6
   230a8:	str	r4, [fp, #-32]	; 0xffffffe0
   230ac:	str	r4, [sp, #20]
   230b0:	b	22f44 <__assert_fail@plt+0x11a94>
   230b4:	ldr	r0, [sp, #24]
   230b8:	ldr	r0, [r0, #100]	; 0x64
   230bc:	ldr	r5, [r0, r7, lsl #2]
   230c0:	ldr	r0, [sp, #28]
   230c4:	ldr	r0, [r0, #12]
   230c8:	cmp	r5, #0
   230cc:	ldr	r1, [r0, r2, lsl #2]
   230d0:	beq	22ec4 <__assert_fail@plt+0x11a14>
   230d4:	ldr	ip, [r5, #8]
   230d8:	cmp	ip, #0
   230dc:	ble	2319c <__assert_fail@plt+0x11cec>
   230e0:	ldr	r0, [r5, #12]
   230e4:	subs	r3, ip, #1
   230e8:	mov	r2, #0
   230ec:	str	r7, [sp, #4]
   230f0:	beq	23114 <__assert_fail@plt+0x11c64>
   230f4:	add	r6, r2, r3
   230f8:	lsr	r7, r6, #1
   230fc:	ldr	r4, [r0, r7, lsl #2]
   23100:	cmp	r4, r1
   23104:	addlt	r2, r9, r6, lsr #1
   23108:	movge	r3, r7
   2310c:	cmp	r2, r3
   23110:	bcc	230f4 <__assert_fail@plt+0x11c44>
   23114:	ldr	r2, [r0, r2, lsl #2]
   23118:	mov	r0, #4
   2311c:	cmp	r2, r1
   23120:	beq	22f44 <__assert_fail@plt+0x11a94>
   23124:	ldr	r7, [sp, #4]
   23128:	mov	r4, r1
   2312c:	cmp	ip, #1
   23130:	str	ip, [sp, #36]	; 0x24
   23134:	blt	231a4 <__assert_fail@plt+0x11cf4>
   23138:	lsl	r0, ip, #2
   2313c:	str	ip, [sp, #32]
   23140:	bl	29054 <__assert_fail@plt+0x17ba4>
   23144:	cmp	r0, #0
   23148:	str	r0, [sp, #40]	; 0x28
   2314c:	beq	2324c <__assert_fail@plt+0x11d9c>
   23150:	ldr	r2, [r5, #8]
   23154:	ldr	r1, [r5, #12]
   23158:	mov	r5, r0
   2315c:	lsl	r2, r2, #2
   23160:	bl	11258 <memcpy@plt>
   23164:	ldr	r1, [sp, #32]
   23168:	mov	r6, #0
   2316c:	str	r6, [fp, #-32]	; 0xffffffe0
   23170:	cmp	r1, #0
   23174:	beq	231b8 <__assert_fail@plt+0x11d08>
   23178:	ldr	r0, [sp, #36]	; 0x24
   2317c:	cmp	r0, #0
   23180:	bne	23260 <__assert_fail@plt+0x11db0>
   23184:	str	r4, [r5]
   23188:	str	r9, [sp, #36]	; 0x24
   2318c:	mov	r6, #0
   23190:	cmp	r6, #0
   23194:	beq	22ef0 <__assert_fail@plt+0x11a40>
   23198:	b	23224 <__assert_fail@plt+0x11d74>
   2319c:	mov	r4, r1
   231a0:	str	ip, [sp, #36]	; 0x24
   231a4:	mov	r6, #0
   231a8:	str	r6, [sp, #36]	; 0x24
   231ac:	str	r6, [sp, #32]
   231b0:	str	r6, [sp, #40]	; 0x28
   231b4:	str	r6, [fp, #-32]	; 0xffffffe0
   231b8:	mov	r0, #4
   231bc:	str	r9, [sp, #36]	; 0x24
   231c0:	str	r9, [sp, #32]
   231c4:	bl	29054 <__assert_fail@plt+0x17ba4>
   231c8:	cmp	r0, #0
   231cc:	str	r0, [sp, #40]	; 0x28
   231d0:	beq	23218 <__assert_fail@plt+0x11d68>
   231d4:	str	r4, [r0]
   231d8:	cmp	r6, #0
   231dc:	beq	22ef0 <__assert_fail@plt+0x11a40>
   231e0:	b	23224 <__assert_fail@plt+0x11d74>
   231e4:	mov	r0, #0
   231e8:	mov	r6, #12
   231ec:	str	r0, [sp, #32]
   231f0:	str	r0, [sp, #36]	; 0x24
   231f4:	b	23044 <__assert_fail@plt+0x11b94>
   231f8:	mov	r0, #0
   231fc:	mov	r1, #12
   23200:	str	r0, [sp, #32]
   23204:	str	r0, [sp, #36]	; 0x24
   23208:	mov	r0, #12
   2320c:	str	r1, [fp, #-32]	; 0xffffffe0
   23210:	str	r0, [sp, #20]
   23214:	b	23244 <__assert_fail@plt+0x11d94>
   23218:	mov	r0, #0
   2321c:	str	r0, [sp, #32]
   23220:	str	r0, [sp, #36]	; 0x24
   23224:	clz	r0, r6
   23228:	lsr	r4, r0, #5
   2322c:	ldr	r0, [sp, #40]	; 0x28
   23230:	bl	29220 <__assert_fail@plt+0x17d70>
   23234:	cmp	r4, #0
   23238:	movwne	r6, #12
   2323c:	str	r6, [sp, #20]
   23240:	str	r6, [fp, #-32]	; 0xffffffe0
   23244:	mov	r0, #1
   23248:	b	22f40 <__assert_fail@plt+0x11a90>
   2324c:	mov	r0, #0
   23250:	mov	r6, #12
   23254:	str	r0, [sp, #32]
   23258:	str	r0, [sp, #36]	; 0x24
   2325c:	b	231b4 <__assert_fail@plt+0x11d04>
   23260:	cmp	r1, r0
   23264:	bne	23290 <__assert_fail@plt+0x11de0>
   23268:	lsl	r0, r1, #1
   2326c:	lsl	r1, r1, #3
   23270:	str	r0, [sp, #32]
   23274:	mov	r0, r5
   23278:	bl	29084 <__assert_fail@plt+0x17bd4>
   2327c:	cmp	r0, #0
   23280:	beq	23364 <__assert_fail@plt+0x11eb4>
   23284:	str	r0, [sp, #40]	; 0x28
   23288:	mov	r5, r0
   2328c:	ldr	r0, [sp, #36]	; 0x24
   23290:	ldr	r1, [r5]
   23294:	cmp	r1, r4
   23298:	ble	2330c <__assert_fail@plt+0x11e5c>
   2329c:	cmp	r0, #1
   232a0:	blt	23340 <__assert_fail@plt+0x11e90>
   232a4:	ands	r2, r0, #3
   232a8:	sub	r1, r0, #1
   232ac:	beq	232d0 <__assert_fail@plt+0x11e20>
   232b0:	add	r6, r5, r0, lsl #2
   232b4:	mov	r3, r6
   232b8:	ldr	r7, [r3, #-4]!
   232bc:	subs	r2, r2, #1
   232c0:	sub	r0, r0, #1
   232c4:	str	r7, [r6]
   232c8:	mov	r6, r3
   232cc:	bne	232b8 <__assert_fail@plt+0x11e08>
   232d0:	cmp	r1, #3
   232d4:	bcc	23304 <__assert_fail@plt+0x11e54>
   232d8:	add	r1, r5, r0, lsl #2
   232dc:	sub	r1, r1, #8
   232e0:	ldr	r6, [r1, #4]
   232e4:	ldmda	r1, {r2, r3, r7}
   232e8:	sub	ip, r1, #4
   232ec:	sub	r0, r0, #4
   232f0:	cmp	r0, #0
   232f4:	stm	ip, {r2, r3, r7}
   232f8:	str	r6, [r1, #8]
   232fc:	sub	r1, r1, #16
   23300:	bgt	232e0 <__assert_fail@plt+0x11e30>
   23304:	mov	r0, #0
   23308:	b	23340 <__assert_fail@plt+0x11e90>
   2330c:	add	r1, r5, r0, lsl #2
   23310:	ldr	r2, [r1, #-4]
   23314:	cmp	r2, r4
   23318:	ble	23340 <__assert_fail@plt+0x11e90>
   2331c:	sub	r0, r0, #2
   23320:	mov	r3, r4
   23324:	str	r2, [r1]
   23328:	sub	r0, r0, #1
   2332c:	ldr	r2, [r1, #-8]
   23330:	sub	r1, r1, #4
   23334:	cmp	r2, r3
   23338:	bgt	23324 <__assert_fail@plt+0x11e74>
   2333c:	add	r0, r0, #2
   23340:	str	r4, [r5, r0, lsl #2]
   23344:	ldr	r7, [sp, #4]
   23348:	mov	r6, #0
   2334c:	ldr	r0, [sp, #36]	; 0x24
   23350:	add	r0, r0, #1
   23354:	str	r0, [sp, #36]	; 0x24
   23358:	cmp	r6, #0
   2335c:	beq	22ef0 <__assert_fail@plt+0x11a40>
   23360:	b	23224 <__assert_fail@plt+0x11d74>
   23364:	mov	r6, #0
   23368:	b	23224 <__assert_fail@plt+0x11d74>
   2336c:	cmp	r0, #2
   23370:	bne	23390 <__assert_fail@plt+0x11ee0>
   23374:	ldr	r0, [sp, #24]
   23378:	ldr	r1, [r0, #116]	; 0x74
   2337c:	b	22eb8 <__assert_fail@plt+0x11a08>
   23380:	mov	r8, #0
   23384:	mov	r0, r8
   23388:	sub	sp, fp, #28
   2338c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23390:	ldr	r8, [sp, #20]
   23394:	b	23384 <__assert_fail@plt+0x11ed4>
   23398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2339c:	add	fp, sp, #28
   233a0:	sub	sp, sp, #4
   233a4:	ldr	r4, [fp, #8]
   233a8:	mov	r9, r3
   233ac:	mov	r7, r2
   233b0:	mov	r8, r1
   233b4:	mov	sl, r0
   233b8:	mov	r5, #1
   233bc:	b	233d4 <__assert_fail@plt+0x11f24>
   233c0:	cmp	r2, #0
   233c4:	beq	234b8 <__assert_fail@plt+0x12008>
   233c8:	add	r0, r0, r7, lsl #2
   233cc:	ldr	r0, [r0, #8]
   233d0:	ldr	r7, [r0]
   233d4:	ldr	r0, [r8, #4]
   233d8:	cmp	r0, #1
   233dc:	blt	23424 <__assert_fail@plt+0x11f74>
   233e0:	subs	r2, r0, #1
   233e4:	ldr	r0, [r8, #8]
   233e8:	mov	ip, r4
   233ec:	mov	r1, #0
   233f0:	beq	23414 <__assert_fail@plt+0x11f64>
   233f4:	add	r3, r1, r2
   233f8:	lsr	r6, r3, #1
   233fc:	ldr	r4, [r0, r6, lsl #2]
   23400:	cmp	r4, r7
   23404:	addlt	r1, r5, r3, lsr #1
   23408:	movge	r2, r6
   2340c:	cmp	r1, r2
   23410:	bcc	233f4 <__assert_fail@plt+0x11f44>
   23414:	ldr	r0, [r0, r1, lsl #2]
   23418:	mov	r4, ip
   2341c:	cmp	r0, r7
   23420:	beq	234b8 <__assert_fail@plt+0x12008>
   23424:	ldr	r0, [sl]
   23428:	add	r1, r0, r7, lsl #3
   2342c:	ldrb	r1, [r1, #4]
   23430:	cmp	r1, r4
   23434:	bne	23444 <__assert_fail@plt+0x11f94>
   23438:	ldr	r0, [r0, r7, lsl #3]
   2343c:	cmp	r0, r9
   23440:	beq	2349c <__assert_fail@plt+0x11fec>
   23444:	mov	r0, r8
   23448:	mov	r1, r7
   2344c:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   23450:	cmp	r0, #0
   23454:	beq	234c4 <__assert_fail@plt+0x12014>
   23458:	ldr	r0, [sl, #20]
   2345c:	add	r7, r7, r7, lsl #1
   23460:	add	r1, r0, r7, lsl #2
   23464:	ldr	r2, [r1, #4]
   23468:	cmp	r2, #2
   2346c:	bne	233c0 <__assert_fail@plt+0x11f10>
   23470:	ldr	r0, [r1, #8]
   23474:	mov	r1, r8
   23478:	mov	r3, r9
   2347c:	ldr	r2, [r0, #4]
   23480:	mov	r0, sl
   23484:	str	r4, [sp]
   23488:	bl	23398 <__assert_fail@plt+0x11ee8>
   2348c:	cmp	r0, #0
   23490:	bne	234bc <__assert_fail@plt+0x1200c>
   23494:	ldr	r0, [sl, #20]
   23498:	b	233c8 <__assert_fail@plt+0x11f18>
   2349c:	cmp	r4, #9
   234a0:	bne	234b8 <__assert_fail@plt+0x12008>
   234a4:	mov	r0, r8
   234a8:	mov	r1, r7
   234ac:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   234b0:	cmp	r0, #0
   234b4:	beq	234c4 <__assert_fail@plt+0x12014>
   234b8:	mov	r0, #0
   234bc:	sub	sp, fp, #28
   234c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234c4:	mov	r0, #12
   234c8:	sub	sp, fp, #28
   234cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234d4:	add	fp, sp, #28
   234d8:	sub	sp, sp, #4
   234dc:	ldr	r9, [r2, #4]
   234e0:	cmp	r9, #0
   234e4:	beq	237a8 <__assert_fail@plt+0x122f8>
   234e8:	mov	r6, r2
   234ec:	mov	r8, r1
   234f0:	cmp	r9, #1
   234f4:	mov	r7, r9
   234f8:	blt	235e4 <__assert_fail@plt+0x12134>
   234fc:	ldr	ip, [r6, #8]
   23500:	mov	sl, #0
   23504:	cmp	r9, #4
   23508:	mov	r7, r9
   2350c:	bcc	235cc <__assert_fail@plt+0x1211c>
   23510:	mov	r3, #0
   23514:	bic	sl, r9, #3
   23518:	mov	r1, #1
   2351c:	str	r8, [sp]
   23520:	vdup.32	q8, r3
   23524:	sub	r4, sl, #4
   23528:	add	r1, r1, r4, lsr #2
   2352c:	cmp	r4, #12
   23530:	and	lr, r1, #3
   23534:	vmov.32	d16[0], r9
   23538:	bcc	2358c <__assert_fail@plt+0x120dc>
   2353c:	sub	r5, r1, lr
   23540:	mov	r3, #0
   23544:	mov	r4, #64	; 0x40
   23548:	mov	r7, ip
   2354c:	mov	r1, ip
   23550:	vld1.32	{d18-d19}, [r1], r4
   23554:	add	r8, r7, #16
   23558:	add	r2, r7, #32
   2355c:	subs	r5, r5, #4
   23560:	add	r3, r3, #16
   23564:	vld1.32	{d20-d21}, [r8]
   23568:	vadd.i32	q8, q9, q8
   2356c:	vld1.32	{d18-d19}, [r2]
   23570:	add	r2, r7, #48	; 0x30
   23574:	mov	r7, r1
   23578:	vadd.i32	q8, q10, q8
   2357c:	vld1.32	{d20-d21}, [r2]
   23580:	vadd.i32	q8, q9, q8
   23584:	vadd.i32	q8, q10, q8
   23588:	bne	23550 <__assert_fail@plt+0x120a0>
   2358c:	cmp	lr, #0
   23590:	beq	235ac <__assert_fail@plt+0x120fc>
   23594:	add	r1, ip, r3, lsl #2
   23598:	rsb	r3, lr, #0
   2359c:	vld1.32	{d18-d19}, [r1]!
   235a0:	adds	r3, r3, #1
   235a4:	vadd.i32	q8, q9, q8
   235a8:	bcc	2359c <__assert_fail@plt+0x120ec>
   235ac:	vext.8	q9, q8, q8, #8
   235b0:	ldr	r8, [sp]
   235b4:	cmp	r9, sl
   235b8:	vadd.i32	q8, q8, q9
   235bc:	vdup.32	q9, d16[1]
   235c0:	vadd.i32	q8, q8, q9
   235c4:	vmov.32	r7, d16[0]
   235c8:	beq	235e4 <__assert_fail@plt+0x12134>
   235cc:	add	r1, ip, sl, lsl #2
   235d0:	sub	r2, r9, sl
   235d4:	ldr	r3, [r1], #4
   235d8:	subs	r2, r2, #1
   235dc:	add	r7, r3, r7
   235e0:	bne	235d4 <__assert_fail@plt+0x12124>
   235e4:	ldr	r1, [r8, #68]	; 0x44
   235e8:	ldr	r2, [r8, #32]
   235ec:	str	r0, [sp]
   235f0:	and	r1, r1, r7
   235f4:	add	r3, r1, r1, lsl #1
   235f8:	ldr	r1, [r2, r3, lsl #2]
   235fc:	cmp	r1, #1
   23600:	blt	2367c <__assert_fail@plt+0x121cc>
   23604:	add	r2, r2, r3, lsl #2
   23608:	sub	ip, r9, #1
   2360c:	mov	r5, #0
   23610:	ldr	lr, [r2, #8]
   23614:	cmp	r6, #0
   23618:	bne	23630 <__assert_fail@plt+0x12180>
   2361c:	add	r5, r5, #1
   23620:	cmp	r5, r1
   23624:	bge	2367c <__assert_fail@plt+0x121cc>
   23628:	cmp	r6, #0
   2362c:	beq	2361c <__assert_fail@plt+0x1216c>
   23630:	ldr	r4, [lr, r5, lsl #2]
   23634:	ldr	r3, [r4]
   23638:	cmp	r7, r3
   2363c:	bne	2361c <__assert_fail@plt+0x1216c>
   23640:	ldr	r3, [r4, #8]
   23644:	cmp	r3, r9
   23648:	bne	2361c <__assert_fail@plt+0x1216c>
   2364c:	mov	r3, ip
   23650:	add	r0, r3, #1
   23654:	cmp	r0, #1
   23658:	blt	2379c <__assert_fail@plt+0x122ec>
   2365c:	ldr	r0, [r6, #8]
   23660:	ldr	r2, [r4, #12]
   23664:	ldr	r0, [r0, r3, lsl #2]
   23668:	ldr	r2, [r2, r3, lsl #2]
   2366c:	sub	r3, r3, #1
   23670:	cmp	r2, r0
   23674:	beq	23650 <__assert_fail@plt+0x121a0>
   23678:	b	2361c <__assert_fail@plt+0x1216c>
   2367c:	mov	r0, #56	; 0x38
   23680:	mov	r1, #1
   23684:	bl	29000 <__assert_fail@plt+0x17b50>
   23688:	cmp	r0, #0
   2368c:	beq	237d4 <__assert_fail@plt+0x12324>
   23690:	mov	r4, r0
   23694:	ldr	r0, [r6, #4]
   23698:	add	sl, r4, #4
   2369c:	cmp	r0, #1
   236a0:	str	r0, [r4, #8]
   236a4:	blt	2376c <__assert_fail@plt+0x122bc>
   236a8:	str	r0, [r4, #4]
   236ac:	lsl	r0, r0, #2
   236b0:	bl	29054 <__assert_fail@plt+0x17ba4>
   236b4:	cmp	r0, #0
   236b8:	str	r0, [r4, #12]
   236bc:	beq	237c0 <__assert_fail@plt+0x12310>
   236c0:	ldmib	r6, {r5, r6}
   236c4:	mov	r1, r6
   236c8:	mov	r9, r8
   236cc:	lsl	r2, r5, #2
   236d0:	bl	11258 <memcpy@plt>
   236d4:	cmp	r5, #1
   236d8:	str	sl, [r4, #40]	; 0x28
   236dc:	blt	23784 <__assert_fail@plt+0x122d4>
   236e0:	movw	ip, #65280	; 0xff00
   236e4:	ldr	sl, [r9]
   236e8:	mov	lr, #32
   236ec:	movt	ip, #3
   236f0:	add	r8, ip, #255	; 0xff
   236f4:	b	23718 <__assert_fail@plt+0x12268>
   236f8:	ldr	r0, [r1]
   236fc:	tst	r0, ip
   23700:	beq	2370c <__assert_fail@plt+0x1225c>
   23704:	orr	r0, r3, #128	; 0x80
   23708:	strb	r0, [r4, #52]	; 0x34
   2370c:	add	r6, r6, #4
   23710:	subs	r5, r5, #1
   23714:	beq	23784 <__assert_fail@plt+0x122d4>
   23718:	ldr	r0, [r6]
   2371c:	add	r1, sl, r0, lsl #3
   23720:	ldr	r0, [r1, #4]!
   23724:	and	r3, r0, r8
   23728:	cmp	r3, #1
   2372c:	beq	2370c <__assert_fail@plt+0x1225c>
   23730:	ldrb	r2, [r4, #52]	; 0x34
   23734:	and	r3, lr, r0, lsr #15
   23738:	uxtb	r0, r0
   2373c:	cmp	r0, #12
   23740:	orr	r3, r2, r3
   23744:	strb	r3, [r4, #52]	; 0x34
   23748:	beq	23704 <__assert_fail@plt+0x12254>
   2374c:	cmp	r0, #4
   23750:	beq	23764 <__assert_fail@plt+0x122b4>
   23754:	cmp	r0, #2
   23758:	bne	236f8 <__assert_fail@plt+0x12248>
   2375c:	orr	r0, r3, #16
   23760:	b	23708 <__assert_fail@plt+0x12258>
   23764:	orr	r0, r3, #64	; 0x40
   23768:	b	23708 <__assert_fail@plt+0x12258>
   2376c:	mov	r0, #0
   23770:	mov	r9, r8
   23774:	str	r0, [sl]
   23778:	str	r0, [sl, #4]
   2377c:	str	r0, [sl, #8]
   23780:	str	sl, [r4, #40]	; 0x28
   23784:	mov	r0, r9
   23788:	mov	r1, r4
   2378c:	mov	r2, r7
   23790:	bl	203c8 <__assert_fail@plt+0xef18>
   23794:	cmp	r0, #0
   23798:	bne	237b4 <__assert_fail@plt+0x12304>
   2379c:	mov	r0, r4
   237a0:	sub	sp, fp, #28
   237a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237a8:	mov	r4, #0
   237ac:	str	r4, [r0]
   237b0:	b	2379c <__assert_fail@plt+0x122ec>
   237b4:	mov	r0, r4
   237b8:	bl	19f58 <__assert_fail@plt+0x8aa8>
   237bc:	b	237d4 <__assert_fail@plt+0x12324>
   237c0:	mov	r0, #0
   237c4:	str	r0, [r4, #4]
   237c8:	str	r0, [r4, #8]
   237cc:	mov	r0, r4
   237d0:	bl	29220 <__assert_fail@plt+0x17d70>
   237d4:	ldr	r1, [sp]
   237d8:	mov	r0, #12
   237dc:	mov	r4, #0
   237e0:	str	r0, [r1]
   237e4:	b	2379c <__assert_fail@plt+0x122ec>
   237e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   237ec:	add	fp, sp, #24
   237f0:	ldr	lr, [r0]
   237f4:	add	r7, lr, r1, lsl #3
   237f8:	ldrb	r9, [r7, #4]
   237fc:	cmp	r9, #7
   23800:	beq	239d8 <__assert_fail@plt+0x12528>
   23804:	ldr	ip, [r2, #80]	; 0x50
   23808:	mov	r6, #1
   2380c:	cmp	ip, #1
   23810:	beq	23850 <__assert_fail@plt+0x123a0>
   23814:	ldr	r5, [r2, #28]
   23818:	add	r7, r3, #1
   2381c:	cmp	r7, r5
   23820:	bge	23850 <__assert_fail@plt+0x123a0>
   23824:	ldr	r6, [r2, #8]
   23828:	sub	r5, r5, r3
   2382c:	add	r7, r6, r3, lsl #2
   23830:	mov	r6, #1
   23834:	ldr	r4, [r7, r6, lsl #2]
   23838:	cmn	r4, #1
   2383c:	bne	23850 <__assert_fail@plt+0x123a0>
   23840:	add	r6, r6, #1
   23844:	cmp	r5, r6
   23848:	bne	23834 <__assert_fail@plt+0x12384>
   2384c:	mov	r6, r5
   23850:	mov	r8, #0
   23854:	cmp	r9, #5
   23858:	bne	238a0 <__assert_fail@plt+0x123f0>
   2385c:	cmp	r6, #2
   23860:	blt	239c8 <__assert_fail@plt+0x12518>
   23864:	ldr	r0, [r0, #128]	; 0x80
   23868:	tst	r0, #64	; 0x40
   2386c:	bne	23880 <__assert_fail@plt+0x123d0>
   23870:	ldr	r1, [r2, #4]
   23874:	ldrb	r1, [r1, r3]
   23878:	cmp	r1, #10
   2387c:	beq	239c8 <__assert_fail@plt+0x12518>
   23880:	tst	r0, #128	; 0x80
   23884:	beq	239c4 <__assert_fail@plt+0x12514>
   23888:	ldr	r0, [r2, #4]
   2388c:	ldrb	r0, [r0, r3]
   23890:	cmp	r0, #0
   23894:	movne	r8, r6
   23898:	mov	r0, r8
   2389c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   238a0:	cmp	r9, #6
   238a4:	bne	239c8 <__assert_fail@plt+0x12518>
   238a8:	cmp	r6, #2
   238ac:	blt	239c8 <__assert_fail@plt+0x12518>
   238b0:	ldr	r7, [lr, r1, lsl #3]
   238b4:	ldr	r0, [r7, #32]
   238b8:	cmp	r0, #0
   238bc:	bne	238d8 <__assert_fail@plt+0x12428>
   238c0:	ldr	r1, [r7, #36]	; 0x24
   238c4:	cmp	r1, #0
   238c8:	bne	238d8 <__assert_fail@plt+0x12428>
   238cc:	ldr	r1, [r7, #20]
   238d0:	cmp	r1, #0
   238d4:	beq	239d0 <__assert_fail@plt+0x12520>
   238d8:	cmp	ip, #1
   238dc:	bne	238ec <__assert_fail@plt+0x1243c>
   238e0:	ldr	r1, [r2, #4]
   238e4:	ldrb	r5, [r1, r3]
   238e8:	b	238f4 <__assert_fail@plt+0x12444>
   238ec:	ldr	r1, [r2, #8]
   238f0:	ldr	r5, [r1, r3, lsl #2]
   238f4:	ldr	r1, [r7, #20]
   238f8:	cmp	r1, #1
   238fc:	blt	23920 <__assert_fail@plt+0x12470>
   23900:	ldr	r2, [r7]
   23904:	mov	r3, #0
   23908:	ldr	r4, [r2, r3, lsl #2]
   2390c:	cmp	r5, r4
   23910:	beq	23998 <__assert_fail@plt+0x124e8>
   23914:	add	r3, r3, #1
   23918:	cmp	r3, r1
   2391c:	blt	23908 <__assert_fail@plt+0x12458>
   23920:	ldr	r1, [r7, #36]	; 0x24
   23924:	cmp	r1, #1
   23928:	blt	2395c <__assert_fail@plt+0x124ac>
   2392c:	mov	r4, #0
   23930:	ldr	r0, [r7, #12]
   23934:	ldr	r1, [r0, r4, lsl #2]
   23938:	mov	r0, r5
   2393c:	bl	111ec <iswctype@plt>
   23940:	cmp	r0, #0
   23944:	bne	23998 <__assert_fail@plt+0x124e8>
   23948:	ldr	r0, [r7, #36]	; 0x24
   2394c:	add	r4, r4, #1
   23950:	cmp	r4, r0
   23954:	blt	23930 <__assert_fail@plt+0x12480>
   23958:	ldr	r0, [r7, #32]
   2395c:	cmp	r0, #1
   23960:	blt	239a0 <__assert_fail@plt+0x124f0>
   23964:	ldr	r1, [r7, #4]
   23968:	mov	r2, #0
   2396c:	b	2397c <__assert_fail@plt+0x124cc>
   23970:	add	r2, r2, #1
   23974:	cmp	r2, r0
   23978:	bge	239a0 <__assert_fail@plt+0x124f0>
   2397c:	ldr	r3, [r1, r2, lsl #2]
   23980:	cmp	r3, r5
   23984:	bhi	23970 <__assert_fail@plt+0x124c0>
   23988:	ldr	r3, [r7, #8]
   2398c:	ldr	r3, [r3, r2, lsl #2]
   23990:	cmp	r5, r3
   23994:	bhi	23970 <__assert_fail@plt+0x124c0>
   23998:	mov	r0, r6
   2399c:	b	239a4 <__assert_fail@plt+0x124f4>
   239a0:	mov	r0, #0
   239a4:	ldrb	r1, [r7, #16]
   239a8:	tst	r1, #1
   239ac:	bne	239b4 <__assert_fail@plt+0x12504>
   239b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   239b4:	cmp	r0, #0
   239b8:	bgt	239c8 <__assert_fail@plt+0x12518>
   239bc:	cmp	r6, #1
   239c0:	movle	r6, #1
   239c4:	mov	r8, r6
   239c8:	mov	r0, r8
   239cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   239d0:	mov	r5, #0
   239d4:	b	238f4 <__assert_fail@plt+0x12444>
   239d8:	ldr	r0, [r2, #4]
   239dc:	mov	r8, #0
   239e0:	ldrb	r6, [r0, r3]
   239e4:	cmp	r6, #194	; 0xc2
   239e8:	bcc	239c8 <__assert_fail@plt+0x12518>
   239ec:	ldr	r2, [r2, #48]	; 0x30
   239f0:	add	r1, r3, #2
   239f4:	cmp	r1, r2
   239f8:	bgt	239c8 <__assert_fail@plt+0x12518>
   239fc:	add	r1, r3, r0
   23a00:	cmp	r6, #223	; 0xdf
   23a04:	ldrb	r7, [r1, #1]
   23a08:	bhi	23a30 <__assert_fail@plt+0x12580>
   23a0c:	cmp	r7, #192	; 0xc0
   23a10:	mov	r0, #0
   23a14:	movwcc	r0, #1
   23a18:	lsl	r8, r0, #1
   23a1c:	sxtb	r0, r7
   23a20:	cmn	r0, #1
   23a24:	movwgt	r8, #0
   23a28:	mov	r0, r8
   23a2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23a30:	cmp	r6, #239	; 0xef
   23a34:	bhi	23a50 <__assert_fail@plt+0x125a0>
   23a38:	mov	r0, #3
   23a3c:	cmp	r6, #224	; 0xe0
   23a40:	bne	23aac <__assert_fail@plt+0x125fc>
   23a44:	cmp	r7, #160	; 0xa0
   23a48:	bcc	239c8 <__assert_fail@plt+0x12518>
   23a4c:	b	23aac <__assert_fail@plt+0x125fc>
   23a50:	cmp	r6, #247	; 0xf7
   23a54:	bhi	23a70 <__assert_fail@plt+0x125c0>
   23a58:	mov	r0, #4
   23a5c:	cmp	r6, #240	; 0xf0
   23a60:	bne	23aac <__assert_fail@plt+0x125fc>
   23a64:	cmp	r7, #144	; 0x90
   23a68:	bcc	239c8 <__assert_fail@plt+0x12518>
   23a6c:	b	23aac <__assert_fail@plt+0x125fc>
   23a70:	cmp	r6, #251	; 0xfb
   23a74:	bhi	23a90 <__assert_fail@plt+0x125e0>
   23a78:	mov	r0, #5
   23a7c:	cmp	r6, #248	; 0xf8
   23a80:	bne	23aac <__assert_fail@plt+0x125fc>
   23a84:	cmp	r7, #136	; 0x88
   23a88:	bcc	239c8 <__assert_fail@plt+0x12518>
   23a8c:	b	23aac <__assert_fail@plt+0x125fc>
   23a90:	cmp	r6, #253	; 0xfd
   23a94:	bhi	239c8 <__assert_fail@plt+0x12518>
   23a98:	mov	r0, #6
   23a9c:	cmp	r6, #252	; 0xfc
   23aa0:	bne	23aac <__assert_fail@plt+0x125fc>
   23aa4:	cmp	r7, #132	; 0x84
   23aa8:	bcc	239c8 <__assert_fail@plt+0x12518>
   23aac:	add	r3, r0, r3
   23ab0:	cmp	r3, r2
   23ab4:	bgt	239c8 <__assert_fail@plt+0x12518>
   23ab8:	ldrb	r2, [r1, #1]
   23abc:	sxtb	r3, r2
   23ac0:	cmn	r3, #1
   23ac4:	bgt	239c8 <__assert_fail@plt+0x12518>
   23ac8:	cmp	r2, #191	; 0xbf
   23acc:	bhi	239c8 <__assert_fail@plt+0x12518>
   23ad0:	ldrb	r2, [r1, #2]
   23ad4:	sxtb	r3, r2
   23ad8:	cmn	r3, #1
   23adc:	bgt	239c8 <__assert_fail@plt+0x12518>
   23ae0:	cmp	r2, #191	; 0xbf
   23ae4:	bhi	239c8 <__assert_fail@plt+0x12518>
   23ae8:	cmp	r0, #3
   23aec:	beq	239b0 <__assert_fail@plt+0x12500>
   23af0:	ldrb	r2, [r1, #3]
   23af4:	sxtb	r3, r2
   23af8:	cmn	r3, #1
   23afc:	bgt	239c8 <__assert_fail@plt+0x12518>
   23b00:	cmp	r2, #191	; 0xbf
   23b04:	bhi	239c8 <__assert_fail@plt+0x12518>
   23b08:	cmp	r0, #4
   23b0c:	beq	239b0 <__assert_fail@plt+0x12500>
   23b10:	ldrb	r2, [r1, #4]
   23b14:	sxtb	r3, r2
   23b18:	cmn	r3, #1
   23b1c:	bgt	239c8 <__assert_fail@plt+0x12518>
   23b20:	cmp	r2, #191	; 0xbf
   23b24:	bhi	239c8 <__assert_fail@plt+0x12518>
   23b28:	cmp	r0, #5
   23b2c:	beq	239b0 <__assert_fail@plt+0x12500>
   23b30:	ldrsb	r1, [r1, #5]
   23b34:	uxtb	r2, r1
   23b38:	cmp	r2, #191	; 0xbf
   23b3c:	movwhi	r0, #0
   23b40:	cmn	r1, #1
   23b44:	movwgt	r0, #0
   23b48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23b4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23b50:	add	fp, sp, #24
   23b54:	ldr	r4, [r1, #4]
   23b58:	mov	r6, r0
   23b5c:	mvn	r0, #0
   23b60:	mov	r8, #0
   23b64:	uxtab	r3, r0, r4
   23b68:	cmp	r3, #6
   23b6c:	bhi	23d08 <__assert_fail@plt+0x12858>
   23b70:	ldr	r0, [r6, #4]
   23b74:	mov	r9, r1
   23b78:	ldrb	r1, [r0, r2]
   23b7c:	add	r7, pc, #4
   23b80:	sxtb	r0, r1
   23b84:	ldr	pc, [r7, r3, lsl #2]
   23b88:	andeq	r3, r2, r4, lsr #23
   23b8c:	andeq	r3, r2, r8, lsl #26
   23b90:			; <UNDEFINED> instruction: 0x00023bb8
   23b94:	andeq	r3, r2, r8, lsl #26
   23b98:	andeq	r3, r2, r0, ror #23
   23b9c:	andeq	r3, r2, r8, lsl #26
   23ba0:	ldrdeq	r3, [r2], -r8
   23ba4:	ldrb	r3, [r9]
   23ba8:	uxtb	r7, r0
   23bac:	cmp	r3, r7
   23bb0:	beq	23c14 <__assert_fail@plt+0x12764>
   23bb4:	b	23d08 <__assert_fail@plt+0x12858>
   23bb8:	ldr	r3, [r9]
   23bbc:	ubfx	r7, r1, #5, #3
   23bc0:	mov	r5, #1
   23bc4:	ldr	r3, [r3, r7, lsl #2]
   23bc8:	and	r7, r1, #31
   23bcc:	tst	r3, r5, lsl r7
   23bd0:	bne	23c14 <__assert_fail@plt+0x12764>
   23bd4:	b	23d08 <__assert_fail@plt+0x12858>
   23bd8:	cmp	r0, #0
   23bdc:	bmi	23d08 <__assert_fail@plt+0x12858>
   23be0:	cmp	r1, #0
   23be4:	beq	23c04 <__assert_fail@plt+0x12754>
   23be8:	cmp	r1, #10
   23bec:	bne	23c14 <__assert_fail@plt+0x12764>
   23bf0:	ldr	r3, [r6, #84]	; 0x54
   23bf4:	ldrb	r3, [r3, #128]	; 0x80
   23bf8:	tst	r3, #64	; 0x40
   23bfc:	beq	23d08 <__assert_fail@plt+0x12858>
   23c00:	b	23c14 <__assert_fail@plt+0x12764>
   23c04:	ldr	r3, [r6, #84]	; 0x54
   23c08:	ldrb	r3, [r3, #128]	; 0x80
   23c0c:	tst	r3, #128	; 0x80
   23c10:	bne	23d08 <__assert_fail@plt+0x12858>
   23c14:	movw	r3, #65280	; 0xff00
   23c18:	movt	r3, #3
   23c1c:	tst	r4, r3
   23c20:	beq	23c68 <__assert_fail@plt+0x127b8>
   23c24:	cmn	r2, #1
   23c28:	ble	23c60 <__assert_fail@plt+0x127b0>
   23c2c:	ldr	r3, [r6, #48]	; 0x30
   23c30:	cmp	r3, r2
   23c34:	beq	23d28 <__assert_fail@plt+0x12878>
   23c38:	ldr	r3, [r6, #80]	; 0x50
   23c3c:	cmp	r3, #2
   23c40:	blt	23c74 <__assert_fail@plt+0x127c4>
   23c44:	ldr	r0, [r6, #8]
   23c48:	ldr	r7, [r0, r2, lsl #2]
   23c4c:	cmn	r7, #1
   23c50:	bne	23ca4 <__assert_fail@plt+0x127f4>
   23c54:	sub	r2, r2, #1
   23c58:	cmn	r2, #1
   23c5c:	bne	23c48 <__assert_fail@plt+0x12798>
   23c60:	ldr	r1, [r6, #60]	; 0x3c
   23c64:	b	23ccc <__assert_fail@plt+0x1281c>
   23c68:	mov	r8, #1
   23c6c:	mov	r0, r8
   23c70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23c74:	ldr	r2, [r6, #68]	; 0x44
   23c78:	ubfx	r3, r1, #5, #3
   23c7c:	and	r7, r1, #31
   23c80:	mov	r1, #1
   23c84:	ldr	r3, [r2, r3, lsl #2]
   23c88:	mov	r2, #0
   23c8c:	tst	r3, r1, lsl r7
   23c90:	bne	23ce4 <__assert_fail@plt+0x12834>
   23c94:	mov	r1, #0
   23c98:	cmp	r0, #10
   23c9c:	beq	23cbc <__assert_fail@plt+0x1280c>
   23ca0:	b	23ccc <__assert_fail@plt+0x1281c>
   23ca4:	ldrb	r0, [r6, #78]	; 0x4e
   23ca8:	cmp	r0, #0
   23cac:	bne	23d38 <__assert_fail@plt+0x12888>
   23cb0:	mov	r1, #0
   23cb4:	cmp	r7, #10
   23cb8:	bne	23ccc <__assert_fail@plt+0x1281c>
   23cbc:	ldrb	r0, [r6, #77]	; 0x4d
   23cc0:	cmp	r0, #0
   23cc4:	movwne	r0, #1
   23cc8:	lsl	r1, r0, #1
   23ccc:	and	r0, r1, #1
   23cd0:	tst	r4, #1024	; 0x400
   23cd4:	eor	r2, r0, #1
   23cd8:	beq	23ce4 <__assert_fail@plt+0x12834>
   23cdc:	cmp	r0, #0
   23ce0:	beq	23d08 <__assert_fail@plt+0x12858>
   23ce4:	ldr	r0, [r9, #4]
   23ce8:	cmp	r2, #0
   23cec:	bne	23cf8 <__assert_fail@plt+0x12848>
   23cf0:	ands	r2, r0, #2048	; 0x800
   23cf4:	bne	23d08 <__assert_fail@plt+0x12858>
   23cf8:	tst	r1, #2
   23cfc:	bne	23d10 <__assert_fail@plt+0x12860>
   23d00:	ands	r2, r0, #8192	; 0x2000
   23d04:	beq	23d10 <__assert_fail@plt+0x12860>
   23d08:	mov	r0, r8
   23d0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23d10:	uxth	r0, r0
   23d14:	mov	r2, #1
   23d18:	and	r1, r1, #8
   23d1c:	eor	r0, r2, r0, lsr #15
   23d20:	orr	r0, r0, r1, lsr #3
   23d24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23d28:	ldr	r0, [r6, #88]	; 0x58
   23d2c:	and	r0, r0, #2
   23d30:	eor	r1, r0, #10
   23d34:	b	23ccc <__assert_fail@plt+0x1281c>
   23d38:	mov	r0, r7
   23d3c:	bl	113b4 <iswalnum@plt>
   23d40:	mov	r1, #1
   23d44:	mov	r2, #0
   23d48:	cmp	r7, #95	; 0x5f
   23d4c:	beq	23ce4 <__assert_fail@plt+0x12834>
   23d50:	cmp	r0, #0
   23d54:	beq	23cb0 <__assert_fail@plt+0x12800>
   23d58:	b	23ce4 <__assert_fail@plt+0x12834>
   23d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d60:	add	fp, sp, #28
   23d64:	sub	sp, sp, #4
   23d68:	vpush	{d8-d9}
   23d6c:	sub	sp, sp, #2272	; 0x8e0
   23d70:	sub	sp, sp, #12288	; 0x3000
   23d74:	mov	lr, r0
   23d78:	mov	r0, #0
   23d7c:	vmov.i32	q4, #0	; 0x00000000
   23d80:	mov	r8, r1
   23d84:	str	r0, [r1, #44]	; 0x2c
   23d88:	str	r0, [r1, #48]	; 0x30
   23d8c:	sub	r0, fp, #1024	; 0x400
   23d90:	sub	r1, r0, #56	; 0x38
   23d94:	mov	r0, r1
   23d98:	vst1.64	{d8-d9}, [r0]!
   23d9c:	vst1.64	{d8-d9}, [r0]
   23da0:	ldr	r0, [r8, #8]
   23da4:	cmp	r0, #0
   23da8:	ble	24d7c <__assert_fail@plt+0x138cc>
   23dac:	add	r0, lr, #96	; 0x60
   23db0:	mov	r2, #0
   23db4:	mov	r4, #0
   23db8:	str	lr, [sp, #140]	; 0x8c
   23dbc:	str	r8, [sp, #12]
   23dc0:	str	r0, [sp, #4]
   23dc4:	add	r0, r0, #16
   23dc8:	str	r0, [sp]
   23dcc:	add	r0, r1, #16
   23dd0:	str	r0, [sp, #8]
   23dd4:	b	23dfc <__assert_fail@plt+0x1294c>
   23dd8:	sub	r0, fp, #1024	; 0x400
   23ddc:	mov	r4, r6
   23de0:	sub	r0, r0, #56	; 0x38
   23de4:	vst1.64	{d8-d9}, [r0]!
   23de8:	vst1.64	{d8-d9}, [r0]
   23dec:	ldr	r0, [r8, #8]
   23df0:	add	r2, r2, #1
   23df4:	cmp	r2, r0
   23df8:	bge	247a4 <__assert_fail@plt+0x132f4>
   23dfc:	ldr	r0, [r8, #12]
   23e00:	ldr	r1, [lr]
   23e04:	mov	r6, r4
   23e08:	str	r2, [sp, #24]
   23e0c:	ldr	r0, [r0, r2, lsl #2]
   23e10:	add	r5, r1, r0, lsl #3
   23e14:	ldr	sl, [r5, #4]!
   23e18:	uxtb	r3, sl
   23e1c:	cmp	r3, #1
   23e20:	str	r3, [sp, #64]	; 0x40
   23e24:	bne	23ea4 <__assert_fail@plt+0x129f4>
   23e28:	ldrb	r2, [r1, r0, lsl #3]
   23e2c:	str	r0, [sp, #16]
   23e30:	sub	r0, fp, #1024	; 0x400
   23e34:	mov	r4, r1
   23e38:	sub	r7, r0, #56	; 0x38
   23e3c:	mov	r0, #1
   23e40:	mov	r1, r7
   23e44:	ubfx	r3, r2, #5, #3
   23e48:	and	r2, r2, #31
   23e4c:	ldr	r7, [r7, r3, lsl #2]
   23e50:	orr	r2, r7, r0, lsl r2
   23e54:	str	r2, [r1, r3, lsl #2]
   23e58:	movw	r2, #65280	; 0xff00
   23e5c:	mov	r3, r4
   23e60:	movt	r2, #3
   23e64:	ands	r2, sl, r2
   23e68:	ldr	r2, [sp, #24]
   23e6c:	beq	242b0 <__assert_fail@plt+0x12e00>
   23e70:	tst	sl, #8192	; 0x2000
   23e74:	beq	23f08 <__assert_fail@plt+0x12a58>
   23e78:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   23e7c:	sub	r0, fp, #1024	; 0x400
   23e80:	mov	r1, r3
   23e84:	sub	r3, r0, #56	; 0x38
   23e88:	vst1.64	{d8-d9}, [r3]!
   23e8c:	vst1.64	{d8-d9}, [r3]
   23e90:	tst	r2, #1024	; 0x400
   23e94:	bne	23ef8 <__assert_fail@plt+0x12a48>
   23e98:	ldr	r2, [sp, #24]
   23e9c:	mov	r4, r6
   23ea0:	b	23dec <__assert_fail@plt+0x1293c>
   23ea4:	cmp	r3, #7
   23ea8:	beq	23f44 <__assert_fail@plt+0x12a94>
   23eac:	cmp	r3, #5
   23eb0:	beq	23f98 <__assert_fail@plt+0x12ae8>
   23eb4:	cmp	r3, #3
   23eb8:	bne	2479c <__assert_fail@plt+0x132ec>
   23ebc:	ldr	r2, [r1, r0, lsl #3]
   23ec0:	str	r0, [sp, #16]
   23ec4:	sub	r0, fp, #1024	; 0x400
   23ec8:	mov	r4, r1
   23ecc:	sub	r3, r0, #56	; 0x38
   23ed0:	vld1.64	{d16-d17}, [r3]
   23ed4:	vld1.32	{d18-d19}, [r2]!
   23ed8:	vorr	q8, q8, q9
   23edc:	vst1.64	{d16-d17}, [r3]
   23ee0:	vld1.32	{d16-d17}, [r2]
   23ee4:	ldr	r2, [sp, #8]
   23ee8:	vld1.32	{d18-d19}, [r2]
   23eec:	vorr	q8, q9, q8
   23ef0:	vst1.32	{d16-d17}, [r2]
   23ef4:	b	23e58 <__assert_fail@plt+0x129a8>
   23ef8:	ldr	r2, [sp, #24]
   23efc:	mov	r0, #1024	; 0x400
   23f00:	mov	r3, r1
   23f04:	str	r0, [fp, #-1080]	; 0xfffffbc8
   23f08:	tst	sl, #32768	; 0x8000
   23f0c:	bne	23dd8 <__assert_fail@plt+0x12928>
   23f10:	tst	sl, #1024	; 0x400
   23f14:	beq	241c8 <__assert_fail@plt+0x12d18>
   23f18:	ldr	r0, [sp, #64]	; 0x40
   23f1c:	cmp	r0, #1
   23f20:	bne	23fe4 <__assert_fail@plt+0x12b34>
   23f24:	ldrb	r2, [r5, #2]
   23f28:	tst	r2, #64	; 0x40
   23f2c:	bne	23fe4 <__assert_fail@plt+0x12b34>
   23f30:	sub	r0, fp, #1024	; 0x400
   23f34:	sub	r0, r0, #56	; 0x38
   23f38:	vst1.64	{d8-d9}, [r0]!
   23f3c:	vst1.64	{d8-d9}, [r0]
   23f40:	b	23e98 <__assert_fail@plt+0x129e8>
   23f44:	str	r0, [sp, #16]
   23f48:	mvn	r0, #0
   23f4c:	mov	r4, r1
   23f50:	str	r0, [fp, #-1068]	; 0xfffffbd4
   23f54:	str	r0, [fp, #-1072]	; 0xfffffbd0
   23f58:	str	r0, [fp, #-1076]	; 0xfffffbcc
   23f5c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   23f60:	ldr	r3, [lr, #128]	; 0x80
   23f64:	and	r2, r3, #128	; 0x80
   23f68:	ands	r3, r3, #64	; 0x40
   23f6c:	beq	23f78 <__assert_fail@plt+0x12ac8>
   23f70:	cmp	r2, #0
   23f74:	beq	23e58 <__assert_fail@plt+0x129a8>
   23f78:	cmp	r3, #0
   23f7c:	mvn	r3, #1
   23f80:	movweq	r3, #64510	; 0xfbfe
   23f84:	movteq	r3, #65535	; 0xffff
   23f88:	cmp	r2, #0
   23f8c:	mvneq	r3, #1024	; 0x400
   23f90:	str	r3, [fp, #-1080]	; 0xfffffbc8
   23f94:	b	23e58 <__assert_fail@plt+0x129a8>
   23f98:	ldr	r2, [lr, #92]	; 0x5c
   23f9c:	mov	r4, r1
   23fa0:	str	r0, [sp, #16]
   23fa4:	cmp	r2, #2
   23fa8:	blt	2407c <__assert_fail@plt+0x12bcc>
   23fac:	ldr	r2, [lr, #60]	; 0x3c
   23fb0:	sub	r0, fp, #1024	; 0x400
   23fb4:	sub	r3, r0, #56	; 0x38
   23fb8:	vld1.64	{d16-d17}, [r3]
   23fbc:	vld1.32	{d18-d19}, [r2]!
   23fc0:	vorr	q8, q8, q9
   23fc4:	vst1.64	{d16-d17}, [r3]
   23fc8:	vld1.32	{d18-d19}, [r2]
   23fcc:	ldr	r2, [sp, #8]
   23fd0:	vld1.32	{d20-d21}, [r2]
   23fd4:	vorr	q9, q10, q9
   23fd8:	vst1.32	{d18-d19}, [r2]
   23fdc:	vmov.32	r2, d16[0]
   23fe0:	b	240a0 <__assert_fail@plt+0x12bf0>
   23fe4:	ldr	r2, [lr, #92]	; 0x5c
   23fe8:	mov	r1, r3
   23fec:	cmp	r2, #1
   23ff0:	ble	240cc <__assert_fail@plt+0x12c1c>
   23ff4:	ldr	r2, [lr, #60]	; 0x3c
   23ff8:	ldr	r3, [sp, #4]
   23ffc:	sub	r0, fp, #1024	; 0x400
   24000:	vld1.32	{d16-d17}, [r3]
   24004:	vld1.32	{d18-d19}, [r2]!
   24008:	sub	r3, r0, #56	; 0x38
   2400c:	vld1.64	{d20-d21}, [r3]
   24010:	vorn	q8, q8, q9
   24014:	vand	q8, q10, q8
   24018:	vst1.64	{d16-d17}, [r3]
   2401c:	vmov.32	r3, d16[1]
   24020:	vld1.32	{d18-d19}, [r2]
   24024:	ldr	r2, [sp]
   24028:	vld1.32	{d20-d21}, [r2]
   2402c:	ldr	r2, [sp, #8]
   24030:	vld1.32	{d22-d23}, [r2]
   24034:	vorn	q9, q10, q9
   24038:	vand	q9, q11, q9
   2403c:	vst1.32	{d18-d19}, [r2]
   24040:	vmov.32	r2, d16[0]
   24044:	orr	r2, r3, r2
   24048:	vmov.32	r3, d17[0]
   2404c:	orr	r2, r2, r3
   24050:	vmov.32	r3, d17[1]
   24054:	orr	r2, r2, r3
   24058:	vmov.32	r3, d18[0]
   2405c:	orr	r2, r2, r3
   24060:	vmov.32	r3, d18[1]
   24064:	orr	r2, r2, r3
   24068:	vmov.32	r3, d19[0]
   2406c:	orr	r2, r2, r3
   24070:	vmov.32	r3, d19[1]
   24074:	orr	r2, r2, r3
   24078:	b	241b8 <__assert_fail@plt+0x12d08>
   2407c:	mvn	r2, #0
   24080:	str	r2, [fp, #-1052]	; 0xfffffbe4
   24084:	str	r2, [fp, #-1056]	; 0xfffffbe0
   24088:	str	r2, [fp, #-1060]	; 0xfffffbdc
   2408c:	str	r2, [fp, #-1064]	; 0xfffffbd8
   24090:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24094:	str	r2, [fp, #-1072]	; 0xfffffbd0
   24098:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2409c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   240a0:	ldr	r3, [lr, #128]	; 0x80
   240a4:	ands	r7, r3, #64	; 0x40
   240a8:	and	r3, r3, #128	; 0x80
   240ac:	biceq	r2, r2, #1024	; 0x400
   240b0:	beq	240bc <__assert_fail@plt+0x12c0c>
   240b4:	cmp	r3, #0
   240b8:	beq	23e58 <__assert_fail@plt+0x129a8>
   240bc:	cmp	r3, #0
   240c0:	bicne	r2, r2, #1
   240c4:	str	r2, [fp, #-1080]	; 0xfffffbc8
   240c8:	b	23e58 <__assert_fail@plt+0x129a8>
   240cc:	ldr	r2, [sp, #140]	; 0x8c
   240d0:	ldr	r3, [lr, #96]	; 0x60
   240d4:	str	r1, [sp, #60]	; 0x3c
   240d8:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   240dc:	mov	r9, r5
   240e0:	str	r6, [sp, #152]	; 0x98
   240e4:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   240e8:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   240ec:	ldr	lr, [r2, #100]	; 0x64
   240f0:	ldr	r2, [sp, #140]	; 0x8c
   240f4:	and	r7, r4, r3
   240f8:	ldr	r3, [sp, #12]
   240fc:	ldr	r1, [r2, #104]	; 0x68
   24100:	ldr	r2, [sp, #140]	; 0x8c
   24104:	and	lr, r5, lr
   24108:	ldr	r0, [r2, #108]	; 0x6c
   2410c:	ldr	r2, [sp, #140]	; 0x8c
   24110:	and	r1, r6, r1
   24114:	ldr	ip, [r2, #112]	; 0x70
   24118:	ldr	r2, [sp, #140]	; 0x8c
   2411c:	ldr	r8, [r2, #116]	; 0x74
   24120:	ldr	r2, [sp, #140]	; 0x8c
   24124:	ldr	r2, [r2, #120]	; 0x78
   24128:	str	r2, [sp, #160]	; 0xa0
   2412c:	ldr	r2, [sp, #140]	; 0x8c
   24130:	ldr	r2, [r2, #124]	; 0x7c
   24134:	str	r2, [sp, #164]	; 0xa4
   24138:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2413c:	str	r7, [fp, #-1080]	; 0xfffffbc8
   24140:	str	lr, [fp, #-1076]	; 0xfffffbcc
   24144:	str	r1, [fp, #-1072]	; 0xfffffbd0
   24148:	orr	r7, lr, r7
   2414c:	ldr	lr, [sp, #140]	; 0x8c
   24150:	orr	r7, r7, r1
   24154:	ldr	r1, [sp, #60]	; 0x3c
   24158:	and	r2, r2, r0
   2415c:	ldr	r0, [sp, #160]	; 0xa0
   24160:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24164:	orr	r2, r7, r2
   24168:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   2416c:	and	r6, r6, ip
   24170:	str	r6, [fp, #-1064]	; 0xfffffbd8
   24174:	orr	r2, r2, r6
   24178:	ldr	r6, [sp, #152]	; 0x98
   2417c:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   24180:	and	r4, r4, r8
   24184:	mov	r8, r3
   24188:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2418c:	orr	r2, r2, r4
   24190:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   24194:	and	r3, r3, r0
   24198:	ldr	r0, [sp, #164]	; 0xa4
   2419c:	str	r3, [fp, #-1056]	; 0xfffffbe0
   241a0:	orr	r2, r2, r3
   241a4:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   241a8:	and	r0, r5, r0
   241ac:	mov	r5, r9
   241b0:	str	r0, [fp, #-1052]	; 0xfffffbe4
   241b4:	orr	r2, r2, r0
   241b8:	cmp	r2, #0
   241bc:	ldr	r2, [sp, #24]
   241c0:	mov	r3, r1
   241c4:	beq	2479c <__assert_fail@plt+0x132ec>
   241c8:	tst	sl, #2048	; 0x800
   241cc:	beq	242b0 <__assert_fail@plt+0x12e00>
   241d0:	ldr	r0, [sp, #64]	; 0x40
   241d4:	cmp	r0, #1
   241d8:	bne	241e8 <__assert_fail@plt+0x12d38>
   241dc:	ldrb	r0, [r5, #2]
   241e0:	tst	r0, #64	; 0x40
   241e4:	bne	23dd8 <__assert_fail@plt+0x12928>
   241e8:	ldr	r0, [lr, #92]	; 0x5c
   241ec:	cmp	r0, #1
   241f0:	ble	2423c <__assert_fail@plt+0x12d8c>
   241f4:	ldr	r0, [lr, #60]	; 0x3c
   241f8:	ldr	r1, [sp, #4]
   241fc:	vld1.32	{d16-d17}, [r1]
   24200:	vld1.32	{d18-d19}, [r0]!
   24204:	sub	r1, fp, #1024	; 0x400
   24208:	sub	r1, r1, #56	; 0x38
   2420c:	vld1.64	{d20-d21}, [r1]
   24210:	vand	q8, q9, q8
   24214:	vbic	q9, q10, q8
   24218:	vst1.64	{d18-d19}, [r1]
   2421c:	ldr	r1, [sp]
   24220:	vld1.32	{d20-d21}, [r0]
   24224:	ldr	r0, [sp, #8]
   24228:	vld1.32	{d16-d17}, [r1]
   2422c:	vld1.32	{d22-d23}, [r0]
   24230:	vand	q8, q10, q8
   24234:	vbic	q8, q11, q8
   24238:	b	2426c <__assert_fail@plt+0x12dbc>
   2423c:	ldr	r0, [sp, #4]
   24240:	vld1.32	{d16-d17}, [r0]
   24244:	sub	r0, fp, #1024	; 0x400
   24248:	sub	r0, r0, #56	; 0x38
   2424c:	vld1.64	{d18-d19}, [r0]
   24250:	vbic	q9, q9, q8
   24254:	vst1.64	{d18-d19}, [r0]
   24258:	ldr	r0, [sp]
   2425c:	vld1.32	{d16-d17}, [r0]
   24260:	ldr	r0, [sp, #8]
   24264:	vld1.32	{d20-d21}, [r0]
   24268:	vbic	q8, q10, q8
   2426c:	vst1.32	{d16-d17}, [r0]
   24270:	vmov.32	r0, d18[0]
   24274:	vmov.32	r1, d18[1]
   24278:	orr	r0, r1, r0
   2427c:	vmov.32	r1, d19[0]
   24280:	orr	r0, r0, r1
   24284:	vmov.32	r1, d19[1]
   24288:	orr	r0, r0, r1
   2428c:	vmov.32	r1, d16[0]
   24290:	orr	r0, r0, r1
   24294:	vmov.32	r1, d16[1]
   24298:	orr	r0, r0, r1
   2429c:	vmov.32	r1, d17[0]
   242a0:	orr	r0, r0, r1
   242a4:	vmov.32	r1, d17[1]
   242a8:	orrs	r0, r0, r1
   242ac:	beq	2479c <__assert_fail@plt+0x132ec>
   242b0:	mov	r4, r6
   242b4:	mov	r5, #0
   242b8:	cmp	r6, #1
   242bc:	blt	2470c <__assert_fail@plt+0x1325c>
   242c0:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   242c4:	ldr	ip, [fp, #-1056]	; 0xfffffbe0
   242c8:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   242cc:	ldr	r8, [fp, #-1072]	; 0xfffffbd0
   242d0:	ldr	r9, [sp, #64]	; 0x40
   242d4:	mov	r1, #28
   242d8:	str	r3, [sp, #60]	; 0x3c
   242dc:	str	r0, [sp, #148]	; 0x94
   242e0:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   242e4:	str	r0, [sp, #120]	; 0x78
   242e8:	ldr	r0, [fp, #-1080]	; 0xfffffbc8
   242ec:	str	r0, [sp, #108]	; 0x6c
   242f0:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   242f4:	str	r0, [sp, #112]	; 0x70
   242f8:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   242fc:	str	r0, [sp, #116]	; 0x74
   24300:	sub	r0, fp, #6144	; 0x1800
   24304:	sub	r7, r0, #104	; 0x68
   24308:	b	24340 <__assert_fail@plt+0x12e90>
   2430c:	ldr	r9, [sp, #64]	; 0x40
   24310:	ldr	r7, [sp, #144]	; 0x90
   24314:	ldr	ip, [sp, #164]	; 0xa4
   24318:	ldr	lr, [sp, #160]	; 0xa0
   2431c:	ldr	r5, [sp, #136]	; 0x88
   24320:	ldr	r4, [sp, #152]	; 0x98
   24324:	ldr	r3, [sp, #60]	; 0x3c
   24328:	ldr	r8, [sp, #156]	; 0x9c
   2432c:	add	r1, r1, #32
   24330:	add	r7, r7, #12
   24334:	add	r5, r5, #1
   24338:	cmp	r5, r4
   2433c:	bge	246cc <__assert_fail@plt+0x1321c>
   24340:	cmp	r9, #1
   24344:	str	lr, [sp, #160]	; 0xa0
   24348:	str	ip, [sp, #164]	; 0xa4
   2434c:	str	r4, [sp, #152]	; 0x98
   24350:	str	r5, [sp, #136]	; 0x88
   24354:	str	r8, [sp, #156]	; 0x9c
   24358:	bne	2438c <__assert_fail@plt+0x12edc>
   2435c:	ldr	r0, [sp, #16]
   24360:	add	r2, sp, #168	; 0xa8
   24364:	ldrb	r0, [r3, r0, lsl #3]
   24368:	mov	r3, r1
   2436c:	ubfx	r1, r0, #5, #3
   24370:	and	r0, r0, #31
   24374:	add	r1, r2, r1, lsl #2
   24378:	mov	r2, #1
   2437c:	ldr	r1, [r1, r5, lsl #5]
   24380:	tst	r1, r2, lsl r0
   24384:	mov	r1, r3
   24388:	beq	24314 <__assert_fail@plt+0x12e64>
   2438c:	add	r4, sp, #168	; 0xa8
   24390:	str	r7, [sp, #144]	; 0x90
   24394:	ldr	ip, [sp, #108]	; 0x6c
   24398:	ldr	r9, [sp, #112]	; 0x70
   2439c:	add	sl, r4, r5, lsl #5
   243a0:	ldr	r5, [sp, #116]	; 0x74
   243a4:	add	r7, sl, #8
   243a8:	ldr	r3, [sl, #4]
   243ac:	ldm	r7, {r0, r6, r7}
   243b0:	str	r6, [sp, #132]	; 0x84
   243b4:	str	r7, [sp, #100]	; 0x64
   243b8:	str	r3, [sp, #128]	; 0x80
   243bc:	and	r3, r3, r9
   243c0:	and	r2, r0, r8
   243c4:	str	r0, [sp, #124]	; 0x7c
   243c8:	add	r0, r4, r1
   243cc:	str	r3, [sp, #84]	; 0x54
   243d0:	ldr	r4, [r4, r1]
   243d4:	ldr	r8, [sp, #148]	; 0x94
   243d8:	ldr	lr, [r0, #-28]	; 0xffffffe4
   243dc:	str	r0, [sp, #92]	; 0x5c
   243e0:	str	r2, [sp, #96]	; 0x60
   243e4:	and	r0, lr, ip
   243e8:	str	r0, [sp, #88]	; 0x58
   243ec:	orr	r0, r3, r0
   243f0:	ldr	r3, [sl, #20]
   243f4:	orr	r0, r0, r2
   243f8:	and	r2, r6, r5
   243fc:	ldr	r6, [sp, #120]	; 0x78
   24400:	str	r2, [sp, #80]	; 0x50
   24404:	orr	r0, r0, r2
   24408:	and	r2, r7, r6
   2440c:	ldr	r7, [sl, #24]
   24410:	str	r2, [sp, #76]	; 0x4c
   24414:	orr	r0, r0, r2
   24418:	ldr	r2, [sp, #160]	; 0xa0
   2441c:	and	r2, r3, r2
   24420:	str	r2, [sp, #72]	; 0x48
   24424:	orr	r0, r0, r2
   24428:	ldr	r2, [sp, #164]	; 0xa4
   2442c:	and	r2, r7, r2
   24430:	str	r2, [sp, #68]	; 0x44
   24434:	orr	r0, r0, r2
   24438:	and	r2, r4, r8
   2443c:	orrs	r0, r0, r2
   24440:	beq	2430c <__assert_fail@plt+0x12e5c>
   24444:	bic	r0, ip, lr
   24448:	str	r2, [sp, #20]
   2444c:	ldr	r2, [sp, #156]	; 0x9c
   24450:	ldr	r8, [sp, #100]	; 0x64
   24454:	str	r1, [sp, #104]	; 0x68
   24458:	ldr	r1, [sp, #128]	; 0x80
   2445c:	bic	ip, lr, ip
   24460:	str	r0, [sp, #56]	; 0x38
   24464:	ldr	r0, [sp, #128]	; 0x80
   24468:	bic	lr, r1, r9
   2446c:	bic	r0, r9, r0
   24470:	orr	r1, lr, ip
   24474:	str	r0, [sp, #52]	; 0x34
   24478:	ldr	r0, [sp, #124]	; 0x7c
   2447c:	bic	r0, r2, r0
   24480:	str	r0, [sp, #48]	; 0x30
   24484:	ldr	r0, [sp, #132]	; 0x84
   24488:	bic	r0, r5, r0
   2448c:	str	r0, [sp, #44]	; 0x2c
   24490:	bic	r0, r6, r8
   24494:	bic	r6, r8, r6
   24498:	str	r0, [sp, #40]	; 0x28
   2449c:	ldr	r0, [sp, #160]	; 0xa0
   244a0:	bic	r0, r0, r3
   244a4:	str	r0, [sp, #36]	; 0x24
   244a8:	ldr	r0, [sp, #164]	; 0xa4
   244ac:	bic	r0, r0, r7
   244b0:	str	r0, [sp, #32]
   244b4:	ldr	r0, [sp, #148]	; 0x94
   244b8:	bic	r0, r0, r4
   244bc:	str	r0, [sp, #28]
   244c0:	ldr	r0, [sp, #124]	; 0x7c
   244c4:	bic	r0, r0, r2
   244c8:	mov	r9, r0
   244cc:	orr	r0, r1, r0
   244d0:	ldr	r1, [sp, #132]	; 0x84
   244d4:	bic	r1, r1, r5
   244d8:	orr	r5, r0, r1
   244dc:	ldr	r0, [sp, #160]	; 0xa0
   244e0:	orr	r5, r5, r6
   244e4:	bic	r3, r3, r0
   244e8:	ldr	r0, [sp, #164]	; 0xa4
   244ec:	orr	r5, r5, r3
   244f0:	bic	r7, r7, r0
   244f4:	ldr	r0, [sp, #148]	; 0x94
   244f8:	orr	r2, r5, r7
   244fc:	bic	r4, r4, r0
   24500:	orrs	r2, r2, r4
   24504:	beq	245e4 <__assert_fail@plt+0x13134>
   24508:	ldr	r2, [sp, #152]	; 0x98
   2450c:	add	r5, sp, #168	; 0xa8
   24510:	add	r0, r5, r2, lsl #5
   24514:	str	ip, [r5, r2, lsl #5]
   24518:	str	lr, [r0, #4]
   2451c:	str	r9, [r0, #8]
   24520:	str	r1, [r0, #12]
   24524:	str	r6, [r0, #16]
   24528:	str	r3, [r0, #20]
   2452c:	str	r7, [r0, #24]
   24530:	str	r4, [r0, #28]
   24534:	ldr	r0, [sp, #92]	; 0x5c
   24538:	ldr	r1, [sp, #88]	; 0x58
   2453c:	sub	lr, fp, #6144	; 0x1800
   24540:	mov	r6, r2
   24544:	str	r1, [r0, #-28]	; 0xffffffe4
   24548:	ldr	r0, [sp, #84]	; 0x54
   2454c:	ldr	r1, [sp, #20]
   24550:	str	r0, [sl, #4]
   24554:	ldr	r0, [sp, #96]	; 0x60
   24558:	str	r0, [sl, #8]
   2455c:	ldr	r0, [sp, #80]	; 0x50
   24560:	str	r0, [sl, #12]
   24564:	ldr	r0, [sp, #76]	; 0x4c
   24568:	str	r0, [sl, #16]
   2456c:	ldr	r0, [sp, #72]	; 0x48
   24570:	str	r0, [sl, #20]
   24574:	ldr	r0, [sp, #68]	; 0x44
   24578:	str	r0, [sl, #24]
   2457c:	ldr	r0, [sp, #104]	; 0x68
   24580:	str	r1, [r5, r0]
   24584:	add	r0, r2, r2, lsl #1
   24588:	sub	r1, lr, #104	; 0x68
   2458c:	add	r4, r1, r0, lsl #2
   24590:	ldr	r1, [sp, #144]	; 0x90
   24594:	mov	r5, r4
   24598:	ldr	r0, [r1, #4]
   2459c:	str	r0, [r5, #4]!
   245a0:	ldr	r7, [r1, #4]
   245a4:	cmp	r7, #1
   245a8:	blt	245fc <__assert_fail@plt+0x1314c>
   245ac:	str	r0, [r4]
   245b0:	lsl	r0, r0, #2
   245b4:	bl	29054 <__assert_fail@plt+0x17ba4>
   245b8:	ldr	r8, [sp, #36]	; 0x24
   245bc:	ldr	sl, [sp, #28]
   245c0:	cmp	r0, #0
   245c4:	str	r0, [r4, #8]
   245c8:	beq	24ce8 <__assert_fail@plt+0x13838>
   245cc:	ldr	r1, [sp, #144]	; 0x90
   245d0:	lsl	r2, r7, #2
   245d4:	ldr	r1, [r1, #8]
   245d8:	bl	11258 <memcpy@plt>
   245dc:	ldr	r1, [sp, #24]
   245e0:	b	24618 <__assert_fail@plt+0x13168>
   245e4:	ldr	r4, [sp, #12]
   245e8:	ldr	r1, [sp, #24]
   245ec:	ldr	r8, [sp, #36]	; 0x24
   245f0:	ldr	r5, [sp, #32]
   245f4:	ldr	sl, [sp, #28]
   245f8:	b	24628 <__assert_fail@plt+0x13178>
   245fc:	ldr	r1, [sp, #24]
   24600:	ldr	r8, [sp, #36]	; 0x24
   24604:	ldr	sl, [sp, #28]
   24608:	mov	r0, #0
   2460c:	str	r0, [r4]
   24610:	str	r0, [r4, #4]
   24614:	str	r0, [r4, #8]
   24618:	ldr	r4, [sp, #12]
   2461c:	ldr	r5, [sp, #32]
   24620:	add	r6, r6, #1
   24624:	str	r6, [sp, #152]	; 0x98
   24628:	ldr	r0, [r4, #12]
   2462c:	ldr	r7, [sp, #144]	; 0x90
   24630:	ldr	r1, [r0, r1, lsl #2]
   24634:	mov	r0, r7
   24638:	bl	1fda4 <__assert_fail@plt+0xe8f4>
   2463c:	ldr	r6, [sp, #40]	; 0x28
   24640:	cmp	r0, #0
   24644:	beq	24ca8 <__assert_fail@plt+0x137f8>
   24648:	ldr	r2, [sp, #56]	; 0x38
   2464c:	ldr	r4, [sp, #52]	; 0x34
   24650:	ldr	r3, [sp, #48]	; 0x30
   24654:	ldr	r1, [sp, #44]	; 0x2c
   24658:	ldr	r9, [sp, #64]	; 0x40
   2465c:	mov	ip, r5
   24660:	mov	lr, r8
   24664:	str	sl, [sp, #148]	; 0x94
   24668:	str	r6, [sp, #120]	; 0x78
   2466c:	orr	r0, r4, r2
   24670:	str	r1, [sp, #116]	; 0x74
   24674:	str	r3, [sp, #156]	; 0x9c
   24678:	str	r4, [sp, #112]	; 0x70
   2467c:	str	r2, [sp, #108]	; 0x6c
   24680:	orr	r0, r0, r3
   24684:	orr	r0, r0, r1
   24688:	orr	r0, r0, r6
   2468c:	orr	r0, r0, r8
   24690:	orr	r0, r0, r5
   24694:	orrs	r0, r0, sl
   24698:	mov	r0, r1
   2469c:	ldr	r1, [sp, #104]	; 0x68
   246a0:	bne	2431c <__assert_fail@plt+0x12e6c>
   246a4:	mov	ip, r5
   246a8:	str	r4, [sp, #112]	; 0x70
   246ac:	ldr	r4, [sp, #152]	; 0x98
   246b0:	ldr	r5, [sp, #136]	; 0x88
   246b4:	mov	lr, r8
   246b8:	str	sl, [sp, #148]	; 0x94
   246bc:	str	r6, [sp, #120]	; 0x78
   246c0:	str	r0, [sp, #116]	; 0x74
   246c4:	mov	r8, r3
   246c8:	str	r2, [sp, #108]	; 0x6c
   246cc:	ldr	r0, [sp, #148]	; 0x94
   246d0:	ldr	r2, [sp, #24]
   246d4:	str	r0, [fp, #-1052]	; 0xfffffbe4
   246d8:	ldr	r0, [sp, #120]	; 0x78
   246dc:	str	ip, [fp, #-1056]	; 0xfffffbe0
   246e0:	str	lr, [fp, #-1060]	; 0xfffffbdc
   246e4:	ldr	lr, [sp, #140]	; 0x8c
   246e8:	str	r0, [fp, #-1064]	; 0xfffffbd8
   246ec:	ldr	r0, [sp, #116]	; 0x74
   246f0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   246f4:	ldr	r0, [sp, #112]	; 0x70
   246f8:	str	r8, [fp, #-1072]	; 0xfffffbd0
   246fc:	ldr	r8, [sp, #12]
   24700:	str	r0, [fp, #-1076]	; 0xfffffbcc
   24704:	ldr	r0, [sp, #108]	; 0x6c
   24708:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2470c:	cmp	r5, r4
   24710:	bne	23dec <__assert_fail@plt+0x1293c>
   24714:	sub	lr, fp, #1024	; 0x400
   24718:	mov	r1, r8
   2471c:	sub	r7, lr, #56	; 0x38
   24720:	sub	lr, fp, #6144	; 0x1800
   24724:	mov	sl, r1
   24728:	mov	r0, r7
   2472c:	mov	r8, r7
   24730:	vld1.32	{d16-d17}, [r0]!
   24734:	vld1.64	{d18-d19}, [r0]
   24738:	add	r0, sp, #168	; 0xa8
   2473c:	add	r0, r0, r5, lsl #5
   24740:	vst1.32	{d16-d17}, [r0]!
   24744:	vst1.32	{d18-d19}, [r0]
   24748:	ldr	r0, [r1, #12]
   2474c:	mov	r1, #1
   24750:	ldr	r4, [r0, r2, lsl #2]
   24754:	add	r0, r5, r5, lsl #1
   24758:	sub	r2, lr, #104	; 0x68
   2475c:	add	r7, r2, r0, lsl #2
   24760:	str	r1, [r2, r0, lsl #2]
   24764:	mov	r0, #4
   24768:	mov	r6, r7
   2476c:	str	r1, [r6, #4]!
   24770:	bl	29054 <__assert_fail@plt+0x17ba4>
   24774:	cmp	r0, #0
   24778:	str	r0, [r7, #8]
   2477c:	beq	24d58 <__assert_fail@plt+0x138a8>
   24780:	ldr	lr, [sp, #140]	; 0x8c
   24784:	ldr	r2, [sp, #24]
   24788:	str	r4, [r0]
   2478c:	mov	r0, r8
   24790:	add	r4, r5, #1
   24794:	mov	r8, sl
   24798:	b	23de4 <__assert_fail@plt+0x12934>
   2479c:	mov	r4, r6
   247a0:	b	23dec <__assert_fail@plt+0x1293c>
   247a4:	cmp	r4, #0
   247a8:	ble	24d74 <__assert_fail@plt+0x138c4>
   247ac:	mov	r6, r4
   247b0:	mov	r4, #0
   247b4:	add	r0, r6, #1
   247b8:	str	r4, [fp, #-3136]	; 0xfffff3c0
   247bc:	str	r0, [fp, #-3140]	; 0xfffff3bc
   247c0:	lsl	r0, r0, #2
   247c4:	bl	29054 <__assert_fail@plt+0x17ba4>
   247c8:	ldr	r1, [sp, #140]	; 0x8c
   247cc:	cmp	r0, #0
   247d0:	str	r0, [fp, #-3132]	; 0xfffff3c4
   247d4:	moveq	r4, #12
   247d8:	cmp	r0, #0
   247dc:	str	r4, [fp, #-56]	; 0xffffffc8
   247e0:	beq	24da4 <__assert_fail@plt+0x138f4>
   247e4:	vmov.i32	q8, #0	; 0x00000000
   247e8:	sub	lr, fp, #3072	; 0xc00
   247ec:	mov	r3, #0
   247f0:	mov	sl, #0
   247f4:	mov	r7, #0
   247f8:	mov	r2, #0
   247fc:	mov	r8, #0
   24800:	str	r6, [sp, #152]	; 0x98
   24804:	sub	r0, lr, #104	; 0x68
   24808:	sub	lr, fp, #3072	; 0xc00
   2480c:	sub	r9, lr, #68	; 0x44
   24810:	sub	lr, fp, #3072	; 0xc00
   24814:	vst1.64	{d16-d17}, [r0]!
   24818:	vst1.64	{d16-d17}, [r0]
   2481c:	sub	r0, lr, #56	; 0x38
   24820:	str	r0, [sp, #124]	; 0x7c
   24824:	mov	r0, #0
   24828:	str	r0, [sp, #144]	; 0x90
   2482c:	mov	r0, #0
   24830:	str	r0, [sp, #148]	; 0x94
   24834:	mov	r0, #0
   24838:	str	r0, [sp, #156]	; 0x9c
   2483c:	mov	r0, #0
   24840:	str	r0, [sp, #160]	; 0xa0
   24844:	mov	r0, #0
   24848:	str	r0, [sp, #164]	; 0xa4
   2484c:	mov	r0, #0
   24850:	str	r0, [sp, #128]	; 0x80
   24854:	b	24914 <__assert_fail@plt+0x13464>
   24858:	ldrsb	r0, [r7, #52]	; 0x34
   2485c:	cmn	r0, #1
   24860:	ble	249d0 <__assert_fail@plt+0x13520>
   24864:	sub	lr, fp, #3072	; 0xc00
   24868:	sub	r0, lr, #56	; 0x38
   2486c:	sub	lr, fp, #2048	; 0x800
   24870:	str	r7, [r0, r8, lsl #2]
   24874:	sub	r0, lr, #56	; 0x38
   24878:	str	r7, [r0, r8, lsl #2]
   2487c:	add	r0, sp, #168	; 0xa8
   24880:	ldr	r2, [sp, #164]	; 0xa4
   24884:	mov	r1, r0
   24888:	ldr	r0, [r0, r8, lsl #5]
   2488c:	orr	r2, r2, r0
   24890:	add	r0, r1, r8, lsl #5
   24894:	add	r8, r8, #1
   24898:	str	r2, [sp, #164]	; 0xa4
   2489c:	ldr	r2, [r0, #4]
   248a0:	ldr	r1, [r0, #8]
   248a4:	ldr	r7, [r0, #12]
   248a8:	ldr	r5, [r0, #16]
   248ac:	ldr	r4, [r0, #20]
   248b0:	ldr	r6, [r0, #24]
   248b4:	ldr	r0, [r0, #28]
   248b8:	orr	sl, sl, r0
   248bc:	ldr	r0, [sp, #144]	; 0x90
   248c0:	orr	r0, r0, r6
   248c4:	ldr	r6, [sp, #148]	; 0x94
   248c8:	str	r0, [sp, #144]	; 0x90
   248cc:	ldr	r0, [sp, #152]	; 0x98
   248d0:	orr	r6, r6, r4
   248d4:	str	r6, [sp, #148]	; 0x94
   248d8:	ldr	r6, [sp, #156]	; 0x9c
   248dc:	cmp	r8, r0
   248e0:	orr	r6, r6, r5
   248e4:	str	r6, [sp, #156]	; 0x9c
   248e8:	ldr	r6, [sp, #160]	; 0xa0
   248ec:	orr	r6, r6, r7
   248f0:	ldr	r7, [sp, #132]	; 0x84
   248f4:	str	r6, [sp, #160]	; 0xa0
   248f8:	mov	r6, r0
   248fc:	orr	r7, r7, r1
   24900:	ldr	r1, [sp, #136]	; 0x88
   24904:	orr	r1, r1, r2
   24908:	mov	r2, r1
   2490c:	ldr	r1, [sp, #140]	; 0x8c
   24910:	beq	24aa4 <__assert_fail@plt+0x135f4>
   24914:	mov	r0, #0
   24918:	sub	lr, fp, #6144	; 0x1800
   2491c:	str	r2, [sp, #136]	; 0x88
   24920:	str	r7, [sp, #132]	; 0x84
   24924:	str	r0, [fp, #-3136]	; 0xfffff3c0
   24928:	add	r0, r8, r8, lsl #1
   2492c:	sub	r2, lr, #104	; 0x68
   24930:	add	r0, r2, r0, lsl #2
   24934:	ldr	r7, [r0, #4]
   24938:	cmp	r7, #1
   2493c:	blt	24998 <__assert_fail@plt+0x134e8>
   24940:	ldr	r4, [r0, #8]
   24944:	mov	r5, #0
   24948:	b	24958 <__assert_fail@plt+0x134a8>
   2494c:	add	r5, r5, #1
   24950:	cmp	r5, r7
   24954:	bge	24994 <__assert_fail@plt+0x134e4>
   24958:	ldr	r0, [r4, r5, lsl #2]
   2495c:	ldr	r2, [r1, #12]
   24960:	ldr	r0, [r2, r0, lsl #2]
   24964:	cmn	r0, #1
   24968:	beq	2494c <__assert_fail@plt+0x1349c>
   2496c:	ldr	r1, [r1, #24]
   24970:	add	r0, r0, r0, lsl #1
   24974:	add	r1, r1, r0, lsl #2
   24978:	mov	r0, r9
   2497c:	bl	1fc18 <__assert_fail@plt+0xe768>
   24980:	ldr	r1, [sp, #140]	; 0x8c
   24984:	mov	r3, #0
   24988:	cmp	r0, #0
   2498c:	beq	2494c <__assert_fail@plt+0x1349c>
   24990:	b	24c38 <__assert_fail@plt+0x13788>
   24994:	str	r3, [fp, #-56]	; 0xffffffc8
   24998:	sub	r0, fp, #56	; 0x38
   2499c:	mov	r2, r9
   249a0:	mov	r3, #0
   249a4:	bl	1ff18 <__assert_fail@plt+0xea68>
   249a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   249ac:	mov	r7, r0
   249b0:	sub	lr, fp, #1024	; 0x400
   249b4:	sub	r0, lr, #56	; 0x38
   249b8:	cmp	r7, #0
   249bc:	str	r7, [r0, r8, lsl #2]
   249c0:	bne	24858 <__assert_fail@plt+0x133a8>
   249c4:	cmp	r3, #0
   249c8:	beq	24858 <__assert_fail@plt+0x133a8>
   249cc:	b	24a64 <__assert_fail@plt+0x135b4>
   249d0:	ldr	r1, [sp, #140]	; 0x8c
   249d4:	sub	r0, fp, #56	; 0x38
   249d8:	mov	r2, r9
   249dc:	mov	r3, #1
   249e0:	bl	1ff18 <__assert_fail@plt+0xea68>
   249e4:	sub	lr, fp, #2048	; 0x800
   249e8:	cmp	r0, #0
   249ec:	sub	r1, lr, #56	; 0x38
   249f0:	str	r0, [r1, r8, lsl #2]
   249f4:	bne	24a04 <__assert_fail@plt+0x13554>
   249f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   249fc:	cmp	r1, #0
   24a00:	bne	24a64 <__assert_fail@plt+0x135b4>
   24a04:	cmp	r7, r0
   24a08:	beq	24a30 <__assert_fail@plt+0x13580>
   24a0c:	ldr	r1, [sp, #140]	; 0x8c
   24a10:	ldr	r2, [sp, #128]	; 0x80
   24a14:	ldr	r0, [r1, #92]	; 0x5c
   24a18:	cmp	r0, #1
   24a1c:	mov	r0, #0
   24a20:	movwgt	r0, #1
   24a24:	orr	r2, r2, r0
   24a28:	str	r2, [sp, #128]	; 0x80
   24a2c:	b	24a34 <__assert_fail@plt+0x13584>
   24a30:	ldr	r1, [sp, #140]	; 0x8c
   24a34:	sub	r0, fp, #56	; 0x38
   24a38:	mov	r2, r9
   24a3c:	mov	r3, #2
   24a40:	bl	1ff18 <__assert_fail@plt+0xea68>
   24a44:	ldr	r3, [fp, #-56]	; 0xffffffc8
   24a48:	sub	lr, fp, #3072	; 0xc00
   24a4c:	cmp	r0, #0
   24a50:	sub	r1, lr, #56	; 0x38
   24a54:	str	r0, [r1, r8, lsl #2]
   24a58:	bne	2487c <__assert_fail@plt+0x133cc>
   24a5c:	cmp	r3, #0
   24a60:	beq	2487c <__assert_fail@plt+0x133cc>
   24a64:	ldr	r0, [sp, #144]	; 0x90
   24a68:	str	sl, [fp, #-3148]	; 0xfffff3b4
   24a6c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   24a70:	ldr	r0, [sp, #148]	; 0x94
   24a74:	str	r0, [fp, #-3156]	; 0xfffff3ac
   24a78:	ldr	r0, [sp, #156]	; 0x9c
   24a7c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   24a80:	ldr	r0, [sp, #160]	; 0xa0
   24a84:	str	r0, [fp, #-3164]	; 0xfffff3a4
   24a88:	ldr	r0, [sp, #132]	; 0x84
   24a8c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   24a90:	ldr	r0, [sp, #136]	; 0x88
   24a94:	str	r0, [fp, #-3172]	; 0xfffff39c
   24a98:	ldr	r0, [sp, #164]	; 0xa4
   24a9c:	str	r0, [fp, #-3176]	; 0xfffff398
   24aa0:	b	24c78 <__assert_fail@plt+0x137c8>
   24aa4:	ldr	r0, [sp, #144]	; 0x90
   24aa8:	str	sl, [fp, #-3148]	; 0xfffff3b4
   24aac:	ldr	r9, [sp, #128]	; 0x80
   24ab0:	ldr	sl, [sp, #164]	; 0xa4
   24ab4:	str	r0, [fp, #-3152]	; 0xfffff3b0
   24ab8:	ldr	r0, [sp, #148]	; 0x94
   24abc:	tst	r9, #1
   24ac0:	str	r0, [fp, #-3156]	; 0xfffff3ac
   24ac4:	ldr	r0, [sp, #156]	; 0x9c
   24ac8:	str	r0, [fp, #-3160]	; 0xfffff3a8
   24acc:	ldr	r0, [sp, #160]	; 0xa0
   24ad0:	str	r0, [fp, #-3164]	; 0xfffff3a4
   24ad4:	mov	r0, #4
   24ad8:	str	r7, [fp, #-3168]	; 0xfffff3a0
   24adc:	str	r2, [fp, #-3172]	; 0xfffff39c
   24ae0:	str	sl, [fp, #-3176]	; 0xfffff398
   24ae4:	bne	24db0 <__assert_fail@plt+0x13900>
   24ae8:	mov	r1, #256	; 0x100
   24aec:	bl	29000 <__assert_fail@plt+0x17b50>
   24af0:	ldr	r1, [sp, #12]
   24af4:	cmp	r0, #0
   24af8:	str	r0, [r1, #44]	; 0x2c
   24afc:	beq	24c78 <__assert_fail@plt+0x137c8>
   24b00:	ldr	r4, [sp, #140]	; 0x8c
   24b04:	mov	r1, #0
   24b08:	mov	r3, sl
   24b0c:	mov	r2, #0
   24b10:	add	r8, sp, #168	; 0xa8
   24b14:	cmp	r3, #0
   24b18:	bne	24b38 <__assert_fail@plt+0x13688>
   24b1c:	b	24bb0 <__assert_fail@plt+0x13700>
   24b20:	sub	lr, fp, #3072	; 0xc00
   24b24:	add	r8, r8, #4
   24b28:	sub	r3, lr, #104	; 0x68
   24b2c:	ldr	r3, [r3, r2, lsl #2]
   24b30:	cmp	r3, #0
   24b34:	beq	24bb0 <__assert_fail@plt+0x13700>
   24b38:	add	r7, r4, r2, lsl #2
   24b3c:	lsl	r6, r2, #5
   24b40:	mov	r5, #1
   24b44:	add	ip, r7, #96	; 0x60
   24b48:	tst	r3, #1
   24b4c:	bne	24b6c <__assert_fail@plt+0x136bc>
   24b50:	lsr	r7, r3, #1
   24b54:	cmp	r1, r3, lsr #1
   24b58:	add	r6, r6, #1
   24b5c:	lsl	r5, r5, #1
   24b60:	mov	r3, r7
   24b64:	bne	24b48 <__assert_fail@plt+0x13698>
   24b68:	b	24bb0 <__assert_fail@plt+0x13700>
   24b6c:	mov	lr, #0
   24b70:	ldr	r7, [r8, lr, lsl #3]
   24b74:	add	lr, lr, #4
   24b78:	tst	r7, r5
   24b7c:	beq	24b70 <__assert_fail@plt+0x136c0>
   24b80:	ldr	r7, [ip]
   24b84:	sub	r4, fp, #2048	; 0x800
   24b88:	tst	r7, r5
   24b8c:	sub	r7, r4, #56	; 0x38
   24b90:	sub	r4, fp, #1024	; 0x400
   24b94:	sub	r4, r4, #56	; 0x38
   24b98:	moveq	r7, r4
   24b9c:	ldr	r4, [sp, #140]	; 0x8c
   24ba0:	add	r7, r7, lr
   24ba4:	ldr	r7, [r7, #-4]
   24ba8:	str	r7, [r0, r6, lsl #2]
   24bac:	b	24b50 <__assert_fail@plt+0x136a0>
   24bb0:	add	r2, r2, #1
   24bb4:	cmp	r2, #8
   24bb8:	bne	24b20 <__assert_fail@plt+0x13670>
   24bbc:	ldr	r5, [sp, #152]	; 0x98
   24bc0:	tst	sl, #1024	; 0x400
   24bc4:	beq	24c0c <__assert_fail@plt+0x1375c>
   24bc8:	add	r1, sp, #168	; 0xa8
   24bcc:	mov	r2, r5
   24bd0:	ldrb	r3, [r1, #1]
   24bd4:	tst	r3, #4
   24bd8:	bne	24bf8 <__assert_fail@plt+0x13748>
   24bdc:	ldr	r3, [sp, #124]	; 0x7c
   24be0:	add	r1, r1, #32
   24be4:	subs	r2, r2, #1
   24be8:	add	r3, r3, #4
   24bec:	str	r3, [sp, #124]	; 0x7c
   24bf0:	bne	24bd0 <__assert_fail@plt+0x13720>
   24bf4:	b	24c0c <__assert_fail@plt+0x1375c>
   24bf8:	ldr	r1, [sp, #124]	; 0x7c
   24bfc:	tst	r9, #1
   24c00:	ldr	r1, [r1]
   24c04:	str	r1, [r0, #40]	; 0x28
   24c08:	strne	r1, [r0, #1064]	; 0x428
   24c0c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   24c10:	bl	29220 <__assert_fail@plt+0x17d70>
   24c14:	sub	lr, fp, #6144	; 0x1800
   24c18:	sub	r0, lr, #104	; 0x68
   24c1c:	add	r4, r0, #8
   24c20:	ldr	r0, [r4], #12
   24c24:	bl	29220 <__assert_fail@plt+0x17d70>
   24c28:	subs	r5, r5, #1
   24c2c:	bne	24c20 <__assert_fail@plt+0x13770>
   24c30:	mov	r0, #1
   24c34:	b	24d94 <__assert_fail@plt+0x138e4>
   24c38:	ldr	r1, [sp, #144]	; 0x90
   24c3c:	str	sl, [fp, #-3148]	; 0xfffff3b4
   24c40:	str	r0, [fp, #-56]	; 0xffffffc8
   24c44:	str	r1, [fp, #-3152]	; 0xfffff3b0
   24c48:	ldr	r1, [sp, #148]	; 0x94
   24c4c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   24c50:	ldr	r1, [sp, #156]	; 0x9c
   24c54:	str	r1, [fp, #-3160]	; 0xfffff3a8
   24c58:	ldr	r1, [sp, #160]	; 0xa0
   24c5c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   24c60:	ldr	r1, [sp, #132]	; 0x84
   24c64:	str	r1, [fp, #-3168]	; 0xfffff3a0
   24c68:	ldr	r1, [sp, #136]	; 0x88
   24c6c:	str	r1, [fp, #-3172]	; 0xfffff39c
   24c70:	ldr	r1, [sp, #164]	; 0xa4
   24c74:	str	r1, [fp, #-3176]	; 0xfffff398
   24c78:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   24c7c:	bl	29220 <__assert_fail@plt+0x17d70>
   24c80:	cmp	r6, #1
   24c84:	blt	24d50 <__assert_fail@plt+0x138a0>
   24c88:	sub	lr, fp, #6144	; 0x1800
   24c8c:	sub	r0, lr, #104	; 0x68
   24c90:	add	r4, r0, #8
   24c94:	ldr	r0, [r4], #12
   24c98:	bl	29220 <__assert_fail@plt+0x17d70>
   24c9c:	subs	r6, r6, #1
   24ca0:	bne	24c94 <__assert_fail@plt+0x137e4>
   24ca4:	b	24d50 <__assert_fail@plt+0x138a0>
   24ca8:	ldr	r0, [sp, #44]	; 0x2c
   24cac:	str	sl, [fp, #-1052]	; 0xfffffbe4
   24cb0:	str	r5, [fp, #-1056]	; 0xfffffbe0
   24cb4:	str	r8, [fp, #-1060]	; 0xfffffbdc
   24cb8:	str	r6, [fp, #-1064]	; 0xfffffbd8
   24cbc:	ldr	r6, [sp, #152]	; 0x98
   24cc0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   24cc4:	ldr	r0, [sp, #48]	; 0x30
   24cc8:	str	r0, [fp, #-1072]	; 0xfffffbd0
   24ccc:	ldr	r0, [sp, #52]	; 0x34
   24cd0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   24cd4:	ldr	r0, [sp, #56]	; 0x38
   24cd8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   24cdc:	cmp	r6, #1
   24ce0:	bge	24d34 <__assert_fail@plt+0x13884>
   24ce4:	b	24d50 <__assert_fail@plt+0x138a0>
   24ce8:	ldr	r0, [sp, #32]
   24cec:	str	sl, [fp, #-1052]	; 0xfffffbe4
   24cf0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   24cf4:	ldr	r0, [sp, #40]	; 0x28
   24cf8:	str	r8, [fp, #-1060]	; 0xfffffbdc
   24cfc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   24d00:	ldr	r0, [sp, #44]	; 0x2c
   24d04:	str	r0, [fp, #-1068]	; 0xfffffbd4
   24d08:	ldr	r0, [sp, #48]	; 0x30
   24d0c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   24d10:	ldr	r0, [sp, #52]	; 0x34
   24d14:	str	r0, [fp, #-1076]	; 0xfffffbcc
   24d18:	ldr	r0, [sp, #56]	; 0x38
   24d1c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   24d20:	mov	r0, #0
   24d24:	str	r0, [r5]
   24d28:	str	r0, [r4]
   24d2c:	cmp	r6, #1
   24d30:	blt	24d50 <__assert_fail@plt+0x138a0>
   24d34:	sub	lr, fp, #6144	; 0x1800
   24d38:	sub	r0, lr, #104	; 0x68
   24d3c:	add	r4, r0, #8
   24d40:	ldr	r0, [r4], #12
   24d44:	bl	29220 <__assert_fail@plt+0x17d70>
   24d48:	subs	r6, r6, #1
   24d4c:	bne	24d40 <__assert_fail@plt+0x13890>
   24d50:	mov	r0, #0
   24d54:	b	24d94 <__assert_fail@plt+0x138e4>
   24d58:	mov	r0, #0
   24d5c:	str	r0, [r6]
   24d60:	str	r0, [r7]
   24d64:	mov	r6, r5
   24d68:	cmp	r6, #1
   24d6c:	bge	24d34 <__assert_fail@plt+0x13884>
   24d70:	b	24d50 <__assert_fail@plt+0x138a0>
   24d74:	mov	r0, #0
   24d78:	bne	24d94 <__assert_fail@plt+0x138e4>
   24d7c:	mov	r0, #4
   24d80:	mov	r1, #256	; 0x100
   24d84:	bl	29000 <__assert_fail@plt+0x17b50>
   24d88:	cmp	r0, #0
   24d8c:	str	r0, [r8, #44]	; 0x2c
   24d90:	movwne	r0, #1
   24d94:	sub	sp, fp, #48	; 0x30
   24d98:	vpop	{d8-d9}
   24d9c:	add	sp, sp, #4
   24da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24da4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   24da8:	bl	29220 <__assert_fail@plt+0x17d70>
   24dac:	b	24c88 <__assert_fail@plt+0x137d8>
   24db0:	mov	r1, #512	; 0x200
   24db4:	bl	29000 <__assert_fail@plt+0x17b50>
   24db8:	ldr	r1, [sp, #12]
   24dbc:	cmp	r0, #0
   24dc0:	str	r0, [r1, #48]	; 0x30
   24dc4:	beq	24c78 <__assert_fail@plt+0x137c8>
   24dc8:	sub	lr, fp, #1024	; 0x400
   24dcc:	mov	r3, #0
   24dd0:	add	r8, sp, #168	; 0xa8
   24dd4:	mov	r5, sl
   24dd8:	mov	r6, #0
   24ddc:	sub	r1, lr, #56	; 0x38
   24de0:	sub	lr, fp, #2048	; 0x800
   24de4:	sub	ip, r1, #4
   24de8:	sub	r1, lr, #56	; 0x38
   24dec:	sub	lr, r1, #4
   24df0:	cmp	r5, #0
   24df4:	bne	24e14 <__assert_fail@plt+0x13964>
   24df8:	b	24e80 <__assert_fail@plt+0x139d0>
   24dfc:	sub	r1, fp, #3072	; 0xc00
   24e00:	add	r8, r8, #4
   24e04:	sub	r1, r1, #104	; 0x68
   24e08:	ldr	r5, [r1, r6, lsl #2]
   24e0c:	cmp	r5, #0
   24e10:	beq	24e80 <__assert_fail@plt+0x139d0>
   24e14:	lsl	r4, r6, #5
   24e18:	mov	r1, #1
   24e1c:	tst	r5, #1
   24e20:	bne	24e40 <__assert_fail@plt+0x13990>
   24e24:	lsr	r2, r5, #1
   24e28:	cmp	r3, r5, lsr #1
   24e2c:	add	r4, r4, #1
   24e30:	lsl	r1, r1, #1
   24e34:	mov	r5, r2
   24e38:	bne	24e1c <__assert_fail@plt+0x1396c>
   24e3c:	b	24e80 <__assert_fail@plt+0x139d0>
   24e40:	mov	r2, r8
   24e44:	mov	sl, ip
   24e48:	mov	r9, lr
   24e4c:	ldr	r7, [r2], #32
   24e50:	add	sl, sl, #4
   24e54:	add	r9, r9, #4
   24e58:	tst	r7, r1
   24e5c:	beq	24e4c <__assert_fail@plt+0x1399c>
   24e60:	ldr	r2, [sl]
   24e64:	mov	r7, r0
   24e68:	str	r2, [r7, r4, lsl #2]!
   24e6c:	ldr	r2, [r9]
   24e70:	ldr	r9, [sp, #128]	; 0x80
   24e74:	ldr	sl, [sp, #164]	; 0xa4
   24e78:	str	r2, [r7, #1024]	; 0x400
   24e7c:	b	24e24 <__assert_fail@plt+0x13974>
   24e80:	add	r6, r6, #1
   24e84:	cmp	r6, #8
   24e88:	bne	24dfc <__assert_fail@plt+0x1394c>
   24e8c:	b	24bbc <__assert_fail@plt+0x1370c>
   24e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e94:	add	fp, sp, #28
   24e98:	sub	sp, sp, #52	; 0x34
   24e9c:	ldr	r7, [r1, #8]
   24ea0:	ldr	r4, [r1, #12]
   24ea4:	mov	r5, r0
   24ea8:	mov	r0, #1
   24eac:	mov	r9, r1
   24eb0:	str	r0, [sp, #44]	; 0x2c
   24eb4:	str	r0, [sp, #40]	; 0x28
   24eb8:	mov	r0, #4
   24ebc:	bl	29054 <__assert_fail@plt+0x17ba4>
   24ec0:	cmp	r0, #0
   24ec4:	str	r0, [sp, #48]	; 0x30
   24ec8:	beq	2531c <__assert_fail@plt+0x13e6c>
   24ecc:	str	r7, [r0]
   24ed0:	add	r3, sp, #40	; 0x28
   24ed4:	mov	r0, r5
   24ed8:	mov	r1, r9
   24edc:	mov	r2, r4
   24ee0:	str	r5, [sp, #20]
   24ee4:	bl	25338 <__assert_fail@plt+0x13e88>
   24ee8:	cmp	r0, #0
   24eec:	bne	25314 <__assert_fail@plt+0x13e64>
   24ef0:	add	r0, r9, #16
   24ef4:	mov	r5, r4
   24ef8:	mov	r1, #0
   24efc:	str	r9, [sp, #12]
   24f00:	str	r0, [sp, #16]
   24f04:	cmp	r5, #1
   24f08:	bge	24f38 <__assert_fail@plt+0x13a88>
   24f0c:	b	252d4 <__assert_fail@plt+0x13e24>
   24f10:	mov	r0, r7
   24f14:	mov	r1, r9
   24f18:	mov	r2, r5
   24f1c:	add	r3, sp, #40	; 0x28
   24f20:	bl	25338 <__assert_fail@plt+0x13e88>
   24f24:	ldr	r1, [sp, #8]
   24f28:	cmp	r0, #0
   24f2c:	bne	25314 <__assert_fail@plt+0x13e64>
   24f30:	cmp	r5, #1
   24f34:	blt	252d4 <__assert_fail@plt+0x13e24>
   24f38:	ldr	r0, [r9]
   24f3c:	ldr	r7, [sp, #20]
   24f40:	ldr	r2, [r0, r5, lsl #2]
   24f44:	cmp	r2, #0
   24f48:	mov	r2, #0
   24f4c:	addeq	r2, r1, #1
   24f50:	ldr	r1, [r7, #120]	; 0x78
   24f54:	cmp	r2, r1
   24f58:	bgt	252dc <__assert_fail@plt+0x13e2c>
   24f5c:	mov	r0, #0
   24f60:	str	r5, [sp, #24]
   24f64:	sub	r5, r5, #1
   24f68:	str	r2, [sp, #8]
   24f6c:	str	r0, [sp, #44]	; 0x2c
   24f70:	ldr	r0, [r7, #100]	; 0x64
   24f74:	ldr	r1, [r0, r5, lsl #2]
   24f78:	cmp	r1, #0
   24f7c:	beq	24f10 <__assert_fail@plt+0x13a60>
   24f80:	ldr	r0, [r1, #20]
   24f84:	cmp	r0, #1
   24f88:	blt	24f10 <__assert_fail@plt+0x13a60>
   24f8c:	ldr	r6, [r7, #84]	; 0x54
   24f90:	mov	r8, #0
   24f94:	str	r5, [sp, #28]
   24f98:	str	r1, [sp, #36]	; 0x24
   24f9c:	str	r6, [sp, #32]
   24fa0:	b	24fe4 <__assert_fail@plt+0x13b34>
   24fa4:	ldr	r2, [sp, #40]	; 0x28
   24fa8:	cmp	r2, #0
   24fac:	beq	251a4 <__assert_fail@plt+0x13cf4>
   24fb0:	ldr	r1, [sp, #44]	; 0x2c
   24fb4:	cmp	r1, #0
   24fb8:	bne	251cc <__assert_fail@plt+0x13d1c>
   24fbc:	ldr	r0, [sp, #48]	; 0x30
   24fc0:	str	sl, [r0]
   24fc4:	ldr	r0, [sp, #44]	; 0x2c
   24fc8:	add	r0, r0, #1
   24fcc:	str	r0, [sp, #44]	; 0x2c
   24fd0:	ldr	r1, [sp, #36]	; 0x24
   24fd4:	add	r8, r8, #1
   24fd8:	ldr	r0, [r1, #20]
   24fdc:	cmp	r8, r0
   24fe0:	bge	24f10 <__assert_fail@plt+0x13a60>
   24fe4:	ldr	r0, [r1, #24]
   24fe8:	ldr	sl, [r0, r8, lsl #2]
   24fec:	ldr	r0, [r6]
   24ff0:	add	r0, r0, sl, lsl #3
   24ff4:	ldrb	r0, [r0, #6]
   24ff8:	tst	r0, #16
   24ffc:	bne	2509c <__assert_fail@plt+0x13bec>
   25000:	ldr	r0, [r6]
   25004:	mov	r2, r5
   25008:	add	r1, r0, sl, lsl #3
   2500c:	mov	r0, r7
   25010:	bl	23b4c <__assert_fail@plt+0x1269c>
   25014:	cmp	r0, #0
   25018:	beq	24fd0 <__assert_fail@plt+0x13b20>
   2501c:	ldr	r0, [r9]
   25020:	ldr	r1, [sp, #24]
   25024:	ldr	r0, [r0, r1, lsl #2]
   25028:	cmp	r0, #0
   2502c:	beq	24fd0 <__assert_fail@plt+0x13b20>
   25030:	ldr	r2, [r0, #8]
   25034:	cmp	r2, #1
   25038:	blt	24fd0 <__assert_fail@plt+0x13b20>
   2503c:	ldr	r1, [r6, #12]
   25040:	ldr	r0, [r0, #12]
   25044:	subs	r3, r2, #1
   25048:	mov	r2, #0
   2504c:	ldr	r1, [r1, sl, lsl #2]
   25050:	beq	25078 <__assert_fail@plt+0x13bc8>
   25054:	mov	r4, #1
   25058:	add	r7, r2, r3
   2505c:	lsr	r6, r7, #1
   25060:	ldr	r5, [r0, r6, lsl #2]
   25064:	cmp	r5, r1
   25068:	addlt	r2, r4, r7, lsr #1
   2506c:	movge	r3, r6
   25070:	cmp	r2, r3
   25074:	bcc	25058 <__assert_fail@plt+0x13ba8>
   25078:	ldr	r2, [r0, r2, lsl #2]
   2507c:	ldr	r9, [sp, #12]
   25080:	ldr	r7, [sp, #20]
   25084:	ldr	r5, [sp, #28]
   25088:	ldr	r6, [sp, #32]
   2508c:	mov	r0, #1
   25090:	cmp	r2, r1
   25094:	bne	24fd0 <__assert_fail@plt+0x13b20>
   25098:	b	2516c <__assert_fail@plt+0x13cbc>
   2509c:	ldr	r4, [r7, #84]	; 0x54
   250a0:	ldr	r6, [r9, #12]
   250a4:	mov	r1, sl
   250a8:	mov	r2, r7
   250ac:	mov	r3, r5
   250b0:	mov	r0, r4
   250b4:	bl	237e8 <__assert_fail@plt+0x12338>
   250b8:	cmp	r0, #1
   250bc:	blt	250d8 <__assert_fail@plt+0x13c28>
   250c0:	add	r1, r0, r5
   250c4:	cmp	r1, r6
   250c8:	ble	250e8 <__assert_fail@plt+0x13c38>
   250cc:	ldr	r5, [sp, #28]
   250d0:	ldr	r6, [sp, #32]
   250d4:	b	2516c <__assert_fail@plt+0x13cbc>
   250d8:	ldr	r6, [sp, #32]
   250dc:	cmp	r0, #0
   250e0:	bne	2516c <__assert_fail@plt+0x13cbc>
   250e4:	b	25000 <__assert_fail@plt+0x13b50>
   250e8:	ldr	r2, [r9]
   250ec:	ldr	r5, [sp, #28]
   250f0:	ldr	r6, [sp, #32]
   250f4:	ldr	r2, [r2, r1, lsl #2]
   250f8:	cmp	r2, #0
   250fc:	beq	25000 <__assert_fail@plt+0x13b50>
   25100:	ldr	r3, [r2, #8]
   25104:	cmp	r3, #1
   25108:	blt	25000 <__assert_fail@plt+0x13b50>
   2510c:	ldr	r1, [r4, #12]
   25110:	ldr	r2, [r2, #12]
   25114:	subs	r4, r3, #1
   25118:	mov	r3, #0
   2511c:	ldr	r1, [r1, sl, lsl #2]
   25120:	beq	25148 <__assert_fail@plt+0x13c98>
   25124:	mov	ip, #1
   25128:	add	r5, r3, r4
   2512c:	lsr	r6, r5, #1
   25130:	ldr	r7, [r2, r6, lsl #2]
   25134:	cmp	r7, r1
   25138:	addlt	r3, ip, r5, lsr #1
   2513c:	movge	r4, r6
   25140:	cmp	r3, r4
   25144:	bcc	25128 <__assert_fail@plt+0x13c78>
   25148:	ldr	r9, [sp, #12]
   2514c:	ldr	r7, [sp, #20]
   25150:	ldr	r5, [sp, #28]
   25154:	ldr	r6, [sp, #32]
   25158:	cmp	r0, #0
   2515c:	beq	25000 <__assert_fail@plt+0x13b50>
   25160:	ldr	r2, [r2, r3, lsl #2]
   25164:	cmp	r2, r1
   25168:	bne	25000 <__assert_fail@plt+0x13b50>
   2516c:	ldr	r1, [r9, #20]
   25170:	cmp	r1, #0
   25174:	beq	24fa4 <__assert_fail@plt+0x13af4>
   25178:	ldr	r1, [r6, #12]
   2517c:	add	r3, r0, r5
   25180:	mov	r0, r7
   25184:	ldr	r2, [r1, sl, lsl #2]
   25188:	ldr	r1, [sp, #16]
   2518c:	str	sl, [sp]
   25190:	str	r5, [sp, #4]
   25194:	bl	264dc <__assert_fail@plt+0x1502c>
   25198:	cmp	r0, #0
   2519c:	beq	24fa4 <__assert_fail@plt+0x13af4>
   251a0:	b	24fd0 <__assert_fail@plt+0x13b20>
   251a4:	mov	r0, #1
   251a8:	str	r0, [sp, #44]	; 0x2c
   251ac:	str	r0, [sp, #40]	; 0x28
   251b0:	mov	r0, #4
   251b4:	bl	29054 <__assert_fail@plt+0x17ba4>
   251b8:	cmp	r0, #0
   251bc:	str	r0, [sp, #48]	; 0x30
   251c0:	beq	25300 <__assert_fail@plt+0x13e50>
   251c4:	str	sl, [r0]
   251c8:	b	24fd0 <__assert_fail@plt+0x13b20>
   251cc:	cmp	r2, r1
   251d0:	bne	251fc <__assert_fail@plt+0x13d4c>
   251d4:	lsl	r0, r2, #1
   251d8:	lsl	r1, r2, #3
   251dc:	str	r0, [sp, #40]	; 0x28
   251e0:	ldr	r0, [sp, #48]	; 0x30
   251e4:	bl	29084 <__assert_fail@plt+0x17bd4>
   251e8:	cmp	r0, #0
   251ec:	beq	25330 <__assert_fail@plt+0x13e80>
   251f0:	str	r0, [sp, #48]	; 0x30
   251f4:	ldr	r1, [sp, #44]	; 0x2c
   251f8:	b	25200 <__assert_fail@plt+0x13d50>
   251fc:	ldr	r0, [sp, #48]	; 0x30
   25200:	ldr	r2, [r0]
   25204:	cmp	r2, sl
   25208:	ble	25254 <__assert_fail@plt+0x13da4>
   2520c:	cmp	r1, #1
   25210:	blt	252cc <__assert_fail@plt+0x13e1c>
   25214:	ands	r3, r1, #3
   25218:	sub	r2, r1, #1
   2521c:	beq	25240 <__assert_fail@plt+0x13d90>
   25220:	add	r4, r0, r1, lsl #2
   25224:	mov	r5, r4
   25228:	ldr	r7, [r5, #-4]!
   2522c:	subs	r3, r3, #1
   25230:	sub	r1, r1, #1
   25234:	str	r7, [r4]
   25238:	mov	r4, r5
   2523c:	bne	25228 <__assert_fail@plt+0x13d78>
   25240:	cmp	r2, #3
   25244:	bcs	25288 <__assert_fail@plt+0x13dd8>
   25248:	ldr	r7, [sp, #20]
   2524c:	ldr	r5, [sp, #28]
   25250:	b	252c8 <__assert_fail@plt+0x13e18>
   25254:	add	r2, r0, r1, lsl #2
   25258:	ldr	r3, [r2, #-4]
   2525c:	cmp	r3, sl
   25260:	ble	252cc <__assert_fail@plt+0x13e1c>
   25264:	sub	r1, r1, #2
   25268:	str	r3, [r2]
   2526c:	sub	r1, r1, #1
   25270:	ldr	r3, [r2, #-8]
   25274:	sub	r2, r2, #4
   25278:	cmp	r3, sl
   2527c:	bgt	25268 <__assert_fail@plt+0x13db8>
   25280:	add	r1, r1, #2
   25284:	b	252cc <__assert_fail@plt+0x13e1c>
   25288:	add	r2, r0, r1, lsl #2
   2528c:	sub	r2, r2, #8
   25290:	ldr	r6, [r2]
   25294:	ldr	r5, [r2, #4]
   25298:	ldmdb	r2, {r3, r7}
   2529c:	sub	r1, r1, #4
   252a0:	cmp	r1, #0
   252a4:	stmda	r2, {r3, r7}
   252a8:	str	r6, [r2, #4]
   252ac:	str	r5, [r2, #8]
   252b0:	sub	r2, r2, #16
   252b4:	bgt	25290 <__assert_fail@plt+0x13de0>
   252b8:	ldr	r9, [sp, #12]
   252bc:	ldr	r7, [sp, #20]
   252c0:	ldr	r5, [sp, #28]
   252c4:	ldr	r6, [sp, #32]
   252c8:	mov	r1, #0
   252cc:	str	sl, [r0, r1, lsl #2]
   252d0:	b	24fc4 <__assert_fail@plt+0x13b14>
   252d4:	mov	r7, #0
   252d8:	b	252ec <__assert_fail@plt+0x13e3c>
   252dc:	lsl	r2, r5, #2
   252e0:	mov	r1, #0
   252e4:	mov	r7, #0
   252e8:	bl	113cc <memset@plt>
   252ec:	ldr	r0, [sp, #48]	; 0x30
   252f0:	bl	29220 <__assert_fail@plt+0x17d70>
   252f4:	mov	r0, r7
   252f8:	sub	sp, fp, #28
   252fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25300:	mov	r0, #0
   25304:	mov	r7, #12
   25308:	str	r0, [sp, #40]	; 0x28
   2530c:	str	r0, [sp, #44]	; 0x2c
   25310:	b	252ec <__assert_fail@plt+0x13e3c>
   25314:	mov	r7, r0
   25318:	b	252ec <__assert_fail@plt+0x13e3c>
   2531c:	mov	r0, #0
   25320:	mov	r7, #12
   25324:	str	r0, [sp, #40]	; 0x28
   25328:	str	r0, [sp, #44]	; 0x2c
   2532c:	b	252f4 <__assert_fail@plt+0x13e44>
   25330:	mov	r7, #12
   25334:	b	252ec <__assert_fail@plt+0x13e3c>
   25338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2533c:	add	fp, sp, #28
   25340:	sub	sp, sp, #132	; 0x84
   25344:	mov	r6, r0
   25348:	ldr	r8, [r0, #84]	; 0x54
   2534c:	mov	r0, #0
   25350:	mov	sl, r1
   25354:	mov	r5, r2
   25358:	str	r2, [sp, #76]	; 0x4c
   2535c:	str	r0, [fp, #-76]	; 0xffffffb4
   25360:	str	r6, [sp, #52]	; 0x34
   25364:	ldr	r1, [r6, #100]	; 0x64
   25368:	ldr	r7, [r1, r2, lsl #2]
   2536c:	ldr	r1, [r3, #4]
   25370:	cmp	r7, #0
   25374:	mov	r9, r7
   25378:	addne	r9, r9, #4
   2537c:	cmp	r1, #0
   25380:	beq	25744 <__assert_fail@plt+0x14294>
   25384:	mov	lr, r3
   25388:	cmp	r7, #0
   2538c:	beq	2576c <__assert_fail@plt+0x142bc>
   25390:	mov	r0, #0
   25394:	mov	r1, r8
   25398:	mov	r2, lr
   2539c:	str	r8, [sp, #80]	; 0x50
   253a0:	str	lr, [sp, #60]	; 0x3c
   253a4:	str	r0, [fp, #-72]	; 0xffffffb8
   253a8:	sub	r0, fp, #72	; 0x48
   253ac:	bl	234d0 <__assert_fail@plt+0x12020>
   253b0:	ldr	r8, [fp, #-72]	; 0xffffffb8
   253b4:	cmp	r8, #0
   253b8:	bne	25f34 <__assert_fail@plt+0x14a84>
   253bc:	mov	r5, r0
   253c0:	mov	r4, r0
   253c4:	ldr	r2, [sp, #60]	; 0x3c
   253c8:	ldr	r0, [r5, #28]!
   253cc:	cmp	r0, #0
   253d0:	bne	25470 <__assert_fail@plt+0x13fc0>
   253d4:	ldr	r0, [r2, #4]
   253d8:	mov	r1, #0
   253dc:	str	r0, [r4, #28]
   253e0:	lsl	r0, r0, #2
   253e4:	str	r1, [r4, #32]
   253e8:	bl	29054 <__assert_fail@plt+0x17ba4>
   253ec:	cmp	r0, #0
   253f0:	mov	r1, #12
   253f4:	mov	r8, #12
   253f8:	str	r0, [r4, #36]	; 0x24
   253fc:	movne	r1, #0
   25400:	cmp	r0, #0
   25404:	str	r1, [fp, #-72]	; 0xffffffb8
   25408:	beq	25f34 <__assert_fail@plt+0x14a84>
   2540c:	ldr	r2, [sp, #60]	; 0x3c
   25410:	ldr	r0, [r2, #4]
   25414:	cmp	r0, #1
   25418:	blt	25470 <__assert_fail@plt+0x13fc0>
   2541c:	str	r9, [sp, #72]	; 0x48
   25420:	mov	r4, #0
   25424:	ldr	r0, [r2, #8]
   25428:	ldr	r1, [sp, #80]	; 0x50
   2542c:	mov	r9, r2
   25430:	ldr	r0, [r0, r4, lsl #2]
   25434:	ldr	r1, [r1, #28]
   25438:	add	r0, r0, r0, lsl #1
   2543c:	add	r1, r1, r0, lsl #2
   25440:	mov	r0, r5
   25444:	bl	1fc18 <__assert_fail@plt+0xe768>
   25448:	cmp	r0, #0
   2544c:	bne	25f30 <__assert_fail@plt+0x14a80>
   25450:	ldr	r0, [r9, #4]
   25454:	add	r4, r4, #1
   25458:	mov	r2, r9
   2545c:	cmp	r4, r0
   25460:	blt	25424 <__assert_fail@plt+0x13f74>
   25464:	ldr	r9, [sp, #72]	; 0x48
   25468:	mov	r0, #0
   2546c:	str	r0, [fp, #-72]	; 0xffffffb8
   25470:	mov	r0, r2
   25474:	mov	r1, r9
   25478:	mov	r2, r5
   2547c:	bl	25f74 <__assert_fail@plt+0x14ac4>
   25480:	cmp	r0, #0
   25484:	str	r0, [fp, #-76]	; 0xffffffb4
   25488:	bne	25f44 <__assert_fail@plt+0x14a94>
   2548c:	ldr	r0, [sl, #20]
   25490:	ldr	r5, [sp, #76]	; 0x4c
   25494:	ldr	lr, [sp, #60]	; 0x3c
   25498:	ldr	r8, [sp, #80]	; 0x50
   2549c:	cmp	r0, #0
   254a0:	beq	2576c <__assert_fail@plt+0x142bc>
   254a4:	cmp	r0, #1
   254a8:	str	r7, [sp, #48]	; 0x30
   254ac:	str	r9, [sp, #72]	; 0x48
   254b0:	blt	25758 <__assert_fail@plt+0x142a8>
   254b4:	ldr	r0, [sp, #52]	; 0x34
   254b8:	mov	r9, #0
   254bc:	str	sl, [sp, #64]	; 0x40
   254c0:	ldr	r0, [r0, #116]	; 0x74
   254c4:	str	r0, [sp, #68]	; 0x44
   254c8:	b	254e0 <__assert_fail@plt+0x14030>
   254cc:	ldr	sl, [sp, #64]	; 0x40
   254d0:	add	r9, r9, #1
   254d4:	ldr	r0, [sl, #20]
   254d8:	cmp	r9, r0
   254dc:	bge	25758 <__assert_fail@plt+0x142a8>
   254e0:	ldr	r0, [sl, #24]
   254e4:	ldr	r1, [sp, #68]	; 0x44
   254e8:	ldr	r0, [r0, r9, lsl #2]
   254ec:	add	r0, r0, r0, lsl #1
   254f0:	add	r1, r1, r0, lsl #3
   254f4:	ldr	r2, [r1, #8]
   254f8:	cmp	r2, r5
   254fc:	bge	254cc <__assert_fail@plt+0x1401c>
   25500:	ldr	r1, [r1, #4]
   25504:	cmp	r1, r5
   25508:	blt	254cc <__assert_fail@plt+0x1401c>
   2550c:	ldr	r1, [sp, #68]	; 0x44
   25510:	ldr	r2, [r8]
   25514:	ldr	r0, [r1, r0, lsl #3]!
   25518:	ldr	r1, [r1, #12]
   2551c:	ldr	r4, [r2, r0, lsl #3]
   25520:	ldr	r0, [lr, #4]
   25524:	cmp	r1, r5
   25528:	bne	25588 <__assert_fail@plt+0x140d8>
   2552c:	cmp	r0, #1
   25530:	blt	254cc <__assert_fail@plt+0x1401c>
   25534:	ldr	r3, [lr, #8]
   25538:	mvn	sl, #0
   2553c:	mvn	r1, #0
   25540:	b	2555c <__assert_fail@plt+0x140ac>
   25544:	ldr	r6, [r2, r7, lsl #3]
   25548:	cmp	r4, r6
   2554c:	moveq	sl, r7
   25550:	add	r3, r3, #4
   25554:	subs	r0, r0, #1
   25558:	beq	255f8 <__assert_fail@plt+0x14148>
   2555c:	ldr	r7, [r3]
   25560:	add	r6, r2, r7, lsl #3
   25564:	ldrb	r6, [r6, #4]
   25568:	cmp	r6, #9
   2556c:	beq	25544 <__assert_fail@plt+0x14094>
   25570:	cmp	r6, #8
   25574:	bne	25550 <__assert_fail@plt+0x140a0>
   25578:	ldr	r6, [r2, r7, lsl #3]
   2557c:	cmp	r4, r6
   25580:	moveq	r1, r7
   25584:	b	25550 <__assert_fail@plt+0x140a0>
   25588:	cmp	r0, #1
   2558c:	blt	254cc <__assert_fail@plt+0x1401c>
   25590:	mov	r7, #0
   25594:	ldr	r1, [lr, #8]
   25598:	ldr	r1, [r1, r7, lsl #2]
   2559c:	add	r3, r2, r1, lsl #3
   255a0:	ldrb	r3, [r3, #4]
   255a4:	orr	r3, r3, #1
   255a8:	cmp	r3, #9
   255ac:	bne	255e4 <__assert_fail@plt+0x14134>
   255b0:	ldr	r2, [r2, r1, lsl #3]
   255b4:	cmp	r4, r2
   255b8:	bne	255e4 <__assert_fail@plt+0x14134>
   255bc:	ldr	r3, [sp, #72]	; 0x48
   255c0:	mov	r0, r8
   255c4:	mov	r2, lr
   255c8:	mov	r6, lr
   255cc:	bl	26154 <__assert_fail@plt+0x14ca4>
   255d0:	cmp	r0, #0
   255d4:	bne	25ef0 <__assert_fail@plt+0x14a40>
   255d8:	ldr	r0, [r6, #4]
   255dc:	ldr	r8, [sp, #80]	; 0x50
   255e0:	mov	lr, r6
   255e4:	add	r7, r7, #1
   255e8:	cmp	r7, r0
   255ec:	bge	254cc <__assert_fail@plt+0x1401c>
   255f0:	ldr	r2, [r8]
   255f4:	b	25594 <__assert_fail@plt+0x140e4>
   255f8:	cmp	r1, #0
   255fc:	bmi	2561c <__assert_fail@plt+0x1416c>
   25600:	ldr	r0, [sp, #80]	; 0x50
   25604:	ldr	r3, [sp, #72]	; 0x48
   25608:	mov	r2, lr
   2560c:	bl	26154 <__assert_fail@plt+0x14ca4>
   25610:	ldr	lr, [sp, #60]	; 0x3c
   25614:	cmp	r0, #0
   25618:	bne	25ef0 <__assert_fail@plt+0x14a40>
   2561c:	ldr	r8, [sp, #80]	; 0x50
   25620:	cmp	sl, #0
   25624:	bmi	254cc <__assert_fail@plt+0x1401c>
   25628:	ldr	ip, [lr, #4]
   2562c:	cmp	ip, #1
   25630:	blt	254cc <__assert_fail@plt+0x1401c>
   25634:	mov	r4, #0
   25638:	b	2564c <__assert_fail@plt+0x1419c>
   2563c:	ldr	lr, [sp, #60]	; 0x3c
   25640:	add	r4, r4, #1
   25644:	cmp	r4, ip
   25648:	bge	254cc <__assert_fail@plt+0x1401c>
   2564c:	ldr	r0, [lr, #8]
   25650:	ldr	r1, [r0, r4, lsl #2]
   25654:	ldr	r0, [r8, #28]
   25658:	add	lr, r1, r1, lsl #1
   2565c:	add	r3, r0, lr, lsl #2
   25660:	ldr	r0, [r3, #4]
   25664:	cmp	r0, #1
   25668:	blt	256b8 <__assert_fail@plt+0x14208>
   2566c:	ldr	r3, [r3, #8]
   25670:	mov	r7, #0
   25674:	subs	r0, r0, #1
   25678:	str	ip, [sp, #56]	; 0x38
   2567c:	beq	256a4 <__assert_fail@plt+0x141f4>
   25680:	add	r6, r7, r0
   25684:	mov	ip, #1
   25688:	lsr	r5, r6, #1
   2568c:	ldr	r2, [r3, r5, lsl #2]
   25690:	cmp	r2, sl
   25694:	addlt	r7, ip, r6, lsr #1
   25698:	movge	r0, r5
   2569c:	cmp	r7, r0
   256a0:	bcc	25680 <__assert_fail@plt+0x141d0>
   256a4:	ldr	r0, [r3, r7, lsl #2]
   256a8:	ldr	r5, [sp, #76]	; 0x4c
   256ac:	ldr	ip, [sp, #56]	; 0x38
   256b0:	cmp	r0, sl
   256b4:	beq	2563c <__assert_fail@plt+0x1418c>
   256b8:	ldr	r0, [r8, #24]
   256bc:	add	r2, r0, lr, lsl #2
   256c0:	ldr	lr, [sp, #60]	; 0x3c
   256c4:	ldr	r0, [r2, #4]
   256c8:	cmp	r0, #1
   256cc:	blt	25714 <__assert_fail@plt+0x14264>
   256d0:	ldr	r2, [r2, #8]
   256d4:	mov	r3, #0
   256d8:	subs	r0, r0, #1
   256dc:	beq	25704 <__assert_fail@plt+0x14254>
   256e0:	add	r7, r3, r0
   256e4:	lsr	r6, r7, #1
   256e8:	ldr	r5, [r2, r6, lsl #2]
   256ec:	cmp	r5, sl
   256f0:	movge	r0, r6
   256f4:	mov	r6, #1
   256f8:	addlt	r3, r6, r7, lsr #1
   256fc:	cmp	r3, r0
   25700:	bcc	256e0 <__assert_fail@plt+0x14230>
   25704:	ldr	r0, [r2, r3, lsl #2]
   25708:	ldr	r5, [sp, #76]	; 0x4c
   2570c:	cmp	r0, sl
   25710:	beq	25640 <__assert_fail@plt+0x14190>
   25714:	ldr	r3, [sp, #72]	; 0x48
   25718:	mov	r0, r8
   2571c:	mov	r2, lr
   25720:	mov	r6, lr
   25724:	bl	26154 <__assert_fail@plt+0x14ca4>
   25728:	cmp	r0, #0
   2572c:	bne	25ef0 <__assert_fail@plt+0x14a40>
   25730:	ldr	ip, [r6, #4]
   25734:	ldr	r8, [sp, #80]	; 0x50
   25738:	sub	r4, r4, #1
   2573c:	mov	lr, r6
   25740:	b	25640 <__assert_fail@plt+0x14190>
   25744:	ldr	r1, [sl]
   25748:	str	r0, [r1, r5, lsl #2]
   2574c:	cmp	r7, #0
   25750:	bne	25798 <__assert_fail@plt+0x142e8>
   25754:	b	25ee0 <__assert_fail@plt+0x14a30>
   25758:	ldr	r6, [sp, #52]	; 0x34
   2575c:	ldr	r9, [sp, #72]	; 0x48
   25760:	ldr	r7, [sp, #48]	; 0x30
   25764:	mov	r0, #0
   25768:	str	r0, [fp, #-76]	; 0xffffffb4
   2576c:	sub	r0, fp, #76	; 0x4c
   25770:	mov	r1, r8
   25774:	mov	r2, lr
   25778:	bl	234d0 <__assert_fail@plt+0x12020>
   2577c:	ldr	r1, [sl]
   25780:	str	r0, [r1, r5, lsl #2]
   25784:	ldr	r8, [fp, #-76]	; 0xffffffb4
   25788:	cmp	r8, #0
   2578c:	bne	25ee4 <__assert_fail@plt+0x14a34>
   25790:	cmp	r7, #0
   25794:	beq	25ee0 <__assert_fail@plt+0x14a30>
   25798:	ldr	r0, [r6, #100]	; 0x64
   2579c:	ldr	r0, [r0, r5, lsl #2]
   257a0:	ldrb	r0, [r0, #52]	; 0x34
   257a4:	tst	r0, #64	; 0x40
   257a8:	beq	25ee0 <__assert_fail@plt+0x14a30>
   257ac:	ldr	r0, [r6, #108]	; 0x6c
   257b0:	ldr	ip, [r6, #84]	; 0x54
   257b4:	cmp	r0, #1
   257b8:	blt	25ecc <__assert_fail@plt+0x14a1c>
   257bc:	ldr	r1, [r6, #116]	; 0x74
   257c0:	mov	lr, #0
   257c4:	mov	r2, #1
   257c8:	mov	r3, r0
   257cc:	add	r7, r3, lr
   257d0:	add	r7, r7, r7, lsr #31
   257d4:	asr	r6, r7, #1
   257d8:	add	r4, r6, r6, lsl #1
   257dc:	add	r4, r1, r4, lsl #3
   257e0:	ldr	r4, [r4, #4]
   257e4:	cmp	r4, r5
   257e8:	addlt	lr, r2, r7, asr #1
   257ec:	movge	r3, r6
   257f0:	cmp	lr, r3
   257f4:	blt	257cc <__assert_fail@plt+0x1431c>
   257f8:	cmp	lr, r0
   257fc:	bge	25ed8 <__assert_fail@plt+0x14a28>
   25800:	cmn	lr, #1
   25804:	beq	25ed8 <__assert_fail@plt+0x14a28>
   25808:	ldr	r0, [sp, #52]	; 0x34
   2580c:	add	r1, lr, lr, lsl #1
   25810:	str	r1, [sp, #28]
   25814:	ldr	r0, [r0, #116]	; 0x74
   25818:	add	r0, r0, r1, lsl #3
   2581c:	ldr	r0, [r0, #4]
   25820:	cmp	r0, r5
   25824:	bne	25ed8 <__assert_fail@plt+0x14a28>
   25828:	mov	r1, #0
   2582c:	ldr	r4, [sp, #52]	; 0x34
   25830:	str	r1, [fp, #-72]	; 0xffffffb8
   25834:	ldr	r0, [r9, #4]
   25838:	cmp	r0, #0
   2583c:	ble	25efc <__assert_fail@plt+0x14a4c>
   25840:	add	r0, r5, #1
   25844:	mov	r2, #0
   25848:	mov	r3, ip
   2584c:	str	ip, [sp, #80]	; 0x50
   25850:	str	sl, [sp, #64]	; 0x40
   25854:	str	r9, [sp, #72]	; 0x48
   25858:	str	lr, [sp, #56]	; 0x38
   2585c:	str	r0, [sp, #12]
   25860:	sub	r0, fp, #72	; 0x48
   25864:	add	r0, r0, #16
   25868:	str	r0, [sp, #8]
   2586c:	add	r0, sl, #16
   25870:	str	r0, [sp, #36]	; 0x24
   25874:	mov	r0, #0
   25878:	str	r0, [sp, #40]	; 0x28
   2587c:	b	25898 <__assert_fail@plt+0x143e8>
   25880:	ldr	r9, [sp, #72]	; 0x48
   25884:	ldr	r2, [sp, #48]	; 0x30
   25888:	ldr	r0, [r9, #4]
   2588c:	add	r2, r2, #1
   25890:	cmp	r2, r0
   25894:	bge	25f04 <__assert_fail@plt+0x14a54>
   25898:	ldr	r0, [r9, #8]
   2589c:	ldr	r1, [sl, #8]
   258a0:	str	r2, [sp, #48]	; 0x30
   258a4:	ldr	r7, [r0, r2, lsl #2]
   258a8:	ldr	r0, [r3]
   258ac:	add	r0, r0, r7, lsl #3
   258b0:	cmp	r7, r1
   258b4:	ldrb	r0, [r0, #4]
   258b8:	bne	258d4 <__assert_fail@plt+0x14424>
   258bc:	cmp	r0, #4
   258c0:	bne	25880 <__assert_fail@plt+0x143d0>
   258c4:	ldr	r0, [sl, #12]
   258c8:	cmp	r0, r5
   258cc:	bne	258dc <__assert_fail@plt+0x1442c>
   258d0:	b	25880 <__assert_fail@plt+0x143d0>
   258d4:	cmp	r0, #4
   258d8:	bne	25880 <__assert_fail@plt+0x143d0>
   258dc:	ldr	r0, [r4, #116]	; 0x74
   258e0:	ldr	r1, [sp, #28]
   258e4:	mov	r9, lr
   258e8:	str	r7, [sp, #60]	; 0x3c
   258ec:	add	r6, r0, r1, lsl #3
   258f0:	ldr	r0, [r6]
   258f4:	cmp	r0, r7
   258f8:	bne	259e8 <__assert_fail@plt+0x14538>
   258fc:	ldr	r0, [r6, #8]
   25900:	ldr	r1, [r6, #12]
   25904:	subs	r0, r1, r0
   25908:	add	ip, r0, r5
   2590c:	beq	2591c <__assert_fail@plt+0x1446c>
   25910:	ldr	r1, [r3, #12]
   25914:	add	r1, r1, r7, lsl #2
   25918:	b	2592c <__assert_fail@plt+0x1447c>
   2591c:	ldr	r1, [r3, #20]
   25920:	add	r2, r7, r7, lsl #1
   25924:	add	r1, r1, r2, lsl #2
   25928:	ldr	r1, [r1, #8]
   2592c:	ldr	r2, [sl, #12]
   25930:	cmp	ip, r2
   25934:	bgt	259e8 <__assert_fail@plt+0x14538>
   25938:	ldr	r2, [sl]
   2593c:	ldr	r2, [r2, ip, lsl #2]
   25940:	cmp	r2, #0
   25944:	beq	259e8 <__assert_fail@plt+0x14538>
   25948:	ldr	r3, [r2, #8]
   2594c:	cmp	r3, #1
   25950:	blt	259e4 <__assert_fail@plt+0x14534>
   25954:	ldr	r1, [r1]
   25958:	ldr	r2, [r2, #12]
   2595c:	subs	r7, r3, #1
   25960:	mov	r3, #0
   25964:	str	r8, [sp, #68]	; 0x44
   25968:	beq	25990 <__assert_fail@plt+0x144e0>
   2596c:	mov	r8, #1
   25970:	add	r5, r3, r7
   25974:	lsr	r4, r5, #1
   25978:	ldr	r0, [r2, r4, lsl #2]
   2597c:	cmp	r0, r1
   25980:	addlt	r3, r8, r5, lsr #1
   25984:	movge	r7, r4
   25988:	cmp	r3, r7
   2598c:	bcc	25970 <__assert_fail@plt+0x144c0>
   25990:	ldr	r0, [r2, r3, lsl #2]
   25994:	cmp	r0, r1
   25998:	bne	259d4 <__assert_fail@plt+0x14524>
   2599c:	ldr	r4, [sp, #52]	; 0x34
   259a0:	ldr	r7, [sp, #60]	; 0x3c
   259a4:	ldr	r5, [sp, #76]	; 0x4c
   259a8:	stm	sp, {r1, ip}
   259ac:	ldr	r1, [sp, #36]	; 0x24
   259b0:	mov	r0, r4
   259b4:	mov	r2, r7
   259b8:	mov	r3, r5
   259bc:	bl	264dc <__assert_fail@plt+0x1502c>
   259c0:	ldr	r8, [sp, #68]	; 0x44
   259c4:	cmp	r0, #0
   259c8:	beq	25a04 <__assert_fail@plt+0x14554>
   259cc:	ldr	lr, [sp, #56]	; 0x38
   259d0:	b	259e4 <__assert_fail@plt+0x14534>
   259d4:	ldr	r5, [sp, #76]	; 0x4c
   259d8:	ldr	r4, [sp, #52]	; 0x34
   259dc:	ldr	r8, [sp, #68]	; 0x44
   259e0:	ldr	r7, [sp, #60]	; 0x3c
   259e4:	ldr	r3, [sp, #80]	; 0x50
   259e8:	mov	r0, r6
   259ec:	add	r6, r0, #24
   259f0:	ldrb	r0, [r0, #20]
   259f4:	add	r9, r9, #1
   259f8:	cmp	r0, #0
   259fc:	bne	258f0 <__assert_fail@plt+0x14440>
   25a00:	b	25880 <__assert_fail@plt+0x143d0>
   25a04:	ldr	r0, [sp, #40]	; 0x28
   25a08:	ldr	r6, [sp, #44]	; 0x2c
   25a0c:	cmp	r0, #0
   25a10:	beq	25a40 <__assert_fail@plt+0x14590>
   25a14:	ldr	r0, [sp, #20]
   25a18:	str	r5, [fp, #-60]	; 0xffffffc4
   25a1c:	str	r7, [fp, #-64]	; 0xffffffc0
   25a20:	cmp	r0, #0
   25a24:	beq	25ba8 <__assert_fail@plt+0x146f8>
   25a28:	cmp	r6, #0
   25a2c:	bne	25eb4 <__assert_fail@plt+0x14a04>
   25a30:	mov	r6, #1
   25a34:	str	r9, [r8]
   25a38:	str	r8, [sp, #24]
   25a3c:	b	25c2c <__assert_fail@plt+0x1477c>
   25a40:	add	r0, sl, #12
   25a44:	mov	r3, #20
   25a48:	sub	r2, fp, #72	; 0x48
   25a4c:	vld1.32	{d16-d17}, [r0]
   25a50:	mov	r0, sl
   25a54:	add	r1, r2, #12
   25a58:	vld1.32	{d18-d19}, [r0], r3
   25a5c:	vst1.32	{d16-d17}, [r1]
   25a60:	mov	r1, r2
   25a64:	vst1.64	{d18-d19}, [r1], r3
   25a68:	ldr	r6, [r0]
   25a6c:	mov	r0, #0
   25a70:	cmp	r6, #1
   25a74:	str	r6, [r1]
   25a78:	blt	25b90 <__assert_fail@plt+0x146e0>
   25a7c:	lsl	r0, r6, #2
   25a80:	str	r6, [fp, #-56]	; 0xffffffc8
   25a84:	bl	29054 <__assert_fail@plt+0x17ba4>
   25a88:	cmp	r0, #0
   25a8c:	str	r0, [fp, #-48]	; 0xffffffd0
   25a90:	beq	25f4c <__assert_fail@plt+0x14a9c>
   25a94:	mov	r4, r0
   25a98:	ldr	r0, [sl, #20]
   25a9c:	ldr	r1, [sl, #24]
   25aa0:	lsl	r2, r0, #2
   25aa4:	mov	r0, r4
   25aa8:	bl	11258 <memcpy@plt>
   25aac:	str	r5, [fp, #-60]	; 0xffffffc4
   25ab0:	str	r7, [fp, #-64]	; 0xffffffc0
   25ab4:	mov	r8, r4
   25ab8:	lsl	r0, r6, #1
   25abc:	lsl	r1, r6, #3
   25ac0:	str	r0, [sp, #20]
   25ac4:	str	r0, [fp, #-56]	; 0xffffffc8
   25ac8:	mov	r0, r4
   25acc:	bl	29084 <__assert_fail@plt+0x17bd4>
   25ad0:	cmp	r0, #0
   25ad4:	beq	25f68 <__assert_fail@plt+0x14ab8>
   25ad8:	mov	r8, r0
   25adc:	mov	r4, r0
   25ae0:	str	r0, [fp, #-48]	; 0xffffffd0
   25ae4:	str	r0, [sp, #16]
   25ae8:	ldr	r0, [r8]
   25aec:	str	r4, [sp, #24]
   25af0:	cmp	r0, r9
   25af4:	ble	25be8 <__assert_fail@plt+0x14738>
   25af8:	ldr	r4, [sp, #52]	; 0x34
   25afc:	cmp	r6, #1
   25b00:	mov	r1, r6
   25b04:	blt	25c20 <__assert_fail@plt+0x14770>
   25b08:	ands	r1, r6, #3
   25b0c:	sub	r2, r6, #1
   25b10:	mov	ip, r6
   25b14:	mov	r0, r6
   25b18:	beq	25b40 <__assert_fail@plt+0x14690>
   25b1c:	add	r7, r8, ip, lsl #2
   25b20:	mov	r0, ip
   25b24:	mov	r3, r7
   25b28:	ldr	r6, [r3, #-4]!
   25b2c:	subs	r1, r1, #1
   25b30:	sub	r0, r0, #1
   25b34:	str	r6, [r7]
   25b38:	mov	r7, r3
   25b3c:	bne	25b28 <__assert_fail@plt+0x14678>
   25b40:	mov	r1, #0
   25b44:	cmp	r2, #3
   25b48:	bcc	25b80 <__assert_fail@plt+0x146d0>
   25b4c:	add	r2, r8, r0, lsl #2
   25b50:	sub	r2, r2, #8
   25b54:	ldr	r6, [r2]
   25b58:	ldr	r5, [r2, #4]
   25b5c:	ldmdb	r2, {r3, r7}
   25b60:	sub	r0, r0, #4
   25b64:	cmp	r0, #0
   25b68:	stmda	r2, {r3, r7}
   25b6c:	str	r6, [r2, #4]
   25b70:	str	r5, [r2, #8]
   25b74:	sub	r2, r2, #16
   25b78:	bgt	25b54 <__assert_fail@plt+0x146a4>
   25b7c:	ldr	r5, [sp, #76]	; 0x4c
   25b80:	ldr	r4, [sp, #52]	; 0x34
   25b84:	ldr	r7, [sp, #60]	; 0x3c
   25b88:	mov	r6, ip
   25b8c:	b	25c20 <__assert_fail@plt+0x14770>
   25b90:	ldr	r1, [sp, #8]
   25b94:	str	r0, [r1]
   25b98:	str	r0, [r1, #4]
   25b9c:	str	r0, [r1, #8]
   25ba0:	str	r5, [fp, #-60]	; 0xffffffc4
   25ba4:	str	r7, [fp, #-64]	; 0xffffffc0
   25ba8:	mov	r0, #1
   25bac:	str	r0, [fp, #-52]	; 0xffffffcc
   25bb0:	str	r0, [fp, #-56]	; 0xffffffc8
   25bb4:	mov	r0, #4
   25bb8:	bl	29054 <__assert_fail@plt+0x17ba4>
   25bbc:	cmp	r0, #0
   25bc0:	str	r0, [fp, #-48]	; 0xffffffd0
   25bc4:	beq	25f4c <__assert_fail@plt+0x14a9c>
   25bc8:	str	r9, [r0]
   25bcc:	str	r0, [sp, #16]
   25bd0:	str	r0, [sp, #68]	; 0x44
   25bd4:	str	r0, [sp, #24]
   25bd8:	mov	r0, #1
   25bdc:	mov	r6, #1
   25be0:	str	r0, [sp, #20]
   25be4:	b	25c30 <__assert_fail@plt+0x14780>
   25be8:	add	r0, r8, r6, lsl #2
   25bec:	ldr	r4, [sp, #52]	; 0x34
   25bf0:	mov	r1, r6
   25bf4:	ldr	r2, [r0, #-4]
   25bf8:	cmp	r2, r9
   25bfc:	ble	25c20 <__assert_fail@plt+0x14770>
   25c00:	sub	r1, r6, #2
   25c04:	str	r2, [r0]
   25c08:	sub	r1, r1, #1
   25c0c:	ldr	r2, [r0, #-8]
   25c10:	sub	r0, r0, #4
   25c14:	cmp	r2, r9
   25c18:	bgt	25c04 <__assert_fail@plt+0x14754>
   25c1c:	add	r1, r1, #2
   25c20:	add	r6, r6, #1
   25c24:	str	r9, [r8, r1, lsl #2]
   25c28:	str	r8, [sp, #68]	; 0x44
   25c2c:	str	r6, [fp, #-52]	; 0xffffffcc
   25c30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25c34:	sub	r1, fp, #72	; 0x48
   25c38:	str	r6, [sp, #44]	; 0x2c
   25c3c:	str	r0, [sp, #40]	; 0x28
   25c40:	ldr	r0, [r0, r5, lsl #2]
   25c44:	str	r0, [sp, #32]
   25c48:	mov	r0, r4
   25c4c:	bl	24e90 <__assert_fail@plt+0x139e0>
   25c50:	cmp	r0, #0
   25c54:	bne	25f3c <__assert_fail@plt+0x14a8c>
   25c58:	ldr	r6, [sl, #4]
   25c5c:	ldr	lr, [sp, #56]	; 0x38
   25c60:	cmp	r6, #0
   25c64:	beq	25d04 <__assert_fail@plt+0x14854>
   25c68:	cmp	r5, #0
   25c6c:	bmi	25cf8 <__assert_fail@plt+0x14848>
   25c70:	ldr	sl, [sp, #40]	; 0x28
   25c74:	ldr	r7, [sp, #12]
   25c78:	b	25c90 <__assert_fail@plt+0x147e0>
   25c7c:	str	r0, [r6]
   25c80:	add	r6, r6, #4
   25c84:	add	sl, sl, #4
   25c88:	subs	r7, r7, #1
   25c8c:	beq	25cf8 <__assert_fail@plt+0x14848>
   25c90:	ldr	r1, [r6]
   25c94:	ldr	r0, [sl]
   25c98:	cmp	r1, #0
   25c9c:	beq	25c7c <__assert_fail@plt+0x147cc>
   25ca0:	cmp	r0, #0
   25ca4:	beq	25c80 <__assert_fail@plt+0x147d0>
   25ca8:	sub	r4, fp, #44	; 0x2c
   25cac:	add	r2, r0, #4
   25cb0:	add	r1, r1, #4
   25cb4:	mov	r0, r4
   25cb8:	bl	21e3c <__assert_fail@plt+0x1098c>
   25cbc:	cmp	r0, #0
   25cc0:	str	r0, [fp, #-32]	; 0xffffffe0
   25cc4:	bne	25f3c <__assert_fail@plt+0x14a8c>
   25cc8:	ldr	r1, [sp, #80]	; 0x50
   25ccc:	sub	r0, fp, #32
   25cd0:	mov	r2, r4
   25cd4:	bl	234d0 <__assert_fail@plt+0x12020>
   25cd8:	str	r0, [r6]
   25cdc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25ce0:	bl	29220 <__assert_fail@plt+0x17d70>
   25ce4:	ldr	r8, [fp, #-32]	; 0xffffffe0
   25ce8:	ldr	lr, [sp, #56]	; 0x38
   25cec:	cmp	r8, #0
   25cf0:	beq	25c80 <__assert_fail@plt+0x147d0>
   25cf4:	b	25f0c <__assert_fail@plt+0x14a5c>
   25cf8:	ldr	sl, [sp, #64]	; 0x40
   25cfc:	ldr	r4, [sp, #52]	; 0x34
   25d00:	ldr	r7, [sp, #60]	; 0x3c
   25d04:	ldr	r0, [sp, #40]	; 0x28
   25d08:	ldr	r1, [sp, #32]
   25d0c:	str	r1, [r0, r5, lsl #2]
   25d10:	ldr	r0, [sp, #44]	; 0x2c
   25d14:	cmp	r0, #1
   25d18:	blt	25df4 <__assert_fail@plt+0x14944>
   25d1c:	ldr	r8, [sp, #68]	; 0x44
   25d20:	subs	r0, r0, #1
   25d24:	mov	r1, #0
   25d28:	beq	25d54 <__assert_fail@plt+0x148a4>
   25d2c:	mov	r2, r0
   25d30:	mov	r4, #1
   25d34:	add	r3, r1, r2
   25d38:	lsr	r7, r3, #1
   25d3c:	ldr	r6, [r8, r7, lsl #2]
   25d40:	cmp	r6, r9
   25d44:	addlt	r1, r4, r3, lsr #1
   25d48:	movge	r2, r7
   25d4c:	cmp	r1, r2
   25d50:	bcc	25d34 <__assert_fail@plt+0x14884>
   25d54:	ldr	r2, [r8, r1, lsl #2]
   25d58:	mov	r7, #1
   25d5c:	cmp	r2, r9
   25d60:	mov	r2, r1
   25d64:	mvnne	r2, #0
   25d68:	cmp	r2, #0
   25d6c:	bmi	25e00 <__assert_fail@plt+0x14950>
   25d70:	ldr	r3, [sp, #44]	; 0x2c
   25d74:	ldr	r4, [sp, #52]	; 0x34
   25d78:	cmp	r3, r2
   25d7c:	ble	25e0c <__assert_fail@plt+0x1495c>
   25d80:	cmp	r0, r2
   25d84:	str	r0, [fp, #-52]	; 0xffffffcc
   25d88:	ble	25e1c <__assert_fail@plt+0x1496c>
   25d8c:	mvn	r2, r1
   25d90:	add	r2, r3, r2
   25d94:	cmp	r2, #4
   25d98:	bcc	25e74 <__assert_fail@plt+0x149c4>
   25d9c:	bic	lr, r2, #3
   25da0:	subs	r3, lr, #4
   25da4:	add	r3, r7, r3, lsr #2
   25da8:	and	r7, r3, #1
   25dac:	str	r7, [sp, #32]
   25db0:	beq	25e24 <__assert_fail@plt+0x14974>
   25db4:	sub	r7, r7, r3
   25db8:	add	r3, r8, r1, lsl #2
   25dbc:	mov	r6, #0
   25dc0:	mov	ip, #20
   25dc4:	add	r4, r3, #4
   25dc8:	adds	r7, r7, #2
   25dcc:	add	r6, r6, #8
   25dd0:	vld1.32	{d16-d17}, [r4]
   25dd4:	mov	r4, r3
   25dd8:	vst1.32	{d16-d17}, [r4], ip
   25ddc:	vld1.32	{d16-d17}, [r4]
   25de0:	add	r4, r3, #16
   25de4:	add	r3, r3, #32
   25de8:	vst1.32	{d16-d17}, [r4]
   25dec:	bne	25dc4 <__assert_fail@plt+0x14914>
   25df0:	b	25e28 <__assert_fail@plt+0x14978>
   25df4:	ldr	r3, [sp, #80]	; 0x50
   25df8:	ldr	r8, [sp, #68]	; 0x44
   25dfc:	b	25ea4 <__assert_fail@plt+0x149f4>
   25e00:	ldr	r0, [sp, #16]
   25e04:	ldr	r4, [sp, #52]	; 0x34
   25e08:	b	25e10 <__assert_fail@plt+0x14960>
   25e0c:	ldr	r0, [sp, #16]
   25e10:	ldr	r7, [sp, #60]	; 0x3c
   25e14:	str	r0, [sp, #24]
   25e18:	b	25ea0 <__assert_fail@plt+0x149f0>
   25e1c:	ldr	r1, [sp, #16]
   25e20:	b	25e5c <__assert_fail@plt+0x149ac>
   25e24:	mov	r6, #0
   25e28:	ldr	r3, [sp, #32]
   25e2c:	cmp	r3, #0
   25e30:	beq	25e48 <__assert_fail@plt+0x14998>
   25e34:	add	r3, r1, r6
   25e38:	add	r3, r8, r3, lsl #2
   25e3c:	add	r7, r3, #4
   25e40:	vld1.32	{d16-d17}, [r7]
   25e44:	vst1.32	{d16-d17}, [r3]
   25e48:	cmp	r2, lr
   25e4c:	bne	25e64 <__assert_fail@plt+0x149b4>
   25e50:	ldr	r1, [sp, #16]
   25e54:	ldr	r4, [sp, #52]	; 0x34
   25e58:	ldr	lr, [sp, #56]	; 0x38
   25e5c:	ldr	r7, [sp, #60]	; 0x3c
   25e60:	b	25e98 <__assert_fail@plt+0x149e8>
   25e64:	add	r1, r1, lr
   25e68:	ldr	r4, [sp, #52]	; 0x34
   25e6c:	ldr	lr, [sp, #56]	; 0x38
   25e70:	ldr	r3, [sp, #44]	; 0x2c
   25e74:	ldr	r7, [sp, #60]	; 0x3c
   25e78:	sub	r2, r3, #1
   25e7c:	add	r3, r8, r1, lsl #2
   25e80:	ldr	r3, [r3, #4]
   25e84:	str	r3, [r8, r1, lsl #2]
   25e88:	add	r1, r1, #1
   25e8c:	cmp	r2, r1
   25e90:	bne	25e7c <__assert_fail@plt+0x149cc>
   25e94:	ldr	r1, [sp, #16]
   25e98:	str	r0, [sp, #44]	; 0x2c
   25e9c:	str	r1, [sp, #24]
   25ea0:	ldr	r3, [sp, #80]	; 0x50
   25ea4:	ldr	r0, [r4, #116]	; 0x74
   25ea8:	add	r1, r9, r9, lsl #1
   25eac:	add	r0, r0, r1, lsl #3
   25eb0:	b	259ec <__assert_fail@plt+0x1453c>
   25eb4:	ldr	r0, [sp, #20]
   25eb8:	ldr	r4, [sp, #24]
   25ebc:	cmp	r0, r6
   25ec0:	ldr	r0, [sp, #16]
   25ec4:	beq	25ab8 <__assert_fail@plt+0x14608>
   25ec8:	b	25ae4 <__assert_fail@plt+0x14634>
   25ecc:	mov	lr, #0
   25ed0:	cmp	lr, r0
   25ed4:	blt	25800 <__assert_fail@plt+0x14350>
   25ed8:	mov	r0, #0
   25edc:	str	r0, [fp, #-76]	; 0xffffffb4
   25ee0:	mov	r8, #0
   25ee4:	mov	r0, r8
   25ee8:	sub	sp, fp, #28
   25eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ef0:	mov	r8, r0
   25ef4:	str	r0, [fp, #-76]	; 0xffffffb4
   25ef8:	b	25ee4 <__assert_fail@plt+0x14a34>
   25efc:	str	r1, [fp, #-76]	; 0xffffffb4
   25f00:	b	25ee0 <__assert_fail@plt+0x14a30>
   25f04:	str	r8, [sp, #68]	; 0x44
   25f08:	mov	r8, #0
   25f0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25f10:	cmp	r0, #0
   25f14:	beq	25f20 <__assert_fail@plt+0x14a70>
   25f18:	ldr	r0, [sp, #68]	; 0x44
   25f1c:	bl	29220 <__assert_fail@plt+0x17d70>
   25f20:	cmp	r8, #0
   25f24:	str	r8, [fp, #-76]	; 0xffffffb4
   25f28:	moveq	r8, #0
   25f2c:	b	25ee4 <__assert_fail@plt+0x14a34>
   25f30:	str	r0, [fp, #-72]	; 0xffffffb8
   25f34:	str	r8, [fp, #-76]	; 0xffffffb4
   25f38:	b	25ee4 <__assert_fail@plt+0x14a34>
   25f3c:	mov	r8, r0
   25f40:	b	25f0c <__assert_fail@plt+0x14a5c>
   25f44:	mov	r8, r0
   25f48:	b	25ee4 <__assert_fail@plt+0x14a34>
   25f4c:	mov	r1, #0
   25f50:	mov	r0, #0
   25f54:	mov	r8, #12
   25f58:	str	r1, [fp, #-56]	; 0xffffffc8
   25f5c:	str	r0, [sp, #68]	; 0x44
   25f60:	str	r1, [fp, #-52]	; 0xffffffcc
   25f64:	b	25f0c <__assert_fail@plt+0x14a5c>
   25f68:	str	r8, [sp, #68]	; 0x44
   25f6c:	mov	r8, #12
   25f70:	b	25f0c <__assert_fail@plt+0x14a5c>
   25f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f78:	add	fp, sp, #28
   25f7c:	sub	sp, sp, #4
   25f80:	mov	r9, r0
   25f84:	ldr	r0, [r1, #4]
   25f88:	mov	r8, #0
   25f8c:	cmp	r0, #0
   25f90:	beq	26140 <__assert_fail@plt+0x14c90>
   25f94:	mov	r5, r2
   25f98:	ldr	r2, [r2, #4]
   25f9c:	cmp	r2, #0
   25fa0:	beq	26140 <__assert_fail@plt+0x14c90>
   25fa4:	mov	sl, r1
   25fa8:	ldr	r1, [r9, #4]
   25fac:	ldr	r7, [r9]
   25fb0:	add	r3, r2, r0
   25fb4:	add	r6, r1, r3
   25fb8:	cmp	r6, r7
   25fbc:	ble	25fec <__assert_fail@plt+0x14b3c>
   25fc0:	ldr	r0, [r9, #8]
   25fc4:	add	r4, r7, r3
   25fc8:	lsl	r1, r4, #2
   25fcc:	bl	29084 <__assert_fail@plt+0x17bd4>
   25fd0:	cmp	r0, #0
   25fd4:	beq	2614c <__assert_fail@plt+0x14c9c>
   25fd8:	str	r4, [r9]
   25fdc:	str	r0, [r9, #8]
   25fe0:	ldr	r1, [r9, #4]
   25fe4:	ldr	r2, [r5, #4]
   25fe8:	ldr	r0, [sl, #4]
   25fec:	ldr	lr, [r5, #8]
   25ff0:	ldr	r4, [sl, #8]
   25ff4:	add	r3, r0, r1
   25ff8:	sub	r7, r1, #1
   25ffc:	add	ip, r3, r2
   26000:	sub	r0, r0, #1
   26004:	sub	r3, r2, #1
   26008:	ldr	r1, [lr, r3, lsl #2]
   2600c:	ldr	r6, [r4, r0, lsl #2]
   26010:	cmp	r6, r1
   26014:	beq	26040 <__assert_fail@plt+0x14b90>
   26018:	blt	26030 <__assert_fail@plt+0x14b80>
   2601c:	sub	r6, r0, #1
   26020:	cmp	r0, #0
   26024:	mov	r0, r6
   26028:	bgt	2600c <__assert_fail@plt+0x14b5c>
   2602c:	b	260a4 <__assert_fail@plt+0x14bf4>
   26030:	cmp	r2, #2
   26034:	mov	r2, r3
   26038:	bge	26004 <__assert_fail@plt+0x14b54>
   2603c:	b	260a4 <__assert_fail@plt+0x14bf4>
   26040:	cmp	r7, #0
   26044:	bmi	26080 <__assert_fail@plt+0x14bd0>
   26048:	ldr	r8, [r9, #8]
   2604c:	mov	r1, r7
   26050:	ldr	r7, [r8, r1, lsl #2]
   26054:	cmp	r7, r6
   26058:	ble	26070 <__assert_fail@plt+0x14bc0>
   2605c:	sub	r7, r1, #1
   26060:	cmp	r1, #0
   26064:	mov	r1, r7
   26068:	bgt	26050 <__assert_fail@plt+0x14ba0>
   2606c:	b	26080 <__assert_fail@plt+0x14bd0>
   26070:	mov	r7, r1
   26074:	bne	26080 <__assert_fail@plt+0x14bd0>
   26078:	mov	r7, r1
   2607c:	b	2608c <__assert_fail@plt+0x14bdc>
   26080:	ldr	r1, [r9, #8]
   26084:	sub	ip, ip, #1
   26088:	str	r6, [r1, ip, lsl #2]
   2608c:	cmp	r0, #1
   26090:	mov	r8, #0
   26094:	blt	260a4 <__assert_fail@plt+0x14bf4>
   26098:	cmp	r2, #2
   2609c:	mov	r2, r3
   260a0:	bge	26000 <__assert_fail@plt+0x14b50>
   260a4:	ldr	r2, [r9, #4]
   260a8:	ldr	lr, [sl, #4]
   260ac:	ldr	r4, [r5, #4]
   260b0:	ldr	r0, [r9, #8]
   260b4:	subs	r1, r2, #1
   260b8:	add	r3, r1, lr
   260bc:	add	r3, r3, r4
   260c0:	sub	r7, r3, ip
   260c4:	add	r6, r7, #1
   260c8:	add	r5, r6, r2
   260cc:	str	r5, [r9, #4]
   260d0:	blt	26130 <__assert_fail@plt+0x14c80>
   260d4:	cmp	r7, #0
   260d8:	bmi	26130 <__assert_fail@plt+0x14c80>
   260dc:	add	r2, r2, r4
   260e0:	add	r2, r2, lr
   260e4:	sub	r2, r2, ip
   260e8:	add	r7, r0, r2, lsl #2
   260ec:	ldr	r2, [r0, r1, lsl #2]
   260f0:	ldr	r5, [r0, r3, lsl #2]
   260f4:	cmp	r5, r2
   260f8:	bgt	26114 <__assert_fail@plt+0x14c64>
   260fc:	str	r2, [r7, r1, lsl #2]
   26100:	sub	r2, r1, #1
   26104:	cmp	r1, #0
   26108:	mov	r1, r2
   2610c:	bgt	260ec <__assert_fail@plt+0x14c3c>
   26110:	b	26130 <__assert_fail@plt+0x14c80>
   26114:	str	r5, [r7, r1, lsl #2]
   26118:	sub	r7, r7, #4
   2611c:	subs	r6, r6, #1
   26120:	sub	r3, r3, #1
   26124:	mov	r2, #0
   26128:	bne	260ec <__assert_fail@plt+0x14c3c>
   2612c:	b	26134 <__assert_fail@plt+0x14c84>
   26130:	mov	r2, r6
   26134:	add	r1, r0, ip, lsl #2
   26138:	lsl	r2, r2, #2
   2613c:	bl	11258 <memcpy@plt>
   26140:	mov	r0, r8
   26144:	sub	sp, fp, #28
   26148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2614c:	mov	r8, #12
   26150:	b	26140 <__assert_fail@plt+0x14c90>
   26154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26158:	add	fp, sp, #28
   2615c:	sub	sp, sp, #44	; 0x2c
   26160:	mov	ip, r0
   26164:	ldr	r0, [r0, #28]
   26168:	mov	r8, r2
   2616c:	add	r2, r1, r1, lsl #1
   26170:	mov	r4, #0
   26174:	str	r3, [sp, #4]
   26178:	str	r4, [sp, #36]	; 0x24
   2617c:	str	r4, [sp, #32]
   26180:	str	r4, [sp, #40]	; 0x28
   26184:	add	r2, r0, r2, lsl #2
   26188:	mov	r0, r2
   2618c:	ldr	r7, [r0, #4]!
   26190:	str	r0, [sp, #28]
   26194:	cmp	r7, #1
   26198:	blt	264b0 <__assert_fail@plt+0x15000>
   2619c:	add	r4, r2, #8
   261a0:	mov	r9, #0
   261a4:	mov	sl, #1
   261a8:	str	r2, [sp]
   261ac:	str	r1, [sp, #12]
   261b0:	str	ip, [sp, #8]
   261b4:	str	r4, [sp, #20]
   261b8:	b	261c8 <__assert_fail@plt+0x14d18>
   261bc:	add	r9, r9, #1
   261c0:	cmp	r9, r7
   261c4:	bge	26388 <__assert_fail@plt+0x14ed8>
   261c8:	ldr	r3, [r4]
   261cc:	ldr	r0, [r3, r9, lsl #2]
   261d0:	cmp	r0, r1
   261d4:	beq	261bc <__assert_fail@plt+0x14d0c>
   261d8:	ldr	r2, [ip]
   261dc:	add	r2, r2, r0, lsl #3
   261e0:	ldrb	r2, [r2, #4]
   261e4:	tst	r2, #8
   261e8:	beq	261bc <__assert_fail@plt+0x14d0c>
   261ec:	ldr	r2, [ip, #20]
   261f0:	add	r0, r0, r0, lsl #1
   261f4:	mvn	lr, #0
   261f8:	str	r7, [sp, #24]
   261fc:	str	r0, [sp, #16]
   26200:	add	r0, r2, r0, lsl #2
   26204:	ldr	r6, [r0, #4]
   26208:	ldr	r0, [r0, #8]
   2620c:	cmp	r6, #2
   26210:	ldr	r5, [r0]
   26214:	ldrge	lr, [r0, #4]
   26218:	cmp	r7, #1
   2621c:	blt	26260 <__assert_fail@plt+0x14db0>
   26220:	mov	r2, #0
   26224:	subs	r6, r7, #1
   26228:	beq	2624c <__assert_fail@plt+0x14d9c>
   2622c:	add	r4, r2, r6
   26230:	lsr	r7, r4, #1
   26234:	ldr	r0, [r3, r7, lsl #2]
   26238:	cmp	r0, r5
   2623c:	addlt	r2, sl, r4, lsr #1
   26240:	movge	r6, r7
   26244:	cmp	r2, r6
   26248:	bcc	2622c <__assert_fail@plt+0x14d7c>
   2624c:	ldr	r0, [r3, r2, lsl #2]
   26250:	ldr	r4, [sp, #20]
   26254:	ldr	r7, [sp, #24]
   26258:	cmp	r0, r5
   2625c:	beq	262b8 <__assert_fail@plt+0x14e08>
   26260:	ldr	r0, [r8, #4]
   26264:	cmp	r0, #1
   26268:	blt	262b8 <__assert_fail@plt+0x14e08>
   2626c:	ldr	r1, [r8, #8]
   26270:	subs	r4, r0, #1
   26274:	mov	r6, #0
   26278:	beq	2629c <__assert_fail@plt+0x14dec>
   2627c:	add	r0, r6, r4
   26280:	lsr	r7, r0, #1
   26284:	ldr	ip, [r1, r7, lsl #2]
   26288:	cmp	ip, r5
   2628c:	addlt	r6, sl, r0, lsr #1
   26290:	movge	r4, r7
   26294:	cmp	r6, r4
   26298:	bcc	2627c <__assert_fail@plt+0x14dcc>
   2629c:	ldr	r0, [r1, r6, lsl #2]
   262a0:	ldr	r1, [sp, #12]
   262a4:	ldr	ip, [sp, #8]
   262a8:	ldr	r4, [sp, #20]
   262ac:	ldr	r7, [sp, #24]
   262b0:	cmp	r0, r5
   262b4:	beq	26354 <__assert_fail@plt+0x14ea4>
   262b8:	cmp	lr, #1
   262bc:	blt	261bc <__assert_fail@plt+0x14d0c>
   262c0:	cmp	r7, #1
   262c4:	blt	26304 <__assert_fail@plt+0x14e54>
   262c8:	mov	r2, #0
   262cc:	subs	r6, r7, #1
   262d0:	beq	262f4 <__assert_fail@plt+0x14e44>
   262d4:	add	r0, r2, r6
   262d8:	lsr	r7, r0, #1
   262dc:	ldr	r5, [r3, r7, lsl #2]
   262e0:	cmp	r5, lr
   262e4:	addlt	r2, sl, r0, lsr #1
   262e8:	movge	r6, r7
   262ec:	cmp	r2, r6
   262f0:	bcc	262d4 <__assert_fail@plt+0x14e24>
   262f4:	ldr	r0, [r3, r2, lsl #2]
   262f8:	ldr	r7, [sp, #24]
   262fc:	cmp	r0, lr
   26300:	beq	261bc <__assert_fail@plt+0x14d0c>
   26304:	ldr	r0, [r8, #4]
   26308:	cmp	r0, #1
   2630c:	blt	261bc <__assert_fail@plt+0x14d0c>
   26310:	ldr	r4, [r8, #8]
   26314:	subs	r6, r0, #1
   26318:	mov	r3, #0
   2631c:	beq	26340 <__assert_fail@plt+0x14e90>
   26320:	add	r0, r3, r6
   26324:	lsr	r7, r0, #1
   26328:	ldr	r5, [r4, r7, lsl #2]
   2632c:	cmp	r5, lr
   26330:	addlt	r3, sl, r0, lsr #1
   26334:	movge	r6, r7
   26338:	cmp	r3, r6
   2633c:	bcc	26320 <__assert_fail@plt+0x14e70>
   26340:	ldr	r0, [r4, r3, lsl #2]
   26344:	ldr	r4, [sp, #20]
   26348:	ldr	r7, [sp, #24]
   2634c:	cmp	r0, lr
   26350:	bne	261bc <__assert_fail@plt+0x14d0c>
   26354:	ldr	r0, [ip, #28]
   26358:	ldr	r1, [sp, #16]
   2635c:	add	r2, r0, r1, lsl #2
   26360:	ldr	r1, [sp, #4]
   26364:	add	r0, sp, #32
   26368:	bl	25f74 <__assert_fail@plt+0x14ac4>
   2636c:	cmp	r0, #0
   26370:	bne	264cc <__assert_fail@plt+0x1501c>
   26374:	ldr	r0, [sp, #28]
   26378:	ldr	r1, [sp, #12]
   2637c:	ldr	ip, [sp, #8]
   26380:	ldr	r7, [r0]
   26384:	b	261bc <__assert_fail@plt+0x14d0c>
   26388:	ldr	r0, [sp]
   2638c:	cmp	r7, #0
   26390:	mov	r4, #0
   26394:	ble	264b0 <__assert_fail@plt+0x15000>
   26398:	ldr	r9, [sp, #36]	; 0x24
   2639c:	ldr	lr, [r0, #8]
   263a0:	ldr	r0, [sp, #40]	; 0x28
   263a4:	mov	ip, #0
   263a8:	mov	r6, #1
   263ac:	sub	r1, r9, #1
   263b0:	str	lr, [sp, #20]
   263b4:	str	r9, [sp, #16]
   263b8:	str	r1, [sp, #24]
   263bc:	b	263d4 <__assert_fail@plt+0x14f24>
   263c0:	ldr	r1, [sp, #28]
   263c4:	add	ip, ip, #1
   263c8:	ldr	r1, [r1]
   263cc:	cmp	ip, r1
   263d0:	bge	264b8 <__assert_fail@plt+0x15008>
   263d4:	ldr	r5, [lr, ip, lsl #2]
   263d8:	cmp	r9, #1
   263dc:	blt	2641c <__assert_fail@plt+0x14f6c>
   263e0:	ldr	r2, [sp, #24]
   263e4:	mov	r1, #0
   263e8:	cmp	r2, #0
   263ec:	beq	26410 <__assert_fail@plt+0x14f60>
   263f0:	add	r3, r1, r2
   263f4:	lsr	r4, r3, #1
   263f8:	ldr	r7, [r0, r4, lsl #2]
   263fc:	cmp	r7, r5
   26400:	addlt	r1, r6, r3, lsr #1
   26404:	movge	r2, r4
   26408:	cmp	r1, r2
   2640c:	bcc	263f0 <__assert_fail@plt+0x14f40>
   26410:	ldr	r1, [r0, r1, lsl #2]
   26414:	cmp	r1, r5
   26418:	beq	263c0 <__assert_fail@plt+0x14f10>
   2641c:	ldr	r3, [r8, #4]
   26420:	cmp	r3, #1
   26424:	blt	263c0 <__assert_fail@plt+0x14f10>
   26428:	mov	r1, r8
   2642c:	ldr	r1, [r8, #8]
   26430:	subs	sl, r3, #1
   26434:	mov	r2, #0
   26438:	beq	26460 <__assert_fail@plt+0x14fb0>
   2643c:	mov	r4, sl
   26440:	add	r7, r2, r4
   26444:	lsr	lr, r7, #1
   26448:	ldr	r9, [r1, lr, lsl #2]
   2644c:	cmp	r9, r5
   26450:	addlt	r2, r6, r7, lsr #1
   26454:	movge	r4, lr
   26458:	cmp	r2, r4
   2645c:	bcc	26440 <__assert_fail@plt+0x14f90>
   26460:	ldr	r7, [r1, r2, lsl #2]
   26464:	ldr	lr, [sp, #20]
   26468:	ldr	r9, [sp, #16]
   2646c:	mov	r4, r2
   26470:	cmp	r7, r5
   26474:	mvnne	r4, #0
   26478:	cmp	r4, #0
   2647c:	bmi	263c0 <__assert_fail@plt+0x14f10>
   26480:	cmp	r3, r4
   26484:	strgt	sl, [r8, #4]
   26488:	cmpgt	sl, r4
   2648c:	ble	263c0 <__assert_fail@plt+0x14f10>
   26490:	add	r3, r1, r2, lsl #2
   26494:	ldr	r3, [r3, #4]
   26498:	str	r3, [r1, r2, lsl #2]
   2649c:	add	r2, r2, #1
   264a0:	ldr	r3, [r8, #4]
   264a4:	cmp	r2, r3
   264a8:	blt	26490 <__assert_fail@plt+0x14fe0>
   264ac:	b	263c0 <__assert_fail@plt+0x14f10>
   264b0:	ldr	r0, [sp, #40]	; 0x28
   264b4:	b	264bc <__assert_fail@plt+0x1500c>
   264b8:	mov	r4, #0
   264bc:	bl	29220 <__assert_fail@plt+0x17d70>
   264c0:	mov	r0, r4
   264c4:	sub	sp, fp, #28
   264c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264cc:	mov	r1, r0
   264d0:	ldr	r0, [sp, #40]	; 0x28
   264d4:	mov	r4, r1
   264d8:	b	264bc <__assert_fail@plt+0x1500c>
   264dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264e0:	add	fp, sp, #28
   264e4:	sub	sp, sp, #28
   264e8:	ldr	ip, [r0, #108]	; 0x6c
   264ec:	str	r1, [sp, #24]
   264f0:	ldr	r1, [r0, #84]	; 0x54
   264f4:	mov	r4, r3
   264f8:	str	r2, [sp, #8]
   264fc:	str	r0, [sp, #16]
   26500:	cmp	ip, #1
   26504:	str	r1, [sp, #20]
   26508:	blt	26570 <__assert_fail@plt+0x150c0>
   2650c:	ldr	r1, [r0, #116]	; 0x74
   26510:	mov	r9, #0
   26514:	mov	r2, #1
   26518:	mov	r3, ip
   2651c:	add	r7, r3, r9
   26520:	add	r7, r7, r7, lsr #31
   26524:	asr	r6, r7, #1
   26528:	add	r5, r6, r6, lsl #1
   2652c:	add	r5, r1, r5, lsl #3
   26530:	ldr	r5, [r5, #4]
   26534:	cmp	r5, r4
   26538:	addlt	r9, r2, r7, asr #1
   2653c:	movge	r3, r6
   26540:	cmp	r9, r3
   26544:	blt	2651c <__assert_fail@plt+0x1506c>
   26548:	cmp	r9, ip
   2654c:	bge	2657c <__assert_fail@plt+0x150cc>
   26550:	ldr	r0, [sp, #16]
   26554:	add	r2, r9, r9, lsl #1
   26558:	ldr	r1, [r0, #116]	; 0x74
   2655c:	add	r1, r1, r2, lsl #3
   26560:	ldr	r1, [r1, #4]
   26564:	cmp	r1, r4
   26568:	mvnne	r9, #0
   2656c:	b	26580 <__assert_fail@plt+0x150d0>
   26570:	mov	r9, #0
   26574:	cmp	r9, ip
   26578:	blt	26550 <__assert_fail@plt+0x150a0>
   2657c:	mvn	r9, #0
   26580:	ldr	r8, [fp, #12]
   26584:	cmp	ip, #1
   26588:	blt	265d0 <__assert_fail@plt+0x15120>
   2658c:	ldr	r0, [sp, #16]
   26590:	mov	r6, #0
   26594:	mov	r2, #1
   26598:	mov	r3, ip
   2659c:	ldr	r1, [r0, #116]	; 0x74
   265a0:	add	r7, r3, r6
   265a4:	add	r7, r7, r7, lsr #31
   265a8:	asr	r5, r7, #1
   265ac:	add	r0, r5, r5, lsl #1
   265b0:	add	r0, r1, r0, lsl #3
   265b4:	ldr	r0, [r0, #4]
   265b8:	cmp	r0, r8
   265bc:	addlt	r6, r2, r7, asr #1
   265c0:	movge	r3, r5
   265c4:	cmp	r6, r3
   265c8:	blt	265a0 <__assert_fail@plt+0x150f0>
   265cc:	b	265d4 <__assert_fail@plt+0x15124>
   265d0:	mov	r6, #0
   265d4:	cmp	r6, ip
   265d8:	ldr	ip, [sp, #16]
   265dc:	bge	265fc <__assert_fail@plt+0x1514c>
   265e0:	ldr	r0, [ip, #116]	; 0x74
   265e4:	add	r1, r6, r6, lsl #1
   265e8:	add	r0, r0, r1, lsl #3
   265ec:	ldr	r0, [r0, #4]
   265f0:	cmp	r0, r8
   265f4:	mvnne	r6, #0
   265f8:	b	26600 <__assert_fail@plt+0x15150>
   265fc:	mvn	r6, #0
   26600:	ldr	r0, [sp, #24]
   26604:	ldr	r0, [r0, #4]
   26608:	cmp	r0, #1
   2660c:	blt	2678c <__assert_fail@plt+0x152dc>
   26610:	mov	sl, #0
   26614:	str	r4, [sp, #12]
   26618:	ldr	r0, [sp, #24]
   2661c:	ldr	r3, [ip, #116]	; 0x74
   26620:	ldr	r5, [sp, #20]
   26624:	ldr	r0, [r0, #8]
   26628:	ldr	r5, [r5]
   2662c:	ldr	r2, [r0, sl, lsl #2]
   26630:	mov	r0, r3
   26634:	add	r1, r2, r2, lsl #1
   26638:	ldr	r7, [r0, r1, lsl #3]!
   2663c:	ldr	r0, [r0, #8]
   26640:	ldr	r5, [r5, r7, lsl #3]
   26644:	mvn	r7, #0
   26648:	cmp	r0, r4
   2664c:	ble	26658 <__assert_fail@plt+0x151a8>
   26650:	mvn	r8, #0
   26654:	b	266e4 <__assert_fail@plt+0x15234>
   26658:	add	r1, r3, r1, lsl #3
   2665c:	mov	r8, #1
   26660:	ldr	r1, [r1, #12]
   26664:	cmp	r1, r4
   26668:	blt	266e4 <__assert_fail@plt+0x15234>
   2666c:	sub	r1, r1, r4
   26670:	cmp	r0, r4
   26674:	mov	lr, r5
   26678:	mov	r4, #1
   2667c:	clz	r1, r1
   26680:	lsr	r5, r1, #5
   26684:	lsl	r1, r5, #1
   26688:	orreq	r1, r4, r5, lsl #1
   2668c:	cmp	r1, #0
   26690:	beq	266d8 <__assert_fail@plt+0x15228>
   26694:	ldr	r3, [sp, #8]
   26698:	mov	r0, ip
   2669c:	mov	r2, lr
   266a0:	str	r9, [sp]
   266a4:	mov	r5, lr
   266a8:	bl	26798 <__assert_fail@plt+0x152e8>
   266ac:	mov	r8, r0
   266b0:	ldr	r0, [sp, #24]
   266b4:	ldr	ip, [sp, #16]
   266b8:	ldr	r4, [sp, #12]
   266bc:	ldr	r0, [r0, #8]
   266c0:	ldr	r3, [ip, #116]	; 0x74
   266c4:	ldr	r2, [r0, sl, lsl #2]
   266c8:	add	r0, r2, r2, lsl #1
   266cc:	add	r0, r3, r0, lsl #3
   266d0:	ldr	r0, [r0, #8]
   266d4:	b	266e4 <__assert_fail@plt+0x15234>
   266d8:	ldr	r4, [sp, #12]
   266dc:	mov	r8, #0
   266e0:	mov	r5, lr
   266e4:	ldr	r1, [fp, #12]
   266e8:	cmp	r0, r1
   266ec:	bgt	26754 <__assert_fail@plt+0x152a4>
   266f0:	add	r1, r2, r2, lsl #1
   266f4:	ldr	r2, [fp, #12]
   266f8:	mov	r7, #1
   266fc:	add	r1, r3, r1, lsl #3
   26700:	ldr	r1, [r1, #12]
   26704:	cmp	r1, r2
   26708:	blt	26754 <__assert_fail@plt+0x152a4>
   2670c:	ldr	r2, [fp, #12]
   26710:	sub	r1, r1, r2
   26714:	mov	r3, r2
   26718:	clz	r1, r1
   2671c:	cmp	r0, r3
   26720:	mov	r0, #1
   26724:	lsr	r2, r1, #5
   26728:	lsl	r1, r2, #1
   2672c:	orreq	r1, r0, r2, lsl #1
   26730:	cmp	r1, #0
   26734:	beq	26774 <__assert_fail@plt+0x152c4>
   26738:	ldr	r3, [fp, #8]
   2673c:	mov	r0, ip
   26740:	mov	r2, r5
   26744:	str	r6, [sp]
   26748:	bl	26798 <__assert_fail@plt+0x152e8>
   2674c:	ldr	ip, [sp, #16]
   26750:	mov	r7, r0
   26754:	cmp	r7, r8
   26758:	bne	26780 <__assert_fail@plt+0x152d0>
   2675c:	ldr	r0, [sp, #24]
   26760:	add	sl, sl, #1
   26764:	ldr	r0, [r0, #4]
   26768:	cmp	sl, r0
   2676c:	blt	26618 <__assert_fail@plt+0x15168>
   26770:	b	2678c <__assert_fail@plt+0x152dc>
   26774:	mov	r7, #0
   26778:	cmp	r7, r8
   2677c:	beq	2675c <__assert_fail@plt+0x152ac>
   26780:	mov	r0, #1
   26784:	sub	sp, fp, #28
   26788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2678c:	mov	r0, #0
   26790:	sub	sp, fp, #28
   26794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2679c:	add	fp, sp, #28
   267a0:	sub	sp, sp, #36	; 0x24
   267a4:	ldr	r4, [r0, #84]	; 0x54
   267a8:	mov	r7, r0
   267ac:	mov	r5, r1
   267b0:	add	r1, r3, r3, lsl #1
   267b4:	str	r3, [sp, #32]
   267b8:	ldr	r0, [r4, #24]
   267bc:	add	r1, r0, r1, lsl #2
   267c0:	mov	lr, r1
   267c4:	ldr	r0, [lr, #4]!
   267c8:	cmp	r0, #1
   267cc:	blt	26978 <__assert_fail@plt+0x154c8>
   267d0:	mov	ip, #1
   267d4:	mov	r6, r2
   267d8:	and	r3, r5, #2
   267dc:	mov	sl, #0
   267e0:	mvn	r2, ip, lsl r2
   267e4:	cmp	r6, #31
   267e8:	str	r3, [sp, #16]
   267ec:	str	r2, [sp, #24]
   267f0:	lsl	r2, ip, r6
   267f4:	and	ip, r5, #1
   267f8:	str	r2, [sp, #28]
   267fc:	mov	r2, #0
   26800:	movwgt	r2, #1
   26804:	str	ip, [sp, #12]
   26808:	orr	r2, r2, r3, lsr #1
   2680c:	add	r3, r1, #8
   26810:	stmib	sp, {r3, lr}
   26814:	str	r2, [sp, #20]
   26818:	b	26838 <__assert_fail@plt+0x15388>
   2681c:	ldr	lr, [sp, #8]
   26820:	ldr	ip, [sp, #12]
   26824:	ldr	r3, [sp, #4]
   26828:	ldr	r0, [lr]
   2682c:	add	sl, sl, #1
   26830:	cmp	sl, r0
   26834:	bge	26978 <__assert_fail@plt+0x154c8>
   26838:	ldr	r1, [r3]
   2683c:	ldr	r9, [r1, sl, lsl #2]
   26840:	ldr	r1, [r4]
   26844:	add	r2, r1, r9, lsl #3
   26848:	ldrb	r2, [r2, #4]
   2684c:	cmp	r2, #9
   26850:	beq	2693c <__assert_fail@plt+0x1548c>
   26854:	cmp	r2, #8
   26858:	beq	26958 <__assert_fail@plt+0x154a8>
   2685c:	cmp	r2, #4
   26860:	bne	2682c <__assert_fail@plt+0x1537c>
   26864:	ldr	r1, [fp, #8]
   26868:	cmn	r1, #1
   2686c:	beq	2682c <__assert_fail@plt+0x1537c>
   26870:	ldr	r1, [fp, #8]
   26874:	ldr	r0, [r7, #116]	; 0x74
   26878:	add	r1, r1, r1, lsl #1
   2687c:	add	r0, r0, r1, lsl #3
   26880:	add	r8, r0, #16
   26884:	b	268a8 <__assert_fail@plt+0x153f8>
   26888:	ldr	r0, [r8]
   2688c:	ldr	r1, [sp, #24]
   26890:	and	r0, r0, r1
   26894:	str	r0, [r8]
   26898:	ldrb	r0, [r8, #4]
   2689c:	add	r8, r8, #24
   268a0:	cmp	r0, #0
   268a4:	beq	2681c <__assert_fail@plt+0x1536c>
   268a8:	ldr	r0, [r8, #-16]
   268ac:	cmp	r0, r9
   268b0:	bne	26898 <__assert_fail@plt+0x153e8>
   268b4:	cmp	r6, #31
   268b8:	bgt	268cc <__assert_fail@plt+0x1541c>
   268bc:	ldr	r0, [r8]
   268c0:	ldr	r1, [sp, #28]
   268c4:	tst	r0, r1
   268c8:	beq	26898 <__assert_fail@plt+0x153e8>
   268cc:	ldr	r0, [r4, #20]
   268d0:	add	r1, r9, r9, lsl #1
   268d4:	add	r0, r0, r1, lsl #2
   268d8:	ldr	r0, [r0, #8]
   268dc:	ldr	r3, [r0]
   268e0:	ldr	r0, [sp, #32]
   268e4:	cmp	r3, r0
   268e8:	beq	26984 <__assert_fail@plt+0x154d4>
   268ec:	ldr	r0, [fp, #8]
   268f0:	mov	r1, r5
   268f4:	mov	r2, r6
   268f8:	str	r0, [sp]
   268fc:	mov	r0, r7
   26900:	bl	26798 <__assert_fail@plt+0x152e8>
   26904:	cmp	r0, #0
   26908:	beq	26920 <__assert_fail@plt+0x15470>
   2690c:	cmn	r0, #1
   26910:	beq	26998 <__assert_fail@plt+0x154e8>
   26914:	cmp	r6, #31
   26918:	ble	26888 <__assert_fail@plt+0x153d8>
   2691c:	b	26898 <__assert_fail@plt+0x153e8>
   26920:	ldr	r0, [sp, #20]
   26924:	cmp	r0, #0
   26928:	beq	26888 <__assert_fail@plt+0x153d8>
   2692c:	ldr	r0, [sp, #16]
   26930:	cmp	r0, #0
   26934:	beq	26898 <__assert_fail@plt+0x153e8>
   26938:	b	26994 <__assert_fail@plt+0x154e4>
   2693c:	ldr	r2, [sp, #16]
   26940:	cmp	r2, #0
   26944:	beq	2682c <__assert_fail@plt+0x1537c>
   26948:	ldr	r1, [r1, r9, lsl #3]
   2694c:	cmp	r1, r6
   26950:	bne	2682c <__assert_fail@plt+0x1537c>
   26954:	b	26994 <__assert_fail@plt+0x154e4>
   26958:	cmp	ip, #0
   2695c:	beq	2682c <__assert_fail@plt+0x1537c>
   26960:	ldr	r1, [r1, r9, lsl #3]
   26964:	cmp	r1, r6
   26968:	bne	2682c <__assert_fail@plt+0x1537c>
   2696c:	mvn	r0, #0
   26970:	sub	sp, fp, #28
   26974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26978:	ubfx	r0, r5, #1, #1
   2697c:	sub	sp, fp, #28
   26980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26984:	ldr	r0, [sp, #12]
   26988:	rsb	r0, r0, #0
   2698c:	sub	sp, fp, #28
   26990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26994:	mov	r0, #0
   26998:	sub	sp, fp, #28
   2699c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   269a4:	add	fp, sp, #24
   269a8:	sub	sp, sp, #32
   269ac:	ldr	r6, [fp, #12]
   269b0:	ldr	r7, [fp, #8]
   269b4:	mov	r4, r2
   269b8:	mov	r8, r0
   269bc:	cmp	r1, #0
   269c0:	beq	269e8 <__assert_fail@plt+0x15538>
   269c4:	movw	r2, #42577	; 0xa651
   269c8:	mov	r5, r1
   269cc:	str	r3, [sp, #4]
   269d0:	str	r4, [sp]
   269d4:	mov	r0, r8
   269d8:	mov	r1, #1
   269dc:	movt	r2, #2
   269e0:	mov	r3, r5
   269e4:	b	26a00 <__assert_fail@plt+0x15550>
   269e8:	movw	r2, #42589	; 0xa65d
   269ec:	str	r3, [sp]
   269f0:	mov	r0, r8
   269f4:	mov	r1, #1
   269f8:	mov	r3, r4
   269fc:	movt	r2, #2
   26a00:	bl	113fc <__fprintf_chk@plt>
   26a04:	movw	r1, #42596	; 0xa664
   26a08:	mov	r0, #0
   26a0c:	mov	r2, #5
   26a10:	movt	r1, #2
   26a14:	bl	112a0 <dcgettext@plt>
   26a18:	movw	r2, #43314	; 0xa932
   26a1c:	mov	r3, r0
   26a20:	movw	r0, #2022	; 0x7e6
   26a24:	mov	r1, #1
   26a28:	movt	r2, #2
   26a2c:	str	r0, [sp]
   26a30:	mov	r0, r8
   26a34:	bl	113fc <__fprintf_chk@plt>
   26a38:	movw	r4, #40351	; 0x9d9f
   26a3c:	mov	r1, r8
   26a40:	movt	r4, #2
   26a44:	mov	r0, r4
   26a48:	bl	111bc <fputs_unlocked@plt>
   26a4c:	movw	r1, #42600	; 0xa668
   26a50:	mov	r0, #0
   26a54:	mov	r2, #5
   26a58:	movt	r1, #2
   26a5c:	bl	112a0 <dcgettext@plt>
   26a60:	movw	r3, #42771	; 0xa713
   26a64:	mov	r2, r0
   26a68:	mov	r0, r8
   26a6c:	mov	r1, #1
   26a70:	movt	r3, #2
   26a74:	bl	113fc <__fprintf_chk@plt>
   26a78:	mov	r0, r4
   26a7c:	mov	r1, r8
   26a80:	bl	111bc <fputs_unlocked@plt>
   26a84:	cmp	r6, #9
   26a88:	bhi	26ac4 <__assert_fail@plt+0x15614>
   26a8c:	add	r0, pc, #0
   26a90:	ldr	pc, [r0, r6, lsl #2]
   26a94:			; <UNDEFINED> instruction: 0x00026abc
   26a98:	ldrdeq	r6, [r2], -r0
   26a9c:	andeq	r6, r2, r0, lsl #22
   26aa0:	andeq	r6, r2, r8, lsr #22
   26aa4:	andeq	r6, r2, r0, asr fp
   26aa8:	andeq	r6, r2, r8, ror fp
   26aac:	andeq	r6, r2, r0, lsr #23
   26ab0:	ldrdeq	r6, [r2], -r8
   26ab4:	andeq	r6, r2, r8, ror ip
   26ab8:	andeq	r6, r2, r0, lsr #24
   26abc:	sub	sp, fp, #24
   26ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26ac4:	movw	r1, #43124	; 0xa874
   26ac8:	movt	r1, #2
   26acc:	b	26c28 <__assert_fail@plt+0x15778>
   26ad0:	movw	r1, #42805	; 0xa735
   26ad4:	mov	r0, #0
   26ad8:	mov	r2, #5
   26adc:	movt	r1, #2
   26ae0:	bl	112a0 <dcgettext@plt>
   26ae4:	ldr	r3, [r7]
   26ae8:	mov	r2, r0
   26aec:	mov	r0, r8
   26af0:	mov	r1, #1
   26af4:	sub	sp, fp, #24
   26af8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   26afc:	b	113fc <__fprintf_chk@plt>
   26b00:	movw	r1, #42821	; 0xa745
   26b04:	mov	r0, #0
   26b08:	mov	r2, #5
   26b0c:	movt	r1, #2
   26b10:	bl	112a0 <dcgettext@plt>
   26b14:	mov	r2, r0
   26b18:	ldr	r3, [r7]
   26b1c:	ldr	r0, [r7, #4]
   26b20:	str	r0, [sp]
   26b24:	b	26c14 <__assert_fail@plt+0x15764>
   26b28:	movw	r1, #42844	; 0xa75c
   26b2c:	mov	r0, #0
   26b30:	mov	r2, #5
   26b34:	movt	r1, #2
   26b38:	bl	112a0 <dcgettext@plt>
   26b3c:	mov	r2, r0
   26b40:	ldr	r3, [r7]
   26b44:	ldmib	r7, {r0, r1}
   26b48:	stm	sp, {r0, r1}
   26b4c:	b	26c14 <__assert_fail@plt+0x15764>
   26b50:	movw	r1, #42872	; 0xa778
   26b54:	mov	r0, #0
   26b58:	mov	r2, #5
   26b5c:	movt	r1, #2
   26b60:	bl	112a0 <dcgettext@plt>
   26b64:	ldr	r3, [r7]
   26b68:	mov	r2, r0
   26b6c:	ldmib	r7, {r0, r1, r7}
   26b70:	stm	sp, {r0, r1, r7}
   26b74:	b	26c14 <__assert_fail@plt+0x15764>
   26b78:	movw	r1, #42904	; 0xa798
   26b7c:	mov	r0, #0
   26b80:	mov	r2, #5
   26b84:	movt	r1, #2
   26b88:	bl	112a0 <dcgettext@plt>
   26b8c:	ldr	r3, [r7]
   26b90:	mov	r2, r0
   26b94:	ldmib	r7, {r0, r1, r6, r7}
   26b98:	stm	sp, {r0, r1, r6, r7}
   26b9c:	b	26c14 <__assert_fail@plt+0x15764>
   26ba0:	movw	r1, #42940	; 0xa7bc
   26ba4:	mov	r0, #0
   26ba8:	mov	r2, #5
   26bac:	movt	r1, #2
   26bb0:	bl	112a0 <dcgettext@plt>
   26bb4:	mov	r2, r0
   26bb8:	ldr	r3, [r7]
   26bbc:	ldmib	r7, {r0, r1, r6}
   26bc0:	ldr	r5, [r7, #16]
   26bc4:	ldr	r7, [r7, #20]
   26bc8:	stm	sp, {r0, r1, r6}
   26bcc:	str	r5, [sp, #12]
   26bd0:	str	r7, [sp, #16]
   26bd4:	b	26c14 <__assert_fail@plt+0x15764>
   26bd8:	movw	r1, #42980	; 0xa7e4
   26bdc:	mov	r0, #0
   26be0:	mov	r2, #5
   26be4:	movt	r1, #2
   26be8:	bl	112a0 <dcgettext@plt>
   26bec:	mov	r2, r0
   26bf0:	ldr	r3, [r7]
   26bf4:	ldmib	r7, {r0, r1, r6}
   26bf8:	ldr	r5, [r7, #16]
   26bfc:	ldr	r4, [r7, #20]
   26c00:	ldr	r7, [r7, #24]
   26c04:	stm	sp, {r0, r1, r6}
   26c08:	str	r5, [sp, #12]
   26c0c:	str	r4, [sp, #16]
   26c10:	str	r7, [sp, #20]
   26c14:	mov	r0, r8
   26c18:	mov	r1, #1
   26c1c:	b	26cc8 <__assert_fail@plt+0x15818>
   26c20:	movw	r1, #43072	; 0xa840
   26c24:	movt	r1, #2
   26c28:	mov	r0, #0
   26c2c:	mov	r2, #5
   26c30:	bl	112a0 <dcgettext@plt>
   26c34:	mov	ip, r0
   26c38:	ldr	r3, [r7]
   26c3c:	ldr	r0, [r7, #4]
   26c40:	ldr	r1, [r7, #8]
   26c44:	ldr	r6, [r7, #12]
   26c48:	ldr	r5, [r7, #16]
   26c4c:	ldr	r4, [r7, #20]
   26c50:	ldr	r2, [r7, #24]
   26c54:	ldr	lr, [r7, #28]
   26c58:	ldr	r7, [r7, #32]
   26c5c:	stm	sp, {r0, r1, r6}
   26c60:	str	r5, [sp, #12]
   26c64:	str	r4, [sp, #16]
   26c68:	str	r2, [sp, #20]
   26c6c:	str	lr, [sp, #24]
   26c70:	str	r7, [sp, #28]
   26c74:	b	26cbc <__assert_fail@plt+0x1580c>
   26c78:	movw	r1, #43024	; 0xa810
   26c7c:	mov	r0, #0
   26c80:	mov	r2, #5
   26c84:	movt	r1, #2
   26c88:	bl	112a0 <dcgettext@plt>
   26c8c:	mov	ip, r0
   26c90:	ldr	r3, [r7]
   26c94:	ldmib	r7, {r0, r1, r6}
   26c98:	ldr	r5, [r7, #16]
   26c9c:	ldr	r4, [r7, #20]
   26ca0:	ldr	r2, [r7, #24]
   26ca4:	ldr	r7, [r7, #28]
   26ca8:	stm	sp, {r0, r1, r6}
   26cac:	str	r5, [sp, #12]
   26cb0:	str	r4, [sp, #16]
   26cb4:	str	r2, [sp, #20]
   26cb8:	str	r7, [sp, #24]
   26cbc:	mov	r0, r8
   26cc0:	mov	r1, #1
   26cc4:	mov	r2, ip
   26cc8:	bl	113fc <__fprintf_chk@plt>
   26ccc:	sub	sp, fp, #24
   26cd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26cd4:	push	{r4, sl, fp, lr}
   26cd8:	add	fp, sp, #8
   26cdc:	sub	sp, sp, #8
   26ce0:	ldr	ip, [fp, #8]
   26ce4:	mov	lr, #0
   26ce8:	ldr	r4, [ip, lr, lsl #2]
   26cec:	add	lr, lr, #1
   26cf0:	cmp	r4, #0
   26cf4:	bne	26ce8 <__assert_fail@plt+0x15838>
   26cf8:	sub	r4, lr, #1
   26cfc:	str	ip, [sp]
   26d00:	str	r4, [sp, #4]
   26d04:	bl	269a0 <__assert_fail@plt+0x154f0>
   26d08:	sub	sp, fp, #8
   26d0c:	pop	{r4, sl, fp, pc}
   26d10:	push	{fp, lr}
   26d14:	mov	fp, sp
   26d18:	sub	sp, sp, #48	; 0x30
   26d1c:	ldr	ip, [fp, #8]
   26d20:	ldr	lr, [ip]
   26d24:	cmp	lr, #0
   26d28:	str	lr, [sp, #8]
   26d2c:	beq	26dc8 <__assert_fail@plt+0x15918>
   26d30:	ldr	lr, [ip, #4]
   26d34:	cmp	lr, #0
   26d38:	str	lr, [sp, #12]
   26d3c:	beq	26dd0 <__assert_fail@plt+0x15920>
   26d40:	ldr	lr, [ip, #8]
   26d44:	cmp	lr, #0
   26d48:	str	lr, [sp, #16]
   26d4c:	beq	26dd8 <__assert_fail@plt+0x15928>
   26d50:	ldr	lr, [ip, #12]
   26d54:	cmp	lr, #0
   26d58:	str	lr, [sp, #20]
   26d5c:	beq	26de0 <__assert_fail@plt+0x15930>
   26d60:	ldr	lr, [ip, #16]
   26d64:	cmp	lr, #0
   26d68:	str	lr, [sp, #24]
   26d6c:	beq	26de8 <__assert_fail@plt+0x15938>
   26d70:	ldr	lr, [ip, #20]
   26d74:	cmp	lr, #0
   26d78:	str	lr, [sp, #28]
   26d7c:	beq	26df0 <__assert_fail@plt+0x15940>
   26d80:	ldr	lr, [ip, #24]
   26d84:	cmp	lr, #0
   26d88:	str	lr, [sp, #32]
   26d8c:	beq	26df8 <__assert_fail@plt+0x15948>
   26d90:	ldr	lr, [ip, #28]
   26d94:	cmp	lr, #0
   26d98:	str	lr, [sp, #36]	; 0x24
   26d9c:	beq	26e00 <__assert_fail@plt+0x15950>
   26da0:	ldr	lr, [ip, #32]
   26da4:	cmp	lr, #0
   26da8:	str	lr, [sp, #40]	; 0x28
   26dac:	beq	26e08 <__assert_fail@plt+0x15958>
   26db0:	ldr	lr, [ip, #36]	; 0x24
   26db4:	mov	ip, #10
   26db8:	cmp	lr, #0
   26dbc:	str	lr, [sp, #44]	; 0x2c
   26dc0:	movweq	ip, #9
   26dc4:	b	26e0c <__assert_fail@plt+0x1595c>
   26dc8:	mov	ip, #0
   26dcc:	b	26e0c <__assert_fail@plt+0x1595c>
   26dd0:	mov	ip, #1
   26dd4:	b	26e0c <__assert_fail@plt+0x1595c>
   26dd8:	mov	ip, #2
   26ddc:	b	26e0c <__assert_fail@plt+0x1595c>
   26de0:	mov	ip, #3
   26de4:	b	26e0c <__assert_fail@plt+0x1595c>
   26de8:	mov	ip, #4
   26dec:	b	26e0c <__assert_fail@plt+0x1595c>
   26df0:	mov	ip, #5
   26df4:	b	26e0c <__assert_fail@plt+0x1595c>
   26df8:	mov	ip, #6
   26dfc:	b	26e0c <__assert_fail@plt+0x1595c>
   26e00:	mov	ip, #7
   26e04:	b	26e0c <__assert_fail@plt+0x1595c>
   26e08:	mov	ip, #8
   26e0c:	add	lr, sp, #8
   26e10:	str	ip, [sp, #4]
   26e14:	str	lr, [sp]
   26e18:	bl	269a0 <__assert_fail@plt+0x154f0>
   26e1c:	mov	sp, fp
   26e20:	pop	{fp, pc}
   26e24:	push	{fp, lr}
   26e28:	mov	fp, sp
   26e2c:	sub	sp, sp, #56	; 0x38
   26e30:	add	ip, fp, #8
   26e34:	str	ip, [sp, #12]
   26e38:	ldr	lr, [fp, #8]
   26e3c:	cmp	lr, #0
   26e40:	str	lr, [sp, #16]
   26e44:	beq	26ee0 <__assert_fail@plt+0x15a30>
   26e48:	ldr	lr, [ip, #4]
   26e4c:	cmp	lr, #0
   26e50:	str	lr, [sp, #20]
   26e54:	beq	26ee8 <__assert_fail@plt+0x15a38>
   26e58:	ldr	lr, [ip, #8]
   26e5c:	cmp	lr, #0
   26e60:	str	lr, [sp, #24]
   26e64:	beq	26ef0 <__assert_fail@plt+0x15a40>
   26e68:	ldr	lr, [ip, #12]
   26e6c:	cmp	lr, #0
   26e70:	str	lr, [sp, #28]
   26e74:	beq	26ef8 <__assert_fail@plt+0x15a48>
   26e78:	ldr	lr, [ip, #16]
   26e7c:	cmp	lr, #0
   26e80:	str	lr, [sp, #32]
   26e84:	beq	26f00 <__assert_fail@plt+0x15a50>
   26e88:	ldr	lr, [ip, #20]
   26e8c:	cmp	lr, #0
   26e90:	str	lr, [sp, #36]	; 0x24
   26e94:	beq	26f08 <__assert_fail@plt+0x15a58>
   26e98:	ldr	lr, [ip, #24]
   26e9c:	cmp	lr, #0
   26ea0:	str	lr, [sp, #40]	; 0x28
   26ea4:	beq	26f10 <__assert_fail@plt+0x15a60>
   26ea8:	ldr	lr, [ip, #28]
   26eac:	cmp	lr, #0
   26eb0:	str	lr, [sp, #44]	; 0x2c
   26eb4:	beq	26f18 <__assert_fail@plt+0x15a68>
   26eb8:	ldr	lr, [ip, #32]
   26ebc:	cmp	lr, #0
   26ec0:	str	lr, [sp, #48]	; 0x30
   26ec4:	beq	26f20 <__assert_fail@plt+0x15a70>
   26ec8:	ldr	lr, [ip, #36]	; 0x24
   26ecc:	mov	ip, #10
   26ed0:	cmp	lr, #0
   26ed4:	str	lr, [sp, #52]	; 0x34
   26ed8:	movweq	ip, #9
   26edc:	b	26f24 <__assert_fail@plt+0x15a74>
   26ee0:	mov	ip, #0
   26ee4:	b	26f24 <__assert_fail@plt+0x15a74>
   26ee8:	mov	ip, #1
   26eec:	b	26f24 <__assert_fail@plt+0x15a74>
   26ef0:	mov	ip, #2
   26ef4:	b	26f24 <__assert_fail@plt+0x15a74>
   26ef8:	mov	ip, #3
   26efc:	b	26f24 <__assert_fail@plt+0x15a74>
   26f00:	mov	ip, #4
   26f04:	b	26f24 <__assert_fail@plt+0x15a74>
   26f08:	mov	ip, #5
   26f0c:	b	26f24 <__assert_fail@plt+0x15a74>
   26f10:	mov	ip, #6
   26f14:	b	26f24 <__assert_fail@plt+0x15a74>
   26f18:	mov	ip, #7
   26f1c:	b	26f24 <__assert_fail@plt+0x15a74>
   26f20:	mov	ip, #8
   26f24:	add	lr, sp, #16
   26f28:	str	ip, [sp, #4]
   26f2c:	str	lr, [sp]
   26f30:	bl	269a0 <__assert_fail@plt+0x154f0>
   26f34:	mov	sp, fp
   26f38:	pop	{fp, pc}
   26f3c:	push	{fp, lr}
   26f40:	mov	fp, sp
   26f44:	movw	r0, #45508	; 0xb1c4
   26f48:	movt	r0, #3
   26f4c:	ldr	r1, [r0]
   26f50:	movw	r0, #40351	; 0x9d9f
   26f54:	movt	r0, #2
   26f58:	bl	111bc <fputs_unlocked@plt>
   26f5c:	movw	r1, #43184	; 0xa8b0
   26f60:	mov	r0, #0
   26f64:	mov	r2, #5
   26f68:	movt	r1, #2
   26f6c:	bl	112a0 <dcgettext@plt>
   26f70:	movw	r2, #43204	; 0xa8c4
   26f74:	mov	r1, r0
   26f78:	mov	r0, #1
   26f7c:	movt	r2, #2
   26f80:	bl	113e4 <__printf_chk@plt>
   26f84:	movw	r1, #43226	; 0xa8da
   26f88:	mov	r0, #0
   26f8c:	mov	r2, #5
   26f90:	movt	r1, #2
   26f94:	bl	112a0 <dcgettext@plt>
   26f98:	movw	r2, #40674	; 0x9ee2
   26f9c:	movw	r3, #40967	; 0xa007
   26fa0:	mov	r1, r0
   26fa4:	mov	r0, #1
   26fa8:	movt	r2, #2
   26fac:	movt	r3, #2
   26fb0:	bl	113e4 <__printf_chk@plt>
   26fb4:	movw	r1, #43246	; 0xa8ee
   26fb8:	mov	r0, #0
   26fbc:	mov	r2, #5
   26fc0:	movt	r1, #2
   26fc4:	bl	112a0 <dcgettext@plt>
   26fc8:	movw	r2, #43285	; 0xa915
   26fcc:	mov	r1, r0
   26fd0:	mov	r0, #1
   26fd4:	movt	r2, #2
   26fd8:	pop	{fp, lr}
   26fdc:	b	113e4 <__printf_chk@plt>
   26fe0:	push	{r4, r5, r6, sl, fp, lr}
   26fe4:	add	fp, sp, #16
   26fe8:	mov	r4, r2
   26fec:	mov	r5, r1
   26ff0:	mov	r6, r0
   26ff4:	bl	292e4 <__assert_fail@plt+0x17e34>
   26ff8:	cmp	r0, #0
   26ffc:	popne	{r4, r5, r6, sl, fp, pc}
   27000:	cmp	r6, #0
   27004:	beq	27018 <__assert_fail@plt+0x15b68>
   27008:	cmp	r5, #0
   2700c:	cmpne	r4, #0
   27010:	bne	27018 <__assert_fail@plt+0x15b68>
   27014:	pop	{r4, r5, r6, sl, fp, pc}
   27018:	bl	27594 <__assert_fail@plt+0x160e4>
   2701c:	push	{r4, r5, r6, sl, fp, lr}
   27020:	add	fp, sp, #16
   27024:	mov	r4, r2
   27028:	mov	r5, r1
   2702c:	mov	r6, r0
   27030:	bl	292e4 <__assert_fail@plt+0x17e34>
   27034:	cmp	r0, #0
   27038:	popne	{r4, r5, r6, sl, fp, pc}
   2703c:	cmp	r6, #0
   27040:	beq	27054 <__assert_fail@plt+0x15ba4>
   27044:	cmp	r5, #0
   27048:	cmpne	r4, #0
   2704c:	bne	27054 <__assert_fail@plt+0x15ba4>
   27050:	pop	{r4, r5, r6, sl, fp, pc}
   27054:	bl	27594 <__assert_fail@plt+0x160e4>
   27058:	push	{fp, lr}
   2705c:	mov	fp, sp
   27060:	bl	29054 <__assert_fail@plt+0x17ba4>
   27064:	cmp	r0, #0
   27068:	popne	{fp, pc}
   2706c:	bl	27594 <__assert_fail@plt+0x160e4>
   27070:	push	{fp, lr}
   27074:	mov	fp, sp
   27078:	bl	29054 <__assert_fail@plt+0x17ba4>
   2707c:	cmp	r0, #0
   27080:	popne	{fp, pc}
   27084:	bl	27594 <__assert_fail@plt+0x160e4>
   27088:	push	{fp, lr}
   2708c:	mov	fp, sp
   27090:	bl	29054 <__assert_fail@plt+0x17ba4>
   27094:	cmp	r0, #0
   27098:	popne	{fp, pc}
   2709c:	bl	27594 <__assert_fail@plt+0x160e4>
   270a0:	push	{r4, r5, fp, lr}
   270a4:	add	fp, sp, #8
   270a8:	mov	r4, r1
   270ac:	mov	r5, r0
   270b0:	bl	29084 <__assert_fail@plt+0x17bd4>
   270b4:	cmp	r0, #0
   270b8:	popne	{r4, r5, fp, pc}
   270bc:	cmp	r5, #0
   270c0:	beq	270d0 <__assert_fail@plt+0x15c20>
   270c4:	cmp	r4, #0
   270c8:	bne	270d0 <__assert_fail@plt+0x15c20>
   270cc:	pop	{r4, r5, fp, pc}
   270d0:	bl	27594 <__assert_fail@plt+0x160e4>
   270d4:	push	{fp, lr}
   270d8:	mov	fp, sp
   270dc:	cmp	r1, #0
   270e0:	orreq	r1, r1, #1
   270e4:	bl	29084 <__assert_fail@plt+0x17bd4>
   270e8:	cmp	r0, #0
   270ec:	popne	{fp, pc}
   270f0:	bl	27594 <__assert_fail@plt+0x160e4>
   270f4:	push	{fp, lr}
   270f8:	mov	fp, sp
   270fc:	clz	r3, r2
   27100:	lsr	ip, r3, #5
   27104:	clz	r3, r1
   27108:	lsr	r3, r3, #5
   2710c:	orrs	r3, r3, ip
   27110:	movwne	r1, #1
   27114:	movwne	r2, #1
   27118:	bl	292e4 <__assert_fail@plt+0x17e34>
   2711c:	cmp	r0, #0
   27120:	popne	{fp, pc}
   27124:	bl	27594 <__assert_fail@plt+0x160e4>
   27128:	push	{fp, lr}
   2712c:	mov	fp, sp
   27130:	mov	r2, r1
   27134:	mov	r1, r0
   27138:	mov	r0, #0
   2713c:	bl	292e4 <__assert_fail@plt+0x17e34>
   27140:	cmp	r0, #0
   27144:	popne	{fp, pc}
   27148:	bl	27594 <__assert_fail@plt+0x160e4>
   2714c:	push	{fp, lr}
   27150:	mov	fp, sp
   27154:	mov	r2, r1
   27158:	mov	r1, r0
   2715c:	clz	r0, r2
   27160:	clz	r3, r1
   27164:	lsr	r0, r0, #5
   27168:	lsr	r3, r3, #5
   2716c:	orrs	r0, r3, r0
   27170:	mov	r0, #0
   27174:	movwne	r1, #1
   27178:	movwne	r2, #1
   2717c:	bl	292e4 <__assert_fail@plt+0x17e34>
   27180:	cmp	r0, #0
   27184:	popne	{fp, pc}
   27188:	bl	27594 <__assert_fail@plt+0x160e4>
   2718c:	push	{r4, r5, r6, sl, fp, lr}
   27190:	add	fp, sp, #16
   27194:	ldr	r5, [r1]
   27198:	mov	r4, r1
   2719c:	mov	r6, r0
   271a0:	cmp	r0, #0
   271a4:	beq	271bc <__assert_fail@plt+0x15d0c>
   271a8:	mov	r0, #1
   271ac:	add	r0, r0, r5, lsr #1
   271b0:	adds	r5, r5, r0
   271b4:	bcc	271c4 <__assert_fail@plt+0x15d14>
   271b8:	b	27200 <__assert_fail@plt+0x15d50>
   271bc:	cmp	r5, #0
   271c0:	movweq	r5, #64	; 0x40
   271c4:	mov	r0, r6
   271c8:	mov	r1, r5
   271cc:	mov	r2, #1
   271d0:	bl	292e4 <__assert_fail@plt+0x17e34>
   271d4:	cmp	r5, #0
   271d8:	mov	r1, r5
   271dc:	movwne	r1, #1
   271e0:	cmp	r0, #0
   271e4:	bne	271f8 <__assert_fail@plt+0x15d48>
   271e8:	clz	r2, r6
   271ec:	lsr	r2, r2, #5
   271f0:	orrs	r1, r2, r1
   271f4:	bne	27200 <__assert_fail@plt+0x15d50>
   271f8:	str	r5, [r4]
   271fc:	pop	{r4, r5, r6, sl, fp, pc}
   27200:	bl	27594 <__assert_fail@plt+0x160e4>
   27204:	push	{r4, r5, r6, r7, fp, lr}
   27208:	add	fp, sp, #16
   2720c:	ldr	r5, [r1]
   27210:	mov	r6, r2
   27214:	mov	r4, r1
   27218:	mov	r7, r0
   2721c:	cmp	r0, #0
   27220:	beq	27238 <__assert_fail@plt+0x15d88>
   27224:	mov	r0, #1
   27228:	add	r0, r0, r5, lsr #1
   2722c:	adds	r5, r5, r0
   27230:	bcc	27250 <__assert_fail@plt+0x15da0>
   27234:	b	27284 <__assert_fail@plt+0x15dd4>
   27238:	cmp	r5, #0
   2723c:	bne	27250 <__assert_fail@plt+0x15da0>
   27240:	mov	r0, #64	; 0x40
   27244:	cmp	r6, #64	; 0x40
   27248:	udiv	r5, r0, r6
   2724c:	addhi	r5, r5, #1
   27250:	mov	r0, r7
   27254:	mov	r1, r5
   27258:	mov	r2, r6
   2725c:	bl	292e4 <__assert_fail@plt+0x17e34>
   27260:	cmp	r0, #0
   27264:	bne	2727c <__assert_fail@plt+0x15dcc>
   27268:	cmp	r7, #0
   2726c:	beq	27284 <__assert_fail@plt+0x15dd4>
   27270:	cmp	r6, #0
   27274:	cmpne	r5, #0
   27278:	bne	27284 <__assert_fail@plt+0x15dd4>
   2727c:	str	r5, [r4]
   27280:	pop	{r4, r5, r6, r7, fp, pc}
   27284:	bl	27594 <__assert_fail@plt+0x160e4>
   27288:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2728c:	add	fp, sp, #24
   27290:	mov	r8, r1
   27294:	ldr	r1, [r1]
   27298:	mov	r5, r0
   2729c:	add	r0, r1, r1, asr #1
   272a0:	cmp	r0, r1
   272a4:	mvnvs	r0, #-2147483648	; 0x80000000
   272a8:	cmp	r0, r3
   272ac:	mov	r7, r0
   272b0:	movgt	r7, r3
   272b4:	cmn	r3, #1
   272b8:	movle	r7, r0
   272bc:	ldr	r0, [fp, #8]
   272c0:	cmn	r0, #1
   272c4:	ble	272ec <__assert_fail@plt+0x15e3c>
   272c8:	cmp	r0, #0
   272cc:	beq	27340 <__assert_fail@plt+0x15e90>
   272d0:	cmn	r7, #1
   272d4:	ble	27314 <__assert_fail@plt+0x15e64>
   272d8:	mvn	r4, #-2147483648	; 0x80000000
   272dc:	udiv	r6, r4, r0
   272e0:	cmp	r6, r7
   272e4:	bge	27340 <__assert_fail@plt+0x15e90>
   272e8:	b	27350 <__assert_fail@plt+0x15ea0>
   272ec:	cmn	r7, #1
   272f0:	ble	27330 <__assert_fail@plt+0x15e80>
   272f4:	cmn	r0, #1
   272f8:	beq	27340 <__assert_fail@plt+0x15e90>
   272fc:	mov	r6, #-2147483648	; 0x80000000
   27300:	mvn	r4, #-2147483648	; 0x80000000
   27304:	sdiv	r6, r6, r0
   27308:	cmp	r6, r7
   2730c:	bge	27340 <__assert_fail@plt+0x15e90>
   27310:	b	27350 <__assert_fail@plt+0x15ea0>
   27314:	beq	27340 <__assert_fail@plt+0x15e90>
   27318:	mov	r6, #-2147483648	; 0x80000000
   2731c:	mvn	r4, #-2147483648	; 0x80000000
   27320:	sdiv	r6, r6, r7
   27324:	cmp	r6, r0
   27328:	bge	27340 <__assert_fail@plt+0x15e90>
   2732c:	b	27350 <__assert_fail@plt+0x15ea0>
   27330:	mvn	r4, #-2147483648	; 0x80000000
   27334:	sdiv	r6, r4, r0
   27338:	cmp	r7, r6
   2733c:	blt	27350 <__assert_fail@plt+0x15ea0>
   27340:	mul	r6, r7, r0
   27344:	mov	r4, #64	; 0x40
   27348:	cmp	r6, #63	; 0x3f
   2734c:	bgt	27358 <__assert_fail@plt+0x15ea8>
   27350:	sdiv	r7, r4, r0
   27354:	mul	r6, r7, r0
   27358:	cmp	r5, #0
   2735c:	moveq	r4, #0
   27360:	streq	r4, [r8]
   27364:	sub	r4, r7, r1
   27368:	cmp	r4, r2
   2736c:	bge	27418 <__assert_fail@plt+0x15f68>
   27370:	add	r7, r1, r2
   27374:	mov	r6, #0
   27378:	mov	r2, #0
   2737c:	cmp	r7, r3
   27380:	movwgt	r6, #1
   27384:	cmn	r3, #1
   27388:	movwgt	r2, #1
   2738c:	cmp	r7, r1
   27390:	bvs	2744c <__assert_fail@plt+0x15f9c>
   27394:	ands	r1, r2, r6
   27398:	bne	2744c <__assert_fail@plt+0x15f9c>
   2739c:	cmn	r0, #1
   273a0:	ble	273c8 <__assert_fail@plt+0x15f18>
   273a4:	cmp	r0, #0
   273a8:	beq	27414 <__assert_fail@plt+0x15f64>
   273ac:	cmn	r7, #1
   273b0:	ble	273ec <__assert_fail@plt+0x15f3c>
   273b4:	mvn	r1, #-2147483648	; 0x80000000
   273b8:	udiv	r1, r1, r0
   273bc:	cmp	r1, r7
   273c0:	bge	27414 <__assert_fail@plt+0x15f64>
   273c4:	b	2744c <__assert_fail@plt+0x15f9c>
   273c8:	cmn	r7, #1
   273cc:	ble	27404 <__assert_fail@plt+0x15f54>
   273d0:	cmn	r0, #1
   273d4:	beq	27414 <__assert_fail@plt+0x15f64>
   273d8:	mov	r1, #-2147483648	; 0x80000000
   273dc:	sdiv	r1, r1, r0
   273e0:	cmp	r1, r7
   273e4:	bge	27414 <__assert_fail@plt+0x15f64>
   273e8:	b	2744c <__assert_fail@plt+0x15f9c>
   273ec:	beq	27414 <__assert_fail@plt+0x15f64>
   273f0:	mov	r1, #-2147483648	; 0x80000000
   273f4:	sdiv	r1, r1, r7
   273f8:	cmp	r1, r0
   273fc:	bge	27414 <__assert_fail@plt+0x15f64>
   27400:	b	2744c <__assert_fail@plt+0x15f9c>
   27404:	mvn	r1, #-2147483648	; 0x80000000
   27408:	sdiv	r1, r1, r0
   2740c:	cmp	r7, r1
   27410:	blt	2744c <__assert_fail@plt+0x15f9c>
   27414:	mul	r6, r7, r0
   27418:	mov	r0, r5
   2741c:	mov	r1, r6
   27420:	bl	29084 <__assert_fail@plt+0x17bd4>
   27424:	cmp	r6, #0
   27428:	movwne	r6, #1
   2742c:	cmp	r0, #0
   27430:	bne	27444 <__assert_fail@plt+0x15f94>
   27434:	clz	r1, r5
   27438:	lsr	r1, r1, #5
   2743c:	orrs	r1, r1, r6
   27440:	bne	2744c <__assert_fail@plt+0x15f9c>
   27444:	str	r7, [r8]
   27448:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2744c:	bl	27594 <__assert_fail@plt+0x160e4>
   27450:	push	{fp, lr}
   27454:	mov	fp, sp
   27458:	mov	r1, #1
   2745c:	bl	29000 <__assert_fail@plt+0x17b50>
   27460:	cmp	r0, #0
   27464:	popne	{fp, pc}
   27468:	bl	27594 <__assert_fail@plt+0x160e4>
   2746c:	push	{fp, lr}
   27470:	mov	fp, sp
   27474:	bl	29000 <__assert_fail@plt+0x17b50>
   27478:	cmp	r0, #0
   2747c:	popne	{fp, pc}
   27480:	bl	27594 <__assert_fail@plt+0x160e4>
   27484:	push	{fp, lr}
   27488:	mov	fp, sp
   2748c:	mov	r1, #1
   27490:	bl	29000 <__assert_fail@plt+0x17b50>
   27494:	cmp	r0, #0
   27498:	popne	{fp, pc}
   2749c:	bl	27594 <__assert_fail@plt+0x160e4>
   274a0:	push	{fp, lr}
   274a4:	mov	fp, sp
   274a8:	bl	29000 <__assert_fail@plt+0x17b50>
   274ac:	cmp	r0, #0
   274b0:	popne	{fp, pc}
   274b4:	bl	27594 <__assert_fail@plt+0x160e4>
   274b8:	push	{r4, r5, fp, lr}
   274bc:	add	fp, sp, #8
   274c0:	mov	r5, r0
   274c4:	mov	r0, r1
   274c8:	mov	r4, r1
   274cc:	bl	29054 <__assert_fail@plt+0x17ba4>
   274d0:	cmp	r0, #0
   274d4:	beq	274e8 <__assert_fail@plt+0x16038>
   274d8:	mov	r1, r5
   274dc:	mov	r2, r4
   274e0:	pop	{r4, r5, fp, lr}
   274e4:	b	11258 <memcpy@plt>
   274e8:	bl	27594 <__assert_fail@plt+0x160e4>
   274ec:	push	{r4, r5, fp, lr}
   274f0:	add	fp, sp, #8
   274f4:	mov	r5, r0
   274f8:	mov	r0, r1
   274fc:	mov	r4, r1
   27500:	bl	29054 <__assert_fail@plt+0x17ba4>
   27504:	cmp	r0, #0
   27508:	beq	2751c <__assert_fail@plt+0x1606c>
   2750c:	mov	r1, r5
   27510:	mov	r2, r4
   27514:	pop	{r4, r5, fp, lr}
   27518:	b	11258 <memcpy@plt>
   2751c:	bl	27594 <__assert_fail@plt+0x160e4>
   27520:	push	{r4, r5, fp, lr}
   27524:	add	fp, sp, #8
   27528:	mov	r5, r0
   2752c:	add	r0, r1, #1
   27530:	mov	r4, r1
   27534:	bl	29054 <__assert_fail@plt+0x17ba4>
   27538:	cmp	r0, #0
   2753c:	beq	27558 <__assert_fail@plt+0x160a8>
   27540:	mov	r1, #0
   27544:	mov	r2, r4
   27548:	strb	r1, [r0, r4]
   2754c:	mov	r1, r5
   27550:	pop	{r4, r5, fp, lr}
   27554:	b	11258 <memcpy@plt>
   27558:	bl	27594 <__assert_fail@plt+0x160e4>
   2755c:	push	{r4, r5, fp, lr}
   27560:	add	fp, sp, #8
   27564:	mov	r4, r0
   27568:	bl	11390 <strlen@plt>
   2756c:	add	r5, r0, #1
   27570:	mov	r0, r5
   27574:	bl	29054 <__assert_fail@plt+0x17ba4>
   27578:	cmp	r0, #0
   2757c:	beq	27590 <__assert_fail@plt+0x160e0>
   27580:	mov	r1, r4
   27584:	mov	r2, r5
   27588:	pop	{r4, r5, fp, lr}
   2758c:	b	11258 <memcpy@plt>
   27590:	bl	27594 <__assert_fail@plt+0x160e4>
   27594:	push	{fp, lr}
   27598:	mov	fp, sp
   2759c:	movw	r0, #45408	; 0xb160
   275a0:	movw	r1, #43361	; 0xa961
   275a4:	mov	r2, #5
   275a8:	movt	r0, #3
   275ac:	movt	r1, #2
   275b0:	ldr	r4, [r0]
   275b4:	mov	r0, #0
   275b8:	bl	112a0 <dcgettext@plt>
   275bc:	movw	r2, #40434	; 0x9df2
   275c0:	mov	r3, r0
   275c4:	mov	r0, r4
   275c8:	mov	r1, #0
   275cc:	movt	r2, #2
   275d0:	bl	1130c <error@plt>
   275d4:	bl	114a4 <abort@plt>
   275d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   275dc:	add	fp, sp, #24
   275e0:	sub	sp, sp, #16
   275e4:	mov	r8, r0
   275e8:	ldr	r0, [fp, #16]
   275ec:	mov	r7, r3
   275f0:	mov	r4, r2
   275f4:	mov	r2, r1
   275f8:	add	r3, sp, #8
   275fc:	mov	r1, #0
   27600:	str	r0, [sp]
   27604:	mov	r0, r8
   27608:	bl	276e8 <__assert_fail@plt+0x16238>
   2760c:	cmp	r0, #0
   27610:	bne	276bc <__assert_fail@plt+0x1620c>
   27614:	ldr	r6, [sp, #8]
   27618:	ldr	r5, [sp, #12]
   2761c:	subs	r0, r6, r4
   27620:	sbcs	r0, r5, r7
   27624:	blt	27648 <__assert_fail@plt+0x16198>
   27628:	ldr	r1, [fp, #8]
   2762c:	ldr	r0, [fp, #12]
   27630:	subs	r1, r1, r6
   27634:	sbcs	r0, r0, r5
   27638:	movge	r0, r6
   2763c:	movge	r1, r5
   27640:	subge	sp, fp, #24
   27644:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   27648:	subs	r0, r6, #1073741824	; 0x40000000
   2764c:	sbcs	r0, r5, #0
   27650:	blt	27660 <__assert_fail@plt+0x161b0>
   27654:	bl	113a8 <__errno_location@plt>
   27658:	mov	r1, #75	; 0x4b
   2765c:	b	2767c <__assert_fail@plt+0x161cc>
   27660:	bl	113a8 <__errno_location@plt>
   27664:	mvn	r2, #1073741824	; 0x40000000
   27668:	mvn	r1, #0
   2766c:	subs	r2, r2, r6
   27670:	sbcs	r1, r1, r5
   27674:	movlt	r1, #34	; 0x22
   27678:	movge	r1, #75	; 0x4b
   2767c:	str	r1, [r0]
   27680:	ldr	r6, [r0]
   27684:	ldr	r4, [fp, #24]
   27688:	ldr	r5, [fp, #20]
   2768c:	mov	r0, r8
   27690:	bl	14a58 <__assert_fail@plt+0x35a8>
   27694:	subs	r1, r6, #22
   27698:	movw	r2, #41747	; 0xa313
   2769c:	str	r0, [sp]
   276a0:	mov	r3, r5
   276a4:	movne	r1, r6
   276a8:	cmp	r4, #0
   276ac:	movt	r2, #2
   276b0:	movweq	r4, #1
   276b4:	mov	r0, r4
   276b8:	bl	1130c <error@plt>
   276bc:	cmp	r0, #1
   276c0:	beq	27654 <__assert_fail@plt+0x161a4>
   276c4:	cmp	r0, #3
   276c8:	bne	276d8 <__assert_fail@plt+0x16228>
   276cc:	bl	113a8 <__errno_location@plt>
   276d0:	mov	r1, #0
   276d4:	b	2767c <__assert_fail@plt+0x161cc>
   276d8:	bl	113a8 <__errno_location@plt>
   276dc:	b	27680 <__assert_fail@plt+0x161d0>
   276e0:	mov	r1, #10
   276e4:	b	275d8 <__assert_fail@plt+0x16128>
   276e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276ec:	add	fp, sp, #28
   276f0:	sub	sp, sp, #36	; 0x24
   276f4:	cmp	r2, #37	; 0x25
   276f8:	bcs	28fe0 <__assert_fail@plt+0x17b30>
   276fc:	ldr	r8, [fp, #8]
   27700:	mov	r9, r3
   27704:	mov	r6, r2
   27708:	mov	r7, r1
   2770c:	mov	r4, r0
   27710:	bl	113a8 <__errno_location@plt>
   27714:	cmp	r7, #0
   27718:	add	sl, sp, #32
   2771c:	mov	r5, r0
   27720:	mov	r0, #0
   27724:	mov	r2, r6
   27728:	mov	r3, #0
   2772c:	movne	sl, r7
   27730:	str	r0, [r5]
   27734:	mov	r0, r4
   27738:	mov	r1, sl
   2773c:	bl	11468 <__strtoll_internal@plt>
   27740:	mov	r7, r1
   27744:	ldr	r1, [sl]
   27748:	cmp	r1, r4
   2774c:	beq	2777c <__assert_fail@plt+0x162cc>
   27750:	mov	r6, r0
   27754:	ldr	r0, [r5]
   27758:	cmp	r0, #0
   2775c:	beq	277bc <__assert_fail@plt+0x1630c>
   27760:	mov	r5, #4
   27764:	cmp	r0, #34	; 0x22
   27768:	bne	28bf0 <__assert_fail@plt+0x17740>
   2776c:	mov	r5, #1
   27770:	cmp	r8, #0
   27774:	bne	277c8 <__assert_fail@plt+0x16318>
   27778:	b	28bec <__assert_fail@plt+0x1773c>
   2777c:	mov	r5, #4
   27780:	cmp	r8, #0
   27784:	beq	28bf0 <__assert_fail@plt+0x17740>
   27788:	mov	r6, r1
   2778c:	ldrb	r1, [r4]
   27790:	cmp	r1, #0
   27794:	beq	28bf0 <__assert_fail@plt+0x17740>
   27798:	mov	r0, r8
   2779c:	bl	1139c <strchr@plt>
   277a0:	cmp	r0, #0
   277a4:	beq	28bf0 <__assert_fail@plt+0x17740>
   277a8:	mov	r1, r6
   277ac:	mov	r5, #0
   277b0:	mov	r6, #1
   277b4:	mov	r7, #0
   277b8:	b	277c8 <__assert_fail@plt+0x16318>
   277bc:	mov	r5, r0
   277c0:	cmp	r8, #0
   277c4:	beq	28bec <__assert_fail@plt+0x1773c>
   277c8:	ldrb	r4, [r1]
   277cc:	cmp	r4, #0
   277d0:	beq	28bec <__assert_fail@plt+0x1773c>
   277d4:	str	r1, [sp, #20]
   277d8:	mov	r0, r8
   277dc:	mov	r1, r4
   277e0:	bl	1139c <strchr@plt>
   277e4:	cmp	r0, #0
   277e8:	beq	27a74 <__assert_fail@plt+0x165c4>
   277ec:	sub	r0, r4, #69	; 0x45
   277f0:	mov	r1, #1
   277f4:	mov	r3, #0
   277f8:	mov	r2, #1024	; 0x400
   277fc:	cmp	r0, #47	; 0x2f
   27800:	str	r1, [sp, #16]
   27804:	bhi	27940 <__assert_fail@plt+0x16490>
   27808:	add	r1, pc, #0
   2780c:	ldr	pc, [r1, r0, lsl #2]
   27810:	ldrdeq	r7, [r2], -r0
   27814:	andeq	r7, r2, r0, asr #18
   27818:	ldrdeq	r7, [r2], -r0
   2781c:	andeq	r7, r2, r0, asr #18
   27820:	andeq	r7, r2, r0, asr #18
   27824:	andeq	r7, r2, r0, asr #18
   27828:	ldrdeq	r7, [r2], -r0
   2782c:	andeq	r7, r2, r0, asr #18
   27830:	ldrdeq	r7, [r2], -r0
   27834:	andeq	r7, r2, r0, asr #18
   27838:	andeq	r7, r2, r0, asr #18
   2783c:	ldrdeq	r7, [r2], -r0
   27840:	andeq	r7, r2, r0, asr #18
   27844:	andeq	r7, r2, r0, asr #18
   27848:	andeq	r7, r2, r0, asr #18
   2784c:	ldrdeq	r7, [r2], -r0
   27850:	andeq	r7, r2, r0, asr #18
   27854:	andeq	r7, r2, r0, asr #18
   27858:	andeq	r7, r2, r0, asr #18
   2785c:	andeq	r7, r2, r0, asr #18
   27860:	ldrdeq	r7, [r2], -r0
   27864:	ldrdeq	r7, [r2], -r0
   27868:	andeq	r7, r2, r0, asr #18
   2786c:	andeq	r7, r2, r0, asr #18
   27870:	andeq	r7, r2, r0, asr #18
   27874:	andeq	r7, r2, r0, asr #18
   27878:	andeq	r7, r2, r0, asr #18
   2787c:	andeq	r7, r2, r0, asr #18
   27880:	andeq	r7, r2, r0, asr #18
   27884:	andeq	r7, r2, r0, asr #18
   27888:	andeq	r7, r2, r0, asr #18
   2788c:	andeq	r7, r2, r0, asr #18
   27890:	andeq	r7, r2, r0, asr #18
   27894:	andeq	r7, r2, r0, asr #18
   27898:	ldrdeq	r7, [r2], -r0
   2789c:	andeq	r7, r2, r0, asr #18
   278a0:	andeq	r7, r2, r0, asr #18
   278a4:	andeq	r7, r2, r0, asr #18
   278a8:	ldrdeq	r7, [r2], -r0
   278ac:	andeq	r7, r2, r0, asr #18
   278b0:	ldrdeq	r7, [r2], -r0
   278b4:	andeq	r7, r2, r0, asr #18
   278b8:	andeq	r7, r2, r0, asr #18
   278bc:	andeq	r7, r2, r0, asr #18
   278c0:	andeq	r7, r2, r0, asr #18
   278c4:	andeq	r7, r2, r0, asr #18
   278c8:	andeq	r7, r2, r0, asr #18
   278cc:	ldrdeq	r7, [r2], -r0
   278d0:	mov	r0, r8
   278d4:	mov	r1, #48	; 0x30
   278d8:	bl	1139c <strchr@plt>
   278dc:	cmp	r0, #0
   278e0:	beq	2790c <__assert_fail@plt+0x1645c>
   278e4:	ldr	r1, [sp, #20]
   278e8:	ldrb	r0, [r1, #1]
   278ec:	cmp	r0, #66	; 0x42
   278f0:	cmpne	r0, #68	; 0x44
   278f4:	bne	27914 <__assert_fail@plt+0x16464>
   278f8:	mov	r0, #2
   278fc:	mov	r2, #1000	; 0x3e8
   27900:	mov	r3, #0
   27904:	str	r0, [sp, #16]
   27908:	b	27940 <__assert_fail@plt+0x16490>
   2790c:	mov	r3, #0
   27910:	b	2793c <__assert_fail@plt+0x1648c>
   27914:	cmp	r0, #105	; 0x69
   27918:	mov	r3, #0
   2791c:	bne	2793c <__assert_fail@plt+0x1648c>
   27920:	ldrb	r0, [r1, #2]
   27924:	mov	r1, #1
   27928:	mov	r2, #1024	; 0x400
   2792c:	cmp	r0, #66	; 0x42
   27930:	movweq	r1, #3
   27934:	str	r1, [sp, #16]
   27938:	b	27940 <__assert_fail@plt+0x16490>
   2793c:	mov	r2, #1024	; 0x400
   27940:	sub	r0, r4, #66	; 0x42
   27944:	cmp	r0, #53	; 0x35
   27948:	bhi	27a74 <__assert_fail@plt+0x165c4>
   2794c:	add	r1, pc, #8
   27950:	str	r3, [sp, #28]
   27954:	str	r2, [sp, #24]
   27958:	ldr	pc, [r1, r0, lsl #2]
   2795c:	andeq	r7, r2, r4, ror fp
   27960:	andeq	r7, r2, r4, ror sl
   27964:	andeq	r7, r2, r4, ror sl
   27968:	andeq	r7, r2, r8, lsl #23
   2796c:	andeq	r7, r2, r4, ror sl
   27970:	andeq	r7, r2, r4, lsr sl
   27974:	andeq	r7, r2, r4, ror sl
   27978:	andeq	r7, r2, r4, ror sl
   2797c:	andeq	r7, r2, r4, ror sl
   27980:	andeq	r7, r2, ip, ror sl
   27984:	andeq	r7, r2, r4, ror sl
   27988:	andeq	r7, r2, ip, lsr #21
   2798c:	andeq	r7, r2, r4, ror sl
   27990:	andeq	r7, r2, r4, ror sl
   27994:	andeq	r7, r2, ip, asr #23
   27998:	andeq	r7, r2, r4, ror sl
   2799c:	andeq	r7, r2, r4, ror sl
   279a0:	andeq	r7, r2, r4, ror sl
   279a4:	andeq	r7, r2, ip, ror #21
   279a8:	andeq	r7, r2, r4, ror sl
   279ac:	andeq	r7, r2, r4, ror sl
   279b0:	andeq	r7, r2, r4, ror sl
   279b4:	andeq	r7, r2, r4, ror sl
   279b8:	andeq	r7, r2, r0, lsl ip
   279bc:	andeq	r7, r2, r0, lsr fp
   279c0:	andeq	r7, r2, r4, ror sl
   279c4:	andeq	r7, r2, r4, ror sl
   279c8:	andeq	r7, r2, r4, ror sl
   279cc:	andeq	r7, r2, r4, ror sl
   279d0:	andeq	r7, r2, r4, ror sl
   279d4:	andeq	r7, r2, r4, ror sl
   279d8:	andeq	r7, r2, r4, ror sl
   279dc:	andeq	r7, r2, r4, asr ip
   279e0:	andeq	r8, r2, ip, asr #23
   279e4:	andeq	r7, r2, r4, ror sl
   279e8:	andeq	r7, r2, r4, ror sl
   279ec:	andeq	r7, r2, r4, ror sl
   279f0:	andeq	r7, r2, r4, lsr sl
   279f4:	andeq	r7, r2, r4, ror sl
   279f8:	andeq	r7, r2, r4, ror sl
   279fc:	andeq	r7, r2, r4, ror sl
   27a00:	andeq	r7, r2, ip, ror sl
   27a04:	andeq	r7, r2, r4, ror sl
   27a08:	andeq	r7, r2, ip, lsr #21
   27a0c:	andeq	r7, r2, r4, ror sl
   27a10:	andeq	r7, r2, r4, ror sl
   27a14:	andeq	r7, r2, r4, ror sl
   27a18:	andeq	r7, r2, r4, ror sl
   27a1c:	andeq	r7, r2, r4, ror sl
   27a20:	andeq	r7, r2, r4, ror sl
   27a24:	andeq	r7, r2, ip, ror #21
   27a28:	andeq	r7, r2, r4, ror sl
   27a2c:	andeq	r7, r2, r4, ror sl
   27a30:	andeq	r7, r2, r8, ror #24
   27a34:	cmn	r7, #1
   27a38:	str	r9, [sp, #12]
   27a3c:	ble	27c7c <__assert_fail@plt+0x167cc>
   27a40:	ldr	r3, [sp, #28]
   27a44:	mvn	r0, #0
   27a48:	mvn	r1, #-2147483648	; 0x80000000
   27a4c:	mvn	r8, #0
   27a50:	mvn	r9, #-2147483648	; 0x80000000
   27a54:	bl	29500 <__assert_fail@plt+0x18050>
   27a58:	ldr	r2, [sp, #24]
   27a5c:	ldr	r3, [sp, #28]
   27a60:	subs	r0, r0, r6
   27a64:	mov	r4, #1
   27a68:	sbcs	r0, r1, r7
   27a6c:	bge	27cbc <__assert_fail@plt+0x1680c>
   27a70:	b	27cd4 <__assert_fail@plt+0x16824>
   27a74:	orr	r5, r5, #2
   27a78:	b	28bec <__assert_fail@plt+0x1773c>
   27a7c:	cmn	r7, #1
   27a80:	ble	27d10 <__assert_fail@plt+0x16860>
   27a84:	ldr	r3, [sp, #28]
   27a88:	mvn	r0, #0
   27a8c:	mvn	r1, #-2147483648	; 0x80000000
   27a90:	bl	29500 <__assert_fail@plt+0x18050>
   27a94:	ldr	r2, [sp, #24]
   27a98:	ldr	r3, [sp, #28]
   27a9c:	subs	r0, r0, r6
   27aa0:	sbcs	r0, r1, r7
   27aa4:	bge	27d44 <__assert_fail@plt+0x16894>
   27aa8:	b	28454 <__assert_fail@plt+0x16fa4>
   27aac:	cmn	r7, #1
   27ab0:	str	r9, [sp, #12]
   27ab4:	ble	27d58 <__assert_fail@plt+0x168a8>
   27ab8:	ldr	r3, [sp, #28]
   27abc:	mvn	r0, #0
   27ac0:	mvn	r1, #-2147483648	; 0x80000000
   27ac4:	mvn	r8, #0
   27ac8:	mvn	r9, #-2147483648	; 0x80000000
   27acc:	bl	29500 <__assert_fail@plt+0x18050>
   27ad0:	ldr	r2, [sp, #24]
   27ad4:	ldr	r3, [sp, #28]
   27ad8:	subs	r0, r0, r6
   27adc:	mov	r4, #1
   27ae0:	sbcs	r0, r1, r7
   27ae4:	bge	27d98 <__assert_fail@plt+0x168e8>
   27ae8:	b	27db0 <__assert_fail@plt+0x16900>
   27aec:	cmn	r7, #1
   27af0:	str	r9, [sp, #12]
   27af4:	ble	27de8 <__assert_fail@plt+0x16938>
   27af8:	ldr	r3, [sp, #28]
   27afc:	mvn	r0, #0
   27b00:	mvn	r1, #-2147483648	; 0x80000000
   27b04:	mvn	r9, #-2147483648	; 0x80000000
   27b08:	str	r0, [sp, #8]
   27b0c:	mvn	r0, #0
   27b10:	bl	29500 <__assert_fail@plt+0x18050>
   27b14:	ldr	r2, [sp, #24]
   27b18:	ldr	r3, [sp, #28]
   27b1c:	subs	r0, r0, r6
   27b20:	mov	r4, #1
   27b24:	sbcs	r0, r1, r7
   27b28:	bge	27e2c <__assert_fail@plt+0x1697c>
   27b2c:	b	27e48 <__assert_fail@plt+0x16998>
   27b30:	cmp	r7, #0
   27b34:	str	r9, [sp, #12]
   27b38:	bmi	28130 <__assert_fail@plt+0x16c80>
   27b3c:	ldr	r3, [sp, #28]
   27b40:	mvn	r0, #0
   27b44:	mvn	r1, #-2147483648	; 0x80000000
   27b48:	mvn	r9, #-2147483648	; 0x80000000
   27b4c:	str	r0, [sp, #8]
   27b50:	mvn	r0, #0
   27b54:	bl	29500 <__assert_fail@plt+0x18050>
   27b58:	ldr	r2, [sp, #24]
   27b5c:	ldr	r3, [sp, #28]
   27b60:	subs	r0, r0, r6
   27b64:	mov	r4, #1
   27b68:	sbcs	r0, r1, r7
   27b6c:	bge	28174 <__assert_fail@plt+0x16cc4>
   27b70:	b	28190 <__assert_fail@plt+0x16ce0>
   27b74:	cmn	r7, #1
   27b78:	ble	281cc <__assert_fail@plt+0x16d1c>
   27b7c:	cmp	r7, #2097152	; 0x200000
   27b80:	blt	281fc <__assert_fail@plt+0x16d4c>
   27b84:	b	28454 <__assert_fail@plt+0x16fa4>
   27b88:	cmp	r7, #0
   27b8c:	str	r9, [sp, #12]
   27b90:	bmi	2820c <__assert_fail@plt+0x16d5c>
   27b94:	ldr	r3, [sp, #28]
   27b98:	mvn	r0, #0
   27b9c:	mvn	r1, #-2147483648	; 0x80000000
   27ba0:	mvn	r9, #-2147483648	; 0x80000000
   27ba4:	str	r0, [sp, #8]
   27ba8:	mvn	r0, #0
   27bac:	bl	29500 <__assert_fail@plt+0x18050>
   27bb0:	ldr	r2, [sp, #24]
   27bb4:	ldr	r3, [sp, #28]
   27bb8:	subs	r0, r0, r6
   27bbc:	mov	r4, #1
   27bc0:	sbcs	r0, r1, r7
   27bc4:	bge	28250 <__assert_fail@plt+0x16da0>
   27bc8:	b	2826c <__assert_fail@plt+0x16dbc>
   27bcc:	cmp	r7, #0
   27bd0:	str	r9, [sp, #12]
   27bd4:	bmi	282a8 <__assert_fail@plt+0x16df8>
   27bd8:	ldr	r3, [sp, #28]
   27bdc:	mvn	r0, #0
   27be0:	mvn	r1, #-2147483648	; 0x80000000
   27be4:	mvn	r8, #-2147483648	; 0x80000000
   27be8:	str	r0, [sp, #8]
   27bec:	mvn	r0, #0
   27bf0:	bl	29500 <__assert_fail@plt+0x18050>
   27bf4:	ldr	r2, [sp, #24]
   27bf8:	ldr	r3, [sp, #28]
   27bfc:	subs	r0, r0, r6
   27c00:	mov	r4, #1
   27c04:	sbcs	r0, r1, r7
   27c08:	bge	282ec <__assert_fail@plt+0x16e3c>
   27c0c:	b	28308 <__assert_fail@plt+0x16e58>
   27c10:	cmp	r7, #0
   27c14:	str	r9, [sp, #12]
   27c18:	bmi	28344 <__assert_fail@plt+0x16e94>
   27c1c:	ldr	r3, [sp, #28]
   27c20:	mvn	r0, #0
   27c24:	mvn	r1, #-2147483648	; 0x80000000
   27c28:	mvn	r9, #-2147483648	; 0x80000000
   27c2c:	str	r0, [sp, #8]
   27c30:	mvn	r0, #0
   27c34:	bl	29500 <__assert_fail@plt+0x18050>
   27c38:	ldr	r2, [sp, #24]
   27c3c:	ldr	r3, [sp, #28]
   27c40:	subs	r0, r0, r6
   27c44:	mov	r4, #1
   27c48:	sbcs	r0, r1, r7
   27c4c:	bge	28388 <__assert_fail@plt+0x16ed8>
   27c50:	b	283a4 <__assert_fail@plt+0x16ef4>
   27c54:	cmn	r7, #1
   27c58:	ble	283e4 <__assert_fail@plt+0x16f34>
   27c5c:	cmp	r7, #4194304	; 0x400000
   27c60:	blt	28414 <__assert_fail@plt+0x16f64>
   27c64:	b	28454 <__assert_fail@plt+0x16fa4>
   27c68:	cmn	r7, #1
   27c6c:	ble	28424 <__assert_fail@plt+0x16f74>
   27c70:	cmp	r7, #1073741824	; 0x40000000
   27c74:	bge	28454 <__assert_fail@plt+0x16fa4>
   27c78:	b	28474 <__assert_fail@plt+0x16fc4>
   27c7c:	and	r0, r6, r7
   27c80:	cmn	r0, #1
   27c84:	beq	27cbc <__assert_fail@plt+0x1680c>
   27c88:	mov	r0, #0
   27c8c:	mov	r1, #-2147483648	; 0x80000000
   27c90:	mov	r2, r6
   27c94:	mov	r3, r7
   27c98:	mov	r8, #0
   27c9c:	mov	r9, #-2147483648	; 0x80000000
   27ca0:	bl	2942c <__assert_fail@plt+0x17f7c>
   27ca4:	ldr	r2, [sp, #24]
   27ca8:	ldr	r3, [sp, #28]
   27cac:	mov	r4, #1
   27cb0:	subs	r0, r0, r2
   27cb4:	sbcs	r0, r1, r3
   27cb8:	blt	27e84 <__assert_fail@plt+0x169d4>
   27cbc:	umull	r8, r0, r6, r2
   27cc0:	mov	r4, #0
   27cc4:	mla	r0, r6, r3, r0
   27cc8:	mla	r9, r7, r2, r0
   27ccc:	cmp	r9, #0
   27cd0:	bmi	27e84 <__assert_fail@plt+0x169d4>
   27cd4:	ldr	r3, [sp, #28]
   27cd8:	mvn	r0, #-2147483648	; 0x80000000
   27cdc:	mvn	r1, #-2147483648	; 0x80000000
   27ce0:	mov	r6, r4
   27ce4:	mvn	r4, #0
   27ce8:	str	r0, [sp, #8]
   27cec:	mvn	r0, #0
   27cf0:	bl	29500 <__assert_fail@plt+0x18050>
   27cf4:	ldr	r2, [sp, #24]
   27cf8:	ldr	r3, [sp, #28]
   27cfc:	subs	r0, r0, r8
   27d00:	mov	r7, #1
   27d04:	sbcs	r0, r1, r9
   27d08:	bge	27ec0 <__assert_fail@plt+0x16a10>
   27d0c:	b	27edc <__assert_fail@plt+0x16a2c>
   27d10:	and	r0, r6, r7
   27d14:	cmn	r0, #1
   27d18:	beq	27d44 <__assert_fail@plt+0x16894>
   27d1c:	mov	r0, #0
   27d20:	mov	r1, #-2147483648	; 0x80000000
   27d24:	mov	r2, r6
   27d28:	mov	r3, r7
   27d2c:	bl	2942c <__assert_fail@plt+0x17f7c>
   27d30:	ldr	r2, [sp, #24]
   27d34:	ldr	r3, [sp, #28]
   27d38:	subs	r0, r0, r2
   27d3c:	sbcs	r0, r1, r3
   27d40:	blt	28454 <__assert_fail@plt+0x16fa4>
   27d44:	umull	r0, r1, r6, r2
   27d48:	mla	r1, r6, r3, r1
   27d4c:	mla	r7, r7, r2, r1
   27d50:	mov	r6, r0
   27d54:	b	28bcc <__assert_fail@plt+0x1771c>
   27d58:	and	r0, r6, r7
   27d5c:	cmn	r0, #1
   27d60:	beq	27d98 <__assert_fail@plt+0x168e8>
   27d64:	mov	r0, #0
   27d68:	mov	r1, #-2147483648	; 0x80000000
   27d6c:	mov	r2, r6
   27d70:	mov	r3, r7
   27d74:	mov	r8, #0
   27d78:	mov	r9, #-2147483648	; 0x80000000
   27d7c:	bl	2942c <__assert_fail@plt+0x17f7c>
   27d80:	ldr	r2, [sp, #24]
   27d84:	ldr	r3, [sp, #28]
   27d88:	mov	r4, #1
   27d8c:	subs	r0, r0, r2
   27d90:	sbcs	r0, r1, r3
   27d94:	blt	27f70 <__assert_fail@plt+0x16ac0>
   27d98:	umull	r8, r0, r6, r2
   27d9c:	mov	r4, #0
   27da0:	mla	r0, r6, r3, r0
   27da4:	mla	r9, r7, r2, r0
   27da8:	cmp	r9, #0
   27dac:	bmi	27f70 <__assert_fail@plt+0x16ac0>
   27db0:	ldr	r3, [sp, #28]
   27db4:	mvn	r0, #0
   27db8:	mvn	r1, #-2147483648	; 0x80000000
   27dbc:	str	r4, [sp, #8]
   27dc0:	mvn	r6, #0
   27dc4:	mvn	r7, #-2147483648	; 0x80000000
   27dc8:	bl	29500 <__assert_fail@plt+0x18050>
   27dcc:	ldr	r4, [sp, #24]
   27dd0:	ldr	r3, [sp, #28]
   27dd4:	subs	r0, r0, r8
   27dd8:	mov	r2, #1
   27ddc:	sbcs	r0, r1, r9
   27de0:	bge	27fa8 <__assert_fail@plt+0x16af8>
   27de4:	b	280e0 <__assert_fail@plt+0x16c30>
   27de8:	and	r0, r6, r7
   27dec:	cmn	r0, #1
   27df0:	beq	27e2c <__assert_fail@plt+0x1697c>
   27df4:	mov	r0, #0
   27df8:	mov	r1, #-2147483648	; 0x80000000
   27dfc:	mov	r2, r6
   27e00:	mov	r3, r7
   27e04:	bl	2942c <__assert_fail@plt+0x17f7c>
   27e08:	ldr	r2, [sp, #24]
   27e0c:	ldr	r3, [sp, #28]
   27e10:	mov	r4, #1
   27e14:	mov	r9, #-2147483648	; 0x80000000
   27e18:	subs	r0, r0, r2
   27e1c:	sbcs	r0, r1, r3
   27e20:	mov	r0, #0
   27e24:	str	r0, [sp, #8]
   27e28:	blt	27fbc <__assert_fail@plt+0x16b0c>
   27e2c:	umull	r1, r0, r6, r2
   27e30:	mov	r4, #0
   27e34:	mla	r0, r6, r3, r0
   27e38:	mla	r9, r7, r2, r0
   27e3c:	str	r1, [sp, #8]
   27e40:	cmp	r9, #0
   27e44:	bmi	27fbc <__assert_fail@plt+0x16b0c>
   27e48:	ldr	r3, [sp, #28]
   27e4c:	mvn	r0, #0
   27e50:	mvn	r1, #-2147483648	; 0x80000000
   27e54:	str	r4, [sp, #4]
   27e58:	mvn	r6, #0
   27e5c:	mvn	r8, #-2147483648	; 0x80000000
   27e60:	bl	29500 <__assert_fail@plt+0x18050>
   27e64:	ldr	r4, [sp, #8]
   27e68:	ldr	r2, [sp, #24]
   27e6c:	ldr	r3, [sp, #28]
   27e70:	mov	r7, #1
   27e74:	subs	r0, r0, r4
   27e78:	sbcs	r0, r1, r9
   27e7c:	bge	27ff8 <__assert_fail@plt+0x16b48>
   27e80:	b	28010 <__assert_fail@plt+0x16b60>
   27e84:	mov	r0, #-2147483648	; 0x80000000
   27e88:	mov	r1, #-2147483648	; 0x80000000
   27e8c:	mov	r2, r8
   27e90:	mov	r3, r9
   27e94:	mov	r6, r4
   27e98:	mov	r4, #0
   27e9c:	str	r0, [sp, #8]
   27ea0:	mov	r0, #0
   27ea4:	bl	2942c <__assert_fail@plt+0x17f7c>
   27ea8:	ldr	r2, [sp, #24]
   27eac:	ldr	r3, [sp, #28]
   27eb0:	mov	r7, #1
   27eb4:	subs	r0, r0, r2
   27eb8:	sbcs	r0, r1, r3
   27ebc:	blt	27f30 <__assert_fail@plt+0x16a80>
   27ec0:	umull	r4, r0, r8, r2
   27ec4:	mov	r7, r6
   27ec8:	mla	r0, r8, r3, r0
   27ecc:	mla	r0, r9, r2, r0
   27ed0:	cmp	r0, #0
   27ed4:	str	r0, [sp, #8]
   27ed8:	bmi	27f30 <__assert_fail@plt+0x16a80>
   27edc:	ldr	r3, [sp, #28]
   27ee0:	mvn	r0, #0
   27ee4:	mvn	r1, #-2147483648	; 0x80000000
   27ee8:	mov	r9, r7
   27eec:	mvn	r6, #0
   27ef0:	mvn	r7, #-2147483648	; 0x80000000
   27ef4:	bl	29500 <__assert_fail@plt+0x18050>
   27ef8:	ldr	r8, [sp, #8]
   27efc:	ldr	r3, [sp, #24]
   27f00:	ldr	ip, [sp, #28]
   27f04:	subs	r0, r0, r4
   27f08:	mov	r2, #1
   27f0c:	sbcs	r0, r1, r8
   27f10:	blt	27f24 <__assert_fail@plt+0x16a74>
   27f14:	umull	r6, r0, r4, r3
   27f18:	mov	r2, #0
   27f1c:	mla	r0, r4, ip, r0
   27f20:	mla	r7, r8, r3, r0
   27f24:	orr	r3, r2, r9
   27f28:	ldr	r9, [sp, #12]
   27f2c:	b	28bcc <__assert_fail@plt+0x1771c>
   27f30:	ldr	r8, [sp, #8]
   27f34:	mov	r0, #0
   27f38:	mov	r1, #-2147483648	; 0x80000000
   27f3c:	mov	r2, r4
   27f40:	mov	r9, r7
   27f44:	mov	r6, #0
   27f48:	mov	r7, #-2147483648	; 0x80000000
   27f4c:	mov	r3, r8
   27f50:	bl	2942c <__assert_fail@plt+0x17f7c>
   27f54:	ldr	r3, [sp, #24]
   27f58:	ldr	ip, [sp, #28]
   27f5c:	mov	r2, #1
   27f60:	subs	r0, r0, r3
   27f64:	sbcs	r0, r1, ip
   27f68:	bge	27f14 <__assert_fail@plt+0x16a64>
   27f6c:	b	27f24 <__assert_fail@plt+0x16a74>
   27f70:	mov	r0, #0
   27f74:	mov	r1, #-2147483648	; 0x80000000
   27f78:	mov	r2, r8
   27f7c:	mov	r3, r9
   27f80:	str	r4, [sp, #8]
   27f84:	mov	r6, #0
   27f88:	mov	r7, #-2147483648	; 0x80000000
   27f8c:	bl	2942c <__assert_fail@plt+0x17f7c>
   27f90:	ldr	r4, [sp, #24]
   27f94:	ldr	r3, [sp, #28]
   27f98:	mov	r2, #1
   27f9c:	subs	r0, r0, r4
   27fa0:	sbcs	r0, r1, r3
   27fa4:	blt	280e0 <__assert_fail@plt+0x16c30>
   27fa8:	umull	r6, r0, r8, r4
   27fac:	mov	r2, #0
   27fb0:	mla	r0, r8, r3, r0
   27fb4:	mla	r7, r9, r4, r0
   27fb8:	b	280e0 <__assert_fail@plt+0x16c30>
   27fbc:	str	r4, [sp, #4]
   27fc0:	ldr	r4, [sp, #8]
   27fc4:	mov	r0, #0
   27fc8:	mov	r1, #-2147483648	; 0x80000000
   27fcc:	mov	r3, r9
   27fd0:	mov	r2, r4
   27fd4:	bl	2942c <__assert_fail@plt+0x17f7c>
   27fd8:	ldr	r2, [sp, #24]
   27fdc:	ldr	r3, [sp, #28]
   27fe0:	mov	r7, #1
   27fe4:	mov	r6, #0
   27fe8:	mov	r8, #-2147483648	; 0x80000000
   27fec:	subs	r0, r0, r2
   27ff0:	sbcs	r0, r1, r3
   27ff4:	blt	28048 <__assert_fail@plt+0x16b98>
   27ff8:	umull	r6, r0, r4, r2
   27ffc:	ldr	r7, [sp, #4]
   28000:	mla	r0, r4, r3, r0
   28004:	mla	r8, r9, r2, r0
   28008:	cmp	r8, #0
   2800c:	bmi	28048 <__assert_fail@plt+0x16b98>
   28010:	ldr	r3, [sp, #28]
   28014:	mvn	r0, #0
   28018:	mvn	r1, #-2147483648	; 0x80000000
   2801c:	str	r7, [sp, #8]
   28020:	mvn	r4, #0
   28024:	mvn	r9, #-2147483648	; 0x80000000
   28028:	bl	29500 <__assert_fail@plt+0x18050>
   2802c:	ldr	r2, [sp, #24]
   28030:	ldr	r3, [sp, #28]
   28034:	subs	r0, r0, r6
   28038:	mov	r7, #1
   2803c:	sbcs	r0, r1, r8
   28040:	bge	28080 <__assert_fail@plt+0x16bd0>
   28044:	b	28098 <__assert_fail@plt+0x16be8>
   28048:	mov	r0, #0
   2804c:	mov	r1, #-2147483648	; 0x80000000
   28050:	mov	r2, r6
   28054:	mov	r3, r8
   28058:	str	r7, [sp, #8]
   2805c:	bl	2942c <__assert_fail@plt+0x17f7c>
   28060:	ldr	r2, [sp, #24]
   28064:	ldr	r3, [sp, #28]
   28068:	mov	r7, #1
   2806c:	mov	r4, #0
   28070:	mov	r9, #-2147483648	; 0x80000000
   28074:	subs	r0, r0, r2
   28078:	sbcs	r0, r1, r3
   2807c:	blt	280f0 <__assert_fail@plt+0x16c40>
   28080:	umull	r4, r0, r6, r2
   28084:	ldr	r7, [sp, #8]
   28088:	mla	r0, r6, r3, r0
   2808c:	mla	r9, r8, r2, r0
   28090:	cmp	r9, #0
   28094:	bmi	280f0 <__assert_fail@plt+0x16c40>
   28098:	ldr	r3, [sp, #28]
   2809c:	mvn	r0, #0
   280a0:	mvn	r1, #-2147483648	; 0x80000000
   280a4:	str	r7, [sp, #8]
   280a8:	mvn	r6, #0
   280ac:	mvn	r7, #-2147483648	; 0x80000000
   280b0:	bl	29500 <__assert_fail@plt+0x18050>
   280b4:	ldr	r3, [sp, #24]
   280b8:	ldr	ip, [sp, #28]
   280bc:	subs	r0, r0, r4
   280c0:	mov	r2, #1
   280c4:	mov	r8, r4
   280c8:	sbcs	r0, r1, r9
   280cc:	blt	280e0 <__assert_fail@plt+0x16c30>
   280d0:	umull	r6, r0, r8, r3
   280d4:	mov	r2, #0
   280d8:	mla	r0, r8, ip, r0
   280dc:	mla	r7, r9, r3, r0
   280e0:	ldr	r0, [sp, #8]
   280e4:	ldr	r9, [sp, #12]
   280e8:	orr	r3, r2, r0
   280ec:	b	28bcc <__assert_fail@plt+0x1771c>
   280f0:	mov	r0, #0
   280f4:	mov	r1, #-2147483648	; 0x80000000
   280f8:	mov	r2, r4
   280fc:	mov	r3, r9
   28100:	str	r7, [sp, #8]
   28104:	mov	r8, r4
   28108:	bl	2942c <__assert_fail@plt+0x17f7c>
   2810c:	ldr	r3, [sp, #24]
   28110:	ldr	ip, [sp, #28]
   28114:	mov	r2, #1
   28118:	mov	r6, #0
   2811c:	mov	r7, #-2147483648	; 0x80000000
   28120:	subs	r0, r0, r3
   28124:	sbcs	r0, r1, ip
   28128:	bge	280d0 <__assert_fail@plt+0x16c20>
   2812c:	b	280e0 <__assert_fail@plt+0x16c30>
   28130:	and	r0, r6, r7
   28134:	cmn	r0, #1
   28138:	beq	28174 <__assert_fail@plt+0x16cc4>
   2813c:	mov	r0, #0
   28140:	mov	r1, #-2147483648	; 0x80000000
   28144:	mov	r2, r6
   28148:	mov	r3, r7
   2814c:	bl	2942c <__assert_fail@plt+0x17f7c>
   28150:	ldr	r2, [sp, #24]
   28154:	ldr	r3, [sp, #28]
   28158:	mov	r4, #1
   2815c:	mov	r9, #-2147483648	; 0x80000000
   28160:	subs	r0, r0, r2
   28164:	sbcs	r0, r1, r3
   28168:	mov	r0, #0
   2816c:	str	r0, [sp, #8]
   28170:	blt	28484 <__assert_fail@plt+0x16fd4>
   28174:	umull	r1, r0, r6, r2
   28178:	mov	r4, #0
   2817c:	mla	r0, r6, r3, r0
   28180:	mla	r9, r7, r2, r0
   28184:	str	r1, [sp, #8]
   28188:	cmp	r9, #0
   2818c:	bmi	28484 <__assert_fail@plt+0x16fd4>
   28190:	ldr	r3, [sp, #28]
   28194:	mvn	r0, #0
   28198:	mvn	r1, #-2147483648	; 0x80000000
   2819c:	str	r4, [sp, #4]
   281a0:	mvn	r8, #0
   281a4:	mvn	r4, #-2147483648	; 0x80000000
   281a8:	bl	29500 <__assert_fail@plt+0x18050>
   281ac:	ldr	r6, [sp, #8]
   281b0:	ldr	r2, [sp, #24]
   281b4:	ldr	r3, [sp, #28]
   281b8:	mov	r7, #1
   281bc:	subs	r0, r0, r6
   281c0:	sbcs	r0, r1, r9
   281c4:	bge	284c0 <__assert_fail@plt+0x17010>
   281c8:	b	284d8 <__assert_fail@plt+0x17028>
   281cc:	and	r0, r6, r7
   281d0:	cmn	r0, #1
   281d4:	beq	281fc <__assert_fail@plt+0x16d4c>
   281d8:	mov	r0, #0
   281dc:	mov	r1, #-2147483648	; 0x80000000
   281e0:	mov	r2, r6
   281e4:	mov	r3, r7
   281e8:	bl	2942c <__assert_fail@plt+0x17f7c>
   281ec:	ldr	r3, [sp, #28]
   281f0:	subs	r0, r0, #1024	; 0x400
   281f4:	sbcs	r0, r1, #0
   281f8:	blt	28454 <__assert_fail@plt+0x16fa4>
   281fc:	lsl	r0, r7, #10
   28200:	orr	r7, r0, r6, lsr #22
   28204:	lsl	r6, r6, #10
   28208:	b	28bcc <__assert_fail@plt+0x1771c>
   2820c:	and	r0, r6, r7
   28210:	cmn	r0, #1
   28214:	beq	28250 <__assert_fail@plt+0x16da0>
   28218:	mov	r0, #0
   2821c:	mov	r1, #-2147483648	; 0x80000000
   28220:	mov	r2, r6
   28224:	mov	r3, r7
   28228:	bl	2942c <__assert_fail@plt+0x17f7c>
   2822c:	ldr	r2, [sp, #24]
   28230:	ldr	r3, [sp, #28]
   28234:	mov	r4, #1
   28238:	mov	r9, #-2147483648	; 0x80000000
   2823c:	subs	r0, r0, r2
   28240:	sbcs	r0, r1, r3
   28244:	mov	r0, #0
   28248:	str	r0, [sp, #8]
   2824c:	blt	2879c <__assert_fail@plt+0x172ec>
   28250:	umull	r1, r0, r6, r2
   28254:	mov	r4, #0
   28258:	mla	r0, r6, r3, r0
   2825c:	mla	r9, r7, r2, r0
   28260:	str	r1, [sp, #8]
   28264:	cmp	r9, #0
   28268:	bmi	2879c <__assert_fail@plt+0x172ec>
   2826c:	ldr	r3, [sp, #28]
   28270:	mvn	r0, #0
   28274:	mvn	r1, #-2147483648	; 0x80000000
   28278:	str	r4, [sp, #4]
   2827c:	mvn	r8, #0
   28280:	mvn	r4, #-2147483648	; 0x80000000
   28284:	bl	29500 <__assert_fail@plt+0x18050>
   28288:	ldr	r6, [sp, #8]
   2828c:	ldr	r2, [sp, #24]
   28290:	ldr	r3, [sp, #28]
   28294:	mov	r7, #1
   28298:	subs	r0, r0, r6
   2829c:	sbcs	r0, r1, r9
   282a0:	bge	287d8 <__assert_fail@plt+0x17328>
   282a4:	b	287f0 <__assert_fail@plt+0x17340>
   282a8:	and	r0, r6, r7
   282ac:	cmn	r0, #1
   282b0:	beq	282ec <__assert_fail@plt+0x16e3c>
   282b4:	mov	r0, #0
   282b8:	mov	r1, #-2147483648	; 0x80000000
   282bc:	mov	r2, r6
   282c0:	mov	r3, r7
   282c4:	bl	2942c <__assert_fail@plt+0x17f7c>
   282c8:	ldr	r2, [sp, #24]
   282cc:	ldr	r3, [sp, #28]
   282d0:	mov	r4, #1
   282d4:	mov	r8, #-2147483648	; 0x80000000
   282d8:	subs	r0, r0, r2
   282dc:	sbcs	r0, r1, r3
   282e0:	mov	r0, #0
   282e4:	str	r0, [sp, #8]
   282e8:	blt	28a18 <__assert_fail@plt+0x17568>
   282ec:	umull	r1, r0, r6, r2
   282f0:	mov	r4, #0
   282f4:	mla	r0, r6, r3, r0
   282f8:	mla	r8, r7, r2, r0
   282fc:	str	r1, [sp, #8]
   28300:	cmp	r8, #0
   28304:	bmi	28a18 <__assert_fail@plt+0x17568>
   28308:	ldr	r3, [sp, #28]
   2830c:	mvn	r0, #0
   28310:	mvn	r1, #-2147483648	; 0x80000000
   28314:	str	r4, [sp, #4]
   28318:	mvn	r9, #0
   2831c:	mvn	r4, #-2147483648	; 0x80000000
   28320:	bl	29500 <__assert_fail@plt+0x18050>
   28324:	ldr	r6, [sp, #8]
   28328:	ldr	r2, [sp, #24]
   2832c:	ldr	r3, [sp, #28]
   28330:	mov	r7, #1
   28334:	subs	r0, r0, r6
   28338:	sbcs	r0, r1, r8
   2833c:	bge	28a54 <__assert_fail@plt+0x175a4>
   28340:	b	28a6c <__assert_fail@plt+0x175bc>
   28344:	and	r0, r6, r7
   28348:	cmn	r0, #1
   2834c:	beq	28388 <__assert_fail@plt+0x16ed8>
   28350:	mov	r0, #0
   28354:	mov	r1, #-2147483648	; 0x80000000
   28358:	mov	r2, r6
   2835c:	mov	r3, r7
   28360:	bl	2942c <__assert_fail@plt+0x17f7c>
   28364:	ldr	r2, [sp, #24]
   28368:	ldr	r3, [sp, #28]
   2836c:	mov	r4, #1
   28370:	mov	r9, #-2147483648	; 0x80000000
   28374:	subs	r0, r0, r2
   28378:	sbcs	r0, r1, r3
   2837c:	mov	r0, #0
   28380:	str	r0, [sp, #8]
   28384:	blt	28c34 <__assert_fail@plt+0x17784>
   28388:	umull	r1, r0, r6, r2
   2838c:	mov	r4, #0
   28390:	mla	r0, r6, r3, r0
   28394:	mla	r9, r7, r2, r0
   28398:	str	r1, [sp, #8]
   2839c:	cmp	r9, #0
   283a0:	bmi	28c34 <__assert_fail@plt+0x17784>
   283a4:	ldr	r3, [sp, #28]
   283a8:	mvn	r0, #0
   283ac:	mvn	r1, #-2147483648	; 0x80000000
   283b0:	str	r4, [sp]
   283b4:	mvn	r8, #-2147483648	; 0x80000000
   283b8:	str	r0, [sp, #4]
   283bc:	mvn	r0, #0
   283c0:	bl	29500 <__assert_fail@plt+0x18050>
   283c4:	ldr	r6, [sp, #8]
   283c8:	ldr	r2, [sp, #24]
   283cc:	ldr	r3, [sp, #28]
   283d0:	mov	r7, #1
   283d4:	subs	r0, r0, r6
   283d8:	sbcs	r0, r1, r9
   283dc:	bge	28c74 <__assert_fail@plt+0x177c4>
   283e0:	b	28c90 <__assert_fail@plt+0x177e0>
   283e4:	and	r0, r6, r7
   283e8:	cmn	r0, #1
   283ec:	beq	28414 <__assert_fail@plt+0x16f64>
   283f0:	mov	r0, #0
   283f4:	mov	r1, #-2147483648	; 0x80000000
   283f8:	mov	r2, r6
   283fc:	mov	r3, r7
   28400:	bl	2942c <__assert_fail@plt+0x17f7c>
   28404:	ldr	r3, [sp, #28]
   28408:	subs	r0, r0, #512	; 0x200
   2840c:	sbcs	r0, r1, #0
   28410:	blt	28454 <__assert_fail@plt+0x16fa4>
   28414:	lsl	r0, r7, #9
   28418:	orr	r7, r0, r6, lsr #23
   2841c:	lsl	r6, r6, #9
   28420:	b	28bcc <__assert_fail@plt+0x1771c>
   28424:	and	r0, r6, r7
   28428:	cmn	r0, #1
   2842c:	beq	28474 <__assert_fail@plt+0x16fc4>
   28430:	mov	r0, #0
   28434:	mov	r1, #-2147483648	; 0x80000000
   28438:	mov	r2, r6
   2843c:	mov	r3, r7
   28440:	bl	2942c <__assert_fail@plt+0x17f7c>
   28444:	ldr	r3, [sp, #28]
   28448:	subs	r0, r0, #2
   2844c:	sbcs	r0, r1, #0
   28450:	bge	28474 <__assert_fail@plt+0x16fc4>
   28454:	cmp	r7, #0
   28458:	mvn	r0, #-2147483648	; 0x80000000
   2845c:	mvn	r6, #0
   28460:	mov	r3, #1
   28464:	movmi	r0, #-2147483648	; 0x80000000
   28468:	movwmi	r6, #0
   2846c:	mov	r7, r0
   28470:	b	28bcc <__assert_fail@plt+0x1771c>
   28474:	lsl	r0, r7, #1
   28478:	orr	r7, r0, r6, lsr #31
   2847c:	lsl	r6, r6, #1
   28480:	b	28bcc <__assert_fail@plt+0x1771c>
   28484:	ldr	r6, [sp, #8]
   28488:	mov	r0, #0
   2848c:	mov	r1, #-2147483648	; 0x80000000
   28490:	mov	r3, r9
   28494:	str	r4, [sp, #4]
   28498:	mov	r2, r6
   2849c:	bl	2942c <__assert_fail@plt+0x17f7c>
   284a0:	ldr	r2, [sp, #24]
   284a4:	ldr	r3, [sp, #28]
   284a8:	mov	r7, #1
   284ac:	mov	r8, #0
   284b0:	mov	r4, #-2147483648	; 0x80000000
   284b4:	subs	r0, r0, r2
   284b8:	sbcs	r0, r1, r3
   284bc:	blt	28510 <__assert_fail@plt+0x17060>
   284c0:	umull	r8, r0, r6, r2
   284c4:	ldr	r7, [sp, #4]
   284c8:	mla	r0, r6, r3, r0
   284cc:	mla	r4, r9, r2, r0
   284d0:	cmp	r4, #0
   284d4:	bmi	28510 <__assert_fail@plt+0x17060>
   284d8:	ldr	r3, [sp, #28]
   284dc:	mvn	r0, #0
   284e0:	mvn	r1, #-2147483648	; 0x80000000
   284e4:	str	r7, [sp, #8]
   284e8:	mvn	r7, #0
   284ec:	mvn	r9, #-2147483648	; 0x80000000
   284f0:	bl	29500 <__assert_fail@plt+0x18050>
   284f4:	ldr	r2, [sp, #24]
   284f8:	ldr	r3, [sp, #28]
   284fc:	subs	r0, r0, r8
   28500:	mov	r6, #1
   28504:	sbcs	r0, r1, r4
   28508:	bge	28548 <__assert_fail@plt+0x17098>
   2850c:	b	28560 <__assert_fail@plt+0x170b0>
   28510:	mov	r0, #0
   28514:	mov	r1, #-2147483648	; 0x80000000
   28518:	mov	r2, r8
   2851c:	mov	r3, r4
   28520:	str	r7, [sp, #8]
   28524:	bl	2942c <__assert_fail@plt+0x17f7c>
   28528:	ldr	r2, [sp, #24]
   2852c:	ldr	r3, [sp, #28]
   28530:	mov	r6, #1
   28534:	mov	r7, #0
   28538:	mov	r9, #-2147483648	; 0x80000000
   2853c:	subs	r0, r0, r2
   28540:	sbcs	r0, r1, r3
   28544:	blt	285a0 <__assert_fail@plt+0x170f0>
   28548:	umull	r7, r0, r8, r2
   2854c:	ldr	r6, [sp, #8]
   28550:	mla	r0, r8, r3, r0
   28554:	mla	r9, r4, r2, r0
   28558:	cmp	r9, #0
   2855c:	bmi	285a0 <__assert_fail@plt+0x170f0>
   28560:	ldr	r3, [sp, #28]
   28564:	mvn	r0, #0
   28568:	mvn	r1, #-2147483648	; 0x80000000
   2856c:	str	r6, [sp, #8]
   28570:	mvn	r8, #0
   28574:	mvn	r4, #-2147483648	; 0x80000000
   28578:	bl	29500 <__assert_fail@plt+0x18050>
   2857c:	ldr	r2, [sp, #24]
   28580:	ldr	r3, [sp, #28]
   28584:	subs	r0, r0, r7
   28588:	sbcs	r0, r1, r9
   2858c:	bge	285e4 <__assert_fail@plt+0x17134>
   28590:	mov	r0, #1
   28594:	mov	r6, #0
   28598:	str	r0, [sp, #8]
   2859c:	b	285fc <__assert_fail@plt+0x1714c>
   285a0:	mov	r0, #0
   285a4:	mov	r1, #-2147483648	; 0x80000000
   285a8:	mov	r2, r7
   285ac:	mov	r3, r9
   285b0:	str	r6, [sp, #8]
   285b4:	bl	2942c <__assert_fail@plt+0x17f7c>
   285b8:	ldr	r2, [sp, #24]
   285bc:	ldr	r3, [sp, #28]
   285c0:	subs	r0, r0, r2
   285c4:	sbcs	r0, r1, r3
   285c8:	bge	285e4 <__assert_fail@plt+0x17134>
   285cc:	mov	r0, #1
   285d0:	mov	r8, #0
   285d4:	mov	r4, #-2147483648	; 0x80000000
   285d8:	mov	r6, #0
   285dc:	str	r0, [sp, #8]
   285e0:	b	28634 <__assert_fail@plt+0x17184>
   285e4:	umull	r8, r0, r7, r2
   285e8:	mov	r6, #0
   285ec:	mla	r0, r7, r3, r0
   285f0:	mla	r4, r9, r2, r0
   285f4:	cmp	r4, #0
   285f8:	bmi	28634 <__assert_fail@plt+0x17184>
   285fc:	ldr	r3, [sp, #28]
   28600:	mvn	r0, #0
   28604:	mvn	r1, #-2147483648	; 0x80000000
   28608:	mvn	r9, #0
   2860c:	mvn	r7, #-2147483648	; 0x80000000
   28610:	bl	29500 <__assert_fail@plt+0x18050>
   28614:	ldr	r2, [sp, #24]
   28618:	ldr	r3, [sp, #28]
   2861c:	subs	r0, r0, r8
   28620:	sbcs	r0, r1, r4
   28624:	bge	28670 <__assert_fail@plt+0x171c0>
   28628:	mov	r0, #1
   2862c:	str	r0, [sp, #8]
   28630:	b	28684 <__assert_fail@plt+0x171d4>
   28634:	mov	r0, #0
   28638:	mov	r1, #-2147483648	; 0x80000000
   2863c:	mov	r2, r8
   28640:	mov	r3, r4
   28644:	bl	2942c <__assert_fail@plt+0x17f7c>
   28648:	ldr	r2, [sp, #24]
   2864c:	ldr	r3, [sp, #28]
   28650:	subs	r0, r0, r2
   28654:	sbcs	r0, r1, r3
   28658:	bge	28670 <__assert_fail@plt+0x171c0>
   2865c:	mov	r0, #1
   28660:	mov	r9, #0
   28664:	mov	r7, #-2147483648	; 0x80000000
   28668:	str	r0, [sp, #8]
   2866c:	b	286c0 <__assert_fail@plt+0x17210>
   28670:	umull	r9, r0, r8, r2
   28674:	mla	r0, r8, r3, r0
   28678:	mla	r7, r4, r2, r0
   2867c:	cmp	r7, #0
   28680:	bmi	286c0 <__assert_fail@plt+0x17210>
   28684:	ldr	r3, [sp, #28]
   28688:	mvn	r0, #0
   2868c:	mvn	r1, #-2147483648	; 0x80000000
   28690:	mvn	r8, #0
   28694:	mvn	r4, #-2147483648	; 0x80000000
   28698:	bl	29500 <__assert_fail@plt+0x18050>
   2869c:	ldr	r2, [sp, #24]
   286a0:	ldr	r3, [sp, #28]
   286a4:	subs	r0, r0, r9
   286a8:	sbcs	r0, r1, r7
   286ac:	bge	28700 <__assert_fail@plt+0x17250>
   286b0:	ldr	r9, [sp, #12]
   286b4:	mov	r0, #1
   286b8:	str	r0, [sp, #8]
   286bc:	b	28718 <__assert_fail@plt+0x17268>
   286c0:	mov	r0, #0
   286c4:	mov	r1, #-2147483648	; 0x80000000
   286c8:	mov	r2, r9
   286cc:	mov	r3, r7
   286d0:	bl	2942c <__assert_fail@plt+0x17f7c>
   286d4:	ldr	r2, [sp, #24]
   286d8:	ldr	r3, [sp, #28]
   286dc:	subs	r0, r0, r2
   286e0:	sbcs	r0, r1, r3
   286e4:	bge	28700 <__assert_fail@plt+0x17250>
   286e8:	ldr	r9, [sp, #12]
   286ec:	mov	r0, #1
   286f0:	mov	r8, #0
   286f4:	mov	r4, #-2147483648	; 0x80000000
   286f8:	str	r0, [sp, #8]
   286fc:	b	28768 <__assert_fail@plt+0x172b8>
   28700:	umull	r8, r0, r9, r2
   28704:	mla	r0, r9, r3, r0
   28708:	ldr	r9, [sp, #12]
   2870c:	mla	r4, r7, r2, r0
   28710:	cmp	r4, #0
   28714:	bmi	28768 <__assert_fail@plt+0x172b8>
   28718:	ldr	r3, [sp, #28]
   2871c:	mvn	r0, #0
   28720:	mvn	r1, #-2147483648	; 0x80000000
   28724:	mvn	r6, #0
   28728:	bl	29500 <__assert_fail@plt+0x18050>
   2872c:	ldr	r7, [sp, #24]
   28730:	ldr	r3, [sp, #28]
   28734:	subs	r0, r0, r8
   28738:	mov	r2, #1
   2873c:	sbcs	r0, r1, r4
   28740:	mvn	r0, #-2147483648	; 0x80000000
   28744:	blt	28758 <__assert_fail@plt+0x172a8>
   28748:	umull	r6, r0, r8, r7
   2874c:	mov	r2, #0
   28750:	mla	r0, r8, r3, r0
   28754:	mla	r0, r4, r7, r0
   28758:	ldr	r1, [sp, #8]
   2875c:	mov	r7, r0
   28760:	orr	r3, r2, r1
   28764:	b	28bcc <__assert_fail@plt+0x1771c>
   28768:	mov	r0, #0
   2876c:	mov	r1, #-2147483648	; 0x80000000
   28770:	mov	r2, r8
   28774:	mov	r3, r4
   28778:	bl	2942c <__assert_fail@plt+0x17f7c>
   2877c:	ldr	r7, [sp, #24]
   28780:	ldr	r3, [sp, #28]
   28784:	mov	r2, #1
   28788:	subs	r0, r0, r7
   2878c:	sbcs	r0, r1, r3
   28790:	mov	r0, #-2147483648	; 0x80000000
   28794:	bge	28748 <__assert_fail@plt+0x17298>
   28798:	b	28758 <__assert_fail@plt+0x172a8>
   2879c:	ldr	r6, [sp, #8]
   287a0:	mov	r0, #0
   287a4:	mov	r1, #-2147483648	; 0x80000000
   287a8:	mov	r3, r9
   287ac:	str	r4, [sp, #4]
   287b0:	mov	r2, r6
   287b4:	bl	2942c <__assert_fail@plt+0x17f7c>
   287b8:	ldr	r2, [sp, #24]
   287bc:	ldr	r3, [sp, #28]
   287c0:	mov	r7, #1
   287c4:	mov	r8, #0
   287c8:	mov	r4, #-2147483648	; 0x80000000
   287cc:	subs	r0, r0, r2
   287d0:	sbcs	r0, r1, r3
   287d4:	blt	2882c <__assert_fail@plt+0x1737c>
   287d8:	umull	r8, r0, r6, r2
   287dc:	ldr	r7, [sp, #4]
   287e0:	mla	r0, r6, r3, r0
   287e4:	mla	r4, r9, r2, r0
   287e8:	cmp	r4, #0
   287ec:	bmi	2882c <__assert_fail@plt+0x1737c>
   287f0:	ldr	r3, [sp, #28]
   287f4:	mvn	r0, #0
   287f8:	mvn	r1, #-2147483648	; 0x80000000
   287fc:	str	r7, [sp, #4]
   28800:	mvn	r7, #0
   28804:	mvn	r9, #-2147483648	; 0x80000000
   28808:	bl	29500 <__assert_fail@plt+0x18050>
   2880c:	ldr	r2, [sp, #24]
   28810:	ldr	r3, [sp, #28]
   28814:	subs	r0, r0, r8
   28818:	mov	r6, #1
   2881c:	sbcs	r0, r1, r4
   28820:	str	r6, [sp, #8]
   28824:	bge	28868 <__assert_fail@plt+0x173b8>
   28828:	b	28884 <__assert_fail@plt+0x173d4>
   2882c:	mov	r0, #0
   28830:	mov	r1, #-2147483648	; 0x80000000
   28834:	mov	r2, r8
   28838:	mov	r3, r4
   2883c:	str	r7, [sp, #4]
   28840:	bl	2942c <__assert_fail@plt+0x17f7c>
   28844:	ldr	r2, [sp, #24]
   28848:	ldr	r3, [sp, #28]
   2884c:	mov	r7, #1
   28850:	mov	r9, #-2147483648	; 0x80000000
   28854:	str	r7, [sp, #8]
   28858:	mov	r7, #0
   2885c:	subs	r0, r0, r2
   28860:	sbcs	r0, r1, r3
   28864:	blt	288bc <__assert_fail@plt+0x1740c>
   28868:	umull	r7, r0, r8, r2
   2886c:	mla	r0, r8, r3, r0
   28870:	mla	r9, r4, r2, r0
   28874:	ldr	r0, [sp, #4]
   28878:	cmp	r9, #0
   2887c:	str	r0, [sp, #8]
   28880:	bmi	288bc <__assert_fail@plt+0x1740c>
   28884:	ldr	r3, [sp, #28]
   28888:	mvn	r0, #0
   2888c:	mvn	r1, #-2147483648	; 0x80000000
   28890:	mvn	r4, #0
   28894:	mvn	r8, #-2147483648	; 0x80000000
   28898:	bl	29500 <__assert_fail@plt+0x18050>
   2889c:	ldr	r2, [sp, #24]
   288a0:	ldr	r3, [sp, #28]
   288a4:	subs	r0, r0, r7
   288a8:	sbcs	r0, r1, r9
   288ac:	bge	288f8 <__assert_fail@plt+0x17448>
   288b0:	mov	r0, #1
   288b4:	str	r0, [sp, #8]
   288b8:	b	2890c <__assert_fail@plt+0x1745c>
   288bc:	mov	r0, #0
   288c0:	mov	r1, #-2147483648	; 0x80000000
   288c4:	mov	r2, r7
   288c8:	mov	r3, r9
   288cc:	bl	2942c <__assert_fail@plt+0x17f7c>
   288d0:	ldr	r2, [sp, #24]
   288d4:	ldr	r3, [sp, #28]
   288d8:	subs	r0, r0, r2
   288dc:	sbcs	r0, r1, r3
   288e0:	bge	288f8 <__assert_fail@plt+0x17448>
   288e4:	mov	r0, #1
   288e8:	mov	r4, #0
   288ec:	mov	r8, #-2147483648	; 0x80000000
   288f0:	str	r0, [sp, #8]
   288f4:	b	28940 <__assert_fail@plt+0x17490>
   288f8:	umull	r4, r0, r7, r2
   288fc:	mla	r0, r7, r3, r0
   28900:	mla	r8, r9, r2, r0
   28904:	cmp	r8, #0
   28908:	bmi	28940 <__assert_fail@plt+0x17490>
   2890c:	ldr	r3, [sp, #28]
   28910:	mvn	r0, #0
   28914:	mvn	r1, #-2147483648	; 0x80000000
   28918:	mvn	r6, #0
   2891c:	mvn	r9, #-2147483648	; 0x80000000
   28920:	bl	29500 <__assert_fail@plt+0x18050>
   28924:	ldr	r2, [sp, #24]
   28928:	ldr	r3, [sp, #28]
   2892c:	subs	r0, r0, r4
   28930:	sbcs	r0, r1, r8
   28934:	bge	28978 <__assert_fail@plt+0x174c8>
   28938:	mov	r8, #1
   2893c:	b	28990 <__assert_fail@plt+0x174e0>
   28940:	mov	r0, #0
   28944:	mov	r1, #-2147483648	; 0x80000000
   28948:	mov	r2, r4
   2894c:	mov	r3, r8
   28950:	bl	2942c <__assert_fail@plt+0x17f7c>
   28954:	ldr	r2, [sp, #24]
   28958:	ldr	r3, [sp, #28]
   2895c:	subs	r0, r0, r2
   28960:	sbcs	r0, r1, r3
   28964:	bge	28978 <__assert_fail@plt+0x174c8>
   28968:	mov	r8, #1
   2896c:	mov	r6, #0
   28970:	mov	r9, #-2147483648	; 0x80000000
   28974:	b	289e0 <__assert_fail@plt+0x17530>
   28978:	umull	r6, r0, r4, r2
   2897c:	mla	r0, r4, r3, r0
   28980:	mla	r9, r8, r2, r0
   28984:	ldr	r8, [sp, #8]
   28988:	cmp	r9, #0
   2898c:	bmi	289e0 <__assert_fail@plt+0x17530>
   28990:	ldr	r3, [sp, #28]
   28994:	mvn	r0, #0
   28998:	mvn	r1, #-2147483648	; 0x80000000
   2899c:	mvn	r4, #0
   289a0:	mvn	r7, #-2147483648	; 0x80000000
   289a4:	bl	29500 <__assert_fail@plt+0x18050>
   289a8:	ldr	r3, [sp, #24]
   289ac:	ldr	ip, [sp, #28]
   289b0:	subs	r0, r0, r6
   289b4:	mov	r2, #1
   289b8:	sbcs	r0, r1, r9
   289bc:	blt	289d0 <__assert_fail@plt+0x17520>
   289c0:	umull	r4, r0, r6, r3
   289c4:	mov	r2, #0
   289c8:	mla	r0, r6, ip, r0
   289cc:	mla	r7, r9, r3, r0
   289d0:	ldr	r9, [sp, #12]
   289d4:	orr	r3, r2, r8
   289d8:	mov	r6, r4
   289dc:	b	28bcc <__assert_fail@plt+0x1771c>
   289e0:	mov	r0, #0
   289e4:	mov	r1, #-2147483648	; 0x80000000
   289e8:	mov	r2, r6
   289ec:	mov	r3, r9
   289f0:	bl	2942c <__assert_fail@plt+0x17f7c>
   289f4:	ldr	r3, [sp, #24]
   289f8:	ldr	ip, [sp, #28]
   289fc:	mov	r2, #1
   28a00:	mov	r4, #0
   28a04:	mov	r7, #-2147483648	; 0x80000000
   28a08:	subs	r0, r0, r3
   28a0c:	sbcs	r0, r1, ip
   28a10:	bge	289c0 <__assert_fail@plt+0x17510>
   28a14:	b	289d0 <__assert_fail@plt+0x17520>
   28a18:	ldr	r6, [sp, #8]
   28a1c:	mov	r0, #0
   28a20:	mov	r1, #-2147483648	; 0x80000000
   28a24:	mov	r3, r8
   28a28:	str	r4, [sp, #4]
   28a2c:	mov	r2, r6
   28a30:	bl	2942c <__assert_fail@plt+0x17f7c>
   28a34:	ldr	r2, [sp, #24]
   28a38:	ldr	r3, [sp, #28]
   28a3c:	mov	r7, #1
   28a40:	mov	r9, #0
   28a44:	mov	r4, #-2147483648	; 0x80000000
   28a48:	subs	r0, r0, r2
   28a4c:	sbcs	r0, r1, r3
   28a50:	blt	28aa8 <__assert_fail@plt+0x175f8>
   28a54:	umull	r9, r0, r6, r2
   28a58:	ldr	r7, [sp, #4]
   28a5c:	mla	r0, r6, r3, r0
   28a60:	mla	r4, r8, r2, r0
   28a64:	cmp	r4, #0
   28a68:	bmi	28aa8 <__assert_fail@plt+0x175f8>
   28a6c:	ldr	r3, [sp, #28]
   28a70:	mvn	r0, #0
   28a74:	mvn	r1, #-2147483648	; 0x80000000
   28a78:	str	r7, [sp, #4]
   28a7c:	mvn	r8, #0
   28a80:	mvn	r7, #-2147483648	; 0x80000000
   28a84:	bl	29500 <__assert_fail@plt+0x18050>
   28a88:	ldr	r2, [sp, #24]
   28a8c:	ldr	r3, [sp, #28]
   28a90:	subs	r0, r0, r9
   28a94:	mov	r6, #1
   28a98:	sbcs	r0, r1, r4
   28a9c:	str	r6, [sp, #8]
   28aa0:	bge	28ae4 <__assert_fail@plt+0x17634>
   28aa4:	b	28b00 <__assert_fail@plt+0x17650>
   28aa8:	mov	r0, #0
   28aac:	mov	r1, #-2147483648	; 0x80000000
   28ab0:	mov	r2, r9
   28ab4:	mov	r3, r4
   28ab8:	str	r7, [sp, #4]
   28abc:	bl	2942c <__assert_fail@plt+0x17f7c>
   28ac0:	ldr	r2, [sp, #24]
   28ac4:	ldr	r3, [sp, #28]
   28ac8:	mov	r7, #1
   28acc:	mov	r8, #0
   28ad0:	str	r7, [sp, #8]
   28ad4:	mov	r7, #-2147483648	; 0x80000000
   28ad8:	subs	r0, r0, r2
   28adc:	sbcs	r0, r1, r3
   28ae0:	blt	28b34 <__assert_fail@plt+0x17684>
   28ae4:	umull	r8, r0, r9, r2
   28ae8:	mla	r0, r9, r3, r0
   28aec:	mla	r7, r4, r2, r0
   28af0:	ldr	r0, [sp, #4]
   28af4:	cmp	r7, #0
   28af8:	str	r0, [sp, #8]
   28afc:	bmi	28b34 <__assert_fail@plt+0x17684>
   28b00:	ldr	r3, [sp, #28]
   28b04:	mvn	r0, #0
   28b08:	mvn	r1, #-2147483648	; 0x80000000
   28b0c:	mvn	r4, #0
   28b10:	mvn	r9, #-2147483648	; 0x80000000
   28b14:	bl	29500 <__assert_fail@plt+0x18050>
   28b18:	ldr	r2, [sp, #24]
   28b1c:	ldr	r3, [sp, #28]
   28b20:	subs	r0, r0, r8
   28b24:	sbcs	r0, r1, r7
   28b28:	bge	28b6c <__assert_fail@plt+0x176bc>
   28b2c:	mov	r8, #1
   28b30:	b	28b84 <__assert_fail@plt+0x176d4>
   28b34:	mov	r0, #0
   28b38:	mov	r1, #-2147483648	; 0x80000000
   28b3c:	mov	r2, r8
   28b40:	mov	r3, r7
   28b44:	bl	2942c <__assert_fail@plt+0x17f7c>
   28b48:	ldr	r2, [sp, #24]
   28b4c:	ldr	r3, [sp, #28]
   28b50:	subs	r0, r0, r2
   28b54:	sbcs	r0, r1, r3
   28b58:	bge	28b6c <__assert_fail@plt+0x176bc>
   28b5c:	mov	r8, #1
   28b60:	mov	r4, #0
   28b64:	mov	r9, #-2147483648	; 0x80000000
   28b68:	b	28bfc <__assert_fail@plt+0x1774c>
   28b6c:	umull	r4, r0, r8, r2
   28b70:	mla	r0, r8, r3, r0
   28b74:	ldr	r8, [sp, #8]
   28b78:	mla	r9, r7, r2, r0
   28b7c:	cmp	r9, #0
   28b80:	bmi	28bfc <__assert_fail@plt+0x1774c>
   28b84:	ldr	r3, [sp, #28]
   28b88:	mvn	r0, #0
   28b8c:	mvn	r1, #-2147483648	; 0x80000000
   28b90:	mvn	r6, #0
   28b94:	mvn	r7, #-2147483648	; 0x80000000
   28b98:	bl	29500 <__assert_fail@plt+0x18050>
   28b9c:	ldr	r3, [sp, #24]
   28ba0:	ldr	ip, [sp, #28]
   28ba4:	subs	r0, r0, r4
   28ba8:	mov	r2, #1
   28bac:	sbcs	r0, r1, r9
   28bb0:	blt	28bc4 <__assert_fail@plt+0x17714>
   28bb4:	umull	r6, r0, r4, r3
   28bb8:	mov	r2, #0
   28bbc:	mla	r0, r4, ip, r0
   28bc0:	mla	r7, r9, r3, r0
   28bc4:	ldr	r9, [sp, #12]
   28bc8:	orr	r3, r2, r8
   28bcc:	ldr	r1, [sp, #20]
   28bd0:	ldr	r2, [sp, #16]
   28bd4:	orr	r5, r3, r5
   28bd8:	add	r0, r1, r2
   28bdc:	str	r0, [sl]
   28be0:	ldrb	r0, [r1, r2]
   28be4:	cmp	r0, #0
   28be8:	orrne	r5, r5, #2
   28bec:	strd	r6, [r9]
   28bf0:	mov	r0, r5
   28bf4:	sub	sp, fp, #28
   28bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bfc:	mov	r0, #0
   28c00:	mov	r1, #-2147483648	; 0x80000000
   28c04:	mov	r2, r4
   28c08:	mov	r3, r9
   28c0c:	bl	2942c <__assert_fail@plt+0x17f7c>
   28c10:	ldr	r3, [sp, #24]
   28c14:	ldr	ip, [sp, #28]
   28c18:	mov	r2, #1
   28c1c:	mov	r6, #0
   28c20:	mov	r7, #-2147483648	; 0x80000000
   28c24:	subs	r0, r0, r3
   28c28:	sbcs	r0, r1, ip
   28c2c:	bge	28bb4 <__assert_fail@plt+0x17704>
   28c30:	b	28bc4 <__assert_fail@plt+0x17714>
   28c34:	ldr	r6, [sp, #8]
   28c38:	mov	r0, #0
   28c3c:	mov	r1, #-2147483648	; 0x80000000
   28c40:	mov	r3, r9
   28c44:	str	r4, [sp]
   28c48:	mov	r2, r6
   28c4c:	bl	2942c <__assert_fail@plt+0x17f7c>
   28c50:	ldr	r2, [sp, #24]
   28c54:	ldr	r3, [sp, #28]
   28c58:	mov	r7, #1
   28c5c:	mov	r8, #-2147483648	; 0x80000000
   28c60:	subs	r0, r0, r2
   28c64:	sbcs	r0, r1, r3
   28c68:	mov	r0, #0
   28c6c:	str	r0, [sp, #4]
   28c70:	blt	28cd0 <__assert_fail@plt+0x17820>
   28c74:	umull	r1, r0, r6, r2
   28c78:	ldr	r7, [sp]
   28c7c:	mla	r0, r6, r3, r0
   28c80:	mla	r8, r9, r2, r0
   28c84:	str	r1, [sp, #4]
   28c88:	cmp	r8, #0
   28c8c:	bmi	28cd0 <__assert_fail@plt+0x17820>
   28c90:	ldr	r3, [sp, #28]
   28c94:	mvn	r0, #0
   28c98:	mvn	r1, #-2147483648	; 0x80000000
   28c9c:	str	r7, [sp]
   28ca0:	mvn	r7, #0
   28ca4:	mvn	r4, #-2147483648	; 0x80000000
   28ca8:	bl	29500 <__assert_fail@plt+0x18050>
   28cac:	mov	r6, #1
   28cb0:	ldr	r2, [sp, #24]
   28cb4:	ldr	r3, [sp, #28]
   28cb8:	str	r6, [sp, #8]
   28cbc:	ldr	r6, [sp, #4]
   28cc0:	subs	r0, r0, r6
   28cc4:	sbcs	r0, r1, r8
   28cc8:	bge	28d10 <__assert_fail@plt+0x17860>
   28ccc:	b	28d2c <__assert_fail@plt+0x1787c>
   28cd0:	ldr	r6, [sp, #4]
   28cd4:	mov	r0, #0
   28cd8:	mov	r1, #-2147483648	; 0x80000000
   28cdc:	mov	r3, r8
   28ce0:	str	r7, [sp]
   28ce4:	mov	r2, r6
   28ce8:	bl	2942c <__assert_fail@plt+0x17f7c>
   28cec:	ldr	r2, [sp, #24]
   28cf0:	ldr	r3, [sp, #28]
   28cf4:	mov	r7, #1
   28cf8:	mov	r4, #-2147483648	; 0x80000000
   28cfc:	str	r7, [sp, #8]
   28d00:	mov	r7, #0
   28d04:	subs	r0, r0, r2
   28d08:	sbcs	r0, r1, r3
   28d0c:	blt	28d64 <__assert_fail@plt+0x178b4>
   28d10:	umull	r7, r0, r6, r2
   28d14:	mla	r0, r6, r3, r0
   28d18:	mla	r4, r8, r2, r0
   28d1c:	ldr	r0, [sp]
   28d20:	cmp	r4, #0
   28d24:	str	r0, [sp, #8]
   28d28:	bmi	28d64 <__assert_fail@plt+0x178b4>
   28d2c:	ldr	r3, [sp, #28]
   28d30:	mvn	r0, #0
   28d34:	mvn	r1, #-2147483648	; 0x80000000
   28d38:	mvn	r9, #0
   28d3c:	mvn	r8, #-2147483648	; 0x80000000
   28d40:	bl	29500 <__assert_fail@plt+0x18050>
   28d44:	ldr	r2, [sp, #24]
   28d48:	ldr	r3, [sp, #28]
   28d4c:	subs	r0, r0, r7
   28d50:	sbcs	r0, r1, r4
   28d54:	bge	28da0 <__assert_fail@plt+0x178f0>
   28d58:	mov	r0, #1
   28d5c:	str	r0, [sp, #8]
   28d60:	b	28db4 <__assert_fail@plt+0x17904>
   28d64:	mov	r0, #0
   28d68:	mov	r1, #-2147483648	; 0x80000000
   28d6c:	mov	r2, r7
   28d70:	mov	r3, r4
   28d74:	bl	2942c <__assert_fail@plt+0x17f7c>
   28d78:	ldr	r2, [sp, #24]
   28d7c:	ldr	r3, [sp, #28]
   28d80:	subs	r0, r0, r2
   28d84:	sbcs	r0, r1, r3
   28d88:	bge	28da0 <__assert_fail@plt+0x178f0>
   28d8c:	mov	r0, #1
   28d90:	mov	r9, #0
   28d94:	mov	r8, #-2147483648	; 0x80000000
   28d98:	str	r0, [sp, #8]
   28d9c:	b	28dec <__assert_fail@plt+0x1793c>
   28da0:	umull	r9, r0, r7, r2
   28da4:	mla	r0, r7, r3, r0
   28da8:	mla	r8, r4, r2, r0
   28dac:	cmp	r8, #0
   28db0:	bmi	28dec <__assert_fail@plt+0x1793c>
   28db4:	ldr	r3, [sp, #28]
   28db8:	mvn	r0, #0
   28dbc:	mvn	r1, #-2147483648	; 0x80000000
   28dc0:	mvn	r4, #0
   28dc4:	mvn	r7, #-2147483648	; 0x80000000
   28dc8:	bl	29500 <__assert_fail@plt+0x18050>
   28dcc:	ldr	r2, [sp, #24]
   28dd0:	ldr	r3, [sp, #28]
   28dd4:	subs	r0, r0, r9
   28dd8:	sbcs	r0, r1, r8
   28ddc:	bge	28e28 <__assert_fail@plt+0x17978>
   28de0:	mov	r0, #1
   28de4:	str	r0, [sp, #8]
   28de8:	b	28e3c <__assert_fail@plt+0x1798c>
   28dec:	mov	r0, #0
   28df0:	mov	r1, #-2147483648	; 0x80000000
   28df4:	mov	r2, r9
   28df8:	mov	r3, r8
   28dfc:	bl	2942c <__assert_fail@plt+0x17f7c>
   28e00:	ldr	r2, [sp, #24]
   28e04:	ldr	r3, [sp, #28]
   28e08:	subs	r0, r0, r2
   28e0c:	sbcs	r0, r1, r3
   28e10:	bge	28e28 <__assert_fail@plt+0x17978>
   28e14:	mov	r0, #1
   28e18:	mov	r4, #0
   28e1c:	mov	r7, #-2147483648	; 0x80000000
   28e20:	str	r0, [sp, #8]
   28e24:	b	28e74 <__assert_fail@plt+0x179c4>
   28e28:	umull	r4, r0, r9, r2
   28e2c:	mla	r0, r9, r3, r0
   28e30:	mla	r7, r8, r2, r0
   28e34:	cmp	r7, #0
   28e38:	bmi	28e74 <__assert_fail@plt+0x179c4>
   28e3c:	ldr	r3, [sp, #28]
   28e40:	mvn	r0, #0
   28e44:	mvn	r1, #-2147483648	; 0x80000000
   28e48:	mvn	r8, #0
   28e4c:	mvn	r9, #-2147483648	; 0x80000000
   28e50:	bl	29500 <__assert_fail@plt+0x18050>
   28e54:	ldr	r2, [sp, #24]
   28e58:	ldr	r3, [sp, #28]
   28e5c:	subs	r0, r0, r4
   28e60:	sbcs	r0, r1, r7
   28e64:	bge	28eb0 <__assert_fail@plt+0x17a00>
   28e68:	mov	r0, #1
   28e6c:	str	r0, [sp, #8]
   28e70:	b	28ec4 <__assert_fail@plt+0x17a14>
   28e74:	mov	r0, #0
   28e78:	mov	r1, #-2147483648	; 0x80000000
   28e7c:	mov	r2, r4
   28e80:	mov	r3, r7
   28e84:	bl	2942c <__assert_fail@plt+0x17f7c>
   28e88:	ldr	r2, [sp, #24]
   28e8c:	ldr	r3, [sp, #28]
   28e90:	subs	r0, r0, r2
   28e94:	sbcs	r0, r1, r3
   28e98:	bge	28eb0 <__assert_fail@plt+0x17a00>
   28e9c:	mov	r0, #1
   28ea0:	mov	r8, #0
   28ea4:	mov	r9, #-2147483648	; 0x80000000
   28ea8:	str	r0, [sp, #8]
   28eac:	b	28f00 <__assert_fail@plt+0x17a50>
   28eb0:	umull	r8, r0, r4, r2
   28eb4:	mla	r0, r4, r3, r0
   28eb8:	mla	r9, r7, r2, r0
   28ebc:	cmp	r9, #0
   28ec0:	bmi	28f00 <__assert_fail@plt+0x17a50>
   28ec4:	ldr	r3, [sp, #28]
   28ec8:	mvn	r0, #0
   28ecc:	mvn	r1, #-2147483648	; 0x80000000
   28ed0:	mvn	r4, #0
   28ed4:	mvn	r6, #-2147483648	; 0x80000000
   28ed8:	bl	29500 <__assert_fail@plt+0x18050>
   28edc:	ldr	r2, [sp, #24]
   28ee0:	ldr	r3, [sp, #28]
   28ee4:	subs	r0, r0, r8
   28ee8:	sbcs	r0, r1, r9
   28eec:	bge	28f40 <__assert_fail@plt+0x17a90>
   28ef0:	ldr	r9, [sp, #12]
   28ef4:	mov	r0, #1
   28ef8:	str	r0, [sp, #8]
   28efc:	b	28f58 <__assert_fail@plt+0x17aa8>
   28f00:	mov	r0, #0
   28f04:	mov	r1, #-2147483648	; 0x80000000
   28f08:	mov	r2, r8
   28f0c:	mov	r3, r9
   28f10:	bl	2942c <__assert_fail@plt+0x17f7c>
   28f14:	ldr	r2, [sp, #24]
   28f18:	ldr	r3, [sp, #28]
   28f1c:	subs	r0, r0, r2
   28f20:	sbcs	r0, r1, r3
   28f24:	bge	28f40 <__assert_fail@plt+0x17a90>
   28f28:	ldr	r9, [sp, #12]
   28f2c:	mov	r0, #1
   28f30:	mov	r4, #0
   28f34:	mov	r6, #-2147483648	; 0x80000000
   28f38:	str	r0, [sp, #8]
   28f3c:	b	28fa4 <__assert_fail@plt+0x17af4>
   28f40:	umull	r4, r0, r8, r2
   28f44:	mla	r0, r8, r3, r0
   28f48:	mla	r6, r9, r2, r0
   28f4c:	ldr	r9, [sp, #12]
   28f50:	cmp	r6, #0
   28f54:	bmi	28fa4 <__assert_fail@plt+0x17af4>
   28f58:	ldr	r3, [sp, #28]
   28f5c:	mvn	r0, #0
   28f60:	mvn	r1, #-2147483648	; 0x80000000
   28f64:	mov	r8, r6
   28f68:	mvn	r6, #0
   28f6c:	mvn	r7, #-2147483648	; 0x80000000
   28f70:	bl	29500 <__assert_fail@plt+0x18050>
   28f74:	ldr	r3, [sp, #24]
   28f78:	ldr	ip, [sp, #28]
   28f7c:	subs	r0, r0, r4
   28f80:	mov	r2, #1
   28f84:	sbcs	r0, r1, r8
   28f88:	blt	28f9c <__assert_fail@plt+0x17aec>
   28f8c:	umull	r6, r0, r4, r3
   28f90:	mov	r2, #0
   28f94:	mla	r0, r4, ip, r0
   28f98:	mla	r7, r8, r3, r0
   28f9c:	ldr	r0, [sp, #8]
   28fa0:	b	280e8 <__assert_fail@plt+0x16c38>
   28fa4:	mov	r0, #0
   28fa8:	mov	r1, #-2147483648	; 0x80000000
   28fac:	mov	r2, r4
   28fb0:	mov	r3, r6
   28fb4:	bl	2942c <__assert_fail@plt+0x17f7c>
   28fb8:	ldr	r3, [sp, #24]
   28fbc:	ldr	ip, [sp, #28]
   28fc0:	mov	r8, r6
   28fc4:	mov	r2, #1
   28fc8:	mov	r6, #0
   28fcc:	mov	r7, #-2147483648	; 0x80000000
   28fd0:	subs	r0, r0, r3
   28fd4:	sbcs	r0, r1, ip
   28fd8:	bge	28f8c <__assert_fail@plt+0x17adc>
   28fdc:	b	28f9c <__assert_fail@plt+0x17aec>
   28fe0:	movw	r0, #43378	; 0xa972
   28fe4:	movw	r1, #43416	; 0xa998
   28fe8:	movw	r3, #43432	; 0xa9a8
   28fec:	mov	r2, #85	; 0x55
   28ff0:	movt	r0, #2
   28ff4:	movt	r1, #2
   28ff8:	movt	r3, #2
   28ffc:	bl	114b0 <__assert_fail@plt>
   29000:	clz	r2, r1
   29004:	clz	r3, r0
   29008:	lsr	r2, r2, #5
   2900c:	lsr	r3, r3, #5
   29010:	orrs	r2, r3, r2
   29014:	movwne	r1, #1
   29018:	movwne	r0, #1
   2901c:	cmp	r1, #0
   29020:	beq	29050 <__assert_fail@plt+0x17ba0>
   29024:	mvn	r2, #-2147483648	; 0x80000000
   29028:	udiv	r2, r2, r1
   2902c:	cmp	r2, r0
   29030:	bcs	29050 <__assert_fail@plt+0x17ba0>
   29034:	push	{fp, lr}
   29038:	mov	fp, sp
   2903c:	bl	113a8 <__errno_location@plt>
   29040:	mov	r1, #12
   29044:	str	r1, [r0]
   29048:	mov	r0, #0
   2904c:	pop	{fp, pc}
   29050:	b	111b0 <calloc@plt>
   29054:	cmp	r0, #0
   29058:	movweq	r0, #1
   2905c:	cmn	r0, #1
   29060:	ble	29068 <__assert_fail@plt+0x17bb8>
   29064:	b	11318 <malloc@plt>
   29068:	push	{fp, lr}
   2906c:	mov	fp, sp
   29070:	bl	113a8 <__errno_location@plt>
   29074:	mov	r1, #12
   29078:	str	r1, [r0]
   2907c:	mov	r0, #0
   29080:	pop	{fp, pc}
   29084:	push	{fp, lr}
   29088:	mov	fp, sp
   2908c:	cmp	r0, #0
   29090:	beq	290ac <__assert_fail@plt+0x17bfc>
   29094:	cmp	r1, #0
   29098:	beq	290b8 <__assert_fail@plt+0x17c08>
   2909c:	cmn	r1, #1
   290a0:	ble	290c4 <__assert_fail@plt+0x17c14>
   290a4:	pop	{fp, lr}
   290a8:	b	112ac <realloc@plt>
   290ac:	mov	r0, r1
   290b0:	pop	{fp, lr}
   290b4:	b	29054 <__assert_fail@plt+0x17ba4>
   290b8:	bl	29220 <__assert_fail@plt+0x17d70>
   290bc:	mov	r0, #0
   290c0:	pop	{fp, pc}
   290c4:	bl	113a8 <__errno_location@plt>
   290c8:	mov	r1, #12
   290cc:	str	r1, [r0]
   290d0:	mov	r0, #0
   290d4:	pop	{fp, pc}
   290d8:	push	{r4, r5, r6, sl, fp, lr}
   290dc:	add	fp, sp, #16
   290e0:	mov	r4, r0
   290e4:	bl	112f4 <__fpending@plt>
   290e8:	ldr	r6, [r4]
   290ec:	mov	r5, r0
   290f0:	mov	r0, r4
   290f4:	bl	12a6c <__assert_fail@plt+0x15bc>
   290f8:	tst	r6, #32
   290fc:	bne	29134 <__assert_fail@plt+0x17c84>
   29100:	cmp	r0, #0
   29104:	mov	r4, r0
   29108:	mvnne	r4, #0
   2910c:	cmp	r5, #0
   29110:	bne	29140 <__assert_fail@plt+0x17c90>
   29114:	cmp	r0, #0
   29118:	beq	29140 <__assert_fail@plt+0x17c90>
   2911c:	bl	113a8 <__errno_location@plt>
   29120:	ldr	r0, [r0]
   29124:	subs	r4, r0, #9
   29128:	mvnne	r4, #0
   2912c:	mov	r0, r4
   29130:	pop	{r4, r5, r6, sl, fp, pc}
   29134:	mvn	r4, #0
   29138:	cmp	r0, #0
   2913c:	beq	29148 <__assert_fail@plt+0x17c98>
   29140:	mov	r0, r4
   29144:	pop	{r4, r5, r6, sl, fp, pc}
   29148:	bl	113a8 <__errno_location@plt>
   2914c:	mov	r1, #0
   29150:	str	r1, [r0]
   29154:	mov	r0, r4
   29158:	pop	{r4, r5, r6, sl, fp, pc}
   2915c:	push	{r4, r5, r6, r7, fp, lr}
   29160:	add	fp, sp, #16
   29164:	mov	r4, r0
   29168:	ldr	r0, [r0, #4]
   2916c:	mov	r5, r1
   29170:	cmp	r0, r1
   29174:	bcs	291a8 <__assert_fail@plt+0x17cf8>
   29178:	mov	r6, r3
   2917c:	cmp	r3, #0
   29180:	beq	291b4 <__assert_fail@plt+0x17d04>
   29184:	mvn	r0, #0
   29188:	udiv	r0, r0, r6
   2918c:	cmp	r0, r5
   29190:	bcs	291b4 <__assert_fail@plt+0x17d04>
   29194:	bl	113a8 <__errno_location@plt>
   29198:	mov	r1, #12
   2919c:	str	r1, [r0]
   291a0:	mov	r0, #0
   291a4:	pop	{r4, r5, r6, r7, fp, pc}
   291a8:	mov	r0, #1
   291ac:	str	r5, [r4]
   291b0:	pop	{r4, r5, r6, r7, fp, pc}
   291b4:	ldr	r0, [r4, #8]
   291b8:	mul	r1, r6, r5
   291bc:	cmp	r0, r2
   291c0:	beq	291d8 <__assert_fail@plt+0x17d28>
   291c4:	bl	29084 <__assert_fail@plt+0x17bd4>
   291c8:	mov	r7, r0
   291cc:	cmp	r0, #0
   291d0:	bne	29208 <__assert_fail@plt+0x17d58>
   291d4:	b	29218 <__assert_fail@plt+0x17d68>
   291d8:	mov	r0, r1
   291dc:	bl	29054 <__assert_fail@plt+0x17ba4>
   291e0:	cmp	r0, #0
   291e4:	beq	29218 <__assert_fail@plt+0x17d68>
   291e8:	ldr	r1, [r4, #8]
   291ec:	mov	r7, r0
   291f0:	cmp	r1, #0
   291f4:	beq	29208 <__assert_fail@plt+0x17d58>
   291f8:	ldr	r0, [r4]
   291fc:	mul	r2, r0, r6
   29200:	mov	r0, r7
   29204:	bl	11258 <memcpy@plt>
   29208:	mov	r0, #1
   2920c:	str	r5, [r4]
   29210:	stmib	r4, {r5, r7}
   29214:	pop	{r4, r5, r6, r7, fp, pc}
   29218:	mov	r0, #0
   2921c:	pop	{r4, r5, r6, r7, fp, pc}
   29220:	push	{r4, r5, r6, sl, fp, lr}
   29224:	add	fp, sp, #16
   29228:	mov	r4, r0
   2922c:	bl	113a8 <__errno_location@plt>
   29230:	ldr	r6, [r0]
   29234:	mov	r5, r0
   29238:	mov	r0, r4
   2923c:	bl	11234 <free@plt>
   29240:	str	r6, [r5]
   29244:	pop	{r4, r5, r6, sl, fp, pc}
   29248:	push	{fp, lr}
   2924c:	mov	fp, sp
   29250:	mov	r0, #14
   29254:	bl	11450 <nl_langinfo@plt>
   29258:	movw	r1, #41350	; 0xa186
   2925c:	cmp	r0, #0
   29260:	movt	r1, #2
   29264:	movne	r1, r0
   29268:	movw	r0, #43510	; 0xa9f6
   2926c:	ldrb	r2, [r1]
   29270:	movt	r0, #2
   29274:	cmp	r2, #0
   29278:	movne	r0, r1
   2927c:	pop	{fp, pc}
   29280:	push	{r4, r5, r6, r7, fp, lr}
   29284:	add	fp, sp, #16
   29288:	sub	sp, sp, #8
   2928c:	cmp	r0, #0
   29290:	add	r5, sp, #4
   29294:	mov	r7, r2
   29298:	mov	r4, r1
   2929c:	movne	r5, r0
   292a0:	mov	r0, r5
   292a4:	bl	11300 <mbrtowc@plt>
   292a8:	mov	r6, r0
   292ac:	cmp	r7, #0
   292b0:	beq	292d8 <__assert_fail@plt+0x17e28>
   292b4:	cmn	r6, #2
   292b8:	bcc	292d8 <__assert_fail@plt+0x17e28>
   292bc:	mov	r0, #0
   292c0:	bl	29320 <__assert_fail@plt+0x17e70>
   292c4:	cmp	r0, #0
   292c8:	bne	292d8 <__assert_fail@plt+0x17e28>
   292cc:	ldrb	r0, [r4]
   292d0:	mov	r6, #1
   292d4:	str	r0, [r5]
   292d8:	mov	r0, r6
   292dc:	sub	sp, fp, #16
   292e0:	pop	{r4, r5, r6, r7, fp, pc}
   292e4:	cmp	r2, #0
   292e8:	beq	29318 <__assert_fail@plt+0x17e68>
   292ec:	mvn	r3, #0
   292f0:	udiv	r3, r3, r2
   292f4:	cmp	r3, r1
   292f8:	bcs	29318 <__assert_fail@plt+0x17e68>
   292fc:	push	{fp, lr}
   29300:	mov	fp, sp
   29304:	bl	113a8 <__errno_location@plt>
   29308:	mov	r1, #12
   2930c:	str	r1, [r0]
   29310:	mov	r0, #0
   29314:	pop	{fp, pc}
   29318:	mul	r1, r2, r1
   2931c:	b	29084 <__assert_fail@plt+0x17bd4>
   29320:	push	{r4, sl, fp, lr}
   29324:	add	fp, sp, #8
   29328:	sub	sp, sp, #264	; 0x108
   2932c:	add	r1, sp, #7
   29330:	movw	r2, #257	; 0x101
   29334:	bl	2938c <__assert_fail@plt+0x17edc>
   29338:	mov	r4, #0
   2933c:	cmp	r0, #0
   29340:	bne	29380 <__assert_fail@plt+0x17ed0>
   29344:	movw	r1, #43516	; 0xa9fc
   29348:	add	r0, sp, #7
   2934c:	mov	r2, #2
   29350:	movt	r1, #2
   29354:	bl	11384 <bcmp@plt>
   29358:	cmp	r0, #0
   2935c:	beq	29380 <__assert_fail@plt+0x17ed0>
   29360:	movw	r1, #43518	; 0xa9fe
   29364:	add	r0, sp, #7
   29368:	mov	r2, #6
   2936c:	movt	r1, #2
   29370:	bl	11384 <bcmp@plt>
   29374:	cmp	r0, #0
   29378:	mov	r4, r0
   2937c:	movwne	r4, #1
   29380:	mov	r0, r4
   29384:	sub	sp, fp, #8
   29388:	pop	{r4, sl, fp, pc}
   2938c:	push	{r4, r5, r6, r7, fp, lr}
   29390:	add	fp, sp, #16
   29394:	mov	r4, r1
   29398:	mov	r1, #0
   2939c:	mov	r6, r2
   293a0:	bl	11438 <setlocale@plt>
   293a4:	cmp	r0, #0
   293a8:	beq	293d8 <__assert_fail@plt+0x17f28>
   293ac:	mov	r7, r0
   293b0:	bl	11390 <strlen@plt>
   293b4:	cmp	r0, r6
   293b8:	bcs	293f4 <__assert_fail@plt+0x17f44>
   293bc:	add	r2, r0, #1
   293c0:	mov	r0, r4
   293c4:	mov	r1, r7
   293c8:	bl	11258 <memcpy@plt>
   293cc:	mov	r5, #0
   293d0:	mov	r0, r5
   293d4:	pop	{r4, r5, r6, r7, fp, pc}
   293d8:	mov	r5, #22
   293dc:	cmp	r6, #0
   293e0:	beq	2941c <__assert_fail@plt+0x17f6c>
   293e4:	mov	r0, #0
   293e8:	strb	r0, [r4]
   293ec:	mov	r0, r5
   293f0:	pop	{r4, r5, r6, r7, fp, pc}
   293f4:	mov	r5, #34	; 0x22
   293f8:	cmp	r6, #0
   293fc:	beq	2941c <__assert_fail@plt+0x17f6c>
   29400:	sub	r6, r6, #1
   29404:	mov	r0, r4
   29408:	mov	r1, r7
   2940c:	mov	r2, r6
   29410:	bl	11258 <memcpy@plt>
   29414:	mov	r0, #0
   29418:	strb	r0, [r4, r6]
   2941c:	mov	r0, r5
   29420:	pop	{r4, r5, r6, r7, fp, pc}
   29424:	mov	r1, #0
   29428:	b	11438 <setlocale@plt>
   2942c:	cmp	r3, #0
   29430:	cmpeq	r2, #0
   29434:	bne	29458 <__assert_fail@plt+0x17fa8>
   29438:	cmp	r1, #0
   2943c:	movlt	r1, #-2147483648	; 0x80000000
   29440:	movlt	r0, #0
   29444:	blt	29454 <__assert_fail@plt+0x17fa4>
   29448:	cmpeq	r0, #0
   2944c:	mvnne	r1, #-2147483648	; 0x80000000
   29450:	mvnne	r0, #0
   29454:	b	2953c <__assert_fail@plt+0x1808c>
   29458:	sub	sp, sp, #8
   2945c:	push	{sp, lr}
   29460:	cmp	r1, #0
   29464:	blt	29484 <__assert_fail@plt+0x17fd4>
   29468:	cmp	r3, #0
   2946c:	blt	294b8 <__assert_fail@plt+0x18008>
   29470:	bl	2954c <__assert_fail@plt+0x1809c>
   29474:	ldr	lr, [sp, #4]
   29478:	add	sp, sp, #8
   2947c:	pop	{r2, r3}
   29480:	bx	lr
   29484:	rsbs	r0, r0, #0
   29488:	sbc	r1, r1, r1, lsl #1
   2948c:	cmp	r3, #0
   29490:	blt	294dc <__assert_fail@plt+0x1802c>
   29494:	bl	2954c <__assert_fail@plt+0x1809c>
   29498:	ldr	lr, [sp, #4]
   2949c:	add	sp, sp, #8
   294a0:	pop	{r2, r3}
   294a4:	rsbs	r0, r0, #0
   294a8:	sbc	r1, r1, r1, lsl #1
   294ac:	rsbs	r2, r2, #0
   294b0:	sbc	r3, r3, r3, lsl #1
   294b4:	bx	lr
   294b8:	rsbs	r2, r2, #0
   294bc:	sbc	r3, r3, r3, lsl #1
   294c0:	bl	2954c <__assert_fail@plt+0x1809c>
   294c4:	ldr	lr, [sp, #4]
   294c8:	add	sp, sp, #8
   294cc:	pop	{r2, r3}
   294d0:	rsbs	r0, r0, #0
   294d4:	sbc	r1, r1, r1, lsl #1
   294d8:	bx	lr
   294dc:	rsbs	r2, r2, #0
   294e0:	sbc	r3, r3, r3, lsl #1
   294e4:	bl	2954c <__assert_fail@plt+0x1809c>
   294e8:	ldr	lr, [sp, #4]
   294ec:	add	sp, sp, #8
   294f0:	pop	{r2, r3}
   294f4:	rsbs	r2, r2, #0
   294f8:	sbc	r3, r3, r3, lsl #1
   294fc:	bx	lr
   29500:	cmp	r3, #0
   29504:	cmpeq	r2, #0
   29508:	bne	29520 <__assert_fail@plt+0x18070>
   2950c:	cmp	r1, #0
   29510:	cmpeq	r0, #0
   29514:	mvnne	r1, #0
   29518:	mvnne	r0, #0
   2951c:	b	2953c <__assert_fail@plt+0x1808c>
   29520:	sub	sp, sp, #8
   29524:	push	{sp, lr}
   29528:	bl	2954c <__assert_fail@plt+0x1809c>
   2952c:	ldr	lr, [sp, #4]
   29530:	add	sp, sp, #8
   29534:	pop	{r2, r3}
   29538:	bx	lr
   2953c:	push	{r1, lr}
   29540:	mov	r0, #8
   29544:	bl	111d4 <raise@plt>
   29548:	pop	{r1, pc}
   2954c:	cmp	r1, r3
   29550:	cmpeq	r0, r2
   29554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29558:	mov	r4, r0
   2955c:	movcc	r0, #0
   29560:	mov	r5, r1
   29564:	ldr	lr, [sp, #36]	; 0x24
   29568:	movcc	r1, r0
   2956c:	bcc	29668 <__assert_fail@plt+0x181b8>
   29570:	cmp	r3, #0
   29574:	clzeq	ip, r2
   29578:	clzne	ip, r3
   2957c:	addeq	ip, ip, #32
   29580:	cmp	r5, #0
   29584:	clzeq	r1, r4
   29588:	addeq	r1, r1, #32
   2958c:	clzne	r1, r5
   29590:	sub	ip, ip, r1
   29594:	sub	sl, ip, #32
   29598:	lsl	r9, r3, ip
   2959c:	rsb	fp, ip, #32
   295a0:	orr	r9, r9, r2, lsl sl
   295a4:	orr	r9, r9, r2, lsr fp
   295a8:	lsl	r8, r2, ip
   295ac:	cmp	r5, r9
   295b0:	cmpeq	r4, r8
   295b4:	movcc	r0, #0
   295b8:	movcc	r1, r0
   295bc:	bcc	295d8 <__assert_fail@plt+0x18128>
   295c0:	mov	r0, #1
   295c4:	subs	r4, r4, r8
   295c8:	lsl	r1, r0, sl
   295cc:	orr	r1, r1, r0, lsr fp
   295d0:	lsl	r0, r0, ip
   295d4:	sbc	r5, r5, r9
   295d8:	cmp	ip, #0
   295dc:	beq	29668 <__assert_fail@plt+0x181b8>
   295e0:	lsr	r6, r8, #1
   295e4:	orr	r6, r6, r9, lsl #31
   295e8:	lsr	r7, r9, #1
   295ec:	mov	r2, ip
   295f0:	b	29614 <__assert_fail@plt+0x18164>
   295f4:	subs	r3, r4, r6
   295f8:	sbc	r8, r5, r7
   295fc:	adds	r3, r3, r3
   29600:	adc	r8, r8, r8
   29604:	adds	r4, r3, #1
   29608:	adc	r5, r8, #0
   2960c:	subs	r2, r2, #1
   29610:	beq	29630 <__assert_fail@plt+0x18180>
   29614:	cmp	r5, r7
   29618:	cmpeq	r4, r6
   2961c:	bcs	295f4 <__assert_fail@plt+0x18144>
   29620:	adds	r4, r4, r4
   29624:	adc	r5, r5, r5
   29628:	subs	r2, r2, #1
   2962c:	bne	29614 <__assert_fail@plt+0x18164>
   29630:	lsr	r3, r4, ip
   29634:	orr	r3, r3, r5, lsl fp
   29638:	lsr	r2, r5, ip
   2963c:	orr	r3, r3, r5, lsr sl
   29640:	adds	r0, r0, r4
   29644:	mov	r4, r3
   29648:	lsl	r3, r2, ip
   2964c:	orr	r3, r3, r4, lsl sl
   29650:	lsl	ip, r4, ip
   29654:	orr	r3, r3, r4, lsr fp
   29658:	adc	r1, r1, r5
   2965c:	subs	r0, r0, ip
   29660:	mov	r5, r2
   29664:	sbc	r1, r1, r3
   29668:	cmp	lr, #0
   2966c:	strdne	r4, [lr]
   29670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29674:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29678:	mov	r7, r0
   2967c:	ldr	r6, [pc, #72]	; 296cc <__assert_fail@plt+0x1821c>
   29680:	ldr	r5, [pc, #72]	; 296d0 <__assert_fail@plt+0x18220>
   29684:	add	r6, pc, r6
   29688:	add	r5, pc, r5
   2968c:	sub	r6, r6, r5
   29690:	mov	r8, r1
   29694:	mov	r9, r2
   29698:	bl	11184 <pthread_mutex_unlock@plt-0x20>
   2969c:	asrs	r6, r6, #2
   296a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   296a4:	mov	r4, #0
   296a8:	add	r4, r4, #1
   296ac:	ldr	r3, [r5], #4
   296b0:	mov	r2, r9
   296b4:	mov	r1, r8
   296b8:	mov	r0, r7
   296bc:	blx	r3
   296c0:	cmp	r6, r4
   296c4:	bne	296a8 <__assert_fail@plt+0x181f8>
   296c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   296cc:	andeq	r1, r1, r0, lsl #17
   296d0:	andeq	r1, r1, r8, ror r8
   296d4:	bx	lr
   296d8:	ldr	r3, [pc, #12]	; 296ec <__assert_fail@plt+0x1823c>
   296dc:	mov	r1, #0
   296e0:	add	r3, pc, r3
   296e4:	ldr	r2, [r3]
   296e8:	b	113c0 <__cxa_atexit@plt>
   296ec:	andeq	r1, r1, r4, lsr sl

Disassembly of section .fini:

000296f0 <.fini>:
   296f0:	push	{r3, lr}
   296f4:	pop	{r3, pc}
