
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

0001066c <.init>:
   1066c:	push	{r3, lr}
   10670:	bl	10710 <_start@@Base+0x3c>
   10674:	pop	{r3, pc}

Disassembly of section .plt:

00010678 <printf@plt-0x14>:
   10678:	push	{lr}		; (str lr, [sp, #-4]!)
   1067c:	ldr	lr, [pc, #4]	; 10688 <printf@plt-0x4>
   10680:	add	lr, pc, lr
   10684:	ldr	pc, [lr, #8]!
   10688:	andeq	r1, r1, r8, ror r9

0001068c <printf@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #69632	; 0x11000
   10694:	ldr	pc, [ip, #2424]!	; 0x978

00010698 <puts@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #69632	; 0x11000
   106a0:	ldr	pc, [ip, #2416]!	; 0x970

000106a4 <__libc_start_main@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #69632	; 0x11000
   106ac:	ldr	pc, [ip, #2408]!	; 0x968

000106b0 <__gmon_start__@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2400]!	; 0x960

000106bc <strlen@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2392]!	; 0x958

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2384]!	; 0x950

Disassembly of section .text:

000106d4 <_start@@Base>:
   106d4:	mov	fp, #0
   106d8:	mov	lr, #0
   106dc:	pop	{r1}		; (ldr r1, [sp], #4)
   106e0:	mov	r2, sp
   106e4:	push	{r2}		; (str r2, [sp, #-4]!)
   106e8:	push	{r0}		; (str r0, [sp, #-4]!)
   106ec:	ldr	ip, [pc, #16]	; 10704 <_start@@Base+0x30>
   106f0:	push	{ip}		; (str ip, [sp, #-4]!)
   106f4:	ldr	r0, [pc, #12]	; 10708 <_start@@Base+0x34>
   106f8:	ldr	r3, [pc, #12]	; 1070c <_start@@Base+0x38>
   106fc:	bl	106a4 <__libc_start_main@plt>
   10700:	bl	106c8 <abort@plt>
   10704:	muleq	r1, r8, lr
   10708:	andeq	r0, r1, r4, lsr #22
   1070c:	andeq	r0, r1, r8, lsr lr
   10710:	ldr	r3, [pc, #20]	; 1072c <_start@@Base+0x58>
   10714:	ldr	r2, [pc, #20]	; 10730 <_start@@Base+0x5c>
   10718:	add	r3, pc, r3
   1071c:	ldr	r2, [r3, r2]
   10720:	cmp	r2, #0
   10724:	bxeq	lr
   10728:	b	106b0 <__gmon_start__@plt>
   1072c:	andeq	r1, r1, r0, ror #17
   10730:	andeq	r0, r0, r4, lsr #32
   10734:	ldr	r0, [pc, #24]	; 10754 <_start@@Base+0x80>
   10738:	ldr	r3, [pc, #24]	; 10758 <_start@@Base+0x84>
   1073c:	cmp	r3, r0
   10740:	bxeq	lr
   10744:	ldr	r3, [pc, #16]	; 1075c <_start@@Base+0x88>
   10748:	cmp	r3, #0
   1074c:	bxeq	lr
   10750:	bx	r3
   10754:	andeq	r2, r2, r0, lsr r0
   10758:	andeq	r2, r2, r0, lsr r0
   1075c:	andeq	r0, r0, r0
   10760:	ldr	r0, [pc, #36]	; 1078c <_start@@Base+0xb8>
   10764:	ldr	r1, [pc, #36]	; 10790 <_start@@Base+0xbc>
   10768:	sub	r1, r1, r0
   1076c:	asr	r1, r1, #2
   10770:	add	r1, r1, r1, lsr #31
   10774:	asrs	r1, r1, #1
   10778:	bxeq	lr
   1077c:	ldr	r3, [pc, #16]	; 10794 <_start@@Base+0xc0>
   10780:	cmp	r3, #0
   10784:	bxeq	lr
   10788:	bx	r3
   1078c:	andeq	r2, r2, r0, lsr r0
   10790:	andeq	r2, r2, r0, lsr r0
   10794:	andeq	r0, r0, r0
   10798:	push	{r4, lr}
   1079c:	ldr	r4, [pc, #24]	; 107bc <_start@@Base+0xe8>
   107a0:	ldrb	r3, [r4]
   107a4:	cmp	r3, #0
   107a8:	popne	{r4, pc}
   107ac:	bl	10734 <_start@@Base+0x60>
   107b0:	mov	r3, #1
   107b4:	strb	r3, [r4]
   107b8:	pop	{r4, pc}
   107bc:	andeq	r2, r2, r0, lsr r0
   107c0:	b	10760 <_start@@Base+0x8c>

000107c4 <comp_int_asc@@Base>:
   107c4:	ldr	r0, [r0]
   107c8:	ldr	r3, [r1]
   107cc:	cmp	r0, r3
   107d0:	blt	107e4 <comp_int_asc@@Base+0x20>
   107d4:	cmp	r0, r3
   107d8:	movle	r0, #0
   107dc:	movgt	r0, #1
   107e0:	bx	lr
   107e4:	mvn	r0, #0
   107e8:	bx	lr

000107ec <comp_char_desc@@Base>:
   107ec:	ldrb	r0, [r0]
   107f0:	ldrb	r3, [r1]
   107f4:	cmp	r0, r3
   107f8:	bcc	1080c <comp_char_desc@@Base+0x20>
   107fc:	cmp	r0, r3
   10800:	movls	r0, #0
   10804:	mvnhi	r0, #0
   10808:	bx	lr
   1080c:	mov	r0, #1
   10810:	bx	lr

00010814 <get_elem@@Base>:
   10814:	mla	r0, r2, r1, r0
   10818:	bx	lr

0001081c <swap@@Base>:
   1081c:	cmp	r2, #0
   10820:	ble	10848 <swap@@Base+0x2c>
   10824:	sub	r0, r0, #1
   10828:	sub	r1, r1, #1
   1082c:	add	r2, r0, r2
   10830:	ldrb	r3, [r0, #1]!
   10834:	ldrb	ip, [r1, #1]!
   10838:	strb	ip, [r0]
   1083c:	strb	r3, [r1]
   10840:	cmp	r0, r2
   10844:	bne	10830 <swap@@Base+0x14>
   10848:	bx	lr

0001084c <sort@@Base>:
   1084c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10850:	strd	r6, [sp, #8]
   10854:	strd	r8, [sp, #16]
   10858:	strd	sl, [sp, #24]
   1085c:	str	lr, [sp, #32]
   10860:	sub	sp, sp, #20
   10864:	subs	r7, r1, #0
   10868:	ble	108f4 <sort@@Base+0xa8>
   1086c:	mov	r9, r3
   10870:	str	r2, [sp, #8]
   10874:	str	r0, [sp, #12]
   10878:	mov	r8, r2
   1087c:	mov	fp, r0
   10880:	mov	r3, #0
   10884:	mov	r5, fp
   10888:	str	fp, [sp, #4]
   1088c:	add	sl, r3, #1
   10890:	cmp	r7, sl
   10894:	beq	108e0 <sort@@Base+0x94>
   10898:	add	fp, fp, r8
   1089c:	mov	r4, fp
   108a0:	mov	r6, sl
   108a4:	mov	r1, r5
   108a8:	mov	r0, r4
   108ac:	blx	r9
   108b0:	cmp	r0, #0
   108b4:	movlt	r5, r4
   108b8:	add	r6, r6, #1
   108bc:	add	r4, r4, r8
   108c0:	cmp	r7, r6
   108c4:	bne	108a4 <sort@@Base+0x58>
   108c8:	ldr	r2, [sp, #8]
   108cc:	ldr	r1, [sp, #4]
   108d0:	mov	r0, r5
   108d4:	bl	1081c <swap@@Base>
   108d8:	mov	r3, sl
   108dc:	b	10884 <sort@@Base+0x38>
   108e0:	ldr	r2, [sp, #8]
   108e4:	ldr	r1, [sp, #12]
   108e8:	mla	r0, r2, r3, r1
   108ec:	mov	r1, r0
   108f0:	bl	1081c <swap@@Base>
   108f4:	add	sp, sp, #20
   108f8:	ldrd	r4, [sp]
   108fc:	ldrd	r6, [sp, #8]
   10900:	ldrd	r8, [sp, #16]
   10904:	ldrd	sl, [sp, #24]
   10908:	add	sp, sp, #32
   1090c:	pop	{pc}		; (ldr pc, [sp], #4)

00010910 <linear_search@@Base>:
   10910:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10914:	strd	r6, [sp, #8]
   10918:	strd	r8, [sp, #16]
   1091c:	strd	sl, [sp, #24]
   10920:	str	lr, [sp, #32]
   10924:	sub	sp, sp, #4
   10928:	ldr	r8, [sp, #40]	; 0x28
   1092c:	subs	r6, r2, #0
   10930:	ble	10998 <linear_search@@Base+0x88>
   10934:	mov	r9, r3
   10938:	mov	sl, r1
   1093c:	mov	r7, r0
   10940:	mov	fp, r6
   10944:	mov	r5, r1
   10948:	mov	r4, #0
   1094c:	mov	r1, r7
   10950:	mov	r0, r5
   10954:	blx	r8
   10958:	cmp	r0, #0
   1095c:	beq	10978 <linear_search@@Base+0x68>
   10960:	add	r4, r4, #1
   10964:	add	r5, r5, fp
   10968:	cmp	r6, r4
   1096c:	bne	1094c <linear_search@@Base+0x3c>
   10970:	mov	r0, #0
   10974:	b	1097c <linear_search@@Base+0x6c>
   10978:	mla	r0, r4, r9, sl
   1097c:	add	sp, sp, #4
   10980:	ldrd	r4, [sp]
   10984:	ldrd	r6, [sp, #8]
   10988:	ldrd	r8, [sp, #16]
   1098c:	ldrd	sl, [sp, #24]
   10990:	add	sp, sp, #32
   10994:	pop	{pc}		; (ldr pc, [sp], #4)
   10998:	mov	r0, #0
   1099c:	b	1097c <linear_search@@Base+0x6c>

000109a0 <binary_search@@Base>:
   109a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   109a4:	strd	r6, [sp, #8]
   109a8:	strd	r8, [sp, #16]
   109ac:	strd	sl, [sp, #24]
   109b0:	str	lr, [sp, #32]
   109b4:	sub	sp, sp, #4
   109b8:	ldr	r8, [sp, #40]	; 0x28
   109bc:	subs	r6, r2, #1
   109c0:	bmi	10a3c <binary_search@@Base+0x9c>
   109c4:	mov	sl, r3
   109c8:	mov	r9, r1
   109cc:	mov	r7, r0
   109d0:	mov	r5, #0
   109d4:	add	r2, r5, r6
   109d8:	add	r2, r2, r2, lsr #31
   109dc:	asr	r4, r2, #1
   109e0:	mla	fp, sl, r4, r9
   109e4:	mov	r1, fp
   109e8:	mov	r0, r7
   109ec:	blx	r8
   109f0:	cmp	r0, #0
   109f4:	bne	10a1c <binary_search@@Base+0x7c>
   109f8:	mov	r1, fp
   109fc:	mov	r0, r7
   10a00:	blx	r8
   10a04:	cmn	r0, #1
   10a08:	subeq	r6, r4, #1
   10a0c:	addne	r5, r4, #1
   10a10:	cmp	r5, r6
   10a14:	ble	109d4 <binary_search@@Base+0x34>
   10a18:	mov	fp, #0
   10a1c:	mov	r0, fp
   10a20:	add	sp, sp, #4
   10a24:	ldrd	r4, [sp]
   10a28:	ldrd	r6, [sp, #8]
   10a2c:	ldrd	r8, [sp, #16]
   10a30:	ldrd	sl, [sp, #24]
   10a34:	add	sp, sp, #32
   10a38:	pop	{pc}		; (ldr pc, [sp], #4)
   10a3c:	mov	fp, #0
   10a40:	b	10a1c <binary_search@@Base+0x7c>

00010a44 <insertion_sort@@Base>:
   10a44:	cmp	r1, #1
   10a48:	bxle	lr
   10a4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10a50:	strd	r6, [sp, #8]
   10a54:	strd	r8, [sp, #16]
   10a58:	strd	sl, [sp, #24]
   10a5c:	str	lr, [sp, #32]
   10a60:	sub	sp, sp, #20
   10a64:	mov	r9, r3
   10a68:	mov	r7, r2
   10a6c:	str	r1, [sp, #8]
   10a70:	str	r2, [sp, #4]
   10a74:	str	r2, [sp]
   10a78:	mov	fp, #0
   10a7c:	mov	sl, #1
   10a80:	add	r3, r0, r2
   10a84:	str	r3, [sp, #12]
   10a88:	b	10ab0 <insertion_sort@@Base+0x6c>
   10a8c:	add	sl, sl, #1
   10a90:	ldr	r3, [sp, #4]
   10a94:	add	fp, fp, r3
   10a98:	ldr	r2, [sp]
   10a9c:	add	r3, r2, r3
   10aa0:	str	r3, [sp]
   10aa4:	ldr	r3, [sp, #8]
   10aa8:	cmp	r3, sl
   10aac:	beq	10b08 <insertion_sort@@Base+0xc4>
   10ab0:	cmp	sl, #0
   10ab4:	ble	10a8c <insertion_sort@@Base+0x48>
   10ab8:	ldr	r3, [sp, #12]
   10abc:	add	r4, r3, fp
   10ac0:	mov	r5, sl
   10ac4:	ldr	r3, [sp]
   10ac8:	sub	r8, fp, r3
   10acc:	sub	r5, r5, #1
   10ad0:	add	r6, r8, r4
   10ad4:	mov	r1, r6
   10ad8:	mov	r0, r4
   10adc:	blx	r9
   10ae0:	cmn	r0, #1
   10ae4:	bne	10a8c <insertion_sort@@Base+0x48>
   10ae8:	mov	r2, r7
   10aec:	mov	r1, r6
   10af0:	mov	r0, r4
   10af4:	bl	1081c <swap@@Base>
   10af8:	sub	r4, r4, r7
   10afc:	cmp	r5, #0
   10b00:	bne	10acc <insertion_sort@@Base+0x88>
   10b04:	b	10a8c <insertion_sort@@Base+0x48>
   10b08:	add	sp, sp, #20
   10b0c:	ldrd	r4, [sp]
   10b10:	ldrd	r6, [sp, #8]
   10b14:	ldrd	r8, [sp, #16]
   10b18:	ldrd	sl, [sp, #24]
   10b1c:	add	sp, sp, #32
   10b20:	pop	{pc}		; (ldr pc, [sp], #4)

00010b24 <main@@Base>:
   10b24:	strd	r4, [sp, #-20]!	; 0xffffffec
   10b28:	strd	r6, [sp, #8]
   10b2c:	str	lr, [sp, #16]
   10b30:	sub	sp, sp, #76	; 0x4c
   10b34:	movw	r3, #3752	; 0xea8
   10b38:	movt	r3, #1
   10b3c:	ldrd	r4, [r3]
   10b40:	strd	r4, [sp, #48]	; 0x30
   10b44:	ldrd	r0, [r3, #8]
   10b48:	strd	r0, [sp, #56]	; 0x38
   10b4c:	ldrd	r2, [r3, #16]
   10b50:	strd	r2, [sp, #64]	; 0x40
   10b54:	strd	r4, [sp, #24]
   10b58:	strd	r0, [sp, #32]
   10b5c:	strd	r2, [sp, #40]	; 0x28
   10b60:	movw	r0, #3776	; 0xec0
   10b64:	movt	r0, #1
   10b68:	bl	10698 <puts@plt>
   10b6c:	movw	r0, #3792	; 0xed0
   10b70:	movt	r0, #1
   10b74:	bl	1068c <printf@plt>
   10b78:	add	r6, sp, #24
   10b7c:	add	r4, sp, #48	; 0x30
   10b80:	mov	r5, r6
   10b84:	movw	r7, #3800	; 0xed8
   10b88:	movt	r7, #1
   10b8c:	ldr	r1, [r5], #4
   10b90:	mov	r0, r7
   10b94:	bl	1068c <printf@plt>
   10b98:	cmp	r5, r4
   10b9c:	bne	10b8c <main@@Base+0x68>
   10ba0:	movw	r0, #3868	; 0xf1c
   10ba4:	movt	r0, #1
   10ba8:	bl	10698 <puts@plt>
   10bac:	movw	r3, #1988	; 0x7c4
   10bb0:	movt	r3, #1
   10bb4:	mov	r2, #4
   10bb8:	mov	r1, #6
   10bbc:	add	r0, sp, #24
   10bc0:	bl	1084c <sort@@Base>
   10bc4:	movw	r0, #3804	; 0xedc
   10bc8:	movt	r0, #1
   10bcc:	bl	1068c <printf@plt>
   10bd0:	mov	r5, r6
   10bd4:	movw	r7, #3800	; 0xed8
   10bd8:	movt	r7, #1
   10bdc:	ldr	r1, [r5], #4
   10be0:	mov	r0, r7
   10be4:	bl	1068c <printf@plt>
   10be8:	cmp	r5, r4
   10bec:	bne	10bdc <main@@Base+0xb8>
   10bf0:	movw	r0, #3868	; 0xf1c
   10bf4:	movt	r0, #1
   10bf8:	bl	10698 <puts@plt>
   10bfc:	ldrd	r2, [sp, #48]	; 0x30
   10c00:	strd	r2, [sp, #24]
   10c04:	ldrd	r2, [sp, #56]	; 0x38
   10c08:	strd	r2, [sp, #32]
   10c0c:	ldrd	r2, [sp, #64]	; 0x40
   10c10:	strd	r2, [sp, #40]	; 0x28
   10c14:	movw	r0, #3812	; 0xee4
   10c18:	movt	r0, #1
   10c1c:	bl	10698 <puts@plt>
   10c20:	mov	r3, #4
   10c24:	str	r3, [sp, #20]
   10c28:	movw	r2, #1988	; 0x7c4
   10c2c:	movt	r2, #1
   10c30:	str	r2, [sp]
   10c34:	mov	r2, #6
   10c38:	add	r1, sp, #24
   10c3c:	add	r0, sp, #20
   10c40:	bl	10910 <linear_search@@Base>
   10c44:	cmp	r0, #0
   10c48:	beq	10e10 <main@@Base+0x2ec>
   10c4c:	add	r2, sp, #24
   10c50:	sub	r2, r0, r2
   10c54:	asr	r2, r2, #2
   10c58:	ldr	r1, [sp, #20]
   10c5c:	movw	r0, #3824	; 0xef0
   10c60:	movt	r0, #1
   10c64:	bl	1068c <printf@plt>
   10c68:	ldrd	r2, [sp, #48]	; 0x30
   10c6c:	strd	r2, [sp, #24]
   10c70:	ldrd	r2, [sp, #56]	; 0x38
   10c74:	strd	r2, [sp, #32]
   10c78:	ldrd	r2, [sp, #64]	; 0x40
   10c7c:	strd	r2, [sp, #40]	; 0x28
   10c80:	movw	r5, #1988	; 0x7c4
   10c84:	movt	r5, #1
   10c88:	mov	r3, r5
   10c8c:	mov	r2, #4
   10c90:	mov	r1, #6
   10c94:	add	r0, sp, #24
   10c98:	bl	1084c <sort@@Base>
   10c9c:	movw	r0, #3908	; 0xf44
   10ca0:	movt	r0, #1
   10ca4:	bl	10698 <puts@plt>
   10ca8:	str	r5, [sp]
   10cac:	mov	r3, #4
   10cb0:	mov	r2, #6
   10cb4:	add	r1, sp, #24
   10cb8:	add	r0, sp, #20
   10cbc:	bl	109a0 <binary_search@@Base>
   10cc0:	cmp	r0, #0
   10cc4:	beq	10e24 <main@@Base+0x300>
   10cc8:	add	r2, sp, #24
   10ccc:	sub	r2, r0, r2
   10cd0:	asr	r2, r2, #2
   10cd4:	ldr	r1, [sp, #20]
   10cd8:	movw	r0, #3824	; 0xef0
   10cdc:	movt	r0, #1
   10ce0:	bl	1068c <printf@plt>
   10ce4:	ldrd	r2, [sp, #48]	; 0x30
   10ce8:	strd	r2, [sp, #24]
   10cec:	ldrd	r2, [sp, #56]	; 0x38
   10cf0:	strd	r2, [sp, #32]
   10cf4:	ldrd	r2, [sp, #64]	; 0x40
   10cf8:	strd	r2, [sp, #40]	; 0x28
   10cfc:	movw	r0, #3920	; 0xf50
   10d00:	movt	r0, #1
   10d04:	bl	10698 <puts@plt>
   10d08:	movw	r0, #3792	; 0xed0
   10d0c:	movt	r0, #1
   10d10:	bl	1068c <printf@plt>
   10d14:	mov	r5, r6
   10d18:	movw	r7, #3800	; 0xed8
   10d1c:	movt	r7, #1
   10d20:	ldr	r1, [r5], #4
   10d24:	mov	r0, r7
   10d28:	bl	1068c <printf@plt>
   10d2c:	cmp	r5, r4
   10d30:	bne	10d20 <main@@Base+0x1fc>
   10d34:	movw	r0, #3868	; 0xf1c
   10d38:	movt	r0, #1
   10d3c:	bl	10698 <puts@plt>
   10d40:	movw	r3, #1988	; 0x7c4
   10d44:	movt	r3, #1
   10d48:	mov	r2, #4
   10d4c:	mov	r1, #6
   10d50:	add	r0, sp, #24
   10d54:	bl	10a44 <insertion_sort@@Base>
   10d58:	movw	r0, #3804	; 0xedc
   10d5c:	movt	r0, #1
   10d60:	bl	1068c <printf@plt>
   10d64:	movw	r5, #3800	; 0xed8
   10d68:	movt	r5, #1
   10d6c:	ldr	r1, [r6], #4
   10d70:	mov	r0, r5
   10d74:	bl	1068c <printf@plt>
   10d78:	cmp	r6, r4
   10d7c:	bne	10d6c <main@@Base+0x248>
   10d80:	movw	r0, #3868	; 0xf1c
   10d84:	movt	r0, #1
   10d88:	bl	10698 <puts@plt>
   10d8c:	movw	r0, #3932	; 0xf5c
   10d90:	movt	r0, #1
   10d94:	bl	10698 <puts@plt>
   10d98:	movw	r3, #3944	; 0xf68
   10d9c:	movt	r3, #1
   10da0:	ldr	r2, [r3]
   10da4:	str	r2, [sp, #12]
   10da8:	ldrb	r3, [r3, #4]
   10dac:	strb	r3, [sp, #16]
   10db0:	movw	r0, #3792	; 0xed0
   10db4:	movt	r0, #1
   10db8:	bl	1068c <printf@plt>
   10dbc:	add	r0, sp, #12
   10dc0:	bl	10698 <puts@plt>
   10dc4:	add	r0, sp, #12
   10dc8:	bl	106bc <strlen@plt>
   10dcc:	movw	r3, #2028	; 0x7ec
   10dd0:	movt	r3, #1
   10dd4:	mov	r2, #1
   10dd8:	mov	r1, r0
   10ddc:	add	r0, sp, #12
   10de0:	bl	1084c <sort@@Base>
   10de4:	movw	r0, #3804	; 0xedc
   10de8:	movt	r0, #1
   10dec:	bl	1068c <printf@plt>
   10df0:	add	r0, sp, #12
   10df4:	bl	10698 <puts@plt>
   10df8:	mov	r0, #0
   10dfc:	add	sp, sp, #76	; 0x4c
   10e00:	ldrd	r4, [sp]
   10e04:	ldrd	r6, [sp, #8]
   10e08:	add	sp, sp, #16
   10e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   10e10:	ldr	r1, [sp, #20]
   10e14:	movw	r0, #3872	; 0xf20
   10e18:	movt	r0, #1
   10e1c:	bl	1068c <printf@plt>
   10e20:	b	10c68 <main@@Base+0x144>
   10e24:	ldr	r1, [sp, #20]
   10e28:	movw	r0, #3872	; 0xf20
   10e2c:	movt	r0, #1
   10e30:	bl	1068c <printf@plt>
   10e34:	b	10ce4 <main@@Base+0x1c0>

00010e38 <__libc_csu_init@@Base>:
   10e38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e3c:	mov	r7, r0
   10e40:	ldr	r6, [pc, #72]	; 10e90 <__libc_csu_init@@Base+0x58>
   10e44:	ldr	r5, [pc, #72]	; 10e94 <__libc_csu_init@@Base+0x5c>
   10e48:	add	r6, pc, r6
   10e4c:	add	r5, pc, r5
   10e50:	sub	r6, r6, r5
   10e54:	mov	r8, r1
   10e58:	mov	r9, r2
   10e5c:	bl	1066c <printf@plt-0x20>
   10e60:	asrs	r6, r6, #2
   10e64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e68:	mov	r4, #0
   10e6c:	add	r4, r4, #1
   10e70:	ldr	r3, [r5], #4
   10e74:	mov	r2, r9
   10e78:	mov	r1, r8
   10e7c:	mov	r0, r7
   10e80:	blx	r3
   10e84:	cmp	r6, r4
   10e88:	bne	10e6c <__libc_csu_init@@Base+0x34>
   10e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e90:	andeq	r1, r1, r4, asr #1
   10e94:	strheq	r1, [r1], -ip

00010e98 <__libc_csu_fini@@Base>:
   10e98:	bx	lr

Disassembly of section .fini:

00010e9c <.fini>:
   10e9c:	push	{r3, lr}
   10ea0:	pop	{r3, pc}
