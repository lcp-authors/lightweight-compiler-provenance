
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011030 <.init>:
   11030:	push	{r3, lr}
   11034:	bl	1136c <__assert_fail@plt+0x4c>
   11038:	pop	{r3, pc}

Disassembly of section .plt:

0001103c <calloc@plt-0x14>:
   1103c:	push	{lr}		; (str lr, [sp, #-4]!)
   11040:	ldr	lr, [pc, #4]	; 1104c <calloc@plt-0x4>
   11044:	add	lr, pc, lr
   11048:	ldr	pc, [lr, #8]!
   1104c:			; <UNDEFINED> instruction: 0x00030fb4

00011050 <calloc@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #48, 20	; 0x30000
   11058:	ldr	pc, [ip, #4020]!	; 0xfb4

0001105c <fputs_unlocked@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #48, 20	; 0x30000
   11064:	ldr	pc, [ip, #4012]!	; 0xfac

00011068 <raise@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #48, 20	; 0x30000
   11070:	ldr	pc, [ip, #4004]!	; 0xfa4

00011074 <iconv_close@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #48, 20	; 0x30000
   1107c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011080 <iconv@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #48, 20	; 0x30000
   11088:	ldr	pc, [ip, #3988]!	; 0xf94

0001108c <strcmp@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #48, 20	; 0x30000
   11094:	ldr	pc, [ip, #3980]!	; 0xf8c

00011098 <fflush@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #48, 20	; 0x30000
   110a0:	ldr	pc, [ip, #3972]!	; 0xf84

000110a4 <wcwidth@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #48, 20	; 0x30000
   110ac:	ldr	pc, [ip, #3964]!	; 0xf7c

000110b0 <memmove@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #48, 20	; 0x30000
   110b8:	ldr	pc, [ip, #3956]!	; 0xf74

000110bc <free@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #48, 20	; 0x30000
   110c4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c8 <_exit@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #48, 20	; 0x30000
   110d0:	ldr	pc, [ip, #3940]!	; 0xf64

000110d4 <memcpy@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #48, 20	; 0x30000
   110dc:	ldr	pc, [ip, #3932]!	; 0xf5c

000110e0 <mbsinit@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #48, 20	; 0x30000
   110e8:	ldr	pc, [ip, #3924]!	; 0xf54

000110ec <memcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #48, 20	; 0x30000
   110f4:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f8 <dcgettext@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #48, 20	; 0x30000
   11100:	ldr	pc, [ip, #3908]!	; 0xf44

00011104 <strdup@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #48, 20	; 0x30000
   1110c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #48, 20	; 0x30000
   11118:	ldr	pc, [ip, #3892]!	; 0xf34

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #48, 20	; 0x30000
   11124:	ldr	pc, [ip, #3884]!	; 0xf2c

00011128 <iswcntrl@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #48, 20	; 0x30000
   11130:	ldr	pc, [ip, #3876]!	; 0xf24

00011134 <fflush_unlocked@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #48, 20	; 0x30000
   1113c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011140 <iswprint@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #48, 20	; 0x30000
   11148:	ldr	pc, [ip, #3860]!	; 0xf14

0001114c <fwrite@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #48, 20	; 0x30000
   11154:	ldr	pc, [ip, #3852]!	; 0xf0c

00011158 <lseek64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #48, 20	; 0x30000
   11160:	ldr	pc, [ip, #3844]!	; 0xf04

00011164 <__ctype_get_mb_cur_max@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #48, 20	; 0x30000
   1116c:	ldr	pc, [ip, #3836]!	; 0xefc

00011170 <__fpending@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #48, 20	; 0x30000
   11178:	ldr	pc, [ip, #3828]!	; 0xef4

0001117c <mbrtowc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #48, 20	; 0x30000
   11184:	ldr	pc, [ip, #3820]!	; 0xeec

00011188 <error@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #48, 20	; 0x30000
   11190:	ldr	pc, [ip, #3812]!	; 0xee4

00011194 <malloc@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #48, 20	; 0x30000
   1119c:	ldr	pc, [ip, #3804]!	; 0xedc

000111a0 <iconv_open@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #48, 20	; 0x30000
   111a8:	ldr	pc, [ip, #3796]!	; 0xed4

000111ac <__libc_start_main@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #48, 20	; 0x30000
   111b4:	ldr	pc, [ip, #3788]!	; 0xecc

000111b8 <__freading@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #48, 20	; 0x30000
   111c0:	ldr	pc, [ip, #3780]!	; 0xec4

000111c4 <__gmon_start__@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #48, 20	; 0x30000
   111cc:	ldr	pc, [ip, #3772]!	; 0xebc

000111d0 <getopt_long@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #48, 20	; 0x30000
   111d8:	ldr	pc, [ip, #3764]!	; 0xeb4

000111dc <__ctype_b_loc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #48, 20	; 0x30000
   111e4:	ldr	pc, [ip, #3756]!	; 0xeac

000111e8 <exit@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #48, 20	; 0x30000
   111f0:	ldr	pc, [ip, #3748]!	; 0xea4

000111f4 <iswspace@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #48, 20	; 0x30000
   111fc:	ldr	pc, [ip, #3740]!	; 0xe9c

00011200 <strlen@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #48, 20	; 0x30000
   11208:	ldr	pc, [ip, #3732]!	; 0xe94

0001120c <strchr@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #48, 20	; 0x30000
   11214:	ldr	pc, [ip, #3724]!	; 0xe8c

00011218 <__errno_location@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #48, 20	; 0x30000
   11220:	ldr	pc, [ip, #3716]!	; 0xe84

00011224 <iswalnum@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #48, 20	; 0x30000
   1122c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011230 <__sprintf_chk@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #48, 20	; 0x30000
   11238:	ldr	pc, [ip, #3700]!	; 0xe74

0001123c <__cxa_atexit@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #48, 20	; 0x30000
   11244:	ldr	pc, [ip, #3692]!	; 0xe6c

00011248 <memset@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #48, 20	; 0x30000
   11250:	ldr	pc, [ip, #3684]!	; 0xe64

00011254 <__printf_chk@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #48, 20	; 0x30000
   1125c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011260 <write@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #48, 20	; 0x30000
   11268:	ldr	pc, [ip, #3668]!	; 0xe54

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #48, 20	; 0x30000
   11274:	ldr	pc, [ip, #3660]!	; 0xe4c

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #48, 20	; 0x30000
   11280:	ldr	pc, [ip, #3652]!	; 0xe44

00011284 <memchr@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #48, 20	; 0x30000
   1128c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011290 <fclose@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #48, 20	; 0x30000
   11298:	ldr	pc, [ip, #3636]!	; 0xe34

0001129c <strnlen@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #48, 20	; 0x30000
   112a4:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a8 <fseeko64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #48, 20	; 0x30000
   112b0:	ldr	pc, [ip, #3620]!	; 0xe24

000112b4 <__uflow@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #48, 20	; 0x30000
   112bc:	ldr	pc, [ip, #3612]!	; 0xe1c

000112c0 <__overflow@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #48, 20	; 0x30000
   112c8:	ldr	pc, [ip, #3604]!	; 0xe14

000112cc <setlocale@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #48, 20	; 0x30000
   112d4:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d8 <strrchr@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #48, 20	; 0x30000
   112e0:	ldr	pc, [ip, #3588]!	; 0xe04

000112e4 <nl_langinfo@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #48, 20	; 0x30000
   112ec:	ldr	pc, [ip, #3580]!	; 0xdfc

000112f0 <bindtextdomain@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #48, 20	; 0x30000
   112f8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112fc <isatty@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #48, 20	; 0x30000
   11304:	ldr	pc, [ip, #3564]!	; 0xdec

00011308 <strncmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #48, 20	; 0x30000
   11310:	ldr	pc, [ip, #3556]!	; 0xde4

00011314 <abort@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #48, 20	; 0x30000
   1131c:	ldr	pc, [ip, #3548]!	; 0xddc

00011320 <__assert_fail@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #48, 20	; 0x30000
   11328:	ldr	pc, [ip, #3540]!	; 0xdd4

Disassembly of section .text:

00011330 <.text>:
   11330:	mov	fp, #0
   11334:	mov	lr, #0
   11338:	pop	{r1}		; (ldr r1, [sp], #4)
   1133c:	mov	r2, sp
   11340:	push	{r2}		; (str r2, [sp, #-4]!)
   11344:	push	{r0}		; (str r0, [sp, #-4]!)
   11348:	ldr	ip, [pc, #16]	; 11360 <__assert_fail@plt+0x40>
   1134c:	push	{ip}		; (str ip, [sp, #-4]!)
   11350:	ldr	r0, [pc, #12]	; 11364 <__assert_fail@plt+0x44>
   11354:	ldr	r3, [pc, #12]	; 11368 <__assert_fail@plt+0x48>
   11358:	bl	111ac <__libc_start_main@plt>
   1135c:	bl	11314 <abort@plt>
   11360:	andeq	ip, r2, r0, lsl pc
   11364:	andeq	r1, r1, r8, ror #12
   11368:			; <UNDEFINED> instruction: 0x0002ceb0
   1136c:	ldr	r3, [pc, #20]	; 11388 <__assert_fail@plt+0x68>
   11370:	ldr	r2, [pc, #20]	; 1138c <__assert_fail@plt+0x6c>
   11374:	add	r3, pc, r3
   11378:	ldr	r2, [r3, r2]
   1137c:	cmp	r2, #0
   11380:	bxeq	lr
   11384:	b	111c4 <__gmon_start__@plt>
   11388:	andeq	r0, r3, r4, lsl #25
   1138c:	andeq	r0, r0, r0, lsl #2
   11390:	ldr	r0, [pc, #24]	; 113b0 <__assert_fail@plt+0x90>
   11394:	ldr	r3, [pc, #24]	; 113b4 <__assert_fail@plt+0x94>
   11398:	cmp	r3, r0
   1139c:	bxeq	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <__assert_fail@plt+0x98>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	andeq	r2, r4, r8, ror #2
   113b4:	andeq	r2, r4, r8, ror #2
   113b8:	andeq	r0, r0, r0
   113bc:	ldr	r0, [pc, #36]	; 113e8 <__assert_fail@plt+0xc8>
   113c0:	ldr	r1, [pc, #36]	; 113ec <__assert_fail@plt+0xcc>
   113c4:	sub	r1, r1, r0
   113c8:	asr	r1, r1, #2
   113cc:	add	r1, r1, r1, lsr #31
   113d0:	asrs	r1, r1, #1
   113d4:	bxeq	lr
   113d8:	ldr	r3, [pc, #16]	; 113f0 <__assert_fail@plt+0xd0>
   113dc:	cmp	r3, #0
   113e0:	bxeq	lr
   113e4:	bx	r3
   113e8:	andeq	r2, r4, r8, ror #2
   113ec:	andeq	r2, r4, r8, ror #2
   113f0:	andeq	r0, r0, r0
   113f4:	push	{r4, lr}
   113f8:	ldr	r4, [pc, #24]	; 11418 <__assert_fail@plt+0xf8>
   113fc:	ldrb	r3, [r4]
   11400:	cmp	r3, #0
   11404:	popne	{r4, pc}
   11408:	bl	11390 <__assert_fail@plt+0x70>
   1140c:	mov	r3, #1
   11410:	strb	r3, [r4]
   11414:	pop	{r4, pc}
   11418:	andeq	r2, r4, r8, lsl #3
   1141c:	b	113bc <__assert_fail@plt+0x9c>
   11420:	push	{fp, lr}
   11424:	mov	fp, sp
   11428:	sub	sp, sp, #56	; 0x38
   1142c:	mov	r4, r0
   11430:	cmp	r0, #0
   11434:	bne	11624 <__assert_fail@plt+0x304>
   11438:	movw	r1, #53091	; 0xcf63
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	movt	r1, #2
   11448:	bl	110f8 <dcgettext@plt>
   1144c:	mov	r1, r0
   11450:	movw	r0, #8608	; 0x21a0
   11454:	movt	r0, #4
   11458:	ldr	r2, [r0]
   1145c:	mov	r0, #1
   11460:	mov	r3, r2
   11464:	bl	11254 <__printf_chk@plt>
   11468:	movw	r1, #53131	; 0xcf8b
   1146c:	mov	r0, #0
   11470:	mov	r2, #5
   11474:	movt	r1, #2
   11478:	bl	110f8 <dcgettext@plt>
   1147c:	movw	r7, #8580	; 0x2184
   11480:	movt	r7, #4
   11484:	ldr	r1, [r7]
   11488:	bl	1105c <fputs_unlocked@plt>
   1148c:	movw	r1, #53266	; 0xd012
   11490:	mov	r0, #0
   11494:	mov	r2, #5
   11498:	movt	r1, #2
   1149c:	bl	110f8 <dcgettext@plt>
   114a0:	ldr	r1, [r7]
   114a4:	bl	1105c <fputs_unlocked@plt>
   114a8:	movw	r1, #53311	; 0xd03f
   114ac:	mov	r0, #0
   114b0:	mov	r2, #5
   114b4:	movt	r1, #2
   114b8:	bl	110f8 <dcgettext@plt>
   114bc:	ldr	r1, [r7]
   114c0:	bl	1105c <fputs_unlocked@plt>
   114c4:	movw	r0, #54760	; 0xd5e8
   114c8:	mov	r2, #48	; 0x30
   114cc:	mov	r6, sp
   114d0:	movw	r5, #53365	; 0xd075
   114d4:	movt	r0, #2
   114d8:	movt	r5, #2
   114dc:	add	r1, r0, #32
   114e0:	add	r3, r0, #16
   114e4:	vld1.64	{d18-d19}, [r0], r2
   114e8:	vld1.64	{d16-d17}, [r1]
   114ec:	vld1.64	{d20-d21}, [r3]
   114f0:	add	r1, r6, #32
   114f4:	vldr	d22, [r0]
   114f8:	add	r0, r6, #16
   114fc:	vst1.64	{d16-d17}, [r1]
   11500:	movw	r1, #53485	; 0xd0ed
   11504:	vst1.64	{d20-d21}, [r0]
   11508:	mov	r0, r6
   1150c:	vst1.64	{d18-d19}, [r0], r2
   11510:	movt	r1, #2
   11514:	vstr	d22, [r0]
   11518:	mov	r0, r5
   1151c:	bl	1108c <strcmp@plt>
   11520:	cmp	r0, #0
   11524:	ldrne	r1, [r6, #8]!
   11528:	cmpne	r1, #0
   1152c:	bne	11518 <__assert_fail@plt+0x1f8>
   11530:	ldr	r6, [r6, #4]
   11534:	movw	r1, #53580	; 0xd14c
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	movt	r1, #2
   11544:	bl	110f8 <dcgettext@plt>
   11548:	movw	r2, #53396	; 0xd094
   1154c:	movw	r3, #53603	; 0xd163
   11550:	mov	r1, r0
   11554:	mov	r0, #1
   11558:	movt	r2, #2
   1155c:	movt	r3, #2
   11560:	bl	11254 <__printf_chk@plt>
   11564:	cmp	r6, #0
   11568:	mov	r0, #5
   1156c:	mov	r1, #0
   11570:	moveq	r6, r5
   11574:	bl	112cc <setlocale@plt>
   11578:	cmp	r0, #0
   1157c:	beq	115b4 <__assert_fail@plt+0x294>
   11580:	movw	r1, #53643	; 0xd18b
   11584:	mov	r2, #3
   11588:	movt	r1, #2
   1158c:	bl	11308 <strncmp@plt>
   11590:	cmp	r0, #0
   11594:	beq	115b4 <__assert_fail@plt+0x294>
   11598:	movw	r1, #53647	; 0xd18f
   1159c:	mov	r0, #0
   115a0:	mov	r2, #5
   115a4:	movt	r1, #2
   115a8:	bl	110f8 <dcgettext@plt>
   115ac:	ldr	r1, [r7]
   115b0:	bl	1105c <fputs_unlocked@plt>
   115b4:	movw	r1, #53718	; 0xd1d6
   115b8:	mov	r0, #0
   115bc:	mov	r2, #5
   115c0:	movt	r1, #2
   115c4:	bl	110f8 <dcgettext@plt>
   115c8:	movw	r2, #53603	; 0xd163
   115cc:	mov	r1, r0
   115d0:	mov	r0, #1
   115d4:	mov	r3, r5
   115d8:	movt	r2, #2
   115dc:	bl	11254 <__printf_chk@plt>
   115e0:	movw	r1, #53745	; 0xd1f1
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #2
   115f0:	bl	110f8 <dcgettext@plt>
   115f4:	movw	r3, #53265	; 0xd011
   115f8:	mov	r1, r0
   115fc:	movw	r0, #53513	; 0xd109
   11600:	cmp	r6, r5
   11604:	mov	r2, r6
   11608:	movt	r0, #2
   1160c:	movt	r3, #2
   11610:	moveq	r3, r0
   11614:	mov	r0, #1
   11618:	bl	11254 <__printf_chk@plt>
   1161c:	mov	r0, r4
   11620:	bl	111e8 <exit@plt>
   11624:	movw	r0, #8568	; 0x2178
   11628:	movw	r1, #53052	; 0xcf3c
   1162c:	mov	r2, #5
   11630:	movt	r0, #4
   11634:	movt	r1, #2
   11638:	ldr	r5, [r0]
   1163c:	mov	r0, #0
   11640:	bl	110f8 <dcgettext@plt>
   11644:	mov	r2, r0
   11648:	movw	r0, #8608	; 0x21a0
   1164c:	mov	r1, #1
   11650:	movt	r0, #4
   11654:	ldr	r3, [r0]
   11658:	mov	r0, r5
   1165c:	bl	11278 <__fprintf_chk@plt>
   11660:	mov	r0, r4
   11664:	bl	111e8 <exit@plt>
   11668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1166c:	add	fp, sp, #28
   11670:	sub	sp, sp, #28
   11674:	mov	r5, r0
   11678:	ldr	r0, [r1]
   1167c:	mov	r4, r1
   11680:	bl	27b24 <__assert_fail@plt+0x16804>
   11684:	movw	r1, #53265	; 0xd011
   11688:	mov	r0, #6
   1168c:	movt	r1, #2
   11690:	bl	112cc <setlocale@plt>
   11694:	movw	r6, #53400	; 0xd098
   11698:	movw	r1, #53372	; 0xd07c
   1169c:	movt	r6, #2
   116a0:	movt	r1, #2
   116a4:	mov	r0, r6
   116a8:	bl	112f0 <bindtextdomain@plt>
   116ac:	mov	r0, r6
   116b0:	bl	1111c <textdomain@plt>
   116b4:	movw	r6, #8592	; 0x2190
   116b8:	movt	r6, #4
   116bc:	ldr	r0, [r6]
   116c0:	cmp	r0, #0
   116c4:	bne	116e0 <__assert_fail@plt+0x3c0>
   116c8:	mov	r0, #1024	; 0x400
   116cc:	bl	2aaec <__assert_fail@plt+0x197cc>
   116d0:	movw	r1, #8596	; 0x2194
   116d4:	str	r0, [r6]
   116d8:	movt	r1, #4
   116dc:	str	r0, [r1]
   116e0:	movw	r0, #41660	; 0xa2bc
   116e4:	movt	r0, #1
   116e8:	bl	2cf14 <__assert_fail@plt+0x1bbf4>
   116ec:	movw	r0, #6328	; 0x18b8
   116f0:	movt	r0, #1
   116f4:	bl	2cf14 <__assert_fail@plt+0x1bbf4>
   116f8:	movw	r6, #53265	; 0xd011
   116fc:	movw	r7, #54696	; 0xd5a8
   11700:	movw	r9, #8588	; 0x218c
   11704:	mov	r8, #0
   11708:	mov	sl, #1
   1170c:	movt	r6, #2
   11710:	movt	r7, #2
   11714:	movt	r9, #4
   11718:	b	11720 <__assert_fail@plt+0x400>
   1171c:	strb	sl, [r9]
   11720:	mov	r0, r5
   11724:	mov	r1, r4
   11728:	mov	r2, r6
   1172c:	mov	r3, r7
   11730:	str	r8, [sp]
   11734:	bl	111d0 <getopt_long@plt>
   11738:	cmp	r0, #255	; 0xff
   1173c:	ble	1174c <__assert_fail@plt+0x42c>
   11740:	cmp	r0, #256	; 0x100
   11744:	beq	1171c <__assert_fail@plt+0x3fc>
   11748:	b	118b0 <__assert_fail@plt+0x590>
   1174c:	cmn	r0, #1
   11750:	bne	11818 <__assert_fail@plt+0x4f8>
   11754:	movw	r0, #8560	; 0x2170
   11758:	movt	r0, #4
   1175c:	ldr	r0, [r0]
   11760:	cmp	r0, r5
   11764:	bge	1178c <__assert_fail@plt+0x46c>
   11768:	sub	r5, r5, r0
   1176c:	add	r4, r4, r0, lsl #2
   11770:	mov	r7, #1
   11774:	ldr	r0, [r4], #4
   11778:	bl	1192c <__assert_fail@plt+0x60c>
   1177c:	and	r7, r7, r0
   11780:	subs	r5, r5, #1
   11784:	bne	11774 <__assert_fail@plt+0x454>
   11788:	b	1180c <__assert_fail@plt+0x4ec>
   1178c:	add	r4, sp, #20
   11790:	mov	r0, r4
   11794:	bl	29e30 <__assert_fail@plt+0x18b10>
   11798:	movw	r8, #8576	; 0x2180
   1179c:	movw	r1, #53828	; 0xd244
   117a0:	mov	r2, #3
   117a4:	mov	r3, r4
   117a8:	movt	r8, #4
   117ac:	movt	r1, #2
   117b0:	ldr	r0, [r8]
   117b4:	bl	29e40 <__assert_fail@plt+0x18b20>
   117b8:	mov	r1, r0
   117bc:	ldr	r0, [sp, #24]
   117c0:	mov	r7, #1
   117c4:	cmn	r1, #1
   117c8:	beq	11808 <__assert_fail@plt+0x4e8>
   117cc:	movw	r4, #53828	; 0xd244
   117d0:	add	r5, sp, #20
   117d4:	movt	r4, #2
   117d8:	bl	1192c <__assert_fail@plt+0x60c>
   117dc:	mov	r6, r0
   117e0:	ldr	r0, [r8]
   117e4:	mov	r1, r4
   117e8:	mov	r2, #3
   117ec:	mov	r3, r5
   117f0:	bl	29e40 <__assert_fail@plt+0x18b20>
   117f4:	mov	r1, r0
   117f8:	ldr	r0, [sp, #24]
   117fc:	and	r7, r7, r6
   11800:	cmn	r1, #1
   11804:	bne	117d8 <__assert_fail@plt+0x4b8>
   11808:	bl	1a3a4 <__assert_fail@plt+0x9084>
   1180c:	eor	r0, r7, #1
   11810:	sub	sp, fp, #28
   11814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11818:	cmn	r0, #3
   1181c:	bne	118a0 <__assert_fail@plt+0x580>
   11820:	movw	r0, #8468	; 0x2114
   11824:	movw	r1, #53439	; 0xd0bf
   11828:	movt	r0, #4
   1182c:	movt	r1, #2
   11830:	ldr	r4, [r0]
   11834:	movw	r0, #8580	; 0x2184
   11838:	movt	r0, #4
   1183c:	ldr	r5, [r0]
   11840:	movw	r0, #53421	; 0xd0ad
   11844:	movt	r0, #2
   11848:	bl	27f3c <__assert_fail@plt+0x16c1c>
   1184c:	movw	r1, #53471	; 0xd0df
   11850:	mov	r6, r0
   11854:	movw	r0, #53458	; 0xd0d2
   11858:	movt	r0, #2
   1185c:	movt	r1, #2
   11860:	bl	27f3c <__assert_fail@plt+0x16c1c>
   11864:	movw	r2, #53410	; 0xd0a2
   11868:	mov	r1, #0
   1186c:	mov	r3, r4
   11870:	movt	r2, #2
   11874:	stm	sp, {r2, r6}
   11878:	movw	r2, #53396	; 0xd094
   1187c:	str	r1, [sp, #12]
   11880:	movw	r1, #53365	; 0xd075
   11884:	str	r0, [sp, #8]
   11888:	mov	r0, r5
   1188c:	movt	r1, #2
   11890:	movt	r2, #2
   11894:	bl	2a8b8 <__assert_fail@plt+0x19598>
   11898:	mov	r0, #0
   1189c:	bl	111e8 <exit@plt>
   118a0:	cmn	r0, #2
   118a4:	bne	118b0 <__assert_fail@plt+0x590>
   118a8:	mov	r0, #0
   118ac:	bl	11420 <__assert_fail@plt+0x100>
   118b0:	mov	r0, #1
   118b4:	bl	11420 <__assert_fail@plt+0x100>
   118b8:	push	{r4, r5, r6, sl, fp, lr}
   118bc:	add	fp, sp, #16
   118c0:	movw	r5, #8592	; 0x2190
   118c4:	movw	r6, #8596	; 0x2194
   118c8:	movt	r5, #4
   118cc:	movt	r6, #4
   118d0:	ldr	r1, [r5]
   118d4:	ldr	r0, [r6]
   118d8:	sub	r4, r0, r1
   118dc:	mov	r0, #1
   118e0:	mov	r2, r4
   118e4:	bl	1a3cc <__assert_fail@plt+0x90ac>
   118e8:	cmp	r0, r4
   118ec:	ldreq	r0, [r5]
   118f0:	streq	r0, [r6]
   118f4:	popeq	{r4, r5, r6, sl, fp, pc}
   118f8:	bl	11218 <__errno_location@plt>
   118fc:	ldr	r4, [r0]
   11900:	movw	r1, #53796	; 0xd224
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #2
   11910:	bl	110f8 <dcgettext@plt>
   11914:	movw	r2, #1577	; 0x629
   11918:	mov	r3, r0
   1191c:	mov	r0, #1
   11920:	mov	r1, r4
   11924:	movt	r2, #3
   11928:	bl	11188 <error@plt>
   1192c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11930:	add	fp, sp, #28
   11934:	sub	sp, sp, #292	; 0x124
   11938:	mov	r4, r0
   1193c:	sub	r1, r0, #1
   11940:	ldrb	r0, [r1, #1]!
   11944:	cmp	r0, #32
   11948:	beq	11940 <__assert_fail@plt+0x620>
   1194c:	sub	r0, r0, #43	; 0x2b
   11950:	mov	r6, r1
   11954:	clz	r0, r0
   11958:	lsr	r0, r0, #5
   1195c:	ldrb	r7, [r6, r0]!
   11960:	cmp	r7, #0
   11964:	beq	11c28 <__assert_fail@plt+0x908>
   11968:	add	r1, r1, r0
   1196c:	mvn	r3, #47	; 0x2f
   11970:	mov	r0, r7
   11974:	add	r2, r1, #1
   11978:	uxtab	r0, r3, r0
   1197c:	cmp	r0, #9
   11980:	bhi	11c28 <__assert_fail@plt+0x908>
   11984:	ldrb	r0, [r2], #1
   11988:	cmp	r0, #0
   1198c:	bne	11978 <__assert_fail@plt+0x658>
   11990:	str	r6, [sp, #4]
   11994:	add	r1, r1, #1
   11998:	mov	sl, #10
   1199c:	mov	r6, #0
   119a0:	mov	r5, #0
   119a4:	mov	r9, #0
   119a8:	mov	r4, #0
   119ac:	movw	r0, #39321	; 0x9999
   119b0:	movt	r0, #39321	; 0x9999
   119b4:	subs	r0, r0, r9
   119b8:	movw	r0, #39321	; 0x9999
   119bc:	movt	r0, #6553	; 0x1999
   119c0:	sbcs	r0, r0, r4
   119c4:	bcc	11c64 <__assert_fail@plt+0x944>
   119c8:	lsl	r0, r5, #1
   119cc:	umull	r8, ip, r6, sl
   119d0:	add	lr, r5, r5, lsl #2
   119d4:	orr	r0, r0, r6, lsr #31
   119d8:	subs	r6, r8, r6, lsl #1
   119dc:	add	r3, ip, lr, lsl #1
   119e0:	lsr	r6, r5, #29
   119e4:	sbcs	r0, r3, r0
   119e8:	add	r2, r6, r5, lsr #31
   119ec:	mvn	r6, #47	; 0x2f
   119f0:	mov	r0, #0
   119f4:	uxtab	r7, r6, r7
   119f8:	movwcc	r0, #1
   119fc:	adds	r6, r8, r7
   11a00:	add	r7, r4, r4, lsl #2
   11a04:	adcs	r5, r3, #0
   11a08:	adc	r0, r2, r0
   11a0c:	umull	r2, r3, r9, sl
   11a10:	adds	r9, r2, r0
   11a14:	add	r3, r3, r7, lsl #1
   11a18:	mov	r0, #0
   11a1c:	adcs	r4, r3, #0
   11a20:	adcs	r0, r0, #0
   11a24:	bne	11c64 <__assert_fail@plt+0x944>
   11a28:	ldrb	r7, [r1], #1
   11a2c:	cmp	r7, #0
   11a30:	bne	119ac <__assert_fail@plt+0x68c>
   11a34:	cmp	r4, #0
   11a38:	blt	11c64 <__assert_fail@plt+0x944>
   11a3c:	movw	r0, #8588	; 0x218c
   11a40:	movt	r0, #4
   11a44:	ldrb	r0, [r0]
   11a48:	cmp	r0, #1
   11a4c:	bne	11a6c <__assert_fail@plt+0x74c>
   11a50:	movw	r0, #8568	; 0x2178
   11a54:	movw	r2, #53832	; 0xd248
   11a58:	mov	r1, #1
   11a5c:	movt	r0, #4
   11a60:	movt	r2, #2
   11a64:	ldr	r0, [r0]
   11a68:	bl	11278 <__fprintf_chk@plt>
   11a6c:	mov	r0, r9
   11a70:	mov	r1, r4
   11a74:	mov	r2, r6
   11a78:	mov	r3, r5
   11a7c:	bl	1208c <__assert_fail@plt+0xd6c>
   11a80:	movw	r7, #8596	; 0x2194
   11a84:	add	sl, sp, #8
   11a88:	mov	r2, r6
   11a8c:	mov	r3, r5
   11a90:	movt	r7, #4
   11a94:	ldr	r0, [r7]
   11a98:	add	r1, r0, #1
   11a9c:	str	r1, [r7]
   11aa0:	mov	r1, #58	; 0x3a
   11aa4:	strb	r1, [r0]
   11aa8:	mov	r0, r9
   11aac:	mov	r1, r4
   11ab0:	str	sl, [sp]
   11ab4:	bl	12268 <__assert_fail@plt+0xf48>
   11ab8:	ldrb	r0, [sp, #258]	; 0x102
   11abc:	cmp	r0, #0
   11ac0:	beq	11b60 <__assert_fail@plt+0x840>
   11ac4:	mov	r2, #0
   11ac8:	mov	r3, #32
   11acc:	sub	r4, fp, #56	; 0x38
   11ad0:	add	r8, sl, r2
   11ad4:	ldrb	r1, [r8, #224]!	; 0xe0
   11ad8:	cmp	r1, #0
   11adc:	beq	11b50 <__assert_fail@plt+0x830>
   11ae0:	add	r0, sl, r2, lsl #3
   11ae4:	mov	sl, #0
   11ae8:	str	r2, [sp, #4]
   11aec:	add	r9, r0, #16
   11af0:	ldr	r0, [r7]
   11af4:	add	r1, r0, #1
   11af8:	mov	r2, r4
   11afc:	str	r1, [r7]
   11b00:	strb	r3, [r0]
   11b04:	ldrd	r0, [r9]
   11b08:	bl	1a440 <__assert_fail@plt+0x9120>
   11b0c:	ldr	r6, [r7]
   11b10:	mov	r1, r0
   11b14:	sub	r0, r4, r0
   11b18:	add	r5, r0, #20
   11b1c:	mov	r2, r5
   11b20:	mov	r0, r6
   11b24:	bl	110d4 <memcpy@plt>
   11b28:	ldrb	r1, [r8]
   11b2c:	add	sl, sl, #1
   11b30:	add	r0, r6, r5
   11b34:	mov	r3, #32
   11b38:	str	r0, [r7]
   11b3c:	cmp	sl, r1
   11b40:	bcc	11af4 <__assert_fail@plt+0x7d4>
   11b44:	ldrb	r0, [sp, #258]	; 0x102
   11b48:	ldr	r2, [sp, #4]
   11b4c:	add	sl, sp, #8
   11b50:	add	r2, r2, #1
   11b54:	uxtb	r1, r0
   11b58:	cmp	r2, r1
   11b5c:	bcc	11ad0 <__assert_fail@plt+0x7b0>
   11b60:	ldr	r0, [sp, #16]
   11b64:	ldr	r1, [sp, #20]
   11b68:	orrs	r0, r0, r1
   11b6c:	beq	11b98 <__assert_fail@plt+0x878>
   11b70:	ldr	r1, [r7]
   11b74:	add	r0, sl, #8
   11b78:	add	r2, r1, #1
   11b7c:	str	r2, [r7]
   11b80:	mov	r2, #32
   11b84:	strb	r2, [r1]
   11b88:	ldrd	r0, [r0]
   11b8c:	ldr	r2, [sp, #8]
   11b90:	ldr	r3, [sp, #12]
   11b94:	bl	1208c <__assert_fail@plt+0xd6c>
   11b98:	ldr	r0, [r7]
   11b9c:	movw	r6, #8464	; 0x2110
   11ba0:	mov	r1, #10
   11ba4:	movw	r8, #8592	; 0x2190
   11ba8:	movt	r6, #4
   11bac:	movt	r8, #4
   11bb0:	add	r4, r0, #1
   11bb4:	str	r4, [r7]
   11bb8:	strb	r1, [r0]
   11bbc:	ldr	r0, [r6]
   11bc0:	ldr	r5, [r8]
   11bc4:	cmn	r0, #1
   11bc8:	bne	11bf8 <__assert_fail@plt+0x8d8>
   11bcc:	mov	r0, #0
   11bd0:	bl	112fc <isatty@plt>
   11bd4:	mov	r1, r0
   11bd8:	mov	r0, #1
   11bdc:	cmp	r1, #0
   11be0:	bne	11bf4 <__assert_fail@plt+0x8d4>
   11be4:	mov	r0, #1
   11be8:	bl	112fc <isatty@plt>
   11bec:	cmp	r0, #0
   11bf0:	movwne	r0, #1
   11bf4:	str	r0, [r6]
   11bf8:	cmp	r0, #0
   11bfc:	beq	11dfc <__assert_fail@plt+0xadc>
   11c00:	ldr	r1, [r8]
   11c04:	ldr	r0, [r7]
   11c08:	sub	r4, r0, r1
   11c0c:	mov	r0, #1
   11c10:	mov	r2, r4
   11c14:	bl	1a3cc <__assert_fail@plt+0x90ac>
   11c18:	cmp	r0, r4
   11c1c:	bne	11e8c <__assert_fail@plt+0xb6c>
   11c20:	ldr	r0, [r8]
   11c24:	b	11e60 <__assert_fail@plt+0xb40>
   11c28:	movw	r1, #53869	; 0xd26d
   11c2c:	mov	r0, #0
   11c30:	mov	r2, #5
   11c34:	mov	r5, #0
   11c38:	movt	r1, #2
   11c3c:	bl	110f8 <dcgettext@plt>
   11c40:	mov	r6, r0
   11c44:	mov	r0, r4
   11c48:	bl	29cf8 <__assert_fail@plt+0x189d8>
   11c4c:	mov	r3, r0
   11c50:	mov	r0, #0
   11c54:	mov	r1, #0
   11c58:	mov	r2, r6
   11c5c:	bl	11188 <error@plt>
   11c60:	b	11e68 <__assert_fail@plt+0xb48>
   11c64:	movw	r0, #8588	; 0x218c
   11c68:	movt	r0, #4
   11c6c:	ldrb	r0, [r0]
   11c70:	cmp	r0, #1
   11c74:	bne	11c94 <__assert_fail@plt+0x974>
   11c78:	movw	r0, #8568	; 0x2178
   11c7c:	movw	r2, #53904	; 0xd290
   11c80:	mov	r1, #1
   11c84:	movt	r0, #4
   11c88:	movt	r2, #2
   11c8c:	ldr	r0, [r0]
   11c90:	bl	11278 <__fprintf_chk@plt>
   11c94:	ldr	r1, [sp, #4]
   11c98:	add	r4, sp, #8
   11c9c:	mov	r2, #10
   11ca0:	mov	r0, r4
   11ca4:	bl	270f4 <__assert_fail@plt+0x15dd4>
   11ca8:	movw	r5, #8580	; 0x2184
   11cac:	mov	r1, #10
   11cb0:	mov	r2, r4
   11cb4:	movt	r5, #4
   11cb8:	ldr	r0, [r5]
   11cbc:	bl	2710c <__assert_fail@plt+0x15dec>
   11cc0:	ldr	r0, [r5]
   11cc4:	ldr	r1, [r0, #20]
   11cc8:	ldr	r2, [r0, #24]
   11ccc:	cmp	r1, r2
   11cd0:	bcs	11e74 <__assert_fail@plt+0xb54>
   11cd4:	add	r2, r1, #1
   11cd8:	str	r2, [r0, #20]
   11cdc:	mov	r0, #58	; 0x3a
   11ce0:	strb	r0, [r1]
   11ce4:	add	r0, sp, #8
   11ce8:	sub	r1, fp, #56	; 0x38
   11cec:	bl	11ec0 <__assert_fail@plt+0xba0>
   11cf0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11cf4:	cmp	r1, #0
   11cf8:	beq	11db4 <__assert_fail@plt+0xa94>
   11cfc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d00:	mov	r4, #0
   11d04:	mov	r6, #32
   11d08:	ldr	r2, [r0, r4, lsl #2]
   11d0c:	cmp	r2, #0
   11d10:	beq	11d78 <__assert_fail@plt+0xa58>
   11d14:	mov	r7, #0
   11d18:	b	11d28 <__assert_fail@plt+0xa08>
   11d1c:	mov	r1, #32
   11d20:	bl	112c0 <__overflow@plt>
   11d24:	b	11d48 <__assert_fail@plt+0xa28>
   11d28:	ldr	r0, [r5]
   11d2c:	ldr	r1, [r0, #20]
   11d30:	ldr	r2, [r0, #24]
   11d34:	cmp	r1, r2
   11d38:	bcs	11d1c <__assert_fail@plt+0x9fc>
   11d3c:	add	r2, r1, #1
   11d40:	str	r2, [r0, #20]
   11d44:	strb	r6, [r1]
   11d48:	ldr	r1, [fp, #-56]	; 0xffffffc8
   11d4c:	add	r0, r4, r4, lsl #1
   11d50:	add	r2, r1, r0, lsl #2
   11d54:	ldr	r0, [r5]
   11d58:	mov	r1, #10
   11d5c:	bl	2710c <__assert_fail@plt+0x15dec>
   11d60:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d64:	add	r7, r7, #1
   11d68:	ldr	r1, [r0, r4, lsl #2]
   11d6c:	cmp	r7, r1
   11d70:	bcc	11d28 <__assert_fail@plt+0xa08>
   11d74:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11d78:	add	r4, r4, #1
   11d7c:	cmp	r4, r1
   11d80:	bcc	11d08 <__assert_fail@plt+0x9e8>
   11d84:	cmp	r1, #0
   11d88:	beq	11db4 <__assert_fail@plt+0xa94>
   11d8c:	mov	r4, #0
   11d90:	mov	r6, #0
   11d94:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11d98:	add	r0, r0, r4
   11d9c:	bl	1bf98 <__assert_fail@plt+0xac78>
   11da0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11da4:	add	r6, r6, #1
   11da8:	add	r4, r4, #12
   11dac:	cmp	r6, r0
   11db0:	bcc	11d94 <__assert_fail@plt+0xa74>
   11db4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11db8:	bl	1a3a4 <__assert_fail@plt+0x9084>
   11dbc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11dc0:	bl	1a3a4 <__assert_fail@plt+0x9084>
   11dc4:	add	r0, sp, #8
   11dc8:	bl	1bf98 <__assert_fail@plt+0xac78>
   11dcc:	ldr	r0, [r5]
   11dd0:	ldr	r1, [r0, #20]
   11dd4:	ldr	r2, [r0, #24]
   11dd8:	cmp	r1, r2
   11ddc:	bcs	11e80 <__assert_fail@plt+0xb60>
   11de0:	add	r2, r1, #1
   11de4:	str	r2, [r0, #20]
   11de8:	mov	r0, #10
   11dec:	strb	r0, [r1]
   11df0:	ldr	r0, [r5]
   11df4:	bl	11134 <fflush_unlocked@plt>
   11df8:	b	11e64 <__assert_fail@plt+0xb44>
   11dfc:	sub	r0, r4, r5
   11e00:	cmp	r0, #512	; 0x200
   11e04:	bcc	11e64 <__assert_fail@plt+0xb44>
   11e08:	ldr	r1, [r8]
   11e0c:	ldr	r6, [r7]
   11e10:	movw	r0, #513	; 0x201
   11e14:	add	r4, r1, r0
   11e18:	ldrb	r0, [r4, #-2]
   11e1c:	sub	r4, r4, #1
   11e20:	cmp	r0, #10
   11e24:	bne	11e18 <__assert_fail@plt+0xaf8>
   11e28:	sub	r5, r4, r1
   11e2c:	mov	r0, #1
   11e30:	str	r4, [r7]
   11e34:	mov	r2, r5
   11e38:	bl	1a3cc <__assert_fail@plt+0x90ac>
   11e3c:	cmp	r0, r5
   11e40:	bne	11e8c <__assert_fail@plt+0xb6c>
   11e44:	sub	r5, r6, r4
   11e48:	ldr	r6, [r8]
   11e4c:	mov	r1, r4
   11e50:	mov	r2, r5
   11e54:	mov	r0, r6
   11e58:	bl	110d4 <memcpy@plt>
   11e5c:	add	r0, r6, r5
   11e60:	str	r0, [r7]
   11e64:	mov	r5, #1
   11e68:	mov	r0, r5
   11e6c:	sub	sp, fp, #28
   11e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e74:	mov	r1, #58	; 0x3a
   11e78:	bl	112c0 <__overflow@plt>
   11e7c:	b	11ce4 <__assert_fail@plt+0x9c4>
   11e80:	mov	r1, #10
   11e84:	bl	112c0 <__overflow@plt>
   11e88:	b	11df0 <__assert_fail@plt+0xad0>
   11e8c:	bl	11218 <__errno_location@plt>
   11e90:	ldr	r4, [r0]
   11e94:	movw	r1, #53796	; 0xd224
   11e98:	mov	r0, #0
   11e9c:	mov	r2, #5
   11ea0:	movt	r1, #2
   11ea4:	bl	110f8 <dcgettext@plt>
   11ea8:	movw	r2, #1577	; 0x629
   11eac:	mov	r3, r0
   11eb0:	mov	r0, #1
   11eb4:	mov	r1, r4
   11eb8:	movt	r2, #3
   11ebc:	bl	11188 <error@plt>
   11ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ec4:	add	fp, sp, #28
   11ec8:	sub	sp, sp, #28
   11ecc:	mov	r5, r0
   11ed0:	mov	r0, #0
   11ed4:	mov	r9, r1
   11ed8:	str	r0, [r1]
   11edc:	str	r0, [r1, #4]
   11ee0:	str	r0, [r1, #8]
   11ee4:	mov	r0, r5
   11ee8:	bl	1ced0 <__assert_fail@plt+0xbbb0>
   11eec:	cmp	r0, #0
   11ef0:	beq	12084 <__assert_fail@plt+0xd64>
   11ef4:	movw	r8, #8588	; 0x218c
   11ef8:	movt	r8, #4
   11efc:	ldrb	r0, [r8]
   11f00:	cmp	r0, #1
   11f04:	bne	11f24 <__assert_fail@plt+0xc04>
   11f08:	movw	r0, #8568	; 0x2178
   11f0c:	movw	r2, #54607	; 0xd54f
   11f10:	mov	r1, #1
   11f14:	movt	r0, #4
   11f18:	movt	r2, #2
   11f1c:	ldr	r0, [r0]
   11f20:	bl	11278 <__fprintf_chk@plt>
   11f24:	add	r0, sp, #4
   11f28:	bl	1bf3c <__assert_fail@plt+0xac1c>
   11f2c:	mov	r0, r5
   11f30:	mov	r1, #0
   11f34:	bl	2647c <__assert_fail@plt+0x1515c>
   11f38:	mov	r6, r0
   11f3c:	mov	r0, r5
   11f40:	mov	r1, r5
   11f44:	mov	r2, r6
   11f48:	bl	1f120 <__assert_fail@plt+0xde00>
   11f4c:	cmp	r6, #0
   11f50:	beq	11f80 <__assert_fail@plt+0xc60>
   11f54:	add	r7, sp, #16
   11f58:	mov	r0, r7
   11f5c:	mov	r1, #2
   11f60:	bl	1c264 <__assert_fail@plt+0xaf44>
   11f64:	mov	r0, r9
   11f68:	mov	r1, r7
   11f6c:	bl	19c34 <__assert_fail@plt+0x8914>
   11f70:	mov	r0, r7
   11f74:	bl	1bf98 <__assert_fail@plt+0xac78>
   11f78:	subs	r6, r6, #1
   11f7c:	bne	11f58 <__assert_fail@plt+0xc38>
   11f80:	movw	sl, #80	; 0x50
   11f84:	mov	r6, #3
   11f88:	mov	r4, #1
   11f8c:	add	r7, sp, #16
   11f90:	movt	sl, #3
   11f94:	mov	r0, r5
   11f98:	mov	r1, r6
   11f9c:	bl	1fbc0 <__assert_fail@plt+0xe8a0>
   11fa0:	cmp	r0, #0
   11fa4:	beq	11fe4 <__assert_fail@plt+0xcc4>
   11fa8:	mov	r0, r5
   11fac:	mov	r1, r5
   11fb0:	mov	r2, r6
   11fb4:	bl	1f9f4 <__assert_fail@plt+0xe6d4>
   11fb8:	mov	r0, r7
   11fbc:	mov	r1, r6
   11fc0:	bl	1c264 <__assert_fail@plt+0xaf44>
   11fc4:	mov	r0, r9
   11fc8:	mov	r1, r7
   11fcc:	bl	19c34 <__assert_fail@plt+0x8914>
   11fd0:	mov	r0, r7
   11fd4:	bl	1bf98 <__assert_fail@plt+0xac78>
   11fd8:	cmp	r4, #668	; 0x29c
   11fdc:	bls	11f94 <__assert_fail@plt+0xc74>
   11fe0:	b	1200c <__assert_fail@plt+0xcec>
   11fe4:	ldrb	r0, [sl, r4]
   11fe8:	add	r6, r6, r0
   11fec:	mov	r0, r5
   11ff0:	mul	r1, r6, r6
   11ff4:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   11ff8:	cmp	r0, #0
   11ffc:	blt	1200c <__assert_fail@plt+0xcec>
   12000:	add	r4, r4, #1
   12004:	cmp	r4, #668	; 0x29c
   12008:	bls	11f94 <__assert_fail@plt+0xc74>
   1200c:	add	r0, sp, #4
   12010:	bl	1bf98 <__assert_fail@plt+0xac78>
   12014:	mov	r0, r5
   12018:	mov	r1, #1
   1201c:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   12020:	cmp	r0, #0
   12024:	beq	12084 <__assert_fail@plt+0xd64>
   12028:	ldrb	r0, [r8]
   1202c:	cmp	r0, #1
   12030:	bne	12050 <__assert_fail@plt+0xd30>
   12034:	movw	r0, #8568	; 0x2178
   12038:	movw	r2, #54587	; 0xd53b
   1203c:	mov	r1, #1
   12040:	movt	r0, #4
   12044:	movt	r2, #2
   12048:	ldr	r0, [r0]
   1204c:	bl	11278 <__fprintf_chk@plt>
   12050:	mov	r0, r5
   12054:	bl	199a8 <__assert_fail@plt+0x8688>
   12058:	cmp	r0, #0
   1205c:	beq	12074 <__assert_fail@plt+0xd54>
   12060:	mov	r0, r9
   12064:	mov	r1, r5
   12068:	bl	19c34 <__assert_fail@plt+0x8914>
   1206c:	sub	sp, fp, #28
   12070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12074:	mov	r0, r5
   12078:	mov	r1, #1
   1207c:	mov	r2, r9
   12080:	bl	19d9c <__assert_fail@plt+0x8a7c>
   12084:	sub	sp, fp, #28
   12088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1208c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12090:	add	fp, sp, #28
   12094:	sub	sp, sp, #36	; 0x24
   12098:	mov	r5, r0
   1209c:	mov	r8, r3
   120a0:	orrs	r0, r0, r1
   120a4:	beq	12220 <__assert_fail@plt+0xf00>
   120a8:	movw	r7, #51712	; 0xca00
   120ac:	str	r2, [sp, #8]
   120b0:	mov	r0, r5
   120b4:	mov	r3, #0
   120b8:	mov	r4, r1
   120bc:	mov	r9, #0
   120c0:	movt	r7, #15258	; 0x3b9a
   120c4:	mov	r2, r7
   120c8:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   120cc:	umull	r2, r3, r0, r7
   120d0:	str	r1, [sp]
   120d4:	mov	lr, #0
   120d8:	mov	r6, #0
   120dc:	str	r0, [sp, #4]
   120e0:	mla	r3, r1, r7, r3
   120e4:	subs	sl, r5, r2
   120e8:	mov	r1, #0
   120ec:	sbc	ip, r4, r3
   120f0:	mvn	r4, #63	; 0x3f
   120f4:	mov	r3, #0
   120f8:	b	12104 <__assert_fail@plt+0xde4>
   120fc:	mov	r8, r0
   12100:	b	12190 <__assert_fail@plt+0xe70>
   12104:	lsrs	r2, lr, #1
   12108:	lsl	r3, r3, #1
   1210c:	rrx	r1, r1
   12110:	lsrs	r6, r6, #1
   12114:	orr	lr, r2, r7, lsl #31
   12118:	orr	r3, r3, r9, lsr #31
   1211c:	lsl	r9, r9, #1
   12120:	rrx	r7, r7
   12124:	subs	r2, r7, sl
   12128:	sbcs	r2, r6, ip
   1212c:	bcc	12158 <__assert_fail@plt+0xe38>
   12130:	mov	r0, r8
   12134:	eor	r2, sl, r7
   12138:	eor	r8, ip, r6
   1213c:	orrs	r2, r2, r8
   12140:	bne	120fc <__assert_fail@plt+0xddc>
   12144:	ldr	r2, [sp, #8]
   12148:	mov	r8, r0
   1214c:	subs	r2, r2, r1
   12150:	sbcs	r2, r0, lr
   12154:	bcc	12190 <__assert_fail@plt+0xe70>
   12158:	ldr	r0, [sp, #8]
   1215c:	subs	r2, sl, r7
   12160:	orr	r9, r9, #1
   12164:	sbc	r5, ip, r6
   12168:	subs	sl, r2, #1
   1216c:	sbc	ip, r5, #0
   12170:	subs	r0, r0, r1
   12174:	str	r0, [sp, #8]
   12178:	sbcs	r8, r8, lr
   1217c:	mov	r0, #0
   12180:	movwcc	r0, #1
   12184:	cmp	r0, #0
   12188:	moveq	sl, r2
   1218c:	moveq	ip, r5
   12190:	adds	r4, r4, #1
   12194:	bne	12104 <__assert_fail@plt+0xde4>
   12198:	ldr	r0, [sp, #4]
   1219c:	ldr	r1, [sp]
   121a0:	mov	r2, r9
   121a4:	bl	1208c <__assert_fail@plt+0xd6c>
   121a8:	ldr	r0, [sp, #8]
   121ac:	add	r7, sp, #15
   121b0:	mov	r1, r8
   121b4:	mov	r2, r7
   121b8:	bl	1a440 <__assert_fail@plt+0x9120>
   121bc:	movw	r8, #8596	; 0x2194
   121c0:	mov	r5, r0
   121c4:	sub	r0, r7, r0
   121c8:	movt	r8, #4
   121cc:	add	r4, r0, #20
   121d0:	ldr	r6, [r8]
   121d4:	cmp	r4, #8
   121d8:	bhi	12200 <__assert_fail@plt+0xee0>
   121dc:	mvn	r0, #10
   121e0:	mov	r1, #48	; 0x30
   121e4:	sub	r0, r0, r7
   121e8:	add	r7, r0, r5
   121ec:	mov	r0, r6
   121f0:	mov	r2, r7
   121f4:	bl	11248 <memset@plt>
   121f8:	add	r6, r6, r7
   121fc:	str	r6, [r8]
   12200:	mov	r0, r6
   12204:	mov	r1, r5
   12208:	mov	r2, r4
   1220c:	bl	110d4 <memcpy@plt>
   12210:	add	r0, r6, r4
   12214:	str	r0, [r8]
   12218:	sub	sp, fp, #28
   1221c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12220:	add	r6, sp, #15
   12224:	mov	r0, r2
   12228:	mov	r1, r8
   1222c:	mov	r2, r6
   12230:	bl	1a440 <__assert_fail@plt+0x9120>
   12234:	mov	r1, r0
   12238:	sub	r0, r6, r0
   1223c:	movw	r6, #8596	; 0x2194
   12240:	movt	r6, #4
   12244:	add	r4, r0, #20
   12248:	ldr	r5, [r6]
   1224c:	mov	r2, r4
   12250:	mov	r0, r5
   12254:	bl	110d4 <memcpy@plt>
   12258:	add	r0, r5, r4
   1225c:	str	r0, [r6]
   12260:	sub	sp, fp, #28
   12264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1226c:	add	fp, sp, #28
   12270:	sub	sp, sp, #180	; 0xb4
   12274:	ldr	r7, [fp, #8]
   12278:	mov	r8, r2
   1227c:	mov	r2, #0
   12280:	mov	r4, r7
   12284:	str	r2, [r7, #12]
   12288:	strb	r2, [r7, #250]	; 0xfa
   1228c:	str	r2, [r4, #8]!
   12290:	orrs	r2, r0, r1
   12294:	bne	122a4 <__assert_fail@plt+0xf84>
   12298:	subs	r2, r8, #2
   1229c:	sbcs	r2, r3, #0
   122a0:	bcc	14b7c <__assert_fail@plt+0x385c>
   122a4:	tst	r8, #1
   122a8:	str	r7, [fp, #-92]	; 0xffffffa4
   122ac:	str	r4, [fp, #-96]	; 0xffffffa0
   122b0:	bne	12354 <__assert_fail@plt+0x1034>
   122b4:	orrs	r2, r8, r3
   122b8:	beq	12858 <__assert_fail@plt+0x1538>
   122bc:	mov	r6, #0
   122c0:	mov	r4, r8
   122c4:	mov	r2, r3
   122c8:	lsrs	r2, r2, #1
   122cc:	sub	r6, r6, #1
   122d0:	rrx	r7, r4
   122d4:	tst	r4, #2
   122d8:	mov	r4, r7
   122dc:	beq	122c8 <__assert_fail@plt+0xfa8>
   122e0:	rsb	r9, r6, #0
   122e4:	add	r4, r6, #32
   122e8:	mvn	r5, #31
   122ec:	add	lr, r6, #64	; 0x40
   122f0:	lsr	r2, r0, r9
   122f4:	lsr	r7, r1, r9
   122f8:	orr	ip, r2, r1, lsl r4
   122fc:	sub	r2, r5, r6
   12300:	lsr	r5, r3, r9
   12304:	cmp	r2, #0
   12308:	lsr	r6, r0, r2
   1230c:	lsrge	ip, r1, r2
   12310:	movwge	r7, #0
   12314:	movwge	r5, #0
   12318:	orr	r1, r6, r1, lsl lr
   1231c:	cmp	r4, #0
   12320:	lslge	r1, r0, r4
   12324:	cmp	r2, #0
   12328:	lsl	r0, r0, lr
   1232c:	orr	r1, r1, r5
   12330:	str	r1, [fp, #-88]	; 0xffffffa8
   12334:	lsr	r1, r8, r9
   12338:	orr	r6, r1, r3, lsl r4
   1233c:	mov	r1, r7
   12340:	lsrge	r6, r3, r2
   12344:	cmp	r4, #0
   12348:	movwge	r0, #0
   1234c:	orr	r8, r0, r6
   12350:	b	128b8 <__assert_fail@plt+0x1598>
   12354:	str	r3, [fp, #-88]	; 0xffffffa8
   12358:	mov	ip, r0
   1235c:	orrs	r0, ip, r1
   12360:	beq	128e0 <__assert_fail@plt+0x15c0>
   12364:	add	r0, r7, #8
   12368:	mov	r5, #0
   1236c:	mov	r6, #3
   12370:	mov	r4, #0
   12374:	str	r0, [fp, #-84]	; 0xffffffac
   12378:	add	r0, r7, #223	; 0xdf
   1237c:	str	r0, [fp, #-100]	; 0xffffff9c
   12380:	add	r0, r7, #225	; 0xe1
   12384:	str	r0, [sp, #104]	; 0x68
   12388:	add	r0, r7, #24
   1238c:	str	r0, [sp, #100]	; 0x64
   12390:	add	r0, r7, #226	; 0xe2
   12394:	str	r0, [sp, #96]	; 0x60
   12398:	add	r0, r7, #32
   1239c:	mov	r7, ip
   123a0:	str	r0, [sp, #92]	; 0x5c
   123a4:	movw	r0, #54816	; 0xd620
   123a8:	mov	r9, r1
   123ac:	str	r7, [fp, #-76]	; 0xffffffb4
   123b0:	str	r4, [fp, #-72]	; 0xffffffb8
   123b4:	movt	r0, #2
   123b8:	ldr	sl, [r0, r4, lsl #4]!
   123bc:	ldr	ip, [r0, #4]
   123c0:	add	r1, r0, #8
   123c4:	str	r1, [fp, #-80]	; 0xffffffb0
   123c8:	b	123d4 <__assert_fail@plt+0x10b4>
   123cc:	mov	r8, r0
   123d0:	str	r1, [fp, #-76]	; 0xffffffb4
   123d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   123d8:	umull	r0, r1, r8, sl
   123dc:	mov	lr, r6
   123e0:	mla	r1, r8, ip, r1
   123e4:	mov	r3, lr
   123e8:	mla	r2, r2, sl, r1
   123ec:	umull	r1, r4, r0, r5
   123f0:	umlal	r1, r4, r2, r6
   123f4:	umull	r6, r7, r0, r6
   123f8:	adds	r1, r1, r7
   123fc:	umull	r6, r7, r2, lr
   12400:	adc	r4, r4, #0
   12404:	subs	r1, r1, r6
   12408:	sbcs	r1, r4, r7
   1240c:	umull	r6, r7, r2, r5
   12410:	mov	r1, #0
   12414:	movwcc	r1, #1
   12418:	cmp	r1, #0
   1241c:	addne	r7, r7, #1
   12420:	adds	r1, r6, r4
   12424:	adc	r4, r7, #0
   12428:	ldr	r7, [fp, #-76]	; 0xffffffb4
   1242c:	subs	r6, r7, r1
   12430:	sbcs	r6, r9, r4
   12434:	bcc	1280c <__assert_fail@plt+0x14ec>
   12438:	subs	r6, r7, r1
   1243c:	umull	r1, r7, r6, sl
   12440:	sbc	r4, r9, r4
   12444:	mla	r6, r6, ip, r7
   12448:	ldr	r7, [fp, #-80]	; 0xffffffb0
   1244c:	mla	r4, r4, sl, r6
   12450:	ldrd	r6, [r7]
   12454:	subs	r6, r6, r1
   12458:	sbcs	r6, r7, r4
   1245c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   12460:	bcc	1280c <__assert_fail@plt+0x14ec>
   12464:	str	r2, [fp, #-88]	; 0xffffffa8
   12468:	mov	r9, r4
   1246c:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12470:	ldrb	lr, [r8, #250]	; 0xfa
   12474:	sub	r2, lr, #1
   12478:	cmp	lr, #0
   1247c:	beq	127e0 <__assert_fail@plt+0x14c0>
   12480:	str	r2, [sp, #84]	; 0x54
   12484:	mov	r2, #8
   12488:	str	lr, [sp, #88]	; 0x58
   1248c:	add	r6, r2, lr, lsl #3
   12490:	add	lr, lr, #223	; 0xdf
   12494:	ldr	r4, [fp, #-92]	; 0xffffffa4
   12498:	ldr	r7, [r4, r6]!
   1249c:	ldr	r4, [r4, #4]
   124a0:	subs	r8, r3, r7
   124a4:	sbcs	r2, r5, r4
   124a8:	bcs	124d4 <__assert_fail@plt+0x11b4>
   124ac:	sub	r2, lr, #224	; 0xe0
   124b0:	sub	r7, lr, #1
   124b4:	sub	r6, r6, #8
   124b8:	cmp	r2, #0
   124bc:	mov	lr, r7
   124c0:	bgt	12494 <__assert_fail@plt+0x1174>
   124c4:	ldr	r4, [sp, #84]	; 0x54
   124c8:	sub	r7, r7, #224	; 0xe0
   124cc:	mov	r6, r3
   124d0:	b	12504 <__assert_fail@plt+0x11e4>
   124d4:	eor	r2, r7, r3
   124d8:	eor	r4, r4, r5
   124dc:	mov	r6, r3
   124e0:	orrs	r2, r2, r4
   124e4:	ldr	r4, [sp, #84]	; 0x54
   124e8:	bne	12500 <__assert_fail@plt+0x11e0>
   124ec:	ldr	r4, [fp, #-92]	; 0xffffffa4
   124f0:	ldrb	r2, [r4, lr]
   124f4:	add	r2, r2, #1
   124f8:	strb	r2, [r4, lr]
   124fc:	b	123cc <__assert_fail@plt+0x10ac>
   12500:	sub	r7, lr, #224	; 0xe0
   12504:	ldr	lr, [sp, #88]	; 0x58
   12508:	cmp	r4, r7
   1250c:	ble	1270c <__assert_fail@plt+0x13ec>
   12510:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12514:	mvn	r2, r7
   12518:	str	r7, [fp, #-76]	; 0xffffffb4
   1251c:	add	r2, r2, lr
   12520:	cmp	r2, #1
   12524:	bls	127a8 <__assert_fail@plt+0x1488>
   12528:	str	r2, [sp, #72]	; 0x48
   1252c:	sub	r2, lr, #2
   12530:	sub	r4, r2, r7
   12534:	mov	r2, #8
   12538:	umull	r6, r2, r4, r2
   1253c:	str	r4, [sp, #80]	; 0x50
   12540:	add	r4, r8, lr, lsl #3
   12544:	cmp	r2, #0
   12548:	add	r7, r4, #16
   1254c:	movwne	r2, #1
   12550:	cmp	r6, r7
   12554:	str	r7, [sp, #68]	; 0x44
   12558:	bhi	12700 <__assert_fail@plt+0x13e0>
   1255c:	cmp	r2, #0
   12560:	bne	12700 <__assert_fail@plt+0x13e0>
   12564:	mov	lr, r6
   12568:	ldr	r6, [sp, #88]	; 0x58
   1256c:	add	r4, r8, r6
   12570:	add	r7, r4, #224	; 0xe0
   12574:	ldr	r4, [sp, #80]	; 0x50
   12578:	str	r7, [sp, #76]	; 0x4c
   1257c:	cmp	r4, r7
   12580:	bhi	1279c <__assert_fail@plt+0x147c>
   12584:	ldr	r7, [fp, #-84]	; 0xffffffac
   12588:	add	r7, r7, r6, lsl #3
   1258c:	cmp	lr, r7
   12590:	bhi	126fc <__assert_fail@plt+0x13dc>
   12594:	cmp	r2, #0
   12598:	bne	126fc <__assert_fail@plt+0x13dc>
   1259c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   125a0:	ldr	lr, [sp, #88]	; 0x58
   125a4:	add	r2, r2, lr
   125a8:	cmp	r4, r2
   125ac:	bhi	12718 <__assert_fail@plt+0x13f8>
   125b0:	ldr	r6, [sp, #96]	; 0x60
   125b4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   125b8:	add	r4, r6, r8
   125bc:	str	r4, [sp, #80]	; 0x50
   125c0:	ldr	r6, [sp, #104]	; 0x68
   125c4:	add	r4, r6, lr
   125c8:	add	r6, r6, r8
   125cc:	str	r6, [sp, #56]	; 0x38
   125d0:	cmp	r6, r4
   125d4:	mov	r6, #0
   125d8:	str	r4, [sp, #64]	; 0x40
   125dc:	movwcc	r6, #1
   125e0:	str	r6, [sp, #36]	; 0x24
   125e4:	ldr	r6, [sp, #80]	; 0x50
   125e8:	ldr	lr, [sp, #76]	; 0x4c
   125ec:	cmp	r6, lr
   125f0:	mov	r6, #0
   125f4:	movwcc	r6, #1
   125f8:	str	r6, [sp, #32]
   125fc:	ldr	lr, [sp, #100]	; 0x64
   12600:	add	r6, lr, r8, lsl #3
   12604:	mov	r8, #0
   12608:	cmp	r4, r6
   1260c:	str	r6, [sp, #60]	; 0x3c
   12610:	movwhi	r8, #1
   12614:	str	r8, [sp, #44]	; 0x2c
   12618:	ldr	r4, [sp, #80]	; 0x50
   1261c:	ldr	r8, [sp, #68]	; 0x44
   12620:	cmp	r4, r8
   12624:	mov	r4, #0
   12628:	movwcc	r4, #1
   1262c:	str	r4, [sp, #40]	; 0x28
   12630:	ldr	r4, [sp, #88]	; 0x58
   12634:	add	r4, lr, r4, lsl #3
   12638:	str	r4, [sp, #52]	; 0x34
   1263c:	ldr	r6, [sp, #56]	; 0x38
   12640:	cmp	r6, r4
   12644:	mov	r4, #0
   12648:	movwcc	r4, #1
   1264c:	str	r4, [sp, #56]	; 0x38
   12650:	ldr	r6, [sp, #92]	; 0x5c
   12654:	ldr	r4, [fp, #-76]	; 0xffffffb4
   12658:	add	lr, r6, r4, lsl #3
   1265c:	ldr	r4, [sp, #76]	; 0x4c
   12660:	cmp	r4, lr
   12664:	mov	r4, #0
   12668:	movwhi	r4, #1
   1266c:	str	r4, [sp, #48]	; 0x30
   12670:	ldr	r4, [sp, #60]	; 0x3c
   12674:	ldr	r6, [sp, #52]	; 0x34
   12678:	cmp	r4, r6
   1267c:	mov	r4, #0
   12680:	movwcc	r4, #1
   12684:	cmp	lr, r8
   12688:	mov	r8, #0
   1268c:	str	r4, [sp, #76]	; 0x4c
   12690:	movwcc	r8, #1
   12694:	ldr	r4, [sp, #80]	; 0x50
   12698:	cmp	r4, r6
   1269c:	ldr	r6, [sp, #64]	; 0x40
   126a0:	mov	r4, #0
   126a4:	movwcc	r4, #1
   126a8:	cmp	r6, lr
   126ac:	mov	r6, #0
   126b0:	movwhi	r6, #1
   126b4:	tst	r6, r4
   126b8:	bne	126fc <__assert_fail@plt+0x13dc>
   126bc:	ldr	r6, [sp, #76]	; 0x4c
   126c0:	mvn	lr, #15
   126c4:	ands	r4, r8, r6
   126c8:	bne	126fc <__assert_fail@plt+0x13dc>
   126cc:	ldr	r4, [sp, #56]	; 0x38
   126d0:	ldr	r6, [sp, #48]	; 0x30
   126d4:	sub	r8, fp, #32
   126d8:	ands	r4, r6, r4
   126dc:	bne	126fc <__assert_fail@plt+0x13dc>
   126e0:	ldr	r4, [sp, #44]	; 0x2c
   126e4:	ldr	r6, [sp, #40]	; 0x28
   126e8:	ands	r4, r6, r4
   126ec:	ldreq	r4, [sp, #36]	; 0x24
   126f0:	ldreq	r6, [sp, #32]
   126f4:	andseq	r4, r6, r4
   126f8:	beq	12724 <__assert_fail@plt+0x1404>
   126fc:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12700:	ldr	lr, [sp, #88]	; 0x58
   12704:	ldr	r4, [sp, #84]	; 0x54
   12708:	b	127a8 <__assert_fail@plt+0x1488>
   1270c:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12710:	mov	r2, r7
   12714:	b	127e4 <__assert_fail@plt+0x14c4>
   12718:	ldr	r8, [fp, #-92]	; 0xffffffa4
   1271c:	ldr	r4, [sp, #84]	; 0x54
   12720:	b	127a8 <__assert_fail@plt+0x1488>
   12724:	ldr	r6, [sp, #72]	; 0x48
   12728:	ldr	r4, [sp, #84]	; 0x54
   1272c:	bic	r6, r6, #1
   12730:	sub	r4, r4, r6
   12734:	str	r4, [sp, #84]	; 0x54
   12738:	str	r6, [sp, #80]	; 0x50
   1273c:	sub	r4, r7, #8
   12740:	subs	r6, r6, #2
   12744:	vld1.64	{d16-d17}, [r4]
   12748:	vst1.64	{d16-d17}, [r7], lr
   1274c:	ldrh	r4, [r2, #-1]
   12750:	strh	r4, [fp, #-32]	; 0xffffffe0
   12754:	vld1.16	{d16[0]}, [r8 :16]
   12758:	vmovl.u8	q8, d16
   1275c:	vmovl.u16	q8, d16
   12760:	vmov.32	r4, d16[1]
   12764:	strb	r4, [r2, #1]
   12768:	vmov.32	r4, d16[0]
   1276c:	strb	r4, [r2]
   12770:	sub	r2, r2, #2
   12774:	bne	1273c <__assert_fail@plt+0x141c>
   12778:	ldr	r2, [sp, #72]	; 0x48
   1277c:	ldr	r7, [sp, #80]	; 0x50
   12780:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12784:	ldr	lr, [sp, #88]	; 0x58
   12788:	ldr	r4, [sp, #84]	; 0x54
   1278c:	cmp	r2, r7
   12790:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12794:	bne	127a8 <__assert_fail@plt+0x1488>
   12798:	b	127e0 <__assert_fail@plt+0x14c0>
   1279c:	ldr	r8, [fp, #-92]	; 0xffffffa4
   127a0:	ldr	r4, [sp, #84]	; 0x54
   127a4:	mov	lr, r6
   127a8:	lsl	r2, r4, #3
   127ac:	add	r8, r8, r2
   127b0:	sub	r2, r2, #8
   127b4:	ldrd	r6, [r8, #16]
   127b8:	strd	r6, [r8, #24]
   127bc:	ldr	r8, [fp, #-92]	; 0xffffffa4
   127c0:	add	r7, r8, r4
   127c4:	sub	r4, r4, #1
   127c8:	ldrb	r6, [r7, #224]	; 0xe0
   127cc:	strb	r6, [r7, #225]	; 0xe1
   127d0:	ldr	r6, [fp, #-76]	; 0xffffffb4
   127d4:	cmp	r4, r6
   127d8:	bgt	127ac <__assert_fail@plt+0x148c>
   127dc:	mov	r2, r6
   127e0:	mov	r6, r3
   127e4:	add	r2, r2, #1
   127e8:	mov	r3, #1
   127ec:	add	r4, r8, r2, lsl #3
   127f0:	add	r2, r8, r2
   127f4:	str	r6, [r4, #16]
   127f8:	str	r5, [r4, #20]
   127fc:	strb	r3, [r2, #224]	; 0xe0
   12800:	add	r2, lr, #1
   12804:	strb	r2, [r8, #250]	; 0xfa
   12808:	b	123cc <__assert_fail@plt+0x10ac>
   1280c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   12810:	movw	r0, #80	; 0x50
   12814:	mov	r6, r3
   12818:	mov	r1, r9
   1281c:	movt	r0, #3
   12820:	add	r4, r4, #1
   12824:	ldrb	r0, [r0, r4]
   12828:	adds	r6, r3, r0
   1282c:	lsr	r0, r4, #2
   12830:	adc	r5, r5, #0
   12834:	cmp	r0, #166	; 0xa6
   12838:	bhi	12844 <__assert_fail@plt+0x1524>
   1283c:	orrs	r2, r7, r1
   12840:	bne	123a4 <__assert_fail@plt+0x1084>
   12844:	ldr	r7, [fp, #-92]	; 0xffffffa4
   12848:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1284c:	cmp	r0, #166	; 0xa6
   12850:	bls	128fc <__assert_fail@plt+0x15dc>
   12854:	b	14b60 <__assert_fail@plt+0x3840>
   12858:	mov	ip, #0
   1285c:	tst	r0, #1
   12860:	mov	r3, #0
   12864:	bne	1288c <__assert_fail@plt+0x156c>
   12868:	mov	r3, #0
   1286c:	mov	r7, r0
   12870:	mov	r6, r1
   12874:	lsrs	r6, r6, #1
   12878:	add	r3, r3, #1
   1287c:	rrx	r5, r7
   12880:	tst	r7, #2
   12884:	mov	r7, r5
   12888:	beq	12874 <__assert_fail@plt+0x1554>
   1288c:	lsr	r0, r0, r3
   12890:	rsb	r7, r3, #32
   12894:	add	r9, r3, #64	; 0x40
   12898:	orr	r8, r0, r1, lsl r7
   1289c:	sub	r0, r3, #32
   128a0:	cmp	r0, #0
   128a4:	lsrge	r8, r1, r0
   128a8:	lsr	r0, r1, r3
   128ac:	mov	r1, #0
   128b0:	movwge	r0, #0
   128b4:	str	r0, [fp, #-88]	; 0xffffffa8
   128b8:	ldr	r7, [fp, #-92]	; 0xffffffa4
   128bc:	mov	r0, #2
   128c0:	mov	r3, #0
   128c4:	str	r0, [r7, #16]
   128c8:	mov	r0, #1
   128cc:	str	r3, [r7, #20]
   128d0:	strb	r9, [r7, #224]	; 0xe0
   128d4:	strb	r0, [r7, #250]	; 0xfa
   128d8:	orrs	r0, ip, r1
   128dc:	bne	12364 <__assert_fail@plt+0x1044>
   128e0:	mov	r0, #0
   128e4:	mov	r6, #3
   128e8:	mov	r1, #0
   128ec:	mov	r5, #0
   128f0:	mov	r4, #0
   128f4:	str	r0, [fp, #-76]	; 0xffffffb4
   128f8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   128fc:	add	r0, r7, #8
   12900:	str	r1, [fp, #-100]	; 0xffffff9c
   12904:	str	r0, [sp, #100]	; 0x64
   12908:	add	r0, r7, #223	; 0xdf
   1290c:	str	r0, [sp, #96]	; 0x60
   12910:	add	r0, r7, #225	; 0xe1
   12914:	str	r0, [sp, #92]	; 0x5c
   12918:	add	r0, r7, #24
   1291c:	str	r0, [sp, #104]	; 0x68
   12920:	add	r0, r7, #226	; 0xe2
   12924:	str	r0, [sp, #88]	; 0x58
   12928:	add	r0, r7, #32
   1292c:	str	r0, [sp, #84]	; 0x54
   12930:	b	149b4 <__assert_fail@plt+0x3694>
   12934:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12938:	movw	r5, #80	; 0x50
   1293c:	movt	r5, #3
   12940:	add	r5, r5, r1
   12944:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12948:	ldrb	r5, [r5, #1]
   1294c:	adds	r1, r1, r5
   12950:	str	r1, [sp, #76]	; 0x4c
   12954:	ldr	r1, [fp, #-84]	; 0xffffffac
   12958:	adc	r1, r1, #0
   1295c:	str	r1, [fp, #-88]	; 0xffffffa8
   12960:	b	132dc <__assert_fail@plt+0x1fbc>
   12964:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12968:	movw	r5, #80	; 0x50
   1296c:	movt	r5, #3
   12970:	add	r5, r5, r1
   12974:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12978:	ldrb	r4, [r5, #1]
   1297c:	ldrb	r3, [r5, #2]
   12980:	adds	r4, r1, r4
   12984:	ldr	r1, [fp, #-84]	; 0xffffffac
   12988:	adc	r5, r1, #0
   1298c:	adds	r1, r4, r3
   12990:	str	r1, [sp, #76]	; 0x4c
   12994:	adc	r1, r5, #0
   12998:	str	r1, [fp, #-88]	; 0xffffffa8
   1299c:	b	136ac <__assert_fail@plt+0x238c>
   129a0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   129a4:	movw	r5, #80	; 0x50
   129a8:	movt	r5, #3
   129ac:	add	r5, r5, r1
   129b0:	ldrb	r4, [r5, #1]
   129b4:	ldrb	r3, [r5, #2]
   129b8:	ldrb	r1, [r5, #3]
   129bc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   129c0:	adds	r4, r5, r4
   129c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   129c8:	adc	r5, r5, #0
   129cc:	adds	r4, r4, r3
   129d0:	adc	r5, r5, #0
   129d4:	adds	r1, r4, r1
   129d8:	str	r1, [sp, #76]	; 0x4c
   129dc:	adc	r1, r5, #0
   129e0:	str	r1, [fp, #-88]	; 0xffffffa8
   129e4:	b	13a7c <__assert_fail@plt+0x275c>
   129e8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   129ec:	movw	r5, #80	; 0x50
   129f0:	movt	r5, #3
   129f4:	add	r5, r5, r1
   129f8:	ldrb	r4, [r5, #1]
   129fc:	ldrb	r3, [r5, #2]
   12a00:	ldrb	r1, [r5, #3]
   12a04:	ldrb	r8, [r5, #4]
   12a08:	ldr	r5, [fp, #-80]	; 0xffffffb0
   12a0c:	adds	r4, r5, r4
   12a10:	ldr	r5, [fp, #-84]	; 0xffffffac
   12a14:	adc	r5, r5, #0
   12a18:	adds	r4, r4, r3
   12a1c:	adc	r5, r5, #0
   12a20:	adds	r4, r4, r1
   12a24:	adc	r5, r5, #0
   12a28:	adds	r1, r4, r8
   12a2c:	str	r1, [sp, #76]	; 0x4c
   12a30:	adc	r1, r5, #0
   12a34:	str	r1, [fp, #-88]	; 0xffffffa8
   12a38:	b	13e4c <__assert_fail@plt+0x2b2c>
   12a3c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12a40:	movw	r5, #80	; 0x50
   12a44:	movt	r5, #3
   12a48:	add	r5, r5, r1
   12a4c:	ldrb	r1, [r5, #4]
   12a50:	ldrb	r4, [r5, #1]
   12a54:	ldrb	r3, [r5, #2]
   12a58:	ldrb	r8, [r5, #3]
   12a5c:	ldrb	r5, [r5, #5]
   12a60:	str	r1, [fp, #-88]	; 0xffffffa8
   12a64:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12a68:	adds	r4, r1, r4
   12a6c:	ldr	r1, [fp, #-84]	; 0xffffffac
   12a70:	adc	sl, r1, #0
   12a74:	adds	r4, r4, r3
   12a78:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12a7c:	adc	r1, sl, #0
   12a80:	adds	r4, r4, r8
   12a84:	adc	r1, r1, #0
   12a88:	adds	r4, r4, r3
   12a8c:	adc	r1, r1, #0
   12a90:	adds	r3, r4, r5
   12a94:	adc	r1, r1, #0
   12a98:	str	r3, [sp, #76]	; 0x4c
   12a9c:	str	r1, [fp, #-88]	; 0xffffffa8
   12aa0:	b	1421c <__assert_fail@plt+0x2efc>
   12aa4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12aa8:	movw	r5, #80	; 0x50
   12aac:	movt	r5, #3
   12ab0:	add	r5, r5, r1
   12ab4:	ldrb	r1, [r5, #4]
   12ab8:	ldrb	r4, [r5, #1]
   12abc:	ldrb	r3, [r5, #2]
   12ac0:	ldrb	r8, [r5, #3]
   12ac4:	str	r1, [fp, #-88]	; 0xffffffa8
   12ac8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12acc:	adds	r4, r1, r4
   12ad0:	ldr	r1, [fp, #-84]	; 0xffffffac
   12ad4:	adc	sl, r1, #0
   12ad8:	adds	r4, r4, r3
   12adc:	adc	r1, sl, #0
   12ae0:	adds	r4, r4, r8
   12ae4:	adc	r3, r1, #0
   12ae8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12aec:	adds	r1, r4, r1
   12af0:	ldrb	r4, [r5, #5]
   12af4:	ldrb	r5, [r5, #6]
   12af8:	adc	r3, r3, #0
   12afc:	adds	r4, r1, r4
   12b00:	adc	r1, r3, #0
   12b04:	adds	r3, r4, r5
   12b08:	adc	r1, r1, #0
   12b0c:	str	r3, [sp, #76]	; 0x4c
   12b10:	str	r1, [fp, #-88]	; 0xffffffa8
   12b14:	b	145ec <__assert_fail@plt+0x32cc>
   12b18:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b1c:	movw	r6, #80	; 0x50
   12b20:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12b24:	movt	r6, #3
   12b28:	add	r1, r6, r1
   12b2c:	ldrb	r6, [r1, #1]
   12b30:	ldrb	r5, [r1, #2]
   12b34:	ldrb	r8, [r1, #3]
   12b38:	ldrb	r3, [r1, #4]
   12b3c:	adds	r6, r4, r6
   12b40:	ldr	r4, [fp, #-84]	; 0xffffffac
   12b44:	adc	r4, r4, #0
   12b48:	adds	r5, r6, r5
   12b4c:	adc	r4, r4, #0
   12b50:	adds	r5, r5, r8
   12b54:	adc	r4, r4, #0
   12b58:	adds	r6, r5, r3
   12b5c:	adc	r5, r4, #0
   12b60:	ldrb	r4, [r1, #5]
   12b64:	adds	r6, r6, r4
   12b68:	ldrb	r4, [r1, #6]
   12b6c:	ldrb	r1, [r1, #7]
   12b70:	adc	r5, r5, #0
   12b74:	adds	r6, r6, r4
   12b78:	adc	r5, r5, #0
   12b7c:	adds	r9, r6, r1
   12b80:	adc	r1, r5, #0
   12b84:	str	r1, [sp, #80]	; 0x50
   12b88:	str	r2, [fp, #-88]	; 0xffffffa8
   12b8c:	mov	r8, r0
   12b90:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12b94:	ldrb	r6, [r0, #250]	; 0xfa
   12b98:	sub	r3, r6, #1
   12b9c:	cmp	r6, #0
   12ba0:	beq	12ec4 <__assert_fail@plt+0x1ba4>
   12ba4:	mov	r0, #8
   12ba8:	str	r6, [sp, #76]	; 0x4c
   12bac:	add	r2, r0, r6, lsl #3
   12bb0:	add	r0, r6, #223	; 0xdf
   12bb4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   12bb8:	ldr	r4, [r1, r2]!
   12bbc:	subs	r6, r9, r4
   12bc0:	ldr	r1, [r1, #4]
   12bc4:	ldr	r6, [sp, #80]	; 0x50
   12bc8:	sbcs	r6, r6, r1
   12bcc:	bcs	12bf0 <__assert_fail@plt+0x18d0>
   12bd0:	sub	r4, r0, #1
   12bd4:	sub	r0, r0, #224	; 0xe0
   12bd8:	sub	r2, r2, #8
   12bdc:	cmp	r0, #0
   12be0:	mov	r0, r4
   12be4:	bgt	12bb4 <__assert_fail@plt+0x1894>
   12be8:	sub	r1, r4, #224	; 0xe0
   12bec:	b	12c1c <__assert_fail@plt+0x18fc>
   12bf0:	eor	r2, r4, r9
   12bf4:	ldr	r4, [sp, #80]	; 0x50
   12bf8:	eor	r1, r1, r4
   12bfc:	orrs	r1, r2, r1
   12c00:	bne	12c18 <__assert_fail@plt+0x18f8>
   12c04:	ldr	r2, [fp, #-92]	; 0xffffffa4
   12c08:	ldrb	r1, [r2, r0]
   12c0c:	add	r1, r1, #1
   12c10:	strb	r1, [r2, r0]
   12c14:	b	12ef0 <__assert_fail@plt+0x1bd0>
   12c18:	sub	r1, r0, #224	; 0xe0
   12c1c:	ldr	r6, [sp, #76]	; 0x4c
   12c20:	cmp	r3, r1
   12c24:	ble	12c44 <__assert_fail@plt+0x1924>
   12c28:	mvn	r0, r1
   12c2c:	str	r9, [sp, #72]	; 0x48
   12c30:	add	r4, r0, r6
   12c34:	cmp	r4, #1
   12c38:	bhi	12c4c <__assert_fail@plt+0x192c>
   12c3c:	mov	r5, r1
   12c40:	b	12e84 <__assert_fail@plt+0x1b64>
   12c44:	mov	r3, r1
   12c48:	b	12ec4 <__assert_fail@plt+0x1ba4>
   12c4c:	sub	r0, r6, #2
   12c50:	str	r1, [sp, #68]	; 0x44
   12c54:	sub	r2, r0, r1
   12c58:	ldr	r1, [fp, #-92]	; 0xffffffa4
   12c5c:	mov	r0, #8
   12c60:	umull	r5, r0, r2, r0
   12c64:	cmp	r0, #0
   12c68:	str	r5, [sp, #56]	; 0x38
   12c6c:	movwne	r0, #1
   12c70:	add	r1, r1, r6, lsl #3
   12c74:	add	r1, r1, #16
   12c78:	cmp	r5, r1
   12c7c:	bhi	12e80 <__assert_fail@plt+0x1b60>
   12c80:	cmp	r0, #0
   12c84:	str	r1, [sp, #64]	; 0x40
   12c88:	bne	12e80 <__assert_fail@plt+0x1b60>
   12c8c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   12c90:	add	r1, r1, r6
   12c94:	add	r1, r1, #224	; 0xe0
   12c98:	cmp	r2, r1
   12c9c:	str	r1, [sp, #60]	; 0x3c
   12ca0:	bhi	12e80 <__assert_fail@plt+0x1b60>
   12ca4:	ldr	r1, [sp, #100]	; 0x64
   12ca8:	add	r9, r1, r6, lsl #3
   12cac:	ldr	r1, [sp, #56]	; 0x38
   12cb0:	cmp	r1, r9
   12cb4:	bhi	12e80 <__assert_fail@plt+0x1b60>
   12cb8:	cmp	r0, #0
   12cbc:	bne	12e80 <__assert_fail@plt+0x1b60>
   12cc0:	ldr	r0, [sp, #96]	; 0x60
   12cc4:	add	r0, r0, r6
   12cc8:	cmp	r2, r0
   12ccc:	bhi	12e80 <__assert_fail@plt+0x1b60>
   12cd0:	str	r4, [sp, #56]	; 0x38
   12cd4:	ldr	r1, [sp, #88]	; 0x58
   12cd8:	ldr	r4, [sp, #68]	; 0x44
   12cdc:	add	r5, r1, r4
   12ce0:	ldr	r1, [sp, #92]	; 0x5c
   12ce4:	add	r2, r1, r6
   12ce8:	add	r1, r1, r4
   12cec:	mov	r4, r5
   12cf0:	str	r2, [sp, #52]	; 0x34
   12cf4:	str	r1, [sp, #40]	; 0x28
   12cf8:	cmp	r1, r2
   12cfc:	mov	r1, #0
   12d00:	movwcc	r1, #1
   12d04:	str	r1, [sp, #24]
   12d08:	str	r5, [sp, #48]	; 0x30
   12d0c:	ldr	r1, [sp, #60]	; 0x3c
   12d10:	cmp	r5, r1
   12d14:	mov	r1, #0
   12d18:	movwcc	r1, #1
   12d1c:	str	r1, [sp, #20]
   12d20:	ldr	r5, [sp, #104]	; 0x68
   12d24:	ldr	r1, [sp, #68]	; 0x44
   12d28:	add	r1, r5, r1, lsl #3
   12d2c:	cmp	r2, r1
   12d30:	mov	r2, #0
   12d34:	str	r1, [sp, #44]	; 0x2c
   12d38:	movwhi	r2, #1
   12d3c:	str	r2, [sp, #32]
   12d40:	mov	r2, #0
   12d44:	ldr	r1, [sp, #64]	; 0x40
   12d48:	cmp	r4, r1
   12d4c:	add	r1, r5, r6, lsl #3
   12d50:	movwcc	r2, #1
   12d54:	str	r2, [sp, #28]
   12d58:	ldr	r2, [sp, #40]	; 0x28
   12d5c:	cmp	r2, r1
   12d60:	mov	r2, #0
   12d64:	movwcc	r2, #1
   12d68:	str	r2, [sp, #40]	; 0x28
   12d6c:	ldr	r2, [sp, #84]	; 0x54
   12d70:	ldr	r4, [sp, #68]	; 0x44
   12d74:	add	r2, r2, r4, lsl #3
   12d78:	ldr	r4, [sp, #60]	; 0x3c
   12d7c:	cmp	r4, r2
   12d80:	mov	r4, #0
   12d84:	movwhi	r4, #1
   12d88:	str	r4, [sp, #36]	; 0x24
   12d8c:	ldr	r4, [sp, #44]	; 0x2c
   12d90:	cmp	r4, r1
   12d94:	mov	r4, #0
   12d98:	movwcc	r4, #1
   12d9c:	str	r4, [sp, #60]	; 0x3c
   12da0:	ldr	r4, [sp, #64]	; 0x40
   12da4:	ldr	r5, [sp, #48]	; 0x30
   12da8:	ldr	r6, [sp, #52]	; 0x34
   12dac:	cmp	r2, r4
   12db0:	mov	r4, #0
   12db4:	movwcc	r4, #1
   12db8:	cmp	r5, r1
   12dbc:	mov	r1, #0
   12dc0:	movwcc	r1, #1
   12dc4:	cmp	r6, r2
   12dc8:	mov	r2, #0
   12dcc:	movwhi	r2, #1
   12dd0:	tst	r2, r1
   12dd4:	ldreq	r1, [sp, #60]	; 0x3c
   12dd8:	andseq	r1, r4, r1
   12ddc:	bne	12e7c <__assert_fail@plt+0x1b5c>
   12de0:	ldr	r1, [sp, #40]	; 0x28
   12de4:	ldr	r2, [sp, #36]	; 0x24
   12de8:	ldr	r6, [sp, #76]	; 0x4c
   12dec:	ands	r1, r2, r1
   12df0:	ldr	r2, [sp, #56]	; 0x38
   12df4:	bne	12e80 <__assert_fail@plt+0x1b60>
   12df8:	ldr	r1, [sp, #32]
   12dfc:	ldr	r4, [sp, #28]
   12e00:	ldr	r5, [sp, #68]	; 0x44
   12e04:	ands	r1, r4, r1
   12e08:	ldreq	r1, [sp, #24]
   12e0c:	ldreq	r4, [sp, #20]
   12e10:	andseq	r1, r4, r1
   12e14:	bne	12e84 <__assert_fail@plt+0x1b64>
   12e18:	bic	r2, r2, #1
   12e1c:	sub	r4, fp, #64	; 0x40
   12e20:	sub	r3, r3, r2
   12e24:	str	r2, [sp, #64]	; 0x40
   12e28:	sub	r1, r9, #8
   12e2c:	subs	r2, r2, #2
   12e30:	vld1.64	{d16-d17}, [r1]
   12e34:	mvn	r1, #15
   12e38:	vst1.64	{d16-d17}, [r9], r1
   12e3c:	ldrh	r1, [r0, #-1]
   12e40:	strh	r1, [fp, #-64]	; 0xffffffc0
   12e44:	vld1.16	{d16[0]}, [r4 :16]
   12e48:	vmovl.u8	q8, d16
   12e4c:	vmovl.u16	q8, d16
   12e50:	vmov.32	r1, d16[1]
   12e54:	strb	r1, [r0, #1]
   12e58:	vmov.32	r1, d16[0]
   12e5c:	strb	r1, [r0]
   12e60:	sub	r0, r0, #2
   12e64:	bne	12e28 <__assert_fail@plt+0x1b08>
   12e68:	ldr	r0, [sp, #56]	; 0x38
   12e6c:	ldr	r1, [sp, #64]	; 0x40
   12e70:	cmp	r0, r1
   12e74:	bne	12e84 <__assert_fail@plt+0x1b64>
   12e78:	b	12ebc <__assert_fail@plt+0x1b9c>
   12e7c:	ldr	r6, [sp, #76]	; 0x4c
   12e80:	ldr	r5, [sp, #68]	; 0x44
   12e84:	ldr	r4, [fp, #-92]	; 0xffffffa4
   12e88:	lsl	r0, r3, #3
   12e8c:	add	r1, r4, r0
   12e90:	sub	r0, r0, #8
   12e94:	ldr	r2, [r1, #16]
   12e98:	ldr	r9, [r1, #20]
   12e9c:	str	r2, [r1, #24]
   12ea0:	str	r9, [r1, #28]
   12ea4:	add	r1, r4, r3
   12ea8:	sub	r3, r3, #1
   12eac:	ldrb	r2, [r1, #224]	; 0xe0
   12eb0:	cmp	r3, r5
   12eb4:	strb	r2, [r1, #225]	; 0xe1
   12eb8:	bgt	12e8c <__assert_fail@plt+0x1b6c>
   12ebc:	ldr	r9, [sp, #72]	; 0x48
   12ec0:	mov	r3, r5
   12ec4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   12ec8:	add	r0, r3, #1
   12ecc:	ldr	r3, [sp, #80]	; 0x50
   12ed0:	add	r1, r2, r0, lsl #3
   12ed4:	add	r0, r2, r0
   12ed8:	str	r9, [r1, #16]
   12edc:	str	r3, [r1, #20]
   12ee0:	mov	r1, #1
   12ee4:	strb	r1, [r0, #224]	; 0xe0
   12ee8:	add	r0, r6, #1
   12eec:	strb	r0, [r2, #250]	; 0xfa
   12ef0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12ef4:	umull	r0, r1, r8, lr
   12ef8:	mla	r1, r8, ip, r1
   12efc:	mla	r2, r3, lr, r1
   12f00:	subs	r1, sl, r0
   12f04:	sbcs	r1, r7, r2
   12f08:	bcc	14b10 <__assert_fail@plt+0x37f0>
   12f0c:	b	12b88 <__assert_fail@plt+0x1868>
   12f10:	cmp	r5, #0
   12f14:	str	r4, [sp, #68]	; 0x44
   12f18:	bne	13230 <__assert_fail@plt+0x1f10>
   12f1c:	ldr	r1, [sp, #96]	; 0x60
   12f20:	ldr	r4, [sp, #80]	; 0x50
   12f24:	add	lr, r1, r4
   12f28:	ldr	r1, [sp, #72]	; 0x48
   12f2c:	cmp	r1, lr
   12f30:	bhi	13230 <__assert_fail@plt+0x1f10>
   12f34:	ldr	r1, [sp, #88]	; 0x58
   12f38:	ldr	r5, [fp, #-88]	; 0xffffffa8
   12f3c:	add	r1, r1, r5
   12f40:	str	r1, [sp, #64]	; 0x40
   12f44:	ldr	r1, [sp, #92]	; 0x5c
   12f48:	add	r8, r1, r4
   12f4c:	add	r1, r1, r5
   12f50:	str	r8, [sp, #72]	; 0x48
   12f54:	str	r1, [sp, #48]	; 0x30
   12f58:	cmp	r1, r8
   12f5c:	mov	r1, #0
   12f60:	movwcc	r1, #1
   12f64:	str	r1, [sp, #24]
   12f68:	ldr	r4, [sp, #64]	; 0x40
   12f6c:	ldr	r1, [sp, #68]	; 0x44
   12f70:	cmp	r4, r1
   12f74:	mov	r1, #0
   12f78:	movwcc	r1, #1
   12f7c:	str	r1, [sp, #20]
   12f80:	ldr	r1, [sp, #104]	; 0x68
   12f84:	add	r1, r1, r5, lsl #3
   12f88:	str	r1, [sp, #60]	; 0x3c
   12f8c:	ldr	r1, [sp, #72]	; 0x48
   12f90:	ldr	r8, [sp, #60]	; 0x3c
   12f94:	cmp	r1, r8
   12f98:	mov	r1, #0
   12f9c:	movwhi	r1, #1
   12fa0:	str	r1, [sp, #32]
   12fa4:	mov	r1, #0
   12fa8:	ldr	r8, [sp, #56]	; 0x38
   12fac:	cmp	r4, r8
   12fb0:	movwcc	r1, #1
   12fb4:	str	r1, [sp, #28]
   12fb8:	ldr	r1, [sp, #80]	; 0x50
   12fbc:	ldr	r4, [sp, #104]	; 0x68
   12fc0:	add	r4, r4, r1, lsl #3
   12fc4:	str	r4, [sp, #44]	; 0x2c
   12fc8:	ldr	r1, [sp, #48]	; 0x30
   12fcc:	cmp	r1, r4
   12fd0:	mov	r1, #0
   12fd4:	movwcc	r1, #1
   12fd8:	str	r1, [sp, #40]	; 0x28
   12fdc:	ldr	r1, [sp, #84]	; 0x54
   12fe0:	add	r5, r1, r5, lsl #3
   12fe4:	str	r5, [sp, #48]	; 0x30
   12fe8:	ldr	r1, [sp, #68]	; 0x44
   12fec:	cmp	r1, r5
   12ff0:	mov	r1, #0
   12ff4:	movwhi	r1, #1
   12ff8:	str	r1, [sp, #36]	; 0x24
   12ffc:	ldr	r1, [sp, #60]	; 0x3c
   13000:	cmp	r1, r4
   13004:	mov	r1, #0
   13008:	mov	r4, #0
   1300c:	movwcc	r1, #1
   13010:	cmp	r5, r8
   13014:	mov	r8, #0
   13018:	str	r1, [sp, #68]	; 0x44
   1301c:	movwcc	r4, #1
   13020:	ldr	r1, [sp, #64]	; 0x40
   13024:	ldr	r5, [sp, #44]	; 0x2c
   13028:	cmp	r1, r5
   1302c:	ldr	r1, [sp, #72]	; 0x48
   13030:	ldr	r5, [sp, #48]	; 0x30
   13034:	movwcc	r8, #1
   13038:	cmp	r1, r5
   1303c:	mov	r5, #0
   13040:	movwhi	r5, #1
   13044:	tst	r5, r8
   13048:	bne	13100 <__assert_fail@plt+0x1de0>
   1304c:	ldr	r1, [sp, #68]	; 0x44
   13050:	ands	r5, r4, r1
   13054:	bne	13100 <__assert_fail@plt+0x1de0>
   13058:	ldr	r1, [sp, #40]	; 0x28
   1305c:	ldr	r4, [sp, #36]	; 0x24
   13060:	mvn	r8, #15
   13064:	ands	r5, r4, r1
   13068:	sub	r1, fp, #36	; 0x24
   1306c:	bne	13100 <__assert_fail@plt+0x1de0>
   13070:	ldr	r4, [sp, #32]
   13074:	ldr	r5, [sp, #28]
   13078:	ands	r5, r5, r4
   1307c:	bne	13100 <__assert_fail@plt+0x1de0>
   13080:	ldr	r4, [sp, #24]
   13084:	ldr	r5, [sp, #20]
   13088:	ands	r5, r5, r4
   1308c:	bne	13100 <__assert_fail@plt+0x1de0>
   13090:	ldr	r4, [sp, #52]	; 0x34
   13094:	bic	r5, r4, #1
   13098:	ldr	r4, [sp, #76]	; 0x4c
   1309c:	sub	r4, r4, r5
   130a0:	str	r4, [sp, #76]	; 0x4c
   130a4:	str	r5, [sp, #72]	; 0x48
   130a8:	sub	r4, sl, #8
   130ac:	subs	r5, r5, #2
   130b0:	vld1.64	{d16-d17}, [r4]
   130b4:	vst1.64	{d16-d17}, [sl], r8
   130b8:	ldrh	r4, [lr, #-1]
   130bc:	strh	r4, [fp, #-36]	; 0xffffffdc
   130c0:	vld1.16	{d16[0]}, [r1 :16]
   130c4:	vmovl.u8	q8, d16
   130c8:	vmovl.u16	q8, d16
   130cc:	vmov.32	r4, d16[1]
   130d0:	strb	r4, [lr, #1]
   130d4:	vmov.32	r4, d16[0]
   130d8:	strb	r4, [lr]
   130dc:	sub	lr, lr, #2
   130e0:	bne	130a8 <__assert_fail@plt+0x1d88>
   130e4:	ldr	r1, [sp, #52]	; 0x34
   130e8:	ldr	r5, [sp, #72]	; 0x48
   130ec:	ldr	r8, [sp, #76]	; 0x4c
   130f0:	cmp	r1, r5
   130f4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   130f8:	bne	13230 <__assert_fail@plt+0x1f10>
   130fc:	b	13274 <__assert_fail@plt+0x1f54>
   13100:	ldr	r8, [sp, #76]	; 0x4c
   13104:	b	13230 <__assert_fail@plt+0x1f10>
   13108:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1310c:	ldrb	sl, [r1, #250]	; 0xfa
   13110:	sub	r1, sl, #1
   13114:	cmp	sl, #0
   13118:	beq	13278 <__assert_fail@plt+0x1f58>
   1311c:	str	r1, [sp, #76]	; 0x4c
   13120:	mov	r1, #8
   13124:	add	lr, sl, #223	; 0xdf
   13128:	str	sl, [sp, #80]	; 0x50
   1312c:	add	r4, r1, sl, lsl #3
   13130:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13134:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13138:	ldr	sl, [r5, r4]!
   1313c:	ldr	r8, [r5, #4]
   13140:	subs	r5, r1, sl
   13144:	ldr	r1, [fp, #-84]	; 0xffffffac
   13148:	sbcs	r5, r1, r8
   1314c:	bcs	13170 <__assert_fail@plt+0x1e50>
   13150:	sub	r5, lr, #224	; 0xe0
   13154:	sub	r8, lr, #1
   13158:	sub	r4, r4, #8
   1315c:	cmp	r5, #0
   13160:	mov	lr, r8
   13164:	bgt	13130 <__assert_fail@plt+0x1e10>
   13168:	sub	r1, r8, #224	; 0xe0
   1316c:	b	131a0 <__assert_fail@plt+0x1e80>
   13170:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13174:	eor	r4, sl, r1
   13178:	ldr	r1, [fp, #-84]	; 0xffffffac
   1317c:	eor	r5, r8, r1
   13180:	orrs	r4, r4, r5
   13184:	bne	1319c <__assert_fail@plt+0x1e7c>
   13188:	ldr	r4, [fp, #-92]	; 0xffffffa4
   1318c:	ldrb	r1, [r4, lr]
   13190:	add	r1, r1, #1
   13194:	strb	r1, [r4, lr]
   13198:	b	132a8 <__assert_fail@plt+0x1f88>
   1319c:	sub	r1, lr, #224	; 0xe0
   131a0:	ldr	r8, [sp, #76]	; 0x4c
   131a4:	ldr	sl, [sp, #80]	; 0x50
   131a8:	cmp	r8, r1
   131ac:	ble	13278 <__assert_fail@plt+0x1f58>
   131b0:	mvn	r5, r1
   131b4:	mov	r4, sl
   131b8:	str	r1, [fp, #-88]	; 0xffffffa8
   131bc:	add	sl, r5, sl
   131c0:	cmp	sl, #1
   131c4:	bls	13230 <__assert_fail@plt+0x1f10>
   131c8:	sub	r5, r4, #2
   131cc:	sub	r5, r5, r1
   131d0:	mov	r1, #8
   131d4:	str	r5, [sp, #72]	; 0x48
   131d8:	umull	lr, r5, r5, r1
   131dc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   131e0:	cmp	r5, #0
   131e4:	movwne	r5, #1
   131e8:	add	r4, r1, r4, lsl #3
   131ec:	add	r1, r4, #16
   131f0:	cmp	lr, r1
   131f4:	bhi	13230 <__assert_fail@plt+0x1f10>
   131f8:	cmp	r5, #0
   131fc:	str	r1, [sp, #56]	; 0x38
   13200:	bne	13230 <__assert_fail@plt+0x1f10>
   13204:	str	sl, [sp, #52]	; 0x34
   13208:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1320c:	ldr	sl, [sp, #80]	; 0x50
   13210:	add	r4, r1, sl
   13214:	ldr	r1, [sp, #72]	; 0x48
   13218:	add	r4, r4, #224	; 0xe0
   1321c:	cmp	r1, r4
   13220:	ldrls	r1, [sp, #100]	; 0x64
   13224:	addls	sl, r1, sl, lsl #3
   13228:	cmpls	lr, sl
   1322c:	bls	12f10 <__assert_fail@plt+0x1bf0>
   13230:	ldr	lr, [fp, #-92]	; 0xffffffa4
   13234:	lsl	r5, r8, #3
   13238:	add	r4, lr, r5
   1323c:	mov	sl, r8
   13240:	sub	r5, r5, #8
   13244:	ldr	r8, [r4, #16]
   13248:	ldr	r1, [r4, #20]
   1324c:	str	r8, [r4, #24]
   13250:	str	r1, [r4, #28]
   13254:	mov	r8, sl
   13258:	add	sl, lr, sl
   1325c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13260:	ldrb	r4, [sl, #224]	; 0xe0
   13264:	sub	r8, r8, #1
   13268:	cmp	r8, r1
   1326c:	strb	r4, [sl, #225]	; 0xe1
   13270:	bgt	13238 <__assert_fail@plt+0x1f18>
   13274:	ldr	sl, [sp, #80]	; 0x50
   13278:	ldr	r8, [fp, #-92]	; 0xffffffa4
   1327c:	add	lr, r1, #1
   13280:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13284:	ldr	r1, [fp, #-84]	; 0xffffffac
   13288:	add	r4, r8, lr, lsl #3
   1328c:	str	r5, [r4, #16]
   13290:	str	r1, [r4, #20]
   13294:	add	r5, r8, lr
   13298:	mov	r1, #1
   1329c:	strb	r1, [r5, #224]	; 0xe0
   132a0:	add	r5, sl, #1
   132a4:	strb	r5, [r8, #250]	; 0xfa
   132a8:	umull	r1, r5, r2, r0
   132ac:	mov	r8, r2
   132b0:	mla	r5, r2, ip, r5
   132b4:	mov	r2, r1
   132b8:	mla	r4, r6, r0, r5
   132bc:	subs	r5, r3, r1
   132c0:	sbcs	r5, r7, r4
   132c4:	mov	r5, r6
   132c8:	mov	r6, r4
   132cc:	bcc	149f4 <__assert_fail@plt+0x36d4>
   132d0:	b	13108 <__assert_fail@plt+0x1de8>
   132d4:	ldr	r3, [sp, #68]	; 0x44
   132d8:	b	13408 <__assert_fail@plt+0x20e8>
   132dc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   132e0:	ldrb	sl, [r1, #250]	; 0xfa
   132e4:	sub	r1, sl, #1
   132e8:	cmp	sl, #0
   132ec:	beq	13648 <__assert_fail@plt+0x2328>
   132f0:	str	r1, [sp, #68]	; 0x44
   132f4:	str	sl, [sp, #72]	; 0x48
   132f8:	mov	r1, #8
   132fc:	add	r8, sl, #223	; 0xdf
   13300:	ldr	r3, [sp, #76]	; 0x4c
   13304:	add	r5, r1, sl, lsl #3
   13308:	ldr	r4, [fp, #-92]	; 0xffffffa4
   1330c:	ldr	r1, [r4, r5]!
   13310:	ldr	sl, [r4, #4]
   13314:	subs	r4, r3, r1
   13318:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1331c:	sbcs	r4, r4, sl
   13320:	bcs	13348 <__assert_fail@plt+0x2028>
   13324:	sub	r4, r8, #224	; 0xe0
   13328:	sub	r1, r8, #1
   1332c:	sub	r5, r5, #8
   13330:	cmp	r4, #0
   13334:	mov	r8, r1
   13338:	bgt	13308 <__assert_fail@plt+0x1fe8>
   1333c:	mov	r4, r3
   13340:	sub	r1, r1, #224	; 0xe0
   13344:	b	13378 <__assert_fail@plt+0x2058>
   13348:	eor	r5, r1, r3
   1334c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13350:	eor	r4, sl, r1
   13354:	orrs	r5, r5, r4
   13358:	bne	13370 <__assert_fail@plt+0x2050>
   1335c:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13360:	ldrb	r1, [r5, r8]
   13364:	add	r1, r1, #1
   13368:	strb	r1, [r5, r8]
   1336c:	b	13678 <__assert_fail@plt+0x2358>
   13370:	mov	r4, r3
   13374:	sub	r1, r8, #224	; 0xe0
   13378:	ldr	r3, [sp, #68]	; 0x44
   1337c:	ldr	sl, [sp, #72]	; 0x48
   13380:	cmp	r3, r1
   13384:	ble	13450 <__assert_fail@plt+0x2130>
   13388:	mvn	r5, r1
   1338c:	str	r1, [sp, #80]	; 0x50
   13390:	add	r4, r5, sl
   13394:	cmp	r4, #1
   13398:	bls	13408 <__assert_fail@plt+0x20e8>
   1339c:	sub	r5, sl, #2
   133a0:	str	r4, [sp, #60]	; 0x3c
   133a4:	sub	sl, r5, r1
   133a8:	mov	r1, #8
   133ac:	ldr	r5, [sp, #72]	; 0x48
   133b0:	umull	r8, r4, sl, r1
   133b4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   133b8:	cmp	r4, #0
   133bc:	str	r8, [sp, #64]	; 0x40
   133c0:	movwne	r4, #1
   133c4:	add	r5, r1, r5, lsl #3
   133c8:	add	r1, r5, #16
   133cc:	cmp	r8, r1
   133d0:	bhi	13408 <__assert_fail@plt+0x20e8>
   133d4:	cmp	r4, #0
   133d8:	str	r1, [sp, #48]	; 0x30
   133dc:	bne	13408 <__assert_fail@plt+0x20e8>
   133e0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   133e4:	ldr	r8, [sp, #72]	; 0x48
   133e8:	add	r5, r1, r8
   133ec:	add	r5, r5, #224	; 0xe0
   133f0:	cmp	sl, r5
   133f4:	ldrls	r1, [sp, #100]	; 0x64
   133f8:	addls	r8, r1, r8, lsl #3
   133fc:	ldrls	r1, [sp, #64]	; 0x40
   13400:	cmpls	r1, r8
   13404:	bls	13458 <__assert_fail@plt+0x2138>
   13408:	ldr	sl, [fp, #-92]	; 0xffffffa4
   1340c:	lsl	r4, r3, #3
   13410:	add	r5, sl, r4
   13414:	sub	r4, r4, #8
   13418:	ldr	r8, [r5, #16]
   1341c:	ldr	r1, [r5, #20]
   13420:	str	r8, [r5, #24]
   13424:	str	r1, [r5, #28]
   13428:	add	r1, sl, r3
   1342c:	sub	r3, r3, #1
   13430:	ldrb	r5, [r1, #224]	; 0xe0
   13434:	strb	r5, [r1, #225]	; 0xe1
   13438:	ldr	r1, [sp, #80]	; 0x50
   1343c:	cmp	r3, r1
   13440:	bgt	13410 <__assert_fail@plt+0x20f0>
   13444:	ldr	r3, [sp, #76]	; 0x4c
   13448:	ldr	sl, [sp, #72]	; 0x48
   1344c:	b	1364c <__assert_fail@plt+0x232c>
   13450:	mov	r3, r4
   13454:	b	1364c <__assert_fail@plt+0x232c>
   13458:	cmp	r4, #0
   1345c:	str	r5, [sp, #64]	; 0x40
   13460:	bne	13408 <__assert_fail@plt+0x20e8>
   13464:	ldr	r1, [sp, #96]	; 0x60
   13468:	ldr	r5, [sp, #72]	; 0x48
   1346c:	add	r4, r1, r5
   13470:	cmp	sl, r4
   13474:	bhi	13408 <__assert_fail@plt+0x20e8>
   13478:	mov	r3, r5
   1347c:	ldr	r1, [sp, #88]	; 0x58
   13480:	ldr	r5, [sp, #80]	; 0x50
   13484:	add	sl, r1, r5
   13488:	ldr	r1, [sp, #92]	; 0x5c
   1348c:	add	r3, r1, r3
   13490:	add	r1, r1, r5
   13494:	str	r3, [sp, #56]	; 0x38
   13498:	cmp	r1, r3
   1349c:	str	r1, [sp, #40]	; 0x28
   134a0:	mov	r1, #0
   134a4:	mov	r3, sl
   134a8:	movwcc	r1, #1
   134ac:	str	r1, [sp, #16]
   134b0:	str	sl, [sp, #44]	; 0x2c
   134b4:	ldr	r1, [sp, #64]	; 0x40
   134b8:	cmp	sl, r1
   134bc:	mov	r1, #0
   134c0:	movwcc	r1, #1
   134c4:	str	r1, [sp, #12]
   134c8:	ldr	r1, [sp, #104]	; 0x68
   134cc:	add	r1, r1, r5, lsl #3
   134d0:	str	r1, [sp, #52]	; 0x34
   134d4:	ldr	r1, [sp, #56]	; 0x38
   134d8:	ldr	sl, [sp, #52]	; 0x34
   134dc:	cmp	r1, sl
   134e0:	mov	r1, #0
   134e4:	movwhi	r1, #1
   134e8:	str	r1, [sp, #24]
   134ec:	mov	r1, #0
   134f0:	ldr	sl, [sp, #48]	; 0x30
   134f4:	cmp	r3, sl
   134f8:	movwcc	r1, #1
   134fc:	str	r1, [sp, #20]
   13500:	ldr	r1, [sp, #72]	; 0x48
   13504:	ldr	r3, [sp, #104]	; 0x68
   13508:	add	r3, r3, r1, lsl #3
   1350c:	str	r3, [sp, #36]	; 0x24
   13510:	ldr	r1, [sp, #40]	; 0x28
   13514:	cmp	r1, r3
   13518:	mov	r1, #0
   1351c:	movwcc	r1, #1
   13520:	str	r1, [sp, #32]
   13524:	ldr	r1, [sp, #84]	; 0x54
   13528:	add	r5, r1, r5, lsl #3
   1352c:	str	r5, [sp, #40]	; 0x28
   13530:	ldr	r1, [sp, #64]	; 0x40
   13534:	cmp	r1, r5
   13538:	mov	r1, #0
   1353c:	movwhi	r1, #1
   13540:	str	r1, [sp, #28]
   13544:	ldr	r1, [sp, #52]	; 0x34
   13548:	cmp	r1, r3
   1354c:	mov	r1, #0
   13550:	movwcc	r1, #1
   13554:	cmp	r5, sl
   13558:	mov	sl, #0
   1355c:	str	r1, [sp, #64]	; 0x40
   13560:	mov	r1, #0
   13564:	ldr	r3, [sp, #44]	; 0x2c
   13568:	ldr	r5, [sp, #36]	; 0x24
   1356c:	movwcc	r1, #1
   13570:	cmp	r3, r5
   13574:	ldr	r3, [sp, #56]	; 0x38
   13578:	ldr	r5, [sp, #40]	; 0x28
   1357c:	movwcc	sl, #1
   13580:	cmp	r3, r5
   13584:	mov	r5, #0
   13588:	movwhi	r5, #1
   1358c:	tst	r5, sl
   13590:	bne	132d4 <__assert_fail@plt+0x1fb4>
   13594:	ldr	r3, [sp, #64]	; 0x40
   13598:	ands	r5, r1, r3
   1359c:	bne	132d4 <__assert_fail@plt+0x1fb4>
   135a0:	ldr	r1, [sp, #32]
   135a4:	ldr	r3, [sp, #28]
   135a8:	ands	r5, r3, r1
   135ac:	sub	r1, fp, #40	; 0x28
   135b0:	bne	132d4 <__assert_fail@plt+0x1fb4>
   135b4:	ldr	r3, [sp, #24]
   135b8:	ldr	r5, [sp, #20]
   135bc:	ands	r5, r5, r3
   135c0:	bne	132d4 <__assert_fail@plt+0x1fb4>
   135c4:	ldr	r5, [sp, #16]
   135c8:	ldr	r3, [sp, #12]
   135cc:	ands	r5, r3, r5
   135d0:	bne	132d4 <__assert_fail@plt+0x1fb4>
   135d4:	ldr	r5, [sp, #60]	; 0x3c
   135d8:	mvn	r3, #15
   135dc:	bic	sl, r5, #1
   135e0:	ldr	r5, [sp, #68]	; 0x44
   135e4:	sub	r5, r5, sl
   135e8:	str	r5, [sp, #68]	; 0x44
   135ec:	str	sl, [sp, #64]	; 0x40
   135f0:	sub	r5, r8, #8
   135f4:	subs	sl, sl, #2
   135f8:	vld1.64	{d16-d17}, [r5]
   135fc:	vst1.64	{d16-d17}, [r8], r3
   13600:	ldrh	r5, [r4, #-1]
   13604:	strh	r5, [fp, #-40]	; 0xffffffd8
   13608:	vld1.16	{d16[0]}, [r1 :16]
   1360c:	vmovl.u8	q8, d16
   13610:	vmovl.u16	q8, d16
   13614:	vmov.32	r5, d16[1]
   13618:	strb	r5, [r4, #1]
   1361c:	vmov.32	r5, d16[0]
   13620:	strb	r5, [r4]
   13624:	sub	r4, r4, #2
   13628:	bne	135f0 <__assert_fail@plt+0x22d0>
   1362c:	ldr	r1, [sp, #60]	; 0x3c
   13630:	ldr	r3, [sp, #64]	; 0x40
   13634:	ldr	sl, [sp, #72]	; 0x48
   13638:	cmp	r1, r3
   1363c:	ldr	r3, [sp, #68]	; 0x44
   13640:	ldr	r1, [sp, #80]	; 0x50
   13644:	bne	13408 <__assert_fail@plt+0x20e8>
   13648:	ldr	r3, [sp, #76]	; 0x4c
   1364c:	add	r8, r1, #1
   13650:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13654:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13658:	add	r4, r1, r8, lsl #3
   1365c:	str	r3, [r4, #16]
   13660:	str	r5, [r4, #20]
   13664:	add	r5, r1, r8
   13668:	mov	r4, #1
   1366c:	strb	r4, [r5, #224]	; 0xe0
   13670:	add	r5, sl, #1
   13674:	strb	r5, [r1, #250]	; 0xfa
   13678:	umull	r1, r5, r7, r0
   1367c:	mov	r8, r7
   13680:	mov	r3, r6
   13684:	mla	r5, r7, lr, r5
   13688:	mov	r7, r1
   1368c:	mla	r4, r6, r0, r5
   13690:	subs	r5, r2, r1
   13694:	sbcs	r5, ip, r4
   13698:	mov	r6, r4
   1369c:	bcc	14a20 <__assert_fail@plt+0x3700>
   136a0:	b	132dc <__assert_fail@plt+0x1fbc>
   136a4:	ldr	r3, [sp, #68]	; 0x44
   136a8:	b	137d8 <__assert_fail@plt+0x24b8>
   136ac:	ldr	r1, [fp, #-92]	; 0xffffffa4
   136b0:	ldrb	sl, [r1, #250]	; 0xfa
   136b4:	sub	r1, sl, #1
   136b8:	cmp	sl, #0
   136bc:	beq	13a18 <__assert_fail@plt+0x26f8>
   136c0:	str	r1, [sp, #68]	; 0x44
   136c4:	str	sl, [sp, #72]	; 0x48
   136c8:	mov	r1, #8
   136cc:	add	r8, sl, #223	; 0xdf
   136d0:	ldr	r3, [sp, #76]	; 0x4c
   136d4:	add	r5, r1, sl, lsl #3
   136d8:	ldr	r4, [fp, #-92]	; 0xffffffa4
   136dc:	ldr	r1, [r4, r5]!
   136e0:	ldr	sl, [r4, #4]
   136e4:	subs	r4, r3, r1
   136e8:	ldr	r4, [fp, #-88]	; 0xffffffa8
   136ec:	sbcs	r4, r4, sl
   136f0:	bcs	13718 <__assert_fail@plt+0x23f8>
   136f4:	sub	r4, r8, #224	; 0xe0
   136f8:	sub	r1, r8, #1
   136fc:	sub	r5, r5, #8
   13700:	cmp	r4, #0
   13704:	mov	r8, r1
   13708:	bgt	136d8 <__assert_fail@plt+0x23b8>
   1370c:	mov	r4, r3
   13710:	sub	r1, r1, #224	; 0xe0
   13714:	b	13748 <__assert_fail@plt+0x2428>
   13718:	eor	r5, r1, r3
   1371c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13720:	eor	r4, sl, r1
   13724:	orrs	r5, r5, r4
   13728:	bne	13740 <__assert_fail@plt+0x2420>
   1372c:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13730:	ldrb	r1, [r5, r8]
   13734:	add	r1, r1, #1
   13738:	strb	r1, [r5, r8]
   1373c:	b	13a48 <__assert_fail@plt+0x2728>
   13740:	mov	r4, r3
   13744:	sub	r1, r8, #224	; 0xe0
   13748:	ldr	r3, [sp, #68]	; 0x44
   1374c:	ldr	sl, [sp, #72]	; 0x48
   13750:	cmp	r3, r1
   13754:	ble	13820 <__assert_fail@plt+0x2500>
   13758:	mvn	r5, r1
   1375c:	str	r1, [sp, #80]	; 0x50
   13760:	add	r4, r5, sl
   13764:	cmp	r4, #1
   13768:	bls	137d8 <__assert_fail@plt+0x24b8>
   1376c:	sub	r5, sl, #2
   13770:	str	r4, [sp, #60]	; 0x3c
   13774:	sub	sl, r5, r1
   13778:	mov	r1, #8
   1377c:	ldr	r5, [sp, #72]	; 0x48
   13780:	umull	r8, r4, sl, r1
   13784:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13788:	cmp	r4, #0
   1378c:	str	r8, [sp, #64]	; 0x40
   13790:	movwne	r4, #1
   13794:	add	r5, r1, r5, lsl #3
   13798:	add	r1, r5, #16
   1379c:	cmp	r8, r1
   137a0:	bhi	137d8 <__assert_fail@plt+0x24b8>
   137a4:	cmp	r4, #0
   137a8:	str	r1, [sp, #48]	; 0x30
   137ac:	bne	137d8 <__assert_fail@plt+0x24b8>
   137b0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   137b4:	ldr	r8, [sp, #72]	; 0x48
   137b8:	add	r5, r1, r8
   137bc:	add	r5, r5, #224	; 0xe0
   137c0:	cmp	sl, r5
   137c4:	ldrls	r1, [sp, #100]	; 0x64
   137c8:	addls	r8, r1, r8, lsl #3
   137cc:	ldrls	r1, [sp, #64]	; 0x40
   137d0:	cmpls	r1, r8
   137d4:	bls	13828 <__assert_fail@plt+0x2508>
   137d8:	ldr	sl, [fp, #-92]	; 0xffffffa4
   137dc:	lsl	r4, r3, #3
   137e0:	add	r5, sl, r4
   137e4:	sub	r4, r4, #8
   137e8:	ldr	r8, [r5, #16]
   137ec:	ldr	r1, [r5, #20]
   137f0:	str	r8, [r5, #24]
   137f4:	str	r1, [r5, #28]
   137f8:	add	r1, sl, r3
   137fc:	sub	r3, r3, #1
   13800:	ldrb	r5, [r1, #224]	; 0xe0
   13804:	strb	r5, [r1, #225]	; 0xe1
   13808:	ldr	r1, [sp, #80]	; 0x50
   1380c:	cmp	r3, r1
   13810:	bgt	137e0 <__assert_fail@plt+0x24c0>
   13814:	ldr	r3, [sp, #76]	; 0x4c
   13818:	ldr	sl, [sp, #72]	; 0x48
   1381c:	b	13a1c <__assert_fail@plt+0x26fc>
   13820:	mov	r3, r4
   13824:	b	13a1c <__assert_fail@plt+0x26fc>
   13828:	cmp	r4, #0
   1382c:	str	r5, [sp, #64]	; 0x40
   13830:	bne	137d8 <__assert_fail@plt+0x24b8>
   13834:	ldr	r1, [sp, #96]	; 0x60
   13838:	ldr	r5, [sp, #72]	; 0x48
   1383c:	add	r4, r1, r5
   13840:	cmp	sl, r4
   13844:	bhi	137d8 <__assert_fail@plt+0x24b8>
   13848:	mov	r3, r5
   1384c:	ldr	r1, [sp, #88]	; 0x58
   13850:	ldr	r5, [sp, #80]	; 0x50
   13854:	add	sl, r1, r5
   13858:	ldr	r1, [sp, #92]	; 0x5c
   1385c:	add	r3, r1, r3
   13860:	add	r1, r1, r5
   13864:	str	r3, [sp, #56]	; 0x38
   13868:	cmp	r1, r3
   1386c:	str	r1, [sp, #40]	; 0x28
   13870:	mov	r1, #0
   13874:	mov	r3, sl
   13878:	movwcc	r1, #1
   1387c:	str	r1, [sp, #16]
   13880:	str	sl, [sp, #44]	; 0x2c
   13884:	ldr	r1, [sp, #64]	; 0x40
   13888:	cmp	sl, r1
   1388c:	mov	r1, #0
   13890:	movwcc	r1, #1
   13894:	str	r1, [sp, #12]
   13898:	ldr	r1, [sp, #104]	; 0x68
   1389c:	add	r1, r1, r5, lsl #3
   138a0:	str	r1, [sp, #52]	; 0x34
   138a4:	ldr	r1, [sp, #56]	; 0x38
   138a8:	ldr	sl, [sp, #52]	; 0x34
   138ac:	cmp	r1, sl
   138b0:	mov	r1, #0
   138b4:	movwhi	r1, #1
   138b8:	str	r1, [sp, #24]
   138bc:	mov	r1, #0
   138c0:	ldr	sl, [sp, #48]	; 0x30
   138c4:	cmp	r3, sl
   138c8:	movwcc	r1, #1
   138cc:	str	r1, [sp, #20]
   138d0:	ldr	r1, [sp, #72]	; 0x48
   138d4:	ldr	r3, [sp, #104]	; 0x68
   138d8:	add	r3, r3, r1, lsl #3
   138dc:	str	r3, [sp, #36]	; 0x24
   138e0:	ldr	r1, [sp, #40]	; 0x28
   138e4:	cmp	r1, r3
   138e8:	mov	r1, #0
   138ec:	movwcc	r1, #1
   138f0:	str	r1, [sp, #32]
   138f4:	ldr	r1, [sp, #84]	; 0x54
   138f8:	add	r5, r1, r5, lsl #3
   138fc:	str	r5, [sp, #40]	; 0x28
   13900:	ldr	r1, [sp, #64]	; 0x40
   13904:	cmp	r1, r5
   13908:	mov	r1, #0
   1390c:	movwhi	r1, #1
   13910:	str	r1, [sp, #28]
   13914:	ldr	r1, [sp, #52]	; 0x34
   13918:	cmp	r1, r3
   1391c:	mov	r1, #0
   13920:	movwcc	r1, #1
   13924:	cmp	r5, sl
   13928:	mov	sl, #0
   1392c:	str	r1, [sp, #64]	; 0x40
   13930:	mov	r1, #0
   13934:	ldr	r3, [sp, #44]	; 0x2c
   13938:	ldr	r5, [sp, #36]	; 0x24
   1393c:	movwcc	r1, #1
   13940:	cmp	r3, r5
   13944:	ldr	r3, [sp, #56]	; 0x38
   13948:	ldr	r5, [sp, #40]	; 0x28
   1394c:	movwcc	sl, #1
   13950:	cmp	r3, r5
   13954:	mov	r5, #0
   13958:	movwhi	r5, #1
   1395c:	tst	r5, sl
   13960:	bne	136a4 <__assert_fail@plt+0x2384>
   13964:	ldr	r3, [sp, #64]	; 0x40
   13968:	ands	r5, r1, r3
   1396c:	bne	136a4 <__assert_fail@plt+0x2384>
   13970:	ldr	r1, [sp, #32]
   13974:	ldr	r3, [sp, #28]
   13978:	ands	r5, r3, r1
   1397c:	sub	r1, fp, #44	; 0x2c
   13980:	bne	136a4 <__assert_fail@plt+0x2384>
   13984:	ldr	r3, [sp, #24]
   13988:	ldr	r5, [sp, #20]
   1398c:	ands	r5, r5, r3
   13990:	bne	136a4 <__assert_fail@plt+0x2384>
   13994:	ldr	r5, [sp, #16]
   13998:	ldr	r3, [sp, #12]
   1399c:	ands	r5, r3, r5
   139a0:	bne	136a4 <__assert_fail@plt+0x2384>
   139a4:	ldr	r5, [sp, #60]	; 0x3c
   139a8:	mvn	r3, #15
   139ac:	bic	sl, r5, #1
   139b0:	ldr	r5, [sp, #68]	; 0x44
   139b4:	sub	r5, r5, sl
   139b8:	str	r5, [sp, #68]	; 0x44
   139bc:	str	sl, [sp, #64]	; 0x40
   139c0:	sub	r5, r8, #8
   139c4:	subs	sl, sl, #2
   139c8:	vld1.64	{d16-d17}, [r5]
   139cc:	vst1.64	{d16-d17}, [r8], r3
   139d0:	ldrh	r5, [r4, #-1]
   139d4:	strh	r5, [fp, #-44]	; 0xffffffd4
   139d8:	vld1.16	{d16[0]}, [r1 :16]
   139dc:	vmovl.u8	q8, d16
   139e0:	vmovl.u16	q8, d16
   139e4:	vmov.32	r5, d16[1]
   139e8:	strb	r5, [r4, #1]
   139ec:	vmov.32	r5, d16[0]
   139f0:	strb	r5, [r4]
   139f4:	sub	r4, r4, #2
   139f8:	bne	139c0 <__assert_fail@plt+0x26a0>
   139fc:	ldr	r1, [sp, #60]	; 0x3c
   13a00:	ldr	r3, [sp, #64]	; 0x40
   13a04:	ldr	sl, [sp, #72]	; 0x48
   13a08:	cmp	r1, r3
   13a0c:	ldr	r3, [sp, #68]	; 0x44
   13a10:	ldr	r1, [sp, #80]	; 0x50
   13a14:	bne	137d8 <__assert_fail@plt+0x24b8>
   13a18:	ldr	r3, [sp, #76]	; 0x4c
   13a1c:	add	r8, r1, #1
   13a20:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13a24:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13a28:	add	r4, r1, r8, lsl #3
   13a2c:	str	r3, [r4, #16]
   13a30:	str	r5, [r4, #20]
   13a34:	add	r5, r1, r8
   13a38:	mov	r4, #1
   13a3c:	strb	r4, [r5, #224]	; 0xe0
   13a40:	add	r5, sl, #1
   13a44:	strb	r5, [r1, #250]	; 0xfa
   13a48:	umull	r1, r5, r7, r0
   13a4c:	mov	r8, r7
   13a50:	mov	r3, r6
   13a54:	mla	r5, r7, lr, r5
   13a58:	mov	r7, r1
   13a5c:	mla	r4, r6, r0, r5
   13a60:	subs	r5, r2, r1
   13a64:	sbcs	r5, ip, r4
   13a68:	mov	r6, r4
   13a6c:	bcc	14a48 <__assert_fail@plt+0x3728>
   13a70:	b	136ac <__assert_fail@plt+0x238c>
   13a74:	ldr	r3, [sp, #68]	; 0x44
   13a78:	b	13ba8 <__assert_fail@plt+0x2888>
   13a7c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13a80:	ldrb	sl, [r1, #250]	; 0xfa
   13a84:	sub	r1, sl, #1
   13a88:	cmp	sl, #0
   13a8c:	beq	13de8 <__assert_fail@plt+0x2ac8>
   13a90:	str	r1, [sp, #68]	; 0x44
   13a94:	str	sl, [sp, #72]	; 0x48
   13a98:	mov	r1, #8
   13a9c:	add	r8, sl, #223	; 0xdf
   13aa0:	ldr	r3, [sp, #76]	; 0x4c
   13aa4:	add	r5, r1, sl, lsl #3
   13aa8:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13aac:	ldr	r1, [r4, r5]!
   13ab0:	ldr	sl, [r4, #4]
   13ab4:	subs	r4, r3, r1
   13ab8:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13abc:	sbcs	r4, r4, sl
   13ac0:	bcs	13ae8 <__assert_fail@plt+0x27c8>
   13ac4:	sub	r4, r8, #224	; 0xe0
   13ac8:	sub	r1, r8, #1
   13acc:	sub	r5, r5, #8
   13ad0:	cmp	r4, #0
   13ad4:	mov	r8, r1
   13ad8:	bgt	13aa8 <__assert_fail@plt+0x2788>
   13adc:	mov	r4, r3
   13ae0:	sub	r1, r1, #224	; 0xe0
   13ae4:	b	13b18 <__assert_fail@plt+0x27f8>
   13ae8:	eor	r5, r1, r3
   13aec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13af0:	eor	r4, sl, r1
   13af4:	orrs	r5, r5, r4
   13af8:	bne	13b10 <__assert_fail@plt+0x27f0>
   13afc:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13b00:	ldrb	r1, [r5, r8]
   13b04:	add	r1, r1, #1
   13b08:	strb	r1, [r5, r8]
   13b0c:	b	13e18 <__assert_fail@plt+0x2af8>
   13b10:	mov	r4, r3
   13b14:	sub	r1, r8, #224	; 0xe0
   13b18:	ldr	r3, [sp, #68]	; 0x44
   13b1c:	ldr	sl, [sp, #72]	; 0x48
   13b20:	cmp	r3, r1
   13b24:	ble	13bf0 <__assert_fail@plt+0x28d0>
   13b28:	mvn	r5, r1
   13b2c:	str	r1, [sp, #80]	; 0x50
   13b30:	add	r4, r5, sl
   13b34:	cmp	r4, #1
   13b38:	bls	13ba8 <__assert_fail@plt+0x2888>
   13b3c:	sub	r5, sl, #2
   13b40:	str	r4, [sp, #60]	; 0x3c
   13b44:	sub	sl, r5, r1
   13b48:	mov	r1, #8
   13b4c:	ldr	r5, [sp, #72]	; 0x48
   13b50:	umull	r8, r4, sl, r1
   13b54:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13b58:	cmp	r4, #0
   13b5c:	str	r8, [sp, #64]	; 0x40
   13b60:	movwne	r4, #1
   13b64:	add	r5, r1, r5, lsl #3
   13b68:	add	r1, r5, #16
   13b6c:	cmp	r8, r1
   13b70:	bhi	13ba8 <__assert_fail@plt+0x2888>
   13b74:	cmp	r4, #0
   13b78:	str	r1, [sp, #48]	; 0x30
   13b7c:	bne	13ba8 <__assert_fail@plt+0x2888>
   13b80:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13b84:	ldr	r8, [sp, #72]	; 0x48
   13b88:	add	r5, r1, r8
   13b8c:	add	r5, r5, #224	; 0xe0
   13b90:	cmp	sl, r5
   13b94:	ldrls	r1, [sp, #100]	; 0x64
   13b98:	addls	r8, r1, r8, lsl #3
   13b9c:	ldrls	r1, [sp, #64]	; 0x40
   13ba0:	cmpls	r1, r8
   13ba4:	bls	13bf8 <__assert_fail@plt+0x28d8>
   13ba8:	ldr	sl, [fp, #-92]	; 0xffffffa4
   13bac:	lsl	r4, r3, #3
   13bb0:	add	r5, sl, r4
   13bb4:	sub	r4, r4, #8
   13bb8:	ldr	r8, [r5, #16]
   13bbc:	ldr	r1, [r5, #20]
   13bc0:	str	r8, [r5, #24]
   13bc4:	str	r1, [r5, #28]
   13bc8:	add	r1, sl, r3
   13bcc:	sub	r3, r3, #1
   13bd0:	ldrb	r5, [r1, #224]	; 0xe0
   13bd4:	strb	r5, [r1, #225]	; 0xe1
   13bd8:	ldr	r1, [sp, #80]	; 0x50
   13bdc:	cmp	r3, r1
   13be0:	bgt	13bb0 <__assert_fail@plt+0x2890>
   13be4:	ldr	r3, [sp, #76]	; 0x4c
   13be8:	ldr	sl, [sp, #72]	; 0x48
   13bec:	b	13dec <__assert_fail@plt+0x2acc>
   13bf0:	mov	r3, r4
   13bf4:	b	13dec <__assert_fail@plt+0x2acc>
   13bf8:	cmp	r4, #0
   13bfc:	str	r5, [sp, #64]	; 0x40
   13c00:	bne	13ba8 <__assert_fail@plt+0x2888>
   13c04:	ldr	r1, [sp, #96]	; 0x60
   13c08:	ldr	r5, [sp, #72]	; 0x48
   13c0c:	add	r4, r1, r5
   13c10:	cmp	sl, r4
   13c14:	bhi	13ba8 <__assert_fail@plt+0x2888>
   13c18:	mov	r3, r5
   13c1c:	ldr	r1, [sp, #88]	; 0x58
   13c20:	ldr	r5, [sp, #80]	; 0x50
   13c24:	add	sl, r1, r5
   13c28:	ldr	r1, [sp, #92]	; 0x5c
   13c2c:	add	r3, r1, r3
   13c30:	add	r1, r1, r5
   13c34:	str	r3, [sp, #56]	; 0x38
   13c38:	cmp	r1, r3
   13c3c:	str	r1, [sp, #40]	; 0x28
   13c40:	mov	r1, #0
   13c44:	mov	r3, sl
   13c48:	movwcc	r1, #1
   13c4c:	str	r1, [sp, #16]
   13c50:	str	sl, [sp, #44]	; 0x2c
   13c54:	ldr	r1, [sp, #64]	; 0x40
   13c58:	cmp	sl, r1
   13c5c:	mov	r1, #0
   13c60:	movwcc	r1, #1
   13c64:	str	r1, [sp, #12]
   13c68:	ldr	r1, [sp, #104]	; 0x68
   13c6c:	add	r1, r1, r5, lsl #3
   13c70:	str	r1, [sp, #52]	; 0x34
   13c74:	ldr	r1, [sp, #56]	; 0x38
   13c78:	ldr	sl, [sp, #52]	; 0x34
   13c7c:	cmp	r1, sl
   13c80:	mov	r1, #0
   13c84:	movwhi	r1, #1
   13c88:	str	r1, [sp, #24]
   13c8c:	mov	r1, #0
   13c90:	ldr	sl, [sp, #48]	; 0x30
   13c94:	cmp	r3, sl
   13c98:	movwcc	r1, #1
   13c9c:	str	r1, [sp, #20]
   13ca0:	ldr	r1, [sp, #72]	; 0x48
   13ca4:	ldr	r3, [sp, #104]	; 0x68
   13ca8:	add	r3, r3, r1, lsl #3
   13cac:	str	r3, [sp, #36]	; 0x24
   13cb0:	ldr	r1, [sp, #40]	; 0x28
   13cb4:	cmp	r1, r3
   13cb8:	mov	r1, #0
   13cbc:	movwcc	r1, #1
   13cc0:	str	r1, [sp, #32]
   13cc4:	ldr	r1, [sp, #84]	; 0x54
   13cc8:	add	r5, r1, r5, lsl #3
   13ccc:	str	r5, [sp, #40]	; 0x28
   13cd0:	ldr	r1, [sp, #64]	; 0x40
   13cd4:	cmp	r1, r5
   13cd8:	mov	r1, #0
   13cdc:	movwhi	r1, #1
   13ce0:	str	r1, [sp, #28]
   13ce4:	ldr	r1, [sp, #52]	; 0x34
   13ce8:	cmp	r1, r3
   13cec:	mov	r1, #0
   13cf0:	movwcc	r1, #1
   13cf4:	cmp	r5, sl
   13cf8:	mov	sl, #0
   13cfc:	str	r1, [sp, #64]	; 0x40
   13d00:	mov	r1, #0
   13d04:	ldr	r3, [sp, #44]	; 0x2c
   13d08:	ldr	r5, [sp, #36]	; 0x24
   13d0c:	movwcc	r1, #1
   13d10:	cmp	r3, r5
   13d14:	ldr	r3, [sp, #56]	; 0x38
   13d18:	ldr	r5, [sp, #40]	; 0x28
   13d1c:	movwcc	sl, #1
   13d20:	cmp	r3, r5
   13d24:	mov	r5, #0
   13d28:	movwhi	r5, #1
   13d2c:	tst	r5, sl
   13d30:	bne	13a74 <__assert_fail@plt+0x2754>
   13d34:	ldr	r3, [sp, #64]	; 0x40
   13d38:	ands	r5, r1, r3
   13d3c:	bne	13a74 <__assert_fail@plt+0x2754>
   13d40:	ldr	r1, [sp, #32]
   13d44:	ldr	r3, [sp, #28]
   13d48:	ands	r5, r3, r1
   13d4c:	sub	r1, fp, #48	; 0x30
   13d50:	bne	13a74 <__assert_fail@plt+0x2754>
   13d54:	ldr	r3, [sp, #24]
   13d58:	ldr	r5, [sp, #20]
   13d5c:	ands	r5, r5, r3
   13d60:	bne	13a74 <__assert_fail@plt+0x2754>
   13d64:	ldr	r5, [sp, #16]
   13d68:	ldr	r3, [sp, #12]
   13d6c:	ands	r5, r3, r5
   13d70:	bne	13a74 <__assert_fail@plt+0x2754>
   13d74:	ldr	r5, [sp, #60]	; 0x3c
   13d78:	mvn	r3, #15
   13d7c:	bic	sl, r5, #1
   13d80:	ldr	r5, [sp, #68]	; 0x44
   13d84:	sub	r5, r5, sl
   13d88:	str	r5, [sp, #68]	; 0x44
   13d8c:	str	sl, [sp, #64]	; 0x40
   13d90:	sub	r5, r8, #8
   13d94:	subs	sl, sl, #2
   13d98:	vld1.64	{d16-d17}, [r5]
   13d9c:	vst1.64	{d16-d17}, [r8], r3
   13da0:	ldrh	r5, [r4, #-1]
   13da4:	strh	r5, [fp, #-48]	; 0xffffffd0
   13da8:	vld1.16	{d16[0]}, [r1 :16]
   13dac:	vmovl.u8	q8, d16
   13db0:	vmovl.u16	q8, d16
   13db4:	vmov.32	r5, d16[1]
   13db8:	strb	r5, [r4, #1]
   13dbc:	vmov.32	r5, d16[0]
   13dc0:	strb	r5, [r4]
   13dc4:	sub	r4, r4, #2
   13dc8:	bne	13d90 <__assert_fail@plt+0x2a70>
   13dcc:	ldr	r1, [sp, #60]	; 0x3c
   13dd0:	ldr	r3, [sp, #64]	; 0x40
   13dd4:	ldr	sl, [sp, #72]	; 0x48
   13dd8:	cmp	r1, r3
   13ddc:	ldr	r3, [sp, #68]	; 0x44
   13de0:	ldr	r1, [sp, #80]	; 0x50
   13de4:	bne	13ba8 <__assert_fail@plt+0x2888>
   13de8:	ldr	r3, [sp, #76]	; 0x4c
   13dec:	add	r8, r1, #1
   13df0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13df4:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13df8:	add	r4, r1, r8, lsl #3
   13dfc:	str	r3, [r4, #16]
   13e00:	str	r5, [r4, #20]
   13e04:	add	r5, r1, r8
   13e08:	mov	r4, #1
   13e0c:	strb	r4, [r5, #224]	; 0xe0
   13e10:	add	r5, sl, #1
   13e14:	strb	r5, [r1, #250]	; 0xfa
   13e18:	umull	r1, r5, r7, r0
   13e1c:	mov	r8, r7
   13e20:	mov	r3, r6
   13e24:	mla	r5, r7, lr, r5
   13e28:	mov	r7, r1
   13e2c:	mla	r4, r6, r0, r5
   13e30:	subs	r5, r2, r1
   13e34:	sbcs	r5, ip, r4
   13e38:	mov	r6, r4
   13e3c:	bcc	14a70 <__assert_fail@plt+0x3750>
   13e40:	b	13a7c <__assert_fail@plt+0x275c>
   13e44:	ldr	r3, [sp, #68]	; 0x44
   13e48:	b	13f78 <__assert_fail@plt+0x2c58>
   13e4c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13e50:	ldrb	sl, [r1, #250]	; 0xfa
   13e54:	sub	r1, sl, #1
   13e58:	cmp	sl, #0
   13e5c:	beq	141b8 <__assert_fail@plt+0x2e98>
   13e60:	str	r1, [sp, #68]	; 0x44
   13e64:	str	sl, [sp, #72]	; 0x48
   13e68:	mov	r1, #8
   13e6c:	add	r8, sl, #223	; 0xdf
   13e70:	ldr	r3, [sp, #76]	; 0x4c
   13e74:	add	r5, r1, sl, lsl #3
   13e78:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13e7c:	ldr	r1, [r4, r5]!
   13e80:	ldr	sl, [r4, #4]
   13e84:	subs	r4, r3, r1
   13e88:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13e8c:	sbcs	r4, r4, sl
   13e90:	bcs	13eb8 <__assert_fail@plt+0x2b98>
   13e94:	sub	r4, r8, #224	; 0xe0
   13e98:	sub	r1, r8, #1
   13e9c:	sub	r5, r5, #8
   13ea0:	cmp	r4, #0
   13ea4:	mov	r8, r1
   13ea8:	bgt	13e78 <__assert_fail@plt+0x2b58>
   13eac:	mov	r4, r3
   13eb0:	sub	r1, r1, #224	; 0xe0
   13eb4:	b	13ee8 <__assert_fail@plt+0x2bc8>
   13eb8:	eor	r5, r1, r3
   13ebc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13ec0:	eor	r4, sl, r1
   13ec4:	orrs	r5, r5, r4
   13ec8:	bne	13ee0 <__assert_fail@plt+0x2bc0>
   13ecc:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13ed0:	ldrb	r1, [r5, r8]
   13ed4:	add	r1, r1, #1
   13ed8:	strb	r1, [r5, r8]
   13edc:	b	141e8 <__assert_fail@plt+0x2ec8>
   13ee0:	mov	r4, r3
   13ee4:	sub	r1, r8, #224	; 0xe0
   13ee8:	ldr	r3, [sp, #68]	; 0x44
   13eec:	ldr	sl, [sp, #72]	; 0x48
   13ef0:	cmp	r3, r1
   13ef4:	ble	13fc0 <__assert_fail@plt+0x2ca0>
   13ef8:	mvn	r5, r1
   13efc:	str	r1, [sp, #80]	; 0x50
   13f00:	add	r4, r5, sl
   13f04:	cmp	r4, #1
   13f08:	bls	13f78 <__assert_fail@plt+0x2c58>
   13f0c:	sub	r5, sl, #2
   13f10:	str	r4, [sp, #60]	; 0x3c
   13f14:	sub	sl, r5, r1
   13f18:	mov	r1, #8
   13f1c:	ldr	r5, [sp, #72]	; 0x48
   13f20:	umull	r8, r4, sl, r1
   13f24:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13f28:	cmp	r4, #0
   13f2c:	str	r8, [sp, #64]	; 0x40
   13f30:	movwne	r4, #1
   13f34:	add	r5, r1, r5, lsl #3
   13f38:	add	r1, r5, #16
   13f3c:	cmp	r8, r1
   13f40:	bhi	13f78 <__assert_fail@plt+0x2c58>
   13f44:	cmp	r4, #0
   13f48:	str	r1, [sp, #48]	; 0x30
   13f4c:	bne	13f78 <__assert_fail@plt+0x2c58>
   13f50:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13f54:	ldr	r8, [sp, #72]	; 0x48
   13f58:	add	r5, r1, r8
   13f5c:	add	r5, r5, #224	; 0xe0
   13f60:	cmp	sl, r5
   13f64:	ldrls	r1, [sp, #100]	; 0x64
   13f68:	addls	r8, r1, r8, lsl #3
   13f6c:	ldrls	r1, [sp, #64]	; 0x40
   13f70:	cmpls	r1, r8
   13f74:	bls	13fc8 <__assert_fail@plt+0x2ca8>
   13f78:	ldr	sl, [fp, #-92]	; 0xffffffa4
   13f7c:	lsl	r4, r3, #3
   13f80:	add	r5, sl, r4
   13f84:	sub	r4, r4, #8
   13f88:	ldr	r8, [r5, #16]
   13f8c:	ldr	r1, [r5, #20]
   13f90:	str	r8, [r5, #24]
   13f94:	str	r1, [r5, #28]
   13f98:	add	r1, sl, r3
   13f9c:	sub	r3, r3, #1
   13fa0:	ldrb	r5, [r1, #224]	; 0xe0
   13fa4:	strb	r5, [r1, #225]	; 0xe1
   13fa8:	ldr	r1, [sp, #80]	; 0x50
   13fac:	cmp	r3, r1
   13fb0:	bgt	13f80 <__assert_fail@plt+0x2c60>
   13fb4:	ldr	r3, [sp, #76]	; 0x4c
   13fb8:	ldr	sl, [sp, #72]	; 0x48
   13fbc:	b	141bc <__assert_fail@plt+0x2e9c>
   13fc0:	mov	r3, r4
   13fc4:	b	141bc <__assert_fail@plt+0x2e9c>
   13fc8:	cmp	r4, #0
   13fcc:	str	r5, [sp, #64]	; 0x40
   13fd0:	bne	13f78 <__assert_fail@plt+0x2c58>
   13fd4:	ldr	r1, [sp, #96]	; 0x60
   13fd8:	ldr	r5, [sp, #72]	; 0x48
   13fdc:	add	r4, r1, r5
   13fe0:	cmp	sl, r4
   13fe4:	bhi	13f78 <__assert_fail@plt+0x2c58>
   13fe8:	mov	r3, r5
   13fec:	ldr	r1, [sp, #88]	; 0x58
   13ff0:	ldr	r5, [sp, #80]	; 0x50
   13ff4:	add	sl, r1, r5
   13ff8:	ldr	r1, [sp, #92]	; 0x5c
   13ffc:	add	r3, r1, r3
   14000:	add	r1, r1, r5
   14004:	str	r3, [sp, #56]	; 0x38
   14008:	cmp	r1, r3
   1400c:	str	r1, [sp, #40]	; 0x28
   14010:	mov	r1, #0
   14014:	mov	r3, sl
   14018:	movwcc	r1, #1
   1401c:	str	r1, [sp, #16]
   14020:	str	sl, [sp, #44]	; 0x2c
   14024:	ldr	r1, [sp, #64]	; 0x40
   14028:	cmp	sl, r1
   1402c:	mov	r1, #0
   14030:	movwcc	r1, #1
   14034:	str	r1, [sp, #12]
   14038:	ldr	r1, [sp, #104]	; 0x68
   1403c:	add	r1, r1, r5, lsl #3
   14040:	str	r1, [sp, #52]	; 0x34
   14044:	ldr	r1, [sp, #56]	; 0x38
   14048:	ldr	sl, [sp, #52]	; 0x34
   1404c:	cmp	r1, sl
   14050:	mov	r1, #0
   14054:	movwhi	r1, #1
   14058:	str	r1, [sp, #24]
   1405c:	mov	r1, #0
   14060:	ldr	sl, [sp, #48]	; 0x30
   14064:	cmp	r3, sl
   14068:	movwcc	r1, #1
   1406c:	str	r1, [sp, #20]
   14070:	ldr	r1, [sp, #72]	; 0x48
   14074:	ldr	r3, [sp, #104]	; 0x68
   14078:	add	r3, r3, r1, lsl #3
   1407c:	str	r3, [sp, #36]	; 0x24
   14080:	ldr	r1, [sp, #40]	; 0x28
   14084:	cmp	r1, r3
   14088:	mov	r1, #0
   1408c:	movwcc	r1, #1
   14090:	str	r1, [sp, #32]
   14094:	ldr	r1, [sp, #84]	; 0x54
   14098:	add	r5, r1, r5, lsl #3
   1409c:	str	r5, [sp, #40]	; 0x28
   140a0:	ldr	r1, [sp, #64]	; 0x40
   140a4:	cmp	r1, r5
   140a8:	mov	r1, #0
   140ac:	movwhi	r1, #1
   140b0:	str	r1, [sp, #28]
   140b4:	ldr	r1, [sp, #52]	; 0x34
   140b8:	cmp	r1, r3
   140bc:	mov	r1, #0
   140c0:	movwcc	r1, #1
   140c4:	cmp	r5, sl
   140c8:	mov	sl, #0
   140cc:	str	r1, [sp, #64]	; 0x40
   140d0:	mov	r1, #0
   140d4:	ldr	r3, [sp, #44]	; 0x2c
   140d8:	ldr	r5, [sp, #36]	; 0x24
   140dc:	movwcc	r1, #1
   140e0:	cmp	r3, r5
   140e4:	ldr	r3, [sp, #56]	; 0x38
   140e8:	ldr	r5, [sp, #40]	; 0x28
   140ec:	movwcc	sl, #1
   140f0:	cmp	r3, r5
   140f4:	mov	r5, #0
   140f8:	movwhi	r5, #1
   140fc:	tst	r5, sl
   14100:	bne	13e44 <__assert_fail@plt+0x2b24>
   14104:	ldr	r3, [sp, #64]	; 0x40
   14108:	ands	r5, r1, r3
   1410c:	bne	13e44 <__assert_fail@plt+0x2b24>
   14110:	ldr	r1, [sp, #32]
   14114:	ldr	r3, [sp, #28]
   14118:	ands	r5, r3, r1
   1411c:	sub	r1, fp, #52	; 0x34
   14120:	bne	13e44 <__assert_fail@plt+0x2b24>
   14124:	ldr	r3, [sp, #24]
   14128:	ldr	r5, [sp, #20]
   1412c:	ands	r5, r5, r3
   14130:	bne	13e44 <__assert_fail@plt+0x2b24>
   14134:	ldr	r5, [sp, #16]
   14138:	ldr	r3, [sp, #12]
   1413c:	ands	r5, r3, r5
   14140:	bne	13e44 <__assert_fail@plt+0x2b24>
   14144:	ldr	r5, [sp, #60]	; 0x3c
   14148:	mvn	r3, #15
   1414c:	bic	sl, r5, #1
   14150:	ldr	r5, [sp, #68]	; 0x44
   14154:	sub	r5, r5, sl
   14158:	str	r5, [sp, #68]	; 0x44
   1415c:	str	sl, [sp, #64]	; 0x40
   14160:	sub	r5, r8, #8
   14164:	subs	sl, sl, #2
   14168:	vld1.64	{d16-d17}, [r5]
   1416c:	vst1.64	{d16-d17}, [r8], r3
   14170:	ldrh	r5, [r4, #-1]
   14174:	strh	r5, [fp, #-52]	; 0xffffffcc
   14178:	vld1.16	{d16[0]}, [r1 :16]
   1417c:	vmovl.u8	q8, d16
   14180:	vmovl.u16	q8, d16
   14184:	vmov.32	r5, d16[1]
   14188:	strb	r5, [r4, #1]
   1418c:	vmov.32	r5, d16[0]
   14190:	strb	r5, [r4]
   14194:	sub	r4, r4, #2
   14198:	bne	14160 <__assert_fail@plt+0x2e40>
   1419c:	ldr	r1, [sp, #60]	; 0x3c
   141a0:	ldr	r3, [sp, #64]	; 0x40
   141a4:	ldr	sl, [sp, #72]	; 0x48
   141a8:	cmp	r1, r3
   141ac:	ldr	r3, [sp, #68]	; 0x44
   141b0:	ldr	r1, [sp, #80]	; 0x50
   141b4:	bne	13f78 <__assert_fail@plt+0x2c58>
   141b8:	ldr	r3, [sp, #76]	; 0x4c
   141bc:	add	r8, r1, #1
   141c0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   141c4:	ldr	r5, [fp, #-88]	; 0xffffffa8
   141c8:	add	r4, r1, r8, lsl #3
   141cc:	str	r3, [r4, #16]
   141d0:	str	r5, [r4, #20]
   141d4:	add	r5, r1, r8
   141d8:	mov	r4, #1
   141dc:	strb	r4, [r5, #224]	; 0xe0
   141e0:	add	r5, sl, #1
   141e4:	strb	r5, [r1, #250]	; 0xfa
   141e8:	umull	r1, r5, r7, lr
   141ec:	mov	r8, r7
   141f0:	mov	r3, r6
   141f4:	mla	r5, r7, r0, r5
   141f8:	mov	r7, r1
   141fc:	mla	r4, r6, lr, r5
   14200:	subs	r5, ip, r1
   14204:	sbcs	r5, r2, r4
   14208:	mov	r6, r4
   1420c:	bcc	14a98 <__assert_fail@plt+0x3778>
   14210:	b	13e4c <__assert_fail@plt+0x2b2c>
   14214:	ldr	r3, [sp, #68]	; 0x44
   14218:	b	14348 <__assert_fail@plt+0x3028>
   1421c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14220:	ldrb	sl, [r1, #250]	; 0xfa
   14224:	sub	r1, sl, #1
   14228:	cmp	sl, #0
   1422c:	beq	14588 <__assert_fail@plt+0x3268>
   14230:	str	r1, [sp, #68]	; 0x44
   14234:	str	sl, [sp, #72]	; 0x48
   14238:	mov	r1, #8
   1423c:	add	r8, sl, #223	; 0xdf
   14240:	ldr	r3, [sp, #76]	; 0x4c
   14244:	add	r5, r1, sl, lsl #3
   14248:	ldr	r4, [fp, #-92]	; 0xffffffa4
   1424c:	ldr	r1, [r4, r5]!
   14250:	ldr	sl, [r4, #4]
   14254:	subs	r4, r3, r1
   14258:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1425c:	sbcs	r4, r4, sl
   14260:	bcs	14288 <__assert_fail@plt+0x2f68>
   14264:	sub	r4, r8, #224	; 0xe0
   14268:	sub	r1, r8, #1
   1426c:	sub	r5, r5, #8
   14270:	cmp	r4, #0
   14274:	mov	r8, r1
   14278:	bgt	14248 <__assert_fail@plt+0x2f28>
   1427c:	mov	r4, r3
   14280:	sub	r1, r1, #224	; 0xe0
   14284:	b	142b8 <__assert_fail@plt+0x2f98>
   14288:	eor	r5, r1, r3
   1428c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14290:	eor	r4, sl, r1
   14294:	orrs	r5, r5, r4
   14298:	bne	142b0 <__assert_fail@plt+0x2f90>
   1429c:	ldr	r5, [fp, #-92]	; 0xffffffa4
   142a0:	ldrb	r1, [r5, r8]
   142a4:	add	r1, r1, #1
   142a8:	strb	r1, [r5, r8]
   142ac:	b	145b8 <__assert_fail@plt+0x3298>
   142b0:	mov	r4, r3
   142b4:	sub	r1, r8, #224	; 0xe0
   142b8:	ldr	r3, [sp, #68]	; 0x44
   142bc:	ldr	sl, [sp, #72]	; 0x48
   142c0:	cmp	r3, r1
   142c4:	ble	14390 <__assert_fail@plt+0x3070>
   142c8:	mvn	r5, r1
   142cc:	str	r1, [sp, #80]	; 0x50
   142d0:	add	r4, r5, sl
   142d4:	cmp	r4, #1
   142d8:	bls	14348 <__assert_fail@plt+0x3028>
   142dc:	sub	r5, sl, #2
   142e0:	str	r4, [sp, #60]	; 0x3c
   142e4:	sub	sl, r5, r1
   142e8:	mov	r1, #8
   142ec:	ldr	r5, [sp, #72]	; 0x48
   142f0:	umull	r8, r4, sl, r1
   142f4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   142f8:	cmp	r4, #0
   142fc:	str	r8, [sp, #64]	; 0x40
   14300:	movwne	r4, #1
   14304:	add	r5, r1, r5, lsl #3
   14308:	add	r1, r5, #16
   1430c:	cmp	r8, r1
   14310:	bhi	14348 <__assert_fail@plt+0x3028>
   14314:	cmp	r4, #0
   14318:	str	r1, [sp, #48]	; 0x30
   1431c:	bne	14348 <__assert_fail@plt+0x3028>
   14320:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14324:	ldr	r8, [sp, #72]	; 0x48
   14328:	add	r5, r1, r8
   1432c:	add	r5, r5, #224	; 0xe0
   14330:	cmp	sl, r5
   14334:	ldrls	r1, [sp, #100]	; 0x64
   14338:	addls	r8, r1, r8, lsl #3
   1433c:	ldrls	r1, [sp, #64]	; 0x40
   14340:	cmpls	r1, r8
   14344:	bls	14398 <__assert_fail@plt+0x3078>
   14348:	ldr	sl, [fp, #-92]	; 0xffffffa4
   1434c:	lsl	r4, r3, #3
   14350:	add	r5, sl, r4
   14354:	sub	r4, r4, #8
   14358:	ldr	r8, [r5, #16]
   1435c:	ldr	r1, [r5, #20]
   14360:	str	r8, [r5, #24]
   14364:	str	r1, [r5, #28]
   14368:	add	r1, sl, r3
   1436c:	sub	r3, r3, #1
   14370:	ldrb	r5, [r1, #224]	; 0xe0
   14374:	strb	r5, [r1, #225]	; 0xe1
   14378:	ldr	r1, [sp, #80]	; 0x50
   1437c:	cmp	r3, r1
   14380:	bgt	14350 <__assert_fail@plt+0x3030>
   14384:	ldr	r3, [sp, #76]	; 0x4c
   14388:	ldr	sl, [sp, #72]	; 0x48
   1438c:	b	1458c <__assert_fail@plt+0x326c>
   14390:	mov	r3, r4
   14394:	b	1458c <__assert_fail@plt+0x326c>
   14398:	cmp	r4, #0
   1439c:	str	r5, [sp, #64]	; 0x40
   143a0:	bne	14348 <__assert_fail@plt+0x3028>
   143a4:	ldr	r1, [sp, #96]	; 0x60
   143a8:	ldr	r5, [sp, #72]	; 0x48
   143ac:	add	r4, r1, r5
   143b0:	cmp	sl, r4
   143b4:	bhi	14348 <__assert_fail@plt+0x3028>
   143b8:	mov	r3, r5
   143bc:	ldr	r1, [sp, #88]	; 0x58
   143c0:	ldr	r5, [sp, #80]	; 0x50
   143c4:	add	sl, r1, r5
   143c8:	ldr	r1, [sp, #92]	; 0x5c
   143cc:	add	r3, r1, r3
   143d0:	add	r1, r1, r5
   143d4:	str	r3, [sp, #56]	; 0x38
   143d8:	cmp	r1, r3
   143dc:	str	r1, [sp, #40]	; 0x28
   143e0:	mov	r1, #0
   143e4:	mov	r3, sl
   143e8:	movwcc	r1, #1
   143ec:	str	r1, [sp, #16]
   143f0:	str	sl, [sp, #44]	; 0x2c
   143f4:	ldr	r1, [sp, #64]	; 0x40
   143f8:	cmp	sl, r1
   143fc:	mov	r1, #0
   14400:	movwcc	r1, #1
   14404:	str	r1, [sp, #12]
   14408:	ldr	r1, [sp, #104]	; 0x68
   1440c:	add	r1, r1, r5, lsl #3
   14410:	str	r1, [sp, #52]	; 0x34
   14414:	ldr	r1, [sp, #56]	; 0x38
   14418:	ldr	sl, [sp, #52]	; 0x34
   1441c:	cmp	r1, sl
   14420:	mov	r1, #0
   14424:	movwhi	r1, #1
   14428:	str	r1, [sp, #24]
   1442c:	mov	r1, #0
   14430:	ldr	sl, [sp, #48]	; 0x30
   14434:	cmp	r3, sl
   14438:	movwcc	r1, #1
   1443c:	str	r1, [sp, #20]
   14440:	ldr	r1, [sp, #72]	; 0x48
   14444:	ldr	r3, [sp, #104]	; 0x68
   14448:	add	r3, r3, r1, lsl #3
   1444c:	str	r3, [sp, #36]	; 0x24
   14450:	ldr	r1, [sp, #40]	; 0x28
   14454:	cmp	r1, r3
   14458:	mov	r1, #0
   1445c:	movwcc	r1, #1
   14460:	str	r1, [sp, #32]
   14464:	ldr	r1, [sp, #84]	; 0x54
   14468:	add	r5, r1, r5, lsl #3
   1446c:	str	r5, [sp, #40]	; 0x28
   14470:	ldr	r1, [sp, #64]	; 0x40
   14474:	cmp	r1, r5
   14478:	mov	r1, #0
   1447c:	movwhi	r1, #1
   14480:	str	r1, [sp, #28]
   14484:	ldr	r1, [sp, #52]	; 0x34
   14488:	cmp	r1, r3
   1448c:	mov	r1, #0
   14490:	movwcc	r1, #1
   14494:	cmp	r5, sl
   14498:	mov	sl, #0
   1449c:	str	r1, [sp, #64]	; 0x40
   144a0:	mov	r1, #0
   144a4:	ldr	r3, [sp, #44]	; 0x2c
   144a8:	ldr	r5, [sp, #36]	; 0x24
   144ac:	movwcc	r1, #1
   144b0:	cmp	r3, r5
   144b4:	ldr	r3, [sp, #56]	; 0x38
   144b8:	ldr	r5, [sp, #40]	; 0x28
   144bc:	movwcc	sl, #1
   144c0:	cmp	r3, r5
   144c4:	mov	r5, #0
   144c8:	movwhi	r5, #1
   144cc:	tst	r5, sl
   144d0:	bne	14214 <__assert_fail@plt+0x2ef4>
   144d4:	ldr	r3, [sp, #64]	; 0x40
   144d8:	ands	r5, r1, r3
   144dc:	bne	14214 <__assert_fail@plt+0x2ef4>
   144e0:	ldr	r1, [sp, #32]
   144e4:	ldr	r3, [sp, #28]
   144e8:	ands	r5, r3, r1
   144ec:	sub	r1, fp, #56	; 0x38
   144f0:	bne	14214 <__assert_fail@plt+0x2ef4>
   144f4:	ldr	r3, [sp, #24]
   144f8:	ldr	r5, [sp, #20]
   144fc:	ands	r5, r5, r3
   14500:	bne	14214 <__assert_fail@plt+0x2ef4>
   14504:	ldr	r5, [sp, #16]
   14508:	ldr	r3, [sp, #12]
   1450c:	ands	r5, r3, r5
   14510:	bne	14214 <__assert_fail@plt+0x2ef4>
   14514:	ldr	r5, [sp, #60]	; 0x3c
   14518:	mvn	r3, #15
   1451c:	bic	sl, r5, #1
   14520:	ldr	r5, [sp, #68]	; 0x44
   14524:	sub	r5, r5, sl
   14528:	str	r5, [sp, #68]	; 0x44
   1452c:	str	sl, [sp, #64]	; 0x40
   14530:	sub	r5, r8, #8
   14534:	subs	sl, sl, #2
   14538:	vld1.64	{d16-d17}, [r5]
   1453c:	vst1.64	{d16-d17}, [r8], r3
   14540:	ldrh	r5, [r4, #-1]
   14544:	strh	r5, [fp, #-56]	; 0xffffffc8
   14548:	vld1.16	{d16[0]}, [r1 :16]
   1454c:	vmovl.u8	q8, d16
   14550:	vmovl.u16	q8, d16
   14554:	vmov.32	r5, d16[1]
   14558:	strb	r5, [r4, #1]
   1455c:	vmov.32	r5, d16[0]
   14560:	strb	r5, [r4]
   14564:	sub	r4, r4, #2
   14568:	bne	14530 <__assert_fail@plt+0x3210>
   1456c:	ldr	r1, [sp, #60]	; 0x3c
   14570:	ldr	r3, [sp, #64]	; 0x40
   14574:	ldr	sl, [sp, #72]	; 0x48
   14578:	cmp	r1, r3
   1457c:	ldr	r3, [sp, #68]	; 0x44
   14580:	ldr	r1, [sp, #80]	; 0x50
   14584:	bne	14348 <__assert_fail@plt+0x3028>
   14588:	ldr	r3, [sp, #76]	; 0x4c
   1458c:	add	r8, r1, #1
   14590:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14594:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14598:	add	r4, r1, r8, lsl #3
   1459c:	str	r3, [r4, #16]
   145a0:	str	r5, [r4, #20]
   145a4:	add	r5, r1, r8
   145a8:	mov	r4, #1
   145ac:	strb	r4, [r5, #224]	; 0xe0
   145b0:	add	r5, sl, #1
   145b4:	strb	r5, [r1, #250]	; 0xfa
   145b8:	umull	r1, r5, r0, ip
   145bc:	mov	r8, r0
   145c0:	mov	r3, r2
   145c4:	mla	r5, r0, lr, r5
   145c8:	mov	r0, r1
   145cc:	mla	r4, r2, ip, r5
   145d0:	subs	r5, r7, r1
   145d4:	sbcs	r5, r6, r4
   145d8:	mov	r2, r4
   145dc:	bcc	14ac0 <__assert_fail@plt+0x37a0>
   145e0:	b	1421c <__assert_fail@plt+0x2efc>
   145e4:	ldr	r3, [sp, #68]	; 0x44
   145e8:	b	14718 <__assert_fail@plt+0x33f8>
   145ec:	ldr	r1, [fp, #-92]	; 0xffffffa4
   145f0:	ldrb	sl, [r1, #250]	; 0xfa
   145f4:	sub	r1, sl, #1
   145f8:	cmp	sl, #0
   145fc:	beq	14958 <__assert_fail@plt+0x3638>
   14600:	str	r1, [sp, #68]	; 0x44
   14604:	str	sl, [sp, #72]	; 0x48
   14608:	mov	r1, #8
   1460c:	add	r8, sl, #223	; 0xdf
   14610:	ldr	r3, [sp, #76]	; 0x4c
   14614:	add	r5, r1, sl, lsl #3
   14618:	ldr	r4, [fp, #-92]	; 0xffffffa4
   1461c:	ldr	r1, [r4, r5]!
   14620:	ldr	sl, [r4, #4]
   14624:	subs	r4, r3, r1
   14628:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1462c:	sbcs	r4, r4, sl
   14630:	bcs	14658 <__assert_fail@plt+0x3338>
   14634:	sub	r4, r8, #224	; 0xe0
   14638:	sub	r1, r8, #1
   1463c:	sub	r5, r5, #8
   14640:	cmp	r4, #0
   14644:	mov	r8, r1
   14648:	bgt	14618 <__assert_fail@plt+0x32f8>
   1464c:	mov	r4, r3
   14650:	sub	r1, r1, #224	; 0xe0
   14654:	b	14688 <__assert_fail@plt+0x3368>
   14658:	eor	r5, r1, r3
   1465c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14660:	eor	r4, sl, r1
   14664:	orrs	r5, r5, r4
   14668:	bne	14680 <__assert_fail@plt+0x3360>
   1466c:	ldr	r5, [fp, #-92]	; 0xffffffa4
   14670:	ldrb	r1, [r5, r8]
   14674:	add	r1, r1, #1
   14678:	strb	r1, [r5, r8]
   1467c:	b	14988 <__assert_fail@plt+0x3668>
   14680:	mov	r4, r3
   14684:	sub	r1, r8, #224	; 0xe0
   14688:	ldr	r3, [sp, #68]	; 0x44
   1468c:	ldr	sl, [sp, #72]	; 0x48
   14690:	cmp	r3, r1
   14694:	ble	14760 <__assert_fail@plt+0x3440>
   14698:	mvn	r5, r1
   1469c:	str	r1, [sp, #80]	; 0x50
   146a0:	add	r4, r5, sl
   146a4:	cmp	r4, #1
   146a8:	bls	14718 <__assert_fail@plt+0x33f8>
   146ac:	sub	r5, sl, #2
   146b0:	str	r4, [sp, #60]	; 0x3c
   146b4:	sub	sl, r5, r1
   146b8:	mov	r1, #8
   146bc:	ldr	r5, [sp, #72]	; 0x48
   146c0:	umull	r8, r4, sl, r1
   146c4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   146c8:	cmp	r4, #0
   146cc:	str	r8, [sp, #64]	; 0x40
   146d0:	movwne	r4, #1
   146d4:	add	r5, r1, r5, lsl #3
   146d8:	add	r1, r5, #16
   146dc:	cmp	r8, r1
   146e0:	bhi	14718 <__assert_fail@plt+0x33f8>
   146e4:	cmp	r4, #0
   146e8:	str	r1, [sp, #48]	; 0x30
   146ec:	bne	14718 <__assert_fail@plt+0x33f8>
   146f0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   146f4:	ldr	r8, [sp, #72]	; 0x48
   146f8:	add	r5, r1, r8
   146fc:	add	r5, r5, #224	; 0xe0
   14700:	cmp	sl, r5
   14704:	ldrls	r1, [sp, #100]	; 0x64
   14708:	addls	r8, r1, r8, lsl #3
   1470c:	ldrls	r1, [sp, #64]	; 0x40
   14710:	cmpls	r1, r8
   14714:	bls	14768 <__assert_fail@plt+0x3448>
   14718:	ldr	sl, [fp, #-92]	; 0xffffffa4
   1471c:	lsl	r4, r3, #3
   14720:	add	r5, sl, r4
   14724:	sub	r4, r4, #8
   14728:	ldr	r8, [r5, #16]
   1472c:	ldr	r1, [r5, #20]
   14730:	str	r8, [r5, #24]
   14734:	str	r1, [r5, #28]
   14738:	add	r1, sl, r3
   1473c:	sub	r3, r3, #1
   14740:	ldrb	r5, [r1, #224]	; 0xe0
   14744:	strb	r5, [r1, #225]	; 0xe1
   14748:	ldr	r1, [sp, #80]	; 0x50
   1474c:	cmp	r3, r1
   14750:	bgt	14720 <__assert_fail@plt+0x3400>
   14754:	ldr	r3, [sp, #76]	; 0x4c
   14758:	ldr	sl, [sp, #72]	; 0x48
   1475c:	b	1495c <__assert_fail@plt+0x363c>
   14760:	mov	r3, r4
   14764:	b	1495c <__assert_fail@plt+0x363c>
   14768:	cmp	r4, #0
   1476c:	str	r5, [sp, #64]	; 0x40
   14770:	bne	14718 <__assert_fail@plt+0x33f8>
   14774:	ldr	r1, [sp, #96]	; 0x60
   14778:	ldr	r5, [sp, #72]	; 0x48
   1477c:	add	r4, r1, r5
   14780:	cmp	sl, r4
   14784:	bhi	14718 <__assert_fail@plt+0x33f8>
   14788:	mov	r3, r5
   1478c:	ldr	r1, [sp, #88]	; 0x58
   14790:	ldr	r5, [sp, #80]	; 0x50
   14794:	add	sl, r1, r5
   14798:	ldr	r1, [sp, #92]	; 0x5c
   1479c:	add	r3, r1, r3
   147a0:	add	r1, r1, r5
   147a4:	str	r3, [sp, #56]	; 0x38
   147a8:	cmp	r1, r3
   147ac:	str	r1, [sp, #40]	; 0x28
   147b0:	mov	r1, #0
   147b4:	mov	r3, sl
   147b8:	movwcc	r1, #1
   147bc:	str	r1, [sp, #16]
   147c0:	str	sl, [sp, #44]	; 0x2c
   147c4:	ldr	r1, [sp, #64]	; 0x40
   147c8:	cmp	sl, r1
   147cc:	mov	r1, #0
   147d0:	movwcc	r1, #1
   147d4:	str	r1, [sp, #12]
   147d8:	ldr	r1, [sp, #104]	; 0x68
   147dc:	add	r1, r1, r5, lsl #3
   147e0:	str	r1, [sp, #52]	; 0x34
   147e4:	ldr	r1, [sp, #56]	; 0x38
   147e8:	ldr	sl, [sp, #52]	; 0x34
   147ec:	cmp	r1, sl
   147f0:	mov	r1, #0
   147f4:	movwhi	r1, #1
   147f8:	str	r1, [sp, #24]
   147fc:	mov	r1, #0
   14800:	ldr	sl, [sp, #48]	; 0x30
   14804:	cmp	r3, sl
   14808:	movwcc	r1, #1
   1480c:	str	r1, [sp, #20]
   14810:	ldr	r1, [sp, #72]	; 0x48
   14814:	ldr	r3, [sp, #104]	; 0x68
   14818:	add	r3, r3, r1, lsl #3
   1481c:	str	r3, [sp, #36]	; 0x24
   14820:	ldr	r1, [sp, #40]	; 0x28
   14824:	cmp	r1, r3
   14828:	mov	r1, #0
   1482c:	movwcc	r1, #1
   14830:	str	r1, [sp, #32]
   14834:	ldr	r1, [sp, #84]	; 0x54
   14838:	add	r5, r1, r5, lsl #3
   1483c:	str	r5, [sp, #40]	; 0x28
   14840:	ldr	r1, [sp, #64]	; 0x40
   14844:	cmp	r1, r5
   14848:	mov	r1, #0
   1484c:	movwhi	r1, #1
   14850:	str	r1, [sp, #28]
   14854:	ldr	r1, [sp, #52]	; 0x34
   14858:	cmp	r1, r3
   1485c:	mov	r1, #0
   14860:	movwcc	r1, #1
   14864:	cmp	r5, sl
   14868:	mov	sl, #0
   1486c:	str	r1, [sp, #64]	; 0x40
   14870:	mov	r1, #0
   14874:	ldr	r3, [sp, #44]	; 0x2c
   14878:	ldr	r5, [sp, #36]	; 0x24
   1487c:	movwcc	r1, #1
   14880:	cmp	r3, r5
   14884:	ldr	r3, [sp, #56]	; 0x38
   14888:	ldr	r5, [sp, #40]	; 0x28
   1488c:	movwcc	sl, #1
   14890:	cmp	r3, r5
   14894:	mov	r5, #0
   14898:	movwhi	r5, #1
   1489c:	tst	r5, sl
   148a0:	bne	145e4 <__assert_fail@plt+0x32c4>
   148a4:	ldr	r3, [sp, #64]	; 0x40
   148a8:	ands	r5, r1, r3
   148ac:	bne	145e4 <__assert_fail@plt+0x32c4>
   148b0:	ldr	r1, [sp, #32]
   148b4:	ldr	r3, [sp, #28]
   148b8:	ands	r5, r3, r1
   148bc:	sub	r1, fp, #60	; 0x3c
   148c0:	bne	145e4 <__assert_fail@plt+0x32c4>
   148c4:	ldr	r3, [sp, #24]
   148c8:	ldr	r5, [sp, #20]
   148cc:	ands	r5, r5, r3
   148d0:	bne	145e4 <__assert_fail@plt+0x32c4>
   148d4:	ldr	r5, [sp, #16]
   148d8:	ldr	r3, [sp, #12]
   148dc:	ands	r5, r3, r5
   148e0:	bne	145e4 <__assert_fail@plt+0x32c4>
   148e4:	ldr	r5, [sp, #60]	; 0x3c
   148e8:	mvn	r3, #15
   148ec:	bic	sl, r5, #1
   148f0:	ldr	r5, [sp, #68]	; 0x44
   148f4:	sub	r5, r5, sl
   148f8:	str	r5, [sp, #68]	; 0x44
   148fc:	str	sl, [sp, #64]	; 0x40
   14900:	sub	r5, r8, #8
   14904:	subs	sl, sl, #2
   14908:	vld1.64	{d16-d17}, [r5]
   1490c:	vst1.64	{d16-d17}, [r8], r3
   14910:	ldrh	r5, [r4, #-1]
   14914:	strh	r5, [fp, #-60]	; 0xffffffc4
   14918:	vld1.16	{d16[0]}, [r1 :16]
   1491c:	vmovl.u8	q8, d16
   14920:	vmovl.u16	q8, d16
   14924:	vmov.32	r5, d16[1]
   14928:	strb	r5, [r4, #1]
   1492c:	vmov.32	r5, d16[0]
   14930:	strb	r5, [r4]
   14934:	sub	r4, r4, #2
   14938:	bne	14900 <__assert_fail@plt+0x35e0>
   1493c:	ldr	r1, [sp, #60]	; 0x3c
   14940:	ldr	r3, [sp, #64]	; 0x40
   14944:	ldr	sl, [sp, #72]	; 0x48
   14948:	cmp	r1, r3
   1494c:	ldr	r3, [sp, #68]	; 0x44
   14950:	ldr	r1, [sp, #80]	; 0x50
   14954:	bne	14718 <__assert_fail@plt+0x33f8>
   14958:	ldr	r3, [sp, #76]	; 0x4c
   1495c:	add	r8, r1, #1
   14960:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14964:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14968:	add	r4, r1, r8, lsl #3
   1496c:	str	r3, [r4, #16]
   14970:	str	r5, [r4, #20]
   14974:	add	r5, r1, r8
   14978:	mov	r4, #1
   1497c:	strb	r4, [r5, #224]	; 0xe0
   14980:	add	r5, sl, #1
   14984:	strb	r5, [r1, #250]	; 0xfa
   14988:	umull	r1, r5, r0, ip
   1498c:	mov	r8, r0
   14990:	mov	r3, r2
   14994:	mla	r5, r0, r7, r5
   14998:	mov	r0, r1
   1499c:	mla	r4, r2, ip, r5
   149a0:	subs	r5, r6, r1
   149a4:	sbcs	r5, lr, r4
   149a8:	mov	r2, r4
   149ac:	bcc	14ae8 <__assert_fail@plt+0x37c8>
   149b0:	b	145ec <__assert_fail@plt+0x32cc>
   149b4:	movw	r9, #54816	; 0xd620
   149b8:	str	r5, [fp, #-84]	; 0xffffffac
   149bc:	str	r6, [fp, #-80]	; 0xffffffb0
   149c0:	mov	r5, r3
   149c4:	str	r4, [fp, #-72]	; 0xffffffb8
   149c8:	movt	r9, #2
   149cc:	ldr	r0, [r9, r4, lsl #4]!
   149d0:	umull	r2, r1, r0, r8
   149d4:	ldr	ip, [r9, #4]
   149d8:	ldr	r7, [r9, #12]
   149dc:	mla	r6, r0, r3, r1
   149e0:	ldr	r3, [r9, #8]
   149e4:	mla	r6, ip, r8, r6
   149e8:	subs	r4, r3, r2
   149ec:	sbcs	r4, r7, r6
   149f0:	bcs	13108 <__assert_fail@plt+0x1de8>
   149f4:	ldr	r0, [r9, #16]
   149f8:	ldr	lr, [r9, #20]
   149fc:	ldr	r2, [r9, #24]
   14a00:	ldr	ip, [r9, #28]
   14a04:	mov	r3, r5
   14a08:	umull	r7, r6, r0, r8
   14a0c:	mla	r6, r0, r5, r6
   14a10:	subs	r4, r2, r7
   14a14:	mla	r6, lr, r8, r6
   14a18:	sbcs	r4, ip, r6
   14a1c:	bcs	12934 <__assert_fail@plt+0x1614>
   14a20:	ldr	r0, [r9, #32]
   14a24:	ldr	lr, [r9, #36]	; 0x24
   14a28:	ldr	r2, [r9, #40]	; 0x28
   14a2c:	ldr	ip, [r9, #44]	; 0x2c
   14a30:	umull	r7, r6, r0, r8
   14a34:	mla	r6, r0, r3, r6
   14a38:	subs	r4, r2, r7
   14a3c:	mla	r6, lr, r8, r6
   14a40:	sbcs	r4, ip, r6
   14a44:	bcs	12964 <__assert_fail@plt+0x1644>
   14a48:	ldr	r0, [r9, #48]	; 0x30
   14a4c:	ldr	lr, [r9, #52]	; 0x34
   14a50:	ldr	r2, [r9, #56]	; 0x38
   14a54:	ldr	ip, [r9, #60]	; 0x3c
   14a58:	umull	r7, r6, r0, r8
   14a5c:	mla	r6, r0, r3, r6
   14a60:	subs	r4, r2, r7
   14a64:	mla	r6, lr, r8, r6
   14a68:	sbcs	r4, ip, r6
   14a6c:	bcs	129a0 <__assert_fail@plt+0x1680>
   14a70:	ldr	lr, [r9, #64]	; 0x40
   14a74:	ldr	r0, [r9, #68]	; 0x44
   14a78:	ldr	ip, [r9, #72]	; 0x48
   14a7c:	ldr	r2, [r9, #76]	; 0x4c
   14a80:	umull	r7, r6, lr, r8
   14a84:	mla	r6, lr, r3, r6
   14a88:	subs	r4, ip, r7
   14a8c:	mla	r6, r0, r8, r6
   14a90:	sbcs	r4, r2, r6
   14a94:	bcs	129e8 <__assert_fail@plt+0x16c8>
   14a98:	ldr	ip, [r9, #80]	; 0x50
   14a9c:	ldr	lr, [r9, #84]	; 0x54
   14aa0:	ldr	r7, [r9, #88]	; 0x58
   14aa4:	ldr	r6, [r9, #92]	; 0x5c
   14aa8:	umull	r0, r2, ip, r8
   14aac:	mla	r2, ip, r3, r2
   14ab0:	subs	r4, r7, r0
   14ab4:	mla	r2, lr, r8, r2
   14ab8:	sbcs	r4, r6, r2
   14abc:	bcs	12a3c <__assert_fail@plt+0x171c>
   14ac0:	ldr	ip, [r9, #96]	; 0x60
   14ac4:	ldr	r7, [r9, #100]	; 0x64
   14ac8:	ldr	r6, [r9, #104]	; 0x68
   14acc:	ldr	lr, [r9, #108]	; 0x6c
   14ad0:	umull	r0, r2, ip, r8
   14ad4:	mla	r2, ip, r3, r2
   14ad8:	subs	r4, r6, r0
   14adc:	mla	r2, r7, r8, r2
   14ae0:	sbcs	r4, lr, r2
   14ae4:	bcs	12aa4 <__assert_fail@plt+0x1784>
   14ae8:	ldr	lr, [r9, #112]	; 0x70
   14aec:	ldr	ip, [r9, #116]	; 0x74
   14af0:	ldr	sl, [r9, #120]	; 0x78
   14af4:	ldr	r7, [r9, #124]	; 0x7c
   14af8:	umull	r0, r1, lr, r8
   14afc:	mla	r1, lr, r3, r1
   14b00:	mla	r2, ip, r8, r1
   14b04:	subs	r1, sl, r0
   14b08:	sbcs	r1, r7, r2
   14b0c:	bcs	12b18 <__assert_fail@plt+0x17f8>
   14b10:	ldr	r4, [fp, #-72]	; 0xffffffb8
   14b14:	movw	r0, #755	; 0x2f3
   14b18:	ldr	r6, [fp, #-80]	; 0xffffffb0
   14b1c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14b20:	movt	r0, #3
   14b24:	ldrb	r0, [r0, r4]
   14b28:	add	r4, r4, #8
   14b2c:	adds	r6, r6, r0
   14b30:	lsr	r0, r4, #2
   14b34:	adc	r5, r5, #0
   14b38:	cmp	r0, #166	; 0xa6
   14b3c:	bhi	14b58 <__assert_fail@plt+0x3838>
   14b40:	umull	r0, r1, r6, r6
   14b44:	mla	r1, r6, r5, r1
   14b48:	subs	r0, r8, r0
   14b4c:	mla	r1, r6, r5, r1
   14b50:	sbcs	r0, r3, r1
   14b54:	bcs	149b4 <__assert_fail@plt+0x3694>
   14b58:	ldr	r7, [fp, #-92]	; 0xffffffa4
   14b5c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   14b60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b64:	ldr	r4, [fp, #-96]	; 0xffffffa0
   14b68:	orrs	r6, r0, r1
   14b6c:	bne	14b84 <__assert_fail@plt+0x3864>
   14b70:	subs	r0, r8, #2
   14b74:	sbcs	r0, r3, #0
   14b78:	bcs	14b84 <__assert_fail@plt+0x3864>
   14b7c:	sub	sp, fp, #28
   14b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b88:	mov	r2, r8
   14b8c:	mov	r9, r1
   14b90:	mov	sl, r3
   14b94:	bl	14f34 <__assert_fail@plt+0x3c14>
   14b98:	cmp	r0, #0
   14b9c:	beq	14be4 <__assert_fail@plt+0x38c4>
   14ba0:	cmp	r6, #0
   14ba4:	beq	14c10 <__assert_fail@plt+0x38f0>
   14ba8:	ldrd	r0, [r4]
   14bac:	orrs	r0, r0, r1
   14bb0:	stmeq	r7, {r8, sl}
   14bb4:	ldreq	r0, [fp, #-76]	; 0xffffffb4
   14bb8:	stmeq	r4, {r0, r9}
   14bbc:	subeq	sp, fp, #28
   14bc0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc4:	movw	r0, #54255	; 0xd3ef
   14bc8:	movw	r1, #53944	; 0xd2b8
   14bcc:	movw	r3, #54279	; 0xd407
   14bd0:	movw	r2, #558	; 0x22e
   14bd4:	movt	r0, #2
   14bd8:	movt	r1, #2
   14bdc:	movt	r3, #2
   14be0:	bl	11320 <__assert_fail@plt>
   14be4:	cmp	r6, #0
   14be8:	beq	14c68 <__assert_fail@plt+0x3948>
   14bec:	mov	r0, #1
   14bf0:	mov	r1, r9
   14bf4:	mov	r2, r8
   14bf8:	mov	r3, sl
   14bfc:	stm	sp, {r0, r7}
   14c00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14c04:	bl	16890 <__assert_fail@plt+0x5570>
   14c08:	sub	sp, fp, #28
   14c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c10:	ldrb	r0, [r7, #250]	; 0xfa
   14c14:	mov	r5, sl
   14c18:	sub	r1, r0, #1
   14c1c:	cmp	r0, #0
   14c20:	beq	14f08 <__assert_fail@plt+0x3be8>
   14c24:	mov	r2, #8
   14c28:	add	r7, r0, #223	; 0xdf
   14c2c:	add	r3, r2, r0, lsl #3
   14c30:	ldr	r6, [fp, #-92]	; 0xffffffa4
   14c34:	ldr	r2, [r6, r3]!
   14c38:	ldr	r6, [r6, #4]
   14c3c:	subs	r4, r8, r2
   14c40:	sbcs	r4, r5, r6
   14c44:	bcs	14c84 <__assert_fail@plt+0x3964>
   14c48:	sub	r2, r7, #1
   14c4c:	sub	r7, r7, #224	; 0xe0
   14c50:	sub	r3, r3, #8
   14c54:	cmp	r7, #0
   14c58:	mov	r7, r2
   14c5c:	bgt	14c30 <__assert_fail@plt+0x3910>
   14c60:	sub	r2, r2, #224	; 0xe0
   14c64:	b	14cb0 <__assert_fail@plt+0x3990>
   14c68:	mov	r0, r8
   14c6c:	mov	r1, sl
   14c70:	mov	r2, #1
   14c74:	mov	r3, r7
   14c78:	sub	sp, fp, #28
   14c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c80:	b	15934 <__assert_fail@plt+0x4614>
   14c84:	eor	r2, r2, r8
   14c88:	eor	r3, r6, r5
   14c8c:	orrs	r2, r2, r3
   14c90:	bne	14cac <__assert_fail@plt+0x398c>
   14c94:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14c98:	ldrb	r0, [r1, r7]
   14c9c:	add	r0, r0, #1
   14ca0:	strb	r0, [r1, r7]
   14ca4:	sub	sp, fp, #28
   14ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cac:	sub	r2, r7, #224	; 0xe0
   14cb0:	ldr	r7, [fp, #-92]	; 0xffffffa4
   14cb4:	cmp	r1, r2
   14cb8:	ble	14f04 <__assert_fail@plt+0x3be4>
   14cbc:	mvn	r3, r2
   14cc0:	add	r3, r3, r0
   14cc4:	cmp	r3, #1
   14cc8:	bls	14ec4 <__assert_fail@plt+0x3ba4>
   14ccc:	str	r3, [fp, #-72]	; 0xffffffb8
   14cd0:	sub	r3, r0, #2
   14cd4:	add	lr, r7, r0, lsl #3
   14cd8:	mov	r7, #8
   14cdc:	sub	r3, r3, r2
   14ce0:	add	r5, lr, #16
   14ce4:	umull	r9, r6, r3, r7
   14ce8:	cmp	r6, #0
   14cec:	movwne	r6, #1
   14cf0:	cmp	r9, r5
   14cf4:	bhi	14ec0 <__assert_fail@plt+0x3ba0>
   14cf8:	cmp	r6, #0
   14cfc:	bne	14ec0 <__assert_fail@plt+0x3ba0>
   14d00:	ldr	r4, [fp, #-92]	; 0xffffffa4
   14d04:	add	r4, r4, r0
   14d08:	add	r7, r4, #224	; 0xe0
   14d0c:	cmp	r3, r7
   14d10:	bhi	14ec0 <__assert_fail@plt+0x3ba0>
   14d14:	add	r7, lr, #8
   14d18:	cmp	r9, r7
   14d1c:	bhi	14ec0 <__assert_fail@plt+0x3ba0>
   14d20:	cmp	r6, #0
   14d24:	bne	14ec0 <__assert_fail@plt+0x3ba0>
   14d28:	add	r6, r4, #223	; 0xdf
   14d2c:	cmp	r3, r6
   14d30:	bhi	14ec0 <__assert_fail@plt+0x3ba0>
   14d34:	ldr	r9, [fp, #-92]	; 0xffffffa4
   14d38:	add	r4, lr, #24
   14d3c:	mov	lr, #0
   14d40:	add	r3, r9, r2, lsl #3
   14d44:	add	ip, r3, #32
   14d48:	add	r3, r3, #24
   14d4c:	str	ip, [fp, #-84]	; 0xffffffac
   14d50:	str	r4, [fp, #-80]	; 0xffffffb0
   14d54:	str	r3, [fp, #-88]	; 0xffffffa8
   14d58:	cmp	r3, r4
   14d5c:	mov	r3, #0
   14d60:	movwcc	r3, #1
   14d64:	cmp	ip, r5
   14d68:	add	ip, r9, #224	; 0xe0
   14d6c:	str	r3, [fp, #-96]	; 0xffffffa0
   14d70:	mov	r3, #0
   14d74:	movwcc	r3, #1
   14d78:	str	r3, [fp, #-100]	; 0xffffff9c
   14d7c:	add	r3, ip, r2
   14d80:	add	r4, r3, #2
   14d84:	add	r9, r3, #1
   14d88:	add	r3, ip, r0
   14d8c:	add	ip, r3, #1
   14d90:	str	r4, [fp, #-76]	; 0xffffffb4
   14d94:	mov	r4, #0
   14d98:	cmp	r9, ip
   14d9c:	movwcc	lr, #1
   14da0:	str	lr, [sp, #100]	; 0x64
   14da4:	ldr	lr, [fp, #-76]	; 0xffffffb4
   14da8:	cmp	lr, r3
   14dac:	movwcc	r4, #1
   14db0:	str	r4, [sp, #96]	; 0x60
   14db4:	ldr	r4, [fp, #-88]	; 0xffffffa8
   14db8:	cmp	ip, r4
   14dbc:	mov	r4, #0
   14dc0:	movwhi	r4, #1
   14dc4:	cmp	lr, r5
   14dc8:	mov	r5, #0
   14dcc:	mov	lr, #0
   14dd0:	movwcc	r5, #1
   14dd4:	str	r4, [fp, #-88]	; 0xffffffa8
   14dd8:	str	r5, [sp, #104]	; 0x68
   14ddc:	ldr	r4, [fp, #-84]	; 0xffffffac
   14de0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   14de4:	cmp	r3, r4
   14de8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14dec:	movwhi	lr, #1
   14df0:	cmp	r9, r3
   14df4:	mov	r9, #0
   14df8:	movwcc	r9, #1
   14dfc:	cmp	r5, r3
   14e00:	mov	r3, #0
   14e04:	movwcc	r3, #1
   14e08:	cmp	ip, r4
   14e0c:	mov	r4, #0
   14e10:	movwhi	r4, #1
   14e14:	tst	r4, r3
   14e18:	bne	14ec0 <__assert_fail@plt+0x3ba0>
   14e1c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14e20:	ldr	r4, [fp, #-100]	; 0xffffff9c
   14e24:	ands	r3, r4, r3
   14e28:	bne	14ec0 <__assert_fail@plt+0x3ba0>
   14e2c:	ands	r3, lr, r9
   14e30:	bne	14ec0 <__assert_fail@plt+0x3ba0>
   14e34:	ldr	r3, [fp, #-88]	; 0xffffffa8
   14e38:	ldr	r5, [sp, #104]	; 0x68
   14e3c:	ands	r3, r5, r3
   14e40:	bne	14ec0 <__assert_fail@plt+0x3ba0>
   14e44:	ldr	r3, [sp, #100]	; 0x64
   14e48:	ldr	r5, [sp, #96]	; 0x60
   14e4c:	ands	r3, r5, r3
   14e50:	bne	14ec0 <__assert_fail@plt+0x3ba0>
   14e54:	ldr	r3, [fp, #-72]	; 0xffffffb8
   14e58:	mvn	lr, #15
   14e5c:	sub	r9, fp, #68	; 0x44
   14e60:	bic	ip, r3, #1
   14e64:	sub	r1, r1, ip
   14e68:	mov	r3, ip
   14e6c:	sub	r4, r7, #8
   14e70:	subs	r3, r3, #2
   14e74:	vld1.64	{d16-d17}, [r4]
   14e78:	vst1.64	{d16-d17}, [r7], lr
   14e7c:	ldrh	r4, [r6, #-1]
   14e80:	strh	r4, [fp, #-68]	; 0xffffffbc
   14e84:	vld1.16	{d16[0]}, [r9 :16]
   14e88:	vmovl.u8	q8, d16
   14e8c:	vmovl.u16	q8, d16
   14e90:	vmov.32	r4, d16[1]
   14e94:	strb	r4, [r6, #1]
   14e98:	vmov.32	r4, d16[0]
   14e9c:	strb	r4, [r6]
   14ea0:	sub	r6, r6, #2
   14ea4:	bne	14e6c <__assert_fail@plt+0x3b4c>
   14ea8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   14eac:	ldr	r7, [fp, #-92]	; 0xffffffa4
   14eb0:	mov	r5, sl
   14eb4:	cmp	r3, ip
   14eb8:	bne	14ec4 <__assert_fail@plt+0x3ba4>
   14ebc:	b	14f04 <__assert_fail@plt+0x3be4>
   14ec0:	mov	r5, sl
   14ec4:	lsl	r3, r1, #3
   14ec8:	ldr	r7, [fp, #-92]	; 0xffffffa4
   14ecc:	add	r7, r7, r3
   14ed0:	sub	r3, r3, #8
   14ed4:	ldr	r4, [r7, #16]
   14ed8:	ldr	r9, [r7, #20]
   14edc:	str	r4, [r7, #24]
   14ee0:	str	r9, [r7, #28]
   14ee4:	ldr	r7, [fp, #-92]	; 0xffffffa4
   14ee8:	add	r7, r7, r1
   14eec:	sub	r1, r1, #1
   14ef0:	ldrb	r6, [r7, #224]	; 0xe0
   14ef4:	cmp	r1, r2
   14ef8:	strb	r6, [r7, #225]	; 0xe1
   14efc:	ldr	r7, [fp, #-92]	; 0xffffffa4
   14f00:	bgt	14ec8 <__assert_fail@plt+0x3ba8>
   14f04:	mov	r1, r2
   14f08:	add	r1, r1, #1
   14f0c:	add	r0, r0, #1
   14f10:	add	r2, r7, r1, lsl #3
   14f14:	add	r1, r7, r1
   14f18:	str	r8, [r2, #16]
   14f1c:	str	r5, [r2, #20]
   14f20:	mov	r2, #1
   14f24:	strb	r2, [r1, #224]	; 0xe0
   14f28:	strb	r0, [r7, #250]	; 0xfa
   14f2c:	sub	sp, fp, #28
   14f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f38:	add	fp, sp, #28
   14f3c:	sub	sp, sp, #516	; 0x204
   14f40:	orrs	r7, r0, r1
   14f44:	beq	15040 <__assert_fail@plt+0x3d20>
   14f48:	subs	ip, r0, #1
   14f4c:	orr	r7, r2, r3
   14f50:	str	r1, [sp, #84]	; 0x54
   14f54:	str	r0, [sp, #56]	; 0x38
   14f58:	sbc	lr, r1, #0
   14f5c:	cmp	r7, #0
   14f60:	movne	lr, r1
   14f64:	movne	ip, r0
   14f68:	subs	r6, r2, #1
   14f6c:	sbc	r5, r3, #0
   14f70:	str	ip, [sp, #80]	; 0x50
   14f74:	str	lr, [sp, #76]	; 0x4c
   14f78:	str	r6, [sp, #88]	; 0x58
   14f7c:	mov	r7, r5
   14f80:	str	r5, [sp, #92]	; 0x5c
   14f84:	orrs	r7, r6, r5
   14f88:	beq	15050 <__assert_fail@plt+0x3d30>
   14f8c:	mov	r4, #0
   14f90:	tst	r6, #1
   14f94:	bne	14fbc <__assert_fail@plt+0x3c9c>
   14f98:	ldr	r1, [sp, #92]	; 0x5c
   14f9c:	mov	r4, #0
   14fa0:	mov	r0, r6
   14fa4:	lsrs	r1, r1, #1
   14fa8:	add	r4, r4, #1
   14fac:	rrx	r7, r0
   14fb0:	tst	r0, #2
   14fb4:	mov	r0, r7
   14fb8:	beq	14fa4 <__assert_fail@plt+0x3c84>
   14fbc:	sub	r1, r4, #32
   14fc0:	lsr	r0, lr, r4
   14fc4:	rsb	r5, r4, #32
   14fc8:	ldr	r8, [sp, #92]	; 0x5c
   14fcc:	str	r4, [sp, #32]
   14fd0:	cmp	r1, #0
   14fd4:	movwge	r0, #0
   14fd8:	cmp	r1, #0
   14fdc:	str	r0, [fp, #-36]	; 0xffffffdc
   14fe0:	lsr	r0, ip, r4
   14fe4:	orr	r0, r0, lr, lsl r5
   14fe8:	lsrge	r0, lr, r1
   14fec:	str	r0, [fp, #-40]	; 0xffffffd8
   14ff0:	lsr	r0, r6, r4
   14ff4:	rsb	r6, r4, #64	; 0x40
   14ff8:	orr	r0, r0, r8, lsl r5
   14ffc:	lsl	r7, ip, r6
   15000:	lsrge	r0, r8, r1
   15004:	cmp	r5, #0
   15008:	movwge	r7, #0
   1500c:	cmp	r5, #0
   15010:	orr	r0, r7, r0
   15014:	lsr	r7, r8, r4
   15018:	str	r0, [fp, #-48]	; 0xffffffd0
   1501c:	rsb	r0, r6, #32
   15020:	lsr	r0, ip, r0
   15024:	orr	r0, r0, lr, lsl r6
   15028:	lslge	r0, ip, r5
   1502c:	cmp	r1, #0
   15030:	movwge	r7, #0
   15034:	orr	r0, r0, r7
   15038:	str	r0, [fp, #-44]	; 0xffffffd4
   1503c:	b	150c0 <__assert_fail@plt+0x3da0>
   15040:	mov	r0, r2
   15044:	mov	r1, r3
   15048:	bl	17ba0 <__assert_fail@plt+0x6880>
   1504c:	b	158ec <__assert_fail@plt+0x45cc>
   15050:	mov	r1, #0
   15054:	tst	ip, #1
   15058:	mov	r0, #0
   1505c:	bne	15084 <__assert_fail@plt+0x3d64>
   15060:	mov	r0, #0
   15064:	mov	r7, ip
   15068:	mov	r6, lr
   1506c:	lsrs	r6, r6, #1
   15070:	add	r0, r0, #1
   15074:	rrx	r5, r7
   15078:	tst	r7, #2
   1507c:	mov	r7, r5
   15080:	beq	1506c <__assert_fail@plt+0x3d4c>
   15084:	sub	r6, r0, #32
   15088:	str	r1, [fp, #-36]	; 0xffffffdc
   1508c:	str	r1, [fp, #-40]	; 0xffffffd8
   15090:	lsr	r1, lr, r0
   15094:	rsb	r7, r0, #32
   15098:	cmp	r6, #0
   1509c:	movwge	r1, #0
   150a0:	cmp	r6, #0
   150a4:	str	r1, [fp, #-44]	; 0xffffffd4
   150a8:	lsr	r1, ip, r0
   150ac:	add	r0, r0, #64	; 0x40
   150b0:	orr	r1, r1, lr, lsl r7
   150b4:	str	r0, [sp, #32]
   150b8:	lsrge	r1, lr, r6
   150bc:	str	r1, [fp, #-48]	; 0xffffffd0
   150c0:	movw	r1, #1430	; 0x596
   150c4:	ubfx	r0, r2, #1, #7
   150c8:	mov	r6, r2
   150cc:	str	r3, [sp, #52]	; 0x34
   150d0:	movt	r1, #3
   150d4:	str	r6, [sp, #48]	; 0x30
   150d8:	ldrb	r1, [r1, r0]
   150dc:	umull	r0, r7, r1, r2
   150e0:	mla	r7, r1, r3, r7
   150e4:	rsbs	r0, r0, #2
   150e8:	rsc	r8, r7, #0
   150ec:	umull	r4, r7, r0, r1
   150f0:	umull	r0, sl, r4, r2
   150f4:	mla	r1, r8, r1, r7
   150f8:	mov	r7, #0
   150fc:	rsbs	r5, r0, #2
   15100:	umull	r9, lr, r4, r5
   15104:	umull	ip, r0, r9, r2
   15108:	mla	r2, r4, r3, sl
   1510c:	ldr	sl, [sp, #84]	; 0x54
   15110:	mla	r2, r1, r6, r2
   15114:	mla	r0, r9, r3, r0
   15118:	mov	r3, #0
   1511c:	rsc	r2, r2, #0
   15120:	rsbs	ip, ip, #2
   15124:	mla	r2, r4, r2, lr
   15128:	ldr	r4, [sp, #56]	; 0x38
   1512c:	mla	lr, r1, r5, r2
   15130:	mov	r1, #127	; 0x7f
   15134:	mov	r2, #0
   15138:	mov	r5, #0
   1513c:	mla	r0, lr, r6, r0
   15140:	rsc	r0, r0, #0
   15144:	str	r0, [sp, #148]	; 0x94
   15148:	rsbs	r0, r4, #1
   1514c:	rscs	r0, sl, #0
   15150:	movwcc	r7, #1
   15154:	cmp	r7, #0
   15158:	movwne	r1, #63	; 0x3f
   1515c:	subs	r0, r4, #2
   15160:	sbcs	r0, sl, #0
   15164:	movwcc	r2, #1
   15168:	mov	r0, #0
   1516c:	str	r0, [sp, #156]	; 0x9c
   15170:	mov	r8, r3
   15174:	ldr	r3, [sp, #156]	; 0x9c
   15178:	ldr	r6, [sp, #56]	; 0x38
   1517c:	mov	r4, r1
   15180:	lsl	r0, r3, #1
   15184:	orr	r1, r0, r2, lsr #31
   15188:	lsl	r0, r5, #1
   1518c:	lsl	r2, r2, #1
   15190:	orr	r5, r0, r7, lsr #31
   15194:	lsl	r0, r7, #1
   15198:	orr	r7, r0, r3, lsr #31
   1519c:	subs	r0, r6, r7
   151a0:	sbcs	r0, sl, r5
   151a4:	bcc	151d0 <__assert_fail@plt+0x3eb0>
   151a8:	ldr	r0, [sp, #48]	; 0x30
   151ac:	subs	r0, r2, r0
   151b0:	ldr	r0, [sp, #52]	; 0x34
   151b4:	sbcs	r0, r1, r0
   151b8:	bcc	1520c <__assert_fail@plt+0x3eec>
   151bc:	ldr	r6, [sp, #56]	; 0x38
   151c0:	eor	r3, r5, sl
   151c4:	eor	r0, r7, r6
   151c8:	orrs	r0, r0, r3
   151cc:	bne	1520c <__assert_fail@plt+0x3eec>
   151d0:	subs	r0, r7, r6
   151d4:	ldr	r6, [sp, #48]	; 0x30
   151d8:	sbc	r3, r5, sl
   151dc:	subs	r7, r0, #1
   151e0:	sbc	r5, r3, #0
   151e4:	subs	r2, r2, r6
   151e8:	ldr	r6, [sp, #52]	; 0x34
   151ec:	sbcs	r1, r1, r6
   151f0:	str	r1, [sp, #156]	; 0x9c
   151f4:	mov	r1, #0
   151f8:	movwcc	r1, #1
   151fc:	cmp	r1, #0
   15200:	moveq	r7, r0
   15204:	moveq	r5, r3
   15208:	b	15210 <__assert_fail@plt+0x3ef0>
   1520c:	str	r1, [sp, #156]	; 0x9c
   15210:	subs	r1, r4, #1
   15214:	sbc	r3, r8, #0
   15218:	orrs	r0, r4, r8
   1521c:	bne	15170 <__assert_fail@plt+0x3e50>
   15220:	ldr	r3, [sp, #156]	; 0x9c
   15224:	lsl	r0, r5, #1
   15228:	str	r2, [fp, #-80]	; 0xffffffb0
   1522c:	str	r7, [fp, #-72]	; 0xffffffb8
   15230:	str	r5, [sp, #132]	; 0x84
   15234:	lsl	r8, r2, #1
   15238:	str	r2, [sp, #140]	; 0x8c
   1523c:	str	r7, [sp, #96]	; 0x60
   15240:	mov	r4, #0
   15244:	str	r8, [fp, #-64]	; 0xffffffc0
   15248:	str	r3, [fp, #-76]	; 0xffffffb4
   1524c:	str	r5, [fp, #-68]	; 0xffffffbc
   15250:	orr	r5, r0, r7, lsr #31
   15254:	lsl	r0, r3, #1
   15258:	orr	r1, r0, r2, lsr #31
   1525c:	rsbs	r0, r2, r2, lsl #1
   15260:	str	r5, [fp, #-52]	; 0xffffffcc
   15264:	sbcs	r0, r1, r3
   15268:	ldr	r3, [sp, #48]	; 0x30
   1526c:	str	r1, [fp, #-60]	; 0xffffffc4
   15270:	mov	r0, #0
   15274:	movwcc	r0, #1
   15278:	orr	r6, r0, r7, lsl #1
   1527c:	umull	r2, r0, r9, ip
   15280:	ldr	r7, [sp, #56]	; 0x38
   15284:	str	r2, [sp, #152]	; 0x98
   15288:	ldr	r2, [sp, #148]	; 0x94
   1528c:	str	r6, [fp, #-56]	; 0xffffffc8
   15290:	mla	r0, r9, r2, r0
   15294:	mla	r0, lr, ip, r0
   15298:	ldr	ip, [sp, #52]	; 0x34
   1529c:	str	r0, [sp, #148]	; 0x94
   152a0:	sub	r0, fp, #64	; 0x40
   152a4:	add	r0, r0, #8
   152a8:	str	r0, [sp, #28]
   152ac:	subs	r0, r7, r6
   152b0:	sbcs	r0, sl, r5
   152b4:	bcc	152d4 <__assert_fail@plt+0x3fb4>
   152b8:	subs	r0, r8, r3
   152bc:	sbcs	r0, r1, ip
   152c0:	bcc	15308 <__assert_fail@plt+0x3fe8>
   152c4:	eor	r0, r6, r7
   152c8:	eor	r2, r5, sl
   152cc:	orrs	r0, r0, r2
   152d0:	bne	15308 <__assert_fail@plt+0x3fe8>
   152d4:	subs	r0, r8, r3
   152d8:	ldr	r2, [sp, #28]
   152dc:	str	r0, [fp, #-64]	; 0xffffffc0
   152e0:	sbcs	r0, r1, ip
   152e4:	movwcc	r4, #1
   152e8:	str	r0, [fp, #-60]	; 0xffffffc4
   152ec:	cmp	r4, #0
   152f0:	mvnne	r4, #0
   152f4:	subs	r0, r4, r7
   152f8:	sbc	r1, r4, sl
   152fc:	adds	r0, r0, r6
   15300:	adc	r1, r1, r5
   15304:	strd	r0, [r2]
   15308:	sub	r2, fp, #48	; 0x30
   1530c:	sub	r0, fp, #64	; 0x40
   15310:	str	r7, [fp, #-88]	; 0xffffffa8
   15314:	str	r3, [fp, #-96]	; 0xffffffa0
   15318:	str	sl, [fp, #-84]	; 0xffffffac
   1531c:	str	ip, [fp, #-92]	; 0xffffffa4
   15320:	sub	r1, fp, #80	; 0x50
   15324:	stm	sp, {r0, r2}
   15328:	str	r1, [sp, #12]
   1532c:	ldr	r0, [sp, #32]
   15330:	ldr	r2, [sp, #152]	; 0x98
   15334:	ldr	r3, [sp, #148]	; 0x94
   15338:	str	r0, [sp, #8]
   1533c:	sub	r0, fp, #96	; 0x60
   15340:	bl	18a2c <__assert_fail@plt+0x770c>
   15344:	mov	r1, r0
   15348:	mov	r0, #0
   1534c:	cmp	r1, #0
   15350:	beq	158ec <__assert_fail@plt+0x45cc>
   15354:	ldr	r5, [sp, #80]	; 0x50
   15358:	ldr	r6, [sp, #76]	; 0x4c
   1535c:	ldr	r7, [sp, #88]	; 0x58
   15360:	ldr	r4, [sp, #92]	; 0x5c
   15364:	add	r8, sp, #192	; 0xc0
   15368:	str	r8, [sp]
   1536c:	mov	r0, r5
   15370:	mov	r1, r6
   15374:	mov	r2, r7
   15378:	mov	r3, r4
   1537c:	bl	12268 <__assert_fail@plt+0xf48>
   15380:	lsrs	r0, r6, #1
   15384:	str	r0, [sp, #72]	; 0x48
   15388:	rrx	r0, r5
   1538c:	str	r0, [sp, #68]	; 0x44
   15390:	lsrs	r0, r4, #1
   15394:	orr	r0, r0, r5, lsl #31
   15398:	rrx	r1, r7
   1539c:	str	r0, [sp, #60]	; 0x3c
   153a0:	add	r0, sp, #160	; 0xa0
   153a4:	str	r1, [sp, #64]	; 0x40
   153a8:	add	r0, r0, #8
   153ac:	str	r0, [sp, #144]	; 0x90
   153b0:	add	r0, sp, #176	; 0xb0
   153b4:	add	r0, r0, #8
   153b8:	str	r0, [sp, #136]	; 0x88
   153bc:	add	r0, r8, #16
   153c0:	str	r0, [sp, #20]
   153c4:	add	r0, r8, #8
   153c8:	str	r0, [sp, #24]
   153cc:	mov	r0, #2
   153d0:	str	r0, [sp, #40]	; 0x28
   153d4:	mov	r0, #0
   153d8:	str	r0, [sp, #36]	; 0x24
   153dc:	mov	r0, #0
   153e0:	str	r0, [sp, #44]	; 0x2c
   153e4:	ldr	r0, [sp, #24]
   153e8:	mov	r4, #1
   153ec:	mov	r8, sl
   153f0:	ldrd	r0, [r0]
   153f4:	orrs	r0, r0, r1
   153f8:	beq	15538 <__assert_fail@plt+0x4218>
   153fc:	ldr	r0, [sp, #192]	; 0xc0
   15400:	movw	r1, #1430	; 0x596
   15404:	ldr	ip, [sp, #196]	; 0xc4
   15408:	movt	r1, #3
   1540c:	ubfx	r2, r0, #1, #7
   15410:	ldrb	r2, [r1, r2]
   15414:	umull	r3, r7, r0, r2
   15418:	rsbs	r3, r3, #2
   1541c:	mla	r7, ip, r2, r7
   15420:	umull	r3, r6, r3, r2
   15424:	rsc	r7, r7, #0
   15428:	mla	r1, r7, r2, r6
   1542c:	umull	r7, r6, r3, r0
   15430:	mla	r6, r3, ip, r6
   15434:	rsbs	r9, r7, #2
   15438:	str	r1, [sp, #108]	; 0x6c
   1543c:	mla	r6, r1, r0, r6
   15440:	rsc	r1, r6, #0
   15444:	str	r1, [sp, #128]	; 0x80
   15448:	umull	r5, r1, r3, r9
   1544c:	str	r1, [sp, #120]	; 0x78
   15450:	umull	r6, r1, r5, r0
   15454:	rsbs	sl, r6, #2
   15458:	ldr	r6, [sp, #88]	; 0x58
   1545c:	str	r1, [sp, #116]	; 0x74
   15460:	umull	r1, r2, r5, sl
   15464:	str	r2, [sp, #124]	; 0x7c
   15468:	umull	lr, r2, r1, r6
   1546c:	str	r2, [sp, #112]	; 0x70
   15470:	ldr	r2, [sp, #92]	; 0x5c
   15474:	str	lr, [sp, #176]	; 0xb0
   15478:	ldr	r7, [sp, #112]	; 0x70
   1547c:	mla	lr, r1, r2, r7
   15480:	ldr	r1, [sp, #116]	; 0x74
   15484:	ldr	r2, [sp, #128]	; 0x80
   15488:	mla	ip, r5, ip, r1
   1548c:	ldr	r1, [sp, #120]	; 0x78
   15490:	mla	r3, r3, r2, r1
   15494:	ldr	r1, [sp, #108]	; 0x6c
   15498:	mla	r2, r1, r9, r3
   1549c:	ldr	r1, [sp, #124]	; 0x7c
   154a0:	sub	r3, fp, #96	; 0x60
   154a4:	mla	r0, r2, r0, ip
   154a8:	rsc	r0, r0, #0
   154ac:	mla	r0, r5, r0, r1
   154b0:	mov	r1, #0
   154b4:	mla	r0, r2, sl, r0
   154b8:	add	r2, sp, #176	; 0xb0
   154bc:	mla	r0, r0, r6, lr
   154c0:	str	r0, [sp, #180]	; 0xb4
   154c4:	ldr	r0, [sp, #136]	; 0x88
   154c8:	str	r1, [r0]
   154cc:	str	r1, [r0, #4]
   154d0:	ldr	r0, [sp, #152]	; 0x98
   154d4:	sub	r1, fp, #64	; 0x40
   154d8:	str	r0, [sp]
   154dc:	ldr	r0, [sp, #148]	; 0x94
   154e0:	str	r0, [sp, #4]
   154e4:	sub	r0, fp, #80	; 0x50
   154e8:	str	r0, [sp, #8]
   154ec:	ldr	r0, [sp, #144]	; 0x90
   154f0:	bl	18c84 <__assert_fail@plt+0x7964>
   154f4:	ldr	r2, [sp, #156]	; 0x9c
   154f8:	str	r1, [sp, #164]	; 0xa4
   154fc:	ldr	r9, [sp, #96]	; 0x60
   15500:	str	r0, [sp, #160]	; 0xa0
   15504:	eor	r1, r1, r2
   15508:	ldr	r2, [sp, #140]	; 0x8c
   1550c:	eor	r0, r0, r2
   15510:	orrs	r0, r0, r1
   15514:	bne	1553c <__assert_fail@plt+0x421c>
   15518:	ldr	r0, [sp, #144]	; 0x90
   1551c:	ldr	r2, [sp, #132]	; 0x84
   15520:	ldrd	r0, [r0]
   15524:	eor	r1, r1, r2
   15528:	eor	r0, r0, r9
   1552c:	orrs	r4, r0, r1
   15530:	movwne	r4, #1
   15534:	b	1553c <__assert_fail@plt+0x421c>
   15538:	ldr	r9, [sp, #96]	; 0x60
   1553c:	cmp	r4, #0
   15540:	ldrbne	r0, [sp, #442]	; 0x1ba
   15544:	cmpne	r0, #0
   15548:	bne	156c0 <__assert_fail@plt+0x43a0>
   1554c:	cmp	r4, #0
   15550:	bne	158f4 <__assert_fail@plt+0x45d4>
   15554:	ldr	r1, [sp, #44]	; 0x2c
   15558:	movw	r0, #80	; 0x50
   1555c:	ldr	r7, [sp, #40]	; 0x28
   15560:	ldr	r6, [sp, #36]	; 0x24
   15564:	ldr	r9, [sp, #56]	; 0x38
   15568:	mov	sl, r8
   1556c:	ldr	lr, [sp, #52]	; 0x34
   15570:	mov	r4, #127	; 0x7f
   15574:	mov	r2, #0
   15578:	movt	r0, #3
   1557c:	ldrb	r0, [r0, r1]
   15580:	adds	r7, r7, r0
   15584:	adc	r6, r6, #0
   15588:	subs	r0, r7, r9
   1558c:	mov	r1, r7
   15590:	str	r7, [sp, #40]	; 0x28
   15594:	sbcs	r0, r6, r8
   15598:	ldr	r8, [sp, #48]	; 0x30
   1559c:	mov	r5, r6
   155a0:	str	r6, [sp, #36]	; 0x24
   155a4:	mov	r0, #0
   155a8:	movwcc	r0, #1
   155ac:	cmp	r0, #0
   155b0:	mov	r3, r0
   155b4:	movwne	r4, #63	; 0x3f
   155b8:	movwne	r5, #0
   155bc:	movwne	r1, #0
   155c0:	movne	r3, r6
   155c4:	movne	r0, r7
   155c8:	lsl	r3, r3, #1
   155cc:	mov	ip, r2
   155d0:	lsl	r2, r5, #1
   155d4:	lsr	r5, r5, #31
   155d8:	mov	r7, r4
   155dc:	orr	r3, r3, r0, lsr #31
   155e0:	orr	r0, r5, r0, lsl #1
   155e4:	orr	r2, r2, r1, lsr #31
   155e8:	lsl	r1, r1, #1
   155ec:	subs	r5, r9, r0
   155f0:	sbcs	r5, sl, r3
   155f4:	bcc	15614 <__assert_fail@plt+0x42f4>
   155f8:	subs	r5, r1, r8
   155fc:	sbcs	r5, r2, lr
   15600:	bcc	15644 <__assert_fail@plt+0x4324>
   15604:	eor	r5, r0, r9
   15608:	eor	r4, r3, sl
   1560c:	orrs	r5, r5, r4
   15610:	bne	15644 <__assert_fail@plt+0x4324>
   15614:	subs	r4, r0, r9
   15618:	sbc	r6, r3, sl
   1561c:	subs	r0, r4, #1
   15620:	sbc	r3, r6, #0
   15624:	subs	r1, r1, r8
   15628:	sbcs	r5, r2, lr
   1562c:	mov	r2, #0
   15630:	movwcc	r2, #1
   15634:	cmp	r2, #0
   15638:	moveq	r0, r4
   1563c:	moveq	r3, r6
   15640:	b	15648 <__assert_fail@plt+0x4328>
   15644:	mov	r5, r2
   15648:	subs	r4, r7, #1
   1564c:	sbc	r2, ip, #0
   15650:	orrs	r7, r7, ip
   15654:	bne	155c8 <__assert_fail@plt+0x42a8>
   15658:	ldr	r2, [sp, #28]
   1565c:	stm	r2, {r0, r3}
   15660:	sub	r0, fp, #64	; 0x40
   15664:	str	r5, [fp, #-60]	; 0xffffffc4
   15668:	str	r1, [fp, #-64]	; 0xffffffc0
   1566c:	str	r0, [sp]
   15670:	sub	r0, fp, #48	; 0x30
   15674:	ldr	r2, [sp, #152]	; 0x98
   15678:	ldr	r3, [sp, #148]	; 0x94
   1567c:	str	r0, [sp, #4]
   15680:	ldr	r0, [sp, #32]
   15684:	str	r0, [sp, #8]
   15688:	sub	r0, fp, #80	; 0x50
   1568c:	str	r0, [sp, #12]
   15690:	sub	r0, fp, #96	; 0x60
   15694:	bl	18a2c <__assert_fail@plt+0x770c>
   15698:	cmp	r0, #0
   1569c:	beq	15900 <__assert_fail@plt+0x45e0>
   156a0:	ldr	r0, [sp, #44]	; 0x2c
   156a4:	mov	r1, r0
   156a8:	add	r1, r0, #1
   156ac:	cmp	r1, #668	; 0x29c
   156b0:	mov	r0, r1
   156b4:	str	r1, [sp, #44]	; 0x2c
   156b8:	bcc	153e4 <__assert_fail@plt+0x40c4>
   156bc:	b	1590c <__assert_fail@plt+0x45ec>
   156c0:	ldr	r5, [sp, #20]
   156c4:	mov	r6, #1
   156c8:	ldrd	r0, [r5]
   156cc:	eor	r2, r0, #2
   156d0:	orrs	r2, r2, r1
   156d4:	bne	15700 <__assert_fail@plt+0x43e0>
   156d8:	ldr	r0, [sp, #64]	; 0x40
   156dc:	ldr	r1, [sp, #68]	; 0x44
   156e0:	ldr	r2, [sp, #136]	; 0x88
   156e4:	str	r0, [sp, #176]	; 0xb0
   156e8:	ldr	r0, [sp, #60]	; 0x3c
   156ec:	str	r0, [sp, #180]	; 0xb4
   156f0:	ldr	r0, [sp, #72]	; 0x48
   156f4:	str	r1, [r2]
   156f8:	str	r0, [r2, #4]
   156fc:	b	1585c <__assert_fail@plt+0x453c>
   15700:	movw	r3, #1430	; 0x596
   15704:	str	r6, [sp, #104]	; 0x68
   15708:	ubfx	r2, r0, #1, #7
   1570c:	ldr	r9, [sp, #88]	; 0x58
   15710:	movt	r3, #3
   15714:	ldrb	r2, [r3, r2]
   15718:	umull	r3, r7, r0, r2
   1571c:	rsbs	r3, r3, #2
   15720:	mla	r7, r1, r2, r7
   15724:	umull	r6, r3, r3, r2
   15728:	rsc	r7, r7, #0
   1572c:	mla	sl, r7, r2, r3
   15730:	umull	r2, r3, r6, r0
   15734:	mla	r3, r6, r1, r3
   15738:	rsbs	r4, r2, #2
   1573c:	mla	r3, sl, r0, r3
   15740:	rsc	r2, r3, #0
   15744:	str	r2, [sp, #124]	; 0x7c
   15748:	umull	r2, r3, r6, r4
   1574c:	str	r3, [sp, #116]	; 0x74
   15750:	umull	r3, r7, r2, r0
   15754:	rsbs	ip, r3, #2
   15758:	str	r7, [sp, #108]	; 0x6c
   1575c:	umull	r8, r3, r2, ip
   15760:	str	r3, [sp, #120]	; 0x78
   15764:	umull	r3, lr, r8, r9
   15768:	str	r8, [sp, #100]	; 0x64
   1576c:	str	r3, [sp, #128]	; 0x80
   15770:	ldr	r3, [sp, #92]	; 0x5c
   15774:	mla	r3, r8, r3, lr
   15778:	ldr	lr, [sp, #116]	; 0x74
   1577c:	str	r3, [sp, #112]	; 0x70
   15780:	ldr	r3, [sp, #108]	; 0x6c
   15784:	mla	r8, r2, r1, r3
   15788:	ldr	r3, [sp, #124]	; 0x7c
   1578c:	mla	r6, r6, r3, lr
   15790:	ldr	lr, [sp, #80]	; 0x50
   15794:	mla	r4, sl, r4, r6
   15798:	ldr	r6, [sp, #120]	; 0x78
   1579c:	mla	r3, r4, r0, r8
   157a0:	rsc	r3, r3, #0
   157a4:	mla	r2, r2, r3, r6
   157a8:	mla	ip, r4, ip, r2
   157ac:	ldr	r2, [sp, #112]	; 0x70
   157b0:	mla	r6, ip, r9, r2
   157b4:	ldr	r9, [sp, #76]	; 0x4c
   157b8:	subs	r2, lr, r0
   157bc:	sbcs	r2, r9, r1
   157c0:	bcs	157e4 <__assert_fail@plt+0x44c4>
   157c4:	ldr	r0, [sp, #128]	; 0x80
   157c8:	mov	r1, #0
   157cc:	str	r6, [sp, #180]	; 0xb4
   157d0:	str	r0, [sp, #176]	; 0xb0
   157d4:	ldr	r0, [sp, #136]	; 0x88
   157d8:	str	r1, [r0]
   157dc:	str	r1, [r0, #4]
   157e0:	b	15850 <__assert_fail@plt+0x4530>
   157e4:	ldr	r8, [sp, #128]	; 0x80
   157e8:	umull	r2, r3, r8, r1
   157ec:	umull	r4, r7, r8, r0
   157f0:	umlal	r2, r3, r6, r0
   157f4:	adds	r2, r2, r7
   157f8:	umull	r0, r7, r6, r0
   157fc:	adc	r3, r3, #0
   15800:	subs	r0, r2, r0
   15804:	umull	r1, r2, r6, r1
   15808:	sbcs	r0, r3, r7
   1580c:	ldr	r7, [sp, #100]	; 0x64
   15810:	mov	r0, #0
   15814:	movwcc	r0, #1
   15818:	cmp	r0, #0
   1581c:	addne	r2, r2, #1
   15820:	subs	r0, lr, r3
   15824:	sbc	r3, r9, #0
   15828:	subs	r0, r0, r1
   1582c:	umull	r4, r1, r0, r7
   15830:	mla	r0, r0, ip, r1
   15834:	sbc	r1, r3, r2
   15838:	mla	r1, r1, r7, r0
   1583c:	ldr	r0, [sp, #136]	; 0x88
   15840:	str	r4, [r0]
   15844:	str	r1, [r0, #4]
   15848:	str	r6, [sp, #180]	; 0xb4
   1584c:	str	r8, [sp, #176]	; 0xb0
   15850:	ldr	r8, [sp, #84]	; 0x54
   15854:	ldr	r9, [sp, #96]	; 0x60
   15858:	ldr	r6, [sp, #104]	; 0x68
   1585c:	ldr	r0, [sp, #152]	; 0x98
   15860:	ldr	r4, [sp, #144]	; 0x90
   15864:	sub	r1, fp, #64	; 0x40
   15868:	add	r2, sp, #176	; 0xb0
   1586c:	sub	r3, fp, #96	; 0x60
   15870:	str	r0, [sp]
   15874:	ldr	r0, [sp, #148]	; 0x94
   15878:	str	r0, [sp, #4]
   1587c:	sub	r0, fp, #80	; 0x50
   15880:	str	r0, [sp, #8]
   15884:	mov	r0, r4
   15888:	bl	18c84 <__assert_fail@plt+0x7964>
   1588c:	ldr	r2, [sp, #156]	; 0x9c
   15890:	str	r1, [sp, #164]	; 0xa4
   15894:	str	r0, [sp, #160]	; 0xa0
   15898:	ldr	r7, [sp, #132]	; 0x84
   1589c:	eor	r1, r1, r2
   158a0:	ldrd	r2, [r4]
   158a4:	eor	r3, r3, r7
   158a8:	eor	r2, r2, r9
   158ac:	orr	r1, r1, r3
   158b0:	ldr	r3, [sp, #140]	; 0x8c
   158b4:	eor	r0, r0, r3
   158b8:	orr	r0, r0, r2
   158bc:	orrs	r0, r0, r1
   158c0:	mov	r4, r0
   158c4:	movwne	r4, #1
   158c8:	cmp	r0, #0
   158cc:	beq	1554c <__assert_fail@plt+0x422c>
   158d0:	ldrb	r1, [sp, #442]	; 0x1ba
   158d4:	add	r0, r6, #1
   158d8:	add	r5, r5, #8
   158dc:	cmp	r6, r1
   158e0:	mov	r6, r0
   158e4:	bcc	156c8 <__assert_fail@plt+0x43a8>
   158e8:	b	1554c <__assert_fail@plt+0x422c>
   158ec:	sub	sp, fp, #28
   158f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f4:	mov	r0, #1
   158f8:	sub	sp, fp, #28
   158fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15900:	mov	r0, #0
   15904:	sub	sp, fp, #28
   15908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1590c:	movw	r1, #53957	; 0xd2c5
   15910:	mov	r0, #0
   15914:	mov	r2, #5
   15918:	movt	r1, #2
   1591c:	bl	110f8 <dcgettext@plt>
   15920:	mov	r2, r0
   15924:	mov	r0, #0
   15928:	mov	r1, #0
   1592c:	bl	11188 <error@plt>
   15930:	bl	11314 <abort@plt>
   15934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15938:	add	fp, sp, #28
   1593c:	sub	sp, sp, #140	; 0x8c
   15940:	mov	ip, r0
   15944:	subs	r0, r0, #2
   15948:	str	r2, [sp, #56]	; 0x38
   1594c:	sbcs	r0, r1, #0
   15950:	bcc	1655c <__assert_fail@plt+0x523c>
   15954:	add	r0, r3, #8
   15958:	str	r3, [sp, #60]	; 0x3c
   1595c:	str	r0, [sp, #48]	; 0x30
   15960:	add	r0, r3, #223	; 0xdf
   15964:	str	r0, [sp, #44]	; 0x2c
   15968:	add	r0, r3, #225	; 0xe1
   1596c:	str	r0, [sp, #40]	; 0x28
   15970:	add	r0, r3, #24
   15974:	str	r0, [sp, #36]	; 0x24
   15978:	add	r0, r3, #226	; 0xe2
   1597c:	str	r0, [sp, #32]
   15980:	add	r0, r3, #32
   15984:	str	r0, [sp, #28]
   15988:	mov	r3, #0
   1598c:	mvn	r0, #63	; 0x3f
   15990:	mov	r9, ip
   15994:	mov	r2, ip
   15998:	mov	r8, r1
   1599c:	mov	sl, #0
   159a0:	mov	r7, #1
   159a4:	mov	r6, #0
   159a8:	mov	ip, #0
   159ac:	mov	lr, #0
   159b0:	str	r3, [fp, #-60]	; 0xffffffc4
   159b4:	lsrs	r5, lr, #1
   159b8:	rrx	ip, ip
   159bc:	lsrs	r1, r1, #1
   159c0:	orr	lr, r5, r2, lsl #31
   159c4:	rrx	r2, r2
   159c8:	subs	r4, r2, r7
   159cc:	sbcs	r4, r1, r6
   159d0:	bcc	159f4 <__assert_fail@plt+0x46d4>
   159d4:	eor	r4, r7, r2
   159d8:	eor	r3, r6, r1
   159dc:	orrs	r3, r4, r3
   159e0:	bne	15a28 <__assert_fail@plt+0x4708>
   159e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   159e8:	subs	r3, r3, ip
   159ec:	sbcs	r3, sl, lr
   159f0:	bcc	15a28 <__assert_fail@plt+0x4708>
   159f4:	ldr	r5, [fp, #-60]	; 0xffffffc4
   159f8:	subs	r3, r7, r2
   159fc:	sbc	r4, r6, r1
   15a00:	subs	r7, r3, #1
   15a04:	sbc	r6, r4, #0
   15a08:	subs	r5, r5, ip
   15a0c:	str	r5, [fp, #-60]	; 0xffffffc4
   15a10:	sbcs	sl, sl, lr
   15a14:	mov	r5, #0
   15a18:	movwcc	r5, #1
   15a1c:	cmp	r5, #0
   15a20:	moveq	r7, r3
   15a24:	moveq	r6, r4
   15a28:	adds	r0, r0, #1
   15a2c:	bne	159b4 <__assert_fail@plt+0x4694>
   15a30:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15a34:	ldr	lr, [sp, #56]	; 0x38
   15a38:	str	sl, [fp, #-80]	; 0xffffffb0
   15a3c:	subs	r0, r9, r2
   15a40:	sbc	r1, r8, sl
   15a44:	subs	r0, r2, r0
   15a48:	mov	r2, #0
   15a4c:	sbcs	r1, sl, r1
   15a50:	movwcc	r2, #1
   15a54:	adds	r7, r0, r9
   15a58:	adc	r6, r1, r8
   15a5c:	cmp	r2, #0
   15a60:	moveq	r7, r0
   15a64:	eor	r0, r9, #1
   15a68:	moveq	r6, r1
   15a6c:	orrs	r0, r0, r8
   15a70:	beq	1657c <__assert_fail@plt+0x525c>
   15a74:	add	r1, lr, #1
   15a78:	mov	r4, r8
   15a7c:	mov	r3, r6
   15a80:	str	r7, [sp, #84]	; 0x54
   15a84:	str	r6, [sp, #80]	; 0x50
   15a88:	str	r7, [fp, #-48]	; 0xffffffd0
   15a8c:	str	r1, [sp, #52]	; 0x34
   15a90:	mov	r1, #1
   15a94:	str	r1, [fp, #-56]	; 0xffffffc8
   15a98:	mov	r1, #1
   15a9c:	str	r1, [sp, #68]	; 0x44
   15aa0:	subs	r0, lr, r9
   15aa4:	str	r7, [fp, #-64]	; 0xffffffc0
   15aa8:	str	r6, [sp, #64]	; 0x40
   15aac:	rscs	r0, r4, #0
   15ab0:	bcs	16870 <__assert_fail@plt+0x5550>
   15ab4:	movw	r1, #1430	; 0x596
   15ab8:	ubfx	r0, r9, #1, #7
   15abc:	str	r9, [sp, #76]	; 0x4c
   15ac0:	str	r4, [fp, #-40]	; 0xffffffd8
   15ac4:	movt	r1, #3
   15ac8:	ldrb	r0, [r1, r0]
   15acc:	umull	r1, r2, r9, r0
   15ad0:	rsbs	r1, r1, #2
   15ad4:	mla	r2, r4, r0, r2
   15ad8:	rsc	r6, r2, #0
   15adc:	umull	r1, r8, r1, r0
   15ae0:	ldr	r2, [sp, #76]	; 0x4c
   15ae4:	umull	r7, sl, r1, r9
   15ae8:	mla	r0, r6, r0, r8
   15aec:	ldr	r6, [fp, #-40]	; 0xffffffd8
   15af0:	rsbs	r7, r7, #2
   15af4:	umull	r5, ip, r1, r7
   15af8:	umull	r4, r2, r5, r2
   15afc:	str	r4, [fp, #-44]	; 0xffffffd4
   15b00:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15b04:	mla	r9, r5, r4, r2
   15b08:	ldr	r4, [sp, #76]	; 0x4c
   15b0c:	mla	r2, r1, r6, sl
   15b10:	mla	r2, r0, r4, r2
   15b14:	rsc	r2, r2, #0
   15b18:	mla	r1, r1, r2, ip
   15b1c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15b20:	ldr	ip, [sp, #76]	; 0x4c
   15b24:	mla	r0, r0, r7, r1
   15b28:	ldr	r1, [sp, #76]	; 0x4c
   15b2c:	rsbs	r2, r2, #2
   15b30:	mla	r1, r0, r1, r9
   15b34:	umull	r7, r4, r5, r2
   15b38:	ldr	r9, [sp, #64]	; 0x40
   15b3c:	rsc	r1, r1, #0
   15b40:	str	r7, [fp, #-68]	; 0xffffffbc
   15b44:	mla	r1, r5, r1, r4
   15b48:	ldr	r4, [fp, #-48]	; 0xffffffd0
   15b4c:	mla	r7, r0, r2, r1
   15b50:	subs	r0, ip, lr
   15b54:	ldr	r1, [sp, #68]	; 0x44
   15b58:	str	r0, [fp, #-72]	; 0xffffffb8
   15b5c:	sbc	r0, r6, #0
   15b60:	str	r7, [fp, #-44]	; 0xffffffd4
   15b64:	str	r0, [fp, #-76]	; 0xffffffb4
   15b68:	and	r0, ip, #1
   15b6c:	ldr	ip, [fp, #-64]	; 0xffffffc0
   15b70:	str	r0, [sp, #72]	; 0x48
   15b74:	b	15ba4 <__assert_fail@plt+0x4884>
   15b78:	ldr	r0, [sp, #68]	; 0x44
   15b7c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15b80:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15b84:	mov	r9, r3
   15b88:	mov	ip, r4
   15b8c:	str	r0, [fp, #-56]	; 0xffffffc8
   15b90:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15b94:	str	r0, [sp, #84]	; 0x54
   15b98:	ldr	r0, [sp, #64]	; 0x40
   15b9c:	str	r0, [sp, #80]	; 0x50
   15ba0:	mov	r0, r4
   15ba4:	ldr	sl, [fp, #-56]	; 0xffffffc8
   15ba8:	str	r3, [fp, #-52]	; 0xffffffcc
   15bac:	str	r1, [sp, #68]	; 0x44
   15bb0:	ldr	lr, [fp, #-68]	; 0xffffffbc
   15bb4:	str	r4, [fp, #-48]	; 0xffffffd0
   15bb8:	umull	r0, r1, r9, ip
   15bbc:	umull	r3, r4, ip, ip
   15bc0:	ldr	ip, [fp, #-40]	; 0xffffffd8
   15bc4:	ldr	r8, [sp, #76]	; 0x4c
   15bc8:	str	sl, [fp, #-56]	; 0xffffffc8
   15bcc:	mov	sl, r9
   15bd0:	lsl	r2, r1, #1
   15bd4:	adds	r4, r4, r0, lsl #1
   15bd8:	orr	r2, r2, r0, lsr #31
   15bdc:	adc	r9, r2, #0
   15be0:	umull	r5, r6, r3, lr
   15be4:	mla	r3, r3, r7, r6
   15be8:	umull	r6, r7, r5, ip
   15bec:	umull	r5, r2, r5, r8
   15bf0:	mla	r3, r4, lr, r3
   15bf4:	umlal	r6, r7, r3, r8
   15bf8:	adds	r2, r6, r2
   15bfc:	adc	r5, r7, #0
   15c00:	umull	r6, r7, r3, r8
   15c04:	subs	r2, r2, r6
   15c08:	umull	r3, r6, r3, ip
   15c0c:	sbcs	r2, r5, r7
   15c10:	mov	r2, #0
   15c14:	movwcc	r2, #1
   15c18:	cmp	r2, #0
   15c1c:	addne	r6, r6, #1
   15c20:	adds	r2, r3, r5
   15c24:	adc	r3, r6, #0
   15c28:	subs	r0, r4, r0
   15c2c:	ldr	r6, [fp, #-80]	; 0xffffffb0
   15c30:	sbcs	r0, r9, r1
   15c34:	umull	r1, r4, sl, sl
   15c38:	ldr	sl, [fp, #-56]	; 0xffffffc8
   15c3c:	mov	r0, #0
   15c40:	movwcc	r0, #1
   15c44:	cmp	r0, #0
   15c48:	addne	r4, r4, #1
   15c4c:	adds	r0, r1, r9
   15c50:	adc	r1, r4, #0
   15c54:	subs	r0, r0, r2
   15c58:	mov	r2, #0
   15c5c:	sbcs	r1, r1, r3
   15c60:	movwcc	r2, #1
   15c64:	adds	r3, r0, r8
   15c68:	adc	r4, r1, ip
   15c6c:	cmp	r2, #0
   15c70:	mov	r2, #0
   15c74:	moveq	r3, r0
   15c78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c7c:	moveq	r4, r1
   15c80:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15c84:	subs	r0, r3, r0
   15c88:	sbcs	r1, r4, r1
   15c8c:	movwcc	r2, #1
   15c90:	adds	r3, r0, r8
   15c94:	adc	r9, r1, ip
   15c98:	cmp	r2, #0
   15c9c:	mov	r2, #0
   15ca0:	moveq	r3, r0
   15ca4:	ldr	r0, [sp, #84]	; 0x54
   15ca8:	moveq	r9, r1
   15cac:	ldr	r1, [sp, #80]	; 0x50
   15cb0:	str	r3, [fp, #-64]	; 0xffffffc0
   15cb4:	subs	r0, r0, r3
   15cb8:	sbcs	r1, r1, r9
   15cbc:	movwcc	r2, #1
   15cc0:	adds	r3, r0, r8
   15cc4:	adc	r4, r1, ip
   15cc8:	cmp	r2, #0
   15ccc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15cd0:	moveq	r4, r1
   15cd4:	moveq	r3, r0
   15cd8:	umull	r0, r1, r4, r2
   15cdc:	umull	r2, r5, r3, r2
   15ce0:	umlal	r0, r1, r3, r6
   15ce4:	adds	r0, r0, r5
   15ce8:	umull	r4, r5, r4, r6
   15cec:	umull	r3, r6, r3, r6
   15cf0:	adc	r1, r1, #0
   15cf4:	subs	r3, r0, r3
   15cf8:	sbcs	r3, r1, r6
   15cfc:	ldr	r6, [fp, #-44]	; 0xffffffd4
   15d00:	mov	r3, #0
   15d04:	movwcc	r3, #1
   15d08:	cmp	r3, #0
   15d0c:	addne	r5, r5, #1
   15d10:	adds	r1, r4, r1
   15d14:	adc	r3, r5, #0
   15d18:	umull	r4, r5, r2, lr
   15d1c:	mla	r2, r2, r6, r5
   15d20:	mla	r0, r0, lr, r2
   15d24:	umull	r2, r5, r4, ip
   15d28:	umull	r4, r6, r4, r8
   15d2c:	umlal	r2, r5, r0, r8
   15d30:	adds	r2, r2, r6
   15d34:	adc	r4, r5, #0
   15d38:	umull	r5, r6, r0, ip
   15d3c:	umull	r0, r7, r0, r8
   15d40:	subs	r0, r2, r0
   15d44:	sbcs	r0, r4, r7
   15d48:	mov	r0, #0
   15d4c:	movwcc	r0, #1
   15d50:	cmp	r0, #0
   15d54:	addne	r6, r6, #1
   15d58:	adds	r0, r5, r4
   15d5c:	adc	r2, r6, #0
   15d60:	subs	r0, r1, r0
   15d64:	sbcs	r1, r3, r2
   15d68:	mov	r2, #0
   15d6c:	movwcc	r2, #1
   15d70:	adds	r3, r0, r8
   15d74:	adc	r5, r1, ip
   15d78:	cmp	r2, #0
   15d7c:	moveq	r3, r0
   15d80:	and	r0, sl, #31
   15d84:	moveq	r5, r1
   15d88:	cmp	r0, #1
   15d8c:	str	r5, [fp, #-80]	; 0xffffffb0
   15d90:	str	r3, [fp, #-60]	; 0xffffffc4
   15d94:	bne	15e28 <__assert_fail@plt+0x4b08>
   15d98:	ldr	r0, [sp, #72]	; 0x48
   15d9c:	mov	r4, r3
   15da0:	cmp	r0, #0
   15da4:	mov	r0, r5
   15da8:	moveq	r4, r8
   15dac:	moveq	r0, ip
   15db0:	moveq	r8, r3
   15db4:	mov	r3, ip
   15db8:	orr	r2, r4, r0
   15dbc:	moveq	r3, r5
   15dc0:	cmp	r2, #0
   15dc4:	beq	15e3c <__assert_fail@plt+0x4b1c>
   15dc8:	ldr	ip, [fp, #-64]	; 0xffffffc0
   15dcc:	lsrs	r2, r3, #1
   15dd0:	rrx	r1, r8
   15dd4:	b	15df8 <__assert_fail@plt+0x4ad8>
   15dd8:	eor	r0, r7, r6, asr #31
   15ddc:	eor	r3, r6, r6, asr #31
   15de0:	and	r5, r6, r6, asr #31
   15de4:	subs	r4, r0, r6, asr #31
   15de8:	sbc	r0, r3, r6, asr #31
   15dec:	and	r3, r7, r6, asr #31
   15df0:	adds	r1, r3, r1
   15df4:	adc	r2, r5, r2
   15df8:	mov	r3, r0
   15dfc:	mov	r5, r4
   15e00:	lsrs	r0, r0, #1
   15e04:	rrx	r4, r4
   15e08:	tst	r5, #1
   15e0c:	beq	15df8 <__assert_fail@plt+0x4ad8>
   15e10:	subs	r7, r4, r1
   15e14:	sbc	r6, r0, r2
   15e18:	orrs	r0, r7, r6
   15e1c:	bne	15dd8 <__assert_fail@plt+0x4ab8>
   15e20:	orr	r8, r5, #1
   15e24:	b	15e40 <__assert_fail@plt+0x4b20>
   15e28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15e2c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15e30:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15e34:	ldr	ip, [fp, #-64]	; 0xffffffc0
   15e38:	b	15e58 <__assert_fail@plt+0x4b38>
   15e3c:	ldr	ip, [fp, #-64]	; 0xffffffc0
   15e40:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15e44:	eor	r0, r8, #1
   15e48:	mov	r1, r9
   15e4c:	orrs	r0, r0, r3
   15e50:	mov	r0, ip
   15e54:	bne	15f98 <__assert_fail@plt+0x4c78>
   15e58:	subs	sl, sl, #1
   15e5c:	mov	r4, r0
   15e60:	str	r1, [fp, #-52]	; 0xffffffcc
   15e64:	bne	15bb0 <__assert_fail@plt+0x4890>
   15e68:	ldr	lr, [sp, #68]	; 0x44
   15e6c:	mov	r4, ip
   15e70:	mov	r3, r9
   15e74:	str	ip, [sp, #84]	; 0x54
   15e78:	str	r9, [sp, #80]	; 0x50
   15e7c:	lsl	r1, lr, #1
   15e80:	cmp	lr, #0
   15e84:	str	lr, [fp, #-56]	; 0xffffffc8
   15e88:	beq	15ba4 <__assert_fail@plt+0x4884>
   15e8c:	ldr	r8, [sp, #76]	; 0x4c
   15e90:	mov	r4, ip
   15e94:	mov	r3, r9
   15e98:	str	r1, [fp, #-48]	; 0xffffffd0
   15e9c:	mov	sl, ip
   15ea0:	str	r9, [sp, #64]	; 0x40
   15ea4:	ldr	r5, [fp, #-68]	; 0xffffffbc
   15ea8:	umull	r0, r1, r3, r4
   15eac:	str	r3, [fp, #-52]	; 0xffffffcc
   15eb0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15eb4:	umull	r4, r6, r4, r4
   15eb8:	ldr	ip, [fp, #-40]	; 0xffffffd8
   15ebc:	lsl	r2, r1, #1
   15ec0:	adds	r6, r6, r0, lsl #1
   15ec4:	orr	r2, r2, r0, lsr #31
   15ec8:	adc	sl, r2, #0
   15ecc:	umull	r7, r2, r4, r5
   15ed0:	mla	r2, r4, r3, r2
   15ed4:	umull	r4, r3, r7, ip
   15ed8:	umull	r7, r9, r7, r8
   15edc:	mla	r2, r6, r5, r2
   15ee0:	umlal	r4, r3, r2, r8
   15ee4:	umull	r7, r5, r2, r8
   15ee8:	adds	r4, r4, r9
   15eec:	adc	r3, r3, #0
   15ef0:	subs	r4, r4, r7
   15ef4:	sbcs	r4, r3, r5
   15ef8:	umull	r2, r5, r2, ip
   15efc:	mov	r4, #0
   15f00:	movwcc	r4, #1
   15f04:	cmp	r4, #0
   15f08:	addne	r5, r5, #1
   15f0c:	adds	r2, r2, r3
   15f10:	adc	r3, r5, #0
   15f14:	subs	r0, r6, r0
   15f18:	sbcs	r0, sl, r1
   15f1c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15f20:	mov	r0, #0
   15f24:	movwcc	r0, #1
   15f28:	cmp	r0, #0
   15f2c:	umull	r1, r4, r1, r1
   15f30:	addne	r4, r4, #1
   15f34:	adds	r0, r1, sl
   15f38:	adc	r1, r4, #0
   15f3c:	subs	r0, r0, r2
   15f40:	mov	r2, #0
   15f44:	sbcs	r1, r1, r3
   15f48:	movwcc	r2, #1
   15f4c:	adds	r3, r0, r8
   15f50:	adc	r4, r1, ip
   15f54:	cmp	r2, #0
   15f58:	mov	r2, #0
   15f5c:	moveq	r3, r0
   15f60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15f64:	moveq	r4, r1
   15f68:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15f6c:	subs	r0, r3, r0
   15f70:	sbcs	r1, r4, r1
   15f74:	movwcc	r2, #1
   15f78:	adds	r4, r0, r8
   15f7c:	adc	r3, r1, ip
   15f80:	cmp	r2, #0
   15f84:	moveq	r3, r1
   15f88:	moveq	r4, r0
   15f8c:	subs	lr, lr, #1
   15f90:	bne	15ea4 <__assert_fail@plt+0x4b84>
   15f94:	b	15b78 <__assert_fail@plt+0x4858>
   15f98:	mov	r8, ip
   15f9c:	ldr	sl, [fp, #-52]	; 0xffffffcc
   15fa0:	ldr	r4, [fp, #-68]	; 0xffffffbc
   15fa4:	ldr	ip, [sp, #76]	; 0x4c
   15fa8:	str	r9, [sp, #64]	; 0x40
   15fac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15fb0:	umull	r0, r1, sl, r3
   15fb4:	umull	r3, r7, r3, r3
   15fb8:	lsl	r2, r1, #1
   15fbc:	adds	r7, r7, r0, lsl #1
   15fc0:	umull	r6, r5, r3, r4
   15fc4:	orr	r2, r2, r0, lsr #31
   15fc8:	adc	lr, r2, #0
   15fcc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15fd0:	mla	r3, r3, r2, r5
   15fd4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15fd8:	mla	r3, r7, r4, r3
   15fdc:	umull	r5, r4, r6, r2
   15fe0:	umull	r6, r2, r6, ip
   15fe4:	umlal	r5, r4, r3, ip
   15fe8:	adds	r2, r5, r2
   15fec:	umull	r5, r6, r3, ip
   15ff0:	adc	r4, r4, #0
   15ff4:	subs	r2, r2, r5
   15ff8:	sbcs	r2, r4, r6
   15ffc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   16000:	mov	r2, #0
   16004:	movwcc	r2, #1
   16008:	cmp	r2, #0
   1600c:	umull	r3, r5, r3, r6
   16010:	addne	r5, r5, #1
   16014:	adds	r2, r3, r4
   16018:	adc	r3, r5, #0
   1601c:	subs	r0, r7, r0
   16020:	sbcs	r0, lr, r1
   16024:	umull	r1, r4, sl, sl
   16028:	mov	r0, #0
   1602c:	movwcc	r0, #1
   16030:	cmp	r0, #0
   16034:	addne	r4, r4, #1
   16038:	adds	r0, r1, lr
   1603c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16040:	adc	r7, r4, #0
   16044:	subs	r0, r0, r2
   16048:	mov	r2, #0
   1604c:	sbcs	r6, r7, r3
   16050:	movwcc	r2, #1
   16054:	adds	r3, r0, ip
   16058:	adc	r7, r6, r1
   1605c:	cmp	r2, #0
   16060:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16064:	mov	r9, r1
   16068:	moveq	r3, r0
   1606c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16070:	moveq	r7, r6
   16074:	subs	r0, r3, r0
   16078:	sbcs	r3, r7, r2
   1607c:	mov	r2, #0
   16080:	movwcc	r2, #1
   16084:	adds	r7, r0, ip
   16088:	adc	sl, r3, r1
   1608c:	cmp	r2, #0
   16090:	ldr	r2, [sp, #80]	; 0x50
   16094:	moveq	r7, r0
   16098:	ldr	r0, [sp, #84]	; 0x54
   1609c:	moveq	sl, r3
   160a0:	str	r7, [fp, #-48]	; 0xffffffd0
   160a4:	subs	r0, r0, r7
   160a8:	sbcs	r3, r2, sl
   160ac:	mov	r2, #0
   160b0:	movwcc	r2, #1
   160b4:	adds	r7, r0, ip
   160b8:	adc	r5, r3, r1
   160bc:	cmp	r2, #0
   160c0:	moveq	r5, r3
   160c4:	ldr	r3, [sp, #72]	; 0x48
   160c8:	cmp	r3, #0
   160cc:	moveq	r9, r5
   160d0:	moveq	r5, r1
   160d4:	cmp	r2, #0
   160d8:	moveq	r7, r0
   160dc:	cmp	r3, #0
   160e0:	mov	r3, r7
   160e4:	movne	r7, ip
   160e8:	moveq	r3, ip
   160ec:	orr	r0, r3, r5
   160f0:	cmp	r0, #0
   160f4:	beq	16154 <__assert_fail@plt+0x4e34>
   160f8:	lsrs	ip, r9, #1
   160fc:	rrx	r2, r7
   16100:	b	16124 <__assert_fail@plt+0x4e04>
   16104:	eor	r0, r4, r6, asr #31
   16108:	eor	r7, r6, r6, asr #31
   1610c:	subs	r3, r0, r6, asr #31
   16110:	and	r0, r4, r6, asr #31
   16114:	sbc	r5, r7, r6, asr #31
   16118:	and	r7, r6, r6, asr #31
   1611c:	adds	r2, r0, r2
   16120:	adc	ip, r7, ip
   16124:	mov	r9, r5
   16128:	mov	r0, r3
   1612c:	lsrs	r5, r5, #1
   16130:	rrx	r3, r3
   16134:	tst	r0, #1
   16138:	beq	16124 <__assert_fail@plt+0x4e04>
   1613c:	subs	r4, r3, r2
   16140:	sbc	r6, r5, ip
   16144:	orrs	r3, r4, r6
   16148:	bne	16104 <__assert_fail@plt+0x4de4>
   1614c:	ldr	ip, [sp, #76]	; 0x4c
   16150:	orr	r7, r0, #1
   16154:	ldr	r4, [fp, #-68]	; 0xffffffbc
   16158:	eor	r0, r7, #1
   1615c:	orrs	r0, r0, r9
   16160:	beq	15fac <__assert_fail@plt+0x4c8c>
   16164:	eor	r0, ip, r7
   16168:	eor	r2, r1, r9
   1616c:	orrs	r0, r0, r2
   16170:	beq	16548 <__assert_fail@plt+0x5228>
   16174:	mov	r0, ip
   16178:	mov	r2, r7
   1617c:	mov	r3, r9
   16180:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   16184:	str	r0, [sp, #76]	; 0x4c
   16188:	str	r1, [fp, #-40]	; 0xffffffd8
   1618c:	mov	r0, r7
   16190:	mov	r1, r9
   16194:	bl	17ba0 <__assert_fail@plt+0x6880>
   16198:	cmp	r0, #0
   1619c:	beq	16200 <__assert_fail@plt+0x4ee0>
   161a0:	ldr	ip, [sp, #60]	; 0x3c
   161a4:	ldrb	lr, [ip, #250]	; 0xfa
   161a8:	sub	r1, lr, #1
   161ac:	cmp	lr, #0
   161b0:	beq	164a4 <__assert_fail@plt+0x5184>
   161b4:	mov	r0, #8
   161b8:	add	r2, r0, lr, lsl #3
   161bc:	add	r0, lr, #223	; 0xdf
   161c0:	mov	r6, ip
   161c4:	ldr	r3, [r6, r2]!
   161c8:	ldr	r6, [r6, #4]
   161cc:	subs	r5, r7, r3
   161d0:	sbcs	r5, r9, r6
   161d4:	bcs	16218 <__assert_fail@plt+0x4ef8>
   161d8:	sub	r3, r0, #1
   161dc:	sub	r0, r0, #224	; 0xe0
   161e0:	sub	r2, r2, #8
   161e4:	cmp	r0, #0
   161e8:	mov	r0, r3
   161ec:	bgt	161c0 <__assert_fail@plt+0x4ea0>
   161f0:	sub	r2, r3, #224	; 0xe0
   161f4:	cmp	r1, r2
   161f8:	bgt	16244 <__assert_fail@plt+0x4f24>
   161fc:	b	164a0 <__assert_fail@plt+0x5180>
   16200:	ldr	r2, [sp, #52]	; 0x34
   16204:	ldr	r3, [sp, #60]	; 0x3c
   16208:	mov	r0, r7
   1620c:	mov	r1, r9
   16210:	bl	15934 <__assert_fail@plt+0x4614>
   16214:	b	164c8 <__assert_fail@plt+0x51a8>
   16218:	eor	r2, r3, r7
   1621c:	eor	r3, r6, r9
   16220:	orrs	r2, r2, r3
   16224:	bne	16238 <__assert_fail@plt+0x4f18>
   16228:	ldrb	r1, [ip, r0]
   1622c:	add	r1, r1, #1
   16230:	strb	r1, [ip, r0]
   16234:	b	164c8 <__assert_fail@plt+0x51a8>
   16238:	sub	r2, r0, #224	; 0xe0
   1623c:	cmp	r1, r2
   16240:	ble	164a0 <__assert_fail@plt+0x5180>
   16244:	mvn	r0, r2
   16248:	add	r4, r0, lr
   1624c:	cmp	r4, #1
   16250:	bls	16474 <__assert_fail@plt+0x5154>
   16254:	sub	r0, lr, #2
   16258:	mov	r3, ip
   1625c:	sub	r5, r0, r2
   16260:	mov	r0, #8
   16264:	add	r3, r3, lr, lsl #3
   16268:	umull	ip, r0, r5, r0
   1626c:	add	r6, r3, #16
   16270:	cmp	r0, #0
   16274:	movwne	r0, #1
   16278:	cmp	ip, r6
   1627c:	bhi	16470 <__assert_fail@plt+0x5150>
   16280:	cmp	r0, #0
   16284:	bne	16470 <__assert_fail@plt+0x5150>
   16288:	ldr	r3, [sp, #60]	; 0x3c
   1628c:	add	r3, r3, lr
   16290:	add	r3, r3, #224	; 0xe0
   16294:	cmp	r5, r3
   16298:	bhi	16470 <__assert_fail@plt+0x5150>
   1629c:	str	r3, [fp, #-68]	; 0xffffffbc
   162a0:	ldr	r3, [sp, #48]	; 0x30
   162a4:	add	r3, r3, lr, lsl #3
   162a8:	cmp	ip, r3
   162ac:	bhi	16470 <__assert_fail@plt+0x5150>
   162b0:	ldr	ip, [sp, #60]	; 0x3c
   162b4:	cmp	r0, #0
   162b8:	bne	16474 <__assert_fail@plt+0x5154>
   162bc:	ldr	r0, [sp, #44]	; 0x2c
   162c0:	add	r0, r0, lr
   162c4:	cmp	r5, r0
   162c8:	bhi	16474 <__assert_fail@plt+0x5154>
   162cc:	str	r6, [fp, #-44]	; 0xffffffd4
   162d0:	ldr	r6, [sp, #32]
   162d4:	str	r4, [fp, #-72]	; 0xffffffb8
   162d8:	add	r6, r6, r2
   162dc:	str	r6, [fp, #-52]	; 0xffffffcc
   162e0:	mov	ip, r6
   162e4:	ldr	r6, [sp, #40]	; 0x28
   162e8:	add	r5, r6, lr
   162ec:	add	r4, r6, r2
   162f0:	mov	r6, #0
   162f4:	cmp	r4, r5
   162f8:	str	r4, [sp, #72]	; 0x48
   162fc:	ldr	r4, [fp, #-68]	; 0xffffffbc
   16300:	str	r5, [fp, #-76]	; 0xffffffb4
   16304:	movwcc	r6, #1
   16308:	str	r6, [sp, #8]
   1630c:	mov	r6, #0
   16310:	cmp	ip, r4
   16314:	ldr	ip, [sp, #36]	; 0x24
   16318:	movwcc	r6, #1
   1631c:	str	r6, [sp, #4]
   16320:	add	r6, ip, r2, lsl #3
   16324:	cmp	r5, r6
   16328:	mov	r5, #0
   1632c:	str	r6, [sp, #24]
   16330:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16334:	movwhi	r5, #1
   16338:	str	r5, [sp, #16]
   1633c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   16340:	cmp	r6, r5
   16344:	mov	r5, #0
   16348:	add	r6, ip, lr, lsl #3
   1634c:	movwcc	r5, #1
   16350:	str	r5, [sp, #12]
   16354:	ldr	r5, [sp, #72]	; 0x48
   16358:	cmp	r5, r6
   1635c:	mov	r5, #0
   16360:	movwcc	r5, #1
   16364:	str	r5, [sp, #72]	; 0x48
   16368:	ldr	r5, [sp, #28]
   1636c:	add	ip, r5, r2, lsl #3
   16370:	mov	r5, #0
   16374:	cmp	r4, ip
   16378:	mov	r4, #0
   1637c:	movwhi	r4, #1
   16380:	str	r4, [sp, #20]
   16384:	ldr	r4, [sp, #24]
   16388:	cmp	r4, r6
   1638c:	mov	r4, #0
   16390:	movwcc	r4, #1
   16394:	str	r4, [fp, #-68]	; 0xffffffbc
   16398:	ldr	r4, [fp, #-44]	; 0xffffffd4
   1639c:	cmp	ip, r4
   163a0:	ldr	r4, [fp, #-52]	; 0xffffffcc
   163a4:	movwcc	r5, #1
   163a8:	cmp	r4, r6
   163ac:	ldr	r6, [fp, #-76]	; 0xffffffb4
   163b0:	mov	r4, #0
   163b4:	movwcc	r4, #1
   163b8:	cmp	r6, ip
   163bc:	mov	r6, #0
   163c0:	movwhi	r6, #1
   163c4:	tst	r6, r4
   163c8:	bne	16470 <__assert_fail@plt+0x5150>
   163cc:	ldr	r6, [fp, #-68]	; 0xffffffbc
   163d0:	ldr	ip, [sp, #60]	; 0x3c
   163d4:	ands	r6, r5, r6
   163d8:	ldreq	r4, [sp, #72]	; 0x48
   163dc:	ldreq	r5, [sp, #20]
   163e0:	andseq	r6, r5, r4
   163e4:	bne	16474 <__assert_fail@plt+0x5154>
   163e8:	ldr	r4, [sp, #16]
   163ec:	ldr	r5, [sp, #12]
   163f0:	ands	r6, r5, r4
   163f4:	ldreq	r4, [sp, #8]
   163f8:	ldreq	r5, [sp, #4]
   163fc:	andseq	r6, r5, r4
   16400:	bne	16474 <__assert_fail@plt+0x5154>
   16404:	ldr	r6, [fp, #-72]	; 0xffffffb8
   16408:	mvn	r8, #15
   1640c:	bic	ip, r6, #1
   16410:	sub	r6, fp, #32
   16414:	sub	r1, r1, ip
   16418:	mov	r5, ip
   1641c:	sub	r4, r3, #8
   16420:	subs	r5, r5, #2
   16424:	vld1.64	{d16-d17}, [r4]
   16428:	vst1.64	{d16-d17}, [r3], r8
   1642c:	ldrh	r4, [r0, #-1]
   16430:	strh	r4, [fp, #-32]	; 0xffffffe0
   16434:	vld1.16	{d16[0]}, [r6 :16]
   16438:	vmovl.u8	q8, d16
   1643c:	vmovl.u16	q8, d16
   16440:	vmov.32	r4, d16[1]
   16444:	strb	r4, [r0, #1]
   16448:	vmov.32	r4, d16[0]
   1644c:	strb	r4, [r0]
   16450:	sub	r0, r0, #2
   16454:	bne	1641c <__assert_fail@plt+0x50fc>
   16458:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1645c:	ldr	r8, [fp, #-64]	; 0xffffffc0
   16460:	cmp	r0, ip
   16464:	ldr	ip, [sp, #60]	; 0x3c
   16468:	bne	16474 <__assert_fail@plt+0x5154>
   1646c:	b	164a0 <__assert_fail@plt+0x5180>
   16470:	ldr	ip, [sp, #60]	; 0x3c
   16474:	lsl	r0, r1, #3
   16478:	add	r3, ip, r0
   1647c:	sub	r0, r0, #8
   16480:	ldrd	r4, [r3, #16]
   16484:	strd	r4, [r3, #24]
   16488:	add	r3, ip, r1
   1648c:	sub	r1, r1, #1
   16490:	ldrb	r6, [r3, #224]	; 0xe0
   16494:	cmp	r1, r2
   16498:	strb	r6, [r3, #225]	; 0xe1
   1649c:	bgt	16478 <__assert_fail@plt+0x5158>
   164a0:	mov	r1, r2
   164a4:	add	r0, r1, #1
   164a8:	add	r1, ip, r0, lsl #3
   164ac:	add	r0, ip, r0
   164b0:	str	r7, [r1, #16]
   164b4:	str	r9, [r1, #20]
   164b8:	mov	r1, #1
   164bc:	strb	r1, [r0, #224]	; 0xe0
   164c0:	add	r0, lr, #1
   164c4:	strb	r0, [ip, #250]	; 0xfa
   164c8:	ldr	r9, [sp, #76]	; 0x4c
   164cc:	ldr	r4, [fp, #-40]	; 0xffffffd8
   164d0:	mov	r0, r9
   164d4:	mov	r1, r4
   164d8:	bl	17ba0 <__assert_fail@plt+0x6880>
   164dc:	ldr	r1, [sp, #64]	; 0x40
   164e0:	cmp	r0, #0
   164e4:	bne	16584 <__assert_fail@plt+0x5264>
   164e8:	mov	r0, r8
   164ec:	mov	r2, r9
   164f0:	mov	r3, r4
   164f4:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   164f8:	ldr	r0, [sp, #84]	; 0x54
   164fc:	ldr	r1, [sp, #80]	; 0x50
   16500:	mov	r7, r2
   16504:	mov	r6, r3
   16508:	mov	r2, r9
   1650c:	mov	r3, r4
   16510:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   16514:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16518:	str	r2, [sp, #84]	; 0x54
   1651c:	str	r3, [sp, #80]	; 0x50
   16520:	mov	r1, sl
   16524:	mov	r2, r9
   16528:	mov	r3, r4
   1652c:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   16530:	ldr	lr, [sp, #56]	; 0x38
   16534:	eor	r0, r9, #1
   16538:	str	r2, [fp, #-48]	; 0xffffffd0
   1653c:	orrs	r0, r0, r4
   16540:	bne	15aa0 <__assert_fail@plt+0x4780>
   16544:	b	1657c <__assert_fail@plt+0x525c>
   16548:	rsbs	r0, ip, #1
   1654c:	rscs	r0, r1, #0
   16550:	ldr	r0, [sp, #52]	; 0x34
   16554:	str	r0, [sp, #56]	; 0x38
   16558:	bcc	15988 <__assert_fail@plt+0x4668>
   1655c:	movw	r0, #54007	; 0xd2f7
   16560:	movw	r1, #53944	; 0xd2b8
   16564:	movw	r3, #54344	; 0xd448
   16568:	movw	r2, #1466	; 0x5ba
   1656c:	movt	r0, #2
   16570:	movt	r1, #2
   16574:	movt	r3, #2
   16578:	bl	11320 <__assert_fail@plt>
   1657c:	sub	sp, fp, #28
   16580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16584:	ldr	ip, [sp, #60]	; 0x3c
   16588:	ldrb	r9, [ip, #250]	; 0xfa
   1658c:	sub	r1, r9, #1
   16590:	cmp	r9, #0
   16594:	beq	165ec <__assert_fail@plt+0x52cc>
   16598:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1659c:	mov	r2, #8
   165a0:	add	r7, r9, #223	; 0xdf
   165a4:	add	r3, r2, r9, lsl #3
   165a8:	mov	r6, ip
   165ac:	ldr	r5, [sp, #76]	; 0x4c
   165b0:	ldr	r2, [r6, r3]!
   165b4:	ldr	r6, [r6, #4]
   165b8:	subs	r5, r5, r2
   165bc:	sbcs	r5, r0, r6
   165c0:	bcs	165f4 <__assert_fail@plt+0x52d4>
   165c4:	sub	r2, r7, #1
   165c8:	sub	r7, r7, #224	; 0xe0
   165cc:	sub	r3, r3, #8
   165d0:	cmp	r7, #0
   165d4:	mov	r7, r2
   165d8:	bgt	165a8 <__assert_fail@plt+0x5288>
   165dc:	sub	r2, r2, #224	; 0xe0
   165e0:	cmp	r1, r2
   165e4:	bgt	16628 <__assert_fail@plt+0x5308>
   165e8:	b	1683c <__assert_fail@plt+0x551c>
   165ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   165f0:	b	16840 <__assert_fail@plt+0x5520>
   165f4:	ldr	r3, [sp, #76]	; 0x4c
   165f8:	eor	r2, r2, r3
   165fc:	eor	r3, r6, r0
   16600:	orrs	r2, r2, r3
   16604:	bne	1661c <__assert_fail@plt+0x52fc>
   16608:	ldrb	r0, [ip, r7]
   1660c:	add	r0, r0, #1
   16610:	strb	r0, [ip, r7]
   16614:	sub	sp, fp, #28
   16618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1661c:	sub	r2, r7, #224	; 0xe0
   16620:	cmp	r1, r2
   16624:	ble	1683c <__assert_fail@plt+0x551c>
   16628:	mvn	r3, r2
   1662c:	add	r4, r3, r9
   16630:	cmp	r4, #1
   16634:	bls	16810 <__assert_fail@plt+0x54f0>
   16638:	sub	r3, r9, #2
   1663c:	add	ip, ip, r9, lsl #3
   16640:	sub	r5, r3, r2
   16644:	mov	r3, #8
   16648:	add	r8, ip, #16
   1664c:	umull	lr, r6, r5, r3
   16650:	cmp	r6, #0
   16654:	movwne	r6, #1
   16658:	cmp	lr, r8
   1665c:	bhi	16800 <__assert_fail@plt+0x54e0>
   16660:	cmp	r6, #0
   16664:	bne	16800 <__assert_fail@plt+0x54e0>
   16668:	ldr	r7, [sp, #60]	; 0x3c
   1666c:	add	r3, r7, r9
   16670:	add	r7, r3, #224	; 0xe0
   16674:	cmp	r5, r7
   16678:	bhi	16800 <__assert_fail@plt+0x54e0>
   1667c:	add	r7, ip, #8
   16680:	cmp	lr, r7
   16684:	bhi	16800 <__assert_fail@plt+0x54e0>
   16688:	cmp	r6, #0
   1668c:	bne	16800 <__assert_fail@plt+0x54e0>
   16690:	add	r6, r3, #223	; 0xdf
   16694:	cmp	r5, r6
   16698:	bhi	16800 <__assert_fail@plt+0x54e0>
   1669c:	str	r4, [fp, #-64]	; 0xffffffc0
   166a0:	ldr	r4, [sp, #60]	; 0x3c
   166a4:	add	ip, ip, #24
   166a8:	mov	r0, #0
   166ac:	add	r3, r4, r2, lsl #3
   166b0:	add	lr, r3, #24
   166b4:	add	r5, r3, #32
   166b8:	cmp	lr, ip
   166bc:	str	r5, [fp, #-44]	; 0xffffffd4
   166c0:	movwcc	r0, #1
   166c4:	cmp	r5, r8
   166c8:	add	r5, r4, #224	; 0xe0
   166cc:	add	r4, r5, r2
   166d0:	str	r0, [fp, #-48]	; 0xffffffd0
   166d4:	mov	r0, #0
   166d8:	add	r5, r5, r9
   166dc:	movwcc	r0, #1
   166e0:	add	r3, r4, #2
   166e4:	add	r4, r4, #1
   166e8:	add	sl, r5, #1
   166ec:	str	r0, [fp, #-52]	; 0xffffffcc
   166f0:	cmp	r4, sl
   166f4:	mov	r0, #0
   166f8:	movwcc	r0, #1
   166fc:	cmp	r3, r5
   16700:	str	r0, [fp, #-56]	; 0xffffffc8
   16704:	mov	r0, #0
   16708:	movwcc	r0, #1
   1670c:	cmp	sl, lr
   16710:	mov	lr, #0
   16714:	str	r0, [fp, #-60]	; 0xffffffc4
   16718:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1671c:	movwhi	lr, #1
   16720:	cmp	r3, r8
   16724:	mov	r8, #0
   16728:	movwcc	r8, #1
   1672c:	cmp	r5, r0
   16730:	mov	r5, #0
   16734:	movwhi	r5, #1
   16738:	cmp	r4, ip
   1673c:	mov	r4, #0
   16740:	movwcc	r4, #1
   16744:	cmp	r3, ip
   16748:	mov	r3, #0
   1674c:	movwcc	r3, #1
   16750:	cmp	sl, r0
   16754:	mov	r0, #0
   16758:	movwhi	r0, #1
   1675c:	tst	r0, r3
   16760:	bne	16808 <__assert_fail@plt+0x54e8>
   16764:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16768:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1676c:	ldr	ip, [sp, #60]	; 0x3c
   16770:	ands	r3, r0, r3
   16774:	bne	1680c <__assert_fail@plt+0x54ec>
   16778:	ands	r3, r5, r4
   1677c:	bne	1680c <__assert_fail@plt+0x54ec>
   16780:	ands	r3, r8, lr
   16784:	bne	1680c <__assert_fail@plt+0x54ec>
   16788:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1678c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16790:	ands	r3, r3, r0
   16794:	bne	1680c <__assert_fail@plt+0x54ec>
   16798:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1679c:	mvn	lr, #15
   167a0:	sub	r3, fp, #36	; 0x24
   167a4:	bic	ip, r0, #1
   167a8:	sub	r1, r1, ip
   167ac:	mov	r5, ip
   167b0:	sub	r4, r7, #8
   167b4:	subs	r5, r5, #2
   167b8:	vld1.64	{d16-d17}, [r4]
   167bc:	vst1.64	{d16-d17}, [r7], lr
   167c0:	ldrh	r4, [r6, #-1]
   167c4:	strh	r4, [fp, #-36]	; 0xffffffdc
   167c8:	vld1.16	{d16[0]}, [r3 :16]
   167cc:	vmovl.u8	q8, d16
   167d0:	vmovl.u16	q8, d16
   167d4:	vmov.32	r4, d16[1]
   167d8:	strb	r4, [r6, #1]
   167dc:	vmov.32	r4, d16[0]
   167e0:	strb	r4, [r6]
   167e4:	sub	r6, r6, #2
   167e8:	bne	167b0 <__assert_fail@plt+0x5490>
   167ec:	cmp	r0, ip
   167f0:	ldr	ip, [sp, #60]	; 0x3c
   167f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   167f8:	bne	16810 <__assert_fail@plt+0x54f0>
   167fc:	b	1683c <__assert_fail@plt+0x551c>
   16800:	ldr	ip, [sp, #60]	; 0x3c
   16804:	b	16810 <__assert_fail@plt+0x54f0>
   16808:	ldr	ip, [sp, #60]	; 0x3c
   1680c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16810:	lsl	r3, r1, #3
   16814:	add	r7, ip, r3
   16818:	sub	r3, r3, #8
   1681c:	ldrd	r4, [r7, #16]
   16820:	strd	r4, [r7, #24]
   16824:	add	r7, ip, r1
   16828:	sub	r1, r1, #1
   1682c:	ldrb	r6, [r7, #224]	; 0xe0
   16830:	cmp	r1, r2
   16834:	strb	r6, [r7, #225]	; 0xe1
   16838:	bgt	16814 <__assert_fail@plt+0x54f4>
   1683c:	mov	r1, r2
   16840:	ldr	r3, [sp, #76]	; 0x4c
   16844:	add	r1, r1, #1
   16848:	add	r2, ip, r1, lsl #3
   1684c:	add	r1, ip, r1
   16850:	str	r3, [r2, #16]
   16854:	str	r0, [r2, #20]
   16858:	mov	r2, #1
   1685c:	add	r0, r9, #1
   16860:	strb	r2, [r1, #224]	; 0xe0
   16864:	strb	r0, [ip, #250]	; 0xfa
   16868:	sub	sp, fp, #28
   1686c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16870:	movw	r0, #54418	; 0xd492
   16874:	movw	r1, #53944	; 0xd2b8
   16878:	movw	r3, #54344	; 0xd448
   1687c:	mov	r2, #1472	; 0x5c0
   16880:	movt	r0, #2
   16884:	movt	r1, #2
   16888:	movt	r3, #2
   1688c:	bl	11320 <__assert_fail@plt>
   16890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16894:	add	fp, sp, #28
   16898:	sub	sp, sp, #260	; 0x104
   1689c:	mov	lr, r3
   168a0:	subs	r3, r0, #2
   168a4:	mov	r8, #0
   168a8:	str	r0, [fp, #-84]	; 0xffffffac
   168ac:	mov	r4, #0
   168b0:	mov	r9, r2
   168b4:	mov	sl, r1
   168b8:	mov	r2, #0
   168bc:	mov	r6, #0
   168c0:	sbcs	r3, r1, #0
   168c4:	movwcc	r8, #1
   168c8:	rsbs	r0, r0, #1
   168cc:	mov	r3, #127	; 0x7f
   168d0:	rscs	r0, r1, #0
   168d4:	movwcc	r4, #1
   168d8:	mov	r0, #0
   168dc:	cmp	r4, #0
   168e0:	str	r0, [fp, #-116]	; 0xffffff8c
   168e4:	movwne	r3, #63	; 0x3f
   168e8:	ldr	r7, [fp, #-116]	; 0xffffff8c
   168ec:	ldr	r5, [fp, #-84]	; 0xffffffac
   168f0:	mov	r0, r3
   168f4:	lsl	r3, r6, #1
   168f8:	mov	ip, r2
   168fc:	orr	r6, r3, r4, lsr #31
   16900:	lsl	r3, r4, #1
   16904:	orr	r4, r3, r7, lsr #31
   16908:	lsl	r2, r7, #1
   1690c:	subs	r3, r5, r4
   16910:	orr	r2, r2, r8, lsr #31
   16914:	lsl	r8, r8, #1
   16918:	sbcs	r3, sl, r6
   1691c:	bcc	16940 <__assert_fail@plt+0x5620>
   16920:	subs	r3, r8, r9
   16924:	sbcs	r3, r2, lr
   16928:	bcc	16974 <__assert_fail@plt+0x5654>
   1692c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16930:	eor	r7, r6, sl
   16934:	eor	r3, r4, r5
   16938:	orrs	r3, r3, r7
   1693c:	bne	16974 <__assert_fail@plt+0x5654>
   16940:	subs	r3, r4, r5
   16944:	sbc	r7, r6, sl
   16948:	subs	r4, r3, #1
   1694c:	sbc	r6, r7, #0
   16950:	subs	r8, r8, r9
   16954:	sbcs	r2, r2, lr
   16958:	str	r2, [fp, #-116]	; 0xffffff8c
   1695c:	mov	r2, #0
   16960:	movwcc	r2, #1
   16964:	cmp	r2, #0
   16968:	moveq	r4, r3
   1696c:	moveq	r6, r7
   16970:	b	16978 <__assert_fail@plt+0x5658>
   16974:	str	r2, [fp, #-116]	; 0xffffff8c
   16978:	subs	r3, r0, #1
   1697c:	sbc	r2, ip, #0
   16980:	orrs	r0, r0, ip
   16984:	bne	168e8 <__assert_fail@plt+0x55c8>
   16988:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1698c:	lsl	r0, r6, #1
   16990:	rsbs	r5, r8, r8, lsl #1
   16994:	orr	r3, r0, r4, lsr #31
   16998:	ldr	r5, [fp, #-84]	; 0xffffffac
   1699c:	str	r3, [fp, #-36]	; 0xffffffdc
   169a0:	lsl	r0, r2, #1
   169a4:	orr	r7, r0, r8, lsr #31
   169a8:	mov	r0, #0
   169ac:	sbcs	r2, r7, r2
   169b0:	mov	r2, #0
   169b4:	movwcc	r2, #1
   169b8:	orr	ip, r2, r4, lsl #1
   169bc:	lsl	r2, r8, #1
   169c0:	subs	r1, r5, ip
   169c4:	str	ip, [fp, #-40]	; 0xffffffd8
   169c8:	sbcs	r1, sl, r3
   169cc:	bcc	16a00 <__assert_fail@plt+0x56e0>
   169d0:	subs	r1, r2, r9
   169d4:	str	r2, [fp, #-120]	; 0xffffff88
   169d8:	str	r7, [fp, #-132]	; 0xffffff7c
   169dc:	sbcs	r1, r7, lr
   169e0:	bcc	16a3c <__assert_fail@plt+0x571c>
   169e4:	ldr	r5, [fp, #-84]	; 0xffffffac
   169e8:	eor	r2, r3, sl
   169ec:	ldr	r7, [fp, #-132]	; 0xffffff7c
   169f0:	eor	r1, ip, r5
   169f4:	orrs	r1, r1, r2
   169f8:	ldr	r2, [fp, #-120]	; 0xffffff88
   169fc:	bne	16a3c <__assert_fail@plt+0x571c>
   16a00:	subs	r2, r2, r9
   16a04:	sbcs	r7, r7, lr
   16a08:	str	r2, [fp, #-120]	; 0xffffff88
   16a0c:	mov	r2, lr
   16a10:	movwcc	r0, #1
   16a14:	str	r7, [fp, #-132]	; 0xffffff7c
   16a18:	cmp	r0, #0
   16a1c:	mvnne	r0, #0
   16a20:	subs	r1, r0, r5
   16a24:	sbc	r0, r0, sl
   16a28:	adds	ip, r1, ip
   16a2c:	adc	r3, r0, r3
   16a30:	str	ip, [fp, #-40]	; 0xffffffd8
   16a34:	str	r3, [fp, #-36]	; 0xffffffdc
   16a38:	b	16a40 <__assert_fail@plt+0x5720>
   16a3c:	mov	r2, lr
   16a40:	eor	r0, r9, #1
   16a44:	str	ip, [fp, #-56]	; 0xffffffc8
   16a48:	str	ip, [fp, #-108]	; 0xffffff94
   16a4c:	str	ip, [fp, #-48]	; 0xffffffd0
   16a50:	str	r3, [fp, #-52]	; 0xffffffcc
   16a54:	str	r3, [fp, #-104]	; 0xffffff98
   16a58:	str	r3, [fp, #-44]	; 0xffffffd4
   16a5c:	orrs	r0, r0, r2
   16a60:	ldreq	r0, [fp, #-84]	; 0xffffffac
   16a64:	orrseq	r0, r0, sl
   16a68:	beq	17838 <__assert_fail@plt+0x6518>
   16a6c:	ldr	r0, [fp, #12]
   16a70:	str	r4, [fp, #-140]	; 0xffffff74
   16a74:	mov	r4, r9
   16a78:	ldr	r9, [fp, #-132]	; 0xffffff7c
   16a7c:	str	r8, [fp, #-136]	; 0xffffff78
   16a80:	mov	r8, lr
   16a84:	str	r6, [sp, #144]	; 0x90
   16a88:	mov	r1, r0
   16a8c:	add	r0, r0, #8
   16a90:	str	r9, [sp, #124]	; 0x7c
   16a94:	str	r9, [fp, #-88]	; 0xffffffa8
   16a98:	str	r0, [sp, #96]	; 0x60
   16a9c:	add	r0, r1, #223	; 0xdf
   16aa0:	str	r0, [sp, #92]	; 0x5c
   16aa4:	add	r0, r1, #225	; 0xe1
   16aa8:	str	r0, [sp, #88]	; 0x58
   16aac:	add	r0, r1, #24
   16ab0:	str	r0, [sp, #84]	; 0x54
   16ab4:	add	r0, r1, #226	; 0xe2
   16ab8:	str	r0, [sp, #80]	; 0x50
   16abc:	add	r0, r1, #32
   16ac0:	ldr	r1, [fp, #-108]	; 0xffffff94
   16ac4:	str	r0, [sp, #76]	; 0x4c
   16ac8:	ldr	r0, [fp, #8]
   16acc:	str	r1, [sp, #136]	; 0x88
   16ad0:	str	r1, [fp, #-124]	; 0xffffff84
   16ad4:	add	r0, r0, #1
   16ad8:	str	r0, [sp, #100]	; 0x64
   16adc:	ldr	r0, [fp, #-104]	; 0xffffff98
   16ae0:	str	r0, [sp, #132]	; 0x84
   16ae4:	str	r0, [fp, #-128]	; 0xffffff80
   16ae8:	ldr	r0, [fp, #-120]	; 0xffffff88
   16aec:	str	r0, [sp, #128]	; 0x80
   16af0:	str	r0, [fp, #-112]	; 0xffffff90
   16af4:	mov	r0, #1
   16af8:	str	r0, [fp, #-92]	; 0xffffffa4
   16afc:	mov	r0, #1
   16b00:	str	r0, [sp, #108]	; 0x6c
   16b04:	b	16bd4 <__assert_fail@plt+0x58b4>
   16b08:	ldr	r0, [fp, #-120]	; 0xffffff88
   16b0c:	mov	r2, r4
   16b10:	str	r0, [sp]
   16b14:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16b18:	stmib	sp, {r0, r7, sl}
   16b1c:	sub	r0, fp, #40	; 0x28
   16b20:	str	r9, [sp, #16]
   16b24:	str	r8, [sp, #20]
   16b28:	ldr	r3, [fp, #-128]	; 0xffffff80
   16b2c:	bl	19778 <__assert_fail@plt+0x8458>
   16b30:	str	r0, [fp, #-120]	; 0xffffff88
   16b34:	ldr	r0, [sp, #128]	; 0x80
   16b38:	mov	r6, r1
   16b3c:	str	r0, [sp]
   16b40:	ldr	r0, [sp, #124]	; 0x7c
   16b44:	stmib	sp, {r0, r7, sl}
   16b48:	sub	r0, fp, #48	; 0x30
   16b4c:	str	r9, [sp, #16]
   16b50:	str	r8, [sp, #20]
   16b54:	ldr	r2, [sp, #136]	; 0x88
   16b58:	ldr	r3, [sp, #132]	; 0x84
   16b5c:	bl	19778 <__assert_fail@plt+0x8458>
   16b60:	str	r0, [sp, #128]	; 0x80
   16b64:	ldr	r0, [fp, #-112]	; 0xffffff90
   16b68:	str	r1, [sp, #124]	; 0x7c
   16b6c:	stm	sp, {r0, r5, r7, sl}
   16b70:	sub	r0, fp, #56	; 0x38
   16b74:	str	r9, [sp, #16]
   16b78:	str	r8, [sp, #20]
   16b7c:	ldr	r2, [fp, #-108]	; 0xffffff94
   16b80:	ldr	r3, [fp, #-104]	; 0xffffff98
   16b84:	bl	19778 <__assert_fail@plt+0x8458>
   16b88:	str	r0, [fp, #-112]	; 0xffffff90
   16b8c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16b90:	mov	r4, r9
   16b94:	str	r1, [fp, #-88]	; 0xffffffa8
   16b98:	str	r7, [fp, #-84]	; 0xffffffac
   16b9c:	mov	r9, r6
   16ba0:	str	r0, [fp, #-108]	; 0xffffff94
   16ba4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16ba8:	str	r0, [fp, #-104]	; 0xffffff98
   16bac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16bb0:	str	r0, [sp, #136]	; 0x88
   16bb4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16bb8:	str	r0, [sp, #132]	; 0x84
   16bbc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16bc0:	str	r0, [fp, #-124]	; 0xffffff84
   16bc4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16bc8:	str	r0, [fp, #-128]	; 0xffffff80
   16bcc:	ldr	r0, [sp, #112]	; 0x70
   16bd0:	str	r0, [sp, #108]	; 0x6c
   16bd4:	movw	r1, #1430	; 0x596
   16bd8:	ubfx	r0, r4, #1, #7
   16bdc:	str	r4, [sp, #140]	; 0x8c
   16be0:	str	r8, [sp, #120]	; 0x78
   16be4:	str	sl, [sp, #116]	; 0x74
   16be8:	movt	r1, #3
   16bec:	ldrb	r0, [r1, r0]
   16bf0:	umull	r1, r2, r4, r0
   16bf4:	rsbs	r1, r1, #2
   16bf8:	mla	r2, r8, r0, r2
   16bfc:	umull	r1, r3, r1, r0
   16c00:	rsc	r2, r2, #0
   16c04:	umull	r7, r5, r1, r4
   16c08:	str	r2, [fp, #-96]	; 0xffffffa0
   16c0c:	rsbs	r7, r7, #2
   16c10:	umull	r2, lr, r1, r7
   16c14:	umull	r6, ip, r2, r4
   16c18:	str	r6, [fp, #-100]	; 0xffffff9c
   16c1c:	ldr	r6, [fp, #-96]	; 0xffffffa0
   16c20:	mla	ip, r2, r8, ip
   16c24:	mla	r0, r6, r0, r3
   16c28:	mla	r3, r1, r8, r5
   16c2c:	ldr	r6, [fp, #-124]	; 0xffffff84
   16c30:	mla	r3, r0, r4, r3
   16c34:	rsc	r3, r3, #0
   16c38:	mla	r1, r1, r3, lr
   16c3c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16c40:	mla	r0, r0, r7, r1
   16c44:	mla	r1, r0, r4, ip
   16c48:	ldr	r4, [fp, #-120]	; 0xffffff88
   16c4c:	ldr	ip, [fp, #-128]	; 0xffffff80
   16c50:	rsbs	r3, r3, #2
   16c54:	umull	r5, r7, r2, r3
   16c58:	rsc	r1, r1, #0
   16c5c:	mla	r1, r2, r1, r7
   16c60:	str	r5, [fp, #-96]	; 0xffffffa0
   16c64:	ldr	r2, [fp, #-108]	; 0xffffff94
   16c68:	ldr	r5, [fp, #-112]	; 0xffffff90
   16c6c:	mla	r0, r0, r3, r1
   16c70:	ldr	r3, [fp, #-104]	; 0xffffff98
   16c74:	str	r0, [fp, #-100]	; 0xffffff9c
   16c78:	b	16cb8 <__assert_fail@plt+0x5998>
   16c7c:	ldr	r0, [fp, #-124]	; 0xffffff84
   16c80:	ldr	r1, [sp, #112]	; 0x70
   16c84:	mov	r6, r2
   16c88:	str	r9, [sp, #124]	; 0x7c
   16c8c:	mov	r4, r5
   16c90:	str	r0, [sp, #136]	; 0x88
   16c94:	ldr	r0, [fp, #-128]	; 0xffffff80
   16c98:	str	r1, [fp, #-92]	; 0xffffffa4
   16c9c:	ldr	r1, [fp, #-120]	; 0xffffff88
   16ca0:	str	r0, [sp, #132]	; 0x84
   16ca4:	mov	r0, ip
   16ca8:	mov	ip, r3
   16cac:	str	r1, [sp, #128]	; 0x80
   16cb0:	str	r0, [fp, #-88]	; 0xffffffa8
   16cb4:	mov	r9, r0
   16cb8:	ldr	r1, [sp, #108]	; 0x6c
   16cbc:	str	r1, [sp, #112]	; 0x70
   16cc0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16cc4:	ldr	r1, [sp, #140]	; 0x8c
   16cc8:	str	r2, [fp, #-108]	; 0xffffff94
   16ccc:	str	r3, [fp, #-104]	; 0xffffff98
   16cd0:	str	r5, [fp, #-112]	; 0xffffff90
   16cd4:	str	r8, [sp, #36]	; 0x24
   16cd8:	mov	r2, r6
   16cdc:	mov	r3, ip
   16ce0:	str	r0, [sp, #40]	; 0x28
   16ce4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16ce8:	str	r1, [sp, #32]
   16cec:	str	r0, [sp, #44]	; 0x2c
   16cf0:	stm	sp, {r4, r9}
   16cf4:	str	r4, [sp, #16]
   16cf8:	mov	r4, r8
   16cfc:	sub	r0, fp, #72	; 0x48
   16d00:	str	r9, [sp, #20]
   16d04:	str	r6, [sp, #8]
   16d08:	str	ip, [sp, #12]
   16d0c:	str	sl, [sp, #28]
   16d10:	mov	r9, r1
   16d14:	ldr	r8, [fp, #-84]	; 0xffffffac
   16d18:	str	r8, [sp, #24]
   16d1c:	bl	18f4c <__assert_fail@plt+0x7c2c>
   16d20:	ldr	r7, [fp, #8]
   16d24:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16d28:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16d2c:	mov	lr, r4
   16d30:	adds	r6, r0, r7
   16d34:	adcs	r7, r1, #0
   16d38:	adcs	r5, r2, #0
   16d3c:	ldr	r2, [fp, #-140]	; 0xffffff74
   16d40:	adc	r4, r3, #0
   16d44:	ldr	r3, [fp, #-136]	; 0xffffff78
   16d48:	subs	r0, r8, r5
   16d4c:	sbcs	r0, sl, r4
   16d50:	bcc	16d80 <__assert_fail@plt+0x5a60>
   16d54:	subs	r0, r6, r9
   16d58:	mov	ip, r9
   16d5c:	sbcs	r0, r7, lr
   16d60:	bcc	16dac <__assert_fail@plt+0x5a8c>
   16d64:	ldr	r8, [fp, #-84]	; 0xffffffac
   16d68:	mov	r9, lr
   16d6c:	eor	r1, r4, sl
   16d70:	mov	r9, ip
   16d74:	eor	r0, r5, r8
   16d78:	orrs	r0, r0, r1
   16d7c:	bne	16dac <__assert_fail@plt+0x5a8c>
   16d80:	subs	r6, r6, r9
   16d84:	mov	r0, #0
   16d88:	mov	ip, r9
   16d8c:	sbcs	r7, r7, lr
   16d90:	movwcc	r0, #1
   16d94:	cmp	r0, #0
   16d98:	mvnne	r0, #0
   16d9c:	subs	r1, r0, r8
   16da0:	sbc	r0, r0, sl
   16da4:	adds	r5, r1, r5
   16da8:	adc	r4, r0, r4
   16dac:	ldr	r0, [sp, #136]	; 0x88
   16db0:	mov	r1, r7
   16db4:	str	r5, [fp, #-124]	; 0xffffff84
   16db8:	str	r4, [fp, #-128]	; 0xffffff80
   16dbc:	str	r6, [fp, #-120]	; 0xffffff88
   16dc0:	str	r1, [fp, #-132]	; 0xffffff7c
   16dc4:	subs	r7, r0, r5
   16dc8:	ldr	r0, [sp, #132]	; 0x84
   16dcc:	sbc	r5, r0, r4
   16dd0:	ldr	r4, [sp, #128]	; 0x80
   16dd4:	subs	sl, r7, #1
   16dd8:	sbc	r0, r5, #0
   16ddc:	subs	lr, r4, r6
   16de0:	ldr	r4, [sp, #124]	; 0x7c
   16de4:	mov	r6, #0
   16de8:	sbcs	r1, r4, r1
   16dec:	movwcc	r6, #1
   16df0:	cmp	r6, #0
   16df4:	moveq	r0, r5
   16df8:	moveq	sl, r7
   16dfc:	cmn	r0, #1
   16e00:	ble	16e1c <__assert_fail@plt+0x5afc>
   16e04:	ldr	r8, [sp, #120]	; 0x78
   16e08:	ldr	r9, [fp, #-88]	; 0xffffffa8
   16e0c:	ldr	r4, [sp, #116]	; 0x74
   16e10:	ldr	r6, [fp, #-84]	; 0xffffffac
   16e14:	mov	r5, ip
   16e18:	b	16e48 <__assert_fail@plt+0x5b28>
   16e1c:	ldr	r6, [fp, #-84]	; 0xffffffac
   16e20:	ldr	r4, [sp, #116]	; 0x74
   16e24:	ldr	r8, [sp, #120]	; 0x78
   16e28:	ldr	r9, [fp, #-88]	; 0xffffffa8
   16e2c:	mov	r5, ip
   16e30:	adds	r7, sl, r6
   16e34:	adc	r0, r0, r4
   16e38:	adds	lr, lr, ip
   16e3c:	adcs	r1, r1, r8
   16e40:	adcs	sl, r7, #0
   16e44:	adc	r0, r0, #0
   16e48:	ldr	r7, [fp, #-96]	; 0xffffffa0
   16e4c:	str	r5, [sp, #32]
   16e50:	str	r8, [sp, #36]	; 0x24
   16e54:	str	r3, [sp]
   16e58:	str	r7, [sp, #40]	; 0x28
   16e5c:	ldr	r7, [fp, #-100]	; 0xffffff9c
   16e60:	str	r7, [sp, #44]	; 0x2c
   16e64:	ldr	r7, [fp, #-116]	; 0xffffff8c
   16e68:	stmib	sp, {r7, sl}
   16e6c:	str	r0, [sp, #12]
   16e70:	sub	r0, fp, #72	; 0x48
   16e74:	str	lr, [sp, #16]
   16e78:	str	r1, [sp, #20]
   16e7c:	str	r6, [sp, #24]
   16e80:	str	r4, [sp, #28]
   16e84:	ldr	r3, [sp, #144]	; 0x90
   16e88:	bl	18f4c <__assert_fail@plt+0x7c2c>
   16e8c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16e90:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16e94:	mov	sl, r4
   16e98:	str	r0, [fp, #-136]	; 0xffffff78
   16e9c:	str	r1, [fp, #-116]	; 0xffffff8c
   16ea0:	and	r7, r2, #31
   16ea4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16ea8:	str	r3, [sp, #144]	; 0x90
   16eac:	cmp	r7, #1
   16eb0:	str	r2, [fp, #-140]	; 0xffffff74
   16eb4:	bne	16f0c <__assert_fail@plt+0x5bec>
   16eb8:	stm	sp, {r0, r1, r6, sl}
   16ebc:	sub	r0, fp, #64	; 0x40
   16ec0:	str	r5, [sp, #16]
   16ec4:	str	r8, [sp, #20]
   16ec8:	bl	1951c <__assert_fail@plt+0x81fc>
   16ecc:	ldr	r9, [fp, #-132]	; 0xffffff7c
   16ed0:	ldr	r4, [fp, #-120]	; 0xffffff88
   16ed4:	ldr	r6, [fp, #-124]	; 0xffffff84
   16ed8:	ldr	ip, [fp, #-128]	; 0xffffff80
   16edc:	eor	r0, r0, #1
   16ee0:	orrs	r0, r0, r1
   16ee4:	bne	17048 <__assert_fail@plt+0x5d28>
   16ee8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16eec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16ef0:	mov	r2, r6
   16ef4:	mov	r3, ip
   16ef8:	orrs	r0, r0, r1
   16efc:	mov	r1, r9
   16f00:	mov	r0, r4
   16f04:	beq	16f28 <__assert_fail@plt+0x5c08>
   16f08:	b	17048 <__assert_fail@plt+0x5d28>
   16f0c:	sub	r3, fp, #112	; 0x70
   16f10:	mov	r1, r9
   16f14:	ldm	r3, {r0, r2, r3}
   16f18:	ldr	r9, [fp, #-132]	; 0xffffff7c
   16f1c:	ldr	r4, [fp, #-120]	; 0xffffff88
   16f20:	ldr	r6, [fp, #-124]	; 0xffffff84
   16f24:	ldr	ip, [fp, #-128]	; 0xffffff80
   16f28:	ldr	r7, [fp, #-92]	; 0xffffffa4
   16f2c:	mov	r5, r0
   16f30:	str	r1, [fp, #-88]	; 0xffffffa8
   16f34:	subs	r7, r7, #1
   16f38:	str	r7, [fp, #-92]	; 0xffffffa4
   16f3c:	bne	16cc0 <__assert_fail@plt+0x59a0>
   16f40:	ldr	r7, [sp, #112]	; 0x70
   16f44:	mov	r2, r6
   16f48:	mov	r3, ip
   16f4c:	mov	r5, r4
   16f50:	str	r6, [sp, #136]	; 0x88
   16f54:	str	ip, [sp, #132]	; 0x84
   16f58:	str	r9, [fp, #-88]	; 0xffffffa8
   16f5c:	str	r4, [sp, #128]	; 0x80
   16f60:	str	r9, [sp, #124]	; 0x7c
   16f64:	lsl	r1, r7, #1
   16f68:	cmp	r7, #0
   16f6c:	mov	r0, r7
   16f70:	str	r7, [fp, #-92]	; 0xffffffa4
   16f74:	beq	16cbc <__assert_fail@plt+0x599c>
   16f78:	mov	r3, ip
   16f7c:	mov	r2, r6
   16f80:	mov	r5, r4
   16f84:	mov	ip, r9
   16f88:	str	r1, [sp, #108]	; 0x6c
   16f8c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16f90:	ldr	r4, [sp, #140]	; 0x8c
   16f94:	str	r8, [sp, #36]	; 0x24
   16f98:	str	r0, [sp, #40]	; 0x28
   16f9c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16fa0:	str	r4, [sp, #32]
   16fa4:	str	r0, [sp, #44]	; 0x2c
   16fa8:	add	r0, sp, #8
   16fac:	stm	sp, {r5, ip}
   16fb0:	stm	r0, {r2, r3, r5, ip}
   16fb4:	sub	r0, fp, #72	; 0x48
   16fb8:	str	sl, [sp, #28]
   16fbc:	ldr	r6, [fp, #-84]	; 0xffffffac
   16fc0:	str	r6, [sp, #24]
   16fc4:	bl	18f4c <__assert_fail@plt+0x7c2c>
   16fc8:	ldr	r5, [fp, #8]
   16fcc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16fd0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16fd4:	adds	r5, r0, r5
   16fd8:	adcs	ip, r1, #0
   16fdc:	adcs	r2, r2, #0
   16fe0:	adc	r3, r3, #0
   16fe4:	subs	r0, r6, r2
   16fe8:	sbcs	r0, sl, r3
   16fec:	bcc	17014 <__assert_fail@plt+0x5cf4>
   16ff0:	subs	r0, r5, r4
   16ff4:	sbcs	r0, ip, r8
   16ff8:	bcc	1703c <__assert_fail@plt+0x5d1c>
   16ffc:	ldr	r6, [fp, #-84]	; 0xffffffac
   17000:	ldr	r4, [sp, #140]	; 0x8c
   17004:	eor	r1, r3, sl
   17008:	eor	r0, r2, r6
   1700c:	orrs	r0, r0, r1
   17010:	bne	1703c <__assert_fail@plt+0x5d1c>
   17014:	subs	r5, r5, r4
   17018:	mov	r0, #0
   1701c:	sbcs	ip, ip, r8
   17020:	movwcc	r0, #1
   17024:	cmp	r0, #0
   17028:	mvnne	r0, #0
   1702c:	subs	r1, r0, r6
   17030:	sbc	r0, r0, sl
   17034:	adds	r2, r1, r2
   17038:	adc	r3, r0, r3
   1703c:	subs	r7, r7, #1
   17040:	bne	16f8c <__assert_fail@plt+0x5c6c>
   17044:	b	16c7c <__assert_fail@plt+0x595c>
   17048:	ldr	r0, [sp, #136]	; 0x88
   1704c:	ldr	r2, [fp, #-108]	; 0xffffff94
   17050:	ldr	r3, [fp, #-104]	; 0xffffff98
   17054:	ldr	r9, [sp, #140]	; 0x8c
   17058:	str	r6, [fp, #-40]	; 0xffffffd8
   1705c:	str	ip, [fp, #-36]	; 0xffffffdc
   17060:	str	r0, [fp, #-48]	; 0xffffffd0
   17064:	ldr	r0, [sp, #132]	; 0x84
   17068:	str	r2, [fp, #-56]	; 0xffffffc8
   1706c:	str	r3, [fp, #-52]	; 0xffffffcc
   17070:	str	r0, [fp, #-44]	; 0xffffffd4
   17074:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17078:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1707c:	str	r9, [sp, #32]
   17080:	str	r8, [sp, #36]	; 0x24
   17084:	str	r0, [sp, #40]	; 0x28
   17088:	ldr	r0, [fp, #-100]	; 0xffffff9c
   1708c:	str	r0, [sp, #44]	; 0x2c
   17090:	ldr	r0, [fp, #-112]	; 0xffffff90
   17094:	str	r0, [sp]
   17098:	stmib	sp, {r1, r2, r3}
   1709c:	str	r0, [sp, #16]
   170a0:	sub	r0, fp, #72	; 0x48
   170a4:	str	r1, [sp, #20]
   170a8:	str	sl, [sp, #28]
   170ac:	ldr	r6, [fp, #-84]	; 0xffffffac
   170b0:	str	r6, [sp, #24]
   170b4:	bl	18f4c <__assert_fail@plt+0x7c2c>
   170b8:	ldr	r7, [fp, #8]
   170bc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   170c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   170c4:	adds	lr, r0, r7
   170c8:	adcs	r5, r1, #0
   170cc:	adcs	ip, r2, #0
   170d0:	adc	r4, r3, #0
   170d4:	subs	r0, r6, ip
   170d8:	sbcs	r0, sl, r4
   170dc:	bcc	170fc <__assert_fail@plt+0x5ddc>
   170e0:	subs	r0, lr, r9
   170e4:	sbcs	r0, r5, r8
   170e8:	bcc	17124 <__assert_fail@plt+0x5e04>
   170ec:	eor	r0, ip, r6
   170f0:	eor	r1, r4, sl
   170f4:	orrs	r0, r0, r1
   170f8:	bne	17124 <__assert_fail@plt+0x5e04>
   170fc:	subs	lr, lr, r9
   17100:	mov	r0, #0
   17104:	sbcs	r5, r5, r8
   17108:	movwcc	r0, #1
   1710c:	cmp	r0, #0
   17110:	mvnne	r0, #0
   17114:	subs	r1, r0, r6
   17118:	sbc	r0, r0, sl
   1711c:	adds	ip, r1, ip
   17120:	adc	r4, r0, r4
   17124:	ldr	r0, [sp, #136]	; 0x88
   17128:	ldr	r1, [sp, #124]	; 0x7c
   1712c:	str	r5, [fp, #-88]	; 0xffffffa8
   17130:	str	r4, [fp, #-104]	; 0xffffff98
   17134:	str	ip, [fp, #-108]	; 0xffffff94
   17138:	str	lr, [fp, #-112]	; 0xffffff90
   1713c:	subs	r7, r0, ip
   17140:	ldr	r0, [sp, #132]	; 0x84
   17144:	sbc	r6, r0, r4
   17148:	ldr	r0, [sp, #128]	; 0x80
   1714c:	subs	r2, r7, #1
   17150:	sbc	r3, r6, #0
   17154:	subs	r0, r0, lr
   17158:	sbcs	r1, r1, r5
   1715c:	mov	r5, #0
   17160:	movwcc	r5, #1
   17164:	cmp	r5, #0
   17168:	moveq	r3, r6
   1716c:	moveq	r2, r7
   17170:	cmn	r3, #1
   17174:	ble	17184 <__assert_fail@plt+0x5e64>
   17178:	ldr	r8, [sp, #120]	; 0x78
   1717c:	ldr	r7, [fp, #-84]	; 0xffffffac
   17180:	b	171a4 <__assert_fail@plt+0x5e84>
   17184:	ldr	r7, [fp, #-84]	; 0xffffffac
   17188:	ldr	r8, [sp, #120]	; 0x78
   1718c:	adds	r2, r2, r7
   17190:	adc	r3, r3, sl
   17194:	adds	r0, r0, r9
   17198:	adcs	r1, r1, r8
   1719c:	adcs	r2, r2, #0
   171a0:	adc	r3, r3, #0
   171a4:	stm	sp, {r0, r1, r7, sl}
   171a8:	sub	r0, fp, #64	; 0x40
   171ac:	str	r9, [sp, #16]
   171b0:	str	r8, [sp, #20]
   171b4:	bl	1951c <__assert_fail@plt+0x81fc>
   171b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   171bc:	ldr	r5, [fp, #-60]	; 0xffffffc4
   171c0:	ldr	r3, [fp, #-104]	; 0xffffff98
   171c4:	ldr	r2, [fp, #-108]	; 0xffffff94
   171c8:	mov	r4, r0
   171cc:	eor	r0, r0, #1
   171d0:	mov	r6, r1
   171d4:	orrs	r0, r0, r1
   171d8:	orrseq	r0, r7, r5
   171dc:	beq	17074 <__assert_fail@plt+0x5d54>
   171e0:	orrs	r0, r7, r5
   171e4:	str	r2, [fp, #-56]	; 0xffffffc8
   171e8:	str	r3, [fp, #-52]	; 0xffffffcc
   171ec:	str	r6, [sp, #116]	; 0x74
   171f0:	bne	176e0 <__assert_fail@plt+0x63c0>
   171f4:	movw	r1, #1430	; 0x596
   171f8:	ubfx	r0, r4, #1, #7
   171fc:	str	r4, [fp, #-96]	; 0xffffffa0
   17200:	movt	r1, #3
   17204:	ldrb	r0, [r1, r0]
   17208:	umull	r1, r2, r4, r0
   1720c:	rsbs	r1, r1, #2
   17210:	mla	r2, r6, r0, r2
   17214:	umull	r1, r3, r1, r0
   17218:	rsc	r2, r2, #0
   1721c:	mla	r2, r2, r0, r3
   17220:	umull	r0, r3, r1, r4
   17224:	mla	r3, r1, r6, r3
   17228:	rsbs	r7, r0, #2
   1722c:	ldr	r6, [sp, #116]	; 0x74
   17230:	mla	r3, r2, r4, r3
   17234:	rsc	r0, r3, #0
   17238:	str	r0, [fp, #-100]	; 0xffffff9c
   1723c:	umull	r5, r0, r1, r7
   17240:	str	r0, [sp, #104]	; 0x68
   17244:	umull	r0, r8, r5, r4
   17248:	mov	r4, r9
   1724c:	rsbs	r0, r0, #2
   17250:	mla	r8, r5, r6, r8
   17254:	ldr	r6, [fp, #-100]	; 0xffffff9c
   17258:	umull	lr, r3, r5, r0
   1725c:	str	r3, [sp, #108]	; 0x6c
   17260:	ldr	r3, [sp, #120]	; 0x78
   17264:	umull	r9, ip, lr, r9
   17268:	mla	ip, lr, r3, ip
   1726c:	ldr	r3, [sp, #104]	; 0x68
   17270:	mla	r1, r1, r6, r3
   17274:	ldr	r3, [sp, #108]	; 0x6c
   17278:	ldr	r6, [fp, #-84]	; 0xffffffac
   1727c:	mla	r1, r2, r7, r1
   17280:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17284:	mla	r2, r1, r2, r8
   17288:	rsc	r2, r2, #0
   1728c:	mla	r2, r5, r2, r3
   17290:	mla	r5, r1, r0, r2
   17294:	ldr	r1, [sp, #116]	; 0x74
   17298:	mov	r0, #0
   1729c:	mla	r8, r5, r4, ip
   172a0:	ldr	r4, [fp, #-96]	; 0xffffffa0
   172a4:	str	r0, [fp, #-100]	; 0xffffff9c
   172a8:	subs	r0, r6, r4
   172ac:	sbcs	r0, sl, r1
   172b0:	mov	r0, #0
   172b4:	str	r0, [sp, #140]	; 0x8c
   172b8:	bcc	17318 <__assert_fail@plt+0x5ff8>
   172bc:	umull	r0, r2, r9, r1
   172c0:	mov	r3, r9
   172c4:	umlal	r0, r2, r8, r4
   172c8:	umull	r3, r7, r9, r4
   172cc:	adds	r0, r0, r7
   172d0:	umull	r3, r7, r8, r4
   172d4:	adc	r2, r2, #0
   172d8:	subs	r0, r0, r3
   172dc:	sbcs	r0, r2, r7
   172e0:	umull	r3, r7, r8, r1
   172e4:	mov	r0, #0
   172e8:	movwcc	r0, #1
   172ec:	cmp	r0, #0
   172f0:	addne	r7, r7, #1
   172f4:	subs	r0, r6, r2
   172f8:	sbc	r2, sl, #0
   172fc:	subs	r0, r0, r3
   17300:	umull	r6, r3, r0, lr
   17304:	sbc	r2, r2, r7
   17308:	mla	r0, r0, r5, r3
   1730c:	str	r6, [fp, #-100]	; 0xffffff9c
   17310:	mla	r0, r2, lr, r0
   17314:	str	r0, [sp, #140]	; 0x8c
   17318:	mov	r0, r4
   1731c:	mov	r5, r1
   17320:	bl	17ba0 <__assert_fail@plt+0x6880>
   17324:	cmp	r0, #0
   17328:	beq	17394 <__assert_fail@plt+0x6074>
   1732c:	ldr	r7, [fp, #12]
   17330:	ldrb	lr, [r7, #250]	; 0xfa
   17334:	sub	r1, lr, #1
   17338:	cmp	lr, #0
   1733c:	beq	173b4 <__assert_fail@plt+0x6094>
   17340:	ldr	r0, [sp, #116]	; 0x74
   17344:	mov	r2, #8
   17348:	mov	sl, r8
   1734c:	add	r6, lr, #223	; 0xdf
   17350:	add	r3, r2, lr, lsl #3
   17354:	mov	ip, r0
   17358:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1735c:	mov	r5, r7
   17360:	ldr	r2, [r5, r3]!
   17364:	ldr	r5, [r5, #4]
   17368:	subs	r4, r0, r2
   1736c:	sbcs	r4, ip, r5
   17370:	bcs	173cc <__assert_fail@plt+0x60ac>
   17374:	sub	r2, r6, #1
   17378:	sub	r6, r6, #224	; 0xe0
   1737c:	sub	r3, r3, #8
   17380:	cmp	r6, #0
   17384:	mov	r6, r2
   17388:	bgt	1735c <__assert_fail@plt+0x603c>
   1738c:	sub	r2, r2, #224	; 0xe0
   17390:	b	173f4 <__assert_fail@plt+0x60d4>
   17394:	ldr	r2, [sp, #100]	; 0x64
   17398:	ldr	r3, [fp, #12]
   1739c:	mov	r0, r4
   173a0:	mov	r1, r5
   173a4:	bl	15934 <__assert_fail@plt+0x4614>
   173a8:	ldr	r4, [fp, #-124]	; 0xffffff84
   173ac:	ldr	r5, [fp, #-88]	; 0xffffffa8
   173b0:	b	17688 <__assert_fail@plt+0x6368>
   173b4:	ldr	r0, [sp, #116]	; 0x74
   173b8:	ldr	r4, [fp, #-124]	; 0xffffff84
   173bc:	ldr	r5, [fp, #-88]	; 0xffffffa8
   173c0:	mov	ip, r0
   173c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   173c8:	b	17664 <__assert_fail@plt+0x6344>
   173cc:	eor	r2, r2, r0
   173d0:	eor	r3, r5, ip
   173d4:	orrs	r2, r2, r3
   173d8:	bne	173f0 <__assert_fail@plt+0x60d0>
   173dc:	ldrb	r0, [r7, r6]
   173e0:	mov	r8, sl
   173e4:	add	r0, r0, #1
   173e8:	strb	r0, [r7, r6]
   173ec:	b	173a8 <__assert_fail@plt+0x6088>
   173f0:	sub	r2, r6, #224	; 0xe0
   173f4:	ldr	r4, [fp, #-124]	; 0xffffff84
   173f8:	ldr	r5, [fp, #-88]	; 0xffffffa8
   173fc:	cmp	r1, r2
   17400:	ble	17608 <__assert_fail@plt+0x62e8>
   17404:	mvn	r3, r2
   17408:	add	r3, r3, lr
   1740c:	cmp	r3, #1
   17410:	bls	17628 <__assert_fail@plt+0x6308>
   17414:	str	r3, [sp, #120]	; 0x78
   17418:	sub	r3, lr, #2
   1741c:	mov	r6, #8
   17420:	sub	r3, r3, r2
   17424:	umull	r4, r5, r3, r6
   17428:	add	r6, r7, lr, lsl #3
   1742c:	cmp	r5, #0
   17430:	add	r6, r6, #16
   17434:	movwne	r5, #1
   17438:	cmp	r4, r6
   1743c:	bhi	17628 <__assert_fail@plt+0x6308>
   17440:	cmp	r5, #0
   17444:	bne	17628 <__assert_fail@plt+0x6308>
   17448:	str	r6, [sp, #108]	; 0x6c
   1744c:	add	r6, r7, lr
   17450:	add	ip, r6, #224	; 0xe0
   17454:	cmp	r3, ip
   17458:	ldrls	r6, [sp, #96]	; 0x60
   1745c:	addls	r6, r6, lr, lsl #3
   17460:	cmpls	r4, r6
   17464:	bhi	1761c <__assert_fail@plt+0x62fc>
   17468:	cmp	r5, #0
   1746c:	bne	1761c <__assert_fail@plt+0x62fc>
   17470:	ldr	r4, [sp, #92]	; 0x5c
   17474:	add	r5, r4, lr
   17478:	cmp	r3, r5
   1747c:	bhi	1761c <__assert_fail@plt+0x62fc>
   17480:	ldr	r3, [sp, #80]	; 0x50
   17484:	ldr	r7, [sp, #84]	; 0x54
   17488:	mov	r4, #0
   1748c:	str	r9, [fp, #-84]	; 0xffffffac
   17490:	add	r8, r3, r2
   17494:	ldr	r3, [sp, #88]	; 0x58
   17498:	add	r9, r7, r2, lsl #3
   1749c:	add	r7, r7, lr, lsl #3
   174a0:	add	r0, r3, lr
   174a4:	add	r3, r3, r2
   174a8:	cmp	r3, r0
   174ac:	str	r0, [sp, #104]	; 0x68
   174b0:	movwcc	r4, #1
   174b4:	cmp	r8, ip
   174b8:	str	r4, [sp, #56]	; 0x38
   174bc:	mov	r4, #0
   174c0:	movwcc	r4, #1
   174c4:	cmp	r0, r9
   174c8:	mov	r0, #0
   174cc:	str	r4, [sp, #52]	; 0x34
   174d0:	mov	r4, #0
   174d4:	movwhi	r4, #1
   174d8:	str	r4, [sp, #64]	; 0x40
   174dc:	ldr	r4, [sp, #108]	; 0x6c
   174e0:	cmp	r8, r4
   174e4:	movwcc	r0, #1
   174e8:	cmp	r3, r7
   174ec:	ldr	r3, [sp, #76]	; 0x4c
   174f0:	str	r0, [sp, #60]	; 0x3c
   174f4:	mov	r0, #0
   174f8:	movwcc	r0, #1
   174fc:	str	r0, [sp, #72]	; 0x48
   17500:	add	r0, r3, r2, lsl #3
   17504:	mov	r3, #0
   17508:	cmp	ip, r0
   1750c:	mov	ip, #0
   17510:	movwhi	r3, #1
   17514:	cmp	r9, r7
   17518:	mov	r9, #0
   1751c:	str	r3, [sp, #68]	; 0x44
   17520:	ldr	r3, [sp, #104]	; 0x68
   17524:	movwcc	r9, #1
   17528:	cmp	r0, r4
   1752c:	mov	r4, #0
   17530:	movwcc	ip, #1
   17534:	cmp	r8, r7
   17538:	movwcc	r4, #1
   1753c:	cmp	r3, r0
   17540:	mov	r3, #0
   17544:	movwhi	r3, #1
   17548:	tst	r3, r4
   1754c:	bne	17614 <__assert_fail@plt+0x62f4>
   17550:	ands	r3, ip, r9
   17554:	ldr	r7, [fp, #12]
   17558:	ldr	r9, [fp, #-84]	; 0xffffffac
   1755c:	bne	1761c <__assert_fail@plt+0x62fc>
   17560:	ldr	r0, [sp, #72]	; 0x48
   17564:	ldr	r3, [sp, #68]	; 0x44
   17568:	ands	r3, r3, r0
   1756c:	ldr	r0, [sp, #116]	; 0x74
   17570:	mov	ip, r0
   17574:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17578:	bne	17628 <__assert_fail@plt+0x6308>
   1757c:	ldr	r3, [sp, #64]	; 0x40
   17580:	ldr	r4, [sp, #60]	; 0x3c
   17584:	ands	r3, r4, r3
   17588:	ldreq	r3, [sp, #56]	; 0x38
   1758c:	ldreq	r4, [sp, #52]	; 0x34
   17590:	andseq	r3, r4, r3
   17594:	bne	17628 <__assert_fail@plt+0x6308>
   17598:	ldr	r0, [sp, #120]	; 0x78
   1759c:	mvn	r8, #15
   175a0:	bic	ip, r0, #1
   175a4:	sub	r0, fp, #76	; 0x4c
   175a8:	sub	r1, r1, ip
   175ac:	mov	r3, ip
   175b0:	sub	r4, r6, #8
   175b4:	subs	r3, r3, #2
   175b8:	vld1.64	{d16-d17}, [r4]
   175bc:	vst1.64	{d16-d17}, [r6], r8
   175c0:	ldrh	r4, [r5, #-1]
   175c4:	strh	r4, [fp, #-76]	; 0xffffffb4
   175c8:	vld1.16	{d16[0]}, [r0 :16]
   175cc:	vmovl.u8	q8, d16
   175d0:	vmovl.u16	q8, d16
   175d4:	vmov.32	r4, d16[1]
   175d8:	strb	r4, [r5, #1]
   175dc:	vmov.32	r4, d16[0]
   175e0:	strb	r4, [r5]
   175e4:	sub	r5, r5, #2
   175e8:	bne	175b0 <__assert_fail@plt+0x6290>
   175ec:	ldr	r0, [sp, #120]	; 0x78
   175f0:	cmp	r0, ip
   175f4:	ldr	r0, [sp, #116]	; 0x74
   175f8:	mov	ip, r0
   175fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17600:	bne	17628 <__assert_fail@plt+0x6308>
   17604:	b	17654 <__assert_fail@plt+0x6334>
   17608:	mov	r8, sl
   1760c:	mov	r1, r2
   17610:	b	17664 <__assert_fail@plt+0x6344>
   17614:	ldr	r7, [fp, #12]
   17618:	ldr	r9, [fp, #-84]	; 0xffffffac
   1761c:	ldr	r0, [sp, #116]	; 0x74
   17620:	mov	ip, r0
   17624:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17628:	lsl	r3, r1, #3
   1762c:	add	r6, r7, r3
   17630:	sub	r3, r3, #8
   17634:	ldrd	r4, [r6, #16]
   17638:	strd	r4, [r6, #24]
   1763c:	add	r6, r7, r1
   17640:	sub	r1, r1, #1
   17644:	ldrb	r5, [r6, #224]	; 0xe0
   17648:	cmp	r1, r2
   1764c:	strb	r5, [r6, #225]	; 0xe1
   17650:	bgt	1762c <__assert_fail@plt+0x630c>
   17654:	ldr	r4, [fp, #-124]	; 0xffffff84
   17658:	ldr	r5, [fp, #-88]	; 0xffffffa8
   1765c:	mov	r1, r2
   17660:	mov	r8, sl
   17664:	add	r1, r1, #1
   17668:	add	r2, r7, r1, lsl #3
   1766c:	add	r1, r7, r1
   17670:	str	r0, [r2, #16]
   17674:	str	ip, [r2, #20]
   17678:	mov	r2, #1
   1767c:	add	r0, lr, #1
   17680:	strb	r2, [r1, #224]	; 0xe0
   17684:	strb	r0, [r7, #250]	; 0xfa
   17688:	ldr	r7, [fp, #-100]	; 0xffffff9c
   1768c:	ldr	sl, [sp, #140]	; 0x8c
   17690:	orrs	r0, r7, sl
   17694:	beq	17868 <__assert_fail@plt+0x6548>
   17698:	mov	r0, r7
   1769c:	mov	r1, sl
   176a0:	mov	r2, r9
   176a4:	mov	r3, r8
   176a8:	bl	14f34 <__assert_fail@plt+0x3c14>
   176ac:	cmp	r0, #0
   176b0:	beq	16b08 <__assert_fail@plt+0x57e8>
   176b4:	ldr	r3, [fp, #12]
   176b8:	mov	r0, r3
   176bc:	ldr	r1, [r0, #8]!
   176c0:	ldr	r2, [r0, #4]
   176c4:	orrs	r1, r1, r2
   176c8:	streq	r9, [r3]
   176cc:	streq	r8, [r3, #4]
   176d0:	stmeq	r0, {r7, sl}
   176d4:	subeq	sp, fp, #28
   176d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176dc:	b	177f4 <__assert_fail@plt+0x64d4>
   176e0:	ldr	r2, [fp, #-84]	; 0xffffffac
   176e4:	eor	r0, r9, r4
   176e8:	eor	r1, r8, r6
   176ec:	orrs	r0, r0, r1
   176f0:	eoreq	r1, sl, r5
   176f4:	eoreq	r0, r2, r7
   176f8:	orrseq	r0, r0, r1
   176fc:	beq	17814 <__assert_fail@plt+0x64f4>
   17700:	movw	r1, #1430	; 0x596
   17704:	ubfx	r0, r4, #1, #7
   17708:	mov	sl, r4
   1770c:	movt	r1, #3
   17710:	ldrb	r0, [r1, r0]
   17714:	umull	r1, r2, r4, r0
   17718:	rsbs	r1, r1, #2
   1771c:	mla	r2, r6, r0, r2
   17720:	umull	r1, r3, r1, r0
   17724:	rsc	r2, r2, #0
   17728:	mla	r0, r2, r0, r3
   1772c:	umull	r2, r3, r1, r4
   17730:	mla	r3, r1, r6, r3
   17734:	rsbs	ip, r2, #2
   17738:	str	r0, [fp, #-88]	; 0xffffffa8
   1773c:	ldr	r2, [sp, #120]	; 0x78
   17740:	mla	r3, r0, r4, r3
   17744:	rsc	r0, r3, #0
   17748:	str	r0, [fp, #-92]	; 0xffffffa4
   1774c:	umull	r6, r0, r1, ip
   17750:	str	r0, [fp, #-100]	; 0xffffff9c
   17754:	umull	r3, r0, r6, r4
   17758:	rsbs	r8, r3, #2
   1775c:	str	r0, [fp, #-104]	; 0xffffff98
   17760:	ldr	r3, [sp, #116]	; 0x74
   17764:	umull	r4, r0, r6, r8
   17768:	str	r0, [fp, #-96]	; 0xffffffa0
   1776c:	umull	lr, r0, r4, r9
   17770:	str	lr, [fp, #-84]	; 0xffffffac
   17774:	mla	lr, r4, r2, r0
   17778:	ldr	r0, [fp, #-104]	; 0xffffff98
   1777c:	ldr	r4, [fp, #-100]	; 0xffffff9c
   17780:	mla	r2, r6, r3, r0
   17784:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17788:	mla	r1, r1, r0, r4
   1778c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17790:	mla	r1, r0, ip, r1
   17794:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17798:	mla	r2, r1, sl, r2
   1779c:	rsc	r2, r2, #0
   177a0:	mla	r2, r6, r2, r0
   177a4:	mov	r0, r7
   177a8:	mov	r6, r3
   177ac:	mla	r1, r1, r8, r2
   177b0:	mov	r2, sl
   177b4:	mla	r8, r1, r9, lr
   177b8:	mov	r1, r5
   177bc:	bl	14f34 <__assert_fail@plt+0x3c14>
   177c0:	cmp	r0, #0
   177c4:	beq	17840 <__assert_fail@plt+0x6520>
   177c8:	ldr	r3, [fp, #12]
   177cc:	mov	r0, r3
   177d0:	ldr	r1, [r0, #8]!
   177d4:	ldr	r2, [r0, #4]
   177d8:	orrs	r1, r1, r2
   177dc:	bne	177f4 <__assert_fail@plt+0x64d4>
   177e0:	str	sl, [r3]
   177e4:	str	r6, [r3, #4]
   177e8:	str	r7, [r0]
   177ec:	str	r5, [r0, #4]
   177f0:	b	17864 <__assert_fail@plt+0x6544>
   177f4:	movw	r0, #54255	; 0xd3ef
   177f8:	movw	r1, #53944	; 0xd2b8
   177fc:	movw	r3, #54279	; 0xd407
   17800:	movw	r2, #558	; 0x22e
   17804:	movt	r0, #2
   17808:	movt	r1, #2
   1780c:	movt	r3, #2
   17810:	bl	11320 <__assert_fail@plt>
   17814:	ldr	r0, [sp, #100]	; 0x64
   17818:	mov	r1, sl
   1781c:	mov	r3, r8
   17820:	str	r0, [sp]
   17824:	ldr	r0, [fp, #12]
   17828:	str	r0, [sp, #4]
   1782c:	mov	r0, r2
   17830:	mov	r2, r9
   17834:	bl	16890 <__assert_fail@plt+0x5570>
   17838:	sub	sp, fp, #28
   1783c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17840:	ldr	r0, [sp, #100]	; 0x64
   17844:	mov	r1, r5
   17848:	mov	r2, sl
   1784c:	mov	r3, r6
   17850:	str	r0, [sp]
   17854:	ldr	r0, [fp, #12]
   17858:	str	r0, [sp, #4]
   1785c:	mov	r0, r7
   17860:	bl	16890 <__assert_fail@plt+0x5570>
   17864:	ldr	r9, [fp, #-84]	; 0xffffffac
   17868:	mov	r0, r9
   1786c:	mov	r1, r8
   17870:	bl	17ba0 <__assert_fail@plt+0x6880>
   17874:	cmp	r0, #0
   17878:	beq	17ae0 <__assert_fail@plt+0x67c0>
   1787c:	ldr	ip, [fp, #12]
   17880:	ldrb	r0, [ip, #250]	; 0xfa
   17884:	sub	r1, r0, #1
   17888:	cmp	r0, #0
   1788c:	beq	17b74 <__assert_fail@plt+0x6854>
   17890:	mov	r2, #8
   17894:	mov	sl, r9
   17898:	mov	r9, r8
   1789c:	add	r7, r0, #223	; 0xdf
   178a0:	add	r3, r2, r0, lsl #3
   178a4:	mov	r6, ip
   178a8:	ldr	r2, [r6, r3]!
   178ac:	ldr	r6, [r6, #4]
   178b0:	subs	r5, sl, r2
   178b4:	sbcs	r5, r9, r6
   178b8:	bcs	17afc <__assert_fail@plt+0x67dc>
   178bc:	sub	r2, r7, #1
   178c0:	sub	r7, r7, #224	; 0xe0
   178c4:	sub	r3, r3, #8
   178c8:	cmp	r7, #0
   178cc:	mov	r7, r2
   178d0:	bgt	178a4 <__assert_fail@plt+0x6584>
   178d4:	sub	r2, r2, #224	; 0xe0
   178d8:	mov	r8, r9
   178dc:	cmp	r1, r2
   178e0:	ble	17b30 <__assert_fail@plt+0x6810>
   178e4:	mvn	r3, r2
   178e8:	add	r5, r3, r0
   178ec:	cmp	r5, #1
   178f0:	bls	17b3c <__assert_fail@plt+0x681c>
   178f4:	sub	r3, r0, #2
   178f8:	add	ip, ip, r0, lsl #3
   178fc:	sub	r4, r3, r2
   17900:	mov	r3, #8
   17904:	add	lr, ip, #16
   17908:	umull	r8, r6, r4, r3
   1790c:	cmp	r6, #0
   17910:	movwne	r6, #1
   17914:	cmp	r8, lr
   17918:	bhi	17b38 <__assert_fail@plt+0x6818>
   1791c:	cmp	r6, #0
   17920:	bne	17b38 <__assert_fail@plt+0x6818>
   17924:	ldr	r3, [fp, #12]
   17928:	add	r3, r3, r0
   1792c:	add	r7, r3, #224	; 0xe0
   17930:	cmp	r4, r7
   17934:	bhi	17b38 <__assert_fail@plt+0x6818>
   17938:	add	r7, ip, #8
   1793c:	cmp	r8, r7
   17940:	bhi	17b38 <__assert_fail@plt+0x6818>
   17944:	cmp	r6, #0
   17948:	bne	17b38 <__assert_fail@plt+0x6818>
   1794c:	add	r6, r3, #223	; 0xdf
   17950:	cmp	r4, r6
   17954:	bhi	17b38 <__assert_fail@plt+0x6818>
   17958:	ldr	r3, [fp, #12]
   1795c:	str	r5, [fp, #-120]	; 0xffffff88
   17960:	add	r5, ip, #24
   17964:	str	r5, [fp, #-84]	; 0xffffffac
   17968:	mov	r8, r3
   1796c:	add	r3, r3, r2, lsl #3
   17970:	add	r4, r3, #32
   17974:	add	r3, r3, #24
   17978:	cmp	r3, r5
   1797c:	mov	r5, #0
   17980:	str	r4, [fp, #-88]	; 0xffffffa8
   17984:	str	r3, [fp, #-92]	; 0xffffffa4
   17988:	mov	r3, #0
   1798c:	movwcc	r5, #1
   17990:	cmp	r4, lr
   17994:	add	r4, r8, #224	; 0xe0
   17998:	str	r5, [fp, #-100]	; 0xffffff9c
   1799c:	mov	r5, #0
   179a0:	movwcc	r5, #1
   179a4:	str	r5, [fp, #-104]	; 0xffffff98
   179a8:	add	r5, r4, r2
   179ac:	add	r4, r4, r0
   179b0:	add	r8, r5, #2
   179b4:	add	ip, r4, #1
   179b8:	add	r5, r5, #1
   179bc:	cmp	r5, ip
   179c0:	str	ip, [fp, #-96]	; 0xffffffa0
   179c4:	movwcc	r3, #1
   179c8:	cmp	r8, r4
   179cc:	str	r3, [fp, #-112]	; 0xffffff90
   179d0:	mov	r3, #0
   179d4:	movwcc	r3, #1
   179d8:	str	r3, [fp, #-116]	; 0xffffff8c
   179dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   179e0:	cmp	ip, r3
   179e4:	mov	r3, #0
   179e8:	ldr	ip, [fp, #-88]	; 0xffffffa8
   179ec:	movwhi	r3, #1
   179f0:	cmp	r8, lr
   179f4:	mov	lr, #0
   179f8:	str	r3, [fp, #-92]	; 0xffffffa4
   179fc:	mov	r3, #0
   17a00:	movwcc	r3, #1
   17a04:	str	r3, [fp, #-108]	; 0xffffff94
   17a08:	ldr	r3, [fp, #-84]	; 0xffffffac
   17a0c:	cmp	r4, ip
   17a10:	mov	r4, #0
   17a14:	movwhi	lr, #1
   17a18:	cmp	r5, r3
   17a1c:	mov	r5, #0
   17a20:	movwcc	r4, #1
   17a24:	cmp	r8, r3
   17a28:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17a2c:	movwcc	r5, #1
   17a30:	cmp	r3, ip
   17a34:	mov	r3, #0
   17a38:	movwhi	r3, #1
   17a3c:	tst	r3, r5
   17a40:	bne	17b38 <__assert_fail@plt+0x6818>
   17a44:	ldr	r5, [fp, #-100]	; 0xffffff9c
   17a48:	ldr	r3, [fp, #-104]	; 0xffffff98
   17a4c:	ands	r5, r3, r5
   17a50:	bne	17b38 <__assert_fail@plt+0x6818>
   17a54:	ands	r3, lr, r4
   17a58:	bne	17b38 <__assert_fail@plt+0x6818>
   17a5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a60:	ldr	r5, [fp, #-108]	; 0xffffff94
   17a64:	ands	r3, r5, r3
   17a68:	bne	17b38 <__assert_fail@plt+0x6818>
   17a6c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a70:	ldr	r5, [fp, #-116]	; 0xffffff8c
   17a74:	ands	r3, r5, r3
   17a78:	bne	17b38 <__assert_fail@plt+0x6818>
   17a7c:	ldr	r8, [fp, #-120]	; 0xffffff88
   17a80:	mvn	lr, #15
   17a84:	sub	r4, fp, #80	; 0x50
   17a88:	bic	ip, r8, #1
   17a8c:	sub	r1, r1, ip
   17a90:	mov	r3, ip
   17a94:	sub	r5, r7, #8
   17a98:	subs	r3, r3, #2
   17a9c:	vld1.64	{d16-d17}, [r5]
   17aa0:	vst1.64	{d16-d17}, [r7], lr
   17aa4:	ldrh	r5, [r6, #-1]
   17aa8:	strh	r5, [fp, #-80]	; 0xffffffb0
   17aac:	vld1.16	{d16[0]}, [r4 :16]
   17ab0:	vmovl.u8	q8, d16
   17ab4:	vmovl.u16	q8, d16
   17ab8:	vmov.32	r5, d16[1]
   17abc:	strb	r5, [r6, #1]
   17ac0:	vmov.32	r5, d16[0]
   17ac4:	strb	r5, [r6]
   17ac8:	sub	r6, r6, #2
   17acc:	bne	17a94 <__assert_fail@plt+0x6774>
   17ad0:	cmp	r8, ip
   17ad4:	ldr	ip, [fp, #12]
   17ad8:	bne	17b3c <__assert_fail@plt+0x681c>
   17adc:	b	17b68 <__assert_fail@plt+0x6848>
   17ae0:	ldr	r2, [fp, #8]
   17ae4:	ldr	r3, [fp, #12]
   17ae8:	mov	r0, r9
   17aec:	mov	r1, r8
   17af0:	bl	15934 <__assert_fail@plt+0x4614>
   17af4:	sub	sp, fp, #28
   17af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17afc:	eor	r2, r2, sl
   17b00:	eor	r3, r6, r9
   17b04:	orrs	r2, r2, r3
   17b08:	bne	17b20 <__assert_fail@plt+0x6800>
   17b0c:	ldrb	r0, [ip, r7]
   17b10:	add	r0, r0, #1
   17b14:	strb	r0, [ip, r7]
   17b18:	sub	sp, fp, #28
   17b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b20:	mov	r8, r9
   17b24:	sub	r2, r7, #224	; 0xe0
   17b28:	cmp	r1, r2
   17b2c:	bgt	178e4 <__assert_fail@plt+0x65c4>
   17b30:	mov	r1, r2
   17b34:	b	17b70 <__assert_fail@plt+0x6850>
   17b38:	ldr	ip, [fp, #12]
   17b3c:	lsl	r3, r1, #3
   17b40:	add	r7, ip, r3
   17b44:	sub	r3, r3, #8
   17b48:	ldrd	r4, [r7, #16]
   17b4c:	strd	r4, [r7, #24]
   17b50:	add	r7, ip, r1
   17b54:	sub	r1, r1, #1
   17b58:	ldrb	r6, [r7, #224]	; 0xe0
   17b5c:	cmp	r1, r2
   17b60:	strb	r6, [r7, #225]	; 0xe1
   17b64:	bgt	17b40 <__assert_fail@plt+0x6820>
   17b68:	mov	r1, r2
   17b6c:	mov	r8, r9
   17b70:	mov	r9, sl
   17b74:	add	r1, r1, #1
   17b78:	add	r0, r0, #1
   17b7c:	add	r2, ip, r1, lsl #3
   17b80:	add	r1, ip, r1
   17b84:	str	r9, [r2, #16]
   17b88:	str	r8, [r2, #20]
   17b8c:	mov	r2, #1
   17b90:	strb	r2, [r1, #224]	; 0xe0
   17b94:	strb	r0, [ip, #250]	; 0xfa
   17b98:	sub	sp, fp, #28
   17b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba4:	add	fp, sp, #28
   17ba8:	sub	sp, sp, #380	; 0x17c
   17bac:	mov	sl, r1
   17bb0:	str	r0, [sp, #116]	; 0x74
   17bb4:	subs	r0, r0, #2
   17bb8:	mov	r1, #0
   17bbc:	sbcs	r0, sl, #0
   17bc0:	bcc	189b8 <__assert_fail@plt+0x7698>
   17bc4:	ldr	r2, [sp, #116]	; 0x74
   17bc8:	movw	r0, #60793	; 0xed79
   17bcc:	mov	r1, #1
   17bd0:	movt	r0, #381	; 0x17d
   17bd4:	subs	r0, r2, r0
   17bd8:	sbcs	r0, sl, #0
   17bdc:	bcc	189b8 <__assert_fail@plt+0x7698>
   17be0:	ldr	r0, [sp, #116]	; 0x74
   17be4:	mov	r3, #0
   17be8:	subs	r0, r0, #1
   17bec:	sbc	r1, sl, #0
   17bf0:	tst	r0, #1
   17bf4:	mov	r2, r0
   17bf8:	str	r0, [sp, #48]	; 0x30
   17bfc:	str	r1, [sp, #44]	; 0x2c
   17c00:	bne	17c28 <__assert_fail@plt+0x6908>
   17c04:	ldr	r0, [sp, #48]	; 0x30
   17c08:	ldr	r1, [sp, #44]	; 0x2c
   17c0c:	mov	r3, #0
   17c10:	lsrs	r1, r1, #1
   17c14:	add	r3, r3, #1
   17c18:	rrx	r2, r0
   17c1c:	tst	r0, #2
   17c20:	mov	r0, r2
   17c24:	beq	17c10 <__assert_fail@plt+0x68f0>
   17c28:	ldr	r4, [sp, #116]	; 0x74
   17c2c:	str	r1, [sp, #12]
   17c30:	movw	r1, #1430	; 0x596
   17c34:	str	r3, [sp, #28]
   17c38:	str	r2, [sp, #8]
   17c3c:	movt	r1, #3
   17c40:	ubfx	r0, r4, #1, #7
   17c44:	ldrb	r1, [r1, r0]
   17c48:	umull	r0, r2, r1, r4
   17c4c:	rsbs	r0, r0, #2
   17c50:	mla	r2, r1, sl, r2
   17c54:	umull	r3, r7, r0, r1
   17c58:	rsc	lr, r2, #0
   17c5c:	umull	r0, r6, r3, r4
   17c60:	mla	r1, lr, r1, r7
   17c64:	mla	r7, r3, sl, r6
   17c68:	rsbs	r5, r0, #2
   17c6c:	mla	r7, r1, r4, r7
   17c70:	umull	r0, r8, r3, r5
   17c74:	rsc	r7, r7, #0
   17c78:	umull	ip, r2, r0, r4
   17c7c:	mla	r3, r3, r7, r8
   17c80:	mla	r2, r0, sl, r2
   17c84:	mla	r1, r1, r5, r3
   17c88:	mla	r3, r1, r4, r2
   17c8c:	rsbs	r2, ip, #2
   17c90:	rsc	r3, r3, #0
   17c94:	subs	r7, r4, #2
   17c98:	sbcs	r7, sl, #0
   17c9c:	bcc	189ec <__assert_fail@plt+0x76cc>
   17ca0:	umull	r6, r7, r0, r2
   17ca4:	mov	ip, #0
   17ca8:	mov	lr, #0
   17cac:	mov	r4, #0
   17cb0:	mla	r0, r0, r3, r7
   17cb4:	ldr	r3, [sp, #116]	; 0x74
   17cb8:	mov	r7, sl
   17cbc:	str	r6, [sp, #92]	; 0x5c
   17cc0:	mla	r9, r1, r2, r0
   17cc4:	mov	r0, #0
   17cc8:	mov	r2, #1
   17ccc:	mvn	r1, #63	; 0x3f
   17cd0:	str	r0, [sp, #68]	; 0x44
   17cd4:	mov	r0, #0
   17cd8:	str	r0, [sp, #64]	; 0x40
   17cdc:	lsrs	r6, lr, #1
   17ce0:	rrx	ip, ip
   17ce4:	lsrs	r7, r7, #1
   17ce8:	orr	lr, r6, r3, lsl #31
   17cec:	rrx	r3, r3
   17cf0:	subs	r5, r3, r2
   17cf4:	sbcs	r5, r7, r4
   17cf8:	bcc	17d20 <__assert_fail@plt+0x6a00>
   17cfc:	eor	r5, r2, r3
   17d00:	eor	r0, r4, r7
   17d04:	orrs	r0, r5, r0
   17d08:	bne	17d5c <__assert_fail@plt+0x6a3c>
   17d0c:	ldr	r0, [sp, #68]	; 0x44
   17d10:	subs	r0, r0, ip
   17d14:	ldr	r0, [sp, #64]	; 0x40
   17d18:	sbcs	r0, r0, lr
   17d1c:	bcc	17d5c <__assert_fail@plt+0x6a3c>
   17d20:	ldr	r6, [sp, #68]	; 0x44
   17d24:	subs	r0, r2, r3
   17d28:	sbc	r5, r4, r7
   17d2c:	subs	r2, r0, #1
   17d30:	sbc	r4, r5, #0
   17d34:	subs	r6, r6, ip
   17d38:	str	r6, [sp, #68]	; 0x44
   17d3c:	ldr	r6, [sp, #64]	; 0x40
   17d40:	sbcs	r6, r6, lr
   17d44:	str	r6, [sp, #64]	; 0x40
   17d48:	mov	r6, #0
   17d4c:	movwcc	r6, #1
   17d50:	cmp	r6, #0
   17d54:	moveq	r2, r0
   17d58:	moveq	r4, r5
   17d5c:	adds	r1, r1, #1
   17d60:	bne	17cdc <__assert_fail@plt+0x69bc>
   17d64:	ldr	r1, [sp, #68]	; 0x44
   17d68:	ldr	r6, [sp, #116]	; 0x74
   17d6c:	ldr	r2, [sp, #64]	; 0x40
   17d70:	mov	r0, #0
   17d74:	str	r9, [sp, #88]	; 0x58
   17d78:	subs	r3, r6, r1
   17d7c:	sbc	r7, sl, r2
   17d80:	subs	r1, r1, r3
   17d84:	str	r3, [sp, #36]	; 0x24
   17d88:	sbcs	r2, r2, r7
   17d8c:	str	r7, [sp, #32]
   17d90:	movwcc	r0, #1
   17d94:	adds	r3, r1, r6
   17d98:	adc	r7, r2, sl
   17d9c:	cmp	r0, #0
   17da0:	ldr	r0, [sp, #12]
   17da4:	moveq	r3, r1
   17da8:	ldr	r1, [sp, #8]
   17dac:	moveq	r7, r2
   17db0:	str	r3, [sp, #52]	; 0x34
   17db4:	str	r3, [sp, #100]	; 0x64
   17db8:	str	r7, [sp, #56]	; 0x38
   17dbc:	str	r7, [sp, #104]	; 0x68
   17dc0:	orrs	r0, r1, r0
   17dc4:	str	r0, [sp, #4]
   17dc8:	beq	17fb4 <__assert_fail@plt+0x6c94>
   17dcc:	ldr	r0, [sp, #56]	; 0x38
   17dd0:	ldr	r7, [sp, #52]	; 0x34
   17dd4:	ldr	lr, [sp, #8]
   17dd8:	ldr	r1, [sp, #12]
   17ddc:	mov	r4, r0
   17de0:	str	r7, [sp, #100]	; 0x64
   17de4:	str	r0, [sp, #104]	; 0x68
   17de8:	umull	r8, r9, r4, r7
   17dec:	umull	r7, r0, r7, r7
   17df0:	ldr	r3, [sp, #88]	; 0x58
   17df4:	ldr	r5, [sp, #116]	; 0x74
   17df8:	str	lr, [sp, #112]	; 0x70
   17dfc:	lsl	r2, r9, #1
   17e00:	adds	r0, r0, r8, lsl #1
   17e04:	orr	r2, r2, r8, lsr #31
   17e08:	adc	r2, r2, #0
   17e0c:	str	r2, [sp, #108]	; 0x6c
   17e10:	ldr	r2, [sp, #92]	; 0x5c
   17e14:	umull	ip, lr, r7, r2
   17e18:	mla	r7, r7, r3, lr
   17e1c:	mov	lr, r1
   17e20:	umull	r1, r3, ip, sl
   17e24:	mla	r7, r0, r2, r7
   17e28:	umull	r2, r6, ip, r5
   17e2c:	umlal	r1, r3, r7, r5
   17e30:	adds	r1, r1, r6
   17e34:	adc	r2, r3, #0
   17e38:	umull	r3, r6, r7, r5
   17e3c:	subs	r1, r1, r3
   17e40:	umull	r3, r7, r7, sl
   17e44:	sbcs	r1, r2, r6
   17e48:	ldr	r6, [sp, #108]	; 0x6c
   17e4c:	mov	r1, #0
   17e50:	movwcc	r1, #1
   17e54:	cmp	r1, #0
   17e58:	addne	r7, r7, #1
   17e5c:	adds	r1, r3, r2
   17e60:	adc	r2, r7, #0
   17e64:	subs	r0, r0, r8
   17e68:	umull	r3, r7, r4, r4
   17e6c:	sbcs	r0, r6, r9
   17e70:	mov	r0, #0
   17e74:	movwcc	r0, #1
   17e78:	cmp	r0, #0
   17e7c:	addne	r7, r7, #1
   17e80:	adds	r0, r3, r6
   17e84:	adc	r3, r7, #0
   17e88:	subs	r0, r0, r1
   17e8c:	sbcs	r1, r3, r2
   17e90:	mov	r2, #0
   17e94:	movwcc	r2, #1
   17e98:	adds	r7, r0, r5
   17e9c:	adc	r4, r1, sl
   17ea0:	cmp	r2, #0
   17ea4:	moveq	r7, r0
   17ea8:	ldr	r0, [sp, #112]	; 0x70
   17eac:	moveq	r4, r1
   17eb0:	mov	r1, lr
   17eb4:	lsrs	r1, lr, #1
   17eb8:	rrx	lr, r0
   17ebc:	tst	r0, #2
   17ec0:	beq	17fac <__assert_fail@plt+0x6c8c>
   17ec4:	ldr	r6, [sp, #100]	; 0x64
   17ec8:	ldr	r5, [sp, #92]	; 0x5c
   17ecc:	str	r1, [sp, #108]	; 0x6c
   17ed0:	ldr	r1, [sp, #88]	; 0x58
   17ed4:	ldr	ip, [sp, #104]	; 0x68
   17ed8:	str	r4, [sp, #112]	; 0x70
   17edc:	umull	r0, r8, r7, r6
   17ee0:	umull	r2, r3, r0, r5
   17ee4:	mla	r0, r0, r1, r3
   17ee8:	umull	r3, r6, r4, r6
   17eec:	umlal	r3, r6, r7, ip
   17ef0:	adds	r3, r3, r8
   17ef4:	ldr	r8, [sp, #116]	; 0x74
   17ef8:	mla	r0, r3, r5, r0
   17efc:	umull	r1, r4, r0, sl
   17f00:	str	r1, [sp, #100]	; 0x64
   17f04:	umull	r9, r1, r0, r8
   17f08:	str	r1, [sp, #96]	; 0x60
   17f0c:	umull	r1, r5, r2, sl
   17f10:	umlal	r1, r5, r0, r8
   17f14:	adc	r0, r6, #0
   17f18:	umull	r2, r6, r2, r8
   17f1c:	adds	r1, r1, r6
   17f20:	adc	r2, r5, #0
   17f24:	subs	r1, r1, r9
   17f28:	umull	r6, r5, r7, ip
   17f2c:	ldr	r1, [sp, #96]	; 0x60
   17f30:	sbcs	r1, r2, r1
   17f34:	mov	r1, #0
   17f38:	movwcc	r1, #1
   17f3c:	cmp	r1, #0
   17f40:	ldr	r1, [sp, #100]	; 0x64
   17f44:	addne	r4, r4, #1
   17f48:	adds	r1, r1, r2
   17f4c:	adc	r2, r4, #0
   17f50:	subs	r3, r3, r6
   17f54:	ldr	r4, [sp, #112]	; 0x70
   17f58:	sbcs	r3, r0, r5
   17f5c:	mov	r3, #0
   17f60:	movwcc	r3, #1
   17f64:	umull	r6, r5, r4, ip
   17f68:	cmp	r3, #0
   17f6c:	ldr	r4, [sp, #112]	; 0x70
   17f70:	addne	r5, r5, #1
   17f74:	adds	r0, r6, r0
   17f78:	adc	r3, r5, #0
   17f7c:	subs	r0, r0, r1
   17f80:	sbcs	r1, r3, r2
   17f84:	mov	r2, #0
   17f88:	movwcc	r2, #1
   17f8c:	adds	r6, r0, r8
   17f90:	adc	r3, r1, sl
   17f94:	cmp	r2, #0
   17f98:	moveq	r3, r1
   17f9c:	ldr	r1, [sp, #108]	; 0x6c
   17fa0:	moveq	r6, r0
   17fa4:	str	r3, [sp, #104]	; 0x68
   17fa8:	str	r6, [sp, #100]	; 0x64
   17fac:	orrs	r0, lr, r1
   17fb0:	bne	17de8 <__assert_fail@plt+0x6ac8>
   17fb4:	ldr	r0, [sp, #68]	; 0x44
   17fb8:	ldr	r2, [sp, #100]	; 0x64
   17fbc:	ldr	r1, [sp, #64]	; 0x40
   17fc0:	ldr	r7, [sp, #104]	; 0x68
   17fc4:	eor	r0, r2, r0
   17fc8:	eor	r1, r7, r1
   17fcc:	orrs	r0, r0, r1
   17fd0:	ldrne	r0, [sp, #36]	; 0x24
   17fd4:	ldrne	r1, [sp, #32]
   17fd8:	eorne	r0, r2, r0
   17fdc:	eorne	r1, r7, r1
   17fe0:	orrsne	r0, r0, r1
   17fe4:	bne	17ff0 <__assert_fail@plt+0x6cd0>
   17fe8:	ldr	r9, [sp, #88]	; 0x58
   17fec:	b	1811c <__assert_fail@plt+0x6dfc>
   17ff0:	ldr	r6, [sp, #28]
   17ff4:	ldr	r9, [sp, #88]	; 0x58
   17ff8:	mov	r1, #0
   17ffc:	cmp	r6, #2
   18000:	bcc	189b8 <__assert_fail@plt+0x7698>
   18004:	mov	lr, #2
   18008:	umull	r0, r1, r7, r2
   1800c:	str	r7, [sp, #104]	; 0x68
   18010:	umull	r7, r5, r2, r2
   18014:	lsl	r3, r1, #1
   18018:	adds	r8, r5, r0, lsl #1
   1801c:	str	r1, [sp, #112]	; 0x70
   18020:	ldr	r5, [sp, #116]	; 0x74
   18024:	orr	r3, r3, r0, lsr #31
   18028:	adc	r1, r3, #0
   1802c:	str	r1, [sp, #108]	; 0x6c
   18030:	ldr	r1, [sp, #92]	; 0x5c
   18034:	umull	r4, r3, r7, r1
   18038:	mla	r3, r7, r9, r3
   1803c:	mla	r3, r8, r1, r3
   18040:	umull	r7, r1, r4, sl
   18044:	umull	r4, ip, r4, r5
   18048:	umlal	r7, r1, r3, r5
   1804c:	umull	r4, r2, r3, r5
   18050:	adds	r7, r7, ip
   18054:	adc	r1, r1, #0
   18058:	subs	r7, r7, r4
   1805c:	ldr	r4, [sp, #108]	; 0x6c
   18060:	sbcs	r2, r1, r2
   18064:	umull	r3, r7, r3, sl
   18068:	mov	r2, #0
   1806c:	movwcc	r2, #1
   18070:	cmp	r2, #0
   18074:	addne	r7, r7, #1
   18078:	adds	r1, r3, r1
   1807c:	ldr	r3, [sp, #104]	; 0x68
   18080:	adc	r2, r7, #0
   18084:	subs	r0, r8, r0
   18088:	ldr	r0, [sp, #112]	; 0x70
   1808c:	umull	r3, r7, r3, r3
   18090:	sbcs	r0, r4, r0
   18094:	mov	r0, #0
   18098:	movwcc	r0, #1
   1809c:	cmp	r0, #0
   180a0:	addne	r7, r7, #1
   180a4:	adds	r0, r3, r4
   180a8:	adc	r3, r7, #0
   180ac:	subs	r0, r0, r1
   180b0:	sbcs	r1, r3, r2
   180b4:	mov	r2, #0
   180b8:	movwcc	r2, #1
   180bc:	adds	r3, r0, r5
   180c0:	adc	r7, r1, sl
   180c4:	cmp	r2, #0
   180c8:	moveq	r7, r1
   180cc:	ldr	r1, [sp, #32]
   180d0:	moveq	r3, r0
   180d4:	ldr	r0, [sp, #36]	; 0x24
   180d8:	eor	r1, r7, r1
   180dc:	eor	r0, r3, r0
   180e0:	orrs	r0, r0, r1
   180e4:	beq	1811c <__assert_fail@plt+0x6dfc>
   180e8:	mov	r1, #0
   180ec:	cmp	lr, r6
   180f0:	bcs	189b8 <__assert_fail@plt+0x7698>
   180f4:	ldr	r0, [sp, #68]	; 0x44
   180f8:	ldr	r1, [sp, #64]	; 0x40
   180fc:	mov	r2, r3
   18100:	add	lr, lr, #1
   18104:	eor	r0, r3, r0
   18108:	eor	r1, r7, r1
   1810c:	orrs	r0, r0, r1
   18110:	mov	r1, #0
   18114:	bne	18008 <__assert_fail@plt+0x6ce8>
   18118:	b	189b8 <__assert_fail@plt+0x7698>
   1811c:	mov	r4, #0
   18120:	ldr	r2, [sp, #48]	; 0x30
   18124:	ldr	r3, [sp, #44]	; 0x2c
   18128:	add	r0, sp, #120	; 0x78
   1812c:	mov	r1, #0
   18130:	str	r0, [sp]
   18134:	mov	r0, #0
   18138:	str	r0, [sp, #20]
   1813c:	mov	r0, #0
   18140:	bl	12268 <__assert_fail@plt+0xf48>
   18144:	mov	r0, #2
   18148:	str	sl, [sp, #84]	; 0x54
   1814c:	str	r4, [sp, #80]	; 0x50
   18150:	str	r0, [sp, #16]
   18154:	ldrb	r0, [sp, #370]	; 0x172
   18158:	str	r0, [sp, #40]	; 0x28
   1815c:	mov	r0, #0
   18160:	str	r0, [sp, #24]
   18164:	ldr	r0, [sp, #40]	; 0x28
   18168:	mov	r1, #1
   1816c:	cmp	r0, #0
   18170:	beq	189b8 <__assert_fail@plt+0x7698>
   18174:	mov	r2, #0
   18178:	add	r0, sp, #120	; 0x78
   1817c:	str	r2, [sp, #60]	; 0x3c
   18180:	add	r0, r0, r2, lsl #3
   18184:	ldr	r4, [r0, #16]
   18188:	ldr	r8, [r0, #20]
   1818c:	ldr	r6, [sp, #48]	; 0x30
   18190:	ldr	r7, [sp, #44]	; 0x2c
   18194:	mov	r0, r6
   18198:	mov	r1, r7
   1819c:	mov	r2, r4
   181a0:	mov	r3, r8
   181a4:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   181a8:	ldr	ip, [sp, #56]	; 0x38
   181ac:	ands	r2, r0, #1
   181b0:	mov	r5, r0
   181b4:	ldr	r0, [sp, #64]	; 0x40
   181b8:	mov	r2, ip
   181bc:	moveq	r2, r0
   181c0:	ldr	r0, [sp, #68]	; 0x44
   181c4:	str	r2, [sp, #76]	; 0x4c
   181c8:	ldr	r2, [sp, #52]	; 0x34
   181cc:	mov	r3, r2
   181d0:	moveq	r3, r0
   181d4:	str	r3, [sp, #72]	; 0x48
   181d8:	subs	r3, r6, r4
   181dc:	sbcs	r3, r7, r8
   181e0:	bcc	18424 <__assert_fail@plt+0x7104>
   181e4:	mov	r4, r2
   181e8:	ldr	r0, [sp, #92]	; 0x5c
   181ec:	str	r5, [sp, #104]	; 0x68
   181f0:	umull	r5, r6, r4, r4
   181f4:	str	r1, [sp, #108]	; 0x6c
   181f8:	ldr	r1, [sp, #116]	; 0x74
   181fc:	str	ip, [sp, #112]	; 0x70
   18200:	umull	r2, r7, r5, r0
   18204:	mla	r5, r5, r9, r7
   18208:	umull	r4, r7, ip, r4
   1820c:	adds	r6, r6, r4, lsl #1
   18210:	str	r7, [sp, #96]	; 0x60
   18214:	mla	r5, r6, r0, r5
   18218:	umull	r0, r9, r5, sl
   1821c:	str	r0, [sp, #100]	; 0x64
   18220:	ldr	r0, [sp, #80]	; 0x50
   18224:	mla	r3, r5, r0, r9
   18228:	umull	r9, ip, r5, r1
   1822c:	lsl	r1, r7, #1
   18230:	ldr	r7, [sp, #116]	; 0x74
   18234:	orr	r1, r1, r4, lsr #31
   18238:	mla	r5, r5, r0, ip
   1823c:	adc	ip, r1, #0
   18240:	umull	r1, lr, r2, sl
   18244:	mla	lr, r2, r0, lr
   18248:	adds	r1, r9, r1
   1824c:	umull	sl, r8, r2, r7
   18250:	adc	lr, r5, lr
   18254:	mla	r2, r2, r0, r8
   18258:	ldr	r0, [sp, #100]	; 0x64
   1825c:	ldr	sl, [sp, #84]	; 0x54
   18260:	adds	r1, r1, r2
   18264:	adc	r2, lr, #0
   18268:	subs	r1, r1, r9
   1826c:	sbcs	r1, r2, r5
   18270:	mov	r1, #0
   18274:	mov	r8, sl
   18278:	movwcc	r1, #1
   1827c:	cmp	r1, #0
   18280:	ldr	r1, [sp, #108]	; 0x6c
   18284:	addne	r3, r3, #1
   18288:	adds	r5, r0, r2
   1828c:	ldr	r0, [sp, #96]	; 0x60
   18290:	adc	r2, r3, #0
   18294:	subs	r3, r6, r4
   18298:	sbcs	r3, ip, r0
   1829c:	ldr	r0, [sp, #112]	; 0x70
   182a0:	mov	r3, #0
   182a4:	movwcc	r3, #1
   182a8:	cmp	r3, #0
   182ac:	umull	r7, r6, r0, r0
   182b0:	addne	r6, r6, #1
   182b4:	adds	r3, r7, ip
   182b8:	adc	r7, r6, #0
   182bc:	subs	r0, r3, r5
   182c0:	mov	r3, #0
   182c4:	sbcs	r2, r7, r2
   182c8:	ldr	r7, [sp, #116]	; 0x74
   182cc:	movwcc	r3, #1
   182d0:	adds	r4, r0, r7
   182d4:	adc	ip, r2, sl
   182d8:	cmp	r3, #0
   182dc:	moveq	r4, r0
   182e0:	ldr	r0, [sp, #104]	; 0x68
   182e4:	moveq	ip, r2
   182e8:	lsrs	r1, r1, #1
   182ec:	rrx	r9, r0
   182f0:	tst	r0, #2
   182f4:	bne	18300 <__assert_fail@plt+0x6fe0>
   182f8:	mov	sl, r8
   182fc:	b	18414 <__assert_fail@plt+0x70f4>
   18300:	ldr	r7, [sp, #72]	; 0x48
   18304:	ldr	r6, [sp, #92]	; 0x5c
   18308:	ldr	r5, [sp, #88]	; 0x58
   1830c:	str	ip, [sp, #112]	; 0x70
   18310:	str	r1, [sp, #108]	; 0x6c
   18314:	ldr	sl, [sp, #80]	; 0x50
   18318:	umull	r0, lr, r4, r7
   1831c:	umull	r2, r3, r0, r6
   18320:	mla	r0, r0, r5, r3
   18324:	umull	r3, r7, ip, r7
   18328:	ldr	ip, [sp, #76]	; 0x4c
   1832c:	umlal	r3, r7, r4, ip
   18330:	adds	r3, r3, lr
   18334:	mla	r0, r3, r6, r0
   18338:	str	r3, [sp, #104]	; 0x68
   1833c:	umull	r1, r6, r0, r8
   18340:	str	r1, [sp, #100]	; 0x64
   18344:	ldr	r1, [sp, #116]	; 0x74
   18348:	mla	r6, r0, sl, r6
   1834c:	umull	r3, r1, r0, r1
   18350:	mla	r0, r0, sl, r1
   18354:	adc	r1, r7, #0
   18358:	str	r1, [sp, #96]	; 0x60
   1835c:	umull	r7, r1, r2, r8
   18360:	mla	r1, r2, sl, r1
   18364:	adds	r7, r3, r7
   18368:	adc	lr, r0, r1
   1836c:	ldr	r1, [sp, #116]	; 0x74
   18370:	umull	r5, r1, r2, r1
   18374:	mla	r1, r2, sl, r1
   18378:	ldr	r5, [sp, #96]	; 0x60
   1837c:	ldr	sl, [sp, #84]	; 0x54
   18380:	adds	r1, r7, r1
   18384:	ldr	r7, [sp, #104]	; 0x68
   18388:	adc	r2, lr, #0
   1838c:	subs	r1, r1, r3
   18390:	sbcs	r0, r2, r0
   18394:	ldr	r1, [sp, #108]	; 0x6c
   18398:	mov	r0, #0
   1839c:	movwcc	r0, #1
   183a0:	cmp	r0, #0
   183a4:	ldr	r0, [sp, #100]	; 0x64
   183a8:	addne	r6, r6, #1
   183ac:	adds	r0, r0, r2
   183b0:	umull	r2, r3, r4, ip
   183b4:	adc	r6, r6, #0
   183b8:	subs	r2, r7, r2
   183bc:	sbcs	r2, r5, r3
   183c0:	ldr	r3, [sp, #112]	; 0x70
   183c4:	mov	r2, #0
   183c8:	movwcc	r2, #1
   183cc:	cmp	r2, #0
   183d0:	umull	r3, r7, r3, ip
   183d4:	ldr	ip, [sp, #112]	; 0x70
   183d8:	addne	r7, r7, #1
   183dc:	adds	r2, r3, r5
   183e0:	adc	r3, r7, #0
   183e4:	ldr	r7, [sp, #116]	; 0x74
   183e8:	subs	r0, r2, r0
   183ec:	mov	r2, #0
   183f0:	sbcs	r3, r3, r6
   183f4:	movwcc	r2, #1
   183f8:	adds	r6, r0, r7
   183fc:	adc	r7, r3, sl
   18400:	cmp	r2, #0
   18404:	moveq	r7, r3
   18408:	moveq	r6, r0
   1840c:	str	r7, [sp, #76]	; 0x4c
   18410:	str	r6, [sp, #72]	; 0x48
   18414:	orrs	r0, r9, r1
   18418:	mov	r5, r9
   1841c:	ldr	r9, [sp, #88]	; 0x58
   18420:	bne	181e8 <__assert_fail@plt+0x6ec8>
   18424:	ldr	r0, [sp, #68]	; 0x44
   18428:	ldr	r1, [sp, #72]	; 0x48
   1842c:	ldr	r2, [sp, #76]	; 0x4c
   18430:	eor	r0, r1, r0
   18434:	ldr	r1, [sp, #64]	; 0x40
   18438:	eor	r1, r2, r1
   1843c:	ldr	r2, [sp, #60]	; 0x3c
   18440:	orrs	r0, r0, r1
   18444:	beq	18458 <__assert_fail@plt+0x7138>
   18448:	ldr	r1, [sp, #40]	; 0x28
   1844c:	add	r2, r2, #1
   18450:	cmp	r2, r1
   18454:	bcc	18178 <__assert_fail@plt+0x6e58>
   18458:	cmp	r0, #0
   1845c:	mov	r1, #1
   18460:	bne	189b8 <__assert_fail@plt+0x7698>
   18464:	ldr	r1, [sp, #24]
   18468:	movw	r0, #80	; 0x50
   1846c:	ldr	r4, [sp, #16]
   18470:	ldr	r5, [sp, #20]
   18474:	ldr	r2, [sp, #68]	; 0x44
   18478:	ldr	r3, [sp, #64]	; 0x40
   1847c:	movt	r0, #3
   18480:	ldrb	r0, [r0, r1]
   18484:	adds	r4, r4, r0
   18488:	adc	r5, r5, #0
   1848c:	str	r4, [sp, #16]
   18490:	umull	r7, r6, r5, r2
   18494:	umull	r0, r2, r4, r2
   18498:	str	r5, [sp, #20]
   1849c:	umlal	r7, r6, r4, r3
   184a0:	adds	r1, r7, r2
   184a4:	adc	r7, r6, #0
   184a8:	umull	r6, r2, r4, r3
   184ac:	subs	r6, r1, r6
   184b0:	sbcs	r2, r7, r2
   184b4:	mov	r6, #0
   184b8:	movwcc	r6, #1
   184bc:	umull	r2, r3, r5, r3
   184c0:	cmp	r6, #0
   184c4:	addne	r3, r3, #1
   184c8:	adds	r7, r2, r7
   184cc:	adc	ip, r3, #0
   184d0:	orrs	r2, r7, ip
   184d4:	bne	188e8 <__assert_fail@plt+0x75c8>
   184d8:	ldr	r2, [sp, #116]	; 0x74
   184dc:	mov	r3, sl
   184e0:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   184e4:	ldr	r5, [sp, #92]	; 0x5c
   184e8:	ldr	r0, [sp, #4]
   184ec:	str	r2, [sp, #52]	; 0x34
   184f0:	str	r2, [sp, #72]	; 0x48
   184f4:	str	r3, [sp, #56]	; 0x38
   184f8:	str	r3, [sp, #76]	; 0x4c
   184fc:	cmp	r0, #0
   18500:	beq	1873c <__assert_fail@plt+0x741c>
   18504:	ldr	r0, [sp, #56]	; 0x38
   18508:	ldr	r9, [sp, #52]	; 0x34
   1850c:	ldr	r2, [sp, #8]
   18510:	ldr	r1, [sp, #12]
   18514:	mov	r7, r0
   18518:	str	r9, [sp, #72]	; 0x48
   1851c:	str	r0, [sp, #76]	; 0x4c
   18520:	str	r1, [sp, #112]	; 0x70
   18524:	ldr	r1, [sp, #88]	; 0x58
   18528:	umull	r6, r4, r9, r9
   1852c:	str	r2, [sp, #108]	; 0x6c
   18530:	str	r7, [sp, #104]	; 0x68
   18534:	ldr	lr, [sp, #80]	; 0x50
   18538:	umull	r2, r0, r6, r5
   1853c:	mla	r0, r6, r1, r0
   18540:	umull	r6, r7, r7, r9
   18544:	adds	r4, r4, r6, lsl #1
   18548:	str	r7, [sp, #96]	; 0x60
   1854c:	mla	r0, r4, r5, r0
   18550:	lsl	r5, r7, #1
   18554:	ldr	r7, [sp, #116]	; 0x74
   18558:	umull	r1, r3, r0, sl
   1855c:	orr	r5, r5, r6, lsr #31
   18560:	str	r1, [sp, #100]	; 0x64
   18564:	ldr	r1, [sp, #116]	; 0x74
   18568:	mla	r3, r0, lr, r3
   1856c:	umull	r1, ip, r0, r1
   18570:	mla	r0, r0, lr, ip
   18574:	adc	ip, r5, #0
   18578:	umull	r5, r8, r2, sl
   1857c:	umull	r9, sl, r2, r7
   18580:	mla	r8, r2, lr, r8
   18584:	adds	r5, r1, r5
   18588:	mla	r2, r2, lr, sl
   1858c:	ldr	sl, [sp, #84]	; 0x54
   18590:	adc	r8, r0, r8
   18594:	adds	r2, r5, r2
   18598:	adc	r5, r8, #0
   1859c:	subs	r1, r2, r1
   185a0:	sbcs	r0, r5, r0
   185a4:	mov	r0, #0
   185a8:	movwcc	r0, #1
   185ac:	cmp	r0, #0
   185b0:	ldr	r0, [sp, #100]	; 0x64
   185b4:	addne	r3, r3, #1
   185b8:	adds	r0, r0, r5
   185bc:	adc	r1, r3, #0
   185c0:	subs	r2, r4, r6
   185c4:	ldr	r3, [sp, #104]	; 0x68
   185c8:	ldr	r2, [sp, #96]	; 0x60
   185cc:	umull	r3, r4, r3, r3
   185d0:	sbcs	r2, ip, r2
   185d4:	mov	r2, #0
   185d8:	movwcc	r2, #1
   185dc:	cmp	r2, #0
   185e0:	addne	r4, r4, #1
   185e4:	adds	r2, r3, ip
   185e8:	adc	r3, r4, #0
   185ec:	subs	r0, r2, r0
   185f0:	mov	r2, #0
   185f4:	sbcs	r1, r3, r1
   185f8:	ldr	r3, [sp, #116]	; 0x74
   185fc:	movwcc	r2, #1
   18600:	adds	r9, r0, r3
   18604:	adc	r7, r1, sl
   18608:	cmp	r2, #0
   1860c:	moveq	r7, r1
   18610:	ldr	r1, [sp, #112]	; 0x70
   18614:	moveq	r9, r0
   18618:	ldr	r0, [sp, #108]	; 0x6c
   1861c:	lsrs	r1, r1, #1
   18620:	rrx	r2, r0
   18624:	tst	r0, #2
   18628:	beq	18730 <__assert_fail@plt+0x7410>
   1862c:	ldr	r6, [sp, #72]	; 0x48
   18630:	ldr	r4, [sp, #92]	; 0x5c
   18634:	ldr	r5, [sp, #88]	; 0x58
   18638:	ldr	ip, [sp, #76]	; 0x4c
   1863c:	str	r1, [sp, #112]	; 0x70
   18640:	str	r2, [sp, #108]	; 0x6c
   18644:	umull	r0, r1, r9, r6
   18648:	umull	r2, r3, r0, r4
   1864c:	mla	r0, r0, r5, r3
   18650:	umull	r3, r6, r7, r6
   18654:	umlal	r3, r6, r9, ip
   18658:	adds	r1, r3, r1
   1865c:	mla	r0, r1, r4, r0
   18660:	str	r1, [sp, #104]	; 0x68
   18664:	adc	r8, r6, #0
   18668:	umull	r1, r5, r0, sl
   1866c:	str	r1, [sp, #100]	; 0x64
   18670:	ldr	r1, [sp, #116]	; 0x74
   18674:	mla	r5, r0, lr, r5
   18678:	umull	r3, r1, r0, r1
   1867c:	mla	r0, r0, lr, r1
   18680:	umull	r6, r1, r2, sl
   18684:	mla	r1, r2, lr, r1
   18688:	adds	r6, r3, r6
   1868c:	adc	sl, r0, r1
   18690:	ldr	r1, [sp, #116]	; 0x74
   18694:	umull	r4, r1, r2, r1
   18698:	mla	r1, r2, lr, r1
   1869c:	adds	r1, r6, r1
   186a0:	ldr	r6, [sp, #104]	; 0x68
   186a4:	adc	r2, sl, #0
   186a8:	subs	r1, r1, r3
   186ac:	ldr	sl, [sp, #84]	; 0x54
   186b0:	sbcs	r0, r2, r0
   186b4:	mov	r0, #0
   186b8:	movwcc	r0, #1
   186bc:	cmp	r0, #0
   186c0:	ldr	r0, [sp, #100]	; 0x64
   186c4:	addne	r5, r5, #1
   186c8:	adds	r0, r0, r2
   186cc:	umull	r2, r3, r9, ip
   186d0:	adc	r1, r5, #0
   186d4:	subs	r2, r6, r2
   186d8:	sbcs	r2, r8, r3
   186dc:	umull	r3, r6, r7, ip
   186e0:	mov	r2, #0
   186e4:	movwcc	r2, #1
   186e8:	cmp	r2, #0
   186ec:	addne	r6, r6, #1
   186f0:	adds	r2, r3, r8
   186f4:	adc	r3, r6, #0
   186f8:	subs	r0, r2, r0
   186fc:	mov	r2, #0
   18700:	sbcs	r1, r3, r1
   18704:	ldr	r3, [sp, #116]	; 0x74
   18708:	movwcc	r2, #1
   1870c:	adds	r6, r0, r3
   18710:	adc	r3, r1, sl
   18714:	cmp	r2, #0
   18718:	ldr	r2, [sp, #108]	; 0x6c
   1871c:	moveq	r3, r1
   18720:	ldr	r1, [sp, #112]	; 0x70
   18724:	moveq	r6, r0
   18728:	str	r3, [sp, #76]	; 0x4c
   1872c:	str	r6, [sp, #72]	; 0x48
   18730:	ldr	r5, [sp, #92]	; 0x5c
   18734:	orrs	r0, r2, r1
   18738:	bne	18520 <__assert_fail@plt+0x7200>
   1873c:	ldr	r0, [sp, #68]	; 0x44
   18740:	ldr	r4, [sp, #72]	; 0x48
   18744:	ldr	r1, [sp, #64]	; 0x40
   18748:	ldr	r5, [sp, #76]	; 0x4c
   1874c:	eor	r0, r4, r0
   18750:	eor	r1, r5, r1
   18754:	orrs	r0, r0, r1
   18758:	ldrne	r0, [sp, #36]	; 0x24
   1875c:	ldrne	r1, [sp, #32]
   18760:	eorne	r0, r4, r0
   18764:	eorne	r1, r5, r1
   18768:	orrsne	r0, r0, r1
   1876c:	bne	18798 <__assert_fail@plt+0x7478>
   18770:	ldr	r0, [sp, #24]
   18774:	ldr	sl, [sp, #84]	; 0x54
   18778:	ldr	r9, [sp, #88]	; 0x58
   1877c:	mov	r1, r0
   18780:	add	r1, r0, #1
   18784:	cmp	r1, #668	; 0x29c
   18788:	mov	r0, r1
   1878c:	str	r1, [sp, #24]
   18790:	bcc	18164 <__assert_fail@plt+0x6e44>
   18794:	b	189c4 <__assert_fail@plt+0x76a4>
   18798:	ldr	r0, [sp, #28]
   1879c:	mov	r1, #0
   187a0:	cmp	r0, #2
   187a4:	bcc	189b8 <__assert_fail@plt+0x7698>
   187a8:	mov	r9, #2
   187ac:	ldr	r2, [sp, #92]	; 0x5c
   187b0:	ldr	r6, [sp, #88]	; 0x58
   187b4:	umull	r0, r1, r4, r4
   187b8:	ldr	lr, [sp, #84]	; 0x54
   187bc:	ldr	sl, [sp, #80]	; 0x50
   187c0:	str	r5, [sp, #76]	; 0x4c
   187c4:	umull	r3, r7, r0, r2
   187c8:	mla	r0, r0, r6, r7
   187cc:	umull	r7, ip, r5, r4
   187d0:	adds	r8, r1, r7, lsl #1
   187d4:	str	ip, [sp, #108]	; 0x6c
   187d8:	mla	r0, r8, r2, r0
   187dc:	ldr	r2, [sp, #116]	; 0x74
   187e0:	umull	r1, r4, r0, lr
   187e4:	str	r1, [sp, #112]	; 0x70
   187e8:	ldr	r1, [sp, #116]	; 0x74
   187ec:	mla	r4, r0, sl, r4
   187f0:	umull	r5, r6, r0, r1
   187f4:	mla	r0, r0, sl, r6
   187f8:	lsl	r6, ip, #1
   187fc:	umull	r2, ip, r3, r2
   18800:	orr	r6, r6, r7, lsr #31
   18804:	mla	r2, r3, sl, ip
   18808:	adc	r1, r6, #0
   1880c:	str	r1, [sp, #104]	; 0x68
   18810:	umull	r1, r6, r3, lr
   18814:	mla	r6, r3, sl, r6
   18818:	adds	r1, r5, r1
   1881c:	ldr	r3, [sp, #76]	; 0x4c
   18820:	adc	r6, r0, r6
   18824:	adds	r1, r1, r2
   18828:	adc	r2, r6, #0
   1882c:	subs	r1, r1, r5
   18830:	ldr	r6, [sp, #104]	; 0x68
   18834:	sbcs	r0, r2, r0
   18838:	mov	r0, #0
   1883c:	movwcc	r0, #1
   18840:	cmp	r0, #0
   18844:	ldr	r0, [sp, #112]	; 0x70
   18848:	addne	r4, r4, #1
   1884c:	adds	r0, r0, r2
   18850:	adc	r1, r4, #0
   18854:	subs	r2, r8, r7
   18858:	umull	r3, r7, r3, r3
   1885c:	ldr	r2, [sp, #108]	; 0x6c
   18860:	sbcs	r2, r6, r2
   18864:	mov	r2, #0
   18868:	movwcc	r2, #1
   1886c:	cmp	r2, #0
   18870:	addne	r7, r7, #1
   18874:	adds	r2, r3, r6
   18878:	adc	r3, r7, #0
   1887c:	subs	r0, r2, r0
   18880:	mov	r2, #0
   18884:	sbcs	r1, r3, r1
   18888:	ldr	r3, [sp, #116]	; 0x74
   1888c:	movwcc	r2, #1
   18890:	adds	r4, r0, r3
   18894:	adc	r5, r1, lr
   18898:	cmp	r2, #0
   1889c:	moveq	r5, r1
   188a0:	ldr	r1, [sp, #32]
   188a4:	moveq	r4, r0
   188a8:	ldr	r0, [sp, #36]	; 0x24
   188ac:	eor	r1, r5, r1
   188b0:	eor	r0, r4, r0
   188b4:	orrs	r0, r0, r1
   188b8:	beq	18770 <__assert_fail@plt+0x7450>
   188bc:	ldr	r0, [sp, #28]
   188c0:	cmp	r9, r0
   188c4:	bcs	189b4 <__assert_fail@plt+0x7694>
   188c8:	ldr	r0, [sp, #68]	; 0x44
   188cc:	ldr	r1, [sp, #64]	; 0x40
   188d0:	add	r9, r9, #1
   188d4:	eor	r0, r4, r0
   188d8:	eor	r1, r5, r1
   188dc:	orrs	r0, r0, r1
   188e0:	bne	187ac <__assert_fail@plt+0x748c>
   188e4:	b	189b4 <__assert_fail@plt+0x7694>
   188e8:	mov	r6, r0
   188ec:	ldr	r0, [sp, #116]	; 0x74
   188f0:	subs	r2, r7, r0
   188f4:	sbcs	r2, ip, sl
   188f8:	bcs	18a0c <__assert_fail@plt+0x76ec>
   188fc:	ldr	r0, [sp, #116]	; 0x74
   18900:	mov	r3, r1
   18904:	mvn	r1, #63	; 0x3f
   18908:	mov	r9, #0
   1890c:	mov	r4, sl
   18910:	mov	r2, r6
   18914:	mov	lr, #0
   18918:	lsrs	r6, r9, #1
   1891c:	str	r3, [sp, #56]	; 0x38
   18920:	rrx	lr, lr
   18924:	lsrs	r4, r4, #1
   18928:	orr	r9, r6, r0, lsl #31
   1892c:	rrx	r0, r0
   18930:	subs	r6, r0, r7
   18934:	sbcs	r6, r4, ip
   18938:	bcc	1895c <__assert_fail@plt+0x763c>
   1893c:	eor	r6, r7, r0
   18940:	eor	r5, ip, r4
   18944:	orrs	r6, r6, r5
   18948:	bne	189a0 <__assert_fail@plt+0x7680>
   1894c:	ldr	r3, [sp, #56]	; 0x38
   18950:	subs	r6, r2, lr
   18954:	sbcs	r6, r3, r9
   18958:	bcc	189a0 <__assert_fail@plt+0x7680>
   1895c:	ldr	r3, [sp, #56]	; 0x38
   18960:	subs	r6, r7, r0
   18964:	sbc	r5, ip, r4
   18968:	subs	r7, r6, #1
   1896c:	sbc	ip, r5, #0
   18970:	subs	r2, r2, lr
   18974:	sbcs	r3, r3, r9
   18978:	str	r3, [sp, #56]	; 0x38
   1897c:	mov	r3, r0
   18980:	mov	r0, r4
   18984:	mov	r4, #0
   18988:	movwcc	r4, #1
   1898c:	cmp	r4, #0
   18990:	mov	r4, r0
   18994:	mov	r0, r3
   18998:	moveq	r7, r6
   1899c:	moveq	ip, r5
   189a0:	ldr	r5, [sp, #92]	; 0x5c
   189a4:	ldr	r3, [sp, #56]	; 0x38
   189a8:	adds	r1, r1, #1
   189ac:	bne	18918 <__assert_fail@plt+0x75f8>
   189b0:	b	184e8 <__assert_fail@plt+0x71c8>
   189b4:	mov	r1, #0
   189b8:	mov	r0, r1
   189bc:	sub	sp, fp, #28
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c4:	movw	r1, #53957	; 0xd2c5
   189c8:	mov	r0, #0
   189cc:	mov	r2, #5
   189d0:	movt	r1, #2
   189d4:	bl	110f8 <dcgettext@plt>
   189d8:	mov	r2, r0
   189dc:	mov	r0, #0
   189e0:	mov	r1, #0
   189e4:	bl	11188 <error@plt>
   189e8:	bl	11314 <abort@plt>
   189ec:	movw	r0, #54007	; 0xd2f7
   189f0:	movw	r1, #53944	; 0xd2b8
   189f4:	movw	r3, #54017	; 0xd301
   189f8:	movw	r2, #1214	; 0x4be
   189fc:	movt	r0, #2
   18a00:	movt	r1, #2
   18a04:	movt	r3, #2
   18a08:	bl	11320 <__assert_fail@plt>
   18a0c:	movw	r0, #54042	; 0xd31a
   18a10:	movw	r1, #53944	; 0xd2b8
   18a14:	movw	r3, #54017	; 0xd301
   18a18:	movw	r2, #1262	; 0x4ee
   18a1c:	movt	r0, #2
   18a20:	movt	r1, #2
   18a24:	movt	r3, #2
   18a28:	bl	11320 <__assert_fail@plt>
   18a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a30:	add	fp, sp, #28
   18a34:	sub	sp, sp, #108	; 0x6c
   18a38:	ldr	r6, [fp, #20]
   18a3c:	str	r2, [fp, #-48]	; 0xffffffd0
   18a40:	str	r2, [sp]
   18a44:	ldr	r1, [fp, #8]
   18a48:	ldr	r2, [fp, #12]
   18a4c:	mov	r9, r0
   18a50:	str	r3, [fp, #-44]	; 0xffffffd4
   18a54:	sub	r0, fp, #40	; 0x28
   18a58:	stmib	sp, {r3, r6}
   18a5c:	mov	r3, r9
   18a60:	bl	18c84 <__assert_fail@plt+0x7964>
   18a64:	ldr	r4, [r6]
   18a68:	mov	sl, r1
   18a6c:	ldr	r1, [r6, #4]
   18a70:	mov	r5, r6
   18a74:	ldr	ip, [r6, #12]
   18a78:	mov	r8, #1
   18a7c:	ldr	lr, [r5, #8]!
   18a80:	eor	r2, sl, r1
   18a84:	eor	r3, r0, r4
   18a88:	orrs	r2, r3, r2
   18a8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18a90:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18a94:	eoreq	r7, r3, ip
   18a98:	eoreq	r6, r2, lr
   18a9c:	orrseq	r6, r6, r7
   18aa0:	beq	18c78 <__assert_fail@plt+0x7958>
   18aa4:	str	r5, [sp, #68]	; 0x44
   18aa8:	mov	r5, r9
   18aac:	ldrd	r6, [r9]
   18ab0:	str	r5, [sp, #64]	; 0x40
   18ab4:	ldr	r9, [r9, #12]
   18ab8:	str	r6, [sp, #52]	; 0x34
   18abc:	subs	r6, r6, r4
   18ac0:	mov	r4, r5
   18ac4:	str	r7, [sp, #56]	; 0x38
   18ac8:	str	r9, [fp, #-64]	; 0xffffffc0
   18acc:	ldr	r5, [r4, #8]!
   18ad0:	sbcs	r1, r7, r1
   18ad4:	mov	r7, #0
   18ad8:	str	r6, [fp, #-52]	; 0xffffffcc
   18adc:	movwcc	r7, #1
   18ae0:	str	r1, [fp, #-56]	; 0xffffffc8
   18ae4:	str	r5, [sp, #60]	; 0x3c
   18ae8:	subs	r5, r5, lr
   18aec:	str	r4, [fp, #-60]	; 0xffffffc4
   18af0:	sbc	lr, r9, ip
   18af4:	subs	ip, r5, #1
   18af8:	sbc	r4, lr, #0
   18afc:	cmp	r7, #0
   18b00:	eor	r7, r0, r6
   18b04:	moveq	ip, r5
   18b08:	eor	r5, sl, r1
   18b0c:	moveq	r4, lr
   18b10:	orrs	r7, r7, r5
   18b14:	eoreq	r7, r2, ip
   18b18:	eoreq	r5, r3, r4
   18b1c:	orrseq	r7, r7, r5
   18b20:	beq	18c78 <__assert_fail@plt+0x7958>
   18b24:	ldr	r1, [fp, #16]
   18b28:	cmp	r1, #2
   18b2c:	bcc	18c74 <__assert_fail@plt+0x7954>
   18b30:	ldr	r1, [sp, #52]	; 0x34
   18b34:	ldr	r7, [fp, #-48]	; 0xffffffd0
   18b38:	str	r4, [sp, #48]	; 0x30
   18b3c:	str	r1, [sp, #32]
   18b40:	ldr	r1, [sp, #56]	; 0x38
   18b44:	str	r7, [sp, #40]	; 0x28
   18b48:	ldr	r7, [fp, #-44]	; 0xffffffd4
   18b4c:	str	r1, [sp, #36]	; 0x24
   18b50:	str	r7, [sp, #44]	; 0x2c
   18b54:	stm	sp, {r0, sl}
   18b58:	str	r0, [sp, #16]
   18b5c:	str	r2, [sp, #8]
   18b60:	str	r3, [sp, #12]
   18b64:	str	sl, [sp, #20]
   18b68:	ldr	r0, [sp, #60]	; 0x3c
   18b6c:	str	r0, [sp, #24]
   18b70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18b74:	str	ip, [fp, #-64]	; 0xffffffc0
   18b78:	str	r0, [sp, #28]
   18b7c:	sub	r0, fp, #40	; 0x28
   18b80:	bl	18f4c <__assert_fail@plt+0x7c2c>
   18b84:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18b88:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18b8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18b90:	ldr	r9, [sp, #64]	; 0x40
   18b94:	eor	r2, r1, r2
   18b98:	eor	r3, r0, r3
   18b9c:	orrs	r2, r3, r2
   18ba0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18ba4:	ldreq	r6, [sp, #48]	; 0x30
   18ba8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18bac:	eoreq	r7, r2, r7
   18bb0:	eoreq	r6, r3, r6
   18bb4:	orrseq	r7, r7, r6
   18bb8:	beq	18c78 <__assert_fail@plt+0x7958>
   18bbc:	mov	sl, #1
   18bc0:	mov	r8, #1
   18bc4:	ldr	r7, [fp, #20]
   18bc8:	ldrd	r4, [r7]
   18bcc:	eor	r7, r1, r5
   18bd0:	eor	r6, r0, r4
   18bd4:	orrs	r7, r6, r7
   18bd8:	bne	18bf4 <__assert_fail@plt+0x78d4>
   18bdc:	ldr	r7, [sp, #68]	; 0x44
   18be0:	ldrd	r4, [r7]
   18be4:	eor	r7, r3, r5
   18be8:	eor	r6, r2, r4
   18bec:	orrs	r7, r6, r7
   18bf0:	beq	18c74 <__assert_fail@plt+0x7954>
   18bf4:	ldr	r7, [fp, #16]
   18bf8:	add	sl, sl, #1
   18bfc:	cmp	sl, r7
   18c00:	bcs	18c74 <__assert_fail@plt+0x7954>
   18c04:	ldr	r7, [fp, #-60]	; 0xffffffc4
   18c08:	add	ip, sp, #16
   18c0c:	ldrd	r4, [r7]
   18c10:	ldrd	r6, [r9]
   18c14:	str	r7, [sp, #36]	; 0x24
   18c18:	ldr	r7, [fp, #-48]	; 0xffffffd0
   18c1c:	str	r6, [sp, #32]
   18c20:	str	r7, [sp, #40]	; 0x28
   18c24:	ldr	r7, [fp, #-44]	; 0xffffffd4
   18c28:	str	r7, [sp, #44]	; 0x2c
   18c2c:	stm	sp, {r0, r1, r2, r3}
   18c30:	stm	ip, {r0, r1, r4, r5}
   18c34:	sub	r0, fp, #40	; 0x28
   18c38:	bl	18f4c <__assert_fail@plt+0x7c2c>
   18c3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18c40:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18c44:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18c48:	eor	r2, r1, r2
   18c4c:	eor	r3, r0, r3
   18c50:	orrs	r2, r3, r2
   18c54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18c58:	ldreq	r6, [sp, #48]	; 0x30
   18c5c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18c60:	eoreq	r7, r2, r7
   18c64:	eoreq	r6, r3, r6
   18c68:	orrseq	r7, r7, r6
   18c6c:	bne	18bc4 <__assert_fail@plt+0x78a4>
   18c70:	b	18c78 <__assert_fail@plt+0x7958>
   18c74:	mov	r8, #0
   18c78:	mov	r0, r8
   18c7c:	sub	sp, fp, #28
   18c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c88:	add	fp, sp, #28
   18c8c:	sub	sp, sp, #100	; 0x64
   18c90:	str	r0, [fp, #-40]	; 0xffffffd8
   18c94:	mvn	r9, #63	; 0x3f
   18c98:	ldm	r1, {r5, lr}
   18c9c:	str	r2, [sp, #52]	; 0x34
   18ca0:	ldr	ip, [r1, #8]
   18ca4:	ldr	r6, [r1, #12]
   18ca8:	ldr	r4, [r2]
   18cac:	ldr	r2, [r2, #4]
   18cb0:	ldr	r0, [r3]
   18cb4:	ldr	r8, [r3, #4]
   18cb8:	ldr	sl, [r3, #12]
   18cbc:	str	r0, [fp, #-44]	; 0xffffffd4
   18cc0:	ldr	r0, [r3, #8]
   18cc4:	str	sl, [sp, #64]	; 0x40
   18cc8:	str	r8, [sp, #60]	; 0x3c
   18ccc:	str	r0, [fp, #-32]	; 0xffffffe0
   18cd0:	ldr	r0, [fp, #16]
   18cd4:	ldr	r1, [r0]
   18cd8:	str	r1, [fp, #-56]	; 0xffffffc8
   18cdc:	ldr	r1, [r0, #4]
   18ce0:	str	r1, [fp, #-60]	; 0xffffffc4
   18ce4:	ldr	r1, [r0, #8]
   18ce8:	ldr	r0, [r0, #12]
   18cec:	str	r1, [fp, #-52]	; 0xffffffcc
   18cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   18cf4:	tst	r4, #1
   18cf8:	str	r2, [fp, #-36]	; 0xffffffdc
   18cfc:	bne	18d18 <__assert_fail@plt+0x79f8>
   18d00:	ldr	r7, [fp, #-40]	; 0xffffffd8
   18d04:	ldr	r8, [fp, #-44]	; 0xffffffd4
   18d08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18d0c:	ldr	r1, [fp, #12]
   18d10:	ldr	r2, [fp, #8]
   18d14:	b	18da8 <__assert_fail@plt+0x7a88>
   18d18:	mov	r0, r8
   18d1c:	ldr	r8, [fp, #-44]	; 0xffffffd4
   18d20:	str	r0, [sp, #36]	; 0x24
   18d24:	ldr	r0, [fp, #8]
   18d28:	str	r8, [sp, #32]
   18d2c:	str	r0, [sp, #40]	; 0x28
   18d30:	ldr	r0, [fp, #12]
   18d34:	str	r0, [sp, #44]	; 0x2c
   18d38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18d3c:	str	r0, [sp]
   18d40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18d44:	stmib	sp, {r0, ip}
   18d48:	str	sl, [sp, #28]
   18d4c:	str	r6, [sp, #12]
   18d50:	str	r5, [sp, #16]
   18d54:	str	lr, [sp, #20]
   18d58:	str	lr, [sp, #56]	; 0x38
   18d5c:	mov	sl, ip
   18d60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18d64:	ldr	r7, [fp, #-40]	; 0xffffffd8
   18d68:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18d6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18d70:	str	r0, [sp, #24]
   18d74:	mov	r0, r7
   18d78:	bl	18f4c <__assert_fail@plt+0x7c2c>
   18d7c:	str	r0, [fp, #-56]	; 0xffffffc8
   18d80:	str	r1, [fp, #-60]	; 0xffffffc4
   18d84:	ldr	lr, [sp, #56]	; 0x38
   18d88:	ldr	r2, [fp, #8]
   18d8c:	mov	ip, sl
   18d90:	ldr	r1, [r7]
   18d94:	ldr	r0, [r7, #4]
   18d98:	str	r1, [fp, #-52]	; 0xffffffcc
   18d9c:	str	r0, [fp, #-48]	; 0xffffffd0
   18da0:	ldr	r1, [fp, #12]
   18da4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18da8:	str	r8, [sp, #32]
   18dac:	ldr	r8, [sp, #60]	; 0x3c
   18db0:	str	r2, [sp, #40]	; 0x28
   18db4:	str	r1, [sp, #44]	; 0x2c
   18db8:	mov	r2, ip
   18dbc:	mov	r3, r6
   18dc0:	str	r8, [sp, #36]	; 0x24
   18dc4:	stm	sp, {r5, lr}
   18dc8:	str	r0, [sp, #24]
   18dcc:	mov	r0, r7
   18dd0:	str	ip, [sp, #8]
   18dd4:	str	r6, [sp, #12]
   18dd8:	str	r5, [sp, #16]
   18ddc:	str	lr, [sp, #20]
   18de0:	ldr	sl, [sp, #64]	; 0x40
   18de4:	str	sl, [sp, #28]
   18de8:	bl	18f4c <__assert_fail@plt+0x7c2c>
   18dec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18df0:	ldr	ip, [r7]
   18df4:	ldr	r6, [r7, #4]
   18df8:	mov	r5, r0
   18dfc:	mov	lr, r1
   18e00:	lsrs	r2, r2, #1
   18e04:	rrx	r4, r4
   18e08:	adds	r9, r9, #1
   18e0c:	bne	18cf4 <__assert_fail@plt+0x79d4>
   18e10:	ldr	r0, [sp, #52]	; 0x34
   18e14:	ldr	r4, [r0, #8]
   18e18:	ldr	r9, [r0, #12]
   18e1c:	orrs	r0, r4, r9
   18e20:	beq	18f2c <__assert_fail@plt+0x7c0c>
   18e24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18e28:	ldr	r7, [fp, #-32]	; 0xffffffe0
   18e2c:	ldr	r1, [fp, #12]
   18e30:	ldr	r2, [fp, #8]
   18e34:	tst	r4, #1
   18e38:	bne	18e44 <__assert_fail@plt+0x7b24>
   18e3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18e40:	b	18ec8 <__assert_fail@plt+0x7ba8>
   18e44:	str	r1, [sp, #44]	; 0x2c
   18e48:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18e4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18e50:	str	r8, [sp, #36]	; 0x24
   18e54:	str	r2, [sp, #40]	; 0x28
   18e58:	str	r1, [sp]
   18e5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18e60:	str	r0, [sp, #32]
   18e64:	mov	r0, r3
   18e68:	stmib	sp, {r1, ip}
   18e6c:	str	r7, [sp, #24]
   18e70:	str	r6, [sp, #12]
   18e74:	str	r5, [sp, #16]
   18e78:	str	lr, [sp, #20]
   18e7c:	str	sl, [sp, #28]
   18e80:	mov	r7, lr
   18e84:	str	ip, [fp, #-36]	; 0xffffffdc
   18e88:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18e8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18e90:	bl	18f4c <__assert_fail@plt+0x7c2c>
   18e94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18e98:	str	r0, [fp, #-56]	; 0xffffffc8
   18e9c:	str	r1, [fp, #-60]	; 0xffffffc4
   18ea0:	mov	lr, r7
   18ea4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   18ea8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   18eac:	ldr	r2, [fp, #8]
   18eb0:	ldr	r1, [r3]
   18eb4:	ldr	r0, [r3, #4]
   18eb8:	str	r0, [fp, #-48]	; 0xffffffd0
   18ebc:	str	r1, [fp, #-52]	; 0xffffffcc
   18ec0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18ec4:	ldr	r1, [fp, #12]
   18ec8:	str	r0, [sp, #32]
   18ecc:	str	r2, [sp, #40]	; 0x28
   18ed0:	mov	r0, r3
   18ed4:	mov	r2, ip
   18ed8:	mov	r3, r6
   18edc:	str	r8, [sp, #36]	; 0x24
   18ee0:	str	r1, [sp, #44]	; 0x2c
   18ee4:	stm	sp, {r5, lr}
   18ee8:	str	ip, [sp, #8]
   18eec:	str	r6, [sp, #12]
   18ef0:	str	r5, [sp, #16]
   18ef4:	str	lr, [sp, #20]
   18ef8:	str	r7, [sp, #24]
   18efc:	str	sl, [sp, #28]
   18f00:	bl	18f4c <__assert_fail@plt+0x7c2c>
   18f04:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18f08:	lsrs	r9, r9, #1
   18f0c:	mov	r5, r0
   18f10:	mov	lr, r1
   18f14:	rrx	r4, r4
   18f18:	orrs	r0, r4, r9
   18f1c:	ldr	ip, [r3]
   18f20:	ldr	r6, [r3, #4]
   18f24:	bne	18e28 <__assert_fail@plt+0x7b08>
   18f28:	b	18f30 <__assert_fail@plt+0x7c10>
   18f2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18f30:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18f34:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18f38:	strd	r0, [r3]
   18f3c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18f40:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18f44:	sub	sp, fp, #28
   18f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f50:	add	fp, sp, #28
   18f54:	sub	sp, sp, #84	; 0x54
   18f58:	ldr	r1, [fp, #48]	; 0x30
   18f5c:	ldr	r6, [fp, #52]	; 0x34
   18f60:	str	r3, [fp, #-32]	; 0xffffffe0
   18f64:	rsbs	r7, r1, #0
   18f68:	rsc	r4, r6, #0
   18f6c:	cmn	r3, #1
   18f70:	ble	194bc <__assert_fail@plt+0x819c>
   18f74:	ldr	r1, [fp, #16]
   18f78:	ldr	r6, [fp, #20]
   18f7c:	mvn	r3, #0
   18f80:	subs	r1, r3, r1
   18f84:	sbcs	r1, r3, r6
   18f88:	bge	194dc <__assert_fail@plt+0x81bc>
   18f8c:	ldr	r9, [fp, #32]
   18f90:	str	r0, [fp, #-36]	; 0xffffffdc
   18f94:	ldr	r0, [fp, #36]	; 0x24
   18f98:	str	r2, [fp, #-40]	; 0xffffffd8
   18f9c:	subs	r1, r3, r9
   18fa0:	sbcs	r0, r3, r0
   18fa4:	bge	194fc <__assert_fail@plt+0x81dc>
   18fa8:	ldr	r3, [fp, #24]
   18fac:	ldr	r5, [fp, #8]
   18fb0:	ldr	sl, [fp, #28]
   18fb4:	ldr	lr, [fp, #12]
   18fb8:	ldr	r6, [fp, #44]	; 0x2c
   18fbc:	str	r4, [fp, #-44]	; 0xffffffd4
   18fc0:	ldr	r8, [fp, #40]	; 0x28
   18fc4:	str	r7, [fp, #-48]	; 0xffffffd0
   18fc8:	umull	r2, r0, r3, r5
   18fcc:	umull	ip, r1, r2, r7
   18fd0:	str	r2, [sp, #32]
   18fd4:	mla	r1, r2, r4, r1
   18fd8:	umull	r2, r4, sl, r5
   18fdc:	umlal	r2, r4, r3, lr
   18fe0:	mov	r3, lr
   18fe4:	adds	r0, r2, r0
   18fe8:	mla	r7, r0, r7, r1
   18fec:	str	r0, [sp, #28]
   18ff0:	umull	r0, r1, r7, r6
   18ff4:	umull	r5, sl, r7, r9
   18ff8:	ldr	r9, [fp, #20]
   18ffc:	str	r1, [sp, #24]
   19000:	str	r0, [sp, #36]	; 0x24
   19004:	umull	r1, r0, r7, r8
   19008:	str	r1, [sp, #16]
   1900c:	str	r0, [sp, #20]
   19010:	umull	r1, r0, ip, r6
   19014:	umlal	r1, r0, r7, r8
   19018:	str	r0, [sp, #12]
   1901c:	ldr	r0, [fp, #36]	; 0x24
   19020:	str	r1, [sp, #8]
   19024:	ldr	r1, [fp, #32]
   19028:	umull	r0, r6, r7, r0
   1902c:	str	r0, [sp, #4]
   19030:	ldr	r0, [fp, #36]	; 0x24
   19034:	umull	r0, lr, ip, r0
   19038:	umlal	r0, lr, r7, r1
   1903c:	adc	r1, r4, #0
   19040:	ldr	r7, [fp, #8]
   19044:	str	r1, [sp, #40]	; 0x28
   19048:	ldr	r1, [fp, #32]
   1904c:	umull	r2, r1, ip, r1
   19050:	adds	r0, r0, r1
   19054:	ldr	r1, [fp, #16]
   19058:	str	r2, [sp, #48]	; 0x30
   1905c:	adc	r8, lr, #0
   19060:	str	r0, [sp, #44]	; 0x2c
   19064:	subs	r0, r0, r5
   19068:	ldr	lr, [fp, #-40]	; 0xffffffd8
   1906c:	sbcs	r0, r8, sl
   19070:	mov	r0, #0
   19074:	movwcc	r0, #1
   19078:	mov	r2, r1
   1907c:	cmp	r0, #0
   19080:	umull	r4, r0, r9, r7
   19084:	umlal	r4, r0, r1, r3
   19088:	umull	r1, r5, r1, r7
   1908c:	addne	r6, r6, #1
   19090:	mov	r7, #0
   19094:	adds	sl, r4, r5
   19098:	str	r1, [sp]
   1909c:	adc	r1, r0, #0
   190a0:	umull	r5, r0, r2, r3
   190a4:	subs	r5, sl, r5
   190a8:	sbcs	r0, r1, r0
   190ac:	movwcc	r7, #1
   190b0:	umull	r5, r0, r9, r3
   190b4:	cmp	r7, #0
   190b8:	addne	r0, r0, #1
   190bc:	adds	r3, r5, r1
   190c0:	ldr	r1, [fp, #16]
   190c4:	umull	r7, r5, r9, lr
   190c8:	adc	r2, r0, #0
   190cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   190d0:	umlal	r7, r5, r1, r0
   190d4:	umull	r1, r9, r1, lr
   190d8:	adds	r7, r7, r9
   190dc:	str	r1, [sp, #56]	; 0x38
   190e0:	adc	r0, r5, #0
   190e4:	adds	r3, r3, r1
   190e8:	str	r7, [sp, #52]	; 0x34
   190ec:	ldr	r5, [sp, #24]
   190f0:	str	r0, [fp, #-52]	; 0xffffffcc
   190f4:	adc	r0, r2, r7
   190f8:	ldr	r2, [sp, #4]
   190fc:	adds	r1, r3, r8
   19100:	ldr	r3, [sp, #12]
   19104:	adc	r0, r0, #0
   19108:	adds	r8, r1, r2
   1910c:	ldr	r2, [fp, #40]	; 0x28
   19110:	adc	r1, r0, r6
   19114:	adds	r9, r8, #1
   19118:	ldr	r6, [fp, #8]
   1911c:	adc	r0, r1, #0
   19120:	umull	r2, r7, ip, r2
   19124:	ldr	ip, [sp, #28]
   19128:	ldr	r2, [sp, #8]
   1912c:	adds	r2, r2, r7
   19130:	adc	r7, r3, #0
   19134:	ldr	r3, [sp, #16]
   19138:	subs	r2, r2, r3
   1913c:	ldr	r3, [fp, #16]
   19140:	ldr	r2, [sp, #20]
   19144:	sbcs	r2, r7, r2
   19148:	mov	r2, #0
   1914c:	movwcc	r2, #1
   19150:	cmp	r2, #0
   19154:	ldr	r2, [sp, #32]
   19158:	addne	r5, r5, #1
   1915c:	orrs	r2, r2, ip
   19160:	mov	r2, #1
   19164:	umlal	r2, r4, r3, r6
   19168:	ldr	r3, [sp]
   1916c:	moveq	r4, sl
   19170:	moveq	r2, r3
   19174:	ldr	r3, [sp, #36]	; 0x24
   19178:	adds	r7, r7, r2
   1917c:	adc	r6, r4, #0
   19180:	adds	r7, r7, r3
   19184:	ldr	r3, [fp, #12]
   19188:	adc	r6, r6, r5
   1918c:	subs	r2, r7, r2
   19190:	ldr	r5, [sp, #40]	; 0x28
   19194:	sbcs	r2, r6, r4
   19198:	ldr	r4, [fp, #28]
   1919c:	mov	r2, #0
   191a0:	movwcc	r2, #1
   191a4:	cmp	r2, #0
   191a8:	moveq	r0, r1
   191ac:	ldr	r1, [fp, #24]
   191b0:	moveq	r9, r8
   191b4:	umull	r1, r2, r1, r3
   191b8:	subs	r1, ip, r1
   191bc:	sbcs	r1, r5, r2
   191c0:	umull	r2, r3, r4, r3
   191c4:	mov	r1, #0
   191c8:	movwcc	r1, #1
   191cc:	cmp	r1, #0
   191d0:	addne	r3, r3, #1
   191d4:	adds	r1, r2, r5
   191d8:	mov	r5, r4
   191dc:	adc	r2, r3, #0
   191e0:	adds	r1, r1, r7
   191e4:	ldr	r3, [fp, #24]
   191e8:	adcs	r2, r2, r6
   191ec:	umull	r7, r6, r4, lr
   191f0:	adcs	r9, r9, #0
   191f4:	adc	ip, r0, #0
   191f8:	ldr	r0, [sp, #48]	; 0x30
   191fc:	adds	sl, r1, r0
   19200:	ldr	r0, [sp, #44]	; 0x2c
   19204:	adcs	r2, r2, r0
   19208:	umull	r4, r0, r3, lr
   1920c:	mrs	r8, CPSR
   19210:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19214:	umlal	r7, r6, r3, r1
   19218:	adds	r0, r7, r0
   1921c:	adc	r7, r6, #0
   19220:	umull	r6, r3, r3, r1
   19224:	subs	r6, r0, r6
   19228:	sbcs	r3, r7, r3
   1922c:	umull	r6, r5, r5, r1
   19230:	mov	r3, #0
   19234:	movwcc	r3, #1
   19238:	cmp	r3, #0
   1923c:	addne	r5, r5, #1
   19240:	adds	r3, r6, r7
   19244:	adc	r5, r5, #0
   19248:	adds	r7, sl, r4
   1924c:	adcs	r6, r2, r0
   19250:	str	r7, [sp, #36]	; 0x24
   19254:	adcs	r0, r3, #0
   19258:	str	r6, [sp, #32]
   1925c:	str	r0, [fp, #-40]	; 0xffffffd8
   19260:	adc	r0, r5, #0
   19264:	str	r0, [sp, #48]	; 0x30
   19268:	msr	CPSR_f, r8
   1926c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19270:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19274:	adcs	r5, r9, #0
   19278:	adc	r8, ip, #0
   1927c:	str	r5, [sp, #16]
   19280:	umull	lr, r0, r7, r2
   19284:	mla	r0, r7, r1, r0
   19288:	ldr	r1, [fp, #36]	; 0x24
   1928c:	mla	r0, r6, r2, r0
   19290:	ldr	r2, [fp, #32]
   19294:	ldr	r6, [fp, #40]	; 0x28
   19298:	umull	r1, r3, lr, r1
   1929c:	umlal	r1, r3, r0, r2
   192a0:	ldr	r2, [fp, #32]
   192a4:	umull	r2, r4, lr, r2
   192a8:	str	r2, [fp, #-44]	; 0xffffffd4
   192ac:	adds	r2, r1, r4
   192b0:	ldr	r1, [fp, #32]
   192b4:	adc	r9, r3, #0
   192b8:	str	r2, [fp, #-48]	; 0xffffffd0
   192bc:	umull	r1, r3, r0, r1
   192c0:	subs	r1, r2, r1
   192c4:	sbcs	r1, r9, r3
   192c8:	mov	r3, #0
   192cc:	ldr	r1, [fp, #44]	; 0x2c
   192d0:	movwcc	r3, #1
   192d4:	cmp	r3, #0
   192d8:	umull	r4, sl, lr, r1
   192dc:	umull	r2, r7, r0, r1
   192e0:	ldr	r1, [fp, #36]	; 0x24
   192e4:	str	r7, [sp, #40]	; 0x28
   192e8:	str	r2, [sp, #44]	; 0x2c
   192ec:	umull	r7, r2, r0, r6
   192f0:	umlal	r4, sl, r0, r6
   192f4:	mov	r6, r8
   192f8:	str	r2, [sp, #28]
   192fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19300:	str	r7, [sp, #24]
   19304:	umull	r0, ip, r0, r1
   19308:	str	r0, [sp, #20]
   1930c:	ldr	r0, [sp, #56]	; 0x38
   19310:	addne	ip, ip, #1
   19314:	subs	r3, r5, r0
   19318:	ldr	r5, [sp, #52]	; 0x34
   1931c:	ldr	r0, [fp, #16]
   19320:	sbcs	r3, r8, r5
   19324:	umull	r8, r1, r0, r2
   19328:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1932c:	mov	r3, #0
   19330:	movwcc	r3, #1
   19334:	subs	r7, r5, r8
   19338:	ldr	r5, [fp, #20]
   1933c:	sbcs	r1, r0, r1
   19340:	mov	r1, #0
   19344:	movwcc	r1, #1
   19348:	umull	r8, r7, r5, r2
   1934c:	ldr	r2, [sp, #20]
   19350:	ldr	r5, [sp, #36]	; 0x24
   19354:	cmp	r1, #0
   19358:	addne	r7, r7, #1
   1935c:	adds	r8, r8, r0
   19360:	adc	r7, r7, #0
   19364:	adds	r1, r8, #1
   19368:	adc	r0, r7, #0
   1936c:	cmp	r3, #0
   19370:	mov	r3, r6
   19374:	moveq	r1, r8
   19378:	moveq	r0, r7
   1937c:	adds	r1, r1, r9
   19380:	adc	r0, r0, #0
   19384:	adds	r8, r1, r2
   19388:	adc	r1, r0, ip
   1938c:	ldr	ip, [sp, #16]
   19390:	adds	r0, r8, #1
   19394:	adc	r9, r1, #0
   19398:	adds	r2, ip, #1
   1939c:	adc	r7, r6, #0
   193a0:	ldr	r6, [sp, #32]
   193a4:	orrs	r5, r5, r6
   193a8:	moveq	r7, r3
   193ac:	ldr	r3, [fp, #40]	; 0x28
   193b0:	moveq	r2, ip
   193b4:	ldr	ip, [sp, #24]
   193b8:	umull	r5, r6, lr, r3
   193bc:	ldr	lr, [fp, #36]	; 0x24
   193c0:	adds	r6, r4, r6
   193c4:	adc	r5, sl, #0
   193c8:	ldr	sl, [fp, #32]
   193cc:	adds	r4, r5, r2
   193d0:	adc	r3, r7, #0
   193d4:	subs	r6, r6, ip
   193d8:	ldr	r6, [sp, #28]
   193dc:	sbcs	r6, r5, r6
   193e0:	ldr	r5, [sp, #40]	; 0x28
   193e4:	mov	r6, #0
   193e8:	movwcc	r6, #1
   193ec:	cmp	r6, #0
   193f0:	ldr	r6, [sp, #44]	; 0x2c
   193f4:	addne	r5, r5, #1
   193f8:	adds	r6, r4, r6
   193fc:	ldr	r4, [fp, #44]	; 0x2c
   19400:	adc	r3, r3, r5
   19404:	subs	r2, r6, r2
   19408:	sbcs	r2, r3, r7
   1940c:	mov	r2, #0
   19410:	movwcc	r2, #1
   19414:	cmp	r2, #0
   19418:	ldr	r2, [sp, #48]	; 0x30
   1941c:	moveq	r9, r1
   19420:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19424:	moveq	r0, r8
   19428:	adds	r1, r1, r6
   1942c:	adcs	r3, r2, r3
   19430:	ldr	r2, [fp, #-44]	; 0xffffffd4
   19434:	adcs	r0, r0, #0
   19438:	adc	r7, r9, #0
   1943c:	adds	r2, r1, r2
   19440:	ldr	r1, [fp, #-48]	; 0xffffffd0
   19444:	adcs	r1, r3, r1
   19448:	adcs	r0, r0, #0
   1944c:	adc	r3, r7, #0
   19450:	subs	r7, sl, r0
   19454:	sbcs	r7, lr, r3
   19458:	bcc	1947c <__assert_fail@plt+0x815c>
   1945c:	ldr	r7, [fp, #40]	; 0x28
   19460:	subs	r7, r2, r7
   19464:	sbcs	r7, r1, r4
   19468:	bcc	194a8 <__assert_fail@plt+0x8188>
   1946c:	eor	r7, r0, sl
   19470:	eor	r6, r3, lr
   19474:	orrs	r7, r7, r6
   19478:	bne	194a8 <__assert_fail@plt+0x8188>
   1947c:	ldr	r7, [fp, #40]	; 0x28
   19480:	subs	r2, r2, r7
   19484:	sbcs	r1, r1, r4
   19488:	mov	r4, #0
   1948c:	movwcc	r4, #1
   19490:	cmp	r4, #0
   19494:	mvnne	r4, #0
   19498:	subs	r7, r4, sl
   1949c:	sbc	r6, r4, lr
   194a0:	adds	r0, r7, r0
   194a4:	adc	r3, r6, r3
   194a8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   194ac:	stm	r7, {r0, r3}
   194b0:	mov	r0, r2
   194b4:	sub	sp, fp, #28
   194b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194bc:	movw	r0, #54053	; 0xd325
   194c0:	movw	r1, #53944	; 0xd2b8
   194c4:	movw	r3, #54084	; 0xd344
   194c8:	movw	r2, #993	; 0x3e1
   194cc:	movt	r0, #2
   194d0:	movt	r1, #2
   194d4:	movt	r3, #2
   194d8:	bl	11320 <__assert_fail@plt>
   194dc:	movw	r0, #54193	; 0xd3b1
   194e0:	movw	r1, #53944	; 0xd2b8
   194e4:	movw	r3, #54084	; 0xd344
   194e8:	movw	r2, #994	; 0x3e2
   194ec:	movt	r0, #2
   194f0:	movt	r1, #2
   194f4:	movt	r3, #2
   194f8:	bl	11320 <__assert_fail@plt>
   194fc:	movw	r0, #54224	; 0xd3d0
   19500:	movw	r1, #53944	; 0xd2b8
   19504:	movw	r3, #54084	; 0xd344
   19508:	movw	r2, #995	; 0x3e3
   1950c:	movt	r0, #2
   19510:	movt	r1, #2
   19514:	movt	r3, #2
   19518:	bl	11320 <__assert_fail@plt>
   1951c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19520:	add	fp, sp, #24
   19524:	mov	ip, r0
   19528:	ldr	r0, [fp, #24]
   1952c:	tst	r0, #1
   19530:	beq	19758 <__assert_fail@plt+0x8438>
   19534:	mov	r5, r3
   19538:	ldr	r3, [fp, #12]
   1953c:	ldr	lr, [fp, #8]
   19540:	ldr	r1, [fp, #28]
   19544:	ldr	r7, [fp, #20]
   19548:	ldr	r9, [fp, #16]
   1954c:	orr	r4, lr, r2
   19550:	orr	r6, r3, r5
   19554:	orrs	r4, r4, r6
   19558:	streq	r9, [ip]
   1955c:	streq	r7, [ip, #4]
   19560:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19564:	tst	lr, #1
   19568:	bne	19594 <__assert_fail@plt+0x8274>
   1956c:	lsrs	r5, r5, #1
   19570:	rrx	r8, r2
   19574:	lsrs	r3, r3, #1
   19578:	rrx	r6, lr
   1957c:	orr	r3, r3, r2, lsl #31
   19580:	tst	lr, #2
   19584:	mov	r2, r8
   19588:	mov	lr, r6
   1958c:	beq	1956c <__assert_fail@plt+0x824c>
   19590:	b	196a4 <__assert_fail@plt+0x8384>
   19594:	mov	r6, lr
   19598:	mov	r8, r2
   1959c:	b	196a4 <__assert_fail@plt+0x8384>
   195a0:	subs	r2, r9, r8
   195a4:	sbcs	r2, r7, r5
   195a8:	bcc	195c8 <__assert_fail@plt+0x82a8>
   195ac:	subs	r2, r0, r6
   195b0:	sbcs	r2, r1, r3
   195b4:	bcs	1961c <__assert_fail@plt+0x82fc>
   195b8:	eor	r2, r8, r9
   195bc:	eor	r4, r5, r7
   195c0:	orrs	r2, r2, r4
   195c4:	bne	1961c <__assert_fail@plt+0x82fc>
   195c8:	subs	lr, r8, r9
   195cc:	sbc	r8, r5, r7
   195d0:	subs	r4, lr, #1
   195d4:	sbc	r5, r8, #0
   195d8:	subs	r2, r6, r0
   195dc:	mov	r6, #0
   195e0:	sbcs	r3, r3, r1
   195e4:	movwcc	r6, #1
   195e8:	cmp	r6, #0
   195ec:	moveq	r4, lr
   195f0:	moveq	r5, r8
   195f4:	lsrs	r5, r5, #1
   195f8:	rrx	r8, r4
   195fc:	lsrs	r3, r3, #1
   19600:	rrx	r6, r2
   19604:	orr	r3, r3, r4, lsl #31
   19608:	tst	r2, #2
   1960c:	mov	r4, r8
   19610:	mov	r2, r6
   19614:	beq	195f4 <__assert_fail@plt+0x82d4>
   19618:	b	196a4 <__assert_fail@plt+0x8384>
   1961c:	subs	r2, r6, r0
   19620:	sbcs	r2, r3, r1
   19624:	mov	r2, #0
   19628:	movwcc	r2, #1
   1962c:	subs	r4, r8, r9
   19630:	sbcs	r4, r5, r7
   19634:	bcc	19654 <__assert_fail@plt+0x8334>
   19638:	eor	lr, r8, r9
   1963c:	eor	r4, r5, r7
   19640:	orr	r4, lr, r4
   19644:	clz	r4, r4
   19648:	lsr	r4, r4, #5
   1964c:	ands	r2, r2, r4
   19650:	beq	19744 <__assert_fail@plt+0x8424>
   19654:	subs	lr, r9, r8
   19658:	sbc	r9, r7, r5
   1965c:	subs	r2, lr, #1
   19660:	sbc	r7, r9, #0
   19664:	subs	r4, r0, r6
   19668:	mov	r0, #0
   1966c:	sbcs	r1, r1, r3
   19670:	movwcc	r0, #1
   19674:	cmp	r0, #0
   19678:	moveq	r2, lr
   1967c:	moveq	r7, r9
   19680:	lsrs	r7, r7, #1
   19684:	rrx	r9, r2
   19688:	lsrs	r1, r1, #1
   1968c:	rrx	r0, r4
   19690:	orr	r1, r1, r2, lsl #31
   19694:	tst	r4, #2
   19698:	mov	r2, r9
   1969c:	mov	r4, r0
   196a0:	beq	19680 <__assert_fail@plt+0x8360>
   196a4:	orr	r2, r8, r9
   196a8:	orr	r4, r5, r7
   196ac:	orrs	r2, r2, r4
   196b0:	bne	195a0 <__assert_fail@plt+0x8280>
   196b4:	mov	r2, #0
   196b8:	mov	r5, r0
   196bc:	str	r2, [ip]
   196c0:	str	r2, [ip, #4]
   196c4:	ands	r2, r6, #1
   196c8:	mov	r2, r1
   196cc:	moveq	r5, r6
   196d0:	movne	r1, r3
   196d4:	movne	r0, r6
   196d8:	moveq	r2, r3
   196dc:	orr	r7, r5, r2
   196e0:	cmp	r7, #0
   196e4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   196e8:	lsrs	r3, r1, #1
   196ec:	rrx	r0, r0
   196f0:	b	19728 <__assert_fail@plt+0x8408>
   196f4:	subs	r6, r5, r0
   196f8:	sbc	r4, r2, r3
   196fc:	orrs	r2, r6, r4
   19700:	orreq	r0, r7, #1
   19704:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19708:	eor	r1, r6, r4, asr #31
   1970c:	eor	r2, r4, r4, asr #31
   19710:	and	r7, r4, r4, asr #31
   19714:	subs	r5, r1, r4, asr #31
   19718:	and	r1, r6, r4, asr #31
   1971c:	sbc	r2, r2, r4, asr #31
   19720:	adds	r0, r1, r0
   19724:	adc	r3, r7, r3
   19728:	mov	r1, r2
   1972c:	mov	r7, r5
   19730:	lsrs	r2, r2, #1
   19734:	rrx	r5, r5
   19738:	tst	r7, #1
   1973c:	beq	19728 <__assert_fail@plt+0x8408>
   19740:	b	196f4 <__assert_fail@plt+0x83d4>
   19744:	mov	r0, r6
   19748:	mov	r1, r3
   1974c:	str	r8, [ip]
   19750:	str	r5, [ip, #4]
   19754:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19758:	movw	r0, #54424	; 0xd498
   1975c:	movw	r1, #53944	; 0xd2b8
   19760:	movw	r3, #54431	; 0xd49f
   19764:	mov	r2, #476	; 0x1dc
   19768:	movt	r0, #2
   1976c:	movt	r1, #2
   19770:	movt	r3, #2
   19774:	bl	11320 <__assert_fail@plt>
   19778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1977c:	add	fp, sp, #28
   19780:	push	{r0}		; (str r0, [sp, #-4]!)
   19784:	ldr	ip, [fp, #20]
   19788:	ldr	r0, [fp, #16]
   1978c:	orrs	r1, r0, ip
   19790:	beq	19988 <__assert_fail@plt+0x8668>
   19794:	ldr	r1, [fp, #12]
   19798:	ldr	r8, [fp, #8]
   1979c:	mov	r9, r2
   197a0:	mov	sl, r3
   197a4:	orrs	r2, r2, r3
   197a8:	beq	1996c <__assert_fail@plt+0x864c>
   197ac:	mov	r3, #0
   197b0:	mov	r4, r0
   197b4:	mov	r6, ip
   197b8:	cmp	r3, ip, lsr #24
   197bc:	bne	197e4 <__assert_fail@plt+0x84c4>
   197c0:	mov	r3, #0
   197c4:	mov	r4, r0
   197c8:	mov	r6, ip
   197cc:	lsl	r2, r6, #8
   197d0:	add	r3, r3, #8
   197d4:	orr	r6, r2, r4, lsr #24
   197d8:	lsl	r4, r4, #8
   197dc:	cmp	r6, #16777216	; 0x1000000
   197e0:	bcc	197cc <__assert_fail@plt+0x84ac>
   197e4:	mvn	r2, #0
   197e8:	cmp	r6, #0
   197ec:	blt	19810 <__assert_fail@plt+0x84f0>
   197f0:	lsl	r5, r6, #1
   197f4:	add	r3, r3, #1
   197f8:	orr	r6, r5, r4, lsr #31
   197fc:	lsl	r5, r4, #1
   19800:	subs	r4, r2, r4, lsl #1
   19804:	sbcs	r4, r2, r6
   19808:	mov	r4, r5
   1980c:	blt	197f0 <__assert_fail@plt+0x84d0>
   19810:	mov	r6, #0
   19814:	mov	r4, r9
   19818:	mov	r7, sl
   1981c:	cmp	r6, sl, lsr #24
   19820:	bne	19848 <__assert_fail@plt+0x8528>
   19824:	mov	r6, #0
   19828:	mov	r4, r9
   1982c:	mov	r7, sl
   19830:	lsl	r5, r7, #8
   19834:	add	r6, r6, #8
   19838:	orr	r7, r5, r4, lsr #24
   1983c:	lsl	r4, r4, #8
   19840:	cmp	r7, #16777216	; 0x1000000
   19844:	bcc	19830 <__assert_fail@plt+0x8510>
   19848:	subs	r5, r2, r4
   1984c:	sbcs	r5, r2, r7
   19850:	bge	19874 <__assert_fail@plt+0x8554>
   19854:	lsl	r5, r7, #1
   19858:	add	r6, r6, #1
   1985c:	orr	r7, r5, r4, lsr #31
   19860:	lsl	r5, r4, #1
   19864:	subs	r4, r2, r4, lsl #1
   19868:	sbcs	r4, r2, r7
   1986c:	mov	r4, r5
   19870:	blt	19854 <__assert_fail@plt+0x8534>
   19874:	sub	lr, r3, r6
   19878:	cmp	lr, #1
   1987c:	blt	19974 <__assert_fail@plt+0x8654>
   19880:	ldr	r7, [fp, #28]
   19884:	rsb	r6, lr, #32
   19888:	sub	r3, lr, #32
   1988c:	rsb	r5, lr, #64	; 0x40
   19890:	mov	r4, r0
   19894:	lsr	r2, r0, r6
   19898:	cmp	r3, #0
   1989c:	orr	r2, r2, ip, lsl lr
   198a0:	lslge	r2, r0, r3
   198a4:	cmp	r6, #0
   198a8:	lsr	ip, r7, r5
   198ac:	movwge	ip, #0
   198b0:	cmp	r6, #0
   198b4:	orr	r2, ip, r2
   198b8:	ldr	ip, [fp, #24]
   198bc:	lsr	r0, ip, r5
   198c0:	rsb	r5, r5, #32
   198c4:	orr	r0, r0, r7, lsl r5
   198c8:	lsl	r5, r4, lr
   198cc:	lsrge	r0, r7, r6
   198d0:	cmp	r3, #0
   198d4:	movwge	r5, #0
   198d8:	orr	r5, r0, r5
   198dc:	lsr	r0, ip, r6
   198e0:	orr	r6, r0, r7, lsl lr
   198e4:	lsl	r7, ip, lr
   198e8:	lslge	r6, ip, r3
   198ec:	cmp	r3, #0
   198f0:	movwge	r7, #0
   198f4:	subs	r0, r5, r9
   198f8:	mov	r4, r5
   198fc:	sbcs	r0, r2, sl
   19900:	bcc	19920 <__assert_fail@plt+0x8600>
   19904:	subs	r0, r8, r7
   19908:	sbcs	r0, r1, r6
   1990c:	bcc	1994c <__assert_fail@plt+0x862c>
   19910:	eor	r0, r9, r4
   19914:	eor	r5, sl, r2
   19918:	orrs	r0, r0, r5
   1991c:	bne	1994c <__assert_fail@plt+0x862c>
   19920:	subs	r0, r9, r4
   19924:	mov	r3, #0
   19928:	sbc	r5, sl, r2
   1992c:	subs	r9, r0, #1
   19930:	sbc	sl, r5, #0
   19934:	subs	r8, r8, r7
   19938:	sbcs	r1, r1, r6
   1993c:	movwcc	r3, #1
   19940:	cmp	r3, #0
   19944:	moveq	r9, r0
   19948:	moveq	sl, r5
   1994c:	lsrs	r2, r2, #1
   19950:	rrx	r5, r4
   19954:	lsrs	r0, r6, #1
   19958:	rrx	r7, r7
   1995c:	orr	r6, r0, r4, lsl #31
   19960:	subs	lr, lr, #1
   19964:	bne	198f4 <__assert_fail@plt+0x85d4>
   19968:	b	19974 <__assert_fail@plt+0x8654>
   1996c:	mov	r9, #0
   19970:	mov	sl, #0
   19974:	ldr	r0, [sp]
   19978:	stm	r0, {r9, sl}
   1997c:	mov	r0, r8
   19980:	sub	sp, fp, #28
   19984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19988:	movw	r0, #54507	; 0xd4eb
   1998c:	movw	r1, #53944	; 0xd2b8
   19990:	movw	r3, #54515	; 0xd4f3
   19994:	movw	r2, #411	; 0x19b
   19998:	movt	r0, #2
   1999c:	movt	r1, #2
   199a0:	movt	r3, #2
   199a4:	bl	11320 <__assert_fail@plt>
   199a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199ac:	add	fp, sp, #28
   199b0:	sub	sp, sp, #76	; 0x4c
   199b4:	mov	r1, #1
   199b8:	mov	r6, r0
   199bc:	mov	r7, #1
   199c0:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   199c4:	cmp	r0, #1
   199c8:	blt	19b90 <__assert_fail@plt+0x8870>
   199cc:	movw	r1, #60793	; 0xed79
   199d0:	mov	r0, r6
   199d4:	movt	r1, #381	; 0x17d
   199d8:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   199dc:	cmp	r0, #0
   199e0:	blt	19c28 <__assert_fail@plt+0x8908>
   199e4:	movw	r0, #48956	; 0xbf3c
   199e8:	sub	r4, fp, #40	; 0x28
   199ec:	add	sl, sp, #52	; 0x34
   199f0:	add	r7, sp, #40	; 0x28
   199f4:	mov	r8, #0
   199f8:	add	r9, sp, #28
   199fc:	movt	r0, #1
   19a00:	mov	r1, r4
   19a04:	mov	r2, sl
   19a08:	mov	r3, r7
   19a0c:	str	r9, [sp]
   19a10:	str	r8, [sp, #4]
   19a14:	bl	1a170 <__assert_fail@plt+0x8e50>
   19a18:	mov	r0, r7
   19a1c:	mov	r1, r6
   19a20:	mov	r2, #1
   19a24:	bl	1d58c <__assert_fail@plt+0xc26c>
   19a28:	mov	r0, r7
   19a2c:	mov	r1, #0
   19a30:	bl	2647c <__assert_fail@plt+0x1515c>
   19a34:	mov	r5, r0
   19a38:	mov	r0, r4
   19a3c:	mov	r1, r7
   19a40:	mov	r2, r5
   19a44:	bl	1f128 <__assert_fail@plt+0xde08>
   19a48:	mov	r0, sl
   19a4c:	mov	r1, #2
   19a50:	bl	1c078 <__assert_fail@plt+0xad58>
   19a54:	mov	r0, r6
   19a58:	mov	r1, r7
   19a5c:	mov	r2, sl
   19a60:	mov	r3, r9
   19a64:	str	r5, [sp, #12]
   19a68:	stm	sp, {r4, r5}
   19a6c:	bl	1a1d0 <__assert_fail@plt+0x8eb0>
   19a70:	cmp	r0, #0
   19a74:	mov	r7, #0
   19a78:	beq	19c08 <__assert_fail@plt+0x88e8>
   19a7c:	add	r7, sp, #28
   19a80:	add	r5, sp, #40	; 0x28
   19a84:	mov	r0, r7
   19a88:	mov	r1, r5
   19a8c:	bl	1c124 <__assert_fail@plt+0xae04>
   19a90:	add	r1, sp, #16
   19a94:	mov	r0, r7
   19a98:	bl	11ec0 <__assert_fail@plt+0xba0>
   19a9c:	mov	r9, #0
   19aa0:	add	r8, sp, #52	; 0x34
   19aa4:	ldr	r0, [sp, #24]
   19aa8:	cmp	r0, #0
   19aac:	beq	19b98 <__assert_fail@plt+0x8878>
   19ab0:	mov	r4, #1
   19ab4:	mov	sl, #0
   19ab8:	ldr	r0, [sp, #16]
   19abc:	mov	r1, r5
   19ac0:	add	r2, r0, sl
   19ac4:	mov	r0, r7
   19ac8:	bl	1f634 <__assert_fail@plt+0xe314>
   19acc:	mov	r0, r7
   19ad0:	mov	r1, r8
   19ad4:	mov	r2, r7
   19ad8:	mov	r3, r6
   19adc:	bl	21cf8 <__assert_fail@plt+0x109d8>
   19ae0:	mov	r0, r7
   19ae4:	mov	r1, #1
   19ae8:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   19aec:	ldr	r1, [sp, #24]
   19af0:	cmp	r0, #0
   19af4:	beq	19b0c <__assert_fail@plt+0x87ec>
   19af8:	add	r2, r4, #1
   19afc:	cmp	r4, r1
   19b00:	add	sl, sl, #12
   19b04:	mov	r4, r2
   19b08:	bcc	19ab8 <__assert_fail@plt+0x8798>
   19b0c:	cmp	r0, #0
   19b10:	bne	19ba8 <__assert_fail@plt+0x8888>
   19b14:	movw	r0, #80	; 0x50
   19b18:	mov	r1, r8
   19b1c:	movt	r0, #3
   19b20:	ldrb	r2, [r0, r9]
   19b24:	mov	r0, r8
   19b28:	bl	1d2d8 <__assert_fail@plt+0xbfb8>
   19b2c:	sub	r0, fp, #40	; 0x28
   19b30:	mov	r1, r5
   19b34:	mov	r2, r8
   19b38:	mov	r3, r7
   19b3c:	str	r0, [sp]
   19b40:	ldr	r0, [sp, #12]
   19b44:	str	r0, [sp, #4]
   19b48:	mov	r0, r6
   19b4c:	bl	1a1d0 <__assert_fail@plt+0x8eb0>
   19b50:	cmp	r0, #0
   19b54:	beq	19bb0 <__assert_fail@plt+0x8890>
   19b58:	add	r9, r9, #1
   19b5c:	lsr	r0, r9, #2
   19b60:	cmp	r0, #166	; 0xa6
   19b64:	bls	19aa4 <__assert_fail@plt+0x8784>
   19b68:	movw	r1, #53957	; 0xd2c5
   19b6c:	mov	r0, #0
   19b70:	mov	r2, #5
   19b74:	movt	r1, #2
   19b78:	bl	110f8 <dcgettext@plt>
   19b7c:	mov	r2, r0
   19b80:	mov	r0, #0
   19b84:	mov	r1, #0
   19b88:	bl	11188 <error@plt>
   19b8c:	bl	11314 <abort@plt>
   19b90:	mov	r7, #0
   19b94:	b	19c28 <__assert_fail@plt+0x8908>
   19b98:	mov	r8, #0
   19b9c:	add	r9, sp, #28
   19ba0:	mov	r7, #1
   19ba4:	b	19bf0 <__assert_fail@plt+0x88d0>
   19ba8:	mov	r7, #1
   19bac:	b	19bb8 <__assert_fail@plt+0x8898>
   19bb0:	ldr	r1, [sp, #24]
   19bb4:	mov	r7, #0
   19bb8:	cmp	r1, #0
   19bbc:	mov	r8, #0
   19bc0:	add	r9, sp, #28
   19bc4:	beq	19bf0 <__assert_fail@plt+0x88d0>
   19bc8:	mov	r4, #0
   19bcc:	mov	r5, #0
   19bd0:	ldr	r0, [sp, #16]
   19bd4:	add	r0, r0, r4
   19bd8:	bl	1bf98 <__assert_fail@plt+0xac78>
   19bdc:	ldr	r0, [sp, #24]
   19be0:	add	r5, r5, #1
   19be4:	add	r4, r4, #12
   19be8:	cmp	r5, r0
   19bec:	bcc	19bd0 <__assert_fail@plt+0x88b0>
   19bf0:	ldr	r0, [sp, #16]
   19bf4:	bl	1a3a4 <__assert_fail@plt+0x9084>
   19bf8:	ldr	r0, [sp, #20]
   19bfc:	bl	1a3a4 <__assert_fail@plt+0x9084>
   19c00:	cmp	r7, #0
   19c04:	movwne	r7, #1
   19c08:	movw	r0, #49048	; 0xbf98
   19c0c:	sub	r1, fp, #40	; 0x28
   19c10:	add	r2, sp, #52	; 0x34
   19c14:	add	r3, sp, #40	; 0x28
   19c18:	str	r9, [sp]
   19c1c:	str	r8, [sp, #4]
   19c20:	movt	r0, #1
   19c24:	bl	1a170 <__assert_fail@plt+0x8e50>
   19c28:	mov	r0, r7
   19c2c:	sub	sp, fp, #28
   19c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c38:	add	fp, sp, #28
   19c3c:	sub	sp, sp, #20
   19c40:	mov	r5, r0
   19c44:	ldr	r0, [r0]
   19c48:	mov	sl, r1
   19c4c:	ldr	r4, [r5, #8]
   19c50:	ldr	r6, [r5, #4]
   19c54:	sub	r8, r4, #1
   19c58:	cmp	r8, #0
   19c5c:	mov	r9, r8
   19c60:	blt	19cc0 <__assert_fail@plt+0x89a0>
   19c64:	add	r1, r8, r8, lsl #1
   19c68:	str	r6, [sp, #16]
   19c6c:	mov	r7, r4
   19c70:	str	r0, [sp, #12]
   19c74:	add	r6, r0, r1, lsl #2
   19c78:	mov	r0, r6
   19c7c:	mov	r1, sl
   19c80:	bl	1cf2c <__assert_fail@plt+0xbc0c>
   19c84:	cmp	r0, #1
   19c88:	blt	19ca0 <__assert_fail@plt+0x8980>
   19c8c:	sub	r7, r7, #1
   19c90:	sub	r6, r6, #12
   19c94:	cmp	r7, #0
   19c98:	bgt	19c78 <__assert_fail@plt+0x8958>
   19c9c:	b	19cb4 <__assert_fail@plt+0x8994>
   19ca0:	mov	r0, r6
   19ca4:	mov	r1, sl
   19ca8:	bl	1cf2c <__assert_fail@plt+0xbc0c>
   19cac:	cmp	r0, #0
   19cb0:	beq	19d80 <__assert_fail@plt+0x8a60>
   19cb4:	ldr	r6, [sp, #16]
   19cb8:	ldr	r0, [sp, #12]
   19cbc:	sub	r9, r7, #1
   19cc0:	str	r5, [sp, #12]
   19cc4:	add	r5, r4, r4, lsl #1
   19cc8:	mov	r1, #12
   19ccc:	add	r1, r1, r5, lsl #2
   19cd0:	bl	2ab34 <__assert_fail@plt+0x19814>
   19cd4:	mov	r7, r0
   19cd8:	add	r0, r4, #1
   19cdc:	str	r0, [sp, #8]
   19ce0:	lsl	r1, r0, #2
   19ce4:	mov	r0, r6
   19ce8:	bl	2ab34 <__assert_fail@plt+0x19814>
   19cec:	add	r6, r7, r5, lsl #2
   19cf0:	str	r0, [sp, #16]
   19cf4:	str	r7, [sp, #4]
   19cf8:	mov	r0, r6
   19cfc:	bl	1bf3c <__assert_fail@plt+0xac1c>
   19d00:	cmp	r8, r9
   19d04:	ble	19d40 <__assert_fail@plt+0x8a20>
   19d08:	ldr	r0, [sp, #16]
   19d0c:	add	r4, r0, r4, lsl #2
   19d10:	mov	r5, r4
   19d14:	sub	r7, r6, #12
   19d18:	mov	r0, r6
   19d1c:	mov	r1, r7
   19d20:	bl	1c124 <__assert_fail@plt+0xae04>
   19d24:	ldr	r0, [r5, #-4]!
   19d28:	sub	r8, r8, #1
   19d2c:	mov	r6, r7
   19d30:	cmp	r8, r9
   19d34:	str	r0, [r4]
   19d38:	mov	r4, r5
   19d3c:	bgt	19d14 <__assert_fail@plt+0x89f4>
   19d40:	ldr	r5, [sp, #4]
   19d44:	add	r4, r9, #1
   19d48:	mov	r1, sl
   19d4c:	add	r0, r4, r4, lsl #1
   19d50:	add	r0, r5, r0, lsl #2
   19d54:	bl	1c124 <__assert_fail@plt+0xae04>
   19d58:	ldr	r1, [sp, #16]
   19d5c:	mov	r0, #1
   19d60:	str	r0, [r1, r4, lsl #2]
   19d64:	ldr	r0, [sp, #12]
   19d68:	str	r5, [r0]
   19d6c:	str	r1, [r0, #4]
   19d70:	ldr	r1, [sp, #8]
   19d74:	str	r1, [r0, #8]
   19d78:	sub	sp, fp, #28
   19d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d80:	ldr	r0, [sp, #16]
   19d84:	add	r0, r0, r7, lsl #2
   19d88:	ldr	r1, [r0, #-4]
   19d8c:	add	r1, r1, #1
   19d90:	str	r1, [r0, #-4]
   19d94:	sub	sp, fp, #28
   19d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19da0:	add	fp, sp, #28
   19da4:	sub	sp, sp, #116	; 0x74
   19da8:	mov	r8, r0
   19dac:	movw	r0, #8588	; 0x218c
   19db0:	mov	r6, r1
   19db4:	str	r2, [sp, #24]
   19db8:	movt	r0, #4
   19dbc:	ldrb	r0, [r0]
   19dc0:	cmp	r0, #1
   19dc4:	bne	19de8 <__assert_fail@plt+0x8ac8>
   19dc8:	movw	r0, #8568	; 0x2178
   19dcc:	movw	r2, #54625	; 0xd561
   19dd0:	mov	r1, #1
   19dd4:	mov	r3, r6
   19dd8:	movt	r0, #4
   19ddc:	movt	r2, #2
   19de0:	ldr	r0, [r0]
   19de4:	bl	11278 <__fprintf_chk@plt>
   19de8:	movw	r0, #48956	; 0xbf3c
   19dec:	add	r1, sp, #56	; 0x38
   19df0:	add	r2, sp, #44	; 0x2c
   19df4:	mov	r3, #0
   19df8:	mov	r7, #0
   19dfc:	movt	r0, #1
   19e00:	bl	1a170 <__assert_fail@plt+0x8e50>
   19e04:	sub	r0, fp, #64	; 0x40
   19e08:	mov	r1, #2
   19e0c:	bl	1c24c <__assert_fail@plt+0xaf2c>
   19e10:	sub	r0, fp, #40	; 0x28
   19e14:	mov	r1, #2
   19e18:	bl	1c24c <__assert_fail@plt+0xaf2c>
   19e1c:	sub	r0, fp, #52	; 0x34
   19e20:	mov	r1, #2
   19e24:	bl	1c24c <__assert_fail@plt+0xaf2c>
   19e28:	add	r0, sp, #68	; 0x44
   19e2c:	mov	r1, #1
   19e30:	mov	r4, #1
   19e34:	bl	1c264 <__assert_fail@plt+0xaf44>
   19e38:	mov	r0, r8
   19e3c:	mov	r1, #1
   19e40:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   19e44:	cmp	r0, #0
   19e48:	beq	1a130 <__assert_fail@plt+0x8e10>
   19e4c:	add	r0, r6, #1
   19e50:	add	r9, sp, #56	; 0x38
   19e54:	sub	r5, fp, #40	; 0x28
   19e58:	str	r0, [sp, #20]
   19e5c:	mov	r0, #1
   19e60:	str	r0, [sp, #32]
   19e64:	mov	r0, #0
   19e68:	b	19ea0 <__assert_fail@plt+0x8b80>
   19e6c:	ldr	r0, [sp, #40]	; 0x28
   19e70:	mov	r1, r5
   19e74:	orr	r0, r0, sl, lsr #31
   19e78:	str	r0, [sp, #40]	; 0x28
   19e7c:	lsl	r0, sl, #1
   19e80:	str	r0, [sp, #28]
   19e84:	sub	r0, fp, #64	; 0x40
   19e88:	bl	1c124 <__assert_fail@plt+0xae04>
   19e8c:	ldr	r0, [sp, #28]
   19e90:	ldr	r7, [sp, #36]	; 0x24
   19e94:	mov	r4, sl
   19e98:	str	r0, [sp, #32]
   19e9c:	ldr	r0, [sp, #40]	; 0x28
   19ea0:	str	r0, [sp, #36]	; 0x24
   19ea4:	mov	r0, r9
   19ea8:	mov	r1, r5
   19eac:	mov	r2, r5
   19eb0:	str	r7, [sp, #40]	; 0x28
   19eb4:	bl	1df50 <__assert_fail@plt+0xcc30>
   19eb8:	mov	r0, r5
   19ebc:	mov	r1, r9
   19ec0:	mov	r2, r8
   19ec4:	bl	1ee24 <__assert_fail@plt+0xdb04>
   19ec8:	mov	r0, r5
   19ecc:	mov	r1, r5
   19ed0:	mov	r2, r6
   19ed4:	bl	1d2d8 <__assert_fail@plt+0xbfb8>
   19ed8:	mov	r0, r9
   19edc:	sub	r1, fp, #52	; 0x34
   19ee0:	mov	r2, r5
   19ee4:	bl	1db64 <__assert_fail@plt+0xc844>
   19ee8:	mov	sl, r6
   19eec:	add	r6, sp, #44	; 0x2c
   19ef0:	mov	r7, r5
   19ef4:	add	r5, sp, #68	; 0x44
   19ef8:	mov	r2, r9
   19efc:	mov	r0, r6
   19f00:	mov	r1, r5
   19f04:	bl	1df50 <__assert_fail@plt+0xcc30>
   19f08:	mov	r0, r5
   19f0c:	mov	r1, r6
   19f10:	mov	r2, r8
   19f14:	mov	r5, r7
   19f18:	mov	r6, sl
   19f1c:	bl	1ee24 <__assert_fail@plt+0xdb04>
   19f20:	and	r0, r4, #31
   19f24:	teq	r0, #1
   19f28:	bne	19f60 <__assert_fail@plt+0x8c40>
   19f2c:	mov	r0, r9
   19f30:	add	r1, sp, #68	; 0x44
   19f34:	mov	r2, r8
   19f38:	bl	1fd0c <__assert_fail@plt+0xe9ec>
   19f3c:	mov	r0, r9
   19f40:	mov	r1, #1
   19f44:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   19f48:	cmp	r0, #0
   19f4c:	sub	r7, fp, #64	; 0x40
   19f50:	bne	19f78 <__assert_fail@plt+0x8c58>
   19f54:	mov	r0, r7
   19f58:	mov	r1, r5
   19f5c:	bl	1c124 <__assert_fail@plt+0xae04>
   19f60:	ldr	r7, [sp, #40]	; 0x28
   19f64:	subs	r4, r4, #1
   19f68:	sbc	r7, r7, #0
   19f6c:	orrs	r0, r4, r7
   19f70:	bne	19ea4 <__assert_fail@plt+0x8b84>
   19f74:	b	1a0a8 <__assert_fail@plt+0x8d88>
   19f78:	mov	r0, r9
   19f7c:	mov	r1, r7
   19f80:	mov	r2, r7
   19f84:	bl	1df50 <__assert_fail@plt+0xcc30>
   19f88:	mov	r0, r7
   19f8c:	mov	r1, r9
   19f90:	mov	r2, r8
   19f94:	bl	1ee24 <__assert_fail@plt+0xdb04>
   19f98:	mov	r0, r7
   19f9c:	mov	r1, r7
   19fa0:	mov	r2, r6
   19fa4:	bl	1d2d8 <__assert_fail@plt+0xbfb8>
   19fa8:	mov	r0, r9
   19fac:	sub	r1, fp, #52	; 0x34
   19fb0:	mov	r2, r7
   19fb4:	bl	1db64 <__assert_fail@plt+0xc844>
   19fb8:	mov	r0, r9
   19fbc:	mov	r1, r9
   19fc0:	mov	r2, r8
   19fc4:	bl	1fd0c <__assert_fail@plt+0xe9ec>
   19fc8:	mov	r0, r9
   19fcc:	mov	r1, #1
   19fd0:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   19fd4:	cmp	r0, #0
   19fd8:	beq	19f78 <__assert_fail@plt+0x8c58>
   19fdc:	mov	r0, r8
   19fe0:	mov	r1, r8
   19fe4:	mov	r2, r9
   19fe8:	bl	1f634 <__assert_fail@plt+0xe314>
   19fec:	mov	r0, r9
   19ff0:	bl	199a8 <__assert_fail@plt+0x8688>
   19ff4:	cmp	r0, #0
   19ff8:	beq	1a00c <__assert_fail@plt+0x8cec>
   19ffc:	ldr	r0, [sp, #24]
   1a000:	mov	r1, r9
   1a004:	bl	19c34 <__assert_fail@plt+0x8914>
   1a008:	b	1a04c <__assert_fail@plt+0x8d2c>
   1a00c:	movw	r0, #8588	; 0x218c
   1a010:	movt	r0, #4
   1a014:	ldrb	r0, [r0]
   1a018:	cmp	r0, #1
   1a01c:	bne	1a03c <__assert_fail@plt+0x8d1c>
   1a020:	movw	r0, #8568	; 0x2178
   1a024:	movw	r2, #54646	; 0xd576
   1a028:	mov	r1, #1
   1a02c:	movt	r0, #4
   1a030:	movt	r2, #2
   1a034:	ldr	r0, [r0]
   1a038:	bl	11278 <__fprintf_chk@plt>
   1a03c:	ldr	r1, [sp, #20]
   1a040:	ldr	r2, [sp, #24]
   1a044:	mov	r0, r9
   1a048:	bl	19d9c <__assert_fail@plt+0x8a7c>
   1a04c:	mov	r0, r8
   1a050:	bl	199a8 <__assert_fail@plt+0x8688>
   1a054:	cmp	r0, #0
   1a058:	bne	1a124 <__assert_fail@plt+0x8e04>
   1a05c:	mov	r0, r5
   1a060:	mov	r1, r5
   1a064:	mov	r2, r8
   1a068:	bl	1ee24 <__assert_fail@plt+0xdb04>
   1a06c:	sub	r0, fp, #52	; 0x34
   1a070:	mov	r2, r8
   1a074:	mov	r1, r0
   1a078:	bl	1ee24 <__assert_fail@plt+0xdb04>
   1a07c:	mov	r0, r7
   1a080:	mov	r1, r7
   1a084:	mov	r2, r8
   1a088:	bl	1ee24 <__assert_fail@plt+0xdb04>
   1a08c:	mov	r0, r8
   1a090:	mov	r1, #1
   1a094:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   1a098:	ldr	r7, [sp, #40]	; 0x28
   1a09c:	cmp	r0, #0
   1a0a0:	bne	19ea4 <__assert_fail@plt+0x8b84>
   1a0a4:	b	1a130 <__assert_fail@plt+0x8e10>
   1a0a8:	sub	r0, fp, #52	; 0x34
   1a0ac:	mov	r1, r5
   1a0b0:	bl	1c124 <__assert_fail@plt+0xae04>
   1a0b4:	ldr	r0, [sp, #36]	; 0x24
   1a0b8:	ldr	sl, [sp, #32]
   1a0bc:	lsl	r1, r0, #1
   1a0c0:	str	r0, [sp, #36]	; 0x24
   1a0c4:	orrs	r0, sl, r0
   1a0c8:	str	r1, [sp, #40]	; 0x28
   1a0cc:	beq	19e6c <__assert_fail@plt+0x8b4c>
   1a0d0:	mov	r7, #0
   1a0d4:	mov	r4, #0
   1a0d8:	mov	r0, r9
   1a0dc:	mov	r1, r5
   1a0e0:	mov	r2, r5
   1a0e4:	bl	1df50 <__assert_fail@plt+0xcc30>
   1a0e8:	mov	r0, r5
   1a0ec:	mov	r1, r9
   1a0f0:	mov	r2, r8
   1a0f4:	bl	1ee24 <__assert_fail@plt+0xdb04>
   1a0f8:	mov	r0, r5
   1a0fc:	mov	r1, r5
   1a100:	mov	r2, r6
   1a104:	bl	1d2d8 <__assert_fail@plt+0xbfb8>
   1a108:	adds	r7, r7, #1
   1a10c:	adc	r4, r4, #0
   1a110:	subs	r0, r7, sl
   1a114:	ldr	r0, [sp, #36]	; 0x24
   1a118:	sbcs	r0, r4, r0
   1a11c:	bcc	1a0d8 <__assert_fail@plt+0x8db8>
   1a120:	b	19e6c <__assert_fail@plt+0x8b4c>
   1a124:	ldr	r0, [sp, #24]
   1a128:	mov	r1, r8
   1a12c:	bl	19c34 <__assert_fail@plt+0x8914>
   1a130:	sub	r1, fp, #52	; 0x34
   1a134:	mov	r0, #0
   1a138:	add	r2, sp, #44	; 0x2c
   1a13c:	add	r3, sp, #56	; 0x38
   1a140:	str	r1, [sp]
   1a144:	sub	r1, fp, #40	; 0x28
   1a148:	str	r0, [sp, #12]
   1a14c:	movw	r0, #49048	; 0xbf98
   1a150:	str	r1, [sp, #4]
   1a154:	sub	r1, fp, #64	; 0x40
   1a158:	movt	r0, #1
   1a15c:	str	r1, [sp, #8]
   1a160:	add	r1, sp, #68	; 0x44
   1a164:	bl	1a170 <__assert_fail@plt+0x8e50>
   1a168:	sub	sp, fp, #28
   1a16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a170:	sub	sp, sp, #12
   1a174:	push	{r4, sl, fp, lr}
   1a178:	add	fp, sp, #8
   1a17c:	sub	sp, sp, #4
   1a180:	mov	r4, r0
   1a184:	add	r0, fp, #8
   1a188:	stm	r0, {r1, r2, r3}
   1a18c:	add	r0, fp, #8
   1a190:	add	r0, r0, #4
   1a194:	str	r0, [sp]
   1a198:	ldr	r0, [fp, #8]
   1a19c:	cmp	r0, #0
   1a1a0:	beq	1a1c0 <__assert_fail@plt+0x8ea0>
   1a1a4:	blx	r4
   1a1a8:	ldr	r0, [sp]
   1a1ac:	add	r1, r0, #4
   1a1b0:	str	r1, [sp]
   1a1b4:	ldr	r0, [r0]
   1a1b8:	cmp	r0, #0
   1a1bc:	bne	1a1a4 <__assert_fail@plt+0x8e84>
   1a1c0:	sub	sp, fp, #8
   1a1c4:	pop	{r4, sl, fp, lr}
   1a1c8:	add	sp, sp, #12
   1a1cc:	bx	lr
   1a1d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a1d4:	add	fp, sp, #24
   1a1d8:	mov	r4, r3
   1a1dc:	mov	r3, r2
   1a1e0:	ldr	r2, [fp, #8]
   1a1e4:	mov	r7, r0
   1a1e8:	mov	r6, r1
   1a1ec:	mov	r1, r3
   1a1f0:	mov	r0, r4
   1a1f4:	mov	r3, r7
   1a1f8:	bl	21cf8 <__assert_fail@plt+0x109d8>
   1a1fc:	mov	r0, r4
   1a200:	mov	r1, #1
   1a204:	mov	r8, #1
   1a208:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   1a20c:	cmp	r0, #0
   1a210:	beq	1a288 <__assert_fail@plt+0x8f68>
   1a214:	mov	r0, r4
   1a218:	mov	r1, r6
   1a21c:	bl	1cf2c <__assert_fail@plt+0xbc0c>
   1a220:	cmp	r0, #0
   1a224:	beq	1a288 <__assert_fail@plt+0x8f68>
   1a228:	ldr	r9, [fp, #12]
   1a22c:	mov	r8, #0
   1a230:	cmp	r9, #2
   1a234:	bcc	1a288 <__assert_fail@plt+0x8f68>
   1a238:	mov	r5, #2
   1a23c:	mov	r0, r4
   1a240:	mov	r1, r4
   1a244:	mov	r2, #2
   1a248:	mov	r3, r7
   1a24c:	bl	22c20 <__assert_fail@plt+0x11900>
   1a250:	mov	r0, r4
   1a254:	mov	r1, r6
   1a258:	bl	1cf2c <__assert_fail@plt+0xbc0c>
   1a25c:	cmp	r0, #0
   1a260:	beq	1a290 <__assert_fail@plt+0x8f70>
   1a264:	mov	r0, r4
   1a268:	mov	r1, #1
   1a26c:	bl	1cee8 <__assert_fail@plt+0xbbc8>
   1a270:	cmp	r0, #0
   1a274:	beq	1a288 <__assert_fail@plt+0x8f68>
   1a278:	add	r0, r5, #1
   1a27c:	cmp	r5, r9
   1a280:	mov	r5, r0
   1a284:	bcc	1a23c <__assert_fail@plt+0x8f1c>
   1a288:	mov	r0, r8
   1a28c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a290:	mov	r8, #1
   1a294:	mov	r0, r8
   1a298:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a29c:	movw	r1, #8600	; 0x2198
   1a2a0:	movt	r1, #4
   1a2a4:	str	r0, [r1]
   1a2a8:	bx	lr
   1a2ac:	movw	r1, #8604	; 0x219c
   1a2b0:	movt	r1, #4
   1a2b4:	strb	r0, [r1]
   1a2b8:	bx	lr
   1a2bc:	push	{r4, r5, r6, sl, fp, lr}
   1a2c0:	add	fp, sp, #16
   1a2c4:	sub	sp, sp, #8
   1a2c8:	movw	r0, #8580	; 0x2184
   1a2cc:	movt	r0, #4
   1a2d0:	ldr	r0, [r0]
   1a2d4:	bl	2b268 <__assert_fail@plt+0x19f48>
   1a2d8:	cmp	r0, #0
   1a2dc:	beq	1a304 <__assert_fail@plt+0x8fe4>
   1a2e0:	movw	r0, #8604	; 0x219c
   1a2e4:	movt	r0, #4
   1a2e8:	ldrb	r0, [r0]
   1a2ec:	cmp	r0, #0
   1a2f0:	beq	1a324 <__assert_fail@plt+0x9004>
   1a2f4:	bl	11218 <__errno_location@plt>
   1a2f8:	ldr	r0, [r0]
   1a2fc:	cmp	r0, #32
   1a300:	bne	1a324 <__assert_fail@plt+0x9004>
   1a304:	movw	r0, #8568	; 0x2178
   1a308:	movt	r0, #4
   1a30c:	ldr	r0, [r0]
   1a310:	bl	2b268 <__assert_fail@plt+0x19f48>
   1a314:	cmp	r0, #0
   1a318:	subeq	sp, fp, #16
   1a31c:	popeq	{r4, r5, r6, sl, fp, pc}
   1a320:	b	1a394 <__assert_fail@plt+0x9074>
   1a324:	movw	r1, #53796	; 0xd224
   1a328:	mov	r0, #0
   1a32c:	mov	r2, #5
   1a330:	movt	r1, #2
   1a334:	bl	110f8 <dcgettext@plt>
   1a338:	mov	r4, r0
   1a33c:	movw	r0, #8600	; 0x2198
   1a340:	movt	r0, #4
   1a344:	ldr	r6, [r0]
   1a348:	bl	11218 <__errno_location@plt>
   1a34c:	ldr	r5, [r0]
   1a350:	cmp	r6, #0
   1a354:	bne	1a370 <__assert_fail@plt+0x9050>
   1a358:	movw	r2, #1577	; 0x629
   1a35c:	mov	r0, #0
   1a360:	mov	r1, r5
   1a364:	mov	r3, r4
   1a368:	movt	r2, #3
   1a36c:	b	1a390 <__assert_fail@plt+0x9070>
   1a370:	mov	r0, r6
   1a374:	bl	29970 <__assert_fail@plt+0x18650>
   1a378:	movw	r2, #1573	; 0x625
   1a37c:	mov	r3, r0
   1a380:	str	r4, [sp]
   1a384:	mov	r0, #0
   1a388:	mov	r1, r5
   1a38c:	movt	r2, #3
   1a390:	bl	11188 <error@plt>
   1a394:	movw	r0, #8472	; 0x2118
   1a398:	movt	r0, #4
   1a39c:	ldr	r0, [r0]
   1a3a0:	bl	110c8 <_exit@plt>
   1a3a4:	push	{r4, r5, r6, sl, fp, lr}
   1a3a8:	add	fp, sp, #16
   1a3ac:	mov	r4, r0
   1a3b0:	bl	11218 <__errno_location@plt>
   1a3b4:	ldr	r6, [r0]
   1a3b8:	mov	r5, r0
   1a3bc:	mov	r0, r4
   1a3c0:	bl	110bc <free@plt>
   1a3c4:	str	r6, [r5]
   1a3c8:	pop	{r4, r5, r6, sl, fp, pc}
   1a3cc:	push	{r4, r5, r6, r7, fp, lr}
   1a3d0:	add	fp, sp, #16
   1a3d4:	cmp	r2, #0
   1a3d8:	moveq	r4, #0
   1a3dc:	moveq	r0, r4
   1a3e0:	popeq	{r4, r5, r6, r7, fp, pc}
   1a3e4:	mov	r5, r2
   1a3e8:	mov	r6, r1
   1a3ec:	mov	r7, r0
   1a3f0:	mov	r4, #0
   1a3f4:	mov	r0, r7
   1a3f8:	mov	r1, r6
   1a3fc:	mov	r2, r5
   1a400:	bl	2a108 <__assert_fail@plt+0x18de8>
   1a404:	cmn	r0, #1
   1a408:	beq	1a424 <__assert_fail@plt+0x9104>
   1a40c:	cmp	r0, #0
   1a410:	beq	1a42c <__assert_fail@plt+0x910c>
   1a414:	subs	r5, r5, r0
   1a418:	add	r6, r6, r0
   1a41c:	add	r4, r0, r4
   1a420:	bne	1a3f4 <__assert_fail@plt+0x90d4>
   1a424:	mov	r0, r4
   1a428:	pop	{r4, r5, r6, r7, fp, pc}
   1a42c:	bl	11218 <__errno_location@plt>
   1a430:	mov	r1, #28
   1a434:	str	r1, [r0]
   1a438:	mov	r0, r4
   1a43c:	pop	{r4, r5, r6, r7, fp, pc}
   1a440:	push	{r4, r5, r6, sl, fp, lr}
   1a444:	add	fp, sp, #16
   1a448:	mov	r5, r0
   1a44c:	mov	r0, #0
   1a450:	mov	r4, r1
   1a454:	add	r6, r2, #19
   1a458:	strb	r0, [r2, #20]
   1a45c:	mov	r0, r5
   1a460:	mov	r1, r4
   1a464:	mov	r2, #10
   1a468:	mov	r3, #0
   1a46c:	bl	2cd3c <__assert_fail@plt+0x1ba1c>
   1a470:	add	r2, r0, r0, lsl #2
   1a474:	sub	r2, r5, r2, lsl #1
   1a478:	orr	r2, r2, #48	; 0x30
   1a47c:	strb	r2, [r6], #-1
   1a480:	rsbs	r2, r5, #9
   1a484:	mov	r5, r0
   1a488:	rscs	r2, r4, #0
   1a48c:	mov	r4, r1
   1a490:	bcc	1a45c <__assert_fail@plt+0x913c>
   1a494:	add	r0, r6, #1
   1a498:	pop	{r4, r5, r6, sl, fp, pc}
   1a49c:	andeq	r0, r0, r0
   1a4a0:	cmp	r0, #0
   1a4a4:	movwne	r3, #8476	; 0x211c
   1a4a8:	movtne	r3, #4
   1a4ac:	ldrne	r3, [r3]
   1a4b0:	strne	r3, [r0]
   1a4b4:	cmp	r1, #0
   1a4b8:	movwne	r0, #8480	; 0x2120
   1a4bc:	movtne	r0, #4
   1a4c0:	ldrne	r0, [r0]
   1a4c4:	strne	r0, [r1]
   1a4c8:	cmp	r2, #0
   1a4cc:	movwne	r0, #8484	; 0x2124
   1a4d0:	movtne	r0, #4
   1a4d4:	ldrne	r0, [r0]
   1a4d8:	strne	r0, [r2]
   1a4dc:	bx	lr
   1a4e0:	movw	r3, #42368	; 0xa580
   1a4e4:	cmp	r1, #0
   1a4e8:	movt	r3, #1
   1a4ec:	movne	r3, r1
   1a4f0:	movw	r1, #8480	; 0x2120
   1a4f4:	cmp	r0, #0
   1a4f8:	movt	r1, #4
   1a4fc:	str	r3, [r1]
   1a500:	movw	r1, #42296	; 0xa538
   1a504:	movt	r1, #1
   1a508:	movne	r1, r0
   1a50c:	movw	r0, #8476	; 0x211c
   1a510:	cmp	r2, #0
   1a514:	movt	r0, #4
   1a518:	str	r1, [r0]
   1a51c:	movw	r0, #42404	; 0xa5a4
   1a520:	movw	r1, #8484	; 0x2124
   1a524:	movt	r0, #1
   1a528:	movt	r1, #4
   1a52c:	movne	r0, r2
   1a530:	str	r0, [r1]
   1a534:	bx	lr
   1a538:	push	{fp, lr}
   1a53c:	mov	fp, sp
   1a540:	cmp	r0, #0
   1a544:	beq	1a560 <__assert_fail@plt+0x9240>
   1a548:	bl	2b190 <__assert_fail@plt+0x19e70>
   1a54c:	cmp	r0, #0
   1a550:	popne	{fp, pc}
   1a554:	movw	r0, #4314	; 0x10da
   1a558:	movt	r0, #3
   1a55c:	bl	22464 <__assert_fail@plt+0x11144>
   1a560:	movw	r0, #5097	; 0x13e9
   1a564:	movw	r1, #1588	; 0x634
   1a568:	movw	r3, #4282	; 0x10ba
   1a56c:	movw	r2, #291	; 0x123
   1a570:	movt	r0, #3
   1a574:	movt	r1, #3
   1a578:	movt	r3, #3
   1a57c:	bl	11320 <__assert_fail@plt>
   1a580:	push	{fp, lr}
   1a584:	mov	fp, sp
   1a588:	mov	r1, r2
   1a58c:	bl	2b1c0 <__assert_fail@plt+0x19ea0>
   1a590:	cmp	r0, #0
   1a594:	popne	{fp, pc}
   1a598:	movw	r0, #4359	; 0x1107
   1a59c:	movt	r0, #3
   1a5a0:	bl	22464 <__assert_fail@plt+0x11144>
   1a5a4:	b	1a3a4 <__assert_fail@plt+0x9084>
   1a5a8:	cmp	r2, #1
   1a5ac:	blt	1a620 <__assert_fail@plt+0x9300>
   1a5b0:	mov	ip, #0
   1a5b4:	cmp	r2, #4
   1a5b8:	bcc	1a604 <__assert_fail@plt+0x92e4>
   1a5bc:	add	r3, r1, r2, lsl #2
   1a5c0:	cmp	r3, r0
   1a5c4:	addhi	r3, r0, r2, lsl #2
   1a5c8:	cmphi	r3, r1
   1a5cc:	bhi	1a604 <__assert_fail@plt+0x92e4>
   1a5d0:	push	{r4, sl, fp, lr}
   1a5d4:	add	fp, sp, #8
   1a5d8:	bic	ip, r2, #3
   1a5dc:	mov	r3, r0
   1a5e0:	mov	r4, r1
   1a5e4:	mov	lr, ip
   1a5e8:	vld1.32	{d16-d17}, [r4]!
   1a5ec:	subs	lr, lr, #4
   1a5f0:	vst1.32	{d16-d17}, [r3]!
   1a5f4:	bne	1a5e8 <__assert_fail@plt+0x92c8>
   1a5f8:	cmp	ip, r2
   1a5fc:	pop	{r4, sl, fp, lr}
   1a600:	bxeq	lr
   1a604:	sub	r2, r2, ip
   1a608:	add	r0, r0, ip, lsl #2
   1a60c:	add	r1, r1, ip, lsl #2
   1a610:	ldr	r3, [r1], #4
   1a614:	subs	r2, r2, #1
   1a618:	str	r3, [r0], #4
   1a61c:	bne	1a610 <__assert_fail@plt+0x92f0>
   1a620:	bx	lr
   1a624:	push	{r4, r5, r6, sl, fp, lr}
   1a628:	add	fp, sp, #16
   1a62c:	cmp	r2, #1
   1a630:	blt	1a6d4 <__assert_fail@plt+0x93b4>
   1a634:	mvn	r3, r2
   1a638:	mvn	r5, #1
   1a63c:	mvn	r6, #1
   1a640:	cmn	r3, #2
   1a644:	movgt	r5, r3
   1a648:	add	r5, r5, r2
   1a64c:	add	ip, r5, #2
   1a650:	cmp	ip, #4
   1a654:	bcc	1a6b4 <__assert_fail@plt+0x9394>
   1a658:	cmn	r3, #2
   1a65c:	movle	r3, r6
   1a660:	sub	r3, r6, r3
   1a664:	add	r6, r1, r2, lsl #2
   1a668:	add	r5, r0, r3, lsl #2
   1a66c:	cmp	r5, r6
   1a670:	addcc	r6, r0, r2, lsl #2
   1a674:	addcc	r3, r1, r3, lsl #2
   1a678:	cmpcc	r3, r6
   1a67c:	bcc	1a6b4 <__assert_fail@plt+0x9394>
   1a680:	mvn	lr, #15
   1a684:	add	r4, lr, r2, lsl #2
   1a688:	add	r3, r1, r4
   1a68c:	add	r5, r0, r4
   1a690:	bic	r4, ip, #3
   1a694:	sub	r2, r2, r4
   1a698:	mov	r6, r4
   1a69c:	vld1.32	{d16-d17}, [r3], lr
   1a6a0:	subs	r6, r6, #4
   1a6a4:	vst1.32	{d16-d17}, [r5], lr
   1a6a8:	bne	1a69c <__assert_fail@plt+0x937c>
   1a6ac:	cmp	ip, r4
   1a6b0:	popeq	{r4, r5, r6, sl, fp, pc}
   1a6b4:	sub	r2, r2, #1
   1a6b8:	ldr	r3, [r1, r2, lsl #2]
   1a6bc:	str	r3, [r0, r2, lsl #2]
   1a6c0:	sub	r3, r2, #1
   1a6c4:	add	r2, r2, #1
   1a6c8:	cmp	r2, #1
   1a6cc:	mov	r2, r3
   1a6d0:	bgt	1a6b8 <__assert_fail@plt+0x9398>
   1a6d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a6d8:	sub	ip, r0, #4
   1a6dc:	sub	r1, r1, #4
   1a6e0:	cmp	r2, #1
   1a6e4:	movlt	r0, #0
   1a6e8:	bxlt	lr
   1a6ec:	sub	r3, r2, #1
   1a6f0:	ldr	r0, [r1, r2, lsl #2]
   1a6f4:	ldr	r2, [ip, r2, lsl #2]
   1a6f8:	cmp	r2, r0
   1a6fc:	mov	r2, r3
   1a700:	beq	1a6e0 <__assert_fail@plt+0x93c0>
   1a704:	mvn	r0, #0
   1a708:	movwhi	r0, #1
   1a70c:	bx	lr
   1a710:	sub	r0, r0, #4
   1a714:	mov	r2, r1
   1a718:	cmp	r1, #1
   1a71c:	blt	1a730 <__assert_fail@plt+0x9410>
   1a720:	ldr	r3, [r0, r2, lsl #2]
   1a724:	sub	r1, r2, #1
   1a728:	cmp	r3, #0
   1a72c:	beq	1a714 <__assert_fail@plt+0x93f4>
   1a730:	clz	r0, r2
   1a734:	lsr	r0, r0, #5
   1a738:	bx	lr
   1a73c:	cmp	r1, #1
   1a740:	bxlt	lr
   1a744:	push	{fp, lr}
   1a748:	mov	fp, sp
   1a74c:	mvn	r2, r1
   1a750:	mvn	r3, #1
   1a754:	cmn	r2, #2
   1a758:	movle	r2, r3
   1a75c:	sub	r3, r3, r2
   1a760:	add	r1, r2, r1
   1a764:	mov	r2, #8
   1a768:	add	r2, r2, r1, lsl #2
   1a76c:	add	r0, r0, r3, lsl #2
   1a770:	mov	r1, #0
   1a774:	bl	11248 <memset@plt>
   1a778:	pop	{fp, lr}
   1a77c:	bx	lr
   1a780:	push	{r4, sl, fp, lr}
   1a784:	add	fp, sp, #8
   1a788:	cmp	r2, #1
   1a78c:	blt	1a7c0 <__assert_fail@plt+0x94a0>
   1a790:	mov	ip, #0
   1a794:	mov	lr, r3
   1a798:	ldr	r3, [r1], #4
   1a79c:	adds	r4, r3, lr
   1a7a0:	adc	r3, ip, #0
   1a7a4:	str	r4, [r0], #4
   1a7a8:	subs	r2, r2, #1
   1a7ac:	bne	1a794 <__assert_fail@plt+0x9474>
   1a7b0:	mov	r0, #0
   1a7b4:	cmp	r4, lr
   1a7b8:	movwcc	r0, #1
   1a7bc:	pop	{r4, sl, fp, pc}
   1a7c0:	movw	r0, #4914	; 0x1332
   1a7c4:	movw	r1, #1588	; 0x634
   1a7c8:	movw	r3, #1605	; 0x645
   1a7cc:	movw	r2, #442	; 0x1ba
   1a7d0:	movt	r0, #3
   1a7d4:	movt	r1, #3
   1a7d8:	movt	r3, #3
   1a7dc:	bl	11320 <__assert_fail@plt>
   1a7e0:	push	{r4, r5, r6, sl, fp, lr}
   1a7e4:	add	fp, sp, #16
   1a7e8:	cmp	r3, #1
   1a7ec:	movlt	ip, #0
   1a7f0:	movlt	r0, ip
   1a7f4:	poplt	{r4, r5, r6, sl, fp, pc}
   1a7f8:	mov	lr, #0
   1a7fc:	mov	ip, #0
   1a800:	ldr	r5, [r1], #4
   1a804:	ldr	r4, [r2], #4
   1a808:	adds	r6, r5, ip
   1a80c:	adds	r4, r6, r4
   1a810:	adc	r6, lr, #0
   1a814:	adds	r5, r5, ip
   1a818:	str	r4, [r0], #4
   1a81c:	adc	ip, r6, #0
   1a820:	subs	r3, r3, #1
   1a824:	bne	1a800 <__assert_fail@plt+0x94e0>
   1a828:	mov	r0, ip
   1a82c:	pop	{r4, r5, r6, sl, fp, pc}
   1a830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a834:	add	fp, sp, #28
   1a838:	sub	sp, sp, #4
   1a83c:	ldr	lr, [fp, #8]
   1a840:	cmp	r2, lr
   1a844:	blt	1a8f4 <__assert_fail@plt+0x95d4>
   1a848:	mov	ip, r0
   1a84c:	cmp	lr, #1
   1a850:	blt	1a8a0 <__assert_fail@plt+0x9580>
   1a854:	mov	r8, #0
   1a858:	mov	r5, r1
   1a85c:	mov	r6, ip
   1a860:	mov	r7, lr
   1a864:	mov	r0, #0
   1a868:	ldr	sl, [r5], #4
   1a86c:	ldr	r9, [r3], #4
   1a870:	adds	r4, sl, r0
   1a874:	adds	r9, r4, r9
   1a878:	adc	r4, r8, #0
   1a87c:	adds	r0, sl, r0
   1a880:	str	r9, [r6], #4
   1a884:	adc	r0, r4, #0
   1a888:	subs	r7, r7, #1
   1a88c:	bne	1a868 <__assert_fail@plt+0x9548>
   1a890:	cmp	r2, lr
   1a894:	bgt	1a8ac <__assert_fail@plt+0x958c>
   1a898:	sub	sp, fp, #28
   1a89c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8a0:	mov	r0, #0
   1a8a4:	cmp	r2, lr
   1a8a8:	ble	1a898 <__assert_fail@plt+0x9578>
   1a8ac:	sub	r2, r2, lr
   1a8b0:	cmp	r2, #1
   1a8b4:	blt	1a914 <__assert_fail@plt+0x95f4>
   1a8b8:	add	r1, r1, lr, lsl #2
   1a8bc:	add	r3, ip, lr, lsl #2
   1a8c0:	mov	r7, #0
   1a8c4:	mov	r6, r0
   1a8c8:	ldr	r0, [r1], #4
   1a8cc:	adds	r5, r0, r6
   1a8d0:	adc	r0, r7, #0
   1a8d4:	str	r5, [r3], #4
   1a8d8:	subs	r2, r2, #1
   1a8dc:	bne	1a8c4 <__assert_fail@plt+0x95a4>
   1a8e0:	mov	r0, #0
   1a8e4:	cmp	r5, r6
   1a8e8:	movwcc	r0, #1
   1a8ec:	sub	sp, fp, #28
   1a8f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8f4:	movw	r0, #1666	; 0x682
   1a8f8:	movw	r1, #1588	; 0x634
   1a8fc:	movw	r3, #1675	; 0x68b
   1a900:	mov	r2, #480	; 0x1e0
   1a904:	movt	r0, #3
   1a908:	movt	r1, #3
   1a90c:	movt	r3, #3
   1a910:	bl	11320 <__assert_fail@plt>
   1a914:	movw	r0, #4914	; 0x1332
   1a918:	movw	r1, #1588	; 0x634
   1a91c:	movw	r3, #1605	; 0x645
   1a920:	movw	r2, #442	; 0x1ba
   1a924:	movt	r0, #3
   1a928:	movt	r1, #3
   1a92c:	movt	r3, #3
   1a930:	bl	11320 <__assert_fail@plt>
   1a934:	push	{r4, sl, fp, lr}
   1a938:	add	fp, sp, #8
   1a93c:	cmp	r2, #1
   1a940:	blt	1a978 <__assert_fail@plt+0x9658>
   1a944:	ldr	lr, [r1], #4
   1a948:	mov	ip, r3
   1a94c:	cmp	lr, r3
   1a950:	mov	r3, #0
   1a954:	sub	r4, lr, ip
   1a958:	movwcc	r3, #1
   1a95c:	str	r4, [r0], #4
   1a960:	subs	r2, r2, #1
   1a964:	bne	1a944 <__assert_fail@plt+0x9624>
   1a968:	mov	r0, #0
   1a96c:	cmp	lr, ip
   1a970:	movwcc	r0, #1
   1a974:	pop	{r4, sl, fp, pc}
   1a978:	movw	r0, #4914	; 0x1332
   1a97c:	movw	r1, #1588	; 0x634
   1a980:	movw	r3, #1745	; 0x6d1
   1a984:	movw	r2, #493	; 0x1ed
   1a988:	movt	r0, #3
   1a98c:	movt	r1, #3
   1a990:	movt	r3, #3
   1a994:	bl	11320 <__assert_fail@plt>
   1a998:	push	{r4, r5, fp, lr}
   1a99c:	add	fp, sp, #8
   1a9a0:	mov	ip, #0
   1a9a4:	cmp	r3, #1
   1a9a8:	blt	1a9dc <__assert_fail@plt+0x96bc>
   1a9ac:	ldr	r4, [r2], #4
   1a9b0:	ldr	lr, [r1], #4
   1a9b4:	adds	r5, r4, ip
   1a9b8:	cmp	lr, r5
   1a9bc:	mov	r5, #0
   1a9c0:	movwcc	r5, #1
   1a9c4:	adds	r4, r4, ip
   1a9c8:	adc	ip, r5, #0
   1a9cc:	sub	r5, lr, r4
   1a9d0:	subs	r3, r3, #1
   1a9d4:	str	r5, [r0], #4
   1a9d8:	bne	1a9ac <__assert_fail@plt+0x968c>
   1a9dc:	mov	r0, ip
   1a9e0:	pop	{r4, r5, fp, pc}
   1a9e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a9e8:	add	fp, sp, #24
   1a9ec:	ldr	lr, [fp, #8]
   1a9f0:	cmp	r2, lr
   1a9f4:	blt	1aa94 <__assert_fail@plt+0x9774>
   1a9f8:	mov	ip, r0
   1a9fc:	mov	r0, #0
   1aa00:	cmp	lr, #1
   1aa04:	blt	1aa44 <__assert_fail@plt+0x9724>
   1aa08:	mov	r4, r1
   1aa0c:	mov	r5, ip
   1aa10:	mov	r6, lr
   1aa14:	ldr	r9, [r3], #4
   1aa18:	ldr	r8, [r4], #4
   1aa1c:	adds	r7, r9, r0
   1aa20:	cmp	r8, r7
   1aa24:	mov	r7, #0
   1aa28:	movwcc	r7, #1
   1aa2c:	adds	r9, r9, r0
   1aa30:	adc	r0, r7, #0
   1aa34:	sub	r7, r8, r9
   1aa38:	subs	r6, r6, #1
   1aa3c:	str	r7, [r5], #4
   1aa40:	bne	1aa14 <__assert_fail@plt+0x96f4>
   1aa44:	cmp	r2, lr
   1aa48:	pople	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aa4c:	sub	r2, r2, lr
   1aa50:	cmp	r2, #1
   1aa54:	blt	1aab4 <__assert_fail@plt+0x9794>
   1aa58:	add	r1, r1, lr, lsl #2
   1aa5c:	add	r3, ip, lr, lsl #2
   1aa60:	ldr	r5, [r1], #4
   1aa64:	mov	r6, r0
   1aa68:	cmp	r5, r0
   1aa6c:	mov	r0, #0
   1aa70:	sub	r7, r5, r6
   1aa74:	movwcc	r0, #1
   1aa78:	str	r7, [r3], #4
   1aa7c:	subs	r2, r2, #1
   1aa80:	bne	1aa60 <__assert_fail@plt+0x9740>
   1aa84:	mov	r0, #0
   1aa88:	cmp	r5, r6
   1aa8c:	movwcc	r0, #1
   1aa90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aa94:	movw	r0, #1666	; 0x682
   1aa98:	movw	r1, #1588	; 0x634
   1aa9c:	movw	r3, #1806	; 0x70e
   1aaa0:	mov	r2, #532	; 0x214
   1aaa4:	movt	r0, #3
   1aaa8:	movt	r1, #3
   1aaac:	movt	r3, #3
   1aab0:	bl	11320 <__assert_fail@plt>
   1aab4:	movw	r0, #4914	; 0x1332
   1aab8:	movw	r1, #1588	; 0x634
   1aabc:	movw	r3, #1745	; 0x6d1
   1aac0:	movw	r2, #493	; 0x1ed
   1aac4:	movt	r0, #3
   1aac8:	movt	r1, #3
   1aacc:	movt	r3, #3
   1aad0:	bl	11320 <__assert_fail@plt>
   1aad4:	push	{r4, r5, r6, r7, fp, lr}
   1aad8:	add	fp, sp, #16
   1aadc:	cmp	r2, #1
   1aae0:	blt	1ab3c <__assert_fail@plt+0x981c>
   1aae4:	lsr	ip, r3, #16
   1aae8:	uxth	lr, r3
   1aaec:	mov	r3, #0
   1aaf0:	ldr	r4, [r1], #4
   1aaf4:	uxth	r5, r4
   1aaf8:	lsr	r4, r4, #16
   1aafc:	mul	r6, r5, ip
   1ab00:	mul	r5, r5, lr
   1ab04:	mul	r7, r4, lr
   1ab08:	mla	r6, r4, lr, r6
   1ab0c:	mul	r4, r4, ip
   1ab10:	add	r6, r6, r5, lsr #16
   1ab14:	cmp	r6, r7
   1ab18:	pkhbt	r5, r5, r6, lsl #16
   1ab1c:	addcc	r4, r4, #65536	; 0x10000
   1ab20:	adds	r5, r5, r3
   1ab24:	adc	r3, r4, r6, lsr #16
   1ab28:	str	r5, [r0], #4
   1ab2c:	subs	r2, r2, #1
   1ab30:	bne	1aaf0 <__assert_fail@plt+0x97d0>
   1ab34:	mov	r0, r3
   1ab38:	pop	{r4, r5, r6, r7, fp, pc}
   1ab3c:	movw	r0, #2145	; 0x861
   1ab40:	movw	r1, #1588	; 0x634
   1ab44:	movw	r3, #1876	; 0x754
   1ab48:	movw	r2, #545	; 0x221
   1ab4c:	movt	r0, #3
   1ab50:	movt	r1, #3
   1ab54:	movt	r3, #3
   1ab58:	bl	11320 <__assert_fail@plt>
   1ab5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ab60:	add	fp, sp, #24
   1ab64:	cmp	r2, #1
   1ab68:	blt	1abd8 <__assert_fail@plt+0x98b8>
   1ab6c:	lsr	ip, r3, #16
   1ab70:	uxth	lr, r3
   1ab74:	mov	r8, #0
   1ab78:	mov	r3, #0
   1ab7c:	ldr	r5, [r1], #4
   1ab80:	uxth	r6, r5
   1ab84:	lsr	r5, r5, #16
   1ab88:	mul	r7, r6, ip
   1ab8c:	mul	r6, r6, lr
   1ab90:	mul	r4, r5, lr
   1ab94:	mla	r7, r5, lr, r7
   1ab98:	mul	r5, r5, ip
   1ab9c:	add	r7, r7, r6, lsr #16
   1aba0:	cmp	r7, r4
   1aba4:	addcc	r5, r5, #65536	; 0x10000
   1aba8:	add	r4, r5, r7, lsr #16
   1abac:	pkhbt	r5, r6, r7, lsl #16
   1abb0:	ldr	r6, [r0]
   1abb4:	adds	r3, r5, r3
   1abb8:	adc	r5, r8, #0
   1abbc:	adds	r6, r3, r6
   1abc0:	adc	r3, r4, r5
   1abc4:	str	r6, [r0], #4
   1abc8:	subs	r2, r2, #1
   1abcc:	bne	1ab7c <__assert_fail@plt+0x985c>
   1abd0:	mov	r0, r3
   1abd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abd8:	movw	r0, #2145	; 0x861
   1abdc:	movw	r1, #1588	; 0x634
   1abe0:	movw	r3, #1937	; 0x791
   1abe4:	mov	r2, #568	; 0x238
   1abe8:	movt	r0, #3
   1abec:	movt	r1, #3
   1abf0:	movt	r3, #3
   1abf4:	bl	11320 <__assert_fail@plt>
   1abf8:	push	{r4, r5, r6, r7, fp, lr}
   1abfc:	add	fp, sp, #16
   1ac00:	cmp	r2, #1
   1ac04:	blt	1ac78 <__assert_fail@plt+0x9958>
   1ac08:	lsr	ip, r3, #16
   1ac0c:	uxth	lr, r3
   1ac10:	mov	r3, #0
   1ac14:	ldr	r4, [r1], #4
   1ac18:	uxth	r5, r4
   1ac1c:	lsr	r4, r4, #16
   1ac20:	mul	r6, r5, ip
   1ac24:	mul	r5, r5, lr
   1ac28:	mul	r7, r4, lr
   1ac2c:	mla	r6, r4, lr, r6
   1ac30:	mul	r4, r4, ip
   1ac34:	add	r6, r6, r5, lsr #16
   1ac38:	cmp	r6, r7
   1ac3c:	pkhbt	r5, r5, r6, lsl #16
   1ac40:	addcc	r4, r4, #65536	; 0x10000
   1ac44:	adds	r5, r5, r3
   1ac48:	add	r3, r4, r6, lsr #16
   1ac4c:	adc	r7, r4, r6, lsr #16
   1ac50:	ldr	r4, [r0]
   1ac54:	adc	r3, r3, #1
   1ac58:	cmp	r4, r5
   1ac5c:	sub	r4, r4, r5
   1ac60:	movcs	r3, r7
   1ac64:	str	r4, [r0], #4
   1ac68:	subs	r2, r2, #1
   1ac6c:	bne	1ac14 <__assert_fail@plt+0x98f4>
   1ac70:	mov	r0, r3
   1ac74:	pop	{r4, r5, r6, r7, fp, pc}
   1ac78:	movw	r0, #2145	; 0x861
   1ac7c:	movw	r1, #1588	; 0x634
   1ac80:	movw	r3, #2001	; 0x7d1
   1ac84:	movw	r2, #594	; 0x252
   1ac88:	movt	r0, #3
   1ac8c:	movt	r1, #3
   1ac90:	movt	r3, #3
   1ac94:	bl	11320 <__assert_fail@plt>
   1ac98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac9c:	add	fp, sp, #28
   1aca0:	sub	sp, sp, #12
   1aca4:	ldr	lr, [fp, #8]
   1aca8:	cmp	r2, lr
   1acac:	blt	1ae04 <__assert_fail@plt+0x9ae4>
   1acb0:	cmp	lr, #0
   1acb4:	ble	1ae24 <__assert_fail@plt+0x9b04>
   1acb8:	add	r7, lr, r2
   1acbc:	add	r6, r1, r2, lsl #2
   1acc0:	add	r7, r0, r7, lsl #2
   1acc4:	cmp	r6, r0
   1acc8:	cmphi	r7, r1
   1accc:	bhi	1ae44 <__assert_fail@plt+0x9b24>
   1acd0:	add	r6, r3, lr, lsl #2
   1acd4:	cmp	r6, r0
   1acd8:	cmphi	r7, r3
   1acdc:	bhi	1ae64 <__assert_fail@plt+0x9b44>
   1ace0:	cmp	r2, #1
   1ace4:	blt	1ae84 <__assert_fail@plt+0x9b64>
   1ace8:	ldr	r7, [r3]
   1acec:	mov	r6, #0
   1acf0:	mov	ip, #0
   1acf4:	lsr	r8, r7, #16
   1acf8:	uxth	r9, r7
   1acfc:	ldr	r7, [r1, r6, lsl #2]
   1ad00:	uxth	r4, r7
   1ad04:	lsr	r7, r7, #16
   1ad08:	mul	r5, r4, r8
   1ad0c:	mul	r4, r4, r9
   1ad10:	mul	sl, r7, r9
   1ad14:	mla	r5, r7, r9, r5
   1ad18:	mul	r7, r7, r8
   1ad1c:	add	r5, r5, r4, lsr #16
   1ad20:	cmp	r5, sl
   1ad24:	pkhbt	r4, r4, r5, lsl #16
   1ad28:	addcc	r7, r7, #65536	; 0x10000
   1ad2c:	adds	r4, r4, ip
   1ad30:	str	r4, [r0, r6, lsl #2]
   1ad34:	add	r6, r6, #1
   1ad38:	adc	ip, r7, r5, lsr #16
   1ad3c:	cmp	r2, r6
   1ad40:	bne	1acfc <__assert_fail@plt+0x99dc>
   1ad44:	cmp	lr, #2
   1ad48:	str	ip, [r0, r2, lsl #2]
   1ad4c:	blt	1adf8 <__assert_fail@plt+0x9ad8>
   1ad50:	mov	r9, #0
   1ad54:	add	r7, r0, #4
   1ad58:	mov	r5, #0
   1ad5c:	mov	ip, #0
   1ad60:	str	lr, [sp, #4]
   1ad64:	str	r7, [sp]
   1ad68:	ldr	r7, [r3, #4]!
   1ad6c:	lsr	sl, r7, #16
   1ad70:	uxth	r8, r7
   1ad74:	str	r3, [sp, #8]
   1ad78:	ldr	r4, [r1, r5, lsl #2]
   1ad7c:	uxth	r6, r4
   1ad80:	lsr	r4, r4, #16
   1ad84:	mul	lr, r6, sl
   1ad88:	mul	r6, r6, r8
   1ad8c:	mul	r7, r4, r8
   1ad90:	mla	r3, r4, r8, lr
   1ad94:	mul	r4, r4, sl
   1ad98:	add	r3, r3, r6, lsr #16
   1ad9c:	pkhbt	r6, r6, r3, lsl #16
   1ada0:	adds	lr, r6, ip
   1ada4:	adc	ip, r9, #0
   1ada8:	cmp	r3, r7
   1adac:	add	r7, r0, r5, lsl #2
   1adb0:	add	r5, r5, #1
   1adb4:	ldr	r6, [r7, #4]
   1adb8:	addcc	r4, r4, #65536	; 0x10000
   1adbc:	add	r3, r4, r3, lsr #16
   1adc0:	adds	r6, lr, r6
   1adc4:	adc	ip, r3, ip
   1adc8:	cmp	r2, r5
   1adcc:	str	r6, [r7, #4]
   1add0:	bne	1ad78 <__assert_fail@plt+0x9a58>
   1add4:	ldr	r3, [sp, #4]
   1add8:	ldr	r4, [sp]
   1addc:	sub	r0, r3, #1
   1ade0:	cmp	r3, #2
   1ade4:	ldr	r3, [sp, #8]
   1ade8:	str	ip, [r4, r2, lsl #2]
   1adec:	mov	lr, r0
   1adf0:	mov	r0, r4
   1adf4:	bgt	1ad54 <__assert_fail@plt+0x9a34>
   1adf8:	mov	r0, ip
   1adfc:	sub	sp, fp, #28
   1ae00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae04:	movw	r0, #2065	; 0x811
   1ae08:	movw	r1, #1588	; 0x634
   1ae0c:	movw	r3, #2074	; 0x81a
   1ae10:	movw	r2, #618	; 0x26a
   1ae14:	movt	r0, #3
   1ae18:	movt	r1, #3
   1ae1c:	movt	r3, #3
   1ae20:	bl	11320 <__assert_fail@plt>
   1ae24:	movw	r0, #2144	; 0x860
   1ae28:	movw	r1, #1588	; 0x634
   1ae2c:	movw	r3, #2074	; 0x81a
   1ae30:	movw	r2, #619	; 0x26b
   1ae34:	movt	r0, #3
   1ae38:	movt	r1, #3
   1ae3c:	movt	r3, #3
   1ae40:	bl	11320 <__assert_fail@plt>
   1ae44:	movw	r0, #2152	; 0x868
   1ae48:	movw	r1, #1588	; 0x634
   1ae4c:	movw	r3, #2074	; 0x81a
   1ae50:	mov	r2, #620	; 0x26c
   1ae54:	movt	r0, #3
   1ae58:	movt	r1, #3
   1ae5c:	movt	r3, #3
   1ae60:	bl	11320 <__assert_fail@plt>
   1ae64:	movw	r0, #2192	; 0x890
   1ae68:	movw	r1, #1588	; 0x634
   1ae6c:	movw	r3, #2074	; 0x81a
   1ae70:	movw	r2, #621	; 0x26d
   1ae74:	movt	r0, #3
   1ae78:	movt	r1, #3
   1ae7c:	movt	r3, #3
   1ae80:	bl	11320 <__assert_fail@plt>
   1ae84:	movw	r0, #2145	; 0x861
   1ae88:	movw	r1, #1588	; 0x634
   1ae8c:	movw	r3, #1876	; 0x754
   1ae90:	movw	r2, #545	; 0x221
   1ae94:	movt	r0, #3
   1ae98:	movt	r1, #3
   1ae9c:	movt	r3, #3
   1aea0:	bl	11320 <__assert_fail@plt>
   1aea4:	push	{fp, lr}
   1aea8:	mov	fp, sp
   1aeac:	sub	sp, sp, #8
   1aeb0:	mov	ip, r2
   1aeb4:	str	r3, [sp]
   1aeb8:	mov	r2, r3
   1aebc:	mov	r3, ip
   1aec0:	bl	1ac98 <__assert_fail@plt+0x9978>
   1aec4:	mov	sp, fp
   1aec8:	pop	{fp, pc}
   1aecc:	push	{fp, lr}
   1aed0:	mov	fp, sp
   1aed4:	sub	sp, sp, #8
   1aed8:	mov	r3, r1
   1aedc:	str	r2, [sp]
   1aee0:	bl	1ac98 <__assert_fail@plt+0x9978>
   1aee4:	mov	sp, fp
   1aee8:	pop	{fp, pc}
   1aeec:	push	{r4, r5, r6, r7, fp, lr}
   1aef0:	add	fp, sp, #16
   1aef4:	cmp	r2, #0
   1aef8:	ble	1af58 <__assert_fail@plt+0x9c38>
   1aefc:	cmp	r3, #0
   1af00:	beq	1af78 <__assert_fail@plt+0x9c58>
   1af04:	cmp	r3, #32
   1af08:	bcs	1af98 <__assert_fail@plt+0x9c78>
   1af0c:	add	r5, r1, r2, lsl #2
   1af10:	rsb	r7, r3, #32
   1af14:	cmp	r2, #1
   1af18:	ldr	r5, [r5, #-4]
   1af1c:	lsl	lr, r5, r3
   1af20:	lsr	ip, r5, r7
   1af24:	beq	1af4c <__assert_fail@plt+0x9c2c>
   1af28:	sub	r1, r1, #8
   1af2c:	sub	r5, r0, #4
   1af30:	ldr	r6, [r1, r2, lsl #2]
   1af34:	orr	r4, lr, r6, lsr r7
   1af38:	lsl	lr, r6, r3
   1af3c:	str	r4, [r5, r2, lsl #2]
   1af40:	sub	r2, r2, #1
   1af44:	cmp	r2, #1
   1af48:	bne	1af30 <__assert_fail@plt+0x9c10>
   1af4c:	str	lr, [r0]
   1af50:	mov	r0, ip
   1af54:	pop	{r4, r5, r6, r7, fp, pc}
   1af58:	movw	r0, #2145	; 0x861
   1af5c:	movw	r1, #1588	; 0x634
   1af60:	movw	r3, #2232	; 0x8b8
   1af64:	movw	r2, #659	; 0x293
   1af68:	movt	r0, #3
   1af6c:	movt	r1, #3
   1af70:	movt	r3, #3
   1af74:	bl	11320 <__assert_fail@plt>
   1af78:	movw	r0, #2297	; 0x8f9
   1af7c:	movw	r1, #1588	; 0x634
   1af80:	movw	r3, #2232	; 0x8b8
   1af84:	mov	r2, #660	; 0x294
   1af88:	movt	r0, #3
   1af8c:	movt	r1, #3
   1af90:	movt	r3, #3
   1af94:	bl	11320 <__assert_fail@plt>
   1af98:	movw	r0, #2306	; 0x902
   1af9c:	movw	r1, #1588	; 0x634
   1afa0:	movw	r3, #2232	; 0x8b8
   1afa4:	movw	r2, #661	; 0x295
   1afa8:	movt	r0, #3
   1afac:	movt	r1, #3
   1afb0:	movt	r3, #3
   1afb4:	bl	11320 <__assert_fail@plt>
   1afb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1afbc:	add	fp, sp, #24
   1afc0:	cmp	r2, #0
   1afc4:	ble	1b024 <__assert_fail@plt+0x9d04>
   1afc8:	cmp	r3, #0
   1afcc:	beq	1b044 <__assert_fail@plt+0x9d24>
   1afd0:	cmp	r3, #32
   1afd4:	bcs	1b064 <__assert_fail@plt+0x9d44>
   1afd8:	ldr	r6, [r1]
   1afdc:	rsb	r4, r3, #32
   1afe0:	subs	r8, r2, #1
   1afe4:	lsr	lr, r6, r3
   1afe8:	lsl	ip, r6, r4
   1afec:	beq	1b018 <__assert_fail@plt+0x9cf8>
   1aff0:	add	r1, r1, #4
   1aff4:	rsb	r2, r2, #1
   1aff8:	mov	r6, r0
   1affc:	ldr	r7, [r1], #4
   1b000:	adds	r2, r2, #1
   1b004:	orr	r5, lr, r7, lsl r4
   1b008:	lsr	lr, r7, r3
   1b00c:	str	r5, [r6], #4
   1b010:	bne	1affc <__assert_fail@plt+0x9cdc>
   1b014:	add	r0, r0, r8, lsl #2
   1b018:	str	lr, [r0]
   1b01c:	mov	r0, ip
   1b020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b024:	movw	r0, #2145	; 0x861
   1b028:	movw	r1, #1588	; 0x634
   1b02c:	movw	r3, #2326	; 0x916
   1b030:	movw	r2, #689	; 0x2b1
   1b034:	movt	r0, #3
   1b038:	movt	r1, #3
   1b03c:	movt	r3, #3
   1b040:	bl	11320 <__assert_fail@plt>
   1b044:	movw	r0, #2297	; 0x8f9
   1b048:	movw	r1, #1588	; 0x634
   1b04c:	movw	r3, #2326	; 0x916
   1b050:	movw	r2, #690	; 0x2b2
   1b054:	movt	r0, #3
   1b058:	movt	r1, #3
   1b05c:	movt	r3, #3
   1b060:	bl	11320 <__assert_fail@plt>
   1b064:	movw	r0, #2306	; 0x902
   1b068:	movw	r1, #1588	; 0x634
   1b06c:	movw	r3, #2326	; 0x916
   1b070:	movw	r2, #691	; 0x2b3
   1b074:	movt	r0, #3
   1b078:	movt	r1, #3
   1b07c:	movt	r3, #3
   1b080:	bl	11320 <__assert_fail@plt>
   1b084:	lsr	ip, r1, #5
   1b088:	and	r1, r1, #31
   1b08c:	mvn	r2, #0
   1b090:	ldr	r3, [r0, ip, lsl #2]
   1b094:	and	r1, r3, r2, lsl r1
   1b098:	cmp	r1, #0
   1b09c:	bne	1b0cc <__assert_fail@plt+0x9dac>
   1b0a0:	add	r0, r0, ip, lsl #2
   1b0a4:	add	r3, r0, #4
   1b0a8:	mov	r0, #0
   1b0ac:	cmp	r0, #1
   1b0b0:	mvneq	r0, #0
   1b0b4:	bxeq	lr
   1b0b8:	ldr	r1, [r3, -r0, lsl #2]
   1b0bc:	sub	r0, r0, #1
   1b0c0:	cmp	r1, #0
   1b0c4:	beq	1b0ac <__assert_fail@plt+0x9d8c>
   1b0c8:	sub	ip, ip, r0
   1b0cc:	rsb	r0, r1, #0
   1b0d0:	and	r1, r1, r0
   1b0d4:	mov	r0, #0
   1b0d8:	cmp	r0, r1, lsr #24
   1b0dc:	bne	1b0f4 <__assert_fail@plt+0x9dd4>
   1b0e0:	mov	r0, #0
   1b0e4:	lsl	r1, r1, #8
   1b0e8:	add	r0, r0, #8
   1b0ec:	cmp	r1, #16777216	; 0x1000000
   1b0f0:	bcc	1b0e4 <__assert_fail@plt+0x9dc4>
   1b0f4:	cmp	r1, #0
   1b0f8:	blt	1b10c <__assert_fail@plt+0x9dec>
   1b0fc:	lsl	r1, r1, #1
   1b100:	add	r0, r0, #1
   1b104:	cmn	r1, #1
   1b108:	bgt	1b0fc <__assert_fail@plt+0x9ddc>
   1b10c:	mov	r1, #31
   1b110:	orr	r1, r1, ip, lsl #5
   1b114:	sub	r0, r1, r0
   1b118:	bx	lr
   1b11c:	push	{r4, sl, fp, lr}
   1b120:	add	fp, sp, #8
   1b124:	ldr	lr, [fp, #8]
   1b128:	add	r4, lr, #1
   1b12c:	cmp	r4, #2
   1b130:	bcs	1b1f8 <__assert_fail@plt+0x9ed8>
   1b134:	cmp	r1, #0
   1b138:	blt	1b1d8 <__assert_fail@plt+0x9eb8>
   1b13c:	cmp	r1, r3
   1b140:	bgt	1b1d8 <__assert_fail@plt+0x9eb8>
   1b144:	cmp	r0, #0
   1b148:	beq	1b154 <__assert_fail@plt+0x9e34>
   1b14c:	mov	ip, r1
   1b150:	b	1b178 <__assert_fail@plt+0x9e58>
   1b154:	sub	r4, r3, #1
   1b158:	cmp	r4, r1
   1b15c:	beq	1b1c8 <__assert_fail@plt+0x9ea8>
   1b160:	add	r0, r2, r1, lsl #2
   1b164:	add	ip, r1, #1
   1b168:	ldr	r0, [r0, #4]
   1b16c:	mov	r1, ip
   1b170:	eors	r0, r0, lr
   1b174:	beq	1b158 <__assert_fail@plt+0x9e38>
   1b178:	rsb	r1, r0, #0
   1b17c:	and	r1, r0, r1
   1b180:	mov	r0, #0
   1b184:	cmp	r0, r1, lsr #24
   1b188:	bne	1b1a0 <__assert_fail@plt+0x9e80>
   1b18c:	mov	r0, #0
   1b190:	lsl	r1, r1, #8
   1b194:	add	r0, r0, #8
   1b198:	cmp	r1, #16777216	; 0x1000000
   1b19c:	bcc	1b190 <__assert_fail@plt+0x9e70>
   1b1a0:	cmp	r1, #0
   1b1a4:	blt	1b1b8 <__assert_fail@plt+0x9e98>
   1b1a8:	lsl	r1, r1, #1
   1b1ac:	add	r0, r0, #1
   1b1b0:	cmn	r1, #1
   1b1b4:	bgt	1b1a8 <__assert_fail@plt+0x9e88>
   1b1b8:	mov	r1, #31
   1b1bc:	orr	r1, r1, ip, lsl #5
   1b1c0:	sub	r0, r1, r0
   1b1c4:	pop	{r4, sl, fp, pc}
   1b1c8:	lsl	r0, r3, #5
   1b1cc:	cmp	lr, #0
   1b1d0:	mvneq	r0, #0
   1b1d4:	pop	{r4, sl, fp, pc}
   1b1d8:	movw	r0, #4519	; 0x11a7
   1b1dc:	movw	r1, #1588	; 0x634
   1b1e0:	movw	r3, #4436	; 0x1154
   1b1e4:	mov	r2, #716	; 0x2cc
   1b1e8:	movt	r0, #3
   1b1ec:	movt	r1, #3
   1b1f0:	movt	r3, #3
   1b1f4:	bl	11320 <__assert_fail@plt>
   1b1f8:	movw	r0, #4406	; 0x1136
   1b1fc:	movw	r1, #1588	; 0x634
   1b200:	movw	r3, #4436	; 0x1154
   1b204:	movw	r2, #715	; 0x2cb
   1b208:	movt	r0, #3
   1b20c:	movt	r1, #3
   1b210:	movt	r3, #3
   1b214:	bl	11320 <__assert_fail@plt>
   1b218:	push	{fp, lr}
   1b21c:	mov	fp, sp
   1b220:	lsr	ip, r1, #5
   1b224:	and	r3, r1, #31
   1b228:	ldr	r2, [r0, ip, lsl #2]
   1b22c:	mvn	lr, r2
   1b230:	mvn	r2, #0
   1b234:	and	r3, lr, r2, lsl r3
   1b238:	cmp	r3, #0
   1b23c:	bne	1b270 <__assert_fail@plt+0x9f50>
   1b240:	add	r0, r0, ip, lsl #2
   1b244:	add	r3, r0, #4
   1b248:	mov	r0, #0
   1b24c:	cmp	r0, #1
   1b250:	biceq	r0, r1, #31
   1b254:	popeq	{fp, pc}
   1b258:	ldr	r2, [r3, -r0, lsl #2]
   1b25c:	sub	r0, r0, #1
   1b260:	cmn	r2, #1
   1b264:	beq	1b24c <__assert_fail@plt+0x9f2c>
   1b268:	sub	ip, ip, r0
   1b26c:	mvn	r3, r2
   1b270:	rsb	r0, r3, #0
   1b274:	and	r1, r3, r0
   1b278:	mov	r0, #0
   1b27c:	cmp	r0, r1, lsr #24
   1b280:	bne	1b298 <__assert_fail@plt+0x9f78>
   1b284:	mov	r0, #0
   1b288:	lsl	r1, r1, #8
   1b28c:	add	r0, r0, #8
   1b290:	cmp	r1, #16777216	; 0x1000000
   1b294:	bcc	1b288 <__assert_fail@plt+0x9f68>
   1b298:	cmp	r1, #0
   1b29c:	blt	1b2b0 <__assert_fail@plt+0x9f90>
   1b2a0:	lsl	r1, r1, #1
   1b2a4:	add	r0, r0, #1
   1b2a8:	cmn	r1, #1
   1b2ac:	bgt	1b2a0 <__assert_fail@plt+0x9f80>
   1b2b0:	mov	r1, #31
   1b2b4:	orr	r1, r1, ip, lsl #5
   1b2b8:	sub	r0, r1, r0
   1b2bc:	pop	{fp, pc}
   1b2c0:	push	{r4, r5, fp, lr}
   1b2c4:	add	fp, sp, #8
   1b2c8:	cmp	r2, #1
   1b2cc:	blt	1b370 <__assert_fail@plt+0xa050>
   1b2d0:	mvn	r3, r2
   1b2d4:	mvn	r4, #1
   1b2d8:	mvn	r5, #1
   1b2dc:	cmn	r3, #2
   1b2e0:	movgt	r4, r3
   1b2e4:	add	r4, r4, r2
   1b2e8:	add	lr, r4, #2
   1b2ec:	cmp	lr, #4
   1b2f0:	bcc	1b34c <__assert_fail@plt+0xa02c>
   1b2f4:	cmn	r3, #2
   1b2f8:	movgt	r5, r3
   1b2fc:	add	r3, r5, r2
   1b300:	add	r3, r3, #2
   1b304:	add	r5, r1, r3, lsl #2
   1b308:	cmp	r5, r0
   1b30c:	addhi	r3, r0, r3, lsl #2
   1b310:	cmphi	r3, r1
   1b314:	bhi	1b34c <__assert_fail@plt+0xa02c>
   1b318:	bic	r4, lr, #3
   1b31c:	add	r3, r0, r4, lsl #2
   1b320:	add	ip, r1, r4, lsl #2
   1b324:	sub	r2, r2, r4
   1b328:	mov	r5, r4
   1b32c:	vld1.32	{d16-d17}, [r1]!
   1b330:	subs	r5, r5, #4
   1b334:	vmvn	q8, q8
   1b338:	vst1.32	{d16-d17}, [r0]!
   1b33c:	bne	1b32c <__assert_fail@plt+0xa00c>
   1b340:	cmp	lr, r4
   1b344:	popeq	{r4, r5, fp, pc}
   1b348:	b	1b354 <__assert_fail@plt+0xa034>
   1b34c:	mov	ip, r1
   1b350:	mov	r3, r0
   1b354:	add	r0, r2, #1
   1b358:	ldr	r1, [ip], #4
   1b35c:	sub	r0, r0, #1
   1b360:	cmp	r0, #1
   1b364:	mvn	r1, r1
   1b368:	str	r1, [r3], #4
   1b36c:	bgt	1b358 <__assert_fail@plt+0xa038>
   1b370:	pop	{r4, r5, fp, pc}
   1b374:	push	{r4, r5, r6, sl, fp, lr}
   1b378:	add	fp, sp, #16
   1b37c:	ldr	r3, [r1]
   1b380:	mov	lr, r0
   1b384:	cmp	r3, #0
   1b388:	bne	1b3cc <__assert_fail@plt+0xa0ac>
   1b38c:	mov	r0, #0
   1b390:	mov	r5, #0
   1b394:	mov	r4, #0
   1b398:	add	r3, r2, r4
   1b39c:	str	r0, [lr, -r4, lsl #2]
   1b3a0:	cmp	r3, #1
   1b3a4:	beq	1b484 <__assert_fail@plt+0xa164>
   1b3a8:	sub	r3, r1, r4, lsl #2
   1b3ac:	sub	r5, r5, #4
   1b3b0:	sub	r4, r4, #1
   1b3b4:	ldr	r3, [r3, #4]
   1b3b8:	cmp	r3, #0
   1b3bc:	beq	1b398 <__assert_fail@plt+0xa078>
   1b3c0:	sub	lr, lr, r5
   1b3c4:	sub	r1, r1, r5
   1b3c8:	add	r2, r2, r4
   1b3cc:	rsb	r0, r3, #0
   1b3d0:	cmp	r2, #2
   1b3d4:	str	r0, [lr]
   1b3d8:	mov	r0, #1
   1b3dc:	blt	1b484 <__assert_fail@plt+0xa164>
   1b3e0:	mvn	r3, r2
   1b3e4:	mvn	r6, #2
   1b3e8:	mvn	r4, #2
   1b3ec:	cmn	r3, #3
   1b3f0:	movgt	r6, r3
   1b3f4:	add	r6, r2, r6
   1b3f8:	add	ip, r6, #2
   1b3fc:	cmp	ip, #4
   1b400:	bcc	1b460 <__assert_fail@plt+0xa140>
   1b404:	cmn	r3, #3
   1b408:	movgt	r4, r3
   1b40c:	add	r3, r2, r4
   1b410:	add	r4, lr, #4
   1b414:	add	r5, r3, #3
   1b418:	add	r3, r1, #4
   1b41c:	add	r6, r1, r5, lsl #2
   1b420:	cmp	r4, r6
   1b424:	addcc	r5, lr, r5, lsl #2
   1b428:	cmpcc	r3, r5
   1b42c:	bcc	1b460 <__assert_fail@plt+0xa140>
   1b430:	bic	r5, ip, #3
   1b434:	add	lr, lr, r5, lsl #2
   1b438:	add	r1, r1, r5, lsl #2
   1b43c:	sub	r2, r2, r5
   1b440:	mov	r6, r5
   1b444:	vld1.32	{d16-d17}, [r3]!
   1b448:	subs	r6, r6, #4
   1b44c:	vmvn	q8, q8
   1b450:	vst1.32	{d16-d17}, [r4]!
   1b454:	bne	1b444 <__assert_fail@plt+0xa124>
   1b458:	cmp	ip, r5
   1b45c:	popeq	{r4, r5, r6, sl, fp, pc}
   1b460:	add	r3, lr, #4
   1b464:	add	r1, r1, #4
   1b468:	add	r2, r2, #1
   1b46c:	ldr	r6, [r1], #4
   1b470:	sub	r2, r2, #1
   1b474:	cmp	r2, #2
   1b478:	mvn	r6, r6
   1b47c:	str	r6, [r3], #4
   1b480:	bgt	1b46c <__assert_fail@plt+0xa14c>
   1b484:	pop	{r4, r5, r6, sl, fp, pc}
   1b488:	push	{r4, r5, r6, r7, fp, lr}
   1b48c:	add	fp, sp, #16
   1b490:	lsr	r3, r0, #16
   1b494:	mvn	r4, r0
   1b498:	uxth	r2, r0
   1b49c:	movw	ip, #65535	; 0xffff
   1b4a0:	udiv	r6, r4, r3
   1b4a4:	mul	lr, r6, r2
   1b4a8:	mls	r2, r6, r3, r4
   1b4ac:	orr	r3, ip, r2, lsl #16
   1b4b0:	cmp	r3, lr
   1b4b4:	bcs	1b4e0 <__assert_fail@plt+0xa1c0>
   1b4b8:	add	r3, r3, r0
   1b4bc:	sub	r4, r6, #1
   1b4c0:	cmp	r3, r0
   1b4c4:	bcc	1b4dc <__assert_fail@plt+0xa1bc>
   1b4c8:	cmp	r3, lr
   1b4cc:	bcs	1b4dc <__assert_fail@plt+0xa1bc>
   1b4d0:	add	r3, r3, r0
   1b4d4:	sub	r6, r6, #2
   1b4d8:	b	1b4e0 <__assert_fail@plt+0xa1c0>
   1b4dc:	mov	r6, r4
   1b4e0:	sub	r2, r3, lr
   1b4e4:	lsr	r3, r2, #16
   1b4e8:	mla	r4, r3, r6, r2
   1b4ec:	mov	r3, #1
   1b4f0:	orr	r2, ip, r2, lsl #16
   1b4f4:	add	r5, r3, r4, lsr #16
   1b4f8:	mls	r3, r5, r0, r2
   1b4fc:	cmp	r3, r4, lsl #16
   1b500:	lsrcs	r5, r4, #16
   1b504:	addcs	r3, r3, r0
   1b508:	add	r2, r5, r6, lsl #16
   1b50c:	mov	r6, #0
   1b510:	cmp	r3, r0
   1b514:	movwcs	r6, #1
   1b518:	cmp	r1, #0
   1b51c:	add	ip, r2, r6
   1b520:	beq	1b5c4 <__assert_fail@plt+0xa2a4>
   1b524:	mvn	r2, r3
   1b528:	cmp	r3, r0
   1b52c:	add	r2, r2, r1
   1b530:	addcs	r2, r2, r0
   1b534:	cmp	r2, r1
   1b538:	bcs	1b550 <__assert_fail@plt+0xa230>
   1b53c:	subs	r2, r2, r0
   1b540:	mvn	r3, #1
   1b544:	mvncc	r3, #0
   1b548:	subcs	r2, r2, r0
   1b54c:	add	ip, r3, ip
   1b550:	uxth	r3, r1
   1b554:	lsr	r4, ip, #16
   1b558:	uxth	r7, ip
   1b55c:	lsr	r5, r1, #16
   1b560:	mul	r6, r4, r3
   1b564:	mul	lr, r7, r3
   1b568:	mul	r4, r4, r5
   1b56c:	mla	r6, r7, r5, r6
   1b570:	add	r3, r6, lr, lsr #16
   1b574:	mul	r6, r7, r5
   1b578:	cmp	r3, r6
   1b57c:	addcc	r4, r4, #65536	; 0x10000
   1b580:	add	r4, r4, r3, lsr #16
   1b584:	adds	r2, r4, r2
   1b588:	bcc	1b5c4 <__assert_fail@plt+0xa2a4>
   1b58c:	cmp	r2, r0
   1b590:	mov	r5, #0
   1b594:	sub	r0, r2, r0
   1b598:	pkhbt	r3, lr, r3, lsl #16
   1b59c:	mov	r4, #0
   1b5a0:	clz	r0, r0
   1b5a4:	movwhi	r5, #1
   1b5a8:	cmp	r3, r1
   1b5ac:	movwhi	r4, #1
   1b5b0:	lsr	r0, r0, #5
   1b5b4:	and	r0, r4, r0
   1b5b8:	orr	r0, r5, r0
   1b5bc:	mvn	r0, r0
   1b5c0:	add	ip, ip, r0
   1b5c4:	mov	r0, ip
   1b5c8:	pop	{r4, r5, r6, r7, fp, pc}
   1b5cc:	push	{r4, sl, fp, lr}
   1b5d0:	add	fp, sp, #8
   1b5d4:	sub	sp, sp, #16
   1b5d8:	cmp	r3, #0
   1b5dc:	ble	1b740 <__assert_fail@plt+0xa420>
   1b5e0:	mov	ip, r2
   1b5e4:	add	r2, r2, r3, lsl #2
   1b5e8:	ldr	r2, [r2, #-4]
   1b5ec:	cmp	r2, #0
   1b5f0:	beq	1b760 <__assert_fail@plt+0xa440>
   1b5f4:	cmp	r1, #63	; 0x3f
   1b5f8:	bgt	1b698 <__assert_fail@plt+0xa378>
   1b5fc:	sub	r4, r1, #2
   1b600:	cmp	r4, #30
   1b604:	bhi	1b6f0 <__assert_fail@plt+0xa3d0>
   1b608:	add	r2, pc, #4
   1b60c:	mov	lr, #1
   1b610:	ldr	pc, [r2, r4, lsl #2]
   1b614:	ldrdeq	fp, [r1], -ip
   1b618:	strdeq	fp, [r1], -r0
   1b61c:	muleq	r1, r0, r6
   1b620:	strdeq	fp, [r1], -r0
   1b624:	strdeq	fp, [r1], -r0
   1b628:	strdeq	fp, [r1], -r0
   1b62c:	andeq	fp, r1, r0, asr #13
   1b630:	strdeq	fp, [r1], -r0
   1b634:	strdeq	fp, [r1], -r0
   1b638:	strdeq	fp, [r1], -r0
   1b63c:	strdeq	fp, [r1], -r0
   1b640:	strdeq	fp, [r1], -r0
   1b644:	strdeq	fp, [r1], -r0
   1b648:	strdeq	fp, [r1], -r0
   1b64c:			; <UNDEFINED> instruction: 0x0001b6b8
   1b650:	strdeq	fp, [r1], -r0
   1b654:	strdeq	fp, [r1], -r0
   1b658:	strdeq	fp, [r1], -r0
   1b65c:	strdeq	fp, [r1], -r0
   1b660:	strdeq	fp, [r1], -r0
   1b664:	strdeq	fp, [r1], -r0
   1b668:	strdeq	fp, [r1], -r0
   1b66c:	strdeq	fp, [r1], -r0
   1b670:	strdeq	fp, [r1], -r0
   1b674:	strdeq	fp, [r1], -r0
   1b678:	strdeq	fp, [r1], -r0
   1b67c:	strdeq	fp, [r1], -r0
   1b680:	strdeq	fp, [r1], -r0
   1b684:	strdeq	fp, [r1], -r0
   1b688:	strdeq	fp, [r1], -r0
   1b68c:	andeq	fp, r1, r8, asr #13
   1b690:	mov	lr, #2
   1b694:	b	1b6dc <__assert_fail@plt+0xa3bc>
   1b698:	cmp	r1, #64	; 0x40
   1b69c:	beq	1b6d0 <__assert_fail@plt+0xa3b0>
   1b6a0:	cmp	r1, #128	; 0x80
   1b6a4:	beq	1b6d8 <__assert_fail@plt+0xa3b8>
   1b6a8:	cmp	r1, #256	; 0x100
   1b6ac:	bne	1b6f0 <__assert_fail@plt+0xa3d0>
   1b6b0:	mov	lr, #8
   1b6b4:	b	1b6dc <__assert_fail@plt+0xa3bc>
   1b6b8:	mov	lr, #4
   1b6bc:	b	1b6dc <__assert_fail@plt+0xa3bc>
   1b6c0:	mov	lr, #3
   1b6c4:	b	1b6dc <__assert_fail@plt+0xa3bc>
   1b6c8:	mov	lr, #5
   1b6cc:	b	1b6dc <__assert_fail@plt+0xa3bc>
   1b6d0:	mov	lr, #6
   1b6d4:	b	1b6dc <__assert_fail@plt+0xa3bc>
   1b6d8:	mov	lr, #7
   1b6dc:	mov	r1, lr
   1b6e0:	mov	r2, ip
   1b6e4:	sub	sp, fp, #8
   1b6e8:	pop	{r4, sl, fp, lr}
   1b6ec:	b	1b780 <__assert_fail@plt+0xa460>
   1b6f0:	mvn	r2, #0
   1b6f4:	mov	r4, r1
   1b6f8:	udiv	lr, r2, r1
   1b6fc:	mov	r2, #1
   1b700:	cmp	lr, r1
   1b704:	bcc	1b720 <__assert_fail@plt+0xa400>
   1b708:	mov	r2, #1
   1b70c:	mov	r4, r1
   1b710:	mul	r4, r4, r1
   1b714:	add	r2, r2, #1
   1b718:	cmp	r4, lr
   1b71c:	bls	1b710 <__assert_fail@plt+0xa3f0>
   1b720:	str	r4, [sp, #12]
   1b724:	str	r2, [sp, #8]
   1b728:	str	r3, [sp]
   1b72c:	add	r2, sp, #8
   1b730:	mov	r3, ip
   1b734:	bl	1b87c <__assert_fail@plt+0xa55c>
   1b738:	sub	sp, fp, #8
   1b73c:	pop	{r4, sl, fp, pc}
   1b740:	movw	r0, #2391	; 0x957
   1b744:	movw	r1, #1588	; 0x634
   1b748:	movw	r3, #2398	; 0x95e
   1b74c:	movw	r2, #1316	; 0x524
   1b750:	movt	r0, #3
   1b754:	movt	r1, #3
   1b758:	movt	r3, #3
   1b75c:	bl	11320 <__assert_fail@plt>
   1b760:	movw	r0, #2458	; 0x99a
   1b764:	movw	r1, #1588	; 0x634
   1b768:	movw	r3, #2398	; 0x95e
   1b76c:	movw	r2, #1317	; 0x525
   1b770:	movt	r0, #3
   1b774:	movt	r1, #3
   1b778:	movt	r3, #3
   1b77c:	bl	11320 <__assert_fail@plt>
   1b780:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b784:	add	fp, sp, #24
   1b788:	sub	r4, r3, #1
   1b78c:	ldr	lr, [r2, r4, lsl #2]
   1b790:	cmp	lr, #0
   1b794:	beq	1b85c <__assert_fail@plt+0xa53c>
   1b798:	mov	ip, #0
   1b79c:	cmp	ip, lr, lsr #24
   1b7a0:	bne	1b7b8 <__assert_fail@plt+0xa498>
   1b7a4:	mov	ip, #0
   1b7a8:	lsl	lr, lr, #8
   1b7ac:	add	ip, ip, #8
   1b7b0:	cmp	lr, #16777216	; 0x1000000
   1b7b4:	bcc	1b7a8 <__assert_fail@plt+0xa488>
   1b7b8:	lsl	r4, r4, #5
   1b7bc:	cmp	lr, #0
   1b7c0:	blt	1b7d4 <__assert_fail@plt+0xa4b4>
   1b7c4:	lsl	lr, lr, #1
   1b7c8:	add	ip, ip, #1
   1b7cc:	cmn	lr, #1
   1b7d0:	bgt	1b7c4 <__assert_fail@plt+0xa4a4>
   1b7d4:	add	r7, r1, r4
   1b7d8:	add	r7, r7, #31
   1b7dc:	sub	r7, r7, ip
   1b7e0:	udiv	ip, r7, r1
   1b7e4:	cmp	r7, r1
   1b7e8:	bcc	1b854 <__assert_fail@plt+0xa534>
   1b7ec:	mvn	r7, #0
   1b7f0:	mov	r6, #255	; 0xff
   1b7f4:	mov	r5, #0
   1b7f8:	mov	r4, ip
   1b7fc:	mov	r8, #0
   1b800:	eor	lr, r6, r7, lsl r1
   1b804:	ldr	r7, [r2, r8, lsl #2]
   1b808:	add	r6, r5, r1
   1b80c:	sub	r4, r4, #1
   1b810:	cmp	r6, #32
   1b814:	lsr	r7, r7, r5
   1b818:	bcc	1b840 <__assert_fail@plt+0xa520>
   1b81c:	add	r8, r8, #1
   1b820:	cmp	r8, r3
   1b824:	bge	1b840 <__assert_fail@plt+0xa520>
   1b828:	ldr	r9, [r2, r8, lsl #2]
   1b82c:	sub	r5, r6, #32
   1b830:	uxtb	r7, r7
   1b834:	sub	r6, r1, r5
   1b838:	orr	r7, r7, r9, lsl r6
   1b83c:	b	1b844 <__assert_fail@plt+0xa524>
   1b840:	mov	r5, r6
   1b844:	and	r6, r7, lr
   1b848:	cmp	r4, #0
   1b84c:	strb	r6, [r0, r4]
   1b850:	bne	1b804 <__assert_fail@plt+0xa4e4>
   1b854:	mov	r0, ip
   1b858:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b85c:	movw	r0, #6279	; 0x1887
   1b860:	movw	r1, #1588	; 0x634
   1b864:	movw	r3, #6285	; 0x188d
   1b868:	movw	r2, #1210	; 0x4ba
   1b86c:	movt	r0, #3
   1b870:	movt	r1, #3
   1b874:	movt	r3, #3
   1b878:	bl	11320 <__assert_fail@plt>
   1b87c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b880:	add	fp, sp, #28
   1b884:	sub	sp, sp, #44	; 0x2c
   1b888:	cmp	r1, #0
   1b88c:	str	r3, [sp, #8]
   1b890:	beq	1bb44 <__assert_fail@plt+0xa824>
   1b894:	mov	r6, r2
   1b898:	mov	r2, #0
   1b89c:	mov	r4, r0
   1b8a0:	mov	r0, r1
   1b8a4:	cmp	r2, r1, lsr #24
   1b8a8:	bne	1b8c4 <__assert_fail@plt+0xa5a4>
   1b8ac:	mov	r2, #0
   1b8b0:	mov	r0, r1
   1b8b4:	lsl	r0, r0, #8
   1b8b8:	add	r2, r2, #8
   1b8bc:	cmp	r0, #16777216	; 0x1000000
   1b8c0:	bcc	1b8b4 <__assert_fail@plt+0xa594>
   1b8c4:	cmp	r0, #0
   1b8c8:	blt	1b8dc <__assert_fail@plt+0xa5bc>
   1b8cc:	lsl	r0, r0, #1
   1b8d0:	add	r2, r2, #1
   1b8d4:	cmn	r0, #1
   1b8d8:	bgt	1b8cc <__assert_fail@plt+0xa5ac>
   1b8dc:	lsl	r0, r1, r2
   1b8e0:	str	r2, [sp, #28]
   1b8e4:	mvn	r2, r1, lsl r2
   1b8e8:	ldr	r7, [fp, #8]
   1b8ec:	movw	lr, #65535	; 0xffff
   1b8f0:	lsr	r5, r0, #16
   1b8f4:	uxth	r3, r0
   1b8f8:	str	r0, [sp, #32]
   1b8fc:	udiv	r1, r2, r5
   1b900:	mls	r5, r1, r5, r2
   1b904:	mul	r3, r1, r3
   1b908:	orr	r5, lr, r5, lsl #16
   1b90c:	cmp	r5, r3
   1b910:	bcs	1b93c <__assert_fail@plt+0xa61c>
   1b914:	add	r5, r5, r0
   1b918:	sub	ip, r1, #1
   1b91c:	cmp	r5, r0
   1b920:	bcc	1b938 <__assert_fail@plt+0xa618>
   1b924:	cmp	r5, r3
   1b928:	bcs	1b938 <__assert_fail@plt+0xa618>
   1b92c:	add	r5, r5, r0
   1b930:	sub	r1, r1, #2
   1b934:	b	1b93c <__assert_fail@plt+0xa61c>
   1b938:	mov	r1, ip
   1b93c:	sub	r3, r5, r3
   1b940:	mov	r2, #1
   1b944:	mov	r8, #0
   1b948:	lsr	r5, r3, #16
   1b94c:	mla	r5, r5, r1, r3
   1b950:	orr	r3, lr, r3, lsl #16
   1b954:	add	r2, r2, r5, lsr #16
   1b958:	mls	r3, r2, r0, r3
   1b95c:	cmp	r3, r5, lsl #16
   1b960:	lsrcs	r2, r5, #16
   1b964:	addcs	r3, r3, r0
   1b968:	add	r1, r2, r1, lsl #16
   1b96c:	cmp	r3, r0
   1b970:	addcs	r1, r1, #1
   1b974:	cmp	r7, #2
   1b978:	str	r1, [sp, #40]	; 0x28
   1b97c:	blt	1baf4 <__assert_fail@plt+0xa7d4>
   1b980:	ldr	r0, [r6, #4]
   1b984:	cmp	r0, #0
   1b988:	beq	1bb44 <__assert_fail@plt+0xa824>
   1b98c:	mov	r2, #0
   1b990:	mov	r1, r0
   1b994:	cmp	r2, r0, lsr #24
   1b998:	bne	1b9b4 <__assert_fail@plt+0xa694>
   1b99c:	mov	r2, #0
   1b9a0:	mov	r1, r0
   1b9a4:	lsl	r1, r1, #8
   1b9a8:	add	r2, r2, #8
   1b9ac:	cmp	r1, #16777216	; 0x1000000
   1b9b0:	bcc	1b9a4 <__assert_fail@plt+0xa684>
   1b9b4:	cmp	r1, #0
   1b9b8:	blt	1b9cc <__assert_fail@plt+0xa6ac>
   1b9bc:	lsl	r1, r1, #1
   1b9c0:	add	r2, r2, #1
   1b9c4:	cmn	r1, #1
   1b9c8:	bgt	1b9bc <__assert_fail@plt+0xa69c>
   1b9cc:	lsl	r1, r0, r2
   1b9d0:	str	r2, [sp, #12]
   1b9d4:	mvn	r2, r0, lsl r2
   1b9d8:	movw	lr, #65535	; 0xffff
   1b9dc:	str	r4, [sp, #4]
   1b9e0:	lsr	r5, r1, #16
   1b9e4:	uxth	r3, r1
   1b9e8:	str	r1, [sp, #16]
   1b9ec:	udiv	r0, r2, r5
   1b9f0:	mls	r5, r0, r5, r2
   1b9f4:	mul	r3, r0, r3
   1b9f8:	orr	r5, lr, r5, lsl #16
   1b9fc:	cmp	r5, r3
   1ba00:	bcs	1ba2c <__assert_fail@plt+0xa70c>
   1ba04:	add	r5, r5, r1
   1ba08:	sub	ip, r0, #1
   1ba0c:	cmp	r5, r1
   1ba10:	bcc	1ba28 <__assert_fail@plt+0xa708>
   1ba14:	cmp	r5, r3
   1ba18:	bcs	1ba28 <__assert_fail@plt+0xa708>
   1ba1c:	add	r5, r5, r1
   1ba20:	sub	r0, r0, #2
   1ba24:	b	1ba2c <__assert_fail@plt+0xa70c>
   1ba28:	mov	r0, ip
   1ba2c:	sub	r3, r5, r3
   1ba30:	mov	r2, #1
   1ba34:	mov	r9, #0
   1ba38:	mov	r8, #0
   1ba3c:	lsr	r5, r3, #16
   1ba40:	mla	r5, r5, r0, r3
   1ba44:	orr	r3, lr, r3, lsl #16
   1ba48:	add	r2, r2, r5, lsr #16
   1ba4c:	mls	r3, r2, r1, r3
   1ba50:	cmp	r3, r5, lsl #16
   1ba54:	lsrcs	r2, r5, #16
   1ba58:	addcs	r3, r3, r1
   1ba5c:	add	r0, r2, r0, lsl #16
   1ba60:	cmp	r3, r1
   1ba64:	addcs	r0, r0, #1
   1ba68:	str	r0, [sp, #24]
   1ba6c:	ldr	r5, [sp, #8]
   1ba70:	mov	r2, r7
   1ba74:	add	r3, sp, #12
   1ba78:	mov	r0, r5
   1ba7c:	mov	r1, r5
   1ba80:	bl	265d8 <__assert_fail@plt+0x152b8>
   1ba84:	mov	r1, r0
   1ba88:	ldr	r0, [sp, #4]
   1ba8c:	sub	sl, r7, #1
   1ba90:	mov	r4, r7
   1ba94:	add	r2, sp, #28
   1ba98:	ldr	r7, [r5, sl, lsl #2]
   1ba9c:	add	r5, r0, r8
   1baa0:	mov	r0, r5
   1baa4:	bl	2763c <__assert_fail@plt+0x1631c>
   1baa8:	ldr	r1, [r6]
   1baac:	cmp	r7, #0
   1bab0:	mov	r7, r4
   1bab4:	moveq	r7, sl
   1bab8:	cmp	r0, r1
   1babc:	bcs	1bae4 <__assert_fail@plt+0xa7c4>
   1bac0:	strb	r9, [r5, r0]
   1bac4:	add	r0, r0, #1
   1bac8:	ldr	r1, [r6]
   1bacc:	cmp	r0, r1
   1bad0:	bcc	1bac0 <__assert_fail@plt+0xa7a0>
   1bad4:	add	r8, r8, r0
   1bad8:	cmp	r7, #1
   1badc:	bgt	1ba6c <__assert_fail@plt+0xa74c>
   1bae0:	b	1baf0 <__assert_fail@plt+0xa7d0>
   1bae4:	add	r8, r0, r8
   1bae8:	cmp	r7, #1
   1baec:	bgt	1ba6c <__assert_fail@plt+0xa74c>
   1baf0:	ldr	r4, [sp, #4]
   1baf4:	ldr	r1, [sp, #8]
   1baf8:	add	r0, r4, r8
   1bafc:	add	r2, sp, #28
   1bb00:	ldr	r1, [r1]
   1bb04:	bl	2763c <__assert_fail@plt+0x1631c>
   1bb08:	add	r0, r0, r8
   1bb0c:	cmp	r0, #2
   1bb10:	bcc	1bb3c <__assert_fail@plt+0xa81c>
   1bb14:	add	r1, r4, r0
   1bb18:	mov	r2, #1
   1bb1c:	sub	r1, r1, #1
   1bb20:	ldrb	r3, [r4]
   1bb24:	ldrb	r7, [r1]
   1bb28:	add	r2, r2, #2
   1bb2c:	cmp	r2, r0
   1bb30:	strb	r7, [r4], #1
   1bb34:	strb	r3, [r1], #-1
   1bb38:	bcc	1bb20 <__assert_fail@plt+0xa800>
   1bb3c:	sub	sp, fp, #28
   1bb40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb44:	movw	r0, #6332	; 0x18bc
   1bb48:	movw	r1, #1588	; 0x634
   1bb4c:	movw	r3, #6338	; 0x18c2
   1bb50:	movw	r2, #902	; 0x386
   1bb54:	movt	r0, #3
   1bb58:	movt	r1, #3
   1bb5c:	movt	r3, #3
   1bb60:	bl	11320 <__assert_fail@plt>
   1bb64:	push	{r4, r5, fp, lr}
   1bb68:	add	fp, sp, #8
   1bb6c:	sub	sp, sp, #16
   1bb70:	cmp	r2, #0
   1bb74:	moveq	r0, #0
   1bb78:	subeq	sp, fp, #8
   1bb7c:	popeq	{r4, r5, fp, pc}
   1bb80:	cmp	r3, #63	; 0x3f
   1bb84:	bgt	1bc24 <__assert_fail@plt+0xa904>
   1bb88:	sub	r5, r3, #2
   1bb8c:	cmp	r5, #30
   1bb90:	bhi	1bcf0 <__assert_fail@plt+0xa9d0>
   1bb94:	add	r4, pc, #4
   1bb98:	mov	ip, #1
   1bb9c:	ldr	pc, [r4, r5, lsl #2]
   1bba0:	andeq	fp, r1, r8, ror #24
   1bba4:	strdeq	fp, [r1], -r0
   1bba8:	andeq	fp, r1, ip, lsl ip
   1bbac:	strdeq	fp, [r1], -r0
   1bbb0:	strdeq	fp, [r1], -r0
   1bbb4:	strdeq	fp, [r1], -r0
   1bbb8:	andeq	fp, r1, r4, asr #24
   1bbbc:	strdeq	fp, [r1], -r0
   1bbc0:	strdeq	fp, [r1], -r0
   1bbc4:	strdeq	fp, [r1], -r0
   1bbc8:	strdeq	fp, [r1], -r0
   1bbcc:	strdeq	fp, [r1], -r0
   1bbd0:	strdeq	fp, [r1], -r0
   1bbd4:	strdeq	fp, [r1], -r0
   1bbd8:	andeq	fp, r1, ip, asr #24
   1bbdc:	strdeq	fp, [r1], -r0
   1bbe0:	strdeq	fp, [r1], -r0
   1bbe4:	strdeq	fp, [r1], -r0
   1bbe8:	strdeq	fp, [r1], -r0
   1bbec:	strdeq	fp, [r1], -r0
   1bbf0:	strdeq	fp, [r1], -r0
   1bbf4:	strdeq	fp, [r1], -r0
   1bbf8:	strdeq	fp, [r1], -r0
   1bbfc:	strdeq	fp, [r1], -r0
   1bc00:	strdeq	fp, [r1], -r0
   1bc04:	strdeq	fp, [r1], -r0
   1bc08:	strdeq	fp, [r1], -r0
   1bc0c:	strdeq	fp, [r1], -r0
   1bc10:	strdeq	fp, [r1], -r0
   1bc14:	strdeq	fp, [r1], -r0
   1bc18:	andeq	fp, r1, r4, asr ip
   1bc1c:	mov	ip, #2
   1bc20:	b	1bc68 <__assert_fail@plt+0xa948>
   1bc24:	cmp	r3, #64	; 0x40
   1bc28:	beq	1bc5c <__assert_fail@plt+0xa93c>
   1bc2c:	cmp	r3, #128	; 0x80
   1bc30:	beq	1bc64 <__assert_fail@plt+0xa944>
   1bc34:	cmp	r3, #256	; 0x100
   1bc38:	bne	1bcf0 <__assert_fail@plt+0xa9d0>
   1bc3c:	mov	ip, #8
   1bc40:	b	1bc68 <__assert_fail@plt+0xa948>
   1bc44:	mov	ip, #3
   1bc48:	b	1bc68 <__assert_fail@plt+0xa948>
   1bc4c:	mov	ip, #4
   1bc50:	b	1bc68 <__assert_fail@plt+0xa948>
   1bc54:	mov	ip, #5
   1bc58:	b	1bc68 <__assert_fail@plt+0xa948>
   1bc5c:	mov	ip, #6
   1bc60:	b	1bc68 <__assert_fail@plt+0xa948>
   1bc64:	mov	ip, #7
   1bc68:	sub	lr, r1, #1
   1bc6c:	mov	r3, #0
   1bc70:	mov	r4, #0
   1bc74:	mov	r1, #0
   1bc78:	ldrb	r5, [lr, r2]
   1bc7c:	orr	r4, r4, r5, lsl r3
   1bc80:	add	r3, r3, ip
   1bc84:	sub	r5, r2, #1
   1bc88:	cmp	r3, #32
   1bc8c:	bcc	1bca8 <__assert_fail@plt+0xa988>
   1bc90:	str	r4, [r0, r1, lsl #2]
   1bc94:	sub	r3, r3, #32
   1bc98:	add	r1, r1, #1
   1bc9c:	ldrb	r2, [lr, r2]
   1bca0:	sub	r4, ip, r3
   1bca4:	lsr	r4, r2, r4
   1bca8:	cmp	r5, #0
   1bcac:	mov	r2, r5
   1bcb0:	bne	1bc78 <__assert_fail@plt+0xa958>
   1bcb4:	cmp	r4, #0
   1bcb8:	strne	r4, [r0, r1, lsl #2]
   1bcbc:	addne	r0, r1, #1
   1bcc0:	subne	sp, fp, #8
   1bcc4:	popne	{r4, r5, fp, pc}
   1bcc8:	sub	r2, r0, #4
   1bccc:	mov	r0, r1
   1bcd0:	cmp	r1, #1
   1bcd4:	blt	1bce8 <__assert_fail@plt+0xa9c8>
   1bcd8:	ldr	r3, [r2, r0, lsl #2]
   1bcdc:	sub	r1, r0, #1
   1bce0:	cmp	r3, #0
   1bce4:	beq	1bccc <__assert_fail@plt+0xa9ac>
   1bce8:	sub	sp, fp, #8
   1bcec:	pop	{r4, r5, fp, pc}
   1bcf0:	mvn	r5, #0
   1bcf4:	mov	r4, #1
   1bcf8:	udiv	ip, r5, r3
   1bcfc:	mov	r5, r3
   1bd00:	cmp	ip, r3
   1bd04:	bcc	1bd20 <__assert_fail@plt+0xaa00>
   1bd08:	mov	r4, #1
   1bd0c:	mov	r5, r3
   1bd10:	mul	r5, r5, r3
   1bd14:	add	r4, r4, #1
   1bd18:	cmp	r5, ip
   1bd1c:	bls	1bd10 <__assert_fail@plt+0xa9f0>
   1bd20:	str	r5, [sp, #12]
   1bd24:	add	r5, sp, #8
   1bd28:	str	r4, [sp, #8]
   1bd2c:	str	r5, [sp]
   1bd30:	bl	1bd3c <__assert_fail@plt+0xaa1c>
   1bd34:	sub	sp, fp, #8
   1bd38:	pop	{r4, r5, fp, pc}
   1bd3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd40:	add	fp, sp, #28
   1bd44:	sub	sp, sp, #28
   1bd48:	cmp	r2, #0
   1bd4c:	beq	1bf1c <__assert_fail@plt+0xabfc>
   1bd50:	ldr	r7, [fp, #8]
   1bd54:	sub	r6, r2, #1
   1bd58:	mov	ip, #1
   1bd5c:	mov	lr, #1
   1bd60:	ldr	r5, [r7]
   1bd64:	udiv	r7, r6, r5
   1bd68:	str	r5, [sp, #16]
   1bd6c:	mls	r6, r7, r5, r6
   1bd70:	ldrb	r7, [r1]
   1bd74:	cmp	r6, #0
   1bd78:	beq	1bd90 <__assert_fail@plt+0xaa70>
   1bd7c:	ldrb	r5, [r1, lr]
   1bd80:	subs	r6, r6, #1
   1bd84:	add	lr, lr, #1
   1bd88:	mla	r7, r7, r3, r5
   1bd8c:	bne	1bd7c <__assert_fail@plt+0xaa5c>
   1bd90:	cmp	lr, r2
   1bd94:	str	r7, [r0]
   1bd98:	bcs	1becc <__assert_fail@plt+0xabac>
   1bd9c:	ldr	r5, [sp, #16]
   1bda0:	mov	r4, #1
   1bda4:	add	r7, r1, lr
   1bda8:	mov	ip, #1
   1bdac:	str	r2, [sp, #12]
   1bdb0:	str	r1, [sp, #8]
   1bdb4:	add	r7, r7, #1
   1bdb8:	cmp	r5, #1
   1bdbc:	movhi	r4, r5
   1bdc0:	str	r4, [sp, #4]
   1bdc4:	sub	r4, r5, #1
   1bdc8:	str	r4, [sp]
   1bdcc:	ldr	r5, [sp, #16]
   1bdd0:	ldrb	r4, [r1, lr]
   1bdd4:	str	r7, [sp, #24]
   1bdd8:	cmp	r5, #2
   1bddc:	bcc	1be00 <__assert_fail@plt+0xaae0>
   1bde0:	ldr	r6, [sp]
   1bde4:	ldrb	r5, [r7], #1
   1bde8:	subs	r6, r6, #1
   1bdec:	mla	r4, r4, r3, r5
   1bdf0:	bne	1bde4 <__assert_fail@plt+0xaac4>
   1bdf4:	ldr	r5, [sp, #16]
   1bdf8:	add	lr, r5, lr
   1bdfc:	b	1be04 <__assert_fail@plt+0xaae4>
   1be00:	add	lr, lr, #1
   1be04:	cmp	ip, #1
   1be08:	str	lr, [sp, #20]
   1be0c:	blt	1befc <__assert_fail@plt+0xabdc>
   1be10:	ldr	r1, [fp, #8]
   1be14:	mov	lr, #0
   1be18:	ldr	r2, [r1, #4]
   1be1c:	lsr	r8, r2, #16
   1be20:	uxth	r9, r2
   1be24:	mov	r2, #0
   1be28:	ldr	r5, [r0, r2, lsl #2]
   1be2c:	uxth	r7, r5
   1be30:	lsr	r5, r5, #16
   1be34:	mul	r1, r7, r8
   1be38:	mul	r7, r7, r9
   1be3c:	mul	sl, r5, r9
   1be40:	mla	r1, r5, r9, r1
   1be44:	mul	r5, r5, r8
   1be48:	add	r1, r1, r7, lsr #16
   1be4c:	cmp	r1, sl
   1be50:	pkhbt	r7, r7, r1, lsl #16
   1be54:	addcc	r5, r5, #65536	; 0x10000
   1be58:	adds	r7, r7, lr
   1be5c:	str	r7, [r0, r2, lsl #2]
   1be60:	add	r2, r2, #1
   1be64:	adc	lr, r5, r1, lsr #16
   1be68:	cmp	ip, r2
   1be6c:	bne	1be28 <__assert_fail@plt+0xab08>
   1be70:	mov	r2, #0
   1be74:	mov	r6, #0
   1be78:	ldr	r1, [r0, r2, lsl #2]
   1be7c:	mov	r7, r4
   1be80:	adds	r5, r1, r4
   1be84:	str	r5, [r0, r2, lsl #2]
   1be88:	add	r2, r2, #1
   1be8c:	adc	r4, r6, #0
   1be90:	cmp	ip, r2
   1be94:	bne	1be78 <__assert_fail@plt+0xab58>
   1be98:	cmp	r5, r7
   1be9c:	ldr	r7, [sp, #24]
   1bea0:	ldr	r2, [sp, #4]
   1bea4:	ldr	r1, [sp, #8]
   1bea8:	addcc	lr, lr, #1
   1beac:	cmp	lr, #0
   1beb0:	strne	lr, [r0, ip, lsl #2]
   1beb4:	ldr	lr, [sp, #20]
   1beb8:	addne	ip, ip, #1
   1bebc:	add	r7, r7, r2
   1bec0:	ldr	r2, [sp, #12]
   1bec4:	cmp	lr, r2
   1bec8:	bcc	1bdcc <__assert_fail@plt+0xaaac>
   1becc:	cmp	lr, r2
   1bed0:	moveq	r0, ip
   1bed4:	subeq	sp, fp, #28
   1bed8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bedc:	movw	r0, #4795	; 0x12bb
   1bee0:	movw	r1, #1588	; 0x634
   1bee4:	movw	r3, #4687	; 0x124f
   1bee8:	movw	r2, #1394	; 0x572
   1beec:	movt	r0, #3
   1bef0:	movt	r1, #3
   1bef4:	movt	r3, #3
   1bef8:	bl	11320 <__assert_fail@plt>
   1befc:	movw	r0, #2145	; 0x861
   1bf00:	movw	r1, #1588	; 0x634
   1bf04:	movw	r3, #1876	; 0x754
   1bf08:	movw	r2, #545	; 0x221
   1bf0c:	movt	r0, #3
   1bf10:	movt	r1, #3
   1bf14:	movt	r3, #3
   1bf18:	bl	11320 <__assert_fail@plt>
   1bf1c:	movw	r0, #4680	; 0x1248
   1bf20:	movw	r1, #1588	; 0x634
   1bf24:	movw	r3, #4687	; 0x124f
   1bf28:	movw	r2, #1370	; 0x55a
   1bf2c:	movt	r0, #3
   1bf30:	movt	r1, #3
   1bf34:	movt	r3, #3
   1bf38:	bl	11320 <__assert_fail@plt>
   1bf3c:	movw	r2, #1584	; 0x630
   1bf40:	mov	r1, #0
   1bf44:	movt	r2, #3
   1bf48:	str	r1, [r0]
   1bf4c:	stmib	r0, {r1, r2}
   1bf50:	bx	lr
   1bf54:	push	{r4, sl, fp, lr}
   1bf58:	add	fp, sp, #8
   1bf5c:	cmp	r1, #0
   1bf60:	mov	r2, #1
   1bf64:	mov	r4, r0
   1bf68:	mov	r0, #0
   1bf6c:	subne	r1, r1, #1
   1bf70:	add	r1, r2, r1, lsr #5
   1bf74:	str	r1, [r4]
   1bf78:	str	r0, [r4, #4]
   1bf7c:	lsl	r0, r1, #2
   1bf80:	movw	r1, #8476	; 0x211c
   1bf84:	movt	r1, #4
   1bf88:	ldr	r1, [r1]
   1bf8c:	blx	r1
   1bf90:	str	r0, [r4, #8]
   1bf94:	pop	{r4, sl, fp, pc}
   1bf98:	ldr	r1, [r0]
   1bf9c:	cmp	r1, #0
   1bfa0:	bxeq	lr
   1bfa4:	movw	r2, #8484	; 0x2124
   1bfa8:	ldr	r0, [r0, #8]
   1bfac:	lsl	r1, r1, #2
   1bfb0:	movt	r2, #4
   1bfb4:	ldr	r2, [r2]
   1bfb8:	bx	r2
   1bfbc:	push	{r4, r5, fp, lr}
   1bfc0:	add	fp, sp, #8
   1bfc4:	mov	r5, r1
   1bfc8:	mov	r4, r0
   1bfcc:	cmp	r1, #0
   1bfd0:	blt	1bfe8 <__assert_fail@plt+0xacc8>
   1bfd4:	moveq	r0, #0
   1bfd8:	streq	r0, [r4, #4]
   1bfdc:	popeq	{r4, r5, fp, pc}
   1bfe0:	mov	r0, #1
   1bfe4:	b	1bff0 <__assert_fail@plt+0xacd0>
   1bfe8:	mvn	r0, #0
   1bfec:	rsb	r5, r5, #0
   1bff0:	str	r0, [r4, #4]
   1bff4:	ldr	r1, [r4]
   1bff8:	cmp	r1, #0
   1bffc:	ble	1c00c <__assert_fail@plt+0xacec>
   1c000:	ldr	r0, [r4, #8]
   1c004:	str	r5, [r0]
   1c008:	pop	{r4, r5, fp, pc}
   1c00c:	beq	1c030 <__assert_fail@plt+0xad10>
   1c010:	movw	r0, #8480	; 0x2120
   1c014:	lsl	r1, r1, #2
   1c018:	mov	r2, #4
   1c01c:	movt	r0, #4
   1c020:	ldr	r3, [r0]
   1c024:	ldr	r0, [r4, #8]
   1c028:	blx	r3
   1c02c:	b	1c044 <__assert_fail@plt+0xad24>
   1c030:	movw	r0, #8476	; 0x211c
   1c034:	movt	r0, #4
   1c038:	ldr	r1, [r0]
   1c03c:	mov	r0, #4
   1c040:	blx	r1
   1c044:	mov	r1, #1
   1c048:	str	r0, [r4, #8]
   1c04c:	str	r1, [r4]
   1c050:	ldr	r1, [r4, #4]
   1c054:	cmp	r1, #0
   1c058:	rsbmi	r1, r1, #0
   1c05c:	cmp	r1, #2
   1c060:	movge	r1, #0
   1c064:	strge	r1, [r4, #4]
   1c068:	strge	r5, [r0]
   1c06c:	popge	{r4, r5, fp, pc}
   1c070:	str	r5, [r0]
   1c074:	pop	{r4, r5, fp, pc}
   1c078:	push	{r4, r5, fp, lr}
   1c07c:	add	fp, sp, #8
   1c080:	cmp	r1, #0
   1c084:	mov	r5, r0
   1c088:	moveq	r0, #0
   1c08c:	streq	r0, [r5, #4]
   1c090:	popeq	{r4, r5, fp, pc}
   1c094:	mov	r0, #1
   1c098:	mov	r4, r1
   1c09c:	str	r0, [r5, #4]
   1c0a0:	ldr	r1, [r5]
   1c0a4:	cmp	r1, #0
   1c0a8:	ble	1c0b8 <__assert_fail@plt+0xad98>
   1c0ac:	ldr	r0, [r5, #8]
   1c0b0:	str	r4, [r0]
   1c0b4:	pop	{r4, r5, fp, pc}
   1c0b8:	beq	1c0dc <__assert_fail@plt+0xadbc>
   1c0bc:	movw	r0, #8480	; 0x2120
   1c0c0:	lsl	r1, r1, #2
   1c0c4:	mov	r2, #4
   1c0c8:	movt	r0, #4
   1c0cc:	ldr	r3, [r0]
   1c0d0:	ldr	r0, [r5, #8]
   1c0d4:	blx	r3
   1c0d8:	b	1c0f0 <__assert_fail@plt+0xadd0>
   1c0dc:	movw	r0, #8476	; 0x211c
   1c0e0:	movt	r0, #4
   1c0e4:	ldr	r1, [r0]
   1c0e8:	mov	r0, #4
   1c0ec:	blx	r1
   1c0f0:	mov	r1, #1
   1c0f4:	str	r0, [r5, #8]
   1c0f8:	str	r1, [r5]
   1c0fc:	ldr	r1, [r5, #4]
   1c100:	cmp	r1, #0
   1c104:	rsbmi	r1, r1, #0
   1c108:	cmp	r1, #2
   1c10c:	movge	r1, #0
   1c110:	strge	r1, [r5, #4]
   1c114:	strge	r4, [r0]
   1c118:	popge	{r4, r5, fp, pc}
   1c11c:	str	r4, [r0]
   1c120:	pop	{r4, r5, fp, pc}
   1c124:	cmp	r0, r1
   1c128:	bxeq	lr
   1c12c:	push	{r4, r5, r6, r7, fp, lr}
   1c130:	add	fp, sp, #16
   1c134:	mov	r5, r1
   1c138:	ldr	r1, [r0]
   1c13c:	mov	r4, r0
   1c140:	ldr	r6, [r5, #4]
   1c144:	cmp	r6, #0
   1c148:	rsbmi	r6, r6, #0
   1c14c:	cmp	r6, r1
   1c150:	ble	1c188 <__assert_fail@plt+0xae68>
   1c154:	cmp	r6, #1
   1c158:	mov	r7, r6
   1c15c:	movle	r7, #1
   1c160:	cmp	r1, #0
   1c164:	beq	1c198 <__assert_fail@plt+0xae78>
   1c168:	movw	r0, #8480	; 0x2120
   1c16c:	lsl	r1, r1, #2
   1c170:	lsl	r2, r7, #2
   1c174:	movt	r0, #4
   1c178:	ldr	r3, [r0]
   1c17c:	ldr	r0, [r4, #8]
   1c180:	blx	r3
   1c184:	b	1c1ac <__assert_fail@plt+0xae8c>
   1c188:	ldr	r0, [r4, #8]
   1c18c:	cmp	r6, #1
   1c190:	bge	1c1d4 <__assert_fail@plt+0xaeb4>
   1c194:	b	1c23c <__assert_fail@plt+0xaf1c>
   1c198:	movw	r0, #8476	; 0x211c
   1c19c:	movt	r0, #4
   1c1a0:	ldr	r1, [r0]
   1c1a4:	lsl	r0, r7, #2
   1c1a8:	blx	r1
   1c1ac:	str	r0, [r4, #8]
   1c1b0:	str	r7, [r4]
   1c1b4:	ldr	r1, [r4, #4]
   1c1b8:	cmp	r1, #0
   1c1bc:	rsbmi	r1, r1, #0
   1c1c0:	cmp	r1, r7
   1c1c4:	movgt	r1, #0
   1c1c8:	strgt	r1, [r4, #4]
   1c1cc:	cmp	r6, #1
   1c1d0:	blt	1c23c <__assert_fail@plt+0xaf1c>
   1c1d4:	ldr	ip, [r5, #8]
   1c1d8:	mov	r2, #0
   1c1dc:	cmp	r6, #4
   1c1e0:	bcc	1c220 <__assert_fail@plt+0xaf00>
   1c1e4:	add	r1, ip, r6, lsl #2
   1c1e8:	cmp	r0, r1
   1c1ec:	addcc	r1, r0, r6, lsl #2
   1c1f0:	cmpcc	ip, r1
   1c1f4:	bcc	1c220 <__assert_fail@plt+0xaf00>
   1c1f8:	bic	r2, r6, #-2147483645	; 0x80000003
   1c1fc:	mov	r7, r0
   1c200:	mov	r1, ip
   1c204:	mov	r3, r2
   1c208:	vld1.32	{d16-d17}, [r1]!
   1c20c:	subs	r3, r3, #4
   1c210:	vst1.32	{d16-d17}, [r7]!
   1c214:	bne	1c208 <__assert_fail@plt+0xaee8>
   1c218:	cmp	r6, r2
   1c21c:	beq	1c23c <__assert_fail@plt+0xaf1c>
   1c220:	add	r1, ip, r2, lsl #2
   1c224:	add	r0, r0, r2, lsl #2
   1c228:	sub	r2, r6, r2
   1c22c:	ldr	r3, [r1], #4
   1c230:	subs	r2, r2, #1
   1c234:	str	r3, [r0], #4
   1c238:	bne	1c22c <__assert_fail@plt+0xaf0c>
   1c23c:	ldr	r0, [r5, #4]
   1c240:	str	r0, [r4, #4]
   1c244:	pop	{r4, r5, r6, r7, fp, lr}
   1c248:	bx	lr
   1c24c:	movw	r3, #1584	; 0x630
   1c250:	mov	r2, #0
   1c254:	movt	r3, #3
   1c258:	str	r2, [r0]
   1c25c:	stmib	r0, {r2, r3}
   1c260:	b	1bfbc <__assert_fail@plt+0xac9c>
   1c264:	push	{r4, r5, r6, sl, fp, lr}
   1c268:	add	fp, sp, #16
   1c26c:	mov	r4, r1
   1c270:	movw	r1, #1584	; 0x630
   1c274:	mov	r5, r0
   1c278:	mov	r0, #0
   1c27c:	cmp	r4, #0
   1c280:	movt	r1, #3
   1c284:	str	r0, [r5]
   1c288:	stmib	r5, {r0, r1}
   1c28c:	streq	r0, [r5, #4]
   1c290:	popeq	{r4, r5, r6, sl, fp, pc}
   1c294:	movw	r0, #8476	; 0x211c
   1c298:	mov	r6, #1
   1c29c:	str	r6, [r5, #4]
   1c2a0:	movt	r0, #4
   1c2a4:	ldr	r1, [r0]
   1c2a8:	mov	r0, #4
   1c2ac:	blx	r1
   1c2b0:	str	r0, [r5, #8]
   1c2b4:	str	r6, [r5]
   1c2b8:	ldr	r1, [r5, #4]
   1c2bc:	cmp	r1, #0
   1c2c0:	rsbmi	r1, r1, #0
   1c2c4:	cmp	r1, #2
   1c2c8:	movge	r1, #0
   1c2cc:	strge	r1, [r5, #4]
   1c2d0:	str	r4, [r0]
   1c2d4:	pop	{r4, r5, r6, sl, fp, pc}
   1c2d8:	push	{r4, r5, r6, r7, fp, lr}
   1c2dc:	add	fp, sp, #16
   1c2e0:	mov	r7, r1
   1c2e4:	mov	r4, r0
   1c2e8:	movw	r1, #1584	; 0x630
   1c2ec:	mov	r0, #0
   1c2f0:	cmp	r4, r7
   1c2f4:	movt	r1, #3
   1c2f8:	str	r0, [r4]
   1c2fc:	stmib	r4, {r0, r1}
   1c300:	popeq	{r4, r5, r6, r7, fp, pc}
   1c304:	ldr	r0, [r7, #4]
   1c308:	cmp	r0, #0
   1c30c:	mov	r6, r0
   1c310:	rsbmi	r6, r0, #0
   1c314:	cmp	r6, #1
   1c318:	blt	1c3c0 <__assert_fail@plt+0xb0a0>
   1c31c:	movw	r0, #8476	; 0x211c
   1c320:	movt	r0, #4
   1c324:	ldr	r1, [r0]
   1c328:	lsl	r0, r6, #2
   1c32c:	blx	r1
   1c330:	str	r0, [r4, #8]
   1c334:	str	r6, [r4]
   1c338:	mov	r2, #0
   1c33c:	ldr	r1, [r4, #4]
   1c340:	cmp	r1, #0
   1c344:	rsbmi	r1, r1, #0
   1c348:	cmp	r1, r6
   1c34c:	movgt	r1, #0
   1c350:	strgt	r1, [r4, #4]
   1c354:	cmp	r6, #4
   1c358:	ldr	ip, [r7, #8]
   1c35c:	bcc	1c3a0 <__assert_fail@plt+0xb080>
   1c360:	add	r1, ip, r6, lsl #2
   1c364:	cmp	r0, r1
   1c368:	bcs	1c378 <__assert_fail@plt+0xb058>
   1c36c:	add	r1, r0, r6, lsl #2
   1c370:	cmp	r1, ip
   1c374:	bhi	1c3a0 <__assert_fail@plt+0xb080>
   1c378:	bic	r2, r6, #-2147483645	; 0x80000003
   1c37c:	mov	r1, r0
   1c380:	mov	r5, ip
   1c384:	mov	r3, r2
   1c388:	vld1.32	{d16-d17}, [r5]!
   1c38c:	subs	r3, r3, #4
   1c390:	vst1.32	{d16-d17}, [r1]!
   1c394:	bne	1c388 <__assert_fail@plt+0xb068>
   1c398:	cmp	r6, r2
   1c39c:	beq	1c3bc <__assert_fail@plt+0xb09c>
   1c3a0:	add	r1, ip, r2, lsl #2
   1c3a4:	add	r0, r0, r2, lsl #2
   1c3a8:	sub	r2, r6, r2
   1c3ac:	ldr	r3, [r1], #4
   1c3b0:	subs	r2, r2, #1
   1c3b4:	str	r3, [r0], #4
   1c3b8:	bne	1c3ac <__assert_fail@plt+0xb08c>
   1c3bc:	ldr	r0, [r7, #4]
   1c3c0:	str	r0, [r4, #4]
   1c3c4:	pop	{r4, r5, r6, r7, fp, pc}
   1c3c8:	ldr	r3, [r0, #4]
   1c3cc:	mov	r1, r0
   1c3d0:	cmp	r3, #0
   1c3d4:	blt	1c414 <__assert_fail@plt+0xb0f4>
   1c3d8:	mov	r0, #0
   1c3dc:	cmp	r3, #1
   1c3e0:	bxgt	lr
   1c3e4:	cmp	r3, #0
   1c3e8:	mov	r3, #0
   1c3ec:	mov	r0, #0
   1c3f0:	mov	r2, #1
   1c3f4:	ldrne	r1, [r1, #8]
   1c3f8:	ldrne	r3, [r1]
   1c3fc:	mov	r1, #0
   1c400:	cmn	r3, #-2147483647	; 0x80000001
   1c404:	movwcc	r1, #1
   1c408:	cmp	r1, r3, lsr #31
   1c40c:	movcs	r0, r2
   1c410:	bx	lr
   1c414:	mov	r2, #0
   1c418:	cmn	r3, #1
   1c41c:	beq	1c428 <__assert_fail@plt+0xb108>
   1c420:	mov	r0, r2
   1c424:	bx	lr
   1c428:	ldr	r0, [r1, #8]
   1c42c:	mov	r1, #1
   1c430:	ldr	r0, [r0]
   1c434:	eor	r2, r1, r0, lsr #31
   1c438:	cmp	r0, #-2147483648	; 0x80000000
   1c43c:	subhi	r2, r2, #1
   1c440:	eor	r2, r1, r2, lsr #31
   1c444:	mov	r0, r2
   1c448:	bx	lr
   1c44c:	ldr	r3, [r0, #4]
   1c450:	mov	r2, r0
   1c454:	cmp	r1, #0
   1c458:	blt	1c498 <__assert_fail@plt+0xb178>
   1c45c:	cmp	r3, #0
   1c460:	mvnlt	r0, #0
   1c464:	bxlt	lr
   1c468:	mov	r0, #1
   1c46c:	cmp	r3, #1
   1c470:	bgt	1c4a4 <__assert_fail@plt+0xb184>
   1c474:	cmp	r3, #0
   1c478:	mov	r3, #0
   1c47c:	mov	r0, #0
   1c480:	ldrne	r2, [r2, #8]
   1c484:	ldrne	r3, [r2]
   1c488:	cmp	r3, r1
   1c48c:	movwhi	r0, #1
   1c490:	subcc	r0, r0, #1
   1c494:	bx	lr
   1c498:	mov	r0, #1
   1c49c:	cmn	r3, #1
   1c4a0:	ble	1c4a8 <__assert_fail@plt+0xb188>
   1c4a4:	bx	lr
   1c4a8:	mvn	r0, #0
   1c4ac:	bxne	lr
   1c4b0:	ldr	r0, [r2, #8]
   1c4b4:	rsb	r1, r1, #0
   1c4b8:	ldr	r2, [r0]
   1c4bc:	mov	r0, #0
   1c4c0:	cmp	r2, r1
   1c4c4:	movwcc	r0, #1
   1c4c8:	subhi	r0, r0, #1
   1c4cc:	bx	lr
   1c4d0:	ldr	r1, [r0, #4]
   1c4d4:	mov	r0, #0
   1c4d8:	cmp	r1, #2
   1c4dc:	movwcc	r0, #1
   1c4e0:	bx	lr
   1c4e4:	ldr	r3, [r0, #4]
   1c4e8:	mov	r1, r0
   1c4ec:	cmp	r3, #0
   1c4f0:	blt	1c530 <__assert_fail@plt+0xb210>
   1c4f4:	mov	r0, #0
   1c4f8:	cmp	r3, #1
   1c4fc:	bxgt	lr
   1c500:	cmp	r3, #0
   1c504:	mov	r3, #0
   1c508:	mov	r0, #0
   1c50c:	mov	r2, #1
   1c510:	ldrne	r1, [r1, #8]
   1c514:	ldrne	r3, [r1]
   1c518:	mov	r1, #0
   1c51c:	cmn	r3, #-2147483647	; 0x80000001
   1c520:	movwcc	r1, #1
   1c524:	cmp	r1, r3, lsr #31
   1c528:	movcs	r0, r2
   1c52c:	bx	lr
   1c530:	mov	r2, #0
   1c534:	cmn	r3, #1
   1c538:	beq	1c544 <__assert_fail@plt+0xb224>
   1c53c:	mov	r0, r2
   1c540:	bx	lr
   1c544:	ldr	r0, [r1, #8]
   1c548:	mov	r1, #1
   1c54c:	ldr	r0, [r0]
   1c550:	eor	r2, r1, r0, lsr #31
   1c554:	cmp	r0, #-2147483648	; 0x80000000
   1c558:	subhi	r2, r2, #1
   1c55c:	eor	r2, r1, r2, lsr #31
   1c560:	mov	r0, r2
   1c564:	bx	lr
   1c568:	ldr	r1, [r0, #4]
   1c56c:	mov	r0, #0
   1c570:	cmp	r1, #2
   1c574:	movwcc	r0, #1
   1c578:	bx	lr
   1c57c:	ldr	r3, [r0, #4]
   1c580:	mov	ip, r0
   1c584:	mov	r0, #1
   1c588:	cmp	r3, #0
   1c58c:	mov	r2, r3
   1c590:	rsbmi	r2, r3, #0
   1c594:	cmp	r2, #1
   1c598:	bxgt	lr
   1c59c:	cmp	r3, #0
   1c5a0:	mov	r2, #0
   1c5a4:	mov	r0, #0
   1c5a8:	ldrne	r2, [ip, #8]
   1c5ac:	ldrne	r2, [r2]
   1c5b0:	cmp	r2, r1
   1c5b4:	movwhi	r0, #1
   1c5b8:	subcc	r0, r0, #1
   1c5bc:	bx	lr
   1c5c0:	ldr	r3, [r0, #4]
   1c5c4:	cmp	r3, #0
   1c5c8:	blt	1c5fc <__assert_fail@plt+0xb2dc>
   1c5cc:	mov	r1, #0
   1c5d0:	cmp	r3, #1
   1c5d4:	bgt	1c5f4 <__assert_fail@plt+0xb2d4>
   1c5d8:	mov	r2, #1
   1c5dc:	cmp	r3, #0
   1c5e0:	beq	1c628 <__assert_fail@plt+0xb308>
   1c5e4:	ldr	r0, [r0, #8]
   1c5e8:	ldr	r0, [r0]
   1c5ec:	cmp	r0, #32768	; 0x8000
   1c5f0:	movcc	r1, r2
   1c5f4:	mov	r0, r1
   1c5f8:	bx	lr
   1c5fc:	mov	r2, #0
   1c600:	cmn	r3, #1
   1c604:	bne	1c628 <__assert_fail@plt+0xb308>
   1c608:	ldr	r0, [r0, #8]
   1c60c:	mov	r1, #0
   1c610:	ldr	r0, [r0]
   1c614:	cmp	r0, #32768	; 0x8000
   1c618:	mov	r0, #1
   1c61c:	movwcc	r1, #1
   1c620:	subhi	r1, r1, #1
   1c624:	eor	r2, r0, r1, lsr #31
   1c628:	mov	r1, r2
   1c62c:	mov	r0, r1
   1c630:	bx	lr
   1c634:	ldr	r2, [r0, #4]
   1c638:	mov	r1, r0
   1c63c:	mov	r0, #0
   1c640:	cmp	r2, #0
   1c644:	bxlt	lr
   1c648:	cmp	r2, #1
   1c64c:	bgt	1c670 <__assert_fail@plt+0xb350>
   1c650:	cmp	r2, #0
   1c654:	moveq	r0, #1
   1c658:	bxeq	lr
   1c65c:	ldr	r0, [r1, #8]
   1c660:	ldr	r1, [r0]
   1c664:	mov	r0, #0
   1c668:	cmp	r1, #65536	; 0x10000
   1c66c:	movwcc	r0, #1
   1c670:	bx	lr
   1c674:	ldr	r1, [r0, #4]
   1c678:	cmp	r1, #0
   1c67c:	beq	1c698 <__assert_fail@plt+0xb378>
   1c680:	ldr	r0, [r0, #8]
   1c684:	cmn	r1, #1
   1c688:	ldr	r0, [r0]
   1c68c:	ble	1c6a4 <__assert_fail@plt+0xb384>
   1c690:	bic	r0, r0, #-2147483648	; 0x80000000
   1c694:	bx	lr
   1c698:	mov	r0, #0
   1c69c:	bic	r0, r0, #-2147483648	; 0x80000000
   1c6a0:	bx	lr
   1c6a4:	sub	r0, r0, #1
   1c6a8:	mvn	r1, #-2147483648	; 0x80000000
   1c6ac:	orr	r0, r0, #-2147483648	; 0x80000000
   1c6b0:	eor	r0, r0, r1
   1c6b4:	bx	lr
   1c6b8:	ldr	r1, [r0, #4]
   1c6bc:	cmp	r1, #0
   1c6c0:	moveq	r0, #0
   1c6c4:	ldrne	r0, [r0, #8]
   1c6c8:	ldrne	r0, [r0]
   1c6cc:	bx	lr
   1c6d0:	ldr	r0, [r0, #4]
   1c6d4:	cmp	r0, #0
   1c6d8:	rsbmi	r0, r0, #0
   1c6dc:	bx	lr
   1c6e0:	mov	r2, r0
   1c6e4:	mov	r0, #0
   1c6e8:	cmp	r1, #0
   1c6ec:	bxlt	lr
   1c6f0:	ldr	r3, [r2, #4]
   1c6f4:	cmp	r3, #0
   1c6f8:	rsbmi	r3, r3, #0
   1c6fc:	cmp	r3, r1
   1c700:	ldrgt	r0, [r2, #8]
   1c704:	ldrgt	r0, [r0, r1, lsl #2]
   1c708:	bx	lr
   1c70c:	push	{r4, r5, fp, lr}
   1c710:	add	fp, sp, #8
   1c714:	cmp	r1, #0
   1c718:	mov	r4, r0
   1c71c:	mov	r5, #1
   1c720:	subne	r1, r1, #1
   1c724:	add	r0, r5, r1, lsr #5
   1c728:	ldr	r1, [r4]
   1c72c:	cmp	r0, #1
   1c730:	movhi	r5, r0
   1c734:	cmp	r1, #0
   1c738:	beq	1c75c <__assert_fail@plt+0xb43c>
   1c73c:	movw	r0, #8480	; 0x2120
   1c740:	lsl	r1, r1, #2
   1c744:	lsl	r2, r5, #2
   1c748:	movt	r0, #4
   1c74c:	ldr	r3, [r0]
   1c750:	ldr	r0, [r4, #8]
   1c754:	blx	r3
   1c758:	b	1c770 <__assert_fail@plt+0xb450>
   1c75c:	movw	r0, #8476	; 0x211c
   1c760:	movt	r0, #4
   1c764:	ldr	r1, [r0]
   1c768:	lsl	r0, r5, #2
   1c76c:	blx	r1
   1c770:	str	r0, [r4, #8]
   1c774:	str	r5, [r4]
   1c778:	ldr	r0, [r4, #4]
   1c77c:	cmp	r0, #0
   1c780:	rsbmi	r0, r0, #0
   1c784:	cmp	r0, r5
   1c788:	movgt	r0, #0
   1c78c:	strgt	r0, [r4, #4]
   1c790:	pop	{r4, r5, fp, pc}
   1c794:	ldr	r0, [r0, #8]
   1c798:	bx	lr
   1c79c:	push	{r4, r5, fp, lr}
   1c7a0:	add	fp, sp, #8
   1c7a4:	cmp	r1, #0
   1c7a8:	ble	1c834 <__assert_fail@plt+0xb514>
   1c7ac:	mov	r5, r1
   1c7b0:	ldr	r1, [r0]
   1c7b4:	mov	r4, r0
   1c7b8:	cmp	r1, r5
   1c7bc:	bge	1c7f0 <__assert_fail@plt+0xb4d0>
   1c7c0:	cmp	r5, #1
   1c7c4:	movle	r5, #1
   1c7c8:	cmp	r1, #0
   1c7cc:	beq	1c7f8 <__assert_fail@plt+0xb4d8>
   1c7d0:	movw	r0, #8480	; 0x2120
   1c7d4:	lsl	r1, r1, #2
   1c7d8:	lsl	r2, r5, #2
   1c7dc:	movt	r0, #4
   1c7e0:	ldr	r3, [r0]
   1c7e4:	ldr	r0, [r4, #8]
   1c7e8:	blx	r3
   1c7ec:	b	1c80c <__assert_fail@plt+0xb4ec>
   1c7f0:	ldr	r0, [r4, #8]
   1c7f4:	pop	{r4, r5, fp, pc}
   1c7f8:	movw	r0, #8476	; 0x211c
   1c7fc:	movt	r0, #4
   1c800:	ldr	r1, [r0]
   1c804:	lsl	r0, r5, #2
   1c808:	blx	r1
   1c80c:	str	r0, [r4, #8]
   1c810:	str	r5, [r4]
   1c814:	ldr	r1, [r4, #4]
   1c818:	cmp	r1, #0
   1c81c:	rsbmi	r1, r1, #0
   1c820:	cmp	r1, r5
   1c824:	movgt	r1, #0
   1c828:	strgt	r1, [r4, #4]
   1c82c:	popgt	{r4, r5, fp, pc}
   1c830:	pop	{r4, r5, fp, pc}
   1c834:	movw	r0, #4914	; 0x1332
   1c838:	movw	r1, #1588	; 0x634
   1c83c:	movw	r3, #2471	; 0x9a7
   1c840:	movw	r2, #1663	; 0x67f
   1c844:	movt	r0, #3
   1c848:	movt	r1, #3
   1c84c:	movt	r3, #3
   1c850:	bl	11320 <__assert_fail@plt>
   1c854:	push	{r4, r5, fp, lr}
   1c858:	add	fp, sp, #8
   1c85c:	cmp	r1, #0
   1c860:	ble	1c8ec <__assert_fail@plt+0xb5cc>
   1c864:	mov	r5, r1
   1c868:	ldr	r1, [r0]
   1c86c:	mov	r4, r0
   1c870:	cmp	r1, r5
   1c874:	bge	1c8a8 <__assert_fail@plt+0xb588>
   1c878:	cmp	r5, #1
   1c87c:	movle	r5, #1
   1c880:	cmp	r1, #0
   1c884:	beq	1c8b0 <__assert_fail@plt+0xb590>
   1c888:	movw	r0, #8480	; 0x2120
   1c88c:	lsl	r1, r1, #2
   1c890:	lsl	r2, r5, #2
   1c894:	movt	r0, #4
   1c898:	ldr	r3, [r0]
   1c89c:	ldr	r0, [r4, #8]
   1c8a0:	blx	r3
   1c8a4:	b	1c8c4 <__assert_fail@plt+0xb5a4>
   1c8a8:	ldr	r0, [r4, #8]
   1c8ac:	pop	{r4, r5, fp, pc}
   1c8b0:	movw	r0, #8476	; 0x211c
   1c8b4:	movt	r0, #4
   1c8b8:	ldr	r1, [r0]
   1c8bc:	lsl	r0, r5, #2
   1c8c0:	blx	r1
   1c8c4:	str	r0, [r4, #8]
   1c8c8:	str	r5, [r4]
   1c8cc:	ldr	r1, [r4, #4]
   1c8d0:	cmp	r1, #0
   1c8d4:	rsbmi	r1, r1, #0
   1c8d8:	cmp	r1, r5
   1c8dc:	movgt	r1, #0
   1c8e0:	strgt	r1, [r4, #4]
   1c8e4:	popgt	{r4, r5, fp, pc}
   1c8e8:	pop	{r4, r5, fp, pc}
   1c8ec:	movw	r0, #4914	; 0x1332
   1c8f0:	movw	r1, #1588	; 0x634
   1c8f4:	movw	r3, #2471	; 0x9a7
   1c8f8:	movw	r2, #1663	; 0x67f
   1c8fc:	movt	r0, #3
   1c900:	movt	r1, #3
   1c904:	movt	r3, #3
   1c908:	bl	11320 <__assert_fail@plt>
   1c90c:	push	{fp, lr}
   1c910:	mov	fp, sp
   1c914:	ldr	r2, [r0, #8]
   1c918:	cmp	r1, #0
   1c91c:	mov	r3, r1
   1c920:	rsbmi	r3, r1, #0
   1c924:	sub	ip, r2, #4
   1c928:	mov	r2, r3
   1c92c:	cmp	r3, #1
   1c930:	blt	1c944 <__assert_fail@plt+0xb624>
   1c934:	ldr	lr, [ip, r2, lsl #2]
   1c938:	sub	r3, r2, #1
   1c93c:	cmp	lr, #0
   1c940:	beq	1c928 <__assert_fail@plt+0xb608>
   1c944:	cmp	r1, #0
   1c948:	rsblt	r2, r2, #0
   1c94c:	str	r2, [r0, #4]
   1c950:	pop	{fp, pc}
   1c954:	push	{fp, lr}
   1c958:	mov	fp, sp
   1c95c:	mov	r3, #0
   1c960:	cmp	r2, #0
   1c964:	sub	ip, r1, #4
   1c968:	str	r3, [r0]
   1c96c:	mov	r3, r2
   1c970:	str	r2, [r0, #4]
   1c974:	str	r1, [r0, #8]
   1c978:	rsbmi	r3, r2, #0
   1c97c:	mov	r1, r3
   1c980:	cmp	r3, #1
   1c984:	blt	1c998 <__assert_fail@plt+0xb678>
   1c988:	ldr	lr, [ip, r1, lsl #2]
   1c98c:	sub	r3, r1, #1
   1c990:	cmp	lr, #0
   1c994:	beq	1c97c <__assert_fail@plt+0xb65c>
   1c998:	cmp	r2, #0
   1c99c:	rsblt	r1, r1, #0
   1c9a0:	str	r1, [r0, #4]
   1c9a4:	pop	{fp, pc}
   1c9a8:	push	{r4, r5, r6, sl, fp, lr}
   1c9ac:	add	fp, sp, #16
   1c9b0:	vpush	{d8-d11}
   1c9b4:	vcmpe.f64	d0, d0
   1c9b8:	mov	r4, r0
   1c9bc:	mov	r5, #0
   1c9c0:	vmrs	APSR_nzcv, fpscr
   1c9c4:	bvs	1cb20 <__assert_fail@plt+0xb800>
   1c9c8:	vmov.f64	d16, #96	; 0x3f000000  0.5
   1c9cc:	vmov.f64	d8, d0
   1c9d0:	vmul.f64	d16, d0, d16
   1c9d4:	vcmp.f64	d16, d0
   1c9d8:	vmrs	APSR_nzcv, fpscr
   1c9dc:	beq	1cb20 <__assert_fail@plt+0xb800>
   1c9e0:	vcmpe.f64	d8, #0.0
   1c9e4:	vneg.f64	d16, d8
   1c9e8:	vmov.f64	d11, d8
   1c9ec:	vmov.f64	d9, #112	; 0x3f800000  1.0
   1c9f0:	vmrs	APSR_nzcv, fpscr
   1c9f4:	vmovmi.f64	d11, d16
   1c9f8:	vcmpe.f64	d11, d9
   1c9fc:	vmrs	APSR_nzcv, fpscr
   1ca00:	bmi	1cb20 <__assert_fail@plt+0xb800>
   1ca04:	vldr	d10, [pc, #356]	; 1cb70 <__assert_fail@plt+0xb850>
   1ca08:	mov	r5, #1
   1ca0c:	vcmpe.f64	d11, d10
   1ca10:	vmrs	APSR_nzcv, fpscr
   1ca14:	blt	1ca34 <__assert_fail@plt+0xb714>
   1ca18:	vldr	d16, [pc, #344]	; 1cb78 <__assert_fail@plt+0xb858>
   1ca1c:	mov	r5, #1
   1ca20:	vmul.f64	d11, d11, d16
   1ca24:	add	r5, r5, #1
   1ca28:	vcmpe.f64	d11, d10
   1ca2c:	vmrs	APSR_nzcv, fpscr
   1ca30:	bge	1ca20 <__assert_fail@plt+0xb700>
   1ca34:	ldr	r1, [r4]
   1ca38:	cmp	r5, r1
   1ca3c:	ble	1ca74 <__assert_fail@plt+0xb754>
   1ca40:	cmp	r5, #1
   1ca44:	mov	r6, r5
   1ca48:	movls	r6, #1
   1ca4c:	cmp	r1, #0
   1ca50:	beq	1ca7c <__assert_fail@plt+0xb75c>
   1ca54:	movw	r0, #8480	; 0x2120
   1ca58:	lsl	r1, r1, #2
   1ca5c:	lsl	r2, r6, #2
   1ca60:	movt	r0, #4
   1ca64:	ldr	r3, [r0]
   1ca68:	ldr	r0, [r4, #8]
   1ca6c:	blx	r3
   1ca70:	b	1ca90 <__assert_fail@plt+0xb770>
   1ca74:	ldr	r0, [r4, #8]
   1ca78:	b	1cab0 <__assert_fail@plt+0xb790>
   1ca7c:	movw	r0, #8476	; 0x211c
   1ca80:	movt	r0, #4
   1ca84:	ldr	r1, [r0]
   1ca88:	lsl	r0, r6, #2
   1ca8c:	blx	r1
   1ca90:	str	r0, [r4, #8]
   1ca94:	str	r6, [r4]
   1ca98:	ldr	r1, [r4, #4]
   1ca9c:	cmp	r1, #0
   1caa0:	rsbmi	r1, r1, #0
   1caa4:	cmp	r1, r6
   1caa8:	movgt	r1, #0
   1caac:	strgt	r1, [r4, #4]
   1cab0:	vcvt.u32.f64	s0, d11
   1cab4:	vcvt.f64.u32	d16, s0
   1cab8:	vsub.f64	d16, d11, d16
   1cabc:	vcmpe.f64	d16, d9
   1cac0:	vmrs	APSR_nzcv, fpscr
   1cac4:	bpl	1cb4c <__assert_fail@plt+0xb82c>
   1cac8:	cmp	r5, #2
   1cacc:	vmov	r1, s0
   1cad0:	add	r2, r0, r5, lsl #2
   1cad4:	str	r1, [r2, #-4]
   1cad8:	blt	1cb14 <__assert_fail@plt+0xb7f4>
   1cadc:	sub	r1, r5, #2
   1cae0:	vmul.f64	d16, d16, d10
   1cae4:	vcvt.u32.f64	s0, d16
   1cae8:	vcvt.f64.u32	d17, s0
   1caec:	vsub.f64	d16, d16, d17
   1caf0:	vcmpe.f64	d16, d9
   1caf4:	vmrs	APSR_nzcv, fpscr
   1caf8:	bpl	1cb2c <__assert_fail@plt+0xb80c>
   1cafc:	vmov	r2, s0
   1cb00:	cmp	r1, #0
   1cb04:	str	r2, [r0, r1, lsl #2]
   1cb08:	sub	r2, r1, #1
   1cb0c:	mov	r1, r2
   1cb10:	bgt	1cae0 <__assert_fail@plt+0xb7c0>
   1cb14:	vcmpe.f64	d8, #0.0
   1cb18:	vmrs	APSR_nzcv, fpscr
   1cb1c:	rsbmi	r5, r5, #0
   1cb20:	str	r5, [r4, #4]
   1cb24:	vpop	{d8-d11}
   1cb28:	pop	{r4, r5, r6, sl, fp, pc}
   1cb2c:	movw	r0, #2522	; 0x9da
   1cb30:	movw	r1, #1588	; 0x634
   1cb34:	movw	r3, #2530	; 0x9e2
   1cb38:	mov	r2, #1744	; 0x6d0
   1cb3c:	movt	r0, #3
   1cb40:	movt	r1, #3
   1cb44:	movt	r3, #3
   1cb48:	bl	11320 <__assert_fail@plt>
   1cb4c:	movw	r0, #2522	; 0x9da
   1cb50:	movw	r1, #1588	; 0x634
   1cb54:	movw	r3, #2530	; 0x9e2
   1cb58:	movw	r2, #1736	; 0x6c8
   1cb5c:	movt	r0, #3
   1cb60:	movt	r1, #3
   1cb64:	movt	r3, #3
   1cb68:	bl	11320 <__assert_fail@plt>
   1cb6c:	nop	{0}
   1cb70:	andeq	r0, r0, r0
   1cb74:	mvnsmi	r0, r0
   1cb78:	andeq	r0, r0, r0
   1cb7c:	ldclcc	0, cr0, [r0]
   1cb80:	movw	r2, #1584	; 0x630
   1cb84:	mov	r1, #0
   1cb88:	movt	r2, #3
   1cb8c:	str	r1, [r0]
   1cb90:	stmib	r0, {r1, r2}
   1cb94:	b	1c9a8 <__assert_fail@plt+0xb688>
   1cb98:	ldr	ip, [r0, #4]
   1cb9c:	cmp	ip, #0
   1cba0:	mov	r2, ip
   1cba4:	rsbmi	r2, ip, #0
   1cba8:	cmp	r2, #0
   1cbac:	beq	1cc8c <__assert_fail@plt+0xb96c>
   1cbb0:	push	{r4, sl, fp, lr}
   1cbb4:	add	fp, sp, #8
   1cbb8:	ldr	r0, [r0, #8]
   1cbbc:	mov	r3, #0
   1cbc0:	add	r1, r0, r2, lsl #2
   1cbc4:	ldr	lr, [r1, #-4]
   1cbc8:	cmp	r3, lr, lsr #24
   1cbcc:	mov	r1, lr
   1cbd0:	bne	1cbec <__assert_fail@plt+0xb8cc>
   1cbd4:	mov	r3, #0
   1cbd8:	mov	r1, lr
   1cbdc:	lsl	r1, r1, #8
   1cbe0:	add	r3, r3, #8
   1cbe4:	cmp	r1, #16777216	; 0x1000000
   1cbe8:	bcc	1cbdc <__assert_fail@plt+0xb8bc>
   1cbec:	cmp	r1, #0
   1cbf0:	blt	1cc04 <__assert_fail@plt+0xb8e4>
   1cbf4:	lsl	r1, r1, #1
   1cbf8:	add	r3, r3, #1
   1cbfc:	cmn	r1, #1
   1cc00:	bgt	1cbf4 <__assert_fail@plt+0xb8d4>
   1cc04:	add	r4, r3, #21
   1cc08:	cmn	r4, #1
   1cc0c:	bgt	1cc20 <__assert_fail@plt+0xb900>
   1cc10:	mvn	r1, #20
   1cc14:	sub	r1, r1, r3
   1cc18:	mvn	r3, #0
   1cc1c:	and	lr, lr, r3, lsl r1
   1cc20:	vmov	s0, lr
   1cc24:	cmp	r2, #2
   1cc28:	vcvt.f64.u32	d16, s0
   1cc2c:	blt	1cc7c <__assert_fail@plt+0xb95c>
   1cc30:	vldr	d17, [pc, #96]	; 1cc98 <__assert_fail@plt+0xb978>
   1cc34:	sub	r2, r2, #2
   1cc38:	mvn	lr, #0
   1cc3c:	vmul.f64	d16, d16, d17
   1cc40:	cmp	r4, #1
   1cc44:	blt	1cc6c <__assert_fail@plt+0xb94c>
   1cc48:	ldr	r3, [r0, r2, lsl #2]
   1cc4c:	sub	r1, r4, #32
   1cc50:	cmn	r1, #1
   1cc54:	rsble	r4, r4, #32
   1cc58:	andle	r3, r3, lr, lsl r4
   1cc5c:	mov	r4, r1
   1cc60:	vmov	s0, r3
   1cc64:	vcvt.f64.u32	d18, s0
   1cc68:	vadd.f64	d16, d16, d18
   1cc6c:	sub	r1, r2, #1
   1cc70:	cmp	r2, #0
   1cc74:	mov	r2, r1
   1cc78:	bgt	1cc3c <__assert_fail@plt+0xb91c>
   1cc7c:	vneg.f64	d17, d16
   1cc80:	cmp	ip, #0
   1cc84:	vselge.f64	d0, d16, d17
   1cc88:	pop	{r4, sl, fp, pc}
   1cc8c:	vmov.i32	d0, #0	; 0x00000000
   1cc90:	bx	lr
   1cc94:	nop	{0}
   1cc98:	andeq	r0, r0, r0
   1cc9c:	mvnsmi	r0, r0
   1cca0:	ldr	r2, [r0, #4]
   1cca4:	vcmpe.f64	d0, #0.0
   1cca8:	vneg.f64	d16, d0
   1ccac:	vmrs	APSR_nzcv, fpscr
   1ccb0:	vselge.f64	d16, d0, d16
   1ccb4:	cmp	r2, #0
   1ccb8:	beq	1cd3c <__assert_fail@plt+0xba1c>
   1ccbc:	rsbmi	r2, r2, #0
   1ccc0:	mov	r1, r0
   1ccc4:	cmp	r2, #2
   1ccc8:	blt	1cce0 <__assert_fail@plt+0xb9c0>
   1cccc:	vldr	d17, [pc, #124]	; 1cd50 <__assert_fail@plt+0xba30>
   1ccd0:	sub	r0, r2, #1
   1ccd4:	subs	r0, r0, #1
   1ccd8:	vmul.f64	d16, d16, d17
   1ccdc:	bne	1ccd4 <__assert_fail@plt+0xb9b4>
   1cce0:	vldr	d17, [pc, #112]	; 1cd58 <__assert_fail@plt+0xba38>
   1cce4:	mvn	r0, #0
   1cce8:	vcmpe.f64	d16, d17
   1ccec:	vmrs	APSR_nzcv, fpscr
   1ccf0:	bge	1cd4c <__assert_fail@plt+0xba2c>
   1ccf4:	cmp	r2, #1
   1ccf8:	blt	1cd3c <__assert_fail@plt+0xba1c>
   1ccfc:	ldr	r1, [r1, #8]
   1cd00:	sub	ip, r1, #4
   1cd04:	vcvt.u32.f64	s0, d16
   1cd08:	ldr	r3, [ip, r2, lsl #2]
   1cd0c:	vmov	r1, s0
   1cd10:	cmp	r3, r1
   1cd14:	movhi	r0, #1
   1cd18:	bxhi	lr
   1cd1c:	bxcc	lr
   1cd20:	sub	r2, r2, #1
   1cd24:	vcvt.f64.u32	d18, s0
   1cd28:	vsub.f64	d16, d16, d18
   1cd2c:	add	r1, r2, #1
   1cd30:	vmul.f64	d16, d16, d17
   1cd34:	cmp	r1, #1
   1cd38:	bgt	1cd04 <__assert_fail@plt+0xb9e4>
   1cd3c:	vcmpe.f64	d16, #0.0
   1cd40:	mov	r0, #0
   1cd44:	vmrs	APSR_nzcv, fpscr
   1cd48:	mvngt	r0, #0
   1cd4c:	bx	lr
   1cd50:	andeq	r0, r0, r0
   1cd54:	ldclcc	0, cr0, [r0]
   1cd58:	andeq	r0, r0, r0
   1cd5c:	mvnsmi	r0, r0
   1cd60:	ldr	r2, [r0, #4]
   1cd64:	mov	r1, r0
   1cd68:	cmn	r2, #1
   1cd6c:	ble	1ce14 <__assert_fail@plt+0xbaf4>
   1cd70:	vcmpe.f64	d0, #0.0
   1cd74:	mov	r0, #1
   1cd78:	vmrs	APSR_nzcv, fpscr
   1cd7c:	bmi	1cea8 <__assert_fail@plt+0xbb88>
   1cd80:	vneg.f64	d16, d0
   1cd84:	vselge.f64	d16, d0, d16
   1cd88:	cmp	r2, #0
   1cd8c:	beq	1ce00 <__assert_fail@plt+0xbae0>
   1cd90:	cmp	r2, #2
   1cd94:	blt	1cdac <__assert_fail@plt+0xba8c>
   1cd98:	vldr	d17, [pc, #288]	; 1cec0 <__assert_fail@plt+0xbba0>
   1cd9c:	sub	r3, r2, #1
   1cda0:	subs	r3, r3, #1
   1cda4:	vmul.f64	d16, d16, d17
   1cda8:	bne	1cda0 <__assert_fail@plt+0xba80>
   1cdac:	vldr	d17, [pc, #276]	; 1cec8 <__assert_fail@plt+0xbba8>
   1cdb0:	vcmpe.f64	d16, d17
   1cdb4:	vmrs	APSR_nzcv, fpscr
   1cdb8:	bge	1ceac <__assert_fail@plt+0xbb8c>
   1cdbc:	cmp	r2, #1
   1cdc0:	blt	1ce00 <__assert_fail@plt+0xbae0>
   1cdc4:	ldr	r1, [r1, #8]
   1cdc8:	sub	ip, r1, #4
   1cdcc:	vcvt.u32.f64	s0, d16
   1cdd0:	ldr	r3, [ip, r2, lsl #2]
   1cdd4:	vmov	r1, s0
   1cdd8:	cmp	r3, r1
   1cddc:	bxhi	lr
   1cde0:	bcc	1ceac <__assert_fail@plt+0xbb8c>
   1cde4:	sub	r2, r2, #1
   1cde8:	vcvt.f64.u32	d18, s0
   1cdec:	vsub.f64	d16, d16, d18
   1cdf0:	add	r1, r2, #1
   1cdf4:	vmul.f64	d16, d16, d17
   1cdf8:	cmp	r1, #1
   1cdfc:	bgt	1cdcc <__assert_fail@plt+0xbaac>
   1ce00:	vcmpe.f64	d16, #0.0
   1ce04:	mov	r0, #0
   1ce08:	vmrs	APSR_nzcv, fpscr
   1ce0c:	mvngt	r0, #0
   1ce10:	b	1cea8 <__assert_fail@plt+0xbb88>
   1ce14:	vcmpe.f64	d0, #0.0
   1ce18:	mvn	r0, #0
   1ce1c:	vmrs	APSR_nzcv, fpscr
   1ce20:	bge	1cea8 <__assert_fail@plt+0xbb88>
   1ce24:	vneg.f64	d16, d0
   1ce28:	cmn	r2, #2
   1ce2c:	bgt	1ce44 <__assert_fail@plt+0xbb24>
   1ce30:	vldr	d17, [pc, #136]	; 1cec0 <__assert_fail@plt+0xbba0>
   1ce34:	mvn	r3, r2
   1ce38:	subs	r3, r3, #1
   1ce3c:	vmul.f64	d16, d16, d17
   1ce40:	bne	1ce38 <__assert_fail@plt+0xbb18>
   1ce44:	vldr	d17, [pc, #124]	; 1cec8 <__assert_fail@plt+0xbba8>
   1ce48:	vcmpe.f64	d16, d17
   1ce4c:	vmrs	APSR_nzcv, fpscr
   1ce50:	bge	1ceb4 <__assert_fail@plt+0xbb94>
   1ce54:	ldr	ip, [r1, #8]
   1ce58:	mvn	r2, r2
   1ce5c:	vcvt.u32.f64	s0, d16
   1ce60:	ldr	r3, [ip, r2, lsl #2]
   1ce64:	vmov	r1, s0
   1ce68:	cmp	r3, r1
   1ce6c:	bhi	1cea8 <__assert_fail@plt+0xbb88>
   1ce70:	bcc	1ceb4 <__assert_fail@plt+0xbb94>
   1ce74:	vcvt.f64.u32	d18, s0
   1ce78:	sub	r1, r2, #1
   1ce7c:	add	r2, r2, #1
   1ce80:	vsub.f64	d16, d16, d18
   1ce84:	cmp	r2, #1
   1ce88:	mov	r2, r1
   1ce8c:	vmul.f64	d16, d16, d17
   1ce90:	bgt	1ce5c <__assert_fail@plt+0xbb3c>
   1ce94:	vcmpe.f64	d16, #0.0
   1ce98:	mov	r0, #0
   1ce9c:	vmrs	APSR_nzcv, fpscr
   1cea0:	movwgt	r0, #1
   1cea4:	bx	lr
   1cea8:	bx	lr
   1ceac:	mvn	r0, #0
   1ceb0:	bx	lr
   1ceb4:	mov	r0, #1
   1ceb8:	bx	lr
   1cebc:	nop	{0}
   1cec0:	andeq	r0, r0, r0
   1cec4:	ldclcc	0, cr0, [r0]
   1cec8:	andeq	r0, r0, r0
   1cecc:	mvnsmi	r0, r0
   1ced0:	ldr	r1, [r0, #4]
   1ced4:	mov	r2, #1
   1ced8:	asr	r0, r1, #31
   1cedc:	cmp	r1, #0
   1cee0:	addgt	r0, r2, r1, asr #31
   1cee4:	bx	lr
   1cee8:	ldr	r3, [r0, #4]
   1ceec:	cmp	r3, #0
   1cef0:	mvnlt	r0, #0
   1cef4:	bxlt	lr
   1cef8:	mov	r2, r0
   1cefc:	mov	r0, #1
   1cf00:	cmp	r3, #1
   1cf04:	bxgt	lr
   1cf08:	cmp	r3, #0
   1cf0c:	mov	r3, #0
   1cf10:	mov	r0, #0
   1cf14:	ldrne	r2, [r2, #8]
   1cf18:	ldrne	r3, [r2]
   1cf1c:	cmp	r3, r1
   1cf20:	movwhi	r0, #1
   1cf24:	subcc	r0, r0, #1
   1cf28:	bx	lr
   1cf2c:	ldr	r3, [r1, #4]
   1cf30:	ldr	r2, [r0, #4]
   1cf34:	cmp	r2, r3
   1cf38:	bne	1cf78 <__assert_fail@plt+0xbc58>
   1cf3c:	cmp	r2, #0
   1cf40:	blt	1cf84 <__assert_fail@plt+0xbc64>
   1cf44:	ldr	r1, [r1, #8]
   1cf48:	ldr	r0, [r0, #8]
   1cf4c:	sub	ip, r0, #4
   1cf50:	sub	r1, r1, #4
   1cf54:	cmp	r2, #1
   1cf58:	blt	1cfc4 <__assert_fail@plt+0xbca4>
   1cf5c:	sub	r3, r2, #1
   1cf60:	ldr	r0, [r1, r2, lsl #2]
   1cf64:	ldr	r2, [ip, r2, lsl #2]
   1cf68:	cmp	r2, r0
   1cf6c:	mov	r2, r3
   1cf70:	beq	1cf54 <__assert_fail@plt+0xbc34>
   1cf74:	b	1cfb8 <__assert_fail@plt+0xbc98>
   1cf78:	mov	r0, #1
   1cf7c:	mvnlt	r0, #0
   1cf80:	bx	lr
   1cf84:	ldr	r0, [r0, #8]
   1cf88:	ldr	r1, [r1, #8]
   1cf8c:	rsb	r2, r2, #0
   1cf90:	sub	ip, r1, #4
   1cf94:	sub	r0, r0, #4
   1cf98:	cmp	r2, #1
   1cf9c:	blt	1cfc4 <__assert_fail@plt+0xbca4>
   1cfa0:	sub	r3, r2, #1
   1cfa4:	ldr	r1, [r0, r2, lsl #2]
   1cfa8:	ldr	r2, [ip, r2, lsl #2]
   1cfac:	cmp	r2, r1
   1cfb0:	mov	r2, r3
   1cfb4:	beq	1cf98 <__assert_fail@plt+0xbc78>
   1cfb8:	mvn	r0, #0
   1cfbc:	movwhi	r0, #1
   1cfc0:	bx	lr
   1cfc4:	mov	r0, #0
   1cfc8:	bx	lr
   1cfcc:	ldr	r3, [r1, #4]
   1cfd0:	ldr	r2, [r1, #8]
   1cfd4:	ldr	r1, [r0, #4]
   1cfd8:	ldr	r0, [r0, #8]
   1cfdc:	cmp	r3, #0
   1cfe0:	rsbmi	r3, r3, #0
   1cfe4:	cmp	r1, #0
   1cfe8:	rsbmi	r1, r1, #0
   1cfec:	cmp	r1, r3
   1cff0:	bne	1d02c <__assert_fail@plt+0xbd0c>
   1cff4:	sub	ip, r0, #4
   1cff8:	sub	r2, r2, #4
   1cffc:	cmp	r1, #1
   1d000:	movlt	r0, #0
   1d004:	bxlt	lr
   1d008:	sub	r3, r1, #1
   1d00c:	ldr	r0, [r2, r1, lsl #2]
   1d010:	ldr	r1, [ip, r1, lsl #2]
   1d014:	cmp	r1, r0
   1d018:	mov	r1, r3
   1d01c:	beq	1cffc <__assert_fail@plt+0xbcdc>
   1d020:	mvn	r0, #0
   1d024:	movwhi	r0, #1
   1d028:	bx	lr
   1d02c:	mov	r0, #1
   1d030:	mvnlt	r0, #0
   1d034:	bx	lr
   1d038:	push	{r4, r5, r6, r7, fp, lr}
   1d03c:	add	fp, sp, #16
   1d040:	mov	r4, r0
   1d044:	cmp	r0, r1
   1d048:	beq	1d09c <__assert_fail@plt+0xbd7c>
   1d04c:	mov	r5, r1
   1d050:	ldr	r1, [r4]
   1d054:	ldr	r6, [r5, #4]
   1d058:	cmp	r6, #0
   1d05c:	rsbmi	r6, r6, #0
   1d060:	cmp	r6, r1
   1d064:	ble	1d0a4 <__assert_fail@plt+0xbd84>
   1d068:	cmp	r6, #1
   1d06c:	mov	r7, r6
   1d070:	movle	r7, #1
   1d074:	cmp	r1, #0
   1d078:	beq	1d0b4 <__assert_fail@plt+0xbd94>
   1d07c:	movw	r0, #8480	; 0x2120
   1d080:	lsl	r1, r1, #2
   1d084:	lsl	r2, r7, #2
   1d088:	movt	r0, #4
   1d08c:	ldr	r3, [r0]
   1d090:	ldr	r0, [r4, #8]
   1d094:	blx	r3
   1d098:	b	1d0c8 <__assert_fail@plt+0xbda8>
   1d09c:	ldr	r0, [r4, #4]!
   1d0a0:	b	1d160 <__assert_fail@plt+0xbe40>
   1d0a4:	ldr	r0, [r4, #8]
   1d0a8:	cmp	r6, #1
   1d0ac:	bge	1d0f0 <__assert_fail@plt+0xbdd0>
   1d0b0:	b	1d158 <__assert_fail@plt+0xbe38>
   1d0b4:	movw	r0, #8476	; 0x211c
   1d0b8:	movt	r0, #4
   1d0bc:	ldr	r1, [r0]
   1d0c0:	lsl	r0, r7, #2
   1d0c4:	blx	r1
   1d0c8:	str	r0, [r4, #8]
   1d0cc:	str	r7, [r4]
   1d0d0:	ldr	r1, [r4, #4]
   1d0d4:	cmp	r1, #0
   1d0d8:	rsbmi	r1, r1, #0
   1d0dc:	cmp	r1, r7
   1d0e0:	movgt	r1, #0
   1d0e4:	strgt	r1, [r4, #4]
   1d0e8:	cmp	r6, #1
   1d0ec:	blt	1d158 <__assert_fail@plt+0xbe38>
   1d0f0:	ldr	ip, [r5, #8]
   1d0f4:	mov	r2, #0
   1d0f8:	cmp	r6, #4
   1d0fc:	bcc	1d13c <__assert_fail@plt+0xbe1c>
   1d100:	add	r1, ip, r6, lsl #2
   1d104:	cmp	r0, r1
   1d108:	addcc	r1, r0, r6, lsl #2
   1d10c:	cmpcc	ip, r1
   1d110:	bcc	1d13c <__assert_fail@plt+0xbe1c>
   1d114:	bic	r2, r6, #-2147483645	; 0x80000003
   1d118:	mov	r7, r0
   1d11c:	mov	r1, ip
   1d120:	mov	r3, r2
   1d124:	vld1.32	{d16-d17}, [r1]!
   1d128:	subs	r3, r3, #4
   1d12c:	vst1.32	{d16-d17}, [r7]!
   1d130:	bne	1d124 <__assert_fail@plt+0xbe04>
   1d134:	cmp	r6, r2
   1d138:	beq	1d158 <__assert_fail@plt+0xbe38>
   1d13c:	add	r1, ip, r2, lsl #2
   1d140:	add	r0, r0, r2, lsl #2
   1d144:	sub	r2, r6, r2
   1d148:	ldr	r3, [r1], #4
   1d14c:	subs	r2, r2, #1
   1d150:	str	r3, [r0], #4
   1d154:	bne	1d148 <__assert_fail@plt+0xbe28>
   1d158:	ldr	r0, [r5, #4]
   1d15c:	str	r0, [r4, #4]!
   1d160:	cmp	r0, #0
   1d164:	rsbmi	r0, r0, #0
   1d168:	str	r0, [r4]
   1d16c:	pop	{r4, r5, r6, r7, fp, pc}
   1d170:	push	{r4, r5, r6, r7, fp, lr}
   1d174:	add	fp, sp, #16
   1d178:	mov	r4, r0
   1d17c:	cmp	r0, r1
   1d180:	beq	1d1d4 <__assert_fail@plt+0xbeb4>
   1d184:	mov	r5, r1
   1d188:	ldr	r1, [r4]
   1d18c:	ldr	r6, [r5, #4]
   1d190:	cmp	r6, #0
   1d194:	rsbmi	r6, r6, #0
   1d198:	cmp	r6, r1
   1d19c:	ble	1d1dc <__assert_fail@plt+0xbebc>
   1d1a0:	cmp	r6, #1
   1d1a4:	mov	r7, r6
   1d1a8:	movle	r7, #1
   1d1ac:	cmp	r1, #0
   1d1b0:	beq	1d1ec <__assert_fail@plt+0xbecc>
   1d1b4:	movw	r0, #8480	; 0x2120
   1d1b8:	lsl	r1, r1, #2
   1d1bc:	lsl	r2, r7, #2
   1d1c0:	movt	r0, #4
   1d1c4:	ldr	r3, [r0]
   1d1c8:	ldr	r0, [r4, #8]
   1d1cc:	blx	r3
   1d1d0:	b	1d200 <__assert_fail@plt+0xbee0>
   1d1d4:	ldr	r0, [r4, #4]!
   1d1d8:	b	1d298 <__assert_fail@plt+0xbf78>
   1d1dc:	ldr	r0, [r4, #8]
   1d1e0:	cmp	r6, #1
   1d1e4:	bge	1d228 <__assert_fail@plt+0xbf08>
   1d1e8:	b	1d290 <__assert_fail@plt+0xbf70>
   1d1ec:	movw	r0, #8476	; 0x211c
   1d1f0:	movt	r0, #4
   1d1f4:	ldr	r1, [r0]
   1d1f8:	lsl	r0, r7, #2
   1d1fc:	blx	r1
   1d200:	str	r0, [r4, #8]
   1d204:	str	r7, [r4]
   1d208:	ldr	r1, [r4, #4]
   1d20c:	cmp	r1, #0
   1d210:	rsbmi	r1, r1, #0
   1d214:	cmp	r1, r7
   1d218:	movgt	r1, #0
   1d21c:	strgt	r1, [r4, #4]
   1d220:	cmp	r6, #1
   1d224:	blt	1d290 <__assert_fail@plt+0xbf70>
   1d228:	ldr	ip, [r5, #8]
   1d22c:	mov	r2, #0
   1d230:	cmp	r6, #4
   1d234:	bcc	1d274 <__assert_fail@plt+0xbf54>
   1d238:	add	r1, ip, r6, lsl #2
   1d23c:	cmp	r0, r1
   1d240:	addcc	r1, r0, r6, lsl #2
   1d244:	cmpcc	ip, r1
   1d248:	bcc	1d274 <__assert_fail@plt+0xbf54>
   1d24c:	bic	r2, r6, #-2147483645	; 0x80000003
   1d250:	mov	r7, r0
   1d254:	mov	r1, ip
   1d258:	mov	r3, r2
   1d25c:	vld1.32	{d16-d17}, [r1]!
   1d260:	subs	r3, r3, #4
   1d264:	vst1.32	{d16-d17}, [r7]!
   1d268:	bne	1d25c <__assert_fail@plt+0xbf3c>
   1d26c:	cmp	r6, r2
   1d270:	beq	1d290 <__assert_fail@plt+0xbf70>
   1d274:	add	r1, ip, r2, lsl #2
   1d278:	add	r0, r0, r2, lsl #2
   1d27c:	sub	r2, r6, r2
   1d280:	ldr	r3, [r1], #4
   1d284:	subs	r2, r2, #1
   1d288:	str	r3, [r0], #4
   1d28c:	bne	1d280 <__assert_fail@plt+0xbf60>
   1d290:	ldr	r0, [r5, #4]
   1d294:	str	r0, [r4, #4]!
   1d298:	rsb	r0, r0, #0
   1d29c:	str	r0, [r4]
   1d2a0:	pop	{r4, r5, r6, r7, fp, pc}
   1d2a4:	ldr	r2, [r0, #4]
   1d2a8:	ldr	r3, [r1, #4]
   1d2ac:	str	r3, [r0, #4]
   1d2b0:	str	r2, [r1, #4]
   1d2b4:	ldr	r2, [r0]
   1d2b8:	ldr	r3, [r1]
   1d2bc:	str	r3, [r0]
   1d2c0:	str	r2, [r1]
   1d2c4:	ldr	r2, [r0, #8]
   1d2c8:	ldr	r3, [r1, #8]
   1d2cc:	str	r3, [r0, #8]
   1d2d0:	str	r2, [r1, #8]
   1d2d4:	bx	lr
   1d2d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d2dc:	add	fp, sp, #24
   1d2e0:	sub	sp, sp, #16
   1d2e4:	mov	r4, r1
   1d2e8:	movw	r1, #1584	; 0x630
   1d2ec:	mov	r5, r0
   1d2f0:	mov	r0, #0
   1d2f4:	cmp	r2, #0
   1d2f8:	movt	r1, #3
   1d2fc:	str	r0, [sp, #8]
   1d300:	str	r0, [sp, #4]
   1d304:	str	r1, [sp, #12]
   1d308:	beq	1d36c <__assert_fail@plt+0xc04c>
   1d30c:	movw	r0, #8476	; 0x211c
   1d310:	mov	r8, #1
   1d314:	mov	r6, r2
   1d318:	movt	r0, #4
   1d31c:	str	r8, [sp, #8]
   1d320:	ldr	r1, [r0]
   1d324:	mov	r0, #4
   1d328:	blx	r1
   1d32c:	str	r8, [sp, #4]
   1d330:	str	r0, [sp, #12]
   1d334:	mov	r7, r0
   1d338:	str	r6, [r0]
   1d33c:	add	r2, sp, #4
   1d340:	mov	r0, r5
   1d344:	mov	r1, r4
   1d348:	bl	1d388 <__assert_fail@plt+0xc068>
   1d34c:	movw	r0, #8484	; 0x2124
   1d350:	mov	r1, #4
   1d354:	movt	r0, #4
   1d358:	ldr	r2, [r0]
   1d35c:	mov	r0, r7
   1d360:	blx	r2
   1d364:	sub	sp, fp, #24
   1d368:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d36c:	str	r0, [sp, #8]
   1d370:	add	r2, sp, #4
   1d374:	mov	r0, r5
   1d378:	mov	r1, r4
   1d37c:	bl	1d388 <__assert_fail@plt+0xc068>
   1d380:	sub	sp, fp, #24
   1d384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d38c:	add	fp, sp, #28
   1d390:	sub	sp, sp, #20
   1d394:	ldr	r8, [r1, #4]
   1d398:	ldr	sl, [r2, #4]
   1d39c:	mov	r7, r0
   1d3a0:	mov	r6, r2
   1d3a4:	mov	r4, r1
   1d3a8:	eor	r0, sl, r8
   1d3ac:	cmp	r0, #0
   1d3b0:	blt	1d3fc <__assert_fail@plt+0xc0dc>
   1d3b4:	cmp	sl, #0
   1d3b8:	ldr	r1, [r7]
   1d3bc:	mov	r5, r4
   1d3c0:	rsbmi	sl, sl, #0
   1d3c4:	cmp	r8, #0
   1d3c8:	rsbmi	r8, r8, #0
   1d3cc:	mov	r9, sl
   1d3d0:	cmp	r8, sl
   1d3d4:	mov	r0, r8
   1d3d8:	movlt	r0, sl
   1d3dc:	movlt	r5, r6
   1d3e0:	movlt	r6, r4
   1d3e4:	movlt	r9, r8
   1d3e8:	cmp	r0, r1
   1d3ec:	stmib	sp, {r0, r4}
   1d3f0:	bge	1d410 <__assert_fail@plt+0xc0f0>
   1d3f4:	ldr	r0, [r7, #8]
   1d3f8:	b	1d478 <__assert_fail@plt+0xc158>
   1d3fc:	mov	r0, r7
   1d400:	mov	r1, r4
   1d404:	mov	r2, r6
   1d408:	bl	1d790 <__assert_fail@plt+0xc470>
   1d40c:	b	1d554 <__assert_fail@plt+0xc234>
   1d410:	add	r4, r0, #1
   1d414:	cmp	r4, #1
   1d418:	movls	r4, #1
   1d41c:	cmp	r1, #0
   1d420:	beq	1d444 <__assert_fail@plt+0xc124>
   1d424:	movw	r0, #8480	; 0x2120
   1d428:	lsl	r1, r1, #2
   1d42c:	lsl	r2, r4, #2
   1d430:	movt	r0, #4
   1d434:	ldr	r3, [r0]
   1d438:	ldr	r0, [r7, #8]
   1d43c:	blx	r3
   1d440:	b	1d458 <__assert_fail@plt+0xc138>
   1d444:	movw	r0, #8476	; 0x211c
   1d448:	movt	r0, #4
   1d44c:	ldr	r1, [r0]
   1d450:	lsl	r0, r4, #2
   1d454:	blx	r1
   1d458:	str	r0, [r7, #8]
   1d45c:	str	r4, [r7]
   1d460:	ldr	r1, [r7, #4]
   1d464:	cmp	r1, #0
   1d468:	rsbmi	r1, r1, #0
   1d46c:	cmp	r1, r4
   1d470:	movgt	r1, #0
   1d474:	strgt	r1, [r7, #4]
   1d478:	ldr	r2, [r5, #8]
   1d47c:	cmp	r9, #1
   1d480:	str	r7, [sp, #12]
   1d484:	str	r0, [sp, #16]
   1d488:	str	r2, [sp]
   1d48c:	blt	1d4d0 <__assert_fail@plt+0xc1b0>
   1d490:	ldr	r3, [r6, #8]
   1d494:	mov	lr, #0
   1d498:	mov	r5, r0
   1d49c:	mov	r4, r9
   1d4a0:	mov	r1, #0
   1d4a4:	ldr	r6, [r2], #4
   1d4a8:	ldr	r7, [r3], #4
   1d4ac:	adds	ip, r6, r1
   1d4b0:	adds	r7, ip, r7
   1d4b4:	adc	r0, lr, #0
   1d4b8:	adds	r1, r6, r1
   1d4bc:	str	r7, [r5], #4
   1d4c0:	adc	r1, r0, #0
   1d4c4:	subs	r4, r4, #1
   1d4c8:	bne	1d4a4 <__assert_fail@plt+0xc184>
   1d4cc:	b	1d4d4 <__assert_fail@plt+0xc1b4>
   1d4d0:	mov	r1, #0
   1d4d4:	ldr	ip, [sp, #4]
   1d4d8:	cmp	ip, r9
   1d4dc:	ble	1d540 <__assert_fail@plt+0xc220>
   1d4e0:	sub	r0, ip, r9
   1d4e4:	cmp	r0, #1
   1d4e8:	blt	1d56c <__assert_fail@plt+0xc24c>
   1d4ec:	ldr	r0, [sp]
   1d4f0:	mvn	r7, sl
   1d4f4:	mov	r6, #0
   1d4f8:	add	r2, r0, r9, lsl #2
   1d4fc:	ldr	r0, [sp, #16]
   1d500:	add	r3, r0, r9, lsl #2
   1d504:	mvn	r0, r8
   1d508:	cmp	r0, r7
   1d50c:	movgt	r7, r0
   1d510:	add	r0, ip, r7
   1d514:	add	r7, r0, #1
   1d518:	ldr	r0, [r2], #4
   1d51c:	mov	r5, r1
   1d520:	adds	r4, r0, r1
   1d524:	adc	r1, r6, #0
   1d528:	str	r4, [r3], #4
   1d52c:	subs	r7, r7, #1
   1d530:	bne	1d518 <__assert_fail@plt+0xc1f8>
   1d534:	mov	r1, #0
   1d538:	cmp	r4, r5
   1d53c:	movwcc	r1, #1
   1d540:	ldr	r0, [sp, #16]
   1d544:	ldr	r7, [sp, #12]
   1d548:	ldr	r4, [sp, #8]
   1d54c:	str	r1, [r0, ip, lsl #2]
   1d550:	add	r0, r1, ip
   1d554:	ldr	r1, [r4, #4]
   1d558:	cmn	r1, #1
   1d55c:	rsble	r0, r0, #0
   1d560:	str	r0, [r7, #4]
   1d564:	sub	sp, fp, #28
   1d568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d56c:	movw	r0, #4914	; 0x1332
   1d570:	movw	r1, #1588	; 0x634
   1d574:	movw	r3, #1605	; 0x645
   1d578:	movw	r2, #442	; 0x1ba
   1d57c:	movt	r0, #3
   1d580:	movt	r1, #3
   1d584:	movt	r3, #3
   1d588:	bl	11320 <__assert_fail@plt>
   1d58c:	push	{r4, sl, fp, lr}
   1d590:	add	fp, sp, #8
   1d594:	mov	r3, r1
   1d598:	mov	r1, r2
   1d59c:	mov	r4, r0
   1d5a0:	mov	r2, r3
   1d5a4:	bl	1d5b8 <__assert_fail@plt+0xc298>
   1d5a8:	ldr	r0, [r4, #4]
   1d5ac:	rsb	r0, r0, #0
   1d5b0:	str	r0, [r4, #4]
   1d5b4:	pop	{r4, sl, fp, pc}
   1d5b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d5bc:	add	fp, sp, #24
   1d5c0:	sub	sp, sp, #16
   1d5c4:	mov	r8, r1
   1d5c8:	mov	r4, r0
   1d5cc:	cmp	r0, r2
   1d5d0:	beq	1d624 <__assert_fail@plt+0xc304>
   1d5d4:	ldr	r7, [r2, #4]
   1d5d8:	ldr	r1, [r4]
   1d5dc:	mov	r6, r2
   1d5e0:	cmp	r7, #0
   1d5e4:	rsbmi	r7, r7, #0
   1d5e8:	cmp	r7, r1
   1d5ec:	ble	1d630 <__assert_fail@plt+0xc310>
   1d5f0:	cmp	r7, #1
   1d5f4:	mov	r5, r7
   1d5f8:	movle	r5, #1
   1d5fc:	cmp	r1, #0
   1d600:	beq	1d640 <__assert_fail@plt+0xc320>
   1d604:	movw	r0, #8480	; 0x2120
   1d608:	lsl	r1, r1, #2
   1d60c:	lsl	r2, r5, #2
   1d610:	movt	r0, #4
   1d614:	ldr	r3, [r0]
   1d618:	ldr	r0, [r4, #8]
   1d61c:	blx	r3
   1d620:	b	1d654 <__assert_fail@plt+0xc334>
   1d624:	mov	r0, r4
   1d628:	ldr	r1, [r0, #4]!
   1d62c:	b	1d6f0 <__assert_fail@plt+0xc3d0>
   1d630:	ldr	r0, [r4, #8]
   1d634:	cmp	r7, #1
   1d638:	bge	1d67c <__assert_fail@plt+0xc35c>
   1d63c:	b	1d6e4 <__assert_fail@plt+0xc3c4>
   1d640:	movw	r0, #8476	; 0x211c
   1d644:	movt	r0, #4
   1d648:	ldr	r1, [r0]
   1d64c:	lsl	r0, r5, #2
   1d650:	blx	r1
   1d654:	str	r0, [r4, #8]
   1d658:	str	r5, [r4]
   1d65c:	ldr	r1, [r4, #4]
   1d660:	cmp	r1, #0
   1d664:	rsbmi	r1, r1, #0
   1d668:	cmp	r1, r5
   1d66c:	movgt	r1, #0
   1d670:	strgt	r1, [r4, #4]
   1d674:	cmp	r7, #1
   1d678:	blt	1d6e4 <__assert_fail@plt+0xc3c4>
   1d67c:	ldr	ip, [r6, #8]
   1d680:	mov	r2, #0
   1d684:	cmp	r7, #4
   1d688:	bcc	1d6c8 <__assert_fail@plt+0xc3a8>
   1d68c:	add	r1, ip, r7, lsl #2
   1d690:	cmp	r0, r1
   1d694:	addcc	r1, r0, r7, lsl #2
   1d698:	cmpcc	ip, r1
   1d69c:	bcc	1d6c8 <__assert_fail@plt+0xc3a8>
   1d6a0:	bic	r2, r7, #-2147483645	; 0x80000003
   1d6a4:	mov	r5, r0
   1d6a8:	mov	r1, ip
   1d6ac:	mov	r3, r2
   1d6b0:	vld1.32	{d16-d17}, [r1]!
   1d6b4:	subs	r3, r3, #4
   1d6b8:	vst1.32	{d16-d17}, [r5]!
   1d6bc:	bne	1d6b0 <__assert_fail@plt+0xc390>
   1d6c0:	cmp	r7, r2
   1d6c4:	beq	1d6e4 <__assert_fail@plt+0xc3c4>
   1d6c8:	add	r1, ip, r2, lsl #2
   1d6cc:	add	r0, r0, r2, lsl #2
   1d6d0:	sub	r2, r7, r2
   1d6d4:	ldr	r3, [r1], #4
   1d6d8:	subs	r2, r2, #1
   1d6dc:	str	r3, [r0], #4
   1d6e0:	bne	1d6d4 <__assert_fail@plt+0xc3b4>
   1d6e4:	ldr	r1, [r6, #4]
   1d6e8:	mov	r0, r4
   1d6ec:	str	r1, [r0, #4]!
   1d6f0:	rsb	r1, r1, #0
   1d6f4:	cmp	r8, #0
   1d6f8:	str	r1, [r0]
   1d6fc:	movw	r1, #1584	; 0x630
   1d700:	mov	r0, #0
   1d704:	movt	r1, #3
   1d708:	str	r0, [sp, #8]
   1d70c:	str	r0, [sp, #4]
   1d710:	str	r1, [sp, #12]
   1d714:	beq	1d774 <__assert_fail@plt+0xc454>
   1d718:	movw	r0, #8476	; 0x211c
   1d71c:	mov	r5, #1
   1d720:	movt	r0, #4
   1d724:	str	r5, [sp, #8]
   1d728:	ldr	r1, [r0]
   1d72c:	mov	r0, #4
   1d730:	blx	r1
   1d734:	str	r5, [sp, #4]
   1d738:	str	r0, [sp, #12]
   1d73c:	mov	r6, r0
   1d740:	str	r8, [r0]
   1d744:	add	r2, sp, #4
   1d748:	mov	r0, r4
   1d74c:	mov	r1, r4
   1d750:	bl	1d388 <__assert_fail@plt+0xc068>
   1d754:	movw	r0, #8484	; 0x2124
   1d758:	mov	r1, #4
   1d75c:	movt	r0, #4
   1d760:	ldr	r2, [r0]
   1d764:	mov	r0, r6
   1d768:	blx	r2
   1d76c:	sub	sp, fp, #24
   1d770:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d774:	str	r0, [sp, #8]
   1d778:	add	r2, sp, #4
   1d77c:	mov	r0, r4
   1d780:	mov	r1, r4
   1d784:	bl	1d388 <__assert_fail@plt+0xc068>
   1d788:	sub	sp, fp, #24
   1d78c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d794:	add	fp, sp, #28
   1d798:	sub	sp, sp, #4
   1d79c:	mov	r5, r1
   1d7a0:	ldr	sl, [r2, #4]
   1d7a4:	mov	r7, r0
   1d7a8:	ldr	r0, [r2, #8]
   1d7ac:	mov	r8, r2
   1d7b0:	ldr	r9, [r5, #4]
   1d7b4:	ldr	r1, [r5, #8]
   1d7b8:	cmp	sl, #0
   1d7bc:	rsbmi	sl, sl, #0
   1d7c0:	cmp	r9, #0
   1d7c4:	rsbmi	r9, r9, #0
   1d7c8:	cmp	r9, sl
   1d7cc:	bne	1d840 <__assert_fail@plt+0xc520>
   1d7d0:	sub	r1, r1, #4
   1d7d4:	sub	r0, r0, #4
   1d7d8:	mov	r2, r9
   1d7dc:	cmp	r2, #1
   1d7e0:	blt	1d884 <__assert_fail@plt+0xc564>
   1d7e4:	sub	r3, r2, #1
   1d7e8:	ldr	r4, [r0, r2, lsl #2]
   1d7ec:	ldr	r2, [r1, r2, lsl #2]
   1d7f0:	cmp	r2, r4
   1d7f4:	mov	r2, r3
   1d7f8:	beq	1d7dc <__assert_fail@plt+0xc4bc>
   1d7fc:	bhi	1d844 <__assert_fail@plt+0xc524>
   1d800:	ldr	r1, [r7]
   1d804:	cmp	sl, r1
   1d808:	ble	1d890 <__assert_fail@plt+0xc570>
   1d80c:	cmp	sl, #1
   1d810:	mov	r4, sl
   1d814:	movle	r4, #1
   1d818:	cmp	r1, #0
   1d81c:	beq	1d8b0 <__assert_fail@plt+0xc590>
   1d820:	movw	r0, #8480	; 0x2120
   1d824:	lsl	r1, r1, #2
   1d828:	lsl	r2, r4, #2
   1d82c:	movt	r0, #4
   1d830:	ldr	r3, [r0]
   1d834:	ldr	r0, [r7, #8]
   1d838:	blx	r3
   1d83c:	b	1d8c4 <__assert_fail@plt+0xc5a4>
   1d840:	blt	1d800 <__assert_fail@plt+0xc4e0>
   1d844:	ldr	r1, [r7]
   1d848:	cmp	r9, r1
   1d84c:	ble	1d8a0 <__assert_fail@plt+0xc580>
   1d850:	cmp	r9, #1
   1d854:	mov	r4, r9
   1d858:	movle	r4, #1
   1d85c:	cmp	r1, #0
   1d860:	beq	1d9cc <__assert_fail@plt+0xc6ac>
   1d864:	movw	r0, #8480	; 0x2120
   1d868:	lsl	r1, r1, #2
   1d86c:	lsl	r2, r4, #2
   1d870:	movt	r0, #4
   1d874:	ldr	r3, [r0]
   1d878:	ldr	r0, [r7, #8]
   1d87c:	blx	r3
   1d880:	b	1d9e0 <__assert_fail@plt+0xc6c0>
   1d884:	mov	r0, #0
   1d888:	sub	sp, fp, #28
   1d88c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d890:	ldr	r0, [r7, #8]
   1d894:	cmp	sl, r9
   1d898:	bge	1d8ec <__assert_fail@plt+0xc5cc>
   1d89c:	b	1dae4 <__assert_fail@plt+0xc7c4>
   1d8a0:	ldr	r0, [r7, #8]
   1d8a4:	cmp	r9, sl
   1d8a8:	bge	1da08 <__assert_fail@plt+0xc6e8>
   1d8ac:	b	1dae4 <__assert_fail@plt+0xc7c4>
   1d8b0:	movw	r0, #8476	; 0x211c
   1d8b4:	movt	r0, #4
   1d8b8:	ldr	r1, [r0]
   1d8bc:	lsl	r0, r4, #2
   1d8c0:	blx	r1
   1d8c4:	str	r0, [r7, #8]
   1d8c8:	str	r4, [r7]
   1d8cc:	ldr	r1, [r7, #4]
   1d8d0:	cmp	r1, #0
   1d8d4:	rsbmi	r1, r1, #0
   1d8d8:	cmp	r1, r4
   1d8dc:	movgt	r1, #0
   1d8e0:	strgt	r1, [r7, #4]
   1d8e4:	cmp	sl, r9
   1d8e8:	blt	1dae4 <__assert_fail@plt+0xc7c4>
   1d8ec:	ldr	ip, [r8, #8]
   1d8f0:	cmp	r9, #1
   1d8f4:	blt	1d948 <__assert_fail@plt+0xc628>
   1d8f8:	ldr	r3, [r5, #8]
   1d8fc:	mov	r1, #0
   1d900:	mov	r2, ip
   1d904:	mov	r5, r0
   1d908:	mov	r4, r9
   1d90c:	ldr	r7, [r3], #4
   1d910:	ldr	lr, [r2], #4
   1d914:	adds	r6, r7, r1
   1d918:	cmp	lr, r6
   1d91c:	mov	r6, #0
   1d920:	movwcc	r6, #1
   1d924:	adds	r7, r7, r1
   1d928:	sub	r7, lr, r7
   1d92c:	adc	r1, r6, #0
   1d930:	subs	r4, r4, #1
   1d934:	str	r7, [r5], #4
   1d938:	bne	1d90c <__assert_fail@plt+0xc5ec>
   1d93c:	cmp	sl, r9
   1d940:	bgt	1d954 <__assert_fail@plt+0xc634>
   1d944:	b	1d998 <__assert_fail@plt+0xc678>
   1d948:	mov	r1, #0
   1d94c:	cmp	sl, r9
   1d950:	ble	1d998 <__assert_fail@plt+0xc678>
   1d954:	sub	r2, sl, r9
   1d958:	cmp	r2, #1
   1d95c:	blt	1db24 <__assert_fail@plt+0xc804>
   1d960:	add	r3, ip, r9, lsl #2
   1d964:	add	r7, r0, r9, lsl #2
   1d968:	ldr	r5, [r3], #4
   1d96c:	mov	r6, r1
   1d970:	cmp	r5, r1
   1d974:	mov	r1, #0
   1d978:	sub	r4, r5, r6
   1d97c:	movwcc	r1, #1
   1d980:	str	r4, [r7], #4
   1d984:	subs	r2, r2, #1
   1d988:	bne	1d968 <__assert_fail@plt+0xc648>
   1d98c:	mov	r1, #0
   1d990:	cmp	r5, r6
   1d994:	movwcc	r1, #1
   1d998:	cmp	r1, #0
   1d99c:	bne	1db04 <__assert_fail@plt+0xc7e4>
   1d9a0:	sub	r0, r0, #4
   1d9a4:	mov	r1, sl
   1d9a8:	cmp	sl, #1
   1d9ac:	blt	1d9c0 <__assert_fail@plt+0xc6a0>
   1d9b0:	ldr	r2, [r0, r1, lsl #2]
   1d9b4:	sub	sl, r1, #1
   1d9b8:	cmp	r2, #0
   1d9bc:	beq	1d9a4 <__assert_fail@plt+0xc684>
   1d9c0:	rsb	r0, r1, #0
   1d9c4:	sub	sp, fp, #28
   1d9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9cc:	movw	r0, #8476	; 0x211c
   1d9d0:	movt	r0, #4
   1d9d4:	ldr	r1, [r0]
   1d9d8:	lsl	r0, r4, #2
   1d9dc:	blx	r1
   1d9e0:	str	r0, [r7, #8]
   1d9e4:	str	r4, [r7]
   1d9e8:	ldr	r1, [r7, #4]
   1d9ec:	cmp	r1, #0
   1d9f0:	rsbmi	r1, r1, #0
   1d9f4:	cmp	r1, r4
   1d9f8:	movgt	r1, #0
   1d9fc:	strgt	r1, [r7, #4]
   1da00:	cmp	r9, sl
   1da04:	blt	1dae4 <__assert_fail@plt+0xc7c4>
   1da08:	ldr	ip, [r5, #8]
   1da0c:	cmp	sl, #1
   1da10:	blt	1da64 <__assert_fail@plt+0xc744>
   1da14:	ldr	r3, [r8, #8]
   1da18:	mov	r1, #0
   1da1c:	mov	r2, ip
   1da20:	mov	r5, r0
   1da24:	mov	r7, sl
   1da28:	ldr	r6, [r3], #4
   1da2c:	ldr	lr, [r2], #4
   1da30:	adds	r4, r6, r1
   1da34:	cmp	lr, r4
   1da38:	mov	r4, #0
   1da3c:	movwcc	r4, #1
   1da40:	adds	r6, r6, r1
   1da44:	sub	r6, lr, r6
   1da48:	adc	r1, r4, #0
   1da4c:	subs	r7, r7, #1
   1da50:	str	r6, [r5], #4
   1da54:	bne	1da28 <__assert_fail@plt+0xc708>
   1da58:	cmp	r9, sl
   1da5c:	bgt	1da70 <__assert_fail@plt+0xc750>
   1da60:	b	1dab4 <__assert_fail@plt+0xc794>
   1da64:	mov	r1, #0
   1da68:	cmp	r9, sl
   1da6c:	ble	1dab4 <__assert_fail@plt+0xc794>
   1da70:	sub	r2, r9, sl
   1da74:	cmp	r2, #1
   1da78:	blt	1db24 <__assert_fail@plt+0xc804>
   1da7c:	add	r3, ip, sl, lsl #2
   1da80:	add	r7, r0, sl, lsl #2
   1da84:	ldr	r4, [r3], #4
   1da88:	mov	r5, r1
   1da8c:	cmp	r4, r1
   1da90:	mov	r1, #0
   1da94:	sub	r6, r4, r5
   1da98:	movwcc	r1, #1
   1da9c:	str	r6, [r7], #4
   1daa0:	subs	r2, r2, #1
   1daa4:	bne	1da84 <__assert_fail@plt+0xc764>
   1daa8:	mov	r1, #0
   1daac:	cmp	r4, r5
   1dab0:	movwcc	r1, #1
   1dab4:	cmp	r1, #0
   1dab8:	bne	1db44 <__assert_fail@plt+0xc824>
   1dabc:	sub	r1, r0, #4
   1dac0:	mov	r0, r9
   1dac4:	cmp	r9, #1
   1dac8:	blt	1dadc <__assert_fail@plt+0xc7bc>
   1dacc:	ldr	r2, [r1, r0, lsl #2]
   1dad0:	sub	r9, r0, #1
   1dad4:	cmp	r2, #0
   1dad8:	beq	1dac0 <__assert_fail@plt+0xc7a0>
   1dadc:	sub	sp, fp, #28
   1dae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dae4:	movw	r0, #1666	; 0x682
   1dae8:	movw	r1, #1588	; 0x634
   1daec:	movw	r3, #1806	; 0x70e
   1daf0:	mov	r2, #532	; 0x214
   1daf4:	movt	r0, #3
   1daf8:	movt	r1, #3
   1dafc:	movt	r3, #3
   1db00:	bl	11320 <__assert_fail@plt>
   1db04:	movw	r0, #2569	; 0xa09
   1db08:	movw	r1, #1588	; 0x634
   1db0c:	movw	r3, #4803	; 0x12c3
   1db10:	movw	r2, #2012	; 0x7dc
   1db14:	movt	r0, #3
   1db18:	movt	r1, #3
   1db1c:	movt	r3, #3
   1db20:	bl	11320 <__assert_fail@plt>
   1db24:	movw	r0, #4914	; 0x1332
   1db28:	movw	r1, #1588	; 0x634
   1db2c:	movw	r3, #1745	; 0x6d1
   1db30:	movw	r2, #493	; 0x1ed
   1db34:	movt	r0, #3
   1db38:	movt	r1, #3
   1db3c:	movt	r3, #3
   1db40:	bl	11320 <__assert_fail@plt>
   1db44:	movw	r0, #2569	; 0xa09
   1db48:	movw	r1, #1588	; 0x634
   1db4c:	movw	r3, #4803	; 0x12c3
   1db50:	movw	r2, #2006	; 0x7d6
   1db54:	movt	r0, #3
   1db58:	movt	r1, #3
   1db5c:	movt	r3, #3
   1db60:	bl	11320 <__assert_fail@plt>
   1db64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db68:	add	fp, sp, #28
   1db6c:	sub	sp, sp, #20
   1db70:	ldr	r8, [r1, #4]
   1db74:	ldr	sl, [r2, #4]
   1db78:	mov	r5, r0
   1db7c:	mov	r6, r2
   1db80:	mov	r9, r1
   1db84:	eor	r0, sl, r8
   1db88:	cmp	r0, #0
   1db8c:	blt	1dba4 <__assert_fail@plt+0xc884>
   1db90:	mov	r0, r5
   1db94:	mov	r1, r9
   1db98:	mov	r2, r6
   1db9c:	bl	1d790 <__assert_fail@plt+0xc470>
   1dba0:	b	1dd44 <__assert_fail@plt+0xca24>
   1dba4:	cmp	sl, #0
   1dba8:	ldr	r1, [r5]
   1dbac:	mov	r2, r9
   1dbb0:	rsbmi	sl, sl, #0
   1dbb4:	cmp	r8, #0
   1dbb8:	rsbmi	r8, r8, #0
   1dbbc:	mov	r7, sl
   1dbc0:	cmp	r8, sl
   1dbc4:	mov	r0, r8
   1dbc8:	movlt	r0, sl
   1dbcc:	movlt	r2, r6
   1dbd0:	movlt	r6, r9
   1dbd4:	movlt	r7, r8
   1dbd8:	cmp	r0, r1
   1dbdc:	str	r0, [sp, #8]
   1dbe0:	bge	1dbec <__assert_fail@plt+0xc8cc>
   1dbe4:	ldr	r0, [r5, #8]
   1dbe8:	b	1dc5c <__assert_fail@plt+0xc93c>
   1dbec:	add	r4, r0, #1
   1dbf0:	str	r2, [sp, #16]
   1dbf4:	cmp	r4, #1
   1dbf8:	movls	r4, #1
   1dbfc:	cmp	r1, #0
   1dc00:	beq	1dc24 <__assert_fail@plt+0xc904>
   1dc04:	movw	r0, #8480	; 0x2120
   1dc08:	lsl	r1, r1, #2
   1dc0c:	lsl	r2, r4, #2
   1dc10:	movt	r0, #4
   1dc14:	ldr	r3, [r0]
   1dc18:	ldr	r0, [r5, #8]
   1dc1c:	blx	r3
   1dc20:	b	1dc38 <__assert_fail@plt+0xc918>
   1dc24:	movw	r0, #8476	; 0x211c
   1dc28:	movt	r0, #4
   1dc2c:	ldr	r1, [r0]
   1dc30:	lsl	r0, r4, #2
   1dc34:	blx	r1
   1dc38:	str	r0, [r5, #8]
   1dc3c:	str	r4, [r5]
   1dc40:	ldr	r1, [r5, #4]
   1dc44:	ldr	r2, [sp, #16]
   1dc48:	cmp	r1, #0
   1dc4c:	rsbmi	r1, r1, #0
   1dc50:	cmp	r1, r4
   1dc54:	movgt	r1, #0
   1dc58:	strgt	r1, [r5, #4]
   1dc5c:	ldr	r2, [r2, #8]
   1dc60:	cmp	r7, #1
   1dc64:	str	r5, [sp, #12]
   1dc68:	str	r0, [sp, #16]
   1dc6c:	stm	sp, {r2, r7}
   1dc70:	blt	1dcb4 <__assert_fail@plt+0xc994>
   1dc74:	ldr	r3, [r6, #8]
   1dc78:	mov	lr, #0
   1dc7c:	mov	r5, r0
   1dc80:	mov	r4, r7
   1dc84:	mov	r1, #0
   1dc88:	ldr	r6, [r2], #4
   1dc8c:	ldr	r7, [r3], #4
   1dc90:	adds	ip, r6, r1
   1dc94:	adds	r7, ip, r7
   1dc98:	adc	r0, lr, #0
   1dc9c:	adds	r1, r6, r1
   1dca0:	str	r7, [r5], #4
   1dca4:	adc	r1, r0, #0
   1dca8:	subs	r4, r4, #1
   1dcac:	bne	1dc88 <__assert_fail@plt+0xc968>
   1dcb0:	b	1dcb8 <__assert_fail@plt+0xc998>
   1dcb4:	mov	r1, #0
   1dcb8:	ldmib	sp, {r3, r6}
   1dcbc:	cmp	r6, r3
   1dcc0:	ble	1dd34 <__assert_fail@plt+0xca14>
   1dcc4:	sub	r0, r6, r3
   1dcc8:	cmp	r0, #1
   1dccc:	blt	1dd5c <__assert_fail@plt+0xca3c>
   1dcd0:	ldr	r0, [sp]
   1dcd4:	mvn	r7, sl
   1dcd8:	mov	ip, r6
   1dcdc:	add	r2, r0, r3, lsl #2
   1dce0:	ldr	r0, [sp, #16]
   1dce4:	add	r3, r0, r3, lsl #2
   1dce8:	mvn	r0, r8
   1dcec:	cmp	r0, r7
   1dcf0:	movgt	r7, r0
   1dcf4:	add	r0, r6, r7
   1dcf8:	mov	r6, #0
   1dcfc:	add	r7, r0, #1
   1dd00:	ldr	r0, [r2], #4
   1dd04:	mov	r5, r1
   1dd08:	adds	r4, r0, r1
   1dd0c:	adc	r1, r6, #0
   1dd10:	str	r4, [r3], #4
   1dd14:	subs	r7, r7, #1
   1dd18:	bne	1dd00 <__assert_fail@plt+0xc9e0>
   1dd1c:	cmp	r4, r5
   1dd20:	ldr	r5, [sp, #12]
   1dd24:	mov	r1, #0
   1dd28:	mov	r6, ip
   1dd2c:	movwcc	r1, #1
   1dd30:	b	1dd38 <__assert_fail@plt+0xca18>
   1dd34:	ldr	r5, [sp, #12]
   1dd38:	ldr	r0, [sp, #16]
   1dd3c:	str	r1, [r0, r6, lsl #2]
   1dd40:	add	r0, r1, r6
   1dd44:	ldr	r1, [r9, #4]
   1dd48:	cmn	r1, #1
   1dd4c:	rsble	r0, r0, #0
   1dd50:	str	r0, [r5, #4]
   1dd54:	sub	sp, fp, #28
   1dd58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd5c:	movw	r0, #4914	; 0x1332
   1dd60:	movw	r1, #1588	; 0x634
   1dd64:	movw	r3, #1605	; 0x645
   1dd68:	movw	r2, #442	; 0x1ba
   1dd6c:	movt	r0, #3
   1dd70:	movt	r1, #3
   1dd74:	movt	r3, #3
   1dd78:	bl	11320 <__assert_fail@plt>
   1dd7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dd80:	add	fp, sp, #24
   1dd84:	sub	sp, sp, #16
   1dd88:	mov	r6, r2
   1dd8c:	mov	r5, r1
   1dd90:	mov	r4, r0
   1dd94:	cmn	r2, #1
   1dd98:	ble	1de18 <__assert_fail@plt+0xcaf8>
   1dd9c:	movw	r1, #1584	; 0x630
   1dda0:	mov	r0, #0
   1dda4:	cmp	r6, #0
   1dda8:	movt	r1, #3
   1ddac:	str	r0, [sp, #8]
   1ddb0:	str	r0, [sp, #4]
   1ddb4:	str	r1, [sp, #12]
   1ddb8:	beq	1de84 <__assert_fail@plt+0xcb64>
   1ddbc:	movw	r0, #8476	; 0x211c
   1ddc0:	mov	r8, #1
   1ddc4:	movt	r0, #4
   1ddc8:	str	r8, [sp, #8]
   1ddcc:	ldr	r1, [r0]
   1ddd0:	mov	r0, #4
   1ddd4:	blx	r1
   1ddd8:	str	r8, [sp, #4]
   1dddc:	str	r0, [sp, #12]
   1dde0:	mov	r7, r0
   1dde4:	str	r6, [r0]
   1dde8:	add	r2, sp, #4
   1ddec:	mov	r0, r4
   1ddf0:	mov	r1, r5
   1ddf4:	bl	1df50 <__assert_fail@plt+0xcc30>
   1ddf8:	movw	r0, #8484	; 0x2124
   1ddfc:	mov	r1, #4
   1de00:	movt	r0, #4
   1de04:	ldr	r2, [r0]
   1de08:	mov	r0, r7
   1de0c:	blx	r2
   1de10:	sub	sp, fp, #24
   1de14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1de18:	movw	r0, #8476	; 0x211c
   1de1c:	mov	r8, #1
   1de20:	movt	r0, #4
   1de24:	str	r8, [sp, #8]
   1de28:	ldr	r1, [r0]
   1de2c:	mov	r0, #4
   1de30:	blx	r1
   1de34:	str	r8, [sp, #4]
   1de38:	mov	r7, r0
   1de3c:	str	r0, [sp, #12]
   1de40:	rsb	r0, r6, #0
   1de44:	add	r2, sp, #4
   1de48:	mov	r1, r5
   1de4c:	str	r0, [r7]
   1de50:	mov	r0, r4
   1de54:	bl	1df50 <__assert_fail@plt+0xcc30>
   1de58:	movw	r0, #8484	; 0x2124
   1de5c:	mov	r1, #4
   1de60:	movt	r0, #4
   1de64:	ldr	r2, [r0]
   1de68:	mov	r0, r7
   1de6c:	blx	r2
   1de70:	ldr	r0, [r4, #4]
   1de74:	rsb	r0, r0, #0
   1de78:	str	r0, [r4, #4]
   1de7c:	sub	sp, fp, #24
   1de80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1de84:	str	r0, [sp, #8]
   1de88:	add	r2, sp, #4
   1de8c:	mov	r0, r4
   1de90:	mov	r1, r5
   1de94:	bl	1df50 <__assert_fail@plt+0xcc30>
   1de98:	sub	sp, fp, #24
   1de9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dea0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dea4:	add	fp, sp, #24
   1dea8:	sub	sp, sp, #16
   1deac:	mov	r4, r1
   1deb0:	movw	r1, #1584	; 0x630
   1deb4:	mov	r5, r0
   1deb8:	mov	r0, #0
   1debc:	cmp	r2, #0
   1dec0:	movt	r1, #3
   1dec4:	str	r0, [sp, #8]
   1dec8:	str	r0, [sp, #4]
   1decc:	str	r1, [sp, #12]
   1ded0:	beq	1df34 <__assert_fail@plt+0xcc14>
   1ded4:	movw	r0, #8476	; 0x211c
   1ded8:	mov	r8, #1
   1dedc:	mov	r6, r2
   1dee0:	movt	r0, #4
   1dee4:	str	r8, [sp, #8]
   1dee8:	ldr	r1, [r0]
   1deec:	mov	r0, #4
   1def0:	blx	r1
   1def4:	str	r8, [sp, #4]
   1def8:	str	r0, [sp, #12]
   1defc:	mov	r7, r0
   1df00:	str	r6, [r0]
   1df04:	add	r2, sp, #4
   1df08:	mov	r0, r5
   1df0c:	mov	r1, r4
   1df10:	bl	1df50 <__assert_fail@plt+0xcc30>
   1df14:	movw	r0, #8484	; 0x2124
   1df18:	mov	r1, #4
   1df1c:	movt	r0, #4
   1df20:	ldr	r2, [r0]
   1df24:	mov	r0, r7
   1df28:	blx	r2
   1df2c:	sub	sp, fp, #24
   1df30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df34:	str	r0, [sp, #8]
   1df38:	add	r2, sp, #4
   1df3c:	mov	r0, r5
   1df40:	mov	r1, r4
   1df44:	bl	1df50 <__assert_fail@plt+0xcc30>
   1df48:	sub	sp, fp, #24
   1df4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df54:	add	fp, sp, #28
   1df58:	sub	sp, sp, #12
   1df5c:	ldr	sl, [r1, #4]
   1df60:	mov	r4, r0
   1df64:	cmp	sl, #0
   1df68:	ldrne	r5, [r2, #4]
   1df6c:	cmpne	r5, #0
   1df70:	bne	1df84 <__assert_fail@plt+0xcc64>
   1df74:	mov	r0, #0
   1df78:	str	r0, [r4, #4]
   1df7c:	sub	sp, fp, #28
   1df80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df84:	cmp	sl, #0
   1df88:	mov	r8, sl
   1df8c:	mov	r9, r5
   1df90:	str	r2, [sp, #8]
   1df94:	mov	r2, #0
   1df98:	mov	r6, r1
   1df9c:	mvn	r0, #0
   1dfa0:	rsbmi	r8, sl, #0
   1dfa4:	cmp	r5, #0
   1dfa8:	rsbmi	r9, r5, #0
   1dfac:	add	r7, r9, r8
   1dfb0:	lsl	r1, r7, #5
   1dfb4:	cmp	r2, r7, lsl #5
   1dfb8:	addne	r1, r0, r7, lsl #5
   1dfbc:	mov	r0, #1
   1dfc0:	add	r2, r0, r1, lsr #5
   1dfc4:	movw	r0, #8476	; 0x211c
   1dfc8:	movt	r0, #4
   1dfcc:	str	r2, [sp, #4]
   1dfd0:	ldr	r1, [r0]
   1dfd4:	lsl	r0, r2, #2
   1dfd8:	blx	r1
   1dfdc:	mov	r2, r0
   1dfe0:	eor	r5, r5, sl
   1dfe4:	cmp	r8, r9
   1dfe8:	bge	1e00c <__assert_fail@plt+0xccec>
   1dfec:	ldr	r0, [sp, #8]
   1dff0:	ldr	r3, [r6, #8]
   1dff4:	mov	r6, r2
   1dff8:	ldr	r1, [r0, #8]
   1dffc:	mov	r0, r2
   1e000:	mov	r2, r9
   1e004:	str	r8, [sp]
   1e008:	b	1e028 <__assert_fail@plt+0xcd08>
   1e00c:	ldr	r0, [sp, #8]
   1e010:	ldr	r1, [r6, #8]
   1e014:	mov	r6, r2
   1e018:	ldr	r3, [r0, #8]
   1e01c:	mov	r0, r2
   1e020:	str	r9, [sp]
   1e024:	mov	r2, r8
   1e028:	bl	1ac98 <__assert_fail@plt+0x9978>
   1e02c:	sub	r2, r7, #1
   1e030:	ldr	r1, [r4]
   1e034:	ldr	r0, [r4, #8]
   1e038:	ldr	r3, [r6, r2, lsl #2]
   1e03c:	cmp	r3, #0
   1e040:	moveq	r7, r2
   1e044:	ldr	r2, [sp, #4]
   1e048:	cmp	r5, #0
   1e04c:	rsblt	r7, r7, #0
   1e050:	cmp	r1, #0
   1e054:	stm	r4, {r2, r7}
   1e058:	str	r6, [r4, #8]
   1e05c:	beq	1df7c <__assert_fail@plt+0xcc5c>
   1e060:	movw	r2, #8484	; 0x2124
   1e064:	lsl	r1, r1, #2
   1e068:	movt	r2, #4
   1e06c:	ldr	r2, [r2]
   1e070:	sub	sp, fp, #28
   1e074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e078:	bx	r2
   1e07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e080:	add	fp, sp, #28
   1e084:	sub	sp, sp, #4
   1e088:	ldr	r5, [r1, #4]
   1e08c:	mov	r6, r1
   1e090:	mov	sl, r0
   1e094:	cmp	r5, #0
   1e098:	rsbmi	r5, r5, #0
   1e09c:	cmp	r5, #0
   1e0a0:	beq	1e0f8 <__assert_fail@plt+0xcdd8>
   1e0a4:	lsr	r9, r2, #5
   1e0a8:	ldr	r1, [sl]
   1e0ac:	mov	r4, #1
   1e0b0:	ands	r7, r2, #31
   1e0b4:	mov	r0, r9
   1e0b8:	addne	r0, r4, r2, lsr #5
   1e0bc:	add	r8, r0, r5
   1e0c0:	cmp	r8, r1
   1e0c4:	ble	1e100 <__assert_fail@plt+0xcde0>
   1e0c8:	cmp	r8, #1
   1e0cc:	movhi	r4, r8
   1e0d0:	cmp	r1, #0
   1e0d4:	beq	1e108 <__assert_fail@plt+0xcde8>
   1e0d8:	movw	r0, #8480	; 0x2120
   1e0dc:	lsl	r1, r1, #2
   1e0e0:	lsl	r2, r4, #2
   1e0e4:	movt	r0, #4
   1e0e8:	ldr	r3, [r0]
   1e0ec:	ldr	r0, [sl, #8]
   1e0f0:	blx	r3
   1e0f4:	b	1e11c <__assert_fail@plt+0xcdfc>
   1e0f8:	mov	r8, #0
   1e0fc:	b	1e25c <__assert_fail@plt+0xcf3c>
   1e100:	ldr	r0, [sl, #8]
   1e104:	b	1e13c <__assert_fail@plt+0xce1c>
   1e108:	movw	r0, #8476	; 0x211c
   1e10c:	movt	r0, #4
   1e110:	ldr	r1, [r0]
   1e114:	lsl	r0, r4, #2
   1e118:	blx	r1
   1e11c:	str	r0, [sl, #8]
   1e120:	str	r4, [sl]
   1e124:	ldr	r1, [sl, #4]
   1e128:	cmp	r1, #0
   1e12c:	rsbmi	r1, r1, #0
   1e130:	cmp	r1, r4
   1e134:	movgt	r1, #0
   1e138:	strgt	r1, [sl, #4]
   1e13c:	ldr	ip, [r6, #8]
   1e140:	cmp	r7, #0
   1e144:	beq	1e1bc <__assert_fail@plt+0xce9c>
   1e148:	cmp	r5, #0
   1e14c:	ble	1e268 <__assert_fail@plt+0xcf48>
   1e150:	add	r1, ip, r5, lsl #2
   1e154:	rsb	r4, r7, #32
   1e158:	cmp	r5, #1
   1e15c:	str	r6, [sp]
   1e160:	ldr	r1, [r1, #-4]
   1e164:	lsl	r3, r1, r7
   1e168:	lsr	lr, r1, r4
   1e16c:	beq	1e198 <__assert_fail@plt+0xce78>
   1e170:	add	r1, r0, r9, lsl #2
   1e174:	sub	r2, ip, #8
   1e178:	sub	r1, r1, #4
   1e17c:	ldr	r6, [r2, r5, lsl #2]
   1e180:	orr	r3, r3, r6, lsr r4
   1e184:	str	r3, [r1, r5, lsl #2]
   1e188:	sub	r5, r5, #1
   1e18c:	lsl	r3, r6, r7
   1e190:	cmp	r5, #1
   1e194:	bne	1e17c <__assert_fail@plt+0xce5c>
   1e198:	ldr	r6, [sp]
   1e19c:	sub	r1, r8, #1
   1e1a0:	cmp	lr, #0
   1e1a4:	str	r3, [r0, r9, lsl #2]
   1e1a8:	str	lr, [r0, r1, lsl #2]
   1e1ac:	moveq	r8, r1
   1e1b0:	cmp	r9, #0
   1e1b4:	bne	1e244 <__assert_fail@plt+0xcf24>
   1e1b8:	b	1e250 <__assert_fail@plt+0xcf30>
   1e1bc:	cmp	r5, #1
   1e1c0:	blt	1e23c <__assert_fail@plt+0xcf1c>
   1e1c4:	cmp	r5, #4
   1e1c8:	bcc	1e21c <__assert_fail@plt+0xcefc>
   1e1cc:	add	r1, r5, r9
   1e1d0:	add	r3, ip, r5, lsl #2
   1e1d4:	add	r2, r0, r9, lsl #2
   1e1d8:	add	r1, r0, r1, lsl #2
   1e1dc:	cmp	r2, r3
   1e1e0:	cmpcc	ip, r1
   1e1e4:	bcc	1e21c <__assert_fail@plt+0xcefc>
   1e1e8:	bic	lr, r5, #-2147483645	; 0x80000003
   1e1ec:	sub	r7, r3, #16
   1e1f0:	sub	r1, r1, #16
   1e1f4:	mvn	r4, #15
   1e1f8:	sub	r2, r5, lr
   1e1fc:	mov	r3, lr
   1e200:	vld1.32	{d16-d17}, [r7], r4
   1e204:	subs	r3, r3, #4
   1e208:	vst1.32	{d16-d17}, [r1], r4
   1e20c:	bne	1e200 <__assert_fail@plt+0xcee0>
   1e210:	cmp	r5, lr
   1e214:	bne	1e220 <__assert_fail@plt+0xcf00>
   1e218:	b	1e23c <__assert_fail@plt+0xcf1c>
   1e21c:	mov	r2, r5
   1e220:	add	r1, r0, r9, lsl #2
   1e224:	sub	r3, ip, #4
   1e228:	sub	r1, r1, #4
   1e22c:	ldr	r7, [r3, r2, lsl #2]
   1e230:	str	r7, [r1, r2, lsl #2]
   1e234:	subs	r2, r2, #1
   1e238:	bgt	1e22c <__assert_fail@plt+0xcf0c>
   1e23c:	cmp	r9, #0
   1e240:	beq	1e250 <__assert_fail@plt+0xcf30>
   1e244:	lsl	r2, r9, #2
   1e248:	mov	r1, #0
   1e24c:	bl	11248 <memset@plt>
   1e250:	ldr	r0, [r6, #4]
   1e254:	cmp	r0, #0
   1e258:	rsblt	r8, r8, #0
   1e25c:	str	r8, [sl, #4]
   1e260:	sub	sp, fp, #28
   1e264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e268:	movw	r0, #2145	; 0x861
   1e26c:	movw	r1, #1588	; 0x634
   1e270:	movw	r3, #2232	; 0x8b8
   1e274:	movw	r2, #659	; 0x293
   1e278:	movt	r0, #3
   1e27c:	movt	r1, #3
   1e280:	movt	r3, #3
   1e284:	bl	11320 <__assert_fail@plt>
   1e288:	push	{r4, r5, r6, r7, fp, lr}
   1e28c:	add	fp, sp, #16
   1e290:	sub	sp, sp, #16
   1e294:	mov	r5, r1
   1e298:	movw	r1, #1584	; 0x630
   1e29c:	mov	r4, r0
   1e2a0:	mov	r0, #0
   1e2a4:	cmp	r2, #0
   1e2a8:	movt	r1, #3
   1e2ac:	str	r0, [sp, #8]
   1e2b0:	str	r0, [sp, #4]
   1e2b4:	str	r1, [sp, #12]
   1e2b8:	beq	1e2ec <__assert_fail@plt+0xcfcc>
   1e2bc:	movw	r0, #8476	; 0x211c
   1e2c0:	mov	r7, #1
   1e2c4:	mov	r6, r2
   1e2c8:	movt	r0, #4
   1e2cc:	str	r7, [sp, #8]
   1e2d0:	ldr	r1, [r0]
   1e2d4:	mov	r0, #4
   1e2d8:	blx	r1
   1e2dc:	str	r7, [sp, #4]
   1e2e0:	str	r0, [sp, #12]
   1e2e4:	str	r6, [r0]
   1e2e8:	b	1e2f0 <__assert_fail@plt+0xcfd0>
   1e2ec:	str	r0, [sp, #8]
   1e2f0:	add	r6, sp, #4
   1e2f4:	mov	r1, r5
   1e2f8:	mov	r0, r6
   1e2fc:	mov	r2, r6
   1e300:	bl	1df50 <__assert_fail@plt+0xcc30>
   1e304:	mov	r0, r4
   1e308:	mov	r1, r4
   1e30c:	mov	r2, r6
   1e310:	bl	1d388 <__assert_fail@plt+0xc068>
   1e314:	ldr	r0, [sp, #4]
   1e318:	cmp	r0, #0
   1e31c:	beq	1e338 <__assert_fail@plt+0xd018>
   1e320:	movw	r1, #8484	; 0x2124
   1e324:	movt	r1, #4
   1e328:	ldr	r2, [r1]
   1e32c:	lsl	r1, r0, #2
   1e330:	ldr	r0, [sp, #12]
   1e334:	blx	r2
   1e338:	sub	sp, fp, #16
   1e33c:	pop	{r4, r5, r6, r7, fp, pc}
   1e340:	push	{r4, r5, r6, r7, fp, lr}
   1e344:	add	fp, sp, #16
   1e348:	sub	sp, sp, #16
   1e34c:	mov	r5, r1
   1e350:	movw	r1, #1584	; 0x630
   1e354:	mov	r4, r0
   1e358:	mov	r0, #0
   1e35c:	cmp	r2, #0
   1e360:	movt	r1, #3
   1e364:	str	r0, [sp, #8]
   1e368:	str	r0, [sp, #4]
   1e36c:	str	r1, [sp, #12]
   1e370:	beq	1e3a4 <__assert_fail@plt+0xd084>
   1e374:	movw	r0, #8476	; 0x211c
   1e378:	mov	r7, #1
   1e37c:	mov	r6, r2
   1e380:	movt	r0, #4
   1e384:	str	r7, [sp, #8]
   1e388:	ldr	r1, [r0]
   1e38c:	mov	r0, #4
   1e390:	blx	r1
   1e394:	str	r7, [sp, #4]
   1e398:	str	r0, [sp, #12]
   1e39c:	str	r6, [r0]
   1e3a0:	b	1e3a8 <__assert_fail@plt+0xd088>
   1e3a4:	str	r0, [sp, #8]
   1e3a8:	add	r6, sp, #4
   1e3ac:	mov	r1, r5
   1e3b0:	mov	r0, r6
   1e3b4:	mov	r2, r6
   1e3b8:	bl	1df50 <__assert_fail@plt+0xcc30>
   1e3bc:	mov	r0, r4
   1e3c0:	mov	r1, r4
   1e3c4:	mov	r2, r6
   1e3c8:	bl	1db64 <__assert_fail@plt+0xc844>
   1e3cc:	ldr	r0, [sp, #4]
   1e3d0:	cmp	r0, #0
   1e3d4:	beq	1e3f0 <__assert_fail@plt+0xd0d0>
   1e3d8:	movw	r1, #8484	; 0x2124
   1e3dc:	movt	r1, #4
   1e3e0:	ldr	r2, [r1]
   1e3e4:	lsl	r1, r0, #2
   1e3e8:	ldr	r0, [sp, #12]
   1e3ec:	blx	r2
   1e3f0:	sub	sp, fp, #16
   1e3f4:	pop	{r4, r5, r6, r7, fp, pc}
   1e3f8:	push	{r4, r5, fp, lr}
   1e3fc:	add	fp, sp, #8
   1e400:	sub	sp, sp, #16
   1e404:	mov	r4, r0
   1e408:	mov	r0, #0
   1e40c:	add	r5, sp, #4
   1e410:	str	r0, [sp, #8]
   1e414:	str	r0, [sp, #4]
   1e418:	movw	r0, #1584	; 0x630
   1e41c:	movt	r0, #3
   1e420:	str	r0, [sp, #12]
   1e424:	mov	r0, r5
   1e428:	bl	1df50 <__assert_fail@plt+0xcc30>
   1e42c:	mov	r0, r4
   1e430:	mov	r1, r4
   1e434:	mov	r2, r5
   1e438:	bl	1d388 <__assert_fail@plt+0xc068>
   1e43c:	ldr	r0, [sp, #4]
   1e440:	cmp	r0, #0
   1e444:	beq	1e460 <__assert_fail@plt+0xd140>
   1e448:	movw	r1, #8484	; 0x2124
   1e44c:	movt	r1, #4
   1e450:	ldr	r2, [r1]
   1e454:	lsl	r1, r0, #2
   1e458:	ldr	r0, [sp, #12]
   1e45c:	blx	r2
   1e460:	sub	sp, fp, #8
   1e464:	pop	{r4, r5, fp, pc}
   1e468:	push	{r4, r5, fp, lr}
   1e46c:	add	fp, sp, #8
   1e470:	sub	sp, sp, #16
   1e474:	mov	r4, r0
   1e478:	mov	r0, #0
   1e47c:	add	r5, sp, #4
   1e480:	str	r0, [sp, #8]
   1e484:	str	r0, [sp, #4]
   1e488:	movw	r0, #1584	; 0x630
   1e48c:	movt	r0, #3
   1e490:	str	r0, [sp, #12]
   1e494:	mov	r0, r5
   1e498:	bl	1df50 <__assert_fail@plt+0xcc30>
   1e49c:	mov	r0, r4
   1e4a0:	mov	r1, r4
   1e4a4:	mov	r2, r5
   1e4a8:	bl	1db64 <__assert_fail@plt+0xc844>
   1e4ac:	ldr	r0, [sp, #4]
   1e4b0:	cmp	r0, #0
   1e4b4:	beq	1e4d0 <__assert_fail@plt+0xd1b0>
   1e4b8:	movw	r1, #8484	; 0x2124
   1e4bc:	movt	r1, #4
   1e4c0:	ldr	r2, [r1]
   1e4c4:	lsl	r1, r0, #2
   1e4c8:	ldr	r0, [sp, #12]
   1e4cc:	blx	r2
   1e4d0:	sub	sp, fp, #8
   1e4d4:	pop	{r4, r5, fp, pc}
   1e4d8:	push	{fp, lr}
   1e4dc:	mov	fp, sp
   1e4e0:	sub	sp, sp, #8
   1e4e4:	mov	ip, #1
   1e4e8:	str	ip, [sp]
   1e4ec:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1e4f0:	mov	sp, fp
   1e4f4:	pop	{fp, pc}
   1e4f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4fc:	add	fp, sp, #28
   1e500:	sub	sp, sp, #84	; 0x54
   1e504:	mov	r6, r0
   1e508:	ldr	r0, [r3, #4]
   1e50c:	cmp	r0, #0
   1e510:	beq	1ec64 <__assert_fail@plt+0xd944>
   1e514:	ldr	r7, [r2, #4]
   1e518:	mov	r9, r2
   1e51c:	mov	r8, r1
   1e520:	cmp	r7, #0
   1e524:	beq	1e58c <__assert_fail@plt+0xd26c>
   1e528:	cmp	r0, #0
   1e52c:	mov	sl, r0
   1e530:	ldr	r2, [fp, #8]
   1e534:	mov	r4, r7
   1e538:	mov	r5, r3
   1e53c:	eor	r1, r0, r7
   1e540:	rsbmi	sl, r0, #0
   1e544:	cmp	r7, #0
   1e548:	rsbmi	r4, r7, #0
   1e54c:	cmp	r4, sl
   1e550:	bge	1e5a8 <__assert_fail@plt+0xd288>
   1e554:	cmp	r2, #1
   1e558:	bne	1e690 <__assert_fail@plt+0xd370>
   1e55c:	cmp	r1, #0
   1e560:	blt	1e690 <__assert_fail@plt+0xd370>
   1e564:	cmp	r8, #0
   1e568:	beq	1e57c <__assert_fail@plt+0xd25c>
   1e56c:	mov	r0, r8
   1e570:	mov	r1, r9
   1e574:	mov	r2, r5
   1e578:	bl	1db64 <__assert_fail@plt+0xc844>
   1e57c:	cmp	r6, #0
   1e580:	beq	1e6dc <__assert_fail@plt+0xd3bc>
   1e584:	mov	r0, #1
   1e588:	b	1e6c4 <__assert_fail@plt+0xd3a4>
   1e58c:	cmp	r6, #0
   1e590:	mov	r5, #0
   1e594:	movne	r0, #0
   1e598:	strne	r0, [r6, #4]
   1e59c:	cmp	r8, #0
   1e5a0:	strne	r5, [r8, #4]
   1e5a4:	b	1ec58 <__assert_fail@plt+0xd938>
   1e5a8:	mov	r2, #0
   1e5ac:	mov	r0, #0
   1e5b0:	str	r6, [sp, #40]	; 0x28
   1e5b4:	str	r1, [sp, #16]
   1e5b8:	str	r2, [sp, #48]	; 0x30
   1e5bc:	str	r0, [sp, #32]
   1e5c0:	movw	r0, #1584	; 0x630
   1e5c4:	str	r2, [sp, #44]	; 0x2c
   1e5c8:	add	r2, sp, #44	; 0x2c
   1e5cc:	movt	r0, #3
   1e5d0:	cmp	r2, r9
   1e5d4:	str	r0, [sp, #52]	; 0x34
   1e5d8:	beq	1e740 <__assert_fail@plt+0xd420>
   1e5dc:	cmp	r4, #1
   1e5e0:	blt	1e730 <__assert_fail@plt+0xd410>
   1e5e4:	movw	r0, #8476	; 0x211c
   1e5e8:	movt	r0, #4
   1e5ec:	ldr	r1, [r0]
   1e5f0:	lsl	r0, r4, #2
   1e5f4:	blx	r1
   1e5f8:	str	r0, [sp, #52]	; 0x34
   1e5fc:	str	r4, [sp, #44]	; 0x2c
   1e600:	mov	lr, #0
   1e604:	ldr	r1, [sp, #48]	; 0x30
   1e608:	cmp	r1, #0
   1e60c:	rsbmi	r1, r1, #0
   1e610:	cmp	r1, r4
   1e614:	movgt	r1, #0
   1e618:	strgt	r1, [sp, #48]	; 0x30
   1e61c:	cmp	r4, #4
   1e620:	ldr	ip, [r9, #8]
   1e624:	bcc	1e668 <__assert_fail@plt+0xd348>
   1e628:	add	r1, ip, r4, lsl #2
   1e62c:	cmp	r0, r1
   1e630:	bcs	1e640 <__assert_fail@plt+0xd320>
   1e634:	add	r1, r0, r4, lsl #2
   1e638:	cmp	r1, ip
   1e63c:	bhi	1e668 <__assert_fail@plt+0xd348>
   1e640:	bic	lr, r4, #-2147483645	; 0x80000003
   1e644:	mov	r3, r0
   1e648:	mov	r1, ip
   1e64c:	mov	r2, lr
   1e650:	vld1.32	{d16-d17}, [r1]!
   1e654:	subs	r2, r2, #4
   1e658:	vst1.32	{d16-d17}, [r3]!
   1e65c:	bne	1e650 <__assert_fail@plt+0xd330>
   1e660:	cmp	r4, lr
   1e664:	beq	1e684 <__assert_fail@plt+0xd364>
   1e668:	add	r6, ip, lr, lsl #2
   1e66c:	add	r2, r0, lr, lsl #2
   1e670:	sub	r1, r4, lr
   1e674:	ldr	r3, [r6], #4
   1e678:	subs	r1, r1, #1
   1e67c:	str	r3, [r2], #4
   1e680:	bne	1e674 <__assert_fail@plt+0xd354>
   1e684:	ldr	r2, [r9, #4]
   1e688:	ldr	r6, [sp, #40]	; 0x28
   1e68c:	b	1e73c <__assert_fail@plt+0xd41c>
   1e690:	cmp	r2, #0
   1e694:	bne	1e6e4 <__assert_fail@plt+0xd3c4>
   1e698:	cmn	r1, #1
   1e69c:	bgt	1e6e4 <__assert_fail@plt+0xd3c4>
   1e6a0:	cmp	r8, #0
   1e6a4:	beq	1e6b8 <__assert_fail@plt+0xd398>
   1e6a8:	mov	r0, r8
   1e6ac:	mov	r1, r9
   1e6b0:	mov	r2, r5
   1e6b4:	bl	1d388 <__assert_fail@plt+0xc068>
   1e6b8:	cmp	r6, #0
   1e6bc:	beq	1e6dc <__assert_fail@plt+0xd3bc>
   1e6c0:	mvn	r0, #0
   1e6c4:	str	r0, [r6, #4]
   1e6c8:	ldr	r1, [r6]
   1e6cc:	cmp	r1, #0
   1e6d0:	ble	1eb24 <__assert_fail@plt+0xd804>
   1e6d4:	ldr	r0, [r6, #8]
   1e6d8:	b	1eb80 <__assert_fail@plt+0xd860>
   1e6dc:	mov	r5, #1
   1e6e0:	b	1ec58 <__assert_fail@plt+0xd938>
   1e6e4:	cmp	r8, r9
   1e6e8:	cmpne	r8, #0
   1e6ec:	beq	1ec48 <__assert_fail@plt+0xd928>
   1e6f0:	ldr	r1, [r8]
   1e6f4:	cmp	r4, r1
   1e6f8:	ble	1eb8c <__assert_fail@plt+0xd86c>
   1e6fc:	cmp	r4, #1
   1e700:	mov	r7, r4
   1e704:	movle	r7, #1
   1e708:	cmp	r1, #0
   1e70c:	beq	1eb9c <__assert_fail@plt+0xd87c>
   1e710:	movw	r0, #8480	; 0x2120
   1e714:	lsl	r1, r1, #2
   1e718:	lsl	r2, r7, #2
   1e71c:	movt	r0, #4
   1e720:	ldr	r3, [r0]
   1e724:	ldr	r0, [r8, #8]
   1e728:	blx	r3
   1e72c:	b	1ebb0 <__assert_fail@plt+0xd890>
   1e730:	movw	r0, #1584	; 0x630
   1e734:	mov	r2, r7
   1e738:	movt	r0, #3
   1e73c:	str	r2, [sp, #48]	; 0x30
   1e740:	sub	r1, r4, sl
   1e744:	str	r8, [sp, #28]
   1e748:	cmp	r6, #0
   1e74c:	str	r0, [sp, #36]	; 0x24
   1e750:	add	r8, r1, #1
   1e754:	mov	r0, r1
   1e758:	str	r1, [sp, #12]
   1e75c:	beq	1e7a0 <__assert_fail@plt+0xd480>
   1e760:	mov	r0, #0
   1e764:	mvn	r1, #0
   1e768:	lsl	r2, r8, #5
   1e76c:	cmp	r0, r8, lsl #5
   1e770:	str	r0, [sp, #60]	; 0x3c
   1e774:	mov	r0, #1
   1e778:	addne	r2, r1, r8, lsl #5
   1e77c:	movw	r1, #8476	; 0x211c
   1e780:	movt	r1, #4
   1e784:	add	r0, r0, r2, lsr #5
   1e788:	ldr	r1, [r1]
   1e78c:	str	r0, [sp, #56]	; 0x38
   1e790:	lsl	r0, r0, #2
   1e794:	blx	r1
   1e798:	str	r0, [sp, #32]
   1e79c:	str	r0, [sp, #64]	; 0x40
   1e7a0:	cmp	sl, #0
   1e7a4:	str	r4, [sp, #20]
   1e7a8:	ble	1ec70 <__assert_fail@plt+0xd950>
   1e7ac:	ldr	r9, [r5, #8]
   1e7b0:	sub	r4, fp, #44	; 0x2c
   1e7b4:	mov	r2, sl
   1e7b8:	str	r5, [sp, #24]
   1e7bc:	mov	r0, r4
   1e7c0:	mov	r1, r9
   1e7c4:	bl	22490 <__assert_fail@plt+0x11170>
   1e7c8:	cmp	sl, #3
   1e7cc:	blt	1e890 <__assert_fail@plt+0xd570>
   1e7d0:	ldr	r6, [fp, #-44]	; 0xffffffd4
   1e7d4:	cmp	r6, #0
   1e7d8:	beq	1e890 <__assert_fail@plt+0xd570>
   1e7dc:	movw	r0, #8476	; 0x211c
   1e7e0:	movt	r0, #4
   1e7e4:	ldr	r1, [r0]
   1e7e8:	lsl	r0, sl, #2
   1e7ec:	str	r0, [sp, #8]
   1e7f0:	blx	r1
   1e7f4:	cmp	r6, #32
   1e7f8:	bcs	1ec90 <__assert_fail@plt+0xd970>
   1e7fc:	mov	lr, r0
   1e800:	add	r0, r9, sl, lsl #2
   1e804:	sub	r3, r9, #8
   1e808:	rsb	r1, r6, #32
   1e80c:	mov	r4, sl
   1e810:	ldr	ip, [r0, #-4]
   1e814:	sub	r0, lr, #4
   1e818:	lsl	r2, ip, r6
   1e81c:	ldr	r5, [r3, r4, lsl #2]
   1e820:	orr	r2, r2, r5, lsr r1
   1e824:	str	r2, [r0, r4, lsl #2]
   1e828:	sub	r4, r4, #1
   1e82c:	lsl	r2, r5, r6
   1e830:	cmp	r4, #1
   1e834:	bne	1e81c <__assert_fail@plt+0xd4fc>
   1e838:	mov	r0, #0
   1e83c:	ldr	r9, [sp, #24]
   1e840:	str	r2, [lr]
   1e844:	cmp	r0, ip, lsr r1
   1e848:	ldr	r1, [sp, #36]	; 0x24
   1e84c:	bne	1ecb0 <__assert_fail@plt+0xd990>
   1e850:	ldr	r4, [sp, #32]
   1e854:	ldr	r2, [sp, #20]
   1e858:	sub	r0, fp, #44	; 0x2c
   1e85c:	mov	r3, lr
   1e860:	str	sl, [sp]
   1e864:	mov	r5, lr
   1e868:	str	r0, [sp, #4]
   1e86c:	mov	r0, r4
   1e870:	bl	22710 <__assert_fail@plt+0x113f0>
   1e874:	movw	r0, #8484	; 0x2124
   1e878:	ldr	r1, [sp, #8]
   1e87c:	movt	r0, #4
   1e880:	ldr	r2, [r0]
   1e884:	mov	r0, r5
   1e888:	blx	r2
   1e88c:	b	1e8b4 <__assert_fail@plt+0xd594>
   1e890:	str	r4, [sp, #4]
   1e894:	ldr	r4, [sp, #32]
   1e898:	ldr	r1, [sp, #36]	; 0x24
   1e89c:	ldr	r2, [sp, #20]
   1e8a0:	mov	r3, r9
   1e8a4:	str	sl, [sp]
   1e8a8:	mov	r0, r4
   1e8ac:	bl	22710 <__assert_fail@plt+0x113f0>
   1e8b0:	ldr	r9, [sp, #24]
   1e8b4:	ldr	r3, [sp, #16]
   1e8b8:	cmp	r4, #0
   1e8bc:	beq	1e8e4 <__assert_fail@plt+0xd5c4>
   1e8c0:	ldr	r0, [sp, #12]
   1e8c4:	ldr	r0, [r4, r0, lsl #2]
   1e8c8:	cmp	r0, #0
   1e8cc:	subeq	r8, r8, #1
   1e8d0:	cmp	r3, #0
   1e8d4:	rsblt	r8, r8, #0
   1e8d8:	rsb	r0, r8, #0
   1e8dc:	str	r8, [sp, #60]	; 0x3c
   1e8e0:	b	1e8e8 <__assert_fail@plt+0xd5c8>
   1e8e4:	mov	r0, #0
   1e8e8:	ldr	r1, [sp, #36]	; 0x24
   1e8ec:	ldr	r6, [sp, #28]
   1e8f0:	sub	r1, r1, #4
   1e8f4:	mov	r5, sl
   1e8f8:	cmp	sl, #1
   1e8fc:	blt	1e910 <__assert_fail@plt+0xd5f0>
   1e900:	ldr	r2, [r1, r5, lsl #2]
   1e904:	sub	sl, r5, #1
   1e908:	cmp	r2, #0
   1e90c:	beq	1e8f4 <__assert_fail@plt+0xd5d4>
   1e910:	cmp	r7, #0
   1e914:	mov	r1, r5
   1e918:	rsblt	r1, r1, #0
   1e91c:	str	r1, [sp, #48]	; 0x30
   1e920:	ldr	r1, [fp, #8]
   1e924:	cmp	r1, #0
   1e928:	bne	1e9c8 <__assert_fail@plt+0xd6a8>
   1e92c:	cmn	r3, #1
   1e930:	bgt	1e9c8 <__assert_fail@plt+0xd6a8>
   1e934:	cmp	r5, #0
   1e938:	beq	1e9c8 <__assert_fail@plt+0xd6a8>
   1e93c:	ldr	r8, [sp, #40]	; 0x28
   1e940:	cmp	r8, #0
   1e944:	beq	1e9ac <__assert_fail@plt+0xd68c>
   1e948:	str	r0, [sp, #60]	; 0x3c
   1e94c:	movw	r0, #8476	; 0x211c
   1e950:	mov	r7, #1
   1e954:	movt	r0, #4
   1e958:	str	r7, [fp, #-40]	; 0xffffffd8
   1e95c:	ldr	r1, [r0]
   1e960:	mov	r0, #4
   1e964:	blx	r1
   1e968:	str	r7, [fp, #-44]	; 0xffffffd4
   1e96c:	str	r0, [fp, #-36]	; 0xffffffdc
   1e970:	mov	r4, r0
   1e974:	str	r7, [r0]
   1e978:	add	r0, sp, #56	; 0x38
   1e97c:	sub	r2, fp, #44	; 0x2c
   1e980:	mov	r1, r0
   1e984:	bl	1d388 <__assert_fail@plt+0xc068>
   1e988:	movw	r0, #8484	; 0x2124
   1e98c:	mov	r1, #4
   1e990:	movt	r0, #4
   1e994:	ldr	r2, [r0]
   1e998:	mov	r0, r4
   1e99c:	blx	r2
   1e9a0:	ldr	r0, [sp, #60]	; 0x3c
   1e9a4:	rsb	r0, r0, #0
   1e9a8:	str	r0, [sp, #60]	; 0x3c
   1e9ac:	cmp	r6, #0
   1e9b0:	beq	1ea58 <__assert_fail@plt+0xd738>
   1e9b4:	add	r0, sp, #44	; 0x2c
   1e9b8:	mov	r2, r9
   1e9bc:	mov	r1, r0
   1e9c0:	bl	1d388 <__assert_fail@plt+0xc068>
   1e9c4:	b	1ea58 <__assert_fail@plt+0xd738>
   1e9c8:	cmp	r1, #1
   1e9cc:	bne	1ea58 <__assert_fail@plt+0xd738>
   1e9d0:	cmp	r3, #0
   1e9d4:	blt	1ea58 <__assert_fail@plt+0xd738>
   1e9d8:	cmp	r5, #0
   1e9dc:	beq	1ea58 <__assert_fail@plt+0xd738>
   1e9e0:	ldr	r8, [sp, #40]	; 0x28
   1e9e4:	cmp	r8, #0
   1e9e8:	beq	1ea40 <__assert_fail@plt+0xd720>
   1e9ec:	movw	r0, #8476	; 0x211c
   1e9f0:	mov	r7, #1
   1e9f4:	movt	r0, #4
   1e9f8:	str	r7, [fp, #-40]	; 0xffffffd8
   1e9fc:	ldr	r1, [r0]
   1ea00:	mov	r0, #4
   1ea04:	blx	r1
   1ea08:	str	r7, [fp, #-44]	; 0xffffffd4
   1ea0c:	str	r0, [fp, #-36]	; 0xffffffdc
   1ea10:	mov	r4, r0
   1ea14:	str	r7, [r0]
   1ea18:	add	r0, sp, #56	; 0x38
   1ea1c:	sub	r2, fp, #44	; 0x2c
   1ea20:	mov	r1, r0
   1ea24:	bl	1d388 <__assert_fail@plt+0xc068>
   1ea28:	movw	r0, #8484	; 0x2124
   1ea2c:	mov	r1, #4
   1ea30:	movt	r0, #4
   1ea34:	ldr	r2, [r0]
   1ea38:	mov	r0, r4
   1ea3c:	blx	r2
   1ea40:	cmp	r6, #0
   1ea44:	beq	1ea58 <__assert_fail@plt+0xd738>
   1ea48:	add	r0, sp, #44	; 0x2c
   1ea4c:	mov	r2, r9
   1ea50:	mov	r1, r0
   1ea54:	bl	1db64 <__assert_fail@plt+0xc844>
   1ea58:	ldr	r3, [sp, #40]	; 0x28
   1ea5c:	cmp	r3, #0
   1ea60:	beq	1eab0 <__assert_fail@plt+0xd790>
   1ea64:	ldr	r0, [r3, #4]
   1ea68:	ldr	r1, [sp, #60]	; 0x3c
   1ea6c:	str	r0, [sp, #60]	; 0x3c
   1ea70:	str	r1, [r3, #4]
   1ea74:	ldr	r1, [r3]
   1ea78:	ldr	r0, [sp, #56]	; 0x38
   1ea7c:	str	r1, [sp, #56]	; 0x38
   1ea80:	str	r0, [r3]
   1ea84:	cmp	r1, #0
   1ea88:	ldr	r0, [r3, #8]
   1ea8c:	ldr	r2, [sp, #64]	; 0x40
   1ea90:	str	r0, [sp, #64]	; 0x40
   1ea94:	str	r2, [r3, #8]
   1ea98:	beq	1eab0 <__assert_fail@plt+0xd790>
   1ea9c:	movw	r2, #8484	; 0x2124
   1eaa0:	lsl	r1, r1, #2
   1eaa4:	movt	r2, #4
   1eaa8:	ldr	r2, [r2]
   1eaac:	blx	r2
   1eab0:	cmp	r6, #0
   1eab4:	beq	1eb14 <__assert_fail@plt+0xd7f4>
   1eab8:	ldr	r0, [r6, #4]
   1eabc:	ldr	r1, [sp, #48]	; 0x30
   1eac0:	str	r0, [sp, #48]	; 0x30
   1eac4:	str	r1, [r6, #4]
   1eac8:	ldr	r0, [r6]
   1eacc:	ldr	r1, [sp, #44]	; 0x2c
   1ead0:	str	r0, [sp, #44]	; 0x2c
   1ead4:	str	r1, [r6]
   1ead8:	ldr	r1, [r6, #8]
   1eadc:	ldr	r2, [sp, #52]	; 0x34
   1eae0:	str	r1, [sp, #52]	; 0x34
   1eae4:	str	r2, [r6, #8]
   1eae8:	cmp	r0, #0
   1eaec:	beq	1eb08 <__assert_fail@plt+0xd7e8>
   1eaf0:	movw	r1, #8484	; 0x2124
   1eaf4:	movt	r1, #4
   1eaf8:	ldr	r2, [r1]
   1eafc:	lsl	r1, r0, #2
   1eb00:	ldr	r0, [sp, #52]	; 0x34
   1eb04:	blx	r2
   1eb08:	cmp	r5, #0
   1eb0c:	movwne	r5, #1
   1eb10:	b	1ec58 <__assert_fail@plt+0xd938>
   1eb14:	ldr	r0, [sp, #44]	; 0x2c
   1eb18:	cmp	r0, #0
   1eb1c:	bne	1eaf0 <__assert_fail@plt+0xd7d0>
   1eb20:	b	1eb08 <__assert_fail@plt+0xd7e8>
   1eb24:	beq	1eb48 <__assert_fail@plt+0xd828>
   1eb28:	movw	r0, #8480	; 0x2120
   1eb2c:	lsl	r1, r1, #2
   1eb30:	mov	r2, #4
   1eb34:	movt	r0, #4
   1eb38:	ldr	r3, [r0]
   1eb3c:	ldr	r0, [r6, #8]
   1eb40:	blx	r3
   1eb44:	b	1eb5c <__assert_fail@plt+0xd83c>
   1eb48:	movw	r0, #8476	; 0x211c
   1eb4c:	movt	r0, #4
   1eb50:	ldr	r1, [r0]
   1eb54:	mov	r0, #4
   1eb58:	blx	r1
   1eb5c:	mov	r1, #1
   1eb60:	str	r0, [r6, #8]
   1eb64:	str	r1, [r6]
   1eb68:	ldr	r1, [r6, #4]
   1eb6c:	cmp	r1, #0
   1eb70:	rsbmi	r1, r1, #0
   1eb74:	cmp	r1, #2
   1eb78:	movge	r1, #0
   1eb7c:	strge	r1, [r6, #4]
   1eb80:	mov	r5, #1
   1eb84:	str	r5, [r0]
   1eb88:	b	1ec58 <__assert_fail@plt+0xd938>
   1eb8c:	ldr	r0, [r8, #8]
   1eb90:	cmp	r4, #1
   1eb94:	bge	1ebd8 <__assert_fail@plt+0xd8b8>
   1eb98:	b	1ec40 <__assert_fail@plt+0xd920>
   1eb9c:	movw	r0, #8476	; 0x211c
   1eba0:	movt	r0, #4
   1eba4:	ldr	r1, [r0]
   1eba8:	lsl	r0, r7, #2
   1ebac:	blx	r1
   1ebb0:	str	r0, [r8, #8]
   1ebb4:	str	r7, [r8]
   1ebb8:	ldr	r1, [r8, #4]
   1ebbc:	cmp	r1, #0
   1ebc0:	rsbmi	r1, r1, #0
   1ebc4:	cmp	r1, r7
   1ebc8:	movgt	r1, #0
   1ebcc:	strgt	r1, [r8, #4]
   1ebd0:	cmp	r4, #1
   1ebd4:	blt	1ec40 <__assert_fail@plt+0xd920>
   1ebd8:	ldr	r5, [r9, #8]
   1ebdc:	mov	r2, #0
   1ebe0:	cmp	r4, #4
   1ebe4:	bcc	1ec24 <__assert_fail@plt+0xd904>
   1ebe8:	add	r1, r5, r4, lsl #2
   1ebec:	cmp	r0, r1
   1ebf0:	addcc	r1, r0, r4, lsl #2
   1ebf4:	cmpcc	r5, r1
   1ebf8:	bcc	1ec24 <__assert_fail@plt+0xd904>
   1ebfc:	bic	r2, r4, #-2147483645	; 0x80000003
   1ec00:	mov	r7, r0
   1ec04:	mov	r1, r5
   1ec08:	mov	r3, r2
   1ec0c:	vld1.32	{d16-d17}, [r1]!
   1ec10:	subs	r3, r3, #4
   1ec14:	vst1.32	{d16-d17}, [r7]!
   1ec18:	bne	1ec0c <__assert_fail@plt+0xd8ec>
   1ec1c:	cmp	r4, r2
   1ec20:	beq	1ec40 <__assert_fail@plt+0xd920>
   1ec24:	add	r1, r5, r2, lsl #2
   1ec28:	add	r0, r0, r2, lsl #2
   1ec2c:	sub	r2, r4, r2
   1ec30:	ldr	r3, [r1], #4
   1ec34:	subs	r2, r2, #1
   1ec38:	str	r3, [r0], #4
   1ec3c:	bne	1ec30 <__assert_fail@plt+0xd910>
   1ec40:	ldr	r0, [r9, #4]
   1ec44:	str	r0, [r8, #4]
   1ec48:	cmp	r6, #0
   1ec4c:	mov	r5, #1
   1ec50:	movne	r0, #0
   1ec54:	strne	r0, [r6, #4]
   1ec58:	mov	r0, r5
   1ec5c:	sub	sp, fp, #28
   1ec60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec64:	movw	r0, #4885	; 0x1315
   1ec68:	movt	r0, #3
   1ec6c:	bl	22464 <__assert_fail@plt+0x11144>
   1ec70:	movw	r0, #4913	; 0x1331
   1ec74:	movw	r1, #1588	; 0x634
   1ec78:	movw	r3, #4920	; 0x1338
   1ec7c:	movw	r2, #1148	; 0x47c
   1ec80:	movt	r0, #3
   1ec84:	movt	r1, #3
   1ec88:	movt	r3, #3
   1ec8c:	bl	11320 <__assert_fail@plt>
   1ec90:	movw	r0, #2306	; 0x902
   1ec94:	movw	r1, #1588	; 0x634
   1ec98:	movw	r3, #2232	; 0x8b8
   1ec9c:	movw	r2, #661	; 0x295
   1eca0:	movt	r0, #3
   1eca4:	movt	r1, #3
   1eca8:	movt	r3, #3
   1ecac:	bl	11320 <__assert_fail@plt>
   1ecb0:	movw	r0, #2569	; 0xa09
   1ecb4:	movw	r1, #1588	; 0x634
   1ecb8:	movw	r3, #4920	; 0x1338
   1ecbc:	movw	r2, #1155	; 0x483
   1ecc0:	movt	r0, #3
   1ecc4:	movt	r1, #3
   1ecc8:	movt	r3, #3
   1eccc:	bl	11320 <__assert_fail@plt>
   1ecd0:	push	{fp, lr}
   1ecd4:	mov	fp, sp
   1ecd8:	sub	sp, sp, #8
   1ecdc:	mov	ip, #0
   1ece0:	str	ip, [sp]
   1ece4:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1ece8:	mov	sp, fp
   1ecec:	pop	{fp, pc}
   1ecf0:	push	{fp, lr}
   1ecf4:	mov	fp, sp
   1ecf8:	sub	sp, sp, #8
   1ecfc:	mov	ip, #2
   1ed00:	str	ip, [sp]
   1ed04:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1ed08:	mov	sp, fp
   1ed0c:	pop	{fp, pc}
   1ed10:	push	{fp, lr}
   1ed14:	mov	fp, sp
   1ed18:	sub	sp, sp, #8
   1ed1c:	mov	r3, r2
   1ed20:	mov	r2, r1
   1ed24:	mov	r1, #1
   1ed28:	str	r1, [sp]
   1ed2c:	mov	r1, #0
   1ed30:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1ed34:	mov	sp, fp
   1ed38:	pop	{fp, pc}
   1ed3c:	push	{fp, lr}
   1ed40:	mov	fp, sp
   1ed44:	sub	sp, sp, #8
   1ed48:	mov	r3, r2
   1ed4c:	mov	r2, r1
   1ed50:	mov	r1, #0
   1ed54:	str	r1, [sp]
   1ed58:	mov	r1, #0
   1ed5c:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1ed60:	mov	sp, fp
   1ed64:	pop	{fp, pc}
   1ed68:	push	{fp, lr}
   1ed6c:	mov	fp, sp
   1ed70:	sub	sp, sp, #8
   1ed74:	mov	r3, r2
   1ed78:	mov	r2, r1
   1ed7c:	mov	r1, #2
   1ed80:	str	r1, [sp]
   1ed84:	mov	r1, #0
   1ed88:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1ed8c:	mov	sp, fp
   1ed90:	pop	{fp, pc}
   1ed94:	push	{fp, lr}
   1ed98:	mov	fp, sp
   1ed9c:	sub	sp, sp, #8
   1eda0:	mov	r3, r2
   1eda4:	mov	r2, r1
   1eda8:	mov	r1, r0
   1edac:	mov	r0, #1
   1edb0:	str	r0, [sp]
   1edb4:	mov	r0, #0
   1edb8:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1edbc:	mov	sp, fp
   1edc0:	pop	{fp, pc}
   1edc4:	push	{fp, lr}
   1edc8:	mov	fp, sp
   1edcc:	sub	sp, sp, #8
   1edd0:	mov	r3, r2
   1edd4:	mov	r2, r1
   1edd8:	mov	r1, r0
   1eddc:	mov	r0, #0
   1ede0:	str	r0, [sp]
   1ede4:	mov	r0, #0
   1ede8:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1edec:	mov	sp, fp
   1edf0:	pop	{fp, pc}
   1edf4:	push	{fp, lr}
   1edf8:	mov	fp, sp
   1edfc:	sub	sp, sp, #8
   1ee00:	mov	r3, r2
   1ee04:	mov	r2, r1
   1ee08:	mov	r1, r0
   1ee0c:	mov	r0, #2
   1ee10:	str	r0, [sp]
   1ee14:	mov	r0, #0
   1ee18:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1ee1c:	mov	sp, fp
   1ee20:	pop	{fp, pc}
   1ee24:	push	{fp, lr}
   1ee28:	mov	fp, sp
   1ee2c:	sub	sp, sp, #8
   1ee30:	mov	r3, r2
   1ee34:	mov	r2, r1
   1ee38:	mov	r1, r0
   1ee3c:	ldr	r0, [r3, #4]
   1ee40:	lsr	r0, r0, #31
   1ee44:	str	r0, [sp]
   1ee48:	mov	r0, #0
   1ee4c:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1ee50:	mov	sp, fp
   1ee54:	pop	{fp, pc}
   1ee58:	mov	r3, #1
   1ee5c:	b	1ee60 <__assert_fail@plt+0xdb40>
   1ee60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee64:	add	fp, sp, #28
   1ee68:	sub	sp, sp, #20
   1ee6c:	ldr	r9, [r1, #4]
   1ee70:	mov	r8, r0
   1ee74:	cmp	r9, #0
   1ee78:	beq	1ef30 <__assert_fail@plt+0xdc10>
   1ee7c:	mov	r6, r9
   1ee80:	mov	r5, r1
   1ee84:	mov	r1, #0
   1ee88:	mov	r0, #0
   1ee8c:	and	r7, r2, #31
   1ee90:	lsr	lr, r2, #5
   1ee94:	mov	r4, #0
   1ee98:	rsbmi	r6, r9, #0
   1ee9c:	cmp	r9, #0
   1eea0:	movwgt	r1, #1
   1eea4:	sub	sl, r6, r2, lsr #5
   1eea8:	cmp	r1, r3
   1eeac:	bne	1eee0 <__assert_fail@plt+0xdbc0>
   1eeb0:	cmp	sl, #0
   1eeb4:	ble	1ef48 <__assert_fail@plt+0xdc28>
   1eeb8:	ldr	r1, [r5, #8]
   1eebc:	mov	r3, lr
   1eec0:	sub	r2, r1, #4
   1eec4:	cmp	r3, #1
   1eec8:	blt	1ef58 <__assert_fail@plt+0xdc38>
   1eecc:	ldr	r4, [r2, r3, lsl #2]
   1eed0:	sub	r3, r3, #1
   1eed4:	cmp	r4, #0
   1eed8:	beq	1eec4 <__assert_fail@plt+0xdba4>
   1eedc:	mov	r4, #1
   1eee0:	cmp	sl, #1
   1eee4:	blt	1f0a4 <__assert_fail@plt+0xdd84>
   1eee8:	ldr	r1, [r8]
   1eeec:	cmp	sl, r1
   1eef0:	ble	1ef40 <__assert_fail@plt+0xdc20>
   1eef4:	str	r4, [sp, #4]
   1eef8:	cmp	sl, #1
   1eefc:	mov	r4, sl
   1ef00:	str	lr, [sp]
   1ef04:	movle	r4, #1
   1ef08:	cmp	r1, #0
   1ef0c:	beq	1ef78 <__assert_fail@plt+0xdc58>
   1ef10:	movw	r0, #8480	; 0x2120
   1ef14:	lsl	r1, r1, #2
   1ef18:	lsl	r2, r4, #2
   1ef1c:	movt	r0, #4
   1ef20:	ldr	r3, [r0]
   1ef24:	ldr	r0, [r8, #8]
   1ef28:	blx	r3
   1ef2c:	b	1ef8c <__assert_fail@plt+0xdc6c>
   1ef30:	mov	r0, #0
   1ef34:	str	r0, [r8, #4]
   1ef38:	sub	sp, fp, #28
   1ef3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef40:	ldr	r0, [r8, #8]
   1ef44:	b	1efb4 <__assert_fail@plt+0xdc94>
   1ef48:	mov	r0, #0
   1ef4c:	mov	r7, r8
   1ef50:	str	r0, [r7, #4]!
   1ef54:	b	1f0b4 <__assert_fail@plt+0xdd94>
   1ef58:	ldr	r1, [r1, lr, lsl #2]
   1ef5c:	mvn	r2, #0
   1ef60:	bic	r4, r1, r2, lsl r7
   1ef64:	cmp	r4, #0
   1ef68:	movwne	r4, #1
   1ef6c:	cmp	sl, #1
   1ef70:	bge	1eee8 <__assert_fail@plt+0xdbc8>
   1ef74:	b	1f0a4 <__assert_fail@plt+0xdd84>
   1ef78:	movw	r0, #8476	; 0x211c
   1ef7c:	movt	r0, #4
   1ef80:	ldr	r1, [r0]
   1ef84:	lsl	r0, r4, #2
   1ef88:	blx	r1
   1ef8c:	str	r0, [r8, #8]
   1ef90:	str	r4, [r8]
   1ef94:	ldr	r1, [r8, #4]
   1ef98:	ldr	lr, [sp]
   1ef9c:	cmp	r1, #0
   1efa0:	rsbmi	r1, r1, #0
   1efa4:	cmp	r1, r4
   1efa8:	ldr	r4, [sp, #4]
   1efac:	movgt	r1, #0
   1efb0:	strgt	r1, [r8, #4]
   1efb4:	ldr	r1, [r5, #8]
   1efb8:	cmp	r7, #0
   1efbc:	add	r5, r1, lr, lsl #2
   1efc0:	beq	1f018 <__assert_fail@plt+0xdcf8>
   1efc4:	ldr	r2, [r5]
   1efc8:	subs	ip, sl, #1
   1efcc:	lsr	r3, r2, r7
   1efd0:	beq	1f08c <__assert_fail@plt+0xdd6c>
   1efd4:	mov	r2, lr
   1efd8:	str	r4, [sp, #4]
   1efdc:	rsb	r5, r7, #32
   1efe0:	mov	r4, r0
   1efe4:	add	r2, lr, #1
   1efe8:	add	r1, r1, r2, lsl #2
   1efec:	sub	r2, r2, r6
   1eff0:	ldr	r6, [r1], #4
   1eff4:	adds	r2, r2, #1
   1eff8:	orr	r3, r3, r6, lsl r5
   1effc:	str	r3, [r4], #4
   1f000:	lsr	r3, r6, r7
   1f004:	bne	1eff0 <__assert_fail@plt+0xdcd0>
   1f008:	ldr	r4, [sp, #4]
   1f00c:	add	r1, r0, ip, lsl #2
   1f010:	mov	r0, r1
   1f014:	b	1f090 <__assert_fail@plt+0xdd70>
   1f018:	sub	r2, r6, lr
   1f01c:	mov	r7, #0
   1f020:	cmp	r2, #3
   1f024:	bls	1f068 <__assert_fail@plt+0xdd48>
   1f028:	add	r3, r1, r6, lsl #2
   1f02c:	cmp	r0, r3
   1f030:	addcc	r3, r0, r2, lsl #2
   1f034:	cmpcc	r5, r3
   1f038:	bcc	1f068 <__assert_fail@plt+0xdd48>
   1f03c:	bic	r7, r2, #3
   1f040:	mov	ip, r4
   1f044:	mov	r4, r0
   1f048:	mov	r3, r7
   1f04c:	vld1.32	{d16-d17}, [r5]!
   1f050:	subs	r3, r3, #4
   1f054:	vst1.32	{d16-d17}, [r4]!
   1f058:	bne	1f04c <__assert_fail@plt+0xdd2c>
   1f05c:	cmp	r2, r7
   1f060:	mov	r4, ip
   1f064:	beq	1f0a0 <__assert_fail@plt+0xdd80>
   1f068:	add	r3, r7, lr
   1f06c:	add	r0, r0, r7, lsl #2
   1f070:	sub	r2, r2, r7
   1f074:	add	r1, r1, r3, lsl #2
   1f078:	ldr	r3, [r1], #4
   1f07c:	subs	r2, r2, #1
   1f080:	str	r3, [r0], #4
   1f084:	bne	1f078 <__assert_fail@plt+0xdd58>
   1f088:	b	1f0a0 <__assert_fail@plt+0xdd80>
   1f08c:	add	r1, r0, ip, lsl #2
   1f090:	str	r3, [r0]
   1f094:	ldr	r0, [r1]
   1f098:	cmp	r0, #0
   1f09c:	moveq	sl, ip
   1f0a0:	mov	r0, sl
   1f0a4:	mov	r7, r8
   1f0a8:	cmp	r4, #0
   1f0ac:	str	r0, [r7, #4]!
   1f0b0:	beq	1f108 <__assert_fail@plt+0xdde8>
   1f0b4:	movw	r0, #8476	; 0x211c
   1f0b8:	mov	r4, #1
   1f0bc:	movt	r0, #4
   1f0c0:	str	r4, [sp, #12]
   1f0c4:	ldr	r1, [r0]
   1f0c8:	mov	r0, #4
   1f0cc:	blx	r1
   1f0d0:	str	r4, [sp, #8]
   1f0d4:	str	r0, [sp, #16]
   1f0d8:	mov	r5, r0
   1f0dc:	str	r4, [r0]
   1f0e0:	add	r2, sp, #8
   1f0e4:	mov	r0, r8
   1f0e8:	mov	r1, r8
   1f0ec:	bl	1d388 <__assert_fail@plt+0xc068>
   1f0f0:	movw	r0, #8484	; 0x2124
   1f0f4:	mov	r1, #4
   1f0f8:	movt	r0, #4
   1f0fc:	ldr	r2, [r0]
   1f100:	mov	r0, r5
   1f104:	blx	r2
   1f108:	cmn	r9, #1
   1f10c:	ldrle	r0, [r7]
   1f110:	rsble	r0, r0, #0
   1f114:	strle	r0, [r7]
   1f118:	sub	sp, fp, #28
   1f11c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f120:	mov	r3, #0
   1f124:	b	1ee60 <__assert_fail@plt+0xdb40>
   1f128:	mov	r3, #2
   1f12c:	b	1ee60 <__assert_fail@plt+0xdb40>
   1f130:	mov	r3, #1
   1f134:	b	1f138 <__assert_fail@plt+0xde18>
   1f138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f13c:	add	fp, sp, #28
   1f140:	sub	sp, sp, #12
   1f144:	cmp	r2, #0
   1f148:	mov	r5, r0
   1f14c:	mov	r0, #0
   1f150:	ldrne	sl, [r1, #4]
   1f154:	movne	r7, r1
   1f158:	cmpne	sl, #0
   1f15c:	beq	1f5d8 <__assert_fail@plt+0xe2b8>
   1f160:	add	r8, r2, #31
   1f164:	mov	r0, #0
   1f168:	mov	r6, r2
   1f16c:	cmp	r0, r8, lsr #5
   1f170:	beq	1f604 <__assert_fail@plt+0xe2e4>
   1f174:	ldr	r1, [r5]
   1f178:	lsr	r4, r8, #5
   1f17c:	cmp	r4, r1
   1f180:	ble	1f1bc <__assert_fail@plt+0xde9c>
   1f184:	cmp	r4, #1
   1f188:	mov	r9, r4
   1f18c:	str	r3, [sp, #8]
   1f190:	movls	r9, #1
   1f194:	cmp	r1, #0
   1f198:	beq	1f1c4 <__assert_fail@plt+0xdea4>
   1f19c:	movw	r0, #8480	; 0x2120
   1f1a0:	lsl	r1, r1, #2
   1f1a4:	lsl	r2, r9, #2
   1f1a8:	movt	r0, #4
   1f1ac:	ldr	r3, [r0]
   1f1b0:	ldr	r0, [r5, #8]
   1f1b4:	blx	r3
   1f1b8:	b	1f1d8 <__assert_fail@plt+0xdeb8>
   1f1bc:	ldr	lr, [r5, #8]
   1f1c0:	b	1f200 <__assert_fail@plt+0xdee0>
   1f1c4:	movw	r0, #8476	; 0x211c
   1f1c8:	movt	r0, #4
   1f1cc:	ldr	r1, [r0]
   1f1d0:	lsl	r0, r9, #2
   1f1d4:	blx	r1
   1f1d8:	str	r0, [r5, #8]
   1f1dc:	str	r9, [r5]
   1f1e0:	mov	lr, r0
   1f1e4:	ldr	r0, [r5, #4]
   1f1e8:	ldr	r3, [sp, #8]
   1f1ec:	cmp	r0, #0
   1f1f0:	rsbmi	r0, r0, #0
   1f1f4:	cmp	r0, r9
   1f1f8:	movgt	r0, #0
   1f1fc:	strgt	r0, [r5, #4]
   1f200:	bic	r0, r8, #31
   1f204:	cmp	sl, #0
   1f208:	mov	r1, sl
   1f20c:	mvn	r2, #0
   1f210:	rsb	r9, sl, #0
   1f214:	rsbmi	r1, sl, #0
   1f218:	sub	r0, r0, r6
   1f21c:	lsr	ip, r2, r0
   1f220:	cmp	r4, r1
   1f224:	ble	1f258 <__assert_fail@plt+0xdf38>
   1f228:	mov	r0, #0
   1f22c:	cmp	sl, #0
   1f230:	movwgt	r0, #1
   1f234:	cmp	r0, r3
   1f238:	bne	1f36c <__assert_fail@plt+0xe04c>
   1f23c:	ldr	r0, [r7, #8]
   1f240:	ldr	r7, [r0]
   1f244:	cmp	r7, #0
   1f248:	beq	1f3f0 <__assert_fail@plt+0xe0d0>
   1f24c:	mov	r8, lr
   1f250:	mov	r3, r1
   1f254:	b	1f430 <__assert_fail@plt+0xe110>
   1f258:	ldr	r6, [r7, #8]
   1f25c:	str	r9, [sp, #8]
   1f260:	mov	r9, r3
   1f264:	sub	r0, r4, #1
   1f268:	cmp	r5, r7
   1f26c:	beq	1f2dc <__assert_fail@plt+0xdfbc>
   1f270:	cmp	r8, #64	; 0x40
   1f274:	bcc	1f2dc <__assert_fail@plt+0xdfbc>
   1f278:	mov	r2, #0
   1f27c:	cmp	r0, #4
   1f280:	bcc	1f2c0 <__assert_fail@plt+0xdfa0>
   1f284:	add	r1, r6, r0, lsl #2
   1f288:	cmp	lr, r1
   1f28c:	addcc	r1, lr, r0, lsl #2
   1f290:	cmpcc	r6, r1
   1f294:	bcc	1f2c0 <__assert_fail@plt+0xdfa0>
   1f298:	bic	r2, r0, #3
   1f29c:	mov	r7, lr
   1f2a0:	mov	r1, r6
   1f2a4:	mov	r3, r2
   1f2a8:	vld1.32	{d16-d17}, [r1]!
   1f2ac:	subs	r3, r3, #4
   1f2b0:	vst1.32	{d16-d17}, [r7]!
   1f2b4:	bne	1f2a8 <__assert_fail@plt+0xdf88>
   1f2b8:	cmp	r0, r2
   1f2bc:	beq	1f2dc <__assert_fail@plt+0xdfbc>
   1f2c0:	add	r3, r6, r2, lsl #2
   1f2c4:	add	r7, lr, r2, lsl #2
   1f2c8:	sub	r2, r0, r2
   1f2cc:	ldr	r1, [r3], #4
   1f2d0:	subs	r2, r2, #1
   1f2d4:	str	r1, [r7], #4
   1f2d8:	bne	1f2cc <__assert_fail@plt+0xdfac>
   1f2dc:	ldr	r1, [r6, r0, lsl #2]
   1f2e0:	cmp	sl, #0
   1f2e4:	and	r1, r1, ip
   1f2e8:	str	r1, [lr, r0, lsl #2]
   1f2ec:	mov	r1, #0
   1f2f0:	movwgt	r1, #1
   1f2f4:	cmp	r1, r9
   1f2f8:	bne	1f3e8 <__assert_fail@plt+0xe0c8>
   1f2fc:	ldr	r7, [lr]
   1f300:	ldr	r9, [sp, #8]
   1f304:	mov	r2, lr
   1f308:	mov	r1, r4
   1f30c:	cmp	r7, #0
   1f310:	bne	1f338 <__assert_fail@plt+0xe018>
   1f314:	mov	r3, #0
   1f318:	mov	r1, r4
   1f31c:	mov	r2, lr
   1f320:	subs	r1, r1, #1
   1f324:	str	r3, [r2]
   1f328:	beq	1f540 <__assert_fail@plt+0xe220>
   1f32c:	ldr	r7, [r2, #4]!
   1f330:	cmp	r7, #0
   1f334:	beq	1f320 <__assert_fail@plt+0xe000>
   1f338:	rsb	r3, r7, #0
   1f33c:	cmp	r1, #2
   1f340:	str	r3, [r2]
   1f344:	blt	1f540 <__assert_fail@plt+0xe220>
   1f348:	mvn	r3, r1
   1f34c:	cmn	r3, #3
   1f350:	mvnle	r3, #2
   1f354:	add	r3, r1, r3
   1f358:	add	r7, r3, #2
   1f35c:	cmp	r7, #4
   1f360:	bcs	1f4dc <__assert_fail@plt+0xe1bc>
   1f364:	mov	r3, r2
   1f368:	b	1f51c <__assert_fail@plt+0xe1fc>
   1f36c:	cmp	r5, r7
   1f370:	beq	1f3e4 <__assert_fail@plt+0xe0c4>
   1f374:	cmp	r1, #1
   1f378:	blt	1f3e4 <__assert_fail@plt+0xe0c4>
   1f37c:	ldr	r7, [r7, #8]
   1f380:	mov	r2, #0
   1f384:	cmp	r1, #4
   1f388:	bcc	1f3d0 <__assert_fail@plt+0xe0b0>
   1f38c:	add	r0, r7, r1, lsl #2
   1f390:	cmp	lr, r0
   1f394:	addcc	r0, lr, r1, lsl #2
   1f398:	cmpcc	r7, r0
   1f39c:	bcc	1f3d0 <__assert_fail@plt+0xe0b0>
   1f3a0:	bic	r2, r1, #-2147483645	; 0x80000003
   1f3a4:	mov	r6, r5
   1f3a8:	mov	r5, lr
   1f3ac:	mov	r0, r7
   1f3b0:	mov	r3, r2
   1f3b4:	vld1.32	{d16-d17}, [r0]!
   1f3b8:	subs	r3, r3, #4
   1f3bc:	vst1.32	{d16-d17}, [r5]!
   1f3c0:	bne	1f3b4 <__assert_fail@plt+0xe094>
   1f3c4:	cmp	r1, r2
   1f3c8:	mov	r5, r6
   1f3cc:	beq	1f3e4 <__assert_fail@plt+0xe0c4>
   1f3d0:	ldr	r0, [r7, r2, lsl #2]
   1f3d4:	str	r0, [lr, r2, lsl #2]
   1f3d8:	add	r2, r2, #1
   1f3dc:	cmp	r1, r2
   1f3e0:	bne	1f3d0 <__assert_fail@plt+0xe0b0>
   1f3e4:	mov	r4, r1
   1f3e8:	mov	r9, sl
   1f3ec:	b	1f5b0 <__assert_fail@plt+0xe290>
   1f3f0:	mov	r2, #0
   1f3f4:	mov	r3, #0
   1f3f8:	mov	r6, #0
   1f3fc:	add	r7, r1, r6
   1f400:	str	r2, [lr, -r6, lsl #2]
   1f404:	cmp	r7, #1
   1f408:	beq	1f5e4 <__assert_fail@plt+0xe2c4>
   1f40c:	sub	r7, r0, r6, lsl #2
   1f410:	sub	r3, r3, #4
   1f414:	sub	r6, r6, #1
   1f418:	ldr	r7, [r7, #4]
   1f41c:	cmp	r7, #0
   1f420:	beq	1f3fc <__assert_fail@plt+0xe0dc>
   1f424:	sub	r8, lr, r3
   1f428:	sub	r0, r0, r3
   1f42c:	add	r3, r1, r6
   1f430:	rsb	r2, r7, #0
   1f434:	cmp	r3, #2
   1f438:	str	r2, [r8]
   1f43c:	blt	1f57c <__assert_fail@plt+0xe25c>
   1f440:	mvn	r2, r3
   1f444:	mvn	r6, #2
   1f448:	mov	sl, ip
   1f44c:	mvn	r7, #2
   1f450:	cmn	r2, #3
   1f454:	movgt	r6, r2
   1f458:	add	r6, r3, r6
   1f45c:	add	ip, r6, #2
   1f460:	cmp	ip, #4
   1f464:	bcc	1f554 <__assert_fail@plt+0xe234>
   1f468:	cmn	r2, #3
   1f46c:	str	r5, [sp, #8]
   1f470:	add	r6, r8, #4
   1f474:	movgt	r7, r2
   1f478:	add	r2, r3, r7
   1f47c:	add	r7, r0, #4
   1f480:	add	r2, r2, #3
   1f484:	add	r5, r0, r2, lsl #2
   1f488:	cmp	r6, r5
   1f48c:	addcc	r2, r8, r2, lsl #2
   1f490:	cmpcc	r7, r2
   1f494:	bcc	1f550 <__assert_fail@plt+0xe230>
   1f498:	ldr	r5, [sp, #8]
   1f49c:	str	lr, [sp, #4]
   1f4a0:	bic	lr, ip, #3
   1f4a4:	add	r8, r8, lr, lsl #2
   1f4a8:	add	r0, r0, lr, lsl #2
   1f4ac:	sub	r3, r3, lr
   1f4b0:	mov	r2, lr
   1f4b4:	vld1.32	{d16-d17}, [r7]!
   1f4b8:	subs	r2, r2, #4
   1f4bc:	vmvn	q8, q8
   1f4c0:	vst1.32	{d16-d17}, [r6]!
   1f4c4:	bne	1f4b4 <__assert_fail@plt+0xe194>
   1f4c8:	cmp	ip, lr
   1f4cc:	ldr	lr, [sp, #4]
   1f4d0:	mov	ip, sl
   1f4d4:	bne	1f558 <__assert_fail@plt+0xe238>
   1f4d8:	b	1f57c <__assert_fail@plt+0xe25c>
   1f4dc:	mov	r8, ip
   1f4e0:	mov	ip, r5
   1f4e4:	bic	r5, r7, #3
   1f4e8:	add	r3, r2, r5, lsl #2
   1f4ec:	sub	r1, r1, r5
   1f4f0:	add	r2, r2, #4
   1f4f4:	mov	r6, r5
   1f4f8:	vld1.32	{d16-d17}, [r2]
   1f4fc:	subs	r6, r6, #4
   1f500:	vmvn	q8, q8
   1f504:	vst1.32	{d16-d17}, [r2]!
   1f508:	bne	1f4f8 <__assert_fail@plt+0xe1d8>
   1f50c:	cmp	r7, r5
   1f510:	mov	r5, ip
   1f514:	mov	ip, r8
   1f518:	beq	1f540 <__assert_fail@plt+0xe220>
   1f51c:	add	r2, r3, #4
   1f520:	add	r3, r3, #4
   1f524:	add	r1, r1, #1
   1f528:	ldr	r7, [r3], #4
   1f52c:	sub	r1, r1, #1
   1f530:	cmp	r1, #2
   1f534:	mvn	r7, r7
   1f538:	str	r7, [r2], #4
   1f53c:	bgt	1f528 <__assert_fail@plt+0xe208>
   1f540:	ldr	r1, [lr, r0, lsl #2]
   1f544:	and	r1, r1, ip
   1f548:	str	r1, [lr, r0, lsl #2]
   1f54c:	b	1f5b0 <__assert_fail@plt+0xe290>
   1f550:	ldr	r5, [sp, #8]
   1f554:	mov	ip, sl
   1f558:	add	r2, r8, #4
   1f55c:	add	r0, r0, #4
   1f560:	add	r3, r3, #1
   1f564:	ldr	r7, [r0], #4
   1f568:	sub	r3, r3, #1
   1f56c:	cmp	r3, #2
   1f570:	mvn	r7, r7
   1f574:	str	r7, [r2], #4
   1f578:	bgt	1f564 <__assert_fail@plt+0xe244>
   1f57c:	sub	r6, r4, #1
   1f580:	cmp	r6, r1
   1f584:	ble	1f5ac <__assert_fail@plt+0xe28c>
   1f588:	add	r0, lr, r1, lsl #2
   1f58c:	sub	r1, r6, r1
   1f590:	mov	r8, lr
   1f594:	mov	r7, ip
   1f598:	lsl	r2, r1, #2
   1f59c:	mov	r1, #255	; 0xff
   1f5a0:	bl	11248 <memset@plt>
   1f5a4:	mov	ip, r7
   1f5a8:	mov	lr, r8
   1f5ac:	str	ip, [lr, r6, lsl #2]
   1f5b0:	sub	r1, lr, #4
   1f5b4:	mov	r0, r4
   1f5b8:	cmp	r4, #1
   1f5bc:	blt	1f5d0 <__assert_fail@plt+0xe2b0>
   1f5c0:	ldr	r2, [r1, r0, lsl #2]
   1f5c4:	sub	r4, r0, #1
   1f5c8:	cmp	r2, #0
   1f5cc:	beq	1f5b4 <__assert_fail@plt+0xe294>
   1f5d0:	cmp	r9, #0
   1f5d4:	rsblt	r0, r0, #0
   1f5d8:	str	r0, [r5, #4]
   1f5dc:	sub	sp, fp, #28
   1f5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5e4:	movw	r0, #2569	; 0xa09
   1f5e8:	movw	r1, #1588	; 0x634
   1f5ec:	movw	r3, #4994	; 0x1382
   1f5f0:	movw	r2, #2443	; 0x98b
   1f5f4:	movt	r0, #3
   1f5f8:	movt	r1, #3
   1f5fc:	movt	r3, #3
   1f600:	bl	11320 <__assert_fail@plt>
   1f604:	movw	r0, #3900	; 0xf3c
   1f608:	movw	r1, #1588	; 0x634
   1f60c:	movw	r3, #4994	; 0x1382
   1f610:	movw	r2, #2427	; 0x97b
   1f614:	movt	r0, #3
   1f618:	movt	r1, #3
   1f61c:	movt	r3, #3
   1f620:	bl	11320 <__assert_fail@plt>
   1f624:	mov	r3, #0
   1f628:	b	1f138 <__assert_fail@plt+0xde18>
   1f62c:	mov	r3, #2
   1f630:	b	1f138 <__assert_fail@plt+0xde18>
   1f634:	push	{fp, lr}
   1f638:	mov	fp, sp
   1f63c:	sub	sp, sp, #8
   1f640:	mov	r3, r2
   1f644:	mov	r2, r1
   1f648:	mov	r1, #2
   1f64c:	str	r1, [sp]
   1f650:	mov	r1, #0
   1f654:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1f658:	cmp	r0, #0
   1f65c:	moveq	sp, fp
   1f660:	popeq	{fp, pc}
   1f664:	movw	r0, #2569	; 0xa09
   1f668:	movw	r1, #1588	; 0x634
   1f66c:	movw	r3, #2579	; 0xa13
   1f670:	movw	r2, #2521	; 0x9d9
   1f674:	movt	r0, #3
   1f678:	movt	r1, #3
   1f67c:	movt	r3, #3
   1f680:	bl	11320 <__assert_fail@plt>
   1f684:	push	{fp, lr}
   1f688:	mov	fp, sp
   1f68c:	sub	sp, sp, #8
   1f690:	mov	r2, r0
   1f694:	mov	r0, #2
   1f698:	mov	r3, r1
   1f69c:	mov	r1, #0
   1f6a0:	str	r0, [sp]
   1f6a4:	mov	r0, #0
   1f6a8:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1f6ac:	clz	r0, r0
   1f6b0:	lsr	r0, r0, #5
   1f6b4:	mov	sp, fp
   1f6b8:	pop	{fp, pc}
   1f6bc:	push	{r4, r5, fp, lr}
   1f6c0:	add	fp, sp, #8
   1f6c4:	sub	sp, sp, #16
   1f6c8:	mov	r5, r2
   1f6cc:	mov	r2, r1
   1f6d0:	mov	r1, r0
   1f6d4:	mov	r3, #0
   1f6d8:	mov	r4, #0
   1f6dc:	ldr	r0, [r5, #4]
   1f6e0:	cmp	r0, #0
   1f6e4:	movwgt	r3, #1
   1f6e8:	cmp	r3, r0, lsr #31
   1f6ec:	bne	1f73c <__assert_fail@plt+0xe41c>
   1f6f0:	ldr	r0, [r1, #4]
   1f6f4:	ldr	r3, [r2, #4]
   1f6f8:	cmp	r0, r3
   1f6fc:	bne	1f7e4 <__assert_fail@plt+0xe4c4>
   1f700:	cmp	r0, #0
   1f704:	blt	1f7a8 <__assert_fail@plt+0xe488>
   1f708:	ldr	r1, [r1, #8]
   1f70c:	ldr	r2, [r2, #8]
   1f710:	sub	r1, r1, #4
   1f714:	sub	r2, r2, #4
   1f718:	cmp	r0, #1
   1f71c:	blt	1f7e0 <__assert_fail@plt+0xe4c0>
   1f720:	sub	r3, r0, #1
   1f724:	ldr	r5, [r2, r0, lsl #2]
   1f728:	ldr	r0, [r1, r0, lsl #2]
   1f72c:	cmp	r0, r5
   1f730:	mov	r0, r3
   1f734:	beq	1f718 <__assert_fail@plt+0xe3f8>
   1f738:	b	1f7e4 <__assert_fail@plt+0xe4c4>
   1f73c:	movw	r0, #1584	; 0x630
   1f740:	str	r4, [sp, #8]
   1f744:	str	r4, [sp, #4]
   1f748:	add	r4, sp, #4
   1f74c:	movt	r0, #3
   1f750:	str	r0, [sp, #12]
   1f754:	mov	r0, r4
   1f758:	bl	1db64 <__assert_fail@plt+0xc844>
   1f75c:	mov	r0, #2
   1f760:	mov	r1, #0
   1f764:	mov	r2, r4
   1f768:	mov	r3, r5
   1f76c:	str	r0, [sp]
   1f770:	mov	r0, #0
   1f774:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1f778:	clz	r0, r0
   1f77c:	lsr	r4, r0, #5
   1f780:	ldr	r0, [sp, #4]
   1f784:	cmp	r0, #0
   1f788:	beq	1f7e4 <__assert_fail@plt+0xe4c4>
   1f78c:	movw	r1, #8484	; 0x2124
   1f790:	movt	r1, #4
   1f794:	ldr	r2, [r1]
   1f798:	lsl	r1, r0, #2
   1f79c:	ldr	r0, [sp, #12]
   1f7a0:	blx	r2
   1f7a4:	b	1f7e4 <__assert_fail@plt+0xe4c4>
   1f7a8:	ldr	r1, [r1, #8]
   1f7ac:	rsb	r3, r0, #0
   1f7b0:	ldr	r0, [r2, #8]
   1f7b4:	sub	r0, r0, #4
   1f7b8:	sub	r1, r1, #4
   1f7bc:	cmp	r3, #1
   1f7c0:	blt	1f7e0 <__assert_fail@plt+0xe4c0>
   1f7c4:	sub	r2, r3, #1
   1f7c8:	ldr	r5, [r1, r3, lsl #2]
   1f7cc:	ldr	r3, [r0, r3, lsl #2]
   1f7d0:	cmp	r3, r5
   1f7d4:	mov	r3, r2
   1f7d8:	beq	1f7bc <__assert_fail@plt+0xe49c>
   1f7dc:	b	1f7e4 <__assert_fail@plt+0xe4c4>
   1f7e0:	mov	r4, #1
   1f7e4:	mov	r0, r4
   1f7e8:	sub	sp, fp, #8
   1f7ec:	pop	{r4, r5, fp, pc}
   1f7f0:	push	{fp, lr}
   1f7f4:	mov	fp, sp
   1f7f8:	sub	sp, sp, #8
   1f7fc:	mov	ip, #1
   1f800:	str	ip, [sp]
   1f804:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1f808:	mov	sp, fp
   1f80c:	pop	{fp, pc}
   1f810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f814:	add	fp, sp, #28
   1f818:	sub	sp, sp, #28
   1f81c:	ldr	r9, [fp, #8]
   1f820:	mov	r4, r1
   1f824:	movw	r1, #1584	; 0x630
   1f828:	mov	r6, r0
   1f82c:	mov	r0, #0
   1f830:	mov	r8, r2
   1f834:	cmp	r3, #0
   1f838:	movt	r1, #3
   1f83c:	str	r0, [sp, #20]
   1f840:	str	r0, [sp, #16]
   1f844:	str	r0, [sp, #4]
   1f848:	str	r0, [sp, #8]
   1f84c:	str	r1, [sp, #24]
   1f850:	str	r1, [sp, #12]
   1f854:	beq	1f8bc <__assert_fail@plt+0xe59c>
   1f858:	movw	r0, #8476	; 0x211c
   1f85c:	mov	sl, #1
   1f860:	mov	r7, r3
   1f864:	movt	r0, #4
   1f868:	str	sl, [sp, #8]
   1f86c:	ldr	r1, [r0]
   1f870:	mov	r0, #4
   1f874:	blx	r1
   1f878:	str	sl, [sp, #4]
   1f87c:	str	r0, [sp, #12]
   1f880:	str	r7, [r0]
   1f884:	mov	r5, r0
   1f888:	add	r1, sp, #16
   1f88c:	add	r3, sp, #4
   1f890:	mov	r0, r6
   1f894:	mov	r2, r8
   1f898:	str	r9, [sp]
   1f89c:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1f8a0:	movw	r0, #8484	; 0x2124
   1f8a4:	mov	r1, #4
   1f8a8:	movt	r0, #4
   1f8ac:	ldr	r2, [r0]
   1f8b0:	mov	r0, r5
   1f8b4:	blx	r2
   1f8b8:	b	1f8d8 <__assert_fail@plt+0xe5b8>
   1f8bc:	str	r0, [sp, #8]
   1f8c0:	add	r1, sp, #16
   1f8c4:	add	r3, sp, #4
   1f8c8:	mov	r0, r6
   1f8cc:	mov	r2, r8
   1f8d0:	str	r9, [sp]
   1f8d4:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   1f8d8:	ldr	r0, [sp, #20]
   1f8dc:	cmp	r0, #0
   1f8e0:	ldrne	r1, [sp, #24]
   1f8e4:	ldrne	r5, [r1]
   1f8e8:	moveq	r5, #0
   1f8ec:	cmp	r4, #0
   1f8f0:	beq	1f94c <__assert_fail@plt+0xe62c>
   1f8f4:	ldr	r1, [r4, #4]
   1f8f8:	str	r0, [r4, #4]
   1f8fc:	str	r1, [sp, #20]
   1f900:	ldr	r0, [r4]
   1f904:	ldr	r1, [sp, #16]
   1f908:	str	r1, [r4]
   1f90c:	str	r0, [sp, #16]
   1f910:	ldr	r1, [r4, #8]
   1f914:	ldr	r2, [sp, #24]
   1f918:	str	r2, [r4, #8]
   1f91c:	str	r1, [sp, #24]
   1f920:	cmp	r0, #0
   1f924:	beq	1f940 <__assert_fail@plt+0xe620>
   1f928:	movw	r1, #8484	; 0x2124
   1f92c:	movt	r1, #4
   1f930:	ldr	r2, [r1]
   1f934:	lsl	r1, r0, #2
   1f938:	ldr	r0, [sp, #24]
   1f93c:	blx	r2
   1f940:	mov	r0, r5
   1f944:	sub	sp, fp, #28
   1f948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f94c:	ldr	r0, [sp, #16]
   1f950:	cmp	r0, #0
   1f954:	bne	1f928 <__assert_fail@plt+0xe608>
   1f958:	b	1f940 <__assert_fail@plt+0xe620>
   1f95c:	push	{fp, lr}
   1f960:	mov	fp, sp
   1f964:	sub	sp, sp, #8
   1f968:	mov	ip, #0
   1f96c:	str	ip, [sp]
   1f970:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1f974:	mov	sp, fp
   1f978:	pop	{fp, pc}
   1f97c:	push	{fp, lr}
   1f980:	mov	fp, sp
   1f984:	sub	sp, sp, #8
   1f988:	mov	ip, #2
   1f98c:	str	ip, [sp]
   1f990:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1f994:	mov	sp, fp
   1f998:	pop	{fp, pc}
   1f99c:	push	{fp, lr}
   1f9a0:	mov	fp, sp
   1f9a4:	sub	sp, sp, #8
   1f9a8:	mov	r3, r2
   1f9ac:	mov	r2, r1
   1f9b0:	mov	r1, #1
   1f9b4:	str	r1, [sp]
   1f9b8:	mov	r1, #0
   1f9bc:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1f9c0:	mov	sp, fp
   1f9c4:	pop	{fp, pc}
   1f9c8:	push	{fp, lr}
   1f9cc:	mov	fp, sp
   1f9d0:	sub	sp, sp, #8
   1f9d4:	mov	r3, r2
   1f9d8:	mov	r2, r1
   1f9dc:	mov	r1, #0
   1f9e0:	str	r1, [sp]
   1f9e4:	mov	r1, #0
   1f9e8:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1f9ec:	mov	sp, fp
   1f9f0:	pop	{fp, pc}
   1f9f4:	push	{fp, lr}
   1f9f8:	mov	fp, sp
   1f9fc:	sub	sp, sp, #8
   1fa00:	mov	r3, r2
   1fa04:	mov	r2, r1
   1fa08:	mov	r1, #2
   1fa0c:	str	r1, [sp]
   1fa10:	mov	r1, #0
   1fa14:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fa18:	mov	sp, fp
   1fa1c:	pop	{fp, pc}
   1fa20:	push	{fp, lr}
   1fa24:	mov	fp, sp
   1fa28:	sub	sp, sp, #8
   1fa2c:	mov	r3, r2
   1fa30:	mov	r2, r1
   1fa34:	mov	r1, r0
   1fa38:	mov	r0, #1
   1fa3c:	str	r0, [sp]
   1fa40:	mov	r0, #0
   1fa44:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fa48:	mov	sp, fp
   1fa4c:	pop	{fp, pc}
   1fa50:	push	{fp, lr}
   1fa54:	mov	fp, sp
   1fa58:	sub	sp, sp, #8
   1fa5c:	mov	r3, r2
   1fa60:	mov	r2, r1
   1fa64:	mov	r1, r0
   1fa68:	mov	r0, #0
   1fa6c:	str	r0, [sp]
   1fa70:	mov	r0, #0
   1fa74:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fa78:	mov	sp, fp
   1fa7c:	pop	{fp, pc}
   1fa80:	push	{fp, lr}
   1fa84:	mov	fp, sp
   1fa88:	sub	sp, sp, #8
   1fa8c:	mov	r3, r2
   1fa90:	mov	r2, r1
   1fa94:	mov	r1, r0
   1fa98:	mov	r0, #2
   1fa9c:	str	r0, [sp]
   1faa0:	mov	r0, #0
   1faa4:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1faa8:	mov	sp, fp
   1faac:	pop	{fp, pc}
   1fab0:	push	{fp, lr}
   1fab4:	mov	fp, sp
   1fab8:	sub	sp, sp, #8
   1fabc:	mov	r2, r0
   1fac0:	mov	r0, #1
   1fac4:	mov	r3, r1
   1fac8:	mov	r1, #0
   1facc:	str	r0, [sp]
   1fad0:	mov	r0, #0
   1fad4:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fad8:	mov	sp, fp
   1fadc:	pop	{fp, pc}
   1fae0:	push	{fp, lr}
   1fae4:	mov	fp, sp
   1fae8:	sub	sp, sp, #8
   1faec:	mov	r2, r0
   1faf0:	mov	r0, #0
   1faf4:	mov	r3, r1
   1faf8:	mov	r1, #0
   1fafc:	str	r0, [sp]
   1fb00:	mov	r0, #0
   1fb04:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fb08:	mov	sp, fp
   1fb0c:	pop	{fp, pc}
   1fb10:	push	{fp, lr}
   1fb14:	mov	fp, sp
   1fb18:	sub	sp, sp, #8
   1fb1c:	mov	r2, r0
   1fb20:	mov	r0, #2
   1fb24:	mov	r3, r1
   1fb28:	mov	r1, #0
   1fb2c:	str	r0, [sp]
   1fb30:	mov	r0, #0
   1fb34:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fb38:	mov	sp, fp
   1fb3c:	pop	{fp, pc}
   1fb40:	push	{fp, lr}
   1fb44:	mov	fp, sp
   1fb48:	sub	sp, sp, #8
   1fb4c:	mov	r3, r2
   1fb50:	mov	r2, r1
   1fb54:	mov	r1, r0
   1fb58:	mov	r0, #0
   1fb5c:	str	r0, [sp]
   1fb60:	mov	r0, #0
   1fb64:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fb68:	mov	sp, fp
   1fb6c:	pop	{fp, pc}
   1fb70:	push	{fp, lr}
   1fb74:	mov	fp, sp
   1fb78:	sub	sp, sp, #8
   1fb7c:	mov	r3, r2
   1fb80:	mov	r2, r1
   1fb84:	mov	r1, #2
   1fb88:	str	r1, [sp]
   1fb8c:	mov	r1, #0
   1fb90:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fb94:	cmp	r0, #0
   1fb98:	moveq	sp, fp
   1fb9c:	popeq	{fp, pc}
   1fba0:	movw	r0, #2569	; 0xa09
   1fba4:	movw	r1, #1588	; 0x634
   1fba8:	movw	r3, #2657	; 0xa61
   1fbac:	movw	r2, #2647	; 0xa57
   1fbb0:	movt	r0, #3
   1fbb4:	movt	r1, #3
   1fbb8:	movt	r3, #3
   1fbbc:	bl	11320 <__assert_fail@plt>
   1fbc0:	push	{fp, lr}
   1fbc4:	mov	fp, sp
   1fbc8:	sub	sp, sp, #8
   1fbcc:	mov	r2, r0
   1fbd0:	mov	r0, #2
   1fbd4:	mov	r3, r1
   1fbd8:	mov	r1, #0
   1fbdc:	str	r0, [sp]
   1fbe0:	mov	r0, #0
   1fbe4:	bl	1f810 <__assert_fail@plt+0xe4f0>
   1fbe8:	clz	r0, r0
   1fbec:	lsr	r0, r0, #5
   1fbf0:	mov	sp, fp
   1fbf4:	pop	{fp, pc}
   1fbf8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fbfc:	add	fp, sp, #24
   1fc00:	sub	sp, sp, #16
   1fc04:	mov	r5, r0
   1fc08:	movw	r0, #1584	; 0x630
   1fc0c:	mov	r4, #0
   1fc10:	mov	r6, r1
   1fc14:	cmp	r2, #0
   1fc18:	movt	r0, #3
   1fc1c:	str	r4, [sp, #8]
   1fc20:	str	r4, [sp, #4]
   1fc24:	str	r0, [sp, #12]
   1fc28:	beq	1fcdc <__assert_fail@plt+0xe9bc>
   1fc2c:	movw	r0, #8476	; 0x211c
   1fc30:	mov	r8, #1
   1fc34:	mov	r7, r2
   1fc38:	movt	r0, #4
   1fc3c:	str	r8, [sp, #8]
   1fc40:	ldr	r1, [r0]
   1fc44:	mov	r0, #4
   1fc48:	blx	r1
   1fc4c:	str	r8, [sp, #4]
   1fc50:	str	r0, [sp, #12]
   1fc54:	str	r7, [r0]
   1fc58:	add	r0, sp, #4
   1fc5c:	mov	r1, r6
   1fc60:	mov	r2, r0
   1fc64:	bl	1fd0c <__assert_fail@plt+0xe9ec>
   1fc68:	ldr	r0, [sp, #8]
   1fc6c:	cmp	r0, #0
   1fc70:	ldrne	r0, [sp, #12]
   1fc74:	ldrne	r4, [r0]
   1fc78:	cmp	r5, #0
   1fc7c:	beq	1fcfc <__assert_fail@plt+0xe9dc>
   1fc80:	ldr	r0, [r5, #4]
   1fc84:	ldr	r1, [sp, #8]
   1fc88:	str	r0, [sp, #8]
   1fc8c:	str	r1, [r5, #4]
   1fc90:	ldr	r0, [r5]
   1fc94:	ldr	r1, [sp, #4]
   1fc98:	str	r0, [sp, #4]
   1fc9c:	str	r1, [r5]
   1fca0:	ldr	r1, [r5, #8]
   1fca4:	ldr	r2, [sp, #12]
   1fca8:	str	r1, [sp, #12]
   1fcac:	str	r2, [r5, #8]
   1fcb0:	cmp	r0, #0
   1fcb4:	beq	1fcd0 <__assert_fail@plt+0xe9b0>
   1fcb8:	movw	r1, #8484	; 0x2124
   1fcbc:	movt	r1, #4
   1fcc0:	ldr	r2, [r1]
   1fcc4:	lsl	r1, r0, #2
   1fcc8:	ldr	r0, [sp, #12]
   1fccc:	blx	r2
   1fcd0:	mov	r0, r4
   1fcd4:	sub	sp, fp, #24
   1fcd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fcdc:	add	r0, sp, #4
   1fce0:	mov	r4, #0
   1fce4:	mov	r1, r6
   1fce8:	mov	r2, r0
   1fcec:	str	r4, [sp, #8]
   1fcf0:	bl	1fd0c <__assert_fail@plt+0xe9ec>
   1fcf4:	cmp	r5, #0
   1fcf8:	bne	1fc80 <__assert_fail@plt+0xe960>
   1fcfc:	ldr	r0, [sp, #4]
   1fd00:	cmp	r0, #0
   1fd04:	bne	1fcb8 <__assert_fail@plt+0xe998>
   1fd08:	b	1fcd0 <__assert_fail@plt+0xe9b0>
   1fd0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd10:	add	fp, sp, #28
   1fd14:	sub	sp, sp, #28
   1fd18:	mov	r7, r1
   1fd1c:	mov	r9, r2
   1fd20:	mov	r8, r0
   1fd24:	ldr	r4, [r7, #4]!
   1fd28:	cmp	r4, #0
   1fd2c:	beq	1ff18 <__assert_fail@plt+0xebf8>
   1fd30:	ldr	r0, [r9, #4]
   1fd34:	mov	r6, r1
   1fd38:	cmp	r0, #0
   1fd3c:	beq	1ff70 <__assert_fail@plt+0xec50>
   1fd40:	movw	r0, #1584	; 0x630
   1fd44:	add	r2, sp, #16
   1fd48:	mov	r1, #0
   1fd4c:	movt	r0, #3
   1fd50:	cmp	r2, r6
   1fd54:	str	r1, [sp, #20]
   1fd58:	str	r1, [sp, #16]
   1fd5c:	str	r1, [sp, #4]
   1fd60:	str	r1, [sp, #8]
   1fd64:	str	r0, [sp, #24]
   1fd68:	str	r0, [sp, #12]
   1fd6c:	beq	206e4 <__assert_fail@plt+0xf3c4>
   1fd70:	cmp	r4, #0
   1fd74:	mov	r5, r4
   1fd78:	rsbmi	r5, r4, #0
   1fd7c:	cmp	r5, #1
   1fd80:	blt	1fe28 <__assert_fail@plt+0xeb08>
   1fd84:	movw	r0, #8476	; 0x211c
   1fd88:	movt	r0, #4
   1fd8c:	ldr	r1, [r0]
   1fd90:	lsl	r0, r5, #2
   1fd94:	blx	r1
   1fd98:	str	r0, [sp, #24]
   1fd9c:	str	r5, [sp, #16]
   1fda0:	mov	r2, #0
   1fda4:	ldr	r1, [sp, #20]
   1fda8:	cmp	r1, #0
   1fdac:	rsbmi	r1, r1, #0
   1fdb0:	cmp	r1, r5
   1fdb4:	movgt	r1, #0
   1fdb8:	strgt	r1, [sp, #20]
   1fdbc:	cmp	r5, #4
   1fdc0:	ldr	r4, [r6, #8]
   1fdc4:	bcc	1fe08 <__assert_fail@plt+0xeae8>
   1fdc8:	add	r1, r4, r5, lsl #2
   1fdcc:	cmp	r0, r1
   1fdd0:	bcs	1fde0 <__assert_fail@plt+0xeac0>
   1fdd4:	add	r1, r0, r5, lsl #2
   1fdd8:	cmp	r1, r4
   1fddc:	bhi	1fe08 <__assert_fail@plt+0xeae8>
   1fde0:	bic	r2, r5, #-2147483645	; 0x80000003
   1fde4:	mov	r6, r0
   1fde8:	mov	r1, r4
   1fdec:	mov	r3, r2
   1fdf0:	vld1.32	{d16-d17}, [r1]!
   1fdf4:	subs	r3, r3, #4
   1fdf8:	vst1.32	{d16-d17}, [r6]!
   1fdfc:	bne	1fdf0 <__assert_fail@plt+0xead0>
   1fe00:	cmp	r5, r2
   1fe04:	beq	1fe24 <__assert_fail@plt+0xeb04>
   1fe08:	add	r1, r4, r2, lsl #2
   1fe0c:	add	r3, r0, r2, lsl #2
   1fe10:	sub	r2, r5, r2
   1fe14:	ldr	r6, [r1], #4
   1fe18:	subs	r2, r2, #1
   1fe1c:	str	r6, [r3], #4
   1fe20:	bne	1fe14 <__assert_fail@plt+0xeaf4>
   1fe24:	ldr	r4, [r7]
   1fe28:	rsb	r1, r4, #0
   1fe2c:	cmp	r4, #0
   1fe30:	movge	r1, r4
   1fe34:	cmp	r1, #0
   1fe38:	str	r1, [sp, #20]
   1fe3c:	beq	206e8 <__assert_fail@plt+0xf3c8>
   1fe40:	ldr	r2, [r0]
   1fe44:	mov	r1, #31
   1fe48:	cmp	r2, #0
   1fe4c:	bne	1fe68 <__assert_fail@plt+0xeb48>
   1fe50:	add	r0, r0, #4
   1fe54:	mov	r1, #31
   1fe58:	ldr	r2, [r0], #4
   1fe5c:	add	r1, r1, #32
   1fe60:	cmp	r2, #0
   1fe64:	beq	1fe58 <__assert_fail@plt+0xeb38>
   1fe68:	rsb	r0, r2, #0
   1fe6c:	and	r2, r2, r0
   1fe70:	mov	r0, #0
   1fe74:	cmp	r0, r2, lsr #24
   1fe78:	bne	1fe90 <__assert_fail@plt+0xeb70>
   1fe7c:	mov	r0, #0
   1fe80:	lsl	r2, r2, #8
   1fe84:	add	r0, r0, #8
   1fe88:	cmp	r2, #16777216	; 0x1000000
   1fe8c:	bcc	1fe80 <__assert_fail@plt+0xeb60>
   1fe90:	cmp	r2, #0
   1fe94:	blt	1fea8 <__assert_fail@plt+0xeb88>
   1fe98:	lsl	r2, r2, #1
   1fe9c:	add	r0, r0, #1
   1fea0:	cmn	r2, #1
   1fea4:	bgt	1fe98 <__assert_fail@plt+0xeb78>
   1fea8:	sub	r6, r1, r0
   1feac:	add	r0, sp, #16
   1feb0:	mov	r3, #2
   1feb4:	mov	r1, r0
   1feb8:	mov	r2, r6
   1febc:	bl	1ee60 <__assert_fail@plt+0xdb40>
   1fec0:	add	r0, sp, #4
   1fec4:	cmp	r0, r9
   1fec8:	beq	1ffc0 <__assert_fail@plt+0xeca0>
   1fecc:	ldr	r4, [r9, #4]
   1fed0:	ldr	r1, [sp, #4]
   1fed4:	cmp	r4, #0
   1fed8:	rsbmi	r4, r4, #0
   1fedc:	cmp	r4, r1
   1fee0:	ble	1ffd0 <__assert_fail@plt+0xecb0>
   1fee4:	cmp	r4, #1
   1fee8:	mov	r5, r4
   1feec:	movle	r5, #1
   1fef0:	cmp	r1, #0
   1fef4:	beq	20008 <__assert_fail@plt+0xece8>
   1fef8:	movw	r0, #8480	; 0x2120
   1fefc:	lsl	r1, r1, #2
   1ff00:	lsl	r2, r5, #2
   1ff04:	movt	r0, #4
   1ff08:	ldr	r3, [r0]
   1ff0c:	ldr	r0, [sp, #12]
   1ff10:	blx	r3
   1ff14:	b	2001c <__assert_fail@plt+0xecfc>
   1ff18:	mov	r6, r9
   1ff1c:	cmp	r8, r9
   1ff20:	ldr	r4, [r6, #4]!
   1ff24:	beq	1ffc8 <__assert_fail@plt+0xeca8>
   1ff28:	ldr	r1, [r8]
   1ff2c:	cmp	r4, #0
   1ff30:	rsbmi	r4, r4, #0
   1ff34:	cmp	r4, r1
   1ff38:	ble	1ffe0 <__assert_fail@plt+0xecc0>
   1ff3c:	cmp	r4, #1
   1ff40:	mov	r5, r4
   1ff44:	movle	r5, #1
   1ff48:	cmp	r1, #0
   1ff4c:	beq	203f0 <__assert_fail@plt+0xf0d0>
   1ff50:	movw	r0, #8480	; 0x2120
   1ff54:	lsl	r1, r1, #2
   1ff58:	lsl	r2, r5, #2
   1ff5c:	movt	r0, #4
   1ff60:	ldr	r3, [r0]
   1ff64:	ldr	r0, [r8, #8]
   1ff68:	blx	r3
   1ff6c:	b	20404 <__assert_fail@plt+0xf0e4>
   1ff70:	cmp	r8, r6
   1ff74:	beq	1fff0 <__assert_fail@plt+0xecd0>
   1ff78:	ldr	r1, [r8]
   1ff7c:	cmp	r4, #0
   1ff80:	rsbmi	r4, r4, #0
   1ff84:	cmp	r4, r1
   1ff88:	ble	1fff8 <__assert_fail@plt+0xecd8>
   1ff8c:	cmp	r4, #1
   1ff90:	mov	r5, r4
   1ff94:	movle	r5, #1
   1ff98:	cmp	r1, #0
   1ff9c:	beq	2049c <__assert_fail@plt+0xf17c>
   1ffa0:	movw	r0, #8480	; 0x2120
   1ffa4:	lsl	r1, r1, #2
   1ffa8:	lsl	r2, r5, #2
   1ffac:	movt	r0, #4
   1ffb0:	ldr	r3, [r0]
   1ffb4:	ldr	r0, [r8, #8]
   1ffb8:	blx	r3
   1ffbc:	b	204b0 <__assert_fail@plt+0xf190>
   1ffc0:	ldr	r0, [sp, #8]
   1ffc4:	b	200b4 <__assert_fail@plt+0xed94>
   1ffc8:	mov	r8, r6
   1ffcc:	b	20548 <__assert_fail@plt+0xf228>
   1ffd0:	ldr	r0, [sp, #12]
   1ffd4:	cmp	r4, #1
   1ffd8:	bge	20044 <__assert_fail@plt+0xed24>
   1ffdc:	b	200ac <__assert_fail@plt+0xed8c>
   1ffe0:	ldr	r0, [r8, #8]
   1ffe4:	cmp	r4, #1
   1ffe8:	bge	2042c <__assert_fail@plt+0xf10c>
   1ffec:	b	20494 <__assert_fail@plt+0xf174>
   1fff0:	mov	r8, r7
   1fff4:	b	20548 <__assert_fail@plt+0xf228>
   1fff8:	ldr	r0, [r8, #8]
   1fffc:	cmp	r4, #1
   20000:	bge	204d8 <__assert_fail@plt+0xf1b8>
   20004:	b	20540 <__assert_fail@plt+0xf220>
   20008:	movw	r0, #8476	; 0x211c
   2000c:	movt	r0, #4
   20010:	ldr	r1, [r0]
   20014:	lsl	r0, r5, #2
   20018:	blx	r1
   2001c:	str	r0, [sp, #12]
   20020:	str	r5, [sp, #4]
   20024:	ldr	r1, [sp, #8]
   20028:	cmp	r1, #0
   2002c:	rsbmi	r1, r1, #0
   20030:	cmp	r1, r5
   20034:	movgt	r1, #0
   20038:	strgt	r1, [sp, #8]
   2003c:	cmp	r4, #1
   20040:	blt	200ac <__assert_fail@plt+0xed8c>
   20044:	ldr	r5, [r9, #8]
   20048:	mov	r2, #0
   2004c:	cmp	r4, #4
   20050:	bcc	20090 <__assert_fail@plt+0xed70>
   20054:	add	r1, r5, r4, lsl #2
   20058:	cmp	r0, r1
   2005c:	addcc	r1, r0, r4, lsl #2
   20060:	cmpcc	r5, r1
   20064:	bcc	20090 <__assert_fail@plt+0xed70>
   20068:	bic	r2, r4, #-2147483645	; 0x80000003
   2006c:	mov	r7, r0
   20070:	mov	r1, r5
   20074:	mov	r3, r2
   20078:	vld1.32	{d16-d17}, [r1]!
   2007c:	subs	r3, r3, #4
   20080:	vst1.32	{d16-d17}, [r7]!
   20084:	bne	20078 <__assert_fail@plt+0xed58>
   20088:	cmp	r4, r2
   2008c:	beq	200ac <__assert_fail@plt+0xed8c>
   20090:	add	r1, r5, r2, lsl #2
   20094:	add	r0, r0, r2, lsl #2
   20098:	sub	r2, r4, r2
   2009c:	ldr	r3, [r1], #4
   200a0:	subs	r2, r2, #1
   200a4:	str	r3, [r0], #4
   200a8:	bne	2009c <__assert_fail@plt+0xed7c>
   200ac:	ldr	r0, [r9, #4]
   200b0:	str	r0, [sp, #8]
   200b4:	cmp	r0, #0
   200b8:	rsbmi	r0, r0, #0
   200bc:	cmp	r0, #0
   200c0:	str	r0, [sp, #8]
   200c4:	ble	206e8 <__assert_fail@plt+0xf3c8>
   200c8:	ldr	r2, [sp, #12]
   200cc:	mov	r0, #31
   200d0:	ldr	r1, [r2]
   200d4:	cmp	r1, #0
   200d8:	bne	200f4 <__assert_fail@plt+0xedd4>
   200dc:	add	r2, r2, #4
   200e0:	mov	r0, #31
   200e4:	ldr	r1, [r2], #4
   200e8:	add	r0, r0, #32
   200ec:	cmp	r1, #0
   200f0:	beq	200e4 <__assert_fail@plt+0xedc4>
   200f4:	rsb	r2, r1, #0
   200f8:	and	r2, r1, r2
   200fc:	mov	r1, #0
   20100:	cmp	r1, r2, lsr #24
   20104:	bne	2011c <__assert_fail@plt+0xedfc>
   20108:	mov	r1, #0
   2010c:	lsl	r2, r2, #8
   20110:	add	r1, r1, #8
   20114:	cmp	r2, #16777216	; 0x1000000
   20118:	bcc	2010c <__assert_fail@plt+0xedec>
   2011c:	cmp	r2, #0
   20120:	blt	20134 <__assert_fail@plt+0xee14>
   20124:	lsl	r2, r2, #1
   20128:	add	r1, r1, #1
   2012c:	cmn	r2, #1
   20130:	bgt	20124 <__assert_fail@plt+0xee04>
   20134:	sub	sl, r0, r1
   20138:	add	r0, sp, #4
   2013c:	mov	r3, #2
   20140:	mov	r4, #2
   20144:	mov	r1, r0
   20148:	mov	r2, sl
   2014c:	bl	1ee60 <__assert_fail@plt+0xdb40>
   20150:	ldr	r0, [sp, #8]
   20154:	ldr	r1, [sp, #20]
   20158:	cmp	r6, sl
   2015c:	movcc	sl, r6
   20160:	cmp	r1, r0
   20164:	bge	20190 <__assert_fail@plt+0xee70>
   20168:	str	r1, [sp, #8]
   2016c:	str	r0, [sp, #20]
   20170:	ldr	r0, [sp, #16]
   20174:	ldr	r1, [sp, #24]
   20178:	ldr	r2, [sp, #4]
   2017c:	ldr	r3, [sp, #12]
   20180:	str	r2, [sp, #16]
   20184:	str	r0, [sp, #4]
   20188:	str	r3, [sp, #24]
   2018c:	str	r1, [sp, #12]
   20190:	add	r1, sp, #16
   20194:	add	r3, sp, #4
   20198:	mov	r0, #0
   2019c:	str	r4, [sp]
   201a0:	mov	r2, r1
   201a4:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   201a8:	ldr	r0, [sp, #20]
   201ac:	cmp	r0, #0
   201b0:	beq	20360 <__assert_fail@plt+0xf040>
   201b4:	cmp	r0, #1
   201b8:	blt	206e8 <__assert_fail@plt+0xf3c8>
   201bc:	add	r9, sp, #16
   201c0:	add	r5, sp, #4
   201c4:	ldr	r2, [sp, #24]
   201c8:	mov	r0, #31
   201cc:	ldr	r1, [r2]
   201d0:	cmp	r1, #0
   201d4:	bne	201f0 <__assert_fail@plt+0xeed0>
   201d8:	add	r2, r2, #4
   201dc:	mov	r0, #31
   201e0:	ldr	r1, [r2], #4
   201e4:	add	r0, r0, #32
   201e8:	cmp	r1, #0
   201ec:	beq	201e0 <__assert_fail@plt+0xeec0>
   201f0:	rsb	r2, r1, #0
   201f4:	and	r2, r1, r2
   201f8:	mov	r1, #0
   201fc:	cmp	r1, r2, lsr #24
   20200:	bne	20218 <__assert_fail@plt+0xeef8>
   20204:	mov	r1, #0
   20208:	lsl	r2, r2, #8
   2020c:	add	r1, r1, #8
   20210:	cmp	r2, #16777216	; 0x1000000
   20214:	bcc	20208 <__assert_fail@plt+0xeee8>
   20218:	cmp	r2, #0
   2021c:	blt	20230 <__assert_fail@plt+0xef10>
   20220:	lsl	r2, r2, #1
   20224:	add	r1, r1, #1
   20228:	cmn	r2, #1
   2022c:	bgt	20220 <__assert_fail@plt+0xef00>
   20230:	sub	r2, r0, r1
   20234:	mov	r0, r9
   20238:	mov	r1, r9
   2023c:	mov	r3, #2
   20240:	bl	1ee60 <__assert_fail@plt+0xdb40>
   20244:	ldr	r7, [sp, #8]
   20248:	ldr	r1, [sp, #20]
   2024c:	cmp	r1, r7
   20250:	bne	2029c <__assert_fail@plt+0xef7c>
   20254:	cmp	r1, #0
   20258:	blt	20300 <__assert_fail@plt+0xefe0>
   2025c:	ldr	r3, [sp, #12]
   20260:	ldr	r2, [sp, #24]
   20264:	mov	ip, r5
   20268:	mov	r0, r1
   2026c:	sub	r4, r3, #4
   20270:	subs	r5, r0, #1
   20274:	blt	20334 <__assert_fail@plt+0xf014>
   20278:	ldr	r6, [r4, r0, lsl #2]
   2027c:	add	r0, r2, r0, lsl #2
   20280:	ldr	r0, [r0, #-4]
   20284:	cmp	r0, r6
   20288:	mov	r0, r5
   2028c:	beq	20270 <__assert_fail@plt+0xef50>
   20290:	mov	r5, ip
   20294:	bls	202a8 <__assert_fail@plt+0xef88>
   20298:	b	202d8 <__assert_fail@plt+0xefb8>
   2029c:	bge	202d4 <__assert_fail@plt+0xefb4>
   202a0:	ldr	r3, [sp, #12]
   202a4:	ldr	r2, [sp, #24]
   202a8:	str	r1, [sp, #8]
   202ac:	str	r2, [sp, #12]
   202b0:	str	r7, [sp, #20]
   202b4:	str	r3, [sp, #24]
   202b8:	ldr	r0, [sp, #16]
   202bc:	ldr	r2, [sp, #4]
   202c0:	str	r2, [sp, #16]
   202c4:	str	r0, [sp, #4]
   202c8:	cmp	r1, #1
   202cc:	bne	202e0 <__assert_fail@plt+0xefc0>
   202d0:	b	2055c <__assert_fail@plt+0xf23c>
   202d4:	mov	r1, r7
   202d8:	cmp	r1, #1
   202dc:	beq	2055c <__assert_fail@plt+0xf23c>
   202e0:	mov	r0, r9
   202e4:	mov	r1, r9
   202e8:	mov	r2, r5
   202ec:	bl	1db64 <__assert_fail@plt+0xc844>
   202f0:	ldr	r0, [sp, #20]
   202f4:	cmp	r0, #0
   202f8:	bgt	201c4 <__assert_fail@plt+0xeea4>
   202fc:	b	206e8 <__assert_fail@plt+0xf3c8>
   20300:	ldr	r2, [sp, #24]
   20304:	ldr	r3, [sp, #12]
   20308:	mvn	r4, r1
   2030c:	add	r0, r4, #1
   20310:	cmp	r0, #1
   20314:	blt	20334 <__assert_fail@plt+0xf014>
   20318:	ldr	r0, [r2, r4, lsl #2]
   2031c:	ldr	r6, [r3, r4, lsl #2]
   20320:	sub	r4, r4, #1
   20324:	cmp	r6, r0
   20328:	beq	2030c <__assert_fail@plt+0xefec>
   2032c:	bls	202a8 <__assert_fail@plt+0xef88>
   20330:	b	202d8 <__assert_fail@plt+0xefb8>
   20334:	ldr	r0, [r8, #4]
   20338:	str	r1, [r8, #4]
   2033c:	str	r0, [sp, #20]
   20340:	ldr	r0, [r8]
   20344:	ldr	r1, [sp, #16]
   20348:	str	r1, [r8]
   2034c:	str	r0, [sp, #16]
   20350:	ldr	r0, [r8, #8]
   20354:	str	r2, [r8, #8]
   20358:	str	r0, [sp, #24]
   2035c:	b	20390 <__assert_fail@plt+0xf070>
   20360:	ldr	r0, [r8, #4]
   20364:	ldr	r1, [sp, #8]
   20368:	str	r1, [r8, #4]
   2036c:	str	r0, [sp, #8]
   20370:	ldr	r0, [r8]
   20374:	ldr	r1, [sp, #4]
   20378:	str	r1, [r8]
   2037c:	str	r0, [sp, #4]
   20380:	ldr	r0, [r8, #8]
   20384:	ldr	r1, [sp, #12]
   20388:	str	r1, [r8, #8]
   2038c:	str	r0, [sp, #12]
   20390:	ldr	r0, [sp, #16]
   20394:	cmp	r0, #0
   20398:	beq	203b4 <__assert_fail@plt+0xf094>
   2039c:	movw	r1, #8484	; 0x2124
   203a0:	movt	r1, #4
   203a4:	ldr	r2, [r1]
   203a8:	lsl	r1, r0, #2
   203ac:	ldr	r0, [sp, #24]
   203b0:	blx	r2
   203b4:	ldr	r0, [sp, #4]
   203b8:	cmp	r0, #0
   203bc:	beq	203d8 <__assert_fail@plt+0xf0b8>
   203c0:	movw	r1, #8484	; 0x2124
   203c4:	movt	r1, #4
   203c8:	ldr	r2, [r1]
   203cc:	lsl	r1, r0, #2
   203d0:	ldr	r0, [sp, #12]
   203d4:	blx	r2
   203d8:	mov	r0, r8
   203dc:	mov	r1, r8
   203e0:	mov	r2, sl
   203e4:	bl	1e07c <__assert_fail@plt+0xcd5c>
   203e8:	sub	sp, fp, #28
   203ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203f0:	movw	r0, #8476	; 0x211c
   203f4:	movt	r0, #4
   203f8:	ldr	r1, [r0]
   203fc:	lsl	r0, r5, #2
   20400:	blx	r1
   20404:	str	r0, [r8, #8]
   20408:	str	r5, [r8]
   2040c:	ldr	r1, [r8, #4]
   20410:	cmp	r1, #0
   20414:	rsbmi	r1, r1, #0
   20418:	cmp	r1, r5
   2041c:	movgt	r1, #0
   20420:	strgt	r1, [r8, #4]
   20424:	cmp	r4, #1
   20428:	blt	20494 <__assert_fail@plt+0xf174>
   2042c:	ldr	r5, [r9, #8]
   20430:	mov	r2, #0
   20434:	cmp	r4, #4
   20438:	bcc	20478 <__assert_fail@plt+0xf158>
   2043c:	add	r1, r5, r4, lsl #2
   20440:	cmp	r0, r1
   20444:	addcc	r1, r0, r4, lsl #2
   20448:	cmpcc	r5, r1
   2044c:	bcc	20478 <__assert_fail@plt+0xf158>
   20450:	bic	r2, r4, #-2147483645	; 0x80000003
   20454:	mov	r7, r0
   20458:	mov	r1, r5
   2045c:	mov	r3, r2
   20460:	vld1.32	{d16-d17}, [r1]!
   20464:	subs	r3, r3, #4
   20468:	vst1.32	{d16-d17}, [r7]!
   2046c:	bne	20460 <__assert_fail@plt+0xf140>
   20470:	cmp	r4, r2
   20474:	beq	20494 <__assert_fail@plt+0xf174>
   20478:	add	r1, r5, r2, lsl #2
   2047c:	add	r0, r0, r2, lsl #2
   20480:	sub	r2, r4, r2
   20484:	ldr	r3, [r1], #4
   20488:	subs	r2, r2, #1
   2048c:	str	r3, [r0], #4
   20490:	bne	20484 <__assert_fail@plt+0xf164>
   20494:	ldr	r4, [r6]
   20498:	b	20544 <__assert_fail@plt+0xf224>
   2049c:	movw	r0, #8476	; 0x211c
   204a0:	movt	r0, #4
   204a4:	ldr	r1, [r0]
   204a8:	lsl	r0, r5, #2
   204ac:	blx	r1
   204b0:	str	r0, [r8, #8]
   204b4:	str	r5, [r8]
   204b8:	ldr	r1, [r8, #4]
   204bc:	cmp	r1, #0
   204c0:	rsbmi	r1, r1, #0
   204c4:	cmp	r1, r5
   204c8:	movgt	r1, #0
   204cc:	strgt	r1, [r8, #4]
   204d0:	cmp	r4, #1
   204d4:	blt	20540 <__assert_fail@plt+0xf220>
   204d8:	ldr	r5, [r6, #8]
   204dc:	mov	r2, #0
   204e0:	cmp	r4, #4
   204e4:	bcc	20524 <__assert_fail@plt+0xf204>
   204e8:	add	r1, r5, r4, lsl #2
   204ec:	cmp	r0, r1
   204f0:	addcc	r1, r0, r4, lsl #2
   204f4:	cmpcc	r5, r1
   204f8:	bcc	20524 <__assert_fail@plt+0xf204>
   204fc:	bic	r2, r4, #-2147483645	; 0x80000003
   20500:	mov	r6, r0
   20504:	mov	r1, r5
   20508:	mov	r3, r2
   2050c:	vld1.32	{d16-d17}, [r1]!
   20510:	subs	r3, r3, #4
   20514:	vst1.32	{d16-d17}, [r6]!
   20518:	bne	2050c <__assert_fail@plt+0xf1ec>
   2051c:	cmp	r4, r2
   20520:	beq	20540 <__assert_fail@plt+0xf220>
   20524:	add	r1, r5, r2, lsl #2
   20528:	add	r0, r0, r2, lsl #2
   2052c:	sub	r2, r4, r2
   20530:	ldr	r3, [r1], #4
   20534:	subs	r2, r2, #1
   20538:	str	r3, [r0], #4
   2053c:	bne	20530 <__assert_fail@plt+0xf210>
   20540:	ldr	r4, [r7]
   20544:	str	r4, [r8, #4]!
   20548:	cmp	r4, #0
   2054c:	rsbmi	r4, r4, #0
   20550:	str	r4, [r8]
   20554:	sub	sp, fp, #28
   20558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2055c:	mov	r0, #2
   20560:	add	r1, sp, #16
   20564:	add	r3, sp, #4
   20568:	str	r0, [sp]
   2056c:	mov	r0, #0
   20570:	mov	r2, r1
   20574:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   20578:	ldr	r1, [r8]
   2057c:	cmp	r1, #0
   20580:	ble	2058c <__assert_fail@plt+0xf26c>
   20584:	ldr	r0, [r8, #8]
   20588:	b	205e8 <__assert_fail@plt+0xf2c8>
   2058c:	beq	205b0 <__assert_fail@plt+0xf290>
   20590:	movw	r0, #8480	; 0x2120
   20594:	lsl	r1, r1, #2
   20598:	mov	r2, #4
   2059c:	movt	r0, #4
   205a0:	ldr	r3, [r0]
   205a4:	ldr	r0, [r8, #8]
   205a8:	blx	r3
   205ac:	b	205c4 <__assert_fail@plt+0xf2a4>
   205b0:	movw	r0, #8476	; 0x211c
   205b4:	movt	r0, #4
   205b8:	ldr	r1, [r0]
   205bc:	mov	r0, #4
   205c0:	blx	r1
   205c4:	mov	r1, #1
   205c8:	str	r0, [r8, #8]
   205cc:	str	r1, [r8]
   205d0:	ldr	r1, [r8, #4]
   205d4:	cmp	r1, #0
   205d8:	rsbmi	r1, r1, #0
   205dc:	cmp	r1, #2
   205e0:	movge	r1, #0
   205e4:	strge	r1, [r8, #4]
   205e8:	ldr	r1, [sp, #24]
   205ec:	ldr	r2, [sp, #12]
   205f0:	ldr	r1, [r1]
   205f4:	ldr	r2, [r2]
   205f8:	orrs	r3, r2, r1
   205fc:	beq	20708 <__assert_fail@plt+0xf3e8>
   20600:	cmp	r1, #0
   20604:	beq	206d0 <__assert_fail@plt+0xf3b0>
   20608:	cmp	r2, #0
   2060c:	beq	206cc <__assert_fail@plt+0xf3ac>
   20610:	rsb	r7, r3, #0
   20614:	and	r7, r3, r7
   20618:	mov	r3, #0
   2061c:	cmp	r3, r7, lsr #24
   20620:	bne	20638 <__assert_fail@plt+0xf318>
   20624:	mov	r3, #0
   20628:	lsl	r7, r7, #8
   2062c:	add	r3, r3, #8
   20630:	cmp	r7, #16777216	; 0x1000000
   20634:	bcc	20628 <__assert_fail@plt+0xf308>
   20638:	cmp	r7, #0
   2063c:	blt	20650 <__assert_fail@plt+0xf330>
   20640:	lsl	r7, r7, #1
   20644:	add	r3, r3, #1
   20648:	cmn	r7, #1
   2064c:	bgt	20640 <__assert_fail@plt+0xf320>
   20650:	rsb	r3, r3, #31
   20654:	mov	r7, #1
   20658:	and	r6, r7, r1, lsr r3
   2065c:	lsr	r2, r2, r3
   20660:	cmp	r6, #0
   20664:	mov	r4, r2
   20668:	lsreq	r4, r1, r3
   2066c:	mov	r7, r4
   20670:	lsr	r4, r4, #1
   20674:	tst	r7, #1
   20678:	beq	2066c <__assert_fail@plt+0xf34c>
   2067c:	cmp	r6, #0
   20680:	lsrne	r2, r1, r3
   20684:	b	206bc <__assert_fail@plt+0xf39c>
   20688:	cmp	r2, r7
   2068c:	bls	206a8 <__assert_fail@plt+0xf388>
   20690:	sub	r1, r2, r7
   20694:	lsr	r2, r1, #1
   20698:	tst	r1, #2
   2069c:	mov	r1, r2
   206a0:	beq	20694 <__assert_fail@plt+0xf374>
   206a4:	b	206bc <__assert_fail@plt+0xf39c>
   206a8:	sub	r1, r7, r2
   206ac:	lsr	r7, r1, #1
   206b0:	tst	r1, #2
   206b4:	mov	r1, r7
   206b8:	beq	206ac <__assert_fail@plt+0xf38c>
   206bc:	cmp	r2, r7
   206c0:	bne	20688 <__assert_fail@plt+0xf368>
   206c4:	lsl	r2, r7, r3
   206c8:	b	206d0 <__assert_fail@plt+0xf3b0>
   206cc:	mov	r2, r1
   206d0:	cmp	r2, #0
   206d4:	str	r2, [r0]
   206d8:	movwne	r2, #1
   206dc:	str	r2, [r8, #4]
   206e0:	b	20390 <__assert_fail@plt+0xf070>
   206e4:	str	r1, [sp, #20]
   206e8:	movw	r0, #5090	; 0x13e2
   206ec:	movw	r1, #1588	; 0x634
   206f0:	movw	r3, #5106	; 0x13f2
   206f4:	movw	r2, #2723	; 0xaa3
   206f8:	movt	r0, #3
   206fc:	movt	r1, #3
   20700:	movt	r3, #3
   20704:	bl	11320 <__assert_fail@plt>
   20708:	movw	r0, #5147	; 0x141b
   2070c:	movw	r1, #1588	; 0x634
   20710:	movw	r3, #5159	; 0x1427
   20714:	movw	r2, #2663	; 0xa67
   20718:	movt	r0, #3
   2071c:	movt	r1, #3
   20720:	movt	r3, #3
   20724:	bl	11320 <__assert_fail@plt>
   20728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2072c:	add	fp, sp, #28
   20730:	sub	sp, sp, #100	; 0x64
   20734:	ldr	r5, [fp, #8]
   20738:	mov	r7, r3
   2073c:	mov	r9, r2
   20740:	mov	ip, r0
   20744:	ldr	r4, [r7, #4]!
   20748:	mov	sl, r5
   2074c:	ldr	r6, [sl, #4]!
   20750:	cmp	r4, #0
   20754:	beq	20980 <__assert_fail@plt+0xf660>
   20758:	mov	r8, r3
   2075c:	cmp	r6, #0
   20760:	beq	209ec <__assert_fail@plt+0xf6cc>
   20764:	movw	r0, #1584	; 0x630
   20768:	sub	r2, fp, #40	; 0x28
   2076c:	str	r1, [sp, #20]
   20770:	mov	r1, #0
   20774:	movt	r0, #3
   20778:	cmp	r2, r8
   2077c:	str	r1, [fp, #-36]	; 0xffffffdc
   20780:	str	r1, [fp, #-40]	; 0xffffffd8
   20784:	str	r1, [fp, #-52]	; 0xffffffcc
   20788:	str	r1, [fp, #-48]	; 0xffffffd0
   2078c:	str	r1, [sp, #64]	; 0x40
   20790:	str	r1, [sp, #68]	; 0x44
   20794:	str	r1, [sp, #52]	; 0x34
   20798:	str	r1, [sp, #56]	; 0x38
   2079c:	str	r1, [sp, #40]	; 0x28
   207a0:	str	r1, [sp, #44]	; 0x2c
   207a4:	str	r1, [sp, #28]
   207a8:	str	r1, [sp, #32]
   207ac:	str	r0, [fp, #-32]	; 0xffffffe0
   207b0:	str	r0, [fp, #-44]	; 0xffffffd4
   207b4:	str	r0, [sp, #72]	; 0x48
   207b8:	str	r0, [sp, #60]	; 0x3c
   207bc:	str	r0, [sp, #48]	; 0x30
   207c0:	str	r0, [sp, #36]	; 0x24
   207c4:	beq	21654 <__assert_fail@plt+0x10334>
   207c8:	cmp	r4, #0
   207cc:	mov	r6, r4
   207d0:	rsbmi	r6, r4, #0
   207d4:	cmp	r6, #1
   207d8:	blt	2088c <__assert_fail@plt+0xf56c>
   207dc:	movw	r0, #8476	; 0x211c
   207e0:	mov	r4, ip
   207e4:	movt	r0, #4
   207e8:	ldr	r1, [r0]
   207ec:	lsl	r0, r6, #2
   207f0:	blx	r1
   207f4:	str	r0, [fp, #-32]	; 0xffffffe0
   207f8:	str	r6, [fp, #-40]	; 0xffffffd8
   207fc:	mov	ip, r4
   20800:	mov	r2, #0
   20804:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20808:	cmp	r1, #0
   2080c:	rsbmi	r1, r1, #0
   20810:	cmp	r1, r6
   20814:	movgt	r1, #0
   20818:	strgt	r1, [fp, #-36]	; 0xffffffdc
   2081c:	cmp	r6, #4
   20820:	ldr	r5, [r8, #8]
   20824:	bcc	20868 <__assert_fail@plt+0xf548>
   20828:	add	r1, r5, r6, lsl #2
   2082c:	cmp	r0, r1
   20830:	bcs	20840 <__assert_fail@plt+0xf520>
   20834:	add	r1, r0, r6, lsl #2
   20838:	cmp	r1, r5
   2083c:	bhi	20868 <__assert_fail@plt+0xf548>
   20840:	bic	r2, r6, #-2147483645	; 0x80000003
   20844:	mov	r4, r0
   20848:	mov	r1, r5
   2084c:	mov	r3, r2
   20850:	vld1.32	{d16-d17}, [r1]!
   20854:	subs	r3, r3, #4
   20858:	vst1.32	{d16-d17}, [r4]!
   2085c:	bne	20850 <__assert_fail@plt+0xf530>
   20860:	cmp	r6, r2
   20864:	beq	20884 <__assert_fail@plt+0xf564>
   20868:	add	r1, r5, r2, lsl #2
   2086c:	add	r3, r0, r2, lsl #2
   20870:	sub	r2, r6, r2
   20874:	ldr	r6, [r1], #4
   20878:	subs	r2, r2, #1
   2087c:	str	r6, [r3], #4
   20880:	bne	20874 <__assert_fail@plt+0xf554>
   20884:	ldr	r4, [r7]
   20888:	ldr	r5, [fp, #8]
   2088c:	rsb	r1, r4, #0
   20890:	cmp	r4, #0
   20894:	movge	r1, r4
   20898:	cmp	r1, #0
   2089c:	str	r1, [fp, #-36]	; 0xffffffdc
   208a0:	beq	21658 <__assert_fail@plt+0x10338>
   208a4:	ldr	r2, [r0]
   208a8:	mov	r1, #31
   208ac:	cmp	r2, #0
   208b0:	bne	208cc <__assert_fail@plt+0xf5ac>
   208b4:	add	r0, r0, #4
   208b8:	mov	r1, #31
   208bc:	ldr	r2, [r0], #4
   208c0:	add	r1, r1, #32
   208c4:	cmp	r2, #0
   208c8:	beq	208bc <__assert_fail@plt+0xf59c>
   208cc:	rsb	r0, r2, #0
   208d0:	and	r2, r2, r0
   208d4:	mov	r0, #0
   208d8:	cmp	r0, r2, lsr #24
   208dc:	bne	208f4 <__assert_fail@plt+0xf5d4>
   208e0:	mov	r0, #0
   208e4:	lsl	r2, r2, #8
   208e8:	add	r0, r0, #8
   208ec:	cmp	r2, #16777216	; 0x1000000
   208f0:	bcc	208e4 <__assert_fail@plt+0xf5c4>
   208f4:	cmp	r2, #0
   208f8:	str	ip, [sp, #12]
   208fc:	blt	20910 <__assert_fail@plt+0xf5f0>
   20900:	lsl	r2, r2, #1
   20904:	add	r0, r0, #1
   20908:	cmn	r2, #1
   2090c:	bgt	20900 <__assert_fail@plt+0xf5e0>
   20910:	sub	r4, r1, r0
   20914:	sub	r0, fp, #40	; 0x28
   20918:	mov	r3, #2
   2091c:	mov	r1, r0
   20920:	mov	r2, r4
   20924:	bl	1ee60 <__assert_fail@plt+0xdb40>
   20928:	sub	r0, fp, #52	; 0x34
   2092c:	cmp	r0, r5
   20930:	beq	20a58 <__assert_fail@plt+0xf738>
   20934:	ldr	r6, [sl]
   20938:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2093c:	cmp	r6, #0
   20940:	rsbmi	r6, r6, #0
   20944:	cmp	r6, r1
   20948:	ble	20a68 <__assert_fail@plt+0xf748>
   2094c:	cmp	r6, #1
   20950:	mov	r7, r6
   20954:	movle	r7, #1
   20958:	cmp	r1, #0
   2095c:	beq	20aa0 <__assert_fail@plt+0xf780>
   20960:	movw	r0, #8480	; 0x2120
   20964:	lsl	r1, r1, #2
   20968:	lsl	r2, r7, #2
   2096c:	movt	r0, #4
   20970:	ldr	r3, [r0]
   20974:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20978:	blx	r3
   2097c:	b	20ab4 <__assert_fail@plt+0xf794>
   20980:	mov	r0, #1
   20984:	asr	r8, r6, #31
   20988:	cmp	r6, #0
   2098c:	addgt	r8, r0, r6, asr #31
   20990:	cmp	ip, r5
   20994:	beq	20a60 <__assert_fail@plt+0xf740>
   20998:	str	r9, [sp, #24]
   2099c:	mov	r9, r1
   209a0:	ldr	r1, [ip]
   209a4:	cmp	r6, #0
   209a8:	rsbmi	r6, r6, #0
   209ac:	cmp	r6, r1
   209b0:	ble	20a78 <__assert_fail@plt+0xf758>
   209b4:	cmp	r6, #1
   209b8:	mov	r7, r6
   209bc:	movle	r7, #1
   209c0:	cmp	r1, #0
   209c4:	beq	2142c <__assert_fail@plt+0x1010c>
   209c8:	movw	r0, #8480	; 0x2120
   209cc:	lsl	r1, r1, #2
   209d0:	lsl	r2, r7, #2
   209d4:	mov	r4, ip
   209d8:	movt	r0, #4
   209dc:	ldr	r3, [r0]
   209e0:	ldr	r0, [ip, #8]
   209e4:	blx	r3
   209e8:	b	21444 <__assert_fail@plt+0x10124>
   209ec:	mov	r0, #1
   209f0:	asr	sl, r4, #31
   209f4:	cmp	r4, #0
   209f8:	addgt	sl, r0, r4, asr #31
   209fc:	cmp	ip, r8
   20a00:	beq	20a88 <__assert_fail@plt+0xf768>
   20a04:	str	r9, [sp, #24]
   20a08:	mov	r9, r1
   20a0c:	ldr	r1, [ip]
   20a10:	cmp	r4, #0
   20a14:	rsbmi	r4, r4, #0
   20a18:	cmp	r4, r1
   20a1c:	ble	20a90 <__assert_fail@plt+0xf770>
   20a20:	cmp	r4, #1
   20a24:	mov	r6, r4
   20a28:	movle	r6, #1
   20a2c:	cmp	r1, #0
   20a30:	beq	2151c <__assert_fail@plt+0x101fc>
   20a34:	movw	r0, #8480	; 0x2120
   20a38:	lsl	r1, r1, #2
   20a3c:	lsl	r2, r6, #2
   20a40:	mov	r5, ip
   20a44:	movt	r0, #4
   20a48:	ldr	r3, [r0]
   20a4c:	ldr	r0, [ip, #8]
   20a50:	blx	r3
   20a54:	b	21534 <__assert_fail@plt+0x10214>
   20a58:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20a5c:	b	20b50 <__assert_fail@plt+0xf830>
   20a60:	mov	ip, sl
   20a64:	b	214e8 <__assert_fail@plt+0x101c8>
   20a68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20a6c:	cmp	r6, #1
   20a70:	bge	20adc <__assert_fail@plt+0xf7bc>
   20a74:	b	20b48 <__assert_fail@plt+0xf828>
   20a78:	ldr	r0, [ip, #8]
   20a7c:	cmp	r6, #1
   20a80:	bge	21470 <__assert_fail@plt+0x10150>
   20a84:	b	214d8 <__assert_fail@plt+0x101b8>
   20a88:	mov	ip, r7
   20a8c:	b	215d8 <__assert_fail@plt+0x102b8>
   20a90:	ldr	r0, [ip, #8]
   20a94:	cmp	r4, #1
   20a98:	bge	21560 <__assert_fail@plt+0x10240>
   20a9c:	b	215c8 <__assert_fail@plt+0x102a8>
   20aa0:	movw	r0, #8476	; 0x211c
   20aa4:	movt	r0, #4
   20aa8:	ldr	r1, [r0]
   20aac:	lsl	r0, r7, #2
   20ab0:	blx	r1
   20ab4:	str	r0, [fp, #-44]	; 0xffffffd4
   20ab8:	str	r7, [fp, #-52]	; 0xffffffcc
   20abc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   20ac0:	cmp	r1, #0
   20ac4:	rsbmi	r1, r1, #0
   20ac8:	cmp	r1, r7
   20acc:	movgt	r1, #0
   20ad0:	strgt	r1, [fp, #-48]	; 0xffffffd0
   20ad4:	cmp	r6, #1
   20ad8:	blt	20b48 <__assert_fail@plt+0xf828>
   20adc:	ldr	r1, [fp, #8]
   20ae0:	mov	r2, #0
   20ae4:	cmp	r6, #4
   20ae8:	ldr	r5, [r1, #8]
   20aec:	bcc	20b2c <__assert_fail@plt+0xf80c>
   20af0:	add	r1, r5, r6, lsl #2
   20af4:	cmp	r0, r1
   20af8:	addcc	r1, r0, r6, lsl #2
   20afc:	cmpcc	r5, r1
   20b00:	bcc	20b2c <__assert_fail@plt+0xf80c>
   20b04:	bic	r2, r6, #-2147483645	; 0x80000003
   20b08:	mov	r7, r0
   20b0c:	mov	r1, r5
   20b10:	mov	r3, r2
   20b14:	vld1.32	{d16-d17}, [r1]!
   20b18:	subs	r3, r3, #4
   20b1c:	vst1.32	{d16-d17}, [r7]!
   20b20:	bne	20b14 <__assert_fail@plt+0xf7f4>
   20b24:	cmp	r6, r2
   20b28:	beq	20b48 <__assert_fail@plt+0xf828>
   20b2c:	add	r1, r5, r2, lsl #2
   20b30:	add	r0, r0, r2, lsl #2
   20b34:	sub	r2, r6, r2
   20b38:	ldr	r3, [r1], #4
   20b3c:	subs	r2, r2, #1
   20b40:	str	r3, [r0], #4
   20b44:	bne	20b38 <__assert_fail@plt+0xf818>
   20b48:	ldr	r0, [sl]
   20b4c:	str	r0, [fp, #-48]	; 0xffffffd0
   20b50:	cmp	r0, #0
   20b54:	rsbmi	r0, r0, #0
   20b58:	cmp	r0, #0
   20b5c:	str	r0, [fp, #-48]	; 0xffffffd0
   20b60:	ble	21658 <__assert_fail@plt+0x10338>
   20b64:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20b68:	mov	r0, #31
   20b6c:	ldr	r1, [r2]
   20b70:	cmp	r1, #0
   20b74:	bne	20b90 <__assert_fail@plt+0xf870>
   20b78:	add	r2, r2, #4
   20b7c:	mov	r0, #31
   20b80:	ldr	r1, [r2], #4
   20b84:	add	r0, r0, #32
   20b88:	cmp	r1, #0
   20b8c:	beq	20b80 <__assert_fail@plt+0xf860>
   20b90:	rsb	r2, r1, #0
   20b94:	and	r2, r1, r2
   20b98:	mov	r1, #0
   20b9c:	cmp	r1, r2, lsr #24
   20ba0:	bne	20bb8 <__assert_fail@plt+0xf898>
   20ba4:	mov	r1, #0
   20ba8:	lsl	r2, r2, #8
   20bac:	add	r1, r1, #8
   20bb0:	cmp	r2, #16777216	; 0x1000000
   20bb4:	bcc	20ba8 <__assert_fail@plt+0xf888>
   20bb8:	cmp	r2, #0
   20bbc:	str	r9, [sp, #24]
   20bc0:	blt	20bd4 <__assert_fail@plt+0xf8b4>
   20bc4:	lsl	r2, r2, #1
   20bc8:	add	r1, r1, #1
   20bcc:	cmn	r2, #1
   20bd0:	bgt	20bc4 <__assert_fail@plt+0xf8a4>
   20bd4:	sub	r5, r0, r1
   20bd8:	sub	r0, fp, #52	; 0x34
   20bdc:	mov	r3, #2
   20be0:	mov	r6, #2
   20be4:	mov	r1, r0
   20be8:	mov	r2, r5
   20bec:	bl	1ee60 <__assert_fail@plt+0xdb40>
   20bf0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   20bf4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20bf8:	cmp	r4, r5
   20bfc:	mov	sl, r5
   20c00:	movcc	sl, r4
   20c04:	sub	r9, r5, sl
   20c08:	sub	r0, r4, sl
   20c0c:	cmp	r2, r1
   20c10:	bge	20c54 <__assert_fail@plt+0xf934>
   20c14:	str	r2, [fp, #-48]	; 0xffffffd0
   20c18:	str	r1, [fp, #-36]	; 0xffffffdc
   20c1c:	mov	r4, r0
   20c20:	ldr	r0, [sp, #20]
   20c24:	ldr	r5, [fp, #8]
   20c28:	str	r8, [sp, #16]
   20c2c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20c30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20c34:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20c38:	ldr	r7, [fp, #-44]	; 0xffffffd4
   20c3c:	str	r0, [sp, #8]
   20c40:	str	r3, [fp, #-40]	; 0xffffffd8
   20c44:	str	r1, [fp, #-52]	; 0xffffffcc
   20c48:	str	r7, [fp, #-32]	; 0xffffffe0
   20c4c:	str	r2, [fp, #-44]	; 0xffffffd4
   20c50:	b	20c78 <__assert_fail@plt+0xf958>
   20c54:	mov	r4, r9
   20c58:	mov	r9, r0
   20c5c:	ldr	r0, [fp, #8]
   20c60:	mov	r5, r8
   20c64:	str	r0, [sp, #16]
   20c68:	ldr	r0, [sp, #24]
   20c6c:	str	r0, [sp, #8]
   20c70:	ldr	r0, [sp, #20]
   20c74:	str	r0, [sp, #24]
   20c78:	str	r6, [sp]
   20c7c:	add	r6, sp, #28
   20c80:	sub	r1, fp, #40	; 0x28
   20c84:	sub	r3, fp, #52	; 0x34
   20c88:	mov	r0, r6
   20c8c:	mov	r2, r1
   20c90:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   20c94:	mov	r0, r6
   20c98:	mov	r1, r6
   20c9c:	mov	r2, r9
   20ca0:	bl	1e07c <__assert_fail@plt+0xcd5c>
   20ca4:	ldr	r0, [sp, #56]	; 0x38
   20ca8:	str	r5, [sp, #20]
   20cac:	cmp	r0, #0
   20cb0:	mov	r1, r0
   20cb4:	rsbmi	r1, r0, #0
   20cb8:	cmp	r1, r4, lsr #5
   20cbc:	ble	20d3c <__assert_fail@plt+0xfa1c>
   20cc0:	ldr	r3, [sp, #60]	; 0x3c
   20cc4:	lsr	r5, r4, #5
   20cc8:	and	r7, r4, #31
   20ccc:	mov	r1, #1
   20cd0:	cmn	r0, #1
   20cd4:	ldr	r6, [r3, r5, lsl #2]
   20cd8:	and	r1, r1, r6, lsr r7
   20cdc:	bgt	20d18 <__assert_fail@plt+0xf9f8>
   20ce0:	cmp	r7, #0
   20ce4:	beq	20cf8 <__assert_fail@plt+0xf9d8>
   20ce8:	rsb	r2, r7, #32
   20cec:	mov	r7, #0
   20cf0:	cmp	r7, r6, lsl r2
   20cf4:	bne	20d14 <__assert_fail@plt+0xf9f4>
   20cf8:	sub	r3, r3, #4
   20cfc:	subs	r2, r5, #1
   20d00:	blt	20d18 <__assert_fail@plt+0xf9f8>
   20d04:	ldr	r7, [r3, r5, lsl #2]
   20d08:	mov	r5, r2
   20d0c:	cmp	r7, #0
   20d10:	beq	20cfc <__assert_fail@plt+0xf9dc>
   20d14:	eor	r1, r1, #1
   20d18:	ldr	r5, [sp, #20]
   20d1c:	cmp	r1, #0
   20d20:	bne	20d58 <__assert_fail@plt+0xfa38>
   20d24:	cmp	r0, #0
   20d28:	blt	20d4c <__assert_fail@plt+0xfa2c>
   20d2c:	add	r0, sp, #52	; 0x34
   20d30:	mov	r1, r4
   20d34:	bl	252ac <__assert_fail@plt+0x13f8c>
   20d38:	b	20d58 <__assert_fail@plt+0xfa38>
   20d3c:	lsr	r1, r0, #31
   20d40:	cmp	r1, #0
   20d44:	bne	20d58 <__assert_fail@plt+0xfa38>
   20d48:	b	20d24 <__assert_fail@plt+0xfa04>
   20d4c:	add	r0, sp, #52	; 0x34
   20d50:	mov	r1, r4
   20d54:	bl	2548c <__assert_fail@plt+0x1416c>
   20d58:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20d5c:	add	r8, r9, r4
   20d60:	cmp	r0, #1
   20d64:	blt	2105c <__assert_fail@plt+0xfd3c>
   20d68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20d6c:	mov	r0, #31
   20d70:	ldr	r1, [r2]
   20d74:	cmp	r1, #0
   20d78:	bne	20d94 <__assert_fail@plt+0xfa74>
   20d7c:	add	r2, r2, #4
   20d80:	mov	r0, #31
   20d84:	ldr	r1, [r2], #4
   20d88:	add	r0, r0, #32
   20d8c:	cmp	r1, #0
   20d90:	beq	20d84 <__assert_fail@plt+0xfa64>
   20d94:	rsb	r2, r1, #0
   20d98:	and	r2, r1, r2
   20d9c:	mov	r1, #0
   20da0:	cmp	r1, r2, lsr #24
   20da4:	bne	20dbc <__assert_fail@plt+0xfa9c>
   20da8:	mov	r1, #0
   20dac:	lsl	r2, r2, #8
   20db0:	add	r1, r1, #8
   20db4:	cmp	r2, #16777216	; 0x1000000
   20db8:	bcc	20dac <__assert_fail@plt+0xfa8c>
   20dbc:	cmp	r2, #0
   20dc0:	blt	20dd4 <__assert_fail@plt+0xfab4>
   20dc4:	lsl	r2, r2, #1
   20dc8:	add	r1, r1, #1
   20dcc:	cmn	r2, #1
   20dd0:	bgt	20dc4 <__assert_fail@plt+0xfaa4>
   20dd4:	sub	r4, r0, r1
   20dd8:	sub	r6, fp, #40	; 0x28
   20ddc:	mov	r3, #2
   20de0:	mov	r0, r6
   20de4:	mov	r1, r6
   20de8:	mov	r2, r4
   20dec:	bl	1ee60 <__assert_fail@plt+0xdb40>
   20df0:	add	r5, sp, #40	; 0x28
   20df4:	add	r1, r4, r9
   20df8:	mov	r0, r5
   20dfc:	bl	252ac <__assert_fail@plt+0x13f8c>
   20e00:	ldr	r9, [sp, #24]
   20e04:	add	r8, r4, r8
   20e08:	add	r7, sp, #52	; 0x34
   20e0c:	b	20e1c <__assert_fail@plt+0xfafc>
   20e10:	mov	r2, r4
   20e14:	bl	1e07c <__assert_fail@plt+0xcd5c>
   20e18:	add	r8, r4, r8
   20e1c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   20e20:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20e24:	cmp	r0, r1
   20e28:	bne	20e64 <__assert_fail@plt+0xfb44>
   20e2c:	cmp	r0, #0
   20e30:	blt	20f44 <__assert_fail@plt+0xfc24>
   20e34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   20e38:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20e3c:	sub	r1, r1, #4
   20e40:	sub	r2, r2, #4
   20e44:	subs	r3, r0, #1
   20e48:	blt	21054 <__assert_fail@plt+0xfd34>
   20e4c:	ldr	r4, [r2, r0, lsl #2]
   20e50:	ldr	r0, [r1, r0, lsl #2]
   20e54:	cmp	r0, r4
   20e58:	mov	r0, r3
   20e5c:	beq	20e44 <__assert_fail@plt+0xfb24>
   20e60:	b	20f74 <__assert_fail@plt+0xfc54>
   20e64:	bge	20f78 <__assert_fail@plt+0xfc58>
   20e68:	sub	r0, fp, #52	; 0x34
   20e6c:	mov	r2, r6
   20e70:	mov	r1, r0
   20e74:	bl	1db64 <__assert_fail@plt+0xc844>
   20e78:	mov	r0, r5
   20e7c:	mov	r1, r5
   20e80:	add	r2, sp, #28
   20e84:	bl	1d388 <__assert_fail@plt+0xc068>
   20e88:	add	r0, sp, #64	; 0x40
   20e8c:	mov	r2, r7
   20e90:	mov	r1, r0
   20e94:	bl	1d388 <__assert_fail@plt+0xc068>
   20e98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20e9c:	cmp	r0, #0
   20ea0:	ble	21658 <__assert_fail@plt+0x10338>
   20ea4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20ea8:	mov	r0, #31
   20eac:	ldr	r1, [r2]
   20eb0:	cmp	r1, #0
   20eb4:	bne	20ed0 <__assert_fail@plt+0xfbb0>
   20eb8:	add	r2, r2, #4
   20ebc:	mov	r0, #31
   20ec0:	ldr	r1, [r2], #4
   20ec4:	add	r0, r0, #32
   20ec8:	cmp	r1, #0
   20ecc:	beq	20ec0 <__assert_fail@plt+0xfba0>
   20ed0:	rsb	r2, r1, #0
   20ed4:	and	r2, r1, r2
   20ed8:	mov	r1, #0
   20edc:	cmp	r1, r2, lsr #24
   20ee0:	bne	20ef8 <__assert_fail@plt+0xfbd8>
   20ee4:	mov	r1, #0
   20ee8:	lsl	r2, r2, #8
   20eec:	add	r1, r1, #8
   20ef0:	cmp	r2, #16777216	; 0x1000000
   20ef4:	bcc	20ee8 <__assert_fail@plt+0xfbc8>
   20ef8:	cmp	r2, #0
   20efc:	blt	20f10 <__assert_fail@plt+0xfbf0>
   20f00:	lsl	r2, r2, #1
   20f04:	add	r1, r1, #1
   20f08:	cmn	r2, #1
   20f0c:	bgt	20f00 <__assert_fail@plt+0xfbe0>
   20f10:	sub	r4, r0, r1
   20f14:	sub	r0, fp, #52	; 0x34
   20f18:	mov	r3, #2
   20f1c:	mov	r1, r0
   20f20:	mov	r2, r4
   20f24:	bl	1ee60 <__assert_fail@plt+0xdb40>
   20f28:	add	r0, sp, #28
   20f2c:	mov	r2, r4
   20f30:	mov	r1, r0
   20f34:	bl	1e07c <__assert_fail@plt+0xcd5c>
   20f38:	mov	r0, r7
   20f3c:	mov	r1, r7
   20f40:	b	20e10 <__assert_fail@plt+0xfaf0>
   20f44:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20f48:	rsb	r1, r0, #0
   20f4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20f50:	sub	r0, r0, #4
   20f54:	sub	r2, r2, #4
   20f58:	subs	r3, r1, #1
   20f5c:	blt	21054 <__assert_fail@plt+0xfd34>
   20f60:	ldr	r4, [r2, r1, lsl #2]
   20f64:	ldr	r1, [r0, r1, lsl #2]
   20f68:	cmp	r1, r4
   20f6c:	mov	r1, r3
   20f70:	beq	20f58 <__assert_fail@plt+0xfc38>
   20f74:	bls	20e68 <__assert_fail@plt+0xfb48>
   20f78:	mov	r0, r6
   20f7c:	mov	r1, r6
   20f80:	sub	r2, fp, #52	; 0x34
   20f84:	bl	1db64 <__assert_fail@plt+0xc844>
   20f88:	add	r0, sp, #28
   20f8c:	mov	r1, r5
   20f90:	mov	r2, r0
   20f94:	bl	1d388 <__assert_fail@plt+0xc068>
   20f98:	mov	r0, r7
   20f9c:	add	r1, sp, #64	; 0x40
   20fa0:	mov	r2, r7
   20fa4:	bl	1d388 <__assert_fail@plt+0xc068>
   20fa8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20fac:	cmp	r0, #0
   20fb0:	ble	21658 <__assert_fail@plt+0x10338>
   20fb4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20fb8:	mov	r0, #31
   20fbc:	ldr	r1, [r2]
   20fc0:	cmp	r1, #0
   20fc4:	bne	20fe0 <__assert_fail@plt+0xfcc0>
   20fc8:	add	r2, r2, #4
   20fcc:	mov	r0, #31
   20fd0:	ldr	r1, [r2], #4
   20fd4:	add	r0, r0, #32
   20fd8:	cmp	r1, #0
   20fdc:	beq	20fd0 <__assert_fail@plt+0xfcb0>
   20fe0:	rsb	r2, r1, #0
   20fe4:	and	r2, r1, r2
   20fe8:	mov	r1, #0
   20fec:	cmp	r1, r2, lsr #24
   20ff0:	bne	21008 <__assert_fail@plt+0xfce8>
   20ff4:	mov	r1, #0
   20ff8:	lsl	r2, r2, #8
   20ffc:	add	r1, r1, #8
   21000:	cmp	r2, #16777216	; 0x1000000
   21004:	bcc	20ff8 <__assert_fail@plt+0xfcd8>
   21008:	cmp	r2, #0
   2100c:	blt	21020 <__assert_fail@plt+0xfd00>
   21010:	lsl	r2, r2, #1
   21014:	add	r1, r1, #1
   21018:	cmn	r2, #1
   2101c:	bgt	21010 <__assert_fail@plt+0xfcf0>
   21020:	sub	r4, r0, r1
   21024:	mov	r0, r6
   21028:	mov	r1, r6
   2102c:	mov	r3, #2
   21030:	mov	r2, r4
   21034:	bl	1ee60 <__assert_fail@plt+0xdb40>
   21038:	mov	r0, r5
   2103c:	mov	r1, r5
   21040:	mov	r2, r4
   21044:	bl	1e07c <__assert_fail@plt+0xcd5c>
   21048:	add	r0, sp, #64	; 0x40
   2104c:	mov	r1, r0
   21050:	b	20e10 <__assert_fail@plt+0xfaf0>
   21054:	ldr	r5, [sp, #20]
   21058:	b	2106c <__assert_fail@plt+0xfd4c>
   2105c:	add	r0, sp, #40	; 0x28
   21060:	mov	r1, r9
   21064:	bl	252ac <__assert_fail@plt+0x13f8c>
   21068:	ldr	r9, [sp, #24]
   2106c:	sub	r4, fp, #52	; 0x34
   21070:	mov	r2, sl
   21074:	mov	r0, r4
   21078:	mov	r1, r4
   2107c:	bl	1e07c <__assert_fail@plt+0xcd5c>
   21080:	ldr	r0, [sp, #68]	; 0x44
   21084:	ldr	r2, [sp, #16]
   21088:	mov	r1, #0
   2108c:	mov	r3, r4
   21090:	rsb	r6, r0, #0
   21094:	mov	r0, #2
   21098:	str	r0, [sp]
   2109c:	add	r0, sp, #52	; 0x34
   210a0:	str	r6, [sp, #68]	; 0x44
   210a4:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   210a8:	cmp	r0, #0
   210ac:	bne	21634 <__assert_fail@plt+0x10314>
   210b0:	ldr	r0, [sp, #56]	; 0x38
   210b4:	sub	r3, fp, #52	; 0x34
   210b8:	mov	r1, #0
   210bc:	mov	r2, r5
   210c0:	cmp	r0, #0
   210c4:	rsbmi	r0, r0, #0
   210c8:	str	r0, [sp, #56]	; 0x38
   210cc:	mov	r0, #2
   210d0:	str	r0, [sp]
   210d4:	add	r0, sp, #28
   210d8:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   210dc:	cmp	r0, #0
   210e0:	bne	21634 <__assert_fail@plt+0x10314>
   210e4:	ldr	r0, [sp, #32]
   210e8:	cmp	r0, #0
   210ec:	rsbmi	r0, r0, #0
   210f0:	cmp	r8, #0
   210f4:	str	r0, [sp, #32]
   210f8:	beq	211d4 <__assert_fail@plt+0xfeb4>
   210fc:	add	r4, sp, #64	; 0x40
   21100:	add	r5, sp, #40	; 0x28
   21104:	add	sl, sp, #52	; 0x34
   21108:	add	r7, sp, #28
   2110c:	ldr	r0, [sp, #72]	; 0x48
   21110:	cmp	r6, #0
   21114:	movwne	r6, #1
   21118:	ldr	r0, [r0]
   2111c:	tst	r0, r6
   21120:	bne	21144 <__assert_fail@plt+0xfe24>
   21124:	ldr	r1, [sp, #48]	; 0x30
   21128:	ldr	r0, [sp, #44]	; 0x2c
   2112c:	ldr	r1, [r1]
   21130:	cmp	r0, #0
   21134:	mov	r2, r0
   21138:	movwne	r2, #1
   2113c:	tst	r1, r2
   21140:	beq	21170 <__assert_fail@plt+0xfe50>
   21144:	mov	r0, r4
   21148:	mov	r1, r4
   2114c:	mov	r2, sl
   21150:	bl	1db64 <__assert_fail@plt+0xc844>
   21154:	mov	r0, r5
   21158:	mov	r1, r5
   2115c:	mov	r2, r7
   21160:	bl	1d388 <__assert_fail@plt+0xc068>
   21164:	ldr	r1, [sp, #48]	; 0x30
   21168:	ldr	r0, [sp, #44]	; 0x2c
   2116c:	ldr	r1, [r1]
   21170:	cmp	r0, #0
   21174:	movwne	r0, #1
   21178:	tst	r1, r0
   2117c:	bne	21614 <__assert_fail@plt+0x102f4>
   21180:	ldr	r1, [sp, #72]	; 0x48
   21184:	ldr	r0, [sp, #68]	; 0x44
   21188:	ldr	r1, [r1]
   2118c:	cmp	r0, #0
   21190:	movwne	r0, #1
   21194:	tst	r1, r0
   21198:	bne	21614 <__assert_fail@plt+0x102f4>
   2119c:	mov	r0, r4
   211a0:	mov	r1, r4
   211a4:	mov	r2, #1
   211a8:	mov	r3, #2
   211ac:	sub	r8, r8, #1
   211b0:	bl	1ee60 <__assert_fail@plt+0xdb40>
   211b4:	mov	r0, r5
   211b8:	mov	r1, r5
   211bc:	mov	r2, #1
   211c0:	mov	r3, #2
   211c4:	bl	1ee60 <__assert_fail@plt+0xdb40>
   211c8:	ldr	r6, [sp, #68]	; 0x44
   211cc:	cmp	r8, #0
   211d0:	bne	2110c <__assert_fail@plt+0xfdec>
   211d4:	add	r0, sp, #52	; 0x34
   211d8:	add	r1, sp, #64	; 0x40
   211dc:	mov	r2, r0
   211e0:	bl	1d388 <__assert_fail@plt+0xc068>
   211e4:	ldr	sl, [sp, #56]	; 0x38
   211e8:	cmp	r6, #0
   211ec:	mov	r1, r6
   211f0:	ldr	r8, [sp, #60]	; 0x3c
   211f4:	ldr	r5, [sp, #12]
   211f8:	ldr	r0, [sp, #72]	; 0x48
   211fc:	rsbmi	r1, r6, #0
   21200:	cmp	sl, #0
   21204:	mov	r2, sl
   21208:	rsbmi	r2, sl, #0
   2120c:	cmp	r1, r2
   21210:	bne	2124c <__assert_fail@plt+0xff2c>
   21214:	sub	r2, r0, #4
   21218:	sub	r3, r8, #4
   2121c:	cmp	r1, #1
   21220:	blt	21240 <__assert_fail@plt+0xff20>
   21224:	sub	r7, r1, #1
   21228:	ldr	r4, [r3, r1, lsl #2]
   2122c:	ldr	r1, [r2, r1, lsl #2]
   21230:	cmp	r1, r4
   21234:	mov	r1, r7
   21238:	beq	2121c <__assert_fail@plt+0xfefc>
   2123c:	bhi	21250 <__assert_fail@plt+0xff30>
   21240:	mov	r8, r0
   21244:	mov	sl, r6
   21248:	b	21280 <__assert_fail@plt+0xff60>
   2124c:	blt	21240 <__assert_fail@plt+0xff20>
   21250:	str	sl, [sp, #68]	; 0x44
   21254:	str	r8, [sp, #72]	; 0x48
   21258:	str	r6, [sp, #56]	; 0x38
   2125c:	str	r0, [sp, #60]	; 0x3c
   21260:	add	r2, sp, #28
   21264:	ldr	r0, [sp, #64]	; 0x40
   21268:	ldr	r1, [sp, #52]	; 0x34
   2126c:	str	r0, [sp, #52]	; 0x34
   21270:	add	r0, sp, #40	; 0x28
   21274:	str	r1, [sp, #64]	; 0x40
   21278:	mov	r1, r0
   2127c:	bl	1db64 <__assert_fail@plt+0xc844>
   21280:	ldr	r0, [sp, #20]
   21284:	ldr	r1, [fp, #-48]	; 0xffffffd0
   21288:	ldr	r3, [sp, #8]
   2128c:	ldr	r0, [r0, #4]
   21290:	cmn	r0, #1
   21294:	ldr	r0, [sp, #16]
   21298:	rsble	sl, sl, #0
   2129c:	strle	sl, [sp, #68]	; 0x44
   212a0:	ldr	r0, [r0, #4]
   212a4:	cmn	r0, #1
   212a8:	ldrle	r0, [sp, #44]	; 0x2c
   212ac:	rsble	r0, r0, #0
   212b0:	strle	r0, [sp, #44]	; 0x2c
   212b4:	cmp	r9, #0
   212b8:	ldr	r0, [r5, #4]
   212bc:	str	r1, [r5, #4]
   212c0:	str	r0, [fp, #-48]	; 0xffffffd0
   212c4:	ldr	r0, [r5]
   212c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   212cc:	str	r1, [r5]
   212d0:	str	r0, [fp, #-52]	; 0xffffffcc
   212d4:	ldr	r1, [r5, #8]
   212d8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   212dc:	str	r2, [r5, #8]
   212e0:	str	r1, [fp, #-44]	; 0xffffffd4
   212e4:	beq	21314 <__assert_fail@plt+0xfff4>
   212e8:	ldr	r1, [r9, #4]
   212ec:	str	sl, [r9, #4]
   212f0:	str	r1, [sp, #68]	; 0x44
   212f4:	ldr	r1, [r9]
   212f8:	ldr	r2, [sp, #64]	; 0x40
   212fc:	str	r2, [r9]
   21300:	str	r1, [sp, #64]	; 0x40
   21304:	ldr	r1, [r9, #8]
   21308:	str	r8, [r9, #8]
   2130c:	mov	r8, r1
   21310:	str	r1, [sp, #72]	; 0x48
   21314:	cmp	r3, #0
   21318:	beq	2134c <__assert_fail@plt+0x1002c>
   2131c:	ldr	r1, [r3, #4]
   21320:	ldr	r2, [sp, #44]	; 0x2c
   21324:	str	r2, [r3, #4]
   21328:	str	r1, [sp, #44]	; 0x2c
   2132c:	ldr	r1, [r3]
   21330:	ldr	r2, [sp, #40]	; 0x28
   21334:	str	r2, [r3]
   21338:	str	r1, [sp, #40]	; 0x28
   2133c:	ldr	r1, [r3, #8]
   21340:	ldr	r2, [sp, #48]	; 0x30
   21344:	str	r2, [r3, #8]
   21348:	str	r1, [sp, #48]	; 0x30
   2134c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   21350:	cmp	r1, #0
   21354:	beq	21374 <__assert_fail@plt+0x10054>
   21358:	movw	r0, #8484	; 0x2124
   2135c:	lsl	r1, r1, #2
   21360:	movt	r0, #4
   21364:	ldr	r2, [r0]
   21368:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2136c:	blx	r2
   21370:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21374:	cmp	r0, #0
   21378:	beq	21394 <__assert_fail@plt+0x10074>
   2137c:	movw	r1, #8484	; 0x2124
   21380:	movt	r1, #4
   21384:	ldr	r2, [r1]
   21388:	lsl	r1, r0, #2
   2138c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21390:	blx	r2
   21394:	ldr	r0, [sp, #64]	; 0x40
   21398:	cmp	r0, #0
   2139c:	beq	213b8 <__assert_fail@plt+0x10098>
   213a0:	movw	r1, #8484	; 0x2124
   213a4:	movt	r1, #4
   213a8:	ldr	r2, [r1]
   213ac:	lsl	r1, r0, #2
   213b0:	mov	r0, r8
   213b4:	blx	r2
   213b8:	ldr	r0, [sp, #52]	; 0x34
   213bc:	cmp	r0, #0
   213c0:	beq	213dc <__assert_fail@plt+0x100bc>
   213c4:	movw	r1, #8484	; 0x2124
   213c8:	movt	r1, #4
   213cc:	ldr	r2, [r1]
   213d0:	lsl	r1, r0, #2
   213d4:	ldr	r0, [sp, #60]	; 0x3c
   213d8:	blx	r2
   213dc:	ldr	r0, [sp, #40]	; 0x28
   213e0:	cmp	r0, #0
   213e4:	beq	21400 <__assert_fail@plt+0x100e0>
   213e8:	movw	r1, #8484	; 0x2124
   213ec:	movt	r1, #4
   213f0:	ldr	r2, [r1]
   213f4:	lsl	r1, r0, #2
   213f8:	ldr	r0, [sp, #48]	; 0x30
   213fc:	blx	r2
   21400:	ldr	r0, [sp, #28]
   21404:	cmp	r0, #0
   21408:	beq	2160c <__assert_fail@plt+0x102ec>
   2140c:	movw	r1, #8484	; 0x2124
   21410:	movt	r1, #4
   21414:	ldr	r2, [r1]
   21418:	lsl	r1, r0, #2
   2141c:	ldr	r0, [sp, #36]	; 0x24
   21420:	blx	r2
   21424:	sub	sp, fp, #28
   21428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2142c:	movw	r0, #8476	; 0x211c
   21430:	mov	r4, ip
   21434:	movt	r0, #4
   21438:	ldr	r1, [r0]
   2143c:	lsl	r0, r7, #2
   21440:	blx	r1
   21444:	str	r0, [r4, #8]
   21448:	str	r7, [r4]
   2144c:	mov	ip, r4
   21450:	ldr	r1, [r4, #4]
   21454:	cmp	r1, #0
   21458:	rsbmi	r1, r1, #0
   2145c:	cmp	r1, r7
   21460:	movgt	r1, #0
   21464:	strgt	r1, [ip, #4]
   21468:	cmp	r6, #1
   2146c:	blt	214d8 <__assert_fail@plt+0x101b8>
   21470:	ldr	r4, [r5, #8]
   21474:	mov	r2, #0
   21478:	cmp	r6, #4
   2147c:	bcc	214bc <__assert_fail@plt+0x1019c>
   21480:	add	r1, r4, r6, lsl #2
   21484:	cmp	r0, r1
   21488:	addcc	r1, r0, r6, lsl #2
   2148c:	cmpcc	r4, r1
   21490:	bcc	214bc <__assert_fail@plt+0x1019c>
   21494:	bic	r2, r6, #-2147483645	; 0x80000003
   21498:	mov	r7, r0
   2149c:	mov	r1, r4
   214a0:	mov	r3, r2
   214a4:	vld1.32	{d16-d17}, [r1]!
   214a8:	subs	r3, r3, #4
   214ac:	vst1.32	{d16-d17}, [r7]!
   214b0:	bne	214a4 <__assert_fail@plt+0x10184>
   214b4:	cmp	r6, r2
   214b8:	beq	214d8 <__assert_fail@plt+0x101b8>
   214bc:	add	r1, r4, r2, lsl #2
   214c0:	add	r0, r0, r2, lsl #2
   214c4:	sub	r2, r6, r2
   214c8:	ldr	r3, [r1], #4
   214cc:	subs	r2, r2, #1
   214d0:	str	r3, [r0], #4
   214d4:	bne	214c8 <__assert_fail@plt+0x101a8>
   214d8:	ldr	r6, [sl]
   214dc:	mov	r1, r9
   214e0:	ldr	r9, [sp, #24]
   214e4:	str	r6, [ip, #4]!
   214e8:	cmp	r6, #0
   214ec:	rsbmi	r6, r6, #0
   214f0:	cmp	r1, #0
   214f4:	movne	r0, #0
   214f8:	str	r6, [ip]
   214fc:	strne	r0, [r1, #4]
   21500:	cmp	r9, #0
   21504:	beq	2160c <__assert_fail@plt+0x102ec>
   21508:	mov	r0, r9
   2150c:	mov	r1, r8
   21510:	bl	1bfbc <__assert_fail@plt+0xac9c>
   21514:	sub	sp, fp, #28
   21518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2151c:	movw	r0, #8476	; 0x211c
   21520:	mov	r5, ip
   21524:	movt	r0, #4
   21528:	ldr	r1, [r0]
   2152c:	lsl	r0, r6, #2
   21530:	blx	r1
   21534:	str	r0, [r5, #8]
   21538:	str	r6, [r5]
   2153c:	mov	ip, r5
   21540:	ldr	r1, [r5, #4]
   21544:	cmp	r1, #0
   21548:	rsbmi	r1, r1, #0
   2154c:	cmp	r1, r6
   21550:	movgt	r1, #0
   21554:	strgt	r1, [ip, #4]
   21558:	cmp	r4, #1
   2155c:	blt	215c8 <__assert_fail@plt+0x102a8>
   21560:	ldr	r5, [r8, #8]
   21564:	mov	r2, #0
   21568:	cmp	r4, #4
   2156c:	bcc	215ac <__assert_fail@plt+0x1028c>
   21570:	add	r1, r5, r4, lsl #2
   21574:	cmp	r0, r1
   21578:	addcc	r1, r0, r4, lsl #2
   2157c:	cmpcc	r5, r1
   21580:	bcc	215ac <__assert_fail@plt+0x1028c>
   21584:	bic	r2, r4, #-2147483645	; 0x80000003
   21588:	mov	r6, r0
   2158c:	mov	r1, r5
   21590:	mov	r3, r2
   21594:	vld1.32	{d16-d17}, [r1]!
   21598:	subs	r3, r3, #4
   2159c:	vst1.32	{d16-d17}, [r6]!
   215a0:	bne	21594 <__assert_fail@plt+0x10274>
   215a4:	cmp	r4, r2
   215a8:	beq	215c8 <__assert_fail@plt+0x102a8>
   215ac:	add	r1, r5, r2, lsl #2
   215b0:	add	r0, r0, r2, lsl #2
   215b4:	sub	r2, r4, r2
   215b8:	ldr	r3, [r1], #4
   215bc:	subs	r2, r2, #1
   215c0:	str	r3, [r0], #4
   215c4:	bne	215b8 <__assert_fail@plt+0x10298>
   215c8:	ldr	r4, [r7]
   215cc:	mov	r1, r9
   215d0:	ldr	r9, [sp, #24]
   215d4:	str	r4, [ip, #4]!
   215d8:	cmp	r4, #0
   215dc:	rsbmi	r4, r4, #0
   215e0:	cmp	r1, #0
   215e4:	str	r4, [ip]
   215e8:	beq	215f8 <__assert_fail@plt+0x102d8>
   215ec:	mov	r0, r1
   215f0:	mov	r1, sl
   215f4:	bl	1bfbc <__assert_fail@plt+0xac9c>
   215f8:	cmp	r9, #0
   215fc:	movne	r0, #0
   21600:	strne	r0, [r9, #4]
   21604:	subne	sp, fp, #28
   21608:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2160c:	sub	sp, fp, #28
   21610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21614:	movw	r0, #2731	; 0xaab
   21618:	movw	r1, #1588	; 0x634
   2161c:	movw	r3, #2766	; 0xace
   21620:	movw	r2, #2950	; 0xb86
   21624:	movt	r0, #3
   21628:	movt	r1, #3
   2162c:	movt	r3, #3
   21630:	bl	11320 <__assert_fail@plt>
   21634:	movw	r0, #2569	; 0xa09
   21638:	movw	r1, #1588	; 0x634
   2163c:	movw	r3, #2579	; 0xa13
   21640:	movw	r2, #2521	; 0x9d9
   21644:	movt	r0, #3
   21648:	movt	r1, #3
   2164c:	movt	r3, #3
   21650:	bl	11320 <__assert_fail@plt>
   21654:	str	r1, [fp, #-36]	; 0xffffffdc
   21658:	movw	r0, #5090	; 0x13e2
   2165c:	movw	r1, #1588	; 0x634
   21660:	movw	r3, #5106	; 0x13f2
   21664:	movw	r2, #2723	; 0xaa3
   21668:	movt	r0, #3
   2166c:	movt	r1, #3
   21670:	movt	r3, #3
   21674:	bl	11320 <__assert_fail@plt>
   21678:	ldr	r2, [r0, #4]
   2167c:	cmp	r2, #0
   21680:	mov	r3, r2
   21684:	rsbmi	r3, r2, #0
   21688:	push	{r4, r5, r6, sl, fp, lr}
   2168c:	add	fp, sp, #16
   21690:	cmp	r3, r1, lsr #5
   21694:	ble	216f4 <__assert_fail@plt+0x103d4>
   21698:	ldr	lr, [r0, #8]
   2169c:	lsr	r6, r1, #5
   216a0:	and	r5, r1, #31
   216a4:	mov	r3, #1
   216a8:	cmn	r2, #1
   216ac:	ldr	r4, [lr, r6, lsl #2]
   216b0:	and	ip, r3, r4, lsr r5
   216b4:	bgt	216f8 <__assert_fail@plt+0x103d8>
   216b8:	cmp	r5, #0
   216bc:	beq	216d0 <__assert_fail@plt+0x103b0>
   216c0:	rsb	r3, r5, #32
   216c4:	mov	r5, #0
   216c8:	cmp	r5, r4, lsl r3
   216cc:	bne	216ec <__assert_fail@plt+0x103cc>
   216d0:	sub	r4, lr, #4
   216d4:	subs	r3, r6, #1
   216d8:	blt	216f8 <__assert_fail@plt+0x103d8>
   216dc:	ldr	r6, [r4, r6, lsl #2]
   216e0:	cmp	r6, #0
   216e4:	mov	r6, r3
   216e8:	beq	216d4 <__assert_fail@plt+0x103b4>
   216ec:	eor	ip, ip, #1
   216f0:	b	216f8 <__assert_fail@plt+0x103d8>
   216f4:	lsr	ip, r2, #31
   216f8:	cmp	ip, #0
   216fc:	pop	{r4, r5, r6, sl, fp, lr}
   21700:	bxne	lr
   21704:	cmp	r2, #0
   21708:	blt	21710 <__assert_fail@plt+0x103f0>
   2170c:	b	252ac <__assert_fail@plt+0x13f8c>
   21710:	b	2548c <__assert_fail@plt+0x1416c>
   21714:	push	{r4, r5, r6, r7, fp, lr}
   21718:	add	fp, sp, #16
   2171c:	sub	sp, sp, #16
   21720:	mov	r4, r0
   21724:	ldr	r0, [r1, #4]
   21728:	cmp	r0, #0
   2172c:	beq	217d4 <__assert_fail@plt+0x104b4>
   21730:	ldr	r0, [r2, #4]
   21734:	mov	r5, r2
   21738:	cmp	r0, #0
   2173c:	beq	217d4 <__assert_fail@plt+0x104b4>
   21740:	mov	r0, #0
   21744:	add	r7, sp, #4
   21748:	mov	r2, r5
   2174c:	mov	r6, r1
   21750:	str	r0, [sp, #8]
   21754:	str	r0, [sp, #4]
   21758:	movw	r0, #1584	; 0x630
   2175c:	movt	r0, #3
   21760:	str	r0, [sp, #12]
   21764:	mov	r0, r7
   21768:	bl	1fd0c <__assert_fail@plt+0xe9ec>
   2176c:	mov	r0, #2
   21770:	mov	r1, #0
   21774:	mov	r2, r6
   21778:	mov	r3, r7
   2177c:	str	r0, [sp]
   21780:	mov	r0, r7
   21784:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   21788:	cmp	r0, #0
   2178c:	bne	217e4 <__assert_fail@plt+0x104c4>
   21790:	add	r1, sp, #4
   21794:	mov	r0, r4
   21798:	mov	r2, r5
   2179c:	bl	1df50 <__assert_fail@plt+0xcc30>
   217a0:	ldr	r0, [sp, #4]
   217a4:	cmp	r0, #0
   217a8:	beq	217c4 <__assert_fail@plt+0x104a4>
   217ac:	movw	r1, #8484	; 0x2124
   217b0:	movt	r1, #4
   217b4:	ldr	r2, [r1]
   217b8:	lsl	r1, r0, #2
   217bc:	ldr	r0, [sp, #12]
   217c0:	blx	r2
   217c4:	ldr	r0, [r4, #4]
   217c8:	cmp	r0, #0
   217cc:	rsbmi	r0, r0, #0
   217d0:	b	217d8 <__assert_fail@plt+0x104b8>
   217d4:	mov	r0, #0
   217d8:	str	r0, [r4, #4]
   217dc:	sub	sp, fp, #16
   217e0:	pop	{r4, r5, r6, r7, fp, pc}
   217e4:	movw	r0, #2569	; 0xa09
   217e8:	movw	r1, #1588	; 0x634
   217ec:	movw	r3, #2579	; 0xa13
   217f0:	movw	r2, #2521	; 0x9d9
   217f4:	movt	r0, #3
   217f8:	movt	r1, #3
   217fc:	movt	r3, #3
   21800:	bl	11320 <__assert_fail@plt>
   21804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21808:	add	fp, sp, #28
   2180c:	sub	sp, sp, #12
   21810:	mov	r4, r0
   21814:	cmp	r2, #0
   21818:	beq	218d8 <__assert_fail@plt+0x105b8>
   2181c:	ldr	r0, [r1, #4]
   21820:	mov	r5, r1
   21824:	cmp	r0, #0
   21828:	beq	218d8 <__assert_fail@plt+0x105b8>
   2182c:	movw	r9, #8476	; 0x211c
   21830:	mov	r7, #1
   21834:	mov	r0, #4
   21838:	mov	r6, r2
   2183c:	movt	r9, #4
   21840:	str	r7, [sp, #4]
   21844:	ldr	r1, [r9]
   21848:	blx	r1
   2184c:	str	r7, [sp]
   21850:	str	r0, [sp, #8]
   21854:	str	r6, [r0]
   21858:	mov	r0, sp
   2185c:	mov	r1, r5
   21860:	mov	r2, r0
   21864:	bl	1fd0c <__assert_fail@plt+0xe9ec>
   21868:	ldr	r0, [sp, #4]
   2186c:	cmp	r0, #0
   21870:	ldrne	r0, [sp, #8]
   21874:	ldrne	r8, [r0]
   21878:	ldr	r0, [sp]
   2187c:	moveq	r8, #0
   21880:	cmp	r0, #0
   21884:	beq	218a0 <__assert_fail@plt+0x10580>
   21888:	movw	r1, #8484	; 0x2124
   2188c:	movt	r1, #4
   21890:	ldr	r2, [r1]
   21894:	lsl	r1, r0, #2
   21898:	ldr	r0, [sp, #8]
   2189c:	blx	r2
   218a0:	movw	r1, #1584	; 0x630
   218a4:	mov	r0, #0
   218a8:	cmp	r8, r6
   218ac:	movt	r1, #3
   218b0:	str	r0, [sp, #4]
   218b4:	str	r0, [sp]
   218b8:	str	r1, [sp, #8]
   218bc:	bls	218e0 <__assert_fail@plt+0x105c0>
   218c0:	str	r0, [sp, #4]
   218c4:	mov	r2, sp
   218c8:	mov	r0, r4
   218cc:	mov	r1, r5
   218d0:	bl	1df50 <__assert_fail@plt+0xcc30>
   218d4:	b	21930 <__assert_fail@plt+0x10610>
   218d8:	mov	r0, #0
   218dc:	b	2193c <__assert_fail@plt+0x1061c>
   218e0:	ldr	r1, [r9]
   218e4:	mov	sl, #1
   218e8:	mov	r0, #4
   218ec:	str	sl, [sp, #4]
   218f0:	blx	r1
   218f4:	str	sl, [sp]
   218f8:	mov	r7, r0
   218fc:	str	r0, [sp, #8]
   21900:	udiv	r0, r6, r8
   21904:	mov	r2, sp
   21908:	mov	r1, r5
   2190c:	str	r0, [r7]
   21910:	mov	r0, r4
   21914:	bl	1df50 <__assert_fail@plt+0xcc30>
   21918:	movw	r0, #8484	; 0x2124
   2191c:	mov	r1, #4
   21920:	movt	r0, #4
   21924:	ldr	r2, [r0]
   21928:	mov	r0, r7
   2192c:	blx	r2
   21930:	ldr	r0, [r4, #4]
   21934:	cmp	r0, #0
   21938:	rsbmi	r0, r0, #0
   2193c:	str	r0, [r4, #4]
   21940:	sub	sp, fp, #28
   21944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21948:	push	{r4, r5, r6, sl, fp, lr}
   2194c:	add	fp, sp, #16
   21950:	sub	sp, sp, #32
   21954:	mov	r4, r0
   21958:	ldr	r0, [r1, #4]
   2195c:	mov	r5, #0
   21960:	cmp	r0, #0
   21964:	beq	21ac4 <__assert_fail@plt+0x107a4>
   21968:	ldr	r0, [r2, #4]
   2196c:	mov	r3, r1
   21970:	mov	r6, r2
   21974:	cmp	r0, #0
   21978:	mov	r1, r0
   2197c:	rsbmi	r1, r0, #0
   21980:	cmp	r1, #1
   21984:	bgt	219a0 <__assert_fail@plt+0x10680>
   21988:	cmp	r0, #0
   2198c:	beq	21ac4 <__assert_fail@plt+0x107a4>
   21990:	ldr	r0, [r6, #8]
   21994:	ldr	r0, [r0]
   21998:	cmp	r0, #2
   2199c:	bcc	21ac4 <__assert_fail@plt+0x107a4>
   219a0:	movw	r0, #1584	; 0x630
   219a4:	mov	r5, #0
   219a8:	add	r1, sp, #8
   219ac:	mov	r2, #0
   219b0:	str	r6, [sp]
   219b4:	movt	r0, #3
   219b8:	str	r5, [sp, #24]
   219bc:	str	r5, [sp, #20]
   219c0:	str	r5, [sp, #8]
   219c4:	str	r5, [sp, #12]
   219c8:	str	r0, [sp, #28]
   219cc:	str	r0, [sp, #16]
   219d0:	add	r0, sp, #20
   219d4:	bl	20728 <__assert_fail@plt+0xf408>
   219d8:	ldr	r0, [sp, #24]
   219dc:	cmp	r0, #1
   219e0:	bne	21a7c <__assert_fail@plt+0x1075c>
   219e4:	ldr	r0, [sp, #28]
   219e8:	mov	r1, #0
   219ec:	mov	r5, #0
   219f0:	ldr	r0, [r0]
   219f4:	cmp	r0, #1
   219f8:	clz	r0, r0
   219fc:	movwhi	r1, #1
   21a00:	lsr	r0, r0, #5
   21a04:	teq	r1, r0
   21a08:	bne	21a7c <__assert_fail@plt+0x1075c>
   21a0c:	ldr	r0, [sp, #12]
   21a10:	cmn	r0, #1
   21a14:	bgt	21a48 <__assert_fail@plt+0x10728>
   21a18:	ldr	r0, [r6, #4]
   21a1c:	cmp	r0, #0
   21a20:	blt	21a38 <__assert_fail@plt+0x10718>
   21a24:	add	r0, sp, #8
   21a28:	mov	r2, r6
   21a2c:	mov	r1, r0
   21a30:	bl	1d388 <__assert_fail@plt+0xc068>
   21a34:	b	21a48 <__assert_fail@plt+0x10728>
   21a38:	add	r0, sp, #8
   21a3c:	mov	r2, r6
   21a40:	mov	r1, r0
   21a44:	bl	1db64 <__assert_fail@plt+0xc844>
   21a48:	ldr	r0, [r4, #4]
   21a4c:	ldr	r1, [sp, #12]
   21a50:	mov	r5, #1
   21a54:	str	r1, [r4, #4]
   21a58:	str	r0, [sp, #12]
   21a5c:	ldr	r0, [r4]
   21a60:	ldr	r1, [sp, #8]
   21a64:	str	r1, [r4]
   21a68:	str	r0, [sp, #8]
   21a6c:	ldr	r0, [r4, #8]
   21a70:	ldr	r1, [sp, #16]
   21a74:	str	r1, [r4, #8]
   21a78:	str	r0, [sp, #16]
   21a7c:	ldr	r0, [sp, #20]
   21a80:	cmp	r0, #0
   21a84:	beq	21aa0 <__assert_fail@plt+0x10780>
   21a88:	movw	r1, #8484	; 0x2124
   21a8c:	movt	r1, #4
   21a90:	ldr	r2, [r1]
   21a94:	lsl	r1, r0, #2
   21a98:	ldr	r0, [sp, #28]
   21a9c:	blx	r2
   21aa0:	ldr	r0, [sp, #8]
   21aa4:	cmp	r0, #0
   21aa8:	beq	21ac4 <__assert_fail@plt+0x107a4>
   21aac:	movw	r1, #8484	; 0x2124
   21ab0:	movt	r1, #4
   21ab4:	ldr	r2, [r1]
   21ab8:	lsl	r1, r0, #2
   21abc:	ldr	r0, [sp, #16]
   21ac0:	blx	r2
   21ac4:	mov	r0, r5
   21ac8:	sub	sp, fp, #16
   21acc:	pop	{r4, r5, r6, sl, fp, pc}
   21ad0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21ad4:	add	fp, sp, #24
   21ad8:	sub	sp, sp, #16
   21adc:	mov	r8, r0
   21ae0:	movw	r0, #8476	; 0x211c
   21ae4:	mov	r9, r1
   21ae8:	mov	r4, #1
   21aec:	mov	r5, r2
   21af0:	movt	r0, #4
   21af4:	str	r4, [sp, #8]
   21af8:	ldr	r1, [r0]
   21afc:	mov	r0, #4
   21b00:	blx	r1
   21b04:	str	r4, [sp, #4]
   21b08:	str	r0, [sp, #12]
   21b0c:	str	r4, [r0]
   21b10:	mov	r4, #-2147483648	; 0x80000000
   21b14:	add	r7, sp, #4
   21b18:	mov	r6, #0
   21b1c:	mov	r0, r7
   21b20:	mov	r1, r7
   21b24:	mov	r2, r7
   21b28:	bl	1df50 <__assert_fail@plt+0xcc30>
   21b2c:	tst	r4, r5
   21b30:	beq	21b44 <__assert_fail@plt+0x10824>
   21b34:	mov	r0, r7
   21b38:	mov	r1, r7
   21b3c:	mov	r2, r9
   21b40:	bl	1df50 <__assert_fail@plt+0xcc30>
   21b44:	lsr	r0, r4, #1
   21b48:	cmp	r6, r4, lsr #1
   21b4c:	mov	r4, r0
   21b50:	bne	21b1c <__assert_fail@plt+0x107fc>
   21b54:	ldr	r0, [r8, #4]
   21b58:	ldr	r1, [sp, #8]
   21b5c:	str	r1, [r8, #4]
   21b60:	str	r0, [sp, #8]
   21b64:	ldr	r1, [r8]
   21b68:	ldr	r0, [sp, #4]
   21b6c:	str	r0, [r8]
   21b70:	str	r1, [sp, #4]
   21b74:	cmp	r1, #0
   21b78:	ldr	r0, [r8, #8]
   21b7c:	ldr	r2, [sp, #12]
   21b80:	str	r2, [r8, #8]
   21b84:	str	r0, [sp, #12]
   21b88:	beq	21ba0 <__assert_fail@plt+0x10880>
   21b8c:	movw	r2, #8484	; 0x2124
   21b90:	lsl	r1, r1, #2
   21b94:	movt	r2, #4
   21b98:	ldr	r2, [r2]
   21b9c:	blx	r2
   21ba0:	sub	sp, fp, #24
   21ba4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21bac:	add	fp, sp, #28
   21bb0:	sub	sp, sp, #28
   21bb4:	mov	sl, r0
   21bb8:	movw	r0, #1584	; 0x630
   21bbc:	mov	r9, #0
   21bc0:	mov	r6, r2
   21bc4:	cmp	r1, #0
   21bc8:	movt	r0, #3
   21bcc:	str	r9, [sp, #8]
   21bd0:	str	r9, [sp, #4]
   21bd4:	str	r0, [sp, #12]
   21bd8:	beq	21c0c <__assert_fail@plt+0x108ec>
   21bdc:	movw	r0, #8476	; 0x211c
   21be0:	mov	r4, r1
   21be4:	mov	r9, #1
   21be8:	movt	r0, #4
   21bec:	str	r9, [sp, #8]
   21bf0:	ldr	r1, [r0]
   21bf4:	mov	r0, #4
   21bf8:	blx	r1
   21bfc:	str	r0, [sp, #12]
   21c00:	stm	sp, {r0, r9}
   21c04:	str	r4, [r0]
   21c08:	b	21c14 <__assert_fail@plt+0x108f4>
   21c0c:	str	r0, [sp]
   21c10:	str	r9, [sp, #8]
   21c14:	movw	r0, #8476	; 0x211c
   21c18:	mov	r4, #1
   21c1c:	movt	r0, #4
   21c20:	str	r4, [sp, #20]
   21c24:	ldr	r1, [r0]
   21c28:	mov	r0, #4
   21c2c:	blx	r1
   21c30:	str	r4, [sp, #16]
   21c34:	str	r0, [sp, #24]
   21c38:	str	r4, [r0]
   21c3c:	mov	r5, #-2147483648	; 0x80000000
   21c40:	add	r7, sp, #16
   21c44:	mov	r8, #0
   21c48:	add	r4, sp, #4
   21c4c:	mov	r0, r7
   21c50:	mov	r1, r7
   21c54:	mov	r2, r7
   21c58:	bl	1df50 <__assert_fail@plt+0xcc30>
   21c5c:	tst	r5, r6
   21c60:	beq	21c74 <__assert_fail@plt+0x10954>
   21c64:	mov	r0, r7
   21c68:	mov	r1, r7
   21c6c:	mov	r2, r4
   21c70:	bl	1df50 <__assert_fail@plt+0xcc30>
   21c74:	lsr	r0, r5, #1
   21c78:	cmp	r8, r5, lsr #1
   21c7c:	mov	r5, r0
   21c80:	bne	21c4c <__assert_fail@plt+0x1092c>
   21c84:	ldr	r0, [sl, #4]
   21c88:	ldr	r1, [sp, #20]
   21c8c:	str	r1, [sl, #4]
   21c90:	str	r0, [sp, #20]
   21c94:	ldr	r1, [sl]
   21c98:	ldr	r0, [sp, #16]
   21c9c:	str	r0, [sl]
   21ca0:	str	r1, [sp, #16]
   21ca4:	cmp	r1, #0
   21ca8:	ldr	r0, [sl, #8]
   21cac:	ldr	r2, [sp, #24]
   21cb0:	str	r2, [sl, #8]
   21cb4:	str	r0, [sp, #24]
   21cb8:	beq	21cd0 <__assert_fail@plt+0x109b0>
   21cbc:	movw	r2, #8484	; 0x2124
   21cc0:	lsl	r1, r1, #2
   21cc4:	movt	r2, #4
   21cc8:	ldr	r2, [r2]
   21ccc:	blx	r2
   21cd0:	cmp	r9, #0
   21cd4:	beq	21cf0 <__assert_fail@plt+0x109d0>
   21cd8:	movw	r0, #8484	; 0x2124
   21cdc:	lsl	r1, r9, #2
   21ce0:	movt	r0, #4
   21ce4:	ldr	r2, [r0]
   21ce8:	ldr	r0, [sp]
   21cec:	blx	r2
   21cf0:	sub	sp, fp, #28
   21cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cfc:	add	fp, sp, #28
   21d00:	sub	sp, sp, #84	; 0x54
   21d04:	str	r2, [sp, #24]
   21d08:	mov	r5, r0
   21d0c:	ldr	r4, [r3, #4]
   21d10:	mov	sl, r3
   21d14:	mov	r8, r1
   21d18:	ldr	r0, [sp, #24]
   21d1c:	cmp	r4, #0
   21d20:	ldr	r0, [r0, #4]
   21d24:	rsbmi	r4, r4, #0
   21d28:	cmp	r0, #0
   21d2c:	rsbmi	r0, r0, #0
   21d30:	cmp	r4, #0
   21d34:	beq	223b8 <__assert_fail@plt+0x11098>
   21d38:	cmp	r0, #0
   21d3c:	beq	21e1c <__assert_fail@plt+0x10afc>
   21d40:	ldr	r7, [sl, #8]
   21d44:	str	r0, [sp, #32]
   21d48:	add	r0, sp, #44	; 0x2c
   21d4c:	mov	r2, r4
   21d50:	str	r5, [sp, #12]
   21d54:	mov	r1, r7
   21d58:	bl	22490 <__assert_fail@plt+0x11170>
   21d5c:	ldr	r5, [sp, #44]	; 0x2c
   21d60:	mov	r9, #0
   21d64:	mov	r0, #0
   21d68:	cmp	r5, #0
   21d6c:	str	r5, [sp, #20]
   21d70:	beq	21e38 <__assert_fail@plt+0x10b18>
   21d74:	str	r0, [sp, #44]	; 0x2c
   21d78:	movw	r0, #8476	; 0x211c
   21d7c:	movt	r0, #4
   21d80:	ldr	r1, [r0]
   21d84:	lsl	r0, r4, #2
   21d88:	blx	r1
   21d8c:	cmp	r4, #0
   21d90:	str	r0, [sp, #16]
   21d94:	ble	223c4 <__assert_fail@plt+0x110a4>
   21d98:	cmp	r5, #32
   21d9c:	bcs	223e4 <__assert_fail@plt+0x110c4>
   21da0:	add	r0, r7, r4, lsl #2
   21da4:	rsb	r2, r5, #32
   21da8:	cmp	r4, #1
   21dac:	ldr	r0, [r0, #-4]
   21db0:	lsl	r1, r0, r5
   21db4:	lsr	r0, r0, r2
   21db8:	beq	21dec <__assert_fail@plt+0x10acc>
   21dbc:	sub	r3, r7, #8
   21dc0:	ldr	r7, [sp, #16]
   21dc4:	mov	r6, r4
   21dc8:	sub	r5, r7, #4
   21dcc:	ldr	r7, [r3, r6, lsl #2]
   21dd0:	orr	r1, r1, r7, lsr r2
   21dd4:	str	r1, [r5, r6, lsl #2]
   21dd8:	ldr	r1, [sp, #20]
   21ddc:	sub	r6, r6, #1
   21de0:	cmp	r6, #1
   21de4:	lsl	r1, r7, r1
   21de8:	bne	21dcc <__assert_fail@plt+0x10aac>
   21dec:	ldr	r7, [sp, #16]
   21df0:	cmp	r0, #0
   21df4:	str	r1, [r7]
   21df8:	beq	21e3c <__assert_fail@plt+0x10b1c>
   21dfc:	movw	r0, #2569	; 0xa09
   21e00:	movw	r1, #1588	; 0x634
   21e04:	movw	r3, #2897	; 0xb51
   21e08:	movw	r2, #3116	; 0xc2c
   21e0c:	movt	r0, #3
   21e10:	movt	r1, #3
   21e14:	movt	r3, #3
   21e18:	bl	11320 <__assert_fail@plt>
   21e1c:	mov	r0, #1
   21e20:	str	r0, [r5, #4]
   21e24:	ldr	r1, [r5]
   21e28:	cmp	r1, #0
   21e2c:	ble	21f6c <__assert_fail@plt+0x10c4c>
   21e30:	ldr	r0, [r5, #8]
   21e34:	b	22070 <__assert_fail@plt+0x10d50>
   21e38:	str	r0, [sp, #16]
   21e3c:	ldr	r0, [sp, #24]
   21e40:	movw	r1, #1584	; 0x630
   21e44:	str	r9, [fp, #-48]	; 0xffffffd0
   21e48:	str	r9, [fp, #-52]	; 0xffffffcc
   21e4c:	str	r4, [sp, #40]	; 0x28
   21e50:	str	r7, [sp, #36]	; 0x24
   21e54:	movt	r1, #3
   21e58:	str	r1, [fp, #-44]	; 0xffffffd4
   21e5c:	ldr	r0, [r0, #4]
   21e60:	cmn	r0, #1
   21e64:	sub	r0, fp, #52	; 0x34
   21e68:	ble	21f40 <__assert_fail@plt+0x10c20>
   21e6c:	cmp	r0, r8
   21e70:	beq	21f64 <__assert_fail@plt+0x10c44>
   21e74:	ldr	r0, [r8, #4]
   21e78:	cmp	r0, #0
   21e7c:	mov	r5, r0
   21e80:	rsbmi	r5, r0, #0
   21e84:	cmp	r5, #1
   21e88:	blt	21f90 <__assert_fail@plt+0x10c70>
   21e8c:	movw	r0, #8476	; 0x211c
   21e90:	movt	r0, #4
   21e94:	ldr	r1, [r0]
   21e98:	lsl	r0, r5, #2
   21e9c:	blx	r1
   21ea0:	str	r0, [fp, #-44]	; 0xffffffd4
   21ea4:	str	r5, [fp, #-52]	; 0xffffffcc
   21ea8:	mov	r1, r0
   21eac:	mov	r2, #0
   21eb0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21eb4:	cmp	r0, #0
   21eb8:	rsbmi	r0, r0, #0
   21ebc:	cmp	r0, r5
   21ec0:	movgt	r0, #0
   21ec4:	strgt	r0, [fp, #-48]	; 0xffffffd0
   21ec8:	cmp	r5, #4
   21ecc:	ldr	r6, [r8, #8]
   21ed0:	bcc	21f14 <__assert_fail@plt+0x10bf4>
   21ed4:	add	r0, r6, r5, lsl #2
   21ed8:	cmp	r1, r0
   21edc:	bcs	21eec <__assert_fail@plt+0x10bcc>
   21ee0:	add	r0, r1, r5, lsl #2
   21ee4:	cmp	r0, r6
   21ee8:	bhi	21f14 <__assert_fail@plt+0x10bf4>
   21eec:	bic	r2, r5, #-2147483645	; 0x80000003
   21ef0:	mov	r7, r1
   21ef4:	mov	r0, r6
   21ef8:	mov	r3, r2
   21efc:	vld1.32	{d16-d17}, [r0]!
   21f00:	subs	r3, r3, #4
   21f04:	vst1.32	{d16-d17}, [r7]!
   21f08:	bne	21efc <__assert_fail@plt+0x10bdc>
   21f0c:	cmp	r5, r2
   21f10:	beq	21f30 <__assert_fail@plt+0x10c10>
   21f14:	add	r0, r6, r2, lsl #2
   21f18:	add	r3, r1, r2, lsl #2
   21f1c:	sub	r2, r5, r2
   21f20:	ldr	r7, [r0], #4
   21f24:	subs	r2, r2, #1
   21f28:	str	r7, [r3], #4
   21f2c:	bne	21f20 <__assert_fail@plt+0x10c00>
   21f30:	ldr	r0, [r8, #4]
   21f34:	ldr	r7, [sp, #36]	; 0x24
   21f38:	rsb	r9, r0, #0
   21f3c:	b	21f9c <__assert_fail@plt+0x10c7c>
   21f40:	mov	r1, r8
   21f44:	mov	r2, sl
   21f48:	bl	21948 <__assert_fail@plt+0x10628>
   21f4c:	ldr	r5, [sp, #32]
   21f50:	cmp	r0, #0
   21f54:	bne	221b4 <__assert_fail@plt+0x10e94>
   21f58:	movw	r0, #2993	; 0xbb1
   21f5c:	movt	r0, #3
   21f60:	bl	22464 <__assert_fail@plt+0x11144>
   21f64:	mov	r9, #0
   21f68:	b	21fa8 <__assert_fail@plt+0x10c88>
   21f6c:	beq	22038 <__assert_fail@plt+0x10d18>
   21f70:	movw	r0, #8480	; 0x2120
   21f74:	lsl	r1, r1, #2
   21f78:	mov	r2, #4
   21f7c:	movt	r0, #4
   21f80:	ldr	r3, [r0]
   21f84:	ldr	r0, [r5, #8]
   21f88:	blx	r3
   21f8c:	b	2204c <__assert_fail@plt+0x10d2c>
   21f90:	movw	r1, #1584	; 0x630
   21f94:	rsb	r9, r0, #0
   21f98:	movt	r1, #3
   21f9c:	cmp	r0, #0
   21fa0:	str	r0, [fp, #-48]	; 0xffffffd0
   21fa4:	movge	r9, r0
   21fa8:	cmp	r9, r4
   21fac:	mov	sl, r9
   21fb0:	str	r9, [fp, #-48]	; 0xffffffd0
   21fb4:	blt	21fd8 <__assert_fail@plt+0x10cb8>
   21fb8:	ldr	sl, [sp, #40]	; 0x28
   21fbc:	add	r0, sp, #44	; 0x2c
   21fc0:	mov	r2, r9
   21fc4:	mov	r3, r7
   21fc8:	str	r0, [sp, #4]
   21fcc:	mov	r0, #0
   21fd0:	str	sl, [sp]
   21fd4:	bl	22710 <__assert_fail@plt+0x113f0>
   21fd8:	ldr	r0, [r8, #4]
   21fdc:	cmp	r0, #0
   21fe0:	blt	21ff0 <__assert_fail@plt+0x10cd0>
   21fe4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21fe8:	ldr	r5, [sp, #32]
   21fec:	b	2218c <__assert_fail@plt+0x10e6c>
   21ff0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   21ff4:	ldr	r6, [sp, #40]	; 0x28
   21ff8:	cmp	r6, r1
   21ffc:	ble	22030 <__assert_fail@plt+0x10d10>
   22000:	cmp	r6, #1
   22004:	movle	r6, #1
   22008:	cmp	r1, #0
   2200c:	beq	22080 <__assert_fail@plt+0x10d60>
   22010:	movw	r0, #8480	; 0x2120
   22014:	lsl	r1, r1, #2
   22018:	lsl	r2, r6, #2
   2201c:	movt	r0, #4
   22020:	ldr	r3, [r0]
   22024:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22028:	blx	r3
   2202c:	b	22094 <__assert_fail@plt+0x10d74>
   22030:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22034:	b	220b4 <__assert_fail@plt+0x10d94>
   22038:	movw	r0, #8476	; 0x211c
   2203c:	movt	r0, #4
   22040:	ldr	r1, [r0]
   22044:	mov	r0, #4
   22048:	blx	r1
   2204c:	mov	r1, #1
   22050:	str	r0, [r5, #8]
   22054:	str	r1, [r5]
   22058:	ldr	r1, [r5, #4]
   2205c:	cmp	r1, #0
   22060:	rsbmi	r1, r1, #0
   22064:	cmp	r1, #2
   22068:	movge	r1, #0
   2206c:	strge	r1, [r5, #4]
   22070:	mov	r1, #1
   22074:	str	r1, [r0]
   22078:	sub	sp, fp, #28
   2207c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22080:	movw	r0, #8476	; 0x211c
   22084:	movt	r0, #4
   22088:	ldr	r1, [r0]
   2208c:	lsl	r0, r6, #2
   22090:	blx	r1
   22094:	str	r0, [fp, #-44]	; 0xffffffd4
   22098:	str	r6, [fp, #-52]	; 0xffffffcc
   2209c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   220a0:	cmp	r1, #0
   220a4:	rsbmi	r1, r1, #0
   220a8:	cmp	r1, r6
   220ac:	movgt	r1, #0
   220b0:	strgt	r1, [fp, #-48]	; 0xffffffd0
   220b4:	ldr	r1, [sp, #40]	; 0x28
   220b8:	cmp	r1, sl
   220bc:	blt	22404 <__assert_fail@plt+0x110e4>
   220c0:	mov	r1, #0
   220c4:	cmp	sl, #1
   220c8:	blt	22108 <__assert_fail@plt+0x10de8>
   220cc:	mov	r2, r7
   220d0:	mov	r3, r0
   220d4:	mov	r7, sl
   220d8:	ldr	r5, [r3]
   220dc:	ldr	r6, [r2], #4
   220e0:	adds	r4, r5, r1
   220e4:	cmp	r6, r4
   220e8:	mov	r4, #0
   220ec:	movwcc	r4, #1
   220f0:	adds	r5, r5, r1
   220f4:	sub	r6, r6, r5
   220f8:	adc	r1, r4, #0
   220fc:	subs	r7, r7, #1
   22100:	str	r6, [r3], #4
   22104:	bne	220d8 <__assert_fail@plt+0x10db8>
   22108:	ldr	r5, [sp, #40]	; 0x28
   2210c:	cmp	r5, sl
   22110:	ble	2217c <__assert_fail@plt+0x10e5c>
   22114:	sub	r2, r5, sl
   22118:	cmp	r2, #1
   2211c:	ldr	r2, [sp, #36]	; 0x24
   22120:	blt	22444 <__assert_fail@plt+0x11124>
   22124:	mvn	r7, r9
   22128:	mvn	r6, r5
   2212c:	add	r2, r2, sl, lsl #2
   22130:	add	r3, r0, sl, lsl #2
   22134:	mov	sl, r5
   22138:	cmp	r7, r6
   2213c:	movgt	r6, r7
   22140:	add	r7, r5, r6
   22144:	add	r7, r7, #1
   22148:	ldr	r5, [r2], #4
   2214c:	mov	r6, r1
   22150:	cmp	r5, r1
   22154:	mov	r1, #0
   22158:	sub	r4, r5, r6
   2215c:	movwcc	r1, #1
   22160:	str	r4, [r3], #4
   22164:	subs	r7, r7, #1
   22168:	bne	22148 <__assert_fail@plt+0x10e28>
   2216c:	mov	r1, #0
   22170:	cmp	r5, r6
   22174:	movwcc	r1, #1
   22178:	b	22180 <__assert_fail@plt+0x10e60>
   2217c:	mov	sl, r5
   22180:	ldr	r5, [sp, #32]
   22184:	cmp	r1, #0
   22188:	bne	22424 <__assert_fail@plt+0x11104>
   2218c:	sub	r0, r0, #4
   22190:	mov	r1, sl
   22194:	cmp	sl, #1
   22198:	blt	221ac <__assert_fail@plt+0x10e8c>
   2219c:	ldr	r2, [r0, r1, lsl #2]
   221a0:	sub	sl, r1, #1
   221a4:	cmp	r2, #0
   221a8:	beq	22190 <__assert_fail@plt+0x10e70>
   221ac:	ldr	r4, [sp, #40]	; 0x28
   221b0:	str	r1, [fp, #-48]	; 0xffffffd0
   221b4:	movw	r0, #8476	; 0x211c
   221b8:	mov	r6, #1
   221bc:	movt	r0, #4
   221c0:	str	r6, [fp, #-36]	; 0xffffffdc
   221c4:	ldr	r1, [r0]
   221c8:	mov	r0, #4
   221cc:	blx	r1
   221d0:	cmp	r5, #1
   221d4:	str	r6, [fp, #-40]	; 0xffffffd8
   221d8:	str	r0, [fp, #-32]	; 0xffffffe0
   221dc:	str	r6, [r0]
   221e0:	blt	222b0 <__assert_fail@plt+0x10f90>
   221e4:	sub	r7, fp, #40	; 0x28
   221e8:	mov	r9, #0
   221ec:	ldr	r0, [sp, #24]
   221f0:	ldr	r1, [sp, #32]
   221f4:	mov	r5, #-2147483648	; 0x80000000
   221f8:	ldr	r0, [r0, #8]
   221fc:	str	r1, [sp, #28]
   22200:	sub	r1, r1, #1
   22204:	str	r1, [sp, #32]
   22208:	ldr	r8, [r0, r1, lsl #2]
   2220c:	mov	r0, r7
   22210:	mov	r1, r7
   22214:	mov	r2, r7
   22218:	bl	1df50 <__assert_fail@plt+0xcc30>
   2221c:	tst	r5, r8
   22220:	beq	22234 <__assert_fail@plt+0x10f14>
   22224:	mov	r0, r7
   22228:	mov	r1, r7
   2222c:	sub	r2, fp, #52	; 0x34
   22230:	bl	1df50 <__assert_fail@plt+0xcc30>
   22234:	ldr	r6, [fp, #-36]	; 0xffffffdc
   22238:	cmp	r6, r4
   2223c:	ble	22294 <__assert_fail@plt+0x10f74>
   22240:	ldr	r0, [sp, #40]	; 0x28
   22244:	ldr	sl, [fp, #-32]	; 0xffffffe0
   22248:	ldr	r3, [sp, #36]	; 0x24
   2224c:	mov	r2, r6
   22250:	str	r0, [sp]
   22254:	add	r0, sp, #44	; 0x2c
   22258:	mov	r1, sl
   2225c:	str	r0, [sp, #4]
   22260:	mov	r0, #0
   22264:	bl	22710 <__assert_fail@plt+0x113f0>
   22268:	ldr	r4, [sp, #40]	; 0x28
   2226c:	sub	r0, sl, #4
   22270:	mov	r1, r4
   22274:	mov	r6, r1
   22278:	cmp	r1, #1
   2227c:	blt	22290 <__assert_fail@plt+0x10f70>
   22280:	ldr	r2, [r0, r6, lsl #2]
   22284:	sub	r1, r6, #1
   22288:	cmp	r2, #0
   2228c:	beq	22274 <__assert_fail@plt+0x10f54>
   22290:	str	r6, [fp, #-36]	; 0xffffffdc
   22294:	lsr	r0, r5, #1
   22298:	cmp	r9, r5, lsr #1
   2229c:	mov	r5, r0
   222a0:	bne	2220c <__assert_fail@plt+0x10eec>
   222a4:	ldr	r0, [sp, #28]
   222a8:	cmp	r0, #2
   222ac:	bge	221ec <__assert_fail@plt+0x10ecc>
   222b0:	cmp	r6, r4
   222b4:	bge	222cc <__assert_fail@plt+0x10fac>
   222b8:	ldr	r5, [sp, #12]
   222bc:	ldr	r0, [sp, #16]
   222c0:	cmp	r0, #0
   222c4:	bne	22330 <__assert_fail@plt+0x11010>
   222c8:	b	22344 <__assert_fail@plt+0x11024>
   222cc:	ldr	r0, [sp, #20]
   222d0:	ldr	r5, [fp, #-32]	; 0xffffffe0
   222d4:	ldr	r3, [sp, #36]	; 0x24
   222d8:	mov	r2, r6
   222dc:	str	r4, [sp]
   222e0:	str	r0, [sp, #44]	; 0x2c
   222e4:	add	r0, sp, #44	; 0x2c
   222e8:	mov	r1, r5
   222ec:	str	r0, [sp, #4]
   222f0:	mov	r0, #0
   222f4:	bl	22710 <__assert_fail@plt+0x113f0>
   222f8:	sub	r3, r5, #4
   222fc:	ldr	r5, [sp, #12]
   22300:	ldr	r0, [sp, #16]
   22304:	mov	r1, r4
   22308:	mov	r6, r1
   2230c:	cmp	r1, #1
   22310:	blt	22324 <__assert_fail@plt+0x11004>
   22314:	ldr	r2, [r3, r6, lsl #2]
   22318:	sub	r1, r6, #1
   2231c:	cmp	r2, #0
   22320:	beq	22308 <__assert_fail@plt+0x10fe8>
   22324:	str	r6, [fp, #-36]	; 0xffffffdc
   22328:	cmp	r0, #0
   2232c:	beq	22344 <__assert_fail@plt+0x11024>
   22330:	movw	r1, #8484	; 0x2124
   22334:	movt	r1, #4
   22338:	ldr	r2, [r1]
   2233c:	lsl	r1, r4, #2
   22340:	blx	r2
   22344:	ldr	r0, [r5, #4]
   22348:	str	r6, [r5, #4]
   2234c:	str	r0, [fp, #-36]	; 0xffffffdc
   22350:	ldr	r1, [r5]
   22354:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22358:	str	r0, [r5]
   2235c:	str	r1, [fp, #-40]	; 0xffffffd8
   22360:	cmp	r1, #0
   22364:	ldr	r0, [r5, #8]
   22368:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2236c:	str	r2, [r5, #8]
   22370:	str	r0, [fp, #-32]	; 0xffffffe0
   22374:	beq	2238c <__assert_fail@plt+0x1106c>
   22378:	movw	r2, #8484	; 0x2124
   2237c:	lsl	r1, r1, #2
   22380:	movt	r2, #4
   22384:	ldr	r2, [r2]
   22388:	blx	r2
   2238c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22390:	cmp	r0, #0
   22394:	beq	223b0 <__assert_fail@plt+0x11090>
   22398:	movw	r1, #8484	; 0x2124
   2239c:	movt	r1, #4
   223a0:	ldr	r2, [r1]
   223a4:	lsl	r1, r0, #2
   223a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   223ac:	blx	r2
   223b0:	sub	sp, fp, #28
   223b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223b8:	movw	r0, #2874	; 0xb3a
   223bc:	movt	r0, #3
   223c0:	bl	22464 <__assert_fail@plt+0x11144>
   223c4:	movw	r0, #2145	; 0x861
   223c8:	movw	r1, #1588	; 0x634
   223cc:	movw	r3, #2232	; 0x8b8
   223d0:	movw	r2, #659	; 0x293
   223d4:	movt	r0, #3
   223d8:	movt	r1, #3
   223dc:	movt	r3, #3
   223e0:	bl	11320 <__assert_fail@plt>
   223e4:	movw	r0, #2306	; 0x902
   223e8:	movw	r1, #1588	; 0x634
   223ec:	movw	r3, #2232	; 0x8b8
   223f0:	movw	r2, #661	; 0x295
   223f4:	movt	r0, #3
   223f8:	movt	r1, #3
   223fc:	movt	r3, #3
   22400:	bl	11320 <__assert_fail@plt>
   22404:	movw	r0, #1666	; 0x682
   22408:	movw	r1, #1588	; 0x634
   2240c:	movw	r3, #1806	; 0x70e
   22410:	mov	r2, #532	; 0x214
   22414:	movt	r0, #3
   22418:	movt	r1, #3
   2241c:	movt	r3, #3
   22420:	bl	11320 <__assert_fail@plt>
   22424:	movw	r0, #2569	; 0xa09
   22428:	movw	r1, #1588	; 0x634
   2242c:	movw	r3, #2897	; 0xb51
   22430:	movw	r2, #3145	; 0xc49
   22434:	movt	r0, #3
   22438:	movt	r1, #3
   2243c:	movt	r3, #3
   22440:	bl	11320 <__assert_fail@plt>
   22444:	movw	r0, #4914	; 0x1332
   22448:	movw	r1, #1588	; 0x634
   2244c:	movw	r3, #1745	; 0x6d1
   22450:	movw	r2, #493	; 0x1ed
   22454:	movt	r0, #3
   22458:	movt	r1, #3
   2245c:	movt	r3, #3
   22460:	bl	11320 <__assert_fail@plt>
   22464:	push	{fp, lr}
   22468:	mov	fp, sp
   2246c:	mov	r3, r0
   22470:	movw	r0, #8568	; 0x2178
   22474:	movw	r2, #6692	; 0x1a24
   22478:	mov	r1, #1
   2247c:	movt	r0, #4
   22480:	movt	r2, #3
   22484:	ldr	r0, [r0]
   22488:	bl	11278 <__fprintf_chk@plt>
   2248c:	bl	11314 <abort@plt>
   22490:	push	{r4, r5, fp, lr}
   22494:	add	fp, sp, #8
   22498:	cmp	r2, #0
   2249c:	ble	22690 <__assert_fail@plt+0x11370>
   224a0:	mov	r5, r0
   224a4:	cmp	r2, #2
   224a8:	beq	22558 <__assert_fail@plt+0x11238>
   224ac:	cmp	r2, #1
   224b0:	bne	225c4 <__assert_fail@plt+0x112a4>
   224b4:	ldr	r0, [r1]
   224b8:	cmp	r0, #0
   224bc:	beq	226b0 <__assert_fail@plt+0x11390>
   224c0:	mov	r2, #0
   224c4:	mov	r1, r0
   224c8:	cmp	r2, r0, lsr #24
   224cc:	bne	224e8 <__assert_fail@plt+0x111c8>
   224d0:	mov	r2, #0
   224d4:	mov	r1, r0
   224d8:	lsl	r1, r1, #8
   224dc:	add	r2, r2, #8
   224e0:	cmp	r1, #16777216	; 0x1000000
   224e4:	bcc	224d8 <__assert_fail@plt+0x111b8>
   224e8:	cmp	r1, #0
   224ec:	blt	22500 <__assert_fail@plt+0x111e0>
   224f0:	lsl	r1, r1, #1
   224f4:	add	r2, r2, #1
   224f8:	cmn	r1, #1
   224fc:	bgt	224f0 <__assert_fail@plt+0x111d0>
   22500:	lsl	r1, r0, r2
   22504:	str	r2, [r5]
   22508:	mvn	r2, r0, lsl r2
   2250c:	movw	ip, #65535	; 0xffff
   22510:	lsr	r4, r1, #16
   22514:	uxth	r3, r1
   22518:	str	r1, [r5, #4]
   2251c:	udiv	r0, r2, r4
   22520:	mls	r2, r0, r4, r2
   22524:	mul	r3, r0, r3
   22528:	orr	r2, ip, r2, lsl #16
   2252c:	cmp	r2, r3
   22530:	bcs	22654 <__assert_fail@plt+0x11334>
   22534:	add	r2, r2, r1
   22538:	sub	lr, r0, #1
   2253c:	cmp	r2, r1
   22540:	bcc	22650 <__assert_fail@plt+0x11330>
   22544:	cmp	r2, r3
   22548:	bcs	22650 <__assert_fail@plt+0x11330>
   2254c:	add	r2, r2, r1
   22550:	sub	r0, r0, #2
   22554:	b	22654 <__assert_fail@plt+0x11334>
   22558:	ldr	r0, [r1, #4]
   2255c:	cmp	r0, #0
   22560:	beq	226d0 <__assert_fail@plt+0x113b0>
   22564:	ldr	r1, [r1]
   22568:	mov	r2, #0
   2256c:	mov	r3, r0
   22570:	cmp	r2, r0, lsr #24
   22574:	bne	22590 <__assert_fail@plt+0x11270>
   22578:	mov	r2, #0
   2257c:	mov	r3, r0
   22580:	lsl	r3, r3, #8
   22584:	add	r2, r2, #8
   22588:	cmp	r3, #16777216	; 0x1000000
   2258c:	bcc	22580 <__assert_fail@plt+0x11260>
   22590:	cmp	r3, #0
   22594:	blt	225a8 <__assert_fail@plt+0x11288>
   22598:	lsl	r3, r3, #1
   2259c:	add	r2, r2, #1
   225a0:	cmn	r3, #1
   225a4:	bgt	22598 <__assert_fail@plt+0x11278>
   225a8:	cmp	r2, #0
   225ac:	str	r2, [r5]
   225b0:	rsbne	r3, r2, #32
   225b4:	lsrne	r3, r1, r3
   225b8:	lslne	r1, r1, r2
   225bc:	orrne	r0, r3, r0, lsl r2
   225c0:	b	2263c <__assert_fail@plt+0x1131c>
   225c4:	add	ip, r1, r2, lsl #2
   225c8:	ldr	r0, [ip, #-4]
   225cc:	cmp	r0, #0
   225d0:	beq	226f0 <__assert_fail@plt+0x113d0>
   225d4:	ldr	r1, [ip, #-8]
   225d8:	mov	r3, #0
   225dc:	mov	r2, r0
   225e0:	cmp	r3, r0, lsr #24
   225e4:	bne	22600 <__assert_fail@plt+0x112e0>
   225e8:	mov	r3, #0
   225ec:	mov	r2, r0
   225f0:	lsl	r2, r2, #8
   225f4:	add	r3, r3, #8
   225f8:	cmp	r2, #16777216	; 0x1000000
   225fc:	bcc	225f0 <__assert_fail@plt+0x112d0>
   22600:	cmp	r2, #0
   22604:	blt	22618 <__assert_fail@plt+0x112f8>
   22608:	lsl	r2, r2, #1
   2260c:	add	r3, r3, #1
   22610:	cmn	r2, #1
   22614:	bgt	22608 <__assert_fail@plt+0x112e8>
   22618:	cmp	r3, #0
   2261c:	str	r3, [r5]
   22620:	beq	2263c <__assert_fail@plt+0x1131c>
   22624:	rsb	r2, r3, #32
   22628:	lsr	r4, r1, r2
   2262c:	orr	r0, r4, r0, lsl r3
   22630:	ldr	r4, [ip, #-12]
   22634:	lsr	r2, r4, r2
   22638:	orr	r1, r2, r1, lsl r3
   2263c:	str	r0, [r5, #4]
   22640:	str	r1, [r5, #8]
   22644:	bl	1b488 <__assert_fail@plt+0xa168>
   22648:	str	r0, [r5, #12]
   2264c:	pop	{r4, r5, fp, pc}
   22650:	mov	r0, lr
   22654:	sub	r2, r2, r3
   22658:	mov	r4, #1
   2265c:	lsr	r3, r2, #16
   22660:	mla	r3, r3, r0, r2
   22664:	orr	r2, ip, r2, lsl #16
   22668:	add	r4, r4, r3, lsr #16
   2266c:	mls	r2, r4, r1, r2
   22670:	cmp	r2, r3, lsl #16
   22674:	lsrcs	r4, r3, #16
   22678:	addcs	r2, r2, r1
   2267c:	add	r0, r4, r0, lsl #16
   22680:	cmp	r2, r1
   22684:	addcs	r0, r0, #1
   22688:	str	r0, [r5, #12]
   2268c:	pop	{r4, r5, fp, pc}
   22690:	movw	r0, #4913	; 0x1331
   22694:	movw	r1, #1588	; 0x634
   22698:	movw	r3, #5202	; 0x1452
   2269c:	mov	r2, #932	; 0x3a4
   226a0:	movt	r0, #3
   226a4:	movt	r1, #3
   226a8:	movt	r3, #3
   226ac:	bl	11320 <__assert_fail@plt>
   226b0:	movw	r0, #6332	; 0x18bc
   226b4:	movw	r1, #1588	; 0x634
   226b8:	movw	r3, #6338	; 0x18c2
   226bc:	movw	r2, #902	; 0x386
   226c0:	movt	r0, #3
   226c4:	movt	r1, #3
   226c8:	movt	r3, #3
   226cc:	bl	11320 <__assert_fail@plt>
   226d0:	movw	r0, #5273	; 0x1499
   226d4:	movw	r1, #1588	; 0x634
   226d8:	movw	r3, #5280	; 0x14a0
   226dc:	movw	r2, #915	; 0x393
   226e0:	movt	r0, #3
   226e4:	movt	r1, #3
   226e8:	movt	r3, #3
   226ec:	bl	11320 <__assert_fail@plt>
   226f0:	movw	r0, #5273	; 0x1499
   226f4:	movw	r1, #1588	; 0x634
   226f8:	movw	r3, #5202	; 0x1452
   226fc:	movw	r2, #945	; 0x3b1
   22700:	movt	r0, #3
   22704:	movt	r1, #3
   22708:	movt	r3, #3
   2270c:	bl	11320 <__assert_fail@plt>
   22710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22714:	add	fp, sp, #28
   22718:	sub	sp, sp, #52	; 0x34
   2271c:	ldr	r9, [fp, #8]
   22720:	cmp	r9, #0
   22724:	ble	22ae0 <__assert_fail@plt+0x117c0>
   22728:	cmp	r2, r9
   2272c:	blt	22b00 <__assert_fail@plt+0x117e0>
   22730:	ldr	ip, [fp, #12]
   22734:	mov	r4, r1
   22738:	mov	r6, r0
   2273c:	cmp	r9, #2
   22740:	beq	22768 <__assert_fail@plt+0x11448>
   22744:	cmp	r9, #1
   22748:	bne	227f0 <__assert_fail@plt+0x114d0>
   2274c:	mov	r0, r6
   22750:	mov	r1, r4
   22754:	mov	r3, ip
   22758:	bl	265d8 <__assert_fail@plt+0x152b8>
   2275c:	str	r0, [r4]
   22760:	sub	sp, fp, #28
   22764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22768:	cmp	r2, #1
   2276c:	ble	22b40 <__assert_fail@plt+0x11820>
   22770:	ldm	ip, {r0, r1}
   22774:	ldr	r9, [ip, #8]
   22778:	ldr	r8, [ip, #12]
   2277c:	cmp	r0, #0
   22780:	str	r1, [fp, #-36]	; 0xffffffdc
   22784:	str	r0, [sp, #16]
   22788:	beq	22900 <__assert_fail@plt+0x115e0>
   2278c:	cmp	r0, #32
   22790:	str	r9, [fp, #-32]	; 0xffffffe0
   22794:	bcs	22b20 <__assert_fail@plt+0x11800>
   22798:	add	r1, r4, r2, lsl #2
   2279c:	sub	lr, r2, #1
   227a0:	rsb	r3, r0, #32
   227a4:	mov	r7, r2
   227a8:	ldr	r9, [r1, #-4]
   227ac:	mov	r1, r4
   227b0:	sub	r4, r4, #8
   227b4:	mov	sl, r1
   227b8:	sub	r1, r1, #4
   227bc:	lsl	r5, r9, r0
   227c0:	ldr	ip, [r4, r7, lsl #2]
   227c4:	orr	r5, r5, ip, lsr r3
   227c8:	str	r5, [r1, r7, lsl #2]
   227cc:	sub	r7, r7, #1
   227d0:	lsl	r5, ip, r0
   227d4:	cmp	r7, #1
   227d8:	bne	227c0 <__assert_fail@plt+0x114a0>
   227dc:	lsr	r1, r9, r3
   227e0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   227e4:	mov	r4, sl
   227e8:	str	r5, [sl]
   227ec:	b	22908 <__assert_fail@plt+0x115e8>
   227f0:	sub	r8, r9, #1
   227f4:	ldr	r1, [ip, #4]
   227f8:	ldr	r0, [r3, r8, lsl #2]
   227fc:	cmp	r1, r0
   22800:	bne	22b60 <__assert_fail@plt+0x11840>
   22804:	add	r0, r3, r9, lsl #2
   22808:	ldr	r7, [ip, #8]
   2280c:	ldr	r0, [r0, #-8]
   22810:	cmp	r7, r0
   22814:	bne	22b80 <__assert_fail@plt+0x11860>
   22818:	cmp	r1, #0
   2281c:	bge	22ba0 <__assert_fail@plt+0x11880>
   22820:	ldr	sl, [ip]
   22824:	mov	lr, r6
   22828:	cmp	sl, #0
   2282c:	beq	22abc <__assert_fail@plt+0x1179c>
   22830:	cmp	r2, #0
   22834:	ble	22bc0 <__assert_fail@plt+0x118a0>
   22838:	cmp	sl, #32
   2283c:	bcs	22b20 <__assert_fail@plt+0x11800>
   22840:	add	r6, r4, r2, lsl #2
   22844:	rsb	r7, sl, #32
   22848:	cmp	r2, #1
   2284c:	str	r4, [sp, #40]	; 0x28
   22850:	ldr	r0, [r6, #-4]!
   22854:	lsl	r1, r0, sl
   22858:	lsr	r0, r0, r7
   2285c:	str	r0, [fp, #-32]	; 0xffffffe0
   22860:	beq	2288c <__assert_fail@plt+0x1156c>
   22864:	rsb	r4, r2, #2
   22868:	mov	r5, r6
   2286c:	ldr	r0, [r5, #-4]!
   22870:	add	r4, r4, #1
   22874:	cmp	r4, #1
   22878:	orr	r1, r1, r0, lsr r7
   2287c:	str	r1, [r6]
   22880:	lsl	r1, r0, sl
   22884:	mov	r6, r5
   22888:	bne	2286c <__assert_fail@plt+0x1154c>
   2288c:	ldr	r4, [sp, #40]	; 0x28
   22890:	str	r1, [r4]
   22894:	mov	r1, r4
   22898:	ldr	r0, [ip, #12]
   2289c:	stm	sp, {r3, r9}
   228a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   228a4:	str	r0, [sp, #8]
   228a8:	mov	r0, lr
   228ac:	bl	27734 <__assert_fail@plt+0x16414>
   228b0:	ldr	r0, [r4]
   228b4:	cmp	r8, #0
   228b8:	lsr	r1, r0, sl
   228bc:	lsl	r0, r0, r7
   228c0:	beq	228ec <__assert_fail@plt+0x115cc>
   228c4:	add	r2, r4, #4
   228c8:	rsb	r3, r9, #1
   228cc:	ldr	r6, [r2]
   228d0:	adds	r3, r3, #1
   228d4:	orr	r1, r1, r6, lsl r7
   228d8:	str	r1, [r2, #-4]
   228dc:	lsr	r1, r6, sl
   228e0:	add	r2, r2, #4
   228e4:	bne	228cc <__assert_fail@plt+0x115ac>
   228e8:	add	r4, r4, r8, lsl #2
   228ec:	cmp	r0, #0
   228f0:	str	r1, [r4]
   228f4:	bne	22be0 <__assert_fail@plt+0x118c0>
   228f8:	sub	sp, fp, #28
   228fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22900:	sub	lr, r2, #1
   22904:	mov	r1, #0
   22908:	lsr	r0, r9, #16
   2290c:	ldr	r5, [r4, lr, lsl #2]
   22910:	str	r4, [sp, #40]	; 0x28
   22914:	str	r6, [sp, #36]	; 0x24
   22918:	str	r0, [sp, #32]
   2291c:	uxth	r0, r9
   22920:	ldr	lr, [sp, #32]
   22924:	str	r0, [sp, #28]
   22928:	lsr	r0, r8, #16
   2292c:	str	r0, [sp, #24]
   22930:	uxth	r0, r8
   22934:	sub	r8, r2, #2
   22938:	str	r0, [sp, #20]
   2293c:	ldr	r2, [sp, #24]
   22940:	ldr	r0, [sp, #20]
   22944:	uxth	r4, r1
   22948:	lsr	r7, r1, #16
   2294c:	mov	ip, r9
   22950:	mul	r6, r4, r2
   22954:	mul	r4, r4, r0
   22958:	mla	r6, r7, r0, r6
   2295c:	mul	r0, r7, r0
   22960:	mul	r7, r7, r2
   22964:	ldr	r2, [sp, #28]
   22968:	add	r6, r6, r4, lsr #16
   2296c:	cmp	r6, r0
   22970:	add	r0, r1, r6, lsr #16
   22974:	pkhbt	r1, r4, r6, lsl #16
   22978:	addcc	r7, r7, #65536	; 0x10000
   2297c:	adds	r1, r1, r5
   22980:	adc	r4, r0, r7
   22984:	str	r1, [fp, #-32]	; 0xffffffe0
   22988:	add	r0, r0, r7
   2298c:	lsr	r1, r4, #16
   22990:	uxth	r9, r4
   22994:	sbc	r0, r0, #0
   22998:	mul	r6, r1, r2
   2299c:	mul	sl, r9, r2
   229a0:	mul	r3, r9, lr
   229a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   229a8:	mul	r1, r1, lr
   229ac:	mla	r6, r9, lr, r6
   229b0:	mov	r9, ip
   229b4:	add	r6, r6, sl, lsr #16
   229b8:	cmp	r6, r3
   229bc:	ldr	r3, [sp, #40]	; 0x28
   229c0:	addcc	r1, r1, #65536	; 0x10000
   229c4:	sub	r5, r5, r2
   229c8:	ldr	r3, [r3, r8, lsl #2]
   229cc:	cmp	r3, ip
   229d0:	sub	r3, r3, ip
   229d4:	subcc	r5, r5, #1
   229d8:	mls	r5, r4, r2, r5
   229dc:	sub	r5, r5, r6, lsr #16
   229e0:	sub	r7, r5, r1
   229e4:	pkhbt	r1, sl, r6, lsl #16
   229e8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   229ec:	mov	r5, #0
   229f0:	cmp	r3, r1
   229f4:	sub	r1, r3, r1
   229f8:	subcc	r7, r7, #1
   229fc:	cmp	r7, r6
   22a00:	mvncs	r5, #0
   22a04:	and	ip, r2, r5
   22a08:	and	r5, r9, r5
   22a0c:	adds	r5, r5, r1
   22a10:	adc	r1, ip, r7
   22a14:	cmp	r7, r6
   22a18:	movcc	r0, r4
   22a1c:	cmp	r1, r2
   22a20:	add	r4, r0, #1
   22a24:	bcs	22a30 <__assert_fail@plt+0x11710>
   22a28:	ldr	r6, [sp, #36]	; 0x24
   22a2c:	b	22a68 <__assert_fail@plt+0x11748>
   22a30:	ldr	r6, [sp, #36]	; 0x24
   22a34:	cmp	r5, r9
   22a38:	bcs	22a48 <__assert_fail@plt+0x11728>
   22a3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22a40:	cmp	r1, r0
   22a44:	bls	22a68 <__assert_fail@plt+0x11748>
   22a48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   22a4c:	cmp	r5, r9
   22a50:	mov	r0, #0
   22a54:	sub	r5, r5, r9
   22a58:	add	r4, r4, #1
   22a5c:	mvncc	r0, #0
   22a60:	sub	r0, r0, r3
   22a64:	add	r1, r0, r1
   22a68:	cmp	r6, #0
   22a6c:	sub	r0, r8, #1
   22a70:	strne	r4, [r6, r8, lsl #2]
   22a74:	cmp	r8, #0
   22a78:	mov	r8, r0
   22a7c:	bgt	2293c <__assert_fail@plt+0x1161c>
   22a80:	ldr	r3, [sp, #16]
   22a84:	cmp	r3, #0
   22a88:	beq	22aa8 <__assert_fail@plt+0x11788>
   22a8c:	rsb	r0, r3, #32
   22a90:	mvn	r2, #0
   22a94:	tst	r5, r2, lsr r0
   22a98:	bne	22c00 <__assert_fail@plt+0x118e0>
   22a9c:	lsl	r0, r1, r0
   22aa0:	lsr	r1, r1, r3
   22aa4:	orr	r5, r0, r5, lsr r3
   22aa8:	ldr	r0, [sp, #40]	; 0x28
   22aac:	str	r5, [r0]
   22ab0:	str	r1, [r0, #4]
   22ab4:	sub	sp, fp, #28
   22ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22abc:	ldr	r0, [ip, #12]
   22ac0:	stm	sp, {r3, r9}
   22ac4:	mov	r1, r4
   22ac8:	mov	r3, #0
   22acc:	str	r0, [sp, #8]
   22ad0:	mov	r0, lr
   22ad4:	bl	27734 <__assert_fail@plt+0x16414>
   22ad8:	sub	sp, fp, #28
   22adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ae0:	movw	r0, #4913	; 0x1331
   22ae4:	movw	r1, #1588	; 0x634
   22ae8:	movw	r3, #5353	; 0x14e9
   22aec:	movw	r2, #1113	; 0x459
   22af0:	movt	r0, #3
   22af4:	movt	r1, #3
   22af8:	movt	r3, #3
   22afc:	bl	11320 <__assert_fail@plt>
   22b00:	movw	r0, #4985	; 0x1379
   22b04:	movw	r1, #1588	; 0x634
   22b08:	movw	r3, #5353	; 0x14e9
   22b0c:	movw	r2, #1114	; 0x45a
   22b10:	movt	r0, #3
   22b14:	movt	r1, #3
   22b18:	movt	r3, #3
   22b1c:	bl	11320 <__assert_fail@plt>
   22b20:	movw	r0, #2306	; 0x902
   22b24:	movw	r1, #1588	; 0x634
   22b28:	movw	r3, #2232	; 0x8b8
   22b2c:	movw	r2, #661	; 0x295
   22b30:	movt	r0, #3
   22b34:	movt	r1, #3
   22b38:	movt	r3, #3
   22b3c:	bl	11320 <__assert_fail@plt>
   22b40:	movw	r0, #5531	; 0x159b
   22b44:	movw	r1, #1588	; 0x634
   22b48:	movw	r3, #5539	; 0x15a3
   22b4c:	movw	r2, #1009	; 0x3f1
   22b50:	movt	r0, #3
   22b54:	movt	r1, #3
   22b58:	movt	r3, #3
   22b5c:	bl	11320 <__assert_fail@plt>
   22b60:	movw	r0, #5457	; 0x1551
   22b64:	movw	r1, #1588	; 0x634
   22b68:	movw	r3, #5353	; 0x14e9
   22b6c:	movw	r2, #1125	; 0x465
   22b70:	movt	r0, #3
   22b74:	movt	r1, #3
   22b78:	movt	r3, #3
   22b7c:	bl	11320 <__assert_fail@plt>
   22b80:	movw	r0, #5477	; 0x1565
   22b84:	movw	r1, #1588	; 0x634
   22b88:	movw	r3, #5353	; 0x14e9
   22b8c:	movw	r2, #1126	; 0x466
   22b90:	movt	r0, #3
   22b94:	movt	r1, #3
   22b98:	movt	r3, #3
   22b9c:	bl	11320 <__assert_fail@plt>
   22ba0:	movw	r0, #5497	; 0x1579
   22ba4:	movw	r1, #1588	; 0x634
   22ba8:	movw	r3, #5353	; 0x14e9
   22bac:	movw	r2, #1127	; 0x467
   22bb0:	movt	r0, #3
   22bb4:	movt	r1, #3
   22bb8:	movt	r3, #3
   22bbc:	bl	11320 <__assert_fail@plt>
   22bc0:	movw	r0, #2145	; 0x861
   22bc4:	movw	r1, #1588	; 0x634
   22bc8:	movw	r3, #2232	; 0x8b8
   22bcc:	movw	r2, #659	; 0x293
   22bd0:	movt	r0, #3
   22bd4:	movt	r1, #3
   22bd8:	movt	r3, #3
   22bdc:	bl	11320 <__assert_fail@plt>
   22be0:	movw	r0, #2569	; 0xa09
   22be4:	movw	r1, #1588	; 0x634
   22be8:	movw	r3, #5353	; 0x14e9
   22bec:	movw	r2, #1138	; 0x472
   22bf0:	movt	r0, #3
   22bf4:	movt	r1, #3
   22bf8:	movt	r3, #3
   22bfc:	bl	11320 <__assert_fail@plt>
   22c00:	movw	r0, #5623	; 0x15f7
   22c04:	movw	r1, #1588	; 0x634
   22c08:	movw	r3, #5539	; 0x15a3
   22c0c:	movw	r2, #1036	; 0x40c
   22c10:	movt	r0, #3
   22c14:	movt	r1, #3
   22c18:	movt	r3, #3
   22c1c:	bl	11320 <__assert_fail@plt>
   22c20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22c24:	add	fp, sp, #24
   22c28:	sub	sp, sp, #16
   22c2c:	mov	r5, r1
   22c30:	movw	r1, #1584	; 0x630
   22c34:	mov	r6, r0
   22c38:	mov	r0, #0
   22c3c:	mov	r8, r3
   22c40:	cmp	r2, #0
   22c44:	movt	r1, #3
   22c48:	str	r0, [sp, #8]
   22c4c:	str	r0, [sp, #4]
   22c50:	str	r1, [sp, #12]
   22c54:	beq	22cbc <__assert_fail@plt+0x1199c>
   22c58:	movw	r0, #8476	; 0x211c
   22c5c:	mov	r9, #1
   22c60:	mov	r7, r2
   22c64:	movt	r0, #4
   22c68:	str	r9, [sp, #8]
   22c6c:	ldr	r1, [r0]
   22c70:	mov	r0, #4
   22c74:	blx	r1
   22c78:	str	r9, [sp, #4]
   22c7c:	str	r0, [sp, #12]
   22c80:	mov	r4, r0
   22c84:	str	r7, [r0]
   22c88:	add	r2, sp, #4
   22c8c:	mov	r0, r6
   22c90:	mov	r1, r5
   22c94:	mov	r3, r8
   22c98:	bl	21cf8 <__assert_fail@plt+0x109d8>
   22c9c:	movw	r0, #8484	; 0x2124
   22ca0:	mov	r1, #4
   22ca4:	movt	r0, #4
   22ca8:	ldr	r2, [r0]
   22cac:	mov	r0, r4
   22cb0:	blx	r2
   22cb4:	sub	sp, fp, #24
   22cb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22cbc:	str	r0, [sp, #8]
   22cc0:	add	r2, sp, #4
   22cc4:	mov	r0, r6
   22cc8:	mov	r1, r5
   22ccc:	mov	r3, r8
   22cd0:	bl	21cf8 <__assert_fail@plt+0x109d8>
   22cd4:	sub	sp, fp, #24
   22cd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ce0:	add	fp, sp, #28
   22ce4:	sub	sp, sp, #84	; 0x54
   22ce8:	ldr	r5, [r2, #4]
   22cec:	mov	r6, r0
   22cf0:	mvn	r0, r3
   22cf4:	tst	r0, r5, lsr #31
   22cf8:	bne	23428 <__assert_fail@plt+0x12108>
   22cfc:	mov	r7, r3
   22d00:	cmp	r3, #0
   22d04:	beq	23434 <__assert_fail@plt+0x12114>
   22d08:	cmp	r5, #0
   22d0c:	mov	r4, r5
   22d10:	mov	sl, r2
   22d14:	mov	r8, r1
   22d18:	rsbmi	r4, r5, #0
   22d1c:	cmp	r4, #1
   22d20:	bgt	22d7c <__assert_fail@plt+0x11a5c>
   22d24:	cmp	r5, #0
   22d28:	beq	22d3c <__assert_fail@plt+0x11a1c>
   22d2c:	ldr	r0, [sl, #8]
   22d30:	ldr	r0, [r0]
   22d34:	cmp	r0, #1
   22d38:	bhi	22d7c <__assert_fail@plt+0x11a5c>
   22d3c:	cmp	r6, #0
   22d40:	cmpne	r6, sl
   22d44:	beq	2340c <__assert_fail@plt+0x120ec>
   22d48:	ldr	r1, [r6]
   22d4c:	cmp	r4, r1
   22d50:	ble	2334c <__assert_fail@plt+0x1202c>
   22d54:	cmp	r1, #0
   22d58:	beq	2335c <__assert_fail@plt+0x1203c>
   22d5c:	movw	r0, #8480	; 0x2120
   22d60:	lsl	r1, r1, #2
   22d64:	mov	r2, #4
   22d68:	movt	r0, #4
   22d6c:	ldr	r3, [r0]
   22d70:	ldr	r0, [r6, #8]
   22d74:	blx	r3
   22d78:	b	23370 <__assert_fail@plt+0x12050>
   22d7c:	movw	r1, #1584	; 0x630
   22d80:	mov	r0, #0
   22d84:	cmp	r4, #0
   22d88:	movt	r1, #3
   22d8c:	str	r0, [sp, #52]	; 0x34
   22d90:	str	r0, [sp, #48]	; 0x30
   22d94:	str	r0, [fp, #-52]	; 0xffffffcc
   22d98:	str	r0, [fp, #-48]	; 0xffffffd0
   22d9c:	str	r1, [sp, #56]	; 0x38
   22da0:	str	r1, [fp, #-44]	; 0xffffffd4
   22da4:	beq	22e00 <__assert_fail@plt+0x11ae0>
   22da8:	ldr	r0, [sl, #8]
   22dac:	sub	r2, r4, #1
   22db0:	ldr	r0, [r0, r2, lsl #2]
   22db4:	cmp	r0, #0
   22db8:	beq	23440 <__assert_fail@plt+0x12120>
   22dbc:	mov	r1, #0
   22dc0:	cmp	r1, r0, lsr #24
   22dc4:	bne	22ddc <__assert_fail@plt+0x11abc>
   22dc8:	mov	r1, #0
   22dcc:	lsl	r0, r0, #8
   22dd0:	add	r1, r1, #8
   22dd4:	cmp	r0, #16777216	; 0x1000000
   22dd8:	bcc	22dcc <__assert_fail@plt+0x11aac>
   22ddc:	lsl	r2, r2, #5
   22de0:	cmp	r0, #0
   22de4:	blt	22df8 <__assert_fail@plt+0x11ad8>
   22de8:	lsl	r0, r0, #1
   22dec:	add	r1, r1, #1
   22df0:	cmn	r0, #1
   22df4:	bgt	22de8 <__assert_fail@plt+0x11ac8>
   22df8:	orr	r0, r2, #31
   22dfc:	sub	r0, r0, r1
   22e00:	udiv	r0, r0, r7
   22e04:	add	r1, r0, #1
   22e08:	sub	r0, fp, #52	; 0x34
   22e0c:	bl	252ac <__assert_fail@plt+0x13f8c>
   22e10:	cmp	r7, #2
   22e14:	str	r7, [sp, #32]
   22e18:	str	r6, [sp, #12]
   22e1c:	str	r8, [sp, #8]
   22e20:	bne	22f2c <__assert_fail@plt+0x11c0c>
   22e24:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22e28:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22e2c:	movw	r2, #1584	; 0x630
   22e30:	mov	r3, #0
   22e34:	mov	r8, #2
   22e38:	sub	r4, fp, #52	; 0x34
   22e3c:	add	r9, sp, #48	; 0x30
   22e40:	mov	r7, #0
   22e44:	movt	r2, #3
   22e48:	str	r7, [fp, #-48]	; 0xffffffd0
   22e4c:	str	r1, [sp, #52]	; 0x34
   22e50:	mov	r6, r1
   22e54:	mov	r5, r0
   22e58:	str	r0, [sp, #56]	; 0x38
   22e5c:	mov	r0, r4
   22e60:	str	r8, [sp]
   22e64:	ldr	r1, [fp, #-52]	; 0xffffffcc
   22e68:	str	r3, [fp, #-52]	; 0xffffffcc
   22e6c:	str	r2, [fp, #-44]	; 0xffffffd4
   22e70:	mov	r2, sl
   22e74:	mov	r3, r9
   22e78:	str	r1, [sp, #24]
   22e7c:	str	r1, [sp, #48]	; 0x30
   22e80:	mov	r1, #0
   22e84:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   22e88:	mov	r0, r4
   22e8c:	mov	r1, r4
   22e90:	mov	r2, r9
   22e94:	bl	1d388 <__assert_fail@plt+0xc068>
   22e98:	mov	r0, r4
   22e9c:	mov	r1, r4
   22ea0:	mov	r2, #1
   22ea4:	mov	r3, #2
   22ea8:	bl	1ee60 <__assert_fail@plt+0xdb40>
   22eac:	cmp	r6, #0
   22eb0:	str	r6, [sp, #28]
   22eb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22eb8:	mov	r3, r6
   22ebc:	mov	lr, r5
   22ec0:	ldrmi	r0, [sp, #28]
   22ec4:	mov	r2, r1
   22ec8:	rsbmi	r3, r0, #0
   22ecc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22ed0:	cmp	r1, #0
   22ed4:	rsbmi	r2, r1, #0
   22ed8:	cmp	r2, r3
   22edc:	bne	22f18 <__assert_fail@plt+0x11bf8>
   22ee0:	sub	r3, r0, #4
   22ee4:	sub	r7, lr, #4
   22ee8:	subs	r6, r2, #1
   22eec:	blt	231d8 <__assert_fail@plt+0x11eb8>
   22ef0:	ldr	r5, [r7, r2, lsl #2]
   22ef4:	ldr	r2, [r3, r2, lsl #2]
   22ef8:	cmp	r2, r5
   22efc:	mov	r2, r6
   22f00:	beq	22ee8 <__assert_fail@plt+0x11bc8>
   22f04:	ldr	r3, [sp, #24]
   22f08:	ldr	r7, [sp, #28]
   22f0c:	mov	r2, lr
   22f10:	bls	22e48 <__assert_fail@plt+0x11b28>
   22f14:	b	231d8 <__assert_fail@plt+0x11eb8>
   22f18:	ldr	r3, [sp, #24]
   22f1c:	ldr	r7, [sp, #28]
   22f20:	mov	r2, lr
   22f24:	blt	22e48 <__assert_fail@plt+0x11b28>
   22f28:	b	231d8 <__assert_fail@plt+0x11eb8>
   22f2c:	movw	r0, #1584	; 0x630
   22f30:	mov	r4, #0
   22f34:	cmn	r5, #1
   22f38:	movw	r2, #1584	; 0x630
   22f3c:	sub	r9, r7, #1
   22f40:	sub	r5, fp, #40	; 0x28
   22f44:	add	r8, sp, #48	; 0x30
   22f48:	mov	r3, #0
   22f4c:	mov	r7, #0
   22f50:	str	sl, [sp, #16]
   22f54:	movt	r0, #3
   22f58:	str	r4, [sp, #40]	; 0x28
   22f5c:	str	r4, [sp, #36]	; 0x24
   22f60:	movt	r2, #3
   22f64:	str	r0, [sp, #44]	; 0x2c
   22f68:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22f6c:	rsble	r0, r0, #0
   22f70:	strle	r0, [fp, #-48]	; 0xffffffd0
   22f74:	ldr	ip, [fp, #-44]	; 0xffffffd4
   22f78:	str	r7, [fp, #-48]	; 0xffffffd0
   22f7c:	str	r0, [sp, #52]	; 0x34
   22f80:	str	r0, [sp, #28]
   22f84:	str	ip, [sp, #56]	; 0x38
   22f88:	mov	r6, #1
   22f8c:	str	ip, [sp, #20]
   22f90:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22f94:	str	r3, [fp, #-52]	; 0xffffffcc
   22f98:	str	r2, [fp, #-44]	; 0xffffffd4
   22f9c:	str	r6, [fp, #-36]	; 0xffffffdc
   22fa0:	str	r0, [sp, #24]
   22fa4:	str	r0, [sp, #48]	; 0x30
   22fa8:	movw	r0, #8476	; 0x211c
   22fac:	movt	r0, #4
   22fb0:	ldr	r1, [r0]
   22fb4:	mov	r0, #4
   22fb8:	blx	r1
   22fbc:	str	r6, [fp, #-40]	; 0xffffffd8
   22fc0:	str	r0, [fp, #-32]	; 0xffffffe0
   22fc4:	str	r6, [r0]
   22fc8:	mov	r6, #-2147483648	; 0x80000000
   22fcc:	mov	r0, r5
   22fd0:	mov	r1, r5
   22fd4:	mov	r2, r5
   22fd8:	bl	1df50 <__assert_fail@plt+0xcc30>
   22fdc:	tst	r6, r9
   22fe0:	beq	22ff4 <__assert_fail@plt+0x11cd4>
   22fe4:	mov	r0, r5
   22fe8:	mov	r1, r5
   22fec:	mov	r2, r8
   22ff0:	bl	1df50 <__assert_fail@plt+0xcc30>
   22ff4:	lsr	r0, r6, #1
   22ff8:	cmp	r4, r6, lsr #1
   22ffc:	mov	r6, r0
   23000:	bne	22fcc <__assert_fail@plt+0x11cac>
   23004:	ldr	r1, [fp, #-52]	; 0xffffffcc
   23008:	sub	r7, fp, #44	; 0x2c
   2300c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   23010:	ldm	r7, {r0, r3, r7}
   23014:	ldr	r6, [fp, #-32]	; 0xffffffe0
   23018:	cmp	r1, #0
   2301c:	str	r2, [fp, #-36]	; 0xffffffdc
   23020:	str	r1, [fp, #-40]	; 0xffffffd8
   23024:	str	r7, [fp, #-48]	; 0xffffffd0
   23028:	str	r3, [fp, #-52]	; 0xffffffcc
   2302c:	str	r6, [fp, #-44]	; 0xffffffd4
   23030:	str	r0, [fp, #-32]	; 0xffffffe0
   23034:	beq	2304c <__assert_fail@plt+0x11d2c>
   23038:	movw	r2, #8484	; 0x2124
   2303c:	lsl	r1, r1, #2
   23040:	movt	r2, #4
   23044:	ldr	r2, [r2]
   23048:	blx	r2
   2304c:	mov	r0, #2
   23050:	mov	r1, #0
   23054:	mov	r2, sl
   23058:	str	r0, [sp]
   2305c:	sub	r0, fp, #52	; 0x34
   23060:	mov	r3, r0
   23064:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   23068:	ldr	sl, [sp, #32]
   2306c:	movw	r0, #1584	; 0x630
   23070:	cmp	r9, #0
   23074:	str	r4, [fp, #-36]	; 0xffffffdc
   23078:	str	r4, [fp, #-40]	; 0xffffffd8
   2307c:	movt	r0, #3
   23080:	str	r0, [fp, #-32]	; 0xffffffe0
   23084:	beq	230ec <__assert_fail@plt+0x11dcc>
   23088:	movw	r0, #8476	; 0x211c
   2308c:	mov	r7, #1
   23090:	movt	r0, #4
   23094:	str	r7, [fp, #-36]	; 0xffffffdc
   23098:	ldr	r1, [r0]
   2309c:	mov	r0, #4
   230a0:	blx	r1
   230a4:	str	r7, [fp, #-40]	; 0xffffffd8
   230a8:	add	r7, sp, #36	; 0x24
   230ac:	mov	r6, sl
   230b0:	str	r0, [fp, #-32]	; 0xffffffe0
   230b4:	mov	sl, r0
   230b8:	str	r9, [r0]
   230bc:	mov	r1, r8
   230c0:	mov	r2, r5
   230c4:	mov	r0, r7
   230c8:	bl	1df50 <__assert_fail@plt+0xcc30>
   230cc:	movw	r0, #8484	; 0x2124
   230d0:	mov	r1, #4
   230d4:	movt	r0, #4
   230d8:	ldr	r2, [r0]
   230dc:	mov	r0, sl
   230e0:	mov	sl, r6
   230e4:	blx	r2
   230e8:	b	23104 <__assert_fail@plt+0x11de4>
   230ec:	add	r7, sp, #36	; 0x24
   230f0:	mov	r1, r8
   230f4:	mov	r2, r5
   230f8:	str	r4, [fp, #-36]	; 0xffffffdc
   230fc:	mov	r0, r7
   23100:	bl	1df50 <__assert_fail@plt+0xcc30>
   23104:	sub	r6, fp, #52	; 0x34
   23108:	mov	r2, r7
   2310c:	mov	r0, r6
   23110:	mov	r1, r6
   23114:	bl	1d388 <__assert_fail@plt+0xc068>
   23118:	mov	r0, #2
   2311c:	mov	r1, #0
   23120:	mov	r2, r6
   23124:	mov	r3, sl
   23128:	str	r0, [sp]
   2312c:	mov	r0, r6
   23130:	bl	1f810 <__assert_fail@plt+0xe4f0>
   23134:	ldr	r3, [sp, #28]
   23138:	ldr	ip, [fp, #-44]	; 0xffffffd4
   2313c:	ldr	sl, [sp, #16]
   23140:	ldr	lr, [sp, #20]
   23144:	cmp	r3, #0
   23148:	ldrmi	r0, [sp, #28]
   2314c:	rsbmi	r3, r0, #0
   23150:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23154:	cmp	r0, #0
   23158:	mov	r2, r0
   2315c:	rsbmi	r2, r0, #0
   23160:	cmp	r2, r3
   23164:	bne	231a0 <__assert_fail@plt+0x11e80>
   23168:	sub	r3, ip, #4
   2316c:	sub	r7, lr, #4
   23170:	subs	r6, r2, #1
   23174:	blt	231b0 <__assert_fail@plt+0x11e90>
   23178:	ldr	r1, [r7, r2, lsl #2]
   2317c:	ldr	r2, [r3, r2, lsl #2]
   23180:	cmp	r2, r1
   23184:	mov	r2, r6
   23188:	beq	23170 <__assert_fail@plt+0x11e50>
   2318c:	ldr	r3, [sp, #24]
   23190:	ldr	r7, [sp, #28]
   23194:	mov	r2, lr
   23198:	bls	22f78 <__assert_fail@plt+0x11c58>
   2319c:	b	231b0 <__assert_fail@plt+0x11e90>
   231a0:	ldr	r3, [sp, #24]
   231a4:	ldr	r7, [sp, #28]
   231a8:	mov	r2, lr
   231ac:	blt	22f78 <__assert_fail@plt+0x11c58>
   231b0:	ldr	r0, [sp, #36]	; 0x24
   231b4:	cmp	r0, #0
   231b8:	beq	231d8 <__assert_fail@plt+0x11eb8>
   231bc:	movw	r1, #8484	; 0x2124
   231c0:	movt	r1, #4
   231c4:	ldr	r2, [r1]
   231c8:	lsl	r1, r0, #2
   231cc:	ldr	r0, [sp, #44]	; 0x2c
   231d0:	blx	r2
   231d4:	ldr	lr, [sp, #20]
   231d8:	ldr	r9, [sp, #8]
   231dc:	ldr	r8, [sp, #12]
   231e0:	cmp	r9, #0
   231e4:	beq	232bc <__assert_fail@plt+0x11f9c>
   231e8:	movw	r0, #8476	; 0x211c
   231ec:	mov	r4, #1
   231f0:	str	lr, [sp, #20]
   231f4:	movt	r0, #4
   231f8:	str	r4, [fp, #-36]	; 0xffffffdc
   231fc:	ldr	r1, [r0]
   23200:	mov	r0, #4
   23204:	blx	r1
   23208:	str	r4, [fp, #-40]	; 0xffffffd8
   2320c:	str	r0, [fp, #-32]	; 0xffffffe0
   23210:	str	r4, [r0]
   23214:	mov	r6, #-2147483648	; 0x80000000
   23218:	sub	r4, fp, #40	; 0x28
   2321c:	mov	r7, #0
   23220:	add	r5, sp, #48	; 0x30
   23224:	mov	r0, r4
   23228:	mov	r1, r4
   2322c:	mov	r2, r4
   23230:	bl	1df50 <__assert_fail@plt+0xcc30>
   23234:	ldr	r0, [sp, #32]
   23238:	tst	r6, r0
   2323c:	beq	23250 <__assert_fail@plt+0x11f30>
   23240:	mov	r0, r4
   23244:	mov	r1, r4
   23248:	mov	r2, r5
   2324c:	bl	1df50 <__assert_fail@plt+0xcc30>
   23250:	lsr	r0, r6, #1
   23254:	cmp	r7, r6, lsr #1
   23258:	mov	r6, r0
   2325c:	bne	23224 <__assert_fail@plt+0x11f04>
   23260:	ldr	r1, [fp, #-52]	; 0xffffffcc
   23264:	sub	r7, fp, #44	; 0x2c
   23268:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2326c:	ldm	r7, {r0, r3, r7}
   23270:	ldr	r6, [fp, #-32]	; 0xffffffe0
   23274:	cmp	r1, #0
   23278:	str	r2, [fp, #-36]	; 0xffffffdc
   2327c:	str	r1, [fp, #-40]	; 0xffffffd8
   23280:	str	r7, [fp, #-48]	; 0xffffffd0
   23284:	str	r3, [fp, #-52]	; 0xffffffcc
   23288:	str	r6, [fp, #-44]	; 0xffffffd4
   2328c:	str	r0, [fp, #-32]	; 0xffffffe0
   23290:	beq	232a8 <__assert_fail@plt+0x11f88>
   23294:	movw	r2, #8484	; 0x2124
   23298:	lsl	r1, r1, #2
   2329c:	movt	r2, #4
   232a0:	ldr	r2, [r2]
   232a4:	blx	r2
   232a8:	sub	r2, fp, #52	; 0x34
   232ac:	mov	r0, r9
   232b0:	mov	r1, sl
   232b4:	bl	1db64 <__assert_fail@plt+0xc844>
   232b8:	ldr	lr, [sp, #20]
   232bc:	cmp	r8, #0
   232c0:	beq	23338 <__assert_fail@plt+0x12018>
   232c4:	ldr	r0, [r8, #4]
   232c8:	ldr	r1, [sp, #28]
   232cc:	str	r1, [r8, #4]
   232d0:	str	r0, [sp, #52]	; 0x34
   232d4:	ldr	r0, [sp, #24]
   232d8:	ldr	r1, [r8]
   232dc:	str	r0, [r8]
   232e0:	str	r1, [sp, #48]	; 0x30
   232e4:	ldr	r0, [r8, #8]
   232e8:	str	lr, [r8, #8]
   232ec:	str	r0, [sp, #56]	; 0x38
   232f0:	cmp	r1, #0
   232f4:	beq	2330c <__assert_fail@plt+0x11fec>
   232f8:	movw	r2, #8484	; 0x2124
   232fc:	lsl	r1, r1, #2
   23300:	movt	r2, #4
   23304:	ldr	r2, [r2]
   23308:	blx	r2
   2330c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23310:	cmp	r0, #0
   23314:	beq	23330 <__assert_fail@plt+0x12010>
   23318:	movw	r1, #8484	; 0x2124
   2331c:	movt	r1, #4
   23320:	ldr	r2, [r1]
   23324:	lsl	r1, r0, #2
   23328:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2332c:	blx	r2
   23330:	sub	sp, fp, #28
   23334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23338:	ldr	r1, [sp, #24]
   2333c:	mov	r0, lr
   23340:	cmp	r1, #0
   23344:	bne	232f8 <__assert_fail@plt+0x11fd8>
   23348:	b	2330c <__assert_fail@plt+0x11fec>
   2334c:	ldr	r0, [r6, #8]
   23350:	cmp	r4, #1
   23354:	bge	2339c <__assert_fail@plt+0x1207c>
   23358:	b	23404 <__assert_fail@plt+0x120e4>
   2335c:	movw	r0, #8476	; 0x211c
   23360:	movt	r0, #4
   23364:	ldr	r1, [r0]
   23368:	mov	r0, #4
   2336c:	blx	r1
   23370:	mov	r1, #1
   23374:	str	r0, [r6, #8]
   23378:	str	r1, [r6]
   2337c:	ldr	r1, [r6, #4]
   23380:	cmp	r1, #0
   23384:	rsbmi	r1, r1, #0
   23388:	cmp	r1, #2
   2338c:	movge	r1, #0
   23390:	strge	r1, [r6, #4]
   23394:	cmp	r4, #1
   23398:	blt	23404 <__assert_fail@plt+0x120e4>
   2339c:	ldr	r5, [sl, #8]
   233a0:	mov	r2, #0
   233a4:	cmp	r4, #4
   233a8:	bcc	233e8 <__assert_fail@plt+0x120c8>
   233ac:	add	r1, r5, r4, lsl #2
   233b0:	cmp	r0, r1
   233b4:	addcc	r1, r0, r4, lsl #2
   233b8:	cmpcc	r5, r1
   233bc:	bcc	233e8 <__assert_fail@plt+0x120c8>
   233c0:	bic	r2, r4, #-2147483645	; 0x80000003
   233c4:	mov	r7, r0
   233c8:	mov	r1, r5
   233cc:	mov	r3, r2
   233d0:	vld1.32	{d16-d17}, [r1]!
   233d4:	subs	r3, r3, #4
   233d8:	vst1.32	{d16-d17}, [r7]!
   233dc:	bne	233d0 <__assert_fail@plt+0x120b0>
   233e0:	cmp	r4, r2
   233e4:	beq	23404 <__assert_fail@plt+0x120e4>
   233e8:	add	r1, r5, r2, lsl #2
   233ec:	add	r0, r0, r2, lsl #2
   233f0:	sub	r2, r4, r2
   233f4:	ldr	r3, [r1], #4
   233f8:	subs	r2, r2, #1
   233fc:	str	r3, [r0], #4
   23400:	bne	233f4 <__assert_fail@plt+0x120d4>
   23404:	ldr	r0, [sl, #4]
   23408:	str	r0, [r6, #4]
   2340c:	cmp	r8, #0
   23410:	movne	r0, #0
   23414:	strne	r0, [r8, #4]
   23418:	subne	sp, fp, #28
   2341c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23420:	sub	sp, fp, #28
   23424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23428:	movw	r0, #3046	; 0xbe6
   2342c:	movt	r0, #3
   23430:	bl	22464 <__assert_fail@plt+0x11144>
   23434:	movw	r0, #3094	; 0xc16
   23438:	movt	r0, #3
   2343c:	bl	22464 <__assert_fail@plt+0x11144>
   23440:	movw	r0, #6279	; 0x1887
   23444:	movw	r1, #1588	; 0x634
   23448:	movw	r3, #6285	; 0x188d
   2344c:	movw	r2, #1210	; 0x4ba
   23450:	movt	r0, #3
   23454:	movt	r1, #3
   23458:	movt	r3, #3
   2345c:	bl	11320 <__assert_fail@plt>
   23460:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23464:	add	fp, sp, #24
   23468:	sub	sp, sp, #16
   2346c:	cmp	r1, #1
   23470:	ble	23790 <__assert_fail@plt+0x12470>
   23474:	mov	r5, r1
   23478:	cmp	r1, #63	; 0x3f
   2347c:	bge	237b0 <__assert_fail@plt+0x12490>
   23480:	ldr	r4, [r0, #4]
   23484:	cmp	r4, #0
   23488:	rsbmi	r4, r4, #0
   2348c:	cmp	r4, #0
   23490:	beq	23588 <__assert_fail@plt+0x12268>
   23494:	ldr	r9, [r0, #8]
   23498:	sub	r0, r4, #1
   2349c:	ldr	r2, [r9, r0, lsl #2]
   234a0:	cmp	r2, #0
   234a4:	beq	237d0 <__assert_fail@plt+0x124b0>
   234a8:	mov	r1, #0
   234ac:	cmp	r1, r2, lsr #24
   234b0:	bne	234c8 <__assert_fail@plt+0x121a8>
   234b4:	mov	r1, #0
   234b8:	lsl	r2, r2, #8
   234bc:	add	r1, r1, #8
   234c0:	cmp	r2, #16777216	; 0x1000000
   234c4:	bcc	234b8 <__assert_fail@plt+0x12198>
   234c8:	cmp	r2, #0
   234cc:	blt	234e0 <__assert_fail@plt+0x121c0>
   234d0:	lsl	r2, r2, #1
   234d4:	add	r1, r1, #1
   234d8:	cmn	r2, #1
   234dc:	bgt	234d0 <__assert_fail@plt+0x121b0>
   234e0:	sub	r2, r5, #2
   234e4:	cmp	r2, #30
   234e8:	bhi	23590 <__assert_fail@plt+0x12270>
   234ec:	lsl	r0, r0, #5
   234f0:	rsb	r1, r1, #32
   234f4:	add	r6, r1, r0
   234f8:	add	r0, pc, #0
   234fc:	ldr	pc, [r0, r2, lsl #2]
   23500:	andeq	r3, r2, r4, lsl #15
   23504:	muleq	r2, r0, r5
   23508:	andeq	r3, r2, ip, ror r5
   2350c:	muleq	r2, r0, r5
   23510:	muleq	r2, r0, r5
   23514:	muleq	r2, r0, r5
   23518:			; <UNDEFINED> instruction: 0x000236bc
   2351c:	muleq	r2, r0, r5
   23520:	muleq	r2, r0, r5
   23524:	muleq	r2, r0, r5
   23528:	muleq	r2, r0, r5
   2352c:	muleq	r2, r0, r5
   23530:	muleq	r2, r0, r5
   23534:	muleq	r2, r0, r5
   23538:	ldrdeq	r3, [r2], -r4
   2353c:	muleq	r2, r0, r5
   23540:	muleq	r2, r0, r5
   23544:	muleq	r2, r0, r5
   23548:	muleq	r2, r0, r5
   2354c:	muleq	r2, r0, r5
   23550:	muleq	r2, r0, r5
   23554:	muleq	r2, r0, r5
   23558:	muleq	r2, r0, r5
   2355c:	muleq	r2, r0, r5
   23560:	muleq	r2, r0, r5
   23564:	muleq	r2, r0, r5
   23568:	muleq	r2, r0, r5
   2356c:	muleq	r2, r0, r5
   23570:	muleq	r2, r0, r5
   23574:	muleq	r2, r0, r5
   23578:	andeq	r3, r2, r0, ror #13
   2357c:	add	r0, r6, #1
   23580:	lsr	r6, r0, #1
   23584:	b	23784 <__assert_fail@plt+0x12464>
   23588:	mov	r6, #1
   2358c:	b	23784 <__assert_fail@plt+0x12464>
   23590:	movw	r0, #8476	; 0x211c
   23594:	lsl	r8, r4, #2
   23598:	movt	r0, #4
   2359c:	ldr	r1, [r0]
   235a0:	mov	r0, r8
   235a4:	blx	r1
   235a8:	mov	r7, r0
   235ac:	cmp	r4, #1
   235b0:	blt	2361c <__assert_fail@plt+0x122fc>
   235b4:	mov	r0, #0
   235b8:	cmp	r4, #4
   235bc:	bcc	23600 <__assert_fail@plt+0x122e0>
   235c0:	add	r1, r9, r4, lsl #2
   235c4:	cmp	r7, r1
   235c8:	bcs	235d8 <__assert_fail@plt+0x122b8>
   235cc:	add	r1, r7, r4, lsl #2
   235d0:	cmp	r1, r9
   235d4:	bhi	23600 <__assert_fail@plt+0x122e0>
   235d8:	bic	r0, r4, #-2147483645	; 0x80000003
   235dc:	mov	r2, r7
   235e0:	mov	r3, r9
   235e4:	mov	r1, r0
   235e8:	vld1.32	{d16-d17}, [r3]!
   235ec:	subs	r1, r1, #4
   235f0:	vst1.32	{d16-d17}, [r2]!
   235f4:	bne	235e8 <__assert_fail@plt+0x122c8>
   235f8:	cmp	r4, r0
   235fc:	beq	2361c <__assert_fail@plt+0x122fc>
   23600:	add	r1, r9, r0, lsl #2
   23604:	add	r2, r7, r0, lsl #2
   23608:	sub	r0, r4, r0
   2360c:	ldr	r3, [r1], #4
   23610:	subs	r0, r0, #1
   23614:	str	r3, [r2], #4
   23618:	bne	2360c <__assert_fail@plt+0x122ec>
   2361c:	cmp	r5, #0
   23620:	beq	237f0 <__assert_fail@plt+0x124d0>
   23624:	mov	r1, #0
   23628:	mov	r0, r5
   2362c:	cmp	r1, r5, lsr #24
   23630:	bne	2364c <__assert_fail@plt+0x1232c>
   23634:	mov	r1, #0
   23638:	mov	r0, r5
   2363c:	lsl	r0, r0, #8
   23640:	add	r1, r1, #8
   23644:	cmp	r0, #16777216	; 0x1000000
   23648:	bcc	2363c <__assert_fail@plt+0x1231c>
   2364c:	cmp	r0, #0
   23650:	blt	23664 <__assert_fail@plt+0x12344>
   23654:	lsl	r0, r0, #1
   23658:	add	r1, r1, #1
   2365c:	cmn	r0, #1
   23660:	bgt	23654 <__assert_fail@plt+0x12334>
   23664:	lsl	r0, r5, r1
   23668:	mvn	r2, r5, lsl r1
   2366c:	str	r1, [sp]
   23670:	lsr	r6, r0, #16
   23674:	uxth	r3, r0
   23678:	str	r0, [sp, #4]
   2367c:	udiv	r1, r2, r6
   23680:	mls	r6, r1, r6, r2
   23684:	movw	r2, #65535	; 0xffff
   23688:	mul	r3, r1, r3
   2368c:	orr	r6, r2, r6, lsl #16
   23690:	cmp	r6, r3
   23694:	bcs	236fc <__assert_fail@plt+0x123dc>
   23698:	add	r6, r6, r0
   2369c:	sub	r5, r1, #1
   236a0:	cmp	r6, r0
   236a4:	bcc	236f8 <__assert_fail@plt+0x123d8>
   236a8:	cmp	r6, r3
   236ac:	bcs	236f8 <__assert_fail@plt+0x123d8>
   236b0:	add	r6, r6, r0
   236b4:	sub	r1, r1, #2
   236b8:	b	236fc <__assert_fail@plt+0x123dc>
   236bc:	movw	r1, #43691	; 0xaaab
   236c0:	add	r0, r6, #2
   236c4:	movt	r1, #43690	; 0xaaaa
   236c8:	umull	r0, r1, r0, r1
   236cc:	lsr	r6, r1, #1
   236d0:	b	23784 <__assert_fail@plt+0x12464>
   236d4:	add	r0, r6, #3
   236d8:	lsr	r6, r0, #2
   236dc:	b	23784 <__assert_fail@plt+0x12464>
   236e0:	movw	r1, #52429	; 0xcccd
   236e4:	add	r0, r6, #4
   236e8:	movt	r1, #52428	; 0xcccc
   236ec:	umull	r0, r1, r0, r1
   236f0:	lsr	r6, r1, #2
   236f4:	b	23784 <__assert_fail@plt+0x12464>
   236f8:	mov	r1, r5
   236fc:	sub	r3, r6, r3
   23700:	mov	r5, #1
   23704:	lsr	r6, r3, #16
   23708:	orr	r2, r2, r3, lsl #16
   2370c:	mla	r6, r6, r1, r3
   23710:	add	r5, r5, r6, lsr #16
   23714:	mls	r2, r5, r0, r2
   23718:	cmp	r2, r6, lsl #16
   2371c:	lsrcs	r5, r6, #16
   23720:	addcs	r2, r2, r0
   23724:	mov	r6, #0
   23728:	add	r1, r5, r1, lsl #16
   2372c:	cmp	r2, r0
   23730:	mov	r5, sp
   23734:	addcs	r1, r1, #1
   23738:	str	r1, [sp, #12]
   2373c:	mov	r0, r7
   23740:	mov	r1, r7
   23744:	mov	r2, r4
   23748:	mov	r3, r5
   2374c:	bl	265d8 <__assert_fail@plt+0x152b8>
   23750:	sub	r0, r4, #1
   23754:	add	r6, r6, #1
   23758:	ldr	r1, [r7, r0, lsl #2]
   2375c:	cmp	r1, #0
   23760:	moveq	r4, r0
   23764:	cmp	r4, #0
   23768:	bgt	2373c <__assert_fail@plt+0x1241c>
   2376c:	movw	r0, #8484	; 0x2124
   23770:	mov	r1, r8
   23774:	movt	r0, #4
   23778:	ldr	r2, [r0]
   2377c:	mov	r0, r7
   23780:	blx	r2
   23784:	mov	r0, r6
   23788:	sub	sp, fp, #24
   2378c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23790:	movw	r0, #3640	; 0xe38
   23794:	movw	r1, #1588	; 0x634
   23798:	movw	r3, #3650	; 0xe42
   2379c:	movw	r2, #4191	; 0x105f
   237a0:	movt	r0, #3
   237a4:	movt	r1, #3
   237a8:	movt	r3, #3
   237ac:	bl	11320 <__assert_fail@plt>
   237b0:	movw	r0, #3699	; 0xe73
   237b4:	movw	r1, #1588	; 0x634
   237b8:	movw	r3, #3650	; 0xe42
   237bc:	movw	r2, #4192	; 0x1060
   237c0:	movt	r0, #3
   237c4:	movt	r1, #3
   237c8:	movt	r3, #3
   237cc:	bl	11320 <__assert_fail@plt>
   237d0:	movw	r0, #6279	; 0x1887
   237d4:	movw	r1, #1588	; 0x634
   237d8:	movw	r3, #6285	; 0x188d
   237dc:	movw	r2, #1210	; 0x4ba
   237e0:	movt	r0, #3
   237e4:	movt	r1, #3
   237e8:	movt	r3, #3
   237ec:	bl	11320 <__assert_fail@plt>
   237f0:	movw	r0, #6332	; 0x18bc
   237f4:	movw	r1, #1588	; 0x634
   237f8:	movw	r3, #6338	; 0x18c2
   237fc:	movw	r2, #902	; 0x386
   23800:	movt	r0, #3
   23804:	movt	r1, #3
   23808:	movt	r3, #3
   2380c:	bl	11320 <__assert_fail@plt>
   23810:	push	{r4, sl, fp, lr}
   23814:	add	fp, sp, #8
   23818:	sub	sp, sp, #16
   2381c:	mov	r3, r2
   23820:	mov	r2, r1
   23824:	mov	r1, #0
   23828:	str	r1, [sp, #8]
   2382c:	str	r1, [sp, #4]
   23830:	movw	r1, #1584	; 0x630
   23834:	movt	r1, #3
   23838:	str	r1, [sp, #12]
   2383c:	add	r1, sp, #4
   23840:	bl	22cdc <__assert_fail@plt+0x119bc>
   23844:	ldmib	sp, {r0, r1}
   23848:	clz	r1, r1
   2384c:	cmp	r0, #0
   23850:	lsr	r4, r1, #5
   23854:	beq	23870 <__assert_fail@plt+0x12550>
   23858:	movw	r1, #8484	; 0x2124
   2385c:	movt	r1, #4
   23860:	ldr	r2, [r1]
   23864:	lsl	r1, r0, #2
   23868:	ldr	r0, [sp, #12]
   2386c:	blx	r2
   23870:	mov	r0, r4
   23874:	sub	sp, fp, #8
   23878:	pop	{r4, sl, fp, pc}
   2387c:	mov	r3, #2
   23880:	b	22cdc <__assert_fail@plt+0x119bc>
   23884:	mov	r2, r1
   23888:	mov	r1, #0
   2388c:	mov	r3, #2
   23890:	b	22cdc <__assert_fail@plt+0x119bc>
   23894:	push	{r4, sl, fp, lr}
   23898:	add	fp, sp, #8
   2389c:	sub	sp, sp, #16
   238a0:	ldr	r4, [r0, #4]
   238a4:	cmp	r4, #1
   238a8:	blt	238fc <__assert_fail@plt+0x125dc>
   238ac:	mov	r2, r0
   238b0:	mov	r0, #0
   238b4:	add	r1, sp, #4
   238b8:	mov	r3, #2
   238bc:	str	r0, [sp, #8]
   238c0:	str	r0, [sp, #4]
   238c4:	movw	r0, #1584	; 0x630
   238c8:	movt	r0, #3
   238cc:	str	r0, [sp, #12]
   238d0:	mov	r0, #0
   238d4:	bl	22cdc <__assert_fail@plt+0x119bc>
   238d8:	ldmib	sp, {r0, r4}
   238dc:	cmp	r0, #0
   238e0:	beq	238fc <__assert_fail@plt+0x125dc>
   238e4:	movw	r1, #8484	; 0x2124
   238e8:	movt	r1, #4
   238ec:	ldr	r2, [r1]
   238f0:	lsl	r1, r0, #2
   238f4:	ldr	r0, [sp, #12]
   238f8:	blx	r2
   238fc:	clz	r0, r4
   23900:	lsr	r0, r0, #5
   23904:	sub	sp, fp, #8
   23908:	pop	{r4, sl, fp, pc}
   2390c:	push	{r4, sl, fp, lr}
   23910:	add	fp, sp, #8
   23914:	sub	sp, sp, #24
   23918:	cmp	r1, #0
   2391c:	ble	239a0 <__assert_fail@plt+0x12680>
   23920:	add	r2, r0, r1, lsl #2
   23924:	ldr	r2, [r2, #-4]
   23928:	cmp	r2, #0
   2392c:	beq	239c0 <__assert_fail@plt+0x126a0>
   23930:	str	r0, [sp, #8]
   23934:	mov	r0, #0
   23938:	mov	r2, sp
   2393c:	mov	r3, #2
   23940:	stm	sp, {r0, r1}
   23944:	str	r0, [sp, #16]
   23948:	str	r0, [sp, #12]
   2394c:	movw	r0, #1584	; 0x630
   23950:	add	r1, sp, #12
   23954:	movt	r0, #3
   23958:	str	r0, [sp, #20]
   2395c:	mov	r0, #0
   23960:	bl	22cdc <__assert_fail@plt+0x119bc>
   23964:	ldr	r1, [sp, #16]
   23968:	ldr	r0, [sp, #12]
   2396c:	clz	r1, r1
   23970:	cmp	r0, #0
   23974:	lsr	r4, r1, #5
   23978:	beq	23994 <__assert_fail@plt+0x12674>
   2397c:	movw	r1, #8484	; 0x2124
   23980:	movt	r1, #4
   23984:	ldr	r2, [r1]
   23988:	lsl	r1, r0, #2
   2398c:	ldr	r0, [sp, #20]
   23990:	blx	r2
   23994:	mov	r0, r4
   23998:	sub	sp, fp, #8
   2399c:	pop	{r4, sl, fp, pc}
   239a0:	movw	r0, #4914	; 0x1332
   239a4:	movw	r1, #1588	; 0x634
   239a8:	movw	r3, #3120	; 0xc30
   239ac:	movw	r2, #3302	; 0xce6
   239b0:	movt	r0, #3
   239b4:	movt	r1, #3
   239b8:	movt	r3, #3
   239bc:	bl	11320 <__assert_fail@plt>
   239c0:	movw	r0, #3167	; 0xc5f
   239c4:	movw	r1, #1588	; 0x634
   239c8:	movw	r3, #3120	; 0xc30
   239cc:	movw	r2, #3303	; 0xce7
   239d0:	movt	r0, #3
   239d4:	movt	r1, #3
   239d8:	movt	r3, #3
   239dc:	bl	11320 <__assert_fail@plt>
   239e0:	push	{r4, r5, r6, r7, fp, lr}
   239e4:	add	fp, sp, #16
   239e8:	sub	sp, sp, #40	; 0x28
   239ec:	cmp	r3, #0
   239f0:	ble	23c24 <__assert_fail@plt+0x12904>
   239f4:	mov	r5, r0
   239f8:	add	r0, r2, r3, lsl #2
   239fc:	mov	r6, r3
   23a00:	ldr	r0, [r0, #-4]
   23a04:	cmp	r0, #0
   23a08:	beq	23c44 <__assert_fail@plt+0x12924>
   23a0c:	mov	r4, r1
   23a10:	movw	r1, #1584	; 0x630
   23a14:	mov	r0, #0
   23a18:	str	r2, [sp, #12]
   23a1c:	add	r2, sp, #4
   23a20:	mov	r3, #2
   23a24:	movt	r1, #3
   23a28:	str	r0, [sp, #20]
   23a2c:	str	r0, [sp, #16]
   23a30:	str	r0, [sp, #28]
   23a34:	str	r0, [sp, #32]
   23a38:	str	r1, [sp, #24]
   23a3c:	str	r1, [sp, #36]	; 0x24
   23a40:	stmib	sp, {r0, r6}
   23a44:	add	r0, sp, #28
   23a48:	add	r1, sp, #16
   23a4c:	bl	22cdc <__assert_fail@plt+0x119bc>
   23a50:	ldr	r1, [sp, #32]
   23a54:	add	r0, r6, #1
   23a58:	add	r0, r0, r0, lsr #31
   23a5c:	cmp	r1, r0, asr #1
   23a60:	bne	23c64 <__assert_fail@plt+0x12944>
   23a64:	ldr	r0, [sp, #36]	; 0x24
   23a68:	cmp	r1, #1
   23a6c:	blt	23b10 <__assert_fail@plt+0x127f0>
   23a70:	mvn	r2, r1
   23a74:	mvn	r7, #1
   23a78:	mvn	r3, #1
   23a7c:	cmn	r2, #2
   23a80:	movgt	r7, r2
   23a84:	add	r7, r1, r7
   23a88:	add	lr, r7, #2
   23a8c:	cmp	lr, #4
   23a90:	bcc	23af0 <__assert_fail@plt+0x127d0>
   23a94:	cmn	r2, #2
   23a98:	movle	r2, r3
   23a9c:	sub	r2, r3, r2
   23aa0:	add	r3, r0, r1, lsl #2
   23aa4:	add	r7, r5, r2, lsl #2
   23aa8:	cmp	r7, r3
   23aac:	addcc	r3, r5, r1, lsl #2
   23ab0:	addcc	r2, r0, r2, lsl #2
   23ab4:	cmpcc	r2, r3
   23ab8:	bcc	23af0 <__assert_fail@plt+0x127d0>
   23abc:	mvn	r3, #15
   23ac0:	bic	ip, lr, #3
   23ac4:	add	r2, r3, r1, lsl #2
   23ac8:	sub	r1, r1, ip
   23acc:	mov	r7, ip
   23ad0:	add	r6, r0, r2
   23ad4:	add	r2, r5, r2
   23ad8:	vld1.32	{d16-d17}, [r6], r3
   23adc:	subs	r7, r7, #4
   23ae0:	vst1.32	{d16-d17}, [r2], r3
   23ae4:	bne	23ad8 <__assert_fail@plt+0x127b8>
   23ae8:	cmp	lr, ip
   23aec:	beq	23b10 <__assert_fail@plt+0x127f0>
   23af0:	sub	r1, r1, #1
   23af4:	ldr	r2, [r0, r1, lsl #2]
   23af8:	str	r2, [r5, r1, lsl #2]
   23afc:	sub	r2, r1, #1
   23b00:	add	r1, r1, #1
   23b04:	cmp	r1, #1
   23b08:	mov	r1, r2
   23b0c:	bgt	23af4 <__assert_fail@plt+0x127d4>
   23b10:	ldr	r1, [sp, #28]
   23b14:	cmp	r1, #0
   23b18:	beq	23b30 <__assert_fail@plt+0x12810>
   23b1c:	movw	r2, #8484	; 0x2124
   23b20:	lsl	r1, r1, #2
   23b24:	movt	r2, #4
   23b28:	ldr	r2, [r2]
   23b2c:	blx	r2
   23b30:	ldr	r5, [sp, #20]
   23b34:	cmp	r4, #0
   23b38:	beq	23bf4 <__assert_fail@plt+0x128d4>
   23b3c:	cmp	r5, #1
   23b40:	blt	23bf4 <__assert_fail@plt+0x128d4>
   23b44:	mvn	r1, r5
   23b48:	mvn	r2, #1
   23b4c:	ldr	r0, [sp, #24]
   23b50:	mvn	r3, #1
   23b54:	cmn	r1, #2
   23b58:	movgt	r2, r1
   23b5c:	add	r2, r5, r2
   23b60:	add	lr, r2, #2
   23b64:	mov	r2, r5
   23b68:	cmp	lr, #4
   23b6c:	bcc	23bd4 <__assert_fail@plt+0x128b4>
   23b70:	cmn	r1, #2
   23b74:	add	r2, r0, r5, lsl #2
   23b78:	movle	r1, r3
   23b7c:	sub	r1, r3, r1
   23b80:	add	r3, r4, r1, lsl #2
   23b84:	cmp	r3, r2
   23b88:	bcs	23ba0 <__assert_fail@plt+0x12880>
   23b8c:	add	r2, r4, r5, lsl #2
   23b90:	add	r1, r0, r1, lsl #2
   23b94:	cmp	r1, r2
   23b98:	mov	r2, r5
   23b9c:	bcc	23bd4 <__assert_fail@plt+0x128b4>
   23ba0:	mvn	r3, #15
   23ba4:	bic	ip, lr, #3
   23ba8:	add	r1, r3, r5, lsl #2
   23bac:	sub	r2, r5, ip
   23bb0:	mov	r7, ip
   23bb4:	add	r6, r0, r1
   23bb8:	add	r1, r4, r1
   23bbc:	vld1.32	{d16-d17}, [r6], r3
   23bc0:	subs	r7, r7, #4
   23bc4:	vst1.32	{d16-d17}, [r1], r3
   23bc8:	bne	23bbc <__assert_fail@plt+0x1289c>
   23bcc:	cmp	lr, ip
   23bd0:	beq	23bf4 <__assert_fail@plt+0x128d4>
   23bd4:	sub	r1, r2, #1
   23bd8:	ldr	r2, [r0, r1, lsl #2]
   23bdc:	str	r2, [r4, r1, lsl #2]
   23be0:	sub	r2, r1, #1
   23be4:	add	r1, r1, #1
   23be8:	cmp	r1, #1
   23bec:	mov	r1, r2
   23bf0:	bgt	23bd8 <__assert_fail@plt+0x128b8>
   23bf4:	ldr	r0, [sp, #16]
   23bf8:	cmp	r0, #0
   23bfc:	beq	23c18 <__assert_fail@plt+0x128f8>
   23c00:	movw	r1, #8484	; 0x2124
   23c04:	movt	r1, #4
   23c08:	ldr	r2, [r1]
   23c0c:	lsl	r1, r0, #2
   23c10:	ldr	r0, [sp, #24]
   23c14:	blx	r2
   23c18:	mov	r0, r5
   23c1c:	sub	sp, fp, #16
   23c20:	pop	{r4, r5, r6, r7, fp, pc}
   23c24:	movw	r0, #4914	; 0x1332
   23c28:	movw	r1, #1588	; 0x634
   23c2c:	movw	r3, #3180	; 0xc6c
   23c30:	movw	r2, #3313	; 0xcf1
   23c34:	movt	r0, #3
   23c38:	movt	r1, #3
   23c3c:	movt	r3, #3
   23c40:	bl	11320 <__assert_fail@plt>
   23c44:	movw	r0, #3167	; 0xc5f
   23c48:	movw	r1, #1588	; 0x634
   23c4c:	movw	r3, #3180	; 0xc6c
   23c50:	movw	r2, #3314	; 0xcf2
   23c54:	movt	r0, #3
   23c58:	movt	r1, #3
   23c5c:	movt	r3, #3
   23c60:	bl	11320 <__assert_fail@plt>
   23c64:	movw	r0, #3240	; 0xca8
   23c68:	movw	r1, #1588	; 0x634
   23c6c:	movw	r3, #3180	; 0xc6c
   23c70:	movw	r2, #3320	; 0xcf8
   23c74:	movt	r0, #3
   23c78:	movt	r1, #3
   23c7c:	movt	r3, #3
   23c80:	bl	11320 <__assert_fail@plt>
   23c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c88:	add	fp, sp, #28
   23c8c:	sub	sp, sp, #20
   23c90:	cmp	r1, #0
   23c94:	mov	r4, r1
   23c98:	mov	r5, r1
   23c9c:	mov	r6, r0
   23ca0:	str	r2, [sp, #4]
   23ca4:	addeq	r4, r4, #1
   23ca8:	cmp	r4, #0
   23cac:	beq	23ccc <__assert_fail@plt+0x129ac>
   23cb0:	mov	r0, #1
   23cb4:	str	r0, [r6, #4]
   23cb8:	ldr	r1, [r6]
   23cbc:	cmp	r1, #0
   23cc0:	ble	23cd8 <__assert_fail@plt+0x129b8>
   23cc4:	ldr	r0, [r6, #8]
   23cc8:	b	23d38 <__assert_fail@plt+0x12a18>
   23ccc:	mov	r0, #0
   23cd0:	str	r0, [r6, #4]
   23cd4:	b	23d3c <__assert_fail@plt+0x12a1c>
   23cd8:	beq	23cfc <__assert_fail@plt+0x129dc>
   23cdc:	movw	r0, #8480	; 0x2120
   23ce0:	lsl	r1, r1, #2
   23ce4:	mov	r2, #4
   23ce8:	movt	r0, #4
   23cec:	ldr	r3, [r0]
   23cf0:	ldr	r0, [r6, #8]
   23cf4:	blx	r3
   23cf8:	b	23d10 <__assert_fail@plt+0x129f0>
   23cfc:	movw	r0, #8476	; 0x211c
   23d00:	movt	r0, #4
   23d04:	ldr	r1, [r0]
   23d08:	mov	r0, #4
   23d0c:	blx	r1
   23d10:	mov	r1, #1
   23d14:	str	r0, [r6, #8]
   23d18:	str	r1, [r6]
   23d1c:	ldr	r1, [r6, #4]
   23d20:	cmp	r1, #0
   23d24:	rsbmi	r1, r1, #0
   23d28:	cmp	r1, #2
   23d2c:	blt	23d38 <__assert_fail@plt+0x12a18>
   23d30:	mov	r1, #0
   23d34:	str	r1, [r6, #4]
   23d38:	str	r4, [r0]
   23d3c:	ldr	r0, [sp, #4]
   23d40:	add	r7, r0, #1
   23d44:	cmp	r7, #2
   23d48:	bcc	23e08 <__assert_fail@plt+0x12ae8>
   23d4c:	cmp	r7, r5
   23d50:	bcs	23e08 <__assert_fail@plt+0x12ae8>
   23d54:	ldr	r0, [sp, #4]
   23d58:	mov	r8, #0
   23d5c:	mov	sl, #1
   23d60:	rsb	r0, r0, #0
   23d64:	str	r0, [sp]
   23d68:	movw	r0, #1584	; 0x630
   23d6c:	str	r8, [sp, #12]
   23d70:	str	r8, [sp, #8]
   23d74:	movt	r0, #3
   23d78:	str	r0, [sp, #16]
   23d7c:	ldr	r0, [sp]
   23d80:	adds	r9, r0, r5
   23d84:	ldr	r0, [sp, #4]
   23d88:	sub	r5, r5, r0
   23d8c:	beq	23dec <__assert_fail@plt+0x12acc>
   23d90:	movw	r0, #8476	; 0x211c
   23d94:	str	sl, [sp, #12]
   23d98:	movt	r0, #4
   23d9c:	ldr	r1, [r0]
   23da0:	mov	r0, #4
   23da4:	blx	r1
   23da8:	str	sl, [sp, #8]
   23dac:	str	r0, [sp, #16]
   23db0:	mov	r4, r0
   23db4:	str	r9, [r0]
   23db8:	mov	r0, r6
   23dbc:	mov	r1, r6
   23dc0:	add	r2, sp, #8
   23dc4:	bl	1df50 <__assert_fail@plt+0xcc30>
   23dc8:	movw	r0, #8484	; 0x2124
   23dcc:	mov	r1, #4
   23dd0:	movt	r0, #4
   23dd4:	ldr	r2, [r0]
   23dd8:	mov	r0, r4
   23ddc:	blx	r2
   23de0:	cmp	r5, r7
   23de4:	bhi	23d68 <__assert_fail@plt+0x12a48>
   23de8:	b	23e08 <__assert_fail@plt+0x12ae8>
   23dec:	mov	r0, r6
   23df0:	mov	r1, r6
   23df4:	add	r2, sp, #8
   23df8:	str	r8, [sp, #12]
   23dfc:	bl	1df50 <__assert_fail@plt+0xcc30>
   23e00:	cmp	r5, r7
   23e04:	bhi	23d68 <__assert_fail@plt+0x12a48>
   23e08:	sub	sp, fp, #28
   23e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e10:	mov	r2, #2
   23e14:	b	23c84 <__assert_fail@plt+0x12964>
   23e18:	mov	r2, #1
   23e1c:	b	23c84 <__assert_fail@plt+0x12964>
   23e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e24:	add	fp, sp, #28
   23e28:	sub	sp, sp, #28
   23e2c:	cmp	r1, r2
   23e30:	mov	r4, #0
   23e34:	mov	r9, r0
   23e38:	mov	r5, r2
   23e3c:	mov	r6, r1
   23e40:	mov	r0, #0
   23e44:	movwcs	r4, #1
   23e48:	bcc	23e68 <__assert_fail@plt+0x12b48>
   23e4c:	mov	r0, #1
   23e50:	str	r0, [r9, #4]
   23e54:	ldr	r1, [r9]
   23e58:	cmp	r1, #0
   23e5c:	ble	23e70 <__assert_fail@plt+0x12b50>
   23e60:	ldr	r0, [r9, #8]
   23e64:	b	23ed0 <__assert_fail@plt+0x12bb0>
   23e68:	str	r0, [r9, #4]
   23e6c:	b	23ed4 <__assert_fail@plt+0x12bb4>
   23e70:	beq	23e94 <__assert_fail@plt+0x12b74>
   23e74:	movw	r0, #8480	; 0x2120
   23e78:	lsl	r1, r1, #2
   23e7c:	mov	r2, #4
   23e80:	movt	r0, #4
   23e84:	ldr	r3, [r0]
   23e88:	ldr	r0, [r9, #8]
   23e8c:	blx	r3
   23e90:	b	23ea8 <__assert_fail@plt+0x12b88>
   23e94:	movw	r0, #8476	; 0x211c
   23e98:	movt	r0, #4
   23e9c:	ldr	r1, [r0]
   23ea0:	mov	r0, #4
   23ea4:	blx	r1
   23ea8:	mov	r1, #1
   23eac:	str	r0, [r9, #8]
   23eb0:	str	r1, [r9]
   23eb4:	ldr	r1, [r9, #4]
   23eb8:	cmp	r1, #0
   23ebc:	rsbmi	r1, r1, #0
   23ec0:	cmp	r1, #2
   23ec4:	blt	23ed0 <__assert_fail@plt+0x12bb0>
   23ec8:	mov	r1, #0
   23ecc:	str	r1, [r9, #4]
   23ed0:	str	r4, [r0]
   23ed4:	movw	r0, #1584	; 0x630
   23ed8:	mov	r4, #0
   23edc:	cmp	r6, r5
   23ee0:	mov	r2, #1
   23ee4:	mov	sl, #1
   23ee8:	movt	r0, #3
   23eec:	str	r4, [sp, #8]
   23ef0:	str	r4, [sp, #4]
   23ef4:	str	r0, [sp, #12]
   23ef8:	mov	r0, r6
   23efc:	movcc	r0, r5
   23f00:	cmp	r5, r6, lsr #1
   23f04:	subhi	r5, r0, r5
   23f08:	add	r0, sp, #4
   23f0c:	mov	r1, r5
   23f10:	bl	23c84 <__assert_fail@plt+0x12964>
   23f14:	cmp	r5, #0
   23f18:	beq	23fb0 <__assert_fail@plt+0x12c90>
   23f1c:	add	r8, sp, #16
   23f20:	movw	r0, #1584	; 0x630
   23f24:	cmp	r6, #0
   23f28:	str	r4, [sp, #20]
   23f2c:	str	r4, [sp, #16]
   23f30:	movt	r0, #3
   23f34:	str	r0, [sp, #24]
   23f38:	beq	23f90 <__assert_fail@plt+0x12c70>
   23f3c:	movw	r0, #8476	; 0x211c
   23f40:	str	sl, [sp, #20]
   23f44:	movt	r0, #4
   23f48:	ldr	r1, [r0]
   23f4c:	mov	r0, #4
   23f50:	blx	r1
   23f54:	str	sl, [sp, #16]
   23f58:	str	r0, [sp, #24]
   23f5c:	mov	r7, r0
   23f60:	str	r6, [r0]
   23f64:	mov	r0, r9
   23f68:	mov	r1, r9
   23f6c:	mov	r2, r8
   23f70:	bl	1df50 <__assert_fail@plt+0xcc30>
   23f74:	movw	r0, #8484	; 0x2124
   23f78:	mov	r1, #4
   23f7c:	movt	r0, #4
   23f80:	ldr	r2, [r0]
   23f84:	mov	r0, r7
   23f88:	blx	r2
   23f8c:	b	23fa4 <__assert_fail@plt+0x12c84>
   23f90:	mov	r0, r9
   23f94:	mov	r1, r9
   23f98:	mov	r2, r8
   23f9c:	str	r4, [sp, #20]
   23fa0:	bl	1df50 <__assert_fail@plt+0xcc30>
   23fa4:	sub	r6, r6, #1
   23fa8:	subs	r5, r5, #1
   23fac:	bne	23f20 <__assert_fail@plt+0x12c00>
   23fb0:	mov	r0, #2
   23fb4:	add	r3, sp, #4
   23fb8:	mov	r1, #0
   23fbc:	mov	r2, r9
   23fc0:	str	r0, [sp]
   23fc4:	mov	r0, r9
   23fc8:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   23fcc:	cmp	r0, #0
   23fd0:	bne	24000 <__assert_fail@plt+0x12ce0>
   23fd4:	ldr	r0, [sp, #4]
   23fd8:	cmp	r0, #0
   23fdc:	beq	23ff8 <__assert_fail@plt+0x12cd8>
   23fe0:	movw	r1, #8484	; 0x2124
   23fe4:	movt	r1, #4
   23fe8:	ldr	r2, [r1]
   23fec:	lsl	r1, r0, #2
   23ff0:	ldr	r0, [sp, #12]
   23ff4:	blx	r2
   23ff8:	sub	sp, fp, #28
   23ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24000:	movw	r0, #2569	; 0xa09
   24004:	movw	r1, #1588	; 0x634
   24008:	movw	r3, #2579	; 0xa13
   2400c:	movw	r2, #2521	; 0x9d9
   24010:	movt	r0, #3
   24014:	movt	r1, #3
   24018:	movt	r3, #3
   2401c:	bl	11320 <__assert_fail@plt>
   24020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24024:	add	fp, sp, #28
   24028:	sub	sp, sp, #116	; 0x74
   2402c:	mov	sl, r0
   24030:	mov	r8, r1
   24034:	ldr	r0, [r0, #4]
   24038:	ldr	r1, [sl, #8]
   2403c:	cmp	r0, #0
   24040:	mov	r2, r0
   24044:	ldr	r1, [r1]
   24048:	movwne	r2, #1
   2404c:	tst	r1, r2
   24050:	beq	24088 <__assert_fail@plt+0x12d68>
   24054:	cmp	r0, #0
   24058:	beq	24ecc <__assert_fail@plt+0x13bac>
   2405c:	rsbmi	r0, r0, #0
   24060:	cmp	r0, #1
   24064:	bgt	240bc <__assert_fail@plt+0x12d9c>
   24068:	cmp	r1, #63	; 0x3f
   2406c:	bhi	240bc <__assert_fail@plt+0x12d9c>
   24070:	lsr	r0, r1, #1
   24074:	movw	r1, #38620	; 0x96dc
   24078:	mov	r2, #2
   2407c:	movt	r1, #51561	; 0xc969
   24080:	and	r7, r2, r1, lsr r0
   24084:	b	24ea0 <__assert_fail@plt+0x13b80>
   24088:	cmp	r0, #0
   2408c:	mov	r2, r0
   24090:	mov	r7, #0
   24094:	rsbmi	r2, r0, #0
   24098:	cmp	r2, #1
   2409c:	bgt	24ea0 <__assert_fail@plt+0x13b80>
   240a0:	sub	r1, r1, #2
   240a4:	cmp	r0, #0
   240a8:	clz	r1, r1
   240ac:	lsr	r1, r1, #5
   240b0:	lslne	r0, r1, #1
   240b4:	mov	r7, r0
   240b8:	b	24ea0 <__assert_fail@plt+0x13b80>
   240bc:	movw	r0, #8476	; 0x211c
   240c0:	mov	r4, #1
   240c4:	movt	r0, #4
   240c8:	str	r4, [fp, #-36]	; 0xffffffdc
   240cc:	ldr	r1, [r0]
   240d0:	mov	r0, #4
   240d4:	blx	r1
   240d8:	movw	r1, #55191	; 0xd797
   240dc:	str	r4, [fp, #-40]	; 0xffffffd8
   240e0:	str	r0, [fp, #-32]	; 0xffffffe0
   240e4:	movt	r1, #49359	; 0xc0cf
   240e8:	str	r1, [r0]
   240ec:	sub	r0, fp, #40	; 0x28
   240f0:	mov	r1, sl
   240f4:	mov	r2, r0
   240f8:	bl	1fd0c <__assert_fail@plt+0xe9ec>
   240fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24100:	cmp	r0, #0
   24104:	ldrne	r0, [fp, #-32]	; 0xffffffe0
   24108:	ldrne	r5, [r0]
   2410c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24110:	moveq	r5, #0
   24114:	cmp	r0, #0
   24118:	beq	24134 <__assert_fail@plt+0x12e14>
   2411c:	movw	r1, #8484	; 0x2124
   24120:	movt	r1, #4
   24124:	ldr	r2, [r1]
   24128:	lsl	r1, r0, #2
   2412c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24130:	blx	r2
   24134:	mov	r7, #0
   24138:	cmp	r5, #1
   2413c:	bne	24ea0 <__assert_fail@plt+0x13b80>
   24140:	ldr	r1, [sl, #4]
   24144:	cmp	r1, #0
   24148:	mov	r6, r1
   2414c:	rsbmi	r6, r1, #0
   24150:	cmp	r6, #1
   24154:	bgt	24174 <__assert_fail@plt+0x12e54>
   24158:	mov	r7, #2
   2415c:	cmp	r1, #0
   24160:	beq	24ea0 <__assert_fail@plt+0x13b80>
   24164:	ldr	r0, [sl, #8]
   24168:	ldr	r0, [r0]
   2416c:	cmp	r0, #960	; 0x3c0
   24170:	bls	24ea0 <__assert_fail@plt+0x13b80>
   24174:	movw	r0, #1584	; 0x630
   24178:	add	r2, sp, #56	; 0x38
   2417c:	mov	r5, #0
   24180:	cmp	r2, sl
   24184:	movt	r0, #3
   24188:	mov	r2, #0
   2418c:	str	r5, [sp, #60]	; 0x3c
   24190:	str	r5, [sp, #56]	; 0x38
   24194:	str	r5, [sp, #44]	; 0x2c
   24198:	str	r5, [sp, #48]	; 0x30
   2419c:	str	r0, [sp, #64]	; 0x40
   241a0:	str	r0, [sp, #52]	; 0x34
   241a4:	beq	2427c <__assert_fail@plt+0x12f5c>
   241a8:	cmp	r6, #1
   241ac:	blt	24264 <__assert_fail@plt+0x12f44>
   241b0:	movw	r1, #8476	; 0x211c
   241b4:	mov	r7, r6
   241b8:	movt	r1, #4
   241bc:	movle	r7, #1
   241c0:	ldr	r1, [r1]
   241c4:	lsl	r0, r7, #2
   241c8:	blx	r1
   241cc:	str	r0, [sp, #64]	; 0x40
   241d0:	str	r7, [sp, #56]	; 0x38
   241d4:	mov	r2, #0
   241d8:	ldr	r1, [sp, #60]	; 0x3c
   241dc:	cmp	r1, #0
   241e0:	rsbmi	r1, r1, #0
   241e4:	cmp	r1, r7
   241e8:	movgt	r1, #0
   241ec:	strgt	r1, [sp, #60]	; 0x3c
   241f0:	cmp	r6, #4
   241f4:	ldr	ip, [sl, #8]
   241f8:	bcc	2423c <__assert_fail@plt+0x12f1c>
   241fc:	add	r1, ip, r6, lsl #2
   24200:	cmp	r0, r1
   24204:	bcs	24214 <__assert_fail@plt+0x12ef4>
   24208:	add	r1, r0, r6, lsl #2
   2420c:	cmp	r1, ip
   24210:	bhi	2423c <__assert_fail@plt+0x12f1c>
   24214:	bic	r2, r6, #-2147483645	; 0x80000003
   24218:	mov	r7, r0
   2421c:	mov	r1, ip
   24220:	mov	r3, r2
   24224:	vld1.32	{d16-d17}, [r1]!
   24228:	subs	r3, r3, #4
   2422c:	vst1.32	{d16-d17}, [r7]!
   24230:	bne	24224 <__assert_fail@plt+0x12f04>
   24234:	cmp	r6, r2
   24238:	beq	24258 <__assert_fail@plt+0x12f38>
   2423c:	add	r1, ip, r2, lsl #2
   24240:	add	r3, r0, r2, lsl #2
   24244:	sub	r2, r6, r2
   24248:	ldr	r7, [r1], #4
   2424c:	subs	r2, r2, #1
   24250:	str	r7, [r3], #4
   24254:	bne	24248 <__assert_fail@plt+0x12f28>
   24258:	ldr	r1, [sl, #4]
   2425c:	rsb	r2, r1, #0
   24260:	b	24270 <__assert_fail@plt+0x12f50>
   24264:	movw	r0, #1584	; 0x630
   24268:	rsb	r2, r1, #0
   2426c:	movt	r0, #3
   24270:	cmp	r1, #0
   24274:	str	r1, [sp, #60]	; 0x3c
   24278:	movge	r2, r1
   2427c:	str	r2, [sp, #60]	; 0x3c
   24280:	ldr	r1, [r0]
   24284:	subs	r1, r1, #1
   24288:	str	r1, [r0]
   2428c:	bne	242a8 <__assert_fail@plt+0x12f88>
   24290:	add	r0, r0, #4
   24294:	mov	r5, #0
   24298:	ldr	r1, [r0, r5, lsl #2]
   2429c:	add	r5, r5, #1
   242a0:	cmp	r1, #0
   242a4:	beq	24298 <__assert_fail@plt+0x12f78>
   242a8:	rsb	r0, r1, #0
   242ac:	and	r1, r1, r0
   242b0:	mov	r0, #0
   242b4:	cmp	r0, r1, lsr #24
   242b8:	bne	242d0 <__assert_fail@plt+0x12fb0>
   242bc:	mov	r0, #0
   242c0:	lsl	r1, r1, #8
   242c4:	add	r0, r0, #8
   242c8:	cmp	r1, #16777216	; 0x1000000
   242cc:	bcc	242c0 <__assert_fail@plt+0x12fa0>
   242d0:	cmp	r1, #0
   242d4:	blt	242e8 <__assert_fail@plt+0x12fc8>
   242d8:	lsl	r1, r1, #1
   242dc:	add	r0, r0, #1
   242e0:	cmn	r1, #1
   242e4:	bgt	242d8 <__assert_fail@plt+0x12fb8>
   242e8:	mov	r1, #31
   242ec:	mov	r3, #2
   242f0:	orr	r1, r1, r5, lsl #5
   242f4:	sub	r2, r1, r0
   242f8:	add	r0, sp, #44	; 0x2c
   242fc:	add	r1, sp, #56	; 0x38
   24300:	str	r2, [sp, #24]
   24304:	bl	1ee60 <__assert_fail@plt+0xdb40>
   24308:	movw	r5, #1584	; 0x630
   2430c:	mov	r0, #0
   24310:	mov	r4, #1
   24314:	movt	r5, #3
   24318:	str	r5, [sp, #40]	; 0x28
   2431c:	str	r0, [sp, #32]
   24320:	movw	r0, #8476	; 0x211c
   24324:	str	r4, [sp, #36]	; 0x24
   24328:	movt	r0, #4
   2432c:	ldr	r1, [r0]
   24330:	mov	r0, #4
   24334:	blx	r1
   24338:	str	r0, [sp, #40]	; 0x28
   2433c:	str	r4, [sp, #32]
   24340:	add	r2, sp, #32
   24344:	add	r3, sp, #44	; 0x2c
   24348:	ldr	r1, [sp, #36]	; 0x24
   2434c:	cmp	r1, #0
   24350:	rsbmi	r1, r1, #0
   24354:	cmp	r1, #2
   24358:	movge	r1, #0
   2435c:	strge	r1, [sp, #36]	; 0x24
   24360:	mov	r1, #2
   24364:	str	r1, [r0]
   24368:	ldr	r0, [sp, #24]
   2436c:	add	r1, sp, #56	; 0x38
   24370:	str	r0, [sp]
   24374:	mov	r0, sl
   24378:	bl	2500c <__assert_fail@plt+0x13cec>
   2437c:	mov	r1, #0
   24380:	cmp	r0, #0
   24384:	mov	r7, #0
   24388:	beq	24cb8 <__assert_fail@plt+0x13998>
   2438c:	ldmib	sl, {r0, r1}
   24390:	mov	r2, #0
   24394:	str	r2, [sp, #68]	; 0x44
   24398:	cmp	r0, #0
   2439c:	mov	r2, r0
   243a0:	str	r1, [sp, #76]	; 0x4c
   243a4:	rsbmi	r2, r0, #0
   243a8:	cmp	r0, #0
   243ac:	str	r2, [sp, #72]	; 0x48
   243b0:	movwne	r0, #1
   243b4:	ldr	r1, [r1]
   243b8:	tst	r1, r0
   243bc:	beq	24eec <__assert_fail@plt+0x13bcc>
   243c0:	mov	r7, #0
   243c4:	add	r0, sp, #32
   243c8:	sub	r1, fp, #52	; 0x34
   243cc:	add	r2, sp, #68	; 0x44
   243d0:	mov	r3, #2
   243d4:	str	r8, [sp, #12]
   243d8:	str	r7, [fp, #-48]	; 0xffffffd0
   243dc:	str	r7, [fp, #-52]	; 0xffffffcc
   243e0:	str	r5, [fp, #-44]	; 0xffffffd4
   243e4:	bl	22cdc <__assert_fail@plt+0x119bc>
   243e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   243ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   243f0:	cmp	r0, #0
   243f4:	beq	24410 <__assert_fail@plt+0x130f0>
   243f8:	movw	r1, #8484	; 0x2124
   243fc:	movt	r1, #4
   24400:	ldr	r2, [r1]
   24404:	lsl	r1, r0, #2
   24408:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2440c:	blx	r2
   24410:	cmp	r5, #0
   24414:	beq	24cb0 <__assert_fail@plt+0x13990>
   24418:	ldr	r0, [sp, #36]	; 0x24
   2441c:	mvn	r8, #0
   24420:	mov	r6, #3
   24424:	mov	r9, #2
   24428:	add	r4, sp, #68	; 0x44
   2442c:	cmp	r0, #1
   24430:	ldreq	r0, [sp, #40]	; 0x28
   24434:	ldreq	r0, [r0]
   24438:	subeq	r8, r0, #1
   2443c:	cmp	r6, r8
   24440:	bcs	24684 <__assert_fail@plt+0x13364>
   24444:	add	r6, r6, #2
   24448:	mov	r0, #0
   2444c:	mov	r1, #0
   24450:	mov	r2, r4
   24454:	str	r9, [sp]
   24458:	mov	r7, #0
   2445c:	mov	r3, r6
   24460:	bl	1f810 <__assert_fail@plt+0xe4f0>
   24464:	cmp	r0, #0
   24468:	beq	24cb0 <__assert_fail@plt+0x13990>
   2446c:	rsb	r1, r0, #0
   24470:	mov	r3, #0
   24474:	and	r1, r0, r1
   24478:	cmp	r3, r1, lsr #24
   2447c:	bne	24494 <__assert_fail@plt+0x13174>
   24480:	mov	r3, #0
   24484:	lsl	r1, r1, #8
   24488:	add	r3, r3, #8
   2448c:	cmp	r1, #16777216	; 0x1000000
   24490:	bcc	24484 <__assert_fail@plt+0x13164>
   24494:	cmp	r1, #0
   24498:	blt	244ac <__assert_fail@plt+0x1318c>
   2449c:	lsl	r1, r1, #1
   244a0:	add	r3, r3, #1
   244a4:	cmn	r1, #1
   244a8:	bgt	2449c <__assert_fail@plt+0x1317c>
   244ac:	lsr	r2, r0, #1
   244b0:	lsr	r5, r6, #1
   244b4:	rsb	r3, r3, #31
   244b8:	mov	r0, #0
   244bc:	b	244c4 <__assert_fail@plt+0x131a4>
   244c0:	rsb	r3, r3, #32
   244c4:	eor	r7, r5, r5, lsr #1
   244c8:	lsr	r1, r2, r3
   244cc:	cmp	r5, r2, lsr r3
   244d0:	and	r7, r7, r3
   244d4:	eor	r0, r7, r0
   244d8:	bls	244f8 <__assert_fail@plt+0x131d8>
   244dc:	cmp	r1, #0
   244e0:	beq	24544 <__assert_fail@plt+0x13224>
   244e4:	and	r3, r1, r5
   244e8:	sub	r2, r5, r1
   244ec:	mov	r5, r1
   244f0:	eor	r0, r0, r3
   244f4:	b	24500 <__assert_fail@plt+0x131e0>
   244f8:	subs	r2, r1, r5
   244fc:	beq	24eac <__assert_fail@plt+0x13b8c>
   24500:	rsb	r1, r2, #0
   24504:	mov	r3, #0
   24508:	and	r7, r2, r1
   2450c:	cmp	r3, r7, lsr #24
   24510:	bne	24528 <__assert_fail@plt+0x13208>
   24514:	mov	r3, #0
   24518:	lsl	r7, r7, #8
   2451c:	add	r3, r3, #8
   24520:	cmp	r7, #16777216	; 0x1000000
   24524:	bcc	24518 <__assert_fail@plt+0x131f8>
   24528:	cmp	r7, #0
   2452c:	blt	244c0 <__assert_fail@plt+0x131a0>
   24530:	lsl	r7, r7, #1
   24534:	add	r3, r3, #1
   24538:	cmn	r7, #1
   2453c:	bgt	24530 <__assert_fail@plt+0x13210>
   24540:	b	244c0 <__assert_fail@plt+0x131a0>
   24544:	tst	r0, #1
   24548:	beq	2443c <__assert_fail@plt+0x1311c>
   2454c:	ldr	ip, [sp, #72]	; 0x48
   24550:	movw	r0, #1584	; 0x630
   24554:	mov	r5, #0
   24558:	movt	r0, #3
   2455c:	str	r5, [fp, #-60]	; 0xffffffc4
   24560:	str	r5, [fp, #-64]	; 0xffffffc0
   24564:	str	r0, [fp, #-56]	; 0xffffffc8
   24568:	cmp	ip, #0
   2456c:	blt	24f2c <__assert_fail@plt+0x13c0c>
   24570:	ldr	r2, [sp, #76]	; 0x4c
   24574:	ldr	r0, [r2]
   24578:	cmn	r0, #1
   2457c:	mov	r1, r0
   24580:	bne	245ac <__assert_fail@plt+0x1328c>
   24584:	add	r7, r2, #4
   24588:	sub	r3, ip, #1
   2458c:	mov	r2, #0
   24590:	cmp	r3, r2
   24594:	beq	246b0 <__assert_fail@plt+0x13390>
   24598:	ldr	r1, [r7, r2, lsl #2]
   2459c:	add	r5, r2, #1
   245a0:	mov	r2, r5
   245a4:	cmn	r1, #1
   245a8:	beq	24590 <__assert_fail@plt+0x13270>
   245ac:	add	r2, r1, #1
   245b0:	mov	r3, #0
   245b4:	bic	r7, r2, r1
   245b8:	cmp	r3, r7, lsr #24
   245bc:	bne	245d4 <__assert_fail@plt+0x132b4>
   245c0:	mov	r3, #0
   245c4:	lsl	r7, r7, #8
   245c8:	add	r3, r3, #8
   245cc:	cmp	r7, #16777216	; 0x1000000
   245d0:	bcc	245c4 <__assert_fail@plt+0x132a4>
   245d4:	cmp	r7, #0
   245d8:	blt	245ec <__assert_fail@plt+0x132cc>
   245dc:	lsl	r7, r7, #1
   245e0:	add	r3, r3, #1
   245e4:	cmn	r7, #1
   245e8:	bgt	245dc <__assert_fail@plt+0x132bc>
   245ec:	mov	r1, #31
   245f0:	orr	r1, r1, r5, lsl #5
   245f4:	sub	r7, r1, r3
   245f8:	mov	r2, #1
   245fc:	mov	r1, #0
   24600:	tst	r6, #2
   24604:	add	r5, r2, r6, lsr #2
   24608:	subeq	r5, r1, r6, lsr #2
   2460c:	cmp	r7, #0
   24610:	beq	24f4c <__assert_fail@plt+0x13c2c>
   24614:	cmp	r5, #1073741825	; 0x40000001
   24618:	bge	24f6c <__assert_fail@plt+0x13c4c>
   2461c:	cmp	r5, #-1073741824	; 0xc0000000
   24620:	ble	24f8c <__assert_fail@plt+0x13c6c>
   24624:	cmp	ip, #1
   24628:	bgt	2463c <__assert_fail@plt+0x1331c>
   2462c:	cmp	r0, #5
   24630:	bcc	24fac <__assert_fail@plt+0x13c8c>
   24634:	cmp	ip, #0
   24638:	beq	24fac <__assert_fail@plt+0x13c8c>
   2463c:	tst	r0, #1
   24640:	beq	24fcc <__assert_fail@plt+0x13cac>
   24644:	movw	r0, #8476	; 0x211c
   24648:	mov	r4, #1
   2464c:	movt	r0, #4
   24650:	str	r4, [fp, #-36]	; 0xffffffdc
   24654:	ldr	r1, [r0]
   24658:	mov	r0, #4
   2465c:	blx	r1
   24660:	str	r4, [fp, #-40]	; 0xffffffd8
   24664:	str	r0, [fp, #-32]	; 0xffffffe0
   24668:	str	r4, [r0]
   2466c:	str	r4, [fp, #-60]	; 0xffffffc4
   24670:	ldr	r1, [fp, #-64]	; 0xffffffc0
   24674:	cmp	r1, #0
   24678:	ble	2468c <__assert_fail@plt+0x1336c>
   2467c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24680:	b	246f0 <__assert_fail@plt+0x133d0>
   24684:	mov	r7, #1
   24688:	b	24cb0 <__assert_fail@plt+0x13990>
   2468c:	beq	246b8 <__assert_fail@plt+0x13398>
   24690:	movw	r0, #8480	; 0x2120
   24694:	lsl	r1, r1, #2
   24698:	mov	r2, #4
   2469c:	movt	r0, #4
   246a0:	ldr	r3, [r0]
   246a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   246a8:	blx	r3
   246ac:	b	246cc <__assert_fail@plt+0x133ac>
   246b0:	lsl	r7, ip, #5
   246b4:	b	245f8 <__assert_fail@plt+0x132d8>
   246b8:	movw	r0, #8476	; 0x211c
   246bc:	movt	r0, #4
   246c0:	ldr	r1, [r0]
   246c4:	mov	r0, #4
   246c8:	blx	r1
   246cc:	mov	r1, #1
   246d0:	str	r0, [fp, #-56]	; 0xffffffc8
   246d4:	str	r1, [fp, #-64]	; 0xffffffc0
   246d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   246dc:	cmp	r1, #0
   246e0:	rsbmi	r1, r1, #0
   246e4:	cmp	r1, #2
   246e8:	movge	r1, #0
   246ec:	strge	r1, [fp, #-60]	; 0xffffffc4
   246f0:	mov	r1, #1
   246f4:	cmp	r5, #0
   246f8:	str	r1, [r0]
   246fc:	blt	24720 <__assert_fail@plt+0x13400>
   24700:	beq	24740 <__assert_fail@plt+0x13420>
   24704:	mov	r0, #1
   24708:	str	r0, [sp, #36]	; 0x24
   2470c:	ldr	r1, [sp, #32]
   24710:	cmp	r1, #0
   24714:	ble	2474c <__assert_fail@plt+0x1342c>
   24718:	ldr	r0, [sp, #40]	; 0x28
   2471c:	b	247d0 <__assert_fail@plt+0x134b0>
   24720:	mvn	r0, #0
   24724:	rsb	r4, r5, #0
   24728:	str	r0, [sp, #36]	; 0x24
   2472c:	ldr	r1, [sp, #32]
   24730:	cmp	r1, #0
   24734:	ble	24770 <__assert_fail@plt+0x13450>
   24738:	ldr	r0, [sp, #40]	; 0x28
   2473c:	b	24810 <__assert_fail@plt+0x134f0>
   24740:	mov	r0, #0
   24744:	str	r0, [sp, #36]	; 0x24
   24748:	b	24814 <__assert_fail@plt+0x134f4>
   2474c:	beq	24794 <__assert_fail@plt+0x13474>
   24750:	movw	r0, #8480	; 0x2120
   24754:	lsl	r1, r1, #2
   24758:	mov	r2, #4
   2475c:	movt	r0, #4
   24760:	ldr	r3, [r0]
   24764:	ldr	r0, [sp, #40]	; 0x28
   24768:	blx	r3
   2476c:	b	247a8 <__assert_fail@plt+0x13488>
   24770:	beq	247d8 <__assert_fail@plt+0x134b8>
   24774:	movw	r0, #8480	; 0x2120
   24778:	lsl	r1, r1, #2
   2477c:	mov	r2, #4
   24780:	movt	r0, #4
   24784:	ldr	r3, [r0]
   24788:	ldr	r0, [sp, #40]	; 0x28
   2478c:	blx	r3
   24790:	b	247ec <__assert_fail@plt+0x134cc>
   24794:	movw	r0, #8476	; 0x211c
   24798:	movt	r0, #4
   2479c:	ldr	r1, [r0]
   247a0:	mov	r0, #4
   247a4:	blx	r1
   247a8:	mov	r1, #1
   247ac:	str	r1, [sp, #32]
   247b0:	str	r0, [sp, #40]	; 0x28
   247b4:	ldr	r1, [sp, #36]	; 0x24
   247b8:	cmp	r1, #0
   247bc:	rsbmi	r1, r1, #0
   247c0:	cmp	r1, #2
   247c4:	blt	247d0 <__assert_fail@plt+0x134b0>
   247c8:	mov	r1, #0
   247cc:	str	r1, [sp, #36]	; 0x24
   247d0:	str	r5, [r0]
   247d4:	b	24814 <__assert_fail@plt+0x134f4>
   247d8:	movw	r0, #8476	; 0x211c
   247dc:	movt	r0, #4
   247e0:	ldr	r1, [r0]
   247e4:	mov	r0, #4
   247e8:	blx	r1
   247ec:	mov	r1, #1
   247f0:	str	r1, [sp, #32]
   247f4:	str	r0, [sp, #40]	; 0x28
   247f8:	ldr	r1, [sp, #36]	; 0x24
   247fc:	cmp	r1, #0
   24800:	rsbmi	r1, r1, #0
   24804:	cmp	r1, #2
   24808:	movge	r1, #0
   2480c:	strge	r1, [sp, #36]	; 0x24
   24810:	str	r4, [r0]
   24814:	ldr	r0, [sp, #72]	; 0x48
   24818:	cmp	r0, #0
   2481c:	rsbmi	r0, r0, #0
   24820:	cmp	r0, #0
   24824:	beq	24898 <__assert_fail@plt+0x13578>
   24828:	sub	r2, r0, #1
   2482c:	ldr	r0, [sp, #76]	; 0x4c
   24830:	ldr	r0, [r0, r2, lsl #2]
   24834:	cmp	r0, #0
   24838:	beq	24fec <__assert_fail@plt+0x13ccc>
   2483c:	mov	r1, #0
   24840:	cmp	r1, r0, lsr #24
   24844:	bne	2485c <__assert_fail@plt+0x1353c>
   24848:	mov	r1, #0
   2484c:	lsl	r0, r0, #8
   24850:	add	r1, r1, #8
   24854:	cmp	r0, #16777216	; 0x1000000
   24858:	bcc	2484c <__assert_fail@plt+0x1352c>
   2485c:	lsl	r2, r2, #5
   24860:	cmp	r0, #0
   24864:	blt	24878 <__assert_fail@plt+0x13558>
   24868:	lsl	r0, r0, #1
   2486c:	add	r1, r1, #1
   24870:	cmn	r0, #1
   24874:	bgt	24868 <__assert_fail@plt+0x13548>
   24878:	mvn	r0, r1
   2487c:	orr	r1, r2, #31
   24880:	add	r9, r1, r0
   24884:	cmp	r9, r7
   24888:	bcs	2489c <__assert_fail@plt+0x1357c>
   2488c:	mov	r0, #1
   24890:	mov	r5, #0
   24894:	b	24b68 <__assert_fail@plt+0x13848>
   24898:	mvn	r9, #0
   2489c:	mov	r0, #0
   248a0:	str	r7, [sp, #28]
   248a4:	sub	r4, fp, #40	; 0x28
   248a8:	sub	r8, fp, #64	; 0x40
   248ac:	add	r7, sp, #32
   248b0:	str	sl, [sp, #8]
   248b4:	str	r5, [sp, #20]
   248b8:	sub	r0, r0, r5, lsl #1
   248bc:	str	r0, [sp, #16]
   248c0:	b	24914 <__assert_fail@plt+0x135f4>
   248c4:	cmp	r3, #0
   248c8:	beq	248e4 <__assert_fail@plt+0x135c4>
   248cc:	rsb	r2, r3, #32
   248d0:	mov	r3, #0
   248d4:	cmp	r3, r4, lsl r2
   248d8:	beq	248e4 <__assert_fail@plt+0x135c4>
   248dc:	eor	r0, r0, #1
   248e0:	b	24a34 <__assert_fail@plt+0x13714>
   248e4:	sub	r2, ip, #4
   248e8:	sub	r4, fp, #40	; 0x28
   248ec:	subs	r3, r1, #1
   248f0:	blt	24a48 <__assert_fail@plt+0x13728>
   248f4:	ldr	r1, [r2, r1, lsl #2]
   248f8:	cmp	r1, #0
   248fc:	mov	r1, r3
   24900:	beq	248ec <__assert_fail@plt+0x135cc>
   24904:	eor	r0, r0, #1
   24908:	cmp	r0, #0
   2490c:	bne	24a50 <__assert_fail@plt+0x13730>
   24910:	b	24b20 <__assert_fail@plt+0x13800>
   24914:	mov	r0, r4
   24918:	mov	r1, r4
   2491c:	mov	r2, r8
   24920:	bl	1df50 <__assert_fail@plt+0xcc30>
   24924:	ldr	r0, [sp, #72]	; 0x48
   24928:	mov	r1, r7
   2492c:	mov	r2, r7
   24930:	add	r3, sp, #68	; 0x44
   24934:	lsr	r0, r0, #31
   24938:	str	r0, [sp]
   2493c:	mov	r0, #0
   24940:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   24944:	mov	r0, r8
   24948:	mov	r1, r8
   2494c:	mov	r2, r8
   24950:	bl	1df50 <__assert_fail@plt+0xcc30>
   24954:	movw	r0, #8476	; 0x211c
   24958:	mov	sl, #1
   2495c:	movt	r0, #4
   24960:	str	sl, [fp, #-48]	; 0xffffffd0
   24964:	ldr	r1, [r0]
   24968:	mov	r0, #4
   2496c:	blx	r1
   24970:	sub	r6, fp, #52	; 0x34
   24974:	mov	r5, #2
   24978:	str	sl, [fp, #-52]	; 0xffffffcc
   2497c:	str	r0, [fp, #-44]	; 0xffffffd4
   24980:	mov	r1, r7
   24984:	str	r5, [r0]
   24988:	mov	r0, r6
   2498c:	mov	r2, r6
   24990:	bl	1df50 <__assert_fail@plt+0xcc30>
   24994:	mov	r0, r8
   24998:	mov	r1, r8
   2499c:	mov	r2, r6
   249a0:	bl	1db64 <__assert_fail@plt+0xc844>
   249a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   249a8:	cmp	r0, #0
   249ac:	beq	249c8 <__assert_fail@plt+0x136a8>
   249b0:	movw	r1, #8484	; 0x2124
   249b4:	movt	r1, #4
   249b8:	ldr	r2, [r1]
   249bc:	lsl	r1, r0, #2
   249c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   249c4:	blx	r2
   249c8:	mov	r0, #0
   249cc:	mov	r1, r8
   249d0:	mov	r2, r8
   249d4:	add	r3, sp, #68	; 0x44
   249d8:	str	r5, [sp]
   249dc:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   249e0:	mov	r0, r7
   249e4:	mov	r1, r7
   249e8:	mov	r2, r7
   249ec:	bl	1df50 <__assert_fail@plt+0xcc30>
   249f0:	ldr	r0, [sp, #28]
   249f4:	cmp	r9, r0
   249f8:	beq	24a50 <__assert_fail@plt+0x13730>
   249fc:	ldr	r2, [sp, #72]	; 0x48
   24a00:	cmp	r2, #0
   24a04:	mov	r0, r2
   24a08:	rsbmi	r0, r2, #0
   24a0c:	cmp	r0, r9, lsr #5
   24a10:	ble	24a44 <__assert_fail@plt+0x13724>
   24a14:	ldr	ip, [sp, #76]	; 0x4c
   24a18:	lsr	r1, r9, #5
   24a1c:	and	r3, r9, #31
   24a20:	mov	r0, #1
   24a24:	cmn	r2, #1
   24a28:	ldr	r4, [ip, r1, lsl #2]
   24a2c:	and	r0, r0, r4, lsr r3
   24a30:	ble	248c4 <__assert_fail@plt+0x135a4>
   24a34:	sub	r4, fp, #40	; 0x28
   24a38:	cmp	r0, #0
   24a3c:	bne	24a50 <__assert_fail@plt+0x13730>
   24a40:	b	24b20 <__assert_fail@plt+0x13800>
   24a44:	lsr	r0, r2, #31
   24a48:	cmp	r0, #0
   24a4c:	beq	24b20 <__assert_fail@plt+0x13800>
   24a50:	ldr	r2, [sp, #20]
   24a54:	mov	r0, r7
   24a58:	mov	r1, r7
   24a5c:	mov	sl, r7
   24a60:	bl	1dd7c <__assert_fail@plt+0xca5c>
   24a64:	sub	r2, fp, #40	; 0x28
   24a68:	sub	r5, fp, #64	; 0x40
   24a6c:	ldm	r2, {r0, r1, r2}
   24a70:	ldm	r5, {r3, r4, r5}
   24a74:	str	r4, [fp, #-36]	; 0xffffffdc
   24a78:	str	r3, [fp, #-40]	; 0xffffffd8
   24a7c:	sub	r4, fp, #40	; 0x28
   24a80:	sub	r3, fp, #64	; 0x40
   24a84:	str	r5, [fp, #-32]	; 0xffffffe0
   24a88:	stm	r3, {r0, r1, r2}
   24a8c:	mov	r0, r4
   24a90:	mov	r1, r4
   24a94:	mov	r2, r8
   24a98:	bl	1d388 <__assert_fail@plt+0xc068>
   24a9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   24aa0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24aa4:	ldr	r1, [r1]
   24aa8:	cmp	r0, #0
   24aac:	movwne	r0, #1
   24ab0:	tst	r1, r0
   24ab4:	beq	24ac8 <__assert_fail@plt+0x137a8>
   24ab8:	mov	r0, r4
   24abc:	mov	r1, r4
   24ac0:	add	r2, sp, #68	; 0x44
   24ac4:	bl	1d388 <__assert_fail@plt+0xc068>
   24ac8:	mov	r0, r4
   24acc:	mov	r1, r4
   24ad0:	mov	r2, #1
   24ad4:	mov	r3, #2
   24ad8:	bl	1ee60 <__assert_fail@plt+0xdb40>
   24adc:	ldr	r2, [sp, #16]
   24ae0:	mov	r0, r8
   24ae4:	mov	r1, r8
   24ae8:	bl	1dd7c <__assert_fail@plt+0xca5c>
   24aec:	mov	r0, r8
   24af0:	mov	r1, r4
   24af4:	mov	r2, r8
   24af8:	bl	1d388 <__assert_fail@plt+0xc068>
   24afc:	mov	r0, #2
   24b00:	mov	r1, r8
   24b04:	mov	r2, r8
   24b08:	add	r3, sp, #68	; 0x44
   24b0c:	str	r0, [sp]
   24b10:	mov	r0, #0
   24b14:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   24b18:	mov	r7, sl
   24b1c:	mov	r5, #2
   24b20:	mov	r0, #0
   24b24:	mov	r1, r4
   24b28:	mov	r2, r4
   24b2c:	add	r3, sp, #68	; 0x44
   24b30:	str	r5, [sp]
   24b34:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   24b38:	ldr	r0, [sp, #28]
   24b3c:	sub	r9, r9, #1
   24b40:	cmp	r9, r0
   24b44:	bcs	24914 <__assert_fail@plt+0x135f4>
   24b48:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24b4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24b50:	ldr	sl, [sp, #8]
   24b54:	ldr	r7, [sp, #28]
   24b58:	clz	r1, r1
   24b5c:	cmp	r0, #0
   24b60:	lsr	r5, r1, #5
   24b64:	beq	24b80 <__assert_fail@plt+0x13860>
   24b68:	movw	r1, #8484	; 0x2124
   24b6c:	movt	r1, #4
   24b70:	ldr	r2, [r1]
   24b74:	lsl	r1, r0, #2
   24b78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24b7c:	blx	r2
   24b80:	cmp	r5, #0
   24b84:	bne	24c84 <__assert_fail@plt+0x13964>
   24b88:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24b8c:	cmp	r0, #0
   24b90:	beq	24c84 <__assert_fail@plt+0x13964>
   24b94:	add	r5, sp, #32
   24b98:	sub	r6, fp, #64	; 0x40
   24b9c:	mov	r9, #1
   24ba0:	mov	r8, #2
   24ba4:	sub	r4, fp, #40	; 0x28
   24ba8:	subs	r7, r7, #1
   24bac:	beq	24c80 <__assert_fail@plt+0x13960>
   24bb0:	ldr	r0, [sp, #72]	; 0x48
   24bb4:	mov	r1, r5
   24bb8:	mov	r2, r5
   24bbc:	add	r3, sp, #68	; 0x44
   24bc0:	lsr	r0, r0, #31
   24bc4:	str	r0, [sp]
   24bc8:	mov	r0, #0
   24bcc:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   24bd0:	mov	r0, r6
   24bd4:	mov	r1, r6
   24bd8:	mov	r2, r6
   24bdc:	bl	1df50 <__assert_fail@plt+0xcc30>
   24be0:	movw	r0, #8476	; 0x211c
   24be4:	str	r9, [fp, #-36]	; 0xffffffdc
   24be8:	movt	r0, #4
   24bec:	ldr	r1, [r0]
   24bf0:	mov	r0, #4
   24bf4:	blx	r1
   24bf8:	str	r9, [fp, #-40]	; 0xffffffd8
   24bfc:	str	r0, [fp, #-32]	; 0xffffffe0
   24c00:	str	r8, [r0]
   24c04:	mov	r0, r4
   24c08:	mov	r1, r5
   24c0c:	mov	r2, r4
   24c10:	bl	1df50 <__assert_fail@plt+0xcc30>
   24c14:	mov	r0, r6
   24c18:	mov	r1, r6
   24c1c:	mov	r2, r4
   24c20:	bl	1db64 <__assert_fail@plt+0xc844>
   24c24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24c28:	cmp	r0, #0
   24c2c:	beq	24c48 <__assert_fail@plt+0x13928>
   24c30:	movw	r1, #8484	; 0x2124
   24c34:	movt	r1, #4
   24c38:	ldr	r2, [r1]
   24c3c:	lsl	r1, r0, #2
   24c40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24c44:	blx	r2
   24c48:	mov	r0, #0
   24c4c:	mov	r1, r6
   24c50:	mov	r2, r6
   24c54:	add	r3, sp, #68	; 0x44
   24c58:	str	r8, [sp]
   24c5c:	bl	1e4f8 <__assert_fail@plt+0xd1d8>
   24c60:	mov	r0, r5
   24c64:	mov	r1, r5
   24c68:	mov	r2, r5
   24c6c:	bl	1df50 <__assert_fail@plt+0xcc30>
   24c70:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24c74:	cmp	r0, #0
   24c78:	bne	24ba8 <__assert_fail@plt+0x13888>
   24c7c:	b	24c84 <__assert_fail@plt+0x13964>
   24c80:	mov	r7, #0
   24c84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24c88:	cmp	r0, #0
   24c8c:	beq	24ca8 <__assert_fail@plt+0x13988>
   24c90:	movw	r1, #8484	; 0x2124
   24c94:	movt	r1, #4
   24c98:	ldr	r2, [r1]
   24c9c:	lsl	r1, r0, #2
   24ca0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24ca4:	blx	r2
   24ca8:	cmp	r7, #0
   24cac:	movwne	r7, #1
   24cb0:	ldr	r8, [sp, #12]
   24cb4:	mov	r1, #0
   24cb8:	cmp	r8, #24
   24cbc:	movwgt	r1, #1
   24cc0:	tst	r7, r1
   24cc4:	beq	24e34 <__assert_fail@plt+0x13b14>
   24cc8:	sub	r5, r8, #24
   24ccc:	mov	r6, #0
   24cd0:	add	r9, sp, #56	; 0x38
   24cd4:	mov	r8, #1
   24cd8:	mla	r0, r6, r6, r6
   24cdc:	adds	r4, r0, #41	; 0x29
   24ce0:	beq	24d00 <__assert_fail@plt+0x139e0>
   24ce4:	str	r8, [sp, #36]	; 0x24
   24ce8:	ldr	r1, [sp, #32]
   24cec:	cmp	r1, #0
   24cf0:	ble	24d0c <__assert_fail@plt+0x139ec>
   24cf4:	ldr	r0, [sp, #40]	; 0x28
   24cf8:	mov	r1, #1
   24cfc:	b	24d6c <__assert_fail@plt+0x13a4c>
   24d00:	mov	r1, #0
   24d04:	str	r1, [sp, #36]	; 0x24
   24d08:	b	24d70 <__assert_fail@plt+0x13a50>
   24d0c:	beq	24d30 <__assert_fail@plt+0x13a10>
   24d10:	movw	r0, #8480	; 0x2120
   24d14:	lsl	r1, r1, #2
   24d18:	mov	r2, #4
   24d1c:	movt	r0, #4
   24d20:	ldr	r3, [r0]
   24d24:	ldr	r0, [sp, #40]	; 0x28
   24d28:	blx	r3
   24d2c:	b	24d44 <__assert_fail@plt+0x13a24>
   24d30:	movw	r0, #8476	; 0x211c
   24d34:	movt	r0, #4
   24d38:	ldr	r1, [r0]
   24d3c:	mov	r0, #4
   24d40:	blx	r1
   24d44:	str	r8, [sp, #32]
   24d48:	str	r0, [sp, #40]	; 0x28
   24d4c:	ldr	r1, [sp, #36]	; 0x24
   24d50:	cmp	r1, #0
   24d54:	mov	r2, r1
   24d58:	rsbmi	r2, r1, #0
   24d5c:	cmp	r2, #2
   24d60:	blt	24d6c <__assert_fail@plt+0x13a4c>
   24d64:	mov	r1, #0
   24d68:	str	r1, [sp, #36]	; 0x24
   24d6c:	str	r4, [r0]
   24d70:	ldr	r0, [sp, #60]	; 0x3c
   24d74:	cmp	r1, r0
   24d78:	bne	24db4 <__assert_fail@plt+0x13a94>
   24d7c:	cmp	r1, #0
   24d80:	blt	24dbc <__assert_fail@plt+0x13a9c>
   24d84:	ldr	r0, [sp, #40]	; 0x28
   24d88:	ldr	r2, [sp, #64]	; 0x40
   24d8c:	sub	r0, r0, #4
   24d90:	sub	r2, r2, #4
   24d94:	subs	r3, r1, #1
   24d98:	blt	24e2c <__assert_fail@plt+0x13b0c>
   24d9c:	ldr	r4, [r2, r1, lsl #2]
   24da0:	ldr	r1, [r0, r1, lsl #2]
   24da4:	cmp	r1, r4
   24da8:	mov	r1, r3
   24dac:	beq	24d94 <__assert_fail@plt+0x13a74>
   24db0:	b	24dec <__assert_fail@plt+0x13acc>
   24db4:	blt	24df0 <__assert_fail@plt+0x13ad0>
   24db8:	b	24e2c <__assert_fail@plt+0x13b0c>
   24dbc:	ldr	r0, [sp, #64]	; 0x40
   24dc0:	ldr	r2, [sp, #40]	; 0x28
   24dc4:	rsb	r1, r1, #0
   24dc8:	sub	r0, r0, #4
   24dcc:	sub	r2, r2, #4
   24dd0:	subs	r3, r1, #1
   24dd4:	blt	24e2c <__assert_fail@plt+0x13b0c>
   24dd8:	ldr	r4, [r2, r1, lsl #2]
   24ddc:	ldr	r1, [r0, r1, lsl #2]
   24de0:	cmp	r1, r4
   24de4:	mov	r1, r3
   24de8:	beq	24dd0 <__assert_fail@plt+0x13ab0>
   24dec:	bhi	24e2c <__assert_fail@plt+0x13b0c>
   24df0:	ldr	r0, [sp, #24]
   24df4:	mov	r1, r9
   24df8:	add	r2, sp, #32
   24dfc:	add	r3, sp, #44	; 0x2c
   24e00:	str	r0, [sp]
   24e04:	mov	r0, sl
   24e08:	bl	2500c <__assert_fail@plt+0x13cec>
   24e0c:	add	r6, r6, #1
   24e10:	mov	r7, r0
   24e14:	mov	r0, #0
   24e18:	cmp	r6, r5
   24e1c:	movwlt	r0, #1
   24e20:	tst	r7, r0
   24e24:	bne	24cd8 <__assert_fail@plt+0x139b8>
   24e28:	b	24e34 <__assert_fail@plt+0x13b14>
   24e2c:	cmp	r6, #29
   24e30:	bls	24f0c <__assert_fail@plt+0x13bec>
   24e34:	ldr	r0, [sp, #56]	; 0x38
   24e38:	cmp	r0, #0
   24e3c:	beq	24e58 <__assert_fail@plt+0x13b38>
   24e40:	movw	r1, #8484	; 0x2124
   24e44:	movt	r1, #4
   24e48:	ldr	r2, [r1]
   24e4c:	lsl	r1, r0, #2
   24e50:	ldr	r0, [sp, #64]	; 0x40
   24e54:	blx	r2
   24e58:	ldr	r0, [sp, #44]	; 0x2c
   24e5c:	cmp	r0, #0
   24e60:	beq	24e7c <__assert_fail@plt+0x13b5c>
   24e64:	movw	r1, #8484	; 0x2124
   24e68:	movt	r1, #4
   24e6c:	ldr	r2, [r1]
   24e70:	lsl	r1, r0, #2
   24e74:	ldr	r0, [sp, #52]	; 0x34
   24e78:	blx	r2
   24e7c:	ldr	r0, [sp, #32]
   24e80:	cmp	r0, #0
   24e84:	beq	24ea0 <__assert_fail@plt+0x13b80>
   24e88:	movw	r1, #8484	; 0x2124
   24e8c:	movt	r1, #4
   24e90:	ldr	r2, [r1]
   24e94:	lsl	r1, r0, #2
   24e98:	ldr	r0, [sp, #40]	; 0x28
   24e9c:	blx	r2
   24ea0:	mov	r0, r7
   24ea4:	sub	sp, fp, #28
   24ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24eac:	movw	r0, #6042	; 0x179a
   24eb0:	movw	r1, #1588	; 0x634
   24eb4:	movw	r3, #5997	; 0x176d
   24eb8:	movw	r2, #3410	; 0xd52
   24ebc:	movt	r0, #3
   24ec0:	movt	r1, #3
   24ec4:	movt	r3, #3
   24ec8:	bl	11320 <__assert_fail@plt>
   24ecc:	movw	r0, #3263	; 0xcbf
   24ed0:	movw	r1, #1588	; 0x634
   24ed4:	movw	r3, #3280	; 0xcd0
   24ed8:	movw	r2, #3590	; 0xe06
   24edc:	movt	r0, #3
   24ee0:	movt	r1, #3
   24ee4:	movt	r3, #3
   24ee8:	bl	11320 <__assert_fail@plt>
   24eec:	movw	r0, #5925	; 0x1725
   24ef0:	movw	r1, #1588	; 0x634
   24ef4:	movw	r3, #5939	; 0x1733
   24ef8:	mov	r2, #3504	; 0xdb0
   24efc:	movt	r0, #3
   24f00:	movt	r1, #3
   24f04:	movt	r3, #3
   24f08:	bl	11320 <__assert_fail@plt>
   24f0c:	movw	r0, #3330	; 0xd02
   24f10:	movw	r1, #1588	; 0x634
   24f14:	movw	r3, #3280	; 0xcd0
   24f18:	movw	r2, #3629	; 0xe2d
   24f1c:	movt	r0, #3
   24f20:	movt	r1, #3
   24f24:	movt	r3, #3
   24f28:	bl	11320 <__assert_fail@plt>
   24f2c:	movw	r0, #4519	; 0x11a7
   24f30:	movw	r1, #1588	; 0x634
   24f34:	movw	r3, #4436	; 0x1154
   24f38:	mov	r2, #716	; 0x2cc
   24f3c:	movt	r0, #3
   24f40:	movt	r1, #3
   24f44:	movt	r3, #3
   24f48:	bl	11320 <__assert_fail@plt>
   24f4c:	movw	r0, #6049	; 0x17a1
   24f50:	movw	r1, #1588	; 0x634
   24f54:	movw	r3, #6056	; 0x17a8
   24f58:	movw	r2, #3442	; 0xd72
   24f5c:	movt	r0, #3
   24f60:	movt	r1, #3
   24f64:	movt	r3, #3
   24f68:	bl	11320 <__assert_fail@plt>
   24f6c:	movw	r0, #6147	; 0x1803
   24f70:	movw	r1, #1588	; 0x634
   24f74:	movw	r3, #6056	; 0x17a8
   24f78:	movw	r2, #3443	; 0xd73
   24f7c:	movt	r0, #3
   24f80:	movt	r1, #3
   24f84:	movt	r3, #3
   24f88:	bl	11320 <__assert_fail@plt>
   24f8c:	movw	r0, #6169	; 0x1819
   24f90:	movw	r1, #1588	; 0x634
   24f94:	movw	r3, #6056	; 0x17a8
   24f98:	movw	r2, #3444	; 0xd74
   24f9c:	movt	r0, #3
   24fa0:	movt	r1, #3
   24fa4:	movt	r3, #3
   24fa8:	bl	11320 <__assert_fail@plt>
   24fac:	movw	r0, #6191	; 0x182f
   24fb0:	movw	r1, #1588	; 0x634
   24fb4:	movw	r3, #6056	; 0x17a8
   24fb8:	movw	r2, #3445	; 0xd75
   24fbc:	movt	r0, #3
   24fc0:	movt	r1, #3
   24fc4:	movt	r3, #3
   24fc8:	bl	11320 <__assert_fail@plt>
   24fcc:	movw	r0, #5925	; 0x1725
   24fd0:	movw	r1, #1588	; 0x634
   24fd4:	movw	r3, #6056	; 0x17a8
   24fd8:	movw	r2, #3446	; 0xd76
   24fdc:	movt	r0, #3
   24fe0:	movt	r1, #3
   24fe4:	movt	r3, #3
   24fe8:	bl	11320 <__assert_fail@plt>
   24fec:	movw	r0, #6279	; 0x1887
   24ff0:	movw	r1, #1588	; 0x634
   24ff4:	movw	r3, #6285	; 0x188d
   24ff8:	movw	r2, #1210	; 0x4ba
   24ffc:	movt	r0, #3
   25000:	movt	r1, #3
   25004:	movt	r3, #3
   25008:	bl	11320 <__assert_fail@plt>
   2500c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25010:	add	fp, sp, #28
   25014:	sub	sp, sp, #12
   25018:	ldr	r6, [fp, #8]
   2501c:	cmp	r6, #0
   25020:	beq	25208 <__assert_fail@plt+0x13ee8>
   25024:	mov	r9, r0
   25028:	mov	r5, r1
   2502c:	mov	r4, r2
   25030:	mov	r0, r2
   25034:	mov	r1, r2
   25038:	mov	r2, r3
   2503c:	mov	r3, r9
   25040:	bl	21cf8 <__assert_fail@plt+0x109d8>
   25044:	ldr	r0, [r4, #4]
   25048:	cmp	r0, #0
   2504c:	blt	25088 <__assert_fail@plt+0x13d68>
   25050:	cmp	r0, #1
   25054:	bgt	25088 <__assert_fail@plt+0x13d68>
   25058:	cmp	r0, #0
   2505c:	beq	25088 <__assert_fail@plt+0x13d68>
   25060:	ldr	r1, [r4, #8]
   25064:	mov	r2, #0
   25068:	mov	sl, #1
   2506c:	ldr	r1, [r1]
   25070:	cmp	r1, #1
   25074:	clz	r1, r1
   25078:	movwhi	r2, #1
   2507c:	lsr	r1, r1, #5
   25080:	cmp	r2, r1
   25084:	beq	251fc <__assert_fail@plt+0x13edc>
   25088:	ldr	r1, [r5, #4]
   2508c:	cmp	r0, r1
   25090:	bne	25104 <__assert_fail@plt+0x13de4>
   25094:	cmp	r0, #0
   25098:	blt	250d0 <__assert_fail@plt+0x13db0>
   2509c:	ldr	r1, [r4, #8]
   250a0:	ldr	r2, [r5, #8]
   250a4:	sub	r1, r1, #4
   250a8:	sub	r2, r2, #4
   250ac:	cmp	r0, #1
   250b0:	blt	251f8 <__assert_fail@plt+0x13ed8>
   250b4:	sub	r3, r0, #1
   250b8:	ldr	r7, [r2, r0, lsl #2]
   250bc:	ldr	r0, [r1, r0, lsl #2]
   250c0:	cmp	r0, r7
   250c4:	mov	r0, r3
   250c8:	beq	250ac <__assert_fail@plt+0x13d8c>
   250cc:	b	25104 <__assert_fail@plt+0x13de4>
   250d0:	ldr	r2, [r4, #8]
   250d4:	rsb	r1, r0, #0
   250d8:	ldr	r0, [r5, #8]
   250dc:	sub	r0, r0, #4
   250e0:	sub	r2, r2, #4
   250e4:	cmp	r1, #1
   250e8:	blt	251f8 <__assert_fail@plt+0x13ed8>
   250ec:	sub	r3, r1, #1
   250f0:	ldr	r7, [r2, r1, lsl #2]
   250f4:	ldr	r1, [r0, r1, lsl #2]
   250f8:	cmp	r1, r7
   250fc:	mov	r1, r3
   25100:	beq	250e4 <__assert_fail@plt+0x13dc4>
   25104:	subs	r7, r6, #1
   25108:	mov	sl, #0
   2510c:	beq	251fc <__assert_fail@plt+0x13edc>
   25110:	mov	r8, #1
   25114:	movw	r0, #8476	; 0x211c
   25118:	str	r8, [sp, #4]
   2511c:	movt	r0, #4
   25120:	ldr	r1, [r0]
   25124:	mov	r0, #4
   25128:	blx	r1
   2512c:	str	r8, [sp]
   25130:	mov	r6, r0
   25134:	str	r0, [sp, #8]
   25138:	mov	r0, #2
   2513c:	mov	r1, r4
   25140:	mov	r2, sp
   25144:	mov	r3, r9
   25148:	str	r0, [r6]
   2514c:	mov	r0, r4
   25150:	bl	21cf8 <__assert_fail@plt+0x109d8>
   25154:	movw	r0, #8484	; 0x2124
   25158:	mov	r1, #4
   2515c:	movt	r0, #4
   25160:	ldr	r2, [r0]
   25164:	mov	r0, r6
   25168:	blx	r2
   2516c:	ldr	r0, [r4, #4]
   25170:	ldr	r1, [r5, #4]
   25174:	cmp	r0, r1
   25178:	bne	251ec <__assert_fail@plt+0x13ecc>
   2517c:	cmp	r0, #0
   25180:	blt	251b8 <__assert_fail@plt+0x13e98>
   25184:	ldr	r1, [r4, #8]
   25188:	ldr	r2, [r5, #8]
   2518c:	sub	r1, r1, #4
   25190:	sub	r2, r2, #4
   25194:	cmp	r0, #1
   25198:	blt	251f8 <__assert_fail@plt+0x13ed8>
   2519c:	sub	r3, r0, #1
   251a0:	ldr	r6, [r2, r0, lsl #2]
   251a4:	ldr	r0, [r1, r0, lsl #2]
   251a8:	cmp	r0, r6
   251ac:	mov	r0, r3
   251b0:	beq	25194 <__assert_fail@plt+0x13e74>
   251b4:	b	251ec <__assert_fail@plt+0x13ecc>
   251b8:	ldr	r2, [r4, #8]
   251bc:	rsb	r1, r0, #0
   251c0:	ldr	r0, [r5, #8]
   251c4:	sub	r0, r0, #4
   251c8:	sub	r2, r2, #4
   251cc:	cmp	r1, #1
   251d0:	blt	251f8 <__assert_fail@plt+0x13ed8>
   251d4:	sub	r3, r1, #1
   251d8:	ldr	r6, [r2, r1, lsl #2]
   251dc:	ldr	r1, [r0, r1, lsl #2]
   251e0:	cmp	r1, r6
   251e4:	mov	r1, r3
   251e8:	beq	251cc <__assert_fail@plt+0x13eac>
   251ec:	subs	r7, r7, #1
   251f0:	bne	25114 <__assert_fail@plt+0x13df4>
   251f4:	b	251fc <__assert_fail@plt+0x13edc>
   251f8:	mov	sl, #1
   251fc:	mov	r0, sl
   25200:	sub	sp, fp, #28
   25204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25208:	movw	r0, #5804	; 0x16ac
   2520c:	movw	r1, #1588	; 0x634
   25210:	movw	r3, #5810	; 0x16b2
   25214:	movw	r2, #3550	; 0xdde
   25218:	movt	r0, #3
   2521c:	movt	r1, #3
   25220:	movt	r3, #3
   25224:	bl	11320 <__assert_fail@plt>
   25228:	ldr	r3, [r0, #4]
   2522c:	cmp	r3, #0
   25230:	mov	r2, r3
   25234:	rsbmi	r2, r3, #0
   25238:	push	{fp, lr}
   2523c:	mov	fp, sp
   25240:	cmp	r2, r1, lsr #5
   25244:	lsrle	r0, r3, #31
   25248:	pople	{fp, pc}
   2524c:	ldr	ip, [r0, #8]
   25250:	lsr	r2, r1, #5
   25254:	and	r1, r1, #31
   25258:	mov	r0, #1
   2525c:	cmn	r3, #1
   25260:	ldr	lr, [ip, r2, lsl #2]
   25264:	and	r0, r0, lr, lsr r1
   25268:	ble	25270 <__assert_fail@plt+0x13f50>
   2526c:	pop	{fp, pc}
   25270:	cmp	r1, #0
   25274:	beq	25288 <__assert_fail@plt+0x13f68>
   25278:	rsb	r1, r1, #32
   2527c:	mov	r3, #0
   25280:	cmp	r3, lr, lsl r1
   25284:	bne	252a4 <__assert_fail@plt+0x13f84>
   25288:	sub	r1, ip, #4
   2528c:	subs	r3, r2, #1
   25290:	poplt	{fp, pc}
   25294:	ldr	r2, [r1, r2, lsl #2]
   25298:	cmp	r2, #0
   2529c:	mov	r2, r3
   252a0:	beq	2528c <__assert_fail@plt+0x13f6c>
   252a4:	eor	r0, r0, #1
   252a8:	pop	{fp, pc}
   252ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252b0:	add	fp, sp, #28
   252b4:	sub	sp, sp, #4
   252b8:	mov	sl, r0
   252bc:	and	r0, r1, #31
   252c0:	mov	r2, #1
   252c4:	lsr	r7, r1, #5
   252c8:	lsl	r6, r2, r0
   252cc:	ldr	r2, [sl, #4]
   252d0:	cmp	r2, #0
   252d4:	mov	r5, r2
   252d8:	rsbmi	r5, r2, #0
   252dc:	cmp	r5, r1, lsr #5
   252e0:	ble	25368 <__assert_fail@plt+0x14048>
   252e4:	sub	r0, r5, r7
   252e8:	cmp	r0, #1
   252ec:	blt	2546c <__assert_fail@plt+0x1414c>
   252f0:	ldr	r0, [sl, #8]
   252f4:	mov	r1, #0
   252f8:	mov	r3, r6
   252fc:	ldr	r6, [r0, r7, lsl #2]
   25300:	adds	r4, r6, r3
   25304:	str	r4, [r0, r7, lsl #2]
   25308:	add	r7, r7, #1
   2530c:	adc	r6, r1, #0
   25310:	cmp	r5, r7
   25314:	bne	252f8 <__assert_fail@plt+0x13fd8>
   25318:	mov	r6, #0
   2531c:	cmp	r4, r3
   25320:	movwcc	r6, #1
   25324:	bcs	253b4 <__assert_fail@plt+0x14094>
   25328:	ldr	r1, [sl]
   2532c:	add	r8, r5, #1
   25330:	cmp	r5, r1
   25334:	blt	25454 <__assert_fail@plt+0x14134>
   25338:	cmp	r8, #1
   2533c:	mov	r7, r8
   25340:	movls	r7, #1
   25344:	cmp	r1, #0
   25348:	beq	2541c <__assert_fail@plt+0x140fc>
   2534c:	movw	r2, #8480	; 0x2120
   25350:	lsl	r1, r1, #2
   25354:	movt	r2, #4
   25358:	ldr	r3, [r2]
   2535c:	lsl	r2, r7, #2
   25360:	blx	r3
   25364:	b	25430 <__assert_fail@plt+0x14110>
   25368:	ldr	r1, [sl]
   2536c:	add	r8, r7, #1
   25370:	cmp	r7, r1
   25374:	bge	25380 <__assert_fail@plt+0x14060>
   25378:	ldr	r0, [sl, #8]
   2537c:	b	253f4 <__assert_fail@plt+0x140d4>
   25380:	cmp	r8, #1
   25384:	mov	r9, r8
   25388:	movls	r9, #1
   2538c:	cmp	r1, #0
   25390:	beq	253bc <__assert_fail@plt+0x1409c>
   25394:	movw	r0, #8480	; 0x2120
   25398:	lsl	r1, r1, #2
   2539c:	lsl	r2, r9, #2
   253a0:	movt	r0, #4
   253a4:	ldr	r3, [r0]
   253a8:	ldr	r0, [sl, #8]
   253ac:	blx	r3
   253b0:	b	253d0 <__assert_fail@plt+0x140b0>
   253b4:	mov	r8, r5
   253b8:	b	25458 <__assert_fail@plt+0x14138>
   253bc:	movw	r0, #8476	; 0x211c
   253c0:	movt	r0, #4
   253c4:	ldr	r1, [r0]
   253c8:	lsl	r0, r9, #2
   253cc:	blx	r1
   253d0:	str	r0, [sl, #8]
   253d4:	str	r9, [sl]
   253d8:	ldr	r2, [sl, #4]
   253dc:	cmp	r2, #0
   253e0:	mov	r1, r2
   253e4:	rsbmi	r1, r2, #0
   253e8:	cmp	r1, r9
   253ec:	movgt	r2, #0
   253f0:	strgt	r2, [sl, #4]
   253f4:	cmp	r5, r7
   253f8:	str	r6, [r0, r7, lsl #2]
   253fc:	bcs	25458 <__assert_fail@plt+0x14138>
   25400:	sub	r1, r7, r5
   25404:	add	r0, r0, r5, lsl #2
   25408:	lsl	r2, r1, #2
   2540c:	mov	r1, #0
   25410:	bl	11248 <memset@plt>
   25414:	ldr	r2, [sl, #4]
   25418:	b	25458 <__assert_fail@plt+0x14138>
   2541c:	movw	r0, #8476	; 0x211c
   25420:	movt	r0, #4
   25424:	ldr	r1, [r0]
   25428:	lsl	r0, r7, #2
   2542c:	blx	r1
   25430:	str	r0, [sl, #8]
   25434:	str	r7, [sl]
   25438:	ldr	r2, [sl, #4]
   2543c:	cmp	r2, #0
   25440:	mov	r1, r2
   25444:	rsbmi	r1, r2, #0
   25448:	cmp	r1, r7
   2544c:	movgt	r2, #0
   25450:	strgt	r2, [sl, #4]
   25454:	str	r6, [r0, r5, lsl #2]
   25458:	cmp	r2, #0
   2545c:	rsblt	r8, r8, #0
   25460:	str	r8, [sl, #4]
   25464:	sub	sp, fp, #28
   25468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2546c:	movw	r0, #4914	; 0x1332
   25470:	movw	r1, #1588	; 0x634
   25474:	movw	r3, #1605	; 0x645
   25478:	movw	r2, #442	; 0x1ba
   2547c:	movt	r0, #3
   25480:	movt	r1, #3
   25484:	movt	r3, #3
   25488:	bl	11320 <__assert_fail@plt>
   2548c:	push	{r4, r5, r6, r7, fp, lr}
   25490:	add	fp, sp, #16
   25494:	ldr	lr, [r0, #4]
   25498:	ldr	ip, [r0, #8]
   2549c:	cmp	lr, #0
   254a0:	mov	r3, lr
   254a4:	rsbmi	r3, lr, #0
   254a8:	cmp	r3, r1, lsr #5
   254ac:	ble	2552c <__assert_fail@plt+0x1420c>
   254b0:	lsr	r4, r1, #5
   254b4:	sub	r2, r3, r4
   254b8:	cmp	r2, #1
   254bc:	blt	2554c <__assert_fail@plt+0x1422c>
   254c0:	and	r1, r1, #31
   254c4:	mov	r5, #1
   254c8:	add	r4, ip, r4, lsl #2
   254cc:	lsl	r1, r5, r1
   254d0:	ldr	r6, [r4]
   254d4:	mov	r5, r1
   254d8:	cmp	r6, r1
   254dc:	mov	r1, #0
   254e0:	sub	r7, r6, r5
   254e4:	movwcc	r1, #1
   254e8:	str	r7, [r4], #4
   254ec:	subs	r2, r2, #1
   254f0:	bne	254d0 <__assert_fail@plt+0x141b0>
   254f4:	cmp	r6, r5
   254f8:	bcc	2556c <__assert_fail@plt+0x1424c>
   254fc:	sub	r2, ip, #4
   25500:	mov	r1, r3
   25504:	cmp	r3, #1
   25508:	blt	2551c <__assert_fail@plt+0x141fc>
   2550c:	ldr	r7, [r2, r1, lsl #2]
   25510:	sub	r3, r1, #1
   25514:	cmp	r7, #0
   25518:	beq	25500 <__assert_fail@plt+0x141e0>
   2551c:	cmp	lr, #0
   25520:	rsblt	r1, r1, #0
   25524:	str	r1, [r0, #4]
   25528:	pop	{r4, r5, r6, r7, fp, pc}
   2552c:	movw	r0, #6213	; 0x1845
   25530:	movw	r1, #1588	; 0x634
   25534:	movw	r3, #6229	; 0x1855
   25538:	movw	r2, #3753	; 0xea9
   2553c:	movt	r0, #3
   25540:	movt	r1, #3
   25544:	movt	r3, #3
   25548:	bl	11320 <__assert_fail@plt>
   2554c:	movw	r0, #4914	; 0x1332
   25550:	movw	r1, #1588	; 0x634
   25554:	movw	r3, #1745	; 0x6d1
   25558:	movw	r2, #493	; 0x1ed
   2555c:	movt	r0, #3
   25560:	movt	r1, #3
   25564:	movt	r3, #3
   25568:	bl	11320 <__assert_fail@plt>
   2556c:	movw	r0, #2569	; 0xa09
   25570:	movw	r1, #1588	; 0x634
   25574:	movw	r3, #6229	; 0x1855
   25578:	movw	r2, #3756	; 0xeac
   2557c:	movt	r0, #3
   25580:	movt	r1, #3
   25584:	movt	r3, #3
   25588:	bl	11320 <__assert_fail@plt>
   2558c:	ldr	r2, [r0, #4]
   25590:	cmp	r2, #0
   25594:	mov	r3, r2
   25598:	rsbmi	r3, r2, #0
   2559c:	push	{r4, r5, r6, sl, fp, lr}
   255a0:	add	fp, sp, #16
   255a4:	cmp	r3, r1, lsr #5
   255a8:	ble	25608 <__assert_fail@plt+0x142e8>
   255ac:	ldr	lr, [r0, #8]
   255b0:	lsr	r6, r1, #5
   255b4:	and	r5, r1, #31
   255b8:	mov	r3, #1
   255bc:	cmn	r2, #1
   255c0:	ldr	r4, [lr, r6, lsl #2]
   255c4:	and	ip, r3, r4, lsr r5
   255c8:	bgt	2560c <__assert_fail@plt+0x142ec>
   255cc:	cmp	r5, #0
   255d0:	beq	255e4 <__assert_fail@plt+0x142c4>
   255d4:	rsb	r3, r5, #32
   255d8:	mov	r5, #0
   255dc:	cmp	r5, r4, lsl r3
   255e0:	bne	25600 <__assert_fail@plt+0x142e0>
   255e4:	sub	r4, lr, #4
   255e8:	subs	r3, r6, #1
   255ec:	blt	2560c <__assert_fail@plt+0x142ec>
   255f0:	ldr	r6, [r4, r6, lsl #2]
   255f4:	cmp	r6, #0
   255f8:	mov	r6, r3
   255fc:	beq	255e8 <__assert_fail@plt+0x142c8>
   25600:	eor	ip, ip, #1
   25604:	b	2560c <__assert_fail@plt+0x142ec>
   25608:	lsr	ip, r2, #31
   2560c:	cmp	ip, #0
   25610:	pop	{r4, r5, r6, sl, fp, lr}
   25614:	bxeq	lr
   25618:	cmp	r2, #0
   2561c:	blt	25624 <__assert_fail@plt+0x14304>
   25620:	b	2548c <__assert_fail@plt+0x1416c>
   25624:	b	252ac <__assert_fail@plt+0x13f8c>
   25628:	ldr	r2, [r0, #4]
   2562c:	cmp	r2, #0
   25630:	mov	r3, r2
   25634:	rsbmi	r3, r2, #0
   25638:	push	{r4, r5, r6, sl, fp, lr}
   2563c:	add	fp, sp, #16
   25640:	cmp	r3, r1, lsr #5
   25644:	ble	256a4 <__assert_fail@plt+0x14384>
   25648:	ldr	lr, [r0, #8]
   2564c:	lsr	r6, r1, #5
   25650:	and	r5, r1, #31
   25654:	mov	r3, #1
   25658:	cmn	r2, #1
   2565c:	ldr	r4, [lr, r6, lsl #2]
   25660:	and	ip, r3, r4, lsr r5
   25664:	bgt	256a8 <__assert_fail@plt+0x14388>
   25668:	cmp	r5, #0
   2566c:	beq	25680 <__assert_fail@plt+0x14360>
   25670:	rsb	r3, r5, #32
   25674:	mov	r5, #0
   25678:	cmp	r5, r4, lsl r3
   2567c:	bne	2569c <__assert_fail@plt+0x1437c>
   25680:	sub	r4, lr, #4
   25684:	subs	r3, r6, #1
   25688:	blt	256a8 <__assert_fail@plt+0x14388>
   2568c:	ldr	r6, [r4, r6, lsl #2]
   25690:	cmp	r6, #0
   25694:	mov	r6, r3
   25698:	beq	25684 <__assert_fail@plt+0x14364>
   2569c:	eor	ip, ip, #1
   256a0:	b	256a8 <__assert_fail@plt+0x14388>
   256a4:	lsr	ip, r2, #31
   256a8:	cmp	ip, r2, lsr #31
   256ac:	pop	{r4, r5, r6, sl, fp, lr}
   256b0:	bne	256b8 <__assert_fail@plt+0x14398>
   256b4:	b	252ac <__assert_fail@plt+0x13f8c>
   256b8:	b	2548c <__assert_fail@plt+0x1416c>
   256bc:	push	{r4, r5, r6, r7, fp, lr}
   256c0:	add	fp, sp, #16
   256c4:	sub	sp, sp, #16
   256c8:	mov	r5, r0
   256cc:	movw	r0, #8476	; 0x211c
   256d0:	mov	r4, r1
   256d4:	mov	r7, #1
   256d8:	movt	r0, #4
   256dc:	str	r7, [sp, #8]
   256e0:	ldr	r1, [r0]
   256e4:	mov	r0, #4
   256e8:	blx	r1
   256ec:	str	r7, [sp, #4]
   256f0:	str	r0, [sp, #12]
   256f4:	mov	r6, r0
   256f8:	str	r7, [r0]
   256fc:	add	r2, sp, #4
   25700:	mov	r0, r5
   25704:	mov	r1, r4
   25708:	bl	1d388 <__assert_fail@plt+0xc068>
   2570c:	movw	r0, #8484	; 0x2124
   25710:	mov	r1, #4
   25714:	movt	r0, #4
   25718:	ldr	r2, [r0]
   2571c:	mov	r0, r6
   25720:	blx	r2
   25724:	ldr	r0, [r5, #4]
   25728:	rsb	r0, r0, #0
   2572c:	str	r0, [r5, #4]
   25730:	sub	sp, fp, #16
   25734:	pop	{r4, r5, r6, r7, fp, pc}
   25738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2573c:	add	fp, sp, #28
   25740:	sub	sp, sp, #36	; 0x24
   25744:	mov	r4, r0
   25748:	ldr	r0, [r2, #4]
   2574c:	mov	r5, r2
   25750:	ldr	r2, [r1, #4]
   25754:	mov	r7, r1
   25758:	cmp	r0, #0
   2575c:	rsbmi	r0, r0, #0
   25760:	cmp	r2, #0
   25764:	rsbmi	r2, r2, #0
   25768:	cmp	r2, r0
   2576c:	movlt	r7, r5
   25770:	movlt	r5, r1
   25774:	mov	r1, r0
   25778:	movlt	r1, r2
   2577c:	cmp	r1, #0
   25780:	beq	257f0 <__assert_fail@plt+0x144d0>
   25784:	ldr	r8, [r5, #4]
   25788:	cmp	r2, r0
   2578c:	ldr	r3, [r7, #4]
   25790:	str	r1, [sp]
   25794:	movlt	r2, r0
   25798:	mov	r0, #0
   2579c:	cmp	r0, r8, asr #31
   257a0:	and	r9, r8, r3
   257a4:	moveq	r2, r1
   257a8:	ldr	r1, [r4]
   257ac:	add	r6, r2, r9, lsr #31
   257b0:	str	r2, [sp, #12]
   257b4:	cmp	r6, r1
   257b8:	ble	257f8 <__assert_fail@plt+0x144d8>
   257bc:	cmp	r6, #1
   257c0:	mov	sl, r3
   257c4:	movls	r6, #1
   257c8:	cmp	r1, #0
   257cc:	beq	25800 <__assert_fail@plt+0x144e0>
   257d0:	movw	r0, #8480	; 0x2120
   257d4:	lsl	r1, r1, #2
   257d8:	lsl	r2, r6, #2
   257dc:	movt	r0, #4
   257e0:	ldr	r3, [r0]
   257e4:	ldr	r0, [r4, #8]
   257e8:	blx	r3
   257ec:	b	25814 <__assert_fail@plt+0x144f4>
   257f0:	mov	r0, #0
   257f4:	b	259a4 <__assert_fail@plt+0x14684>
   257f8:	ldr	r0, [r4, #8]
   257fc:	b	25838 <__assert_fail@plt+0x14518>
   25800:	movw	r0, #8476	; 0x211c
   25804:	movt	r0, #4
   25808:	ldr	r1, [r0]
   2580c:	lsl	r0, r6, #2
   25810:	blx	r1
   25814:	str	r0, [r4, #8]
   25818:	str	r6, [r4]
   2581c:	mov	r3, sl
   25820:	ldr	r1, [r4, #4]
   25824:	cmp	r1, #0
   25828:	rsbmi	r1, r1, #0
   2582c:	cmp	r1, r6
   25830:	movgt	r1, #0
   25834:	strgt	r1, [r4, #4]
   25838:	asr	r2, r3, #31
   2583c:	asr	r1, r9, #31
   25840:	lsr	sl, r9, #31
   25844:	ldr	r9, [sp]
   25848:	str	r4, [sp, #16]
   2584c:	lsr	r4, r3, #31
   25850:	mov	r3, #0
   25854:	mov	r6, r0
   25858:	str	r0, [sp, #8]
   2585c:	str	r2, [sp, #24]
   25860:	ldr	r2, [r5, #8]
   25864:	str	r1, [sp, #32]
   25868:	asr	r1, r8, #31
   2586c:	ldr	r5, [r7, #8]
   25870:	mov	r7, #0
   25874:	str	sl, [sp, #4]
   25878:	str	r1, [sp, #28]
   2587c:	lsr	r1, r8, #31
   25880:	str	r2, [sp, #20]
   25884:	ldr	r2, [sp, #28]
   25888:	mov	r8, r1
   2588c:	ldr	r0, [r5], #4
   25890:	ldr	r1, [sp, #24]
   25894:	mov	ip, sl
   25898:	eor	r0, r0, r1
   2589c:	ldr	r1, [sp, #20]
   258a0:	adds	r0, r0, r4
   258a4:	adc	r4, r3, #0
   258a8:	ldr	r1, [r1, r7, lsl #2]
   258ac:	add	r7, r7, #1
   258b0:	eor	r1, r1, r2
   258b4:	adds	lr, r1, r8
   258b8:	ldr	r1, [sp, #32]
   258bc:	and	r0, lr, r0
   258c0:	eor	r0, r0, r1
   258c4:	adc	r1, r3, #0
   258c8:	adds	r0, r0, sl
   258cc:	adc	sl, r3, #0
   258d0:	str	r0, [r6], #4
   258d4:	cmp	r7, r9
   258d8:	bcc	25888 <__assert_fail@plt+0x14568>
   258dc:	ldr	sl, [sp, #24]
   258e0:	ldr	r9, [sp, #28]
   258e4:	ldr	r2, [sp, #32]
   258e8:	mov	r1, #0
   258ec:	cmp	r0, ip
   258f0:	movwcc	r1, #1
   258f4:	cmp	lr, r8
   258f8:	bcc	259b0 <__assert_fail@plt+0x14690>
   258fc:	ldr	ip, [sp, #12]
   25900:	cmp	r7, ip
   25904:	bge	25958 <__assert_fail@plt+0x14638>
   25908:	mov	lr, r2
   2590c:	mov	r8, #0
   25910:	mov	r3, ip
   25914:	ldr	r0, [r5], #4
   25918:	mov	r2, r1
   2591c:	and	r1, r4, #1
   25920:	sub	r3, r3, #1
   25924:	eor	r0, r0, sl
   25928:	adds	r0, r0, r1
   2592c:	and	r0, r0, r9
   25930:	adc	r4, r8, #0
   25934:	eor	r0, r0, lr
   25938:	adds	r0, r0, r2
   2593c:	adc	r1, r8, #0
   25940:	str	r0, [r6], #4
   25944:	cmp	r7, r3
   25948:	bne	25914 <__assert_fail@plt+0x145f4>
   2594c:	mov	r1, #0
   25950:	cmp	r0, r2
   25954:	movwcc	r1, #1
   25958:	ldr	r4, [sp, #16]
   2595c:	cmp	r1, #0
   25960:	beq	25974 <__assert_fail@plt+0x14654>
   25964:	ldr	r0, [sp, #8]
   25968:	str	r1, [r0, ip, lsl #2]
   2596c:	add	r0, ip, #1
   25970:	b	25998 <__assert_fail@plt+0x14678>
   25974:	ldr	r0, [sp, #8]
   25978:	sub	r1, r0, #4
   2597c:	mov	r0, ip
   25980:	cmp	ip, #1
   25984:	blt	25998 <__assert_fail@plt+0x14678>
   25988:	ldr	r2, [r1, r0, lsl #2]
   2598c:	sub	ip, r0, #1
   25990:	cmp	r2, #0
   25994:	beq	2597c <__assert_fail@plt+0x1465c>
   25998:	ldr	r1, [sp, #4]
   2599c:	cmp	r1, #0
   259a0:	rsbne	r0, r0, #0
   259a4:	str	r0, [r4, #4]
   259a8:	sub	sp, fp, #28
   259ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259b0:	movw	r0, #3338	; 0xd0a
   259b4:	movw	r1, #1588	; 0x634
   259b8:	movw	r3, #3346	; 0xd12
   259bc:	movw	r2, #3854	; 0xf0e
   259c0:	movt	r0, #3
   259c4:	movt	r1, #3
   259c8:	movt	r3, #3
   259cc:	bl	11320 <__assert_fail@plt>
   259d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259d4:	add	fp, sp, #28
   259d8:	sub	sp, sp, #36	; 0x24
   259dc:	mov	r8, r0
   259e0:	ldr	r0, [r2, #4]
   259e4:	mov	r6, r2
   259e8:	ldr	r2, [r1, #4]
   259ec:	mov	sl, r1
   259f0:	cmp	r0, #0
   259f4:	rsbmi	r0, r0, #0
   259f8:	cmp	r2, #0
   259fc:	rsbmi	r2, r2, #0
   25a00:	cmp	r2, r0
   25a04:	movlt	sl, r6
   25a08:	movlt	r6, r1
   25a0c:	mov	r1, r0
   25a10:	movlt	r1, r2
   25a14:	cmp	r1, #0
   25a18:	beq	25a84 <__assert_fail@plt+0x14764>
   25a1c:	ldr	r4, [r6, #4]
   25a20:	cmp	r2, r0
   25a24:	ldr	r5, [sl, #4]
   25a28:	str	r1, [sp, #20]
   25a2c:	movlt	r2, r0
   25a30:	mov	r0, #0
   25a34:	cmp	r0, r4, asr #31
   25a38:	orr	r7, r4, r5
   25a3c:	movne	r2, r1
   25a40:	ldr	r1, [r8]
   25a44:	add	r9, r2, r7, lsr #31
   25a48:	str	r2, [sp, #8]
   25a4c:	cmp	r9, r1
   25a50:	ble	25ad8 <__assert_fail@plt+0x147b8>
   25a54:	cmp	r9, #1
   25a58:	movls	r9, #1
   25a5c:	cmp	r1, #0
   25a60:	beq	25ae0 <__assert_fail@plt+0x147c0>
   25a64:	movw	r0, #8480	; 0x2120
   25a68:	lsl	r1, r1, #2
   25a6c:	lsl	r2, r9, #2
   25a70:	movt	r0, #4
   25a74:	ldr	r3, [r0]
   25a78:	ldr	r0, [r8, #8]
   25a7c:	blx	r3
   25a80:	b	25af4 <__assert_fail@plt+0x147d4>
   25a84:	cmp	sl, r8
   25a88:	beq	25d48 <__assert_fail@plt+0x14a28>
   25a8c:	ldr	r5, [sl, #4]
   25a90:	ldr	r1, [r8]
   25a94:	cmp	r5, #0
   25a98:	rsbmi	r5, r5, #0
   25a9c:	cmp	r5, r1
   25aa0:	ble	25c8c <__assert_fail@plt+0x1496c>
   25aa4:	cmp	r5, #1
   25aa8:	mov	r4, r5
   25aac:	movle	r4, #1
   25ab0:	cmp	r1, #0
   25ab4:	beq	25c9c <__assert_fail@plt+0x1497c>
   25ab8:	movw	r0, #8480	; 0x2120
   25abc:	lsl	r1, r1, #2
   25ac0:	lsl	r2, r4, #2
   25ac4:	movt	r0, #4
   25ac8:	ldr	r3, [r0]
   25acc:	ldr	r0, [r8, #8]
   25ad0:	blx	r3
   25ad4:	b	25cb0 <__assert_fail@plt+0x14990>
   25ad8:	ldr	r0, [r8, #8]
   25adc:	b	25b14 <__assert_fail@plt+0x147f4>
   25ae0:	movw	r0, #8476	; 0x211c
   25ae4:	movt	r0, #4
   25ae8:	ldr	r1, [r0]
   25aec:	lsl	r0, r9, #2
   25af0:	blx	r1
   25af4:	str	r0, [r8, #8]
   25af8:	str	r9, [r8]
   25afc:	ldr	r1, [r8, #4]
   25b00:	cmp	r1, #0
   25b04:	rsbmi	r1, r1, #0
   25b08:	cmp	r1, r9
   25b0c:	movgt	r1, #0
   25b10:	strgt	r1, [r8, #4]
   25b14:	asr	r2, r4, #31
   25b18:	asr	r1, r7, #31
   25b1c:	lsr	ip, r4, #31
   25b20:	mov	r3, #0
   25b24:	mov	r4, #0
   25b28:	str	r8, [sp, #12]
   25b2c:	str	r0, [sp, #4]
   25b30:	str	r2, [sp, #28]
   25b34:	asr	r2, r5, #31
   25b38:	str	r1, [sp, #32]
   25b3c:	lsr	r1, r7, #31
   25b40:	lsr	r5, r5, #31
   25b44:	mov	r7, r0
   25b48:	str	r2, [sp, #24]
   25b4c:	ldr	r2, [r6, #8]
   25b50:	ldr	r6, [sl, #8]
   25b54:	mov	sl, r1
   25b58:	str	r1, [sp]
   25b5c:	str	r2, [sp, #16]
   25b60:	ldr	r2, [sp, #28]
   25b64:	ldr	r0, [r6], #4
   25b68:	ldr	r1, [sp, #24]
   25b6c:	mov	r8, ip
   25b70:	mov	r9, sl
   25b74:	eor	r0, r0, r1
   25b78:	ldr	r1, [sp, #16]
   25b7c:	adds	r0, r0, r5
   25b80:	adc	r5, r3, #0
   25b84:	ldr	r1, [r1, r4, lsl #2]
   25b88:	add	r4, r4, #1
   25b8c:	eor	r1, r1, r2
   25b90:	adds	lr, r1, ip
   25b94:	ldr	r1, [sp, #32]
   25b98:	orr	r0, lr, r0
   25b9c:	adc	ip, r3, #0
   25ba0:	eor	r0, r0, r1
   25ba4:	ldr	r1, [sp, #20]
   25ba8:	adds	r0, r0, sl
   25bac:	adc	sl, r3, #0
   25bb0:	str	r0, [r7], #4
   25bb4:	cmp	r4, r1
   25bb8:	bcc	25b64 <__assert_fail@plt+0x14844>
   25bbc:	ldr	r2, [sp, #24]
   25bc0:	ldr	sl, [sp, #28]
   25bc4:	ldr	r1, [sp, #32]
   25bc8:	mov	ip, #0
   25bcc:	cmp	r0, r9
   25bd0:	movwcc	ip, #1
   25bd4:	cmp	lr, r8
   25bd8:	bcc	25d50 <__assert_fail@plt+0x14a30>
   25bdc:	ldr	lr, [sp, #8]
   25be0:	cmp	r4, lr
   25be4:	bge	25c40 <__assert_fail@plt+0x14920>
   25be8:	mov	r8, #0
   25bec:	mov	r3, lr
   25bf0:	mov	r9, r2
   25bf4:	ldr	r0, [r6], #4
   25bf8:	mov	r2, ip
   25bfc:	sub	r3, r3, #1
   25c00:	eor	ip, r0, r9
   25c04:	mov	r0, r1
   25c08:	and	r1, r5, #1
   25c0c:	adds	ip, ip, r1
   25c10:	mov	r1, r0
   25c14:	orr	r0, ip, sl
   25c18:	adc	r5, r8, #0
   25c1c:	eor	r0, r0, r1
   25c20:	adds	r0, r0, r2
   25c24:	adc	ip, r8, #0
   25c28:	str	r0, [r7], #4
   25c2c:	cmp	r4, r3
   25c30:	bne	25bf4 <__assert_fail@plt+0x148d4>
   25c34:	mov	ip, #0
   25c38:	cmp	r0, r2
   25c3c:	movwcc	ip, #1
   25c40:	ldr	r8, [sp, #12]
   25c44:	ldr	r0, [sp, #4]
   25c48:	cmp	ip, #0
   25c4c:	beq	25c5c <__assert_fail@plt+0x1493c>
   25c50:	str	ip, [r0, lr, lsl #2]
   25c54:	add	r0, lr, #1
   25c58:	b	25c7c <__assert_fail@plt+0x1495c>
   25c5c:	sub	r1, r0, #4
   25c60:	mov	r0, lr
   25c64:	cmp	lr, #1
   25c68:	blt	25c7c <__assert_fail@plt+0x1495c>
   25c6c:	ldr	r2, [r1, r0, lsl #2]
   25c70:	sub	lr, r0, #1
   25c74:	cmp	r2, #0
   25c78:	beq	25c60 <__assert_fail@plt+0x14940>
   25c7c:	ldr	r1, [sp]
   25c80:	cmp	r1, #0
   25c84:	rsbne	r0, r0, #0
   25c88:	b	25d44 <__assert_fail@plt+0x14a24>
   25c8c:	ldr	r0, [r8, #8]
   25c90:	cmp	r5, #1
   25c94:	bge	25cd8 <__assert_fail@plt+0x149b8>
   25c98:	b	25d40 <__assert_fail@plt+0x14a20>
   25c9c:	movw	r0, #8476	; 0x211c
   25ca0:	movt	r0, #4
   25ca4:	ldr	r1, [r0]
   25ca8:	lsl	r0, r4, #2
   25cac:	blx	r1
   25cb0:	str	r0, [r8, #8]
   25cb4:	str	r4, [r8]
   25cb8:	ldr	r1, [r8, #4]
   25cbc:	cmp	r1, #0
   25cc0:	rsbmi	r1, r1, #0
   25cc4:	cmp	r1, r4
   25cc8:	movgt	r1, #0
   25ccc:	strgt	r1, [r8, #4]
   25cd0:	cmp	r5, #1
   25cd4:	blt	25d40 <__assert_fail@plt+0x14a20>
   25cd8:	ldr	r6, [sl, #8]
   25cdc:	mov	r2, #0
   25ce0:	cmp	r5, #4
   25ce4:	bcc	25d24 <__assert_fail@plt+0x14a04>
   25ce8:	add	r1, r6, r5, lsl #2
   25cec:	cmp	r0, r1
   25cf0:	addcc	r1, r0, r5, lsl #2
   25cf4:	cmpcc	r6, r1
   25cf8:	bcc	25d24 <__assert_fail@plt+0x14a04>
   25cfc:	bic	r2, r5, #-2147483645	; 0x80000003
   25d00:	mov	r7, r0
   25d04:	mov	r1, r6
   25d08:	mov	r3, r2
   25d0c:	vld1.32	{d16-d17}, [r1]!
   25d10:	subs	r3, r3, #4
   25d14:	vst1.32	{d16-d17}, [r7]!
   25d18:	bne	25d0c <__assert_fail@plt+0x149ec>
   25d1c:	cmp	r5, r2
   25d20:	beq	25d40 <__assert_fail@plt+0x14a20>
   25d24:	add	r1, r6, r2, lsl #2
   25d28:	add	r0, r0, r2, lsl #2
   25d2c:	sub	r2, r5, r2
   25d30:	ldr	r3, [r1], #4
   25d34:	subs	r2, r2, #1
   25d38:	str	r3, [r0], #4
   25d3c:	bne	25d30 <__assert_fail@plt+0x14a10>
   25d40:	ldr	r0, [sl, #4]
   25d44:	str	r0, [r8, #4]
   25d48:	sub	sp, fp, #28
   25d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d50:	movw	r0, #3338	; 0xd0a
   25d54:	movw	r1, #1588	; 0x634
   25d58:	movw	r3, #3419	; 0xd5b
   25d5c:	movw	r2, #3927	; 0xf57
   25d60:	movt	r0, #3
   25d64:	movt	r1, #3
   25d68:	movt	r3, #3
   25d6c:	bl	11320 <__assert_fail@plt>
   25d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d74:	add	fp, sp, #28
   25d78:	sub	sp, sp, #36	; 0x24
   25d7c:	ldr	r7, [r2, #4]
   25d80:	mov	r8, r0
   25d84:	ldr	r0, [r1, #4]
   25d88:	mov	r5, r2
   25d8c:	mov	sl, r1
   25d90:	cmp	r7, #0
   25d94:	rsbmi	r7, r7, #0
   25d98:	cmp	r0, #0
   25d9c:	rsbmi	r0, r0, #0
   25da0:	cmp	r0, r7
   25da4:	mov	r2, r0
   25da8:	movlt	r2, r7
   25dac:	movlt	r7, r0
   25db0:	movlt	sl, r5
   25db4:	movlt	r5, r1
   25db8:	cmp	r7, #0
   25dbc:	beq	25e14 <__assert_fail@plt+0x14af4>
   25dc0:	ldr	r3, [sl, #4]
   25dc4:	ldr	r6, [r5, #4]
   25dc8:	ldr	r1, [r8]
   25dcc:	str	r2, [sp, #8]
   25dd0:	eor	r4, r6, r3
   25dd4:	add	r9, r2, r4, lsr #31
   25dd8:	cmp	r9, r1
   25ddc:	ble	25e68 <__assert_fail@plt+0x14b48>
   25de0:	cmp	r9, #1
   25de4:	str	r3, [sp, #32]
   25de8:	movls	r9, #1
   25dec:	cmp	r1, #0
   25df0:	beq	25e74 <__assert_fail@plt+0x14b54>
   25df4:	movw	r0, #8480	; 0x2120
   25df8:	lsl	r1, r1, #2
   25dfc:	lsl	r2, r9, #2
   25e00:	movt	r0, #4
   25e04:	ldr	r3, [r0]
   25e08:	ldr	r0, [r8, #8]
   25e0c:	blx	r3
   25e10:	b	25e88 <__assert_fail@plt+0x14b68>
   25e14:	cmp	sl, r8
   25e18:	beq	260d0 <__assert_fail@plt+0x14db0>
   25e1c:	ldr	r4, [sl, #4]
   25e20:	ldr	r1, [r8]
   25e24:	cmp	r4, #0
   25e28:	rsbmi	r4, r4, #0
   25e2c:	cmp	r4, r1
   25e30:	ble	26014 <__assert_fail@plt+0x14cf4>
   25e34:	cmp	r4, #1
   25e38:	mov	r5, r4
   25e3c:	movle	r5, #1
   25e40:	cmp	r1, #0
   25e44:	beq	26024 <__assert_fail@plt+0x14d04>
   25e48:	movw	r0, #8480	; 0x2120
   25e4c:	lsl	r1, r1, #2
   25e50:	lsl	r2, r5, #2
   25e54:	movt	r0, #4
   25e58:	ldr	r3, [r0]
   25e5c:	ldr	r0, [r8, #8]
   25e60:	blx	r3
   25e64:	b	26038 <__assert_fail@plt+0x14d18>
   25e68:	ldr	r0, [r8, #8]
   25e6c:	str	r0, [sp, #32]
   25e70:	b	25eb0 <__assert_fail@plt+0x14b90>
   25e74:	movw	r0, #8476	; 0x211c
   25e78:	movt	r0, #4
   25e7c:	ldr	r1, [r0]
   25e80:	lsl	r0, r9, #2
   25e84:	blx	r1
   25e88:	str	r0, [r8, #8]
   25e8c:	str	r9, [r8]
   25e90:	ldr	r1, [r8, #4]
   25e94:	ldr	r3, [sp, #32]
   25e98:	str	r0, [sp, #32]
   25e9c:	cmp	r1, #0
   25ea0:	rsbmi	r1, r1, #0
   25ea4:	cmp	r1, r9
   25ea8:	movgt	r0, #0
   25eac:	strgt	r0, [r8, #4]
   25eb0:	asr	r0, r4, #31
   25eb4:	lsr	ip, r4, #31
   25eb8:	lsr	r1, r6, #31
   25ebc:	asr	r9, r3, #31
   25ec0:	str	r8, [sp, #12]
   25ec4:	str	r0, [sp, #24]
   25ec8:	asr	r0, r6, #31
   25ecc:	lsr	r6, r3, #31
   25ed0:	mov	r3, #0
   25ed4:	str	ip, [sp, #4]
   25ed8:	str	r0, [sp, #20]
   25edc:	ldr	r0, [r5, #8]
   25ee0:	mov	r5, #0
   25ee4:	str	r0, [sp, #16]
   25ee8:	ldr	r0, [sl, #8]
   25eec:	str	r0, [sp, #28]
   25ef0:	mov	sl, r1
   25ef4:	ldr	r1, [sp, #28]
   25ef8:	ldr	r4, [sp, #24]
   25efc:	ldr	r2, [sp, #16]
   25f00:	mov	r0, ip
   25f04:	ldr	r1, [r1, r5, lsl #2]
   25f08:	eor	r1, r1, r9
   25f0c:	adds	r1, r1, r6
   25f10:	eor	r1, r1, r4
   25f14:	mov	r4, r7
   25f18:	ldr	r7, [r2, r5, lsl #2]
   25f1c:	ldr	r2, [sp, #20]
   25f20:	adc	r6, r3, #0
   25f24:	eor	r7, r7, r2
   25f28:	ldr	r2, [sp, #32]
   25f2c:	adds	r8, r7, sl
   25f30:	eor	r7, r1, r8
   25f34:	adc	r1, r3, #0
   25f38:	adds	lr, r7, ip
   25f3c:	mov	r7, r4
   25f40:	str	lr, [r2, r5, lsl #2]
   25f44:	add	r5, r5, #1
   25f48:	adc	ip, r3, #0
   25f4c:	cmp	r5, r4
   25f50:	bcc	25ef0 <__assert_fail@plt+0x14bd0>
   25f54:	ldr	r2, [sp, #28]
   25f58:	mov	r4, #0
   25f5c:	cmp	lr, r0
   25f60:	movwcc	r4, #1
   25f64:	cmp	r8, sl
   25f68:	bcc	260d8 <__assert_fail@plt+0x14db8>
   25f6c:	ldr	r1, [sp, #8]
   25f70:	ldr	lr, [sp, #32]
   25f74:	cmp	r5, r1
   25f78:	bge	25fd8 <__assert_fail@plt+0x14cb8>
   25f7c:	ldr	r8, [sp, #12]
   25f80:	mov	ip, #0
   25f84:	ldr	r0, [r2, r5, lsl #2]
   25f88:	and	r7, r6, #1
   25f8c:	mov	r3, r4
   25f90:	eor	r0, r0, r9
   25f94:	adds	r0, r0, r7
   25f98:	eor	r0, r0, r9
   25f9c:	adc	r6, ip, #0
   25fa0:	adds	r7, r0, r4
   25fa4:	str	r7, [lr, r5, lsl #2]
   25fa8:	add	r5, r5, #1
   25fac:	adc	r4, ip, #0
   25fb0:	cmp	r5, r1
   25fb4:	blt	25f84 <__assert_fail@plt+0x14c64>
   25fb8:	mov	r4, #0
   25fbc:	cmp	r7, r3
   25fc0:	movwcc	r4, #1
   25fc4:	cmp	r4, #0
   25fc8:	beq	25fe4 <__assert_fail@plt+0x14cc4>
   25fcc:	str	r4, [lr, r1, lsl #2]
   25fd0:	add	r0, r1, #1
   25fd4:	b	26004 <__assert_fail@plt+0x14ce4>
   25fd8:	ldr	r8, [sp, #12]
   25fdc:	cmp	r4, #0
   25fe0:	bne	25fcc <__assert_fail@plt+0x14cac>
   25fe4:	sub	r3, lr, #4
   25fe8:	mov	r0, r1
   25fec:	cmp	r1, #1
   25ff0:	blt	26004 <__assert_fail@plt+0x14ce4>
   25ff4:	ldr	r2, [r3, r0, lsl #2]
   25ff8:	sub	r1, r0, #1
   25ffc:	cmp	r2, #0
   26000:	beq	25fe8 <__assert_fail@plt+0x14cc8>
   26004:	ldr	r1, [sp, #4]
   26008:	cmp	r1, #0
   2600c:	rsbne	r0, r0, #0
   26010:	b	260cc <__assert_fail@plt+0x14dac>
   26014:	ldr	r0, [r8, #8]
   26018:	cmp	r4, #1
   2601c:	bge	26060 <__assert_fail@plt+0x14d40>
   26020:	b	260c8 <__assert_fail@plt+0x14da8>
   26024:	movw	r0, #8476	; 0x211c
   26028:	movt	r0, #4
   2602c:	ldr	r1, [r0]
   26030:	lsl	r0, r5, #2
   26034:	blx	r1
   26038:	str	r0, [r8, #8]
   2603c:	str	r5, [r8]
   26040:	ldr	r1, [r8, #4]
   26044:	cmp	r1, #0
   26048:	rsbmi	r1, r1, #0
   2604c:	cmp	r1, r5
   26050:	movgt	r1, #0
   26054:	strgt	r1, [r8, #4]
   26058:	cmp	r4, #1
   2605c:	blt	260c8 <__assert_fail@plt+0x14da8>
   26060:	ldr	r6, [sl, #8]
   26064:	mov	r2, #0
   26068:	cmp	r4, #4
   2606c:	bcc	260ac <__assert_fail@plt+0x14d8c>
   26070:	add	r1, r6, r4, lsl #2
   26074:	cmp	r0, r1
   26078:	addcc	r1, r0, r4, lsl #2
   2607c:	cmpcc	r6, r1
   26080:	bcc	260ac <__assert_fail@plt+0x14d8c>
   26084:	bic	r2, r4, #-2147483645	; 0x80000003
   26088:	mov	r7, r0
   2608c:	mov	r1, r6
   26090:	mov	r3, r2
   26094:	vld1.32	{d16-d17}, [r1]!
   26098:	subs	r3, r3, #4
   2609c:	vst1.32	{d16-d17}, [r7]!
   260a0:	bne	26094 <__assert_fail@plt+0x14d74>
   260a4:	cmp	r4, r2
   260a8:	beq	260c8 <__assert_fail@plt+0x14da8>
   260ac:	add	r1, r6, r2, lsl #2
   260b0:	add	r0, r0, r2, lsl #2
   260b4:	sub	r2, r4, r2
   260b8:	ldr	r3, [r1], #4
   260bc:	subs	r2, r2, #1
   260c0:	str	r3, [r0], #4
   260c4:	bne	260b8 <__assert_fail@plt+0x14d98>
   260c8:	ldr	r0, [sl, #4]
   260cc:	str	r0, [r8, #4]
   260d0:	sub	sp, fp, #28
   260d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260d8:	movw	r0, #3338	; 0xd0a
   260dc:	movw	r1, #1588	; 0x634
   260e0:	movw	r3, #3492	; 0xda4
   260e4:	movw	r2, #3996	; 0xf9c
   260e8:	movt	r0, #3
   260ec:	movt	r1, #3
   260f0:	movt	r3, #3
   260f4:	bl	11320 <__assert_fail@plt>
   260f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   260fc:	add	fp, sp, #24
   26100:	cmp	r1, #1
   26104:	movlt	ip, #0
   26108:	movlt	r0, ip
   2610c:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   26110:	mov	lr, #0
   26114:	movw	r2, #21845	; 0x5555
   26118:	movw	r3, #13107	; 0x3333
   2611c:	mov	ip, #0
   26120:	mov	r8, #0
   26124:	b	2613c <__assert_fail@plt+0x14e1c>
   26128:	add	r8, r8, #1
   2612c:	add	ip, r6, ip
   26130:	cmp	r8, r1
   26134:	moveq	r0, ip
   26138:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2613c:	ldr	r5, [r0, r8, lsl #2]
   26140:	mov	r6, #0
   26144:	cmp	r5, #0
   26148:	beq	26128 <__assert_fail@plt+0x14e08>
   2614c:	mov	r6, #0
   26150:	and	r7, r2, r5, lsr #1
   26154:	cmp	lr, r5, lsr #16
   26158:	sub	r7, r5, r7
   2615c:	and	r4, r7, r3
   26160:	and	r7, r3, r7, lsr #2
   26164:	add	r4, r7, r4
   26168:	add	r4, r4, r4, lsr #4
   2616c:	and	r7, r4, #15
   26170:	ubfx	r4, r4, #8, #4
   26174:	add	r6, r7, r6
   26178:	add	r6, r6, r4
   2617c:	lsr	r4, r5, #16
   26180:	mov	r5, r4
   26184:	bne	26150 <__assert_fail@plt+0x14e30>
   26188:	b	26128 <__assert_fail@plt+0x14e08>
   2618c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26190:	add	fp, sp, #24
   26194:	ldr	lr, [r0, #4]
   26198:	cmp	lr, #0
   2619c:	mvnlt	r0, #0
   261a0:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   261a4:	moveq	r0, #0
   261a8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   261ac:	ldr	ip, [r0, #8]
   261b0:	mov	r3, #0
   261b4:	movw	r2, #21845	; 0x5555
   261b8:	movw	r1, #13107	; 0x3333
   261bc:	mov	r0, #0
   261c0:	mov	r8, #0
   261c4:	b	261d8 <__assert_fail@plt+0x14eb8>
   261c8:	add	r8, r8, #1
   261cc:	add	r0, r6, r0
   261d0:	cmp	r8, lr
   261d4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   261d8:	ldr	r5, [ip, r8, lsl #2]
   261dc:	mov	r6, #0
   261e0:	cmp	r5, #0
   261e4:	beq	261c8 <__assert_fail@plt+0x14ea8>
   261e8:	mov	r6, #0
   261ec:	and	r7, r2, r5, lsr #1
   261f0:	cmp	r3, r5, lsr #16
   261f4:	sub	r7, r5, r7
   261f8:	and	r4, r7, r1
   261fc:	and	r7, r1, r7, lsr #2
   26200:	add	r4, r7, r4
   26204:	add	r4, r4, r4, lsr #4
   26208:	and	r7, r4, #15
   2620c:	ubfx	r4, r4, #8, #4
   26210:	add	r6, r7, r6
   26214:	add	r6, r6, r4
   26218:	lsr	r4, r5, #16
   2621c:	mov	r5, r4
   26220:	bne	261ec <__assert_fail@plt+0x14ecc>
   26224:	b	261c8 <__assert_fail@plt+0x14ea8>
   26228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2622c:	add	fp, sp, #28
   26230:	sub	sp, sp, #36	; 0x24
   26234:	ldr	r3, [r0, #4]
   26238:	ldr	ip, [r1, #4]
   2623c:	eor	r7, ip, r3
   26240:	cmp	r7, #0
   26244:	mvnlt	r0, #0
   26248:	sublt	sp, fp, #28
   2624c:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26250:	cmn	r3, #1
   26254:	ble	26260 <__assert_fail@plt+0x14f40>
   26258:	mov	r7, r3
   2625c:	b	26270 <__assert_fail@plt+0x14f50>
   26260:	cmp	ip, #0
   26264:	bge	2645c <__assert_fail@plt+0x1513c>
   26268:	rsb	ip, ip, #0
   2626c:	rsb	r7, r3, #0
   26270:	asr	r2, r3, #31
   26274:	cmp	r7, ip
   26278:	mov	lr, r7
   2627c:	lsr	r9, r3, #31
   26280:	str	r2, [sp, #28]
   26284:	ldr	r2, [r0, #8]
   26288:	ldr	r0, [r1, #8]
   2628c:	movlt	lr, ip
   26290:	movlt	ip, r7
   26294:	mov	r1, r0
   26298:	movlt	r1, r2
   2629c:	movlt	r2, r0
   262a0:	cmp	ip, #1
   262a4:	str	r1, [sp, #20]
   262a8:	str	r2, [sp, #24]
   262ac:	blt	26428 <__assert_fail@plt+0x15108>
   262b0:	mov	r5, #0
   262b4:	movw	r6, #21845	; 0x5555
   262b8:	movw	r7, #13107	; 0x3333
   262bc:	mov	r0, #0
   262c0:	mov	r4, #0
   262c4:	mov	r8, r9
   262c8:	str	lr, [sp, #4]
   262cc:	ldr	r1, [sp, #20]
   262d0:	ldr	r2, [sp, #28]
   262d4:	str	r8, [sp, #16]
   262d8:	mov	sl, #0
   262dc:	str	r9, [sp, #12]
   262e0:	ldr	r1, [r1, r4, lsl #2]
   262e4:	eor	r1, r1, r2
   262e8:	adds	r3, r1, r9
   262ec:	adc	r1, r5, #0
   262f0:	str	r3, [sp, #8]
   262f4:	str	r1, [sp, #32]
   262f8:	ldr	r1, [sp, #24]
   262fc:	ldr	r1, [r1, r4, lsl #2]
   26300:	eor	r1, r1, r2
   26304:	adds	r2, r1, r8
   26308:	eor	lr, r3, r2
   2630c:	adc	r8, r5, #0
   26310:	cmp	lr, #0
   26314:	beq	26354 <__assert_fail@plt+0x15034>
   26318:	mov	sl, #0
   2631c:	and	r9, r6, lr, lsr #1
   26320:	cmp	r5, lr, lsr #16
   26324:	sub	r3, lr, r9
   26328:	and	r1, r3, r7
   2632c:	and	r3, r7, r3, lsr #2
   26330:	add	r1, r3, r1
   26334:	add	r1, r1, r1, lsr #4
   26338:	and	r3, r1, #15
   2633c:	ubfx	r1, r1, #8, #4
   26340:	add	r3, r3, sl
   26344:	add	sl, r3, r1
   26348:	lsr	r1, lr, #16
   2634c:	mov	lr, r1
   26350:	bne	2631c <__assert_fail@plt+0x14ffc>
   26354:	ldr	r9, [sp, #32]
   26358:	add	r4, r4, #1
   2635c:	add	r0, sl, r0
   26360:	cmp	r4, ip
   26364:	blt	262cc <__assert_fail@plt+0x14fac>
   26368:	ldr	r1, [sp, #12]
   2636c:	ldr	r3, [sp, #8]
   26370:	ldr	lr, [sp, #4]
   26374:	mov	r9, #0
   26378:	cmp	r3, r1
   2637c:	ldr	r3, [sp, #16]
   26380:	mov	r1, #0
   26384:	movwcc	r1, #1
   26388:	cmp	r2, r3
   2638c:	movwcc	r9, #1
   26390:	cmp	r1, #0
   26394:	bne	2643c <__assert_fail@plt+0x1511c>
   26398:	cmp	ip, lr
   2639c:	bge	26420 <__assert_fail@plt+0x15100>
   263a0:	movw	r1, #21845	; 0x5555
   263a4:	movw	r4, #13107	; 0x3333
   263a8:	mov	r3, #0
   263ac:	ldr	r2, [sp, #24]
   263b0:	mov	r6, #0
   263b4:	ldr	r7, [r2, ip, lsl #2]
   263b8:	ldr	r2, [sp, #28]
   263bc:	eor	r7, r7, r2
   263c0:	adds	r7, r7, r9
   263c4:	eor	r7, r7, r2
   263c8:	adc	r9, r3, #0
   263cc:	cmp	r7, #0
   263d0:	beq	26410 <__assert_fail@plt+0x150f0>
   263d4:	mov	r6, #0
   263d8:	and	r5, r1, r7, lsr #1
   263dc:	cmp	r3, r7, lsr #16
   263e0:	sub	r5, r7, r5
   263e4:	and	r2, r5, r4
   263e8:	and	r5, r4, r5, lsr #2
   263ec:	add	r2, r5, r2
   263f0:	add	r2, r2, r2, lsr #4
   263f4:	and	r5, r2, #15
   263f8:	ubfx	r2, r2, #8, #4
   263fc:	add	r6, r5, r6
   26400:	add	r6, r6, r2
   26404:	lsr	r2, r7, #16
   26408:	mov	r7, r2
   2640c:	bne	263d8 <__assert_fail@plt+0x150b8>
   26410:	add	ip, ip, #1
   26414:	add	r0, r6, r0
   26418:	cmp	ip, lr
   2641c:	blt	263ac <__assert_fail@plt+0x1508c>
   26420:	sub	sp, fp, #28
   26424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26428:	mov	ip, #0
   2642c:	mov	r1, r9
   26430:	mov	r0, #0
   26434:	cmp	r1, #0
   26438:	beq	26398 <__assert_fail@plt+0x15078>
   2643c:	movw	r0, #3338	; 0xd0a
   26440:	movw	r1, #1588	; 0x634
   26444:	movw	r3, #3572	; 0xdf4
   26448:	movw	r2, #4100	; 0x1004
   2644c:	movt	r0, #3
   26450:	movt	r1, #3
   26454:	movt	r3, #3
   26458:	bl	11320 <__assert_fail@plt>
   2645c:	movw	r0, #3565	; 0xded
   26460:	movw	r1, #1588	; 0x634
   26464:	movw	r3, #3572	; 0xdf4
   26468:	movw	r2, #4079	; 0xfef
   2646c:	movt	r0, #3
   26470:	movt	r1, #3
   26474:	movt	r3, #3
   26478:	bl	11320 <__assert_fail@plt>
   2647c:	push	{r4, r5, r6, sl, fp, lr}
   26480:	add	fp, sp, #16
   26484:	sub	sp, sp, #8
   26488:	ldr	r4, [r0, #4]
   2648c:	cmp	r4, #0
   26490:	mov	r3, r4
   26494:	rsbmi	r3, r4, #0
   26498:	cmp	r3, r1, lsr #5
   2649c:	ble	2651c <__assert_fail@plt+0x151fc>
   264a0:	ldr	r2, [r0, #8]
   264a4:	lsr	ip, r1, #5
   264a8:	mov	lr, #0
   264ac:	cmp	r1, #0
   264b0:	ldr	r0, [r2, ip, lsl #2]
   264b4:	beq	26508 <__assert_fail@plt+0x151e8>
   264b8:	cmn	r4, #1
   264bc:	bgt	264fc <__assert_fail@plt+0x151dc>
   264c0:	sub	lr, r2, #4
   264c4:	mov	r5, ip
   264c8:	mov	r4, r5
   264cc:	cmp	r5, #1
   264d0:	blt	264e4 <__assert_fail@plt+0x151c4>
   264d4:	ldr	r6, [lr, r4, lsl #2]
   264d8:	sub	r5, r4, #1
   264dc:	cmp	r6, #0
   264e0:	beq	264c8 <__assert_fail@plt+0x151a8>
   264e4:	clz	r6, r4
   264e8:	mvn	r0, r0
   264ec:	mov	lr, #0
   264f0:	lsr	r6, r6, #5
   264f4:	adds	r0, r6, r0
   264f8:	mvncc	lr, #0
   264fc:	and	r1, r1, #31
   26500:	mvn	r4, #0
   26504:	and	r0, r0, r4, lsl r1
   26508:	mov	r1, ip
   2650c:	str	lr, [sp]
   26510:	bl	1b11c <__assert_fail@plt+0x9dfc>
   26514:	sub	sp, fp, #16
   26518:	pop	{r4, r5, r6, sl, fp, pc}
   2651c:	cmn	r4, #1
   26520:	mvngt	r1, #0
   26524:	mov	r0, r1
   26528:	sub	sp, fp, #16
   2652c:	pop	{r4, r5, r6, sl, fp, pc}
   26530:	push	{r4, r5, r6, r7, fp, lr}
   26534:	add	fp, sp, #16
   26538:	sub	sp, sp, #8
   2653c:	ldr	r2, [r0, #4]
   26540:	mov	r5, #1
   26544:	cmp	r2, #0
   26548:	mov	r3, r2
   2654c:	eor	r4, r5, r2, lsr #31
   26550:	rsbmi	r3, r2, #0
   26554:	cmp	r3, r1, lsr #5
   26558:	ble	265c4 <__assert_fail@plt+0x152a4>
   2655c:	ldr	r2, [r0, #8]
   26560:	lsr	ip, r1, #5
   26564:	rsb	lr, r4, #0
   26568:	cmp	r4, #0
   2656c:	ldr	r0, [r2, ip, lsl #2]
   26570:	eor	r0, r0, lr
   26574:	bne	265a4 <__assert_fail@plt+0x15284>
   26578:	sub	r4, r2, #4
   2657c:	mov	r6, ip
   26580:	mov	r5, r6
   26584:	cmp	r6, #1
   26588:	blt	2659c <__assert_fail@plt+0x1527c>
   2658c:	ldr	r7, [r4, r5, lsl #2]
   26590:	sub	r6, r5, #1
   26594:	cmp	r7, #0
   26598:	beq	26580 <__assert_fail@plt+0x15260>
   2659c:	cmp	r5, #0
   265a0:	subeq	r0, r0, #1
   265a4:	and	r1, r1, #31
   265a8:	mvn	r7, #0
   265ac:	str	lr, [sp]
   265b0:	and	r0, r0, r7, lsl r1
   265b4:	mov	r1, ip
   265b8:	bl	1b11c <__assert_fail@plt+0x9dfc>
   265bc:	sub	sp, fp, #16
   265c0:	pop	{r4, r5, r6, r7, fp, pc}
   265c4:	cmp	r4, #0
   265c8:	mvneq	r1, #0
   265cc:	mov	r0, r1
   265d0:	sub	sp, fp, #16
   265d4:	pop	{r4, r5, r6, r7, fp, pc}
   265d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265dc:	add	fp, sp, #28
   265e0:	sub	sp, sp, #20
   265e4:	ldr	ip, [r3]
   265e8:	mov	sl, r2
   265ec:	mov	r9, r1
   265f0:	mov	r8, r0
   265f4:	cmp	ip, #0
   265f8:	beq	26698 <__assert_fail@plt+0x15378>
   265fc:	mov	r1, #0
   26600:	cmp	r8, #0
   26604:	mov	r0, r8
   26608:	bne	26630 <__assert_fail@plt+0x15310>
   2660c:	movw	r0, #8476	; 0x211c
   26610:	mov	r4, r3
   26614:	movt	r0, #4
   26618:	ldr	r1, [r0]
   2661c:	lsl	r0, sl, #2
   26620:	blx	r1
   26624:	ldr	ip, [r4]
   26628:	mov	r3, r4
   2662c:	mov	r1, sl
   26630:	cmp	sl, #0
   26634:	ble	267b8 <__assert_fail@plt+0x15498>
   26638:	cmp	ip, #0
   2663c:	beq	267d8 <__assert_fail@plt+0x154b8>
   26640:	cmp	ip, #32
   26644:	bcs	267f8 <__assert_fail@plt+0x154d8>
   26648:	str	r1, [sp, #16]
   2664c:	add	r1, r9, sl, lsl #2
   26650:	rsb	r2, ip, #32
   26654:	cmp	sl, #1
   26658:	ldr	r7, [r1, #-4]
   2665c:	lsl	r1, r7, ip
   26660:	lsr	r4, r7, r2
   26664:	beq	266ac <__assert_fail@plt+0x1538c>
   26668:	sub	lr, r9, #8
   2666c:	mov	r9, r0
   26670:	sub	r6, r0, #4
   26674:	mov	r7, sl
   26678:	ldr	r5, [lr, r7, lsl #2]
   2667c:	orr	r1, r1, r5, lsr r2
   26680:	str	r1, [r6, r7, lsl #2]
   26684:	sub	r7, r7, #1
   26688:	lsl	r1, r5, ip
   2668c:	cmp	r7, #1
   26690:	bne	26678 <__assert_fail@plt+0x15358>
   26694:	b	266b0 <__assert_fail@plt+0x15390>
   26698:	mov	ip, #0
   2669c:	mov	r1, #0
   266a0:	mov	r0, #0
   266a4:	mov	r4, #0
   266a8:	b	266bc <__assert_fail@plt+0x1539c>
   266ac:	mov	r9, r0
   266b0:	str	r1, [r9]
   266b4:	ldr	r1, [sp, #16]
   266b8:	mov	r0, r9
   266bc:	cmp	sl, #1
   266c0:	str	r0, [sp, #4]
   266c4:	str	r1, [sp, #16]
   266c8:	str	ip, [sp, #12]
   266cc:	str	r3, [sp, #8]
   266d0:	blt	2677c <__assert_fail@plt+0x1545c>
   266d4:	ldr	r2, [r3, #12]
   266d8:	ldr	r0, [r3, #4]
   266dc:	sub	r1, sl, #1
   266e0:	lsr	sl, r2, #16
   266e4:	uxth	lr, r2
   266e8:	uxth	r5, r4
   266ec:	lsr	r7, r4, #16
   266f0:	mul	r6, r5, sl
   266f4:	mul	r5, r5, lr
   266f8:	mul	ip, r7, lr
   266fc:	mla	r6, r7, lr, r6
   26700:	mul	r7, r7, sl
   26704:	add	r6, r6, r5, lsr #16
   26708:	add	r4, r4, r6, lsr #16
   2670c:	cmp	r6, ip
   26710:	pkhbt	r6, r5, r6, lsl #16
   26714:	ldr	r5, [r9, r1, lsl #2]
   26718:	addcc	r7, r7, #65536	; 0x10000
   2671c:	add	r4, r4, #1
   26720:	adds	r2, r5, r6
   26724:	adc	r6, r4, r7
   26728:	mls	r7, r6, r0, r5
   2672c:	mov	r5, #0
   26730:	cmp	r7, r2
   26734:	mvnhi	r5, #0
   26738:	and	r2, r0, r5
   2673c:	add	r7, r2, r7
   26740:	subs	r4, r7, r0
   26744:	movcc	r4, r7
   26748:	cmp	r8, #0
   2674c:	beq	26768 <__assert_fail@plt+0x15448>
   26750:	cmp	r7, r0
   26754:	mov	r2, #0
   26758:	add	r7, r6, r5
   2675c:	movwcs	r2, #1
   26760:	add	r2, r7, r2
   26764:	str	r2, [r8, r1, lsl #2]
   26768:	sub	r2, r1, #1
   2676c:	add	r1, r1, #1
   26770:	cmp	r1, #1
   26774:	mov	r1, r2
   26778:	bgt	266e8 <__assert_fail@plt+0x153c8>
   2677c:	ldr	r1, [sp, #16]
   26780:	ldr	r0, [sp, #12]
   26784:	cmp	r1, #0
   26788:	beq	267ac <__assert_fail@plt+0x1548c>
   2678c:	movw	r0, #8484	; 0x2124
   26790:	lsl	r1, r1, #2
   26794:	movt	r0, #4
   26798:	ldr	r2, [r0]
   2679c:	ldr	r0, [sp, #4]
   267a0:	blx	r2
   267a4:	ldr	r0, [sp, #8]
   267a8:	ldr	r0, [r0]
   267ac:	lsr	r0, r4, r0
   267b0:	sub	sp, fp, #28
   267b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267b8:	movw	r0, #2145	; 0x861
   267bc:	movw	r1, #1588	; 0x634
   267c0:	movw	r3, #2232	; 0x8b8
   267c4:	movw	r2, #659	; 0x293
   267c8:	movt	r0, #3
   267cc:	movt	r1, #3
   267d0:	movt	r3, #3
   267d4:	bl	11320 <__assert_fail@plt>
   267d8:	movw	r0, #2297	; 0x8f9
   267dc:	movw	r1, #1588	; 0x634
   267e0:	movw	r3, #2232	; 0x8b8
   267e4:	mov	r2, #660	; 0x294
   267e8:	movt	r0, #3
   267ec:	movt	r1, #3
   267f0:	movt	r3, #3
   267f4:	bl	11320 <__assert_fail@plt>
   267f8:	movw	r0, #2306	; 0x902
   267fc:	movw	r1, #1588	; 0x634
   26800:	movw	r3, #2232	; 0x8b8
   26804:	movw	r2, #661	; 0x295
   26808:	movt	r0, #3
   2680c:	movt	r1, #3
   26810:	movt	r3, #3
   26814:	bl	11320 <__assert_fail@plt>
   26818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2681c:	add	fp, sp, #28
   26820:	sub	sp, sp, #20
   26824:	mov	r7, r2
   26828:	mov	r6, r1
   2682c:	mov	r4, r0
   26830:	cmp	r1, #2
   26834:	blt	2684c <__assert_fail@plt+0x1552c>
   26838:	cmp	r6, #37	; 0x25
   2683c:	bge	26864 <__assert_fail@plt+0x15544>
   26840:	movw	r9, #3773	; 0xebd
   26844:	movt	r9, #3
   26848:	b	2688c <__assert_fail@plt+0x1556c>
   2684c:	movw	r9, #3710	; 0xe7e
   26850:	cmn	r6, #2
   26854:	movt	r9, #3
   26858:	ble	2687c <__assert_fail@plt+0x1555c>
   2685c:	mov	r6, #10
   26860:	b	2688c <__assert_fail@plt+0x1556c>
   26864:	mov	r0, #0
   26868:	cmp	r6, #62	; 0x3e
   2686c:	bgt	26a38 <__assert_fail@plt+0x15718>
   26870:	movw	r9, #3710	; 0xe7e
   26874:	movt	r9, #3
   26878:	b	2688c <__assert_fail@plt+0x1556c>
   2687c:	mov	r0, #0
   26880:	cmn	r6, #36	; 0x24
   26884:	blt	26a38 <__assert_fail@plt+0x15718>
   26888:	rsb	r6, r6, #0
   2688c:	mov	r0, r7
   26890:	mov	r1, r6
   26894:	bl	23460 <__assert_fail@plt+0x12140>
   26898:	mov	r8, #0
   2689c:	cmp	r4, #0
   268a0:	bne	268c0 <__assert_fail@plt+0x155a0>
   268a4:	movw	r1, #8476	; 0x211c
   268a8:	add	r8, r0, #2
   268ac:	movt	r1, #4
   268b0:	mov	r0, r8
   268b4:	ldr	r1, [r1]
   268b8:	blx	r1
   268bc:	mov	r4, r0
   268c0:	ldr	r0, [r7, #4]
   268c4:	cmp	r0, #0
   268c8:	mov	r5, r0
   268cc:	rsbmi	r5, r0, #0
   268d0:	cmp	r5, #0
   268d4:	beq	26990 <__assert_fail@plt+0x15670>
   268d8:	cmn	r0, #1
   268dc:	mov	sl, #0
   268e0:	movle	r0, #45	; 0x2d
   268e4:	movle	sl, #1
   268e8:	strble	r0, [r4]
   268ec:	cmp	r6, #63	; 0x3f
   268f0:	bgt	269a0 <__assert_fail@plt+0x15680>
   268f4:	sub	r0, r6, #2
   268f8:	cmp	r0, #30
   268fc:	bhi	26a60 <__assert_fail@plt+0x15740>
   26900:	add	r2, pc, #4
   26904:	mov	r1, #1
   26908:	ldr	pc, [r2, r0, lsl #2]
   2690c:	andeq	r6, r2, r4, ror #19
   26910:	andeq	r6, r2, r0, ror #20
   26914:	andeq	r6, r2, r8, lsl #19
   26918:	andeq	r6, r2, r0, ror #20
   2691c:	andeq	r6, r2, r0, ror #20
   26920:	andeq	r6, r2, r0, ror #20
   26924:	andeq	r6, r2, r0, asr #19
   26928:	andeq	r6, r2, r0, ror #20
   2692c:	andeq	r6, r2, r0, ror #20
   26930:	andeq	r6, r2, r0, ror #20
   26934:	andeq	r6, r2, r0, ror #20
   26938:	andeq	r6, r2, r0, ror #20
   2693c:	andeq	r6, r2, r0, ror #20
   26940:	andeq	r6, r2, r0, ror #20
   26944:	andeq	r6, r2, r8, asr #19
   26948:	andeq	r6, r2, r0, ror #20
   2694c:	andeq	r6, r2, r0, ror #20
   26950:	andeq	r6, r2, r0, ror #20
   26954:	andeq	r6, r2, r0, ror #20
   26958:	andeq	r6, r2, r0, ror #20
   2695c:	andeq	r6, r2, r0, ror #20
   26960:	andeq	r6, r2, r0, ror #20
   26964:	andeq	r6, r2, r0, ror #20
   26968:	andeq	r6, r2, r0, ror #20
   2696c:	andeq	r6, r2, r0, ror #20
   26970:	andeq	r6, r2, r0, ror #20
   26974:	andeq	r6, r2, r0, ror #20
   26978:	andeq	r6, r2, r0, ror #20
   2697c:	andeq	r6, r2, r0, ror #20
   26980:	andeq	r6, r2, r0, ror #20
   26984:	ldrdeq	r6, [r2], -r0
   26988:	mov	r1, #2
   2698c:	b	269e4 <__assert_fail@plt+0x156c4>
   26990:	mov	r0, #48	; 0x30
   26994:	strb	r0, [r4]
   26998:	mov	r0, #1
   2699c:	b	26a1c <__assert_fail@plt+0x156fc>
   269a0:	cmp	r6, #64	; 0x40
   269a4:	beq	269d8 <__assert_fail@plt+0x156b8>
   269a8:	cmp	r6, #128	; 0x80
   269ac:	beq	269e0 <__assert_fail@plt+0x156c0>
   269b0:	cmp	r6, #256	; 0x100
   269b4:	bne	26a60 <__assert_fail@plt+0x15740>
   269b8:	mov	r1, #8
   269bc:	b	269e4 <__assert_fail@plt+0x156c4>
   269c0:	mov	r1, #3
   269c4:	b	269e4 <__assert_fail@plt+0x156c4>
   269c8:	mov	r1, #4
   269cc:	b	269e4 <__assert_fail@plt+0x156c4>
   269d0:	mov	r1, #5
   269d4:	b	269e4 <__assert_fail@plt+0x156c4>
   269d8:	mov	r1, #6
   269dc:	b	269e4 <__assert_fail@plt+0x156c4>
   269e0:	mov	r1, #7
   269e4:	ldr	r2, [r7, #8]
   269e8:	add	r0, r4, sl
   269ec:	mov	r3, r5
   269f0:	bl	1b780 <__assert_fail@plt+0xa460>
   269f4:	mov	r5, r0
   269f8:	add	r0, r5, sl
   269fc:	cmp	sl, r0
   26a00:	bcs	26a1c <__assert_fail@plt+0x156fc>
   26a04:	add	r1, r4, sl
   26a08:	ldrb	r2, [r1]
   26a0c:	subs	r5, r5, #1
   26a10:	ldrb	r2, [r9, r2]
   26a14:	strb	r2, [r1], #1
   26a18:	bne	26a08 <__assert_fail@plt+0x156e8>
   26a1c:	cmp	r8, #0
   26a20:	mov	r1, #0
   26a24:	addne	r2, r0, #1
   26a28:	strb	r1, [r4, r0]
   26a2c:	cmpne	r8, r2
   26a30:	bne	26a40 <__assert_fail@plt+0x15720>
   26a34:	mov	r0, r4
   26a38:	sub	sp, fp, #28
   26a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a40:	movw	r0, #8480	; 0x2120
   26a44:	mov	r1, r8
   26a48:	movt	r0, #4
   26a4c:	ldr	r3, [r0]
   26a50:	mov	r0, r4
   26a54:	sub	sp, fp, #28
   26a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a5c:	bx	r3
   26a60:	mvn	r0, #0
   26a64:	mov	r2, r6
   26a68:	udiv	r1, r0, r6
   26a6c:	mov	r0, #1
   26a70:	cmp	r1, r6
   26a74:	bcc	26a90 <__assert_fail@plt+0x15770>
   26a78:	mov	r0, #1
   26a7c:	mov	r2, r6
   26a80:	mul	r2, r2, r6
   26a84:	add	r0, r0, #1
   26a88:	cmp	r2, r1
   26a8c:	bls	26a80 <__assert_fail@plt+0x15760>
   26a90:	str	r2, [sp, #16]
   26a94:	str	r0, [sp, #12]
   26a98:	movw	r0, #8476	; 0x211c
   26a9c:	movt	r0, #4
   26aa0:	ldr	r1, [r0]
   26aa4:	lsl	r0, r5, #2
   26aa8:	str	r0, [sp, #8]
   26aac:	blx	r1
   26ab0:	mov	ip, r0
   26ab4:	cmp	r5, #1
   26ab8:	blt	26b28 <__assert_fail@plt+0x15808>
   26abc:	ldr	r7, [r7, #8]
   26ac0:	mov	r1, #0
   26ac4:	cmp	r5, #4
   26ac8:	bcc	26b0c <__assert_fail@plt+0x157ec>
   26acc:	add	r0, r7, r5, lsl #2
   26ad0:	cmp	ip, r0
   26ad4:	bcs	26ae4 <__assert_fail@plt+0x157c4>
   26ad8:	add	r0, ip, r5, lsl #2
   26adc:	cmp	r0, r7
   26ae0:	bhi	26b0c <__assert_fail@plt+0x157ec>
   26ae4:	bic	r1, r5, #-2147483645	; 0x80000003
   26ae8:	mov	r3, ip
   26aec:	mov	r0, r7
   26af0:	mov	r2, r1
   26af4:	vld1.32	{d16-d17}, [r0]!
   26af8:	subs	r2, r2, #4
   26afc:	vst1.32	{d16-d17}, [r3]!
   26b00:	bne	26af4 <__assert_fail@plt+0x157d4>
   26b04:	cmp	r5, r1
   26b08:	beq	26b28 <__assert_fail@plt+0x15808>
   26b0c:	add	r0, r7, r1, lsl #2
   26b10:	add	r2, ip, r1, lsl #2
   26b14:	sub	r1, r5, r1
   26b18:	ldr	r3, [r0], #4
   26b1c:	subs	r1, r1, #1
   26b20:	str	r3, [r2], #4
   26b24:	bne	26b18 <__assert_fail@plt+0x157f8>
   26b28:	mov	r1, r6
   26b2c:	add	r0, r4, sl
   26b30:	add	r2, sp, #12
   26b34:	mov	r3, ip
   26b38:	str	r5, [sp]
   26b3c:	mov	r6, ip
   26b40:	bl	1b87c <__assert_fail@plt+0xa55c>
   26b44:	mov	r5, r0
   26b48:	movw	r0, #8484	; 0x2124
   26b4c:	ldr	r1, [sp, #8]
   26b50:	movt	r0, #4
   26b54:	ldr	r2, [r0]
   26b58:	mov	r0, r6
   26b5c:	blx	r2
   26b60:	b	269f8 <__assert_fail@plt+0x156d8>
   26b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b68:	add	fp, sp, #28
   26b6c:	sub	sp, sp, #20
   26b70:	mov	r5, r2
   26b74:	cmp	r2, #0
   26b78:	mov	r8, r0
   26b7c:	subne	r0, r5, #2
   26b80:	cmpne	r0, #60	; 0x3c
   26b84:	bhi	27094 <__assert_fail@plt+0x15d74>
   26b88:	sub	r6, r1, #1
   26b8c:	bl	111dc <__ctype_b_loc@plt>
   26b90:	mov	r4, r0
   26b94:	ldr	r0, [r0]
   26b98:	ldrb	sl, [r6, #1]!
   26b9c:	add	r1, r0, sl, lsl #1
   26ba0:	ldrb	r1, [r1, #1]
   26ba4:	tst	r1, #32
   26ba8:	bne	26b98 <__assert_fail@plt+0x15878>
   26bac:	sub	r0, sl, #45	; 0x2d
   26bb0:	cmp	r5, #0
   26bb4:	clz	r0, r0
   26bb8:	lsr	r1, r0, #5
   26bbc:	add	r7, r6, r1
   26bc0:	beq	26d6c <__assert_fail@plt+0x15a4c>
   26bc4:	ldrb	r0, [r7]
   26bc8:	cmp	r0, #0
   26bcc:	beq	26dac <__assert_fail@plt+0x15a8c>
   26bd0:	mov	r0, r7
   26bd4:	str	r8, [sp, #8]
   26bd8:	bl	11200 <strlen@plt>
   26bdc:	movw	r6, #8476	; 0x211c
   26be0:	str	r0, [sp, #4]
   26be4:	movt	r6, #4
   26be8:	ldr	r1, [r6]
   26bec:	blx	r1
   26bf0:	ldrb	r2, [r7]
   26bf4:	mov	r9, r0
   26bf8:	cmp	r2, #0
   26bfc:	beq	26d48 <__assert_fail@plt+0x15a28>
   26c00:	mvn	r0, #86	; 0x56
   26c04:	cmp	r5, #36	; 0x24
   26c08:	add	r1, r7, #1
   26c0c:	mov	r8, #0
   26c10:	mvngt	r0, #60	; 0x3c
   26c14:	ldr	r7, [r4]
   26c18:	uxtb	r3, r2
   26c1c:	add	r7, r7, r3, lsl #1
   26c20:	ldrb	r7, [r7, #1]
   26c24:	tst	r7, #32
   26c28:	bne	26c90 <__assert_fail@plt+0x15970>
   26c2c:	sub	r7, r2, #48	; 0x30
   26c30:	uxtb	r7, r7
   26c34:	cmp	r7, #9
   26c38:	bhi	26c4c <__assert_fail@plt+0x1592c>
   26c3c:	sub	r2, r3, #48	; 0x30
   26c40:	cmp	r2, r5
   26c44:	bcc	26c88 <__assert_fail@plt+0x15968>
   26c48:	b	26d48 <__assert_fail@plt+0x15a28>
   26c4c:	sub	r7, r2, #97	; 0x61
   26c50:	uxtb	r7, r7
   26c54:	cmp	r7, #25
   26c58:	bhi	26c6c <__assert_fail@plt+0x1594c>
   26c5c:	add	r2, r0, r3
   26c60:	cmp	r2, r5
   26c64:	bcc	26c88 <__assert_fail@plt+0x15968>
   26c68:	b	26d48 <__assert_fail@plt+0x15a28>
   26c6c:	sub	r2, r2, #65	; 0x41
   26c70:	uxtb	r2, r2
   26c74:	cmp	r2, #25
   26c78:	bhi	26d48 <__assert_fail@plt+0x15a28>
   26c7c:	sub	r2, r3, #55	; 0x37
   26c80:	cmp	r2, r5
   26c84:	bcs	26d48 <__assert_fail@plt+0x15a28>
   26c88:	strb	r2, [r9, r8]
   26c8c:	add	r8, r8, #1
   26c90:	ldrb	r2, [r1], #1
   26c94:	cmp	r2, #0
   26c98:	bne	26c14 <__assert_fail@plt+0x158f4>
   26c9c:	cmp	r8, #0
   26ca0:	beq	26d48 <__assert_fail@plt+0x15a28>
   26ca4:	cmp	r5, #63	; 0x3f
   26ca8:	bgt	26de0 <__assert_fail@plt+0x15ac0>
   26cac:	sub	r0, r5, #2
   26cb0:	cmp	r0, #30
   26cb4:	bhi	26f48 <__assert_fail@plt+0x15c28>
   26cb8:	add	r1, pc, #4
   26cbc:	mov	r4, #1
   26cc0:	ldr	pc, [r1, r0, lsl #2]
   26cc4:	andeq	r6, r2, r4, lsr #28
   26cc8:	andeq	r6, r2, r8, asr #30
   26ccc:	andeq	r6, r2, r0, asr #26
   26cd0:	andeq	r6, r2, r8, asr #30
   26cd4:	andeq	r6, r2, r8, asr #30
   26cd8:	andeq	r6, r2, r8, asr #30
   26cdc:	andeq	r6, r2, r8, lsl #28
   26ce0:	andeq	r6, r2, r8, asr #30
   26ce4:	andeq	r6, r2, r8, asr #30
   26ce8:	andeq	r6, r2, r8, asr #30
   26cec:	andeq	r6, r2, r8, asr #30
   26cf0:	andeq	r6, r2, r8, asr #30
   26cf4:	andeq	r6, r2, r8, asr #30
   26cf8:	andeq	r6, r2, r8, asr #30
   26cfc:	andeq	r6, r2, r0, lsl #28
   26d00:	andeq	r6, r2, r8, asr #30
   26d04:	andeq	r6, r2, r8, asr #30
   26d08:	andeq	r6, r2, r8, asr #30
   26d0c:	andeq	r6, r2, r8, asr #30
   26d10:	andeq	r6, r2, r8, asr #30
   26d14:	andeq	r6, r2, r8, asr #30
   26d18:	andeq	r6, r2, r8, asr #30
   26d1c:	andeq	r6, r2, r8, asr #30
   26d20:	andeq	r6, r2, r8, asr #30
   26d24:	andeq	r6, r2, r8, asr #30
   26d28:	andeq	r6, r2, r8, asr #30
   26d2c:	andeq	r6, r2, r8, asr #30
   26d30:	andeq	r6, r2, r8, asr #30
   26d34:	andeq	r6, r2, r8, asr #30
   26d38:	andeq	r6, r2, r8, asr #30
   26d3c:	andeq	r6, r2, r0, lsl lr
   26d40:	mov	r4, #2
   26d44:	b	26e24 <__assert_fail@plt+0x15b04>
   26d48:	movw	r0, #8484	; 0x2124
   26d4c:	ldr	r1, [sp, #4]
   26d50:	movt	r0, #4
   26d54:	ldr	r2, [r0]
   26d58:	mov	r0, r9
   26d5c:	blx	r2
   26d60:	mvn	r0, #0
   26d64:	mov	r4, #0
   26d68:	b	27084 <__assert_fail@plt+0x15d64>
   26d6c:	ldrb	r0, [r6, r1]
   26d70:	cmp	r0, #48	; 0x30
   26d74:	bne	26da0 <__assert_fail@plt+0x15a80>
   26d78:	add	r0, r6, r1
   26d7c:	ldrb	r1, [r0, #1]
   26d80:	cmp	r1, #97	; 0x61
   26d84:	bgt	26db8 <__assert_fail@plt+0x15a98>
   26d88:	cmp	r1, #66	; 0x42
   26d8c:	beq	26dd4 <__assert_fail@plt+0x15ab4>
   26d90:	cmp	r1, #88	; 0x58
   26d94:	beq	26dc8 <__assert_fail@plt+0x15aa8>
   26d98:	mov	r5, #8
   26d9c:	b	26bd0 <__assert_fail@plt+0x158b0>
   26da0:	mov	r5, #10
   26da4:	cmp	r0, #0
   26da8:	bne	26bd0 <__assert_fail@plt+0x158b0>
   26dac:	mvn	r0, #0
   26db0:	mov	r4, #0
   26db4:	b	27088 <__assert_fail@plt+0x15d68>
   26db8:	cmp	r1, #98	; 0x62
   26dbc:	beq	26dd4 <__assert_fail@plt+0x15ab4>
   26dc0:	cmp	r1, #120	; 0x78
   26dc4:	bne	26d98 <__assert_fail@plt+0x15a78>
   26dc8:	add	r7, r0, #2
   26dcc:	mov	r5, #16
   26dd0:	b	26bc4 <__assert_fail@plt+0x158a4>
   26dd4:	add	r7, r0, #2
   26dd8:	mov	r5, #2
   26ddc:	b	26bc4 <__assert_fail@plt+0x158a4>
   26de0:	cmp	r5, #64	; 0x40
   26de4:	beq	26e18 <__assert_fail@plt+0x15af8>
   26de8:	cmp	r5, #128	; 0x80
   26dec:	beq	26e20 <__assert_fail@plt+0x15b00>
   26df0:	cmp	r5, #256	; 0x100
   26df4:	bne	26f48 <__assert_fail@plt+0x15c28>
   26df8:	mov	r4, #8
   26dfc:	b	26e24 <__assert_fail@plt+0x15b04>
   26e00:	mov	r4, #4
   26e04:	b	26e24 <__assert_fail@plt+0x15b04>
   26e08:	mov	r4, #3
   26e0c:	b	26e24 <__assert_fail@plt+0x15b04>
   26e10:	mov	r4, #5
   26e14:	b	26e24 <__assert_fail@plt+0x15b04>
   26e18:	mov	r4, #6
   26e1c:	b	26e24 <__assert_fail@plt+0x15b04>
   26e20:	mov	r4, #7
   26e24:	ldr	r2, [sp, #8]
   26e28:	mul	r0, r4, r8
   26e2c:	add	r0, r0, #31
   26e30:	lsr	ip, r0, #5
   26e34:	ldr	r1, [r2]
   26e38:	cmp	r1, r0, lsr #5
   26e3c:	bge	26e7c <__assert_fail@plt+0x15b5c>
   26e40:	cmp	ip, #1
   26e44:	mov	r5, ip
   26e48:	mov	r7, ip
   26e4c:	movls	r5, #1
   26e50:	cmp	r1, #0
   26e54:	beq	26e84 <__assert_fail@plt+0x15b64>
   26e58:	ldr	r6, [sp, #8]
   26e5c:	movw	r0, #8480	; 0x2120
   26e60:	lsl	r1, r1, #2
   26e64:	lsl	r2, r5, #2
   26e68:	movt	r0, #4
   26e6c:	ldr	r3, [r0]
   26e70:	ldr	r0, [r6, #8]
   26e74:	blx	r3
   26e78:	b	26e94 <__assert_fail@plt+0x15b74>
   26e7c:	ldr	r0, [r2, #8]
   26e80:	b	26ebc <__assert_fail@plt+0x15b9c>
   26e84:	ldr	r1, [r6]
   26e88:	lsl	r0, r5, #2
   26e8c:	blx	r1
   26e90:	ldr	r6, [sp, #8]
   26e94:	str	r0, [r6, #8]
   26e98:	str	r5, [r6]
   26e9c:	mov	ip, r7
   26ea0:	ldr	r1, [r6, #4]
   26ea4:	cmp	r1, #0
   26ea8:	rsbmi	r1, r1, #0
   26eac:	cmp	r1, r5
   26eb0:	ldrgt	r2, [sp, #8]
   26eb4:	movgt	r1, #0
   26eb8:	strgt	r1, [r2, #4]
   26ebc:	sub	r2, r9, #1
   26ec0:	mov	r3, #0
   26ec4:	mov	r5, #0
   26ec8:	mov	r1, #0
   26ecc:	ldrb	r7, [r2, r8]
   26ed0:	orr	r5, r5, r7, lsl r3
   26ed4:	add	r3, r3, r4
   26ed8:	sub	r7, r8, #1
   26edc:	cmp	r3, #32
   26ee0:	bcc	26efc <__assert_fail@plt+0x15bdc>
   26ee4:	str	r5, [r0, r1, lsl #2]
   26ee8:	sub	r3, r3, #32
   26eec:	add	r1, r1, #1
   26ef0:	ldrb	r5, [r2, r8]
   26ef4:	sub	r6, r4, r3
   26ef8:	lsr	r5, r5, r6
   26efc:	cmp	r7, #0
   26f00:	mov	r8, r7
   26f04:	bne	26ecc <__assert_fail@plt+0x15bac>
   26f08:	cmp	r5, #0
   26f0c:	beq	26f24 <__assert_fail@plt+0x15c04>
   26f10:	str	r5, [r0, r1, lsl #2]
   26f14:	add	r4, r1, #1
   26f18:	cmp	r4, ip
   26f1c:	ble	27060 <__assert_fail@plt+0x15d40>
   26f20:	b	270b4 <__assert_fail@plt+0x15d94>
   26f24:	sub	r0, r0, #4
   26f28:	mov	r4, r1
   26f2c:	cmp	r1, #1
   26f30:	blt	27058 <__assert_fail@plt+0x15d38>
   26f34:	ldr	r2, [r0, r4, lsl #2]
   26f38:	sub	r1, r4, #1
   26f3c:	cmp	r2, #0
   26f40:	beq	26f28 <__assert_fail@plt+0x15c08>
   26f44:	b	27058 <__assert_fail@plt+0x15d38>
   26f48:	mvn	r0, #0
   26f4c:	mov	r2, r5
   26f50:	udiv	r1, r0, r5
   26f54:	mov	r0, #1
   26f58:	cmp	r1, r5
   26f5c:	bcc	26f78 <__assert_fail@plt+0x15c58>
   26f60:	mov	r0, #1
   26f64:	mov	r2, r5
   26f68:	mul	r2, r2, r5
   26f6c:	add	r0, r0, #1
   26f70:	cmp	r2, r1
   26f74:	bls	26f68 <__assert_fail@plt+0x15c48>
   26f78:	add	r1, r8, r0
   26f7c:	str	r2, [sp, #16]
   26f80:	str	r0, [sp, #12]
   26f84:	sub	r1, r1, #1
   26f88:	udiv	r4, r1, r0
   26f8c:	ldr	r0, [sp, #8]
   26f90:	ldr	r1, [r0]
   26f94:	cmp	r4, r1
   26f98:	ble	26fd4 <__assert_fail@plt+0x15cb4>
   26f9c:	cmp	r4, #1
   26fa0:	mov	r7, r4
   26fa4:	movle	r4, #1
   26fa8:	cmp	r1, #0
   26fac:	beq	26fe0 <__assert_fail@plt+0x15cc0>
   26fb0:	ldr	r6, [sp, #8]
   26fb4:	movw	r0, #8480	; 0x2120
   26fb8:	lsl	r1, r1, #2
   26fbc:	lsl	r2, r4, #2
   26fc0:	movt	r0, #4
   26fc4:	ldr	r3, [r0]
   26fc8:	ldr	r0, [r6, #8]
   26fcc:	blx	r3
   26fd0:	b	26ff0 <__assert_fail@plt+0x15cd0>
   26fd4:	ldr	r6, [r0, #8]
   26fd8:	mov	r7, r4
   26fdc:	b	2701c <__assert_fail@plt+0x15cfc>
   26fe0:	ldr	r1, [r6]
   26fe4:	lsl	r0, r4, #2
   26fe8:	blx	r1
   26fec:	ldr	r6, [sp, #8]
   26ff0:	str	r0, [r6, #8]
   26ff4:	str	r4, [r6]
   26ff8:	mov	r1, r0
   26ffc:	ldr	r0, [r6, #4]
   27000:	mov	r6, r1
   27004:	cmp	r0, #0
   27008:	rsbmi	r0, r0, #0
   2700c:	cmp	r0, r4
   27010:	ldrgt	r1, [sp, #8]
   27014:	movgt	r0, #0
   27018:	strgt	r0, [r1, #4]
   2701c:	add	r0, sp, #12
   27020:	mov	r1, r9
   27024:	mov	r2, r8
   27028:	mov	r3, r5
   2702c:	str	r0, [sp]
   27030:	mov	r0, r6
   27034:	bl	1bd3c <__assert_fail@plt+0xaa1c>
   27038:	cmp	r0, #0
   2703c:	ble	270d4 <__assert_fail@plt+0x15db4>
   27040:	mov	r4, r0
   27044:	sub	r0, r0, #1
   27048:	mov	ip, r7
   2704c:	ldr	r1, [r6, r0, lsl #2]
   27050:	cmp	r1, #0
   27054:	moveq	r4, r0
   27058:	cmp	r4, ip
   2705c:	bgt	270b4 <__assert_fail@plt+0x15d94>
   27060:	movw	r0, #8484	; 0x2124
   27064:	ldr	r1, [sp, #4]
   27068:	movt	r0, #4
   2706c:	ldr	r2, [r0]
   27070:	mov	r0, r9
   27074:	blx	r2
   27078:	cmp	sl, #45	; 0x2d
   2707c:	mov	r0, #0
   27080:	rsbeq	r4, r4, #0
   27084:	ldr	r8, [sp, #8]
   27088:	str	r4, [r8, #4]
   2708c:	sub	sp, fp, #28
   27090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27094:	movw	r0, #3810	; 0xee2
   27098:	movw	r1, #1588	; 0x634
   2709c:	movw	r3, #3849	; 0xf09
   270a0:	movw	r2, #4320	; 0x10e0
   270a4:	movt	r0, #3
   270a8:	movt	r1, #3
   270ac:	movt	r3, #3
   270b0:	bl	11320 <__assert_fail@plt>
   270b4:	movw	r0, #3907	; 0xf43
   270b8:	movw	r1, #1588	; 0x634
   270bc:	movw	r3, #3849	; 0xf09
   270c0:	movw	r2, #4408	; 0x1138
   270c4:	movt	r0, #3
   270c8:	movt	r1, #3
   270cc:	movt	r3, #3
   270d0:	bl	11320 <__assert_fail@plt>
   270d4:	movw	r0, #3900	; 0xf3c
   270d8:	movw	r1, #1588	; 0x634
   270dc:	movw	r3, #3849	; 0xf09
   270e0:	movw	r2, #4405	; 0x1135
   270e4:	movt	r0, #3
   270e8:	movt	r1, #3
   270ec:	movt	r3, #3
   270f0:	bl	11320 <__assert_fail@plt>
   270f4:	movw	ip, #1584	; 0x630
   270f8:	mov	r3, #0
   270fc:	movt	ip, #3
   27100:	str	r3, [r0]
   27104:	stmib	r0, {r3, ip}
   27108:	b	26b64 <__assert_fail@plt+0x15844>
   2710c:	push	{r4, r5, r6, sl, fp, lr}
   27110:	add	fp, sp, #16
   27114:	mov	r5, r0
   27118:	mov	r0, #0
   2711c:	bl	26818 <__assert_fail@plt+0x154f8>
   27120:	cmp	r0, #0
   27124:	moveq	r0, #0
   27128:	popeq	{r4, r5, r6, sl, fp, pc}
   2712c:	mov	r4, r0
   27130:	bl	11200 <strlen@plt>
   27134:	mov	r6, r0
   27138:	mov	r0, r4
   2713c:	mov	r1, #1
   27140:	mov	r3, r5
   27144:	mov	r2, r6
   27148:	bl	1114c <fwrite@plt>
   2714c:	mov	r5, r0
   27150:	movw	r0, #8484	; 0x2124
   27154:	add	r1, r6, #1
   27158:	movt	r0, #4
   2715c:	ldr	r2, [r0]
   27160:	mov	r0, r4
   27164:	blx	r2
   27168:	mov	r0, r5
   2716c:	pop	{r4, r5, r6, sl, fp, pc}
   27170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27174:	add	fp, sp, #28
   27178:	sub	sp, sp, #12
   2717c:	mov	r9, r1
   27180:	ldr	r1, [fp, #12]
   27184:	cmp	r1, #0
   27188:	bne	27360 <__assert_fail@plt+0x16040>
   2718c:	cmn	r2, #1
   27190:	mov	r8, r3
   27194:	cmpne	r2, #1
   27198:	bne	2736c <__assert_fail@plt+0x1604c>
   2719c:	ldr	r5, [fp, #8]
   271a0:	add	r1, r5, #1
   271a4:	cmp	r1, #3
   271a8:	bcs	2738c <__assert_fail@plt+0x1606c>
   271ac:	cmp	r5, #0
   271b0:	ldr	sl, [fp, #16]
   271b4:	str	r0, [sp, #4]
   271b8:	mvneq	r5, #0
   271bc:	subs	r6, r5, r2
   271c0:	lslne	r6, r8, #1
   271c4:	cmp	r2, #1
   271c8:	subeq	r1, r9, #1
   271cc:	rsbeq	r6, r6, #0
   271d0:	mlaeq	sl, r1, r8, sl
   271d4:	cmp	r5, #1
   271d8:	add	r1, sl, r8
   271dc:	subeq	sl, r1, #1
   271e0:	mul	r1, r8, r9
   271e4:	add	r2, r1, #3
   271e8:	ldr	r1, [r0]
   271ec:	lsr	r7, r2, #2
   271f0:	cmp	r1, r2, lsr #2
   271f4:	bge	2722c <__assert_fail@plt+0x15f0c>
   271f8:	cmp	r7, #1
   271fc:	mov	r4, r7
   27200:	movls	r4, #1
   27204:	cmp	r1, #0
   27208:	beq	27234 <__assert_fail@plt+0x15f14>
   2720c:	movw	r2, #8480	; 0x2120
   27210:	ldr	r0, [r0, #8]
   27214:	lsl	r1, r1, #2
   27218:	movt	r2, #4
   2721c:	ldr	r3, [r2]
   27220:	lsl	r2, r4, #2
   27224:	blx	r3
   27228:	b	27248 <__assert_fail@plt+0x15f28>
   2722c:	ldr	r0, [r0, #8]
   27230:	b	2726c <__assert_fail@plt+0x15f4c>
   27234:	movw	r0, #8476	; 0x211c
   27238:	movt	r0, #4
   2723c:	ldr	r1, [r0]
   27240:	lsl	r0, r4, #2
   27244:	blx	r1
   27248:	ldr	r2, [sp, #4]
   2724c:	str	r0, [r2, #8]
   27250:	str	r4, [r2]
   27254:	ldr	r1, [r2, #4]
   27258:	cmp	r1, #0
   2725c:	rsbmi	r1, r1, #0
   27260:	cmp	r1, r4
   27264:	movgt	r1, #0
   27268:	strgt	r1, [r2, #4]
   2726c:	cmp	r9, #0
   27270:	str	r7, [sp]
   27274:	beq	272f8 <__assert_fail@plt+0x15fd8>
   27278:	mul	r1, r5, r8
   2727c:	rsb	r4, r5, #0
   27280:	mov	lr, #0
   27284:	mov	r3, #0
   27288:	mov	r2, #0
   2728c:	rsb	r1, r1, #0
   27290:	str	r1, [sp, #8]
   27294:	cmp	r8, #0
   27298:	beq	272e8 <__assert_fail@plt+0x15fc8>
   2729c:	mov	ip, r6
   272a0:	mov	r5, r8
   272a4:	mov	r7, sl
   272a8:	ldrb	r6, [r7]
   272ac:	lsl	r1, r3, #3
   272b0:	add	r3, r3, #1
   272b4:	cmp	r3, #4
   272b8:	orr	r2, r2, r6, lsl r1
   272bc:	bne	272d0 <__assert_fail@plt+0x15fb0>
   272c0:	str	r2, [r0, lr, lsl #2]
   272c4:	add	lr, lr, #1
   272c8:	mov	r2, #0
   272cc:	mov	r3, #0
   272d0:	add	r7, r7, r4
   272d4:	subs	r5, r5, #1
   272d8:	bne	272a8 <__assert_fail@plt+0x15f88>
   272dc:	ldr	r1, [sp, #8]
   272e0:	mov	r6, ip
   272e4:	add	sl, sl, r1
   272e8:	add	sl, sl, r6
   272ec:	subs	r9, r9, #1
   272f0:	bne	27294 <__assert_fail@plt+0x15f74>
   272f4:	b	27304 <__assert_fail@plt+0x15fe4>
   272f8:	mov	r2, #0
   272fc:	mov	r3, #0
   27300:	mov	lr, #0
   27304:	cmp	r3, #0
   27308:	ldr	r3, [sp]
   2730c:	add	r7, lr, #1
   27310:	mov	r1, lr
   27314:	movne	r1, r7
   27318:	cmp	r1, r3
   2731c:	bne	273ac <__assert_fail@plt+0x1608c>
   27320:	ldr	r3, [sp, #4]
   27324:	cmp	r2, #0
   27328:	beq	27334 <__assert_fail@plt+0x16014>
   2732c:	str	r2, [r0, lr, lsl #2]
   27330:	b	27354 <__assert_fail@plt+0x16034>
   27334:	sub	r0, r0, #4
   27338:	mov	r7, lr
   2733c:	cmp	lr, #1
   27340:	blt	27354 <__assert_fail@plt+0x16034>
   27344:	ldr	r1, [r0, r7, lsl #2]
   27348:	sub	lr, r7, #1
   2734c:	cmp	r1, #0
   27350:	beq	27338 <__assert_fail@plt+0x16018>
   27354:	str	r7, [r3, #4]
   27358:	sub	sp, fp, #28
   2735c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27360:	movw	r0, #3919	; 0xf4f
   27364:	movt	r0, #3
   27368:	bl	22464 <__assert_fail@plt+0x11144>
   2736c:	movw	r0, #3952	; 0xf70
   27370:	movw	r1, #1588	; 0x634
   27374:	movw	r3, #3978	; 0xf8a
   27378:	movw	r2, #4468	; 0x1174
   2737c:	movt	r0, #3
   27380:	movt	r1, #3
   27384:	movt	r3, #3
   27388:	bl	11320 <__assert_fail@plt>
   2738c:	movw	r0, #4058	; 0xfda
   27390:	movw	r1, #1588	; 0x634
   27394:	movw	r3, #3978	; 0xf8a
   27398:	movw	r2, #4469	; 0x1175
   2739c:	movt	r0, #3
   273a0:	movt	r1, #3
   273a4:	movt	r3, #3
   273a8:	bl	11320 <__assert_fail@plt>
   273ac:	movw	r0, #4086	; 0xff6
   273b0:	movw	r1, #1588	; 0x634
   273b4:	movw	r3, #3978	; 0xf8a
   273b8:	movw	r2, #4507	; 0x119b
   273bc:	movt	r0, #3
   273c0:	movt	r1, #3
   273c4:	movt	r3, #3
   273c8:	bl	11320 <__assert_fail@plt>
   273cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273d0:	add	fp, sp, #28
   273d4:	sub	sp, sp, #12
   273d8:	mov	r4, r2
   273dc:	ldr	r2, [fp, #12]
   273e0:	cmp	r2, #0
   273e4:	bne	275b0 <__assert_fail@plt+0x16290>
   273e8:	cmn	r4, #1
   273ec:	mov	r8, r3
   273f0:	cmpne	r4, #1
   273f4:	bne	275bc <__assert_fail@plt+0x1629c>
   273f8:	ldr	r5, [fp, #8]
   273fc:	add	r2, r5, #1
   27400:	cmp	r2, #3
   27404:	bcs	275dc <__assert_fail@plt+0x162bc>
   27408:	ldr	r9, [fp, #16]
   2740c:	cmp	r8, #0
   27410:	ldr	r7, [r9, #4]
   27414:	beq	27570 <__assert_fail@plt+0x16250>
   27418:	cmp	r7, #0
   2741c:	beq	2759c <__assert_fail@plt+0x1627c>
   27420:	ldr	r2, [r9, #8]
   27424:	rsbmi	r7, r7, #0
   27428:	add	r2, r2, r7, lsl #2
   2742c:	ldr	r3, [r2, #-4]
   27430:	cmp	r3, #0
   27434:	beq	275fc <__assert_fail@plt+0x162dc>
   27438:	str	r1, [sp, #4]
   2743c:	add	r1, r8, r7, lsl #2
   27440:	sub	r6, r1, #5
   27444:	mov	r1, #0
   27448:	lsr	r2, r3, #8
   2744c:	cmp	r1, r3, lsr #8
   27450:	add	r6, r6, #1
   27454:	mov	r3, r2
   27458:	bne	27448 <__assert_fail@plt+0x16128>
   2745c:	udiv	sl, r6, r8
   27460:	cmp	r0, #0
   27464:	bne	2747c <__assert_fail@plt+0x1615c>
   27468:	movw	r1, #8476	; 0x211c
   2746c:	mul	r0, sl, r8
   27470:	movt	r1, #4
   27474:	ldr	r1, [r1]
   27478:	blx	r1
   2747c:	cmp	r5, #0
   27480:	str	r0, [sp]
   27484:	mov	r3, #0
   27488:	mvneq	r5, #0
   2748c:	subs	lr, r5, r4
   27490:	lslne	lr, r8, #1
   27494:	cmp	r4, #1
   27498:	subeq	r1, sl, #1
   2749c:	rsbeq	lr, lr, #0
   274a0:	mlaeq	r0, r1, r8, r0
   274a4:	cmp	r6, r8
   274a8:	mov	r6, #0
   274ac:	bcc	2753c <__assert_fail@plt+0x1621c>
   274b0:	sub	r1, r8, #1
   274b4:	cmp	r5, #1
   274b8:	mov	r6, #0
   274bc:	mov	r4, #0
   274c0:	mov	r3, #0
   274c4:	addeq	r0, r0, r1
   274c8:	mul	r1, r5, r8
   274cc:	rsb	r1, r1, #0
   274d0:	str	r1, [sp, #8]
   274d4:	rsb	r1, r5, #0
   274d8:	mov	r5, #0
   274dc:	cmp	r8, #0
   274e0:	beq	2752c <__assert_fail@plt+0x1620c>
   274e4:	mov	ip, sl
   274e8:	mov	sl, r8
   274ec:	mov	r2, r0
   274f0:	cmp	r4, #0
   274f4:	bne	2750c <__assert_fail@plt+0x161ec>
   274f8:	cmp	r6, r7
   274fc:	mov	r4, #4
   27500:	ldrlt	r5, [r9, #8]
   27504:	ldrlt	r5, [r5, r6, lsl #2]
   27508:	addlt	r6, r6, #1
   2750c:	strb	r5, [r2], r1
   27510:	subs	sl, sl, #1
   27514:	sub	r4, r4, #1
   27518:	lsr	r5, r5, #8
   2751c:	bne	274f0 <__assert_fail@plt+0x161d0>
   27520:	ldr	r2, [sp, #8]
   27524:	mov	sl, ip
   27528:	add	r0, r0, r2
   2752c:	add	r3, r3, #1
   27530:	add	r0, r0, lr
   27534:	cmp	r3, sl
   27538:	bcc	274dc <__assert_fail@plt+0x161bc>
   2753c:	cmp	r6, r7
   27540:	bne	2761c <__assert_fail@plt+0x162fc>
   27544:	ldm	sp, {r0, r1}
   27548:	cmp	r3, sl
   2754c:	beq	275a0 <__assert_fail@plt+0x16280>
   27550:	movw	r0, #4271	; 0x10af
   27554:	movw	r1, #1588	; 0x634
   27558:	movw	r3, #4141	; 0x102d
   2755c:	movw	r2, #4612	; 0x1204
   27560:	movt	r0, #3
   27564:	movt	r1, #3
   27568:	movt	r3, #3
   2756c:	bl	11320 <__assert_fail@plt>
   27570:	mov	sl, #0
   27574:	cmp	r7, #0
   27578:	beq	275a0 <__assert_fail@plt+0x16280>
   2757c:	movw	r0, #4224	; 0x1080
   27580:	movw	r1, #1588	; 0x634
   27584:	movw	r3, #4141	; 0x102d
   27588:	movw	r2, #4528	; 0x11b0
   2758c:	movt	r0, #3
   27590:	movt	r1, #3
   27594:	movt	r3, #3
   27598:	bl	11320 <__assert_fail@plt>
   2759c:	mov	sl, #0
   275a0:	cmp	r1, #0
   275a4:	strne	sl, [r1]
   275a8:	sub	sp, fp, #28
   275ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275b0:	movw	r0, #4108	; 0x100c
   275b4:	movt	r0, #3
   275b8:	bl	22464 <__assert_fail@plt+0x11144>
   275bc:	movw	r0, #3952	; 0xf70
   275c0:	movw	r1, #1588	; 0x634
   275c4:	movw	r3, #4141	; 0x102d
   275c8:	movw	r2, #4526	; 0x11ae
   275cc:	movt	r0, #3
   275d0:	movt	r1, #3
   275d4:	movt	r3, #3
   275d8:	bl	11320 <__assert_fail@plt>
   275dc:	movw	r0, #4058	; 0xfda
   275e0:	movw	r1, #1588	; 0x634
   275e4:	movw	r3, #4141	; 0x102d
   275e8:	movw	r2, #4527	; 0x11af
   275ec:	movt	r0, #3
   275f0:	movt	r1, #3
   275f4:	movt	r3, #3
   275f8:	bl	11320 <__assert_fail@plt>
   275fc:	movw	r0, #4253	; 0x109d
   27600:	movw	r1, #1588	; 0x634
   27604:	movw	r3, #4141	; 0x102d
   27608:	movw	r2, #4548	; 0x11c4
   2760c:	movt	r0, #3
   27610:	movt	r1, #3
   27614:	movt	r3, #3
   27618:	bl	11320 <__assert_fail@plt>
   2761c:	movw	r0, #4263	; 0x10a7
   27620:	movw	r1, #1588	; 0x634
   27624:	movw	r3, #4141	; 0x102d
   27628:	movw	r2, #4611	; 0x1203
   2762c:	movt	r0, #3
   27630:	movt	r1, #3
   27634:	movt	r3, #3
   27638:	bl	11320 <__assert_fail@plt>
   2763c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27640:	add	fp, sp, #28
   27644:	sub	sp, sp, #4
   27648:	cmp	r1, #0
   2764c:	moveq	r0, #0
   27650:	subeq	sp, fp, #28
   27654:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27658:	mov	lr, r0
   2765c:	mov	r0, #0
   27660:	b	2768c <__assert_fail@plt+0x1636c>
   27664:	lsr	r3, r5, r4
   27668:	cmp	r7, ip
   2766c:	add	r1, r6, r1
   27670:	strb	r3, [lr, r0]
   27674:	mov	r3, #0
   27678:	add	r0, r0, #1
   2767c:	movwcs	r3, #1
   27680:	adds	r1, r1, r3
   27684:	subeq	sp, fp, #28
   27688:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2768c:	ldm	r2, {r4, ip}
   27690:	ldr	r5, [r2, #12]
   27694:	rsb	r8, r4, #32
   27698:	lsr	r9, r5, #16
   2769c:	uxth	r5, r5
   276a0:	lsr	r6, r1, r8
   276a4:	lsr	r7, r6, #16
   276a8:	uxth	r6, r6
   276ac:	mul	sl, r6, r9
   276b0:	mul	r6, r6, r5
   276b4:	mla	sl, r7, r5, sl
   276b8:	mul	r5, r7, r5
   276bc:	mul	r7, r7, r9
   276c0:	add	r3, sl, r6, lsr #16
   276c4:	cmp	r3, r5
   276c8:	lsr	r5, r3, #16
   276cc:	pkhbt	r3, r6, r3, lsl #16
   276d0:	add	r5, r5, r1, lsr r8
   276d4:	addcc	r7, r7, #65536	; 0x10000
   276d8:	adds	r3, r3, r1, lsl r4
   276dc:	add	r5, r5, #1
   276e0:	adc	r6, r5, r7
   276e4:	mul	r5, r6, ip
   276e8:	rsb	r5, r5, r1, lsl r4
   276ec:	mov	r1, #0
   276f0:	cmp	r5, r3
   276f4:	mvnhi	r1, #0
   276f8:	and	r3, ip, r1
   276fc:	add	r7, r3, r5
   27700:	mvn	r3, #0
   27704:	subs	r5, r7, ip
   27708:	movcc	r5, r7
   2770c:	tst	r5, r3, lsr r8
   27710:	beq	27664 <__assert_fail@plt+0x16344>
   27714:	movw	r0, #4537	; 0x11b9
   27718:	movw	r1, #1588	; 0x634
   2771c:	movw	r3, #4596	; 0x11f4
   27720:	movw	r2, #1259	; 0x4eb
   27724:	movt	r0, #3
   27728:	movt	r1, #3
   2772c:	movt	r3, #3
   27730:	bl	11320 <__assert_fail@plt>
   27734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27738:	add	fp, sp, #28
   2773c:	sub	sp, sp, #60	; 0x3c
   27740:	ldr	r6, [fp, #12]
   27744:	cmp	r6, #2
   27748:	ble	27ac4 <__assert_fail@plt+0x167a4>
   2774c:	cmp	r2, r6
   27750:	blt	27ae4 <__assert_fail@plt+0x167c4>
   27754:	ldr	r5, [fp, #8]
   27758:	sub	r7, r6, #1
   2775c:	str	r7, [fp, #-36]	; 0xffffffdc
   27760:	ldr	sl, [r5, r7, lsl #2]
   27764:	cmp	sl, #0
   27768:	bge	27b04 <__assert_fail@plt+0x167e4>
   2776c:	sub	r4, r6, #2
   27770:	ldr	r7, [fp, #16]
   27774:	add	r8, r1, r2, lsl #2
   27778:	sub	ip, r2, r6
   2777c:	str	r1, [fp, #-40]	; 0xffffffd8
   27780:	str	r0, [sp, #24]
   27784:	str	sl, [sp, #44]	; 0x2c
   27788:	ldr	r5, [r5, r4, lsl #2]
   2778c:	str	r4, [sp, #20]
   27790:	lsr	r2, r5, #16
   27794:	str	r5, [fp, #-32]	; 0xffffffe0
   27798:	str	r2, [sp, #16]
   2779c:	uxth	r2, r5
   277a0:	str	r2, [sp, #12]
   277a4:	lsr	r2, r7, #16
   277a8:	str	r2, [sp, #8]
   277ac:	uxth	r2, r7
   277b0:	str	r2, [sp, #4]
   277b4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   277b8:	cmp	r3, sl
   277bc:	add	lr, ip, r2
   277c0:	ldreq	r2, [fp, #-32]	; 0xffffffe0
   277c4:	ldr	r9, [r1, lr, lsl #2]
   277c8:	cmpeq	r9, r2
   277cc:	beq	278e0 <__assert_fail@plt+0x165c0>
   277d0:	ldr	r7, [sp, #8]
   277d4:	ldr	r5, [sp, #4]
   277d8:	uxth	r0, r3
   277dc:	lsr	r2, r3, #16
   277e0:	mov	r1, sl
   277e4:	mov	sl, ip
   277e8:	ldr	ip, [sp, #16]
   277ec:	mul	r6, r0, r7
   277f0:	mul	r0, r0, r5
   277f4:	mla	r6, r2, r5, r6
   277f8:	add	r4, r6, r0, lsr #16
   277fc:	mul	r6, r2, r5
   27800:	mul	r5, r2, r7
   27804:	ldr	r7, [sp, #12]
   27808:	cmp	r4, r6
   2780c:	pkhbt	r0, r0, r4, lsl #16
   27810:	add	r3, r3, r4, lsr #16
   27814:	addcc	r5, r5, #65536	; 0x10000
   27818:	adds	r0, r0, r9
   2781c:	adc	r2, r3, r5
   27820:	str	r0, [sp, #40]	; 0x28
   27824:	add	r3, r3, r5
   27828:	lsr	r0, r2, #16
   2782c:	uxth	r4, r2
   27830:	sbc	r5, r3, #0
   27834:	sub	r3, r9, r1
   27838:	ldr	r9, [sp, #40]	; 0x28
   2783c:	mul	r6, r0, r7
   27840:	mul	lr, r4, r7
   27844:	mul	r7, r4, ip
   27848:	mul	r0, r0, ip
   2784c:	mls	r3, r2, r1, r3
   27850:	mla	r6, r4, ip, r6
   27854:	mov	r4, r1
   27858:	ldr	r1, [fp, #-40]	; 0xffffffd8
   2785c:	mov	ip, sl
   27860:	add	r6, r6, lr, lsr #16
   27864:	cmp	r6, r7
   27868:	sub	r3, r3, r6, lsr #16
   2786c:	addcc	r0, r0, #65536	; 0x10000
   27870:	sub	r3, r3, r0
   27874:	ldr	r0, [sp, #20]
   27878:	add	r0, sl, r0
   2787c:	ldr	r7, [r1, r0, lsl #2]
   27880:	ldr	r1, [fp, #-32]	; 0xffffffe0
   27884:	str	r0, [sp, #36]	; 0x24
   27888:	pkhbt	r0, lr, r6, lsl #16
   2788c:	mov	r6, #0
   27890:	cmp	r7, r1
   27894:	sub	r7, r7, r1
   27898:	subcc	r3, r3, #1
   2789c:	cmp	r7, r0
   278a0:	sub	r0, r7, r0
   278a4:	subcc	r3, r3, #1
   278a8:	cmp	r3, r9
   278ac:	mvncs	r6, #0
   278b0:	and	lr, r4, r6
   278b4:	and	r6, r1, r6
   278b8:	adds	sl, r6, r0
   278bc:	adc	r6, lr, r3
   278c0:	cmp	r3, r9
   278c4:	movcc	r5, r2
   278c8:	cmp	r6, r4
   278cc:	add	r3, r5, #1
   278d0:	bcs	27954 <__assert_fail@plt+0x16634>
   278d4:	ldr	r7, [fp, #12]
   278d8:	ldr	r2, [fp, #8]
   278dc:	b	2796c <__assert_fail@plt+0x1664c>
   278e0:	ldr	r6, [fp, #12]
   278e4:	ldr	r2, [fp, #8]
   278e8:	mov	r3, #0
   278ec:	ldr	r7, [r2], #4
   278f0:	lsr	r5, r7, #16
   278f4:	lsl	r5, r5, #16
   278f8:	sub	r5, r5, r7, lsr #16
   278fc:	uxth	r7, r7
   27900:	rsb	r7, r7, r7, lsl #16
   27904:	add	r4, r5, r7
   27908:	add	r4, r4, r7, lsr #16
   2790c:	cmp	r4, r5
   27910:	pkhbt	r7, r7, r4, lsl #16
   27914:	addcc	r5, r5, #65536	; 0x10000
   27918:	adds	sl, r7, r3
   2791c:	ldr	r7, [r8, -r6, lsl #2]
   27920:	adc	r9, r5, r4, lsr #16
   27924:	sub	r3, r7, sl
   27928:	str	r3, [r8, -r6, lsl #2]
   2792c:	add	r3, r5, r4, lsr #16
   27930:	adc	r3, r3, #1
   27934:	cmp	r7, sl
   27938:	movcs	r3, r9
   2793c:	subs	r6, r6, #1
   27940:	bne	278ec <__assert_fail@plt+0x165cc>
   27944:	ldr	r3, [r1, lr, lsl #2]
   27948:	ldr	sl, [sp, #44]	; 0x2c
   2794c:	mvn	r2, #0
   27950:	b	27a98 <__assert_fail@plt+0x16778>
   27954:	ldr	r7, [fp, #12]
   27958:	ldr	r2, [fp, #8]
   2795c:	cmp	sl, r1
   27960:	bcs	27974 <__assert_fail@plt+0x16654>
   27964:	cmp	r6, r4
   27968:	bhi	27974 <__assert_fail@plt+0x16654>
   2796c:	str	sl, [sp, #28]
   27970:	b	27994 <__assert_fail@plt+0x16674>
   27974:	cmp	sl, r1
   27978:	mov	r0, #0
   2797c:	sub	sl, sl, r1
   27980:	add	r3, r3, #1
   27984:	mvncc	r0, #0
   27988:	str	sl, [sp, #28]
   2798c:	sub	r0, r0, r4
   27990:	add	r6, r0, r6
   27994:	str	r6, [sp, #32]
   27998:	lsr	sl, r3, #16
   2799c:	uxth	r9, r3
   279a0:	mov	r1, #0
   279a4:	mov	r0, r2
   279a8:	str	r3, [sp, #40]	; 0x28
   279ac:	ldr	r5, [r0], #4
   279b0:	ldr	r2, [r8, -r7, lsl #2]
   279b4:	uxth	r6, r5
   279b8:	lsr	r5, r5, #16
   279bc:	mul	r3, r6, sl
   279c0:	mul	r6, r6, r9
   279c4:	mul	lr, r5, r9
   279c8:	mla	r3, r5, r9, r3
   279cc:	mul	r5, r5, sl
   279d0:	add	r3, r3, r6, lsr #16
   279d4:	cmp	r3, lr
   279d8:	pkhbt	r6, r6, r3, lsl #16
   279dc:	addcc	r5, r5, #65536	; 0x10000
   279e0:	adds	r6, r6, r1
   279e4:	sub	r1, r2, r6
   279e8:	adc	r4, r5, r3, lsr #16
   279ec:	str	r1, [r8, -r7, lsl #2]
   279f0:	add	r1, r5, r3, lsr #16
   279f4:	sub	r7, r7, #1
   279f8:	adc	r1, r1, #1
   279fc:	cmp	r2, r6
   27a00:	movcs	r1, r4
   27a04:	cmp	r7, #2
   27a08:	bne	279ac <__assert_fail@plt+0x1668c>
   27a0c:	ldr	r0, [sp, #28]
   27a10:	ldr	r2, [sp, #36]	; 0x24
   27a14:	subs	r0, r0, r1
   27a18:	ldr	r1, [fp, #-40]	; 0xffffffd8
   27a1c:	str	r0, [r1, r2, lsl #2]
   27a20:	ldr	r2, [sp, #32]
   27a24:	mov	r0, #0
   27a28:	movwcc	r0, #1
   27a2c:	subs	r3, r2, r0
   27a30:	bcs	27a8c <__assert_fail@plt+0x1676c>
   27a34:	ldr	r4, [fp, #8]
   27a38:	ldr	r2, [fp, #12]
   27a3c:	ldr	r0, [sp, #24]
   27a40:	ldr	sl, [sp, #44]	; 0x2c
   27a44:	mov	r6, #0
   27a48:	mov	r9, #0
   27a4c:	ldr	r7, [r8, -r2, lsl #2]
   27a50:	ldr	lr, [r4], #4
   27a54:	adds	r5, r7, r6
   27a58:	adds	lr, r5, lr
   27a5c:	adc	r5, r9, #0
   27a60:	adds	r6, r7, r6
   27a64:	str	lr, [r8, -r2, lsl #2]
   27a68:	sub	r2, r2, #1
   27a6c:	adc	r6, r5, #0
   27a70:	cmp	r2, #1
   27a74:	bne	27a4c <__assert_fail@plt+0x1672c>
   27a78:	add	r2, r3, sl
   27a7c:	add	r3, r2, r6
   27a80:	ldr	r2, [sp, #40]	; 0x28
   27a84:	sub	r2, r2, #1
   27a88:	b	27a98 <__assert_fail@plt+0x16778>
   27a8c:	ldr	r0, [sp, #24]
   27a90:	ldr	sl, [sp, #44]	; 0x2c
   27a94:	ldr	r2, [sp, #40]	; 0x28
   27a98:	cmp	r0, #0
   27a9c:	sub	r8, r8, #4
   27aa0:	strne	r2, [r0, ip, lsl #2]
   27aa4:	sub	r2, ip, #1
   27aa8:	cmp	ip, #0
   27aac:	mov	ip, r2
   27ab0:	bgt	277b4 <__assert_fail@plt+0x16494>
   27ab4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27ab8:	str	r3, [r1, r0, lsl #2]
   27abc:	sub	sp, fp, #28
   27ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ac4:	movw	r0, #5677	; 0x162d
   27ac8:	movw	r1, #1588	; 0x634
   27acc:	movw	r3, #5684	; 0x1634
   27ad0:	movw	r2, #1057	; 0x421
   27ad4:	movt	r0, #3
   27ad8:	movt	r1, #3
   27adc:	movt	r3, #3
   27ae0:	bl	11320 <__assert_fail@plt>
   27ae4:	movw	r0, #4985	; 0x1379
   27ae8:	movw	r1, #1588	; 0x634
   27aec:	movw	r3, #5684	; 0x1634
   27af0:	movw	r2, #1058	; 0x422
   27af4:	movt	r0, #3
   27af8:	movt	r1, #3
   27afc:	movt	r3, #3
   27b00:	bl	11320 <__assert_fail@plt>
   27b04:	movw	r0, #5775	; 0x168f
   27b08:	movw	r1, #1588	; 0x634
   27b0c:	movw	r3, #5684	; 0x1634
   27b10:	movw	r2, #1063	; 0x427
   27b14:	movt	r0, #3
   27b18:	movt	r1, #3
   27b1c:	movt	r3, #3
   27b20:	bl	11320 <__assert_fail@plt>
   27b24:	push	{r4, r5, fp, lr}
   27b28:	add	fp, sp, #8
   27b2c:	cmp	r0, #0
   27b30:	beq	27bc4 <__assert_fail@plt+0x168a4>
   27b34:	mov	r1, #47	; 0x2f
   27b38:	mov	r4, r0
   27b3c:	bl	112d8 <strrchr@plt>
   27b40:	cmp	r0, #0
   27b44:	mov	r5, r4
   27b48:	addne	r5, r0, #1
   27b4c:	sub	r0, r5, r4
   27b50:	cmp	r0, #7
   27b54:	blt	27ba8 <__assert_fail@plt+0x16888>
   27b58:	movw	r1, #6456	; 0x1938
   27b5c:	sub	r0, r5, #7
   27b60:	mov	r2, #7
   27b64:	movt	r1, #3
   27b68:	bl	11308 <strncmp@plt>
   27b6c:	cmp	r0, #0
   27b70:	bne	27ba8 <__assert_fail@plt+0x16888>
   27b74:	movw	r1, #6464	; 0x1940
   27b78:	mov	r0, r5
   27b7c:	mov	r2, #3
   27b80:	movt	r1, #3
   27b84:	bl	11308 <strncmp@plt>
   27b88:	cmp	r0, #0
   27b8c:	beq	27b98 <__assert_fail@plt+0x16878>
   27b90:	mov	r4, r5
   27b94:	b	27ba8 <__assert_fail@plt+0x16888>
   27b98:	movw	r0, #8552	; 0x2168
   27b9c:	add	r4, r5, #3
   27ba0:	movt	r0, #4
   27ba4:	str	r4, [r0]
   27ba8:	movw	r0, #8556	; 0x216c
   27bac:	movt	r0, #4
   27bb0:	str	r4, [r0]
   27bb4:	movw	r0, #8608	; 0x21a0
   27bb8:	movt	r0, #4
   27bbc:	str	r4, [r0]
   27bc0:	pop	{r4, r5, fp, pc}
   27bc4:	movw	r0, #8568	; 0x2178
   27bc8:	mov	r1, #55	; 0x37
   27bcc:	mov	r2, #1
   27bd0:	movt	r0, #4
   27bd4:	ldr	r3, [r0]
   27bd8:	movw	r0, #6400	; 0x1900
   27bdc:	movt	r0, #3
   27be0:	bl	1114c <fwrite@plt>
   27be4:	bl	11314 <abort@plt>
   27be8:	push	{r4, r5, r6, sl, fp, lr}
   27bec:	add	fp, sp, #16
   27bf0:	sub	sp, sp, #8
   27bf4:	mov	r4, r0
   27bf8:	mov	r0, #0
   27bfc:	mov	r2, #5
   27c00:	mov	r1, r4
   27c04:	bl	110f8 <dcgettext@plt>
   27c08:	cmp	r0, r4
   27c0c:	beq	27c2c <__assert_fail@plt+0x1690c>
   27c10:	mov	r1, r4
   27c14:	mov	r5, r0
   27c18:	bl	27c80 <__assert_fail@plt+0x16960>
   27c1c:	cmp	r0, #0
   27c20:	beq	27c34 <__assert_fail@plt+0x16914>
   27c24:	mov	r6, r5
   27c28:	b	27c74 <__assert_fail@plt+0x16954>
   27c2c:	mov	r6, r4
   27c30:	b	27c74 <__assert_fail@plt+0x16954>
   27c34:	mov	r0, r5
   27c38:	bl	11200 <strlen@plt>
   27c3c:	mov	r6, r0
   27c40:	mov	r0, r4
   27c44:	bl	11200 <strlen@plt>
   27c48:	add	r0, r6, r0
   27c4c:	add	r0, r0, #4
   27c50:	bl	2aaec <__assert_fail@plt+0x197cc>
   27c54:	movw	r3, #6468	; 0x1944
   27c58:	mov	r1, #1
   27c5c:	mvn	r2, #0
   27c60:	mov	r6, r0
   27c64:	str	r5, [sp]
   27c68:	str	r4, [sp, #4]
   27c6c:	movt	r3, #3
   27c70:	bl	11230 <__sprintf_chk@plt>
   27c74:	mov	r0, r6
   27c78:	sub	sp, fp, #16
   27c7c:	pop	{r4, r5, r6, sl, fp, pc}
   27c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c84:	add	fp, sp, #28
   27c88:	sub	sp, sp, #124	; 0x7c
   27c8c:	mov	r4, r0
   27c90:	mov	r0, r1
   27c94:	mov	r1, #2
   27c98:	bl	2a16c <__assert_fail@plt+0x18e4c>
   27c9c:	mov	sl, r0
   27ca0:	ldrb	r0, [r4]
   27ca4:	cmp	r0, #0
   27ca8:	beq	27f14 <__assert_fail@plt+0x16bf4>
   27cac:	add	r5, sp, #12
   27cb0:	add	r6, sp, #68	; 0x44
   27cb4:	mov	r9, #0
   27cb8:	add	r8, r6, #4
   27cbc:	add	r0, r5, #4
   27cc0:	str	r0, [sp, #4]
   27cc4:	str	r8, [sp]
   27cc8:	mov	r0, r4
   27ccc:	mov	r1, sl
   27cd0:	bl	2b778 <__assert_fail@plt+0x1a458>
   27cd4:	cmp	r0, #0
   27cd8:	beq	27f14 <__assert_fail@plt+0x16bf4>
   27cdc:	mov	r7, r0
   27ce0:	bl	11164 <__ctype_get_mb_cur_max@plt>
   27ce4:	cmp	r0, #2
   27ce8:	bcc	27e00 <__assert_fail@plt+0x16ae0>
   27cec:	mov	r0, #1
   27cf0:	cmp	r4, r7
   27cf4:	strb	r9, [sp, #68]	; 0x44
   27cf8:	str	r4, [sp, #84]	; 0x54
   27cfc:	str	r9, [r8]
   27d00:	str	r9, [r8, #4]
   27d04:	strb	r9, [sp, #80]	; 0x50
   27d08:	str	r0, [sp, #8]
   27d0c:	bcs	27d64 <__assert_fail@plt+0x16a44>
   27d10:	mov	r0, r6
   27d14:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   27d18:	ldrb	r1, [sp, #92]	; 0x5c
   27d1c:	ldr	r0, [sp, #96]	; 0x60
   27d20:	cmp	r1, #0
   27d24:	beq	27d30 <__assert_fail@plt+0x16a10>
   27d28:	cmp	r0, #0
   27d2c:	beq	27f38 <__assert_fail@plt+0x16c18>
   27d30:	strb	r9, [sp, #80]	; 0x50
   27d34:	ldr	r2, [sp, #84]	; 0x54
   27d38:	ldr	r3, [sp, #88]	; 0x58
   27d3c:	add	r2, r2, r3
   27d40:	cmp	r2, r7
   27d44:	str	r2, [sp, #84]	; 0x54
   27d48:	bcc	27d10 <__assert_fail@plt+0x169f0>
   27d4c:	cmp	r1, #0
   27d50:	beq	27d64 <__assert_fail@plt+0x16a44>
   27d54:	bl	11224 <iswalnum@plt>
   27d58:	clz	r0, r0
   27d5c:	lsr	r0, r0, #5
   27d60:	str	r0, [sp, #8]
   27d64:	ldr	r0, [sp, #4]
   27d68:	strb	r9, [sp, #68]	; 0x44
   27d6c:	str	r7, [sp, #84]	; 0x54
   27d70:	strb	r9, [sp, #12]
   27d74:	str	sl, [sp, #28]
   27d78:	str	r9, [r8]
   27d7c:	str	r9, [r8, #4]
   27d80:	strb	r9, [sp, #80]	; 0x50
   27d84:	str	r9, [r0]
   27d88:	str	r9, [r0, #4]
   27d8c:	strb	r9, [sp, #24]
   27d90:	b	27dbc <__assert_fail@plt+0x16a9c>
   27d94:	strb	r9, [sp, #80]	; 0x50
   27d98:	strb	r9, [sp, #24]
   27d9c:	ldr	r0, [sp, #84]	; 0x54
   27da0:	ldr	r1, [sp, #88]	; 0x58
   27da4:	add	r0, r0, r1
   27da8:	ldr	r1, [sp, #32]
   27dac:	str	r0, [sp, #84]	; 0x54
   27db0:	ldr	r0, [sp, #28]
   27db4:	add	r0, r0, r1
   27db8:	str	r0, [sp, #28]
   27dbc:	mov	r0, r5
   27dc0:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   27dc4:	ldrb	r0, [sp, #36]	; 0x24
   27dc8:	cmp	r0, #0
   27dcc:	beq	27ddc <__assert_fail@plt+0x16abc>
   27dd0:	ldr	r0, [sp, #40]	; 0x28
   27dd4:	cmp	r0, #0
   27dd8:	beq	27e84 <__assert_fail@plt+0x16b64>
   27ddc:	mov	r0, r6
   27de0:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   27de4:	ldrb	r0, [sp, #92]	; 0x5c
   27de8:	cmp	r0, #0
   27dec:	beq	27d94 <__assert_fail@plt+0x16a74>
   27df0:	ldr	r0, [sp, #96]	; 0x60
   27df4:	cmp	r0, #0
   27df8:	bne	27d94 <__assert_fail@plt+0x16a74>
   27dfc:	b	27f38 <__assert_fail@plt+0x16c18>
   27e00:	cmp	r4, r7
   27e04:	mov	r8, #1
   27e08:	mov	r4, #1
   27e0c:	bcs	27e2c <__assert_fail@plt+0x16b0c>
   27e10:	bl	111dc <__ctype_b_loc@plt>
   27e14:	ldrb	r1, [r7, #-1]
   27e18:	ldr	r0, [r0]
   27e1c:	ldrb	r0, [r0, r1, lsl #1]
   27e20:	mov	r1, #1
   27e24:	and	r0, r0, #8
   27e28:	eor	r4, r1, r0, lsr #3
   27e2c:	mov	r0, sl
   27e30:	mov	r5, sl
   27e34:	bl	11200 <strlen@plt>
   27e38:	ldrb	sl, [r7, r0]
   27e3c:	cmp	sl, #0
   27e40:	beq	27e5c <__assert_fail@plt+0x16b3c>
   27e44:	bl	111dc <__ctype_b_loc@plt>
   27e48:	ldr	r0, [r0]
   27e4c:	mov	r1, #1
   27e50:	ldrb	r0, [r0, sl, lsl #1]
   27e54:	and	r0, r0, #8
   27e58:	eor	r8, r1, r0, lsr #3
   27e5c:	tst	r4, r8
   27e60:	bne	27f2c <__assert_fail@plt+0x16c0c>
   27e64:	ldrb	r0, [r7], #1
   27e68:	ldr	r8, [sp]
   27e6c:	mov	sl, r5
   27e70:	add	r5, sp, #12
   27e74:	cmp	r0, #0
   27e78:	mov	r4, r7
   27e7c:	bne	27f08 <__assert_fail@plt+0x16be8>
   27e80:	b	27f14 <__assert_fail@plt+0x16bf4>
   27e84:	mov	r0, r6
   27e88:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   27e8c:	ldrb	r0, [sp, #92]	; 0x5c
   27e90:	mov	r4, #1
   27e94:	mov	r1, #1
   27e98:	cmp	r0, #0
   27e9c:	beq	27ebc <__assert_fail@plt+0x16b9c>
   27ea0:	ldr	r0, [sp, #96]	; 0x60
   27ea4:	mov	r1, #1
   27ea8:	cmp	r0, #0
   27eac:	beq	27ebc <__assert_fail@plt+0x16b9c>
   27eb0:	bl	11224 <iswalnum@plt>
   27eb4:	clz	r0, r0
   27eb8:	lsr	r1, r0, #5
   27ebc:	ldr	r0, [sp, #8]
   27ec0:	tst	r0, r1
   27ec4:	bne	27f18 <__assert_fail@plt+0x16bf8>
   27ec8:	mov	r4, #0
   27ecc:	mov	r0, r6
   27ed0:	strb	r4, [sp, #68]	; 0x44
   27ed4:	str	r7, [sp, #84]	; 0x54
   27ed8:	str	r4, [r8]
   27edc:	str	r4, [r8, #4]
   27ee0:	strb	r4, [sp, #80]	; 0x50
   27ee4:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   27ee8:	ldrb	r0, [sp, #92]	; 0x5c
   27eec:	cmp	r0, #0
   27ef0:	beq	27f00 <__assert_fail@plt+0x16be0>
   27ef4:	ldr	r0, [sp, #96]	; 0x60
   27ef8:	cmp	r0, #0
   27efc:	beq	27f18 <__assert_fail@plt+0x16bf8>
   27f00:	ldr	r0, [sp, #88]	; 0x58
   27f04:	add	r4, r7, r0
   27f08:	ldrb	r0, [r4]
   27f0c:	cmp	r0, #0
   27f10:	bne	27cc8 <__assert_fail@plt+0x169a8>
   27f14:	mov	r4, #0
   27f18:	mov	r0, sl
   27f1c:	bl	1a3a4 <__assert_fail@plt+0x9084>
   27f20:	mov	r0, r4
   27f24:	sub	sp, fp, #28
   27f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f2c:	mov	r4, #1
   27f30:	mov	sl, r5
   27f34:	b	27f18 <__assert_fail@plt+0x16bf8>
   27f38:	bl	11314 <abort@plt>
   27f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f40:	add	fp, sp, #28
   27f44:	sub	sp, sp, #12
   27f48:	mov	r8, r0
   27f4c:	mov	r5, r1
   27f50:	mov	r0, #0
   27f54:	mov	r2, #5
   27f58:	mov	sl, #0
   27f5c:	mov	r1, r8
   27f60:	bl	110f8 <dcgettext@plt>
   27f64:	mov	r6, r0
   27f68:	bl	2b488 <__assert_fail@plt+0x1a168>
   27f6c:	movw	r1, #6476	; 0x194c
   27f70:	mov	r4, r0
   27f74:	movt	r1, #3
   27f78:	bl	2b214 <__assert_fail@plt+0x19ef4>
   27f7c:	cmp	r0, #0
   27f80:	beq	28034 <__assert_fail@plt+0x16d14>
   27f84:	movw	sl, #6476	; 0x194c
   27f88:	mov	r0, r5
   27f8c:	mov	r2, r4
   27f90:	str	r6, [sp, #8]
   27f94:	movt	sl, #3
   27f98:	mov	r1, sl
   27f9c:	bl	2b108 <__assert_fail@plt+0x19de8>
   27fa0:	mov	r7, r0
   27fa4:	mov	r0, r4
   27fa8:	bl	11200 <strlen@plt>
   27fac:	mov	r6, r0
   27fb0:	add	r0, r0, #11
   27fb4:	bl	2aaec <__assert_fail@plt+0x197cc>
   27fb8:	mov	r1, r4
   27fbc:	mov	r2, r6
   27fc0:	mov	r9, r0
   27fc4:	bl	110d4 <memcpy@plt>
   27fc8:	movw	r1, #6488	; 0x1958
   27fcc:	add	r0, r9, r6
   27fd0:	mov	r4, #0
   27fd4:	mov	r2, r9
   27fd8:	movt	r1, #3
   27fdc:	strb	r4, [r0, #10]
   27fe0:	vldr	d16, [r1]
   27fe4:	movw	r1, #21577	; 0x5449
   27fe8:	strh	r1, [r0, #8]
   27fec:	mov	r1, sl
   27ff0:	vst1.8	{d16}, [r0]
   27ff4:	mov	r0, r5
   27ff8:	bl	2b108 <__assert_fail@plt+0x19de8>
   27ffc:	mov	sl, r0
   28000:	mov	r0, r9
   28004:	bl	1a3a4 <__assert_fail@plt+0x9084>
   28008:	cmp	sl, #0
   2800c:	beq	2802c <__assert_fail@plt+0x16d0c>
   28010:	mov	r0, sl
   28014:	mov	r1, #63	; 0x3f
   28018:	bl	1120c <strchr@plt>
   2801c:	cmp	r0, #0
   28020:	beq	28044 <__assert_fail@plt+0x16d24>
   28024:	mov	r0, sl
   28028:	bl	1a3a4 <__assert_fail@plt+0x9084>
   2802c:	mov	sl, #0
   28030:	b	28048 <__assert_fail@plt+0x16d28>
   28034:	mov	r4, r5
   28038:	mov	r7, r5
   2803c:	mov	r9, #0
   28040:	b	28050 <__assert_fail@plt+0x16d30>
   28044:	mov	r4, sl
   28048:	ldr	r6, [sp, #8]
   2804c:	mov	r9, r7
   28050:	cmp	r4, #0
   28054:	mov	r5, r4
   28058:	mov	r0, r6
   2805c:	mov	r1, r8
   28060:	moveq	r5, r8
   28064:	cmp	r7, #0
   28068:	movne	r5, r7
   2806c:	bl	1108c <strcmp@plt>
   28070:	cmp	r0, #0
   28074:	beq	280e8 <__assert_fail@plt+0x16dc8>
   28078:	mov	r0, r6
   2807c:	mov	r1, r8
   28080:	bl	27c80 <__assert_fail@plt+0x16960>
   28084:	cmp	r0, #0
   28088:	bne	280c4 <__assert_fail@plt+0x16da4>
   2808c:	cmp	r7, #0
   28090:	beq	280a8 <__assert_fail@plt+0x16d88>
   28094:	mov	r0, r6
   28098:	mov	r1, r7
   2809c:	bl	27c80 <__assert_fail@plt+0x16960>
   280a0:	cmp	r0, #0
   280a4:	bne	280c4 <__assert_fail@plt+0x16da4>
   280a8:	cmp	r4, #0
   280ac:	beq	28118 <__assert_fail@plt+0x16df8>
   280b0:	mov	r0, r6
   280b4:	mov	r1, r4
   280b8:	bl	27c80 <__assert_fail@plt+0x16960>
   280bc:	cmp	r0, #0
   280c0:	beq	28118 <__assert_fail@plt+0x16df8>
   280c4:	cmp	r9, #0
   280c8:	beq	280d4 <__assert_fail@plt+0x16db4>
   280cc:	mov	r0, r9
   280d0:	bl	1a3a4 <__assert_fail@plt+0x9084>
   280d4:	cmp	sl, #0
   280d8:	beq	2817c <__assert_fail@plt+0x16e5c>
   280dc:	mov	r0, sl
   280e0:	bl	1a3a4 <__assert_fail@plt+0x9084>
   280e4:	b	2817c <__assert_fail@plt+0x16e5c>
   280e8:	cmp	r9, #0
   280ec:	cmpne	r9, r5
   280f0:	beq	280fc <__assert_fail@plt+0x16ddc>
   280f4:	mov	r0, r9
   280f8:	bl	1a3a4 <__assert_fail@plt+0x9084>
   280fc:	cmp	sl, #0
   28100:	cmpne	sl, r5
   28104:	beq	28110 <__assert_fail@plt+0x16df0>
   28108:	mov	r0, sl
   2810c:	bl	1a3a4 <__assert_fail@plt+0x9084>
   28110:	mov	r6, r5
   28114:	b	2817c <__assert_fail@plt+0x16e5c>
   28118:	mov	r0, r6
   2811c:	bl	11200 <strlen@plt>
   28120:	mov	r4, r0
   28124:	mov	r0, r5
   28128:	bl	11200 <strlen@plt>
   2812c:	add	r0, r4, r0
   28130:	add	r0, r0, #4
   28134:	bl	2aaec <__assert_fail@plt+0x197cc>
   28138:	movw	r3, #6468	; 0x1944
   2813c:	mov	r1, #1
   28140:	mvn	r2, #0
   28144:	mov	r4, r0
   28148:	str	r6, [sp]
   2814c:	str	r5, [sp, #4]
   28150:	movt	r3, #3
   28154:	bl	11230 <__sprintf_chk@plt>
   28158:	cmp	r9, #0
   2815c:	beq	28168 <__assert_fail@plt+0x16e48>
   28160:	mov	r0, r9
   28164:	bl	1a3a4 <__assert_fail@plt+0x9084>
   28168:	cmp	sl, #0
   2816c:	beq	28178 <__assert_fail@plt+0x16e58>
   28170:	mov	r0, sl
   28174:	bl	1a3a4 <__assert_fail@plt+0x9084>
   28178:	mov	r6, r4
   2817c:	mov	r0, r6
   28180:	sub	sp, fp, #28
   28184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28188:	push	{r4, r5, r6, sl, fp, lr}
   2818c:	add	fp, sp, #16
   28190:	mov	r4, r0
   28194:	movw	r0, #8616	; 0x21a8
   28198:	movt	r0, #4
   2819c:	cmp	r4, #0
   281a0:	moveq	r4, r0
   281a4:	bl	11218 <__errno_location@plt>
   281a8:	ldr	r6, [r0]
   281ac:	mov	r5, r0
   281b0:	mov	r0, r4
   281b4:	mov	r1, #48	; 0x30
   281b8:	bl	2af4c <__assert_fail@plt+0x19c2c>
   281bc:	str	r6, [r5]
   281c0:	pop	{r4, r5, r6, sl, fp, pc}
   281c4:	movw	r1, #8616	; 0x21a8
   281c8:	cmp	r0, #0
   281cc:	movt	r1, #4
   281d0:	movne	r1, r0
   281d4:	ldr	r0, [r1]
   281d8:	bx	lr
   281dc:	movw	r2, #8616	; 0x21a8
   281e0:	cmp	r0, #0
   281e4:	movt	r2, #4
   281e8:	movne	r2, r0
   281ec:	str	r1, [r2]
   281f0:	bx	lr
   281f4:	movw	r3, #8616	; 0x21a8
   281f8:	cmp	r0, #0
   281fc:	movt	r3, #4
   28200:	movne	r3, r0
   28204:	ubfx	r0, r1, #5, #3
   28208:	and	r1, r1, #31
   2820c:	add	r0, r3, r0, lsl #2
   28210:	ldr	r3, [r0, #8]
   28214:	eor	r2, r2, r3, lsr r1
   28218:	and	r2, r2, #1
   2821c:	eor	r2, r3, r2, lsl r1
   28220:	str	r2, [r0, #8]
   28224:	mov	r0, #1
   28228:	and	r0, r0, r3, lsr r1
   2822c:	bx	lr
   28230:	movw	r2, #8616	; 0x21a8
   28234:	cmp	r0, #0
   28238:	movt	r2, #4
   2823c:	movne	r2, r0
   28240:	ldr	r0, [r2, #4]
   28244:	str	r1, [r2, #4]
   28248:	bx	lr
   2824c:	movw	r3, #8616	; 0x21a8
   28250:	cmp	r0, #0
   28254:	movt	r3, #4
   28258:	movne	r3, r0
   2825c:	cmp	r1, #0
   28260:	mov	r0, #10
   28264:	cmpne	r2, #0
   28268:	str	r0, [r3]
   2826c:	bne	2827c <__assert_fail@plt+0x16f5c>
   28270:	push	{fp, lr}
   28274:	mov	fp, sp
   28278:	bl	11314 <abort@plt>
   2827c:	str	r1, [r3, #40]	; 0x28
   28280:	str	r2, [r3, #44]	; 0x2c
   28284:	bx	lr
   28288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2828c:	add	fp, sp, #28
   28290:	sub	sp, sp, #20
   28294:	mov	r7, r0
   28298:	ldr	r0, [fp, #8]
   2829c:	movw	r5, #8616	; 0x21a8
   282a0:	mov	r8, r3
   282a4:	mov	r9, r2
   282a8:	mov	sl, r1
   282ac:	movt	r5, #4
   282b0:	cmp	r0, #0
   282b4:	movne	r5, r0
   282b8:	bl	11218 <__errno_location@plt>
   282bc:	mov	r4, r0
   282c0:	ldm	r5, {r0, r1}
   282c4:	ldr	r2, [r5, #40]	; 0x28
   282c8:	ldr	r3, [r5, #44]	; 0x2c
   282cc:	add	r5, r5, #8
   282d0:	ldr	r6, [r4]
   282d4:	stm	sp, {r0, r1, r5}
   282d8:	str	r2, [sp, #12]
   282dc:	str	r3, [sp, #16]
   282e0:	mov	r0, r7
   282e4:	mov	r1, sl
   282e8:	mov	r2, r9
   282ec:	mov	r3, r8
   282f0:	bl	28300 <__assert_fail@plt+0x16fe0>
   282f4:	str	r6, [r4]
   282f8:	sub	sp, fp, #28
   282fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28304:	add	fp, sp, #28
   28308:	sub	sp, sp, #156	; 0x9c
   2830c:	str	r0, [sp, #80]	; 0x50
   28310:	ldr	r0, [fp, #12]
   28314:	mov	r6, r1
   28318:	mov	r9, r3
   2831c:	str	r2, [fp, #-84]	; 0xffffffac
   28320:	and	r1, r0, #4
   28324:	str	r1, [sp, #32]
   28328:	and	r1, r0, #1
   2832c:	str	r1, [sp, #36]	; 0x24
   28330:	ubfx	r4, r0, #1, #1
   28334:	bl	11164 <__ctype_get_mb_cur_max@plt>
   28338:	str	r0, [sp, #40]	; 0x28
   2833c:	ldr	r0, [fp, #24]
   28340:	ldr	r7, [fp, #8]
   28344:	mov	r1, #0
   28348:	mov	r5, #1
   2834c:	str	r1, [fp, #-56]	; 0xffffffc8
   28350:	mov	r1, #0
   28354:	str	r1, [sp, #60]	; 0x3c
   28358:	str	r0, [sp, #76]	; 0x4c
   2835c:	ldr	r0, [fp, #20]
   28360:	str	r0, [sp, #72]	; 0x48
   28364:	mov	r0, #0
   28368:	str	r0, [sp, #56]	; 0x38
   2836c:	mov	r0, #0
   28370:	str	r0, [sp, #92]	; 0x5c
   28374:	mov	r0, #0
   28378:	str	r0, [fp, #-76]	; 0xffffffb4
   2837c:	mov	r0, #0
   28380:	cmp	r7, #10
   28384:	bhi	29304 <__assert_fail@plt+0x17fe4>
   28388:	add	r1, pc, #28
   2838c:	mov	sl, r6
   28390:	ldr	r6, [sp, #80]	; 0x50
   28394:	ldr	ip, [fp, #-84]	; 0xffffffac
   28398:	mov	r8, #0
   2839c:	mov	r2, #1
   283a0:	mov	r3, #0
   283a4:	mov	lr, r9
   283a8:	ldr	pc, [r1, r7, lsl #2]
   283ac:	muleq	r2, r0, r4
   283b0:			; <UNDEFINED> instruction: 0x000284bc
   283b4:	andeq	r8, r2, r0, lsl #9
   283b8:	andeq	r8, r2, r8, ror r4
   283bc:			; <UNDEFINED> instruction: 0x000284b0
   283c0:	andeq	r8, r2, r4, lsl #10
   283c4:	andeq	r8, r2, r0, lsr #9
   283c8:	andeq	r8, r2, r0, ror #10
   283cc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283d0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283d4:	andeq	r8, r2, r0, lsl #8
   283d8:	movw	r0, #6582	; 0x19b6
   283dc:	mov	r1, r7
   283e0:	movt	r0, #3
   283e4:	bl	29d10 <__assert_fail@plt+0x189f0>
   283e8:	str	r0, [sp, #72]	; 0x48
   283ec:	movw	r0, #7596	; 0x1dac
   283f0:	mov	r1, r7
   283f4:	movt	r0, #3
   283f8:	bl	29d10 <__assert_fail@plt+0x189f0>
   283fc:	str	r0, [sp, #76]	; 0x4c
   28400:	str	r5, [fp, #-48]	; 0xffffffd0
   28404:	mov	r8, #0
   28408:	mov	r5, r7
   2840c:	tst	r4, #1
   28410:	bne	28448 <__assert_fail@plt+0x17128>
   28414:	ldr	r0, [sp, #72]	; 0x48
   28418:	ldrb	r0, [r0]
   2841c:	cmp	r0, #0
   28420:	beq	28448 <__assert_fail@plt+0x17128>
   28424:	ldr	r1, [sp, #72]	; 0x48
   28428:	mov	r8, #0
   2842c:	add	r1, r1, #1
   28430:	cmp	r8, sl
   28434:	strbcc	r0, [r6, r8]
   28438:	ldrb	r0, [r1, r8]
   2843c:	add	r8, r8, #1
   28440:	cmp	r0, #0
   28444:	bne	28430 <__assert_fail@plt+0x17110>
   28448:	ldr	r7, [sp, #76]	; 0x4c
   2844c:	mov	r0, r7
   28450:	bl	11200 <strlen@plt>
   28454:	str	r7, [sp, #92]	; 0x5c
   28458:	mov	r7, r5
   2845c:	ldr	ip, [fp, #-84]	; 0xffffffac
   28460:	ldr	r5, [fp, #-48]	; 0xffffffd0
   28464:	str	r0, [fp, #-76]	; 0xffffffb4
   28468:	mov	r2, #1
   2846c:	mov	r3, r4
   28470:	mov	lr, r9
   28474:	b	28560 <__assert_fail@plt+0x17240>
   28478:	mov	r0, #1
   2847c:	b	284bc <__assert_fail@plt+0x1719c>
   28480:	tst	r4, #1
   28484:	bne	284bc <__assert_fail@plt+0x1719c>
   28488:	mov	r2, r0
   2848c:	b	284e4 <__assert_fail@plt+0x171c4>
   28490:	mov	r7, #0
   28494:	mov	r8, #0
   28498:	mov	r2, r0
   2849c:	b	2855c <__assert_fail@plt+0x1723c>
   284a0:	mov	r0, #1
   284a4:	mov	r8, #0
   284a8:	mov	r7, #5
   284ac:	b	28518 <__assert_fail@plt+0x171f8>
   284b0:	mov	r2, #1
   284b4:	tst	r4, #1
   284b8:	beq	284e4 <__assert_fail@plt+0x171c4>
   284bc:	mov	r1, #1
   284c0:	mov	r8, #0
   284c4:	mov	r7, #2
   284c8:	mov	r2, r0
   284cc:	mov	r3, #1
   284d0:	str	r1, [fp, #-76]	; 0xffffffb4
   284d4:	movw	r1, #7596	; 0x1dac
   284d8:	movt	r1, #3
   284dc:	str	r1, [sp, #92]	; 0x5c
   284e0:	b	28560 <__assert_fail@plt+0x17240>
   284e4:	cmp	sl, #0
   284e8:	mov	r8, #1
   284ec:	mov	r7, #2
   284f0:	movne	r0, #39	; 0x27
   284f4:	strbne	r0, [r6]
   284f8:	movw	r0, #7596	; 0x1dac
   284fc:	movt	r0, #3
   28500:	b	28550 <__assert_fail@plt+0x17230>
   28504:	mov	r7, #5
   28508:	tst	r4, #1
   2850c:	beq	28534 <__assert_fail@plt+0x17214>
   28510:	mov	r0, #1
   28514:	mov	r8, #0
   28518:	str	r0, [fp, #-76]	; 0xffffffb4
   2851c:	movw	r0, #6580	; 0x19b4
   28520:	mov	r2, #1
   28524:	mov	r3, #1
   28528:	movt	r0, #3
   2852c:	str	r0, [sp, #92]	; 0x5c
   28530:	b	28560 <__assert_fail@plt+0x17240>
   28534:	cmp	sl, #0
   28538:	mov	r8, #1
   2853c:	mov	r2, #1
   28540:	movne	r0, #34	; 0x22
   28544:	strbne	r0, [r6]
   28548:	movw	r0, #6580	; 0x19b4
   2854c:	movt	r0, #3
   28550:	str	r0, [sp, #92]	; 0x5c
   28554:	mov	r0, #1
   28558:	str	r0, [fp, #-76]	; 0xffffffb4
   2855c:	mov	r3, #0
   28560:	ldr	r0, [fp, #16]
   28564:	str	r3, [fp, #-72]	; 0xffffffb8
   28568:	str	r7, [fp, #-64]	; 0xffffffc0
   2856c:	str	r2, [sp, #84]	; 0x54
   28570:	cmp	r0, #0
   28574:	movwne	r0, #1
   28578:	and	r0, r0, r3
   2857c:	str	r0, [fp, #-88]	; 0xffffffa8
   28580:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28584:	cmp	r0, #0
   28588:	movwne	r0, #1
   2858c:	subs	r4, r7, #2
   28590:	mov	r7, #0
   28594:	and	r1, r0, r3
   28598:	str	r4, [fp, #-80]	; 0xffffffb0
   2859c:	and	r1, r2, r1
   285a0:	str	r1, [sp, #48]	; 0x30
   285a4:	clz	r1, r4
   285a8:	lsr	r1, r1, #5
   285ac:	and	r1, r1, r3
   285b0:	eor	r3, r3, #1
   285b4:	str	r1, [sp, #64]	; 0x40
   285b8:	mov	r1, r4
   285bc:	str	r3, [sp, #88]	; 0x58
   285c0:	movwne	r1, #1
   285c4:	orr	r3, r1, r3
   285c8:	and	r1, r1, r2
   285cc:	and	r0, r0, r1
   285d0:	str	r3, [sp, #68]	; 0x44
   285d4:	str	r1, [fp, #-68]	; 0xffffffbc
   285d8:	str	r0, [fp, #-60]	; 0xffffffc4
   285dc:	eor	r0, r2, #1
   285e0:	str	r0, [sp, #52]	; 0x34
   285e4:	cmn	lr, #1
   285e8:	beq	285f8 <__assert_fail@plt+0x172d8>
   285ec:	cmp	r7, lr
   285f0:	bne	28604 <__assert_fail@plt+0x172e4>
   285f4:	b	2912c <__assert_fail@plt+0x17e0c>
   285f8:	ldrb	r0, [ip, r7]
   285fc:	cmp	r0, #0
   28600:	beq	29134 <__assert_fail@plt+0x17e14>
   28604:	ldr	r0, [fp, #-60]	; 0xffffffc4
   28608:	mov	r9, #0
   2860c:	str	r5, [fp, #-48]	; 0xffffffd0
   28610:	cmp	r0, #0
   28614:	beq	28648 <__assert_fail@plt+0x17328>
   28618:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2861c:	add	r4, r7, r0
   28620:	cmp	r0, #2
   28624:	bcc	28640 <__assert_fail@plt+0x17320>
   28628:	cmn	lr, #1
   2862c:	bne	28640 <__assert_fail@plt+0x17320>
   28630:	mov	r0, ip
   28634:	bl	11200 <strlen@plt>
   28638:	ldr	ip, [fp, #-84]	; 0xffffffac
   2863c:	mov	lr, r0
   28640:	cmp	r4, lr
   28644:	bls	28650 <__assert_fail@plt+0x17330>
   28648:	mov	r0, #0
   2864c:	b	28690 <__assert_fail@plt+0x17370>
   28650:	ldr	r1, [sp, #92]	; 0x5c
   28654:	ldr	r2, [fp, #-76]	; 0xffffffb4
   28658:	add	r0, ip, r7
   2865c:	mov	r4, lr
   28660:	bl	110ec <memcmp@plt>
   28664:	ldr	r2, [sp, #88]	; 0x58
   28668:	cmp	r0, #0
   2866c:	mov	r1, r0
   28670:	movwne	r1, #1
   28674:	orr	r1, r1, r2
   28678:	tst	r1, #1
   2867c:	beq	291c4 <__assert_fail@plt+0x17ea4>
   28680:	ldr	ip, [fp, #-84]	; 0xffffffac
   28684:	clz	r0, r0
   28688:	mov	lr, r4
   2868c:	lsr	r0, r0, #5
   28690:	str	r0, [fp, #-52]	; 0xffffffcc
   28694:	ldrb	r5, [ip, r7]
   28698:	cmp	r5, #126	; 0x7e
   2869c:	bhi	28a54 <__assert_fail@plt+0x17734>
   286a0:	add	r3, pc, #16
   286a4:	mov	r4, #1
   286a8:	mov	r2, #110	; 0x6e
   286ac:	mov	r0, #97	; 0x61
   286b0:	mov	r1, #0
   286b4:	ldr	pc, [r3, r5, lsl #2]
   286b8:	andeq	r8, r2, r0, asr r9
   286bc:	andeq	r8, r2, r4, asr sl
   286c0:	andeq	r8, r2, r4, asr sl
   286c4:	andeq	r8, r2, r4, asr sl
   286c8:	andeq	r8, r2, r4, asr sl
   286cc:	andeq	r8, r2, r4, asr sl
   286d0:	andeq	r8, r2, r4, asr sl
   286d4:	andeq	r8, r2, r8, lsl #22
   286d8:	andeq	r8, r2, r0, lsr r9
   286dc:	andeq	r8, r2, r8, lsr #18
   286e0:	andeq	r8, r2, ip, lsr r9
   286e4:			; <UNDEFINED> instruction: 0x000289bc
   286e8:	andeq	r8, r2, r0, lsr #18
   286ec:	andeq	r8, r2, r8, lsr r9
   286f0:	andeq	r8, r2, r4, asr sl
   286f4:	andeq	r8, r2, r4, asr sl
   286f8:	andeq	r8, r2, r4, asr sl
   286fc:	andeq	r8, r2, r4, asr sl
   28700:	andeq	r8, r2, r4, asr sl
   28704:	andeq	r8, r2, r4, asr sl
   28708:	andeq	r8, r2, r4, asr sl
   2870c:	andeq	r8, r2, r4, asr sl
   28710:	andeq	r8, r2, r4, asr sl
   28714:	andeq	r8, r2, r4, asr sl
   28718:	andeq	r8, r2, r4, asr sl
   2871c:	andeq	r8, r2, r4, asr sl
   28720:	andeq	r8, r2, r4, asr sl
   28724:	andeq	r8, r2, r4, asr sl
   28728:	andeq	r8, r2, r4, asr sl
   2872c:	andeq	r8, r2, r4, asr sl
   28730:	andeq	r8, r2, r4, asr sl
   28734:	andeq	r8, r2, r4, asr sl
   28738:	andeq	r8, r2, r0, asr #21
   2873c:	andeq	r8, r2, r4, asr #21
   28740:	andeq	r8, r2, r4, asr #21
   28744:	andeq	r8, r2, r8, asr #17
   28748:	andeq	r8, r2, r4, asr #21
   2874c:			; <UNDEFINED> instruction: 0x000288b4
   28750:	andeq	r8, r2, r4, asr #21
   28754:	andeq	r8, r2, r4, asr #19
   28758:	andeq	r8, r2, r4, asr #21
   2875c:	andeq	r8, r2, r4, asr #21
   28760:	andeq	r8, r2, r4, asr #21
   28764:			; <UNDEFINED> instruction: 0x000288b4
   28768:			; <UNDEFINED> instruction: 0x000288b4
   2876c:			; <UNDEFINED> instruction: 0x000288b4
   28770:			; <UNDEFINED> instruction: 0x000288b4
   28774:			; <UNDEFINED> instruction: 0x000288b4
   28778:			; <UNDEFINED> instruction: 0x000288b4
   2877c:			; <UNDEFINED> instruction: 0x000288b4
   28780:			; <UNDEFINED> instruction: 0x000288b4
   28784:			; <UNDEFINED> instruction: 0x000288b4
   28788:			; <UNDEFINED> instruction: 0x000288b4
   2878c:			; <UNDEFINED> instruction: 0x000288b4
   28790:			; <UNDEFINED> instruction: 0x000288b4
   28794:			; <UNDEFINED> instruction: 0x000288b4
   28798:			; <UNDEFINED> instruction: 0x000288b4
   2879c:			; <UNDEFINED> instruction: 0x000288b4
   287a0:			; <UNDEFINED> instruction: 0x000288b4
   287a4:	andeq	r8, r2, r4, asr #21
   287a8:	andeq	r8, r2, r4, asr #21
   287ac:	andeq	r8, r2, r4, asr #21
   287b0:	andeq	r8, r2, r4, asr #21
   287b4:	muleq	r2, r0, r9
   287b8:	andeq	r8, r2, r4, asr sl
   287bc:			; <UNDEFINED> instruction: 0x000288b4
   287c0:			; <UNDEFINED> instruction: 0x000288b4
   287c4:			; <UNDEFINED> instruction: 0x000288b4
   287c8:			; <UNDEFINED> instruction: 0x000288b4
   287cc:			; <UNDEFINED> instruction: 0x000288b4
   287d0:			; <UNDEFINED> instruction: 0x000288b4
   287d4:			; <UNDEFINED> instruction: 0x000288b4
   287d8:			; <UNDEFINED> instruction: 0x000288b4
   287dc:			; <UNDEFINED> instruction: 0x000288b4
   287e0:			; <UNDEFINED> instruction: 0x000288b4
   287e4:			; <UNDEFINED> instruction: 0x000288b4
   287e8:			; <UNDEFINED> instruction: 0x000288b4
   287ec:			; <UNDEFINED> instruction: 0x000288b4
   287f0:			; <UNDEFINED> instruction: 0x000288b4
   287f4:			; <UNDEFINED> instruction: 0x000288b4
   287f8:			; <UNDEFINED> instruction: 0x000288b4
   287fc:			; <UNDEFINED> instruction: 0x000288b4
   28800:			; <UNDEFINED> instruction: 0x000288b4
   28804:			; <UNDEFINED> instruction: 0x000288b4
   28808:			; <UNDEFINED> instruction: 0x000288b4
   2880c:			; <UNDEFINED> instruction: 0x000288b4
   28810:			; <UNDEFINED> instruction: 0x000288b4
   28814:			; <UNDEFINED> instruction: 0x000288b4
   28818:			; <UNDEFINED> instruction: 0x000288b4
   2881c:			; <UNDEFINED> instruction: 0x000288b4
   28820:			; <UNDEFINED> instruction: 0x000288b4
   28824:	andeq	r8, r2, r4, asr #21
   28828:	strdeq	r8, [r2], -ip
   2882c:			; <UNDEFINED> instruction: 0x000288b4
   28830:	andeq	r8, r2, r4, asr #21
   28834:			; <UNDEFINED> instruction: 0x000288b4
   28838:	andeq	r8, r2, r4, asr #21
   2883c:			; <UNDEFINED> instruction: 0x000288b4
   28840:			; <UNDEFINED> instruction: 0x000288b4
   28844:			; <UNDEFINED> instruction: 0x000288b4
   28848:			; <UNDEFINED> instruction: 0x000288b4
   2884c:			; <UNDEFINED> instruction: 0x000288b4
   28850:			; <UNDEFINED> instruction: 0x000288b4
   28854:			; <UNDEFINED> instruction: 0x000288b4
   28858:			; <UNDEFINED> instruction: 0x000288b4
   2885c:			; <UNDEFINED> instruction: 0x000288b4
   28860:			; <UNDEFINED> instruction: 0x000288b4
   28864:			; <UNDEFINED> instruction: 0x000288b4
   28868:			; <UNDEFINED> instruction: 0x000288b4
   2886c:			; <UNDEFINED> instruction: 0x000288b4
   28870:			; <UNDEFINED> instruction: 0x000288b4
   28874:			; <UNDEFINED> instruction: 0x000288b4
   28878:			; <UNDEFINED> instruction: 0x000288b4
   2887c:			; <UNDEFINED> instruction: 0x000288b4
   28880:			; <UNDEFINED> instruction: 0x000288b4
   28884:			; <UNDEFINED> instruction: 0x000288b4
   28888:			; <UNDEFINED> instruction: 0x000288b4
   2888c:			; <UNDEFINED> instruction: 0x000288b4
   28890:			; <UNDEFINED> instruction: 0x000288b4
   28894:			; <UNDEFINED> instruction: 0x000288b4
   28898:			; <UNDEFINED> instruction: 0x000288b4
   2889c:			; <UNDEFINED> instruction: 0x000288b4
   288a0:			; <UNDEFINED> instruction: 0x000288b4
   288a4:	ldrdeq	r8, [r2], -ip
   288a8:	andeq	r8, r2, r4, asr #21
   288ac:	ldrdeq	r8, [r2], -ip
   288b0:	andeq	r8, r2, r8, asr #17
   288b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   288b8:	cmp	r0, #0
   288bc:	beq	28b1c <__assert_fail@plt+0x177fc>
   288c0:	ldr	r0, [fp, #16]
   288c4:	b	28b20 <__assert_fail@plt+0x17800>
   288c8:	mov	r4, #0
   288cc:	cmp	r7, #0
   288d0:	beq	28ac0 <__assert_fail@plt+0x177a0>
   288d4:	mov	r9, #0
   288d8:	b	288b4 <__assert_fail@plt+0x17594>
   288dc:	mov	r4, #0
   288e0:	cmn	lr, #1
   288e4:	beq	28aa4 <__assert_fail@plt+0x17784>
   288e8:	cmp	r7, #0
   288ec:	bne	288d4 <__assert_fail@plt+0x175b4>
   288f0:	cmp	lr, #1
   288f4:	beq	28ac0 <__assert_fail@plt+0x177a0>
   288f8:	b	288d4 <__assert_fail@plt+0x175b4>
   288fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28900:	cmp	r0, #2
   28904:	bne	28ae4 <__assert_fail@plt+0x177c4>
   28908:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2890c:	tst	r0, #1
   28910:	bne	291e0 <__assert_fail@plt+0x17ec0>
   28914:	mov	r9, #0
   28918:	mov	r0, #92	; 0x5c
   2891c:	b	28af8 <__assert_fail@plt+0x177d8>
   28920:	mov	r0, #102	; 0x66
   28924:	b	28b08 <__assert_fail@plt+0x177e8>
   28928:	mov	r2, #116	; 0x74
   2892c:	b	2893c <__assert_fail@plt+0x1761c>
   28930:	mov	r0, #98	; 0x62
   28934:	b	28b08 <__assert_fail@plt+0x177e8>
   28938:	mov	r2, #114	; 0x72
   2893c:	ldr	r0, [sp, #68]	; 0x44
   28940:	tst	r0, #1
   28944:	mov	r0, r2
   28948:	bne	28b08 <__assert_fail@plt+0x177e8>
   2894c:	b	291e0 <__assert_fail@plt+0x17ec0>
   28950:	ldr	r0, [sp, #84]	; 0x54
   28954:	tst	r0, #1
   28958:	beq	28bf8 <__assert_fail@plt+0x178d8>
   2895c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28960:	tst	r0, #1
   28964:	bne	292f0 <__assert_fail@plt+0x17fd0>
   28968:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2896c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   28970:	cmp	r0, #2
   28974:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28978:	movwne	r0, #1
   2897c:	orr	r0, r0, r2
   28980:	tst	r0, #1
   28984:	beq	28fc8 <__assert_fail@plt+0x17ca8>
   28988:	mov	r0, r8
   2898c:	b	28ffc <__assert_fail@plt+0x17cdc>
   28990:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28994:	mov	r9, #0
   28998:	mov	r5, #63	; 0x3f
   2899c:	cmp	r0, #5
   289a0:	beq	28dac <__assert_fail@plt+0x17a8c>
   289a4:	cmp	r0, #2
   289a8:	bne	28e50 <__assert_fail@plt+0x17b30>
   289ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   289b0:	tst	r0, #1
   289b4:	beq	28e54 <__assert_fail@plt+0x17b34>
   289b8:	b	291e0 <__assert_fail@plt+0x17ec0>
   289bc:	mov	r0, #118	; 0x76
   289c0:	b	28b08 <__assert_fail@plt+0x177e8>
   289c4:	mov	r0, #1
   289c8:	mov	r5, #39	; 0x27
   289cc:	str	r0, [sp, #60]	; 0x3c
   289d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   289d4:	cmp	r0, #2
   289d8:	bne	28a4c <__assert_fail@plt+0x1772c>
   289dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   289e0:	tst	r0, #1
   289e4:	bne	291e0 <__assert_fail@plt+0x17ec0>
   289e8:	ldr	r2, [sp, #56]	; 0x38
   289ec:	clz	r1, sl
   289f0:	mov	r9, #0
   289f4:	lsr	r1, r1, #5
   289f8:	cmp	r2, #0
   289fc:	mov	r0, r2
   28a00:	movwne	r0, #1
   28a04:	orrs	r0, r0, r1
   28a08:	moveq	r2, sl
   28a0c:	moveq	sl, r0
   28a10:	cmp	r8, sl
   28a14:	str	r2, [sp, #56]	; 0x38
   28a18:	movcc	r0, #39	; 0x27
   28a1c:	strbcc	r0, [r6, r8]
   28a20:	add	r0, r8, #1
   28a24:	cmp	r0, sl
   28a28:	movcc	r1, #92	; 0x5c
   28a2c:	strbcc	r1, [r6, r0]
   28a30:	add	r0, r8, #2
   28a34:	add	r8, r8, #3
   28a38:	cmp	r0, sl
   28a3c:	movcc	r1, #39	; 0x27
   28a40:	strbcc	r1, [r6, r0]
   28a44:	mov	r0, #0
   28a48:	str	r0, [fp, #-56]	; 0xffffffc8
   28a4c:	mov	r4, #1
   28a50:	b	288b4 <__assert_fail@plt+0x17594>
   28a54:	ldr	r0, [sp, #40]	; 0x28
   28a58:	cmp	r0, #1
   28a5c:	bne	28c24 <__assert_fail@plt+0x17904>
   28a60:	str	lr, [sp, #28]
   28a64:	bl	111dc <__ctype_b_loc@plt>
   28a68:	ldr	r0, [r0]
   28a6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   28a70:	mov	r1, #1
   28a74:	add	r0, r0, r5, lsl #1
   28a78:	ldrb	r0, [r0, #1]
   28a7c:	ubfx	r4, r0, #6, #1
   28a80:	ldr	r0, [sp, #52]	; 0x34
   28a84:	mov	r2, r1
   28a88:	cmp	r1, #1
   28a8c:	orr	r0, r4, r0
   28a90:	bhi	28e5c <__assert_fail@plt+0x17b3c>
   28a94:	tst	r0, #1
   28a98:	beq	28e5c <__assert_fail@plt+0x17b3c>
   28a9c:	ldr	lr, [sp, #28]
   28aa0:	b	288b4 <__assert_fail@plt+0x17594>
   28aa4:	cmp	r7, #0
   28aa8:	ldrbeq	r0, [ip, #1]
   28aac:	cmpeq	r0, #0
   28ab0:	beq	28ac0 <__assert_fail@plt+0x177a0>
   28ab4:	mvn	lr, #0
   28ab8:	mov	r9, #0
   28abc:	b	288b4 <__assert_fail@plt+0x17594>
   28ac0:	mov	r1, #1
   28ac4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28ac8:	cmp	r0, #2
   28acc:	bne	28adc <__assert_fail@plt+0x177bc>
   28ad0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28ad4:	tst	r0, #1
   28ad8:	bne	291e0 <__assert_fail@plt+0x17ec0>
   28adc:	mov	r4, r1
   28ae0:	b	288b4 <__assert_fail@plt+0x17594>
   28ae4:	ldr	r1, [sp, #48]	; 0x30
   28ae8:	mov	r9, #0
   28aec:	mov	r0, #92	; 0x5c
   28af0:	cmp	r1, #0
   28af4:	beq	28b08 <__assert_fail@plt+0x177e8>
   28af8:	mov	r4, #0
   28afc:	cmp	r9, #0
   28b00:	beq	29094 <__assert_fail@plt+0x17d74>
   28b04:	b	290d0 <__assert_fail@plt+0x17db0>
   28b08:	ldr	r1, [sp, #84]	; 0x54
   28b0c:	mov	r4, #0
   28b10:	mov	r9, #0
   28b14:	tst	r1, #1
   28b18:	bne	28b58 <__assert_fail@plt+0x17838>
   28b1c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   28b20:	cmp	r0, #0
   28b24:	mov	r0, r5
   28b28:	beq	28b4c <__assert_fail@plt+0x1782c>
   28b2c:	ldr	r1, [fp, #16]
   28b30:	ubfx	r0, r5, #5, #3
   28b34:	mov	r2, #1
   28b38:	ldr	r0, [r1, r0, lsl #2]
   28b3c:	and	r1, r5, #31
   28b40:	tst	r0, r2, lsl r1
   28b44:	mov	r0, r5
   28b48:	bne	28b58 <__assert_fail@plt+0x17838>
   28b4c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   28b50:	cmp	r1, #0
   28b54:	beq	2908c <__assert_fail@plt+0x17d6c>
   28b58:	ldr	r1, [fp, #-72]	; 0xffffffb8
   28b5c:	tst	r1, #1
   28b60:	bne	291b8 <__assert_fail@plt+0x17e98>
   28b64:	ldr	r1, [fp, #-64]	; 0xffffffc0
   28b68:	ldr	r2, [fp, #-56]	; 0xffffffc8
   28b6c:	cmp	r1, #2
   28b70:	ldr	r1, [fp, #-80]	; 0xffffffb0
   28b74:	movwne	r1, #1
   28b78:	orr	r1, r1, r2
   28b7c:	tst	r1, #1
   28b80:	beq	28b8c <__assert_fail@plt+0x1786c>
   28b84:	ldr	r5, [fp, #-48]	; 0xffffffd0
   28b88:	b	28bc8 <__assert_fail@plt+0x178a8>
   28b8c:	cmp	r8, sl
   28b90:	ldr	r5, [fp, #-48]	; 0xffffffd0
   28b94:	movcc	r1, #39	; 0x27
   28b98:	strbcc	r1, [r6, r8]
   28b9c:	add	r1, r8, #1
   28ba0:	cmp	r1, sl
   28ba4:	movcc	r2, #36	; 0x24
   28ba8:	strbcc	r2, [r6, r1]
   28bac:	add	r1, r8, #2
   28bb0:	add	r8, r8, #3
   28bb4:	cmp	r1, sl
   28bb8:	movcc	r2, #39	; 0x27
   28bbc:	strbcc	r2, [r6, r1]
   28bc0:	mov	r1, #1
   28bc4:	str	r1, [fp, #-56]	; 0xffffffc8
   28bc8:	cmp	r8, sl
   28bcc:	movcc	r1, #92	; 0x5c
   28bd0:	strbcc	r1, [r6, r8]
   28bd4:	add	r8, r8, #1
   28bd8:	cmp	r8, sl
   28bdc:	and	r5, r5, r4
   28be0:	add	r7, r7, #1
   28be4:	strbcc	r0, [r6, r8]
   28be8:	add	r8, r8, #1
   28bec:	cmn	lr, #1
   28bf0:	bne	285ec <__assert_fail@plt+0x172cc>
   28bf4:	b	285f8 <__assert_fail@plt+0x172d8>
   28bf8:	ldr	r0, [sp, #36]	; 0x24
   28bfc:	mov	r4, #0
   28c00:	mov	r9, #0
   28c04:	mov	r5, #0
   28c08:	cmp	r0, #0
   28c0c:	beq	28b1c <__assert_fail@plt+0x177fc>
   28c10:	ldr	r5, [fp, #-48]	; 0xffffffd0
   28c14:	add	r7, r7, #1
   28c18:	cmn	lr, #1
   28c1c:	bne	285ec <__assert_fail@plt+0x172cc>
   28c20:	b	285f8 <__assert_fail@plt+0x172d8>
   28c24:	mov	r0, #0
   28c28:	cmn	lr, #1
   28c2c:	str	r0, [fp, #-36]	; 0xffffffdc
   28c30:	str	r0, [fp, #-40]	; 0xffffffd8
   28c34:	bne	28c48 <__assert_fail@plt+0x17928>
   28c38:	mov	r0, ip
   28c3c:	bl	11200 <strlen@plt>
   28c40:	ldr	ip, [fp, #-84]	; 0xffffffac
   28c44:	mov	lr, r0
   28c48:	add	r0, ip, r7
   28c4c:	mov	r4, #1
   28c50:	mov	r6, #0
   28c54:	str	lr, [sp, #28]
   28c58:	str	r0, [sp, #24]
   28c5c:	sub	r0, fp, #40	; 0x28
   28c60:	mov	r3, r0
   28c64:	str	r6, [sp, #44]	; 0x2c
   28c68:	add	r6, r6, r7
   28c6c:	sub	r0, fp, #44	; 0x2c
   28c70:	add	r1, ip, r6
   28c74:	sub	r2, lr, r6
   28c78:	bl	2b718 <__assert_fail@plt+0x1a3f8>
   28c7c:	cmp	r0, #0
   28c80:	beq	29118 <__assert_fail@plt+0x17df8>
   28c84:	cmn	r0, #1
   28c88:	beq	290d8 <__assert_fail@plt+0x17db8>
   28c8c:	ldr	lr, [sp, #28]
   28c90:	cmn	r0, #2
   28c94:	beq	290e0 <__assert_fail@plt+0x17dc0>
   28c98:	ldr	r2, [sp, #64]	; 0x40
   28c9c:	cmp	r0, #2
   28ca0:	mov	r1, #0
   28ca4:	movwcc	r1, #1
   28ca8:	eor	r2, r2, #1
   28cac:	orrs	r1, r2, r1
   28cb0:	bne	28d70 <__assert_fail@plt+0x17a50>
   28cb4:	ldr	r1, [sp, #44]	; 0x2c
   28cb8:	ldr	r2, [sp, #24]
   28cbc:	add	r1, r2, r1
   28cc0:	mov	r2, #1
   28cc4:	ldrb	r3, [r1, r2]
   28cc8:	sub	r3, r3, #91	; 0x5b
   28ccc:	cmp	r3, #33	; 0x21
   28cd0:	bhi	28d64 <__assert_fail@plt+0x17a44>
   28cd4:	add	r6, pc, #0
   28cd8:	ldr	pc, [r6, r3, lsl #2]
   28cdc:	ldrdeq	r9, [r2], -r8
   28ce0:	ldrdeq	r9, [r2], -r8
   28ce4:	andeq	r8, r2, r4, ror #26
   28ce8:	ldrdeq	r9, [r2], -r8
   28cec:	andeq	r8, r2, r4, ror #26
   28cf0:	ldrdeq	r9, [r2], -r8
   28cf4:	andeq	r8, r2, r4, ror #26
   28cf8:	andeq	r8, r2, r4, ror #26
   28cfc:	andeq	r8, r2, r4, ror #26
   28d00:	andeq	r8, r2, r4, ror #26
   28d04:	andeq	r8, r2, r4, ror #26
   28d08:	andeq	r8, r2, r4, ror #26
   28d0c:	andeq	r8, r2, r4, ror #26
   28d10:	andeq	r8, r2, r4, ror #26
   28d14:	andeq	r8, r2, r4, ror #26
   28d18:	andeq	r8, r2, r4, ror #26
   28d1c:	andeq	r8, r2, r4, ror #26
   28d20:	andeq	r8, r2, r4, ror #26
   28d24:	andeq	r8, r2, r4, ror #26
   28d28:	andeq	r8, r2, r4, ror #26
   28d2c:	andeq	r8, r2, r4, ror #26
   28d30:	andeq	r8, r2, r4, ror #26
   28d34:	andeq	r8, r2, r4, ror #26
   28d38:	andeq	r8, r2, r4, ror #26
   28d3c:	andeq	r8, r2, r4, ror #26
   28d40:	andeq	r8, r2, r4, ror #26
   28d44:	andeq	r8, r2, r4, ror #26
   28d48:	andeq	r8, r2, r4, ror #26
   28d4c:	andeq	r8, r2, r4, ror #26
   28d50:	andeq	r8, r2, r4, ror #26
   28d54:	andeq	r8, r2, r4, ror #26
   28d58:	andeq	r8, r2, r4, ror #26
   28d5c:	andeq	r8, r2, r4, ror #26
   28d60:	ldrdeq	r9, [r2], -r8
   28d64:	add	r2, r2, #1
   28d68:	cmp	r2, r0
   28d6c:	bcc	28cc4 <__assert_fail@plt+0x179a4>
   28d70:	ldr	r6, [sp, #44]	; 0x2c
   28d74:	add	r6, r0, r6
   28d78:	ldr	r0, [fp, #-44]	; 0xffffffd4
   28d7c:	bl	11140 <iswprint@plt>
   28d80:	cmp	r0, #0
   28d84:	movwne	r0, #1
   28d88:	and	r4, r4, r0
   28d8c:	sub	r0, fp, #40	; 0x28
   28d90:	bl	110e0 <mbsinit@plt>
   28d94:	ldr	lr, [sp, #28]
   28d98:	ldr	ip, [fp, #-84]	; 0xffffffac
   28d9c:	sub	r3, fp, #40	; 0x28
   28da0:	cmp	r0, #0
   28da4:	beq	28c64 <__assert_fail@plt+0x17944>
   28da8:	b	29120 <__assert_fail@plt+0x17e00>
   28dac:	ldr	r0, [sp, #32]
   28db0:	cmp	r0, #0
   28db4:	beq	28e50 <__assert_fail@plt+0x17b30>
   28db8:	add	r0, r7, #2
   28dbc:	cmp	r0, lr
   28dc0:	bcs	28e50 <__assert_fail@plt+0x17b30>
   28dc4:	add	r1, ip, r7
   28dc8:	ldrb	r1, [r1, #1]
   28dcc:	cmp	r1, #63	; 0x3f
   28dd0:	bne	28e50 <__assert_fail@plt+0x17b30>
   28dd4:	ldrb	r5, [ip, r0]
   28dd8:	sub	r1, r5, #33	; 0x21
   28ddc:	cmp	r1, #29
   28de0:	bhi	28e50 <__assert_fail@plt+0x17b30>
   28de4:	movw	r3, #20929	; 0x51c1
   28de8:	mov	r2, #1
   28dec:	movt	r3, #14336	; 0x3800
   28df0:	tst	r3, r2, lsl r1
   28df4:	beq	28e50 <__assert_fail@plt+0x17b30>
   28df8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   28dfc:	tst	r1, #1
   28e00:	bne	292f8 <__assert_fail@plt+0x17fd8>
   28e04:	cmp	r8, sl
   28e08:	mov	r7, r0
   28e0c:	mov	r4, #0
   28e10:	movcc	r1, #63	; 0x3f
   28e14:	strbcc	r1, [r6, r8]
   28e18:	add	r1, r8, #1
   28e1c:	cmp	r1, sl
   28e20:	movcc	r2, #34	; 0x22
   28e24:	strbcc	r2, [r6, r1]
   28e28:	add	r1, r8, #2
   28e2c:	cmp	r1, sl
   28e30:	movcc	r2, #34	; 0x22
   28e34:	strbcc	r2, [r6, r1]
   28e38:	add	r1, r8, #3
   28e3c:	add	r8, r8, #4
   28e40:	cmp	r1, sl
   28e44:	movcc	r2, #63	; 0x3f
   28e48:	strbcc	r2, [r6, r1]
   28e4c:	b	288b4 <__assert_fail@plt+0x17594>
   28e50:	mov	r5, #63	; 0x3f
   28e54:	mov	r4, #0
   28e58:	b	288b4 <__assert_fail@plt+0x17594>
   28e5c:	add	r1, r2, r7
   28e60:	ldr	lr, [sp, #28]
   28e64:	mov	r3, #0
   28e68:	str	r1, [sp, #44]	; 0x2c
   28e6c:	add	r1, r7, #1
   28e70:	ldr	r7, [fp, #-64]	; 0xffffffc0
   28e74:	tst	r0, #1
   28e78:	bne	28f4c <__assert_fail@plt+0x17c2c>
   28e7c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   28e80:	tst	r2, #1
   28e84:	bne	29240 <__assert_fail@plt+0x17f20>
   28e88:	ldr	r3, [fp, #-80]	; 0xffffffb0
   28e8c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   28e90:	cmp	r7, #2
   28e94:	movwne	r3, #1
   28e98:	orr	r3, r3, r2
   28e9c:	tst	r3, #1
   28ea0:	bne	28edc <__assert_fail@plt+0x17bbc>
   28ea4:	cmp	r8, sl
   28ea8:	add	r3, r8, #1
   28eac:	movcc	r2, #39	; 0x27
   28eb0:	strbcc	r2, [r6, r8]
   28eb4:	cmp	r3, sl
   28eb8:	movcc	r2, #36	; 0x24
   28ebc:	strbcc	r2, [r6, r3]
   28ec0:	add	r3, r8, #2
   28ec4:	add	r8, r8, #3
   28ec8:	cmp	r3, sl
   28ecc:	movcc	r2, #39	; 0x27
   28ed0:	strbcc	r2, [r6, r3]
   28ed4:	mov	r2, #1
   28ed8:	str	r2, [fp, #-56]	; 0xffffffc8
   28edc:	cmp	r8, sl
   28ee0:	movcc	r3, #92	; 0x5c
   28ee4:	strbcc	r3, [r6, r8]
   28ee8:	add	r3, r8, #1
   28eec:	cmp	r3, sl
   28ef0:	andcc	r7, r5, #192	; 0xc0
   28ef4:	movcc	r2, #48	; 0x30
   28ef8:	orrcc	r7, r2, r7, lsr #6
   28efc:	strbcc	r7, [r6, r3]
   28f00:	add	r3, r8, #2
   28f04:	add	r8, r8, #3
   28f08:	cmp	r3, sl
   28f0c:	lsrcc	r7, r5, #3
   28f10:	movcc	r2, #6
   28f14:	bficc	r7, r2, #3, #29
   28f18:	mov	r2, #6
   28f1c:	strbcc	r7, [r6, r3]
   28f20:	bfi	r5, r2, #3, #29
   28f24:	mov	r3, #1
   28f28:	b	28f70 <__assert_fail@plt+0x17c50>
   28f2c:	cmp	r8, sl
   28f30:	ldr	r7, [fp, #-64]	; 0xffffffc0
   28f34:	strbcc	r5, [r6, r8]
   28f38:	add	r8, r8, #1
   28f3c:	ldrb	r5, [ip, r1]
   28f40:	add	r1, r1, #1
   28f44:	tst	r0, #1
   28f48:	beq	28e7c <__assert_fail@plt+0x17b5c>
   28f4c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   28f50:	tst	r2, #1
   28f54:	beq	28f68 <__assert_fail@plt+0x17c48>
   28f58:	cmp	r8, sl
   28f5c:	movcc	r7, #92	; 0x5c
   28f60:	strbcc	r7, [r6, r8]
   28f64:	add	r8, r8, #1
   28f68:	mov	r2, #0
   28f6c:	str	r2, [fp, #-52]	; 0xffffffcc
   28f70:	ldr	r2, [sp, #44]	; 0x2c
   28f74:	and	r9, r3, #1
   28f78:	cmp	r2, r1
   28f7c:	bls	2907c <__assert_fail@plt+0x17d5c>
   28f80:	ldr	r2, [fp, #-56]	; 0xffffffc8
   28f84:	cmp	r9, #0
   28f88:	movwne	r9, #1
   28f8c:	mvn	r7, r2
   28f90:	orr	r7, r7, r9
   28f94:	tst	r7, #1
   28f98:	bne	28f2c <__assert_fail@plt+0x17c0c>
   28f9c:	cmp	r8, sl
   28fa0:	movcc	r7, #39	; 0x27
   28fa4:	strbcc	r7, [r6, r8]
   28fa8:	add	r7, r8, #1
   28fac:	add	r8, r8, #2
   28fb0:	cmp	r7, sl
   28fb4:	movcc	r2, #39	; 0x27
   28fb8:	strbcc	r2, [r6, r7]
   28fbc:	mov	r2, #0
   28fc0:	str	r2, [fp, #-56]	; 0xffffffc8
   28fc4:	b	28f2c <__assert_fail@plt+0x17c0c>
   28fc8:	cmp	r8, sl
   28fcc:	mov	r2, #1
   28fd0:	movcc	r0, #39	; 0x27
   28fd4:	strbcc	r0, [r6, r8]
   28fd8:	add	r0, r8, #1
   28fdc:	cmp	r0, sl
   28fe0:	movcc	r1, #36	; 0x24
   28fe4:	strbcc	r1, [r6, r0]
   28fe8:	add	r0, r8, #2
   28fec:	cmp	r0, sl
   28ff0:	movcc	r1, #39	; 0x27
   28ff4:	strbcc	r1, [r6, r0]
   28ff8:	add	r0, r8, #3
   28ffc:	cmp	r0, sl
   29000:	add	r8, r0, #1
   29004:	str	r2, [fp, #-56]	; 0xffffffc8
   29008:	movcc	r1, #92	; 0x5c
   2900c:	strbcc	r1, [r6, r0]
   29010:	ldr	r1, [fp, #-64]	; 0xffffffc0
   29014:	cmp	r1, #2
   29018:	beq	2906c <__assert_fail@plt+0x17d4c>
   2901c:	add	r1, r7, #1
   29020:	mov	r4, #0
   29024:	mov	r9, #1
   29028:	mov	r5, #48	; 0x30
   2902c:	cmp	r1, lr
   29030:	bcs	288b4 <__assert_fail@plt+0x17594>
   29034:	ldrb	r1, [ip, r1]
   29038:	sub	r1, r1, #48	; 0x30
   2903c:	uxtb	r1, r1
   29040:	cmp	r1, #9
   29044:	bhi	288b4 <__assert_fail@plt+0x17594>
   29048:	cmp	r8, sl
   2904c:	movcc	r1, #48	; 0x30
   29050:	strbcc	r1, [r6, r8]
   29054:	add	r1, r0, #2
   29058:	add	r8, r0, #3
   2905c:	cmp	r1, sl
   29060:	movcc	r2, #48	; 0x30
   29064:	strbcc	r2, [r6, r1]
   29068:	b	288b4 <__assert_fail@plt+0x17594>
   2906c:	mov	r0, #48	; 0x30
   29070:	mov	r9, #1
   29074:	mov	r4, #0
   29078:	b	28b4c <__assert_fail@plt+0x1782c>
   2907c:	cmp	r9, #0
   29080:	sub	r7, r1, #1
   29084:	mov	r0, r5
   29088:	movwne	r9, #1
   2908c:	cmp	r9, #0
   29090:	bne	290d0 <__assert_fail@plt+0x17db0>
   29094:	ldr	r1, [fp, #-56]	; 0xffffffc8
   29098:	tst	r1, #1
   2909c:	beq	290d0 <__assert_fail@plt+0x17db0>
   290a0:	cmp	r8, sl
   290a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   290a8:	movcc	r1, #39	; 0x27
   290ac:	strbcc	r1, [r6, r8]
   290b0:	add	r1, r8, #1
   290b4:	add	r8, r8, #2
   290b8:	cmp	r1, sl
   290bc:	movcc	r2, #39	; 0x27
   290c0:	strbcc	r2, [r6, r1]
   290c4:	mov	r1, #0
   290c8:	str	r1, [fp, #-56]	; 0xffffffc8
   290cc:	b	28bd8 <__assert_fail@plt+0x178b8>
   290d0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   290d4:	b	28bd8 <__assert_fail@plt+0x178b8>
   290d8:	mov	r4, #0
   290dc:	b	29118 <__assert_fail@plt+0x17df8>
   290e0:	mov	r4, #0
   290e4:	cmp	lr, r6
   290e8:	bls	29118 <__assert_fail@plt+0x17df8>
   290ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   290f0:	ldr	r6, [sp, #44]	; 0x2c
   290f4:	ldr	r0, [sp, #24]
   290f8:	ldrb	r0, [r0, r6]
   290fc:	cmp	r0, #0
   29100:	beq	29120 <__assert_fail@plt+0x17e00>
   29104:	add	r6, r6, #1
   29108:	add	r0, r7, r6
   2910c:	cmp	r0, lr
   29110:	bcc	290f4 <__assert_fail@plt+0x17dd4>
   29114:	b	29120 <__assert_fail@plt+0x17e00>
   29118:	ldr	ip, [fp, #-84]	; 0xffffffac
   2911c:	ldr	r6, [sp, #44]	; 0x2c
   29120:	mov	r1, r6
   29124:	ldr	r6, [sp, #80]	; 0x50
   29128:	b	28a80 <__assert_fail@plt+0x17760>
   2912c:	mov	lr, r7
   29130:	b	29138 <__assert_fail@plt+0x17e18>
   29134:	mvn	lr, #0
   29138:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2913c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   29140:	eor	r0, r7, #2
   29144:	orr	r0, r0, r8
   29148:	clz	r0, r0
   2914c:	lsr	r0, r0, #5
   29150:	tst	r1, r0
   29154:	bne	291e0 <__assert_fail@plt+0x17ec0>
   29158:	mov	r0, r1
   2915c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   29160:	cmp	r7, #2
   29164:	movwne	r1, #1
   29168:	orr	r0, r0, r1
   2916c:	tst	r0, #1
   29170:	ldreq	r0, [sp, #60]	; 0x3c
   29174:	eoreq	r0, r0, #1
   29178:	tsteq	r0, #1
   2917c:	bne	2928c <__assert_fail@plt+0x17f6c>
   29180:	mov	r9, lr
   29184:	tst	r5, #1
   29188:	bne	29248 <__assert_fail@plt+0x17f28>
   2918c:	ldr	r6, [sp, #56]	; 0x38
   29190:	mov	r4, #0
   29194:	cmp	r6, #0
   29198:	beq	29284 <__assert_fail@plt+0x17f64>
   2919c:	ldr	r0, [sp, #84]	; 0x54
   291a0:	mov	r1, #0
   291a4:	cmp	sl, #0
   291a8:	mov	r5, #0
   291ac:	str	r1, [fp, #-72]	; 0xffffffb8
   291b0:	beq	28380 <__assert_fail@plt+0x17060>
   291b4:	b	2928c <__assert_fail@plt+0x17f6c>
   291b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   291bc:	ldr	r2, [sp, #84]	; 0x54
   291c0:	b	291e8 <__assert_fail@plt+0x17ec8>
   291c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   291c8:	mov	r2, #1
   291cc:	mov	lr, r4
   291d0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   291d4:	b	291e8 <__assert_fail@plt+0x17ec8>
   291d8:	ldr	r6, [sp, #80]	; 0x50
   291dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   291e0:	ldr	r2, [sp, #84]	; 0x54
   291e4:	mov	r7, #2
   291e8:	mov	r0, #0
   291ec:	ldr	r1, [fp, #12]
   291f0:	tst	r2, #1
   291f4:	mov	r2, r7
   291f8:	mov	r3, lr
   291fc:	str	r0, [sp, #8]
   29200:	ldr	r0, [sp, #72]	; 0x48
   29204:	movwne	r2, #4
   29208:	cmp	r7, #2
   2920c:	movne	r2, r7
   29210:	str	r2, [sp]
   29214:	mov	r2, ip
   29218:	bic	r1, r1, #2
   2921c:	str	r0, [sp, #12]
   29220:	ldr	r0, [sp, #76]	; 0x4c
   29224:	str	r1, [sp, #4]
   29228:	mov	r1, sl
   2922c:	str	r0, [sp, #16]
   29230:	mov	r0, r6
   29234:	bl	28300 <__assert_fail@plt+0x16fe0>
   29238:	mov	r8, r0
   2923c:	b	292e4 <__assert_fail@plt+0x17fc4>
   29240:	ldr	r2, [sp, #84]	; 0x54
   29244:	b	291e8 <__assert_fail@plt+0x17ec8>
   29248:	mov	r0, #5
   2924c:	ldr	r1, [sp, #56]	; 0x38
   29250:	ldr	r2, [fp, #-84]	; 0xffffffac
   29254:	mov	r3, r9
   29258:	str	r0, [sp]
   2925c:	ldr	r0, [fp, #12]
   29260:	str	r0, [sp, #4]
   29264:	ldr	r0, [fp, #16]
   29268:	str	r0, [sp, #8]
   2926c:	ldr	r0, [sp, #72]	; 0x48
   29270:	str	r0, [sp, #12]
   29274:	ldr	r0, [sp, #76]	; 0x4c
   29278:	str	r0, [sp, #16]
   2927c:	ldr	r0, [sp, #80]	; 0x50
   29280:	b	29234 <__assert_fail@plt+0x17f14>
   29284:	mov	r0, #0
   29288:	str	r0, [fp, #-72]	; 0xffffffb8
   2928c:	ldr	r1, [sp, #92]	; 0x5c
   29290:	cmp	r1, #0
   29294:	beq	292d4 <__assert_fail@plt+0x17fb4>
   29298:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2929c:	ldr	r2, [sp, #80]	; 0x50
   292a0:	tst	r0, #1
   292a4:	bne	292d8 <__assert_fail@plt+0x17fb8>
   292a8:	ldrb	r0, [r1]
   292ac:	cmp	r0, #0
   292b0:	beq	292d8 <__assert_fail@plt+0x17fb8>
   292b4:	add	r1, r1, #1
   292b8:	cmp	r8, sl
   292bc:	strbcc	r0, [r2, r8]
   292c0:	add	r8, r8, #1
   292c4:	ldrb	r0, [r1], #1
   292c8:	cmp	r0, #0
   292cc:	bne	292b8 <__assert_fail@plt+0x17f98>
   292d0:	b	292d8 <__assert_fail@plt+0x17fb8>
   292d4:	ldr	r2, [sp, #80]	; 0x50
   292d8:	cmp	r8, sl
   292dc:	movcc	r0, #0
   292e0:	strbcc	r0, [r2, r8]
   292e4:	mov	r0, r8
   292e8:	sub	sp, fp, #28
   292ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292f0:	mov	r2, #1
   292f4:	b	291d0 <__assert_fail@plt+0x17eb0>
   292f8:	ldr	r2, [sp, #84]	; 0x54
   292fc:	mov	r7, #5
   29300:	b	291e8 <__assert_fail@plt+0x17ec8>
   29304:	bl	11314 <abort@plt>
   29308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2930c:	add	fp, sp, #28
   29310:	sub	sp, sp, #28
   29314:	movw	r5, #8616	; 0x21a8
   29318:	cmp	r2, #0
   2931c:	mov	r4, r1
   29320:	mov	r7, r0
   29324:	str	r0, [sp, #20]
   29328:	movt	r5, #4
   2932c:	movne	r5, r2
   29330:	bl	11218 <__errno_location@plt>
   29334:	mov	sl, r0
   29338:	ldm	r5, {r0, r1}
   2933c:	ldr	r2, [r5, #40]	; 0x28
   29340:	ldr	r3, [r5, #44]	; 0x2c
   29344:	add	r9, r5, #8
   29348:	ldr	r6, [sl]
   2934c:	orr	r8, r1, #1
   29350:	mov	r1, #0
   29354:	str	r6, [sp, #24]
   29358:	stm	sp, {r0, r8, r9}
   2935c:	str	r2, [sp, #12]
   29360:	str	r3, [sp, #16]
   29364:	mov	r0, #0
   29368:	mov	r2, r7
   2936c:	mov	r3, r4
   29370:	mov	r6, r4
   29374:	bl	28300 <__assert_fail@plt+0x16fe0>
   29378:	add	r7, r0, #1
   2937c:	mov	r0, r7
   29380:	bl	2ab1c <__assert_fail@plt+0x197fc>
   29384:	mov	r4, r0
   29388:	ldr	r0, [r5]
   2938c:	ldr	r2, [r5, #44]	; 0x2c
   29390:	ldr	r1, [r5, #40]	; 0x28
   29394:	mov	r3, r6
   29398:	stm	sp, {r0, r8, r9}
   2939c:	str	r2, [sp, #16]
   293a0:	str	r1, [sp, #12]
   293a4:	mov	r0, r4
   293a8:	mov	r1, r7
   293ac:	ldr	r2, [sp, #20]
   293b0:	bl	28300 <__assert_fail@plt+0x16fe0>
   293b4:	ldr	r0, [sp, #24]
   293b8:	str	r0, [sl]
   293bc:	mov	r0, r4
   293c0:	sub	sp, fp, #28
   293c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293cc:	add	fp, sp, #28
   293d0:	sub	sp, sp, #36	; 0x24
   293d4:	movw	r8, #8616	; 0x21a8
   293d8:	cmp	r3, #0
   293dc:	mov	r4, r2
   293e0:	str	r2, [sp, #24]
   293e4:	mov	r5, r1
   293e8:	mov	r6, r0
   293ec:	str	r0, [sp, #20]
   293f0:	movt	r8, #4
   293f4:	movne	r8, r3
   293f8:	bl	11218 <__errno_location@plt>
   293fc:	str	r0, [sp, #28]
   29400:	cmp	r4, #0
   29404:	add	sl, r8, #8
   29408:	ldm	r8, {r3, r9}
   2940c:	ldr	r7, [r0]
   29410:	ldr	r1, [r8, #40]	; 0x28
   29414:	ldr	r2, [r8, #44]	; 0x2c
   29418:	mov	r0, #0
   2941c:	orreq	r9, r9, #1
   29420:	str	r7, [sp, #32]
   29424:	mov	r7, r5
   29428:	stm	sp, {r3, r9, sl}
   2942c:	str	r1, [sp, #12]
   29430:	str	r2, [sp, #16]
   29434:	mov	r1, #0
   29438:	mov	r2, r6
   2943c:	mov	r3, r5
   29440:	bl	28300 <__assert_fail@plt+0x16fe0>
   29444:	add	r4, r0, #1
   29448:	mov	r5, r0
   2944c:	mov	r0, r4
   29450:	bl	2ab1c <__assert_fail@plt+0x197fc>
   29454:	mov	r6, r0
   29458:	ldr	r0, [r8]
   2945c:	ldr	r2, [r8, #44]	; 0x2c
   29460:	ldr	r1, [r8, #40]	; 0x28
   29464:	mov	r3, r7
   29468:	stm	sp, {r0, r9, sl}
   2946c:	str	r2, [sp, #16]
   29470:	str	r1, [sp, #12]
   29474:	mov	r0, r6
   29478:	mov	r1, r4
   2947c:	ldr	r2, [sp, #20]
   29480:	bl	28300 <__assert_fail@plt+0x16fe0>
   29484:	ldr	r0, [sp, #24]
   29488:	ldr	r1, [sp, #32]
   2948c:	ldr	r2, [sp, #28]
   29490:	cmp	r0, #0
   29494:	str	r1, [r2]
   29498:	strne	r5, [r0]
   2949c:	mov	r0, r6
   294a0:	sub	sp, fp, #28
   294a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   294ac:	add	fp, sp, #24
   294b0:	movw	r5, #8492	; 0x212c
   294b4:	movw	r8, #8488	; 0x2128
   294b8:	movt	r5, #4
   294bc:	movt	r8, #4
   294c0:	ldr	r0, [r5]
   294c4:	ldr	r4, [r8]
   294c8:	cmp	r0, #2
   294cc:	blt	294f8 <__assert_fail@plt+0x181d8>
   294d0:	add	r7, r4, #12
   294d4:	mov	r6, #0
   294d8:	ldr	r0, [r7, r6, lsl #3]
   294dc:	bl	1a3a4 <__assert_fail@plt+0x9084>
   294e0:	ldr	r1, [r5]
   294e4:	add	r2, r6, #2
   294e8:	add	r0, r6, #1
   294ec:	mov	r6, r0
   294f0:	cmp	r2, r1
   294f4:	blt	294d8 <__assert_fail@plt+0x181b8>
   294f8:	ldr	r0, [r4, #4]
   294fc:	movw	r7, #8664	; 0x21d8
   29500:	movt	r7, #4
   29504:	cmp	r0, r7
   29508:	beq	29520 <__assert_fail@plt+0x18200>
   2950c:	bl	1a3a4 <__assert_fail@plt+0x9084>
   29510:	movw	r0, #8496	; 0x2130
   29514:	mov	r6, #256	; 0x100
   29518:	movt	r0, #4
   2951c:	strd	r6, [r0]
   29520:	movw	r6, #8496	; 0x2130
   29524:	movt	r6, #4
   29528:	cmp	r4, r6
   2952c:	beq	2953c <__assert_fail@plt+0x1821c>
   29530:	mov	r0, r4
   29534:	bl	1a3a4 <__assert_fail@plt+0x9084>
   29538:	str	r6, [r8]
   2953c:	mov	r0, #1
   29540:	str	r0, [r5]
   29544:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29548:	movw	r3, #8616	; 0x21a8
   2954c:	mvn	r2, #0
   29550:	movt	r3, #4
   29554:	b	29558 <__assert_fail@plt+0x18238>
   29558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2955c:	add	fp, sp, #28
   29560:	sub	sp, sp, #44	; 0x2c
   29564:	mov	r7, r3
   29568:	str	r2, [sp, #36]	; 0x24
   2956c:	str	r1, [sp, #32]
   29570:	mov	r5, r0
   29574:	bl	11218 <__errno_location@plt>
   29578:	cmp	r5, #0
   2957c:	blt	296e8 <__assert_fail@plt+0x183c8>
   29580:	cmn	r5, #-2147483647	; 0x80000001
   29584:	beq	296e8 <__assert_fail@plt+0x183c8>
   29588:	movw	r8, #8492	; 0x212c
   2958c:	movw	r4, #8488	; 0x2128
   29590:	str	r0, [sp, #28]
   29594:	ldr	r0, [r0]
   29598:	movt	r8, #4
   2959c:	movt	r4, #4
   295a0:	ldr	r1, [r8]
   295a4:	ldr	r6, [r4]
   295a8:	str	r0, [sp, #24]
   295ac:	cmp	r1, r5
   295b0:	ble	295bc <__assert_fail@plt+0x1829c>
   295b4:	mov	sl, r6
   295b8:	b	29624 <__assert_fail@plt+0x18304>
   295bc:	movw	r9, #8496	; 0x2130
   295c0:	mov	r0, #8
   295c4:	add	r2, r5, #1
   295c8:	str	r1, [fp, #-32]	; 0xffffffe0
   295cc:	mvn	r3, #-2147483648	; 0x80000000
   295d0:	movt	r9, #4
   295d4:	str	r0, [sp]
   295d8:	sub	r2, r2, r1
   295dc:	sub	r1, fp, #32
   295e0:	subs	r0, r6, r9
   295e4:	movne	r0, r6
   295e8:	bl	2ad1c <__assert_fail@plt+0x199fc>
   295ec:	cmp	r6, r9
   295f0:	mov	sl, r0
   295f4:	str	r0, [r4]
   295f8:	ldrdeq	r0, [r9]
   295fc:	stmeq	sl, {r0, r1}
   29600:	ldr	r1, [r8]
   29604:	ldr	r2, [fp, #-32]	; 0xffffffe0
   29608:	add	r0, sl, r1, lsl #3
   2960c:	sub	r1, r2, r1
   29610:	lsl	r2, r1, #3
   29614:	mov	r1, #0
   29618:	bl	11248 <memset@plt>
   2961c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29620:	str	r0, [r8]
   29624:	mov	r9, sl
   29628:	ldr	r6, [r9, r5, lsl #3]!
   2962c:	ldr	r4, [r9, #4]!
   29630:	ldm	r7, {r0, r1}
   29634:	ldr	r2, [r7, #40]	; 0x28
   29638:	ldr	r3, [r7, #44]	; 0x2c
   2963c:	orr	r8, r1, #1
   29640:	add	r1, r7, #8
   29644:	stm	sp, {r0, r8}
   29648:	add	r0, sp, #8
   2964c:	str	r1, [sp, #20]
   29650:	stm	r0, {r1, r2, r3}
   29654:	mov	r0, r4
   29658:	mov	r1, r6
   2965c:	ldr	r2, [sp, #32]
   29660:	ldr	r3, [sp, #36]	; 0x24
   29664:	bl	28300 <__assert_fail@plt+0x16fe0>
   29668:	cmp	r6, r0
   2966c:	bhi	296d0 <__assert_fail@plt+0x183b0>
   29670:	add	r6, r0, #1
   29674:	movw	r0, #8664	; 0x21d8
   29678:	movt	r0, #4
   2967c:	str	r6, [sl, r5, lsl #3]
   29680:	cmp	r4, r0
   29684:	beq	29690 <__assert_fail@plt+0x18370>
   29688:	mov	r0, r4
   2968c:	bl	1a3a4 <__assert_fail@plt+0x9084>
   29690:	mov	r0, r6
   29694:	bl	2ab1c <__assert_fail@plt+0x197fc>
   29698:	str	r0, [r9]
   2969c:	mov	r4, r0
   296a0:	add	r3, sp, #8
   296a4:	ldr	r0, [r7]
   296a8:	ldr	r1, [r7, #40]	; 0x28
   296ac:	ldr	r2, [r7, #44]	; 0x2c
   296b0:	stm	sp, {r0, r8}
   296b4:	ldr	r0, [sp, #20]
   296b8:	stm	r3, {r0, r1, r2}
   296bc:	mov	r0, r4
   296c0:	mov	r1, r6
   296c4:	ldr	r2, [sp, #32]
   296c8:	ldr	r3, [sp, #36]	; 0x24
   296cc:	bl	28300 <__assert_fail@plt+0x16fe0>
   296d0:	ldr	r0, [sp, #28]
   296d4:	ldr	r1, [sp, #24]
   296d8:	str	r1, [r0]
   296dc:	mov	r0, r4
   296e0:	sub	sp, fp, #28
   296e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296e8:	bl	11314 <abort@plt>
   296ec:	movw	r3, #8616	; 0x21a8
   296f0:	movt	r3, #4
   296f4:	b	29558 <__assert_fail@plt+0x18238>
   296f8:	movw	r3, #8616	; 0x21a8
   296fc:	mov	r1, r0
   29700:	mov	r0, #0
   29704:	mvn	r2, #0
   29708:	movt	r3, #4
   2970c:	b	29558 <__assert_fail@plt+0x18238>
   29710:	movw	r3, #8616	; 0x21a8
   29714:	mov	r2, r1
   29718:	mov	r1, r0
   2971c:	mov	r0, #0
   29720:	movt	r3, #4
   29724:	b	29558 <__assert_fail@plt+0x18238>
   29728:	push	{fp, lr}
   2972c:	mov	fp, sp
   29730:	sub	sp, sp, #48	; 0x30
   29734:	vmov.i32	q8, #0	; 0x00000000
   29738:	mov	ip, #32
   2973c:	mov	r3, sp
   29740:	mov	lr, r2
   29744:	cmp	r1, #10
   29748:	add	r2, r3, #16
   2974c:	vst1.64	{d16-d17}, [r3], ip
   29750:	vst1.64	{d16-d17}, [r3]
   29754:	vst1.64	{d16-d17}, [r2]
   29758:	beq	29778 <__assert_fail@plt+0x18458>
   2975c:	str	r1, [sp]
   29760:	mov	r3, sp
   29764:	mov	r1, lr
   29768:	mvn	r2, #0
   2976c:	bl	29558 <__assert_fail@plt+0x18238>
   29770:	mov	sp, fp
   29774:	pop	{fp, pc}
   29778:	bl	11314 <abort@plt>
   2977c:	push	{r4, sl, fp, lr}
   29780:	add	fp, sp, #8
   29784:	sub	sp, sp, #48	; 0x30
   29788:	mov	ip, r3
   2978c:	mov	r3, sp
   29790:	vmov.i32	q8, #0	; 0x00000000
   29794:	mov	lr, #32
   29798:	cmp	r1, #10
   2979c:	add	r4, r3, #16
   297a0:	vst1.64	{d16-d17}, [r3], lr
   297a4:	vst1.64	{d16-d17}, [r3]
   297a8:	vst1.64	{d16-d17}, [r4]
   297ac:	beq	297cc <__assert_fail@plt+0x184ac>
   297b0:	str	r1, [sp]
   297b4:	mov	r1, r2
   297b8:	mov	r3, sp
   297bc:	mov	r2, ip
   297c0:	bl	29558 <__assert_fail@plt+0x18238>
   297c4:	sub	sp, fp, #8
   297c8:	pop	{r4, sl, fp, pc}
   297cc:	bl	11314 <abort@plt>
   297d0:	push	{fp, lr}
   297d4:	mov	fp, sp
   297d8:	sub	sp, sp, #48	; 0x30
   297dc:	mov	r3, sp
   297e0:	vmov.i32	q8, #0	; 0x00000000
   297e4:	mov	ip, #32
   297e8:	cmp	r0, #10
   297ec:	add	r2, r3, #16
   297f0:	vst1.64	{d16-d17}, [r3], ip
   297f4:	vst1.64	{d16-d17}, [r3]
   297f8:	vst1.64	{d16-d17}, [r2]
   297fc:	beq	2981c <__assert_fail@plt+0x184fc>
   29800:	str	r0, [sp]
   29804:	mov	r3, sp
   29808:	mov	r0, #0
   2980c:	mvn	r2, #0
   29810:	bl	29558 <__assert_fail@plt+0x18238>
   29814:	mov	sp, fp
   29818:	pop	{fp, pc}
   2981c:	bl	11314 <abort@plt>
   29820:	push	{fp, lr}
   29824:	mov	fp, sp
   29828:	sub	sp, sp, #48	; 0x30
   2982c:	mov	r3, sp
   29830:	vmov.i32	q8, #0	; 0x00000000
   29834:	mov	ip, #32
   29838:	cmp	r0, #10
   2983c:	add	lr, r3, #16
   29840:	vst1.64	{d16-d17}, [r3], ip
   29844:	vst1.64	{d16-d17}, [r3]
   29848:	vst1.64	{d16-d17}, [lr]
   2984c:	beq	29868 <__assert_fail@plt+0x18548>
   29850:	str	r0, [sp]
   29854:	mov	r3, sp
   29858:	mov	r0, #0
   2985c:	bl	29558 <__assert_fail@plt+0x18238>
   29860:	mov	sp, fp
   29864:	pop	{fp, pc}
   29868:	bl	11314 <abort@plt>
   2986c:	push	{r4, sl, fp, lr}
   29870:	add	fp, sp, #8
   29874:	sub	sp, sp, #48	; 0x30
   29878:	mov	lr, r0
   2987c:	movw	r0, #8616	; 0x21a8
   29880:	mov	r3, #32
   29884:	mov	ip, r1
   29888:	mov	r4, #1
   2988c:	movt	r0, #4
   29890:	add	r1, r0, #16
   29894:	vld1.64	{d16-d17}, [r0], r3
   29898:	mov	r3, sp
   2989c:	vld1.64	{d18-d19}, [r1]
   298a0:	add	r1, r3, #16
   298a4:	vld1.64	{d20-d21}, [r0]
   298a8:	add	r0, r3, #32
   298ac:	vst1.64	{d18-d19}, [r1]
   298b0:	mov	r1, r3
   298b4:	vst1.64	{d20-d21}, [r0]
   298b8:	mov	r0, #28
   298bc:	and	r0, r0, r2, lsr #3
   298c0:	and	r2, r2, #31
   298c4:	vst1.64	{d16-d17}, [r1], r0
   298c8:	ldr	r0, [r1, #8]
   298cc:	bic	r4, r4, r0, lsr r2
   298d0:	eor	r0, r0, r4, lsl r2
   298d4:	mov	r2, ip
   298d8:	str	r0, [r1, #8]
   298dc:	mov	r0, #0
   298e0:	mov	r1, lr
   298e4:	bl	29558 <__assert_fail@plt+0x18238>
   298e8:	sub	sp, fp, #8
   298ec:	pop	{r4, sl, fp, pc}
   298f0:	push	{fp, lr}
   298f4:	mov	fp, sp
   298f8:	sub	sp, sp, #48	; 0x30
   298fc:	mov	ip, r0
   29900:	movw	r0, #8616	; 0x21a8
   29904:	mov	r3, #32
   29908:	movt	r0, #4
   2990c:	add	r2, r0, #16
   29910:	vld1.64	{d16-d17}, [r0], r3
   29914:	mov	r3, sp
   29918:	vld1.64	{d18-d19}, [r2]
   2991c:	add	r2, r3, #16
   29920:	vld1.64	{d20-d21}, [r0]
   29924:	add	r0, r3, #32
   29928:	vst1.64	{d18-d19}, [r2]
   2992c:	mov	r2, r3
   29930:	vst1.64	{d20-d21}, [r0]
   29934:	mov	r0, #28
   29938:	and	r0, r0, r1, lsr #3
   2993c:	and	r1, r1, #31
   29940:	vst1.64	{d16-d17}, [r2], r0
   29944:	mov	r0, #1
   29948:	ldr	lr, [r2, #8]
   2994c:	bic	r0, r0, lr, lsr r1
   29950:	eor	r0, lr, r0, lsl r1
   29954:	mov	r1, ip
   29958:	str	r0, [r2, #8]
   2995c:	mov	r0, #0
   29960:	mvn	r2, #0
   29964:	bl	29558 <__assert_fail@plt+0x18238>
   29968:	mov	sp, fp
   2996c:	pop	{fp, pc}
   29970:	push	{fp, lr}
   29974:	mov	fp, sp
   29978:	sub	sp, sp, #48	; 0x30
   2997c:	movw	r2, #8616	; 0x21a8
   29980:	mov	r3, #32
   29984:	mov	r1, r0
   29988:	movt	r2, #4
   2998c:	add	r0, r2, #16
   29990:	vld1.64	{d16-d17}, [r2], r3
   29994:	mov	r3, sp
   29998:	vld1.64	{d18-d19}, [r0]
   2999c:	add	r0, r3, #16
   299a0:	vld1.64	{d20-d21}, [r2]
   299a4:	mov	r2, r3
   299a8:	vst1.64	{d18-d19}, [r0]
   299ac:	add	r0, r3, #32
   299b0:	vst1.64	{d20-d21}, [r0]
   299b4:	mov	r0, #12
   299b8:	vst1.64	{d16-d17}, [r2], r0
   299bc:	ldr	r0, [r2]
   299c0:	orr	r0, r0, #67108864	; 0x4000000
   299c4:	str	r0, [r2]
   299c8:	mov	r0, #0
   299cc:	mvn	r2, #0
   299d0:	bl	29558 <__assert_fail@plt+0x18238>
   299d4:	mov	sp, fp
   299d8:	pop	{fp, pc}
   299dc:	push	{fp, lr}
   299e0:	mov	fp, sp
   299e4:	sub	sp, sp, #48	; 0x30
   299e8:	mov	ip, r1
   299ec:	mov	r1, r0
   299f0:	movw	r0, #8616	; 0x21a8
   299f4:	mov	r3, #32
   299f8:	movt	r0, #4
   299fc:	add	r2, r0, #16
   29a00:	vld1.64	{d16-d17}, [r0], r3
   29a04:	mov	r3, sp
   29a08:	vld1.64	{d18-d19}, [r2]
   29a0c:	add	r2, r3, #16
   29a10:	vld1.64	{d20-d21}, [r0]
   29a14:	add	r0, r3, #32
   29a18:	vst1.64	{d18-d19}, [r2]
   29a1c:	mov	r2, r3
   29a20:	vst1.64	{d20-d21}, [r0]
   29a24:	mov	r0, #12
   29a28:	vst1.64	{d16-d17}, [r2], r0
   29a2c:	ldr	r0, [r2]
   29a30:	orr	r0, r0, #67108864	; 0x4000000
   29a34:	str	r0, [r2]
   29a38:	mov	r0, #0
   29a3c:	mov	r2, ip
   29a40:	bl	29558 <__assert_fail@plt+0x18238>
   29a44:	mov	sp, fp
   29a48:	pop	{fp, pc}
   29a4c:	push	{r4, sl, fp, lr}
   29a50:	add	fp, sp, #8
   29a54:	sub	sp, sp, #96	; 0x60
   29a58:	mov	ip, r2
   29a5c:	mov	r2, sp
   29a60:	vmov.i32	q8, #0	; 0x00000000
   29a64:	mov	r4, #28
   29a68:	cmp	r1, #10
   29a6c:	mov	r3, r2
   29a70:	add	lr, r2, #16
   29a74:	vst1.64	{d16-d17}, [r3], r4
   29a78:	vst1.64	{d16-d17}, [lr]
   29a7c:	vst1.32	{d16-d17}, [r3]
   29a80:	beq	29ad0 <__assert_fail@plt+0x187b0>
   29a84:	vld1.64	{d16-d17}, [r2], r4
   29a88:	vld1.64	{d18-d19}, [lr]
   29a8c:	add	r3, sp, #48	; 0x30
   29a90:	add	r4, r3, #4
   29a94:	vld1.32	{d20-d21}, [r2]
   29a98:	add	r2, r3, #20
   29a9c:	vst1.32	{d16-d17}, [r4]
   29aa0:	vst1.32	{d18-d19}, [r2]
   29aa4:	add	r2, r3, #32
   29aa8:	vst1.32	{d20-d21}, [r2]
   29aac:	str	r1, [sp, #48]	; 0x30
   29ab0:	mvn	r2, #0
   29ab4:	ldr	r1, [sp, #60]	; 0x3c
   29ab8:	orr	r1, r1, #67108864	; 0x4000000
   29abc:	str	r1, [sp, #60]	; 0x3c
   29ac0:	mov	r1, ip
   29ac4:	bl	29558 <__assert_fail@plt+0x18238>
   29ac8:	sub	sp, fp, #8
   29acc:	pop	{r4, sl, fp, pc}
   29ad0:	bl	11314 <abort@plt>
   29ad4:	push	{r4, r5, fp, lr}
   29ad8:	add	fp, sp, #8
   29adc:	sub	sp, sp, #48	; 0x30
   29ae0:	mov	ip, r3
   29ae4:	movw	r3, #8616	; 0x21a8
   29ae8:	mov	lr, #32
   29aec:	cmp	r1, #0
   29af0:	mov	r5, sp
   29af4:	movt	r3, #4
   29af8:	cmpne	r2, #0
   29afc:	add	r4, r3, #16
   29b00:	vld1.64	{d16-d17}, [r3], lr
   29b04:	vld1.64	{d18-d19}, [r4]
   29b08:	add	r4, r5, #16
   29b0c:	vld1.64	{d20-d21}, [r3]
   29b10:	vst1.64	{d16-d17}, [r5], lr
   29b14:	mov	r3, #10
   29b18:	vst1.64	{d18-d19}, [r4]
   29b1c:	vst1.64	{d20-d21}, [r5]
   29b20:	str	r3, [sp]
   29b24:	bne	29b2c <__assert_fail@plt+0x1880c>
   29b28:	bl	11314 <abort@plt>
   29b2c:	str	r2, [sp, #44]	; 0x2c
   29b30:	str	r1, [sp, #40]	; 0x28
   29b34:	mov	r3, sp
   29b38:	mov	r1, ip
   29b3c:	mvn	r2, #0
   29b40:	bl	29558 <__assert_fail@plt+0x18238>
   29b44:	sub	sp, fp, #8
   29b48:	pop	{r4, r5, fp, pc}
   29b4c:	push	{r4, r5, fp, lr}
   29b50:	add	fp, sp, #8
   29b54:	sub	sp, sp, #48	; 0x30
   29b58:	mov	lr, r3
   29b5c:	movw	r3, #8616	; 0x21a8
   29b60:	mov	ip, #32
   29b64:	cmp	r1, #0
   29b68:	mov	r5, sp
   29b6c:	movt	r3, #4
   29b70:	cmpne	r2, #0
   29b74:	add	r4, r3, #16
   29b78:	vld1.64	{d16-d17}, [r3], ip
   29b7c:	vld1.64	{d18-d19}, [r4]
   29b80:	add	r4, r5, #16
   29b84:	vld1.64	{d20-d21}, [r3]
   29b88:	vst1.64	{d16-d17}, [r5], ip
   29b8c:	mov	r3, #10
   29b90:	vst1.64	{d18-d19}, [r4]
   29b94:	vst1.64	{d20-d21}, [r5]
   29b98:	str	r3, [sp]
   29b9c:	bne	29ba4 <__assert_fail@plt+0x18884>
   29ba0:	bl	11314 <abort@plt>
   29ba4:	ldr	ip, [fp, #8]
   29ba8:	str	r2, [sp, #44]	; 0x2c
   29bac:	str	r1, [sp, #40]	; 0x28
   29bb0:	mov	r3, sp
   29bb4:	mov	r1, lr
   29bb8:	mov	r2, ip
   29bbc:	bl	29558 <__assert_fail@plt+0x18238>
   29bc0:	sub	sp, fp, #8
   29bc4:	pop	{r4, r5, fp, pc}
   29bc8:	push	{r4, sl, fp, lr}
   29bcc:	add	fp, sp, #8
   29bd0:	sub	sp, sp, #48	; 0x30
   29bd4:	mov	ip, r2
   29bd8:	movw	r2, #8616	; 0x21a8
   29bdc:	mov	lr, #32
   29be0:	cmp	r0, #0
   29be4:	mov	r4, sp
   29be8:	movt	r2, #4
   29bec:	cmpne	r1, #0
   29bf0:	add	r3, r2, #16
   29bf4:	vld1.64	{d16-d17}, [r2], lr
   29bf8:	vld1.64	{d18-d19}, [r3]
   29bfc:	add	r3, r4, #16
   29c00:	vld1.64	{d20-d21}, [r2]
   29c04:	vst1.64	{d16-d17}, [r4], lr
   29c08:	mov	r2, #10
   29c0c:	vst1.64	{d18-d19}, [r3]
   29c10:	vst1.64	{d20-d21}, [r4]
   29c14:	str	r2, [sp]
   29c18:	bne	29c20 <__assert_fail@plt+0x18900>
   29c1c:	bl	11314 <abort@plt>
   29c20:	str	r1, [sp, #44]	; 0x2c
   29c24:	str	r0, [sp, #40]	; 0x28
   29c28:	mov	r3, sp
   29c2c:	mov	r0, #0
   29c30:	mov	r1, ip
   29c34:	mvn	r2, #0
   29c38:	bl	29558 <__assert_fail@plt+0x18238>
   29c3c:	sub	sp, fp, #8
   29c40:	pop	{r4, sl, fp, pc}
   29c44:	push	{r4, r5, fp, lr}
   29c48:	add	fp, sp, #8
   29c4c:	sub	sp, sp, #48	; 0x30
   29c50:	mov	lr, r2
   29c54:	movw	r2, #8616	; 0x21a8
   29c58:	mov	ip, r3
   29c5c:	mov	r3, #32
   29c60:	cmp	r0, #0
   29c64:	mov	r5, sp
   29c68:	movt	r2, #4
   29c6c:	cmpne	r1, #0
   29c70:	add	r4, r2, #16
   29c74:	vld1.64	{d16-d17}, [r2], r3
   29c78:	vld1.64	{d18-d19}, [r4]
   29c7c:	add	r4, r5, #16
   29c80:	vld1.64	{d20-d21}, [r2]
   29c84:	vst1.64	{d16-d17}, [r5], r3
   29c88:	mov	r2, #10
   29c8c:	vst1.64	{d18-d19}, [r4]
   29c90:	vst1.64	{d20-d21}, [r5]
   29c94:	str	r2, [sp]
   29c98:	bne	29ca0 <__assert_fail@plt+0x18980>
   29c9c:	bl	11314 <abort@plt>
   29ca0:	str	r1, [sp, #44]	; 0x2c
   29ca4:	str	r0, [sp, #40]	; 0x28
   29ca8:	mov	r3, sp
   29cac:	mov	r0, #0
   29cb0:	mov	r1, lr
   29cb4:	mov	r2, ip
   29cb8:	bl	29558 <__assert_fail@plt+0x18238>
   29cbc:	sub	sp, fp, #8
   29cc0:	pop	{r4, r5, fp, pc}
   29cc4:	movw	r3, #8504	; 0x2138
   29cc8:	movt	r3, #4
   29ccc:	b	29558 <__assert_fail@plt+0x18238>
   29cd0:	movw	r3, #8504	; 0x2138
   29cd4:	mov	r2, r1
   29cd8:	mov	r1, r0
   29cdc:	mov	r0, #0
   29ce0:	movt	r3, #4
   29ce4:	b	29558 <__assert_fail@plt+0x18238>
   29ce8:	movw	r3, #8504	; 0x2138
   29cec:	mvn	r2, #0
   29cf0:	movt	r3, #4
   29cf4:	b	29558 <__assert_fail@plt+0x18238>
   29cf8:	movw	r3, #8504	; 0x2138
   29cfc:	mov	r1, r0
   29d00:	mov	r0, #0
   29d04:	mvn	r2, #0
   29d08:	movt	r3, #4
   29d0c:	b	29558 <__assert_fail@plt+0x18238>
   29d10:	push	{r4, r5, fp, lr}
   29d14:	add	fp, sp, #8
   29d18:	mov	r5, r0
   29d1c:	mov	r4, r1
   29d20:	mov	r0, #0
   29d24:	mov	r2, #5
   29d28:	mov	r1, r5
   29d2c:	bl	110f8 <dcgettext@plt>
   29d30:	cmp	r0, r5
   29d34:	popne	{r4, r5, fp, pc}
   29d38:	bl	2b488 <__assert_fail@plt+0x1a168>
   29d3c:	ldrb	r1, [r0]
   29d40:	and	r1, r1, #223	; 0xdf
   29d44:	cmp	r1, #71	; 0x47
   29d48:	beq	29db0 <__assert_fail@plt+0x18a90>
   29d4c:	cmp	r1, #85	; 0x55
   29d50:	bne	29dd4 <__assert_fail@plt+0x18ab4>
   29d54:	ldrb	r1, [r0, #1]
   29d58:	and	r1, r1, #223	; 0xdf
   29d5c:	cmp	r1, #84	; 0x54
   29d60:	bne	29dd4 <__assert_fail@plt+0x18ab4>
   29d64:	ldrb	r1, [r0, #2]
   29d68:	and	r1, r1, #223	; 0xdf
   29d6c:	cmp	r1, #70	; 0x46
   29d70:	ldrbeq	r1, [r0, #3]
   29d74:	cmpeq	r1, #45	; 0x2d
   29d78:	bne	29dd4 <__assert_fail@plt+0x18ab4>
   29d7c:	ldrb	r1, [r0, #4]
   29d80:	cmp	r1, #56	; 0x38
   29d84:	ldrbeq	r0, [r0, #5]
   29d88:	cmpeq	r0, #0
   29d8c:	bne	29dd4 <__assert_fail@plt+0x18ab4>
   29d90:	ldrb	r1, [r5]
   29d94:	movw	r2, #6584	; 0x19b8
   29d98:	movw	r0, #6588	; 0x19bc
   29d9c:	movt	r2, #3
   29da0:	movt	r0, #3
   29da4:	cmp	r1, #96	; 0x60
   29da8:	moveq	r0, r2
   29dac:	pop	{r4, r5, fp, pc}
   29db0:	ldrb	r1, [r0, #1]
   29db4:	and	r1, r1, #223	; 0xdf
   29db8:	cmp	r1, #66	; 0x42
   29dbc:	bne	29dd4 <__assert_fail@plt+0x18ab4>
   29dc0:	ldrb	r1, [r0, #2]
   29dc4:	cmp	r1, #49	; 0x31
   29dc8:	ldrbeq	r1, [r0, #3]
   29dcc:	cmpeq	r1, #56	; 0x38
   29dd0:	beq	29df0 <__assert_fail@plt+0x18ad0>
   29dd4:	movw	r1, #6580	; 0x19b4
   29dd8:	movw	r0, #7596	; 0x1dac
   29ddc:	cmp	r4, #9
   29de0:	movt	r1, #3
   29de4:	movt	r0, #3
   29de8:	moveq	r0, r1
   29dec:	pop	{r4, r5, fp, pc}
   29df0:	ldrb	r1, [r0, #4]
   29df4:	cmp	r1, #48	; 0x30
   29df8:	ldrbeq	r1, [r0, #5]
   29dfc:	cmpeq	r1, #51	; 0x33
   29e00:	bne	29dd4 <__assert_fail@plt+0x18ab4>
   29e04:	ldrb	r1, [r0, #6]
   29e08:	cmp	r1, #48	; 0x30
   29e0c:	ldrbeq	r0, [r0, #7]
   29e10:	cmpeq	r0, #0
   29e14:	bne	29dd4 <__assert_fail@plt+0x18ab4>
   29e18:	ldrb	r1, [r5]
   29e1c:	movw	r2, #6592	; 0x19c0
   29e20:	movw	r0, #6596	; 0x19c4
   29e24:	movt	r2, #3
   29e28:	movt	r0, #3
   29e2c:	b	29da4 <__assert_fail@plt+0x18a84>
   29e30:	mov	r1, #0
   29e34:	str	r1, [r0]
   29e38:	str	r1, [r0, #4]
   29e3c:	bx	lr
   29e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e44:	add	fp, sp, #28
   29e48:	sub	sp, sp, #52	; 0x34
   29e4c:	add	sl, sp, #16
   29e50:	mov	r5, r0
   29e54:	vmov.i32	q8, #0	; 0x00000000
   29e58:	mov	r8, r3
   29e5c:	cmp	r2, #0
   29e60:	mov	r0, sl
   29e64:	vst1.64	{d16-d17}, [r0]!
   29e68:	vst1.64	{d16-d17}, [r0]
   29e6c:	beq	29e94 <__assert_fail@plt+0x18b74>
   29e70:	mov	r0, #1
   29e74:	ldrb	r3, [r1], #1
   29e78:	subs	r2, r2, #1
   29e7c:	ubfx	r7, r3, #5, #3
   29e80:	and	r3, r3, #31
   29e84:	ldr	r6, [sl, r7, lsl #2]
   29e88:	orr	r3, r6, r0, lsl r3
   29e8c:	str	r3, [sl, r7, lsl #2]
   29e90:	bne	29e74 <__assert_fail@plt+0x18b54>
   29e94:	ldmib	r5, {r0, r1}
   29e98:	cmp	r0, r1
   29e9c:	bcs	29f00 <__assert_fail@plt+0x18be0>
   29ea0:	add	r1, r0, #1
   29ea4:	str	r1, [r5, #4]
   29ea8:	ldrb	r6, [r0]
   29eac:	mov	r4, #1
   29eb0:	lsr	r0, r6, #5
   29eb4:	and	r1, r6, #31
   29eb8:	ldr	r0, [sl, r0, lsl #2]
   29ebc:	tst	r0, r4, lsl r1
   29ec0:	beq	29f14 <__assert_fail@plt+0x18bf4>
   29ec4:	ldmib	r5, {r0, r1}
   29ec8:	cmp	r0, r1
   29ecc:	bcs	29ee8 <__assert_fail@plt+0x18bc8>
   29ed0:	add	r1, r0, #1
   29ed4:	str	r1, [r5, #4]
   29ed8:	ldrb	r6, [r0]
   29edc:	cmn	r6, #1
   29ee0:	bgt	29eb0 <__assert_fail@plt+0x18b90>
   29ee4:	b	29f14 <__assert_fail@plt+0x18bf4>
   29ee8:	mov	r0, r5
   29eec:	bl	112b4 <__uflow@plt>
   29ef0:	mov	r6, r0
   29ef4:	cmn	r6, #1
   29ef8:	bgt	29eb0 <__assert_fail@plt+0x18b90>
   29efc:	b	29f14 <__assert_fail@plt+0x18bf4>
   29f00:	mov	r0, r5
   29f04:	bl	112b4 <__uflow@plt>
   29f08:	mov	r6, r0
   29f0c:	cmp	r0, #0
   29f10:	bge	29eac <__assert_fail@plt+0x18b8c>
   29f14:	ldm	r8, {r0, r7}
   29f18:	cmp	r6, #0
   29f1c:	str	r0, [sp, #12]
   29f20:	blt	29fd0 <__assert_fail@plt+0x18cb0>
   29f24:	str	r8, [sp, #8]
   29f28:	mov	r9, #0
   29f2c:	mov	r8, #1
   29f30:	mov	r4, #0
   29f34:	cmp	r4, r0
   29f38:	bne	29f70 <__assert_fail@plt+0x18c50>
   29f3c:	b	29f54 <__assert_fail@plt+0x18c34>
   29f40:	ldr	r0, [sp, #12]
   29f44:	add	r4, r4, #1
   29f48:	lsr	r9, r6, #31
   29f4c:	cmp	r4, r0
   29f50:	bne	29f70 <__assert_fail@plt+0x18c50>
   29f54:	mov	r0, r7
   29f58:	add	r1, sp, #12
   29f5c:	mov	r2, #1
   29f60:	mvn	r3, #0
   29f64:	str	r8, [sp]
   29f68:	bl	2ad1c <__assert_fail@plt+0x199fc>
   29f6c:	mov	r7, r0
   29f70:	tst	r9, #1
   29f74:	lsreq	r0, r6, #5
   29f78:	andeq	r1, r6, #31
   29f7c:	ldreq	r0, [sl, r0, lsl #2]
   29f80:	tsteq	r0, r8, lsl r1
   29f84:	bne	29fb8 <__assert_fail@plt+0x18c98>
   29f88:	strb	r6, [r7, r4]
   29f8c:	ldmib	r5, {r0, r1}
   29f90:	cmp	r0, r1
   29f94:	bcs	29fa8 <__assert_fail@plt+0x18c88>
   29f98:	add	r1, r0, #1
   29f9c:	str	r1, [r5, #4]
   29fa0:	ldrb	r6, [r0]
   29fa4:	b	29f40 <__assert_fail@plt+0x18c20>
   29fa8:	mov	r0, r5
   29fac:	bl	112b4 <__uflow@plt>
   29fb0:	mov	r6, r0
   29fb4:	b	29f40 <__assert_fail@plt+0x18c20>
   29fb8:	mov	r0, #0
   29fbc:	ldr	r1, [sp, #8]
   29fc0:	strb	r0, [r7, r4]
   29fc4:	ldr	r0, [sp, #12]
   29fc8:	stm	r1, {r0, r7}
   29fcc:	b	29fd4 <__assert_fail@plt+0x18cb4>
   29fd0:	mvn	r4, #0
   29fd4:	mov	r0, r4
   29fd8:	sub	sp, fp, #28
   29fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fe4:	add	fp, sp, #28
   29fe8:	sub	sp, sp, #28
   29fec:	add	r4, r1, #1
   29ff0:	cmp	r1, #0
   29ff4:	mov	r7, r0
   29ff8:	mov	r1, #4
   29ffc:	str	r3, [sp, #12]
   2a000:	str	r2, [sp, #8]
   2a004:	movweq	r4, #64	; 0x40
   2a008:	mov	r0, r4
   2a00c:	str	r4, [sp, #16]
   2a010:	bl	2abbc <__assert_fail@plt+0x1989c>
   2a014:	mov	r6, r0
   2a018:	mov	r0, r4
   2a01c:	mov	r1, #4
   2a020:	bl	2abbc <__assert_fail@plt+0x1989c>
   2a024:	mov	r4, #0
   2a028:	mov	r5, r0
   2a02c:	str	r4, [sp, #20]
   2a030:	str	r4, [sp, #24]
   2a034:	b	2a064 <__assert_fail@plt+0x18d44>
   2a038:	add	r8, sl, #1
   2a03c:	mov	r1, #1
   2a040:	mov	r0, r8
   2a044:	bl	2abbc <__assert_fail@plt+0x1989c>
   2a048:	str	sl, [r5, r4, lsl #2]
   2a04c:	mov	r2, r8
   2a050:	mov	r9, r0
   2a054:	ldr	r1, [sp, #24]
   2a058:	bl	110d4 <memcpy@plt>
   2a05c:	str	r9, [r6, r4, lsl #2]
   2a060:	add	r4, r4, #1
   2a064:	ldr	r1, [sp, #8]
   2a068:	ldr	r2, [sp, #12]
   2a06c:	mov	r0, r7
   2a070:	add	r3, sp, #20
   2a074:	bl	29e40 <__assert_fail@plt+0x18b20>
   2a078:	mov	sl, r0
   2a07c:	ldr	r0, [sp, #16]
   2a080:	cmp	r4, r0
   2a084:	blt	2a0bc <__assert_fail@plt+0x18d9c>
   2a088:	mov	r0, #4
   2a08c:	add	r1, sp, #16
   2a090:	mov	r2, #1
   2a094:	mvn	r3, #0
   2a098:	str	r0, [sp]
   2a09c:	mov	r0, r6
   2a0a0:	bl	2ad1c <__assert_fail@plt+0x199fc>
   2a0a4:	ldr	r1, [sp, #16]
   2a0a8:	mov	r6, r0
   2a0ac:	mov	r0, r5
   2a0b0:	mov	r2, #4
   2a0b4:	bl	2aab0 <__assert_fail@plt+0x19790>
   2a0b8:	mov	r5, r0
   2a0bc:	cmn	sl, #1
   2a0c0:	bne	2a038 <__assert_fail@plt+0x18d18>
   2a0c4:	mov	r0, #0
   2a0c8:	str	r0, [r6, r4, lsl #2]
   2a0cc:	str	r0, [r5, r4, lsl #2]
   2a0d0:	ldr	r0, [sp, #24]
   2a0d4:	bl	1a3a4 <__assert_fail@plt+0x9084>
   2a0d8:	ldr	r0, [fp, #8]
   2a0dc:	str	r6, [r0]
   2a0e0:	ldr	r0, [fp, #12]
   2a0e4:	cmp	r0, #0
   2a0e8:	beq	2a0f4 <__assert_fail@plt+0x18dd4>
   2a0ec:	str	r5, [r0]
   2a0f0:	b	2a0fc <__assert_fail@plt+0x18ddc>
   2a0f4:	mov	r0, r5
   2a0f8:	bl	1a3a4 <__assert_fail@plt+0x9084>
   2a0fc:	mov	r0, r4
   2a100:	sub	sp, fp, #28
   2a104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a108:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a10c:	add	fp, sp, #24
   2a110:	movw	r8, #0
   2a114:	mov	r6, r2
   2a118:	mov	r4, r1
   2a11c:	mov	r5, r0
   2a120:	movt	r8, #32752	; 0x7ff0
   2a124:	mov	r0, r5
   2a128:	mov	r1, r4
   2a12c:	mov	r2, r6
   2a130:	bl	11260 <write@plt>
   2a134:	mov	r7, r0
   2a138:	cmn	r0, #1
   2a13c:	bgt	2a164 <__assert_fail@plt+0x18e44>
   2a140:	bl	11218 <__errno_location@plt>
   2a144:	ldr	r0, [r0]
   2a148:	cmp	r0, #4
   2a14c:	beq	2a124 <__assert_fail@plt+0x18e04>
   2a150:	cmp	r6, r8
   2a154:	bls	2a164 <__assert_fail@plt+0x18e44>
   2a158:	cmp	r0, #22
   2a15c:	mov	r6, r8
   2a160:	beq	2a124 <__assert_fail@plt+0x18e04>
   2a164:	mov	r0, r7
   2a168:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a16c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a170:	add	fp, sp, #24
   2a174:	sub	sp, sp, #64	; 0x40
   2a178:	mov	r5, r1
   2a17c:	bl	11104 <strdup@plt>
   2a180:	cmp	r0, #0
   2a184:	beq	2a430 <__assert_fail@plt+0x19110>
   2a188:	mov	r4, r0
   2a18c:	bl	11164 <__ctype_get_mb_cur_max@plt>
   2a190:	cmp	r0, #2
   2a194:	bcc	2a380 <__assert_fail@plt+0x19060>
   2a198:	cmp	r5, #0
   2a19c:	beq	2a240 <__assert_fail@plt+0x18f20>
   2a1a0:	mov	r0, r4
   2a1a4:	str	r4, [sp, #24]
   2a1a8:	bl	11200 <strlen@plt>
   2a1ac:	mov	r7, #0
   2a1b0:	add	r1, r4, r0
   2a1b4:	cmp	r0, #1
   2a1b8:	mov	r6, r4
   2a1bc:	str	r7, [sp, #16]
   2a1c0:	str	r7, [sp, #12]
   2a1c4:	strb	r7, [sp, #8]
   2a1c8:	strb	r7, [sp, #20]
   2a1cc:	str	r1, [sp, #4]
   2a1d0:	blt	2a220 <__assert_fail@plt+0x18f00>
   2a1d4:	add	r6, sp, #4
   2a1d8:	mov	r0, r6
   2a1dc:	bl	2b4c0 <__assert_fail@plt+0x1a1a0>
   2a1e0:	ldrb	r0, [sp, #32]
   2a1e4:	cmp	r0, #0
   2a1e8:	beq	2a21c <__assert_fail@plt+0x18efc>
   2a1ec:	ldr	r0, [sp, #36]	; 0x24
   2a1f0:	bl	111f4 <iswspace@plt>
   2a1f4:	cmp	r0, #0
   2a1f8:	beq	2a21c <__assert_fail@plt+0x18efc>
   2a1fc:	strb	r7, [sp, #20]
   2a200:	ldr	r1, [sp, #24]
   2a204:	ldr	r2, [sp, #28]
   2a208:	ldr	r0, [sp, #4]
   2a20c:	add	r1, r1, r2
   2a210:	cmp	r1, r0
   2a214:	str	r1, [sp, #24]
   2a218:	bcc	2a1d8 <__assert_fail@plt+0x18eb8>
   2a21c:	ldr	r6, [sp, #24]
   2a220:	mov	r0, r6
   2a224:	bl	11200 <strlen@plt>
   2a228:	add	r2, r0, #1
   2a22c:	mov	r0, r4
   2a230:	mov	r1, r6
   2a234:	bl	110b0 <memmove@plt>
   2a238:	cmp	r5, #1
   2a23c:	beq	2a424 <__assert_fail@plt+0x19104>
   2a240:	add	r0, sp, #4
   2a244:	str	r4, [sp, #24]
   2a248:	add	r5, r0, #8
   2a24c:	mov	r0, r4
   2a250:	bl	11200 <strlen@plt>
   2a254:	mov	r6, #0
   2a258:	cmp	r0, #1
   2a25c:	add	r1, r4, r0
   2a260:	strb	r6, [sp, #8]
   2a264:	str	r1, [sp, #4]
   2a268:	str	r6, [r5]
   2a26c:	str	r6, [r5, #4]
   2a270:	strb	r6, [sp, #20]
   2a274:	blt	2a424 <__assert_fail@plt+0x19104>
   2a278:	add	r5, sp, #4
   2a27c:	mov	r7, #0
   2a280:	b	2a2a4 <__assert_fail@plt+0x18f84>
   2a284:	ldrb	r0, [sp, #32]
   2a288:	cmp	r0, #0
   2a28c:	beq	2a350 <__assert_fail@plt+0x19030>
   2a290:	ldr	r0, [sp, #36]	; 0x24
   2a294:	bl	111f4 <iswspace@plt>
   2a298:	cmp	r0, #0
   2a29c:	movne	r7, #1
   2a2a0:	b	2a350 <__assert_fail@plt+0x19030>
   2a2a4:	mov	r0, r5
   2a2a8:	bl	2b4c0 <__assert_fail@plt+0x1a1a0>
   2a2ac:	cmp	r7, #1
   2a2b0:	beq	2a2e4 <__assert_fail@plt+0x18fc4>
   2a2b4:	cmp	r7, #0
   2a2b8:	bne	2a32c <__assert_fail@plt+0x1900c>
   2a2bc:	ldrb	r0, [sp, #32]
   2a2c0:	mov	r7, #1
   2a2c4:	cmp	r0, #0
   2a2c8:	beq	2a350 <__assert_fail@plt+0x19030>
   2a2cc:	ldr	r0, [sp, #36]	; 0x24
   2a2d0:	bl	111f4 <iswspace@plt>
   2a2d4:	cmp	r0, #0
   2a2d8:	beq	2a284 <__assert_fail@plt+0x18f64>
   2a2dc:	mov	r7, #0
   2a2e0:	b	2a350 <__assert_fail@plt+0x19030>
   2a2e4:	ldrb	r0, [sp, #32]
   2a2e8:	mov	r7, #1
   2a2ec:	cmp	r0, #0
   2a2f0:	beq	2a350 <__assert_fail@plt+0x19030>
   2a2f4:	ldr	r0, [sp, #36]	; 0x24
   2a2f8:	bl	111f4 <iswspace@plt>
   2a2fc:	cmp	r0, #0
   2a300:	beq	2a350 <__assert_fail@plt+0x19030>
   2a304:	ldrb	r0, [sp, #32]
   2a308:	cmp	r0, #0
   2a30c:	beq	2a34c <__assert_fail@plt+0x1902c>
   2a310:	ldr	r0, [sp, #36]	; 0x24
   2a314:	bl	111f4 <iswspace@plt>
   2a318:	cmp	r0, #0
   2a31c:	beq	2a34c <__assert_fail@plt+0x1902c>
   2a320:	ldr	r8, [sp, #24]
   2a324:	mov	r7, #2
   2a328:	b	2a350 <__assert_fail@plt+0x19030>
   2a32c:	ldrb	r0, [sp, #32]
   2a330:	cmp	r0, #0
   2a334:	beq	2a34c <__assert_fail@plt+0x1902c>
   2a338:	ldr	r0, [sp, #36]	; 0x24
   2a33c:	bl	111f4 <iswspace@plt>
   2a340:	mov	r7, #2
   2a344:	cmp	r0, #0
   2a348:	bne	2a350 <__assert_fail@plt+0x19030>
   2a34c:	mov	r7, #1
   2a350:	strb	r6, [sp, #20]
   2a354:	ldr	r1, [sp, #24]
   2a358:	ldr	r2, [sp, #28]
   2a35c:	ldr	r0, [sp, #4]
   2a360:	add	r1, r1, r2
   2a364:	cmp	r1, r0
   2a368:	str	r1, [sp, #24]
   2a36c:	bcc	2a2a4 <__assert_fail@plt+0x18f84>
   2a370:	cmp	r7, #2
   2a374:	moveq	r0, #0
   2a378:	strbeq	r0, [r8]
   2a37c:	b	2a424 <__assert_fail@plt+0x19104>
   2a380:	cmp	r5, #0
   2a384:	beq	2a3e0 <__assert_fail@plt+0x190c0>
   2a388:	ldrb	r7, [r4]
   2a38c:	mov	r6, r4
   2a390:	cmp	r7, #0
   2a394:	beq	2a3c0 <__assert_fail@plt+0x190a0>
   2a398:	bl	111dc <__ctype_b_loc@plt>
   2a39c:	ldr	r0, [r0]
   2a3a0:	mov	r6, r4
   2a3a4:	uxtb	r1, r7
   2a3a8:	add	r1, r0, r1, lsl #1
   2a3ac:	ldrb	r1, [r1, #1]
   2a3b0:	tst	r1, #32
   2a3b4:	ldrbne	r7, [r6, #1]!
   2a3b8:	cmpne	r7, #0
   2a3bc:	bne	2a3a4 <__assert_fail@plt+0x19084>
   2a3c0:	mov	r0, r6
   2a3c4:	bl	11200 <strlen@plt>
   2a3c8:	add	r2, r0, #1
   2a3cc:	mov	r0, r4
   2a3d0:	mov	r1, r6
   2a3d4:	bl	110b0 <memmove@plt>
   2a3d8:	cmp	r5, #1
   2a3dc:	beq	2a424 <__assert_fail@plt+0x19104>
   2a3e0:	mov	r0, r4
   2a3e4:	bl	11200 <strlen@plt>
   2a3e8:	add	r0, r4, r0
   2a3ec:	sub	r5, r0, #1
   2a3f0:	cmp	r5, r4
   2a3f4:	bcc	2a424 <__assert_fail@plt+0x19104>
   2a3f8:	bl	111dc <__ctype_b_loc@plt>
   2a3fc:	mov	r1, #0
   2a400:	ldrb	r2, [r5]
   2a404:	ldr	r3, [r0]
   2a408:	add	r2, r3, r2, lsl #1
   2a40c:	ldrb	r2, [r2, #1]
   2a410:	tst	r2, #32
   2a414:	beq	2a424 <__assert_fail@plt+0x19104>
   2a418:	strb	r1, [r5], #-1
   2a41c:	cmp	r5, r4
   2a420:	bcs	2a400 <__assert_fail@plt+0x190e0>
   2a424:	mov	r0, r4
   2a428:	sub	sp, fp, #24
   2a42c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a430:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2a434:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a438:	add	fp, sp, #24
   2a43c:	sub	sp, sp, #32
   2a440:	ldr	r6, [fp, #12]
   2a444:	ldr	r7, [fp, #8]
   2a448:	mov	r4, r2
   2a44c:	mov	r8, r0
   2a450:	cmp	r1, #0
   2a454:	beq	2a47c <__assert_fail@plt+0x1915c>
   2a458:	movw	r2, #6684	; 0x1a1c
   2a45c:	mov	r5, r1
   2a460:	str	r3, [sp, #4]
   2a464:	str	r4, [sp]
   2a468:	mov	r0, r8
   2a46c:	mov	r1, #1
   2a470:	movt	r2, #3
   2a474:	mov	r3, r5
   2a478:	b	2a494 <__assert_fail@plt+0x19174>
   2a47c:	movw	r2, #6696	; 0x1a28
   2a480:	str	r3, [sp]
   2a484:	mov	r0, r8
   2a488:	mov	r1, #1
   2a48c:	mov	r3, r4
   2a490:	movt	r2, #3
   2a494:	bl	11278 <__fprintf_chk@plt>
   2a498:	movw	r1, #6703	; 0x1a2f
   2a49c:	mov	r0, #0
   2a4a0:	mov	r2, #5
   2a4a4:	movt	r1, #3
   2a4a8:	bl	110f8 <dcgettext@plt>
   2a4ac:	movw	r2, #7421	; 0x1cfd
   2a4b0:	mov	r3, r0
   2a4b4:	movw	r0, #2022	; 0x7e6
   2a4b8:	mov	r1, #1
   2a4bc:	str	r0, [sp]
   2a4c0:	movt	r2, #3
   2a4c4:	mov	r0, r8
   2a4c8:	bl	11278 <__fprintf_chk@plt>
   2a4cc:	movw	r4, #53264	; 0xd010
   2a4d0:	mov	r1, r8
   2a4d4:	movt	r4, #2
   2a4d8:	mov	r0, r4
   2a4dc:	bl	1105c <fputs_unlocked@plt>
   2a4e0:	movw	r1, #6707	; 0x1a33
   2a4e4:	mov	r0, #0
   2a4e8:	mov	r2, #5
   2a4ec:	movt	r1, #3
   2a4f0:	bl	110f8 <dcgettext@plt>
   2a4f4:	movw	r3, #6878	; 0x1ade
   2a4f8:	mov	r2, r0
   2a4fc:	mov	r0, r8
   2a500:	mov	r1, #1
   2a504:	movt	r3, #3
   2a508:	bl	11278 <__fprintf_chk@plt>
   2a50c:	mov	r0, r4
   2a510:	mov	r1, r8
   2a514:	bl	1105c <fputs_unlocked@plt>
   2a518:	cmp	r6, #9
   2a51c:	bhi	2a558 <__assert_fail@plt+0x19238>
   2a520:	add	r0, pc, #0
   2a524:	ldr	pc, [r0, r6, lsl #2]
   2a528:	andeq	sl, r2, r0, asr r5
   2a52c:	andeq	sl, r2, r4, ror #10
   2a530:	muleq	r2, r4, r5
   2a534:			; <UNDEFINED> instruction: 0x0002a5bc
   2a538:	andeq	sl, r2, r4, ror #11
   2a53c:	andeq	sl, r2, ip, lsl #12
   2a540:	andeq	sl, r2, r4, lsr r6
   2a544:	andeq	sl, r2, ip, ror #12
   2a548:	andeq	sl, r2, ip, lsl #14
   2a54c:			; <UNDEFINED> instruction: 0x0002a6b4
   2a550:	sub	sp, fp, #24
   2a554:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a558:	movw	r1, #7231	; 0x1c3f
   2a55c:	movt	r1, #3
   2a560:	b	2a6bc <__assert_fail@plt+0x1939c>
   2a564:	movw	r1, #6912	; 0x1b00
   2a568:	mov	r0, #0
   2a56c:	mov	r2, #5
   2a570:	movt	r1, #3
   2a574:	bl	110f8 <dcgettext@plt>
   2a578:	ldr	r3, [r7]
   2a57c:	mov	r2, r0
   2a580:	mov	r0, r8
   2a584:	mov	r1, #1
   2a588:	sub	sp, fp, #24
   2a58c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a590:	b	11278 <__fprintf_chk@plt>
   2a594:	movw	r1, #6928	; 0x1b10
   2a598:	mov	r0, #0
   2a59c:	mov	r2, #5
   2a5a0:	movt	r1, #3
   2a5a4:	bl	110f8 <dcgettext@plt>
   2a5a8:	mov	r2, r0
   2a5ac:	ldr	r3, [r7]
   2a5b0:	ldr	r0, [r7, #4]
   2a5b4:	str	r0, [sp]
   2a5b8:	b	2a6a8 <__assert_fail@plt+0x19388>
   2a5bc:	movw	r1, #6951	; 0x1b27
   2a5c0:	mov	r0, #0
   2a5c4:	mov	r2, #5
   2a5c8:	movt	r1, #3
   2a5cc:	bl	110f8 <dcgettext@plt>
   2a5d0:	ldr	r3, [r7]
   2a5d4:	mov	r2, r0
   2a5d8:	ldmib	r7, {r0, r1}
   2a5dc:	stm	sp, {r0, r1}
   2a5e0:	b	2a6a8 <__assert_fail@plt+0x19388>
   2a5e4:	movw	r1, #6979	; 0x1b43
   2a5e8:	mov	r0, #0
   2a5ec:	mov	r2, #5
   2a5f0:	movt	r1, #3
   2a5f4:	bl	110f8 <dcgettext@plt>
   2a5f8:	ldr	r3, [r7]
   2a5fc:	mov	r2, r0
   2a600:	ldmib	r7, {r0, r1, r7}
   2a604:	stm	sp, {r0, r1, r7}
   2a608:	b	2a6a8 <__assert_fail@plt+0x19388>
   2a60c:	movw	r1, #7011	; 0x1b63
   2a610:	mov	r0, #0
   2a614:	mov	r2, #5
   2a618:	movt	r1, #3
   2a61c:	bl	110f8 <dcgettext@plt>
   2a620:	ldr	r3, [r7]
   2a624:	mov	r2, r0
   2a628:	ldmib	r7, {r0, r1, r6, r7}
   2a62c:	stm	sp, {r0, r1, r6, r7}
   2a630:	b	2a6a8 <__assert_fail@plt+0x19388>
   2a634:	movw	r1, #7047	; 0x1b87
   2a638:	mov	r0, #0
   2a63c:	mov	r2, #5
   2a640:	movt	r1, #3
   2a644:	bl	110f8 <dcgettext@plt>
   2a648:	ldr	r3, [r7]
   2a64c:	mov	r2, r0
   2a650:	ldmib	r7, {r0, r1, r6}
   2a654:	ldr	r5, [r7, #16]
   2a658:	ldr	r7, [r7, #20]
   2a65c:	stm	sp, {r0, r1, r6}
   2a660:	str	r5, [sp, #12]
   2a664:	str	r7, [sp, #16]
   2a668:	b	2a6a8 <__assert_fail@plt+0x19388>
   2a66c:	movw	r1, #7087	; 0x1baf
   2a670:	mov	r0, #0
   2a674:	mov	r2, #5
   2a678:	movt	r1, #3
   2a67c:	bl	110f8 <dcgettext@plt>
   2a680:	ldr	r3, [r7]
   2a684:	mov	r2, r0
   2a688:	ldmib	r7, {r0, r1, r6}
   2a68c:	ldr	r5, [r7, #16]
   2a690:	ldr	r4, [r7, #20]
   2a694:	ldr	r7, [r7, #24]
   2a698:	stm	sp, {r0, r1, r6}
   2a69c:	str	r5, [sp, #12]
   2a6a0:	str	r4, [sp, #16]
   2a6a4:	str	r7, [sp, #20]
   2a6a8:	mov	r0, r8
   2a6ac:	mov	r1, #1
   2a6b0:	b	2a75c <__assert_fail@plt+0x1943c>
   2a6b4:	movw	r1, #7179	; 0x1c0b
   2a6b8:	movt	r1, #3
   2a6bc:	mov	r0, #0
   2a6c0:	mov	r2, #5
   2a6c4:	bl	110f8 <dcgettext@plt>
   2a6c8:	mov	ip, r0
   2a6cc:	ldr	r3, [r7]
   2a6d0:	ldr	r0, [r7, #4]
   2a6d4:	ldr	r1, [r7, #8]
   2a6d8:	ldr	r6, [r7, #12]
   2a6dc:	ldr	r5, [r7, #16]
   2a6e0:	ldr	r4, [r7, #20]
   2a6e4:	ldr	r2, [r7, #24]
   2a6e8:	ldr	lr, [r7, #28]
   2a6ec:	ldr	r7, [r7, #32]
   2a6f0:	stm	sp, {r0, r1, r6}
   2a6f4:	str	r5, [sp, #12]
   2a6f8:	str	r4, [sp, #16]
   2a6fc:	str	r2, [sp, #20]
   2a700:	str	lr, [sp, #24]
   2a704:	str	r7, [sp, #28]
   2a708:	b	2a750 <__assert_fail@plt+0x19430>
   2a70c:	movw	r1, #7131	; 0x1bdb
   2a710:	mov	r0, #0
   2a714:	mov	r2, #5
   2a718:	movt	r1, #3
   2a71c:	bl	110f8 <dcgettext@plt>
   2a720:	mov	ip, r0
   2a724:	ldr	r3, [r7]
   2a728:	ldmib	r7, {r0, r1, r6}
   2a72c:	ldr	r5, [r7, #16]
   2a730:	ldr	r4, [r7, #20]
   2a734:	ldr	r2, [r7, #24]
   2a738:	ldr	r7, [r7, #28]
   2a73c:	stm	sp, {r0, r1, r6}
   2a740:	str	r5, [sp, #12]
   2a744:	str	r4, [sp, #16]
   2a748:	str	r2, [sp, #20]
   2a74c:	str	r7, [sp, #24]
   2a750:	mov	r0, r8
   2a754:	mov	r1, #1
   2a758:	mov	r2, ip
   2a75c:	bl	11278 <__fprintf_chk@plt>
   2a760:	sub	sp, fp, #24
   2a764:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a768:	push	{r4, sl, fp, lr}
   2a76c:	add	fp, sp, #8
   2a770:	sub	sp, sp, #8
   2a774:	ldr	ip, [fp, #8]
   2a778:	mov	lr, #0
   2a77c:	ldr	r4, [ip, lr, lsl #2]
   2a780:	add	lr, lr, #1
   2a784:	cmp	r4, #0
   2a788:	bne	2a77c <__assert_fail@plt+0x1945c>
   2a78c:	sub	r4, lr, #1
   2a790:	str	ip, [sp]
   2a794:	str	r4, [sp, #4]
   2a798:	bl	2a434 <__assert_fail@plt+0x19114>
   2a79c:	sub	sp, fp, #8
   2a7a0:	pop	{r4, sl, fp, pc}
   2a7a4:	push	{fp, lr}
   2a7a8:	mov	fp, sp
   2a7ac:	sub	sp, sp, #48	; 0x30
   2a7b0:	ldr	ip, [fp, #8]
   2a7b4:	ldr	lr, [ip]
   2a7b8:	cmp	lr, #0
   2a7bc:	str	lr, [sp, #8]
   2a7c0:	beq	2a85c <__assert_fail@plt+0x1953c>
   2a7c4:	ldr	lr, [ip, #4]
   2a7c8:	cmp	lr, #0
   2a7cc:	str	lr, [sp, #12]
   2a7d0:	beq	2a864 <__assert_fail@plt+0x19544>
   2a7d4:	ldr	lr, [ip, #8]
   2a7d8:	cmp	lr, #0
   2a7dc:	str	lr, [sp, #16]
   2a7e0:	beq	2a86c <__assert_fail@plt+0x1954c>
   2a7e4:	ldr	lr, [ip, #12]
   2a7e8:	cmp	lr, #0
   2a7ec:	str	lr, [sp, #20]
   2a7f0:	beq	2a874 <__assert_fail@plt+0x19554>
   2a7f4:	ldr	lr, [ip, #16]
   2a7f8:	cmp	lr, #0
   2a7fc:	str	lr, [sp, #24]
   2a800:	beq	2a87c <__assert_fail@plt+0x1955c>
   2a804:	ldr	lr, [ip, #20]
   2a808:	cmp	lr, #0
   2a80c:	str	lr, [sp, #28]
   2a810:	beq	2a884 <__assert_fail@plt+0x19564>
   2a814:	ldr	lr, [ip, #24]
   2a818:	cmp	lr, #0
   2a81c:	str	lr, [sp, #32]
   2a820:	beq	2a88c <__assert_fail@plt+0x1956c>
   2a824:	ldr	lr, [ip, #28]
   2a828:	cmp	lr, #0
   2a82c:	str	lr, [sp, #36]	; 0x24
   2a830:	beq	2a894 <__assert_fail@plt+0x19574>
   2a834:	ldr	lr, [ip, #32]
   2a838:	cmp	lr, #0
   2a83c:	str	lr, [sp, #40]	; 0x28
   2a840:	beq	2a89c <__assert_fail@plt+0x1957c>
   2a844:	ldr	lr, [ip, #36]	; 0x24
   2a848:	mov	ip, #10
   2a84c:	cmp	lr, #0
   2a850:	str	lr, [sp, #44]	; 0x2c
   2a854:	movweq	ip, #9
   2a858:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a85c:	mov	ip, #0
   2a860:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a864:	mov	ip, #1
   2a868:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a86c:	mov	ip, #2
   2a870:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a874:	mov	ip, #3
   2a878:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a87c:	mov	ip, #4
   2a880:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a884:	mov	ip, #5
   2a888:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a88c:	mov	ip, #6
   2a890:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a894:	mov	ip, #7
   2a898:	b	2a8a0 <__assert_fail@plt+0x19580>
   2a89c:	mov	ip, #8
   2a8a0:	add	lr, sp, #8
   2a8a4:	str	ip, [sp, #4]
   2a8a8:	str	lr, [sp]
   2a8ac:	bl	2a434 <__assert_fail@plt+0x19114>
   2a8b0:	mov	sp, fp
   2a8b4:	pop	{fp, pc}
   2a8b8:	push	{fp, lr}
   2a8bc:	mov	fp, sp
   2a8c0:	sub	sp, sp, #56	; 0x38
   2a8c4:	add	ip, fp, #8
   2a8c8:	str	ip, [sp, #12]
   2a8cc:	ldr	lr, [fp, #8]
   2a8d0:	cmp	lr, #0
   2a8d4:	str	lr, [sp, #16]
   2a8d8:	beq	2a974 <__assert_fail@plt+0x19654>
   2a8dc:	ldr	lr, [ip, #4]
   2a8e0:	cmp	lr, #0
   2a8e4:	str	lr, [sp, #20]
   2a8e8:	beq	2a97c <__assert_fail@plt+0x1965c>
   2a8ec:	ldr	lr, [ip, #8]
   2a8f0:	cmp	lr, #0
   2a8f4:	str	lr, [sp, #24]
   2a8f8:	beq	2a984 <__assert_fail@plt+0x19664>
   2a8fc:	ldr	lr, [ip, #12]
   2a900:	cmp	lr, #0
   2a904:	str	lr, [sp, #28]
   2a908:	beq	2a98c <__assert_fail@plt+0x1966c>
   2a90c:	ldr	lr, [ip, #16]
   2a910:	cmp	lr, #0
   2a914:	str	lr, [sp, #32]
   2a918:	beq	2a994 <__assert_fail@plt+0x19674>
   2a91c:	ldr	lr, [ip, #20]
   2a920:	cmp	lr, #0
   2a924:	str	lr, [sp, #36]	; 0x24
   2a928:	beq	2a99c <__assert_fail@plt+0x1967c>
   2a92c:	ldr	lr, [ip, #24]
   2a930:	cmp	lr, #0
   2a934:	str	lr, [sp, #40]	; 0x28
   2a938:	beq	2a9a4 <__assert_fail@plt+0x19684>
   2a93c:	ldr	lr, [ip, #28]
   2a940:	cmp	lr, #0
   2a944:	str	lr, [sp, #44]	; 0x2c
   2a948:	beq	2a9ac <__assert_fail@plt+0x1968c>
   2a94c:	ldr	lr, [ip, #32]
   2a950:	cmp	lr, #0
   2a954:	str	lr, [sp, #48]	; 0x30
   2a958:	beq	2a9b4 <__assert_fail@plt+0x19694>
   2a95c:	ldr	lr, [ip, #36]	; 0x24
   2a960:	mov	ip, #10
   2a964:	cmp	lr, #0
   2a968:	str	lr, [sp, #52]	; 0x34
   2a96c:	movweq	ip, #9
   2a970:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a974:	mov	ip, #0
   2a978:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a97c:	mov	ip, #1
   2a980:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a984:	mov	ip, #2
   2a988:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a98c:	mov	ip, #3
   2a990:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a994:	mov	ip, #4
   2a998:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a99c:	mov	ip, #5
   2a9a0:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a9a4:	mov	ip, #6
   2a9a8:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a9ac:	mov	ip, #7
   2a9b0:	b	2a9b8 <__assert_fail@plt+0x19698>
   2a9b4:	mov	ip, #8
   2a9b8:	add	lr, sp, #16
   2a9bc:	str	ip, [sp, #4]
   2a9c0:	str	lr, [sp]
   2a9c4:	bl	2a434 <__assert_fail@plt+0x19114>
   2a9c8:	mov	sp, fp
   2a9cc:	pop	{fp, pc}
   2a9d0:	push	{fp, lr}
   2a9d4:	mov	fp, sp
   2a9d8:	movw	r0, #8580	; 0x2184
   2a9dc:	movt	r0, #4
   2a9e0:	ldr	r1, [r0]
   2a9e4:	movw	r0, #53264	; 0xd010
   2a9e8:	movt	r0, #2
   2a9ec:	bl	1105c <fputs_unlocked@plt>
   2a9f0:	movw	r1, #7291	; 0x1c7b
   2a9f4:	mov	r0, #0
   2a9f8:	mov	r2, #5
   2a9fc:	movt	r1, #3
   2aa00:	bl	110f8 <dcgettext@plt>
   2aa04:	movw	r2, #7311	; 0x1c8f
   2aa08:	mov	r1, r0
   2aa0c:	mov	r0, #1
   2aa10:	movt	r2, #3
   2aa14:	bl	11254 <__printf_chk@plt>
   2aa18:	movw	r1, #7333	; 0x1ca5
   2aa1c:	mov	r0, #0
   2aa20:	mov	r2, #5
   2aa24:	movt	r1, #3
   2aa28:	bl	110f8 <dcgettext@plt>
   2aa2c:	movw	r2, #53396	; 0xd094
   2aa30:	movw	r3, #53603	; 0xd163
   2aa34:	mov	r1, r0
   2aa38:	mov	r0, #1
   2aa3c:	movt	r2, #2
   2aa40:	movt	r3, #2
   2aa44:	bl	11254 <__printf_chk@plt>
   2aa48:	movw	r1, #7353	; 0x1cb9
   2aa4c:	mov	r0, #0
   2aa50:	mov	r2, #5
   2aa54:	movt	r1, #3
   2aa58:	bl	110f8 <dcgettext@plt>
   2aa5c:	movw	r2, #7392	; 0x1ce0
   2aa60:	mov	r1, r0
   2aa64:	mov	r0, #1
   2aa68:	movt	r2, #3
   2aa6c:	pop	{fp, lr}
   2aa70:	b	11254 <__printf_chk@plt>
   2aa74:	push	{r4, r5, r6, sl, fp, lr}
   2aa78:	add	fp, sp, #16
   2aa7c:	mov	r4, r2
   2aa80:	mov	r5, r1
   2aa84:	mov	r6, r0
   2aa88:	bl	2c42c <__assert_fail@plt+0x1b10c>
   2aa8c:	cmp	r0, #0
   2aa90:	popne	{r4, r5, r6, sl, fp, pc}
   2aa94:	cmp	r6, #0
   2aa98:	beq	2aaac <__assert_fail@plt+0x1978c>
   2aa9c:	cmp	r5, #0
   2aaa0:	cmpne	r4, #0
   2aaa4:	bne	2aaac <__assert_fail@plt+0x1978c>
   2aaa8:	pop	{r4, r5, r6, sl, fp, pc}
   2aaac:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2aab0:	push	{r4, r5, r6, sl, fp, lr}
   2aab4:	add	fp, sp, #16
   2aab8:	mov	r4, r2
   2aabc:	mov	r5, r1
   2aac0:	mov	r6, r0
   2aac4:	bl	2c42c <__assert_fail@plt+0x1b10c>
   2aac8:	cmp	r0, #0
   2aacc:	popne	{r4, r5, r6, sl, fp, pc}
   2aad0:	cmp	r6, #0
   2aad4:	beq	2aae8 <__assert_fail@plt+0x197c8>
   2aad8:	cmp	r5, #0
   2aadc:	cmpne	r4, #0
   2aae0:	bne	2aae8 <__assert_fail@plt+0x197c8>
   2aae4:	pop	{r4, r5, r6, sl, fp, pc}
   2aae8:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2aaec:	push	{fp, lr}
   2aaf0:	mov	fp, sp
   2aaf4:	bl	2b190 <__assert_fail@plt+0x19e70>
   2aaf8:	cmp	r0, #0
   2aafc:	popne	{fp, pc}
   2ab00:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ab04:	push	{fp, lr}
   2ab08:	mov	fp, sp
   2ab0c:	bl	2b190 <__assert_fail@plt+0x19e70>
   2ab10:	cmp	r0, #0
   2ab14:	popne	{fp, pc}
   2ab18:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ab1c:	push	{fp, lr}
   2ab20:	mov	fp, sp
   2ab24:	bl	2b190 <__assert_fail@plt+0x19e70>
   2ab28:	cmp	r0, #0
   2ab2c:	popne	{fp, pc}
   2ab30:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ab34:	push	{r4, r5, fp, lr}
   2ab38:	add	fp, sp, #8
   2ab3c:	mov	r4, r1
   2ab40:	mov	r5, r0
   2ab44:	bl	2b1c0 <__assert_fail@plt+0x19ea0>
   2ab48:	cmp	r0, #0
   2ab4c:	popne	{r4, r5, fp, pc}
   2ab50:	cmp	r5, #0
   2ab54:	beq	2ab64 <__assert_fail@plt+0x19844>
   2ab58:	cmp	r4, #0
   2ab5c:	bne	2ab64 <__assert_fail@plt+0x19844>
   2ab60:	pop	{r4, r5, fp, pc}
   2ab64:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ab68:	push	{fp, lr}
   2ab6c:	mov	fp, sp
   2ab70:	cmp	r1, #0
   2ab74:	orreq	r1, r1, #1
   2ab78:	bl	2b1c0 <__assert_fail@plt+0x19ea0>
   2ab7c:	cmp	r0, #0
   2ab80:	popne	{fp, pc}
   2ab84:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ab88:	push	{fp, lr}
   2ab8c:	mov	fp, sp
   2ab90:	clz	r3, r2
   2ab94:	lsr	ip, r3, #5
   2ab98:	clz	r3, r1
   2ab9c:	lsr	r3, r3, #5
   2aba0:	orrs	r3, r3, ip
   2aba4:	movwne	r1, #1
   2aba8:	movwne	r2, #1
   2abac:	bl	2c42c <__assert_fail@plt+0x1b10c>
   2abb0:	cmp	r0, #0
   2abb4:	popne	{fp, pc}
   2abb8:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2abbc:	push	{fp, lr}
   2abc0:	mov	fp, sp
   2abc4:	mov	r2, r1
   2abc8:	mov	r1, r0
   2abcc:	mov	r0, #0
   2abd0:	bl	2c42c <__assert_fail@plt+0x1b10c>
   2abd4:	cmp	r0, #0
   2abd8:	popne	{fp, pc}
   2abdc:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2abe0:	push	{fp, lr}
   2abe4:	mov	fp, sp
   2abe8:	mov	r2, r1
   2abec:	mov	r1, r0
   2abf0:	clz	r0, r2
   2abf4:	clz	r3, r1
   2abf8:	lsr	r0, r0, #5
   2abfc:	lsr	r3, r3, #5
   2ac00:	orrs	r0, r3, r0
   2ac04:	movwne	r1, #1
   2ac08:	movwne	r2, #1
   2ac0c:	mov	r0, #0
   2ac10:	bl	2c42c <__assert_fail@plt+0x1b10c>
   2ac14:	cmp	r0, #0
   2ac18:	popne	{fp, pc}
   2ac1c:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ac20:	push	{r4, r5, r6, sl, fp, lr}
   2ac24:	add	fp, sp, #16
   2ac28:	ldr	r5, [r1]
   2ac2c:	mov	r4, r1
   2ac30:	mov	r6, r0
   2ac34:	cmp	r0, #0
   2ac38:	beq	2ac50 <__assert_fail@plt+0x19930>
   2ac3c:	mov	r0, #1
   2ac40:	add	r0, r0, r5, lsr #1
   2ac44:	adds	r5, r5, r0
   2ac48:	bcc	2ac58 <__assert_fail@plt+0x19938>
   2ac4c:	b	2ac94 <__assert_fail@plt+0x19974>
   2ac50:	cmp	r5, #0
   2ac54:	movweq	r5, #64	; 0x40
   2ac58:	mov	r0, r6
   2ac5c:	mov	r1, r5
   2ac60:	mov	r2, #1
   2ac64:	bl	2c42c <__assert_fail@plt+0x1b10c>
   2ac68:	cmp	r5, #0
   2ac6c:	mov	r1, r5
   2ac70:	movwne	r1, #1
   2ac74:	cmp	r0, #0
   2ac78:	bne	2ac8c <__assert_fail@plt+0x1996c>
   2ac7c:	clz	r2, r6
   2ac80:	lsr	r2, r2, #5
   2ac84:	orrs	r1, r2, r1
   2ac88:	bne	2ac94 <__assert_fail@plt+0x19974>
   2ac8c:	str	r5, [r4]
   2ac90:	pop	{r4, r5, r6, sl, fp, pc}
   2ac94:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ac98:	push	{r4, r5, r6, r7, fp, lr}
   2ac9c:	add	fp, sp, #16
   2aca0:	ldr	r5, [r1]
   2aca4:	mov	r6, r2
   2aca8:	mov	r4, r1
   2acac:	mov	r7, r0
   2acb0:	cmp	r0, #0
   2acb4:	beq	2accc <__assert_fail@plt+0x199ac>
   2acb8:	mov	r0, #1
   2acbc:	add	r0, r0, r5, lsr #1
   2acc0:	adds	r5, r5, r0
   2acc4:	bcc	2ace4 <__assert_fail@plt+0x199c4>
   2acc8:	b	2ad18 <__assert_fail@plt+0x199f8>
   2accc:	cmp	r5, #0
   2acd0:	bne	2ace4 <__assert_fail@plt+0x199c4>
   2acd4:	mov	r0, #64	; 0x40
   2acd8:	cmp	r6, #64	; 0x40
   2acdc:	udiv	r5, r0, r6
   2ace0:	addhi	r5, r5, #1
   2ace4:	mov	r0, r7
   2ace8:	mov	r1, r5
   2acec:	mov	r2, r6
   2acf0:	bl	2c42c <__assert_fail@plt+0x1b10c>
   2acf4:	cmp	r0, #0
   2acf8:	bne	2ad10 <__assert_fail@plt+0x199f0>
   2acfc:	cmp	r7, #0
   2ad00:	beq	2ad18 <__assert_fail@plt+0x199f8>
   2ad04:	cmp	r6, #0
   2ad08:	cmpne	r5, #0
   2ad0c:	bne	2ad18 <__assert_fail@plt+0x199f8>
   2ad10:	str	r5, [r4]
   2ad14:	pop	{r4, r5, r6, r7, fp, pc}
   2ad18:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2ad1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ad20:	add	fp, sp, #24
   2ad24:	mov	r8, r1
   2ad28:	ldr	r1, [r1]
   2ad2c:	mov	r5, r0
   2ad30:	add	r0, r1, r1, asr #1
   2ad34:	cmp	r0, r1
   2ad38:	mvnvs	r0, #-2147483648	; 0x80000000
   2ad3c:	cmp	r0, r3
   2ad40:	mov	r7, r0
   2ad44:	movgt	r7, r3
   2ad48:	cmn	r3, #1
   2ad4c:	movle	r7, r0
   2ad50:	ldr	r0, [fp, #8]
   2ad54:	cmn	r0, #1
   2ad58:	ble	2ad80 <__assert_fail@plt+0x19a60>
   2ad5c:	cmp	r0, #0
   2ad60:	beq	2add4 <__assert_fail@plt+0x19ab4>
   2ad64:	cmn	r7, #1
   2ad68:	ble	2ada8 <__assert_fail@plt+0x19a88>
   2ad6c:	mvn	r4, #-2147483648	; 0x80000000
   2ad70:	udiv	r6, r4, r0
   2ad74:	cmp	r6, r7
   2ad78:	bge	2add4 <__assert_fail@plt+0x19ab4>
   2ad7c:	b	2ade4 <__assert_fail@plt+0x19ac4>
   2ad80:	cmn	r7, #1
   2ad84:	ble	2adc4 <__assert_fail@plt+0x19aa4>
   2ad88:	cmn	r0, #1
   2ad8c:	beq	2add4 <__assert_fail@plt+0x19ab4>
   2ad90:	mov	r6, #-2147483648	; 0x80000000
   2ad94:	mvn	r4, #-2147483648	; 0x80000000
   2ad98:	sdiv	r6, r6, r0
   2ad9c:	cmp	r6, r7
   2ada0:	bge	2add4 <__assert_fail@plt+0x19ab4>
   2ada4:	b	2ade4 <__assert_fail@plt+0x19ac4>
   2ada8:	beq	2add4 <__assert_fail@plt+0x19ab4>
   2adac:	mov	r6, #-2147483648	; 0x80000000
   2adb0:	mvn	r4, #-2147483648	; 0x80000000
   2adb4:	sdiv	r6, r6, r7
   2adb8:	cmp	r6, r0
   2adbc:	bge	2add4 <__assert_fail@plt+0x19ab4>
   2adc0:	b	2ade4 <__assert_fail@plt+0x19ac4>
   2adc4:	mvn	r4, #-2147483648	; 0x80000000
   2adc8:	sdiv	r6, r4, r0
   2adcc:	cmp	r7, r6
   2add0:	blt	2ade4 <__assert_fail@plt+0x19ac4>
   2add4:	mul	r6, r7, r0
   2add8:	mov	r4, #64	; 0x40
   2addc:	cmp	r6, #63	; 0x3f
   2ade0:	bgt	2adec <__assert_fail@plt+0x19acc>
   2ade4:	sdiv	r7, r4, r0
   2ade8:	mul	r6, r7, r0
   2adec:	cmp	r5, #0
   2adf0:	moveq	r4, #0
   2adf4:	streq	r4, [r8]
   2adf8:	sub	r4, r7, r1
   2adfc:	cmp	r4, r2
   2ae00:	bge	2aeac <__assert_fail@plt+0x19b8c>
   2ae04:	add	r7, r1, r2
   2ae08:	mov	r6, #0
   2ae0c:	mov	r2, #0
   2ae10:	cmp	r7, r3
   2ae14:	movwgt	r6, #1
   2ae18:	cmn	r3, #1
   2ae1c:	movwgt	r2, #1
   2ae20:	cmp	r7, r1
   2ae24:	bvs	2aee0 <__assert_fail@plt+0x19bc0>
   2ae28:	ands	r1, r2, r6
   2ae2c:	bne	2aee0 <__assert_fail@plt+0x19bc0>
   2ae30:	cmn	r0, #1
   2ae34:	ble	2ae5c <__assert_fail@plt+0x19b3c>
   2ae38:	cmp	r0, #0
   2ae3c:	beq	2aea8 <__assert_fail@plt+0x19b88>
   2ae40:	cmn	r7, #1
   2ae44:	ble	2ae80 <__assert_fail@plt+0x19b60>
   2ae48:	mvn	r1, #-2147483648	; 0x80000000
   2ae4c:	udiv	r1, r1, r0
   2ae50:	cmp	r1, r7
   2ae54:	bge	2aea8 <__assert_fail@plt+0x19b88>
   2ae58:	b	2aee0 <__assert_fail@plt+0x19bc0>
   2ae5c:	cmn	r7, #1
   2ae60:	ble	2ae98 <__assert_fail@plt+0x19b78>
   2ae64:	cmn	r0, #1
   2ae68:	beq	2aea8 <__assert_fail@plt+0x19b88>
   2ae6c:	mov	r1, #-2147483648	; 0x80000000
   2ae70:	sdiv	r1, r1, r0
   2ae74:	cmp	r1, r7
   2ae78:	bge	2aea8 <__assert_fail@plt+0x19b88>
   2ae7c:	b	2aee0 <__assert_fail@plt+0x19bc0>
   2ae80:	beq	2aea8 <__assert_fail@plt+0x19b88>
   2ae84:	mov	r1, #-2147483648	; 0x80000000
   2ae88:	sdiv	r1, r1, r7
   2ae8c:	cmp	r1, r0
   2ae90:	bge	2aea8 <__assert_fail@plt+0x19b88>
   2ae94:	b	2aee0 <__assert_fail@plt+0x19bc0>
   2ae98:	mvn	r1, #-2147483648	; 0x80000000
   2ae9c:	sdiv	r1, r1, r0
   2aea0:	cmp	r7, r1
   2aea4:	blt	2aee0 <__assert_fail@plt+0x19bc0>
   2aea8:	mul	r6, r7, r0
   2aeac:	mov	r0, r5
   2aeb0:	mov	r1, r6
   2aeb4:	bl	2b1c0 <__assert_fail@plt+0x19ea0>
   2aeb8:	cmp	r6, #0
   2aebc:	movwne	r6, #1
   2aec0:	cmp	r0, #0
   2aec4:	bne	2aed8 <__assert_fail@plt+0x19bb8>
   2aec8:	clz	r1, r5
   2aecc:	lsr	r1, r1, #5
   2aed0:	orrs	r1, r1, r6
   2aed4:	bne	2aee0 <__assert_fail@plt+0x19bc0>
   2aed8:	str	r7, [r8]
   2aedc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2aee0:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2aee4:	push	{fp, lr}
   2aee8:	mov	fp, sp
   2aeec:	mov	r1, #1
   2aef0:	bl	2b13c <__assert_fail@plt+0x19e1c>
   2aef4:	cmp	r0, #0
   2aef8:	popne	{fp, pc}
   2aefc:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2af00:	push	{fp, lr}
   2af04:	mov	fp, sp
   2af08:	bl	2b13c <__assert_fail@plt+0x19e1c>
   2af0c:	cmp	r0, #0
   2af10:	popne	{fp, pc}
   2af14:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2af18:	push	{fp, lr}
   2af1c:	mov	fp, sp
   2af20:	mov	r1, #1
   2af24:	bl	2b13c <__assert_fail@plt+0x19e1c>
   2af28:	cmp	r0, #0
   2af2c:	popne	{fp, pc}
   2af30:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2af34:	push	{fp, lr}
   2af38:	mov	fp, sp
   2af3c:	bl	2b13c <__assert_fail@plt+0x19e1c>
   2af40:	cmp	r0, #0
   2af44:	popne	{fp, pc}
   2af48:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2af4c:	push	{r4, r5, r6, sl, fp, lr}
   2af50:	add	fp, sp, #16
   2af54:	mov	r5, r0
   2af58:	mov	r0, r1
   2af5c:	mov	r4, r1
   2af60:	bl	2b190 <__assert_fail@plt+0x19e70>
   2af64:	cmp	r0, #0
   2af68:	beq	2af84 <__assert_fail@plt+0x19c64>
   2af6c:	mov	r1, r5
   2af70:	mov	r2, r4
   2af74:	mov	r6, r0
   2af78:	bl	110d4 <memcpy@plt>
   2af7c:	mov	r0, r6
   2af80:	pop	{r4, r5, r6, sl, fp, pc}
   2af84:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2af88:	push	{r4, r5, r6, sl, fp, lr}
   2af8c:	add	fp, sp, #16
   2af90:	mov	r5, r0
   2af94:	mov	r0, r1
   2af98:	mov	r4, r1
   2af9c:	bl	2b190 <__assert_fail@plt+0x19e70>
   2afa0:	cmp	r0, #0
   2afa4:	beq	2afc0 <__assert_fail@plt+0x19ca0>
   2afa8:	mov	r1, r5
   2afac:	mov	r2, r4
   2afb0:	mov	r6, r0
   2afb4:	bl	110d4 <memcpy@plt>
   2afb8:	mov	r0, r6
   2afbc:	pop	{r4, r5, r6, sl, fp, pc}
   2afc0:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2afc4:	push	{r4, r5, r6, sl, fp, lr}
   2afc8:	add	fp, sp, #16
   2afcc:	mov	r5, r0
   2afd0:	add	r0, r1, #1
   2afd4:	mov	r4, r1
   2afd8:	bl	2b190 <__assert_fail@plt+0x19e70>
   2afdc:	cmp	r0, #0
   2afe0:	beq	2b008 <__assert_fail@plt+0x19ce8>
   2afe4:	mov	r6, r0
   2afe8:	mov	r0, #0
   2afec:	mov	r1, r5
   2aff0:	mov	r2, r4
   2aff4:	strb	r0, [r6, r4]
   2aff8:	mov	r0, r6
   2affc:	bl	110d4 <memcpy@plt>
   2b000:	mov	r0, r6
   2b004:	pop	{r4, r5, r6, sl, fp, pc}
   2b008:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2b00c:	push	{r4, r5, r6, sl, fp, lr}
   2b010:	add	fp, sp, #16
   2b014:	mov	r4, r0
   2b018:	bl	11200 <strlen@plt>
   2b01c:	add	r5, r0, #1
   2b020:	mov	r0, r5
   2b024:	bl	2b190 <__assert_fail@plt+0x19e70>
   2b028:	cmp	r0, #0
   2b02c:	beq	2b048 <__assert_fail@plt+0x19d28>
   2b030:	mov	r1, r4
   2b034:	mov	r2, r5
   2b038:	mov	r6, r0
   2b03c:	bl	110d4 <memcpy@plt>
   2b040:	mov	r0, r6
   2b044:	pop	{r4, r5, r6, sl, fp, pc}
   2b048:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2b04c:	push	{fp, lr}
   2b050:	mov	fp, sp
   2b054:	movw	r0, #8472	; 0x2118
   2b058:	movw	r1, #7468	; 0x1d2c
   2b05c:	mov	r2, #5
   2b060:	movt	r0, #4
   2b064:	movt	r1, #3
   2b068:	ldr	r4, [r0]
   2b06c:	mov	r0, #0
   2b070:	bl	110f8 <dcgettext@plt>
   2b074:	movw	r2, #1577	; 0x629
   2b078:	mov	r3, r0
   2b07c:	mov	r0, r4
   2b080:	mov	r1, #0
   2b084:	movt	r2, #3
   2b088:	bl	11188 <error@plt>
   2b08c:	bl	11314 <abort@plt>
   2b090:	push	{r4, sl, fp, lr}
   2b094:	add	fp, sp, #8
   2b098:	sub	sp, sp, #8
   2b09c:	ldr	r4, [fp, #8]
   2b0a0:	str	r4, [sp]
   2b0a4:	bl	2c468 <__assert_fail@plt+0x1b148>
   2b0a8:	mov	r4, r0
   2b0ac:	cmn	r0, #1
   2b0b0:	bgt	2b0c4 <__assert_fail@plt+0x19da4>
   2b0b4:	bl	11218 <__errno_location@plt>
   2b0b8:	ldr	r0, [r0]
   2b0bc:	cmp	r0, #12
   2b0c0:	beq	2b0d0 <__assert_fail@plt+0x19db0>
   2b0c4:	mov	r0, r4
   2b0c8:	sub	sp, fp, #8
   2b0cc:	pop	{r4, sl, fp, pc}
   2b0d0:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2b0d4:	push	{r4, sl, fp, lr}
   2b0d8:	add	fp, sp, #8
   2b0dc:	bl	2c6ec <__assert_fail@plt+0x1b3cc>
   2b0e0:	mov	r4, r0
   2b0e4:	cmp	r0, #0
   2b0e8:	bne	2b0fc <__assert_fail@plt+0x19ddc>
   2b0ec:	bl	11218 <__errno_location@plt>
   2b0f0:	ldr	r0, [r0]
   2b0f4:	cmp	r0, #12
   2b0f8:	beq	2b104 <__assert_fail@plt+0x19de4>
   2b0fc:	mov	r0, r4
   2b100:	pop	{r4, sl, fp, pc}
   2b104:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2b108:	push	{r4, sl, fp, lr}
   2b10c:	add	fp, sp, #8
   2b110:	bl	2c928 <__assert_fail@plt+0x1b608>
   2b114:	mov	r4, r0
   2b118:	cmp	r0, #0
   2b11c:	bne	2b130 <__assert_fail@plt+0x19e10>
   2b120:	bl	11218 <__errno_location@plt>
   2b124:	ldr	r0, [r0]
   2b128:	cmp	r0, #12
   2b12c:	beq	2b138 <__assert_fail@plt+0x19e18>
   2b130:	mov	r0, r4
   2b134:	pop	{r4, sl, fp, pc}
   2b138:	bl	2b04c <__assert_fail@plt+0x19d2c>
   2b13c:	clz	r2, r1
   2b140:	clz	r3, r0
   2b144:	lsr	r2, r2, #5
   2b148:	lsr	r3, r3, #5
   2b14c:	orrs	r2, r3, r2
   2b150:	movwne	r1, #1
   2b154:	movwne	r0, #1
   2b158:	cmp	r1, #0
   2b15c:	beq	2b18c <__assert_fail@plt+0x19e6c>
   2b160:	mvn	r2, #-2147483648	; 0x80000000
   2b164:	udiv	r2, r2, r1
   2b168:	cmp	r2, r0
   2b16c:	bcs	2b18c <__assert_fail@plt+0x19e6c>
   2b170:	push	{fp, lr}
   2b174:	mov	fp, sp
   2b178:	bl	11218 <__errno_location@plt>
   2b17c:	mov	r1, #12
   2b180:	str	r1, [r0]
   2b184:	mov	r0, #0
   2b188:	pop	{fp, pc}
   2b18c:	b	11050 <calloc@plt>
   2b190:	cmp	r0, #0
   2b194:	movweq	r0, #1
   2b198:	cmn	r0, #1
   2b19c:	ble	2b1a4 <__assert_fail@plt+0x19e84>
   2b1a0:	b	11194 <malloc@plt>
   2b1a4:	push	{fp, lr}
   2b1a8:	mov	fp, sp
   2b1ac:	bl	11218 <__errno_location@plt>
   2b1b0:	mov	r1, #12
   2b1b4:	str	r1, [r0]
   2b1b8:	mov	r0, #0
   2b1bc:	pop	{fp, pc}
   2b1c0:	push	{fp, lr}
   2b1c4:	mov	fp, sp
   2b1c8:	cmp	r0, #0
   2b1cc:	beq	2b1e8 <__assert_fail@plt+0x19ec8>
   2b1d0:	cmp	r1, #0
   2b1d4:	beq	2b1f4 <__assert_fail@plt+0x19ed4>
   2b1d8:	cmn	r1, #1
   2b1dc:	ble	2b200 <__assert_fail@plt+0x19ee0>
   2b1e0:	pop	{fp, lr}
   2b1e4:	b	11110 <realloc@plt>
   2b1e8:	mov	r0, r1
   2b1ec:	pop	{fp, lr}
   2b1f0:	b	2b190 <__assert_fail@plt+0x19e70>
   2b1f4:	bl	1a3a4 <__assert_fail@plt+0x9084>
   2b1f8:	mov	r0, #0
   2b1fc:	pop	{fp, pc}
   2b200:	bl	11218 <__errno_location@plt>
   2b204:	mov	r1, #12
   2b208:	str	r1, [r0]
   2b20c:	mov	r0, #0
   2b210:	pop	{fp, pc}
   2b214:	cmp	r0, r1
   2b218:	moveq	r0, #0
   2b21c:	bxeq	lr
   2b220:	ldrb	r3, [r1]
   2b224:	ldrb	ip, [r0]
   2b228:	sub	r2, r3, #65	; 0x41
   2b22c:	cmp	r2, #26
   2b230:	sub	r2, ip, #65	; 0x41
   2b234:	addcc	r3, r3, #32
   2b238:	cmp	r2, #26
   2b23c:	addcc	ip, ip, #32
   2b240:	uxtb	r3, r3
   2b244:	uxtb	r2, ip
   2b248:	cmp	r2, #0
   2b24c:	beq	2b260 <__assert_fail@plt+0x19f40>
   2b250:	add	r1, r1, #1
   2b254:	add	r0, r0, #1
   2b258:	cmp	r2, r3
   2b25c:	beq	2b220 <__assert_fail@plt+0x19f00>
   2b260:	sub	r0, r2, r3
   2b264:	bx	lr
   2b268:	push	{r4, r5, r6, sl, fp, lr}
   2b26c:	add	fp, sp, #16
   2b270:	mov	r4, r0
   2b274:	bl	11170 <__fpending@plt>
   2b278:	ldr	r6, [r4]
   2b27c:	mov	r5, r0
   2b280:	mov	r0, r4
   2b284:	bl	2b2ec <__assert_fail@plt+0x19fcc>
   2b288:	tst	r6, #32
   2b28c:	bne	2b2c4 <__assert_fail@plt+0x19fa4>
   2b290:	cmp	r0, #0
   2b294:	mov	r4, r0
   2b298:	mvnne	r4, #0
   2b29c:	cmp	r5, #0
   2b2a0:	bne	2b2d0 <__assert_fail@plt+0x19fb0>
   2b2a4:	cmp	r0, #0
   2b2a8:	beq	2b2d0 <__assert_fail@plt+0x19fb0>
   2b2ac:	bl	11218 <__errno_location@plt>
   2b2b0:	ldr	r0, [r0]
   2b2b4:	subs	r4, r0, #9
   2b2b8:	mvnne	r4, #0
   2b2bc:	mov	r0, r4
   2b2c0:	pop	{r4, r5, r6, sl, fp, pc}
   2b2c4:	mvn	r4, #0
   2b2c8:	cmp	r0, #0
   2b2cc:	beq	2b2d8 <__assert_fail@plt+0x19fb8>
   2b2d0:	mov	r0, r4
   2b2d4:	pop	{r4, r5, r6, sl, fp, pc}
   2b2d8:	bl	11218 <__errno_location@plt>
   2b2dc:	mov	r1, #0
   2b2e0:	str	r1, [r0]
   2b2e4:	mov	r0, r4
   2b2e8:	pop	{r4, r5, r6, sl, fp, pc}
   2b2ec:	push	{r4, r5, r6, sl, fp, lr}
   2b2f0:	add	fp, sp, #16
   2b2f4:	sub	sp, sp, #8
   2b2f8:	mov	r4, r0
   2b2fc:	bl	1126c <fileno@plt>
   2b300:	cmn	r0, #1
   2b304:	ble	2b378 <__assert_fail@plt+0x1a058>
   2b308:	mov	r0, r4
   2b30c:	bl	111b8 <__freading@plt>
   2b310:	cmp	r0, #0
   2b314:	beq	2b340 <__assert_fail@plt+0x1a020>
   2b318:	mov	r0, r4
   2b31c:	bl	1126c <fileno@plt>
   2b320:	mov	r1, #1
   2b324:	mov	r2, #0
   2b328:	mov	r3, #0
   2b32c:	str	r1, [sp]
   2b330:	bl	11158 <lseek64@plt>
   2b334:	and	r0, r0, r1
   2b338:	cmn	r0, #1
   2b33c:	beq	2b378 <__assert_fail@plt+0x1a058>
   2b340:	mov	r0, r4
   2b344:	bl	2b388 <__assert_fail@plt+0x1a068>
   2b348:	cmp	r0, #0
   2b34c:	beq	2b378 <__assert_fail@plt+0x1a058>
   2b350:	bl	11218 <__errno_location@plt>
   2b354:	ldr	r6, [r0]
   2b358:	mov	r5, r0
   2b35c:	mov	r0, r4
   2b360:	bl	11290 <fclose@plt>
   2b364:	cmp	r6, #0
   2b368:	strne	r6, [r5]
   2b36c:	mvnne	r0, #0
   2b370:	sub	sp, fp, #16
   2b374:	pop	{r4, r5, r6, sl, fp, pc}
   2b378:	mov	r0, r4
   2b37c:	sub	sp, fp, #16
   2b380:	pop	{r4, r5, r6, sl, fp, lr}
   2b384:	b	11290 <fclose@plt>
   2b388:	push	{r4, sl, fp, lr}
   2b38c:	add	fp, sp, #8
   2b390:	sub	sp, sp, #8
   2b394:	mov	r4, r0
   2b398:	cmp	r0, #0
   2b39c:	beq	2b3b8 <__assert_fail@plt+0x1a098>
   2b3a0:	mov	r0, r4
   2b3a4:	bl	111b8 <__freading@plt>
   2b3a8:	cmp	r0, #0
   2b3ac:	ldrbne	r0, [r4, #1]
   2b3b0:	tstne	r0, #1
   2b3b4:	bne	2b3c8 <__assert_fail@plt+0x1a0a8>
   2b3b8:	mov	r0, r4
   2b3bc:	sub	sp, fp, #8
   2b3c0:	pop	{r4, sl, fp, lr}
   2b3c4:	b	11098 <fflush@plt>
   2b3c8:	mov	r0, #1
   2b3cc:	mov	r2, #0
   2b3d0:	mov	r3, #0
   2b3d4:	str	r0, [sp]
   2b3d8:	mov	r0, r4
   2b3dc:	bl	2b3e4 <__assert_fail@plt+0x1a0c4>
   2b3e0:	b	2b3b8 <__assert_fail@plt+0x1a098>
   2b3e4:	push	{r4, r5, r6, r7, fp, lr}
   2b3e8:	add	fp, sp, #16
   2b3ec:	sub	sp, sp, #8
   2b3f0:	mov	r4, r0
   2b3f4:	ldr	r0, [r0, #4]
   2b3f8:	mov	r5, r3
   2b3fc:	mov	r6, r2
   2b400:	ldr	r1, [r4, #8]
   2b404:	cmp	r1, r0
   2b408:	bne	2b424 <__assert_fail@plt+0x1a104>
   2b40c:	ldrd	r0, [r4, #16]
   2b410:	cmp	r1, r0
   2b414:	bne	2b424 <__assert_fail@plt+0x1a104>
   2b418:	ldr	r0, [r4, #36]	; 0x24
   2b41c:	cmp	r0, #0
   2b420:	beq	2b43c <__assert_fail@plt+0x1a11c>
   2b424:	mov	r0, r4
   2b428:	mov	r2, r6
   2b42c:	mov	r3, r5
   2b430:	sub	sp, fp, #16
   2b434:	pop	{r4, r5, r6, r7, fp, lr}
   2b438:	b	112a8 <fseeko64@plt>
   2b43c:	ldr	r7, [fp, #8]
   2b440:	mov	r0, r4
   2b444:	bl	1126c <fileno@plt>
   2b448:	mov	r2, r6
   2b44c:	mov	r3, r5
   2b450:	str	r7, [sp]
   2b454:	bl	11158 <lseek64@plt>
   2b458:	and	r2, r0, r1
   2b45c:	cmn	r2, #1
   2b460:	mvneq	r0, #0
   2b464:	subeq	sp, fp, #16
   2b468:	popeq	{r4, r5, r6, r7, fp, pc}
   2b46c:	strd	r0, [r4, #80]	; 0x50
   2b470:	ldr	r0, [r4]
   2b474:	bic	r0, r0, #16
   2b478:	str	r0, [r4]
   2b47c:	mov	r0, #0
   2b480:	sub	sp, fp, #16
   2b484:	pop	{r4, r5, r6, r7, fp, pc}
   2b488:	push	{fp, lr}
   2b48c:	mov	fp, sp
   2b490:	mov	r0, #14
   2b494:	bl	112e4 <nl_langinfo@plt>
   2b498:	movw	r1, #53265	; 0xd011
   2b49c:	cmp	r0, #0
   2b4a0:	movt	r1, #2
   2b4a4:	movne	r1, r0
   2b4a8:	movw	r0, #7485	; 0x1d3d
   2b4ac:	ldrb	r2, [r1]
   2b4b0:	movt	r0, #3
   2b4b4:	cmp	r2, #0
   2b4b8:	movne	r0, r1
   2b4bc:	pop	{fp, pc}
   2b4c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b4c4:	add	fp, sp, #24
   2b4c8:	mov	r4, r0
   2b4cc:	ldrb	r0, [r0, #16]
   2b4d0:	cmp	r0, #0
   2b4d4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b4d8:	ldrb	r0, [r4, #4]
   2b4dc:	cmp	r0, #0
   2b4e0:	beq	2b538 <__assert_fail@plt+0x1a218>
   2b4e4:	mov	r5, r4
   2b4e8:	ldr	r6, [r5, #20]!
   2b4ec:	sub	r8, r5, #12
   2b4f0:	ldr	r0, [r4]
   2b4f4:	add	r7, r4, #32
   2b4f8:	mov	r1, r6
   2b4fc:	mov	r3, r8
   2b500:	sub	r2, r0, r6
   2b504:	mov	r0, r7
   2b508:	bl	2b718 <__assert_fail@plt+0x1a3f8>
   2b50c:	cmn	r0, #2
   2b510:	str	r0, [r4, #24]
   2b514:	beq	2b5b8 <__assert_fail@plt+0x1a298>
   2b518:	cmp	r0, #0
   2b51c:	beq	2b574 <__assert_fail@plt+0x1a254>
   2b520:	cmn	r0, #1
   2b524:	bne	2b598 <__assert_fail@plt+0x1a278>
   2b528:	mov	r0, #0
   2b52c:	strb	r0, [r4, #28]
   2b530:	mov	r0, #1
   2b534:	b	2b5cc <__assert_fail@plt+0x1a2ac>
   2b538:	ldr	r6, [r4, #20]
   2b53c:	movw	r2, #7688	; 0x1e08
   2b540:	movt	r2, #3
   2b544:	ldrb	r0, [r6]
   2b548:	ubfx	r1, r0, #5, #3
   2b54c:	ldr	r1, [r2, r1, lsl #2]
   2b550:	and	r2, r0, #31
   2b554:	mov	r0, #1
   2b558:	tst	r1, r0, lsl r2
   2b55c:	beq	2b5dc <__assert_fail@plt+0x1a2bc>
   2b560:	str	r0, [r4, #24]
   2b564:	ldrb	r1, [r6]
   2b568:	strb	r0, [r4, #28]
   2b56c:	str	r1, [r4, #32]
   2b570:	b	2b5d0 <__assert_fail@plt+0x1a2b0>
   2b574:	mov	r0, #1
   2b578:	str	r0, [r4, #24]
   2b57c:	ldr	r0, [r4, #20]
   2b580:	ldrb	r0, [r0]
   2b584:	cmp	r0, #0
   2b588:	bne	2b600 <__assert_fail@plt+0x1a2e0>
   2b58c:	ldr	r0, [r7]
   2b590:	cmp	r0, #0
   2b594:	bne	2b620 <__assert_fail@plt+0x1a300>
   2b598:	mov	r0, #1
   2b59c:	strb	r0, [r4, #28]
   2b5a0:	mov	r0, r8
   2b5a4:	bl	110e0 <mbsinit@plt>
   2b5a8:	cmp	r0, #0
   2b5ac:	movne	r0, #0
   2b5b0:	strbne	r0, [r4, #4]
   2b5b4:	b	2b5d0 <__assert_fail@plt+0x1a2b0>
   2b5b8:	mov	r1, #0
   2b5bc:	ldr	r0, [r5]
   2b5c0:	strb	r1, [r4, #28]
   2b5c4:	ldr	r1, [r4]
   2b5c8:	sub	r0, r1, r0
   2b5cc:	str	r0, [r4, #24]
   2b5d0:	mov	r0, #1
   2b5d4:	strb	r0, [r4, #16]
   2b5d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b5dc:	add	r8, r4, #8
   2b5e0:	mov	r0, r8
   2b5e4:	bl	110e0 <mbsinit@plt>
   2b5e8:	cmp	r0, #0
   2b5ec:	beq	2b640 <__assert_fail@plt+0x1a320>
   2b5f0:	mov	r0, #1
   2b5f4:	add	r5, r4, #20
   2b5f8:	strb	r0, [r4, #4]
   2b5fc:	b	2b4f0 <__assert_fail@plt+0x1a1d0>
   2b600:	movw	r0, #7575	; 0x1d97
   2b604:	movw	r1, #7514	; 0x1d5a
   2b608:	movw	r3, #7529	; 0x1d69
   2b60c:	mov	r2, #162	; 0xa2
   2b610:	movt	r0, #3
   2b614:	movt	r1, #3
   2b618:	movt	r3, #3
   2b61c:	bl	11320 <__assert_fail@plt>
   2b620:	movw	r0, #7598	; 0x1dae
   2b624:	movw	r1, #7514	; 0x1d5a
   2b628:	movw	r3, #7529	; 0x1d69
   2b62c:	mov	r2, #163	; 0xa3
   2b630:	movt	r0, #3
   2b634:	movt	r1, #3
   2b638:	movt	r3, #3
   2b63c:	bl	11320 <__assert_fail@plt>
   2b640:	movw	r0, #7491	; 0x1d43
   2b644:	movw	r1, #7514	; 0x1d5a
   2b648:	movw	r3, #7529	; 0x1d69
   2b64c:	mov	r2, #135	; 0x87
   2b650:	movt	r0, #3
   2b654:	movt	r1, #3
   2b658:	movt	r3, #3
   2b65c:	bl	11320 <__assert_fail@plt>
   2b660:	ldr	r3, [r0, #20]
   2b664:	ldr	r2, [r0]
   2b668:	add	r3, r3, r1
   2b66c:	add	r1, r2, r1
   2b670:	str	r3, [r0, #20]
   2b674:	str	r1, [r0]
   2b678:	bx	lr
   2b67c:	push	{r4, r5, r6, sl, fp, lr}
   2b680:	add	fp, sp, #16
   2b684:	mov	r4, r0
   2b688:	ldr	r0, [r1]
   2b68c:	mov	r5, r1
   2b690:	str	r0, [r4]
   2b694:	add	r0, r4, #8
   2b698:	ldrb	r1, [r1, #4]
   2b69c:	cmp	r1, #0
   2b6a0:	strb	r1, [r4, #4]
   2b6a4:	beq	2b6b8 <__assert_fail@plt+0x1a398>
   2b6a8:	ldr	r1, [r5, #8]
   2b6ac:	ldr	r2, [r5, #12]
   2b6b0:	stm	r0, {r1, r2}
   2b6b4:	b	2b6c4 <__assert_fail@plt+0x1a3a4>
   2b6b8:	mov	r1, #0
   2b6bc:	str	r1, [r0]
   2b6c0:	str	r1, [r0, #4]
   2b6c4:	ldrb	r0, [r5, #16]
   2b6c8:	strb	r0, [r4, #16]
   2b6cc:	add	r0, r5, #36	; 0x24
   2b6d0:	ldr	r1, [r5, #20]
   2b6d4:	cmp	r1, r0
   2b6d8:	beq	2b6e4 <__assert_fail@plt+0x1a3c4>
   2b6dc:	mov	r6, r1
   2b6e0:	b	2b6f4 <__assert_fail@plt+0x1a3d4>
   2b6e4:	ldr	r2, [r5, #24]
   2b6e8:	add	r6, r4, #36	; 0x24
   2b6ec:	mov	r0, r6
   2b6f0:	bl	110d4 <memcpy@plt>
   2b6f4:	str	r6, [r4, #20]
   2b6f8:	ldr	r0, [r5, #24]
   2b6fc:	str	r0, [r4, #24]
   2b700:	ldrb	r0, [r5, #28]
   2b704:	strb	r0, [r4, #28]
   2b708:	cmp	r0, #0
   2b70c:	ldrne	r0, [r5, #32]
   2b710:	strne	r0, [r4, #32]
   2b714:	pop	{r4, r5, r6, sl, fp, pc}
   2b718:	push	{r4, r5, r6, r7, fp, lr}
   2b71c:	add	fp, sp, #16
   2b720:	sub	sp, sp, #8
   2b724:	add	r5, sp, #4
   2b728:	cmp	r0, #0
   2b72c:	mov	r7, r2
   2b730:	mov	r4, r1
   2b734:	movne	r5, r0
   2b738:	mov	r0, r5
   2b73c:	bl	1117c <mbrtowc@plt>
   2b740:	mov	r6, r0
   2b744:	cmp	r7, #0
   2b748:	beq	2b76c <__assert_fail@plt+0x1a44c>
   2b74c:	cmn	r6, #2
   2b750:	bcc	2b76c <__assert_fail@plt+0x1a44c>
   2b754:	mov	r0, #0
   2b758:	bl	2ca38 <__assert_fail@plt+0x1b718>
   2b75c:	cmp	r0, #0
   2b760:	ldrbeq	r0, [r4]
   2b764:	moveq	r6, #1
   2b768:	streq	r0, [r5]
   2b76c:	mov	r0, r6
   2b770:	sub	sp, fp, #16
   2b774:	pop	{r4, r5, r6, r7, fp, pc}
   2b778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b77c:	add	fp, sp, #28
   2b780:	sub	sp, sp, #308	; 0x134
   2b784:	mov	r5, r1
   2b788:	mov	r6, r0
   2b78c:	bl	11164 <__ctype_get_mb_cur_max@plt>
   2b790:	cmp	r0, #2
   2b794:	bcc	2bb3c <__assert_fail@plt+0x1a81c>
   2b798:	mov	r4, #0
   2b79c:	sub	r0, fp, #88	; 0x58
   2b7a0:	str	r4, [fp, #-80]	; 0xffffffb0
   2b7a4:	str	r4, [fp, #-84]	; 0xffffffac
   2b7a8:	strb	r4, [fp, #-88]	; 0xffffffa8
   2b7ac:	str	r5, [fp, #-72]	; 0xffffffb8
   2b7b0:	strb	r4, [fp, #-76]	; 0xffffffb4
   2b7b4:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2b7b8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2b7bc:	cmp	r0, #0
   2b7c0:	beq	2b7d0 <__assert_fail@plt+0x1a4b0>
   2b7c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2b7c8:	cmp	r0, #0
   2b7cc:	beq	2bc5c <__assert_fail@plt+0x1a93c>
   2b7d0:	add	r0, sp, #136	; 0x88
   2b7d4:	str	r4, [fp, #-136]	; 0xffffff78
   2b7d8:	str	r4, [fp, #-140]	; 0xffffff74
   2b7dc:	strb	r4, [fp, #-144]	; 0xffffff70
   2b7e0:	str	r5, [fp, #-128]	; 0xffffff80
   2b7e4:	str	r4, [sp, #144]	; 0x90
   2b7e8:	str	r4, [sp, #140]	; 0x8c
   2b7ec:	str	r6, [sp, #152]	; 0x98
   2b7f0:	strb	r4, [sp, #136]	; 0x88
   2b7f4:	str	r5, [sp, #16]
   2b7f8:	strb	r4, [fp, #-132]	; 0xffffff7c
   2b7fc:	strb	r4, [sp, #148]	; 0x94
   2b800:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2b804:	ldrb	r0, [sp, #160]	; 0xa0
   2b808:	cmp	r0, #0
   2b80c:	beq	2b81c <__assert_fail@plt+0x1a4fc>
   2b810:	ldr	r0, [sp, #164]	; 0xa4
   2b814:	cmp	r0, #0
   2b818:	beq	2bc68 <__assert_fail@plt+0x1a948>
   2b81c:	add	r0, sp, #24
   2b820:	mov	r8, #1
   2b824:	mov	sl, #0
   2b828:	sub	r5, fp, #144	; 0x90
   2b82c:	mov	r1, #0
   2b830:	mov	r7, #0
   2b834:	mov	r9, #0
   2b838:	add	r0, r0, #4
   2b83c:	str	r0, [sp, #12]
   2b840:	add	r0, sp, #136	; 0x88
   2b844:	add	r0, r0, #16
   2b848:	str	r0, [sp, #8]
   2b84c:	add	r0, r9, r9, lsl #2
   2b850:	mov	r4, r7
   2b854:	cmp	r7, r0
   2b858:	bcc	2b900 <__assert_fail@plt+0x1a5e0>
   2b85c:	tst	r8, #1
   2b860:	beq	2b900 <__assert_fail@plt+0x1a5e0>
   2b864:	cmp	r9, #10
   2b868:	bcc	2b900 <__assert_fail@plt+0x1a5e0>
   2b86c:	subs	r0, r4, r1
   2b870:	beq	2b8b4 <__assert_fail@plt+0x1a594>
   2b874:	sub	r7, r1, r4
   2b878:	mov	r0, r5
   2b87c:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2b880:	ldrb	r0, [fp, #-120]	; 0xffffff88
   2b884:	cmp	r0, #0
   2b888:	beq	2b898 <__assert_fail@plt+0x1a578>
   2b88c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2b890:	cmp	r0, #0
   2b894:	beq	2b8b4 <__assert_fail@plt+0x1a594>
   2b898:	strb	sl, [fp, #-132]	; 0xffffff7c
   2b89c:	adds	r7, r7, #1
   2b8a0:	ldr	r0, [fp, #-128]	; 0xffffff80
   2b8a4:	ldr	r1, [fp, #-124]	; 0xffffff84
   2b8a8:	add	r0, r0, r1
   2b8ac:	str	r0, [fp, #-128]	; 0xffffff80
   2b8b0:	bne	2b878 <__assert_fail@plt+0x1a558>
   2b8b4:	mov	r0, r5
   2b8b8:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2b8bc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   2b8c0:	cmp	r0, #0
   2b8c4:	beq	2b8fc <__assert_fail@plt+0x1a5dc>
   2b8c8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2b8cc:	mov	r1, r4
   2b8d0:	cmp	r0, #0
   2b8d4:	bne	2b900 <__assert_fail@plt+0x1a5e0>
   2b8d8:	ldr	r1, [sp, #16]
   2b8dc:	mov	r0, r6
   2b8e0:	add	r2, sp, #80	; 0x50
   2b8e4:	bl	2bc90 <__assert_fail@plt+0x1a970>
   2b8e8:	mov	r8, #0
   2b8ec:	cmp	r0, #0
   2b8f0:	mov	r1, r4
   2b8f4:	beq	2b900 <__assert_fail@plt+0x1a5e0>
   2b8f8:	b	2bc84 <__assert_fail@plt+0x1a964>
   2b8fc:	mov	r1, r4
   2b900:	ldrb	r0, [sp, #160]	; 0xa0
   2b904:	add	r7, r4, #1
   2b908:	str	r1, [sp, #20]
   2b90c:	cmp	r0, #0
   2b910:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   2b914:	cmpne	r0, #0
   2b918:	bne	2b944 <__assert_fail@plt+0x1a624>
   2b91c:	ldr	r2, [sp, #156]	; 0x9c
   2b920:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2b924:	cmp	r2, r0
   2b928:	bne	2baf8 <__assert_fail@plt+0x1a7d8>
   2b92c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2b930:	ldr	r0, [sp, #152]	; 0x98
   2b934:	bl	110ec <memcmp@plt>
   2b938:	cmp	r0, #0
   2b93c:	bne	2baf8 <__assert_fail@plt+0x1a7d8>
   2b940:	b	2b954 <__assert_fail@plt+0x1a634>
   2b944:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2b948:	ldr	r1, [sp, #164]	; 0xa4
   2b94c:	cmp	r1, r0
   2b950:	bne	2baf8 <__assert_fail@plt+0x1a7d8>
   2b954:	add	r2, sp, #136	; 0x88
   2b958:	mov	r1, #48	; 0x30
   2b95c:	add	r3, sp, #80	; 0x50
   2b960:	str	r9, [sp]
   2b964:	str	r8, [sp, #4]
   2b968:	mov	r0, r2
   2b96c:	add	r2, r2, #32
   2b970:	vld1.64	{d16-d17}, [r0], r1
   2b974:	ldr	r1, [sp, #8]
   2b978:	vld1.64	{d20-d21}, [r2]
   2b97c:	vld1.64	{d18-d19}, [r1]
   2b980:	add	r1, r3, #16
   2b984:	vldr	d22, [r0]
   2b988:	add	r0, r3, #32
   2b98c:	vst1.64	{d20-d21}, [r0]
   2b990:	mov	r0, r3
   2b994:	vst1.64	{d18-d19}, [r1]
   2b998:	mov	r1, #12
   2b99c:	vst1.64	{d16-d17}, [r0], r1
   2b9a0:	strb	sl, [r0]
   2b9a4:	ldr	r0, [sp, #16]
   2b9a8:	vstr	d22, [sp, #128]	; 0x80
   2b9ac:	ldr	r1, [sp, #100]	; 0x64
   2b9b0:	str	r0, [sp, #40]	; 0x28
   2b9b4:	ldr	r0, [sp, #96]	; 0x60
   2b9b8:	strb	sl, [sp, #24]
   2b9bc:	add	r0, r0, r1
   2b9c0:	str	r0, [sp, #96]	; 0x60
   2b9c4:	ldr	r0, [sp, #12]
   2b9c8:	str	sl, [r0]
   2b9cc:	str	sl, [r0, #4]
   2b9d0:	add	r0, sp, #24
   2b9d4:	strb	sl, [sp, #36]	; 0x24
   2b9d8:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2b9dc:	ldrb	r0, [sp, #48]	; 0x30
   2b9e0:	cmp	r0, #0
   2b9e4:	beq	2b9f4 <__assert_fail@plt+0x1a6d4>
   2b9e8:	ldr	r0, [sp, #52]	; 0x34
   2b9ec:	cmp	r0, #0
   2b9f0:	beq	2bc8c <__assert_fail@plt+0x1a96c>
   2b9f4:	strb	sl, [sp, #36]	; 0x24
   2b9f8:	ldr	r0, [sp, #40]	; 0x28
   2b9fc:	ldr	r1, [sp, #44]	; 0x2c
   2ba00:	add	r0, r0, r1
   2ba04:	str	r0, [sp, #40]	; 0x28
   2ba08:	add	r0, sp, #24
   2ba0c:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2ba10:	ldrb	r0, [sp, #48]	; 0x30
   2ba14:	cmp	r0, #0
   2ba18:	beq	2ba28 <__assert_fail@plt+0x1a708>
   2ba1c:	ldr	r0, [sp, #52]	; 0x34
   2ba20:	cmp	r0, #0
   2ba24:	beq	2bc74 <__assert_fail@plt+0x1a954>
   2ba28:	add	r7, r4, #2
   2ba2c:	add	r0, sp, #80	; 0x50
   2ba30:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2ba34:	ldr	r0, [sp, #108]	; 0x6c
   2ba38:	ldrb	r1, [sp, #104]	; 0x68
   2ba3c:	cmp	r0, #0
   2ba40:	bne	2ba4c <__assert_fail@plt+0x1a72c>
   2ba44:	cmp	r1, #0
   2ba48:	bne	2bc64 <__assert_fail@plt+0x1a944>
   2ba4c:	cmp	r1, #0
   2ba50:	ldrbne	r1, [sp, #48]	; 0x30
   2ba54:	cmpne	r1, #0
   2ba58:	bne	2ba94 <__assert_fail@plt+0x1a774>
   2ba5c:	ldr	r4, [sp, #100]	; 0x64
   2ba60:	ldr	r0, [sp, #44]	; 0x2c
   2ba64:	cmp	r4, r0
   2ba68:	bne	2baf0 <__assert_fail@plt+0x1a7d0>
   2ba6c:	ldr	r8, [sp, #40]	; 0x28
   2ba70:	ldr	r9, [sp, #96]	; 0x60
   2ba74:	mov	r2, r4
   2ba78:	mov	r0, r9
   2ba7c:	mov	r1, r8
   2ba80:	bl	110ec <memcmp@plt>
   2ba84:	cmp	r0, #0
   2ba88:	mov	r0, r4
   2ba8c:	beq	2bab0 <__assert_fail@plt+0x1a790>
   2ba90:	b	2baf0 <__assert_fail@plt+0x1a7d0>
   2ba94:	ldr	r1, [sp, #52]	; 0x34
   2ba98:	cmp	r0, r1
   2ba9c:	bne	2baf0 <__assert_fail@plt+0x1a7d0>
   2baa0:	ldr	r8, [sp, #40]	; 0x28
   2baa4:	ldr	r4, [sp, #44]	; 0x2c
   2baa8:	ldr	r9, [sp, #96]	; 0x60
   2baac:	ldr	r0, [sp, #100]	; 0x64
   2bab0:	add	r0, r9, r0
   2bab4:	strb	sl, [sp, #92]	; 0x5c
   2bab8:	strb	sl, [sp, #36]	; 0x24
   2babc:	str	r0, [sp, #96]	; 0x60
   2bac0:	add	r0, r8, r4
   2bac4:	str	r0, [sp, #40]	; 0x28
   2bac8:	add	r0, sp, #24
   2bacc:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2bad0:	ldrb	r0, [sp, #48]	; 0x30
   2bad4:	add	r7, r7, #1
   2bad8:	cmp	r0, #0
   2badc:	beq	2ba2c <__assert_fail@plt+0x1a70c>
   2bae0:	ldr	r0, [sp, #52]	; 0x34
   2bae4:	cmp	r0, #0
   2bae8:	bne	2ba2c <__assert_fail@plt+0x1a70c>
   2baec:	b	2bc74 <__assert_fail@plt+0x1a954>
   2baf0:	ldr	r8, [sp, #4]
   2baf4:	ldr	r9, [sp]
   2baf8:	mov	r4, #0
   2bafc:	add	r9, r9, #1
   2bb00:	strb	r4, [sp, #148]	; 0x94
   2bb04:	ldr	r0, [sp, #152]	; 0x98
   2bb08:	ldr	r1, [sp, #156]	; 0x9c
   2bb0c:	add	r0, r0, r1
   2bb10:	str	r0, [sp, #152]	; 0x98
   2bb14:	add	r0, sp, #136	; 0x88
   2bb18:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2bb1c:	ldrb	r0, [sp, #160]	; 0xa0
   2bb20:	ldr	r1, [sp, #20]
   2bb24:	cmp	r0, #0
   2bb28:	beq	2b84c <__assert_fail@plt+0x1a52c>
   2bb2c:	ldr	r0, [sp, #164]	; 0xa4
   2bb30:	cmp	r0, #0
   2bb34:	bne	2b84c <__assert_fail@plt+0x1a52c>
   2bb38:	b	2bc68 <__assert_fail@plt+0x1a948>
   2bb3c:	ldrb	r7, [r5]
   2bb40:	cmp	r7, #0
   2bb44:	beq	2bc5c <__assert_fail@plt+0x1a93c>
   2bb48:	ldrb	r9, [r6]
   2bb4c:	cmp	r9, #0
   2bb50:	beq	2bc64 <__assert_fail@plt+0x1a944>
   2bb54:	mov	r3, #1
   2bb58:	mov	ip, #0
   2bb5c:	mov	lr, r5
   2bb60:	mov	r8, #0
   2bb64:	mov	sl, #0
   2bb68:	str	r7, [sp, #16]
   2bb6c:	add	r0, sl, sl, lsl #2
   2bb70:	cmp	r8, r0
   2bb74:	bcc	2bc04 <__assert_fail@plt+0x1a8e4>
   2bb78:	tst	r3, #1
   2bb7c:	beq	2bc04 <__assert_fail@plt+0x1a8e4>
   2bb80:	cmp	sl, #10
   2bb84:	bcc	2bc04 <__assert_fail@plt+0x1a8e4>
   2bb88:	cmp	lr, #0
   2bb8c:	str	r3, [sp, #20]
   2bb90:	beq	2bbc4 <__assert_fail@plt+0x1a8a4>
   2bb94:	sub	r1, r8, ip
   2bb98:	mov	r0, lr
   2bb9c:	mov	r7, lr
   2bba0:	bl	1129c <strnlen@plt>
   2bba4:	mov	lr, r7
   2bba8:	mov	ip, r8
   2bbac:	ldrb	r0, [lr, r0]!
   2bbb0:	cmp	r0, #0
   2bbb4:	beq	2bbc4 <__assert_fail@plt+0x1a8a4>
   2bbb8:	ldr	r3, [sp, #20]
   2bbbc:	mov	ip, r8
   2bbc0:	b	2bc00 <__assert_fail@plt+0x1a8e0>
   2bbc4:	mov	r0, r5
   2bbc8:	mov	r4, ip
   2bbcc:	bl	11200 <strlen@plt>
   2bbd0:	mov	r2, r0
   2bbd4:	mov	r0, r6
   2bbd8:	mov	r1, r5
   2bbdc:	sub	r3, fp, #88	; 0x58
   2bbe0:	bl	2c098 <__assert_fail@plt+0x1ad78>
   2bbe4:	cmp	r0, #0
   2bbe8:	bne	2bc7c <__assert_fail@plt+0x1a95c>
   2bbec:	ldr	r3, [sp, #20]
   2bbf0:	ldrb	r9, [r6]
   2bbf4:	mov	lr, #0
   2bbf8:	mov	ip, r4
   2bbfc:	and	r3, r3, r0
   2bc00:	ldr	r7, [sp, #16]
   2bc04:	uxtb	r0, r9
   2bc08:	cmp	r0, r7
   2bc0c:	bne	2bc40 <__assert_fail@plt+0x1a920>
   2bc10:	mov	r0, #1
   2bc14:	ldrb	r1, [r5, r0]
   2bc18:	cmp	r1, #0
   2bc1c:	beq	2bc5c <__assert_fail@plt+0x1a93c>
   2bc20:	ldrb	r2, [r6, r0]
   2bc24:	cmp	r2, #0
   2bc28:	beq	2bc64 <__assert_fail@plt+0x1a944>
   2bc2c:	add	r0, r0, #1
   2bc30:	cmp	r2, r1
   2bc34:	beq	2bc14 <__assert_fail@plt+0x1a8f4>
   2bc38:	add	r8, r8, r0
   2bc3c:	b	2bc44 <__assert_fail@plt+0x1a924>
   2bc40:	add	r8, r8, #1
   2bc44:	ldrb	r9, [r6, #1]!
   2bc48:	add	sl, sl, #1
   2bc4c:	mov	r4, #0
   2bc50:	cmp	r9, #0
   2bc54:	bne	2bb6c <__assert_fail@plt+0x1a84c>
   2bc58:	b	2bc68 <__assert_fail@plt+0x1a948>
   2bc5c:	mov	r4, r6
   2bc60:	b	2bc68 <__assert_fail@plt+0x1a948>
   2bc64:	mov	r4, #0
   2bc68:	mov	r0, r4
   2bc6c:	sub	sp, fp, #28
   2bc70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc74:	ldr	r4, [sp, #152]	; 0x98
   2bc78:	b	2bc68 <__assert_fail@plt+0x1a948>
   2bc7c:	ldr	r4, [fp, #-88]	; 0xffffffa8
   2bc80:	b	2bc68 <__assert_fail@plt+0x1a948>
   2bc84:	ldr	r4, [sp, #80]	; 0x50
   2bc88:	b	2bc68 <__assert_fail@plt+0x1a948>
   2bc8c:	bl	11314 <abort@plt>
   2bc90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc94:	add	fp, sp, #28
   2bc98:	sub	sp, sp, #132	; 0x84
   2bc9c:	mov	r4, r0
   2bca0:	mov	r0, r1
   2bca4:	mov	r8, r2
   2bca8:	mov	r7, r1
   2bcac:	bl	2cbe4 <__assert_fail@plt+0x1b8c4>
   2bcb0:	mov	sl, r0
   2bcb4:	movw	r0, #47662	; 0xba2e
   2bcb8:	mov	r5, #0
   2bcbc:	movt	r0, #744	; 0x2e8
   2bcc0:	cmp	sl, r0
   2bcc4:	bhi	2c088 <__assert_fail@plt+0x1ad68>
   2bcc8:	mov	r0, #44	; 0x2c
   2bccc:	mul	r0, sl, r0
   2bcd0:	cmp	r0, #4016	; 0xfb0
   2bcd4:	bhi	2bcfc <__assert_fail@plt+0x1a9dc>
   2bcd8:	add	r0, r0, #22
   2bcdc:	bic	r0, r0, #7
   2bce0:	sub	r0, sp, r0
   2bce4:	add	r1, r0, #15
   2bce8:	bic	r9, r1, #15
   2bcec:	mov	sp, r0
   2bcf0:	cmp	r9, #0
   2bcf4:	bne	2bd0c <__assert_fail@plt+0x1a9ec>
   2bcf8:	b	2c088 <__assert_fail@plt+0x1ad68>
   2bcfc:	bl	2ca9c <__assert_fail@plt+0x1b77c>
   2bd00:	mov	r9, r0
   2bd04:	cmp	r9, #0
   2bd08:	beq	2c088 <__assert_fail@plt+0x1ad68>
   2bd0c:	sub	r6, fp, #88	; 0x58
   2bd10:	str	r4, [fp, #-160]	; 0xffffff60
   2bd14:	mov	r4, #0
   2bd18:	mov	r0, r6
   2bd1c:	str	r4, [fp, #-80]	; 0xffffffb0
   2bd20:	str	r4, [fp, #-84]	; 0xffffffac
   2bd24:	strb	r4, [fp, #-88]	; 0xffffffa8
   2bd28:	str	r7, [fp, #-72]	; 0xffffffb8
   2bd2c:	strb	r4, [fp, #-76]	; 0xffffffb4
   2bd30:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2bd34:	add	r0, sl, sl, lsl #2
   2bd38:	add	r3, r9, r0, lsl #3
   2bd3c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2bd40:	str	r3, [fp, #-148]	; 0xffffff6c
   2bd44:	cmp	r0, #0
   2bd48:	beq	2bd58 <__assert_fail@plt+0x1aa38>
   2bd4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2bd50:	cmp	r0, #0
   2bd54:	beq	2bddc <__assert_fail@plt+0x1aabc>
   2bd58:	add	r7, r9, #16
   2bd5c:	add	r5, r6, #32
   2bd60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2bd64:	cmp	r0, r5
   2bd68:	bne	2bd80 <__assert_fail@plt+0x1aa60>
   2bd6c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   2bd70:	mov	r0, r7
   2bd74:	mov	r1, r5
   2bd78:	bl	110d4 <memcpy@plt>
   2bd7c:	mov	r0, r7
   2bd80:	str	r0, [r7, #-16]
   2bd84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bd88:	str	r0, [r7, #-12]
   2bd8c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2bd90:	strb	r0, [r7, #-8]
   2bd94:	cmp	r0, #0
   2bd98:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   2bd9c:	strne	r0, [r7, #-4]
   2bda0:	strb	r4, [fp, #-76]	; 0xffffffb4
   2bda4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2bda8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2bdac:	add	r0, r0, r1
   2bdb0:	str	r0, [fp, #-72]	; 0xffffffb8
   2bdb4:	mov	r0, r6
   2bdb8:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2bdbc:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   2bdc0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2bdc4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   2bdc8:	add	r7, r7, #40	; 0x28
   2bdcc:	cmp	r1, #0
   2bdd0:	beq	2bd60 <__assert_fail@plt+0x1aa40>
   2bdd4:	cmp	r0, #0
   2bdd8:	bne	2bd60 <__assert_fail@plt+0x1aa40>
   2bddc:	mov	r0, #1
   2bde0:	cmp	sl, #3
   2bde4:	str	r8, [fp, #-156]	; 0xffffff64
   2bde8:	str	sl, [fp, #-152]	; 0xffffff68
   2bdec:	str	r0, [r3, #4]
   2bdf0:	bcc	2beb8 <__assert_fail@plt+0x1ab98>
   2bdf4:	mov	r4, #2
   2bdf8:	mov	r5, #0
   2bdfc:	add	r0, r4, r4, lsl #2
   2be00:	add	r0, r9, r0, lsl #3
   2be04:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   2be08:	sub	r7, r0, #28
   2be0c:	sub	sl, r0, #40	; 0x28
   2be10:	sub	r6, r0, #36	; 0x24
   2be14:	cmp	r8, #0
   2be18:	bne	2be30 <__assert_fail@plt+0x1ab10>
   2be1c:	b	2be58 <__assert_fail@plt+0x1ab38>
   2be20:	ldr	r0, [r3, r5, lsl #2]
   2be24:	sub	r5, r5, r0
   2be28:	cmp	r8, #0
   2be2c:	beq	2be58 <__assert_fail@plt+0x1ab38>
   2be30:	add	r0, r5, r5, lsl #2
   2be34:	add	r0, r9, r0, lsl #3
   2be38:	ldrb	r1, [r0, #8]
   2be3c:	cmp	r1, #0
   2be40:	beq	2be58 <__assert_fail@plt+0x1ab38>
   2be44:	ldr	r0, [r0, #12]
   2be48:	ldr	r1, [r7]
   2be4c:	cmp	r1, r0
   2be50:	bne	2be88 <__assert_fail@plt+0x1ab68>
   2be54:	b	2be9c <__assert_fail@plt+0x1ab7c>
   2be58:	add	r0, r5, r5, lsl #2
   2be5c:	ldr	r2, [r6]
   2be60:	add	r1, r9, r0, lsl #3
   2be64:	ldr	r1, [r1, #4]
   2be68:	cmp	r2, r1
   2be6c:	bne	2be88 <__assert_fail@plt+0x1ab68>
   2be70:	ldr	r1, [r9, r0, lsl #3]
   2be74:	ldr	r0, [sl]
   2be78:	bl	110ec <memcmp@plt>
   2be7c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   2be80:	cmp	r0, #0
   2be84:	beq	2be9c <__assert_fail@plt+0x1ab7c>
   2be88:	cmp	r5, #0
   2be8c:	bne	2be20 <__assert_fail@plt+0x1ab00>
   2be90:	mov	r5, #0
   2be94:	mov	r0, r4
   2be98:	b	2bea4 <__assert_fail@plt+0x1ab84>
   2be9c:	add	r5, r5, #1
   2bea0:	sub	r0, r4, r5
   2bea4:	str	r0, [r3, r4, lsl #2]
   2bea8:	ldr	r0, [fp, #-152]	; 0xffffff68
   2beac:	add	r4, r4, #1
   2beb0:	cmp	r4, r0
   2beb4:	bne	2bdfc <__assert_fail@plt+0x1aadc>
   2beb8:	ldr	r8, [fp, #-156]	; 0xffffff64
   2bebc:	ldr	r0, [fp, #-160]	; 0xffffff60
   2bec0:	mov	r6, #0
   2bec4:	str	r6, [r8]
   2bec8:	str	r6, [fp, #-80]	; 0xffffffb0
   2becc:	str	r6, [fp, #-84]	; 0xffffffac
   2bed0:	strb	r6, [fp, #-88]	; 0xffffffa8
   2bed4:	str	r0, [fp, #-72]	; 0xffffffb8
   2bed8:	str	r6, [fp, #-136]	; 0xffffff78
   2bedc:	str	r6, [fp, #-140]	; 0xffffff74
   2bee0:	str	r0, [fp, #-128]	; 0xffffff80
   2bee4:	sub	r0, fp, #144	; 0x90
   2bee8:	strb	r6, [fp, #-144]	; 0xffffff70
   2beec:	strb	r6, [fp, #-76]	; 0xffffffb4
   2bef0:	strb	r6, [fp, #-132]	; 0xffffff7c
   2bef4:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2bef8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2befc:	ldrb	r1, [fp, #-120]	; 0xffffff88
   2bf00:	cmp	r0, #0
   2bf04:	bne	2bf10 <__assert_fail@plt+0x1abf0>
   2bf08:	cmp	r1, #0
   2bf0c:	bne	2c07c <__assert_fail@plt+0x1ad5c>
   2bf10:	clz	r1, r1
   2bf14:	sub	r4, fp, #88	; 0x58
   2bf18:	mov	sl, #0
   2bf1c:	lsr	r1, r1, #5
   2bf20:	add	r2, sl, sl, lsl #2
   2bf24:	tst	r1, #1
   2bf28:	add	r3, r9, r2, lsl #3
   2bf2c:	bne	2bf54 <__assert_fail@plt+0x1ac34>
   2bf30:	ldrb	r1, [r3, #8]
   2bf34:	cmp	r1, #0
   2bf38:	beq	2bf54 <__assert_fail@plt+0x1ac34>
   2bf3c:	ldr	r1, [r3, #12]
   2bf40:	cmp	r1, r0
   2bf44:	bne	2bf80 <__assert_fail@plt+0x1ac60>
   2bf48:	ldr	r7, [fp, #-128]	; 0xffffff80
   2bf4c:	ldr	r5, [fp, #-124]	; 0xffffff84
   2bf50:	b	2bfdc <__assert_fail@plt+0x1acbc>
   2bf54:	ldr	r5, [r3, #4]
   2bf58:	ldr	r0, [fp, #-124]	; 0xffffff84
   2bf5c:	cmp	r5, r0
   2bf60:	bne	2bf80 <__assert_fail@plt+0x1ac60>
   2bf64:	ldr	r7, [fp, #-128]	; 0xffffff80
   2bf68:	ldr	r0, [r9, r2, lsl #3]
   2bf6c:	mov	r2, r5
   2bf70:	mov	r1, r7
   2bf74:	bl	110ec <memcmp@plt>
   2bf78:	cmp	r0, #0
   2bf7c:	beq	2bfdc <__assert_fail@plt+0x1acbc>
   2bf80:	cmp	sl, #0
   2bf84:	beq	2bffc <__assert_fail@plt+0x1acdc>
   2bf88:	ldr	r0, [fp, #-148]	; 0xffffff6c
   2bf8c:	ldr	r5, [r0, sl, lsl #2]
   2bf90:	sub	sl, sl, r5
   2bf94:	cmp	r5, #0
   2bf98:	beq	2c048 <__assert_fail@plt+0x1ad28>
   2bf9c:	mov	r0, r4
   2bfa0:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2bfa4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2bfa8:	cmp	r0, #0
   2bfac:	beq	2bfbc <__assert_fail@plt+0x1ac9c>
   2bfb0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2bfb4:	cmp	r0, #0
   2bfb8:	beq	2c094 <__assert_fail@plt+0x1ad74>
   2bfbc:	strb	r6, [fp, #-76]	; 0xffffffb4
   2bfc0:	subs	r5, r5, #1
   2bfc4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2bfc8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2bfcc:	add	r0, r0, r1
   2bfd0:	str	r0, [fp, #-72]	; 0xffffffb8
   2bfd4:	bne	2bf9c <__assert_fail@plt+0x1ac7c>
   2bfd8:	b	2c048 <__assert_fail@plt+0x1ad28>
   2bfdc:	add	r0, r7, r5
   2bfe0:	strb	r6, [fp, #-132]	; 0xffffff7c
   2bfe4:	add	sl, sl, #1
   2bfe8:	str	r0, [fp, #-128]	; 0xffffff80
   2bfec:	ldr	r0, [fp, #-152]	; 0xffffff68
   2bff0:	cmp	sl, r0
   2bff4:	bne	2c048 <__assert_fail@plt+0x1ad28>
   2bff8:	b	2c074 <__assert_fail@plt+0x1ad54>
   2bffc:	mov	r0, r4
   2c000:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2c004:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2c008:	cmp	r0, #0
   2c00c:	beq	2c01c <__assert_fail@plt+0x1acfc>
   2c010:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2c014:	cmp	r0, #0
   2c018:	beq	2c094 <__assert_fail@plt+0x1ad74>
   2c01c:	mov	sl, #0
   2c020:	strb	sl, [fp, #-76]	; 0xffffffb4
   2c024:	strb	sl, [fp, #-132]	; 0xffffff7c
   2c028:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2c02c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2c030:	add	r0, r0, r1
   2c034:	ldr	r1, [fp, #-124]	; 0xffffff84
   2c038:	str	r0, [fp, #-72]	; 0xffffffb8
   2c03c:	ldr	r0, [fp, #-128]	; 0xffffff80
   2c040:	add	r0, r0, r1
   2c044:	str	r0, [fp, #-128]	; 0xffffff80
   2c048:	sub	r0, fp, #144	; 0x90
   2c04c:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2c050:	ldrb	r2, [fp, #-120]	; 0xffffff88
   2c054:	clz	r0, r2
   2c058:	lsr	r1, r0, #5
   2c05c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2c060:	cmp	r0, #0
   2c064:	bne	2bf20 <__assert_fail@plt+0x1ac00>
   2c068:	cmp	r2, #0
   2c06c:	beq	2bf20 <__assert_fail@plt+0x1ac00>
   2c070:	b	2c07c <__assert_fail@plt+0x1ad5c>
   2c074:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2c078:	str	r0, [r8]
   2c07c:	mov	r0, r9
   2c080:	bl	2cb0c <__assert_fail@plt+0x1b7ec>
   2c084:	mov	r5, #1
   2c088:	mov	r0, r5
   2c08c:	sub	sp, fp, #28
   2c090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c094:	bl	11314 <abort@plt>
   2c098:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c09c:	add	fp, sp, #24
   2c0a0:	mov	r4, #0
   2c0a4:	cmn	r2, #-536870911	; 0xe0000001
   2c0a8:	bhi	2c1e4 <__assert_fail@plt+0x1aec4>
   2c0ac:	mov	r7, r0
   2c0b0:	lsl	r0, r2, #2
   2c0b4:	mov	r8, r3
   2c0b8:	mov	r5, r2
   2c0bc:	mov	r6, r1
   2c0c0:	cmp	r0, #4016	; 0xfb0
   2c0c4:	bhi	2c0ec <__assert_fail@plt+0x1adcc>
   2c0c8:	add	r0, r0, #22
   2c0cc:	bic	r0, r0, #7
   2c0d0:	sub	r1, sp, r0
   2c0d4:	add	r0, r1, #15
   2c0d8:	bic	r0, r0, #15
   2c0dc:	mov	sp, r1
   2c0e0:	cmp	r0, #0
   2c0e4:	bne	2c0f8 <__assert_fail@plt+0x1add8>
   2c0e8:	b	2c1e4 <__assert_fail@plt+0x1aec4>
   2c0ec:	bl	2ca9c <__assert_fail@plt+0x1b77c>
   2c0f0:	cmp	r0, #0
   2c0f4:	beq	2c1e4 <__assert_fail@plt+0x1aec4>
   2c0f8:	mov	r1, #1
   2c0fc:	cmp	r5, #3
   2c100:	str	r1, [r0, #4]
   2c104:	bcc	2c168 <__assert_fail@plt+0x1ae48>
   2c108:	mov	r1, #2
   2c10c:	mov	r2, #0
   2c110:	add	r3, r6, r1
   2c114:	ldrb	r4, [r6, r2]
   2c118:	ldrb	r3, [r3, #-1]
   2c11c:	cmp	r3, r4
   2c120:	bne	2c13c <__assert_fail@plt+0x1ae1c>
   2c124:	b	2c150 <__assert_fail@plt+0x1ae30>
   2c128:	ldr	r4, [r0, r2, lsl #2]
   2c12c:	sub	r2, r2, r4
   2c130:	ldrb	r4, [r6, r2]
   2c134:	cmp	r3, r4
   2c138:	beq	2c150 <__assert_fail@plt+0x1ae30>
   2c13c:	cmp	r2, #0
   2c140:	bne	2c128 <__assert_fail@plt+0x1ae08>
   2c144:	mov	r2, #0
   2c148:	mov	r3, r1
   2c14c:	b	2c158 <__assert_fail@plt+0x1ae38>
   2c150:	add	r2, r2, #1
   2c154:	sub	r3, r1, r2
   2c158:	str	r3, [r0, r1, lsl #2]
   2c15c:	add	r1, r1, #1
   2c160:	cmp	r1, r5
   2c164:	bne	2c110 <__assert_fail@plt+0x1adf0>
   2c168:	mov	r1, #0
   2c16c:	str	r1, [r8]
   2c170:	ldrb	r3, [r7]
   2c174:	cmp	r3, #0
   2c178:	beq	2c1dc <__assert_fail@plt+0x1aebc>
   2c17c:	mov	r2, r7
   2c180:	ldrb	r4, [r6, r1]
   2c184:	uxtb	r3, r3
   2c188:	cmp	r4, r3
   2c18c:	bne	2c1a4 <__assert_fail@plt+0x1ae84>
   2c190:	add	r1, r1, #1
   2c194:	cmp	r1, r5
   2c198:	beq	2c1d8 <__assert_fail@plt+0x1aeb8>
   2c19c:	add	r7, r7, #1
   2c1a0:	b	2c1c8 <__assert_fail@plt+0x1aea8>
   2c1a4:	cmp	r1, #0
   2c1a8:	beq	2c1bc <__assert_fail@plt+0x1ae9c>
   2c1ac:	ldr	r3, [r0, r1, lsl #2]
   2c1b0:	sub	r1, r1, r3
   2c1b4:	add	r2, r2, r3
   2c1b8:	b	2c1c8 <__assert_fail@plt+0x1aea8>
   2c1bc:	add	r7, r7, #1
   2c1c0:	add	r2, r2, #1
   2c1c4:	mov	r1, #0
   2c1c8:	ldrb	r3, [r7]
   2c1cc:	cmp	r3, #0
   2c1d0:	bne	2c180 <__assert_fail@plt+0x1ae60>
   2c1d4:	b	2c1dc <__assert_fail@plt+0x1aebc>
   2c1d8:	str	r2, [r8]
   2c1dc:	bl	2cb0c <__assert_fail@plt+0x1b7ec>
   2c1e0:	mov	r4, #1
   2c1e4:	mov	r0, r4
   2c1e8:	sub	sp, fp, #24
   2c1ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c1f0:	push	{r4, r5, r6, r7, fp, lr}
   2c1f4:	add	fp, sp, #16
   2c1f8:	mov	r4, r0
   2c1fc:	ldrb	r0, [r0, #12]
   2c200:	cmp	r0, #0
   2c204:	popne	{r4, r5, r6, r7, fp, pc}
   2c208:	ldrb	r0, [r4]
   2c20c:	ldr	r6, [r4, #16]
   2c210:	cmp	r0, #0
   2c214:	beq	2c274 <__assert_fail@plt+0x1af54>
   2c218:	add	r5, r4, #4
   2c21c:	bl	11164 <__ctype_get_mb_cur_max@plt>
   2c220:	mov	r1, r0
   2c224:	mov	r0, r6
   2c228:	bl	2ca08 <__assert_fail@plt+0x1b6e8>
   2c22c:	add	r7, r4, #28
   2c230:	mov	r2, r0
   2c234:	mov	r1, r6
   2c238:	mov	r3, r5
   2c23c:	mov	r0, r7
   2c240:	bl	2b718 <__assert_fail@plt+0x1a3f8>
   2c244:	cmn	r0, #2
   2c248:	str	r0, [r4, #20]
   2c24c:	beq	2c2f0 <__assert_fail@plt+0x1afd0>
   2c250:	cmp	r0, #0
   2c254:	beq	2c2ac <__assert_fail@plt+0x1af8c>
   2c258:	cmn	r0, #1
   2c25c:	bne	2c2d0 <__assert_fail@plt+0x1afb0>
   2c260:	mov	r0, #0
   2c264:	strb	r0, [r4, #24]
   2c268:	mov	r0, #1
   2c26c:	str	r0, [r4, #20]
   2c270:	b	2c304 <__assert_fail@plt+0x1afe4>
   2c274:	ldrb	r0, [r6]
   2c278:	movw	r2, #7688	; 0x1e08
   2c27c:	movt	r2, #3
   2c280:	ubfx	r1, r0, #5, #3
   2c284:	ldr	r1, [r2, r1, lsl #2]
   2c288:	and	r2, r0, #31
   2c28c:	mov	r0, #1
   2c290:	tst	r1, r0, lsl r2
   2c294:	beq	2c310 <__assert_fail@plt+0x1aff0>
   2c298:	str	r0, [r4, #20]
   2c29c:	ldrb	r1, [r6]
   2c2a0:	strb	r0, [r4, #24]
   2c2a4:	str	r1, [r4, #28]
   2c2a8:	b	2c304 <__assert_fail@plt+0x1afe4>
   2c2ac:	mov	r0, #1
   2c2b0:	str	r0, [r4, #20]
   2c2b4:	ldr	r0, [r4, #16]
   2c2b8:	ldrb	r0, [r0]
   2c2bc:	cmp	r0, #0
   2c2c0:	bne	2c330 <__assert_fail@plt+0x1b010>
   2c2c4:	ldr	r0, [r7]
   2c2c8:	cmp	r0, #0
   2c2cc:	bne	2c350 <__assert_fail@plt+0x1b030>
   2c2d0:	mov	r0, #1
   2c2d4:	strb	r0, [r4, #24]
   2c2d8:	mov	r0, r5
   2c2dc:	bl	110e0 <mbsinit@plt>
   2c2e0:	cmp	r0, #0
   2c2e4:	movne	r0, #0
   2c2e8:	strbne	r0, [r4]
   2c2ec:	b	2c304 <__assert_fail@plt+0x1afe4>
   2c2f0:	ldr	r0, [r4, #16]
   2c2f4:	bl	11200 <strlen@plt>
   2c2f8:	str	r0, [r4, #20]
   2c2fc:	mov	r0, #0
   2c300:	strb	r0, [r4, #24]
   2c304:	mov	r0, #1
   2c308:	strb	r0, [r4, #12]
   2c30c:	pop	{r4, r5, r6, r7, fp, pc}
   2c310:	add	r5, r4, #4
   2c314:	mov	r0, r5
   2c318:	bl	110e0 <mbsinit@plt>
   2c31c:	cmp	r0, #0
   2c320:	beq	2c370 <__assert_fail@plt+0x1b050>
   2c324:	mov	r0, #1
   2c328:	strb	r0, [r4]
   2c32c:	b	2c21c <__assert_fail@plt+0x1aefc>
   2c330:	movw	r0, #7575	; 0x1d97
   2c334:	movw	r1, #7616	; 0x1dc0
   2c338:	movw	r3, #7632	; 0x1dd0
   2c33c:	mov	r2, #171	; 0xab
   2c340:	movt	r0, #3
   2c344:	movt	r1, #3
   2c348:	movt	r3, #3
   2c34c:	bl	11320 <__assert_fail@plt>
   2c350:	movw	r0, #7598	; 0x1dae
   2c354:	movw	r1, #7616	; 0x1dc0
   2c358:	movw	r3, #7632	; 0x1dd0
   2c35c:	mov	r2, #172	; 0xac
   2c360:	movt	r0, #3
   2c364:	movt	r1, #3
   2c368:	movt	r3, #3
   2c36c:	bl	11320 <__assert_fail@plt>
   2c370:	movw	r0, #7491	; 0x1d43
   2c374:	movw	r1, #7616	; 0x1dc0
   2c378:	movw	r3, #7632	; 0x1dd0
   2c37c:	mov	r2, #143	; 0x8f
   2c380:	movt	r0, #3
   2c384:	movt	r1, #3
   2c388:	movt	r3, #3
   2c38c:	bl	11320 <__assert_fail@plt>
   2c390:	ldr	r2, [r0, #16]
   2c394:	add	r1, r2, r1
   2c398:	str	r1, [r0, #16]
   2c39c:	bx	lr
   2c3a0:	push	{r4, r5, r6, sl, fp, lr}
   2c3a4:	add	fp, sp, #16
   2c3a8:	mov	r5, r1
   2c3ac:	ldrb	r1, [r1]
   2c3b0:	mov	r4, r0
   2c3b4:	strb	r1, [r0], #4
   2c3b8:	cmp	r1, #0
   2c3bc:	beq	2c3cc <__assert_fail@plt+0x1b0ac>
   2c3c0:	ldmib	r5, {r1, r2}
   2c3c4:	stm	r0, {r1, r2}
   2c3c8:	b	2c3d8 <__assert_fail@plt+0x1b0b8>
   2c3cc:	mov	r1, #0
   2c3d0:	str	r1, [r0]
   2c3d4:	str	r1, [r0, #4]
   2c3d8:	ldrb	r0, [r5, #12]
   2c3dc:	strb	r0, [r4, #12]
   2c3e0:	add	r0, r5, #32
   2c3e4:	ldr	r1, [r5, #16]
   2c3e8:	cmp	r1, r0
   2c3ec:	beq	2c3f8 <__assert_fail@plt+0x1b0d8>
   2c3f0:	mov	r6, r1
   2c3f4:	b	2c408 <__assert_fail@plt+0x1b0e8>
   2c3f8:	ldr	r2, [r5, #20]
   2c3fc:	add	r6, r4, #32
   2c400:	mov	r0, r6
   2c404:	bl	110d4 <memcpy@plt>
   2c408:	str	r6, [r4, #16]
   2c40c:	ldr	r0, [r5, #20]
   2c410:	str	r0, [r4, #20]
   2c414:	ldrb	r0, [r5, #24]
   2c418:	strb	r0, [r4, #24]
   2c41c:	cmp	r0, #0
   2c420:	ldrne	r0, [r5, #28]
   2c424:	strne	r0, [r4, #28]
   2c428:	pop	{r4, r5, r6, sl, fp, pc}
   2c42c:	cmp	r2, #0
   2c430:	beq	2c460 <__assert_fail@plt+0x1b140>
   2c434:	mvn	r3, #0
   2c438:	udiv	r3, r3, r2
   2c43c:	cmp	r3, r1
   2c440:	bcs	2c460 <__assert_fail@plt+0x1b140>
   2c444:	push	{fp, lr}
   2c448:	mov	fp, sp
   2c44c:	bl	11218 <__errno_location@plt>
   2c450:	mov	r1, #12
   2c454:	str	r1, [r0]
   2c458:	mov	r0, #0
   2c45c:	pop	{fp, pc}
   2c460:	mul	r1, r2, r1
   2c464:	b	2b1c0 <__assert_fail@plt+0x19ea0>
   2c468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c46c:	add	fp, sp, #28
   2c470:	sub	sp, sp, #44	; 0x2c
   2c474:	sub	sp, sp, #4096	; 0x1000
   2c478:	str	r3, [sp, #16]
   2c47c:	mov	r4, r1
   2c480:	mov	r6, r0
   2c484:	mov	r5, #0
   2c488:	str	r2, [sp, #20]
   2c48c:	mov	r0, r2
   2c490:	mov	r1, #0
   2c494:	mov	r2, #0
   2c498:	mov	r3, #0
   2c49c:	str	r5, [sp]
   2c4a0:	bl	11080 <iconv@plt>
   2c4a4:	cmp	r4, #0
   2c4a8:	str	r6, [sp, #8]
   2c4ac:	str	r6, [sp, #36]	; 0x24
   2c4b0:	str	r4, [sp, #32]
   2c4b4:	str	r4, [sp, #12]
   2c4b8:	beq	2c528 <__assert_fail@plt+0x1b208>
   2c4bc:	mov	r5, #0
   2c4c0:	add	r4, sp, #40	; 0x28
   2c4c4:	mov	r8, #4096	; 0x1000
   2c4c8:	add	sl, sp, #24
   2c4cc:	add	r9, sp, #36	; 0x24
   2c4d0:	add	r7, sp, #32
   2c4d4:	add	r6, sp, #28
   2c4d8:	ldr	r0, [sp, #20]
   2c4dc:	mov	r1, r9
   2c4e0:	mov	r2, r7
   2c4e4:	mov	r3, r6
   2c4e8:	str	r4, [sp, #28]
   2c4ec:	str	r8, [sp, #24]
   2c4f0:	str	sl, [sp]
   2c4f4:	bl	11080 <iconv@plt>
   2c4f8:	cmn	r0, #1
   2c4fc:	bne	2c510 <__assert_fail@plt+0x1b1f0>
   2c500:	bl	11218 <__errno_location@plt>
   2c504:	ldr	r0, [r0]
   2c508:	cmp	r0, #7
   2c50c:	bne	2c578 <__assert_fail@plt+0x1b258>
   2c510:	ldr	r1, [sp, #28]
   2c514:	sub	r0, r5, r4
   2c518:	add	r5, r0, r1
   2c51c:	ldr	r0, [sp, #32]
   2c520:	cmp	r0, #0
   2c524:	bne	2c4d8 <__assert_fail@plt+0x1b1b8>
   2c528:	mov	r0, #4096	; 0x1000
   2c52c:	add	r6, sp, #40	; 0x28
   2c530:	add	r3, sp, #28
   2c534:	mov	r1, #0
   2c538:	mov	r2, #0
   2c53c:	mov	r4, #0
   2c540:	str	r0, [sp, #24]
   2c544:	add	r0, sp, #24
   2c548:	str	r6, [sp, #28]
   2c54c:	str	r0, [sp]
   2c550:	ldr	r0, [sp, #20]
   2c554:	bl	11080 <iconv@plt>
   2c558:	cmn	r0, #1
   2c55c:	beq	2c570 <__assert_fail@plt+0x1b250>
   2c560:	ldr	r1, [sp, #28]
   2c564:	sub	r0, r5, r6
   2c568:	add	r5, r0, r1
   2c56c:	b	2c584 <__assert_fail@plt+0x1b264>
   2c570:	mov	r4, #1
   2c574:	b	2c584 <__assert_fail@plt+0x1b264>
   2c578:	cmp	r0, #22
   2c57c:	beq	2c528 <__assert_fail@plt+0x1b208>
   2c580:	mov	r4, #1
   2c584:	mvn	r9, #0
   2c588:	cmp	r4, #0
   2c58c:	beq	2c59c <__assert_fail@plt+0x1b27c>
   2c590:	mov	r0, r9
   2c594:	sub	sp, fp, #28
   2c598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c59c:	ldr	r1, [fp, #8]
   2c5a0:	cmp	r5, #0
   2c5a4:	beq	2c658 <__assert_fail@plt+0x1b338>
   2c5a8:	ldr	r0, [sp, #16]
   2c5ac:	ldr	r4, [r0]
   2c5b0:	cmp	r4, #0
   2c5b4:	beq	2c5c4 <__assert_fail@plt+0x1b2a4>
   2c5b8:	ldr	r0, [r1]
   2c5bc:	cmp	r0, r5
   2c5c0:	bcs	2c5d8 <__assert_fail@plt+0x1b2b8>
   2c5c4:	mov	r0, r5
   2c5c8:	bl	2b190 <__assert_fail@plt+0x19e70>
   2c5cc:	mov	r4, r0
   2c5d0:	cmp	r0, #0
   2c5d4:	beq	2c664 <__assert_fail@plt+0x1b344>
   2c5d8:	mov	r0, #0
   2c5dc:	mov	r1, #0
   2c5e0:	mov	r2, #0
   2c5e4:	mov	r3, #0
   2c5e8:	str	r0, [sp]
   2c5ec:	ldr	r0, [sp, #20]
   2c5f0:	bl	11080 <iconv@plt>
   2c5f4:	ldr	r0, [sp, #8]
   2c5f8:	mov	sl, r4
   2c5fc:	str	r4, [sp, #32]
   2c600:	str	r5, [sp, #28]
   2c604:	str	r0, [sp, #40]	; 0x28
   2c608:	ldr	r0, [sp, #12]
   2c60c:	cmp	r0, #0
   2c610:	str	r0, [sp, #36]	; 0x24
   2c614:	beq	2c684 <__assert_fail@plt+0x1b364>
   2c618:	add	r8, sp, #28
   2c61c:	add	r7, sp, #40	; 0x28
   2c620:	add	r6, sp, #36	; 0x24
   2c624:	add	r4, sp, #32
   2c628:	ldr	r0, [sp, #20]
   2c62c:	mov	r1, r7
   2c630:	mov	r2, r6
   2c634:	mov	r3, r4
   2c638:	str	r8, [sp]
   2c63c:	bl	11080 <iconv@plt>
   2c640:	cmn	r0, #1
   2c644:	beq	2c674 <__assert_fail@plt+0x1b354>
   2c648:	ldr	r0, [sp, #36]	; 0x24
   2c64c:	cmp	r0, #0
   2c650:	bne	2c628 <__assert_fail@plt+0x1b308>
   2c654:	b	2c684 <__assert_fail@plt+0x1b364>
   2c658:	mov	r9, #0
   2c65c:	str	r9, [r1]
   2c660:	b	2c590 <__assert_fail@plt+0x1b270>
   2c664:	bl	11218 <__errno_location@plt>
   2c668:	mov	r1, #12
   2c66c:	str	r1, [r0]
   2c670:	b	2c590 <__assert_fail@plt+0x1b270>
   2c674:	bl	11218 <__errno_location@plt>
   2c678:	ldr	r0, [r0]
   2c67c:	cmp	r0, #22
   2c680:	bne	2c6cc <__assert_fail@plt+0x1b3ac>
   2c684:	add	r0, sp, #28
   2c688:	add	r3, sp, #32
   2c68c:	mov	r1, #0
   2c690:	mov	r2, #0
   2c694:	str	r0, [sp]
   2c698:	ldr	r0, [sp, #20]
   2c69c:	bl	11080 <iconv@plt>
   2c6a0:	cmn	r0, #1
   2c6a4:	beq	2c6cc <__assert_fail@plt+0x1b3ac>
   2c6a8:	ldr	r0, [sp, #28]
   2c6ac:	cmp	r0, #0
   2c6b0:	bne	2c6e8 <__assert_fail@plt+0x1b3c8>
   2c6b4:	ldr	r0, [sp, #16]
   2c6b8:	mov	r9, #0
   2c6bc:	str	sl, [r0]
   2c6c0:	ldr	r0, [fp, #8]
   2c6c4:	str	r5, [r0]
   2c6c8:	b	2c590 <__assert_fail@plt+0x1b270>
   2c6cc:	ldr	r0, [sp, #16]
   2c6d0:	ldr	r0, [r0]
   2c6d4:	cmp	sl, r0
   2c6d8:	beq	2c590 <__assert_fail@plt+0x1b270>
   2c6dc:	mov	r0, sl
   2c6e0:	bl	1a3a4 <__assert_fail@plt+0x9084>
   2c6e4:	b	2c590 <__assert_fail@plt+0x1b270>
   2c6e8:	bl	11314 <abort@plt>
   2c6ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c6f0:	add	fp, sp, #28
   2c6f4:	sub	sp, sp, #20
   2c6f8:	mov	r8, r1
   2c6fc:	str	r0, [sp, #16]
   2c700:	bl	11200 <strlen@plt>
   2c704:	mov	r5, r0
   2c708:	cmp	r0, #4096	; 0x1000
   2c70c:	str	r0, [sp, #12]
   2c710:	lslcc	r5, r0, #4
   2c714:	add	r4, r5, #1
   2c718:	mov	r0, r4
   2c71c:	bl	2b190 <__assert_fail@plt+0x19e70>
   2c720:	cmp	r0, #0
   2c724:	beq	2c7dc <__assert_fail@plt+0x1b4bc>
   2c728:	mov	r6, r0
   2c72c:	mov	r0, #0
   2c730:	mov	r1, #0
   2c734:	mov	r2, #0
   2c738:	mov	r3, #0
   2c73c:	str	r0, [sp]
   2c740:	mov	r0, r8
   2c744:	bl	11080 <iconv@plt>
   2c748:	stmib	sp, {r5, r6}
   2c74c:	add	r5, sp, #4
   2c750:	add	r1, sp, #16
   2c754:	add	r2, sp, #12
   2c758:	add	r3, sp, #8
   2c75c:	mov	r0, r8
   2c760:	str	r5, [sp]
   2c764:	bl	11080 <iconv@plt>
   2c768:	cmn	r0, #1
   2c76c:	beq	2c7ec <__assert_fail@plt+0x1b4cc>
   2c770:	mov	r7, r6
   2c774:	add	r3, sp, #8
   2c778:	mov	r0, r8
   2c77c:	mov	r1, #0
   2c780:	mov	r2, #0
   2c784:	str	r5, [sp]
   2c788:	bl	11080 <iconv@plt>
   2c78c:	cmn	r0, #1
   2c790:	beq	2c86c <__assert_fail@plt+0x1b54c>
   2c794:	mov	r5, r7
   2c798:	ldr	r0, [sp, #8]
   2c79c:	add	r1, r0, #1
   2c7a0:	str	r1, [sp, #8]
   2c7a4:	mov	r1, #0
   2c7a8:	strb	r1, [r0]
   2c7ac:	ldr	r0, [sp, #8]
   2c7b0:	sub	r1, r0, r5
   2c7b4:	cmp	r1, r4
   2c7b8:	movcs	r0, r5
   2c7bc:	subcs	sp, fp, #28
   2c7c0:	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c7c4:	mov	r0, r5
   2c7c8:	bl	2b1c0 <__assert_fail@plt+0x19ea0>
   2c7cc:	cmp	r0, #0
   2c7d0:	moveq	r0, r5
   2c7d4:	sub	sp, fp, #28
   2c7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c7dc:	bl	11218 <__errno_location@plt>
   2c7e0:	mov	r1, #12
   2c7e4:	str	r1, [r0]
   2c7e8:	b	2c910 <__assert_fail@plt+0x1b5f0>
   2c7ec:	bl	11218 <__errno_location@plt>
   2c7f0:	mov	r9, r0
   2c7f4:	ldr	r0, [r9]
   2c7f8:	cmp	r0, #7
   2c7fc:	bne	2c91c <__assert_fail@plt+0x1b5fc>
   2c800:	cmp	r4, r4, lsl #1
   2c804:	bcs	2c8f0 <__assert_fail@plt+0x1b5d0>
   2c808:	ldr	sl, [sp, #8]
   2c80c:	lsl	r4, r4, #1
   2c810:	mov	r0, r6
   2c814:	mov	r1, r4
   2c818:	bl	2b1c0 <__assert_fail@plt+0x19ea0>
   2c81c:	cmp	r0, #0
   2c820:	beq	2c8f0 <__assert_fail@plt+0x1b5d0>
   2c824:	mov	r7, r0
   2c828:	sub	r0, sl, r6
   2c82c:	add	r5, sp, #4
   2c830:	add	r2, sp, #12
   2c834:	add	r3, sp, #8
   2c838:	add	r1, r7, r0
   2c83c:	mvn	r0, r0
   2c840:	str	r5, [sp]
   2c844:	add	r0, r4, r0
   2c848:	str	r1, [sp, #8]
   2c84c:	add	r1, sp, #16
   2c850:	str	r0, [sp, #4]
   2c854:	mov	r0, r8
   2c858:	bl	11080 <iconv@plt>
   2c85c:	cmn	r0, #1
   2c860:	mov	r6, r7
   2c864:	beq	2c7f4 <__assert_fail@plt+0x1b4d4>
   2c868:	b	2c774 <__assert_fail@plt+0x1b454>
   2c86c:	bl	11218 <__errno_location@plt>
   2c870:	mov	r6, r0
   2c874:	add	r9, sp, #8
   2c878:	ldr	r0, [r6]
   2c87c:	cmp	r0, #7
   2c880:	bne	2c904 <__assert_fail@plt+0x1b5e4>
   2c884:	cmp	r4, r4, lsl #1
   2c888:	bcs	2c8fc <__assert_fail@plt+0x1b5dc>
   2c88c:	ldr	sl, [sp, #8]
   2c890:	lsl	r4, r4, #1
   2c894:	mov	r0, r7
   2c898:	mov	r1, r4
   2c89c:	bl	2b1c0 <__assert_fail@plt+0x19ea0>
   2c8a0:	cmp	r0, #0
   2c8a4:	beq	2c8fc <__assert_fail@plt+0x1b5dc>
   2c8a8:	mov	r5, r0
   2c8ac:	sub	r0, sl, r7
   2c8b0:	mov	r2, #0
   2c8b4:	mov	r3, r9
   2c8b8:	add	r1, r5, r0
   2c8bc:	mvn	r0, r0
   2c8c0:	add	r0, r4, r0
   2c8c4:	str	r1, [sp, #8]
   2c8c8:	mov	r1, #0
   2c8cc:	str	r0, [sp, #4]
   2c8d0:	add	r0, sp, #4
   2c8d4:	str	r0, [sp]
   2c8d8:	mov	r0, r8
   2c8dc:	bl	11080 <iconv@plt>
   2c8e0:	cmn	r0, #1
   2c8e4:	mov	r7, r5
   2c8e8:	beq	2c878 <__assert_fail@plt+0x1b558>
   2c8ec:	b	2c798 <__assert_fail@plt+0x1b478>
   2c8f0:	mov	r0, #12
   2c8f4:	str	r0, [r9]
   2c8f8:	b	2c908 <__assert_fail@plt+0x1b5e8>
   2c8fc:	mov	r0, #12
   2c900:	str	r0, [r6]
   2c904:	mov	r6, r7
   2c908:	mov	r0, r6
   2c90c:	bl	1a3a4 <__assert_fail@plt+0x9084>
   2c910:	mov	r0, #0
   2c914:	sub	sp, fp, #28
   2c918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c91c:	cmp	r0, #22
   2c920:	beq	2c770 <__assert_fail@plt+0x1b450>
   2c924:	b	2c908 <__assert_fail@plt+0x1b5e8>
   2c928:	push	{r4, r5, r6, r7, fp, lr}
   2c92c:	add	fp, sp, #16
   2c930:	mov	r5, r0
   2c934:	ldrb	r0, [r0]
   2c938:	cmp	r0, #0
   2c93c:	beq	2c9b4 <__assert_fail@plt+0x1b694>
   2c940:	mov	r4, r1
   2c944:	mov	r0, r1
   2c948:	mov	r1, r2
   2c94c:	mov	r6, r2
   2c950:	bl	2b214 <__assert_fail@plt+0x19ef4>
   2c954:	cmp	r0, #0
   2c958:	beq	2c9b4 <__assert_fail@plt+0x1b694>
   2c95c:	mov	r0, r6
   2c960:	mov	r1, r4
   2c964:	bl	111a0 <iconv_open@plt>
   2c968:	mov	r4, #0
   2c96c:	cmn	r0, #1
   2c970:	beq	2c9c8 <__assert_fail@plt+0x1b6a8>
   2c974:	mov	r6, r0
   2c978:	mov	r0, r5
   2c97c:	mov	r1, r6
   2c980:	bl	2c6ec <__assert_fail@plt+0x1b3cc>
   2c984:	cmp	r0, #0
   2c988:	beq	2c9e8 <__assert_fail@plt+0x1b6c8>
   2c98c:	mov	r5, r0
   2c990:	mov	r0, r6
   2c994:	bl	11074 <iconv_close@plt>
   2c998:	cmn	r0, #1
   2c99c:	movgt	r0, r5
   2c9a0:	popgt	{r4, r5, r6, r7, fp, pc}
   2c9a4:	mov	r0, r5
   2c9a8:	bl	1a3a4 <__assert_fail@plt+0x9084>
   2c9ac:	mov	r0, r4
   2c9b0:	pop	{r4, r5, r6, r7, fp, pc}
   2c9b4:	mov	r0, r5
   2c9b8:	bl	11104 <strdup@plt>
   2c9bc:	mov	r4, r0
   2c9c0:	cmp	r0, #0
   2c9c4:	beq	2c9d0 <__assert_fail@plt+0x1b6b0>
   2c9c8:	mov	r0, r4
   2c9cc:	pop	{r4, r5, r6, r7, fp, pc}
   2c9d0:	bl	11218 <__errno_location@plt>
   2c9d4:	mov	r1, #12
   2c9d8:	mov	r4, #0
   2c9dc:	str	r1, [r0]
   2c9e0:	mov	r0, r4
   2c9e4:	pop	{r4, r5, r6, r7, fp, pc}
   2c9e8:	bl	11218 <__errno_location@plt>
   2c9ec:	ldr	r7, [r0]
   2c9f0:	mov	r5, r0
   2c9f4:	mov	r0, r6
   2c9f8:	bl	11074 <iconv_close@plt>
   2c9fc:	mov	r0, r4
   2ca00:	str	r7, [r5]
   2ca04:	pop	{r4, r5, r6, r7, fp, pc}
   2ca08:	push	{r4, r5, fp, lr}
   2ca0c:	add	fp, sp, #8
   2ca10:	mov	r4, r1
   2ca14:	mov	r1, #0
   2ca18:	mov	r5, r0
   2ca1c:	mov	r2, r4
   2ca20:	bl	11284 <memchr@plt>
   2ca24:	rsb	r1, r5, #1
   2ca28:	cmp	r0, #0
   2ca2c:	addne	r4, r1, r0
   2ca30:	mov	r0, r4
   2ca34:	pop	{r4, r5, fp, pc}
   2ca38:	push	{r4, sl, fp, lr}
   2ca3c:	add	fp, sp, #8
   2ca40:	sub	sp, sp, #264	; 0x108
   2ca44:	add	r1, sp, #7
   2ca48:	movw	r2, #257	; 0x101
   2ca4c:	bl	2cc98 <__assert_fail@plt+0x1b978>
   2ca50:	mov	r4, #0
   2ca54:	cmp	r0, #0
   2ca58:	bne	2ca90 <__assert_fail@plt+0x1b770>
   2ca5c:	movw	r1, #7680	; 0x1e00
   2ca60:	add	r0, sp, #7
   2ca64:	movt	r1, #3
   2ca68:	bl	1108c <strcmp@plt>
   2ca6c:	cmp	r0, #0
   2ca70:	beq	2ca90 <__assert_fail@plt+0x1b770>
   2ca74:	movw	r1, #7682	; 0x1e02
   2ca78:	add	r0, sp, #7
   2ca7c:	movt	r1, #3
   2ca80:	bl	1108c <strcmp@plt>
   2ca84:	mov	r4, r0
   2ca88:	cmp	r0, #0
   2ca8c:	movwne	r4, #1
   2ca90:	mov	r0, r4
   2ca94:	sub	sp, fp, #8
   2ca98:	pop	{r4, sl, fp, pc}
   2ca9c:	push	{r4, sl, fp, lr}
   2caa0:	add	fp, sp, #8
   2caa4:	mov	r4, #0
   2caa8:	adds	r0, r0, #16
   2caac:	adc	r1, r4, #0
   2cab0:	rsb	r2, r1, #0
   2cab4:	eors	r2, r2, r1
   2cab8:	movwne	r2, #1
   2cabc:	cmp	r0, #0
   2cac0:	blt	2cae0 <__assert_fail@plt+0x1b7c0>
   2cac4:	cmp	r2, #0
   2cac8:	asreq	r2, r0, #31
   2cacc:	eoreq	r3, r0, r0
   2cad0:	andeq	r2, r2, #1
   2cad4:	eoreq	r1, r1, r2
   2cad8:	orrseq	r1, r3, r1
   2cadc:	beq	2cae8 <__assert_fail@plt+0x1b7c8>
   2cae0:	mov	r0, r4
   2cae4:	pop	{r4, sl, fp, pc}
   2cae8:	bl	11194 <malloc@plt>
   2caec:	cmp	r0, #0
   2caf0:	addne	r4, r0, #8
   2caf4:	movne	r1, #8
   2caf8:	bfine	r4, r1, #0, #4
   2cafc:	subne	r0, r4, r0
   2cb00:	strbne	r0, [r4, #-1]
   2cb04:	mov	r0, r4
   2cb08:	pop	{r4, sl, fp, pc}
   2cb0c:	tst	r0, #7
   2cb10:	bne	2cb28 <__assert_fail@plt+0x1b808>
   2cb14:	tst	r0, #8
   2cb18:	bxeq	lr
   2cb1c:	ldrb	r1, [r0, #-1]
   2cb20:	sub	r0, r0, r1
   2cb24:	b	1a3a4 <__assert_fail@plt+0x9084>
   2cb28:	push	{fp, lr}
   2cb2c:	mov	fp, sp
   2cb30:	bl	11314 <abort@plt>
   2cb34:	push	{r4, sl, fp, lr}
   2cb38:	add	fp, sp, #8
   2cb3c:	mov	r4, r0
   2cb40:	bl	110a4 <wcwidth@plt>
   2cb44:	cmn	r0, #1
   2cb48:	popgt	{r4, sl, fp, pc}
   2cb4c:	mov	r0, r4
   2cb50:	bl	11128 <iswcntrl@plt>
   2cb54:	clz	r0, r0
   2cb58:	lsr	r0, r0, #5
   2cb5c:	pop	{r4, sl, fp, pc}
   2cb60:	push	{r4, r5, r6, sl, fp, lr}
   2cb64:	add	fp, sp, #16
   2cb68:	mov	r4, r0
   2cb6c:	mov	r0, r1
   2cb70:	mov	r5, r1
   2cb74:	ldr	r1, [r0], #16
   2cb78:	cmp	r1, r0
   2cb7c:	beq	2cb88 <__assert_fail@plt+0x1b868>
   2cb80:	mov	r6, r1
   2cb84:	b	2cb98 <__assert_fail@plt+0x1b878>
   2cb88:	ldr	r2, [r5, #4]
   2cb8c:	add	r6, r4, #16
   2cb90:	mov	r0, r6
   2cb94:	bl	110d4 <memcpy@plt>
   2cb98:	str	r6, [r4]
   2cb9c:	ldr	r0, [r5, #4]
   2cba0:	str	r0, [r4, #4]
   2cba4:	ldrb	r0, [r5, #8]
   2cba8:	strb	r0, [r4, #8]
   2cbac:	cmp	r0, #0
   2cbb0:	ldrne	r0, [r5, #12]
   2cbb4:	strne	r0, [r4, #12]
   2cbb8:	pop	{r4, r5, r6, sl, fp, pc}
   2cbbc:	movw	r2, #7688	; 0x1e08
   2cbc0:	ubfx	r1, r0, #5, #3
   2cbc4:	and	r0, r0, #31
   2cbc8:	movt	r2, #3
   2cbcc:	ldr	r1, [r2, r1, lsl #2]
   2cbd0:	mov	r2, #1
   2cbd4:	and	r0, r1, r2, lsl r0
   2cbd8:	cmp	r0, #0
   2cbdc:	movwne	r0, #1
   2cbe0:	bx	lr
   2cbe4:	push	{r4, r5, r6, sl, fp, lr}
   2cbe8:	add	fp, sp, #16
   2cbec:	sub	sp, sp, #56	; 0x38
   2cbf0:	mov	r5, r0
   2cbf4:	bl	11164 <__ctype_get_mb_cur_max@plt>
   2cbf8:	cmp	r0, #2
   2cbfc:	bcc	2cc88 <__assert_fail@plt+0x1b968>
   2cc00:	mov	r4, #0
   2cc04:	mov	r0, sp
   2cc08:	str	r4, [sp, #8]
   2cc0c:	str	r4, [sp, #4]
   2cc10:	strb	r4, [sp]
   2cc14:	str	r5, [sp, #16]
   2cc18:	strb	r4, [sp, #12]
   2cc1c:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2cc20:	ldrb	r0, [sp, #24]
   2cc24:	cmp	r0, #0
   2cc28:	beq	2cc38 <__assert_fail@plt+0x1b918>
   2cc2c:	ldr	r0, [sp, #28]
   2cc30:	cmp	r0, #0
   2cc34:	beq	2cc7c <__assert_fail@plt+0x1b95c>
   2cc38:	mov	r6, #0
   2cc3c:	mov	r5, sp
   2cc40:	mov	r4, #0
   2cc44:	strb	r6, [sp, #12]
   2cc48:	ldr	r0, [sp, #16]
   2cc4c:	ldr	r1, [sp, #20]
   2cc50:	add	r0, r0, r1
   2cc54:	str	r0, [sp, #16]
   2cc58:	mov	r0, r5
   2cc5c:	bl	2c1f0 <__assert_fail@plt+0x1aed0>
   2cc60:	ldrb	r1, [sp, #24]
   2cc64:	ldr	r0, [sp, #28]
   2cc68:	add	r4, r4, #1
   2cc6c:	cmp	r1, #0
   2cc70:	beq	2cc44 <__assert_fail@plt+0x1b924>
   2cc74:	cmp	r0, #0
   2cc78:	bne	2cc44 <__assert_fail@plt+0x1b924>
   2cc7c:	mov	r0, r4
   2cc80:	sub	sp, fp, #16
   2cc84:	pop	{r4, r5, r6, sl, fp, pc}
   2cc88:	mov	r0, r5
   2cc8c:	sub	sp, fp, #16
   2cc90:	pop	{r4, r5, r6, sl, fp, lr}
   2cc94:	b	11200 <strlen@plt>
   2cc98:	push	{r4, r5, r6, r7, fp, lr}
   2cc9c:	add	fp, sp, #16
   2cca0:	mov	r4, r1
   2cca4:	mov	r1, #0
   2cca8:	mov	r6, r2
   2ccac:	bl	112cc <setlocale@plt>
   2ccb0:	cmp	r0, #0
   2ccb4:	beq	2cce4 <__assert_fail@plt+0x1b9c4>
   2ccb8:	mov	r7, r0
   2ccbc:	bl	11200 <strlen@plt>
   2ccc0:	cmp	r0, r6
   2ccc4:	bcs	2cd04 <__assert_fail@plt+0x1b9e4>
   2ccc8:	add	r2, r0, #1
   2cccc:	mov	r0, r4
   2ccd0:	mov	r1, r7
   2ccd4:	bl	110d4 <memcpy@plt>
   2ccd8:	mov	r5, #0
   2ccdc:	mov	r0, r5
   2cce0:	pop	{r4, r5, r6, r7, fp, pc}
   2cce4:	cmp	r6, #0
   2cce8:	mov	r5, #22
   2ccec:	movne	r0, #0
   2ccf0:	strbne	r0, [r4]
   2ccf4:	movne	r0, r5
   2ccf8:	popne	{r4, r5, r6, r7, fp, pc}
   2ccfc:	mov	r0, r5
   2cd00:	pop	{r4, r5, r6, r7, fp, pc}
   2cd04:	mov	r5, #34	; 0x22
   2cd08:	cmp	r6, #0
   2cd0c:	beq	2cd2c <__assert_fail@plt+0x1ba0c>
   2cd10:	sub	r6, r6, #1
   2cd14:	mov	r0, r4
   2cd18:	mov	r1, r7
   2cd1c:	mov	r2, r6
   2cd20:	bl	110d4 <memcpy@plt>
   2cd24:	mov	r0, #0
   2cd28:	strb	r0, [r4, r6]
   2cd2c:	mov	r0, r5
   2cd30:	pop	{r4, r5, r6, r7, fp, pc}
   2cd34:	mov	r1, #0
   2cd38:	b	112cc <setlocale@plt>
   2cd3c:	cmp	r3, #0
   2cd40:	cmpeq	r2, #0
   2cd44:	bne	2cd5c <__assert_fail@plt+0x1ba3c>
   2cd48:	cmp	r1, #0
   2cd4c:	cmpeq	r0, #0
   2cd50:	mvnne	r1, #0
   2cd54:	mvnne	r0, #0
   2cd58:	b	2cd78 <__assert_fail@plt+0x1ba58>
   2cd5c:	sub	sp, sp, #8
   2cd60:	push	{sp, lr}
   2cd64:	bl	2cd88 <__assert_fail@plt+0x1ba68>
   2cd68:	ldr	lr, [sp, #4]
   2cd6c:	add	sp, sp, #8
   2cd70:	pop	{r2, r3}
   2cd74:	bx	lr
   2cd78:	push	{r1, lr}
   2cd7c:	mov	r0, #8
   2cd80:	bl	11068 <raise@plt>
   2cd84:	pop	{r1, pc}
   2cd88:	cmp	r1, r3
   2cd8c:	cmpeq	r0, r2
   2cd90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd94:	mov	r4, r0
   2cd98:	movcc	r0, #0
   2cd9c:	mov	r5, r1
   2cda0:	ldr	lr, [sp, #36]	; 0x24
   2cda4:	movcc	r1, r0
   2cda8:	bcc	2cea4 <__assert_fail@plt+0x1bb84>
   2cdac:	cmp	r3, #0
   2cdb0:	clzeq	ip, r2
   2cdb4:	clzne	ip, r3
   2cdb8:	addeq	ip, ip, #32
   2cdbc:	cmp	r5, #0
   2cdc0:	clzeq	r1, r4
   2cdc4:	addeq	r1, r1, #32
   2cdc8:	clzne	r1, r5
   2cdcc:	sub	ip, ip, r1
   2cdd0:	sub	sl, ip, #32
   2cdd4:	lsl	r9, r3, ip
   2cdd8:	rsb	fp, ip, #32
   2cddc:	orr	r9, r9, r2, lsl sl
   2cde0:	orr	r9, r9, r2, lsr fp
   2cde4:	lsl	r8, r2, ip
   2cde8:	cmp	r5, r9
   2cdec:	cmpeq	r4, r8
   2cdf0:	movcc	r0, #0
   2cdf4:	movcc	r1, r0
   2cdf8:	bcc	2ce14 <__assert_fail@plt+0x1baf4>
   2cdfc:	mov	r0, #1
   2ce00:	subs	r4, r4, r8
   2ce04:	lsl	r1, r0, sl
   2ce08:	orr	r1, r1, r0, lsr fp
   2ce0c:	lsl	r0, r0, ip
   2ce10:	sbc	r5, r5, r9
   2ce14:	cmp	ip, #0
   2ce18:	beq	2cea4 <__assert_fail@plt+0x1bb84>
   2ce1c:	lsr	r6, r8, #1
   2ce20:	orr	r6, r6, r9, lsl #31
   2ce24:	lsr	r7, r9, #1
   2ce28:	mov	r2, ip
   2ce2c:	b	2ce50 <__assert_fail@plt+0x1bb30>
   2ce30:	subs	r3, r4, r6
   2ce34:	sbc	r8, r5, r7
   2ce38:	adds	r3, r3, r3
   2ce3c:	adc	r8, r8, r8
   2ce40:	adds	r4, r3, #1
   2ce44:	adc	r5, r8, #0
   2ce48:	subs	r2, r2, #1
   2ce4c:	beq	2ce6c <__assert_fail@plt+0x1bb4c>
   2ce50:	cmp	r5, r7
   2ce54:	cmpeq	r4, r6
   2ce58:	bcs	2ce30 <__assert_fail@plt+0x1bb10>
   2ce5c:	adds	r4, r4, r4
   2ce60:	adc	r5, r5, r5
   2ce64:	subs	r2, r2, #1
   2ce68:	bne	2ce50 <__assert_fail@plt+0x1bb30>
   2ce6c:	lsr	r3, r4, ip
   2ce70:	orr	r3, r3, r5, lsl fp
   2ce74:	lsr	r2, r5, ip
   2ce78:	orr	r3, r3, r5, lsr sl
   2ce7c:	adds	r0, r0, r4
   2ce80:	mov	r4, r3
   2ce84:	lsl	r3, r2, ip
   2ce88:	orr	r3, r3, r4, lsl sl
   2ce8c:	lsl	ip, r4, ip
   2ce90:	orr	r3, r3, r4, lsr fp
   2ce94:	adc	r1, r1, r5
   2ce98:	subs	r0, r0, ip
   2ce9c:	mov	r5, r2
   2cea0:	sbc	r1, r1, r3
   2cea4:	cmp	lr, #0
   2cea8:	strdne	r4, [lr]
   2ceac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ceb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ceb4:	mov	r7, r0
   2ceb8:	ldr	r6, [pc, #72]	; 2cf08 <__assert_fail@plt+0x1bbe8>
   2cebc:	ldr	r5, [pc, #72]	; 2cf0c <__assert_fail@plt+0x1bbec>
   2cec0:	add	r6, pc, r6
   2cec4:	add	r5, pc, r5
   2cec8:	sub	r6, r6, r5
   2cecc:	mov	r8, r1
   2ced0:	mov	r9, r2
   2ced4:	bl	11030 <calloc@plt-0x20>
   2ced8:	asrs	r6, r6, #2
   2cedc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cee0:	mov	r4, #0
   2cee4:	add	r4, r4, #1
   2cee8:	ldr	r3, [r5], #4
   2ceec:	mov	r2, r9
   2cef0:	mov	r1, r8
   2cef4:	mov	r0, r7
   2cef8:	blx	r3
   2cefc:	cmp	r6, r4
   2cf00:	bne	2cee4 <__assert_fail@plt+0x1bbc4>
   2cf04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cf08:	andeq	r5, r1, r4, asr #32
   2cf0c:	andeq	r5, r1, ip, lsr r0
   2cf10:	bx	lr
   2cf14:	ldr	r3, [pc, #12]	; 2cf28 <__assert_fail@plt+0x1bc08>
   2cf18:	mov	r1, #0
   2cf1c:	add	r3, pc, r3
   2cf20:	ldr	r2, [r3]
   2cf24:	b	1123c <__cxa_atexit@plt>
   2cf28:	andeq	r5, r1, r8, ror #3

Disassembly of section .fini:

0002cf2c <.fini>:
   2cf2c:	push	{r3, lr}
   2cf30:	pop	{r3, pc}
