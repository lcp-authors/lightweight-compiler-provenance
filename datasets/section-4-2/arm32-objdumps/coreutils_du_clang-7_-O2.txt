
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

0001197c <.init>:
   1197c:	push	{r3, lr}
   11980:	bl	11edc <__assert_fail@plt+0x48>
   11984:	pop	{r3, pc}

Disassembly of section .plt:

00011988 <pthread_mutex_unlock@plt-0x14>:
   11988:	push	{lr}		; (str lr, [sp, #-4]!)
   1198c:	ldr	lr, [pc, #4]	; 11998 <pthread_mutex_unlock@plt-0x4>
   11990:	add	lr, pc, lr
   11994:	ldr	pc, [lr, #8]!
   11998:	andeq	r6, r3, r8, ror #12

0001199c <pthread_mutex_unlock@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #221184	; 0x36000
   119a4:	ldr	pc, [ip, #1640]!	; 0x668

000119a8 <fstatfs64@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #221184	; 0x36000
   119b0:	ldr	pc, [ip, #1632]!	; 0x660

000119b4 <calloc@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #221184	; 0x36000
   119bc:	ldr	pc, [ip, #1624]!	; 0x658

000119c0 <fputs_unlocked@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #221184	; 0x36000
   119c8:	ldr	pc, [ip, #1616]!	; 0x650

000119cc <wctype@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #221184	; 0x36000
   119d4:	ldr	pc, [ip, #1608]!	; 0x648

000119d8 <raise@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #221184	; 0x36000
   119e0:	ldr	pc, [ip, #1600]!	; 0x640

000119e4 <wcrtomb@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #221184	; 0x36000
   119ec:	ldr	pc, [ip, #1592]!	; 0x638

000119f0 <gmtime_r@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #221184	; 0x36000
   119f8:	ldr	pc, [ip, #1584]!	; 0x630

000119fc <__getdelim@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #221184	; 0x36000
   11a04:	ldr	pc, [ip, #1576]!	; 0x628

00011a08 <iswctype@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #221184	; 0x36000
   11a10:	ldr	pc, [ip, #1568]!	; 0x620

00011a14 <strcmp@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #221184	; 0x36000
   11a1c:	ldr	pc, [ip, #1560]!	; 0x618

00011a20 <pthread_mutex_destroy@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #221184	; 0x36000
   11a28:	ldr	pc, [ip, #1552]!	; 0x610

00011a2c <mktime@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #221184	; 0x36000
   11a34:	ldr	pc, [ip, #1544]!	; 0x608

00011a38 <fflush@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #221184	; 0x36000
   11a40:	ldr	pc, [ip, #1536]!	; 0x600

00011a44 <wcwidth@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #221184	; 0x36000
   11a4c:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a50 <memmove@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #221184	; 0x36000
   11a58:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a5c <free@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #221184	; 0x36000
   11a64:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a68 <pthread_mutex_lock@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #221184	; 0x36000
   11a70:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a74 <ferror@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #221184	; 0x36000
   11a7c:	ldr	pc, [ip, #1496]!	; 0x5d8

00011a80 <_exit@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #221184	; 0x36000
   11a88:	ldr	pc, [ip, #1488]!	; 0x5d0

00011a8c <memcpy@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #221184	; 0x36000
   11a94:	ldr	pc, [ip, #1480]!	; 0x5c8

00011a98 <pthread_mutex_init@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #221184	; 0x36000
   11aa0:	ldr	pc, [ip, #1472]!	; 0x5c0

00011aa4 <__strtoull_internal@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #221184	; 0x36000
   11aac:	ldr	pc, [ip, #1464]!	; 0x5b8

00011ab0 <towlower@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #221184	; 0x36000
   11ab8:	ldr	pc, [ip, #1456]!	; 0x5b0

00011abc <mbsinit@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #221184	; 0x36000
   11ac4:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ac8 <memcmp@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #221184	; 0x36000
   11ad0:	ldr	pc, [ip, #1440]!	; 0x5a0

00011ad4 <dcgettext@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #221184	; 0x36000
   11adc:	ldr	pc, [ip, #1432]!	; 0x598

00011ae0 <dup2@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #221184	; 0x36000
   11ae8:	ldr	pc, [ip, #1424]!	; 0x590

00011aec <realloc@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #221184	; 0x36000
   11af4:	ldr	pc, [ip, #1416]!	; 0x588

00011af8 <localtime_r@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #221184	; 0x36000
   11b00:	ldr	pc, [ip, #1408]!	; 0x580

00011b04 <textdomain@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #221184	; 0x36000
   11b0c:	ldr	pc, [ip, #1400]!	; 0x578

00011b10 <iswcntrl@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #221184	; 0x36000
   11b18:	ldr	pc, [ip, #1392]!	; 0x570

00011b1c <__fxstatat64@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #221184	; 0x36000
   11b24:	ldr	pc, [ip, #1384]!	; 0x568

00011b28 <fflush_unlocked@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #221184	; 0x36000
   11b30:	ldr	pc, [ip, #1376]!	; 0x560

00011b34 <iswprint@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #221184	; 0x36000
   11b3c:	ldr	pc, [ip, #1368]!	; 0x558

00011b40 <tzset@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #221184	; 0x36000
   11b48:	ldr	pc, [ip, #1360]!	; 0x550

00011b4c <__fxstat64@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #221184	; 0x36000
   11b54:	ldr	pc, [ip, #1352]!	; 0x548

00011b58 <fwrite@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #221184	; 0x36000
   11b60:	ldr	pc, [ip, #1344]!	; 0x540

00011b64 <lseek64@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #221184	; 0x36000
   11b6c:	ldr	pc, [ip, #1336]!	; 0x538

00011b70 <__ctype_get_mb_cur_max@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #221184	; 0x36000
   11b78:	ldr	pc, [ip, #1328]!	; 0x530

00011b7c <hasmntopt@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #221184	; 0x36000
   11b84:	ldr	pc, [ip, #1320]!	; 0x528

00011b88 <strcpy@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #221184	; 0x36000
   11b90:	ldr	pc, [ip, #1312]!	; 0x520

00011b94 <__fpending@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #221184	; 0x36000
   11b9c:	ldr	pc, [ip, #1304]!	; 0x518

00011ba0 <mbrtowc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #221184	; 0x36000
   11ba8:	ldr	pc, [ip, #1296]!	; 0x510

00011bac <error@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #221184	; 0x36000
   11bb4:	ldr	pc, [ip, #1288]!	; 0x508

00011bb8 <getmntent@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #221184	; 0x36000
   11bc0:	ldr	pc, [ip, #1280]!	; 0x500

00011bc4 <fnmatch@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #221184	; 0x36000
   11bcc:	ldr	pc, [ip, #1272]!	; 0x4f8

00011bd0 <open64@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #221184	; 0x36000
   11bd8:	ldr	pc, [ip, #1264]!	; 0x4f0

00011bdc <getenv@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #221184	; 0x36000
   11be4:	ldr	pc, [ip, #1256]!	; 0x4e8

00011be8 <malloc@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #221184	; 0x36000
   11bf0:	ldr	pc, [ip, #1248]!	; 0x4e0

00011bf4 <__libc_start_main@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #221184	; 0x36000
   11bfc:	ldr	pc, [ip, #1240]!	; 0x4d8

00011c00 <strftime@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #221184	; 0x36000
   11c08:	ldr	pc, [ip, #1232]!	; 0x4d0

00011c0c <__freading@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #221184	; 0x36000
   11c14:	ldr	pc, [ip, #1224]!	; 0x4c8

00011c18 <__ctype_tolower_loc@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #221184	; 0x36000
   11c20:	ldr	pc, [ip, #1216]!	; 0x4c0

00011c24 <__ctype_toupper_loc@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #221184	; 0x36000
   11c2c:	ldr	pc, [ip, #1208]!	; 0x4b8

00011c30 <__gmon_start__@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #221184	; 0x36000
   11c38:	ldr	pc, [ip, #1200]!	; 0x4b0

00011c3c <freopen64@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #221184	; 0x36000
   11c44:	ldr	pc, [ip, #1192]!	; 0x4a8

00011c48 <getopt_long@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #221184	; 0x36000
   11c50:	ldr	pc, [ip, #1184]!	; 0x4a0

00011c54 <__ctype_b_loc@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #221184	; 0x36000
   11c5c:	ldr	pc, [ip, #1176]!	; 0x498

00011c60 <exit@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #221184	; 0x36000
   11c68:	ldr	pc, [ip, #1168]!	; 0x490

00011c6c <feof@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #221184	; 0x36000
   11c74:	ldr	pc, [ip, #1160]!	; 0x488

00011c78 <strlen@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #221184	; 0x36000
   11c80:	ldr	pc, [ip, #1152]!	; 0x480

00011c84 <strchr@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #221184	; 0x36000
   11c8c:	ldr	pc, [ip, #1144]!	; 0x478

00011c90 <setenv@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #221184	; 0x36000
   11c98:	ldr	pc, [ip, #1136]!	; 0x470

00011c9c <openat64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #221184	; 0x36000
   11ca4:	ldr	pc, [ip, #1128]!	; 0x468

00011ca8 <__errno_location@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #221184	; 0x36000
   11cb0:	ldr	pc, [ip, #1120]!	; 0x460

00011cb4 <iswalnum@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #221184	; 0x36000
   11cbc:	ldr	pc, [ip, #1112]!	; 0x458

00011cc0 <__sprintf_chk@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #221184	; 0x36000
   11cc8:	ldr	pc, [ip, #1104]!	; 0x450

00011ccc <__cxa_atexit@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #221184	; 0x36000
   11cd4:	ldr	pc, [ip, #1096]!	; 0x448

00011cd8 <memset@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #221184	; 0x36000
   11ce0:	ldr	pc, [ip, #1088]!	; 0x440

00011ce4 <btowc@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #221184	; 0x36000
   11cec:	ldr	pc, [ip, #1080]!	; 0x438

00011cf0 <__printf_chk@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #221184	; 0x36000
   11cf8:	ldr	pc, [ip, #1072]!	; 0x430

00011cfc <fileno@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #221184	; 0x36000
   11d04:	ldr	pc, [ip, #1064]!	; 0x428

00011d08 <__fprintf_chk@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #221184	; 0x36000
   11d10:	ldr	pc, [ip, #1056]!	; 0x420

00011d14 <memchr@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #221184	; 0x36000
   11d1c:	ldr	pc, [ip, #1048]!	; 0x418

00011d20 <fclose@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #221184	; 0x36000
   11d28:	ldr	pc, [ip, #1040]!	; 0x410

00011d2c <fseeko64@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #221184	; 0x36000
   11d34:	ldr	pc, [ip, #1032]!	; 0x408

00011d38 <endmntent@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #221184	; 0x36000
   11d40:	ldr	pc, [ip, #1024]!	; 0x400

00011d44 <fcntl64@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #221184	; 0x36000
   11d4c:	ldr	pc, [ip, #1016]!	; 0x3f8

00011d50 <__overflow@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #221184	; 0x36000
   11d58:	ldr	pc, [ip, #1008]!	; 0x3f0

00011d5c <setlocale@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #221184	; 0x36000
   11d64:	ldr	pc, [ip, #1000]!	; 0x3e8

00011d68 <strrchr@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #221184	; 0x36000
   11d70:	ldr	pc, [ip, #992]!	; 0x3e0

00011d74 <nl_langinfo@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #221184	; 0x36000
   11d7c:	ldr	pc, [ip, #984]!	; 0x3d8

00011d80 <fputc@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #221184	; 0x36000
   11d88:	ldr	pc, [ip, #976]!	; 0x3d0

00011d8c <sscanf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #221184	; 0x36000
   11d94:	ldr	pc, [ip, #968]!	; 0x3c8

00011d98 <localeconv@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #221184	; 0x36000
   11da0:	ldr	pc, [ip, #960]!	; 0x3c0

00011da4 <readdir64@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #221184	; 0x36000
   11dac:	ldr	pc, [ip, #952]!	; 0x3b8

00011db0 <fdopendir@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #221184	; 0x36000
   11db8:	ldr	pc, [ip, #944]!	; 0x3b0

00011dbc <timegm@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #221184	; 0x36000
   11dc4:	ldr	pc, [ip, #936]!	; 0x3a8

00011dc8 <dirfd@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #221184	; 0x36000
   11dd0:	ldr	pc, [ip, #928]!	; 0x3a0

00011dd4 <fchdir@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #221184	; 0x36000
   11ddc:	ldr	pc, [ip, #920]!	; 0x398

00011de0 <__strtoll_internal@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #221184	; 0x36000
   11de8:	ldr	pc, [ip, #912]!	; 0x390

00011dec <fopen64@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #221184	; 0x36000
   11df4:	ldr	pc, [ip, #904]!	; 0x388

00011df8 <qsort@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #221184	; 0x36000
   11e00:	ldr	pc, [ip, #896]!	; 0x380

00011e04 <setmntent@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #221184	; 0x36000
   11e0c:	ldr	pc, [ip, #888]!	; 0x378

00011e10 <bindtextdomain@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #221184	; 0x36000
   11e18:	ldr	pc, [ip, #880]!	; 0x370

00011e1c <getdelim@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #221184	; 0x36000
   11e24:	ldr	pc, [ip, #872]!	; 0x368

00011e28 <__xstat64@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #221184	; 0x36000
   11e30:	ldr	pc, [ip, #864]!	; 0x360

00011e34 <unsetenv@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #221184	; 0x36000
   11e3c:	ldr	pc, [ip, #856]!	; 0x358

00011e40 <towupper@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #221184	; 0x36000
   11e48:	ldr	pc, [ip, #848]!	; 0x350

00011e4c <strncmp@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #221184	; 0x36000
   11e54:	ldr	pc, [ip, #840]!	; 0x348

00011e58 <abort@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #221184	; 0x36000
   11e60:	ldr	pc, [ip, #832]!	; 0x340

00011e64 <getc@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #221184	; 0x36000
   11e6c:	ldr	pc, [ip, #824]!	; 0x338

00011e70 <close@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #221184	; 0x36000
   11e78:	ldr	pc, [ip, #816]!	; 0x330

00011e7c <__lxstat64@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #221184	; 0x36000
   11e84:	ldr	pc, [ip, #808]!	; 0x328

00011e88 <closedir@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #221184	; 0x36000
   11e90:	ldr	pc, [ip, #800]!	; 0x320

00011e94 <__assert_fail@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #221184	; 0x36000
   11e9c:	ldr	pc, [ip, #792]!	; 0x318

Disassembly of section .text:

00011ea0 <.text>:
   11ea0:	mov	fp, #0
   11ea4:	mov	lr, #0
   11ea8:	pop	{r1}		; (ldr r1, [sp], #4)
   11eac:	mov	r2, sp
   11eb0:	push	{r2}		; (str r2, [sp, #-4]!)
   11eb4:	push	{r0}		; (str r0, [sp, #-4]!)
   11eb8:	ldr	ip, [pc, #16]	; 11ed0 <__assert_fail@plt+0x3c>
   11ebc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ec0:	ldr	r0, [pc, #12]	; 11ed4 <__assert_fail@plt+0x40>
   11ec4:	ldr	r3, [pc, #12]	; 11ed8 <__assert_fail@plt+0x44>
   11ec8:	bl	11bf4 <__libc_start_main@plt>
   11ecc:	bl	11e58 <abort@plt>
   11ed0:	andeq	r5, r3, r8, lsl #10
   11ed4:	strdeq	r2, [r1], -ip
   11ed8:	andeq	r5, r3, r8, lsr #9
   11edc:	ldr	r3, [pc, #20]	; 11ef8 <__assert_fail@plt+0x64>
   11ee0:	ldr	r2, [pc, #20]	; 11efc <__assert_fail@plt+0x68>
   11ee4:	add	r3, pc, r3
   11ee8:	ldr	r2, [r3, r2]
   11eec:	cmp	r2, #0
   11ef0:	bxeq	lr
   11ef4:	b	11c30 <__gmon_start__@plt>
   11ef8:	andeq	r6, r3, r4, lsl r1
   11efc:			; <UNDEFINED> instruction: 0x000001b8
   11f00:	ldr	r0, [pc, #24]	; 11f20 <__assert_fail@plt+0x8c>
   11f04:	ldr	r3, [pc, #24]	; 11f24 <__assert_fail@plt+0x90>
   11f08:	cmp	r3, r0
   11f0c:	bxeq	lr
   11f10:	ldr	r3, [pc, #16]	; 11f28 <__assert_fail@plt+0x94>
   11f14:	cmp	r3, #0
   11f18:	bxeq	lr
   11f1c:	bx	r3
   11f20:	andeq	r8, r4, r8, lsl r2
   11f24:	andeq	r8, r4, r8, lsl r2
   11f28:	andeq	r0, r0, r0
   11f2c:	ldr	r0, [pc, #36]	; 11f58 <__assert_fail@plt+0xc4>
   11f30:	ldr	r1, [pc, #36]	; 11f5c <__assert_fail@plt+0xc8>
   11f34:	sub	r1, r1, r0
   11f38:	asr	r1, r1, #2
   11f3c:	add	r1, r1, r1, lsr #31
   11f40:	asrs	r1, r1, #1
   11f44:	bxeq	lr
   11f48:	ldr	r3, [pc, #16]	; 11f60 <__assert_fail@plt+0xcc>
   11f4c:	cmp	r3, #0
   11f50:	bxeq	lr
   11f54:	bx	r3
   11f58:	andeq	r8, r4, r8, lsl r2
   11f5c:	andeq	r8, r4, r8, lsl r2
   11f60:	andeq	r0, r0, r0
   11f64:	push	{r4, lr}
   11f68:	ldr	r4, [pc, #24]	; 11f88 <__assert_fail@plt+0xf4>
   11f6c:	ldrb	r3, [r4]
   11f70:	cmp	r3, #0
   11f74:	popne	{r4, pc}
   11f78:	bl	11f00 <__assert_fail@plt+0x6c>
   11f7c:	mov	r3, #1
   11f80:	strb	r3, [r4]
   11f84:	pop	{r4, pc}
   11f88:	andeq	r8, r4, ip, lsr r2
   11f8c:	b	11f2c <__assert_fail@plt+0x98>
   11f90:	push	{fp, lr}
   11f94:	mov	fp, sp
   11f98:	sub	sp, sp, #56	; 0x38
   11f9c:	mov	r4, r0
   11fa0:	cmp	r0, #0
   11fa4:	bne	122b8 <__assert_fail@plt+0x424>
   11fa8:	movw	r1, #21851	; 0x555b
   11fac:	mov	r0, #0
   11fb0:	mov	r2, #5
   11fb4:	movt	r1, #3
   11fb8:	bl	11ad4 <dcgettext@plt>
   11fbc:	mov	r1, r0
   11fc0:	movw	r0, #33460	; 0x82b4
   11fc4:	movt	r0, #4
   11fc8:	ldr	r2, [r0]
   11fcc:	mov	r0, #1
   11fd0:	mov	r3, r2
   11fd4:	bl	11cf0 <__printf_chk@plt>
   11fd8:	movw	r1, #21922	; 0x55a2
   11fdc:	mov	r0, #0
   11fe0:	mov	r2, #5
   11fe4:	movt	r1, #3
   11fe8:	bl	11ad4 <dcgettext@plt>
   11fec:	movw	r7, #33332	; 0x8234
   11ff0:	movt	r7, #4
   11ff4:	ldr	r1, [r7]
   11ff8:	bl	119c0 <fputs_unlocked@plt>
   11ffc:	movw	r1, #25787	; 0x64bb
   12000:	mov	r0, #0
   12004:	mov	r2, #5
   12008:	movt	r1, #3
   1200c:	bl	11ad4 <dcgettext@plt>
   12010:	ldr	r1, [r7]
   12014:	bl	119c0 <fputs_unlocked@plt>
   12018:	movw	r1, #21996	; 0x55ec
   1201c:	mov	r0, #0
   12020:	mov	r2, #5
   12024:	movt	r1, #3
   12028:	bl	11ad4 <dcgettext@plt>
   1202c:	ldr	r1, [r7]
   12030:	bl	119c0 <fputs_unlocked@plt>
   12034:	movw	r1, #22438	; 0x57a6
   12038:	mov	r0, #0
   1203c:	mov	r2, #5
   12040:	movt	r1, #3
   12044:	bl	11ad4 <dcgettext@plt>
   12048:	ldr	r1, [r7]
   1204c:	bl	119c0 <fputs_unlocked@plt>
   12050:	movw	r1, #23130	; 0x5a5a
   12054:	mov	r0, #0
   12058:	mov	r2, #5
   1205c:	movt	r1, #3
   12060:	bl	11ad4 <dcgettext@plt>
   12064:	ldr	r1, [r7]
   12068:	bl	119c0 <fputs_unlocked@plt>
   1206c:	movw	r1, #23549	; 0x5bfd
   12070:	mov	r0, #0
   12074:	mov	r2, #5
   12078:	movt	r1, #3
   1207c:	bl	11ad4 <dcgettext@plt>
   12080:	ldr	r1, [r7]
   12084:	bl	119c0 <fputs_unlocked@plt>
   12088:	movw	r1, #23757	; 0x5ccd
   1208c:	mov	r0, #0
   12090:	mov	r2, #5
   12094:	movt	r1, #3
   12098:	bl	11ad4 <dcgettext@plt>
   1209c:	ldr	r1, [r7]
   120a0:	bl	119c0 <fputs_unlocked@plt>
   120a4:	movw	r1, #24042	; 0x5dea
   120a8:	mov	r0, #0
   120ac:	mov	r2, #5
   120b0:	movt	r1, #3
   120b4:	bl	11ad4 <dcgettext@plt>
   120b8:	ldr	r1, [r7]
   120bc:	bl	119c0 <fputs_unlocked@plt>
   120c0:	movw	r1, #24653	; 0x604d
   120c4:	mov	r0, #0
   120c8:	mov	r2, #5
   120cc:	movt	r1, #3
   120d0:	bl	11ad4 <dcgettext@plt>
   120d4:	ldr	r1, [r7]
   120d8:	bl	119c0 <fputs_unlocked@plt>
   120dc:	movw	r1, #24856	; 0x6118
   120e0:	mov	r0, #0
   120e4:	mov	r2, #5
   120e8:	movt	r1, #3
   120ec:	bl	11ad4 <dcgettext@plt>
   120f0:	ldr	r1, [r7]
   120f4:	bl	119c0 <fputs_unlocked@plt>
   120f8:	movw	r1, #24901	; 0x6145
   120fc:	mov	r0, #0
   12100:	mov	r2, #5
   12104:	movt	r1, #3
   12108:	bl	11ad4 <dcgettext@plt>
   1210c:	ldr	r1, [r7]
   12110:	bl	119c0 <fputs_unlocked@plt>
   12114:	movw	r1, #25862	; 0x6506
   12118:	mov	r0, #0
   1211c:	mov	r2, #5
   12120:	movt	r1, #3
   12124:	bl	11ad4 <dcgettext@plt>
   12128:	movw	r2, #24955	; 0x617b
   1212c:	mov	r1, r0
   12130:	mov	r0, #1
   12134:	movt	r2, #3
   12138:	bl	11cf0 <__printf_chk@plt>
   1213c:	movw	r1, #26085	; 0x65e5
   12140:	mov	r0, #0
   12144:	mov	r2, #5
   12148:	movt	r1, #3
   1214c:	bl	11ad4 <dcgettext@plt>
   12150:	ldr	r1, [r7]
   12154:	bl	119c0 <fputs_unlocked@plt>
   12158:	movw	r0, #27720	; 0x6c48
   1215c:	mov	r2, #48	; 0x30
   12160:	mov	r6, sp
   12164:	movw	r5, #24958	; 0x617e
   12168:	movt	r0, #3
   1216c:	movt	r5, #3
   12170:	add	r1, r0, #32
   12174:	add	r3, r0, #16
   12178:	vld1.64	{d18-d19}, [r0], r2
   1217c:	vld1.64	{d16-d17}, [r1]
   12180:	vld1.64	{d20-d21}, [r3]
   12184:	add	r1, r6, #32
   12188:	vldr	d22, [r0]
   1218c:	add	r0, r6, #16
   12190:	vst1.64	{d16-d17}, [r1]
   12194:	movw	r1, #26297	; 0x66b9
   12198:	vst1.64	{d20-d21}, [r0]
   1219c:	mov	r0, r6
   121a0:	vst1.64	{d18-d19}, [r0], r2
   121a4:	movt	r1, #3
   121a8:	vstr	d22, [r0]
   121ac:	mov	r0, r5
   121b0:	bl	11a14 <strcmp@plt>
   121b4:	cmp	r0, #0
   121b8:	ldrne	r1, [r6, #8]!
   121bc:	cmpne	r1, #0
   121c0:	bne	121ac <__assert_fail@plt+0x318>
   121c4:	ldr	r6, [r6, #4]
   121c8:	movw	r1, #26392	; 0x6718
   121cc:	mov	r0, #0
   121d0:	mov	r2, #5
   121d4:	movt	r1, #3
   121d8:	bl	11ad4 <dcgettext@plt>
   121dc:	movw	r2, #25104	; 0x6210
   121e0:	movw	r3, #26415	; 0x672f
   121e4:	mov	r1, r0
   121e8:	mov	r0, #1
   121ec:	movt	r2, #3
   121f0:	movt	r3, #3
   121f4:	bl	11cf0 <__printf_chk@plt>
   121f8:	cmp	r6, #0
   121fc:	mov	r0, #5
   12200:	mov	r1, #0
   12204:	moveq	r6, r5
   12208:	bl	11d5c <setlocale@plt>
   1220c:	cmp	r0, #0
   12210:	beq	12248 <__assert_fail@plt+0x3b4>
   12214:	movw	r1, #26455	; 0x6757
   12218:	mov	r2, #3
   1221c:	movt	r1, #3
   12220:	bl	11e4c <strncmp@plt>
   12224:	cmp	r0, #0
   12228:	beq	12248 <__assert_fail@plt+0x3b4>
   1222c:	movw	r1, #26459	; 0x675b
   12230:	mov	r0, #0
   12234:	mov	r2, #5
   12238:	movt	r1, #3
   1223c:	bl	11ad4 <dcgettext@plt>
   12240:	ldr	r1, [r7]
   12244:	bl	119c0 <fputs_unlocked@plt>
   12248:	movw	r1, #26530	; 0x67a2
   1224c:	mov	r0, #0
   12250:	mov	r2, #5
   12254:	movt	r1, #3
   12258:	bl	11ad4 <dcgettext@plt>
   1225c:	movw	r2, #26415	; 0x672f
   12260:	mov	r1, r0
   12264:	mov	r0, #1
   12268:	mov	r3, r5
   1226c:	movt	r2, #3
   12270:	bl	11cf0 <__printf_chk@plt>
   12274:	movw	r1, #26557	; 0x67bd
   12278:	mov	r0, #0
   1227c:	mov	r2, #5
   12280:	movt	r1, #3
   12284:	bl	11ad4 <dcgettext@plt>
   12288:	movw	r3, #24652	; 0x604c
   1228c:	mov	r1, r0
   12290:	movw	r0, #26325	; 0x66d5
   12294:	cmp	r6, r5
   12298:	mov	r2, r6
   1229c:	movt	r0, #3
   122a0:	movt	r3, #3
   122a4:	moveq	r3, r0
   122a8:	mov	r0, #1
   122ac:	bl	11cf0 <__printf_chk@plt>
   122b0:	mov	r0, r4
   122b4:	bl	11c60 <exit@plt>
   122b8:	movw	r0, #33320	; 0x8228
   122bc:	movw	r1, #21812	; 0x5534
   122c0:	mov	r2, #5
   122c4:	movt	r0, #4
   122c8:	movt	r1, #3
   122cc:	ldr	r5, [r0]
   122d0:	mov	r0, #0
   122d4:	bl	11ad4 <dcgettext@plt>
   122d8:	mov	r2, r0
   122dc:	movw	r0, #33460	; 0x82b4
   122e0:	mov	r1, #1
   122e4:	movt	r0, #4
   122e8:	ldr	r3, [r0]
   122ec:	mov	r0, r5
   122f0:	bl	11d08 <__fprintf_chk@plt>
   122f4:	mov	r0, r4
   122f8:	bl	11c60 <exit@plt>
   122fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12300:	add	fp, sp, #28
   12304:	sub	sp, sp, #4
   12308:	vpush	{d8-d9}
   1230c:	sub	sp, sp, #280	; 0x118
   12310:	mov	r7, r0
   12314:	movw	r0, #27936	; 0x6d20
   12318:	mov	r5, #0
   1231c:	mov	r6, r1
   12320:	movt	r0, #3
   12324:	str	r5, [sp, #140]	; 0x8c
   12328:	str	r0, [sp, #136]	; 0x88
   1232c:	ldr	r0, [r1]
   12330:	bl	1d0ac <__assert_fail@plt+0xb218>
   12334:	movw	r1, #24652	; 0x604c
   12338:	mov	r0, #6
   1233c:	movt	r1, #3
   12340:	bl	11d5c <setlocale@plt>
   12344:	movw	r4, #25108	; 0x6214
   12348:	movw	r1, #24961	; 0x6181
   1234c:	movt	r4, #3
   12350:	movt	r1, #3
   12354:	mov	r0, r4
   12358:	bl	11e10 <bindtextdomain@plt>
   1235c:	mov	r0, r4
   12360:	bl	11b04 <textdomain@plt>
   12364:	movw	r0, #18848	; 0x49a0
   12368:	movt	r0, #1
   1236c:	bl	3550c <__assert_fail@plt+0x23678>
   12370:	bl	150cc <__assert_fail@plt+0x3238>
   12374:	movw	r1, #33344	; 0x8240
   12378:	movt	r1, #4
   1237c:	str	r0, [r1]
   12380:	movw	r0, #24985	; 0x6199
   12384:	movt	r0, #3
   12388:	bl	11bdc <getenv@plt>
   1238c:	movw	r1, #33348	; 0x8244
   12390:	movw	r2, #33352	; 0x8248
   12394:	movt	r1, #4
   12398:	movt	r2, #4
   1239c:	bl	1ba28 <__assert_fail@plt+0x9b94>
   123a0:	mov	r0, #1
   123a4:	movw	r9, #24999	; 0x61a7
   123a8:	movw	r8, #27224	; 0x6a58
   123ac:	str	r0, [sp, #124]	; 0x7c
   123b0:	mov	r0, #8
   123b4:	movt	r9, #3
   123b8:	movt	r8, #3
   123bc:	str	r0, [sp, #120]	; 0x78
   123c0:	mov	r0, #16
   123c4:	str	r0, [sp, #128]	; 0x80
   123c8:	mov	r0, #0
   123cc:	str	r0, [sp, #36]	; 0x24
   123d0:	mov	r0, #0
   123d4:	str	r0, [sp, #116]	; 0x74
   123d8:	b	123e8 <__assert_fail@plt+0x554>
   123dc:	mov	r1, #1
   123e0:	mov	r5, sl
   123e4:	strb	r1, [r0]
   123e8:	mvn	r0, #0
   123ec:	mov	r1, r6
   123f0:	mov	r2, r9
   123f4:	mov	r3, r8
   123f8:	mov	sl, r5
   123fc:	str	r0, [sp, #144]	; 0x90
   12400:	add	r0, sp, #144	; 0x90
   12404:	str	r0, [sp]
   12408:	mov	r0, r7
   1240c:	bl	11c48 <getopt_long@plt>
   12410:	add	r0, r0, #3
   12414:	movw	r1, #266	; 0x10a
   12418:	cmp	r0, r1
   1241c:	bhi	12ba8 <__assert_fail@plt+0xd14>
   12420:	add	r1, pc, #4
   12424:	mov	r5, #1
   12428:	ldr	pc, [r1, r0, lsl #2]
   1242c:	andeq	r3, r1, r4, lsl #29
   12430:	andeq	r3, r1, r8, ror #29
   12434:	andeq	r2, r1, r4, lsr #24
   12438:	andeq	r2, r1, r8, lsr #23
   1243c:	andeq	r2, r1, r8, lsr #23
   12440:	andeq	r2, r1, r8, lsr #23
   12444:	andeq	r2, r1, r8, lsr #23
   12448:	andeq	r2, r1, r8, lsr #23
   1244c:	andeq	r2, r1, r8, lsr #23
   12450:	andeq	r2, r1, r8, lsr #23
   12454:	andeq	r2, r1, r8, lsr #23
   12458:	andeq	r2, r1, r8, lsr #23
   1245c:	andeq	r2, r1, r8, lsr #23
   12460:	andeq	r2, r1, r8, lsr #23
   12464:	andeq	r2, r1, r8, lsr #23
   12468:	andeq	r2, r1, r8, lsr #23
   1246c:	andeq	r2, r1, r8, lsr #23
   12470:	andeq	r2, r1, r8, lsr #23
   12474:	andeq	r2, r1, r8, lsr #23
   12478:	andeq	r2, r1, r8, lsr #23
   1247c:	andeq	r2, r1, r8, lsr #23
   12480:	andeq	r2, r1, r8, lsr #23
   12484:	andeq	r2, r1, r8, lsr #23
   12488:	andeq	r2, r1, r8, lsr #23
   1248c:	andeq	r2, r1, r8, lsr #23
   12490:	andeq	r2, r1, r8, lsr #23
   12494:	andeq	r2, r1, r8, lsr #23
   12498:	andeq	r2, r1, r8, lsr #23
   1249c:	andeq	r2, r1, r8, lsr #23
   124a0:	andeq	r2, r1, r8, lsr #23
   124a4:	andeq	r2, r1, r8, lsr #23
   124a8:	andeq	r2, r1, r8, lsr #23
   124ac:	andeq	r2, r1, r8, lsr #23
   124b0:	andeq	r2, r1, r8, lsr #23
   124b4:	andeq	r2, r1, r8, lsr #23
   124b8:	andeq	r2, r1, r8, lsr #23
   124bc:	andeq	r2, r1, r8, lsr #23
   124c0:	andeq	r2, r1, r8, lsr #23
   124c4:	andeq	r2, r1, r8, lsr #23
   124c8:	andeq	r2, r1, r8, lsr #23
   124cc:	andeq	r2, r1, r8, lsr #23
   124d0:	andeq	r2, r1, r8, lsr #23
   124d4:	andeq	r2, r1, r8, lsr #23
   124d8:	andeq	r2, r1, r8, lsr #23
   124dc:	andeq	r2, r1, r8, lsr #23
   124e0:	andeq	r2, r1, r8, lsr #23
   124e4:	andeq	r2, r1, r8, lsr #23
   124e8:	andeq	r2, r1, r8, lsr #23
   124ec:	andeq	r2, r1, r8, lsr #23
   124f0:	andeq	r2, r1, r8, lsr #23
   124f4:	andeq	r2, r1, r8, lsr #23
   124f8:	andeq	r2, r1, r0, lsr #20
   124fc:	andeq	r2, r1, r8, lsr #23
   12500:	andeq	r2, r1, r8, lsr #23
   12504:	andeq	r2, r1, r8, lsr #23
   12508:	andeq	r2, r1, r8, lsr #23
   1250c:	andeq	r2, r1, r8, lsr #23
   12510:	andeq	r2, r1, r8, lsr #23
   12514:	andeq	r2, r1, r8, lsr #23
   12518:	andeq	r2, r1, r8, lsr #23
   1251c:	andeq	r2, r1, r8, lsr #23
   12520:	andeq	r2, r1, r8, lsr #23
   12524:	andeq	r2, r1, r8, lsr #23
   12528:	andeq	r2, r1, r8, lsr #23
   1252c:	andeq	r2, r1, r8, lsr #23
   12530:	andeq	r2, r1, r8, lsr #23
   12534:	andeq	r2, r1, r8, lsr #23
   12538:	andeq	r2, r1, r8, lsr #23
   1253c:	andeq	r2, r1, r8, lsr #23
   12540:	strdeq	r2, [r1], -r0
   12544:	andeq	r2, r1, r8, lsr #23
   12548:	andeq	r2, r1, r8, asr r8
   1254c:	andeq	r2, r1, r8, lsr #23
   12550:	andeq	r2, r1, r8, lsr #23
   12554:	andeq	r2, r1, r8, lsr #23
   12558:	andeq	r2, r1, r8, asr r8
   1255c:	andeq	r2, r1, r8, lsr #23
   12560:	andeq	r2, r1, r8, lsr #23
   12564:	andeq	r2, r1, r8, lsr #23
   12568:	andeq	r2, r1, r0, asr sl
   1256c:	andeq	r2, r1, r8, lsr #23
   12570:	andeq	r2, r1, r8, lsr #23
   12574:	andeq	r2, r1, r8, lsr #23
   12578:	andeq	r2, r1, r8, asr #21
   1257c:	andeq	r2, r1, r8, lsr #23
   12580:	andeq	r2, r1, r8, lsr #23
   12584:	andeq	r2, r1, ip, lsr #18
   12588:	andeq	r2, r1, r8, lsr #23
   1258c:	andeq	r2, r1, r8, lsr #23
   12590:	andeq	r2, r1, r8, lsr #23
   12594:	andeq	r2, r1, r8, lsr #23
   12598:	andeq	r2, r1, r8, asr sl
   1259c:	andeq	r2, r1, r8, lsr #23
   125a0:	andeq	r2, r1, r8, lsr #23
   125a4:	andeq	r2, r1, r8, lsr #23
   125a8:	andeq	r2, r1, r8, lsr #23
   125ac:	andeq	r2, r1, r8, lsr #23
   125b0:	andeq	r2, r1, r8, lsr #23
   125b4:	andeq	r2, r1, r8, lsr #23
   125b8:	andeq	r2, r1, r8, lsr #23
   125bc:	andeq	r2, r1, r4, ror #21
   125c0:	andeq	r2, r1, r8, lsr r9
   125c4:	ldrdeq	r2, [r1], -r8
   125c8:	andeq	r2, r1, r8, lsl fp
   125cc:	andeq	r2, r1, r8, lsr #23
   125d0:	andeq	r2, r1, r8, lsr #23
   125d4:	andeq	r2, r1, r8, lsr #23
   125d8:	andeq	r2, r1, ip, lsr #20
   125dc:	andeq	r2, r1, r8, lsr #23
   125e0:	andeq	r2, r1, r8, lsr #23
   125e4:	strdeq	r2, [r1], -ip
   125e8:	andeq	r2, r1, r8, lsl #18
   125ec:	andeq	r2, r1, r8, asr #19
   125f0:	andeq	r2, r1, r8, lsr #23
   125f4:	andeq	r2, r1, r8, lsr #23
   125f8:	andeq	r2, r1, r8, lsr #23
   125fc:	andeq	r2, r1, r8, lsr #23
   12600:	andeq	r2, r1, r8, lsr #23
   12604:	andeq	r2, r1, r8, ror #7
   12608:	andeq	r2, r1, ip, ror #18
   1260c:	andeq	r2, r1, r8, lsr #23
   12610:	andeq	r2, r1, r8, lsr #23
   12614:	andeq	r2, r1, r8, lsr #23
   12618:	muleq	r1, r4, fp
   1261c:	andeq	r2, r1, r8, lsr #23
   12620:	andeq	r2, r1, r8, lsr #23
   12624:	andeq	r2, r1, r8, lsr #23
   12628:	andeq	r2, r1, r8, lsr #23
   1262c:	andeq	r2, r1, r8, lsr #23
   12630:	andeq	r2, r1, r8, lsr #23
   12634:	andeq	r2, r1, r8, lsr #23
   12638:	andeq	r2, r1, r8, lsr #23
   1263c:	andeq	r2, r1, r8, lsr #23
   12640:	andeq	r2, r1, r8, lsr #23
   12644:	andeq	r2, r1, r8, lsr #23
   12648:	andeq	r2, r1, r8, lsr #23
   1264c:	andeq	r2, r1, r8, lsr #23
   12650:	andeq	r2, r1, r8, lsr #23
   12654:	andeq	r2, r1, r8, lsr #23
   12658:	andeq	r2, r1, r8, lsr #23
   1265c:	andeq	r2, r1, r8, lsr #23
   12660:	andeq	r2, r1, r8, lsr #23
   12664:	andeq	r2, r1, r8, lsr #23
   12668:	andeq	r2, r1, r8, lsr #23
   1266c:	andeq	r2, r1, r8, lsr #23
   12670:	andeq	r2, r1, r8, lsr #23
   12674:	andeq	r2, r1, r8, lsr #23
   12678:	andeq	r2, r1, r8, lsr #23
   1267c:	andeq	r2, r1, r8, lsr #23
   12680:	andeq	r2, r1, r8, lsr #23
   12684:	andeq	r2, r1, r8, lsr #23
   12688:	andeq	r2, r1, r8, lsr #23
   1268c:	andeq	r2, r1, r8, lsr #23
   12690:	andeq	r2, r1, r8, lsr #23
   12694:	andeq	r2, r1, r8, lsr #23
   12698:	andeq	r2, r1, r8, lsr #23
   1269c:	andeq	r2, r1, r8, lsr #23
   126a0:	andeq	r2, r1, r8, lsr #23
   126a4:	andeq	r2, r1, r8, lsr #23
   126a8:	andeq	r2, r1, r8, lsr #23
   126ac:	andeq	r2, r1, r8, lsr #23
   126b0:	andeq	r2, r1, r8, lsr #23
   126b4:	andeq	r2, r1, r8, lsr #23
   126b8:	andeq	r2, r1, r8, lsr #23
   126bc:	andeq	r2, r1, r8, lsr #23
   126c0:	andeq	r2, r1, r8, lsr #23
   126c4:	andeq	r2, r1, r8, lsr #23
   126c8:	andeq	r2, r1, r8, lsr #23
   126cc:	andeq	r2, r1, r8, lsr #23
   126d0:	andeq	r2, r1, r8, lsr #23
   126d4:	andeq	r2, r1, r8, lsr #23
   126d8:	andeq	r2, r1, r8, lsr #23
   126dc:	andeq	r2, r1, r8, lsr #23
   126e0:	andeq	r2, r1, r8, lsr #23
   126e4:	andeq	r2, r1, r8, lsr #23
   126e8:	andeq	r2, r1, r8, lsr #23
   126ec:	andeq	r2, r1, r8, lsr #23
   126f0:	andeq	r2, r1, r8, lsr #23
   126f4:	andeq	r2, r1, r8, lsr #23
   126f8:	andeq	r2, r1, r8, lsr #23
   126fc:	andeq	r2, r1, r8, lsr #23
   12700:	andeq	r2, r1, r8, lsr #23
   12704:	andeq	r2, r1, r8, lsr #23
   12708:	andeq	r2, r1, r8, lsr #23
   1270c:	andeq	r2, r1, r8, lsr #23
   12710:	andeq	r2, r1, r8, lsr #23
   12714:	andeq	r2, r1, r8, lsr #23
   12718:	andeq	r2, r1, r8, lsr #23
   1271c:	andeq	r2, r1, r8, lsr #23
   12720:	andeq	r2, r1, r8, lsr #23
   12724:	andeq	r2, r1, r8, lsr #23
   12728:	andeq	r2, r1, r8, lsr #23
   1272c:	andeq	r2, r1, r8, lsr #23
   12730:	andeq	r2, r1, r8, lsr #23
   12734:	andeq	r2, r1, r8, lsr #23
   12738:	andeq	r2, r1, r8, lsr #23
   1273c:	andeq	r2, r1, r8, lsr #23
   12740:	andeq	r2, r1, r8, lsr #23
   12744:	andeq	r2, r1, r8, lsr #23
   12748:	andeq	r2, r1, r8, lsr #23
   1274c:	andeq	r2, r1, r8, lsr #23
   12750:	andeq	r2, r1, r8, lsr #23
   12754:	andeq	r2, r1, r8, lsr #23
   12758:	andeq	r2, r1, r8, lsr #23
   1275c:	andeq	r2, r1, r8, lsr #23
   12760:	andeq	r2, r1, r8, lsr #23
   12764:	andeq	r2, r1, r8, lsr #23
   12768:	andeq	r2, r1, r8, lsr #23
   1276c:	andeq	r2, r1, r8, lsr #23
   12770:	andeq	r2, r1, r8, lsr #23
   12774:	andeq	r2, r1, r8, lsr #23
   12778:	andeq	r2, r1, r8, lsr #23
   1277c:	andeq	r2, r1, r8, lsr #23
   12780:	andeq	r2, r1, r8, lsr #23
   12784:	andeq	r2, r1, r8, lsr #23
   12788:	andeq	r2, r1, r8, lsr #23
   1278c:	andeq	r2, r1, r8, lsr #23
   12790:	andeq	r2, r1, r8, lsr #23
   12794:	andeq	r2, r1, r8, lsr #23
   12798:	andeq	r2, r1, r8, lsr #23
   1279c:	andeq	r2, r1, r8, lsr #23
   127a0:	andeq	r2, r1, r8, lsr #23
   127a4:	andeq	r2, r1, r8, lsr #23
   127a8:	andeq	r2, r1, r8, lsr #23
   127ac:	andeq	r2, r1, r8, lsr #23
   127b0:	andeq	r2, r1, r8, lsr #23
   127b4:	andeq	r2, r1, r8, lsr #23
   127b8:	andeq	r2, r1, r8, lsr #23
   127bc:	andeq	r2, r1, r8, lsr #23
   127c0:	andeq	r2, r1, r8, lsr #23
   127c4:	andeq	r2, r1, r8, lsr #23
   127c8:	andeq	r2, r1, r8, lsr #23
   127cc:	andeq	r2, r1, r8, lsr #23
   127d0:	andeq	r2, r1, r8, lsr #23
   127d4:	andeq	r2, r1, r8, lsr #23
   127d8:	andeq	r2, r1, r8, lsr #23
   127dc:	andeq	r2, r1, r8, lsr #23
   127e0:	andeq	r2, r1, r8, lsr #23
   127e4:	andeq	r2, r1, r8, lsr #23
   127e8:	andeq	r2, r1, r8, lsr #23
   127ec:	andeq	r2, r1, r8, lsr #23
   127f0:	andeq	r2, r1, r8, lsr #23
   127f4:	andeq	r2, r1, r8, lsr #23
   127f8:	andeq	r2, r1, r8, lsr #23
   127fc:	andeq	r2, r1, r8, lsr #23
   12800:	andeq	r2, r1, r8, lsr #23
   12804:	andeq	r2, r1, r8, lsr #23
   12808:	andeq	r2, r1, r8, lsr #23
   1280c:	andeq	r2, r1, r8, lsr #23
   12810:	andeq	r2, r1, r8, lsr #23
   12814:	andeq	r2, r1, r8, lsr #23
   12818:	andeq	r2, r1, r8, lsr #23
   1281c:	andeq	r2, r1, r8, lsr #23
   12820:	andeq	r2, r1, r8, lsr #23
   12824:	andeq	r2, r1, r8, lsr #23
   12828:	andeq	r2, r1, r8, lsr #23
   1282c:	andeq	r2, r1, r8, lsr #23
   12830:	andeq	r2, r1, r8, lsr #23
   12834:	andeq	r2, r1, r8, lsr #23
   12838:	ldrdeq	r2, [r1], -r4
   1283c:	strdeq	r2, [r1], -r0
   12840:			; <UNDEFINED> instruction: 0x00012bb8
   12844:	andeq	r2, r1, r0, ror #17
   12848:	andeq	r2, r1, r8, lsr #23
   1284c:	andeq	r2, r1, ip, ror #16
   12850:	andeq	r2, r1, r4, lsl r9
   12854:	andeq	r2, r1, r0, ror #16
   12858:	mov	r0, #17
   1285c:	b	12acc <__assert_fail@plt+0xc38>
   12860:	movw	r0, #33377	; 0x8261
   12864:	movt	r0, #4
   12868:	b	123dc <__assert_fail@plt+0x548>
   1286c:	movw	r1, #33378	; 0x8262
   12870:	mov	r0, #1
   12874:	movt	r1, #4
   12878:	strb	r0, [r1]
   1287c:	movw	r1, #33336	; 0x8238
   12880:	movt	r1, #4
   12884:	ldr	r1, [r1]
   12888:	cmp	r1, #0
   1288c:	beq	12bd0 <__assert_fail@plt+0xd3c>
   12890:	movw	r2, #33232	; 0x81d0
   12894:	movw	r5, #27640	; 0x6bf8
   12898:	mov	r3, #4
   1289c:	str	r0, [sp, #8]
   128a0:	movw	r0, #25094	; 0x6206
   128a4:	movt	r2, #4
   128a8:	movt	r5, #3
   128ac:	str	r3, [sp]
   128b0:	movt	r0, #3
   128b4:	ldr	r2, [r2]
   128b8:	mov	r3, r5
   128bc:	str	r2, [sp, #4]
   128c0:	movw	r2, #27660	; 0x6c0c
   128c4:	movt	r2, #3
   128c8:	bl	145a4 <__assert_fail@plt+0x2710>
   128cc:	ldr	r0, [r5, r0, lsl #2]
   128d0:	b	12bd4 <__assert_fail@plt+0xd40>
   128d4:	movw	r0, #33362	; 0x8252
   128d8:	movt	r0, #4
   128dc:	b	123dc <__assert_fail@plt+0x548>
   128e0:	movw	r2, #33352	; 0x8248
   128e4:	mov	r1, #0
   128e8:	mov	r0, #1
   128ec:	movt	r2, #4
   128f0:	strd	r0, [r2]
   128f4:	mov	r0, #144	; 0x90
   128f8:	b	12a44 <__assert_fail@plt+0xbb0>
   128fc:	mov	r1, #0
   12900:	mov	r0, #1024	; 0x400
   12904:	b	129d0 <__assert_fail@plt+0xb3c>
   12908:	movw	r0, #33364	; 0x8254
   1290c:	movt	r0, #4
   12910:	b	123dc <__assert_fail@plt+0x548>
   12914:	movw	r0, #33336	; 0x8238
   12918:	movw	r1, #33388	; 0x826c
   1291c:	movt	r0, #4
   12920:	movt	r1, #4
   12924:	ldr	r0, [r0]
   12928:	b	12bf8 <__assert_fail@plt+0xd64>
   1292c:	movw	r0, #33376	; 0x8260
   12930:	movt	r0, #4
   12934:	b	123dc <__assert_fail@plt+0x548>
   12938:	movw	r2, #33352	; 0x8248
   1293c:	mov	r1, #0
   12940:	mov	r0, #1
   12944:	mov	r5, sl
   12948:	movt	r2, #4
   1294c:	strd	r0, [r2]
   12950:	movw	r2, #33348	; 0x8244
   12954:	movt	r2, #4
   12958:	str	r1, [r2]
   1295c:	movw	r1, #33362	; 0x8252
   12960:	movt	r1, #4
   12964:	strb	r0, [r1]
   12968:	b	123e8 <__assert_fail@plt+0x554>
   1296c:	movw	r4, #33336	; 0x8238
   12970:	movw	r1, #25048	; 0x61d8
   12974:	movw	r5, #33368	; 0x8258
   12978:	mov	r2, #0
   1297c:	movt	r4, #4
   12980:	movt	r1, #3
   12984:	movt	r5, #4
   12988:	ldr	r0, [r4]
   1298c:	str	r1, [sp]
   12990:	mov	r1, #0
   12994:	mov	r3, r5
   12998:	bl	315c8 <__assert_fail@plt+0x1f734>
   1299c:	cmp	r0, #0
   129a0:	bne	13f50 <__assert_fail@plt+0x20bc>
   129a4:	ldrd	r0, [r5]
   129a8:	orrs	r0, r0, r1
   129ac:	bne	12bb0 <__assert_fail@plt+0xd1c>
   129b0:	ldr	r0, [r4]
   129b4:	mov	r5, sl
   129b8:	ldrb	r0, [r0]
   129bc:	cmp	r0, #45	; 0x2d
   129c0:	bne	123e8 <__assert_fail@plt+0x554>
   129c4:	b	13f6c <__assert_fail@plt+0x20d8>
   129c8:	mov	r1, #0
   129cc:	mov	r0, #1048576	; 0x100000
   129d0:	movw	r2, #33352	; 0x8248
   129d4:	mov	r5, sl
   129d8:	movt	r2, #4
   129dc:	strd	r0, [r2]
   129e0:	movw	r0, #33348	; 0x8244
   129e4:	movt	r0, #4
   129e8:	str	r1, [r0]
   129ec:	b	123e8 <__assert_fail@plt+0x554>
   129f0:	movw	r4, #33336	; 0x8238
   129f4:	movw	r1, #33348	; 0x8244
   129f8:	movw	r2, #33352	; 0x8248
   129fc:	movt	r4, #4
   12a00:	movt	r1, #4
   12a04:	movt	r2, #4
   12a08:	ldr	r0, [r4]
   12a0c:	bl	1ba28 <__assert_fail@plt+0x9b94>
   12a10:	cmp	r0, #0
   12a14:	mov	r5, sl
   12a18:	beq	123e8 <__assert_fail@plt+0x554>
   12a1c:	b	13f90 <__assert_fail@plt+0x20fc>
   12a20:	movw	r0, #33360	; 0x8250
   12a24:	movt	r0, #4
   12a28:	b	123dc <__assert_fail@plt+0x548>
   12a2c:	movw	r2, #33352	; 0x8248
   12a30:	mov	r1, #0
   12a34:	mov	r0, #1
   12a38:	movt	r2, #4
   12a3c:	strd	r0, [r2]
   12a40:	mov	r0, #176	; 0xb0
   12a44:	movw	r1, #33348	; 0x8244
   12a48:	movt	r1, #4
   12a4c:	b	12bf8 <__assert_fail@plt+0xd64>
   12a50:	mov	r0, #2
   12a54:	b	12acc <__assert_fail@plt+0xc38>
   12a58:	movw	r4, #33336	; 0x8238
   12a5c:	movw	r0, #33344	; 0x8240
   12a60:	mov	r3, #268435456	; 0x10000000
   12a64:	movt	r4, #4
   12a68:	movt	r0, #4
   12a6c:	ldr	r1, [r0]
   12a70:	ldr	r2, [r4]
   12a74:	mov	r0, #10
   12a78:	str	r0, [sp]
   12a7c:	movw	r0, #21984	; 0x55e0
   12a80:	movt	r0, #1
   12a84:	bl	15ad8 <__assert_fail@plt+0x3c44>
   12a88:	cmp	r0, #0
   12a8c:	beq	12bb0 <__assert_fail@plt+0xd1c>
   12a90:	bl	11ca8 <__errno_location@plt>
   12a94:	ldr	r2, [r4]
   12a98:	ldr	r5, [r0]
   12a9c:	mov	r0, #0
   12aa0:	mov	r1, #3
   12aa4:	str	r0, [sp, #124]	; 0x7c
   12aa8:	mov	r0, #0
   12aac:	bl	1ea34 <__assert_fail@plt+0xcba0>
   12ab0:	movw	r2, #27878	; 0x6ce6
   12ab4:	mov	r3, r0
   12ab8:	mov	r0, #0
   12abc:	mov	r1, r5
   12ac0:	movt	r2, #3
   12ac4:	b	12b88 <__assert_fail@plt+0xcf4>
   12ac8:	mov	r0, #16
   12acc:	str	r0, [sp, #128]	; 0x80
   12ad0:	mov	r5, sl
   12ad4:	b	123e8 <__assert_fail@plt+0x554>
   12ad8:	movw	r0, #33363	; 0x8253
   12adc:	movt	r0, #4
   12ae0:	b	123dc <__assert_fail@plt+0x548>
   12ae4:	movw	r0, #33361	; 0x8251
   12ae8:	movt	r0, #4
   12aec:	b	123dc <__assert_fail@plt+0x548>
   12af0:	movw	r0, #33336	; 0x8238
   12af4:	mov	r2, #268435456	; 0x10000000
   12af8:	movt	r0, #4
   12afc:	ldr	r1, [r0]
   12b00:	movw	r0, #33344	; 0x8240
   12b04:	movt	r0, #4
   12b08:	ldr	r0, [r0]
   12b0c:	bl	155e0 <__assert_fail@plt+0x374c>
   12b10:	mov	r5, sl
   12b14:	b	123e8 <__assert_fail@plt+0x554>
   12b18:	movw	r4, #33336	; 0x8238
   12b1c:	movw	r1, #24652	; 0x604c
   12b20:	sub	r3, fp, #160	; 0xa0
   12b24:	mov	r2, #0
   12b28:	movt	r4, #4
   12b2c:	movt	r1, #3
   12b30:	ldr	r0, [r4]
   12b34:	str	r1, [sp]
   12b38:	mov	r1, #0
   12b3c:	bl	32fa4 <__assert_fail@plt+0x21110>
   12b40:	cmp	r0, #0
   12b44:	ldreq	r0, [fp, #-156]	; 0xffffff64
   12b48:	cmpeq	r0, #0
   12b4c:	beq	12c04 <__assert_fail@plt+0xd70>
   12b50:	movw	r1, #25023	; 0x61bf
   12b54:	mov	r0, #0
   12b58:	mov	r2, #5
   12b5c:	str	r0, [sp, #124]	; 0x7c
   12b60:	movt	r1, #3
   12b64:	mov	r0, #0
   12b68:	bl	11ad4 <dcgettext@plt>
   12b6c:	mov	r5, r0
   12b70:	ldr	r0, [r4]
   12b74:	bl	1ece0 <__assert_fail@plt+0xce4c>
   12b78:	mov	r3, r0
   12b7c:	mov	r0, #0
   12b80:	mov	r1, #0
   12b84:	mov	r2, r5
   12b88:	bl	11bac <error@plt>
   12b8c:	mov	r5, sl
   12b90:	b	123e8 <__assert_fail@plt+0x554>
   12b94:	ldr	r0, [sp, #120]	; 0x78
   12b98:	mov	r5, sl
   12b9c:	orr	r0, r0, #64	; 0x40
   12ba0:	str	r0, [sp, #120]	; 0x78
   12ba4:	b	123e8 <__assert_fail@plt+0x554>
   12ba8:	mov	r0, #0
   12bac:	str	r0, [sp, #124]	; 0x7c
   12bb0:	mov	r5, sl
   12bb4:	b	123e8 <__assert_fail@plt+0x554>
   12bb8:	movw	r0, #33336	; 0x8238
   12bbc:	mov	r5, sl
   12bc0:	movt	r0, #4
   12bc4:	ldr	r0, [r0]
   12bc8:	str	r0, [sp, #36]	; 0x24
   12bcc:	b	123e8 <__assert_fail@plt+0x554>
   12bd0:	mov	r0, #0
   12bd4:	movw	r1, #33380	; 0x8264
   12bd8:	movt	r1, #4
   12bdc:	str	r0, [r1]
   12be0:	movw	r0, #25101	; 0x620d
   12be4:	movt	r0, #3
   12be8:	bl	11bdc <getenv@plt>
   12bec:	bl	30298 <__assert_fail@plt+0x1e404>
   12bf0:	movw	r1, #33384	; 0x8268
   12bf4:	movt	r1, #4
   12bf8:	str	r0, [r1]
   12bfc:	mov	r5, sl
   12c00:	b	123e8 <__assert_fail@plt+0x554>
   12c04:	ldr	r0, [fp, #-160]	; 0xffffff60
   12c08:	movw	r1, #33224	; 0x81c8
   12c0c:	mov	r5, sl
   12c10:	movt	r1, #4
   12c14:	str	r0, [r1]
   12c18:	mov	r0, #1
   12c1c:	str	r0, [sp, #116]	; 0x74
   12c20:	b	123e8 <__assert_fail@plt+0x554>
   12c24:	ldr	r0, [sp, #124]	; 0x7c
   12c28:	tst	r0, #1
   12c2c:	beq	13fb8 <__assert_fail@plt+0x2124>
   12c30:	movw	r0, #33361	; 0x8251
   12c34:	movt	r0, #4
   12c38:	ldrb	r0, [r0]
   12c3c:	and	r0, sl, r0
   12c40:	tst	r0, #1
   12c44:	bne	13fc0 <__assert_fail@plt+0x212c>
   12c48:	ldr	r4, [sp, #36]	; 0x24
   12c4c:	tst	sl, #1
   12c50:	beq	12cc8 <__assert_fail@plt+0xe34>
   12c54:	movw	r8, #33224	; 0x81c8
   12c58:	ldr	r0, [sp, #116]	; 0x74
   12c5c:	movt	r8, #4
   12c60:	ldr	r5, [r8]
   12c64:	mvn	r4, r0
   12c68:	cmp	r5, #0
   12c6c:	mov	r0, r5
   12c70:	movwne	r0, #1
   12c74:	orr	r0, r4, r0
   12c78:	tst	r0, #1
   12c7c:	bne	12ca8 <__assert_fail@plt+0xe14>
   12c80:	movw	r1, #25220	; 0x6284
   12c84:	mov	r0, #0
   12c88:	mov	r2, #5
   12c8c:	movt	r1, #3
   12c90:	bl	11ad4 <dcgettext@plt>
   12c94:	mov	r2, r0
   12c98:	mov	r0, #0
   12c9c:	mov	r1, #0
   12ca0:	bl	11bac <error@plt>
   12ca4:	ldr	r5, [r8]
   12ca8:	clz	r0, r5
   12cac:	lsr	r0, r0, #5
   12cb0:	orr	r0, r4, r0
   12cb4:	tst	r0, #1
   12cb8:	beq	14084 <__assert_fail@plt+0x21f0>
   12cbc:	ldr	r4, [sp, #36]	; 0x24
   12cc0:	mov	r0, #0
   12cc4:	str	r0, [r8]
   12cc8:	movw	r0, #33377	; 0x8261
   12ccc:	movt	r0, #4
   12cd0:	ldrb	r0, [r0]
   12cd4:	cmp	r0, #1
   12cd8:	bne	12d28 <__assert_fail@plt+0xe94>
   12cdc:	movw	r0, #33362	; 0x8252
   12ce0:	movt	r0, #4
   12ce4:	ldrb	r0, [r0]
   12ce8:	cmp	r0, #1
   12cec:	bne	12d14 <__assert_fail@plt+0xe80>
   12cf0:	movw	r1, #25328	; 0x62f0
   12cf4:	mov	r0, #0
   12cf8:	mov	r2, #5
   12cfc:	movt	r1, #3
   12d00:	bl	11ad4 <dcgettext@plt>
   12d04:	mov	r2, r0
   12d08:	mov	r0, #0
   12d0c:	mov	r1, #0
   12d10:	bl	11bac <error@plt>
   12d14:	movw	r2, #33352	; 0x8248
   12d18:	mov	r1, #0
   12d1c:	mov	r0, #1
   12d20:	movt	r2, #4
   12d24:	strd	r0, [r2]
   12d28:	movw	r0, #33378	; 0x8262
   12d2c:	movt	r0, #4
   12d30:	ldrb	r0, [r0]
   12d34:	cmp	r0, #1
   12d38:	bne	12e94 <__assert_fail@plt+0x1000>
   12d3c:	movw	r4, #33388	; 0x826c
   12d40:	movt	r4, #4
   12d44:	ldr	r5, [r4]
   12d48:	cmp	r5, #0
   12d4c:	bne	12db8 <__assert_fail@plt+0xf24>
   12d50:	movw	r0, #25398	; 0x6336
   12d54:	movt	r0, #3
   12d58:	bl	11bdc <getenv@plt>
   12d5c:	cmp	r0, #0
   12d60:	str	r0, [r4]
   12d64:	beq	12dac <__assert_fail@plt+0xf18>
   12d68:	movw	r1, #24978	; 0x6192
   12d6c:	mov	r5, r0
   12d70:	movt	r1, #3
   12d74:	bl	11a14 <strcmp@plt>
   12d78:	cmp	r0, #0
   12d7c:	beq	12dac <__assert_fail@plt+0xf18>
   12d80:	ldrb	r0, [r5]
   12d84:	cmp	r0, #43	; 0x2b
   12d88:	bne	12ddc <__assert_fail@plt+0xf48>
   12d8c:	mov	r0, r5
   12d90:	mov	r1, #10
   12d94:	bl	11c84 <strchr@plt>
   12d98:	cmp	r0, #0
   12d9c:	beq	12dc4 <__assert_fail@plt+0xf30>
   12da0:	mov	r1, #0
   12da4:	strb	r1, [r0]
   12da8:	b	12db8 <__assert_fail@plt+0xf24>
   12dac:	movw	r5, #25409	; 0x6341
   12db0:	movt	r5, #3
   12db4:	str	r5, [r4]
   12db8:	ldrb	r0, [r5]
   12dbc:	cmp	r0, #43	; 0x2b
   12dc0:	bne	12df8 <__assert_fail@plt+0xf64>
   12dc4:	ldr	r4, [sp, #36]	; 0x24
   12dc8:	movw	r1, #33392	; 0x8270
   12dcc:	add	r0, r5, #1
   12dd0:	movt	r1, #4
   12dd4:	str	r0, [r1]
   12dd8:	b	12e94 <__assert_fail@plt+0x1000>
   12ddc:	movw	r1, #27684	; 0x6c24
   12de0:	mov	r0, r5
   12de4:	mov	r2, #6
   12de8:	movt	r1, #3
   12dec:	bl	11e4c <strncmp@plt>
   12df0:	cmp	r0, #0
   12df4:	beq	13e58 <__assert_fail@plt+0x1fc4>
   12df8:	movw	r0, #33232	; 0x81d0
   12dfc:	movw	r8, #27692	; 0x6c2c
   12e00:	mov	r2, #4
   12e04:	mov	r1, #1
   12e08:	movt	r0, #4
   12e0c:	str	r2, [sp]
   12e10:	movw	r2, #27704	; 0x6c38
   12e14:	movt	r8, #3
   12e18:	ldr	r0, [r0]
   12e1c:	movt	r2, #3
   12e20:	mov	r3, r8
   12e24:	stmib	sp, {r0, r1}
   12e28:	movw	r0, #25418	; 0x634a
   12e2c:	mov	r1, r5
   12e30:	movt	r0, #3
   12e34:	bl	145a4 <__assert_fail@plt+0x2710>
   12e38:	ldr	r0, [r8, r0, lsl #2]
   12e3c:	ldr	r4, [sp, #36]	; 0x24
   12e40:	cmp	r0, #2
   12e44:	beq	12e80 <__assert_fail@plt+0xfec>
   12e48:	cmp	r0, #1
   12e4c:	beq	12e6c <__assert_fail@plt+0xfd8>
   12e50:	cmp	r0, #0
   12e54:	bne	12e94 <__assert_fail@plt+0x1000>
   12e58:	movw	r0, #33392	; 0x8270
   12e5c:	movw	r1, #25429	; 0x6355
   12e60:	movt	r0, #4
   12e64:	movt	r1, #3
   12e68:	b	12e90 <__assert_fail@plt+0xffc>
   12e6c:	movw	r0, #33392	; 0x8270
   12e70:	movw	r1, #25453	; 0x636d
   12e74:	movt	r0, #4
   12e78:	movt	r1, #3
   12e7c:	b	12e90 <__assert_fail@plt+0xffc>
   12e80:	movw	r0, #33392	; 0x8270
   12e84:	movw	r1, #25468	; 0x637c
   12e88:	movt	r0, #4
   12e8c:	movt	r1, #3
   12e90:	str	r1, [r0]
   12e94:	movw	r5, #33312	; 0x8220
   12e98:	cmp	r4, #0
   12e9c:	movt	r5, #4
   12ea0:	ldr	r1, [r5]
   12ea4:	beq	12f08 <__assert_fail@plt+0x1074>
   12ea8:	cmp	r1, r7
   12eac:	blt	1400c <__assert_fail@plt+0x2178>
   12eb0:	movw	r1, #30440	; 0x76e8
   12eb4:	mov	r0, r4
   12eb8:	movt	r1, #3
   12ebc:	bl	11a14 <strcmp@plt>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12eec <__assert_fail@plt+0x1058>
   12ec8:	movw	r0, #33328	; 0x8230
   12ecc:	movw	r1, #29350	; 0x72a6
   12ed0:	movt	r0, #4
   12ed4:	movt	r1, #3
   12ed8:	ldr	r2, [r0]
   12edc:	mov	r0, r4
   12ee0:	bl	1777c <__assert_fail@plt+0x58e8>
   12ee4:	cmp	r0, #0
   12ee8:	beq	140b4 <__assert_fail@plt+0x2220>
   12eec:	movw	r0, #33328	; 0x8230
   12ef0:	movt	r0, #4
   12ef4:	ldr	r0, [r0]
   12ef8:	bl	14844 <__assert_fail@plt+0x29b0>
   12efc:	mov	r4, r0
   12f00:	mov	r0, #1
   12f04:	b	12f44 <__assert_fail@plt+0x10b0>
   12f08:	add	r0, sp, #136	; 0x88
   12f0c:	cmp	r1, r7
   12f10:	addlt	r0, r6, r1, lsl #2
   12f14:	bl	14810 <__assert_fail@plt+0x297c>
   12f18:	mov	r4, r0
   12f1c:	ldr	r0, [r5]
   12f20:	mov	r1, #0
   12f24:	add	r0, r0, #1
   12f28:	cmp	r0, r7
   12f2c:	ldr	r0, [sp, #128]	; 0x80
   12f30:	movwlt	r1, #1
   12f34:	sub	r0, r0, #2
   12f38:	clz	r0, r0
   12f3c:	lsr	r0, r0, #5
   12f40:	orr	r0, r0, r1
   12f44:	ldr	r6, [sp, #120]	; 0x78
   12f48:	movw	r1, #33396	; 0x8274
   12f4c:	cmp	r4, #0
   12f50:	movt	r1, #4
   12f54:	strb	r0, [r1]
   12f58:	beq	13fb4 <__assert_fail@plt+0x2120>
   12f5c:	bl	14a88 <__assert_fail@plt+0x2bf4>
   12f60:	movw	r1, #33400	; 0x8278
   12f64:	cmp	r0, #0
   12f68:	movt	r1, #4
   12f6c:	str	r0, [r1]
   12f70:	beq	13fb4 <__assert_fail@plt+0x2120>
   12f74:	movw	r0, #33396	; 0x8274
   12f78:	orr	r1, r6, #256	; 0x100
   12f7c:	str	r4, [sp, #44]	; 0x2c
   12f80:	movt	r0, #4
   12f84:	ldrb	r0, [r0]
   12f88:	cmp	r0, #0
   12f8c:	movw	r0, #33364	; 0x8254
   12f90:	movt	r0, #4
   12f94:	moveq	r6, r1
   12f98:	ldrb	r0, [r0]
   12f9c:	cmp	r0, #0
   12fa0:	mov	r0, r4
   12fa4:	movne	r6, r1
   12fa8:	add	r1, sp, #132	; 0x84
   12fac:	bl	14878 <__assert_fail@plt+0x29e4>
   12fb0:	cmp	r0, #0
   12fb4:	beq	13d04 <__assert_fail@plt+0x1e70>
   12fb8:	mov	r5, r0
   12fbc:	ldr	r0, [sp, #128]	; 0x80
   12fc0:	vmov.i32	q4, #0	; 0x00000000
   12fc4:	mov	r4, #1
   12fc8:	orr	r0, r6, r0
   12fcc:	str	r0, [sp, #32]
   12fd0:	sub	r0, fp, #160	; 0xa0
   12fd4:	add	r0, r0, #96	; 0x60
   12fd8:	str	r0, [sp, #24]
   12fdc:	add	r0, sp, #144	; 0x90
   12fe0:	add	r1, r0, #16
   12fe4:	add	r0, r0, #8
   12fe8:	str	r1, [sp, #96]	; 0x60
   12fec:	str	r0, [sp, #100]	; 0x64
   12ff0:	str	r4, [sp, #40]	; 0x28
   12ff4:	ldr	r4, [sp, #36]	; 0x24
   12ff8:	mov	r0, #0
   12ffc:	cmp	r4, #0
   13000:	beq	13078 <__assert_fail@plt+0x11e4>
   13004:	movw	r1, #30440	; 0x76e8
   13008:	mov	r0, r4
   1300c:	movt	r1, #3
   13010:	bl	11a14 <strcmp@plt>
   13014:	cmp	r0, #0
   13018:	mov	r0, #0
   1301c:	bne	13078 <__assert_fail@plt+0x11e4>
   13020:	movw	r1, #30440	; 0x76e8
   13024:	mov	r0, r5
   13028:	movt	r1, #3
   1302c:	bl	11a14 <strcmp@plt>
   13030:	cmp	r0, #0
   13034:	mov	r0, #0
   13038:	bne	13078 <__assert_fail@plt+0x11e4>
   1303c:	movw	r1, #25660	; 0x643c
   13040:	mov	r0, #0
   13044:	mov	r2, #5
   13048:	movt	r1, #3
   1304c:	bl	11ad4 <dcgettext@plt>
   13050:	mov	r6, r0
   13054:	mov	r0, #4
   13058:	mov	r1, r5
   1305c:	bl	1e7b8 <__assert_fail@plt+0xc924>
   13060:	mov	r3, r0
   13064:	mov	r0, #0
   13068:	mov	r1, #0
   1306c:	mov	r2, r6
   13070:	bl	11bac <error@plt>
   13074:	mov	r0, #1
   13078:	ldrb	r1, [r5]
   1307c:	cmp	r1, #0
   13080:	beq	13b90 <__assert_fail@plt+0x1cfc>
   13084:	mov	r4, #0
   13088:	cmp	r0, #0
   1308c:	bne	13ce0 <__assert_fail@plt+0x1e4c>
   13090:	ldr	r1, [sp, #32]
   13094:	movw	r0, #33404	; 0x827c
   13098:	mov	r2, #0
   1309c:	movt	r0, #4
   130a0:	str	r5, [r0]
   130a4:	bl	3154c <__assert_fail@plt+0x1f6b8>
   130a8:	mov	r6, r0
   130ac:	bl	18380 <__assert_fail@plt+0x64ec>
   130b0:	cmp	r0, #0
   130b4:	beq	13c2c <__assert_fail@plt+0x1d98>
   130b8:	mov	r5, r0
   130bc:	add	r0, r6, #16
   130c0:	mov	r9, #1
   130c4:	str	r6, [sp, #92]	; 0x5c
   130c8:	str	r0, [sp, #28]
   130cc:	b	136e8 <__assert_fail@plt+0x1854>
   130d0:	cmp	r8, #0
   130d4:	bne	13b74 <__assert_fail@plt+0x1ce0>
   130d8:	b	13af4 <__assert_fail@plt+0x1c60>
   130dc:	cmp	r7, #11
   130e0:	bne	13108 <__assert_fail@plt+0x1274>
   130e4:	mov	r0, r6
   130e8:	mov	r1, r5
   130ec:	mov	r2, #1
   130f0:	bl	19a00 <__assert_fail@plt+0x7b6c>
   130f4:	mov	r0, r6
   130f8:	bl	18380 <__assert_fail@plt+0x64ec>
   130fc:	cmp	r0, r5
   13100:	bne	13f10 <__assert_fail@plt+0x207c>
   13104:	ldrh	r7, [r5, #56]	; 0x38
   13108:	cmp	r7, #13
   1310c:	cmpne	r7, #10
   13110:	bne	1346c <__assert_fail@plt+0x15d8>
   13114:	ldr	r4, [r5, #32]
   13118:	movw	r1, #26956	; 0x694c
   1311c:	mov	r0, #0
   13120:	mov	r2, #5
   13124:	mov	sl, #0
   13128:	movt	r1, #3
   1312c:	bl	11ad4 <dcgettext@plt>
   13130:	mov	r5, r0
   13134:	mov	r0, #4
   13138:	mov	r1, r8
   1313c:	bl	1e7b8 <__assert_fail@plt+0xc924>
   13140:	mov	r3, r0
   13144:	mov	r0, #0
   13148:	mov	r1, r4
   1314c:	mov	r2, r5
   13150:	bl	11bac <error@plt>
   13154:	b	13b74 <__assert_fail@plt+0x1ce0>
   13158:	sub	r1, r0, #1
   1315c:	cmp	r8, r1
   13160:	bne	13ef0 <__assert_fail@plt+0x205c>
   13164:	movw	r1, #33448	; 0x82a8
   13168:	add	r9, r0, r0, lsl #1
   1316c:	mov	r5, r4
   13170:	movt	r1, #4
   13174:	ldr	r1, [r1]
   13178:	mov	r7, r1
   1317c:	str	r1, [sp, #88]	; 0x58
   13180:	ldr	r0, [r7, r9, lsl #4]!
   13184:	ldr	r1, [r7, #4]
   13188:	str	r0, [sp, #76]	; 0x4c
   1318c:	adds	r0, r0, r6
   13190:	str	r1, [sp, #60]	; 0x3c
   13194:	adcs	r1, r1, sl
   13198:	adcs	r2, r3, #0
   1319c:	movne	r1, lr
   131a0:	movne	r0, lr
   131a4:	str	r1, [sp, #148]	; 0x94
   131a8:	str	r0, [sp, #144]	; 0x90
   131ac:	str	r1, [sp, #108]	; 0x6c
   131b0:	str	r0, [sp, #112]	; 0x70
   131b4:	ldr	r1, [r7, #8]
   131b8:	ldr	r0, [r7, #12]
   131bc:	adds	r2, r1, #1
   131c0:	str	r1, [sp, #48]	; 0x30
   131c4:	str	r0, [sp, #52]	; 0x34
   131c8:	adc	r1, r0, #0
   131cc:	ldr	r0, [sp, #100]	; 0x64
   131d0:	str	r2, [sp, #116]	; 0x74
   131d4:	str	r1, [sp, #84]	; 0x54
   131d8:	str	r2, [r0]
   131dc:	str	r1, [r0, #4]
   131e0:	str	ip, [sp, #72]	; 0x48
   131e4:	str	r4, [sp, #68]	; 0x44
   131e8:	ldr	r2, [r7, #16]!
   131ec:	mov	r0, r7
   131f0:	cmp	r2, r4
   131f4:	mov	r2, #0
   131f8:	ldr	r3, [r0, #4]!
   131fc:	movwlt	r2, #1
   13200:	subgt	r2, r2, #1
   13204:	cmp	r3, ip
   13208:	mov	r3, #0
   1320c:	str	r0, [sp, #56]	; 0x38
   13210:	movwlt	r3, #1
   13214:	subgt	r3, r3, #1
   13218:	add	r2, r3, r2, lsl #1
   1321c:	cmn	r2, #1
   13220:	ldmle	r7, {r5, ip}
   13224:	ldrle	r0, [sp, #96]	; 0x60
   13228:	stmle	r0, {r5, ip}
   1322c:	movw	r0, #33376	; 0x8260
   13230:	str	r7, [sp, #80]	; 0x50
   13234:	str	r9, [sp, #64]	; 0x40
   13238:	movt	r0, #4
   1323c:	ldrb	r2, [r0]
   13240:	cmp	r2, #0
   13244:	bne	132f0 <__assert_fail@plt+0x145c>
   13248:	ldr	r0, [sp, #88]	; 0x58
   1324c:	ldr	r1, [sp, #112]	; 0x70
   13250:	ldr	r7, [sp, #116]	; 0x74
   13254:	add	r2, r0, r9, lsl #4
   13258:	ldr	r9, [sp, #108]	; 0x6c
   1325c:	ldr	r3, [r2, #24]
   13260:	ldr	r0, [r2, #28]
   13264:	adds	r1, r3, r1
   13268:	adcs	r9, r0, r9
   1326c:	mov	r0, #0
   13270:	adcs	r3, r0, #0
   13274:	movne	r9, lr
   13278:	movne	r1, lr
   1327c:	str	r9, [sp, #148]	; 0x94
   13280:	str	r1, [sp, #144]	; 0x90
   13284:	str	r1, [sp, #112]	; 0x70
   13288:	ldr	r1, [sp, #84]	; 0x54
   1328c:	str	r9, [sp, #108]	; 0x6c
   13290:	ldr	r3, [r2, #32]
   13294:	ldr	r0, [r2, #36]	; 0x24
   13298:	adds	r7, r3, r7
   1329c:	adc	r1, r0, r1
   132a0:	ldr	r0, [sp, #100]	; 0x64
   132a4:	str	r7, [sp, #116]	; 0x74
   132a8:	str	r1, [sp, #84]	; 0x54
   132ac:	str	r7, [r0]
   132b0:	str	r1, [r0, #4]
   132b4:	ldr	r3, [r2, #40]!	; 0x28
   132b8:	cmp	r5, r3
   132bc:	ldr	r5, [r2, #4]
   132c0:	mov	r3, #0
   132c4:	movwgt	r3, #1
   132c8:	sublt	r3, r3, #1
   132cc:	cmp	ip, r5
   132d0:	mov	r5, #0
   132d4:	movwgt	r5, #1
   132d8:	sublt	r5, r5, #1
   132dc:	add	r3, r5, r3, lsl #1
   132e0:	cmn	r3, #1
   132e4:	ldrdle	r2, [r2]
   132e8:	ldrle	r0, [sp, #96]	; 0x60
   132ec:	strdle	r2, [r0]
   132f0:	ldr	r0, [sp, #88]	; 0x58
   132f4:	add	r2, r8, r8, lsl #1
   132f8:	mov	ip, #0
   132fc:	add	r3, r0, r2, lsl #4
   13300:	ldr	r0, [sp, #76]	; 0x4c
   13304:	ldr	r2, [r3, #24]!
   13308:	adds	r7, r2, r0
   1330c:	ldr	r5, [r3, #4]
   13310:	ldr	r0, [sp, #60]	; 0x3c
   13314:	mov	r4, r3
   13318:	ldr	r1, [r3, #12]
   1331c:	ldr	r2, [r4, #8]!
   13320:	adcs	r9, r5, r0
   13324:	mov	r0, #0
   13328:	adcs	r5, r0, #0
   1332c:	ldr	r0, [sp, #48]	; 0x30
   13330:	movne	r9, lr
   13334:	adds	r0, r2, r0
   13338:	str	r0, [sp, #60]	; 0x3c
   1333c:	str	r0, [r4]
   13340:	ldr	r0, [sp, #52]	; 0x34
   13344:	adc	r0, r1, r0
   13348:	cmp	r5, #0
   1334c:	movne	r7, lr
   13350:	str	r0, [sp, #52]	; 0x34
   13354:	str	r0, [r3, #12]
   13358:	stm	r3, {r7, r9}
   1335c:	ldr	r0, [sp, #80]	; 0x50
   13360:	ldr	r2, [r0]
   13364:	mov	r0, r3
   13368:	ldr	r1, [r0, #16]!
   1336c:	str	r0, [sp, #48]	; 0x30
   13370:	ldr	r0, [sp, #56]	; 0x38
   13374:	cmp	r1, r2
   13378:	mov	r2, r3
   1337c:	ldr	r5, [r2, #20]!
   13380:	movwgt	ip, #1
   13384:	sublt	ip, ip, #1
   13388:	ldr	r0, [r0]
   1338c:	str	r5, [sp, #76]	; 0x4c
   13390:	cmp	r5, r0
   13394:	mov	r5, #0
   13398:	movwgt	r5, #1
   1339c:	sublt	r5, r5, #1
   133a0:	add	r5, r5, ip, lsl #1
   133a4:	mov	ip, r1
   133a8:	cmn	r5, #1
   133ac:	bgt	133d0 <__assert_fail@plt+0x153c>
   133b0:	ldr	r0, [sp, #80]	; 0x50
   133b4:	ldr	ip, [r0]
   133b8:	ldr	r5, [r0, #4]
   133bc:	ldr	r0, [sp, #48]	; 0x30
   133c0:	str	ip, [r0]
   133c4:	str	r5, [r0, #4]
   133c8:	ldr	r0, [r2]
   133cc:	str	r0, [sp, #76]	; 0x4c
   133d0:	ldr	r0, [sp, #64]	; 0x40
   133d4:	ldr	r1, [sp, #88]	; 0x58
   133d8:	add	r2, r1, r0, lsl #4
   133dc:	ldr	r5, [r2, #24]
   133e0:	ldr	r1, [r2, #28]
   133e4:	adds	r0, r5, r7
   133e8:	mov	r5, #0
   133ec:	adcs	r1, r1, r9
   133f0:	adcs	r5, r5, #0
   133f4:	movne	r1, lr
   133f8:	movne	r0, lr
   133fc:	strd	r0, [r3]
   13400:	ldr	r0, [r2, #32]
   13404:	ldr	r3, [sp, #60]	; 0x3c
   13408:	ldr	r1, [r2, #36]	; 0x24
   1340c:	adds	r0, r0, r3
   13410:	ldr	r3, [sp, #52]	; 0x34
   13414:	adc	r1, r1, r3
   13418:	strd	r0, [r4]
   1341c:	ldr	r0, [r2, #40]!	; 0x28
   13420:	ldr	r3, [sp, #76]	; 0x4c
   13424:	ldr	r4, [sp, #68]	; 0x44
   13428:	ldr	r1, [r2, #4]
   1342c:	cmp	ip, r0
   13430:	mov	r0, #0
   13434:	ldr	ip, [sp, #72]	; 0x48
   13438:	movwgt	r0, #1
   1343c:	sublt	r0, r0, #1
   13440:	cmp	r3, r1
   13444:	mov	r1, #0
   13448:	movwgt	r1, #1
   1344c:	sublt	r1, r1, #1
   13450:	add	r0, r1, r0, lsl #1
   13454:	cmn	r0, #1
   13458:	ldrdle	r0, [r2]
   1345c:	ldrle	r2, [sp, #48]	; 0x30
   13460:	strdle	r0, [r2]
   13464:	ldr	r2, [sp, #84]	; 0x54
   13468:	b	1397c <__assert_fail@plt+0x1ae8>
   1346c:	ldrb	r1, [r6, #48]	; 0x30
   13470:	add	r0, r5, #64	; 0x40
   13474:	tst	r1, #64	; 0x40
   13478:	beq	134a8 <__assert_fail@plt+0x1614>
   1347c:	ldr	r1, [r5, #48]	; 0x30
   13480:	cmp	r1, #1
   13484:	blt	134a8 <__assert_fail@plt+0x1614>
   13488:	ldr	r1, [sp, #28]
   1348c:	ldrd	r2, [r0]
   13490:	ldr	r4, [r1]
   13494:	ldr	r1, [r1, #4]
   13498:	eor	r1, r1, r3
   1349c:	eor	r2, r4, r2
   134a0:	orrs	r1, r2, r1
   134a4:	bne	137f0 <__assert_fail@plt+0x195c>
   134a8:	movw	r1, #33364	; 0x8254
   134ac:	movt	r1, #4
   134b0:	ldrb	r1, [r1]
   134b4:	cmp	r1, #0
   134b8:	bne	13524 <__assert_fail@plt+0x1690>
   134bc:	movw	r1, #33396	; 0x8274
   134c0:	movt	r1, #4
   134c4:	ldrb	r1, [r1]
   134c8:	cmp	r1, #0
   134cc:	beq	13508 <__assert_fail@plt+0x1674>
   134d0:	ldrd	r2, [r0]
   134d4:	movw	r0, #33400	; 0x8278
   134d8:	movt	r0, #4
   134dc:	ldr	r0, [r0]
   134e0:	ldr	r4, [r5, #160]	; 0xa0
   134e4:	ldr	r1, [r5, #164]	; 0xa4
   134e8:	str	r4, [sp]
   134ec:	str	r1, [sp, #4]
   134f0:	bl	14b90 <__assert_fail@plt+0x2cfc>
   134f4:	cmn	r0, #1
   134f8:	ble	13fb4 <__assert_fail@plt+0x2120>
   134fc:	cmp	r0, #0
   13500:	bne	13524 <__assert_fail@plt+0x1690>
   13504:	b	137f0 <__assert_fail@plt+0x195c>
   13508:	ldr	r1, [r5, #80]	; 0x50
   1350c:	and	r1, r1, #61440	; 0xf000
   13510:	cmp	r1, #16384	; 0x4000
   13514:	beq	13524 <__assert_fail@plt+0x1690>
   13518:	ldr	r1, [r5, #84]	; 0x54
   1351c:	cmp	r1, #2
   13520:	bcs	134d0 <__assert_fail@plt+0x163c>
   13524:	mov	sl, #1
   13528:	cmp	r7, #1
   1352c:	beq	13b74 <__assert_fail@plt+0x1ce0>
   13530:	cmp	r7, #2
   13534:	beq	13580 <__assert_fail@plt+0x16ec>
   13538:	cmp	r7, #7
   1353c:	mov	r3, #0
   13540:	bne	13754 <__assert_fail@plt+0x18c0>
   13544:	ldr	r4, [r5, #32]
   13548:	mov	r0, #0
   1354c:	mov	r1, #3
   13550:	mov	r2, r8
   13554:	mov	sl, #0
   13558:	bl	1ea34 <__assert_fail@plt+0xcba0>
   1355c:	movw	r2, #27878	; 0x6ce6
   13560:	mov	r3, r0
   13564:	mov	r0, #0
   13568:	mov	r1, r4
   1356c:	movt	r2, #3
   13570:	bl	11bac <error@plt>
   13574:	mov	r3, #0
   13578:	mov	r7, #7
   1357c:	b	13754 <__assert_fail@plt+0x18c0>
   13580:	mov	r0, r6
   13584:	mov	r1, r5
   13588:	bl	31598 <__assert_fail@plt+0x1f704>
   1358c:	cmp	r0, #0
   13590:	beq	13b74 <__assert_fail@plt+0x1ce0>
   13594:	movw	r0, #33412	; 0x8284
   13598:	ldr	sl, [r5]
   1359c:	movt	r0, #4
   135a0:	ldr	r0, [r0]
   135a4:	cmp	r0, #0
   135a8:	bne	13650 <__assert_fail@plt+0x17bc>
   135ac:	bl	14a88 <__assert_fail@plt+0x2bf4>
   135b0:	movw	r1, #33412	; 0x8284
   135b4:	cmp	r0, #0
   135b8:	movt	r1, #4
   135bc:	str	r0, [r1]
   135c0:	beq	13fb4 <__assert_fail@plt+0x2120>
   135c4:	mov	r0, #0
   135c8:	bl	1c398 <__assert_fail@plt+0xa504>
   135cc:	cmp	r0, #0
   135d0:	beq	13650 <__assert_fail@plt+0x17bc>
   135d4:	mov	r4, r0
   135d8:	ldrb	r0, [r4, #24]
   135dc:	tst	r0, #3
   135e0:	bne	13638 <__assert_fail@plt+0x17a4>
   135e4:	ldr	r1, [r4, #4]
   135e8:	mov	r0, #3
   135ec:	sub	r2, fp, #160	; 0xa0
   135f0:	bl	11e28 <__xstat64@plt>
   135f4:	cmp	r0, #0
   135f8:	bne	13638 <__assert_fail@plt+0x17a4>
   135fc:	ldr	r1, [sp, #24]
   13600:	movw	r0, #33412	; 0x8284
   13604:	mov	r6, r8
   13608:	movt	r0, #4
   1360c:	ldr	r0, [r0]
   13610:	ldr	r8, [r1]
   13614:	ldr	r1, [r1, #4]
   13618:	ldr	r2, [fp, #-160]	; 0xffffff60
   1361c:	ldr	r3, [fp, #-156]	; 0xffffff64
   13620:	str	r8, [sp]
   13624:	mov	r8, r6
   13628:	str	r1, [sp, #4]
   1362c:	bl	14b90 <__assert_fail@plt+0x2cfc>
   13630:	cmn	r0, #1
   13634:	ble	13fb4 <__assert_fail@plt+0x2120>
   13638:	ldr	r6, [r4, #28]
   1363c:	mov	r0, r4
   13640:	bl	1cfc8 <__assert_fail@plt+0xb134>
   13644:	cmp	r6, #0
   13648:	mov	r4, r6
   1364c:	bne	135d8 <__assert_fail@plt+0x1744>
   13650:	cmp	sl, r5
   13654:	beq	13694 <__assert_fail@plt+0x1800>
   13658:	movw	r0, #33412	; 0x8284
   1365c:	ldrd	r2, [r5, #64]	; 0x40
   13660:	movt	r0, #4
   13664:	ldr	r0, [r0]
   13668:	ldr	r6, [r5, #160]	; 0xa0
   1366c:	ldr	r1, [r5, #164]	; 0xa4
   13670:	str	r6, [sp]
   13674:	str	r1, [sp, #4]
   13678:	bl	14cd4 <__assert_fail@plt+0x2e40>
   1367c:	cmp	r0, #0
   13680:	bgt	136dc <__assert_fail@plt+0x1848>
   13684:	ldr	r5, [r5, #4]
   13688:	cmp	r5, #0
   1368c:	cmpne	r5, sl
   13690:	bne	13658 <__assert_fail@plt+0x17c4>
   13694:	movw	r1, #26973	; 0x695d
   13698:	mov	r0, #0
   1369c:	mov	r2, #5
   136a0:	mov	sl, #0
   136a4:	movt	r1, #3
   136a8:	bl	11ad4 <dcgettext@plt>
   136ac:	mov	r4, r0
   136b0:	mov	r0, #0
   136b4:	mov	r1, #3
   136b8:	mov	r2, r8
   136bc:	bl	1ea34 <__assert_fail@plt+0xcba0>
   136c0:	mov	r3, r0
   136c4:	mov	r0, #0
   136c8:	mov	r1, #0
   136cc:	mov	r2, r4
   136d0:	bl	11bac <error@plt>
   136d4:	ldr	r6, [sp, #92]	; 0x5c
   136d8:	b	13b74 <__assert_fail@plt+0x1ce0>
   136dc:	ldr	r6, [sp, #92]	; 0x5c
   136e0:	mov	sl, #1
   136e4:	b	13b74 <__assert_fail@plt+0x1ce0>
   136e8:	ldrh	r7, [r5, #56]	; 0x38
   136ec:	ldr	r8, [r5, #28]
   136f0:	cmp	r7, #6
   136f4:	beq	13748 <__assert_fail@plt+0x18b4>
   136f8:	cmp	r7, #4
   136fc:	bne	137d4 <__assert_fail@plt+0x1940>
   13700:	ldr	r6, [r5, #32]
   13704:	movw	r1, #26886	; 0x6906
   13708:	mov	r0, #0
   1370c:	mov	r2, #5
   13710:	mov	sl, #0
   13714:	movt	r1, #3
   13718:	bl	11ad4 <dcgettext@plt>
   1371c:	mov	r4, r0
   13720:	mov	r0, #4
   13724:	mov	r1, r8
   13728:	mov	r7, #4
   1372c:	bl	1e7b8 <__assert_fail@plt+0xc924>
   13730:	mov	r3, r0
   13734:	mov	r0, #0
   13738:	mov	r1, r6
   1373c:	mov	r2, r4
   13740:	bl	11bac <error@plt>
   13744:	b	13750 <__assert_fail@plt+0x18bc>
   13748:	mov	r7, #6
   1374c:	mov	sl, #1
   13750:	mov	r3, #0
   13754:	movw	r0, #33362	; 0x8252
   13758:	str	r7, [sp, #120]	; 0x78
   1375c:	str	sl, [sp, #124]	; 0x7c
   13760:	str	r9, [sp, #128]	; 0x80
   13764:	movt	r0, #4
   13768:	ldrb	r0, [r0]
   1376c:	cmp	r0, #1
   13770:	bne	1379c <__assert_fail@plt+0x1908>
   13774:	ldr	r0, [r5, #112]	; 0x70
   13778:	ldr	sl, [r5, #116]	; 0x74
   1377c:	mov	r6, #0
   13780:	rsbs	r1, r0, #0
   13784:	rscs	r1, sl, #0
   13788:	movwlt	r6, #1
   1378c:	cmp	r6, #0
   13790:	moveq	sl, r6
   13794:	movne	r6, r0
   13798:	b	137ac <__assert_fail@plt+0x1918>
   1379c:	ldrd	r0, [r5, #128]	; 0x80
   137a0:	lsl	r1, r1, #9
   137a4:	lsl	r6, r0, #9
   137a8:	orr	sl, r1, r0, lsr #23
   137ac:	movw	r0, #33380	; 0x8264
   137b0:	str	r8, [sp, #104]	; 0x68
   137b4:	movt	r0, #4
   137b8:	ldr	r0, [r0]
   137bc:	cmp	r0, #2
   137c0:	beq	13820 <__assert_fail@plt+0x198c>
   137c4:	cmp	r0, #0
   137c8:	addne	r0, r5, #152	; 0x98
   137cc:	addeq	r0, r5, #144	; 0x90
   137d0:	b	13824 <__assert_fail@plt+0x1990>
   137d4:	movw	r0, #33344	; 0x8240
   137d8:	mov	r1, r8
   137dc:	movt	r0, #4
   137e0:	ldr	r0, [r0]
   137e4:	bl	15364 <__assert_fail@plt+0x34d0>
   137e8:	cmp	r0, #0
   137ec:	beq	130dc <__assert_fail@plt+0x1248>
   137f0:	mov	sl, #1
   137f4:	cmp	r7, #1
   137f8:	bne	13b74 <__assert_fail@plt+0x1ce0>
   137fc:	mov	r0, r6
   13800:	mov	r1, r5
   13804:	mov	r2, #4
   13808:	bl	19a00 <__assert_fail@plt+0x7b6c>
   1380c:	mov	r0, r6
   13810:	bl	18380 <__assert_fail@plt+0x64ec>
   13814:	cmp	r0, r5
   13818:	beq	13b74 <__assert_fail@plt+0x1ce0>
   1381c:	b	13f30 <__assert_fail@plt+0x209c>
   13820:	add	r0, r5, #136	; 0x88
   13824:	ldr	r8, [r5, #48]	; 0x30
   13828:	ldm	r0, {r4, ip}
   1382c:	ldr	r0, [sp, #100]	; 0x64
   13830:	mov	r1, #1
   13834:	str	sl, [sp, #148]	; 0x94
   13838:	str	r6, [sp, #144]	; 0x90
   1383c:	movw	r2, #33444	; 0x82a4
   13840:	movt	r2, #4
   13844:	stm	r0, {r1, r3}
   13848:	ldr	r0, [sp, #96]	; 0x60
   1384c:	stm	r0, {r4, ip}
   13850:	ldr	r1, [r2]
   13854:	cmp	r1, #0
   13858:	beq	13940 <__assert_fail@plt+0x1aac>
   1385c:	movw	r0, #33440	; 0x82a0
   13860:	mov	r2, #0
   13864:	movt	r0, #4
   13868:	ldr	r0, [r0]
   1386c:	cmp	r8, r0
   13870:	beq	13968 <__assert_fail@plt+0x1ad4>
   13874:	mvn	lr, #0
   13878:	bls	13158 <__assert_fail@plt+0x12c4>
   1387c:	movw	r5, #33444	; 0x82a4
   13880:	mov	r2, #1
   13884:	cmp	r1, r8
   13888:	movt	r5, #4
   1388c:	str	r2, [sp, #116]	; 0x74
   13890:	bhi	138d8 <__assert_fail@plt+0x1a44>
   13894:	movw	r0, #33448	; 0x82a8
   13898:	mov	r9, r5
   1389c:	mov	r1, r8
   138a0:	mov	r2, #96	; 0x60
   138a4:	mov	r7, ip
   138a8:	movt	r0, #4
   138ac:	mov	r5, r0
   138b0:	ldr	r0, [r0]
   138b4:	bl	30f6c <__assert_fail@plt+0x1f0d8>
   138b8:	str	r0, [r5]
   138bc:	lsl	r0, r8, #1
   138c0:	mov	ip, r7
   138c4:	mvn	lr, #0
   138c8:	str	r0, [r9]
   138cc:	movw	r0, #33440	; 0x82a0
   138d0:	movt	r0, #4
   138d4:	ldr	r0, [r0]
   138d8:	add	r1, r0, #1
   138dc:	cmp	r1, r8
   138e0:	bhi	13930 <__assert_fail@plt+0x1a9c>
   138e4:	movw	r2, #33448	; 0x82a8
   138e8:	add	r0, r0, r0, lsl #1
   138ec:	mov	r3, #-2147483648	; 0x80000000
   138f0:	movt	r2, #4
   138f4:	ldr	r2, [r2]
   138f8:	add	r0, r2, r0, lsl #4
   138fc:	add	r0, r0, #92	; 0x5c
   13900:	add	r1, r1, #1
   13904:	sub	r2, r0, #44	; 0x2c
   13908:	str	r3, [r0, #-28]	; 0xffffffe4
   1390c:	str	lr, [r0, #-24]	; 0xffffffe8
   13910:	str	r3, [r0, #-4]
   13914:	str	lr, [r0]
   13918:	vst1.64	{d8-d9}, [r2]
   1391c:	sub	r2, r0, #20
   13920:	add	r0, r0, #48	; 0x30
   13924:	cmp	r1, r8
   13928:	vst1.64	{d8-d9}, [r2]
   1392c:	bls	13900 <__assert_fail@plt+0x1a6c>
   13930:	str	r6, [sp, #112]	; 0x70
   13934:	str	sl, [sp, #108]	; 0x6c
   13938:	mov	r2, #0
   1393c:	b	1397c <__assert_fail@plt+0x1ae8>
   13940:	add	r0, r8, #10
   13944:	mov	r1, #48	; 0x30
   13948:	mov	r5, ip
   1394c:	str	r0, [r2]
   13950:	bl	313bc <__assert_fail@plt+0x1f528>
   13954:	movw	r1, #33448	; 0x82a8
   13958:	mov	ip, r5
   1395c:	mov	r2, #0
   13960:	movt	r1, #4
   13964:	str	r0, [r1]
   13968:	mov	r0, #1
   1396c:	str	r6, [sp, #112]	; 0x70
   13970:	str	sl, [sp, #108]	; 0x6c
   13974:	mvn	lr, #0
   13978:	str	r0, [sp, #116]	; 0x74
   1397c:	movw	r0, #33440	; 0x82a0
   13980:	movt	r0, #4
   13984:	str	r8, [r0]
   13988:	ldr	r0, [sp, #120]	; 0x78
   1398c:	orr	r9, r0, #2
   13990:	cmp	r9, #6
   13994:	bne	139ac <__assert_fail@plt+0x1b18>
   13998:	movw	r0, #33376	; 0x8260
   1399c:	movt	r0, #4
   139a0:	ldrb	r0, [r0]
   139a4:	cmp	r0, #0
   139a8:	bne	13a50 <__assert_fail@plt+0x1bbc>
   139ac:	movw	r0, #33448	; 0x82a8
   139b0:	mov	lr, r2
   139b4:	mov	r2, r8
   139b8:	movt	r0, #4
   139bc:	ldr	r3, [r0]
   139c0:	add	r0, r8, r8, lsl #1
   139c4:	mov	r8, r6
   139c8:	ldr	r0, [r3, r0, lsl #4]!
   139cc:	ldmib	r3, {r1, r7}
   139d0:	ldr	r5, [r3, #12]
   139d4:	ldr	r6, [r3, #20]
   139d8:	adds	r7, r7, #1
   139dc:	str	r6, [sp, #120]	; 0x78
   139e0:	mov	r6, #0
   139e4:	adc	r5, r5, #0
   139e8:	adds	r0, r0, r8
   139ec:	adcs	r1, r1, sl
   139f0:	adcs	r6, r6, #0
   139f4:	mvn	r6, #0
   139f8:	movne	r1, r6
   139fc:	mvn	r6, #0
   13a00:	movne	r0, r6
   13a04:	mov	r6, r8
   13a08:	mov	r8, r2
   13a0c:	mov	r2, lr
   13a10:	mvn	lr, #0
   13a14:	stm	r3, {r0, r1, r7}
   13a18:	str	r5, [r3, #12]
   13a1c:	ldr	r0, [r3, #16]!
   13a20:	ldr	r1, [sp, #120]	; 0x78
   13a24:	cmp	r0, r4
   13a28:	mov	r0, #0
   13a2c:	movwgt	r0, #1
   13a30:	sublt	r0, r0, #1
   13a34:	cmp	r1, ip
   13a38:	mov	r1, #0
   13a3c:	movwgt	r1, #1
   13a40:	sublt	r1, r1, #1
   13a44:	add	r0, r1, r0, lsl #1
   13a48:	cmn	r0, #1
   13a4c:	stmle	r3, {r4, ip}
   13a50:	movw	r0, #33416	; 0x8288
   13a54:	movt	r0, #4
   13a58:	mov	r5, r0
   13a5c:	ldr	r0, [r0]
   13a60:	ldmib	r5, {r1, r3, r7}
   13a64:	adds	r3, r3, #1
   13a68:	adc	r7, r7, #0
   13a6c:	adds	r0, r0, r6
   13a70:	mov	r6, #0
   13a74:	adcs	r1, r1, sl
   13a78:	adcs	r6, r6, #0
   13a7c:	movne	r1, lr
   13a80:	movne	r0, lr
   13a84:	stm	r5, {r0, r1, r3, r7}
   13a88:	ldr	r0, [r5, #16]
   13a8c:	ldr	r1, [r5, #20]
   13a90:	cmp	r0, r4
   13a94:	mov	r0, #0
   13a98:	movwgt	r0, #1
   13a9c:	sublt	r0, r0, #1
   13aa0:	cmp	r1, ip
   13aa4:	mov	r1, #0
   13aa8:	movwgt	r1, #1
   13aac:	sublt	r1, r1, #1
   13ab0:	add	r0, r1, r0, lsl #1
   13ab4:	cmn	r0, #1
   13ab8:	bgt	13acc <__assert_fail@plt+0x1c38>
   13abc:	movw	r0, #33416	; 0x8288
   13ac0:	movt	r0, #4
   13ac4:	str	r4, [r0, #16]
   13ac8:	str	ip, [r0, #20]
   13acc:	movw	r0, #33224	; 0x81c8
   13ad0:	cmp	r9, #6
   13ad4:	ldr	r9, [sp, #128]	; 0x80
   13ad8:	ldr	r6, [sp, #92]	; 0x5c
   13adc:	ldr	sl, [sp, #124]	; 0x7c
   13ae0:	movt	r0, #4
   13ae4:	ldr	r3, [r0]
   13ae8:	bne	13b38 <__assert_fail@plt+0x1ca4>
   13aec:	cmp	r8, r3
   13af0:	bhi	13b38 <__assert_fail@plt+0x1ca4>
   13af4:	movw	r0, #33377	; 0x8261
   13af8:	ldr	r7, [sp, #112]	; 0x70
   13afc:	ldr	r5, [sp, #108]	; 0x6c
   13b00:	movt	r0, #4
   13b04:	ldrb	r0, [r0]
   13b08:	cmp	r0, #0
   13b0c:	ldr	r0, [sp, #116]	; 0x74
   13b10:	movne	r5, r2
   13b14:	movne	r7, r0
   13b18:	movw	r0, #33368	; 0x8258
   13b1c:	movt	r0, #4
   13b20:	ldrd	r2, [r0]
   13b24:	cmn	r3, #1
   13b28:	ble	13b58 <__assert_fail@plt+0x1cc4>
   13b2c:	subs	r0, r7, r2
   13b30:	sbcs	r0, r5, r3
   13b34:	b	13b68 <__assert_fail@plt+0x1cd4>
   13b38:	movw	r0, #33361	; 0x8251
   13b3c:	movt	r0, #4
   13b40:	ldrb	r0, [r0]
   13b44:	cmp	r0, #1
   13b48:	bne	130d0 <__assert_fail@plt+0x123c>
   13b4c:	cmp	r8, r3
   13b50:	bls	13af4 <__assert_fail@plt+0x1c60>
   13b54:	b	13b74 <__assert_fail@plt+0x1ce0>
   13b58:	rsbs	r0, r2, #0
   13b5c:	rsc	r1, r3, #0
   13b60:	subs	r0, r0, r7
   13b64:	sbcs	r0, r1, r5
   13b68:	ldr	r1, [sp, #104]	; 0x68
   13b6c:	addcs	r0, sp, #144	; 0x90
   13b70:	blcs	140f4 <__assert_fail@plt+0x2260>
   13b74:	mov	r0, r6
   13b78:	and	r9, r9, sl
   13b7c:	bl	18380 <__assert_fail@plt+0x64ec>
   13b80:	mov	r5, r0
   13b84:	cmp	r0, #0
   13b88:	bne	136e8 <__assert_fail@plt+0x1854>
   13b8c:	b	13c30 <__assert_fail@plt+0x1d9c>
   13b90:	cmp	r4, #0
   13b94:	beq	13bf8 <__assert_fail@plt+0x1d64>
   13b98:	ldr	r0, [sp, #44]	; 0x2c
   13b9c:	mov	r6, r4
   13ba0:	bl	14930 <__assert_fail@plt+0x2a9c>
   13ba4:	mov	r5, r0
   13ba8:	mov	r0, #0
   13bac:	mov	r1, #3
   13bb0:	mov	r2, r6
   13bb4:	mov	r4, #0
   13bb8:	bl	1ea34 <__assert_fail@plt+0xcba0>
   13bbc:	movw	r1, #25723	; 0x647b
   13bc0:	mov	r6, r0
   13bc4:	mov	r0, #0
   13bc8:	mov	r2, #5
   13bcc:	movt	r1, #3
   13bd0:	bl	11ad4 <dcgettext@plt>
   13bd4:	movw	r2, #25753	; 0x6499
   13bd8:	str	r0, [sp, #4]
   13bdc:	mov	r0, #0
   13be0:	mov	r1, #0
   13be4:	mov	r3, r6
   13be8:	str	r5, [sp]
   13bec:	movt	r2, #3
   13bf0:	bl	11bac <error@plt>
   13bf4:	b	13ce0 <__assert_fail@plt+0x1e4c>
   13bf8:	movw	r1, #25723	; 0x647b
   13bfc:	mov	r0, #0
   13c00:	mov	r2, #5
   13c04:	mov	r4, #0
   13c08:	movt	r1, #3
   13c0c:	bl	11ad4 <dcgettext@plt>
   13c10:	movw	r2, #27878	; 0x6ce6
   13c14:	mov	r3, r0
   13c18:	mov	r0, #0
   13c1c:	mov	r1, #0
   13c20:	movt	r2, #3
   13c24:	bl	11bac <error@plt>
   13c28:	b	13ce0 <__assert_fail@plt+0x1e4c>
   13c2c:	mov	r9, #1
   13c30:	bl	11ca8 <__errno_location@plt>
   13c34:	ldr	r4, [r0]
   13c38:	mov	r5, r0
   13c3c:	cmp	r4, #0
   13c40:	beq	13c84 <__assert_fail@plt+0x1df0>
   13c44:	movw	r1, #26849	; 0x68e1
   13c48:	mov	r0, #0
   13c4c:	mov	r2, #5
   13c50:	mov	r9, #0
   13c54:	movt	r1, #3
   13c58:	bl	11ad4 <dcgettext@plt>
   13c5c:	ldr	r2, [r6, #24]
   13c60:	mov	r8, r0
   13c64:	mov	r0, #0
   13c68:	mov	r1, #3
   13c6c:	bl	1ea34 <__assert_fail@plt+0xcba0>
   13c70:	mov	r3, r0
   13c74:	mov	r0, #0
   13c78:	mov	r1, r4
   13c7c:	mov	r2, r8
   13c80:	bl	11bac <error@plt>
   13c84:	movw	r0, #33440	; 0x82a0
   13c88:	mov	r1, #0
   13c8c:	movt	r0, #4
   13c90:	str	r1, [r0]
   13c94:	mov	r0, r6
   13c98:	bl	181e0 <__assert_fail@plt+0x634c>
   13c9c:	cmp	r0, #0
   13ca0:	beq	13cd0 <__assert_fail@plt+0x1e3c>
   13ca4:	ldr	r4, [r5]
   13ca8:	movw	r1, #26869	; 0x68f5
   13cac:	mov	r0, #0
   13cb0:	mov	r2, #5
   13cb4:	mov	r9, #0
   13cb8:	movt	r1, #3
   13cbc:	bl	11ad4 <dcgettext@plt>
   13cc0:	mov	r2, r0
   13cc4:	mov	r0, #0
   13cc8:	mov	r1, r4
   13ccc:	bl	11bac <error@plt>
   13cd0:	ldr	r0, [sp, #40]	; 0x28
   13cd4:	cmp	r9, #0
   13cd8:	movwne	r9, #1
   13cdc:	and	r4, r0, r9
   13ce0:	ldr	r0, [sp, #44]	; 0x2c
   13ce4:	add	r1, sp, #132	; 0x84
   13ce8:	bl	14878 <__assert_fail@plt+0x29e4>
   13cec:	cmp	r4, #0
   13cf0:	mov	r5, r0
   13cf4:	movwne	r4, #1
   13cf8:	cmp	r0, #0
   13cfc:	bne	12ff0 <__assert_fail@plt+0x115c>
   13d00:	b	13d08 <__assert_fail@plt+0x1e74>
   13d04:	mov	r4, #1
   13d08:	ldr	r0, [sp, #132]	; 0x84
   13d0c:	cmp	r0, #2
   13d10:	beq	13d64 <__assert_fail@plt+0x1ed0>
   13d14:	cmp	r0, #4
   13d18:	bne	13fac <__assert_fail@plt+0x2118>
   13d1c:	bl	11ca8 <__errno_location@plt>
   13d20:	ldr	r5, [r0]
   13d24:	movw	r1, #25573	; 0x63e5
   13d28:	mov	r0, #0
   13d2c:	mov	r2, #5
   13d30:	mov	r4, #0
   13d34:	movt	r1, #3
   13d38:	bl	11ad4 <dcgettext@plt>
   13d3c:	ldr	r2, [sp, #36]	; 0x24
   13d40:	mov	r6, r0
   13d44:	mov	r0, #0
   13d48:	mov	r1, #3
   13d4c:	bl	1ea34 <__assert_fail@plt+0xcba0>
   13d50:	mov	r3, r0
   13d54:	mov	r0, #0
   13d58:	mov	r1, r5
   13d5c:	mov	r2, r6
   13d60:	bl	11bac <error@plt>
   13d64:	ldr	r0, [sp, #44]	; 0x2c
   13d68:	bl	14954 <__assert_fail@plt+0x2ac0>
   13d6c:	movw	r0, #33400	; 0x8278
   13d70:	movt	r0, #4
   13d74:	ldr	r0, [r0]
   13d78:	bl	14b58 <__assert_fail@plt+0x2cc4>
   13d7c:	movw	r0, #33412	; 0x8284
   13d80:	movt	r0, #4
   13d84:	ldr	r0, [r0]
   13d88:	cmp	r0, #0
   13d8c:	beq	13d94 <__assert_fail@plt+0x1f00>
   13d90:	bl	14b58 <__assert_fail@plt+0x2cc4>
   13d94:	ldr	r0, [sp, #36]	; 0x24
   13d98:	cmp	r0, #0
   13d9c:	beq	13e0c <__assert_fail@plt+0x1f78>
   13da0:	movw	r0, #33328	; 0x8230
   13da4:	movt	r0, #4
   13da8:	ldr	r0, [r0]
   13dac:	ldrb	r1, [r0]
   13db0:	tst	r1, #32
   13db4:	bne	13e04 <__assert_fail@plt+0x1f70>
   13db8:	bl	15cb4 <__assert_fail@plt+0x3e20>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13e0c <__assert_fail@plt+0x1f78>
   13dc4:	eors	r0, r4, #1
   13dc8:	bne	13e0c <__assert_fail@plt+0x1f78>
   13dcc:	movw	r1, #25764	; 0x64a4
   13dd0:	mov	r0, #0
   13dd4:	mov	r2, #5
   13dd8:	movt	r1, #3
   13ddc:	bl	11ad4 <dcgettext@plt>
   13de0:	ldr	r1, [sp, #36]	; 0x24
   13de4:	mov	r4, r0
   13de8:	mov	r0, #4
   13dec:	bl	1e7b8 <__assert_fail@plt+0xc924>
   13df0:	mov	r3, r0
   13df4:	mov	r0, #1
   13df8:	mov	r1, #0
   13dfc:	mov	r2, r4
   13e00:	bl	11bac <error@plt>
   13e04:	cmp	r4, #0
   13e08:	bne	13dcc <__assert_fail@plt+0x1f38>
   13e0c:	movw	r0, #33363	; 0x8253
   13e10:	movt	r0, #4
   13e14:	ldrb	r0, [r0]
   13e18:	cmp	r0, #1
   13e1c:	bne	13e44 <__assert_fail@plt+0x1fb0>
   13e20:	movw	r1, #25781	; 0x64b5
   13e24:	mov	r0, #0
   13e28:	mov	r2, #5
   13e2c:	movt	r1, #3
   13e30:	bl	11ad4 <dcgettext@plt>
   13e34:	mov	r1, r0
   13e38:	movw	r0, #33416	; 0x8288
   13e3c:	movt	r0, #4
   13e40:	bl	140f4 <__assert_fail@plt+0x2260>
   13e44:	eor	r0, r4, #1
   13e48:	sub	sp, fp, #48	; 0x30
   13e4c:	vpop	{d8-d9}
   13e50:	add	sp, sp, #4
   13e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e58:	movw	r8, #27684	; 0x6c24
   13e5c:	movt	r8, #3
   13e60:	add	r5, r5, #6
   13e64:	mov	r1, r8
   13e68:	mov	r2, #6
   13e6c:	mov	r0, r5
   13e70:	str	r5, [r4]
   13e74:	bl	11e4c <strncmp@plt>
   13e78:	cmp	r0, #0
   13e7c:	beq	13e60 <__assert_fail@plt+0x1fcc>
   13e80:	b	12db8 <__assert_fail@plt+0xf24>
   13e84:	movw	r0, #33228	; 0x81cc
   13e88:	movw	r2, #25164	; 0x624c
   13e8c:	movw	r7, #25152	; 0x6240
   13e90:	movw	r6, #25136	; 0x6230
   13e94:	movw	r5, #25118	; 0x621e
   13e98:	mov	r1, #0
   13e9c:	movt	r0, #4
   13ea0:	movt	r2, #3
   13ea4:	movt	r7, #3
   13ea8:	movt	r6, #3
   13eac:	movt	r5, #3
   13eb0:	ldr	r3, [r0]
   13eb4:	movw	r0, #33332	; 0x8234
   13eb8:	movt	r0, #4
   13ebc:	ldr	r0, [r0]
   13ec0:	stm	sp, {r5, r6, r7}
   13ec4:	str	r2, [sp, #12]
   13ec8:	movw	r2, #25104	; 0x6210
   13ecc:	str	r1, [sp, #16]
   13ed0:	movw	r1, #24958	; 0x617e
   13ed4:	movt	r1, #3
   13ed8:	movt	r2, #3
   13edc:	bl	30d74 <__assert_fail@plt+0x1eee0>
   13ee0:	mov	r0, #0
   13ee4:	bl	11c60 <exit@plt>
   13ee8:	mov	r0, #0
   13eec:	bl	11f90 <__assert_fail@plt+0xfc>
   13ef0:	movw	r0, #27159	; 0x6a17
   13ef4:	movw	r1, #25628	; 0x641c
   13ef8:	movw	r3, #26920	; 0x6928
   13efc:	movw	r2, #638	; 0x27e
   13f00:	movt	r0, #3
   13f04:	movt	r1, #3
   13f08:	movt	r3, #3
   13f0c:	bl	11e94 <__assert_fail@plt>
   13f10:	movw	r0, #26911	; 0x691f
   13f14:	movw	r1, #25628	; 0x641c
   13f18:	movw	r3, #26920	; 0x6928
   13f1c:	movw	r2, #527	; 0x20f
   13f20:	movt	r0, #3
   13f24:	movt	r1, #3
   13f28:	movt	r3, #3
   13f2c:	bl	11e94 <__assert_fail@plt>
   13f30:	movw	r0, #26911	; 0x691f
   13f34:	movw	r1, #25628	; 0x641c
   13f38:	movw	r3, #26920	; 0x6928
   13f3c:	mov	r2, #560	; 0x230
   13f40:	movt	r0, #3
   13f44:	movt	r1, #3
   13f48:	movt	r3, #3
   13f4c:	bl	11e94 <__assert_fail@plt>
   13f50:	ldr	r2, [r4]
   13f54:	ldr	r1, [sp, #144]	; 0x90
   13f58:	movw	r3, #27224	; 0x6a58
   13f5c:	movt	r3, #3
   13f60:	str	r2, [sp]
   13f64:	mov	r2, #116	; 0x74
   13f68:	bl	32ee0 <__assert_fail@plt+0x2104c>
   13f6c:	movw	r1, #25060	; 0x61e4
   13f70:	mov	r0, #0
   13f74:	mov	r2, #5
   13f78:	movt	r1, #3
   13f7c:	bl	11ad4 <dcgettext@plt>
   13f80:	mov	r2, r0
   13f84:	mov	r0, #1
   13f88:	mov	r1, #0
   13f8c:	bl	11bac <error@plt>
   13f90:	ldr	r2, [r4]
   13f94:	ldr	r1, [sp, #144]	; 0x90
   13f98:	movw	r3, #27224	; 0x6a58
   13f9c:	movt	r3, #3
   13fa0:	str	r2, [sp]
   13fa4:	mov	r2, #66	; 0x42
   13fa8:	bl	32ee0 <__assert_fail@plt+0x2104c>
   13fac:	cmp	r0, #3
   13fb0:	bne	13fec <__assert_fail@plt+0x2158>
   13fb4:	bl	31508 <__assert_fail@plt+0x1f674>
   13fb8:	mov	r0, #1
   13fbc:	bl	11f90 <__assert_fail@plt+0xfc>
   13fc0:	movw	r1, #25177	; 0x6259
   13fc4:	mov	r0, #0
   13fc8:	mov	r2, #5
   13fcc:	movt	r1, #3
   13fd0:	bl	11ad4 <dcgettext@plt>
   13fd4:	mov	r2, r0
   13fd8:	mov	r0, #0
   13fdc:	mov	r1, #0
   13fe0:	bl	11bac <error@plt>
   13fe4:	mov	r0, #1
   13fe8:	bl	11f90 <__assert_fail@plt+0xfc>
   13fec:	movw	r0, #25588	; 0x63f4
   13ff0:	movw	r1, #25628	; 0x641c
   13ff4:	movw	r3, #25637	; 0x6425
   13ff8:	movw	r2, #1081	; 0x439
   13ffc:	movt	r0, #3
   14000:	movt	r1, #3
   14004:	movt	r3, #3
   14008:	bl	11e94 <__assert_fail@plt>
   1400c:	movw	r1, #25477	; 0x6385
   14010:	mov	r0, #0
   14014:	mov	r2, #5
   14018:	movt	r1, #3
   1401c:	bl	11ad4 <dcgettext@plt>
   14020:	mov	r4, r0
   14024:	ldr	r0, [r5]
   14028:	ldr	r0, [r6, r0, lsl #2]
   1402c:	bl	1ece0 <__assert_fail@plt+0xce4c>
   14030:	mov	r3, r0
   14034:	mov	r0, #0
   14038:	mov	r1, #0
   1403c:	mov	r2, r4
   14040:	bl	11bac <error@plt>
   14044:	movw	r0, #33320	; 0x8228
   14048:	movw	r1, #25494	; 0x6396
   1404c:	mov	r2, #5
   14050:	movt	r0, #4
   14054:	movt	r1, #3
   14058:	ldr	r4, [r0]
   1405c:	mov	r0, #0
   14060:	bl	11ad4 <dcgettext@plt>
   14064:	movw	r2, #27155	; 0x6a13
   14068:	mov	r3, r0
   1406c:	mov	r0, r4
   14070:	mov	r1, #1
   14074:	movt	r2, #3
   14078:	bl	11d08 <__fprintf_chk@plt>
   1407c:	mov	r0, #1
   14080:	bl	11f90 <__assert_fail@plt+0xfc>
   14084:	movw	r1, #25276	; 0x62bc
   14088:	mov	r0, #0
   1408c:	mov	r2, #5
   14090:	movt	r1, #3
   14094:	bl	11ad4 <dcgettext@plt>
   14098:	mov	r2, r0
   1409c:	mov	r0, #0
   140a0:	mov	r1, #0
   140a4:	mov	r3, r5
   140a8:	bl	11bac <error@plt>
   140ac:	mov	r0, #1
   140b0:	bl	11f90 <__assert_fail@plt+0xfc>
   140b4:	bl	11ca8 <__errno_location@plt>
   140b8:	ldr	r5, [r0]
   140bc:	movw	r1, #25546	; 0x63ca
   140c0:	mov	r0, #0
   140c4:	mov	r2, #5
   140c8:	movt	r1, #3
   140cc:	bl	11ad4 <dcgettext@plt>
   140d0:	mov	r6, r0
   140d4:	mov	r0, #4
   140d8:	mov	r1, r4
   140dc:	bl	1e7b8 <__assert_fail@plt+0xc924>
   140e0:	mov	r3, r0
   140e4:	mov	r0, #1
   140e8:	mov	r1, r5
   140ec:	mov	r2, r6
   140f0:	bl	11bac <error@plt>
   140f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140f8:	add	fp, sp, #24
   140fc:	sub	sp, sp, #704	; 0x2c0
   14100:	mov	r5, r0
   14104:	movw	r0, #33377	; 0x8261
   14108:	mov	r8, r1
   1410c:	movt	r0, #4
   14110:	ldrb	r0, [r0]
   14114:	cmp	r0, #0
   14118:	mov	r0, r5
   1411c:	addne	r0, r0, #8
   14120:	ldrd	r0, [r0]
   14124:	and	r2, r0, r1
   14128:	cmn	r2, #1
   1412c:	beq	14168 <__assert_fail@plt+0x22d4>
   14130:	movw	r2, #33348	; 0x8244
   14134:	mov	r6, #0
   14138:	mov	r4, #1
   1413c:	movt	r2, #4
   14140:	ldr	r3, [r2]
   14144:	movw	r2, #33352	; 0x8248
   14148:	movt	r2, #4
   1414c:	ldm	r2, {r2, r7}
   14150:	stm	sp, {r4, r6}
   14154:	str	r2, [sp, #8]
   14158:	add	r2, sp, #20
   1415c:	str	r7, [sp, #12]
   14160:	bl	1b0c0 <__assert_fail@plt+0x922c>
   14164:	b	1417c <__assert_fail@plt+0x22e8>
   14168:	movw	r1, #27189	; 0x6a35
   1416c:	mov	r0, #0
   14170:	mov	r2, #5
   14174:	movt	r1, #3
   14178:	bl	11ad4 <dcgettext@plt>
   1417c:	movw	r4, #33332	; 0x8234
   14180:	movt	r4, #4
   14184:	ldr	r1, [r4]
   14188:	bl	119c0 <fputs_unlocked@plt>
   1418c:	movw	r0, #33378	; 0x8262
   14190:	movt	r0, #4
   14194:	ldrb	r0, [r0]
   14198:	cmp	r0, #1
   1419c:	bne	14274 <__assert_fail@plt+0x23e0>
   141a0:	ldr	r0, [r4]
   141a4:	ldr	r1, [r0, #20]
   141a8:	ldr	r2, [r0, #24]
   141ac:	cmp	r1, r2
   141b0:	bcs	142b0 <__assert_fail@plt+0x241c>
   141b4:	add	r2, r1, #1
   141b8:	str	r2, [r0, #20]
   141bc:	mov	r0, #9
   141c0:	strb	r0, [r1]
   141c4:	movw	r0, #33392	; 0x8270
   141c8:	add	r2, sp, #20
   141cc:	movt	r0, #4
   141d0:	ldr	r6, [r0]
   141d4:	movw	r0, #33384	; 0x8268
   141d8:	movt	r0, #4
   141dc:	ldr	r7, [r0]
   141e0:	ldrd	r0, [r5, #16]
   141e4:	str	r1, [fp, #-28]	; 0xffffffe4
   141e8:	str	r0, [fp, #-32]	; 0xffffffe0
   141ec:	sub	r1, fp, #32
   141f0:	mov	r0, r7
   141f4:	bl	3034c <__assert_fail@plt+0x1e4b8>
   141f8:	cmp	r0, #0
   141fc:	beq	14220 <__assert_fail@plt+0x238c>
   14200:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14204:	ldr	r0, [r4]
   14208:	add	r2, sp, #20
   1420c:	mov	r3, r7
   14210:	str	r1, [sp]
   14214:	mov	r1, r6
   14218:	bl	15dac <__assert_fail@plt+0x3f18>
   1421c:	b	14274 <__assert_fail@plt+0x23e0>
   14220:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14224:	sub	r2, fp, #53	; 0x35
   14228:	asr	r1, r0, #31
   1422c:	bl	1be30 <__assert_fail@plt+0x9f9c>
   14230:	movw	r1, #27198	; 0x6a3e
   14234:	mov	r5, r0
   14238:	mov	r0, #0
   1423c:	mov	r2, #5
   14240:	movt	r1, #3
   14244:	bl	11ad4 <dcgettext@plt>
   14248:	mov	r6, r0
   1424c:	mov	r0, r5
   14250:	bl	1ece0 <__assert_fail@plt+0xce4c>
   14254:	mov	r3, r0
   14258:	mov	r0, #0
   1425c:	mov	r1, #0
   14260:	mov	r2, r6
   14264:	bl	11bac <error@plt>
   14268:	ldr	r1, [r4]
   1426c:	mov	r0, r5
   14270:	bl	119c0 <fputs_unlocked@plt>
   14274:	movw	r0, #33360	; 0x8250
   14278:	movw	r1, #27183	; 0x6a2f
   1427c:	mov	r3, #10
   14280:	mov	r2, r8
   14284:	movt	r0, #4
   14288:	movt	r1, #3
   1428c:	ldrb	r0, [r0]
   14290:	cmp	r0, #0
   14294:	mov	r0, #1
   14298:	movwne	r3, #0
   1429c:	bl	11cf0 <__printf_chk@plt>
   142a0:	ldr	r0, [r4]
   142a4:	bl	11b28 <fflush_unlocked@plt>
   142a8:	sub	sp, fp, #24
   142ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142b0:	mov	r1, #9
   142b4:	bl	11d50 <__overflow@plt>
   142b8:	b	141c4 <__assert_fail@plt+0x2330>
   142bc:	mov	r0, #1
   142c0:	b	11f90 <__assert_fail@plt+0xfc>
   142c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142c8:	add	fp, sp, #28
   142cc:	sub	sp, sp, #12
   142d0:	mov	r4, r3
   142d4:	mov	r6, r2
   142d8:	mov	r5, r1
   142dc:	mov	sl, r0
   142e0:	bl	11c78 <strlen@plt>
   142e4:	ldr	r8, [r5]
   142e8:	cmp	r8, #0
   142ec:	beq	143a8 <__assert_fail@plt+0x2514>
   142f0:	mov	r7, r0
   142f4:	mov	r0, #0
   142f8:	add	r9, r5, #4
   142fc:	mov	r5, #0
   14300:	str	r6, [sp, #4]
   14304:	str	r0, [sp]
   14308:	mvn	r0, #0
   1430c:	str	r0, [sp, #8]
   14310:	mov	r0, r8
   14314:	mov	r1, sl
   14318:	mov	r2, r7
   1431c:	bl	11e4c <strncmp@plt>
   14320:	cmp	r0, #0
   14324:	bne	1437c <__assert_fail@plt+0x24e8>
   14328:	mov	r0, r8
   1432c:	bl	11c78 <strlen@plt>
   14330:	cmp	r0, r7
   14334:	beq	143ac <__assert_fail@plt+0x2518>
   14338:	ldr	r0, [sp, #8]
   1433c:	cmn	r0, #1
   14340:	beq	14378 <__assert_fail@plt+0x24e4>
   14344:	ldr	r0, [sp, #4]
   14348:	cmp	r0, #0
   1434c:	beq	1436c <__assert_fail@plt+0x24d8>
   14350:	ldr	r1, [sp, #8]
   14354:	mov	r2, r4
   14358:	mla	r0, r1, r4, r0
   1435c:	mov	r1, r6
   14360:	bl	11ac8 <memcmp@plt>
   14364:	cmp	r0, #0
   14368:	beq	1437c <__assert_fail@plt+0x24e8>
   1436c:	mov	r0, #1
   14370:	str	r0, [sp]
   14374:	b	1437c <__assert_fail@plt+0x24e8>
   14378:	str	r5, [sp, #8]
   1437c:	ldr	r8, [r9, r5, lsl #2]
   14380:	add	r6, r6, r4
   14384:	add	r5, r5, #1
   14388:	cmp	r8, #0
   1438c:	bne	14310 <__assert_fail@plt+0x247c>
   14390:	ldr	r0, [sp]
   14394:	tst	r0, #1
   14398:	ldr	r0, [sp, #8]
   1439c:	mvnne	r0, #1
   143a0:	sub	sp, fp, #28
   143a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143a8:	mvn	r5, #0
   143ac:	mov	r0, r5
   143b0:	sub	sp, fp, #28
   143b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143b8:	push	{r4, r5, r6, r7, fp, lr}
   143bc:	add	fp, sp, #16
   143c0:	mov	r5, r0
   143c4:	ldr	r0, [r1]
   143c8:	mvn	r4, #0
   143cc:	cmp	r0, #0
   143d0:	beq	14400 <__assert_fail@plt+0x256c>
   143d4:	add	r7, r1, #4
   143d8:	mov	r6, #0
   143dc:	mov	r1, r5
   143e0:	bl	11a14 <strcmp@plt>
   143e4:	cmp	r0, #0
   143e8:	moveq	r0, r6
   143ec:	popeq	{r4, r5, r6, r7, fp, pc}
   143f0:	ldr	r0, [r7, r6, lsl #2]
   143f4:	add	r6, r6, #1
   143f8:	cmp	r0, #0
   143fc:	bne	143dc <__assert_fail@plt+0x2548>
   14400:	mov	r0, r4
   14404:	pop	{r4, r5, r6, r7, fp, pc}
   14408:	push	{r4, r5, r6, sl, fp, lr}
   1440c:	add	fp, sp, #16
   14410:	sub	sp, sp, #8
   14414:	mov	r4, r1
   14418:	movw	r1, #27818	; 0x6caa
   1441c:	mov	r5, r0
   14420:	movw	r0, #27791	; 0x6c8f
   14424:	cmn	r2, #1
   14428:	mov	r2, #5
   1442c:	movt	r0, #3
   14430:	movt	r1, #3
   14434:	moveq	r1, r0
   14438:	mov	r0, #0
   1443c:	bl	11ad4 <dcgettext@plt>
   14440:	mov	r6, r0
   14444:	mov	r0, #0
   14448:	mov	r1, #8
   1444c:	mov	r2, r4
   14450:	bl	1e710 <__assert_fail@plt+0xc87c>
   14454:	mov	r4, r0
   14458:	mov	r0, #1
   1445c:	mov	r1, r5
   14460:	bl	1ecd0 <__assert_fail@plt+0xce3c>
   14464:	str	r0, [sp]
   14468:	mov	r0, #0
   1446c:	mov	r1, #0
   14470:	mov	r2, r6
   14474:	mov	r3, r4
   14478:	bl	11bac <error@plt>
   1447c:	sub	sp, fp, #16
   14480:	pop	{r4, r5, r6, sl, fp, pc}
   14484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14488:	add	fp, sp, #28
   1448c:	sub	sp, sp, #4
   14490:	mov	r5, r1
   14494:	movw	r1, #27847	; 0x6cc7
   14498:	mov	sl, r2
   1449c:	mov	r7, r0
   144a0:	mov	r0, #0
   144a4:	mov	r2, #5
   144a8:	mov	r8, #0
   144ac:	movt	r1, #3
   144b0:	bl	11ad4 <dcgettext@plt>
   144b4:	movw	r4, #33320	; 0x8228
   144b8:	movt	r4, #4
   144bc:	ldr	r1, [r4]
   144c0:	bl	119c0 <fputs_unlocked@plt>
   144c4:	ldr	r6, [r7]
   144c8:	cmp	r6, #0
   144cc:	beq	1456c <__assert_fail@plt+0x26d8>
   144d0:	add	r9, r7, #4
   144d4:	mov	r7, #0
   144d8:	str	sl, [sp]
   144dc:	cmp	r8, #0
   144e0:	beq	144fc <__assert_fail@plt+0x2668>
   144e4:	mov	r0, r7
   144e8:	mov	r1, r5
   144ec:	mov	r2, sl
   144f0:	bl	11ac8 <memcmp@plt>
   144f4:	cmp	r0, #0
   144f8:	beq	14528 <__assert_fail@plt+0x2694>
   144fc:	ldr	r7, [r4]
   14500:	mov	r0, r6
   14504:	bl	1ece0 <__assert_fail@plt+0xce4c>
   14508:	movw	r2, #27868	; 0x6cdc
   1450c:	mov	r3, r0
   14510:	mov	r0, r7
   14514:	mov	r1, #1
   14518:	movt	r2, #3
   1451c:	bl	11d08 <__fprintf_chk@plt>
   14520:	mov	r7, r5
   14524:	b	14558 <__assert_fail@plt+0x26c4>
   14528:	mov	sl, r9
   1452c:	ldr	r9, [r4]
   14530:	mov	r0, r6
   14534:	bl	1ece0 <__assert_fail@plt+0xce4c>
   14538:	mov	r3, r0
   1453c:	mov	r0, r9
   14540:	mov	r9, sl
   14544:	ldr	sl, [sp]
   14548:	movw	r2, #27876	; 0x6ce4
   1454c:	mov	r1, #1
   14550:	movt	r2, #3
   14554:	bl	11d08 <__fprintf_chk@plt>
   14558:	ldr	r6, [r9, -r8, lsl #2]
   1455c:	add	r5, r5, sl
   14560:	sub	r8, r8, #1
   14564:	cmp	r6, #0
   14568:	bne	144dc <__assert_fail@plt+0x2648>
   1456c:	ldr	r0, [r4]
   14570:	ldr	r1, [r0, #20]
   14574:	ldr	r2, [r0, #24]
   14578:	cmp	r1, r2
   1457c:	addcc	r2, r1, #1
   14580:	strcc	r2, [r0, #20]
   14584:	movcc	r0, #10
   14588:	strbcc	r0, [r1]
   1458c:	subcc	sp, fp, #28
   14590:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14594:	mov	r1, #10
   14598:	sub	sp, fp, #28
   1459c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a0:	b	11d50 <__overflow@plt>
   145a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a8:	add	fp, sp, #28
   145ac:	sub	sp, sp, #20
   145b0:	mov	r9, r0
   145b4:	ldr	r0, [fp, #16]
   145b8:	mov	r8, r3
   145bc:	mov	sl, r2
   145c0:	mov	r7, r1
   145c4:	cmp	r0, #0
   145c8:	beq	146a0 <__assert_fail@plt+0x280c>
   145cc:	mov	r0, r7
   145d0:	str	r9, [sp, #8]
   145d4:	str	r8, [sp, #16]
   145d8:	bl	11c78 <strlen@plt>
   145dc:	ldr	r9, [sl]
   145e0:	cmp	r9, #0
   145e4:	beq	146e0 <__assert_fail@plt+0x284c>
   145e8:	str	sl, [sp, #4]
   145ec:	add	r8, sl, #4
   145f0:	ldr	sl, [sp, #16]
   145f4:	mov	r4, r0
   145f8:	mov	r0, #0
   145fc:	mvn	r6, #0
   14600:	mov	r5, #0
   14604:	str	r0, [sp, #12]
   14608:	mov	r0, r9
   1460c:	mov	r1, r7
   14610:	mov	r2, r4
   14614:	bl	11e4c <strncmp@plt>
   14618:	cmp	r0, #0
   1461c:	bne	1466c <__assert_fail@plt+0x27d8>
   14620:	mov	r0, r9
   14624:	bl	11c78 <strlen@plt>
   14628:	cmp	r0, r4
   1462c:	beq	146ec <__assert_fail@plt+0x2858>
   14630:	cmn	r6, #1
   14634:	beq	14668 <__assert_fail@plt+0x27d4>
   14638:	ldr	r0, [sp, #16]
   1463c:	cmp	r0, #0
   14640:	beq	1465c <__assert_fail@plt+0x27c8>
   14644:	ldr	r2, [fp, #8]
   14648:	mov	r1, sl
   1464c:	mla	r0, r6, r2, r0
   14650:	bl	11ac8 <memcmp@plt>
   14654:	cmp	r0, #0
   14658:	beq	1466c <__assert_fail@plt+0x27d8>
   1465c:	mov	r0, #1
   14660:	str	r0, [sp, #12]
   14664:	b	1466c <__assert_fail@plt+0x27d8>
   14668:	mov	r6, r5
   1466c:	ldr	r9, [r8, r5, lsl #2]
   14670:	ldr	r0, [fp, #8]
   14674:	add	r5, r5, #1
   14678:	add	sl, sl, r0
   1467c:	cmp	r9, #0
   14680:	bne	14608 <__assert_fail@plt+0x2774>
   14684:	ldr	r0, [sp, #12]
   14688:	ldr	r8, [sp, #16]
   1468c:	ldr	sl, [sp, #4]
   14690:	ldr	r9, [sp, #8]
   14694:	tst	r0, #1
   14698:	beq	146fc <__assert_fail@plt+0x2868>
   1469c:	b	14708 <__assert_fail@plt+0x2874>
   146a0:	ldr	r0, [sl]
   146a4:	movw	r4, #27791	; 0x6c8f
   146a8:	movt	r4, #3
   146ac:	cmp	r0, #0
   146b0:	beq	1471c <__assert_fail@plt+0x2888>
   146b4:	add	r5, sl, #4
   146b8:	mov	r6, #0
   146bc:	mov	r1, r7
   146c0:	bl	11a14 <strcmp@plt>
   146c4:	cmp	r0, #0
   146c8:	beq	146fc <__assert_fail@plt+0x2868>
   146cc:	ldr	r0, [r5, r6, lsl #2]
   146d0:	add	r6, r6, #1
   146d4:	cmp	r0, #0
   146d8:	bne	146bc <__assert_fail@plt+0x2828>
   146dc:	b	1471c <__assert_fail@plt+0x2888>
   146e0:	ldr	r8, [sp, #16]
   146e4:	ldr	r9, [sp, #8]
   146e8:	b	14714 <__assert_fail@plt+0x2880>
   146ec:	ldr	r8, [sp, #16]
   146f0:	ldr	sl, [sp, #4]
   146f4:	ldr	r9, [sp, #8]
   146f8:	mov	r6, r5
   146fc:	cmn	r6, #1
   14700:	bgt	14784 <__assert_fail@plt+0x28f0>
   14704:	beq	14714 <__assert_fail@plt+0x2880>
   14708:	movw	r4, #27818	; 0x6caa
   1470c:	movt	r4, #3
   14710:	b	1471c <__assert_fail@plt+0x2888>
   14714:	movw	r4, #27791	; 0x6c8f
   14718:	movt	r4, #3
   1471c:	ldr	r6, [fp, #12]
   14720:	mov	r0, #0
   14724:	mov	r1, r4
   14728:	mov	r2, #5
   1472c:	bl	11ad4 <dcgettext@plt>
   14730:	mov	r4, r0
   14734:	mov	r0, #0
   14738:	mov	r1, #8
   1473c:	mov	r2, r7
   14740:	bl	1e710 <__assert_fail@plt+0xc87c>
   14744:	mov	r5, r0
   14748:	mov	r0, #1
   1474c:	mov	r1, r9
   14750:	bl	1ecd0 <__assert_fail@plt+0xce3c>
   14754:	str	r0, [sp]
   14758:	mov	r0, #0
   1475c:	mov	r1, #0
   14760:	mov	r2, r4
   14764:	mov	r3, r5
   14768:	bl	11bac <error@plt>
   1476c:	ldr	r2, [fp, #8]
   14770:	mov	r0, sl
   14774:	mov	r1, r8
   14778:	bl	14484 <__assert_fail@plt+0x25f0>
   1477c:	blx	r6
   14780:	mvn	r6, #0
   14784:	mov	r0, r6
   14788:	sub	sp, fp, #28
   1478c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14790:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14794:	add	fp, sp, #24
   14798:	ldr	r6, [r1]
   1479c:	cmp	r6, #0
   147a0:	beq	14804 <__assert_fail@plt+0x2970>
   147a4:	mov	r8, r1
   147a8:	mov	r7, r2
   147ac:	mov	r1, r2
   147b0:	mov	r2, r3
   147b4:	mov	r4, r3
   147b8:	mov	r9, r0
   147bc:	bl	11ac8 <memcmp@plt>
   147c0:	cmp	r0, #0
   147c4:	beq	147fc <__assert_fail@plt+0x2968>
   147c8:	add	r7, r7, r4
   147cc:	add	r5, r8, #4
   147d0:	ldr	r6, [r5]
   147d4:	cmp	r6, #0
   147d8:	beq	14804 <__assert_fail@plt+0x2970>
   147dc:	mov	r0, r9
   147e0:	mov	r1, r7
   147e4:	mov	r2, r4
   147e8:	bl	11ac8 <memcmp@plt>
   147ec:	add	r7, r7, r4
   147f0:	add	r5, r5, #4
   147f4:	cmp	r0, #0
   147f8:	bne	147d0 <__assert_fail@plt+0x293c>
   147fc:	mov	r0, r6
   14800:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14804:	mov	r6, #0
   14808:	mov	r0, r6
   1480c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14810:	push	{r4, sl, fp, lr}
   14814:	add	fp, sp, #8
   14818:	mov	r4, r0
   1481c:	mov	r0, #24
   14820:	bl	33c98 <__assert_fail@plt+0x21e04>
   14824:	cmp	r0, #0
   14828:	movne	r1, #0
   1482c:	strne	r1, [r0]
   14830:	strne	r4, [r0, #16]
   14834:	strne	r4, [r0, #20]
   14838:	popne	{r4, sl, fp, pc}
   1483c:	mov	r0, #0
   14840:	pop	{r4, sl, fp, pc}
   14844:	push	{r4, sl, fp, lr}
   14848:	add	fp, sp, #8
   1484c:	mov	r4, r0
   14850:	mov	r0, #24
   14854:	bl	33c98 <__assert_fail@plt+0x21e04>
   14858:	cmp	r0, #0
   1485c:	moveq	r0, #0
   14860:	popeq	{r4, sl, fp, pc}
   14864:	mov	r1, r0
   14868:	vmov.i32	q8, #0	; 0x00000000
   1486c:	str	r4, [r1], #4
   14870:	vst1.32	{d16-d17}, [r1]
   14874:	pop	{r4, sl, fp, pc}
   14878:	push	{r4, r5, r6, sl, fp, lr}
   1487c:	add	fp, sp, #16
   14880:	ldr	r3, [r0]
   14884:	mov	r4, r1
   14888:	mov	r5, r0
   1488c:	cmp	r3, #0
   14890:	beq	148cc <__assert_fail@plt+0x2a38>
   14894:	add	r0, r5, #8
   14898:	add	r1, r5, #12
   1489c:	mov	r2, #0
   148a0:	mov	r6, #0
   148a4:	bl	11e1c <getdelim@plt>
   148a8:	cmn	r0, #1
   148ac:	ble	148fc <__assert_fail@plt+0x2a68>
   148b0:	mov	r0, #1
   148b4:	str	r0, [r4]
   148b8:	ldmib	r5, {r0, r6}
   148bc:	add	r0, r0, #1
   148c0:	str	r0, [r5, #4]
   148c4:	mov	r0, r6
   148c8:	pop	{r4, r5, r6, sl, fp, pc}
   148cc:	ldr	r0, [r5, #20]
   148d0:	ldr	r0, [r0]
   148d4:	cmp	r0, #0
   148d8:	beq	1491c <__assert_fail@plt+0x2a88>
   148dc:	mov	r0, #1
   148e0:	str	r0, [r4]
   148e4:	ldr	r0, [r5, #20]
   148e8:	add	r1, r0, #4
   148ec:	str	r1, [r5, #20]
   148f0:	ldr	r6, [r0]
   148f4:	mov	r0, r6
   148f8:	pop	{r4, r5, r6, sl, fp, pc}
   148fc:	ldr	r0, [r5]
   14900:	bl	11c6c <feof@plt>
   14904:	cmp	r0, #0
   14908:	mov	r1, #2
   1490c:	mov	r0, r6
   14910:	movweq	r1, #4
   14914:	str	r1, [r4]
   14918:	pop	{r4, r5, r6, sl, fp, pc}
   1491c:	mov	r0, #2
   14920:	mov	r6, #0
   14924:	str	r0, [r4]
   14928:	mov	r0, r6
   1492c:	pop	{r4, r5, r6, sl, fp, pc}
   14930:	ldr	r1, [r0]
   14934:	cmp	r1, #0
   14938:	ldrne	r0, [r0, #4]
   1493c:	bxne	lr
   14940:	ldr	r1, [r0, #16]
   14944:	ldr	r0, [r0, #20]
   14948:	sub	r0, r0, r1
   1494c:	asr	r0, r0, #2
   14950:	bx	lr
   14954:	push	{r4, sl, fp, lr}
   14958:	add	fp, sp, #8
   1495c:	mov	r4, r0
   14960:	ldr	r0, [r0]
   14964:	cmp	r0, #0
   14968:	beq	14974 <__assert_fail@plt+0x2ae0>
   1496c:	ldr	r0, [r4, #8]
   14970:	bl	17754 <__assert_fail@plt+0x58c0>
   14974:	mov	r0, r4
   14978:	pop	{r4, sl, fp, lr}
   1497c:	b	17754 <__assert_fail@plt+0x58c0>
   14980:	movw	r1, #33452	; 0x82ac
   14984:	movt	r1, #4
   14988:	str	r0, [r1]
   1498c:	bx	lr
   14990:	movw	r1, #33456	; 0x82b0
   14994:	movt	r1, #4
   14998:	strb	r0, [r1]
   1499c:	bx	lr
   149a0:	push	{r4, r5, r6, sl, fp, lr}
   149a4:	add	fp, sp, #16
   149a8:	sub	sp, sp, #8
   149ac:	movw	r0, #33332	; 0x8234
   149b0:	movt	r0, #4
   149b4:	ldr	r0, [r0]
   149b8:	bl	34764 <__assert_fail@plt+0x228d0>
   149bc:	cmp	r0, #0
   149c0:	beq	149e8 <__assert_fail@plt+0x2b54>
   149c4:	movw	r0, #33456	; 0x82b0
   149c8:	movt	r0, #4
   149cc:	ldrb	r0, [r0]
   149d0:	cmp	r0, #0
   149d4:	beq	14a08 <__assert_fail@plt+0x2b74>
   149d8:	bl	11ca8 <__errno_location@plt>
   149dc:	ldr	r0, [r0]
   149e0:	cmp	r0, #32
   149e4:	bne	14a08 <__assert_fail@plt+0x2b74>
   149e8:	movw	r0, #33320	; 0x8228
   149ec:	movt	r0, #4
   149f0:	ldr	r0, [r0]
   149f4:	bl	34764 <__assert_fail@plt+0x228d0>
   149f8:	cmp	r0, #0
   149fc:	subeq	sp, fp, #16
   14a00:	popeq	{r4, r5, r6, sl, fp, pc}
   14a04:	b	14a78 <__assert_fail@plt+0x2be4>
   14a08:	movw	r1, #27881	; 0x6ce9
   14a0c:	mov	r0, #0
   14a10:	mov	r2, #5
   14a14:	movt	r1, #3
   14a18:	bl	11ad4 <dcgettext@plt>
   14a1c:	mov	r4, r0
   14a20:	movw	r0, #33452	; 0x82ac
   14a24:	movt	r0, #4
   14a28:	ldr	r6, [r0]
   14a2c:	bl	11ca8 <__errno_location@plt>
   14a30:	ldr	r5, [r0]
   14a34:	cmp	r6, #0
   14a38:	bne	14a54 <__assert_fail@plt+0x2bc0>
   14a3c:	movw	r2, #27878	; 0x6ce6
   14a40:	mov	r0, #0
   14a44:	mov	r1, r5
   14a48:	mov	r3, r4
   14a4c:	movt	r2, #3
   14a50:	b	14a74 <__assert_fail@plt+0x2be0>
   14a54:	mov	r0, r6
   14a58:	bl	1e958 <__assert_fail@plt+0xcac4>
   14a5c:	movw	r2, #27893	; 0x6cf5
   14a60:	mov	r3, r0
   14a64:	str	r4, [sp]
   14a68:	mov	r0, #0
   14a6c:	mov	r1, r5
   14a70:	movt	r2, #3
   14a74:	bl	11bac <error@plt>
   14a78:	movw	r0, #33236	; 0x81d4
   14a7c:	movt	r0, #4
   14a80:	ldr	r0, [r0]
   14a84:	bl	11a80 <_exit@plt>
   14a88:	push	{r4, r5, fp, lr}
   14a8c:	add	fp, sp, #8
   14a90:	sub	sp, sp, #8
   14a94:	mov	r0, #12
   14a98:	bl	33c98 <__assert_fail@plt+0x21e04>
   14a9c:	mov	r4, r0
   14aa0:	cmp	r0, #0
   14aa4:	beq	14af8 <__assert_fail@plt+0x2c64>
   14aa8:	movw	r0, #19256	; 0x4b38
   14aac:	movw	r2, #19204	; 0x4b04
   14ab0:	movw	r3, #19224	; 0x4b18
   14ab4:	mov	r1, #0
   14ab8:	mov	r5, #0
   14abc:	movt	r0, #1
   14ac0:	movt	r2, #1
   14ac4:	movt	r3, #1
   14ac8:	str	r0, [sp]
   14acc:	mov	r0, #11
   14ad0:	bl	1a298 <__assert_fail@plt+0x8404>
   14ad4:	cmp	r0, #0
   14ad8:	str	r0, [r4]
   14adc:	beq	14aec <__assert_fail@plt+0x2c58>
   14ae0:	str	r5, [r4, #4]
   14ae4:	str	r5, [r4, #8]
   14ae8:	b	14af8 <__assert_fail@plt+0x2c64>
   14aec:	mov	r0, r4
   14af0:	bl	17754 <__assert_fail@plt+0x58c0>
   14af4:	mov	r4, #0
   14af8:	mov	r0, r4
   14afc:	sub	sp, fp, #8
   14b00:	pop	{r4, r5, fp, pc}
   14b04:	ldm	r0, {r0, r3}
   14b08:	eor	r0, r0, r3
   14b0c:	udiv	r2, r0, r1
   14b10:	mls	r0, r2, r1, r0
   14b14:	bx	lr
   14b18:	ldrd	r2, [r1]
   14b1c:	ldrd	r0, [r0]
   14b20:	eor	r1, r1, r3
   14b24:	eor	r0, r0, r2
   14b28:	orr	r0, r0, r1
   14b2c:	clz	r0, r0
   14b30:	lsr	r0, r0, #5
   14b34:	bx	lr
   14b38:	push	{r4, sl, fp, lr}
   14b3c:	add	fp, sp, #8
   14b40:	mov	r4, r0
   14b44:	ldr	r0, [r0, #8]
   14b48:	bl	1a590 <__assert_fail@plt+0x86fc>
   14b4c:	mov	r0, r4
   14b50:	pop	{r4, sl, fp, lr}
   14b54:	b	17754 <__assert_fail@plt+0x58c0>
   14b58:	push	{r4, sl, fp, lr}
   14b5c:	add	fp, sp, #8
   14b60:	mov	r4, r0
   14b64:	ldr	r0, [r0]
   14b68:	bl	1a590 <__assert_fail@plt+0x86fc>
   14b6c:	ldr	r0, [r4, #4]
   14b70:	cmp	r0, #0
   14b74:	beq	14b7c <__assert_fail@plt+0x2ce8>
   14b78:	bl	1bd68 <__assert_fail@plt+0x9ed4>
   14b7c:	ldr	r0, [r4, #8]
   14b80:	bl	17754 <__assert_fail@plt+0x58c0>
   14b84:	mov	r0, r4
   14b88:	pop	{r4, sl, fp, lr}
   14b8c:	b	17754 <__assert_fail@plt+0x58c0>
   14b90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b94:	add	fp, sp, #24
   14b98:	sub	sp, sp, #8
   14b9c:	ldr	r7, [r0, #8]
   14ba0:	ldr	r8, [fp, #12]
   14ba4:	ldr	r9, [fp, #8]
   14ba8:	mov	r5, r3
   14bac:	mov	r4, r2
   14bb0:	mov	r6, r0
   14bb4:	cmp	r7, #0
   14bb8:	beq	14be0 <__assert_fail@plt+0x2d4c>
   14bbc:	ldrd	r0, [r7]
   14bc0:	eor	r1, r1, r5
   14bc4:	eor	r0, r0, r4
   14bc8:	orrs	r0, r0, r1
   14bcc:	bne	14bf8 <__assert_fail@plt+0x2d64>
   14bd0:	ldr	r5, [r7, #8]
   14bd4:	cmp	r5, #0
   14bd8:	bne	14c60 <__assert_fail@plt+0x2dcc>
   14bdc:	b	14cc8 <__assert_fail@plt+0x2e34>
   14be0:	mov	r0, #16
   14be4:	bl	33c98 <__assert_fail@plt+0x21e04>
   14be8:	cmp	r0, #0
   14bec:	str	r0, [r6, #8]
   14bf0:	beq	14cc8 <__assert_fail@plt+0x2e34>
   14bf4:	mov	r7, r0
   14bf8:	strd	r4, [r7]
   14bfc:	mov	r1, r7
   14c00:	ldr	r0, [r6]
   14c04:	bl	1addc <__assert_fail@plt+0x8f48>
   14c08:	cmp	r0, #0
   14c0c:	beq	14cc8 <__assert_fail@plt+0x2e34>
   14c10:	cmp	r7, r0
   14c14:	beq	14c2c <__assert_fail@plt+0x2d98>
   14c18:	ldr	r5, [r0, #8]
   14c1c:	str	r5, [r7, #8]
   14c20:	cmp	r5, #0
   14c24:	bne	14c60 <__assert_fail@plt+0x2dcc>
   14c28:	b	14cc8 <__assert_fail@plt+0x2e34>
   14c2c:	movw	r2, #19992	; 0x4e18
   14c30:	mov	r0, #0
   14c34:	mov	r1, #0
   14c38:	mov	r3, #0
   14c3c:	str	r0, [r6, #8]
   14c40:	str	r0, [sp]
   14c44:	movt	r2, #1
   14c48:	movw	r0, #1021	; 0x3fd
   14c4c:	bl	1a298 <__assert_fail@plt+0x8404>
   14c50:	mov	r5, r0
   14c54:	str	r0, [r7, #8]
   14c58:	cmp	r5, #0
   14c5c:	beq	14cc8 <__assert_fail@plt+0x2e34>
   14c60:	subs	r0, r9, #1
   14c64:	mvn	r2, #-2147483646	; 0x80000002
   14c68:	sbc	r1, r8, #0
   14c6c:	subs	r0, r2, r0
   14c70:	rscs	r0, r1, #0
   14c74:	bcs	14cb0 <__assert_fail@plt+0x2e1c>
   14c78:	ldr	r0, [r6, #4]
   14c7c:	cmp	r0, #0
   14c80:	bne	14c98 <__assert_fail@plt+0x2e04>
   14c84:	mvn	r0, #-2147483648	; 0x80000000
   14c88:	bl	1bcb8 <__assert_fail@plt+0x9e24>
   14c8c:	cmp	r0, #0
   14c90:	str	r0, [r6, #4]
   14c94:	beq	14cc8 <__assert_fail@plt+0x2e34>
   14c98:	mov	r2, r9
   14c9c:	mov	r3, r8
   14ca0:	bl	1bd90 <__assert_fail@plt+0x9efc>
   14ca4:	mov	r9, r0
   14ca8:	cmn	r0, #1
   14cac:	beq	14cc8 <__assert_fail@plt+0x2e34>
   14cb0:	mov	r0, r5
   14cb4:	mov	r1, r9
   14cb8:	mov	r2, #0
   14cbc:	sub	sp, fp, #24
   14cc0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   14cc4:	b	1aa90 <__assert_fail@plt+0x8bfc>
   14cc8:	mvn	r0, #0
   14ccc:	sub	sp, fp, #24
   14cd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14cd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cd8:	add	fp, sp, #24
   14cdc:	sub	sp, sp, #8
   14ce0:	ldr	r6, [r0, #8]
   14ce4:	mov	r5, r3
   14ce8:	mov	r8, r2
   14cec:	mov	r4, r0
   14cf0:	cmp	r6, #0
   14cf4:	beq	14d14 <__assert_fail@plt+0x2e80>
   14cf8:	ldrd	r0, [r6]
   14cfc:	eor	r1, r1, r5
   14d00:	eor	r0, r0, r8
   14d04:	orrs	r0, r0, r1
   14d08:	bne	14d2c <__assert_fail@plt+0x2e98>
   14d0c:	ldr	r5, [r6, #8]
   14d10:	b	14d90 <__assert_fail@plt+0x2efc>
   14d14:	mov	r0, #16
   14d18:	bl	33c98 <__assert_fail@plt+0x21e04>
   14d1c:	cmp	r0, #0
   14d20:	str	r0, [r4, #8]
   14d24:	beq	14d5c <__assert_fail@plt+0x2ec8>
   14d28:	mov	r6, r0
   14d2c:	str	r8, [r6]
   14d30:	str	r5, [r6, #4]
   14d34:	mov	r1, r6
   14d38:	ldr	r0, [r4]
   14d3c:	bl	1addc <__assert_fail@plt+0x8f48>
   14d40:	cmp	r0, #0
   14d44:	beq	14d5c <__assert_fail@plt+0x2ec8>
   14d48:	cmp	r6, r0
   14d4c:	beq	14d64 <__assert_fail@plt+0x2ed0>
   14d50:	ldr	r5, [r0, #8]
   14d54:	str	r5, [r6, #8]
   14d58:	b	14d90 <__assert_fail@plt+0x2efc>
   14d5c:	mvn	r6, #0
   14d60:	b	14e0c <__assert_fail@plt+0x2f78>
   14d64:	movw	r2, #19992	; 0x4e18
   14d68:	mov	r0, #0
   14d6c:	mov	r1, #0
   14d70:	mov	r3, #0
   14d74:	str	r0, [r4, #8]
   14d78:	str	r0, [sp]
   14d7c:	movt	r2, #1
   14d80:	movw	r0, #1021	; 0x3fd
   14d84:	bl	1a298 <__assert_fail@plt+0x8404>
   14d88:	mov	r5, r0
   14d8c:	str	r0, [r6, #8]
   14d90:	mvn	r6, #0
   14d94:	cmp	r5, #0
   14d98:	beq	14e0c <__assert_fail@plt+0x2f78>
   14d9c:	ldr	r7, [fp, #8]
   14da0:	ldr	r8, [fp, #12]
   14da4:	mvn	r2, #-2147483646	; 0x80000002
   14da8:	subs	r0, r7, #1
   14dac:	sbc	r1, r8, #0
   14db0:	subs	r0, r2, r0
   14db4:	rscs	r0, r1, #0
   14db8:	bcs	14df4 <__assert_fail@plt+0x2f60>
   14dbc:	ldr	r0, [r4, #4]
   14dc0:	cmp	r0, #0
   14dc4:	bne	14ddc <__assert_fail@plt+0x2f48>
   14dc8:	mvn	r0, #-2147483648	; 0x80000000
   14dcc:	bl	1bcb8 <__assert_fail@plt+0x9e24>
   14dd0:	cmp	r0, #0
   14dd4:	str	r0, [r4, #4]
   14dd8:	beq	14e0c <__assert_fail@plt+0x2f78>
   14ddc:	mov	r2, r7
   14de0:	mov	r3, r8
   14de4:	bl	1bd90 <__assert_fail@plt+0x9efc>
   14de8:	mov	r7, r0
   14dec:	cmn	r0, #1
   14df0:	beq	14e0c <__assert_fail@plt+0x2f78>
   14df4:	mov	r0, r5
   14df8:	mov	r1, r7
   14dfc:	bl	19fe8 <__assert_fail@plt+0x8154>
   14e00:	mov	r6, r0
   14e04:	cmp	r0, #0
   14e08:	movwne	r6, #1
   14e0c:	mov	r0, r6
   14e10:	sub	sp, fp, #24
   14e14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e18:	udiv	r2, r0, r1
   14e1c:	mls	r0, r2, r1, r0
   14e20:	bx	lr
   14e24:	push	{r4, r5, fp, lr}
   14e28:	add	fp, sp, #8
   14e2c:	mov	r5, r0
   14e30:	mov	r0, #8
   14e34:	mov	r4, r1
   14e38:	bl	30fa8 <__assert_fail@plt+0x1f114>
   14e3c:	ldr	r1, [r5, #4]
   14e40:	stm	r0, {r1, r4}
   14e44:	str	r0, [r5, #4]
   14e48:	pop	{r4, r5, fp, pc}
   14e4c:	push	{r4, sl, fp, lr}
   14e50:	add	fp, sp, #8
   14e54:	and	ip, r1, #2
   14e58:	and	lr, r1, #32
   14e5c:	and	r2, r1, #134217728	; 0x8000000
   14e60:	b	14e68 <__assert_fail@plt+0x2fd4>
   14e64:	add	r0, r0, r1
   14e68:	ldrb	r3, [r0], #1
   14e6c:	cmp	r3, #125	; 0x7d
   14e70:	bhi	14e68 <__assert_fail@plt+0x2fd4>
   14e74:	add	r4, pc, #4
   14e78:	mov	r1, #1
   14e7c:	ldr	pc, [r4, r3, lsl #2]
   14e80:	andeq	r5, r1, r0, asr #1
   14e84:	andeq	r4, r1, r8, ror #28
   14e88:	andeq	r4, r1, r8, ror #28
   14e8c:	andeq	r4, r1, r8, ror #28
   14e90:	andeq	r4, r1, r8, ror #28
   14e94:	andeq	r4, r1, r8, ror #28
   14e98:	andeq	r4, r1, r8, ror #28
   14e9c:	andeq	r4, r1, r8, ror #28
   14ea0:	andeq	r4, r1, r8, ror #28
   14ea4:	andeq	r4, r1, r8, ror #28
   14ea8:	andeq	r4, r1, r8, ror #28
   14eac:	andeq	r4, r1, r8, ror #28
   14eb0:	andeq	r4, r1, r8, ror #28
   14eb4:	andeq	r4, r1, r8, ror #28
   14eb8:	andeq	r4, r1, r8, ror #28
   14ebc:	andeq	r4, r1, r8, ror #28
   14ec0:	andeq	r4, r1, r8, ror #28
   14ec4:	andeq	r4, r1, r8, ror #28
   14ec8:	andeq	r4, r1, r8, ror #28
   14ecc:	andeq	r4, r1, r8, ror #28
   14ed0:	andeq	r4, r1, r8, ror #28
   14ed4:	andeq	r4, r1, r8, ror #28
   14ed8:	andeq	r4, r1, r8, ror #28
   14edc:	andeq	r4, r1, r8, ror #28
   14ee0:	andeq	r4, r1, r8, ror #28
   14ee4:	andeq	r4, r1, r8, ror #28
   14ee8:	andeq	r4, r1, r8, ror #28
   14eec:	andeq	r4, r1, r8, ror #28
   14ef0:	andeq	r4, r1, r8, ror #28
   14ef4:	andeq	r4, r1, r8, ror #28
   14ef8:	andeq	r4, r1, r8, ror #28
   14efc:	andeq	r4, r1, r8, ror #28
   14f00:	andeq	r4, r1, r8, ror #28
   14f04:	andeq	r5, r1, r4, lsl #1
   14f08:	andeq	r4, r1, r8, ror #28
   14f0c:	andeq	r4, r1, r8, ror #28
   14f10:	andeq	r4, r1, r8, ror #28
   14f14:	andeq	r4, r1, r8, ror #28
   14f18:	andeq	r4, r1, r8, ror #28
   14f1c:	andeq	r4, r1, r8, ror #28
   14f20:	andeq	r5, r1, r8, ror r0
   14f24:	andeq	r5, r1, r8, ror r0
   14f28:	andeq	r5, r1, r4, asr #1
   14f2c:	andeq	r5, r1, r4, lsl #1
   14f30:	andeq	r4, r1, r8, ror #28
   14f34:	andeq	r4, r1, r8, ror #28
   14f38:	andeq	r5, r1, r8, ror r0
   14f3c:	andeq	r4, r1, r8, ror #28
   14f40:	andeq	r4, r1, r8, ror #28
   14f44:	andeq	r4, r1, r8, ror #28
   14f48:	andeq	r4, r1, r8, ror #28
   14f4c:	andeq	r4, r1, r8, ror #28
   14f50:	andeq	r4, r1, r8, ror #28
   14f54:	andeq	r4, r1, r8, ror #28
   14f58:	andeq	r4, r1, r8, ror #28
   14f5c:	andeq	r4, r1, r8, ror #28
   14f60:	andeq	r4, r1, r8, ror #28
   14f64:	andeq	r4, r1, r8, ror #28
   14f68:	andeq	r4, r1, r8, ror #28
   14f6c:	andeq	r4, r1, r8, ror #28
   14f70:	andeq	r4, r1, r8, ror #28
   14f74:	andeq	r4, r1, r8, ror #28
   14f78:	andeq	r4, r1, r8, ror #28
   14f7c:	andeq	r5, r1, r4, asr #1
   14f80:	andeq	r5, r1, r4, lsl #1
   14f84:	andeq	r4, r1, r8, ror #28
   14f88:	andeq	r4, r1, r8, ror #28
   14f8c:	andeq	r4, r1, r8, ror #28
   14f90:	andeq	r4, r1, r8, ror #28
   14f94:	andeq	r4, r1, r8, ror #28
   14f98:	andeq	r4, r1, r8, ror #28
   14f9c:	andeq	r4, r1, r8, ror #28
   14fa0:	andeq	r4, r1, r8, ror #28
   14fa4:	andeq	r4, r1, r8, ror #28
   14fa8:	andeq	r4, r1, r8, ror #28
   14fac:	andeq	r4, r1, r8, ror #28
   14fb0:	andeq	r4, r1, r8, ror #28
   14fb4:	andeq	r4, r1, r8, ror #28
   14fb8:	andeq	r4, r1, r8, ror #28
   14fbc:	andeq	r4, r1, r8, ror #28
   14fc0:	andeq	r4, r1, r8, ror #28
   14fc4:	andeq	r4, r1, r8, ror #28
   14fc8:	andeq	r4, r1, r8, ror #28
   14fcc:	andeq	r4, r1, r8, ror #28
   14fd0:	andeq	r4, r1, r8, ror #28
   14fd4:	andeq	r4, r1, r8, ror #28
   14fd8:	andeq	r4, r1, r8, ror #28
   14fdc:	andeq	r4, r1, r8, ror #28
   14fe0:	andeq	r4, r1, r8, ror #28
   14fe4:	andeq	r4, r1, r8, ror #28
   14fe8:	andeq	r4, r1, r8, ror #28
   14fec:	andeq	r5, r1, r4, asr #1
   14ff0:	muleq	r1, ip, r0
   14ff4:	andeq	r4, r1, r8, ror #28
   14ff8:	andeq	r4, r1, r8, ror #28
   14ffc:	andeq	r4, r1, r8, ror #28
   15000:	andeq	r4, r1, r8, ror #28
   15004:	andeq	r4, r1, r8, ror #28
   15008:	andeq	r4, r1, r8, ror #28
   1500c:	andeq	r4, r1, r8, ror #28
   15010:	andeq	r4, r1, r8, ror #28
   15014:	andeq	r4, r1, r8, ror #28
   15018:	andeq	r4, r1, r8, ror #28
   1501c:	andeq	r4, r1, r8, ror #28
   15020:	andeq	r4, r1, r8, ror #28
   15024:	andeq	r4, r1, r8, ror #28
   15028:	andeq	r4, r1, r8, ror #28
   1502c:	andeq	r4, r1, r8, ror #28
   15030:	andeq	r4, r1, r8, ror #28
   15034:	andeq	r4, r1, r8, ror #28
   15038:	andeq	r4, r1, r8, ror #28
   1503c:	andeq	r4, r1, r8, ror #28
   15040:	andeq	r4, r1, r8, ror #28
   15044:	andeq	r4, r1, r8, ror #28
   15048:	andeq	r4, r1, r8, ror #28
   1504c:	andeq	r4, r1, r8, ror #28
   15050:	andeq	r4, r1, r8, ror #28
   15054:	andeq	r4, r1, r8, ror #28
   15058:	andeq	r4, r1, r8, ror #28
   1505c:	andeq	r4, r1, r8, ror #28
   15060:	andeq	r4, r1, r8, ror #28
   15064:	andeq	r4, r1, r8, ror #28
   15068:	andeq	r4, r1, r8, ror #28
   1506c:	andeq	r5, r1, r8, ror r0
   15070:	andeq	r4, r1, r8, ror #28
   15074:	andeq	r5, r1, r8, ror r0
   15078:	cmp	r2, #0
   1507c:	beq	14e68 <__assert_fail@plt+0x2fd4>
   15080:	b	150c4 <__assert_fail@plt+0x3230>
   15084:	cmp	lr, #0
   15088:	beq	14e68 <__assert_fail@plt+0x2fd4>
   1508c:	ldrb	r3, [r0]
   15090:	cmp	r3, #40	; 0x28
   15094:	bne	14e68 <__assert_fail@plt+0x2fd4>
   15098:	b	150c4 <__assert_fail@plt+0x3230>
   1509c:	cmp	r2, #0
   150a0:	bne	14e68 <__assert_fail@plt+0x2fd4>
   150a4:	mov	r1, #0
   150a8:	cmp	ip, #0
   150ac:	bne	14e64 <__assert_fail@plt+0x2fd0>
   150b0:	ldrb	r1, [r0]
   150b4:	cmp	r1, #0
   150b8:	movwne	r1, #1
   150bc:	b	14e64 <__assert_fail@plt+0x2fd0>
   150c0:	mov	r1, #0
   150c4:	mov	r0, r1
   150c8:	pop	{r4, sl, fp, pc}
   150cc:	mov	r0, #8
   150d0:	b	313a0 <__assert_fail@plt+0x1f50c>
   150d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150d8:	add	fp, sp, #24
   150dc:	ldr	r6, [r0]
   150e0:	mov	r8, r0
   150e4:	cmp	r6, #0
   150e8:	bne	15100 <__assert_fail@plt+0x326c>
   150ec:	b	15178 <__assert_fail@plt+0x32e4>
   150f0:	mov	r0, r5
   150f4:	bl	17754 <__assert_fail@plt+0x58c0>
   150f8:	cmp	r6, #0
   150fc:	beq	15178 <__assert_fail@plt+0x32e4>
   15100:	mov	r5, r6
   15104:	ldr	r6, [r6]
   15108:	ldr	r0, [r5, #4]
   1510c:	cmp	r0, #0
   15110:	beq	1516c <__assert_fail@plt+0x32d8>
   15114:	cmp	r0, #1
   15118:	bne	150f0 <__assert_fail@plt+0x325c>
   1511c:	ldr	r0, [r5, #20]
   15120:	cmp	r0, #1
   15124:	blt	15160 <__assert_fail@plt+0x32cc>
   15128:	mov	r7, #0
   1512c:	mov	r4, #0
   15130:	ldr	r1, [r5, #12]
   15134:	add	r1, r1, r7
   15138:	ldrb	r2, [r1, #3]
   1513c:	tst	r2, #8
   15140:	beq	15150 <__assert_fail@plt+0x32bc>
   15144:	add	r0, r1, #4
   15148:	bl	20988 <__assert_fail@plt+0xeaf4>
   1514c:	ldr	r0, [r5, #20]
   15150:	add	r4, r4, #1
   15154:	add	r7, r7, #36	; 0x24
   15158:	cmp	r4, r0
   1515c:	blt	15130 <__assert_fail@plt+0x329c>
   15160:	ldr	r0, [r5, #12]
   15164:	bl	17754 <__assert_fail@plt+0x58c0>
   15168:	b	150f0 <__assert_fail@plt+0x325c>
   1516c:	ldr	r0, [r5, #12]
   15170:	bl	1a590 <__assert_fail@plt+0x86fc>
   15174:	b	150f0 <__assert_fail@plt+0x325c>
   15178:	ldr	r5, [r8, #4]
   1517c:	cmp	r5, #0
   15180:	beq	151a4 <__assert_fail@plt+0x3310>
   15184:	ldr	r0, [r5, #4]
   15188:	ldr	r4, [r5]
   1518c:	bl	17754 <__assert_fail@plt+0x58c0>
   15190:	mov	r0, r5
   15194:	bl	17754 <__assert_fail@plt+0x58c0>
   15198:	cmp	r4, #0
   1519c:	mov	r5, r4
   151a0:	bne	15184 <__assert_fail@plt+0x32f0>
   151a4:	mov	r0, r8
   151a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   151ac:	b	17754 <__assert_fail@plt+0x58c0>
   151b0:	push	{r4, r5, r6, r7, fp, lr}
   151b4:	add	fp, sp, #16
   151b8:	movw	r7, #7108	; 0x1bc4
   151bc:	mov	r5, r0
   151c0:	movw	r0, #21080	; 0x5258
   151c4:	tst	r2, #268435456	; 0x10000000
   151c8:	mov	r4, r2
   151cc:	mov	r6, r1
   151d0:	movt	r0, #1
   151d4:	movt	r7, #1
   151d8:	moveq	r7, r0
   151dc:	mov	r0, r5
   151e0:	blx	r7
   151e4:	mov	r1, r0
   151e8:	clz	r0, r0
   151ec:	tst	r4, #1073741824	; 0x40000000
   151f0:	lsr	r0, r0, #5
   151f4:	bne	15254 <__assert_fail@plt+0x33c0>
   151f8:	cmp	r1, #0
   151fc:	ldrbne	r1, [r6]
   15200:	cmpne	r1, #0
   15204:	beq	15254 <__assert_fail@plt+0x33c0>
   15208:	add	r6, r6, #1
   1520c:	uxtb	r1, r1
   15210:	mov	r0, #0
   15214:	cmp	r1, #47	; 0x2f
   15218:	bne	15240 <__assert_fail@plt+0x33ac>
   1521c:	ldrb	r1, [r6]
   15220:	cmp	r1, #47	; 0x2f
   15224:	beq	15240 <__assert_fail@plt+0x33ac>
   15228:	mov	r0, r5
   1522c:	mov	r1, r6
   15230:	mov	r2, r4
   15234:	blx	r7
   15238:	clz	r0, r0
   1523c:	lsr	r0, r0, #5
   15240:	cmp	r0, #0
   15244:	popne	{r4, r5, r6, r7, fp, pc}
   15248:	ldrb	r1, [r6], #1
   1524c:	cmp	r1, #0
   15250:	bne	1520c <__assert_fail@plt+0x3378>
   15254:	pop	{r4, r5, r6, r7, fp, pc}
   15258:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1525c:	add	fp, sp, #24
   15260:	mov	r4, r0
   15264:	mov	r5, r1
   15268:	and	r0, r2, #16
   1526c:	tst	r2, #8
   15270:	bne	1528c <__assert_fail@plt+0x33f8>
   15274:	cmp	r0, #0
   15278:	beq	15310 <__assert_fail@plt+0x347c>
   1527c:	mov	r0, r4
   15280:	mov	r1, r5
   15284:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   15288:	b	1bef0 <__assert_fail@plt+0xa05c>
   1528c:	cmp	r0, #0
   15290:	beq	15320 <__assert_fail@plt+0x348c>
   15294:	mov	r0, r5
   15298:	bl	314c8 <__assert_fail@plt+0x1f634>
   1529c:	mov	r1, #47	; 0x2f
   152a0:	mov	r5, r0
   152a4:	mov	r8, #47	; 0x2f
   152a8:	bl	11c84 <strchr@plt>
   152ac:	cmp	r0, #0
   152b0:	beq	152f0 <__assert_fail@plt+0x345c>
   152b4:	mov	r7, r0
   152b8:	mov	r9, #0
   152bc:	mov	r0, r4
   152c0:	mov	r1, r5
   152c4:	strb	r9, [r7]
   152c8:	bl	1bef0 <__assert_fail@plt+0xa05c>
   152cc:	cmp	r0, #1
   152d0:	blt	152fc <__assert_fail@plt+0x3468>
   152d4:	strb	r8, [r7], #1
   152d8:	mov	r1, #47	; 0x2f
   152dc:	mov	r0, r7
   152e0:	bl	11c84 <strchr@plt>
   152e4:	mov	r7, r0
   152e8:	cmp	r0, #0
   152ec:	bne	152bc <__assert_fail@plt+0x3428>
   152f0:	mov	r0, r4
   152f4:	mov	r1, r5
   152f8:	bl	1bef0 <__assert_fail@plt+0xa05c>
   152fc:	mov	r6, r0
   15300:	mov	r0, r5
   15304:	bl	17754 <__assert_fail@plt+0x58c0>
   15308:	mov	r0, r6
   1530c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15310:	mov	r0, r4
   15314:	mov	r1, r5
   15318:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1531c:	b	11a14 <strcmp@plt>
   15320:	mov	r0, r4
   15324:	bl	11c78 <strlen@plt>
   15328:	mov	r7, r0
   1532c:	mov	r0, r4
   15330:	mov	r1, r5
   15334:	mov	r2, r7
   15338:	bl	11e4c <strncmp@plt>
   1533c:	mov	r6, r0
   15340:	cmp	r0, #0
   15344:	beq	15350 <__assert_fail@plt+0x34bc>
   15348:	mov	r0, r6
   1534c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15350:	ldrb	r0, [r5, r7]
   15354:	subs	r6, r0, #47	; 0x2f
   15358:	movne	r6, r0
   1535c:	mov	r0, r6
   15360:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15368:	add	fp, sp, #28
   1536c:	sub	sp, sp, #28
   15370:	ldr	r0, [r0]
   15374:	cmp	r0, #0
   15378:	moveq	r0, #0
   1537c:	subeq	sp, fp, #28
   15380:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15384:	mov	r7, r1
   15388:	add	r1, r1, #1
   1538c:	mov	r4, #0
   15390:	str	r1, [sp, #16]
   15394:	str	r7, [sp, #24]
   15398:	b	15454 <__assert_fail@plt+0x35c0>
   1539c:	cmp	r4, #0
   153a0:	bne	153b8 <__assert_fail@plt+0x3524>
   153a4:	mov	r0, r7
   153a8:	bl	11c78 <strlen@plt>
   153ac:	add	r0, r0, #1
   153b0:	bl	30fa8 <__assert_fail@plt+0x1f114>
   153b4:	mov	r4, r0
   153b8:	ldr	r0, [r6, #8]
   153bc:	mov	sl, r6
   153c0:	ldr	r6, [r6, #12]
   153c4:	and	r8, r0, #1073741824	; 0x40000000
   153c8:	and	r9, r0, #8
   153cc:	mov	r0, r4
   153d0:	mov	r1, r7
   153d4:	bl	11b88 <strcpy@plt>
   153d8:	mov	r0, r6
   153dc:	mov	r1, r4
   153e0:	bl	19fe8 <__assert_fail@plt+0x8154>
   153e4:	cmp	r0, #0
   153e8:	bne	155d4 <__assert_fail@plt+0x3740>
   153ec:	cmp	r9, #0
   153f0:	beq	15428 <__assert_fail@plt+0x3594>
   153f4:	mov	r0, r4
   153f8:	mov	r1, #47	; 0x2f
   153fc:	bl	11d68 <strrchr@plt>
   15400:	cmp	r0, #0
   15404:	beq	15428 <__assert_fail@plt+0x3594>
   15408:	mov	r5, #0
   1540c:	mov	r1, r4
   15410:	strb	r5, [r0]
   15414:	mov	r0, r6
   15418:	bl	19fe8 <__assert_fail@plt+0x8154>
   1541c:	cmp	r0, #0
   15420:	beq	153f4 <__assert_fail@plt+0x3560>
   15424:	b	1559c <__assert_fail@plt+0x3708>
   15428:	cmp	r8, #0
   1542c:	bne	15448 <__assert_fail@plt+0x35b4>
   15430:	mov	r0, r7
   15434:	mov	r1, #47	; 0x2f
   15438:	bl	11c84 <strchr@plt>
   1543c:	add	r7, r0, #1
   15440:	cmp	r0, #0
   15444:	bne	153cc <__assert_fail@plt+0x3538>
   15448:	ldr	r7, [sp, #24]
   1544c:	mov	r6, sl
   15450:	b	15588 <__assert_fail@plt+0x36f4>
   15454:	mov	r6, r0
   15458:	ldr	r0, [r0, #4]
   1545c:	cmp	r0, #0
   15460:	beq	1539c <__assert_fail@plt+0x3508>
   15464:	str	r4, [sp, #12]
   15468:	ldr	r4, [r6, #20]
   1546c:	cmp	r4, #1
   15470:	blt	15584 <__assert_fail@plt+0x36f0>
   15474:	ldr	sl, [r6, #12]
   15478:	mov	r8, #0
   1547c:	str	r6, [sp, #8]
   15480:	str	r4, [sp, #20]
   15484:	b	154d8 <__assert_fail@plt+0x3644>
   15488:	ldr	r5, [sp, #16]
   1548c:	uxtb	r0, r0
   15490:	mov	r1, #0
   15494:	cmp	r0, #47	; 0x2f
   15498:	bne	154c0 <__assert_fail@plt+0x362c>
   1549c:	ldrb	r0, [r5]
   154a0:	cmp	r0, #47	; 0x2f
   154a4:	beq	154c0 <__assert_fail@plt+0x362c>
   154a8:	mov	r0, r7
   154ac:	mov	r1, r5
   154b0:	mov	r2, r6
   154b4:	blx	r9
   154b8:	clz	r0, r0
   154bc:	lsr	r1, r0, #5
   154c0:	cmp	r1, #0
   154c4:	bne	15540 <__assert_fail@plt+0x36ac>
   154c8:	ldrb	r0, [r5], #1
   154cc:	cmp	r0, #0
   154d0:	bne	1548c <__assert_fail@plt+0x35f8>
   154d4:	b	15540 <__assert_fail@plt+0x36ac>
   154d8:	add	r0, r8, r8, lsl #3
   154dc:	mov	r1, sl
   154e0:	ldr	r6, [r1, r0, lsl #2]!
   154e4:	add	r0, r1, #4
   154e8:	tst	r6, #134217728	; 0x8000000
   154ec:	bne	15554 <__assert_fail@plt+0x36c0>
   154f0:	movw	r9, #7108	; 0x1bc4
   154f4:	movw	r1, #21080	; 0x5258
   154f8:	tst	r6, #268435456	; 0x10000000
   154fc:	mov	r2, r6
   15500:	movt	r9, #1
   15504:	movt	r1, #1
   15508:	moveq	r9, r1
   1550c:	mov	r1, r7
   15510:	ldr	r7, [r0]
   15514:	mov	r0, r7
   15518:	blx	r9
   1551c:	clz	r1, r0
   15520:	tst	r6, #1073741824	; 0x40000000
   15524:	lsr	r1, r1, #5
   15528:	bne	15540 <__assert_fail@plt+0x36ac>
   1552c:	cmp	r0, #0
   15530:	ldrne	r0, [sp, #24]
   15534:	ldrbne	r0, [r0]
   15538:	cmpne	r0, #0
   1553c:	bne	15488 <__assert_fail@plt+0x35f4>
   15540:	ldr	r7, [sp, #24]
   15544:	ldr	r4, [sp, #20]
   15548:	cmp	r1, #0
   1554c:	beq	15574 <__assert_fail@plt+0x36e0>
   15550:	b	155a4 <__assert_fail@plt+0x3710>
   15554:	mov	r5, #0
   15558:	mov	r1, r7
   1555c:	mov	r2, #0
   15560:	mov	r3, #0
   15564:	str	r5, [sp]
   15568:	bl	20bd0 <__assert_fail@plt+0xed3c>
   1556c:	cmp	r0, #0
   15570:	beq	155a8 <__assert_fail@plt+0x3714>
   15574:	add	r8, r8, #1
   15578:	cmp	r8, r4
   1557c:	blt	154d8 <__assert_fail@plt+0x3644>
   15580:	ldr	r6, [sp, #8]
   15584:	ldr	r4, [sp, #12]
   15588:	ldr	r0, [r6]
   1558c:	cmp	r0, #0
   15590:	bne	15454 <__assert_fail@plt+0x35c0>
   15594:	mov	r5, #1
   15598:	b	155b0 <__assert_fail@plt+0x371c>
   1559c:	mov	r6, sl
   155a0:	b	155b0 <__assert_fail@plt+0x371c>
   155a4:	mov	r5, #0
   155a8:	ldr	r6, [sp, #8]
   155ac:	ldr	r4, [sp, #12]
   155b0:	mov	r0, r4
   155b4:	bl	17754 <__assert_fail@plt+0x58c0>
   155b8:	ldr	r0, [r6, #8]
   155bc:	mov	r1, #1
   155c0:	bic	r0, r1, r0, lsr #29
   155c4:	subs	r0, r5, r0
   155c8:	movwne	r0, #1
   155cc:	sub	sp, fp, #28
   155d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155d4:	mov	r5, #0
   155d8:	mov	r6, sl
   155dc:	b	155b0 <__assert_fail@plt+0x371c>
   155e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155e4:	add	fp, sp, #28
   155e8:	sub	sp, sp, #4
   155ec:	mov	r7, r2
   155f0:	mov	r4, r1
   155f4:	mov	r6, r0
   155f8:	tst	r2, #402653184	; 0x18000000
   155fc:	beq	15698 <__assert_fail@plt+0x3804>
   15600:	mov	r0, r4
   15604:	mov	r1, r7
   15608:	bl	14e4c <__assert_fail@plt+0x2fb8>
   1560c:	cmp	r0, #0
   15610:	beq	15698 <__assert_fail@plt+0x3804>
   15614:	ldr	r5, [r6]
   15618:	cmp	r5, #0
   1561c:	beq	1563c <__assert_fail@plt+0x37a8>
   15620:	ldr	r0, [r5, #4]
   15624:	cmp	r0, #1
   15628:	bne	1563c <__assert_fail@plt+0x37a8>
   1562c:	ldr	r0, [r5, #8]
   15630:	eor	r0, r0, r7
   15634:	tst	r0, #536870912	; 0x20000000
   15638:	beq	1565c <__assert_fail@plt+0x37c8>
   1563c:	mov	r0, #24
   15640:	bl	313a0 <__assert_fail@plt+0x1f50c>
   15644:	ldr	r1, [r6]
   15648:	mov	r5, r0
   1564c:	mov	r0, #1
   15650:	str	r1, [r5]
   15654:	stmib	r5, {r0, r7}
   15658:	str	r5, [r6]
   1565c:	mov	r1, r5
   15660:	ldr	r2, [r1, #16]!
   15664:	ldr	r0, [r1, #4]
   15668:	cmp	r0, r2
   1566c:	bne	157b4 <__assert_fail@plt+0x3920>
   15670:	ldr	r0, [r5, #12]
   15674:	mov	r2, #36	; 0x24
   15678:	mvn	r3, #0
   1567c:	str	r2, [sp]
   15680:	mov	r2, #1
   15684:	bl	311d8 <__assert_fail@plt+0x1f344>
   15688:	str	r0, [r5, #12]
   1568c:	mov	r8, r0
   15690:	ldr	r0, [r5, #20]
   15694:	b	157b8 <__assert_fail@plt+0x3924>
   15698:	ldr	r5, [r6]
   1569c:	cmp	r5, #0
   156a0:	beq	156c8 <__assert_fail@plt+0x3834>
   156a4:	ldr	r0, [r5, #4]
   156a8:	cmp	r0, #0
   156ac:	bne	156c8 <__assert_fail@plt+0x3834>
   156b0:	ldr	r0, [r5, #8]
   156b4:	movw	r1, #24
   156b8:	movt	r1, #24576	; 0x6000
   156bc:	eor	r0, r0, r7
   156c0:	tst	r0, r1
   156c4:	beq	15730 <__assert_fail@plt+0x389c>
   156c8:	mov	r0, #24
   156cc:	bl	313a0 <__assert_fail@plt+0x1f50c>
   156d0:	mov	r5, r0
   156d4:	mov	r0, #0
   156d8:	movw	r2, #23676	; 0x5c7c
   156dc:	movw	r3, #23704	; 0x5c98
   156e0:	mov	r1, #0
   156e4:	stmib	r5, {r0, r7}
   156e8:	movw	r0, #23728	; 0x5cb0
   156ec:	movt	r2, #1
   156f0:	movt	r3, #1
   156f4:	movt	r0, #1
   156f8:	str	r0, [sp]
   156fc:	ands	r0, r7, #16
   15700:	movw	r0, #23488	; 0x5bc0
   15704:	movt	r0, #1
   15708:	movne	r2, r0
   1570c:	movw	r0, #23680	; 0x5c80
   15710:	movt	r0, #1
   15714:	movne	r3, r0
   15718:	mov	r0, #0
   1571c:	bl	1a298 <__assert_fail@plt+0x8404>
   15720:	str	r0, [r5, #12]
   15724:	ldr	r0, [r6]
   15728:	str	r0, [r5]
   1572c:	str	r5, [r6]
   15730:	mov	r0, r4
   15734:	bl	314c8 <__assert_fail@plt+0x1f634>
   15738:	mov	r4, r0
   1573c:	and	r0, r7, #268435458	; 0x10000002
   15740:	cmp	r0, #268435456	; 0x10000000
   15744:	bne	15790 <__assert_fail@plt+0x38fc>
   15748:	mov	r0, r4
   1574c:	mov	r1, r4
   15750:	ldrb	r2, [r1]
   15754:	cmp	r2, #92	; 0x5c
   15758:	bne	15778 <__assert_fail@plt+0x38e4>
   1575c:	mov	r2, r1
   15760:	ldrb	r3, [r2, #1]!
   15764:	cmp	r3, #0
   15768:	moveq	r2, r1
   1576c:	movwne	r3, #1
   15770:	ldrb	r2, [r2]
   15774:	b	1577c <__assert_fail@plt+0x38e8>
   15778:	mov	r3, #0
   1577c:	add	r1, r1, r3
   15780:	strb	r2, [r0], #1
   15784:	cmp	r2, #0
   15788:	add	r1, r1, #1
   1578c:	bne	15750 <__assert_fail@plt+0x38bc>
   15790:	ldr	r0, [r5, #12]
   15794:	mov	r1, r4
   15798:	bl	1addc <__assert_fail@plt+0x8f48>
   1579c:	cmp	r0, r4
   157a0:	beq	158e8 <__assert_fail@plt+0x3a54>
   157a4:	mov	r0, r4
   157a8:	sub	sp, fp, #28
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157b0:	b	17754 <__assert_fail@plt+0x58c0>
   157b4:	ldr	r8, [r5, #12]
   157b8:	add	r9, r0, #1
   157bc:	add	sl, r0, r0, lsl #3
   157c0:	tst	r7, #134217728	; 0x8000000
   157c4:	str	r9, [r5, #20]
   157c8:	str	r7, [r8, sl, lsl #2]
   157cc:	bne	15808 <__assert_fail@plt+0x3974>
   157d0:	tst	r7, #67108864	; 0x4000000
   157d4:	beq	157f8 <__assert_fail@plt+0x3964>
   157d8:	mov	r0, r4
   157dc:	bl	314c8 <__assert_fail@plt+0x1f634>
   157e0:	mov	r4, r0
   157e4:	mov	r0, #8
   157e8:	bl	30fa8 <__assert_fail@plt+0x1f114>
   157ec:	ldr	r1, [r6, #4]
   157f0:	stm	r0, {r1, r4}
   157f4:	str	r0, [r6, #4]
   157f8:	add	r0, r8, sl, lsl #2
   157fc:	str	r4, [r0, #4]
   15800:	sub	sp, fp, #28
   15804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15808:	mov	r0, #2
   1580c:	tst	r7, #8
   15810:	and	r0, r0, r7, lsr #3
   15814:	orr	r6, r0, #9
   15818:	bne	15850 <__assert_fail@plt+0x39bc>
   1581c:	add	r0, r8, sl, lsl #2
   15820:	mov	r1, r4
   15824:	mov	r2, r6
   15828:	add	r0, r0, #4
   1582c:	bl	20800 <__assert_fail@plt+0xe96c>
   15830:	mov	r4, r0
   15834:	cmp	r4, #0
   15838:	beq	158e8 <__assert_fail@plt+0x3a54>
   1583c:	ldr	r9, [r5, #20]
   15840:	sub	r0, r9, #1
   15844:	str	r0, [r5, #20]
   15848:	sub	sp, fp, #28
   1584c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15850:	mov	r0, r4
   15854:	bl	11c78 <strlen@plt>
   15858:	sub	r1, r4, #1
   1585c:	mov	r7, r0
   15860:	cmp	r0, #1
   15864:	blt	1587c <__assert_fail@plt+0x39e8>
   15868:	ldrb	r2, [r1, r7]
   1586c:	sub	r0, r7, #1
   15870:	cmp	r2, #47	; 0x2f
   15874:	beq	1585c <__assert_fail@plt+0x39c8>
   15878:	b	15884 <__assert_fail@plt+0x39f0>
   1587c:	cmp	r7, #0
   15880:	beq	15840 <__assert_fail@plt+0x39ac>
   15884:	add	r0, r7, #7
   15888:	bl	30fc0 <__assert_fail@plt+0x1f12c>
   1588c:	mov	r1, r4
   15890:	mov	r2, r7
   15894:	mov	r9, r6
   15898:	mov	r6, r0
   1589c:	bl	11a8c <memcpy@plt>
   158a0:	movw	r0, #12072	; 0x2f28
   158a4:	mov	r1, r6
   158a8:	mov	r2, r9
   158ac:	movt	r0, #10798	; 0x2a2e
   158b0:	str	r0, [r1, r7]!
   158b4:	mov	r0, #0
   158b8:	strb	r0, [r1, #6]
   158bc:	movw	r0, #16169	; 0x3f29
   158c0:	strh	r0, [r1, #4]
   158c4:	add	r0, r8, sl, lsl #2
   158c8:	mov	r1, r6
   158cc:	add	r0, r0, #4
   158d0:	bl	20800 <__assert_fail@plt+0xe96c>
   158d4:	mov	r4, r0
   158d8:	mov	r0, r6
   158dc:	bl	17754 <__assert_fail@plt+0x58c0>
   158e0:	cmp	r4, #0
   158e4:	bne	1583c <__assert_fail@plt+0x39a8>
   158e8:	sub	sp, fp, #28
   158ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158f4:	add	fp, sp, #28
   158f8:	sub	sp, sp, #20
   158fc:	str	r0, [sp, #8]
   15900:	mov	r0, #0
   15904:	mov	r9, r1
   15908:	mov	r1, #0
   1590c:	str	r3, [sp, #12]
   15910:	mov	r4, r2
   15914:	str	r0, [sp, #4]
   15918:	mov	r0, r2
   1591c:	str	r1, [sp, #16]
   15920:	bl	11e64 <getc@plt>
   15924:	cmn	r0, #1
   15928:	beq	1599c <__assert_fail@plt+0x3b08>
   1592c:	mov	r5, r0
   15930:	mov	r0, #0
   15934:	mov	sl, #1
   15938:	add	r8, sp, #16
   1593c:	mov	r7, #0
   15940:	mov	r6, #0
   15944:	cmp	r6, r0
   15948:	bne	15980 <__assert_fail@plt+0x3aec>
   1594c:	b	15964 <__assert_fail@plt+0x3ad0>
   15950:	mov	r5, r0
   15954:	ldr	r0, [sp, #16]
   15958:	add	r6, r6, #1
   1595c:	cmp	r6, r0
   15960:	bne	15980 <__assert_fail@plt+0x3aec>
   15964:	mov	r0, r7
   15968:	mov	r1, r8
   1596c:	mov	r2, #1
   15970:	mvn	r3, #0
   15974:	str	sl, [sp]
   15978:	bl	311d8 <__assert_fail@plt+0x1f344>
   1597c:	mov	r7, r0
   15980:	mov	r0, r4
   15984:	strb	r5, [r7, r6]
   15988:	bl	11e64 <getc@plt>
   1598c:	cmn	r0, #1
   15990:	bne	15950 <__assert_fail@plt+0x3abc>
   15994:	add	sl, r6, #1
   15998:	b	159a4 <__assert_fail@plt+0x3b10>
   1599c:	mov	sl, #0
   159a0:	mov	r7, #0
   159a4:	ldr	r6, [fp, #8]
   159a8:	mov	r0, r4
   159ac:	bl	11a74 <ferror@plt>
   159b0:	cmp	r0, #0
   159b4:	beq	159c4 <__assert_fail@plt+0x3b30>
   159b8:	bl	11ca8 <__errno_location@plt>
   159bc:	ldr	r0, [r0]
   159c0:	str	r0, [sp, #4]
   159c4:	add	r1, sl, #1
   159c8:	mov	r0, r7
   159cc:	bl	31024 <__assert_fail@plt+0x1f190>
   159d0:	mov	r4, r0
   159d4:	mov	r5, r0
   159d8:	cmp	sl, #0
   159dc:	strb	r6, [r4, sl]!
   159e0:	beq	159f8 <__assert_fail@plt+0x3b64>
   159e4:	add	r0, r5, sl
   159e8:	ldrb	r0, [r0, #-1]
   159ec:	subs	r7, r0, r6
   159f0:	movwne	r7, #1
   159f4:	b	159fc <__assert_fail@plt+0x3b68>
   159f8:	mov	r7, #0
   159fc:	mov	r0, #8
   15a00:	bl	30fa8 <__assert_fail@plt+0x1f114>
   15a04:	ldr	r1, [r9, #4]
   15a08:	stm	r0, {r1, r5}
   15a0c:	str	r0, [r9, #4]
   15a10:	add	r0, r4, r7
   15a14:	cmp	r5, r0
   15a18:	bcs	15ab8 <__assert_fail@plt+0x3c24>
   15a1c:	ldr	r8, [fp, #12]
   15a20:	add	r0, sl, r7
   15a24:	mov	sl, #0
   15a28:	mov	r4, r5
   15a2c:	add	r7, r5, r0
   15a30:	ldrb	r0, [r5]
   15a34:	cmp	r0, r6
   15a38:	bne	15aac <__assert_fail@plt+0x3c18>
   15a3c:	bl	11c54 <__ctype_b_loc@plt>
   15a40:	ldr	r0, [r0]
   15a44:	add	r1, r0, r6, lsl #1
   15a48:	ldrb	r1, [r1, #1]
   15a4c:	tst	r1, #32
   15a50:	mov	r1, r5
   15a54:	beq	15a7c <__assert_fail@plt+0x3be8>
   15a58:	mov	r1, r5
   15a5c:	cmp	r4, r1
   15a60:	beq	15a98 <__assert_fail@plt+0x3c04>
   15a64:	ldrb	r2, [r1, #-1]!
   15a68:	add	r2, r0, r2, lsl #1
   15a6c:	ldrb	r2, [r2, #1]
   15a70:	tst	r2, #32
   15a74:	bne	15a5c <__assert_fail@plt+0x3bc8>
   15a78:	add	r1, r1, #1
   15a7c:	strb	sl, [r1]
   15a80:	mov	r1, r4
   15a84:	ldr	r2, [sp, #12]
   15a88:	ldr	r4, [sp, #8]
   15a8c:	mov	r0, r9
   15a90:	mov	r3, r8
   15a94:	blx	r4
   15a98:	add	r5, r5, #1
   15a9c:	mov	r4, r5
   15aa0:	cmp	r5, r7
   15aa4:	bne	15a30 <__assert_fail@plt+0x3b9c>
   15aa8:	b	15ab8 <__assert_fail@plt+0x3c24>
   15aac:	add	r5, r5, #1
   15ab0:	cmp	r5, r7
   15ab4:	bne	15a30 <__assert_fail@plt+0x3b9c>
   15ab8:	bl	11ca8 <__errno_location@plt>
   15abc:	ldr	r1, [sp, #4]
   15ac0:	cmp	r1, #0
   15ac4:	str	r1, [r0]
   15ac8:	mvnne	r1, #0
   15acc:	mov	r0, r1
   15ad0:	sub	sp, fp, #28
   15ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15adc:	add	fp, sp, #24
   15ae0:	sub	sp, sp, #16
   15ae4:	mov	r5, r1
   15ae8:	movw	r1, #30440	; 0x76e8
   15aec:	str	r0, [sp, #12]
   15af0:	mov	r0, r2
   15af4:	mov	r4, r3
   15af8:	mov	r6, r2
   15afc:	movt	r1, #3
   15b00:	bl	11a14 <strcmp@plt>
   15b04:	ldr	r8, [fp, #8]
   15b08:	cmp	r0, #0
   15b0c:	beq	15b7c <__assert_fail@plt+0x3ce8>
   15b10:	movw	r1, #28484	; 0x6f44
   15b14:	mov	r0, r6
   15b18:	movt	r1, #3
   15b1c:	bl	11dec <fopen64@plt>
   15b20:	mvn	r6, #0
   15b24:	cmp	r0, #0
   15b28:	beq	15bac <__assert_fail@plt+0x3d18>
   15b2c:	mov	r7, r0
   15b30:	add	r0, sp, #12
   15b34:	mov	r1, r5
   15b38:	mov	r3, r4
   15b3c:	str	r8, [sp]
   15b40:	str	r0, [sp, #4]
   15b44:	movw	r0, #23480	; 0x5bb8
   15b48:	mov	r2, r7
   15b4c:	movt	r0, #1
   15b50:	bl	158f0 <__assert_fail@plt+0x3a5c>
   15b54:	mov	r8, r0
   15b58:	bl	11ca8 <__errno_location@plt>
   15b5c:	ldr	r4, [r0]
   15b60:	mov	r5, r0
   15b64:	mov	r0, r7
   15b68:	bl	15cb4 <__assert_fail@plt+0x3e20>
   15b6c:	cmp	r0, #0
   15b70:	moveq	r6, r8
   15b74:	streq	r4, [r5]
   15b78:	b	15bac <__assert_fail@plt+0x3d18>
   15b7c:	movw	r0, #33328	; 0x8230
   15b80:	mov	r1, r5
   15b84:	mov	r3, r4
   15b88:	str	r8, [sp]
   15b8c:	movt	r0, #4
   15b90:	ldr	r2, [r0]
   15b94:	add	r0, sp, #12
   15b98:	str	r0, [sp, #4]
   15b9c:	movw	r0, #23480	; 0x5bb8
   15ba0:	movt	r0, #1
   15ba4:	bl	158f0 <__assert_fail@plt+0x3a5c>
   15ba8:	mov	r6, r0
   15bac:	mov	r0, r6
   15bb0:	sub	sp, fp, #24
   15bb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15bb8:	ldr	r3, [r3]
   15bbc:	bx	r3
   15bc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15bc4:	add	fp, sp, #24
   15bc8:	sub	sp, sp, #56	; 0x38
   15bcc:	mov	r7, #0
   15bd0:	mov	r8, r1
   15bd4:	str	r7, [sp, #8]
   15bd8:	str	r7, [sp, #4]
   15bdc:	strb	r7, [sp]
   15be0:	str	r0, [sp, #16]
   15be4:	mov	r0, sp
   15be8:	strb	r7, [sp, #12]
   15bec:	bl	1c15c <__assert_fail@plt+0xa2c8>
   15bf0:	ldrb	r1, [sp, #24]
   15bf4:	ldr	r0, [sp, #28]
   15bf8:	cmp	r1, #0
   15bfc:	beq	15c08 <__assert_fail@plt+0x3d74>
   15c00:	cmp	r0, #0
   15c04:	beq	15c6c <__assert_fail@plt+0x3dd8>
   15c08:	mov	r4, #0
   15c0c:	mov	r5, sp
   15c10:	mov	r7, #0
   15c14:	tst	r1, #255	; 0xff
   15c18:	beq	15c2c <__assert_fail@plt+0x3d98>
   15c1c:	bl	11ab0 <towlower@plt>
   15c20:	mov	r6, r0
   15c24:	ldr	r0, [sp, #16]
   15c28:	b	15c34 <__assert_fail@plt+0x3da0>
   15c2c:	ldr	r0, [sp, #16]
   15c30:	ldrb	r6, [r0]
   15c34:	strb	r4, [sp, #12]
   15c38:	ldr	r1, [sp, #20]
   15c3c:	add	r0, r0, r1
   15c40:	str	r0, [sp, #16]
   15c44:	mov	r0, r5
   15c48:	bl	1c15c <__assert_fail@plt+0xa2c8>
   15c4c:	rsb	r0, r7, r7, lsl #5
   15c50:	ldrb	r1, [sp, #24]
   15c54:	add	r7, r6, r0
   15c58:	ldr	r0, [sp, #28]
   15c5c:	cmp	r1, #0
   15c60:	beq	15c14 <__assert_fail@plt+0x3d80>
   15c64:	cmp	r0, #0
   15c68:	bne	15c14 <__assert_fail@plt+0x3d80>
   15c6c:	udiv	r0, r7, r8
   15c70:	mls	r0, r0, r8, r7
   15c74:	sub	sp, fp, #24
   15c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c7c:	b	1a244 <__assert_fail@plt+0x83b0>
   15c80:	push	{fp, lr}
   15c84:	mov	fp, sp
   15c88:	bl	1bef0 <__assert_fail@plt+0xa05c>
   15c8c:	clz	r0, r0
   15c90:	lsr	r0, r0, #5
   15c94:	pop	{fp, pc}
   15c98:	push	{fp, lr}
   15c9c:	mov	fp, sp
   15ca0:	bl	11a14 <strcmp@plt>
   15ca4:	clz	r0, r0
   15ca8:	lsr	r0, r0, #5
   15cac:	pop	{fp, pc}
   15cb0:	b	17754 <__assert_fail@plt+0x58c0>
   15cb4:	push	{r4, r5, r6, sl, fp, lr}
   15cb8:	add	fp, sp, #16
   15cbc:	sub	sp, sp, #8
   15cc0:	mov	r4, r0
   15cc4:	bl	11cfc <fileno@plt>
   15cc8:	cmn	r0, #1
   15ccc:	ble	15d40 <__assert_fail@plt+0x3eac>
   15cd0:	mov	r0, r4
   15cd4:	bl	11c0c <__freading@plt>
   15cd8:	cmp	r0, #0
   15cdc:	beq	15d08 <__assert_fail@plt+0x3e74>
   15ce0:	mov	r0, r4
   15ce4:	bl	11cfc <fileno@plt>
   15ce8:	mov	r1, #1
   15cec:	mov	r2, #0
   15cf0:	mov	r3, #0
   15cf4:	str	r1, [sp]
   15cf8:	bl	11b64 <lseek64@plt>
   15cfc:	and	r0, r0, r1
   15d00:	cmn	r0, #1
   15d04:	beq	15d40 <__assert_fail@plt+0x3eac>
   15d08:	mov	r0, r4
   15d0c:	bl	15d50 <__assert_fail@plt+0x3ebc>
   15d10:	cmp	r0, #0
   15d14:	beq	15d40 <__assert_fail@plt+0x3eac>
   15d18:	bl	11ca8 <__errno_location@plt>
   15d1c:	ldr	r6, [r0]
   15d20:	mov	r5, r0
   15d24:	mov	r0, r4
   15d28:	bl	11d20 <fclose@plt>
   15d2c:	cmp	r6, #0
   15d30:	strne	r6, [r5]
   15d34:	mvnne	r0, #0
   15d38:	sub	sp, fp, #16
   15d3c:	pop	{r4, r5, r6, sl, fp, pc}
   15d40:	mov	r0, r4
   15d44:	sub	sp, fp, #16
   15d48:	pop	{r4, r5, r6, sl, fp, lr}
   15d4c:	b	11d20 <fclose@plt>
   15d50:	push	{r4, sl, fp, lr}
   15d54:	add	fp, sp, #8
   15d58:	sub	sp, sp, #8
   15d5c:	mov	r4, r0
   15d60:	cmp	r0, #0
   15d64:	beq	15d80 <__assert_fail@plt+0x3eec>
   15d68:	mov	r0, r4
   15d6c:	bl	11c0c <__freading@plt>
   15d70:	cmp	r0, #0
   15d74:	ldrbne	r0, [r4, #1]
   15d78:	tstne	r0, #1
   15d7c:	bne	15d90 <__assert_fail@plt+0x3efc>
   15d80:	mov	r0, r4
   15d84:	sub	sp, fp, #8
   15d88:	pop	{r4, sl, fp, lr}
   15d8c:	b	11a38 <fflush@plt>
   15d90:	mov	r0, #1
   15d94:	mov	r2, #0
   15d98:	mov	r3, #0
   15d9c:	str	r0, [sp]
   15da0:	mov	r0, r4
   15da4:	bl	179c4 <__assert_fail@plt+0x5b30>
   15da8:	b	15d80 <__assert_fail@plt+0x3eec>
   15dac:	push	{fp, lr}
   15db0:	mov	fp, sp
   15db4:	sub	sp, sp, #16
   15db8:	str	r3, [sp, #8]
   15dbc:	mvn	r3, #0
   15dc0:	str	r3, [sp, #4]
   15dc4:	mov	r3, #0
   15dc8:	str	r3, [sp]
   15dcc:	ldr	r3, [fp, #8]
   15dd0:	str	r3, [sp, #12]
   15dd4:	mov	r3, #0
   15dd8:	bl	15de4 <__assert_fail@plt+0x3f50>
   15ddc:	mov	sp, fp
   15de0:	pop	{fp, pc}
   15de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15de8:	add	fp, sp, #28
   15dec:	sub	sp, sp, #124	; 0x7c
   15df0:	sub	sp, sp, #1024	; 0x400
   15df4:	str	r3, [sp, #80]	; 0x50
   15df8:	mov	r4, r2
   15dfc:	mov	sl, r1
   15e00:	mov	r7, r0
   15e04:	bl	11ca8 <__errno_location@plt>
   15e08:	mov	r2, r4
   15e0c:	movw	r3, #24652	; 0x604c
   15e10:	str	r0, [sp, #56]	; 0x38
   15e14:	ldr	r1, [r2, #8]!
   15e18:	movt	r3, #3
   15e1c:	cmp	r1, #0
   15e20:	mov	r6, r1
   15e24:	movweq	r6, #12
   15e28:	cmp	r1, #12
   15e2c:	subgt	r6, r1, #12
   15e30:	ldr	r1, [r2, #32]
   15e34:	cmp	r1, #0
   15e38:	movne	r3, r1
   15e3c:	ldr	r1, [r0]
   15e40:	str	r3, [sp, #44]	; 0x2c
   15e44:	ldrb	r3, [sl]
   15e48:	str	r1, [sp, #52]	; 0x34
   15e4c:	cmp	r3, #0
   15e50:	beq	15eb8 <__assert_fail@plt+0x4024>
   15e54:	sub	r0, fp, #46	; 0x2e
   15e58:	mvn	r1, #13
   15e5c:	str	r6, [sp, #32]
   15e60:	ldr	r6, [fp, #12]
   15e64:	mov	lr, #0
   15e68:	str	r2, [sp, #36]	; 0x24
   15e6c:	str	r4, [sp, #68]	; 0x44
   15e70:	str	r7, [sp, #88]	; 0x58
   15e74:	sub	r1, r1, r0
   15e78:	str	r1, [sp, #24]
   15e7c:	add	r1, r0, #13
   15e80:	add	r0, r0, #14
   15e84:	str	r1, [sp, #20]
   15e88:	add	r1, sp, #96	; 0x60
   15e8c:	str	r0, [sp, #60]	; 0x3c
   15e90:	add	r1, r1, #1
   15e94:	str	r1, [sp, #40]	; 0x28
   15e98:	add	r1, r4, #12
   15e9c:	str	r1, [sp, #28]
   15ea0:	sub	r1, fp, #51	; 0x33
   15ea4:	add	r2, r1, #3
   15ea8:	add	r0, r1, #2
   15eac:	str	r2, [sp, #48]	; 0x30
   15eb0:	str	r0, [sp, #64]	; 0x40
   15eb4:	b	15ec8 <__assert_fail@plt+0x4034>
   15eb8:	mov	lr, #0
   15ebc:	b	17720 <__assert_fail@plt+0x588c>
   15ec0:	mov	r8, #3
   15ec4:	b	173b0 <__assert_fail@plt+0x551c>
   15ec8:	uxtb	r1, r3
   15ecc:	mov	r8, sl
   15ed0:	cmp	r1, #37	; 0x25
   15ed4:	bne	15eec <__assert_fail@plt+0x4058>
   15ed8:	ldr	ip, [sp, #80]	; 0x50
   15edc:	mov	r0, #0
   15ee0:	mov	r7, #0
   15ee4:	mov	sl, r8
   15ee8:	b	15fdc <__assert_fail@plt+0x4148>
   15eec:	bic	r1, r6, r6, asr #31
   15ef0:	mov	r5, #1
   15ef4:	mvn	r2, lr
   15ef8:	cmp	r1, #1
   15efc:	movhi	r5, r1
   15f00:	cmp	r5, r2
   15f04:	bcs	17730 <__assert_fail@plt+0x589c>
   15f08:	cmp	r7, #0
   15f0c:	beq	15f58 <__assert_fail@plt+0x40c4>
   15f10:	cmp	r1, #2
   15f14:	bcc	15f44 <__assert_fail@plt+0x40b0>
   15f18:	mov	r9, lr
   15f1c:	sub	r4, r1, #1
   15f20:	mov	r6, #0
   15f24:	mov	r0, #32
   15f28:	mov	r1, r7
   15f2c:	bl	11d80 <fputc@plt>
   15f30:	add	r6, r6, #1
   15f34:	cmp	r6, r4
   15f38:	bcc	15f24 <__assert_fail@plt+0x4090>
   15f3c:	ldrb	r3, [r8]
   15f40:	mov	lr, r9
   15f44:	uxtb	r0, r3
   15f48:	mov	r1, r7
   15f4c:	mov	r4, lr
   15f50:	bl	11d80 <fputc@plt>
   15f54:	mov	lr, r4
   15f58:	add	lr, r5, lr
   15f5c:	mov	sl, r8
   15f60:	b	17710 <__assert_fail@plt+0x587c>
   15f64:	mov	r0, #1
   15f68:	b	15fdc <__assert_fail@plt+0x4148>
   15f6c:	add	r1, r1, #1
   15f70:	add	sl, sl, #1
   15f74:	mov	r7, r9
   15f78:	ldrb	r9, [sl]
   15f7c:	sub	r2, r9, #35	; 0x23
   15f80:	cmp	r2, #13
   15f84:	bhi	15fc8 <__assert_fail@plt+0x4134>
   15f88:	add	r3, pc, #0
   15f8c:	ldr	pc, [r3, r2, lsl #2]
   15f90:	andeq	r5, r1, r4, ror #30
   15f94:	andeq	r5, r1, r8, ror #31
   15f98:	andeq	r5, r1, r8, ror #31
   15f9c:	andeq	r5, r1, r8, ror #31
   15fa0:	andeq	r5, r1, r8, ror #31
   15fa4:	andeq	r5, r1, r8, ror #31
   15fa8:	andeq	r5, r1, r8, ror #31
   15fac:	andeq	r5, r1, r8, ror #31
   15fb0:	andeq	r5, r1, ip, ror #30
   15fb4:	andeq	r5, r1, r8, ror #31
   15fb8:	andeq	r5, r1, ip, ror #30
   15fbc:	andeq	r5, r1, r8, ror #31
   15fc0:	andeq	r5, r1, r8, ror #31
   15fc4:	andeq	r5, r1, ip, ror #30
   15fc8:	cmp	r9, #95	; 0x5f
   15fcc:	beq	15f6c <__assert_fail@plt+0x40d8>
   15fd0:	cmp	r9, #94	; 0x5e
   15fd4:	bne	15fe8 <__assert_fail@plt+0x4154>
   15fd8:	mov	ip, #1
   15fdc:	add	r1, sl, #2
   15fe0:	add	sl, sl, #1
   15fe4:	b	15f78 <__assert_fail@plt+0x40e4>
   15fe8:	sub	r2, r9, #48	; 0x30
   15fec:	cmp	r2, #9
   15ff0:	bhi	1607c <__assert_fail@plt+0x41e8>
   15ff4:	movw	r5, #52428	; 0xcccc
   15ff8:	mov	r4, lr
   15ffc:	mov	lr, ip
   16000:	mov	ip, r7
   16004:	mov	r6, #0
   16008:	mov	r7, #-2147483648	; 0x80000000
   1600c:	str	r0, [sp, #76]	; 0x4c
   16010:	movt	r5, #3276	; 0xccc
   16014:	cmn	r6, #1
   16018:	ble	16028 <__assert_fail@plt+0x4194>
   1601c:	cmp	r6, r5
   16020:	bgt	16038 <__assert_fail@plt+0x41a4>
   16024:	b	16040 <__assert_fail@plt+0x41ac>
   16028:	beq	16040 <__assert_fail@plt+0x41ac>
   1602c:	sdiv	r2, r7, r6
   16030:	cmp	r2, #10
   16034:	bge	16040 <__assert_fail@plt+0x41ac>
   16038:	mvn	r6, #-2147483648	; 0x80000000
   1603c:	b	16058 <__assert_fail@plt+0x41c4>
   16040:	add	r2, r6, r6, lsl #2
   16044:	lsl	r3, r2, #1
   16048:	uxtab	r0, r3, r9
   1604c:	sub	r6, r0, #48	; 0x30
   16050:	cmp	r6, r2, lsl #1
   16054:	mvnvs	r6, #-2147483648	; 0x80000000
   16058:	ldrb	r9, [r1], #1
   1605c:	sub	r2, r9, #48	; 0x30
   16060:	cmp	r2, #10
   16064:	bcc	16014 <__assert_fail@plt+0x4180>
   16068:	ldr	r0, [sp, #76]	; 0x4c
   1606c:	mov	r7, ip
   16070:	mov	ip, lr
   16074:	sub	sl, r1, #1
   16078:	mov	lr, r4
   1607c:	cmp	r9, #79	; 0x4f
   16080:	cmpne	r9, #69	; 0x45
   16084:	bne	16098 <__assert_fail@plt+0x4204>
   16088:	ldrb	r1, [sl, #1]!
   1608c:	cmp	r1, #122	; 0x7a
   16090:	bls	160a8 <__assert_fail@plt+0x4214>
   16094:	b	16ed4 <__assert_fail@plt+0x5040>
   16098:	mov	r1, r9
   1609c:	mov	r9, #0
   160a0:	cmp	r1, #122	; 0x7a
   160a4:	bhi	16ed4 <__assert_fail@plt+0x5040>
   160a8:	str	r7, [sp, #92]	; 0x5c
   160ac:	movw	r5, #25462	; 0x6376
   160b0:	add	r2, pc, #12
   160b4:	mov	r7, #0
   160b8:	mvn	r3, #0
   160bc:	movt	r5, #3
   160c0:	ldr	pc, [r2, r1, lsl #2]
   160c4:			; <UNDEFINED> instruction: 0x000163bc
   160c8:	ldrdeq	r6, [r1], -r0
   160cc:	ldrdeq	r6, [r1], -r0
   160d0:	ldrdeq	r6, [r1], -r0
   160d4:	ldrdeq	r6, [r1], -r0
   160d8:	ldrdeq	r6, [r1], -r0
   160dc:	ldrdeq	r6, [r1], -r0
   160e0:	ldrdeq	r6, [r1], -r0
   160e4:	ldrdeq	r6, [r1], -r0
   160e8:	ldrdeq	r6, [r1], -r0
   160ec:	ldrdeq	r6, [r1], -r0
   160f0:	ldrdeq	r6, [r1], -r0
   160f4:	ldrdeq	r6, [r1], -r0
   160f8:	ldrdeq	r6, [r1], -r0
   160fc:	ldrdeq	r6, [r1], -r0
   16100:	ldrdeq	r6, [r1], -r0
   16104:	ldrdeq	r6, [r1], -r0
   16108:	ldrdeq	r6, [r1], -r0
   1610c:	ldrdeq	r6, [r1], -r0
   16110:	ldrdeq	r6, [r1], -r0
   16114:	ldrdeq	r6, [r1], -r0
   16118:	ldrdeq	r6, [r1], -r0
   1611c:	ldrdeq	r6, [r1], -r0
   16120:	ldrdeq	r6, [r1], -r0
   16124:	ldrdeq	r6, [r1], -r0
   16128:	ldrdeq	r6, [r1], -r0
   1612c:	ldrdeq	r6, [r1], -r0
   16130:	ldrdeq	r6, [r1], -r0
   16134:	ldrdeq	r6, [r1], -r0
   16138:	ldrdeq	r6, [r1], -r0
   1613c:	ldrdeq	r6, [r1], -r0
   16140:	ldrdeq	r6, [r1], -r0
   16144:	ldrdeq	r6, [r1], -r0
   16148:	ldrdeq	r6, [r1], -r0
   1614c:	ldrdeq	r6, [r1], -r0
   16150:	ldrdeq	r6, [r1], -r0
   16154:	ldrdeq	r6, [r1], -r0
   16158:	andeq	r6, r1, r8, asr #7
   1615c:	ldrdeq	r6, [r1], -r0
   16160:	ldrdeq	r6, [r1], -r0
   16164:	ldrdeq	r6, [r1], -r0
   16168:	ldrdeq	r6, [r1], -r0
   1616c:	ldrdeq	r6, [r1], -r0
   16170:	ldrdeq	r6, [r1], -r0
   16174:	ldrdeq	r6, [r1], -r0
   16178:	ldrdeq	r6, [r1], -r0
   1617c:	ldrdeq	r6, [r1], -r0
   16180:	ldrdeq	r6, [r1], -r0
   16184:	ldrdeq	r6, [r1], -r0
   16188:	ldrdeq	r6, [r1], -r0
   1618c:	ldrdeq	r6, [r1], -r0
   16190:	ldrdeq	r6, [r1], -r0
   16194:	ldrdeq	r6, [r1], -r0
   16198:	ldrdeq	r6, [r1], -r0
   1619c:	ldrdeq	r6, [r1], -r0
   161a0:	ldrdeq	r6, [r1], -r0
   161a4:	ldrdeq	r6, [r1], -r0
   161a8:	ldrdeq	r6, [r1], -r0
   161ac:	andeq	r6, r1, r8, asr #8
   161b0:	ldrdeq	r6, [r1], -r0
   161b4:	ldrdeq	r6, [r1], -r0
   161b8:	ldrdeq	r6, [r1], -r0
   161bc:	ldrdeq	r6, [r1], -r0
   161c0:	ldrdeq	r6, [r1], -r0
   161c4:	ldrdeq	r6, [r1], -r0
   161c8:	andeq	r6, r1, r0, asr #9
   161cc:	ldrdeq	r6, [r1], -r8
   161d0:	strdeq	r6, [r1], -r0
   161d4:	andeq	r6, r1, r4, lsl #10
   161d8:	ldrdeq	r6, [r1], -r0
   161dc:	andeq	r6, r1, r8, lsl r5
   161e0:			; <UNDEFINED> instruction: 0x000162b0
   161e4:	andeq	r6, r1, ip, asr #10
   161e8:	andeq	r6, r1, ip, asr r5
   161ec:	ldrdeq	r6, [r1], -r0
   161f0:	ldrdeq	r6, [r1], -r0
   161f4:	ldrdeq	r6, [r1], -r0
   161f8:	andeq	r6, r1, r0, ror r5
   161fc:	andeq	r6, r1, r8, lsl #11
   16200:	ldrdeq	r6, [r1], -r0
   16204:	andeq	r6, r1, r0, asr #13
   16208:	ldrdeq	r6, [r1], -r0
   1620c:	strdeq	r6, [r1], -r0
   16210:	ldrdeq	r6, [r1], -r8
   16214:	andeq	r6, r1, r8, ror #13
   16218:	andeq	r6, r1, ip, lsr #15
   1621c:			; <UNDEFINED> instruction: 0x000162b0
   16220:	ldrdeq	r6, [r1], -ip
   16224:	andeq	r6, r1, r0, lsr r8
   16228:	andeq	r6, r1, r4, asr #16
   1622c:	andeq	r6, r1, r4, lsl #17
   16230:	ldrdeq	r6, [r1], -r0
   16234:	ldrdeq	r6, [r1], -r0
   16238:	ldrdeq	r6, [r1], -r0
   1623c:	ldrdeq	r6, [r1], -r0
   16240:	ldrdeq	r6, [r1], -r0
   16244:	ldrdeq	r6, [r1], -r0
   16248:	andeq	r6, r1, r4, lsl r9
   1624c:	andeq	r6, r1, r8, lsr #7
   16250:	andeq	r6, r1, ip, lsr #18
   16254:	andeq	r6, r1, r0, asr #18
   16258:	andeq	r6, r1, r8, asr r9
   1625c:	ldrdeq	r6, [r1], -r0
   16260:			; <UNDEFINED> instruction: 0x000162b0
   16264:	andeq	r6, r1, r8, lsr #7
   16268:	ldrdeq	r6, [r1], -r0
   1626c:	andeq	r6, r1, r8, ror #18
   16270:	andeq	r6, r1, r8, lsl #19
   16274:	andeq	r6, r1, r0, lsr #19
   16278:	andeq	r6, r1, r4, ror ip
   1627c:	andeq	r6, r1, r0, lsr #25
   16280:	ldrdeq	r6, [r1], -r0
   16284:	andeq	r6, r1, r4, asr #13
   16288:	andeq	r6, r1, r4, lsl sp
   1628c:	andeq	r6, r1, r4, lsr #22
   16290:	andeq	r6, r1, r8, lsr sp
   16294:	andeq	r6, r1, r0, lsl #28
   16298:	andeq	r6, r1, r4, ror lr
   1629c:	ldrdeq	r6, [r1], -r0
   162a0:	andeq	r6, r1, ip, lsr #29
   162a4:	andeq	r6, r1, r8, asr #29
   162a8:	andeq	r6, r1, r4, ror #31
   162ac:	andeq	r6, r1, ip, ror #8
   162b0:	cmp	r9, #69	; 0x45
   162b4:	beq	16ed0 <__assert_fail@plt+0x503c>
   162b8:	ldr	r2, [sp, #68]	; 0x44
   162bc:	str	lr, [sp, #84]	; 0x54
   162c0:	movw	r0, #9363	; 0x2493
   162c4:	str	ip, [sp, #72]	; 0x48
   162c8:	movt	r0, #37449	; 0x9249
   162cc:	ldr	r5, [r2, #28]
   162d0:	ldr	r8, [r2, #24]
   162d4:	ldr	lr, [r2, #20]
   162d8:	movw	r2, #382	; 0x17e
   162dc:	add	r2, r5, r2
   162e0:	cmp	lr, #0
   162e4:	sub	r2, r2, r8
   162e8:	smmla	r4, r2, r0, r2
   162ec:	asr	r7, r4, #2
   162f0:	add	r4, r7, r4, lsr #31
   162f4:	rsb	r4, r4, r4, lsl #3
   162f8:	sub	r2, r4, r2
   162fc:	mvn	r4, #99	; 0x63
   16300:	add	r2, r5, r2
   16304:	movwlt	r4, #300	; 0x12c
   16308:	add	r2, r2, #3
   1630c:	add	r4, r4, lr
   16310:	cmn	r2, #1
   16314:	ble	17160 <__assert_fail@plt+0x52cc>
   16318:	movw	r7, #365	; 0x16d
   1631c:	tst	r4, #3
   16320:	bne	16364 <__assert_fail@plt+0x44d0>
   16324:	movw	r7, #34079	; 0x851f
   16328:	mov	ip, #100	; 0x64
   1632c:	movt	r7, #20971	; 0x51eb
   16330:	smmul	r7, r4, r7
   16334:	asr	r3, r7, #5
   16338:	add	r3, r3, r7, lsr #31
   1633c:	mls	ip, r3, ip, r4
   16340:	asr	r3, r7, #7
   16344:	add	r3, r3, r7, lsr #31
   16348:	mov	r7, #400	; 0x190
   1634c:	mls	r3, r3, r7, r4
   16350:	movw	r7, #365	; 0x16d
   16354:	cmp	r3, #0
   16358:	movweq	r7, #366	; 0x16e
   1635c:	cmp	ip, #0
   16360:	movwne	r7, #366	; 0x16e
   16364:	add	r3, r8, r7
   16368:	movw	r7, #382	; 0x17e
   1636c:	add	r7, r5, r7
   16370:	mov	r5, r0
   16374:	sub	r3, r7, r3
   16378:	smmla	r3, r3, r0, r3
   1637c:	asr	r7, r3, #2
   16380:	add	r3, r7, r3, lsr #31
   16384:	movw	r7, #379	; 0x17b
   16388:	rsb	r3, r3, r3, lsl #3
   1638c:	add	r3, r3, r8
   16390:	sub	r3, r3, r7
   16394:	mov	r7, #1
   16398:	cmn	r3, #1
   1639c:	movgt	r2, r3
   163a0:	eor	r3, r7, r3, lsr #31
   163a4:	b	171e0 <__assert_fail@plt+0x534c>
   163a8:	orr	ip, r0, ip
   163ac:	mov	r7, #0
   163b0:	cmp	r9, #69	; 0x45
   163b4:	bne	16b24 <__assert_fail@plt+0x4c90>
   163b8:	b	16ed0 <__assert_fail@plt+0x503c>
   163bc:	ldr	r7, [sp, #92]	; 0x5c
   163c0:	sub	r9, sl, #1
   163c4:	b	16ed8 <__assert_fail@plt+0x5044>
   163c8:	ldr	r7, [sp, #92]	; 0x5c
   163cc:	sub	r9, sl, #1
   163d0:	cmp	r9, r8
   163d4:	bne	16ed8 <__assert_fail@plt+0x5044>
   163d8:	subs	r0, r7, #45	; 0x2d
   163dc:	mvn	r1, lr
   163e0:	bicne	r0, r6, r6, asr #31
   163e4:	cmp	r0, #1
   163e8:	mov	r5, r0
   163ec:	movls	r5, #1
   163f0:	cmp	r5, r1
   163f4:	bcs	17730 <__assert_fail@plt+0x589c>
   163f8:	ldr	r1, [sp, #88]	; 0x58
   163fc:	cmp	r1, #0
   16400:	beq	17708 <__assert_fail@plt+0x5874>
   16404:	ldr	r7, [sp, #88]	; 0x58
   16408:	mov	r4, lr
   1640c:	cmp	r0, #2
   16410:	bcc	176f8 <__assert_fail@plt+0x5864>
   16414:	ldr	r1, [sp, #92]	; 0x5c
   16418:	sub	r6, r0, #1
   1641c:	uxtb	r1, r1
   16420:	cmp	r1, #43	; 0x2b
   16424:	cmpne	r1, #48	; 0x30
   16428:	bne	176e0 <__assert_fail@plt+0x584c>
   1642c:	ldr	r7, [sp, #88]	; 0x58
   16430:	mov	r0, #48	; 0x30
   16434:	mov	r1, r7
   16438:	bl	11d80 <fputc@plt>
   1643c:	subs	r6, r6, #1
   16440:	bne	16430 <__assert_fail@plt+0x459c>
   16444:	b	176f8 <__assert_fail@plt+0x5864>
   16448:	mov	r7, #1
   1644c:	b	16454 <__assert_fail@plt+0x45c0>
   16450:	add	r7, r7, #1
   16454:	ldrb	r2, [sl, r7]
   16458:	cmp	r2, #58	; 0x3a
   1645c:	beq	16450 <__assert_fail@plt+0x45bc>
   16460:	cmp	r2, #122	; 0x7a
   16464:	bne	16ed0 <__assert_fail@plt+0x503c>
   16468:	add	sl, sl, r7
   1646c:	ldr	r3, [sp, #68]	; 0x44
   16470:	ldr	r2, [r3, #32]
   16474:	cmp	r2, #0
   16478:	blt	17244 <__assert_fail@plt+0x53b0>
   1647c:	ldr	r2, [r3, #36]	; 0x24
   16480:	str	lr, [sp, #84]	; 0x54
   16484:	str	ip, [sp, #72]	; 0x48
   16488:	cmp	r2, #0
   1648c:	blt	1733c <__assert_fail@plt+0x54a8>
   16490:	mov	ip, #0
   16494:	bne	17340 <__assert_fail@plt+0x54ac>
   16498:	ldr	r3, [sp, #44]	; 0x2c
   1649c:	ldrb	r3, [r3]
   164a0:	sub	r3, r3, #45	; 0x2d
   164a4:	clz	r3, r3
   164a8:	lsr	ip, r3, #5
   164ac:	cmp	r7, #3
   164b0:	bls	17348 <__assert_fail@plt+0x54b4>
   164b4:	ldr	lr, [sp, #84]	; 0x54
   164b8:	ldr	ip, [sp, #72]	; 0x48
   164bc:	b	16ed0 <__assert_fail@plt+0x503c>
   164c0:	cmp	r9, #0
   164c4:	bne	16ed0 <__assert_fail@plt+0x503c>
   164c8:	orr	ip, r0, ip
   164cc:	mov	r7, #0
   164d0:	mov	r1, #65	; 0x41
   164d4:	b	16b24 <__assert_fail@plt+0x4c90>
   164d8:	cmp	r9, #69	; 0x45
   164dc:	beq	16ed0 <__assert_fail@plt+0x503c>
   164e0:	orr	ip, r0, ip
   164e4:	mov	r7, #0
   164e8:	mov	r1, #66	; 0x42
   164ec:	b	16b24 <__assert_fail@plt+0x4c90>
   164f0:	cmp	r9, #69	; 0x45
   164f4:	bne	1724c <__assert_fail@plt+0x53b8>
   164f8:	mov	r7, #0
   164fc:	mov	r1, #67	; 0x43
   16500:	b	16b24 <__assert_fail@plt+0x4c90>
   16504:	cmp	r9, #0
   16508:	bne	16ed0 <__assert_fail@plt+0x503c>
   1650c:	movw	r5, #27907	; 0x6d03
   16510:	movt	r5, #3
   16514:	b	166f0 <__assert_fail@plt+0x485c>
   16518:	cmp	r9, #0
   1651c:	bne	16ed0 <__assert_fail@plt+0x503c>
   16520:	ldr	r0, [sp, #92]	; 0x5c
   16524:	movw	r5, #25468	; 0x637c
   16528:	movt	r5, #3
   1652c:	cmp	r0, #0
   16530:	bne	17430 <__assert_fail@plt+0x559c>
   16534:	cmp	r6, #0
   16538:	bge	17430 <__assert_fail@plt+0x559c>
   1653c:	mov	r0, #43	; 0x2b
   16540:	mov	r3, #4
   16544:	str	r0, [sp, #92]	; 0x5c
   16548:	b	166f0 <__assert_fail@plt+0x485c>
   1654c:	cmp	r9, #69	; 0x45
   16550:	beq	16ed0 <__assert_fail@plt+0x503c>
   16554:	ldr	r2, [sp, #36]	; 0x24
   16558:	b	1694c <__assert_fail@plt+0x4ab8>
   1655c:	cmp	r9, #69	; 0x45
   16560:	beq	16ed0 <__assert_fail@plt+0x503c>
   16564:	ldr	r3, [sp, #32]
   16568:	str	ip, [sp, #72]	; 0x48
   1656c:	b	169c0 <__assert_fail@plt+0x4b2c>
   16570:	cmp	r9, #69	; 0x45
   16574:	beq	16ed0 <__assert_fail@plt+0x503c>
   16578:	ldr	r2, [sp, #68]	; 0x44
   1657c:	str	ip, [sp, #72]	; 0x48
   16580:	ldr	r3, [r2, #4]
   16584:	b	169c0 <__assert_fail@plt+0x4b2c>
   16588:	cmp	r9, #69	; 0x45
   1658c:	beq	16ed0 <__assert_fail@plt+0x503c>
   16590:	ldr	r2, [fp, #20]
   16594:	cmp	r6, #1
   16598:	mov	r7, #0
   1659c:	mov	r0, #8
   165a0:	str	lr, [sp, #84]	; 0x54
   165a4:	movwlt	r6, #9
   165a8:	b	165c8 <__assert_fail@plt+0x4734>
   165ac:	movw	r1, #26215	; 0x6667
   165b0:	sub	r0, r0, #1
   165b4:	sub	r7, r7, #1
   165b8:	movt	r1, #26214	; 0x6666
   165bc:	smmul	r1, r2, r1
   165c0:	asr	r2, r1, #2
   165c4:	add	r2, r2, r1, lsr #31
   165c8:	add	r1, r7, #9
   165cc:	cmp	r6, r1
   165d0:	blt	165ac <__assert_fail@plt+0x4718>
   165d4:	movw	r3, #26215	; 0x6667
   165d8:	cmp	r1, #2
   165dc:	movt	r3, #26214	; 0x6666
   165e0:	blt	16600 <__assert_fail@plt+0x476c>
   165e4:	smmul	r5, r2, r3
   165e8:	asr	r4, r5, #2
   165ec:	add	r5, r4, r5, lsr #31
   165f0:	add	r5, r5, r5, lsl #2
   165f4:	sub	r5, r2, r5, lsl #1
   165f8:	cmp	r5, #0
   165fc:	beq	165ac <__assert_fail@plt+0x4718>
   16600:	mov	lr, ip
   16604:	cmp	r1, #1
   16608:	sub	ip, fp, #46	; 0x2e
   1660c:	blt	16644 <__assert_fail@plt+0x47b0>
   16610:	smmul	r5, r2, r3
   16614:	asr	r4, r5, #2
   16618:	add	r5, r4, r5, lsr #31
   1661c:	add	r4, r5, r5, lsl #2
   16620:	sub	r2, r2, r4, lsl #1
   16624:	add	r2, r2, #48	; 0x30
   16628:	strb	r2, [ip, r0]
   1662c:	sub	r2, r0, #1
   16630:	add	r0, r0, #1
   16634:	cmp	r0, #1
   16638:	mov	r0, r2
   1663c:	mov	r2, r5
   16640:	bgt	16610 <__assert_fail@plt+0x477c>
   16644:	ldr	r0, [sp, #92]	; 0x5c
   16648:	cmp	r0, #0
   1664c:	movweq	r0, #48	; 0x30
   16650:	str	r0, [sp, #92]	; 0x5c
   16654:	ldr	r0, [sp, #84]	; 0x54
   16658:	mvn	r0, r0
   1665c:	cmp	r1, r0
   16660:	bcs	17730 <__assert_fail@plt+0x589c>
   16664:	ldr	r0, [sp, #88]	; 0x58
   16668:	cmp	r0, #0
   1666c:	beq	17500 <__assert_fail@plt+0x566c>
   16670:	tst	lr, #1
   16674:	beq	174f0 <__assert_fail@plt+0x565c>
   16678:	ldr	r8, [sp, #88]	; 0x58
   1667c:	cmn	r7, #9
   16680:	sub	r0, fp, #46	; 0x2e
   16684:	beq	17500 <__assert_fail@plt+0x566c>
   16688:	mov	r4, #0
   1668c:	mov	r9, r0
   16690:	bl	11c24 <__ctype_toupper_loc@plt>
   16694:	mov	r5, r0
   16698:	ldrb	r0, [r9, -r4]
   1669c:	ldr	r1, [r5]
   166a0:	ldr	r0, [r1, r0, lsl #2]
   166a4:	mov	r1, r8
   166a8:	bl	11d80 <fputc@plt>
   166ac:	sub	r4, r4, #1
   166b0:	add	r0, r7, r4
   166b4:	cmn	r0, #9
   166b8:	bne	16698 <__assert_fail@plt+0x4804>
   166bc:	b	17500 <__assert_fail@plt+0x566c>
   166c0:	mov	r7, #1
   166c4:	eor	r1, r0, #1
   166c8:	orr	r7, r0, r7
   166cc:	and	ip, ip, r1
   166d0:	mov	r1, #112	; 0x70
   166d4:	b	16b24 <__assert_fail@plt+0x4c90>
   166d8:	cmp	r9, #69	; 0x45
   166dc:	beq	16ed0 <__assert_fail@plt+0x503c>
   166e0:	ldr	r2, [sp, #68]	; 0x44
   166e4:	b	1694c <__assert_fail@plt+0x4ab8>
   166e8:	movw	r5, #27916	; 0x6d0c
   166ec:	movt	r5, #3
   166f0:	ldr	r0, [sp, #92]	; 0x5c
   166f4:	str	r3, [sp, #76]	; 0x4c
   166f8:	and	r4, ip, #1
   166fc:	mov	r1, r5
   16700:	mov	r9, lr
   16704:	stm	sp, {r0, r3}
   16708:	mov	r7, r0
   1670c:	ldr	r0, [fp, #16]
   16710:	mov	r3, r4
   16714:	ldr	r2, [sp, #68]	; 0x44
   16718:	str	r0, [sp, #8]
   1671c:	ldr	r0, [fp, #20]
   16720:	str	r0, [sp, #12]
   16724:	mov	r0, #0
   16728:	bl	15de4 <__assert_fail@plt+0x3f50>
   1672c:	subs	r1, r7, #45	; 0x2d
   16730:	mvn	r2, r9
   16734:	movne	r1, r6
   16738:	cmp	r6, #0
   1673c:	mov	r6, r0
   16740:	movwlt	r1, #0
   16744:	cmp	r1, r0
   16748:	movhi	r6, r1
   1674c:	cmp	r6, r2
   16750:	bcs	17730 <__assert_fail@plt+0x589c>
   16754:	ldr	r2, [sp, #88]	; 0x58
   16758:	mov	lr, r9
   1675c:	cmp	r2, #0
   16760:	beq	17424 <__assert_fail@plt+0x5590>
   16764:	ldr	r8, [sp, #88]	; 0x58
   16768:	cmp	r1, r0
   1676c:	str	r4, [sp, #72]	; 0x48
   16770:	bls	173ec <__assert_fail@plt+0x5558>
   16774:	sub	r7, r1, r0
   16778:	ldr	r0, [sp, #92]	; 0x5c
   1677c:	cmp	r0, #43	; 0x2b
   16780:	cmpne	r0, #48	; 0x30
   16784:	bne	173cc <__assert_fail@plt+0x5538>
   16788:	ldr	r8, [sp, #88]	; 0x58
   1678c:	cmp	r7, #0
   16790:	beq	173ec <__assert_fail@plt+0x5558>
   16794:	mov	r0, #48	; 0x30
   16798:	mov	r1, r8
   1679c:	bl	11d80 <fputc@plt>
   167a0:	subs	r7, r7, #1
   167a4:	bne	16794 <__assert_fail@plt+0x4900>
   167a8:	b	173ec <__assert_fail@plt+0x5558>
   167ac:	cmp	r9, #69	; 0x45
   167b0:	beq	16ed0 <__assert_fail@plt+0x503c>
   167b4:	ldr	r3, [sp, #68]	; 0x44
   167b8:	str	ip, [sp, #72]	; 0x48
   167bc:	ldr	r2, [r3, #24]
   167c0:	ldr	r3, [r3, #28]
   167c4:	add	r3, r3, #7
   167c8:	sub	r2, r3, r2
   167cc:	movw	r3, #9363	; 0x2493
   167d0:	movt	r3, #37449	; 0x9249
   167d4:	smmla	r2, r2, r3, r2
   167d8:	b	16824 <__assert_fail@plt+0x4990>
   167dc:	cmp	r9, #69	; 0x45
   167e0:	beq	16ed0 <__assert_fail@plt+0x503c>
   167e4:	ldr	r3, [sp, #68]	; 0x44
   167e8:	str	ip, [sp, #72]	; 0x48
   167ec:	movw	ip, #9363	; 0x2493
   167f0:	mov	r7, lr
   167f4:	movt	ip, #37449	; 0x9249
   167f8:	ldr	r2, [r3, #24]
   167fc:	ldr	r3, [r3, #28]
   16800:	add	r2, r2, #6
   16804:	smmla	r5, r2, ip, r2
   16808:	asr	r4, r5, #2
   1680c:	add	r5, r4, r5, lsr #31
   16810:	rsb	r5, r5, r5, lsl #3
   16814:	sub	r2, r5, r2
   16818:	add	r2, r3, r2
   1681c:	add	r2, r2, #7
   16820:	smmla	r2, r2, ip, r2
   16824:	asr	r3, r2, #2
   16828:	add	r3, r3, r2, lsr #31
   1682c:	b	169c0 <__assert_fail@plt+0x4b2c>
   16830:	cmp	r9, #79	; 0x4f
   16834:	beq	16ed0 <__assert_fail@plt+0x503c>
   16838:	mov	r7, #0
   1683c:	mov	r1, #88	; 0x58
   16840:	b	16b24 <__assert_fail@plt+0x4c90>
   16844:	cmp	r9, #69	; 0x45
   16848:	beq	173c0 <__assert_fail@plt+0x552c>
   1684c:	cmp	r9, #79	; 0x4f
   16850:	beq	16ed0 <__assert_fail@plt+0x503c>
   16854:	ldr	r2, [sp, #68]	; 0x44
   16858:	movw	r3, #63636	; 0xf894
   1685c:	str	ip, [sp, #72]	; 0x48
   16860:	mov	ip, #0
   16864:	mov	r8, #4
   16868:	movt	r3, #65535	; 0xffff
   1686c:	ldr	r2, [r2, #20]
   16870:	cmp	r2, r3
   16874:	movw	r3, #1900	; 0x76c
   16878:	movwlt	ip, #1
   1687c:	add	r3, r2, r3
   16880:	b	17470 <__assert_fail@plt+0x55dc>
   16884:	str	r0, [sp, #76]	; 0x4c
   16888:	ldr	r0, [sp, #92]	; 0x5c
   1688c:	str	ip, [sp, #72]	; 0x48
   16890:	mov	r8, lr
   16894:	subs	r4, r0, #45	; 0x2d
   16898:	ldr	r0, [sp, #44]	; 0x2c
   1689c:	bicne	r4, r6, r6, asr #31
   168a0:	bl	11c78 <strlen@plt>
   168a4:	cmp	r4, r0
   168a8:	mov	r9, r0
   168ac:	mov	r5, r0
   168b0:	mvn	r0, r8
   168b4:	str	r8, [sp, #84]	; 0x54
   168b8:	movhi	r9, r4
   168bc:	cmp	r9, r0
   168c0:	bcs	17730 <__assert_fail@plt+0x589c>
   168c4:	ldr	r7, [sp, #88]	; 0x58
   168c8:	cmp	r7, #0
   168cc:	beq	17670 <__assert_fail@plt+0x57dc>
   168d0:	cmp	r4, r5
   168d4:	bls	175c8 <__assert_fail@plt+0x5734>
   168d8:	ldr	r0, [sp, #92]	; 0x5c
   168dc:	sub	r6, r4, r5
   168e0:	uxtb	r0, r0
   168e4:	cmp	r0, #43	; 0x2b
   168e8:	cmpne	r0, #48	; 0x30
   168ec:	bne	175a8 <__assert_fail@plt+0x5714>
   168f0:	ldr	r4, [sp, #88]	; 0x58
   168f4:	cmp	r6, #0
   168f8:	beq	175c8 <__assert_fail@plt+0x5734>
   168fc:	mov	r0, #48	; 0x30
   16900:	mov	r1, r4
   16904:	bl	11d80 <fputc@plt>
   16908:	subs	r6, r6, #1
   1690c:	bne	168fc <__assert_fail@plt+0x4a68>
   16910:	b	175c8 <__assert_fail@plt+0x5734>
   16914:	cmp	r9, #0
   16918:	bne	16ed0 <__assert_fail@plt+0x503c>
   1691c:	orr	ip, r0, ip
   16920:	mov	r7, #0
   16924:	mov	r1, #97	; 0x61
   16928:	b	16b24 <__assert_fail@plt+0x4c90>
   1692c:	cmp	r9, #79	; 0x4f
   16930:	beq	16ed0 <__assert_fail@plt+0x503c>
   16934:	mov	r7, #0
   16938:	mov	r1, #99	; 0x63
   1693c:	b	16b24 <__assert_fail@plt+0x4c90>
   16940:	cmp	r9, #69	; 0x45
   16944:	beq	16ed0 <__assert_fail@plt+0x503c>
   16948:	ldr	r2, [sp, #28]
   1694c:	str	ip, [sp, #72]	; 0x48
   16950:	ldr	r3, [r2]
   16954:	b	169c0 <__assert_fail@plt+0x4b2c>
   16958:	ldr	r2, [sp, #28]
   1695c:	cmp	r9, #69	; 0x45
   16960:	bne	16994 <__assert_fail@plt+0x4b00>
   16964:	b	16ed0 <__assert_fail@plt+0x503c>
   16968:	cmp	r9, #69	; 0x45
   1696c:	beq	16ed0 <__assert_fail@plt+0x503c>
   16970:	ldr	r2, [sp, #68]	; 0x44
   16974:	str	ip, [sp, #72]	; 0x48
   16978:	mov	ip, #0
   1697c:	mov	r8, #3
   16980:	ldr	r2, [r2, #28]
   16984:	b	16c90 <__assert_fail@plt+0x4dfc>
   16988:	ldr	r2, [sp, #36]	; 0x24
   1698c:	cmp	r9, #69	; 0x45
   16990:	beq	16ed0 <__assert_fail@plt+0x503c>
   16994:	ldr	r3, [r2]
   16998:	ldr	r7, [sp, #92]	; 0x5c
   1699c:	b	169b0 <__assert_fail@plt+0x4b1c>
   169a0:	ldr	r3, [sp, #32]
   169a4:	ldr	r7, [sp, #92]	; 0x5c
   169a8:	cmp	r9, #69	; 0x45
   169ac:	beq	16ed4 <__assert_fail@plt+0x5040>
   169b0:	cmp	r7, #0
   169b4:	str	ip, [sp, #72]	; 0x48
   169b8:	movweq	r7, #95	; 0x5f
   169bc:	str	r7, [sp, #92]	; 0x5c
   169c0:	mov	r8, #2
   169c4:	lsr	ip, r3, #31
   169c8:	cmp	ip, #0
   169cc:	mov	r2, #0
   169d0:	mov	r0, #0
   169d4:	movwne	ip, #1
   169d8:	cmp	r9, #79	; 0x4f
   169dc:	moveq	r7, #0
   169e0:	cmpeq	ip, #0
   169e4:	beq	16b20 <__assert_fail@plt+0x4c8c>
   169e8:	ldr	r5, [sp, #60]	; 0x3c
   169ec:	ldr	r7, [sp, #92]	; 0x5c
   169f0:	cmp	ip, #0
   169f4:	rsbne	r3, r3, #0
   169f8:	tst	r2, #1
   169fc:	asr	r2, r2, #1
   16a00:	movne	r1, #58	; 0x3a
   16a04:	strbne	r1, [r5, #-1]!
   16a08:	movw	r1, #52429	; 0xcccd
   16a0c:	cmp	r3, #9
   16a10:	movt	r1, #52428	; 0xcccc
   16a14:	umull	r4, r1, r3, r1
   16a18:	lsr	r4, r1, #3
   16a1c:	add	r1, r4, r4, lsl #2
   16a20:	sub	r1, r3, r1, lsl #1
   16a24:	mov	r3, r4
   16a28:	orr	r1, r1, #48	; 0x30
   16a2c:	strb	r1, [r5, #-1]!
   16a30:	bhi	169f8 <__assert_fail@plt+0x4b64>
   16a34:	cmp	r2, #0
   16a38:	mov	r3, r4
   16a3c:	bne	169f8 <__assert_fail@plt+0x4b64>
   16a40:	cmp	r6, #0
   16a44:	movge	r8, r6
   16a48:	cmp	r0, #0
   16a4c:	movwne	r0, #43	; 0x2b
   16a50:	cmp	r7, #0
   16a54:	movweq	r7, #48	; 0x30
   16a58:	mov	r3, r7
   16a5c:	ldr	r1, [sp, #60]	; 0x3c
   16a60:	cmp	ip, #0
   16a64:	mov	r2, r8
   16a68:	movwne	r0, #45	; 0x2d
   16a6c:	cmp	r0, #0
   16a70:	subne	r2, r2, #1
   16a74:	sub	r9, r1, r5
   16a78:	sub	r7, r2, r9
   16a7c:	cmp	r7, #1
   16a80:	movwlt	r7, #0
   16a84:	subs	r6, r3, #45	; 0x2d
   16a88:	moveq	r7, r6
   16a8c:	cmp	r0, #0
   16a90:	beq	16c00 <__assert_fail@plt+0x4d6c>
   16a94:	str	r9, [sp, #92]	; 0x5c
   16a98:	mov	r9, r3
   16a9c:	cmp	r3, #95	; 0x5f
   16aa0:	bne	16aec <__assert_fail@plt+0x4c58>
   16aa4:	str	r8, [sp, #76]	; 0x4c
   16aa8:	ldr	r8, [sp, #88]	; 0x58
   16aac:	str	r0, [sp, #16]
   16ab0:	str	lr, [sp, #84]	; 0x54
   16ab4:	cmp	r8, #0
   16ab8:	cmpne	r7, #0
   16abc:	beq	16ad8 <__assert_fail@plt+0x4c44>
   16ac0:	mov	r4, r7
   16ac4:	mov	r0, #32
   16ac8:	mov	r1, r8
   16acc:	bl	11d80 <fputc@plt>
   16ad0:	subs	r4, r4, #1
   16ad4:	bne	16ac4 <__assert_fail@plt+0x4c30>
   16ad8:	ldr	r8, [sp, #76]	; 0x4c
   16adc:	ldr	lr, [sp, #84]	; 0x54
   16ae0:	ldr	r0, [sp, #16]
   16ae4:	sub	r8, r8, r7
   16ae8:	add	lr, r7, lr
   16aec:	mov	r7, r9
   16af0:	ldr	r9, [sp, #92]	; 0x5c
   16af4:	cmn	lr, #3
   16af8:	bhi	17730 <__assert_fail@plt+0x589c>
   16afc:	ldr	r1, [sp, #88]	; 0x58
   16b00:	cmp	r1, #0
   16b04:	beq	16b14 <__assert_fail@plt+0x4c80>
   16b08:	mov	r4, lr
   16b0c:	bl	11d80 <fputc@plt>
   16b10:	mov	lr, r4
   16b14:	sub	r8, r8, #1
   16b18:	add	lr, lr, #1
   16b1c:	b	16c04 <__assert_fail@plt+0x4d70>
   16b20:	ldr	ip, [sp, #72]	; 0x48
   16b24:	movw	r2, #9504	; 0x2520
   16b28:	cmp	r9, #0
   16b2c:	ldr	r3, [sp, #68]	; 0x44
   16b30:	mov	r0, #0
   16b34:	mov	r4, lr
   16b38:	str	ip, [sp, #72]	; 0x48
   16b3c:	strh	r2, [fp, #-51]	; 0xffffffcd
   16b40:	ldr	r2, [sp, #64]	; 0x40
   16b44:	strbne	r9, [fp, #-49]	; 0xffffffcf
   16b48:	ldrne	r2, [sp, #48]	; 0x30
   16b4c:	strb	r0, [r2, #1]
   16b50:	strb	r1, [r2]
   16b54:	add	r0, sp, #96	; 0x60
   16b58:	sub	r2, fp, #51	; 0x33
   16b5c:	mov	r1, #1024	; 0x400
   16b60:	bl	11c00 <strftime@plt>
   16b64:	cmp	r0, #0
   16b68:	beq	16bf4 <__assert_fail@plt+0x4d60>
   16b6c:	mov	r2, r0
   16b70:	ldr	r0, [sp, #92]	; 0x5c
   16b74:	mvn	r1, r4
   16b78:	sub	r5, r2, #1
   16b7c:	mov	r9, r5
   16b80:	subs	r0, r0, #45	; 0x2d
   16b84:	movne	r0, r6
   16b88:	cmp	r6, #0
   16b8c:	movwlt	r0, #0
   16b90:	cmp	r0, r5
   16b94:	movhi	r9, r0
   16b98:	cmp	r9, r1
   16b9c:	bcs	17730 <__assert_fail@plt+0x589c>
   16ba0:	ldr	r6, [sp, #88]	; 0x58
   16ba4:	str	r4, [sp, #84]	; 0x54
   16ba8:	cmp	r6, #0
   16bac:	beq	17150 <__assert_fail@plt+0x52bc>
   16bb0:	cmp	r0, r5
   16bb4:	str	r2, [sp, #76]	; 0x4c
   16bb8:	bls	170a4 <__assert_fail@plt+0x5210>
   16bbc:	sub	r8, r0, r5
   16bc0:	ldr	r0, [sp, #92]	; 0x5c
   16bc4:	cmp	r0, #43	; 0x2b
   16bc8:	cmpne	r0, #48	; 0x30
   16bcc:	bne	17084 <__assert_fail@plt+0x51f0>
   16bd0:	ldr	r4, [sp, #88]	; 0x58
   16bd4:	cmp	r8, #0
   16bd8:	beq	170a4 <__assert_fail@plt+0x5210>
   16bdc:	mov	r0, #48	; 0x30
   16be0:	mov	r1, r4
   16be4:	bl	11d80 <fputc@plt>
   16be8:	subs	r8, r8, #1
   16bec:	bne	16bdc <__assert_fail@plt+0x4d48>
   16bf0:	b	170a4 <__assert_fail@plt+0x5210>
   16bf4:	ldr	r7, [sp, #88]	; 0x58
   16bf8:	mov	lr, r4
   16bfc:	b	17710 <__assert_fail@plt+0x587c>
   16c00:	mov	r7, r3
   16c04:	cmp	r7, #45	; 0x2d
   16c08:	mvn	r0, lr
   16c0c:	bicne	r6, r8, r8, asr #31
   16c10:	mov	r8, r9
   16c14:	cmp	r6, r9
   16c18:	movhi	r8, r6
   16c1c:	cmp	r8, r0
   16c20:	bcs	17730 <__assert_fail@plt+0x589c>
   16c24:	mov	r0, r7
   16c28:	ldr	r7, [sp, #88]	; 0x58
   16c2c:	str	lr, [sp, #84]	; 0x54
   16c30:	cmp	r7, #0
   16c34:	beq	17078 <__assert_fail@plt+0x51e4>
   16c38:	cmp	r6, r9
   16c3c:	bls	17018 <__assert_fail@plt+0x5184>
   16c40:	cmp	r0, #43	; 0x2b
   16c44:	sub	r6, r6, r9
   16c48:	cmpne	r0, #48	; 0x30
   16c4c:	bne	16ff8 <__assert_fail@plt+0x5164>
   16c50:	ldr	r4, [sp, #88]	; 0x58
   16c54:	cmp	r6, #0
   16c58:	beq	17018 <__assert_fail@plt+0x5184>
   16c5c:	mov	r0, #48	; 0x30
   16c60:	mov	r1, r4
   16c64:	bl	11d80 <fputc@plt>
   16c68:	subs	r6, r6, #1
   16c6c:	bne	16c5c <__assert_fail@plt+0x4dc8>
   16c70:	b	17018 <__assert_fail@plt+0x5184>
   16c74:	cmp	r9, #69	; 0x45
   16c78:	beq	16ed0 <__assert_fail@plt+0x503c>
   16c7c:	ldr	r2, [sp, #68]	; 0x44
   16c80:	str	ip, [sp, #72]	; 0x48
   16c84:	mov	ip, #0
   16c88:	mov	r8, #2
   16c8c:	ldr	r2, [r2, #16]
   16c90:	cmn	r2, #1
   16c94:	add	r3, r2, #1
   16c98:	movwlt	ip, #1
   16c9c:	b	169c8 <__assert_fail@plt+0x4b34>
   16ca0:	ldr	r0, [sp, #92]	; 0x5c
   16ca4:	mvn	r1, lr
   16ca8:	subs	r0, r0, #45	; 0x2d
   16cac:	bicne	r0, r6, r6, asr #31
   16cb0:	cmp	r0, #1
   16cb4:	mov	r5, r0
   16cb8:	movls	r5, #1
   16cbc:	cmp	r5, r1
   16cc0:	bcs	17730 <__assert_fail@plt+0x589c>
   16cc4:	ldr	r1, [sp, #88]	; 0x58
   16cc8:	cmp	r1, #0
   16ccc:	beq	17708 <__assert_fail@plt+0x5874>
   16cd0:	ldr	r7, [sp, #88]	; 0x58
   16cd4:	mov	r4, lr
   16cd8:	cmp	r0, #2
   16cdc:	bcc	17694 <__assert_fail@plt+0x5800>
   16ce0:	ldr	r1, [sp, #92]	; 0x5c
   16ce4:	sub	r6, r0, #1
   16ce8:	uxtb	r1, r1
   16cec:	cmp	r1, #43	; 0x2b
   16cf0:	cmpne	r1, #48	; 0x30
   16cf4:	bne	1767c <__assert_fail@plt+0x57e8>
   16cf8:	ldr	r7, [sp, #88]	; 0x58
   16cfc:	mov	r0, #48	; 0x30
   16d00:	mov	r1, r7
   16d04:	bl	11d80 <fputc@plt>
   16d08:	subs	r6, r6, #1
   16d0c:	bne	16cfc <__assert_fail@plt+0x4e68>
   16d10:	b	17694 <__assert_fail@plt+0x5800>
   16d14:	ldr	r2, [sp, #68]	; 0x44
   16d18:	mov	r3, #11
   16d1c:	mov	r8, #1
   16d20:	str	ip, [sp, #72]	; 0x48
   16d24:	mov	ip, #0
   16d28:	ldr	r2, [r2, #16]
   16d2c:	mul	r2, r2, r3
   16d30:	add	r3, r8, r2, asr #5
   16d34:	b	169c8 <__assert_fail@plt+0x4b34>
   16d38:	ldr	r2, [sp, #68]	; 0x44
   16d3c:	mov	r0, #28
   16d40:	add	r1, sp, #96	; 0x60
   16d44:	str	ip, [sp, #72]	; 0x48
   16d48:	str	lr, [sp, #84]	; 0x54
   16d4c:	mov	r4, r1
   16d50:	mov	r3, r2
   16d54:	add	r2, r2, #16
   16d58:	vld1.32	{d16-d17}, [r3], r0
   16d5c:	vld1.32	{d18-d19}, [r2]
   16d60:	add	r2, r1, #16
   16d64:	vld1.32	{d20-d21}, [r3]
   16d68:	vst1.64	{d16-d17}, [r4], r0
   16d6c:	mvn	r0, #0
   16d70:	vst1.64	{d18-d19}, [r2]
   16d74:	vst1.32	{d20-d21}, [r4]
   16d78:	str	r0, [r4]
   16d7c:	ldr	r0, [fp, #16]
   16d80:	bl	30720 <__assert_fail@plt+0x1e88c>
   16d84:	ldr	r1, [r4]
   16d88:	cmp	r1, #0
   16d8c:	blt	1774c <__assert_fail@plt+0x58b8>
   16d90:	ldr	r1, [sp, #20]
   16d94:	lsr	ip, r0, #31
   16d98:	mov	r2, r0
   16d9c:	movw	r3, #26215	; 0x6667
   16da0:	cmp	r0, #0
   16da4:	movt	r3, #26214	; 0x6666
   16da8:	smmul	r3, r2, r3
   16dac:	asr	r7, r3, #2
   16db0:	add	r3, r7, r3, lsr #31
   16db4:	add	r7, r3, r3, lsl #2
   16db8:	sub	r7, r2, r7, lsl #1
   16dbc:	add	r2, r2, #9
   16dc0:	rsblt	r7, r7, #0
   16dc4:	cmp	r2, #18
   16dc8:	mov	r2, r3
   16dcc:	add	r7, r7, #48	; 0x30
   16dd0:	strb	r7, [r1], #-1
   16dd4:	bhi	16d9c <__assert_fail@plt+0x4f08>
   16dd8:	ldr	r3, [sp, #92]	; 0x5c
   16ddc:	ldr	lr, [sp, #84]	; 0x54
   16de0:	cmp	r6, #0
   16de4:	add	r5, r1, #1
   16de8:	mov	r0, #0
   16dec:	movwlt	r6, #1
   16df0:	mov	r8, r6
   16df4:	cmp	r3, #0
   16df8:	movweq	r3, #48	; 0x30
   16dfc:	b	16a5c <__assert_fail@plt+0x4bc8>
   16e00:	ldr	r0, [sp, #92]	; 0x5c
   16e04:	mvn	r1, lr
   16e08:	subs	r0, r0, #45	; 0x2d
   16e0c:	bicne	r0, r6, r6, asr #31
   16e10:	cmp	r0, #1
   16e14:	mov	r5, r0
   16e18:	movls	r5, #1
   16e1c:	cmp	r5, r1
   16e20:	bcs	17730 <__assert_fail@plt+0x589c>
   16e24:	ldr	r1, [sp, #88]	; 0x58
   16e28:	cmp	r1, #0
   16e2c:	beq	17708 <__assert_fail@plt+0x5874>
   16e30:	ldr	r7, [sp, #88]	; 0x58
   16e34:	mov	r4, lr
   16e38:	cmp	r0, #2
   16e3c:	bcc	176b4 <__assert_fail@plt+0x5820>
   16e40:	ldr	r1, [sp, #92]	; 0x5c
   16e44:	sub	r6, r0, #1
   16e48:	uxtb	r1, r1
   16e4c:	cmp	r1, #43	; 0x2b
   16e50:	cmpne	r1, #48	; 0x30
   16e54:	bne	1769c <__assert_fail@plt+0x5808>
   16e58:	ldr	r7, [sp, #88]	; 0x58
   16e5c:	mov	r0, #48	; 0x30
   16e60:	mov	r1, r7
   16e64:	bl	11d80 <fputc@plt>
   16e68:	subs	r6, r6, #1
   16e6c:	bne	16e5c <__assert_fail@plt+0x4fc8>
   16e70:	b	176b4 <__assert_fail@plt+0x5820>
   16e74:	ldr	r2, [sp, #68]	; 0x44
   16e78:	movw	r3, #9363	; 0x2493
   16e7c:	str	ip, [sp, #72]	; 0x48
   16e80:	mov	r8, #1
   16e84:	movt	r3, #37449	; 0x9249
   16e88:	ldr	r2, [r2, #24]
   16e8c:	add	r2, r2, #6
   16e90:	smmla	r3, r2, r3, r2
   16e94:	asr	r7, r3, #2
   16e98:	add	r3, r7, r3, lsr #31
   16e9c:	rsb	r3, r3, r3, lsl #3
   16ea0:	sub	r2, r2, r3
   16ea4:	add	r3, r2, #1
   16ea8:	b	169c4 <__assert_fail@plt+0x4b30>
   16eac:	cmp	r9, #69	; 0x45
   16eb0:	beq	16ed0 <__assert_fail@plt+0x503c>
   16eb4:	ldr	r2, [sp, #68]	; 0x44
   16eb8:	str	ip, [sp, #72]	; 0x48
   16ebc:	mov	r8, #1
   16ec0:	ldr	r3, [r2, #24]
   16ec4:	b	169c4 <__assert_fail@plt+0x4b30>
   16ec8:	cmp	r9, #79	; 0x4f
   16ecc:	bne	172a4 <__assert_fail@plt+0x5410>
   16ed0:	ldr	r7, [sp, #92]	; 0x5c
   16ed4:	mov	r9, sl
   16ed8:	subs	r0, r7, #45	; 0x2d
   16edc:	sub	r1, r9, r8
   16ee0:	add	r5, r1, #1
   16ee4:	bicne	r0, r6, r6, asr #31
   16ee8:	mvn	r1, lr
   16eec:	cmp	r0, r5
   16ef0:	mov	r6, r5
   16ef4:	movhi	r6, r0
   16ef8:	cmp	r6, r1
   16efc:	bcs	17730 <__assert_fail@plt+0x589c>
   16f00:	mov	r1, r7
   16f04:	ldr	r7, [sp, #88]	; 0x58
   16f08:	str	lr, [sp, #84]	; 0x54
   16f0c:	cmp	r7, #0
   16f10:	beq	16fd4 <__assert_fail@plt+0x5140>
   16f14:	mov	sl, ip
   16f18:	cmp	r0, r5
   16f1c:	bls	16f78 <__assert_fail@plt+0x50e4>
   16f20:	sub	r7, r0, r5
   16f24:	uxtb	r0, r1
   16f28:	cmp	r0, #43	; 0x2b
   16f2c:	cmpne	r0, #48	; 0x30
   16f30:	bne	16f58 <__assert_fail@plt+0x50c4>
   16f34:	ldr	r4, [sp, #88]	; 0x58
   16f38:	cmp	r7, #0
   16f3c:	beq	16f78 <__assert_fail@plt+0x50e4>
   16f40:	mov	r0, #48	; 0x30
   16f44:	mov	r1, r4
   16f48:	bl	11d80 <fputc@plt>
   16f4c:	subs	r7, r7, #1
   16f50:	bne	16f40 <__assert_fail@plt+0x50ac>
   16f54:	b	16f78 <__assert_fail@plt+0x50e4>
   16f58:	ldr	r4, [sp, #88]	; 0x58
   16f5c:	cmp	r7, #0
   16f60:	beq	16f78 <__assert_fail@plt+0x50e4>
   16f64:	mov	r0, #32
   16f68:	mov	r1, r4
   16f6c:	bl	11d80 <fputc@plt>
   16f70:	subs	r7, r7, #1
   16f74:	bne	16f64 <__assert_fail@plt+0x50d0>
   16f78:	tst	sl, #1
   16f7c:	beq	16fbc <__assert_fail@plt+0x5128>
   16f80:	ldr	r7, [sp, #88]	; 0x58
   16f84:	cmp	r5, #0
   16f88:	beq	16fd4 <__assert_fail@plt+0x5140>
   16f8c:	sub	r0, r8, #1
   16f90:	sub	r4, r0, r9
   16f94:	bl	11c24 <__ctype_toupper_loc@plt>
   16f98:	mov	r5, r0
   16f9c:	ldrb	r0, [r8], #1
   16fa0:	ldr	r1, [r5]
   16fa4:	ldr	r0, [r1, r0, lsl #2]
   16fa8:	mov	r1, r7
   16fac:	bl	11d80 <fputc@plt>
   16fb0:	adds	r4, r4, #1
   16fb4:	bne	16f9c <__assert_fail@plt+0x5108>
   16fb8:	b	16fd4 <__assert_fail@plt+0x5140>
   16fbc:	ldr	r7, [sp, #88]	; 0x58
   16fc0:	mov	r0, r8
   16fc4:	mov	r1, r5
   16fc8:	mov	r2, #1
   16fcc:	mov	r3, r7
   16fd0:	bl	11b58 <fwrite@plt>
   16fd4:	ldr	lr, [sp, #84]	; 0x54
   16fd8:	mov	sl, r9
   16fdc:	add	lr, r6, lr
   16fe0:	b	17710 <__assert_fail@plt+0x587c>
   16fe4:	cmp	r9, #69	; 0x45
   16fe8:	bne	172b0 <__assert_fail@plt+0x541c>
   16fec:	mov	r7, #0
   16ff0:	mov	r1, #121	; 0x79
   16ff4:	b	16b24 <__assert_fail@plt+0x4c90>
   16ff8:	ldr	r4, [sp, #88]	; 0x58
   16ffc:	cmp	r6, #0
   17000:	beq	17018 <__assert_fail@plt+0x5184>
   17004:	mov	r0, #32
   17008:	mov	r1, r4
   1700c:	bl	11d80 <fputc@plt>
   17010:	subs	r6, r6, #1
   17014:	bne	17004 <__assert_fail@plt+0x5170>
   17018:	ldr	r0, [sp, #72]	; 0x48
   1701c:	tst	r0, #1
   17020:	beq	17060 <__assert_fail@plt+0x51cc>
   17024:	ldr	r7, [sp, #88]	; 0x58
   17028:	cmp	r9, #0
   1702c:	beq	17078 <__assert_fail@plt+0x51e4>
   17030:	ldr	r0, [sp, #24]
   17034:	add	r4, r0, r5
   17038:	bl	11c24 <__ctype_toupper_loc@plt>
   1703c:	mov	r6, r0
   17040:	ldrb	r0, [r5], #1
   17044:	ldr	r1, [r6]
   17048:	ldr	r0, [r1, r0, lsl #2]
   1704c:	mov	r1, r7
   17050:	bl	11d80 <fputc@plt>
   17054:	adds	r4, r4, #1
   17058:	bne	17040 <__assert_fail@plt+0x51ac>
   1705c:	b	17078 <__assert_fail@plt+0x51e4>
   17060:	ldr	r7, [sp, #88]	; 0x58
   17064:	mov	r0, r5
   17068:	mov	r1, r9
   1706c:	mov	r2, #1
   17070:	mov	r3, r7
   17074:	bl	11b58 <fwrite@plt>
   17078:	ldr	lr, [sp, #84]	; 0x54
   1707c:	add	lr, r8, lr
   17080:	b	17710 <__assert_fail@plt+0x587c>
   17084:	ldr	r4, [sp, #88]	; 0x58
   17088:	cmp	r8, #0
   1708c:	beq	170a4 <__assert_fail@plt+0x5210>
   17090:	mov	r0, #32
   17094:	mov	r1, r4
   17098:	bl	11d80 <fputc@plt>
   1709c:	subs	r8, r8, #1
   170a0:	bne	17090 <__assert_fail@plt+0x51fc>
   170a4:	tst	r7, #1
   170a8:	beq	170ec <__assert_fail@plt+0x5258>
   170ac:	ldr	r6, [sp, #88]	; 0x58
   170b0:	ldr	r0, [sp, #76]	; 0x4c
   170b4:	cmp	r5, #0
   170b8:	beq	17150 <__assert_fail@plt+0x52bc>
   170bc:	rsb	r4, r0, #1
   170c0:	bl	11c18 <__ctype_tolower_loc@plt>
   170c4:	ldr	r7, [sp, #40]	; 0x28
   170c8:	mov	r5, r0
   170cc:	ldrb	r0, [r7], #1
   170d0:	ldr	r1, [r5]
   170d4:	ldr	r0, [r1, r0, lsl #2]
   170d8:	mov	r1, r6
   170dc:	bl	11d80 <fputc@plt>
   170e0:	adds	r4, r4, #1
   170e4:	bne	170cc <__assert_fail@plt+0x5238>
   170e8:	b	17150 <__assert_fail@plt+0x52bc>
   170ec:	ldr	r0, [sp, #72]	; 0x48
   170f0:	tst	r0, #1
   170f4:	ldr	r0, [sp, #76]	; 0x4c
   170f8:	beq	17138 <__assert_fail@plt+0x52a4>
   170fc:	ldr	r6, [sp, #88]	; 0x58
   17100:	cmp	r5, #0
   17104:	beq	17150 <__assert_fail@plt+0x52bc>
   17108:	rsb	r4, r0, #1
   1710c:	bl	11c24 <__ctype_toupper_loc@plt>
   17110:	ldr	r7, [sp, #40]	; 0x28
   17114:	mov	r5, r0
   17118:	ldrb	r0, [r7], #1
   1711c:	ldr	r1, [r5]
   17120:	ldr	r0, [r1, r0, lsl #2]
   17124:	mov	r1, r6
   17128:	bl	11d80 <fputc@plt>
   1712c:	adds	r4, r4, #1
   17130:	bne	17118 <__assert_fail@plt+0x5284>
   17134:	b	17150 <__assert_fail@plt+0x52bc>
   17138:	ldr	r6, [sp, #88]	; 0x58
   1713c:	ldr	r0, [sp, #40]	; 0x28
   17140:	mov	r1, r5
   17144:	mov	r2, #1
   17148:	mov	r3, r6
   1714c:	bl	11b58 <fwrite@plt>
   17150:	ldr	lr, [sp, #84]	; 0x54
   17154:	mov	r7, r6
   17158:	add	lr, r9, lr
   1715c:	b	17710 <__assert_fail@plt+0x587c>
   17160:	sub	r2, r4, #1
   17164:	movw	r4, #365	; 0x16d
   17168:	tst	r2, #3
   1716c:	bne	171b0 <__assert_fail@plt+0x531c>
   17170:	movw	r4, #34079	; 0x851f
   17174:	movt	r4, #20971	; 0x51eb
   17178:	smmul	r4, r2, r4
   1717c:	asr	r7, r4, #5
   17180:	add	r3, r7, r4, lsr #31
   17184:	mov	r7, #100	; 0x64
   17188:	mls	r3, r3, r7, r2
   1718c:	asr	r7, r4, #7
   17190:	add	r4, r7, r4, lsr #31
   17194:	mov	r7, #400	; 0x190
   17198:	mls	r2, r4, r7, r2
   1719c:	movw	r4, #365	; 0x16d
   171a0:	cmp	r2, #0
   171a4:	movweq	r4, #366	; 0x16e
   171a8:	cmp	r3, #0
   171ac:	movwne	r4, #366	; 0x16e
   171b0:	add	r2, r4, r5
   171b4:	movw	r4, #382	; 0x17e
   171b8:	mov	r5, r0
   171bc:	sub	r3, r4, r8
   171c0:	add	r2, r3, r2
   171c4:	smmla	r2, r2, r0, r2
   171c8:	asr	r4, r2, #2
   171cc:	add	r2, r4, r2, lsr #31
   171d0:	rsb	r2, r2, r2, lsl #3
   171d4:	sub	r2, r2, r3
   171d8:	mvn	r3, #0
   171dc:	add	r2, r2, #3
   171e0:	ldr	r4, [sp, #84]	; 0x54
   171e4:	ldr	r0, [sp, #92]	; 0x5c
   171e8:	cmp	r1, #71	; 0x47
   171ec:	beq	172f0 <__assert_fail@plt+0x545c>
   171f0:	cmp	r1, #103	; 0x67
   171f4:	bne	17320 <__assert_fail@plt+0x548c>
   171f8:	movw	r2, #34079	; 0x851f
   171fc:	mov	r8, #2
   17200:	mov	ip, #0
   17204:	movt	r2, #20971	; 0x51eb
   17208:	smmul	r7, lr, r2
   1720c:	asr	r5, r7, #5
   17210:	add	r7, r5, r7, lsr #31
   17214:	mov	r5, #100	; 0x64
   17218:	mls	r7, r7, r5, lr
   1721c:	add	r7, r3, r7
   17220:	smmul	r2, r7, r2
   17224:	asr	r4, r2, #5
   17228:	add	r2, r4, r2, lsr #31
   1722c:	mls	r2, r2, r5, r7
   17230:	cmn	r2, #1
   17234:	ble	1743c <__assert_fail@plt+0x55a8>
   17238:	ldr	lr, [sp, #84]	; 0x54
   1723c:	mov	r3, r2
   17240:	b	17470 <__assert_fail@plt+0x55dc>
   17244:	ldr	r7, [sp, #88]	; 0x58
   17248:	b	17710 <__assert_fail@plt+0x587c>
   1724c:	ldr	r2, [sp, #68]	; 0x44
   17250:	movw	r7, #63636	; 0xf894
   17254:	mov	r3, #0
   17258:	mvn	r5, #98	; 0x62
   1725c:	str	ip, [sp, #72]	; 0x48
   17260:	mov	ip, #0
   17264:	mov	r8, #2
   17268:	movt	r7, #65535	; 0xffff
   1726c:	ldr	r2, [r2, #20]
   17270:	cmp	r2, r7
   17274:	movwge	r3, #1
   17278:	cmp	r2, r7
   1727c:	and	r3, r3, r2, lsr #31
   17280:	movwlt	ip, #1
   17284:	smlabb	r3, r3, r5, r2
   17288:	movw	r5, #34079	; 0x851f
   1728c:	movt	r5, #20971	; 0x51eb
   17290:	smmul	r3, r3, r5
   17294:	asr	r5, r3, #5
   17298:	add	r3, r5, r3, lsr #31
   1729c:	add	r3, r3, #19
   172a0:	b	17470 <__assert_fail@plt+0x55dc>
   172a4:	mov	r7, #0
   172a8:	mov	r1, #120	; 0x78
   172ac:	b	16b24 <__assert_fail@plt+0x4c90>
   172b0:	ldr	r2, [sp, #68]	; 0x44
   172b4:	movw	r3, #34079	; 0x851f
   172b8:	str	ip, [sp, #72]	; 0x48
   172bc:	mov	r8, #2
   172c0:	mov	ip, #0
   172c4:	movt	r3, #20971	; 0x51eb
   172c8:	ldr	r2, [r2, #20]
   172cc:	smmul	r3, r2, r3
   172d0:	asr	r7, r3, #5
   172d4:	add	r3, r7, r3, lsr #31
   172d8:	mov	r7, #100	; 0x64
   172dc:	mls	r7, r3, r7, r2
   172e0:	cmn	r7, #1
   172e4:	ble	1745c <__assert_fail@plt+0x55c8>
   172e8:	mov	r3, r7
   172ec:	b	17470 <__assert_fail@plt+0x55dc>
   172f0:	movw	r2, #63636	; 0xf894
   172f4:	mov	ip, #0
   172f8:	mov	r8, #4
   172fc:	movt	r2, #65535	; 0xffff
   17300:	sub	r2, r2, r3
   17304:	cmp	lr, r2
   17308:	add	r2, lr, r3
   1730c:	movw	r3, #1900	; 0x76c
   17310:	mov	lr, r4
   17314:	movwlt	ip, #1
   17318:	add	r3, r2, r3
   1731c:	b	17474 <__assert_fail@plt+0x55e0>
   17320:	smmla	r2, r2, r5, r2
   17324:	mov	r8, #2
   17328:	mov	lr, r4
   1732c:	asr	r3, r2, #2
   17330:	add	r2, r3, r2, lsr #31
   17334:	add	r3, r2, #1
   17338:	b	169c4 <__assert_fail@plt+0x4b30>
   1733c:	mov	ip, #1
   17340:	cmp	r7, #3
   17344:	bhi	164b4 <__assert_fail@plt+0x4620>
   17348:	movw	r3, #34953	; 0x8889
   1734c:	movt	r3, #34952	; 0x8888
   17350:	smmla	r5, r2, r3, r2
   17354:	asr	r4, r5, #5
   17358:	add	r4, r4, r5, lsr #31
   1735c:	smmla	r3, r4, r3, r4
   17360:	asr	r5, r3, #5
   17364:	add	r3, r5, r3, lsr #31
   17368:	rsb	r3, r3, r3, lsl #4
   1736c:	sub	lr, r4, r3, lsl #2
   17370:	movw	r3, #46021	; 0xb3c5
   17374:	rsb	r4, r4, r4, lsl #4
   17378:	movt	r3, #37282	; 0x91a2
   1737c:	smmla	r3, r2, r3, r2
   17380:	sub	r2, r2, r4, lsl #2
   17384:	add	r4, pc, #8
   17388:	asr	r5, r3, #11
   1738c:	add	r3, r5, r3, lsr #31
   17390:	ldr	pc, [r4, r7, lsl #2]
   17394:	andeq	r7, r1, r4, lsr #7
   17398:	andeq	r7, r1, r4, asr #13
   1739c:	andeq	r7, r1, ip, asr #9
   173a0:	andeq	r7, r1, r4, asr #9
   173a4:	mov	r2, #100	; 0x64
   173a8:	mov	r8, #5
   173ac:	mla	r3, r3, r2, lr
   173b0:	ldr	lr, [sp, #84]	; 0x54
   173b4:	mov	r0, #1
   173b8:	mov	r2, #0
   173bc:	b	169d8 <__assert_fail@plt+0x4b44>
   173c0:	mov	r7, #0
   173c4:	mov	r1, #89	; 0x59
   173c8:	b	16b24 <__assert_fail@plt+0x4c90>
   173cc:	ldr	r8, [sp, #88]	; 0x58
   173d0:	cmp	r7, #0
   173d4:	beq	173ec <__assert_fail@plt+0x5558>
   173d8:	mov	r0, #32
   173dc:	mov	r1, r8
   173e0:	bl	11d80 <fputc@plt>
   173e4:	subs	r7, r7, #1
   173e8:	bne	173d8 <__assert_fail@plt+0x5544>
   173ec:	ldr	r0, [sp, #92]	; 0x5c
   173f0:	ldr	r2, [sp, #68]	; 0x44
   173f4:	ldr	r3, [sp, #72]	; 0x48
   173f8:	mov	r1, r5
   173fc:	str	r0, [sp]
   17400:	ldr	r0, [sp, #76]	; 0x4c
   17404:	str	r0, [sp, #4]
   17408:	ldr	r0, [fp, #16]
   1740c:	str	r0, [sp, #8]
   17410:	ldr	r0, [fp, #20]
   17414:	str	r0, [sp, #12]
   17418:	mov	r0, r8
   1741c:	bl	15de4 <__assert_fail@plt+0x3f50>
   17420:	mov	lr, r9
   17424:	ldr	r7, [sp, #88]	; 0x58
   17428:	add	lr, r6, lr
   1742c:	b	17710 <__assert_fail@plt+0x587c>
   17430:	sub	r0, r6, #6
   17434:	bic	r3, r0, r0, asr #31
   17438:	b	166f0 <__assert_fail@plt+0x485c>
   1743c:	movw	r4, #63636	; 0xf894
   17440:	movt	r4, #65535	; 0xffff
   17444:	sub	r4, r4, r3
   17448:	add	r3, r2, #100	; 0x64
   1744c:	cmp	lr, r4
   17450:	ldr	lr, [sp, #84]	; 0x54
   17454:	rsblt	r3, r2, #0
   17458:	b	17470 <__assert_fail@plt+0x55dc>
   1745c:	movw	r5, #63636	; 0xf894
   17460:	add	r3, r7, #100	; 0x64
   17464:	movt	r5, #65535	; 0xffff
   17468:	cmp	r2, r5
   1746c:	rsblt	r3, r7, #0
   17470:	ldr	r0, [sp, #92]	; 0x5c
   17474:	ldr	r2, [fp, #8]
   17478:	cmp	r0, #0
   1747c:	moveq	r0, r2
   17480:	mov	r2, #0
   17484:	mov	r4, r0
   17488:	str	r0, [sp, #92]	; 0x5c
   1748c:	cmp	r0, #43	; 0x2b
   17490:	mov	r0, #0
   17494:	bne	169d8 <__assert_fail@plt+0x4b44>
   17498:	cmp	r8, r6
   1749c:	mov	r5, #0
   174a0:	movw	r4, #9999	; 0x270f
   174a4:	mov	r7, #0
   174a8:	movwlt	r5, #1
   174ac:	cmp	r8, #2
   174b0:	movweq	r4, #99	; 0x63
   174b4:	cmp	r4, r3
   174b8:	movwcc	r7, #1
   174bc:	orr	r0, r5, r7
   174c0:	b	169d8 <__assert_fail@plt+0x4b44>
   174c4:	cmp	r2, #0
   174c8:	beq	176bc <__assert_fail@plt+0x5828>
   174cc:	movw	r4, #10000	; 0x2710
   174d0:	mov	r8, #9
   174d4:	mov	r0, #1
   174d8:	mla	r2, r3, r4, r2
   174dc:	mov	r3, #100	; 0x64
   174e0:	mla	r3, lr, r3, r2
   174e4:	ldr	lr, [sp, #84]	; 0x54
   174e8:	mov	r2, #20
   174ec:	b	169d8 <__assert_fail@plt+0x4b44>
   174f0:	ldr	r3, [sp, #88]	; 0x58
   174f4:	sub	r0, fp, #46	; 0x2e
   174f8:	mov	r2, #1
   174fc:	bl	11b58 <fwrite@plt>
   17500:	ldr	r0, [sp, #92]	; 0x5c
   17504:	ldr	r1, [sp, #84]	; 0x54
   17508:	mov	r5, #0
   1750c:	cmp	r0, #45	; 0x2d
   17510:	subne	r0, r6, #9
   17514:	subne	r0, r0, r7
   17518:	bicne	r5, r0, r0, asr #31
   1751c:	mvn	r0, #9
   17520:	sub	r0, r0, r1
   17524:	sub	r0, r0, r7
   17528:	cmp	r5, r0
   1752c:	bcs	17730 <__assert_fail@plt+0x589c>
   17530:	ldr	r6, [sp, #88]	; 0x58
   17534:	cmp	r6, #0
   17538:	cmpne	r5, #0
   1753c:	bne	17558 <__assert_fail@plt+0x56c4>
   17540:	ldr	r0, [sp, #84]	; 0x54
   17544:	add	r0, r5, r0
   17548:	add	r0, r0, r7
   1754c:	mov	r7, r6
   17550:	add	lr, r0, #9
   17554:	b	17710 <__assert_fail@plt+0x587c>
   17558:	ldr	r0, [sp, #92]	; 0x5c
   1755c:	uxtb	r0, r0
   17560:	cmp	r0, #43	; 0x2b
   17564:	beq	17574 <__assert_fail@plt+0x56e0>
   17568:	cmp	r0, #48	; 0x30
   1756c:	mov	r4, r5
   17570:	bne	17590 <__assert_fail@plt+0x56fc>
   17574:	mov	r4, r5
   17578:	mov	r0, #48	; 0x30
   1757c:	mov	r1, r6
   17580:	bl	11d80 <fputc@plt>
   17584:	subs	r4, r4, #1
   17588:	bne	17578 <__assert_fail@plt+0x56e4>
   1758c:	b	17540 <__assert_fail@plt+0x56ac>
   17590:	mov	r0, #32
   17594:	mov	r1, r6
   17598:	bl	11d80 <fputc@plt>
   1759c:	subs	r4, r4, #1
   175a0:	bne	17590 <__assert_fail@plt+0x56fc>
   175a4:	b	17540 <__assert_fail@plt+0x56ac>
   175a8:	ldr	r4, [sp, #88]	; 0x58
   175ac:	cmp	r6, #0
   175b0:	beq	175c8 <__assert_fail@plt+0x5734>
   175b4:	mov	r0, #32
   175b8:	mov	r1, r4
   175bc:	bl	11d80 <fputc@plt>
   175c0:	subs	r6, r6, #1
   175c4:	bne	175b4 <__assert_fail@plt+0x5720>
   175c8:	ldr	r0, [sp, #76]	; 0x4c
   175cc:	tst	r0, #1
   175d0:	beq	1760c <__assert_fail@plt+0x5778>
   175d4:	ldr	r7, [sp, #88]	; 0x58
   175d8:	cmp	r5, #0
   175dc:	beq	17670 <__assert_fail@plt+0x57dc>
   175e0:	bl	11c18 <__ctype_tolower_loc@plt>
   175e4:	ldr	r4, [sp, #44]	; 0x2c
   175e8:	mov	r6, r0
   175ec:	ldrb	r0, [r4], #1
   175f0:	ldr	r1, [r6]
   175f4:	ldr	r0, [r1, r0, lsl #2]
   175f8:	mov	r1, r7
   175fc:	bl	11d80 <fputc@plt>
   17600:	subs	r5, r5, #1
   17604:	bne	175ec <__assert_fail@plt+0x5758>
   17608:	b	17670 <__assert_fail@plt+0x57dc>
   1760c:	ldr	r1, [sp, #72]	; 0x48
   17610:	eor	r0, r0, #1
   17614:	and	r0, r1, r0
   17618:	tst	r0, #1
   1761c:	beq	17658 <__assert_fail@plt+0x57c4>
   17620:	ldr	r7, [sp, #88]	; 0x58
   17624:	cmp	r5, #0
   17628:	beq	17670 <__assert_fail@plt+0x57dc>
   1762c:	bl	11c24 <__ctype_toupper_loc@plt>
   17630:	ldr	r4, [sp, #44]	; 0x2c
   17634:	mov	r6, r0
   17638:	ldrb	r0, [r4], #1
   1763c:	ldr	r1, [r6]
   17640:	ldr	r0, [r1, r0, lsl #2]
   17644:	mov	r1, r7
   17648:	bl	11d80 <fputc@plt>
   1764c:	subs	r5, r5, #1
   17650:	bne	17638 <__assert_fail@plt+0x57a4>
   17654:	b	17670 <__assert_fail@plt+0x57dc>
   17658:	ldr	r7, [sp, #88]	; 0x58
   1765c:	ldr	r0, [sp, #44]	; 0x2c
   17660:	mov	r1, r5
   17664:	mov	r2, #1
   17668:	mov	r3, r7
   1766c:	bl	11b58 <fwrite@plt>
   17670:	ldr	lr, [sp, #84]	; 0x54
   17674:	add	lr, r9, lr
   17678:	b	17710 <__assert_fail@plt+0x587c>
   1767c:	ldr	r7, [sp, #88]	; 0x58
   17680:	mov	r0, #32
   17684:	mov	r1, r7
   17688:	bl	11d80 <fputc@plt>
   1768c:	subs	r6, r6, #1
   17690:	bne	17680 <__assert_fail@plt+0x57ec>
   17694:	mov	r0, #10
   17698:	b	176fc <__assert_fail@plt+0x5868>
   1769c:	ldr	r7, [sp, #88]	; 0x58
   176a0:	mov	r0, #32
   176a4:	mov	r1, r7
   176a8:	bl	11d80 <fputc@plt>
   176ac:	subs	r6, r6, #1
   176b0:	bne	176a0 <__assert_fail@plt+0x580c>
   176b4:	mov	r0, #9
   176b8:	b	176fc <__assert_fail@plt+0x5868>
   176bc:	cmp	lr, #0
   176c0:	beq	15ec0 <__assert_fail@plt+0x402c>
   176c4:	mov	r2, #100	; 0x64
   176c8:	mov	r8, #6
   176cc:	mov	r0, #1
   176d0:	mla	r3, r3, r2, lr
   176d4:	ldr	lr, [sp, #84]	; 0x54
   176d8:	mov	r2, #4
   176dc:	b	169d8 <__assert_fail@plt+0x4b44>
   176e0:	ldr	r7, [sp, #88]	; 0x58
   176e4:	mov	r0, #32
   176e8:	mov	r1, r7
   176ec:	bl	11d80 <fputc@plt>
   176f0:	subs	r6, r6, #1
   176f4:	bne	176e4 <__assert_fail@plt+0x5850>
   176f8:	ldrb	r0, [sl]
   176fc:	mov	r1, r7
   17700:	bl	11d80 <fputc@plt>
   17704:	mov	lr, r4
   17708:	ldr	r7, [sp, #88]	; 0x58
   1770c:	add	lr, r5, lr
   17710:	ldrb	r3, [sl, #1]!
   17714:	mvn	r6, #0
   17718:	cmp	r3, #0
   1771c:	bne	15ec8 <__assert_fail@plt+0x4034>
   17720:	ldr	r0, [sp, #56]	; 0x38
   17724:	ldr	r1, [sp, #52]	; 0x34
   17728:	str	r1, [r0]
   1772c:	b	17740 <__assert_fail@plt+0x58ac>
   17730:	mov	r0, #34	; 0x22
   17734:	ldr	r1, [sp, #56]	; 0x38
   17738:	mov	lr, #0
   1773c:	str	r0, [r1]
   17740:	mov	r0, lr
   17744:	sub	sp, fp, #28
   17748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1774c:	mov	r0, #75	; 0x4b
   17750:	b	17734 <__assert_fail@plt+0x58a0>
   17754:	push	{r4, r5, r6, sl, fp, lr}
   17758:	add	fp, sp, #16
   1775c:	mov	r4, r0
   17760:	bl	11ca8 <__errno_location@plt>
   17764:	ldr	r6, [r0]
   17768:	mov	r5, r0
   1776c:	mov	r0, r4
   17770:	bl	11a5c <free@plt>
   17774:	str	r6, [r5]
   17778:	pop	{r4, r5, r6, sl, fp, pc}
   1777c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17780:	add	fp, sp, #28
   17784:	sub	sp, sp, #4
   17788:	mov	r5, r0
   1778c:	mov	r0, r2
   17790:	mov	r4, r2
   17794:	mov	r9, r1
   17798:	bl	11cfc <fileno@plt>
   1779c:	mov	r7, #0
   177a0:	cmp	r0, #0
   177a4:	beq	177e4 <__assert_fail@plt+0x5950>
   177a8:	cmp	r0, #1
   177ac:	beq	177f0 <__assert_fail@plt+0x595c>
   177b0:	cmp	r0, #2
   177b4:	beq	177cc <__assert_fail@plt+0x5938>
   177b8:	mov	r0, #2
   177bc:	mov	r1, #2
   177c0:	bl	11ae0 <dup2@plt>
   177c4:	subs	r7, r0, #2
   177c8:	movwne	r7, #1
   177cc:	mov	r0, #1
   177d0:	mov	r1, #1
   177d4:	bl	11ae0 <dup2@plt>
   177d8:	subs	r6, r0, #1
   177dc:	movwne	r6, #1
   177e0:	b	177f4 <__assert_fail@plt+0x5960>
   177e4:	mov	r6, #0
   177e8:	mov	r8, #0
   177ec:	b	178bc <__assert_fail@plt+0x5a28>
   177f0:	mov	r6, #0
   177f4:	mov	r0, #0
   177f8:	mov	r1, #0
   177fc:	mov	sl, #0
   17800:	bl	11ae0 <dup2@plt>
   17804:	cmp	r0, #0
   17808:	mov	r8, #0
   1780c:	beq	1784c <__assert_fail@plt+0x59b8>
   17810:	movw	r0, #27925	; 0x6d15
   17814:	mov	r1, #0
   17818:	movt	r0, #3
   1781c:	bl	11bd0 <open64@plt>
   17820:	cmp	r0, #0
   17824:	beq	17848 <__assert_fail@plt+0x59b4>
   17828:	cmn	r0, #1
   1782c:	ble	17948 <__assert_fail@plt+0x5ab4>
   17830:	bl	11e70 <close@plt>
   17834:	bl	11ca8 <__errno_location@plt>
   17838:	mov	r4, r0
   1783c:	mov	r0, #9
   17840:	str	r0, [r4]
   17844:	b	17950 <__assert_fail@plt+0x5abc>
   17848:	mov	r8, #1
   1784c:	cmp	r6, #0
   17850:	beq	17870 <__assert_fail@plt+0x59dc>
   17854:	movw	r0, #27925	; 0x6d15
   17858:	mov	r1, #0
   1785c:	movt	r0, #3
   17860:	bl	11bd0 <open64@plt>
   17864:	mov	sl, #1
   17868:	cmp	r0, #1
   1786c:	bne	17928 <__assert_fail@plt+0x5a94>
   17870:	cmp	r7, #0
   17874:	beq	178b4 <__assert_fail@plt+0x5a20>
   17878:	movw	r0, #27925	; 0x6d15
   1787c:	mov	r1, #0
   17880:	movt	r0, #3
   17884:	bl	11bd0 <open64@plt>
   17888:	mov	r7, #1
   1788c:	cmp	r0, #2
   17890:	beq	178b8 <__assert_fail@plt+0x5a24>
   17894:	cmn	r0, #1
   17898:	ble	179a0 <__assert_fail@plt+0x5b0c>
   1789c:	bl	11e70 <close@plt>
   178a0:	bl	11ca8 <__errno_location@plt>
   178a4:	mov	r4, r0
   178a8:	mov	r0, #9
   178ac:	str	r0, [r4]
   178b0:	b	179a8 <__assert_fail@plt+0x5b14>
   178b4:	mov	r7, #0
   178b8:	mov	r6, sl
   178bc:	mov	r0, r5
   178c0:	mov	r1, r9
   178c4:	mov	r2, r4
   178c8:	bl	11c3c <freopen64@plt>
   178cc:	mov	r5, r0
   178d0:	bl	11ca8 <__errno_location@plt>
   178d4:	ldr	r9, [r0]
   178d8:	mov	r4, r0
   178dc:	cmp	r7, #0
   178e0:	beq	178ec <__assert_fail@plt+0x5a58>
   178e4:	mov	r0, #2
   178e8:	bl	11e70 <close@plt>
   178ec:	cmp	r6, #0
   178f0:	beq	178fc <__assert_fail@plt+0x5a68>
   178f4:	mov	r0, #1
   178f8:	bl	11e70 <close@plt>
   178fc:	cmp	r8, #0
   17900:	beq	1790c <__assert_fail@plt+0x5a78>
   17904:	mov	r0, #0
   17908:	bl	11e70 <close@plt>
   1790c:	cmp	r5, #0
   17910:	bne	1791c <__assert_fail@plt+0x5a88>
   17914:	mov	r5, #0
   17918:	str	r9, [r4]
   1791c:	mov	r0, r5
   17920:	sub	sp, fp, #28
   17924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17928:	cmn	r0, #1
   1792c:	ble	17968 <__assert_fail@plt+0x5ad4>
   17930:	bl	11e70 <close@plt>
   17934:	bl	11ca8 <__errno_location@plt>
   17938:	mov	r4, r0
   1793c:	mov	r0, #9
   17940:	str	r0, [r4]
   17944:	b	17970 <__assert_fail@plt+0x5adc>
   17948:	bl	11ca8 <__errno_location@plt>
   1794c:	mov	r4, r0
   17950:	ldr	r9, [r4]
   17954:	mov	r8, #1
   17958:	mov	r5, #0
   1795c:	cmp	r7, #0
   17960:	bne	178e4 <__assert_fail@plt+0x5a50>
   17964:	b	178ec <__assert_fail@plt+0x5a58>
   17968:	bl	11ca8 <__errno_location@plt>
   1796c:	mov	r4, r0
   17970:	ldr	r9, [r4]
   17974:	mov	r5, #0
   17978:	cmp	r7, #0
   1797c:	beq	178f4 <__assert_fail@plt+0x5a60>
   17980:	mov	r0, #2
   17984:	bl	11e70 <close@plt>
   17988:	mov	r0, #1
   1798c:	bl	11e70 <close@plt>
   17990:	mov	r5, #0
   17994:	cmp	r8, #0
   17998:	bne	17904 <__assert_fail@plt+0x5a70>
   1799c:	b	17914 <__assert_fail@plt+0x5a80>
   179a0:	bl	11ca8 <__errno_location@plt>
   179a4:	mov	r4, r0
   179a8:	ldr	r9, [r4]
   179ac:	mov	r0, #2
   179b0:	bl	11e70 <close@plt>
   179b4:	mov	r5, #0
   179b8:	cmp	sl, #0
   179bc:	bne	178f4 <__assert_fail@plt+0x5a60>
   179c0:	b	178fc <__assert_fail@plt+0x5a68>
   179c4:	push	{r4, r5, r6, r7, fp, lr}
   179c8:	add	fp, sp, #16
   179cc:	sub	sp, sp, #8
   179d0:	mov	r4, r0
   179d4:	ldr	r0, [r0, #4]
   179d8:	mov	r5, r3
   179dc:	mov	r6, r2
   179e0:	ldr	r1, [r4, #8]
   179e4:	cmp	r1, r0
   179e8:	bne	17a04 <__assert_fail@plt+0x5b70>
   179ec:	ldrd	r0, [r4, #16]
   179f0:	cmp	r1, r0
   179f4:	bne	17a04 <__assert_fail@plt+0x5b70>
   179f8:	ldr	r0, [r4, #36]	; 0x24
   179fc:	cmp	r0, #0
   17a00:	beq	17a1c <__assert_fail@plt+0x5b88>
   17a04:	mov	r0, r4
   17a08:	mov	r2, r6
   17a0c:	mov	r3, r5
   17a10:	sub	sp, fp, #16
   17a14:	pop	{r4, r5, r6, r7, fp, lr}
   17a18:	b	11d2c <fseeko64@plt>
   17a1c:	ldr	r7, [fp, #8]
   17a20:	mov	r0, r4
   17a24:	bl	11cfc <fileno@plt>
   17a28:	mov	r2, r6
   17a2c:	mov	r3, r5
   17a30:	str	r7, [sp]
   17a34:	bl	11b64 <lseek64@plt>
   17a38:	and	r2, r0, r1
   17a3c:	cmn	r2, #1
   17a40:	mvneq	r0, #0
   17a44:	subeq	sp, fp, #16
   17a48:	popeq	{r4, r5, r6, r7, fp, pc}
   17a4c:	strd	r0, [r4, #80]	; 0x50
   17a50:	ldr	r0, [r4]
   17a54:	bic	r0, r0, #16
   17a58:	str	r0, [r4]
   17a5c:	mov	r0, #0
   17a60:	sub	sp, fp, #16
   17a64:	pop	{r4, r5, r6, r7, fp, pc}
   17a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a6c:	add	fp, sp, #28
   17a70:	sub	sp, sp, #28
   17a74:	cmp	r1, #4096	; 0x1000
   17a78:	bcs	17a94 <__assert_fail@plt+0x5c00>
   17a7c:	mov	r7, r0
   17a80:	and	r0, r1, #516	; 0x204
   17a84:	mov	r5, r1
   17a88:	cmp	r0, #516	; 0x204
   17a8c:	tstne	r5, #18
   17a90:	bne	17ab0 <__assert_fail@plt+0x5c1c>
   17a94:	bl	11ca8 <__errno_location@plt>
   17a98:	mov	r1, #22
   17a9c:	mov	r4, #0
   17aa0:	str	r1, [r0]
   17aa4:	mov	r0, r4
   17aa8:	sub	sp, fp, #28
   17aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ab0:	mov	r0, #1
   17ab4:	mov	r1, #96	; 0x60
   17ab8:	mov	sl, r2
   17abc:	bl	33c44 <__assert_fail@plt+0x21db0>
   17ac0:	cmp	r0, #0
   17ac4:	beq	17eb4 <__assert_fail@plt+0x6020>
   17ac8:	mov	r4, r0
   17acc:	mvn	r0, #99	; 0x63
   17ad0:	tst	r5, #2
   17ad4:	mov	r1, r5
   17ad8:	str	r0, [r4, #32]
   17adc:	bic	r0, r5, #516	; 0x204
   17ae0:	str	sl, [r4, #44]	; 0x2c
   17ae4:	str	r4, [sp, #24]
   17ae8:	orrne	r1, r0, #4
   17aec:	str	r1, [r4, #48]	; 0x30
   17af0:	ldr	r0, [r7]
   17af4:	cmp	r0, #0
   17af8:	beq	17b30 <__assert_fail@plt+0x5c9c>
   17afc:	add	r6, r7, #4
   17b00:	mov	r4, #0
   17b04:	bl	11c78 <strlen@plt>
   17b08:	cmp	r0, r4
   17b0c:	movhi	r4, r0
   17b10:	ldr	r0, [r6], #4
   17b14:	cmp	r0, #0
   17b18:	bne	17b04 <__assert_fail@plt+0x5c70>
   17b1c:	add	r0, r4, #1
   17b20:	ldr	r4, [sp, #24]
   17b24:	cmp	r0, #4096	; 0x1000
   17b28:	movls	r0, #4096	; 0x1000
   17b2c:	b	17b34 <__assert_fail@plt+0x5ca0>
   17b30:	mov	r0, #4096	; 0x1000
   17b34:	ldr	r1, [r4, #36]	; 0x24
   17b38:	add	r0, r0, #256	; 0x100
   17b3c:	adds	r1, r0, r1
   17b40:	bcc	17b64 <__assert_fail@plt+0x5cd0>
   17b44:	ldr	r0, [r4, #24]
   17b48:	bl	17754 <__assert_fail@plt+0x58c0>
   17b4c:	mov	r0, #0
   17b50:	str	r0, [r4, #24]
   17b54:	bl	11ca8 <__errno_location@plt>
   17b58:	mov	r1, #36	; 0x24
   17b5c:	str	r1, [r0]
   17b60:	b	17eac <__assert_fail@plt+0x6018>
   17b64:	str	r1, [r4, #36]	; 0x24
   17b68:	ldr	r0, [r4, #24]
   17b6c:	bl	33cc8 <__assert_fail@plt+0x21e34>
   17b70:	cmp	r0, #0
   17b74:	beq	17bd8 <__assert_fail@plt+0x5d44>
   17b78:	str	r0, [r4, #24]
   17b7c:	ldr	r0, [r7]
   17b80:	cmp	r0, #0
   17b84:	beq	17bec <__assert_fail@plt+0x5d58>
   17b88:	mov	r0, #176	; 0xb0
   17b8c:	bl	33c98 <__assert_fail@plt+0x21e04>
   17b90:	cmp	r0, #0
   17b94:	beq	17ea4 <__assert_fail@plt+0x6010>
   17b98:	ldr	r1, [r4, #24]
   17b9c:	mov	r8, r0
   17ba0:	mov	r0, #0
   17ba4:	mov	r2, #196608	; 0x30000
   17ba8:	strb	r0, [r8, #168]	; 0xa8
   17bac:	str	r2, [r8, #58]	; 0x3a
   17bb0:	mvn	r2, #0
   17bb4:	str	r0, [r8, #12]
   17bb8:	str	r0, [r8, #16]
   17bbc:	str	r0, [r8, #20]
   17bc0:	str	r4, [r8, #44]	; 0x2c
   17bc4:	str	r2, [r8, #48]	; 0x30
   17bc8:	str	r0, [r8, #52]	; 0x34
   17bcc:	str	r1, [r8, #28]
   17bd0:	str	r0, [r8, #32]
   17bd4:	b	17bf0 <__assert_fail@plt+0x5d5c>
   17bd8:	ldr	r0, [r4, #24]
   17bdc:	bl	17754 <__assert_fail@plt+0x58c0>
   17be0:	mov	r0, #0
   17be4:	str	r0, [r4, #24]
   17be8:	b	17eac <__assert_fail@plt+0x6018>
   17bec:	mov	r8, #0
   17bf0:	cmp	sl, #0
   17bf4:	ldrbne	r0, [r4, #49]	; 0x31
   17bf8:	ubfxne	r0, r0, #2, #1
   17bfc:	ldr	r4, [r7]
   17c00:	moveq	r0, #1
   17c04:	cmp	r4, #0
   17c08:	beq	17d74 <__assert_fail@plt+0x5ee0>
   17c0c:	eor	r0, r0, #1
   17c10:	and	r1, r5, #2048	; 0x800
   17c14:	mov	r9, #0
   17c18:	mov	r6, #0
   17c1c:	str	r8, [sp, #16]
   17c20:	str	sl, [sp, #8]
   17c24:	str	r0, [sp, #12]
   17c28:	mov	r0, #0
   17c2c:	str	r1, [sp, #20]
   17c30:	str	r0, [sp, #4]
   17c34:	mov	r0, r4
   17c38:	bl	11c78 <strlen@plt>
   17c3c:	mov	r8, r0
   17c40:	ldr	r0, [sp, #20]
   17c44:	cmp	r0, #0
   17c48:	bne	17c80 <__assert_fail@plt+0x5dec>
   17c4c:	cmp	r8, #3
   17c50:	bcc	17c80 <__assert_fail@plt+0x5dec>
   17c54:	add	r0, r4, r8
   17c58:	ldrb	r0, [r0, #-1]
   17c5c:	cmp	r0, #47	; 0x2f
   17c60:	bne	17c80 <__assert_fail@plt+0x5dec>
   17c64:	sub	r0, r4, #2
   17c68:	ldrb	r1, [r0, r8]
   17c6c:	cmp	r1, #47	; 0x2f
   17c70:	bne	17c80 <__assert_fail@plt+0x5dec>
   17c74:	sub	r8, r8, #1
   17c78:	cmp	r8, #1
   17c7c:	bhi	17c68 <__assert_fail@plt+0x5dd4>
   17c80:	add	r0, r8, #176	; 0xb0
   17c84:	bic	r0, r0, #7
   17c88:	bl	33c98 <__assert_fail@plt+0x21e04>
   17c8c:	cmp	r0, #0
   17c90:	beq	17d80 <__assert_fail@plt+0x5eec>
   17c94:	add	sl, r0, #168	; 0xa8
   17c98:	mov	r5, r0
   17c9c:	mov	r1, r4
   17ca0:	mov	r2, r8
   17ca4:	mov	r0, sl
   17ca8:	bl	11a8c <memcpy@plt>
   17cac:	ldr	r0, [sp, #24]
   17cb0:	mov	r4, #0
   17cb4:	mov	r2, #196608	; 0x30000
   17cb8:	strb	r4, [sl, r8]
   17cbc:	str	r2, [r5, #58]	; 0x3a
   17cc0:	add	r2, r5, #44	; 0x2c
   17cc4:	ldr	r1, [r0, #24]
   17cc8:	stm	r2, {r0, r4, r8}
   17ccc:	ldr	r8, [sp, #16]
   17cd0:	ldr	r2, [sp, #12]
   17cd4:	str	r8, [r5, #4]
   17cd8:	str	r4, [r5, #12]
   17cdc:	str	r4, [r5, #16]
   17ce0:	str	r4, [r5, #20]
   17ce4:	str	sl, [r5, #24]
   17ce8:	str	r1, [r5, #28]
   17cec:	clz	r1, r9
   17cf0:	str	r4, [r5, #32]
   17cf4:	lsr	r1, r1, #5
   17cf8:	orrs	r1, r2, r1
   17cfc:	bne	17d14 <__assert_fail@plt+0x5e80>
   17d00:	mov	r0, #2
   17d04:	str	r0, [r5, #112]	; 0x70
   17d08:	str	r4, [r5, #116]	; 0x74
   17d0c:	mov	r0, #11
   17d10:	b	17d20 <__assert_fail@plt+0x5e8c>
   17d14:	mov	r1, r5
   17d18:	mov	r2, #0
   17d1c:	bl	17f44 <__assert_fail@plt+0x60b0>
   17d20:	ldr	sl, [sp, #8]
   17d24:	strh	r0, [r5, #56]	; 0x38
   17d28:	cmp	sl, #0
   17d2c:	beq	17d3c <__assert_fail@plt+0x5ea8>
   17d30:	str	r9, [r5, #8]
   17d34:	mov	r9, r5
   17d38:	b	17d54 <__assert_fail@plt+0x5ec0>
   17d3c:	cmp	r9, #0
   17d40:	str	r4, [r5, #8]
   17d44:	beq	17d68 <__assert_fail@plt+0x5ed4>
   17d48:	ldr	r0, [sp, #4]
   17d4c:	str	r5, [sp, #4]
   17d50:	str	r5, [r0, #8]
   17d54:	ldr	r4, [r7, #4]!
   17d58:	add	r6, r6, #1
   17d5c:	cmp	r4, #0
   17d60:	bne	17c34 <__assert_fail@plt+0x5da0>
   17d64:	b	17d90 <__assert_fail@plt+0x5efc>
   17d68:	mov	r0, r5
   17d6c:	str	r5, [sp, #4]
   17d70:	b	17d34 <__assert_fail@plt+0x5ea0>
   17d74:	ldr	r4, [sp, #24]
   17d78:	mov	r9, #0
   17d7c:	b	17dc0 <__assert_fail@plt+0x5f2c>
   17d80:	ldr	r8, [sp, #16]
   17d84:	cmp	r9, #0
   17d88:	bne	17e70 <__assert_fail@plt+0x5fdc>
   17d8c:	b	17e98 <__assert_fail@plt+0x6004>
   17d90:	cmp	sl, #0
   17d94:	beq	17dbc <__assert_fail@plt+0x5f28>
   17d98:	ldr	r4, [sp, #24]
   17d9c:	cmp	r6, #2
   17da0:	bcc	17dc0 <__assert_fail@plt+0x5f2c>
   17da4:	mov	r0, r4
   17da8:	mov	r1, r9
   17dac:	mov	r2, r6
   17db0:	bl	180dc <__assert_fail@plt+0x6248>
   17db4:	mov	r9, r0
   17db8:	b	17dc0 <__assert_fail@plt+0x5f2c>
   17dbc:	ldr	r4, [sp, #24]
   17dc0:	mov	r0, #176	; 0xb0
   17dc4:	bl	33c98 <__assert_fail@plt+0x21e04>
   17dc8:	cmp	r0, #0
   17dcc:	beq	17e60 <__assert_fail@plt+0x5fcc>
   17dd0:	ldr	r2, [r4, #24]
   17dd4:	mov	r1, #0
   17dd8:	mov	r3, #196608	; 0x30000
   17ddc:	str	r0, [r4]
   17de0:	str	r1, [r0, #52]	; 0x34
   17de4:	strb	r1, [r0, #168]	; 0xa8
   17de8:	str	r4, [r0, #44]	; 0x2c
   17dec:	str	r3, [r0, #58]	; 0x3a
   17df0:	str	r2, [r0, #28]
   17df4:	mov	r2, #9
   17df8:	str	r1, [r0, #32]
   17dfc:	strh	r2, [r0, #56]	; 0x38
   17e00:	str	r9, [r0, #8]
   17e04:	str	r1, [r0, #12]
   17e08:	str	r1, [r0, #16]
   17e0c:	str	r1, [r0, #20]
   17e10:	mov	r1, #1
   17e14:	str	r1, [r0, #48]	; 0x30
   17e18:	ldrh	r0, [r4, #48]	; 0x30
   17e1c:	movw	r1, #258	; 0x102
   17e20:	tst	r0, r1
   17e24:	beq	17ebc <__assert_fail@plt+0x6028>
   17e28:	movw	r0, #30548	; 0x7754
   17e2c:	movw	r2, #39944	; 0x9c08
   17e30:	movw	r3, #39976	; 0x9c28
   17e34:	mov	r1, #0
   17e38:	movt	r0, #1
   17e3c:	movt	r2, #1
   17e40:	movt	r3, #1
   17e44:	str	r0, [sp]
   17e48:	mov	r0, #31
   17e4c:	bl	1a298 <__assert_fail@plt+0x8404>
   17e50:	cmp	r0, #0
   17e54:	str	r0, [r4, #56]	; 0x38
   17e58:	bne	17ed4 <__assert_fail@plt+0x6040>
   17e5c:	b	17e68 <__assert_fail@plt+0x5fd4>
   17e60:	mov	r0, #0
   17e64:	str	r0, [r4]
   17e68:	cmp	r9, #0
   17e6c:	beq	17e98 <__assert_fail@plt+0x6004>
   17e70:	ldrd	r4, [r9, #8]
   17e74:	cmp	r5, #0
   17e78:	beq	17e84 <__assert_fail@plt+0x5ff0>
   17e7c:	mov	r0, r5
   17e80:	bl	11e88 <closedir@plt>
   17e84:	mov	r0, r9
   17e88:	bl	17754 <__assert_fail@plt+0x58c0>
   17e8c:	cmp	r4, #0
   17e90:	mov	r9, r4
   17e94:	bne	17e70 <__assert_fail@plt+0x5fdc>
   17e98:	mov	r0, r8
   17e9c:	bl	17754 <__assert_fail@plt+0x58c0>
   17ea0:	ldr	r4, [sp, #24]
   17ea4:	ldr	r0, [r4, #24]
   17ea8:	bl	17754 <__assert_fail@plt+0x58c0>
   17eac:	mov	r0, r4
   17eb0:	bl	17754 <__assert_fail@plt+0x58c0>
   17eb4:	mov	r4, #0
   17eb8:	b	17aa4 <__assert_fail@plt+0x5c10>
   17ebc:	mov	r0, #32
   17ec0:	bl	33c98 <__assert_fail@plt+0x21e04>
   17ec4:	cmp	r0, #0
   17ec8:	str	r0, [r4, #56]	; 0x38
   17ecc:	beq	17e68 <__assert_fail@plt+0x5fd4>
   17ed0:	bl	347e8 <__assert_fail@plt+0x22954>
   17ed4:	ldr	r4, [sp, #24]
   17ed8:	ldr	r0, [r4, #48]	; 0x30
   17edc:	tst	r0, #516	; 0x204
   17ee0:	bne	17f34 <__assert_fail@plt+0x60a0>
   17ee4:	mov	r1, #32768	; 0x8000
   17ee8:	tst	r0, #512	; 0x200
   17eec:	and	r1, r1, r0, lsl #11
   17ef0:	orr	r1, r1, #18688	; 0x4900
   17ef4:	orr	r2, r1, #524288	; 0x80000
   17ef8:	bne	17f10 <__assert_fail@plt+0x607c>
   17efc:	movw	r0, #27936	; 0x6d20
   17f00:	mov	r1, r2
   17f04:	movt	r0, #3
   17f08:	bl	34b7c <__assert_fail@plt+0x22ce8>
   17f0c:	b	17f20 <__assert_fail@plt+0x608c>
   17f10:	ldr	r0, [r4, #32]
   17f14:	movw	r1, #27936	; 0x6d20
   17f18:	movt	r1, #3
   17f1c:	bl	1d00c <__assert_fail@plt+0xb178>
   17f20:	str	r0, [r4, #28]
   17f24:	cmn	r0, #1
   17f28:	ldrle	r0, [r4, #48]	; 0x30
   17f2c:	orrle	r0, r0, #4
   17f30:	strle	r0, [r4, #48]	; 0x30
   17f34:	add	r0, r4, #60	; 0x3c
   17f38:	mvn	r1, #0
   17f3c:	bl	1bbe8 <__assert_fail@plt+0x9d54>
   17f40:	b	17aa4 <__assert_fail@plt+0x5c10>
   17f44:	push	{r4, r5, r6, sl, fp, lr}
   17f48:	add	fp, sp, #16
   17f4c:	sub	sp, sp, #8
   17f50:	mov	r4, r1
   17f54:	ldr	r1, [r0, #48]	; 0x30
   17f58:	ldr	r3, [r4, #48]	; 0x30
   17f5c:	add	r5, r4, #64	; 0x40
   17f60:	cmp	r3, #0
   17f64:	andeq	r3, r1, #1
   17f68:	orreq	r2, r3, r2
   17f6c:	cmp	r2, #0
   17f70:	andseq	r1, r1, #2
   17f74:	beq	17fd0 <__assert_fail@plt+0x613c>
   17f78:	ldr	r1, [r4, #24]
   17f7c:	mov	r0, #3
   17f80:	mov	r2, r5
   17f84:	bl	11e28 <__xstat64@plt>
   17f88:	cmp	r0, #0
   17f8c:	beq	18050 <__assert_fail@plt+0x61bc>
   17f90:	bl	11ca8 <__errno_location@plt>
   17f94:	mov	r6, r0
   17f98:	ldr	r0, [r0]
   17f9c:	cmp	r0, #2
   17fa0:	bne	18000 <__assert_fail@plt+0x616c>
   17fa4:	ldr	r1, [r4, #24]
   17fa8:	mov	r0, #3
   17fac:	mov	r2, r5
   17fb0:	bl	11e7c <__lxstat64@plt>
   17fb4:	cmp	r0, #0
   17fb8:	bne	17ffc <__assert_fail@plt+0x6168>
   17fbc:	mov	r0, #0
   17fc0:	str	r0, [r6]
   17fc4:	mov	r0, #13
   17fc8:	sub	sp, fp, #16
   17fcc:	pop	{r4, r5, r6, sl, fp, pc}
   17fd0:	ldr	r1, [r0, #32]
   17fd4:	ldr	r2, [r4, #24]
   17fd8:	mov	r0, #256	; 0x100
   17fdc:	mov	r3, r5
   17fe0:	str	r0, [sp]
   17fe4:	mov	r0, #3
   17fe8:	bl	11b1c <__fxstatat64@plt>
   17fec:	cmp	r0, #0
   17ff0:	beq	18050 <__assert_fail@plt+0x61bc>
   17ff4:	bl	11ca8 <__errno_location@plt>
   17ff8:	mov	r6, r0
   17ffc:	ldr	r0, [r6]
   18000:	vmov.i32	q8, #0	; 0x00000000
   18004:	add	r1, r5, #80	; 0x50
   18008:	str	r0, [r4, #32]
   1800c:	mov	r0, #0
   18010:	vst1.64	{d16-d17}, [r1]
   18014:	add	r1, r5, #64	; 0x40
   18018:	str	r0, [r5, #96]	; 0x60
   1801c:	vst1.64	{d16-d17}, [r1]
   18020:	add	r1, r5, #48	; 0x30
   18024:	vst1.64	{d16-d17}, [r1]
   18028:	add	r1, r5, #32
   1802c:	vst1.64	{d16-d17}, [r1]
   18030:	add	r1, r5, #16
   18034:	vst1.64	{d16-d17}, [r1]
   18038:	mov	r1, #100	; 0x64
   1803c:	vst1.64	{d16-d17}, [r5], r1
   18040:	str	r0, [r5]
   18044:	mov	r0, #10
   18048:	sub	sp, fp, #16
   1804c:	pop	{r4, r5, r6, sl, fp, pc}
   18050:	ldr	r0, [r4, #80]	; 0x50
   18054:	and	r0, r0, #61440	; 0xf000
   18058:	cmp	r0, #40960	; 0xa000
   1805c:	beq	180b8 <__assert_fail@plt+0x6224>
   18060:	cmp	r0, #32768	; 0x8000
   18064:	moveq	r0, #8
   18068:	subeq	sp, fp, #16
   1806c:	popeq	{r4, r5, r6, sl, fp, pc}
   18070:	cmp	r0, #16384	; 0x4000
   18074:	bne	180ac <__assert_fail@plt+0x6218>
   18078:	ldrb	r1, [r4, #168]	; 0xa8
   1807c:	mov	r0, #1
   18080:	cmp	r1, #46	; 0x2e
   18084:	bne	180a4 <__assert_fail@plt+0x6210>
   18088:	ldrb	r1, [r4, #169]	; 0xa9
   1808c:	cmp	r1, #0
   18090:	beq	180c4 <__assert_fail@plt+0x6230>
   18094:	cmp	r1, #46	; 0x2e
   18098:	ldrbeq	r1, [r4, #170]	; 0xaa
   1809c:	cmpeq	r1, #0
   180a0:	beq	180c4 <__assert_fail@plt+0x6230>
   180a4:	sub	sp, fp, #16
   180a8:	pop	{r4, r5, r6, sl, fp, pc}
   180ac:	mov	r0, #3
   180b0:	sub	sp, fp, #16
   180b4:	pop	{r4, r5, r6, sl, fp, pc}
   180b8:	mov	r0, #12
   180bc:	sub	sp, fp, #16
   180c0:	pop	{r4, r5, r6, sl, fp, pc}
   180c4:	ldr	r1, [r4, #48]	; 0x30
   180c8:	mov	r0, #5
   180cc:	cmp	r1, #0
   180d0:	movweq	r0, #1
   180d4:	sub	sp, fp, #16
   180d8:	pop	{r4, r5, r6, sl, fp, pc}
   180dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   180e0:	add	fp, sp, #24
   180e4:	ldrd	r8, [r0, #40]	; 0x28
   180e8:	mov	r5, r2
   180ec:	mov	r4, r1
   180f0:	mov	r6, r0
   180f4:	cmp	r8, r2
   180f8:	bcs	18138 <__assert_fail@plt+0x62a4>
   180fc:	add	r1, r5, #40	; 0x28
   18100:	cmn	r1, #-1073741823	; 0xc0000001
   18104:	str	r1, [r6, #40]	; 0x28
   18108:	bhi	181c4 <__assert_fail@plt+0x6330>
   1810c:	add	r7, r6, #8
   18110:	lsl	r1, r1, #2
   18114:	ldr	r0, [r7]
   18118:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1811c:	cmp	r0, #0
   18120:	beq	181c4 <__assert_fail@plt+0x6330>
   18124:	mov	r6, r7
   18128:	str	r0, [r7]
   1812c:	cmp	r4, #0
   18130:	bne	18144 <__assert_fail@plt+0x62b0>
   18134:	b	18158 <__assert_fail@plt+0x62c4>
   18138:	ldr	r0, [r6, #8]!
   1813c:	cmp	r4, #0
   18140:	beq	18158 <__assert_fail@plt+0x62c4>
   18144:	str	r4, [r0], #4
   18148:	ldr	r4, [r4, #8]
   1814c:	cmp	r4, #0
   18150:	bne	18144 <__assert_fail@plt+0x62b0>
   18154:	ldr	r0, [r6]
   18158:	mov	r1, r5
   1815c:	mov	r2, #4
   18160:	mov	r3, r9
   18164:	bl	11df8 <qsort@plt>
   18168:	ldr	r7, [r6]
   1816c:	subs	r0, r5, #1
   18170:	ldr	r4, [r7]
   18174:	mov	r1, r4
   18178:	beq	181b4 <__assert_fail@plt+0x6320>
   1817c:	mov	r1, r7
   18180:	cmp	r5, #2
   18184:	ldr	r2, [r1, #4]!
   18188:	str	r2, [r4, #8]
   1818c:	beq	181b0 <__assert_fail@plt+0x631c>
   18190:	rsb	r3, r5, #2
   18194:	mov	r2, r1
   18198:	ldr	r6, [r2, #4]!
   1819c:	ldr	r1, [r1]
   181a0:	adds	r3, r3, #1
   181a4:	str	r6, [r1, #8]
   181a8:	mov	r1, r2
   181ac:	bne	18198 <__assert_fail@plt+0x6304>
   181b0:	ldr	r1, [r7, r0, lsl #2]
   181b4:	mov	r0, #0
   181b8:	str	r0, [r1, #8]
   181bc:	mov	r0, r4
   181c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   181c4:	ldr	r0, [r6, #8]
   181c8:	bl	17754 <__assert_fail@plt+0x58c0>
   181cc:	mov	r0, #0
   181d0:	str	r0, [r6, #40]	; 0x28
   181d4:	str	r0, [r6, #8]
   181d8:	mov	r0, r4
   181dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   181e0:	push	{r4, r5, r6, r7, fp, lr}
   181e4:	add	fp, sp, #16
   181e8:	mov	r4, r0
   181ec:	ldr	r0, [r0]
   181f0:	cmp	r0, #0
   181f4:	beq	18234 <__assert_fail@plt+0x63a0>
   181f8:	ldr	r1, [r0, #48]	; 0x30
   181fc:	cmp	r1, #0
   18200:	blt	18228 <__assert_fail@plt+0x6394>
   18204:	ldr	r5, [r0, #8]
   18208:	cmp	r5, #0
   1820c:	ldreq	r5, [r0, #4]
   18210:	bl	17754 <__assert_fail@plt+0x58c0>
   18214:	ldr	r0, [r5, #48]	; 0x30
   18218:	cmn	r0, #1
   1821c:	mov	r0, r5
   18220:	bgt	18204 <__assert_fail@plt+0x6370>
   18224:	b	1822c <__assert_fail@plt+0x6398>
   18228:	mov	r5, r0
   1822c:	mov	r0, r5
   18230:	bl	17754 <__assert_fail@plt+0x58c0>
   18234:	ldr	r5, [r4, #4]
   18238:	cmp	r5, #0
   1823c:	beq	18268 <__assert_fail@plt+0x63d4>
   18240:	ldrd	r6, [r5, #8]
   18244:	cmp	r7, #0
   18248:	beq	18254 <__assert_fail@plt+0x63c0>
   1824c:	mov	r0, r7
   18250:	bl	11e88 <closedir@plt>
   18254:	mov	r0, r5
   18258:	bl	17754 <__assert_fail@plt+0x58c0>
   1825c:	cmp	r6, #0
   18260:	mov	r5, r6
   18264:	bne	18240 <__assert_fail@plt+0x63ac>
   18268:	ldr	r0, [r4, #8]
   1826c:	bl	17754 <__assert_fail@plt+0x58c0>
   18270:	ldr	r0, [r4, #24]
   18274:	bl	17754 <__assert_fail@plt+0x58c0>
   18278:	ldr	r0, [r4, #48]	; 0x30
   1827c:	tst	r0, #512	; 0x200
   18280:	bne	182ac <__assert_fail@plt+0x6418>
   18284:	mov	r6, #0
   18288:	tst	r0, #4
   1828c:	bne	182f0 <__assert_fail@plt+0x645c>
   18290:	ldr	r0, [r4, #28]
   18294:	bl	11dd4 <fchdir@plt>
   18298:	cmp	r0, #0
   1829c:	beq	182cc <__assert_fail@plt+0x6438>
   182a0:	bl	11ca8 <__errno_location@plt>
   182a4:	ldr	r6, [r0]
   182a8:	b	182d0 <__assert_fail@plt+0x643c>
   182ac:	ldr	r0, [r4, #32]
   182b0:	mov	r6, #0
   182b4:	cmp	r0, #0
   182b8:	blt	182f0 <__assert_fail@plt+0x645c>
   182bc:	bl	11e70 <close@plt>
   182c0:	cmp	r0, #0
   182c4:	bne	182e8 <__assert_fail@plt+0x6454>
   182c8:	b	182f0 <__assert_fail@plt+0x645c>
   182cc:	mov	r6, #0
   182d0:	ldr	r0, [r4, #28]
   182d4:	bl	11e70 <close@plt>
   182d8:	cmp	r6, #0
   182dc:	bne	182f0 <__assert_fail@plt+0x645c>
   182e0:	cmp	r0, #0
   182e4:	beq	182f0 <__assert_fail@plt+0x645c>
   182e8:	bl	11ca8 <__errno_location@plt>
   182ec:	ldr	r6, [r0]
   182f0:	add	r5, r4, #60	; 0x3c
   182f4:	b	182fc <__assert_fail@plt+0x6468>
   182f8:	bl	11e70 <close@plt>
   182fc:	mov	r0, r5
   18300:	bl	1bc0c <__assert_fail@plt+0x9d78>
   18304:	cmp	r0, #0
   18308:	bne	18320 <__assert_fail@plt+0x648c>
   1830c:	mov	r0, r5
   18310:	bl	1bc60 <__assert_fail@plt+0x9dcc>
   18314:	cmp	r0, #0
   18318:	bge	182f8 <__assert_fail@plt+0x6464>
   1831c:	b	182fc <__assert_fail@plt+0x6468>
   18320:	ldr	r0, [r4, #52]	; 0x34
   18324:	cmp	r0, #0
   18328:	beq	18330 <__assert_fail@plt+0x649c>
   1832c:	bl	1a590 <__assert_fail@plt+0x86fc>
   18330:	ldrh	r0, [r4, #48]	; 0x30
   18334:	movw	r1, #258	; 0x102
   18338:	tst	r0, r1
   1833c:	beq	18354 <__assert_fail@plt+0x64c0>
   18340:	ldr	r0, [r4, #56]	; 0x38
   18344:	cmp	r0, #0
   18348:	beq	1835c <__assert_fail@plt+0x64c8>
   1834c:	bl	1a590 <__assert_fail@plt+0x86fc>
   18350:	b	1835c <__assert_fail@plt+0x64c8>
   18354:	ldr	r0, [r4, #56]	; 0x38
   18358:	bl	17754 <__assert_fail@plt+0x58c0>
   1835c:	mov	r0, r4
   18360:	bl	17754 <__assert_fail@plt+0x58c0>
   18364:	cmp	r6, #0
   18368:	moveq	r0, #0
   1836c:	popeq	{r4, r5, r6, r7, fp, pc}
   18370:	bl	11ca8 <__errno_location@plt>
   18374:	str	r6, [r0]
   18378:	mvn	r0, #0
   1837c:	pop	{r4, r5, r6, r7, fp, pc}
   18380:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18384:	add	fp, sp, #24
   18388:	sub	sp, sp, #8
   1838c:	ldr	r6, [r0]
   18390:	mov	r5, #0
   18394:	cmp	r6, #0
   18398:	beq	18acc <__assert_fail@plt+0x6c38>
   1839c:	mov	r4, r0
   183a0:	ldr	r0, [r0, #48]	; 0x30
   183a4:	tst	r0, #8192	; 0x2000
   183a8:	bne	18acc <__assert_fail@plt+0x6c38>
   183ac:	ldrh	r1, [r6, #60]	; 0x3c
   183b0:	mov	r2, #3
   183b4:	strh	r2, [r6, #60]	; 0x3c
   183b8:	cmp	r1, #1
   183bc:	beq	18434 <__assert_fail@plt+0x65a0>
   183c0:	mov	r7, r6
   183c4:	cmp	r1, #2
   183c8:	bne	18450 <__assert_fail@plt+0x65bc>
   183cc:	ldrh	r2, [r7, #56]!	; 0x38
   183d0:	movw	r3, #65534	; 0xfffe
   183d4:	and	r3, r2, r3
   183d8:	cmp	r3, #12
   183dc:	bne	18454 <__assert_fail@plt+0x65c0>
   183e0:	mov	r0, r4
   183e4:	mov	r1, r6
   183e8:	mov	r2, #1
   183ec:	bl	17f44 <__assert_fail@plt+0x60b0>
   183f0:	cmp	r0, #1
   183f4:	strh	r0, [r6, #56]	; 0x38
   183f8:	bne	1853c <__assert_fail@plt+0x66a8>
   183fc:	ldr	r0, [r4, #48]	; 0x30
   18400:	tst	r0, #4
   18404:	bne	1853c <__assert_fail@plt+0x66a8>
   18408:	mov	r1, #32768	; 0x8000
   1840c:	tst	r0, #512	; 0x200
   18410:	and	r1, r1, r0, lsl #11
   18414:	orr	r1, r1, #18688	; 0x4900
   18418:	orr	r2, r1, #524288	; 0x80000
   1841c:	bne	187a8 <__assert_fail@plt+0x6914>
   18420:	movw	r0, #27936	; 0x6d20
   18424:	mov	r1, r2
   18428:	movt	r0, #3
   1842c:	bl	34b7c <__assert_fail@plt+0x22ce8>
   18430:	b	187b8 <__assert_fail@plt+0x6924>
   18434:	mov	r0, r4
   18438:	mov	r1, r6
   1843c:	mov	r2, #0
   18440:	bl	17f44 <__assert_fail@plt+0x60b0>
   18444:	strh	r0, [r6, #56]	; 0x38
   18448:	mov	r5, r6
   1844c:	b	18acc <__assert_fail@plt+0x6c38>
   18450:	ldrh	r2, [r7, #56]!	; 0x38
   18454:	cmp	r2, #1
   18458:	bne	184d0 <__assert_fail@plt+0x663c>
   1845c:	cmp	r1, #4
   18460:	bne	18544 <__assert_fail@plt+0x66b0>
   18464:	ldrb	r0, [r6, #58]	; 0x3a
   18468:	tst	r0, #2
   1846c:	beq	18478 <__assert_fail@plt+0x65e4>
   18470:	ldr	r0, [r6, #36]	; 0x24
   18474:	bl	11e70 <close@plt>
   18478:	ldr	r5, [r4, #4]
   1847c:	cmp	r5, #0
   18480:	beq	184b4 <__assert_fail@plt+0x6620>
   18484:	ldrd	r8, [r5, #8]
   18488:	cmp	r9, #0
   1848c:	beq	18498 <__assert_fail@plt+0x6604>
   18490:	mov	r0, r9
   18494:	bl	11e88 <closedir@plt>
   18498:	mov	r0, r5
   1849c:	bl	17754 <__assert_fail@plt+0x58c0>
   184a0:	cmp	r8, #0
   184a4:	mov	r5, r8
   184a8:	bne	18484 <__assert_fail@plt+0x65f0>
   184ac:	mov	r0, #0
   184b0:	str	r0, [r4, #4]
   184b4:	mov	r0, #6
   184b8:	strh	r0, [r6, #56]	; 0x38
   184bc:	mov	r0, r4
   184c0:	mov	r1, r6
   184c4:	bl	18adc <__assert_fail@plt+0x6c48>
   184c8:	mov	r5, r6
   184cc:	b	18acc <__assert_fail@plt+0x6c38>
   184d0:	ldr	r5, [r6, #8]
   184d4:	cmp	r5, #0
   184d8:	beq	185d4 <__assert_fail@plt+0x6740>
   184dc:	mov	r0, r6
   184e0:	str	r5, [r4]
   184e4:	bl	17754 <__assert_fail@plt+0x58c0>
   184e8:	ldr	r0, [r5, #48]	; 0x30
   184ec:	cmp	r0, #0
   184f0:	beq	18620 <__assert_fail@plt+0x678c>
   184f4:	ldrh	r0, [r5, #60]	; 0x3c
   184f8:	mov	r6, r5
   184fc:	cmp	r0, #4
   18500:	beq	184d0 <__assert_fail@plt+0x663c>
   18504:	cmp	r0, #2
   18508:	bne	186c0 <__assert_fail@plt+0x682c>
   1850c:	mov	r0, r4
   18510:	mov	r1, r5
   18514:	mov	r2, #1
   18518:	bl	17f44 <__assert_fail@plt+0x60b0>
   1851c:	strh	r0, [r5, #56]	; 0x38
   18520:	cmp	r0, #1
   18524:	ldreq	r0, [r4, #48]	; 0x30
   18528:	tsteq	r0, #4
   1852c:	beq	189e4 <__assert_fail@plt+0x6b50>
   18530:	mov	r0, #3
   18534:	strh	r0, [r5, #60]	; 0x3c
   18538:	b	186c0 <__assert_fail@plt+0x682c>
   1853c:	mov	r5, r6
   18540:	b	186fc <__assert_fail@plt+0x6868>
   18544:	tst	r0, #64	; 0x40
   18548:	beq	18564 <__assert_fail@plt+0x66d0>
   1854c:	ldrd	r2, [r4, #16]
   18550:	ldrd	r8, [r6, #64]	; 0x40
   18554:	eor	r1, r9, r3
   18558:	eor	r2, r8, r2
   1855c:	orrs	r1, r2, r1
   18560:	bne	18464 <__assert_fail@plt+0x65d0>
   18564:	ldr	r5, [r4, #4]
   18568:	cmp	r5, #0
   1856c:	beq	1869c <__assert_fail@plt+0x6808>
   18570:	tst	r0, #4096	; 0x1000
   18574:	bne	18664 <__assert_fail@plt+0x67d0>
   18578:	ldr	r3, [r6, #24]
   1857c:	mov	r0, r4
   18580:	mov	r1, r6
   18584:	mvn	r2, #0
   18588:	bl	18bac <__assert_fail@plt+0x6d18>
   1858c:	cmp	r0, #0
   18590:	beq	186b4 <__assert_fail@plt+0x6820>
   18594:	bl	11ca8 <__errno_location@plt>
   18598:	ldr	r0, [r0]
   1859c:	str	r0, [r6, #32]
   185a0:	ldrh	r0, [r6, #58]	; 0x3a
   185a4:	orr	r0, r0, #1
   185a8:	strh	r0, [r6, #58]	; 0x3a
   185ac:	ldr	r0, [r4, #4]
   185b0:	cmp	r0, #0
   185b4:	beq	186b4 <__assert_fail@plt+0x6820>
   185b8:	ldmib	r0, {r1, r2}
   185bc:	ldr	r1, [r1, #24]
   185c0:	cmp	r2, #0
   185c4:	str	r1, [r0, #24]
   185c8:	mov	r0, r2
   185cc:	bne	185b8 <__assert_fail@plt+0x6724>
   185d0:	b	186b4 <__assert_fail@plt+0x6820>
   185d4:	ldr	r5, [r6, #4]
   185d8:	ldr	r0, [r5, #12]
   185dc:	cmp	r0, #0
   185e0:	beq	187e8 <__assert_fail@plt+0x6954>
   185e4:	str	r5, [r4]
   185e8:	ldr	r1, [r5, #40]	; 0x28
   185ec:	ldr	r0, [r4, #24]
   185f0:	mov	r5, #0
   185f4:	strb	r5, [r0, r1]
   185f8:	mov	r0, r4
   185fc:	mov	r1, #3
   18600:	bl	18e04 <__assert_fail@plt+0x6f70>
   18604:	cmp	r0, #0
   18608:	beq	187d8 <__assert_fail@plt+0x6944>
   1860c:	mov	r7, r0
   18610:	mov	r0, r6
   18614:	bl	17754 <__assert_fail@plt+0x58c0>
   18618:	mov	r5, r7
   1861c:	b	186c0 <__assert_fail@plt+0x682c>
   18620:	mov	r0, r4
   18624:	bl	198b8 <__assert_fail@plt+0x7a24>
   18628:	ldr	r1, [r4, #48]	; 0x30
   1862c:	cmp	r0, #0
   18630:	beq	18644 <__assert_fail@plt+0x67b0>
   18634:	orr	r0, r1, #8192	; 0x2000
   18638:	mov	r5, #0
   1863c:	str	r0, [r4, #48]	; 0x30
   18640:	b	18acc <__assert_fail@plt+0x6c38>
   18644:	movw	r0, #258	; 0x102
   18648:	tst	r1, r0
   1864c:	beq	18898 <__assert_fail@plt+0x6a04>
   18650:	ldr	r0, [r4, #56]	; 0x38
   18654:	cmp	r0, #0
   18658:	beq	188a0 <__assert_fail@plt+0x6a0c>
   1865c:	bl	1a590 <__assert_fail@plt+0x86fc>
   18660:	b	188a0 <__assert_fail@plt+0x6a0c>
   18664:	bic	r0, r0, #4096	; 0x1000
   18668:	str	r0, [r4, #48]	; 0x30
   1866c:	ldrd	r8, [r5, #8]
   18670:	cmp	r9, #0
   18674:	beq	18680 <__assert_fail@plt+0x67ec>
   18678:	mov	r0, r9
   1867c:	bl	11e88 <closedir@plt>
   18680:	mov	r0, r5
   18684:	bl	17754 <__assert_fail@plt+0x58c0>
   18688:	cmp	r8, #0
   1868c:	mov	r5, r8
   18690:	bne	1866c <__assert_fail@plt+0x67d8>
   18694:	mov	r0, #0
   18698:	str	r0, [r4, #4]
   1869c:	mov	r0, r4
   186a0:	mov	r1, #3
   186a4:	bl	18e04 <__assert_fail@plt+0x6f70>
   186a8:	cmp	r0, #0
   186ac:	str	r0, [r4, #4]
   186b0:	beq	1877c <__assert_fail@plt+0x68e8>
   186b4:	ldr	r5, [r4, #4]
   186b8:	mov	r0, #0
   186bc:	str	r0, [r4, #4]
   186c0:	ldr	r0, [r5, #4]
   186c4:	ldr	r1, [r0, #28]
   186c8:	ldr	r0, [r0, #40]	; 0x28
   186cc:	sub	r2, r0, #1
   186d0:	ldrb	r1, [r1, r2]
   186d4:	cmp	r1, #47	; 0x2f
   186d8:	ldr	r1, [r4, #24]
   186dc:	moveq	r0, r2
   186e0:	mov	r2, #47	; 0x2f
   186e4:	strb	r2, [r1, r0]!
   186e8:	ldr	r2, [r5, #52]	; 0x34
   186ec:	add	r0, r1, #1
   186f0:	add	r1, r5, #168	; 0xa8
   186f4:	add	r2, r2, #1
   186f8:	bl	11a50 <memmove@plt>
   186fc:	str	r5, [r4]
   18700:	ldrh	r0, [r5, #56]	; 0x38
   18704:	cmp	r0, #11
   18708:	bne	1873c <__assert_fail@plt+0x68a8>
   1870c:	ldrd	r0, [r5, #112]	; 0x70
   18710:	eor	r2, r0, #1
   18714:	orrs	r2, r2, r1
   18718:	beq	18acc <__assert_fail@plt+0x6c38>
   1871c:	eor	r0, r0, #2
   18720:	orrs	r0, r0, r1
   18724:	bne	18ad8 <__assert_fail@plt+0x6c44>
   18728:	mov	r0, r4
   1872c:	mov	r1, r5
   18730:	mov	r2, #0
   18734:	bl	17f44 <__assert_fail@plt+0x60b0>
   18738:	strh	r0, [r5, #56]	; 0x38
   1873c:	cmp	r0, #1
   18740:	bne	18acc <__assert_fail@plt+0x6c38>
   18744:	ldr	r0, [r5, #48]	; 0x30
   18748:	cmp	r0, #0
   1874c:	ldrdeq	r0, [r5, #64]	; 0x40
   18750:	strdeq	r0, [r4, #16]
   18754:	mov	r0, r4
   18758:	mov	r1, r5
   1875c:	bl	19948 <__assert_fail@plt+0x7ab4>
   18760:	cmp	r0, #0
   18764:	bne	18acc <__assert_fail@plt+0x6c38>
   18768:	bl	11ca8 <__errno_location@plt>
   1876c:	mov	r1, #12
   18770:	mov	r5, #0
   18774:	str	r1, [r0]
   18778:	b	18acc <__assert_fail@plt+0x6c38>
   1877c:	ldrb	r0, [r4, #49]	; 0x31
   18780:	mov	r5, #0
   18784:	tst	r0, #32
   18788:	bne	18acc <__assert_fail@plt+0x6c38>
   1878c:	ldr	r0, [r6, #32]
   18790:	cmp	r0, #0
   18794:	ldrhne	r0, [r7]
   18798:	cmpne	r0, #4
   1879c:	movne	r0, #7
   187a0:	strhne	r0, [r7]
   187a4:	b	184bc <__assert_fail@plt+0x6628>
   187a8:	ldr	r0, [r4, #32]
   187ac:	movw	r1, #27936	; 0x6d20
   187b0:	movt	r1, #3
   187b4:	bl	1d00c <__assert_fail@plt+0xb178>
   187b8:	cmn	r0, #1
   187bc:	str	r0, [r6, #36]	; 0x24
   187c0:	ble	1887c <__assert_fail@plt+0x69e8>
   187c4:	ldrh	r0, [r6, #58]	; 0x3a
   187c8:	mov	r5, r6
   187cc:	orr	r0, r0, #2
   187d0:	strh	r0, [r6, #58]	; 0x3a
   187d4:	b	186fc <__assert_fail@plt+0x6868>
   187d8:	ldrb	r0, [r4, #49]	; 0x31
   187dc:	tst	r0, #32
   187e0:	bne	18acc <__assert_fail@plt+0x6c38>
   187e4:	ldr	r5, [r6, #4]
   187e8:	mov	r0, r6
   187ec:	str	r5, [r4]
   187f0:	bl	17754 <__assert_fail@plt+0x58c0>
   187f4:	ldr	r0, [r5, #48]	; 0x30
   187f8:	cmn	r0, #1
   187fc:	beq	18860 <__assert_fail@plt+0x69cc>
   18800:	ldrh	r0, [r5, #56]	; 0x38
   18804:	cmp	r0, #11
   18808:	beq	18ad8 <__assert_fail@plt+0x6c44>
   1880c:	ldr	r0, [r5, #40]	; 0x28
   18810:	ldr	r1, [r4, #24]
   18814:	mov	r2, #0
   18818:	strb	r2, [r1, r0]
   1881c:	ldr	r0, [r5, #48]	; 0x30
   18820:	cmp	r0, #0
   18824:	beq	18970 <__assert_fail@plt+0x6adc>
   18828:	ldrh	r0, [r5, #58]	; 0x3a
   1882c:	tst	r0, #2
   18830:	bne	1899c <__assert_fail@plt+0x6b08>
   18834:	tst	r0, #1
   18838:	bne	18a90 <__assert_fail@plt+0x6bfc>
   1883c:	ldr	r1, [r5, #4]
   18840:	movw	r3, #27935	; 0x6d1f
   18844:	mov	r0, r4
   18848:	mvn	r2, #0
   1884c:	movt	r3, #3
   18850:	bl	18bac <__assert_fail@plt+0x6d18>
   18854:	cmp	r0, #0
   18858:	bne	18980 <__assert_fail@plt+0x6aec>
   1885c:	b	18a90 <__assert_fail@plt+0x6bfc>
   18860:	mov	r0, r5
   18864:	bl	17754 <__assert_fail@plt+0x58c0>
   18868:	bl	11ca8 <__errno_location@plt>
   1886c:	mov	r5, #0
   18870:	str	r5, [r0]
   18874:	str	r5, [r4]
   18878:	b	18acc <__assert_fail@plt+0x6c38>
   1887c:	bl	11ca8 <__errno_location@plt>
   18880:	ldr	r0, [r0]
   18884:	mov	r1, #7
   18888:	mov	r5, r6
   1888c:	strh	r1, [r6, #56]	; 0x38
   18890:	str	r0, [r6, #32]
   18894:	b	186fc <__assert_fail@plt+0x6868>
   18898:	ldr	r0, [r4, #56]	; 0x38
   1889c:	bl	17754 <__assert_fail@plt+0x58c0>
   188a0:	ldr	r1, [r5, #52]	; 0x34
   188a4:	add	r6, r5, #168	; 0xa8
   188a8:	str	r1, [r5, #40]	; 0x28
   188ac:	add	r2, r1, #1
   188b0:	mov	r1, r6
   188b4:	ldr	r0, [r4, #24]
   188b8:	bl	11a50 <memmove@plt>
   188bc:	mov	r0, r6
   188c0:	mov	r1, #47	; 0x2f
   188c4:	bl	11d68 <strrchr@plt>
   188c8:	cmp	r0, #0
   188cc:	beq	18908 <__assert_fail@plt+0x6a74>
   188d0:	cmp	r0, r6
   188d4:	bne	188e4 <__assert_fail@plt+0x6a50>
   188d8:	ldrb	r1, [r5, #169]	; 0xa9
   188dc:	cmp	r1, #0
   188e0:	beq	18908 <__assert_fail@plt+0x6a74>
   188e4:	add	r7, r0, #1
   188e8:	mov	r0, r7
   188ec:	bl	11c78 <strlen@plt>
   188f0:	mov	r8, r0
   188f4:	add	r2, r0, #1
   188f8:	mov	r0, r6
   188fc:	mov	r1, r7
   18900:	bl	11a50 <memmove@plt>
   18904:	str	r8, [r5, #52]	; 0x34
   18908:	ldr	r0, [r4, #24]
   1890c:	movw	r1, #258	; 0x102
   18910:	str	r0, [r5, #24]
   18914:	str	r0, [r5, #28]
   18918:	ldrh	r0, [r4, #48]	; 0x30
   1891c:	tst	r0, r1
   18920:	beq	18954 <__assert_fail@plt+0x6ac0>
   18924:	movw	r0, #30548	; 0x7754
   18928:	movw	r2, #39944	; 0x9c08
   1892c:	movw	r3, #39976	; 0x9c28
   18930:	mov	r1, #0
   18934:	movt	r0, #1
   18938:	movt	r2, #1
   1893c:	movt	r3, #1
   18940:	str	r0, [sp]
   18944:	mov	r0, #31
   18948:	bl	1a298 <__assert_fail@plt+0x8404>
   1894c:	str	r0, [r4, #56]	; 0x38
   18950:	b	186fc <__assert_fail@plt+0x6868>
   18954:	mov	r0, #32
   18958:	bl	33c98 <__assert_fail@plt+0x21e04>
   1895c:	cmp	r0, #0
   18960:	str	r0, [r4, #56]	; 0x38
   18964:	beq	186fc <__assert_fail@plt+0x6868>
   18968:	bl	347e8 <__assert_fail@plt+0x22954>
   1896c:	b	186fc <__assert_fail@plt+0x6868>
   18970:	mov	r0, r4
   18974:	bl	198b8 <__assert_fail@plt+0x7a24>
   18978:	cmp	r0, #0
   1897c:	beq	18a90 <__assert_fail@plt+0x6bfc>
   18980:	bl	11ca8 <__errno_location@plt>
   18984:	ldr	r0, [r0]
   18988:	str	r0, [r5, #32]
   1898c:	ldr	r0, [r4, #48]	; 0x30
   18990:	orr	r0, r0, #8192	; 0x2000
   18994:	str	r0, [r4, #48]	; 0x30
   18998:	b	18a90 <__assert_fail@plt+0x6bfc>
   1899c:	ldr	r0, [r4, #48]	; 0x30
   189a0:	tst	r0, #4
   189a4:	bne	18a10 <__assert_fail@plt+0x6b7c>
   189a8:	mov	r7, r5
   189ac:	tst	r0, #512	; 0x200
   189b0:	ldr	r6, [r7, #36]!	; 0x24
   189b4:	bne	18a5c <__assert_fail@plt+0x6bc8>
   189b8:	mov	r0, r6
   189bc:	bl	11dd4 <fchdir@plt>
   189c0:	cmp	r0, #0
   189c4:	beq	18a88 <__assert_fail@plt+0x6bf4>
   189c8:	bl	11ca8 <__errno_location@plt>
   189cc:	ldr	r0, [r0]
   189d0:	str	r0, [r5, #32]
   189d4:	ldr	r0, [r4, #48]	; 0x30
   189d8:	orr	r0, r0, #8192	; 0x2000
   189dc:	str	r0, [r4, #48]	; 0x30
   189e0:	b	18a88 <__assert_fail@plt+0x6bf4>
   189e4:	mov	r1, #32768	; 0x8000
   189e8:	tst	r0, #512	; 0x200
   189ec:	and	r1, r1, r0, lsl #11
   189f0:	orr	r1, r1, #18688	; 0x4900
   189f4:	orr	r2, r1, #524288	; 0x80000
   189f8:	bne	18a18 <__assert_fail@plt+0x6b84>
   189fc:	movw	r0, #27936	; 0x6d20
   18a00:	mov	r1, r2
   18a04:	movt	r0, #3
   18a08:	bl	34b7c <__assert_fail@plt+0x22ce8>
   18a0c:	b	18a28 <__assert_fail@plt+0x6b94>
   18a10:	add	r7, r5, #36	; 0x24
   18a14:	b	18a88 <__assert_fail@plt+0x6bf4>
   18a18:	ldr	r0, [r4, #32]
   18a1c:	movw	r1, #27936	; 0x6d20
   18a20:	movt	r1, #3
   18a24:	bl	1d00c <__assert_fail@plt+0xb178>
   18a28:	cmn	r0, #1
   18a2c:	str	r0, [r5, #36]	; 0x24
   18a30:	ble	18a44 <__assert_fail@plt+0x6bb0>
   18a34:	ldrh	r0, [r5, #58]	; 0x3a
   18a38:	orr	r0, r0, #2
   18a3c:	strh	r0, [r5, #58]	; 0x3a
   18a40:	b	18530 <__assert_fail@plt+0x669c>
   18a44:	bl	11ca8 <__errno_location@plt>
   18a48:	ldr	r0, [r0]
   18a4c:	mov	r1, #7
   18a50:	strh	r1, [r5, #56]	; 0x38
   18a54:	str	r0, [r5, #32]
   18a58:	b	18530 <__assert_fail@plt+0x669c>
   18a5c:	ldr	r1, [r4, #32]
   18a60:	cmp	r1, r6
   18a64:	bne	18a70 <__assert_fail@plt+0x6bdc>
   18a68:	cmn	r1, #100	; 0x64
   18a6c:	bne	18ad8 <__assert_fail@plt+0x6c44>
   18a70:	add	r0, r4, #60	; 0x3c
   18a74:	bl	1bc14 <__assert_fail@plt+0x9d80>
   18a78:	cmp	r0, #0
   18a7c:	blt	18a84 <__assert_fail@plt+0x6bf0>
   18a80:	bl	11e70 <close@plt>
   18a84:	str	r6, [r4, #32]
   18a88:	ldr	r0, [r7]
   18a8c:	bl	11e70 <close@plt>
   18a90:	ldrh	r0, [r5, #56]	; 0x38
   18a94:	cmp	r0, #2
   18a98:	beq	18ac0 <__assert_fail@plt+0x6c2c>
   18a9c:	ldr	r0, [r5, #32]
   18aa0:	mov	r1, #7
   18aa4:	cmp	r0, #0
   18aa8:	movweq	r1, #6
   18aac:	strh	r1, [r5, #56]	; 0x38
   18ab0:	bne	18ac0 <__assert_fail@plt+0x6c2c>
   18ab4:	mov	r0, r4
   18ab8:	mov	r1, r5
   18abc:	bl	18adc <__assert_fail@plt+0x6c48>
   18ac0:	ldrb	r0, [r4, #49]	; 0x31
   18ac4:	tst	r0, #32
   18ac8:	movne	r5, #0
   18acc:	mov	r0, r5
   18ad0:	sub	sp, fp, #24
   18ad4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18ad8:	bl	11e58 <abort@plt>
   18adc:	push	{r4, r5, r6, r7, fp, lr}
   18ae0:	add	fp, sp, #16
   18ae4:	sub	sp, sp, #24
   18ae8:	ldrh	r2, [r0, #48]	; 0x30
   18aec:	movw	r3, #258	; 0x102
   18af0:	add	lr, r1, #64	; 0x40
   18af4:	tst	r2, r3
   18af8:	beq	18b30 <__assert_fail@plt+0x6c9c>
   18afc:	ldrd	r2, [lr]
   18b00:	stm	sp, {r2, r3}
   18b04:	ldrd	r2, [r1, #160]	; 0xa0
   18b08:	mov	r1, sp
   18b0c:	str	r3, [sp, #12]
   18b10:	str	r2, [sp, #8]
   18b14:	ldr	r0, [r0, #56]	; 0x38
   18b18:	bl	1ae1c <__assert_fail@plt+0x8f88>
   18b1c:	cmp	r0, #0
   18b20:	beq	18ba8 <__assert_fail@plt+0x6d14>
   18b24:	bl	17754 <__assert_fail@plt+0x58c0>
   18b28:	sub	sp, fp, #16
   18b2c:	pop	{r4, r5, r6, r7, fp, pc}
   18b30:	ldr	r2, [r1, #4]
   18b34:	cmp	r2, #0
   18b38:	beq	18ba0 <__assert_fail@plt+0x6d0c>
   18b3c:	ldr	r3, [r2, #48]	; 0x30
   18b40:	cmp	r3, #0
   18b44:	blt	18ba0 <__assert_fail@plt+0x6d0c>
   18b48:	ldr	ip, [r0, #56]	; 0x38
   18b4c:	ldrd	r4, [ip, #16]
   18b50:	orrs	r3, r4, r5
   18b54:	beq	18ba8 <__assert_fail@plt+0x6d14>
   18b58:	ldrd	r4, [r1, #160]	; 0xa0
   18b5c:	ldrd	r6, [ip]
   18b60:	eor	r1, r7, r5
   18b64:	eor	r3, r6, r4
   18b68:	orrs	r1, r3, r1
   18b6c:	bne	18ba0 <__assert_fail@plt+0x6d0c>
   18b70:	ldr	r1, [ip, #8]!
   18b74:	ldrd	r4, [lr]
   18b78:	ldr	r3, [ip, #4]
   18b7c:	eor	r1, r1, r4
   18b80:	eor	r3, r3, r5
   18b84:	orrs	r1, r1, r3
   18b88:	bne	18ba0 <__assert_fail@plt+0x6d0c>
   18b8c:	ldrd	r4, [r2, #64]	; 0x40
   18b90:	strd	r4, [ip]
   18b94:	ldr	r0, [r0, #56]	; 0x38
   18b98:	ldrd	r2, [r2, #160]	; 0xa0
   18b9c:	strd	r2, [r0]
   18ba0:	sub	sp, fp, #16
   18ba4:	pop	{r4, r5, r6, r7, fp, pc}
   18ba8:	bl	11e58 <abort@plt>
   18bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bb0:	add	fp, sp, #28
   18bb4:	sub	sp, sp, #108	; 0x6c
   18bb8:	mov	r7, r3
   18bbc:	mov	r4, r2
   18bc0:	mov	r8, r1
   18bc4:	mov	sl, r0
   18bc8:	cmp	r3, #0
   18bcc:	beq	18bf0 <__assert_fail@plt+0x6d5c>
   18bd0:	movw	r1, #27935	; 0x6d1f
   18bd4:	mov	r0, r7
   18bd8:	movt	r1, #3
   18bdc:	bl	11a14 <strcmp@plt>
   18be0:	mov	r6, r0
   18be4:	cmp	r0, #0
   18be8:	movwne	r6, #1
   18bec:	b	18bf4 <__assert_fail@plt+0x6d60>
   18bf0:	mov	r6, #1
   18bf4:	ldr	r0, [sl, #48]	; 0x30
   18bf8:	tst	r0, #4
   18bfc:	bne	18c54 <__assert_fail@plt+0x6dc0>
   18c00:	cmn	r4, #1
   18c04:	mov	r1, #0
   18c08:	mov	r9, #0
   18c0c:	movwgt	r1, #1
   18c10:	orrs	r1, r1, r6
   18c14:	bne	18c74 <__assert_fail@plt+0x6de0>
   18c18:	ands	r0, r0, #512	; 0x200
   18c1c:	beq	18c74 <__assert_fail@plt+0x6de0>
   18c20:	add	r4, sl, #60	; 0x3c
   18c24:	mov	r0, r4
   18c28:	bl	1bc0c <__assert_fail@plt+0x9d78>
   18c2c:	cmp	r0, #0
   18c30:	bne	18c7c <__assert_fail@plt+0x6de8>
   18c34:	mov	r0, r4
   18c38:	bl	1bc60 <__assert_fail@plt+0x9dcc>
   18c3c:	cmn	r0, #1
   18c40:	ble	18c7c <__assert_fail@plt+0x6de8>
   18c44:	mov	r4, r0
   18c48:	mov	r9, #0
   18c4c:	mov	r7, #0
   18c50:	b	18cc4 <__assert_fail@plt+0x6e30>
   18c54:	mov	r5, #0
   18c58:	cmp	r4, #0
   18c5c:	blt	18df4 <__assert_fail@plt+0x6f60>
   18c60:	ands	r0, r0, #512	; 0x200
   18c64:	beq	18df4 <__assert_fail@plt+0x6f60>
   18c68:	mov	r0, r4
   18c6c:	bl	11e70 <close@plt>
   18c70:	b	18df4 <__assert_fail@plt+0x6f60>
   18c74:	cmn	r4, #1
   18c78:	bgt	18cc4 <__assert_fail@plt+0x6e30>
   18c7c:	ldr	r0, [sl, #48]	; 0x30
   18c80:	mov	r1, #32768	; 0x8000
   18c84:	and	r1, r1, r0, lsl #11
   18c88:	tst	r0, #512	; 0x200
   18c8c:	orr	r1, r1, #18688	; 0x4900
   18c90:	orr	r2, r1, #524288	; 0x80000
   18c94:	bne	18ca8 <__assert_fail@plt+0x6e14>
   18c98:	mov	r0, r7
   18c9c:	mov	r1, r2
   18ca0:	bl	34b7c <__assert_fail@plt+0x22ce8>
   18ca4:	b	18cb4 <__assert_fail@plt+0x6e20>
   18ca8:	ldr	r0, [sl, #32]
   18cac:	mov	r1, r7
   18cb0:	bl	1d00c <__assert_fail@plt+0xb178>
   18cb4:	mov	r4, r0
   18cb8:	mov	r9, #1
   18cbc:	cmp	r0, #0
   18cc0:	blt	18d98 <__assert_fail@plt+0x6f04>
   18cc4:	ldr	r5, [sl, #48]	; 0x30
   18cc8:	tst	r5, #2
   18ccc:	bne	18d10 <__assert_fail@plt+0x6e7c>
   18cd0:	cmp	r7, #0
   18cd4:	beq	18cf0 <__assert_fail@plt+0x6e5c>
   18cd8:	movw	r1, #27935	; 0x6d1f
   18cdc:	mov	r0, r7
   18ce0:	movt	r1, #3
   18ce4:	bl	11a14 <strcmp@plt>
   18ce8:	cmp	r0, #0
   18cec:	beq	18d10 <__assert_fail@plt+0x6e7c>
   18cf0:	tst	r5, #512	; 0x200
   18cf4:	bne	18d68 <__assert_fail@plt+0x6ed4>
   18cf8:	mov	r0, r4
   18cfc:	bl	11dd4 <fchdir@plt>
   18d00:	mov	r5, r0
   18d04:	cmp	r9, #0
   18d08:	bne	18db8 <__assert_fail@plt+0x6f24>
   18d0c:	b	18df4 <__assert_fail@plt+0x6f60>
   18d10:	mov	r2, sp
   18d14:	mov	r0, #3
   18d18:	mov	r1, r4
   18d1c:	bl	11b4c <__fxstat64@plt>
   18d20:	cmp	r0, #0
   18d24:	bne	18dac <__assert_fail@plt+0x6f18>
   18d28:	ldrd	r0, [r8, #64]	; 0x40
   18d2c:	ldm	sp, {r2, r3}
   18d30:	eor	r1, r1, r3
   18d34:	eor	r0, r0, r2
   18d38:	orrs	r0, r0, r1
   18d3c:	bne	18da0 <__assert_fail@plt+0x6f0c>
   18d40:	ldrd	r0, [r8, #160]	; 0xa0
   18d44:	ldr	r2, [sp, #96]	; 0x60
   18d48:	ldr	r3, [sp, #100]	; 0x64
   18d4c:	eor	r1, r1, r3
   18d50:	eor	r0, r0, r2
   18d54:	orrs	r0, r0, r1
   18d58:	bne	18da0 <__assert_fail@plt+0x6f0c>
   18d5c:	ldr	r5, [sl, #48]	; 0x30
   18d60:	tst	r5, #512	; 0x200
   18d64:	beq	18cf8 <__assert_fail@plt+0x6e64>
   18d68:	ldr	r1, [sl, #32]
   18d6c:	cmp	r1, r4
   18d70:	bne	18d7c <__assert_fail@plt+0x6ee8>
   18d74:	cmn	r1, #100	; 0x64
   18d78:	bne	18e00 <__assert_fail@plt+0x6f6c>
   18d7c:	cmp	r6, #0
   18d80:	beq	18dd4 <__assert_fail@plt+0x6f40>
   18d84:	add	r0, sl, #60	; 0x3c
   18d88:	bl	1bc14 <__assert_fail@plt+0x9d80>
   18d8c:	cmp	r0, #0
   18d90:	bge	18de8 <__assert_fail@plt+0x6f54>
   18d94:	b	18dec <__assert_fail@plt+0x6f58>
   18d98:	mvn	r5, #0
   18d9c:	b	18df4 <__assert_fail@plt+0x6f60>
   18da0:	bl	11ca8 <__errno_location@plt>
   18da4:	mov	r1, #2
   18da8:	str	r1, [r0]
   18dac:	mvn	r5, #0
   18db0:	cmp	r9, #0
   18db4:	beq	18df4 <__assert_fail@plt+0x6f60>
   18db8:	bl	11ca8 <__errno_location@plt>
   18dbc:	ldr	r7, [r0]
   18dc0:	mov	r6, r0
   18dc4:	mov	r0, r4
   18dc8:	bl	11e70 <close@plt>
   18dcc:	str	r7, [r6]
   18dd0:	b	18df4 <__assert_fail@plt+0x6f60>
   18dd4:	tst	r5, #4
   18dd8:	bne	18dec <__assert_fail@plt+0x6f58>
   18ddc:	cmp	r1, #0
   18de0:	blt	18dec <__assert_fail@plt+0x6f58>
   18de4:	mov	r0, r1
   18de8:	bl	11e70 <close@plt>
   18dec:	str	r4, [sl, #32]
   18df0:	mov	r5, #0
   18df4:	mov	r0, r5
   18df8:	sub	sp, fp, #28
   18dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e00:	bl	11e58 <abort@plt>
   18e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e08:	add	fp, sp, #28
   18e0c:	sub	sp, sp, #76	; 0x4c
   18e10:	ldr	sl, [r0]
   18e14:	mov	r8, r1
   18e18:	mov	r5, r0
   18e1c:	str	r0, [sp, #44]	; 0x2c
   18e20:	ldr	r4, [sl, #12]
   18e24:	cmp	r4, #0
   18e28:	beq	18e74 <__assert_fail@plt+0x6fe0>
   18e2c:	mov	r0, r4
   18e30:	bl	11dc8 <dirfd@plt>
   18e34:	cmn	r0, #1
   18e38:	str	r0, [fp, #-32]	; 0xffffffe0
   18e3c:	ble	18eac <__assert_fail@plt+0x7018>
   18e40:	mov	r1, r5
   18e44:	mvn	r2, #0
   18e48:	str	r4, [sp, #16]
   18e4c:	str	r8, [sp, #8]
   18e50:	mov	ip, #0
   18e54:	ldr	r0, [r1, #44]!	; 0x2c
   18e58:	cmp	r0, #0
   18e5c:	str	r1, [sp, #52]	; 0x34
   18e60:	add	r7, r1, #4
   18e64:	movweq	r2, #34464	; 0x86a0
   18e68:	movteq	r2, #1
   18e6c:	str	r2, [sp, #32]
   18e70:	b	19090 <__assert_fail@plt+0x71fc>
   18e74:	mov	r7, r5
   18e78:	mvn	r0, #99	; 0x63
   18e7c:	mov	r2, #0
   18e80:	ldr	r3, [r7, #48]!	; 0x30
   18e84:	and	r1, r3, #516	; 0x204
   18e88:	cmp	r1, #512	; 0x200
   18e8c:	ldr	r1, [sl, #24]
   18e90:	ldreq	r0, [r5, #32]
   18e94:	tst	r3, #16
   18e98:	beq	18ed4 <__assert_fail@plt+0x7040>
   18e9c:	tst	r3, #1
   18ea0:	bne	18ec8 <__assert_fail@plt+0x7034>
   18ea4:	mov	r2, #32768	; 0x8000
   18ea8:	b	18ed4 <__assert_fail@plt+0x7040>
   18eac:	ldr	r0, [sl, #12]
   18eb0:	bl	11e88 <closedir@plt>
   18eb4:	mov	r6, #0
   18eb8:	str	r6, [sl, #12]
   18ebc:	cmp	r8, #3
   18ec0:	beq	18f18 <__assert_fail@plt+0x7084>
   18ec4:	b	197ac <__assert_fail@plt+0x7918>
   18ec8:	ldr	r3, [sl, #48]	; 0x30
   18ecc:	cmp	r3, #0
   18ed0:	movne	r2, #32768	; 0x8000
   18ed4:	sub	r3, fp, #32
   18ed8:	bl	1d050 <__assert_fail@plt+0xb1bc>
   18edc:	cmp	r0, #0
   18ee0:	str	r0, [sl, #12]
   18ee4:	beq	18f0c <__assert_fail@plt+0x7078>
   18ee8:	ldrh	r0, [sl, #56]	; 0x38
   18eec:	cmp	r0, #11
   18ef0:	bne	18f30 <__assert_fail@plt+0x709c>
   18ef4:	mov	r0, r5
   18ef8:	mov	r1, sl
   18efc:	mov	r2, #0
   18f00:	bl	17f44 <__assert_fail@plt+0x60b0>
   18f04:	strh	r0, [sl, #56]	; 0x38
   18f08:	b	18f70 <__assert_fail@plt+0x70dc>
   18f0c:	mov	r6, #0
   18f10:	cmp	r8, #3
   18f14:	bne	197ac <__assert_fail@plt+0x7918>
   18f18:	mov	r0, #4
   18f1c:	strh	r0, [sl, #56]	; 0x38
   18f20:	bl	11ca8 <__errno_location@plt>
   18f24:	ldr	r0, [r0]
   18f28:	str	r0, [sl, #32]
   18f2c:	b	197ac <__assert_fail@plt+0x7918>
   18f30:	ldrb	r0, [r7, #1]
   18f34:	tst	r0, #1
   18f38:	beq	18f70 <__assert_fail@plt+0x70dc>
   18f3c:	mov	r0, r5
   18f40:	mov	r1, sl
   18f44:	bl	18adc <__assert_fail@plt+0x6c48>
   18f48:	mov	r0, r5
   18f4c:	mov	r1, sl
   18f50:	mov	r2, #0
   18f54:	mov	r6, #0
   18f58:	bl	17f44 <__assert_fail@plt+0x60b0>
   18f5c:	mov	r0, r5
   18f60:	mov	r1, sl
   18f64:	bl	19948 <__assert_fail@plt+0x7ab4>
   18f68:	cmp	r0, #0
   18f6c:	beq	19718 <__assert_fail@plt+0x7884>
   18f70:	mov	r1, r5
   18f74:	str	r8, [sp, #8]
   18f78:	str	r4, [sp, #16]
   18f7c:	ldr	r0, [r1, #44]!	; 0x2c
   18f80:	str	r1, [sp, #52]	; 0x34
   18f84:	mvn	r1, #0
   18f88:	cmp	r0, #0
   18f8c:	movweq	r1, #34464	; 0x86a0
   18f90:	movteq	r1, #1
   18f94:	cmp	r8, #2
   18f98:	str	r1, [sp, #32]
   18f9c:	bne	18fb8 <__assert_fail@plt+0x7124>
   18fa0:	mov	ip, #1
   18fa4:	cmp	r8, #3
   18fa8:	bne	19090 <__assert_fail@plt+0x71fc>
   18fac:	sub	r0, r8, #3
   18fb0:	mov	r5, #0
   18fb4:	b	18fd8 <__assert_fail@plt+0x7144>
   18fb8:	ldr	r0, [r7]
   18fbc:	and	r0, r0, #56	; 0x38
   18fc0:	cmp	r0, #24
   18fc4:	ldreq	r0, [sl, #84]	; 0x54
   18fc8:	cmpeq	r0, #2
   18fcc:	beq	19860 <__assert_fail@plt+0x79cc>
   18fd0:	sub	r0, r8, #3
   18fd4:	mov	r5, #1
   18fd8:	clz	r0, r0
   18fdc:	lsr	r6, r0, #5
   18fe0:	ldrb	r0, [r7, #1]
   18fe4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18fe8:	tst	r0, #2
   18fec:	beq	19008 <__assert_fail@plt+0x7174>
   18ff0:	mov	r0, r2
   18ff4:	movw	r1, #1030	; 0x406
   18ff8:	mov	r2, #3
   18ffc:	bl	3499c <__assert_fail@plt+0x22b08>
   19000:	mov	r2, r0
   19004:	str	r0, [fp, #-32]	; 0xffffffe0
   19008:	cmp	r2, #0
   1900c:	blt	19028 <__assert_fail@plt+0x7194>
   19010:	ldr	r0, [sp, #44]	; 0x2c
   19014:	mov	r1, sl
   19018:	mov	r3, #0
   1901c:	bl	18bac <__assert_fail@plt+0x6d18>
   19020:	cmp	r0, #0
   19024:	beq	19088 <__assert_fail@plt+0x71f4>
   19028:	and	r0, r6, r5
   1902c:	cmp	r0, #1
   19030:	bne	19040 <__assert_fail@plt+0x71ac>
   19034:	bl	11ca8 <__errno_location@plt>
   19038:	ldr	r0, [r0]
   1903c:	str	r0, [sl, #32]
   19040:	ldrh	r0, [sl, #58]	; 0x3a
   19044:	orr	r0, r0, #1
   19048:	strh	r0, [sl, #58]	; 0x3a
   1904c:	ldr	r0, [sl, #12]
   19050:	bl	11e88 <closedir@plt>
   19054:	mov	r4, #0
   19058:	ldr	r5, [sp, #44]	; 0x2c
   1905c:	str	r4, [sl, #12]
   19060:	ldr	r0, [r7]
   19064:	tst	r0, #512	; 0x200
   19068:	beq	1907c <__assert_fail@plt+0x71e8>
   1906c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19070:	cmp	r0, #0
   19074:	blt	1907c <__assert_fail@plt+0x71e8>
   19078:	bl	11e70 <close@plt>
   1907c:	mov	ip, #1
   19080:	str	r4, [sl, #12]
   19084:	b	19090 <__assert_fail@plt+0x71fc>
   19088:	ldr	r5, [sp, #44]	; 0x2c
   1908c:	mov	ip, #0
   19090:	ldr	r0, [sl, #40]	; 0x28
   19094:	ldr	r1, [sl, #28]
   19098:	mov	r9, #0
   1909c:	sub	r2, r0, #1
   190a0:	ldrb	r1, [r1, r2]
   190a4:	cmp	r1, #47	; 0x2f
   190a8:	ldrb	r1, [r7]
   190ac:	moveq	r0, r2
   190b0:	tst	r1, #4
   190b4:	mov	r1, #0
   190b8:	str	r1, [sp, #40]	; 0x28
   190bc:	beq	190d4 <__assert_fail@plt+0x7240>
   190c0:	ldr	r1, [r5, #24]
   190c4:	mov	r2, #47	; 0x2f
   190c8:	strb	r2, [r1, r0]!
   190cc:	add	r1, r1, #1
   190d0:	str	r1, [sp, #40]	; 0x28
   190d4:	ldr	r6, [sl, #12]
   190d8:	add	r1, r0, #1
   190dc:	str	r1, [fp, #-48]	; 0xffffffd0
   190e0:	cmp	r6, #0
   190e4:	beq	1945c <__assert_fail@plt+0x75c8>
   190e8:	ldr	r0, [sl, #48]	; 0x30
   190ec:	str	r7, [fp, #-36]	; 0xffffffdc
   190f0:	str	ip, [sp, #4]
   190f4:	mov	r7, #0
   190f8:	add	r0, r0, #1
   190fc:	str	r0, [sp, #24]
   19100:	ldr	r0, [r5, #36]	; 0x24
   19104:	sub	r0, r0, r1
   19108:	str	r0, [fp, #-44]	; 0xffffffd4
   1910c:	bl	11ca8 <__errno_location@plt>
   19110:	str	r0, [sp, #36]	; 0x24
   19114:	mov	r0, #0
   19118:	mov	r9, #0
   1911c:	mov	r4, #0
   19120:	str	sl, [sp, #28]
   19124:	str	r0, [sp, #48]	; 0x30
   19128:	mov	r0, #0
   1912c:	str	r0, [sp, #12]
   19130:	mov	r0, #0
   19134:	str	r0, [sp, #20]
   19138:	ldr	r0, [sp, #36]	; 0x24
   1913c:	str	r7, [r0]
   19140:	mov	r0, r6
   19144:	bl	11da4 <readdir64@plt>
   19148:	cmp	r0, #0
   1914c:	beq	195b0 <__assert_fail@plt+0x771c>
   19150:	mov	r8, r0
   19154:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19158:	str	r4, [fp, #-40]	; 0xffffffd8
   1915c:	add	r4, r8, #19
   19160:	ldrb	r0, [r0]
   19164:	tst	r0, #32
   19168:	ldrbeq	r0, [r4]
   1916c:	cmpeq	r0, #46	; 0x2e
   19170:	beq	1926c <__assert_fail@plt+0x73d8>
   19174:	mov	r0, r4
   19178:	bl	11c78 <strlen@plt>
   1917c:	mov	r5, r0
   19180:	add	r0, r0, #176	; 0xb0
   19184:	bic	r0, r0, #7
   19188:	bl	33c98 <__assert_fail@plt+0x21e04>
   1918c:	mov	r6, r0
   19190:	cmp	r0, #0
   19194:	beq	1973c <__assert_fail@plt+0x78a8>
   19198:	add	sl, r6, #168	; 0xa8
   1919c:	mov	r1, r4
   191a0:	mov	r2, r5
   191a4:	mov	r0, sl
   191a8:	bl	11a8c <memcpy@plt>
   191ac:	ldr	r2, [sp, #44]	; 0x2c
   191b0:	mov	r0, #0
   191b4:	mov	r1, #196608	; 0x30000
   191b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   191bc:	strb	r0, [sl, r5]
   191c0:	str	r5, [r6, #52]	; 0x34
   191c4:	str	r2, [r6, #44]	; 0x2c
   191c8:	add	r7, r5, r3
   191cc:	ldr	r4, [r2, #24]
   191d0:	str	r1, [r6, #58]	; 0x3a
   191d4:	str	r0, [r6, #12]
   191d8:	str	r0, [r6, #16]
   191dc:	str	r0, [r6, #20]
   191e0:	str	r4, [r6, #28]
   191e4:	str	r0, [r6, #32]
   191e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   191ec:	cmp	r5, r0
   191f0:	bcs	19208 <__assert_fail@plt+0x7374>
   191f4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   191f8:	mov	r5, r2
   191fc:	cmp	r7, r3
   19200:	bcs	192ac <__assert_fail@plt+0x7418>
   19204:	b	19614 <__assert_fail@plt+0x7780>
   19208:	ldr	r1, [r2, #36]	; 0x24
   1920c:	movw	r0, #257	; 0x101
   19210:	mov	r5, r2
   19214:	add	r0, r7, r0
   19218:	adds	r1, r0, r1
   1921c:	bcs	196f8 <__assert_fail@plt+0x7864>
   19220:	mov	r0, r4
   19224:	str	r1, [r5, #36]	; 0x24
   19228:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1922c:	cmp	r0, #0
   19230:	beq	19728 <__assert_fail@plt+0x7894>
   19234:	cmp	r0, r4
   19238:	str	r0, [r5, #24]
   1923c:	beq	19294 <__assert_fail@plt+0x7400>
   19240:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19244:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19248:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1924c:	ldrb	r1, [r1]
   19250:	tst	r1, #4
   19254:	ldr	r1, [sp, #40]	; 0x28
   19258:	addne	r1, r0, r3
   1925c:	mov	r0, #1
   19260:	str	r1, [sp, #40]	; 0x28
   19264:	str	r0, [sp, #20]
   19268:	b	1929c <__assert_fail@plt+0x7408>
   1926c:	ldrb	r0, [r8, #20]
   19270:	cmp	r0, #0
   19274:	beq	19288 <__assert_fail@plt+0x73f4>
   19278:	cmp	r0, #46	; 0x2e
   1927c:	ldrbeq	r0, [r8, #21]
   19280:	cmpeq	r0, #0
   19284:	bne	19174 <__assert_fail@plt+0x72e0>
   19288:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1928c:	mov	r7, #0
   19290:	b	19440 <__assert_fail@plt+0x75ac>
   19294:	ldr	r4, [fp, #-40]	; 0xffffffd8
   19298:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1929c:	ldr	r0, [r5, #36]	; 0x24
   192a0:	sub	r0, r0, r3
   192a4:	cmp	r7, r3
   192a8:	bcc	19614 <__assert_fail@plt+0x7780>
   192ac:	str	r0, [fp, #-44]	; 0xffffffd4
   192b0:	ldr	r0, [sp, #24]
   192b4:	str	r0, [r6, #48]	; 0x30
   192b8:	ldr	r0, [r5]
   192bc:	str	r7, [r6, #40]	; 0x28
   192c0:	str	r0, [r6, #4]
   192c4:	ldrd	r0, [r8]
   192c8:	strd	r0, [r6, #160]	; 0xa0
   192cc:	ldrb	r0, [r5, #48]	; 0x30
   192d0:	tst	r0, #4
   192d4:	bne	192e0 <__assert_fail@plt+0x744c>
   192d8:	str	sl, [r6, #24]
   192dc:	b	192fc <__assert_fail@plt+0x7468>
   192e0:	ldr	r0, [r6, #28]
   192e4:	ldr	r1, [r6, #52]	; 0x34
   192e8:	str	r0, [r6, #24]
   192ec:	ldr	r0, [sp, #40]	; 0x28
   192f0:	add	r2, r1, #1
   192f4:	mov	r1, sl
   192f8:	bl	11a50 <memmove@plt>
   192fc:	ldr	r0, [sp, #52]	; 0x34
   19300:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19304:	ldr	sl, [sp, #28]
   19308:	ldr	r0, [r0]
   1930c:	ldr	r2, [r1]
   19310:	cmp	r0, #0
   19314:	beq	1933c <__assert_fail@plt+0x74a8>
   19318:	ands	r0, r2, #1024	; 0x400
   1931c:	bne	1933c <__assert_fail@plt+0x74a8>
   19320:	mov	r0, r5
   19324:	mov	r1, r6
   19328:	mov	r2, #0
   1932c:	bl	17f44 <__assert_fail@plt+0x60b0>
   19330:	mov	r7, #0
   19334:	strh	r0, [r6, #56]	; 0x38
   19338:	b	193b0 <__assert_fail@plt+0x751c>
   1933c:	ldrb	r3, [r8, #18]
   19340:	mov	r0, #0
   19344:	tst	r2, #8
   19348:	mov	r1, #0
   1934c:	beq	19370 <__assert_fail@plt+0x74dc>
   19350:	orr	r1, r3, #4
   19354:	cmp	r1, #4
   19358:	mov	r1, #0
   1935c:	beq	19370 <__assert_fail@plt+0x74dc>
   19360:	eor	r1, r3, #10
   19364:	and	r2, r2, #16
   19368:	orrs	r1, r2, r1
   1936c:	movwne	r1, #1
   19370:	mov	r2, #11
   19374:	mov	r7, #0
   19378:	strh	r2, [r6, #56]	; 0x38
   1937c:	sub	r2, r3, #1
   19380:	uxtb	r3, r2
   19384:	cmp	r3, #11
   19388:	sxtbls	r0, r2
   1938c:	movwls	r2, #27952	; 0x6d30
   19390:	movtls	r2, #3
   19394:	ldrls	r0, [r2, r0, lsl #2]
   19398:	cmp	r1, #0
   1939c:	str	r0, [r6, #80]	; 0x50
   193a0:	mov	r0, #2
   193a4:	movwne	r0, #1
   193a8:	str	r0, [r6, #112]	; 0x70
   193ac:	str	r7, [r6, #116]	; 0x74
   193b0:	cmp	r9, #0
   193b4:	str	r7, [r6, #8]
   193b8:	ldrne	r0, [sp, #48]	; 0x30
   193bc:	moveq	r9, r6
   193c0:	strne	r6, [r0, #8]
   193c4:	movw	r0, #10000	; 0x2710
   193c8:	cmp	r4, r0
   193cc:	bne	19420 <__assert_fail@plt+0x758c>
   193d0:	ldr	r0, [sp, #52]	; 0x34
   193d4:	ldr	r0, [r0]
   193d8:	cmp	r0, #0
   193dc:	bne	19420 <__assert_fail@plt+0x758c>
   193e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   193e4:	mov	r0, sl
   193e8:	bl	19ca8 <__assert_fail@plt+0x7e14>
   193ec:	mov	r1, #0
   193f0:	str	r1, [sp, #12]
   193f4:	movw	r1, #19778	; 0x4d42
   193f8:	movt	r1, #65363	; 0xff53
   193fc:	cmp	r0, r1
   19400:	movwne	r1, #26985	; 0x6969
   19404:	cmpne	r0, r1
   19408:	beq	19420 <__assert_fail@plt+0x758c>
   1940c:	movw	r1, #6548	; 0x1994
   19410:	movt	r1, #258	; 0x102
   19414:	cmp	r0, r1
   19418:	movne	r0, #1
   1941c:	strne	r0, [sp, #12]
   19420:	ldr	r0, [sp, #32]
   19424:	add	r4, r4, #1
   19428:	cmp	r0, r4
   1942c:	mov	r0, #0
   19430:	movwls	r0, #15
   19434:	cmp	r0, #0
   19438:	bne	19688 <__assert_fail@plt+0x77f4>
   1943c:	str	r6, [sp, #48]	; 0x30
   19440:	ldr	r6, [sl, #12]
   19444:	cmp	r6, #0
   19448:	bne	19138 <__assert_fail@plt+0x72a4>
   1944c:	ldr	r0, [sp, #20]
   19450:	ldr	ip, [sp, #4]
   19454:	ldr	r6, [sp, #12]
   19458:	b	195fc <__assert_fail@plt+0x7768>
   1945c:	mov	r4, #0
   19460:	mov	r6, #0
   19464:	ldrb	r0, [r7]
   19468:	tst	r0, #4
   1946c:	beq	19498 <__assert_fail@plt+0x7604>
   19470:	ldr	r2, [sp, #40]	; 0x28
   19474:	ldr	r0, [r5, #36]	; 0x24
   19478:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1947c:	cmp	r3, r0
   19480:	sub	r1, r2, #1
   19484:	mov	r0, #0
   19488:	moveq	r2, r1
   1948c:	cmp	r4, #0
   19490:	moveq	r2, r1
   19494:	strb	r0, [r2]
   19498:	ldr	r0, [sp, #16]
   1949c:	cmp	r0, #0
   194a0:	movwne	r0, #1
   194a4:	orrs	r0, r0, ip
   194a8:	beq	1950c <__assert_fail@plt+0x7678>
   194ac:	cmp	r4, #0
   194b0:	bne	1954c <__assert_fail@plt+0x76b8>
   194b4:	ldr	r0, [sp, #8]
   194b8:	cmp	r0, #3
   194bc:	bne	194d4 <__assert_fail@plt+0x7640>
   194c0:	ldrh	r0, [sl, #56]	; 0x38
   194c4:	cmp	r0, #4
   194c8:	cmpne	r0, #7
   194cc:	movne	r0, #6
   194d0:	strhne	r0, [sl, #56]	; 0x38
   194d4:	mov	r6, #0
   194d8:	cmp	r9, #0
   194dc:	beq	197ac <__assert_fail@plt+0x7918>
   194e0:	ldrd	r4, [r9, #8]
   194e4:	cmp	r5, #0
   194e8:	beq	194f4 <__assert_fail@plt+0x7660>
   194ec:	mov	r0, r5
   194f0:	bl	11e88 <closedir@plt>
   194f4:	mov	r0, r9
   194f8:	bl	17754 <__assert_fail@plt+0x58c0>
   194fc:	cmp	r4, #0
   19500:	mov	r9, r4
   19504:	bne	194e0 <__assert_fail@plt+0x764c>
   19508:	b	197ac <__assert_fail@plt+0x7918>
   1950c:	ldr	r0, [sp, #8]
   19510:	cmp	r0, #1
   19514:	cmpne	r4, #0
   19518:	bne	1954c <__assert_fail@plt+0x76b8>
   1951c:	ldr	r0, [sl, #48]	; 0x30
   19520:	cmp	r0, #0
   19524:	beq	1969c <__assert_fail@plt+0x7808>
   19528:	ldr	r1, [sl, #4]
   1952c:	movw	r3, #27935	; 0x6d1f
   19530:	mov	r0, r5
   19534:	mvn	r2, #0
   19538:	movt	r3, #3
   1953c:	bl	18bac <__assert_fail@plt+0x6d18>
   19540:	cmp	r0, #0
   19544:	bne	196ac <__assert_fail@plt+0x7818>
   19548:	b	194ac <__assert_fail@plt+0x7618>
   1954c:	tst	r6, #1
   19550:	beq	19580 <__assert_fail@plt+0x76ec>
   19554:	movw	r0, #40048	; 0x9c70
   19558:	mov	r1, r9
   1955c:	mov	r2, r4
   19560:	movt	r0, #1
   19564:	str	r0, [r5, #44]	; 0x2c
   19568:	mov	r0, r5
   1956c:	bl	180dc <__assert_fail@plt+0x6248>
   19570:	mov	r6, r0
   19574:	mov	r0, #0
   19578:	str	r0, [r5, #44]	; 0x2c
   1957c:	b	197ac <__assert_fail@plt+0x7918>
   19580:	cmp	r4, #2
   19584:	bcc	1960c <__assert_fail@plt+0x7778>
   19588:	ldr	r0, [sp, #52]	; 0x34
   1958c:	ldr	r0, [r0]
   19590:	cmp	r0, #0
   19594:	beq	1960c <__assert_fail@plt+0x7778>
   19598:	mov	r0, r5
   1959c:	mov	r1, r9
   195a0:	mov	r2, r4
   195a4:	bl	180dc <__assert_fail@plt+0x6248>
   195a8:	mov	r6, r0
   195ac:	b	197ac <__assert_fail@plt+0x7918>
   195b0:	ldr	r0, [sp, #36]	; 0x24
   195b4:	ldr	r0, [r0]
   195b8:	cmp	r0, #0
   195bc:	beq	195d8 <__assert_fail@plt+0x7744>
   195c0:	str	r0, [sl, #32]
   195c4:	ldr	r0, [sp, #16]
   195c8:	orrs	r0, r0, r4
   195cc:	mov	r0, #4
   195d0:	movwne	r0, #7
   195d4:	strh	r0, [sl, #56]	; 0x38
   195d8:	ldr	r0, [sl, #12]
   195dc:	ldr	r6, [sp, #12]
   195e0:	cmp	r0, #0
   195e4:	beq	197c0 <__assert_fail@plt+0x792c>
   195e8:	bl	11e88 <closedir@plt>
   195ec:	mov	r0, #0
   195f0:	ldr	ip, [sp, #4]
   195f4:	str	r0, [sl, #12]
   195f8:	ldr	r0, [sp, #20]
   195fc:	tst	r0, #1
   19600:	ldr	r7, [fp, #-36]	; 0xffffffdc
   19604:	beq	19464 <__assert_fail@plt+0x75d0>
   19608:	b	197d4 <__assert_fail@plt+0x7940>
   1960c:	mov	r6, r9
   19610:	b	197ac <__assert_fail@plt+0x7918>
   19614:	mov	r0, r6
   19618:	bl	17754 <__assert_fail@plt+0x58c0>
   1961c:	ldr	r7, [sp, #28]
   19620:	cmp	r9, #0
   19624:	beq	19650 <__assert_fail@plt+0x77bc>
   19628:	ldrd	r4, [r9, #8]
   1962c:	cmp	r5, #0
   19630:	beq	1963c <__assert_fail@plt+0x77a8>
   19634:	mov	r0, r5
   19638:	bl	11e88 <closedir@plt>
   1963c:	mov	r0, r9
   19640:	bl	17754 <__assert_fail@plt+0x58c0>
   19644:	cmp	r4, #0
   19648:	mov	r9, r4
   1964c:	bne	19628 <__assert_fail@plt+0x7794>
   19650:	ldr	r0, [r7, #12]
   19654:	bl	11e88 <closedir@plt>
   19658:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1965c:	mov	r6, #0
   19660:	mov	r0, #7
   19664:	str	r6, [r7, #12]
   19668:	strh	r0, [r7, #56]	; 0x38
   1966c:	ldr	r0, [r1]
   19670:	orr	r0, r0, #8192	; 0x2000
   19674:	str	r0, [r1]
   19678:	ldr	r1, [sp, #36]	; 0x24
   1967c:	mov	r0, #36	; 0x24
   19680:	str	r0, [r1]
   19684:	b	197ac <__assert_fail@plt+0x7918>
   19688:	ldr	ip, [sp, #4]
   1968c:	cmp	r0, #15
   19690:	bne	197b8 <__assert_fail@plt+0x7924>
   19694:	ldr	r6, [sp, #12]
   19698:	b	197c4 <__assert_fail@plt+0x7930>
   1969c:	mov	r0, r5
   196a0:	bl	198b8 <__assert_fail@plt+0x7a24>
   196a4:	cmp	r0, #0
   196a8:	beq	194ac <__assert_fail@plt+0x7618>
   196ac:	mov	r0, #7
   196b0:	mov	r6, #0
   196b4:	cmp	r9, #0
   196b8:	strh	r0, [sl, #56]	; 0x38
   196bc:	ldr	r0, [r7]
   196c0:	orr	r0, r0, #8192	; 0x2000
   196c4:	str	r0, [r7]
   196c8:	beq	197ac <__assert_fail@plt+0x7918>
   196cc:	ldrd	r4, [r9, #8]
   196d0:	cmp	r5, #0
   196d4:	beq	196e0 <__assert_fail@plt+0x784c>
   196d8:	mov	r0, r5
   196dc:	bl	11e88 <closedir@plt>
   196e0:	mov	r0, r9
   196e4:	bl	17754 <__assert_fail@plt+0x58c0>
   196e8:	cmp	r4, #0
   196ec:	mov	r9, r4
   196f0:	bne	196cc <__assert_fail@plt+0x7838>
   196f4:	b	197ac <__assert_fail@plt+0x7918>
   196f8:	mov	r0, r4
   196fc:	bl	17754 <__assert_fail@plt+0x58c0>
   19700:	ldr	r1, [sp, #36]	; 0x24
   19704:	mov	r0, #0
   19708:	str	r0, [r5, #24]
   1970c:	mov	r0, #36	; 0x24
   19710:	str	r0, [r1]
   19714:	b	19738 <__assert_fail@plt+0x78a4>
   19718:	bl	11ca8 <__errno_location@plt>
   1971c:	mov	r1, #12
   19720:	str	r1, [r0]
   19724:	b	197ac <__assert_fail@plt+0x7918>
   19728:	ldr	r0, [r5, #24]
   1972c:	bl	17754 <__assert_fail@plt+0x58c0>
   19730:	mov	r0, #0
   19734:	str	r0, [r5, #24]
   19738:	ldr	sl, [sp, #28]
   1973c:	ldr	r0, [sp, #36]	; 0x24
   19740:	ldr	r4, [r0]
   19744:	mov	r0, r6
   19748:	bl	17754 <__assert_fail@plt+0x58c0>
   1974c:	cmp	r9, #0
   19750:	beq	1977c <__assert_fail@plt+0x78e8>
   19754:	ldrd	r6, [r9, #8]
   19758:	cmp	r7, #0
   1975c:	beq	19768 <__assert_fail@plt+0x78d4>
   19760:	mov	r0, r7
   19764:	bl	11e88 <closedir@plt>
   19768:	mov	r0, r9
   1976c:	bl	17754 <__assert_fail@plt+0x58c0>
   19770:	cmp	r6, #0
   19774:	mov	r9, r6
   19778:	bne	19754 <__assert_fail@plt+0x78c0>
   1977c:	ldr	r0, [sl, #12]
   19780:	bl	11e88 <closedir@plt>
   19784:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19788:	mov	r6, #0
   1978c:	mov	r0, #7
   19790:	str	r6, [sl, #12]
   19794:	strh	r0, [sl, #56]	; 0x38
   19798:	ldr	r0, [r1]
   1979c:	orr	r0, r0, #8192	; 0x2000
   197a0:	str	r0, [r1]
   197a4:	ldr	r0, [sp, #36]	; 0x24
   197a8:	str	r4, [r0]
   197ac:	mov	r0, r6
   197b0:	sub	sp, fp, #28
   197b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197b8:	mov	r6, #0
   197bc:	b	197ac <__assert_fail@plt+0x7918>
   197c0:	ldr	ip, [sp, #4]
   197c4:	ldr	r0, [sp, #20]
   197c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   197cc:	tst	r0, #1
   197d0:	beq	19464 <__assert_fail@plt+0x75d0>
   197d4:	ldr	r1, [r5, #4]
   197d8:	ldr	r0, [r5, #24]
   197dc:	cmp	r1, #0
   197e0:	beq	19810 <__assert_fail@plt+0x797c>
   197e4:	ldr	r2, [r1, #24]
   197e8:	add	r3, r1, #168	; 0xa8
   197ec:	cmp	r2, r3
   197f0:	ldrne	r3, [r1, #28]
   197f4:	subne	r2, r2, r3
   197f8:	addne	r2, r0, r2
   197fc:	strne	r2, [r1, #24]
   19800:	str	r0, [r1, #28]
   19804:	ldr	r1, [r1, #8]
   19808:	cmp	r1, #0
   1980c:	bne	197e4 <__assert_fail@plt+0x7950>
   19810:	ldr	r1, [r9, #48]	; 0x30
   19814:	cmp	r1, #0
   19818:	blt	19464 <__assert_fail@plt+0x75d0>
   1981c:	mov	r1, r9
   19820:	ldr	r2, [r1, #24]
   19824:	add	r3, r1, #168	; 0xa8
   19828:	cmp	r2, r3
   1982c:	ldrne	r3, [r1, #28]
   19830:	subne	r2, r2, r3
   19834:	addne	r2, r0, r2
   19838:	strne	r2, [r1, #24]
   1983c:	str	r0, [r1, #28]
   19840:	ldr	r2, [r1, #8]
   19844:	cmp	r2, #0
   19848:	ldreq	r2, [r1, #4]
   1984c:	ldr	r1, [r2, #48]	; 0x30
   19850:	cmn	r1, #1
   19854:	mov	r1, r2
   19858:	bgt	19820 <__assert_fail@plt+0x798c>
   1985c:	b	19464 <__assert_fail@plt+0x75d0>
   19860:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19864:	mov	r0, sl
   19868:	bl	19ca8 <__assert_fail@plt+0x7e14>
   1986c:	movw	r1, #26984	; 0x6968
   19870:	cmp	r0, r1
   19874:	ble	198a0 <__assert_fail@plt+0x7a0c>
   19878:	movw	r1, #26985	; 0x6969
   1987c:	cmp	r0, r1
   19880:	movwne	r1, #16719	; 0x414f
   19884:	movtne	r1, #21318	; 0x5346
   19888:	cmpne	r0, r1
   1988c:	beq	18fd0 <__assert_fail@plt+0x713c>
   19890:	movw	r1, #40864	; 0x9fa0
   19894:	cmp	r0, r1
   19898:	beq	18fd0 <__assert_fail@plt+0x713c>
   1989c:	b	18fa0 <__assert_fail@plt+0x710c>
   198a0:	movw	r1, #19778	; 0x4d42
   198a4:	movt	r1, #65363	; 0xff53
   198a8:	cmp	r0, r1
   198ac:	cmpne	r0, #0
   198b0:	beq	18fd0 <__assert_fail@plt+0x713c>
   198b4:	b	18fa0 <__assert_fail@plt+0x710c>
   198b8:	push	{r4, r5, fp, lr}
   198bc:	add	fp, sp, #8
   198c0:	mov	r5, r0
   198c4:	ldr	r0, [r0, #48]	; 0x30
   198c8:	mov	r4, #0
   198cc:	tst	r0, #4
   198d0:	bne	19914 <__assert_fail@plt+0x7a80>
   198d4:	tst	r0, #512	; 0x200
   198d8:	bne	198f4 <__assert_fail@plt+0x7a60>
   198dc:	ldr	r0, [r5, #28]
   198e0:	bl	11dd4 <fchdir@plt>
   198e4:	mov	r4, r0
   198e8:	cmp	r0, #0
   198ec:	movwne	r4, #1
   198f0:	b	19914 <__assert_fail@plt+0x7a80>
   198f4:	ldr	r1, [r5, #32]
   198f8:	add	r0, r5, #60	; 0x3c
   198fc:	bl	1bc14 <__assert_fail@plt+0x9d80>
   19900:	cmp	r0, #0
   19904:	blt	1990c <__assert_fail@plt+0x7a78>
   19908:	bl	11e70 <close@plt>
   1990c:	mvn	r0, #99	; 0x63
   19910:	str	r0, [r5, #32]
   19914:	add	r5, r5, #60	; 0x3c
   19918:	b	19920 <__assert_fail@plt+0x7a8c>
   1991c:	bl	11e70 <close@plt>
   19920:	mov	r0, r5
   19924:	bl	1bc0c <__assert_fail@plt+0x9d78>
   19928:	cmp	r0, #0
   1992c:	movne	r0, r4
   19930:	popne	{r4, r5, fp, pc}
   19934:	mov	r0, r5
   19938:	bl	1bc60 <__assert_fail@plt+0x9dcc>
   1993c:	cmp	r0, #0
   19940:	bge	1991c <__assert_fail@plt+0x7a88>
   19944:	b	19920 <__assert_fail@plt+0x7a8c>
   19948:	push	{r4, r5, r6, r7, fp, lr}
   1994c:	add	fp, sp, #16
   19950:	mov	r6, r0
   19954:	ldrh	r0, [r0, #48]	; 0x30
   19958:	mov	r4, r1
   1995c:	movw	r1, #258	; 0x102
   19960:	tst	r0, r1
   19964:	beq	199d8 <__assert_fail@plt+0x7b44>
   19968:	mov	r0, #24
   1996c:	bl	33c98 <__assert_fail@plt+0x21e04>
   19970:	mov	r5, #0
   19974:	cmp	r0, #0
   19978:	beq	199f8 <__assert_fail@plt+0x7b64>
   1997c:	mov	r7, r0
   19980:	ldrd	r0, [r4, #64]	; 0x40
   19984:	add	r2, r7, #8
   19988:	stm	r7, {r0, r1}
   1998c:	ldrd	r0, [r4, #160]	; 0xa0
   19990:	stm	r2, {r0, r1, r4}
   19994:	mov	r1, r7
   19998:	ldr	r0, [r6, #56]	; 0x38
   1999c:	bl	1addc <__assert_fail@plt+0x8f48>
   199a0:	cmp	r0, r7
   199a4:	beq	199cc <__assert_fail@plt+0x7b38>
   199a8:	mov	r6, r0
   199ac:	mov	r0, r7
   199b0:	bl	17754 <__assert_fail@plt+0x58c0>
   199b4:	cmp	r6, #0
   199b8:	beq	199f8 <__assert_fail@plt+0x7b64>
   199bc:	ldr	r0, [r6, #16]
   199c0:	mov	r1, #2
   199c4:	strh	r1, [r4, #56]	; 0x38
   199c8:	str	r0, [r4]
   199cc:	mov	r5, #1
   199d0:	mov	r0, r5
   199d4:	pop	{r4, r5, r6, r7, fp, pc}
   199d8:	ldr	r0, [r6, #56]	; 0x38
   199dc:	add	r1, r4, #64	; 0x40
   199e0:	bl	34804 <__assert_fail@plt+0x22970>
   199e4:	cmp	r0, #0
   199e8:	mov	r5, #1
   199ec:	movne	r0, #2
   199f0:	strhne	r0, [r4, #56]	; 0x38
   199f4:	strne	r4, [r4]
   199f8:	mov	r0, r5
   199fc:	pop	{r4, r5, r6, r7, fp, pc}
   19a00:	cmp	r2, #5
   19a04:	movcc	r0, #0
   19a08:	strhcc	r2, [r1, #60]	; 0x3c
   19a0c:	bxcc	lr
   19a10:	push	{fp, lr}
   19a14:	mov	fp, sp
   19a18:	bl	11ca8 <__errno_location@plt>
   19a1c:	mov	r1, #22
   19a20:	str	r1, [r0]
   19a24:	mov	r0, #1
   19a28:	pop	{fp, pc}
   19a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a30:	add	fp, sp, #28
   19a34:	sub	sp, sp, #4
   19a38:	mov	r9, r0
   19a3c:	orr	r0, r1, #4096	; 0x1000
   19a40:	cmp	r0, #4096	; 0x1000
   19a44:	bne	19a84 <__assert_fail@plt+0x7bf0>
   19a48:	ldr	r8, [r9]
   19a4c:	mov	r7, r1
   19a50:	bl	11ca8 <__errno_location@plt>
   19a54:	mov	r5, #0
   19a58:	mov	sl, r0
   19a5c:	str	r5, [r0]
   19a60:	ldrb	r0, [r9, #49]	; 0x31
   19a64:	tst	r0, #32
   19a68:	bne	19a94 <__assert_fail@plt+0x7c00>
   19a6c:	ldrh	r0, [r8, #56]	; 0x38
   19a70:	cmp	r0, #1
   19a74:	beq	19aa0 <__assert_fail@plt+0x7c0c>
   19a78:	cmp	r0, #9
   19a7c:	ldreq	r5, [r8, #8]
   19a80:	b	19a94 <__assert_fail@plt+0x7c00>
   19a84:	bl	11ca8 <__errno_location@plt>
   19a88:	mov	r1, #22
   19a8c:	mov	r5, #0
   19a90:	str	r1, [r0]
   19a94:	mov	r0, r5
   19a98:	sub	sp, fp, #28
   19a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aa0:	ldr	r6, [r9, #4]
   19aa4:	cmp	r6, #0
   19aa8:	beq	19ad8 <__assert_fail@plt+0x7c44>
   19aac:	ldr	r4, [r6, #8]
   19ab0:	ldr	r1, [r6, #12]
   19ab4:	cmp	r1, #0
   19ab8:	beq	19ac4 <__assert_fail@plt+0x7c30>
   19abc:	mov	r0, r1
   19ac0:	bl	11e88 <closedir@plt>
   19ac4:	mov	r0, r6
   19ac8:	bl	17754 <__assert_fail@plt+0x58c0>
   19acc:	cmp	r4, #0
   19ad0:	mov	r6, r4
   19ad4:	bne	19aac <__assert_fail@plt+0x7c18>
   19ad8:	cmp	r7, #4096	; 0x1000
   19adc:	mov	r4, #1
   19ae0:	ldreq	r0, [r9, #48]	; 0x30
   19ae4:	moveq	r4, #2
   19ae8:	orreq	r0, r0, #4096	; 0x1000
   19aec:	streq	r0, [r9, #48]	; 0x30
   19af0:	ldr	r0, [r8, #48]	; 0x30
   19af4:	cmp	r0, #0
   19af8:	bne	19b44 <__assert_fail@plt+0x7cb0>
   19afc:	ldr	r0, [r8, #24]
   19b00:	ldrb	r0, [r0]
   19b04:	cmp	r0, #47	; 0x2f
   19b08:	beq	19b44 <__assert_fail@plt+0x7cb0>
   19b0c:	ldr	r0, [r9, #48]	; 0x30
   19b10:	tst	r0, #4
   19b14:	bne	19b44 <__assert_fail@plt+0x7cb0>
   19b18:	mov	r1, #32768	; 0x8000
   19b1c:	tst	r0, #512	; 0x200
   19b20:	and	r1, r1, r0, lsl #11
   19b24:	orr	r1, r1, #18688	; 0x4900
   19b28:	orr	r2, r1, #524288	; 0x80000
   19b2c:	bne	19b5c <__assert_fail@plt+0x7cc8>
   19b30:	movw	r0, #27936	; 0x6d20
   19b34:	mov	r1, r2
   19b38:	movt	r0, #3
   19b3c:	bl	34b7c <__assert_fail@plt+0x22ce8>
   19b40:	b	19b6c <__assert_fail@plt+0x7cd8>
   19b44:	mov	r0, r9
   19b48:	mov	r1, r4
   19b4c:	bl	18e04 <__assert_fail@plt+0x6f70>
   19b50:	mov	r5, r0
   19b54:	str	r0, [r9, #4]
   19b58:	b	19a94 <__assert_fail@plt+0x7c00>
   19b5c:	ldr	r0, [r9, #32]
   19b60:	movw	r1, #27936	; 0x6d20
   19b64:	movt	r1, #3
   19b68:	bl	1d00c <__assert_fail@plt+0xb178>
   19b6c:	mov	r8, r0
   19b70:	cmn	r0, #1
   19b74:	ble	19bb8 <__assert_fail@plt+0x7d24>
   19b78:	mov	r0, r9
   19b7c:	mov	r1, r4
   19b80:	bl	18e04 <__assert_fail@plt+0x6f70>
   19b84:	str	r0, [r9, #4]
   19b88:	ldrb	r0, [r9, #49]	; 0x31
   19b8c:	tst	r0, #2
   19b90:	bne	19bc4 <__assert_fail@plt+0x7d30>
   19b94:	mov	r0, r8
   19b98:	bl	11dd4 <fchdir@plt>
   19b9c:	cmp	r0, #0
   19ba0:	beq	19bf4 <__assert_fail@plt+0x7d60>
   19ba4:	ldr	r4, [sl]
   19ba8:	mov	r0, r8
   19bac:	bl	11e70 <close@plt>
   19bb0:	str	r4, [sl]
   19bb4:	b	19a94 <__assert_fail@plt+0x7c00>
   19bb8:	mov	r5, #0
   19bbc:	str	r5, [r9, #4]
   19bc0:	b	19a94 <__assert_fail@plt+0x7c00>
   19bc4:	ldr	r1, [r9, #32]
   19bc8:	cmp	r1, r8
   19bcc:	bne	19bd8 <__assert_fail@plt+0x7d44>
   19bd0:	cmn	r1, #100	; 0x64
   19bd4:	bne	19c04 <__assert_fail@plt+0x7d70>
   19bd8:	add	r0, r9, #60	; 0x3c
   19bdc:	bl	1bc14 <__assert_fail@plt+0x9d80>
   19be0:	cmp	r0, #0
   19be4:	blt	19bec <__assert_fail@plt+0x7d58>
   19be8:	bl	11e70 <close@plt>
   19bec:	str	r8, [r9, #32]
   19bf0:	b	19bfc <__assert_fail@plt+0x7d68>
   19bf4:	mov	r0, r8
   19bf8:	bl	11e70 <close@plt>
   19bfc:	ldr	r5, [r9, #4]
   19c00:	b	19a94 <__assert_fail@plt+0x7c00>
   19c04:	bl	11e58 <abort@plt>
   19c08:	push	{fp, lr}
   19c0c:	mov	fp, sp
   19c10:	mov	r2, r1
   19c14:	ldrd	r0, [r0, #8]
   19c18:	mov	r3, #0
   19c1c:	bl	352f0 <__assert_fail@plt+0x2345c>
   19c20:	mov	r0, r2
   19c24:	pop	{fp, pc}
   19c28:	push	{r4, r5, fp, lr}
   19c2c:	add	fp, sp, #8
   19c30:	ldrd	r2, [r1, #8]
   19c34:	ldrd	r4, [r0, #8]
   19c38:	eor	r3, r5, r3
   19c3c:	eor	r2, r4, r2
   19c40:	orrs	r2, r2, r3
   19c44:	mov	r2, #0
   19c48:	bne	19c68 <__assert_fail@plt+0x7dd4>
   19c4c:	ldrd	r2, [r1]
   19c50:	ldrd	r0, [r0]
   19c54:	eor	r1, r1, r3
   19c58:	eor	r0, r0, r2
   19c5c:	orr	r0, r0, r1
   19c60:	clz	r0, r0
   19c64:	lsr	r2, r0, #5
   19c68:	mov	r0, r2
   19c6c:	pop	{r4, r5, fp, pc}
   19c70:	push	{r4, r5, fp, lr}
   19c74:	add	fp, sp, #8
   19c78:	ldr	r0, [r0]
   19c7c:	ldrd	r2, [r0, #160]	; 0xa0
   19c80:	ldr	r0, [r1]
   19c84:	ldrd	r4, [r0, #160]	; 0xa0
   19c88:	mov	r0, #0
   19c8c:	subs	r1, r4, r2
   19c90:	sbcs	r1, r5, r3
   19c94:	movwcc	r0, #1
   19c98:	subs	r1, r2, r4
   19c9c:	sbcs	r1, r3, r5
   19ca0:	subcc	r0, r0, #1
   19ca4:	pop	{r4, r5, fp, pc}
   19ca8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19cac:	add	fp, sp, #24
   19cb0:	sub	sp, sp, #96	; 0x60
   19cb4:	ldr	r7, [r0, #44]	; 0x2c
   19cb8:	mov	r4, r0
   19cbc:	mov	r5, #0
   19cc0:	ldrb	r0, [r7, #49]	; 0x31
   19cc4:	tst	r0, #2
   19cc8:	beq	19dc4 <__assert_fail@plt+0x7f30>
   19ccc:	ldr	r6, [r7, #52]	; 0x34
   19cd0:	mov	r9, r1
   19cd4:	cmp	r6, #0
   19cd8:	bne	19d18 <__assert_fail@plt+0x7e84>
   19cdc:	movw	r0, #30548	; 0x7754
   19ce0:	movw	r2, #40400	; 0x9dd0
   19ce4:	movw	r3, #40432	; 0x9df0
   19ce8:	mov	r1, #0
   19cec:	mov	r8, #0
   19cf0:	movt	r0, #1
   19cf4:	movt	r2, #1
   19cf8:	movt	r3, #1
   19cfc:	str	r0, [sp]
   19d00:	mov	r0, #13
   19d04:	bl	1a298 <__assert_fail@plt+0x8404>
   19d08:	mov	r6, r0
   19d0c:	cmp	r0, #0
   19d10:	str	r0, [r7, #52]	; 0x34
   19d14:	beq	19d50 <__assert_fail@plt+0x7ebc>
   19d18:	ldrd	r0, [r4, #64]	; 0x40
   19d1c:	str	r1, [sp, #12]
   19d20:	str	r0, [sp, #8]
   19d24:	add	r1, sp, #8
   19d28:	mov	r0, r6
   19d2c:	bl	19fe8 <__assert_fail@plt+0x8154>
   19d30:	cmp	r0, #0
   19d34:	beq	19d40 <__assert_fail@plt+0x7eac>
   19d38:	ldr	r5, [r0, #8]
   19d3c:	b	19dc4 <__assert_fail@plt+0x7f30>
   19d40:	mov	r8, #1
   19d44:	cmp	r9, #0
   19d48:	bge	19d5c <__assert_fail@plt+0x7ec8>
   19d4c:	b	19dc4 <__assert_fail@plt+0x7f30>
   19d50:	mov	r6, #0
   19d54:	cmp	r9, #0
   19d58:	blt	19dc4 <__assert_fail@plt+0x7f30>
   19d5c:	add	r1, sp, #8
   19d60:	mov	r0, r9
   19d64:	bl	119a8 <fstatfs64@plt>
   19d68:	cmp	r0, #0
   19d6c:	bne	19dc4 <__assert_fail@plt+0x7f30>
   19d70:	cmp	r8, #0
   19d74:	beq	19dc0 <__assert_fail@plt+0x7f2c>
   19d78:	mov	r0, #16
   19d7c:	bl	33c98 <__assert_fail@plt+0x21e04>
   19d80:	cmp	r0, #0
   19d84:	beq	19dc0 <__assert_fail@plt+0x7f2c>
   19d88:	mov	r5, r0
   19d8c:	ldrd	r0, [r4, #64]	; 0x40
   19d90:	ldr	r2, [sp, #8]
   19d94:	stm	r5, {r0, r1, r2}
   19d98:	mov	r0, r6
   19d9c:	mov	r1, r5
   19da0:	bl	1addc <__assert_fail@plt+0x8f48>
   19da4:	cmp	r0, #0
   19da8:	beq	19db8 <__assert_fail@plt+0x7f24>
   19dac:	cmp	r0, r5
   19db0:	beq	19dc0 <__assert_fail@plt+0x7f2c>
   19db4:	bl	11e58 <abort@plt>
   19db8:	mov	r0, r5
   19dbc:	bl	17754 <__assert_fail@plt+0x58c0>
   19dc0:	ldr	r5, [sp, #8]
   19dc4:	mov	r0, r5
   19dc8:	sub	sp, fp, #24
   19dcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19dd0:	push	{fp, lr}
   19dd4:	mov	fp, sp
   19dd8:	mov	r2, r1
   19ddc:	ldrd	r0, [r0]
   19de0:	mov	r3, #0
   19de4:	bl	352f0 <__assert_fail@plt+0x2345c>
   19de8:	mov	r0, r2
   19dec:	pop	{fp, pc}
   19df0:	ldrd	r2, [r1]
   19df4:	ldrd	r0, [r0]
   19df8:	eor	r1, r1, r3
   19dfc:	eor	r0, r0, r2
   19e00:	orr	r0, r0, r1
   19e04:	clz	r0, r0
   19e08:	lsr	r0, r0, #5
   19e0c:	bx	lr
   19e10:	ldr	r0, [r0, #8]
   19e14:	bx	lr
   19e18:	ldr	r0, [r0, #12]
   19e1c:	bx	lr
   19e20:	ldr	r0, [r0, #16]
   19e24:	bx	lr
   19e28:	ldm	r0, {r2, ip}
   19e2c:	mov	r0, #0
   19e30:	cmp	r2, ip
   19e34:	bxcs	lr
   19e38:	mov	r0, #0
   19e3c:	ldr	r1, [r2]
   19e40:	cmp	r1, #0
   19e44:	beq	19e68 <__assert_fail@plt+0x7fd4>
   19e48:	mov	r3, #0
   19e4c:	mov	r1, r2
   19e50:	ldr	r1, [r1, #4]
   19e54:	add	r3, r3, #1
   19e58:	cmp	r1, #0
   19e5c:	bne	19e50 <__assert_fail@plt+0x7fbc>
   19e60:	cmp	r3, r0
   19e64:	movhi	r0, r3
   19e68:	add	r2, r2, #8
   19e6c:	cmp	r2, ip
   19e70:	bcc	19e3c <__assert_fail@plt+0x7fa8>
   19e74:	bx	lr
   19e78:	push	{fp, lr}
   19e7c:	mov	fp, sp
   19e80:	ldm	r0, {r3, ip}
   19e84:	mov	lr, #0
   19e88:	mov	r1, #0
   19e8c:	cmp	r3, ip
   19e90:	bcs	19ecc <__assert_fail@plt+0x8038>
   19e94:	mov	r1, #0
   19e98:	mov	lr, #0
   19e9c:	ldr	r2, [r3]
   19ea0:	cmp	r2, #0
   19ea4:	beq	19ec0 <__assert_fail@plt+0x802c>
   19ea8:	mov	r2, r3
   19eac:	ldr	r2, [r2, #4]
   19eb0:	add	r1, r1, #1
   19eb4:	cmp	r2, #0
   19eb8:	bne	19eac <__assert_fail@plt+0x8018>
   19ebc:	add	lr, lr, #1
   19ec0:	add	r3, r3, #8
   19ec4:	cmp	r3, ip
   19ec8:	bcc	19e9c <__assert_fail@plt+0x8008>
   19ecc:	ldr	r2, [r0, #12]
   19ed0:	cmp	lr, r2
   19ed4:	bne	19eec <__assert_fail@plt+0x8058>
   19ed8:	ldr	r2, [r0, #16]
   19edc:	mov	r0, #1
   19ee0:	cmp	r1, r2
   19ee4:	movne	r0, #0
   19ee8:	pop	{fp, pc}
   19eec:	mov	r0, #0
   19ef0:	pop	{fp, pc}
   19ef4:	nop	{0}
   19ef8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19efc:	add	fp, sp, #24
   19f00:	sub	sp, sp, #8
   19f04:	ldr	r6, [r0]
   19f08:	ldmib	r0, {r2, r7, r8}
   19f0c:	ldr	r3, [r0, #16]
   19f10:	mov	r4, r1
   19f14:	mov	r5, #0
   19f18:	cmp	r6, r2
   19f1c:	bcs	19f5c <__assert_fail@plt+0x80c8>
   19f20:	mov	r5, #0
   19f24:	ldr	r0, [r6]
   19f28:	cmp	r0, #0
   19f2c:	beq	19f50 <__assert_fail@plt+0x80bc>
   19f30:	mov	r0, #0
   19f34:	mov	r1, r6
   19f38:	ldr	r1, [r1, #4]
   19f3c:	add	r0, r0, #1
   19f40:	cmp	r1, #0
   19f44:	bne	19f38 <__assert_fail@plt+0x80a4>
   19f48:	cmp	r0, r5
   19f4c:	movhi	r5, r0
   19f50:	add	r6, r6, #8
   19f54:	cmp	r6, r2
   19f58:	bcc	19f24 <__assert_fail@plt+0x8090>
   19f5c:	movw	r2, #28000	; 0x6d60
   19f60:	mov	r0, r4
   19f64:	mov	r1, #1
   19f68:	movt	r2, #3
   19f6c:	bl	11d08 <__fprintf_chk@plt>
   19f70:	movw	r2, #28024	; 0x6d78
   19f74:	mov	r0, r4
   19f78:	mov	r1, #1
   19f7c:	mov	r3, r7
   19f80:	movt	r2, #3
   19f84:	bl	11d08 <__fprintf_chk@plt>
   19f88:	vldr	d16, [pc, #80]	; 19fe0 <__assert_fail@plt+0x814c>
   19f8c:	vmov	s0, r8
   19f90:	movw	r2, #28048	; 0x6d90
   19f94:	mov	r0, r4
   19f98:	mov	r1, #1
   19f9c:	mov	r3, r8
   19fa0:	vcvt.f64.u32	d17, s0
   19fa4:	vmov	s0, r7
   19fa8:	movt	r2, #3
   19fac:	vcvt.f64.u32	d18, s0
   19fb0:	vmul.f64	d16, d17, d16
   19fb4:	vdiv.f64	d16, d16, d18
   19fb8:	vstr	d16, [sp]
   19fbc:	bl	11d08 <__fprintf_chk@plt>
   19fc0:	movw	r2, #28081	; 0x6db1
   19fc4:	mov	r0, r4
   19fc8:	mov	r1, #1
   19fcc:	mov	r3, r5
   19fd0:	movt	r2, #3
   19fd4:	sub	sp, fp, #24
   19fd8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19fdc:	b	11d08 <__fprintf_chk@plt>
   19fe0:	andeq	r0, r0, r0
   19fe4:	subsmi	r0, r9, r0
   19fe8:	push	{r4, r5, r6, r7, fp, lr}
   19fec:	add	fp, sp, #16
   19ff0:	mov	r4, r1
   19ff4:	ldr	r1, [r0, #8]
   19ff8:	ldr	r2, [r0, #24]
   19ffc:	mov	r5, r0
   1a000:	mov	r0, r4
   1a004:	blx	r2
   1a008:	ldr	r1, [r5, #8]
   1a00c:	cmp	r0, r1
   1a010:	bcs	1a07c <__assert_fail@plt+0x81e8>
   1a014:	ldr	r7, [r5]
   1a018:	mov	r6, #0
   1a01c:	ldr	r1, [r7, r0, lsl #3]!
   1a020:	cmp	r1, #0
   1a024:	cmpne	r7, #0
   1a028:	bne	1a038 <__assert_fail@plt+0x81a4>
   1a02c:	mov	r0, r6
   1a030:	pop	{r4, r5, r6, r7, fp, pc}
   1a034:	ldr	r1, [r7]
   1a038:	cmp	r1, r4
   1a03c:	beq	1a064 <__assert_fail@plt+0x81d0>
   1a040:	ldr	r2, [r5, #28]
   1a044:	mov	r0, r4
   1a048:	blx	r2
   1a04c:	cmp	r0, #0
   1a050:	bne	1a070 <__assert_fail@plt+0x81dc>
   1a054:	ldr	r7, [r7, #4]
   1a058:	cmp	r7, #0
   1a05c:	bne	1a034 <__assert_fail@plt+0x81a0>
   1a060:	b	1a02c <__assert_fail@plt+0x8198>
   1a064:	mov	r6, r4
   1a068:	mov	r0, r6
   1a06c:	pop	{r4, r5, r6, r7, fp, pc}
   1a070:	ldr	r6, [r7]
   1a074:	mov	r0, r6
   1a078:	pop	{r4, r5, r6, r7, fp, pc}
   1a07c:	bl	11e58 <abort@plt>
   1a080:	ldr	r1, [r0, #16]
   1a084:	cmp	r1, #0
   1a088:	moveq	r0, #0
   1a08c:	bxeq	lr
   1a090:	ldm	r0, {r1, r2}
   1a094:	cmp	r1, r2
   1a098:	bcs	1a0b0 <__assert_fail@plt+0x821c>
   1a09c:	ldr	r0, [r1], #8
   1a0a0:	cmp	r0, #0
   1a0a4:	bxne	lr
   1a0a8:	cmp	r1, r2
   1a0ac:	bcc	1a09c <__assert_fail@plt+0x8208>
   1a0b0:	push	{fp, lr}
   1a0b4:	mov	fp, sp
   1a0b8:	bl	11e58 <abort@plt>
   1a0bc:	push	{r4, r5, fp, lr}
   1a0c0:	add	fp, sp, #8
   1a0c4:	mov	r5, r1
   1a0c8:	ldr	r1, [r0, #8]
   1a0cc:	ldr	r2, [r0, #24]
   1a0d0:	mov	r4, r0
   1a0d4:	mov	r0, r5
   1a0d8:	blx	r2
   1a0dc:	ldr	r1, [r4, #8]
   1a0e0:	cmp	r0, r1
   1a0e4:	bcs	1a140 <__assert_fail@plt+0x82ac>
   1a0e8:	ldr	r1, [r4]
   1a0ec:	add	r2, r1, r0, lsl #3
   1a0f0:	ldr	r3, [r2]
   1a0f4:	ldr	r2, [r2, #4]
   1a0f8:	cmp	r3, r5
   1a0fc:	beq	1a10c <__assert_fail@plt+0x8278>
   1a100:	cmp	r2, #0
   1a104:	bne	1a0f0 <__assert_fail@plt+0x825c>
   1a108:	b	1a118 <__assert_fail@plt+0x8284>
   1a10c:	cmp	r2, #0
   1a110:	ldrne	r0, [r2]
   1a114:	popne	{r4, r5, fp, pc}
   1a118:	ldr	r2, [r4, #4]
   1a11c:	add	r0, r1, r0, lsl #3
   1a120:	add	r1, r0, #8
   1a124:	cmp	r1, r2
   1a128:	movcs	r0, #0
   1a12c:	popcs	{r4, r5, fp, pc}
   1a130:	ldr	r0, [r1], #8
   1a134:	cmp	r0, #0
   1a138:	popne	{r4, r5, fp, pc}
   1a13c:	b	1a124 <__assert_fail@plt+0x8290>
   1a140:	bl	11e58 <abort@plt>
   1a144:	push	{r4, r5, fp, lr}
   1a148:	add	fp, sp, #8
   1a14c:	ldm	r0, {r5, lr}
   1a150:	mov	ip, r0
   1a154:	mov	r0, #0
   1a158:	cmp	r5, lr
   1a15c:	bcs	1a1a8 <__assert_fail@plt+0x8314>
   1a160:	mov	r0, #0
   1a164:	ldr	r3, [r5]
   1a168:	cmp	r3, #0
   1a16c:	cmpne	r5, #0
   1a170:	beq	1a19c <__assert_fail@plt+0x8308>
   1a174:	mov	r3, r5
   1a178:	cmp	r0, r2
   1a17c:	popcs	{r4, r5, fp, pc}
   1a180:	ldr	r4, [r3]
   1a184:	str	r4, [r1, r0, lsl #2]
   1a188:	add	r0, r0, #1
   1a18c:	ldr	r3, [r3, #4]
   1a190:	cmp	r3, #0
   1a194:	bne	1a178 <__assert_fail@plt+0x82e4>
   1a198:	ldr	lr, [ip, #4]
   1a19c:	add	r5, r5, #8
   1a1a0:	cmp	r5, lr
   1a1a4:	bcc	1a164 <__assert_fail@plt+0x82d0>
   1a1a8:	pop	{r4, r5, fp, pc}
   1a1ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a1b0:	add	fp, sp, #24
   1a1b4:	mov	r5, r1
   1a1b8:	ldr	r4, [r0]
   1a1bc:	ldr	r1, [r0, #4]
   1a1c0:	mov	r6, #0
   1a1c4:	cmp	r4, r1
   1a1c8:	bcs	1a23c <__assert_fail@plt+0x83a8>
   1a1cc:	mov	r9, r2
   1a1d0:	mov	r8, r0
   1a1d4:	mov	r6, #0
   1a1d8:	b	1a220 <__assert_fail@plt+0x838c>
   1a1dc:	mov	r1, r9
   1a1e0:	blx	r5
   1a1e4:	cmp	r0, #0
   1a1e8:	beq	1a23c <__assert_fail@plt+0x83a8>
   1a1ec:	mov	r7, r4
   1a1f0:	ldr	r7, [r7, #4]
   1a1f4:	add	r6, r6, #1
   1a1f8:	cmp	r7, #0
   1a1fc:	beq	1a218 <__assert_fail@plt+0x8384>
   1a200:	ldr	r0, [r7]
   1a204:	mov	r1, r9
   1a208:	blx	r5
   1a20c:	cmp	r0, #0
   1a210:	bne	1a1f0 <__assert_fail@plt+0x835c>
   1a214:	b	1a23c <__assert_fail@plt+0x83a8>
   1a218:	ldr	r1, [r8, #4]
   1a21c:	b	1a230 <__assert_fail@plt+0x839c>
   1a220:	ldr	r0, [r4]
   1a224:	cmp	r0, #0
   1a228:	cmpne	r4, #0
   1a22c:	bne	1a1dc <__assert_fail@plt+0x8348>
   1a230:	add	r4, r4, #8
   1a234:	cmp	r4, r1
   1a238:	bcc	1a220 <__assert_fail@plt+0x838c>
   1a23c:	mov	r0, r6
   1a240:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a244:	ldrb	r2, [r0]
   1a248:	cmp	r2, #0
   1a24c:	moveq	r0, #0
   1a250:	bxeq	lr
   1a254:	add	r3, r0, #1
   1a258:	mov	r0, #0
   1a25c:	rsb	r0, r0, r0, lsl #5
   1a260:	uxtab	r0, r0, r2
   1a264:	udiv	r2, r0, r1
   1a268:	mls	r0, r2, r1, r0
   1a26c:	ldrb	r2, [r3], #1
   1a270:	cmp	r2, #0
   1a274:	bne	1a25c <__assert_fail@plt+0x83c8>
   1a278:	bx	lr
   1a27c:	movw	r1, #28112	; 0x6dd0
   1a280:	movt	r1, #3
   1a284:	vld1.32	{d16-d17}, [r1]!
   1a288:	ldr	r1, [r1]
   1a28c:	vst1.32	{d16-d17}, [r0]!
   1a290:	str	r1, [r0]
   1a294:	bx	lr
   1a298:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a29c:	add	fp, sp, #24
   1a2a0:	movw	r9, #42176	; 0xa4c0
   1a2a4:	movw	r5, #42156	; 0xa4ac
   1a2a8:	cmp	r3, #0
   1a2ac:	mov	r6, r0
   1a2b0:	mov	r0, #40	; 0x28
   1a2b4:	mov	r7, r1
   1a2b8:	movt	r9, #1
   1a2bc:	movt	r5, #1
   1a2c0:	movne	r9, r3
   1a2c4:	cmp	r2, #0
   1a2c8:	movne	r5, r2
   1a2cc:	bl	33c98 <__assert_fail@plt+0x21e04>
   1a2d0:	mov	r8, #0
   1a2d4:	cmp	r0, #0
   1a2d8:	beq	1a494 <__assert_fail@plt+0x8600>
   1a2dc:	mov	r4, r0
   1a2e0:	movw	r0, #28112	; 0x6dd0
   1a2e4:	cmp	r7, #0
   1a2e8:	movt	r0, #3
   1a2ec:	moveq	r7, r0
   1a2f0:	cmp	r7, r0
   1a2f4:	str	r7, [r4, #20]
   1a2f8:	beq	1a374 <__assert_fail@plt+0x84e0>
   1a2fc:	vldr	s2, [pc, #408]	; 1a49c <__assert_fail@plt+0x8608>
   1a300:	vldr	s0, [r7, #8]
   1a304:	vcmpe.f32	s0, s2
   1a308:	vmrs	APSR_nzcv, fpscr
   1a30c:	ble	1a420 <__assert_fail@plt+0x858c>
   1a310:	vldr	s4, [pc, #392]	; 1a4a0 <__assert_fail@plt+0x860c>
   1a314:	vcmpe.f32	s0, s4
   1a318:	vmrs	APSR_nzcv, fpscr
   1a31c:	bpl	1a420 <__assert_fail@plt+0x858c>
   1a320:	vldr	s4, [pc, #380]	; 1a4a4 <__assert_fail@plt+0x8610>
   1a324:	vldr	s6, [r7, #12]
   1a328:	vcmpe.f32	s6, s4
   1a32c:	vmrs	APSR_nzcv, fpscr
   1a330:	ble	1a420 <__assert_fail@plt+0x858c>
   1a334:	vldr	s4, [r7]
   1a338:	vcmpe.f32	s4, #0.0
   1a33c:	vmrs	APSR_nzcv, fpscr
   1a340:	blt	1a420 <__assert_fail@plt+0x858c>
   1a344:	vadd.f32	s2, s4, s2
   1a348:	vcmpe.f32	s2, s0
   1a34c:	vmrs	APSR_nzcv, fpscr
   1a350:	bpl	1a420 <__assert_fail@plt+0x858c>
   1a354:	vldr	s0, [r7, #4]
   1a358:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1a35c:	vcmpe.f32	s0, s4
   1a360:	vmrs	APSR_nzcv, fpscr
   1a364:	bhi	1a420 <__assert_fail@plt+0x858c>
   1a368:	vcmpe.f32	s2, s0
   1a36c:	vmrs	APSR_nzcv, fpscr
   1a370:	bpl	1a420 <__assert_fail@plt+0x858c>
   1a374:	ldrb	r0, [r7, #16]
   1a378:	cmp	r0, #0
   1a37c:	bne	1a3a8 <__assert_fail@plt+0x8514>
   1a380:	vldr	s0, [r7, #8]
   1a384:	vldr	s4, [pc, #284]	; 1a4a8 <__assert_fail@plt+0x8614>
   1a388:	vmov	s2, r6
   1a38c:	vcvt.f32.u32	s2, s2
   1a390:	vdiv.f32	s2, s2, s0
   1a394:	vcmpe.f32	s2, s4
   1a398:	vcvt.u32.f32	s0, s2
   1a39c:	vmrs	APSR_nzcv, fpscr
   1a3a0:	bge	1a430 <__assert_fail@plt+0x859c>
   1a3a4:	vmov	r6, s0
   1a3a8:	cmp	r6, #10
   1a3ac:	movls	r6, #10
   1a3b0:	orr	r0, r6, #1
   1a3b4:	cmn	r0, #1
   1a3b8:	beq	1a430 <__assert_fail@plt+0x859c>
   1a3bc:	ldr	r6, [fp, #8]
   1a3c0:	mov	r1, #3
   1a3c4:	cmp	r0, #10
   1a3c8:	bcc	1a400 <__assert_fail@plt+0x856c>
   1a3cc:	mov	r1, #3
   1a3d0:	mov	r3, #9
   1a3d4:	mov	r2, #12
   1a3d8:	udiv	r7, r0, r1
   1a3dc:	mls	r7, r7, r1, r0
   1a3e0:	cmp	r7, #0
   1a3e4:	beq	1a400 <__assert_fail@plt+0x856c>
   1a3e8:	add	r3, r3, r2
   1a3ec:	add	r2, r2, #8
   1a3f0:	add	r1, r1, #2
   1a3f4:	add	r3, r3, #4
   1a3f8:	cmp	r3, r0
   1a3fc:	bcc	1a3d8 <__assert_fail@plt+0x8544>
   1a400:	udiv	r2, r0, r1
   1a404:	mls	r1, r2, r1, r0
   1a408:	cmp	r1, #0
   1a40c:	bne	1a428 <__assert_fail@plt+0x8594>
   1a410:	add	r0, r0, #2
   1a414:	cmn	r0, #1
   1a418:	bne	1a3c0 <__assert_fail@plt+0x852c>
   1a41c:	b	1a430 <__assert_fail@plt+0x859c>
   1a420:	str	r0, [r4, #20]
   1a424:	b	1a438 <__assert_fail@plt+0x85a4>
   1a428:	cmp	r0, #536870912	; 0x20000000
   1a42c:	bcc	1a448 <__assert_fail@plt+0x85b4>
   1a430:	mov	r0, #0
   1a434:	str	r0, [r4, #8]
   1a438:	mov	r0, r4
   1a43c:	bl	17754 <__assert_fail@plt+0x58c0>
   1a440:	mov	r0, r8
   1a444:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a448:	cmp	r0, #0
   1a44c:	str	r0, [r4, #8]
   1a450:	beq	1a438 <__assert_fail@plt+0x85a4>
   1a454:	mov	r1, #8
   1a458:	bl	33c44 <__assert_fail@plt+0x21db0>
   1a45c:	cmp	r0, #0
   1a460:	str	r0, [r4]
   1a464:	beq	1a438 <__assert_fail@plt+0x85a4>
   1a468:	mov	r1, #0
   1a46c:	mov	r8, r4
   1a470:	str	r1, [r4, #12]
   1a474:	str	r1, [r4, #16]
   1a478:	str	r5, [r4, #24]
   1a47c:	str	r9, [r4, #28]
   1a480:	str	r6, [r4, #32]
   1a484:	str	r1, [r4, #36]	; 0x24
   1a488:	ldr	r1, [r4, #8]
   1a48c:	add	r0, r0, r1, lsl #3
   1a490:	str	r0, [r4, #4]
   1a494:	mov	r0, r8
   1a498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a49c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1a4a0:	svccc	0x00666666
   1a4a4:	svccc	0x008ccccd
   1a4a8:	svcmi	0x00800000
   1a4ac:	ror	r2, r0, #3
   1a4b0:	udiv	r2, r2, r1
   1a4b4:	mul	r1, r2, r1
   1a4b8:	rsb	r0, r1, r0, ror #3
   1a4bc:	bx	lr
   1a4c0:	sub	r0, r0, r1
   1a4c4:	clz	r0, r0
   1a4c8:	lsr	r0, r0, #5
   1a4cc:	bx	lr
   1a4d0:	push	{r4, r5, r6, r7, fp, lr}
   1a4d4:	add	fp, sp, #16
   1a4d8:	mov	r4, r0
   1a4dc:	ldr	r5, [r0]
   1a4e0:	ldr	r0, [r0, #4]
   1a4e4:	cmp	r5, r0
   1a4e8:	bcs	1a580 <__assert_fail@plt+0x86ec>
   1a4ec:	mov	r6, #0
   1a4f0:	ldr	r1, [r5]
   1a4f4:	cmp	r1, #0
   1a4f8:	beq	1a574 <__assert_fail@plt+0x86e0>
   1a4fc:	ldr	r1, [r4, #32]
   1a500:	ldr	r7, [r5, #4]
   1a504:	cmp	r1, #0
   1a508:	mov	r0, r1
   1a50c:	movwne	r0, #1
   1a510:	cmp	r7, #0
   1a514:	beq	1a558 <__assert_fail@plt+0x86c4>
   1a518:	tst	r0, #1
   1a51c:	beq	1a52c <__assert_fail@plt+0x8698>
   1a520:	ldr	r0, [r7]
   1a524:	blx	r1
   1a528:	ldr	r1, [r4, #32]
   1a52c:	str	r6, [r7]
   1a530:	cmp	r1, #0
   1a534:	ldr	r0, [r4, #36]	; 0x24
   1a538:	ldr	r2, [r7, #4]
   1a53c:	str	r0, [r7, #4]
   1a540:	mov	r0, r1
   1a544:	str	r7, [r4, #36]	; 0x24
   1a548:	mov	r7, r2
   1a54c:	movwne	r0, #1
   1a550:	cmp	r2, #0
   1a554:	bne	1a518 <__assert_fail@plt+0x8684>
   1a558:	cmp	r0, #0
   1a55c:	beq	1a568 <__assert_fail@plt+0x86d4>
   1a560:	ldr	r0, [r5]
   1a564:	blx	r1
   1a568:	str	r6, [r5]
   1a56c:	str	r6, [r5, #4]
   1a570:	ldr	r0, [r4, #4]
   1a574:	add	r5, r5, #8
   1a578:	cmp	r5, r0
   1a57c:	bcc	1a4f0 <__assert_fail@plt+0x865c>
   1a580:	mov	r0, #0
   1a584:	str	r0, [r4, #12]
   1a588:	str	r0, [r4, #16]
   1a58c:	pop	{r4, r5, r6, r7, fp, pc}
   1a590:	push	{r4, r5, r6, sl, fp, lr}
   1a594:	add	fp, sp, #16
   1a598:	mov	r4, r0
   1a59c:	ldr	r0, [r0, #32]
   1a5a0:	cmp	r0, #0
   1a5a4:	ldrne	r0, [r4, #16]
   1a5a8:	cmpne	r0, #0
   1a5ac:	beq	1a614 <__assert_fail@plt+0x8780>
   1a5b0:	ldr	r5, [r4]
   1a5b4:	ldr	r1, [r4, #4]
   1a5b8:	cmp	r5, r1
   1a5bc:	bcc	1a5d0 <__assert_fail@plt+0x873c>
   1a5c0:	b	1a614 <__assert_fail@plt+0x8780>
   1a5c4:	add	r5, r5, #8
   1a5c8:	cmp	r5, r1
   1a5cc:	bcs	1a614 <__assert_fail@plt+0x8780>
   1a5d0:	ldr	r0, [r5]
   1a5d4:	cmp	r0, #0
   1a5d8:	cmpne	r5, #0
   1a5dc:	beq	1a5c4 <__assert_fail@plt+0x8730>
   1a5e0:	ldr	r1, [r4, #32]
   1a5e4:	blx	r1
   1a5e8:	ldr	r6, [r5, #4]
   1a5ec:	cmp	r6, #0
   1a5f0:	beq	1a60c <__assert_fail@plt+0x8778>
   1a5f4:	ldr	r1, [r4, #32]
   1a5f8:	ldr	r0, [r6]
   1a5fc:	blx	r1
   1a600:	ldr	r6, [r6, #4]
   1a604:	cmp	r6, #0
   1a608:	bne	1a5f4 <__assert_fail@plt+0x8760>
   1a60c:	ldr	r1, [r4, #4]
   1a610:	b	1a5c4 <__assert_fail@plt+0x8730>
   1a614:	ldr	r5, [r4]
   1a618:	ldr	r1, [r4, #4]
   1a61c:	cmp	r5, r1
   1a620:	bcc	1a634 <__assert_fail@plt+0x87a0>
   1a624:	b	1a65c <__assert_fail@plt+0x87c8>
   1a628:	add	r5, r5, #8
   1a62c:	cmp	r5, r1
   1a630:	bcs	1a65c <__assert_fail@plt+0x87c8>
   1a634:	ldr	r0, [r5, #4]
   1a638:	cmp	r0, #0
   1a63c:	beq	1a628 <__assert_fail@plt+0x8794>
   1a640:	ldr	r6, [r0, #4]
   1a644:	bl	17754 <__assert_fail@plt+0x58c0>
   1a648:	cmp	r6, #0
   1a64c:	mov	r0, r6
   1a650:	bne	1a640 <__assert_fail@plt+0x87ac>
   1a654:	ldr	r1, [r4, #4]
   1a658:	b	1a628 <__assert_fail@plt+0x8794>
   1a65c:	ldr	r0, [r4, #36]	; 0x24
   1a660:	cmp	r0, #0
   1a664:	beq	1a67c <__assert_fail@plt+0x87e8>
   1a668:	ldr	r5, [r0, #4]
   1a66c:	bl	17754 <__assert_fail@plt+0x58c0>
   1a670:	cmp	r5, #0
   1a674:	mov	r0, r5
   1a678:	bne	1a668 <__assert_fail@plt+0x87d4>
   1a67c:	ldr	r0, [r4]
   1a680:	bl	17754 <__assert_fail@plt+0x58c0>
   1a684:	mov	r0, r4
   1a688:	pop	{r4, r5, r6, sl, fp, lr}
   1a68c:	b	17754 <__assert_fail@plt+0x58c0>
   1a690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a694:	add	fp, sp, #28
   1a698:	sub	sp, sp, #44	; 0x2c
   1a69c:	mov	r7, r0
   1a6a0:	mov	r4, r0
   1a6a4:	ldr	r0, [r7, #20]!
   1a6a8:	ldrb	r2, [r0, #16]
   1a6ac:	cmp	r2, #0
   1a6b0:	bne	1a6e0 <__assert_fail@plt+0x884c>
   1a6b4:	vldr	s0, [r0, #8]
   1a6b8:	vldr	s4, [pc, #560]	; 1a8f0 <__assert_fail@plt+0x8a5c>
   1a6bc:	vmov	s2, r1
   1a6c0:	mov	r5, #0
   1a6c4:	vcvt.f32.u32	s2, s2
   1a6c8:	vdiv.f32	s2, s2, s0
   1a6cc:	vcmpe.f32	s2, s4
   1a6d0:	vcvt.u32.f32	s0, s2
   1a6d4:	vmrs	APSR_nzcv, fpscr
   1a6d8:	bge	1a8e0 <__assert_fail@plt+0x8a4c>
   1a6dc:	vmov	r1, s0
   1a6e0:	cmp	r1, #10
   1a6e4:	mov	r5, #0
   1a6e8:	movls	r1, #10
   1a6ec:	orr	r6, r1, #1
   1a6f0:	cmn	r6, #1
   1a6f4:	bne	1a708 <__assert_fail@plt+0x8874>
   1a6f8:	b	1a8e0 <__assert_fail@plt+0x8a4c>
   1a6fc:	add	r6, r6, #2
   1a700:	cmn	r6, #1
   1a704:	beq	1a8e0 <__assert_fail@plt+0x8a4c>
   1a708:	mov	r0, #3
   1a70c:	cmp	r6, #10
   1a710:	bcc	1a748 <__assert_fail@plt+0x88b4>
   1a714:	mov	r0, #3
   1a718:	mov	r2, #9
   1a71c:	mov	r1, #12
   1a720:	udiv	r3, r6, r0
   1a724:	mls	r3, r3, r0, r6
   1a728:	cmp	r3, #0
   1a72c:	beq	1a748 <__assert_fail@plt+0x88b4>
   1a730:	add	r2, r2, r1
   1a734:	add	r1, r1, #8
   1a738:	add	r0, r0, #2
   1a73c:	add	r2, r2, #4
   1a740:	cmp	r2, r6
   1a744:	bcc	1a720 <__assert_fail@plt+0x888c>
   1a748:	udiv	r1, r6, r0
   1a74c:	mls	r0, r1, r0, r6
   1a750:	cmp	r0, #0
   1a754:	beq	1a6fc <__assert_fail@plt+0x8868>
   1a758:	sub	r0, r6, #1
   1a75c:	cmn	r0, #-536870910	; 0xe0000002
   1a760:	bhi	1a8e0 <__assert_fail@plt+0x8a4c>
   1a764:	ldr	r0, [r4, #8]
   1a768:	cmp	r6, r0
   1a76c:	bne	1a778 <__assert_fail@plt+0x88e4>
   1a770:	mov	r5, #1
   1a774:	b	1a8e0 <__assert_fail@plt+0x8a4c>
   1a778:	mov	r0, r6
   1a77c:	mov	r1, #8
   1a780:	bl	33c44 <__assert_fail@plt+0x21db0>
   1a784:	cmp	r0, #0
   1a788:	str	r0, [sp, #4]
   1a78c:	beq	1a8e0 <__assert_fail@plt+0x8a4c>
   1a790:	mov	r1, #0
   1a794:	add	r0, r0, r6, lsl #3
   1a798:	str	r6, [sp, #12]
   1a79c:	add	r5, sp, #4
   1a7a0:	mov	sl, r4
   1a7a4:	mov	r2, #0
   1a7a8:	str	r1, [sp, #16]
   1a7ac:	str	r1, [sp, #20]
   1a7b0:	str	r0, [sp, #8]
   1a7b4:	add	r0, r5, #20
   1a7b8:	mov	r1, r4
   1a7bc:	vld1.32	{d16-d17}, [r7]
   1a7c0:	vst1.32	{d16-d17}, [r0]
   1a7c4:	ldr	r0, [sl, #36]!	; 0x24
   1a7c8:	str	r0, [sp, #40]	; 0x28
   1a7cc:	mov	r0, r5
   1a7d0:	bl	1a8f4 <__assert_fail@plt+0x8a60>
   1a7d4:	cmp	r0, #0
   1a7d8:	beq	1a800 <__assert_fail@plt+0x896c>
   1a7dc:	ldr	r0, [r4]
   1a7e0:	bl	17754 <__assert_fail@plt+0x58c0>
   1a7e4:	mov	r0, #36	; 0x24
   1a7e8:	vld1.32	{d16-d17}, [r5], r0
   1a7ec:	vst1.32	{d16-d17}, [r4], r0
   1a7f0:	ldr	r0, [r5]
   1a7f4:	mov	r5, #1
   1a7f8:	str	r0, [r4]
   1a7fc:	b	1a8e0 <__assert_fail@plt+0x8a4c>
   1a800:	ldr	r0, [sp, #40]	; 0x28
   1a804:	str	r0, [sl]
   1a808:	ldr	r0, [sp, #8]
   1a80c:	ldr	r8, [sp, #4]
   1a810:	cmp	r8, r0
   1a814:	str	r0, [sp]
   1a818:	bcs	1a8bc <__assert_fail@plt+0x8a28>
   1a81c:	mov	r9, #0
   1a820:	ldr	r0, [r8]
   1a824:	cmp	r0, #0
   1a828:	beq	1a8ac <__assert_fail@plt+0x8a18>
   1a82c:	ldr	r6, [r8, #4]
   1a830:	cmp	r6, #0
   1a834:	beq	1a8a8 <__assert_fail@plt+0x8a14>
   1a838:	ldr	r1, [r4, #8]
   1a83c:	ldr	r5, [r6]
   1a840:	ldr	r2, [r4, #24]
   1a844:	mov	r0, r5
   1a848:	blx	r2
   1a84c:	ldr	r1, [r4, #8]
   1a850:	cmp	r0, r1
   1a854:	bcs	1a8ec <__assert_fail@plt+0x8a58>
   1a858:	ldr	r3, [r4]
   1a85c:	ldr	r2, [r6, #4]
   1a860:	ldr	r7, [r3, r0, lsl #3]
   1a864:	cmp	r7, #0
   1a868:	beq	1a878 <__assert_fail@plt+0x89e4>
   1a86c:	add	r0, r3, r0, lsl #3
   1a870:	add	r0, r0, #4
   1a874:	b	1a890 <__assert_fail@plt+0x89fc>
   1a878:	str	r5, [r3, r0, lsl #3]
   1a87c:	ldr	r0, [r4, #12]
   1a880:	add	r0, r0, #1
   1a884:	str	r0, [r4, #12]
   1a888:	mov	r0, sl
   1a88c:	str	r9, [r6]
   1a890:	ldr	r3, [r0]
   1a894:	cmp	r2, #0
   1a898:	str	r3, [r6, #4]
   1a89c:	str	r6, [r0]
   1a8a0:	mov	r6, r2
   1a8a4:	bne	1a83c <__assert_fail@plt+0x89a8>
   1a8a8:	str	r9, [r8, #4]
   1a8ac:	ldr	r0, [sp]
   1a8b0:	add	r8, r8, #8
   1a8b4:	cmp	r8, r0
   1a8b8:	bcc	1a820 <__assert_fail@plt+0x898c>
   1a8bc:	add	r1, sp, #4
   1a8c0:	mov	r0, r4
   1a8c4:	mov	r2, #0
   1a8c8:	mov	r5, #0
   1a8cc:	bl	1a8f4 <__assert_fail@plt+0x8a60>
   1a8d0:	cmp	r0, #0
   1a8d4:	beq	1a8ec <__assert_fail@plt+0x8a58>
   1a8d8:	ldr	r0, [sp, #4]
   1a8dc:	bl	17754 <__assert_fail@plt+0x58c0>
   1a8e0:	mov	r0, r5
   1a8e4:	sub	sp, fp, #28
   1a8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8ec:	bl	11e58 <abort@plt>
   1a8f0:	svcmi	0x00800000
   1a8f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8f8:	add	fp, sp, #28
   1a8fc:	sub	sp, sp, #12
   1a900:	ldr	sl, [r1]
   1a904:	str	r1, [sp, #8]
   1a908:	ldr	r1, [r1, #4]
   1a90c:	mov	r7, r0
   1a910:	mov	r0, #1
   1a914:	str	r2, [sp, #4]
   1a918:	cmp	sl, r1
   1a91c:	bcs	1aa78 <__assert_fail@plt+0x8be4>
   1a920:	add	r8, r7, #36	; 0x24
   1a924:	mov	r9, #0
   1a928:	ldr	r4, [sl]
   1a92c:	cmp	r4, #0
   1a930:	beq	1aa60 <__assert_fail@plt+0x8bcc>
   1a934:	ldr	r5, [sl, #4]
   1a938:	cmp	r5, #0
   1a93c:	beq	1a9b4 <__assert_fail@plt+0x8b20>
   1a940:	ldr	r1, [r7, #8]
   1a944:	ldr	r4, [r5]
   1a948:	ldr	r2, [r7, #24]
   1a94c:	mov	r0, r4
   1a950:	blx	r2
   1a954:	ldr	r1, [r7, #8]
   1a958:	cmp	r0, r1
   1a95c:	bcs	1aa8c <__assert_fail@plt+0x8bf8>
   1a960:	ldr	r3, [r7]
   1a964:	ldr	r2, [r5, #4]
   1a968:	ldr	r6, [r3, r0, lsl #3]
   1a96c:	cmp	r6, #0
   1a970:	beq	1a980 <__assert_fail@plt+0x8aec>
   1a974:	add	r0, r3, r0, lsl #3
   1a978:	add	r0, r0, #4
   1a97c:	b	1a998 <__assert_fail@plt+0x8b04>
   1a980:	str	r4, [r3, r0, lsl #3]
   1a984:	ldr	r0, [r7, #12]
   1a988:	add	r0, r0, #1
   1a98c:	str	r0, [r7, #12]
   1a990:	mov	r0, r8
   1a994:	str	r9, [r5]
   1a998:	ldr	r3, [r0]
   1a99c:	cmp	r2, #0
   1a9a0:	str	r3, [r5, #4]
   1a9a4:	str	r5, [r0]
   1a9a8:	mov	r5, r2
   1a9ac:	bne	1a944 <__assert_fail@plt+0x8ab0>
   1a9b0:	ldr	r4, [sl]
   1a9b4:	ldr	r0, [sp, #4]
   1a9b8:	str	r9, [sl, #4]
   1a9bc:	cmp	r0, #0
   1a9c0:	bne	1aa60 <__assert_fail@plt+0x8bcc>
   1a9c4:	ldr	r1, [r7, #8]
   1a9c8:	ldr	r2, [r7, #24]
   1a9cc:	mov	r0, r4
   1a9d0:	blx	r2
   1a9d4:	mov	r5, r0
   1a9d8:	ldr	r0, [r7, #8]
   1a9dc:	cmp	r5, r0
   1a9e0:	bcs	1aa8c <__assert_fail@plt+0x8bf8>
   1a9e4:	ldr	r6, [r7]
   1a9e8:	ldr	r0, [r6, r5, lsl #3]
   1a9ec:	cmp	r0, #0
   1a9f0:	beq	1aa10 <__assert_fail@plt+0x8b7c>
   1a9f4:	ldr	r0, [r8]
   1a9f8:	cmp	r0, #0
   1a9fc:	beq	1aa24 <__assert_fail@plt+0x8b90>
   1aa00:	mov	r1, r0
   1aa04:	ldr	r2, [r1, #4]!
   1aa08:	str	r2, [r8]
   1aa0c:	b	1aa38 <__assert_fail@plt+0x8ba4>
   1aa10:	str	r4, [r6, r5, lsl #3]
   1aa14:	ldr	r0, [r7, #12]
   1aa18:	add	r0, r0, #1
   1aa1c:	str	r0, [r7, #12]
   1aa20:	b	1aa4c <__assert_fail@plt+0x8bb8>
   1aa24:	mov	r0, #8
   1aa28:	bl	33c98 <__assert_fail@plt+0x21e04>
   1aa2c:	cmp	r0, #0
   1aa30:	beq	1aa80 <__assert_fail@plt+0x8bec>
   1aa34:	add	r1, r0, #4
   1aa38:	str	r4, [r0]
   1aa3c:	add	r2, r6, r5, lsl #3
   1aa40:	ldr	r3, [r2, #4]
   1aa44:	str	r3, [r1]
   1aa48:	str	r0, [r2, #4]
   1aa4c:	ldr	r1, [sp, #8]
   1aa50:	str	r9, [sl]
   1aa54:	ldr	r0, [r1, #12]
   1aa58:	sub	r0, r0, #1
   1aa5c:	str	r0, [r1, #12]
   1aa60:	ldr	r0, [sp, #8]
   1aa64:	add	sl, sl, #8
   1aa68:	ldr	r0, [r0, #4]
   1aa6c:	cmp	sl, r0
   1aa70:	bcc	1a928 <__assert_fail@plt+0x8a94>
   1aa74:	mov	r0, #1
   1aa78:	sub	sp, fp, #28
   1aa7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa80:	mov	r0, #0
   1aa84:	sub	sp, fp, #28
   1aa88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa8c:	bl	11e58 <abort@plt>
   1aa90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa94:	add	fp, sp, #28
   1aa98:	sub	sp, sp, #4
   1aa9c:	cmp	r1, #0
   1aaa0:	beq	1adc4 <__assert_fail@plt+0x8f30>
   1aaa4:	mov	r8, r2
   1aaa8:	mov	sl, r1
   1aaac:	ldr	r1, [r0, #8]
   1aab0:	ldr	r2, [r0, #24]
   1aab4:	mov	r4, r0
   1aab8:	mov	r0, sl
   1aabc:	blx	r2
   1aac0:	mov	r7, r0
   1aac4:	ldr	r0, [r4, #8]
   1aac8:	cmp	r7, r0
   1aacc:	bcs	1adc4 <__assert_fail@plt+0x8f30>
   1aad0:	ldr	r5, [r4]
   1aad4:	mov	r9, r5
   1aad8:	ldr	r1, [r9, r7, lsl #3]!
   1aadc:	cmp	r1, #0
   1aae0:	beq	1ab6c <__assert_fail@plt+0x8cd8>
   1aae4:	cmp	r1, sl
   1aae8:	beq	1ab14 <__assert_fail@plt+0x8c80>
   1aaec:	ldr	r2, [r4, #28]
   1aaf0:	mov	r0, sl
   1aaf4:	blx	r2
   1aaf8:	cmp	r0, #0
   1aafc:	mov	r6, r9
   1ab00:	beq	1ab28 <__assert_fail@plt+0x8c94>
   1ab04:	ldr	r0, [r6]
   1ab08:	cmp	r0, #0
   1ab0c:	bne	1ab18 <__assert_fail@plt+0x8c84>
   1ab10:	b	1ab6c <__assert_fail@plt+0x8cd8>
   1ab14:	mov	r0, sl
   1ab18:	cmp	r8, #0
   1ab1c:	mov	r7, #0
   1ab20:	strne	r0, [r8]
   1ab24:	b	1ad60 <__assert_fail@plt+0x8ecc>
   1ab28:	add	r6, r5, r7, lsl #3
   1ab2c:	ldr	r0, [r6, #4]!
   1ab30:	cmp	r0, #0
   1ab34:	beq	1ab6c <__assert_fail@plt+0x8cd8>
   1ab38:	ldr	r1, [r0]
   1ab3c:	cmp	r1, sl
   1ab40:	beq	1ab60 <__assert_fail@plt+0x8ccc>
   1ab44:	ldr	r2, [r4, #28]
   1ab48:	mov	r0, sl
   1ab4c:	blx	r2
   1ab50:	ldr	r6, [r6]
   1ab54:	cmp	r0, #0
   1ab58:	beq	1ab2c <__assert_fail@plt+0x8c98>
   1ab5c:	b	1ab04 <__assert_fail@plt+0x8c70>
   1ab60:	mov	r0, sl
   1ab64:	cmp	r0, #0
   1ab68:	bne	1ab18 <__assert_fail@plt+0x8c84>
   1ab6c:	vldr	s0, [r4, #8]
   1ab70:	vldr	s2, [r4, #12]
   1ab74:	ldr	r0, [r4, #20]
   1ab78:	vcvt.f32.u32	s0, s0
   1ab7c:	vcvt.f32.u32	s4, s2
   1ab80:	vldr	s2, [r0, #8]
   1ab84:	vmul.f32	s6, s2, s0
   1ab88:	vcmpe.f32	s6, s4
   1ab8c:	vmrs	APSR_nzcv, fpscr
   1ab90:	bpl	1ace4 <__assert_fail@plt+0x8e50>
   1ab94:	movw	r1, #28112	; 0x6dd0
   1ab98:	movt	r1, #3
   1ab9c:	cmp	r0, r1
   1aba0:	beq	1ac2c <__assert_fail@plt+0x8d98>
   1aba4:	vldr	s6, [pc, #540]	; 1adc8 <__assert_fail@plt+0x8f34>
   1aba8:	vcmpe.f32	s2, s6
   1abac:	vmrs	APSR_nzcv, fpscr
   1abb0:	ble	1ac18 <__assert_fail@plt+0x8d84>
   1abb4:	vldr	s8, [pc, #528]	; 1adcc <__assert_fail@plt+0x8f38>
   1abb8:	vcmpe.f32	s2, s8
   1abbc:	vmrs	APSR_nzcv, fpscr
   1abc0:	bpl	1ac18 <__assert_fail@plt+0x8d84>
   1abc4:	vldr	s8, [pc, #516]	; 1add0 <__assert_fail@plt+0x8f3c>
   1abc8:	vldr	s10, [r0, #12]
   1abcc:	vcmpe.f32	s10, s8
   1abd0:	vmrs	APSR_nzcv, fpscr
   1abd4:	ble	1ac18 <__assert_fail@plt+0x8d84>
   1abd8:	vldr	s8, [r0]
   1abdc:	vcmpe.f32	s8, #0.0
   1abe0:	vmrs	APSR_nzcv, fpscr
   1abe4:	blt	1ac18 <__assert_fail@plt+0x8d84>
   1abe8:	vadd.f32	s6, s8, s6
   1abec:	vcmpe.f32	s6, s2
   1abf0:	vmrs	APSR_nzcv, fpscr
   1abf4:	bpl	1ac18 <__assert_fail@plt+0x8d84>
   1abf8:	vldr	s8, [r0, #4]
   1abfc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1ac00:	vcmpe.f32	s8, s10
   1ac04:	vmrs	APSR_nzcv, fpscr
   1ac08:	bhi	1ac18 <__assert_fail@plt+0x8d84>
   1ac0c:	vcmpe.f32	s6, s8
   1ac10:	vmrs	APSR_nzcv, fpscr
   1ac14:	bmi	1ac30 <__assert_fail@plt+0x8d9c>
   1ac18:	vldr	s2, [pc, #436]	; 1add4 <__assert_fail@plt+0x8f40>
   1ac1c:	movw	r0, #28112	; 0x6dd0
   1ac20:	movt	r0, #3
   1ac24:	str	r0, [r4, #20]
   1ac28:	b	1ac30 <__assert_fail@plt+0x8d9c>
   1ac2c:	mov	r0, r1
   1ac30:	vmul.f32	s6, s2, s0
   1ac34:	vcmpe.f32	s6, s4
   1ac38:	vmrs	APSR_nzcv, fpscr
   1ac3c:	bpl	1ace4 <__assert_fail@plt+0x8e50>
   1ac40:	vldr	s4, [r0, #12]
   1ac44:	ldrb	r0, [r0, #16]
   1ac48:	mvn	r7, #0
   1ac4c:	vmul.f32	s0, s4, s0
   1ac50:	vldr	s4, [pc, #384]	; 1add8 <__assert_fail@plt+0x8f44>
   1ac54:	cmp	r0, #0
   1ac58:	vmul.f32	s2, s2, s0
   1ac5c:	vseleq.f32	s0, s2, s0
   1ac60:	vcmpe.f32	s0, s4
   1ac64:	vmrs	APSR_nzcv, fpscr
   1ac68:	bge	1ad60 <__assert_fail@plt+0x8ecc>
   1ac6c:	vcvt.u32.f32	s0, s0
   1ac70:	mov	r0, r4
   1ac74:	vmov	r1, s0
   1ac78:	bl	1a690 <__assert_fail@plt+0x87fc>
   1ac7c:	cmp	r0, #0
   1ac80:	beq	1ad60 <__assert_fail@plt+0x8ecc>
   1ac84:	ldr	r1, [r4, #8]
   1ac88:	ldr	r2, [r4, #24]
   1ac8c:	mov	r0, sl
   1ac90:	blx	r2
   1ac94:	mov	r7, r0
   1ac98:	ldr	r0, [r4, #8]
   1ac9c:	cmp	r7, r0
   1aca0:	bcs	1adc4 <__assert_fail@plt+0x8f30>
   1aca4:	ldr	r5, [r4]
   1aca8:	mov	r9, r5
   1acac:	ldr	r1, [r9, r7, lsl #3]!
   1acb0:	cmp	r1, #0
   1acb4:	beq	1ad0c <__assert_fail@plt+0x8e78>
   1acb8:	cmp	r1, sl
   1acbc:	mov	r0, sl
   1acc0:	beq	1acdc <__assert_fail@plt+0x8e48>
   1acc4:	ldr	r2, [r4, #28]
   1acc8:	mov	r0, sl
   1accc:	blx	r2
   1acd0:	cmp	r0, #0
   1acd4:	beq	1ad74 <__assert_fail@plt+0x8ee0>
   1acd8:	ldr	r0, [r9]
   1acdc:	cmp	r0, #0
   1ace0:	bne	1adc4 <__assert_fail@plt+0x8f30>
   1ace4:	ldr	r0, [r9]
   1ace8:	cmp	r0, #0
   1acec:	beq	1ad0c <__assert_fail@plt+0x8e78>
   1acf0:	ldr	r0, [r4, #36]	; 0x24
   1acf4:	cmp	r0, #0
   1acf8:	beq	1ad2c <__assert_fail@plt+0x8e98>
   1acfc:	mov	r1, r0
   1ad00:	ldr	r2, [r1, #4]!
   1ad04:	str	r2, [r4, #36]	; 0x24
   1ad08:	b	1ad40 <__assert_fail@plt+0x8eac>
   1ad0c:	str	sl, [r9]
   1ad10:	ldr	r0, [r4, #12]
   1ad14:	ldr	r1, [r4, #16]
   1ad18:	add	r0, r0, #1
   1ad1c:	add	r1, r1, #1
   1ad20:	str	r0, [r4, #12]
   1ad24:	str	r1, [r4, #16]
   1ad28:	b	1ad5c <__assert_fail@plt+0x8ec8>
   1ad2c:	mov	r0, #8
   1ad30:	bl	33c98 <__assert_fail@plt+0x21e04>
   1ad34:	cmp	r0, #0
   1ad38:	beq	1ad6c <__assert_fail@plt+0x8ed8>
   1ad3c:	add	r1, r0, #4
   1ad40:	str	sl, [r0]
   1ad44:	ldr	r2, [r9, #4]
   1ad48:	str	r2, [r1]
   1ad4c:	str	r0, [r9, #4]
   1ad50:	ldr	r0, [r4, #16]
   1ad54:	add	r0, r0, #1
   1ad58:	str	r0, [r4, #16]
   1ad5c:	mov	r7, #1
   1ad60:	mov	r0, r7
   1ad64:	sub	sp, fp, #28
   1ad68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad6c:	mvn	r7, #0
   1ad70:	b	1ad60 <__assert_fail@plt+0x8ecc>
   1ad74:	add	r6, r5, r7, lsl #3
   1ad78:	ldr	r0, [r6, #4]!
   1ad7c:	cmp	r0, #0
   1ad80:	beq	1ace4 <__assert_fail@plt+0x8e50>
   1ad84:	ldr	r1, [r0]
   1ad88:	cmp	r1, sl
   1ad8c:	beq	1adb8 <__assert_fail@plt+0x8f24>
   1ad90:	ldr	r2, [r4, #28]
   1ad94:	mov	r0, sl
   1ad98:	blx	r2
   1ad9c:	ldr	r6, [r6]
   1ada0:	cmp	r0, #0
   1ada4:	beq	1ad78 <__assert_fail@plt+0x8ee4>
   1ada8:	ldr	r0, [r6]
   1adac:	cmp	r0, #0
   1adb0:	beq	1ace4 <__assert_fail@plt+0x8e50>
   1adb4:	b	1adc4 <__assert_fail@plt+0x8f30>
   1adb8:	mov	r0, sl
   1adbc:	cmp	r0, #0
   1adc0:	beq	1ace4 <__assert_fail@plt+0x8e50>
   1adc4:	bl	11e58 <abort@plt>
   1adc8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1adcc:	svccc	0x00666666
   1add0:	svccc	0x008ccccd
   1add4:	svccc	0x004ccccd
   1add8:	svcmi	0x00800000
   1addc:	push	{r4, sl, fp, lr}
   1ade0:	add	fp, sp, #8
   1ade4:	sub	sp, sp, #8
   1ade8:	add	r2, sp, #4
   1adec:	mov	r4, r1
   1adf0:	bl	1aa90 <__assert_fail@plt+0x8bfc>
   1adf4:	cmn	r0, #1
   1adf8:	beq	1ae0c <__assert_fail@plt+0x8f78>
   1adfc:	ldr	r1, [sp, #4]
   1ae00:	cmp	r0, #0
   1ae04:	moveq	r4, r1
   1ae08:	b	1ae10 <__assert_fail@plt+0x8f7c>
   1ae0c:	mov	r4, #0
   1ae10:	mov	r0, r4
   1ae14:	sub	sp, fp, #8
   1ae18:	pop	{r4, sl, fp, pc}
   1ae1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ae20:	add	fp, sp, #24
   1ae24:	mov	r9, r1
   1ae28:	ldr	r1, [r0, #8]
   1ae2c:	ldr	r2, [r0, #24]
   1ae30:	mov	r5, r0
   1ae34:	mov	r0, r9
   1ae38:	blx	r2
   1ae3c:	mov	r7, r0
   1ae40:	ldr	r0, [r5, #8]
   1ae44:	cmp	r7, r0
   1ae48:	bcs	1b0a8 <__assert_fail@plt+0x9214>
   1ae4c:	ldr	r6, [r5]
   1ae50:	mov	r8, #0
   1ae54:	mov	r4, r6
   1ae58:	ldr	r1, [r4, r7, lsl #3]!
   1ae5c:	cmp	r1, #0
   1ae60:	beq	1af14 <__assert_fail@plt+0x9080>
   1ae64:	cmp	r1, r9
   1ae68:	beq	1ae84 <__assert_fail@plt+0x8ff0>
   1ae6c:	ldr	r2, [r5, #28]
   1ae70:	mov	r0, r9
   1ae74:	blx	r2
   1ae78:	cmp	r0, #0
   1ae7c:	beq	1aebc <__assert_fail@plt+0x9028>
   1ae80:	ldr	r9, [r4]
   1ae84:	add	r0, r6, r7, lsl #3
   1ae88:	ldr	r0, [r0, #4]
   1ae8c:	cmp	r0, #0
   1ae90:	beq	1af04 <__assert_fail@plt+0x9070>
   1ae94:	ldm	r0, {r1, r2}
   1ae98:	stm	r4, {r1, r2}
   1ae9c:	mov	r1, #0
   1aea0:	str	r1, [r0]
   1aea4:	ldr	r1, [r5, #36]	; 0x24
   1aea8:	str	r1, [r0, #4]
   1aeac:	str	r0, [r5, #36]	; 0x24
   1aeb0:	cmp	r9, #0
   1aeb4:	bne	1af4c <__assert_fail@plt+0x90b8>
   1aeb8:	b	1af14 <__assert_fail@plt+0x9080>
   1aebc:	add	r7, r6, r7, lsl #3
   1aec0:	ldr	r0, [r7, #4]!
   1aec4:	cmp	r0, #0
   1aec8:	beq	1af14 <__assert_fail@plt+0x9080>
   1aecc:	ldr	r1, [r0]
   1aed0:	cmp	r1, r9
   1aed4:	beq	1af1c <__assert_fail@plt+0x9088>
   1aed8:	ldr	r2, [r5, #28]
   1aedc:	mov	r0, r9
   1aee0:	blx	r2
   1aee4:	ldr	r1, [r7]
   1aee8:	cmp	r0, #0
   1aeec:	bne	1af24 <__assert_fail@plt+0x9090>
   1aef0:	ldr	r0, [r1, #4]!
   1aef4:	cmp	r0, #0
   1aef8:	mov	r7, r1
   1aefc:	bne	1aecc <__assert_fail@plt+0x9038>
   1af00:	b	1af14 <__assert_fail@plt+0x9080>
   1af04:	mov	r0, #0
   1af08:	str	r0, [r4]
   1af0c:	cmp	r9, #0
   1af10:	bne	1af4c <__assert_fail@plt+0x90b8>
   1af14:	mov	r0, r8
   1af18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af1c:	mov	r1, r0
   1af20:	b	1af28 <__assert_fail@plt+0x9094>
   1af24:	ldr	r9, [r1]
   1af28:	ldr	r0, [r1, #4]
   1af2c:	str	r0, [r7]
   1af30:	mov	r0, #0
   1af34:	str	r0, [r1]
   1af38:	ldr	r0, [r5, #36]	; 0x24
   1af3c:	str	r0, [r1, #4]
   1af40:	str	r1, [r5, #36]	; 0x24
   1af44:	cmp	r9, #0
   1af48:	beq	1af14 <__assert_fail@plt+0x9080>
   1af4c:	ldr	r0, [r5, #16]
   1af50:	sub	r0, r0, #1
   1af54:	str	r0, [r5, #16]
   1af58:	ldr	r0, [r4]
   1af5c:	cmp	r0, #0
   1af60:	bne	1b068 <__assert_fail@plt+0x91d4>
   1af64:	ldr	r0, [r5, #12]
   1af68:	vldr	s0, [r5, #8]
   1af6c:	sub	r1, r0, #1
   1af70:	str	r1, [r5, #12]
   1af74:	vmov	s2, r1
   1af78:	ldr	r0, [r5, #20]
   1af7c:	vcvt.f32.u32	s0, s0
   1af80:	vcvt.f32.u32	s2, s2
   1af84:	vldr	s4, [r0]
   1af88:	vmul.f32	s6, s4, s0
   1af8c:	vcmpe.f32	s6, s2
   1af90:	vmrs	APSR_nzcv, fpscr
   1af94:	ble	1b068 <__assert_fail@plt+0x91d4>
   1af98:	movw	r1, #28112	; 0x6dd0
   1af9c:	movt	r1, #3
   1afa0:	cmp	r0, r1
   1afa4:	beq	1affc <__assert_fail@plt+0x9168>
   1afa8:	vldr	s8, [pc, #252]	; 1b0ac <__assert_fail@plt+0x9218>
   1afac:	vldr	s6, [r0, #8]
   1afb0:	vcmpe.f32	s6, s8
   1afb4:	vmrs	APSR_nzcv, fpscr
   1afb8:	ble	1afe8 <__assert_fail@plt+0x9154>
   1afbc:	vldr	s10, [pc, #236]	; 1b0b0 <__assert_fail@plt+0x921c>
   1afc0:	vcmpe.f32	s6, s10
   1afc4:	vmrs	APSR_nzcv, fpscr
   1afc8:	bpl	1afe8 <__assert_fail@plt+0x9154>
   1afcc:	vcmpe.f32	s4, #0.0
   1afd0:	vmrs	APSR_nzcv, fpscr
   1afd4:	vldrge	s10, [r0, #12]
   1afd8:	vldrge	s12, [pc, #212]	; 1b0b4 <__assert_fail@plt+0x9220>
   1afdc:	vcmpege.f32	s10, s12
   1afe0:	vmrsge	APSR_nzcv, fpscr
   1afe4:	bgt	1b074 <__assert_fail@plt+0x91e0>
   1afe8:	vldr	s4, [pc, #200]	; 1b0b8 <__assert_fail@plt+0x9224>
   1afec:	movw	r0, #28112	; 0x6dd0
   1aff0:	movt	r0, #3
   1aff4:	str	r0, [r5, #20]
   1aff8:	b	1b000 <__assert_fail@plt+0x916c>
   1affc:	mov	r0, r1
   1b000:	vmul.f32	s4, s4, s0
   1b004:	vcmpe.f32	s4, s2
   1b008:	vmrs	APSR_nzcv, fpscr
   1b00c:	ble	1b068 <__assert_fail@plt+0x91d4>
   1b010:	ldrb	r1, [r0, #16]
   1b014:	vldr	s2, [r0, #4]
   1b018:	cmp	r1, #0
   1b01c:	vmul.f32	s0, s2, s0
   1b020:	vldreq	s2, [r0, #8]
   1b024:	mov	r0, r5
   1b028:	vmuleq.f32	s0, s0, s2
   1b02c:	vcvt.u32.f32	s0, s0
   1b030:	vmov	r1, s0
   1b034:	bl	1a690 <__assert_fail@plt+0x87fc>
   1b038:	cmp	r0, #0
   1b03c:	bne	1b068 <__assert_fail@plt+0x91d4>
   1b040:	ldr	r0, [r5, #36]	; 0x24
   1b044:	cmp	r0, #0
   1b048:	beq	1b060 <__assert_fail@plt+0x91cc>
   1b04c:	ldr	r4, [r0, #4]
   1b050:	bl	17754 <__assert_fail@plt+0x58c0>
   1b054:	cmp	r4, #0
   1b058:	mov	r0, r4
   1b05c:	bne	1b04c <__assert_fail@plt+0x91b8>
   1b060:	mov	r0, #0
   1b064:	str	r0, [r5, #36]	; 0x24
   1b068:	mov	r8, r9
   1b06c:	mov	r0, r8
   1b070:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b074:	vadd.f32	s8, s4, s8
   1b078:	vcmpe.f32	s8, s6
   1b07c:	vmrs	APSR_nzcv, fpscr
   1b080:	bpl	1afe8 <__assert_fail@plt+0x9154>
   1b084:	vldr	s6, [r0, #4]
   1b088:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1b08c:	vcmpe.f32	s6, s10
   1b090:	vmrs	APSR_nzcv, fpscr
   1b094:	bhi	1afe8 <__assert_fail@plt+0x9154>
   1b098:	vcmpe.f32	s8, s6
   1b09c:	vmrs	APSR_nzcv, fpscr
   1b0a0:	bmi	1b000 <__assert_fail@plt+0x916c>
   1b0a4:	b	1afe8 <__assert_fail@plt+0x9154>
   1b0a8:	bl	11e58 <abort@plt>
   1b0ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b0b0:	svccc	0x00666666
   1b0b4:	svccc	0x008ccccd
   1b0b8:	andeq	r0, r0, r0
   1b0bc:	b	1ae1c <__assert_fail@plt+0x8f88>
   1b0c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0c4:	add	fp, sp, #28
   1b0c8:	sub	sp, sp, #4
   1b0cc:	vpush	{d8-d9}
   1b0d0:	sub	sp, sp, #104	; 0x68
   1b0d4:	mov	r7, r3
   1b0d8:	mov	r6, r2
   1b0dc:	mov	r9, r1
   1b0e0:	str	r0, [sp, #44]	; 0x2c
   1b0e4:	bl	11d98 <localeconv@plt>
   1b0e8:	ldr	r5, [r0]
   1b0ec:	mov	r4, r0
   1b0f0:	mov	r0, r5
   1b0f4:	bl	11c78 <strlen@plt>
   1b0f8:	movw	r2, #27936	; 0x6d20
   1b0fc:	sub	r1, r0, #1
   1b100:	cmp	r1, #16
   1b104:	movt	r2, #3
   1b108:	movcc	r2, r5
   1b10c:	ldr	r5, [r4, #4]
   1b110:	ldr	r4, [r4, #8]
   1b114:	movcs	r0, #1
   1b118:	str	r0, [sp, #16]
   1b11c:	str	r2, [sp, #12]
   1b120:	mov	r0, r5
   1b124:	bl	11c78 <strlen@plt>
   1b128:	movw	r3, #24652	; 0x604c
   1b12c:	cmp	r0, #17
   1b130:	movw	r0, #647	; 0x287
   1b134:	ldr	r2, [fp, #16]
   1b138:	ldr	sl, [fp, #8]
   1b13c:	ldr	r8, [fp, #12]
   1b140:	str	r6, [sp, #28]
   1b144:	str	r7, [sp, #36]	; 0x24
   1b148:	str	r4, [sp, #20]
   1b14c:	movt	r3, #3
   1b150:	add	r1, r6, r0
   1b154:	movcc	r3, r5
   1b158:	ands	r0, r7, #32
   1b15c:	ldr	r5, [fp, #20]
   1b160:	str	r1, [sp, #32]
   1b164:	str	r0, [sp, #24]
   1b168:	mov	r0, #1000	; 0x3e8
   1b16c:	str	r3, [sp, #52]	; 0x34
   1b170:	movwne	r0, #1024	; 0x400
   1b174:	str	r0, [sp, #40]	; 0x28
   1b178:	and	r0, r7, #3
   1b17c:	str	r0, [sp, #48]	; 0x30
   1b180:	subs	r0, sl, r2
   1b184:	sbcs	r0, r8, r5
   1b188:	bcs	1b27c <__assert_fail@plt+0x93e8>
   1b18c:	orrs	r0, sl, r8
   1b190:	mov	r4, r9
   1b194:	beq	1b364 <__assert_fail@plt+0x94d0>
   1b198:	ldr	r5, [fp, #20]
   1b19c:	mov	r0, r2
   1b1a0:	mov	r2, sl
   1b1a4:	mov	r3, r8
   1b1a8:	mov	r1, r5
   1b1ac:	bl	352f0 <__assert_fail@plt+0x2345c>
   1b1b0:	ldr	r2, [fp, #16]
   1b1b4:	mov	r6, r0
   1b1b8:	mov	r3, r1
   1b1bc:	umull	r0, r1, r0, sl
   1b1c0:	mla	r1, r6, r8, r1
   1b1c4:	mla	r1, r3, sl, r1
   1b1c8:	subs	r0, r2, r0
   1b1cc:	sbc	r1, r5, r1
   1b1d0:	orrs	r0, r0, r1
   1b1d4:	bne	1b364 <__assert_fail@plt+0x94d0>
   1b1d8:	ldr	r5, [sp, #44]	; 0x2c
   1b1dc:	mov	r1, r4
   1b1e0:	mov	r2, r6
   1b1e4:	mov	r8, r3
   1b1e8:	mov	r0, r5
   1b1ec:	bl	352f0 <__assert_fail@plt+0x2345c>
   1b1f0:	mov	r7, r0
   1b1f4:	mov	r9, r1
   1b1f8:	umull	r0, r1, r0, r6
   1b1fc:	mov	r2, #10
   1b200:	mov	r3, r8
   1b204:	mla	r1, r7, r8, r1
   1b208:	subs	r0, r5, r0
   1b20c:	mla	r1, r9, r6, r1
   1b210:	umull	sl, r0, r0, r2
   1b214:	mov	r2, r6
   1b218:	sbc	r1, r4, r1
   1b21c:	add	r1, r1, r1, lsl #2
   1b220:	add	r5, r0, r1, lsl #1
   1b224:	mov	r0, sl
   1b228:	mov	r1, r5
   1b22c:	bl	352f0 <__assert_fail@plt+0x2345c>
   1b230:	mov	r4, r0
   1b234:	umull	r0, r2, r0, r6
   1b238:	mla	r2, r4, r8, r2
   1b23c:	subs	r0, sl, r0
   1b240:	mla	r1, r1, r6, r2
   1b244:	mov	r2, #2
   1b248:	sbc	r1, r5, r1
   1b24c:	subs	r3, r6, r0, lsl #1
   1b250:	lsl	r1, r1, #1
   1b254:	orr	r1, r1, r0, lsr #31
   1b258:	sbcs	r3, r8, r1
   1b25c:	orr	r5, r1, r0, lsl #1
   1b260:	movwcc	r2, #3
   1b264:	cmp	r5, #0
   1b268:	movwne	r5, #1
   1b26c:	rsbs	r0, r6, r0, lsl #1
   1b270:	sbcs	r0, r1, r8
   1b274:	movcs	r5, r2
   1b278:	b	1b2f4 <__assert_fail@plt+0x9460>
   1b27c:	mov	r0, sl
   1b280:	mov	r1, r8
   1b284:	mov	r3, r5
   1b288:	bl	352f0 <__assert_fail@plt+0x2345c>
   1b28c:	ldr	r2, [fp, #16]
   1b290:	mov	r6, r0
   1b294:	mov	r3, r1
   1b298:	mov	r4, r9
   1b29c:	umull	r0, r1, r0, r2
   1b2a0:	mla	r1, r6, r5, r1
   1b2a4:	subs	r0, sl, r0
   1b2a8:	mla	r1, r3, r2, r1
   1b2ac:	sbc	r1, r8, r1
   1b2b0:	orrs	r0, r0, r1
   1b2b4:	bne	1b364 <__assert_fail@plt+0x94d0>
   1b2b8:	ldr	r5, [sp, #44]	; 0x2c
   1b2bc:	mov	r2, r6
   1b2c0:	umull	r7, r0, r6, r5
   1b2c4:	mla	r0, r6, r4, r0
   1b2c8:	mla	r9, r3, r5, r0
   1b2cc:	mov	r0, r7
   1b2d0:	mov	r1, r9
   1b2d4:	bl	352f0 <__assert_fail@plt+0x2345c>
   1b2d8:	ldr	r2, [fp, #16]
   1b2dc:	eor	r1, r1, r4
   1b2e0:	eor	r0, r0, r5
   1b2e4:	orrs	r0, r0, r1
   1b2e8:	bne	1b364 <__assert_fail@plt+0x94d0>
   1b2ec:	mov	r5, #0
   1b2f0:	mov	r4, #0
   1b2f4:	ldr	r0, [sp, #36]	; 0x24
   1b2f8:	ldr	r2, [sp, #40]	; 0x28
   1b2fc:	mvn	r6, #0
   1b300:	ands	r8, r0, #16
   1b304:	beq	1b318 <__assert_fail@plt+0x9484>
   1b308:	subs	r0, r7, r2
   1b30c:	mov	r6, #0
   1b310:	sbcs	r0, r9, #0
   1b314:	bcs	1b840 <__assert_fail@plt+0x99ac>
   1b318:	ldr	r0, [sp, #32]
   1b31c:	mov	sl, r7
   1b320:	str	r0, [sp, #44]	; 0x2c
   1b324:	ldr	r0, [sp, #48]	; 0x30
   1b328:	cmp	r0, #0
   1b32c:	beq	1b654 <__assert_fail@plt+0x97c0>
   1b330:	cmp	r0, #1
   1b334:	bne	1b6c8 <__assert_fail@plt+0x9834>
   1b338:	rsbs	r1, r5, #0
   1b33c:	mov	r0, #0
   1b340:	and	r3, sl, #1
   1b344:	ldr	r5, [sp, #44]	; 0x2c
   1b348:	sbc	r0, r0, #0
   1b34c:	eor	r1, r3, r1
   1b350:	orrs	r0, r1, r0
   1b354:	addne	r4, r4, #1
   1b358:	cmp	r4, #5
   1b35c:	bgt	1b664 <__assert_fail@plt+0x97d0>
   1b360:	b	1b6b8 <__assert_fail@plt+0x9824>
   1b364:	ldr	r9, [fp, #20]
   1b368:	mov	r0, r2
   1b36c:	mov	r1, r9
   1b370:	bl	351a8 <__assert_fail@plt+0x23314>
   1b374:	vmov	d8, r0, r1
   1b378:	ldr	r0, [sp, #44]	; 0x2c
   1b37c:	mov	r1, r4
   1b380:	bl	351a8 <__assert_fail@plt+0x23314>
   1b384:	mov	r6, r0
   1b388:	mov	r7, r1
   1b38c:	mov	r0, sl
   1b390:	mov	r1, r8
   1b394:	bl	351a8 <__assert_fail@plt+0x23314>
   1b398:	vmov	d17, r6, r7
   1b39c:	ldr	r7, [sp, #36]	; 0x24
   1b3a0:	vmov	d16, r0, r1
   1b3a4:	vdiv.f64	d16, d16, d8
   1b3a8:	vmul.f64	d8, d16, d17
   1b3ac:	tst	r7, #16
   1b3b0:	bne	1b424 <__assert_fail@plt+0x9590>
   1b3b4:	ldr	r0, [sp, #48]	; 0x30
   1b3b8:	ldr	sl, [sp, #28]
   1b3bc:	cmp	r0, #1
   1b3c0:	beq	1b5ac <__assert_fail@plt+0x9718>
   1b3c4:	vldr	d16, [pc, #756]	; 1b6c0 <__assert_fail@plt+0x982c>
   1b3c8:	ldr	r8, [sp, #32]
   1b3cc:	vcmpe.f64	d8, d16
   1b3d0:	vmrs	APSR_nzcv, fpscr
   1b3d4:	bpl	1b5b0 <__assert_fail@plt+0x971c>
   1b3d8:	mov	r6, r0
   1b3dc:	vmov	r0, r1, d8
   1b3e0:	bl	35340 <__assert_fail@plt+0x234ac>
   1b3e4:	mov	r4, r0
   1b3e8:	mov	r5, r1
   1b3ec:	bl	351a8 <__assert_fail@plt+0x23314>
   1b3f0:	vmov	d16, r0, r1
   1b3f4:	clz	r0, r6
   1b3f8:	mov	r2, #0
   1b3fc:	vcmp.f64	d8, d16
   1b400:	lsr	r0, r0, #5
   1b404:	vmrs	APSR_nzcv, fpscr
   1b408:	movwne	r2, #1
   1b40c:	and	r0, r0, r2
   1b410:	adds	r0, r0, r4
   1b414:	adc	r1, r5, #0
   1b418:	bl	351a8 <__assert_fail@plt+0x23314>
   1b41c:	vmov	d8, r0, r1
   1b420:	b	1b5b0 <__assert_fail@plt+0x971c>
   1b424:	ldr	r0, [sp, #40]	; 0x28
   1b428:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1b42c:	mov	r6, #0
   1b430:	vmov	s0, r0
   1b434:	vcvt.f64.u32	d17, s0
   1b438:	ldr	sl, [sp, #28]
   1b43c:	add	r6, r6, #1
   1b440:	vmul.f64	d16, d16, d17
   1b444:	cmp	r6, #7
   1b448:	vmulls.f64	d18, d16, d17
   1b44c:	vcmpels.f64	d18, d8
   1b450:	vmrsls	APSR_nzcv, fpscr
   1b454:	bls	1b43c <__assert_fail@plt+0x95a8>
   1b458:	ldr	r0, [sp, #48]	; 0x30
   1b45c:	ldr	r8, [sp, #32]
   1b460:	ldr	r5, [sp, #16]
   1b464:	vdiv.f64	d8, d8, d16
   1b468:	vmov.f64	d16, d8
   1b46c:	cmp	r0, #1
   1b470:	beq	1b4d4 <__assert_fail@plt+0x9640>
   1b474:	vldr	d16, [pc, #580]	; 1b6c0 <__assert_fail@plt+0x982c>
   1b478:	vcmpe.f64	d8, d16
   1b47c:	vmov.f64	d16, d8
   1b480:	vmrs	APSR_nzcv, fpscr
   1b484:	bpl	1b4d4 <__assert_fail@plt+0x9640>
   1b488:	vmov	r0, r1, d8
   1b48c:	bl	35340 <__assert_fail@plt+0x234ac>
   1b490:	mov	r4, r0
   1b494:	mov	r5, r1
   1b498:	bl	351a8 <__assert_fail@plt+0x23314>
   1b49c:	vmov	d16, r0, r1
   1b4a0:	ldr	r0, [sp, #48]	; 0x30
   1b4a4:	mov	r2, #0
   1b4a8:	vcmp.f64	d8, d16
   1b4ac:	vmrs	APSR_nzcv, fpscr
   1b4b0:	movwne	r2, #1
   1b4b4:	clz	r0, r0
   1b4b8:	lsr	r0, r0, #5
   1b4bc:	and	r0, r0, r2
   1b4c0:	adds	r0, r0, r4
   1b4c4:	adc	r1, r5, #0
   1b4c8:	ldr	r5, [sp, #16]
   1b4cc:	bl	351a8 <__assert_fail@plt+0x23314>
   1b4d0:	vmov	d16, r0, r1
   1b4d4:	movw	r3, #28138	; 0x6dea
   1b4d8:	mov	r0, sl
   1b4dc:	mov	r1, #1
   1b4e0:	mvn	r2, #0
   1b4e4:	vstr	d16, [sp]
   1b4e8:	movt	r3, #3
   1b4ec:	bl	11cc0 <__sprintf_chk@plt>
   1b4f0:	ldr	r1, [sp, #24]
   1b4f4:	mov	r0, #3
   1b4f8:	cmp	r1, #0
   1b4fc:	movwne	r0, #2
   1b500:	add	r4, r0, r5
   1b504:	mov	r0, sl
   1b508:	bl	11c78 <strlen@plt>
   1b50c:	cmp	r4, r0
   1b510:	bcc	1b534 <__assert_fail@plt+0x96a0>
   1b514:	mov	r2, r0
   1b518:	add	r5, r5, #1
   1b51c:	tst	r7, #8
   1b520:	beq	1b5e0 <__assert_fail@plt+0x974c>
   1b524:	add	r0, sl, r2
   1b528:	ldrb	r0, [r0, #-1]
   1b52c:	cmp	r0, #48	; 0x30
   1b530:	bne	1b5e0 <__assert_fail@plt+0x974c>
   1b534:	ldr	r0, [sp, #48]	; 0x30
   1b538:	vmov.f64	d9, #36	; 0x41200000  10.0
   1b53c:	vmul.f64	d8, d8, d9
   1b540:	cmp	r0, #1
   1b544:	beq	1b5a0 <__assert_fail@plt+0x970c>
   1b548:	vldr	d16, [pc, #368]	; 1b6c0 <__assert_fail@plt+0x982c>
   1b54c:	vcmpe.f64	d8, d16
   1b550:	vmrs	APSR_nzcv, fpscr
   1b554:	bpl	1b5a0 <__assert_fail@plt+0x970c>
   1b558:	vmov	r0, r1, d8
   1b55c:	bl	35340 <__assert_fail@plt+0x234ac>
   1b560:	mov	r4, r0
   1b564:	mov	r5, r1
   1b568:	bl	351a8 <__assert_fail@plt+0x23314>
   1b56c:	vmov	d16, r0, r1
   1b570:	ldr	r0, [sp, #48]	; 0x30
   1b574:	mov	r2, #0
   1b578:	vcmp.f64	d8, d16
   1b57c:	vmrs	APSR_nzcv, fpscr
   1b580:	movwne	r2, #1
   1b584:	clz	r0, r0
   1b588:	lsr	r0, r0, #5
   1b58c:	and	r0, r0, r2
   1b590:	adds	r0, r0, r4
   1b594:	adc	r1, r5, #0
   1b598:	bl	351a8 <__assert_fail@plt+0x23314>
   1b59c:	vmov	d8, r0, r1
   1b5a0:	vdiv.f64	d16, d8, d9
   1b5a4:	vstr	d16, [sp]
   1b5a8:	b	1b5b8 <__assert_fail@plt+0x9724>
   1b5ac:	ldr	r8, [sp, #32]
   1b5b0:	mvn	r6, #0
   1b5b4:	vstr	d8, [sp]
   1b5b8:	movw	r3, #28132	; 0x6de4
   1b5bc:	mov	r0, sl
   1b5c0:	mov	r1, #1
   1b5c4:	mvn	r2, #0
   1b5c8:	movt	r3, #3
   1b5cc:	bl	11cc0 <__sprintf_chk@plt>
   1b5d0:	mov	r0, sl
   1b5d4:	bl	11c78 <strlen@plt>
   1b5d8:	mov	r2, r0
   1b5dc:	mov	r5, #0
   1b5e0:	sub	r4, r8, r2
   1b5e4:	mov	r1, sl
   1b5e8:	mov	r0, r4
   1b5ec:	bl	11a50 <memmove@plt>
   1b5f0:	sub	r5, r8, r5
   1b5f4:	tst	r7, #4
   1b5f8:	bne	1b720 <__assert_fail@plt+0x988c>
   1b5fc:	ldr	r3, [sp, #40]	; 0x28
   1b600:	ldr	r5, [fp, #16]
   1b604:	tst	r7, #128	; 0x80
   1b608:	beq	1b95c <__assert_fail@plt+0x9ac8>
   1b60c:	cmn	r6, #1
   1b610:	bgt	1b8f4 <__assert_fail@plt+0x9a60>
   1b614:	subs	r0, r5, #2
   1b618:	mov	r6, #0
   1b61c:	sbcs	r0, r9, #0
   1b620:	bcc	1b8f4 <__assert_fail@plt+0x9a60>
   1b624:	mov	r0, #0
   1b628:	mov	r1, #1
   1b62c:	mov	r6, #0
   1b630:	cmp	r6, #7
   1b634:	beq	1b8f0 <__assert_fail@plt+0x9a5c>
   1b638:	umull	r1, r2, r1, r3
   1b63c:	add	r6, r6, #1
   1b640:	mla	r0, r0, r3, r2
   1b644:	subs	r2, r1, r5
   1b648:	sbcs	r2, r0, r9
   1b64c:	bcc	1b630 <__assert_fail@plt+0x979c>
   1b650:	b	1b8f4 <__assert_fail@plt+0x9a60>
   1b654:	add	r0, r4, r5
   1b658:	ldr	r5, [sp, #44]	; 0x2c
   1b65c:	cmp	r0, #1
   1b660:	blt	1b6b8 <__assert_fail@plt+0x9824>
   1b664:	adds	sl, sl, #1
   1b668:	adc	r9, r9, #0
   1b66c:	cmp	r6, #7
   1b670:	bgt	1b6b8 <__assert_fail@plt+0x9824>
   1b674:	cmp	r8, #0
   1b678:	beq	1b6b8 <__assert_fail@plt+0x9824>
   1b67c:	eor	r0, sl, r2
   1b680:	orrs	r0, r0, r9
   1b684:	ldreq	r0, [sp, #36]	; 0x24
   1b688:	addeq	r6, r6, #1
   1b68c:	moveq	r9, #0
   1b690:	moveq	sl, #1
   1b694:	tsteq	r0, #8
   1b698:	bne	1b6b8 <__assert_fail@plt+0x9824>
   1b69c:	ldr	r2, [sp, #16]
   1b6a0:	mov	r0, #48	; 0x30
   1b6a4:	ldr	r1, [sp, #12]
   1b6a8:	strb	r0, [r5, #-1]!
   1b6ac:	sub	r5, r5, r2
   1b6b0:	mov	r0, r5
   1b6b4:	bl	11a8c <memcpy@plt>
   1b6b8:	ldr	r8, [sp, #32]
   1b6bc:	b	1b6d0 <__assert_fail@plt+0x983c>
   1b6c0:	andeq	r0, r0, r0
   1b6c4:	mvnsmi	r0, #0
   1b6c8:	ldr	r8, [sp, #32]
   1b6cc:	ldr	r5, [sp, #44]	; 0x2c
   1b6d0:	mov	r4, r5
   1b6d4:	mov	r0, sl
   1b6d8:	mov	r1, r9
   1b6dc:	mov	r2, #10
   1b6e0:	mov	r3, #0
   1b6e4:	bl	352f0 <__assert_fail@plt+0x2345c>
   1b6e8:	add	r2, r0, r0, lsl #2
   1b6ec:	sub	r2, sl, r2, lsl #1
   1b6f0:	orr	r2, r2, #48	; 0x30
   1b6f4:	strb	r2, [r4, #-1]!
   1b6f8:	rsbs	r2, sl, #9
   1b6fc:	mov	sl, r0
   1b700:	rscs	r2, r9, #0
   1b704:	mov	r9, r1
   1b708:	bcc	1b6d4 <__assert_fail@plt+0x9840>
   1b70c:	ldr	r7, [sp, #36]	; 0x24
   1b710:	ldr	r9, [fp, #20]
   1b714:	ldr	sl, [sp, #28]
   1b718:	tst	r7, #4
   1b71c:	beq	1b5fc <__assert_fail@plt+0x9768>
   1b720:	ldr	r0, [sp, #52]	; 0x34
   1b724:	mov	r7, r5
   1b728:	str	r6, [sp, #16]
   1b72c:	sub	r5, r5, r4
   1b730:	bl	11c78 <strlen@plt>
   1b734:	add	r8, sp, #56	; 0x38
   1b738:	str	r0, [sp, #48]	; 0x30
   1b73c:	mov	r1, r4
   1b740:	mov	r2, r5
   1b744:	mov	r0, r8
   1b748:	bl	11a8c <memcpy@plt>
   1b74c:	ldr	r0, [sp, #20]
   1b750:	ldrb	r6, [r0]
   1b754:	cmp	r6, #255	; 0xff
   1b758:	mov	r9, r6
   1b75c:	moveq	r9, r5
   1b760:	cmp	r6, #0
   1b764:	mvneq	r9, #0
   1b768:	cmp	r9, r5
   1b76c:	movhi	r9, r5
   1b770:	sub	r4, r7, r9
   1b774:	sub	r7, r5, r9
   1b778:	mov	r2, r9
   1b77c:	add	r1, r8, r7
   1b780:	mov	r0, r4
   1b784:	bl	11a8c <memcpy@plt>
   1b788:	cmp	r7, #0
   1b78c:	beq	1b818 <__assert_fail@plt+0x9984>
   1b790:	clz	r0, r6
   1b794:	ldr	r8, [sp, #20]
   1b798:	lsr	sl, r0, #5
   1b79c:	ldr	r0, [sp, #48]	; 0x30
   1b7a0:	rsb	r0, r0, #0
   1b7a4:	str	r0, [sp, #44]	; 0x2c
   1b7a8:	ldr	r0, [sp, #44]	; 0x2c
   1b7ac:	ldr	r1, [sp, #52]	; 0x34
   1b7b0:	ldr	r2, [sp, #48]	; 0x30
   1b7b4:	add	r4, r4, r0
   1b7b8:	mov	r0, r4
   1b7bc:	bl	11a8c <memcpy@plt>
   1b7c0:	tst	sl, #1
   1b7c4:	add	r0, sp, #56	; 0x38
   1b7c8:	addeq	r8, r8, #1
   1b7cc:	ldrb	r6, [r8]
   1b7d0:	cmp	r6, #255	; 0xff
   1b7d4:	mov	r5, r6
   1b7d8:	moveq	r5, r7
   1b7dc:	cmp	r6, #0
   1b7e0:	moveq	r5, r9
   1b7e4:	cmp	r7, r5
   1b7e8:	movcc	r5, r7
   1b7ec:	sub	r7, r7, r5
   1b7f0:	sub	r4, r4, r5
   1b7f4:	mov	r2, r5
   1b7f8:	add	r1, r0, r7
   1b7fc:	mov	r0, r4
   1b800:	bl	11a8c <memcpy@plt>
   1b804:	clz	r0, r6
   1b808:	cmp	r7, #0
   1b80c:	mov	r9, r5
   1b810:	lsr	sl, r0, #5
   1b814:	bne	1b7a8 <__assert_fail@plt+0x9914>
   1b818:	ldr	r8, [sp, #32]
   1b81c:	ldr	sl, [sp, #28]
   1b820:	ldr	r7, [sp, #36]	; 0x24
   1b824:	ldr	r3, [sp, #40]	; 0x28
   1b828:	ldr	r9, [fp, #20]
   1b82c:	ldr	r5, [fp, #16]
   1b830:	ldr	r6, [sp, #16]
   1b834:	tst	r7, #128	; 0x80
   1b838:	bne	1b60c <__assert_fail@plt+0x9778>
   1b83c:	b	1b95c <__assert_fail@plt+0x9ac8>
   1b840:	mov	r6, #0
   1b844:	mov	r0, r7
   1b848:	mov	r1, r9
   1b84c:	mov	r3, #0
   1b850:	bl	352f0 <__assert_fail@plt+0x2345c>
   1b854:	ldr	r2, [sp, #40]	; 0x28
   1b858:	mov	sl, r0
   1b85c:	mov	r9, r1
   1b860:	mls	r0, r0, r2, r7
   1b864:	add	r0, r0, r0, lsl #2
   1b868:	add	r0, r4, r0, lsl #1
   1b86c:	udiv	r4, r0, r2
   1b870:	mls	r0, r4, r2, r0
   1b874:	lsl	r0, r0, #1
   1b878:	add	r0, r0, r5, lsr #1
   1b87c:	cmp	r0, r2
   1b880:	bcs	1b898 <__assert_fail@plt+0x9a04>
   1b884:	add	r1, r0, r5
   1b888:	cmn	r0, r5
   1b88c:	movwne	r1, #1
   1b890:	mov	r5, r1
   1b894:	b	1b8a8 <__assert_fail@plt+0x9a14>
   1b898:	add	r0, r0, r5
   1b89c:	mov	r5, #2
   1b8a0:	cmp	r2, r0
   1b8a4:	movwcc	r5, #3
   1b8a8:	add	r6, r6, #1
   1b8ac:	cmp	r6, #7
   1b8b0:	bhi	1b8c4 <__assert_fail@plt+0x9a30>
   1b8b4:	subs	r0, sl, r2
   1b8b8:	mov	r7, sl
   1b8bc:	sbcs	r0, r9, #0
   1b8c0:	bcs	1b844 <__assert_fail@plt+0x99b0>
   1b8c4:	rsbs	r0, sl, #9
   1b8c8:	rscs	r0, r9, #0
   1b8cc:	bcc	1b978 <__assert_fail@plt+0x9ae4>
   1b8d0:	ldr	r0, [sp, #48]	; 0x30
   1b8d4:	cmp	r0, #1
   1b8d8:	bne	1b980 <__assert_fail@plt+0x9aec>
   1b8dc:	and	r0, r4, #1
   1b8e0:	add	r0, r5, r0
   1b8e4:	cmp	r0, #2
   1b8e8:	bhi	1b990 <__assert_fail@plt+0x9afc>
   1b8ec:	b	1b9c4 <__assert_fail@plt+0x9b30>
   1b8f0:	mov	r6, #8
   1b8f4:	and	r0, r7, #256	; 0x100
   1b8f8:	tst	r7, #64	; 0x40
   1b8fc:	orrsne	r1, r6, r0
   1b900:	movne	r1, #32
   1b904:	addne	r8, sl, #648	; 0x288
   1b908:	strbne	r1, [sl, #647]	; 0x287
   1b90c:	cmp	r6, #0
   1b910:	beq	1b938 <__assert_fail@plt+0x9aa4>
   1b914:	ldr	r1, [sp, #24]
   1b918:	cmp	r1, #0
   1b91c:	moveq	r1, #107	; 0x6b
   1b920:	cmpeq	r6, #1
   1b924:	beq	1b934 <__assert_fail@plt+0x9aa0>
   1b928:	movw	r1, #28188	; 0x6e1c
   1b92c:	movt	r1, #3
   1b930:	ldrb	r1, [r1, r6]
   1b934:	strb	r1, [r8], #1
   1b938:	cmp	r0, #0
   1b93c:	beq	1b95c <__assert_fail@plt+0x9ac8>
   1b940:	ldr	r0, [sp, #24]
   1b944:	cmp	r0, #0
   1b948:	cmpne	r6, #0
   1b94c:	movne	r0, #105	; 0x69
   1b950:	strbne	r0, [r8], #1
   1b954:	mov	r0, #66	; 0x42
   1b958:	strb	r0, [r8], #1
   1b95c:	mov	r0, #0
   1b960:	strb	r0, [r8]
   1b964:	mov	r0, r4
   1b968:	sub	sp, fp, #48	; 0x30
   1b96c:	vpop	{d8-d9}
   1b970:	add	sp, sp, #4
   1b974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b978:	ldr	r0, [sp, #32]
   1b97c:	b	1b320 <__assert_fail@plt+0x948c>
   1b980:	cmp	r0, #0
   1b984:	bne	1b9c4 <__assert_fail@plt+0x9b30>
   1b988:	cmp	r5, #0
   1b98c:	beq	1b9c4 <__assert_fail@plt+0x9b30>
   1b990:	adds	r0, sl, #1
   1b994:	add	r4, r4, #1
   1b998:	mov	r5, #0
   1b99c:	adc	r1, r9, #0
   1b9a0:	cmp	r4, #10
   1b9a4:	bne	1b9c4 <__assert_fail@plt+0x9b30>
   1b9a8:	rsbs	r3, r0, #9
   1b9ac:	mov	r4, #0
   1b9b0:	mov	sl, r0
   1b9b4:	mov	r9, r1
   1b9b8:	mov	r5, #0
   1b9bc:	rscs	r3, r1, #0
   1b9c0:	bcc	1ba14 <__assert_fail@plt+0x9b80>
   1b9c4:	ldr	r0, [sp, #36]	; 0x24
   1b9c8:	tst	r0, #8
   1b9cc:	beq	1b9e4 <__assert_fail@plt+0x9b50>
   1b9d0:	cmp	r4, #0
   1b9d4:	bne	1b9e4 <__assert_fail@plt+0x9b50>
   1b9d8:	ldr	r0, [sp, #32]
   1b9dc:	str	r0, [sp, #44]	; 0x2c
   1b9e0:	b	1ba0c <__assert_fail@plt+0x9b78>
   1b9e4:	ldr	r1, [sp, #28]
   1b9e8:	ldr	r2, [sp, #16]
   1b9ec:	add	r0, r4, #48	; 0x30
   1b9f0:	strb	r0, [r1, #646]!	; 0x286
   1b9f4:	sub	r0, r1, r2
   1b9f8:	ldr	r1, [sp, #12]
   1b9fc:	str	r0, [sp, #44]	; 0x2c
   1ba00:	bl	11a8c <memcpy@plt>
   1ba04:	ldr	r2, [sp, #40]	; 0x28
   1ba08:	mov	r5, #0
   1ba0c:	mov	r4, #0
   1ba10:	b	1b324 <__assert_fail@plt+0x9490>
   1ba14:	ldr	r0, [sp, #32]
   1ba18:	mov	r5, #0
   1ba1c:	mov	sl, #10
   1ba20:	mov	r9, #0
   1ba24:	b	1b320 <__assert_fail@plt+0x948c>
   1ba28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ba2c:	add	fp, sp, #24
   1ba30:	sub	sp, sp, #8
   1ba34:	mov	r4, r2
   1ba38:	mov	r8, r1
   1ba3c:	cmp	r0, #0
   1ba40:	bne	1ba6c <__assert_fail@plt+0x9bd8>
   1ba44:	movw	r0, #24988	; 0x619c
   1ba48:	movt	r0, #3
   1ba4c:	bl	11bdc <getenv@plt>
   1ba50:	cmp	r0, #0
   1ba54:	bne	1ba6c <__assert_fail@plt+0x9bd8>
   1ba58:	movw	r0, #28144	; 0x6df0
   1ba5c:	movt	r0, #3
   1ba60:	bl	11bdc <getenv@plt>
   1ba64:	cmp	r0, #0
   1ba68:	beq	1bb90 <__assert_fail@plt+0x9cfc>
   1ba6c:	mov	r6, r0
   1ba70:	movw	r7, #28212	; 0x6e34
   1ba74:	movw	r1, #28200	; 0x6e28
   1ba78:	mov	r3, #4
   1ba7c:	ldrb	r5, [r6], #1
   1ba80:	movt	r7, #3
   1ba84:	movt	r1, #3
   1ba88:	mov	r2, r7
   1ba8c:	cmp	r5, #39	; 0x27
   1ba90:	movne	r6, r0
   1ba94:	mov	r0, r6
   1ba98:	bl	142c4 <__assert_fail@plt+0x2430>
   1ba9c:	sub	r1, r5, #39	; 0x27
   1baa0:	cmp	r0, #0
   1baa4:	clz	r1, r1
   1baa8:	lsr	r1, r1, #5
   1baac:	lsl	r5, r1, #2
   1bab0:	blt	1bad8 <__assert_fail@plt+0x9c44>
   1bab4:	ldr	r0, [r7, r0, lsl #2]
   1bab8:	mov	r2, #1
   1babc:	mov	r1, #0
   1bac0:	str	r2, [r4]
   1bac4:	str	r1, [r4, #4]
   1bac8:	orr	r1, r0, r5
   1bacc:	mov	r0, #0
   1bad0:	str	r1, [r8]
   1bad4:	b	1bb08 <__assert_fail@plt+0x9c74>
   1bad8:	movw	r0, #28154	; 0x6dfa
   1badc:	add	r1, sp, #4
   1bae0:	mov	r2, #0
   1bae4:	mov	r3, r4
   1bae8:	mov	r7, #0
   1baec:	movt	r0, #3
   1baf0:	str	r0, [sp]
   1baf4:	mov	r0, r6
   1baf8:	bl	32fa4 <__assert_fail@plt+0x21110>
   1bafc:	cmp	r0, #0
   1bb00:	beq	1bb4c <__assert_fail@plt+0x9cb8>
   1bb04:	str	r7, [r8]
   1bb08:	ldrd	r2, [r4]
   1bb0c:	orrs	r1, r2, r3
   1bb10:	beq	1bb1c <__assert_fail@plt+0x9c88>
   1bb14:	sub	sp, fp, #24
   1bb18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bb1c:	movw	r0, #28172	; 0x6e0c
   1bb20:	movt	r0, #3
   1bb24:	bl	11bdc <getenv@plt>
   1bb28:	cmp	r0, #0
   1bb2c:	mov	r2, #512	; 0x200
   1bb30:	mov	r0, #4
   1bb34:	mov	r1, #0
   1bb38:	movweq	r2, #1024	; 0x400
   1bb3c:	str	r2, [r4]
   1bb40:	str	r1, [r4, #4]
   1bb44:	sub	sp, fp, #24
   1bb48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bb4c:	ldrb	r0, [r6]
   1bb50:	sub	r0, r0, #48	; 0x30
   1bb54:	uxtb	r0, r0
   1bb58:	cmp	r0, #10
   1bb5c:	bcc	1bb88 <__assert_fail@plt+0x9cf4>
   1bb60:	ldr	r0, [sp, #4]
   1bb64:	cmp	r0, r6
   1bb68:	beq	1bbb8 <__assert_fail@plt+0x9d24>
   1bb6c:	ldrb	r2, [r6, #1]
   1bb70:	add	r1, r6, #1
   1bb74:	mov	r6, r1
   1bb78:	sub	r2, r2, #48	; 0x30
   1bb7c:	uxtb	r2, r2
   1bb80:	cmp	r2, #10
   1bb84:	bcs	1bb64 <__assert_fail@plt+0x9cd0>
   1bb88:	mov	r1, r5
   1bb8c:	b	1bacc <__assert_fail@plt+0x9c38>
   1bb90:	movw	r0, #28172	; 0x6e0c
   1bb94:	movt	r0, #3
   1bb98:	bl	11bdc <getenv@plt>
   1bb9c:	mov	r2, #512	; 0x200
   1bba0:	cmp	r0, #0
   1bba4:	mov	r1, #0
   1bba8:	movweq	r2, #1024	; 0x400
   1bbac:	str	r2, [r4]
   1bbb0:	str	r1, [r4, #4]
   1bbb4:	b	1bacc <__assert_fail@plt+0x9c38>
   1bbb8:	ldrb	r2, [r0, #-1]
   1bbbc:	orr	r1, r5, #384	; 0x180
   1bbc0:	cmp	r2, #66	; 0x42
   1bbc4:	mov	r2, r1
   1bbc8:	orrne	r2, r5, #128	; 0x80
   1bbcc:	bne	1bbe0 <__assert_fail@plt+0x9d4c>
   1bbd0:	ldrb	r0, [r0, #-2]
   1bbd4:	cmp	r0, #105	; 0x69
   1bbd8:	orreq	r1, r2, #32
   1bbdc:	b	1bacc <__assert_fail@plt+0x9c38>
   1bbe0:	orr	r1, r2, #32
   1bbe4:	b	1bacc <__assert_fail@plt+0x9c38>
   1bbe8:	mov	r3, #1
   1bbec:	mov	r2, #0
   1bbf0:	vdup.32	q8, r1
   1bbf4:	strb	r3, [r0, #28]
   1bbf8:	str	r2, [r0, #20]
   1bbfc:	str	r2, [r0, #24]
   1bc00:	vst1.32	{d16-d17}, [r0]!
   1bc04:	str	r1, [r0]
   1bc08:	bx	lr
   1bc0c:	ldrb	r0, [r0, #28]
   1bc10:	bx	lr
   1bc14:	push	{fp, lr}
   1bc18:	mov	fp, sp
   1bc1c:	ldrb	r3, [r0, #28]
   1bc20:	ldr	r2, [r0, #20]
   1bc24:	eor	lr, r3, #1
   1bc28:	add	r2, r2, lr
   1bc2c:	and	r3, r2, #3
   1bc30:	ldr	ip, [r0, r3, lsl #2]
   1bc34:	str	r1, [r0, r3, lsl #2]
   1bc38:	str	r3, [r0, #20]
   1bc3c:	ldr	r1, [r0, #24]
   1bc40:	cmp	r3, r1
   1bc44:	addeq	r1, r2, lr
   1bc48:	andeq	r1, r1, #3
   1bc4c:	streq	r1, [r0, #24]
   1bc50:	mov	r1, #0
   1bc54:	strb	r1, [r0, #28]
   1bc58:	mov	r0, ip
   1bc5c:	pop	{fp, pc}
   1bc60:	ldrb	r1, [r0, #28]
   1bc64:	cmp	r1, #0
   1bc68:	bne	1bcac <__assert_fail@plt+0x9e18>
   1bc6c:	ldr	r3, [r0, #20]
   1bc70:	ldr	r2, [r0, #16]
   1bc74:	ldr	r1, [r0, r3, lsl #2]
   1bc78:	str	r2, [r0, r3, lsl #2]
   1bc7c:	ldr	r2, [r0, #20]
   1bc80:	ldr	r3, [r0, #24]
   1bc84:	cmp	r2, r3
   1bc88:	moveq	r2, #1
   1bc8c:	strbeq	r2, [r0, #28]
   1bc90:	moveq	r0, r1
   1bc94:	bxeq	lr
   1bc98:	sub	r2, r2, #1
   1bc9c:	and	r2, r2, #3
   1bca0:	str	r2, [r0, #20]
   1bca4:	mov	r0, r1
   1bca8:	bx	lr
   1bcac:	push	{fp, lr}
   1bcb0:	mov	fp, sp
   1bcb4:	bl	11e58 <abort@plt>
   1bcb8:	push	{r4, r5, r6, sl, fp, lr}
   1bcbc:	add	fp, sp, #16
   1bcc0:	sub	sp, sp, #8
   1bcc4:	mov	r5, r0
   1bcc8:	mov	r0, #12
   1bccc:	bl	33c98 <__assert_fail@plt+0x21e04>
   1bcd0:	mov	r4, r0
   1bcd4:	cmp	r0, #0
   1bcd8:	beq	1bd28 <__assert_fail@plt+0x9e94>
   1bcdc:	movw	r0, #30548	; 0x7754
   1bce0:	movw	r2, #48436	; 0xbd34
   1bce4:	movw	r3, #48456	; 0xbd48
   1bce8:	mov	r1, #0
   1bcec:	mov	r6, #0
   1bcf0:	movt	r0, #1
   1bcf4:	movt	r2, #1
   1bcf8:	movt	r3, #1
   1bcfc:	str	r0, [sp]
   1bd00:	movw	r0, #1021	; 0x3fd
   1bd04:	bl	1a298 <__assert_fail@plt+0x8404>
   1bd08:	cmp	r0, #0
   1bd0c:	str	r0, [r4]
   1bd10:	beq	1bd1c <__assert_fail@plt+0x9e88>
   1bd14:	stmib	r4, {r5, r6}
   1bd18:	b	1bd28 <__assert_fail@plt+0x9e94>
   1bd1c:	mov	r0, r4
   1bd20:	bl	17754 <__assert_fail@plt+0x58c0>
   1bd24:	mov	r4, #0
   1bd28:	mov	r0, r4
   1bd2c:	sub	sp, fp, #16
   1bd30:	pop	{r4, r5, r6, sl, fp, pc}
   1bd34:	ldm	r0, {r0, r3}
   1bd38:	eor	r0, r0, r3
   1bd3c:	udiv	r2, r0, r1
   1bd40:	mls	r0, r2, r1, r0
   1bd44:	bx	lr
   1bd48:	ldrd	r2, [r1]
   1bd4c:	ldrd	r0, [r0]
   1bd50:	eor	r1, r1, r3
   1bd54:	eor	r0, r0, r2
   1bd58:	orr	r0, r0, r1
   1bd5c:	clz	r0, r0
   1bd60:	lsr	r0, r0, #5
   1bd64:	bx	lr
   1bd68:	push	{r4, sl, fp, lr}
   1bd6c:	add	fp, sp, #8
   1bd70:	mov	r4, r0
   1bd74:	ldr	r0, [r0]
   1bd78:	bl	1a590 <__assert_fail@plt+0x86fc>
   1bd7c:	ldr	r0, [r4, #8]
   1bd80:	bl	17754 <__assert_fail@plt+0x58c0>
   1bd84:	mov	r0, r4
   1bd88:	pop	{r4, sl, fp, lr}
   1bd8c:	b	17754 <__assert_fail@plt+0x58c0>
   1bd90:	push	{r4, r5, r6, r7, fp, lr}
   1bd94:	add	fp, sp, #16
   1bd98:	ldr	r4, [r0, #8]
   1bd9c:	mov	r7, r3
   1bda0:	mov	r6, r2
   1bda4:	mov	r5, r0
   1bda8:	cmp	r4, #0
   1bdac:	beq	1bdcc <__assert_fail@plt+0x9f38>
   1bdb0:	ldrd	r0, [r4]
   1bdb4:	eor	r1, r1, r7
   1bdb8:	eor	r0, r0, r6
   1bdbc:	orrs	r0, r0, r1
   1bdc0:	ldreq	r0, [r4, #8]
   1bdc4:	popeq	{r4, r5, r6, r7, fp, pc}
   1bdc8:	b	1bde4 <__assert_fail@plt+0x9f50>
   1bdcc:	mov	r0, #16
   1bdd0:	bl	33c98 <__assert_fail@plt+0x21e04>
   1bdd4:	cmp	r0, #0
   1bdd8:	str	r0, [r5, #8]
   1bddc:	beq	1be28 <__assert_fail@plt+0x9f94>
   1bde0:	mov	r4, r0
   1bde4:	strd	r6, [r4]
   1bde8:	mov	r1, r4
   1bdec:	ldr	r0, [r5]
   1bdf0:	bl	1addc <__assert_fail@plt+0x8f48>
   1bdf4:	cmp	r0, #0
   1bdf8:	beq	1be28 <__assert_fail@plt+0x9f94>
   1bdfc:	cmp	r4, r0
   1be00:	ldrne	r0, [r0, #8]
   1be04:	strne	r0, [r4, #8]
   1be08:	popne	{r4, r5, r6, r7, fp, pc}
   1be0c:	mov	r0, #0
   1be10:	str	r0, [r5, #8]
   1be14:	ldr	r0, [r5, #4]
   1be18:	add	r1, r0, #1
   1be1c:	str	r1, [r5, #4]
   1be20:	str	r0, [r4, #8]
   1be24:	pop	{r4, r5, r6, r7, fp, pc}
   1be28:	mvn	r0, #0
   1be2c:	pop	{r4, r5, r6, r7, fp, pc}
   1be30:	push	{r4, r5, r6, sl, fp, lr}
   1be34:	add	fp, sp, #16
   1be38:	mov	r5, r0
   1be3c:	mov	r0, #0
   1be40:	mov	r4, r1
   1be44:	add	r6, r2, #19
   1be48:	cmp	r1, #0
   1be4c:	strb	r0, [r2, #20]
   1be50:	blt	1bea0 <__assert_fail@plt+0xa00c>
   1be54:	mov	r0, r5
   1be58:	mov	r1, r4
   1be5c:	mov	r2, #10
   1be60:	mov	r3, #0
   1be64:	bl	3521c <__assert_fail@plt+0x23388>
   1be68:	add	r2, r0, r0, lsl #2
   1be6c:	sub	r2, r5, r2, lsl #1
   1be70:	add	r2, r2, #48	; 0x30
   1be74:	strb	r2, [r6], #-1
   1be78:	adds	r2, r5, #9
   1be7c:	mov	r5, r0
   1be80:	adc	r3, r4, #0
   1be84:	rsbs	r2, r2, #18
   1be88:	mov	r4, r1
   1be8c:	rscs	r2, r3, #0
   1be90:	bcc	1be54 <__assert_fail@plt+0x9fc0>
   1be94:	add	r6, r6, #1
   1be98:	mov	r0, r6
   1be9c:	pop	{r4, r5, r6, sl, fp, pc}
   1bea0:	mov	r0, r5
   1bea4:	mov	r1, r4
   1bea8:	mov	r2, #10
   1beac:	mov	r3, #0
   1beb0:	bl	3521c <__assert_fail@plt+0x23388>
   1beb4:	add	r2, r0, r0, lsl #2
   1beb8:	rsb	r2, r5, r2, lsl #1
   1bebc:	add	r2, r2, #48	; 0x30
   1bec0:	strb	r2, [r6], #-1
   1bec4:	adds	r2, r5, #9
   1bec8:	mov	r5, r0
   1becc:	adc	r3, r4, #0
   1bed0:	rsbs	r2, r2, #18
   1bed4:	mov	r4, r1
   1bed8:	rscs	r2, r3, #0
   1bedc:	bcc	1bea0 <__assert_fail@plt+0xa00c>
   1bee0:	mov	r0, #45	; 0x2d
   1bee4:	strb	r0, [r6]
   1bee8:	mov	r0, r6
   1beec:	pop	{r4, r5, r6, sl, fp, pc}
   1bef0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bef4:	add	fp, sp, #24
   1bef8:	sub	sp, sp, #112	; 0x70
   1befc:	cmp	r0, r1
   1bf00:	moveq	r0, #0
   1bf04:	subeq	sp, fp, #24
   1bf08:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bf0c:	mov	r4, r1
   1bf10:	mov	r5, r0
   1bf14:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1bf18:	cmp	r0, #1
   1bf1c:	bls	1bfc0 <__assert_fail@plt+0xa12c>
   1bf20:	mov	r7, #0
   1bf24:	add	r0, sp, #56	; 0x38
   1bf28:	str	r7, [sp, #64]	; 0x40
   1bf2c:	str	r7, [sp, #60]	; 0x3c
   1bf30:	strb	r7, [sp, #56]	; 0x38
   1bf34:	str	r5, [sp, #72]	; 0x48
   1bf38:	str	r7, [sp, #8]
   1bf3c:	str	r7, [sp, #4]
   1bf40:	str	r4, [sp, #16]
   1bf44:	strb	r7, [sp]
   1bf48:	strb	r7, [sp, #68]	; 0x44
   1bf4c:	strb	r7, [sp, #12]
   1bf50:	bl	1c15c <__assert_fail@plt+0xa2c8>
   1bf54:	ldrb	r0, [sp, #80]	; 0x50
   1bf58:	cmp	r0, #0
   1bf5c:	beq	1c02c <__assert_fail@plt+0xa198>
   1bf60:	ldr	r0, [sp, #84]	; 0x54
   1bf64:	cmp	r0, #0
   1bf68:	bne	1c02c <__assert_fail@plt+0xa198>
   1bf6c:	add	r0, sp, #56	; 0x38
   1bf70:	bl	1c15c <__assert_fail@plt+0xa2c8>
   1bf74:	ldrb	r1, [sp, #80]	; 0x50
   1bf78:	mov	r0, #1
   1bf7c:	cmp	r1, #0
   1bf80:	beq	1bfb8 <__assert_fail@plt+0xa124>
   1bf84:	ldr	r1, [sp, #84]	; 0x54
   1bf88:	cmp	r1, #0
   1bf8c:	bne	1bfb8 <__assert_fail@plt+0xa124>
   1bf90:	mov	r0, sp
   1bf94:	bl	1c15c <__assert_fail@plt+0xa2c8>
   1bf98:	ldrb	r1, [sp, #24]
   1bf9c:	ldr	r0, [sp, #28]
   1bfa0:	cmp	r0, #0
   1bfa4:	clz	r1, r1
   1bfa8:	movwne	r0, #1
   1bfac:	lsr	r1, r1, #5
   1bfb0:	orr	r0, r1, r0
   1bfb4:	rsb	r0, r0, #0
   1bfb8:	sub	sp, fp, #24
   1bfbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bfc0:	bl	11c54 <__ctype_b_loc@plt>
   1bfc4:	ldr	r8, [r0]
   1bfc8:	ldrb	r6, [r5]
   1bfcc:	add	r0, r8, r6, lsl #1
   1bfd0:	ldrb	r0, [r0, #1]
   1bfd4:	tst	r0, #1
   1bfd8:	beq	1bfe8 <__assert_fail@plt+0xa154>
   1bfdc:	bl	11c18 <__ctype_tolower_loc@plt>
   1bfe0:	ldr	r0, [r0]
   1bfe4:	ldrb	r6, [r0, r6, lsl #2]
   1bfe8:	ldrb	r7, [r4]
   1bfec:	add	r0, r8, r7, lsl #1
   1bff0:	ldrb	r0, [r0, #1]
   1bff4:	tst	r0, #1
   1bff8:	beq	1c008 <__assert_fail@plt+0xa174>
   1bffc:	bl	11c18 <__ctype_tolower_loc@plt>
   1c000:	ldr	r0, [r0]
   1c004:	ldrb	r7, [r0, r7, lsl #2]
   1c008:	cmp	r6, #0
   1c00c:	beq	1c020 <__assert_fail@plt+0xa18c>
   1c010:	add	r4, r4, #1
   1c014:	add	r5, r5, #1
   1c018:	cmp	r6, r7
   1c01c:	beq	1bfc8 <__assert_fail@plt+0xa134>
   1c020:	sub	r0, r6, r7
   1c024:	sub	sp, fp, #24
   1c028:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c02c:	mov	r4, sp
   1c030:	add	r5, sp, #56	; 0x38
   1c034:	mov	r0, r4
   1c038:	bl	1c15c <__assert_fail@plt+0xa2c8>
   1c03c:	ldrb	r0, [sp, #24]
   1c040:	cmp	r0, #0
   1c044:	beq	1c054 <__assert_fail@plt+0xa1c0>
   1c048:	ldr	r1, [sp, #28]
   1c04c:	cmp	r1, #0
   1c050:	beq	1bf6c <__assert_fail@plt+0xa0d8>
   1c054:	ldrb	r1, [sp, #80]	; 0x50
   1c058:	cmp	r1, #0
   1c05c:	beq	1c08c <__assert_fail@plt+0xa1f8>
   1c060:	cmp	r0, #0
   1c064:	beq	1c104 <__assert_fail@plt+0xa270>
   1c068:	ldr	r0, [sp, #84]	; 0x54
   1c06c:	bl	11ab0 <towlower@plt>
   1c070:	mov	r6, r0
   1c074:	ldr	r0, [sp, #28]
   1c078:	bl	11ab0 <towlower@plt>
   1c07c:	sub	r0, r6, r0
   1c080:	cmp	r0, #0
   1c084:	beq	1c0b8 <__assert_fail@plt+0xa224>
   1c088:	b	1bfb8 <__assert_fail@plt+0xa124>
   1c08c:	cmp	r0, #0
   1c090:	bne	1c110 <__assert_fail@plt+0xa27c>
   1c094:	ldr	r3, [sp, #20]
   1c098:	ldr	r2, [sp, #76]	; 0x4c
   1c09c:	cmp	r2, r3
   1c0a0:	bne	1c11c <__assert_fail@plt+0xa288>
   1c0a4:	ldr	r1, [sp, #16]
   1c0a8:	ldr	r0, [sp, #72]	; 0x48
   1c0ac:	bl	11ac8 <memcmp@plt>
   1c0b0:	cmp	r0, #0
   1c0b4:	bne	1bfb8 <__assert_fail@plt+0xa124>
   1c0b8:	strb	r7, [sp, #68]	; 0x44
   1c0bc:	strb	r7, [sp, #12]
   1c0c0:	ldr	r0, [sp, #72]	; 0x48
   1c0c4:	ldr	r1, [sp, #76]	; 0x4c
   1c0c8:	add	r0, r0, r1
   1c0cc:	ldr	r1, [sp, #20]
   1c0d0:	str	r0, [sp, #72]	; 0x48
   1c0d4:	ldr	r0, [sp, #16]
   1c0d8:	add	r0, r0, r1
   1c0dc:	str	r0, [sp, #16]
   1c0e0:	mov	r0, r5
   1c0e4:	bl	1c15c <__assert_fail@plt+0xa2c8>
   1c0e8:	ldrb	r0, [sp, #80]	; 0x50
   1c0ec:	cmp	r0, #0
   1c0f0:	beq	1c034 <__assert_fail@plt+0xa1a0>
   1c0f4:	ldr	r0, [sp, #84]	; 0x54
   1c0f8:	cmp	r0, #0
   1c0fc:	bne	1c034 <__assert_fail@plt+0xa1a0>
   1c100:	b	1bf6c <__assert_fail@plt+0xa0d8>
   1c104:	mvn	r0, #0
   1c108:	sub	sp, fp, #24
   1c10c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c110:	mov	r0, #1
   1c114:	sub	sp, fp, #24
   1c118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c11c:	ldr	r1, [sp, #16]
   1c120:	ldr	r0, [sp, #72]	; 0x48
   1c124:	bcs	1c13c <__assert_fail@plt+0xa2a8>
   1c128:	bl	11ac8 <memcmp@plt>
   1c12c:	mov	r1, r0
   1c130:	mvn	r0, #0
   1c134:	cmp	r1, #0
   1c138:	b	1c150 <__assert_fail@plt+0xa2bc>
   1c13c:	mov	r2, r3
   1c140:	bl	11ac8 <memcmp@plt>
   1c144:	mov	r1, r0
   1c148:	mvn	r0, #0
   1c14c:	cmn	r1, #1
   1c150:	movwgt	r0, #1
   1c154:	sub	sp, fp, #24
   1c158:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c15c:	push	{r4, r5, r6, r7, fp, lr}
   1c160:	add	fp, sp, #16
   1c164:	mov	r4, r0
   1c168:	ldrb	r0, [r0, #12]
   1c16c:	cmp	r0, #0
   1c170:	popne	{r4, r5, r6, r7, fp, pc}
   1c174:	ldrb	r0, [r4]
   1c178:	ldr	r6, [r4, #16]
   1c17c:	cmp	r0, #0
   1c180:	beq	1c1e0 <__assert_fail@plt+0xa34c>
   1c184:	add	r5, r4, #4
   1c188:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1c18c:	mov	r1, r0
   1c190:	mov	r0, r6
   1c194:	bl	30268 <__assert_fail@plt+0x1e3d4>
   1c198:	add	r7, r4, #28
   1c19c:	mov	r2, r0
   1c1a0:	mov	r1, r6
   1c1a4:	mov	r3, r5
   1c1a8:	mov	r0, r7
   1c1ac:	bl	34cac <__assert_fail@plt+0x22e18>
   1c1b0:	cmn	r0, #2
   1c1b4:	str	r0, [r4, #20]
   1c1b8:	beq	1c25c <__assert_fail@plt+0xa3c8>
   1c1bc:	cmp	r0, #0
   1c1c0:	beq	1c218 <__assert_fail@plt+0xa384>
   1c1c4:	cmn	r0, #1
   1c1c8:	bne	1c23c <__assert_fail@plt+0xa3a8>
   1c1cc:	mov	r0, #0
   1c1d0:	strb	r0, [r4, #24]
   1c1d4:	mov	r0, #1
   1c1d8:	str	r0, [r4, #20]
   1c1dc:	b	1c270 <__assert_fail@plt+0xa3dc>
   1c1e0:	ldrb	r0, [r6]
   1c1e4:	movw	r2, #30748	; 0x781c
   1c1e8:	movt	r2, #3
   1c1ec:	ubfx	r1, r0, #5, #3
   1c1f0:	ldr	r1, [r2, r1, lsl #2]
   1c1f4:	and	r2, r0, #31
   1c1f8:	mov	r0, #1
   1c1fc:	tst	r1, r0, lsl r2
   1c200:	beq	1c27c <__assert_fail@plt+0xa3e8>
   1c204:	str	r0, [r4, #20]
   1c208:	ldrb	r1, [r6]
   1c20c:	strb	r0, [r4, #24]
   1c210:	str	r1, [r4, #28]
   1c214:	b	1c270 <__assert_fail@plt+0xa3dc>
   1c218:	mov	r0, #1
   1c21c:	str	r0, [r4, #20]
   1c220:	ldr	r0, [r4, #16]
   1c224:	ldrb	r0, [r0]
   1c228:	cmp	r0, #0
   1c22c:	bne	1c29c <__assert_fail@plt+0xa408>
   1c230:	ldr	r0, [r7]
   1c234:	cmp	r0, #0
   1c238:	bne	1c2bc <__assert_fail@plt+0xa428>
   1c23c:	mov	r0, #1
   1c240:	strb	r0, [r4, #24]
   1c244:	mov	r0, r5
   1c248:	bl	11abc <mbsinit@plt>
   1c24c:	cmp	r0, #0
   1c250:	movne	r0, #0
   1c254:	strbne	r0, [r4]
   1c258:	b	1c270 <__assert_fail@plt+0xa3dc>
   1c25c:	ldr	r0, [r4, #16]
   1c260:	bl	11c78 <strlen@plt>
   1c264:	str	r0, [r4, #20]
   1c268:	mov	r0, #0
   1c26c:	strb	r0, [r4, #24]
   1c270:	mov	r0, #1
   1c274:	strb	r0, [r4, #12]
   1c278:	pop	{r4, r5, r6, r7, fp, pc}
   1c27c:	add	r5, r4, #4
   1c280:	mov	r0, r5
   1c284:	bl	11abc <mbsinit@plt>
   1c288:	cmp	r0, #0
   1c28c:	beq	1c2dc <__assert_fail@plt+0xa448>
   1c290:	mov	r0, #1
   1c294:	strb	r0, [r4]
   1c298:	b	1c188 <__assert_fail@plt+0xa2f4>
   1c29c:	movw	r0, #28307	; 0x6e93
   1c2a0:	movw	r1, #28243	; 0x6e53
   1c2a4:	movw	r3, #28259	; 0x6e63
   1c2a8:	mov	r2, #171	; 0xab
   1c2ac:	movt	r0, #3
   1c2b0:	movt	r1, #3
   1c2b4:	movt	r3, #3
   1c2b8:	bl	11e94 <__assert_fail@plt>
   1c2bc:	movw	r0, #28330	; 0x6eaa
   1c2c0:	movw	r1, #28243	; 0x6e53
   1c2c4:	movw	r3, #28259	; 0x6e63
   1c2c8:	mov	r2, #172	; 0xac
   1c2cc:	movt	r0, #3
   1c2d0:	movt	r1, #3
   1c2d4:	movt	r3, #3
   1c2d8:	bl	11e94 <__assert_fail@plt>
   1c2dc:	movw	r0, #28220	; 0x6e3c
   1c2e0:	movw	r1, #28243	; 0x6e53
   1c2e4:	movw	r3, #28259	; 0x6e63
   1c2e8:	mov	r2, #143	; 0x8f
   1c2ec:	movt	r0, #3
   1c2f0:	movt	r1, #3
   1c2f4:	movt	r3, #3
   1c2f8:	bl	11e94 <__assert_fail@plt>
   1c2fc:	ldr	r2, [r0, #16]
   1c300:	add	r1, r2, r1
   1c304:	str	r1, [r0, #16]
   1c308:	bx	lr
   1c30c:	push	{r4, r5, r6, sl, fp, lr}
   1c310:	add	fp, sp, #16
   1c314:	mov	r5, r1
   1c318:	ldrb	r1, [r1]
   1c31c:	mov	r4, r0
   1c320:	strb	r1, [r0], #4
   1c324:	cmp	r1, #0
   1c328:	beq	1c338 <__assert_fail@plt+0xa4a4>
   1c32c:	ldmib	r5, {r1, r2}
   1c330:	stm	r0, {r1, r2}
   1c334:	b	1c344 <__assert_fail@plt+0xa4b0>
   1c338:	mov	r1, #0
   1c33c:	str	r1, [r0]
   1c340:	str	r1, [r0, #4]
   1c344:	ldrb	r0, [r5, #12]
   1c348:	strb	r0, [r4, #12]
   1c34c:	add	r0, r5, #32
   1c350:	ldr	r1, [r5, #16]
   1c354:	cmp	r1, r0
   1c358:	beq	1c364 <__assert_fail@plt+0xa4d0>
   1c35c:	mov	r6, r1
   1c360:	b	1c374 <__assert_fail@plt+0xa4e0>
   1c364:	ldr	r2, [r5, #20]
   1c368:	add	r6, r4, #32
   1c36c:	mov	r0, r6
   1c370:	bl	11a8c <memcpy@plt>
   1c374:	str	r6, [r4, #16]
   1c378:	ldr	r0, [r5, #20]
   1c37c:	str	r0, [r4, #20]
   1c380:	ldrb	r0, [r5, #24]
   1c384:	strb	r0, [r4, #24]
   1c388:	cmp	r0, #0
   1c38c:	ldrne	r0, [r5, #28]
   1c390:	strne	r0, [r4, #28]
   1c394:	pop	{r4, r5, r6, sl, fp, pc}
   1c398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c39c:	add	fp, sp, #28
   1c3a0:	sub	sp, sp, #36	; 0x24
   1c3a4:	movw	r0, #28348	; 0x6ebc
   1c3a8:	movw	r1, #28484	; 0x6f44
   1c3ac:	movt	r0, #3
   1c3b0:	movt	r1, #3
   1c3b4:	bl	11dec <fopen64@plt>
   1c3b8:	cmp	r0, #0
   1c3bc:	beq	1cafc <__assert_fail@plt+0xac68>
   1c3c0:	mov	sl, r0
   1c3c4:	mov	r0, #0
   1c3c8:	add	r1, sp, #24
   1c3cc:	mov	r2, #10
   1c3d0:	str	r0, [sp, #28]
   1c3d4:	str	r0, [sp, #24]
   1c3d8:	add	r0, sp, #28
   1c3dc:	mov	r3, sl
   1c3e0:	bl	119fc <__getdelim@plt>
   1c3e4:	cmn	r0, #1
   1c3e8:	beq	1ced0 <__assert_fail@plt+0xb03c>
   1c3ec:	movw	r8, #28369	; 0x6ed1
   1c3f0:	add	r0, sp, #32
   1c3f4:	add	r9, sp, #12
   1c3f8:	add	r6, sp, #20
   1c3fc:	add	r7, sp, #16
   1c400:	add	r5, sp, #28
   1c404:	add	r4, sp, #24
   1c408:	str	sl, [sp, #4]
   1c40c:	movt	r8, #3
   1c410:	str	r0, [sp, #8]
   1c414:	b	1c588 <__assert_fail@plt+0xa6f4>
   1c418:	ldr	sl, [sp, #4]
   1c41c:	movw	r8, #28369	; 0x6ed1
   1c420:	add	r9, sp, #12
   1c424:	add	r6, sp, #20
   1c428:	movt	r8, #3
   1c42c:	b	1cad0 <__assert_fail@plt+0xac3c>
   1c430:	ldrb	r0, [r4]
   1c434:	cmp	r0, #47	; 0x2f
   1c438:	ldrbeq	r0, [r4, #1]
   1c43c:	cmpeq	r0, #47	; 0x2f
   1c440:	beq	1c53c <__assert_fail@plt+0xa6a8>
   1c444:	movw	r1, #28508	; 0x6f5c
   1c448:	mov	r0, r6
   1c44c:	movt	r1, #3
   1c450:	bl	11a14 <strcmp@plt>
   1c454:	cmp	r0, #0
   1c458:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c45c:	movw	r1, #28513	; 0x6f61
   1c460:	mov	r0, r6
   1c464:	movt	r1, #3
   1c468:	bl	11a14 <strcmp@plt>
   1c46c:	cmp	r0, #0
   1c470:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c474:	movw	r1, #28517	; 0x6f65
   1c478:	mov	r0, r6
   1c47c:	movt	r1, #3
   1c480:	bl	11a14 <strcmp@plt>
   1c484:	cmp	r0, #0
   1c488:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c48c:	movw	r1, #28522	; 0x6f6a
   1c490:	mov	r0, r6
   1c494:	movt	r1, #3
   1c498:	bl	11a14 <strcmp@plt>
   1c49c:	cmp	r0, #0
   1c4a0:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c4a4:	movw	r1, #28533	; 0x6f75
   1c4a8:	mov	r0, r6
   1c4ac:	movt	r1, #3
   1c4b0:	bl	11a14 <strcmp@plt>
   1c4b4:	cmp	r0, #0
   1c4b8:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c4bc:	movw	r1, #28539	; 0x6f7b
   1c4c0:	mov	r0, r6
   1c4c4:	movt	r1, #3
   1c4c8:	bl	11a14 <strcmp@plt>
   1c4cc:	cmp	r0, #0
   1c4d0:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c4d4:	movw	r1, #28544	; 0x6f80
   1c4d8:	mov	r0, r6
   1c4dc:	movt	r1, #3
   1c4e0:	bl	11a14 <strcmp@plt>
   1c4e4:	cmp	r0, #0
   1c4e8:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c4ec:	movw	r1, #28550	; 0x6f86
   1c4f0:	mov	r0, r6
   1c4f4:	movt	r1, #3
   1c4f8:	bl	11a14 <strcmp@plt>
   1c4fc:	cmp	r0, #0
   1c500:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c504:	movw	r1, #28556	; 0x6f8c
   1c508:	mov	r0, r6
   1c50c:	movt	r1, #3
   1c510:	bl	11a14 <strcmp@plt>
   1c514:	cmp	r0, #0
   1c518:	add	r6, sp, #20
   1c51c:	beq	1caa0 <__assert_fail@plt+0xac0c>
   1c520:	movw	r0, #28561	; 0x6f91
   1c524:	mov	r1, r4
   1c528:	movt	r0, #3
   1c52c:	bl	11a14 <strcmp@plt>
   1c530:	clz	r0, r0
   1c534:	lsr	r8, r0, #5
   1c538:	b	1caa0 <__assert_fail@plt+0xac0c>
   1c53c:	movw	r1, #28492	; 0x6f4c
   1c540:	mov	r0, r6
   1c544:	movt	r1, #3
   1c548:	bl	11a14 <strcmp@plt>
   1c54c:	cmp	r0, #0
   1c550:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c554:	movw	r1, #28498	; 0x6f52
   1c558:	mov	r0, r6
   1c55c:	movt	r1, #3
   1c560:	bl	11a14 <strcmp@plt>
   1c564:	cmp	r0, #0
   1c568:	beq	1ca9c <__assert_fail@plt+0xac08>
   1c56c:	movw	r1, #28503	; 0x6f57
   1c570:	mov	r0, r6
   1c574:	movt	r1, #3
   1c578:	bl	11a14 <strcmp@plt>
   1c57c:	cmp	r0, #0
   1c580:	bne	1c444 <__assert_fail@plt+0xa5b0>
   1c584:	b	1ca9c <__assert_fail@plt+0xac08>
   1c588:	ldr	r0, [sp, #28]
   1c58c:	mov	r1, r8
   1c590:	mov	r2, r6
   1c594:	mov	r3, r7
   1c598:	str	r9, [sp]
   1c59c:	bl	11d8c <sscanf@plt>
   1c5a0:	orr	r0, r0, #1
   1c5a4:	cmp	r0, #3
   1c5a8:	bne	1cadc <__assert_fail@plt+0xac48>
   1c5ac:	ldr	r0, [sp, #12]
   1c5b0:	ldr	r1, [sp, #28]
   1c5b4:	add	r0, r1, r0
   1c5b8:	mov	r1, #32
   1c5bc:	mov	r5, r0
   1c5c0:	bl	11c84 <strchr@plt>
   1c5c4:	cmp	r0, #0
   1c5c8:	beq	1cacc <__assert_fail@plt+0xac38>
   1c5cc:	mov	r6, r0
   1c5d0:	mov	r4, #0
   1c5d4:	mov	r1, #32
   1c5d8:	strb	r4, [r6], #1
   1c5dc:	mov	r0, r6
   1c5e0:	bl	11c84 <strchr@plt>
   1c5e4:	cmp	r0, #0
   1c5e8:	beq	1cacc <__assert_fail@plt+0xac38>
   1c5ec:	movw	r1, #28386	; 0x6ee2
   1c5f0:	strb	r4, [r0], #1
   1c5f4:	movt	r1, #3
   1c5f8:	bl	33d1c <__assert_fail@plt+0x21e88>
   1c5fc:	cmp	r0, #0
   1c600:	beq	1cacc <__assert_fail@plt+0xac38>
   1c604:	add	sl, r0, #3
   1c608:	mov	r1, #32
   1c60c:	mov	r0, sl
   1c610:	bl	11c84 <strchr@plt>
   1c614:	cmp	r0, #0
   1c618:	beq	1c418 <__assert_fail@plt+0xa584>
   1c61c:	mov	r9, r0
   1c620:	mov	r4, #0
   1c624:	mov	r1, #32
   1c628:	strb	r4, [r9], #1
   1c62c:	mov	r0, r9
   1c630:	bl	11c84 <strchr@plt>
   1c634:	cmp	r0, #0
   1c638:	beq	1c418 <__assert_fail@plt+0xa584>
   1c63c:	strb	r4, [r0]
   1c640:	mov	r0, r9
   1c644:	bl	11c78 <strlen@plt>
   1c648:	adds	r0, r0, #1
   1c64c:	mov	r8, r5
   1c650:	beq	1c6d0 <__assert_fail@plt+0xa83c>
   1c654:	mov	r2, #0
   1c658:	mov	r1, r9
   1c65c:	ldrb	r3, [r9, r2]
   1c660:	add	r7, r2, #4
   1c664:	cmp	r7, r0
   1c668:	bcs	1c6c0 <__assert_fail@plt+0xa82c>
   1c66c:	cmp	r3, #92	; 0x5c
   1c670:	bne	1c6c0 <__assert_fail@plt+0xa82c>
   1c674:	add	r7, r9, r2
   1c678:	ldrb	r5, [r7, #1]
   1c67c:	and	r4, r5, #252	; 0xfc
   1c680:	cmp	r4, #48	; 0x30
   1c684:	bne	1c6c0 <__assert_fail@plt+0xa82c>
   1c688:	ldrb	r4, [r7, #2]
   1c68c:	and	r7, r4, #248	; 0xf8
   1c690:	cmp	r7, #48	; 0x30
   1c694:	bne	1c6c0 <__assert_fail@plt+0xa82c>
   1c698:	add	ip, r2, #3
   1c69c:	ldrb	lr, [r9, ip]
   1c6a0:	and	r7, lr, #248	; 0xf8
   1c6a4:	cmp	r7, #48	; 0x30
   1c6a8:	bne	1c6c0 <__assert_fail@plt+0xa82c>
   1c6ac:	lsl	r2, r5, #6
   1c6b0:	add	r2, r2, r4, lsl #3
   1c6b4:	add	r2, r2, lr
   1c6b8:	add	r3, r2, #80	; 0x50
   1c6bc:	mov	r2, ip
   1c6c0:	add	r2, r2, #1
   1c6c4:	strb	r3, [r1], #1
   1c6c8:	cmp	r2, r0
   1c6cc:	bcc	1c65c <__assert_fail@plt+0xa7c8>
   1c6d0:	mov	r0, r6
   1c6d4:	bl	11c78 <strlen@plt>
   1c6d8:	adds	r0, r0, #1
   1c6dc:	beq	1c75c <__assert_fail@plt+0xa8c8>
   1c6e0:	mov	r2, #0
   1c6e4:	mov	r1, r6
   1c6e8:	ldrb	r3, [r6, r2]
   1c6ec:	add	r7, r2, #4
   1c6f0:	cmp	r7, r0
   1c6f4:	bcs	1c74c <__assert_fail@plt+0xa8b8>
   1c6f8:	cmp	r3, #92	; 0x5c
   1c6fc:	bne	1c74c <__assert_fail@plt+0xa8b8>
   1c700:	add	r7, r6, r2
   1c704:	ldrb	r5, [r7, #1]
   1c708:	and	r4, r5, #252	; 0xfc
   1c70c:	cmp	r4, #48	; 0x30
   1c710:	bne	1c74c <__assert_fail@plt+0xa8b8>
   1c714:	ldrb	r4, [r7, #2]
   1c718:	and	r7, r4, #248	; 0xf8
   1c71c:	cmp	r7, #48	; 0x30
   1c720:	bne	1c74c <__assert_fail@plt+0xa8b8>
   1c724:	add	ip, r2, #3
   1c728:	ldrb	lr, [r6, ip]
   1c72c:	and	r7, lr, #248	; 0xf8
   1c730:	cmp	r7, #48	; 0x30
   1c734:	bne	1c74c <__assert_fail@plt+0xa8b8>
   1c738:	lsl	r2, r5, #6
   1c73c:	add	r2, r2, r4, lsl #3
   1c740:	add	r2, r2, lr
   1c744:	add	r3, r2, #80	; 0x50
   1c748:	mov	r2, ip
   1c74c:	add	r2, r2, #1
   1c750:	strb	r3, [r1], #1
   1c754:	cmp	r2, r0
   1c758:	bcc	1c6e8 <__assert_fail@plt+0xa854>
   1c75c:	mov	r0, r8
   1c760:	bl	11c78 <strlen@plt>
   1c764:	adds	r0, r0, #1
   1c768:	beq	1c7e8 <__assert_fail@plt+0xa954>
   1c76c:	mov	r2, #0
   1c770:	mov	r1, r8
   1c774:	ldrb	r3, [r8, r2]
   1c778:	add	r7, r2, #4
   1c77c:	cmp	r7, r0
   1c780:	bcs	1c7d8 <__assert_fail@plt+0xa944>
   1c784:	cmp	r3, #92	; 0x5c
   1c788:	bne	1c7d8 <__assert_fail@plt+0xa944>
   1c78c:	add	r7, r8, r2
   1c790:	ldrb	r5, [r7, #1]
   1c794:	and	r4, r5, #252	; 0xfc
   1c798:	cmp	r4, #48	; 0x30
   1c79c:	bne	1c7d8 <__assert_fail@plt+0xa944>
   1c7a0:	ldrb	r4, [r7, #2]
   1c7a4:	and	r7, r4, #248	; 0xf8
   1c7a8:	cmp	r7, #48	; 0x30
   1c7ac:	bne	1c7d8 <__assert_fail@plt+0xa944>
   1c7b0:	add	ip, r2, #3
   1c7b4:	ldrb	lr, [r8, ip]
   1c7b8:	and	r7, lr, #248	; 0xf8
   1c7bc:	cmp	r7, #48	; 0x30
   1c7c0:	bne	1c7d8 <__assert_fail@plt+0xa944>
   1c7c4:	lsl	r2, r5, #6
   1c7c8:	add	r2, r2, r4, lsl #3
   1c7cc:	add	r2, r2, lr
   1c7d0:	add	r3, r2, #80	; 0x50
   1c7d4:	mov	r2, ip
   1c7d8:	add	r2, r2, #1
   1c7dc:	strb	r3, [r1], #1
   1c7e0:	cmp	r2, r0
   1c7e4:	bcc	1c774 <__assert_fail@plt+0xa8e0>
   1c7e8:	mov	r0, sl
   1c7ec:	bl	11c78 <strlen@plt>
   1c7f0:	adds	r0, r0, #1
   1c7f4:	beq	1c874 <__assert_fail@plt+0xa9e0>
   1c7f8:	mov	r2, #0
   1c7fc:	mov	r1, sl
   1c800:	ldrb	r3, [sl, r2]
   1c804:	add	r7, r2, #4
   1c808:	cmp	r7, r0
   1c80c:	bcs	1c864 <__assert_fail@plt+0xa9d0>
   1c810:	cmp	r3, #92	; 0x5c
   1c814:	bne	1c864 <__assert_fail@plt+0xa9d0>
   1c818:	add	r7, sl, r2
   1c81c:	ldrb	r5, [r7, #1]
   1c820:	and	r4, r5, #252	; 0xfc
   1c824:	cmp	r4, #48	; 0x30
   1c828:	bne	1c864 <__assert_fail@plt+0xa9d0>
   1c82c:	ldrb	r4, [r7, #2]
   1c830:	and	r7, r4, #248	; 0xf8
   1c834:	cmp	r7, #48	; 0x30
   1c838:	bne	1c864 <__assert_fail@plt+0xa9d0>
   1c83c:	add	ip, r2, #3
   1c840:	ldrb	lr, [sl, ip]
   1c844:	and	r7, lr, #248	; 0xf8
   1c848:	cmp	r7, #48	; 0x30
   1c84c:	bne	1c864 <__assert_fail@plt+0xa9d0>
   1c850:	lsl	r2, r5, #6
   1c854:	add	r2, r2, r4, lsl #3
   1c858:	add	r2, r2, lr
   1c85c:	add	r3, r2, #80	; 0x50
   1c860:	mov	r2, ip
   1c864:	add	r2, r2, #1
   1c868:	strb	r3, [r1], #1
   1c86c:	cmp	r2, r0
   1c870:	bcc	1c800 <__assert_fail@plt+0xa96c>
   1c874:	mov	r0, #32
   1c878:	bl	30fa8 <__assert_fail@plt+0x1f114>
   1c87c:	mov	r7, r0
   1c880:	mov	r0, r9
   1c884:	bl	314c8 <__assert_fail@plt+0x1f634>
   1c888:	str	r0, [r7]
   1c88c:	mov	r0, r6
   1c890:	bl	314c8 <__assert_fail@plt+0x1f634>
   1c894:	str	r0, [r7, #4]
   1c898:	mov	r0, r8
   1c89c:	bl	314c8 <__assert_fail@plt+0x1f634>
   1c8a0:	str	r0, [r7, #8]
   1c8a4:	mov	r0, sl
   1c8a8:	bl	314c8 <__assert_fail@plt+0x1f634>
   1c8ac:	str	r0, [r7, #12]
   1c8b0:	mov	r6, r0
   1c8b4:	ldr	r2, [sp, #20]
   1c8b8:	ldrb	r0, [r7, #24]
   1c8bc:	mov	r3, r2
   1c8c0:	orr	r4, r0, #4
   1c8c4:	ldr	r0, [sp, #16]
   1c8c8:	bfc	r3, #0, #12
   1c8cc:	strb	r4, [r7, #24]
   1c8d0:	bic	r1, r0, #255	; 0xff
   1c8d4:	uxtb	r0, r0
   1c8d8:	bfi	r0, r2, #8, #12
   1c8dc:	orr	r3, r3, r1, lsr #20
   1c8e0:	orr	r0, r0, r1, lsl #12
   1c8e4:	movw	r1, #28390	; 0x6ee6
   1c8e8:	str	r3, [r7, #20]
   1c8ec:	str	r0, [r7, #16]
   1c8f0:	mov	r0, r6
   1c8f4:	movt	r1, #3
   1c8f8:	bl	11a14 <strcmp@plt>
   1c8fc:	cmp	r0, #0
   1c900:	mov	r8, #1
   1c904:	mov	r0, #1
   1c908:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c90c:	movw	r1, #28397	; 0x6eed
   1c910:	mov	r0, r6
   1c914:	movt	r1, #3
   1c918:	bl	11a14 <strcmp@plt>
   1c91c:	cmp	r0, #0
   1c920:	mov	r0, #1
   1c924:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c928:	movw	r1, #28402	; 0x6ef2
   1c92c:	mov	r0, r6
   1c930:	movt	r1, #3
   1c934:	bl	11a14 <strcmp@plt>
   1c938:	cmp	r0, #0
   1c93c:	mov	r0, #1
   1c940:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c944:	movw	r1, #28408	; 0x6ef8
   1c948:	mov	r0, r6
   1c94c:	movt	r1, #3
   1c950:	bl	11a14 <strcmp@plt>
   1c954:	cmp	r0, #0
   1c958:	mov	r0, #1
   1c95c:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c960:	movw	r1, #28416	; 0x6f00
   1c964:	mov	r0, r6
   1c968:	movt	r1, #3
   1c96c:	bl	11a14 <strcmp@plt>
   1c970:	cmp	r0, #0
   1c974:	mov	r0, #1
   1c978:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c97c:	movw	r1, #28423	; 0x6f07
   1c980:	mov	r0, r6
   1c984:	movt	r1, #3
   1c988:	bl	11a14 <strcmp@plt>
   1c98c:	cmp	r0, #0
   1c990:	mov	r0, #1
   1c994:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c998:	movw	r1, #28431	; 0x6f0f
   1c99c:	mov	r0, r6
   1c9a0:	movt	r1, #3
   1c9a4:	bl	11a14 <strcmp@plt>
   1c9a8:	cmp	r0, #0
   1c9ac:	mov	r0, #1
   1c9b0:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c9b4:	movw	r1, #28443	; 0x6f1b
   1c9b8:	mov	r0, r6
   1c9bc:	movt	r1, #3
   1c9c0:	bl	11a14 <strcmp@plt>
   1c9c4:	cmp	r0, #0
   1c9c8:	mov	r0, #1
   1c9cc:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c9d0:	movw	r1, #28450	; 0x6f22
   1c9d4:	mov	r0, r6
   1c9d8:	movt	r1, #3
   1c9dc:	bl	11a14 <strcmp@plt>
   1c9e0:	cmp	r0, #0
   1c9e4:	mov	r0, #1
   1c9e8:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1c9ec:	movw	r1, #28461	; 0x6f2d
   1c9f0:	mov	r0, r6
   1c9f4:	movt	r1, #3
   1c9f8:	bl	11a14 <strcmp@plt>
   1c9fc:	cmp	r0, #0
   1ca00:	mov	r0, #1
   1ca04:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1ca08:	movw	r1, #28467	; 0x6f33
   1ca0c:	mov	r0, r6
   1ca10:	movt	r1, #3
   1ca14:	bl	11a14 <strcmp@plt>
   1ca18:	cmp	r0, #0
   1ca1c:	mov	r0, #1
   1ca20:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1ca24:	movw	r1, #28473	; 0x6f39
   1ca28:	mov	r0, r6
   1ca2c:	movt	r1, #3
   1ca30:	bl	11a14 <strcmp@plt>
   1ca34:	cmp	r0, #0
   1ca38:	mov	r0, #1
   1ca3c:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1ca40:	movw	r1, #28480	; 0x6f40
   1ca44:	mov	r0, r6
   1ca48:	movt	r1, #3
   1ca4c:	bl	11a14 <strcmp@plt>
   1ca50:	cmp	r0, #0
   1ca54:	mov	r0, #1
   1ca58:	beq	1ca74 <__assert_fail@plt+0xabe0>
   1ca5c:	movw	r1, #28487	; 0x6f47
   1ca60:	mov	r0, r6
   1ca64:	movt	r1, #3
   1ca68:	bl	11a14 <strcmp@plt>
   1ca6c:	clz	r0, r0
   1ca70:	lsr	r0, r0, #5
   1ca74:	bic	r1, r4, #1
   1ca78:	orr	r5, r1, r0
   1ca7c:	mov	r1, #58	; 0x3a
   1ca80:	strb	r5, [r7, #24]
   1ca84:	ldr	r4, [r7]
   1ca88:	mov	r0, r4
   1ca8c:	bl	11c84 <strchr@plt>
   1ca90:	ldr	sl, [sp, #4]
   1ca94:	cmp	r0, #0
   1ca98:	beq	1c430 <__assert_fail@plt+0xa59c>
   1ca9c:	add	r6, sp, #20
   1caa0:	and	r0, r5, #253	; 0xfd
   1caa4:	add	r9, sp, #12
   1caa8:	orr	r0, r0, r8, lsl #1
   1caac:	movw	r8, #28369	; 0x6ed1
   1cab0:	strb	r0, [r7, #24]
   1cab4:	ldr	r0, [sp, #8]
   1cab8:	movt	r8, #3
   1cabc:	str	r7, [r0]
   1cac0:	add	r0, r7, #28
   1cac4:	str	r0, [sp, #8]
   1cac8:	b	1cad0 <__assert_fail@plt+0xac3c>
   1cacc:	add	r6, sp, #20
   1cad0:	add	r7, sp, #16
   1cad4:	add	r5, sp, #28
   1cad8:	add	r4, sp, #24
   1cadc:	mov	r0, r5
   1cae0:	mov	r1, r4
   1cae4:	mov	r2, #10
   1cae8:	mov	r3, sl
   1caec:	bl	119fc <__getdelim@plt>
   1caf0:	cmn	r0, #1
   1caf4:	bne	1c588 <__assert_fail@plt+0xa6f4>
   1caf8:	b	1ced8 <__assert_fail@plt+0xb044>
   1cafc:	movw	r0, #28568	; 0x6f98
   1cb00:	movw	r1, #29350	; 0x72a6
   1cb04:	movt	r0, #3
   1cb08:	movt	r1, #3
   1cb0c:	bl	11e04 <setmntent@plt>
   1cb10:	cmp	r0, #0
   1cb14:	beq	1cf24 <__assert_fail@plt+0xb090>
   1cb18:	mov	r8, r0
   1cb1c:	bl	11bb8 <getmntent@plt>
   1cb20:	cmp	r0, #0
   1cb24:	beq	1cf2c <__assert_fail@plt+0xb098>
   1cb28:	mov	r5, r0
   1cb2c:	add	sl, sp, #32
   1cb30:	b	1cc88 <__assert_fail@plt+0xadf4>
   1cb34:	ldrb	r0, [r5]
   1cb38:	cmp	r0, #47	; 0x2f
   1cb3c:	ldrbeq	r0, [r5, #1]
   1cb40:	cmpeq	r0, #47	; 0x2f
   1cb44:	beq	1cc3c <__assert_fail@plt+0xada8>
   1cb48:	movw	r1, #28508	; 0x6f5c
   1cb4c:	mov	r0, r7
   1cb50:	movt	r1, #3
   1cb54:	bl	11a14 <strcmp@plt>
   1cb58:	cmp	r0, #0
   1cb5c:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cb60:	movw	r1, #28513	; 0x6f61
   1cb64:	mov	r0, r7
   1cb68:	movt	r1, #3
   1cb6c:	bl	11a14 <strcmp@plt>
   1cb70:	cmp	r0, #0
   1cb74:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cb78:	movw	r1, #28517	; 0x6f65
   1cb7c:	mov	r0, r7
   1cb80:	movt	r1, #3
   1cb84:	bl	11a14 <strcmp@plt>
   1cb88:	cmp	r0, #0
   1cb8c:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cb90:	movw	r1, #28522	; 0x6f6a
   1cb94:	mov	r0, r7
   1cb98:	movt	r1, #3
   1cb9c:	bl	11a14 <strcmp@plt>
   1cba0:	cmp	r0, #0
   1cba4:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cba8:	movw	r1, #28533	; 0x6f75
   1cbac:	mov	r0, r7
   1cbb0:	movt	r1, #3
   1cbb4:	bl	11a14 <strcmp@plt>
   1cbb8:	cmp	r0, #0
   1cbbc:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cbc0:	movw	r1, #28539	; 0x6f7b
   1cbc4:	mov	r0, r7
   1cbc8:	movt	r1, #3
   1cbcc:	bl	11a14 <strcmp@plt>
   1cbd0:	cmp	r0, #0
   1cbd4:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cbd8:	movw	r1, #28544	; 0x6f80
   1cbdc:	mov	r0, r7
   1cbe0:	movt	r1, #3
   1cbe4:	bl	11a14 <strcmp@plt>
   1cbe8:	cmp	r0, #0
   1cbec:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cbf0:	movw	r1, #28550	; 0x6f86
   1cbf4:	mov	r0, r7
   1cbf8:	movt	r1, #3
   1cbfc:	bl	11a14 <strcmp@plt>
   1cc00:	cmp	r0, #0
   1cc04:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cc08:	movw	r1, #28556	; 0x6f8c
   1cc0c:	mov	r0, r7
   1cc10:	movt	r1, #3
   1cc14:	bl	11a14 <strcmp@plt>
   1cc18:	cmp	r0, #0
   1cc1c:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cc20:	movw	r0, #28561	; 0x6f91
   1cc24:	mov	r1, r5
   1cc28:	movt	r0, #3
   1cc2c:	bl	11a14 <strcmp@plt>
   1cc30:	clz	r0, r0
   1cc34:	lsr	r6, r0, #5
   1cc38:	b	1ce98 <__assert_fail@plt+0xb004>
   1cc3c:	movw	r1, #28492	; 0x6f4c
   1cc40:	mov	r0, r7
   1cc44:	movt	r1, #3
   1cc48:	bl	11a14 <strcmp@plt>
   1cc4c:	cmp	r0, #0
   1cc50:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cc54:	movw	r1, #28498	; 0x6f52
   1cc58:	mov	r0, r7
   1cc5c:	movt	r1, #3
   1cc60:	bl	11a14 <strcmp@plt>
   1cc64:	cmp	r0, #0
   1cc68:	beq	1ce98 <__assert_fail@plt+0xb004>
   1cc6c:	movw	r1, #28503	; 0x6f57
   1cc70:	mov	r0, r7
   1cc74:	movt	r1, #3
   1cc78:	bl	11a14 <strcmp@plt>
   1cc7c:	cmp	r0, #0
   1cc80:	bne	1cb48 <__assert_fail@plt+0xacb4>
   1cc84:	b	1ce98 <__assert_fail@plt+0xb004>
   1cc88:	movw	r1, #28578	; 0x6fa2
   1cc8c:	mov	r0, r5
   1cc90:	movt	r1, #3
   1cc94:	bl	11b7c <hasmntopt@plt>
   1cc98:	str	r0, [sp, #8]
   1cc9c:	mov	r0, #32
   1cca0:	bl	30fa8 <__assert_fail@plt+0x1f114>
   1cca4:	mov	r9, r0
   1cca8:	ldr	r0, [r5]
   1ccac:	bl	314c8 <__assert_fail@plt+0x1f634>
   1ccb0:	str	r0, [r9]
   1ccb4:	ldr	r0, [r5, #4]
   1ccb8:	bl	314c8 <__assert_fail@plt+0x1f634>
   1ccbc:	str	r0, [r9, #4]
   1ccc0:	mov	r0, #0
   1ccc4:	str	r0, [r9, #8]
   1ccc8:	ldr	r0, [r5, #8]
   1cccc:	bl	314c8 <__assert_fail@plt+0x1f634>
   1ccd0:	str	r0, [r9, #12]
   1ccd4:	mov	r7, r0
   1ccd8:	movw	r1, #28390	; 0x6ee6
   1ccdc:	ldrb	r0, [r9, #24]
   1cce0:	movt	r1, #3
   1cce4:	orr	r4, r0, #4
   1cce8:	mov	r0, r7
   1ccec:	strb	r4, [r9, #24]
   1ccf0:	bl	11a14 <strcmp@plt>
   1ccf4:	cmp	r0, #0
   1ccf8:	mov	r6, #1
   1ccfc:	mov	r0, #1
   1cd00:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cd04:	movw	r1, #28397	; 0x6eed
   1cd08:	mov	r0, r7
   1cd0c:	movt	r1, #3
   1cd10:	bl	11a14 <strcmp@plt>
   1cd14:	cmp	r0, #0
   1cd18:	mov	r0, #1
   1cd1c:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cd20:	movw	r1, #28402	; 0x6ef2
   1cd24:	mov	r0, r7
   1cd28:	movt	r1, #3
   1cd2c:	bl	11a14 <strcmp@plt>
   1cd30:	cmp	r0, #0
   1cd34:	mov	r0, #1
   1cd38:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cd3c:	movw	r1, #28408	; 0x6ef8
   1cd40:	mov	r0, r7
   1cd44:	movt	r1, #3
   1cd48:	bl	11a14 <strcmp@plt>
   1cd4c:	cmp	r0, #0
   1cd50:	mov	r0, #1
   1cd54:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cd58:	movw	r1, #28416	; 0x6f00
   1cd5c:	mov	r0, r7
   1cd60:	movt	r1, #3
   1cd64:	bl	11a14 <strcmp@plt>
   1cd68:	cmp	r0, #0
   1cd6c:	mov	r0, #1
   1cd70:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cd74:	movw	r1, #28423	; 0x6f07
   1cd78:	mov	r0, r7
   1cd7c:	movt	r1, #3
   1cd80:	bl	11a14 <strcmp@plt>
   1cd84:	cmp	r0, #0
   1cd88:	mov	r0, #1
   1cd8c:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cd90:	movw	r1, #28431	; 0x6f0f
   1cd94:	mov	r0, r7
   1cd98:	movt	r1, #3
   1cd9c:	bl	11a14 <strcmp@plt>
   1cda0:	cmp	r0, #0
   1cda4:	mov	r0, #1
   1cda8:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cdac:	movw	r1, #28443	; 0x6f1b
   1cdb0:	mov	r0, r7
   1cdb4:	movt	r1, #3
   1cdb8:	bl	11a14 <strcmp@plt>
   1cdbc:	cmp	r0, #0
   1cdc0:	mov	r0, #1
   1cdc4:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cdc8:	movw	r1, #28450	; 0x6f22
   1cdcc:	mov	r0, r7
   1cdd0:	movt	r1, #3
   1cdd4:	bl	11a14 <strcmp@plt>
   1cdd8:	cmp	r0, #0
   1cddc:	mov	r0, #1
   1cde0:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1cde4:	movw	r1, #28461	; 0x6f2d
   1cde8:	mov	r0, r7
   1cdec:	movt	r1, #3
   1cdf0:	bl	11a14 <strcmp@plt>
   1cdf4:	cmp	r0, #0
   1cdf8:	mov	r0, #1
   1cdfc:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1ce00:	movw	r1, #28467	; 0x6f33
   1ce04:	mov	r0, r7
   1ce08:	movt	r1, #3
   1ce0c:	bl	11a14 <strcmp@plt>
   1ce10:	cmp	r0, #0
   1ce14:	mov	r0, #1
   1ce18:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1ce1c:	movw	r1, #28473	; 0x6f39
   1ce20:	mov	r0, r7
   1ce24:	movt	r1, #3
   1ce28:	bl	11a14 <strcmp@plt>
   1ce2c:	cmp	r0, #0
   1ce30:	mov	r0, #1
   1ce34:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1ce38:	movw	r1, #28480	; 0x6f40
   1ce3c:	mov	r0, r7
   1ce40:	movt	r1, #3
   1ce44:	bl	11a14 <strcmp@plt>
   1ce48:	cmp	r0, #0
   1ce4c:	mov	r0, #1
   1ce50:	beq	1ce74 <__assert_fail@plt+0xafe0>
   1ce54:	movw	r1, #28487	; 0x6f47
   1ce58:	mov	r0, r7
   1ce5c:	movt	r1, #3
   1ce60:	bl	11a14 <strcmp@plt>
   1ce64:	ldr	r1, [sp, #8]
   1ce68:	orr	r0, r1, r0
   1ce6c:	clz	r0, r0
   1ce70:	lsr	r0, r0, #5
   1ce74:	bic	r1, r4, #1
   1ce78:	orr	r4, r1, r0
   1ce7c:	mov	r1, #58	; 0x3a
   1ce80:	strb	r4, [r9, #24]
   1ce84:	ldr	r5, [r9]
   1ce88:	mov	r0, r5
   1ce8c:	bl	11c84 <strchr@plt>
   1ce90:	cmp	r0, #0
   1ce94:	beq	1cb34 <__assert_fail@plt+0xaca0>
   1ce98:	mvn	r0, #0
   1ce9c:	str	r0, [r9, #16]
   1cea0:	str	r0, [r9, #20]
   1cea4:	and	r0, r4, #253	; 0xfd
   1cea8:	orr	r0, r0, r6, lsl #1
   1ceac:	strb	r0, [r9, #24]
   1ceb0:	mov	r0, r8
   1ceb4:	str	r9, [sl]
   1ceb8:	add	sl, r9, #28
   1cebc:	bl	11bb8 <getmntent@plt>
   1cec0:	mov	r5, r0
   1cec4:	cmp	r0, #0
   1cec8:	bne	1cc88 <__assert_fail@plt+0xadf4>
   1cecc:	b	1cf30 <__assert_fail@plt+0xb09c>
   1ced0:	add	r0, sp, #32
   1ced4:	str	r0, [sp, #8]
   1ced8:	ldr	r0, [sp, #28]
   1cedc:	bl	17754 <__assert_fail@plt+0x58c0>
   1cee0:	ldrb	r0, [sl]
   1cee4:	tst	r0, #32
   1cee8:	bne	1cf04 <__assert_fail@plt+0xb070>
   1ceec:	mov	r0, sl
   1cef0:	bl	15cb4 <__assert_fail@plt+0x3e20>
   1cef4:	ldr	sl, [sp, #8]
   1cef8:	cmn	r0, #1
   1cefc:	bne	1cf40 <__assert_fail@plt+0xb0ac>
   1cf00:	b	1cf50 <__assert_fail@plt+0xb0bc>
   1cf04:	bl	11ca8 <__errno_location@plt>
   1cf08:	ldr	r6, [r0]
   1cf0c:	mov	r5, r0
   1cf10:	mov	r0, sl
   1cf14:	bl	15cb4 <__assert_fail@plt+0x3e20>
   1cf18:	ldr	sl, [sp, #8]
   1cf1c:	str	r6, [r5]
   1cf20:	b	1cf50 <__assert_fail@plt+0xb0bc>
   1cf24:	mov	r4, #0
   1cf28:	b	1cfbc <__assert_fail@plt+0xb128>
   1cf2c:	add	sl, sp, #32
   1cf30:	mov	r0, r8
   1cf34:	bl	11d38 <endmntent@plt>
   1cf38:	cmp	r0, #0
   1cf3c:	beq	1cf50 <__assert_fail@plt+0xb0bc>
   1cf40:	mov	r0, #0
   1cf44:	str	r0, [sl]
   1cf48:	ldr	r4, [sp, #32]
   1cf4c:	b	1cfbc <__assert_fail@plt+0xb128>
   1cf50:	bl	11ca8 <__errno_location@plt>
   1cf54:	mov	r4, #0
   1cf58:	ldr	r8, [r0]
   1cf5c:	mov	r5, r0
   1cf60:	str	r4, [sl]
   1cf64:	ldr	r6, [sp, #32]
   1cf68:	cmp	r6, #0
   1cf6c:	beq	1cfb8 <__assert_fail@plt+0xb124>
   1cf70:	ldr	r0, [r6]
   1cf74:	ldr	r7, [r6, #28]
   1cf78:	bl	17754 <__assert_fail@plt+0x58c0>
   1cf7c:	ldr	r0, [r6, #4]
   1cf80:	bl	17754 <__assert_fail@plt+0x58c0>
   1cf84:	ldr	r0, [r6, #8]
   1cf88:	bl	17754 <__assert_fail@plt+0x58c0>
   1cf8c:	ldrb	r0, [r6, #24]
   1cf90:	tst	r0, #4
   1cf94:	beq	1cfa0 <__assert_fail@plt+0xb10c>
   1cf98:	ldr	r0, [r6, #12]
   1cf9c:	bl	17754 <__assert_fail@plt+0x58c0>
   1cfa0:	mov	r0, r6
   1cfa4:	bl	17754 <__assert_fail@plt+0x58c0>
   1cfa8:	cmp	r7, #0
   1cfac:	mov	r6, r7
   1cfb0:	str	r7, [sp, #32]
   1cfb4:	bne	1cf70 <__assert_fail@plt+0xb0dc>
   1cfb8:	str	r8, [r5]
   1cfbc:	mov	r0, r4
   1cfc0:	sub	sp, fp, #28
   1cfc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc8:	push	{r4, sl, fp, lr}
   1cfcc:	add	fp, sp, #8
   1cfd0:	mov	r4, r0
   1cfd4:	ldr	r0, [r0]
   1cfd8:	bl	17754 <__assert_fail@plt+0x58c0>
   1cfdc:	ldr	r0, [r4, #4]
   1cfe0:	bl	17754 <__assert_fail@plt+0x58c0>
   1cfe4:	ldr	r0, [r4, #8]
   1cfe8:	bl	17754 <__assert_fail@plt+0x58c0>
   1cfec:	ldrb	r0, [r4, #24]
   1cff0:	tst	r0, #4
   1cff4:	beq	1d000 <__assert_fail@plt+0xb16c>
   1cff8:	ldr	r0, [r4, #12]
   1cffc:	bl	17754 <__assert_fail@plt+0x58c0>
   1d000:	mov	r0, r4
   1d004:	pop	{r4, sl, fp, lr}
   1d008:	b	17754 <__assert_fail@plt+0x58c0>
   1d00c:	sub	sp, sp, #4
   1d010:	push	{fp, lr}
   1d014:	mov	fp, sp
   1d018:	sub	sp, sp, #4
   1d01c:	str	r3, [fp, #8]
   1d020:	mov	r3, #0
   1d024:	tst	r2, #64	; 0x40
   1d028:	addne	r3, fp, #8
   1d02c:	addne	r3, r3, #4
   1d030:	strne	r3, [sp]
   1d034:	ldrne	r3, [fp, #8]
   1d038:	bl	11c9c <openat64@plt>
   1d03c:	bl	308ac <__assert_fail@plt+0x1ea18>
   1d040:	mov	sp, fp
   1d044:	pop	{fp, lr}
   1d048:	add	sp, sp, #4
   1d04c:	bx	lr
   1d050:	push	{r4, r5, r6, sl, fp, lr}
   1d054:	add	fp, sp, #16
   1d058:	orr	r2, r2, #18688	; 0x4900
   1d05c:	mov	r4, r3
   1d060:	orr	r2, r2, #524288	; 0x80000
   1d064:	bl	1d00c <__assert_fail@plt+0xb178>
   1d068:	mov	r5, r0
   1d06c:	mov	r0, #0
   1d070:	cmp	r5, #0
   1d074:	poplt	{r4, r5, r6, sl, fp, pc}
   1d078:	mov	r0, r5
   1d07c:	bl	11db0 <fdopendir@plt>
   1d080:	cmp	r0, #0
   1d084:	strne	r5, [r4]
   1d088:	popne	{r4, r5, r6, sl, fp, pc}
   1d08c:	bl	11ca8 <__errno_location@plt>
   1d090:	ldr	r6, [r0]
   1d094:	mov	r4, r0
   1d098:	mov	r0, r5
   1d09c:	bl	11e70 <close@plt>
   1d0a0:	mov	r0, #0
   1d0a4:	str	r6, [r4]
   1d0a8:	pop	{r4, r5, r6, sl, fp, pc}
   1d0ac:	push	{r4, r5, fp, lr}
   1d0b0:	add	fp, sp, #8
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d14c <__assert_fail@plt+0xb2b8>
   1d0bc:	mov	r1, #47	; 0x2f
   1d0c0:	mov	r4, r0
   1d0c4:	bl	11d68 <strrchr@plt>
   1d0c8:	cmp	r0, #0
   1d0cc:	mov	r5, r4
   1d0d0:	addne	r5, r0, #1
   1d0d4:	sub	r0, r5, r4
   1d0d8:	cmp	r0, #7
   1d0dc:	blt	1d130 <__assert_fail@plt+0xb29c>
   1d0e0:	movw	r1, #28639	; 0x6fdf
   1d0e4:	sub	r0, r5, #7
   1d0e8:	mov	r2, #7
   1d0ec:	movt	r1, #3
   1d0f0:	bl	11e4c <strncmp@plt>
   1d0f4:	cmp	r0, #0
   1d0f8:	bne	1d130 <__assert_fail@plt+0xb29c>
   1d0fc:	movw	r1, #28647	; 0x6fe7
   1d100:	mov	r0, r5
   1d104:	mov	r2, #3
   1d108:	movt	r1, #3
   1d10c:	bl	11e4c <strncmp@plt>
   1d110:	cmp	r0, #0
   1d114:	beq	1d120 <__assert_fail@plt+0xb28c>
   1d118:	mov	r4, r5
   1d11c:	b	1d130 <__assert_fail@plt+0xb29c>
   1d120:	movw	r0, #33304	; 0x8218
   1d124:	add	r4, r5, #3
   1d128:	movt	r0, #4
   1d12c:	str	r4, [r0]
   1d130:	movw	r0, #33308	; 0x821c
   1d134:	movt	r0, #4
   1d138:	str	r4, [r0]
   1d13c:	movw	r0, #33460	; 0x82b4
   1d140:	movt	r0, #4
   1d144:	str	r4, [r0]
   1d148:	pop	{r4, r5, fp, pc}
   1d14c:	movw	r0, #33320	; 0x8228
   1d150:	mov	r1, #55	; 0x37
   1d154:	mov	r2, #1
   1d158:	movt	r0, #4
   1d15c:	ldr	r3, [r0]
   1d160:	movw	r0, #28583	; 0x6fa7
   1d164:	movt	r0, #3
   1d168:	bl	11b58 <fwrite@plt>
   1d16c:	bl	11e58 <abort@plt>
   1d170:	push	{r4, r5, r6, sl, fp, lr}
   1d174:	add	fp, sp, #16
   1d178:	mov	r4, r0
   1d17c:	movw	r0, #33464	; 0x82b8
   1d180:	movt	r0, #4
   1d184:	cmp	r4, #0
   1d188:	moveq	r4, r0
   1d18c:	bl	11ca8 <__errno_location@plt>
   1d190:	ldr	r6, [r0]
   1d194:	mov	r5, r0
   1d198:	mov	r0, r4
   1d19c:	mov	r1, #48	; 0x30
   1d1a0:	bl	31408 <__assert_fail@plt+0x1f574>
   1d1a4:	str	r6, [r5]
   1d1a8:	pop	{r4, r5, r6, sl, fp, pc}
   1d1ac:	movw	r1, #33464	; 0x82b8
   1d1b0:	cmp	r0, #0
   1d1b4:	movt	r1, #4
   1d1b8:	movne	r1, r0
   1d1bc:	ldr	r0, [r1]
   1d1c0:	bx	lr
   1d1c4:	movw	r2, #33464	; 0x82b8
   1d1c8:	cmp	r0, #0
   1d1cc:	movt	r2, #4
   1d1d0:	movne	r2, r0
   1d1d4:	str	r1, [r2]
   1d1d8:	bx	lr
   1d1dc:	movw	r3, #33464	; 0x82b8
   1d1e0:	cmp	r0, #0
   1d1e4:	movt	r3, #4
   1d1e8:	movne	r3, r0
   1d1ec:	ubfx	r0, r1, #5, #3
   1d1f0:	and	r1, r1, #31
   1d1f4:	add	r0, r3, r0, lsl #2
   1d1f8:	ldr	r3, [r0, #8]
   1d1fc:	eor	r2, r2, r3, lsr r1
   1d200:	and	r2, r2, #1
   1d204:	eor	r2, r3, r2, lsl r1
   1d208:	str	r2, [r0, #8]
   1d20c:	mov	r0, #1
   1d210:	and	r0, r0, r3, lsr r1
   1d214:	bx	lr
   1d218:	movw	r2, #33464	; 0x82b8
   1d21c:	cmp	r0, #0
   1d220:	movt	r2, #4
   1d224:	movne	r2, r0
   1d228:	ldr	r0, [r2, #4]
   1d22c:	str	r1, [r2, #4]
   1d230:	bx	lr
   1d234:	movw	r3, #33464	; 0x82b8
   1d238:	cmp	r0, #0
   1d23c:	movt	r3, #4
   1d240:	movne	r3, r0
   1d244:	cmp	r1, #0
   1d248:	mov	r0, #10
   1d24c:	cmpne	r2, #0
   1d250:	str	r0, [r3]
   1d254:	bne	1d264 <__assert_fail@plt+0xb3d0>
   1d258:	push	{fp, lr}
   1d25c:	mov	fp, sp
   1d260:	bl	11e58 <abort@plt>
   1d264:	str	r1, [r3, #40]	; 0x28
   1d268:	str	r2, [r3, #44]	; 0x2c
   1d26c:	bx	lr
   1d270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d274:	add	fp, sp, #28
   1d278:	sub	sp, sp, #20
   1d27c:	mov	r7, r0
   1d280:	ldr	r0, [fp, #8]
   1d284:	movw	r5, #33464	; 0x82b8
   1d288:	mov	r8, r3
   1d28c:	mov	r9, r2
   1d290:	mov	sl, r1
   1d294:	movt	r5, #4
   1d298:	cmp	r0, #0
   1d29c:	movne	r5, r0
   1d2a0:	bl	11ca8 <__errno_location@plt>
   1d2a4:	mov	r4, r0
   1d2a8:	ldm	r5, {r0, r1}
   1d2ac:	ldr	r2, [r5, #40]	; 0x28
   1d2b0:	ldr	r3, [r5, #44]	; 0x2c
   1d2b4:	add	r5, r5, #8
   1d2b8:	ldr	r6, [r4]
   1d2bc:	stm	sp, {r0, r1, r5}
   1d2c0:	str	r2, [sp, #12]
   1d2c4:	str	r3, [sp, #16]
   1d2c8:	mov	r0, r7
   1d2cc:	mov	r1, sl
   1d2d0:	mov	r2, r9
   1d2d4:	mov	r3, r8
   1d2d8:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1d2dc:	str	r6, [r4]
   1d2e0:	sub	sp, fp, #28
   1d2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2ec:	add	fp, sp, #28
   1d2f0:	sub	sp, sp, #156	; 0x9c
   1d2f4:	str	r0, [sp, #80]	; 0x50
   1d2f8:	ldr	r0, [fp, #12]
   1d2fc:	mov	r6, r1
   1d300:	mov	r9, r3
   1d304:	str	r2, [fp, #-84]	; 0xffffffac
   1d308:	and	r1, r0, #4
   1d30c:	str	r1, [sp, #32]
   1d310:	and	r1, r0, #1
   1d314:	str	r1, [sp, #36]	; 0x24
   1d318:	ubfx	r4, r0, #1, #1
   1d31c:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1d320:	str	r0, [sp, #40]	; 0x28
   1d324:	ldr	r0, [fp, #24]
   1d328:	ldr	r7, [fp, #8]
   1d32c:	mov	r1, #0
   1d330:	mov	r5, #1
   1d334:	str	r1, [fp, #-56]	; 0xffffffc8
   1d338:	mov	r1, #0
   1d33c:	str	r1, [sp, #60]	; 0x3c
   1d340:	str	r0, [sp, #76]	; 0x4c
   1d344:	ldr	r0, [fp, #20]
   1d348:	str	r0, [sp, #72]	; 0x48
   1d34c:	mov	r0, #0
   1d350:	str	r0, [sp, #56]	; 0x38
   1d354:	mov	r0, #0
   1d358:	str	r0, [sp, #92]	; 0x5c
   1d35c:	mov	r0, #0
   1d360:	str	r0, [fp, #-76]	; 0xffffffb4
   1d364:	mov	r0, #0
   1d368:	cmp	r7, #10
   1d36c:	bhi	1e2ec <__assert_fail@plt+0xc458>
   1d370:	add	r1, pc, #28
   1d374:	mov	sl, r6
   1d378:	ldr	r6, [sp, #80]	; 0x50
   1d37c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1d380:	mov	r8, #0
   1d384:	mov	r2, #1
   1d388:	mov	r3, #0
   1d38c:	mov	lr, r9
   1d390:	ldr	pc, [r1, r7, lsl #2]
   1d394:	andeq	sp, r1, r8, ror r4
   1d398:	andeq	sp, r1, r4, lsr #9
   1d39c:	andeq	sp, r1, r8, ror #8
   1d3a0:	andeq	sp, r1, r0, ror #8
   1d3a4:	muleq	r1, r8, r4
   1d3a8:	andeq	sp, r1, ip, ror #9
   1d3ac:	andeq	sp, r1, r8, lsl #9
   1d3b0:	andeq	sp, r1, r8, asr #10
   1d3b4:	andeq	sp, r1, r0, asr #7
   1d3b8:	andeq	sp, r1, r0, asr #7
   1d3bc:	andeq	sp, r1, r8, ror #7
   1d3c0:	movw	r0, #28727	; 0x7037
   1d3c4:	mov	r1, r7
   1d3c8:	movt	r0, #3
   1d3cc:	bl	1ecf8 <__assert_fail@plt+0xce64>
   1d3d0:	str	r0, [sp, #72]	; 0x48
   1d3d4:	movw	r0, #25092	; 0x6204
   1d3d8:	mov	r1, r7
   1d3dc:	movt	r0, #3
   1d3e0:	bl	1ecf8 <__assert_fail@plt+0xce64>
   1d3e4:	str	r0, [sp, #76]	; 0x4c
   1d3e8:	str	r5, [fp, #-48]	; 0xffffffd0
   1d3ec:	mov	r8, #0
   1d3f0:	mov	r5, r7
   1d3f4:	tst	r4, #1
   1d3f8:	bne	1d430 <__assert_fail@plt+0xb59c>
   1d3fc:	ldr	r0, [sp, #72]	; 0x48
   1d400:	ldrb	r0, [r0]
   1d404:	cmp	r0, #0
   1d408:	beq	1d430 <__assert_fail@plt+0xb59c>
   1d40c:	ldr	r1, [sp, #72]	; 0x48
   1d410:	mov	r8, #0
   1d414:	add	r1, r1, #1
   1d418:	cmp	r8, sl
   1d41c:	strbcc	r0, [r6, r8]
   1d420:	ldrb	r0, [r1, r8]
   1d424:	add	r8, r8, #1
   1d428:	cmp	r0, #0
   1d42c:	bne	1d418 <__assert_fail@plt+0xb584>
   1d430:	ldr	r7, [sp, #76]	; 0x4c
   1d434:	mov	r0, r7
   1d438:	bl	11c78 <strlen@plt>
   1d43c:	str	r7, [sp, #92]	; 0x5c
   1d440:	mov	r7, r5
   1d444:	ldr	ip, [fp, #-84]	; 0xffffffac
   1d448:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1d44c:	str	r0, [fp, #-76]	; 0xffffffb4
   1d450:	mov	r2, #1
   1d454:	mov	r3, r4
   1d458:	mov	lr, r9
   1d45c:	b	1d548 <__assert_fail@plt+0xb6b4>
   1d460:	mov	r0, #1
   1d464:	b	1d4a4 <__assert_fail@plt+0xb610>
   1d468:	tst	r4, #1
   1d46c:	bne	1d4a4 <__assert_fail@plt+0xb610>
   1d470:	mov	r2, r0
   1d474:	b	1d4cc <__assert_fail@plt+0xb638>
   1d478:	mov	r7, #0
   1d47c:	mov	r8, #0
   1d480:	mov	r2, r0
   1d484:	b	1d544 <__assert_fail@plt+0xb6b0>
   1d488:	mov	r0, #1
   1d48c:	mov	r8, #0
   1d490:	mov	r7, #5
   1d494:	b	1d500 <__assert_fail@plt+0xb66c>
   1d498:	mov	r2, #1
   1d49c:	tst	r4, #1
   1d4a0:	beq	1d4cc <__assert_fail@plt+0xb638>
   1d4a4:	mov	r1, #1
   1d4a8:	mov	r8, #0
   1d4ac:	mov	r7, #2
   1d4b0:	mov	r2, r0
   1d4b4:	mov	r3, #1
   1d4b8:	str	r1, [fp, #-76]	; 0xffffffb4
   1d4bc:	movw	r1, #25092	; 0x6204
   1d4c0:	movt	r1, #3
   1d4c4:	str	r1, [sp, #92]	; 0x5c
   1d4c8:	b	1d548 <__assert_fail@plt+0xb6b4>
   1d4cc:	cmp	sl, #0
   1d4d0:	mov	r8, #1
   1d4d4:	mov	r7, #2
   1d4d8:	movne	r0, #39	; 0x27
   1d4dc:	strbne	r0, [r6]
   1d4e0:	movw	r0, #25092	; 0x6204
   1d4e4:	movt	r0, #3
   1d4e8:	b	1d538 <__assert_fail@plt+0xb6a4>
   1d4ec:	mov	r7, #5
   1d4f0:	tst	r4, #1
   1d4f4:	beq	1d51c <__assert_fail@plt+0xb688>
   1d4f8:	mov	r0, #1
   1d4fc:	mov	r8, #0
   1d500:	str	r0, [fp, #-76]	; 0xffffffb4
   1d504:	movw	r0, #25626	; 0x641a
   1d508:	mov	r2, #1
   1d50c:	mov	r3, #1
   1d510:	movt	r0, #3
   1d514:	str	r0, [sp, #92]	; 0x5c
   1d518:	b	1d548 <__assert_fail@plt+0xb6b4>
   1d51c:	cmp	sl, #0
   1d520:	mov	r8, #1
   1d524:	mov	r2, #1
   1d528:	movne	r0, #34	; 0x22
   1d52c:	strbne	r0, [r6]
   1d530:	movw	r0, #25626	; 0x641a
   1d534:	movt	r0, #3
   1d538:	str	r0, [sp, #92]	; 0x5c
   1d53c:	mov	r0, #1
   1d540:	str	r0, [fp, #-76]	; 0xffffffb4
   1d544:	mov	r3, #0
   1d548:	ldr	r0, [fp, #16]
   1d54c:	str	r3, [fp, #-72]	; 0xffffffb8
   1d550:	str	r7, [fp, #-64]	; 0xffffffc0
   1d554:	str	r2, [sp, #84]	; 0x54
   1d558:	cmp	r0, #0
   1d55c:	movwne	r0, #1
   1d560:	and	r0, r0, r3
   1d564:	str	r0, [fp, #-88]	; 0xffffffa8
   1d568:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1d56c:	cmp	r0, #0
   1d570:	movwne	r0, #1
   1d574:	subs	r4, r7, #2
   1d578:	mov	r7, #0
   1d57c:	and	r1, r0, r3
   1d580:	str	r4, [fp, #-80]	; 0xffffffb0
   1d584:	and	r1, r2, r1
   1d588:	str	r1, [sp, #48]	; 0x30
   1d58c:	clz	r1, r4
   1d590:	lsr	r1, r1, #5
   1d594:	and	r1, r1, r3
   1d598:	eor	r3, r3, #1
   1d59c:	str	r1, [sp, #64]	; 0x40
   1d5a0:	mov	r1, r4
   1d5a4:	str	r3, [sp, #88]	; 0x58
   1d5a8:	movwne	r1, #1
   1d5ac:	orr	r3, r1, r3
   1d5b0:	and	r1, r1, r2
   1d5b4:	and	r0, r0, r1
   1d5b8:	str	r3, [sp, #68]	; 0x44
   1d5bc:	str	r1, [fp, #-68]	; 0xffffffbc
   1d5c0:	str	r0, [fp, #-60]	; 0xffffffc4
   1d5c4:	eor	r0, r2, #1
   1d5c8:	str	r0, [sp, #52]	; 0x34
   1d5cc:	cmn	lr, #1
   1d5d0:	beq	1d5e0 <__assert_fail@plt+0xb74c>
   1d5d4:	cmp	r7, lr
   1d5d8:	bne	1d5ec <__assert_fail@plt+0xb758>
   1d5dc:	b	1e114 <__assert_fail@plt+0xc280>
   1d5e0:	ldrb	r0, [ip, r7]
   1d5e4:	cmp	r0, #0
   1d5e8:	beq	1e11c <__assert_fail@plt+0xc288>
   1d5ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d5f0:	mov	r9, #0
   1d5f4:	str	r5, [fp, #-48]	; 0xffffffd0
   1d5f8:	cmp	r0, #0
   1d5fc:	beq	1d630 <__assert_fail@plt+0xb79c>
   1d600:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1d604:	add	r4, r7, r0
   1d608:	cmp	r0, #2
   1d60c:	bcc	1d628 <__assert_fail@plt+0xb794>
   1d610:	cmn	lr, #1
   1d614:	bne	1d628 <__assert_fail@plt+0xb794>
   1d618:	mov	r0, ip
   1d61c:	bl	11c78 <strlen@plt>
   1d620:	ldr	ip, [fp, #-84]	; 0xffffffac
   1d624:	mov	lr, r0
   1d628:	cmp	r4, lr
   1d62c:	bls	1d638 <__assert_fail@plt+0xb7a4>
   1d630:	mov	r0, #0
   1d634:	b	1d678 <__assert_fail@plt+0xb7e4>
   1d638:	ldr	r1, [sp, #92]	; 0x5c
   1d63c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1d640:	add	r0, ip, r7
   1d644:	mov	r4, lr
   1d648:	bl	11ac8 <memcmp@plt>
   1d64c:	ldr	r2, [sp, #88]	; 0x58
   1d650:	cmp	r0, #0
   1d654:	mov	r1, r0
   1d658:	movwne	r1, #1
   1d65c:	orr	r1, r1, r2
   1d660:	tst	r1, #1
   1d664:	beq	1e1ac <__assert_fail@plt+0xc318>
   1d668:	ldr	ip, [fp, #-84]	; 0xffffffac
   1d66c:	clz	r0, r0
   1d670:	mov	lr, r4
   1d674:	lsr	r0, r0, #5
   1d678:	str	r0, [fp, #-52]	; 0xffffffcc
   1d67c:	ldrb	r5, [ip, r7]
   1d680:	cmp	r5, #126	; 0x7e
   1d684:	bhi	1da3c <__assert_fail@plt+0xbba8>
   1d688:	add	r3, pc, #16
   1d68c:	mov	r4, #1
   1d690:	mov	r2, #110	; 0x6e
   1d694:	mov	r0, #97	; 0x61
   1d698:	mov	r1, #0
   1d69c:	ldr	pc, [r3, r5, lsl #2]
   1d6a0:	andeq	sp, r1, r8, lsr r9
   1d6a4:	andeq	sp, r1, ip, lsr sl
   1d6a8:	andeq	sp, r1, ip, lsr sl
   1d6ac:	andeq	sp, r1, ip, lsr sl
   1d6b0:	andeq	sp, r1, ip, lsr sl
   1d6b4:	andeq	sp, r1, ip, lsr sl
   1d6b8:	andeq	sp, r1, ip, lsr sl
   1d6bc:	strdeq	sp, [r1], -r0
   1d6c0:	andeq	sp, r1, r8, lsl r9
   1d6c4:	andeq	sp, r1, r0, lsl r9
   1d6c8:	andeq	sp, r1, r4, lsr #18
   1d6cc:	andeq	sp, r1, r4, lsr #19
   1d6d0:	andeq	sp, r1, r8, lsl #18
   1d6d4:	andeq	sp, r1, r0, lsr #18
   1d6d8:	andeq	sp, r1, ip, lsr sl
   1d6dc:	andeq	sp, r1, ip, lsr sl
   1d6e0:	andeq	sp, r1, ip, lsr sl
   1d6e4:	andeq	sp, r1, ip, lsr sl
   1d6e8:	andeq	sp, r1, ip, lsr sl
   1d6ec:	andeq	sp, r1, ip, lsr sl
   1d6f0:	andeq	sp, r1, ip, lsr sl
   1d6f4:	andeq	sp, r1, ip, lsr sl
   1d6f8:	andeq	sp, r1, ip, lsr sl
   1d6fc:	andeq	sp, r1, ip, lsr sl
   1d700:	andeq	sp, r1, ip, lsr sl
   1d704:	andeq	sp, r1, ip, lsr sl
   1d708:	andeq	sp, r1, ip, lsr sl
   1d70c:	andeq	sp, r1, ip, lsr sl
   1d710:	andeq	sp, r1, ip, lsr sl
   1d714:	andeq	sp, r1, ip, lsr sl
   1d718:	andeq	sp, r1, ip, lsr sl
   1d71c:	andeq	sp, r1, ip, lsr sl
   1d720:	andeq	sp, r1, r8, lsr #21
   1d724:	andeq	sp, r1, ip, lsr #21
   1d728:	andeq	sp, r1, ip, lsr #21
   1d72c:			; <UNDEFINED> instruction: 0x0001d8b0
   1d730:	andeq	sp, r1, ip, lsr #21
   1d734:	muleq	r1, ip, r8
   1d738:	andeq	sp, r1, ip, lsr #21
   1d73c:	andeq	sp, r1, ip, lsr #19
   1d740:	andeq	sp, r1, ip, lsr #21
   1d744:	andeq	sp, r1, ip, lsr #21
   1d748:	andeq	sp, r1, ip, lsr #21
   1d74c:	muleq	r1, ip, r8
   1d750:	muleq	r1, ip, r8
   1d754:	muleq	r1, ip, r8
   1d758:	muleq	r1, ip, r8
   1d75c:	muleq	r1, ip, r8
   1d760:	muleq	r1, ip, r8
   1d764:	muleq	r1, ip, r8
   1d768:	muleq	r1, ip, r8
   1d76c:	muleq	r1, ip, r8
   1d770:	muleq	r1, ip, r8
   1d774:	muleq	r1, ip, r8
   1d778:	muleq	r1, ip, r8
   1d77c:	muleq	r1, ip, r8
   1d780:	muleq	r1, ip, r8
   1d784:	muleq	r1, ip, r8
   1d788:	muleq	r1, ip, r8
   1d78c:	andeq	sp, r1, ip, lsr #21
   1d790:	andeq	sp, r1, ip, lsr #21
   1d794:	andeq	sp, r1, ip, lsr #21
   1d798:	andeq	sp, r1, ip, lsr #21
   1d79c:	andeq	sp, r1, r8, ror r9
   1d7a0:	andeq	sp, r1, ip, lsr sl
   1d7a4:	muleq	r1, ip, r8
   1d7a8:	muleq	r1, ip, r8
   1d7ac:	muleq	r1, ip, r8
   1d7b0:	muleq	r1, ip, r8
   1d7b4:	muleq	r1, ip, r8
   1d7b8:	muleq	r1, ip, r8
   1d7bc:	muleq	r1, ip, r8
   1d7c0:	muleq	r1, ip, r8
   1d7c4:	muleq	r1, ip, r8
   1d7c8:	muleq	r1, ip, r8
   1d7cc:	muleq	r1, ip, r8
   1d7d0:	muleq	r1, ip, r8
   1d7d4:	muleq	r1, ip, r8
   1d7d8:	muleq	r1, ip, r8
   1d7dc:	muleq	r1, ip, r8
   1d7e0:	muleq	r1, ip, r8
   1d7e4:	muleq	r1, ip, r8
   1d7e8:	muleq	r1, ip, r8
   1d7ec:	muleq	r1, ip, r8
   1d7f0:	muleq	r1, ip, r8
   1d7f4:	muleq	r1, ip, r8
   1d7f8:	muleq	r1, ip, r8
   1d7fc:	muleq	r1, ip, r8
   1d800:	muleq	r1, ip, r8
   1d804:	muleq	r1, ip, r8
   1d808:	muleq	r1, ip, r8
   1d80c:	andeq	sp, r1, ip, lsr #21
   1d810:	andeq	sp, r1, r4, ror #17
   1d814:	muleq	r1, ip, r8
   1d818:	andeq	sp, r1, ip, lsr #21
   1d81c:	muleq	r1, ip, r8
   1d820:	andeq	sp, r1, ip, lsr #21
   1d824:	muleq	r1, ip, r8
   1d828:	muleq	r1, ip, r8
   1d82c:	muleq	r1, ip, r8
   1d830:	muleq	r1, ip, r8
   1d834:	muleq	r1, ip, r8
   1d838:	muleq	r1, ip, r8
   1d83c:	muleq	r1, ip, r8
   1d840:	muleq	r1, ip, r8
   1d844:	muleq	r1, ip, r8
   1d848:	muleq	r1, ip, r8
   1d84c:	muleq	r1, ip, r8
   1d850:	muleq	r1, ip, r8
   1d854:	muleq	r1, ip, r8
   1d858:	muleq	r1, ip, r8
   1d85c:	muleq	r1, ip, r8
   1d860:	muleq	r1, ip, r8
   1d864:	muleq	r1, ip, r8
   1d868:	muleq	r1, ip, r8
   1d86c:	muleq	r1, ip, r8
   1d870:	muleq	r1, ip, r8
   1d874:	muleq	r1, ip, r8
   1d878:	muleq	r1, ip, r8
   1d87c:	muleq	r1, ip, r8
   1d880:	muleq	r1, ip, r8
   1d884:	muleq	r1, ip, r8
   1d888:	muleq	r1, ip, r8
   1d88c:	andeq	sp, r1, r4, asr #17
   1d890:	andeq	sp, r1, ip, lsr #21
   1d894:	andeq	sp, r1, r4, asr #17
   1d898:			; <UNDEFINED> instruction: 0x0001d8b0
   1d89c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1d8a0:	cmp	r0, #0
   1d8a4:	beq	1db04 <__assert_fail@plt+0xbc70>
   1d8a8:	ldr	r0, [fp, #16]
   1d8ac:	b	1db08 <__assert_fail@plt+0xbc74>
   1d8b0:	mov	r4, #0
   1d8b4:	cmp	r7, #0
   1d8b8:	beq	1daa8 <__assert_fail@plt+0xbc14>
   1d8bc:	mov	r9, #0
   1d8c0:	b	1d89c <__assert_fail@plt+0xba08>
   1d8c4:	mov	r4, #0
   1d8c8:	cmn	lr, #1
   1d8cc:	beq	1da8c <__assert_fail@plt+0xbbf8>
   1d8d0:	cmp	r7, #0
   1d8d4:	bne	1d8bc <__assert_fail@plt+0xba28>
   1d8d8:	cmp	lr, #1
   1d8dc:	beq	1daa8 <__assert_fail@plt+0xbc14>
   1d8e0:	b	1d8bc <__assert_fail@plt+0xba28>
   1d8e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d8e8:	cmp	r0, #2
   1d8ec:	bne	1dacc <__assert_fail@plt+0xbc38>
   1d8f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d8f4:	tst	r0, #1
   1d8f8:	bne	1e1c8 <__assert_fail@plt+0xc334>
   1d8fc:	mov	r9, #0
   1d900:	mov	r0, #92	; 0x5c
   1d904:	b	1dae0 <__assert_fail@plt+0xbc4c>
   1d908:	mov	r0, #102	; 0x66
   1d90c:	b	1daf0 <__assert_fail@plt+0xbc5c>
   1d910:	mov	r2, #116	; 0x74
   1d914:	b	1d924 <__assert_fail@plt+0xba90>
   1d918:	mov	r0, #98	; 0x62
   1d91c:	b	1daf0 <__assert_fail@plt+0xbc5c>
   1d920:	mov	r2, #114	; 0x72
   1d924:	ldr	r0, [sp, #68]	; 0x44
   1d928:	tst	r0, #1
   1d92c:	mov	r0, r2
   1d930:	bne	1daf0 <__assert_fail@plt+0xbc5c>
   1d934:	b	1e1c8 <__assert_fail@plt+0xc334>
   1d938:	ldr	r0, [sp, #84]	; 0x54
   1d93c:	tst	r0, #1
   1d940:	beq	1dbe0 <__assert_fail@plt+0xbd4c>
   1d944:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d948:	tst	r0, #1
   1d94c:	bne	1e2d8 <__assert_fail@plt+0xc444>
   1d950:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d954:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1d958:	cmp	r0, #2
   1d95c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1d960:	movwne	r0, #1
   1d964:	orr	r0, r0, r2
   1d968:	tst	r0, #1
   1d96c:	beq	1dfb0 <__assert_fail@plt+0xc11c>
   1d970:	mov	r0, r8
   1d974:	b	1dfe4 <__assert_fail@plt+0xc150>
   1d978:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d97c:	mov	r9, #0
   1d980:	mov	r5, #63	; 0x3f
   1d984:	cmp	r0, #5
   1d988:	beq	1dd94 <__assert_fail@plt+0xbf00>
   1d98c:	cmp	r0, #2
   1d990:	bne	1de38 <__assert_fail@plt+0xbfa4>
   1d994:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d998:	tst	r0, #1
   1d99c:	beq	1de3c <__assert_fail@plt+0xbfa8>
   1d9a0:	b	1e1c8 <__assert_fail@plt+0xc334>
   1d9a4:	mov	r0, #118	; 0x76
   1d9a8:	b	1daf0 <__assert_fail@plt+0xbc5c>
   1d9ac:	mov	r0, #1
   1d9b0:	mov	r5, #39	; 0x27
   1d9b4:	str	r0, [sp, #60]	; 0x3c
   1d9b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d9bc:	cmp	r0, #2
   1d9c0:	bne	1da34 <__assert_fail@plt+0xbba0>
   1d9c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d9c8:	tst	r0, #1
   1d9cc:	bne	1e1c8 <__assert_fail@plt+0xc334>
   1d9d0:	ldr	r2, [sp, #56]	; 0x38
   1d9d4:	clz	r1, sl
   1d9d8:	mov	r9, #0
   1d9dc:	lsr	r1, r1, #5
   1d9e0:	cmp	r2, #0
   1d9e4:	mov	r0, r2
   1d9e8:	movwne	r0, #1
   1d9ec:	orrs	r0, r0, r1
   1d9f0:	moveq	r2, sl
   1d9f4:	moveq	sl, r0
   1d9f8:	cmp	r8, sl
   1d9fc:	str	r2, [sp, #56]	; 0x38
   1da00:	movcc	r0, #39	; 0x27
   1da04:	strbcc	r0, [r6, r8]
   1da08:	add	r0, r8, #1
   1da0c:	cmp	r0, sl
   1da10:	movcc	r1, #92	; 0x5c
   1da14:	strbcc	r1, [r6, r0]
   1da18:	add	r0, r8, #2
   1da1c:	add	r8, r8, #3
   1da20:	cmp	r0, sl
   1da24:	movcc	r1, #39	; 0x27
   1da28:	strbcc	r1, [r6, r0]
   1da2c:	mov	r0, #0
   1da30:	str	r0, [fp, #-56]	; 0xffffffc8
   1da34:	mov	r4, #1
   1da38:	b	1d89c <__assert_fail@plt+0xba08>
   1da3c:	ldr	r0, [sp, #40]	; 0x28
   1da40:	cmp	r0, #1
   1da44:	bne	1dc0c <__assert_fail@plt+0xbd78>
   1da48:	str	lr, [sp, #28]
   1da4c:	bl	11c54 <__ctype_b_loc@plt>
   1da50:	ldr	r0, [r0]
   1da54:	ldr	ip, [fp, #-84]	; 0xffffffac
   1da58:	mov	r1, #1
   1da5c:	add	r0, r0, r5, lsl #1
   1da60:	ldrb	r0, [r0, #1]
   1da64:	ubfx	r4, r0, #6, #1
   1da68:	ldr	r0, [sp, #52]	; 0x34
   1da6c:	mov	r2, r1
   1da70:	cmp	r1, #1
   1da74:	orr	r0, r4, r0
   1da78:	bhi	1de44 <__assert_fail@plt+0xbfb0>
   1da7c:	tst	r0, #1
   1da80:	beq	1de44 <__assert_fail@plt+0xbfb0>
   1da84:	ldr	lr, [sp, #28]
   1da88:	b	1d89c <__assert_fail@plt+0xba08>
   1da8c:	cmp	r7, #0
   1da90:	ldrbeq	r0, [ip, #1]
   1da94:	cmpeq	r0, #0
   1da98:	beq	1daa8 <__assert_fail@plt+0xbc14>
   1da9c:	mvn	lr, #0
   1daa0:	mov	r9, #0
   1daa4:	b	1d89c <__assert_fail@plt+0xba08>
   1daa8:	mov	r1, #1
   1daac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1dab0:	cmp	r0, #2
   1dab4:	bne	1dac4 <__assert_fail@plt+0xbc30>
   1dab8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1dabc:	tst	r0, #1
   1dac0:	bne	1e1c8 <__assert_fail@plt+0xc334>
   1dac4:	mov	r4, r1
   1dac8:	b	1d89c <__assert_fail@plt+0xba08>
   1dacc:	ldr	r1, [sp, #48]	; 0x30
   1dad0:	mov	r9, #0
   1dad4:	mov	r0, #92	; 0x5c
   1dad8:	cmp	r1, #0
   1dadc:	beq	1daf0 <__assert_fail@plt+0xbc5c>
   1dae0:	mov	r4, #0
   1dae4:	cmp	r9, #0
   1dae8:	beq	1e07c <__assert_fail@plt+0xc1e8>
   1daec:	b	1e0b8 <__assert_fail@plt+0xc224>
   1daf0:	ldr	r1, [sp, #84]	; 0x54
   1daf4:	mov	r4, #0
   1daf8:	mov	r9, #0
   1dafc:	tst	r1, #1
   1db00:	bne	1db40 <__assert_fail@plt+0xbcac>
   1db04:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1db08:	cmp	r0, #0
   1db0c:	mov	r0, r5
   1db10:	beq	1db34 <__assert_fail@plt+0xbca0>
   1db14:	ldr	r1, [fp, #16]
   1db18:	ubfx	r0, r5, #5, #3
   1db1c:	mov	r2, #1
   1db20:	ldr	r0, [r1, r0, lsl #2]
   1db24:	and	r1, r5, #31
   1db28:	tst	r0, r2, lsl r1
   1db2c:	mov	r0, r5
   1db30:	bne	1db40 <__assert_fail@plt+0xbcac>
   1db34:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1db38:	cmp	r1, #0
   1db3c:	beq	1e074 <__assert_fail@plt+0xc1e0>
   1db40:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1db44:	tst	r1, #1
   1db48:	bne	1e1a0 <__assert_fail@plt+0xc30c>
   1db4c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1db50:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1db54:	cmp	r1, #2
   1db58:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1db5c:	movwne	r1, #1
   1db60:	orr	r1, r1, r2
   1db64:	tst	r1, #1
   1db68:	beq	1db74 <__assert_fail@plt+0xbce0>
   1db6c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1db70:	b	1dbb0 <__assert_fail@plt+0xbd1c>
   1db74:	cmp	r8, sl
   1db78:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1db7c:	movcc	r1, #39	; 0x27
   1db80:	strbcc	r1, [r6, r8]
   1db84:	add	r1, r8, #1
   1db88:	cmp	r1, sl
   1db8c:	movcc	r2, #36	; 0x24
   1db90:	strbcc	r2, [r6, r1]
   1db94:	add	r1, r8, #2
   1db98:	add	r8, r8, #3
   1db9c:	cmp	r1, sl
   1dba0:	movcc	r2, #39	; 0x27
   1dba4:	strbcc	r2, [r6, r1]
   1dba8:	mov	r1, #1
   1dbac:	str	r1, [fp, #-56]	; 0xffffffc8
   1dbb0:	cmp	r8, sl
   1dbb4:	movcc	r1, #92	; 0x5c
   1dbb8:	strbcc	r1, [r6, r8]
   1dbbc:	add	r8, r8, #1
   1dbc0:	cmp	r8, sl
   1dbc4:	and	r5, r5, r4
   1dbc8:	add	r7, r7, #1
   1dbcc:	strbcc	r0, [r6, r8]
   1dbd0:	add	r8, r8, #1
   1dbd4:	cmn	lr, #1
   1dbd8:	bne	1d5d4 <__assert_fail@plt+0xb740>
   1dbdc:	b	1d5e0 <__assert_fail@plt+0xb74c>
   1dbe0:	ldr	r0, [sp, #36]	; 0x24
   1dbe4:	mov	r4, #0
   1dbe8:	mov	r9, #0
   1dbec:	mov	r5, #0
   1dbf0:	cmp	r0, #0
   1dbf4:	beq	1db04 <__assert_fail@plt+0xbc70>
   1dbf8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1dbfc:	add	r7, r7, #1
   1dc00:	cmn	lr, #1
   1dc04:	bne	1d5d4 <__assert_fail@plt+0xb740>
   1dc08:	b	1d5e0 <__assert_fail@plt+0xb74c>
   1dc0c:	mov	r0, #0
   1dc10:	cmn	lr, #1
   1dc14:	str	r0, [fp, #-36]	; 0xffffffdc
   1dc18:	str	r0, [fp, #-40]	; 0xffffffd8
   1dc1c:	bne	1dc30 <__assert_fail@plt+0xbd9c>
   1dc20:	mov	r0, ip
   1dc24:	bl	11c78 <strlen@plt>
   1dc28:	ldr	ip, [fp, #-84]	; 0xffffffac
   1dc2c:	mov	lr, r0
   1dc30:	add	r0, ip, r7
   1dc34:	mov	r4, #1
   1dc38:	mov	r6, #0
   1dc3c:	str	lr, [sp, #28]
   1dc40:	str	r0, [sp, #24]
   1dc44:	sub	r0, fp, #40	; 0x28
   1dc48:	mov	r3, r0
   1dc4c:	str	r6, [sp, #44]	; 0x2c
   1dc50:	add	r6, r6, r7
   1dc54:	sub	r0, fp, #44	; 0x2c
   1dc58:	add	r1, ip, r6
   1dc5c:	sub	r2, lr, r6
   1dc60:	bl	34cac <__assert_fail@plt+0x22e18>
   1dc64:	cmp	r0, #0
   1dc68:	beq	1e100 <__assert_fail@plt+0xc26c>
   1dc6c:	cmn	r0, #1
   1dc70:	beq	1e0c0 <__assert_fail@plt+0xc22c>
   1dc74:	ldr	lr, [sp, #28]
   1dc78:	cmn	r0, #2
   1dc7c:	beq	1e0c8 <__assert_fail@plt+0xc234>
   1dc80:	ldr	r2, [sp, #64]	; 0x40
   1dc84:	cmp	r0, #2
   1dc88:	mov	r1, #0
   1dc8c:	movwcc	r1, #1
   1dc90:	eor	r2, r2, #1
   1dc94:	orrs	r1, r2, r1
   1dc98:	bne	1dd58 <__assert_fail@plt+0xbec4>
   1dc9c:	ldr	r1, [sp, #44]	; 0x2c
   1dca0:	ldr	r2, [sp, #24]
   1dca4:	add	r1, r2, r1
   1dca8:	mov	r2, #1
   1dcac:	ldrb	r3, [r1, r2]
   1dcb0:	sub	r3, r3, #91	; 0x5b
   1dcb4:	cmp	r3, #33	; 0x21
   1dcb8:	bhi	1dd4c <__assert_fail@plt+0xbeb8>
   1dcbc:	add	r6, pc, #0
   1dcc0:	ldr	pc, [r6, r3, lsl #2]
   1dcc4:	andeq	lr, r1, r0, asr #3
   1dcc8:	andeq	lr, r1, r0, asr #3
   1dccc:	andeq	sp, r1, ip, asr #26
   1dcd0:	andeq	lr, r1, r0, asr #3
   1dcd4:	andeq	sp, r1, ip, asr #26
   1dcd8:	andeq	lr, r1, r0, asr #3
   1dcdc:	andeq	sp, r1, ip, asr #26
   1dce0:	andeq	sp, r1, ip, asr #26
   1dce4:	andeq	sp, r1, ip, asr #26
   1dce8:	andeq	sp, r1, ip, asr #26
   1dcec:	andeq	sp, r1, ip, asr #26
   1dcf0:	andeq	sp, r1, ip, asr #26
   1dcf4:	andeq	sp, r1, ip, asr #26
   1dcf8:	andeq	sp, r1, ip, asr #26
   1dcfc:	andeq	sp, r1, ip, asr #26
   1dd00:	andeq	sp, r1, ip, asr #26
   1dd04:	andeq	sp, r1, ip, asr #26
   1dd08:	andeq	sp, r1, ip, asr #26
   1dd0c:	andeq	sp, r1, ip, asr #26
   1dd10:	andeq	sp, r1, ip, asr #26
   1dd14:	andeq	sp, r1, ip, asr #26
   1dd18:	andeq	sp, r1, ip, asr #26
   1dd1c:	andeq	sp, r1, ip, asr #26
   1dd20:	andeq	sp, r1, ip, asr #26
   1dd24:	andeq	sp, r1, ip, asr #26
   1dd28:	andeq	sp, r1, ip, asr #26
   1dd2c:	andeq	sp, r1, ip, asr #26
   1dd30:	andeq	sp, r1, ip, asr #26
   1dd34:	andeq	sp, r1, ip, asr #26
   1dd38:	andeq	sp, r1, ip, asr #26
   1dd3c:	andeq	sp, r1, ip, asr #26
   1dd40:	andeq	sp, r1, ip, asr #26
   1dd44:	andeq	sp, r1, ip, asr #26
   1dd48:	andeq	lr, r1, r0, asr #3
   1dd4c:	add	r2, r2, #1
   1dd50:	cmp	r2, r0
   1dd54:	bcc	1dcac <__assert_fail@plt+0xbe18>
   1dd58:	ldr	r6, [sp, #44]	; 0x2c
   1dd5c:	add	r6, r0, r6
   1dd60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dd64:	bl	11b34 <iswprint@plt>
   1dd68:	cmp	r0, #0
   1dd6c:	movwne	r0, #1
   1dd70:	and	r4, r4, r0
   1dd74:	sub	r0, fp, #40	; 0x28
   1dd78:	bl	11abc <mbsinit@plt>
   1dd7c:	ldr	lr, [sp, #28]
   1dd80:	ldr	ip, [fp, #-84]	; 0xffffffac
   1dd84:	sub	r3, fp, #40	; 0x28
   1dd88:	cmp	r0, #0
   1dd8c:	beq	1dc4c <__assert_fail@plt+0xbdb8>
   1dd90:	b	1e108 <__assert_fail@plt+0xc274>
   1dd94:	ldr	r0, [sp, #32]
   1dd98:	cmp	r0, #0
   1dd9c:	beq	1de38 <__assert_fail@plt+0xbfa4>
   1dda0:	add	r0, r7, #2
   1dda4:	cmp	r0, lr
   1dda8:	bcs	1de38 <__assert_fail@plt+0xbfa4>
   1ddac:	add	r1, ip, r7
   1ddb0:	ldrb	r1, [r1, #1]
   1ddb4:	cmp	r1, #63	; 0x3f
   1ddb8:	bne	1de38 <__assert_fail@plt+0xbfa4>
   1ddbc:	ldrb	r5, [ip, r0]
   1ddc0:	sub	r1, r5, #33	; 0x21
   1ddc4:	cmp	r1, #29
   1ddc8:	bhi	1de38 <__assert_fail@plt+0xbfa4>
   1ddcc:	movw	r3, #20929	; 0x51c1
   1ddd0:	mov	r2, #1
   1ddd4:	movt	r3, #14336	; 0x3800
   1ddd8:	tst	r3, r2, lsl r1
   1dddc:	beq	1de38 <__assert_fail@plt+0xbfa4>
   1dde0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1dde4:	tst	r1, #1
   1dde8:	bne	1e2e0 <__assert_fail@plt+0xc44c>
   1ddec:	cmp	r8, sl
   1ddf0:	mov	r7, r0
   1ddf4:	mov	r4, #0
   1ddf8:	movcc	r1, #63	; 0x3f
   1ddfc:	strbcc	r1, [r6, r8]
   1de00:	add	r1, r8, #1
   1de04:	cmp	r1, sl
   1de08:	movcc	r2, #34	; 0x22
   1de0c:	strbcc	r2, [r6, r1]
   1de10:	add	r1, r8, #2
   1de14:	cmp	r1, sl
   1de18:	movcc	r2, #34	; 0x22
   1de1c:	strbcc	r2, [r6, r1]
   1de20:	add	r1, r8, #3
   1de24:	add	r8, r8, #4
   1de28:	cmp	r1, sl
   1de2c:	movcc	r2, #63	; 0x3f
   1de30:	strbcc	r2, [r6, r1]
   1de34:	b	1d89c <__assert_fail@plt+0xba08>
   1de38:	mov	r5, #63	; 0x3f
   1de3c:	mov	r4, #0
   1de40:	b	1d89c <__assert_fail@plt+0xba08>
   1de44:	add	r1, r2, r7
   1de48:	ldr	lr, [sp, #28]
   1de4c:	mov	r3, #0
   1de50:	str	r1, [sp, #44]	; 0x2c
   1de54:	add	r1, r7, #1
   1de58:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1de5c:	tst	r0, #1
   1de60:	bne	1df34 <__assert_fail@plt+0xc0a0>
   1de64:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1de68:	tst	r2, #1
   1de6c:	bne	1e228 <__assert_fail@plt+0xc394>
   1de70:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1de74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1de78:	cmp	r7, #2
   1de7c:	movwne	r3, #1
   1de80:	orr	r3, r3, r2
   1de84:	tst	r3, #1
   1de88:	bne	1dec4 <__assert_fail@plt+0xc030>
   1de8c:	cmp	r8, sl
   1de90:	add	r3, r8, #1
   1de94:	movcc	r2, #39	; 0x27
   1de98:	strbcc	r2, [r6, r8]
   1de9c:	cmp	r3, sl
   1dea0:	movcc	r2, #36	; 0x24
   1dea4:	strbcc	r2, [r6, r3]
   1dea8:	add	r3, r8, #2
   1deac:	add	r8, r8, #3
   1deb0:	cmp	r3, sl
   1deb4:	movcc	r2, #39	; 0x27
   1deb8:	strbcc	r2, [r6, r3]
   1debc:	mov	r2, #1
   1dec0:	str	r2, [fp, #-56]	; 0xffffffc8
   1dec4:	cmp	r8, sl
   1dec8:	movcc	r3, #92	; 0x5c
   1decc:	strbcc	r3, [r6, r8]
   1ded0:	add	r3, r8, #1
   1ded4:	cmp	r3, sl
   1ded8:	andcc	r7, r5, #192	; 0xc0
   1dedc:	movcc	r2, #48	; 0x30
   1dee0:	orrcc	r7, r2, r7, lsr #6
   1dee4:	strbcc	r7, [r6, r3]
   1dee8:	add	r3, r8, #2
   1deec:	add	r8, r8, #3
   1def0:	cmp	r3, sl
   1def4:	lsrcc	r7, r5, #3
   1def8:	movcc	r2, #6
   1defc:	bficc	r7, r2, #3, #29
   1df00:	mov	r2, #6
   1df04:	strbcc	r7, [r6, r3]
   1df08:	bfi	r5, r2, #3, #29
   1df0c:	mov	r3, #1
   1df10:	b	1df58 <__assert_fail@plt+0xc0c4>
   1df14:	cmp	r8, sl
   1df18:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1df1c:	strbcc	r5, [r6, r8]
   1df20:	add	r8, r8, #1
   1df24:	ldrb	r5, [ip, r1]
   1df28:	add	r1, r1, #1
   1df2c:	tst	r0, #1
   1df30:	beq	1de64 <__assert_fail@plt+0xbfd0>
   1df34:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1df38:	tst	r2, #1
   1df3c:	beq	1df50 <__assert_fail@plt+0xc0bc>
   1df40:	cmp	r8, sl
   1df44:	movcc	r7, #92	; 0x5c
   1df48:	strbcc	r7, [r6, r8]
   1df4c:	add	r8, r8, #1
   1df50:	mov	r2, #0
   1df54:	str	r2, [fp, #-52]	; 0xffffffcc
   1df58:	ldr	r2, [sp, #44]	; 0x2c
   1df5c:	and	r9, r3, #1
   1df60:	cmp	r2, r1
   1df64:	bls	1e064 <__assert_fail@plt+0xc1d0>
   1df68:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1df6c:	cmp	r9, #0
   1df70:	movwne	r9, #1
   1df74:	mvn	r7, r2
   1df78:	orr	r7, r7, r9
   1df7c:	tst	r7, #1
   1df80:	bne	1df14 <__assert_fail@plt+0xc080>
   1df84:	cmp	r8, sl
   1df88:	movcc	r7, #39	; 0x27
   1df8c:	strbcc	r7, [r6, r8]
   1df90:	add	r7, r8, #1
   1df94:	add	r8, r8, #2
   1df98:	cmp	r7, sl
   1df9c:	movcc	r2, #39	; 0x27
   1dfa0:	strbcc	r2, [r6, r7]
   1dfa4:	mov	r2, #0
   1dfa8:	str	r2, [fp, #-56]	; 0xffffffc8
   1dfac:	b	1df14 <__assert_fail@plt+0xc080>
   1dfb0:	cmp	r8, sl
   1dfb4:	mov	r2, #1
   1dfb8:	movcc	r0, #39	; 0x27
   1dfbc:	strbcc	r0, [r6, r8]
   1dfc0:	add	r0, r8, #1
   1dfc4:	cmp	r0, sl
   1dfc8:	movcc	r1, #36	; 0x24
   1dfcc:	strbcc	r1, [r6, r0]
   1dfd0:	add	r0, r8, #2
   1dfd4:	cmp	r0, sl
   1dfd8:	movcc	r1, #39	; 0x27
   1dfdc:	strbcc	r1, [r6, r0]
   1dfe0:	add	r0, r8, #3
   1dfe4:	cmp	r0, sl
   1dfe8:	add	r8, r0, #1
   1dfec:	str	r2, [fp, #-56]	; 0xffffffc8
   1dff0:	movcc	r1, #92	; 0x5c
   1dff4:	strbcc	r1, [r6, r0]
   1dff8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1dffc:	cmp	r1, #2
   1e000:	beq	1e054 <__assert_fail@plt+0xc1c0>
   1e004:	add	r1, r7, #1
   1e008:	mov	r4, #0
   1e00c:	mov	r9, #1
   1e010:	mov	r5, #48	; 0x30
   1e014:	cmp	r1, lr
   1e018:	bcs	1d89c <__assert_fail@plt+0xba08>
   1e01c:	ldrb	r1, [ip, r1]
   1e020:	sub	r1, r1, #48	; 0x30
   1e024:	uxtb	r1, r1
   1e028:	cmp	r1, #9
   1e02c:	bhi	1d89c <__assert_fail@plt+0xba08>
   1e030:	cmp	r8, sl
   1e034:	movcc	r1, #48	; 0x30
   1e038:	strbcc	r1, [r6, r8]
   1e03c:	add	r1, r0, #2
   1e040:	add	r8, r0, #3
   1e044:	cmp	r1, sl
   1e048:	movcc	r2, #48	; 0x30
   1e04c:	strbcc	r2, [r6, r1]
   1e050:	b	1d89c <__assert_fail@plt+0xba08>
   1e054:	mov	r0, #48	; 0x30
   1e058:	mov	r9, #1
   1e05c:	mov	r4, #0
   1e060:	b	1db34 <__assert_fail@plt+0xbca0>
   1e064:	cmp	r9, #0
   1e068:	sub	r7, r1, #1
   1e06c:	mov	r0, r5
   1e070:	movwne	r9, #1
   1e074:	cmp	r9, #0
   1e078:	bne	1e0b8 <__assert_fail@plt+0xc224>
   1e07c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1e080:	tst	r1, #1
   1e084:	beq	1e0b8 <__assert_fail@plt+0xc224>
   1e088:	cmp	r8, sl
   1e08c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1e090:	movcc	r1, #39	; 0x27
   1e094:	strbcc	r1, [r6, r8]
   1e098:	add	r1, r8, #1
   1e09c:	add	r8, r8, #2
   1e0a0:	cmp	r1, sl
   1e0a4:	movcc	r2, #39	; 0x27
   1e0a8:	strbcc	r2, [r6, r1]
   1e0ac:	mov	r1, #0
   1e0b0:	str	r1, [fp, #-56]	; 0xffffffc8
   1e0b4:	b	1dbc0 <__assert_fail@plt+0xbd2c>
   1e0b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1e0bc:	b	1dbc0 <__assert_fail@plt+0xbd2c>
   1e0c0:	mov	r4, #0
   1e0c4:	b	1e100 <__assert_fail@plt+0xc26c>
   1e0c8:	mov	r4, #0
   1e0cc:	cmp	lr, r6
   1e0d0:	bls	1e100 <__assert_fail@plt+0xc26c>
   1e0d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e0d8:	ldr	r6, [sp, #44]	; 0x2c
   1e0dc:	ldr	r0, [sp, #24]
   1e0e0:	ldrb	r0, [r0, r6]
   1e0e4:	cmp	r0, #0
   1e0e8:	beq	1e108 <__assert_fail@plt+0xc274>
   1e0ec:	add	r6, r6, #1
   1e0f0:	add	r0, r7, r6
   1e0f4:	cmp	r0, lr
   1e0f8:	bcc	1e0dc <__assert_fail@plt+0xc248>
   1e0fc:	b	1e108 <__assert_fail@plt+0xc274>
   1e100:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e104:	ldr	r6, [sp, #44]	; 0x2c
   1e108:	mov	r1, r6
   1e10c:	ldr	r6, [sp, #80]	; 0x50
   1e110:	b	1da68 <__assert_fail@plt+0xbbd4>
   1e114:	mov	lr, r7
   1e118:	b	1e120 <__assert_fail@plt+0xc28c>
   1e11c:	mvn	lr, #0
   1e120:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1e124:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1e128:	eor	r0, r7, #2
   1e12c:	orr	r0, r0, r8
   1e130:	clz	r0, r0
   1e134:	lsr	r0, r0, #5
   1e138:	tst	r1, r0
   1e13c:	bne	1e1c8 <__assert_fail@plt+0xc334>
   1e140:	mov	r0, r1
   1e144:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1e148:	cmp	r7, #2
   1e14c:	movwne	r1, #1
   1e150:	orr	r0, r0, r1
   1e154:	tst	r0, #1
   1e158:	ldreq	r0, [sp, #60]	; 0x3c
   1e15c:	eoreq	r0, r0, #1
   1e160:	tsteq	r0, #1
   1e164:	bne	1e274 <__assert_fail@plt+0xc3e0>
   1e168:	mov	r9, lr
   1e16c:	tst	r5, #1
   1e170:	bne	1e230 <__assert_fail@plt+0xc39c>
   1e174:	ldr	r6, [sp, #56]	; 0x38
   1e178:	mov	r4, #0
   1e17c:	cmp	r6, #0
   1e180:	beq	1e26c <__assert_fail@plt+0xc3d8>
   1e184:	ldr	r0, [sp, #84]	; 0x54
   1e188:	mov	r1, #0
   1e18c:	cmp	sl, #0
   1e190:	mov	r5, #0
   1e194:	str	r1, [fp, #-72]	; 0xffffffb8
   1e198:	beq	1d368 <__assert_fail@plt+0xb4d4>
   1e19c:	b	1e274 <__assert_fail@plt+0xc3e0>
   1e1a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1e1a4:	ldr	r2, [sp, #84]	; 0x54
   1e1a8:	b	1e1d0 <__assert_fail@plt+0xc33c>
   1e1ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e1b0:	mov	r2, #1
   1e1b4:	mov	lr, r4
   1e1b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1e1bc:	b	1e1d0 <__assert_fail@plt+0xc33c>
   1e1c0:	ldr	r6, [sp, #80]	; 0x50
   1e1c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e1c8:	ldr	r2, [sp, #84]	; 0x54
   1e1cc:	mov	r7, #2
   1e1d0:	mov	r0, #0
   1e1d4:	ldr	r1, [fp, #12]
   1e1d8:	tst	r2, #1
   1e1dc:	mov	r2, r7
   1e1e0:	mov	r3, lr
   1e1e4:	str	r0, [sp, #8]
   1e1e8:	ldr	r0, [sp, #72]	; 0x48
   1e1ec:	movwne	r2, #4
   1e1f0:	cmp	r7, #2
   1e1f4:	movne	r2, r7
   1e1f8:	str	r2, [sp]
   1e1fc:	mov	r2, ip
   1e200:	bic	r1, r1, #2
   1e204:	str	r0, [sp, #12]
   1e208:	ldr	r0, [sp, #76]	; 0x4c
   1e20c:	str	r1, [sp, #4]
   1e210:	mov	r1, sl
   1e214:	str	r0, [sp, #16]
   1e218:	mov	r0, r6
   1e21c:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1e220:	mov	r8, r0
   1e224:	b	1e2cc <__assert_fail@plt+0xc438>
   1e228:	ldr	r2, [sp, #84]	; 0x54
   1e22c:	b	1e1d0 <__assert_fail@plt+0xc33c>
   1e230:	mov	r0, #5
   1e234:	ldr	r1, [sp, #56]	; 0x38
   1e238:	ldr	r2, [fp, #-84]	; 0xffffffac
   1e23c:	mov	r3, r9
   1e240:	str	r0, [sp]
   1e244:	ldr	r0, [fp, #12]
   1e248:	str	r0, [sp, #4]
   1e24c:	ldr	r0, [fp, #16]
   1e250:	str	r0, [sp, #8]
   1e254:	ldr	r0, [sp, #72]	; 0x48
   1e258:	str	r0, [sp, #12]
   1e25c:	ldr	r0, [sp, #76]	; 0x4c
   1e260:	str	r0, [sp, #16]
   1e264:	ldr	r0, [sp, #80]	; 0x50
   1e268:	b	1e21c <__assert_fail@plt+0xc388>
   1e26c:	mov	r0, #0
   1e270:	str	r0, [fp, #-72]	; 0xffffffb8
   1e274:	ldr	r1, [sp, #92]	; 0x5c
   1e278:	cmp	r1, #0
   1e27c:	beq	1e2bc <__assert_fail@plt+0xc428>
   1e280:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e284:	ldr	r2, [sp, #80]	; 0x50
   1e288:	tst	r0, #1
   1e28c:	bne	1e2c0 <__assert_fail@plt+0xc42c>
   1e290:	ldrb	r0, [r1]
   1e294:	cmp	r0, #0
   1e298:	beq	1e2c0 <__assert_fail@plt+0xc42c>
   1e29c:	add	r1, r1, #1
   1e2a0:	cmp	r8, sl
   1e2a4:	strbcc	r0, [r2, r8]
   1e2a8:	add	r8, r8, #1
   1e2ac:	ldrb	r0, [r1], #1
   1e2b0:	cmp	r0, #0
   1e2b4:	bne	1e2a0 <__assert_fail@plt+0xc40c>
   1e2b8:	b	1e2c0 <__assert_fail@plt+0xc42c>
   1e2bc:	ldr	r2, [sp, #80]	; 0x50
   1e2c0:	cmp	r8, sl
   1e2c4:	movcc	r0, #0
   1e2c8:	strbcc	r0, [r2, r8]
   1e2cc:	mov	r0, r8
   1e2d0:	sub	sp, fp, #28
   1e2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2d8:	mov	r2, #1
   1e2dc:	b	1e1b8 <__assert_fail@plt+0xc324>
   1e2e0:	ldr	r2, [sp, #84]	; 0x54
   1e2e4:	mov	r7, #5
   1e2e8:	b	1e1d0 <__assert_fail@plt+0xc33c>
   1e2ec:	bl	11e58 <abort@plt>
   1e2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2f4:	add	fp, sp, #28
   1e2f8:	sub	sp, sp, #28
   1e2fc:	movw	r5, #33464	; 0x82b8
   1e300:	cmp	r2, #0
   1e304:	mov	r4, r1
   1e308:	mov	r7, r0
   1e30c:	str	r0, [sp, #20]
   1e310:	movt	r5, #4
   1e314:	movne	r5, r2
   1e318:	bl	11ca8 <__errno_location@plt>
   1e31c:	mov	sl, r0
   1e320:	ldm	r5, {r0, r1}
   1e324:	ldr	r2, [r5, #40]	; 0x28
   1e328:	ldr	r3, [r5, #44]	; 0x2c
   1e32c:	add	r9, r5, #8
   1e330:	ldr	r6, [sl]
   1e334:	orr	r8, r1, #1
   1e338:	mov	r1, #0
   1e33c:	str	r6, [sp, #24]
   1e340:	stm	sp, {r0, r8, r9}
   1e344:	str	r2, [sp, #12]
   1e348:	str	r3, [sp, #16]
   1e34c:	mov	r0, #0
   1e350:	mov	r2, r7
   1e354:	mov	r3, r4
   1e358:	mov	r6, r4
   1e35c:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1e360:	add	r7, r0, #1
   1e364:	mov	r0, r7
   1e368:	bl	30fd8 <__assert_fail@plt+0x1f144>
   1e36c:	mov	r4, r0
   1e370:	ldr	r0, [r5]
   1e374:	ldr	r2, [r5, #44]	; 0x2c
   1e378:	ldr	r1, [r5, #40]	; 0x28
   1e37c:	mov	r3, r6
   1e380:	stm	sp, {r0, r8, r9}
   1e384:	str	r2, [sp, #16]
   1e388:	str	r1, [sp, #12]
   1e38c:	mov	r0, r4
   1e390:	mov	r1, r7
   1e394:	ldr	r2, [sp, #20]
   1e398:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1e39c:	ldr	r0, [sp, #24]
   1e3a0:	str	r0, [sl]
   1e3a4:	mov	r0, r4
   1e3a8:	sub	sp, fp, #28
   1e3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3b4:	add	fp, sp, #28
   1e3b8:	sub	sp, sp, #36	; 0x24
   1e3bc:	movw	r8, #33464	; 0x82b8
   1e3c0:	cmp	r3, #0
   1e3c4:	mov	r4, r2
   1e3c8:	str	r2, [sp, #24]
   1e3cc:	mov	r5, r1
   1e3d0:	mov	r6, r0
   1e3d4:	str	r0, [sp, #20]
   1e3d8:	movt	r8, #4
   1e3dc:	movne	r8, r3
   1e3e0:	bl	11ca8 <__errno_location@plt>
   1e3e4:	str	r0, [sp, #28]
   1e3e8:	cmp	r4, #0
   1e3ec:	add	sl, r8, #8
   1e3f0:	ldm	r8, {r3, r9}
   1e3f4:	ldr	r7, [r0]
   1e3f8:	ldr	r1, [r8, #40]	; 0x28
   1e3fc:	ldr	r2, [r8, #44]	; 0x2c
   1e400:	mov	r0, #0
   1e404:	orreq	r9, r9, #1
   1e408:	str	r7, [sp, #32]
   1e40c:	mov	r7, r5
   1e410:	stm	sp, {r3, r9, sl}
   1e414:	str	r1, [sp, #12]
   1e418:	str	r2, [sp, #16]
   1e41c:	mov	r1, #0
   1e420:	mov	r2, r6
   1e424:	mov	r3, r5
   1e428:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1e42c:	add	r4, r0, #1
   1e430:	mov	r5, r0
   1e434:	mov	r0, r4
   1e438:	bl	30fd8 <__assert_fail@plt+0x1f144>
   1e43c:	mov	r6, r0
   1e440:	ldr	r0, [r8]
   1e444:	ldr	r2, [r8, #44]	; 0x2c
   1e448:	ldr	r1, [r8, #40]	; 0x28
   1e44c:	mov	r3, r7
   1e450:	stm	sp, {r0, r9, sl}
   1e454:	str	r2, [sp, #16]
   1e458:	str	r1, [sp, #12]
   1e45c:	mov	r0, r6
   1e460:	mov	r1, r4
   1e464:	ldr	r2, [sp, #20]
   1e468:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1e46c:	ldr	r0, [sp, #24]
   1e470:	ldr	r1, [sp, #32]
   1e474:	ldr	r2, [sp, #28]
   1e478:	cmp	r0, #0
   1e47c:	str	r1, [r2]
   1e480:	strne	r5, [r0]
   1e484:	mov	r0, r6
   1e488:	sub	sp, fp, #28
   1e48c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e494:	add	fp, sp, #24
   1e498:	movw	r5, #33244	; 0x81dc
   1e49c:	movw	r8, #33240	; 0x81d8
   1e4a0:	movt	r5, #4
   1e4a4:	movt	r8, #4
   1e4a8:	ldr	r0, [r5]
   1e4ac:	ldr	r4, [r8]
   1e4b0:	cmp	r0, #2
   1e4b4:	blt	1e4e0 <__assert_fail@plt+0xc64c>
   1e4b8:	add	r7, r4, #12
   1e4bc:	mov	r6, #0
   1e4c0:	ldr	r0, [r7, r6, lsl #3]
   1e4c4:	bl	17754 <__assert_fail@plt+0x58c0>
   1e4c8:	ldr	r1, [r5]
   1e4cc:	add	r2, r6, #2
   1e4d0:	add	r0, r6, #1
   1e4d4:	mov	r6, r0
   1e4d8:	cmp	r2, r1
   1e4dc:	blt	1e4c0 <__assert_fail@plt+0xc62c>
   1e4e0:	ldr	r0, [r4, #4]
   1e4e4:	movw	r7, #33512	; 0x82e8
   1e4e8:	movt	r7, #4
   1e4ec:	cmp	r0, r7
   1e4f0:	beq	1e508 <__assert_fail@plt+0xc674>
   1e4f4:	bl	17754 <__assert_fail@plt+0x58c0>
   1e4f8:	movw	r0, #33248	; 0x81e0
   1e4fc:	mov	r6, #256	; 0x100
   1e500:	movt	r0, #4
   1e504:	strd	r6, [r0]
   1e508:	movw	r6, #33248	; 0x81e0
   1e50c:	movt	r6, #4
   1e510:	cmp	r4, r6
   1e514:	beq	1e524 <__assert_fail@plt+0xc690>
   1e518:	mov	r0, r4
   1e51c:	bl	17754 <__assert_fail@plt+0x58c0>
   1e520:	str	r6, [r8]
   1e524:	mov	r0, #1
   1e528:	str	r0, [r5]
   1e52c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e530:	movw	r3, #33464	; 0x82b8
   1e534:	mvn	r2, #0
   1e538:	movt	r3, #4
   1e53c:	b	1e540 <__assert_fail@plt+0xc6ac>
   1e540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e544:	add	fp, sp, #28
   1e548:	sub	sp, sp, #44	; 0x2c
   1e54c:	mov	r7, r3
   1e550:	str	r2, [sp, #36]	; 0x24
   1e554:	str	r1, [sp, #32]
   1e558:	mov	r5, r0
   1e55c:	bl	11ca8 <__errno_location@plt>
   1e560:	cmp	r5, #0
   1e564:	blt	1e6d0 <__assert_fail@plt+0xc83c>
   1e568:	cmn	r5, #-2147483647	; 0x80000001
   1e56c:	beq	1e6d0 <__assert_fail@plt+0xc83c>
   1e570:	movw	r8, #33244	; 0x81dc
   1e574:	movw	r4, #33240	; 0x81d8
   1e578:	str	r0, [sp, #28]
   1e57c:	ldr	r0, [r0]
   1e580:	movt	r8, #4
   1e584:	movt	r4, #4
   1e588:	ldr	r1, [r8]
   1e58c:	ldr	r6, [r4]
   1e590:	str	r0, [sp, #24]
   1e594:	cmp	r1, r5
   1e598:	ble	1e5a4 <__assert_fail@plt+0xc710>
   1e59c:	mov	sl, r6
   1e5a0:	b	1e60c <__assert_fail@plt+0xc778>
   1e5a4:	movw	r9, #33248	; 0x81e0
   1e5a8:	mov	r0, #8
   1e5ac:	add	r2, r5, #1
   1e5b0:	str	r1, [fp, #-32]	; 0xffffffe0
   1e5b4:	mvn	r3, #-2147483648	; 0x80000000
   1e5b8:	movt	r9, #4
   1e5bc:	str	r0, [sp]
   1e5c0:	sub	r2, r2, r1
   1e5c4:	sub	r1, fp, #32
   1e5c8:	subs	r0, r6, r9
   1e5cc:	movne	r0, r6
   1e5d0:	bl	311d8 <__assert_fail@plt+0x1f344>
   1e5d4:	cmp	r6, r9
   1e5d8:	mov	sl, r0
   1e5dc:	str	r0, [r4]
   1e5e0:	ldrdeq	r0, [r9]
   1e5e4:	stmeq	sl, {r0, r1}
   1e5e8:	ldr	r1, [r8]
   1e5ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e5f0:	add	r0, sl, r1, lsl #3
   1e5f4:	sub	r1, r2, r1
   1e5f8:	lsl	r2, r1, #3
   1e5fc:	mov	r1, #0
   1e600:	bl	11cd8 <memset@plt>
   1e604:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e608:	str	r0, [r8]
   1e60c:	mov	r9, sl
   1e610:	ldr	r6, [r9, r5, lsl #3]!
   1e614:	ldr	r4, [r9, #4]!
   1e618:	ldm	r7, {r0, r1}
   1e61c:	ldr	r2, [r7, #40]	; 0x28
   1e620:	ldr	r3, [r7, #44]	; 0x2c
   1e624:	orr	r8, r1, #1
   1e628:	add	r1, r7, #8
   1e62c:	stm	sp, {r0, r8}
   1e630:	add	r0, sp, #8
   1e634:	str	r1, [sp, #20]
   1e638:	stm	r0, {r1, r2, r3}
   1e63c:	mov	r0, r4
   1e640:	mov	r1, r6
   1e644:	ldr	r2, [sp, #32]
   1e648:	ldr	r3, [sp, #36]	; 0x24
   1e64c:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1e650:	cmp	r6, r0
   1e654:	bhi	1e6b8 <__assert_fail@plt+0xc824>
   1e658:	add	r6, r0, #1
   1e65c:	movw	r0, #33512	; 0x82e8
   1e660:	movt	r0, #4
   1e664:	str	r6, [sl, r5, lsl #3]
   1e668:	cmp	r4, r0
   1e66c:	beq	1e678 <__assert_fail@plt+0xc7e4>
   1e670:	mov	r0, r4
   1e674:	bl	17754 <__assert_fail@plt+0x58c0>
   1e678:	mov	r0, r6
   1e67c:	bl	30fd8 <__assert_fail@plt+0x1f144>
   1e680:	str	r0, [r9]
   1e684:	mov	r4, r0
   1e688:	add	r3, sp, #8
   1e68c:	ldr	r0, [r7]
   1e690:	ldr	r1, [r7, #40]	; 0x28
   1e694:	ldr	r2, [r7, #44]	; 0x2c
   1e698:	stm	sp, {r0, r8}
   1e69c:	ldr	r0, [sp, #20]
   1e6a0:	stm	r3, {r0, r1, r2}
   1e6a4:	mov	r0, r4
   1e6a8:	mov	r1, r6
   1e6ac:	ldr	r2, [sp, #32]
   1e6b0:	ldr	r3, [sp, #36]	; 0x24
   1e6b4:	bl	1d2e8 <__assert_fail@plt+0xb454>
   1e6b8:	ldr	r0, [sp, #28]
   1e6bc:	ldr	r1, [sp, #24]
   1e6c0:	str	r1, [r0]
   1e6c4:	mov	r0, r4
   1e6c8:	sub	sp, fp, #28
   1e6cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6d0:	bl	11e58 <abort@plt>
   1e6d4:	movw	r3, #33464	; 0x82b8
   1e6d8:	movt	r3, #4
   1e6dc:	b	1e540 <__assert_fail@plt+0xc6ac>
   1e6e0:	movw	r3, #33464	; 0x82b8
   1e6e4:	mov	r1, r0
   1e6e8:	mov	r0, #0
   1e6ec:	mvn	r2, #0
   1e6f0:	movt	r3, #4
   1e6f4:	b	1e540 <__assert_fail@plt+0xc6ac>
   1e6f8:	movw	r3, #33464	; 0x82b8
   1e6fc:	mov	r2, r1
   1e700:	mov	r1, r0
   1e704:	mov	r0, #0
   1e708:	movt	r3, #4
   1e70c:	b	1e540 <__assert_fail@plt+0xc6ac>
   1e710:	push	{fp, lr}
   1e714:	mov	fp, sp
   1e718:	sub	sp, sp, #48	; 0x30
   1e71c:	vmov.i32	q8, #0	; 0x00000000
   1e720:	mov	ip, #32
   1e724:	mov	r3, sp
   1e728:	mov	lr, r2
   1e72c:	cmp	r1, #10
   1e730:	add	r2, r3, #16
   1e734:	vst1.64	{d16-d17}, [r3], ip
   1e738:	vst1.64	{d16-d17}, [r3]
   1e73c:	vst1.64	{d16-d17}, [r2]
   1e740:	beq	1e760 <__assert_fail@plt+0xc8cc>
   1e744:	str	r1, [sp]
   1e748:	mov	r3, sp
   1e74c:	mov	r1, lr
   1e750:	mvn	r2, #0
   1e754:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1e758:	mov	sp, fp
   1e75c:	pop	{fp, pc}
   1e760:	bl	11e58 <abort@plt>
   1e764:	push	{r4, sl, fp, lr}
   1e768:	add	fp, sp, #8
   1e76c:	sub	sp, sp, #48	; 0x30
   1e770:	mov	ip, r3
   1e774:	mov	r3, sp
   1e778:	vmov.i32	q8, #0	; 0x00000000
   1e77c:	mov	lr, #32
   1e780:	cmp	r1, #10
   1e784:	add	r4, r3, #16
   1e788:	vst1.64	{d16-d17}, [r3], lr
   1e78c:	vst1.64	{d16-d17}, [r3]
   1e790:	vst1.64	{d16-d17}, [r4]
   1e794:	beq	1e7b4 <__assert_fail@plt+0xc920>
   1e798:	str	r1, [sp]
   1e79c:	mov	r1, r2
   1e7a0:	mov	r3, sp
   1e7a4:	mov	r2, ip
   1e7a8:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1e7ac:	sub	sp, fp, #8
   1e7b0:	pop	{r4, sl, fp, pc}
   1e7b4:	bl	11e58 <abort@plt>
   1e7b8:	push	{fp, lr}
   1e7bc:	mov	fp, sp
   1e7c0:	sub	sp, sp, #48	; 0x30
   1e7c4:	mov	r3, sp
   1e7c8:	vmov.i32	q8, #0	; 0x00000000
   1e7cc:	mov	ip, #32
   1e7d0:	cmp	r0, #10
   1e7d4:	add	r2, r3, #16
   1e7d8:	vst1.64	{d16-d17}, [r3], ip
   1e7dc:	vst1.64	{d16-d17}, [r3]
   1e7e0:	vst1.64	{d16-d17}, [r2]
   1e7e4:	beq	1e804 <__assert_fail@plt+0xc970>
   1e7e8:	str	r0, [sp]
   1e7ec:	mov	r3, sp
   1e7f0:	mov	r0, #0
   1e7f4:	mvn	r2, #0
   1e7f8:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1e7fc:	mov	sp, fp
   1e800:	pop	{fp, pc}
   1e804:	bl	11e58 <abort@plt>
   1e808:	push	{fp, lr}
   1e80c:	mov	fp, sp
   1e810:	sub	sp, sp, #48	; 0x30
   1e814:	mov	r3, sp
   1e818:	vmov.i32	q8, #0	; 0x00000000
   1e81c:	mov	ip, #32
   1e820:	cmp	r0, #10
   1e824:	add	lr, r3, #16
   1e828:	vst1.64	{d16-d17}, [r3], ip
   1e82c:	vst1.64	{d16-d17}, [r3]
   1e830:	vst1.64	{d16-d17}, [lr]
   1e834:	beq	1e850 <__assert_fail@plt+0xc9bc>
   1e838:	str	r0, [sp]
   1e83c:	mov	r3, sp
   1e840:	mov	r0, #0
   1e844:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1e848:	mov	sp, fp
   1e84c:	pop	{fp, pc}
   1e850:	bl	11e58 <abort@plt>
   1e854:	push	{r4, sl, fp, lr}
   1e858:	add	fp, sp, #8
   1e85c:	sub	sp, sp, #48	; 0x30
   1e860:	mov	lr, r0
   1e864:	movw	r0, #33464	; 0x82b8
   1e868:	mov	r3, #32
   1e86c:	mov	ip, r1
   1e870:	mov	r4, #1
   1e874:	movt	r0, #4
   1e878:	add	r1, r0, #16
   1e87c:	vld1.64	{d16-d17}, [r0], r3
   1e880:	mov	r3, sp
   1e884:	vld1.64	{d18-d19}, [r1]
   1e888:	add	r1, r3, #16
   1e88c:	vld1.64	{d20-d21}, [r0]
   1e890:	add	r0, r3, #32
   1e894:	vst1.64	{d18-d19}, [r1]
   1e898:	mov	r1, r3
   1e89c:	vst1.64	{d20-d21}, [r0]
   1e8a0:	mov	r0, #28
   1e8a4:	and	r0, r0, r2, lsr #3
   1e8a8:	and	r2, r2, #31
   1e8ac:	vst1.64	{d16-d17}, [r1], r0
   1e8b0:	ldr	r0, [r1, #8]
   1e8b4:	bic	r4, r4, r0, lsr r2
   1e8b8:	eor	r0, r0, r4, lsl r2
   1e8bc:	mov	r2, ip
   1e8c0:	str	r0, [r1, #8]
   1e8c4:	mov	r0, #0
   1e8c8:	mov	r1, lr
   1e8cc:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1e8d0:	sub	sp, fp, #8
   1e8d4:	pop	{r4, sl, fp, pc}
   1e8d8:	push	{fp, lr}
   1e8dc:	mov	fp, sp
   1e8e0:	sub	sp, sp, #48	; 0x30
   1e8e4:	mov	ip, r0
   1e8e8:	movw	r0, #33464	; 0x82b8
   1e8ec:	mov	r3, #32
   1e8f0:	movt	r0, #4
   1e8f4:	add	r2, r0, #16
   1e8f8:	vld1.64	{d16-d17}, [r0], r3
   1e8fc:	mov	r3, sp
   1e900:	vld1.64	{d18-d19}, [r2]
   1e904:	add	r2, r3, #16
   1e908:	vld1.64	{d20-d21}, [r0]
   1e90c:	add	r0, r3, #32
   1e910:	vst1.64	{d18-d19}, [r2]
   1e914:	mov	r2, r3
   1e918:	vst1.64	{d20-d21}, [r0]
   1e91c:	mov	r0, #28
   1e920:	and	r0, r0, r1, lsr #3
   1e924:	and	r1, r1, #31
   1e928:	vst1.64	{d16-d17}, [r2], r0
   1e92c:	mov	r0, #1
   1e930:	ldr	lr, [r2, #8]
   1e934:	bic	r0, r0, lr, lsr r1
   1e938:	eor	r0, lr, r0, lsl r1
   1e93c:	mov	r1, ip
   1e940:	str	r0, [r2, #8]
   1e944:	mov	r0, #0
   1e948:	mvn	r2, #0
   1e94c:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1e950:	mov	sp, fp
   1e954:	pop	{fp, pc}
   1e958:	push	{fp, lr}
   1e95c:	mov	fp, sp
   1e960:	sub	sp, sp, #48	; 0x30
   1e964:	movw	r2, #33464	; 0x82b8
   1e968:	mov	r3, #32
   1e96c:	mov	r1, r0
   1e970:	movt	r2, #4
   1e974:	add	r0, r2, #16
   1e978:	vld1.64	{d16-d17}, [r2], r3
   1e97c:	mov	r3, sp
   1e980:	vld1.64	{d18-d19}, [r0]
   1e984:	add	r0, r3, #16
   1e988:	vld1.64	{d20-d21}, [r2]
   1e98c:	mov	r2, r3
   1e990:	vst1.64	{d18-d19}, [r0]
   1e994:	add	r0, r3, #32
   1e998:	vst1.64	{d20-d21}, [r0]
   1e99c:	mov	r0, #12
   1e9a0:	vst1.64	{d16-d17}, [r2], r0
   1e9a4:	ldr	r0, [r2]
   1e9a8:	orr	r0, r0, #67108864	; 0x4000000
   1e9ac:	str	r0, [r2]
   1e9b0:	mov	r0, #0
   1e9b4:	mvn	r2, #0
   1e9b8:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1e9bc:	mov	sp, fp
   1e9c0:	pop	{fp, pc}
   1e9c4:	push	{fp, lr}
   1e9c8:	mov	fp, sp
   1e9cc:	sub	sp, sp, #48	; 0x30
   1e9d0:	mov	ip, r1
   1e9d4:	mov	r1, r0
   1e9d8:	movw	r0, #33464	; 0x82b8
   1e9dc:	mov	r3, #32
   1e9e0:	movt	r0, #4
   1e9e4:	add	r2, r0, #16
   1e9e8:	vld1.64	{d16-d17}, [r0], r3
   1e9ec:	mov	r3, sp
   1e9f0:	vld1.64	{d18-d19}, [r2]
   1e9f4:	add	r2, r3, #16
   1e9f8:	vld1.64	{d20-d21}, [r0]
   1e9fc:	add	r0, r3, #32
   1ea00:	vst1.64	{d18-d19}, [r2]
   1ea04:	mov	r2, r3
   1ea08:	vst1.64	{d20-d21}, [r0]
   1ea0c:	mov	r0, #12
   1ea10:	vst1.64	{d16-d17}, [r2], r0
   1ea14:	ldr	r0, [r2]
   1ea18:	orr	r0, r0, #67108864	; 0x4000000
   1ea1c:	str	r0, [r2]
   1ea20:	mov	r0, #0
   1ea24:	mov	r2, ip
   1ea28:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1ea2c:	mov	sp, fp
   1ea30:	pop	{fp, pc}
   1ea34:	push	{r4, sl, fp, lr}
   1ea38:	add	fp, sp, #8
   1ea3c:	sub	sp, sp, #96	; 0x60
   1ea40:	mov	ip, r2
   1ea44:	mov	r2, sp
   1ea48:	vmov.i32	q8, #0	; 0x00000000
   1ea4c:	mov	r4, #28
   1ea50:	cmp	r1, #10
   1ea54:	mov	r3, r2
   1ea58:	add	lr, r2, #16
   1ea5c:	vst1.64	{d16-d17}, [r3], r4
   1ea60:	vst1.64	{d16-d17}, [lr]
   1ea64:	vst1.32	{d16-d17}, [r3]
   1ea68:	beq	1eab8 <__assert_fail@plt+0xcc24>
   1ea6c:	vld1.64	{d16-d17}, [r2], r4
   1ea70:	vld1.64	{d18-d19}, [lr]
   1ea74:	add	r3, sp, #48	; 0x30
   1ea78:	add	r4, r3, #4
   1ea7c:	vld1.32	{d20-d21}, [r2]
   1ea80:	add	r2, r3, #20
   1ea84:	vst1.32	{d16-d17}, [r4]
   1ea88:	vst1.32	{d18-d19}, [r2]
   1ea8c:	add	r2, r3, #32
   1ea90:	vst1.32	{d20-d21}, [r2]
   1ea94:	str	r1, [sp, #48]	; 0x30
   1ea98:	mvn	r2, #0
   1ea9c:	ldr	r1, [sp, #60]	; 0x3c
   1eaa0:	orr	r1, r1, #67108864	; 0x4000000
   1eaa4:	str	r1, [sp, #60]	; 0x3c
   1eaa8:	mov	r1, ip
   1eaac:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1eab0:	sub	sp, fp, #8
   1eab4:	pop	{r4, sl, fp, pc}
   1eab8:	bl	11e58 <abort@plt>
   1eabc:	push	{r4, r5, fp, lr}
   1eac0:	add	fp, sp, #8
   1eac4:	sub	sp, sp, #48	; 0x30
   1eac8:	mov	ip, r3
   1eacc:	movw	r3, #33464	; 0x82b8
   1ead0:	mov	lr, #32
   1ead4:	cmp	r1, #0
   1ead8:	mov	r5, sp
   1eadc:	movt	r3, #4
   1eae0:	cmpne	r2, #0
   1eae4:	add	r4, r3, #16
   1eae8:	vld1.64	{d16-d17}, [r3], lr
   1eaec:	vld1.64	{d18-d19}, [r4]
   1eaf0:	add	r4, r5, #16
   1eaf4:	vld1.64	{d20-d21}, [r3]
   1eaf8:	vst1.64	{d16-d17}, [r5], lr
   1eafc:	mov	r3, #10
   1eb00:	vst1.64	{d18-d19}, [r4]
   1eb04:	vst1.64	{d20-d21}, [r5]
   1eb08:	str	r3, [sp]
   1eb0c:	bne	1eb14 <__assert_fail@plt+0xcc80>
   1eb10:	bl	11e58 <abort@plt>
   1eb14:	str	r2, [sp, #44]	; 0x2c
   1eb18:	str	r1, [sp, #40]	; 0x28
   1eb1c:	mov	r3, sp
   1eb20:	mov	r1, ip
   1eb24:	mvn	r2, #0
   1eb28:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1eb2c:	sub	sp, fp, #8
   1eb30:	pop	{r4, r5, fp, pc}
   1eb34:	push	{r4, r5, fp, lr}
   1eb38:	add	fp, sp, #8
   1eb3c:	sub	sp, sp, #48	; 0x30
   1eb40:	mov	lr, r3
   1eb44:	movw	r3, #33464	; 0x82b8
   1eb48:	mov	ip, #32
   1eb4c:	cmp	r1, #0
   1eb50:	mov	r5, sp
   1eb54:	movt	r3, #4
   1eb58:	cmpne	r2, #0
   1eb5c:	add	r4, r3, #16
   1eb60:	vld1.64	{d16-d17}, [r3], ip
   1eb64:	vld1.64	{d18-d19}, [r4]
   1eb68:	add	r4, r5, #16
   1eb6c:	vld1.64	{d20-d21}, [r3]
   1eb70:	vst1.64	{d16-d17}, [r5], ip
   1eb74:	mov	r3, #10
   1eb78:	vst1.64	{d18-d19}, [r4]
   1eb7c:	vst1.64	{d20-d21}, [r5]
   1eb80:	str	r3, [sp]
   1eb84:	bne	1eb8c <__assert_fail@plt+0xccf8>
   1eb88:	bl	11e58 <abort@plt>
   1eb8c:	ldr	ip, [fp, #8]
   1eb90:	str	r2, [sp, #44]	; 0x2c
   1eb94:	str	r1, [sp, #40]	; 0x28
   1eb98:	mov	r3, sp
   1eb9c:	mov	r1, lr
   1eba0:	mov	r2, ip
   1eba4:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1eba8:	sub	sp, fp, #8
   1ebac:	pop	{r4, r5, fp, pc}
   1ebb0:	push	{r4, sl, fp, lr}
   1ebb4:	add	fp, sp, #8
   1ebb8:	sub	sp, sp, #48	; 0x30
   1ebbc:	mov	ip, r2
   1ebc0:	movw	r2, #33464	; 0x82b8
   1ebc4:	mov	lr, #32
   1ebc8:	cmp	r0, #0
   1ebcc:	mov	r4, sp
   1ebd0:	movt	r2, #4
   1ebd4:	cmpne	r1, #0
   1ebd8:	add	r3, r2, #16
   1ebdc:	vld1.64	{d16-d17}, [r2], lr
   1ebe0:	vld1.64	{d18-d19}, [r3]
   1ebe4:	add	r3, r4, #16
   1ebe8:	vld1.64	{d20-d21}, [r2]
   1ebec:	vst1.64	{d16-d17}, [r4], lr
   1ebf0:	mov	r2, #10
   1ebf4:	vst1.64	{d18-d19}, [r3]
   1ebf8:	vst1.64	{d20-d21}, [r4]
   1ebfc:	str	r2, [sp]
   1ec00:	bne	1ec08 <__assert_fail@plt+0xcd74>
   1ec04:	bl	11e58 <abort@plt>
   1ec08:	str	r1, [sp, #44]	; 0x2c
   1ec0c:	str	r0, [sp, #40]	; 0x28
   1ec10:	mov	r3, sp
   1ec14:	mov	r0, #0
   1ec18:	mov	r1, ip
   1ec1c:	mvn	r2, #0
   1ec20:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1ec24:	sub	sp, fp, #8
   1ec28:	pop	{r4, sl, fp, pc}
   1ec2c:	push	{r4, r5, fp, lr}
   1ec30:	add	fp, sp, #8
   1ec34:	sub	sp, sp, #48	; 0x30
   1ec38:	mov	lr, r2
   1ec3c:	movw	r2, #33464	; 0x82b8
   1ec40:	mov	ip, r3
   1ec44:	mov	r3, #32
   1ec48:	cmp	r0, #0
   1ec4c:	mov	r5, sp
   1ec50:	movt	r2, #4
   1ec54:	cmpne	r1, #0
   1ec58:	add	r4, r2, #16
   1ec5c:	vld1.64	{d16-d17}, [r2], r3
   1ec60:	vld1.64	{d18-d19}, [r4]
   1ec64:	add	r4, r5, #16
   1ec68:	vld1.64	{d20-d21}, [r2]
   1ec6c:	vst1.64	{d16-d17}, [r5], r3
   1ec70:	mov	r2, #10
   1ec74:	vst1.64	{d18-d19}, [r4]
   1ec78:	vst1.64	{d20-d21}, [r5]
   1ec7c:	str	r2, [sp]
   1ec80:	bne	1ec88 <__assert_fail@plt+0xcdf4>
   1ec84:	bl	11e58 <abort@plt>
   1ec88:	str	r1, [sp, #44]	; 0x2c
   1ec8c:	str	r0, [sp, #40]	; 0x28
   1ec90:	mov	r3, sp
   1ec94:	mov	r0, #0
   1ec98:	mov	r1, lr
   1ec9c:	mov	r2, ip
   1eca0:	bl	1e540 <__assert_fail@plt+0xc6ac>
   1eca4:	sub	sp, fp, #8
   1eca8:	pop	{r4, r5, fp, pc}
   1ecac:	movw	r3, #33256	; 0x81e8
   1ecb0:	movt	r3, #4
   1ecb4:	b	1e540 <__assert_fail@plt+0xc6ac>
   1ecb8:	movw	r3, #33256	; 0x81e8
   1ecbc:	mov	r2, r1
   1ecc0:	mov	r1, r0
   1ecc4:	mov	r0, #0
   1ecc8:	movt	r3, #4
   1eccc:	b	1e540 <__assert_fail@plt+0xc6ac>
   1ecd0:	movw	r3, #33256	; 0x81e8
   1ecd4:	mvn	r2, #0
   1ecd8:	movt	r3, #4
   1ecdc:	b	1e540 <__assert_fail@plt+0xc6ac>
   1ece0:	movw	r3, #33256	; 0x81e8
   1ece4:	mov	r1, r0
   1ece8:	mov	r0, #0
   1ecec:	mvn	r2, #0
   1ecf0:	movt	r3, #4
   1ecf4:	b	1e540 <__assert_fail@plt+0xc6ac>
   1ecf8:	push	{r4, r5, fp, lr}
   1ecfc:	add	fp, sp, #8
   1ed00:	mov	r5, r0
   1ed04:	mov	r4, r1
   1ed08:	mov	r0, #0
   1ed0c:	mov	r2, #5
   1ed10:	mov	r1, r5
   1ed14:	bl	11ad4 <dcgettext@plt>
   1ed18:	cmp	r0, r5
   1ed1c:	popne	{r4, r5, fp, pc}
   1ed20:	bl	34bc4 <__assert_fail@plt+0x22d30>
   1ed24:	ldrb	r1, [r0]
   1ed28:	and	r1, r1, #223	; 0xdf
   1ed2c:	cmp	r1, #71	; 0x47
   1ed30:	beq	1ed98 <__assert_fail@plt+0xcf04>
   1ed34:	cmp	r1, #85	; 0x55
   1ed38:	bne	1edbc <__assert_fail@plt+0xcf28>
   1ed3c:	ldrb	r1, [r0, #1]
   1ed40:	and	r1, r1, #223	; 0xdf
   1ed44:	cmp	r1, #84	; 0x54
   1ed48:	bne	1edbc <__assert_fail@plt+0xcf28>
   1ed4c:	ldrb	r1, [r0, #2]
   1ed50:	and	r1, r1, #223	; 0xdf
   1ed54:	cmp	r1, #70	; 0x46
   1ed58:	ldrbeq	r1, [r0, #3]
   1ed5c:	cmpeq	r1, #45	; 0x2d
   1ed60:	bne	1edbc <__assert_fail@plt+0xcf28>
   1ed64:	ldrb	r1, [r0, #4]
   1ed68:	cmp	r1, #56	; 0x38
   1ed6c:	ldrbeq	r0, [r0, #5]
   1ed70:	cmpeq	r0, #0
   1ed74:	bne	1edbc <__assert_fail@plt+0xcf28>
   1ed78:	ldrb	r1, [r5]
   1ed7c:	movw	r2, #28729	; 0x7039
   1ed80:	movw	r0, #28733	; 0x703d
   1ed84:	movt	r2, #3
   1ed88:	movt	r0, #3
   1ed8c:	cmp	r1, #96	; 0x60
   1ed90:	moveq	r0, r2
   1ed94:	pop	{r4, r5, fp, pc}
   1ed98:	ldrb	r1, [r0, #1]
   1ed9c:	and	r1, r1, #223	; 0xdf
   1eda0:	cmp	r1, #66	; 0x42
   1eda4:	bne	1edbc <__assert_fail@plt+0xcf28>
   1eda8:	ldrb	r1, [r0, #2]
   1edac:	cmp	r1, #49	; 0x31
   1edb0:	ldrbeq	r1, [r0, #3]
   1edb4:	cmpeq	r1, #56	; 0x38
   1edb8:	beq	1edd8 <__assert_fail@plt+0xcf44>
   1edbc:	movw	r1, #25626	; 0x641a
   1edc0:	movw	r0, #25092	; 0x6204
   1edc4:	cmp	r4, #9
   1edc8:	movt	r1, #3
   1edcc:	movt	r0, #3
   1edd0:	moveq	r0, r1
   1edd4:	pop	{r4, r5, fp, pc}
   1edd8:	ldrb	r1, [r0, #4]
   1eddc:	cmp	r1, #48	; 0x30
   1ede0:	ldrbeq	r1, [r0, #5]
   1ede4:	cmpeq	r1, #51	; 0x33
   1ede8:	bne	1edbc <__assert_fail@plt+0xcf28>
   1edec:	ldrb	r1, [r0, #6]
   1edf0:	cmp	r1, #48	; 0x30
   1edf4:	ldrbeq	r0, [r0, #7]
   1edf8:	cmpeq	r0, #0
   1edfc:	bne	1edbc <__assert_fail@plt+0xcf28>
   1ee00:	ldrb	r1, [r5]
   1ee04:	movw	r2, #28737	; 0x7041
   1ee08:	movw	r0, #28741	; 0x7045
   1ee0c:	movt	r2, #3
   1ee10:	movt	r0, #3
   1ee14:	b	1ed8c <__assert_fail@plt+0xcef8>
	...
   1ee20:	push	{fp, lr}
   1ee24:	mov	fp, sp
   1ee28:	mov	lr, r0
   1ee2c:	movw	r0, #33772	; 0x83ec
   1ee30:	mov	ip, r1
   1ee34:	ldrb	r1, [r2, #28]
   1ee38:	movt	r0, #4
   1ee3c:	ldr	r3, [r0]
   1ee40:	mov	r0, #16
   1ee44:	and	r1, r1, #111	; 0x6f
   1ee48:	and	r0, r0, r3, lsr #21
   1ee4c:	orr	r0, r1, r0
   1ee50:	mov	r1, lr
   1ee54:	orr	r0, r0, #128	; 0x80
   1ee58:	strb	r0, [r2, #28]
   1ee5c:	mov	r0, r2
   1ee60:	mov	r2, ip
   1ee64:	bl	1eea0 <__assert_fail@plt+0xd00c>
   1ee68:	cmp	r0, #0
   1ee6c:	moveq	r0, #0
   1ee70:	popeq	{fp, pc}
   1ee74:	movw	r1, #29216	; 0x7220
   1ee78:	mov	r2, #5
   1ee7c:	movt	r1, #3
   1ee80:	ldr	r0, [r1, r0, lsl #2]
   1ee84:	movw	r1, #28832	; 0x70a0
   1ee88:	movt	r1, #3
   1ee8c:	add	r1, r1, r0
   1ee90:	mov	r0, #0
   1ee94:	pop	{fp, lr}
   1ee98:	b	11ad4 <dcgettext@plt>
   1ee9c:	nop	{0}
   1eea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eea4:	add	fp, sp, #28
   1eea8:	sub	sp, sp, #140	; 0x8c
   1eeac:	mov	r9, r0
   1eeb0:	mov	r0, #0
   1eeb4:	str	r1, [sp, #20]
   1eeb8:	str	r3, [sp, #24]
   1eebc:	mov	sl, r2
   1eec0:	str	r0, [fp, #-52]	; 0xffffffcc
   1eec4:	str	r0, [r9, #8]
   1eec8:	str	r3, [r9, #12]
   1eecc:	str	r0, [r9, #24]
   1eed0:	ldrb	r0, [r9, #28]
   1eed4:	and	r0, r0, #144	; 0x90
   1eed8:	strb	r0, [r9, #28]
   1eedc:	ldm	r9, {r0, r1}
   1eee0:	cmp	r1, #159	; 0x9f
   1eee4:	bls	1f630 <__assert_fail@plt+0xd79c>
   1eee8:	mov	r1, #160	; 0xa0
   1eeec:	mov	r2, #160	; 0xa0
   1eef0:	str	r0, [sp, #28]
   1eef4:	str	r1, [r9, #8]
   1eef8:	mov	r1, #0
   1eefc:	bl	11cd8 <memset@plt>
   1ef00:	ldr	r3, [sp, #28]
   1ef04:	mov	r0, #31
   1ef08:	str	r0, [r3, #64]	; 0x40
   1ef0c:	movw	r0, #43689	; 0xaaa9
   1ef10:	movt	r0, #2730	; 0xaaa
   1ef14:	cmp	sl, r0
   1ef18:	bhi	1f0a4 <__assert_fail@plt+0xd210>
   1ef1c:	add	r5, sl, #1
   1ef20:	mov	r4, r3
   1ef24:	lsl	r0, r5, #3
   1ef28:	str	r5, [r3, #4]
   1ef2c:	bl	33c98 <__assert_fail@plt+0x21e04>
   1ef30:	str	r0, [r4]
   1ef34:	mov	r0, #1
   1ef38:	mov	r4, r0
   1ef3c:	lsl	r0, r0, #1
   1ef40:	cmp	r4, sl
   1ef44:	bls	1ef38 <__assert_fail@plt+0xd0a4>
   1ef48:	mov	r0, #12
   1ef4c:	mov	r1, r4
   1ef50:	str	r5, [sp, #12]
   1ef54:	bl	33c44 <__assert_fail@plt+0x21db0>
   1ef58:	ldr	r5, [sp, #28]
   1ef5c:	str	r0, [r5, #32]
   1ef60:	sub	r0, r4, #1
   1ef64:	str	r0, [r5, #68]	; 0x44
   1ef68:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1ef6c:	str	r0, [r5, #92]	; 0x5c
   1ef70:	mov	r0, #14
   1ef74:	bl	11d74 <nl_langinfo@plt>
   1ef78:	ldrb	r1, [r0]
   1ef7c:	orr	r1, r1, #32
   1ef80:	cmp	r1, #117	; 0x75
   1ef84:	bne	1efd8 <__assert_fail@plt+0xd144>
   1ef88:	ldrb	r1, [r0, #1]
   1ef8c:	orr	r1, r1, #32
   1ef90:	cmp	r1, #116	; 0x74
   1ef94:	bne	1efd8 <__assert_fail@plt+0xd144>
   1ef98:	ldrb	r1, [r0, #2]
   1ef9c:	orr	r1, r1, #32
   1efa0:	cmp	r1, #102	; 0x66
   1efa4:	bne	1efd8 <__assert_fail@plt+0xd144>
   1efa8:	ldrb	r1, [r0, #3]!
   1efac:	cmp	r1, #45	; 0x2d
   1efb0:	movw	r1, #29332	; 0x7294
   1efb4:	addeq	r0, r0, #1
   1efb8:	movt	r1, #3
   1efbc:	bl	11a14 <strcmp@plt>
   1efc0:	cmp	r0, #0
   1efc4:	bne	1efd8 <__assert_fail@plt+0xd144>
   1efc8:	ldr	r1, [sp, #28]
   1efcc:	ldrb	r0, [r1, #88]	; 0x58
   1efd0:	orr	r0, r0, #4
   1efd4:	strb	r0, [r1, #88]	; 0x58
   1efd8:	ldr	r3, [sp, #28]
   1efdc:	ldrb	r0, [r3, #88]	; 0x58
   1efe0:	and	r1, r0, #247	; 0xf7
   1efe4:	strb	r1, [r3, #88]	; 0x58
   1efe8:	ldr	r1, [r3, #92]	; 0x5c
   1efec:	cmp	r1, #2
   1eff0:	blt	1f090 <__assert_fail@plt+0xd1fc>
   1eff4:	tst	r0, #4
   1eff8:	bne	1f084 <__assert_fail@plt+0xd1f0>
   1effc:	mov	r0, #32
   1f000:	mov	r1, #1
   1f004:	mov	r5, #1
   1f008:	bl	33c44 <__assert_fail@plt+0x21db0>
   1f00c:	ldr	r3, [sp, #28]
   1f010:	cmp	r0, #0
   1f014:	str	r0, [r3, #60]	; 0x3c
   1f018:	beq	1f0a4 <__assert_fail@plt+0xd210>
   1f01c:	mov	r6, #0
   1f020:	mov	r7, #0
   1f024:	mov	r8, #0
   1f028:	add	r4, r6, r8
   1f02c:	mov	r0, r4
   1f030:	bl	11ce4 <btowc@plt>
   1f034:	ldr	r3, [sp, #28]
   1f038:	cmn	r0, #1
   1f03c:	ldrne	r1, [r3, #60]	; 0x3c
   1f040:	ldrne	r2, [r1, r7, lsl #2]
   1f044:	orrne	r2, r2, r5, lsl r8
   1f048:	strne	r2, [r1, r7, lsl #2]
   1f04c:	cmp	r4, #127	; 0x7f
   1f050:	bhi	1f064 <__assert_fail@plt+0xd1d0>
   1f054:	cmp	r4, r0
   1f058:	ldrbne	r0, [r3, #88]	; 0x58
   1f05c:	orrne	r0, r0, #8
   1f060:	strbne	r0, [r3, #88]	; 0x58
   1f064:	add	r8, r8, #1
   1f068:	cmp	r8, #32
   1f06c:	bne	1f028 <__assert_fail@plt+0xd194>
   1f070:	add	r7, r7, #1
   1f074:	add	r6, r6, #32
   1f078:	cmp	r7, #8
   1f07c:	bne	1f024 <__assert_fail@plt+0xd190>
   1f080:	b	1f090 <__assert_fail@plt+0xd1fc>
   1f084:	movw	r0, #29284	; 0x7264
   1f088:	movt	r0, #3
   1f08c:	str	r0, [r3, #60]	; 0x3c
   1f090:	ldr	r0, [r3]
   1f094:	cmp	r0, #0
   1f098:	ldrne	r0, [r3, #32]
   1f09c:	cmpne	r0, #0
   1f0a0:	bne	1f0c4 <__assert_fail@plt+0xd230>
   1f0a4:	mov	r4, #12
   1f0a8:	mov	r0, r3
   1f0ac:	str	r4, [fp, #-52]	; 0xffffffcc
   1f0b0:	bl	209f0 <__assert_fail@plt+0xeb5c>
   1f0b4:	mov	r0, #0
   1f0b8:	str	r0, [r9]
   1f0bc:	str	r0, [r9, #4]
   1f0c0:	b	20260 <__assert_fail@plt+0xe3cc>
   1f0c4:	movw	r0, #0
   1f0c8:	movw	r1, #0
   1f0cc:	mov	r4, #0
   1f0d0:	movt	r0, #0
   1f0d4:	movt	r1, #0
   1f0d8:	str	r4, [fp, #-52]	; 0xffffffcc
   1f0dc:	orrs	r0, r1, r0
   1f0e0:	str	r0, [sp, #8]
   1f0e4:	beq	1f100 <__assert_fail@plt+0xd26c>
   1f0e8:	add	r0, r3, #136	; 0x88
   1f0ec:	mov	r1, #0
   1f0f0:	bl	11a98 <pthread_mutex_init@plt>
   1f0f4:	ldr	r3, [sp, #28]
   1f0f8:	cmp	r0, #0
   1f0fc:	bne	1f0a4 <__assert_fail@plt+0xd210>
   1f100:	add	r1, sp, #32
   1f104:	vmov.i32	q8, #0	; 0x00000000
   1f108:	ldr	r5, [r9, #20]
   1f10c:	ldr	r7, [sp, #20]
   1f110:	ldr	r2, [sp, #24]
   1f114:	add	r0, r1, #64	; 0x40
   1f118:	vst1.32	{d16-d17}, [r0]
   1f11c:	add	r0, r1, #52	; 0x34
   1f120:	vst1.32	{d16-d17}, [r0]
   1f124:	add	r0, r1, #36	; 0x24
   1f128:	vst1.32	{d16-d17}, [r0]
   1f12c:	add	r0, r1, #20
   1f130:	vst1.32	{d16-d17}, [r0]
   1f134:	add	r0, r1, #4
   1f138:	add	r1, r1, #44	; 0x2c
   1f13c:	vst1.32	{d16-d17}, [r0]
   1f140:	str	r7, [sp, #32]
   1f144:	ubfx	r0, r2, #22, #1
   1f148:	vdup.32	q8, sl
   1f14c:	strb	r0, [sp, #104]	; 0x68
   1f150:	and	r0, r2, #4194304	; 0x400000
   1f154:	str	r5, [sp, #96]	; 0x60
   1f158:	orrs	r6, r0, r5
   1f15c:	str	r0, [sp, #16]
   1f160:	movwne	r6, #1
   1f164:	cmp	sl, #1
   1f168:	strb	r6, [sp, #107]	; 0x6b
   1f16c:	ldr	r0, [r3, #92]	; 0x5c
   1f170:	str	r0, [sp, #112]	; 0x70
   1f174:	ldrb	r2, [r3, #88]	; 0x58
   1f178:	vst1.32	{d16-d17}, [r1]
   1f17c:	ubfx	r1, r2, #3, #1
   1f180:	strb	r1, [sp, #106]	; 0x6a
   1f184:	ubfx	r1, r2, #2, #1
   1f188:	strb	r1, [sp, #105]	; 0x69
   1f18c:	blt	1f210 <__assert_fail@plt+0xd37c>
   1f190:	cmp	r0, #2
   1f194:	blt	1f1c8 <__assert_fail@plt+0xd334>
   1f198:	ldr	r0, [sp, #12]
   1f19c:	mov	r8, #12
   1f1a0:	cmn	r0, #-1073741823	; 0xc0000001
   1f1a4:	bhi	1f628 <__assert_fail@plt+0xd794>
   1f1a8:	lsl	r1, r0, #2
   1f1ac:	mov	r0, #0
   1f1b0:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1f1b4:	ldr	r3, [sp, #28]
   1f1b8:	cmp	r0, #0
   1f1bc:	beq	1f628 <__assert_fail@plt+0xd794>
   1f1c0:	ldr	r7, [sp, #20]
   1f1c4:	str	r0, [sp, #40]	; 0x28
   1f1c8:	ldr	r8, [sp, #12]
   1f1cc:	cmp	r6, #0
   1f1d0:	mov	r4, #0
   1f1d4:	mov	r6, #0
   1f1d8:	beq	1f204 <__assert_fail@plt+0xd370>
   1f1dc:	mov	r0, #0
   1f1e0:	mov	r1, r8
   1f1e4:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1f1e8:	cmp	r0, #0
   1f1ec:	beq	1f624 <__assert_fail@plt+0xd790>
   1f1f0:	ldr	r3, [sp, #28]
   1f1f4:	ldr	r7, [sp, #20]
   1f1f8:	mov	r4, r0
   1f1fc:	mov	r6, #1
   1f200:	str	r0, [sp, #36]	; 0x24
   1f204:	str	r8, [sp, #68]	; 0x44
   1f208:	ldr	r0, [r3, #92]	; 0x5c
   1f20c:	b	1f214 <__assert_fail@plt+0xd380>
   1f210:	mov	r8, #0
   1f214:	ldr	r1, [sp, #16]
   1f218:	cmp	r6, #0
   1f21c:	moveq	r4, r7
   1f220:	str	r4, [sp, #36]	; 0x24
   1f224:	cmp	r1, #0
   1f228:	beq	1f30c <__assert_fail@plt+0xd478>
   1f22c:	cmp	r0, #2
   1f230:	blt	1f320 <__assert_fail@plt+0xd48c>
   1f234:	add	r0, sp, #32
   1f238:	bl	23fb0 <__assert_fail@plt+0x1211c>
   1f23c:	cmp	r0, #0
   1f240:	bne	1f304 <__assert_fail@plt+0xd470>
   1f244:	ldr	r1, [sp, #28]
   1f248:	add	r5, sp, #32
   1f24c:	ldr	r0, [sp, #64]	; 0x40
   1f250:	cmp	r0, sl
   1f254:	bge	1f410 <__assert_fail@plt+0xd57c>
   1f258:	ldr	r0, [r1, #92]	; 0x5c
   1f25c:	ldr	r2, [sp, #60]	; 0x3c
   1f260:	ldr	r1, [sp, #68]	; 0x44
   1f264:	add	r0, r0, r2
   1f268:	cmp	r1, r0
   1f26c:	bgt	1f410 <__assert_fail@plt+0xd57c>
   1f270:	ldr	r0, [sp, #112]	; 0x70
   1f274:	lsl	r6, r1, #1
   1f278:	cmp	r0, #2
   1f27c:	blt	1f2c8 <__assert_fail@plt+0xd434>
   1f280:	mov	r8, #12
   1f284:	cmn	r6, #-1073741823	; 0xc0000001
   1f288:	bhi	1f628 <__assert_fail@plt+0xd794>
   1f28c:	ldr	r0, [sp, #40]	; 0x28
   1f290:	lsl	r4, r1, #3
   1f294:	mov	r1, r4
   1f298:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1f29c:	cmp	r0, #0
   1f2a0:	beq	1f628 <__assert_fail@plt+0xd794>
   1f2a4:	str	r0, [sp, #40]	; 0x28
   1f2a8:	ldr	r0, [sp, #44]	; 0x2c
   1f2ac:	cmp	r0, #0
   1f2b0:	beq	1f2c8 <__assert_fail@plt+0xd434>
   1f2b4:	mov	r1, r4
   1f2b8:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1f2bc:	cmp	r0, #0
   1f2c0:	beq	1f628 <__assert_fail@plt+0xd794>
   1f2c4:	str	r0, [sp, #44]	; 0x2c
   1f2c8:	ldrb	r0, [sp, #107]	; 0x6b
   1f2cc:	cmp	r0, #0
   1f2d0:	beq	1f2ec <__assert_fail@plt+0xd458>
   1f2d4:	ldr	r0, [sp, #36]	; 0x24
   1f2d8:	mov	r1, r6
   1f2dc:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1f2e0:	cmp	r0, #0
   1f2e4:	beq	1f624 <__assert_fail@plt+0xd790>
   1f2e8:	str	r0, [sp, #36]	; 0x24
   1f2ec:	mov	r0, r5
   1f2f0:	str	r6, [sp, #68]	; 0x44
   1f2f4:	bl	23fb0 <__assert_fail@plt+0x1211c>
   1f2f8:	ldr	r1, [sp, #28]
   1f2fc:	cmp	r0, #0
   1f300:	beq	1f24c <__assert_fail@plt+0xd3b8>
   1f304:	mov	r8, r0
   1f308:	b	1f628 <__assert_fail@plt+0xd794>
   1f30c:	cmp	r0, #2
   1f310:	blt	1f38c <__assert_fail@plt+0xd4f8>
   1f314:	add	r0, sp, #32
   1f318:	bl	24670 <__assert_fail@plt+0x127dc>
   1f31c:	b	1f410 <__assert_fail@plt+0xd57c>
   1f320:	cmp	r8, sl
   1f324:	movgt	r8, sl
   1f328:	cmp	r8, #1
   1f32c:	blt	1f3f4 <__assert_fail@plt+0xd560>
   1f330:	mov	r0, #0
   1f334:	mov	r4, #0
   1f338:	b	1f348 <__assert_fail@plt+0xd4b4>
   1f33c:	ldr	r7, [sp, #32]
   1f340:	ldr	r0, [sp, #56]	; 0x38
   1f344:	ldr	r5, [sp, #96]	; 0x60
   1f348:	add	r0, r7, r0
   1f34c:	cmp	r5, #0
   1f350:	ldrb	r6, [r0, r4]
   1f354:	ldrbne	r6, [r5, r6]
   1f358:	add	r0, r6, #128	; 0x80
   1f35c:	lsr	r0, r0, #7
   1f360:	cmp	r0, #2
   1f364:	bhi	1f374 <__assert_fail@plt+0xd4e0>
   1f368:	bl	11c24 <__ctype_toupper_loc@plt>
   1f36c:	ldr	r0, [r0]
   1f370:	ldr	r6, [r0, r6, lsl #2]
   1f374:	ldr	r0, [sp, #36]	; 0x24
   1f378:	strb	r6, [r0, r4]
   1f37c:	add	r4, r4, #1
   1f380:	cmp	r4, r8
   1f384:	blt	1f33c <__assert_fail@plt+0xd4a8>
   1f388:	b	1f3f8 <__assert_fail@plt+0xd564>
   1f38c:	cmp	r5, #0
   1f390:	beq	1f3f8 <__assert_fail@plt+0xd564>
   1f394:	cmp	r8, sl
   1f398:	movgt	r8, sl
   1f39c:	cmp	r8, #1
   1f3a0:	blt	1f404 <__assert_fail@plt+0xd570>
   1f3a4:	ldrb	r0, [r7]
   1f3a8:	cmp	r8, #1
   1f3ac:	ldrb	r0, [r5, r0]
   1f3b0:	strb	r0, [r4]
   1f3b4:	mov	r0, #1
   1f3b8:	beq	1f408 <__assert_fail@plt+0xd574>
   1f3bc:	mov	r0, #1
   1f3c0:	ldr	r1, [sp, #32]
   1f3c4:	ldr	r3, [sp, #56]	; 0x38
   1f3c8:	ldr	r7, [sp, #96]	; 0x60
   1f3cc:	ldr	r2, [sp, #36]	; 0x24
   1f3d0:	add	r1, r1, r3
   1f3d4:	ldrb	r1, [r1, r0]
   1f3d8:	ldrb	r1, [r7, r1]
   1f3dc:	strb	r1, [r2, r0]
   1f3e0:	add	r0, r0, #1
   1f3e4:	cmp	r0, r8
   1f3e8:	blt	1f3c0 <__assert_fail@plt+0xd52c>
   1f3ec:	mov	r0, r8
   1f3f0:	b	1f408 <__assert_fail@plt+0xd574>
   1f3f4:	mov	r8, #0
   1f3f8:	str	r8, [sp, #64]	; 0x40
   1f3fc:	str	r8, [sp, #60]	; 0x3c
   1f400:	b	1f410 <__assert_fail@plt+0xd57c>
   1f404:	mov	r0, #0
   1f408:	str	r0, [sp, #64]	; 0x40
   1f40c:	str	r0, [sp, #60]	; 0x3c
   1f410:	mov	r5, #0
   1f414:	ldr	r4, [sp, #24]
   1f418:	sub	r8, fp, #48	; 0x30
   1f41c:	add	r6, sp, #32
   1f420:	str	r5, [fp, #-52]	; 0xffffffcc
   1f424:	str	r5, [r9, #24]
   1f428:	mov	r0, r8
   1f42c:	mov	r1, r6
   1f430:	ldr	r7, [r9]
   1f434:	orr	r2, r4, #8388608	; 0x800000
   1f438:	str	r4, [r7, #128]	; 0x80
   1f43c:	bl	24abc <__assert_fail@plt+0x12c28>
   1f440:	ldr	r1, [sp, #72]	; 0x48
   1f444:	mov	r2, r8
   1f448:	mov	r3, r4
   1f44c:	str	r5, [sp]
   1f450:	add	r0, r1, r0
   1f454:	mov	r1, r9
   1f458:	str	r0, [sp, #72]	; 0x48
   1f45c:	sub	r0, fp, #52	; 0x34
   1f460:	str	r0, [sp, #4]
   1f464:	mov	r0, r6
   1f468:	bl	2484c <__assert_fail@plt+0x129b8>
   1f46c:	ldr	r5, [sp, #28]
   1f470:	mov	r4, r0
   1f474:	cmp	r0, #0
   1f478:	bne	1f488 <__assert_fail@plt+0xd5f4>
   1f47c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f480:	cmp	r0, #0
   1f484:	bne	1f6b4 <__assert_fail@plt+0xd820>
   1f488:	ldr	r1, [r7, #64]	; 0x40
   1f48c:	cmp	r1, #31
   1f490:	beq	1f64c <__assert_fail@plt+0xd7b8>
   1f494:	ldr	r0, [r7, #56]	; 0x38
   1f498:	add	r2, r1, #1
   1f49c:	add	r0, r0, r1, lsl #5
   1f4a0:	mov	r1, #0
   1f4a4:	vmov.i32	q8, #0	; 0x00000000
   1f4a8:	str	r2, [r7, #64]	; 0x40
   1f4ac:	add	r6, r0, #4
   1f4b0:	mov	r2, #2
   1f4b4:	str	r1, [r0, #20]
   1f4b8:	str	r1, [r0, #24]
   1f4bc:	str	r2, [r0, #28]
   1f4c0:	mov	r0, #28
   1f4c4:	mov	r1, r6
   1f4c8:	vst1.32	{d16-d17}, [r1], r0
   1f4cc:	mvn	r0, #0
   1f4d0:	str	r0, [r1]
   1f4d4:	cmp	r4, #0
   1f4d8:	mov	r0, r6
   1f4dc:	beq	1f530 <__assert_fail@plt+0xd69c>
   1f4e0:	ldr	r1, [r7, #64]	; 0x40
   1f4e4:	cmp	r1, #31
   1f4e8:	beq	1f680 <__assert_fail@plt+0xd7ec>
   1f4ec:	ldr	r0, [r7, #56]	; 0x38
   1f4f0:	add	r2, r1, #1
   1f4f4:	add	r0, r0, r1, lsl #5
   1f4f8:	mov	r1, #0
   1f4fc:	mvn	r3, #0
   1f500:	cmp	r6, #0
   1f504:	str	r2, [r7, #64]	; 0x40
   1f508:	str	r1, [r0, #4]!
   1f50c:	mov	r2, #16
   1f510:	add	ip, r0, #20
   1f514:	stmib	r0, {r4, r6}
   1f518:	str	r1, [r0, #12]
   1f51c:	str	r1, [r0, #16]
   1f520:	stm	ip, {r1, r2, r3}
   1f524:	str	r0, [r4]
   1f528:	beq	1f6ac <__assert_fail@plt+0xd818>
   1f52c:	str	r0, [r6]
   1f530:	cmp	r6, #0
   1f534:	cmpne	r0, #0
   1f538:	beq	1f6ac <__assert_fail@plt+0xd818>
   1f53c:	str	r0, [r5, #52]	; 0x34
   1f540:	ldr	sl, [r9]
   1f544:	ldr	r0, [sl, #4]
   1f548:	lsl	r0, r0, #2
   1f54c:	bl	33c98 <__assert_fail@plt+0x21e04>
   1f550:	str	r0, [sl, #12]
   1f554:	ldr	r0, [sl, #4]
   1f558:	lsl	r0, r0, #2
   1f55c:	bl	33c98 <__assert_fail@plt+0x21e04>
   1f560:	str	r0, [sl, #16]
   1f564:	ldr	r0, [sl, #4]
   1f568:	add	r0, r0, r0, lsl #1
   1f56c:	lsl	r0, r0, #2
   1f570:	bl	33c98 <__assert_fail@plt+0x21e04>
   1f574:	str	r0, [sl, #20]
   1f578:	ldr	r0, [sl, #4]
   1f57c:	add	r0, r0, r0, lsl #1
   1f580:	lsl	r0, r0, #2
   1f584:	bl	33c98 <__assert_fail@plt+0x21e04>
   1f588:	str	r0, [sl, #24]
   1f58c:	ldr	r1, [sl, #12]
   1f590:	cmp	r1, #0
   1f594:	ldrne	r1, [sl, #16]
   1f598:	cmpne	r1, #0
   1f59c:	beq	1f5b0 <__assert_fail@plt+0xd71c>
   1f5a0:	cmp	r0, #0
   1f5a4:	ldrne	r0, [sl, #20]
   1f5a8:	cmpne	r0, #0
   1f5ac:	bne	1f5bc <__assert_fail@plt+0xd728>
   1f5b0:	mov	r0, #12
   1f5b4:	str	r0, [fp, #-52]	; 0xffffffcc
   1f5b8:	b	1f6bc <__assert_fail@plt+0xd828>
   1f5bc:	ldr	r0, [r9, #24]
   1f5c0:	lsl	r0, r0, #2
   1f5c4:	bl	33c98 <__assert_fail@plt+0x21e04>
   1f5c8:	cmp	r0, #0
   1f5cc:	str	r0, [sl, #132]	; 0x84
   1f5d0:	beq	1f61c <__assert_fail@plt+0xd788>
   1f5d4:	ldr	r1, [r9, #24]
   1f5d8:	cmp	r1, #0
   1f5dc:	beq	1f774 <__assert_fail@plt+0xd8e0>
   1f5e0:	mov	r2, #0
   1f5e4:	cmp	r1, #4
   1f5e8:	bcc	1f764 <__assert_fail@plt+0xd8d0>
   1f5ec:	add	r3, pc, #876	; 0x36c
   1f5f0:	bic	r2, r1, #3
   1f5f4:	vmov.i32	q8, #4	; 0x00000004
   1f5f8:	mov	r7, r0
   1f5fc:	vld1.64	{d18-d19}, [r3 :128]
   1f600:	mov	r3, r2
   1f604:	vadd.i32	q10, q9, q8
   1f608:	vst1.32	{d18-d19}, [r7]!
   1f60c:	subs	r3, r3, #4
   1f610:	vorr	q9, q10, q10
   1f614:	bne	1f604 <__assert_fail@plt+0xd770>
   1f618:	b	1f76c <__assert_fail@plt+0xd8d8>
   1f61c:	add	r8, sl, #52	; 0x34
   1f620:	b	1f92c <__assert_fail@plt+0xda98>
   1f624:	mov	r8, #12
   1f628:	str	r8, [fp, #-52]	; 0xffffffcc
   1f62c:	b	1f6bc <__assert_fail@plt+0xd828>
   1f630:	mov	r1, #160	; 0xa0
   1f634:	mov	r4, #160	; 0xa0
   1f638:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1f63c:	cmp	r0, #0
   1f640:	beq	1f678 <__assert_fail@plt+0xd7e4>
   1f644:	stm	r9, {r0, r4}
   1f648:	b	1eee8 <__assert_fail@plt+0xd054>
   1f64c:	mov	r0, #996	; 0x3e4
   1f650:	bl	33c98 <__assert_fail@plt+0x21e04>
   1f654:	cmp	r0, #0
   1f658:	beq	1f758 <__assert_fail@plt+0xd8c4>
   1f65c:	ldr	r1, [r7, #56]	; 0x38
   1f660:	ldr	r5, [sp, #28]
   1f664:	str	r1, [r0]
   1f668:	mov	r1, #0
   1f66c:	str	r1, [r7, #64]	; 0x40
   1f670:	str	r0, [r7, #56]	; 0x38
   1f674:	b	1f498 <__assert_fail@plt+0xd604>
   1f678:	mov	r4, #12
   1f67c:	b	20260 <__assert_fail@plt+0xe3cc>
   1f680:	mov	r0, #996	; 0x3e4
   1f684:	bl	33c98 <__assert_fail@plt+0x21e04>
   1f688:	ldr	r5, [sp, #28]
   1f68c:	cmp	r0, #0
   1f690:	beq	1f6ac <__assert_fail@plt+0xd818>
   1f694:	ldr	r1, [r7, #56]	; 0x38
   1f698:	str	r1, [r0]
   1f69c:	mov	r1, #0
   1f6a0:	str	r1, [r7, #64]	; 0x40
   1f6a4:	str	r0, [r7, #56]	; 0x38
   1f6a8:	b	1f4f0 <__assert_fail@plt+0xd65c>
   1f6ac:	mov	r0, #12
   1f6b0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f6b4:	mov	r0, #0
   1f6b8:	str	r0, [r5, #52]	; 0x34
   1f6bc:	ldr	r4, [r9]
   1f6c0:	ldr	r0, [r4, #56]	; 0x38
   1f6c4:	cmp	r0, #0
   1f6c8:	beq	1f6e0 <__assert_fail@plt+0xd84c>
   1f6cc:	ldr	r5, [r0]
   1f6d0:	bl	17754 <__assert_fail@plt+0x58c0>
   1f6d4:	cmp	r5, #0
   1f6d8:	mov	r0, r5
   1f6dc:	bne	1f6cc <__assert_fail@plt+0xd838>
   1f6e0:	mov	r0, #31
   1f6e4:	mov	r5, #0
   1f6e8:	str	r0, [r4, #64]	; 0x40
   1f6ec:	str	r5, [r4, #52]	; 0x34
   1f6f0:	str	r5, [r4, #56]	; 0x38
   1f6f4:	ldr	r0, [r4, #16]
   1f6f8:	bl	17754 <__assert_fail@plt+0x58c0>
   1f6fc:	str	r5, [r4, #16]
   1f700:	ldr	r0, [sp, #40]	; 0x28
   1f704:	bl	17754 <__assert_fail@plt+0x58c0>
   1f708:	ldr	r0, [sp, #44]	; 0x2c
   1f70c:	bl	17754 <__assert_fail@plt+0x58c0>
   1f710:	ldrb	r0, [sp, #107]	; 0x6b
   1f714:	cmp	r0, #0
   1f718:	beq	1f724 <__assert_fail@plt+0xd890>
   1f71c:	ldr	r0, [sp, #36]	; 0x24
   1f720:	bl	17754 <__assert_fail@plt+0x58c0>
   1f724:	ldr	r0, [sp, #8]
   1f728:	cmp	r0, #0
   1f72c:	beq	1f73c <__assert_fail@plt+0xd8a8>
   1f730:	ldr	r0, [sp, #28]
   1f734:	add	r0, r0, #136	; 0x88
   1f738:	bl	11a20 <pthread_mutex_destroy@plt>
   1f73c:	ldr	r0, [sp, #28]
   1f740:	bl	209f0 <__assert_fail@plt+0xeb5c>
   1f744:	mov	r0, #0
   1f748:	str	r0, [r9]
   1f74c:	str	r0, [r9, #4]
   1f750:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1f754:	b	20260 <__assert_fail@plt+0xe3cc>
   1f758:	ldr	r5, [sp, #28]
   1f75c:	mov	r6, #0
   1f760:	b	1f4d4 <__assert_fail@plt+0xd640>
   1f764:	str	r2, [r0, r2, lsl #2]
   1f768:	add	r2, r2, #1
   1f76c:	cmp	r1, r2
   1f770:	bne	1f764 <__assert_fail@plt+0xd8d0>
   1f774:	mov	r8, sl
   1f778:	ldr	r2, [r8, #52]!	; 0x34
   1f77c:	ldrb	r1, [r2, #24]
   1f780:	cmp	r1, #17
   1f784:	beq	1f7b0 <__assert_fail@plt+0xd91c>
   1f788:	cmp	r1, #4
   1f78c:	bne	1f800 <__assert_fail@plt+0xd96c>
   1f790:	ldr	r1, [r2, #20]
   1f794:	mov	r3, #1
   1f798:	ldr	r0, [r0, r1, lsl #2]
   1f79c:	str	r0, [r2, #20]
   1f7a0:	ldr	r1, [sl, #80]	; 0x50
   1f7a4:	orr	r0, r1, r3, lsl r0
   1f7a8:	str	r0, [sl, #80]	; 0x50
   1f7ac:	b	1f800 <__assert_fail@plt+0xd96c>
   1f7b0:	ldr	r1, [r2, #4]
   1f7b4:	cmp	r1, #0
   1f7b8:	beq	1f800 <__assert_fail@plt+0xd96c>
   1f7bc:	ldrb	r3, [r1, #24]
   1f7c0:	cmp	r3, #17
   1f7c4:	bne	1f800 <__assert_fail@plt+0xd96c>
   1f7c8:	ldr	r3, [r1, #4]
   1f7cc:	ldr	r1, [r1, #20]
   1f7d0:	cmp	r3, #0
   1f7d4:	str	r3, [r2, #4]
   1f7d8:	strne	r2, [r3]
   1f7dc:	cmp	r1, #31
   1f7e0:	ldr	r3, [r2, #20]
   1f7e4:	ldr	r3, [r0, r3, lsl #2]
   1f7e8:	str	r3, [r0, r1, lsl #2]
   1f7ec:	bgt	1f800 <__assert_fail@plt+0xd96c>
   1f7f0:	ldr	r0, [sl, #80]	; 0x50
   1f7f4:	mov	r3, #1
   1f7f8:	bic	r0, r0, r3, lsl r1
   1f7fc:	b	1f7a8 <__assert_fail@plt+0xd914>
   1f800:	mov	r0, #1
   1f804:	b	1f810 <__assert_fail@plt+0xd97c>
   1f808:	str	r1, [sl, #80]	; 0x50
   1f80c:	mov	r2, r7
   1f810:	ldr	r7, [r2, #4]
   1f814:	cmp	r7, #0
   1f818:	bne	1f848 <__assert_fail@plt+0xd9b4>
   1f81c:	mov	r3, #0
   1f820:	ldr	r7, [r2, #8]
   1f824:	mov	r1, r2
   1f828:	cmp	r7, r3
   1f82c:	cmpne	r7, #0
   1f830:	bne	1f848 <__assert_fail@plt+0xd9b4>
   1f834:	ldr	r2, [r1]
   1f838:	mov	r3, r1
   1f83c:	cmp	r2, #0
   1f840:	bne	1f820 <__assert_fail@plt+0xd98c>
   1f844:	b	1f8e4 <__assert_fail@plt+0xda50>
   1f848:	ldrb	r1, [r7, #24]
   1f84c:	cmp	r1, #17
   1f850:	beq	1f888 <__assert_fail@plt+0xd9f4>
   1f854:	cmp	r1, #4
   1f858:	mov	r2, r7
   1f85c:	bne	1f810 <__assert_fail@plt+0xd97c>
   1f860:	ldr	r1, [sl, #132]	; 0x84
   1f864:	mov	r2, r7
   1f868:	cmp	r1, #0
   1f86c:	beq	1f810 <__assert_fail@plt+0xd97c>
   1f870:	ldr	r2, [r7, #20]
   1f874:	ldr	r1, [r1, r2, lsl #2]
   1f878:	str	r1, [r7, #20]
   1f87c:	ldr	r2, [sl, #80]	; 0x50
   1f880:	orr	r1, r2, r0, lsl r1
   1f884:	b	1f808 <__assert_fail@plt+0xd974>
   1f888:	ldr	r3, [r7, #4]
   1f88c:	mov	r2, r7
   1f890:	cmp	r3, #0
   1f894:	beq	1f810 <__assert_fail@plt+0xd97c>
   1f898:	ldrb	r1, [r3, #24]
   1f89c:	mov	r2, r7
   1f8a0:	cmp	r1, #17
   1f8a4:	bne	1f810 <__assert_fail@plt+0xd97c>
   1f8a8:	ldr	r1, [r3, #4]
   1f8ac:	ldr	r3, [r3, #20]
   1f8b0:	cmp	r1, #0
   1f8b4:	str	r1, [r7, #4]
   1f8b8:	strne	r7, [r1]
   1f8bc:	cmp	r3, #31
   1f8c0:	ldr	r1, [r7, #20]
   1f8c4:	ldr	r2, [sl, #132]	; 0x84
   1f8c8:	ldr	r1, [r2, r1, lsl #2]
   1f8cc:	str	r1, [r2, r3, lsl #2]
   1f8d0:	mov	r2, r7
   1f8d4:	bgt	1f810 <__assert_fail@plt+0xd97c>
   1f8d8:	ldr	r1, [sl, #80]	; 0x50
   1f8dc:	bic	r1, r1, r0, lsl r3
   1f8e0:	b	1f808 <__assert_fail@plt+0xd974>
   1f8e4:	ldr	r1, [r9, #24]
   1f8e8:	cmp	r1, #0
   1f8ec:	beq	1f91c <__assert_fail@plt+0xda88>
   1f8f0:	ldr	r0, [sl, #132]	; 0x84
   1f8f4:	mov	r2, #0
   1f8f8:	ldr	r3, [r0, r2, lsl #2]
   1f8fc:	cmp	r2, r3
   1f900:	bne	1f910 <__assert_fail@plt+0xda7c>
   1f904:	add	r2, r2, #1
   1f908:	cmp	r2, r1
   1f90c:	bcc	1f8f8 <__assert_fail@plt+0xda64>
   1f910:	cmp	r2, r1
   1f914:	beq	1f920 <__assert_fail@plt+0xda8c>
   1f918:	b	1f92c <__assert_fail@plt+0xda98>
   1f91c:	ldr	r0, [sl, #132]	; 0x84
   1f920:	bl	17754 <__assert_fail@plt+0x58c0>
   1f924:	mov	r0, #0
   1f928:	str	r0, [sl, #132]	; 0x84
   1f92c:	ldr	r0, [r8]
   1f930:	mov	r7, #0
   1f934:	sub	r5, fp, #48	; 0x30
   1f938:	mov	r4, r0
   1f93c:	ldr	r0, [r0, #4]
   1f940:	cmp	r0, #0
   1f944:	bne	1f938 <__assert_fail@plt+0xdaa4>
   1f948:	ldr	r0, [r4, #8]
   1f94c:	cmp	r0, #0
   1f950:	bne	1f938 <__assert_fail@plt+0xdaa4>
   1f954:	mov	r2, #0
   1f958:	b	1f978 <__assert_fail@plt+0xdae4>
   1f95c:	nop	{0}
   1f960:	andeq	r0, r0, r0
   1f964:	andeq	r0, r0, r1
   1f968:	andeq	r0, r0, r2
   1f96c:	andeq	r0, r0, r3
   1f970:	ldr	r2, [r1, #4]
   1f974:	mov	r4, r1
   1f978:	cmp	r2, #0
   1f97c:	str	r7, [fp, #-48]	; 0xffffffd0
   1f980:	beq	1f9a8 <__assert_fail@plt+0xdb14>
   1f984:	ldrb	r0, [r2, #24]
   1f988:	cmp	r0, #17
   1f98c:	bne	1f9a8 <__assert_fail@plt+0xdb14>
   1f990:	mov	r0, r5
   1f994:	mov	r1, r9
   1f998:	bl	28cc4 <__assert_fail@plt+0x16e30>
   1f99c:	cmp	r0, #0
   1f9a0:	str	r0, [r4, #4]
   1f9a4:	strne	r4, [r0]
   1f9a8:	ldr	r2, [r4, #8]
   1f9ac:	cmp	r2, #0
   1f9b0:	beq	1f9d8 <__assert_fail@plt+0xdb44>
   1f9b4:	ldrb	r0, [r2, #24]
   1f9b8:	cmp	r0, #17
   1f9bc:	bne	1f9d8 <__assert_fail@plt+0xdb44>
   1f9c0:	mov	r0, r5
   1f9c4:	mov	r1, r9
   1f9c8:	bl	28cc4 <__assert_fail@plt+0x16e30>
   1f9cc:	cmp	r0, #0
   1f9d0:	str	r0, [r4, #8]
   1f9d4:	strne	r4, [r0]
   1f9d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f9dc:	cmp	r0, #0
   1f9e0:	bne	1f5b4 <__assert_fail@plt+0xd720>
   1f9e4:	ldr	r1, [r4]
   1f9e8:	cmp	r1, #0
   1f9ec:	beq	1fa04 <__assert_fail@plt+0xdb70>
   1f9f0:	ldr	r0, [r1, #8]
   1f9f4:	cmp	r0, r4
   1f9f8:	cmpne	r0, #0
   1f9fc:	beq	1f970 <__assert_fail@plt+0xdadc>
   1fa00:	b	1f938 <__assert_fail@plt+0xdaa4>
   1fa04:	ldr	r0, [sl, #52]	; 0x34
   1fa08:	mov	r4, r0
   1fa0c:	ldr	r0, [r0, #4]
   1fa10:	cmp	r0, #0
   1fa14:	bne	1fa08 <__assert_fail@plt+0xdb74>
   1fa18:	ldr	r0, [r4, #8]
   1fa1c:	cmp	r0, #0
   1fa20:	bne	1fa08 <__assert_fail@plt+0xdb74>
   1fa24:	ldr	r2, [r4, #24]
   1fa28:	uxtb	r0, r2
   1fa2c:	cmp	r0, #16
   1fa30:	bne	1fa4c <__assert_fail@plt+0xdbb8>
   1fa34:	ldr	r0, [r4, #4]
   1fa38:	ldr	r1, [r0, #12]
   1fa3c:	str	r1, [r4, #12]
   1fa40:	ldr	r0, [r0, #28]
   1fa44:	str	r0, [r4, #28]
   1fa48:	b	1fa8c <__assert_fail@plt+0xdbf8>
   1fa4c:	str	r4, [r4, #12]
   1fa50:	mov	r0, sl
   1fa54:	ldr	r1, [r4, #20]
   1fa58:	bl	28f80 <__assert_fail@plt+0x170ec>
   1fa5c:	cmn	r0, #1
   1fa60:	str	r0, [r4, #28]
   1fa64:	beq	1f5b0 <__assert_fail@plt+0xd71c>
   1fa68:	ldrb	r1, [r4, #24]
   1fa6c:	cmp	r1, #12
   1fa70:	bne	1fa8c <__assert_fail@plt+0xdbf8>
   1fa74:	ldr	r1, [sl]
   1fa78:	ldr	r2, [r4, #20]
   1fa7c:	add	r0, r1, r0, lsl #3
   1fa80:	ldr	r1, [r0, #4]
   1fa84:	bfi	r1, r2, #8, #10
   1fa88:	str	r1, [r0, #4]
   1fa8c:	ldr	r1, [r4]
   1fa90:	cmp	r1, #0
   1fa94:	beq	1fab8 <__assert_fail@plt+0xdc24>
   1fa98:	ldr	r0, [r1, #8]
   1fa9c:	cmp	r0, r4
   1faa0:	mov	r4, r1
   1faa4:	beq	1fa24 <__assert_fail@plt+0xdb90>
   1faa8:	cmp	r0, #0
   1faac:	mov	r4, r1
   1fab0:	beq	1fa24 <__assert_fail@plt+0xdb90>
   1fab4:	b	1fa08 <__assert_fail@plt+0xdb74>
   1fab8:	ldr	r4, [r8]
   1fabc:	ldrb	r0, [r4, #24]
   1fac0:	cmp	r0, #16
   1fac4:	beq	1fadc <__assert_fail@plt+0xdc48>
   1fac8:	cmp	r0, #11
   1facc:	bne	1faec <__assert_fail@plt+0xdc58>
   1fad0:	ldr	r0, [r4, #4]
   1fad4:	str	r4, [r0, #16]
   1fad8:	b	1fb10 <__assert_fail@plt+0xdc7c>
   1fadc:	ldmib	r4, {r0, r1}
   1fae0:	ldr	r2, [r1, #12]
   1fae4:	str	r2, [r0, #16]
   1fae8:	b	1fb08 <__assert_fail@plt+0xdc74>
   1faec:	ldr	r0, [r4, #4]
   1faf0:	cmp	r0, #0
   1faf4:	ldrne	r1, [r4, #16]
   1faf8:	strne	r1, [r0, #16]
   1fafc:	ldr	r1, [r4, #8]
   1fb00:	cmp	r1, #0
   1fb04:	beq	1fb10 <__assert_fail@plt+0xdc7c>
   1fb08:	ldr	r2, [r4, #16]
   1fb0c:	str	r2, [r1, #16]
   1fb10:	mov	r1, r4
   1fb14:	b	1fb34 <__assert_fail@plt+0xdca0>
   1fb18:	ldr	r3, [r1, #16]
   1fb1c:	str	r3, [r2, #16]
   1fb20:	b	1fb34 <__assert_fail@plt+0xdca0>
   1fb24:	ldmib	r1, {r0, r2}
   1fb28:	ldr	r3, [r2, #12]
   1fb2c:	str	r3, [r0, #16]
   1fb30:	b	1fb18 <__assert_fail@plt+0xdc84>
   1fb34:	cmp	r0, #0
   1fb38:	bne	1fb68 <__assert_fail@plt+0xdcd4>
   1fb3c:	mov	r3, #0
   1fb40:	ldr	r0, [r1, #8]
   1fb44:	mov	r2, r1
   1fb48:	cmp	r0, r3
   1fb4c:	cmpne	r0, #0
   1fb50:	bne	1fb68 <__assert_fail@plt+0xdcd4>
   1fb54:	ldr	r1, [r2]
   1fb58:	mov	r3, r2
   1fb5c:	cmp	r1, #0
   1fb60:	bne	1fb40 <__assert_fail@plt+0xdcac>
   1fb64:	b	1fbac <__assert_fail@plt+0xdd18>
   1fb68:	mov	r1, r0
   1fb6c:	ldrb	r0, [r0, #24]
   1fb70:	cmp	r0, #16
   1fb74:	beq	1fb24 <__assert_fail@plt+0xdc90>
   1fb78:	cmp	r0, #11
   1fb7c:	bne	1fb8c <__assert_fail@plt+0xdcf8>
   1fb80:	ldr	r0, [r1, #4]
   1fb84:	str	r1, [r0, #16]
   1fb88:	b	1fb34 <__assert_fail@plt+0xdca0>
   1fb8c:	ldr	r0, [r1, #4]
   1fb90:	cmp	r0, #0
   1fb94:	ldrne	r2, [r1, #16]
   1fb98:	strne	r2, [r0, #16]
   1fb9c:	ldr	r2, [r1, #8]
   1fba0:	cmp	r2, #0
   1fba4:	beq	1fb34 <__assert_fail@plt+0xdca0>
   1fba8:	b	1fb18 <__assert_fail@plt+0xdc84>
   1fbac:	mov	r0, sl
   1fbb0:	mov	r1, r4
   1fbb4:	bl	28b2c <__assert_fail@plt+0x16c98>
   1fbb8:	cmp	r0, #0
   1fbbc:	bne	1f5b4 <__assert_fail@plt+0xd720>
   1fbc0:	ldr	r7, [r4, #4]
   1fbc4:	cmp	r7, #0
   1fbc8:	bne	1fbf8 <__assert_fail@plt+0xdd64>
   1fbcc:	mov	r1, #0
   1fbd0:	ldr	r7, [r4, #8]
   1fbd4:	mov	r0, r4
   1fbd8:	cmp	r7, r1
   1fbdc:	cmpne	r7, #0
   1fbe0:	bne	1fbf8 <__assert_fail@plt+0xdd64>
   1fbe4:	ldr	r4, [r0]
   1fbe8:	mov	r1, r0
   1fbec:	cmp	r4, #0
   1fbf0:	bne	1fbd0 <__assert_fail@plt+0xdd3c>
   1fbf4:	b	1fc14 <__assert_fail@plt+0xdd80>
   1fbf8:	mov	r0, sl
   1fbfc:	mov	r1, r7
   1fc00:	bl	28b2c <__assert_fail@plt+0x16c98>
   1fc04:	cmp	r0, #0
   1fc08:	mov	r4, r7
   1fc0c:	beq	1fbc0 <__assert_fail@plt+0xdd2c>
   1fc10:	b	1f5b4 <__assert_fail@plt+0xd720>
   1fc14:	ldr	r0, [sl, #8]
   1fc18:	cmp	r0, #0
   1fc1c:	beq	1fcc0 <__assert_fail@plt+0xde2c>
   1fc20:	mov	r5, #0
   1fc24:	sub	r4, fp, #48	; 0x30
   1fc28:	mov	r7, #0
   1fc2c:	ldr	r0, [sl, #24]
   1fc30:	add	r6, r7, r7, lsl #1
   1fc34:	add	r0, r0, r6, lsl #2
   1fc38:	ldr	r0, [r0, #4]
   1fc3c:	cmp	r0, #0
   1fc40:	beq	1fc4c <__assert_fail@plt+0xddb8>
   1fc44:	mov	r1, r5
   1fc48:	b	1fc8c <__assert_fail@plt+0xddf8>
   1fc4c:	mov	r0, r4
   1fc50:	mov	r1, sl
   1fc54:	mov	r2, r7
   1fc58:	mov	r3, #1
   1fc5c:	bl	29150 <__assert_fail@plt+0x172bc>
   1fc60:	cmp	r0, #0
   1fc64:	bne	1f5b4 <__assert_fail@plt+0xd720>
   1fc68:	ldr	r0, [sl, #24]
   1fc6c:	mov	r1, r5
   1fc70:	add	r0, r0, r6, lsl #2
   1fc74:	ldr	r0, [r0, #4]
   1fc78:	cmp	r0, #0
   1fc7c:	bne	1fc8c <__assert_fail@plt+0xddf8>
   1fc80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fc84:	bl	17754 <__assert_fail@plt+0x58c0>
   1fc88:	mov	r1, #1
   1fc8c:	ldr	r2, [sl, #8]
   1fc90:	add	r0, r7, #1
   1fc94:	subs	r3, r0, r2
   1fc98:	mov	r7, r3
   1fc9c:	movwne	r3, #1
   1fca0:	movne	r7, r0
   1fca4:	tst	r1, #1
   1fca8:	and	r5, r1, r3
   1fcac:	cmpeq	r0, r2
   1fcb0:	bne	1fc2c <__assert_fail@plt+0xdd98>
   1fcb4:	add	r0, r0, r0, lsl #1
   1fcb8:	lsl	r0, r0, #2
   1fcbc:	b	1fcc4 <__assert_fail@plt+0xde30>
   1fcc0:	mov	r0, #0
   1fcc4:	ldrb	r1, [r9, #28]
   1fcc8:	str	r9, [sp, #12]
   1fccc:	tst	r1, #16
   1fcd0:	bne	1fcec <__assert_fail@plt+0xde58>
   1fcd4:	ldr	r1, [sp, #12]
   1fcd8:	ldr	r1, [r1, #24]
   1fcdc:	cmp	r1, #0
   1fce0:	ldrbne	r1, [sl, #88]	; 0x58
   1fce4:	tstne	r1, #1
   1fce8:	bne	1fcf8 <__assert_fail@plt+0xde64>
   1fcec:	ldr	r1, [sl, #76]	; 0x4c
   1fcf0:	cmp	r1, #0
   1fcf4:	beq	1fe30 <__assert_fail@plt+0xdf9c>
   1fcf8:	bl	33c98 <__assert_fail@plt+0x21e04>
   1fcfc:	cmp	r0, #0
   1fd00:	str	r0, [sl, #28]
   1fd04:	beq	2026c <__assert_fail@plt+0xe3d8>
   1fd08:	ldr	r1, [sl, #8]
   1fd0c:	cmp	r1, #0
   1fd10:	beq	1fe30 <__assert_fail@plt+0xdf9c>
   1fd14:	mov	r1, #0
   1fd18:	str	r1, [r0]
   1fd1c:	str	r1, [r0, #4]
   1fd20:	str	r1, [r0, #8]
   1fd24:	ldr	r0, [sl, #8]
   1fd28:	cmp	r0, #2
   1fd2c:	bcc	1fd5c <__assert_fail@plt+0xdec8>
   1fd30:	mov	r2, #1
   1fd34:	mov	r3, #12
   1fd38:	ldr	r0, [sl, #28]
   1fd3c:	add	r2, r2, #1
   1fd40:	str	r1, [r0, r3]!
   1fd44:	add	r3, r3, #12
   1fd48:	str	r1, [r0, #4]
   1fd4c:	str	r1, [r0, #8]
   1fd50:	ldr	r0, [sl, #8]
   1fd54:	cmp	r2, r0
   1fd58:	bcc	1fd38 <__assert_fail@plt+0xdea4>
   1fd5c:	cmp	r0, #0
   1fd60:	beq	1fe30 <__assert_fail@plt+0xdf9c>
   1fd64:	ldr	ip, [sl, #24]
   1fd68:	mov	r6, #0
   1fd6c:	add	lr, r6, r6, lsl #1
   1fd70:	add	r2, ip, lr, lsl #2
   1fd74:	ldr	r3, [r2, #4]
   1fd78:	cmp	r3, #1
   1fd7c:	blt	1fe24 <__assert_fail@plt+0xdf90>
   1fd80:	ldr	r1, [r2, #8]
   1fd84:	mov	r5, #0
   1fd88:	str	lr, [sp, #24]
   1fd8c:	str	r1, [sp, #20]
   1fd90:	ldr	r0, [r1, r5, lsl #2]
   1fd94:	ldr	r4, [sl, #28]
   1fd98:	add	r0, r0, r0, lsl #1
   1fd9c:	mov	r3, r4
   1fda0:	ldr	r7, [r3, r0, lsl #2]!
   1fda4:	mov	r8, r3
   1fda8:	ldr	r2, [r8, #4]!
   1fdac:	cmp	r7, r2
   1fdb0:	bne	1fdf8 <__assert_fail@plt+0xdf64>
   1fdb4:	mov	r1, #2
   1fdb8:	mov	r9, sl
   1fdbc:	add	sl, r4, r0, lsl #2
   1fdc0:	add	r1, r1, r7, lsl #1
   1fdc4:	str	r1, [r3]
   1fdc8:	lsl	r1, r1, #2
   1fdcc:	ldr	r0, [sl, #8]!
   1fdd0:	bl	33cc8 <__assert_fail@plt+0x21e34>
   1fdd4:	cmp	r0, #0
   1fdd8:	beq	2026c <__assert_fail@plt+0xe3d8>
   1fddc:	str	r0, [sl]
   1fde0:	ldr	lr, [sp, #24]
   1fde4:	ldr	r1, [sp, #20]
   1fde8:	mov	sl, r9
   1fdec:	ldr	ip, [r9, #24]
   1fdf0:	ldr	r2, [r8]
   1fdf4:	b	1fe00 <__assert_fail@plt+0xdf6c>
   1fdf8:	add	r0, r4, r0, lsl #2
   1fdfc:	ldr	r0, [r0, #8]
   1fe00:	add	r3, r2, #1
   1fe04:	add	r5, r5, #1
   1fe08:	str	r3, [r8]
   1fe0c:	str	r6, [r0, r2, lsl #2]
   1fe10:	add	r0, ip, lr, lsl #2
   1fe14:	ldr	r0, [r0, #4]
   1fe18:	cmp	r5, r0
   1fe1c:	blt	1fd90 <__assert_fail@plt+0xdefc>
   1fe20:	ldr	r0, [sl, #8]
   1fe24:	add	r6, r6, #1
   1fe28:	cmp	r6, r0
   1fe2c:	bcc	1fd6c <__assert_fail@plt+0xded8>
   1fe30:	mov	r0, #0
   1fe34:	str	r0, [fp, #-52]	; 0xffffffcc
   1fe38:	ldr	r0, [sp, #16]
   1fe3c:	cmp	r0, #0
   1fe40:	bne	1ff8c <__assert_fail@plt+0xe0f8>
   1fe44:	ldr	r0, [sp, #28]
   1fe48:	ldrb	r2, [r0, #88]	; 0x58
   1fe4c:	ands	r0, r2, #4
   1fe50:	beq	1ff8c <__assert_fail@plt+0xe0f8>
   1fe54:	ldr	r0, [sp, #12]
   1fe58:	ldr	r0, [r0, #20]
   1fe5c:	cmp	r0, #0
   1fe60:	bne	1ff8c <__assert_fail@plt+0xe0f8>
   1fe64:	ldr	r5, [sp, #28]
   1fe68:	mov	r9, #0
   1fe6c:	ldr	r7, [r5, #8]
   1fe70:	cmp	r7, #0
   1fe74:	beq	1ff60 <__assert_fail@plt+0xe0cc>
   1fe78:	ldr	r3, [r5]
   1fe7c:	mov	r8, #0
   1fe80:	mov	ip, #1
   1fe84:	mov	lr, #139	; 0x8b
   1fe88:	mov	r6, #0
   1fe8c:	mov	r4, #0
   1fe90:	add	r5, r3, r4, lsl #3
   1fe94:	ldrb	r1, [r5, #4]
   1fe98:	sub	r1, r1, #1
   1fe9c:	cmp	r1, #11
   1fea0:	bhi	20348 <__assert_fail@plt+0xe4b4>
   1fea4:	add	r0, pc, #0
   1fea8:	ldr	pc, [r0, r1, lsl #2]
   1feac:	andeq	pc, r1, r0, asr #30
   1feb0:	ldrdeq	pc, [r1], -ip
   1feb4:	andeq	pc, r1, ip, ror #29
   1feb8:	ldrdeq	pc, [r1], -ip
   1febc:	andeq	pc, r1, r8, asr pc	; <UNPREDICTABLE>
   1fec0:	andeq	pc, r1, ip, lsl #31
   1fec4:	andeq	r0, r2, r8, asr #6
   1fec8:	ldrdeq	pc, [r1], -ip
   1fecc:	ldrdeq	pc, [r1], -ip
   1fed0:	ldrdeq	pc, [r1], -ip
   1fed4:	ldrdeq	pc, [r1], -ip
   1fed8:	andeq	pc, r1, r0, lsr #30
   1fedc:	add	r4, r4, #1
   1fee0:	cmp	r4, r7
   1fee4:	bcc	1fe90 <__assert_fail@plt+0xdffc>
   1fee8:	b	20284 <__assert_fail@plt+0xe3f0>
   1feec:	ldr	r5, [r3, r4, lsl #3]
   1fef0:	ldr	r0, [r5, #16]
   1fef4:	cmp	r0, #0
   1fef8:	bne	1ff8c <__assert_fail@plt+0xe0f8>
   1fefc:	ldr	r0, [r5, #20]
   1ff00:	cmp	r0, #0
   1ff04:	ldreq	r0, [r5, #24]
   1ff08:	cmpeq	r0, #0
   1ff0c:	bne	1ff8c <__assert_fail@plt+0xe0f8>
   1ff10:	ldr	r0, [r5, #28]
   1ff14:	cmp	r0, #0
   1ff18:	beq	1fedc <__assert_fail@plt+0xe048>
   1ff1c:	b	1ff8c <__assert_fail@plt+0xe0f8>
   1ff20:	ldr	r0, [r3, r4, lsl #3]
   1ff24:	sub	r0, r0, #16
   1ff28:	ror	r1, r0, #4
   1ff2c:	cmp	r1, #7
   1ff30:	bhi	1ff8c <__assert_fail@plt+0xe0f8>
   1ff34:	tst	lr, ip, lsl r1
   1ff38:	bne	1fedc <__assert_fail@plt+0xe048>
   1ff3c:	b	1ff8c <__assert_fail@plt+0xe0f8>
   1ff40:	ldrsb	r0, [r5]
   1ff44:	cmp	r0, #0
   1ff48:	mov	r0, #0
   1ff4c:	movwlt	r0, #1
   1ff50:	orr	r6, r6, r0
   1ff54:	b	1fedc <__assert_fail@plt+0xe048>
   1ff58:	mov	r8, #1
   1ff5c:	b	1fedc <__assert_fail@plt+0xe048>
   1ff60:	mov	r8, #0
   1ff64:	mov	r0, #1
   1ff68:	and	r1, r2, #249	; 0xf9
   1ff6c:	str	r0, [r5, #92]	; 0x5c
   1ff70:	ldr	r0, [r5, #76]	; 0x4c
   1ff74:	cmp	r0, #0
   1ff78:	movwgt	r9, #1
   1ff7c:	orr	r0, r8, r9
   1ff80:	and	r0, r0, #1
   1ff84:	orr	r0, r1, r0, lsl #1
   1ff88:	strb	r0, [r5, #88]	; 0x58
   1ff8c:	ldr	r1, [sp, #28]
   1ff90:	ldr	r2, [r1, #52]	; 0x34
   1ff94:	ldr	r0, [r1, #24]
   1ff98:	ldr	r2, [r2, #12]
   1ff9c:	ldr	r2, [r2, #28]
   1ffa0:	str	r2, [r1, #72]	; 0x48
   1ffa4:	add	r2, r2, r2, lsl #1
   1ffa8:	add	r5, r0, r2, lsl #2
   1ffac:	mov	r4, r5
   1ffb0:	ldr	sl, [r4, #4]!
   1ffb4:	str	sl, [fp, #-44]	; 0xffffffd4
   1ffb8:	ldr	r0, [r4]
   1ffbc:	cmp	r0, #1
   1ffc0:	blt	2010c <__assert_fail@plt+0xe278>
   1ffc4:	lsl	r0, sl, #2
   1ffc8:	str	sl, [fp, #-48]	; 0xffffffd0
   1ffcc:	bl	33c98 <__assert_fail@plt+0x21e04>
   1ffd0:	cmp	r0, #0
   1ffd4:	str	r0, [fp, #-40]	; 0xffffffd8
   1ffd8:	beq	2032c <__assert_fail@plt+0xe498>
   1ffdc:	mov	r6, r0
   1ffe0:	ldr	r0, [r4]
   1ffe4:	ldr	r1, [r5, #8]
   1ffe8:	lsl	r2, r0, #2
   1ffec:	mov	r0, r6
   1fff0:	bl	11a8c <memcpy@plt>
   1fff4:	ldr	r1, [sp, #28]
   1fff8:	mov	r0, #0
   1fffc:	cmp	sl, #1
   20000:	str	r0, [fp, #-32]	; 0xffffffe0
   20004:	ldrge	r0, [r1, #76]	; 0x4c
   20008:	cmpge	r0, #1
   2000c:	blt	20120 <__assert_fail@plt+0xe28c>
   20010:	mov	ip, #0
   20014:	sub	r8, fp, #48	; 0x30
   20018:	mov	r9, #1
   2001c:	b	20024 <__assert_fail@plt+0xe190>
   20020:	ldr	r6, [fp, #-40]	; 0xffffffd8
   20024:	ldr	r7, [r6, ip, lsl #2]
   20028:	ldr	r2, [r1]
   2002c:	add	r3, r2, r7, lsl #3
   20030:	ldrb	r3, [r3, #4]
   20034:	cmp	r3, #4
   20038:	bne	200fc <__assert_fail@plt+0xe268>
   2003c:	mov	r3, #0
   20040:	cmp	sl, #1
   20044:	blt	20078 <__assert_fail@plt+0xe1e4>
   20048:	ldr	r5, [r6, r3, lsl #2]
   2004c:	add	r4, r2, r5, lsl #3
   20050:	ldrb	r4, [r4, #4]
   20054:	cmp	r4, #9
   20058:	bne	2006c <__assert_fail@plt+0xe1d8>
   2005c:	ldr	r4, [r2, r7, lsl #3]
   20060:	ldr	r5, [r2, r5, lsl #3]
   20064:	cmp	r5, r4
   20068:	beq	20078 <__assert_fail@plt+0xe1e4>
   2006c:	add	r3, r3, #1
   20070:	cmp	r3, sl
   20074:	blt	20048 <__assert_fail@plt+0xe1b4>
   20078:	cmp	r3, sl
   2007c:	beq	200fc <__assert_fail@plt+0xe268>
   20080:	ldr	r2, [r1, #20]
   20084:	add	r0, r7, r7, lsl #1
   20088:	cmp	sl, #1
   2008c:	add	r0, r2, r0, lsl #2
   20090:	ldr	r0, [r0, #8]
   20094:	ldr	r0, [r0]
   20098:	blt	200d4 <__assert_fail@plt+0xe240>
   2009c:	mov	r2, #0
   200a0:	subs	r3, sl, #1
   200a4:	beq	200c8 <__assert_fail@plt+0xe234>
   200a8:	add	r5, r2, r3
   200ac:	lsr	r4, r5, #1
   200b0:	ldr	r7, [r6, r4, lsl #2]
   200b4:	cmp	r7, r0
   200b8:	movge	r3, r4
   200bc:	addlt	r2, r9, r5, lsr #1
   200c0:	cmp	r2, r3
   200c4:	bcc	200a8 <__assert_fail@plt+0xe214>
   200c8:	ldr	r2, [r6, r2, lsl #2]
   200cc:	cmp	r2, r0
   200d0:	beq	200fc <__assert_fail@plt+0xe268>
   200d4:	ldr	r2, [r1, #24]
   200d8:	add	r1, r0, r0, lsl #1
   200dc:	mov	r0, r8
   200e0:	add	r1, r2, r1, lsl #2
   200e4:	bl	29820 <__assert_fail@plt+0x1798c>
   200e8:	cmp	r0, #0
   200ec:	bne	2027c <__assert_fail@plt+0xe3e8>
   200f0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   200f4:	ldr	r1, [sp, #28]
   200f8:	mov	ip, #0
   200fc:	add	ip, ip, #1
   20100:	cmp	ip, sl
   20104:	blt	20020 <__assert_fail@plt+0xe18c>
   20108:	b	20120 <__assert_fail@plt+0xe28c>
   2010c:	mov	r0, #0
   20110:	str	r0, [fp, #-44]	; 0xffffffd4
   20114:	str	r0, [fp, #-48]	; 0xffffffd0
   20118:	str	r0, [fp, #-40]	; 0xffffffd8
   2011c:	str	r0, [fp, #-32]	; 0xffffffe0
   20120:	sub	r0, fp, #32
   20124:	sub	r2, fp, #48	; 0x30
   20128:	mov	r3, #0
   2012c:	bl	29aec <__assert_fail@plt+0x17c58>
   20130:	ldr	r1, [sp, #28]
   20134:	ldr	r7, [sp, #12]
   20138:	cmp	r0, #0
   2013c:	str	r0, [r1, #36]	; 0x24
   20140:	beq	201c8 <__assert_fail@plt+0xe334>
   20144:	ldrsb	r2, [r0, #52]	; 0x34
   20148:	cmn	r2, #1
   2014c:	ble	20160 <__assert_fail@plt+0xe2cc>
   20150:	str	r0, [r1, #40]	; 0x28
   20154:	str	r0, [r1, #44]	; 0x2c
   20158:	str	r0, [r1, #48]	; 0x30
   2015c:	b	201dc <__assert_fail@plt+0xe348>
   20160:	sub	r4, fp, #32
   20164:	sub	r6, fp, #48	; 0x30
   20168:	mov	r3, #1
   2016c:	mov	r0, r4
   20170:	mov	r2, r6
   20174:	bl	29aec <__assert_fail@plt+0x17c58>
   20178:	ldr	r1, [sp, #28]
   2017c:	mov	r2, r6
   20180:	mov	r3, #2
   20184:	str	r0, [r1, #40]	; 0x28
   20188:	ldr	r1, [sp, #28]
   2018c:	mov	r0, r4
   20190:	bl	29aec <__assert_fail@plt+0x17c58>
   20194:	ldr	r1, [sp, #28]
   20198:	mov	r2, r6
   2019c:	mov	r3, #6
   201a0:	str	r0, [r1, #44]	; 0x2c
   201a4:	ldr	r1, [sp, #28]
   201a8:	mov	r0, r4
   201ac:	bl	29aec <__assert_fail@plt+0x17c58>
   201b0:	ldr	r2, [sp, #28]
   201b4:	str	r0, [r2, #48]	; 0x30
   201b8:	ldr	r1, [r2, #40]	; 0x28
   201bc:	cmp	r1, #0
   201c0:	cmpne	r0, #0
   201c4:	bne	201d0 <__assert_fail@plt+0xe33c>
   201c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   201cc:	b	201e8 <__assert_fail@plt+0xe354>
   201d0:	ldr	r0, [r2, #44]	; 0x2c
   201d4:	cmp	r0, #0
   201d8:	beq	201c8 <__assert_fail@plt+0xe334>
   201dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   201e0:	bl	17754 <__assert_fail@plt+0x58c0>
   201e4:	mov	r0, #0
   201e8:	str	r0, [fp, #-52]	; 0xffffffcc
   201ec:	ldr	r5, [r7]
   201f0:	ldr	r0, [r5, #56]	; 0x38
   201f4:	cmp	r0, #0
   201f8:	beq	20210 <__assert_fail@plt+0xe37c>
   201fc:	ldr	r4, [r0]
   20200:	bl	17754 <__assert_fail@plt+0x58c0>
   20204:	cmp	r4, #0
   20208:	mov	r0, r4
   2020c:	bne	201fc <__assert_fail@plt+0xe368>
   20210:	mov	r0, #31
   20214:	mov	r4, #0
   20218:	str	r0, [r5, #64]	; 0x40
   2021c:	str	r4, [r5, #52]	; 0x34
   20220:	str	r4, [r5, #56]	; 0x38
   20224:	ldr	r0, [r5, #16]
   20228:	bl	17754 <__assert_fail@plt+0x58c0>
   2022c:	str	r4, [r5, #16]
   20230:	ldr	r0, [sp, #40]	; 0x28
   20234:	bl	17754 <__assert_fail@plt+0x58c0>
   20238:	ldr	r0, [sp, #44]	; 0x2c
   2023c:	bl	17754 <__assert_fail@plt+0x58c0>
   20240:	ldrb	r0, [sp, #107]	; 0x6b
   20244:	cmp	r0, #0
   20248:	beq	20254 <__assert_fail@plt+0xe3c0>
   2024c:	ldr	r0, [sp, #36]	; 0x24
   20250:	bl	17754 <__assert_fail@plt+0x58c0>
   20254:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20258:	cmp	r0, #0
   2025c:	bne	202fc <__assert_fail@plt+0xe468>
   20260:	mov	r0, r4
   20264:	sub	sp, fp, #28
   20268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2026c:	ldr	r9, [sp, #12]
   20270:	mov	r0, #12
   20274:	str	r0, [fp, #-52]	; 0xffffffcc
   20278:	b	1f6bc <__assert_fail@plt+0xd828>
   2027c:	ldr	r7, [sp, #12]
   20280:	b	201e8 <__assert_fail@plt+0xe354>
   20284:	orr	r0, r6, r8
   20288:	tst	r0, #1
   2028c:	beq	202f4 <__assert_fail@plt+0xe460>
   20290:	ldr	r5, [sp, #28]
   20294:	mov	r2, #0
   20298:	mov	r7, #7
   2029c:	b	202a4 <__assert_fail@plt+0xe410>
   202a0:	ldr	r3, [r5]
   202a4:	add	r3, r3, r2, lsl #3
   202a8:	ldr	r6, [r3, #4]
   202ac:	uxtb	r1, r6
   202b0:	cmp	r1, #5
   202b4:	beq	202d4 <__assert_fail@plt+0xe440>
   202b8:	cmp	r1, #1
   202bc:	bne	202dc <__assert_fail@plt+0xe448>
   202c0:	ldrsb	r0, [r3]
   202c4:	cmn	r0, #1
   202c8:	bicle	r0, r6, #2097152	; 0x200000
   202cc:	strle	r0, [r3, #4]
   202d0:	b	202dc <__assert_fail@plt+0xe448>
   202d4:	bfi	r6, r7, #0, #8
   202d8:	str	r6, [r3, #4]
   202dc:	ldr	r0, [r5, #8]
   202e0:	add	r2, r2, #1
   202e4:	cmp	r2, r0
   202e8:	bcc	202a0 <__assert_fail@plt+0xe40c>
   202ec:	ldrb	r2, [r5, #88]	; 0x58
   202f0:	b	1ff64 <__assert_fail@plt+0xe0d0>
   202f4:	ldr	r5, [sp, #28]
   202f8:	b	1ff64 <__assert_fail@plt+0xe0d0>
   202fc:	ldr	r0, [sp, #8]
   20300:	cmp	r0, #0
   20304:	beq	20314 <__assert_fail@plt+0xe480>
   20308:	ldr	r0, [sp, #28]
   2030c:	add	r0, r0, #136	; 0x88
   20310:	bl	11a20 <pthread_mutex_destroy@plt>
   20314:	ldr	r0, [sp, #28]
   20318:	bl	209f0 <__assert_fail@plt+0xeb5c>
   2031c:	mov	r0, #0
   20320:	str	r0, [r7]
   20324:	str	r0, [r7, #4]
   20328:	b	1f750 <__assert_fail@plt+0xd8bc>
   2032c:	ldr	r7, [sp, #12]
   20330:	mov	r0, #0
   20334:	str	r0, [fp, #-48]	; 0xffffffd0
   20338:	str	r0, [fp, #-44]	; 0xffffffd4
   2033c:	mov	r0, #12
   20340:	str	r0, [fp, #-32]	; 0xffffffe0
   20344:	b	201e8 <__assert_fail@plt+0xe354>
   20348:	bl	11e58 <abort@plt>
   2034c:	movw	r2, #33772	; 0x83ec
   20350:	movt	r2, #4
   20354:	ldr	r1, [r2]
   20358:	str	r0, [r2]
   2035c:	mov	r0, r1
   20360:	bx	lr
   20364:	push	{r4, r5, r6, sl, fp, lr}
   20368:	add	fp, sp, #16
   2036c:	ldr	r5, [r0, #16]
   20370:	ldr	r6, [r0]
   20374:	mov	r4, r0
   20378:	mov	r1, #0
   2037c:	mov	r2, #256	; 0x100
   20380:	mov	r0, r5
   20384:	bl	11cd8 <memset@plt>
   20388:	ldr	r1, [r6, #36]	; 0x24
   2038c:	mov	r0, r4
   20390:	mov	r2, r5
   20394:	bl	20400 <__assert_fail@plt+0xe56c>
   20398:	ldr	r0, [r6, #36]	; 0x24
   2039c:	ldr	r1, [r6, #40]	; 0x28
   203a0:	cmp	r0, r1
   203a4:	beq	203b8 <__assert_fail@plt+0xe524>
   203a8:	mov	r0, r4
   203ac:	mov	r2, r5
   203b0:	bl	20400 <__assert_fail@plt+0xe56c>
   203b4:	ldr	r0, [r6, #36]	; 0x24
   203b8:	ldr	r1, [r6, #44]	; 0x2c
   203bc:	cmp	r0, r1
   203c0:	beq	203d4 <__assert_fail@plt+0xe540>
   203c4:	mov	r0, r4
   203c8:	mov	r2, r5
   203cc:	bl	20400 <__assert_fail@plt+0xe56c>
   203d0:	ldr	r0, [r6, #36]	; 0x24
   203d4:	ldr	r1, [r6, #48]	; 0x30
   203d8:	cmp	r0, r1
   203dc:	beq	203ec <__assert_fail@plt+0xe558>
   203e0:	mov	r0, r4
   203e4:	mov	r2, r5
   203e8:	bl	20400 <__assert_fail@plt+0xe56c>
   203ec:	ldrb	r0, [r4, #28]
   203f0:	orr	r0, r0, #8
   203f4:	strb	r0, [r4, #28]
   203f8:	mov	r0, #0
   203fc:	pop	{r4, r5, r6, sl, fp, pc}
   20400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20404:	add	fp, sp, #28
   20408:	sub	sp, sp, #316	; 0x13c
   2040c:	ldr	r8, [r0]
   20410:	str	r0, [sp, #20]
   20414:	mov	r3, #0
   20418:	str	r2, [sp, #36]	; 0x24
   2041c:	ldr	r0, [r8, #92]	; 0x5c
   20420:	cmp	r0, #1
   20424:	ldreq	r0, [sp, #20]
   20428:	ldrbeq	r0, [r0, #14]
   2042c:	ubfxeq	r3, r0, #6, #1
   20430:	ldr	r0, [r1, #8]
   20434:	cmp	r0, #1
   20438:	blt	207cc <__assert_fail@plt+0xe938>
   2043c:	add	r0, sp, #40	; 0x28
   20440:	mov	r4, #1
   20444:	mov	r2, #0
   20448:	str	r3, [sp, #32]
   2044c:	str	r1, [sp, #12]
   20450:	str	r8, [sp, #24]
   20454:	add	r0, r0, #1
   20458:	str	r0, [sp, #8]
   2045c:	movw	r0, #1
   20460:	movt	r0, #32
   20464:	add	r0, r0, #254	; 0xfe
   20468:	str	r0, [sp, #4]
   2046c:	ldr	r0, [r1, #12]
   20470:	str	r2, [sp, #16]
   20474:	ldr	sl, [r0, r2, lsl #2]
   20478:	ldr	r0, [r8]
   2047c:	add	r1, r0, sl, lsl #3
   20480:	ldrb	r5, [r1, #4]
   20484:	sub	r1, r5, #1
   20488:	cmp	r1, #6
   2048c:	bhi	207b4 <__assert_fail@plt+0xe920>
   20490:	add	r2, pc, #0
   20494:	ldr	pc, [r2, r1, lsl #2]
   20498:			; <UNDEFINED> instruction: 0x000204b4
   2049c:	ldrdeq	r0, [r2], -r4
   204a0:	andeq	r0, r2, r4, asr #11
   204a4:			; <UNDEFINED> instruction: 0x000207b4
   204a8:	ldrdeq	r0, [r2], -r4
   204ac:	andeq	r0, r2, r8, ror #12
   204b0:	ldrdeq	r0, [r2], -r4
   204b4:	ldrb	r5, [r0, sl, lsl #3]
   204b8:	ldr	r0, [sp, #36]	; 0x24
   204bc:	cmp	r3, #0
   204c0:	strb	r4, [r0, r5]
   204c4:	beq	204e0 <__assert_fail@plt+0xe64c>
   204c8:	bl	11c18 <__ctype_tolower_loc@plt>
   204cc:	ldr	r0, [r0]
   204d0:	ldr	r3, [sp, #32]
   204d4:	ldr	r1, [sp, #36]	; 0x24
   204d8:	ldr	r0, [r0, r5, lsl #2]
   204dc:	strb	r4, [r1, r0]
   204e0:	ldr	r0, [sp, #20]
   204e4:	ldrb	r0, [r0, #14]
   204e8:	tst	r0, #64	; 0x40
   204ec:	beq	207b4 <__assert_fail@plt+0xe920>
   204f0:	ldr	r0, [r8, #92]	; 0x5c
   204f4:	cmp	r0, #2
   204f8:	blt	207b4 <__assert_fail@plt+0xe920>
   204fc:	ldr	r0, [r8]
   20500:	add	r1, sl, #1
   20504:	ldr	r5, [sp, #4]
   20508:	movw	r6, #1
   2050c:	add	r9, sp, #40	; 0x28
   20510:	mov	r7, #0
   20514:	movt	r6, #32
   20518:	ldrb	r0, [r0, sl, lsl #3]
   2051c:	strb	r0, [sp, #40]	; 0x28
   20520:	ldr	r0, [r8, #8]
   20524:	cmp	r1, r0
   20528:	ldr	r0, [sp, #8]
   2052c:	bcs	2056c <__assert_fail@plt+0xe6d8>
   20530:	ldr	r0, [sp, #8]
   20534:	ldr	r1, [r8]
   20538:	add	r1, r1, sl, lsl #3
   2053c:	ldr	r2, [r1, #12]
   20540:	and	r2, r2, r5
   20544:	cmp	r2, r6
   20548:	bne	2056c <__assert_fail@plt+0xe6d8>
   2054c:	ldrb	r1, [r1, #8]
   20550:	add	r3, sl, #2
   20554:	strb	r1, [r0], #1
   20558:	add	r1, sl, #1
   2055c:	ldr	r2, [r8, #8]
   20560:	mov	sl, r1
   20564:	cmp	r3, r2
   20568:	bcc	20534 <__assert_fail@plt+0xe6a0>
   2056c:	sub	r6, r0, r9
   20570:	sub	r5, fp, #48	; 0x30
   20574:	sub	r0, fp, #36	; 0x24
   20578:	mov	r1, r9
   2057c:	str	r7, [fp, #-44]	; 0xffffffd4
   20580:	str	r7, [fp, #-48]	; 0xffffffd0
   20584:	mov	r2, r6
   20588:	mov	r3, r5
   2058c:	bl	34cac <__assert_fail@plt+0x22e18>
   20590:	cmp	r0, r6
   20594:	bne	206e4 <__assert_fail@plt+0xe850>
   20598:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2059c:	bl	11ab0 <towlower@plt>
   205a0:	mov	r1, r0
   205a4:	mov	r0, r9
   205a8:	mov	r2, r5
   205ac:	bl	119e4 <wcrtomb@plt>
   205b0:	cmn	r0, #1
   205b4:	ldrbne	r0, [sp, #40]	; 0x28
   205b8:	ldrne	r1, [sp, #36]	; 0x24
   205bc:	strbne	r4, [r1, r0]
   205c0:	b	206e4 <__assert_fail@plt+0xe850>
   205c4:	ldr	r5, [sp, #36]	; 0x24
   205c8:	mov	r7, #0
   205cc:	mov	r6, #0
   205d0:	mov	r9, #0
   205d4:	str	sl, [sp, #28]
   205d8:	b	205ec <__assert_fail@plt+0xe758>
   205dc:	ldr	r0, [r8]
   205e0:	add	r7, r7, #128	; 0x80
   205e4:	add	r5, r5, #32
   205e8:	add	r6, r6, #32
   205ec:	ldr	r0, [r0, sl, lsl #3]
   205f0:	mov	sl, #0
   205f4:	ldr	r8, [r0, r9, lsl #2]
   205f8:	tst	r8, r4, lsl sl
   205fc:	beq	20644 <__assert_fail@plt+0xe7b0>
   20600:	mov	r0, r5
   20604:	cmp	r3, #0
   20608:	strb	r4, [r0, sl]!
   2060c:	beq	20644 <__assert_fail@plt+0xe7b0>
   20610:	add	r1, r6, sl
   20614:	add	r1, r1, #128	; 0x80
   20618:	lsr	r1, r1, #7
   2061c:	cmp	r1, #2
   20620:	bhi	20640 <__assert_fail@plt+0xe7ac>
   20624:	bl	11c18 <__ctype_tolower_loc@plt>
   20628:	ldr	r0, [r0]
   2062c:	ldr	r1, [sp, #36]	; 0x24
   20630:	ldr	r3, [sp, #32]
   20634:	add	r0, r0, r7
   20638:	ldr	r0, [r0, sl, lsl #2]
   2063c:	add	r0, r1, r0
   20640:	strb	r4, [r0]
   20644:	add	sl, sl, #1
   20648:	cmp	sl, #32
   2064c:	bne	205f8 <__assert_fail@plt+0xe764>
   20650:	ldr	r8, [sp, #24]
   20654:	ldr	sl, [sp, #28]
   20658:	add	r9, r9, #1
   2065c:	cmp	r9, #8
   20660:	bne	205dc <__assert_fail@plt+0xe748>
   20664:	b	207b4 <__assert_fail@plt+0xe920>
   20668:	ldr	r6, [r0, sl, lsl #3]
   2066c:	ldr	r0, [r8, #92]	; 0x5c
   20670:	cmp	r0, #2
   20674:	blt	206ec <__assert_fail@plt+0xe858>
   20678:	ldr	r0, [r6, #36]	; 0x24
   2067c:	cmp	r0, #0
   20680:	bne	20698 <__assert_fail@plt+0xe804>
   20684:	ldrb	r0, [r6, #16]
   20688:	tst	r0, #1
   2068c:	ldreq	r0, [r6, #32]
   20690:	cmpeq	r0, #0
   20694:	beq	206ec <__assert_fail@plt+0xe858>
   20698:	mov	r6, #0
   2069c:	add	r5, sp, #40	; 0x28
   206a0:	sub	r7, fp, #48	; 0x30
   206a4:	strb	r6, [fp, #-48]	; 0xffffffd0
   206a8:	mov	r0, #0
   206ac:	mov	r1, r7
   206b0:	mov	r2, #1
   206b4:	mov	r3, r5
   206b8:	str	r6, [sp, #44]	; 0x2c
   206bc:	str	r6, [sp, #40]	; 0x28
   206c0:	bl	34cac <__assert_fail@plt+0x22e18>
   206c4:	cmn	r0, #2
   206c8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   206cc:	ldreq	r0, [sp, #36]	; 0x24
   206d0:	strbeq	r4, [r0, r1]
   206d4:	add	r0, r1, #1
   206d8:	tst	r0, #255	; 0xff
   206dc:	strb	r0, [fp, #-48]	; 0xffffffd0
   206e0:	bne	206a8 <__assert_fail@plt+0xe814>
   206e4:	ldr	r3, [sp, #32]
   206e8:	b	207b4 <__assert_fail@plt+0xe920>
   206ec:	ldr	r0, [r6, #20]
   206f0:	cmp	r0, #1
   206f4:	blt	207b4 <__assert_fail@plt+0xe920>
   206f8:	mov	r9, #0
   206fc:	mov	r0, #0
   20700:	add	r7, sp, #40	; 0x28
   20704:	sub	r2, fp, #48	; 0x30
   20708:	str	r0, [fp, #-44]	; 0xffffffd4
   2070c:	str	r0, [fp, #-48]	; 0xffffffd0
   20710:	ldr	r0, [r6]
   20714:	ldr	r1, [r0, r9, lsl #2]
   20718:	mov	r0, r7
   2071c:	bl	119e4 <wcrtomb@plt>
   20720:	ldr	r3, [sp, #32]
   20724:	cmn	r0, #1
   20728:	beq	20758 <__assert_fail@plt+0xe8c4>
   2072c:	ldrb	r5, [sp, #40]	; 0x28
   20730:	ldr	r0, [sp, #36]	; 0x24
   20734:	cmp	r3, #0
   20738:	strb	r4, [r0, r5]
   2073c:	beq	20758 <__assert_fail@plt+0xe8c4>
   20740:	bl	11c18 <__ctype_tolower_loc@plt>
   20744:	ldr	r0, [r0]
   20748:	ldr	r3, [sp, #32]
   2074c:	ldr	r1, [sp, #36]	; 0x24
   20750:	ldr	r0, [r0, r5, lsl #2]
   20754:	strb	r4, [r1, r0]
   20758:	ldr	r0, [sp, #20]
   2075c:	ldrb	r0, [r0, #14]
   20760:	tst	r0, #64	; 0x40
   20764:	beq	207a4 <__assert_fail@plt+0xe910>
   20768:	ldr	r0, [r8, #92]	; 0x5c
   2076c:	cmp	r0, #2
   20770:	blt	207a4 <__assert_fail@plt+0xe910>
   20774:	ldr	r0, [r6]
   20778:	ldr	r0, [r0, r9, lsl #2]
   2077c:	bl	11ab0 <towlower@plt>
   20780:	mov	r1, r0
   20784:	mov	r0, r7
   20788:	sub	r2, fp, #48	; 0x30
   2078c:	bl	119e4 <wcrtomb@plt>
   20790:	cmn	r0, #1
   20794:	ldr	r3, [sp, #32]
   20798:	ldrbne	r0, [sp, #40]	; 0x28
   2079c:	ldrne	r1, [sp, #36]	; 0x24
   207a0:	strbne	r4, [r1, r0]
   207a4:	ldr	r0, [r6, #20]
   207a8:	add	r9, r9, #1
   207ac:	cmp	r9, r0
   207b0:	blt	206fc <__assert_fail@plt+0xe868>
   207b4:	ldr	r1, [sp, #12]
   207b8:	ldr	r2, [sp, #16]
   207bc:	ldr	r0, [r1, #8]
   207c0:	add	r2, r2, #1
   207c4:	cmp	r2, r0
   207c8:	blt	2046c <__assert_fail@plt+0xe5d8>
   207cc:	sub	sp, fp, #28
   207d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207d4:	ldr	r0, [sp, #36]	; 0x24
   207d8:	mov	r1, #1
   207dc:	mov	r2, #256	; 0x100
   207e0:	bl	11cd8 <memset@plt>
   207e4:	cmp	r5, #2
   207e8:	ldreq	r1, [sp, #20]
   207ec:	ldrbeq	r0, [r1, #28]
   207f0:	orreq	r0, r0, #1
   207f4:	strbeq	r0, [r1, #28]
   207f8:	sub	sp, fp, #28
   207fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20800:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20804:	add	fp, sp, #24
   20808:	mov	r4, r0
   2080c:	mov	r0, #0
   20810:	mov	r6, r2
   20814:	mov	r8, r1
   20818:	str	r0, [r4]
   2081c:	str	r0, [r4, #4]
   20820:	str	r0, [r4, #8]
   20824:	mov	r0, #256	; 0x100
   20828:	bl	33c98 <__assert_fail@plt+0x21e04>
   2082c:	cmp	r0, #0
   20830:	str	r0, [r4, #16]
   20834:	beq	208e4 <__assert_fail@plt+0xea50>
   20838:	movw	r0, #45820	; 0xb2fc
   2083c:	tst	r6, #1
   20840:	and	r1, r6, #2
   20844:	movt	r0, #3
   20848:	movweq	r0, #710	; 0x2c6
   2084c:	movteq	r0, #257	; 0x101
   20850:	tst	r6, #4
   20854:	orr	r5, r0, r1, lsl #21
   20858:	bne	2086c <__assert_fail@plt+0xe9d8>
   2085c:	ldrb	r0, [r4, #28]
   20860:	and	r0, r0, #127	; 0x7f
   20864:	strb	r0, [r4, #28]
   20868:	b	2088c <__assert_fail@plt+0xe9f8>
   2086c:	ldrb	r0, [r4, #28]
   20870:	mvn	r1, #127	; 0x7f
   20874:	orr	r0, r0, r1
   20878:	movw	r1, #45758	; 0xb2be
   2087c:	movt	r1, #323	; 0x143
   20880:	strb	r0, [r4, #28]
   20884:	and	r1, r5, r1
   20888:	orr	r5, r1, #256	; 0x100
   2088c:	and	r1, r6, #8
   20890:	and	r0, r0, #239	; 0xef
   20894:	mov	r7, #0
   20898:	orr	r0, r0, r1, lsl #1
   2089c:	str	r7, [r4, #20]
   208a0:	strb	r0, [r4, #28]
   208a4:	mov	r0, r8
   208a8:	bl	11c78 <strlen@plt>
   208ac:	mov	r2, r0
   208b0:	mov	r0, r4
   208b4:	mov	r1, r8
   208b8:	mov	r3, r5
   208bc:	bl	1eea0 <__assert_fail@plt+0xd00c>
   208c0:	mov	r5, r0
   208c4:	cmp	r0, #16
   208c8:	movweq	r5, #8
   208cc:	cmp	r5, #0
   208d0:	bne	208f0 <__assert_fail@plt+0xea5c>
   208d4:	mov	r0, r4
   208d8:	bl	20364 <__assert_fail@plt+0xe4d0>
   208dc:	mov	r0, r7
   208e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   208e4:	mov	r7, #12
   208e8:	mov	r0, r7
   208ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   208f0:	ldr	r0, [r4, #16]
   208f4:	bl	17754 <__assert_fail@plt+0x58c0>
   208f8:	mov	r0, r5
   208fc:	str	r7, [r4, #16]
   20900:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20904:	push	{r4, r5, r6, r7, fp, lr}
   20908:	add	fp, sp, #16
   2090c:	cmp	r0, #17
   20910:	bcs	20984 <__assert_fail@plt+0xeaf0>
   20914:	movw	r1, #29216	; 0x7220
   20918:	mov	r4, r2
   2091c:	mov	r2, #5
   20920:	mov	r5, r3
   20924:	movt	r1, #3
   20928:	ldr	r0, [r1, r0, lsl #2]
   2092c:	movw	r1, #28832	; 0x70a0
   20930:	movt	r1, #3
   20934:	add	r1, r1, r0
   20938:	mov	r0, #0
   2093c:	bl	11ad4 <dcgettext@plt>
   20940:	mov	r6, r0
   20944:	bl	11c78 <strlen@plt>
   20948:	add	r7, r0, #1
   2094c:	cmp	r5, #0
   20950:	beq	2096c <__assert_fail@plt+0xead8>
   20954:	cmp	r7, r5
   20958:	mov	r2, r7
   2095c:	bhi	20974 <__assert_fail@plt+0xeae0>
   20960:	mov	r0, r4
   20964:	mov	r1, r6
   20968:	bl	11a8c <memcpy@plt>
   2096c:	mov	r0, r7
   20970:	pop	{r4, r5, r6, r7, fp, pc}
   20974:	sub	r2, r5, #1
   20978:	mov	r0, #0
   2097c:	strb	r0, [r4, r2]
   20980:	b	20960 <__assert_fail@plt+0xeacc>
   20984:	bl	11e58 <abort@plt>
   20988:	push	{r4, r5, fp, lr}
   2098c:	add	fp, sp, #8
   20990:	ldr	r5, [r0]
   20994:	mov	r4, r0
   20998:	cmp	r5, #0
   2099c:	beq	209c8 <__assert_fail@plt+0xeb34>
   209a0:	movw	r0, #0
   209a4:	movw	r1, #0
   209a8:	movt	r0, #0
   209ac:	movt	r1, #0
   209b0:	orrs	r0, r1, r0
   209b4:	beq	209c0 <__assert_fail@plt+0xeb2c>
   209b8:	add	r0, r5, #136	; 0x88
   209bc:	bl	11a20 <pthread_mutex_destroy@plt>
   209c0:	mov	r0, r5
   209c4:	bl	209f0 <__assert_fail@plt+0xeb5c>
   209c8:	mov	r5, #0
   209cc:	str	r5, [r4]
   209d0:	str	r5, [r4, #4]
   209d4:	ldr	r0, [r4, #16]
   209d8:	bl	17754 <__assert_fail@plt+0x58c0>
   209dc:	str	r5, [r4, #16]
   209e0:	ldr	r0, [r4, #20]
   209e4:	bl	17754 <__assert_fail@plt+0x58c0>
   209e8:	str	r5, [r4, #20]
   209ec:	pop	{r4, r5, fp, pc}
   209f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209f4:	add	fp, sp, #28
   209f8:	sub	sp, sp, #4
   209fc:	mov	sl, r0
   20a00:	ldr	r0, [r0]
   20a04:	cmp	r0, #0
   20a08:	ldrne	r1, [sl, #8]
   20a0c:	cmpne	r1, #0
   20a10:	beq	20a88 <__assert_fail@plt+0xebf4>
   20a14:	movw	r7, #255	; 0xff
   20a18:	mov	r6, #0
   20a1c:	movt	r7, #4
   20a20:	b	20a28 <__assert_fail@plt+0xeb94>
   20a24:	ldr	r0, [sl]
   20a28:	add	r1, r0, r6, lsl #3
   20a2c:	ldr	r1, [r1, #4]
   20a30:	and	r1, r1, r7
   20a34:	cmp	r1, #3
   20a38:	beq	20a70 <__assert_fail@plt+0xebdc>
   20a3c:	cmp	r1, #6
   20a40:	bne	20a78 <__assert_fail@plt+0xebe4>
   20a44:	ldr	r5, [r0, r6, lsl #3]
   20a48:	ldr	r0, [r5]
   20a4c:	bl	17754 <__assert_fail@plt+0x58c0>
   20a50:	ldr	r0, [r5, #4]
   20a54:	bl	17754 <__assert_fail@plt+0x58c0>
   20a58:	ldr	r0, [r5, #8]
   20a5c:	bl	17754 <__assert_fail@plt+0x58c0>
   20a60:	ldr	r0, [r5, #12]
   20a64:	bl	17754 <__assert_fail@plt+0x58c0>
   20a68:	mov	r0, r5
   20a6c:	b	20a74 <__assert_fail@plt+0xebe0>
   20a70:	ldr	r0, [r0, r6, lsl #3]
   20a74:	bl	17754 <__assert_fail@plt+0x58c0>
   20a78:	ldr	r0, [sl, #8]
   20a7c:	add	r6, r6, #1
   20a80:	cmp	r6, r0
   20a84:	bcc	20a24 <__assert_fail@plt+0xeb90>
   20a88:	ldr	r0, [sl, #12]
   20a8c:	bl	17754 <__assert_fail@plt+0x58c0>
   20a90:	ldr	r0, [sl, #8]
   20a94:	cmp	r0, #0
   20a98:	beq	20b04 <__assert_fail@plt+0xec70>
   20a9c:	add	r7, sl, #20
   20aa0:	add	r8, sl, #28
   20aa4:	add	r9, sl, #24
   20aa8:	mov	r5, #0
   20aac:	mov	r6, #8
   20ab0:	ldr	r0, [r9]
   20ab4:	cmp	r0, #0
   20ab8:	beq	20ac4 <__assert_fail@plt+0xec30>
   20abc:	ldr	r0, [r0, r6]
   20ac0:	bl	17754 <__assert_fail@plt+0x58c0>
   20ac4:	ldr	r0, [r8]
   20ac8:	cmp	r0, #0
   20acc:	beq	20ad8 <__assert_fail@plt+0xec44>
   20ad0:	ldr	r0, [r0, r6]
   20ad4:	bl	17754 <__assert_fail@plt+0x58c0>
   20ad8:	ldr	r0, [r7]
   20adc:	cmp	r0, #0
   20ae0:	beq	20aec <__assert_fail@plt+0xec58>
   20ae4:	ldr	r0, [r0, r6]
   20ae8:	bl	17754 <__assert_fail@plt+0x58c0>
   20aec:	ldr	r0, [sl, #8]
   20af0:	add	r5, r5, #1
   20af4:	add	r6, r6, #12
   20af8:	cmp	r5, r0
   20afc:	bcc	20ab0 <__assert_fail@plt+0xec1c>
   20b00:	b	20b10 <__assert_fail@plt+0xec7c>
   20b04:	add	r8, sl, #28
   20b08:	add	r9, sl, #24
   20b0c:	add	r7, sl, #20
   20b10:	ldr	r0, [r7]
   20b14:	bl	17754 <__assert_fail@plt+0x58c0>
   20b18:	ldr	r0, [r9]
   20b1c:	bl	17754 <__assert_fail@plt+0x58c0>
   20b20:	ldr	r0, [r8]
   20b24:	bl	17754 <__assert_fail@plt+0x58c0>
   20b28:	ldr	r0, [sl]
   20b2c:	bl	17754 <__assert_fail@plt+0x58c0>
   20b30:	ldr	r5, [sl, #32]
   20b34:	cmp	r5, #0
   20b38:	beq	20b98 <__assert_fail@plt+0xed04>
   20b3c:	mov	r6, #0
   20b40:	b	20b4c <__assert_fail@plt+0xecb8>
   20b44:	ldr	r5, [sl, #32]
   20b48:	add	r6, r6, #1
   20b4c:	add	r0, r6, r6, lsl #1
   20b50:	ldr	r0, [r5, r0, lsl #2]!
   20b54:	add	r7, r5, #8
   20b58:	cmp	r0, #1
   20b5c:	blt	20b80 <__assert_fail@plt+0xecec>
   20b60:	mov	r4, #0
   20b64:	ldr	r0, [r7]
   20b68:	ldr	r0, [r0, r4, lsl #2]
   20b6c:	bl	23f4c <__assert_fail@plt+0x120b8>
   20b70:	ldr	r0, [r5]
   20b74:	add	r4, r4, #1
   20b78:	cmp	r4, r0
   20b7c:	blt	20b64 <__assert_fail@plt+0xecd0>
   20b80:	ldr	r0, [r7]
   20b84:	bl	17754 <__assert_fail@plt+0x58c0>
   20b88:	ldr	r0, [sl, #68]	; 0x44
   20b8c:	cmp	r6, r0
   20b90:	bcc	20b44 <__assert_fail@plt+0xecb0>
   20b94:	ldr	r5, [sl, #32]
   20b98:	mov	r0, r5
   20b9c:	bl	17754 <__assert_fail@plt+0x58c0>
   20ba0:	ldr	r0, [sl, #60]	; 0x3c
   20ba4:	movw	r1, #29284	; 0x7264
   20ba8:	movt	r1, #3
   20bac:	cmp	r0, r1
   20bb0:	beq	20bb8 <__assert_fail@plt+0xed24>
   20bb4:	bl	17754 <__assert_fail@plt+0x58c0>
   20bb8:	ldr	r0, [sl, #132]	; 0x84
   20bbc:	bl	17754 <__assert_fail@plt+0x58c0>
   20bc0:	mov	r0, sl
   20bc4:	sub	sp, fp, #28
   20bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bcc:	b	17754 <__assert_fail@plt+0x58c0>
   20bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bd4:	add	fp, sp, #28
   20bd8:	sub	sp, sp, #28
   20bdc:	ldr	sl, [fp, #8]
   20be0:	mov	r7, #2
   20be4:	cmp	sl, #7
   20be8:	bhi	20cbc <__assert_fail@plt+0xee28>
   20bec:	mov	r5, r0
   20bf0:	ldr	r0, [r0]
   20bf4:	mov	r6, r3
   20bf8:	mov	r9, r2
   20bfc:	mov	r4, r1
   20c00:	tst	sl, #4
   20c04:	str	r0, [sp, #24]
   20c08:	bne	20c20 <__assert_fail@plt+0xed8c>
   20c0c:	mov	r0, r4
   20c10:	bl	11c78 <strlen@plt>
   20c14:	mov	r7, r0
   20c18:	mov	r8, #0
   20c1c:	b	20c28 <__assert_fail@plt+0xed94>
   20c20:	ldr	r8, [r6]
   20c24:	ldr	r7, [r6, #4]
   20c28:	movw	r0, #0
   20c2c:	movw	r1, #0
   20c30:	movt	r0, #0
   20c34:	movt	r1, #0
   20c38:	orrs	r0, r1, r0
   20c3c:	str	r0, [sp, #20]
   20c40:	beq	20c50 <__assert_fail@plt+0xedbc>
   20c44:	ldr	r0, [sp, #24]
   20c48:	add	r0, r0, #136	; 0x88
   20c4c:	bl	11a68 <pthread_mutex_lock@plt>
   20c50:	ldrb	r0, [r5, #28]
   20c54:	tst	r0, #16
   20c58:	bne	20c6c <__assert_fail@plt+0xedd8>
   20c5c:	str	r7, [sp]
   20c60:	stmib	sp, {r7, r9}
   20c64:	str	r6, [sp, #12]
   20c68:	b	20c80 <__assert_fail@plt+0xedec>
   20c6c:	mov	r0, #0
   20c70:	str	r7, [sp]
   20c74:	str	r7, [sp, #4]
   20c78:	str	r0, [sp, #8]
   20c7c:	str	r0, [sp, #12]
   20c80:	mov	r0, r5
   20c84:	mov	r1, r4
   20c88:	mov	r2, r7
   20c8c:	mov	r3, r8
   20c90:	str	sl, [sp, #16]
   20c94:	bl	20cc8 <__assert_fail@plt+0xee34>
   20c98:	mov	r7, r0
   20c9c:	ldr	r0, [sp, #20]
   20ca0:	cmp	r0, #0
   20ca4:	beq	20cb4 <__assert_fail@plt+0xee20>
   20ca8:	ldr	r0, [sp, #24]
   20cac:	add	r0, r0, #136	; 0x88
   20cb0:	bl	1199c <pthread_mutex_unlock@plt>
   20cb4:	cmp	r7, #0
   20cb8:	movwne	r7, #1
   20cbc:	mov	r0, r7
   20cc0:	sub	sp, fp, #28
   20cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ccc:	add	fp, sp, #28
   20cd0:	sub	sp, sp, #412	; 0x19c
   20cd4:	ldr	r8, [r0]
   20cd8:	str	r2, [sp, #68]	; 0x44
   20cdc:	str	r1, [sp, #100]	; 0x64
   20ce0:	mov	sl, r0
   20ce4:	add	r0, sp, #104	; 0x68
   20ce8:	mov	r1, #0
   20cec:	mov	r2, #136	; 0x88
   20cf0:	mov	r6, r3
   20cf4:	mov	r4, #0
   20cf8:	bl	11cd8 <memset@plt>
   20cfc:	str	r8, [sp, #188]	; 0xbc
   20d00:	ldr	r0, [fp, #8]
   20d04:	mov	ip, #0
   20d08:	ldr	r1, [sl, #16]
   20d0c:	cmp	r1, #0
   20d10:	beq	20d2c <__assert_fail@plt+0xee98>
   20d14:	ldrb	r2, [sl, #28]
   20d18:	and	r2, r2, #9
   20d1c:	cmp	r2, #8
   20d20:	movne	r1, #0
   20d24:	subs	ip, r6, r0
   20d28:	movne	ip, r1
   20d2c:	ldr	r2, [sl, #24]
   20d30:	ldr	r7, [fp, #16]
   20d34:	ldr	r1, [sl, #8]
   20d38:	mov	r9, #1
   20d3c:	mvn	r3, r2
   20d40:	cmp	r2, r7
   20d44:	addcc	r4, r3, r7
   20d48:	cmp	r1, #0
   20d4c:	str	r4, [sp, #32]
   20d50:	beq	23720 <__assert_fail@plt+0x1188c>
   20d54:	ldr	r1, [r8, #36]	; 0x24
   20d58:	cmp	r1, #0
   20d5c:	ldrne	r2, [r8, #40]	; 0x28
   20d60:	cmpne	r2, #0
   20d64:	beq	23720 <__assert_fail@plt+0x1188c>
   20d68:	ldr	r3, [r8, #44]	; 0x2c
   20d6c:	cmp	r3, #0
   20d70:	ldrne	r7, [r8, #48]	; 0x30
   20d74:	cmpne	r7, #0
   20d78:	beq	23720 <__assert_fail@plt+0x1188c>
   20d7c:	ldr	r1, [r1, #8]
   20d80:	ldr	r7, [sl, #20]
   20d84:	cmp	r1, #0
   20d88:	bne	20d98 <__assert_fail@plt+0xef04>
   20d8c:	ldr	r1, [r2, #8]
   20d90:	cmp	r1, #0
   20d94:	beq	22920 <__assert_fail@plt+0x10a8c>
   20d98:	str	r0, [sp, #76]	; 0x4c
   20d9c:	ldr	r0, [sp, #32]
   20da0:	ldr	r1, [fp, #16]
   20da4:	subs	lr, r1, r0
   20da8:	mov	r0, #1
   20dac:	str	r0, [sp, #44]	; 0x2c
   20db0:	bne	20dc4 <__assert_fail@plt+0xef30>
   20db4:	ldr	r0, [r8, #76]	; 0x4c
   20db8:	cmp	r0, #0
   20dbc:	movwne	r0, #1
   20dc0:	str	r0, [sp, #44]	; 0x2c
   20dc4:	ldr	r0, [sl, #12]
   20dc8:	ldr	r2, [r8, #92]	; 0x5c
   20dcc:	ldr	r3, [sp, #100]	; 0x64
   20dd0:	ldr	r1, [r8, #8]
   20dd4:	str	r7, [sp, #168]	; 0xa8
   20dd8:	str	sl, [sp, #80]	; 0x50
   20ddc:	str	r3, [sp, #104]	; 0x68
   20de0:	str	r2, [sp, #184]	; 0xb8
   20de4:	ubfx	r3, r0, #22, #1
   20de8:	and	r0, r0, #4194304	; 0x400000
   20dec:	ldr	r4, [sp, #68]	; 0x44
   20df0:	add	r5, r1, #1
   20df4:	orrs	sl, r7, r0
   20df8:	strb	r3, [sp, #176]	; 0xb0
   20dfc:	add	r3, sp, #104	; 0x68
   20e00:	movwne	sl, #1
   20e04:	add	r3, r3, #44	; 0x2c
   20e08:	cmp	r2, r5
   20e0c:	strb	sl, [sp, #179]	; 0xb3
   20e10:	movgt	r5, r2
   20e14:	ldrb	r0, [r8, #88]	; 0x58
   20e18:	vdup.32	q8, r4
   20e1c:	vst1.32	{d16-d17}, [r3]
   20e20:	ubfx	r3, r0, #3, #1
   20e24:	strb	r3, [sp, #178]	; 0xb2
   20e28:	ubfx	r0, r0, #2, #1
   20e2c:	str	r8, [sp, #96]	; 0x60
   20e30:	str	ip, [sp, #88]	; 0x58
   20e34:	str	r7, [sp, #84]	; 0x54
   20e38:	strb	r0, [sp, #177]	; 0xb1
   20e3c:	add	r0, r4, #1
   20e40:	cmp	r0, r5
   20e44:	movlt	r5, r0
   20e48:	cmp	r2, #2
   20e4c:	blt	20e88 <__assert_fail@plt+0xeff4>
   20e50:	mov	r9, #12
   20e54:	cmn	r5, #-1073741823	; 0xc0000001
   20e58:	bhi	236cc <__assert_fail@plt+0x11838>
   20e5c:	lsl	r1, r5, #2
   20e60:	mov	r0, #0
   20e64:	mov	r4, lr
   20e68:	bl	33cc8 <__assert_fail@plt+0x21e34>
   20e6c:	ldr	r7, [sp, #84]	; 0x54
   20e70:	ldr	ip, [sp, #88]	; 0x58
   20e74:	cmp	r0, #0
   20e78:	beq	236cc <__assert_fail@plt+0x11838>
   20e7c:	ldr	r8, [sp, #96]	; 0x60
   20e80:	mov	lr, r4
   20e84:	str	r0, [sp, #112]	; 0x70
   20e88:	cmp	sl, #0
   20e8c:	ldr	sl, [sp, #80]	; 0x50
   20e90:	mov	r4, #1
   20e94:	beq	20ec4 <__assert_fail@plt+0xf030>
   20e98:	mov	r0, #0
   20e9c:	mov	r1, r5
   20ea0:	mov	r9, lr
   20ea4:	mov	r4, #0
   20ea8:	bl	33cc8 <__assert_fail@plt+0x21e34>
   20eac:	cmp	r0, #0
   20eb0:	beq	234f8 <__assert_fail@plt+0x11664>
   20eb4:	ldr	ip, [sp, #88]	; 0x58
   20eb8:	ldr	r7, [sp, #84]	; 0x54
   20ebc:	mov	lr, r9
   20ec0:	str	r0, [sp, #108]	; 0x6c
   20ec4:	add	r1, r8, #96	; 0x60
   20ec8:	str	r5, [sp, #140]	; 0x8c
   20ecc:	ldr	r0, [fp, #12]
   20ed0:	cmp	r4, #0
   20ed4:	str	r1, [sp, #172]	; 0xac
   20ed8:	ldrb	r1, [r8, #88]	; 0x58
   20edc:	ubfx	r1, r1, #4, #1
   20ee0:	strb	r1, [sp, #182]	; 0xb6
   20ee4:	mov	r1, #0
   20ee8:	beq	20f04 <__assert_fail@plt+0xf070>
   20eec:	ldr	r1, [sp, #100]	; 0x64
   20ef0:	str	r1, [sp, #108]	; 0x6c
   20ef4:	ldr	r1, [r8, #92]	; 0x5c
   20ef8:	cmp	r1, #1
   20efc:	ldr	r1, [sp, #68]	; 0x44
   20f00:	movwgt	r1, #0
   20f04:	str	r1, [sp, #136]	; 0x88
   20f08:	str	r1, [sp, #132]	; 0x84
   20f0c:	str	r0, [sp, #160]	; 0xa0
   20f10:	str	r0, [sp, #156]	; 0x9c
   20f14:	str	lr, [sp, #92]	; 0x5c
   20f18:	ldrb	r0, [sl, #28]
   20f1c:	lsr	r0, r0, #7
   20f20:	strb	r0, [sp, #181]	; 0xb5
   20f24:	mvn	r0, #0
   20f28:	ldr	r8, [r8, #76]	; 0x4c
   20f2c:	str	r0, [sp, #196]	; 0xc4
   20f30:	ldr	r0, [fp, #24]
   20f34:	lsl	sl, r8, #1
   20f38:	cmp	r8, #1
   20f3c:	str	r0, [sp, #192]	; 0xc0
   20f40:	blt	20f98 <__assert_fail@plt+0xf104>
   20f44:	movw	r0, #43690	; 0xaaaa
   20f48:	mov	r9, #12
   20f4c:	movt	r0, #2730	; 0xaaa
   20f50:	cmp	sl, r0
   20f54:	bhi	236cc <__assert_fail@plt+0x11838>
   20f58:	add	r0, r8, r8, lsl #1
   20f5c:	mov	r4, r5
   20f60:	lsl	r0, r0, #4
   20f64:	bl	33c98 <__assert_fail@plt+0x21e04>
   20f68:	mov	r5, r0
   20f6c:	str	r0, [sp, #220]	; 0xdc
   20f70:	lsl	r0, r8, #3
   20f74:	bl	33c98 <__assert_fail@plt+0x21e04>
   20f78:	cmp	r0, #0
   20f7c:	str	r0, [sp, #236]	; 0xec
   20f80:	beq	236cc <__assert_fail@plt+0x11838>
   20f84:	add	lr, sp, #84	; 0x54
   20f88:	cmp	r5, #0
   20f8c:	mov	r5, r4
   20f90:	ldm	lr, {r7, ip, lr}
   20f94:	beq	236cc <__assert_fail@plt+0x11838>
   20f98:	mov	r0, #1
   20f9c:	cmp	lr, #1
   20fa0:	str	r0, [sp, #224]	; 0xe0
   20fa4:	str	sl, [sp, #216]	; 0xd8
   20fa8:	str	sl, [sp, #232]	; 0xe8
   20fac:	bhi	20fc0 <__assert_fail@plt+0xf12c>
   20fb0:	ldr	r0, [sp, #96]	; 0x60
   20fb4:	ldrb	r0, [r0, #88]	; 0x58
   20fb8:	tst	r0, #2
   20fbc:	beq	20fec <__assert_fail@plt+0xf158>
   20fc0:	mov	r9, #12
   20fc4:	cmn	r5, #-1073741822	; 0xc0000002
   20fc8:	bhi	236cc <__assert_fail@plt+0x11838>
   20fcc:	mov	r0, #4
   20fd0:	add	r0, r0, r5, lsl #2
   20fd4:	bl	33c98 <__assert_fail@plt+0x21e04>
   20fd8:	ldr	r7, [sp, #84]	; 0x54
   20fdc:	ldr	ip, [sp, #88]	; 0x58
   20fe0:	cmp	r0, #0
   20fe4:	str	r0, [sp, #204]	; 0xcc
   20fe8:	beq	236cc <__assert_fail@plt+0x11838>
   20fec:	ldr	r1, [fp, #24]
   20ff0:	ldr	r2, [sp, #76]	; 0x4c
   20ff4:	str	r6, [fp, #-200]	; 0xffffff38
   20ff8:	mov	r8, #1
   20ffc:	mov	r5, r6
   21000:	mov	r0, #4
   21004:	tst	r1, #1
   21008:	mov	r1, #4
   2100c:	mov	r4, r2
   21010:	movweq	r1, #6
   21014:	cmp	r2, r6
   21018:	str	r1, [sp, #164]	; 0xa4
   2101c:	ldr	r1, [sp, #96]	; 0x60
   21020:	mvnlt	r8, #0
   21024:	movlt	r4, r6
   21028:	movlt	r5, r2
   2102c:	cmp	ip, #0
   21030:	ldr	r1, [r1, #92]	; 0x5c
   21034:	str	r1, [sp, #60]	; 0x3c
   21038:	beq	2107c <__assert_fail@plt+0xf1e8>
   2103c:	cmp	r1, #1
   21040:	beq	21060 <__assert_fail@plt+0xf1cc>
   21044:	ldr	r0, [sp, #80]	; 0x50
   21048:	ldr	r0, [r0, #12]
   2104c:	and	r0, r0, #4194304	; 0x400000
   21050:	orr	r0, r7, r0
   21054:	clz	r0, r0
   21058:	lsr	r0, r0, #5
   2105c:	lsl	r0, r0, #2
   21060:	cmp	r7, #0
   21064:	mov	r1, r7
   21068:	movwne	r1, #1
   2106c:	cmp	r2, r6
   21070:	orrge	r1, r1, #2
   21074:	orr	r0, r1, r0
   21078:	b	21080 <__assert_fail@plt+0xf1ec>
   2107c:	mov	r0, #8
   21080:	add	r1, sp, #104	; 0x68
   21084:	cmp	r2, r6
   21088:	sub	r0, r0, #4
   2108c:	str	r4, [sp, #52]	; 0x34
   21090:	str	r5, [sp, #48]	; 0x30
   21094:	str	r8, [sp, #64]	; 0x40
   21098:	add	r1, r1, #32
   2109c:	str	r0, [sp, #76]	; 0x4c
   210a0:	str	r1, [sp, #24]
   210a4:	sub	r1, fp, #200	; 0xc8
   210a8:	movwlt	r1, #0
   210ac:	cmp	r1, #0
   210b0:	str	r1, [sp, #36]	; 0x24
   210b4:	movwne	r1, #1
   210b8:	str	r1, [sp, #40]	; 0x28
   210bc:	sub	r1, fp, #192	; 0xc0
   210c0:	add	r1, r1, #16
   210c4:	str	r1, [sp, #28]
   210c8:	b	21798 <__assert_fail@plt+0xf904>
   210cc:	mov	r1, #0
   210d0:	sub	r0, fp, #188	; 0xbc
   210d4:	str	r8, [fp, #-192]	; 0xffffff40
   210d8:	stm	r0, {r1, r6, sl}
   210dc:	ldr	r0, [sp, #28]
   210e0:	str	r1, [r0]
   210e4:	str	r1, [r0, #4]
   210e8:	str	r1, [r0, #8]
   210ec:	add	r0, sp, #104	; 0x68
   210f0:	sub	r1, fp, #192	; 0xc0
   210f4:	bl	2e840 <__assert_fail@plt+0x1c9ac>
   210f8:	mov	r9, r0
   210fc:	mov	r0, #0
   21100:	bl	17754 <__assert_fail@plt+0x58c0>
   21104:	cmp	r9, #0
   21108:	bne	21208 <__assert_fail@plt+0xf374>
   2110c:	ldr	r0, [r8]
   21110:	mov	r4, #0
   21114:	cmp	r0, #0
   21118:	beq	215c8 <__assert_fail@plt+0xf734>
   2111c:	b	22748 <__assert_fail@plt+0x108b4>
   21120:	mov	r9, r0
   21124:	b	22738 <__assert_fail@plt+0x108a4>
   21128:	sxtb	r0, r0
   2112c:	cmn	r0, #1
   21130:	ble	21188 <__assert_fail@plt+0xf2f4>
   21134:	ldr	r0, [sp, #44]	; 0x2c
   21138:	mov	lr, #1
   2113c:	mov	r9, sl
   21140:	cmp	r0, #0
   21144:	bne	21b14 <__assert_fail@plt+0xfc80>
   21148:	mov	r9, sl
   2114c:	ldr	r8, [sp, #64]	; 0x40
   21150:	mov	sl, r5
   21154:	cmn	r9, #1
   21158:	beq	215dc <__assert_fail@plt+0xf748>
   2115c:	b	22420 <__assert_fail@plt+0x1058c>
   21160:	ldr	r0, [r8, #8]
   21164:	cmp	r0, #1
   21168:	blt	2170c <__assert_fail@plt+0xf878>
   2116c:	ldr	r4, [sp, #188]	; 0xbc
   21170:	mov	r9, #0
   21174:	b	21678 <__assert_fail@plt+0xf7e4>
   21178:	ldr	r0, [sp, #192]	; 0xc0
   2117c:	and	r0, r0, #2
   21180:	eor	r3, r0, #10
   21184:	b	224a0 <__assert_fail@plt+0x1060c>
   21188:	cmn	sl, #1
   2118c:	ble	211cc <__assert_fail@plt+0xf338>
   21190:	ldr	r0, [sp, #152]	; 0x98
   21194:	cmp	r0, sl
   21198:	beq	21750 <__assert_fail@plt+0xf8bc>
   2119c:	ldr	r0, [sp, #184]	; 0xb8
   211a0:	cmp	r0, #2
   211a4:	blt	211d4 <__assert_fail@plt+0xf340>
   211a8:	ldr	r0, [sp, #112]	; 0x70
   211ac:	mov	r1, sl
   211b0:	ldr	r4, [r0, r1, lsl #2]
   211b4:	cmn	r4, #1
   211b8:	bne	21250 <__assert_fail@plt+0xf3bc>
   211bc:	sub	r2, r1, #1
   211c0:	cmp	r1, #0
   211c4:	mov	r1, r2
   211c8:	bgt	211b0 <__assert_fail@plt+0xf31c>
   211cc:	ldr	r3, [sp, #164]	; 0xa4
   211d0:	b	21274 <__assert_fail@plt+0xf3e0>
   211d4:	ldr	r0, [sp, #108]	; 0x6c
   211d8:	ldr	r1, [sp, #172]	; 0xac
   211dc:	mov	r3, #1
   211e0:	ldrb	r0, [r0, sl]
   211e4:	ubfx	r2, r0, #5, #3
   211e8:	ldr	r1, [r1, r2, lsl #2]
   211ec:	and	r2, r0, #31
   211f0:	tst	r1, r3, lsl r2
   211f4:	bne	21274 <__assert_fail@plt+0xf3e0>
   211f8:	mov	r3, #0
   211fc:	cmp	r0, #10
   21200:	beq	21268 <__assert_fail@plt+0xf3d4>
   21204:	b	21274 <__assert_fail@plt+0xf3e0>
   21208:	mov	r0, #0
   2120c:	str	r0, [sp, #56]	; 0x38
   21210:	b	2161c <__assert_fail@plt+0xf788>
   21214:	mov	r0, r4
   21218:	bl	11cb4 <iswalnum@plt>
   2121c:	mov	r3, #1
   21220:	cmp	r4, #95	; 0x5f
   21224:	beq	22514 <__assert_fail@plt+0x10680>
   21228:	cmp	r0, #0
   2122c:	beq	224fc <__assert_fail@plt+0x10668>
   21230:	b	22514 <__assert_fail@plt+0x10680>
   21234:	mov	r0, r5
   21238:	bl	11cb4 <iswalnum@plt>
   2123c:	cmp	r5, #95	; 0x5f
   21240:	beq	21ac8 <__assert_fail@plt+0xfc34>
   21244:	cmp	r0, #0
   21248:	beq	21a2c <__assert_fail@plt+0xfb98>
   2124c:	b	21ac8 <__assert_fail@plt+0xfc34>
   21250:	ldrb	r0, [sp, #182]	; 0xb6
   21254:	cmp	r0, #0
   21258:	bne	21760 <__assert_fail@plt+0xf8cc>
   2125c:	mov	r3, #0
   21260:	cmp	r4, #10
   21264:	bne	21274 <__assert_fail@plt+0xf3e0>
   21268:	ldrb	r3, [sp, #181]	; 0xb5
   2126c:	cmp	r3, #0
   21270:	movwne	r3, #2
   21274:	ldr	r0, [r8, #8]
   21278:	cmp	r0, #1
   2127c:	blt	21328 <__assert_fail@plt+0xf494>
   21280:	ldr	r6, [sp, #188]	; 0xbc
   21284:	str	r7, [sp, #16]
   21288:	ldr	r7, [r8, #12]
   2128c:	str	sl, [sp, #20]
   21290:	and	ip, r3, #8
   21294:	and	sl, r3, #2
   21298:	and	r3, r3, #1
   2129c:	mov	r2, #0
   212a0:	ldr	r6, [r6]
   212a4:	ldr	r1, [r7, r2, lsl #2]
   212a8:	add	r4, r6, r1, lsl #3
   212ac:	mov	lr, r1
   212b0:	ldr	r4, [r4, #4]
   212b4:	uxtb	r1, r4
   212b8:	cmp	r1, #2
   212bc:	bne	2130c <__assert_fail@plt+0xf478>
   212c0:	movw	r1, #65280	; 0xff00
   212c4:	movt	r1, #3
   212c8:	tst	r4, r1
   212cc:	beq	21330 <__assert_fail@plt+0xf49c>
   212d0:	cmp	r3, #0
   212d4:	bne	212e0 <__assert_fail@plt+0xf44c>
   212d8:	ands	r1, r4, #1024	; 0x400
   212dc:	bne	2130c <__assert_fail@plt+0xf478>
   212e0:	cmp	r3, #0
   212e4:	andsne	r1, r4, #2048	; 0x800
   212e8:	bne	2130c <__assert_fail@plt+0xf478>
   212ec:	cmp	sl, #0
   212f0:	bne	212fc <__assert_fail@plt+0xf468>
   212f4:	ands	r1, r4, #8192	; 0x2000
   212f8:	bne	2130c <__assert_fail@plt+0xf478>
   212fc:	cmp	ip, #0
   21300:	bne	21330 <__assert_fail@plt+0xf49c>
   21304:	ands	r1, r4, #32768	; 0x8000
   21308:	beq	21330 <__assert_fail@plt+0xf49c>
   2130c:	add	r2, r2, #1
   21310:	mov	lr, #0
   21314:	cmp	r2, r0
   21318:	blt	212a4 <__assert_fail@plt+0xf410>
   2131c:	ldr	sl, [sp, #20]
   21320:	ldr	r7, [sp, #16]
   21324:	b	21b14 <__assert_fail@plt+0xfc80>
   21328:	mov	lr, #0
   2132c:	b	21b14 <__assert_fail@plt+0xfc80>
   21330:	ldr	sl, [sp, #20]
   21334:	ldr	r1, [sp, #44]	; 0x2c
   21338:	clz	r0, lr
   2133c:	ldr	r7, [sp, #16]
   21340:	cmp	lr, #0
   21344:	lsr	r0, r0, #5
   21348:	movwne	lr, #1
   2134c:	mov	r9, sl
   21350:	orr	r0, r1, r0
   21354:	mvneq	r9, #0
   21358:	cmp	r0, #0
   2135c:	beq	21148 <__assert_fail@plt+0xf2b4>
   21360:	b	21b14 <__assert_fail@plt+0xfc80>
   21364:	ldr	r3, [sp, #164]	; 0xa4
   21368:	movw	r9, #65280	; 0xff00
   2136c:	movt	r9, #3
   21370:	b	214b4 <__assert_fail@plt+0xf620>
   21374:	ldr	r0, [sp, #192]	; 0xc0
   21378:	and	r0, r0, #2
   2137c:	eor	r3, r0, #10
   21380:	b	214b4 <__assert_fail@plt+0xf620>
   21384:	mov	r0, r7
   21388:	bl	11cb4 <iswalnum@plt>
   2138c:	mov	r3, #1
   21390:	cmp	r7, #95	; 0x5f
   21394:	beq	21368 <__assert_fail@plt+0xf4d4>
   21398:	movw	r9, #65280	; 0xff00
   2139c:	cmp	r0, #0
   213a0:	movt	r9, #3
   213a4:	beq	2149c <__assert_fail@plt+0xf608>
   213a8:	b	214b4 <__assert_fail@plt+0xf620>
   213ac:	ldr	r1, [r4]
   213b0:	cmp	r1, #0
   213b4:	bne	22694 <__assert_fail@plt+0x10800>
   213b8:	cmp	sl, #1
   213bc:	blt	215c8 <__assert_fail@plt+0xf734>
   213c0:	ldr	r0, [sp, #204]	; 0xcc
   213c4:	str	r4, [sp, #56]	; 0x38
   213c8:	lsl	r4, sl, #2
   213cc:	mov	r5, sl
   213d0:	sub	r0, r0, #4
   213d4:	ldr	r6, [r0, r5, lsl #2]
   213d8:	cmp	r6, #0
   213dc:	ldrbne	r1, [r6, #52]	; 0x34
   213e0:	tstne	r1, #16
   213e4:	bne	21400 <__assert_fail@plt+0xf56c>
   213e8:	sub	r5, r5, #1
   213ec:	sub	r4, r4, #4
   213f0:	add	r1, r5, #1
   213f4:	cmp	r1, #2
   213f8:	bge	213d4 <__assert_fail@plt+0xf540>
   213fc:	b	215c4 <__assert_fail@plt+0xf730>
   21400:	cmp	r5, #0
   21404:	ble	21364 <__assert_fail@plt+0xf4d0>
   21408:	ldr	r0, [sp, #152]	; 0x98
   2140c:	movw	r9, #65280	; 0xff00
   21410:	movt	r9, #3
   21414:	add	r0, r0, #1
   21418:	cmp	r0, r5
   2141c:	beq	21374 <__assert_fail@plt+0xf4e0>
   21420:	ldr	r0, [sp, #184]	; 0xb8
   21424:	cmp	r0, #2
   21428:	blt	21458 <__assert_fail@plt+0xf5c4>
   2142c:	ldr	r0, [sp, #112]	; 0x70
   21430:	mov	r1, r5
   21434:	sub	r0, r0, #4
   21438:	ldr	r7, [r0, r1, lsl #2]
   2143c:	cmn	r7, #1
   21440:	bne	21490 <__assert_fail@plt+0xf5fc>
   21444:	sub	r1, r1, #1
   21448:	cmp	r1, #0
   2144c:	bgt	21438 <__assert_fail@plt+0xf5a4>
   21450:	ldr	r3, [sp, #164]	; 0xa4
   21454:	b	214b4 <__assert_fail@plt+0xf620>
   21458:	ldr	r0, [sp, #108]	; 0x6c
   2145c:	ldr	r1, [sp, #172]	; 0xac
   21460:	mov	r3, #1
   21464:	add	r0, r0, r5
   21468:	ldrb	r0, [r0, #-1]
   2146c:	ubfx	r2, r0, #5, #3
   21470:	ldr	r1, [r1, r2, lsl #2]
   21474:	and	r2, r0, #31
   21478:	tst	r1, r3, lsl r2
   2147c:	bne	214b4 <__assert_fail@plt+0xf620>
   21480:	mov	r3, #0
   21484:	cmp	r0, #10
   21488:	beq	214a8 <__assert_fail@plt+0xf614>
   2148c:	b	214b4 <__assert_fail@plt+0xf620>
   21490:	ldrb	r0, [sp, #182]	; 0xb6
   21494:	cmp	r0, #0
   21498:	bne	21384 <__assert_fail@plt+0xf4f0>
   2149c:	mov	r3, #0
   214a0:	cmp	r7, #10
   214a4:	bne	214b4 <__assert_fail@plt+0xf620>
   214a8:	ldrb	r3, [sp, #181]	; 0xb5
   214ac:	cmp	r3, #0
   214b0:	movwne	r3, #2
   214b4:	ldr	r0, [r6, #8]
   214b8:	sub	sl, r5, #1
   214bc:	cmp	r0, #1
   214c0:	blt	21558 <__assert_fail@plt+0xf6c4>
   214c4:	and	r1, r3, #8
   214c8:	ldr	r7, [r6, #12]
   214cc:	and	lr, r3, #1
   214d0:	mov	r2, #0
   214d4:	str	r1, [sp, #16]
   214d8:	and	r1, r3, #2
   214dc:	str	r1, [sp, #20]
   214e0:	ldr	r1, [sp, #188]	; 0xbc
   214e4:	ldr	r1, [r1]
   214e8:	ldr	r6, [r7, r2, lsl #2]
   214ec:	add	r3, r1, r6, lsl #3
   214f0:	ldr	ip, [r3, #4]
   214f4:	uxtb	r3, ip
   214f8:	cmp	r3, #2
   214fc:	bne	2154c <__assert_fail@plt+0xf6b8>
   21500:	tst	ip, r9
   21504:	beq	2155c <__assert_fail@plt+0xf6c8>
   21508:	cmp	lr, #0
   2150c:	bne	21518 <__assert_fail@plt+0xf684>
   21510:	ands	r3, ip, #1024	; 0x400
   21514:	bne	2154c <__assert_fail@plt+0xf6b8>
   21518:	cmp	lr, #0
   2151c:	andsne	r3, ip, #2048	; 0x800
   21520:	bne	2154c <__assert_fail@plt+0xf6b8>
   21524:	ldr	r3, [sp, #20]
   21528:	cmp	r3, #0
   2152c:	bne	21538 <__assert_fail@plt+0xf6a4>
   21530:	ands	r3, ip, #8192	; 0x2000
   21534:	bne	2154c <__assert_fail@plt+0xf6b8>
   21538:	ldr	r3, [sp, #16]
   2153c:	cmp	r3, #0
   21540:	bne	2155c <__assert_fail@plt+0xf6c8>
   21544:	ands	r3, ip, #32768	; 0x8000
   21548:	beq	2155c <__assert_fail@plt+0xf6c8>
   2154c:	add	r2, r2, #1
   21550:	cmp	r2, r0
   21554:	blt	214e8 <__assert_fail@plt+0xf654>
   21558:	mov	r6, #0
   2155c:	ldr	r0, [sp, #56]	; 0x38
   21560:	mov	r2, r4
   21564:	mov	r1, #0
   21568:	mov	r4, r0
   2156c:	bl	11cd8 <memset@plt>
   21570:	sub	r0, fp, #188	; 0xbc
   21574:	str	r8, [fp, #-192]	; 0xffffff40
   21578:	mov	r1, #0
   2157c:	stm	r0, {r4, r6, sl}
   21580:	ldr	r0, [sp, #28]
   21584:	str	r1, [r0]
   21588:	str	r1, [r0, #4]
   2158c:	str	r1, [r0, #8]
   21590:	add	r0, sp, #104	; 0x68
   21594:	sub	r1, fp, #192	; 0xc0
   21598:	bl	2e840 <__assert_fail@plt+0x1c9ac>
   2159c:	mov	r9, r0
   215a0:	mov	r0, #0
   215a4:	bl	17754 <__assert_fail@plt+0x58c0>
   215a8:	cmp	r9, #0
   215ac:	bne	21618 <__assert_fail@plt+0xf784>
   215b0:	ldr	r0, [r8]
   215b4:	cmp	r0, #0
   215b8:	beq	213ac <__assert_fail@plt+0xf518>
   215bc:	sub	sl, r5, #1
   215c0:	b	22694 <__assert_fail@plt+0x10800>
   215c4:	ldr	r4, [sp, #56]	; 0x38
   215c8:	mov	r0, r8
   215cc:	bl	17754 <__assert_fail@plt+0x58c0>
   215d0:	mov	r0, r4
   215d4:	bl	17754 <__assert_fail@plt+0x58c0>
   215d8:	ldr	r8, [sp, #64]	; 0x40
   215dc:	add	r0, sp, #104	; 0x68
   215e0:	bl	2aa78 <__assert_fail@plt+0x18be4>
   215e4:	ldr	r0, [fp, #-200]	; 0xffffff38
   215e8:	ldr	r5, [sp, #48]	; 0x30
   215ec:	ldr	r4, [sp, #52]	; 0x34
   215f0:	mov	r9, #1
   215f4:	add	r6, r0, r8
   215f8:	cmp	r6, r5
   215fc:	str	r6, [fp, #-200]	; 0xffffff38
   21600:	blt	236cc <__assert_fail@plt+0x11838>
   21604:	ldr	ip, [sp, #88]	; 0x58
   21608:	ldr	r7, [sp, #84]	; 0x54
   2160c:	cmp	r4, r6
   21610:	bge	21798 <__assert_fail@plt+0xf904>
   21614:	b	236cc <__assert_fail@plt+0x11838>
   21618:	str	r4, [sp, #56]	; 0x38
   2161c:	mov	r0, r8
   21620:	bl	17754 <__assert_fail@plt+0x58c0>
   21624:	ldr	r0, [sp, #56]	; 0x38
   21628:	bl	17754 <__assert_fail@plt+0x58c0>
   2162c:	ldr	r8, [sp, #96]	; 0x60
   21630:	ldr	sl, [sp, #92]	; 0x5c
   21634:	ldr	r5, [sp, #80]	; 0x50
   21638:	cmp	r9, #0
   2163c:	sub	r6, fp, #48	; 0x30
   21640:	beq	2277c <__assert_fail@plt+0x108e8>
   21644:	ldr	r8, [sp, #64]	; 0x40
   21648:	cmp	r9, #1
   2164c:	beq	215dc <__assert_fail@plt+0xf748>
   21650:	b	236cc <__assert_fail@plt+0x11838>
   21654:	ldr	r0, [sp, #236]	; 0xec
   21658:	lsl	r1, r7, #3
   2165c:	bl	33cc8 <__assert_fail@plt+0x21e34>
   21660:	cmp	r0, #0
   21664:	beq	21744 <__assert_fail@plt+0xf8b0>
   21668:	str	r0, [sp, #236]	; 0xec
   2166c:	lsl	r0, r7, #1
   21670:	str	r0, [sp, #232]	; 0xe8
   21674:	b	216c0 <__assert_fail@plt+0xf82c>
   21678:	ldr	r1, [r8, #12]
   2167c:	ldr	r6, [r1, r9, lsl #2]
   21680:	ldr	r1, [r4]
   21684:	add	r2, r1, r6, lsl #3
   21688:	ldrb	r2, [r2, #4]
   2168c:	cmp	r2, #8
   21690:	bne	21700 <__assert_fail@plt+0xf86c>
   21694:	ldr	r1, [r1, r6, lsl #3]
   21698:	cmp	r1, #31
   2169c:	bgt	21700 <__assert_fail@plt+0xf86c>
   216a0:	ldr	r2, [r4, #80]	; 0x50
   216a4:	mov	r3, #1
   216a8:	tst	r2, r3, lsl r1
   216ac:	beq	21700 <__assert_fail@plt+0xf86c>
   216b0:	ldr	r7, [sp, #228]	; 0xe4
   216b4:	ldr	r0, [sp, #232]	; 0xe8
   216b8:	cmp	r7, r0
   216bc:	beq	21654 <__assert_fail@plt+0xf7c0>
   216c0:	mov	r0, #1
   216c4:	mov	r1, #24
   216c8:	bl	33c44 <__assert_fail@plt+0x21db0>
   216cc:	ldr	r1, [sp, #228]	; 0xe4
   216d0:	ldr	r2, [sp, #236]	; 0xec
   216d4:	str	r0, [r2, r1, lsl #2]
   216d8:	ldr	r0, [sp, #236]	; 0xec
   216dc:	ldr	r0, [r0, r1, lsl #2]
   216e0:	cmp	r0, #0
   216e4:	beq	21744 <__assert_fail@plt+0xf8b0>
   216e8:	add	r1, r1, #1
   216ec:	str	r6, [r0, #4]
   216f0:	str	r1, [sp, #228]	; 0xe4
   216f4:	mov	r1, #0
   216f8:	str	r1, [r0]
   216fc:	ldr	r0, [r8, #8]
   21700:	add	r9, r9, #1
   21704:	cmp	r9, r0
   21708:	blt	21678 <__assert_fail@plt+0xf7e4>
   2170c:	mov	r7, #0
   21710:	str	r7, [fp, #-196]	; 0xffffff3c
   21714:	ldrb	r0, [r8, #52]	; 0x34
   21718:	tst	r0, #64	; 0x40
   2171c:	beq	21b00 <__assert_fail@plt+0xfc6c>
   21720:	add	r1, r8, #4
   21724:	add	r0, sp, #104	; 0x68
   21728:	bl	2ac1c <__assert_fail@plt+0x18d88>
   2172c:	mov	r7, #0
   21730:	cmp	r0, #0
   21734:	str	r0, [fp, #-196]	; 0xffffff3c
   21738:	beq	21b00 <__assert_fail@plt+0xfc6c>
   2173c:	mov	r9, r0
   21740:	b	2114c <__assert_fail@plt+0xf2b8>
   21744:	mov	r9, #12
   21748:	mov	sl, r5
   2174c:	b	22428 <__assert_fail@plt+0x10594>
   21750:	ldr	r0, [sp, #192]	; 0xc0
   21754:	and	r0, r0, #2
   21758:	eor	r3, r0, #10
   2175c:	b	21274 <__assert_fail@plt+0xf3e0>
   21760:	mov	r0, r4
   21764:	mov	r6, r7
   21768:	bl	11cb4 <iswalnum@plt>
   2176c:	mov	r3, #1
   21770:	cmp	r4, #95	; 0x5f
   21774:	beq	2178c <__assert_fail@plt+0xf8f8>
   21778:	ldr	r5, [sp, #92]	; 0x5c
   2177c:	cmp	r0, #0
   21780:	mov	r7, r6
   21784:	beq	2125c <__assert_fail@plt+0xf3c8>
   21788:	b	21274 <__assert_fail@plt+0xf3e0>
   2178c:	ldr	r5, [sp, #92]	; 0x5c
   21790:	mov	r7, r6
   21794:	b	21274 <__assert_fail@plt+0xf3e0>
   21798:	ldr	r1, [sp, #76]	; 0x4c
   2179c:	cmp	r1, #4
   217a0:	bhi	218a4 <__assert_fail@plt+0xfa10>
   217a4:	add	r0, pc, #0
   217a8:	ldr	pc, [r0, r1, lsl #2]
   217ac:	andeq	r1, r2, r0, asr #15
   217b0:	andeq	r1, r2, r0, asr #15
   217b4:	andeq	r1, r2, ip, lsl #16
   217b8:	andeq	r1, r2, ip, lsr r8
   217bc:	andeq	r1, r2, ip, lsr #18
   217c0:	mov	r9, #1
   217c4:	cmp	r6, r5
   217c8:	blt	236cc <__assert_fail@plt+0x11838>
   217cc:	ldr	r1, [sp, #68]	; 0x44
   217d0:	mov	r0, #0
   217d4:	cmp	r6, r1
   217d8:	ldrlt	r0, [sp, #100]	; 0x64
   217dc:	ldrblt	r0, [r0, r6]
   217e0:	cmp	r7, #0
   217e4:	ldrbne	r0, [r7, r0]
   217e8:	ldrb	r0, [ip, r0]
   217ec:	cmp	r0, #0
   217f0:	bne	2192c <__assert_fail@plt+0xfa98>
   217f4:	sub	r0, r6, #1
   217f8:	cmp	r6, r5
   217fc:	mov	r6, r0
   21800:	str	r0, [fp, #-200]	; 0xffffff38
   21804:	bgt	217d0 <__assert_fail@plt+0xf93c>
   21808:	b	236cc <__assert_fail@plt+0x11838>
   2180c:	ldr	r1, [sp, #100]	; 0x64
   21810:	cmp	r6, r4
   21814:	bge	2186c <__assert_fail@plt+0xf9d8>
   21818:	ldrb	r0, [r1, r6]
   2181c:	ldrb	r0, [ip, r0]
   21820:	cmp	r0, #0
   21824:	bne	2186c <__assert_fail@plt+0xf9d8>
   21828:	add	r6, r6, #1
   2182c:	cmp	r6, r4
   21830:	str	r6, [fp, #-200]	; 0xffffff38
   21834:	blt	21818 <__assert_fail@plt+0xf984>
   21838:	b	2186c <__assert_fail@plt+0xf9d8>
   2183c:	cmp	r6, r4
   21840:	bge	2186c <__assert_fail@plt+0xf9d8>
   21844:	ldr	r1, [sp, #100]	; 0x64
   21848:	ldrb	r0, [r1, r6]
   2184c:	ldrb	r0, [r7, r0]
   21850:	ldrb	r0, [ip, r0]
   21854:	cmp	r0, #0
   21858:	bne	2186c <__assert_fail@plt+0xf9d8>
   2185c:	add	r6, r6, #1
   21860:	cmp	r6, r4
   21864:	str	r6, [fp, #-200]	; 0xffffff38
   21868:	blt	21848 <__assert_fail@plt+0xf9b4>
   2186c:	cmp	r6, r4
   21870:	bne	2192c <__assert_fail@plt+0xfa98>
   21874:	ldr	r1, [sp, #68]	; 0x44
   21878:	mov	r0, #0
   2187c:	mov	r6, r4
   21880:	cmp	r4, r1
   21884:	ldr	r1, [sp, #100]	; 0x64
   21888:	ldrblt	r0, [r1, r4]
   2188c:	cmp	r7, #0
   21890:	ldrbne	r0, [r7, r0]
   21894:	ldrb	r0, [ip, r0]
   21898:	cmp	r0, #0
   2189c:	bne	2192c <__assert_fail@plt+0xfa98>
   218a0:	b	23874 <__assert_fail@plt+0x119e0>
   218a4:	ldr	r0, [sp, #128]	; 0x80
   218a8:	ldr	r2, [sp, #136]	; 0x88
   218ac:	sub	r1, r6, r0
   218b0:	cmp	r1, r2
   218b4:	bcs	218f8 <__assert_fail@plt+0xfa64>
   218b8:	ldr	r3, [sp, #132]	; 0x84
   218bc:	mov	r2, #0
   218c0:	cmp	r1, r3
   218c4:	ldrcc	r2, [sp, #108]	; 0x6c
   218c8:	ldrbcc	r2, [r2, r1]
   218cc:	ldrb	r1, [ip, r2]
   218d0:	cmp	r1, #0
   218d4:	bne	2192c <__assert_fail@plt+0xfa98>
   218d8:	add	r6, r6, r8
   218dc:	mov	r9, #1
   218e0:	cmp	r6, r5
   218e4:	str	r6, [fp, #-200]	; 0xffffff38
   218e8:	blt	236cc <__assert_fail@plt+0x11838>
   218ec:	cmp	r6, r4
   218f0:	ble	218a8 <__assert_fail@plt+0xfa14>
   218f4:	b	236cc <__assert_fail@plt+0x11838>
   218f8:	ldr	r2, [fp, #24]
   218fc:	add	r0, sp, #104	; 0x68
   21900:	mov	r1, r6
   21904:	bl	2a06c <__assert_fail@plt+0x181d8>
   21908:	cmp	r0, #0
   2190c:	bne	2350c <__assert_fail@plt+0x11678>
   21910:	ldr	r0, [sp, #128]	; 0x80
   21914:	ldr	r6, [fp, #-200]	; 0xffffff38
   21918:	ldr	ip, [sp, #88]	; 0x58
   2191c:	ldr	r4, [sp, #52]	; 0x34
   21920:	ldr	r5, [sp, #48]	; 0x30
   21924:	sub	r1, r6, r0
   21928:	b	218b8 <__assert_fail@plt+0xfa24>
   2192c:	ldr	r2, [fp, #24]
   21930:	add	r0, sp, #104	; 0x68
   21934:	mov	r1, r6
   21938:	bl	2a06c <__assert_fail@plt+0x181d8>
   2193c:	cmp	r0, #0
   21940:	bne	2350c <__assert_fail@plt+0x11678>
   21944:	ldr	r0, [sp, #60]	; 0x3c
   21948:	cmp	r0, #1
   2194c:	ldrne	r0, [sp, #132]	; 0x84
   21950:	cmpne	r0, #0
   21954:	bne	219dc <__assert_fail@plt+0xfb48>
   21958:	mov	r0, #0
   2195c:	str	r0, [sp, #212]	; 0xd4
   21960:	str	r0, [sp, #224]	; 0xe0
   21964:	str	r0, [sp, #208]	; 0xd0
   21968:	str	r0, [fp, #-196]	; 0xffffff3c
   2196c:	ldr	r4, [sp, #188]	; 0xbc
   21970:	ldr	sl, [sp, #144]	; 0x90
   21974:	ldr	r8, [r4, #36]	; 0x24
   21978:	ldrsb	r0, [r8, #52]	; 0x34
   2197c:	cmn	r0, #1
   21980:	bgt	21acc <__assert_fail@plt+0xfc38>
   21984:	cmp	sl, #0
   21988:	ble	219cc <__assert_fail@plt+0xfb38>
   2198c:	ldr	r1, [sp, #152]	; 0x98
   21990:	sub	r0, sl, #1
   21994:	cmp	r1, r0
   21998:	beq	21ab4 <__assert_fail@plt+0xfc20>
   2199c:	ldr	r1, [sp, #184]	; 0xb8
   219a0:	cmp	r1, #2
   219a4:	blt	219f0 <__assert_fail@plt+0xfb5c>
   219a8:	ldr	r0, [sp, #112]	; 0x70
   219ac:	mov	r1, sl
   219b0:	sub	r0, r0, #4
   219b4:	ldr	r5, [r0, r1, lsl #2]
   219b8:	cmn	r5, #1
   219bc:	bne	21a20 <__assert_fail@plt+0xfb8c>
   219c0:	sub	r1, r1, #1
   219c4:	cmp	r1, #0
   219c8:	bgt	219b4 <__assert_fail@plt+0xfb20>
   219cc:	ldr	r3, [sp, #164]	; 0xa4
   219d0:	tst	r3, #1
   219d4:	beq	21a48 <__assert_fail@plt+0xfbb4>
   219d8:	b	21ac8 <__assert_fail@plt+0xfc34>
   219dc:	ldr	r0, [sp, #112]	; 0x70
   219e0:	ldr	r0, [r0]
   219e4:	cmn	r0, #1
   219e8:	bne	21958 <__assert_fail@plt+0xfac4>
   219ec:	b	215e4 <__assert_fail@plt+0xf750>
   219f0:	ldr	r1, [sp, #108]	; 0x6c
   219f4:	ldr	r2, [sp, #172]	; 0xac
   219f8:	mov	r3, #1
   219fc:	ldrb	r0, [r1, r0]
   21a00:	ubfx	r1, r0, #5, #3
   21a04:	ldr	r1, [r2, r1, lsl #2]
   21a08:	and	r2, r0, #31
   21a0c:	tst	r1, r3, lsl r2
   21a10:	bne	21ac8 <__assert_fail@plt+0xfc34>
   21a14:	cmp	r0, #10
   21a18:	beq	21a34 <__assert_fail@plt+0xfba0>
   21a1c:	b	21acc <__assert_fail@plt+0xfc38>
   21a20:	ldrb	r0, [sp, #182]	; 0xb6
   21a24:	cmp	r0, #0
   21a28:	bne	21234 <__assert_fail@plt+0xf3a0>
   21a2c:	cmp	r5, #10
   21a30:	bne	21acc <__assert_fail@plt+0xfc38>
   21a34:	ldrb	r3, [sp, #181]	; 0xb5
   21a38:	cmp	r3, #0
   21a3c:	movwne	r3, #2
   21a40:	tst	r3, #1
   21a44:	bne	21ac8 <__assert_fail@plt+0xfc34>
   21a48:	cmp	r3, #0
   21a4c:	beq	21acc <__assert_fail@plt+0xfc38>
   21a50:	ands	r1, r3, #2
   21a54:	and	r0, r3, #4
   21a58:	cmpne	r0, #0
   21a5c:	bne	21a94 <__assert_fail@plt+0xfc00>
   21a60:	cmp	r1, #0
   21a64:	bne	21aa4 <__assert_fail@plt+0xfc10>
   21a68:	ldr	r8, [r4, #36]	; 0x24
   21a6c:	cmp	r0, #0
   21a70:	beq	21acc <__assert_fail@plt+0xfc38>
   21a74:	ldr	r2, [r8, #40]	; 0x28
   21a78:	sub	r0, fp, #196	; 0xc4
   21a7c:	mov	r1, r4
   21a80:	bl	29aec <__assert_fail@plt+0x17c58>
   21a84:	mov	r8, r0
   21a88:	cmp	r8, #0
   21a8c:	bne	21ad4 <__assert_fail@plt+0xfc40>
   21a90:	b	234f8 <__assert_fail@plt+0x11664>
   21a94:	ldr	r8, [r4, #48]	; 0x30
   21a98:	cmp	r8, #0
   21a9c:	bne	21ad4 <__assert_fail@plt+0xfc40>
   21aa0:	b	234f8 <__assert_fail@plt+0x11664>
   21aa4:	ldr	r8, [r4, #44]	; 0x2c
   21aa8:	cmp	r8, #0
   21aac:	bne	21ad4 <__assert_fail@plt+0xfc40>
   21ab0:	b	234f8 <__assert_fail@plt+0x11664>
   21ab4:	ldr	r0, [sp, #192]	; 0xc0
   21ab8:	and	r0, r0, #2
   21abc:	eor	r3, r0, #10
   21ac0:	tst	r3, #1
   21ac4:	beq	21a48 <__assert_fail@plt+0xfbb4>
   21ac8:	ldr	r8, [r4, #40]	; 0x28
   21acc:	cmp	r8, #0
   21ad0:	beq	234f8 <__assert_fail@plt+0x11664>
   21ad4:	ldr	r0, [sp, #204]	; 0xcc
   21ad8:	ldr	r1, [sp, #40]	; 0x28
   21adc:	ldr	r5, [sp, #92]	; 0x5c
   21ae0:	cmp	r0, #0
   21ae4:	mov	r7, r1
   21ae8:	beq	21b00 <__assert_fail@plt+0xfc6c>
   21aec:	str	r8, [r0, sl, lsl #2]
   21af0:	mov	r7, r1
   21af4:	ldr	r0, [r4, #76]	; 0x4c
   21af8:	cmp	r0, #0
   21afc:	bne	21160 <__assert_fail@plt+0xf2cc>
   21b00:	ldrb	r0, [r8, #52]	; 0x34
   21b04:	mov	lr, #0
   21b08:	mvn	r9, #0
   21b0c:	tst	r0, #16
   21b10:	bne	21128 <__assert_fail@plt+0xf294>
   21b14:	ldr	r0, [sp, #144]	; 0x90
   21b18:	ldr	r1, [sp, #160]	; 0xa0
   21b1c:	str	lr, [sp, #56]	; 0x38
   21b20:	cmp	r1, r0
   21b24:	ble	223f4 <__assert_fail@plt+0x10560>
   21b28:	ldr	r1, [sp, #36]	; 0x24
   21b2c:	str	r1, [sp, #72]	; 0x48
   21b30:	b	222e0 <__assert_fail@plt+0x1044c>
   21b34:	ldr	r0, [fp, #-196]	; 0xffffff3c
   21b38:	cmp	r0, #0
   21b3c:	bne	234f8 <__assert_fail@plt+0x11664>
   21b40:	ldr	r0, [sp, #56]	; 0x38
   21b44:	ldr	r1, [sp, #44]	; 0x2c
   21b48:	clz	r0, r0
   21b4c:	lsr	r0, r0, #5
   21b50:	orr	r0, r1, r0
   21b54:	cmp	r0, #1
   21b58:	bne	223fc <__assert_fail@plt+0x10568>
   21b5c:	ldr	r0, [sp, #204]	; 0xcc
   21b60:	cmp	r0, #0
   21b64:	bne	21bbc <__assert_fail@plt+0xfd28>
   21b68:	b	223fc <__assert_fail@plt+0x10568>
   21b6c:	ldr	r0, [sp, #144]	; 0x90
   21b70:	cmn	r0, #1
   21b74:	ble	21bb0 <__assert_fail@plt+0xfd1c>
   21b78:	ldr	r1, [sp, #152]	; 0x98
   21b7c:	cmp	r1, r0
   21b80:	beq	22244 <__assert_fail@plt+0x103b0>
   21b84:	ldr	r1, [sp, #184]	; 0xb8
   21b88:	cmp	r1, #2
   21b8c:	blt	21c18 <__assert_fail@plt+0xfd84>
   21b90:	ldr	r1, [sp, #112]	; 0x70
   21b94:	ldr	r4, [r1, r0, lsl #2]
   21b98:	cmn	r4, #1
   21b9c:	bne	21c4c <__assert_fail@plt+0xfdb8>
   21ba0:	sub	r2, r0, #1
   21ba4:	cmp	r0, #0
   21ba8:	mov	r0, r2
   21bac:	bgt	21b94 <__assert_fail@plt+0xfd00>
   21bb0:	ldr	r3, [sp, #164]	; 0xa4
   21bb4:	b	21c70 <__assert_fail@plt+0xfddc>
   21bb8:	ldr	r0, [sp, #204]	; 0xcc
   21bbc:	ldr	r2, [sp, #144]	; 0x90
   21bc0:	ldr	r1, [sp, #208]	; 0xd0
   21bc4:	add	r2, r2, #1
   21bc8:	sub	r3, r2, #1
   21bcc:	cmp	r3, r1
   21bd0:	bge	223fc <__assert_fail@plt+0x10568>
   21bd4:	str	r2, [sp, #144]	; 0x90
   21bd8:	ldr	r3, [r0, r2, lsl #2]
   21bdc:	add	r2, r2, #1
   21be0:	cmp	r3, #0
   21be4:	beq	21bc8 <__assert_fail@plt+0xfd34>
   21be8:	sub	r0, fp, #196	; 0xc4
   21bec:	add	r1, sp, #104	; 0x68
   21bf0:	mov	r2, #0
   21bf4:	bl	2b7b0 <__assert_fail@plt+0x1991c>
   21bf8:	cmp	r0, #0
   21bfc:	mov	r8, r0
   21c00:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   21c04:	cmpeq	r0, #0
   21c08:	beq	21bb8 <__assert_fail@plt+0xfd24>
   21c0c:	cmp	r8, #0
   21c10:	bne	22394 <__assert_fail@plt+0x10500>
   21c14:	b	223fc <__assert_fail@plt+0x10568>
   21c18:	ldr	r1, [sp, #108]	; 0x6c
   21c1c:	ldr	r2, [sp, #172]	; 0xac
   21c20:	mov	r3, #1
   21c24:	ldrb	r0, [r1, r0]
   21c28:	ubfx	r1, r0, #5, #3
   21c2c:	ldr	r1, [r2, r1, lsl #2]
   21c30:	and	r2, r0, #31
   21c34:	tst	r1, r3, lsl r2
   21c38:	bne	21c70 <__assert_fail@plt+0xfddc>
   21c3c:	mov	r3, #0
   21c40:	cmp	r0, #10
   21c44:	beq	21c64 <__assert_fail@plt+0xfdd0>
   21c48:	b	21c70 <__assert_fail@plt+0xfddc>
   21c4c:	ldrb	r0, [sp, #182]	; 0xb6
   21c50:	cmp	r0, #0
   21c54:	bne	2226c <__assert_fail@plt+0x103d8>
   21c58:	mov	r3, #0
   21c5c:	cmp	r4, #10
   21c60:	bne	21c70 <__assert_fail@plt+0xfddc>
   21c64:	ldrb	r3, [sp, #181]	; 0xb5
   21c68:	cmp	r3, #0
   21c6c:	movwne	r3, #2
   21c70:	ldr	r0, [r8, #8]
   21c74:	cmp	r0, #1
   21c78:	blt	223e0 <__assert_fail@plt+0x1054c>
   21c7c:	ldr	r1, [sp, #188]	; 0xbc
   21c80:	ldr	r6, [r8, #12]
   21c84:	and	ip, r3, #8
   21c88:	and	lr, r3, #2
   21c8c:	and	r3, r3, #1
   21c90:	mov	r4, #0
   21c94:	str	r7, [sp, #16]
   21c98:	str	sl, [sp, #20]
   21c9c:	ldr	r5, [r1]
   21ca0:	ldr	r1, [r6, r4, lsl #2]
   21ca4:	add	r7, r5, r1, lsl #3
   21ca8:	ldr	r7, [r7, #4]
   21cac:	uxtb	r2, r7
   21cb0:	cmp	r2, #2
   21cb4:	bne	21d04 <__assert_fail@plt+0xfe70>
   21cb8:	movw	r2, #65280	; 0xff00
   21cbc:	movt	r2, #3
   21cc0:	tst	r7, r2
   21cc4:	beq	21d1c <__assert_fail@plt+0xfe88>
   21cc8:	cmp	r3, #0
   21ccc:	bne	21cd8 <__assert_fail@plt+0xfe44>
   21cd0:	ands	r2, r7, #1024	; 0x400
   21cd4:	bne	21d04 <__assert_fail@plt+0xfe70>
   21cd8:	cmp	r3, #0
   21cdc:	andsne	r2, r7, #2048	; 0x800
   21ce0:	bne	21d04 <__assert_fail@plt+0xfe70>
   21ce4:	cmp	lr, #0
   21ce8:	bne	21cf4 <__assert_fail@plt+0xfe60>
   21cec:	ands	r2, r7, #8192	; 0x2000
   21cf0:	bne	21d04 <__assert_fail@plt+0xfe70>
   21cf4:	cmp	ip, #0
   21cf8:	bne	21d1c <__assert_fail@plt+0xfe88>
   21cfc:	ands	r2, r7, #32768	; 0x8000
   21d00:	beq	21d1c <__assert_fail@plt+0xfe88>
   21d04:	add	r4, r4, #1
   21d08:	cmp	r4, r0
   21d0c:	blt	21ca0 <__assert_fail@plt+0xfe0c>
   21d10:	ldr	sl, [sp, #20]
   21d14:	ldr	r7, [sp, #16]
   21d18:	b	223e0 <__assert_fail@plt+0x1054c>
   21d1c:	ldr	sl, [sp, #20]
   21d20:	ldr	r7, [sp, #16]
   21d24:	cmp	r1, #0
   21d28:	bne	223c0 <__assert_fail@plt+0x1052c>
   21d2c:	b	223e0 <__assert_fail@plt+0x1054c>
   21d30:	ldr	r0, [r5, #8]
   21d34:	cmp	r0, #1
   21d38:	blt	22168 <__assert_fail@plt+0x102d4>
   21d3c:	ldr	lr, [sp, #188]	; 0xbc
   21d40:	mov	r3, #0
   21d44:	str	sl, [sp, #20]
   21d48:	str	r7, [sp, #16]
   21d4c:	str	lr, [sp, #4]
   21d50:	b	22134 <__assert_fail@plt+0x102a0>
   21d54:	movw	r0, #65280	; 0xff00
   21d58:	str	r3, [sp, #8]
   21d5c:	movt	r0, #3
   21d60:	tst	r6, r0
   21d64:	beq	21e78 <__assert_fail@plt+0xffe4>
   21d68:	ldr	r0, [sp, #144]	; 0x90
   21d6c:	cmn	r0, #1
   21d70:	ble	21db4 <__assert_fail@plt+0xff20>
   21d74:	ldr	r1, [sp, #152]	; 0x98
   21d78:	cmp	r1, r0
   21d7c:	beq	2208c <__assert_fail@plt+0x101f8>
   21d80:	ldr	r1, [sp, #184]	; 0xb8
   21d84:	cmp	r1, #2
   21d88:	blt	21dbc <__assert_fail@plt+0xff28>
   21d8c:	ldr	r1, [sp, #112]	; 0x70
   21d90:	ldr	sl, [sp, #20]
   21d94:	ldr	r3, [sp, #8]
   21d98:	ldr	r8, [r1, r0, lsl #2]
   21d9c:	cmn	r8, #1
   21da0:	bne	21dfc <__assert_fail@plt+0xff68>
   21da4:	sub	r2, r0, #1
   21da8:	cmp	r0, #0
   21dac:	mov	r0, r2
   21db0:	bgt	21d98 <__assert_fail@plt+0xff04>
   21db4:	ldr	r1, [sp, #164]	; 0xa4
   21db8:	b	21e20 <__assert_fail@plt+0xff8c>
   21dbc:	ldr	r1, [sp, #108]	; 0x6c
   21dc0:	ldr	r2, [sp, #172]	; 0xac
   21dc4:	mov	ip, #0
   21dc8:	ldrb	r0, [r1, r0]
   21dcc:	ubfx	r1, r0, #5, #3
   21dd0:	ldr	sl, [sp, #20]
   21dd4:	ldr	r3, [r2, r1, lsl #2]
   21dd8:	and	r2, r0, #31
   21ddc:	mov	r1, #1
   21de0:	tst	r3, r1, lsl r2
   21de4:	ldr	r3, [sp, #8]
   21de8:	bne	21e38 <__assert_fail@plt+0xffa4>
   21dec:	mov	r1, #0
   21df0:	cmp	r0, #10
   21df4:	beq	21e14 <__assert_fail@plt+0xff80>
   21df8:	b	21e20 <__assert_fail@plt+0xff8c>
   21dfc:	ldrb	r0, [sp, #182]	; 0xb6
   21e00:	cmp	r0, #0
   21e04:	bne	220c0 <__assert_fail@plt+0x1022c>
   21e08:	mov	r1, #0
   21e0c:	cmp	r8, #10
   21e10:	bne	21e20 <__assert_fail@plt+0xff8c>
   21e14:	ldrb	r1, [sp, #181]	; 0xb5
   21e18:	cmp	r1, #0
   21e1c:	movwne	r1, #2
   21e20:	and	r0, r1, #1
   21e24:	tst	r6, #1024	; 0x400
   21e28:	eor	ip, r0, #1
   21e2c:	beq	21e38 <__assert_fail@plt+0xffa4>
   21e30:	cmp	r0, #0
   21e34:	beq	22158 <__assert_fail@plt+0x102c4>
   21e38:	ldr	r0, [lr]
   21e3c:	ldr	r2, [sp, #12]
   21e40:	cmp	ip, #0
   21e44:	add	r0, r0, r2, lsl #3
   21e48:	ldr	r0, [r0, #4]
   21e4c:	bne	21e58 <__assert_fail@plt+0xffc4>
   21e50:	ands	r2, r0, #2048	; 0x800
   21e54:	bne	22158 <__assert_fail@plt+0x102c4>
   21e58:	tst	r1, #2
   21e5c:	bne	21e68 <__assert_fail@plt+0xffd4>
   21e60:	ands	r2, r0, #8192	; 0x2000
   21e64:	bne	22158 <__assert_fail@plt+0x102c4>
   21e68:	tst	r1, #8
   21e6c:	bne	21e78 <__assert_fail@plt+0xffe4>
   21e70:	ands	r0, r0, #32768	; 0x8000
   21e74:	bne	22158 <__assert_fail@plt+0x102c4>
   21e78:	ldr	r3, [sp, #144]	; 0x90
   21e7c:	ldr	r1, [sp, #12]
   21e80:	mov	r0, lr
   21e84:	add	r2, sp, #104	; 0x68
   21e88:	bl	2d240 <__assert_fail@plt+0x1b3ac>
   21e8c:	ldr	r3, [sp, #8]
   21e90:	ldr	lr, [sp, #4]
   21e94:	ldr	r7, [sp, #16]
   21e98:	cmp	r0, #0
   21e9c:	beq	22158 <__assert_fail@plt+0x102c4>
   21ea0:	ldr	r1, [sp, #224]	; 0xe0
   21ea4:	cmp	r1, r0
   21ea8:	movlt	r1, r0
   21eac:	str	r1, [sp, #224]	; 0xe0
   21eb0:	ldr	r3, [sp, #144]	; 0x90
   21eb4:	ldr	r2, [sp, #140]	; 0x8c
   21eb8:	ldr	r1, [sp, #152]	; 0x98
   21ebc:	ldr	r7, [sp, #208]	; 0xd0
   21ec0:	add	r6, r3, r0
   21ec4:	cmp	r2, r6
   21ec8:	cmple	r2, r1
   21ecc:	blt	21ee0 <__assert_fail@plt+0x1004c>
   21ed0:	ldr	r0, [sp, #132]	; 0x84
   21ed4:	cmp	r0, r6
   21ed8:	cmple	r0, r1
   21edc:	bge	21ef8 <__assert_fail@plt+0x10064>
   21ee0:	add	r1, r6, #1
   21ee4:	add	r0, sp, #104	; 0x68
   21ee8:	bl	2b5a8 <__assert_fail@plt+0x19714>
   21eec:	ldr	lr, [sp, #4]
   21ef0:	cmp	r0, #0
   21ef4:	bne	22254 <__assert_fail@plt+0x103c0>
   21ef8:	cmp	r6, r7
   21efc:	ble	21f24 <__assert_fail@plt+0x10090>
   21f00:	sub	r0, r6, r7
   21f04:	mov	r1, #0
   21f08:	lsl	r2, r0, #2
   21f0c:	ldr	r0, [sp, #204]	; 0xcc
   21f10:	add	r0, r0, r7, lsl #2
   21f14:	add	r0, r0, #4
   21f18:	bl	11cd8 <memset@plt>
   21f1c:	ldr	lr, [sp, #4]
   21f20:	str	r6, [sp, #208]	; 0xd0
   21f24:	mov	r0, #0
   21f28:	ldr	r2, [sp, #12]
   21f2c:	str	r0, [fp, #-48]	; 0xffffffd0
   21f30:	ldr	r0, [sp, #204]	; 0xcc
   21f34:	ldr	r1, [lr, #24]
   21f38:	ldr	r7, [r0, r6, lsl #2]
   21f3c:	ldr	r0, [lr, #12]
   21f40:	ldr	r0, [r0, r2, lsl #2]
   21f44:	cmp	r7, #0
   21f48:	add	r0, r0, r0, lsl #1
   21f4c:	add	r2, r1, r0, lsl #2
   21f50:	beq	21f74 <__assert_fail@plt+0x100e0>
   21f54:	ldr	r1, [r7, #40]	; 0x28
   21f58:	sub	r0, fp, #192	; 0xc0
   21f5c:	bl	2b9c4 <__assert_fail@plt+0x19b30>
   21f60:	ldr	sl, [sp, #20]
   21f64:	cmp	r0, #0
   21f68:	str	r0, [fp, #-48]	; 0xffffffd0
   21f6c:	beq	21f88 <__assert_fail@plt+0x100f4>
   21f70:	b	22258 <__assert_fail@plt+0x103c4>
   21f74:	vldr	d16, [r2]
   21f78:	ldr	r0, [r2, #8]
   21f7c:	ldr	sl, [sp, #20]
   21f80:	str	r0, [fp, #-184]	; 0xffffff48
   21f84:	vstr	d16, [fp, #-192]	; 0xffffff40
   21f88:	cmp	r6, #0
   21f8c:	ble	220a4 <__assert_fail@plt+0x10210>
   21f90:	ldr	r1, [sp, #152]	; 0x98
   21f94:	sub	r0, r6, #1
   21f98:	cmp	r1, r0
   21f9c:	ldr	r1, [sp, #4]
   21fa0:	beq	220b0 <__assert_fail@plt+0x1021c>
   21fa4:	ldr	r2, [sp, #184]	; 0xb8
   21fa8:	cmp	r2, #2
   21fac:	blt	21fdc <__assert_fail@plt+0x10148>
   21fb0:	ldr	r0, [sp, #112]	; 0x70
   21fb4:	mov	r2, r6
   21fb8:	sub	r0, r0, #4
   21fbc:	ldr	r8, [r0, r2, lsl #2]
   21fc0:	cmn	r8, #1
   21fc4:	bne	22018 <__assert_fail@plt+0x10184>
   21fc8:	sub	r2, r2, #1
   21fcc:	cmp	r2, #0
   21fd0:	bgt	21fbc <__assert_fail@plt+0x10128>
   21fd4:	ldr	r3, [sp, #164]	; 0xa4
   21fd8:	b	2203c <__assert_fail@plt+0x101a8>
   21fdc:	ldr	r3, [sp, #108]	; 0x6c
   21fe0:	ldr	r2, [sp, #172]	; 0xac
   21fe4:	mov	ip, r7
   21fe8:	ldrb	r0, [r3, r0]
   21fec:	ubfx	r3, r0, #5, #3
   21ff0:	ldr	r7, [r2, r3, lsl #2]
   21ff4:	and	r2, r0, #31
   21ff8:	mov	r3, #1
   21ffc:	tst	r7, r3, lsl r2
   22000:	mov	r7, ip
   22004:	bne	2203c <__assert_fail@plt+0x101a8>
   22008:	mov	r3, #0
   2200c:	cmp	r0, #10
   22010:	beq	22030 <__assert_fail@plt+0x1019c>
   22014:	b	2203c <__assert_fail@plt+0x101a8>
   22018:	ldrb	r0, [sp, #182]	; 0xb6
   2201c:	cmp	r0, #0
   22020:	bne	220f0 <__assert_fail@plt+0x1025c>
   22024:	mov	r3, #0
   22028:	cmp	r8, #10
   2202c:	bne	2203c <__assert_fail@plt+0x101a8>
   22030:	ldrb	r3, [sp, #181]	; 0xb5
   22034:	cmp	r3, #0
   22038:	movwne	r3, #2
   2203c:	sub	r0, fp, #48	; 0x30
   22040:	sub	r2, fp, #192	; 0xc0
   22044:	bl	29aec <__assert_fail@plt+0x17c58>
   22048:	ldr	r1, [sp, #204]	; 0xcc
   2204c:	cmp	r7, #0
   22050:	str	r0, [r1, r6, lsl #2]
   22054:	beq	22060 <__assert_fail@plt+0x101cc>
   22058:	ldr	r0, [fp, #-184]	; 0xffffff48
   2205c:	bl	17754 <__assert_fail@plt+0x58c0>
   22060:	ldr	r0, [sp, #204]	; 0xcc
   22064:	ldr	r7, [sp, #16]
   22068:	ldr	lr, [sp, #4]
   2206c:	ldr	r3, [sp, #8]
   22070:	ldr	r0, [r0, r6, lsl #2]
   22074:	cmp	r0, #0
   22078:	bne	22158 <__assert_fail@plt+0x102c4>
   2207c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22080:	cmp	r0, #0
   22084:	beq	22158 <__assert_fail@plt+0x102c4>
   22088:	b	22260 <__assert_fail@plt+0x103cc>
   2208c:	ldr	r0, [sp, #192]	; 0xc0
   22090:	ldr	sl, [sp, #20]
   22094:	ldr	r3, [sp, #8]
   22098:	and	r0, r0, #2
   2209c:	eor	r1, r0, #10
   220a0:	b	21e20 <__assert_fail@plt+0xff8c>
   220a4:	ldr	r3, [sp, #164]	; 0xa4
   220a8:	ldr	r1, [sp, #4]
   220ac:	b	2203c <__assert_fail@plt+0x101a8>
   220b0:	ldr	r0, [sp, #192]	; 0xc0
   220b4:	and	r0, r0, #2
   220b8:	eor	r3, r0, #10
   220bc:	b	2203c <__assert_fail@plt+0x101a8>
   220c0:	mov	r0, r8
   220c4:	bl	11cb4 <iswalnum@plt>
   220c8:	mov	r1, #1
   220cc:	mov	ip, #0
   220d0:	cmp	r8, #95	; 0x5f
   220d4:	beq	22118 <__assert_fail@plt+0x10284>
   220d8:	ldr	sl, [sp, #20]
   220dc:	ldr	lr, [sp, #4]
   220e0:	ldr	r3, [sp, #8]
   220e4:	cmp	r0, #0
   220e8:	beq	21e08 <__assert_fail@plt+0xff74>
   220ec:	b	21e38 <__assert_fail@plt+0xffa4>
   220f0:	mov	r0, r8
   220f4:	bl	11cb4 <iswalnum@plt>
   220f8:	mov	r3, #1
   220fc:	cmp	r8, #95	; 0x5f
   22100:	beq	22128 <__assert_fail@plt+0x10294>
   22104:	ldr	sl, [sp, #20]
   22108:	ldr	r1, [sp, #4]
   2210c:	cmp	r0, #0
   22110:	beq	22024 <__assert_fail@plt+0x10190>
   22114:	b	2203c <__assert_fail@plt+0x101a8>
   22118:	ldr	sl, [sp, #20]
   2211c:	ldr	lr, [sp, #4]
   22120:	ldr	r3, [sp, #8]
   22124:	b	21e38 <__assert_fail@plt+0xffa4>
   22128:	ldr	sl, [sp, #20]
   2212c:	ldr	r1, [sp, #4]
   22130:	b	2203c <__assert_fail@plt+0x101a8>
   22134:	ldr	r0, [r5, #12]
   22138:	ldr	r2, [r0, r3, lsl #2]
   2213c:	ldr	r0, [lr]
   22140:	add	r0, r0, r2, lsl #3
   22144:	mov	r1, r2
   22148:	str	r2, [sp, #12]
   2214c:	ldr	r6, [r0, #4]
   22150:	tst	r6, #1048576	; 0x100000
   22154:	bne	21d54 <__assert_fail@plt+0xfec0>
   22158:	ldr	r0, [r5, #8]
   2215c:	add	r3, r3, #1
   22160:	cmp	r3, r0
   22164:	blt	22134 <__assert_fail@plt+0x102a0>
   22168:	mov	r0, #0
   2216c:	str	r0, [fp, #-196]	; 0xffffff3c
   22170:	b	22320 <__assert_fail@plt+0x1048c>
   22174:	add	r1, r0, #2
   22178:	add	r0, sp, #104	; 0x68
   2217c:	bl	2b5a8 <__assert_fail@plt+0x19714>
   22180:	cmp	r0, #0
   22184:	str	r0, [fp, #-196]	; 0xffffff3c
   22188:	beq	22314 <__assert_fail@plt+0x10480>
   2218c:	b	234f8 <__assert_fail@plt+0x11664>
   22190:	ldr	r0, [sp, #144]	; 0x90
   22194:	cmp	r0, #0
   22198:	ble	221d8 <__assert_fail@plt+0x10344>
   2219c:	ldr	r2, [sp, #152]	; 0x98
   221a0:	sub	r1, r0, #1
   221a4:	cmp	r2, r1
   221a8:	beq	2229c <__assert_fail@plt+0x10408>
   221ac:	ldr	r2, [sp, #184]	; 0xb8
   221b0:	cmp	r2, #2
   221b4:	blt	221e0 <__assert_fail@plt+0x1034c>
   221b8:	ldr	r1, [sp, #112]	; 0x70
   221bc:	sub	r1, r1, #4
   221c0:	ldr	r8, [r1, r0, lsl #2]
   221c4:	cmn	r8, #1
   221c8:	bne	22214 <__assert_fail@plt+0x10380>
   221cc:	sub	r0, r0, #1
   221d0:	cmp	r0, #0
   221d4:	bgt	221c0 <__assert_fail@plt+0x1032c>
   221d8:	ldr	r1, [sp, #164]	; 0xa4
   221dc:	b	22238 <__assert_fail@plt+0x103a4>
   221e0:	ldr	r0, [sp, #108]	; 0x6c
   221e4:	ldr	r2, [sp, #172]	; 0xac
   221e8:	ldrb	r0, [r0, r1]
   221ec:	ubfx	r1, r0, #5, #3
   221f0:	ldr	ip, [r2, r1, lsl #2]
   221f4:	and	r2, r0, #31
   221f8:	mov	r1, #1
   221fc:	tst	ip, r1, lsl r2
   22200:	bne	22238 <__assert_fail@plt+0x103a4>
   22204:	mov	r1, #0
   22208:	cmp	r0, #10
   2220c:	beq	2222c <__assert_fail@plt+0x10398>
   22210:	b	22238 <__assert_fail@plt+0x103a4>
   22214:	ldrb	r0, [sp, #182]	; 0xb6
   22218:	cmp	r0, #0
   2221c:	bne	222a4 <__assert_fail@plt+0x10410>
   22220:	mov	r1, #0
   22224:	cmp	r8, #10
   22228:	bne	22238 <__assert_fail@plt+0x103a4>
   2222c:	ldrb	r1, [sp, #181]	; 0xb5
   22230:	cmp	r1, #0
   22234:	movwne	r1, #2
   22238:	bfi	r6, r1, #8, #1
   2223c:	ldr	r8, [r3, r6, lsl #2]
   22240:	b	2236c <__assert_fail@plt+0x104d8>
   22244:	ldr	r0, [sp, #192]	; 0xc0
   22248:	and	r0, r0, #2
   2224c:	eor	r3, r0, #10
   22250:	b	21c70 <__assert_fail@plt+0xfddc>
   22254:	str	r0, [fp, #-48]	; 0xffffffd0
   22258:	ldr	sl, [sp, #20]
   2225c:	ldr	r7, [sp, #16]
   22260:	mov	r8, #0
   22264:	str	r0, [fp, #-196]	; 0xffffff3c
   22268:	b	2236c <__assert_fail@plt+0x104d8>
   2226c:	mov	r0, r4
   22270:	mov	r5, r7
   22274:	bl	11cb4 <iswalnum@plt>
   22278:	mov	r3, #1
   2227c:	cmp	r4, #95	; 0x5f
   22280:	beq	22294 <__assert_fail@plt+0x10400>
   22284:	cmp	r0, #0
   22288:	mov	r7, r5
   2228c:	beq	21c58 <__assert_fail@plt+0xfdc4>
   22290:	b	21c70 <__assert_fail@plt+0xfddc>
   22294:	mov	r7, r5
   22298:	b	21c70 <__assert_fail@plt+0xfddc>
   2229c:	mov	r1, #10
   222a0:	b	22238 <__assert_fail@plt+0x103a4>
   222a4:	mov	r0, r8
   222a8:	str	r3, [sp, #12]
   222ac:	str	r7, [sp, #16]
   222b0:	bl	11cb4 <iswalnum@plt>
   222b4:	mov	r1, #1
   222b8:	cmp	r8, #95	; 0x5f
   222bc:	beq	222d4 <__assert_fail@plt+0x10440>
   222c0:	ldr	r7, [sp, #16]
   222c4:	ldr	r3, [sp, #12]
   222c8:	cmp	r0, #0
   222cc:	beq	22220 <__assert_fail@plt+0x1038c>
   222d0:	b	22238 <__assert_fail@plt+0x103a4>
   222d4:	ldr	r7, [sp, #16]
   222d8:	ldr	r3, [sp, #12]
   222dc:	b	22238 <__assert_fail@plt+0x103a4>
   222e0:	ldr	r2, [sp, #140]	; 0x8c
   222e4:	ldr	r1, [sp, #152]	; 0x98
   222e8:	add	r4, r0, #1
   222ec:	mov	r5, r8
   222f0:	cmp	r4, r2
   222f4:	blt	22300 <__assert_fail@plt+0x1046c>
   222f8:	cmp	r2, r1
   222fc:	blt	22174 <__assert_fail@plt+0x102e0>
   22300:	ldr	r2, [sp, #132]	; 0x84
   22304:	cmp	r4, r2
   22308:	blt	22314 <__assert_fail@plt+0x10480>
   2230c:	cmp	r2, r1
   22310:	blt	22174 <__assert_fail@plt+0x102e0>
   22314:	ldrb	r0, [r5, #52]	; 0x34
   22318:	tst	r0, #32
   2231c:	bne	21d30 <__assert_fail@plt+0xfe9c>
   22320:	ldr	r1, [sp, #144]	; 0x90
   22324:	ldr	r0, [sp, #108]	; 0x6c
   22328:	add	r2, r1, #1
   2232c:	str	r2, [sp, #144]	; 0x90
   22330:	ldrb	r6, [r0, r1]
   22334:	ldr	r0, [r5, #44]	; 0x2c
   22338:	cmp	r0, #0
   2233c:	bne	22368 <__assert_fail@plt+0x104d4>
   22340:	ldr	r3, [r5, #48]	; 0x30
   22344:	cmp	r3, #0
   22348:	bne	22190 <__assert_fail@plt+0x102fc>
   2234c:	ldr	r0, [sp, #188]	; 0xbc
   22350:	mov	r1, r5
   22354:	bl	2d744 <__assert_fail@plt+0x1b8b0>
   22358:	cmp	r0, #0
   2235c:	bne	22334 <__assert_fail@plt+0x104a0>
   22360:	mov	r0, #12
   22364:	b	22260 <__assert_fail@plt+0x103cc>
   22368:	ldr	r8, [r0, r6, lsl #2]
   2236c:	ldr	r0, [sp, #204]	; 0xcc
   22370:	cmp	r0, #0
   22374:	beq	2238c <__assert_fail@plt+0x104f8>
   22378:	sub	r0, fp, #196	; 0xc4
   2237c:	add	r1, sp, #104	; 0x68
   22380:	mov	r2, r8
   22384:	bl	2b7b0 <__assert_fail@plt+0x1991c>
   22388:	mov	r8, r0
   2238c:	cmp	r8, #0
   22390:	beq	21b34 <__assert_fail@plt+0xfca0>
   22394:	sub	r0, r5, r8
   22398:	clz	r0, r0
   2239c:	lsr	r0, r0, #5
   223a0:	ands	r7, r7, r0
   223a4:	ldrb	r0, [r8, #52]	; 0x34
   223a8:	movne	sl, r4
   223ac:	tst	r0, #16
   223b0:	beq	223e0 <__assert_fail@plt+0x1054c>
   223b4:	sxtb	r0, r0
   223b8:	cmn	r0, #1
   223bc:	ble	21b6c <__assert_fail@plt+0xfcd8>
   223c0:	ldr	r0, [sp, #44]	; 0x2c
   223c4:	ldr	r9, [sp, #144]	; 0x90
   223c8:	cmp	r0, #0
   223cc:	beq	22410 <__assert_fail@plt+0x1057c>
   223d0:	mov	r0, #0
   223d4:	str	r0, [sp, #72]	; 0x48
   223d8:	mov	r0, #1
   223dc:	str	r0, [sp, #56]	; 0x38
   223e0:	ldr	r0, [sp, #144]	; 0x90
   223e4:	ldr	r1, [sp, #160]	; 0xa0
   223e8:	cmp	r1, r0
   223ec:	bgt	222e0 <__assert_fail@plt+0x1044c>
   223f0:	b	223fc <__assert_fail@plt+0x10568>
   223f4:	ldr	r0, [sp, #36]	; 0x24
   223f8:	str	r0, [sp, #72]	; 0x48
   223fc:	ldr	r1, [sp, #72]	; 0x48
   22400:	cmp	r1, #0
   22404:	ldrne	r0, [r1]
   22408:	addne	r0, r0, sl
   2240c:	strne	r0, [r1]
   22410:	ldr	sl, [sp, #92]	; 0x5c
   22414:	ldr	r8, [sp, #64]	; 0x40
   22418:	cmn	r9, #1
   2241c:	beq	215dc <__assert_fail@plt+0xf748>
   22420:	cmn	r9, #2
   22424:	beq	234f8 <__assert_fail@plt+0x11664>
   22428:	ldr	r5, [sp, #80]	; 0x50
   2242c:	str	r9, [sp, #196]	; 0xc4
   22430:	ldr	r8, [sp, #96]	; 0x60
   22434:	cmp	sl, #2
   22438:	ldrb	r0, [r5, #28]
   2243c:	bcc	22448 <__assert_fail@plt+0x105b4>
   22440:	ands	r1, r0, #16
   22444:	beq	22454 <__assert_fail@plt+0x105c0>
   22448:	ldr	r1, [r8, #76]	; 0x4c
   2244c:	cmp	r1, #0
   22450:	beq	225b4 <__assert_fail@plt+0x10720>
   22454:	ldr	r0, [sp, #204]	; 0xcc
   22458:	cmn	r9, #1
   2245c:	ldr	r5, [r0, r9, lsl #2]
   22460:	ble	2249c <__assert_fail@plt+0x10608>
   22464:	ldr	r0, [sp, #152]	; 0x98
   22468:	cmp	r0, r9
   2246c:	beq	21178 <__assert_fail@plt+0xf2e4>
   22470:	ldr	r0, [sp, #184]	; 0xb8
   22474:	cmp	r0, #2
   22478:	blt	224ac <__assert_fail@plt+0x10618>
   2247c:	ldr	r0, [sp, #112]	; 0x70
   22480:	ldr	r4, [r0, r9, lsl #2]
   22484:	cmn	r4, #1
   22488:	bne	224e8 <__assert_fail@plt+0x10654>
   2248c:	sub	r1, r9, #1
   22490:	cmp	r9, #0
   22494:	mov	r9, r1
   22498:	bgt	22480 <__assert_fail@plt+0x105ec>
   2249c:	ldr	r3, [sp, #164]	; 0xa4
   224a0:	movw	r9, #65280	; 0xff00
   224a4:	movt	r9, #3
   224a8:	b	22514 <__assert_fail@plt+0x10680>
   224ac:	ldr	r0, [sp, #108]	; 0x6c
   224b0:	ldr	r1, [sp, #172]	; 0xac
   224b4:	mov	r3, #1
   224b8:	ldrb	r0, [r0, r9]
   224bc:	movw	r9, #65280	; 0xff00
   224c0:	movt	r9, #3
   224c4:	ubfx	r2, r0, #5, #3
   224c8:	ldr	r1, [r1, r2, lsl #2]
   224cc:	and	r2, r0, #31
   224d0:	tst	r1, r3, lsl r2
   224d4:	bne	22514 <__assert_fail@plt+0x10680>
   224d8:	mov	r3, #0
   224dc:	cmp	r0, #10
   224e0:	beq	22508 <__assert_fail@plt+0x10674>
   224e4:	b	22514 <__assert_fail@plt+0x10680>
   224e8:	ldrb	r0, [sp, #182]	; 0xb6
   224ec:	movw	r9, #65280	; 0xff00
   224f0:	movt	r9, #3
   224f4:	cmp	r0, #0
   224f8:	bne	21214 <__assert_fail@plt+0xf380>
   224fc:	mov	r3, #0
   22500:	cmp	r4, #10
   22504:	bne	22514 <__assert_fail@plt+0x10680>
   22508:	ldrb	r3, [sp, #181]	; 0xb5
   2250c:	cmp	r3, #0
   22510:	movwne	r3, #2
   22514:	ldr	r0, [r5, #8]
   22518:	cmp	r0, #1
   2251c:	blt	225a4 <__assert_fail@plt+0x10710>
   22520:	ldr	r1, [sp, #188]	; 0xbc
   22524:	ldr	r6, [r5, #12]
   22528:	and	ip, r3, #8
   2252c:	and	lr, r3, #2
   22530:	and	r3, r3, #1
   22534:	mov	r4, #0
   22538:	ldr	r5, [r1]
   2253c:	ldr	r7, [r6, r4, lsl #2]
   22540:	add	r1, r5, r7, lsl #3
   22544:	ldr	r1, [r1, #4]
   22548:	uxtb	r2, r1
   2254c:	cmp	r2, #2
   22550:	bne	22598 <__assert_fail@plt+0x10704>
   22554:	tst	r1, r9
   22558:	beq	225a8 <__assert_fail@plt+0x10714>
   2255c:	cmp	r3, #0
   22560:	bne	2256c <__assert_fail@plt+0x106d8>
   22564:	ands	r2, r1, #1024	; 0x400
   22568:	bne	22598 <__assert_fail@plt+0x10704>
   2256c:	cmp	r3, #0
   22570:	andsne	r2, r1, #2048	; 0x800
   22574:	bne	22598 <__assert_fail@plt+0x10704>
   22578:	cmp	lr, #0
   2257c:	bne	22588 <__assert_fail@plt+0x106f4>
   22580:	ands	r2, r1, #8192	; 0x2000
   22584:	bne	22598 <__assert_fail@plt+0x10704>
   22588:	cmp	ip, #0
   2258c:	bne	225a8 <__assert_fail@plt+0x10714>
   22590:	ands	r1, r1, #32768	; 0x8000
   22594:	beq	225a8 <__assert_fail@plt+0x10714>
   22598:	add	r4, r4, #1
   2259c:	cmp	r4, r0
   225a0:	blt	2253c <__assert_fail@plt+0x106a8>
   225a4:	mov	r7, #0
   225a8:	ldr	r5, [sp, #80]	; 0x50
   225ac:	str	r7, [sp, #200]	; 0xc8
   225b0:	ldrb	r0, [r5, #28]
   225b4:	sub	r6, fp, #48	; 0x30
   225b8:	cmp	sl, #2
   225bc:	bcc	225d4 <__assert_fail@plt+0x10740>
   225c0:	ands	r0, r0, #16
   225c4:	bne	225d4 <__assert_fail@plt+0x10740>
   225c8:	ldrb	r0, [r8, #88]	; 0x58
   225cc:	tst	r0, #1
   225d0:	bne	225e0 <__assert_fail@plt+0x1074c>
   225d4:	ldr	r0, [r8, #76]	; 0x4c
   225d8:	cmp	r0, #0
   225dc:	beq	2277c <__assert_fail@plt+0x108e8>
   225e0:	ldr	sl, [sp, #196]	; 0xc4
   225e4:	cmn	sl, #-1073741823	; 0xc0000001
   225e8:	bcs	234f8 <__assert_fail@plt+0x11664>
   225ec:	ldr	r0, [sp, #188]	; 0xbc
   225f0:	ldr	r6, [sp, #200]	; 0xc8
   225f4:	str	r0, [sp, #72]	; 0x48
   225f8:	mov	r0, #4
   225fc:	add	r4, r0, sl, lsl #2
   22600:	mov	r0, r4
   22604:	bl	33c98 <__assert_fail@plt+0x21e04>
   22608:	mov	r8, r0
   2260c:	cmp	r0, #0
   22610:	beq	2372c <__assert_fail@plt+0x11898>
   22614:	ldr	r0, [sp, #72]	; 0x48
   22618:	ldr	r0, [r0, #76]	; 0x4c
   2261c:	cmp	r0, #0
   22620:	beq	210cc <__assert_fail@plt+0xf238>
   22624:	mov	r0, r4
   22628:	bl	33c98 <__assert_fail@plt+0x21e04>
   2262c:	cmp	r0, #0
   22630:	beq	2372c <__assert_fail@plt+0x11898>
   22634:	mov	r1, #0
   22638:	mov	r2, r4
   2263c:	mov	r5, r0
   22640:	bl	11cd8 <memset@plt>
   22644:	sub	r0, fp, #188	; 0xbc
   22648:	str	r8, [fp, #-192]	; 0xffffff40
   2264c:	mov	r1, #0
   22650:	stm	r0, {r5, r6, sl}
   22654:	ldr	r0, [sp, #28]
   22658:	str	r1, [r0]
   2265c:	str	r1, [r0, #4]
   22660:	str	r1, [r0, #8]
   22664:	add	r0, sp, #104	; 0x68
   22668:	sub	r1, fp, #192	; 0xc0
   2266c:	bl	2e840 <__assert_fail@plt+0x1c9ac>
   22670:	mov	r9, r0
   22674:	mov	r0, #0
   22678:	bl	17754 <__assert_fail@plt+0x58c0>
   2267c:	cmp	r9, #0
   22680:	mov	r4, r5
   22684:	bne	21618 <__assert_fail@plt+0xf784>
   22688:	ldr	r0, [r8]
   2268c:	cmp	r0, #0
   22690:	beq	213ac <__assert_fail@plt+0xf518>
   22694:	mov	r1, #0
   22698:	cmp	sl, #0
   2269c:	mov	r9, #0
   226a0:	str	r1, [sp, #56]	; 0x38
   226a4:	blt	22738 <__assert_fail@plt+0x108a4>
   226a8:	mov	r7, #0
   226ac:	b	226c0 <__assert_fail@plt+0x1082c>
   226b0:	add	r0, r8, r7, lsl #2
   226b4:	add	r1, r7, #1
   226b8:	ldr	r0, [r0, #4]
   226bc:	mov	r7, r1
   226c0:	ldr	r2, [r4, r7, lsl #2]
   226c4:	cmp	r0, #0
   226c8:	beq	22728 <__assert_fail@plt+0x10894>
   226cc:	cmp	r2, #0
   226d0:	beq	2271c <__assert_fail@plt+0x10888>
   226d4:	sub	r5, fp, #48	; 0x30
   226d8:	add	r1, r0, #4
   226dc:	add	r2, r2, #4
   226e0:	mov	r0, r5
   226e4:	bl	2b9c4 <__assert_fail@plt+0x19b30>
   226e8:	cmp	r0, #0
   226ec:	str	r0, [fp, #-196]	; 0xffffff3c
   226f0:	bne	21120 <__assert_fail@plt+0xf28c>
   226f4:	ldr	r1, [sp, #72]	; 0x48
   226f8:	sub	r0, fp, #196	; 0xc4
   226fc:	mov	r2, r5
   22700:	bl	2cfb0 <__assert_fail@plt+0x1b11c>
   22704:	str	r0, [r8, r7, lsl #2]
   22708:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2270c:	bl	17754 <__assert_fail@plt+0x58c0>
   22710:	ldr	r9, [fp, #-196]	; 0xffffff3c
   22714:	cmp	r9, #0
   22718:	bne	22738 <__assert_fail@plt+0x108a4>
   2271c:	cmp	r7, sl
   22720:	blt	226b0 <__assert_fail@plt+0x1081c>
   22724:	b	22734 <__assert_fail@plt+0x108a0>
   22728:	str	r2, [r8, r7, lsl #2]
   2272c:	cmp	r7, sl
   22730:	blt	226b0 <__assert_fail@plt+0x1081c>
   22734:	mov	r9, #0
   22738:	mov	r0, r4
   2273c:	bl	17754 <__assert_fail@plt+0x58c0>
   22740:	cmp	r9, #0
   22744:	bne	2161c <__assert_fail@plt+0xf788>
   22748:	ldr	r0, [sp, #204]	; 0xcc
   2274c:	bl	17754 <__assert_fail@plt+0x58c0>
   22750:	mov	r0, #0
   22754:	str	r6, [sp, #200]	; 0xc8
   22758:	str	r8, [sp, #204]	; 0xcc
   2275c:	str	sl, [sp, #196]	; 0xc4
   22760:	bl	17754 <__assert_fail@plt+0x58c0>
   22764:	mov	r0, #0
   22768:	bl	17754 <__assert_fail@plt+0x58c0>
   2276c:	ldr	r8, [sp, #96]	; 0x60
   22770:	ldr	sl, [sp, #92]	; 0x5c
   22774:	ldr	r5, [sp, #80]	; 0x50
   22778:	sub	r6, fp, #48	; 0x30
   2277c:	cmp	sl, #0
   22780:	beq	236c8 <__assert_fail@plt+0x11834>
   22784:	ldr	r4, [sp, #32]
   22788:	cmp	sl, #1
   2278c:	beq	227b0 <__assert_fail@plt+0x1091c>
   22790:	ldr	r1, [fp, #16]
   22794:	mvn	r0, r4
   22798:	add	r0, r0, r1
   2279c:	mov	r1, #255	; 0xff
   227a0:	lsl	r2, r0, #3
   227a4:	ldr	r0, [fp, #20]
   227a8:	add	r0, r0, #8
   227ac:	bl	11cd8 <memset@plt>
   227b0:	ldr	r0, [sp, #196]	; 0xc4
   227b4:	ldr	r1, [fp, #20]
   227b8:	mov	r9, #0
   227bc:	cmp	sl, #2
   227c0:	str	r9, [r1]
   227c4:	str	r0, [r1, #4]
   227c8:	bcc	235a8 <__assert_fail@plt+0x11714>
   227cc:	ldrb	r0, [r5, #28]
   227d0:	ands	r0, r0, #16
   227d4:	bne	235a8 <__assert_fail@plt+0x11714>
   227d8:	ldrb	r1, [r8, #88]	; 0x58
   227dc:	mov	r0, #0
   227e0:	tst	r1, #1
   227e4:	mov	r1, #0
   227e8:	beq	227fc <__assert_fail@plt+0x10968>
   227ec:	ldr	r2, [r8, #76]	; 0x4c
   227f0:	mov	r1, #0
   227f4:	cmp	r2, #0
   227f8:	movwgt	r1, #1
   227fc:	movw	r2, #29320	; 0x7288
   22800:	ldr	r7, [r5]
   22804:	cmp	r1, #0
   22808:	mov	r1, #0
   2280c:	movt	r2, #3
   22810:	vldr	d16, [r2]
   22814:	ldr	r2, [r2, #8]
   22818:	str	r2, [fp, #-40]	; 0xffffffd8
   2281c:	mov	r2, #16
   22820:	vstr	d16, [fp, #-48]	; 0xffffffd0
   22824:	str	r2, [fp, #-188]	; 0xffffff44
   22828:	sub	r2, fp, #192	; 0xc0
   2282c:	str	r0, [fp, #-192]	; 0xffffff40
   22830:	add	r5, r2, #12
   22834:	str	r5, [fp, #-184]	; 0xffffff48
   22838:	beq	22858 <__assert_fail@plt+0x109c4>
   2283c:	mov	r0, #48	; 0x30
   22840:	bl	33c98 <__assert_fail@plt+0x21e04>
   22844:	cmp	r0, #0
   22848:	str	r0, [fp, #-40]	; 0xffffffd8
   2284c:	beq	234f8 <__assert_fail@plt+0x11664>
   22850:	ldr	r0, [fp, #-192]	; 0xffffff40
   22854:	mov	r1, r6
   22858:	str	r7, [sp, #68]	; 0x44
   2285c:	ldr	r7, [r7, #72]	; 0x48
   22860:	cmp	r0, sl
   22864:	str	r5, [sp, #76]	; 0x4c
   22868:	str	r1, [sp, #80]	; 0x50
   2286c:	bcs	22958 <__assert_fail@plt+0x10ac4>
   22870:	ldr	r2, [sp, #76]	; 0x4c
   22874:	sub	r0, fp, #192	; 0xc0
   22878:	mov	r1, sl
   2287c:	mov	r3, #8
   22880:	bl	348dc <__assert_fail@plt+0x22a48>
   22884:	cmp	r0, #0
   22888:	bne	2295c <__assert_fail@plt+0x10ac8>
   2288c:	ldr	r0, [fp, #-184]	; 0xffffff48
   22890:	ldr	r1, [sp, #76]	; 0x4c
   22894:	cmp	r0, r1
   22898:	beq	228a0 <__assert_fail@plt+0x10a0c>
   2289c:	bl	17754 <__assert_fail@plt+0x58c0>
   228a0:	mov	r0, #16
   228a4:	mov	r9, #12
   228a8:	str	r0, [fp, #-188]	; 0xffffff44
   228ac:	mov	r0, #0
   228b0:	str	r0, [fp, #-192]	; 0xffffff40
   228b4:	ldr	r0, [sp, #76]	; 0x4c
   228b8:	str	r0, [fp, #-184]	; 0xffffff48
   228bc:	ldr	r0, [sp, #80]	; 0x50
   228c0:	cmp	r0, #0
   228c4:	beq	236cc <__assert_fail@plt+0x11838>
   228c8:	ldr	r0, [sp, #80]	; 0x50
   228cc:	ldr	r1, [r0]
   228d0:	ldr	r0, [r0, #8]
   228d4:	cmp	r1, #1
   228d8:	blt	237d4 <__assert_fail@plt+0x11940>
   228dc:	ldr	r4, [sp, #80]	; 0x50
   228e0:	mov	r5, #0
   228e4:	mov	r6, #0
   228e8:	add	r0, r0, r5
   228ec:	ldr	r0, [r0, #20]
   228f0:	bl	17754 <__assert_fail@plt+0x58c0>
   228f4:	ldr	r0, [r4, #8]
   228f8:	add	r0, r0, r5
   228fc:	ldr	r0, [r0, #8]
   22900:	bl	17754 <__assert_fail@plt+0x58c0>
   22904:	ldr	r1, [r4]
   22908:	ldr	r0, [r4, #8]
   2290c:	add	r6, r6, #1
   22910:	add	r5, r5, #24
   22914:	cmp	r6, r1
   22918:	blt	228e8 <__assert_fail@plt+0x10a54>
   2291c:	b	237d4 <__assert_fail@plt+0x11940>
   22920:	ldr	r1, [r3, #8]
   22924:	cmp	r1, #0
   22928:	beq	22938 <__assert_fail@plt+0x10aa4>
   2292c:	ldrsb	r1, [sl, #28]
   22930:	cmp	r1, #0
   22934:	blt	20d98 <__assert_fail@plt+0xef04>
   22938:	mov	r1, #0
   2293c:	cmp	r6, #0
   22940:	str	r1, [sp, #76]	; 0x4c
   22944:	beq	234f0 <__assert_fail@plt+0x1165c>
   22948:	cmp	r0, #0
   2294c:	mov	r6, #0
   22950:	bne	23720 <__assert_fail@plt+0x1188c>
   22954:	b	20d9c <__assert_fail@plt+0xef08>
   22958:	str	sl, [fp, #-192]	; 0xffffff40
   2295c:	ldr	r5, [fp, #20]
   22960:	ldr	r0, [fp, #-184]	; 0xffffff48
   22964:	lsl	r2, sl, #3
   22968:	str	r2, [sp, #56]	; 0x38
   2296c:	mov	r1, r5
   22970:	str	r0, [sp, #60]	; 0x3c
   22974:	bl	11a8c <memcpy@plt>
   22978:	ldr	r6, [r5]
   2297c:	ldr	r0, [r5, #4]
   22980:	mov	ip, #0
   22984:	cmp	r6, r0
   22988:	ble	22a18 <__assert_fail@plt+0x10b84>
   2298c:	mov	r0, ip
   22990:	bl	17754 <__assert_fail@plt+0x58c0>
   22994:	ldr	r0, [fp, #-184]	; 0xffffff48
   22998:	ldr	r5, [sp, #76]	; 0x4c
   2299c:	cmp	r0, r5
   229a0:	beq	229a8 <__assert_fail@plt+0x10b14>
   229a4:	bl	17754 <__assert_fail@plt+0x58c0>
   229a8:	ldr	r6, [sp, #80]	; 0x50
   229ac:	mov	r0, #16
   229b0:	str	r0, [fp, #-188]	; 0xffffff44
   229b4:	mov	r0, #0
   229b8:	str	r0, [fp, #-192]	; 0xffffff40
   229bc:	str	r5, [fp, #-184]	; 0xffffff48
   229c0:	cmp	r6, #0
   229c4:	beq	235a8 <__assert_fail@plt+0x11714>
   229c8:	ldr	r1, [r6]
   229cc:	ldr	r0, [r6, #8]
   229d0:	cmp	r1, #1
   229d4:	blt	235a0 <__assert_fail@plt+0x1170c>
   229d8:	mov	r4, #0
   229dc:	mov	r5, #0
   229e0:	add	r0, r0, r4
   229e4:	ldr	r0, [r0, #20]
   229e8:	bl	17754 <__assert_fail@plt+0x58c0>
   229ec:	ldr	r0, [r6, #8]
   229f0:	add	r0, r0, r4
   229f4:	ldr	r0, [r0, #8]
   229f8:	bl	17754 <__assert_fail@plt+0x58c0>
   229fc:	ldr	r1, [r6]
   22a00:	ldr	r0, [r6, #8]
   22a04:	add	r5, r5, #1
   22a08:	add	r4, r4, #24
   22a0c:	cmp	r5, r1
   22a10:	blt	229e0 <__assert_fail@plt+0x10b4c>
   22a14:	b	235a0 <__assert_fail@plt+0x1170c>
   22a18:	lsl	r0, sl, #4
   22a1c:	mov	lr, #1
   22a20:	mov	r1, #0
   22a24:	mov	ip, #0
   22a28:	str	r0, [sp, #48]	; 0x30
   22a2c:	mov	r0, #0
   22a30:	str	r0, [sp, #52]	; 0x34
   22a34:	ldr	r0, [sp, #68]	; 0x44
   22a38:	mov	r5, r1
   22a3c:	ldr	r0, [r0]
   22a40:	add	r1, r0, r7, lsl #3
   22a44:	ldr	r3, [r1, #4]
   22a48:	uxtb	r2, r3
   22a4c:	cmp	r2, #9
   22a50:	beq	22a80 <__assert_fail@plt+0x10bec>
   22a54:	cmp	r2, #8
   22a58:	bne	22af4 <__assert_fail@plt+0x10c60>
   22a5c:	ldr	r0, [r0, r7, lsl #3]
   22a60:	add	r0, r0, #1
   22a64:	cmp	r0, sl
   22a68:	bge	22af4 <__assert_fail@plt+0x10c60>
   22a6c:	ldr	r1, [fp, #20]
   22a70:	str	r6, [r1, r0, lsl #3]!
   22a74:	mvn	r0, #0
   22a78:	str	r0, [r1, #4]
   22a7c:	b	22af4 <__assert_fail@plt+0x10c60>
   22a80:	ldr	r0, [r0, r7, lsl #3]
   22a84:	add	r0, r0, #1
   22a88:	cmp	r0, sl
   22a8c:	bge	22af4 <__assert_fail@plt+0x10c60>
   22a90:	ldr	r1, [fp, #20]
   22a94:	ldr	r2, [r1, r0, lsl #3]
   22a98:	cmp	r2, r6
   22a9c:	bge	22ab0 <__assert_fail@plt+0x10c1c>
   22aa0:	add	r0, r1, r0, lsl #3
   22aa4:	str	r6, [r0, #4]
   22aa8:	ldr	r0, [sp, #60]	; 0x3c
   22aac:	b	22ad0 <__assert_fail@plt+0x10c3c>
   22ab0:	tst	r3, #524288	; 0x80000
   22ab4:	beq	22ae8 <__assert_fail@plt+0x10c54>
   22ab8:	ldr	r1, [sp, #60]	; 0x3c
   22abc:	ldr	r1, [r1, r0, lsl #3]
   22ac0:	cmn	r1, #1
   22ac4:	beq	22ae8 <__assert_fail@plt+0x10c54>
   22ac8:	ldr	r0, [fp, #20]
   22acc:	ldr	r1, [sp, #60]	; 0x3c
   22ad0:	ldr	r2, [sp, #56]	; 0x38
   22ad4:	str	ip, [sp, #64]	; 0x40
   22ad8:	bl	11a8c <memcpy@plt>
   22adc:	ldr	ip, [sp, #64]	; 0x40
   22ae0:	mov	lr, #1
   22ae4:	b	22af4 <__assert_fail@plt+0x10c60>
   22ae8:	ldr	r1, [fp, #20]
   22aec:	add	r0, r1, r0, lsl #3
   22af0:	str	r6, [r0, #4]
   22af4:	ldr	r0, [fp, #20]
   22af8:	ldr	r0, [r0, #4]
   22afc:	cmp	r6, r0
   22b00:	ldreq	r0, [sp, #200]	; 0xc8
   22b04:	cmpeq	r7, r0
   22b08:	beq	22b64 <__assert_fail@plt+0x10cd0>
   22b0c:	ldr	r0, [sp, #80]	; 0x50
   22b10:	cmp	r0, #0
   22b14:	beq	22ba8 <__assert_fail@plt+0x10d14>
   22b18:	mov	r2, r5
   22b1c:	cmp	r5, #1
   22b20:	blt	22c44 <__assert_fail@plt+0x10db0>
   22b24:	mov	r0, #0
   22b28:	subs	r1, r2, #1
   22b2c:	str	r6, [sp, #72]	; 0x48
   22b30:	beq	22b54 <__assert_fail@plt+0x10cc0>
   22b34:	add	r2, r0, r1
   22b38:	lsr	r3, r2, #1
   22b3c:	ldr	r6, [ip, r3, lsl #2]
   22b40:	cmp	r6, r7
   22b44:	movge	r1, r3
   22b48:	addlt	r0, lr, r2, lsr #1
   22b4c:	cmp	r0, r1
   22b50:	bcc	22b34 <__assert_fail@plt+0x10ca0>
   22b54:	ldr	r0, [ip, r0, lsl #2]
   22b58:	ldr	r6, [sp, #72]	; 0x48
   22b5c:	cmp	r0, r7
   22b60:	bne	22ba8 <__assert_fail@plt+0x10d14>
   22b64:	ldr	r6, [sp, #80]	; 0x50
   22b68:	cmp	r6, #0
   22b6c:	beq	2351c <__assert_fail@plt+0x11688>
   22b70:	ldr	r5, [sp, #76]	; 0x4c
   22b74:	mov	r0, #0
   22b78:	ldr	r2, [fp, #20]
   22b7c:	ldr	r1, [r2, r0, lsl #3]
   22b80:	cmp	r1, #0
   22b84:	blt	22b98 <__assert_fail@plt+0x10d04>
   22b88:	add	r1, r2, r0, lsl #3
   22b8c:	ldr	r1, [r1, #4]
   22b90:	cmn	r1, #1
   22b94:	beq	22bb0 <__assert_fail@plt+0x10d1c>
   22b98:	add	r0, r0, #1
   22b9c:	cmp	r0, sl
   22ba0:	bcc	22b78 <__assert_fail@plt+0x10ce4>
   22ba4:	b	23520 <__assert_fail@plt+0x1168c>
   22ba8:	mov	r2, r5
   22bac:	b	22c44 <__assert_fail@plt+0x10db0>
   22bb0:	ldr	r0, [r6]
   22bb4:	cmp	r0, #0
   22bb8:	beq	23520 <__assert_fail@plt+0x1168c>
   22bbc:	sub	r0, r0, #1
   22bc0:	ldr	r7, [sp, #56]	; 0x38
   22bc4:	str	ip, [sp, #64]	; 0x40
   22bc8:	str	r0, [r6]
   22bcc:	add	r5, r0, r0, lsl #1
   22bd0:	ldr	r4, [r6, #8]
   22bd4:	mov	r2, r7
   22bd8:	ldr	r0, [r4, r5, lsl #3]!
   22bdc:	str	r0, [sp, #72]	; 0x48
   22be0:	ldr	r1, [r4, #8]
   22be4:	ldr	r0, [fp, #20]
   22be8:	bl	11a8c <memcpy@plt>
   22bec:	ldr	r0, [r4, #8]
   22bf0:	mov	r2, r7
   22bf4:	add	r1, r0, sl, lsl #3
   22bf8:	ldr	r0, [sp, #60]	; 0x3c
   22bfc:	bl	11a8c <memcpy@plt>
   22c00:	ldr	r0, [sp, #64]	; 0x40
   22c04:	bl	17754 <__assert_fail@plt+0x58c0>
   22c08:	ldr	r0, [r6, #8]
   22c0c:	add	r0, r0, r5, lsl #3
   22c10:	ldr	r0, [r0, #8]
   22c14:	bl	17754 <__assert_fail@plt+0x58c0>
   22c18:	ldr	r0, [r6, #8]
   22c1c:	add	r0, r0, r5, lsl #3
   22c20:	ldr	r7, [r0, #4]
   22c24:	ldr	ip, [r0, #20]
   22c28:	cmn	r7, #1
   22c2c:	ble	23514 <__assert_fail@plt+0x11680>
   22c30:	ldr	r1, [r0, #12]
   22c34:	ldr	r2, [r0, #16]
   22c38:	ldr	r6, [sp, #72]	; 0x48
   22c3c:	mov	lr, #1
   22c40:	str	r1, [sp, #52]	; 0x34
   22c44:	ldr	r5, [sp, #188]	; 0xbc
   22c48:	ldr	r0, [r5]
   22c4c:	add	r1, r0, r7, lsl #3
   22c50:	ldr	r1, [r1, #4]
   22c54:	tst	r1, #8
   22c58:	bne	22cf8 <__assert_fail@plt+0x10e64>
   22c5c:	tst	r1, #1048576	; 0x100000
   22c60:	bne	22d80 <__assert_fail@plt+0x10eec>
   22c64:	uxtb	r1, r1
   22c68:	cmp	r1, #4
   22c6c:	bne	22db4 <__assert_fail@plt+0x10f20>
   22c70:	ldr	r0, [r0, r7, lsl #3]
   22c74:	mov	r4, #0
   22c78:	add	r0, r0, #1
   22c7c:	cmp	r0, sl
   22c80:	bge	22c9c <__assert_fail@plt+0x10e08>
   22c84:	ldr	r1, [fp, #20]
   22c88:	mov	r3, r2
   22c8c:	ldr	r2, [r1, r0, lsl #3]!
   22c90:	ldr	r1, [r1, #4]
   22c94:	sub	r4, r1, r2
   22c98:	mov	r2, r3
   22c9c:	ldr	r1, [sp, #80]	; 0x50
   22ca0:	cmp	r1, #0
   22ca4:	beq	230f0 <__assert_fail@plt+0x1125c>
   22ca8:	cmp	r0, sl
   22cac:	bge	22cf0 <__assert_fail@plt+0x10e5c>
   22cb0:	mov	r3, r2
   22cb4:	ldr	r2, [fp, #20]
   22cb8:	ldr	r1, [r2, r0, lsl #3]
   22cbc:	cmn	r1, #1
   22cc0:	beq	22cf0 <__assert_fail@plt+0x10e5c>
   22cc4:	add	r0, r2, r0, lsl #3
   22cc8:	ldr	r0, [r0, #4]
   22ccc:	cmn	r0, #1
   22cd0:	beq	22cf0 <__assert_fail@plt+0x10e5c>
   22cd4:	cmp	r4, #0
   22cd8:	mov	r2, r3
   22cdc:	beq	23114 <__assert_fail@plt+0x11280>
   22ce0:	ldr	r0, [sp, #132]	; 0x84
   22ce4:	sub	r0, r0, r6
   22ce8:	cmp	r0, r4
   22cec:	bge	232f4 <__assert_fail@plt+0x11460>
   22cf0:	ldr	r7, [sp, #80]	; 0x50
   22cf4:	b	22f8c <__assert_fail@plt+0x110f8>
   22cf8:	ldr	r0, [sp, #204]	; 0xcc
   22cfc:	ldr	r4, [r5, #20]
   22d00:	cmp	r2, #1
   22d04:	ldr	r0, [r0, r6, lsl #2]
   22d08:	str	r0, [sp, #88]	; 0x58
   22d0c:	blt	22d60 <__assert_fail@plt+0x10ecc>
   22d10:	str	r4, [sp, #100]	; 0x64
   22d14:	mov	r5, r6
   22d18:	mov	r4, r2
   22d1c:	mov	r0, #0
   22d20:	subs	r1, r2, #1
   22d24:	beq	22d48 <__assert_fail@plt+0x10eb4>
   22d28:	add	r2, r0, r1
   22d2c:	lsr	r3, r2, #1
   22d30:	ldr	r6, [ip, r3, lsl #2]
   22d34:	cmp	r6, r7
   22d38:	movge	r1, r3
   22d3c:	addlt	r0, lr, r2, lsr #1
   22d40:	cmp	r0, r1
   22d44:	bcc	22d28 <__assert_fail@plt+0x10e94>
   22d48:	ldr	r0, [ip, r0, lsl #2]
   22d4c:	mov	r2, r4
   22d50:	ldr	r4, [sp, #100]	; 0x64
   22d54:	mov	r6, r5
   22d58:	cmp	r0, r7
   22d5c:	beq	22e94 <__assert_fail@plt+0x11000>
   22d60:	ldr	r0, [sp, #52]	; 0x34
   22d64:	cmp	r0, #0
   22d68:	beq	22e70 <__assert_fail@plt+0x10fdc>
   22d6c:	cmp	r2, #0
   22d70:	bne	2333c <__assert_fail@plt+0x114a8>
   22d74:	str	r7, [ip]
   22d78:	mov	r2, #1
   22d7c:	b	22e94 <__assert_fail@plt+0x11000>
   22d80:	mov	r0, r5
   22d84:	mov	r1, r7
   22d88:	add	r2, sp, #104	; 0x68
   22d8c:	mov	r3, r6
   22d90:	str	r5, [sp, #100]	; 0x64
   22d94:	mov	r4, ip
   22d98:	bl	2d240 <__assert_fail@plt+0x1b3ac>
   22d9c:	mov	lr, #1
   22da0:	mov	ip, r4
   22da4:	mov	r1, r0
   22da8:	ldr	r5, [sp, #100]	; 0x64
   22dac:	cmp	r1, #0
   22db0:	bne	22de0 <__assert_fail@plt+0x10f4c>
   22db4:	ldr	r0, [r5]
   22db8:	mov	r2, r6
   22dbc:	mov	r4, ip
   22dc0:	add	r1, r0, r7, lsl #3
   22dc4:	add	r0, sp, #104	; 0x68
   22dc8:	bl	2d534 <__assert_fail@plt+0x1b6a0>
   22dcc:	mov	lr, #1
   22dd0:	mov	ip, r4
   22dd4:	mov	r1, #1
   22dd8:	cmp	r0, #0
   22ddc:	beq	22f80 <__assert_fail@plt+0x110ec>
   22de0:	ldr	r0, [r5, #12]
   22de4:	add	r6, r1, r6
   22de8:	ldr	r5, [r0, r7, lsl #2]
   22dec:	ldr	r7, [sp, #80]	; 0x50
   22df0:	cmp	r7, #0
   22df4:	beq	2302c <__assert_fail@plt+0x11198>
   22df8:	ldr	r0, [sp, #196]	; 0xc4
   22dfc:	cmp	r6, r0
   22e00:	bgt	22f8c <__assert_fail@plt+0x110f8>
   22e04:	ldr	r0, [sp, #204]	; 0xcc
   22e08:	ldr	r0, [r0, r6, lsl #2]
   22e0c:	cmp	r0, #0
   22e10:	beq	22f8c <__assert_fail@plt+0x110f8>
   22e14:	ldr	r1, [r0, #8]
   22e18:	cmp	r1, #1
   22e1c:	blt	22f8c <__assert_fail@plt+0x110f8>
   22e20:	ldr	r0, [r0, #12]
   22e24:	mov	r4, r6
   22e28:	subs	r1, r1, #1
   22e2c:	mov	r2, #0
   22e30:	beq	22e58 <__assert_fail@plt+0x10fc4>
   22e34:	mov	r2, #0
   22e38:	add	r3, r2, r1
   22e3c:	lsr	r7, r3, #1
   22e40:	ldr	r6, [r0, r7, lsl #2]
   22e44:	cmp	r6, r5
   22e48:	movge	r1, r7
   22e4c:	addlt	r2, lr, r3, lsr #1
   22e50:	cmp	r2, r1
   22e54:	bcc	22e38 <__assert_fail@plt+0x10fa4>
   22e58:	ldr	r0, [r0, r2, lsl #2]
   22e5c:	mov	r6, r4
   22e60:	mov	r1, #0
   22e64:	cmp	r0, r5
   22e68:	beq	2320c <__assert_fail@plt+0x11378>
   22e6c:	b	22f80 <__assert_fail@plt+0x110ec>
   22e70:	mov	r0, #4
   22e74:	bl	33c98 <__assert_fail@plt+0x21e04>
   22e78:	cmp	r0, #0
   22e7c:	beq	2387c <__assert_fail@plt+0x119e8>
   22e80:	mov	ip, r0
   22e84:	str	r7, [r0]
   22e88:	mov	r0, #1
   22e8c:	mov	r2, #1
   22e90:	str	r0, [sp, #52]	; 0x34
   22e94:	add	r0, r7, r7, lsl #1
   22e98:	add	r1, r4, r0, lsl #2
   22e9c:	ldr	lr, [r1, #4]
   22ea0:	cmp	lr, #1
   22ea4:	blt	22f80 <__assert_fail@plt+0x110ec>
   22ea8:	ldr	r0, [r1, #8]
   22eac:	str	r2, [sp, #44]	; 0x2c
   22eb0:	str	r6, [sp, #72]	; 0x48
   22eb4:	mov	r6, #0
   22eb8:	mvn	r5, #0
   22ebc:	str	ip, [sp, #64]	; 0x40
   22ec0:	str	r0, [sp, #84]	; 0x54
   22ec4:	ldr	r0, [sp, #88]	; 0x58
   22ec8:	ldr	r2, [r0, #8]
   22ecc:	sub	r1, r2, #1
   22ed0:	cmp	r2, #1
   22ed4:	blt	22f54 <__assert_fail@plt+0x110c0>
   22ed8:	ldr	r0, [sp, #84]	; 0x54
   22edc:	str	r5, [sp, #100]	; 0x64
   22ee0:	mov	r5, #0
   22ee4:	cmp	r1, #0
   22ee8:	ldr	r7, [r0, r6, lsl #2]
   22eec:	ldr	r0, [sp, #88]	; 0x58
   22ef0:	ldr	r4, [r0, #12]
   22ef4:	beq	22f20 <__assert_fail@plt+0x1108c>
   22ef8:	mov	r3, r1
   22efc:	mov	ip, #1
   22f00:	add	r0, r5, r3
   22f04:	lsr	r8, r0, #1
   22f08:	ldr	sl, [r4, r8, lsl #2]
   22f0c:	cmp	sl, r7
   22f10:	movge	r3, r8
   22f14:	addlt	r5, ip, r0, lsr #1
   22f18:	cmp	r5, r3
   22f1c:	bcc	22f00 <__assert_fail@plt+0x1106c>
   22f20:	ldr	r0, [r4, r5, lsl #2]
   22f24:	cmp	r0, r7
   22f28:	bne	22f48 <__assert_fail@plt+0x110b4>
   22f2c:	ldr	r4, [sp, #100]	; 0x64
   22f30:	ldr	r8, [sp, #96]	; 0x60
   22f34:	ldr	sl, [sp, #92]	; 0x5c
   22f38:	cmn	r4, #1
   22f3c:	bne	2303c <__assert_fail@plt+0x111a8>
   22f40:	mov	r5, r7
   22f44:	b	22f54 <__assert_fail@plt+0x110c0>
   22f48:	ldr	r8, [sp, #96]	; 0x60
   22f4c:	ldr	sl, [sp, #92]	; 0x5c
   22f50:	ldr	r5, [sp, #100]	; 0x64
   22f54:	add	r6, r6, #1
   22f58:	cmp	r6, lr
   22f5c:	blt	22ed0 <__assert_fail@plt+0x1103c>
   22f60:	ldr	ip, [sp, #64]	; 0x40
   22f64:	ldr	r6, [sp, #72]	; 0x48
   22f68:	ldr	r1, [sp, #44]	; 0x2c
   22f6c:	mov	lr, #1
   22f70:	cmn	r5, #1
   22f74:	bgt	23214 <__assert_fail@plt+0x11380>
   22f78:	cmn	r5, #2
   22f7c:	beq	237e0 <__assert_fail@plt+0x1194c>
   22f80:	ldr	r7, [sp, #80]	; 0x50
   22f84:	cmp	r7, #0
   22f88:	beq	23744 <__assert_fail@plt+0x118b0>
   22f8c:	ldr	r0, [r7]
   22f90:	mov	r4, #0
   22f94:	cmp	r0, #0
   22f98:	beq	23748 <__assert_fail@plt+0x118b4>
   22f9c:	sub	r0, r0, #1
   22fa0:	ldr	r5, [sp, #56]	; 0x38
   22fa4:	str	ip, [sp, #64]	; 0x40
   22fa8:	str	r0, [r7]
   22fac:	add	r6, r0, r0, lsl #1
   22fb0:	ldr	r4, [r7, #8]
   22fb4:	mov	r2, r5
   22fb8:	ldr	r0, [r4, r6, lsl #3]!
   22fbc:	str	r0, [sp, #72]	; 0x48
   22fc0:	ldr	r1, [r4, #8]
   22fc4:	ldr	r0, [fp, #20]
   22fc8:	bl	11a8c <memcpy@plt>
   22fcc:	ldr	r0, [r4, #8]
   22fd0:	mov	r2, r5
   22fd4:	add	r1, r0, sl, lsl #3
   22fd8:	ldr	r0, [sp, #60]	; 0x3c
   22fdc:	bl	11a8c <memcpy@plt>
   22fe0:	ldr	r0, [sp, #64]	; 0x40
   22fe4:	bl	17754 <__assert_fail@plt+0x58c0>
   22fe8:	ldr	r0, [r7, #8]
   22fec:	add	r0, r0, r6, lsl #3
   22ff0:	ldr	r0, [r0, #8]
   22ff4:	bl	17754 <__assert_fail@plt+0x58c0>
   22ff8:	ldr	r0, [r7, #8]
   22ffc:	add	r0, r0, r6, lsl #3
   23000:	ldr	r7, [r0, #4]
   23004:	ldr	ip, [r0, #20]
   23008:	cmn	r7, #1
   2300c:	ble	23500 <__assert_fail@plt+0x1166c>
   23010:	ldr	r1, [r0, #12]
   23014:	ldr	r4, [sp, #32]
   23018:	ldr	r6, [sp, #72]	; 0x48
   2301c:	mov	lr, #1
   23020:	str	r1, [sp, #52]	; 0x34
   23024:	ldr	r1, [r0, #16]
   23028:	b	2321c <__assert_fail@plt+0x11388>
   2302c:	mov	r1, #0
   23030:	cmn	r5, #1
   23034:	bgt	23214 <__assert_fail@plt+0x11380>
   23038:	b	22f78 <__assert_fail@plt+0x110e4>
   2303c:	ldr	r1, [sp, #44]	; 0x2c
   23040:	ldr	ip, [sp, #64]	; 0x40
   23044:	mov	lr, #1
   23048:	cmp	r1, #1
   2304c:	blt	230a0 <__assert_fail@plt+0x1120c>
   23050:	mov	r0, #0
   23054:	subs	r1, r1, #1
   23058:	beq	2307c <__assert_fail@plt+0x111e8>
   2305c:	add	r2, r0, r1
   23060:	lsr	r3, r2, #1
   23064:	ldr	r6, [ip, r3, lsl #2]
   23068:	cmp	r6, r4
   2306c:	movge	r1, r3
   23070:	addlt	r0, lr, r2, lsr #1
   23074:	cmp	r0, r1
   23078:	bcc	2305c <__assert_fail@plt+0x111c8>
   2307c:	ldr	r0, [ip, r0, lsl #2]
   23080:	ldr	r1, [sp, #44]	; 0x2c
   23084:	cmp	r0, r4
   23088:	bne	230a0 <__assert_fail@plt+0x1120c>
   2308c:	ldr	r6, [sp, #72]	; 0x48
   23090:	mov	r5, r7
   23094:	cmn	r5, #1
   23098:	bgt	23214 <__assert_fail@plt+0x11380>
   2309c:	b	22f78 <__assert_fail@plt+0x110e4>
   230a0:	ldr	r5, [sp, #80]	; 0x50
   230a4:	cmp	r5, #0
   230a8:	beq	23204 <__assert_fail@plt+0x11370>
   230ac:	ldr	r6, [r5]
   230b0:	ldr	r0, [r5, #4]
   230b4:	add	r1, r6, #1
   230b8:	cmp	r1, r0
   230bc:	str	r1, [r5]
   230c0:	bne	23138 <__assert_fail@plt+0x112a4>
   230c4:	ldr	r0, [r5, #8]
   230c8:	add	r1, r1, r1, lsl #1
   230cc:	lsl	r1, r1, #4
   230d0:	bl	33cc8 <__assert_fail@plt+0x21e34>
   230d4:	cmp	r0, #0
   230d8:	beq	237dc <__assert_fail@plt+0x11948>
   230dc:	str	r0, [r5, #8]
   230e0:	ldr	r1, [r5, #4]
   230e4:	lsl	r1, r1, #1
   230e8:	str	r1, [r5, #4]
   230ec:	b	2313c <__assert_fail@plt+0x112a8>
   230f0:	cmp	r4, #0
   230f4:	beq	23114 <__assert_fail@plt+0x11280>
   230f8:	ldr	r0, [r5, #12]
   230fc:	add	r6, r4, r6
   23100:	mov	r1, #0
   23104:	ldr	r5, [r0, r7, lsl #2]
   23108:	cmn	r5, #1
   2310c:	bgt	23214 <__assert_fail@plt+0x11380>
   23110:	b	22f78 <__assert_fail@plt+0x110e4>
   23114:	ldr	r0, [sp, #52]	; 0x34
   23118:	str	r5, [sp, #100]	; 0x64
   2311c:	cmp	r0, #0
   23120:	beq	23230 <__assert_fail@plt+0x1139c>
   23124:	cmp	r2, #0
   23128:	bne	23414 <__assert_fail@plt+0x11580>
   2312c:	str	r7, [ip]
   23130:	mov	r5, #1
   23134:	b	23258 <__assert_fail@plt+0x113c4>
   23138:	ldr	r0, [r5, #8]
   2313c:	ldr	r1, [sp, #72]	; 0x48
   23140:	add	r6, r6, r6, lsl #1
   23144:	str	r1, [r0, r6, lsl #3]!
   23148:	str	r7, [r0, #4]
   2314c:	ldr	r0, [sp, #48]	; 0x30
   23150:	bl	33c98 <__assert_fail@plt+0x21e04>
   23154:	ldr	r1, [r5, #8]
   23158:	cmp	r0, #0
   2315c:	add	r4, r1, r6, lsl #3
   23160:	str	r0, [r4, #8]!
   23164:	beq	237dc <__assert_fail@plt+0x11948>
   23168:	ldr	r7, [sp, #56]	; 0x38
   2316c:	ldr	r1, [fp, #20]
   23170:	mov	r2, r7
   23174:	bl	11a8c <memcpy@plt>
   23178:	ldr	r0, [r4]
   2317c:	ldr	r1, [sp, #60]	; 0x3c
   23180:	mov	r2, r7
   23184:	add	r0, r0, sl, lsl #3
   23188:	bl	11a8c <memcpy@plt>
   2318c:	ldr	r0, [r5, #8]
   23190:	ldr	r1, [sp, #44]	; 0x2c
   23194:	add	r6, r0, r6, lsl #3
   23198:	cmp	r1, #1
   2319c:	mov	r5, r6
   231a0:	str	r1, [r5, #16]!
   231a4:	sub	r4, r5, #4
   231a8:	blt	231ec <__assert_fail@plt+0x11358>
   231ac:	lsl	r7, r1, #2
   231b0:	str	r1, [r4]
   231b4:	mov	r0, r7
   231b8:	bl	33c98 <__assert_fail@plt+0x21e04>
   231bc:	cmp	r0, #0
   231c0:	str	r0, [r6, #20]
   231c4:	beq	23884 <__assert_fail@plt+0x119f0>
   231c8:	ldr	r4, [sp, #64]	; 0x40
   231cc:	mov	r2, r7
   231d0:	mov	r1, r4
   231d4:	bl	11a8c <memcpy@plt>
   231d8:	ldr	r6, [sp, #72]	; 0x48
   231dc:	ldr	r1, [sp, #44]	; 0x2c
   231e0:	ldr	r5, [sp, #100]	; 0x64
   231e4:	mov	ip, r4
   231e8:	b	22f6c <__assert_fail@plt+0x110d8>
   231ec:	ldr	ip, [sp, #64]	; 0x40
   231f0:	mov	r0, #0
   231f4:	mov	lr, #1
   231f8:	str	r0, [r4]
   231fc:	str	r0, [r4, #4]
   23200:	str	r0, [r4, #8]
   23204:	ldr	r6, [sp, #72]	; 0x48
   23208:	ldr	r5, [sp, #100]	; 0x64
   2320c:	cmn	r5, #1
   23210:	ble	22f78 <__assert_fail@plt+0x110e4>
   23214:	ldr	r4, [sp, #32]
   23218:	mov	r7, r5
   2321c:	ldr	r0, [fp, #20]
   23220:	ldr	r0, [r0, #4]
   23224:	cmp	r6, r0
   23228:	ble	22a34 <__assert_fail@plt+0x10ba0>
   2322c:	b	2298c <__assert_fail@plt+0x10af8>
   23230:	mov	r0, #4
   23234:	bl	33c98 <__assert_fail@plt+0x21e04>
   23238:	cmp	r0, #0
   2323c:	beq	2387c <__assert_fail@plt+0x119e8>
   23240:	mov	ip, r0
   23244:	str	r7, [r0]
   23248:	mov	r0, #1
   2324c:	mov	r5, #1
   23250:	mov	lr, #1
   23254:	str	r0, [sp, #52]	; 0x34
   23258:	ldr	r0, [sp, #204]	; 0xcc
   2325c:	ldr	r0, [r0, r6, lsl #2]
   23260:	ldr	r1, [r0, #8]
   23264:	cmp	r1, #1
   23268:	blt	232ec <__assert_fail@plt+0x11458>
   2326c:	ldr	r2, [sp, #100]	; 0x64
   23270:	add	r3, r7, r7, lsl #1
   23274:	str	r5, [sp, #44]	; 0x2c
   23278:	ldr	r0, [r0, #12]
   2327c:	str	r4, [sp, #88]	; 0x58
   23280:	str	r6, [sp, #72]	; 0x48
   23284:	ldr	r2, [r2, #20]
   23288:	add	r2, r2, r3, lsl #2
   2328c:	ldr	r2, [r2, #8]
   23290:	ldr	r5, [r2]
   23294:	subs	r2, r1, #1
   23298:	mov	r1, #0
   2329c:	beq	232c8 <__assert_fail@plt+0x11434>
   232a0:	add	r3, r1, r2
   232a4:	mov	r4, r5
   232a8:	lsr	r6, r3, #1
   232ac:	ldr	r5, [r0, r6, lsl #2]
   232b0:	cmp	r5, r4
   232b4:	mov	r5, r4
   232b8:	movge	r2, r6
   232bc:	addlt	r1, lr, r3, lsr #1
   232c0:	cmp	r1, r2
   232c4:	bcc	232a0 <__assert_fail@plt+0x1140c>
   232c8:	ldr	r0, [r0, r1, lsl #2]
   232cc:	ldr	r6, [sp, #72]	; 0x48
   232d0:	ldr	r1, [sp, #88]	; 0x58
   232d4:	cmp	r0, r5
   232d8:	bne	22da8 <__assert_fail@plt+0x10f14>
   232dc:	ldr	r1, [sp, #44]	; 0x2c
   232e0:	cmn	r5, #1
   232e4:	bgt	23214 <__assert_fail@plt+0x11380>
   232e8:	b	22f78 <__assert_fail@plt+0x110e4>
   232ec:	ldr	r5, [sp, #100]	; 0x64
   232f0:	b	22db4 <__assert_fail@plt+0x10f20>
   232f4:	ldr	r2, [sp, #108]	; 0x6c
   232f8:	str	ip, [sp, #64]	; 0x40
   232fc:	add	r0, r2, r1
   23300:	add	r1, r2, r6
   23304:	mov	r2, r4
   23308:	bl	11ac8 <memcmp@plt>
   2330c:	cmp	r0, #0
   23310:	beq	23320 <__assert_fail@plt+0x1148c>
   23314:	ldr	r7, [sp, #80]	; 0x50
   23318:	ldr	ip, [sp, #64]	; 0x40
   2331c:	b	22f8c <__assert_fail@plt+0x110f8>
   23320:	ldr	r0, [r5, #12]
   23324:	ldr	ip, [sp, #64]	; 0x40
   23328:	add	r6, r4, r6
   2332c:	mov	lr, #1
   23330:	ldr	r5, [r0, r7, lsl #2]
   23334:	ldr	r7, [sp, #80]	; 0x50
   23338:	b	22df8 <__assert_fail@plt+0x10f64>
   2333c:	ldr	r0, [sp, #52]	; 0x34
   23340:	mov	r8, r2
   23344:	str	r4, [sp, #100]	; 0x64
   23348:	cmp	r0, r2
   2334c:	bne	23380 <__assert_fail@plt+0x114ec>
   23350:	lsl	r1, r8, #3
   23354:	mov	r0, ip
   23358:	mov	r4, r8
   2335c:	mov	r5, ip
   23360:	bl	33cc8 <__assert_fail@plt+0x21e34>
   23364:	mov	ip, r5
   23368:	cmp	r0, #0
   2336c:	beq	237e0 <__assert_fail@plt+0x1194c>
   23370:	mov	r1, r8
   23374:	mov	ip, r0
   23378:	lsl	r1, r8, #1
   2337c:	str	r1, [sp, #52]	; 0x34
   23380:	ldr	r0, [ip]
   23384:	mov	r2, r8
   23388:	cmp	r0, r7
   2338c:	ble	233c8 <__assert_fail@plt+0x11534>
   23390:	cmp	r8, #1
   23394:	blt	233f8 <__assert_fail@plt+0x11564>
   23398:	mov	r0, r8
   2339c:	add	r1, ip, r8, lsl #2
   233a0:	add	r0, r8, #1
   233a4:	mov	r2, r1
   233a8:	ldr	r3, [r2, #-4]!
   233ac:	sub	r0, r0, #1
   233b0:	cmp	r0, #1
   233b4:	str	r3, [r1]
   233b8:	mov	r1, r2
   233bc:	bgt	233a8 <__assert_fail@plt+0x11514>
   233c0:	sub	r2, r0, #1
   233c4:	b	233f8 <__assert_fail@plt+0x11564>
   233c8:	add	r0, ip, r8, lsl #2
   233cc:	ldr	r1, [r0, #-4]
   233d0:	cmp	r1, r7
   233d4:	ble	233f8 <__assert_fail@plt+0x11564>
   233d8:	sub	r2, r8, #2
   233dc:	str	r1, [r0]
   233e0:	sub	r2, r2, #1
   233e4:	ldr	r1, [r0, #-8]
   233e8:	sub	r0, r0, #4
   233ec:	cmp	r1, r7
   233f0:	bgt	233dc <__assert_fail@plt+0x11548>
   233f4:	add	r2, r2, #2
   233f8:	str	r7, [ip, r2, lsl #2]
   233fc:	mov	r2, r8
   23400:	ldr	sl, [sp, #92]	; 0x5c
   23404:	ldr	r4, [sp, #100]	; 0x64
   23408:	add	r2, r8, #1
   2340c:	ldr	r8, [sp, #96]	; 0x60
   23410:	b	22e94 <__assert_fail@plt+0x11000>
   23414:	ldr	r0, [sp, #52]	; 0x34
   23418:	mov	r8, r2
   2341c:	str	r4, [sp, #88]	; 0x58
   23420:	cmp	r0, r2
   23424:	bne	23458 <__assert_fail@plt+0x115c4>
   23428:	lsl	r1, r8, #3
   2342c:	mov	r0, ip
   23430:	mov	r5, r8
   23434:	mov	r4, ip
   23438:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2343c:	mov	ip, r4
   23440:	cmp	r0, #0
   23444:	beq	237e0 <__assert_fail@plt+0x1194c>
   23448:	mov	r1, r8
   2344c:	mov	ip, r0
   23450:	lsl	r1, r8, #1
   23454:	str	r1, [sp, #52]	; 0x34
   23458:	ldr	r0, [ip]
   2345c:	mov	r2, r8
   23460:	cmp	r0, r7
   23464:	ble	234a0 <__assert_fail@plt+0x1160c>
   23468:	cmp	r8, #1
   2346c:	blt	234d0 <__assert_fail@plt+0x1163c>
   23470:	mov	r0, r8
   23474:	add	r1, ip, r8, lsl #2
   23478:	add	r0, r8, #1
   2347c:	mov	r2, r1
   23480:	ldr	r3, [r2, #-4]!
   23484:	sub	r0, r0, #1
   23488:	cmp	r0, #1
   2348c:	str	r3, [r1]
   23490:	mov	r1, r2
   23494:	bgt	23480 <__assert_fail@plt+0x115ec>
   23498:	sub	r2, r0, #1
   2349c:	b	234d0 <__assert_fail@plt+0x1163c>
   234a0:	add	r0, ip, r8, lsl #2
   234a4:	ldr	r1, [r0, #-4]
   234a8:	cmp	r1, r7
   234ac:	ble	234d0 <__assert_fail@plt+0x1163c>
   234b0:	sub	r2, r8, #2
   234b4:	str	r1, [r0]
   234b8:	sub	r2, r2, #1
   234bc:	ldr	r1, [r0, #-8]
   234c0:	sub	r0, r0, #4
   234c4:	cmp	r1, r7
   234c8:	bgt	234b4 <__assert_fail@plt+0x11620>
   234cc:	add	r2, r2, #2
   234d0:	mov	r5, r8
   234d4:	ldr	sl, [sp, #92]	; 0x5c
   234d8:	ldr	r4, [sp, #88]	; 0x58
   234dc:	mov	lr, #1
   234e0:	str	r7, [ip, r2, lsl #2]
   234e4:	add	r5, r8, #1
   234e8:	ldr	r8, [sp, #96]	; 0x60
   234ec:	b	23258 <__assert_fail@plt+0x113c4>
   234f0:	mov	r6, #0
   234f4:	b	20d9c <__assert_fail@plt+0xef08>
   234f8:	mov	r9, #12
   234fc:	b	236cc <__assert_fail@plt+0x11838>
   23500:	ldr	r7, [sp, #80]	; 0x50
   23504:	mov	r4, #0
   23508:	b	23748 <__assert_fail@plt+0x118b4>
   2350c:	mov	r9, r0
   23510:	b	236cc <__assert_fail@plt+0x11838>
   23514:	ldr	r4, [sp, #32]
   23518:	ldr	r6, [sp, #80]	; 0x50
   2351c:	ldr	r5, [sp, #76]	; 0x4c
   23520:	mov	r0, ip
   23524:	bl	17754 <__assert_fail@plt+0x58c0>
   23528:	ldr	r0, [fp, #-184]	; 0xffffff48
   2352c:	cmp	r0, r5
   23530:	beq	23538 <__assert_fail@plt+0x116a4>
   23534:	bl	17754 <__assert_fail@plt+0x58c0>
   23538:	mov	r0, #16
   2353c:	cmp	r6, #0
   23540:	str	r0, [fp, #-188]	; 0xffffff44
   23544:	mov	r0, #0
   23548:	str	r0, [fp, #-192]	; 0xffffff40
   2354c:	str	r5, [fp, #-184]	; 0xffffff48
   23550:	beq	235a8 <__assert_fail@plt+0x11714>
   23554:	ldr	r1, [r6]
   23558:	ldr	r0, [r6, #8]
   2355c:	cmp	r1, #1
   23560:	blt	235a0 <__assert_fail@plt+0x1170c>
   23564:	mov	r4, #0
   23568:	mov	r5, #0
   2356c:	add	r0, r0, r4
   23570:	ldr	r0, [r0, #20]
   23574:	bl	17754 <__assert_fail@plt+0x58c0>
   23578:	ldr	r0, [r6, #8]
   2357c:	add	r0, r0, r4
   23580:	ldr	r0, [r0, #8]
   23584:	bl	17754 <__assert_fail@plt+0x58c0>
   23588:	ldr	r1, [r6]
   2358c:	ldr	r0, [r6, #8]
   23590:	add	r5, r5, #1
   23594:	add	r4, r4, #24
   23598:	cmp	r5, r1
   2359c:	blt	2356c <__assert_fail@plt+0x116d8>
   235a0:	bl	17754 <__assert_fail@plt+0x58c0>
   235a4:	ldr	r4, [sp, #32]
   235a8:	ldr	r0, [fp, #20]
   235ac:	ldrb	r1, [sp, #180]	; 0xb4
   235b0:	ldr	r2, [fp, #16]
   235b4:	add	r0, r0, #4
   235b8:	b	23600 <__assert_fail@plt+0x1176c>
   235bc:	ldr	r7, [sp, #132]	; 0x84
   235c0:	ldr	r6, [sp, #24]
   235c4:	ldr	ip, [sp, #116]	; 0x74
   235c8:	cmp	r3, r7
   235cc:	mov	r5, r6
   235d0:	addne	r5, ip, r3, lsl #2
   235d4:	ldr	r3, [r5]
   235d8:	str	r3, [r0, #-4]
   235dc:	ldr	r5, [r0]
   235e0:	cmp	r5, r7
   235e4:	addne	r6, ip, r5, lsl #2
   235e8:	ldr	r7, [r6]
   235ec:	ldr	r6, [fp, #20]
   235f0:	add	r6, r6, r9, lsl #3
   235f4:	str	r7, [r0]
   235f8:	add	r6, r6, #4
   235fc:	b	2361c <__assert_fail@plt+0x11788>
   23600:	ldr	r3, [r0, #-4]
   23604:	cmn	r3, #1
   23608:	beq	23630 <__assert_fail@plt+0x1179c>
   2360c:	cmp	r1, #0
   23610:	bne	235bc <__assert_fail@plt+0x11728>
   23614:	ldr	r7, [r0]
   23618:	mov	r6, r0
   2361c:	ldr	r5, [fp, #-200]	; 0xffffff38
   23620:	add	r3, r3, r5
   23624:	str	r3, [r0, #-4]
   23628:	add	r3, r7, r5
   2362c:	str	r3, [r6]
   23630:	sub	r2, r2, #1
   23634:	add	r0, r0, #8
   23638:	add	r9, r9, #1
   2363c:	cmp	r4, r2
   23640:	bne	23600 <__assert_fail@plt+0x1176c>
   23644:	cmp	r4, #1
   23648:	blt	23660 <__assert_fail@plt+0x117cc>
   2364c:	ldr	r0, [fp, #20]
   23650:	lsl	r2, r4, #3
   23654:	mov	r1, #255	; 0xff
   23658:	add	r0, r0, sl, lsl #3
   2365c:	bl	11cd8 <memset@plt>
   23660:	ldr	r0, [r8, #132]	; 0x84
   23664:	mov	r9, #0
   23668:	cmp	r0, #0
   2366c:	beq	236cc <__assert_fail@plt+0x11838>
   23670:	cmp	sl, #2
   23674:	bcc	236cc <__assert_fail@plt+0x11838>
   23678:	ldr	r1, [fp, #16]
   2367c:	ldr	r2, [sp, #32]
   23680:	ldr	r6, [fp, #20]
   23684:	sub	r1, r1, #1
   23688:	sub	r1, r1, r2
   2368c:	mov	r2, #0
   23690:	ldr	r3, [r0, r2, lsl #2]
   23694:	cmp	r2, r3
   23698:	beq	236bc <__assert_fail@plt+0x11828>
   2369c:	add	r3, r6, r3, lsl #3
   236a0:	add	r7, r6, r2, lsl #3
   236a4:	ldr	r3, [r3, #8]
   236a8:	str	r3, [r7, #8]
   236ac:	ldr	r3, [r0, r2, lsl #2]
   236b0:	add	r3, r6, r3, lsl #3
   236b4:	ldr	r3, [r3, #12]
   236b8:	str	r3, [r7, #12]
   236bc:	add	r2, r2, #1
   236c0:	cmp	r1, r2
   236c4:	bne	23690 <__assert_fail@plt+0x117fc>
   236c8:	mov	r9, #0
   236cc:	ldr	r0, [sp, #204]	; 0xcc
   236d0:	bl	17754 <__assert_fail@plt+0x58c0>
   236d4:	ldr	r0, [sp, #96]	; 0x60
   236d8:	ldr	r0, [r0, #76]	; 0x4c
   236dc:	cmp	r0, #0
   236e0:	beq	236fc <__assert_fail@plt+0x11868>
   236e4:	add	r0, sp, #104	; 0x68
   236e8:	bl	2aa78 <__assert_fail@plt+0x18be4>
   236ec:	ldr	r0, [sp, #236]	; 0xec
   236f0:	bl	17754 <__assert_fail@plt+0x58c0>
   236f4:	ldr	r0, [sp, #220]	; 0xdc
   236f8:	bl	17754 <__assert_fail@plt+0x58c0>
   236fc:	ldr	r0, [sp, #112]	; 0x70
   23700:	bl	17754 <__assert_fail@plt+0x58c0>
   23704:	ldr	r0, [sp, #116]	; 0x74
   23708:	bl	17754 <__assert_fail@plt+0x58c0>
   2370c:	ldrb	r0, [sp, #179]	; 0xb3
   23710:	cmp	r0, #0
   23714:	beq	23720 <__assert_fail@plt+0x1188c>
   23718:	ldr	r0, [sp, #108]	; 0x6c
   2371c:	bl	17754 <__assert_fail@plt+0x58c0>
   23720:	mov	r0, r9
   23724:	sub	sp, fp, #28
   23728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2372c:	mov	r0, r8
   23730:	bl	17754 <__assert_fail@plt+0x58c0>
   23734:	mov	r0, #0
   23738:	bl	17754 <__assert_fail@plt+0x58c0>
   2373c:	mov	r9, #12
   23740:	b	236cc <__assert_fail@plt+0x11838>
   23744:	mov	r4, #1
   23748:	mov	r0, ip
   2374c:	bl	17754 <__assert_fail@plt+0x58c0>
   23750:	ldr	r0, [fp, #-184]	; 0xffffff48
   23754:	ldr	r1, [sp, #76]	; 0x4c
   23758:	cmp	r0, r1
   2375c:	beq	23764 <__assert_fail@plt+0x118d0>
   23760:	bl	17754 <__assert_fail@plt+0x58c0>
   23764:	mov	r0, #16
   23768:	mov	r9, #1
   2376c:	cmp	r4, #0
   23770:	str	r0, [fp, #-188]	; 0xffffff44
   23774:	mov	r0, #0
   23778:	str	r0, [fp, #-192]	; 0xffffff40
   2377c:	ldr	r0, [sp, #76]	; 0x4c
   23780:	str	r0, [fp, #-184]	; 0xffffff48
   23784:	bne	236cc <__assert_fail@plt+0x11838>
   23788:	ldr	r1, [r7]
   2378c:	ldr	r0, [r7, #8]
   23790:	cmp	r1, #1
   23794:	blt	237d4 <__assert_fail@plt+0x11940>
   23798:	mov	r5, #0
   2379c:	mov	r6, #0
   237a0:	add	r0, r0, r5
   237a4:	ldr	r0, [r0, #20]
   237a8:	bl	17754 <__assert_fail@plt+0x58c0>
   237ac:	ldr	r0, [r7, #8]
   237b0:	add	r0, r0, r5
   237b4:	ldr	r0, [r0, #8]
   237b8:	bl	17754 <__assert_fail@plt+0x58c0>
   237bc:	ldr	r1, [r7]
   237c0:	ldr	r0, [r7, #8]
   237c4:	add	r6, r6, #1
   237c8:	add	r5, r5, #24
   237cc:	cmp	r6, r1
   237d0:	blt	237a0 <__assert_fail@plt+0x1190c>
   237d4:	bl	17754 <__assert_fail@plt+0x58c0>
   237d8:	b	236cc <__assert_fail@plt+0x11838>
   237dc:	ldr	ip, [sp, #64]	; 0x40
   237e0:	mov	r0, ip
   237e4:	bl	17754 <__assert_fail@plt+0x58c0>
   237e8:	ldr	r0, [fp, #-184]	; 0xffffff48
   237ec:	ldr	r4, [sp, #76]	; 0x4c
   237f0:	cmp	r0, r4
   237f4:	beq	237fc <__assert_fail@plt+0x11968>
   237f8:	bl	17754 <__assert_fail@plt+0x58c0>
   237fc:	mov	r0, #16
   23800:	mov	r9, #12
   23804:	str	r0, [fp, #-188]	; 0xffffff44
   23808:	mov	r0, #0
   2380c:	str	r0, [fp, #-192]	; 0xffffff40
   23810:	ldr	r0, [sp, #80]	; 0x50
   23814:	str	r4, [fp, #-184]	; 0xffffff48
   23818:	cmp	r0, #0
   2381c:	beq	236cc <__assert_fail@plt+0x11838>
   23820:	ldr	r1, [r0]
   23824:	ldr	r0, [r0, #8]
   23828:	cmp	r1, #1
   2382c:	blt	237d4 <__assert_fail@plt+0x11940>
   23830:	ldr	r4, [sp, #80]	; 0x50
   23834:	mov	r5, #0
   23838:	mov	r6, #0
   2383c:	add	r0, r0, r5
   23840:	ldr	r0, [r0, #20]
   23844:	bl	17754 <__assert_fail@plt+0x58c0>
   23848:	ldr	r0, [r4, #8]
   2384c:	add	r0, r0, r5
   23850:	ldr	r0, [r0, #8]
   23854:	bl	17754 <__assert_fail@plt+0x58c0>
   23858:	ldr	r1, [r4]
   2385c:	ldr	r0, [r4, #8]
   23860:	add	r6, r6, #1
   23864:	add	r5, r5, #24
   23868:	cmp	r6, r1
   2386c:	blt	2383c <__assert_fail@plt+0x119a8>
   23870:	b	237d4 <__assert_fail@plt+0x11940>
   23874:	mov	r9, #1
   23878:	b	236cc <__assert_fail@plt+0x11838>
   2387c:	mov	ip, #0
   23880:	b	237e0 <__assert_fail@plt+0x1194c>
   23884:	ldr	ip, [sp, #64]	; 0x40
   23888:	mov	r0, #0
   2388c:	str	r0, [r5]
   23890:	str	r0, [r4]
   23894:	b	237e0 <__assert_fail@plt+0x1194c>
   23898:	push	{fp, lr}
   2389c:	mov	fp, sp
   238a0:	sub	sp, sp, #16
   238a4:	mov	ip, #1
   238a8:	str	r2, [sp, #4]
   238ac:	str	ip, [sp, #12]
   238b0:	mov	ip, #0
   238b4:	str	ip, [sp]
   238b8:	ldr	ip, [fp, #8]
   238bc:	str	ip, [sp, #8]
   238c0:	bl	238cc <__assert_fail@plt+0x11a38>
   238c4:	mov	sp, fp
   238c8:	pop	{fp, pc}
   238cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238d0:	add	fp, sp, #28
   238d4:	sub	sp, sp, #44	; 0x2c
   238d8:	mvn	r6, #0
   238dc:	cmp	r3, #0
   238e0:	blt	23a48 <__assert_fail@plt+0x11bb4>
   238e4:	mov	r5, r3
   238e8:	mov	r9, r2
   238ec:	cmp	r3, r2
   238f0:	bgt	23a48 <__assert_fail@plt+0x11bb4>
   238f4:	mov	r7, r0
   238f8:	ldr	r0, [fp, #8]
   238fc:	mov	r8, r9
   23900:	mov	sl, r1
   23904:	movw	r1, #0
   23908:	ldr	r6, [r7]
   2390c:	movt	r1, #0
   23910:	add	r0, r0, r5
   23914:	cmp	r0, r9
   23918:	bicle	r8, r0, r0, asr #31
   2391c:	movw	r0, #0
   23920:	movt	r0, #0
   23924:	orrs	r4, r1, r0
   23928:	beq	23934 <__assert_fail@plt+0x11aa0>
   2392c:	add	r0, r6, #136	; 0x88
   23930:	bl	11a68 <pthread_mutex_lock@plt>
   23934:	ldrb	r0, [r7, #28]
   23938:	str	r6, [sp, #24]
   2393c:	ldr	r6, [fp, #16]
   23940:	cmp	r8, r5
   23944:	ubfx	r1, r0, #5, #2
   23948:	str	r4, [sp, #36]	; 0x24
   2394c:	str	sl, [sp, #32]
   23950:	str	r1, [sp, #28]
   23954:	ble	23978 <__assert_fail@plt+0x11ae4>
   23958:	tst	r0, #8
   2395c:	bne	23978 <__assert_fail@plt+0x11ae4>
   23960:	ldr	r1, [r7, #16]
   23964:	cmp	r1, #0
   23968:	beq	23978 <__assert_fail@plt+0x11ae4>
   2396c:	mov	r0, r7
   23970:	bl	20364 <__assert_fail@plt+0xe4d0>
   23974:	ldrb	r0, [r7, #28]
   23978:	mov	sl, #1
   2397c:	mov	r4, #0
   23980:	cmp	r6, #0
   23984:	str	r7, [fp, #-32]	; 0xffffffe0
   23988:	beq	239d4 <__assert_fail@plt+0x11b40>
   2398c:	ands	r1, r0, #16
   23990:	bne	239d4 <__assert_fail@plt+0x11b40>
   23994:	and	r0, r0, #6
   23998:	cmp	r0, #4
   2399c:	bne	239c4 <__assert_fail@plt+0x11b30>
   239a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   239a4:	ldr	sl, [r6]
   239a8:	ldr	r0, [r0, #24]
   239ac:	cmp	sl, r0
   239b0:	bhi	239cc <__assert_fail@plt+0x11b38>
   239b4:	cmp	sl, #1
   239b8:	movwlt	r6, #0
   239bc:	movwlt	sl, #1
   239c0:	b	239d0 <__assert_fail@plt+0x11b3c>
   239c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   239c8:	ldr	r0, [r0, #24]
   239cc:	add	sl, r0, #1
   239d0:	mov	r4, r6
   239d4:	lsl	r0, sl, #3
   239d8:	bl	33c98 <__assert_fail@plt+0x21e04>
   239dc:	cmp	r0, #0
   239e0:	beq	23c5c <__assert_fail@plt+0x11dc8>
   239e4:	mov	r7, r0
   239e8:	ldr	r0, [fp, #12]
   239ec:	str	r8, [sp]
   239f0:	mov	r2, r9
   239f4:	mov	r3, r5
   239f8:	stmib	sp, {r0, sl}
   239fc:	str	r7, [sp, #12]
   23a00:	ldr	r0, [sp, #28]
   23a04:	ldr	r1, [sp, #32]
   23a08:	str	r0, [sp, #16]
   23a0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23a10:	bl	20cc8 <__assert_fail@plt+0xee34>
   23a14:	cmp	r0, #0
   23a18:	beq	23a54 <__assert_fail@plt+0x11bc0>
   23a1c:	mvn	r6, #1
   23a20:	cmp	r0, #1
   23a24:	mvneq	r6, #0
   23a28:	ldr	r4, [sp, #36]	; 0x24
   23a2c:	mov	r0, r7
   23a30:	bl	17754 <__assert_fail@plt+0x58c0>
   23a34:	cmp	r4, #0
   23a38:	beq	23a48 <__assert_fail@plt+0x11bb4>
   23a3c:	ldr	r0, [sp, #24]
   23a40:	add	r0, r0, #136	; 0x88
   23a44:	bl	1199c <pthread_mutex_unlock@plt>
   23a48:	mov	r0, r6
   23a4c:	sub	sp, fp, #28
   23a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a54:	cmp	r4, #0
   23a58:	str	r5, [sp, #32]
   23a5c:	beq	23b78 <__assert_fail@plt+0x11ce4>
   23a60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23a64:	add	r9, sl, #1
   23a68:	ldrb	r0, [r0, #28]
   23a6c:	ubfx	r0, r0, #1, #2
   23a70:	cmp	r0, #1
   23a74:	beq	23ad4 <__assert_fail@plt+0x11c40>
   23a78:	mov	ip, #2
   23a7c:	cmp	r0, #0
   23a80:	bne	23ae4 <__assert_fail@plt+0x11c50>
   23a84:	mov	r5, r7
   23a88:	lsl	r7, r9, #2
   23a8c:	mov	r0, r7
   23a90:	bl	33c98 <__assert_fail@plt+0x21e04>
   23a94:	mov	r6, #0
   23a98:	cmp	r0, #0
   23a9c:	str	r0, [r4, #4]
   23aa0:	beq	23c70 <__assert_fail@plt+0x11ddc>
   23aa4:	mov	r0, r7
   23aa8:	bl	33c98 <__assert_fail@plt+0x21e04>
   23aac:	cmp	r0, #0
   23ab0:	str	r0, [r4, #8]
   23ab4:	beq	23cd0 <__assert_fail@plt+0x11e3c>
   23ab8:	str	r9, [r4]
   23abc:	mov	ip, #1
   23ac0:	mov	r7, r5
   23ac4:	cmp	sl, #1
   23ac8:	bge	23aec <__assert_fail@plt+0x11c58>
   23acc:	mov	sl, #0
   23ad0:	b	23b2c <__assert_fail@plt+0x11c98>
   23ad4:	ldr	r0, [r4]
   23ad8:	mov	ip, #1
   23adc:	cmp	r9, r0
   23ae0:	bhi	23c78 <__assert_fail@plt+0x11de4>
   23ae4:	cmp	sl, #1
   23ae8:	blt	23acc <__assert_fail@plt+0x11c38>
   23aec:	mov	r8, r7
   23af0:	ldmib	r4, {r6, r7}
   23af4:	mov	r2, #0
   23af8:	cmp	sl, #3
   23afc:	bhi	23ba4 <__assert_fail@plt+0x11d10>
   23b00:	add	r0, r8, r2, lsl #3
   23b04:	add	r0, r0, #4
   23b08:	ldr	r1, [r0, #-4]
   23b0c:	str	r1, [r6, r2, lsl #2]
   23b10:	ldr	r1, [r0]
   23b14:	add	r0, r0, #8
   23b18:	str	r1, [r7, r2, lsl #2]
   23b1c:	add	r2, r2, #1
   23b20:	cmp	sl, r2
   23b24:	bne	23b08 <__assert_fail@plt+0x11c74>
   23b28:	mov	r7, r8
   23b2c:	ldr	r0, [r4]
   23b30:	cmp	sl, r0
   23b34:	bcs	23b58 <__assert_fail@plt+0x11cc4>
   23b38:	ldmib	r4, {r0, r1}
   23b3c:	mvn	r2, #0
   23b40:	str	r2, [r1, sl, lsl #2]
   23b44:	str	r2, [r0, sl, lsl #2]
   23b48:	add	sl, sl, #1
   23b4c:	ldr	r3, [r4]
   23b50:	cmp	sl, r3
   23b54:	bcc	23b40 <__assert_fail@plt+0x11cac>
   23b58:	mov	r6, ip
   23b5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   23b60:	cmp	r6, #0
   23b64:	ldrb	r0, [r1, #28]
   23b68:	and	r0, r0, #249	; 0xf9
   23b6c:	orr	r0, r0, r6, lsl #1
   23b70:	strb	r0, [r1, #28]
   23b74:	beq	23b9c <__assert_fail@plt+0x11d08>
   23b78:	ldr	r0, [fp, #20]
   23b7c:	cmp	r0, #0
   23b80:	beq	23b94 <__assert_fail@plt+0x11d00>
   23b84:	ldr	r0, [r7, #4]
   23b88:	ldr	r1, [sp, #32]
   23b8c:	sub	r6, r0, r1
   23b90:	b	23a28 <__assert_fail@plt+0x11b94>
   23b94:	ldr	r6, [r7]
   23b98:	b	23a28 <__assert_fail@plt+0x11b94>
   23b9c:	mvn	r6, #1
   23ba0:	b	23a28 <__assert_fail@plt+0x11b94>
   23ba4:	str	ip, [sp, #28]
   23ba8:	add	ip, r7, sl, lsl #2
   23bac:	mov	lr, #0
   23bb0:	add	r5, r8, sl, lsl #3
   23bb4:	mov	r9, #0
   23bb8:	add	r3, r6, sl, lsl #2
   23bbc:	mov	r1, #0
   23bc0:	mov	r0, r8
   23bc4:	mov	r2, #0
   23bc8:	cmp	r8, ip
   23bcc:	mov	r0, #0
   23bd0:	movwcc	lr, #1
   23bd4:	cmp	r5, r7
   23bd8:	movwhi	r9, #1
   23bdc:	cmp	r8, r3
   23be0:	movwcc	r1, #1
   23be4:	cmp	r5, r6
   23be8:	mov	r5, #0
   23bec:	movwhi	r5, #1
   23bf0:	cmp	r7, r3
   23bf4:	mov	r3, #0
   23bf8:	movwcc	r3, #1
   23bfc:	cmp	r6, ip
   23c00:	movwcc	r0, #1
   23c04:	tst	r0, r3
   23c08:	bne	23c54 <__assert_fail@plt+0x11dc0>
   23c0c:	ands	r0, r5, r1
   23c10:	bne	23c54 <__assert_fail@plt+0x11dc0>
   23c14:	ldr	ip, [sp, #28]
   23c18:	ands	r0, r9, lr
   23c1c:	bne	23b00 <__assert_fail@plt+0x11c6c>
   23c20:	bic	r2, sl, #3
   23c24:	mov	r1, r7
   23c28:	mov	r0, r6
   23c2c:	mov	r5, r8
   23c30:	mov	r3, r2
   23c34:	vld2.32	{d16-d19}, [r5]!
   23c38:	subs	r3, r3, #4
   23c3c:	vst1.32	{d16-d17}, [r0]!
   23c40:	vst1.32	{d18-d19}, [r1]!
   23c44:	bne	23c34 <__assert_fail@plt+0x11da0>
   23c48:	cmp	sl, r2
   23c4c:	bne	23b00 <__assert_fail@plt+0x11c6c>
   23c50:	b	23b28 <__assert_fail@plt+0x11c94>
   23c54:	ldr	ip, [sp, #28]
   23c58:	b	23b00 <__assert_fail@plt+0x11c6c>
   23c5c:	ldr	r4, [sp, #36]	; 0x24
   23c60:	mvn	r6, #1
   23c64:	cmp	r4, #0
   23c68:	bne	23a3c <__assert_fail@plt+0x11ba8>
   23c6c:	b	23a48 <__assert_fail@plt+0x11bb4>
   23c70:	mov	r7, r5
   23c74:	b	23b5c <__assert_fail@plt+0x11cc8>
   23c78:	ldr	r0, [r4, #4]
   23c7c:	mov	r8, r7
   23c80:	lsl	r7, r9, #2
   23c84:	mov	r1, r7
   23c88:	bl	33cc8 <__assert_fail@plt+0x21e34>
   23c8c:	mov	r6, #0
   23c90:	cmp	r0, #0
   23c94:	beq	23ce0 <__assert_fail@plt+0x11e4c>
   23c98:	mov	r5, r0
   23c9c:	ldr	r0, [r4, #8]
   23ca0:	mov	r1, r7
   23ca4:	bl	33cc8 <__assert_fail@plt+0x21e34>
   23ca8:	cmp	r0, #0
   23cac:	beq	23ce8 <__assert_fail@plt+0x11e54>
   23cb0:	mov	r7, r8
   23cb4:	mov	ip, #1
   23cb8:	str	r9, [r4]
   23cbc:	str	r5, [r4, #4]
   23cc0:	str	r0, [r4, #8]
   23cc4:	cmp	sl, #1
   23cc8:	bge	23aec <__assert_fail@plt+0x11c58>
   23ccc:	b	23acc <__assert_fail@plt+0x11c38>
   23cd0:	ldr	r0, [r4, #4]
   23cd4:	bl	17754 <__assert_fail@plt+0x58c0>
   23cd8:	mov	r7, r5
   23cdc:	b	23b5c <__assert_fail@plt+0x11cc8>
   23ce0:	mov	r7, r8
   23ce4:	b	23b5c <__assert_fail@plt+0x11cc8>
   23ce8:	mov	r0, r5
   23cec:	bl	17754 <__assert_fail@plt+0x58c0>
   23cf0:	mov	r7, r8
   23cf4:	b	23b5c <__assert_fail@plt+0x11cc8>
   23cf8:	push	{fp, lr}
   23cfc:	mov	fp, sp
   23d00:	sub	sp, sp, #16
   23d04:	mov	ip, #0
   23d08:	str	r2, [sp, #4]
   23d0c:	str	ip, [sp, #12]
   23d10:	ldr	ip, [fp, #12]
   23d14:	str	ip, [sp, #8]
   23d18:	ldr	ip, [fp, #8]
   23d1c:	str	ip, [sp]
   23d20:	bl	238cc <__assert_fail@plt+0x11a38>
   23d24:	mov	sp, fp
   23d28:	pop	{fp, pc}
   23d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d30:	add	fp, sp, #28
   23d34:	sub	sp, sp, #20
   23d38:	ldr	r4, [fp, #8]
   23d3c:	mov	r8, r1
   23d40:	mov	r1, r0
   23d44:	mov	r6, r2
   23d48:	orr	r0, r4, r2
   23d4c:	ldr	r2, [fp, #20]
   23d50:	orr	r0, r0, r2
   23d54:	cmp	r0, #0
   23d58:	blt	23e18 <__assert_fail@plt+0x11f84>
   23d5c:	adds	sl, r6, r4
   23d60:	bvs	23e18 <__assert_fail@plt+0x11f84>
   23d64:	mov	r5, #0
   23d68:	cmp	r4, #1
   23d6c:	blt	23dc4 <__assert_fail@plt+0x11f30>
   23d70:	mov	r9, r3
   23d74:	cmp	r6, #1
   23d78:	blt	23dcc <__assert_fail@plt+0x11f38>
   23d7c:	mov	r0, sl
   23d80:	mov	r5, r1
   23d84:	bl	33c98 <__assert_fail@plt+0x21e04>
   23d88:	cmp	r0, #0
   23d8c:	beq	23e18 <__assert_fail@plt+0x11f84>
   23d90:	mov	r1, r8
   23d94:	mov	r2, r6
   23d98:	mov	r7, r0
   23d9c:	bl	11a8c <memcpy@plt>
   23da0:	add	r0, r7, r6
   23da4:	mov	r1, r9
   23da8:	mov	r2, r4
   23dac:	bl	11a8c <memcpy@plt>
   23db0:	ldr	r2, [fp, #20]
   23db4:	mov	r1, r5
   23db8:	mov	r4, r7
   23dbc:	mov	r5, #0
   23dc0:	b	23dd4 <__assert_fail@plt+0x11f40>
   23dc4:	mov	r7, r8
   23dc8:	b	23dd0 <__assert_fail@plt+0x11f3c>
   23dcc:	mov	r7, r9
   23dd0:	mov	r4, #0
   23dd4:	ldr	r0, [fp, #16]
   23dd8:	ldr	r3, [fp, #12]
   23ddc:	mov	r6, #1
   23de0:	str	r2, [sp, #4]
   23de4:	mov	r2, sl
   23de8:	str	r5, [sp]
   23dec:	str	r6, [sp, #12]
   23df0:	str	r0, [sp, #8]
   23df4:	mov	r0, r1
   23df8:	mov	r1, r7
   23dfc:	bl	238cc <__assert_fail@plt+0x11a38>
   23e00:	mov	r5, r0
   23e04:	mov	r0, r4
   23e08:	bl	17754 <__assert_fail@plt+0x58c0>
   23e0c:	mov	r0, r5
   23e10:	sub	sp, fp, #28
   23e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e18:	mvn	r0, #1
   23e1c:	sub	sp, fp, #28
   23e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e28:	add	fp, sp, #28
   23e2c:	sub	sp, sp, #20
   23e30:	ldr	r4, [fp, #8]
   23e34:	mov	r8, r1
   23e38:	mov	r1, r0
   23e3c:	mov	r6, r2
   23e40:	orr	r0, r4, r2
   23e44:	ldr	r2, [fp, #24]
   23e48:	orr	r0, r0, r2
   23e4c:	cmp	r0, #0
   23e50:	blt	23f10 <__assert_fail@plt+0x1207c>
   23e54:	adds	sl, r6, r4
   23e58:	bvs	23f10 <__assert_fail@plt+0x1207c>
   23e5c:	mov	r5, #0
   23e60:	cmp	r4, #1
   23e64:	blt	23ebc <__assert_fail@plt+0x12028>
   23e68:	mov	r9, r3
   23e6c:	cmp	r6, #1
   23e70:	blt	23ec4 <__assert_fail@plt+0x12030>
   23e74:	mov	r0, sl
   23e78:	mov	r5, r1
   23e7c:	bl	33c98 <__assert_fail@plt+0x21e04>
   23e80:	cmp	r0, #0
   23e84:	beq	23f10 <__assert_fail@plt+0x1207c>
   23e88:	mov	r1, r8
   23e8c:	mov	r2, r6
   23e90:	mov	r7, r0
   23e94:	bl	11a8c <memcpy@plt>
   23e98:	add	r0, r7, r6
   23e9c:	mov	r1, r9
   23ea0:	mov	r2, r4
   23ea4:	bl	11a8c <memcpy@plt>
   23ea8:	ldr	r2, [fp, #24]
   23eac:	mov	r1, r5
   23eb0:	mov	r4, r7
   23eb4:	mov	r5, #0
   23eb8:	b	23ecc <__assert_fail@plt+0x12038>
   23ebc:	mov	r7, r8
   23ec0:	b	23ec8 <__assert_fail@plt+0x12034>
   23ec4:	mov	r7, r9
   23ec8:	mov	r4, #0
   23ecc:	ldr	r0, [fp, #20]
   23ed0:	ldr	r6, [fp, #16]
   23ed4:	ldr	r3, [fp, #12]
   23ed8:	str	r2, [sp, #4]
   23edc:	mov	r2, sl
   23ee0:	str	r5, [sp, #12]
   23ee4:	str	r0, [sp, #8]
   23ee8:	mov	r0, r1
   23eec:	mov	r1, r7
   23ef0:	str	r6, [sp]
   23ef4:	bl	238cc <__assert_fail@plt+0x11a38>
   23ef8:	mov	r5, r0
   23efc:	mov	r0, r4
   23f00:	bl	17754 <__assert_fail@plt+0x58c0>
   23f04:	mov	r0, r5
   23f08:	sub	sp, fp, #28
   23f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f10:	mvn	r0, #1
   23f14:	sub	sp, fp, #28
   23f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f1c:	ldrb	ip, [r0, #28]
   23f20:	cmp	r2, #0
   23f24:	bic	ip, ip, #6
   23f28:	orrne	ip, ip, #2
   23f2c:	strb	ip, [r0, #28]
   23f30:	ldr	r0, [sp]
   23f34:	moveq	r0, r2
   23f38:	cmp	r2, #0
   23f3c:	moveq	r3, r2
   23f40:	stm	r1, {r2, r3}
   23f44:	str	r0, [r1, #8]
   23f48:	bx	lr
   23f4c:	push	{r4, sl, fp, lr}
   23f50:	add	fp, sp, #8
   23f54:	mov	r4, r0
   23f58:	ldr	r0, [r0, #24]
   23f5c:	bl	17754 <__assert_fail@plt+0x58c0>
   23f60:	ldr	r0, [r4, #36]	; 0x24
   23f64:	bl	17754 <__assert_fail@plt+0x58c0>
   23f68:	ldr	r0, [r4, #40]	; 0x28
   23f6c:	add	r1, r4, #4
   23f70:	cmp	r0, r1
   23f74:	beq	23f88 <__assert_fail@plt+0x120f4>
   23f78:	ldr	r0, [r0, #8]
   23f7c:	bl	17754 <__assert_fail@plt+0x58c0>
   23f80:	ldr	r0, [r4, #40]	; 0x28
   23f84:	bl	17754 <__assert_fail@plt+0x58c0>
   23f88:	ldr	r0, [r4, #12]
   23f8c:	bl	17754 <__assert_fail@plt+0x58c0>
   23f90:	ldr	r0, [r4, #48]	; 0x30
   23f94:	bl	17754 <__assert_fail@plt+0x58c0>
   23f98:	ldr	r0, [r4, #44]	; 0x2c
   23f9c:	bl	17754 <__assert_fail@plt+0x58c0>
   23fa0:	mov	r0, r4
   23fa4:	pop	{r4, sl, fp, lr}
   23fa8:	b	17754 <__assert_fail@plt+0x58c0>
   23fac:	nop	{0}
   23fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fb4:	add	fp, sp, #28
   23fb8:	sub	sp, sp, #92	; 0x5c
   23fbc:	mov	r9, r0
   23fc0:	ldrb	r0, [r0, #74]	; 0x4a
   23fc4:	ldr	r2, [r9, #36]	; 0x24
   23fc8:	ldr	r1, [r9, #48]	; 0x30
   23fcc:	ldr	r4, [r9, #28]
   23fd0:	cmp	r2, r1
   23fd4:	movgt	r2, r1
   23fd8:	cmp	r0, #0
   23fdc:	str	r2, [sp]
   23fe0:	bne	24000 <__assert_fail@plt+0x1216c>
   23fe4:	mov	r7, r9
   23fe8:	ldr	r0, [r7, #64]!	; 0x40
   23fec:	cmp	r0, #0
   23ff0:	bne	24000 <__assert_fail@plt+0x1216c>
   23ff4:	ldrb	r0, [r9, #76]	; 0x4c
   23ff8:	cmp	r0, #0
   23ffc:	beq	24008 <__assert_fail@plt+0x12174>
   24000:	ldr	r6, [r9, #32]
   24004:	b	241e4 <__assert_fail@plt+0x12350>
   24008:	ldr	r0, [sp]
   2400c:	cmp	r0, r4
   24010:	ble	24020 <__assert_fail@plt+0x1218c>
   24014:	add	r8, r9, #16
   24018:	mov	sl, r4
   2401c:	b	24078 <__assert_fail@plt+0x121e4>
   24020:	mov	sl, r4
   24024:	str	r4, [sp, #4]
   24028:	b	242f4 <__assert_fail@plt+0x12460>
   2402c:	add	r0, r4, #1
   24030:	cmp	r0, #2
   24034:	bcc	24048 <__assert_fail@plt+0x121b4>
   24038:	ldr	r0, [r9, #36]	; 0x24
   2403c:	ldr	r1, [r9, #48]	; 0x30
   24040:	cmp	r0, r1
   24044:	blt	241d0 <__assert_fail@plt+0x1233c>
   24048:	ldr	r0, [r9, #4]
   2404c:	ldr	r1, [sp, #4]
   24050:	cmn	r4, #1
   24054:	strb	sl, [r0, r1]
   24058:	ldr	r0, [r9, #8]
   2405c:	str	sl, [r0, r1, lsl #2]
   24060:	add	sl, r1, #1
   24064:	bne	241b0 <__assert_fail@plt+0x1231c>
   24068:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2406c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24070:	stm	r8, {r0, r1}
   24074:	b	241b0 <__assert_fail@plt+0x1231c>
   24078:	ldr	r5, [r9, #24]
   2407c:	ldr	r4, [r9]
   24080:	str	sl, [sp, #4]
   24084:	add	r0, r5, sl
   24088:	ldrb	sl, [r4, r0]
   2408c:	tst	sl, #128	; 0x80
   24090:	bne	240d8 <__assert_fail@plt+0x12244>
   24094:	mov	r0, r8
   24098:	bl	11abc <mbsinit@plt>
   2409c:	cmp	r0, #0
   240a0:	beq	240d8 <__assert_fail@plt+0x12244>
   240a4:	mov	r0, sl
   240a8:	bl	11e40 <towupper@plt>
   240ac:	cmp	r0, #128	; 0x80
   240b0:	bcs	240d0 <__assert_fail@plt+0x1223c>
   240b4:	ldr	r2, [sp, #4]
   240b8:	ldr	r1, [r9, #4]
   240bc:	strb	r0, [r1, r2]
   240c0:	add	sl, r2, #1
   240c4:	ldr	r1, [r9, #8]
   240c8:	str	r0, [r1, r2, lsl #2]
   240cc:	b	241b0 <__assert_fail@plt+0x1231c>
   240d0:	ldr	r4, [r9]
   240d4:	ldr	r5, [r9, #24]
   240d8:	ldm	r8, {r0, r1}
   240dc:	mov	r3, r8
   240e0:	str	r1, [fp, #-36]	; 0xffffffdc
   240e4:	str	r0, [fp, #-40]	; 0xffffffd8
   240e8:	ldm	sp, {r0, r1}
   240ec:	sub	r2, r0, r1
   240f0:	add	r0, r4, r5
   240f4:	add	r1, r0, r1
   240f8:	add	r0, sp, #12
   240fc:	bl	34cac <__assert_fail@plt+0x22e18>
   24100:	mov	r4, r0
   24104:	sub	r0, r0, #1
   24108:	cmn	r0, #4
   2410c:	bhi	2402c <__assert_fail@plt+0x12198>
   24110:	ldr	r0, [sp, #12]
   24114:	bl	11e40 <towupper@plt>
   24118:	mov	r5, r0
   2411c:	ldr	r0, [sp, #12]
   24120:	cmp	r5, r0
   24124:	bne	24148 <__assert_fail@plt+0x122b4>
   24128:	ldr	r1, [r9]
   2412c:	ldr	r2, [r9, #24]
   24130:	ldr	r0, [r9, #4]
   24134:	ldr	r6, [sp, #4]
   24138:	add	r1, r1, r2
   2413c:	add	r0, r0, r6
   24140:	add	r1, r1, r6
   24144:	b	24174 <__assert_fail@plt+0x122e0>
   24148:	add	sl, sp, #16
   2414c:	mov	r1, r5
   24150:	sub	r2, fp, #40	; 0x28
   24154:	mov	r0, sl
   24158:	bl	119e4 <wcrtomb@plt>
   2415c:	cmp	r4, r0
   24160:	bne	241c4 <__assert_fail@plt+0x12330>
   24164:	ldr	r0, [r9, #4]
   24168:	ldr	r6, [sp, #4]
   2416c:	mov	r1, sl
   24170:	add	r0, r0, r6
   24174:	mov	r2, r4
   24178:	bl	11a8c <memcpy@plt>
   2417c:	ldr	r0, [r9, #8]
   24180:	add	sl, r6, #1
   24184:	str	r5, [r0, r6, lsl #2]
   24188:	add	r5, r4, r6
   2418c:	cmp	sl, r5
   24190:	bge	241b0 <__assert_fail@plt+0x1231c>
   24194:	add	r0, r0, r6, lsl #2
   24198:	mvn	r1, #3
   2419c:	add	r2, r1, r4, lsl #2
   241a0:	add	r0, r0, #4
   241a4:	mov	r1, #255	; 0xff
   241a8:	bl	11cd8 <memset@plt>
   241ac:	mov	sl, r5
   241b0:	ldr	r0, [sp]
   241b4:	str	sl, [sp, #4]
   241b8:	cmp	r0, sl
   241bc:	bgt	24078 <__assert_fail@plt+0x121e4>
   241c0:	b	242f4 <__assert_fail@plt+0x12460>
   241c4:	ldr	r6, [sp, #4]
   241c8:	mov	sl, r6
   241cc:	b	241fc <__assert_fail@plt+0x12368>
   241d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   241d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   241d8:	stm	r8, {r0, r1}
   241dc:	ldr	sl, [sp, #4]
   241e0:	b	242f4 <__assert_fail@plt+0x12460>
   241e4:	ldr	r0, [sp]
   241e8:	cmp	r4, r0
   241ec:	bge	242ec <__assert_fail@plt+0x12458>
   241f0:	add	r7, r9, #64	; 0x40
   241f4:	add	r8, r9, #16
   241f8:	mov	sl, r4
   241fc:	ldm	r8, {r0, r1}
   24200:	str	r6, [sp, #4]
   24204:	str	r0, [fp, #-40]	; 0xffffffd8
   24208:	ldr	r0, [sp]
   2420c:	str	r1, [fp, #-36]	; 0xffffffdc
   24210:	sub	r2, r0, sl
   24214:	ldr	r0, [r7]
   24218:	cmp	r0, #0
   2421c:	bne	2430c <__assert_fail@plt+0x12478>
   24220:	ldr	r0, [r9]
   24224:	ldr	r1, [r9, #24]
   24228:	add	r0, r0, r1
   2422c:	add	r4, r0, r6
   24230:	add	r0, sp, #8
   24234:	mov	r1, r4
   24238:	mov	r3, r8
   2423c:	bl	34cac <__assert_fail@plt+0x22e18>
   24240:	sub	r6, r0, #1
   24244:	mov	r5, r0
   24248:	cmn	r6, #4
   2424c:	bhi	2435c <__assert_fail@plt+0x124c8>
   24250:	ldr	r0, [sp, #8]
   24254:	bl	11e40 <towupper@plt>
   24258:	mov	r7, r0
   2425c:	ldr	r0, [sp, #8]
   24260:	cmp	r7, r0
   24264:	bne	24274 <__assert_fail@plt+0x123e0>
   24268:	ldr	r0, [r9, #4]
   2426c:	mov	r1, r4
   24270:	b	24294 <__assert_fail@plt+0x12400>
   24274:	add	r0, sp, #16
   24278:	sub	r2, fp, #40	; 0x28
   2427c:	mov	r1, r7
   24280:	bl	119e4 <wcrtomb@plt>
   24284:	cmp	r0, r5
   24288:	bne	243d8 <__assert_fail@plt+0x12544>
   2428c:	ldr	r0, [r9, #4]
   24290:	add	r1, sp, #16
   24294:	add	r0, r0, sl
   24298:	mov	r2, r5
   2429c:	bl	11a8c <memcpy@plt>
   242a0:	ldrb	r0, [r9, #76]	; 0x4c
   242a4:	ldr	r6, [sp, #4]
   242a8:	cmp	r0, #0
   242ac:	bne	2446c <__assert_fail@plt+0x125d8>
   242b0:	ldr	r0, [r9, #8]
   242b4:	add	r4, r5, sl
   242b8:	add	r1, sl, #1
   242bc:	add	r6, r5, r6
   242c0:	cmp	r1, r4
   242c4:	str	r7, [r0, sl, lsl #2]
   242c8:	bge	242e4 <__assert_fail@plt+0x12450>
   242cc:	add	r0, r0, r1, lsl #2
   242d0:	mvn	r1, #3
   242d4:	add	r2, r1, r5, lsl #2
   242d8:	mov	r1, #255	; 0xff
   242dc:	bl	11cd8 <memset@plt>
   242e0:	b	241e4 <__assert_fail@plt+0x12350>
   242e4:	mov	r4, r1
   242e8:	b	241e4 <__assert_fail@plt+0x12350>
   242ec:	str	r6, [sp, #4]
   242f0:	mov	sl, r4
   242f4:	ldr	r0, [sp, #4]
   242f8:	str	sl, [r9, #28]
   242fc:	str	r0, [r9, #32]
   24300:	mov	r0, #0
   24304:	sub	sp, fp, #28
   24308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2430c:	cmp	r2, #1
   24310:	add	r4, sp, #16
   24314:	ldrge	r1, [r9, #80]	; 0x50
   24318:	cmpge	r1, #1
   2431c:	blt	24230 <__assert_fail@plt+0x1239c>
   24320:	ldr	r7, [r9, #24]
   24324:	ldr	r3, [r9]
   24328:	add	r4, sp, #16
   2432c:	add	r7, r6, r7
   24330:	add	r3, r3, r7
   24334:	mov	r7, #0
   24338:	ldrb	r5, [r3, r7]
   2433c:	ldrb	r5, [r0, r5]
   24340:	strb	r5, [r4, r7]
   24344:	add	r7, r7, #1
   24348:	cmp	r7, r2
   2434c:	bge	24230 <__assert_fail@plt+0x1239c>
   24350:	cmp	r7, r1
   24354:	blt	24338 <__assert_fail@plt+0x124a4>
   24358:	b	24230 <__assert_fail@plt+0x1239c>
   2435c:	add	r0, r5, #1
   24360:	cmp	r0, #2
   24364:	bcc	24378 <__assert_fail@plt+0x124e4>
   24368:	ldr	r0, [r9, #36]	; 0x24
   2436c:	ldr	r1, [r9, #48]	; 0x30
   24370:	cmp	r0, r1
   24374:	blt	244d8 <__assert_fail@plt+0x12644>
   24378:	ldr	r2, [r9, #24]
   2437c:	ldr	r6, [sp, #4]
   24380:	ldr	r0, [r9]
   24384:	ldr	r1, [r9, #64]	; 0x40
   24388:	add	r4, sl, #1
   2438c:	add	r2, r2, r6
   24390:	cmp	r1, #0
   24394:	ldrb	r0, [r0, r2]
   24398:	ldrbne	r0, [r1, r0]
   2439c:	ldr	r1, [r9, #4]
   243a0:	strb	r0, [r1, sl]
   243a4:	ldrb	r1, [r9, #76]	; 0x4c
   243a8:	cmp	r1, #0
   243ac:	ldrne	r1, [r9, #12]
   243b0:	strne	r6, [r1, sl, lsl #2]
   243b4:	add	r6, r6, #1
   243b8:	cmn	r5, #1
   243bc:	ldr	r1, [r9, #8]
   243c0:	str	r0, [r1, sl, lsl #2]
   243c4:	bne	241e4 <__assert_fail@plt+0x12350>
   243c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   243cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   243d0:	stm	r8, {r0, r1}
   243d4:	b	241e4 <__assert_fail@plt+0x12350>
   243d8:	mov	r3, r0
   243dc:	cmn	r0, #1
   243e0:	beq	24268 <__assert_fail@plt+0x123d4>
   243e4:	ldr	r1, [r9, #36]	; 0x24
   243e8:	add	r4, r3, sl
   243ec:	cmp	r4, r1
   243f0:	bhi	244d8 <__assert_fail@plt+0x12644>
   243f4:	ldr	r0, [r9, #12]
   243f8:	cmp	r0, #0
   243fc:	bne	2441c <__assert_fail@plt+0x12588>
   24400:	lsl	r0, r1, #2
   24404:	mov	r8, r3
   24408:	bl	33c98 <__assert_fail@plt+0x21e04>
   2440c:	mov	r3, r8
   24410:	cmp	r0, #0
   24414:	str	r0, [r9, #12]
   24418:	beq	244e8 <__assert_fail@plt+0x12654>
   2441c:	ldrb	r1, [r9, #76]	; 0x4c
   24420:	cmp	r1, #0
   24424:	bne	2450c <__assert_fail@plt+0x12678>
   24428:	cmp	sl, #0
   2442c:	beq	24504 <__assert_fail@plt+0x12670>
   24430:	mov	r1, #0
   24434:	cmp	sl, #4
   24438:	bcc	244f4 <__assert_fail@plt+0x12660>
   2443c:	add	r2, pc, #524	; 0x20c
   24440:	bic	r1, sl, #3
   24444:	vmov.i32	q8, #4	; 0x00000004
   24448:	vld1.64	{d18-d19}, [r2 :128]
   2444c:	mov	ip, r1
   24450:	mov	r2, r0
   24454:	vadd.i32	q10, q9, q8
   24458:	vst1.32	{d18-d19}, [r2]!
   2445c:	subs	ip, ip, #4
   24460:	vorr	q9, q10, q10
   24464:	bne	24454 <__assert_fail@plt+0x125c0>
   24468:	b	244fc <__assert_fail@plt+0x12668>
   2446c:	ldr	r0, [r9, #12]
   24470:	mov	r1, #0
   24474:	cmp	r5, #4
   24478:	bcc	244b4 <__assert_fail@plt+0x12620>
   2447c:	add	r3, pc, #460	; 0x1cc
   24480:	bic	r1, r5, #3
   24484:	add	r2, r0, sl, lsl #2
   24488:	vdup.32	q8, r6
   2448c:	vmov.i32	q10, #4	; 0x00000004
   24490:	vld1.64	{d18-d19}, [r3 :128]
   24494:	mov	r3, r1
   24498:	vadd.i32	q11, q9, q8
   2449c:	vadd.i32	q9, q9, q10
   244a0:	subs	r3, r3, #4
   244a4:	vst1.32	{d22-d23}, [r2]!
   244a8:	bne	24498 <__assert_fail@plt+0x12604>
   244ac:	cmp	r5, r1
   244b0:	beq	242b0 <__assert_fail@plt+0x1241c>
   244b4:	add	r2, r6, r1
   244b8:	sub	r3, r5, r1
   244bc:	add	r1, sl, r1
   244c0:	add	r0, r0, r1, lsl #2
   244c4:	str	r2, [r0], #4
   244c8:	add	r2, r2, #1
   244cc:	subs	r3, r3, #1
   244d0:	bne	244c4 <__assert_fail@plt+0x12630>
   244d4:	b	242b0 <__assert_fail@plt+0x1241c>
   244d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   244dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   244e0:	stm	r8, {r0, r1}
   244e4:	b	242f4 <__assert_fail@plt+0x12460>
   244e8:	mov	r0, #12
   244ec:	sub	sp, fp, #28
   244f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244f4:	str	r1, [r0, r1, lsl #2]
   244f8:	add	r1, r1, #1
   244fc:	cmp	sl, r1
   24500:	bne	244f4 <__assert_fail@plt+0x12660>
   24504:	mov	r0, #1
   24508:	strb	r0, [r9, #76]	; 0x4c
   2450c:	ldr	r0, [r9, #4]
   24510:	add	r1, sp, #16
   24514:	mov	r2, r3
   24518:	mov	r8, r3
   2451c:	add	r0, r0, sl
   24520:	bl	11a8c <memcpy@plt>
   24524:	ldr	lr, [r9, #8]
   24528:	ldr	ip, [sp, #4]
   2452c:	cmp	r8, #2
   24530:	str	r7, [lr, sl, lsl #2]
   24534:	ldr	r2, [r9, #12]
   24538:	str	ip, [r2, sl, lsl #2]
   2453c:	bcc	24610 <__assert_fail@plt+0x1277c>
   24540:	sub	r0, r8, #1
   24544:	mov	r1, #1
   24548:	cmp	r0, #4
   2454c:	bcs	24558 <__assert_fail@plt+0x126c4>
   24550:	ldr	ip, [sp, #4]
   24554:	b	245e0 <__assert_fail@plt+0x1274c>
   24558:	str	r0, [sp]
   2455c:	add	r3, r8, sl
   24560:	add	r0, sl, #1
   24564:	add	r7, lr, r0, lsl #2
   24568:	add	ip, lr, r3, lsl #2
   2456c:	add	r0, r2, r0, lsl #2
   24570:	cmp	r0, ip
   24574:	ldr	ip, [sp, #4]
   24578:	addcc	r3, r2, r3, lsl #2
   2457c:	cmpcc	r7, r3
   24580:	bcc	245e0 <__assert_fail@plt+0x1274c>
   24584:	add	r1, pc, #212	; 0xd4
   24588:	vdup.32	q8, ip
   2458c:	vdup.32	q9, r6
   24590:	vdup.32	q10, r5
   24594:	vmov.i32	q12, #4	; 0x00000004
   24598:	vmov.i8	q13, #255	; 0xff
   2459c:	vld1.64	{d22-d23}, [r1 :128]
   245a0:	ldr	r1, [sp]
   245a4:	bic	ip, r1, #3
   245a8:	orr	r1, ip, #1
   245ac:	mov	r3, ip
   245b0:	vcgt.u32	q14, q10, q11
   245b4:	subs	r3, r3, #4
   245b8:	vbsl	q14, q11, q9
   245bc:	vadd.i32	q11, q11, q12
   245c0:	vadd.i32	q14, q14, q8
   245c4:	vst1.32	{d28-d29}, [r0]!
   245c8:	vst1.32	{d26-d27}, [r7]!
   245cc:	bne	245b0 <__assert_fail@plt+0x1271c>
   245d0:	ldr	r0, [sp]
   245d4:	cmp	r0, ip
   245d8:	ldr	ip, [sp, #4]
   245dc:	beq	24610 <__assert_fail@plt+0x1277c>
   245e0:	add	r2, r2, sl, lsl #2
   245e4:	add	r0, lr, sl, lsl #2
   245e8:	mvn	r3, #0
   245ec:	cmp	r1, r5
   245f0:	mov	r7, r6
   245f4:	movcc	r7, r1
   245f8:	add	r7, r7, ip
   245fc:	str	r7, [r2, r1, lsl #2]
   24600:	str	r3, [r0, r1, lsl #2]
   24604:	add	r1, r1, #1
   24608:	cmp	r8, r1
   2460c:	bne	245ec <__assert_fail@plt+0x12758>
   24610:	ldr	r0, [r9, #48]	; 0x30
   24614:	ldr	r2, [r9, #52]	; 0x34
   24618:	sub	r1, r8, r5
   2461c:	mov	r6, ip
   24620:	add	r6, r5, r6
   24624:	add	r0, r0, r1
   24628:	cmp	r2, ip
   2462c:	str	r0, [r9, #48]	; 0x30
   24630:	ldrgt	r2, [r9, #56]	; 0x38
   24634:	addgt	r1, r2, r1
   24638:	strgt	r1, [r9, #56]	; 0x38
   2463c:	ldr	r1, [r9, #36]	; 0x24
   24640:	cmp	r1, r0
   24644:	movgt	r1, r0
   24648:	str	r1, [sp]
   2464c:	b	241e4 <__assert_fail@plt+0x12350>
   24650:	andeq	r0, r0, r0
   24654:	andeq	r0, r0, r1
   24658:	andeq	r0, r0, r2
   2465c:	andeq	r0, r0, r3
   24660:	andeq	r0, r0, r1
   24664:	andeq	r0, r0, r2
   24668:	andeq	r0, r0, r3
   2466c:	andeq	r0, r0, r4
   24670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24674:	add	fp, sp, #28
   24678:	sub	sp, sp, #68	; 0x44
   2467c:	mov	r4, r0
   24680:	ldr	r6, [r0, #28]
   24684:	ldr	r7, [r0, #36]	; 0x24
   24688:	ldr	r0, [r0, #48]	; 0x30
   2468c:	cmp	r7, r0
   24690:	movgt	r7, r0
   24694:	cmp	r7, r6
   24698:	ble	24838 <__assert_fail@plt+0x129a4>
   2469c:	add	r8, r4, #16
   246a0:	mov	r5, sp
   246a4:	ldm	r8, {r9, sl}
   246a8:	ldr	r0, [r4, #64]	; 0x40
   246ac:	sub	r2, r7, r6
   246b0:	cmp	r0, #0
   246b4:	bne	24784 <__assert_fail@plt+0x128f0>
   246b8:	ldr	r0, [r4]
   246bc:	ldr	r1, [r4, #24]
   246c0:	add	r0, r0, r1
   246c4:	add	r1, r0, r6
   246c8:	mov	r0, r5
   246cc:	mov	r3, r8
   246d0:	bl	34cac <__assert_fail@plt+0x22e18>
   246d4:	add	r1, r0, #1
   246d8:	cmp	r1, #2
   246dc:	bcc	246f8 <__assert_fail@plt+0x12864>
   246e0:	cmn	r0, #2
   246e4:	bne	24734 <__assert_fail@plt+0x128a0>
   246e8:	ldr	r0, [r4, #36]	; 0x24
   246ec:	ldr	r1, [r4, #48]	; 0x30
   246f0:	cmp	r0, r1
   246f4:	blt	24834 <__assert_fail@plt+0x129a0>
   246f8:	ldr	r1, [r4, #24]
   246fc:	ldr	r0, [r4]
   24700:	mov	r2, sl
   24704:	mov	sl, r5
   24708:	add	r1, r1, r6
   2470c:	ldrb	r1, [r0, r1]
   24710:	str	r1, [sp]
   24714:	ldr	r0, [r4, #64]	; 0x40
   24718:	cmp	r0, #0
   2471c:	ldrbne	r1, [r0, r1]
   24720:	mov	r0, #1
   24724:	strne	r1, [sp]
   24728:	str	r9, [r8]
   2472c:	str	r2, [r8, #4]
   24730:	b	2473c <__assert_fail@plt+0x128a8>
   24734:	ldr	r1, [sp]
   24738:	mov	sl, r5
   2473c:	ldr	r3, [r4, #8]
   24740:	add	r5, r0, r6
   24744:	str	r1, [r3, r6, lsl #2]
   24748:	add	r1, r6, #1
   2474c:	cmp	r1, r5
   24750:	bge	24770 <__assert_fail@plt+0x128dc>
   24754:	mvn	r1, #3
   24758:	add	r2, r1, r0, lsl #2
   2475c:	add	r0, r3, r6, lsl #2
   24760:	mov	r1, #255	; 0xff
   24764:	add	r0, r0, #4
   24768:	bl	11cd8 <memset@plt>
   2476c:	mov	r1, r5
   24770:	cmp	r7, r1
   24774:	mov	r6, r1
   24778:	mov	r5, sl
   2477c:	bgt	246a4 <__assert_fail@plt+0x12810>
   24780:	b	2483c <__assert_fail@plt+0x129a8>
   24784:	cmp	r2, #1
   24788:	add	r1, sp, #4
   2478c:	blt	246c8 <__assert_fail@plt+0x12834>
   24790:	ldr	r1, [r4, #80]	; 0x50
   24794:	cmp	r1, #1
   24798:	add	r1, sp, #4
   2479c:	blt	246c8 <__assert_fail@plt+0x12834>
   247a0:	ldm	r4, {r1, r3}
   247a4:	mov	lr, r5
   247a8:	ldr	r5, [r4, #24]
   247ac:	cmp	r2, #2
   247b0:	add	r5, r6, r5
   247b4:	ldrb	r1, [r1, r5]
   247b8:	mov	r5, lr
   247bc:	ldrb	r0, [r0, r1]
   247c0:	add	r1, sp, #4
   247c4:	strb	r0, [r3, r6]
   247c8:	strb	r0, [sp, #4]
   247cc:	blt	246c8 <__assert_fail@plt+0x12834>
   247d0:	ldr	r0, [r4, #80]	; 0x50
   247d4:	add	r1, sp, #4
   247d8:	cmp	r0, #2
   247dc:	blt	246c8 <__assert_fail@plt+0x12834>
   247e0:	mov	r0, #1
   247e4:	ldm	r4, {r1, ip}
   247e8:	ldr	r5, [r4, #24]
   247ec:	ldr	r3, [r4, #64]	; 0x40
   247f0:	add	r1, r1, r5
   247f4:	add	r1, r1, r6
   247f8:	ldrb	r1, [r1, r0]
   247fc:	ldrb	r1, [r3, r1]
   24800:	add	r3, ip, r6
   24804:	strb	r1, [r3, r0]
   24808:	add	r3, sp, #4
   2480c:	strb	r1, [r3, r0]
   24810:	add	r0, r0, #1
   24814:	cmp	r0, r2
   24818:	bge	24828 <__assert_fail@plt+0x12994>
   2481c:	ldr	r1, [r4, #80]	; 0x50
   24820:	cmp	r0, r1
   24824:	blt	247e4 <__assert_fail@plt+0x12950>
   24828:	add	r1, sp, #4
   2482c:	mov	r5, lr
   24830:	b	246c8 <__assert_fail@plt+0x12834>
   24834:	stm	r8, {r9, sl}
   24838:	mov	r1, r6
   2483c:	str	r1, [r4, #28]
   24840:	str	r1, [r4, #32]
   24844:	sub	sp, fp, #28
   24848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2484c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24850:	add	fp, sp, #28
   24854:	sub	sp, sp, #28
   24858:	ldr	r9, [r1]
   2485c:	mov	r5, r0
   24860:	ldr	r4, [fp, #12]
   24864:	mov	r6, r2
   24868:	str	r1, [sp, #16]
   2486c:	str	r3, [sp, #20]
   24870:	ldr	r0, [r9, #84]	; 0x54
   24874:	str	r4, [sp, #4]
   24878:	str	r0, [sp, #12]
   2487c:	ldr	r0, [fp, #8]
   24880:	str	r0, [sp]
   24884:	mov	r0, r5
   24888:	bl	252f4 <__assert_fail@plt+0x13460>
   2488c:	mov	r7, r0
   24890:	cmp	r0, #0
   24894:	bne	248a4 <__assert_fail@plt+0x12a10>
   24898:	ldr	r0, [r4]
   2489c:	cmp	r0, #0
   248a0:	bne	24ab4 <__assert_fail@plt+0x12c20>
   248a4:	ldrb	r0, [r6, #4]
   248a8:	cmp	r0, #10
   248ac:	bne	249f0 <__assert_fail@plt+0x12b5c>
   248b0:	ldr	r0, [sp, #20]
   248b4:	mov	sl, #0
   248b8:	orr	r0, r0, #8388608	; 0x800000
   248bc:	str	r0, [sp, #24]
   248c0:	b	24960 <__assert_fail@plt+0x12acc>
   248c4:	ldr	r1, [fp, #8]
   248c8:	cmp	r1, #0
   248cc:	beq	248dc <__assert_fail@plt+0x12a48>
   248d0:	cmp	r0, #9
   248d4:	mov	r8, #0
   248d8:	beq	24990 <__assert_fail@plt+0x12afc>
   248dc:	ldr	r0, [sp, #12]
   248e0:	ldr	r4, [r9, #84]	; 0x54
   248e4:	ldr	r1, [sp, #16]
   248e8:	ldr	r3, [sp, #20]
   248ec:	mov	r2, r6
   248f0:	str	r0, [r9, #84]	; 0x54
   248f4:	ldr	r0, [fp, #8]
   248f8:	str	r0, [sp]
   248fc:	ldr	r0, [fp, #12]
   24900:	str	r0, [sp, #4]
   24904:	mov	r0, r5
   24908:	bl	252f4 <__assert_fail@plt+0x13460>
   2490c:	mov	r8, r0
   24910:	cmp	r0, #0
   24914:	bne	24928 <__assert_fail@plt+0x12a94>
   24918:	ldr	r0, [fp, #12]
   2491c:	ldr	r0, [r0]
   24920:	cmp	r0, #0
   24924:	bne	24a00 <__assert_fail@plt+0x12b6c>
   24928:	ldr	r0, [r9, #84]	; 0x54
   2492c:	orr	r0, r0, r4
   24930:	str	r0, [r9, #84]	; 0x54
   24934:	b	24990 <__assert_fail@plt+0x12afc>
   24938:	mov	r0, #996	; 0x3e4
   2493c:	bl	33c98 <__assert_fail@plt+0x21e04>
   24940:	cmp	r0, #0
   24944:	beq	24aa8 <__assert_fail@plt+0x12c14>
   24948:	ldr	r1, [r9, #56]	; 0x38
   2494c:	str	r1, [r0]
   24950:	mov	r1, #0
   24954:	str	r1, [r9, #64]	; 0x40
   24958:	str	r0, [r9, #56]	; 0x38
   2495c:	b	249a0 <__assert_fail@plt+0x12b0c>
   24960:	ldr	r2, [sp, #24]
   24964:	mov	r0, r6
   24968:	mov	r1, r5
   2496c:	bl	24abc <__assert_fail@plt+0x12c28>
   24970:	ldr	r1, [r5, #40]	; 0x28
   24974:	mov	r8, #0
   24978:	add	r0, r1, r0
   2497c:	str	r0, [r5, #40]	; 0x28
   24980:	ldrb	r0, [r6, #4]
   24984:	orr	r1, r0, #8
   24988:	cmp	r1, #10
   2498c:	bne	248c4 <__assert_fail@plt+0x12a30>
   24990:	ldr	r1, [r9, #64]	; 0x40
   24994:	cmp	r1, #31
   24998:	beq	24938 <__assert_fail@plt+0x12aa4>
   2499c:	ldr	r0, [r9, #56]	; 0x38
   249a0:	add	r2, r1, #1
   249a4:	add	r4, r0, r1, lsl #5
   249a8:	mov	r0, #10
   249ac:	cmp	r7, #0
   249b0:	str	r2, [r9, #64]	; 0x40
   249b4:	str	sl, [r4, #4]!
   249b8:	stmib	r4, {r7, r8, sl}
   249bc:	str	sl, [r4, #16]
   249c0:	str	sl, [r4, #20]
   249c4:	str	r0, [r4, #24]
   249c8:	mvn	r0, #0
   249cc:	str	r0, [r4, #28]
   249d0:	strne	r4, [r7]
   249d4:	cmp	r8, #0
   249d8:	mov	r7, r4
   249dc:	strne	r4, [r8]
   249e0:	ldrb	r0, [r6, #4]
   249e4:	cmp	r0, #10
   249e8:	beq	24960 <__assert_fail@plt+0x12acc>
   249ec:	b	249f4 <__assert_fail@plt+0x12b60>
   249f0:	mov	r4, r7
   249f4:	mov	r0, r4
   249f8:	sub	sp, fp, #28
   249fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a00:	mov	r4, #0
   24a04:	cmp	r7, #0
   24a08:	beq	249f4 <__assert_fail@plt+0x12b60>
   24a0c:	movw	r8, #255	; 0xff
   24a10:	movt	r8, #4
   24a14:	mov	r6, r7
   24a18:	ldr	r7, [r7, #4]
   24a1c:	cmp	r7, #0
   24a20:	bne	24a14 <__assert_fail@plt+0x12b80>
   24a24:	ldr	r7, [r6, #8]
   24a28:	cmp	r7, #0
   24a2c:	bne	24a14 <__assert_fail@plt+0x12b80>
   24a30:	ldr	r0, [r6, #24]
   24a34:	and	r0, r0, r8
   24a38:	cmp	r0, #3
   24a3c:	beq	24a74 <__assert_fail@plt+0x12be0>
   24a40:	cmp	r0, #6
   24a44:	bne	24a7c <__assert_fail@plt+0x12be8>
   24a48:	ldr	r5, [r6, #20]
   24a4c:	ldr	r0, [r5]
   24a50:	bl	17754 <__assert_fail@plt+0x58c0>
   24a54:	ldr	r0, [r5, #4]
   24a58:	bl	17754 <__assert_fail@plt+0x58c0>
   24a5c:	ldr	r0, [r5, #8]
   24a60:	bl	17754 <__assert_fail@plt+0x58c0>
   24a64:	ldr	r0, [r5, #12]
   24a68:	bl	17754 <__assert_fail@plt+0x58c0>
   24a6c:	mov	r0, r5
   24a70:	b	24a78 <__assert_fail@plt+0x12be4>
   24a74:	ldr	r0, [r6, #20]
   24a78:	bl	17754 <__assert_fail@plt+0x58c0>
   24a7c:	ldr	r0, [r6]
   24a80:	cmp	r0, #0
   24a84:	beq	249f4 <__assert_fail@plt+0x12b60>
   24a88:	ldr	r7, [r0, #8]
   24a8c:	cmp	r7, r6
   24a90:	mov	r6, r0
   24a94:	beq	24a30 <__assert_fail@plt+0x12b9c>
   24a98:	cmp	r7, #0
   24a9c:	mov	r6, r0
   24aa0:	beq	24a30 <__assert_fail@plt+0x12b9c>
   24aa4:	b	24a14 <__assert_fail@plt+0x12b80>
   24aa8:	ldr	r1, [fp, #12]
   24aac:	mov	r0, #12
   24ab0:	str	r0, [r1]
   24ab4:	mov	r4, #0
   24ab8:	b	249f4 <__assert_fail@plt+0x12b60>
   24abc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24ac0:	add	fp, sp, #24
   24ac4:	sub	sp, sp, #8
   24ac8:	mov	r9, r0
   24acc:	mov	r7, r1
   24ad0:	ldr	r0, [r1, #40]	; 0x28
   24ad4:	ldr	r1, [r1, #56]	; 0x38
   24ad8:	cmp	r1, r0
   24adc:	ble	24bc4 <__assert_fail@plt+0x12d30>
   24ae0:	ldr	r1, [r7, #4]
   24ae4:	mov	r5, r9
   24ae8:	mov	r8, r2
   24aec:	ldrb	r6, [r1, r0]
   24af0:	strb	r6, [r5], #4
   24af4:	ldr	r0, [r5]
   24af8:	bic	r1, r0, #6291456	; 0x600000
   24afc:	str	r1, [r5]
   24b00:	ldr	r3, [r7, #80]	; 0x50
   24b04:	cmp	r3, #2
   24b08:	blt	24b2c <__assert_fail@plt+0x12c98>
   24b0c:	ldr	r2, [r7, #28]
   24b10:	ldr	r1, [r7, #40]	; 0x28
   24b14:	cmp	r1, r2
   24b18:	beq	24b2c <__assert_fail@plt+0x12c98>
   24b1c:	ldr	r2, [r7, #8]
   24b20:	ldr	r1, [r2, r1, lsl #2]
   24b24:	cmn	r1, #1
   24b28:	beq	25000 <__assert_fail@plt+0x1316c>
   24b2c:	movw	r1, #65280	; 0xff00
   24b30:	cmp	r6, #92	; 0x5c
   24b34:	movt	r1, #65439	; 0xff9f
   24b38:	bne	24bd4 <__assert_fail@plt+0x12d40>
   24b3c:	ldr	r6, [r7, #40]	; 0x28
   24b40:	ldr	r4, [r7, #48]	; 0x30
   24b44:	add	r2, r6, #1
   24b48:	cmp	r2, r4
   24b4c:	bge	24c28 <__assert_fail@plt+0x12d94>
   24b50:	ldrb	r4, [r7, #75]	; 0x4b
   24b54:	cmp	r4, #0
   24b58:	bne	25284 <__assert_fail@plt+0x133f0>
   24b5c:	ldr	r3, [r7, #4]
   24b60:	ldrb	r6, [r3, r2]
   24b64:	and	r0, r0, r1
   24b68:	strb	r6, [r9]
   24b6c:	orr	r4, r0, #1
   24b70:	str	r4, [r9, #4]
   24b74:	ldr	r0, [r7, #80]	; 0x50
   24b78:	cmp	r0, #2
   24b7c:	blt	24e4c <__assert_fail@plt+0x12fb8>
   24b80:	ldr	r0, [r7, #8]
   24b84:	ldr	r1, [r7, #40]	; 0x28
   24b88:	add	r0, r0, r1, lsl #2
   24b8c:	ldr	r4, [r0, #4]
   24b90:	mov	r0, r4
   24b94:	bl	11cb4 <iswalnum@plt>
   24b98:	sub	r1, r4, #95	; 0x5f
   24b9c:	cmp	r0, #0
   24ba0:	clz	r1, r1
   24ba4:	movwne	r0, #1
   24ba8:	lsr	r1, r1, #5
   24bac:	orr	r0, r1, r0
   24bb0:	ldr	r1, [r5]
   24bb4:	bic	r1, r1, #4194304	; 0x400000
   24bb8:	orr	r0, r1, r0, lsl #22
   24bbc:	uxtb	r1, r6
   24bc0:	b	24e70 <__assert_fail@plt+0x12fdc>
   24bc4:	mov	r0, #2
   24bc8:	mov	r4, #0
   24bcc:	strb	r0, [r9, #4]
   24bd0:	b	25278 <__assert_fail@plt+0x133e4>
   24bd4:	and	r0, r0, r1
   24bd8:	orr	r4, r0, #1
   24bdc:	str	r4, [r5]
   24be0:	ldr	r0, [r7, #80]	; 0x50
   24be4:	cmp	r0, #2
   24be8:	blt	24c34 <__assert_fail@plt+0x12da0>
   24bec:	ldr	r0, [r7, #8]
   24bf0:	ldr	r1, [r7, #40]	; 0x28
   24bf4:	ldr	r4, [r0, r1, lsl #2]
   24bf8:	mov	r0, r4
   24bfc:	bl	11cb4 <iswalnum@plt>
   24c00:	sub	r1, r4, #95	; 0x5f
   24c04:	cmp	r0, #0
   24c08:	clz	r1, r1
   24c0c:	movwne	r0, #1
   24c10:	lsr	r1, r1, #5
   24c14:	orr	r0, r1, r0
   24c18:	ldr	r1, [r5]
   24c1c:	bic	r1, r1, #4194304	; 0x400000
   24c20:	orr	r0, r1, r0, lsl #22
   24c24:	b	24c54 <__assert_fail@plt+0x12dc0>
   24c28:	and	r0, r0, r1
   24c2c:	orr	r0, r0, #36	; 0x24
   24c30:	b	25014 <__assert_fail@plt+0x13180>
   24c34:	bl	11c54 <__ctype_b_loc@plt>
   24c38:	ldr	r0, [r0]
   24c3c:	cmp	r6, #95	; 0x5f
   24c40:	add	r0, r0, r6, lsl #1
   24c44:	ldrh	r0, [r0]
   24c48:	ubfx	r0, r0, #3, #1
   24c4c:	movweq	r0, #1
   24c50:	orr	r0, r4, r0, lsl #22
   24c54:	sub	r1, r6, #10
   24c58:	mov	r4, #1
   24c5c:	str	r0, [r5]
   24c60:	cmp	r1, #115	; 0x73
   24c64:	bhi	25278 <__assert_fail@plt+0x133e4>
   24c68:	add	r2, pc, #0
   24c6c:	ldr	pc, [r2, r1, lsl #2]
   24c70:	andeq	r4, r2, r0, asr #28
   24c74:	andeq	r5, r2, r8, ror r2
   24c78:	andeq	r5, r2, r8, ror r2
   24c7c:	andeq	r5, r2, r8, ror r2
   24c80:	andeq	r5, r2, r8, ror r2
   24c84:	andeq	r5, r2, r8, ror r2
   24c88:	andeq	r5, r2, r8, ror r2
   24c8c:	andeq	r5, r2, r8, ror r2
   24c90:	andeq	r5, r2, r8, ror r2
   24c94:	andeq	r5, r2, r8, ror r2
   24c98:	andeq	r5, r2, r8, ror r2
   24c9c:	andeq	r5, r2, r8, ror r2
   24ca0:	andeq	r5, r2, r8, ror r2
   24ca4:	andeq	r5, r2, r8, ror r2
   24ca8:	andeq	r5, r2, r8, ror r2
   24cac:	andeq	r5, r2, r8, ror r2
   24cb0:	andeq	r5, r2, r8, ror r2
   24cb4:	andeq	r5, r2, r8, ror r2
   24cb8:	andeq	r5, r2, r8, ror r2
   24cbc:	andeq	r5, r2, r8, ror r2
   24cc0:	andeq	r5, r2, r8, ror r2
   24cc4:	andeq	r5, r2, r8, ror r2
   24cc8:	andeq	r5, r2, r8, ror r2
   24ccc:	andeq	r5, r2, r8, ror r2
   24cd0:	andeq	r5, r2, r8, ror r2
   24cd4:	andeq	r5, r2, r8, ror r2
   24cd8:	andeq	r5, r2, r0, lsr #32
   24cdc:	andeq	r5, r2, r8, ror r2
   24ce0:	andeq	r5, r2, r8, ror r2
   24ce4:	andeq	r5, r2, r8, ror r2
   24ce8:	andeq	r5, r2, r8, ror r0
   24cec:	andeq	r5, r2, r4, lsl #1
   24cf0:	muleq	r2, r0, r0
   24cf4:	muleq	r2, r8, r0
   24cf8:	andeq	r5, r2, r8, ror r2
   24cfc:	andeq	r5, r2, r8, ror r2
   24d00:	andeq	r5, r2, r8, lsr #1
   24d04:	andeq	r5, r2, r8, ror r2
   24d08:	andeq	r5, r2, r8, ror r2
   24d0c:	andeq	r5, r2, r8, ror r2
   24d10:	andeq	r5, r2, r8, ror r2
   24d14:	andeq	r5, r2, r8, ror r2
   24d18:	andeq	r5, r2, r8, ror r2
   24d1c:	andeq	r5, r2, r8, ror r2
   24d20:	andeq	r5, r2, r8, ror r2
   24d24:	andeq	r5, r2, r8, ror r2
   24d28:	andeq	r5, r2, r8, ror r2
   24d2c:	andeq	r5, r2, r8, ror r2
   24d30:	andeq	r5, r2, r8, ror r2
   24d34:	andeq	r5, r2, r8, ror r2
   24d38:	andeq	r5, r2, r8, ror r2
   24d3c:	andeq	r5, r2, r8, ror r2
   24d40:	andeq	r5, r2, r8, ror r2
   24d44:	strheq	r5, [r2], -r0
   24d48:	andeq	r5, r2, r8, ror r2
   24d4c:	andeq	r5, r2, r8, ror r2
   24d50:	andeq	r5, r2, r8, ror r2
   24d54:	andeq	r5, r2, r8, ror r2
   24d58:	andeq	r5, r2, r8, ror r2
   24d5c:	andeq	r5, r2, r8, ror r2
   24d60:	andeq	r5, r2, r8, ror r2
   24d64:	andeq	r5, r2, r8, ror r2
   24d68:	andeq	r5, r2, r8, ror r2
   24d6c:	andeq	r5, r2, r8, ror r2
   24d70:	andeq	r5, r2, r8, ror r2
   24d74:	andeq	r5, r2, r8, ror r2
   24d78:	andeq	r5, r2, r8, ror r2
   24d7c:	andeq	r5, r2, r8, ror r2
   24d80:	andeq	r5, r2, r8, ror r2
   24d84:	andeq	r5, r2, r8, ror r2
   24d88:	andeq	r5, r2, r8, ror r2
   24d8c:	andeq	r5, r2, r8, ror r2
   24d90:	andeq	r5, r2, r8, ror r2
   24d94:	andeq	r5, r2, r8, ror r2
   24d98:	andeq	r5, r2, r8, ror r2
   24d9c:	andeq	r5, r2, r8, ror r2
   24da0:	andeq	r5, r2, r8, ror r2
   24da4:	andeq	r5, r2, r8, ror r2
   24da8:	andeq	r5, r2, r8, ror r2
   24dac:	andeq	r5, r2, r8, ror r2
   24db0:	andeq	r5, r2, r8, ror r2
   24db4:	andeq	r5, r2, r0, asr #1
   24db8:	andeq	r5, r2, r8, ror r2
   24dbc:	andeq	r5, r2, r8, ror r2
   24dc0:	andeq	r5, r2, r8, asr #1
   24dc4:	andeq	r5, r2, r8, ror r2
   24dc8:	andeq	r5, r2, r8, ror r2
   24dcc:	andeq	r5, r2, r8, ror r2
   24dd0:	andeq	r5, r2, r8, ror r2
   24dd4:	andeq	r5, r2, r8, ror r2
   24dd8:	andeq	r5, r2, r8, ror r2
   24ddc:	andeq	r5, r2, r8, ror r2
   24de0:	andeq	r5, r2, r8, ror r2
   24de4:	andeq	r5, r2, r8, ror r2
   24de8:	andeq	r5, r2, r8, ror r2
   24dec:	andeq	r5, r2, r8, ror r2
   24df0:	andeq	r5, r2, r8, ror r2
   24df4:	andeq	r5, r2, r8, ror r2
   24df8:	andeq	r5, r2, r8, ror r2
   24dfc:	andeq	r5, r2, r8, ror r2
   24e00:	andeq	r5, r2, r8, ror r2
   24e04:	andeq	r5, r2, r8, ror r2
   24e08:	andeq	r5, r2, r8, ror r2
   24e0c:	andeq	r5, r2, r8, ror r2
   24e10:	andeq	r5, r2, r8, ror r2
   24e14:	andeq	r5, r2, r8, ror r2
   24e18:	andeq	r5, r2, r8, ror r2
   24e1c:	andeq	r5, r2, r8, ror r2
   24e20:	andeq	r5, r2, r8, ror r2
   24e24:	andeq	r5, r2, r8, ror r2
   24e28:	andeq	r5, r2, r8, ror r2
   24e2c:	andeq	r5, r2, r8, ror r2
   24e30:	andeq	r5, r2, r8, ror r2
   24e34:	strdeq	r5, [r2], -r0
   24e38:	andeq	r5, r2, r0, lsl #2
   24e3c:	andeq	r5, r2, r4, lsl r1
   24e40:	tst	r8, #2048	; 0x800
   24e44:	bne	2510c <__assert_fail@plt+0x13278>
   24e48:	b	25278 <__assert_fail@plt+0x133e4>
   24e4c:	bl	11c54 <__ctype_b_loc@plt>
   24e50:	ldr	r0, [r0]
   24e54:	uxtb	r1, r6
   24e58:	cmp	r1, #95	; 0x5f
   24e5c:	add	r0, r0, r1, lsl #1
   24e60:	ldrh	r0, [r0]
   24e64:	ubfx	r0, r0, #3, #1
   24e68:	movweq	r0, #1
   24e6c:	orr	r0, r4, r0, lsl #22
   24e70:	mvn	r2, #38	; 0x26
   24e74:	mov	r4, #2
   24e78:	str	r0, [r5]
   24e7c:	uxtab	r2, r2, r6
   24e80:	cmp	r2, #86	; 0x56
   24e84:	bhi	25278 <__assert_fail@plt+0x133e4>
   24e88:	add	r3, pc, #0
   24e8c:	ldr	pc, [r3, r2, lsl #2]
   24e90:	andeq	r5, r2, r0, asr r1
   24e94:	andeq	r5, r2, r0, ror #2
   24e98:	andeq	r5, r2, r0, ror r1
   24e9c:	andeq	r5, r2, r8, ror r2
   24ea0:	andeq	r5, r2, r0, lsl #3
   24ea4:	andeq	r5, r2, r8, ror r2
   24ea8:	andeq	r5, r2, r8, ror r2
   24eac:	andeq	r5, r2, r8, ror r2
   24eb0:	andeq	r5, r2, r8, ror r2
   24eb4:	andeq	r5, r2, r8, ror r2
   24eb8:	andeq	r4, r2, ip, ror #31
   24ebc:	andeq	r4, r2, ip, ror #31
   24ec0:	andeq	r4, r2, ip, ror #31
   24ec4:	andeq	r4, r2, ip, ror #31
   24ec8:	andeq	r4, r2, ip, ror #31
   24ecc:	andeq	r4, r2, ip, ror #31
   24ed0:	andeq	r4, r2, ip, ror #31
   24ed4:	andeq	r4, r2, ip, ror #31
   24ed8:	andeq	r4, r2, ip, ror #31
   24edc:	andeq	r5, r2, r8, ror r2
   24ee0:	andeq	r5, r2, r8, ror r2
   24ee4:	muleq	r2, r8, r1
   24ee8:	andeq	r5, r2, r8, ror r2
   24eec:	andeq	r5, r2, r8, lsr #3
   24ef0:			; <UNDEFINED> instruction: 0x000251b8
   24ef4:	andeq	r5, r2, r8, ror r2
   24ef8:	andeq	r5, r2, r8, ror r2
   24efc:	ldrdeq	r5, [r2], -r0
   24f00:	andeq	r5, r2, r8, ror r2
   24f04:	andeq	r5, r2, r8, ror r2
   24f08:	andeq	r5, r2, r8, ror r2
   24f0c:	andeq	r5, r2, r8, ror r2
   24f10:	andeq	r5, r2, r8, ror r2
   24f14:	andeq	r5, r2, r8, ror r2
   24f18:	andeq	r5, r2, r8, ror r2
   24f1c:	andeq	r5, r2, r8, ror r2
   24f20:	andeq	r5, r2, r8, ror r2
   24f24:	andeq	r5, r2, r8, ror r2
   24f28:	andeq	r5, r2, r8, ror r2
   24f2c:	andeq	r5, r2, r8, ror r2
   24f30:	andeq	r5, r2, r8, ror r2
   24f34:	andeq	r5, r2, r8, ror r2
   24f38:	andeq	r5, r2, r8, ror r2
   24f3c:	andeq	r5, r2, r8, ror r2
   24f40:	andeq	r5, r2, r0, ror #3
   24f44:	andeq	r5, r2, r8, ror r2
   24f48:	andeq	r5, r2, r8, ror r2
   24f4c:	andeq	r5, r2, r8, ror r2
   24f50:	strdeq	r5, [r2], -r0
   24f54:	andeq	r5, r2, r8, ror r2
   24f58:	andeq	r5, r2, r8, ror r2
   24f5c:	andeq	r5, r2, r8, ror r2
   24f60:	andeq	r5, r2, r8, ror r2
   24f64:	andeq	r5, r2, r8, ror r2
   24f68:	andeq	r5, r2, r8, ror r2
   24f6c:	andeq	r5, r2, r8, ror r2
   24f70:	andeq	r5, r2, r8, ror r2
   24f74:	andeq	r5, r2, r0, lsl #4
   24f78:	andeq	r5, r2, r8, ror r2
   24f7c:	andeq	r5, r2, r0, lsl r2
   24f80:	andeq	r5, r2, r8, ror r2
   24f84:	andeq	r5, r2, r8, ror r2
   24f88:	andeq	r5, r2, r8, ror r2
   24f8c:	andeq	r5, r2, r8, ror r2
   24f90:	andeq	r5, r2, r8, ror r2
   24f94:	andeq	r5, r2, r8, ror r2
   24f98:	andeq	r5, r2, r8, ror r2
   24f9c:	andeq	r5, r2, r8, ror r2
   24fa0:	andeq	r5, r2, r8, ror r2
   24fa4:	andeq	r5, r2, r8, ror r2
   24fa8:	andeq	r5, r2, r8, ror r2
   24fac:	andeq	r5, r2, r8, ror r2
   24fb0:	andeq	r5, r2, r8, ror r2
   24fb4:	andeq	r5, r2, r8, ror r2
   24fb8:	andeq	r5, r2, r8, ror r2
   24fbc:	andeq	r5, r2, r8, ror r2
   24fc0:	andeq	r5, r2, r0, lsr #4
   24fc4:	andeq	r5, r2, r8, ror r2
   24fc8:	andeq	r5, r2, r8, ror r2
   24fcc:	andeq	r5, r2, r8, ror r2
   24fd0:	andeq	r5, r2, r0, lsr r2
   24fd4:	andeq	r5, r2, r8, ror r2
   24fd8:	andeq	r5, r2, r8, ror r2
   24fdc:	andeq	r5, r2, r8, ror r2
   24fe0:	andeq	r5, r2, r0, asr #4
   24fe4:	andeq	r5, r2, r4, asr r2
   24fe8:	andeq	r5, r2, r0, ror #4
   24fec:	tst	r8, #16384	; 0x4000
   24ff0:	bne	25278 <__assert_fail@plt+0x133e4>
   24ff4:	sub	r1, r1, #49	; 0x31
   24ff8:	mov	r2, #4
   24ffc:	b	250e0 <__assert_fail@plt+0x1324c>
   25000:	movw	r1, #65280	; 0xff00
   25004:	movt	r1, #65439	; 0xff9f
   25008:	and	r0, r0, r1
   2500c:	orr	r0, r0, #1
   25010:	orr	r0, r0, #2097152	; 0x200000
   25014:	str	r0, [r5]
   25018:	mov	r4, #1
   2501c:	b	25278 <__assert_fail@plt+0x133e4>
   25020:	tst	r8, #8
   25024:	bne	25070 <__assert_fail@plt+0x131dc>
   25028:	ldr	r1, [r7, #40]	; 0x28
   2502c:	ldr	r2, [r7, #48]	; 0x30
   25030:	add	r1, r1, #1
   25034:	cmp	r1, r2
   25038:	beq	25070 <__assert_fail@plt+0x131dc>
   2503c:	str	r1, [r7, #40]	; 0x28
   25040:	mov	r0, sp
   25044:	mov	r1, r7
   25048:	mov	r2, r8
   2504c:	bl	24abc <__assert_fail@plt+0x12c28>
   25050:	ldr	r0, [r7, #40]	; 0x28
   25054:	sub	r0, r0, #1
   25058:	str	r0, [r7, #40]	; 0x28
   2505c:	ldrb	r0, [sp, #4]
   25060:	sub	r0, r0, #9
   25064:	cmp	r0, #1
   25068:	bhi	25278 <__assert_fail@plt+0x133e4>
   2506c:	ldr	r0, [r5]
   25070:	mov	r1, #32
   25074:	b	250dc <__assert_fail@plt+0x13248>
   25078:	tst	r8, #8192	; 0x2000
   2507c:	bne	25168 <__assert_fail@plt+0x132d4>
   25080:	b	25278 <__assert_fail@plt+0x133e4>
   25084:	tst	r8, #8192	; 0x2000
   25088:	bne	25178 <__assert_fail@plt+0x132e4>
   2508c:	b	25278 <__assert_fail@plt+0x133e4>
   25090:	mov	r1, #11
   25094:	b	25270 <__assert_fail@plt+0x133dc>
   25098:	movw	r1, #1026	; 0x402
   2509c:	tst	r8, r1
   250a0:	bne	25278 <__assert_fail@plt+0x133e4>
   250a4:	b	25190 <__assert_fail@plt+0x132fc>
   250a8:	mov	r1, #5
   250ac:	b	25270 <__assert_fail@plt+0x133dc>
   250b0:	movw	r1, #1026	; 0x402
   250b4:	tst	r8, r1
   250b8:	bne	25278 <__assert_fail@plt+0x133e4>
   250bc:	b	251c8 <__assert_fail@plt+0x13334>
   250c0:	mov	r1, #20
   250c4:	b	25270 <__assert_fail@plt+0x133dc>
   250c8:	movw	r1, #8
   250cc:	movt	r1, #128	; 0x80
   250d0:	tst	r8, r1
   250d4:	beq	25124 <__assert_fail@plt+0x13290>
   250d8:	mov	r1, #16
   250dc:	mov	r2, #12
   250e0:	bfi	r0, r2, #0, #8
   250e4:	str	r1, [r9]
   250e8:	str	r0, [r9, #4]
   250ec:	b	25278 <__assert_fail@plt+0x133e4>
   250f0:	and	r1, r8, #4608	; 0x1200
   250f4:	cmp	r1, #4608	; 0x1200
   250f8:	beq	2524c <__assert_fail@plt+0x133b8>
   250fc:	b	25278 <__assert_fail@plt+0x133e4>
   25100:	and	r1, r8, #33792	; 0x8400
   25104:	cmp	r1, #32768	; 0x8000
   25108:	bne	25278 <__assert_fail@plt+0x133e4>
   2510c:	mov	r1, #10
   25110:	b	25270 <__assert_fail@plt+0x133dc>
   25114:	and	r1, r8, #4608	; 0x1200
   25118:	cmp	r1, #4608	; 0x1200
   2511c:	beq	2526c <__assert_fail@plt+0x133d8>
   25120:	b	25278 <__assert_fail@plt+0x133e4>
   25124:	ldr	r1, [r7, #40]	; 0x28
   25128:	cmp	r1, #0
   2512c:	beq	250d8 <__assert_fail@plt+0x13244>
   25130:	tst	r8, #2048	; 0x800
   25134:	beq	25278 <__assert_fail@plt+0x133e4>
   25138:	ldr	r2, [r7, #4]
   2513c:	add	r1, r2, r1
   25140:	ldrb	r1, [r1, #-1]
   25144:	cmp	r1, #10
   25148:	beq	250d8 <__assert_fail@plt+0x13244>
   2514c:	b	25278 <__assert_fail@plt+0x133e4>
   25150:	tst	r8, #524288	; 0x80000
   25154:	bne	25278 <__assert_fail@plt+0x133e4>
   25158:	mov	r1, #128	; 0x80
   2515c:	b	250dc <__assert_fail@plt+0x13248>
   25160:	tst	r8, #8192	; 0x2000
   25164:	bne	25278 <__assert_fail@plt+0x133e4>
   25168:	mov	r1, #8
   2516c:	b	25270 <__assert_fail@plt+0x133dc>
   25170:	tst	r8, #8192	; 0x2000
   25174:	bne	25278 <__assert_fail@plt+0x133e4>
   25178:	mov	r1, #9
   2517c:	b	25270 <__assert_fail@plt+0x133dc>
   25180:	movw	r1, #1026	; 0x402
   25184:	and	r1, r8, r1
   25188:	cmp	r1, #2
   2518c:	bne	25278 <__assert_fail@plt+0x133e4>
   25190:	mov	r1, #18
   25194:	b	25270 <__assert_fail@plt+0x133dc>
   25198:	tst	r8, #524288	; 0x80000
   2519c:	bne	25278 <__assert_fail@plt+0x133e4>
   251a0:	mov	r1, #6
   251a4:	b	250dc <__assert_fail@plt+0x13248>
   251a8:	tst	r8, #524288	; 0x80000
   251ac:	bne	25278 <__assert_fail@plt+0x133e4>
   251b0:	mov	r1, #9
   251b4:	b	250dc <__assert_fail@plt+0x13248>
   251b8:	movw	r1, #1026	; 0x402
   251bc:	and	r1, r8, r1
   251c0:	cmp	r1, #2
   251c4:	bne	25278 <__assert_fail@plt+0x133e4>
   251c8:	mov	r1, #19
   251cc:	b	25270 <__assert_fail@plt+0x133dc>
   251d0:	tst	r8, #524288	; 0x80000
   251d4:	bne	25278 <__assert_fail@plt+0x133e4>
   251d8:	mov	r1, #512	; 0x200
   251dc:	b	250dc <__assert_fail@plt+0x13248>
   251e0:	tst	r8, #524288	; 0x80000
   251e4:	bne	25278 <__assert_fail@plt+0x133e4>
   251e8:	mov	r1, #35	; 0x23
   251ec:	b	25270 <__assert_fail@plt+0x133dc>
   251f0:	tst	r8, #524288	; 0x80000
   251f4:	bne	25278 <__assert_fail@plt+0x133e4>
   251f8:	mov	r1, #33	; 0x21
   251fc:	b	25270 <__assert_fail@plt+0x133dc>
   25200:	tst	r8, #524288	; 0x80000
   25204:	bne	25278 <__assert_fail@plt+0x133e4>
   25208:	mov	r1, #64	; 0x40
   2520c:	b	250dc <__assert_fail@plt+0x13248>
   25210:	tst	r8, #524288	; 0x80000
   25214:	bne	25278 <__assert_fail@plt+0x133e4>
   25218:	mov	r1, #256	; 0x100
   2521c:	b	250dc <__assert_fail@plt+0x13248>
   25220:	tst	r8, #524288	; 0x80000
   25224:	bne	25278 <__assert_fail@plt+0x133e4>
   25228:	mov	r1, #34	; 0x22
   2522c:	b	25270 <__assert_fail@plt+0x133dc>
   25230:	tst	r8, #524288	; 0x80000
   25234:	bne	25278 <__assert_fail@plt+0x133e4>
   25238:	mov	r1, #32
   2523c:	b	25270 <__assert_fail@plt+0x133dc>
   25240:	and	r1, r8, #4608	; 0x1200
   25244:	cmp	r1, #512	; 0x200
   25248:	bne	25278 <__assert_fail@plt+0x133e4>
   2524c:	mov	r1, #23
   25250:	b	25270 <__assert_fail@plt+0x133dc>
   25254:	tst	r8, #33792	; 0x8400
   25258:	bne	25278 <__assert_fail@plt+0x133e4>
   2525c:	b	2510c <__assert_fail@plt+0x13278>
   25260:	and	r1, r8, #4608	; 0x1200
   25264:	cmp	r1, #512	; 0x200
   25268:	bne	25278 <__assert_fail@plt+0x133e4>
   2526c:	mov	r1, #24
   25270:	bfi	r0, r1, #0, #8
   25274:	str	r0, [r5]
   25278:	mov	r0, r4
   2527c:	sub	sp, fp, #24
   25280:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25284:	cmp	r3, #2
   25288:	blt	252b8 <__assert_fail@plt+0x13424>
   2528c:	ldr	r3, [r7, #8]
   25290:	ldr	r4, [r3, r2, lsl #2]
   25294:	cmn	r4, #1
   25298:	beq	24b5c <__assert_fail@plt+0x12cc8>
   2529c:	ldr	r4, [r7, #28]
   252a0:	add	r6, r6, #2
   252a4:	cmp	r4, r6
   252a8:	beq	252b8 <__assert_fail@plt+0x13424>
   252ac:	ldr	r3, [r3, r6, lsl #2]
   252b0:	cmn	r3, #1
   252b4:	beq	24b5c <__assert_fail@plt+0x12cc8>
   252b8:	ldrb	r3, [r7, #76]	; 0x4c
   252bc:	mov	r6, r2
   252c0:	ldr	r4, [r7, #24]
   252c4:	ldr	ip, [r7]
   252c8:	cmp	r3, #0
   252cc:	ldrne	r6, [r7, #12]
   252d0:	ldrne	r6, [r6, r2, lsl #2]
   252d4:	cmp	r3, #0
   252d8:	add	r6, r4, r6
   252dc:	add	r6, ip, r6
   252e0:	ldrsb	r6, [r6]
   252e4:	beq	24b64 <__assert_fail@plt+0x12cd0>
   252e8:	cmn	r6, #1
   252ec:	ble	24b5c <__assert_fail@plt+0x12cc8>
   252f0:	b	24b64 <__assert_fail@plt+0x12cd0>
   252f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252f8:	add	fp, sp, #28
   252fc:	sub	sp, sp, #20
   25300:	ldr	r4, [fp, #12]
   25304:	ldr	r7, [fp, #8]
   25308:	ldr	sl, [r1]
   2530c:	mov	r6, r2
   25310:	str	r0, [sp, #12]
   25314:	str	r1, [sp, #8]
   25318:	str	r3, [sp, #16]
   2531c:	str	r4, [sp, #4]
   25320:	str	r7, [sp]
   25324:	bl	25640 <__assert_fail@plt+0x137ac>
   25328:	mov	r3, r4
   2532c:	mov	r4, r0
   25330:	cmp	r0, #0
   25334:	bne	25354 <__assert_fail@plt+0x134c0>
   25338:	ldr	r0, [r3]
   2533c:	cmp	r0, #0
   25340:	beq	25354 <__assert_fail@plt+0x134c0>
   25344:	b	2562c <__assert_fail@plt+0x13798>
   25348:	cmp	r4, #0
   2534c:	mov	r7, r8
   25350:	moveq	r4, r5
   25354:	ldrb	r0, [r6, #4]
   25358:	orr	r1, r0, #8
   2535c:	cmp	r1, #10
   25360:	beq	25630 <__assert_fail@plt+0x1379c>
   25364:	cmp	r7, #0
   25368:	beq	25374 <__assert_fail@plt+0x134e0>
   2536c:	cmp	r0, #9
   25370:	beq	25630 <__assert_fail@plt+0x1379c>
   25374:	str	r3, [sp, #4]
   25378:	mov	r9, r3
   2537c:	ldr	r0, [sp, #12]
   25380:	ldr	r1, [sp, #8]
   25384:	ldr	r3, [sp, #16]
   25388:	mov	r2, r6
   2538c:	mov	r8, r7
   25390:	str	r7, [sp]
   25394:	bl	25640 <__assert_fail@plt+0x137ac>
   25398:	mov	r3, r9
   2539c:	mov	r5, r0
   253a0:	cmp	r0, #0
   253a4:	bne	253b4 <__assert_fail@plt+0x13520>
   253a8:	ldr	r0, [r3]
   253ac:	cmp	r0, #0
   253b0:	bne	25444 <__assert_fail@plt+0x135b0>
   253b4:	cmp	r4, #0
   253b8:	cmpne	r5, #0
   253bc:	beq	25348 <__assert_fail@plt+0x134b4>
   253c0:	ldr	r1, [sl, #64]	; 0x40
   253c4:	cmp	r1, #31
   253c8:	beq	25418 <__assert_fail@plt+0x13584>
   253cc:	ldr	r0, [sl, #56]	; 0x38
   253d0:	add	r2, r1, #1
   253d4:	add	r0, r0, r1, lsl #5
   253d8:	mov	r1, #0
   253dc:	mov	r7, r8
   253e0:	str	r2, [sl, #64]	; 0x40
   253e4:	str	r1, [r0, #4]!
   253e8:	stmib	r0, {r4, r5}
   253ec:	str	r1, [r0, #12]
   253f0:	str	r1, [r0, #16]
   253f4:	str	r1, [r0, #20]
   253f8:	mov	r1, #16
   253fc:	str	r1, [r0, #24]
   25400:	mvn	r1, #0
   25404:	str	r1, [r0, #28]
   25408:	str	r0, [r4]
   2540c:	str	r0, [r5]
   25410:	mov	r4, r0
   25414:	b	25354 <__assert_fail@plt+0x134c0>
   25418:	mov	r0, #996	; 0x3e4
   2541c:	bl	33c98 <__assert_fail@plt+0x21e04>
   25420:	cmp	r0, #0
   25424:	beq	254e8 <__assert_fail@plt+0x13654>
   25428:	ldr	r1, [sl, #56]	; 0x38
   2542c:	mov	r3, r9
   25430:	str	r1, [r0]
   25434:	mov	r1, #0
   25438:	str	r1, [sl, #64]	; 0x40
   2543c:	str	r0, [sl, #56]	; 0x38
   25440:	b	253d0 <__assert_fail@plt+0x1353c>
   25444:	cmp	r4, #0
   25448:	beq	2562c <__assert_fail@plt+0x13798>
   2544c:	movw	r5, #255	; 0xff
   25450:	movt	r5, #4
   25454:	mov	r6, r4
   25458:	ldr	r4, [r4, #4]
   2545c:	cmp	r4, #0
   25460:	bne	25454 <__assert_fail@plt+0x135c0>
   25464:	ldr	r4, [r6, #8]
   25468:	cmp	r4, #0
   2546c:	bne	25454 <__assert_fail@plt+0x135c0>
   25470:	ldr	r0, [r6, #24]
   25474:	and	r0, r0, r5
   25478:	cmp	r0, #3
   2547c:	beq	254b4 <__assert_fail@plt+0x13620>
   25480:	cmp	r0, #6
   25484:	bne	254bc <__assert_fail@plt+0x13628>
   25488:	ldr	r4, [r6, #20]
   2548c:	ldr	r0, [r4]
   25490:	bl	17754 <__assert_fail@plt+0x58c0>
   25494:	ldr	r0, [r4, #4]
   25498:	bl	17754 <__assert_fail@plt+0x58c0>
   2549c:	ldr	r0, [r4, #8]
   254a0:	bl	17754 <__assert_fail@plt+0x58c0>
   254a4:	ldr	r0, [r4, #12]
   254a8:	bl	17754 <__assert_fail@plt+0x58c0>
   254ac:	mov	r0, r4
   254b0:	b	254b8 <__assert_fail@plt+0x13624>
   254b4:	ldr	r0, [r6, #20]
   254b8:	bl	17754 <__assert_fail@plt+0x58c0>
   254bc:	ldr	r0, [r6]
   254c0:	cmp	r0, #0
   254c4:	beq	2562c <__assert_fail@plt+0x13798>
   254c8:	ldr	r4, [r0, #8]
   254cc:	cmp	r4, r6
   254d0:	mov	r6, r0
   254d4:	beq	25470 <__assert_fail@plt+0x135dc>
   254d8:	cmp	r4, #0
   254dc:	mov	r6, r0
   254e0:	beq	25470 <__assert_fail@plt+0x135dc>
   254e4:	b	25454 <__assert_fail@plt+0x135c0>
   254e8:	movw	r6, #255	; 0xff
   254ec:	mov	r1, r9
   254f0:	movt	r6, #4
   254f4:	mov	r7, r5
   254f8:	ldr	r5, [r5, #4]
   254fc:	cmp	r5, #0
   25500:	bne	254f4 <__assert_fail@plt+0x13660>
   25504:	ldr	r5, [r7, #8]
   25508:	cmp	r5, #0
   2550c:	bne	254f4 <__assert_fail@plt+0x13660>
   25510:	ldr	r0, [r7, #24]
   25514:	and	r0, r0, r6
   25518:	cmp	r0, #3
   2551c:	beq	25554 <__assert_fail@plt+0x136c0>
   25520:	cmp	r0, #6
   25524:	bne	25560 <__assert_fail@plt+0x136cc>
   25528:	ldr	r5, [r7, #20]
   2552c:	ldr	r0, [r5]
   25530:	bl	17754 <__assert_fail@plt+0x58c0>
   25534:	ldr	r0, [r5, #4]
   25538:	bl	17754 <__assert_fail@plt+0x58c0>
   2553c:	ldr	r0, [r5, #8]
   25540:	bl	17754 <__assert_fail@plt+0x58c0>
   25544:	ldr	r0, [r5, #12]
   25548:	bl	17754 <__assert_fail@plt+0x58c0>
   2554c:	mov	r0, r5
   25550:	b	25558 <__assert_fail@plt+0x136c4>
   25554:	ldr	r0, [r7, #20]
   25558:	bl	17754 <__assert_fail@plt+0x58c0>
   2555c:	mov	r1, r9
   25560:	ldr	r0, [r7]
   25564:	cmp	r0, #0
   25568:	beq	2558c <__assert_fail@plt+0x136f8>
   2556c:	ldr	r5, [r0, #8]
   25570:	cmp	r5, r7
   25574:	mov	r7, r0
   25578:	beq	25510 <__assert_fail@plt+0x1367c>
   2557c:	cmp	r5, #0
   25580:	mov	r7, r0
   25584:	beq	25510 <__assert_fail@plt+0x1367c>
   25588:	b	254f4 <__assert_fail@plt+0x13660>
   2558c:	mov	r5, r4
   25590:	ldr	r4, [r4, #4]
   25594:	cmp	r4, #0
   25598:	bne	2558c <__assert_fail@plt+0x136f8>
   2559c:	ldr	r4, [r5, #8]
   255a0:	cmp	r4, #0
   255a4:	bne	2558c <__assert_fail@plt+0x136f8>
   255a8:	ldr	r0, [r5, #24]
   255ac:	and	r0, r0, r6
   255b0:	cmp	r0, #3
   255b4:	beq	255ec <__assert_fail@plt+0x13758>
   255b8:	cmp	r0, #6
   255bc:	bne	255f8 <__assert_fail@plt+0x13764>
   255c0:	ldr	r4, [r5, #20]
   255c4:	ldr	r0, [r4]
   255c8:	bl	17754 <__assert_fail@plt+0x58c0>
   255cc:	ldr	r0, [r4, #4]
   255d0:	bl	17754 <__assert_fail@plt+0x58c0>
   255d4:	ldr	r0, [r4, #8]
   255d8:	bl	17754 <__assert_fail@plt+0x58c0>
   255dc:	ldr	r0, [r4, #12]
   255e0:	bl	17754 <__assert_fail@plt+0x58c0>
   255e4:	mov	r0, r4
   255e8:	b	255f0 <__assert_fail@plt+0x1375c>
   255ec:	ldr	r0, [r5, #20]
   255f0:	bl	17754 <__assert_fail@plt+0x58c0>
   255f4:	mov	r1, r9
   255f8:	ldr	r0, [r5]
   255fc:	cmp	r0, #0
   25600:	beq	25624 <__assert_fail@plt+0x13790>
   25604:	ldr	r4, [r0, #8]
   25608:	cmp	r4, r5
   2560c:	mov	r5, r0
   25610:	beq	255a8 <__assert_fail@plt+0x13714>
   25614:	cmp	r4, #0
   25618:	mov	r5, r0
   2561c:	beq	255a8 <__assert_fail@plt+0x13714>
   25620:	b	2558c <__assert_fail@plt+0x136f8>
   25624:	mov	r0, #12
   25628:	str	r0, [r1]
   2562c:	mov	r4, #0
   25630:	mov	r0, r4
   25634:	sub	sp, fp, #28
   25638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2563c:	nop	{0}
   25640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25644:	add	fp, sp, #28
   25648:	sub	sp, sp, #148	; 0x94
   2564c:	str	r0, [sp, #24]
   25650:	ldr	r0, [r2, #4]
   25654:	mov	r7, r1
   25658:	mov	lr, r2
   2565c:	mvn	r1, #0
   25660:	mov	r6, r3
   25664:	mov	sl, #0
   25668:	ldr	r2, [fp, #12]
   2566c:	ldr	r8, [r7]
   25670:	uxtab	r1, r1, r0
   25674:	cmp	r1, #35	; 0x23
   25678:	str	r2, [sp, #16]
   2567c:	str	lr, [sp, #44]	; 0x2c
   25680:	bhi	257ac <__assert_fail@plt+0x13918>
   25684:	add	r2, pc, #0
   25688:	ldr	pc, [r2, r1, lsl #2]
   2568c:	andeq	r5, r2, r8, ror #20
   25690:	andeq	r7, r2, r8, lsr r4
   25694:	andeq	r5, r2, ip, lsr #15
   25698:	andeq	r5, r2, r0, lsr r8
   2569c:			; <UNDEFINED> instruction: 0x000258b0
   256a0:	andeq	r5, r2, ip, lsr #15
   256a4:	andeq	r5, r2, ip, lsr #15
   256a8:	andeq	r5, r2, r8, lsl r9
   256ac:			; <UNDEFINED> instruction: 0x000257bc
   256b0:	andeq	r7, r2, r8, lsr r4
   256b4:	andeq	r5, r2, ip, lsr #15
   256b8:	andeq	r5, r2, r0, lsr #19
   256bc:	andeq	r5, r2, ip, lsr #15
   256c0:	andeq	r5, r2, ip, lsr #15
   256c4:	andeq	r5, r2, ip, lsr #15
   256c8:	andeq	r5, r2, ip, lsr #15
   256cc:	andeq	r5, r2, ip, lsr #15
   256d0:	andeq	r5, r2, ip, lsr #15
   256d4:	andeq	r5, r2, ip, lsr #15
   256d8:	andeq	r5, r2, r8, lsr ip
   256dc:	andeq	r5, r2, ip, lsr #15
   256e0:	andeq	r5, r2, ip, lsr #15
   256e4:	andeq	r5, r2, r4, lsr #15
   256e8:	andeq	r5, r2, ip, asr #15
   256ec:	andeq	r5, r2, ip, lsr #15
   256f0:	andeq	r5, r2, ip, lsr #15
   256f4:	andeq	r5, r2, ip, lsr #15
   256f8:	andeq	r5, r2, ip, lsr #15
   256fc:	andeq	r5, r2, ip, lsr #15
   25700:	andeq	r5, r2, ip, lsr #15
   25704:	andeq	r5, r2, ip, lsr #15
   25708:	andeq	r5, r2, ip, lsl r7
   2570c:	andeq	r5, r2, ip, lsl r7
   25710:	andeq	r5, r2, r0, asr #14
   25714:	andeq	r5, r2, r0, asr #14
   25718:	andeq	r5, r2, r0, lsr ip
   2571c:	ldr	r1, [sp, #24]
   25720:	mvn	r2, #32
   25724:	movw	r3, #26457	; 0x6759
   25728:	uxtab	r0, r2, r0
   2572c:	movw	r2, #29334	; 0x7296
   25730:	movt	r3, #3
   25734:	clz	r0, r0
   25738:	movt	r2, #3
   2573c:	b	25760 <__assert_fail@plt+0x138cc>
   25740:	ldr	r1, [sp, #24]
   25744:	mvn	r2, #34	; 0x22
   25748:	movw	r3, #24652	; 0x604c
   2574c:	uxtab	r0, r2, r0
   25750:	movw	r2, #29340	; 0x729c
   25754:	movt	r3, #3
   25758:	clz	r0, r0
   2575c:	movt	r2, #3
   25760:	lsr	r0, r0, #5
   25764:	ldr	r1, [r1, #64]	; 0x40
   25768:	str	r0, [sp]
   2576c:	ldr	r4, [sp, #16]
   25770:	str	r4, [sp, #4]
   25774:	mov	r0, r8
   25778:	bl	27a7c <__assert_fail@plt+0x15be8>
   2577c:	mov	r7, r0
   25780:	cmp	r0, #0
   25784:	bne	2579c <__assert_fail@plt+0x13908>
   25788:	ldr	r0, [r4]
   2578c:	cmp	r0, #0
   25790:	ldr	lr, [sp, #44]	; 0x2c
   25794:	beq	266d4 <__assert_fail@plt+0x14840>
   25798:	b	27438 <__assert_fail@plt+0x155a4>
   2579c:	ldr	lr, [sp, #44]	; 0x2c
   257a0:	b	266d4 <__assert_fail@plt+0x14840>
   257a4:	tst	r6, #16777216	; 0x1000000
   257a8:	bne	25828 <__assert_fail@plt+0x13994>
   257ac:	tst	r6, #32
   257b0:	bne	25828 <__assert_fail@plt+0x13994>
   257b4:	tst	r6, #16
   257b8:	bne	25cb4 <__assert_fail@plt+0x13e20>
   257bc:	tst	r6, #131072	; 0x20000
   257c0:	uxtbeq	r1, r0
   257c4:	cmpeq	r1, #9
   257c8:	beq	25cfc <__assert_fail@plt+0x13e68>
   257cc:	mov	r1, #1
   257d0:	bfi	r0, r1, #0, #8
   257d4:	str	r0, [lr, #4]
   257d8:	ldr	r1, [r8, #64]	; 0x40
   257dc:	cmp	r1, #31
   257e0:	beq	27590 <__assert_fail@plt+0x156fc>
   257e4:	ldr	r0, [r8, #56]	; 0x38
   257e8:	add	r2, r1, #1
   257ec:	add	r7, r0, r1, lsl #5
   257f0:	mov	r0, #0
   257f4:	str	r2, [r8, #64]	; 0x40
   257f8:	str	r0, [r7, #4]!
   257fc:	str	r0, [r7, #4]
   25800:	str	r0, [r7, #8]
   25804:	ldm	lr, {r1, r2}
   25808:	str	r0, [r7, #12]
   2580c:	str	r0, [r7, #16]
   25810:	mvn	r0, #0
   25814:	str	r0, [r7, #28]
   25818:	bic	r0, r2, #786432	; 0xc0000
   2581c:	str	r1, [r7, #20]
   25820:	str	r0, [r7, #24]
   25824:	b	266d4 <__assert_fail@plt+0x14840>
   25828:	mov	r0, #13
   2582c:	b	265d8 <__assert_fail@plt+0x14744>
   25830:	ldr	r0, [lr]
   25834:	ldr	r2, [r8, #84]	; 0x54
   25838:	mov	r1, #1
   2583c:	tst	r2, r1, lsl r0
   25840:	beq	275d4 <__assert_fail@plt+0x15740>
   25844:	lsl	r0, r1, r0
   25848:	ldr	r1, [r8, #64]	; 0x40
   2584c:	ldr	r2, [r8, #80]	; 0x50
   25850:	orr	r0, r2, r0
   25854:	cmp	r1, #31
   25858:	str	r0, [r8, #80]	; 0x50
   2585c:	beq	2764c <__assert_fail@plt+0x157b8>
   25860:	ldr	r0, [r8, #56]	; 0x38
   25864:	add	r2, r1, #1
   25868:	add	r7, r0, r1, lsl #5
   2586c:	mov	r0, #0
   25870:	str	r2, [r8, #64]	; 0x40
   25874:	str	r0, [r7, #4]!
   25878:	str	r0, [r7, #4]
   2587c:	str	r0, [r7, #8]
   25880:	ldm	lr, {r1, r2}
   25884:	str	r0, [r7, #12]
   25888:	str	r0, [r7, #16]
   2588c:	mvn	r0, #0
   25890:	str	r0, [r7, #28]
   25894:	bic	r0, r2, #786432	; 0xc0000
   25898:	str	r1, [r7, #20]
   2589c:	str	r0, [r7, #24]
   258a0:	ldr	r0, [r8, #76]	; 0x4c
   258a4:	add	r0, r0, #1
   258a8:	str	r0, [r8, #76]	; 0x4c
   258ac:	b	25908 <__assert_fail@plt+0x13a74>
   258b0:	ldr	r1, [r8, #64]	; 0x40
   258b4:	cmp	r1, #31
   258b8:	beq	275dc <__assert_fail@plt+0x15748>
   258bc:	ldr	r0, [r8, #56]	; 0x38
   258c0:	add	r2, r1, #1
   258c4:	add	r7, r0, r1, lsl #5
   258c8:	mov	r0, #0
   258cc:	str	r2, [r8, #64]	; 0x40
   258d0:	str	r0, [r7, #4]!
   258d4:	str	r0, [r7, #4]
   258d8:	str	r0, [r7, #8]
   258dc:	ldm	lr, {r1, r2}
   258e0:	str	r0, [r7, #12]
   258e4:	str	r0, [r7, #16]
   258e8:	mvn	r0, #0
   258ec:	str	r0, [r7, #28]
   258f0:	bic	r0, r2, #786432	; 0xc0000
   258f4:	str	r1, [r7, #20]
   258f8:	str	r0, [r7, #24]
   258fc:	ldr	r0, [r8, #92]	; 0x5c
   25900:	cmp	r0, #2
   25904:	blt	266d4 <__assert_fail@plt+0x14840>
   25908:	ldrb	r0, [r8, #88]	; 0x58
   2590c:	orr	r0, r0, #2
   25910:	strb	r0, [r8, #88]	; 0x58
   25914:	b	266d4 <__assert_fail@plt+0x14840>
   25918:	ldr	r4, [r7, #24]
   2591c:	mov	sl, r6
   25920:	orr	r2, r6, #8388608	; 0x800000
   25924:	ldr	r6, [sp, #24]
   25928:	ldr	r5, [fp, #8]
   2592c:	add	r0, r4, #1
   25930:	mov	r1, r6
   25934:	str	r0, [r7, #24]
   25938:	mov	r0, lr
   2593c:	bl	24abc <__assert_fail@plt+0x12c28>
   25940:	ldr	r1, [r6, #40]	; 0x28
   25944:	ldr	lr, [sp, #44]	; 0x2c
   25948:	mov	r9, #0
   2594c:	add	r0, r1, r0
   25950:	str	r0, [r6, #40]	; 0x28
   25954:	ldrb	r0, [lr, #4]
   25958:	cmp	r0, #9
   2595c:	beq	26668 <__assert_fail@plt+0x147d4>
   25960:	add	r0, r5, #1
   25964:	mov	r1, r7
   25968:	mov	r2, lr
   2596c:	mov	r3, sl
   25970:	mov	r6, lr
   25974:	str	r0, [sp]
   25978:	ldr	r5, [sp, #16]
   2597c:	str	r5, [sp, #4]
   25980:	ldr	r0, [sp, #24]
   25984:	bl	2484c <__assert_fail@plt+0x129b8>
   25988:	mov	r9, r0
   2598c:	ldr	r0, [r5]
   25990:	cmp	r0, #0
   25994:	beq	26658 <__assert_fail@plt+0x147c4>
   25998:	mov	sl, #0
   2599c:	b	27438 <__assert_fail@plt+0x155a4>
   259a0:	ldr	r0, [lr]
   259a4:	ldr	r7, [sp, #24]
   259a8:	movw	r1, #783	; 0x30f
   259ac:	tst	r0, r1
   259b0:	beq	259f8 <__assert_fail@plt+0x13b64>
   259b4:	ldrb	r0, [r8, #88]	; 0x58
   259b8:	tst	r0, #16
   259bc:	bne	259f4 <__assert_fail@plt+0x13b60>
   259c0:	orr	r1, r0, #16
   259c4:	tst	r0, #8
   259c8:	strb	r1, [r8, #88]	; 0x58
   259cc:	bne	278a8 <__assert_fail@plt+0x15a14>
   259d0:	add	r1, pc, #824	; 0x338
   259d4:	tst	r0, #4
   259d8:	vld1.64	{d16-d17}, [r1 :128]
   259dc:	add	r1, r8, #96	; 0x60
   259e0:	vst1.32	{d16-d17}, [r1]
   259e4:	beq	278b4 <__assert_fail@plt+0x15a20>
   259e8:	vmov.i32	q8, #0	; 0x00000000
   259ec:	add	r0, r8, #112	; 0x70
   259f0:	vst1.32	{d16-d17}, [r0]
   259f4:	ldr	r0, [lr]
   259f8:	cmp	r0, #512	; 0x200
   259fc:	beq	264cc <__assert_fail@plt+0x14638>
   25a00:	cmp	r0, #256	; 0x100
   25a04:	bne	265e4 <__assert_fail@plt+0x14750>
   25a08:	mov	r0, #6
   25a0c:	mov	r4, r8
   25a10:	str	r0, [lr]
   25a14:	ldr	r1, [r4, #64]!	; 0x40
   25a18:	cmp	r1, #31
   25a1c:	beq	277fc <__assert_fail@plt+0x15968>
   25a20:	ldr	r0, [r8, #56]	; 0x38
   25a24:	add	r2, r1, #1
   25a28:	add	r5, r0, r1, lsl #5
   25a2c:	mov	r0, #0
   25a30:	str	r2, [r4]
   25a34:	str	r0, [r5, #4]!
   25a38:	str	r0, [r5, #4]
   25a3c:	str	r0, [r5, #8]
   25a40:	ldm	lr, {r1, r2}
   25a44:	str	r0, [r5, #12]
   25a48:	str	r0, [r5, #16]
   25a4c:	mvn	r0, #0
   25a50:	str	r0, [r5, #28]
   25a54:	bic	r0, r2, #786432	; 0xc0000
   25a58:	str	r1, [r5, #20]
   25a5c:	str	r0, [r5, #24]
   25a60:	mov	r0, #9
   25a64:	b	26528 <__assert_fail@plt+0x14694>
   25a68:	ldr	r1, [r8, #64]	; 0x40
   25a6c:	cmp	r1, #31
   25a70:	beq	27608 <__assert_fail@plt+0x15774>
   25a74:	ldr	r0, [r8, #56]	; 0x38
   25a78:	ldr	r3, [sp, #24]
   25a7c:	add	r2, r1, #1
   25a80:	add	r4, r0, r1, lsl #5
   25a84:	mov	r0, #0
   25a88:	str	r2, [r8, #64]	; 0x40
   25a8c:	str	r0, [r4, #4]!
   25a90:	str	r0, [r4, #4]
   25a94:	str	r0, [r4, #8]
   25a98:	ldm	lr, {r1, r2}
   25a9c:	str	r0, [r4, #12]
   25aa0:	str	r0, [r4, #16]
   25aa4:	mvn	r0, #0
   25aa8:	str	r0, [r4, #28]
   25aac:	bic	r0, r2, #786432	; 0xc0000
   25ab0:	str	r1, [r4, #20]
   25ab4:	str	r0, [r4, #24]
   25ab8:	ldr	r0, [r8, #92]	; 0x5c
   25abc:	cmp	r0, #2
   25ac0:	blt	25cf4 <__assert_fail@plt+0x13e60>
   25ac4:	ldr	r0, [r3, #40]	; 0x28
   25ac8:	ldr	r1, [r3, #56]	; 0x38
   25acc:	cmp	r1, r0
   25ad0:	ble	25cf4 <__assert_fail@plt+0x13e60>
   25ad4:	mov	r5, #0
   25ad8:	mvn	sl, #0
   25adc:	mov	r9, r6
   25ae0:	ldr	r6, [sp, #24]
   25ae4:	ldr	r1, [r6, #28]
   25ae8:	cmp	r0, r1
   25aec:	beq	27444 <__assert_fail@plt+0x155b0>
   25af0:	ldr	r1, [r6, #8]
   25af4:	ldr	r0, [r1, r0, lsl #2]
   25af8:	cmn	r0, #1
   25afc:	bne	27444 <__assert_fail@plt+0x155b0>
   25b00:	mov	r0, lr
   25b04:	mov	r1, r6
   25b08:	mov	r2, r9
   25b0c:	bl	24abc <__assert_fail@plt+0x12c28>
   25b10:	ldr	r1, [r6, #40]	; 0x28
   25b14:	add	r0, r1, r0
   25b18:	str	r0, [r6, #40]	; 0x28
   25b1c:	ldr	r1, [r8, #64]	; 0x40
   25b20:	cmp	r1, #31
   25b24:	beq	25bd0 <__assert_fail@plt+0x13d3c>
   25b28:	ldr	r0, [r8, #56]	; 0x38
   25b2c:	ldr	lr, [sp, #44]	; 0x2c
   25b30:	add	r2, r1, #1
   25b34:	add	r6, r0, r1, lsl #5
   25b38:	str	r2, [r8, #64]	; 0x40
   25b3c:	str	r5, [r6, #4]!
   25b40:	str	r5, [r6, #4]
   25b44:	str	r5, [r6, #8]
   25b48:	ldm	lr, {r0, r1}
   25b4c:	str	r5, [r6, #12]
   25b50:	str	r5, [r6, #16]
   25b54:	str	sl, [r6, #28]
   25b58:	str	r0, [r6, #20]
   25b5c:	bic	r0, r1, #786432	; 0xc0000
   25b60:	str	r0, [r6, #24]
   25b64:	ldr	r1, [r8, #64]	; 0x40
   25b68:	cmp	r1, #31
   25b6c:	beq	25bf8 <__assert_fail@plt+0x13d64>
   25b70:	ldr	r0, [r8, #56]	; 0x38
   25b74:	add	r2, r1, #1
   25b78:	add	r7, r0, r1, lsl #5
   25b7c:	mov	r0, #16
   25b80:	cmp	r6, #0
   25b84:	str	r2, [r8, #64]	; 0x40
   25b88:	str	r5, [r7, #4]!
   25b8c:	stmib	r7, {r4, r6}
   25b90:	str	r5, [r7, #12]
   25b94:	str	r5, [r7, #16]
   25b98:	str	r5, [r7, #20]
   25b9c:	str	r0, [r7, #24]
   25ba0:	str	sl, [r7, #28]
   25ba4:	str	r7, [r4]
   25ba8:	beq	27894 <__assert_fail@plt+0x15a00>
   25bac:	ldr	r1, [sp, #24]
   25bb0:	str	r7, [r6]
   25bb4:	mov	r4, r7
   25bb8:	mov	r6, r9
   25bbc:	ldr	r0, [r1, #40]	; 0x28
   25bc0:	ldr	r1, [r1, #56]	; 0x38
   25bc4:	cmp	r1, r0
   25bc8:	bgt	25adc <__assert_fail@plt+0x13c48>
   25bcc:	b	266d4 <__assert_fail@plt+0x14840>
   25bd0:	mov	r0, #996	; 0x3e4
   25bd4:	bl	33c98 <__assert_fail@plt+0x21e04>
   25bd8:	cmp	r0, #0
   25bdc:	beq	25c24 <__assert_fail@plt+0x13d90>
   25be0:	ldr	r1, [r8, #56]	; 0x38
   25be4:	str	r1, [r0]
   25be8:	mov	r1, #0
   25bec:	str	r1, [r8, #64]	; 0x40
   25bf0:	str	r0, [r8, #56]	; 0x38
   25bf4:	b	25b2c <__assert_fail@plt+0x13c98>
   25bf8:	mov	r0, #996	; 0x3e4
   25bfc:	bl	33c98 <__assert_fail@plt+0x21e04>
   25c00:	ldr	lr, [sp, #44]	; 0x2c
   25c04:	cmp	r0, #0
   25c08:	beq	27894 <__assert_fail@plt+0x15a00>
   25c0c:	ldr	r1, [r8, #56]	; 0x38
   25c10:	str	r1, [r0]
   25c14:	mov	r1, #0
   25c18:	str	r1, [r8, #64]	; 0x40
   25c1c:	str	r0, [r8, #56]	; 0x38
   25c20:	b	25b74 <__assert_fail@plt+0x13ce0>
   25c24:	ldr	lr, [sp, #44]	; 0x2c
   25c28:	mov	r6, #0
   25c2c:	b	25b64 <__assert_fail@plt+0x13cd0>
   25c30:	mov	r0, #5
   25c34:	b	265d8 <__assert_fail@plt+0x14744>
   25c38:	mov	sl, #0
   25c3c:	mov	r0, #32
   25c40:	mov	r1, #1
   25c44:	str	sl, [fp, #-32]	; 0xffffffe0
   25c48:	bl	33c44 <__assert_fail@plt+0x21db0>
   25c4c:	mov	r4, r0
   25c50:	mov	r0, #40	; 0x28
   25c54:	mov	r1, #1
   25c58:	bl	33c44 <__assert_fail@plt+0x21db0>
   25c5c:	mov	r5, r0
   25c60:	cmp	r4, #0
   25c64:	cmpne	r5, #0
   25c68:	beq	27638 <__assert_fail@plt+0x157a4>
   25c6c:	str	r5, [sp, #48]	; 0x30
   25c70:	mov	r2, r6
   25c74:	ldr	r5, [sp, #44]	; 0x2c
   25c78:	ldr	r7, [sp, #24]
   25c7c:	mov	r0, r5
   25c80:	mov	r1, r7
   25c84:	bl	27e38 <__assert_fail@plt+0x15fa4>
   25c88:	mov	r3, r0
   25c8c:	ldr	r0, [r5, #4]
   25c90:	mov	r2, r5
   25c94:	uxtb	r1, r0
   25c98:	cmp	r1, #25
   25c9c:	beq	25d20 <__assert_fail@plt+0x13e8c>
   25ca0:	ldr	sl, [sp, #48]	; 0x30
   25ca4:	cmp	r1, #2
   25ca8:	beq	275cc <__assert_fail@plt+0x15738>
   25cac:	mov	r1, #0
   25cb0:	b	25d78 <__assert_fail@plt+0x13ee4>
   25cb4:	ldr	r4, [sp, #24]
   25cb8:	mov	r0, lr
   25cbc:	mov	r2, r6
   25cc0:	mov	r5, lr
   25cc4:	mov	r1, r4
   25cc8:	bl	24abc <__assert_fail@plt+0x12c28>
   25ccc:	ldr	r1, [r4, #40]	; 0x28
   25cd0:	mov	r2, r5
   25cd4:	mov	r3, r6
   25cd8:	add	r0, r1, r0
   25cdc:	mov	r1, r7
   25ce0:	str	r0, [r4, #40]	; 0x28
   25ce4:	mov	r0, r4
   25ce8:	sub	sp, fp, #28
   25cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25cf0:	b	25640 <__assert_fail@plt+0x137ac>
   25cf4:	mov	r7, r4
   25cf8:	b	266d4 <__assert_fail@plt+0x14840>
   25cfc:	mov	r0, #16
   25d00:	b	265d8 <__assert_fail@plt+0x14744>
   25d04:	nop	{0}
   25d08:	nop	{0}
   25d0c:	nop	{0}
   25d10:	andeq	r0, r0, r0
   25d14:	mvnseq	r0, #0
   25d18:			; <UNDEFINED> instruction: 0x87fffffe
   25d1c:			; <UNDEFINED> instruction: 0x07fffffe
   25d20:	ldr	sl, [sp, #48]	; 0x30
   25d24:	tst	r6, #256	; 0x100
   25d28:	mov	r1, r7
   25d2c:	ldrb	r0, [sl, #16]
   25d30:	orr	r0, r0, #1
   25d34:	strb	r0, [sl, #16]
   25d38:	ldrne	r0, [r4]
   25d3c:	orrne	r0, r0, #1024	; 0x400
   25d40:	strne	r0, [r4]
   25d44:	ldr	r0, [r7, #40]	; 0x28
   25d48:	add	r0, r0, r3
   25d4c:	str	r0, [r7, #40]	; 0x28
   25d50:	mov	r0, r2
   25d54:	mov	r2, r6
   25d58:	bl	27e38 <__assert_fail@plt+0x15fa4>
   25d5c:	ldr	r2, [sp, #44]	; 0x2c
   25d60:	mov	r3, r0
   25d64:	ldr	r0, [r2, #4]
   25d68:	uxtb	r1, r0
   25d6c:	cmp	r1, #2
   25d70:	beq	275cc <__assert_fail@plt+0x15738>
   25d74:	mov	r1, #1
   25d78:	str	r1, [sp, #36]	; 0x24
   25d7c:	uxtb	r1, r0
   25d80:	str	r4, [sp, #52]	; 0x34
   25d84:	str	r6, [sp, #40]	; 0x28
   25d88:	cmp	r1, #21
   25d8c:	ldr	r5, [sp, #40]	; 0x28
   25d90:	moveq	r1, #1
   25d94:	bfieq	r0, r1, #0, #8
   25d98:	mov	r1, r7
   25d9c:	streq	r0, [r2, #4]
   25da0:	mov	r0, #3
   25da4:	str	r0, [fp, #-40]	; 0xffffffd8
   25da8:	sub	r0, fp, #80	; 0x50
   25dac:	str	r0, [fp, #-36]	; 0xffffffdc
   25db0:	mov	r0, #1
   25db4:	str	r5, [sp]
   25db8:	str	r0, [sp, #4]
   25dbc:	sub	r0, fp, #40	; 0x28
   25dc0:	bl	27fb0 <__assert_fail@plt+0x1611c>
   25dc4:	cmp	r0, #0
   25dc8:	bne	275bc <__assert_fail@plt+0x15728>
   25dcc:	and	r0, r5, #65536	; 0x10000
   25dd0:	str	r0, [sp, #32]
   25dd4:	mov	r0, #0
   25dd8:	str	r0, [sp, #28]
   25ddc:	mov	r0, #0
   25de0:	str	r0, [sp, #20]
   25de4:	ldr	r6, [sp, #24]
   25de8:	ldr	r7, [sp, #44]	; 0x2c
   25dec:	mov	r0, r7
   25df0:	mov	r1, r6
   25df4:	mov	r2, r5
   25df8:	bl	27e38 <__assert_fail@plt+0x15fa4>
   25dfc:	ldr	r5, [fp, #-40]	; 0xffffffd8
   25e00:	ldr	r4, [sp, #52]	; 0x34
   25e04:	mov	r9, r0
   25e08:	cmp	r5, #2
   25e0c:	beq	25fd8 <__assert_fail@plt+0x14144>
   25e10:	cmp	r5, #4
   25e14:	bne	25e54 <__assert_fail@plt+0x13fc0>
   25e18:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25e1c:	ldr	r0, [r6, #64]	; 0x40
   25e20:	mov	r2, sl
   25e24:	sub	r3, fp, #32
   25e28:	str	r1, [sp]
   25e2c:	ldr	r1, [sp, #40]	; 0x28
   25e30:	str	r1, [sp, #4]
   25e34:	mov	r1, r4
   25e38:	bl	28274 <__assert_fail@plt+0x163e0>
   25e3c:	ldr	r1, [sp, #16]
   25e40:	ldr	lr, [sp, #44]	; 0x2c
   25e44:	cmp	r0, #0
   25e48:	str	r0, [r1]
   25e4c:	beq	26018 <__assert_fail@plt+0x14184>
   25e50:	b	2768c <__assert_fail@plt+0x157f8>
   25e54:	ldr	lr, [sp, #44]	; 0x2c
   25e58:	mov	r7, r9
   25e5c:	mov	r9, #7
   25e60:	ldrb	r0, [lr, #4]
   25e64:	cmp	r0, #22
   25e68:	beq	25e78 <__assert_fail@plt+0x13fe4>
   25e6c:	cmp	r0, #2
   25e70:	bne	25f90 <__assert_fail@plt+0x140fc>
   25e74:	b	2767c <__assert_fail@plt+0x157e8>
   25e78:	ldr	r4, [sp, #24]
   25e7c:	ldr	r2, [sp, #40]	; 0x28
   25e80:	mov	r6, r7
   25e84:	ldr	r0, [r4, #40]	; 0x28
   25e88:	mov	r1, r4
   25e8c:	add	r0, r0, r7
   25e90:	str	r0, [r4, #40]	; 0x28
   25e94:	add	r0, sp, #56	; 0x38
   25e98:	bl	27e38 <__assert_fail@plt+0x15fa4>
   25e9c:	mov	r3, r0
   25ea0:	ldrb	r0, [sp, #60]	; 0x3c
   25ea4:	cmp	r0, #21
   25ea8:	beq	25f78 <__assert_fail@plt+0x140e4>
   25eac:	cmp	r0, #2
   25eb0:	beq	2767c <__assert_fail@plt+0x157e8>
   25eb4:	ldr	r7, [sp, #40]	; 0x28
   25eb8:	mov	r0, #3
   25ebc:	add	r2, sp, #56	; 0x38
   25ec0:	str	r0, [fp, #-48]	; 0xffffffd0
   25ec4:	add	r0, sp, #64	; 0x40
   25ec8:	str	r0, [fp, #-44]	; 0xffffffd4
   25ecc:	mov	r0, #1
   25ed0:	str	r0, [sp, #4]
   25ed4:	sub	r0, fp, #48	; 0x30
   25ed8:	str	r7, [sp]
   25edc:	ldr	r4, [sp, #24]
   25ee0:	mov	r1, r4
   25ee4:	bl	27fb0 <__assert_fail@plt+0x1611c>
   25ee8:	cmp	r0, #0
   25eec:	bne	275bc <__assert_fail@plt+0x15728>
   25ef0:	ldr	r0, [sp, #44]	; 0x2c
   25ef4:	mov	r1, r4
   25ef8:	mov	r2, r7
   25efc:	bl	27e38 <__assert_fail@plt+0x15fa4>
   25f00:	ldr	r4, [fp, #-48]	; 0xffffffd0
   25f04:	mov	r9, #11
   25f08:	str	r0, [sp, #12]
   25f0c:	cmp	r4, #2
   25f10:	cmpne	r4, #4
   25f14:	beq	2767c <__assert_fail@plt+0x157e8>
   25f18:	cmp	r5, #3
   25f1c:	bne	25f30 <__assert_fail@plt+0x1409c>
   25f20:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25f24:	bl	11c78 <strlen@plt>
   25f28:	cmp	r0, #1
   25f2c:	bhi	27678 <__assert_fail@plt+0x157e4>
   25f30:	cmp	r4, #3
   25f34:	bne	25f48 <__assert_fail@plt+0x140b4>
   25f38:	ldr	r0, [fp, #-44]	; 0xffffffd4
   25f3c:	bl	11c78 <strlen@plt>
   25f40:	cmp	r0, #1
   25f44:	bhi	27678 <__assert_fail@plt+0x157e4>
   25f48:	ldr	lr, [sp, #44]	; 0x2c
   25f4c:	cmp	r5, #3
   25f50:	beq	260cc <__assert_fail@plt+0x14238>
   25f54:	mov	r7, #0
   25f58:	cmp	r5, #0
   25f5c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   25f60:	cmp	r4, #3
   25f64:	beq	260dc <__assert_fail@plt+0x14248>
   25f68:	mov	sl, #0
   25f6c:	cmp	r4, #0
   25f70:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   25f74:	b	260e4 <__assert_fail@plt+0x14250>
   25f78:	ldr	r0, [r4, #40]	; 0x28
   25f7c:	ldr	lr, [sp, #44]	; 0x2c
   25f80:	sub	r0, r0, r6
   25f84:	str	r0, [r4, #40]	; 0x28
   25f88:	mov	r0, #1
   25f8c:	strb	r0, [lr, #4]
   25f90:	cmp	r5, #1
   25f94:	beq	26070 <__assert_fail@plt+0x141dc>
   25f98:	ldr	r6, [sp, #24]
   25f9c:	ldr	r4, [sp, #52]	; 0x34
   25fa0:	ldr	sl, [sp, #48]	; 0x30
   25fa4:	cmp	r5, #2
   25fa8:	mov	r9, r7
   25fac:	beq	25fd8 <__assert_fail@plt+0x14144>
   25fb0:	cmp	r5, #3
   25fb4:	bne	260a8 <__assert_fail@plt+0x14214>
   25fb8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   25fbc:	mov	r0, r7
   25fc0:	bl	11c78 <strlen@plt>
   25fc4:	cmp	r0, #1
   25fc8:	mov	r3, #1
   25fcc:	bne	27678 <__assert_fail@plt+0x157e4>
   25fd0:	ldrb	r0, [r7]
   25fd4:	b	25ff4 <__assert_fail@plt+0x14160>
   25fd8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   25fdc:	mov	r0, r7
   25fe0:	bl	11c78 <strlen@plt>
   25fe4:	cmp	r0, #1
   25fe8:	bne	27678 <__assert_fail@plt+0x157e4>
   25fec:	ldrb	r0, [r7]
   25ff0:	mov	r3, #1
   25ff4:	ubfx	r1, r0, #5, #3
   25ff8:	and	r0, r0, #31
   25ffc:	ldr	r2, [r4, r1, lsl #2]
   26000:	orr	r0, r2, r3, lsl r0
   26004:	str	r0, [r4, r1, lsl #2]
   26008:	mov	r1, #0
   2600c:	ldr	r0, [sp, #16]
   26010:	ldr	lr, [sp, #44]	; 0x2c
   26014:	str	r1, [r0]
   26018:	ldrb	r0, [lr, #4]
   2601c:	cmp	r0, #21
   26020:	beq	26290 <__assert_fail@plt+0x143fc>
   26024:	cmp	r0, #2
   26028:	beq	275c4 <__assert_fail@plt+0x15730>
   2602c:	mov	r0, #3
   26030:	ldr	r5, [sp, #40]	; 0x28
   26034:	mov	r1, r6
   26038:	mov	r2, lr
   2603c:	mov	r3, r9
   26040:	mov	r7, lr
   26044:	str	r0, [fp, #-40]	; 0xffffffd8
   26048:	sub	r0, fp, #80	; 0x50
   2604c:	str	r0, [fp, #-36]	; 0xffffffdc
   26050:	mov	r0, #0
   26054:	str	r0, [sp, #4]
   26058:	sub	r0, fp, #40	; 0x28
   2605c:	str	r5, [sp]
   26060:	bl	27fb0 <__assert_fail@plt+0x1611c>
   26064:	cmp	r0, #0
   26068:	beq	25dec <__assert_fail@plt+0x13f58>
   2606c:	b	275bc <__assert_fail@plt+0x15728>
   26070:	ldr	sl, [sp, #48]	; 0x30
   26074:	ldr	r0, [sp, #28]
   26078:	ldr	r4, [sp, #52]	; 0x34
   2607c:	ldr	r1, [sl, #20]
   26080:	cmp	r0, r1
   26084:	beq	261fc <__assert_fail@plt+0x14368>
   26088:	ldr	r0, [sl]
   2608c:	ldr	r6, [sp, #24]
   26090:	ldr	r3, [fp, #-36]	; 0xffffffdc
   26094:	add	r2, r1, #1
   26098:	mov	r9, r7
   2609c:	str	r2, [sl, #20]
   260a0:	str	r3, [r0, r1, lsl #2]
   260a4:	b	26018 <__assert_fail@plt+0x14184>
   260a8:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   260ac:	mov	r3, #1
   260b0:	ubfx	r1, r0, #5, #3
   260b4:	ldr	lr, [sp, #44]	; 0x2c
   260b8:	and	r0, r0, #31
   260bc:	ldr	r2, [r4, r1, lsl #2]
   260c0:	orr	r0, r2, r3, lsl r0
   260c4:	str	r0, [r4, r1, lsl #2]
   260c8:	b	26018 <__assert_fail@plt+0x14184>
   260cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   260d0:	ldrb	r7, [r0]
   260d4:	cmp	r4, #3
   260d8:	bne	25f68 <__assert_fail@plt+0x140d4>
   260dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   260e0:	ldrb	sl, [r0]
   260e4:	cmp	r5, #3
   260e8:	cmpne	r5, #0
   260ec:	bne	26110 <__assert_fail@plt+0x1427c>
   260f0:	ldr	r0, [r8, #92]	; 0x5c
   260f4:	cmp	r0, #2
   260f8:	blt	26114 <__assert_fail@plt+0x14280>
   260fc:	mov	r0, r7
   26100:	bl	11ce4 <btowc@plt>
   26104:	ldr	lr, [sp, #44]	; 0x2c
   26108:	mov	r7, r0
   2610c:	b	26114 <__assert_fail@plt+0x14280>
   26110:	ldr	r7, [fp, #-36]	; 0xffffffdc
   26114:	cmp	r4, #3
   26118:	cmpne	r4, #0
   2611c:	bne	26140 <__assert_fail@plt+0x142ac>
   26120:	ldr	r0, [r8, #92]	; 0x5c
   26124:	cmp	r0, #2
   26128:	blt	26144 <__assert_fail@plt+0x142b0>
   2612c:	mov	r0, sl
   26130:	bl	11ce4 <btowc@plt>
   26134:	ldr	lr, [sp, #44]	; 0x2c
   26138:	mov	sl, r0
   2613c:	b	26144 <__assert_fail@plt+0x142b0>
   26140:	ldr	sl, [fp, #-44]	; 0xffffffd4
   26144:	cmn	r7, #1
   26148:	mov	r9, #3
   2614c:	cmnne	sl, #1
   26150:	beq	2767c <__assert_fail@plt+0x157e8>
   26154:	ldr	r0, [sp, #32]
   26158:	cmp	r0, #0
   2615c:	beq	2616c <__assert_fail@plt+0x142d8>
   26160:	cmp	r7, sl
   26164:	mov	r9, #11
   26168:	bhi	2767c <__assert_fail@plt+0x157e8>
   2616c:	ldr	r0, [r8, #92]	; 0x5c
   26170:	cmp	r0, #2
   26174:	blt	261b0 <__assert_fail@plt+0x1431c>
   26178:	ldr	r4, [sp, #48]	; 0x30
   2617c:	ldr	r1, [sp, #20]
   26180:	mov	r5, #1
   26184:	ldr	r0, [r4, #32]
   26188:	cmp	r1, r0
   2618c:	beq	2623c <__assert_fail@plt+0x143a8>
   26190:	ldmib	r4, {r6, r9}
   26194:	str	r7, [r6, r0, lsl #2]
   26198:	ldr	r0, [r4, #32]
   2619c:	add	r1, r0, #1
   261a0:	str	r1, [r4, #32]
   261a4:	ldr	r4, [sp, #52]	; 0x34
   261a8:	str	sl, [r9, r0, lsl #2]
   261ac:	b	261b8 <__assert_fail@plt+0x14324>
   261b0:	ldr	r4, [sp, #52]	; 0x34
   261b4:	mov	r5, #1
   261b8:	ldr	r6, [sp, #24]
   261bc:	ldr	r9, [sp, #12]
   261c0:	mov	r0, #0
   261c4:	cmp	r7, r0
   261c8:	cmpls	r0, sl
   261cc:	ubfxls	r1, r0, #5, #3
   261d0:	andls	r3, r0, #31
   261d4:	add	r0, r0, #1
   261d8:	ldrls	r2, [r4, r1, lsl #2]
   261dc:	orrls	r2, r2, r5, lsl r3
   261e0:	strls	r2, [r4, r1, lsl #2]
   261e4:	cmp	r0, #256	; 0x100
   261e8:	bne	261c4 <__assert_fail@plt+0x14330>
   261ec:	ldr	r0, [sp, #16]
   261f0:	ldr	sl, [sp, #48]	; 0x30
   261f4:	mov	r1, #0
   261f8:	b	26014 <__assert_fail@plt+0x14180>
   261fc:	ldr	r1, [sp, #28]
   26200:	mov	r0, #1
   26204:	orr	r1, r0, r1, lsl #1
   26208:	ldr	r0, [sl]
   2620c:	str	r1, [sp, #28]
   26210:	lsl	r1, r1, #2
   26214:	bl	33cc8 <__assert_fail@plt+0x21e34>
   26218:	cmp	r0, #0
   2621c:	beq	27a48 <__assert_fail@plt+0x15bb4>
   26220:	ldr	sl, [sp, #48]	; 0x30
   26224:	ldr	r6, [sp, #24]
   26228:	ldr	lr, [sp, #44]	; 0x2c
   2622c:	ldr	r4, [sp, #52]	; 0x34
   26230:	str	r0, [sl]
   26234:	ldr	r1, [sl, #20]
   26238:	b	26090 <__assert_fail@plt+0x141fc>
   2623c:	ldr	r0, [sp, #20]
   26240:	orr	r0, r5, r0, lsl #1
   26244:	lsl	r9, r0, #2
   26248:	str	r0, [sp, #20]
   2624c:	ldr	r0, [r4, #4]
   26250:	mov	r1, r9
   26254:	bl	33cc8 <__assert_fail@plt+0x21e34>
   26258:	mov	r6, r0
   2625c:	ldr	r0, [r4, #8]
   26260:	mov	r1, r9
   26264:	bl	33cc8 <__assert_fail@plt+0x21e34>
   26268:	mov	r9, r0
   2626c:	cmp	r6, #0
   26270:	cmpne	r9, #0
   26274:	beq	27a64 <__assert_fail@plt+0x15bd0>
   26278:	ldr	r4, [sp, #48]	; 0x30
   2627c:	mov	r5, #1
   26280:	stmib	r4, {r6, r9}
   26284:	ldr	r0, [r4, #32]
   26288:	ldr	lr, [sp, #44]	; 0x2c
   2628c:	b	26194 <__assert_fail@plt+0x14300>
   26290:	ldr	r0, [r6, #40]	; 0x28
   26294:	add	r0, r0, r9
   26298:	str	r0, [r6, #40]	; 0x28
   2629c:	ldr	r0, [sp, #36]	; 0x24
   262a0:	cmp	r0, #0
   262a4:	beq	262c4 <__assert_fail@plt+0x14430>
   262a8:	vld1.32	{d16-d17}, [r4]
   262ac:	mov	r0, r4
   262b0:	vmvn	q8, q8
   262b4:	vst1.32	{d16-d17}, [r0]!
   262b8:	vld1.32	{d16-d17}, [r0]
   262bc:	vmvn	q8, q8
   262c0:	vst1.32	{d16-d17}, [r0]
   262c4:	ldr	r0, [r8, #92]	; 0x5c
   262c8:	cmp	r0, #2
   262cc:	blt	26348 <__assert_fail@plt+0x144b4>
   262d0:	ldm	r4, {r1, r2, r3, r7}
   262d4:	ldr	r6, [r8, #60]	; 0x3c
   262d8:	ldr	r5, [r6]
   262dc:	and	r1, r1, r5
   262e0:	str	r1, [r4]
   262e4:	ldr	r1, [r6, #4]
   262e8:	and	r1, r2, r1
   262ec:	str	r1, [r4, #4]
   262f0:	ldr	r1, [r6, #8]
   262f4:	and	r1, r3, r1
   262f8:	str	r1, [r4, #8]
   262fc:	ldr	r1, [r6, #12]
   26300:	and	r1, r7, r1
   26304:	str	r1, [r4, #12]
   26308:	ldr	r1, [r4, #16]
   2630c:	ldr	r2, [r6, #16]
   26310:	and	r1, r1, r2
   26314:	str	r1, [r4, #16]
   26318:	ldr	r1, [r6, #20]
   2631c:	ldr	r2, [r4, #20]
   26320:	and	r1, r2, r1
   26324:	str	r1, [r4, #20]
   26328:	ldr	r1, [r6, #24]
   2632c:	ldr	r2, [r4, #24]
   26330:	and	r1, r2, r1
   26334:	str	r1, [r4, #24]
   26338:	ldr	r1, [r6, #28]
   2633c:	ldr	r2, [r4, #28]
   26340:	and	r1, r2, r1
   26344:	str	r1, [r4, #28]
   26348:	ldr	r1, [sl, #20]
   2634c:	ldr	r6, [sp, #40]	; 0x28
   26350:	cmp	r1, #0
   26354:	bne	2637c <__assert_fail@plt+0x144e8>
   26358:	ldr	r1, [sl, #24]
   2635c:	cmp	r1, #0
   26360:	bne	2637c <__assert_fail@plt+0x144e8>
   26364:	ldr	r1, [sl, #28]
   26368:	cmp	r1, #0
   2636c:	bne	2637c <__assert_fail@plt+0x144e8>
   26370:	ldr	r1, [sl, #32]
   26374:	cmp	r1, #0
   26378:	beq	274f4 <__assert_fail@plt+0x15660>
   2637c:	ldrb	r0, [r8, #88]	; 0x58
   26380:	orr	r0, r0, #2
   26384:	strb	r0, [r8, #88]	; 0x58
   26388:	ldr	r1, [r8, #64]	; 0x40
   2638c:	cmp	r1, #31
   26390:	beq	276d4 <__assert_fail@plt+0x15840>
   26394:	ldr	r0, [r8, #56]	; 0x38
   26398:	add	r2, r1, #1
   2639c:	add	r0, r0, r1, lsl #5
   263a0:	mov	r1, #6
   263a4:	vmov.i32	q8, #0	; 0x00000000
   263a8:	str	r2, [r8, #64]	; 0x40
   263ac:	mov	r2, #0
   263b0:	add	r9, r0, #4
   263b4:	str	r2, [r0, #20]
   263b8:	str	sl, [r0, #24]
   263bc:	str	r1, [r0, #28]
   263c0:	mov	r0, #28
   263c4:	mov	r1, r9
   263c8:	vst1.32	{d16-d17}, [r1], r0
   263cc:	mvn	r0, #0
   263d0:	str	r0, [r1]
   263d4:	ldr	r0, [r4]
   263d8:	cmp	r0, #0
   263dc:	bne	26434 <__assert_fail@plt+0x145a0>
   263e0:	ldr	r0, [r4, #4]
   263e4:	cmp	r0, #0
   263e8:	bne	26434 <__assert_fail@plt+0x145a0>
   263ec:	ldr	r0, [r4, #8]
   263f0:	cmp	r0, #0
   263f4:	bne	26434 <__assert_fail@plt+0x145a0>
   263f8:	ldr	r0, [r4, #12]
   263fc:	cmp	r0, #0
   26400:	bne	26434 <__assert_fail@plt+0x145a0>
   26404:	ldr	r0, [r4, #16]
   26408:	cmp	r0, #0
   2640c:	bne	26434 <__assert_fail@plt+0x145a0>
   26410:	ldr	r0, [r4, #20]
   26414:	cmp	r0, #0
   26418:	bne	26434 <__assert_fail@plt+0x145a0>
   2641c:	ldr	r0, [r4, #24]
   26420:	cmp	r0, #0
   26424:	bne	26434 <__assert_fail@plt+0x145a0>
   26428:	ldr	r0, [r4, #28]
   2642c:	cmp	r0, #0
   26430:	beq	27788 <__assert_fail@plt+0x158f4>
   26434:	ldr	r1, [r8, #64]	; 0x40
   26438:	cmp	r1, #31
   2643c:	beq	27700 <__assert_fail@plt+0x1586c>
   26440:	ldr	r0, [r8, #56]	; 0x38
   26444:	add	r2, r1, #1
   26448:	add	r0, r0, r1, lsl #5
   2644c:	mov	r1, #3
   26450:	vmov.i32	q8, #0	; 0x00000000
   26454:	str	r2, [r8, #64]	; 0x40
   26458:	mov	r2, #0
   2645c:	add	r5, r0, #4
   26460:	str	r2, [r0, #20]
   26464:	str	r4, [r0, #24]
   26468:	str	r1, [r0, #28]
   2646c:	mov	r0, #28
   26470:	mov	r1, r5
   26474:	vst1.32	{d16-d17}, [r1], r0
   26478:	mvn	r0, #0
   2647c:	str	r0, [r1]
   26480:	ldr	r1, [r8, #64]	; 0x40
   26484:	cmp	r1, #31
   26488:	beq	2772c <__assert_fail@plt+0x15898>
   2648c:	ldr	r0, [r8, #56]	; 0x38
   26490:	add	r2, r1, #1
   26494:	add	r7, r0, r1, lsl #5
   26498:	mov	r0, #0
   2649c:	mov	r1, #10
   264a0:	str	r2, [r8, #64]	; 0x40
   264a4:	str	r0, [r7, #4]!
   264a8:	mvn	r2, #0
   264ac:	add	r3, r7, #20
   264b0:	stmib	r7, {r5, r9}
   264b4:	str	r0, [r7, #12]
   264b8:	str	r0, [r7, #16]
   264bc:	stm	r3, {r0, r1, r2}
   264c0:	str	r7, [r5]
   264c4:	str	r7, [r9]
   264c8:	b	266d4 <__assert_fail@plt+0x14840>
   264cc:	mov	r0, #5
   264d0:	mov	r4, r8
   264d4:	str	r0, [lr]
   264d8:	ldr	r1, [r4, #64]!	; 0x40
   264dc:	cmp	r1, #31
   264e0:	beq	27830 <__assert_fail@plt+0x1599c>
   264e4:	ldr	r0, [r8, #56]	; 0x38
   264e8:	add	r2, r1, #1
   264ec:	add	r5, r0, r1, lsl #5
   264f0:	mov	r0, #0
   264f4:	str	r2, [r4]
   264f8:	str	r0, [r5, #4]!
   264fc:	str	r0, [r5, #4]
   26500:	str	r0, [r5, #8]
   26504:	ldm	lr, {r1, r2}
   26508:	str	r0, [r5, #12]
   2650c:	str	r0, [r5, #16]
   26510:	mvn	r0, #0
   26514:	str	r0, [r5, #28]
   26518:	bic	r0, r2, #786432	; 0xc0000
   2651c:	str	r1, [r5, #20]
   26520:	str	r0, [r5, #24]
   26524:	mov	r0, #10
   26528:	str	r0, [lr]
   2652c:	mov	r9, r6
   26530:	ldr	r1, [r4]
   26534:	cmp	r1, #31
   26538:	beq	2779c <__assert_fail@plt+0x15908>
   2653c:	ldr	r0, [r8, #56]	; 0x38
   26540:	add	r2, r1, #1
   26544:	add	r6, r0, r1, lsl #5
   26548:	mov	r0, #0
   2654c:	str	r2, [r4]
   26550:	str	r0, [r6, #4]!
   26554:	str	r0, [r6, #4]
   26558:	str	r0, [r6, #8]
   2655c:	ldm	lr, {r1, r2}
   26560:	str	r0, [r6, #12]
   26564:	str	r0, [r6, #16]
   26568:	mvn	r0, #0
   2656c:	str	r0, [r6, #28]
   26570:	bic	r0, r2, #786432	; 0xc0000
   26574:	str	r1, [r6, #20]
   26578:	str	r0, [r6, #24]
   2657c:	ldr	r1, [r4]
   26580:	cmp	r1, #31
   26584:	beq	277d0 <__assert_fail@plt+0x1593c>
   26588:	ldr	r0, [r8, #56]	; 0x38
   2658c:	add	r2, r1, #1
   26590:	cmp	r5, #0
   26594:	str	r2, [r4]
   26598:	add	r4, r0, r1, lsl #5
   2659c:	mov	r0, #0
   265a0:	mov	r1, #10
   265a4:	mvn	r2, #0
   265a8:	str	r0, [r4, #4]!
   265ac:	add	r3, r4, #20
   265b0:	stmib	r4, {r5, r6}
   265b4:	str	r0, [r4, #12]
   265b8:	str	r0, [r4, #16]
   265bc:	stm	r3, {r0, r1, r2}
   265c0:	strne	r4, [r5]
   265c4:	cmp	r6, #0
   265c8:	strne	r4, [r6]
   265cc:	cmpne	r5, #0
   265d0:	bne	26634 <__assert_fail@plt+0x147a0>
   265d4:	mov	r0, #12
   265d8:	ldr	r1, [sp, #16]
   265dc:	str	r0, [r1]
   265e0:	b	27438 <__assert_fail@plt+0x155a4>
   265e4:	ldr	r1, [r8, #64]	; 0x40
   265e8:	mov	r9, r6
   265ec:	cmp	r1, #31
   265f0:	beq	27864 <__assert_fail@plt+0x159d0>
   265f4:	ldr	r0, [r8, #56]	; 0x38
   265f8:	add	r2, r1, #1
   265fc:	add	r4, r0, r1, lsl #5
   26600:	mov	r0, #0
   26604:	str	r2, [r8, #64]	; 0x40
   26608:	str	r0, [r4, #4]!
   2660c:	str	r0, [r4, #4]
   26610:	str	r0, [r4, #8]
   26614:	ldm	lr, {r1, r2}
   26618:	str	r0, [r4, #12]
   2661c:	str	r0, [r4, #16]
   26620:	mvn	r0, #0
   26624:	str	r0, [r4, #28]
   26628:	bic	r0, r2, #786432	; 0xc0000
   2662c:	str	r1, [r4, #20]
   26630:	str	r0, [r4, #24]
   26634:	mov	r0, lr
   26638:	mov	r1, r7
   2663c:	mov	r2, r9
   26640:	bl	24abc <__assert_fail@plt+0x12c28>
   26644:	ldr	r1, [r7, #40]	; 0x28
   26648:	mov	sl, r4
   2664c:	add	r0, r1, r0
   26650:	str	r0, [r7, #40]	; 0x28
   26654:	b	27438 <__assert_fail@plt+0x155a4>
   26658:	ldrb	r0, [r6, #4]
   2665c:	cmp	r0, #9
   26660:	bne	27950 <__assert_fail@plt+0x15abc>
   26664:	mov	lr, r6
   26668:	cmp	r4, #8
   2666c:	ldrls	r0, [r8, #84]	; 0x54
   26670:	movls	r1, #1
   26674:	orrls	r0, r0, r1, lsl r4
   26678:	strls	r0, [r8, #84]	; 0x54
   2667c:	ldr	r1, [r8, #64]	; 0x40
   26680:	cmp	r1, #31
   26684:	beq	27758 <__assert_fail@plt+0x158c4>
   26688:	ldr	r0, [r8, #56]	; 0x38
   2668c:	mov	r6, sl
   26690:	add	r0, r0, r1, lsl #5
   26694:	add	r2, r1, #1
   26698:	mov	r1, #0
   2669c:	mvn	r3, #0
   266a0:	cmp	r9, #0
   266a4:	mov	r7, r0
   266a8:	str	r2, [r8, #64]	; 0x40
   266ac:	mov	r2, #17
   266b0:	str	r1, [r7, #4]!
   266b4:	add	ip, r7, #20
   266b8:	str	r9, [r7, #4]
   266bc:	str	r1, [r7, #8]
   266c0:	str	r1, [r7, #12]
   266c4:	str	r1, [r7, #16]
   266c8:	stm	ip, {r1, r2, r3}
   266cc:	strne	r7, [r9]
   266d0:	str	r4, [r0, #24]
   266d4:	mov	r4, r6
   266d8:	ldr	r6, [sp, #24]
   266dc:	mov	r0, lr
   266e0:	mov	r2, r4
   266e4:	mov	r1, r6
   266e8:	bl	24abc <__assert_fail@plt+0x12c28>
   266ec:	ldr	r1, [r6, #40]	; 0x28
   266f0:	ldr	ip, [sp, #44]	; 0x2c
   266f4:	add	r0, r1, r0
   266f8:	str	r0, [r6, #40]	; 0x28
   266fc:	add	r0, r8, #56	; 0x38
   26700:	add	r8, r8, #64	; 0x40
   26704:	str	r0, [sp, #20]
   26708:	and	r0, r4, #2097152	; 0x200000
   2670c:	str	r0, [sp, #12]
   26710:	str	r4, [sp, #40]	; 0x28
   26714:	and	r0, r4, #16777216	; 0x1000000
   26718:	mov	r4, #0
   2671c:	str	r0, [sp, #28]
   26720:	ldrb	r0, [ip, #4]
   26724:	mov	sl, r7
   26728:	cmp	r0, #23
   2672c:	bhi	27438 <__assert_fail@plt+0x155a4>
   26730:	movw	r2, #2048	; 0x800
   26734:	mov	r1, #1
   26738:	movt	r2, #140	; 0x8c
   2673c:	tst	r2, r1, lsl r0
   26740:	beq	27438 <__assert_fail@plt+0x155a4>
   26744:	cmp	r0, #23
   26748:	str	sl, [sp, #36]	; 0x24
   2674c:	bne	26760 <__assert_fail@plt+0x148cc>
   26750:	ldm	ip, {r5, sl}
   26754:	ldr	r7, [r6, #40]	; 0x28
   26758:	mvn	r2, #0
   2675c:	b	26794 <__assert_fail@plt+0x14900>
   26760:	cmp	r0, #19
   26764:	sub	r0, r0, #18
   26768:	mvn	r5, #0
   2676c:	clz	r0, r0
   26770:	movweq	r5, #1
   26774:	lsr	r9, r0, #5
   26778:	b	26978 <__assert_fail@plt+0x14ae4>
   2677c:	add	r0, r9, r9, lsl #2
   26780:	add	r0, r1, r0, lsl #1
   26784:	movw	r1, #32816	; 0x8030
   26788:	sub	r2, r0, #48	; 0x30
   2678c:	cmp	r0, r1
   26790:	movwgt	r2, #32768	; 0x8000
   26794:	mov	r9, r2
   26798:	ldr	r2, [sp, #40]	; 0x28
   2679c:	mov	r0, ip
   267a0:	mov	r1, r6
   267a4:	bl	24abc <__assert_fail@plt+0x12c28>
   267a8:	ldr	r1, [r6, #40]	; 0x28
   267ac:	ldr	ip, [sp, #44]	; 0x2c
   267b0:	add	r0, r1, r0
   267b4:	str	r0, [r6, #40]	; 0x28
   267b8:	ldrb	r0, [ip, #4]
   267bc:	ldrb	r1, [ip]
   267c0:	cmp	r0, #24
   267c4:	beq	2680c <__assert_fail@plt+0x14978>
   267c8:	cmp	r0, #2
   267cc:	beq	2685c <__assert_fail@plt+0x149c8>
   267d0:	cmp	r1, #44	; 0x2c
   267d4:	beq	2680c <__assert_fail@plt+0x14978>
   267d8:	mvn	r2, #1
   267dc:	cmp	r1, #48	; 0x30
   267e0:	bcc	26794 <__assert_fail@plt+0x14900>
   267e4:	cmp	r0, #1
   267e8:	bne	26794 <__assert_fail@plt+0x14900>
   267ec:	cmn	r9, #2
   267f0:	beq	26794 <__assert_fail@plt+0x14900>
   267f4:	cmp	r1, #57	; 0x39
   267f8:	bhi	26794 <__assert_fail@plt+0x14900>
   267fc:	cmn	r9, #1
   26800:	bne	2677c <__assert_fail@plt+0x148e8>
   26804:	sub	r2, r1, #48	; 0x30
   26808:	b	26794 <__assert_fail@plt+0x14900>
   2680c:	cmn	r9, #1
   26810:	bne	2683c <__assert_fail@plt+0x149a8>
   26814:	cmp	r1, #44	; 0x2c
   26818:	moveq	r9, #0
   2681c:	cmpeq	r0, #1
   26820:	beq	26884 <__assert_fail@plt+0x149f0>
   26824:	ldr	r0, [sp, #16]
   26828:	mov	r1, #10
   2682c:	str	r1, [r0]
   26830:	ldr	sl, [sp, #36]	; 0x24
   26834:	mov	r7, #0
   26838:	b	27348 <__assert_fail@plt+0x154b4>
   2683c:	cmn	r9, #2
   26840:	mov	r2, r9
   26844:	beq	2685c <__assert_fail@plt+0x149c8>
   26848:	cmp	r0, #24
   2684c:	beq	26890 <__assert_fail@plt+0x149fc>
   26850:	cmp	r0, #1
   26854:	cmpeq	r1, #44	; 0x2c
   26858:	beq	26884 <__assert_fail@plt+0x149f0>
   2685c:	ldr	r1, [sp, #12]
   26860:	cmp	r1, #0
   26864:	beq	26f24 <__assert_fail@plt+0x15090>
   26868:	mov	r0, #1
   2686c:	str	r7, [r6, #40]	; 0x28
   26870:	bfi	sl, r0, #0, #8
   26874:	stm	ip, {r5, sl}
   26878:	ldr	sl, [sp, #36]	; 0x24
   2687c:	mov	r7, sl
   26880:	b	27348 <__assert_fail@plt+0x154b4>
   26884:	mvn	r2, #0
   26888:	str	sl, [sp, #52]	; 0x34
   2688c:	b	268bc <__assert_fail@plt+0x14a28>
   26890:	ldr	sl, [sp, #36]	; 0x24
   26894:	mov	r5, r9
   26898:	cmp	r0, #24
   2689c:	beq	26964 <__assert_fail@plt+0x14ad0>
   268a0:	b	26f04 <__assert_fail@plt+0x15070>
   268a4:	add	r0, sl, sl, lsl #2
   268a8:	add	r0, r1, r0, lsl #1
   268ac:	movw	r1, #32816	; 0x8030
   268b0:	sub	r2, r0, #48	; 0x30
   268b4:	cmp	r0, r1
   268b8:	movwgt	r2, #32768	; 0x8000
   268bc:	mov	sl, r2
   268c0:	ldr	r2, [sp, #40]	; 0x28
   268c4:	mov	r0, ip
   268c8:	mov	r1, r6
   268cc:	bl	24abc <__assert_fail@plt+0x12c28>
   268d0:	ldr	r1, [r6, #40]	; 0x28
   268d4:	ldr	ip, [sp, #44]	; 0x2c
   268d8:	add	r0, r1, r0
   268dc:	str	r0, [r6, #40]	; 0x28
   268e0:	ldrb	r0, [ip, #4]
   268e4:	cmp	r0, #24
   268e8:	beq	26934 <__assert_fail@plt+0x14aa0>
   268ec:	cmp	r0, #2
   268f0:	beq	26ecc <__assert_fail@plt+0x15038>
   268f4:	ldrb	r1, [ip]
   268f8:	cmp	r1, #44	; 0x2c
   268fc:	beq	26934 <__assert_fail@plt+0x14aa0>
   26900:	mvn	r2, #1
   26904:	cmp	r1, #48	; 0x30
   26908:	bcc	268bc <__assert_fail@plt+0x14a28>
   2690c:	cmp	r0, #1
   26910:	bne	268bc <__assert_fail@plt+0x14a28>
   26914:	cmn	sl, #2
   26918:	beq	268bc <__assert_fail@plt+0x14a28>
   2691c:	cmp	r1, #57	; 0x39
   26920:	bhi	268bc <__assert_fail@plt+0x14a28>
   26924:	cmn	sl, #1
   26928:	bne	268a4 <__assert_fail@plt+0x14a10>
   2692c:	sub	r2, r1, #48	; 0x30
   26930:	b	268bc <__assert_fail@plt+0x14a28>
   26934:	cmn	sl, #2
   26938:	beq	26ecc <__assert_fail@plt+0x15038>
   2693c:	cmn	sl, #1
   26940:	mov	r5, sl
   26944:	beq	26958 <__assert_fail@plt+0x14ac4>
   26948:	ldr	sl, [sp, #36]	; 0x24
   2694c:	cmp	r9, r5
   26950:	ble	2695c <__assert_fail@plt+0x14ac8>
   26954:	b	26f04 <__assert_fail@plt+0x15070>
   26958:	ldr	sl, [sp, #36]	; 0x24
   2695c:	cmp	r0, #24
   26960:	bne	26f04 <__assert_fail@plt+0x15070>
   26964:	cmn	r5, #1
   26968:	mov	r0, r5
   2696c:	moveq	r0, r9
   26970:	cmp	r0, #32768	; 0x8000
   26974:	bge	26f10 <__assert_fail@plt+0x1507c>
   26978:	ldr	r2, [sp, #40]	; 0x28
   2697c:	mov	r0, ip
   26980:	mov	r1, r6
   26984:	bl	24abc <__assert_fail@plt+0x12c28>
   26988:	ldr	r1, [r6, #40]	; 0x28
   2698c:	mov	r7, #0
   26990:	cmp	sl, #0
   26994:	add	r0, r1, r0
   26998:	str	r0, [r6, #40]	; 0x28
   2699c:	beq	26dc8 <__assert_fail@plt+0x14f34>
   269a0:	ldr	lr, [sp, #20]
   269a4:	orrs	r0, r5, r9
   269a8:	beq	26dd0 <__assert_fail@plt+0x14f3c>
   269ac:	mov	r0, #0
   269b0:	cmp	r9, #1
   269b4:	mov	r7, sl
   269b8:	str	r0, [sp, #32]
   269bc:	ldr	ip, [sp, #44]	; 0x2c
   269c0:	str	r5, [sp, #48]	; 0x30
   269c4:	bge	26e78 <__assert_fail@plt+0x14fe4>
   269c8:	ldrb	r0, [r7, #24]
   269cc:	cmp	r0, #17
   269d0:	bne	26a40 <__assert_fail@plt+0x14bac>
   269d4:	ldr	r0, [r7, #20]
   269d8:	mov	r2, r7
   269dc:	mov	r1, r2
   269e0:	ldr	r2, [r2, #4]
   269e4:	cmp	r2, #0
   269e8:	bne	269dc <__assert_fail@plt+0x14b48>
   269ec:	ldr	r2, [r1, #8]
   269f0:	cmp	r2, #0
   269f4:	bne	269dc <__assert_fail@plt+0x14b48>
   269f8:	ldr	r2, [r1, #24]
   269fc:	uxtb	r3, r2
   26a00:	cmp	r3, #17
   26a04:	ldreq	r3, [r1, #20]
   26a08:	cmpeq	r3, r0
   26a0c:	orreq	r2, r2, #524288	; 0x80000
   26a10:	streq	r2, [r1, #24]
   26a14:	ldr	r3, [r1]
   26a18:	cmp	r3, #0
   26a1c:	beq	26a40 <__assert_fail@plt+0x14bac>
   26a20:	ldr	r2, [r3, #8]
   26a24:	cmp	r2, r1
   26a28:	mov	r1, r3
   26a2c:	beq	269f8 <__assert_fail@plt+0x14b64>
   26a30:	cmp	r2, #0
   26a34:	mov	r1, r3
   26a38:	beq	269f8 <__assert_fail@plt+0x14b64>
   26a3c:	b	269dc <__assert_fail@plt+0x14b48>
   26a40:	ldr	r1, [r8]
   26a44:	cmn	r5, #1
   26a48:	mov	r6, #10
   26a4c:	movweq	r6, #11
   26a50:	cmp	r1, #31
   26a54:	beq	26e98 <__assert_fail@plt+0x15004>
   26a58:	ldr	r0, [lr]
   26a5c:	add	r2, r1, #1
   26a60:	add	sl, r0, r1, lsl #5
   26a64:	mvn	r0, #0
   26a68:	str	r2, [r8]
   26a6c:	str	r4, [sl, #4]!
   26a70:	str	r7, [sl, #4]
   26a74:	str	r4, [sl, #8]
   26a78:	str	r4, [sl, #12]
   26a7c:	str	r4, [sl, #16]
   26a80:	str	r4, [sl, #20]
   26a84:	str	r6, [sl, #24]
   26a88:	str	r0, [sl, #28]
   26a8c:	add	r0, r9, #2
   26a90:	str	sl, [r7]
   26a94:	cmp	r0, r5
   26a98:	bgt	26d5c <__assert_fail@plt+0x14ec8>
   26a9c:	mov	r6, sl
   26aa0:	b	26ab0 <__assert_fail@plt+0x14c1c>
   26aa4:	ldr	sl, [r7]
   26aa8:	mov	r0, r1
   26aac:	add	r0, r1, #1
   26ab0:	ldr	r1, [r8]
   26ab4:	str	r0, [sp, #52]	; 0x34
   26ab8:	cmp	r1, #31
   26abc:	beq	26ca8 <__assert_fail@plt+0x14e14>
   26ac0:	ldr	r0, [lr]
   26ac4:	add	r3, r1, #1
   26ac8:	add	r9, r0, r1, lsl #5
   26acc:	add	r2, r7, #20
   26ad0:	sub	r5, fp, #80	; 0x50
   26ad4:	str	r3, [r8]
   26ad8:	str	r4, [r9, #4]!
   26adc:	str	r4, [r9, #4]
   26ae0:	str	r4, [r9, #8]
   26ae4:	ldm	r2, {r0, r1}
   26ae8:	mvn	r2, #0
   26aec:	str	r4, [r9, #12]
   26af0:	str	r4, [r9, #16]
   26af4:	str	r2, [r9, #28]
   26af8:	str	r0, [r9, #20]
   26afc:	bic	r0, r1, #786432	; 0xc0000
   26b00:	str	r0, [r9, #24]
   26b04:	mov	r0, r9
   26b08:	str	r9, [fp, #-80]	; 0xffffffb0
   26b0c:	b	26b50 <__assert_fail@plt+0x14cbc>
   26b10:	add	r3, r1, #1
   26b14:	add	r0, r0, r1, lsl #5
   26b18:	add	r2, r7, #20
   26b1c:	str	r3, [r8]
   26b20:	str	r4, [r0, #4]!
   26b24:	mvn	r3, #0
   26b28:	str	r4, [r0, #4]
   26b2c:	str	r4, [r0, #8]
   26b30:	ldm	r2, {r1, r2}
   26b34:	str	r4, [r0, #12]
   26b38:	str	r4, [r0, #16]
   26b3c:	str	r3, [r0, #28]
   26b40:	str	r1, [r0, #20]
   26b44:	bic	r1, r2, #786432	; 0xc0000
   26b48:	str	r1, [r0, #24]
   26b4c:	str	r0, [r5]
   26b50:	str	sl, [r0]
   26b54:	ldr	r0, [r5]
   26b58:	ldr	r1, [r0, #24]
   26b5c:	orr	r1, r1, #262144	; 0x40000
   26b60:	str	r1, [r0, #24]
   26b64:	ldr	r0, [r7, #4]
   26b68:	ldr	sl, [r5]
   26b6c:	cmp	r0, #0
   26b70:	beq	26b80 <__assert_fail@plt+0x14cec>
   26b74:	add	r5, sl, #4
   26b78:	mov	r7, r0
   26b7c:	b	26bb4 <__assert_fail@plt+0x14d20>
   26b80:	mov	r1, #0
   26b84:	mov	r0, r7
   26b88:	ldr	r7, [r7, #8]
   26b8c:	cmp	r7, r1
   26b90:	cmpne	r7, #0
   26b94:	bne	26bb0 <__assert_fail@plt+0x14d1c>
   26b98:	ldr	r7, [r0]
   26b9c:	ldr	sl, [sl]
   26ba0:	mov	r1, r0
   26ba4:	cmp	r7, #0
   26ba8:	bne	26b84 <__assert_fail@plt+0x14cf0>
   26bac:	b	26bf8 <__assert_fail@plt+0x14d64>
   26bb0:	add	r5, sl, #8
   26bb4:	ldr	r1, [r8]
   26bb8:	cmp	r1, #31
   26bbc:	beq	26bc8 <__assert_fail@plt+0x14d34>
   26bc0:	ldr	r0, [lr]
   26bc4:	b	26b10 <__assert_fail@plt+0x14c7c>
   26bc8:	mov	r0, #996	; 0x3e4
   26bcc:	bl	33c98 <__assert_fail@plt+0x21e04>
   26bd0:	cmp	r0, #0
   26bd4:	beq	26d44 <__assert_fail@plt+0x14eb0>
   26bd8:	ldr	lr, [sp, #20]
   26bdc:	ldr	ip, [sp, #44]	; 0x2c
   26be0:	ldr	r1, [lr]
   26be4:	str	r1, [r0]
   26be8:	mov	r1, #0
   26bec:	str	r0, [lr]
   26bf0:	str	r1, [r8]
   26bf4:	b	26b10 <__assert_fail@plt+0x14c7c>
   26bf8:	mov	r7, r9
   26bfc:	ldr	r1, [r8]
   26c00:	cmp	r1, #31
   26c04:	beq	26cd8 <__assert_fail@plt+0x14e44>
   26c08:	ldr	r0, [lr]
   26c0c:	add	r2, r1, #1
   26c10:	add	r5, r0, r1, lsl #5
   26c14:	mov	r0, #16
   26c18:	cmp	r7, #0
   26c1c:	str	r2, [r8]
   26c20:	str	r4, [r5, #4]!
   26c24:	stmib	r5, {r6, r7}
   26c28:	str	r4, [r5, #12]
   26c2c:	str	r4, [r5, #16]
   26c30:	str	r4, [r5, #20]
   26c34:	str	r0, [r5, #24]
   26c38:	mvn	r0, #0
   26c3c:	str	r0, [r5, #28]
   26c40:	str	r5, [r6]
   26c44:	beq	27330 <__assert_fail@plt+0x1549c>
   26c48:	str	r5, [r7]
   26c4c:	ldr	r1, [r8]
   26c50:	cmp	r1, #31
   26c54:	beq	26d08 <__assert_fail@plt+0x14e74>
   26c58:	ldr	r0, [lr]
   26c5c:	add	r2, r1, #1
   26c60:	add	r6, r0, r1, lsl #5
   26c64:	mov	r0, #10
   26c68:	ldr	r1, [sp, #52]	; 0x34
   26c6c:	str	r2, [r8]
   26c70:	str	r4, [r6, #4]!
   26c74:	str	r5, [r6, #4]
   26c78:	str	r4, [r6, #8]
   26c7c:	str	r4, [r6, #12]
   26c80:	str	r4, [r6, #16]
   26c84:	str	r4, [r6, #20]
   26c88:	str	r0, [r6, #24]
   26c8c:	mvn	r0, #0
   26c90:	str	r0, [r6, #28]
   26c94:	ldr	r0, [sp, #48]	; 0x30
   26c98:	str	r6, [r5]
   26c9c:	cmp	r1, r0
   26ca0:	blt	26aa4 <__assert_fail@plt+0x14c10>
   26ca4:	b	26d58 <__assert_fail@plt+0x14ec4>
   26ca8:	mov	r0, #996	; 0x3e4
   26cac:	bl	33c98 <__assert_fail@plt+0x21e04>
   26cb0:	cmp	r0, #0
   26cb4:	beq	26d38 <__assert_fail@plt+0x14ea4>
   26cb8:	ldr	lr, [sp, #20]
   26cbc:	ldr	ip, [sp, #44]	; 0x2c
   26cc0:	ldr	r1, [lr]
   26cc4:	str	r1, [r0]
   26cc8:	mov	r1, #0
   26ccc:	str	r0, [lr]
   26cd0:	str	r1, [r8]
   26cd4:	b	26ac4 <__assert_fail@plt+0x14c30>
   26cd8:	mov	r0, #996	; 0x3e4
   26cdc:	bl	33c98 <__assert_fail@plt+0x21e04>
   26ce0:	ldr	lr, [sp, #20]
   26ce4:	ldr	ip, [sp, #44]	; 0x2c
   26ce8:	cmp	r0, #0
   26cec:	beq	27330 <__assert_fail@plt+0x1549c>
   26cf0:	ldr	r1, [lr]
   26cf4:	str	r1, [r0]
   26cf8:	mov	r1, #0
   26cfc:	str	r0, [lr]
   26d00:	str	r1, [r8]
   26d04:	b	26c0c <__assert_fail@plt+0x14d78>
   26d08:	mov	r0, #996	; 0x3e4
   26d0c:	bl	33c98 <__assert_fail@plt+0x21e04>
   26d10:	ldr	lr, [sp, #20]
   26d14:	ldr	ip, [sp, #44]	; 0x2c
   26d18:	cmp	r0, #0
   26d1c:	beq	27330 <__assert_fail@plt+0x1549c>
   26d20:	ldr	r1, [lr]
   26d24:	str	r1, [r0]
   26d28:	mov	r1, #0
   26d2c:	str	r0, [lr]
   26d30:	str	r1, [r8]
   26d34:	b	26c5c <__assert_fail@plt+0x14dc8>
   26d38:	mov	r7, #0
   26d3c:	str	r7, [fp, #-80]	; 0xffffffb0
   26d40:	b	26d4c <__assert_fail@plt+0x14eb8>
   26d44:	mov	r7, #0
   26d48:	str	r7, [r5]
   26d4c:	ldr	ip, [sp, #44]	; 0x2c
   26d50:	ldr	lr, [sp, #20]
   26d54:	b	26bfc <__assert_fail@plt+0x14d68>
   26d58:	mov	sl, r6
   26d5c:	ldr	r5, [sp, #32]
   26d60:	ldr	r6, [sp, #24]
   26d64:	cmp	r5, #0
   26d68:	beq	26dbc <__assert_fail@plt+0x14f28>
   26d6c:	ldr	r1, [r8]
   26d70:	cmp	r1, #31
   26d74:	beq	26ed4 <__assert_fail@plt+0x15040>
   26d78:	ldr	r0, [lr]
   26d7c:	add	r2, r1, #1
   26d80:	add	r7, r0, r1, lsl #5
   26d84:	mov	r0, #0
   26d88:	mov	r1, #16
   26d8c:	str	r2, [r8]
   26d90:	str	r0, [r7, #4]!
   26d94:	stmib	r7, {r5, sl}
   26d98:	str	r0, [r7, #12]
   26d9c:	str	r0, [r7, #16]
   26da0:	str	r0, [r7, #20]
   26da4:	str	r1, [r7, #24]
   26da8:	mvn	r1, #0
   26dac:	str	r1, [r7, #28]
   26db0:	str	r7, [r5]
   26db4:	str	r7, [sl]
   26db8:	b	27368 <__assert_fail@plt+0x154d4>
   26dbc:	mov	r0, #0
   26dc0:	mov	r7, sl
   26dc4:	b	27368 <__assert_fail@plt+0x154d4>
   26dc8:	ldr	ip, [sp, #44]	; 0x2c
   26dcc:	b	27348 <__assert_fail@plt+0x154b4>
   26dd0:	ldr	ip, [sp, #44]	; 0x2c
   26dd4:	mov	r0, sl
   26dd8:	mov	r5, r0
   26ddc:	ldr	r0, [r0, #4]
   26de0:	cmp	r0, #0
   26de4:	bne	26dd8 <__assert_fail@plt+0x14f44>
   26de8:	ldr	r0, [r5, #8]
   26dec:	cmp	r0, #0
   26df0:	bne	26dd8 <__assert_fail@plt+0x14f44>
   26df4:	ldr	r0, [r5, #24]
   26df8:	movw	r1, #255	; 0xff
   26dfc:	movt	r1, #4
   26e00:	and	r0, r0, r1
   26e04:	cmp	r0, #3
   26e08:	beq	26e40 <__assert_fail@plt+0x14fac>
   26e0c:	cmp	r0, #6
   26e10:	bne	26e4c <__assert_fail@plt+0x14fb8>
   26e14:	ldr	r9, [r5, #20]
   26e18:	ldr	r0, [r9]
   26e1c:	bl	17754 <__assert_fail@plt+0x58c0>
   26e20:	ldr	r0, [r9, #4]
   26e24:	bl	17754 <__assert_fail@plt+0x58c0>
   26e28:	ldr	r0, [r9, #8]
   26e2c:	bl	17754 <__assert_fail@plt+0x58c0>
   26e30:	ldr	r0, [r9, #12]
   26e34:	bl	17754 <__assert_fail@plt+0x58c0>
   26e38:	mov	r0, r9
   26e3c:	b	26e44 <__assert_fail@plt+0x14fb0>
   26e40:	ldr	r0, [r5, #20]
   26e44:	bl	17754 <__assert_fail@plt+0x58c0>
   26e48:	ldr	ip, [sp, #44]	; 0x2c
   26e4c:	ldr	r1, [r5]
   26e50:	cmp	r1, #0
   26e54:	beq	27348 <__assert_fail@plt+0x154b4>
   26e58:	ldr	r0, [r1, #8]
   26e5c:	cmp	r0, r5
   26e60:	mov	r5, r1
   26e64:	beq	26df4 <__assert_fail@plt+0x14f60>
   26e68:	cmp	r0, #0
   26e6c:	mov	r5, r1
   26e70:	beq	26df4 <__assert_fail@plt+0x14f60>
   26e74:	b	26dd8 <__assert_fail@plt+0x14f44>
   26e78:	mov	r5, sl
   26e7c:	str	r9, [sp, #8]
   26e80:	beq	2717c <__assert_fail@plt+0x152e8>
   26e84:	ldr	r9, [sp, #36]	; 0x24
   26e88:	mov	r0, #2
   26e8c:	ldr	r5, [r9]
   26e90:	mov	sl, r9
   26e94:	b	26fc4 <__assert_fail@plt+0x15130>
   26e98:	mov	r0, #996	; 0x3e4
   26e9c:	bl	33c98 <__assert_fail@plt+0x21e04>
   26ea0:	ldr	lr, [sp, #20]
   26ea4:	ldr	ip, [sp, #44]	; 0x2c
   26ea8:	cmp	r0, #0
   26eac:	beq	27330 <__assert_fail@plt+0x1549c>
   26eb0:	ldr	r1, [lr]
   26eb4:	ldr	r5, [sp, #48]	; 0x30
   26eb8:	str	r1, [r0]
   26ebc:	mov	r1, #0
   26ec0:	str	r0, [lr]
   26ec4:	str	r1, [r8]
   26ec8:	b	26a5c <__assert_fail@plt+0x14bc8>
   26ecc:	ldr	sl, [sp, #52]	; 0x34
   26ed0:	b	2685c <__assert_fail@plt+0x149c8>
   26ed4:	mov	r0, #996	; 0x3e4
   26ed8:	bl	33c98 <__assert_fail@plt+0x21e04>
   26edc:	cmp	r0, #0
   26ee0:	beq	26f3c <__assert_fail@plt+0x150a8>
   26ee4:	ldr	r2, [sp, #20]
   26ee8:	ldr	ip, [sp, #44]	; 0x2c
   26eec:	ldr	r1, [r2]
   26ef0:	str	r1, [r0]
   26ef4:	mov	r1, #0
   26ef8:	str	r0, [r2]
   26efc:	str	r1, [r8]
   26f00:	b	26d7c <__assert_fail@plt+0x14ee8>
   26f04:	ldr	r0, [sp, #16]
   26f08:	mov	r1, #10
   26f0c:	b	26f18 <__assert_fail@plt+0x15084>
   26f10:	ldr	r0, [sp, #16]
   26f14:	mov	r1, #15
   26f18:	str	r1, [r0]
   26f1c:	mov	r7, #0
   26f20:	b	27348 <__assert_fail@plt+0x154b4>
   26f24:	ldr	r1, [sp, #16]
   26f28:	cmp	r0, #2
   26f2c:	mov	r0, #10
   26f30:	movweq	r0, #9
   26f34:	str	r0, [r1]
   26f38:	b	26830 <__assert_fail@plt+0x1499c>
   26f3c:	ldr	ip, [sp, #44]	; 0x2c
   26f40:	b	26830 <__assert_fail@plt+0x1499c>
   26f44:	mov	r0, #996	; 0x3e4
   26f48:	bl	33c98 <__assert_fail@plt+0x21e04>
   26f4c:	cmp	r0, #0
   26f50:	beq	26fa4 <__assert_fail@plt+0x15110>
   26f54:	ldr	lr, [sp, #20]
   26f58:	ldr	ip, [sp, #44]	; 0x2c
   26f5c:	ldr	r1, [lr]
   26f60:	str	r1, [r0]
   26f64:	mov	r1, #0
   26f68:	str	r0, [lr]
   26f6c:	str	r1, [r8]
   26f70:	b	26fd8 <__assert_fail@plt+0x15144>
   26f74:	mov	r0, #996	; 0x3e4
   26f78:	bl	33c98 <__assert_fail@plt+0x21e04>
   26f7c:	ldr	lr, [sp, #20]
   26f80:	ldr	ip, [sp, #44]	; 0x2c
   26f84:	cmp	r0, #0
   26f88:	beq	27330 <__assert_fail@plt+0x1549c>
   26f8c:	ldr	r1, [lr]
   26f90:	str	r1, [r0]
   26f94:	mov	r1, #0
   26f98:	str	r0, [lr]
   26f9c:	str	r1, [r8]
   26fa0:	b	27120 <__assert_fail@plt+0x1528c>
   26fa4:	mov	sl, #0
   26fa8:	str	sl, [fp, #-80]	; 0xffffffb0
   26fac:	b	26fb8 <__assert_fail@plt+0x15124>
   26fb0:	mov	sl, #0
   26fb4:	str	sl, [r6]
   26fb8:	ldr	ip, [sp, #44]	; 0x2c
   26fbc:	ldr	lr, [sp, #20]
   26fc0:	b	27110 <__assert_fail@plt+0x1527c>
   26fc4:	ldr	r1, [r8]
   26fc8:	str	r0, [sp, #52]	; 0x34
   26fcc:	cmp	r1, #31
   26fd0:	beq	26f44 <__assert_fail@plt+0x150b0>
   26fd4:	ldr	r0, [lr]
   26fd8:	add	r3, r1, #1
   26fdc:	add	r7, r0, r1, lsl #5
   26fe0:	add	r2, sl, #20
   26fe4:	sub	r6, fp, #80	; 0x50
   26fe8:	str	r3, [r8]
   26fec:	str	r4, [r7, #4]!
   26ff0:	str	r4, [r7, #4]
   26ff4:	str	r4, [r7, #8]
   26ff8:	ldm	r2, {r0, r1}
   26ffc:	mvn	r2, #0
   27000:	str	r4, [r7, #12]
   27004:	str	r4, [r7, #16]
   27008:	str	r2, [r7, #28]
   2700c:	str	r0, [r7, #20]
   27010:	bic	r0, r1, #786432	; 0xc0000
   27014:	str	r0, [r7, #24]
   27018:	mov	r0, r7
   2701c:	str	r7, [fp, #-80]	; 0xffffffb0
   27020:	b	27064 <__assert_fail@plt+0x151d0>
   27024:	add	r3, r1, #1
   27028:	add	r0, r0, r1, lsl #5
   2702c:	add	r2, sl, #20
   27030:	str	r3, [r8]
   27034:	str	r4, [r0, #4]!
   27038:	mvn	r3, #0
   2703c:	str	r4, [r0, #4]
   27040:	str	r4, [r0, #8]
   27044:	ldm	r2, {r1, r2}
   27048:	str	r4, [r0, #12]
   2704c:	str	r4, [r0, #16]
   27050:	str	r3, [r0, #28]
   27054:	str	r1, [r0, #20]
   27058:	bic	r1, r2, #786432	; 0xc0000
   2705c:	str	r1, [r0, #24]
   27060:	str	r0, [r6]
   27064:	str	r5, [r0]
   27068:	ldr	r0, [r6]
   2706c:	ldr	r1, [r0, #24]
   27070:	orr	r1, r1, #262144	; 0x40000
   27074:	str	r1, [r0, #24]
   27078:	ldr	r0, [sl, #4]
   2707c:	ldr	r5, [r6]
   27080:	cmp	r0, #0
   27084:	beq	27094 <__assert_fail@plt+0x15200>
   27088:	add	r6, r5, #4
   2708c:	mov	sl, r0
   27090:	b	270c8 <__assert_fail@plt+0x15234>
   27094:	mov	r1, #0
   27098:	mov	r0, sl
   2709c:	ldr	sl, [sl, #8]
   270a0:	cmp	sl, r1
   270a4:	cmpne	sl, #0
   270a8:	bne	270c4 <__assert_fail@plt+0x15230>
   270ac:	ldr	sl, [r0]
   270b0:	ldr	r5, [r5]
   270b4:	mov	r1, r0
   270b8:	cmp	sl, #0
   270bc:	bne	27098 <__assert_fail@plt+0x15204>
   270c0:	b	2710c <__assert_fail@plt+0x15278>
   270c4:	add	r6, r5, #8
   270c8:	ldr	r1, [r8]
   270cc:	cmp	r1, #31
   270d0:	beq	270dc <__assert_fail@plt+0x15248>
   270d4:	ldr	r0, [lr]
   270d8:	b	27024 <__assert_fail@plt+0x15190>
   270dc:	mov	r0, #996	; 0x3e4
   270e0:	bl	33c98 <__assert_fail@plt+0x21e04>
   270e4:	cmp	r0, #0
   270e8:	beq	26fb0 <__assert_fail@plt+0x1511c>
   270ec:	ldr	lr, [sp, #20]
   270f0:	ldr	ip, [sp, #44]	; 0x2c
   270f4:	ldr	r1, [lr]
   270f8:	str	r1, [r0]
   270fc:	mov	r1, #0
   27100:	str	r0, [lr]
   27104:	str	r1, [r8]
   27108:	b	27024 <__assert_fail@plt+0x15190>
   2710c:	mov	sl, r7
   27110:	ldr	r1, [r8]
   27114:	cmp	r1, #31
   27118:	beq	26f74 <__assert_fail@plt+0x150e0>
   2711c:	ldr	r0, [lr]
   27120:	add	r2, r1, #1
   27124:	add	r1, r0, r1, lsl #5
   27128:	mov	r0, #16
   2712c:	cmp	sl, #0
   27130:	str	r2, [r8]
   27134:	str	r4, [r1, #4]!
   27138:	stmib	r1, {r9, sl}
   2713c:	str	r4, [r1, #12]
   27140:	str	r4, [r1, #16]
   27144:	str	r4, [r1, #20]
   27148:	str	r0, [r1, #24]
   2714c:	mvn	r0, #0
   27150:	str	r0, [r1, #28]
   27154:	str	r1, [r9]
   27158:	beq	27330 <__assert_fail@plt+0x1549c>
   2715c:	mov	r5, r1
   27160:	str	r1, [sl]
   27164:	ldr	r2, [sp, #52]	; 0x34
   27168:	ldr	r1, [sp, #8]
   2716c:	mov	r9, r5
   27170:	add	r0, r2, #1
   27174:	cmp	r2, r1
   27178:	blt	26fc4 <__assert_fail@plt+0x15130>
   2717c:	ldr	r1, [sp, #48]	; 0x30
   27180:	ldr	r2, [sp, #8]
   27184:	mov	r0, #0
   27188:	cmp	r2, r1
   2718c:	bne	2719c <__assert_fail@plt+0x15308>
   27190:	ldr	r6, [sp, #24]
   27194:	mov	r7, r5
   27198:	b	27368 <__assert_fail@plt+0x154d4>
   2719c:	mov	r9, sl
   271a0:	ldr	r1, [r8]
   271a4:	str	r5, [sp, #32]
   271a8:	ldr	r6, [r9], #20
   271ac:	cmp	r1, #31
   271b0:	beq	272f0 <__assert_fail@plt+0x1545c>
   271b4:	ldr	r0, [lr]
   271b8:	add	r2, r1, #1
   271bc:	add	r7, r0, r1, lsl #5
   271c0:	str	r2, [r8]
   271c4:	str	r4, [r7, #4]!
   271c8:	mvn	r2, #0
   271cc:	str	r4, [r7, #4]
   271d0:	str	r4, [r7, #8]
   271d4:	ldm	r9, {r0, r1}
   271d8:	str	r4, [r7, #12]
   271dc:	str	r4, [r7, #16]
   271e0:	str	r2, [r7, #28]
   271e4:	sub	r9, fp, #80	; 0x50
   271e8:	str	r0, [r7, #20]
   271ec:	bic	r0, r1, #786432	; 0xc0000
   271f0:	str	r0, [r7, #24]
   271f4:	mov	r0, r7
   271f8:	str	r7, [fp, #-80]	; 0xffffffb0
   271fc:	b	27240 <__assert_fail@plt+0x153ac>
   27200:	add	r3, r1, #1
   27204:	add	r0, r0, r1, lsl #5
   27208:	add	r2, sl, #20
   2720c:	str	r3, [r8]
   27210:	str	r4, [r0, #4]!
   27214:	mvn	r3, #0
   27218:	str	r4, [r0, #4]
   2721c:	str	r4, [r0, #8]
   27220:	ldm	r2, {r1, r2}
   27224:	str	r4, [r0, #12]
   27228:	str	r4, [r0, #16]
   2722c:	str	r3, [r0, #28]
   27230:	str	r1, [r0, #20]
   27234:	bic	r1, r2, #786432	; 0xc0000
   27238:	str	r1, [r0, #24]
   2723c:	str	r0, [r9]
   27240:	str	r6, [r0]
   27244:	ldr	r0, [r9]
   27248:	ldr	r1, [r0, #24]
   2724c:	orr	r1, r1, #262144	; 0x40000
   27250:	str	r1, [r0, #24]
   27254:	ldr	r0, [sl, #4]
   27258:	ldr	r6, [r9]
   2725c:	cmp	r0, #0
   27260:	beq	27270 <__assert_fail@plt+0x153dc>
   27264:	add	r9, r6, #4
   27268:	mov	sl, r0
   2726c:	b	272ac <__assert_fail@plt+0x15418>
   27270:	ldr	r5, [sp, #48]	; 0x30
   27274:	ldr	r9, [sp, #8]
   27278:	mov	r1, #0
   2727c:	mov	r0, sl
   27280:	ldr	sl, [sl, #8]
   27284:	cmp	sl, r1
   27288:	cmpne	sl, #0
   2728c:	bne	272a8 <__assert_fail@plt+0x15414>
   27290:	ldr	sl, [r0]
   27294:	ldr	r6, [r6]
   27298:	mov	r1, r0
   2729c:	cmp	sl, #0
   272a0:	bne	2727c <__assert_fail@plt+0x153e8>
   272a4:	b	269c8 <__assert_fail@plt+0x14b34>
   272a8:	add	r9, r6, #8
   272ac:	ldr	r1, [r8]
   272b0:	cmp	r1, #31
   272b4:	beq	272c0 <__assert_fail@plt+0x1542c>
   272b8:	ldr	r0, [lr]
   272bc:	b	27200 <__assert_fail@plt+0x1536c>
   272c0:	mov	r0, #996	; 0x3e4
   272c4:	bl	33c98 <__assert_fail@plt+0x21e04>
   272c8:	cmp	r0, #0
   272cc:	beq	27328 <__assert_fail@plt+0x15494>
   272d0:	ldr	lr, [sp, #20]
   272d4:	ldr	ip, [sp, #44]	; 0x2c
   272d8:	ldr	r1, [lr]
   272dc:	str	r1, [r0]
   272e0:	mov	r1, #0
   272e4:	str	r0, [lr]
   272e8:	str	r1, [r8]
   272ec:	b	27200 <__assert_fail@plt+0x1536c>
   272f0:	mov	r0, #996	; 0x3e4
   272f4:	bl	33c98 <__assert_fail@plt+0x21e04>
   272f8:	cmp	r0, #0
   272fc:	beq	27320 <__assert_fail@plt+0x1548c>
   27300:	ldr	lr, [sp, #20]
   27304:	ldr	ip, [sp, #44]	; 0x2c
   27308:	ldr	r1, [lr]
   2730c:	str	r1, [r0]
   27310:	mov	r1, #0
   27314:	str	r0, [lr]
   27318:	str	r1, [r8]
   2731c:	b	271b8 <__assert_fail@plt+0x15324>
   27320:	str	r4, [fp, #-80]	; 0xffffffb0
   27324:	b	2732c <__assert_fail@plt+0x15498>
   27328:	str	r4, [r9]
   2732c:	ldr	ip, [sp, #44]	; 0x2c
   27330:	ldr	r0, [sp, #16]
   27334:	ldr	r6, [sp, #24]
   27338:	ldr	sl, [sp, #36]	; 0x24
   2733c:	mov	r1, #12
   27340:	mov	r7, #0
   27344:	str	r1, [r0]
   27348:	clz	r0, r7
   2734c:	cmp	r7, #0
   27350:	lsr	r0, r0, #5
   27354:	bne	27368 <__assert_fail@plt+0x154d4>
   27358:	ldr	r1, [sp, #16]
   2735c:	ldr	r1, [r1]
   27360:	cmp	r1, #0
   27364:	bne	27450 <__assert_fail@plt+0x155bc>
   27368:	ldr	r1, [sp, #28]
   2736c:	cmp	r1, #0
   27370:	beq	26720 <__assert_fail@plt+0x1488c>
   27374:	ldrb	r1, [ip, #4]
   27378:	cmp	r1, #23
   2737c:	cmpne	r1, #11
   27380:	bne	26720 <__assert_fail@plt+0x1488c>
   27384:	ldr	r8, [sp, #16]
   27388:	movw	r6, #255	; 0xff
   2738c:	cmp	r0, #0
   27390:	movt	r6, #4
   27394:	bne	2742c <__assert_fail@plt+0x15598>
   27398:	mov	r5, r7
   2739c:	ldr	r7, [r7, #4]
   273a0:	cmp	r7, #0
   273a4:	bne	27398 <__assert_fail@plt+0x15504>
   273a8:	ldr	r7, [r5, #8]
   273ac:	cmp	r7, #0
   273b0:	bne	27398 <__assert_fail@plt+0x15504>
   273b4:	ldr	r0, [r5, #24]
   273b8:	and	r0, r0, r6
   273bc:	cmp	r0, #3
   273c0:	beq	273f8 <__assert_fail@plt+0x15564>
   273c4:	cmp	r0, #6
   273c8:	bne	27400 <__assert_fail@plt+0x1556c>
   273cc:	ldr	r4, [r5, #20]
   273d0:	ldr	r0, [r4]
   273d4:	bl	17754 <__assert_fail@plt+0x58c0>
   273d8:	ldr	r0, [r4, #4]
   273dc:	bl	17754 <__assert_fail@plt+0x58c0>
   273e0:	ldr	r0, [r4, #8]
   273e4:	bl	17754 <__assert_fail@plt+0x58c0>
   273e8:	ldr	r0, [r4, #12]
   273ec:	bl	17754 <__assert_fail@plt+0x58c0>
   273f0:	mov	r0, r4
   273f4:	b	273fc <__assert_fail@plt+0x15568>
   273f8:	ldr	r0, [r5, #20]
   273fc:	bl	17754 <__assert_fail@plt+0x58c0>
   27400:	ldr	r0, [r5]
   27404:	cmp	r0, #0
   27408:	beq	2742c <__assert_fail@plt+0x15598>
   2740c:	ldr	r7, [r0, #8]
   27410:	cmp	r7, r5
   27414:	mov	r5, r0
   27418:	beq	273b4 <__assert_fail@plt+0x15520>
   2741c:	cmp	r7, #0
   27420:	mov	r5, r0
   27424:	beq	273b4 <__assert_fail@plt+0x15520>
   27428:	b	27398 <__assert_fail@plt+0x15504>
   2742c:	mov	r0, #13
   27430:	mov	sl, #0
   27434:	str	r0, [r8]
   27438:	mov	r0, sl
   2743c:	sub	sp, fp, #28
   27440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27444:	mov	r7, r4
   27448:	mov	r6, r9
   2744c:	b	266d4 <__assert_fail@plt+0x14840>
   27450:	cmp	sl, #0
   27454:	beq	25998 <__assert_fail@plt+0x13b04>
   27458:	movw	r6, #255	; 0xff
   2745c:	movt	r6, #4
   27460:	mov	r5, sl
   27464:	ldr	sl, [sl, #4]
   27468:	cmp	sl, #0
   2746c:	bne	27460 <__assert_fail@plt+0x155cc>
   27470:	ldr	sl, [r5, #8]
   27474:	cmp	sl, #0
   27478:	bne	27460 <__assert_fail@plt+0x155cc>
   2747c:	ldr	r0, [r5, #24]
   27480:	and	r0, r0, r6
   27484:	cmp	r0, #3
   27488:	beq	274c0 <__assert_fail@plt+0x1562c>
   2748c:	cmp	r0, #6
   27490:	bne	274c8 <__assert_fail@plt+0x15634>
   27494:	ldr	r4, [r5, #20]
   27498:	ldr	r0, [r4]
   2749c:	bl	17754 <__assert_fail@plt+0x58c0>
   274a0:	ldr	r0, [r4, #4]
   274a4:	bl	17754 <__assert_fail@plt+0x58c0>
   274a8:	ldr	r0, [r4, #8]
   274ac:	bl	17754 <__assert_fail@plt+0x58c0>
   274b0:	ldr	r0, [r4, #12]
   274b4:	bl	17754 <__assert_fail@plt+0x58c0>
   274b8:	mov	r0, r4
   274bc:	b	274c4 <__assert_fail@plt+0x15630>
   274c0:	ldr	r0, [r5, #20]
   274c4:	bl	17754 <__assert_fail@plt+0x58c0>
   274c8:	ldr	r0, [r5]
   274cc:	cmp	r0, #0
   274d0:	beq	25998 <__assert_fail@plt+0x13b04>
   274d4:	ldr	sl, [r0, #8]
   274d8:	cmp	sl, r5
   274dc:	mov	r5, r0
   274e0:	beq	2747c <__assert_fail@plt+0x155e8>
   274e4:	cmp	sl, #0
   274e8:	mov	r5, r0
   274ec:	beq	2747c <__assert_fail@plt+0x155e8>
   274f0:	b	27460 <__assert_fail@plt+0x155cc>
   274f4:	cmp	r0, #2
   274f8:	blt	27514 <__assert_fail@plt+0x15680>
   274fc:	ldr	r0, [sl, #36]	; 0x24
   27500:	cmp	r0, #0
   27504:	bne	2637c <__assert_fail@plt+0x144e8>
   27508:	ldrb	r0, [sl, #16]
   2750c:	tst	r0, #1
   27510:	bne	2637c <__assert_fail@plt+0x144e8>
   27514:	ldr	r0, [sl]
   27518:	bl	17754 <__assert_fail@plt+0x58c0>
   2751c:	ldr	r0, [sl, #4]
   27520:	bl	17754 <__assert_fail@plt+0x58c0>
   27524:	ldr	r0, [sl, #8]
   27528:	bl	17754 <__assert_fail@plt+0x58c0>
   2752c:	ldr	r0, [sl, #12]
   27530:	bl	17754 <__assert_fail@plt+0x58c0>
   27534:	mov	r0, sl
   27538:	bl	17754 <__assert_fail@plt+0x58c0>
   2753c:	ldr	r1, [r8, #64]	; 0x40
   27540:	cmp	r1, #31
   27544:	beq	27a20 <__assert_fail@plt+0x15b8c>
   27548:	ldr	r0, [r8, #56]	; 0x38
   2754c:	add	r2, r1, #1
   27550:	add	r0, r0, r1, lsl #5
   27554:	ldr	lr, [sp, #44]	; 0x2c
   27558:	mov	r1, #3
   2755c:	vmov.i32	q8, #0	; 0x00000000
   27560:	str	r2, [r8, #64]	; 0x40
   27564:	mov	r2, #0
   27568:	add	r7, r0, #4
   2756c:	str	r2, [r0, #20]
   27570:	str	r4, [r0, #24]
   27574:	str	r1, [r0, #28]
   27578:	mov	r0, #28
   2757c:	mov	r1, r7
   27580:	vst1.32	{d16-d17}, [r1], r0
   27584:	mvn	r0, #0
   27588:	str	r0, [r1]
   2758c:	b	266d4 <__assert_fail@plt+0x14840>
   27590:	mov	r0, #996	; 0x3e4
   27594:	bl	33c98 <__assert_fail@plt+0x21e04>
   27598:	cmp	r0, #0
   2759c:	beq	27894 <__assert_fail@plt+0x15a00>
   275a0:	ldr	r1, [r8, #56]	; 0x38
   275a4:	ldr	lr, [sp, #44]	; 0x2c
   275a8:	str	r1, [r0]
   275ac:	mov	r1, #0
   275b0:	str	r1, [r8, #64]	; 0x40
   275b4:	str	r0, [r8, #56]	; 0x38
   275b8:	b	257e8 <__assert_fail@plt+0x13954>
   275bc:	mov	r9, r0
   275c0:	b	2767c <__assert_fail@plt+0x157e8>
   275c4:	mov	r9, #7
   275c8:	b	2767c <__assert_fail@plt+0x157e8>
   275cc:	mov	r0, #2
   275d0:	b	27a58 <__assert_fail@plt+0x15bc4>
   275d4:	mov	r0, #6
   275d8:	b	265d8 <__assert_fail@plt+0x14744>
   275dc:	mov	r0, #996	; 0x3e4
   275e0:	bl	33c98 <__assert_fail@plt+0x21e04>
   275e4:	cmp	r0, #0
   275e8:	beq	27894 <__assert_fail@plt+0x15a00>
   275ec:	ldr	r1, [r8, #56]	; 0x38
   275f0:	ldr	lr, [sp, #44]	; 0x2c
   275f4:	str	r1, [r0]
   275f8:	mov	r1, #0
   275fc:	str	r1, [r8, #64]	; 0x40
   27600:	str	r0, [r8, #56]	; 0x38
   27604:	b	258c0 <__assert_fail@plt+0x13a2c>
   27608:	mov	r0, #996	; 0x3e4
   2760c:	bl	33c98 <__assert_fail@plt+0x21e04>
   27610:	cmp	r0, #0
   27614:	beq	27894 <__assert_fail@plt+0x15a00>
   27618:	ldr	r1, [r8, #56]	; 0x38
   2761c:	ldr	r3, [sp, #24]
   27620:	ldr	lr, [sp, #44]	; 0x2c
   27624:	str	r1, [r0]
   27628:	mov	r1, #0
   2762c:	str	r1, [r8, #64]	; 0x40
   27630:	str	r0, [r8, #56]	; 0x38
   27634:	b	25a7c <__assert_fail@plt+0x13be8>
   27638:	mov	r0, r4
   2763c:	bl	17754 <__assert_fail@plt+0x58c0>
   27640:	mov	r0, r5
   27644:	bl	17754 <__assert_fail@plt+0x58c0>
   27648:	b	265d4 <__assert_fail@plt+0x14740>
   2764c:	mov	r0, #996	; 0x3e4
   27650:	bl	33c98 <__assert_fail@plt+0x21e04>
   27654:	cmp	r0, #0
   27658:	beq	27894 <__assert_fail@plt+0x15a00>
   2765c:	ldr	r1, [r8, #56]	; 0x38
   27660:	ldr	lr, [sp, #44]	; 0x2c
   27664:	str	r1, [r0]
   27668:	mov	r1, #0
   2766c:	str	r1, [r8, #64]	; 0x40
   27670:	str	r0, [r8, #56]	; 0x38
   27674:	b	25864 <__assert_fail@plt+0x139d0>
   27678:	mov	r9, #3
   2767c:	ldr	r0, [sp, #16]
   27680:	ldr	r4, [sp, #52]	; 0x34
   27684:	ldr	sl, [sp, #48]	; 0x30
   27688:	str	r9, [r0]
   2768c:	ldr	r6, [sp, #40]	; 0x28
   27690:	mov	r0, r4
   27694:	bl	17754 <__assert_fail@plt+0x58c0>
   27698:	ldr	r0, [sl]
   2769c:	bl	17754 <__assert_fail@plt+0x58c0>
   276a0:	ldr	r0, [sl, #4]
   276a4:	bl	17754 <__assert_fail@plt+0x58c0>
   276a8:	ldr	r0, [sl, #8]
   276ac:	bl	17754 <__assert_fail@plt+0x58c0>
   276b0:	ldr	r0, [sl, #12]
   276b4:	bl	17754 <__assert_fail@plt+0x58c0>
   276b8:	mov	r0, sl
   276bc:	bl	17754 <__assert_fail@plt+0x58c0>
   276c0:	ldr	r0, [sp, #16]
   276c4:	mov	r7, #0
   276c8:	mov	sl, #0
   276cc:	ldr	r0, [r0]
   276d0:	b	2578c <__assert_fail@plt+0x138f8>
   276d4:	mov	r0, #996	; 0x3e4
   276d8:	bl	33c98 <__assert_fail@plt+0x21e04>
   276dc:	cmp	r0, #0
   276e0:	beq	27a54 <__assert_fail@plt+0x15bc0>
   276e4:	ldr	r1, [r8, #56]	; 0x38
   276e8:	ldr	lr, [sp, #44]	; 0x2c
   276ec:	str	r1, [r0]
   276f0:	mov	r1, #0
   276f4:	str	r1, [r8, #64]	; 0x40
   276f8:	str	r0, [r8, #56]	; 0x38
   276fc:	b	26398 <__assert_fail@plt+0x14504>
   27700:	mov	r0, #996	; 0x3e4
   27704:	bl	33c98 <__assert_fail@plt+0x21e04>
   27708:	cmp	r0, #0
   2770c:	beq	27a54 <__assert_fail@plt+0x15bc0>
   27710:	ldr	r1, [r8, #56]	; 0x38
   27714:	ldr	lr, [sp, #44]	; 0x2c
   27718:	str	r1, [r0]
   2771c:	mov	r1, #0
   27720:	str	r1, [r8, #64]	; 0x40
   27724:	str	r0, [r8, #56]	; 0x38
   27728:	b	26444 <__assert_fail@plt+0x145b0>
   2772c:	mov	r0, #996	; 0x3e4
   27730:	bl	33c98 <__assert_fail@plt+0x21e04>
   27734:	cmp	r0, #0
   27738:	beq	27a54 <__assert_fail@plt+0x15bc0>
   2773c:	ldr	r1, [r8, #56]	; 0x38
   27740:	ldr	lr, [sp, #44]	; 0x2c
   27744:	str	r1, [r0]
   27748:	mov	r1, #0
   2774c:	str	r1, [r8, #64]	; 0x40
   27750:	str	r0, [r8, #56]	; 0x38
   27754:	b	26490 <__assert_fail@plt+0x145fc>
   27758:	mov	r0, #996	; 0x3e4
   2775c:	bl	33c98 <__assert_fail@plt+0x21e04>
   27760:	cmp	r0, #0
   27764:	beq	27894 <__assert_fail@plt+0x15a00>
   27768:	ldr	r1, [r8, #56]	; 0x38
   2776c:	ldr	lr, [sp, #44]	; 0x2c
   27770:	mov	r6, sl
   27774:	str	r1, [r0]
   27778:	mov	r1, #0
   2777c:	str	r1, [r8, #64]	; 0x40
   27780:	str	r0, [r8, #56]	; 0x38
   27784:	b	26690 <__assert_fail@plt+0x147fc>
   27788:	mov	r0, r4
   2778c:	bl	17754 <__assert_fail@plt+0x58c0>
   27790:	ldr	lr, [sp, #44]	; 0x2c
   27794:	mov	r7, r9
   27798:	b	266d4 <__assert_fail@plt+0x14840>
   2779c:	mov	r0, #996	; 0x3e4
   277a0:	bl	33c98 <__assert_fail@plt+0x21e04>
   277a4:	cmp	r0, #0
   277a8:	beq	2793c <__assert_fail@plt+0x15aa8>
   277ac:	ldr	r1, [r8, #56]	; 0x38
   277b0:	ldr	r7, [sp, #24]
   277b4:	ldr	lr, [sp, #44]	; 0x2c
   277b8:	mov	sl, #0
   277bc:	str	r1, [r0]
   277c0:	mov	r1, #0
   277c4:	str	r1, [r8, #64]	; 0x40
   277c8:	str	r0, [r8, #56]	; 0x38
   277cc:	b	26540 <__assert_fail@plt+0x146ac>
   277d0:	mov	r0, #996	; 0x3e4
   277d4:	bl	33c98 <__assert_fail@plt+0x21e04>
   277d8:	ldr	lr, [sp, #44]	; 0x2c
   277dc:	cmp	r0, #0
   277e0:	beq	265d4 <__assert_fail@plt+0x14740>
   277e4:	ldr	r1, [r8, #56]	; 0x38
   277e8:	str	r1, [r0]
   277ec:	mov	r1, #0
   277f0:	str	r1, [r8, #64]	; 0x40
   277f4:	str	r0, [r8, #56]	; 0x38
   277f8:	b	2658c <__assert_fail@plt+0x146f8>
   277fc:	mov	r0, #996	; 0x3e4
   27800:	bl	33c98 <__assert_fail@plt+0x21e04>
   27804:	cmp	r0, #0
   27808:	beq	279fc <__assert_fail@plt+0x15b68>
   2780c:	ldr	r1, [r8, #56]	; 0x38
   27810:	ldr	r7, [sp, #24]
   27814:	ldr	lr, [sp, #44]	; 0x2c
   27818:	mov	sl, #0
   2781c:	str	r1, [r0]
   27820:	mov	r1, #0
   27824:	str	r1, [r8, #64]	; 0x40
   27828:	str	r0, [r8, #56]	; 0x38
   2782c:	b	25a24 <__assert_fail@plt+0x13b90>
   27830:	mov	r0, #996	; 0x3e4
   27834:	bl	33c98 <__assert_fail@plt+0x21e04>
   27838:	cmp	r0, #0
   2783c:	beq	27a08 <__assert_fail@plt+0x15b74>
   27840:	ldr	r1, [r8, #56]	; 0x38
   27844:	ldr	r7, [sp, #24]
   27848:	ldr	lr, [sp, #44]	; 0x2c
   2784c:	mov	sl, #0
   27850:	str	r1, [r0]
   27854:	mov	r1, #0
   27858:	str	r1, [r8, #64]	; 0x40
   2785c:	str	r0, [r8, #56]	; 0x38
   27860:	b	264e8 <__assert_fail@plt+0x14654>
   27864:	mov	r0, #996	; 0x3e4
   27868:	bl	33c98 <__assert_fail@plt+0x21e04>
   2786c:	cmp	r0, #0
   27870:	beq	27894 <__assert_fail@plt+0x15a00>
   27874:	ldr	r1, [r8, #56]	; 0x38
   27878:	ldr	r7, [sp, #24]
   2787c:	ldr	lr, [sp, #44]	; 0x2c
   27880:	str	r1, [r0]
   27884:	mov	r1, #0
   27888:	str	r1, [r8, #64]	; 0x40
   2788c:	str	r0, [r8, #56]	; 0x38
   27890:	b	265f8 <__assert_fail@plt+0x14764>
   27894:	mov	r0, #12
   27898:	ldr	r1, [sp, #16]
   2789c:	mov	sl, #0
   278a0:	str	r0, [r1]
   278a4:	b	27438 <__assert_fail@plt+0x155a4>
   278a8:	mov	r4, #0
   278ac:	mov	r9, #0
   278b0:	b	278bc <__assert_fail@plt+0x15a28>
   278b4:	mov	r9, #4
   278b8:	mov	r4, #128	; 0x80
   278bc:	bl	11c54 <__ctype_b_loc@plt>
   278c0:	ldr	r0, [r0]
   278c4:	ldr	r7, [sp, #24]
   278c8:	ldr	lr, [sp, #44]	; 0x2c
   278cc:	mov	r1, #1
   278d0:	mov	sl, #0
   278d4:	add	r5, r0, r4, lsl #1
   278d8:	add	r0, r8, r9, lsl #2
   278dc:	mov	ip, r6
   278e0:	mov	r3, #0
   278e4:	add	r2, r0, #96	; 0x60
   278e8:	mov	r0, r5
   278ec:	add	r6, r4, r3
   278f0:	cmp	r6, #95	; 0x5f
   278f4:	beq	27904 <__assert_fail@plt+0x15a70>
   278f8:	ldrh	r6, [r0]
   278fc:	ands	r6, r6, #8
   27900:	beq	27910 <__assert_fail@plt+0x15a7c>
   27904:	ldr	r6, [r2]
   27908:	orr	r6, r6, r1, lsl r3
   2790c:	str	r6, [r2]
   27910:	add	r3, r3, #1
   27914:	add	r0, r0, #2
   27918:	cmp	r3, #32
   2791c:	bne	278ec <__assert_fail@plt+0x15a58>
   27920:	add	r9, r9, #1
   27924:	add	r5, r5, #64	; 0x40
   27928:	add	r4, r4, #32
   2792c:	mov	r6, ip
   27930:	cmp	r9, #8
   27934:	bne	278d8 <__assert_fail@plt+0x15a44>
   27938:	b	259f4 <__assert_fail@plt+0x13b60>
   2793c:	ldr	r7, [sp, #24]
   27940:	ldr	lr, [sp, #44]	; 0x2c
   27944:	mov	r6, #0
   27948:	mov	sl, #0
   2794c:	b	2657c <__assert_fail@plt+0x146e8>
   27950:	cmp	r9, #0
   27954:	beq	279f4 <__assert_fail@plt+0x15b60>
   27958:	movw	r5, #255	; 0xff
   2795c:	movt	r5, #4
   27960:	mov	r6, r9
   27964:	ldr	r9, [r9, #4]
   27968:	cmp	r9, #0
   2796c:	bne	27960 <__assert_fail@plt+0x15acc>
   27970:	ldr	r9, [r6, #8]
   27974:	cmp	r9, #0
   27978:	bne	27960 <__assert_fail@plt+0x15acc>
   2797c:	ldr	r0, [r6, #24]
   27980:	and	r0, r0, r5
   27984:	cmp	r0, #3
   27988:	beq	279c0 <__assert_fail@plt+0x15b2c>
   2798c:	cmp	r0, #6
   27990:	bne	279c8 <__assert_fail@plt+0x15b34>
   27994:	ldr	r4, [r6, #20]
   27998:	ldr	r0, [r4]
   2799c:	bl	17754 <__assert_fail@plt+0x58c0>
   279a0:	ldr	r0, [r4, #4]
   279a4:	bl	17754 <__assert_fail@plt+0x58c0>
   279a8:	ldr	r0, [r4, #8]
   279ac:	bl	17754 <__assert_fail@plt+0x58c0>
   279b0:	ldr	r0, [r4, #12]
   279b4:	bl	17754 <__assert_fail@plt+0x58c0>
   279b8:	mov	r0, r4
   279bc:	b	279c4 <__assert_fail@plt+0x15b30>
   279c0:	ldr	r0, [r6, #20]
   279c4:	bl	17754 <__assert_fail@plt+0x58c0>
   279c8:	ldr	r0, [r6]
   279cc:	cmp	r0, #0
   279d0:	beq	279f4 <__assert_fail@plt+0x15b60>
   279d4:	ldr	r9, [r0, #8]
   279d8:	cmp	r9, r6
   279dc:	mov	r6, r0
   279e0:	beq	2797c <__assert_fail@plt+0x15ae8>
   279e4:	cmp	r9, #0
   279e8:	mov	r6, r0
   279ec:	beq	2797c <__assert_fail@plt+0x15ae8>
   279f0:	b	27960 <__assert_fail@plt+0x15acc>
   279f4:	mov	r0, #8
   279f8:	b	27898 <__assert_fail@plt+0x15a04>
   279fc:	mov	r5, #0
   27a00:	mov	r0, #9
   27a04:	b	27a10 <__assert_fail@plt+0x15b7c>
   27a08:	mov	r5, #0
   27a0c:	mov	r0, #10
   27a10:	ldr	r7, [sp, #24]
   27a14:	ldr	lr, [sp, #44]	; 0x2c
   27a18:	mov	sl, #0
   27a1c:	b	26528 <__assert_fail@plt+0x14694>
   27a20:	mov	r0, #996	; 0x3e4
   27a24:	bl	33c98 <__assert_fail@plt+0x21e04>
   27a28:	cmp	r0, #0
   27a2c:	beq	27a54 <__assert_fail@plt+0x15bc0>
   27a30:	ldr	r1, [r8, #56]	; 0x38
   27a34:	str	r1, [r0]
   27a38:	mov	r1, #0
   27a3c:	str	r1, [r8, #64]	; 0x40
   27a40:	str	r0, [r8, #56]	; 0x38
   27a44:	b	2754c <__assert_fail@plt+0x156b8>
   27a48:	ldr	r6, [sp, #40]	; 0x28
   27a4c:	ldr	r4, [sp, #52]	; 0x34
   27a50:	ldr	sl, [sp, #48]	; 0x30
   27a54:	mov	r0, #12
   27a58:	ldr	r1, [sp, #16]
   27a5c:	str	r0, [r1]
   27a60:	b	27690 <__assert_fail@plt+0x157fc>
   27a64:	mov	r0, r6
   27a68:	bl	17754 <__assert_fail@plt+0x58c0>
   27a6c:	mov	r0, r9
   27a70:	bl	17754 <__assert_fail@plt+0x58c0>
   27a74:	mov	r9, #12
   27a78:	b	2767c <__assert_fail@plt+0x157e8>
   27a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a80:	add	fp, sp, #28
   27a84:	sub	sp, sp, #12
   27a88:	mov	r9, r1
   27a8c:	mov	r6, r0
   27a90:	mov	r4, #0
   27a94:	mov	r0, #32
   27a98:	mov	r1, #1
   27a9c:	mov	sl, r3
   27aa0:	mov	r5, r2
   27aa4:	str	r4, [sp, #8]
   27aa8:	bl	33c44 <__assert_fail@plt+0x21db0>
   27aac:	ldr	r1, [fp, #12]
   27ab0:	cmp	r0, #0
   27ab4:	beq	27e04 <__assert_fail@plt+0x15f70>
   27ab8:	mov	r7, r0
   27abc:	mov	r0, #40	; 0x28
   27ac0:	mov	r1, #1
   27ac4:	bl	33c44 <__assert_fail@plt+0x21db0>
   27ac8:	cmp	r0, #0
   27acc:	beq	27d24 <__assert_fail@plt+0x15e90>
   27ad0:	mov	r8, r0
   27ad4:	ldrb	r0, [r0, #16]
   27ad8:	ldr	r1, [fp, #8]
   27adc:	mov	r4, #0
   27ae0:	add	r3, sp, #8
   27ae4:	str	r5, [sp]
   27ae8:	mov	r2, r8
   27aec:	str	r4, [sp, #4]
   27af0:	and	r0, r0, #254	; 0xfe
   27af4:	orr	r0, r0, r1
   27af8:	mov	r1, r7
   27afc:	strb	r0, [r8, #16]
   27b00:	mov	r0, r9
   27b04:	bl	28274 <__assert_fail@plt+0x163e0>
   27b08:	cmp	r0, #0
   27b0c:	bne	27d40 <__assert_fail@plt+0x15eac>
   27b10:	ldrb	r0, [sl]
   27b14:	cmp	r0, #0
   27b18:	beq	27b44 <__assert_fail@plt+0x15cb0>
   27b1c:	add	r1, sl, #1
   27b20:	mov	r2, #1
   27b24:	ubfx	r3, r0, #5, #3
   27b28:	and	r0, r0, #31
   27b2c:	ldr	r5, [r7, r3, lsl #2]
   27b30:	orr	r0, r5, r2, lsl r0
   27b34:	str	r0, [r7, r3, lsl #2]
   27b38:	ldrb	r0, [r1], #1
   27b3c:	cmp	r0, #0
   27b40:	bne	27b24 <__assert_fail@plt+0x15c90>
   27b44:	ldr	r0, [fp, #8]
   27b48:	cmp	r0, #0
   27b4c:	beq	27b6c <__assert_fail@plt+0x15cd8>
   27b50:	vld1.32	{d16-d17}, [r7]
   27b54:	mov	r0, r7
   27b58:	vmvn	q8, q8
   27b5c:	vst1.32	{d16-d17}, [r0]!
   27b60:	vld1.32	{d16-d17}, [r0]
   27b64:	vmvn	q8, q8
   27b68:	vst1.32	{d16-d17}, [r0]
   27b6c:	ldr	r0, [r6, #92]	; 0x5c
   27b70:	cmp	r0, #2
   27b74:	blt	27bf0 <__assert_fail@plt+0x15d5c>
   27b78:	ldm	r7, {r0, r1, r2, ip}
   27b7c:	ldr	r5, [r6, #60]	; 0x3c
   27b80:	ldr	r3, [r5]
   27b84:	and	r0, r0, r3
   27b88:	str	r0, [r7]
   27b8c:	ldr	r0, [r5, #4]
   27b90:	and	r0, r1, r0
   27b94:	str	r0, [r7, #4]
   27b98:	ldr	r0, [r5, #8]
   27b9c:	and	r0, r2, r0
   27ba0:	str	r0, [r7, #8]
   27ba4:	ldr	r0, [r5, #12]
   27ba8:	and	r0, ip, r0
   27bac:	str	r0, [r7, #12]
   27bb0:	ldr	r0, [r7, #16]
   27bb4:	ldr	r1, [r5, #16]
   27bb8:	and	r0, r0, r1
   27bbc:	str	r0, [r7, #16]
   27bc0:	ldr	r0, [r5, #20]
   27bc4:	ldr	r1, [r7, #20]
   27bc8:	and	r0, r1, r0
   27bcc:	str	r0, [r7, #20]
   27bd0:	ldr	r0, [r5, #24]
   27bd4:	ldr	r1, [r7, #24]
   27bd8:	and	r0, r1, r0
   27bdc:	str	r0, [r7, #24]
   27be0:	ldr	r0, [r5, #28]
   27be4:	ldr	r1, [r7, #28]
   27be8:	and	r0, r1, r0
   27bec:	str	r0, [r7, #28]
   27bf0:	ldr	r1, [r6, #64]	; 0x40
   27bf4:	cmp	r1, #31
   27bf8:	beq	27d80 <__assert_fail@plt+0x15eec>
   27bfc:	ldr	r0, [r6, #56]	; 0x38
   27c00:	add	r2, r1, #1
   27c04:	add	r0, r0, r1, lsl #5
   27c08:	mov	r1, #3
   27c0c:	vmov.i32	q8, #0	; 0x00000000
   27c10:	str	r2, [r6, #64]	; 0x40
   27c14:	mov	r2, #0
   27c18:	add	r5, r0, #4
   27c1c:	str	r2, [r0, #20]
   27c20:	str	r7, [r0, #24]
   27c24:	str	r1, [r0, #28]
   27c28:	mov	r0, #28
   27c2c:	mov	r1, r5
   27c30:	vst1.32	{d16-d17}, [r1], r0
   27c34:	mvn	r0, #0
   27c38:	str	r0, [r1]
   27c3c:	ldr	r0, [r6, #92]	; 0x5c
   27c40:	cmp	r0, #2
   27c44:	blt	27cec <__assert_fail@plt+0x15e58>
   27c48:	ldrb	r0, [r6, #88]	; 0x58
   27c4c:	orr	r0, r0, #2
   27c50:	strb	r0, [r6, #88]	; 0x58
   27c54:	ldr	r1, [r6, #64]	; 0x40
   27c58:	cmp	r1, #31
   27c5c:	beq	27da8 <__assert_fail@plt+0x15f14>
   27c60:	ldr	r0, [r6, #56]	; 0x38
   27c64:	add	r0, r0, r1, lsl #5
   27c68:	add	r2, r1, #1
   27c6c:	mov	r1, #6
   27c70:	mov	r4, #0
   27c74:	vmov.i32	q8, #0	; 0x00000000
   27c78:	add	r7, r0, #4
   27c7c:	str	r2, [r6, #64]	; 0x40
   27c80:	str	r4, [r0, #20]
   27c84:	str	r8, [r0, #24]
   27c88:	str	r1, [r0, #28]
   27c8c:	mov	r0, #28
   27c90:	mov	r1, r7
   27c94:	vst1.32	{d16-d17}, [r1], r0
   27c98:	mvn	r0, #0
   27c9c:	str	r0, [r1]
   27ca0:	ldr	r1, [r6, #64]	; 0x40
   27ca4:	cmp	r1, #31
   27ca8:	beq	27e10 <__assert_fail@plt+0x15f7c>
   27cac:	ldr	r0, [r6, #56]	; 0x38
   27cb0:	add	r2, r1, #1
   27cb4:	add	r4, r0, r1, lsl #5
   27cb8:	mov	r0, #0
   27cbc:	mov	r1, #10
   27cc0:	str	r2, [r6, #64]	; 0x40
   27cc4:	str	r0, [r4, #4]!
   27cc8:	mvn	r2, #0
   27ccc:	add	r3, r4, #20
   27cd0:	stmib	r4, {r5, r7}
   27cd4:	str	r0, [r4, #12]
   27cd8:	str	r0, [r4, #16]
   27cdc:	stm	r3, {r0, r1, r2}
   27ce0:	str	r4, [r5]
   27ce4:	str	r4, [r7]
   27ce8:	b	27d18 <__assert_fail@plt+0x15e84>
   27cec:	ldr	r0, [r8]
   27cf0:	bl	17754 <__assert_fail@plt+0x58c0>
   27cf4:	ldr	r0, [r8, #4]
   27cf8:	bl	17754 <__assert_fail@plt+0x58c0>
   27cfc:	ldr	r0, [r8, #8]
   27d00:	bl	17754 <__assert_fail@plt+0x58c0>
   27d04:	ldr	r0, [r8, #12]
   27d08:	bl	17754 <__assert_fail@plt+0x58c0>
   27d0c:	mov	r0, r8
   27d10:	bl	17754 <__assert_fail@plt+0x58c0>
   27d14:	mov	r4, r5
   27d18:	mov	r0, r4
   27d1c:	sub	sp, fp, #28
   27d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d24:	mov	r0, r7
   27d28:	bl	17754 <__assert_fail@plt+0x58c0>
   27d2c:	ldr	r1, [fp, #12]
   27d30:	mov	r0, #12
   27d34:	mov	r4, #0
   27d38:	str	r0, [r1]
   27d3c:	b	27d18 <__assert_fail@plt+0x15e84>
   27d40:	mov	r5, r0
   27d44:	mov	r0, r7
   27d48:	bl	17754 <__assert_fail@plt+0x58c0>
   27d4c:	ldr	r0, [r8]
   27d50:	bl	17754 <__assert_fail@plt+0x58c0>
   27d54:	ldr	r0, [r8, #4]
   27d58:	bl	17754 <__assert_fail@plt+0x58c0>
   27d5c:	ldr	r0, [r8, #8]
   27d60:	bl	17754 <__assert_fail@plt+0x58c0>
   27d64:	ldr	r0, [r8, #12]
   27d68:	bl	17754 <__assert_fail@plt+0x58c0>
   27d6c:	mov	r0, r8
   27d70:	bl	17754 <__assert_fail@plt+0x58c0>
   27d74:	ldr	r0, [fp, #12]
   27d78:	str	r5, [r0]
   27d7c:	b	27d18 <__assert_fail@plt+0x15e84>
   27d80:	mov	r0, #996	; 0x3e4
   27d84:	bl	33c98 <__assert_fail@plt+0x21e04>
   27d88:	cmp	r0, #0
   27d8c:	beq	27dd0 <__assert_fail@plt+0x15f3c>
   27d90:	ldr	r1, [r6, #56]	; 0x38
   27d94:	str	r1, [r0]
   27d98:	mov	r1, #0
   27d9c:	str	r1, [r6, #64]	; 0x40
   27da0:	str	r0, [r6, #56]	; 0x38
   27da4:	b	27c00 <__assert_fail@plt+0x15d6c>
   27da8:	mov	r0, #996	; 0x3e4
   27dac:	bl	33c98 <__assert_fail@plt+0x21e04>
   27db0:	cmp	r0, #0
   27db4:	beq	27dd0 <__assert_fail@plt+0x15f3c>
   27db8:	ldr	r1, [r6, #56]	; 0x38
   27dbc:	str	r1, [r0]
   27dc0:	mov	r1, #0
   27dc4:	str	r1, [r6, #64]	; 0x40
   27dc8:	str	r0, [r6, #56]	; 0x38
   27dcc:	b	27c64 <__assert_fail@plt+0x15dd0>
   27dd0:	mov	r0, r7
   27dd4:	bl	17754 <__assert_fail@plt+0x58c0>
   27dd8:	ldr	r0, [r8]
   27ddc:	bl	17754 <__assert_fail@plt+0x58c0>
   27de0:	ldr	r0, [r8, #4]
   27de4:	bl	17754 <__assert_fail@plt+0x58c0>
   27de8:	ldr	r0, [r8, #8]
   27dec:	bl	17754 <__assert_fail@plt+0x58c0>
   27df0:	ldr	r0, [r8, #12]
   27df4:	bl	17754 <__assert_fail@plt+0x58c0>
   27df8:	mov	r0, r8
   27dfc:	bl	17754 <__assert_fail@plt+0x58c0>
   27e00:	ldr	r1, [fp, #12]
   27e04:	mov	r0, #12
   27e08:	str	r0, [r1]
   27e0c:	b	27d18 <__assert_fail@plt+0x15e84>
   27e10:	mov	r0, #996	; 0x3e4
   27e14:	bl	33c98 <__assert_fail@plt+0x21e04>
   27e18:	cmp	r0, #0
   27e1c:	beq	27d18 <__assert_fail@plt+0x15e84>
   27e20:	ldr	r1, [r6, #56]	; 0x38
   27e24:	str	r1, [r0]
   27e28:	mov	r1, #0
   27e2c:	str	r1, [r6, #64]	; 0x40
   27e30:	str	r0, [r6, #56]	; 0x38
   27e34:	b	27cb0 <__assert_fail@plt+0x15e1c>
   27e38:	push	{fp, lr}
   27e3c:	mov	fp, sp
   27e40:	ldr	ip, [r1, #40]	; 0x28
   27e44:	ldr	r3, [r1, #56]	; 0x38
   27e48:	cmp	r3, ip
   27e4c:	ble	27ecc <__assert_fail@plt+0x16038>
   27e50:	ldr	r3, [r1, #4]
   27e54:	ldrb	lr, [r3, ip]
   27e58:	strb	lr, [r0]
   27e5c:	ldr	r3, [r1, #80]	; 0x50
   27e60:	cmp	r3, #2
   27e64:	blt	27e88 <__assert_fail@plt+0x15ff4>
   27e68:	ldr	r3, [r1, #28]
   27e6c:	ldr	ip, [r1, #40]	; 0x28
   27e70:	cmp	ip, r3
   27e74:	beq	27e88 <__assert_fail@plt+0x15ff4>
   27e78:	ldr	r3, [r1, #8]
   27e7c:	ldr	r3, [r3, ip, lsl #2]
   27e80:	cmn	r3, #1
   27e84:	beq	27f7c <__assert_fail@plt+0x160e8>
   27e88:	tst	r2, #1
   27e8c:	beq	27ee0 <__assert_fail@plt+0x1604c>
   27e90:	cmp	lr, #92	; 0x5c
   27e94:	bne	27ee0 <__assert_fail@plt+0x1604c>
   27e98:	ldr	r2, [r1, #40]	; 0x28
   27e9c:	ldr	r3, [r1, #48]	; 0x30
   27ea0:	add	r2, r2, #1
   27ea4:	cmp	r2, r3
   27ea8:	bge	27f7c <__assert_fail@plt+0x160e8>
   27eac:	str	r2, [r1, #40]	; 0x28
   27eb0:	ldr	r1, [r1, #4]
   27eb4:	ldrb	r2, [r1, r2]
   27eb8:	mov	r1, #1
   27ebc:	strb	r1, [r0, #4]
   27ec0:	strb	r2, [r0]
   27ec4:	mov	r0, r1
   27ec8:	pop	{fp, pc}
   27ecc:	mov	r1, #2
   27ed0:	strb	r1, [r0, #4]
   27ed4:	mov	r1, #0
   27ed8:	mov	r0, r1
   27edc:	pop	{fp, pc}
   27ee0:	cmp	lr, #92	; 0x5c
   27ee4:	bgt	27f38 <__assert_fail@plt+0x160a4>
   27ee8:	cmp	lr, #45	; 0x2d
   27eec:	beq	27f50 <__assert_fail@plt+0x160bc>
   27ef0:	cmp	lr, #91	; 0x5b
   27ef4:	bne	27f7c <__assert_fail@plt+0x160e8>
   27ef8:	ldr	r3, [r1, #40]	; 0x28
   27efc:	ldr	ip, [r1, #48]	; 0x30
   27f00:	add	r3, r3, #1
   27f04:	cmp	r3, ip
   27f08:	bge	27f6c <__assert_fail@plt+0x160d8>
   27f0c:	ldr	r1, [r1, #4]
   27f10:	ldrb	r1, [r1, r3]
   27f14:	cmp	r1, #61	; 0x3d
   27f18:	strb	r1, [r0]
   27f1c:	beq	27f8c <__assert_fail@plt+0x160f8>
   27f20:	cmp	r1, #58	; 0x3a
   27f24:	beq	27f94 <__assert_fail@plt+0x16100>
   27f28:	cmp	r1, #46	; 0x2e
   27f2c:	bne	27f74 <__assert_fail@plt+0x160e0>
   27f30:	mov	r1, #26
   27f34:	b	27fa0 <__assert_fail@plt+0x1610c>
   27f38:	cmp	lr, #93	; 0x5d
   27f3c:	beq	27f58 <__assert_fail@plt+0x160c4>
   27f40:	cmp	lr, #94	; 0x5e
   27f44:	bne	27f7c <__assert_fail@plt+0x160e8>
   27f48:	mov	r1, #25
   27f4c:	b	27f5c <__assert_fail@plt+0x160c8>
   27f50:	mov	r1, #22
   27f54:	b	27f5c <__assert_fail@plt+0x160c8>
   27f58:	mov	r1, #21
   27f5c:	strb	r1, [r0, #4]
   27f60:	mov	r1, #1
   27f64:	mov	r0, r1
   27f68:	pop	{fp, pc}
   27f6c:	mov	r1, #0
   27f70:	strb	r1, [r0]
   27f74:	mov	r1, #91	; 0x5b
   27f78:	strb	r1, [r0]
   27f7c:	mov	r1, #1
   27f80:	strb	r1, [r0, #4]
   27f84:	mov	r0, r1
   27f88:	pop	{fp, pc}
   27f8c:	mov	r1, #28
   27f90:	b	27fa0 <__assert_fail@plt+0x1610c>
   27f94:	tst	r2, #4
   27f98:	beq	27f74 <__assert_fail@plt+0x160e0>
   27f9c:	mov	r1, #30
   27fa0:	strb	r1, [r0, #4]
   27fa4:	mov	r1, #2
   27fa8:	mov	r0, r1
   27fac:	pop	{fp, pc}
   27fb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   27fb4:	add	fp, sp, #24
   27fb8:	sub	sp, sp, #8
   27fbc:	mov	r5, r2
   27fc0:	ldr	r2, [r1, #80]	; 0x50
   27fc4:	mov	r9, r0
   27fc8:	ldr	r0, [r1, #40]	; 0x28
   27fcc:	cmp	r2, #1
   27fd0:	beq	28040 <__assert_fail@plt+0x161ac>
   27fd4:	ldr	r4, [r1, #28]
   27fd8:	add	r2, r0, #1
   27fdc:	cmp	r2, r4
   27fe0:	bge	28040 <__assert_fail@plt+0x161ac>
   27fe4:	ldr	ip, [r1, #8]
   27fe8:	mov	r2, #1
   27fec:	add	r6, ip, r0, lsl #2
   27ff0:	ldr	r7, [r6, r2, lsl #2]
   27ff4:	cmn	r7, #1
   27ff8:	bne	28010 <__assert_fail@plt+0x1617c>
   27ffc:	add	r2, r2, #1
   28000:	add	r7, r0, r2
   28004:	cmp	r7, r4
   28008:	blt	27ff0 <__assert_fail@plt+0x1615c>
   2800c:	b	28018 <__assert_fail@plt+0x16184>
   28010:	cmp	r2, #2
   28014:	bcc	28040 <__assert_fail@plt+0x161ac>
   28018:	mov	r3, #1
   2801c:	str	r3, [r9]
   28020:	ldr	r0, [ip, r0, lsl #2]
   28024:	str	r0, [r9, #4]
   28028:	ldr	r0, [r1, #40]	; 0x28
   2802c:	add	r0, r0, r2
   28030:	str	r0, [r1, #40]	; 0x28
   28034:	mov	r0, #0
   28038:	sub	sp, fp, #24
   2803c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28040:	add	r2, r0, r3
   28044:	str	r2, [r1, #40]	; 0x28
   28048:	ldrb	r6, [r5, #4]
   2804c:	sub	r0, r6, #22
   28050:	cmp	r0, #8
   28054:	bhi	2825c <__assert_fail@plt+0x163c8>
   28058:	add	r3, pc, #0
   2805c:	ldr	pc, [r3, r0, lsl #2]
   28060:	andeq	r8, r2, r4, lsr r2
   28064:	andeq	r8, r2, ip, asr r2
   28068:	andeq	r8, r2, ip, asr r2
   2806c:	andeq	r8, r2, ip, asr r2
   28070:	andeq	r8, r2, r4, lsl #1
   28074:	andeq	r8, r2, ip, asr r2
   28078:	andeq	r8, r2, r4, lsl #1
   2807c:	andeq	r8, r2, ip, asr r2
   28080:	andeq	r8, r2, r4, lsl #1
   28084:	ldr	r3, [r1, #56]	; 0x38
   28088:	mov	r0, #7
   2808c:	cmp	r3, r2
   28090:	ble	2826c <__assert_fail@plt+0x163d8>
   28094:	ldrb	r3, [r5]
   28098:	mov	r2, #0
   2809c:	b	280a8 <__assert_fail@plt+0x16214>
   280a0:	ldrb	r6, [r5, #4]
   280a4:	add	r2, r2, #1
   280a8:	uxtb	r7, r6
   280ac:	cmp	r7, #30
   280b0:	bne	280c0 <__assert_fail@plt+0x1622c>
   280b4:	ldrb	r7, [r1, #75]	; 0x4b
   280b8:	cmp	r7, #0
   280bc:	bne	28110 <__assert_fail@plt+0x1627c>
   280c0:	ldr	r4, [r1, #40]	; 0x28
   280c4:	ldr	r7, [r1, #4]
   280c8:	add	r6, r4, #1
   280cc:	str	r6, [r1, #40]	; 0x28
   280d0:	ldrb	r4, [r7, r4]
   280d4:	ldr	r7, [r1, #56]	; 0x38
   280d8:	cmp	r7, r6
   280dc:	ble	2826c <__assert_fail@plt+0x163d8>
   280e0:	uxtb	r7, r4
   280e4:	cmp	r7, r3
   280e8:	bne	280fc <__assert_fail@plt+0x16268>
   280ec:	ldr	r7, [r1, #4]
   280f0:	ldrb	r7, [r7, r6]
   280f4:	cmp	r7, #93	; 0x5d
   280f8:	beq	281e4 <__assert_fail@plt+0x16350>
   280fc:	ldr	r7, [r9, #4]
   28100:	cmp	r2, #30
   28104:	strb	r4, [r7, r2]
   28108:	bls	280a0 <__assert_fail@plt+0x1620c>
   2810c:	b	2826c <__assert_fail@plt+0x163d8>
   28110:	ldrb	r7, [r1, #76]	; 0x4c
   28114:	cmp	r7, #0
   28118:	beq	281b0 <__assert_fail@plt+0x1631c>
   2811c:	ldr	lr, [r1, #28]
   28120:	ldr	ip, [r1, #40]	; 0x28
   28124:	cmp	ip, lr
   28128:	beq	2813c <__assert_fail@plt+0x162a8>
   2812c:	ldr	r4, [r1, #8]
   28130:	ldr	r4, [r4, ip, lsl #2]
   28134:	cmn	r4, #1
   28138:	beq	281d0 <__assert_fail@plt+0x1633c>
   2813c:	ldr	r6, [r1, #12]
   28140:	ldr	r7, [r1, #24]
   28144:	ldr	r4, [r1]
   28148:	ldr	r6, [r6, ip, lsl #2]
   2814c:	add	r6, r7, r6
   28150:	add	r4, r4, r6
   28154:	ldrsb	r4, [r4]
   28158:	cmn	r4, #1
   2815c:	ble	281d0 <__assert_fail@plt+0x1633c>
   28160:	ldr	r7, [r1, #80]	; 0x50
   28164:	mov	r6, #1
   28168:	cmp	r7, #1
   2816c:	beq	281a4 <__assert_fail@plt+0x16310>
   28170:	add	r7, ip, #1
   28174:	cmp	r7, lr
   28178:	bge	281a4 <__assert_fail@plt+0x16310>
   2817c:	ldr	r6, [r1, #8]
   28180:	add	r8, r6, ip, lsl #2
   28184:	mov	r6, #1
   28188:	ldr	r7, [r8, r6, lsl #2]
   2818c:	cmn	r7, #1
   28190:	bne	281a4 <__assert_fail@plt+0x16310>
   28194:	add	r6, r6, #1
   28198:	add	r7, ip, r6
   2819c:	cmp	r7, lr
   281a0:	blt	28188 <__assert_fail@plt+0x162f4>
   281a4:	add	r6, r6, ip
   281a8:	str	r6, [r1, #40]	; 0x28
   281ac:	b	280d4 <__assert_fail@plt+0x16240>
   281b0:	ldr	r7, [r1, #40]	; 0x28
   281b4:	ldr	r4, [r1, #24]
   281b8:	ldr	ip, [r1]
   281bc:	add	r6, r7, #1
   281c0:	add	r7, r7, r4
   281c4:	str	r6, [r1, #40]	; 0x28
   281c8:	ldrb	r4, [ip, r7]
   281cc:	b	280d4 <__assert_fail@plt+0x16240>
   281d0:	add	r6, ip, #1
   281d4:	str	r6, [r1, #40]	; 0x28
   281d8:	ldr	r7, [r1, #4]
   281dc:	ldrb	r4, [r7, ip]
   281e0:	b	280d4 <__assert_fail@plt+0x16240>
   281e4:	add	r0, r6, #1
   281e8:	str	r0, [r1, #40]	; 0x28
   281ec:	mov	r0, #0
   281f0:	ldr	r1, [r9, #4]
   281f4:	strb	r0, [r1, r2]
   281f8:	ldrb	r1, [r5, #4]
   281fc:	cmp	r1, #30
   28200:	beq	2821c <__assert_fail@plt+0x16388>
   28204:	cmp	r1, #28
   28208:	beq	28224 <__assert_fail@plt+0x16390>
   2820c:	cmp	r1, #26
   28210:	bne	2826c <__assert_fail@plt+0x163d8>
   28214:	mov	r1, #3
   28218:	b	28228 <__assert_fail@plt+0x16394>
   2821c:	mov	r1, #4
   28220:	b	28228 <__assert_fail@plt+0x16394>
   28224:	mov	r1, #2
   28228:	str	r1, [r9]
   2822c:	sub	sp, fp, #24
   28230:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28234:	ldr	r0, [fp, #12]
   28238:	cmp	r0, #0
   2823c:	bne	2825c <__assert_fail@plt+0x163c8>
   28240:	ldr	r2, [fp, #8]
   28244:	mov	r0, sp
   28248:	bl	27e38 <__assert_fail@plt+0x15fa4>
   2824c:	ldrb	r1, [sp, #4]
   28250:	mov	r0, #11
   28254:	cmp	r1, #21
   28258:	bne	2826c <__assert_fail@plt+0x163d8>
   2825c:	mov	r0, #0
   28260:	str	r0, [r9]
   28264:	ldrb	r1, [r5]
   28268:	strb	r1, [r9, #4]
   2826c:	sub	sp, fp, #24
   28270:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28274:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28278:	add	fp, sp, #24
   2827c:	mov	r8, r0
   28280:	ldrb	r0, [fp, #14]
   28284:	ldr	r6, [fp, #8]
   28288:	mov	r5, r3
   2828c:	mov	r7, r2
   28290:	mov	r4, r1
   28294:	tst	r0, #64	; 0x40
   28298:	beq	282d4 <__assert_fail@plt+0x16440>
   2829c:	movw	r1, #29346	; 0x72a2
   282a0:	mov	r0, r6
   282a4:	movt	r1, #3
   282a8:	bl	11a14 <strcmp@plt>
   282ac:	cmp	r0, #0
   282b0:	beq	282cc <__assert_fail@plt+0x16438>
   282b4:	movw	r1, #29352	; 0x72a8
   282b8:	mov	r0, r6
   282bc:	movt	r1, #3
   282c0:	bl	11a14 <strcmp@plt>
   282c4:	cmp	r0, #0
   282c8:	bne	282d4 <__assert_fail@plt+0x16440>
   282cc:	movw	r6, #29358	; 0x72ae
   282d0:	movt	r6, #3
   282d4:	ldr	r0, [r5]
   282d8:	ldr	r1, [r7, #36]	; 0x24
   282dc:	cmp	r0, r1
   282e0:	beq	28800 <__assert_fail@plt+0x1696c>
   282e4:	mov	r0, r6
   282e8:	bl	119cc <wctype@plt>
   282ec:	ldr	r2, [r7, #36]	; 0x24
   282f0:	ldr	r1, [r7, #12]
   282f4:	add	r3, r2, #1
   282f8:	str	r3, [r7, #36]	; 0x24
   282fc:	str	r0, [r1, r2, lsl #2]
   28300:	movw	r1, #29334	; 0x7296
   28304:	mov	r0, r6
   28308:	movt	r1, #3
   2830c:	bl	11a14 <strcmp@plt>
   28310:	cmp	r0, #0
   28314:	beq	28478 <__assert_fail@plt+0x165e4>
   28318:	movw	r1, #29364	; 0x72b4
   2831c:	mov	r0, r6
   28320:	movt	r1, #3
   28324:	bl	11a14 <strcmp@plt>
   28328:	cmp	r0, #0
   2832c:	beq	284cc <__assert_fail@plt+0x16638>
   28330:	movw	r1, #29352	; 0x72a8
   28334:	mov	r0, r6
   28338:	movt	r1, #3
   2833c:	bl	11a14 <strcmp@plt>
   28340:	cmp	r0, #0
   28344:	beq	28520 <__assert_fail@plt+0x1668c>
   28348:	movw	r1, #29340	; 0x729c
   2834c:	mov	r0, r6
   28350:	movt	r1, #3
   28354:	bl	11a14 <strcmp@plt>
   28358:	cmp	r0, #0
   2835c:	beq	28574 <__assert_fail@plt+0x166e0>
   28360:	movw	r1, #29358	; 0x72ae
   28364:	mov	r0, r6
   28368:	movt	r1, #3
   2836c:	bl	11a14 <strcmp@plt>
   28370:	cmp	r0, #0
   28374:	beq	285c8 <__assert_fail@plt+0x16734>
   28378:	movw	r1, #29395	; 0x72d3
   2837c:	mov	r0, r6
   28380:	movt	r1, #3
   28384:	bl	11a14 <strcmp@plt>
   28388:	cmp	r0, #0
   2838c:	beq	2861c <__assert_fail@plt+0x16788>
   28390:	movw	r1, #29370	; 0x72ba
   28394:	mov	r0, r6
   28398:	movt	r1, #3
   2839c:	bl	11a14 <strcmp@plt>
   283a0:	cmp	r0, #0
   283a4:	beq	28670 <__assert_fail@plt+0x167dc>
   283a8:	movw	r1, #29346	; 0x72a2
   283ac:	mov	r0, r6
   283b0:	movt	r1, #3
   283b4:	bl	11a14 <strcmp@plt>
   283b8:	cmp	r0, #0
   283bc:	beq	286c0 <__assert_fail@plt+0x1682c>
   283c0:	movw	r1, #29376	; 0x72c0
   283c4:	mov	r0, r6
   283c8:	movt	r1, #3
   283cc:	bl	11a14 <strcmp@plt>
   283d0:	cmp	r0, #0
   283d4:	beq	28710 <__assert_fail@plt+0x1687c>
   283d8:	movw	r1, #29382	; 0x72c6
   283dc:	mov	r0, r6
   283e0:	movt	r1, #3
   283e4:	bl	11a14 <strcmp@plt>
   283e8:	cmp	r0, #0
   283ec:	beq	28760 <__assert_fail@plt+0x168cc>
   283f0:	movw	r1, #29388	; 0x72cc
   283f4:	mov	r0, r6
   283f8:	movt	r1, #3
   283fc:	bl	11a14 <strcmp@plt>
   28400:	cmp	r0, #0
   28404:	beq	287b0 <__assert_fail@plt+0x1691c>
   28408:	movw	r1, #29394	; 0x72d2
   2840c:	mov	r0, r6
   28410:	movt	r1, #3
   28414:	bl	11a14 <strcmp@plt>
   28418:	mov	r1, r0
   2841c:	mov	r0, #4
   28420:	cmp	r1, #0
   28424:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   28428:	bl	11c54 <__ctype_b_loc@plt>
   2842c:	ldr	r1, [r0]
   28430:	mov	r2, #0
   28434:	mov	r3, #1
   28438:	cmp	r8, #0
   2843c:	bne	28968 <__assert_fail@plt+0x16ad4>
   28440:	ldrb	r0, [r1, #1]
   28444:	tst	r0, #16
   28448:	beq	28460 <__assert_fail@plt+0x165cc>
   2844c:	ubfx	r0, r2, #5, #3
   28450:	and	r6, r2, #31
   28454:	ldr	r7, [r4, r0, lsl #2]
   28458:	orr	r7, r7, r3, lsl r6
   2845c:	str	r7, [r4, r0, lsl #2]
   28460:	add	r2, r2, #1
   28464:	add	r1, r1, #2
   28468:	mov	r0, #0
   2846c:	cmp	r2, #256	; 0x100
   28470:	bne	28440 <__assert_fail@plt+0x165ac>
   28474:	b	287fc <__assert_fail@plt+0x16968>
   28478:	bl	11c54 <__ctype_b_loc@plt>
   2847c:	ldr	r1, [r0]
   28480:	cmp	r8, #0
   28484:	bne	288a4 <__assert_fail@plt+0x16a10>
   28488:	mov	r0, #0
   2848c:	mov	r2, #1
   28490:	b	284a8 <__assert_fail@plt+0x16614>
   28494:	add	r0, r0, #1
   28498:	add	r1, r1, #2
   2849c:	cmp	r0, #256	; 0x100
   284a0:	moveq	r0, #0
   284a4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   284a8:	ldrb	r3, [r1]
   284ac:	tst	r3, #8
   284b0:	beq	28494 <__assert_fail@plt+0x16600>
   284b4:	ubfx	r3, r0, #5, #3
   284b8:	and	r6, r0, #31
   284bc:	ldr	r7, [r4, r3, lsl #2]
   284c0:	orr	r7, r7, r2, lsl r6
   284c4:	str	r7, [r4, r3, lsl #2]
   284c8:	b	28494 <__assert_fail@plt+0x16600>
   284cc:	bl	11c54 <__ctype_b_loc@plt>
   284d0:	ldr	r1, [r0]
   284d4:	cmp	r8, #0
   284d8:	bne	28924 <__assert_fail@plt+0x16a90>
   284dc:	mov	r0, #0
   284e0:	mov	r2, #1
   284e4:	b	284fc <__assert_fail@plt+0x16668>
   284e8:	add	r0, r0, #1
   284ec:	add	r1, r1, #2
   284f0:	cmp	r0, #256	; 0x100
   284f4:	moveq	r0, #0
   284f8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   284fc:	ldrb	r3, [r1]
   28500:	tst	r3, #2
   28504:	beq	284e8 <__assert_fail@plt+0x16654>
   28508:	ubfx	r3, r0, #5, #3
   2850c:	and	r6, r0, #31
   28510:	ldr	r7, [r4, r3, lsl #2]
   28514:	orr	r7, r7, r2, lsl r6
   28518:	str	r7, [r4, r3, lsl #2]
   2851c:	b	284e8 <__assert_fail@plt+0x16654>
   28520:	bl	11c54 <__ctype_b_loc@plt>
   28524:	ldr	r1, [r0]
   28528:	cmp	r8, #0
   2852c:	bne	289e0 <__assert_fail@plt+0x16b4c>
   28530:	mov	r0, #0
   28534:	mov	r2, #1
   28538:	b	28550 <__assert_fail@plt+0x166bc>
   2853c:	add	r0, r0, #1
   28540:	add	r1, r1, #2
   28544:	cmp	r0, #256	; 0x100
   28548:	moveq	r0, #0
   2854c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   28550:	ldrb	r3, [r1, #1]
   28554:	tst	r3, #2
   28558:	beq	2853c <__assert_fail@plt+0x166a8>
   2855c:	ubfx	r3, r0, #5, #3
   28560:	and	r6, r0, #31
   28564:	ldr	r7, [r4, r3, lsl #2]
   28568:	orr	r7, r7, r2, lsl r6
   2856c:	str	r7, [r4, r3, lsl #2]
   28570:	b	2853c <__assert_fail@plt+0x166a8>
   28574:	bl	11c54 <__ctype_b_loc@plt>
   28578:	ldr	r1, [r0]
   2857c:	cmp	r8, #0
   28580:	bne	28a60 <__assert_fail@plt+0x16bcc>
   28584:	mov	r0, #0
   28588:	mov	r2, #1
   2858c:	b	285a4 <__assert_fail@plt+0x16710>
   28590:	add	r0, r0, #1
   28594:	add	r1, r1, #2
   28598:	cmp	r0, #256	; 0x100
   2859c:	moveq	r0, #0
   285a0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   285a4:	ldrb	r3, [r1, #1]
   285a8:	tst	r3, #32
   285ac:	beq	28590 <__assert_fail@plt+0x166fc>
   285b0:	ubfx	r3, r0, #5, #3
   285b4:	and	r6, r0, #31
   285b8:	ldr	r7, [r4, r3, lsl #2]
   285bc:	orr	r7, r7, r2, lsl r6
   285c0:	str	r7, [r4, r3, lsl #2]
   285c4:	b	28590 <__assert_fail@plt+0x166fc>
   285c8:	bl	11c54 <__ctype_b_loc@plt>
   285cc:	ldr	r1, [r0]
   285d0:	cmp	r8, #0
   285d4:	bne	28aa4 <__assert_fail@plt+0x16c10>
   285d8:	mov	r0, #0
   285dc:	mov	r2, #1
   285e0:	b	285f8 <__assert_fail@plt+0x16764>
   285e4:	add	r0, r0, #1
   285e8:	add	r1, r1, #2
   285ec:	cmp	r0, #256	; 0x100
   285f0:	moveq	r0, #0
   285f4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   285f8:	ldrb	r3, [r1, #1]
   285fc:	tst	r3, #4
   28600:	beq	285e4 <__assert_fail@plt+0x16750>
   28604:	ubfx	r3, r0, #5, #3
   28608:	and	r6, r0, #31
   2860c:	ldr	r7, [r4, r3, lsl #2]
   28610:	orr	r7, r7, r2, lsl r6
   28614:	str	r7, [r4, r3, lsl #2]
   28618:	b	285e4 <__assert_fail@plt+0x16750>
   2861c:	bl	11c54 <__ctype_b_loc@plt>
   28620:	ldr	r1, [r0]
   28624:	cmp	r8, #0
   28628:	bne	28ae8 <__assert_fail@plt+0x16c54>
   2862c:	mov	r0, #0
   28630:	mov	r2, #1
   28634:	b	2864c <__assert_fail@plt+0x167b8>
   28638:	add	r0, r0, #1
   2863c:	add	r1, r1, #2
   28640:	cmp	r0, #256	; 0x100
   28644:	moveq	r0, #0
   28648:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2864c:	ldrb	r3, [r1, #1]
   28650:	tst	r3, #8
   28654:	beq	28638 <__assert_fail@plt+0x167a4>
   28658:	ubfx	r3, r0, #5, #3
   2865c:	and	r6, r0, #31
   28660:	ldr	r7, [r4, r3, lsl #2]
   28664:	orr	r7, r7, r2, lsl r6
   28668:	str	r7, [r4, r3, lsl #2]
   2866c:	b	28638 <__assert_fail@plt+0x167a4>
   28670:	bl	11c54 <__ctype_b_loc@plt>
   28674:	ldr	r1, [r0]
   28678:	mov	r2, #0
   2867c:	mov	r3, #1
   28680:	cmp	r8, #0
   28684:	bne	2882c <__assert_fail@plt+0x16998>
   28688:	ldrb	r0, [r1, #1]
   2868c:	tst	r0, #64	; 0x40
   28690:	beq	286a8 <__assert_fail@plt+0x16814>
   28694:	ubfx	r0, r2, #5, #3
   28698:	and	r6, r2, #31
   2869c:	ldr	r7, [r4, r0, lsl #2]
   286a0:	orr	r7, r7, r3, lsl r6
   286a4:	str	r7, [r4, r0, lsl #2]
   286a8:	add	r2, r2, #1
   286ac:	add	r1, r1, #2
   286b0:	mov	r0, #0
   286b4:	cmp	r2, #256	; 0x100
   286b8:	bne	28688 <__assert_fail@plt+0x167f4>
   286bc:	b	287fc <__assert_fail@plt+0x16968>
   286c0:	bl	11c54 <__ctype_b_loc@plt>
   286c4:	ldr	r1, [r0]
   286c8:	mov	r2, #0
   286cc:	mov	r3, #1
   286d0:	cmp	r8, #0
   286d4:	bne	28868 <__assert_fail@plt+0x169d4>
   286d8:	ldrb	r0, [r1, #1]
   286dc:	tst	r0, #1
   286e0:	beq	286f8 <__assert_fail@plt+0x16864>
   286e4:	ubfx	r0, r2, #5, #3
   286e8:	and	r6, r2, #31
   286ec:	ldr	r7, [r4, r0, lsl #2]
   286f0:	orr	r7, r7, r3, lsl r6
   286f4:	str	r7, [r4, r0, lsl #2]
   286f8:	add	r2, r2, #1
   286fc:	add	r1, r1, #2
   28700:	mov	r0, #0
   28704:	cmp	r2, #256	; 0x100
   28708:	bne	286d8 <__assert_fail@plt+0x16844>
   2870c:	b	287fc <__assert_fail@plt+0x16968>
   28710:	bl	11c54 <__ctype_b_loc@plt>
   28714:	ldr	r1, [r0]
   28718:	mov	r2, #0
   2871c:	mov	r3, #1
   28720:	cmp	r8, #0
   28724:	bne	288e8 <__assert_fail@plt+0x16a54>
   28728:	ldrb	r0, [r1]
   2872c:	tst	r0, #1
   28730:	beq	28748 <__assert_fail@plt+0x168b4>
   28734:	ubfx	r0, r2, #5, #3
   28738:	and	r6, r2, #31
   2873c:	ldr	r7, [r4, r0, lsl #2]
   28740:	orr	r7, r7, r3, lsl r6
   28744:	str	r7, [r4, r0, lsl #2]
   28748:	add	r2, r2, #1
   2874c:	add	r1, r1, #2
   28750:	mov	r0, #0
   28754:	cmp	r2, #256	; 0x100
   28758:	bne	28728 <__assert_fail@plt+0x16894>
   2875c:	b	287fc <__assert_fail@plt+0x16968>
   28760:	bl	11c54 <__ctype_b_loc@plt>
   28764:	ldr	r1, [r0]
   28768:	mov	r2, #0
   2876c:	mov	r3, #1
   28770:	cmp	r8, #0
   28774:	bne	289a4 <__assert_fail@plt+0x16b10>
   28778:	ldrsh	r0, [r1]
   2877c:	cmn	r0, #1
   28780:	bgt	28798 <__assert_fail@plt+0x16904>
   28784:	ubfx	r0, r2, #5, #3
   28788:	and	r6, r2, #31
   2878c:	ldr	r7, [r4, r0, lsl #2]
   28790:	orr	r7, r7, r3, lsl r6
   28794:	str	r7, [r4, r0, lsl #2]
   28798:	add	r2, r2, #1
   2879c:	add	r1, r1, #2
   287a0:	mov	r0, #0
   287a4:	cmp	r2, #256	; 0x100
   287a8:	bne	28778 <__assert_fail@plt+0x168e4>
   287ac:	b	287fc <__assert_fail@plt+0x16968>
   287b0:	bl	11c54 <__ctype_b_loc@plt>
   287b4:	ldr	r1, [r0]
   287b8:	mov	r2, #0
   287bc:	mov	r3, #1
   287c0:	cmp	r8, #0
   287c4:	bne	28a24 <__assert_fail@plt+0x16b90>
   287c8:	ldrb	r0, [r1]
   287cc:	tst	r0, #4
   287d0:	beq	287e8 <__assert_fail@plt+0x16954>
   287d4:	ubfx	r0, r2, #5, #3
   287d8:	and	r6, r2, #31
   287dc:	ldr	r7, [r4, r0, lsl #2]
   287e0:	orr	r7, r7, r3, lsl r6
   287e4:	str	r7, [r4, r0, lsl #2]
   287e8:	add	r2, r2, #1
   287ec:	add	r1, r1, #2
   287f0:	mov	r0, #0
   287f4:	cmp	r2, #256	; 0x100
   287f8:	bne	287c8 <__assert_fail@plt+0x16934>
   287fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28800:	mov	r1, #1
   28804:	orr	r9, r1, r0, lsl #1
   28808:	ldr	r0, [r7, #12]
   2880c:	lsl	r1, r9, #2
   28810:	bl	33cc8 <__assert_fail@plt+0x21e34>
   28814:	cmp	r0, #0
   28818:	moveq	r0, #12
   2881c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   28820:	str	r0, [r7, #12]
   28824:	str	r9, [r5]
   28828:	b	282e4 <__assert_fail@plt+0x16450>
   2882c:	ldrb	r0, [r1, #1]
   28830:	tst	r0, #64	; 0x40
   28834:	beq	28850 <__assert_fail@plt+0x169bc>
   28838:	ldrb	r0, [r8, r2]
   2883c:	ubfx	r7, r0, #5, #3
   28840:	and	r0, r0, #31
   28844:	ldr	r6, [r4, r7, lsl #2]
   28848:	orr	r0, r6, r3, lsl r0
   2884c:	str	r0, [r4, r7, lsl #2]
   28850:	add	r2, r2, #1
   28854:	add	r1, r1, #2
   28858:	mov	r0, #0
   2885c:	cmp	r2, #256	; 0x100
   28860:	bne	2882c <__assert_fail@plt+0x16998>
   28864:	b	287fc <__assert_fail@plt+0x16968>
   28868:	ldrb	r0, [r1, #1]
   2886c:	tst	r0, #1
   28870:	beq	2888c <__assert_fail@plt+0x169f8>
   28874:	ldrb	r0, [r8, r2]
   28878:	ubfx	r7, r0, #5, #3
   2887c:	and	r0, r0, #31
   28880:	ldr	r6, [r4, r7, lsl #2]
   28884:	orr	r0, r6, r3, lsl r0
   28888:	str	r0, [r4, r7, lsl #2]
   2888c:	add	r2, r2, #1
   28890:	add	r1, r1, #2
   28894:	mov	r0, #0
   28898:	cmp	r2, #256	; 0x100
   2889c:	bne	28868 <__assert_fail@plt+0x169d4>
   288a0:	b	287fc <__assert_fail@plt+0x16968>
   288a4:	mov	r2, #0
   288a8:	mov	r3, #1
   288ac:	ldrb	r0, [r1]
   288b0:	tst	r0, #8
   288b4:	beq	288d0 <__assert_fail@plt+0x16a3c>
   288b8:	ldrb	r0, [r8, r2]
   288bc:	ubfx	r7, r0, #5, #3
   288c0:	and	r0, r0, #31
   288c4:	ldr	r6, [r4, r7, lsl #2]
   288c8:	orr	r0, r6, r3, lsl r0
   288cc:	str	r0, [r4, r7, lsl #2]
   288d0:	add	r2, r2, #1
   288d4:	add	r1, r1, #2
   288d8:	mov	r0, #0
   288dc:	cmp	r2, #256	; 0x100
   288e0:	bne	288ac <__assert_fail@plt+0x16a18>
   288e4:	b	287fc <__assert_fail@plt+0x16968>
   288e8:	ldrb	r0, [r1]
   288ec:	tst	r0, #1
   288f0:	beq	2890c <__assert_fail@plt+0x16a78>
   288f4:	ldrb	r0, [r8, r2]
   288f8:	ubfx	r7, r0, #5, #3
   288fc:	and	r0, r0, #31
   28900:	ldr	r6, [r4, r7, lsl #2]
   28904:	orr	r0, r6, r3, lsl r0
   28908:	str	r0, [r4, r7, lsl #2]
   2890c:	add	r2, r2, #1
   28910:	add	r1, r1, #2
   28914:	mov	r0, #0
   28918:	cmp	r2, #256	; 0x100
   2891c:	bne	288e8 <__assert_fail@plt+0x16a54>
   28920:	b	287fc <__assert_fail@plt+0x16968>
   28924:	mov	r2, #0
   28928:	mov	r3, #1
   2892c:	ldrb	r0, [r1]
   28930:	tst	r0, #2
   28934:	beq	28950 <__assert_fail@plt+0x16abc>
   28938:	ldrb	r0, [r8, r2]
   2893c:	ubfx	r7, r0, #5, #3
   28940:	and	r0, r0, #31
   28944:	ldr	r6, [r4, r7, lsl #2]
   28948:	orr	r0, r6, r3, lsl r0
   2894c:	str	r0, [r4, r7, lsl #2]
   28950:	add	r2, r2, #1
   28954:	add	r1, r1, #2
   28958:	mov	r0, #0
   2895c:	cmp	r2, #256	; 0x100
   28960:	bne	2892c <__assert_fail@plt+0x16a98>
   28964:	b	287fc <__assert_fail@plt+0x16968>
   28968:	ldrb	r0, [r1, #1]
   2896c:	tst	r0, #16
   28970:	beq	2898c <__assert_fail@plt+0x16af8>
   28974:	ldrb	r0, [r8, r2]
   28978:	ubfx	r7, r0, #5, #3
   2897c:	and	r0, r0, #31
   28980:	ldr	r6, [r4, r7, lsl #2]
   28984:	orr	r0, r6, r3, lsl r0
   28988:	str	r0, [r4, r7, lsl #2]
   2898c:	add	r2, r2, #1
   28990:	add	r1, r1, #2
   28994:	mov	r0, #0
   28998:	cmp	r2, #256	; 0x100
   2899c:	bne	28968 <__assert_fail@plt+0x16ad4>
   289a0:	b	287fc <__assert_fail@plt+0x16968>
   289a4:	ldrsh	r0, [r1]
   289a8:	cmn	r0, #1
   289ac:	bgt	289c8 <__assert_fail@plt+0x16b34>
   289b0:	ldrb	r0, [r8, r2]
   289b4:	ubfx	r7, r0, #5, #3
   289b8:	and	r0, r0, #31
   289bc:	ldr	r6, [r4, r7, lsl #2]
   289c0:	orr	r0, r6, r3, lsl r0
   289c4:	str	r0, [r4, r7, lsl #2]
   289c8:	add	r2, r2, #1
   289cc:	add	r1, r1, #2
   289d0:	mov	r0, #0
   289d4:	cmp	r2, #256	; 0x100
   289d8:	bne	289a4 <__assert_fail@plt+0x16b10>
   289dc:	b	287fc <__assert_fail@plt+0x16968>
   289e0:	mov	r2, #0
   289e4:	mov	r3, #1
   289e8:	ldrb	r0, [r1, #1]
   289ec:	tst	r0, #2
   289f0:	beq	28a0c <__assert_fail@plt+0x16b78>
   289f4:	ldrb	r0, [r8, r2]
   289f8:	ubfx	r7, r0, #5, #3
   289fc:	and	r0, r0, #31
   28a00:	ldr	r6, [r4, r7, lsl #2]
   28a04:	orr	r0, r6, r3, lsl r0
   28a08:	str	r0, [r4, r7, lsl #2]
   28a0c:	add	r2, r2, #1
   28a10:	add	r1, r1, #2
   28a14:	mov	r0, #0
   28a18:	cmp	r2, #256	; 0x100
   28a1c:	bne	289e8 <__assert_fail@plt+0x16b54>
   28a20:	b	287fc <__assert_fail@plt+0x16968>
   28a24:	ldrb	r0, [r1]
   28a28:	tst	r0, #4
   28a2c:	beq	28a48 <__assert_fail@plt+0x16bb4>
   28a30:	ldrb	r0, [r8, r2]
   28a34:	ubfx	r7, r0, #5, #3
   28a38:	and	r0, r0, #31
   28a3c:	ldr	r6, [r4, r7, lsl #2]
   28a40:	orr	r0, r6, r3, lsl r0
   28a44:	str	r0, [r4, r7, lsl #2]
   28a48:	add	r2, r2, #1
   28a4c:	add	r1, r1, #2
   28a50:	mov	r0, #0
   28a54:	cmp	r2, #256	; 0x100
   28a58:	bne	28a24 <__assert_fail@plt+0x16b90>
   28a5c:	b	287fc <__assert_fail@plt+0x16968>
   28a60:	mov	r2, #0
   28a64:	mov	r3, #1
   28a68:	ldrb	r0, [r1, #1]
   28a6c:	tst	r0, #32
   28a70:	beq	28a8c <__assert_fail@plt+0x16bf8>
   28a74:	ldrb	r0, [r8, r2]
   28a78:	ubfx	r7, r0, #5, #3
   28a7c:	and	r0, r0, #31
   28a80:	ldr	r6, [r4, r7, lsl #2]
   28a84:	orr	r0, r6, r3, lsl r0
   28a88:	str	r0, [r4, r7, lsl #2]
   28a8c:	add	r2, r2, #1
   28a90:	add	r1, r1, #2
   28a94:	mov	r0, #0
   28a98:	cmp	r2, #256	; 0x100
   28a9c:	bne	28a68 <__assert_fail@plt+0x16bd4>
   28aa0:	b	287fc <__assert_fail@plt+0x16968>
   28aa4:	mov	r2, #0
   28aa8:	mov	r3, #1
   28aac:	ldrb	r0, [r1, #1]
   28ab0:	tst	r0, #4
   28ab4:	beq	28ad0 <__assert_fail@plt+0x16c3c>
   28ab8:	ldrb	r0, [r8, r2]
   28abc:	ubfx	r7, r0, #5, #3
   28ac0:	and	r0, r0, #31
   28ac4:	ldr	r6, [r4, r7, lsl #2]
   28ac8:	orr	r0, r6, r3, lsl r0
   28acc:	str	r0, [r4, r7, lsl #2]
   28ad0:	add	r2, r2, #1
   28ad4:	add	r1, r1, #2
   28ad8:	mov	r0, #0
   28adc:	cmp	r2, #256	; 0x100
   28ae0:	bne	28aac <__assert_fail@plt+0x16c18>
   28ae4:	b	287fc <__assert_fail@plt+0x16968>
   28ae8:	mov	r2, #0
   28aec:	mov	r3, #1
   28af0:	ldrb	r0, [r1, #1]
   28af4:	tst	r0, #8
   28af8:	beq	28b14 <__assert_fail@plt+0x16c80>
   28afc:	ldrb	r0, [r8, r2]
   28b00:	ubfx	r7, r0, #5, #3
   28b04:	and	r0, r0, #31
   28b08:	ldr	r6, [r4, r7, lsl #2]
   28b0c:	orr	r0, r6, r3, lsl r0
   28b10:	str	r0, [r4, r7, lsl #2]
   28b14:	add	r2, r2, #1
   28b18:	add	r1, r1, #2
   28b1c:	mov	r0, #0
   28b20:	cmp	r2, #256	; 0x100
   28b24:	bne	28af0 <__assert_fail@plt+0x16c5c>
   28b28:	b	287fc <__assert_fail@plt+0x16968>
   28b2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28b30:	add	fp, sp, #24
   28b34:	ldrb	r3, [r1, #24]
   28b38:	ldr	r2, [r1, #28]
   28b3c:	mov	r4, #0
   28b40:	sub	r3, r3, #2
   28b44:	cmp	r3, #14
   28b48:	bhi	28c6c <__assert_fail@plt+0x16dd8>
   28b4c:	add	r7, pc, #0
   28b50:	ldr	pc, [r7, r3, lsl #2]
   28b54:	andeq	r8, r2, r0, lsr #25
   28b58:	andeq	r8, r2, ip, ror #24
   28b5c:	andeq	r8, r2, r4, lsl #25
   28b60:	andeq	r8, r2, ip, ror #24
   28b64:	andeq	r8, r2, ip, ror #24
   28b68:	andeq	r8, r2, ip, ror #24
   28b6c:	muleq	r2, r0, fp
   28b70:	muleq	r2, r0, fp
   28b74:	andeq	r8, r2, r4, ror #23
   28b78:	andeq	r8, r2, r4, ror #23
   28b7c:	muleq	r2, r0, fp
   28b80:	andeq	r8, r2, ip, ror #24
   28b84:	andeq	r8, r2, ip, ror #24
   28b88:	andeq	r8, r2, ip, ror #24
   28b8c:	andeq	r8, r2, r0, lsr #25
   28b90:	ldr	r1, [r1, #16]
   28b94:	ldr	r5, [r1, #28]
   28b98:	ldr	r6, [r0, #20]
   28b9c:	add	r0, r2, r2, lsl #1
   28ba0:	mov	r1, #1
   28ba4:	str	r1, [r6, r0, lsl #2]!
   28ba8:	mov	r0, #4
   28bac:	mov	r7, r6
   28bb0:	str	r1, [r7, #4]!
   28bb4:	bl	33c98 <__assert_fail@plt+0x21e04>
   28bb8:	cmp	r0, #0
   28bbc:	str	r0, [r6, #8]
   28bc0:	strne	r5, [r0]
   28bc4:	movne	r0, r4
   28bc8:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   28bcc:	mov	r0, #0
   28bd0:	str	r0, [r7]
   28bd4:	str	r0, [r6]
   28bd8:	mov	r4, #12
   28bdc:	mov	r0, r4
   28be0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28be4:	ldrb	r3, [r0, #88]	; 0x58
   28be8:	add	r6, r1, #16
   28bec:	add	r5, r2, r2, lsl #1
   28bf0:	orr	r3, r3, #1
   28bf4:	strb	r3, [r0, #88]	; 0x58
   28bf8:	mov	r3, r6
   28bfc:	ldr	r7, [r1, #4]
   28c00:	ldr	r1, [r1, #8]
   28c04:	cmp	r1, #0
   28c08:	addne	r3, r1, #12
   28c0c:	cmp	r7, #0
   28c10:	ldr	r1, [r3]
   28c14:	addne	r6, r7, #12
   28c18:	ldr	r8, [r1, #28]
   28c1c:	ldr	r1, [r6]
   28c20:	ldr	r6, [r0, #20]
   28c24:	mov	r0, #2
   28c28:	ldr	r9, [r1, #28]
   28c2c:	mov	r7, r6
   28c30:	str	r0, [r7, r5, lsl #2]!
   28c34:	mov	r0, #8
   28c38:	bl	33c98 <__assert_fail@plt+0x21e04>
   28c3c:	cmp	r0, #0
   28c40:	str	r0, [r7, #8]
   28c44:	beq	28bd8 <__assert_fail@plt+0x16d44>
   28c48:	add	r1, r6, r5, lsl #2
   28c4c:	cmp	r9, r8
   28c50:	add	r1, r1, #4
   28c54:	bne	28ca8 <__assert_fail@plt+0x16e14>
   28c58:	mov	r2, #1
   28c5c:	str	r2, [r1]
   28c60:	str	r9, [r0]
   28c64:	mov	r0, r4
   28c68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28c6c:	ldr	r1, [r1, #16]
   28c70:	ldr	r0, [r0, #12]
   28c74:	ldr	r1, [r1, #28]
   28c78:	str	r1, [r0, r2, lsl #2]
   28c7c:	mov	r0, r4
   28c80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28c84:	ldr	r7, [r1, #16]
   28c88:	ldr	r3, [r0, #12]
   28c8c:	ldr	r5, [r7, #28]
   28c90:	str	r5, [r3, r2, lsl #2]
   28c94:	ldrb	r1, [r1, #24]
   28c98:	cmp	r1, #4
   28c9c:	beq	28b98 <__assert_fail@plt+0x16d04>
   28ca0:	mov	r0, r4
   28ca4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28ca8:	mov	r2, #2
   28cac:	str	r2, [r1]
   28cb0:	stmge	r0, {r8, r9}
   28cb4:	strlt	r9, [r0]
   28cb8:	strlt	r8, [r0, #4]
   28cbc:	mov	r0, r4
   28cc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cc8:	add	fp, sp, #28
   28ccc:	sub	sp, sp, #4
   28cd0:	ldr	r6, [r2, #4]
   28cd4:	mov	r8, r0
   28cd8:	ldr	r5, [r1]
   28cdc:	mov	r9, r2
   28ce0:	cmp	r6, #0
   28ce4:	ldrbne	r0, [r1, #28]
   28ce8:	andsne	r0, r0, #16
   28cec:	bne	28e90 <__assert_fail@plt+0x16ffc>
   28cf0:	ldr	r1, [r5, #64]	; 0x40
   28cf4:	cmp	r1, #31
   28cf8:	beq	28eb8 <__assert_fail@plt+0x17024>
   28cfc:	ldr	r0, [r5, #56]	; 0x38
   28d00:	add	r2, r1, #1
   28d04:	add	r0, r0, r1, lsl #5
   28d08:	mov	r1, #0
   28d0c:	vmov.i32	q8, #0	; 0x00000000
   28d10:	str	r2, [r5, #64]	; 0x40
   28d14:	add	sl, r0, #4
   28d18:	mov	r2, #8
   28d1c:	str	r1, [r0, #20]
   28d20:	str	r1, [r0, #24]
   28d24:	str	r2, [r0, #28]
   28d28:	mov	r0, #28
   28d2c:	mov	r1, sl
   28d30:	vst1.32	{d16-d17}, [r1], r0
   28d34:	mvn	r0, #0
   28d38:	str	r0, [r1]
   28d3c:	ldr	r1, [r5, #64]	; 0x40
   28d40:	cmp	r1, #31
   28d44:	beq	28ee0 <__assert_fail@plt+0x1704c>
   28d48:	ldr	r0, [r5, #56]	; 0x38
   28d4c:	add	r2, r1, #1
   28d50:	add	r0, r0, r1, lsl #5
   28d54:	mov	r1, #0
   28d58:	vmov.i32	q8, #0	; 0x00000000
   28d5c:	str	r2, [r5, #64]	; 0x40
   28d60:	add	r7, r0, #4
   28d64:	mov	r2, #9
   28d68:	str	r1, [r0, #20]
   28d6c:	str	r1, [r0, #24]
   28d70:	str	r2, [r0, #28]
   28d74:	mov	r0, #28
   28d78:	mov	r1, r7
   28d7c:	vst1.32	{d16-d17}, [r1], r0
   28d80:	mvn	r0, #0
   28d84:	str	r0, [r1]
   28d88:	cmp	r6, #0
   28d8c:	mov	r4, r7
   28d90:	beq	28de0 <__assert_fail@plt+0x16f4c>
   28d94:	ldr	r1, [r5, #64]	; 0x40
   28d98:	cmp	r1, #31
   28d9c:	beq	28f30 <__assert_fail@plt+0x1709c>
   28da0:	ldr	r0, [r5, #56]	; 0x38
   28da4:	add	r2, r1, #1
   28da8:	add	r4, r0, r1, lsl #5
   28dac:	mov	r0, #0
   28db0:	mov	r1, #16
   28db4:	cmp	r7, #0
   28db8:	str	r2, [r5, #64]	; 0x40
   28dbc:	str	r0, [r4, #4]!
   28dc0:	mvn	r2, #0
   28dc4:	add	r3, r4, #20
   28dc8:	stmib	r4, {r6, r7}
   28dcc:	str	r0, [r4, #12]
   28dd0:	str	r0, [r4, #16]
   28dd4:	stm	r3, {r0, r1, r2}
   28dd8:	str	r4, [r6]
   28ddc:	strne	r4, [r7]
   28de0:	ldr	r1, [r5, #64]	; 0x40
   28de4:	cmp	r1, #31
   28de8:	beq	28f08 <__assert_fail@plt+0x17074>
   28dec:	ldr	r0, [r5, #56]	; 0x38
   28df0:	add	r2, r1, #1
   28df4:	add	r6, r0, r1, lsl #5
   28df8:	mov	r0, #0
   28dfc:	mov	r1, #16
   28e00:	cmp	sl, #0
   28e04:	str	r2, [r5, #64]	; 0x40
   28e08:	str	r0, [r6, #4]!
   28e0c:	mvn	r2, #0
   28e10:	add	r3, r6, #20
   28e14:	str	sl, [r6, #4]
   28e18:	str	r4, [r6, #8]
   28e1c:	str	r0, [r6, #12]
   28e20:	str	r0, [r6, #16]
   28e24:	stm	r3, {r0, r1, r2}
   28e28:	strne	r6, [sl]
   28e2c:	cmp	r4, #0
   28e30:	strne	r6, [r4]
   28e34:	cmp	r7, #0
   28e38:	beq	28e48 <__assert_fail@plt+0x16fb4>
   28e3c:	cmp	sl, #0
   28e40:	cmpne	r4, #0
   28e44:	bne	28e58 <__assert_fail@plt+0x16fc4>
   28e48:	mov	r0, #12
   28e4c:	mov	r6, #0
   28e50:	str	r0, [r8]
   28e54:	b	28eac <__assert_fail@plt+0x17018>
   28e58:	cmp	r6, #0
   28e5c:	beq	28e48 <__assert_fail@plt+0x16fb4>
   28e60:	ldr	r0, [r9, #20]
   28e64:	str	r0, [r7, #20]
   28e68:	str	r0, [sl, #20]
   28e6c:	ldr	r1, [r9, #24]
   28e70:	ldr	r0, [r7, #24]
   28e74:	lsr	r1, r1, #19
   28e78:	bfi	r0, r1, #19, #1
   28e7c:	str	r0, [r7, #24]
   28e80:	ldr	r0, [sl, #24]
   28e84:	bfi	r0, r1, #19, #1
   28e88:	str	r0, [sl, #24]
   28e8c:	b	28eac <__assert_fail@plt+0x17018>
   28e90:	ldr	r0, [r9, #20]
   28e94:	cmp	r0, #31
   28e98:	bgt	28eac <__assert_fail@plt+0x17018>
   28e9c:	ldr	r1, [r5, #80]	; 0x50
   28ea0:	mov	r2, #1
   28ea4:	tst	r1, r2, lsl r0
   28ea8:	bne	28cf0 <__assert_fail@plt+0x16e5c>
   28eac:	mov	r0, r6
   28eb0:	sub	sp, fp, #28
   28eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28eb8:	mov	r0, #996	; 0x3e4
   28ebc:	bl	33c98 <__assert_fail@plt+0x21e04>
   28ec0:	cmp	r0, #0
   28ec4:	beq	28f58 <__assert_fail@plt+0x170c4>
   28ec8:	ldr	r1, [r5, #56]	; 0x38
   28ecc:	str	r1, [r0]
   28ed0:	mov	r1, #0
   28ed4:	str	r1, [r5, #64]	; 0x40
   28ed8:	str	r0, [r5, #56]	; 0x38
   28edc:	b	28d00 <__assert_fail@plt+0x16e6c>
   28ee0:	mov	r0, #996	; 0x3e4
   28ee4:	bl	33c98 <__assert_fail@plt+0x21e04>
   28ee8:	cmp	r0, #0
   28eec:	beq	28f60 <__assert_fail@plt+0x170cc>
   28ef0:	ldr	r1, [r5, #56]	; 0x38
   28ef4:	str	r1, [r0]
   28ef8:	mov	r1, #0
   28efc:	str	r1, [r5, #64]	; 0x40
   28f00:	str	r0, [r5, #56]	; 0x38
   28f04:	b	28d4c <__assert_fail@plt+0x16eb8>
   28f08:	mov	r0, #996	; 0x3e4
   28f0c:	bl	33c98 <__assert_fail@plt+0x21e04>
   28f10:	cmp	r0, #0
   28f14:	beq	28f68 <__assert_fail@plt+0x170d4>
   28f18:	ldr	r1, [r5, #56]	; 0x38
   28f1c:	str	r1, [r0]
   28f20:	mov	r1, #0
   28f24:	str	r1, [r5, #64]	; 0x40
   28f28:	str	r0, [r5, #56]	; 0x38
   28f2c:	b	28df0 <__assert_fail@plt+0x16f5c>
   28f30:	mov	r0, #996	; 0x3e4
   28f34:	bl	33c98 <__assert_fail@plt+0x21e04>
   28f38:	cmp	r0, #0
   28f3c:	beq	28f78 <__assert_fail@plt+0x170e4>
   28f40:	ldr	r1, [r5, #56]	; 0x38
   28f44:	str	r1, [r0]
   28f48:	mov	r1, #0
   28f4c:	str	r1, [r5, #64]	; 0x40
   28f50:	str	r0, [r5, #56]	; 0x38
   28f54:	b	28da4 <__assert_fail@plt+0x16f10>
   28f58:	mov	sl, #0
   28f5c:	b	28d3c <__assert_fail@plt+0x16ea8>
   28f60:	mov	r7, #0
   28f64:	b	28d88 <__assert_fail@plt+0x16ef4>
   28f68:	mov	r6, #0
   28f6c:	cmp	r7, #0
   28f70:	bne	28e3c <__assert_fail@plt+0x16fa8>
   28f74:	b	28e48 <__assert_fail@plt+0x16fb4>
   28f78:	mov	r4, #0
   28f7c:	b	28de0 <__assert_fail@plt+0x16f4c>
   28f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f84:	add	fp, sp, #28
   28f88:	sub	sp, sp, #12
   28f8c:	mov	r4, r0
   28f90:	ldr	r7, [r0, #4]
   28f94:	ldr	r0, [r0, #8]
   28f98:	mov	r5, r2
   28f9c:	mov	r9, r1
   28fa0:	cmp	r0, r7
   28fa4:	bcs	29070 <__assert_fail@plt+0x171dc>
   28fa8:	ldr	r1, [r4]
   28fac:	str	r9, [r1, r0, lsl #3]!
   28fb0:	str	r5, [r1, #4]
   28fb4:	ldr	r0, [r4]
   28fb8:	ldr	r1, [r4, #8]
   28fbc:	add	r0, r0, r1, lsl #3
   28fc0:	ldr	r1, [r0, #4]
   28fc4:	bfc	r1, #8, #10
   28fc8:	str	r1, [r0, #4]
   28fcc:	uxtb	r1, r5
   28fd0:	cmp	r1, #5
   28fd4:	bne	28fe8 <__assert_fail@plt+0x17154>
   28fd8:	ldr	r2, [r4, #92]	; 0x5c
   28fdc:	mov	r0, #1048576	; 0x100000
   28fe0:	cmp	r2, #1
   28fe4:	bgt	28ff8 <__assert_fail@plt+0x17164>
   28fe8:	sub	r0, r1, #6
   28fec:	clz	r0, r0
   28ff0:	lsr	r0, r0, #5
   28ff4:	lsl	r0, r0, #20
   28ff8:	ldr	r1, [r4]
   28ffc:	ldr	r2, [r4, #8]
   29000:	add	r1, r1, r2, lsl #3
   29004:	ldr	r2, [r1, #4]
   29008:	bic	r2, r2, #1048576	; 0x100000
   2900c:	orr	r0, r2, r0
   29010:	mvn	r2, #0
   29014:	str	r0, [r1, #4]
   29018:	ldr	r0, [r4, #8]
   2901c:	ldr	r1, [r4, #12]
   29020:	str	r2, [r1, r0, lsl #2]
   29024:	mov	r2, #0
   29028:	ldr	r0, [r4, #8]
   2902c:	ldr	r1, [r4, #20]
   29030:	add	r0, r0, r0, lsl #1
   29034:	str	r2, [r1, r0, lsl #2]!
   29038:	str	r2, [r1, #4]
   2903c:	str	r2, [r1, #8]
   29040:	ldr	r0, [r4, #8]
   29044:	ldr	r1, [r4, #24]
   29048:	add	r0, r0, r0, lsl #1
   2904c:	str	r2, [r1, r0, lsl #2]!
   29050:	str	r2, [r1, #4]
   29054:	str	r2, [r1, #8]
   29058:	ldr	r6, [r4, #8]
   2905c:	add	r0, r6, #1
   29060:	str	r0, [r4, #8]
   29064:	mov	r0, r6
   29068:	sub	sp, fp, #28
   2906c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29070:	movw	r0, #21845	; 0x5555
   29074:	lsl	r1, r7, #1
   29078:	mvn	r6, #0
   2907c:	movt	r0, #5461	; 0x1555
   29080:	cmp	r1, r0
   29084:	bhi	29064 <__assert_fail@plt+0x171d0>
   29088:	ldr	r0, [r4]
   2908c:	str	r1, [sp, #8]
   29090:	lsl	r1, r7, #4
   29094:	bl	33cc8 <__assert_fail@plt+0x21e34>
   29098:	cmp	r0, #0
   2909c:	beq	29064 <__assert_fail@plt+0x171d0>
   290a0:	str	r0, [r4]
   290a4:	lsl	r8, r7, #3
   290a8:	ldr	r0, [r4, #12]
   290ac:	mov	r1, r8
   290b0:	bl	33cc8 <__assert_fail@plt+0x21e34>
   290b4:	str	r0, [sp, #4]
   290b8:	ldr	r0, [r4, #16]
   290bc:	mov	r1, r8
   290c0:	bl	33cc8 <__assert_fail@plt+0x21e34>
   290c4:	mov	r2, r0
   290c8:	ldr	r0, [r4, #20]
   290cc:	add	r1, r7, r7, lsl #1
   290d0:	lsl	r8, r1, #3
   290d4:	mov	r7, r2
   290d8:	mov	r1, r8
   290dc:	bl	33cc8 <__assert_fail@plt+0x21e34>
   290e0:	mov	sl, r0
   290e4:	ldr	r0, [r4, #24]
   290e8:	mov	r1, r8
   290ec:	bl	33cc8 <__assert_fail@plt+0x21e34>
   290f0:	mov	r8, r0
   290f4:	ldr	r0, [sp, #4]
   290f8:	cmp	r0, #0
   290fc:	beq	2910c <__assert_fail@plt+0x17278>
   29100:	cmp	r7, #0
   29104:	cmpne	sl, #0
   29108:	bne	2912c <__assert_fail@plt+0x17298>
   2910c:	bl	17754 <__assert_fail@plt+0x58c0>
   29110:	mov	r0, r7
   29114:	bl	17754 <__assert_fail@plt+0x58c0>
   29118:	mov	r0, sl
   2911c:	bl	17754 <__assert_fail@plt+0x58c0>
   29120:	mov	r0, r8
   29124:	bl	17754 <__assert_fail@plt+0x58c0>
   29128:	b	29064 <__assert_fail@plt+0x171d0>
   2912c:	cmp	r8, #0
   29130:	beq	2910c <__assert_fail@plt+0x17278>
   29134:	add	r1, r4, #12
   29138:	stm	r1, {r0, r7, sl}
   2913c:	str	r8, [r4, #24]
   29140:	ldr	r0, [sp, #8]
   29144:	str	r0, [r4, #4]
   29148:	ldr	r0, [r4, #8]
   2914c:	b	28fa8 <__assert_fail@plt+0x17114>
   29150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29154:	add	fp, sp, #28
   29158:	sub	sp, sp, #44	; 0x2c
   2915c:	mov	r8, r0
   29160:	ldr	r0, [r1, #20]
   29164:	add	r4, r2, r2, lsl #1
   29168:	mov	r5, r1
   2916c:	mov	r1, #0
   29170:	mov	r9, r3
   29174:	mov	r6, r2
   29178:	add	r0, r0, r4, lsl #2
   2917c:	ldr	r0, [r0, #4]
   29180:	str	r1, [sp, #36]	; 0x24
   29184:	add	r0, r0, #1
   29188:	str	r0, [sp, #32]
   2918c:	lsl	r0, r0, #2
   29190:	bl	33c98 <__assert_fail@plt+0x21e04>
   29194:	cmp	r0, #0
   29198:	str	r0, [sp, #40]	; 0x28
   2919c:	beq	29364 <__assert_fail@plt+0x174d0>
   291a0:	mov	r1, #1
   291a4:	str	r6, [r0]
   291a8:	str	r1, [sp, #36]	; 0x24
   291ac:	mvn	r1, #0
   291b0:	ldr	r0, [r5, #24]
   291b4:	add	r0, r0, r4, lsl #2
   291b8:	str	r1, [r0, #4]
   291bc:	ldr	r2, [r5]
   291c0:	add	r0, r2, r6, lsl #3
   291c4:	ldr	r0, [r0, #4]
   291c8:	ubfx	r1, r0, #8, #10
   291cc:	cmp	r1, #0
   291d0:	beq	2922c <__assert_fail@plt+0x17398>
   291d4:	ldr	r3, [r5, #20]
   291d8:	add	r3, r3, r4, lsl #2
   291dc:	ldr	r7, [r3, #4]
   291e0:	cmp	r7, #0
   291e4:	beq	2922c <__assert_fail@plt+0x17398>
   291e8:	ldr	r3, [r3, #8]
   291ec:	ldr	r3, [r3]
   291f0:	add	r2, r2, r3, lsl #3
   291f4:	ldrb	r2, [r2, #6]
   291f8:	tst	r2, #4
   291fc:	bne	2922c <__assert_fail@plt+0x17398>
   29200:	str	r1, [sp]
   29204:	mov	r0, r5
   29208:	mov	r1, r6
   2920c:	mov	r2, r6
   29210:	mov	r3, r6
   29214:	bl	29370 <__assert_fail@plt+0x174dc>
   29218:	cmp	r0, #0
   2921c:	bne	2935c <__assert_fail@plt+0x174c8>
   29220:	ldr	r0, [r5]
   29224:	add	r0, r0, r6, lsl #3
   29228:	ldr	r0, [r0, #4]
   2922c:	tst	r0, #8
   29230:	beq	29330 <__assert_fail@plt+0x1749c>
   29234:	ldr	r0, [r5, #20]
   29238:	add	r1, r0, r4, lsl #2
   2923c:	ldr	r1, [r1, #4]
   29240:	cmp	r1, #1
   29244:	blt	29330 <__assert_fail@plt+0x1749c>
   29248:	str	r8, [sp, #12]
   2924c:	mov	r8, #0
   29250:	add	r7, sp, #16
   29254:	add	sl, sp, #32
   29258:	mov	r6, #0
   2925c:	str	r9, [sp, #8]
   29260:	add	r0, r0, r4, lsl #2
   29264:	ldr	r0, [r0, #8]
   29268:	ldr	r2, [r0, r6, lsl #2]
   2926c:	ldr	r0, [r5, #24]
   29270:	add	r9, r2, r2, lsl #1
   29274:	add	r0, r0, r9, lsl #2
   29278:	ldr	r1, [r0, #4]
   2927c:	cmn	r1, #1
   29280:	beq	292e8 <__assert_fail@plt+0x17454>
   29284:	cmp	r1, #0
   29288:	bne	292a8 <__assert_fail@plt+0x17414>
   2928c:	mov	r0, r7
   29290:	mov	r1, r5
   29294:	mov	r3, #0
   29298:	bl	29150 <__assert_fail@plt+0x172bc>
   2929c:	cmp	r0, #0
   292a0:	beq	292b8 <__assert_fail@plt+0x17424>
   292a4:	b	2935c <__assert_fail@plt+0x174c8>
   292a8:	vldr	d16, [r0]
   292ac:	ldr	r0, [r0, #8]
   292b0:	str	r0, [sp, #24]
   292b4:	vstr	d16, [sp, #16]
   292b8:	mov	r0, sl
   292bc:	mov	r1, r7
   292c0:	bl	29820 <__assert_fail@plt+0x1798c>
   292c4:	cmp	r0, #0
   292c8:	bne	2935c <__assert_fail@plt+0x174c8>
   292cc:	ldr	r0, [r5, #24]
   292d0:	add	r0, r0, r9, lsl #2
   292d4:	ldr	r0, [r0, #4]
   292d8:	cmp	r0, #0
   292dc:	bne	292ec <__assert_fail@plt+0x17458>
   292e0:	ldr	r0, [sp, #24]
   292e4:	bl	17754 <__assert_fail@plt+0x58c0>
   292e8:	mov	r8, #1
   292ec:	ldr	r0, [r5, #20]
   292f0:	add	r6, r6, #1
   292f4:	add	r1, r0, r4, lsl #2
   292f8:	ldr	r1, [r1, #4]
   292fc:	cmp	r6, r1
   29300:	blt	29260 <__assert_fail@plt+0x173cc>
   29304:	tst	r8, #1
   29308:	ldr	r8, [sp, #12]
   2930c:	ldr	r0, [sp, #8]
   29310:	beq	29330 <__assert_fail@plt+0x1749c>
   29314:	cmp	r0, #0
   29318:	bne	29330 <__assert_fail@plt+0x1749c>
   2931c:	ldr	r0, [r5, #24]
   29320:	mov	r1, #0
   29324:	add	r0, r0, r4, lsl #2
   29328:	str	r1, [r0, #4]
   2932c:	b	29348 <__assert_fail@plt+0x174b4>
   29330:	ldr	r0, [r5, #24]
   29334:	vldr	d16, [sp, #32]
   29338:	ldr	r1, [sp, #40]	; 0x28
   2933c:	add	r0, r0, r4, lsl #2
   29340:	str	r1, [r0, #8]
   29344:	vstr	d16, [r0]
   29348:	ldr	r0, [sp, #40]	; 0x28
   2934c:	vldr	d16, [sp, #32]
   29350:	str	r0, [r8, #8]
   29354:	mov	r0, #0
   29358:	vstr	d16, [r8]
   2935c:	sub	sp, fp, #28
   29360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29364:	mov	r0, #12
   29368:	sub	sp, fp, #28
   2936c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29374:	add	fp, sp, #28
   29378:	sub	sp, sp, #20
   2937c:	mov	r9, r0
   29380:	ldr	r0, [fp, #8]
   29384:	mov	sl, r2
   29388:	mov	r8, r1
   2938c:	str	r3, [sp, #8]
   29390:	str	r0, [sp, #16]
   29394:	ldr	r2, [r9]
   29398:	add	r3, r2, r8, lsl #3
   2939c:	ldrb	r0, [r3, #4]!
   293a0:	cmp	r0, #4
   293a4:	bne	29494 <__assert_fail@plt+0x17600>
   293a8:	ldr	r0, [r9, #12]
   293ac:	ldr	r1, [r9, #20]
   293b0:	add	r6, sl, sl, lsl #1
   293b4:	ldr	r4, [r0, r8, lsl #2]
   293b8:	add	r0, r1, r6, lsl #2
   293bc:	mov	r1, #0
   293c0:	str	r1, [r0, #4]
   293c4:	mov	r0, r9
   293c8:	ldr	r1, [r2, r4, lsl #3]!
   293cc:	ldr	r2, [r2, #4]
   293d0:	bl	28f80 <__assert_fail@plt+0x170ec>
   293d4:	mov	r7, r0
   293d8:	mov	r0, #12
   293dc:	cmn	r7, #1
   293e0:	str	r0, [sp, #12]
   293e4:	beq	29814 <__assert_fail@plt+0x17980>
   293e8:	ldr	r1, [r9]
   293ec:	movw	r0, #65280	; 0xff00
   293f0:	movw	r3, #255	; 0xff
   293f4:	movt	r0, #3
   293f8:	movt	r3, #65532	; 0xfffc
   293fc:	mov	ip, r0
   29400:	ldr	r0, [sp, #16]
   29404:	add	r1, r1, r7, lsl #3
   29408:	ldr	r2, [r1, #4]
   2940c:	and	r0, ip, r0, lsl #8
   29410:	and	r2, r2, r3
   29414:	orr	r0, r2, r0
   29418:	str	r0, [r1, #4]
   2941c:	ldr	r0, [r9]
   29420:	add	r1, r0, r4, lsl #3
   29424:	add	r0, r0, r7, lsl #3
   29428:	ldr	r1, [r1, #4]
   2942c:	ldr	r2, [r0, #4]
   29430:	and	r1, r1, ip
   29434:	orr	r1, r1, r2
   29438:	str	r1, [r0, #4]
   2943c:	ldr	r0, [r9]
   29440:	add	r0, r0, r7, lsl #3
   29444:	ldr	r1, [r0, #4]
   29448:	orr	r1, r1, #262144	; 0x40000
   2944c:	str	r1, [r0, #4]
   29450:	ldr	r0, [r9, #16]
   29454:	str	r4, [r0, r7, lsl #2]
   29458:	ldr	r0, [r9, #12]
   2945c:	ldr	r1, [r0, r8, lsl #2]
   29460:	str	r1, [r0, sl, lsl #2]
   29464:	mov	r1, r7
   29468:	ldr	r0, [r9, #20]
   2946c:	add	r0, r0, r6, lsl #2
   29470:	bl	299b0 <__assert_fail@plt+0x17b1c>
   29474:	mov	r1, #0
   29478:	cmp	r0, #0
   2947c:	mov	r8, r4
   29480:	mov	sl, r7
   29484:	beq	29814 <__assert_fail@plt+0x17980>
   29488:	cmp	r1, #0
   2948c:	beq	29394 <__assert_fail@plt+0x17500>
   29490:	b	297ec <__assert_fail@plt+0x17958>
   29494:	ldr	r0, [r9, #20]
   29498:	add	ip, r8, r8, lsl #1
   2949c:	add	r7, r0, ip, lsl #2
   294a0:	ldr	r1, [r7, #4]
   294a4:	cmp	r1, #0
   294a8:	beq	29800 <__assert_fail@plt+0x1796c>
   294ac:	ldr	r7, [r7, #8]
   294b0:	add	r6, sl, sl, lsl #1
   294b4:	cmp	r1, #1
   294b8:	add	r0, r0, r6, lsl #2
   294bc:	ldr	r5, [r7]
   294c0:	mov	r7, #0
   294c4:	str	r7, [r0, #4]
   294c8:	bne	29504 <__assert_fail@plt+0x17670>
   294cc:	ldr	r1, [sp, #8]
   294d0:	cmp	r8, r1
   294d4:	bne	29704 <__assert_fail@plt+0x17870>
   294d8:	cmp	sl, r8
   294dc:	beq	29704 <__assert_fail@plt+0x17870>
   294e0:	mov	r1, r5
   294e4:	bl	299b0 <__assert_fail@plt+0x17b1c>
   294e8:	ldr	r8, [sp, #8]
   294ec:	cmp	r0, #0
   294f0:	mov	r1, #1
   294f4:	movwne	r1, #2
   294f8:	cmp	r1, #0
   294fc:	beq	29394 <__assert_fail@plt+0x17500>
   29500:	b	297ec <__assert_fail@plt+0x17958>
   29504:	ldr	r1, [r9, #8]
   29508:	ldr	r8, [sp, #16]
   2950c:	str	r6, [sp, #4]
   29510:	sub	r3, r1, #1
   29514:	cmp	r3, #1
   29518:	blt	29568 <__assert_fail@plt+0x176d4>
   2951c:	add	r3, r2, r3, lsl #3
   29520:	ldr	r6, [r3, #4]
   29524:	ands	r3, r6, #262144	; 0x40000
   29528:	beq	29568 <__assert_fail@plt+0x176d4>
   2952c:	ldr	r4, [r9, #16]
   29530:	sub	r3, r2, #12
   29534:	sub	r4, r4, #4
   29538:	ldr	r7, [r4, r1, lsl #2]
   2953c:	cmp	r7, r5
   29540:	ubfxeq	r7, r6, #8, #10
   29544:	cmpeq	r7, r8
   29548:	beq	297cc <__assert_fail@plt+0x17938>
   2954c:	sub	r7, r1, #2
   29550:	cmp	r7, #1
   29554:	blt	29568 <__assert_fail@plt+0x176d4>
   29558:	ldr	r6, [r3, r1, lsl #3]
   2955c:	sub	r1, r1, #1
   29560:	ands	r7, r6, #262144	; 0x40000
   29564:	bne	29538 <__assert_fail@plt+0x176a4>
   29568:	ldr	r1, [r2, r5, lsl #3]!
   2956c:	mov	r0, r9
   29570:	mov	sl, ip
   29574:	ldr	r2, [r2, #4]
   29578:	bl	28f80 <__assert_fail@plt+0x170ec>
   2957c:	mov	r4, r0
   29580:	mov	r0, #12
   29584:	cmn	r4, #1
   29588:	str	r0, [sp, #12]
   2958c:	beq	29814 <__assert_fail@plt+0x17980>
   29590:	ldr	r1, [r9]
   29594:	movw	r0, #65280	; 0xff00
   29598:	movw	r7, #255	; 0xff
   2959c:	ldr	r6, [sp, #4]
   295a0:	movt	r0, #3
   295a4:	movt	r7, #65532	; 0xfffc
   295a8:	mov	r3, r0
   295ac:	and	r0, r0, r8, lsl #8
   295b0:	add	r1, r1, r4, lsl #3
   295b4:	ldr	r2, [r1, #4]
   295b8:	and	r2, r2, r7
   295bc:	orr	r0, r2, r0
   295c0:	str	r0, [r1, #4]
   295c4:	ldr	r0, [r9]
   295c8:	add	r1, r0, r5, lsl #3
   295cc:	add	r0, r0, r4, lsl #3
   295d0:	ldr	r1, [r1, #4]
   295d4:	ldr	r2, [r0, #4]
   295d8:	and	r1, r1, r3
   295dc:	orr	r1, r1, r2
   295e0:	str	r1, [r0, #4]
   295e4:	ldr	r0, [r9]
   295e8:	add	r0, r0, r4, lsl #3
   295ec:	ldr	r1, [r0, #4]
   295f0:	orr	r1, r1, #262144	; 0x40000
   295f4:	str	r1, [r0, #4]
   295f8:	mov	r1, r4
   295fc:	ldr	r0, [r9, #16]
   29600:	str	r5, [r0, r4, lsl #2]
   29604:	ldr	r0, [r9, #20]
   29608:	add	r0, r0, r6, lsl #2
   2960c:	bl	299b0 <__assert_fail@plt+0x17b1c>
   29610:	cmp	r0, #0
   29614:	beq	29814 <__assert_fail@plt+0x17980>
   29618:	ldr	r0, [sp, #16]
   2961c:	ldr	r3, [sp, #8]
   29620:	mov	r1, r5
   29624:	mov	r2, r4
   29628:	str	r0, [sp]
   2962c:	mov	r0, r9
   29630:	bl	29370 <__assert_fail@plt+0x174dc>
   29634:	cmp	r0, #0
   29638:	bne	29810 <__assert_fail@plt+0x1797c>
   2963c:	ldr	r1, [r9, #20]
   29640:	ldr	r0, [r9]
   29644:	add	r1, r1, sl, lsl #2
   29648:	ldr	r1, [r1, #8]
   2964c:	ldr	r8, [r1, #4]
   29650:	ldr	r1, [r0, r8, lsl #3]!
   29654:	ldr	r2, [r0, #4]
   29658:	mov	r0, r9
   2965c:	bl	28f80 <__assert_fail@plt+0x170ec>
   29660:	mov	sl, r0
   29664:	mov	r0, #12
   29668:	cmn	sl, #1
   2966c:	str	r0, [sp, #12]
   29670:	beq	29814 <__assert_fail@plt+0x17980>
   29674:	ldr	r1, [r9]
   29678:	movw	r0, #65280	; 0xff00
   2967c:	movw	r7, #255	; 0xff
   29680:	movt	r0, #3
   29684:	movt	r7, #65532	; 0xfffc
   29688:	mov	r3, r0
   2968c:	ldr	r0, [sp, #16]
   29690:	add	r1, r1, sl, lsl #3
   29694:	ldr	r2, [r1, #4]
   29698:	and	r0, r3, r0, lsl #8
   2969c:	and	r2, r2, r7
   296a0:	orr	r0, r2, r0
   296a4:	str	r0, [r1, #4]
   296a8:	ldr	r0, [r9]
   296ac:	add	r1, r0, r8, lsl #3
   296b0:	add	r0, r0, sl, lsl #3
   296b4:	ldr	r1, [r1, #4]
   296b8:	ldr	r2, [r0, #4]
   296bc:	and	r1, r1, r3
   296c0:	orr	r1, r1, r2
   296c4:	str	r1, [r0, #4]
   296c8:	ldr	r0, [r9]
   296cc:	add	r0, r0, sl, lsl #3
   296d0:	ldr	r1, [r0, #4]
   296d4:	orr	r1, r1, #262144	; 0x40000
   296d8:	str	r1, [r0, #4]
   296dc:	mov	r1, sl
   296e0:	ldr	r0, [r9, #16]
   296e4:	str	r8, [r0, sl, lsl #2]
   296e8:	ldr	r0, [r9, #20]
   296ec:	add	r0, r0, r6, lsl #2
   296f0:	bl	299b0 <__assert_fail@plt+0x17b1c>
   296f4:	mov	r1, #0
   296f8:	cmp	r0, #0
   296fc:	bne	29488 <__assert_fail@plt+0x175f4>
   29700:	b	29814 <__assert_fail@plt+0x17980>
   29704:	ldr	r1, [r2, r5, lsl #3]!
   29708:	ldr	r4, [r3]
   2970c:	mov	r0, r9
   29710:	ldr	r2, [r2, #4]
   29714:	bl	28f80 <__assert_fail@plt+0x170ec>
   29718:	mov	sl, r0
   2971c:	ubfx	r0, r4, #8, #10
   29720:	mov	r1, #12
   29724:	cmn	sl, #1
   29728:	str	r1, [sp, #12]
   2972c:	beq	29814 <__assert_fail@plt+0x17980>
   29730:	ldr	r1, [sp, #16]
   29734:	movw	r7, #255	; 0xff
   29738:	movt	r7, #65532	; 0xfffc
   2973c:	orr	r1, r0, r1
   29740:	movw	r0, #65280	; 0xff00
   29744:	movt	r0, #3
   29748:	str	r1, [sp, #16]
   2974c:	mov	r3, r0
   29750:	and	r0, r0, r1, lsl #8
   29754:	ldr	r1, [r9]
   29758:	add	r1, r1, sl, lsl #3
   2975c:	ldr	r2, [r1, #4]
   29760:	and	r2, r2, r7
   29764:	orr	r0, r2, r0
   29768:	str	r0, [r1, #4]
   2976c:	ldr	r0, [r9]
   29770:	add	r1, r0, r5, lsl #3
   29774:	add	r0, r0, sl, lsl #3
   29778:	ldr	r1, [r1, #4]
   2977c:	ldr	r2, [r0, #4]
   29780:	and	r1, r1, r3
   29784:	orr	r1, r1, r2
   29788:	str	r1, [r0, #4]
   2978c:	ldr	r0, [r9]
   29790:	add	r0, r0, sl, lsl #3
   29794:	ldr	r1, [r0, #4]
   29798:	orr	r1, r1, #262144	; 0x40000
   2979c:	str	r1, [r0, #4]
   297a0:	mov	r1, sl
   297a4:	ldr	r0, [r9, #16]
   297a8:	str	r5, [r0, sl, lsl #2]
   297ac:	ldr	r0, [r9, #20]
   297b0:	add	r0, r0, r6, lsl #2
   297b4:	bl	299b0 <__assert_fail@plt+0x17b1c>
   297b8:	mov	r1, #0
   297bc:	cmp	r0, #0
   297c0:	mov	r8, r5
   297c4:	bne	29488 <__assert_fail@plt+0x175f4>
   297c8:	b	29814 <__assert_fail@plt+0x17980>
   297cc:	sub	r1, r1, #1
   297d0:	mov	sl, ip
   297d4:	bl	299b0 <__assert_fail@plt+0x17b1c>
   297d8:	ldr	r6, [sp, #4]
   297dc:	cmp	r0, #0
   297e0:	bne	2963c <__assert_fail@plt+0x177a8>
   297e4:	mov	r0, #12
   297e8:	b	29810 <__assert_fail@plt+0x1797c>
   297ec:	mov	r0, #12
   297f0:	cmp	r1, #2
   297f4:	str	r0, [sp, #12]
   297f8:	beq	2980c <__assert_fail@plt+0x17978>
   297fc:	b	29814 <__assert_fail@plt+0x17980>
   29800:	ldr	r0, [r9, #12]
   29804:	ldr	r1, [r0, r8, lsl #2]
   29808:	str	r1, [r0, sl, lsl #2]
   2980c:	mov	r0, #0
   29810:	str	r0, [sp, #12]
   29814:	ldr	r0, [sp, #12]
   29818:	sub	sp, fp, #28
   2981c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29820:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29824:	add	fp, sp, #24
   29828:	mov	r8, #0
   2982c:	cmp	r1, #0
   29830:	beq	29988 <__assert_fail@plt+0x17af4>
   29834:	mov	r5, r0
   29838:	ldr	r0, [r1, #4]
   2983c:	mov	r9, r1
   29840:	cmp	r0, #0
   29844:	beq	29988 <__assert_fail@plt+0x17af4>
   29848:	ldr	r1, [r5, #4]
   2984c:	ldr	r2, [r5]
   29850:	add	r3, r1, r0, lsl #1
   29854:	cmp	r2, r3
   29858:	bge	29888 <__assert_fail@plt+0x179f4>
   2985c:	add	r7, r2, r0
   29860:	ldr	r0, [r5, #8]
   29864:	lsl	r1, r7, #3
   29868:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2986c:	cmp	r0, #0
   29870:	beq	299a4 <__assert_fail@plt+0x17b10>
   29874:	str	r0, [r5, #8]
   29878:	lsl	r0, r7, #1
   2987c:	str	r0, [r5]
   29880:	ldr	r1, [r5, #4]
   29884:	ldr	r0, [r9, #4]
   29888:	cmp	r1, #0
   2988c:	beq	29990 <__assert_fail@plt+0x17afc>
   29890:	add	r7, r1, r0, lsl #1
   29894:	sub	r1, r1, #1
   29898:	sub	r0, r0, #1
   2989c:	orr	r2, r0, r1
   298a0:	cmp	r2, #0
   298a4:	blt	298f0 <__assert_fail@plt+0x17a5c>
   298a8:	ldr	r2, [r9, #8]
   298ac:	ldr	r3, [r5, #8]
   298b0:	ldr	r4, [r2, r0, lsl #2]
   298b4:	ldr	r6, [r3, r1, lsl #2]
   298b8:	cmp	r6, r4
   298bc:	bne	298cc <__assert_fail@plt+0x17a38>
   298c0:	sub	r1, r1, #1
   298c4:	sub	r0, r0, #1
   298c8:	b	298e4 <__assert_fail@plt+0x17a50>
   298cc:	bge	298e0 <__assert_fail@plt+0x17a4c>
   298d0:	sub	r7, r7, #1
   298d4:	sub	r0, r0, #1
   298d8:	str	r4, [r3, r7, lsl #2]
   298dc:	b	298e4 <__assert_fail@plt+0x17a50>
   298e0:	sub	r1, r1, #1
   298e4:	orr	r6, r0, r1
   298e8:	cmn	r6, #1
   298ec:	bgt	298b0 <__assert_fail@plt+0x17a1c>
   298f0:	cmp	r0, #0
   298f4:	blt	29914 <__assert_fail@plt+0x17a80>
   298f8:	add	r2, r0, #1
   298fc:	ldr	r0, [r5, #8]
   29900:	ldr	r1, [r9, #8]
   29904:	sub	r7, r7, r2
   29908:	lsl	r2, r2, #2
   2990c:	add	r0, r0, r7, lsl #2
   29910:	bl	11a8c <memcpy@plt>
   29914:	ldr	r0, [r5, #4]
   29918:	ldr	r2, [r9, #4]
   2991c:	sub	r1, r0, #1
   29920:	add	r3, r1, r2, lsl #1
   29924:	sub	r2, r3, r7
   29928:	adds	r2, r2, #1
   2992c:	beq	29988 <__assert_fail@plt+0x17af4>
   29930:	add	r0, r2, r0
   29934:	str	r0, [r5, #4]
   29938:	ldr	r0, [r5, #8]
   2993c:	ldr	r6, [r0, r1, lsl #2]
   29940:	ldr	r5, [r0, r3, lsl #2]
   29944:	cmp	r5, r6
   29948:	ble	29964 <__assert_fail@plt+0x17ad0>
   2994c:	add	r6, r2, r1
   29950:	subs	r2, r2, #1
   29954:	sub	r3, r3, #1
   29958:	str	r5, [r0, r6, lsl #2]
   2995c:	bne	2993c <__assert_fail@plt+0x17aa8>
   29960:	b	29988 <__assert_fail@plt+0x17af4>
   29964:	add	r5, r2, r1
   29968:	cmp	r1, #0
   2996c:	str	r6, [r0, r5, lsl #2]
   29970:	sub	r6, r1, #1
   29974:	mov	r1, r6
   29978:	bgt	2993c <__assert_fail@plt+0x17aa8>
   2997c:	add	r1, r0, r7, lsl #2
   29980:	lsl	r2, r2, #2
   29984:	bl	11a8c <memcpy@plt>
   29988:	mov	r0, r8
   2998c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29990:	str	r0, [r5, #4]
   29994:	ldr	r0, [r5, #8]
   29998:	ldr	r2, [r9, #4]
   2999c:	ldr	r1, [r9, #8]
   299a0:	b	29980 <__assert_fail@plt+0x17aec>
   299a4:	mov	r8, #12
   299a8:	mov	r0, r8
   299ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   299b0:	push	{r4, r5, r6, sl, fp, lr}
   299b4:	add	fp, sp, #16
   299b8:	ldr	r2, [r0]
   299bc:	mov	r5, r1
   299c0:	mov	r4, r0
   299c4:	cmp	r2, #0
   299c8:	beq	299f8 <__assert_fail@plt+0x17b64>
   299cc:	ldr	r1, [r4, #4]
   299d0:	cmp	r1, #0
   299d4:	bne	29a34 <__assert_fail@plt+0x17ba0>
   299d8:	ldr	r0, [r4, #8]
   299dc:	str	r5, [r0]
   299e0:	ldr	r0, [r4, #4]
   299e4:	mov	r6, #1
   299e8:	add	r0, r0, #1
   299ec:	str	r0, [r4, #4]
   299f0:	mov	r0, r6
   299f4:	pop	{r4, r5, r6, sl, fp, pc}
   299f8:	mov	r6, #1
   299fc:	mov	r0, #4
   29a00:	str	r6, [r4]
   29a04:	str	r6, [r4, #4]
   29a08:	bl	33c98 <__assert_fail@plt+0x21e04>
   29a0c:	cmp	r0, #0
   29a10:	str	r0, [r4, #8]
   29a14:	strne	r5, [r0]
   29a18:	movne	r0, r6
   29a1c:	popne	{r4, r5, r6, sl, fp, pc}
   29a20:	mov	r6, #0
   29a24:	mov	r0, r6
   29a28:	str	r6, [r4]
   29a2c:	str	r6, [r4, #4]
   29a30:	pop	{r4, r5, r6, sl, fp, pc}
   29a34:	cmp	r2, r1
   29a38:	bne	29a64 <__assert_fail@plt+0x17bd0>
   29a3c:	lsl	r0, r2, #1
   29a40:	lsl	r1, r2, #3
   29a44:	str	r0, [r4]
   29a48:	ldr	r0, [r4, #8]
   29a4c:	bl	33cc8 <__assert_fail@plt+0x21e34>
   29a50:	cmp	r0, #0
   29a54:	beq	29ae0 <__assert_fail@plt+0x17c4c>
   29a58:	str	r0, [r4, #8]
   29a5c:	ldr	r1, [r4, #4]
   29a60:	b	29a68 <__assert_fail@plt+0x17bd4>
   29a64:	ldr	r0, [r4, #8]
   29a68:	ldr	r2, [r0]
   29a6c:	cmp	r2, r5
   29a70:	ble	29aa8 <__assert_fail@plt+0x17c14>
   29a74:	cmp	r1, #1
   29a78:	blt	29ad8 <__assert_fail@plt+0x17c44>
   29a7c:	add	r2, r0, r1, lsl #2
   29a80:	add	r1, r1, #1
   29a84:	mov	r3, r2
   29a88:	ldr	r6, [r3, #-4]!
   29a8c:	sub	r1, r1, #1
   29a90:	cmp	r1, #1
   29a94:	str	r6, [r2]
   29a98:	mov	r2, r3
   29a9c:	bgt	29a88 <__assert_fail@plt+0x17bf4>
   29aa0:	sub	r1, r1, #1
   29aa4:	b	29ad8 <__assert_fail@plt+0x17c44>
   29aa8:	add	r2, r0, r1, lsl #2
   29aac:	ldr	r3, [r2, #-4]
   29ab0:	cmp	r3, r5
   29ab4:	ble	29ad8 <__assert_fail@plt+0x17c44>
   29ab8:	sub	r1, r1, #2
   29abc:	str	r3, [r2]
   29ac0:	sub	r1, r1, #1
   29ac4:	ldr	r3, [r2, #-8]
   29ac8:	sub	r2, r2, #4
   29acc:	cmp	r3, r5
   29ad0:	bgt	29abc <__assert_fail@plt+0x17c28>
   29ad4:	add	r1, r1, #2
   29ad8:	str	r5, [r0, r1, lsl #2]
   29adc:	b	299e0 <__assert_fail@plt+0x17b4c>
   29ae0:	mov	r6, #0
   29ae4:	mov	r0, r6
   29ae8:	pop	{r4, r5, r6, sl, fp, pc}
   29aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29af0:	add	fp, sp, #28
   29af4:	sub	sp, sp, #28
   29af8:	ldr	lr, [r2, #4]
   29afc:	str	r2, [sp, #24]
   29b00:	cmp	lr, #0
   29b04:	beq	29ca0 <__assert_fail@plt+0x17e0c>
   29b08:	mov	r9, r3
   29b0c:	add	r7, lr, r3
   29b10:	cmp	lr, #1
   29b14:	str	r0, [sp, #4]
   29b18:	blt	29b8c <__assert_fail@plt+0x17cf8>
   29b1c:	ldr	r0, [sp, #24]
   29b20:	mov	r2, #0
   29b24:	cmp	lr, #4
   29b28:	ldr	r5, [r0, #8]
   29b2c:	bcc	29b74 <__assert_fail@plt+0x17ce0>
   29b30:	mov	r0, #0
   29b34:	bic	r2, lr, #3
   29b38:	vdup.32	q8, r0
   29b3c:	mov	r3, r2
   29b40:	mov	r0, r5
   29b44:	vmov.32	d16[0], r7
   29b48:	vld1.32	{d18-d19}, [r0]!
   29b4c:	subs	r3, r3, #4
   29b50:	vadd.i32	q8, q9, q8
   29b54:	bne	29b48 <__assert_fail@plt+0x17cb4>
   29b58:	vext.8	q9, q8, q8, #8
   29b5c:	cmp	lr, r2
   29b60:	vadd.i32	q8, q8, q9
   29b64:	vdup.32	q9, d16[1]
   29b68:	vadd.i32	q8, q8, q9
   29b6c:	vmov.32	r7, d16[0]
   29b70:	beq	29b8c <__assert_fail@plt+0x17cf8>
   29b74:	add	r3, r5, r2, lsl #2
   29b78:	sub	r2, lr, r2
   29b7c:	ldr	r0, [r3], #4
   29b80:	subs	r2, r2, #1
   29b84:	add	r7, r0, r7
   29b88:	bne	29b7c <__assert_fail@plt+0x17ce8>
   29b8c:	ldr	r0, [r1, #32]
   29b90:	mov	sl, r1
   29b94:	ldr	r1, [r1, #68]	; 0x44
   29b98:	and	r1, r1, r7
   29b9c:	add	r2, r1, r1, lsl #1
   29ba0:	ldr	r1, [r0, r2, lsl #2]
   29ba4:	cmp	r1, #1
   29ba8:	blt	29c40 <__assert_fail@plt+0x17dac>
   29bac:	add	r0, r0, r2, lsl #2
   29bb0:	sub	ip, lr, #1
   29bb4:	mov	r3, #0
   29bb8:	ldr	r8, [r0, #8]
   29bbc:	b	29c00 <__assert_fail@plt+0x17d6c>
   29bc0:	ldr	r0, [r5, #4]
   29bc4:	cmp	r0, lr
   29bc8:	bne	29c34 <__assert_fail@plt+0x17da0>
   29bcc:	mov	r0, ip
   29bd0:	add	r6, r0, #1
   29bd4:	cmp	r6, #1
   29bd8:	blt	29ee4 <__assert_fail@plt+0x18050>
   29bdc:	ldr	r2, [sp, #24]
   29be0:	ldr	r6, [r2, #8]
   29be4:	ldr	r2, [r5, #8]
   29be8:	ldr	r6, [r6, r0, lsl #2]
   29bec:	ldr	r2, [r2, r0, lsl #2]
   29bf0:	sub	r0, r0, #1
   29bf4:	cmp	r2, r6
   29bf8:	beq	29bd0 <__assert_fail@plt+0x17d3c>
   29bfc:	b	29c34 <__assert_fail@plt+0x17da0>
   29c00:	ldr	r4, [r8, r3, lsl #2]
   29c04:	ldr	r0, [r4]
   29c08:	cmp	r0, r7
   29c0c:	bne	29c34 <__assert_fail@plt+0x17da0>
   29c10:	ldrb	r0, [r4, #52]	; 0x34
   29c14:	and	r0, r0, #15
   29c18:	cmp	r0, r9
   29c1c:	bne	29c34 <__assert_fail@plt+0x17da0>
   29c20:	ldr	r0, [sp, #24]
   29c24:	cmp	r0, #0
   29c28:	ldrne	r5, [r4, #40]	; 0x28
   29c2c:	cmpne	r5, #0
   29c30:	bne	29bc0 <__assert_fail@plt+0x17d2c>
   29c34:	add	r3, r3, #1
   29c38:	cmp	r3, r1
   29c3c:	blt	29c00 <__assert_fail@plt+0x17d6c>
   29c40:	mov	r0, #56	; 0x38
   29c44:	mov	r1, #1
   29c48:	bl	33c44 <__assert_fail@plt+0x21db0>
   29c4c:	cmp	r0, #0
   29c50:	beq	29f04 <__assert_fail@plt+0x18070>
   29c54:	mov	r4, r0
   29c58:	ldr	r0, [sp, #24]
   29c5c:	add	r6, r4, #4
   29c60:	ldr	r8, [r0, #4]
   29c64:	cmp	r8, #1
   29c68:	str	r8, [r4, #8]
   29c6c:	blt	29cac <__assert_fail@plt+0x17e18>
   29c70:	lsl	r0, r8, #2
   29c74:	str	r8, [r4, #4]
   29c78:	bl	33c98 <__assert_fail@plt+0x21e04>
   29c7c:	cmp	r0, #0
   29c80:	str	r0, [r4, #12]
   29c84:	beq	29f18 <__assert_fail@plt+0x18084>
   29c88:	ldr	r1, [sp, #24]
   29c8c:	ldr	r8, [r1, #4]
   29c90:	ldr	r1, [r1, #8]
   29c94:	lsl	r2, r8, #2
   29c98:	bl	11a8c <memcpy@plt>
   29c9c:	b	29cbc <__assert_fail@plt+0x17e28>
   29ca0:	mov	r4, #0
   29ca4:	str	r4, [r0]
   29ca8:	b	29ee4 <__assert_fail@plt+0x18050>
   29cac:	mov	r0, #0
   29cb0:	str	r0, [r6]
   29cb4:	str	r0, [r6, #4]
   29cb8:	str	r0, [r6, #8]
   29cbc:	str	r6, [r4, #40]	; 0x28
   29cc0:	and	r0, r9, #15
   29cc4:	cmp	r8, #1
   29cc8:	ldrb	r1, [r4, #52]	; 0x34
   29ccc:	and	r1, r1, #240	; 0xf0
   29cd0:	orr	r0, r1, r0
   29cd4:	strb	r0, [r4, #52]	; 0x34
   29cd8:	mov	r0, sl
   29cdc:	blt	29ed0 <__assert_fail@plt+0x1803c>
   29ce0:	movw	lr, #65280	; 0xff00
   29ce4:	and	r1, r9, #4
   29ce8:	and	ip, r9, #1
   29cec:	mov	r5, #0
   29cf0:	str	r0, [sp, #16]
   29cf4:	str	r1, [sp]
   29cf8:	and	r1, r9, #2
   29cfc:	movt	lr, #3
   29d00:	mov	r9, #0
   29d04:	str	ip, [sp, #12]
   29d08:	str	r1, [sp, #8]
   29d0c:	add	r1, lr, #255	; 0xff
   29d10:	str	r1, [sp, #20]
   29d14:	b	29d54 <__assert_fail@plt+0x17ec0>
   29d18:	sub	r2, r2, #1
   29d1c:	cmp	r2, r1
   29d20:	str	r2, [r4, #8]
   29d24:	ble	29ec0 <__assert_fail@plt+0x1802c>
   29d28:	ldr	r2, [r4, #12]
   29d2c:	add	r3, r2, r1, lsl #2
   29d30:	ldr	r3, [r3, #4]
   29d34:	str	r3, [r2, r1, lsl #2]
   29d38:	add	r1, r1, #1
   29d3c:	ldr	r3, [r4, #8]
   29d40:	cmp	r1, r3
   29d44:	blt	29d2c <__assert_fail@plt+0x17e98>
   29d48:	ldr	r1, [sp, #24]
   29d4c:	ldr	r8, [r1, #4]
   29d50:	b	29ec0 <__assert_fail@plt+0x1802c>
   29d54:	ldr	r1, [sp, #24]
   29d58:	ldr	r2, [r0]
   29d5c:	ldr	r1, [r1, #8]
   29d60:	ldr	r1, [r1, r9, lsl #2]
   29d64:	add	r1, r2, r1, lsl #3
   29d68:	ldr	sl, [r1, #4]
   29d6c:	ldr	r1, [sp, #20]
   29d70:	and	r1, sl, r1
   29d74:	cmp	r1, #1
   29d78:	beq	29ec4 <__assert_fail@plt+0x18030>
   29d7c:	ldrb	r3, [r4, #52]	; 0x34
   29d80:	mov	r2, #32
   29d84:	and	r1, sl, lr
   29d88:	and	r2, r2, sl, lsr #15
   29d8c:	orr	r2, r3, r2
   29d90:	uxtb	r3, sl
   29d94:	cmp	r3, #2
   29d98:	strb	r2, [r4, #52]	; 0x34
   29d9c:	beq	29db0 <__assert_fail@plt+0x17f1c>
   29da0:	cmp	r3, #4
   29da4:	bne	29dbc <__assert_fail@plt+0x17f28>
   29da8:	mov	r3, #64	; 0x40
   29dac:	b	29db4 <__assert_fail@plt+0x17f20>
   29db0:	mov	r3, #16
   29db4:	orr	r2, r2, r3
   29db8:	strb	r2, [r4, #52]	; 0x34
   29dbc:	cmp	r1, #0
   29dc0:	beq	29ec4 <__assert_fail@plt+0x18030>
   29dc4:	ldr	r1, [r4, #40]	; 0x28
   29dc8:	cmp	r1, r6
   29dcc:	beq	29de4 <__assert_fail@plt+0x17f50>
   29dd0:	cmp	ip, #0
   29dd4:	bne	29e78 <__assert_fail@plt+0x17fe4>
   29dd8:	ands	r1, sl, #256	; 0x100
   29ddc:	bne	29eac <__assert_fail@plt+0x18018>
   29de0:	b	29e78 <__assert_fail@plt+0x17fe4>
   29de4:	mov	r0, #12
   29de8:	bl	33c98 <__assert_fail@plt+0x21e04>
   29dec:	cmp	r0, #0
   29df0:	beq	29efc <__assert_fail@plt+0x18068>
   29df4:	mov	r5, r0
   29df8:	str	r0, [r4, #40]	; 0x28
   29dfc:	ldr	r0, [sp, #24]
   29e00:	ldr	r8, [r0, #4]
   29e04:	cmp	r8, #1
   29e08:	str	r8, [r5, #4]
   29e0c:	blt	29e40 <__assert_fail@plt+0x17fac>
   29e10:	lsl	r0, r8, #2
   29e14:	str	r8, [r5]
   29e18:	bl	33c98 <__assert_fail@plt+0x21e04>
   29e1c:	cmp	r0, #0
   29e20:	str	r0, [r5, #8]
   29e24:	beq	29ef0 <__assert_fail@plt+0x1805c>
   29e28:	ldr	r1, [sp, #24]
   29e2c:	ldr	r8, [r1, #4]
   29e30:	ldr	r1, [r1, #8]
   29e34:	lsl	r2, r8, #2
   29e38:	bl	11a8c <memcpy@plt>
   29e3c:	b	29e50 <__assert_fail@plt+0x17fbc>
   29e40:	mov	r0, #0
   29e44:	str	r0, [r5]
   29e48:	str	r0, [r5, #4]
   29e4c:	str	r0, [r5, #8]
   29e50:	ldrb	r0, [r4, #52]	; 0x34
   29e54:	ldr	ip, [sp, #12]
   29e58:	movw	lr, #65280	; 0xff00
   29e5c:	mov	r5, #0
   29e60:	movt	lr, #3
   29e64:	orr	r0, r0, #128	; 0x80
   29e68:	strb	r0, [r4, #52]	; 0x34
   29e6c:	ldr	r0, [sp, #16]
   29e70:	cmp	ip, #0
   29e74:	beq	29dd8 <__assert_fail@plt+0x17f44>
   29e78:	cmp	ip, #0
   29e7c:	andsne	r1, sl, #512	; 0x200
   29e80:	bne	29eac <__assert_fail@plt+0x18018>
   29e84:	ldr	r1, [sp, #8]
   29e88:	cmp	r1, #0
   29e8c:	bne	29e98 <__assert_fail@plt+0x18004>
   29e90:	ands	r1, sl, #4096	; 0x1000
   29e94:	bne	29eac <__assert_fail@plt+0x18018>
   29e98:	ldr	r1, [sp]
   29e9c:	cmp	r1, #0
   29ea0:	bne	29ec4 <__assert_fail@plt+0x18030>
   29ea4:	ands	r1, sl, #16384	; 0x4000
   29ea8:	beq	29ec4 <__assert_fail@plt+0x18030>
   29eac:	sub	r1, r9, r5
   29eb0:	cmp	r1, #0
   29eb4:	ldrge	r2, [r4, #8]
   29eb8:	cmpge	r2, r1
   29ebc:	bgt	29d18 <__assert_fail@plt+0x17e84>
   29ec0:	add	r5, r5, #1
   29ec4:	add	r9, r9, #1
   29ec8:	cmp	r9, r8
   29ecc:	blt	29d54 <__assert_fail@plt+0x17ec0>
   29ed0:	mov	r1, r4
   29ed4:	mov	r2, r7
   29ed8:	bl	29f30 <__assert_fail@plt+0x1809c>
   29edc:	cmp	r0, #0
   29ee0:	bne	29efc <__assert_fail@plt+0x18068>
   29ee4:	mov	r0, r4
   29ee8:	sub	sp, fp, #28
   29eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ef0:	mov	r0, #0
   29ef4:	str	r0, [r5]
   29ef8:	str	r0, [r5, #4]
   29efc:	mov	r0, r4
   29f00:	bl	23f4c <__assert_fail@plt+0x120b8>
   29f04:	ldr	r1, [sp, #4]
   29f08:	mov	r0, #12
   29f0c:	mov	r4, #0
   29f10:	str	r0, [r1]
   29f14:	b	29ee4 <__assert_fail@plt+0x18050>
   29f18:	mov	r0, #0
   29f1c:	str	r0, [r4, #4]
   29f20:	str	r0, [r4, #8]
   29f24:	mov	r0, r4
   29f28:	bl	17754 <__assert_fail@plt+0x58c0>
   29f2c:	b	29f04 <__assert_fail@plt+0x18070>
   29f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f34:	add	fp, sp, #28
   29f38:	sub	sp, sp, #4
   29f3c:	str	r2, [r1]
   29f40:	mov	r4, r1
   29f44:	mov	r7, r0
   29f48:	mov	r0, #0
   29f4c:	mov	r9, r2
   29f50:	ldr	r1, [r1, #8]
   29f54:	str	r1, [r4, #16]
   29f58:	str	r0, [r4, #20]
   29f5c:	lsl	r0, r1, #2
   29f60:	bl	33c98 <__assert_fail@plt+0x21e04>
   29f64:	mov	r8, #12
   29f68:	cmp	r0, #0
   29f6c:	str	r0, [r4, #24]
   29f70:	beq	2a030 <__assert_fail@plt+0x1819c>
   29f74:	ldr	r1, [r4, #8]
   29f78:	cmp	r1, #1
   29f7c:	blt	29ff0 <__assert_fail@plt+0x1815c>
   29f80:	mov	r5, #0
   29f84:	mov	sl, #2
   29f88:	ldr	r2, [r4, #12]
   29f8c:	ldr	r6, [r2, r5, lsl #2]
   29f90:	ldr	r2, [r7]
   29f94:	add	r2, r2, r6, lsl #3
   29f98:	ldrb	r2, [r2, #4]
   29f9c:	tst	r2, #8
   29fa0:	bne	29fe4 <__assert_fail@plt+0x18150>
   29fa4:	ldr	r2, [r4, #16]
   29fa8:	ldr	r1, [r4, #20]
   29fac:	cmp	r2, r1
   29fb0:	bne	29fd4 <__assert_fail@plt+0x18140>
   29fb4:	add	r1, sl, r2, lsl #1
   29fb8:	str	r1, [r4, #16]
   29fbc:	lsl	r1, r1, #2
   29fc0:	bl	33cc8 <__assert_fail@plt+0x21e34>
   29fc4:	cmp	r0, #0
   29fc8:	beq	2a030 <__assert_fail@plt+0x1819c>
   29fcc:	str	r0, [r4, #24]
   29fd0:	ldr	r1, [r4, #20]
   29fd4:	add	r2, r1, #1
   29fd8:	str	r2, [r4, #20]
   29fdc:	str	r6, [r0, r1, lsl #2]
   29fe0:	ldr	r1, [r4, #8]
   29fe4:	add	r5, r5, #1
   29fe8:	cmp	r5, r1
   29fec:	blt	29f88 <__assert_fail@plt+0x180f4>
   29ff0:	ldr	r1, [r7, #68]	; 0x44
   29ff4:	ldr	r0, [r7, #32]
   29ff8:	and	r1, r1, r9
   29ffc:	mov	r5, r0
   2a000:	add	r2, r1, r1, lsl #1
   2a004:	ldr	r1, [r5, r2, lsl #2]!
   2a008:	mov	r6, r5
   2a00c:	ldr	r3, [r6, #4]!
   2a010:	cmp	r3, r1
   2a014:	ble	2a03c <__assert_fail@plt+0x181a8>
   2a018:	add	r0, r0, r2, lsl #2
   2a01c:	ldr	r0, [r0, #8]
   2a020:	add	r2, r1, #1
   2a024:	mov	r8, #0
   2a028:	str	r2, [r5]
   2a02c:	str	r4, [r0, r1, lsl #2]
   2a030:	mov	r0, r8
   2a034:	sub	sp, fp, #28
   2a038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a03c:	add	r7, r0, r2, lsl #2
   2a040:	mov	r2, #2
   2a044:	ldr	r0, [r7, #8]!
   2a048:	add	r9, r2, r1, lsl #1
   2a04c:	lsl	r1, r9, #2
   2a050:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2a054:	cmp	r0, #0
   2a058:	beq	2a030 <__assert_fail@plt+0x1819c>
   2a05c:	str	r0, [r7]
   2a060:	str	r9, [r6]
   2a064:	ldr	r1, [r5]
   2a068:	b	2a020 <__assert_fail@plt+0x1818c>
   2a06c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a070:	add	fp, sp, #28
   2a074:	sub	sp, sp, #36	; 0x24
   2a078:	mov	r4, r0
   2a07c:	ldr	r0, [r0, #24]
   2a080:	mov	r6, r2
   2a084:	mov	r9, r1
   2a088:	cmp	r0, r1
   2a08c:	ble	2a28c <__assert_fail@plt+0x183f8>
   2a090:	ldr	r0, [r4, #80]	; 0x50
   2a094:	mov	r1, #4
   2a098:	mov	r5, r9
   2a09c:	cmp	r0, #2
   2a0a0:	movge	r0, #0
   2a0a4:	strge	r0, [r4, #16]
   2a0a8:	strge	r0, [r4, #20]
   2a0ac:	mov	r0, #0
   2a0b0:	tst	r6, #1
   2a0b4:	str	r0, [r4, #24]
   2a0b8:	str	r0, [r4, #28]
   2a0bc:	str	r0, [r4, #32]
   2a0c0:	strb	r0, [r4, #76]	; 0x4c
   2a0c4:	movweq	r1, #6
   2a0c8:	ldr	r2, [r4, #44]	; 0x2c
   2a0cc:	ldr	r3, [r4, #52]	; 0x34
   2a0d0:	str	r2, [r4, #48]	; 0x30
   2a0d4:	str	r3, [r4, #56]	; 0x38
   2a0d8:	str	r1, [r4, #60]	; 0x3c
   2a0dc:	ldrb	r1, [r4, #75]	; 0x4b
   2a0e0:	cmp	r1, #0
   2a0e4:	ldreq	r1, [r4]
   2a0e8:	streq	r1, [r4, #4]
   2a0ec:	cmp	r5, #0
   2a0f0:	beq	2a214 <__assert_fail@plt+0x18380>
   2a0f4:	ldr	r1, [r4, #32]
   2a0f8:	cmp	r5, r1
   2a0fc:	bge	2a29c <__assert_fail@plt+0x18408>
   2a100:	ldrb	r0, [r4, #76]	; 0x4c
   2a104:	cmp	r0, #0
   2a108:	bne	2a39c <__assert_fail@plt+0x18508>
   2a10c:	cmp	r5, #0
   2a110:	ble	2a154 <__assert_fail@plt+0x182c0>
   2a114:	ldr	r1, [r4, #48]	; 0x30
   2a118:	sub	r0, r5, #1
   2a11c:	cmp	r1, r0
   2a120:	beq	2a454 <__assert_fail@plt+0x185c0>
   2a124:	ldr	r1, [r4, #80]	; 0x50
   2a128:	cmp	r1, #2
   2a12c:	blt	2a15c <__assert_fail@plt+0x182c8>
   2a130:	ldr	r0, [r4, #8]
   2a134:	mov	r1, r5
   2a138:	sub	r0, r0, #4
   2a13c:	ldr	r6, [r0, r1, lsl #2]
   2a140:	cmn	r6, #1
   2a144:	bne	2a190 <__assert_fail@plt+0x182fc>
   2a148:	sub	r1, r1, #1
   2a14c:	cmp	r1, #0
   2a150:	bgt	2a13c <__assert_fail@plt+0x182a8>
   2a154:	ldr	r1, [r4, #60]	; 0x3c
   2a158:	b	2a1b4 <__assert_fail@plt+0x18320>
   2a15c:	ldr	r1, [r4, #4]
   2a160:	ldr	r2, [r4, #68]	; 0x44
   2a164:	ldrb	r0, [r1, r0]
   2a168:	ubfx	r1, r0, #5, #3
   2a16c:	and	r3, r0, #31
   2a170:	ldr	r2, [r2, r1, lsl #2]
   2a174:	mov	r1, #1
   2a178:	tst	r2, r1, lsl r3
   2a17c:	bne	2a1b4 <__assert_fail@plt+0x18320>
   2a180:	mov	r1, #0
   2a184:	cmp	r0, #10
   2a188:	beq	2a1a8 <__assert_fail@plt+0x18314>
   2a18c:	b	2a1b4 <__assert_fail@plt+0x18320>
   2a190:	ldrb	r0, [r4, #78]	; 0x4e
   2a194:	cmp	r0, #0
   2a198:	bne	2a710 <__assert_fail@plt+0x1887c>
   2a19c:	mov	r1, #0
   2a1a0:	cmp	r6, #10
   2a1a4:	bne	2a1b4 <__assert_fail@plt+0x18320>
   2a1a8:	ldrb	r1, [r4, #77]	; 0x4d
   2a1ac:	cmp	r1, #0
   2a1b0:	movwne	r1, #2
   2a1b4:	str	r1, [r4, #60]	; 0x3c
   2a1b8:	ldr	r0, [r4, #80]	; 0x50
   2a1bc:	cmp	r0, #2
   2a1c0:	blt	2a1dc <__assert_fail@plt+0x18348>
   2a1c4:	ldr	r2, [r4, #28]
   2a1c8:	ldr	r0, [r4, #8]
   2a1cc:	sub	r2, r2, r5
   2a1d0:	add	r1, r0, r5, lsl #2
   2a1d4:	lsl	r2, r2, #2
   2a1d8:	bl	11a50 <memmove@plt>
   2a1dc:	ldrb	r0, [r4, #75]	; 0x4b
   2a1e0:	cmp	r0, #0
   2a1e4:	bne	2a43c <__assert_fail@plt+0x185a8>
   2a1e8:	ldr	r0, [r4, #28]
   2a1ec:	ldr	r1, [r4, #32]
   2a1f0:	sub	r0, r0, r5
   2a1f4:	sub	r1, r1, r5
   2a1f8:	str	r0, [r4, #28]
   2a1fc:	str	r1, [r4, #32]
   2a200:	ldrb	r0, [r4, #75]	; 0x4b
   2a204:	cmp	r0, #0
   2a208:	ldreq	r0, [r4, #4]
   2a20c:	addeq	r0, r0, r5
   2a210:	streq	r0, [r4, #4]
   2a214:	str	r9, [r4, #24]
   2a218:	ldr	r0, [r4, #48]	; 0x30
   2a21c:	ldr	r3, [r4, #80]	; 0x50
   2a220:	ldr	r2, [r4, #56]	; 0x38
   2a224:	sub	r1, r0, r5
   2a228:	cmp	r3, #2
   2a22c:	sub	r0, r2, r5
   2a230:	str	r1, [r4, #48]	; 0x30
   2a234:	str	r0, [r4, #56]	; 0x38
   2a238:	blt	2a260 <__assert_fail@plt+0x183cc>
   2a23c:	ldrb	r0, [r4, #72]	; 0x48
   2a240:	cmp	r0, #0
   2a244:	beq	2a274 <__assert_fail@plt+0x183e0>
   2a248:	mov	r0, r4
   2a24c:	bl	23fb0 <__assert_fail@plt+0x1211c>
   2a250:	cmp	r0, #0
   2a254:	beq	2a27c <__assert_fail@plt+0x183e8>
   2a258:	sub	sp, fp, #28
   2a25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a260:	ldrb	r0, [r4, #75]	; 0x4b
   2a264:	cmp	r0, #0
   2a268:	bne	2a460 <__assert_fail@plt+0x185cc>
   2a26c:	str	r1, [r4, #28]
   2a270:	b	2a27c <__assert_fail@plt+0x183e8>
   2a274:	mov	r0, r4
   2a278:	bl	24670 <__assert_fail@plt+0x127dc>
   2a27c:	mov	r0, #0
   2a280:	str	r0, [r4, #40]	; 0x28
   2a284:	sub	sp, fp, #28
   2a288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a28c:	sub	r5, r9, r0
   2a290:	cmp	r5, #0
   2a294:	bne	2a0f4 <__assert_fail@plt+0x18260>
   2a298:	b	2a214 <__assert_fail@plt+0x18380>
   2a29c:	ldrb	r2, [r4, #76]	; 0x4c
   2a2a0:	ldr	lr, [r4, #28]
   2a2a4:	cmp	r2, #0
   2a2a8:	bne	2a930 <__assert_fail@plt+0x18a9c>
   2a2ac:	mov	r2, #0
   2a2b0:	str	r2, [r4, #28]
   2a2b4:	ldr	r3, [r4, #80]	; 0x50
   2a2b8:	cmp	r3, #2
   2a2bc:	blt	2a4e4 <__assert_fail@plt+0x18650>
   2a2c0:	ldrb	r2, [r4, #73]	; 0x49
   2a2c4:	cmp	r2, #0
   2a2c8:	beq	2a384 <__assert_fail@plt+0x184f0>
   2a2cc:	ldr	r7, [r4]
   2a2d0:	sub	r3, r5, r3
   2a2d4:	add	ip, r7, r0
   2a2d8:	add	r3, ip, r3
   2a2dc:	add	r8, ip, r5
   2a2e0:	cmp	r3, r7
   2a2e4:	movcc	r3, r7
   2a2e8:	mov	r7, r8
   2a2ec:	sub	r7, r7, #1
   2a2f0:	cmp	r7, r3
   2a2f4:	bcc	2a384 <__assert_fail@plt+0x184f0>
   2a2f8:	ldrb	r2, [r7]
   2a2fc:	and	r2, r2, #192	; 0xc0
   2a300:	cmp	r2, #128	; 0x80
   2a304:	beq	2a2ec <__assert_fail@plt+0x18458>
   2a308:	ldr	r0, [r4, #48]	; 0x30
   2a30c:	mov	sl, lr
   2a310:	mov	r1, r7
   2a314:	add	r3, ip, r0
   2a318:	ldr	r0, [r4, #64]	; 0x40
   2a31c:	sub	r2, r3, r7
   2a320:	cmp	r0, #0
   2a324:	bne	2aa08 <__assert_fail@plt+0x18b74>
   2a328:	mov	r0, #0
   2a32c:	add	r3, sp, #24
   2a330:	str	r0, [sp, #28]
   2a334:	str	r0, [sp, #24]
   2a338:	add	r0, sp, #20
   2a33c:	bl	34cac <__assert_fail@plt+0x22e18>
   2a340:	sub	r1, r8, r7
   2a344:	mvn	r7, #0
   2a348:	cmp	r0, r1
   2a34c:	bcc	2a370 <__assert_fail@plt+0x184dc>
   2a350:	cmn	r0, #3
   2a354:	bhi	2a370 <__assert_fail@plt+0x184dc>
   2a358:	mov	r2, #0
   2a35c:	sub	r0, r0, r1
   2a360:	str	r2, [r4, #16]
   2a364:	str	r2, [r4, #20]
   2a368:	str	r0, [r4, #28]
   2a36c:	ldr	r7, [sp, #20]
   2a370:	cmn	r7, #1
   2a374:	bne	2a854 <__assert_fail@plt+0x189c0>
   2a378:	ldr	r0, [r4, #24]
   2a37c:	ldr	r1, [r4, #32]
   2a380:	mov	lr, sl
   2a384:	add	r8, r1, r0
   2a388:	cmp	r8, r9
   2a38c:	bge	2a730 <__assert_fail@plt+0x1889c>
   2a390:	add	sl, r4, #16
   2a394:	str	lr, [sp]
   2a398:	b	2a7f4 <__assert_fail@plt+0x18960>
   2a39c:	ldr	ip, [r4, #12]
   2a3a0:	ldr	r0, [r4, #28]
   2a3a4:	mov	r1, #0
   2a3a8:	add	r2, r1, r0
   2a3ac:	add	r2, r2, r2, lsr #31
   2a3b0:	asr	r7, r2, #1
   2a3b4:	ldr	r3, [ip, r7, lsl #2]
   2a3b8:	mov	r2, r7
   2a3bc:	cmp	r3, r5
   2a3c0:	bgt	2a3d0 <__assert_fail@plt+0x1853c>
   2a3c4:	bge	2a3dc <__assert_fail@plt+0x18548>
   2a3c8:	add	r1, r7, #1
   2a3cc:	mov	r2, r0
   2a3d0:	cmp	r1, r2
   2a3d4:	mov	r0, r2
   2a3d8:	blt	2a3a8 <__assert_fail@plt+0x18514>
   2a3dc:	mov	r8, #0
   2a3e0:	cmp	r3, r5
   2a3e4:	movwlt	r8, #1
   2a3e8:	add	sl, r7, r8
   2a3ec:	cmp	sl, #0
   2a3f0:	ble	2a434 <__assert_fail@plt+0x185a0>
   2a3f4:	ldr	r1, [r4, #48]	; 0x30
   2a3f8:	sub	r0, sl, #1
   2a3fc:	cmp	r1, r0
   2a400:	beq	2a958 <__assert_fail@plt+0x18ac4>
   2a404:	ldr	r1, [r4, #80]	; 0x50
   2a408:	cmp	r1, #2
   2a40c:	blt	2a540 <__assert_fail@plt+0x186ac>
   2a410:	ldr	r0, [r4, #8]
   2a414:	mov	r1, sl
   2a418:	sub	r0, r0, #4
   2a41c:	ldr	r6, [r0, r1, lsl #2]
   2a420:	cmn	r6, #1
   2a424:	bne	2a574 <__assert_fail@plt+0x186e0>
   2a428:	sub	r1, r1, #1
   2a42c:	cmp	r1, #0
   2a430:	bgt	2a41c <__assert_fail@plt+0x18588>
   2a434:	ldr	r1, [r4, #60]	; 0x3c
   2a438:	b	2a598 <__assert_fail@plt+0x18704>
   2a43c:	ldr	r2, [r4, #28]
   2a440:	ldr	r0, [r4, #4]
   2a444:	add	r1, r0, r5
   2a448:	sub	r2, r2, r5
   2a44c:	bl	11a50 <memmove@plt>
   2a450:	b	2a1e8 <__assert_fail@plt+0x18354>
   2a454:	and	r0, r6, #2
   2a458:	eor	r1, r0, #10
   2a45c:	b	2a1b4 <__assert_fail@plt+0x18320>
   2a460:	ldrb	r0, [r4, #72]	; 0x48
   2a464:	cmp	r0, #0
   2a468:	beq	2a73c <__assert_fail@plt+0x188a8>
   2a46c:	ldr	r6, [r4, #36]	; 0x24
   2a470:	ldr	r5, [r4, #28]
   2a474:	cmp	r6, r1
   2a478:	movgt	r6, r1
   2a47c:	cmp	r5, r6
   2a480:	blt	2a48c <__assert_fail@plt+0x185f8>
   2a484:	b	2a4d8 <__assert_fail@plt+0x18644>
   2a488:	ldr	r9, [r4, #24]
   2a48c:	ldr	r1, [r4]
   2a490:	ldr	r0, [r4, #64]	; 0x40
   2a494:	add	r1, r1, r9
   2a498:	cmp	r0, #0
   2a49c:	ldrb	r7, [r1, r5]
   2a4a0:	ldrbne	r7, [r0, r7]
   2a4a4:	add	r0, r7, #128	; 0x80
   2a4a8:	lsr	r0, r0, #7
   2a4ac:	cmp	r0, #2
   2a4b0:	bhi	2a4c0 <__assert_fail@plt+0x1862c>
   2a4b4:	bl	11c24 <__ctype_toupper_loc@plt>
   2a4b8:	ldr	r0, [r0]
   2a4bc:	ldr	r7, [r0, r7, lsl #2]
   2a4c0:	ldr	r0, [r4, #4]
   2a4c4:	strb	r7, [r0, r5]
   2a4c8:	add	r5, r5, #1
   2a4cc:	cmp	r5, r6
   2a4d0:	blt	2a488 <__assert_fail@plt+0x185f4>
   2a4d4:	mov	r5, r6
   2a4d8:	str	r5, [r4, #28]
   2a4dc:	str	r5, [r4, #32]
   2a4e0:	b	2a27c <__assert_fail@plt+0x183e8>
   2a4e4:	ldr	r3, [r4]
   2a4e8:	add	r0, r5, r0
   2a4ec:	ldr	r1, [r4, #64]	; 0x40
   2a4f0:	add	r0, r3, r0
   2a4f4:	cmp	r1, #0
   2a4f8:	ldrb	r0, [r0, #-1]
   2a4fc:	str	r2, [r4, #32]
   2a500:	ldrbne	r0, [r1, r0]
   2a504:	ldr	r1, [r4, #68]	; 0x44
   2a508:	ubfx	r2, r0, #5, #3
   2a50c:	and	r3, r0, #31
   2a510:	ldr	r2, [r1, r2, lsl #2]
   2a514:	mov	r1, #1
   2a518:	tst	r2, r1, lsl r3
   2a51c:	bne	2a538 <__assert_fail@plt+0x186a4>
   2a520:	mov	r1, #0
   2a524:	cmp	r0, #10
   2a528:	bne	2a538 <__assert_fail@plt+0x186a4>
   2a52c:	ldrb	r1, [r4, #77]	; 0x4d
   2a530:	cmp	r1, #0
   2a534:	movwne	r1, #2
   2a538:	str	r1, [r4, #60]	; 0x3c
   2a53c:	b	2a200 <__assert_fail@plt+0x1836c>
   2a540:	ldr	r1, [r4, #4]
   2a544:	ldr	r2, [r4, #68]	; 0x44
   2a548:	ldrb	r0, [r1, r0]
   2a54c:	ubfx	r1, r0, #5, #3
   2a550:	and	r3, r0, #31
   2a554:	ldr	r2, [r2, r1, lsl #2]
   2a558:	mov	r1, #1
   2a55c:	tst	r2, r1, lsl r3
   2a560:	bne	2a598 <__assert_fail@plt+0x18704>
   2a564:	mov	r1, #0
   2a568:	cmp	r0, #10
   2a56c:	beq	2a58c <__assert_fail@plt+0x186f8>
   2a570:	b	2a598 <__assert_fail@plt+0x18704>
   2a574:	ldrb	r0, [r4, #78]	; 0x4e
   2a578:	cmp	r0, #0
   2a57c:	bne	2a9b8 <__assert_fail@plt+0x18b24>
   2a580:	mov	r1, #0
   2a584:	cmp	r6, #10
   2a588:	bne	2a598 <__assert_fail@plt+0x18704>
   2a58c:	ldrb	r1, [r4, #77]	; 0x4d
   2a590:	cmp	r1, #0
   2a594:	movwne	r1, #2
   2a598:	str	r1, [r4, #60]	; 0x3c
   2a59c:	cmp	sl, r5
   2a5a0:	ldr	r2, [r4, #28]
   2a5a4:	bne	2a634 <__assert_fail@plt+0x187a0>
   2a5a8:	cmp	r2, r5
   2a5ac:	ble	2a634 <__assert_fail@plt+0x187a0>
   2a5b0:	ldr	r0, [r4, #12]
   2a5b4:	ldr	r0, [r0, r5, lsl #2]
   2a5b8:	cmp	r0, r5
   2a5bc:	bne	2a634 <__assert_fail@plt+0x187a0>
   2a5c0:	ldr	r0, [r4, #8]
   2a5c4:	sub	r2, r2, r5
   2a5c8:	lsl	r2, r2, #2
   2a5cc:	add	r1, r0, r5, lsl #2
   2a5d0:	bl	11a50 <memmove@plt>
   2a5d4:	ldr	r2, [r4, #28]
   2a5d8:	ldr	r0, [r4, #4]
   2a5dc:	add	r1, r0, r5
   2a5e0:	sub	r2, r2, r5
   2a5e4:	bl	11a50 <memmove@plt>
   2a5e8:	ldr	r0, [r4, #28]
   2a5ec:	ldr	r1, [r4, #32]
   2a5f0:	sub	r0, r0, r5
   2a5f4:	sub	r1, r1, r5
   2a5f8:	cmp	r0, #1
   2a5fc:	str	r0, [r4, #28]
   2a600:	str	r1, [r4, #32]
   2a604:	blt	2a200 <__assert_fail@plt+0x1836c>
   2a608:	ldr	r0, [r4, #12]
   2a60c:	mov	r2, #0
   2a610:	add	r1, r0, r5, lsl #2
   2a614:	ldr	r3, [r1, r2, lsl #2]
   2a618:	sub	r3, r3, r5
   2a61c:	str	r3, [r0, r2, lsl #2]
   2a620:	add	r2, r2, #1
   2a624:	ldr	r3, [r4, #28]
   2a628:	cmp	r2, r3
   2a62c:	blt	2a614 <__assert_fail@plt+0x18780>
   2a630:	b	2a200 <__assert_fail@plt+0x1836c>
   2a634:	mov	r0, #0
   2a638:	strb	r0, [r4, #76]	; 0x4c
   2a63c:	sub	r0, r5, r9
   2a640:	ldr	r1, [r4, #44]	; 0x2c
   2a644:	ldr	r3, [r4, #52]	; 0x34
   2a648:	add	r1, r0, r1
   2a64c:	add	r0, r0, r3
   2a650:	str	r1, [r4, #48]	; 0x30
   2a654:	str	r0, [r4, #56]	; 0x38
   2a658:	add	r0, r7, r8
   2a65c:	sub	r1, r0, #1
   2a660:	add	r0, r1, #1
   2a664:	cmp	r0, #1
   2a668:	blt	2a680 <__assert_fail@plt+0x187ec>
   2a66c:	ldr	r3, [r4, #12]
   2a670:	ldr	r3, [r3, r1, lsl #2]
   2a674:	sub	r1, r1, #1
   2a678:	cmp	r3, r5
   2a67c:	beq	2a660 <__assert_fail@plt+0x187cc>
   2a680:	cmp	r0, r2
   2a684:	bge	2a6a4 <__assert_fail@plt+0x18810>
   2a688:	ldr	r1, [r4, #8]
   2a68c:	ldr	r3, [r1, r0, lsl #2]
   2a690:	cmn	r3, #1
   2a694:	bne	2a6a4 <__assert_fail@plt+0x18810>
   2a698:	add	r0, r0, #1
   2a69c:	cmp	r0, r2
   2a6a0:	blt	2a68c <__assert_fail@plt+0x187f8>
   2a6a4:	cmp	r0, r2
   2a6a8:	bne	2a6bc <__assert_fail@plt+0x18828>
   2a6ac:	mov	r0, #0
   2a6b0:	str	r0, [r4, #28]
   2a6b4:	str	r0, [r4, #32]
   2a6b8:	b	2a200 <__assert_fail@plt+0x1836c>
   2a6bc:	ldr	r1, [r4, #12]
   2a6c0:	ldr	r0, [r1, r0, lsl #2]
   2a6c4:	subs	r2, r0, r5
   2a6c8:	str	r2, [r4, #28]
   2a6cc:	beq	2a7bc <__assert_fail@plt+0x18928>
   2a6d0:	cmp	r2, #1
   2a6d4:	blt	2a6f8 <__assert_fail@plt+0x18864>
   2a6d8:	ldr	r0, [r4, #8]
   2a6dc:	mov	r1, #0
   2a6e0:	mvn	r3, #0
   2a6e4:	str	r3, [r0, r1, lsl #2]
   2a6e8:	add	r1, r1, #1
   2a6ec:	ldr	r2, [r4, #28]
   2a6f0:	cmp	r1, r2
   2a6f4:	blt	2a6e4 <__assert_fail@plt+0x18850>
   2a6f8:	ldr	r0, [r4, #4]
   2a6fc:	mov	r1, #255	; 0xff
   2a700:	bl	11cd8 <memset@plt>
   2a704:	ldr	r0, [r4, #28]
   2a708:	str	r0, [r4, #32]
   2a70c:	b	2a200 <__assert_fail@plt+0x1836c>
   2a710:	mov	r0, r6
   2a714:	bl	11cb4 <iswalnum@plt>
   2a718:	mov	r1, #1
   2a71c:	cmp	r6, #95	; 0x5f
   2a720:	beq	2a1b4 <__assert_fail@plt+0x18320>
   2a724:	cmp	r0, #0
   2a728:	beq	2a19c <__assert_fail@plt+0x18308>
   2a72c:	b	2a1b4 <__assert_fail@plt+0x18320>
   2a730:	sub	r0, r8, r9
   2a734:	str	r0, [r4, #28]
   2a738:	b	2a870 <__assert_fail@plt+0x189dc>
   2a73c:	ldr	r3, [r4, #64]	; 0x40
   2a740:	cmp	r3, #0
   2a744:	beq	2a27c <__assert_fail@plt+0x183e8>
   2a748:	ldr	r0, [r4, #36]	; 0x24
   2a74c:	ldr	r2, [r4, #28]
   2a750:	cmp	r0, r1
   2a754:	movgt	r0, r1
   2a758:	cmp	r2, r0
   2a75c:	bge	2a7b0 <__assert_fail@plt+0x1891c>
   2a760:	ldr	r7, [r4]
   2a764:	add	r1, r2, r9
   2a768:	ldr	r6, [r4, #4]
   2a76c:	ldrb	r1, [r7, r1]
   2a770:	ldrb	r1, [r3, r1]
   2a774:	strb	r1, [r6, r2]
   2a778:	add	r1, r2, #1
   2a77c:	cmp	r1, r0
   2a780:	bge	2a7ac <__assert_fail@plt+0x18918>
   2a784:	ldm	r4, {r2, r3}
   2a788:	ldr	r7, [r4, #24]
   2a78c:	ldr	r6, [r4, #64]	; 0x40
   2a790:	add	r2, r2, r7
   2a794:	ldrb	r2, [r2, r1]
   2a798:	ldrb	r2, [r6, r2]
   2a79c:	strb	r2, [r3, r1]
   2a7a0:	add	r1, r1, #1
   2a7a4:	cmp	r1, r0
   2a7a8:	blt	2a784 <__assert_fail@plt+0x188f0>
   2a7ac:	mov	r2, r0
   2a7b0:	str	r2, [r4, #28]
   2a7b4:	str	r2, [r4, #32]
   2a7b8:	b	2a27c <__assert_fail@plt+0x183e8>
   2a7bc:	mov	r0, #0
   2a7c0:	str	r0, [r4, #32]
   2a7c4:	b	2a200 <__assert_fail@plt+0x1836c>
   2a7c8:	cmp	r7, #0
   2a7cc:	mov	r1, #0
   2a7d0:	ldr	r3, [sp, #4]
   2a7d4:	ldr	r2, [sp, #8]
   2a7d8:	cmpne	r0, #0
   2a7dc:	ldrne	r0, [r4]
   2a7e0:	ldrbne	r1, [r0, r8]
   2a7e4:	stm	sl, {r2, r3}
   2a7e8:	mov	r0, #1
   2a7ec:	mov	r7, r1
   2a7f0:	b	2a834 <__assert_fail@plt+0x189a0>
   2a7f4:	ldr	r0, [r4]
   2a7f8:	ldr	r2, [r4, #44]	; 0x2c
   2a7fc:	mov	r3, sl
   2a800:	add	r1, r0, r8
   2a804:	ldr	r0, [sl]
   2a808:	sub	r7, r2, r8
   2a80c:	mov	r2, r7
   2a810:	str	r0, [sp, #8]
   2a814:	ldr	r0, [sl, #4]
   2a818:	str	r0, [sp, #4]
   2a81c:	add	r0, sp, #24
   2a820:	bl	34cac <__assert_fail@plt+0x22e18>
   2a824:	sub	r1, r0, #1
   2a828:	cmn	r1, #3
   2a82c:	bcs	2a7c8 <__assert_fail@plt+0x18934>
   2a830:	ldr	r7, [sp, #24]
   2a834:	add	r8, r0, r8
   2a838:	cmp	r8, r9
   2a83c:	blt	2a7f4 <__assert_fail@plt+0x18960>
   2a840:	ldr	lr, [sp]
   2a844:	sub	r0, r8, r9
   2a848:	cmn	r7, #1
   2a84c:	str	r0, [r4, #28]
   2a850:	beq	2a870 <__assert_fail@plt+0x189dc>
   2a854:	ldrb	r0, [r4, #78]	; 0x4e
   2a858:	cmp	r0, #0
   2a85c:	bne	2a9d8 <__assert_fail@plt+0x18b44>
   2a860:	mov	r1, #0
   2a864:	cmp	r7, #10
   2a868:	beq	2a908 <__assert_fail@plt+0x18a74>
   2a86c:	b	2a914 <__assert_fail@plt+0x18a80>
   2a870:	cmp	lr, #0
   2a874:	ble	2a8b4 <__assert_fail@plt+0x18a20>
   2a878:	ldr	r1, [r4, #48]	; 0x30
   2a87c:	sub	r0, lr, #1
   2a880:	cmp	r1, r0
   2a884:	beq	2a9ac <__assert_fail@plt+0x18b18>
   2a888:	ldr	r1, [r4, #80]	; 0x50
   2a88c:	cmp	r1, #2
   2a890:	blt	2a8bc <__assert_fail@plt+0x18a28>
   2a894:	ldr	r0, [r4, #8]
   2a898:	sub	r0, r0, #4
   2a89c:	ldr	r6, [r0, lr, lsl #2]
   2a8a0:	cmn	r6, #1
   2a8a4:	bne	2a8f0 <__assert_fail@plt+0x18a5c>
   2a8a8:	sub	lr, lr, #1
   2a8ac:	cmp	lr, #0
   2a8b0:	bgt	2a89c <__assert_fail@plt+0x18a08>
   2a8b4:	ldr	r1, [r4, #60]	; 0x3c
   2a8b8:	b	2a914 <__assert_fail@plt+0x18a80>
   2a8bc:	ldr	r1, [r4, #4]
   2a8c0:	ldr	r2, [r4, #68]	; 0x44
   2a8c4:	ldrb	r0, [r1, r0]
   2a8c8:	ubfx	r1, r0, #5, #3
   2a8cc:	and	r3, r0, #31
   2a8d0:	ldr	r2, [r2, r1, lsl #2]
   2a8d4:	mov	r1, #1
   2a8d8:	tst	r2, r1, lsl r3
   2a8dc:	bne	2a914 <__assert_fail@plt+0x18a80>
   2a8e0:	mov	r1, #0
   2a8e4:	cmp	r0, #10
   2a8e8:	beq	2a908 <__assert_fail@plt+0x18a74>
   2a8ec:	b	2a914 <__assert_fail@plt+0x18a80>
   2a8f0:	ldrb	r0, [r4, #78]	; 0x4e
   2a8f4:	cmp	r0, #0
   2a8f8:	bne	2aa50 <__assert_fail@plt+0x18bbc>
   2a8fc:	mov	r1, #0
   2a900:	cmp	r6, #10
   2a904:	bne	2a914 <__assert_fail@plt+0x18a80>
   2a908:	ldrb	r1, [r4, #77]	; 0x4d
   2a90c:	cmp	r1, #0
   2a910:	movwne	r1, #2
   2a914:	str	r1, [r4, #60]	; 0x3c
   2a918:	mov	r0, #0
   2a91c:	ldr	r2, [r4, #28]
   2a920:	cmp	r2, #0
   2a924:	bne	2a964 <__assert_fail@plt+0x18ad0>
   2a928:	str	r0, [r4, #32]
   2a92c:	b	2a200 <__assert_fail@plt+0x1836c>
   2a930:	mov	r2, #0
   2a934:	strb	r2, [r4, #76]	; 0x4c
   2a938:	sub	r2, r5, r9
   2a93c:	ldr	r3, [r4, #44]	; 0x2c
   2a940:	ldr	r7, [r4, #52]	; 0x34
   2a944:	add	r3, r2, r3
   2a948:	add	r2, r2, r7
   2a94c:	str	r3, [r4, #48]	; 0x30
   2a950:	str	r2, [r4, #56]	; 0x38
   2a954:	b	2a2ac <__assert_fail@plt+0x18418>
   2a958:	and	r0, r6, #2
   2a95c:	eor	r1, r0, #10
   2a960:	b	2a598 <__assert_fail@plt+0x18704>
   2a964:	cmp	r2, #1
   2a968:	blt	2a98c <__assert_fail@plt+0x18af8>
   2a96c:	ldr	r0, [r4, #8]
   2a970:	mov	r1, #0
   2a974:	mvn	r3, #0
   2a978:	str	r3, [r0, r1, lsl #2]
   2a97c:	add	r1, r1, #1
   2a980:	ldr	r2, [r4, #28]
   2a984:	cmp	r1, r2
   2a988:	blt	2a978 <__assert_fail@plt+0x18ae4>
   2a98c:	ldrb	r0, [r4, #75]	; 0x4b
   2a990:	cmp	r0, #0
   2a994:	beq	2a9fc <__assert_fail@plt+0x18b68>
   2a998:	ldr	r0, [r4, #4]
   2a99c:	mov	r1, #255	; 0xff
   2a9a0:	bl	11cd8 <memset@plt>
   2a9a4:	ldr	r0, [r4, #28]
   2a9a8:	b	2a928 <__assert_fail@plt+0x18a94>
   2a9ac:	and	r0, r6, #2
   2a9b0:	eor	r1, r0, #10
   2a9b4:	b	2a914 <__assert_fail@plt+0x18a80>
   2a9b8:	mov	r0, r6
   2a9bc:	bl	11cb4 <iswalnum@plt>
   2a9c0:	mov	r1, #1
   2a9c4:	cmp	r6, #95	; 0x5f
   2a9c8:	beq	2a598 <__assert_fail@plt+0x18704>
   2a9cc:	cmp	r0, #0
   2a9d0:	beq	2a580 <__assert_fail@plt+0x186ec>
   2a9d4:	b	2a598 <__assert_fail@plt+0x18704>
   2a9d8:	mov	r0, r7
   2a9dc:	bl	11cb4 <iswalnum@plt>
   2a9e0:	mov	r1, #1
   2a9e4:	cmp	r7, #95	; 0x5f
   2a9e8:	beq	2a914 <__assert_fail@plt+0x18a80>
   2a9ec:	cmp	r0, #0
   2a9f0:	mov	r2, r7
   2a9f4:	beq	2a860 <__assert_fail@plt+0x189cc>
   2a9f8:	b	2a914 <__assert_fail@plt+0x18a80>
   2a9fc:	mov	r0, r2
   2aa00:	str	r2, [r4, #32]
   2aa04:	b	2a200 <__assert_fail@plt+0x1836c>
   2aa08:	cmp	r2, #1
   2aa0c:	blt	2aa70 <__assert_fail@plt+0x18bdc>
   2aa10:	sub	r1, r7, #1
   2aa14:	sub	r1, r1, r3
   2aa18:	mvn	r3, #1
   2aa1c:	cmn	r1, #7
   2aa20:	mvnle	r1, #6
   2aa24:	sub	ip, r3, r1
   2aa28:	add	r1, sp, #14
   2aa2c:	ldrb	r3, [r7, ip]
   2aa30:	sub	lr, ip, #1
   2aa34:	ldrb	r3, [r0, r3]
   2aa38:	strb	r3, [r1, ip]
   2aa3c:	add	r3, ip, #1
   2aa40:	mov	ip, lr
   2aa44:	cmp	r3, #1
   2aa48:	bgt	2aa2c <__assert_fail@plt+0x18b98>
   2aa4c:	b	2a328 <__assert_fail@plt+0x18494>
   2aa50:	mov	r0, r6
   2aa54:	bl	11cb4 <iswalnum@plt>
   2aa58:	mov	r1, #1
   2aa5c:	cmp	r6, #95	; 0x5f
   2aa60:	beq	2a914 <__assert_fail@plt+0x18a80>
   2aa64:	cmp	r0, #0
   2aa68:	beq	2a8fc <__assert_fail@plt+0x18a68>
   2aa6c:	b	2a914 <__assert_fail@plt+0x18a80>
   2aa70:	add	r1, sp, #14
   2aa74:	b	2a328 <__assert_fail@plt+0x18494>
   2aa78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2aa7c:	add	fp, sp, #24
   2aa80:	mov	r8, r0
   2aa84:	ldr	r0, [r0, #124]	; 0x7c
   2aa88:	cmp	r0, #1
   2aa8c:	blt	2ab10 <__assert_fail@plt+0x18c7c>
   2aa90:	mov	r7, #0
   2aa94:	ldr	r0, [r8, #132]	; 0x84
   2aa98:	ldr	r5, [r0, r7, lsl #2]
   2aa9c:	ldr	r0, [r5, #16]
   2aaa0:	cmp	r0, #1
   2aaa4:	blt	2aad4 <__assert_fail@plt+0x18c40>
   2aaa8:	mov	r4, #0
   2aaac:	ldr	r0, [r5, #20]
   2aab0:	ldr	r6, [r0, r4, lsl #2]
   2aab4:	ldr	r0, [r6, #16]
   2aab8:	bl	17754 <__assert_fail@plt+0x58c0>
   2aabc:	mov	r0, r6
   2aac0:	bl	17754 <__assert_fail@plt+0x58c0>
   2aac4:	ldr	r0, [r5, #16]
   2aac8:	add	r4, r4, #1
   2aacc:	cmp	r4, r0
   2aad0:	blt	2aaac <__assert_fail@plt+0x18c18>
   2aad4:	ldr	r0, [r5, #20]
   2aad8:	bl	17754 <__assert_fail@plt+0x58c0>
   2aadc:	ldr	r0, [r5, #8]
   2aae0:	cmp	r0, #0
   2aae4:	beq	2aaf8 <__assert_fail@plt+0x18c64>
   2aae8:	ldr	r0, [r0, #8]
   2aaec:	bl	17754 <__assert_fail@plt+0x58c0>
   2aaf0:	ldr	r0, [r5, #8]
   2aaf4:	bl	17754 <__assert_fail@plt+0x58c0>
   2aaf8:	mov	r0, r5
   2aafc:	bl	17754 <__assert_fail@plt+0x58c0>
   2ab00:	ldr	r0, [r8, #124]	; 0x7c
   2ab04:	add	r7, r7, #1
   2ab08:	cmp	r7, r0
   2ab0c:	blt	2aa94 <__assert_fail@plt+0x18c00>
   2ab10:	mov	r0, #0
   2ab14:	str	r0, [r8, #108]	; 0x6c
   2ab18:	str	r0, [r8, #124]	; 0x7c
   2ab1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ab20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ab24:	add	fp, sp, #28
   2ab28:	sub	sp, sp, #4
   2ab2c:	mov	sl, r0
   2ab30:	ldr	r0, [r1, #4]
   2ab34:	cmp	r0, #1
   2ab38:	blt	2ac04 <__assert_fail@plt+0x18d70>
   2ab3c:	ldr	r7, [sl, #84]	; 0x54
   2ab40:	mov	r8, r2
   2ab44:	mov	r5, r1
   2ab48:	mov	r4, #0
   2ab4c:	b	2ab74 <__assert_fail@plt+0x18ce0>
   2ab50:	ldr	r0, [sl, #132]	; 0x84
   2ab54:	lsl	r1, r9, #3
   2ab58:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2ab5c:	cmp	r0, #0
   2ab60:	beq	2ac10 <__assert_fail@plt+0x18d7c>
   2ab64:	lsl	r1, r9, #1
   2ab68:	str	r1, [sl, #128]	; 0x80
   2ab6c:	str	r0, [sl, #132]	; 0x84
   2ab70:	b	2abbc <__assert_fail@plt+0x18d28>
   2ab74:	ldr	r1, [r5, #8]
   2ab78:	ldr	r6, [r1, r4, lsl #2]
   2ab7c:	ldr	r1, [r7]
   2ab80:	add	r2, r1, r6, lsl #3
   2ab84:	ldrb	r2, [r2, #4]
   2ab88:	cmp	r2, #8
   2ab8c:	bne	2abf8 <__assert_fail@plt+0x18d64>
   2ab90:	ldr	r1, [r1, r6, lsl #3]
   2ab94:	cmp	r1, #31
   2ab98:	bgt	2abf8 <__assert_fail@plt+0x18d64>
   2ab9c:	ldr	r2, [r7, #80]	; 0x50
   2aba0:	mov	r3, #1
   2aba4:	tst	r2, r3, lsl r1
   2aba8:	beq	2abf8 <__assert_fail@plt+0x18d64>
   2abac:	ldr	r9, [sl, #124]	; 0x7c
   2abb0:	ldr	r0, [sl, #128]	; 0x80
   2abb4:	cmp	r9, r0
   2abb8:	beq	2ab50 <__assert_fail@plt+0x18cbc>
   2abbc:	mov	r0, #1
   2abc0:	mov	r1, #24
   2abc4:	bl	33c44 <__assert_fail@plt+0x21db0>
   2abc8:	ldr	r1, [sl, #124]	; 0x7c
   2abcc:	ldr	r2, [sl, #132]	; 0x84
   2abd0:	str	r0, [r2, r1, lsl #2]
   2abd4:	ldr	r0, [sl, #132]	; 0x84
   2abd8:	ldr	r0, [r0, r1, lsl #2]
   2abdc:	cmp	r0, #0
   2abe0:	beq	2ac10 <__assert_fail@plt+0x18d7c>
   2abe4:	add	r1, r1, #1
   2abe8:	str	r6, [r0, #4]
   2abec:	str	r1, [sl, #124]	; 0x7c
   2abf0:	str	r8, [r0]
   2abf4:	ldr	r0, [r5, #4]
   2abf8:	add	r4, r4, #1
   2abfc:	cmp	r4, r0
   2ac00:	blt	2ab74 <__assert_fail@plt+0x18ce0>
   2ac04:	mov	r0, #0
   2ac08:	sub	sp, fp, #28
   2ac0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac10:	mov	r0, #12
   2ac14:	sub	sp, fp, #28
   2ac18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac20:	add	fp, sp, #28
   2ac24:	sub	sp, sp, #76	; 0x4c
   2ac28:	mov	r9, r0
   2ac2c:	ldr	r0, [r1, #4]
   2ac30:	cmp	r0, #1
   2ac34:	blt	2b56c <__assert_fail@plt+0x196d8>
   2ac38:	ldr	r2, [r9, #84]	; 0x54
   2ac3c:	ldr	r8, [r9, #40]	; 0x28
   2ac40:	mov	r3, #0
   2ac44:	str	r9, [sp, #40]	; 0x28
   2ac48:	str	r1, [sp, #16]
   2ac4c:	str	r8, [sp, #52]	; 0x34
   2ac50:	str	r2, [sp, #20]
   2ac54:	b	2ac8c <__assert_fail@plt+0x18df8>
   2ac58:	ldr	r0, [r9, #88]	; 0x58
   2ac5c:	and	r0, r0, #2
   2ac60:	eor	r1, r0, #10
   2ac64:	b	2ad70 <__assert_fail@plt+0x18edc>
   2ac68:	mov	r0, r4
   2ac6c:	bl	11cb4 <iswalnum@plt>
   2ac70:	mov	r1, #1
   2ac74:	mov	r2, #0
   2ac78:	cmp	r4, #95	; 0x5f
   2ac7c:	beq	2ad88 <__assert_fail@plt+0x18ef4>
   2ac80:	cmp	r0, #0
   2ac84:	beq	2ad58 <__assert_fail@plt+0x18ec4>
   2ac88:	b	2ad88 <__assert_fail@plt+0x18ef4>
   2ac8c:	ldr	r0, [r1, #8]
   2ac90:	str	r3, [sp, #24]
   2ac94:	ldr	r3, [r0, r3, lsl #2]
   2ac98:	ldr	r0, [r2]
   2ac9c:	add	r5, r0, r3, lsl #3
   2aca0:	mov	r1, r3
   2aca4:	str	r3, [sp, #48]	; 0x30
   2aca8:	ldr	r6, [r5, #4]!
   2acac:	uxtb	r0, r6
   2acb0:	cmp	r0, #4
   2acb4:	bne	2b550 <__assert_fail@plt+0x196bc>
   2acb8:	movw	r0, #65280	; 0xff00
   2acbc:	movt	r0, #3
   2acc0:	tst	r6, r0
   2acc4:	beq	2adbc <__assert_fail@plt+0x18f28>
   2acc8:	cmn	r8, #1
   2accc:	ble	2ad0c <__assert_fail@plt+0x18e78>
   2acd0:	ldr	r0, [r9, #48]	; 0x30
   2acd4:	cmp	r0, r8
   2acd8:	beq	2ac58 <__assert_fail@plt+0x18dc4>
   2acdc:	ldr	r0, [r9, #80]	; 0x50
   2ace0:	cmp	r0, #2
   2ace4:	blt	2ad14 <__assert_fail@plt+0x18e80>
   2ace8:	ldr	r0, [r9, #8]
   2acec:	mov	r1, r8
   2acf0:	ldr	r4, [r0, r1, lsl #2]
   2acf4:	cmn	r4, #1
   2acf8:	bne	2ad4c <__assert_fail@plt+0x18eb8>
   2acfc:	sub	r2, r1, #1
   2ad00:	cmp	r1, #0
   2ad04:	mov	r1, r2
   2ad08:	bgt	2acf0 <__assert_fail@plt+0x18e5c>
   2ad0c:	ldr	r1, [r9, #60]	; 0x3c
   2ad10:	b	2ad70 <__assert_fail@plt+0x18edc>
   2ad14:	ldr	r0, [r9, #4]
   2ad18:	ldr	r1, [r9, #68]	; 0x44
   2ad1c:	ldrb	r0, [r0, r8]
   2ad20:	ubfx	r2, r0, #5, #3
   2ad24:	and	r7, r0, #31
   2ad28:	ldr	r3, [r1, r2, lsl #2]
   2ad2c:	mov	r1, #1
   2ad30:	mov	r2, #0
   2ad34:	tst	r3, r1, lsl r7
   2ad38:	bne	2ad88 <__assert_fail@plt+0x18ef4>
   2ad3c:	mov	r1, #0
   2ad40:	cmp	r0, #10
   2ad44:	beq	2ad64 <__assert_fail@plt+0x18ed0>
   2ad48:	b	2ad70 <__assert_fail@plt+0x18edc>
   2ad4c:	ldrb	r0, [r9, #78]	; 0x4e
   2ad50:	cmp	r0, #0
   2ad54:	bne	2ac68 <__assert_fail@plt+0x18dd4>
   2ad58:	mov	r1, #0
   2ad5c:	cmp	r4, #10
   2ad60:	bne	2ad70 <__assert_fail@plt+0x18edc>
   2ad64:	ldrb	r1, [r9, #77]	; 0x4d
   2ad68:	cmp	r1, #0
   2ad6c:	movwne	r1, #2
   2ad70:	and	r0, r1, #1
   2ad74:	tst	r6, #1024	; 0x400
   2ad78:	eor	r2, r0, #1
   2ad7c:	beq	2ad88 <__assert_fail@plt+0x18ef4>
   2ad80:	cmp	r0, #0
   2ad84:	beq	2b550 <__assert_fail@plt+0x196bc>
   2ad88:	ldr	r0, [r5]
   2ad8c:	cmp	r2, #0
   2ad90:	bne	2ad9c <__assert_fail@plt+0x18f08>
   2ad94:	ands	r2, r0, #2048	; 0x800
   2ad98:	bne	2b550 <__assert_fail@plt+0x196bc>
   2ad9c:	tst	r1, #2
   2ada0:	bne	2adac <__assert_fail@plt+0x18f18>
   2ada4:	ands	r2, r0, #8192	; 0x2000
   2ada8:	bne	2b550 <__assert_fail@plt+0x196bc>
   2adac:	tst	r1, #8
   2adb0:	bne	2adbc <__assert_fail@plt+0x18f28>
   2adb4:	ands	r0, r0, #32768	; 0x8000
   2adb8:	bne	2b550 <__assert_fail@plt+0x196bc>
   2adbc:	ldr	r2, [r9, #108]	; 0x6c
   2adc0:	ldr	r0, [r9, #84]	; 0x54
   2adc4:	ldr	ip, [r9, #4]
   2adc8:	cmp	r2, #1
   2adcc:	str	r0, [sp, #28]
   2add0:	str	r2, [sp, #12]
   2add4:	blt	2ae14 <__assert_fail@plt+0x18f80>
   2add8:	ldr	r1, [r9, #116]	; 0x74
   2addc:	mov	r0, #0
   2ade0:	mov	r5, #1
   2ade4:	add	r3, r2, r0
   2ade8:	add	r3, r3, r3, lsr #31
   2adec:	asr	r7, r3, #1
   2adf0:	add	r6, r7, r7, lsl #1
   2adf4:	add	r6, r1, r6, lsl #3
   2adf8:	ldr	r6, [r6, #4]
   2adfc:	cmp	r6, r8
   2ae00:	addlt	r0, r5, r3, asr #1
   2ae04:	movge	r2, r7
   2ae08:	cmp	r0, r2
   2ae0c:	blt	2ade4 <__assert_fail@plt+0x18f50>
   2ae10:	b	2ae18 <__assert_fail@plt+0x18f84>
   2ae14:	mov	r0, #0
   2ae18:	ldr	r1, [sp, #12]
   2ae1c:	ldr	r5, [sp, #28]
   2ae20:	cmp	r0, r1
   2ae24:	bge	2ae68 <__assert_fail@plt+0x18fd4>
   2ae28:	cmn	r0, #1
   2ae2c:	beq	2ae68 <__assert_fail@plt+0x18fd4>
   2ae30:	ldr	r1, [r9, #116]	; 0x74
   2ae34:	add	r0, r0, r0, lsl #1
   2ae38:	add	r0, r1, r0, lsl #3
   2ae3c:	ldr	r1, [r0, #4]
   2ae40:	cmp	r1, r8
   2ae44:	bne	2ae68 <__assert_fail@plt+0x18fd4>
   2ae48:	ldr	r1, [r0]
   2ae4c:	ldr	r2, [sp, #48]	; 0x30
   2ae50:	cmp	r1, r2
   2ae54:	beq	2b278 <__assert_fail@plt+0x193e4>
   2ae58:	ldrb	r1, [r0, #20]
   2ae5c:	add	r0, r0, #24
   2ae60:	cmp	r1, #0
   2ae64:	bne	2ae48 <__assert_fail@plt+0x18fb4>
   2ae68:	ldr	r0, [r9, #124]	; 0x7c
   2ae6c:	cmp	r0, #1
   2ae70:	blt	2b278 <__assert_fail@plt+0x193e4>
   2ae74:	ldr	r0, [r5]
   2ae78:	ldr	r1, [sp, #48]	; 0x30
   2ae7c:	mov	r2, #0
   2ae80:	ldr	r1, [r0, r1, lsl #3]
   2ae84:	str	r1, [sp, #36]	; 0x24
   2ae88:	b	2ae90 <__assert_fail@plt+0x18ffc>
   2ae8c:	ldr	r0, [r5]
   2ae90:	ldr	r1, [r9, #132]	; 0x84
   2ae94:	str	r2, [sp, #32]
   2ae98:	ldr	lr, [r1, r2, lsl #2]
   2ae9c:	ldr	r1, [lr, #4]
   2aea0:	ldr	r0, [r0, r1, lsl #3]
   2aea4:	ldr	r1, [sp, #36]	; 0x24
   2aea8:	cmp	r0, r1
   2aeac:	bne	2b248 <__assert_fail@plt+0x193b4>
   2aeb0:	ldr	r0, [lr, #16]
   2aeb4:	ldr	r2, [lr]
   2aeb8:	mov	r8, #0
   2aebc:	str	lr, [sp, #44]	; 0x2c
   2aec0:	cmp	r0, #1
   2aec4:	blt	2aed4 <__assert_fail@plt+0x19040>
   2aec8:	ldr	r6, [sp, #52]	; 0x34
   2aecc:	mov	r7, r2
   2aed0:	b	2af58 <__assert_fail@plt+0x190c4>
   2aed4:	ldr	r6, [sp, #52]	; 0x34
   2aed8:	b	2b004 <__assert_fail@plt+0x19170>
   2aedc:	ldr	r2, [r9, #48]	; 0x30
   2aee0:	cmp	r5, r2
   2aee4:	bgt	2b000 <__assert_fail@plt+0x1916c>
   2aee8:	ldr	r0, [r9, #36]	; 0x24
   2aeec:	ldr	r3, [r9, #104]	; 0x68
   2aef0:	cmp	r0, r5
   2aef4:	cmple	r0, r2
   2aef8:	blt	2af08 <__assert_fail@plt+0x19074>
   2aefc:	cmp	r1, r5
   2af00:	cmple	r1, r2
   2af04:	bge	2af24 <__assert_fail@plt+0x19090>
   2af08:	ldr	r0, [sp, #40]	; 0x28
   2af0c:	add	r1, r5, #1
   2af10:	mov	r9, r3
   2af14:	bl	2b5a8 <__assert_fail@plt+0x19714>
   2af18:	mov	r3, r9
   2af1c:	cmp	r0, #0
   2af20:	bne	2b580 <__assert_fail@plt+0x196ec>
   2af24:	ldr	r9, [sp, #40]	; 0x28
   2af28:	cmp	r5, r3
   2af2c:	ble	2af50 <__assert_fail@plt+0x190bc>
   2af30:	sub	r0, r5, r3
   2af34:	mov	r1, #0
   2af38:	lsl	r2, r0, #2
   2af3c:	ldr	r0, [r9, #100]	; 0x64
   2af40:	add	r0, r0, r3, lsl #2
   2af44:	add	r0, r0, #4
   2af48:	bl	11cd8 <memset@plt>
   2af4c:	str	r5, [r9, #104]	; 0x68
   2af50:	ldr	ip, [r9, #4]
   2af54:	b	2af84 <__assert_fail@plt+0x190f0>
   2af58:	ldr	r1, [lr, #20]
   2af5c:	ldr	sl, [r1, r8, lsl #2]
   2af60:	ldr	r1, [sl, #4]
   2af64:	sub	r4, r1, r7
   2af68:	str	r1, [fp, #-48]	; 0xffffffd0
   2af6c:	cmp	r4, #1
   2af70:	blt	2afa4 <__assert_fail@plt+0x19110>
   2af74:	ldr	r1, [r9, #28]
   2af78:	add	r5, r4, r6
   2af7c:	cmp	r5, r1
   2af80:	bgt	2aedc <__assert_fail@plt+0x19048>
   2af84:	add	r0, ip, r6
   2af88:	add	r1, ip, r7
   2af8c:	mov	r2, r4
   2af90:	mov	r5, ip
   2af94:	bl	11ac8 <memcmp@plt>
   2af98:	ldr	lr, [sp, #44]	; 0x2c
   2af9c:	cmp	r0, #0
   2afa0:	bne	2aff8 <__assert_fail@plt+0x19164>
   2afa4:	ldr	r0, [sp, #52]	; 0x34
   2afa8:	ldr	r3, [sp, #48]	; 0x30
   2afac:	mov	r1, lr
   2afb0:	mov	r2, sl
   2afb4:	mov	r5, lr
   2afb8:	str	r0, [sp]
   2afbc:	mov	r0, r9
   2afc0:	bl	2bc48 <__assert_fail@plt+0x19db4>
   2afc4:	cmp	r0, #1
   2afc8:	bhi	2b580 <__assert_fail@plt+0x196ec>
   2afcc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2afd0:	ldr	r0, [r5, #16]
   2afd4:	ldr	ip, [r9, #4]
   2afd8:	add	r8, r8, #1
   2afdc:	add	r6, r4, r6
   2afe0:	mov	lr, r5
   2afe4:	mov	r1, r9
   2afe8:	cmp	r8, r0
   2afec:	mov	r7, r2
   2aff0:	blt	2af58 <__assert_fail@plt+0x190c4>
   2aff4:	b	2b004 <__assert_fail@plt+0x19170>
   2aff8:	ldr	r0, [lr, #16]
   2affc:	mov	ip, r5
   2b000:	mov	r2, r7
   2b004:	ldr	r5, [sp, #28]
   2b008:	cmp	r8, r0
   2b00c:	bge	2b018 <__assert_fail@plt+0x19184>
   2b010:	ldr	r8, [sp, #52]	; 0x34
   2b014:	b	2b248 <__assert_fail@plt+0x193b4>
   2b018:	cmp	r8, #0
   2b01c:	ldr	r8, [sp, #52]	; 0x34
   2b020:	addne	r2, r2, #1
   2b024:	cmp	r2, r8
   2b028:	bgt	2b248 <__assert_fail@plt+0x193b4>
   2b02c:	b	2b19c <__assert_fail@plt+0x19308>
   2b030:	cmn	r4, #1
   2b034:	beq	2b234 <__assert_fail@plt+0x193a0>
   2b038:	ldr	r1, [lr, #8]
   2b03c:	str	r6, [fp, #-48]	; 0xffffffd0
   2b040:	mov	r6, ip
   2b044:	mov	r5, r9
   2b048:	cmp	r1, #0
   2b04c:	bne	2b07c <__assert_fail@plt+0x191e8>
   2b050:	ldr	r0, [lr]
   2b054:	add	r1, sl, #1
   2b058:	mov	r9, #12
   2b05c:	sub	r1, r1, r0
   2b060:	mov	r0, #12
   2b064:	bl	33c44 <__assert_fail@plt+0x21db0>
   2b068:	ldr	lr, [sp, #44]	; 0x2c
   2b06c:	mov	r1, r0
   2b070:	cmp	r0, #0
   2b074:	str	r0, [lr, #8]
   2b078:	beq	2b570 <__assert_fail@plt+0x196dc>
   2b07c:	ldr	r3, [lr]
   2b080:	ldr	r2, [lr, #4]
   2b084:	stm	sp, {r4, sl}
   2b088:	mov	r0, #9
   2b08c:	str	r0, [sp, #8]
   2b090:	ldr	r0, [sp, #40]	; 0x28
   2b094:	bl	2be0c <__assert_fail@plt+0x19f78>
   2b098:	mov	ip, r6
   2b09c:	ldr	lr, [sp, #44]	; 0x2c
   2b0a0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2b0a4:	cmp	r0, #1
   2b0a8:	beq	2b238 <__assert_fail@plt+0x193a4>
   2b0ac:	mov	r9, r0
   2b0b0:	cmp	r0, #0
   2b0b4:	bne	2b570 <__assert_fail@plt+0x196dc>
   2b0b8:	ldr	r1, [lr, #12]
   2b0bc:	ldr	r0, [lr, #16]
   2b0c0:	ldr	r7, [sp, #40]	; 0x28
   2b0c4:	cmp	r0, r1
   2b0c8:	beq	2b16c <__assert_fail@plt+0x192d8>
   2b0cc:	mov	r0, #1
   2b0d0:	mov	r1, #20
   2b0d4:	bl	33c44 <__assert_fail@plt+0x21db0>
   2b0d8:	cmp	r0, #0
   2b0dc:	beq	2b588 <__assert_fail@plt+0x196f4>
   2b0e0:	ldr	r1, [sp, #44]	; 0x2c
   2b0e4:	mov	r2, r0
   2b0e8:	ldr	r0, [r1, #16]
   2b0ec:	ldr	r3, [r1, #20]
   2b0f0:	str	r2, [r3, r0, lsl #2]
   2b0f4:	stm	r2, {r4, sl}
   2b0f8:	add	r0, r0, #1
   2b0fc:	ldr	r3, [sp, #48]	; 0x30
   2b100:	str	r0, [r1, #16]
   2b104:	mov	r0, r7
   2b108:	str	r8, [sp]
   2b10c:	bl	2bc48 <__assert_fail@plt+0x19db4>
   2b110:	cmp	r0, #1
   2b114:	bhi	2b580 <__assert_fail@plt+0x196ec>
   2b118:	ldr	ip, [r7, #4]
   2b11c:	ldr	lr, [sp, #44]	; 0x2c
   2b120:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2b124:	b	2b238 <__assert_fail@plt+0x193a4>
   2b128:	ldr	r0, [r9, #48]	; 0x30
   2b12c:	cmp	r6, r0
   2b130:	bge	2b248 <__assert_fail@plt+0x193b4>
   2b134:	add	r4, r6, #1
   2b138:	mov	r0, r9
   2b13c:	mov	r7, r5
   2b140:	mov	r5, r6
   2b144:	mov	r1, r4
   2b148:	bl	2b5a8 <__assert_fail@plt+0x19714>
   2b14c:	cmp	r0, #0
   2b150:	bne	2b580 <__assert_fail@plt+0x196ec>
   2b154:	ldr	ip, [r9, #4]
   2b158:	ldr	lr, [sp, #44]	; 0x2c
   2b15c:	mov	r6, r5
   2b160:	mov	r5, r7
   2b164:	mov	r1, r9
   2b168:	b	2b1bc <__assert_fail@plt+0x19328>
   2b16c:	mov	r1, #1
   2b170:	mov	r5, lr
   2b174:	orr	r6, r1, r0, lsl #1
   2b178:	ldr	r0, [lr, #20]
   2b17c:	lsl	r1, r6, #2
   2b180:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2b184:	cmp	r0, #0
   2b188:	beq	2b588 <__assert_fail@plt+0x196f4>
   2b18c:	str	r6, [r5, #12]
   2b190:	str	r0, [r5, #20]
   2b194:	ldr	r5, [sp, #28]
   2b198:	b	2b0cc <__assert_fail@plt+0x19238>
   2b19c:	ldr	r0, [lr]
   2b1a0:	mov	sl, r2
   2b1a4:	cmp	r2, r0
   2b1a8:	ble	2b1d4 <__assert_fail@plt+0x19340>
   2b1ac:	ldr	r0, [r9, #28]
   2b1b0:	cmp	r6, r0
   2b1b4:	bge	2b128 <__assert_fail@plt+0x19294>
   2b1b8:	add	r4, r6, #1
   2b1bc:	add	r1, ip, sl
   2b1c0:	ldrb	r0, [ip, r6]
   2b1c4:	ldrb	r1, [r1, #-1]
   2b1c8:	cmp	r0, r1
   2b1cc:	beq	2b1d8 <__assert_fail@plt+0x19344>
   2b1d0:	b	2b248 <__assert_fail@plt+0x193b4>
   2b1d4:	mov	r4, r6
   2b1d8:	ldr	r0, [r9, #100]	; 0x64
   2b1dc:	mov	r6, r4
   2b1e0:	ldr	r2, [r0, sl, lsl #2]
   2b1e4:	cmp	r2, #0
   2b1e8:	beq	2b238 <__assert_fail@plt+0x193a4>
   2b1ec:	ldr	r0, [r2, #8]
   2b1f0:	cmp	r0, #1
   2b1f4:	blt	2b238 <__assert_fail@plt+0x193a4>
   2b1f8:	mov	r9, r5
   2b1fc:	ldr	r1, [r5]
   2b200:	ldr	r2, [r2, #12]
   2b204:	ldr	r5, [sp, #36]	; 0x24
   2b208:	mov	r3, #0
   2b20c:	ldr	r4, [r2, r3, lsl #2]
   2b210:	add	r7, r1, r4, lsl #3
   2b214:	ldrb	r7, [r7, #4]
   2b218:	cmp	r7, #9
   2b21c:	ldreq	r7, [r1, r4, lsl #3]
   2b220:	cmpeq	r7, r5
   2b224:	beq	2b030 <__assert_fail@plt+0x1919c>
   2b228:	add	r3, r3, #1
   2b22c:	cmp	r3, r0
   2b230:	blt	2b20c <__assert_fail@plt+0x19378>
   2b234:	mov	r5, r9
   2b238:	ldr	r9, [sp, #40]	; 0x28
   2b23c:	add	r2, sl, #1
   2b240:	cmp	sl, r8
   2b244:	blt	2b19c <__assert_fail@plt+0x19308>
   2b248:	ldr	r2, [sp, #32]
   2b24c:	ldr	r0, [r9, #124]	; 0x7c
   2b250:	add	r2, r2, #1
   2b254:	cmp	r2, r0
   2b258:	blt	2ae8c <__assert_fail@plt+0x18ff8>
   2b25c:	mov	r1, #0
   2b260:	ldr	r0, [r9, #108]	; 0x6c
   2b264:	str	r1, [fp, #-32]	; 0xffffffe0
   2b268:	ldr	r1, [sp, #12]
   2b26c:	cmp	r1, r0
   2b270:	bge	2b550 <__assert_fail@plt+0x196bc>
   2b274:	b	2b2c0 <__assert_fail@plt+0x1942c>
   2b278:	mov	r0, #0
   2b27c:	str	r0, [fp, #-32]	; 0xffffffe0
   2b280:	b	2b550 <__assert_fail@plt+0x196bc>
   2b284:	ldr	r0, [r3, #88]	; 0x58
   2b288:	and	r0, r0, #2
   2b28c:	eor	sl, r0, #10
   2b290:	b	2b3f4 <__assert_fail@plt+0x19560>
   2b294:	mov	r0, r4
   2b298:	bl	11cb4 <iswalnum@plt>
   2b29c:	mov	sl, #1
   2b2a0:	cmp	r4, #95	; 0x5f
   2b2a4:	beq	2b2b8 <__assert_fail@plt+0x19424>
   2b2a8:	ldr	r3, [sp, #40]	; 0x28
   2b2ac:	cmp	r0, #0
   2b2b0:	beq	2b3dc <__assert_fail@plt+0x19548>
   2b2b4:	b	2b3f4 <__assert_fail@plt+0x19560>
   2b2b8:	ldr	r3, [sp, #40]	; 0x28
   2b2bc:	b	2b3f4 <__assert_fail@plt+0x19560>
   2b2c0:	ldr	r0, [r9, #116]	; 0x74
   2b2c4:	mov	r5, r1
   2b2c8:	add	r1, r1, r1, lsl #1
   2b2cc:	ldr	r3, [sp, #48]	; 0x30
   2b2d0:	ldr	r2, [r0, r1, lsl #3]
   2b2d4:	cmp	r2, r3
   2b2d8:	bne	2b534 <__assert_fail@plt+0x196a0>
   2b2dc:	add	r0, r0, r1, lsl #3
   2b2e0:	ldr	r2, [sp, #52]	; 0x34
   2b2e4:	ldr	r1, [r0, #4]
   2b2e8:	cmp	r1, r2
   2b2ec:	bne	2b534 <__assert_fail@plt+0x196a0>
   2b2f0:	ldr	r2, [r0, #8]
   2b2f4:	ldr	r6, [r0, #12]
   2b2f8:	ldr	r0, [sp, #20]
   2b2fc:	ldr	r8, [r0, #24]
   2b300:	cmp	r6, r2
   2b304:	bne	2b320 <__assert_fail@plt+0x1948c>
   2b308:	ldr	r1, [sp, #48]	; 0x30
   2b30c:	ldr	r0, [r0, #20]
   2b310:	add	r1, r1, r1, lsl #1
   2b314:	add	r0, r0, r1, lsl #2
   2b318:	ldr	r0, [r0, #8]
   2b31c:	b	2b32c <__assert_fail@plt+0x19498>
   2b320:	ldr	r0, [r0, #12]
   2b324:	ldr	r1, [sp, #48]	; 0x30
   2b328:	add	r0, r0, r1, lsl #2
   2b32c:	ldr	r9, [r0]
   2b330:	ldr	r0, [sp, #52]	; 0x34
   2b334:	str	r2, [fp, #-48]	; 0xffffffd0
   2b338:	add	r0, r6, r0
   2b33c:	sub	r7, r0, r2
   2b340:	cmp	r7, #0
   2b344:	ble	2b38c <__assert_fail@plt+0x194f8>
   2b348:	ldr	r3, [sp, #40]	; 0x28
   2b34c:	sub	r0, r7, #1
   2b350:	ldr	r1, [r3, #48]	; 0x30
   2b354:	cmp	r1, r0
   2b358:	beq	2b284 <__assert_fail@plt+0x193f0>
   2b35c:	ldr	r1, [r3, #80]	; 0x50
   2b360:	cmp	r1, #2
   2b364:	blt	2b398 <__assert_fail@plt+0x19504>
   2b368:	ldr	r0, [r3, #8]
   2b36c:	mov	r1, r7
   2b370:	sub	r0, r0, #4
   2b374:	ldr	r4, [r0, r1, lsl #2]
   2b378:	cmn	r4, #1
   2b37c:	bne	2b3cc <__assert_fail@plt+0x19538>
   2b380:	sub	r1, r1, #1
   2b384:	cmp	r1, #0
   2b388:	bgt	2b374 <__assert_fail@plt+0x194e0>
   2b38c:	ldr	r3, [sp, #40]	; 0x28
   2b390:	ldr	sl, [r3, #60]	; 0x3c
   2b394:	b	2b3f4 <__assert_fail@plt+0x19560>
   2b398:	ldr	r1, [r3, #4]
   2b39c:	ldr	r2, [r3, #68]	; 0x44
   2b3a0:	mov	sl, #1
   2b3a4:	ldrb	r0, [r1, r0]
   2b3a8:	ubfx	r1, r0, #5, #3
   2b3ac:	ldr	r1, [r2, r1, lsl #2]
   2b3b0:	and	r2, r0, #31
   2b3b4:	tst	r1, sl, lsl r2
   2b3b8:	bne	2b3f4 <__assert_fail@plt+0x19560>
   2b3bc:	mov	sl, #0
   2b3c0:	cmp	r0, #10
   2b3c4:	beq	2b3e8 <__assert_fail@plt+0x19554>
   2b3c8:	b	2b3f4 <__assert_fail@plt+0x19560>
   2b3cc:	ldr	r3, [sp, #40]	; 0x28
   2b3d0:	ldrb	r0, [r3, #78]	; 0x4e
   2b3d4:	cmp	r0, #0
   2b3d8:	bne	2b294 <__assert_fail@plt+0x19400>
   2b3dc:	mov	sl, #0
   2b3e0:	cmp	r4, #10
   2b3e4:	bne	2b3f4 <__assert_fail@plt+0x19560>
   2b3e8:	ldrb	sl, [r3, #77]	; 0x4d
   2b3ec:	cmp	sl, #0
   2b3f0:	movwne	sl, #2
   2b3f4:	ldr	r0, [r3, #100]	; 0x64
   2b3f8:	ldr	r2, [sp, #52]	; 0x34
   2b3fc:	add	r1, r9, r9, lsl #1
   2b400:	mov	r4, r3
   2b404:	add	r8, r8, r1, lsl #2
   2b408:	ldr	r2, [r0, r2, lsl #2]
   2b40c:	ldr	r0, [r0, r7, lsl #2]
   2b410:	cmp	r2, #0
   2b414:	ldrne	r2, [r2, #8]
   2b418:	moveq	r2, #0
   2b41c:	cmp	r0, #0
   2b420:	str	r2, [sp, #44]	; 0x2c
   2b424:	beq	2b490 <__assert_fail@plt+0x195fc>
   2b428:	ldr	r1, [r0, #40]	; 0x28
   2b42c:	sub	r4, fp, #44	; 0x2c
   2b430:	mov	r2, r8
   2b434:	mov	r0, r4
   2b438:	bl	2b9c4 <__assert_fail@plt+0x19b30>
   2b43c:	cmp	r0, #0
   2b440:	str	r0, [fp, #-32]	; 0xffffffe0
   2b444:	bne	2b590 <__assert_fail@plt+0x196fc>
   2b448:	ldr	r1, [sp, #20]
   2b44c:	sub	r0, fp, #32
   2b450:	mov	r2, r4
   2b454:	mov	r3, sl
   2b458:	bl	29aec <__assert_fail@plt+0x17c58>
   2b45c:	ldr	r4, [sp, #40]	; 0x28
   2b460:	ldr	r1, [r4, #100]	; 0x64
   2b464:	str	r0, [r1, r7, lsl #2]
   2b468:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b46c:	bl	17754 <__assert_fail@plt+0x58c0>
   2b470:	ldr	r0, [r4, #100]	; 0x64
   2b474:	ldr	r1, [r0, r7, lsl #2]
   2b478:	cmp	r1, #0
   2b47c:	bne	2b4d8 <__assert_fail@plt+0x19644>
   2b480:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2b484:	cmp	r9, #0
   2b488:	beq	2b4d8 <__assert_fail@plt+0x19644>
   2b48c:	b	2b574 <__assert_fail@plt+0x196e0>
   2b490:	ldr	r1, [sp, #20]
   2b494:	sub	r0, fp, #32
   2b498:	mov	r2, r8
   2b49c:	mov	r3, sl
   2b4a0:	bl	29aec <__assert_fail@plt+0x17c58>
   2b4a4:	ldr	r1, [r4, #100]	; 0x64
   2b4a8:	str	r0, [r1, r7, lsl #2]
   2b4ac:	ldr	r0, [r4, #100]	; 0x64
   2b4b0:	ldr	r1, [r0, r7, lsl #2]
   2b4b4:	cmp	r1, #0
   2b4b8:	bne	2b4d8 <__assert_fail@plt+0x19644>
   2b4bc:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2b4c0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b4c4:	cmp	r9, #0
   2b4c8:	bne	2b574 <__assert_fail@plt+0x196e0>
   2b4cc:	cmp	r6, r1
   2b4d0:	bne	2b534 <__assert_fail@plt+0x196a0>
   2b4d4:	b	2b4e4 <__assert_fail@plt+0x19650>
   2b4d8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b4dc:	cmp	r6, r1
   2b4e0:	bne	2b534 <__assert_fail@plt+0x196a0>
   2b4e4:	ldr	r1, [sp, #52]	; 0x34
   2b4e8:	ldr	r0, [r0, r1, lsl #2]
   2b4ec:	ldr	r1, [sp, #44]	; 0x2c
   2b4f0:	ldr	r0, [r0, #8]
   2b4f4:	cmp	r0, r1
   2b4f8:	ble	2b534 <__assert_fail@plt+0x196a0>
   2b4fc:	ldr	r4, [sp, #40]	; 0x28
   2b500:	ldr	r2, [sp, #52]	; 0x34
   2b504:	mov	r1, r8
   2b508:	mov	r0, r4
   2b50c:	bl	2ab20 <__assert_fail@plt+0x18c8c>
   2b510:	cmp	r0, #0
   2b514:	str	r0, [fp, #-32]	; 0xffffffe0
   2b518:	bne	2b5a0 <__assert_fail@plt+0x1970c>
   2b51c:	mov	r0, r4
   2b520:	mov	r1, r8
   2b524:	bl	2ac1c <__assert_fail@plt+0x18d88>
   2b528:	cmp	r0, #0
   2b52c:	str	r0, [fp, #-32]	; 0xffffffe0
   2b530:	bne	2b5a0 <__assert_fail@plt+0x1970c>
   2b534:	ldr	r9, [sp, #40]	; 0x28
   2b538:	ldr	r8, [sp, #52]	; 0x34
   2b53c:	mov	r1, r5
   2b540:	add	r1, r5, #1
   2b544:	ldr	r0, [r9, #108]	; 0x6c
   2b548:	cmp	r1, r0
   2b54c:	blt	2b2c0 <__assert_fail@plt+0x1942c>
   2b550:	ldr	r1, [sp, #16]
   2b554:	ldr	r3, [sp, #24]
   2b558:	ldr	r2, [sp, #20]
   2b55c:	ldr	r0, [r1, #4]
   2b560:	add	r3, r3, #1
   2b564:	cmp	r3, r0
   2b568:	blt	2ac8c <__assert_fail@plt+0x18df8>
   2b56c:	mov	r9, #0
   2b570:	str	r9, [fp, #-32]	; 0xffffffe0
   2b574:	mov	r0, r9
   2b578:	sub	sp, fp, #28
   2b57c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b580:	mov	r9, r0
   2b584:	b	2b570 <__assert_fail@plt+0x196dc>
   2b588:	mov	r9, #12
   2b58c:	b	2b570 <__assert_fail@plt+0x196dc>
   2b590:	mov	r9, r0
   2b594:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b598:	bl	17754 <__assert_fail@plt+0x58c0>
   2b59c:	b	2b574 <__assert_fail@plt+0x196e0>
   2b5a0:	mov	r9, r0
   2b5a4:	b	2b574 <__assert_fail@plt+0x196e0>
   2b5a8:	push	{r4, r5, r6, r7, fp, lr}
   2b5ac:	add	fp, sp, #16
   2b5b0:	mov	r4, r0
   2b5b4:	ldr	r0, [r0, #36]	; 0x24
   2b5b8:	mov	r5, #12
   2b5bc:	cmn	r0, #-536870910	; 0xe0000002
   2b5c0:	bhi	2b7a8 <__assert_fail@plt+0x19914>
   2b5c4:	ldr	r6, [r4, #48]	; 0x30
   2b5c8:	ldr	r2, [r4, #80]	; 0x50
   2b5cc:	cmp	r6, r0, lsl #1
   2b5d0:	lslge	r6, r0, #1
   2b5d4:	cmp	r6, r1
   2b5d8:	movle	r6, r1
   2b5dc:	cmp	r2, #2
   2b5e0:	blt	2b628 <__assert_fail@plt+0x19794>
   2b5e4:	cmn	r6, #-1073741823	; 0xc0000001
   2b5e8:	bhi	2b7a8 <__assert_fail@plt+0x19914>
   2b5ec:	ldr	r0, [r4, #8]
   2b5f0:	lsl	r7, r6, #2
   2b5f4:	mov	r1, r7
   2b5f8:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2b5fc:	cmp	r0, #0
   2b600:	beq	2b7a8 <__assert_fail@plt+0x19914>
   2b604:	str	r0, [r4, #8]
   2b608:	ldr	r0, [r4, #12]
   2b60c:	cmp	r0, #0
   2b610:	beq	2b628 <__assert_fail@plt+0x19794>
   2b614:	mov	r1, r7
   2b618:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2b61c:	cmp	r0, #0
   2b620:	beq	2b7a8 <__assert_fail@plt+0x19914>
   2b624:	str	r0, [r4, #12]
   2b628:	ldrb	r0, [r4, #75]	; 0x4b
   2b62c:	cmp	r0, #0
   2b630:	beq	2b64c <__assert_fail@plt+0x197b8>
   2b634:	ldr	r0, [r4, #4]
   2b638:	mov	r1, r6
   2b63c:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2b640:	cmp	r0, #0
   2b644:	beq	2b7a8 <__assert_fail@plt+0x19914>
   2b648:	str	r0, [r4, #4]
   2b64c:	str	r6, [r4, #36]	; 0x24
   2b650:	ldr	r0, [r4, #100]	; 0x64
   2b654:	cmp	r0, #0
   2b658:	beq	2b674 <__assert_fail@plt+0x197e0>
   2b65c:	mov	r1, #4
   2b660:	add	r1, r1, r6, lsl #2
   2b664:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2b668:	cmp	r0, #0
   2b66c:	beq	2b7a8 <__assert_fail@plt+0x19914>
   2b670:	str	r0, [r4, #100]	; 0x64
   2b674:	ldrb	r1, [r4, #72]	; 0x48
   2b678:	ldr	r0, [r4, #80]	; 0x50
   2b67c:	cmp	r1, #0
   2b680:	beq	2b6a0 <__assert_fail@plt+0x1980c>
   2b684:	cmp	r0, #2
   2b688:	blt	2b6b4 <__assert_fail@plt+0x19820>
   2b68c:	mov	r0, r4
   2b690:	bl	23fb0 <__assert_fail@plt+0x1211c>
   2b694:	cmp	r0, #0
   2b698:	popne	{r4, r5, r6, r7, fp, pc}
   2b69c:	b	2b7a4 <__assert_fail@plt+0x19910>
   2b6a0:	cmp	r0, #2
   2b6a4:	blt	2b72c <__assert_fail@plt+0x19898>
   2b6a8:	mov	r0, r4
   2b6ac:	bl	24670 <__assert_fail@plt+0x127dc>
   2b6b0:	b	2b7a4 <__assert_fail@plt+0x19910>
   2b6b4:	ldr	r6, [r4, #36]	; 0x24
   2b6b8:	ldr	r0, [r4, #48]	; 0x30
   2b6bc:	ldr	r5, [r4, #28]
   2b6c0:	cmp	r6, r0
   2b6c4:	movgt	r6, r0
   2b6c8:	cmp	r5, r6
   2b6cc:	bge	2b720 <__assert_fail@plt+0x1988c>
   2b6d0:	ldr	r1, [r4]
   2b6d4:	ldr	r2, [r4, #24]
   2b6d8:	ldr	r0, [r4, #64]	; 0x40
   2b6dc:	add	r1, r1, r2
   2b6e0:	cmp	r0, #0
   2b6e4:	ldrb	r7, [r1, r5]
   2b6e8:	ldrbne	r7, [r0, r7]
   2b6ec:	add	r0, r7, #128	; 0x80
   2b6f0:	lsr	r0, r0, #7
   2b6f4:	cmp	r0, #2
   2b6f8:	bhi	2b708 <__assert_fail@plt+0x19874>
   2b6fc:	bl	11c24 <__ctype_toupper_loc@plt>
   2b700:	ldr	r0, [r0]
   2b704:	ldr	r7, [r0, r7, lsl #2]
   2b708:	ldr	r0, [r4, #4]
   2b70c:	strb	r7, [r0, r5]
   2b710:	add	r5, r5, #1
   2b714:	cmp	r5, r6
   2b718:	blt	2b6d0 <__assert_fail@plt+0x1983c>
   2b71c:	mov	r5, r6
   2b720:	str	r5, [r4, #28]
   2b724:	str	r5, [r4, #32]
   2b728:	b	2b7a4 <__assert_fail@plt+0x19910>
   2b72c:	ldr	r2, [r4, #64]	; 0x40
   2b730:	cmp	r2, #0
   2b734:	beq	2b7a4 <__assert_fail@plt+0x19910>
   2b738:	ldr	r0, [r4, #36]	; 0x24
   2b73c:	ldr	r3, [r4, #48]	; 0x30
   2b740:	ldr	r1, [r4, #28]
   2b744:	cmp	r0, r3
   2b748:	movgt	r0, r3
   2b74c:	cmp	r1, r0
   2b750:	bge	2b79c <__assert_fail@plt+0x19908>
   2b754:	ldm	r4, {r3, r7}
   2b758:	ldr	r6, [r4, #24]
   2b75c:	add	r6, r6, r1
   2b760:	ldrb	r3, [r3, r6]
   2b764:	ldrb	r2, [r2, r3]
   2b768:	strb	r2, [r7, r1]
   2b76c:	b	2b78c <__assert_fail@plt+0x198f8>
   2b770:	ldm	r4, {r2, r3}
   2b774:	ldr	r7, [r4, #24]
   2b778:	ldr	r6, [r4, #64]	; 0x40
   2b77c:	add	r2, r2, r7
   2b780:	ldrb	r2, [r2, r1]
   2b784:	ldrb	r2, [r6, r2]
   2b788:	strb	r2, [r3, r1]
   2b78c:	add	r1, r1, #1
   2b790:	cmp	r1, r0
   2b794:	blt	2b770 <__assert_fail@plt+0x198dc>
   2b798:	mov	r1, r0
   2b79c:	str	r1, [r4, #28]
   2b7a0:	str	r1, [r4, #32]
   2b7a4:	mov	r5, #0
   2b7a8:	mov	r0, r5
   2b7ac:	pop	{r4, r5, r6, r7, fp, pc}
   2b7b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2b7b4:	add	fp, sp, #24
   2b7b8:	sub	sp, sp, #16
   2b7bc:	mov	r9, r0
   2b7c0:	mov	r4, r1
   2b7c4:	ldr	r5, [r1, #40]	; 0x28
   2b7c8:	ldr	r7, [r1, #84]	; 0x54
   2b7cc:	ldr	r0, [r1, #100]	; 0x64
   2b7d0:	ldr	r1, [r1, #104]	; 0x68
   2b7d4:	mov	r6, r2
   2b7d8:	cmp	r5, r1
   2b7dc:	ble	2b7ec <__assert_fail@plt+0x19958>
   2b7e0:	str	r6, [r0, r5, lsl #2]
   2b7e4:	str	r5, [r4, #104]	; 0x68
   2b7e8:	b	2b920 <__assert_fail@plt+0x19a8c>
   2b7ec:	ldr	r1, [r0, r5, lsl #2]
   2b7f0:	cmp	r1, #0
   2b7f4:	beq	2b830 <__assert_fail@plt+0x1999c>
   2b7f8:	ldr	r2, [r1, #40]	; 0x28
   2b7fc:	cmp	r6, #0
   2b800:	beq	2b838 <__assert_fail@plt+0x199a4>
   2b804:	ldr	r8, [r6, #40]	; 0x28
   2b808:	mov	r0, sp
   2b80c:	mov	r1, r8
   2b810:	bl	2b9c4 <__assert_fail@plt+0x19b30>
   2b814:	cmp	r0, #0
   2b818:	str	r0, [r9]
   2b81c:	bne	2b98c <__assert_fail@plt+0x19af8>
   2b820:	ldr	r0, [r4, #40]	; 0x28
   2b824:	cmp	r0, #0
   2b828:	bgt	2b858 <__assert_fail@plt+0x199c4>
   2b82c:	b	2b894 <__assert_fail@plt+0x19a00>
   2b830:	str	r6, [r0, r5, lsl #2]
   2b834:	b	2b920 <__assert_fail@plt+0x19a8c>
   2b838:	ldr	r0, [r2, #8]
   2b83c:	vldr	d16, [r2]
   2b840:	mov	r8, #0
   2b844:	str	r0, [sp, #8]
   2b848:	mov	r0, r5
   2b84c:	vstr	d16, [sp]
   2b850:	cmp	r0, #0
   2b854:	ble	2b894 <__assert_fail@plt+0x19a00>
   2b858:	ldr	r2, [r4, #48]	; 0x30
   2b85c:	sub	r1, r0, #1
   2b860:	cmp	r2, r1
   2b864:	beq	2b994 <__assert_fail@plt+0x19b00>
   2b868:	ldr	r2, [r4, #80]	; 0x50
   2b86c:	cmp	r2, #2
   2b870:	blt	2b89c <__assert_fail@plt+0x19a08>
   2b874:	ldr	r1, [r4, #8]
   2b878:	sub	r1, r1, #4
   2b87c:	ldr	r6, [r1, r0, lsl #2]
   2b880:	cmn	r6, #1
   2b884:	bne	2b8d0 <__assert_fail@plt+0x19a3c>
   2b888:	sub	r0, r0, #1
   2b88c:	cmp	r0, #0
   2b890:	bgt	2b87c <__assert_fail@plt+0x199e8>
   2b894:	ldr	r3, [r4, #60]	; 0x3c
   2b898:	b	2b8f4 <__assert_fail@plt+0x19a60>
   2b89c:	ldr	r0, [r4, #4]
   2b8a0:	ldr	r2, [r4, #68]	; 0x44
   2b8a4:	mov	r3, #1
   2b8a8:	ldrb	r0, [r0, r1]
   2b8ac:	ubfx	r1, r0, #5, #3
   2b8b0:	ldr	r1, [r2, r1, lsl #2]
   2b8b4:	and	r2, r0, #31
   2b8b8:	tst	r1, r3, lsl r2
   2b8bc:	bne	2b8f4 <__assert_fail@plt+0x19a60>
   2b8c0:	mov	r3, #0
   2b8c4:	cmp	r0, #10
   2b8c8:	beq	2b8e8 <__assert_fail@plt+0x19a54>
   2b8cc:	b	2b8f4 <__assert_fail@plt+0x19a60>
   2b8d0:	ldrb	r0, [r4, #78]	; 0x4e
   2b8d4:	cmp	r0, #0
   2b8d8:	bne	2b9a4 <__assert_fail@plt+0x19b10>
   2b8dc:	mov	r3, #0
   2b8e0:	cmp	r6, #10
   2b8e4:	bne	2b8f4 <__assert_fail@plt+0x19a60>
   2b8e8:	ldrb	r3, [r4, #77]	; 0x4d
   2b8ec:	cmp	r3, #0
   2b8f0:	movwne	r3, #2
   2b8f4:	mov	r2, sp
   2b8f8:	mov	r0, r9
   2b8fc:	mov	r1, r7
   2b900:	bl	29aec <__assert_fail@plt+0x17c58>
   2b904:	mov	r6, r0
   2b908:	ldr	r0, [r4, #100]	; 0x64
   2b90c:	cmp	r8, #0
   2b910:	str	r6, [r0, r5, lsl #2]
   2b914:	beq	2b920 <__assert_fail@plt+0x19a8c>
   2b918:	ldr	r0, [sp, #8]
   2b91c:	bl	17754 <__assert_fail@plt+0x58c0>
   2b920:	cmp	r6, #0
   2b924:	ldrne	r0, [r7, #76]	; 0x4c
   2b928:	cmpne	r0, #0
   2b92c:	bne	2b93c <__assert_fail@plt+0x19aa8>
   2b930:	mov	r0, r6
   2b934:	sub	sp, fp, #24
   2b938:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b93c:	add	r7, r6, #4
   2b940:	mov	r0, r4
   2b944:	mov	r2, r5
   2b948:	mov	r1, r7
   2b94c:	bl	2ab20 <__assert_fail@plt+0x18c8c>
   2b950:	cmp	r0, #0
   2b954:	str	r0, [r9]
   2b958:	bne	2b98c <__assert_fail@plt+0x19af8>
   2b95c:	ldrb	r0, [r6, #52]	; 0x34
   2b960:	tst	r0, #64	; 0x40
   2b964:	beq	2b930 <__assert_fail@plt+0x19a9c>
   2b968:	mov	r0, r4
   2b96c:	mov	r1, r7
   2b970:	bl	2ac1c <__assert_fail@plt+0x18d88>
   2b974:	str	r0, [r9]
   2b978:	cmp	r0, #0
   2b97c:	mov	r6, #0
   2b980:	ldreq	r0, [r4, #100]	; 0x64
   2b984:	ldreq	r6, [r0, r5, lsl #2]
   2b988:	b	2b930 <__assert_fail@plt+0x19a9c>
   2b98c:	mov	r6, #0
   2b990:	b	2b930 <__assert_fail@plt+0x19a9c>
   2b994:	ldr	r0, [r4, #88]	; 0x58
   2b998:	and	r0, r0, #2
   2b99c:	eor	r3, r0, #10
   2b9a0:	b	2b8f4 <__assert_fail@plt+0x19a60>
   2b9a4:	mov	r0, r6
   2b9a8:	bl	11cb4 <iswalnum@plt>
   2b9ac:	mov	r3, #1
   2b9b0:	cmp	r6, #95	; 0x5f
   2b9b4:	beq	2b8f4 <__assert_fail@plt+0x19a60>
   2b9b8:	cmp	r0, #0
   2b9bc:	beq	2b8dc <__assert_fail@plt+0x19a48>
   2b9c0:	b	2b8f4 <__assert_fail@plt+0x19a60>
   2b9c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9c8:	add	fp, sp, #28
   2b9cc:	sub	sp, sp, #20
   2b9d0:	mov	sl, r2
   2b9d4:	cmp	r1, #0
   2b9d8:	str	r0, [sp, #16]
   2b9dc:	beq	2ba44 <__assert_fail@plt+0x19bb0>
   2b9e0:	ldr	r0, [r1, #4]
   2b9e4:	mov	r8, r1
   2b9e8:	cmp	sl, #0
   2b9ec:	beq	2ba00 <__assert_fail@plt+0x19b6c>
   2b9f0:	cmp	r0, #1
   2b9f4:	ldrge	r1, [sl, #4]
   2b9f8:	cmpge	r1, #1
   2b9fc:	bge	2bab8 <__assert_fail@plt+0x19c24>
   2ba00:	cmp	r0, #1
   2ba04:	blt	2ba44 <__assert_fail@plt+0x19bb0>
   2ba08:	ldr	r1, [sp, #16]
   2ba0c:	str	r0, [r1, #4]
   2ba10:	ldr	r1, [r8, #4]
   2ba14:	cmp	r1, #1
   2ba18:	blt	2ba9c <__assert_fail@plt+0x19c08>
   2ba1c:	ldr	r4, [sp, #16]
   2ba20:	str	r0, [r4]
   2ba24:	lsl	r0, r0, #2
   2ba28:	bl	33c98 <__assert_fail@plt+0x21e04>
   2ba2c:	cmp	r0, #0
   2ba30:	str	r0, [r4, #8]
   2ba34:	beq	2bc2c <__assert_fail@plt+0x19d98>
   2ba38:	ldr	r2, [r8, #4]
   2ba3c:	ldr	r1, [r8, #8]
   2ba40:	b	2ba90 <__assert_fail@plt+0x19bfc>
   2ba44:	cmp	sl, #0
   2ba48:	beq	2ba9c <__assert_fail@plt+0x19c08>
   2ba4c:	ldr	r0, [sl, #4]
   2ba50:	cmp	r0, #1
   2ba54:	blt	2ba9c <__assert_fail@plt+0x19c08>
   2ba58:	ldr	r1, [sp, #16]
   2ba5c:	str	r0, [r1, #4]
   2ba60:	ldr	r1, [sl, #4]
   2ba64:	cmp	r1, #1
   2ba68:	blt	2ba9c <__assert_fail@plt+0x19c08>
   2ba6c:	ldr	r4, [sp, #16]
   2ba70:	str	r0, [r4]
   2ba74:	lsl	r0, r0, #2
   2ba78:	bl	33c98 <__assert_fail@plt+0x21e04>
   2ba7c:	cmp	r0, #0
   2ba80:	str	r0, [r4, #8]
   2ba84:	beq	2bc2c <__assert_fail@plt+0x19d98>
   2ba88:	ldr	r2, [sl, #4]
   2ba8c:	ldr	r1, [sl, #8]
   2ba90:	lsl	r2, r2, #2
   2ba94:	bl	11a8c <memcpy@plt>
   2ba98:	b	2bc20 <__assert_fail@plt+0x19d8c>
   2ba9c:	ldr	r1, [sp, #16]
   2baa0:	mov	r0, #0
   2baa4:	str	r0, [r1]
   2baa8:	str	r0, [r1, #4]
   2baac:	str	r0, [r1, #8]
   2bab0:	sub	sp, fp, #28
   2bab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bab8:	ldr	r4, [sp, #16]
   2babc:	add	r0, r1, r0
   2bac0:	str	r0, [r4]
   2bac4:	lsl	r0, r0, #2
   2bac8:	bl	33c98 <__assert_fail@plt+0x21e04>
   2bacc:	cmp	r0, #0
   2bad0:	str	r0, [r4, #8]
   2bad4:	beq	2bc3c <__assert_fail@plt+0x19da8>
   2bad8:	ldr	r9, [sl, #4]
   2badc:	ldr	lr, [r8, #4]
   2bae0:	mov	r1, #0
   2bae4:	mov	r7, #0
   2bae8:	cmp	r9, #0
   2baec:	movwgt	r1, #1
   2baf0:	cmp	lr, #1
   2baf4:	blt	2bbc0 <__assert_fail@plt+0x19d2c>
   2baf8:	mov	r2, #0
   2bafc:	mov	ip, #0
   2bb00:	str	r2, [sp, #8]
   2bb04:	mov	r2, #0
   2bb08:	str	r2, [sp, #12]
   2bb0c:	mov	r2, #0
   2bb10:	ldr	r4, [sp, #12]
   2bb14:	mov	r7, ip
   2bb18:	tst	r1, #1
   2bb1c:	beq	2bbf0 <__assert_fail@plt+0x19d5c>
   2bb20:	ldr	r1, [sl, #8]
   2bb24:	ldr	r5, [r1, r7, lsl #2]
   2bb28:	ldr	r1, [r8, #8]
   2bb2c:	ldr	r3, [r1, r2, lsl #2]
   2bb30:	cmp	r3, r5
   2bb34:	ble	2bb5c <__assert_fail@plt+0x19cc8>
   2bb38:	add	r7, r7, #1
   2bb3c:	mov	r1, #0
   2bb40:	str	r5, [r0, r4, lsl #2]
   2bb44:	add	r4, r4, #1
   2bb48:	cmp	r9, r7
   2bb4c:	movwgt	r1, #1
   2bb50:	cmp	lr, r2
   2bb54:	bgt	2bb18 <__assert_fail@plt+0x19c84>
   2bb58:	b	2bbc4 <__assert_fail@plt+0x19d30>
   2bb5c:	str	r3, [r0, r4, lsl #2]
   2bb60:	ldr	r6, [sp, #8]
   2bb64:	add	r1, r7, #1
   2bb68:	mov	ip, r7
   2bb6c:	add	r2, r2, #1
   2bb70:	ldr	r9, [sl, #4]
   2bb74:	ldr	lr, [r8, #4]
   2bb78:	moveq	ip, r1
   2bb7c:	str	r1, [sp, #4]
   2bb80:	mov	r1, #0
   2bb84:	sub	r6, r6, #1
   2bb88:	cmp	r9, ip
   2bb8c:	str	r6, [sp, #8]
   2bb90:	add	r6, r4, #1
   2bb94:	movwgt	r1, #1
   2bb98:	cmp	lr, r2
   2bb9c:	str	r6, [sp, #12]
   2bba0:	bgt	2bb10 <__assert_fail@plt+0x19c7c>
   2bba4:	ldr	r2, [sp, #4]
   2bba8:	cmp	r3, r5
   2bbac:	add	r4, r4, #1
   2bbb0:	moveq	r7, r2
   2bbb4:	cmp	r1, #0
   2bbb8:	bne	2bbcc <__assert_fail@plt+0x19d38>
   2bbbc:	b	2bc18 <__assert_fail@plt+0x19d84>
   2bbc0:	mov	r4, #0
   2bbc4:	cmp	r1, #0
   2bbc8:	beq	2bc18 <__assert_fail@plt+0x19d84>
   2bbcc:	ldr	r1, [sl, #8]
   2bbd0:	sub	r2, r9, r7
   2bbd4:	add	r0, r0, r4, lsl #2
   2bbd8:	lsl	r2, r2, #2
   2bbdc:	add	r1, r1, r7, lsl #2
   2bbe0:	bl	11a8c <memcpy@plt>
   2bbe4:	sub	r0, r4, r7
   2bbe8:	add	r4, r0, r9
   2bbec:	b	2bc18 <__assert_fail@plt+0x19d84>
   2bbf0:	ldr	r1, [r8, #8]
   2bbf4:	add	r0, r0, r4, lsl #2
   2bbf8:	add	r1, r1, r2, lsl #2
   2bbfc:	sub	r2, lr, r2
   2bc00:	lsl	r2, r2, #2
   2bc04:	bl	11a8c <memcpy@plt>
   2bc08:	ldr	r0, [r8, #4]
   2bc0c:	ldr	r1, [sp, #8]
   2bc10:	add	r0, r0, r1
   2bc14:	add	r4, r0, r4
   2bc18:	ldr	r0, [sp, #16]
   2bc1c:	str	r4, [r0, #4]
   2bc20:	mov	r0, #0
   2bc24:	sub	sp, fp, #28
   2bc28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc2c:	ldr	r1, [sp, #16]
   2bc30:	mov	r0, #0
   2bc34:	str	r0, [r1]
   2bc38:	str	r0, [r1, #4]
   2bc3c:	mov	r0, #12
   2bc40:	sub	sp, fp, #28
   2bc44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc4c:	add	fp, sp, #28
   2bc50:	sub	sp, sp, #12
   2bc54:	mov	r6, r2
   2bc58:	mov	r7, r3
   2bc5c:	ldr	r2, [r2]
   2bc60:	ldr	r9, [fp, #8]
   2bc64:	mov	r4, r0
   2bc68:	mov	r0, #8
   2bc6c:	mov	r8, r1
   2bc70:	ldr	r3, [r6, #4]
   2bc74:	str	r0, [sp, #8]
   2bc78:	add	r1, r6, #8
   2bc7c:	mov	r0, r4
   2bc80:	stm	sp, {r7, r9}
   2bc84:	bl	2be0c <__assert_fail@plt+0x19f78>
   2bc88:	mov	r5, r0
   2bc8c:	cmp	r0, #0
   2bc90:	beq	2bca0 <__assert_fail@plt+0x19e0c>
   2bc94:	mov	r0, r5
   2bc98:	sub	sp, fp, #28
   2bc9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bca0:	ldr	r0, [r4, #108]	; 0x6c
   2bca4:	ldr	r1, [r4, #112]	; 0x70
   2bca8:	ldr	sl, [r6, #4]
   2bcac:	ldr	r5, [r8]
   2bcb0:	cmp	r0, r1
   2bcb4:	blt	2bd04 <__assert_fail@plt+0x19e70>
   2bcb8:	ldr	r0, [r4, #116]	; 0x74
   2bcbc:	add	r1, r1, r1, lsl #1
   2bcc0:	lsl	r1, r1, #4
   2bcc4:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2bcc8:	cmp	r0, #0
   2bccc:	beq	2bdfc <__assert_fail@plt+0x19f68>
   2bcd0:	str	r0, [r4, #116]	; 0x74
   2bcd4:	ldr	r1, [r4, #108]	; 0x6c
   2bcd8:	ldr	r2, [r4, #112]	; 0x70
   2bcdc:	add	r1, r1, r1, lsl #1
   2bce0:	add	r0, r0, r1, lsl #3
   2bce4:	add	r1, r2, r2, lsl #1
   2bce8:	lsl	r2, r1, #3
   2bcec:	mov	r1, #0
   2bcf0:	bl	11cd8 <memset@plt>
   2bcf4:	ldr	r1, [r4, #112]	; 0x70
   2bcf8:	ldr	r0, [r4, #108]	; 0x6c
   2bcfc:	lsl	r1, r1, #1
   2bd00:	str	r1, [r4, #112]	; 0x70
   2bd04:	ldr	r1, [r4, #116]	; 0x74
   2bd08:	cmp	r0, #1
   2bd0c:	blt	2bd2c <__assert_fail@plt+0x19e98>
   2bd10:	sub	r2, r0, #1
   2bd14:	add	r2, r2, r2, lsl #1
   2bd18:	add	r2, r1, r2, lsl #3
   2bd1c:	ldr	r3, [r2, #4]
   2bd20:	cmp	r3, r9
   2bd24:	moveq	r3, #1
   2bd28:	strbeq	r3, [r2, #20]
   2bd2c:	add	r2, r0, r0, lsl #1
   2bd30:	cmp	sl, r5
   2bd34:	mov	r3, #0
   2bd38:	add	r0, r0, #1
   2bd3c:	str	r7, [r1, r2, lsl #3]!
   2bd40:	mov	r2, #0
   2bd44:	mvneq	r3, #0
   2bd48:	str	r9, [r1, #4]
   2bd4c:	str	r5, [r1, #8]
   2bd50:	str	sl, [r1, #12]
   2bd54:	str	r3, [r1, #16]
   2bd58:	str	r0, [r4, #108]	; 0x6c
   2bd5c:	strb	r2, [r1, #20]
   2bd60:	sub	r0, sl, r5
   2bd64:	ldr	r1, [r4, #120]	; 0x78
   2bd68:	cmp	r1, r0
   2bd6c:	strlt	r0, [r4, #120]	; 0x78
   2bd70:	ldr	r0, [r6, #4]
   2bd74:	ldr	r1, [r8]
   2bd78:	ldr	r7, [r4, #104]	; 0x68
   2bd7c:	add	r0, r0, r9
   2bd80:	sub	r6, r0, r1
   2bd84:	ldr	r0, [r4, #36]	; 0x24
   2bd88:	cmp	r0, r6
   2bd8c:	ldrle	r1, [r4, #48]	; 0x30
   2bd90:	cmple	r0, r1
   2bd94:	blt	2bde0 <__assert_fail@plt+0x19f4c>
   2bd98:	ldr	r0, [r4, #28]
   2bd9c:	cmp	r0, r6
   2bda0:	ldrle	r1, [r4, #48]	; 0x30
   2bda4:	cmple	r0, r1
   2bda8:	blt	2bde0 <__assert_fail@plt+0x19f4c>
   2bdac:	mov	r5, #0
   2bdb0:	cmp	r6, r7
   2bdb4:	ble	2bc94 <__assert_fail@plt+0x19e00>
   2bdb8:	sub	r0, r6, r7
   2bdbc:	mov	r1, #0
   2bdc0:	mov	r5, #0
   2bdc4:	lsl	r2, r0, #2
   2bdc8:	ldr	r0, [r4, #100]	; 0x64
   2bdcc:	add	r0, r0, r7, lsl #2
   2bdd0:	add	r0, r0, #4
   2bdd4:	bl	11cd8 <memset@plt>
   2bdd8:	str	r6, [r4, #104]	; 0x68
   2bddc:	b	2bc94 <__assert_fail@plt+0x19e00>
   2bde0:	add	r1, r6, #1
   2bde4:	mov	r0, r4
   2bde8:	bl	2b5a8 <__assert_fail@plt+0x19714>
   2bdec:	mov	r5, r0
   2bdf0:	cmp	r0, #0
   2bdf4:	bne	2bc94 <__assert_fail@plt+0x19e00>
   2bdf8:	b	2bdac <__assert_fail@plt+0x19f18>
   2bdfc:	ldr	r0, [r4, #116]	; 0x74
   2be00:	bl	17754 <__assert_fail@plt+0x58c0>
   2be04:	mov	r5, #12
   2be08:	b	2bc94 <__assert_fail@plt+0x19e00>
   2be0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be10:	add	fp, sp, #28
   2be14:	sub	sp, sp, #84	; 0x54
   2be18:	ldr	sl, [r0, #84]	; 0x54
   2be1c:	mov	r8, r2
   2be20:	mov	r2, #0
   2be24:	mov	r9, r3
   2be28:	ldr	r3, [fp, #12]
   2be2c:	str	r0, [sp, #40]	; 0x28
   2be30:	str	r2, [fp, #-52]	; 0xffffffcc
   2be34:	ldr	r5, [r1, #4]
   2be38:	ldr	r2, [sl]
   2be3c:	str	sl, [sp, #20]
   2be40:	ldr	r2, [r2, r8, lsl #3]
   2be44:	str	r2, [sp, #24]
   2be48:	ldr	r2, [r0, #120]	; 0x78
   2be4c:	add	r2, r2, r3
   2be50:	cmp	r5, r2
   2be54:	ble	2c728 <__assert_fail@plt+0x1a894>
   2be58:	add	r4, r1, #8
   2be5c:	ldr	r2, [r0, #40]	; 0x28
   2be60:	ldr	r5, [r1]
   2be64:	ldr	r3, [r0, #88]	; 0x58
   2be68:	str	r1, [sp, #16]
   2be6c:	str	r2, [sp, #12]
   2be70:	ldr	r2, [r0, #100]	; 0x64
   2be74:	cmp	r5, #0
   2be78:	moveq	r5, r9
   2be7c:	cmp	r5, #0
   2be80:	str	r2, [sp, #8]
   2be84:	ldr	r2, [r4]
   2be88:	str	r2, [r0, #100]	; 0x64
   2be8c:	str	r5, [r0, #40]	; 0x28
   2be90:	ble	2bed4 <__assert_fail@plt+0x1a040>
   2be94:	ldr	r2, [r0, #48]	; 0x30
   2be98:	sub	r7, r5, #1
   2be9c:	cmp	r2, r7
   2bea0:	beq	2c798 <__assert_fail@plt+0x1a904>
   2bea4:	ldr	r2, [r0, #80]	; 0x50
   2bea8:	cmp	r2, #2
   2beac:	blt	2bf18 <__assert_fail@plt+0x1a084>
   2beb0:	ldr	r2, [r0, #8]
   2beb4:	mov	r3, r5
   2beb8:	sub	r2, r2, #4
   2bebc:	ldr	r6, [r2, r3, lsl #2]
   2bec0:	cmn	r6, #1
   2bec4:	bne	2bf4c <__assert_fail@plt+0x1a0b8>
   2bec8:	sub	r3, r3, #1
   2becc:	cmp	r3, #0
   2bed0:	bgt	2bebc <__assert_fail@plt+0x1a028>
   2bed4:	ldr	r7, [r0, #60]	; 0x3c
   2bed8:	cmp	r5, r9
   2bedc:	beq	2bf7c <__assert_fail@plt+0x1a0e8>
   2bee0:	ldr	r0, [sp, #40]	; 0x28
   2bee4:	ldr	r0, [r0, #100]	; 0x64
   2bee8:	ldr	r4, [r0, r5, lsl #2]
   2beec:	cmp	r4, #0
   2bef0:	beq	2c038 <__assert_fail@plt+0x1a1a4>
   2bef4:	ldrb	r0, [r4, #52]	; 0x34
   2bef8:	ldr	r8, [fp, #16]
   2befc:	tst	r0, #64	; 0x40
   2bf00:	bne	2c050 <__assert_fail@plt+0x1a1bc>
   2bf04:	mov	r0, #0
   2bf08:	str	r0, [sp, #52]	; 0x34
   2bf0c:	str	r0, [sp, #48]	; 0x30
   2bf10:	str	r0, [sp, #56]	; 0x38
   2bf14:	b	2c09c <__assert_fail@plt+0x1a208>
   2bf18:	ldr	r3, [r0, #4]
   2bf1c:	ldr	r2, [r0, #68]	; 0x44
   2bf20:	ldrb	r0, [r3, r7]
   2bf24:	mov	r7, #1
   2bf28:	ubfx	r1, r0, #5, #3
   2bf2c:	ldr	r1, [r2, r1, lsl #2]
   2bf30:	and	r2, r0, #31
   2bf34:	tst	r1, r7, lsl r2
   2bf38:	bne	2bf74 <__assert_fail@plt+0x1a0e0>
   2bf3c:	mov	r7, #0
   2bf40:	cmp	r0, #10
   2bf44:	beq	2bf64 <__assert_fail@plt+0x1a0d0>
   2bf48:	b	2bf74 <__assert_fail@plt+0x1a0e0>
   2bf4c:	ldrb	r0, [r0, #78]	; 0x4e
   2bf50:	cmp	r0, #0
   2bf54:	bne	2c7d4 <__assert_fail@plt+0x1a940>
   2bf58:	mov	r7, #0
   2bf5c:	cmp	r6, #10
   2bf60:	bne	2bf74 <__assert_fail@plt+0x1a0e0>
   2bf64:	ldr	r0, [sp, #40]	; 0x28
   2bf68:	ldrb	r7, [r0, #77]	; 0x4d
   2bf6c:	cmp	r7, #0
   2bf70:	movwne	r7, #2
   2bf74:	cmp	r5, r9
   2bf78:	bne	2bee0 <__assert_fail@plt+0x1a04c>
   2bf7c:	mov	r0, #1
   2bf80:	str	r0, [sp, #52]	; 0x34
   2bf84:	str	r0, [sp, #48]	; 0x30
   2bf88:	mov	r0, #4
   2bf8c:	bl	33c98 <__assert_fail@plt+0x21e04>
   2bf90:	cmp	r0, #0
   2bf94:	str	r0, [sp, #56]	; 0x38
   2bf98:	beq	2c7bc <__assert_fail@plt+0x1a928>
   2bf9c:	str	r8, [r0]
   2bfa0:	ldr	r8, [fp, #16]
   2bfa4:	ldr	r2, [sp, #24]
   2bfa8:	mov	r0, #0
   2bfac:	add	r1, sp, #48	; 0x30
   2bfb0:	str	r0, [fp, #-52]	; 0xffffffcc
   2bfb4:	mov	r0, sl
   2bfb8:	mov	r3, r8
   2bfbc:	bl	2c7f4 <__assert_fail@plt+0x1a960>
   2bfc0:	cmp	r0, #0
   2bfc4:	str	r0, [fp, #-52]	; 0xffffffcc
   2bfc8:	bne	2c7ac <__assert_fail@plt+0x1a918>
   2bfcc:	ldr	r0, [sp, #52]	; 0x34
   2bfd0:	cmp	r0, #0
   2bfd4:	beq	2bffc <__assert_fail@plt+0x1a168>
   2bfd8:	ldr	r0, [sp, #40]	; 0x28
   2bfdc:	ldr	r3, [sp, #24]
   2bfe0:	add	r1, sp, #48	; 0x30
   2bfe4:	mov	r2, r5
   2bfe8:	str	r8, [sp]
   2bfec:	bl	2c930 <__assert_fail@plt+0x1aa9c>
   2bff0:	cmp	r0, #0
   2bff4:	str	r0, [fp, #-52]	; 0xffffffcc
   2bff8:	bne	2c7ac <__assert_fail@plt+0x1a918>
   2bffc:	ldr	r1, [sp, #20]
   2c000:	sub	r0, fp, #52	; 0x34
   2c004:	add	r2, sp, #48	; 0x30
   2c008:	mov	r3, r7
   2c00c:	bl	29aec <__assert_fail@plt+0x17c58>
   2c010:	mov	r4, r0
   2c014:	cmp	r0, #0
   2c018:	bne	2c028 <__assert_fail@plt+0x1a194>
   2c01c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2c020:	cmp	r0, #0
   2c024:	bne	2c718 <__assert_fail@plt+0x1a884>
   2c028:	ldr	r0, [sp, #40]	; 0x28
   2c02c:	ldr	r0, [r0, #100]	; 0x64
   2c030:	str	r4, [r0, r5, lsl #2]
   2c034:	b	2c09c <__assert_fail@plt+0x1a208>
   2c038:	ldr	r8, [fp, #16]
   2c03c:	mov	r4, #0
   2c040:	str	r4, [sp, #52]	; 0x34
   2c044:	str	r4, [sp, #48]	; 0x30
   2c048:	str	r4, [sp, #56]	; 0x38
   2c04c:	b	2c09c <__assert_fail@plt+0x1a208>
   2c050:	ldr	r0, [r4, #8]
   2c054:	cmp	r0, #1
   2c058:	str	r0, [sp, #52]	; 0x34
   2c05c:	blt	2c6c4 <__assert_fail@plt+0x1a830>
   2c060:	str	r0, [sp, #48]	; 0x30
   2c064:	lsl	r0, r0, #2
   2c068:	bl	33c98 <__assert_fail@plt+0x21e04>
   2c06c:	cmp	r0, #0
   2c070:	str	r0, [sp, #56]	; 0x38
   2c074:	beq	2c7bc <__assert_fail@plt+0x1a928>
   2c078:	ldr	r2, [r4, #8]
   2c07c:	ldr	r1, [r4, #12]
   2c080:	lsl	r2, r2, #2
   2c084:	bl	11a8c <memcpy@plt>
   2c088:	ldrb	r0, [r4, #52]	; 0x34
   2c08c:	mov	r1, #0
   2c090:	str	r1, [fp, #-52]	; 0xffffffcc
   2c094:	tst	r0, #64	; 0x40
   2c098:	bne	2bfd8 <__assert_fail@plt+0x1a144>
   2c09c:	str	r4, [sp, #36]	; 0x24
   2c0a0:	ldr	r4, [fp, #12]
   2c0a4:	mov	r9, r4
   2c0a8:	cmp	r5, r4
   2c0ac:	bge	2c614 <__assert_fail@plt+0x1a780>
   2c0b0:	ldr	r7, [sp, #40]	; 0x28
   2c0b4:	ldr	r4, [sp, #20]
   2c0b8:	ldr	sl, [sp, #24]
   2c0bc:	mov	r0, #0
   2c0c0:	str	r0, [sp, #32]
   2c0c4:	ldr	r0, [r7, #120]	; 0x78
   2c0c8:	ldr	r1, [sp, #32]
   2c0cc:	cmp	r1, r0
   2c0d0:	bgt	2c618 <__assert_fail@plt+0x1a784>
   2c0d4:	mov	r0, #0
   2c0d8:	add	r1, r5, #1
   2c0dc:	str	r0, [sp, #52]	; 0x34
   2c0e0:	str	r1, [sp, #28]
   2c0e4:	ldr	r0, [r7, #100]	; 0x64
   2c0e8:	ldr	r0, [r0, r1, lsl #2]
   2c0ec:	cmp	r0, #0
   2c0f0:	beq	2c10c <__assert_fail@plt+0x1a278>
   2c0f4:	add	r1, r0, #4
   2c0f8:	add	r0, sp, #48	; 0x30
   2c0fc:	bl	29820 <__assert_fail@plt+0x1798c>
   2c100:	cmp	r0, #0
   2c104:	str	r0, [fp, #-52]	; 0xffffffcc
   2c108:	bne	2c718 <__assert_fail@plt+0x1a884>
   2c10c:	ldr	r1, [sp, #36]	; 0x24
   2c110:	cmp	r1, #0
   2c114:	beq	2c488 <__assert_fail@plt+0x1a5f4>
   2c118:	mov	r0, #0
   2c11c:	ldr	r8, [r7, #84]	; 0x54
   2c120:	str	r0, [fp, #-32]	; 0xffffffe0
   2c124:	str	r0, [fp, #-44]	; 0xffffffd4
   2c128:	str	r0, [fp, #-48]	; 0xffffffd0
   2c12c:	str	r0, [fp, #-40]	; 0xffffffd8
   2c130:	ldr	r1, [r1, #20]
   2c134:	cmp	r1, #1
   2c138:	blt	2c478 <__assert_fail@plt+0x1a5e4>
   2c13c:	str	r5, [sp, #44]	; 0x2c
   2c140:	ldr	r5, [sp, #36]	; 0x24
   2c144:	mov	r4, #0
   2c148:	b	2c2bc <__assert_fail@plt+0x1a428>
   2c14c:	cmp	r2, r1
   2c150:	bne	2c17c <__assert_fail@plt+0x1a2e8>
   2c154:	lsl	r0, r2, #1
   2c158:	lsl	r1, r2, #3
   2c15c:	str	r0, [sp, #48]	; 0x30
   2c160:	ldr	r0, [sp, #56]	; 0x38
   2c164:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2c168:	cmp	r0, #0
   2c16c:	beq	2c6e8 <__assert_fail@plt+0x1a854>
   2c170:	str	r0, [sp, #56]	; 0x38
   2c174:	ldr	r1, [sp, #52]	; 0x34
   2c178:	b	2c180 <__assert_fail@plt+0x1a2ec>
   2c17c:	ldr	r0, [sp, #56]	; 0x38
   2c180:	ldr	r2, [r0]
   2c184:	cmp	r2, r6
   2c188:	ble	2c1c4 <__assert_fail@plt+0x1a330>
   2c18c:	cmp	r1, #1
   2c190:	blt	2c1f4 <__assert_fail@plt+0x1a360>
   2c194:	add	r2, r0, r1, lsl #2
   2c198:	add	r1, r1, #1
   2c19c:	mov	r3, r2
   2c1a0:	ldr	r7, [r3, #-4]!
   2c1a4:	sub	r1, r1, #1
   2c1a8:	cmp	r1, #1
   2c1ac:	str	r7, [r2]
   2c1b0:	mov	r2, r3
   2c1b4:	bgt	2c1a0 <__assert_fail@plt+0x1a30c>
   2c1b8:	ldr	r7, [sp, #40]	; 0x28
   2c1bc:	sub	r1, r1, #1
   2c1c0:	b	2c1f4 <__assert_fail@plt+0x1a360>
   2c1c4:	add	r2, r0, r1, lsl #2
   2c1c8:	ldr	r3, [r2, #-4]
   2c1cc:	cmp	r3, r6
   2c1d0:	ble	2c1f4 <__assert_fail@plt+0x1a360>
   2c1d4:	sub	r1, r1, #2
   2c1d8:	str	r3, [r2]
   2c1dc:	sub	r1, r1, #1
   2c1e0:	ldr	r3, [r2, #-8]
   2c1e4:	sub	r2, r2, #4
   2c1e8:	cmp	r3, r6
   2c1ec:	bgt	2c1d8 <__assert_fail@plt+0x1a344>
   2c1f0:	add	r1, r1, #2
   2c1f4:	str	r6, [r0, r1, lsl #2]
   2c1f8:	b	2c41c <__assert_fail@plt+0x1a588>
   2c1fc:	cmp	r2, r1
   2c200:	bne	2c22c <__assert_fail@plt+0x1a398>
   2c204:	lsl	r0, r2, #1
   2c208:	lsl	r1, r2, #3
   2c20c:	str	r0, [fp, #-48]	; 0xffffffd0
   2c210:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c214:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2c218:	cmp	r0, #0
   2c21c:	beq	2c6e8 <__assert_fail@plt+0x1a854>
   2c220:	str	r0, [fp, #-40]	; 0xffffffd8
   2c224:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c228:	b	2c230 <__assert_fail@plt+0x1a39c>
   2c22c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c230:	ldr	r2, [r0]
   2c234:	cmp	r2, r5
   2c238:	ble	2c274 <__assert_fail@plt+0x1a3e0>
   2c23c:	cmp	r1, #1
   2c240:	blt	2c26c <__assert_fail@plt+0x1a3d8>
   2c244:	add	r2, r0, r1, lsl #2
   2c248:	add	r1, r1, #1
   2c24c:	mov	r3, r2
   2c250:	ldr	r7, [r3, #-4]!
   2c254:	sub	r1, r1, #1
   2c258:	cmp	r1, #1
   2c25c:	str	r7, [r2]
   2c260:	mov	r2, r3
   2c264:	bgt	2c250 <__assert_fail@plt+0x1a3bc>
   2c268:	sub	r1, r1, #1
   2c26c:	ldr	r7, [sp, #40]	; 0x28
   2c270:	b	2c2a8 <__assert_fail@plt+0x1a414>
   2c274:	add	r2, r0, r1, lsl #2
   2c278:	ldr	r7, [sp, #40]	; 0x28
   2c27c:	ldr	r3, [r2, #-4]
   2c280:	cmp	r3, r5
   2c284:	ble	2c2a8 <__assert_fail@plt+0x1a414>
   2c288:	sub	r1, r1, #2
   2c28c:	str	r3, [r2]
   2c290:	sub	r1, r1, #1
   2c294:	ldr	r3, [r2, #-8]
   2c298:	sub	r2, r2, #4
   2c29c:	cmp	r3, r5
   2c2a0:	bgt	2c28c <__assert_fail@plt+0x1a3f8>
   2c2a4:	add	r1, r1, #2
   2c2a8:	str	r5, [r0, r1, lsl #2]
   2c2ac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c2b0:	add	r0, r0, #1
   2c2b4:	str	r0, [fp, #-44]	; 0xffffffd4
   2c2b8:	b	2c394 <__assert_fail@plt+0x1a500>
   2c2bc:	ldr	r0, [r5, #24]
   2c2c0:	ldr	sl, [r0, r4, lsl #2]
   2c2c4:	ldr	r0, [r8]
   2c2c8:	add	r1, r0, sl, lsl #3
   2c2cc:	ldrb	r1, [r1, #6]
   2c2d0:	tst	r1, #16
   2c2d4:	beq	2c3dc <__assert_fail@plt+0x1a548>
   2c2d8:	ldr	r5, [sp, #44]	; 0x2c
   2c2dc:	mov	r0, r8
   2c2e0:	mov	r1, sl
   2c2e4:	mov	r2, r7
   2c2e8:	mov	r3, r5
   2c2ec:	bl	2d240 <__assert_fail@plt+0x1b3ac>
   2c2f0:	mov	r9, r0
   2c2f4:	cmp	r0, #2
   2c2f8:	blt	2c3c8 <__assert_fail@plt+0x1a534>
   2c2fc:	ldr	r0, [sp, #40]	; 0x28
   2c300:	ldr	r1, [r8, #12]
   2c304:	add	r6, r9, r5
   2c308:	ldr	r0, [r0, #100]	; 0x64
   2c30c:	ldr	r5, [r1, sl, lsl #2]
   2c310:	mov	r1, #0
   2c314:	ldr	r0, [r0, r6, lsl #2]
   2c318:	str	r1, [fp, #-44]	; 0xffffffd4
   2c31c:	cmp	r0, #0
   2c320:	beq	2c33c <__assert_fail@plt+0x1a4a8>
   2c324:	add	r1, r0, #4
   2c328:	sub	r0, fp, #48	; 0x30
   2c32c:	bl	29820 <__assert_fail@plt+0x1798c>
   2c330:	cmp	r0, #0
   2c334:	str	r0, [fp, #-32]	; 0xffffffe0
   2c338:	bne	2c6f0 <__assert_fail@plt+0x1a85c>
   2c33c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2c340:	cmp	r2, #0
   2c344:	beq	2c36c <__assert_fail@plt+0x1a4d8>
   2c348:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c34c:	cmp	r1, #0
   2c350:	bne	2c1fc <__assert_fail@plt+0x1a368>
   2c354:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c358:	str	r5, [r0]
   2c35c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c360:	add	r0, r0, #1
   2c364:	str	r0, [fp, #-44]	; 0xffffffd4
   2c368:	b	2c390 <__assert_fail@plt+0x1a4fc>
   2c36c:	mov	r0, #1
   2c370:	str	r0, [fp, #-44]	; 0xffffffd4
   2c374:	str	r0, [fp, #-48]	; 0xffffffd0
   2c378:	mov	r0, #4
   2c37c:	bl	33c98 <__assert_fail@plt+0x21e04>
   2c380:	cmp	r0, #0
   2c384:	str	r0, [fp, #-40]	; 0xffffffd8
   2c388:	beq	2c700 <__assert_fail@plt+0x1a86c>
   2c38c:	str	r5, [r0]
   2c390:	ldr	r7, [sp, #40]	; 0x28
   2c394:	sub	r0, fp, #32
   2c398:	mov	r1, r8
   2c39c:	sub	r2, fp, #48	; 0x30
   2c3a0:	bl	2cfb0 <__assert_fail@plt+0x1b11c>
   2c3a4:	ldr	r1, [r7, #100]	; 0x64
   2c3a8:	str	r0, [r1, r6, lsl #2]
   2c3ac:	ldr	r0, [r7, #100]	; 0x64
   2c3b0:	ldr	r0, [r0, r6, lsl #2]
   2c3b4:	cmp	r0, #0
   2c3b8:	bne	2c3c8 <__assert_fail@plt+0x1a534>
   2c3bc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2c3c0:	cmp	r7, #0
   2c3c4:	bne	2c6f4 <__assert_fail@plt+0x1a860>
   2c3c8:	ldr	r7, [sp, #40]	; 0x28
   2c3cc:	ldr	r5, [sp, #36]	; 0x24
   2c3d0:	cmp	r9, #0
   2c3d4:	bne	2c3f4 <__assert_fail@plt+0x1a560>
   2c3d8:	ldr	r0, [r8]
   2c3dc:	ldr	r2, [sp, #44]	; 0x2c
   2c3e0:	add	r1, r0, sl, lsl #3
   2c3e4:	mov	r0, r7
   2c3e8:	bl	2d534 <__assert_fail@plt+0x1b6a0>
   2c3ec:	cmp	r0, #0
   2c3f0:	beq	2c450 <__assert_fail@plt+0x1a5bc>
   2c3f4:	ldr	r0, [r8, #12]
   2c3f8:	ldr	r2, [sp, #48]	; 0x30
   2c3fc:	ldr	r6, [r0, sl, lsl #2]
   2c400:	cmp	r2, #0
   2c404:	beq	2c42c <__assert_fail@plt+0x1a598>
   2c408:	ldr	r1, [sp, #52]	; 0x34
   2c40c:	cmp	r1, #0
   2c410:	bne	2c14c <__assert_fail@plt+0x1a2b8>
   2c414:	ldr	r0, [sp, #56]	; 0x38
   2c418:	str	r6, [r0]
   2c41c:	ldr	r0, [sp, #52]	; 0x34
   2c420:	add	r0, r0, #1
   2c424:	str	r0, [sp, #52]	; 0x34
   2c428:	b	2c450 <__assert_fail@plt+0x1a5bc>
   2c42c:	mov	r0, #1
   2c430:	str	r0, [sp, #52]	; 0x34
   2c434:	str	r0, [sp, #48]	; 0x30
   2c438:	mov	r0, #4
   2c43c:	bl	33c98 <__assert_fail@plt+0x21e04>
   2c440:	cmp	r0, #0
   2c444:	str	r0, [sp, #56]	; 0x38
   2c448:	beq	2c6dc <__assert_fail@plt+0x1a848>
   2c44c:	str	r6, [r0]
   2c450:	ldr	r0, [r5, #20]
   2c454:	add	r4, r4, #1
   2c458:	cmp	r4, r0
   2c45c:	blt	2c2bc <__assert_fail@plt+0x1a428>
   2c460:	ldr	r4, [fp, #12]
   2c464:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c468:	ldr	sl, [sp, #24]
   2c46c:	ldr	r5, [sp, #44]	; 0x2c
   2c470:	mov	r9, r4
   2c474:	ldr	r4, [sp, #20]
   2c478:	bl	17754 <__assert_fail@plt+0x58c0>
   2c47c:	ldr	r8, [fp, #16]
   2c480:	mov	r0, #0
   2c484:	str	r0, [fp, #-52]	; 0xffffffcc
   2c488:	ldr	r0, [sp, #52]	; 0x34
   2c48c:	cmp	r0, #0
   2c490:	beq	2c4dc <__assert_fail@plt+0x1a648>
   2c494:	add	r6, sp, #48	; 0x30
   2c498:	mov	r0, r4
   2c49c:	mov	r2, sl
   2c4a0:	mov	r3, r8
   2c4a4:	mov	r1, r6
   2c4a8:	bl	2c7f4 <__assert_fail@plt+0x1a960>
   2c4ac:	cmp	r0, #0
   2c4b0:	str	r0, [fp, #-52]	; 0xffffffcc
   2c4b4:	bne	2c718 <__assert_fail@plt+0x1a884>
   2c4b8:	ldr	r2, [sp, #28]
   2c4bc:	mov	r0, r7
   2c4c0:	mov	r1, r6
   2c4c4:	mov	r3, sl
   2c4c8:	str	r8, [sp]
   2c4cc:	bl	2c930 <__assert_fail@plt+0x1aa9c>
   2c4d0:	cmp	r0, #0
   2c4d4:	str	r0, [fp, #-52]	; 0xffffffcc
   2c4d8:	bne	2c718 <__assert_fail@plt+0x1a884>
   2c4dc:	cmn	r5, #1
   2c4e0:	ble	2c51c <__assert_fail@plt+0x1a688>
   2c4e4:	ldr	r0, [r7, #48]	; 0x30
   2c4e8:	cmp	r0, r5
   2c4ec:	beq	2c5e0 <__assert_fail@plt+0x1a74c>
   2c4f0:	ldr	r0, [r7, #80]	; 0x50
   2c4f4:	cmp	r0, #2
   2c4f8:	blt	2c528 <__assert_fail@plt+0x1a694>
   2c4fc:	ldr	r0, [r7, #8]
   2c500:	ldr	r6, [r0, r5, lsl #2]
   2c504:	cmn	r6, #1
   2c508:	bne	2c560 <__assert_fail@plt+0x1a6cc>
   2c50c:	sub	r1, r5, #1
   2c510:	cmp	r5, #0
   2c514:	mov	r5, r1
   2c518:	bgt	2c500 <__assert_fail@plt+0x1a66c>
   2c51c:	ldr	r3, [r7, #60]	; 0x3c
   2c520:	add	r5, sp, #48	; 0x30
   2c524:	b	2c588 <__assert_fail@plt+0x1a6f4>
   2c528:	ldr	r0, [r7, #4]
   2c52c:	ldr	r1, [r7, #68]	; 0x44
   2c530:	mov	r3, #1
   2c534:	ldrb	r0, [r0, r5]
   2c538:	add	r5, sp, #48	; 0x30
   2c53c:	ubfx	r2, r0, #5, #3
   2c540:	ldr	r1, [r1, r2, lsl #2]
   2c544:	and	r2, r0, #31
   2c548:	tst	r1, r3, lsl r2
   2c54c:	bne	2c588 <__assert_fail@plt+0x1a6f4>
   2c550:	mov	r3, #0
   2c554:	cmp	r0, #10
   2c558:	beq	2c57c <__assert_fail@plt+0x1a6e8>
   2c55c:	b	2c588 <__assert_fail@plt+0x1a6f4>
   2c560:	ldrb	r0, [r7, #78]	; 0x4e
   2c564:	add	r5, sp, #48	; 0x30
   2c568:	cmp	r0, #0
   2c56c:	bne	2c5f4 <__assert_fail@plt+0x1a760>
   2c570:	mov	r3, #0
   2c574:	cmp	r6, #10
   2c578:	bne	2c588 <__assert_fail@plt+0x1a6f4>
   2c57c:	ldrb	r3, [r7, #77]	; 0x4d
   2c580:	cmp	r3, #0
   2c584:	movwne	r3, #2
   2c588:	sub	r0, fp, #52	; 0x34
   2c58c:	mov	r1, r4
   2c590:	mov	r2, r5
   2c594:	bl	29aec <__assert_fail@plt+0x17c58>
   2c598:	cmp	r0, #0
   2c59c:	str	r0, [sp, #36]	; 0x24
   2c5a0:	bne	2c5b0 <__assert_fail@plt+0x1a71c>
   2c5a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2c5a8:	cmp	r0, #0
   2c5ac:	bne	2c718 <__assert_fail@plt+0x1a884>
   2c5b0:	ldr	r1, [sp, #28]
   2c5b4:	ldr	r2, [sp, #36]	; 0x24
   2c5b8:	ldr	r0, [r7, #100]	; 0x64
   2c5bc:	str	r2, [r0, r1, lsl #2]
   2c5c0:	cmp	r2, #0
   2c5c4:	ldr	r2, [sp, #32]
   2c5c8:	mov	r0, #0
   2c5cc:	mov	r5, r1
   2c5d0:	addeq	r0, r2, #1
   2c5d4:	cmp	r1, r9
   2c5d8:	blt	2c0c0 <__assert_fail@plt+0x1a22c>
   2c5dc:	b	2c61c <__assert_fail@plt+0x1a788>
   2c5e0:	ldr	r0, [r7, #88]	; 0x58
   2c5e4:	add	r5, sp, #48	; 0x30
   2c5e8:	and	r0, r0, #2
   2c5ec:	eor	r3, r0, #10
   2c5f0:	b	2c588 <__assert_fail@plt+0x1a6f4>
   2c5f4:	mov	r0, r6
   2c5f8:	bl	11cb4 <iswalnum@plt>
   2c5fc:	mov	r3, #1
   2c600:	cmp	r6, #95	; 0x5f
   2c604:	beq	2c588 <__assert_fail@plt+0x1a6f4>
   2c608:	cmp	r0, #0
   2c60c:	beq	2c570 <__assert_fail@plt+0x1a6dc>
   2c610:	b	2c588 <__assert_fail@plt+0x1a6f4>
   2c614:	ldr	r7, [sp, #40]	; 0x28
   2c618:	mov	r1, r5
   2c61c:	ldr	r0, [sp, #56]	; 0x38
   2c620:	mov	r4, r1
   2c624:	bl	17754 <__assert_fail@plt+0x58c0>
   2c628:	ldr	r0, [r7, #100]	; 0x64
   2c62c:	mov	sl, #1
   2c630:	ldr	r1, [r0, r9, lsl #2]
   2c634:	ldr	r0, [sp, #16]
   2c638:	str	r4, [r0]
   2c63c:	ldr	r0, [sp, #12]
   2c640:	cmp	r1, #0
   2c644:	addne	r1, r1, #4
   2c648:	str	r0, [r7, #40]	; 0x28
   2c64c:	ldr	r0, [sp, #8]
   2c650:	str	r0, [r7, #100]	; 0x64
   2c654:	beq	2c6b8 <__assert_fail@plt+0x1a824>
   2c658:	ldr	r2, [r1, #4]
   2c65c:	cmp	r2, #1
   2c660:	blt	2c6b4 <__assert_fail@plt+0x1a820>
   2c664:	ldr	r0, [fp, #8]
   2c668:	ldr	r1, [r1, #8]
   2c66c:	subs	r2, r2, #1
   2c670:	mov	sl, #0
   2c674:	mov	r3, #0
   2c678:	beq	2c6a4 <__assert_fail@plt+0x1a810>
   2c67c:	mov	r3, #0
   2c680:	mov	r7, #1
   2c684:	add	r5, r3, r2
   2c688:	lsr	r4, r5, #1
   2c68c:	ldr	r6, [r1, r4, lsl #2]
   2c690:	cmp	r6, r0
   2c694:	movge	r2, r4
   2c698:	addlt	r3, r7, r5, lsr #1
   2c69c:	cmp	r3, r2
   2c6a0:	bcc	2c684 <__assert_fail@plt+0x1a7f0>
   2c6a4:	ldr	r1, [r1, r3, lsl #2]
   2c6a8:	cmp	r1, r0
   2c6ac:	movne	sl, #1
   2c6b0:	b	2c6b8 <__assert_fail@plt+0x1a824>
   2c6b4:	mov	sl, #1
   2c6b8:	mov	r0, sl
   2c6bc:	sub	sp, fp, #28
   2c6c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6c4:	mov	r0, #0
   2c6c8:	str	r0, [sp, #52]	; 0x34
   2c6cc:	str	r0, [sp, #48]	; 0x30
   2c6d0:	str	r0, [sp, #56]	; 0x38
   2c6d4:	str	r0, [fp, #-52]	; 0xffffffcc
   2c6d8:	b	2bffc <__assert_fail@plt+0x1a168>
   2c6dc:	mov	r0, #0
   2c6e0:	str	r0, [sp, #48]	; 0x30
   2c6e4:	str	r0, [sp, #52]	; 0x34
   2c6e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c6ec:	b	2c70c <__assert_fail@plt+0x1a878>
   2c6f0:	mov	r7, r0
   2c6f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c6f8:	bl	17754 <__assert_fail@plt+0x58c0>
   2c6fc:	b	2c714 <__assert_fail@plt+0x1a880>
   2c700:	mov	r0, #0
   2c704:	str	r0, [fp, #-48]	; 0xffffffd0
   2c708:	str	r0, [fp, #-44]	; 0xffffffd4
   2c70c:	bl	17754 <__assert_fail@plt+0x58c0>
   2c710:	mov	r7, #12
   2c714:	str	r7, [fp, #-52]	; 0xffffffcc
   2c718:	ldr	r0, [sp, #56]	; 0x38
   2c71c:	bl	17754 <__assert_fail@plt+0x58c0>
   2c720:	ldr	sl, [fp, #-52]	; 0xffffffcc
   2c724:	b	2c6b8 <__assert_fail@plt+0x1a824>
   2c728:	mov	r6, r1
   2c72c:	mvn	r1, #-2147483648	; 0x80000000
   2c730:	mov	sl, #12
   2c734:	sub	r1, r1, r5
   2c738:	cmp	r1, r2
   2c73c:	ble	2c6b8 <__assert_fail@plt+0x1a824>
   2c740:	add	r0, r2, #1
   2c744:	add	r7, r0, r5
   2c748:	str	r0, [sp, #44]	; 0x2c
   2c74c:	cmn	r7, #-1073741823	; 0xc0000001
   2c750:	bhi	2c6b8 <__assert_fail@plt+0x1a824>
   2c754:	mov	r4, r6
   2c758:	lsl	r1, r7, #2
   2c75c:	ldr	r0, [r4, #8]!
   2c760:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2c764:	cmp	r0, #0
   2c768:	beq	2c6b8 <__assert_fail@plt+0x1a824>
   2c76c:	ldr	r1, [sp, #44]	; 0x2c
   2c770:	str	r7, [r6, #4]
   2c774:	str	r0, [r6, #8]
   2c778:	add	r0, r0, r5, lsl #2
   2c77c:	lsl	r2, r1, #2
   2c780:	mov	r1, #0
   2c784:	bl	11cd8 <memset@plt>
   2c788:	ldr	r0, [sp, #40]	; 0x28
   2c78c:	ldr	sl, [sp, #20]
   2c790:	mov	r1, r6
   2c794:	b	2be5c <__assert_fail@plt+0x19fc8>
   2c798:	and	r0, r3, #2
   2c79c:	eor	r7, r0, #10
   2c7a0:	cmp	r5, r9
   2c7a4:	beq	2bf7c <__assert_fail@plt+0x1a0e8>
   2c7a8:	b	2bee0 <__assert_fail@plt+0x1a04c>
   2c7ac:	mov	sl, r0
   2c7b0:	ldr	r0, [sp, #56]	; 0x38
   2c7b4:	bl	17754 <__assert_fail@plt+0x58c0>
   2c7b8:	b	2c6b8 <__assert_fail@plt+0x1a824>
   2c7bc:	mov	r0, #0
   2c7c0:	mov	sl, #12
   2c7c4:	str	r0, [sp, #48]	; 0x30
   2c7c8:	str	r0, [sp, #52]	; 0x34
   2c7cc:	str	sl, [fp, #-52]	; 0xffffffcc
   2c7d0:	b	2c6b8 <__assert_fail@plt+0x1a824>
   2c7d4:	mov	r0, r6
   2c7d8:	bl	11cb4 <iswalnum@plt>
   2c7dc:	mov	r7, #1
   2c7e0:	cmp	r6, #95	; 0x5f
   2c7e4:	beq	2bf74 <__assert_fail@plt+0x1a0e0>
   2c7e8:	cmp	r0, #0
   2c7ec:	beq	2bf58 <__assert_fail@plt+0x1a0c4>
   2c7f0:	b	2bf74 <__assert_fail@plt+0x1a0e0>
   2c7f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c7f8:	add	fp, sp, #28
   2c7fc:	sub	sp, sp, #28
   2c800:	str	r0, [sp, #12]
   2c804:	ldr	r0, [r1, #4]
   2c808:	mov	r4, r1
   2c80c:	mov	r1, #0
   2c810:	mov	sl, r3
   2c814:	mov	r8, r2
   2c818:	str	r1, [sp, #20]
   2c81c:	str	r0, [sp, #16]
   2c820:	lsl	r0, r0, #2
   2c824:	bl	33c98 <__assert_fail@plt+0x21e04>
   2c828:	cmp	r0, #0
   2c82c:	str	r0, [sp, #24]
   2c830:	beq	2c928 <__assert_fail@plt+0x1aa94>
   2c834:	ldr	r0, [r4, #4]
   2c838:	cmp	r0, #1
   2c83c:	blt	2c900 <__assert_fail@plt+0x1aa6c>
   2c840:	mov	r9, #0
   2c844:	str	r4, [sp, #8]
   2c848:	ldr	r0, [r4, #8]
   2c84c:	ldr	r1, [sp, #12]
   2c850:	ldr	r2, [r0, r9, lsl #2]
   2c854:	ldr	r1, [r1, #24]
   2c858:	add	r0, r2, r2, lsl #1
   2c85c:	add	r1, r1, r0, lsl #2
   2c860:	ldr	r0, [r1, #4]
   2c864:	cmp	r0, #1
   2c868:	blt	2c8a4 <__assert_fail@plt+0x1aa10>
   2c86c:	ldr	r7, [sp, #12]
   2c870:	ldr	r3, [r1, #8]
   2c874:	mov	r6, #0
   2c878:	ldr	r7, [r7]
   2c87c:	ldr	r4, [r3, r6, lsl #2]
   2c880:	add	r5, r7, r4, lsl #3
   2c884:	ldrb	r5, [r5, #4]
   2c888:	cmp	r5, sl
   2c88c:	ldreq	r5, [r7, r4, lsl #3]
   2c890:	cmpeq	r5, r8
   2c894:	beq	2c8cc <__assert_fail@plt+0x1aa38>
   2c898:	add	r6, r6, #1
   2c89c:	cmp	r6, r0
   2c8a0:	blt	2c87c <__assert_fail@plt+0x1a9e8>
   2c8a4:	add	r0, sp, #16
   2c8a8:	bl	29820 <__assert_fail@plt+0x1798c>
   2c8ac:	cmp	r0, #0
   2c8b0:	bne	2c8f0 <__assert_fail@plt+0x1aa5c>
   2c8b4:	ldr	r4, [sp, #8]
   2c8b8:	add	r9, r9, #1
   2c8bc:	ldr	r0, [r4, #4]
   2c8c0:	cmp	r9, r0
   2c8c4:	blt	2c848 <__assert_fail@plt+0x1a9b4>
   2c8c8:	b	2c900 <__assert_fail@plt+0x1aa6c>
   2c8cc:	cmn	r4, #1
   2c8d0:	beq	2c8a4 <__assert_fail@plt+0x1aa10>
   2c8d4:	ldr	r0, [sp, #12]
   2c8d8:	add	r1, sp, #16
   2c8dc:	mov	r3, r8
   2c8e0:	str	sl, [sp]
   2c8e4:	bl	2ce78 <__assert_fail@plt+0x1afe4>
   2c8e8:	cmp	r0, #0
   2c8ec:	beq	2c8b4 <__assert_fail@plt+0x1aa20>
   2c8f0:	mov	r7, r0
   2c8f4:	ldr	r0, [sp, #24]
   2c8f8:	bl	17754 <__assert_fail@plt+0x58c0>
   2c8fc:	b	2c91c <__assert_fail@plt+0x1aa88>
   2c900:	ldr	r0, [r4, #8]
   2c904:	bl	17754 <__assert_fail@plt+0x58c0>
   2c908:	vldr	d16, [sp, #16]
   2c90c:	ldr	r0, [sp, #24]
   2c910:	mov	r7, #0
   2c914:	str	r0, [r4, #8]
   2c918:	vstr	d16, [r4]
   2c91c:	mov	r0, r7
   2c920:	sub	sp, fp, #28
   2c924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c928:	mov	r7, #12
   2c92c:	b	2c91c <__assert_fail@plt+0x1aa88>
   2c930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c934:	add	fp, sp, #28
   2c938:	sub	sp, sp, #52	; 0x34
   2c93c:	ldr	ip, [r0, #108]	; 0x6c
   2c940:	mov	lr, r1
   2c944:	ldr	r1, [r0, #84]	; 0x54
   2c948:	str	r0, [sp, #24]
   2c94c:	mov	sl, r2
   2c950:	mov	r8, #0
   2c954:	mov	r0, #0
   2c958:	cmp	ip, #1
   2c95c:	str	r1, [sp, #28]
   2c960:	blt	2c9a4 <__assert_fail@plt+0x1ab10>
   2c964:	ldr	r0, [sp, #24]
   2c968:	mov	r7, #1
   2c96c:	mov	r1, ip
   2c970:	ldr	r2, [r0, #116]	; 0x74
   2c974:	mov	r0, #0
   2c978:	add	r6, r1, r0
   2c97c:	add	r6, r6, r6, lsr #31
   2c980:	asr	r4, r6, #1
   2c984:	add	r5, r4, r4, lsl #1
   2c988:	add	r5, r2, r5, lsl #3
   2c98c:	ldr	r5, [r5, #4]
   2c990:	cmp	r5, sl
   2c994:	addlt	r0, r7, r6, asr #1
   2c998:	movge	r1, r4
   2c99c:	cmp	r0, r1
   2c9a0:	blt	2c978 <__assert_fail@plt+0x1aae4>
   2c9a4:	cmp	r0, ip
   2c9a8:	bge	2ce6c <__assert_fail@plt+0x1afd8>
   2c9ac:	cmn	r0, #1
   2c9b0:	beq	2ce6c <__assert_fail@plt+0x1afd8>
   2c9b4:	ldr	r1, [sp, #24]
   2c9b8:	add	r0, r0, r0, lsl #1
   2c9bc:	str	r0, [sp, #8]
   2c9c0:	ldr	r1, [r1, #116]	; 0x74
   2c9c4:	add	r0, r1, r0, lsl #3
   2c9c8:	ldr	r0, [r0, #4]
   2c9cc:	cmp	r0, sl
   2c9d0:	bne	2ce6c <__assert_fail@plt+0x1afd8>
   2c9d4:	str	r3, [sp, #12]
   2c9d8:	mov	r9, #1
   2c9dc:	str	lr, [sp, #16]
   2c9e0:	b	2c9ec <__assert_fail@plt+0x1ab58>
   2c9e4:	ldr	r0, [sp, #24]
   2c9e8:	ldr	r1, [r0, #116]	; 0x74
   2c9ec:	ldr	r0, [sp, #8]
   2c9f0:	add	r0, r1, r0, lsl #3
   2c9f4:	mov	r8, r0
   2c9f8:	ldr	r0, [lr, #4]
   2c9fc:	cmp	r0, #1
   2ca00:	blt	2ccfc <__assert_fail@plt+0x1ae68>
   2ca04:	subs	r6, r0, #1
   2ca08:	ldr	r2, [r8]
   2ca0c:	ldr	r0, [lr, #8]
   2ca10:	mov	r3, #0
   2ca14:	beq	2ca3c <__assert_fail@plt+0x1aba8>
   2ca18:	mov	r1, r6
   2ca1c:	add	r7, r3, r1
   2ca20:	lsr	r5, r7, #1
   2ca24:	ldr	r4, [r0, r5, lsl #2]
   2ca28:	cmp	r4, r2
   2ca2c:	movge	r1, r5
   2ca30:	addlt	r3, r9, r7, lsr #1
   2ca34:	cmp	r3, r1
   2ca38:	bcc	2ca1c <__assert_fail@plt+0x1ab88>
   2ca3c:	ldr	r1, [r0, r3, lsl #2]
   2ca40:	cmp	r1, r2
   2ca44:	bne	2ccfc <__assert_fail@plt+0x1ae68>
   2ca48:	ldr	r3, [r8, #12]
   2ca4c:	ldr	r1, [r8, #8]
   2ca50:	add	r3, r3, sl
   2ca54:	sub	r7, r3, r1
   2ca58:	cmp	r7, sl
   2ca5c:	bne	2cb48 <__assert_fail@plt+0x1acb4>
   2ca60:	ldr	r1, [sp, #28]
   2ca64:	add	r2, r2, r2, lsl #1
   2ca68:	cmp	r6, #0
   2ca6c:	ldr	r1, [r1, #20]
   2ca70:	add	r1, r1, r2, lsl #2
   2ca74:	mov	r2, #0
   2ca78:	ldr	r1, [r1, #8]
   2ca7c:	ldr	r4, [r1]
   2ca80:	beq	2caa4 <__assert_fail@plt+0x1ac10>
   2ca84:	add	r1, r2, r6
   2ca88:	lsr	r3, r1, #1
   2ca8c:	ldr	r7, [r0, r3, lsl #2]
   2ca90:	cmp	r7, r4
   2ca94:	movge	r6, r3
   2ca98:	addlt	r2, r9, r1, lsr #1
   2ca9c:	cmp	r2, r6
   2caa0:	bcc	2ca84 <__assert_fail@plt+0x1abf0>
   2caa4:	ldr	r1, [r0, r2, lsl #2]
   2caa8:	mov	r0, #4
   2caac:	cmp	r1, r4
   2cab0:	beq	2ccf0 <__assert_fail@plt+0x1ae5c>
   2cab4:	mov	r0, #4
   2cab8:	str	r9, [sp, #36]	; 0x24
   2cabc:	str	r9, [sp, #32]
   2cac0:	bl	33c98 <__assert_fail@plt+0x21e04>
   2cac4:	cmp	r0, #0
   2cac8:	str	r0, [sp, #40]	; 0x28
   2cacc:	beq	2cd10 <__assert_fail@plt+0x1ae7c>
   2cad0:	mov	r6, #0
   2cad4:	str	r4, [r0]
   2cad8:	ldr	r0, [sp, #28]
   2cadc:	ldr	r2, [sp, #12]
   2cae0:	ldr	r3, [fp, #8]
   2cae4:	add	r4, sp, #32
   2cae8:	str	r6, [fp, #-32]	; 0xffffffe0
   2caec:	mov	r1, r4
   2caf0:	bl	2c7f4 <__assert_fail@plt+0x1a960>
   2caf4:	ldr	r5, [sp, #16]
   2caf8:	mov	r7, r0
   2cafc:	mov	r1, r4
   2cb00:	mov	r0, r5
   2cb04:	bl	29820 <__assert_fail@plt+0x1798c>
   2cb08:	mov	r4, r0
   2cb0c:	ldr	r0, [sp, #40]	; 0x28
   2cb10:	bl	17754 <__assert_fail@plt+0x58c0>
   2cb14:	orr	r0, r7, r6
   2cb18:	mov	lr, r5
   2cb1c:	orrs	r0, r0, r4
   2cb20:	mov	r0, #2
   2cb24:	beq	2ccf0 <__assert_fail@plt+0x1ae5c>
   2cb28:	cmp	r7, #0
   2cb2c:	mov	r0, #1
   2cb30:	movne	r4, r7
   2cb34:	cmp	r6, #0
   2cb38:	movne	r4, r6
   2cb3c:	str	r4, [fp, #-32]	; 0xffffffe0
   2cb40:	str	r4, [sp, #20]
   2cb44:	b	2ccf0 <__assert_fail@plt+0x1ae5c>
   2cb48:	ldr	r0, [sp, #24]
   2cb4c:	ldr	r0, [r0, #100]	; 0x64
   2cb50:	ldr	r5, [r0, r7, lsl #2]
   2cb54:	ldr	r0, [sp, #28]
   2cb58:	ldr	r0, [r0, #12]
   2cb5c:	cmp	r5, #0
   2cb60:	ldr	r4, [r0, r2, lsl #2]
   2cb64:	beq	2cc2c <__assert_fail@plt+0x1ad98>
   2cb68:	ldr	ip, [r5, #8]
   2cb6c:	cmp	ip, #0
   2cb70:	ble	2cc58 <__assert_fail@plt+0x1adc4>
   2cb74:	ldr	r0, [r5, #12]
   2cb78:	subs	r3, ip, #1
   2cb7c:	mov	r2, #0
   2cb80:	str	r7, [sp, #4]
   2cb84:	beq	2cba8 <__assert_fail@plt+0x1ad14>
   2cb88:	add	r6, r2, r3
   2cb8c:	lsr	r7, r6, #1
   2cb90:	ldr	r1, [r0, r7, lsl #2]
   2cb94:	cmp	r1, r4
   2cb98:	movge	r3, r7
   2cb9c:	addlt	r2, r9, r6, lsr #1
   2cba0:	cmp	r2, r3
   2cba4:	bcc	2cb88 <__assert_fail@plt+0x1acf4>
   2cba8:	ldr	r1, [r0, r2, lsl #2]
   2cbac:	mov	r0, #4
   2cbb0:	cmp	r1, r4
   2cbb4:	beq	2ccf0 <__assert_fail@plt+0x1ae5c>
   2cbb8:	ldr	r7, [sp, #4]
   2cbbc:	cmp	ip, #1
   2cbc0:	str	ip, [sp, #36]	; 0x24
   2cbc4:	blt	2cc5c <__assert_fail@plt+0x1adc8>
   2cbc8:	lsl	r0, ip, #2
   2cbcc:	str	ip, [sp, #32]
   2cbd0:	bl	33c98 <__assert_fail@plt+0x21e04>
   2cbd4:	cmp	r0, #0
   2cbd8:	str	r0, [sp, #40]	; 0x28
   2cbdc:	beq	2cd78 <__assert_fail@plt+0x1aee4>
   2cbe0:	ldr	r2, [r5, #8]
   2cbe4:	ldr	r1, [r5, #12]
   2cbe8:	mov	r5, r0
   2cbec:	lsl	r2, r2, #2
   2cbf0:	bl	11a8c <memcpy@plt>
   2cbf4:	ldr	r1, [sp, #32]
   2cbf8:	mov	r6, #0
   2cbfc:	str	r6, [fp, #-32]	; 0xffffffe0
   2cc00:	cmp	r1, #0
   2cc04:	beq	2cc70 <__assert_fail@plt+0x1addc>
   2cc08:	ldr	r0, [sp, #36]	; 0x24
   2cc0c:	cmp	r0, #0
   2cc10:	bne	2cd8c <__assert_fail@plt+0x1aef8>
   2cc14:	str	r4, [r5]
   2cc18:	str	r9, [sp, #36]	; 0x24
   2cc1c:	mov	r6, #0
   2cc20:	cmp	r6, #0
   2cc24:	beq	2cc98 <__assert_fail@plt+0x1ae04>
   2cc28:	b	2cd50 <__assert_fail@plt+0x1aebc>
   2cc2c:	mov	r0, #4
   2cc30:	str	r9, [sp, #36]	; 0x24
   2cc34:	str	r9, [sp, #32]
   2cc38:	bl	33c98 <__assert_fail@plt+0x21e04>
   2cc3c:	cmp	r0, #0
   2cc40:	str	r0, [sp, #40]	; 0x28
   2cc44:	beq	2cd24 <__assert_fail@plt+0x1ae90>
   2cc48:	str	r4, [r0]
   2cc4c:	mov	r0, #0
   2cc50:	str	r0, [fp, #-32]	; 0xffffffe0
   2cc54:	b	2cc98 <__assert_fail@plt+0x1ae04>
   2cc58:	str	ip, [sp, #36]	; 0x24
   2cc5c:	mov	r6, #0
   2cc60:	str	r6, [sp, #36]	; 0x24
   2cc64:	str	r6, [sp, #32]
   2cc68:	str	r6, [sp, #40]	; 0x28
   2cc6c:	str	r6, [fp, #-32]	; 0xffffffe0
   2cc70:	mov	r0, #4
   2cc74:	str	r9, [sp, #36]	; 0x24
   2cc78:	str	r9, [sp, #32]
   2cc7c:	bl	33c98 <__assert_fail@plt+0x21e04>
   2cc80:	cmp	r0, #0
   2cc84:	str	r0, [sp, #40]	; 0x28
   2cc88:	beq	2cd44 <__assert_fail@plt+0x1aeb0>
   2cc8c:	str	r4, [r0]
   2cc90:	cmp	r6, #0
   2cc94:	bne	2cd50 <__assert_fail@plt+0x1aebc>
   2cc98:	ldr	r1, [sp, #28]
   2cc9c:	sub	r0, fp, #32
   2cca0:	add	r2, sp, #32
   2cca4:	bl	2cfb0 <__assert_fail@plt+0x1b11c>
   2cca8:	ldr	r4, [sp, #24]
   2ccac:	ldr	r1, [r4, #100]	; 0x64
   2ccb0:	str	r0, [r1, r7, lsl #2]
   2ccb4:	ldr	r0, [sp, #40]	; 0x28
   2ccb8:	bl	17754 <__assert_fail@plt+0x58c0>
   2ccbc:	ldr	r0, [r4, #100]	; 0x64
   2ccc0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2ccc4:	ldr	r0, [r0, r7, lsl #2]
   2ccc8:	cmp	r1, #0
   2cccc:	mov	r2, r1
   2ccd0:	movwne	r2, #1
   2ccd4:	clz	r0, r0
   2ccd8:	lsr	r0, r0, #5
   2ccdc:	ands	r0, r0, r2
   2cce0:	ldr	r2, [sp, #20]
   2cce4:	movne	r2, r1
   2cce8:	str	r2, [sp, #20]
   2ccec:	ldr	lr, [sp, #16]
   2ccf0:	cmp	r0, #0
   2ccf4:	cmpne	r0, #4
   2ccf8:	bne	2ce58 <__assert_fail@plt+0x1afc4>
   2ccfc:	ldrb	r1, [r8, #20]
   2cd00:	add	r0, r8, #24
   2cd04:	cmp	r1, #0
   2cd08:	bne	2c9f4 <__assert_fail@plt+0x1ab60>
   2cd0c:	b	2ce68 <__assert_fail@plt+0x1afd4>
   2cd10:	mov	r0, #0
   2cd14:	mov	r6, #12
   2cd18:	str	r0, [sp, #32]
   2cd1c:	str	r0, [sp, #36]	; 0x24
   2cd20:	b	2cad8 <__assert_fail@plt+0x1ac44>
   2cd24:	mov	r0, #0
   2cd28:	mov	r1, #12
   2cd2c:	str	r0, [sp, #32]
   2cd30:	str	r0, [sp, #36]	; 0x24
   2cd34:	mov	r0, #12
   2cd38:	str	r1, [fp, #-32]	; 0xffffffe0
   2cd3c:	str	r0, [sp, #20]
   2cd40:	b	2cd70 <__assert_fail@plt+0x1aedc>
   2cd44:	mov	r0, #0
   2cd48:	str	r0, [sp, #32]
   2cd4c:	str	r0, [sp, #36]	; 0x24
   2cd50:	clz	r0, r6
   2cd54:	lsr	r4, r0, #5
   2cd58:	ldr	r0, [sp, #40]	; 0x28
   2cd5c:	bl	17754 <__assert_fail@plt+0x58c0>
   2cd60:	cmp	r4, #0
   2cd64:	movwne	r6, #12
   2cd68:	str	r6, [sp, #20]
   2cd6c:	str	r6, [fp, #-32]	; 0xffffffe0
   2cd70:	mov	r0, #1
   2cd74:	b	2ccec <__assert_fail@plt+0x1ae58>
   2cd78:	mov	r0, #0
   2cd7c:	mov	r6, #12
   2cd80:	str	r0, [sp, #32]
   2cd84:	str	r0, [sp, #36]	; 0x24
   2cd88:	b	2cc6c <__assert_fail@plt+0x1add8>
   2cd8c:	cmp	r1, r0
   2cd90:	bne	2cdbc <__assert_fail@plt+0x1af28>
   2cd94:	lsl	r0, r1, #1
   2cd98:	lsl	r1, r1, #3
   2cd9c:	str	r0, [sp, #32]
   2cda0:	mov	r0, r5
   2cda4:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2cda8:	cmp	r0, #0
   2cdac:	beq	2ce50 <__assert_fail@plt+0x1afbc>
   2cdb0:	str	r0, [sp, #40]	; 0x28
   2cdb4:	mov	r5, r0
   2cdb8:	ldr	r0, [sp, #36]	; 0x24
   2cdbc:	ldr	r1, [r5]
   2cdc0:	cmp	r1, r4
   2cdc4:	ble	2cdfc <__assert_fail@plt+0x1af68>
   2cdc8:	cmp	r0, #1
   2cdcc:	blt	2ce2c <__assert_fail@plt+0x1af98>
   2cdd0:	add	r1, r5, r0, lsl #2
   2cdd4:	add	r0, r0, #1
   2cdd8:	mov	r2, r1
   2cddc:	ldr	r3, [r2, #-4]!
   2cde0:	sub	r0, r0, #1
   2cde4:	cmp	r0, #1
   2cde8:	str	r3, [r1]
   2cdec:	mov	r1, r2
   2cdf0:	bgt	2cddc <__assert_fail@plt+0x1af48>
   2cdf4:	sub	r0, r0, #1
   2cdf8:	b	2ce2c <__assert_fail@plt+0x1af98>
   2cdfc:	add	r1, r5, r0, lsl #2
   2ce00:	ldr	r2, [r1, #-4]
   2ce04:	cmp	r2, r4
   2ce08:	ble	2ce2c <__assert_fail@plt+0x1af98>
   2ce0c:	sub	r0, r0, #2
   2ce10:	str	r2, [r1]
   2ce14:	sub	r0, r0, #1
   2ce18:	ldr	r2, [r1, #-8]
   2ce1c:	sub	r1, r1, #4
   2ce20:	cmp	r2, r4
   2ce24:	bgt	2ce10 <__assert_fail@plt+0x1af7c>
   2ce28:	add	r0, r0, #2
   2ce2c:	str	r4, [r5, r0, lsl #2]
   2ce30:	ldr	r7, [sp, #4]
   2ce34:	mov	r6, #0
   2ce38:	ldr	r0, [sp, #36]	; 0x24
   2ce3c:	add	r0, r0, #1
   2ce40:	str	r0, [sp, #36]	; 0x24
   2ce44:	cmp	r6, #0
   2ce48:	beq	2cc98 <__assert_fail@plt+0x1ae04>
   2ce4c:	b	2cd50 <__assert_fail@plt+0x1aebc>
   2ce50:	mov	r6, #0
   2ce54:	b	2cd50 <__assert_fail@plt+0x1aebc>
   2ce58:	cmp	r0, #2
   2ce5c:	beq	2c9e4 <__assert_fail@plt+0x1ab50>
   2ce60:	ldr	r8, [sp, #20]
   2ce64:	b	2ce6c <__assert_fail@plt+0x1afd8>
   2ce68:	mov	r8, #0
   2ce6c:	mov	r0, r8
   2ce70:	sub	sp, fp, #28
   2ce74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce7c:	add	fp, sp, #28
   2ce80:	sub	sp, sp, #4
   2ce84:	ldr	r4, [fp, #8]
   2ce88:	mov	r9, r3
   2ce8c:	mov	r7, r2
   2ce90:	mov	r8, r1
   2ce94:	mov	sl, r0
   2ce98:	mov	r5, #1
   2ce9c:	b	2ceac <__assert_fail@plt+0x1b018>
   2cea0:	add	r0, r0, r7, lsl #2
   2cea4:	ldr	r0, [r0, #8]
   2cea8:	ldr	r7, [r0]
   2ceac:	ldr	r0, [r8, #4]
   2ceb0:	cmp	r0, #1
   2ceb4:	blt	2cefc <__assert_fail@plt+0x1b068>
   2ceb8:	subs	r2, r0, #1
   2cebc:	ldr	r0, [r8, #8]
   2cec0:	mov	ip, r4
   2cec4:	mov	r1, #0
   2cec8:	beq	2ceec <__assert_fail@plt+0x1b058>
   2cecc:	add	r3, r1, r2
   2ced0:	lsr	r6, r3, #1
   2ced4:	ldr	r4, [r0, r6, lsl #2]
   2ced8:	cmp	r4, r7
   2cedc:	movge	r2, r6
   2cee0:	addlt	r1, r5, r3, lsr #1
   2cee4:	cmp	r1, r2
   2cee8:	bcc	2cecc <__assert_fail@plt+0x1b038>
   2ceec:	ldr	r0, [r0, r1, lsl #2]
   2cef0:	mov	r4, ip
   2cef4:	cmp	r0, r7
   2cef8:	beq	2cf98 <__assert_fail@plt+0x1b104>
   2cefc:	ldr	r0, [sl]
   2cf00:	add	r1, r0, r7, lsl #3
   2cf04:	ldrb	r1, [r1, #4]
   2cf08:	cmp	r1, r4
   2cf0c:	ldreq	r0, [r0, r7, lsl #3]
   2cf10:	cmpeq	r0, r9
   2cf14:	beq	2cf7c <__assert_fail@plt+0x1b0e8>
   2cf18:	mov	r0, r8
   2cf1c:	mov	r1, r7
   2cf20:	bl	299b0 <__assert_fail@plt+0x17b1c>
   2cf24:	cmp	r0, #0
   2cf28:	beq	2cfa4 <__assert_fail@plt+0x1b110>
   2cf2c:	ldr	r0, [sl, #20]
   2cf30:	add	r7, r7, r7, lsl #1
   2cf34:	add	r1, r0, r7, lsl #2
   2cf38:	ldr	r2, [r1, #4]
   2cf3c:	cmp	r2, #2
   2cf40:	beq	2cf50 <__assert_fail@plt+0x1b0bc>
   2cf44:	cmp	r2, #0
   2cf48:	bne	2cea0 <__assert_fail@plt+0x1b00c>
   2cf4c:	b	2cf98 <__assert_fail@plt+0x1b104>
   2cf50:	ldr	r0, [r1, #8]
   2cf54:	mov	r1, r8
   2cf58:	mov	r3, r9
   2cf5c:	ldr	r2, [r0, #4]
   2cf60:	mov	r0, sl
   2cf64:	str	r4, [sp]
   2cf68:	bl	2ce78 <__assert_fail@plt+0x1afe4>
   2cf6c:	cmp	r0, #0
   2cf70:	bne	2cf9c <__assert_fail@plt+0x1b108>
   2cf74:	ldr	r0, [sl, #20]
   2cf78:	b	2cea0 <__assert_fail@plt+0x1b00c>
   2cf7c:	cmp	r4, #9
   2cf80:	bne	2cf98 <__assert_fail@plt+0x1b104>
   2cf84:	mov	r0, r8
   2cf88:	mov	r1, r7
   2cf8c:	bl	299b0 <__assert_fail@plt+0x17b1c>
   2cf90:	cmp	r0, #0
   2cf94:	beq	2cfa4 <__assert_fail@plt+0x1b110>
   2cf98:	mov	r0, #0
   2cf9c:	sub	sp, fp, #28
   2cfa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfa4:	mov	r0, #12
   2cfa8:	sub	sp, fp, #28
   2cfac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cfb4:	add	fp, sp, #28
   2cfb8:	sub	sp, sp, #4
   2cfbc:	ldr	sl, [r2, #4]
   2cfc0:	cmp	sl, #0
   2cfc4:	beq	2d200 <__assert_fail@plt+0x1b36c>
   2cfc8:	mov	r7, r2
   2cfcc:	mov	r9, r1
   2cfd0:	cmp	sl, #1
   2cfd4:	mov	r6, sl
   2cfd8:	blt	2d04c <__assert_fail@plt+0x1b1b8>
   2cfdc:	ldr	r5, [r7, #8]
   2cfe0:	mov	r2, #0
   2cfe4:	cmp	sl, #4
   2cfe8:	mov	r6, sl
   2cfec:	bcc	2d034 <__assert_fail@plt+0x1b1a0>
   2cff0:	mov	r1, #0
   2cff4:	bic	r2, sl, #3
   2cff8:	vdup.32	q8, r1
   2cffc:	mov	r3, r2
   2d000:	mov	r1, r5
   2d004:	vmov.32	d16[0], sl
   2d008:	vld1.32	{d18-d19}, [r1]!
   2d00c:	subs	r3, r3, #4
   2d010:	vadd.i32	q8, q9, q8
   2d014:	bne	2d008 <__assert_fail@plt+0x1b174>
   2d018:	vext.8	q9, q8, q8, #8
   2d01c:	cmp	sl, r2
   2d020:	vadd.i32	q8, q8, q9
   2d024:	vdup.32	q9, d16[1]
   2d028:	vadd.i32	q8, q8, q9
   2d02c:	vmov.32	r6, d16[0]
   2d030:	beq	2d04c <__assert_fail@plt+0x1b1b8>
   2d034:	add	r1, r5, r2, lsl #2
   2d038:	sub	r2, sl, r2
   2d03c:	ldr	r3, [r1], #4
   2d040:	subs	r2, r2, #1
   2d044:	add	r6, r3, r6
   2d048:	bne	2d03c <__assert_fail@plt+0x1b1a8>
   2d04c:	ldr	r1, [r9, #68]	; 0x44
   2d050:	ldr	r2, [r9, #32]
   2d054:	str	r0, [sp]
   2d058:	and	r1, r1, r6
   2d05c:	add	r3, r1, r1, lsl #1
   2d060:	ldr	r1, [r2, r3, lsl #2]
   2d064:	cmp	r1, #1
   2d068:	blt	2d0dc <__assert_fail@plt+0x1b248>
   2d06c:	add	r2, r2, r3, lsl #2
   2d070:	sub	ip, sl, #1
   2d074:	mov	r5, #0
   2d078:	ldr	lr, [r2, #8]
   2d07c:	b	2d0b0 <__assert_fail@plt+0x1b21c>
   2d080:	mov	r3, ip
   2d084:	add	r2, r3, #1
   2d088:	cmp	r2, #1
   2d08c:	blt	2d1f4 <__assert_fail@plt+0x1b360>
   2d090:	ldr	r2, [r7, #8]
   2d094:	ldr	r0, [r4, #12]
   2d098:	ldr	r2, [r2, r3, lsl #2]
   2d09c:	ldr	r0, [r0, r3, lsl #2]
   2d0a0:	sub	r3, r3, #1
   2d0a4:	cmp	r0, r2
   2d0a8:	beq	2d084 <__assert_fail@plt+0x1b1f0>
   2d0ac:	b	2d0d0 <__assert_fail@plt+0x1b23c>
   2d0b0:	cmp	r7, #0
   2d0b4:	beq	2d0d0 <__assert_fail@plt+0x1b23c>
   2d0b8:	ldr	r4, [lr, r5, lsl #2]
   2d0bc:	ldr	r3, [r4]
   2d0c0:	cmp	r6, r3
   2d0c4:	ldreq	r3, [r4, #8]
   2d0c8:	cmpeq	r3, sl
   2d0cc:	beq	2d080 <__assert_fail@plt+0x1b1ec>
   2d0d0:	add	r5, r5, #1
   2d0d4:	cmp	r5, r1
   2d0d8:	blt	2d0b0 <__assert_fail@plt+0x1b21c>
   2d0dc:	mov	r0, #56	; 0x38
   2d0e0:	mov	r1, #1
   2d0e4:	bl	33c44 <__assert_fail@plt+0x21db0>
   2d0e8:	cmp	r0, #0
   2d0ec:	beq	2d22c <__assert_fail@plt+0x1b398>
   2d0f0:	mov	r4, r0
   2d0f4:	ldr	r0, [r7, #4]
   2d0f8:	add	sl, r4, #4
   2d0fc:	cmp	r0, #1
   2d100:	str	r0, [r4, #8]
   2d104:	blt	2d1c8 <__assert_fail@plt+0x1b334>
   2d108:	str	r0, [r4, #4]
   2d10c:	lsl	r0, r0, #2
   2d110:	bl	33c98 <__assert_fail@plt+0x21e04>
   2d114:	cmp	r0, #0
   2d118:	str	r0, [r4, #12]
   2d11c:	beq	2d218 <__assert_fail@plt+0x1b384>
   2d120:	ldmib	r7, {r5, r7}
   2d124:	lsl	r2, r5, #2
   2d128:	mov	r1, r7
   2d12c:	bl	11a8c <memcpy@plt>
   2d130:	cmp	r5, #1
   2d134:	str	sl, [r4, #40]	; 0x28
   2d138:	blt	2d1dc <__assert_fail@plt+0x1b348>
   2d13c:	ldr	sl, [r9]
   2d140:	movw	ip, #65280	; 0xff00
   2d144:	mov	lr, #32
   2d148:	movt	ip, #3
   2d14c:	add	r2, ip, #255	; 0xff
   2d150:	ldr	r0, [r7]
   2d154:	add	r1, sl, r0, lsl #3
   2d158:	ldr	r0, [r1, #4]!
   2d15c:	and	r3, r0, r2
   2d160:	cmp	r3, #1
   2d164:	beq	2d1b8 <__assert_fail@plt+0x1b324>
   2d168:	ldrb	r8, [r4, #52]	; 0x34
   2d16c:	and	r3, lr, r0, lsr #15
   2d170:	uxtb	r0, r0
   2d174:	cmp	r0, #12
   2d178:	orr	r3, r8, r3
   2d17c:	strb	r3, [r4, #52]	; 0x34
   2d180:	beq	2d1b0 <__assert_fail@plt+0x1b31c>
   2d184:	cmp	r0, #4
   2d188:	beq	2d19c <__assert_fail@plt+0x1b308>
   2d18c:	cmp	r0, #2
   2d190:	bne	2d1a4 <__assert_fail@plt+0x1b310>
   2d194:	orr	r0, r3, #16
   2d198:	b	2d1b4 <__assert_fail@plt+0x1b320>
   2d19c:	orr	r0, r3, #64	; 0x40
   2d1a0:	b	2d1b4 <__assert_fail@plt+0x1b320>
   2d1a4:	ldr	r0, [r1]
   2d1a8:	tst	r0, ip
   2d1ac:	beq	2d1b8 <__assert_fail@plt+0x1b324>
   2d1b0:	orr	r0, r3, #128	; 0x80
   2d1b4:	strb	r0, [r4, #52]	; 0x34
   2d1b8:	add	r7, r7, #4
   2d1bc:	subs	r5, r5, #1
   2d1c0:	bne	2d150 <__assert_fail@plt+0x1b2bc>
   2d1c4:	b	2d1dc <__assert_fail@plt+0x1b348>
   2d1c8:	mov	r0, #0
   2d1cc:	str	r0, [sl]
   2d1d0:	str	r0, [sl, #4]
   2d1d4:	str	r0, [sl, #8]
   2d1d8:	str	sl, [r4, #40]	; 0x28
   2d1dc:	mov	r0, r9
   2d1e0:	mov	r1, r4
   2d1e4:	mov	r2, r6
   2d1e8:	bl	29f30 <__assert_fail@plt+0x1809c>
   2d1ec:	cmp	r0, #0
   2d1f0:	bne	2d20c <__assert_fail@plt+0x1b378>
   2d1f4:	mov	r0, r4
   2d1f8:	sub	sp, fp, #28
   2d1fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d200:	mov	r4, #0
   2d204:	str	r4, [r0]
   2d208:	b	2d1f4 <__assert_fail@plt+0x1b360>
   2d20c:	mov	r0, r4
   2d210:	bl	23f4c <__assert_fail@plt+0x120b8>
   2d214:	b	2d22c <__assert_fail@plt+0x1b398>
   2d218:	mov	r0, #0
   2d21c:	str	r0, [r4, #4]
   2d220:	str	r0, [r4, #8]
   2d224:	mov	r0, r4
   2d228:	bl	17754 <__assert_fail@plt+0x58c0>
   2d22c:	ldr	r1, [sp]
   2d230:	mov	r0, #12
   2d234:	mov	r4, #0
   2d238:	str	r0, [r1]
   2d23c:	b	2d1f4 <__assert_fail@plt+0x1b360>
   2d240:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d244:	add	fp, sp, #24
   2d248:	ldr	lr, [r0]
   2d24c:	add	r7, lr, r1, lsl #3
   2d250:	ldrb	r9, [r7, #4]
   2d254:	cmp	r9, #7
   2d258:	beq	2d424 <__assert_fail@plt+0x1b590>
   2d25c:	ldr	ip, [r2, #80]	; 0x50
   2d260:	mov	r6, #1
   2d264:	cmp	ip, #1
   2d268:	beq	2d2a4 <__assert_fail@plt+0x1b410>
   2d26c:	ldr	r5, [r2, #28]
   2d270:	add	r7, r3, #1
   2d274:	cmp	r7, r5
   2d278:	bge	2d2a4 <__assert_fail@plt+0x1b410>
   2d27c:	ldr	r6, [r2, #8]
   2d280:	add	r7, r6, r3, lsl #2
   2d284:	mov	r6, #1
   2d288:	ldr	r4, [r7, r6, lsl #2]
   2d28c:	cmn	r4, #1
   2d290:	bne	2d2a4 <__assert_fail@plt+0x1b410>
   2d294:	add	r6, r6, #1
   2d298:	add	r4, r3, r6
   2d29c:	cmp	r4, r5
   2d2a0:	blt	2d288 <__assert_fail@plt+0x1b3f4>
   2d2a4:	mov	r8, #0
   2d2a8:	cmp	r9, #5
   2d2ac:	bne	2d2f4 <__assert_fail@plt+0x1b460>
   2d2b0:	cmp	r6, #2
   2d2b4:	blt	2d414 <__assert_fail@plt+0x1b580>
   2d2b8:	ldr	r0, [r0, #128]	; 0x80
   2d2bc:	tst	r0, #64	; 0x40
   2d2c0:	bne	2d2d4 <__assert_fail@plt+0x1b440>
   2d2c4:	ldr	r1, [r2, #4]
   2d2c8:	ldrb	r1, [r1, r3]
   2d2cc:	cmp	r1, #10
   2d2d0:	beq	2d414 <__assert_fail@plt+0x1b580>
   2d2d4:	tst	r0, #128	; 0x80
   2d2d8:	beq	2d410 <__assert_fail@plt+0x1b57c>
   2d2dc:	ldr	r0, [r2, #4]
   2d2e0:	ldrb	r0, [r0, r3]
   2d2e4:	cmp	r0, #0
   2d2e8:	movne	r8, r6
   2d2ec:	mov	r0, r8
   2d2f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d2f4:	cmp	r9, #6
   2d2f8:	bne	2d414 <__assert_fail@plt+0x1b580>
   2d2fc:	cmp	r6, #2
   2d300:	blt	2d414 <__assert_fail@plt+0x1b580>
   2d304:	ldr	r7, [lr, r1, lsl #3]
   2d308:	ldr	r0, [r7, #32]
   2d30c:	cmp	r0, #0
   2d310:	bne	2d32c <__assert_fail@plt+0x1b498>
   2d314:	ldr	r1, [r7, #36]	; 0x24
   2d318:	cmp	r1, #0
   2d31c:	bne	2d32c <__assert_fail@plt+0x1b498>
   2d320:	ldr	r1, [r7, #20]
   2d324:	cmp	r1, #0
   2d328:	beq	2d41c <__assert_fail@plt+0x1b588>
   2d32c:	cmp	ip, #1
   2d330:	bne	2d340 <__assert_fail@plt+0x1b4ac>
   2d334:	ldr	r1, [r2, #4]
   2d338:	ldrb	r5, [r1, r3]
   2d33c:	b	2d348 <__assert_fail@plt+0x1b4b4>
   2d340:	ldr	r1, [r2, #8]
   2d344:	ldr	r5, [r1, r3, lsl #2]
   2d348:	ldr	r1, [r7, #20]
   2d34c:	cmp	r1, #1
   2d350:	blt	2d374 <__assert_fail@plt+0x1b4e0>
   2d354:	ldr	r2, [r7]
   2d358:	mov	r3, #0
   2d35c:	ldr	r4, [r2, r3, lsl #2]
   2d360:	cmp	r5, r4
   2d364:	beq	2d3f0 <__assert_fail@plt+0x1b55c>
   2d368:	add	r3, r3, #1
   2d36c:	cmp	r3, r1
   2d370:	blt	2d35c <__assert_fail@plt+0x1b4c8>
   2d374:	ldr	r1, [r7, #36]	; 0x24
   2d378:	cmp	r1, #1
   2d37c:	blt	2d3b0 <__assert_fail@plt+0x1b51c>
   2d380:	mov	r4, #0
   2d384:	ldr	r0, [r7, #12]
   2d388:	ldr	r1, [r0, r4, lsl #2]
   2d38c:	mov	r0, r5
   2d390:	bl	11a08 <iswctype@plt>
   2d394:	cmp	r0, #0
   2d398:	bne	2d3f0 <__assert_fail@plt+0x1b55c>
   2d39c:	ldr	r0, [r7, #36]	; 0x24
   2d3a0:	add	r4, r4, #1
   2d3a4:	cmp	r4, r0
   2d3a8:	blt	2d384 <__assert_fail@plt+0x1b4f0>
   2d3ac:	ldr	r0, [r7, #32]
   2d3b0:	cmp	r0, #1
   2d3b4:	blt	2d3e8 <__assert_fail@plt+0x1b554>
   2d3b8:	ldr	r1, [r7, #4]
   2d3bc:	mov	r2, #0
   2d3c0:	ldr	r3, [r1, r2, lsl #2]
   2d3c4:	cmp	r3, r5
   2d3c8:	bhi	2d3dc <__assert_fail@plt+0x1b548>
   2d3cc:	ldr	r3, [r7, #8]
   2d3d0:	ldr	r3, [r3, r2, lsl #2]
   2d3d4:	cmp	r5, r3
   2d3d8:	bls	2d3f0 <__assert_fail@plt+0x1b55c>
   2d3dc:	add	r2, r2, #1
   2d3e0:	cmp	r2, r0
   2d3e4:	blt	2d3c0 <__assert_fail@plt+0x1b52c>
   2d3e8:	mov	r0, #0
   2d3ec:	b	2d3f4 <__assert_fail@plt+0x1b560>
   2d3f0:	mov	r0, r6
   2d3f4:	ldrb	r1, [r7, #16]
   2d3f8:	tst	r1, #1
   2d3fc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d400:	cmp	r0, #0
   2d404:	bgt	2d414 <__assert_fail@plt+0x1b580>
   2d408:	cmp	r6, #1
   2d40c:	movle	r6, #1
   2d410:	mov	r8, r6
   2d414:	mov	r0, r8
   2d418:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d41c:	mov	r5, #0
   2d420:	b	2d348 <__assert_fail@plt+0x1b4b4>
   2d424:	ldr	r0, [r2, #4]
   2d428:	mov	r8, #0
   2d42c:	ldrb	r6, [r0, r3]
   2d430:	cmp	r6, #194	; 0xc2
   2d434:	bcc	2d414 <__assert_fail@plt+0x1b580>
   2d438:	ldr	r1, [r2, #48]	; 0x30
   2d43c:	add	r2, r3, #2
   2d440:	cmp	r2, r1
   2d444:	bgt	2d414 <__assert_fail@plt+0x1b580>
   2d448:	add	r0, r0, r3
   2d44c:	cmp	r6, #223	; 0xdf
   2d450:	ldrb	r7, [r0, #1]
   2d454:	bhi	2d478 <__assert_fail@plt+0x1b5e4>
   2d458:	mov	r8, #2
   2d45c:	cmp	r7, #191	; 0xbf
   2d460:	sxtb	r0, r7
   2d464:	movwhi	r8, #0
   2d468:	cmn	r0, #1
   2d46c:	movwgt	r8, #0
   2d470:	mov	r0, r8
   2d474:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d478:	cmp	r6, #239	; 0xef
   2d47c:	bhi	2d498 <__assert_fail@plt+0x1b604>
   2d480:	mov	r2, #3
   2d484:	cmp	r6, #224	; 0xe0
   2d488:	bne	2d4f4 <__assert_fail@plt+0x1b660>
   2d48c:	cmp	r7, #160	; 0xa0
   2d490:	bcc	2d414 <__assert_fail@plt+0x1b580>
   2d494:	b	2d4f4 <__assert_fail@plt+0x1b660>
   2d498:	cmp	r6, #247	; 0xf7
   2d49c:	bhi	2d4b8 <__assert_fail@plt+0x1b624>
   2d4a0:	mov	r2, #4
   2d4a4:	cmp	r6, #240	; 0xf0
   2d4a8:	bne	2d4f4 <__assert_fail@plt+0x1b660>
   2d4ac:	cmp	r7, #144	; 0x90
   2d4b0:	bcc	2d414 <__assert_fail@plt+0x1b580>
   2d4b4:	b	2d4f4 <__assert_fail@plt+0x1b660>
   2d4b8:	cmp	r6, #251	; 0xfb
   2d4bc:	bhi	2d4d8 <__assert_fail@plt+0x1b644>
   2d4c0:	mov	r2, #5
   2d4c4:	cmp	r6, #248	; 0xf8
   2d4c8:	bne	2d4f4 <__assert_fail@plt+0x1b660>
   2d4cc:	cmp	r7, #136	; 0x88
   2d4d0:	bcc	2d414 <__assert_fail@plt+0x1b580>
   2d4d4:	b	2d4f4 <__assert_fail@plt+0x1b660>
   2d4d8:	cmp	r6, #253	; 0xfd
   2d4dc:	bhi	2d414 <__assert_fail@plt+0x1b580>
   2d4e0:	mov	r2, #6
   2d4e4:	cmp	r6, #252	; 0xfc
   2d4e8:	bne	2d4f4 <__assert_fail@plt+0x1b660>
   2d4ec:	cmp	r7, #132	; 0x84
   2d4f0:	bcc	2d414 <__assert_fail@plt+0x1b580>
   2d4f4:	add	r3, r2, r3
   2d4f8:	cmp	r3, r1
   2d4fc:	bgt	2d414 <__assert_fail@plt+0x1b580>
   2d500:	mov	r1, #1
   2d504:	b	2d518 <__assert_fail@plt+0x1b684>
   2d508:	add	r1, r1, #1
   2d50c:	cmp	r1, r2
   2d510:	movcs	r0, r2
   2d514:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d518:	ldrb	r3, [r0, r1]
   2d51c:	sxtb	r7, r3
   2d520:	cmn	r7, #1
   2d524:	bgt	2d414 <__assert_fail@plt+0x1b580>
   2d528:	cmp	r3, #191	; 0xbf
   2d52c:	bls	2d508 <__assert_fail@plt+0x1b674>
   2d530:	b	2d414 <__assert_fail@plt+0x1b580>
   2d534:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d538:	add	fp, sp, #24
   2d53c:	ldr	r4, [r1, #4]
   2d540:	mov	r6, r0
   2d544:	mvn	r0, #0
   2d548:	mov	r8, #0
   2d54c:	uxtab	r3, r0, r4
   2d550:	cmp	r3, #6
   2d554:	bhi	2d6f0 <__assert_fail@plt+0x1b85c>
   2d558:	ldr	r0, [r6, #4]
   2d55c:	mov	r9, r1
   2d560:	ldrb	r1, [r0, r2]
   2d564:	add	r7, pc, #4
   2d568:	sxtb	r0, r1
   2d56c:	ldr	pc, [r7, r3, lsl #2]
   2d570:	andeq	sp, r2, ip, lsl #11
   2d574:	strdeq	sp, [r2], -r0
   2d578:	andeq	sp, r2, r0, lsr #11
   2d57c:	strdeq	sp, [r2], -r0
   2d580:	andeq	sp, r2, r8, asr #11
   2d584:	strdeq	sp, [r2], -r0
   2d588:	andeq	sp, r2, r0, asr #11
   2d58c:	ldrb	r3, [r9]
   2d590:	uxtb	r7, r0
   2d594:	cmp	r3, r7
   2d598:	beq	2d5fc <__assert_fail@plt+0x1b768>
   2d59c:	b	2d6f0 <__assert_fail@plt+0x1b85c>
   2d5a0:	ldr	r3, [r9]
   2d5a4:	ubfx	r7, r1, #5, #3
   2d5a8:	mov	r5, #1
   2d5ac:	ldr	r3, [r3, r7, lsl #2]
   2d5b0:	and	r7, r1, #31
   2d5b4:	tst	r3, r5, lsl r7
   2d5b8:	bne	2d5fc <__assert_fail@plt+0x1b768>
   2d5bc:	b	2d6f0 <__assert_fail@plt+0x1b85c>
   2d5c0:	cmp	r0, #0
   2d5c4:	blt	2d6f0 <__assert_fail@plt+0x1b85c>
   2d5c8:	cmp	r1, #0
   2d5cc:	beq	2d5ec <__assert_fail@plt+0x1b758>
   2d5d0:	cmp	r1, #10
   2d5d4:	bne	2d5fc <__assert_fail@plt+0x1b768>
   2d5d8:	ldr	r3, [r6, #84]	; 0x54
   2d5dc:	ldrb	r3, [r3, #128]	; 0x80
   2d5e0:	tst	r3, #64	; 0x40
   2d5e4:	beq	2d6f0 <__assert_fail@plt+0x1b85c>
   2d5e8:	b	2d5fc <__assert_fail@plt+0x1b768>
   2d5ec:	ldr	r3, [r6, #84]	; 0x54
   2d5f0:	ldrb	r3, [r3, #128]	; 0x80
   2d5f4:	tst	r3, #128	; 0x80
   2d5f8:	bne	2d6f0 <__assert_fail@plt+0x1b85c>
   2d5fc:	movw	r3, #65280	; 0xff00
   2d600:	movt	r3, #3
   2d604:	tst	r4, r3
   2d608:	beq	2d654 <__assert_fail@plt+0x1b7c0>
   2d60c:	cmn	r2, #1
   2d610:	ble	2d64c <__assert_fail@plt+0x1b7b8>
   2d614:	ldr	r3, [r6, #48]	; 0x30
   2d618:	cmp	r3, r2
   2d61c:	beq	2d710 <__assert_fail@plt+0x1b87c>
   2d620:	ldr	r3, [r6, #80]	; 0x50
   2d624:	cmp	r3, #2
   2d628:	blt	2d660 <__assert_fail@plt+0x1b7cc>
   2d62c:	ldr	r0, [r6, #8]
   2d630:	ldr	r7, [r0, r2, lsl #2]
   2d634:	cmn	r7, #1
   2d638:	bne	2d690 <__assert_fail@plt+0x1b7fc>
   2d63c:	sub	r1, r2, #1
   2d640:	cmp	r2, #0
   2d644:	mov	r2, r1
   2d648:	bgt	2d630 <__assert_fail@plt+0x1b79c>
   2d64c:	ldr	r1, [r6, #60]	; 0x3c
   2d650:	b	2d6b4 <__assert_fail@plt+0x1b820>
   2d654:	mov	r8, #1
   2d658:	mov	r0, r8
   2d65c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d660:	ldr	r2, [r6, #68]	; 0x44
   2d664:	ubfx	r3, r1, #5, #3
   2d668:	and	r7, r1, #31
   2d66c:	mov	r1, #1
   2d670:	ldr	r3, [r2, r3, lsl #2]
   2d674:	mov	r2, #0
   2d678:	tst	r3, r1, lsl r7
   2d67c:	bne	2d6cc <__assert_fail@plt+0x1b838>
   2d680:	mov	r1, #0
   2d684:	cmp	r0, #10
   2d688:	beq	2d6a8 <__assert_fail@plt+0x1b814>
   2d68c:	b	2d6b4 <__assert_fail@plt+0x1b820>
   2d690:	ldrb	r0, [r6, #78]	; 0x4e
   2d694:	cmp	r0, #0
   2d698:	bne	2d720 <__assert_fail@plt+0x1b88c>
   2d69c:	mov	r1, #0
   2d6a0:	cmp	r7, #10
   2d6a4:	bne	2d6b4 <__assert_fail@plt+0x1b820>
   2d6a8:	ldrb	r1, [r6, #77]	; 0x4d
   2d6ac:	cmp	r1, #0
   2d6b0:	movwne	r1, #2
   2d6b4:	and	r0, r1, #1
   2d6b8:	tst	r4, #1024	; 0x400
   2d6bc:	eor	r2, r0, #1
   2d6c0:	beq	2d6cc <__assert_fail@plt+0x1b838>
   2d6c4:	cmp	r0, #0
   2d6c8:	beq	2d6f0 <__assert_fail@plt+0x1b85c>
   2d6cc:	ldr	r0, [r9, #4]
   2d6d0:	cmp	r2, #0
   2d6d4:	bne	2d6e0 <__assert_fail@plt+0x1b84c>
   2d6d8:	ands	r2, r0, #2048	; 0x800
   2d6dc:	bne	2d6f0 <__assert_fail@plt+0x1b85c>
   2d6e0:	tst	r1, #2
   2d6e4:	bne	2d6f8 <__assert_fail@plt+0x1b864>
   2d6e8:	ands	r2, r0, #8192	; 0x2000
   2d6ec:	beq	2d6f8 <__assert_fail@plt+0x1b864>
   2d6f0:	mov	r0, r8
   2d6f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d6f8:	and	r0, r0, #32768	; 0x8000
   2d6fc:	mov	r2, #1
   2d700:	and	r1, r1, #8
   2d704:	eor	r0, r2, r0, lsr #15
   2d708:	orr	r0, r0, r1, lsr #3
   2d70c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d710:	ldr	r0, [r6, #88]	; 0x58
   2d714:	and	r0, r0, #2
   2d718:	eor	r1, r0, #10
   2d71c:	b	2d6b4 <__assert_fail@plt+0x1b820>
   2d720:	mov	r0, r7
   2d724:	bl	11cb4 <iswalnum@plt>
   2d728:	mov	r1, #1
   2d72c:	mov	r2, #0
   2d730:	cmp	r7, #95	; 0x5f
   2d734:	beq	2d6cc <__assert_fail@plt+0x1b838>
   2d738:	cmp	r0, #0
   2d73c:	beq	2d69c <__assert_fail@plt+0x1b808>
   2d740:	b	2d6cc <__assert_fail@plt+0x1b838>
   2d744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d748:	add	fp, sp, #28
   2d74c:	sub	sp, sp, #4
   2d750:	vpush	{d8-d9}
   2d754:	sub	sp, sp, #2256	; 0x8d0
   2d758:	sub	sp, sp, #12288	; 0x3000
   2d75c:	mov	r6, #0
   2d760:	sub	lr, fp, #1024	; 0x400
   2d764:	mov	r8, r1
   2d768:	str	r0, [sp, #148]	; 0x94
   2d76c:	vmov.i32	q4, #0	; 0x00000000
   2d770:	str	r6, [r1, #44]	; 0x2c
   2d774:	str	r6, [r1, #48]	; 0x30
   2d778:	sub	r1, lr, #56	; 0x38
   2d77c:	mov	r0, r1
   2d780:	vst1.64	{d8-d9}, [r0]!
   2d784:	vst1.64	{d8-d9}, [r0]
   2d788:	ldr	r0, [r8, #8]
   2d78c:	cmp	r0, #1
   2d790:	blt	2e700 <__assert_fail@plt+0x1c86c>
   2d794:	ldr	r2, [sp, #148]	; 0x94
   2d798:	mov	r7, #0
   2d79c:	mov	r6, #0
   2d7a0:	str	r8, [sp, #24]
   2d7a4:	add	r0, r2, #112	; 0x70
   2d7a8:	str	r0, [sp, #4]
   2d7ac:	add	r0, r2, #96	; 0x60
   2d7b0:	str	r0, [sp]
   2d7b4:	add	r0, r1, #16
   2d7b8:	str	r0, [sp, #8]
   2d7bc:	ldr	r0, [r8, #12]
   2d7c0:	ldr	r1, [sp, #148]	; 0x94
   2d7c4:	ldr	r0, [r0, r7, lsl #2]
   2d7c8:	ldr	r2, [r1]
   2d7cc:	add	r9, r2, r0, lsl #3
   2d7d0:	ldr	r1, [r9, #4]!
   2d7d4:	uxtb	r3, r1
   2d7d8:	cmp	r3, #1
   2d7dc:	str	r3, [sp, #92]	; 0x5c
   2d7e0:	bne	2d824 <__assert_fail@plt+0x1b990>
   2d7e4:	str	r2, [sp, #16]
   2d7e8:	ldrb	r2, [r2, r0, lsl #3]
   2d7ec:	sub	lr, fp, #1024	; 0x400
   2d7f0:	str	r0, [sp, #20]
   2d7f4:	mov	r0, r7
   2d7f8:	mov	r4, #1
   2d7fc:	sub	r7, lr, #56	; 0x38
   2d800:	mov	r5, r7
   2d804:	ubfx	r3, r2, #5, #3
   2d808:	ldr	r8, [sp, #24]
   2d80c:	and	r2, r2, #31
   2d810:	ldr	r7, [r7, r3, lsl #2]
   2d814:	orr	r2, r7, r4, lsl r2
   2d818:	mov	r7, r0
   2d81c:	str	r2, [r5, r3, lsl #2]
   2d820:	b	2d980 <__assert_fail@plt+0x1baec>
   2d824:	cmp	r3, #7
   2d828:	beq	2d878 <__assert_fail@plt+0x1b9e4>
   2d82c:	cmp	r3, #5
   2d830:	beq	2d8d0 <__assert_fail@plt+0x1ba3c>
   2d834:	cmp	r3, #3
   2d838:	bne	2e0fc <__assert_fail@plt+0x1c268>
   2d83c:	str	r2, [sp, #16]
   2d840:	ldr	r2, [r2, r0, lsl #3]
   2d844:	sub	lr, fp, #1024	; 0x400
   2d848:	str	r0, [sp, #20]
   2d84c:	sub	r3, lr, #56	; 0x38
   2d850:	vld1.64	{d16-d17}, [r3]
   2d854:	vld1.32	{d18-d19}, [r2]!
   2d858:	vorr	q8, q8, q9
   2d85c:	vst1.64	{d16-d17}, [r3]
   2d860:	vld1.32	{d16-d17}, [r2]
   2d864:	ldr	r2, [sp, #8]
   2d868:	vld1.32	{d18-d19}, [r2]
   2d86c:	vorr	q8, q9, q8
   2d870:	vst1.32	{d16-d17}, [r2]
   2d874:	b	2d980 <__assert_fail@plt+0x1baec>
   2d878:	str	r0, [sp, #20]
   2d87c:	ldr	r0, [sp, #148]	; 0x94
   2d880:	str	r2, [sp, #16]
   2d884:	mvn	r2, #0
   2d888:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2d88c:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2d890:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2d894:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2d898:	ldr	r3, [r0, #128]	; 0x80
   2d89c:	and	r2, r3, #128	; 0x80
   2d8a0:	ands	r3, r3, #64	; 0x40
   2d8a4:	beq	2d8b0 <__assert_fail@plt+0x1ba1c>
   2d8a8:	cmp	r2, #0
   2d8ac:	beq	2d980 <__assert_fail@plt+0x1baec>
   2d8b0:	cmp	r3, #0
   2d8b4:	mvn	r3, #1
   2d8b8:	movweq	r3, #64510	; 0xfbfe
   2d8bc:	movteq	r3, #65535	; 0xffff
   2d8c0:	cmp	r2, #0
   2d8c4:	mvneq	r3, #1024	; 0x400
   2d8c8:	str	r3, [fp, #-1080]	; 0xfffffbc8
   2d8cc:	b	2d980 <__assert_fail@plt+0x1baec>
   2d8d0:	str	r2, [sp, #16]
   2d8d4:	ldr	r2, [sp, #148]	; 0x94
   2d8d8:	mov	r4, r7
   2d8dc:	str	r0, [sp, #20]
   2d8e0:	ldr	r2, [r2, #92]	; 0x5c
   2d8e4:	cmp	r2, #2
   2d8e8:	blt	2d928 <__assert_fail@plt+0x1ba94>
   2d8ec:	ldr	r0, [sp, #148]	; 0x94
   2d8f0:	sub	lr, fp, #1024	; 0x400
   2d8f4:	sub	r3, lr, #56	; 0x38
   2d8f8:	vld1.64	{d16-d17}, [r3]
   2d8fc:	ldr	r2, [r0, #60]	; 0x3c
   2d900:	vld1.32	{d18-d19}, [r2]!
   2d904:	vorr	q8, q8, q9
   2d908:	vst1.64	{d16-d17}, [r3]
   2d90c:	vld1.32	{d18-d19}, [r2]
   2d910:	ldr	r2, [sp, #8]
   2d914:	vld1.32	{d20-d21}, [r2]
   2d918:	vorr	q9, q10, q9
   2d91c:	vst1.32	{d18-d19}, [r2]
   2d920:	vmov.32	r2, d16[0]
   2d924:	b	2d94c <__assert_fail@plt+0x1bab8>
   2d928:	mvn	r2, #0
   2d92c:	str	r2, [fp, #-1052]	; 0xfffffbe4
   2d930:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2d934:	str	r2, [fp, #-1060]	; 0xfffffbdc
   2d938:	str	r2, [fp, #-1064]	; 0xfffffbd8
   2d93c:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2d940:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2d944:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2d948:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2d94c:	ldr	r0, [sp, #148]	; 0x94
   2d950:	ldr	r8, [sp, #24]
   2d954:	ldr	r3, [r0, #128]	; 0x80
   2d958:	ands	r7, r3, #64	; 0x40
   2d95c:	and	r3, r3, #128	; 0x80
   2d960:	biceq	r2, r2, #1024	; 0x400
   2d964:	mov	r7, r4
   2d968:	beq	2d974 <__assert_fail@plt+0x1bae0>
   2d96c:	cmp	r3, #0
   2d970:	beq	2d980 <__assert_fail@plt+0x1baec>
   2d974:	cmp	r3, #0
   2d978:	bicne	r2, r2, #1
   2d97c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2d980:	ldr	sl, [sp, #92]	; 0x5c
   2d984:	movw	r2, #65280	; 0xff00
   2d988:	movt	r2, #3
   2d98c:	ands	r2, r1, r2
   2d990:	beq	2dc40 <__assert_fail@plt+0x1bdac>
   2d994:	tst	r1, #8192	; 0x2000
   2d998:	beq	2d9c4 <__assert_fail@plt+0x1bb30>
   2d99c:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   2d9a0:	sub	lr, fp, #1024	; 0x400
   2d9a4:	sub	r3, lr, #56	; 0x38
   2d9a8:	vst1.64	{d8-d9}, [r3]!
   2d9ac:	vst1.64	{d8-d9}, [r3]
   2d9b0:	tst	r2, #1024	; 0x400
   2d9b4:	beq	2e0fc <__assert_fail@plt+0x1c268>
   2d9b8:	ldr	sl, [sp, #92]	; 0x5c
   2d9bc:	mov	r2, #1024	; 0x400
   2d9c0:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2d9c4:	tst	r1, #32768	; 0x8000
   2d9c8:	bne	2dbc8 <__assert_fail@plt+0x1bd34>
   2d9cc:	tst	r1, #1024	; 0x400
   2d9d0:	beq	2db50 <__assert_fail@plt+0x1bcbc>
   2d9d4:	cmp	sl, #1
   2d9d8:	ldrbeq	r2, [r9, #2]
   2d9dc:	tsteq	r2, #64	; 0x40
   2d9e0:	beq	2dbc8 <__assert_fail@plt+0x1bd34>
   2d9e4:	ldr	r0, [sp, #148]	; 0x94
   2d9e8:	ldr	r2, [r0, #92]	; 0x5c
   2d9ec:	cmp	r2, #1
   2d9f0:	ble	2da80 <__assert_fail@plt+0x1bbec>
   2d9f4:	ldr	r0, [sp, #148]	; 0x94
   2d9f8:	ldr	r3, [sp]
   2d9fc:	sub	lr, fp, #1024	; 0x400
   2da00:	ldr	r2, [r0, #60]	; 0x3c
   2da04:	vld1.32	{d16-d17}, [r3]
   2da08:	sub	r3, lr, #56	; 0x38
   2da0c:	vld1.64	{d20-d21}, [r3]
   2da10:	vld1.32	{d18-d19}, [r2]!
   2da14:	vorn	q8, q8, q9
   2da18:	vand	q8, q10, q8
   2da1c:	vst1.64	{d16-d17}, [r3]
   2da20:	vmov.32	r3, d16[1]
   2da24:	vld1.32	{d18-d19}, [r2]
   2da28:	ldr	r2, [sp, #4]
   2da2c:	vld1.32	{d20-d21}, [r2]
   2da30:	ldr	r2, [sp, #8]
   2da34:	vld1.32	{d22-d23}, [r2]
   2da38:	vorn	q9, q10, q9
   2da3c:	vand	q9, q11, q9
   2da40:	vst1.32	{d18-d19}, [r2]
   2da44:	vmov.32	r2, d16[0]
   2da48:	orr	r2, r3, r2
   2da4c:	vmov.32	r3, d17[0]
   2da50:	orr	r2, r2, r3
   2da54:	vmov.32	r3, d17[1]
   2da58:	orr	r2, r2, r3
   2da5c:	vmov.32	r3, d18[0]
   2da60:	orr	r2, r2, r3
   2da64:	vmov.32	r3, d18[1]
   2da68:	orr	r2, r2, r3
   2da6c:	vmov.32	r3, d19[0]
   2da70:	orr	r2, r2, r3
   2da74:	vmov.32	r3, d19[1]
   2da78:	orr	r2, r2, r3
   2da7c:	b	2db44 <__assert_fail@plt+0x1bcb0>
   2da80:	ldr	r4, [sp, #148]	; 0x94
   2da84:	str	r6, [sp, #144]	; 0x90
   2da88:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2da8c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2da90:	str	r7, [sp, #12]
   2da94:	ldr	r5, [r4, #116]	; 0x74
   2da98:	ldr	ip, [r4, #104]	; 0x68
   2da9c:	ldr	r0, [r4, #108]	; 0x6c
   2daa0:	ldr	r3, [r4, #96]	; 0x60
   2daa4:	ldr	lr, [r4, #100]	; 0x64
   2daa8:	ldr	r8, [r4, #112]	; 0x70
   2daac:	ldr	sl, [r4, #124]	; 0x7c
   2dab0:	str	r5, [sp, #136]	; 0x88
   2dab4:	ldr	r5, [r4, #120]	; 0x78
   2dab8:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2dabc:	and	r2, r2, r0
   2dac0:	and	ip, r6, ip
   2dac4:	ldr	r0, [sp, #136]	; 0x88
   2dac8:	str	r5, [sp, #140]	; 0x8c
   2dacc:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2dad0:	and	r7, r4, r3
   2dad4:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2dad8:	and	lr, r5, lr
   2dadc:	str	lr, [fp, #-1076]	; 0xfffffbcc
   2dae0:	str	ip, [fp, #-1072]	; 0xfffffbd0
   2dae4:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2dae8:	orr	r7, lr, r7
   2daec:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   2daf0:	orr	r7, r7, ip
   2daf4:	orr	r2, r7, r2
   2daf8:	ldr	r7, [sp, #12]
   2dafc:	and	r6, r6, r8
   2db00:	ldr	r8, [sp, #24]
   2db04:	str	r6, [fp, #-1064]	; 0xfffffbd8
   2db08:	orr	r2, r2, r6
   2db0c:	ldr	r6, [sp, #144]	; 0x90
   2db10:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2db14:	and	r4, r4, r0
   2db18:	ldr	r0, [sp, #140]	; 0x8c
   2db1c:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2db20:	orr	r2, r2, r4
   2db24:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   2db28:	and	r3, r3, r0
   2db2c:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2db30:	orr	r2, r2, r3
   2db34:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   2db38:	and	r5, r5, sl
   2db3c:	str	r5, [fp, #-1052]	; 0xfffffbe4
   2db40:	orr	r2, r2, r5
   2db44:	ldr	sl, [sp, #92]	; 0x5c
   2db48:	cmp	r2, #0
   2db4c:	beq	2e0fc <__assert_fail@plt+0x1c268>
   2db50:	tst	r1, #2048	; 0x800
   2db54:	beq	2dc40 <__assert_fail@plt+0x1bdac>
   2db58:	cmp	sl, #1
   2db5c:	bne	2db6c <__assert_fail@plt+0x1bcd8>
   2db60:	ldrb	r0, [r9, #2]
   2db64:	tst	r0, #64	; 0x40
   2db68:	bne	2dbc8 <__assert_fail@plt+0x1bd34>
   2db6c:	ldr	r0, [sp, #148]	; 0x94
   2db70:	sub	lr, fp, #1024	; 0x400
   2db74:	sub	r1, lr, #56	; 0x38
   2db78:	ldr	r0, [r0, #92]	; 0x5c
   2db7c:	cmp	r0, #1
   2db80:	ble	2dbd4 <__assert_fail@plt+0x1bd40>
   2db84:	ldr	r0, [sp, #148]	; 0x94
   2db88:	ldr	r2, [sp]
   2db8c:	vld1.64	{d20-d21}, [r1]
   2db90:	ldr	r0, [r0, #60]	; 0x3c
   2db94:	vld1.32	{d16-d17}, [r2]
   2db98:	vld1.32	{d18-d19}, [r0]!
   2db9c:	vand	q8, q9, q8
   2dba0:	vbic	q9, q10, q8
   2dba4:	vst1.64	{d18-d19}, [r1]
   2dba8:	ldr	r1, [sp, #4]
   2dbac:	vld1.32	{d20-d21}, [r0]
   2dbb0:	ldr	r0, [sp, #8]
   2dbb4:	vld1.32	{d16-d17}, [r1]
   2dbb8:	vld1.32	{d22-d23}, [r0]
   2dbbc:	vand	q8, q10, q8
   2dbc0:	vbic	q8, q11, q8
   2dbc4:	b	2dbfc <__assert_fail@plt+0x1bd68>
   2dbc8:	sub	lr, fp, #1024	; 0x400
   2dbcc:	sub	r0, lr, #56	; 0x38
   2dbd0:	b	2e0f4 <__assert_fail@plt+0x1c260>
   2dbd4:	ldr	r0, [sp]
   2dbd8:	vld1.64	{d18-d19}, [r1]
   2dbdc:	vld1.32	{d16-d17}, [r0]
   2dbe0:	ldr	r0, [sp, #4]
   2dbe4:	vbic	q9, q9, q8
   2dbe8:	vst1.64	{d18-d19}, [r1]
   2dbec:	vld1.32	{d16-d17}, [r0]
   2dbf0:	ldr	r0, [sp, #8]
   2dbf4:	vld1.32	{d20-d21}, [r0]
   2dbf8:	vbic	q8, q10, q8
   2dbfc:	vst1.32	{d16-d17}, [r0]
   2dc00:	vmov.32	r0, d18[0]
   2dc04:	vmov.32	r1, d18[1]
   2dc08:	orr	r0, r1, r0
   2dc0c:	vmov.32	r1, d19[0]
   2dc10:	orr	r0, r0, r1
   2dc14:	vmov.32	r1, d19[1]
   2dc18:	orr	r0, r0, r1
   2dc1c:	vmov.32	r1, d16[0]
   2dc20:	orr	r0, r0, r1
   2dc24:	vmov.32	r1, d16[1]
   2dc28:	orr	r0, r0, r1
   2dc2c:	vmov.32	r1, d17[0]
   2dc30:	orr	r0, r0, r1
   2dc34:	vmov.32	r1, d17[1]
   2dc38:	orrs	r0, r0, r1
   2dc3c:	beq	2e0fc <__assert_fail@plt+0x1c268>
   2dc40:	cmp	r6, #1
   2dc44:	blt	2e010 <__assert_fail@plt+0x1c17c>
   2dc48:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   2dc4c:	ldr	lr, [fp, #-1080]	; 0xfffffbc8
   2dc50:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2dc54:	ldr	r1, [fp, #-1072]	; 0xfffffbd0
   2dc58:	ldr	r8, [fp, #-1068]	; 0xfffffbd4
   2dc5c:	str	r7, [sp, #12]
   2dc60:	mov	r9, #0
   2dc64:	add	r7, sp, #152	; 0x98
   2dc68:	str	r0, [sp, #96]	; 0x60
   2dc6c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   2dc70:	str	r0, [sp, #136]	; 0x88
   2dc74:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   2dc78:	str	r0, [sp, #128]	; 0x80
   2dc7c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2dc80:	str	r0, [sp, #132]	; 0x84
   2dc84:	sub	r0, fp, #6144	; 0x1800
   2dc88:	sub	r4, r0, #104	; 0x68
   2dc8c:	mov	ip, r1
   2dc90:	cmp	sl, #1
   2dc94:	str	r5, [sp, #140]	; 0x8c
   2dc98:	bne	2dcc0 <__assert_fail@plt+0x1be2c>
   2dc9c:	ldr	r0, [sp, #20]
   2dca0:	ldr	r1, [sp, #16]
   2dca4:	mov	r2, #1
   2dca8:	ldrb	r0, [r1, r0, lsl #3]
   2dcac:	ubfx	r1, r0, #5, #3
   2dcb0:	and	r0, r0, #31
   2dcb4:	ldr	r1, [r7, r1, lsl #2]
   2dcb8:	tst	r1, r2, lsl r0
   2dcbc:	beq	2df3c <__assert_fail@plt+0x1c0a8>
   2dcc0:	str	r4, [sp, #112]	; 0x70
   2dcc4:	str	r6, [sp, #144]	; 0x90
   2dcc8:	str	r9, [sp, #108]	; 0x6c
   2dccc:	mov	r3, r8
   2dcd0:	mov	r5, lr
   2dcd4:	ldm	r7, {r0, r2, sl}
   2dcd8:	ldr	r8, [sp, #140]	; 0x8c
   2dcdc:	ldr	r1, [r7, #12]
   2dce0:	str	ip, [sp, #100]	; 0x64
   2dce4:	ldr	r4, [sp, #132]	; 0x84
   2dce8:	ldr	r9, [r7, #20]
   2dcec:	str	r3, [sp, #104]	; 0x68
   2dcf0:	and	r6, sl, ip
   2dcf4:	ldr	ip, [r7, #16]
   2dcf8:	str	r0, [sp, #124]	; 0x7c
   2dcfc:	and	r0, r0, lr
   2dd00:	str	r2, [sp, #116]	; 0x74
   2dd04:	and	r2, r2, r8
   2dd08:	str	r1, [sp, #120]	; 0x78
   2dd0c:	ldr	lr, [r7, #24]
   2dd10:	str	r0, [sp, #84]	; 0x54
   2dd14:	orr	r0, r2, r0
   2dd18:	str	r2, [sp, #80]	; 0x50
   2dd1c:	and	r2, r1, r3
   2dd20:	ldr	r1, [sp, #136]	; 0x88
   2dd24:	str	r6, [sp, #88]	; 0x58
   2dd28:	orr	r0, r0, r6
   2dd2c:	str	r2, [sp, #76]	; 0x4c
   2dd30:	ldr	r6, [sp, #96]	; 0x60
   2dd34:	orr	r0, r0, r2
   2dd38:	and	r2, ip, r4
   2dd3c:	str	r2, [sp, #72]	; 0x48
   2dd40:	orr	r0, r0, r2
   2dd44:	ldr	r2, [sp, #128]	; 0x80
   2dd48:	and	r2, r9, r2
   2dd4c:	str	r2, [sp, #68]	; 0x44
   2dd50:	orr	r0, r0, r2
   2dd54:	and	r2, lr, r1
   2dd58:	str	r2, [sp, #64]	; 0x40
   2dd5c:	orr	r0, r0, r2
   2dd60:	ldr	r2, [r7, #28]
   2dd64:	and	r3, r2, r6
   2dd68:	orrs	r0, r0, r3
   2dd6c:	beq	2df04 <__assert_fail@plt+0x1c070>
   2dd70:	ldr	r0, [sp, #124]	; 0x7c
   2dd74:	str	r3, [sp, #28]
   2dd78:	ldr	r3, [sp, #104]	; 0x68
   2dd7c:	str	r4, [sp, #132]	; 0x84
   2dd80:	bic	r0, r5, r0
   2dd84:	str	r0, [sp, #56]	; 0x38
   2dd88:	ldr	r0, [sp, #116]	; 0x74
   2dd8c:	bic	r0, r8, r0
   2dd90:	ldr	r8, [sp, #100]	; 0x64
   2dd94:	str	r0, [sp, #52]	; 0x34
   2dd98:	bic	r0, r8, sl
   2dd9c:	bic	r1, sl, r8
   2dda0:	str	r0, [sp, #60]	; 0x3c
   2dda4:	ldr	r0, [sp, #120]	; 0x78
   2dda8:	bic	r0, r3, r0
   2ddac:	str	r0, [sp, #48]	; 0x30
   2ddb0:	bic	r0, r4, ip
   2ddb4:	ldr	r4, [sp, #128]	; 0x80
   2ddb8:	str	r0, [sp, #44]	; 0x2c
   2ddbc:	bic	r0, r4, r9
   2ddc0:	str	r0, [sp, #40]	; 0x28
   2ddc4:	ldr	r0, [sp, #136]	; 0x88
   2ddc8:	bic	r0, r0, lr
   2ddcc:	str	r0, [sp, #36]	; 0x24
   2ddd0:	bic	r0, r6, r2
   2ddd4:	bic	r2, r2, r6
   2ddd8:	str	r0, [sp, #32]
   2dddc:	ldr	r0, [sp, #124]	; 0x7c
   2dde0:	bic	r8, r0, r5
   2dde4:	ldr	r5, [sp, #140]	; 0x8c
   2dde8:	ldr	r0, [sp, #116]	; 0x74
   2ddec:	str	r1, [sp, #140]	; 0x8c
   2ddf0:	bic	r5, r0, r5
   2ddf4:	orr	r0, r5, r8
   2ddf8:	orr	r0, r0, r1
   2ddfc:	ldr	r1, [sp, #120]	; 0x78
   2de00:	bic	sl, r1, r3
   2de04:	ldr	r1, [sp, #132]	; 0x84
   2de08:	orr	r0, r0, sl
   2de0c:	bic	r1, ip, r1
   2de10:	orr	r3, r0, r1
   2de14:	bic	r0, r9, r4
   2de18:	orr	r4, r3, r0
   2de1c:	ldr	r3, [sp, #136]	; 0x88
   2de20:	bic	r3, lr, r3
   2de24:	orr	r4, r4, r3
   2de28:	orrs	r4, r4, r2
   2de2c:	beq	2df2c <__assert_fail@plt+0x1c098>
   2de30:	ldr	r6, [sp, #144]	; 0x90
   2de34:	add	r4, sp, #152	; 0x98
   2de38:	sub	lr, fp, #6144	; 0x1800
   2de3c:	mov	ip, r4
   2de40:	str	r8, [r4, r6, lsl #5]
   2de44:	mov	r4, r5
   2de48:	add	r5, ip, r6, lsl #5
   2de4c:	str	r4, [r5, #4]
   2de50:	ldr	r4, [sp, #140]	; 0x8c
   2de54:	str	r4, [r5, #8]
   2de58:	str	sl, [r5, #12]
   2de5c:	str	r1, [r5, #16]
   2de60:	str	r0, [r5, #20]
   2de64:	ldr	r0, [sp, #84]	; 0x54
   2de68:	str	r3, [r5, #24]
   2de6c:	str	r2, [r5, #28]
   2de70:	ldr	r4, [sp, #112]	; 0x70
   2de74:	sub	r1, lr, #104	; 0x68
   2de78:	str	r0, [r7]
   2de7c:	ldr	r0, [sp, #80]	; 0x50
   2de80:	str	r0, [r7, #4]
   2de84:	ldr	r0, [sp, #88]	; 0x58
   2de88:	str	r0, [r7, #8]
   2de8c:	ldr	r0, [sp, #76]	; 0x4c
   2de90:	str	r0, [r7, #12]
   2de94:	ldr	r0, [sp, #72]	; 0x48
   2de98:	str	r0, [r7, #16]
   2de9c:	ldr	r0, [sp, #68]	; 0x44
   2dea0:	str	r0, [r7, #20]
   2dea4:	ldr	r0, [sp, #64]	; 0x40
   2dea8:	str	r0, [r7, #24]
   2deac:	ldr	r0, [sp, #28]
   2deb0:	str	r0, [r7, #28]
   2deb4:	add	r0, r6, r6, lsl #1
   2deb8:	add	r5, r1, r0, lsl #2
   2debc:	ldr	r0, [r4, #4]
   2dec0:	mov	r8, r5
   2dec4:	str	r0, [r8, #4]!
   2dec8:	ldr	sl, [r4, #4]
   2decc:	cmp	sl, #1
   2ded0:	blt	2df48 <__assert_fail@plt+0x1c0b4>
   2ded4:	str	r0, [r5]
   2ded8:	lsl	r0, r0, #2
   2dedc:	bl	33c98 <__assert_fail@plt+0x21e04>
   2dee0:	ldr	r9, [sp, #108]	; 0x6c
   2dee4:	ldr	r6, [sp, #60]	; 0x3c
   2dee8:	cmp	r0, #0
   2deec:	str	r0, [r5, #8]
   2def0:	beq	2e688 <__assert_fail@plt+0x1c7f4>
   2def4:	ldr	r1, [r4, #8]
   2def8:	lsl	r2, sl, #2
   2defc:	bl	11a8c <memcpy@plt>
   2df00:	b	2df60 <__assert_fail@plt+0x1c0cc>
   2df04:	ldr	r0, [sp, #104]	; 0x68
   2df08:	ldr	r9, [sp, #108]	; 0x6c
   2df0c:	ldr	r6, [sp, #144]	; 0x90
   2df10:	ldr	r4, [sp, #112]	; 0x70
   2df14:	ldr	sl, [sp, #92]	; 0x5c
   2df18:	ldr	r1, [sp, #100]	; 0x64
   2df1c:	mov	lr, r5
   2df20:	mov	r5, r8
   2df24:	mov	r8, r0
   2df28:	b	2dff8 <__assert_fail@plt+0x1c164>
   2df2c:	ldr	r9, [sp, #108]	; 0x6c
   2df30:	ldr	r4, [sp, #112]	; 0x70
   2df34:	ldr	r6, [sp, #60]	; 0x3c
   2df38:	b	2df6c <__assert_fail@plt+0x1c0d8>
   2df3c:	ldr	r5, [sp, #140]	; 0x8c
   2df40:	mov	r1, ip
   2df44:	b	2dff8 <__assert_fail@plt+0x1c164>
   2df48:	ldr	r9, [sp, #108]	; 0x6c
   2df4c:	ldr	r6, [sp, #60]	; 0x3c
   2df50:	mov	r0, #0
   2df54:	str	r0, [r5]
   2df58:	str	r0, [r5, #4]
   2df5c:	str	r0, [r5, #8]
   2df60:	ldr	r0, [sp, #144]	; 0x90
   2df64:	add	r0, r0, #1
   2df68:	str	r0, [sp, #144]	; 0x90
   2df6c:	ldr	r0, [sp, #24]
   2df70:	ldr	r1, [sp, #12]
   2df74:	ldr	r0, [r0, #12]
   2df78:	ldr	r1, [r0, r1, lsl #2]
   2df7c:	mov	r0, r4
   2df80:	bl	299b0 <__assert_fail@plt+0x17b1c>
   2df84:	cmp	r0, #0
   2df88:	beq	2e604 <__assert_fail@plt+0x1c770>
   2df8c:	ldr	lr, [sp, #56]	; 0x38
   2df90:	ldr	ip, [sp, #52]	; 0x34
   2df94:	ldr	r8, [sp, #48]	; 0x30
   2df98:	ldr	r2, [sp, #44]	; 0x2c
   2df9c:	mov	sl, r6
   2dfa0:	ldr	r3, [sp, #36]	; 0x24
   2dfa4:	ldr	r5, [sp, #32]
   2dfa8:	mov	r1, #0
   2dfac:	orr	r0, ip, lr
   2dfb0:	orr	r0, r0, r6
   2dfb4:	ldr	r6, [sp, #40]	; 0x28
   2dfb8:	orr	r0, r0, r8
   2dfbc:	orr	r0, r0, r2
   2dfc0:	orr	r0, r0, r6
   2dfc4:	orr	r0, r0, r3
   2dfc8:	orrs	r0, r0, r5
   2dfcc:	movweq	r1, #17
   2dfd0:	cmp	r1, #0
   2dfd4:	bne	2e018 <__assert_fail@plt+0x1c184>
   2dfd8:	str	r6, [sp, #128]	; 0x80
   2dfdc:	mov	r1, sl
   2dfe0:	ldr	sl, [sp, #92]	; 0x5c
   2dfe4:	ldr	r6, [sp, #144]	; 0x90
   2dfe8:	str	r5, [sp, #96]	; 0x60
   2dfec:	mov	r5, ip
   2dff0:	str	r3, [sp, #136]	; 0x88
   2dff4:	str	r2, [sp, #132]	; 0x84
   2dff8:	add	r9, r9, #1
   2dffc:	add	r4, r4, #12
   2e000:	add	r7, r7, #32
   2e004:	cmp	r9, r6
   2e008:	blt	2dc8c <__assert_fail@plt+0x1bdf8>
   2e00c:	b	2e03c <__assert_fail@plt+0x1c1a8>
   2e010:	mov	r9, #0
   2e014:	b	2e074 <__assert_fail@plt+0x1c1e0>
   2e018:	cmp	r1, #17
   2e01c:	bne	2e110 <__assert_fail@plt+0x1c27c>
   2e020:	str	r6, [sp, #128]	; 0x80
   2e024:	ldr	r1, [sp, #60]	; 0x3c
   2e028:	ldr	r6, [sp, #144]	; 0x90
   2e02c:	str	r5, [sp, #96]	; 0x60
   2e030:	mov	r5, ip
   2e034:	str	r3, [sp, #136]	; 0x88
   2e038:	str	r2, [sp, #132]	; 0x84
   2e03c:	ldr	r0, [sp, #132]	; 0x84
   2e040:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2e044:	str	r5, [fp, #-1076]	; 0xfffffbcc
   2e048:	str	r8, [fp, #-1068]	; 0xfffffbd4
   2e04c:	ldr	r8, [sp, #24]
   2e050:	ldr	r7, [sp, #12]
   2e054:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2e058:	ldr	r0, [sp, #128]	; 0x80
   2e05c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2e060:	ldr	r0, [sp, #136]	; 0x88
   2e064:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2e068:	ldr	r0, [sp, #96]	; 0x60
   2e06c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2e070:	str	lr, [fp, #-1080]	; 0xfffffbc8
   2e074:	sub	lr, fp, #1024	; 0x400
   2e078:	cmp	r9, r6
   2e07c:	sub	r1, lr, #56	; 0x38
   2e080:	bne	2e0fc <__assert_fail@plt+0x1c268>
   2e084:	mov	r0, r1
   2e088:	sub	lr, fp, #6144	; 0x1800
   2e08c:	mov	r2, #1
   2e090:	mov	sl, r7
   2e094:	vld1.32	{d16-d17}, [r0]!
   2e098:	sub	r3, lr, #104	; 0x68
   2e09c:	vld1.64	{d18-d19}, [r0]
   2e0a0:	add	r0, sp, #152	; 0x98
   2e0a4:	add	r0, r0, r9, lsl #5
   2e0a8:	vst1.32	{d16-d17}, [r0]!
   2e0ac:	vst1.32	{d18-d19}, [r0]
   2e0b0:	ldr	r0, [r8, #12]
   2e0b4:	ldr	r6, [r0, r7, lsl #2]
   2e0b8:	add	r0, r9, r9, lsl #1
   2e0bc:	mov	r7, r1
   2e0c0:	add	r4, r3, r0, lsl #2
   2e0c4:	str	r2, [r3, r0, lsl #2]
   2e0c8:	mov	r0, #4
   2e0cc:	mov	r5, r4
   2e0d0:	str	r2, [r5, #4]!
   2e0d4:	bl	33c98 <__assert_fail@plt+0x21e04>
   2e0d8:	cmp	r0, #0
   2e0dc:	str	r0, [r4, #8]
   2e0e0:	beq	2e734 <__assert_fail@plt+0x1c8a0>
   2e0e4:	str	r6, [r0]
   2e0e8:	mov	r0, r7
   2e0ec:	add	r6, r9, #1
   2e0f0:	mov	r7, sl
   2e0f4:	vst1.64	{d8-d9}, [r0]!
   2e0f8:	vst1.64	{d8-d9}, [r0]
   2e0fc:	ldr	r0, [r8, #8]
   2e100:	add	r7, r7, #1
   2e104:	cmp	r7, r0
   2e108:	blt	2d7bc <__assert_fail@plt+0x1b928>
   2e10c:	b	2e14c <__assert_fail@plt+0x1c2b8>
   2e110:	ldr	r1, [sp, #60]	; 0x3c
   2e114:	ldr	r7, [sp, #12]
   2e118:	cmp	r0, #0
   2e11c:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2e120:	str	ip, [fp, #-1076]	; 0xfffffbcc
   2e124:	str	r8, [fp, #-1068]	; 0xfffffbd4
   2e128:	str	r2, [fp, #-1064]	; 0xfffffbd8
   2e12c:	str	r6, [fp, #-1060]	; 0xfffffbdc
   2e130:	ldr	r8, [sp, #24]
   2e134:	ldr	r6, [sp, #144]	; 0x90
   2e138:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2e13c:	str	r5, [fp, #-1052]	; 0xfffffbe4
   2e140:	str	lr, [fp, #-1080]	; 0xfffffbc8
   2e144:	bne	2e0fc <__assert_fail@plt+0x1c268>
   2e148:	b	2e154 <__assert_fail@plt+0x1c2c0>
   2e14c:	cmp	r6, #0
   2e150:	ble	2e700 <__assert_fail@plt+0x1c86c>
   2e154:	mov	r0, #0
   2e158:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2e15c:	add	r0, r6, #1
   2e160:	str	r0, [fp, #-3140]	; 0xfffff3bc
   2e164:	lsl	r0, r0, #2
   2e168:	bl	33c98 <__assert_fail@plt+0x21e04>
   2e16c:	cmp	r0, #0
   2e170:	str	r0, [fp, #-3132]	; 0xfffff3c4
   2e174:	mov	r0, #0
   2e178:	movweq	r0, #12
   2e17c:	str	r0, [fp, #-56]	; 0xffffffc8
   2e180:	beq	2e74c <__assert_fail@plt+0x1c8b8>
   2e184:	sub	lr, fp, #3072	; 0xc00
   2e188:	vmov.i32	q8, #0	; 0x00000000
   2e18c:	mov	r1, #0
   2e190:	mov	r2, #0
   2e194:	mov	r4, #0
   2e198:	mov	r3, #0
   2e19c:	mov	r8, #0
   2e1a0:	sub	r0, lr, #104	; 0x68
   2e1a4:	sub	lr, fp, #3072	; 0xc00
   2e1a8:	vst1.64	{d16-d17}, [r0]!
   2e1ac:	sub	r5, lr, #68	; 0x44
   2e1b0:	vst1.64	{d16-d17}, [r0]
   2e1b4:	mov	r0, #0
   2e1b8:	str	r0, [sp, #140]	; 0x8c
   2e1bc:	mov	r0, #0
   2e1c0:	str	r0, [sp, #136]	; 0x88
   2e1c4:	mov	r0, #0
   2e1c8:	str	r0, [sp, #132]	; 0x84
   2e1cc:	mov	r0, #0
   2e1d0:	str	r0, [sp, #128]	; 0x80
   2e1d4:	mov	r0, #0
   2e1d8:	str	r0, [sp, #144]	; 0x90
   2e1dc:	mov	r0, #0
   2e1e0:	str	r0, [sp, #112]	; 0x70
   2e1e4:	mov	r0, #0
   2e1e8:	sub	lr, fp, #6144	; 0x1800
   2e1ec:	str	r2, [sp, #124]	; 0x7c
   2e1f0:	str	r3, [sp, #116]	; 0x74
   2e1f4:	str	r4, [sp, #120]	; 0x78
   2e1f8:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2e1fc:	add	r0, r8, r8, lsl #1
   2e200:	sub	r2, lr, #104	; 0x68
   2e204:	add	r0, r2, r0, lsl #2
   2e208:	ldr	r7, [r0, #4]
   2e20c:	cmp	r7, #1
   2e210:	blt	2e268 <__assert_fail@plt+0x1c3d4>
   2e214:	ldr	r4, [r0, #8]
   2e218:	mov	r9, #0
   2e21c:	ldr	r2, [sp, #148]	; 0x94
   2e220:	ldr	r0, [r4, r9, lsl #2]
   2e224:	ldr	r2, [r2, #12]
   2e228:	ldr	r0, [r2, r0, lsl #2]
   2e22c:	cmn	r0, #1
   2e230:	beq	2e258 <__assert_fail@plt+0x1c3c4>
   2e234:	ldr	r1, [sp, #148]	; 0x94
   2e238:	add	r0, r0, r0, lsl #1
   2e23c:	ldr	r1, [r1, #24]
   2e240:	add	r1, r1, r0, lsl #2
   2e244:	mov	r0, r5
   2e248:	bl	29820 <__assert_fail@plt+0x1798c>
   2e24c:	mov	r1, #0
   2e250:	cmp	r0, #0
   2e254:	bne	2e58c <__assert_fail@plt+0x1c6f8>
   2e258:	add	r9, r9, #1
   2e25c:	cmp	r9, r7
   2e260:	blt	2e21c <__assert_fail@plt+0x1c388>
   2e264:	str	r1, [fp, #-56]	; 0xffffffc8
   2e268:	ldr	r1, [sp, #148]	; 0x94
   2e26c:	sub	r0, fp, #56	; 0x38
   2e270:	mov	r2, r5
   2e274:	mov	r3, #0
   2e278:	bl	29aec <__assert_fail@plt+0x17c58>
   2e27c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2e280:	mov	r7, r0
   2e284:	sub	lr, fp, #1024	; 0x400
   2e288:	add	r4, sp, #152	; 0x98
   2e28c:	sub	r0, lr, #56	; 0x38
   2e290:	cmp	r7, #0
   2e294:	str	r7, [r0, r8, lsl #2]
   2e298:	bne	2e2a4 <__assert_fail@plt+0x1c410>
   2e29c:	cmp	r1, #0
   2e2a0:	bne	2e644 <__assert_fail@plt+0x1c7b0>
   2e2a4:	ldrsb	r0, [r7, #52]	; 0x34
   2e2a8:	cmn	r0, #1
   2e2ac:	ble	2e2cc <__assert_fail@plt+0x1c438>
   2e2b0:	sub	lr, fp, #3072	; 0xc00
   2e2b4:	sub	r0, lr, #56	; 0x38
   2e2b8:	sub	lr, fp, #2048	; 0x800
   2e2bc:	str	r7, [r0, r8, lsl #2]
   2e2c0:	sub	r0, lr, #56	; 0x38
   2e2c4:	str	r7, [r0, r8, lsl #2]
   2e2c8:	b	2e35c <__assert_fail@plt+0x1c4c8>
   2e2cc:	ldr	r1, [sp, #148]	; 0x94
   2e2d0:	sub	r0, fp, #56	; 0x38
   2e2d4:	mov	r2, r5
   2e2d8:	mov	r3, #1
   2e2dc:	bl	29aec <__assert_fail@plt+0x17c58>
   2e2e0:	sub	lr, fp, #2048	; 0x800
   2e2e4:	cmp	r0, #0
   2e2e8:	sub	r1, lr, #56	; 0x38
   2e2ec:	str	r0, [r1, r8, lsl #2]
   2e2f0:	bne	2e300 <__assert_fail@plt+0x1c46c>
   2e2f4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2e2f8:	cmp	r1, #0
   2e2fc:	bne	2e644 <__assert_fail@plt+0x1c7b0>
   2e300:	cmp	r7, r0
   2e304:	beq	2e328 <__assert_fail@plt+0x1c494>
   2e308:	ldr	r0, [sp, #148]	; 0x94
   2e30c:	ldr	r1, [sp, #112]	; 0x70
   2e310:	ldr	r0, [r0, #92]	; 0x5c
   2e314:	cmp	r0, #1
   2e318:	mov	r0, #0
   2e31c:	movwgt	r0, #1
   2e320:	orr	r1, r1, r0
   2e324:	str	r1, [sp, #112]	; 0x70
   2e328:	ldr	r1, [sp, #148]	; 0x94
   2e32c:	sub	r0, fp, #56	; 0x38
   2e330:	mov	r2, r5
   2e334:	mov	r3, #2
   2e338:	bl	29aec <__assert_fail@plt+0x17c58>
   2e33c:	sub	lr, fp, #3072	; 0xc00
   2e340:	cmp	r0, #0
   2e344:	sub	r1, lr, #56	; 0x38
   2e348:	str	r0, [r1, r8, lsl #2]
   2e34c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2e350:	bne	2e35c <__assert_fail@plt+0x1c4c8>
   2e354:	cmp	r1, #0
   2e358:	bne	2e644 <__assert_fail@plt+0x1c7b0>
   2e35c:	ldr	r0, [r4, r8, lsl #5]
   2e360:	ldr	r2, [sp, #144]	; 0x90
   2e364:	mov	r9, r6
   2e368:	orr	r2, r2, r0
   2e36c:	add	r0, r4, r8, lsl #5
   2e370:	mov	r4, r5
   2e374:	add	r8, r8, #1
   2e378:	str	r2, [sp, #144]	; 0x90
   2e37c:	cmp	r8, r9
   2e380:	ldmib	r0, {ip, lr}
   2e384:	ldr	r7, [r0, #12]
   2e388:	ldr	r3, [r0, #16]
   2e38c:	ldr	r5, [r0, #20]
   2e390:	ldr	r6, [r0, #24]
   2e394:	ldr	r0, [r0, #28]
   2e398:	ldr	r2, [sp, #140]	; 0x8c
   2e39c:	orr	r2, r2, r0
   2e3a0:	mov	r0, r9
   2e3a4:	str	r2, [sp, #140]	; 0x8c
   2e3a8:	ldr	r2, [sp, #124]	; 0x7c
   2e3ac:	orr	r2, r2, r6
   2e3b0:	ldr	r6, [sp, #136]	; 0x88
   2e3b4:	orr	r6, r6, r5
   2e3b8:	mov	r5, r4
   2e3bc:	ldr	r4, [sp, #120]	; 0x78
   2e3c0:	str	r6, [sp, #136]	; 0x88
   2e3c4:	mov	r6, r9
   2e3c8:	orr	r4, r4, r3
   2e3cc:	ldr	r3, [sp, #132]	; 0x84
   2e3d0:	orr	r3, r3, r7
   2e3d4:	str	r3, [sp, #132]	; 0x84
   2e3d8:	ldr	r3, [sp, #128]	; 0x80
   2e3dc:	orr	r3, r3, lr
   2e3e0:	str	r3, [sp, #128]	; 0x80
   2e3e4:	ldr	r3, [sp, #116]	; 0x74
   2e3e8:	orr	r3, r3, ip
   2e3ec:	blt	2e1e4 <__assert_fail@plt+0x1c350>
   2e3f0:	ldr	r7, [sp, #144]	; 0x90
   2e3f4:	ldr	r0, [sp, #128]	; 0x80
   2e3f8:	str	r3, [fp, #-3172]	; 0xfffff39c
   2e3fc:	ldr	sl, [sp, #112]	; 0x70
   2e400:	str	r7, [fp, #-3176]	; 0xfffff398
   2e404:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2e408:	ldr	r0, [sp, #132]	; 0x84
   2e40c:	tst	sl, #1
   2e410:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2e414:	ldr	r0, [sp, #136]	; 0x88
   2e418:	str	r4, [fp, #-3160]	; 0xfffff3a8
   2e41c:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2e420:	ldr	r0, [sp, #140]	; 0x8c
   2e424:	str	r2, [fp, #-3152]	; 0xfffff3b0
   2e428:	str	r0, [fp, #-3148]	; 0xfffff3b4
   2e42c:	mov	r0, #4
   2e430:	bne	2e758 <__assert_fail@plt+0x1c8c4>
   2e434:	mov	r1, #256	; 0x100
   2e438:	bl	33c44 <__assert_fail@plt+0x21db0>
   2e43c:	ldr	r1, [sp, #24]
   2e440:	sub	lr, fp, #3072	; 0xc00
   2e444:	cmp	r0, #0
   2e448:	sub	r8, lr, #104	; 0x68
   2e44c:	str	r0, [r1, #44]	; 0x2c
   2e450:	beq	2e5d0 <__assert_fail@plt+0x1c73c>
   2e454:	mov	r1, #0
   2e458:	mov	r3, r7
   2e45c:	mov	r2, #0
   2e460:	add	r4, sp, #152	; 0x98
   2e464:	cmp	r3, #0
   2e468:	beq	2e508 <__assert_fail@plt+0x1c674>
   2e46c:	ldr	r7, [sp, #148]	; 0x94
   2e470:	lsl	r6, r2, #5
   2e474:	mov	r5, #1
   2e478:	add	r7, r7, r2, lsl #2
   2e47c:	add	ip, r7, #96	; 0x60
   2e480:	b	2e4d4 <__assert_fail@plt+0x1c640>
   2e484:	mov	lr, #0
   2e488:	str	sl, [sp, #112]	; 0x70
   2e48c:	ldr	r7, [r4, lr, lsl #3]
   2e490:	add	lr, lr, #4
   2e494:	tst	r7, r5
   2e498:	beq	2e48c <__assert_fail@plt+0x1c5f8>
   2e49c:	ldr	r7, [ip]
   2e4a0:	mov	sl, r4
   2e4a4:	sub	r4, fp, #1024	; 0x400
   2e4a8:	sub	r4, r4, #56	; 0x38
   2e4ac:	tst	r7, r5
   2e4b0:	sub	r7, fp, #2048	; 0x800
   2e4b4:	sub	r7, r7, #56	; 0x38
   2e4b8:	moveq	r7, r4
   2e4bc:	mov	r4, sl
   2e4c0:	ldr	sl, [sp, #112]	; 0x70
   2e4c4:	add	r7, r7, lr
   2e4c8:	ldr	r7, [r7, #-4]
   2e4cc:	str	r7, [r0, r6, lsl #2]
   2e4d0:	b	2e4dc <__assert_fail@plt+0x1c648>
   2e4d4:	tst	r3, #1
   2e4d8:	bne	2e484 <__assert_fail@plt+0x1c5f0>
   2e4dc:	lsr	r7, r3, #1
   2e4e0:	cmp	r1, r3, lsr #1
   2e4e4:	add	r6, r6, #1
   2e4e8:	lsl	r5, r5, #1
   2e4ec:	mov	r3, r7
   2e4f0:	bne	2e4d4 <__assert_fail@plt+0x1c640>
   2e4f4:	b	2e508 <__assert_fail@plt+0x1c674>
   2e4f8:	ldr	r3, [r8, r2, lsl #2]
   2e4fc:	add	r4, r4, #4
   2e500:	cmp	r3, #0
   2e504:	bne	2e46c <__assert_fail@plt+0x1c5d8>
   2e508:	add	r2, r2, #1
   2e50c:	cmp	r2, #8
   2e510:	bne	2e4f8 <__assert_fail@plt+0x1c664>
   2e514:	ldr	r7, [sp, #144]	; 0x90
   2e518:	tst	r7, #1024	; 0x400
   2e51c:	beq	2e560 <__assert_fail@plt+0x1c6cc>
   2e520:	mov	r1, #0
   2e524:	add	r2, sp, #152	; 0x98
   2e528:	add	r3, r2, r1, lsl #5
   2e52c:	ldrb	r3, [r3, #1]
   2e530:	tst	r3, #4
   2e534:	bne	2e548 <__assert_fail@plt+0x1c6b4>
   2e538:	add	r1, r1, #1
   2e53c:	cmp	r1, r9
   2e540:	blt	2e528 <__assert_fail@plt+0x1c694>
   2e544:	b	2e560 <__assert_fail@plt+0x1c6cc>
   2e548:	sub	lr, fp, #3072	; 0xc00
   2e54c:	tst	sl, #1
   2e550:	sub	r2, lr, #56	; 0x38
   2e554:	ldr	r1, [r2, r1, lsl #2]
   2e558:	str	r1, [r0, #40]	; 0x28
   2e55c:	strne	r1, [r0, #1064]	; 0x428
   2e560:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2e564:	bl	17754 <__assert_fail@plt+0x58c0>
   2e568:	sub	lr, fp, #6144	; 0x1800
   2e56c:	sub	r0, lr, #104	; 0x68
   2e570:	add	r4, r0, #8
   2e574:	ldr	r0, [r4], #12
   2e578:	bl	17754 <__assert_fail@plt+0x58c0>
   2e57c:	subs	r9, r9, #1
   2e580:	bne	2e574 <__assert_fail@plt+0x1c6e0>
   2e584:	mov	r0, #1
   2e588:	b	2e724 <__assert_fail@plt+0x1c890>
   2e58c:	ldr	r1, [sp, #116]	; 0x74
   2e590:	str	r0, [fp, #-56]	; 0xffffffc8
   2e594:	str	r1, [fp, #-3172]	; 0xfffff39c
   2e598:	ldr	r1, [sp, #144]	; 0x90
   2e59c:	str	r1, [fp, #-3176]	; 0xfffff398
   2e5a0:	ldr	r1, [sp, #128]	; 0x80
   2e5a4:	str	r1, [fp, #-3168]	; 0xfffff3a0
   2e5a8:	ldr	r1, [sp, #132]	; 0x84
   2e5ac:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2e5b0:	ldr	r1, [sp, #120]	; 0x78
   2e5b4:	str	r1, [fp, #-3160]	; 0xfffff3a8
   2e5b8:	ldr	r1, [sp, #136]	; 0x88
   2e5bc:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2e5c0:	ldr	r1, [sp, #124]	; 0x7c
   2e5c4:	str	r1, [fp, #-3152]	; 0xfffff3b0
   2e5c8:	ldr	r1, [sp, #140]	; 0x8c
   2e5cc:	str	r1, [fp, #-3148]	; 0xfffff3b4
   2e5d0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2e5d4:	bl	17754 <__assert_fail@plt+0x58c0>
   2e5d8:	cmp	r6, #1
   2e5dc:	blt	2e5fc <__assert_fail@plt+0x1c768>
   2e5e0:	sub	lr, fp, #6144	; 0x1800
   2e5e4:	sub	r0, lr, #104	; 0x68
   2e5e8:	add	r4, r0, #8
   2e5ec:	ldr	r0, [r4], #12
   2e5f0:	bl	17754 <__assert_fail@plt+0x58c0>
   2e5f4:	subs	r6, r6, #1
   2e5f8:	bne	2e5ec <__assert_fail@plt+0x1c758>
   2e5fc:	mov	r0, #0
   2e600:	b	2e724 <__assert_fail@plt+0x1c890>
   2e604:	ldr	r0, [sp, #52]	; 0x34
   2e608:	str	r6, [fp, #-1072]	; 0xfffffbd0
   2e60c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2e610:	ldr	r0, [sp, #48]	; 0x30
   2e614:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2e618:	ldr	r0, [sp, #44]	; 0x2c
   2e61c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2e620:	ldr	r0, [sp, #40]	; 0x28
   2e624:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2e628:	ldr	r0, [sp, #36]	; 0x24
   2e62c:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2e630:	ldr	r0, [sp, #32]
   2e634:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2e638:	ldr	r0, [sp, #56]	; 0x38
   2e63c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2e640:	b	2e6d0 <__assert_fail@plt+0x1c83c>
   2e644:	ldr	r0, [sp, #116]	; 0x74
   2e648:	str	r0, [fp, #-3172]	; 0xfffff39c
   2e64c:	ldr	r0, [sp, #144]	; 0x90
   2e650:	str	r0, [fp, #-3176]	; 0xfffff398
   2e654:	ldr	r0, [sp, #128]	; 0x80
   2e658:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2e65c:	ldr	r0, [sp, #132]	; 0x84
   2e660:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2e664:	ldr	r0, [sp, #120]	; 0x78
   2e668:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2e66c:	ldr	r0, [sp, #136]	; 0x88
   2e670:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2e674:	ldr	r0, [sp, #124]	; 0x7c
   2e678:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2e67c:	ldr	r0, [sp, #140]	; 0x8c
   2e680:	str	r0, [fp, #-3148]	; 0xfffff3b4
   2e684:	b	2e5d0 <__assert_fail@plt+0x1c73c>
   2e688:	ldr	r0, [sp, #52]	; 0x34
   2e68c:	str	r6, [fp, #-1072]	; 0xfffffbd0
   2e690:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2e694:	ldr	r0, [sp, #48]	; 0x30
   2e698:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2e69c:	ldr	r0, [sp, #44]	; 0x2c
   2e6a0:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2e6a4:	ldr	r0, [sp, #40]	; 0x28
   2e6a8:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2e6ac:	ldr	r0, [sp, #36]	; 0x24
   2e6b0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2e6b4:	ldr	r0, [sp, #32]
   2e6b8:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2e6bc:	ldr	r0, [sp, #56]	; 0x38
   2e6c0:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2e6c4:	mov	r0, #0
   2e6c8:	str	r0, [r8]
   2e6cc:	str	r0, [r5]
   2e6d0:	ldr	r8, [sp, #24]
   2e6d4:	ldr	r9, [sp, #144]	; 0x90
   2e6d8:	cmp	r9, #1
   2e6dc:	blt	2e6fc <__assert_fail@plt+0x1c868>
   2e6e0:	sub	lr, fp, #6144	; 0x1800
   2e6e4:	sub	r0, lr, #104	; 0x68
   2e6e8:	add	r4, r0, #8
   2e6ec:	ldr	r0, [r4], #12
   2e6f0:	bl	17754 <__assert_fail@plt+0x58c0>
   2e6f4:	subs	r9, r9, #1
   2e6f8:	bne	2e6ec <__assert_fail@plt+0x1c858>
   2e6fc:	mvn	r6, #0
   2e700:	mov	r0, #0
   2e704:	cmp	r6, #0
   2e708:	bne	2e724 <__assert_fail@plt+0x1c890>
   2e70c:	mov	r0, #4
   2e710:	mov	r1, #256	; 0x100
   2e714:	bl	33c44 <__assert_fail@plt+0x21db0>
   2e718:	cmp	r0, #0
   2e71c:	str	r0, [r8, #44]	; 0x2c
   2e720:	movwne	r0, #1
   2e724:	sub	sp, fp, #48	; 0x30
   2e728:	vpop	{d8-d9}
   2e72c:	add	sp, sp, #4
   2e730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e734:	mov	r0, #0
   2e738:	str	r0, [r5]
   2e73c:	str	r0, [r4]
   2e740:	cmp	r9, #1
   2e744:	bge	2e6e0 <__assert_fail@plt+0x1c84c>
   2e748:	b	2e6fc <__assert_fail@plt+0x1c868>
   2e74c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2e750:	bl	17754 <__assert_fail@plt+0x58c0>
   2e754:	b	2e5e0 <__assert_fail@plt+0x1c74c>
   2e758:	mov	r1, #512	; 0x200
   2e75c:	bl	33c44 <__assert_fail@plt+0x21db0>
   2e760:	ldr	r1, [sp, #24]
   2e764:	cmp	r0, #0
   2e768:	str	r0, [r1, #48]	; 0x30
   2e76c:	beq	2e5d0 <__assert_fail@plt+0x1c73c>
   2e770:	sub	lr, fp, #1024	; 0x400
   2e774:	mov	r3, #0
   2e778:	add	r8, sp, #152	; 0x98
   2e77c:	mov	r5, r7
   2e780:	mov	r6, #0
   2e784:	sub	r1, lr, #56	; 0x38
   2e788:	sub	lr, r1, #4
   2e78c:	sub	r1, fp, #2048	; 0x800
   2e790:	sub	r1, r1, #56	; 0x38
   2e794:	sub	ip, r1, #4
   2e798:	cmp	r5, #0
   2e79c:	beq	2e830 <__assert_fail@plt+0x1c99c>
   2e7a0:	lsl	r4, r6, #5
   2e7a4:	mov	r1, #1
   2e7a8:	b	2e7f4 <__assert_fail@plt+0x1c960>
   2e7ac:	mov	r2, r8
   2e7b0:	str	lr, [sp, #148]	; 0x94
   2e7b4:	mov	sl, lr
   2e7b8:	mov	lr, ip
   2e7bc:	ldr	r7, [r2], #32
   2e7c0:	add	sl, sl, #4
   2e7c4:	add	lr, lr, #4
   2e7c8:	tst	r7, r1
   2e7cc:	beq	2e7bc <__assert_fail@plt+0x1c928>
   2e7d0:	ldr	r2, [sl]
   2e7d4:	mov	r7, r0
   2e7d8:	str	r2, [r7, r4, lsl #2]!
   2e7dc:	ldr	r2, [lr]
   2e7e0:	ldr	sl, [sp, #112]	; 0x70
   2e7e4:	ldr	lr, [sp, #148]	; 0x94
   2e7e8:	str	r2, [r7, #1024]	; 0x400
   2e7ec:	ldr	r7, [sp, #144]	; 0x90
   2e7f0:	b	2e7fc <__assert_fail@plt+0x1c968>
   2e7f4:	tst	r5, #1
   2e7f8:	bne	2e7ac <__assert_fail@plt+0x1c918>
   2e7fc:	lsr	r2, r5, #1
   2e800:	cmp	r3, r5, lsr #1
   2e804:	add	r4, r4, #1
   2e808:	lsl	r1, r1, #1
   2e80c:	mov	r5, r2
   2e810:	bne	2e7f4 <__assert_fail@plt+0x1c960>
   2e814:	b	2e830 <__assert_fail@plt+0x1c99c>
   2e818:	sub	r1, fp, #3072	; 0xc00
   2e81c:	add	r8, r8, #4
   2e820:	sub	r1, r1, #104	; 0x68
   2e824:	ldr	r5, [r1, r6, lsl #2]
   2e828:	cmp	r5, #0
   2e82c:	bne	2e7a0 <__assert_fail@plt+0x1c90c>
   2e830:	add	r6, r6, #1
   2e834:	cmp	r6, #8
   2e838:	bne	2e818 <__assert_fail@plt+0x1c984>
   2e83c:	b	2e518 <__assert_fail@plt+0x1c684>
   2e840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e844:	add	fp, sp, #28
   2e848:	sub	sp, sp, #52	; 0x34
   2e84c:	ldr	r4, [r1, #8]
   2e850:	ldr	r8, [r1, #12]
   2e854:	mov	r6, r0
   2e858:	mov	r0, #1
   2e85c:	mov	r5, r1
   2e860:	str	r0, [sp, #44]	; 0x2c
   2e864:	str	r0, [sp, #40]	; 0x28
   2e868:	mov	r0, #4
   2e86c:	bl	33c98 <__assert_fail@plt+0x21e04>
   2e870:	cmp	r0, #0
   2e874:	str	r0, [sp, #48]	; 0x30
   2e878:	beq	2ec74 <__assert_fail@plt+0x1cde0>
   2e87c:	str	r4, [r0]
   2e880:	add	r3, sp, #40	; 0x28
   2e884:	mov	r0, r6
   2e888:	mov	r1, r5
   2e88c:	mov	r2, r8
   2e890:	str	r6, [sp, #24]
   2e894:	bl	2ec90 <__assert_fail@plt+0x1cdfc>
   2e898:	cmp	r0, #0
   2e89c:	bne	2ec2c <__assert_fail@plt+0x1cd98>
   2e8a0:	add	r0, r5, #16
   2e8a4:	mov	r1, #0
   2e8a8:	str	r5, [sp, #16]
   2e8ac:	str	r0, [sp, #20]
   2e8b0:	cmp	r8, #1
   2e8b4:	blt	2ec34 <__assert_fail@plt+0x1cda0>
   2e8b8:	ldr	r0, [r5]
   2e8bc:	ldr	r7, [sp, #24]
   2e8c0:	ldr	r2, [r0, r8, lsl #2]
   2e8c4:	cmp	r2, #0
   2e8c8:	mov	r2, #0
   2e8cc:	addeq	r2, r1, #1
   2e8d0:	ldr	r1, [r7, #120]	; 0x78
   2e8d4:	cmp	r2, r1
   2e8d8:	bgt	2ec3c <__assert_fail@plt+0x1cda8>
   2e8dc:	mov	r0, #0
   2e8e0:	str	r8, [sp, #28]
   2e8e4:	sub	r8, r8, #1
   2e8e8:	str	r2, [sp, #12]
   2e8ec:	str	r0, [sp, #44]	; 0x2c
   2e8f0:	ldr	r0, [r7, #100]	; 0x64
   2e8f4:	ldr	r6, [r0, r8, lsl #2]
   2e8f8:	cmp	r6, #0
   2e8fc:	beq	2ec0c <__assert_fail@plt+0x1cd78>
   2e900:	ldr	r0, [r6, #20]
   2e904:	cmp	r0, #1
   2e908:	blt	2ec0c <__assert_fail@plt+0x1cd78>
   2e90c:	ldr	r0, [r7, #84]	; 0x54
   2e910:	mov	r9, #0
   2e914:	str	r6, [sp, #32]
   2e918:	str	r0, [sp, #36]	; 0x24
   2e91c:	b	2e9d0 <__assert_fail@plt+0x1cb3c>
   2e920:	cmp	r2, r1
   2e924:	bne	2e950 <__assert_fail@plt+0x1cabc>
   2e928:	lsl	r0, r2, #1
   2e92c:	lsl	r1, r2, #3
   2e930:	str	r0, [sp, #40]	; 0x28
   2e934:	ldr	r0, [sp, #48]	; 0x30
   2e938:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2e93c:	cmp	r0, #0
   2e940:	beq	2ec88 <__assert_fail@plt+0x1cdf4>
   2e944:	str	r0, [sp, #48]	; 0x30
   2e948:	ldr	r1, [sp, #44]	; 0x2c
   2e94c:	b	2e954 <__assert_fail@plt+0x1cac0>
   2e950:	ldr	r0, [sp, #48]	; 0x30
   2e954:	ldr	r2, [r0]
   2e958:	cmp	r2, sl
   2e95c:	ble	2e998 <__assert_fail@plt+0x1cb04>
   2e960:	cmp	r1, #1
   2e964:	blt	2e9c8 <__assert_fail@plt+0x1cb34>
   2e968:	add	r2, r0, r1, lsl #2
   2e96c:	add	r1, r1, #1
   2e970:	mov	r3, r2
   2e974:	ldr	r7, [r3, #-4]!
   2e978:	sub	r1, r1, #1
   2e97c:	cmp	r1, #1
   2e980:	str	r7, [r2]
   2e984:	mov	r2, r3
   2e988:	bgt	2e974 <__assert_fail@plt+0x1cae0>
   2e98c:	ldr	r7, [sp, #24]
   2e990:	sub	r1, r1, #1
   2e994:	b	2e9c8 <__assert_fail@plt+0x1cb34>
   2e998:	add	r2, r0, r1, lsl #2
   2e99c:	ldr	r3, [r2, #-4]
   2e9a0:	cmp	r3, sl
   2e9a4:	ble	2e9c8 <__assert_fail@plt+0x1cb34>
   2e9a8:	sub	r1, r1, #2
   2e9ac:	str	r3, [r2]
   2e9b0:	sub	r1, r1, #1
   2e9b4:	ldr	r3, [r2, #-8]
   2e9b8:	sub	r2, r2, #4
   2e9bc:	cmp	r3, sl
   2e9c0:	bgt	2e9ac <__assert_fail@plt+0x1cb18>
   2e9c4:	add	r1, r1, #2
   2e9c8:	str	sl, [r0, r1, lsl #2]
   2e9cc:	b	2ebc8 <__assert_fail@plt+0x1cd34>
   2e9d0:	ldr	r0, [r6, #24]
   2e9d4:	ldr	sl, [r0, r9, lsl #2]
   2e9d8:	ldr	r0, [sp, #36]	; 0x24
   2e9dc:	ldr	r0, [r0]
   2e9e0:	add	r0, r0, sl, lsl #3
   2e9e4:	ldrb	r0, [r0, #6]
   2e9e8:	tst	r0, #16
   2e9ec:	bne	2ea90 <__assert_fail@plt+0x1cbfc>
   2e9f0:	ldr	r0, [sp, #36]	; 0x24
   2e9f4:	mov	r2, r8
   2e9f8:	ldr	r0, [r0]
   2e9fc:	add	r1, r0, sl, lsl #3
   2ea00:	mov	r0, r7
   2ea04:	bl	2d534 <__assert_fail@plt+0x1b6a0>
   2ea08:	cmp	r0, #0
   2ea0c:	beq	2ebfc <__assert_fail@plt+0x1cd68>
   2ea10:	ldr	r0, [r5]
   2ea14:	ldr	r1, [sp, #28]
   2ea18:	ldr	r0, [r0, r1, lsl #2]
   2ea1c:	cmp	r0, #0
   2ea20:	beq	2ebfc <__assert_fail@plt+0x1cd68>
   2ea24:	ldr	r2, [r0, #8]
   2ea28:	cmp	r2, #1
   2ea2c:	blt	2ebfc <__assert_fail@plt+0x1cd68>
   2ea30:	ldr	r1, [sp, #36]	; 0x24
   2ea34:	ldr	r0, [r0, #12]
   2ea38:	subs	r3, r2, #1
   2ea3c:	mov	r2, #0
   2ea40:	ldr	r1, [r1, #12]
   2ea44:	ldr	r1, [r1, sl, lsl #2]
   2ea48:	beq	2ea70 <__assert_fail@plt+0x1cbdc>
   2ea4c:	mov	r5, #1
   2ea50:	add	r7, r2, r3
   2ea54:	lsr	r6, r7, #1
   2ea58:	ldr	r4, [r0, r6, lsl #2]
   2ea5c:	cmp	r4, r1
   2ea60:	movge	r3, r6
   2ea64:	addlt	r2, r5, r7, lsr #1
   2ea68:	cmp	r2, r3
   2ea6c:	bcc	2ea50 <__assert_fail@plt+0x1cbbc>
   2ea70:	ldr	r2, [r0, r2, lsl #2]
   2ea74:	ldr	r5, [sp, #16]
   2ea78:	ldr	r7, [sp, #24]
   2ea7c:	ldr	r6, [sp, #32]
   2ea80:	mov	r0, #1
   2ea84:	cmp	r2, r1
   2ea88:	beq	2eb70 <__assert_fail@plt+0x1ccdc>
   2ea8c:	b	2ebfc <__assert_fail@plt+0x1cd68>
   2ea90:	ldr	r4, [r7, #84]	; 0x54
   2ea94:	mov	r6, r5
   2ea98:	ldr	r5, [r5, #12]
   2ea9c:	mov	r1, sl
   2eaa0:	mov	r2, r7
   2eaa4:	mov	r3, r8
   2eaa8:	mov	r0, r4
   2eaac:	bl	2d240 <__assert_fail@plt+0x1b3ac>
   2eab0:	cmp	r0, #1
   2eab4:	blt	2ead8 <__assert_fail@plt+0x1cc44>
   2eab8:	add	r1, r0, r8
   2eabc:	mov	r3, r8
   2eac0:	cmp	r1, r5
   2eac4:	ble	2eaec <__assert_fail@plt+0x1cc58>
   2eac8:	mov	r5, r6
   2eacc:	ldr	r6, [sp, #32]
   2ead0:	mov	r8, r3
   2ead4:	b	2eb70 <__assert_fail@plt+0x1ccdc>
   2ead8:	mov	r5, r6
   2eadc:	ldr	r6, [sp, #32]
   2eae0:	cmp	r0, #0
   2eae4:	bne	2eb70 <__assert_fail@plt+0x1ccdc>
   2eae8:	b	2e9f0 <__assert_fail@plt+0x1cb5c>
   2eaec:	ldr	r2, [r6]
   2eaf0:	mov	r5, r6
   2eaf4:	ldr	r6, [sp, #32]
   2eaf8:	mov	r8, r3
   2eafc:	ldr	r2, [r2, r1, lsl #2]
   2eb00:	cmp	r2, #0
   2eb04:	beq	2e9f0 <__assert_fail@plt+0x1cb5c>
   2eb08:	ldr	r3, [r2, #8]
   2eb0c:	cmp	r3, #1
   2eb10:	blt	2e9f0 <__assert_fail@plt+0x1cb5c>
   2eb14:	ldr	r1, [r4, #12]
   2eb18:	ldr	r2, [r2, #12]
   2eb1c:	subs	r4, r3, #1
   2eb20:	mov	r3, #0
   2eb24:	ldr	ip, [r1, sl, lsl #2]
   2eb28:	beq	2eb50 <__assert_fail@plt+0x1ccbc>
   2eb2c:	mov	r5, #1
   2eb30:	add	r6, r3, r4
   2eb34:	lsr	r7, r6, #1
   2eb38:	ldr	r1, [r2, r7, lsl #2]
   2eb3c:	cmp	r1, ip
   2eb40:	movge	r4, r7
   2eb44:	addlt	r3, r5, r6, lsr #1
   2eb48:	cmp	r3, r4
   2eb4c:	bcc	2eb30 <__assert_fail@plt+0x1cc9c>
   2eb50:	ldr	r5, [sp, #16]
   2eb54:	ldr	r7, [sp, #24]
   2eb58:	ldr	r6, [sp, #32]
   2eb5c:	cmp	r0, #0
   2eb60:	beq	2e9f0 <__assert_fail@plt+0x1cb5c>
   2eb64:	ldr	r1, [r2, r3, lsl #2]
   2eb68:	cmp	r1, ip
   2eb6c:	bne	2e9f0 <__assert_fail@plt+0x1cb5c>
   2eb70:	ldr	r1, [r5, #20]
   2eb74:	cmp	r1, #0
   2eb78:	beq	2eba8 <__assert_fail@plt+0x1cd14>
   2eb7c:	ldr	r1, [sp, #36]	; 0x24
   2eb80:	add	r3, r0, r8
   2eb84:	mov	r0, r7
   2eb88:	ldr	r1, [r1, #12]
   2eb8c:	ldr	r2, [r1, sl, lsl #2]
   2eb90:	ldr	r1, [sp, #20]
   2eb94:	str	sl, [sp]
   2eb98:	str	r8, [sp, #4]
   2eb9c:	bl	2fda8 <__assert_fail@plt+0x1df14>
   2eba0:	cmp	r0, #0
   2eba4:	bne	2ebfc <__assert_fail@plt+0x1cd68>
   2eba8:	ldr	r2, [sp, #40]	; 0x28
   2ebac:	cmp	r2, #0
   2ebb0:	beq	2ebd8 <__assert_fail@plt+0x1cd44>
   2ebb4:	ldr	r1, [sp, #44]	; 0x2c
   2ebb8:	cmp	r1, #0
   2ebbc:	bne	2e920 <__assert_fail@plt+0x1ca8c>
   2ebc0:	ldr	r0, [sp, #48]	; 0x30
   2ebc4:	str	sl, [r0]
   2ebc8:	ldr	r0, [sp, #44]	; 0x2c
   2ebcc:	add	r0, r0, #1
   2ebd0:	str	r0, [sp, #44]	; 0x2c
   2ebd4:	b	2ebfc <__assert_fail@plt+0x1cd68>
   2ebd8:	mov	r0, #1
   2ebdc:	str	r0, [sp, #44]	; 0x2c
   2ebe0:	str	r0, [sp, #40]	; 0x28
   2ebe4:	mov	r0, #4
   2ebe8:	bl	33c98 <__assert_fail@plt+0x21e04>
   2ebec:	cmp	r0, #0
   2ebf0:	str	r0, [sp, #48]	; 0x30
   2ebf4:	beq	2ec60 <__assert_fail@plt+0x1cdcc>
   2ebf8:	str	sl, [r0]
   2ebfc:	ldr	r0, [r6, #20]
   2ec00:	add	r9, r9, #1
   2ec04:	cmp	r9, r0
   2ec08:	blt	2e9d0 <__assert_fail@plt+0x1cb3c>
   2ec0c:	mov	r0, r7
   2ec10:	mov	r1, r5
   2ec14:	mov	r2, r8
   2ec18:	add	r3, sp, #40	; 0x28
   2ec1c:	bl	2ec90 <__assert_fail@plt+0x1cdfc>
   2ec20:	ldr	r1, [sp, #12]
   2ec24:	cmp	r0, #0
   2ec28:	beq	2e8b0 <__assert_fail@plt+0x1ca1c>
   2ec2c:	mov	r7, r0
   2ec30:	b	2ec4c <__assert_fail@plt+0x1cdb8>
   2ec34:	mov	r7, #0
   2ec38:	b	2ec4c <__assert_fail@plt+0x1cdb8>
   2ec3c:	lsl	r2, r8, #2
   2ec40:	mov	r1, #0
   2ec44:	mov	r7, #0
   2ec48:	bl	11cd8 <memset@plt>
   2ec4c:	ldr	r0, [sp, #48]	; 0x30
   2ec50:	bl	17754 <__assert_fail@plt+0x58c0>
   2ec54:	mov	r0, r7
   2ec58:	sub	sp, fp, #28
   2ec5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec60:	mov	r0, #0
   2ec64:	mov	r7, #12
   2ec68:	str	r0, [sp, #40]	; 0x28
   2ec6c:	str	r0, [sp, #44]	; 0x2c
   2ec70:	b	2ec4c <__assert_fail@plt+0x1cdb8>
   2ec74:	mov	r0, #0
   2ec78:	mov	r7, #12
   2ec7c:	str	r0, [sp, #40]	; 0x28
   2ec80:	str	r0, [sp, #44]	; 0x2c
   2ec84:	b	2ec54 <__assert_fail@plt+0x1cdc0>
   2ec88:	mov	r7, #12
   2ec8c:	b	2ec4c <__assert_fail@plt+0x1cdb8>
   2ec90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ec94:	add	fp, sp, #28
   2ec98:	sub	sp, sp, #132	; 0x84
   2ec9c:	mov	r9, r0
   2eca0:	ldr	r8, [r0, #84]	; 0x54
   2eca4:	mov	r0, #0
   2eca8:	mov	sl, r1
   2ecac:	mov	r5, r2
   2ecb0:	str	r0, [fp, #-76]	; 0xffffffb4
   2ecb4:	str	r5, [sp, #68]	; 0x44
   2ecb8:	ldr	r1, [r9, #100]	; 0x64
   2ecbc:	ldr	r2, [r1, r2, lsl #2]
   2ecc0:	cmp	r2, #0
   2ecc4:	mov	r1, r2
   2ecc8:	addne	r1, r1, #4
   2eccc:	str	r1, [sp, #80]	; 0x50
   2ecd0:	ldr	r1, [r3, #4]
   2ecd4:	cmp	r1, #0
   2ecd8:	beq	2f0e0 <__assert_fail@plt+0x1d24c>
   2ecdc:	mov	lr, r3
   2ece0:	cmp	r2, #0
   2ece4:	str	r2, [sp, #48]	; 0x30
   2ece8:	beq	2f0ac <__assert_fail@plt+0x1d218>
   2ecec:	mov	r0, #0
   2ecf0:	mov	r1, r8
   2ecf4:	mov	r2, lr
   2ecf8:	str	r8, [sp, #76]	; 0x4c
   2ecfc:	str	lr, [sp, #56]	; 0x38
   2ed00:	str	r0, [fp, #-72]	; 0xffffffb8
   2ed04:	sub	r0, fp, #72	; 0x48
   2ed08:	bl	2cfb0 <__assert_fail@plt+0x1b11c>
   2ed0c:	ldr	r8, [fp, #-72]	; 0xffffffb8
   2ed10:	cmp	r8, #0
   2ed14:	bne	2f7b4 <__assert_fail@plt+0x1d920>
   2ed18:	mov	r5, r0
   2ed1c:	mov	r4, r0
   2ed20:	ldr	r2, [sp, #56]	; 0x38
   2ed24:	ldr	r0, [r5, #28]!
   2ed28:	cmp	r0, #0
   2ed2c:	bne	2edc0 <__assert_fail@plt+0x1cf2c>
   2ed30:	ldr	r0, [r2, #4]
   2ed34:	mov	r6, #0
   2ed38:	mov	r7, r2
   2ed3c:	str	r0, [r4, #28]
   2ed40:	lsl	r0, r0, #2
   2ed44:	str	r6, [r4, #32]
   2ed48:	bl	33c98 <__assert_fail@plt+0x21e04>
   2ed4c:	cmp	r0, #0
   2ed50:	mov	r8, #12
   2ed54:	str	r0, [r4, #36]	; 0x24
   2ed58:	movweq	r6, #12
   2ed5c:	str	r6, [fp, #-72]	; 0xffffffb8
   2ed60:	beq	2f7b4 <__assert_fail@plt+0x1d920>
   2ed64:	ldr	r0, [r7, #4]
   2ed68:	mov	r2, r7
   2ed6c:	cmp	r0, #1
   2ed70:	blt	2edc0 <__assert_fail@plt+0x1cf2c>
   2ed74:	mov	r4, #0
   2ed78:	ldr	r0, [r2, #8]
   2ed7c:	ldr	r1, [sp, #76]	; 0x4c
   2ed80:	mov	r6, r2
   2ed84:	ldr	r0, [r0, r4, lsl #2]
   2ed88:	ldr	r1, [r1, #28]
   2ed8c:	add	r0, r0, r0, lsl #1
   2ed90:	add	r1, r1, r0, lsl #2
   2ed94:	mov	r0, r5
   2ed98:	bl	29820 <__assert_fail@plt+0x1798c>
   2ed9c:	cmp	r0, #0
   2eda0:	bne	2f7b0 <__assert_fail@plt+0x1d91c>
   2eda4:	ldr	r0, [r6, #4]
   2eda8:	add	r4, r4, #1
   2edac:	mov	r2, r6
   2edb0:	cmp	r4, r0
   2edb4:	blt	2ed78 <__assert_fail@plt+0x1cee4>
   2edb8:	mov	r0, #0
   2edbc:	str	r0, [fp, #-72]	; 0xffffffb8
   2edc0:	ldr	r1, [sp, #80]	; 0x50
   2edc4:	mov	r0, r2
   2edc8:	mov	r2, r5
   2edcc:	bl	2f814 <__assert_fail@plt+0x1d980>
   2edd0:	cmp	r0, #0
   2edd4:	str	r0, [fp, #-76]	; 0xffffffb4
   2edd8:	bne	2f7e8 <__assert_fail@plt+0x1d954>
   2eddc:	ldr	r0, [sl, #20]
   2ede0:	ldr	r5, [sp, #68]	; 0x44
   2ede4:	ldr	lr, [sp, #56]	; 0x38
   2ede8:	ldr	r8, [sp, #76]	; 0x4c
   2edec:	cmp	r0, #0
   2edf0:	beq	2f0ac <__assert_fail@plt+0x1d218>
   2edf4:	ldr	r3, [sp, #80]	; 0x50
   2edf8:	cmp	r0, #1
   2edfc:	str	r9, [sp, #52]	; 0x34
   2ee00:	blt	2f0a0 <__assert_fail@plt+0x1d20c>
   2ee04:	ldr	r0, [sp, #52]	; 0x34
   2ee08:	mov	r1, #0
   2ee0c:	str	sl, [sp, #60]	; 0x3c
   2ee10:	ldr	r0, [r0, #116]	; 0x74
   2ee14:	str	r0, [sp, #64]	; 0x40
   2ee18:	ldr	r0, [sl, #24]
   2ee1c:	str	r1, [sp, #72]	; 0x48
   2ee20:	ldr	r0, [r0, r1, lsl #2]
   2ee24:	ldr	r1, [sp, #64]	; 0x40
   2ee28:	add	r0, r0, r0, lsl #1
   2ee2c:	add	r1, r1, r0, lsl #3
   2ee30:	ldr	r2, [r1, #8]
   2ee34:	cmp	r2, r5
   2ee38:	bge	2f088 <__assert_fail@plt+0x1d1f4>
   2ee3c:	ldr	r1, [r1, #4]
   2ee40:	cmp	r1, r5
   2ee44:	blt	2f088 <__assert_fail@plt+0x1d1f4>
   2ee48:	ldr	r1, [sp, #64]	; 0x40
   2ee4c:	ldr	r2, [r8]
   2ee50:	ldr	r0, [r1, r0, lsl #3]!
   2ee54:	ldr	r1, [r1, #12]
   2ee58:	ldr	sl, [r2, r0, lsl #3]
   2ee5c:	ldr	r0, [lr, #4]
   2ee60:	cmp	r1, r5
   2ee64:	bne	2f010 <__assert_fail@plt+0x1d17c>
   2ee68:	cmp	r0, #1
   2ee6c:	blt	2f088 <__assert_fail@plt+0x1d1f4>
   2ee70:	ldr	r3, [lr, #8]
   2ee74:	mvn	r9, #0
   2ee78:	mvn	r1, #0
   2ee7c:	ldr	r6, [r3]
   2ee80:	add	r7, r2, r6, lsl #3
   2ee84:	ldrb	r7, [r7, #4]
   2ee88:	cmp	r7, #9
   2ee8c:	beq	2eea8 <__assert_fail@plt+0x1d014>
   2ee90:	cmp	r7, #8
   2ee94:	bne	2eeb4 <__assert_fail@plt+0x1d020>
   2ee98:	ldr	r7, [r2, r6, lsl #3]
   2ee9c:	cmp	sl, r7
   2eea0:	moveq	r1, r6
   2eea4:	b	2eeb4 <__assert_fail@plt+0x1d020>
   2eea8:	ldr	r7, [r2, r6, lsl #3]
   2eeac:	cmp	sl, r7
   2eeb0:	moveq	r9, r6
   2eeb4:	add	r3, r3, #4
   2eeb8:	subs	r0, r0, #1
   2eebc:	bne	2ee7c <__assert_fail@plt+0x1cfe8>
   2eec0:	cmp	r1, #0
   2eec4:	blt	2eee4 <__assert_fail@plt+0x1d050>
   2eec8:	ldr	r0, [sp, #76]	; 0x4c
   2eecc:	ldr	r3, [sp, #80]	; 0x50
   2eed0:	mov	r2, lr
   2eed4:	bl	2fa30 <__assert_fail@plt+0x1db9c>
   2eed8:	ldr	lr, [sp, #56]	; 0x38
   2eedc:	cmp	r0, #0
   2eee0:	bne	2f79c <__assert_fail@plt+0x1d908>
   2eee4:	cmp	r9, #0
   2eee8:	ldr	r3, [sp, #80]	; 0x50
   2eeec:	ldr	r8, [sp, #76]	; 0x4c
   2eef0:	ldrge	ip, [lr, #4]
   2eef4:	cmpge	ip, #1
   2eef8:	blt	2f088 <__assert_fail@plt+0x1d1f4>
   2eefc:	mov	sl, #0
   2ef00:	ldr	r0, [lr, #8]
   2ef04:	ldr	r1, [r0, sl, lsl #2]
   2ef08:	ldr	r0, [r8, #28]
   2ef0c:	add	lr, r1, r1, lsl #1
   2ef10:	add	r2, r0, lr, lsl #2
   2ef14:	ldr	r0, [r2, #4]
   2ef18:	cmp	r0, #1
   2ef1c:	blt	2ef78 <__assert_fail@plt+0x1d0e4>
   2ef20:	ldr	r4, [r2, #8]
   2ef24:	mov	r3, ip
   2ef28:	mov	r7, #0
   2ef2c:	subs	r0, r0, #1
   2ef30:	beq	2ef58 <__assert_fail@plt+0x1d0c4>
   2ef34:	add	r6, r7, r0
   2ef38:	mov	ip, #1
   2ef3c:	lsr	r5, r6, #1
   2ef40:	ldr	r2, [r4, r5, lsl #2]
   2ef44:	cmp	r2, r9
   2ef48:	movge	r0, r5
   2ef4c:	addlt	r7, ip, r6, lsr #1
   2ef50:	cmp	r7, r0
   2ef54:	bcc	2ef34 <__assert_fail@plt+0x1d0a0>
   2ef58:	ldr	r0, [r4, r7, lsl #2]
   2ef5c:	mov	ip, r3
   2ef60:	ldr	r5, [sp, #68]	; 0x44
   2ef64:	ldr	r3, [sp, #80]	; 0x50
   2ef68:	cmp	r0, r9
   2ef6c:	bne	2ef78 <__assert_fail@plt+0x1d0e4>
   2ef70:	ldr	lr, [sp, #56]	; 0x38
   2ef74:	b	2f000 <__assert_fail@plt+0x1d16c>
   2ef78:	ldr	r0, [r8, #24]
   2ef7c:	add	r2, r0, lr, lsl #2
   2ef80:	ldr	lr, [sp, #56]	; 0x38
   2ef84:	ldr	r0, [r2, #4]
   2ef88:	cmp	r0, #1
   2ef8c:	blt	2efd4 <__assert_fail@plt+0x1d140>
   2ef90:	ldr	r2, [r2, #8]
   2ef94:	mov	r4, #0
   2ef98:	subs	r0, r0, #1
   2ef9c:	beq	2efc4 <__assert_fail@plt+0x1d130>
   2efa0:	add	r7, r4, r0
   2efa4:	lsr	r6, r7, #1
   2efa8:	ldr	r5, [r2, r6, lsl #2]
   2efac:	cmp	r5, r9
   2efb0:	movge	r0, r6
   2efb4:	mov	r6, #1
   2efb8:	addlt	r4, r6, r7, lsr #1
   2efbc:	cmp	r4, r0
   2efc0:	bcc	2efa0 <__assert_fail@plt+0x1d10c>
   2efc4:	ldr	r0, [r2, r4, lsl #2]
   2efc8:	ldr	r5, [sp, #68]	; 0x44
   2efcc:	cmp	r0, r9
   2efd0:	beq	2f000 <__assert_fail@plt+0x1d16c>
   2efd4:	mov	r0, r8
   2efd8:	mov	r2, lr
   2efdc:	mov	r4, lr
   2efe0:	bl	2fa30 <__assert_fail@plt+0x1db9c>
   2efe4:	cmp	r0, #0
   2efe8:	bne	2f79c <__assert_fail@plt+0x1d908>
   2efec:	ldr	ip, [r4, #4]
   2eff0:	ldr	r3, [sp, #80]	; 0x50
   2eff4:	ldr	r8, [sp, #76]	; 0x4c
   2eff8:	sub	sl, sl, #1
   2effc:	mov	lr, r4
   2f000:	add	sl, sl, #1
   2f004:	cmp	sl, ip
   2f008:	blt	2ef00 <__assert_fail@plt+0x1d06c>
   2f00c:	b	2f088 <__assert_fail@plt+0x1d1f4>
   2f010:	cmp	r0, #1
   2f014:	blt	2f088 <__assert_fail@plt+0x1d1f4>
   2f018:	mov	r4, #0
   2f01c:	b	2f024 <__assert_fail@plt+0x1d190>
   2f020:	ldr	r2, [r8]
   2f024:	ldr	r1, [lr, #8]
   2f028:	ldr	r1, [r1, r4, lsl #2]
   2f02c:	add	r7, r2, r1, lsl #3
   2f030:	ldr	r7, [r7, #4]
   2f034:	and	r7, r7, #254	; 0xfe
   2f038:	orr	r7, r7, #1
   2f03c:	cmp	r7, #9
   2f040:	ldreq	r2, [r2, r1, lsl #3]
   2f044:	cmpeq	sl, r2
   2f048:	beq	2f05c <__assert_fail@plt+0x1d1c8>
   2f04c:	add	r4, r4, #1
   2f050:	cmp	r4, r0
   2f054:	blt	2f020 <__assert_fail@plt+0x1d18c>
   2f058:	b	2f088 <__assert_fail@plt+0x1d1f4>
   2f05c:	mov	r0, r8
   2f060:	mov	r2, lr
   2f064:	mov	r6, lr
   2f068:	bl	2fa30 <__assert_fail@plt+0x1db9c>
   2f06c:	cmp	r0, #0
   2f070:	bne	2f79c <__assert_fail@plt+0x1d908>
   2f074:	ldr	r0, [r6, #4]
   2f078:	ldr	r3, [sp, #80]	; 0x50
   2f07c:	ldr	r8, [sp, #76]	; 0x4c
   2f080:	mov	lr, r6
   2f084:	b	2f04c <__assert_fail@plt+0x1d1b8>
   2f088:	ldr	sl, [sp, #60]	; 0x3c
   2f08c:	ldr	r1, [sp, #72]	; 0x48
   2f090:	ldr	r0, [sl, #20]
   2f094:	add	r1, r1, #1
   2f098:	cmp	r1, r0
   2f09c:	blt	2ee18 <__assert_fail@plt+0x1cf84>
   2f0a0:	ldr	r9, [sp, #52]	; 0x34
   2f0a4:	mov	r0, #0
   2f0a8:	str	r0, [fp, #-76]	; 0xffffffb4
   2f0ac:	sub	r0, fp, #76	; 0x4c
   2f0b0:	mov	r1, r8
   2f0b4:	mov	r2, lr
   2f0b8:	bl	2cfb0 <__assert_fail@plt+0x1b11c>
   2f0bc:	ldr	r1, [sl]
   2f0c0:	ldr	r2, [sp, #48]	; 0x30
   2f0c4:	str	r0, [r1, r5, lsl #2]
   2f0c8:	ldr	r8, [fp, #-76]	; 0xffffffb4
   2f0cc:	cmp	r8, #0
   2f0d0:	bne	2f790 <__assert_fail@plt+0x1d8fc>
   2f0d4:	cmp	r2, #0
   2f0d8:	bne	2f0f0 <__assert_fail@plt+0x1d25c>
   2f0dc:	b	2f78c <__assert_fail@plt+0x1d8f8>
   2f0e0:	ldr	r1, [sl]
   2f0e4:	str	r0, [r1, r5, lsl #2]
   2f0e8:	cmp	r2, #0
   2f0ec:	beq	2f78c <__assert_fail@plt+0x1d8f8>
   2f0f0:	ldr	r0, [r9, #100]	; 0x64
   2f0f4:	ldr	r0, [r0, r5, lsl #2]
   2f0f8:	ldrb	r0, [r0, #52]	; 0x34
   2f0fc:	tst	r0, #64	; 0x40
   2f100:	beq	2f78c <__assert_fail@plt+0x1d8f8>
   2f104:	ldr	r0, [r9, #84]	; 0x54
   2f108:	str	r0, [sp, #56]	; 0x38
   2f10c:	ldr	r0, [r9, #108]	; 0x6c
   2f110:	cmp	r0, #1
   2f114:	blt	2f774 <__assert_fail@plt+0x1d8e0>
   2f118:	ldr	r1, [r9, #116]	; 0x74
   2f11c:	ldr	r8, [sp, #80]	; 0x50
   2f120:	mov	lr, #0
   2f124:	mov	r2, #1
   2f128:	mov	r3, r0
   2f12c:	add	r7, r3, lr
   2f130:	add	r7, r7, r7, lsr #31
   2f134:	asr	r6, r7, #1
   2f138:	add	r4, r6, r6, lsl #1
   2f13c:	add	r4, r1, r4, lsl #3
   2f140:	ldr	r4, [r4, #4]
   2f144:	cmp	r4, r5
   2f148:	addlt	lr, r2, r7, asr #1
   2f14c:	movge	r3, r6
   2f150:	cmp	lr, r3
   2f154:	blt	2f12c <__assert_fail@plt+0x1d298>
   2f158:	cmp	lr, r0
   2f15c:	bge	2f784 <__assert_fail@plt+0x1d8f0>
   2f160:	cmn	lr, #1
   2f164:	beq	2f784 <__assert_fail@plt+0x1d8f0>
   2f168:	ldr	r0, [r9, #116]	; 0x74
   2f16c:	add	r1, lr, lr, lsl #1
   2f170:	str	r1, [sp, #28]
   2f174:	add	r0, r0, r1, lsl #3
   2f178:	ldr	r0, [r0, #4]
   2f17c:	cmp	r0, r5
   2f180:	bne	2f784 <__assert_fail@plt+0x1d8f0>
   2f184:	mov	r1, #0
   2f188:	ldr	r7, [sp, #56]	; 0x38
   2f18c:	str	r1, [fp, #-72]	; 0xffffffb8
   2f190:	ldr	r0, [r8, #4]
   2f194:	cmp	r0, #0
   2f198:	ble	2f7a8 <__assert_fail@plt+0x1d914>
   2f19c:	sub	r0, fp, #72	; 0x48
   2f1a0:	mov	r2, #0
   2f1a4:	str	sl, [sp, #60]	; 0x3c
   2f1a8:	str	r9, [sp, #52]	; 0x34
   2f1ac:	str	lr, [sp, #48]	; 0x30
   2f1b0:	add	r0, r0, #16
   2f1b4:	str	r0, [sp, #12]
   2f1b8:	add	r0, sl, #16
   2f1bc:	str	r0, [sp, #36]	; 0x24
   2f1c0:	mov	r0, #0
   2f1c4:	str	r0, [sp, #64]	; 0x40
   2f1c8:	ldr	r0, [r8, #8]
   2f1cc:	ldr	r1, [sl, #8]
   2f1d0:	str	r4, [sp, #76]	; 0x4c
   2f1d4:	str	r2, [sp, #44]	; 0x2c
   2f1d8:	ldr	r3, [r0, r2, lsl #2]
   2f1dc:	ldr	r0, [r7]
   2f1e0:	add	r0, r0, r3, lsl #3
   2f1e4:	cmp	r3, r1
   2f1e8:	str	r3, [sp, #72]	; 0x48
   2f1ec:	ldrb	r0, [r0, #4]
   2f1f0:	bne	2f20c <__assert_fail@plt+0x1d378>
   2f1f4:	cmp	r0, #4
   2f1f8:	bne	2f750 <__assert_fail@plt+0x1d8bc>
   2f1fc:	ldr	r0, [sl, #12]
   2f200:	cmp	r0, r5
   2f204:	bne	2f214 <__assert_fail@plt+0x1d380>
   2f208:	b	2f750 <__assert_fail@plt+0x1d8bc>
   2f20c:	cmp	r0, #4
   2f210:	bne	2f750 <__assert_fail@plt+0x1d8bc>
   2f214:	ldr	r0, [r9, #116]	; 0x74
   2f218:	ldr	r1, [sp, #28]
   2f21c:	ldr	r4, [sp, #72]	; 0x48
   2f220:	mov	r9, lr
   2f224:	add	r6, r0, r1, lsl #3
   2f228:	b	2f660 <__assert_fail@plt+0x1d7cc>
   2f22c:	ldr	r5, [sp, #68]	; 0x44
   2f230:	ldr	r7, [sp, #56]	; 0x38
   2f234:	ldr	r4, [sp, #72]	; 0x48
   2f238:	mov	r0, r6
   2f23c:	b	2f73c <__assert_fail@plt+0x1d8a8>
   2f240:	ldr	r0, [sp, #64]	; 0x40
   2f244:	cmp	r0, #0
   2f248:	beq	2f28c <__assert_fail@plt+0x1d3f8>
   2f24c:	ldr	r0, [sp, #20]
   2f250:	str	r5, [fp, #-60]	; 0xffffffc4
   2f254:	str	r4, [fp, #-64]	; 0xffffffc0
   2f258:	cmp	r0, #0
   2f25c:	beq	2f390 <__assert_fail@plt+0x1d4fc>
   2f260:	ldr	r6, [sp, #40]	; 0x28
   2f264:	cmp	r6, #0
   2f268:	bne	2f648 <__assert_fail@plt+0x1d7b4>
   2f26c:	ldr	r4, [sp, #76]	; 0x4c
   2f270:	mov	r0, #1
   2f274:	mov	r1, #1
   2f278:	str	r0, [sp, #40]	; 0x28
   2f27c:	str	r9, [r4]
   2f280:	str	r1, [fp, #-52]	; 0xffffffcc
   2f284:	str	r4, [sp, #24]
   2f288:	b	2f41c <__assert_fail@plt+0x1d588>
   2f28c:	add	r0, sl, #12
   2f290:	mov	r3, #20
   2f294:	sub	r2, fp, #72	; 0x48
   2f298:	vld1.32	{d16-d17}, [r0]
   2f29c:	mov	r0, sl
   2f2a0:	add	r1, r2, #12
   2f2a4:	vld1.32	{d18-d19}, [r0], r3
   2f2a8:	vst1.32	{d16-d17}, [r1]
   2f2ac:	mov	r1, r2
   2f2b0:	vst1.64	{d18-d19}, [r1], r3
   2f2b4:	ldr	r6, [r0]
   2f2b8:	mov	r0, #0
   2f2bc:	cmp	r6, #1
   2f2c0:	str	r6, [r1]
   2f2c4:	blt	2f378 <__assert_fail@plt+0x1d4e4>
   2f2c8:	lsl	r0, r6, #2
   2f2cc:	str	r6, [fp, #-56]	; 0xffffffc8
   2f2d0:	bl	33c98 <__assert_fail@plt+0x21e04>
   2f2d4:	cmp	r0, #0
   2f2d8:	str	r0, [fp, #-48]	; 0xffffffd0
   2f2dc:	beq	2f7f8 <__assert_fail@plt+0x1d964>
   2f2e0:	mov	r8, r0
   2f2e4:	ldr	r0, [sl, #20]
   2f2e8:	ldr	r1, [sl, #24]
   2f2ec:	lsl	r2, r0, #2
   2f2f0:	mov	r0, r8
   2f2f4:	bl	11a8c <memcpy@plt>
   2f2f8:	str	r4, [fp, #-64]	; 0xffffffc0
   2f2fc:	str	r5, [fp, #-60]	; 0xffffffc4
   2f300:	mov	r4, r8
   2f304:	lsl	r0, r6, #1
   2f308:	lsl	r1, r6, #3
   2f30c:	str	r0, [sp, #20]
   2f310:	str	r0, [fp, #-56]	; 0xffffffc8
   2f314:	mov	r0, r8
   2f318:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2f31c:	cmp	r0, #0
   2f320:	beq	2f80c <__assert_fail@plt+0x1d978>
   2f324:	mov	r4, r0
   2f328:	mov	r8, r0
   2f32c:	str	r0, [fp, #-48]	; 0xffffffd0
   2f330:	str	r0, [sp, #16]
   2f334:	ldr	r0, [r4]
   2f338:	cmp	r0, r9
   2f33c:	ble	2f3d4 <__assert_fail@plt+0x1d540>
   2f340:	cmp	r6, #1
   2f344:	mov	r2, r6
   2f348:	blt	2f408 <__assert_fail@plt+0x1d574>
   2f34c:	add	r1, r4, r6, lsl #2
   2f350:	add	r0, r6, #1
   2f354:	mov	r2, r1
   2f358:	ldr	r3, [r2, #-4]!
   2f35c:	sub	r0, r0, #1
   2f360:	cmp	r0, #1
   2f364:	str	r3, [r1]
   2f368:	mov	r1, r2
   2f36c:	bgt	2f358 <__assert_fail@plt+0x1d4c4>
   2f370:	sub	r2, r0, #1
   2f374:	b	2f408 <__assert_fail@plt+0x1d574>
   2f378:	ldr	r1, [sp, #12]
   2f37c:	str	r0, [r1]
   2f380:	str	r0, [r1, #4]
   2f384:	str	r0, [r1, #8]
   2f388:	str	r5, [fp, #-60]	; 0xffffffc4
   2f38c:	str	r4, [fp, #-64]	; 0xffffffc0
   2f390:	mov	r0, #1
   2f394:	str	r0, [fp, #-52]	; 0xffffffcc
   2f398:	str	r0, [fp, #-56]	; 0xffffffc8
   2f39c:	mov	r0, #4
   2f3a0:	bl	33c98 <__assert_fail@plt+0x21e04>
   2f3a4:	cmp	r0, #0
   2f3a8:	str	r0, [fp, #-48]	; 0xffffffd0
   2f3ac:	beq	2f7f8 <__assert_fail@plt+0x1d964>
   2f3b0:	mov	r4, r0
   2f3b4:	str	r9, [r0]
   2f3b8:	mov	r0, #1
   2f3bc:	str	r0, [sp, #40]	; 0x28
   2f3c0:	mov	r0, #1
   2f3c4:	str	r4, [sp, #16]
   2f3c8:	str	r4, [sp, #24]
   2f3cc:	str	r0, [sp, #20]
   2f3d0:	b	2f41c <__assert_fail@plt+0x1d588>
   2f3d4:	add	r0, r4, r6, lsl #2
   2f3d8:	mov	r2, r6
   2f3dc:	ldr	r1, [r0, #-4]
   2f3e0:	cmp	r1, r9
   2f3e4:	ble	2f408 <__assert_fail@plt+0x1d574>
   2f3e8:	sub	r2, r6, #2
   2f3ec:	str	r1, [r0]
   2f3f0:	sub	r2, r2, #1
   2f3f4:	ldr	r1, [r0, #-8]
   2f3f8:	sub	r0, r0, #4
   2f3fc:	cmp	r1, r9
   2f400:	bgt	2f3ec <__assert_fail@plt+0x1d558>
   2f404:	add	r2, r2, #2
   2f408:	add	r6, r6, #1
   2f40c:	str	r9, [r4, r2, lsl #2]
   2f410:	str	r8, [sp, #24]
   2f414:	str	r6, [sp, #40]	; 0x28
   2f418:	str	r6, [fp, #-52]	; 0xffffffcc
   2f41c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2f420:	sub	r1, fp, #72	; 0x48
   2f424:	str	r0, [sp, #64]	; 0x40
   2f428:	ldr	r0, [r0, r5, lsl #2]
   2f42c:	str	r0, [sp, #32]
   2f430:	ldr	r0, [sp, #52]	; 0x34
   2f434:	bl	2e840 <__assert_fail@plt+0x1c9ac>
   2f438:	cmp	r0, #0
   2f43c:	bne	2f7f0 <__assert_fail@plt+0x1d95c>
   2f440:	ldr	r6, [sl, #4]
   2f444:	str	r4, [sp, #76]	; 0x4c
   2f448:	ldr	lr, [sp, #48]	; 0x30
   2f44c:	ldr	r4, [sp, #72]	; 0x48
   2f450:	ldr	r2, [sp, #64]	; 0x40
   2f454:	cmp	r6, #0
   2f458:	beq	2f4f0 <__assert_fail@plt+0x1d65c>
   2f45c:	cmp	r5, #0
   2f460:	blt	2f4ec <__assert_fail@plt+0x1d658>
   2f464:	mov	r0, #0
   2f468:	mov	sl, r0
   2f46c:	ldr	r0, [r2, r0, lsl #2]
   2f470:	ldr	r1, [r6, sl, lsl #2]
   2f474:	cmp	r1, #0
   2f478:	beq	2f4dc <__assert_fail@plt+0x1d648>
   2f47c:	cmp	r0, #0
   2f480:	beq	2f4e0 <__assert_fail@plt+0x1d64c>
   2f484:	sub	r4, fp, #44	; 0x2c
   2f488:	add	r2, r0, #4
   2f48c:	add	r1, r1, #4
   2f490:	mov	r0, r4
   2f494:	bl	2b9c4 <__assert_fail@plt+0x19b30>
   2f498:	cmp	r0, #0
   2f49c:	str	r0, [fp, #-32]	; 0xffffffe0
   2f4a0:	bne	2f7bc <__assert_fail@plt+0x1d928>
   2f4a4:	sub	r0, fp, #32
   2f4a8:	mov	r1, r7
   2f4ac:	mov	r2, r4
   2f4b0:	bl	2cfb0 <__assert_fail@plt+0x1b11c>
   2f4b4:	str	r0, [r6, sl, lsl #2]
   2f4b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2f4bc:	bl	17754 <__assert_fail@plt+0x58c0>
   2f4c0:	ldr	r8, [fp, #-32]	; 0xffffffe0
   2f4c4:	ldr	lr, [sp, #48]	; 0x30
   2f4c8:	ldr	r4, [sp, #72]	; 0x48
   2f4cc:	ldr	r2, [sp, #64]	; 0x40
   2f4d0:	cmp	r8, #0
   2f4d4:	beq	2f4e0 <__assert_fail@plt+0x1d64c>
   2f4d8:	b	2f7c0 <__assert_fail@plt+0x1d92c>
   2f4dc:	str	r0, [r6, sl, lsl #2]
   2f4e0:	add	r0, sl, #1
   2f4e4:	cmp	sl, r5
   2f4e8:	blt	2f468 <__assert_fail@plt+0x1d5d4>
   2f4ec:	ldr	sl, [sp, #60]	; 0x3c
   2f4f0:	ldr	r0, [sp, #32]
   2f4f4:	str	r0, [r2, r5, lsl #2]
   2f4f8:	ldr	r0, [sp, #40]	; 0x28
   2f4fc:	cmp	r0, #1
   2f500:	blt	2f548 <__assert_fail@plt+0x1d6b4>
   2f504:	ldr	r8, [sp, #80]	; 0x50
   2f508:	subs	r0, r0, #1
   2f50c:	mov	r4, #1
   2f510:	mov	r1, #0
   2f514:	beq	2f550 <__assert_fail@plt+0x1d6bc>
   2f518:	mov	r2, r0
   2f51c:	ldr	r6, [sp, #76]	; 0x4c
   2f520:	add	r3, r1, r2
   2f524:	lsr	r7, r3, #1
   2f528:	ldr	r6, [r6, r7, lsl #2]
   2f52c:	cmp	r6, r9
   2f530:	ldr	r6, [sp, #76]	; 0x4c
   2f534:	movge	r2, r7
   2f538:	addlt	r1, r4, r3, lsr #1
   2f53c:	cmp	r1, r2
   2f540:	bcc	2f51c <__assert_fail@plt+0x1d688>
   2f544:	b	2f554 <__assert_fail@plt+0x1d6c0>
   2f548:	ldr	r8, [sp, #80]	; 0x50
   2f54c:	b	2f634 <__assert_fail@plt+0x1d7a0>
   2f550:	ldr	r6, [sp, #76]	; 0x4c
   2f554:	ldr	r2, [r6, r1, lsl #2]
   2f558:	cmp	r2, r9
   2f55c:	mov	r2, r1
   2f560:	mvnne	r2, #0
   2f564:	cmp	r2, #0
   2f568:	blt	2f5a8 <__assert_fail@plt+0x1d714>
   2f56c:	ldr	r3, [sp, #40]	; 0x28
   2f570:	ldr	r7, [sp, #56]	; 0x38
   2f574:	ldr	r4, [sp, #72]	; 0x48
   2f578:	cmp	r3, r2
   2f57c:	ble	2f5bc <__assert_fail@plt+0x1d728>
   2f580:	cmp	r0, r2
   2f584:	str	r0, [fp, #-52]	; 0xffffffcc
   2f588:	ble	2f5c8 <__assert_fail@plt+0x1d734>
   2f58c:	ldr	r3, [sp, #40]	; 0x28
   2f590:	mvn	r2, r1
   2f594:	add	r3, r3, r2
   2f598:	cmp	r3, #4
   2f59c:	bcs	2f5d4 <__assert_fail@plt+0x1d740>
   2f5a0:	mov	r2, r1
   2f5a4:	b	2f614 <__assert_fail@plt+0x1d780>
   2f5a8:	ldr	r0, [sp, #16]
   2f5ac:	ldr	r7, [sp, #56]	; 0x38
   2f5b0:	ldr	r4, [sp, #72]	; 0x48
   2f5b4:	str	r0, [sp, #24]
   2f5b8:	b	2f634 <__assert_fail@plt+0x1d7a0>
   2f5bc:	ldr	r0, [sp, #16]
   2f5c0:	str	r0, [sp, #24]
   2f5c4:	b	2f634 <__assert_fail@plt+0x1d7a0>
   2f5c8:	ldr	r1, [sp, #16]
   2f5cc:	str	r1, [sp, #24]
   2f5d0:	b	2f630 <__assert_fail@plt+0x1d79c>
   2f5d4:	mov	r7, r6
   2f5d8:	bic	r6, r3, #3
   2f5dc:	add	r2, r1, r6
   2f5e0:	add	r1, r7, r1, lsl #2
   2f5e4:	mov	r7, r6
   2f5e8:	add	r1, r1, #4
   2f5ec:	sub	r5, r1, #4
   2f5f0:	vld1.32	{d16-d17}, [r1]!
   2f5f4:	subs	r7, r7, #4
   2f5f8:	vst1.32	{d16-d17}, [r5]
   2f5fc:	bne	2f5ec <__assert_fail@plt+0x1d758>
   2f600:	cmp	r3, r6
   2f604:	ldr	r5, [sp, #68]	; 0x44
   2f608:	ldr	r7, [sp, #56]	; 0x38
   2f60c:	ldr	r6, [sp, #76]	; 0x4c
   2f610:	beq	2f62c <__assert_fail@plt+0x1d798>
   2f614:	add	r1, r6, r2, lsl #2
   2f618:	ldr	r1, [r1, #4]
   2f61c:	str	r1, [r6, r2, lsl #2]
   2f620:	add	r2, r2, #1
   2f624:	cmp	r0, r2
   2f628:	bne	2f614 <__assert_fail@plt+0x1d780>
   2f62c:	str	r6, [sp, #24]
   2f630:	str	r0, [sp, #40]	; 0x28
   2f634:	ldr	r0, [sp, #52]	; 0x34
   2f638:	add	r1, r9, r9, lsl #1
   2f63c:	ldr	r0, [r0, #116]	; 0x74
   2f640:	add	r0, r0, r1, lsl #3
   2f644:	b	2f73c <__assert_fail@plt+0x1d8a8>
   2f648:	ldr	r0, [sp, #20]
   2f64c:	ldr	r4, [sp, #76]	; 0x4c
   2f650:	ldr	r8, [sp, #24]
   2f654:	cmp	r0, r6
   2f658:	beq	2f304 <__assert_fail@plt+0x1d470>
   2f65c:	b	2f334 <__assert_fail@plt+0x1d4a0>
   2f660:	ldr	r0, [r6]
   2f664:	cmp	r0, r4
   2f668:	bne	2f738 <__assert_fail@plt+0x1d8a4>
   2f66c:	ldr	r0, [r6, #8]
   2f670:	ldr	r1, [r6, #12]
   2f674:	subs	r0, r1, r0
   2f678:	add	ip, r0, r5
   2f67c:	beq	2f68c <__assert_fail@plt+0x1d7f8>
   2f680:	ldr	r1, [r7, #12]
   2f684:	add	r1, r1, r4, lsl #2
   2f688:	b	2f69c <__assert_fail@plt+0x1d808>
   2f68c:	ldr	r1, [r7, #20]
   2f690:	add	r2, r4, r4, lsl #1
   2f694:	add	r1, r1, r2, lsl #2
   2f698:	ldr	r1, [r1, #8]
   2f69c:	ldr	r2, [sl, #12]
   2f6a0:	cmp	ip, r2
   2f6a4:	bgt	2f738 <__assert_fail@plt+0x1d8a4>
   2f6a8:	ldr	r2, [sl]
   2f6ac:	ldr	r2, [r2, ip, lsl #2]
   2f6b0:	cmp	r2, #0
   2f6b4:	beq	2f738 <__assert_fail@plt+0x1d8a4>
   2f6b8:	ldr	r3, [r2, #8]
   2f6bc:	cmp	r3, #1
   2f6c0:	blt	2f738 <__assert_fail@plt+0x1d8a4>
   2f6c4:	ldr	r1, [r1]
   2f6c8:	ldr	r2, [r2, #12]
   2f6cc:	subs	r7, r3, #1
   2f6d0:	mov	r3, #0
   2f6d4:	beq	2f6fc <__assert_fail@plt+0x1d868>
   2f6d8:	add	r5, r3, r7
   2f6dc:	lsr	r4, r5, #1
   2f6e0:	ldr	r0, [r2, r4, lsl #2]
   2f6e4:	cmp	r0, r1
   2f6e8:	mov	r0, #1
   2f6ec:	movge	r7, r4
   2f6f0:	addlt	r3, r0, r5, lsr #1
   2f6f4:	cmp	r3, r7
   2f6f8:	bcc	2f6d8 <__assert_fail@plt+0x1d844>
   2f6fc:	ldr	r0, [r2, r3, lsl #2]
   2f700:	cmp	r0, r1
   2f704:	bne	2f22c <__assert_fail@plt+0x1d398>
   2f708:	stm	sp, {r1, ip}
   2f70c:	ldr	r4, [sp, #72]	; 0x48
   2f710:	ldr	r5, [sp, #68]	; 0x44
   2f714:	ldr	r0, [sp, #52]	; 0x34
   2f718:	ldr	r1, [sp, #36]	; 0x24
   2f71c:	mov	r2, r4
   2f720:	mov	r3, r5
   2f724:	bl	2fda8 <__assert_fail@plt+0x1df14>
   2f728:	ldr	r7, [sp, #56]	; 0x38
   2f72c:	cmp	r0, #0
   2f730:	beq	2f240 <__assert_fail@plt+0x1d3ac>
   2f734:	ldr	lr, [sp, #48]	; 0x30
   2f738:	mov	r0, r6
   2f73c:	add	r6, r0, #24
   2f740:	ldrb	r0, [r0, #20]
   2f744:	add	r9, r9, #1
   2f748:	cmp	r0, #0
   2f74c:	bne	2f660 <__assert_fail@plt+0x1d7cc>
   2f750:	ldr	r2, [sp, #44]	; 0x2c
   2f754:	ldr	r0, [r8, #4]
   2f758:	ldr	r9, [sp, #52]	; 0x34
   2f75c:	ldr	r4, [sp, #76]	; 0x4c
   2f760:	add	r2, r2, #1
   2f764:	cmp	r2, r0
   2f768:	blt	2f1c8 <__assert_fail@plt+0x1d334>
   2f76c:	mov	r8, #0
   2f770:	b	2f7c4 <__assert_fail@plt+0x1d930>
   2f774:	ldr	r8, [sp, #80]	; 0x50
   2f778:	mov	lr, #0
   2f77c:	cmp	lr, r0
   2f780:	blt	2f160 <__assert_fail@plt+0x1d2cc>
   2f784:	mov	r0, #0
   2f788:	str	r0, [fp, #-76]	; 0xffffffb4
   2f78c:	mov	r8, #0
   2f790:	mov	r0, r8
   2f794:	sub	sp, fp, #28
   2f798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f79c:	mov	r8, r0
   2f7a0:	str	r0, [fp, #-76]	; 0xffffffb4
   2f7a4:	b	2f790 <__assert_fail@plt+0x1d8fc>
   2f7a8:	str	r1, [fp, #-76]	; 0xffffffb4
   2f7ac:	b	2f78c <__assert_fail@plt+0x1d8f8>
   2f7b0:	str	r0, [fp, #-72]	; 0xffffffb8
   2f7b4:	str	r8, [fp, #-76]	; 0xffffffb4
   2f7b8:	b	2f790 <__assert_fail@plt+0x1d8fc>
   2f7bc:	mov	r8, r0
   2f7c0:	ldr	r4, [sp, #76]	; 0x4c
   2f7c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2f7c8:	cmp	r0, #0
   2f7cc:	beq	2f7d8 <__assert_fail@plt+0x1d944>
   2f7d0:	mov	r0, r4
   2f7d4:	bl	17754 <__assert_fail@plt+0x58c0>
   2f7d8:	cmp	r8, #0
   2f7dc:	str	r8, [fp, #-76]	; 0xffffffb4
   2f7e0:	moveq	r8, #0
   2f7e4:	b	2f790 <__assert_fail@plt+0x1d8fc>
   2f7e8:	mov	r8, r0
   2f7ec:	b	2f790 <__assert_fail@plt+0x1d8fc>
   2f7f0:	mov	r8, r0
   2f7f4:	b	2f7c4 <__assert_fail@plt+0x1d930>
   2f7f8:	mov	r4, #0
   2f7fc:	mov	r8, #12
   2f800:	str	r4, [fp, #-56]	; 0xffffffc8
   2f804:	str	r4, [fp, #-52]	; 0xffffffcc
   2f808:	b	2f7c4 <__assert_fail@plt+0x1d930>
   2f80c:	mov	r8, #12
   2f810:	b	2f7c4 <__assert_fail@plt+0x1d930>
   2f814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f818:	add	fp, sp, #28
   2f81c:	sub	sp, sp, #12
   2f820:	ldr	ip, [r1, #4]
   2f824:	mov	sl, r0
   2f828:	mov	r0, #0
   2f82c:	cmp	ip, #0
   2f830:	ldrne	lr, [r2, #4]
   2f834:	cmpne	lr, #0
   2f838:	bne	2f844 <__assert_fail@plt+0x1d9b0>
   2f83c:	sub	sp, fp, #28
   2f840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f844:	mov	r7, r1
   2f848:	ldr	r1, [sl, #4]
   2f84c:	ldr	r6, [sl]
   2f850:	add	r3, lr, ip
   2f854:	add	r4, r1, r3
   2f858:	cmp	r4, r6
   2f85c:	ble	2f8a0 <__assert_fail@plt+0x1da0c>
   2f860:	mov	r5, r2
   2f864:	mov	r2, sl
   2f868:	add	r4, r6, r3
   2f86c:	ldr	r0, [r2, #8]!
   2f870:	lsl	r1, r4, #2
   2f874:	str	r2, [sp, #8]
   2f878:	bl	33cc8 <__assert_fail@plt+0x21e34>
   2f87c:	cmp	r0, #0
   2f880:	beq	2fa24 <__assert_fail@plt+0x1db90>
   2f884:	str	r4, [sl]
   2f888:	str	r0, [sl, #8]
   2f88c:	mov	r2, r5
   2f890:	ldr	r1, [sl, #4]
   2f894:	ldr	lr, [r5, #4]
   2f898:	ldr	ip, [r7, #4]
   2f89c:	b	2f8a8 <__assert_fail@plt+0x1da14>
   2f8a0:	add	r0, sl, #8
   2f8a4:	str	r0, [sp, #8]
   2f8a8:	str	r2, [sp, #4]
   2f8ac:	ldr	r2, [r2, #8]
   2f8b0:	ldr	r4, [r7, #8]
   2f8b4:	add	r3, ip, r1
   2f8b8:	sub	r8, r1, #1
   2f8bc:	add	r9, r3, lr
   2f8c0:	sub	ip, ip, #1
   2f8c4:	sub	r3, lr, #1
   2f8c8:	ldr	r1, [r2, r3, lsl #2]
   2f8cc:	ldr	r6, [r4, ip, lsl #2]
   2f8d0:	cmp	r6, r1
   2f8d4:	beq	2f900 <__assert_fail@plt+0x1da6c>
   2f8d8:	blt	2f8f0 <__assert_fail@plt+0x1da5c>
   2f8dc:	sub	r5, ip, #1
   2f8e0:	cmp	ip, #0
   2f8e4:	mov	ip, r5
   2f8e8:	bgt	2f8cc <__assert_fail@plt+0x1da38>
   2f8ec:	b	2f97c <__assert_fail@plt+0x1dae8>
   2f8f0:	cmp	lr, #2
   2f8f4:	mov	lr, r3
   2f8f8:	bge	2f8c4 <__assert_fail@plt+0x1da30>
   2f8fc:	b	2f97c <__assert_fail@plt+0x1dae8>
   2f900:	mov	r0, r9
   2f904:	cmp	r8, #0
   2f908:	blt	2f954 <__assert_fail@plt+0x1dac0>
   2f90c:	ldr	r1, [sp, #8]
   2f910:	ldr	r9, [r1]
   2f914:	mov	r1, r8
   2f918:	ldr	r5, [r9, r1, lsl #2]
   2f91c:	cmp	r5, r6
   2f920:	ble	2f938 <__assert_fail@plt+0x1daa4>
   2f924:	sub	r8, r1, #1
   2f928:	cmp	r1, #0
   2f92c:	mov	r1, r8
   2f930:	bgt	2f918 <__assert_fail@plt+0x1da84>
   2f934:	b	2f954 <__assert_fail@plt+0x1dac0>
   2f938:	mov	r8, r1
   2f93c:	bne	2f954 <__assert_fail@plt+0x1dac0>
   2f940:	mov	r8, r1
   2f944:	mov	r9, r0
   2f948:	cmp	ip, #1
   2f94c:	bge	2f970 <__assert_fail@plt+0x1dadc>
   2f950:	b	2f97c <__assert_fail@plt+0x1dae8>
   2f954:	ldr	r1, [sp, #8]
   2f958:	mov	r9, r0
   2f95c:	sub	r9, r0, #1
   2f960:	ldr	r1, [r1]
   2f964:	str	r6, [r1, r9, lsl #2]
   2f968:	cmp	ip, #1
   2f96c:	blt	2f97c <__assert_fail@plt+0x1dae8>
   2f970:	cmp	lr, #2
   2f974:	mov	lr, r3
   2f978:	bge	2f8c0 <__assert_fail@plt+0x1da2c>
   2f97c:	ldr	lr, [r7, #4]
   2f980:	ldr	r7, [sp, #4]
   2f984:	ldr	r2, [sl, #4]
   2f988:	ldr	r0, [sl, #8]
   2f98c:	ldr	r4, [r7, #4]
   2f990:	subs	r1, r2, #1
   2f994:	add	r3, r1, lr
   2f998:	add	r3, r3, r4
   2f99c:	sub	r5, r3, r9
   2f9a0:	add	r6, r5, #1
   2f9a4:	cmpge	r5, #0
   2f9a8:	add	r7, r6, r2
   2f9ac:	str	r7, [sl, #4]
   2f9b0:	blt	2fa08 <__assert_fail@plt+0x1db74>
   2f9b4:	add	r2, r2, r4
   2f9b8:	add	r2, r2, lr
   2f9bc:	sub	r2, r2, r9
   2f9c0:	add	r7, r0, r2, lsl #2
   2f9c4:	ldr	r2, [r0, r1, lsl #2]
   2f9c8:	ldr	r5, [r0, r3, lsl #2]
   2f9cc:	cmp	r5, r2
   2f9d0:	bgt	2f9ec <__assert_fail@plt+0x1db58>
   2f9d4:	str	r2, [r7, r1, lsl #2]
   2f9d8:	sub	r2, r1, #1
   2f9dc:	cmp	r1, #0
   2f9e0:	mov	r1, r2
   2f9e4:	bgt	2f9c4 <__assert_fail@plt+0x1db30>
   2f9e8:	b	2fa08 <__assert_fail@plt+0x1db74>
   2f9ec:	str	r5, [r7, r1, lsl #2]
   2f9f0:	sub	r7, r7, #4
   2f9f4:	subs	r6, r6, #1
   2f9f8:	sub	r3, r3, #1
   2f9fc:	mov	r2, #0
   2fa00:	bne	2f9c4 <__assert_fail@plt+0x1db30>
   2fa04:	b	2fa0c <__assert_fail@plt+0x1db78>
   2fa08:	mov	r2, r6
   2fa0c:	add	r1, r0, r9, lsl #2
   2fa10:	lsl	r2, r2, #2
   2fa14:	bl	11a8c <memcpy@plt>
   2fa18:	mov	r0, #0
   2fa1c:	sub	sp, fp, #28
   2fa20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa24:	mov	r0, #12
   2fa28:	sub	sp, fp, #28
   2fa2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa34:	add	fp, sp, #28
   2fa38:	sub	sp, sp, #44	; 0x2c
   2fa3c:	mov	ip, r0
   2fa40:	ldr	r0, [r0, #28]
   2fa44:	mov	r8, r2
   2fa48:	add	r2, r1, r1, lsl #1
   2fa4c:	mov	r9, #0
   2fa50:	str	r3, [sp, #4]
   2fa54:	str	r9, [sp, #36]	; 0x24
   2fa58:	str	r9, [sp, #32]
   2fa5c:	str	r9, [sp, #40]	; 0x28
   2fa60:	add	r2, r0, r2, lsl #2
   2fa64:	mov	r0, r2
   2fa68:	ldr	r6, [r0, #4]!
   2fa6c:	cmp	r6, #1
   2fa70:	str	r0, [sp, #28]
   2fa74:	blt	2fd80 <__assert_fail@plt+0x1deec>
   2fa78:	add	r4, r2, #8
   2fa7c:	mov	sl, #1
   2fa80:	str	r2, [sp]
   2fa84:	str	r1, [sp, #12]
   2fa88:	str	ip, [sp, #8]
   2fa8c:	str	r4, [sp, #20]
   2fa90:	ldr	r3, [r4]
   2fa94:	ldr	r0, [r3, r9, lsl #2]
   2fa98:	cmp	r0, r1
   2fa9c:	beq	2fc4c <__assert_fail@plt+0x1ddb8>
   2faa0:	ldr	r2, [ip]
   2faa4:	add	r2, r2, r0, lsl #3
   2faa8:	ldrb	r2, [r2, #4]
   2faac:	tst	r2, #8
   2fab0:	beq	2fc4c <__assert_fail@plt+0x1ddb8>
   2fab4:	ldr	r2, [ip, #20]
   2fab8:	add	r0, r0, r0, lsl #1
   2fabc:	mvn	lr, #0
   2fac0:	str	r6, [sp, #24]
   2fac4:	str	r0, [sp, #16]
   2fac8:	add	r0, r2, r0, lsl #2
   2facc:	ldr	r7, [r0, #4]
   2fad0:	ldr	r0, [r0, #8]
   2fad4:	cmp	r7, #2
   2fad8:	ldr	r5, [r0]
   2fadc:	ldrge	lr, [r0, #4]
   2fae0:	cmp	r6, #1
   2fae4:	blt	2fb28 <__assert_fail@plt+0x1dc94>
   2fae8:	mov	r2, #0
   2faec:	subs	r7, r6, #1
   2faf0:	beq	2fb14 <__assert_fail@plt+0x1dc80>
   2faf4:	add	r4, r2, r7
   2faf8:	lsr	r6, r4, #1
   2fafc:	ldr	r0, [r3, r6, lsl #2]
   2fb00:	cmp	r0, r5
   2fb04:	movge	r7, r6
   2fb08:	addlt	r2, sl, r4, lsr #1
   2fb0c:	cmp	r2, r7
   2fb10:	bcc	2faf4 <__assert_fail@plt+0x1dc60>
   2fb14:	ldr	r0, [r3, r2, lsl #2]
   2fb18:	ldr	r4, [sp, #20]
   2fb1c:	ldr	r6, [sp, #24]
   2fb20:	cmp	r0, r5
   2fb24:	beq	2fb80 <__assert_fail@plt+0x1dcec>
   2fb28:	ldr	r0, [r8, #4]
   2fb2c:	cmp	r0, #1
   2fb30:	blt	2fb80 <__assert_fail@plt+0x1dcec>
   2fb34:	ldr	r1, [r8, #8]
   2fb38:	subs	r4, r0, #1
   2fb3c:	mov	r7, #0
   2fb40:	beq	2fb64 <__assert_fail@plt+0x1dcd0>
   2fb44:	add	r0, r7, r4
   2fb48:	lsr	r6, r0, #1
   2fb4c:	ldr	ip, [r1, r6, lsl #2]
   2fb50:	cmp	ip, r5
   2fb54:	movge	r4, r6
   2fb58:	addlt	r7, sl, r0, lsr #1
   2fb5c:	cmp	r7, r4
   2fb60:	bcc	2fb44 <__assert_fail@plt+0x1dcb0>
   2fb64:	ldr	r0, [r1, r7, lsl #2]
   2fb68:	ldr	r1, [sp, #12]
   2fb6c:	ldr	ip, [sp, #8]
   2fb70:	ldr	r4, [sp, #20]
   2fb74:	ldr	r6, [sp, #24]
   2fb78:	cmp	r0, r5
   2fb7c:	beq	2fc1c <__assert_fail@plt+0x1dd88>
   2fb80:	cmp	lr, #1
   2fb84:	blt	2fc4c <__assert_fail@plt+0x1ddb8>
   2fb88:	cmp	r6, #1
   2fb8c:	blt	2fbcc <__assert_fail@plt+0x1dd38>
   2fb90:	mov	r2, #0
   2fb94:	subs	r7, r6, #1
   2fb98:	beq	2fbbc <__assert_fail@plt+0x1dd28>
   2fb9c:	add	r0, r2, r7
   2fba0:	lsr	r6, r0, #1
   2fba4:	ldr	r5, [r3, r6, lsl #2]
   2fba8:	cmp	r5, lr
   2fbac:	movge	r7, r6
   2fbb0:	addlt	r2, sl, r0, lsr #1
   2fbb4:	cmp	r2, r7
   2fbb8:	bcc	2fb9c <__assert_fail@plt+0x1dd08>
   2fbbc:	ldr	r0, [r3, r2, lsl #2]
   2fbc0:	ldr	r6, [sp, #24]
   2fbc4:	cmp	r0, lr
   2fbc8:	beq	2fc4c <__assert_fail@plt+0x1ddb8>
   2fbcc:	ldr	r0, [r8, #4]
   2fbd0:	cmp	r0, #1
   2fbd4:	blt	2fc4c <__assert_fail@plt+0x1ddb8>
   2fbd8:	ldr	r4, [r8, #8]
   2fbdc:	subs	r7, r0, #1
   2fbe0:	mov	r3, #0
   2fbe4:	beq	2fc08 <__assert_fail@plt+0x1dd74>
   2fbe8:	add	r0, r3, r7
   2fbec:	lsr	r6, r0, #1
   2fbf0:	ldr	r5, [r4, r6, lsl #2]
   2fbf4:	cmp	r5, lr
   2fbf8:	movge	r7, r6
   2fbfc:	addlt	r3, sl, r0, lsr #1
   2fc00:	cmp	r3, r7
   2fc04:	bcc	2fbe8 <__assert_fail@plt+0x1dd54>
   2fc08:	ldr	r0, [r4, r3, lsl #2]
   2fc0c:	ldr	r4, [sp, #20]
   2fc10:	ldr	r6, [sp, #24]
   2fc14:	cmp	r0, lr
   2fc18:	bne	2fc4c <__assert_fail@plt+0x1ddb8>
   2fc1c:	ldr	r0, [ip, #28]
   2fc20:	ldr	r1, [sp, #16]
   2fc24:	add	r2, r0, r1, lsl #2
   2fc28:	ldr	r1, [sp, #4]
   2fc2c:	add	r0, sp, #32
   2fc30:	bl	2f814 <__assert_fail@plt+0x1d980>
   2fc34:	cmp	r0, #0
   2fc38:	bne	2fd98 <__assert_fail@plt+0x1df04>
   2fc3c:	ldr	r0, [sp, #28]
   2fc40:	ldr	r1, [sp, #12]
   2fc44:	ldr	ip, [sp, #8]
   2fc48:	ldr	r6, [r0]
   2fc4c:	add	r9, r9, #1
   2fc50:	cmp	r9, r6
   2fc54:	blt	2fa90 <__assert_fail@plt+0x1dbfc>
   2fc58:	ldr	r0, [sp]
   2fc5c:	cmp	r6, #0
   2fc60:	ble	2fd80 <__assert_fail@plt+0x1deec>
   2fc64:	ldr	r9, [sp, #36]	; 0x24
   2fc68:	ldr	lr, [r0, #8]
   2fc6c:	ldr	r0, [sp, #40]	; 0x28
   2fc70:	mov	ip, #0
   2fc74:	mov	r6, #1
   2fc78:	sub	r1, r9, #1
   2fc7c:	str	lr, [sp, #20]
   2fc80:	str	r9, [sp, #16]
   2fc84:	str	r1, [sp, #24]
   2fc88:	b	2fcac <__assert_fail@plt+0x1de18>
   2fc8c:	add	r3, r1, r2, lsl #2
   2fc90:	ldr	r3, [r3, #4]
   2fc94:	str	r3, [r1, r2, lsl #2]
   2fc98:	add	r2, r2, #1
   2fc9c:	ldr	r3, [r8, #4]
   2fca0:	cmp	r2, r3
   2fca4:	blt	2fc8c <__assert_fail@plt+0x1ddf8>
   2fca8:	b	2fd68 <__assert_fail@plt+0x1ded4>
   2fcac:	ldr	r5, [lr, ip, lsl #2]
   2fcb0:	cmp	r9, #1
   2fcb4:	blt	2fcf4 <__assert_fail@plt+0x1de60>
   2fcb8:	ldr	r2, [sp, #24]
   2fcbc:	mov	r1, #0
   2fcc0:	cmp	r2, #0
   2fcc4:	beq	2fce8 <__assert_fail@plt+0x1de54>
   2fcc8:	add	r3, r1, r2
   2fccc:	lsr	r4, r3, #1
   2fcd0:	ldr	r7, [r0, r4, lsl #2]
   2fcd4:	cmp	r7, r5
   2fcd8:	movge	r2, r4
   2fcdc:	addlt	r1, r6, r3, lsr #1
   2fce0:	cmp	r1, r2
   2fce4:	bcc	2fcc8 <__assert_fail@plt+0x1de34>
   2fce8:	ldr	r1, [r0, r1, lsl #2]
   2fcec:	cmp	r1, r5
   2fcf0:	beq	2fd68 <__assert_fail@plt+0x1ded4>
   2fcf4:	ldr	r3, [r8, #4]
   2fcf8:	cmp	r3, #1
   2fcfc:	blt	2fd68 <__assert_fail@plt+0x1ded4>
   2fd00:	mov	r1, r8
   2fd04:	subs	sl, r3, #1
   2fd08:	mov	r2, #0
   2fd0c:	ldr	r1, [r8, #8]
   2fd10:	beq	2fd38 <__assert_fail@plt+0x1dea4>
   2fd14:	mov	r4, sl
   2fd18:	add	r7, r2, r4
   2fd1c:	lsr	lr, r7, #1
   2fd20:	ldr	r9, [r1, lr, lsl #2]
   2fd24:	cmp	r9, r5
   2fd28:	movge	r4, lr
   2fd2c:	addlt	r2, r6, r7, lsr #1
   2fd30:	cmp	r2, r4
   2fd34:	bcc	2fd18 <__assert_fail@plt+0x1de84>
   2fd38:	ldr	r7, [r1, r2, lsl #2]
   2fd3c:	ldr	lr, [sp, #20]
   2fd40:	ldr	r9, [sp, #16]
   2fd44:	mov	r4, r2
   2fd48:	cmp	r7, r5
   2fd4c:	mvnne	r4, #0
   2fd50:	cmp	r4, #0
   2fd54:	blt	2fd68 <__assert_fail@plt+0x1ded4>
   2fd58:	cmp	r3, r4
   2fd5c:	strgt	sl, [r8, #4]
   2fd60:	cmpgt	sl, r4
   2fd64:	bgt	2fc8c <__assert_fail@plt+0x1ddf8>
   2fd68:	ldr	r1, [sp, #28]
   2fd6c:	add	ip, ip, #1
   2fd70:	ldr	r1, [r1]
   2fd74:	cmp	ip, r1
   2fd78:	blt	2fcac <__assert_fail@plt+0x1de18>
   2fd7c:	b	2fd84 <__assert_fail@plt+0x1def0>
   2fd80:	ldr	r0, [sp, #40]	; 0x28
   2fd84:	bl	17754 <__assert_fail@plt+0x58c0>
   2fd88:	mov	r5, #0
   2fd8c:	mov	r0, r5
   2fd90:	sub	sp, fp, #28
   2fd94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd98:	mov	r5, r0
   2fd9c:	ldr	r0, [sp, #40]	; 0x28
   2fda0:	bl	17754 <__assert_fail@plt+0x58c0>
   2fda4:	b	2fd8c <__assert_fail@plt+0x1def8>
   2fda8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fdac:	add	fp, sp, #28
   2fdb0:	sub	sp, sp, #28
   2fdb4:	ldr	ip, [r0, #108]	; 0x6c
   2fdb8:	str	r1, [sp, #24]
   2fdbc:	ldr	r1, [r0, #84]	; 0x54
   2fdc0:	mov	r4, r3
   2fdc4:	str	r2, [sp, #8]
   2fdc8:	str	r0, [sp, #16]
   2fdcc:	cmp	ip, #1
   2fdd0:	str	r1, [sp, #20]
   2fdd4:	blt	2fe3c <__assert_fail@plt+0x1dfa8>
   2fdd8:	ldr	r1, [r0, #116]	; 0x74
   2fddc:	mov	r9, #0
   2fde0:	mov	r2, #1
   2fde4:	mov	r3, ip
   2fde8:	add	r7, r3, r9
   2fdec:	add	r7, r7, r7, lsr #31
   2fdf0:	asr	r6, r7, #1
   2fdf4:	add	r5, r6, r6, lsl #1
   2fdf8:	add	r5, r1, r5, lsl #3
   2fdfc:	ldr	r5, [r5, #4]
   2fe00:	cmp	r5, r4
   2fe04:	addlt	r9, r2, r7, asr #1
   2fe08:	movge	r3, r6
   2fe0c:	cmp	r9, r3
   2fe10:	blt	2fde8 <__assert_fail@plt+0x1df54>
   2fe14:	cmp	r9, ip
   2fe18:	bge	2fe48 <__assert_fail@plt+0x1dfb4>
   2fe1c:	ldr	r0, [sp, #16]
   2fe20:	add	r2, r9, r9, lsl #1
   2fe24:	ldr	r1, [r0, #116]	; 0x74
   2fe28:	add	r1, r1, r2, lsl #3
   2fe2c:	ldr	r1, [r1, #4]
   2fe30:	cmp	r1, r4
   2fe34:	mvnne	r9, #0
   2fe38:	b	2fe4c <__assert_fail@plt+0x1dfb8>
   2fe3c:	mov	r9, #0
   2fe40:	cmp	r9, ip
   2fe44:	blt	2fe1c <__assert_fail@plt+0x1df88>
   2fe48:	mvn	r9, #0
   2fe4c:	ldr	r8, [fp, #12]
   2fe50:	cmp	ip, #1
   2fe54:	blt	2fe9c <__assert_fail@plt+0x1e008>
   2fe58:	ldr	r0, [sp, #16]
   2fe5c:	mov	r6, #0
   2fe60:	mov	r2, #1
   2fe64:	mov	r3, ip
   2fe68:	ldr	r1, [r0, #116]	; 0x74
   2fe6c:	add	r7, r3, r6
   2fe70:	add	r7, r7, r7, lsr #31
   2fe74:	asr	r5, r7, #1
   2fe78:	add	r0, r5, r5, lsl #1
   2fe7c:	add	r0, r1, r0, lsl #3
   2fe80:	ldr	r0, [r0, #4]
   2fe84:	cmp	r0, r8
   2fe88:	addlt	r6, r2, r7, asr #1
   2fe8c:	movge	r3, r5
   2fe90:	cmp	r6, r3
   2fe94:	blt	2fe6c <__assert_fail@plt+0x1dfd8>
   2fe98:	b	2fea0 <__assert_fail@plt+0x1e00c>
   2fe9c:	mov	r6, #0
   2fea0:	cmp	r6, ip
   2fea4:	ldr	ip, [sp, #16]
   2fea8:	bge	2fec8 <__assert_fail@plt+0x1e034>
   2feac:	ldr	r0, [ip, #116]	; 0x74
   2feb0:	add	r1, r6, r6, lsl #1
   2feb4:	add	r0, r0, r1, lsl #3
   2feb8:	ldr	r0, [r0, #4]
   2febc:	cmp	r0, r8
   2fec0:	mvnne	r6, #0
   2fec4:	b	2fecc <__assert_fail@plt+0x1e038>
   2fec8:	mvn	r6, #0
   2fecc:	ldr	r0, [sp, #24]
   2fed0:	ldr	r0, [r0, #4]
   2fed4:	cmp	r0, #1
   2fed8:	blt	30058 <__assert_fail@plt+0x1e1c4>
   2fedc:	mov	sl, #0
   2fee0:	str	r4, [sp, #12]
   2fee4:	ldr	r0, [sp, #24]
   2fee8:	ldr	r3, [ip, #116]	; 0x74
   2feec:	ldr	r5, [sp, #20]
   2fef0:	ldr	r0, [r0, #8]
   2fef4:	ldr	r5, [r5]
   2fef8:	ldr	r2, [r0, sl, lsl #2]
   2fefc:	mov	r0, r3
   2ff00:	add	r1, r2, r2, lsl #1
   2ff04:	ldr	r7, [r0, r1, lsl #3]!
   2ff08:	ldr	r0, [r0, #8]
   2ff0c:	ldr	r5, [r5, r7, lsl #3]
   2ff10:	mvn	r7, #0
   2ff14:	cmp	r0, r4
   2ff18:	ble	2ff24 <__assert_fail@plt+0x1e090>
   2ff1c:	mvn	r8, #0
   2ff20:	b	2ffb0 <__assert_fail@plt+0x1e11c>
   2ff24:	add	r1, r3, r1, lsl #3
   2ff28:	mov	r8, #1
   2ff2c:	ldr	r1, [r1, #12]
   2ff30:	cmp	r1, r4
   2ff34:	blt	2ffb0 <__assert_fail@plt+0x1e11c>
   2ff38:	sub	r1, r1, r4
   2ff3c:	mov	lr, r5
   2ff40:	cmp	r0, r4
   2ff44:	mov	r4, #1
   2ff48:	clz	r1, r1
   2ff4c:	lsr	r5, r1, #5
   2ff50:	lsl	r1, r5, #1
   2ff54:	orreq	r1, r4, r5, lsl #1
   2ff58:	cmp	r1, #0
   2ff5c:	beq	2ffa4 <__assert_fail@plt+0x1e110>
   2ff60:	ldr	r3, [sp, #8]
   2ff64:	mov	r0, ip
   2ff68:	mov	r2, lr
   2ff6c:	str	r9, [sp]
   2ff70:	mov	r5, lr
   2ff74:	bl	30064 <__assert_fail@plt+0x1e1d0>
   2ff78:	mov	r8, r0
   2ff7c:	ldr	r0, [sp, #24]
   2ff80:	ldr	ip, [sp, #16]
   2ff84:	ldr	r4, [sp, #12]
   2ff88:	ldr	r0, [r0, #8]
   2ff8c:	ldr	r3, [ip, #116]	; 0x74
   2ff90:	ldr	r2, [r0, sl, lsl #2]
   2ff94:	add	r0, r2, r2, lsl #1
   2ff98:	add	r0, r3, r0, lsl #3
   2ff9c:	ldr	r0, [r0, #8]
   2ffa0:	b	2ffb0 <__assert_fail@plt+0x1e11c>
   2ffa4:	ldr	r4, [sp, #12]
   2ffa8:	mov	r8, #0
   2ffac:	mov	r5, lr
   2ffb0:	ldr	r1, [fp, #12]
   2ffb4:	cmp	r0, r1
   2ffb8:	bgt	30020 <__assert_fail@plt+0x1e18c>
   2ffbc:	add	r1, r2, r2, lsl #1
   2ffc0:	ldr	r2, [fp, #12]
   2ffc4:	mov	r7, #1
   2ffc8:	add	r1, r3, r1, lsl #3
   2ffcc:	ldr	r1, [r1, #12]
   2ffd0:	cmp	r1, r2
   2ffd4:	blt	30020 <__assert_fail@plt+0x1e18c>
   2ffd8:	ldr	r2, [fp, #12]
   2ffdc:	sub	r1, r1, r2
   2ffe0:	mov	r3, r2
   2ffe4:	clz	r1, r1
   2ffe8:	cmp	r0, r3
   2ffec:	mov	r0, #1
   2fff0:	lsr	r2, r1, #5
   2fff4:	lsl	r1, r2, #1
   2fff8:	orreq	r1, r0, r2, lsl #1
   2fffc:	cmp	r1, #0
   30000:	beq	30040 <__assert_fail@plt+0x1e1ac>
   30004:	ldr	r3, [fp, #8]
   30008:	mov	r0, ip
   3000c:	mov	r2, r5
   30010:	str	r6, [sp]
   30014:	bl	30064 <__assert_fail@plt+0x1e1d0>
   30018:	ldr	ip, [sp, #16]
   3001c:	mov	r7, r0
   30020:	cmp	r7, r8
   30024:	bne	3004c <__assert_fail@plt+0x1e1b8>
   30028:	ldr	r0, [sp, #24]
   3002c:	add	sl, sl, #1
   30030:	ldr	r0, [r0, #4]
   30034:	cmp	sl, r0
   30038:	blt	2fee4 <__assert_fail@plt+0x1e050>
   3003c:	b	30058 <__assert_fail@plt+0x1e1c4>
   30040:	mov	r7, #0
   30044:	cmp	r7, r8
   30048:	beq	30028 <__assert_fail@plt+0x1e194>
   3004c:	mov	r0, #1
   30050:	sub	sp, fp, #28
   30054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30058:	mov	r0, #0
   3005c:	sub	sp, fp, #28
   30060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30068:	add	fp, sp, #28
   3006c:	sub	sp, sp, #36	; 0x24
   30070:	ldr	r4, [r0, #84]	; 0x54
   30074:	mov	r7, r0
   30078:	mov	r5, r1
   3007c:	add	r1, r3, r3, lsl #1
   30080:	str	r3, [sp, #32]
   30084:	ldr	r0, [r4, #24]
   30088:	add	r1, r0, r1, lsl #2
   3008c:	mov	lr, r1
   30090:	ldr	r0, [lr, #4]!
   30094:	cmp	r0, #1
   30098:	blt	30234 <__assert_fail@plt+0x1e3a0>
   3009c:	mov	ip, #1
   300a0:	mov	r6, r2
   300a4:	and	r3, r5, #2
   300a8:	mov	sl, #0
   300ac:	mvn	r2, ip, lsl r2
   300b0:	cmp	r6, #31
   300b4:	str	r3, [sp, #16]
   300b8:	str	r2, [sp, #24]
   300bc:	lsl	r2, ip, r6
   300c0:	and	ip, r5, #1
   300c4:	str	r2, [sp, #28]
   300c8:	mov	r2, #0
   300cc:	str	ip, [sp, #12]
   300d0:	movwgt	r2, #1
   300d4:	orr	r2, r2, r3, lsr #1
   300d8:	add	r3, r1, #8
   300dc:	str	r2, [sp, #20]
   300e0:	stmib	sp, {r3, lr}
   300e4:	ldr	r1, [r3]
   300e8:	ldr	r9, [r1, sl, lsl #2]
   300ec:	ldr	r1, [r4]
   300f0:	add	r2, r1, r9, lsl #3
   300f4:	ldrb	r2, [r2, #4]
   300f8:	cmp	r2, #9
   300fc:	beq	301f8 <__assert_fail@plt+0x1e364>
   30100:	cmp	r2, #8
   30104:	beq	30214 <__assert_fail@plt+0x1e380>
   30108:	cmp	r2, #4
   3010c:	bne	30228 <__assert_fail@plt+0x1e394>
   30110:	ldr	r1, [fp, #8]
   30114:	cmn	r1, #1
   30118:	beq	30228 <__assert_fail@plt+0x1e394>
   3011c:	ldr	r1, [fp, #8]
   30120:	ldr	r0, [r7, #116]	; 0x74
   30124:	add	r1, r1, r1, lsl #1
   30128:	add	r0, r0, r1, lsl #3
   3012c:	add	r8, r0, #16
   30130:	ldr	r0, [r8, #-16]
   30134:	cmp	r0, r9
   30138:	bne	301d4 <__assert_fail@plt+0x1e340>
   3013c:	cmp	r6, #31
   30140:	bgt	30154 <__assert_fail@plt+0x1e2c0>
   30144:	ldr	r0, [r8]
   30148:	ldr	r1, [sp, #28]
   3014c:	tst	r0, r1
   30150:	beq	301d4 <__assert_fail@plt+0x1e340>
   30154:	ldr	r0, [r4, #20]
   30158:	add	r1, r9, r9, lsl #1
   3015c:	add	r0, r0, r1, lsl #2
   30160:	ldr	r0, [r0, #8]
   30164:	ldr	r3, [r0]
   30168:	ldr	r0, [sp, #32]
   3016c:	cmp	r3, r0
   30170:	beq	30240 <__assert_fail@plt+0x1e3ac>
   30174:	ldr	r0, [fp, #8]
   30178:	mov	r1, r5
   3017c:	mov	r2, r6
   30180:	str	r0, [sp]
   30184:	mov	r0, r7
   30188:	bl	30064 <__assert_fail@plt+0x1e1d0>
   3018c:	cmp	r0, #0
   30190:	beq	301a8 <__assert_fail@plt+0x1e314>
   30194:	cmn	r0, #1
   30198:	beq	30254 <__assert_fail@plt+0x1e3c0>
   3019c:	cmp	r6, #31
   301a0:	ble	301c4 <__assert_fail@plt+0x1e330>
   301a4:	b	301d4 <__assert_fail@plt+0x1e340>
   301a8:	ldr	r0, [sp, #20]
   301ac:	cmp	r0, #0
   301b0:	beq	301c4 <__assert_fail@plt+0x1e330>
   301b4:	ldr	r0, [sp, #16]
   301b8:	cmp	r0, #0
   301bc:	beq	301d4 <__assert_fail@plt+0x1e340>
   301c0:	b	30250 <__assert_fail@plt+0x1e3bc>
   301c4:	ldr	r0, [r8]
   301c8:	ldr	r1, [sp, #24]
   301cc:	and	r0, r0, r1
   301d0:	str	r0, [r8]
   301d4:	ldrb	r0, [r8, #4]
   301d8:	add	r8, r8, #24
   301dc:	cmp	r0, #0
   301e0:	bne	30130 <__assert_fail@plt+0x1e29c>
   301e4:	ldr	lr, [sp, #8]
   301e8:	ldr	ip, [sp, #12]
   301ec:	ldr	r3, [sp, #4]
   301f0:	ldr	r0, [lr]
   301f4:	b	30228 <__assert_fail@plt+0x1e394>
   301f8:	ldr	r2, [sp, #16]
   301fc:	cmp	r2, #0
   30200:	beq	30228 <__assert_fail@plt+0x1e394>
   30204:	ldr	r1, [r1, r9, lsl #3]
   30208:	cmp	r1, r6
   3020c:	bne	30228 <__assert_fail@plt+0x1e394>
   30210:	b	30250 <__assert_fail@plt+0x1e3bc>
   30214:	cmp	ip, #0
   30218:	beq	30228 <__assert_fail@plt+0x1e394>
   3021c:	ldr	r1, [r1, r9, lsl #3]
   30220:	cmp	r1, r6
   30224:	beq	3025c <__assert_fail@plt+0x1e3c8>
   30228:	add	sl, sl, #1
   3022c:	cmp	sl, r0
   30230:	blt	300e4 <__assert_fail@plt+0x1e250>
   30234:	ubfx	r0, r5, #1, #1
   30238:	sub	sp, fp, #28
   3023c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30240:	ldr	r0, [sp, #12]
   30244:	rsb	r0, r0, #0
   30248:	sub	sp, fp, #28
   3024c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30250:	mov	r0, #0
   30254:	sub	sp, fp, #28
   30258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3025c:	mvn	r0, #0
   30260:	sub	sp, fp, #28
   30264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30268:	push	{r4, r5, fp, lr}
   3026c:	add	fp, sp, #8
   30270:	mov	r4, r1
   30274:	mov	r1, #0
   30278:	mov	r5, r0
   3027c:	mov	r2, r4
   30280:	bl	11d14 <memchr@plt>
   30284:	rsb	r1, r5, #1
   30288:	cmp	r0, #0
   3028c:	addne	r4, r1, r0
   30290:	mov	r0, r4
   30294:	pop	{r4, r5, fp, pc}
   30298:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3029c:	add	fp, sp, #24
   302a0:	mov	r4, r0
   302a4:	cmp	r0, #0
   302a8:	beq	302cc <__assert_fail@plt+0x1e438>
   302ac:	mov	r0, r4
   302b0:	bl	11c78 <strlen@plt>
   302b4:	add	r5, r0, #1
   302b8:	cmp	r5, #58	; 0x3a
   302bc:	bls	302d0 <__assert_fail@plt+0x1e43c>
   302c0:	add	r0, r0, #10
   302c4:	bic	r0, r0, #3
   302c8:	b	302d4 <__assert_fail@plt+0x1e440>
   302cc:	mov	r5, #0
   302d0:	mov	r0, #64	; 0x40
   302d4:	bl	33c98 <__assert_fail@plt+0x21e04>
   302d8:	mov	r6, r0
   302dc:	cmp	r0, #0
   302e0:	beq	3031c <__assert_fail@plt+0x1e488>
   302e4:	cmp	r4, #0
   302e8:	mov	r0, r4
   302ec:	mov	r8, #0
   302f0:	mov	r7, r6
   302f4:	movwne	r0, #1
   302f8:	str	r8, [r6]
   302fc:	strb	r0, [r6, #4]
   30300:	strb	r8, [r7, #5]!
   30304:	beq	3031c <__assert_fail@plt+0x1e488>
   30308:	mov	r0, r7
   3030c:	mov	r1, r4
   30310:	mov	r2, r5
   30314:	bl	11a8c <memcpy@plt>
   30318:	strb	r8, [r7, r5]
   3031c:	mov	r0, r6
   30320:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30324:	push	{r4, sl, fp, lr}
   30328:	add	fp, sp, #8
   3032c:	cmp	r0, #2
   30330:	popcc	{r4, sl, fp, pc}
   30334:	ldr	r4, [r0]
   30338:	bl	17754 <__assert_fail@plt+0x58c0>
   3033c:	cmp	r4, #0
   30340:	mov	r0, r4
   30344:	bne	30334 <__assert_fail@plt+0x1e4a0>
   30348:	pop	{r4, sl, fp, pc}
   3034c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30350:	add	fp, sp, #28
   30354:	sub	sp, sp, #4
   30358:	mov	sl, r2
   3035c:	mov	r7, r1
   30360:	cmp	r0, #0
   30364:	beq	30434 <__assert_fail@plt+0x1e5a0>
   30368:	mov	r6, r0
   3036c:	bl	30470 <__assert_fail@plt+0x1e5dc>
   30370:	cmp	r0, #0
   30374:	moveq	r0, #0
   30378:	subeq	sp, fp, #28
   3037c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30380:	mov	r4, r0
   30384:	mov	r0, r7
   30388:	mov	r1, sl
   3038c:	bl	11af8 <localtime_r@plt>
   30390:	mov	r7, #1
   30394:	cmp	r0, #0
   30398:	mov	r9, #1
   3039c:	beq	303b0 <__assert_fail@plt+0x1e51c>
   303a0:	mov	r0, r6
   303a4:	mov	r1, sl
   303a8:	bl	305bc <__assert_fail@plt+0x1e728>
   303ac:	eor	r9, r0, #1
   303b0:	cmp	r4, #1
   303b4:	beq	30418 <__assert_fail@plt+0x1e584>
   303b8:	bl	11ca8 <__errno_location@plt>
   303bc:	mov	r6, r0
   303c0:	ldr	r8, [r0]
   303c4:	ldrb	r0, [r4, #4]
   303c8:	cmp	r0, #0
   303cc:	beq	30448 <__assert_fail@plt+0x1e5b4>
   303d0:	movw	r0, #25101	; 0x620d
   303d4:	add	r1, r4, #5
   303d8:	mov	r2, #1
   303dc:	movt	r0, #3
   303e0:	bl	11c90 <setenv@plt>
   303e4:	cmp	r0, #0
   303e8:	beq	3045c <__assert_fail@plt+0x1e5c8>
   303ec:	ldr	r8, [r6]
   303f0:	mov	r7, #0
   303f4:	cmp	r4, #2
   303f8:	bcc	30414 <__assert_fail@plt+0x1e580>
   303fc:	ldr	r5, [r4]
   30400:	mov	r0, r4
   30404:	bl	17754 <__assert_fail@plt+0x58c0>
   30408:	cmp	r5, #0
   3040c:	mov	r4, r5
   30410:	bne	303fc <__assert_fail@plt+0x1e568>
   30414:	str	r8, [r6]
   30418:	cmp	r7, #0
   3041c:	moveq	sl, r7
   30420:	cmp	r9, #0
   30424:	movwne	sl, #0
   30428:	mov	r0, sl
   3042c:	sub	sp, fp, #28
   30430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30434:	mov	r0, r7
   30438:	mov	r1, sl
   3043c:	sub	sp, fp, #28
   30440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30444:	b	119f0 <gmtime_r@plt>
   30448:	movw	r0, #25101	; 0x620d
   3044c:	movt	r0, #3
   30450:	bl	11e34 <unsetenv@plt>
   30454:	cmp	r0, #0
   30458:	bne	303ec <__assert_fail@plt+0x1e558>
   3045c:	bl	11b40 <tzset@plt>
   30460:	mov	r7, #1
   30464:	cmp	r4, #2
   30468:	bcs	303fc <__assert_fail@plt+0x1e568>
   3046c:	b	30414 <__assert_fail@plt+0x1e580>
   30470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30474:	add	fp, sp, #28
   30478:	sub	sp, sp, #4
   3047c:	mov	r4, r0
   30480:	movw	r0, #25101	; 0x620d
   30484:	movt	r0, #3
   30488:	bl	11bdc <getenv@plt>
   3048c:	mov	r6, r0
   30490:	ldrb	r0, [r4, #4]
   30494:	cmp	r6, #0
   30498:	beq	304dc <__assert_fail@plt+0x1e648>
   3049c:	cmp	r0, #0
   304a0:	beq	304b8 <__assert_fail@plt+0x1e624>
   304a4:	add	r0, r4, #5
   304a8:	mov	r1, r6
   304ac:	bl	11a14 <strcmp@plt>
   304b0:	cmp	r0, #0
   304b4:	beq	30590 <__assert_fail@plt+0x1e6fc>
   304b8:	mov	r0, r6
   304bc:	bl	11c78 <strlen@plt>
   304c0:	add	r8, r0, #1
   304c4:	mov	r9, #1
   304c8:	cmp	r8, #58	; 0x3a
   304cc:	bls	304ec <__assert_fail@plt+0x1e658>
   304d0:	add	r0, r0, #10
   304d4:	bic	r0, r0, #3
   304d8:	b	304f0 <__assert_fail@plt+0x1e65c>
   304dc:	mov	r9, #0
   304e0:	cmp	r0, #0
   304e4:	mov	r8, #0
   304e8:	beq	30590 <__assert_fail@plt+0x1e6fc>
   304ec:	mov	r0, #64	; 0x40
   304f0:	bl	33c98 <__assert_fail@plt+0x21e04>
   304f4:	cmp	r0, #0
   304f8:	beq	30588 <__assert_fail@plt+0x1e6f4>
   304fc:	mov	sl, #0
   30500:	mov	r7, r0
   30504:	strb	r9, [r0, #4]
   30508:	mov	r5, r0
   3050c:	cmp	r9, #0
   30510:	str	sl, [r0]
   30514:	strb	sl, [r7, #5]!
   30518:	beq	30530 <__assert_fail@plt+0x1e69c>
   3051c:	mov	r0, r7
   30520:	mov	r1, r6
   30524:	mov	r2, r8
   30528:	bl	11a8c <memcpy@plt>
   3052c:	strb	sl, [r7, r8]
   30530:	ldrb	r0, [r4, #4]
   30534:	cmp	r0, #0
   30538:	beq	30598 <__assert_fail@plt+0x1e704>
   3053c:	movw	r0, #25101	; 0x620d
   30540:	add	r1, r4, #5
   30544:	mov	r2, #1
   30548:	movt	r0, #3
   3054c:	bl	11c90 <setenv@plt>
   30550:	cmp	r0, #0
   30554:	beq	305ac <__assert_fail@plt+0x1e718>
   30558:	bl	11ca8 <__errno_location@plt>
   3055c:	ldr	r6, [r0]
   30560:	mov	r4, r0
   30564:	cmp	r5, #2
   30568:	bcc	30584 <__assert_fail@plt+0x1e6f0>
   3056c:	ldr	r7, [r5]
   30570:	mov	r0, r5
   30574:	bl	17754 <__assert_fail@plt+0x58c0>
   30578:	cmp	r7, #0
   3057c:	mov	r5, r7
   30580:	bne	3056c <__assert_fail@plt+0x1e6d8>
   30584:	str	r6, [r4]
   30588:	mov	r5, #0
   3058c:	b	305b0 <__assert_fail@plt+0x1e71c>
   30590:	mov	r5, #1
   30594:	b	305b0 <__assert_fail@plt+0x1e71c>
   30598:	movw	r0, #25101	; 0x620d
   3059c:	movt	r0, #3
   305a0:	bl	11e34 <unsetenv@plt>
   305a4:	cmp	r0, #0
   305a8:	bne	30558 <__assert_fail@plt+0x1e6c4>
   305ac:	bl	11b40 <tzset@plt>
   305b0:	mov	r0, r5
   305b4:	sub	sp, fp, #28
   305b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   305bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   305c0:	add	fp, sp, #28
   305c4:	sub	sp, sp, #4
   305c8:	ldr	r7, [r1, #40]	; 0x28
   305cc:	mov	r8, #1
   305d0:	cmp	r7, #0
   305d4:	beq	30678 <__assert_fail@plt+0x1e7e4>
   305d8:	mov	r5, r1
   305dc:	mov	r6, r0
   305e0:	cmp	r7, r1
   305e4:	bcc	305f4 <__assert_fail@plt+0x1e760>
   305e8:	add	r0, r5, #44	; 0x2c
   305ec:	cmp	r7, r0
   305f0:	bcc	30678 <__assert_fail@plt+0x1e7e4>
   305f4:	ldrb	r0, [r7]
   305f8:	cmp	r0, #0
   305fc:	beq	3066c <__assert_fail@plt+0x1e7d8>
   30600:	add	r4, r6, #5
   30604:	b	30618 <__assert_fail@plt+0x1e784>
   30608:	ldr	r0, [r6]
   3060c:	cmp	r0, #0
   30610:	addne	r4, r0, #5
   30614:	movne	r6, r0
   30618:	mov	r0, r4
   3061c:	mov	r1, r7
   30620:	bl	11a14 <strcmp@plt>
   30624:	cmp	r0, #0
   30628:	beq	30674 <__assert_fail@plt+0x1e7e0>
   3062c:	ldrb	r0, [r4]
   30630:	cmp	r0, #0
   30634:	bne	30650 <__assert_fail@plt+0x1e7bc>
   30638:	add	r0, r6, #5
   3063c:	cmp	r4, r0
   30640:	bne	30684 <__assert_fail@plt+0x1e7f0>
   30644:	ldrb	r0, [r6, #4]
   30648:	cmp	r0, #0
   3064c:	beq	30684 <__assert_fail@plt+0x1e7f0>
   30650:	mov	r0, r4
   30654:	bl	11c78 <strlen@plt>
   30658:	add	r4, r4, r0
   3065c:	ldrb	r0, [r4, #1]!
   30660:	cmp	r0, #0
   30664:	bne	30618 <__assert_fail@plt+0x1e784>
   30668:	b	30608 <__assert_fail@plt+0x1e774>
   3066c:	movw	r4, #24652	; 0x604c
   30670:	movt	r4, #3
   30674:	str	r4, [r5, #40]	; 0x28
   30678:	mov	r0, r8
   3067c:	sub	sp, fp, #28
   30680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30684:	add	r0, r6, #64	; 0x40
   30688:	sub	sl, r0, r4
   3068c:	mov	r0, r7
   30690:	bl	11c78 <strlen@plt>
   30694:	add	r9, r0, #1
   30698:	cmp	r9, sl
   3069c:	bge	306bc <__assert_fail@plt+0x1e828>
   306a0:	mov	r0, r4
   306a4:	mov	r1, r7
   306a8:	mov	r2, r9
   306ac:	bl	11a8c <memcpy@plt>
   306b0:	mov	r0, #0
   306b4:	strb	r0, [r4, r9]
   306b8:	b	30674 <__assert_fail@plt+0x1e7e0>
   306bc:	add	r0, r0, #10
   306c0:	cmp	r9, #59	; 0x3b
   306c4:	bic	r0, r0, #3
   306c8:	movwcc	r0, #64	; 0x40
   306cc:	bl	33c98 <__assert_fail@plt+0x21e04>
   306d0:	cmp	r0, #0
   306d4:	beq	30714 <__assert_fail@plt+0x1e880>
   306d8:	mov	sl, r0
   306dc:	mov	r0, #0
   306e0:	mov	r1, r7
   306e4:	mov	r2, r9
   306e8:	str	r0, [sl]
   306ec:	mov	r0, #1
   306f0:	add	r4, sl, #5
   306f4:	strh	r0, [sl, #4]
   306f8:	mov	r0, r4
   306fc:	bl	11a8c <memcpy@plt>
   30700:	mov	r0, #0
   30704:	strb	r0, [r4, r9]
   30708:	str	sl, [r6]
   3070c:	strb	r0, [sl, #4]
   30710:	b	30674 <__assert_fail@plt+0x1e7e0>
   30714:	mov	r8, #0
   30718:	str	r8, [r6]
   3071c:	b	30678 <__assert_fail@plt+0x1e7e4>
   30720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30724:	add	fp, sp, #28
   30728:	sub	sp, sp, #52	; 0x34
   3072c:	mov	r4, r1
   30730:	cmp	r0, #0
   30734:	beq	30840 <__assert_fail@plt+0x1e9ac>
   30738:	mov	r6, r0
   3073c:	bl	30470 <__assert_fail@plt+0x1e5dc>
   30740:	cmp	r0, #0
   30744:	beq	30838 <__assert_fail@plt+0x1e9a4>
   30748:	mov	r8, r0
   3074c:	mov	r0, #32
   30750:	mov	r1, r4
   30754:	add	r5, sp, #8
   30758:	vld1.32	{d16-d17}, [r1], r0
   3075c:	mov	r2, r5
   30760:	vst1.32	{d16-d17}, [r2], r0
   30764:	ldr	r0, [r4, #16]
   30768:	ldr	r3, [r4, #20]
   3076c:	str	r0, [sp, #24]
   30770:	mvn	r0, #0
   30774:	str	r0, [sp, #36]	; 0x24
   30778:	str	r3, [sp, #28]
   3077c:	ldr	r0, [r1]
   30780:	str	r0, [r2]
   30784:	mov	r0, r5
   30788:	bl	11a2c <mktime@plt>
   3078c:	mov	r9, r0
   30790:	ldr	r0, [sp, #36]	; 0x24
   30794:	mov	sl, #1
   30798:	mov	r1, #1
   3079c:	cmp	r0, #0
   307a0:	blt	307b4 <__assert_fail@plt+0x1e920>
   307a4:	add	r1, sp, #8
   307a8:	mov	r0, r6
   307ac:	bl	305bc <__assert_fail@plt+0x1e728>
   307b0:	eor	r1, r0, #1
   307b4:	cmp	r8, #1
   307b8:	beq	3082c <__assert_fail@plt+0x1e998>
   307bc:	str	r1, [sp, #4]
   307c0:	bl	11ca8 <__errno_location@plt>
   307c4:	mov	r6, r0
   307c8:	ldr	r7, [r0]
   307cc:	ldrb	r0, [r8, #4]
   307d0:	cmp	r0, #0
   307d4:	beq	30880 <__assert_fail@plt+0x1e9ec>
   307d8:	movw	r0, #25101	; 0x620d
   307dc:	add	r1, r8, #5
   307e0:	mov	r2, #1
   307e4:	movt	r0, #3
   307e8:	bl	11c90 <setenv@plt>
   307ec:	cmp	r0, #0
   307f0:	beq	30894 <__assert_fail@plt+0x1ea00>
   307f4:	ldr	r0, [r6]
   307f8:	mov	sl, #0
   307fc:	str	r0, [sp]
   30800:	cmp	r8, #2
   30804:	bcc	30820 <__assert_fail@plt+0x1e98c>
   30808:	ldr	r7, [r8]
   3080c:	mov	r0, r8
   30810:	bl	17754 <__assert_fail@plt+0x58c0>
   30814:	cmp	r7, #0
   30818:	mov	r8, r7
   3081c:	bne	30808 <__assert_fail@plt+0x1e974>
   30820:	ldr	r0, [sp]
   30824:	ldr	r1, [sp, #4]
   30828:	str	r0, [r6]
   3082c:	eor	r0, sl, #1
   30830:	orrs	r0, r1, r0
   30834:	beq	30850 <__assert_fail@plt+0x1e9bc>
   30838:	mvn	r9, #0
   3083c:	b	30874 <__assert_fail@plt+0x1e9e0>
   30840:	mov	r0, r4
   30844:	sub	sp, fp, #28
   30848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3084c:	b	11dbc <timegm@plt>
   30850:	mov	r0, #28
   30854:	add	r1, r5, #16
   30858:	vld1.32	{d16-d17}, [r5], r0
   3085c:	vld1.64	{d18-d19}, [r1]
   30860:	add	r1, r4, #16
   30864:	vld1.32	{d20-d21}, [r5]
   30868:	vst1.32	{d16-d17}, [r4], r0
   3086c:	vst1.32	{d18-d19}, [r1]
   30870:	vst1.32	{d20-d21}, [r4]
   30874:	mov	r0, r9
   30878:	sub	sp, fp, #28
   3087c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30880:	movw	r0, #25101	; 0x620d
   30884:	movt	r0, #3
   30888:	bl	11e34 <unsetenv@plt>
   3088c:	cmp	r0, #0
   30890:	bne	307f4 <__assert_fail@plt+0x1e960>
   30894:	str	r7, [sp]
   30898:	bl	11b40 <tzset@plt>
   3089c:	mov	sl, #1
   308a0:	cmp	r8, #2
   308a4:	bcs	30808 <__assert_fail@plt+0x1e974>
   308a8:	b	30820 <__assert_fail@plt+0x1e98c>
   308ac:	push	{r4, r5, r6, r7, fp, lr}
   308b0:	add	fp, sp, #16
   308b4:	mov	r4, r0
   308b8:	cmp	r0, #2
   308bc:	movhi	r0, r4
   308c0:	pophi	{r4, r5, r6, r7, fp, pc}
   308c4:	mov	r0, r4
   308c8:	bl	34d48 <__assert_fail@plt+0x22eb4>
   308cc:	mov	r5, r0
   308d0:	bl	11ca8 <__errno_location@plt>
   308d4:	ldr	r7, [r0]
   308d8:	mov	r6, r0
   308dc:	mov	r0, r4
   308e0:	bl	11e70 <close@plt>
   308e4:	mov	r0, r5
   308e8:	str	r7, [r6]
   308ec:	pop	{r4, r5, r6, r7, fp, pc}
   308f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   308f4:	add	fp, sp, #24
   308f8:	sub	sp, sp, #32
   308fc:	ldr	r6, [fp, #12]
   30900:	ldr	r7, [fp, #8]
   30904:	mov	r4, r2
   30908:	mov	r8, r0
   3090c:	cmp	r1, #0
   30910:	beq	30938 <__assert_fail@plt+0x1eaa4>
   30914:	movw	r2, #29401	; 0x72d9
   30918:	mov	r5, r1
   3091c:	str	r3, [sp, #4]
   30920:	str	r4, [sp]
   30924:	mov	r0, r8
   30928:	mov	r1, #1
   3092c:	movt	r2, #3
   30930:	mov	r3, r5
   30934:	b	30950 <__assert_fail@plt+0x1eabc>
   30938:	movw	r2, #29413	; 0x72e5
   3093c:	str	r3, [sp]
   30940:	mov	r0, r8
   30944:	mov	r1, #1
   30948:	mov	r3, r4
   3094c:	movt	r2, #3
   30950:	bl	11d08 <__fprintf_chk@plt>
   30954:	movw	r1, #29420	; 0x72ec
   30958:	mov	r0, #0
   3095c:	mov	r2, #5
   30960:	movt	r1, #3
   30964:	bl	11ad4 <dcgettext@plt>
   30968:	movw	r2, #30138	; 0x75ba
   3096c:	mov	r3, r0
   30970:	movw	r0, #2022	; 0x7e6
   30974:	mov	r1, #1
   30978:	str	r0, [sp]
   3097c:	movt	r2, #3
   30980:	mov	r0, r8
   30984:	bl	11d08 <__fprintf_chk@plt>
   30988:	movw	r4, #24651	; 0x604b
   3098c:	mov	r1, r8
   30990:	movt	r4, #3
   30994:	mov	r0, r4
   30998:	bl	119c0 <fputs_unlocked@plt>
   3099c:	movw	r1, #29424	; 0x72f0
   309a0:	mov	r0, #0
   309a4:	mov	r2, #5
   309a8:	movt	r1, #3
   309ac:	bl	11ad4 <dcgettext@plt>
   309b0:	movw	r3, #29595	; 0x739b
   309b4:	mov	r2, r0
   309b8:	mov	r0, r8
   309bc:	mov	r1, #1
   309c0:	movt	r3, #3
   309c4:	bl	11d08 <__fprintf_chk@plt>
   309c8:	mov	r0, r4
   309cc:	mov	r1, r8
   309d0:	bl	119c0 <fputs_unlocked@plt>
   309d4:	cmp	r6, #9
   309d8:	bhi	30a14 <__assert_fail@plt+0x1eb80>
   309dc:	add	r0, pc, #0
   309e0:	ldr	pc, [r0, r6, lsl #2]
   309e4:	andeq	r0, r3, ip, lsl #20
   309e8:	andeq	r0, r3, r0, lsr #20
   309ec:	andeq	r0, r3, r0, asr sl
   309f0:	andeq	r0, r3, r8, ror sl
   309f4:	andeq	r0, r3, r0, lsr #21
   309f8:	andeq	r0, r3, r8, asr #21
   309fc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30a00:	andeq	r0, r3, r8, lsr #22
   30a04:	andeq	r0, r3, r8, asr #23
   30a08:	andeq	r0, r3, r0, ror fp
   30a0c:	sub	sp, fp, #24
   30a10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30a14:	movw	r1, #29948	; 0x74fc
   30a18:	movt	r1, #3
   30a1c:	b	30b78 <__assert_fail@plt+0x1ece4>
   30a20:	movw	r1, #29629	; 0x73bd
   30a24:	mov	r0, #0
   30a28:	mov	r2, #5
   30a2c:	movt	r1, #3
   30a30:	bl	11ad4 <dcgettext@plt>
   30a34:	ldr	r3, [r7]
   30a38:	mov	r2, r0
   30a3c:	mov	r0, r8
   30a40:	mov	r1, #1
   30a44:	sub	sp, fp, #24
   30a48:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   30a4c:	b	11d08 <__fprintf_chk@plt>
   30a50:	movw	r1, #29645	; 0x73cd
   30a54:	mov	r0, #0
   30a58:	mov	r2, #5
   30a5c:	movt	r1, #3
   30a60:	bl	11ad4 <dcgettext@plt>
   30a64:	mov	r2, r0
   30a68:	ldr	r3, [r7]
   30a6c:	ldr	r0, [r7, #4]
   30a70:	str	r0, [sp]
   30a74:	b	30b64 <__assert_fail@plt+0x1ecd0>
   30a78:	movw	r1, #29668	; 0x73e4
   30a7c:	mov	r0, #0
   30a80:	mov	r2, #5
   30a84:	movt	r1, #3
   30a88:	bl	11ad4 <dcgettext@plt>
   30a8c:	ldr	r3, [r7]
   30a90:	mov	r2, r0
   30a94:	ldmib	r7, {r0, r1}
   30a98:	stm	sp, {r0, r1}
   30a9c:	b	30b64 <__assert_fail@plt+0x1ecd0>
   30aa0:	movw	r1, #29696	; 0x7400
   30aa4:	mov	r0, #0
   30aa8:	mov	r2, #5
   30aac:	movt	r1, #3
   30ab0:	bl	11ad4 <dcgettext@plt>
   30ab4:	ldr	r3, [r7]
   30ab8:	mov	r2, r0
   30abc:	ldmib	r7, {r0, r1, r7}
   30ac0:	stm	sp, {r0, r1, r7}
   30ac4:	b	30b64 <__assert_fail@plt+0x1ecd0>
   30ac8:	movw	r1, #29728	; 0x7420
   30acc:	mov	r0, #0
   30ad0:	mov	r2, #5
   30ad4:	movt	r1, #3
   30ad8:	bl	11ad4 <dcgettext@plt>
   30adc:	ldr	r3, [r7]
   30ae0:	mov	r2, r0
   30ae4:	ldmib	r7, {r0, r1, r6, r7}
   30ae8:	stm	sp, {r0, r1, r6, r7}
   30aec:	b	30b64 <__assert_fail@plt+0x1ecd0>
   30af0:	movw	r1, #29764	; 0x7444
   30af4:	mov	r0, #0
   30af8:	mov	r2, #5
   30afc:	movt	r1, #3
   30b00:	bl	11ad4 <dcgettext@plt>
   30b04:	ldr	r3, [r7]
   30b08:	mov	r2, r0
   30b0c:	ldmib	r7, {r0, r1, r6}
   30b10:	ldr	r5, [r7, #16]
   30b14:	ldr	r7, [r7, #20]
   30b18:	stm	sp, {r0, r1, r6}
   30b1c:	str	r5, [sp, #12]
   30b20:	str	r7, [sp, #16]
   30b24:	b	30b64 <__assert_fail@plt+0x1ecd0>
   30b28:	movw	r1, #29804	; 0x746c
   30b2c:	mov	r0, #0
   30b30:	mov	r2, #5
   30b34:	movt	r1, #3
   30b38:	bl	11ad4 <dcgettext@plt>
   30b3c:	ldr	r3, [r7]
   30b40:	mov	r2, r0
   30b44:	ldmib	r7, {r0, r1, r6}
   30b48:	ldr	r5, [r7, #16]
   30b4c:	ldr	r4, [r7, #20]
   30b50:	ldr	r7, [r7, #24]
   30b54:	stm	sp, {r0, r1, r6}
   30b58:	str	r5, [sp, #12]
   30b5c:	str	r4, [sp, #16]
   30b60:	str	r7, [sp, #20]
   30b64:	mov	r0, r8
   30b68:	mov	r1, #1
   30b6c:	b	30c18 <__assert_fail@plt+0x1ed84>
   30b70:	movw	r1, #29896	; 0x74c8
   30b74:	movt	r1, #3
   30b78:	mov	r0, #0
   30b7c:	mov	r2, #5
   30b80:	bl	11ad4 <dcgettext@plt>
   30b84:	mov	ip, r0
   30b88:	ldr	r3, [r7]
   30b8c:	ldr	r0, [r7, #4]
   30b90:	ldr	r1, [r7, #8]
   30b94:	ldr	r6, [r7, #12]
   30b98:	ldr	r5, [r7, #16]
   30b9c:	ldr	r4, [r7, #20]
   30ba0:	ldr	r2, [r7, #24]
   30ba4:	ldr	lr, [r7, #28]
   30ba8:	ldr	r7, [r7, #32]
   30bac:	stm	sp, {r0, r1, r6}
   30bb0:	str	r5, [sp, #12]
   30bb4:	str	r4, [sp, #16]
   30bb8:	str	r2, [sp, #20]
   30bbc:	str	lr, [sp, #24]
   30bc0:	str	r7, [sp, #28]
   30bc4:	b	30c0c <__assert_fail@plt+0x1ed78>
   30bc8:	movw	r1, #29848	; 0x7498
   30bcc:	mov	r0, #0
   30bd0:	mov	r2, #5
   30bd4:	movt	r1, #3
   30bd8:	bl	11ad4 <dcgettext@plt>
   30bdc:	mov	ip, r0
   30be0:	ldr	r3, [r7]
   30be4:	ldmib	r7, {r0, r1, r6}
   30be8:	ldr	r5, [r7, #16]
   30bec:	ldr	r4, [r7, #20]
   30bf0:	ldr	r2, [r7, #24]
   30bf4:	ldr	r7, [r7, #28]
   30bf8:	stm	sp, {r0, r1, r6}
   30bfc:	str	r5, [sp, #12]
   30c00:	str	r4, [sp, #16]
   30c04:	str	r2, [sp, #20]
   30c08:	str	r7, [sp, #24]
   30c0c:	mov	r0, r8
   30c10:	mov	r1, #1
   30c14:	mov	r2, ip
   30c18:	bl	11d08 <__fprintf_chk@plt>
   30c1c:	sub	sp, fp, #24
   30c20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30c24:	push	{r4, sl, fp, lr}
   30c28:	add	fp, sp, #8
   30c2c:	sub	sp, sp, #8
   30c30:	ldr	ip, [fp, #8]
   30c34:	mov	lr, #0
   30c38:	ldr	r4, [ip, lr, lsl #2]
   30c3c:	add	lr, lr, #1
   30c40:	cmp	r4, #0
   30c44:	bne	30c38 <__assert_fail@plt+0x1eda4>
   30c48:	sub	r4, lr, #1
   30c4c:	str	ip, [sp]
   30c50:	str	r4, [sp, #4]
   30c54:	bl	308f0 <__assert_fail@plt+0x1ea5c>
   30c58:	sub	sp, fp, #8
   30c5c:	pop	{r4, sl, fp, pc}
   30c60:	push	{fp, lr}
   30c64:	mov	fp, sp
   30c68:	sub	sp, sp, #48	; 0x30
   30c6c:	ldr	ip, [fp, #8]
   30c70:	ldr	lr, [ip]
   30c74:	cmp	lr, #0
   30c78:	str	lr, [sp, #8]
   30c7c:	beq	30d18 <__assert_fail@plt+0x1ee84>
   30c80:	ldr	lr, [ip, #4]
   30c84:	cmp	lr, #0
   30c88:	str	lr, [sp, #12]
   30c8c:	beq	30d20 <__assert_fail@plt+0x1ee8c>
   30c90:	ldr	lr, [ip, #8]
   30c94:	cmp	lr, #0
   30c98:	str	lr, [sp, #16]
   30c9c:	beq	30d28 <__assert_fail@plt+0x1ee94>
   30ca0:	ldr	lr, [ip, #12]
   30ca4:	cmp	lr, #0
   30ca8:	str	lr, [sp, #20]
   30cac:	beq	30d30 <__assert_fail@plt+0x1ee9c>
   30cb0:	ldr	lr, [ip, #16]
   30cb4:	cmp	lr, #0
   30cb8:	str	lr, [sp, #24]
   30cbc:	beq	30d38 <__assert_fail@plt+0x1eea4>
   30cc0:	ldr	lr, [ip, #20]
   30cc4:	cmp	lr, #0
   30cc8:	str	lr, [sp, #28]
   30ccc:	beq	30d40 <__assert_fail@plt+0x1eeac>
   30cd0:	ldr	lr, [ip, #24]
   30cd4:	cmp	lr, #0
   30cd8:	str	lr, [sp, #32]
   30cdc:	beq	30d48 <__assert_fail@plt+0x1eeb4>
   30ce0:	ldr	lr, [ip, #28]
   30ce4:	cmp	lr, #0
   30ce8:	str	lr, [sp, #36]	; 0x24
   30cec:	beq	30d50 <__assert_fail@plt+0x1eebc>
   30cf0:	ldr	lr, [ip, #32]
   30cf4:	cmp	lr, #0
   30cf8:	str	lr, [sp, #40]	; 0x28
   30cfc:	beq	30d58 <__assert_fail@plt+0x1eec4>
   30d00:	ldr	lr, [ip, #36]	; 0x24
   30d04:	mov	ip, #10
   30d08:	cmp	lr, #0
   30d0c:	str	lr, [sp, #44]	; 0x2c
   30d10:	movweq	ip, #9
   30d14:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d18:	mov	ip, #0
   30d1c:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d20:	mov	ip, #1
   30d24:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d28:	mov	ip, #2
   30d2c:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d30:	mov	ip, #3
   30d34:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d38:	mov	ip, #4
   30d3c:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d40:	mov	ip, #5
   30d44:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d48:	mov	ip, #6
   30d4c:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d50:	mov	ip, #7
   30d54:	b	30d5c <__assert_fail@plt+0x1eec8>
   30d58:	mov	ip, #8
   30d5c:	add	lr, sp, #8
   30d60:	str	ip, [sp, #4]
   30d64:	str	lr, [sp]
   30d68:	bl	308f0 <__assert_fail@plt+0x1ea5c>
   30d6c:	mov	sp, fp
   30d70:	pop	{fp, pc}
   30d74:	push	{fp, lr}
   30d78:	mov	fp, sp
   30d7c:	sub	sp, sp, #56	; 0x38
   30d80:	add	ip, fp, #8
   30d84:	str	ip, [sp, #12]
   30d88:	ldr	lr, [fp, #8]
   30d8c:	cmp	lr, #0
   30d90:	str	lr, [sp, #16]
   30d94:	beq	30e30 <__assert_fail@plt+0x1ef9c>
   30d98:	ldr	lr, [ip, #4]
   30d9c:	cmp	lr, #0
   30da0:	str	lr, [sp, #20]
   30da4:	beq	30e38 <__assert_fail@plt+0x1efa4>
   30da8:	ldr	lr, [ip, #8]
   30dac:	cmp	lr, #0
   30db0:	str	lr, [sp, #24]
   30db4:	beq	30e40 <__assert_fail@plt+0x1efac>
   30db8:	ldr	lr, [ip, #12]
   30dbc:	cmp	lr, #0
   30dc0:	str	lr, [sp, #28]
   30dc4:	beq	30e48 <__assert_fail@plt+0x1efb4>
   30dc8:	ldr	lr, [ip, #16]
   30dcc:	cmp	lr, #0
   30dd0:	str	lr, [sp, #32]
   30dd4:	beq	30e50 <__assert_fail@plt+0x1efbc>
   30dd8:	ldr	lr, [ip, #20]
   30ddc:	cmp	lr, #0
   30de0:	str	lr, [sp, #36]	; 0x24
   30de4:	beq	30e58 <__assert_fail@plt+0x1efc4>
   30de8:	ldr	lr, [ip, #24]
   30dec:	cmp	lr, #0
   30df0:	str	lr, [sp, #40]	; 0x28
   30df4:	beq	30e60 <__assert_fail@plt+0x1efcc>
   30df8:	ldr	lr, [ip, #28]
   30dfc:	cmp	lr, #0
   30e00:	str	lr, [sp, #44]	; 0x2c
   30e04:	beq	30e68 <__assert_fail@plt+0x1efd4>
   30e08:	ldr	lr, [ip, #32]
   30e0c:	cmp	lr, #0
   30e10:	str	lr, [sp, #48]	; 0x30
   30e14:	beq	30e70 <__assert_fail@plt+0x1efdc>
   30e18:	ldr	lr, [ip, #36]	; 0x24
   30e1c:	mov	ip, #10
   30e20:	cmp	lr, #0
   30e24:	str	lr, [sp, #52]	; 0x34
   30e28:	movweq	ip, #9
   30e2c:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e30:	mov	ip, #0
   30e34:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e38:	mov	ip, #1
   30e3c:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e40:	mov	ip, #2
   30e44:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e48:	mov	ip, #3
   30e4c:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e50:	mov	ip, #4
   30e54:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e58:	mov	ip, #5
   30e5c:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e60:	mov	ip, #6
   30e64:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e68:	mov	ip, #7
   30e6c:	b	30e74 <__assert_fail@plt+0x1efe0>
   30e70:	mov	ip, #8
   30e74:	add	lr, sp, #16
   30e78:	str	ip, [sp, #4]
   30e7c:	str	lr, [sp]
   30e80:	bl	308f0 <__assert_fail@plt+0x1ea5c>
   30e84:	mov	sp, fp
   30e88:	pop	{fp, pc}
   30e8c:	push	{fp, lr}
   30e90:	mov	fp, sp
   30e94:	movw	r0, #33332	; 0x8234
   30e98:	movt	r0, #4
   30e9c:	ldr	r1, [r0]
   30ea0:	movw	r0, #24651	; 0x604b
   30ea4:	movt	r0, #3
   30ea8:	bl	119c0 <fputs_unlocked@plt>
   30eac:	movw	r1, #30008	; 0x7538
   30eb0:	mov	r0, #0
   30eb4:	mov	r2, #5
   30eb8:	movt	r1, #3
   30ebc:	bl	11ad4 <dcgettext@plt>
   30ec0:	movw	r2, #30028	; 0x754c
   30ec4:	mov	r1, r0
   30ec8:	mov	r0, #1
   30ecc:	movt	r2, #3
   30ed0:	bl	11cf0 <__printf_chk@plt>
   30ed4:	movw	r1, #30050	; 0x7562
   30ed8:	mov	r0, #0
   30edc:	mov	r2, #5
   30ee0:	movt	r1, #3
   30ee4:	bl	11ad4 <dcgettext@plt>
   30ee8:	movw	r2, #25104	; 0x6210
   30eec:	movw	r3, #26415	; 0x672f
   30ef0:	mov	r1, r0
   30ef4:	mov	r0, #1
   30ef8:	movt	r2, #3
   30efc:	movt	r3, #3
   30f00:	bl	11cf0 <__printf_chk@plt>
   30f04:	movw	r1, #30070	; 0x7576
   30f08:	mov	r0, #0
   30f0c:	mov	r2, #5
   30f10:	movt	r1, #3
   30f14:	bl	11ad4 <dcgettext@plt>
   30f18:	movw	r2, #30109	; 0x759d
   30f1c:	mov	r1, r0
   30f20:	mov	r0, #1
   30f24:	movt	r2, #3
   30f28:	pop	{fp, lr}
   30f2c:	b	11cf0 <__printf_chk@plt>
   30f30:	push	{r4, r5, r6, sl, fp, lr}
   30f34:	add	fp, sp, #16
   30f38:	mov	r4, r2
   30f3c:	mov	r5, r1
   30f40:	mov	r6, r0
   30f44:	bl	34d0c <__assert_fail@plt+0x22e78>
   30f48:	cmp	r0, #0
   30f4c:	popne	{r4, r5, r6, sl, fp, pc}
   30f50:	cmp	r6, #0
   30f54:	beq	30f68 <__assert_fail@plt+0x1f0d4>
   30f58:	cmp	r5, #0
   30f5c:	cmpne	r4, #0
   30f60:	bne	30f68 <__assert_fail@plt+0x1f0d4>
   30f64:	pop	{r4, r5, r6, sl, fp, pc}
   30f68:	bl	31508 <__assert_fail@plt+0x1f674>
   30f6c:	push	{r4, r5, r6, sl, fp, lr}
   30f70:	add	fp, sp, #16
   30f74:	mov	r4, r2
   30f78:	mov	r5, r1
   30f7c:	mov	r6, r0
   30f80:	bl	34d0c <__assert_fail@plt+0x22e78>
   30f84:	cmp	r0, #0
   30f88:	popne	{r4, r5, r6, sl, fp, pc}
   30f8c:	cmp	r6, #0
   30f90:	beq	30fa4 <__assert_fail@plt+0x1f110>
   30f94:	cmp	r5, #0
   30f98:	cmpne	r4, #0
   30f9c:	bne	30fa4 <__assert_fail@plt+0x1f110>
   30fa0:	pop	{r4, r5, r6, sl, fp, pc}
   30fa4:	bl	31508 <__assert_fail@plt+0x1f674>
   30fa8:	push	{fp, lr}
   30fac:	mov	fp, sp
   30fb0:	bl	33c98 <__assert_fail@plt+0x21e04>
   30fb4:	cmp	r0, #0
   30fb8:	popne	{fp, pc}
   30fbc:	bl	31508 <__assert_fail@plt+0x1f674>
   30fc0:	push	{fp, lr}
   30fc4:	mov	fp, sp
   30fc8:	bl	33c98 <__assert_fail@plt+0x21e04>
   30fcc:	cmp	r0, #0
   30fd0:	popne	{fp, pc}
   30fd4:	bl	31508 <__assert_fail@plt+0x1f674>
   30fd8:	push	{fp, lr}
   30fdc:	mov	fp, sp
   30fe0:	bl	33c98 <__assert_fail@plt+0x21e04>
   30fe4:	cmp	r0, #0
   30fe8:	popne	{fp, pc}
   30fec:	bl	31508 <__assert_fail@plt+0x1f674>
   30ff0:	push	{r4, r5, fp, lr}
   30ff4:	add	fp, sp, #8
   30ff8:	mov	r4, r1
   30ffc:	mov	r5, r0
   31000:	bl	33cc8 <__assert_fail@plt+0x21e34>
   31004:	cmp	r0, #0
   31008:	popne	{r4, r5, fp, pc}
   3100c:	cmp	r5, #0
   31010:	beq	31020 <__assert_fail@plt+0x1f18c>
   31014:	cmp	r4, #0
   31018:	bne	31020 <__assert_fail@plt+0x1f18c>
   3101c:	pop	{r4, r5, fp, pc}
   31020:	bl	31508 <__assert_fail@plt+0x1f674>
   31024:	push	{fp, lr}
   31028:	mov	fp, sp
   3102c:	cmp	r1, #0
   31030:	orreq	r1, r1, #1
   31034:	bl	33cc8 <__assert_fail@plt+0x21e34>
   31038:	cmp	r0, #0
   3103c:	popne	{fp, pc}
   31040:	bl	31508 <__assert_fail@plt+0x1f674>
   31044:	push	{fp, lr}
   31048:	mov	fp, sp
   3104c:	clz	r3, r2
   31050:	lsr	ip, r3, #5
   31054:	clz	r3, r1
   31058:	lsr	r3, r3, #5
   3105c:	orrs	r3, r3, ip
   31060:	movwne	r1, #1
   31064:	movwne	r2, #1
   31068:	bl	34d0c <__assert_fail@plt+0x22e78>
   3106c:	cmp	r0, #0
   31070:	popne	{fp, pc}
   31074:	bl	31508 <__assert_fail@plt+0x1f674>
   31078:	push	{fp, lr}
   3107c:	mov	fp, sp
   31080:	mov	r2, r1
   31084:	mov	r1, r0
   31088:	mov	r0, #0
   3108c:	bl	34d0c <__assert_fail@plt+0x22e78>
   31090:	cmp	r0, #0
   31094:	popne	{fp, pc}
   31098:	bl	31508 <__assert_fail@plt+0x1f674>
   3109c:	push	{fp, lr}
   310a0:	mov	fp, sp
   310a4:	mov	r2, r1
   310a8:	mov	r1, r0
   310ac:	clz	r0, r2
   310b0:	clz	r3, r1
   310b4:	lsr	r0, r0, #5
   310b8:	lsr	r3, r3, #5
   310bc:	orrs	r0, r3, r0
   310c0:	movwne	r1, #1
   310c4:	movwne	r2, #1
   310c8:	mov	r0, #0
   310cc:	bl	34d0c <__assert_fail@plt+0x22e78>
   310d0:	cmp	r0, #0
   310d4:	popne	{fp, pc}
   310d8:	bl	31508 <__assert_fail@plt+0x1f674>
   310dc:	push	{r4, r5, r6, sl, fp, lr}
   310e0:	add	fp, sp, #16
   310e4:	ldr	r5, [r1]
   310e8:	mov	r4, r1
   310ec:	mov	r6, r0
   310f0:	cmp	r0, #0
   310f4:	beq	3110c <__assert_fail@plt+0x1f278>
   310f8:	mov	r0, #1
   310fc:	add	r0, r0, r5, lsr #1
   31100:	adds	r5, r5, r0
   31104:	bcc	31114 <__assert_fail@plt+0x1f280>
   31108:	b	31150 <__assert_fail@plt+0x1f2bc>
   3110c:	cmp	r5, #0
   31110:	movweq	r5, #64	; 0x40
   31114:	mov	r0, r6
   31118:	mov	r1, r5
   3111c:	mov	r2, #1
   31120:	bl	34d0c <__assert_fail@plt+0x22e78>
   31124:	cmp	r5, #0
   31128:	mov	r1, r5
   3112c:	movwne	r1, #1
   31130:	cmp	r0, #0
   31134:	bne	31148 <__assert_fail@plt+0x1f2b4>
   31138:	clz	r2, r6
   3113c:	lsr	r2, r2, #5
   31140:	orrs	r1, r2, r1
   31144:	bne	31150 <__assert_fail@plt+0x1f2bc>
   31148:	str	r5, [r4]
   3114c:	pop	{r4, r5, r6, sl, fp, pc}
   31150:	bl	31508 <__assert_fail@plt+0x1f674>
   31154:	push	{r4, r5, r6, r7, fp, lr}
   31158:	add	fp, sp, #16
   3115c:	ldr	r5, [r1]
   31160:	mov	r6, r2
   31164:	mov	r4, r1
   31168:	mov	r7, r0
   3116c:	cmp	r0, #0
   31170:	beq	31188 <__assert_fail@plt+0x1f2f4>
   31174:	mov	r0, #1
   31178:	add	r0, r0, r5, lsr #1
   3117c:	adds	r5, r5, r0
   31180:	bcc	311a0 <__assert_fail@plt+0x1f30c>
   31184:	b	311d4 <__assert_fail@plt+0x1f340>
   31188:	cmp	r5, #0
   3118c:	bne	311a0 <__assert_fail@plt+0x1f30c>
   31190:	mov	r0, #64	; 0x40
   31194:	cmp	r6, #64	; 0x40
   31198:	udiv	r5, r0, r6
   3119c:	addhi	r5, r5, #1
   311a0:	mov	r0, r7
   311a4:	mov	r1, r5
   311a8:	mov	r2, r6
   311ac:	bl	34d0c <__assert_fail@plt+0x22e78>
   311b0:	cmp	r0, #0
   311b4:	bne	311cc <__assert_fail@plt+0x1f338>
   311b8:	cmp	r7, #0
   311bc:	beq	311d4 <__assert_fail@plt+0x1f340>
   311c0:	cmp	r6, #0
   311c4:	cmpne	r5, #0
   311c8:	bne	311d4 <__assert_fail@plt+0x1f340>
   311cc:	str	r5, [r4]
   311d0:	pop	{r4, r5, r6, r7, fp, pc}
   311d4:	bl	31508 <__assert_fail@plt+0x1f674>
   311d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   311dc:	add	fp, sp, #24
   311e0:	mov	r8, r1
   311e4:	ldr	r1, [r1]
   311e8:	mov	r5, r0
   311ec:	add	r0, r1, r1, asr #1
   311f0:	cmp	r0, r1
   311f4:	mvnvs	r0, #-2147483648	; 0x80000000
   311f8:	cmp	r0, r3
   311fc:	mov	r7, r0
   31200:	movgt	r7, r3
   31204:	cmn	r3, #1
   31208:	movle	r7, r0
   3120c:	ldr	r0, [fp, #8]
   31210:	cmn	r0, #1
   31214:	ble	3123c <__assert_fail@plt+0x1f3a8>
   31218:	cmp	r0, #0
   3121c:	beq	31290 <__assert_fail@plt+0x1f3fc>
   31220:	cmn	r7, #1
   31224:	ble	31264 <__assert_fail@plt+0x1f3d0>
   31228:	mvn	r4, #-2147483648	; 0x80000000
   3122c:	udiv	r6, r4, r0
   31230:	cmp	r6, r7
   31234:	bge	31290 <__assert_fail@plt+0x1f3fc>
   31238:	b	312a0 <__assert_fail@plt+0x1f40c>
   3123c:	cmn	r7, #1
   31240:	ble	31280 <__assert_fail@plt+0x1f3ec>
   31244:	cmn	r0, #1
   31248:	beq	31290 <__assert_fail@plt+0x1f3fc>
   3124c:	mov	r6, #-2147483648	; 0x80000000
   31250:	mvn	r4, #-2147483648	; 0x80000000
   31254:	sdiv	r6, r6, r0
   31258:	cmp	r6, r7
   3125c:	bge	31290 <__assert_fail@plt+0x1f3fc>
   31260:	b	312a0 <__assert_fail@plt+0x1f40c>
   31264:	beq	31290 <__assert_fail@plt+0x1f3fc>
   31268:	mov	r6, #-2147483648	; 0x80000000
   3126c:	mvn	r4, #-2147483648	; 0x80000000
   31270:	sdiv	r6, r6, r7
   31274:	cmp	r6, r0
   31278:	bge	31290 <__assert_fail@plt+0x1f3fc>
   3127c:	b	312a0 <__assert_fail@plt+0x1f40c>
   31280:	mvn	r4, #-2147483648	; 0x80000000
   31284:	sdiv	r6, r4, r0
   31288:	cmp	r7, r6
   3128c:	blt	312a0 <__assert_fail@plt+0x1f40c>
   31290:	mul	r6, r7, r0
   31294:	mov	r4, #64	; 0x40
   31298:	cmp	r6, #63	; 0x3f
   3129c:	bgt	312a8 <__assert_fail@plt+0x1f414>
   312a0:	sdiv	r7, r4, r0
   312a4:	mul	r6, r7, r0
   312a8:	cmp	r5, #0
   312ac:	moveq	r4, #0
   312b0:	streq	r4, [r8]
   312b4:	sub	r4, r7, r1
   312b8:	cmp	r4, r2
   312bc:	bge	31368 <__assert_fail@plt+0x1f4d4>
   312c0:	add	r7, r1, r2
   312c4:	mov	r6, #0
   312c8:	mov	r2, #0
   312cc:	cmp	r7, r3
   312d0:	movwgt	r6, #1
   312d4:	cmn	r3, #1
   312d8:	movwgt	r2, #1
   312dc:	cmp	r7, r1
   312e0:	bvs	3139c <__assert_fail@plt+0x1f508>
   312e4:	ands	r1, r2, r6
   312e8:	bne	3139c <__assert_fail@plt+0x1f508>
   312ec:	cmn	r0, #1
   312f0:	ble	31318 <__assert_fail@plt+0x1f484>
   312f4:	cmp	r0, #0
   312f8:	beq	31364 <__assert_fail@plt+0x1f4d0>
   312fc:	cmn	r7, #1
   31300:	ble	3133c <__assert_fail@plt+0x1f4a8>
   31304:	mvn	r1, #-2147483648	; 0x80000000
   31308:	udiv	r1, r1, r0
   3130c:	cmp	r1, r7
   31310:	bge	31364 <__assert_fail@plt+0x1f4d0>
   31314:	b	3139c <__assert_fail@plt+0x1f508>
   31318:	cmn	r7, #1
   3131c:	ble	31354 <__assert_fail@plt+0x1f4c0>
   31320:	cmn	r0, #1
   31324:	beq	31364 <__assert_fail@plt+0x1f4d0>
   31328:	mov	r1, #-2147483648	; 0x80000000
   3132c:	sdiv	r1, r1, r0
   31330:	cmp	r1, r7
   31334:	bge	31364 <__assert_fail@plt+0x1f4d0>
   31338:	b	3139c <__assert_fail@plt+0x1f508>
   3133c:	beq	31364 <__assert_fail@plt+0x1f4d0>
   31340:	mov	r1, #-2147483648	; 0x80000000
   31344:	sdiv	r1, r1, r7
   31348:	cmp	r1, r0
   3134c:	bge	31364 <__assert_fail@plt+0x1f4d0>
   31350:	b	3139c <__assert_fail@plt+0x1f508>
   31354:	mvn	r1, #-2147483648	; 0x80000000
   31358:	sdiv	r1, r1, r0
   3135c:	cmp	r7, r1
   31360:	blt	3139c <__assert_fail@plt+0x1f508>
   31364:	mul	r6, r7, r0
   31368:	mov	r0, r5
   3136c:	mov	r1, r6
   31370:	bl	33cc8 <__assert_fail@plt+0x21e34>
   31374:	cmp	r6, #0
   31378:	movwne	r6, #1
   3137c:	cmp	r0, #0
   31380:	bne	31394 <__assert_fail@plt+0x1f500>
   31384:	clz	r1, r5
   31388:	lsr	r1, r1, #5
   3138c:	orrs	r1, r1, r6
   31390:	bne	3139c <__assert_fail@plt+0x1f508>
   31394:	str	r7, [r8]
   31398:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3139c:	bl	31508 <__assert_fail@plt+0x1f674>
   313a0:	push	{fp, lr}
   313a4:	mov	fp, sp
   313a8:	mov	r1, #1
   313ac:	bl	33c44 <__assert_fail@plt+0x21db0>
   313b0:	cmp	r0, #0
   313b4:	popne	{fp, pc}
   313b8:	bl	31508 <__assert_fail@plt+0x1f674>
   313bc:	push	{fp, lr}
   313c0:	mov	fp, sp
   313c4:	bl	33c44 <__assert_fail@plt+0x21db0>
   313c8:	cmp	r0, #0
   313cc:	popne	{fp, pc}
   313d0:	bl	31508 <__assert_fail@plt+0x1f674>
   313d4:	push	{fp, lr}
   313d8:	mov	fp, sp
   313dc:	mov	r1, #1
   313e0:	bl	33c44 <__assert_fail@plt+0x21db0>
   313e4:	cmp	r0, #0
   313e8:	popne	{fp, pc}
   313ec:	bl	31508 <__assert_fail@plt+0x1f674>
   313f0:	push	{fp, lr}
   313f4:	mov	fp, sp
   313f8:	bl	33c44 <__assert_fail@plt+0x21db0>
   313fc:	cmp	r0, #0
   31400:	popne	{fp, pc}
   31404:	bl	31508 <__assert_fail@plt+0x1f674>
   31408:	push	{r4, r5, r6, sl, fp, lr}
   3140c:	add	fp, sp, #16
   31410:	mov	r5, r0
   31414:	mov	r0, r1
   31418:	mov	r4, r1
   3141c:	bl	33c98 <__assert_fail@plt+0x21e04>
   31420:	cmp	r0, #0
   31424:	beq	31440 <__assert_fail@plt+0x1f5ac>
   31428:	mov	r1, r5
   3142c:	mov	r2, r4
   31430:	mov	r6, r0
   31434:	bl	11a8c <memcpy@plt>
   31438:	mov	r0, r6
   3143c:	pop	{r4, r5, r6, sl, fp, pc}
   31440:	bl	31508 <__assert_fail@plt+0x1f674>
   31444:	push	{r4, r5, r6, sl, fp, lr}
   31448:	add	fp, sp, #16
   3144c:	mov	r5, r0
   31450:	mov	r0, r1
   31454:	mov	r4, r1
   31458:	bl	33c98 <__assert_fail@plt+0x21e04>
   3145c:	cmp	r0, #0
   31460:	beq	3147c <__assert_fail@plt+0x1f5e8>
   31464:	mov	r1, r5
   31468:	mov	r2, r4
   3146c:	mov	r6, r0
   31470:	bl	11a8c <memcpy@plt>
   31474:	mov	r0, r6
   31478:	pop	{r4, r5, r6, sl, fp, pc}
   3147c:	bl	31508 <__assert_fail@plt+0x1f674>
   31480:	push	{r4, r5, r6, sl, fp, lr}
   31484:	add	fp, sp, #16
   31488:	mov	r5, r0
   3148c:	add	r0, r1, #1
   31490:	mov	r4, r1
   31494:	bl	33c98 <__assert_fail@plt+0x21e04>
   31498:	cmp	r0, #0
   3149c:	beq	314c4 <__assert_fail@plt+0x1f630>
   314a0:	mov	r6, r0
   314a4:	mov	r0, #0
   314a8:	mov	r1, r5
   314ac:	mov	r2, r4
   314b0:	strb	r0, [r6, r4]
   314b4:	mov	r0, r6
   314b8:	bl	11a8c <memcpy@plt>
   314bc:	mov	r0, r6
   314c0:	pop	{r4, r5, r6, sl, fp, pc}
   314c4:	bl	31508 <__assert_fail@plt+0x1f674>
   314c8:	push	{r4, r5, r6, sl, fp, lr}
   314cc:	add	fp, sp, #16
   314d0:	mov	r4, r0
   314d4:	bl	11c78 <strlen@plt>
   314d8:	add	r5, r0, #1
   314dc:	mov	r0, r5
   314e0:	bl	33c98 <__assert_fail@plt+0x21e04>
   314e4:	cmp	r0, #0
   314e8:	beq	31504 <__assert_fail@plt+0x1f670>
   314ec:	mov	r1, r4
   314f0:	mov	r2, r5
   314f4:	mov	r6, r0
   314f8:	bl	11a8c <memcpy@plt>
   314fc:	mov	r0, r6
   31500:	pop	{r4, r5, r6, sl, fp, pc}
   31504:	bl	31508 <__assert_fail@plt+0x1f674>
   31508:	push	{fp, lr}
   3150c:	mov	fp, sp
   31510:	movw	r0, #33236	; 0x81d4
   31514:	movw	r1, #30185	; 0x75e9
   31518:	mov	r2, #5
   3151c:	movt	r0, #4
   31520:	movt	r1, #3
   31524:	ldr	r4, [r0]
   31528:	mov	r0, #0
   3152c:	bl	11ad4 <dcgettext@plt>
   31530:	movw	r2, #27878	; 0x6ce6
   31534:	mov	r3, r0
   31538:	mov	r0, r4
   3153c:	mov	r1, #0
   31540:	movt	r2, #3
   31544:	bl	11bac <error@plt>
   31548:	bl	11e58 <abort@plt>
   3154c:	push	{fp, lr}
   31550:	mov	fp, sp
   31554:	orr	r1, r1, #512	; 0x200
   31558:	bl	17a68 <__assert_fail@plt+0x5bd4>
   3155c:	cmp	r0, #0
   31560:	popne	{fp, pc}
   31564:	bl	11ca8 <__errno_location@plt>
   31568:	ldr	r0, [r0]
   3156c:	cmp	r0, #22
   31570:	bne	31594 <__assert_fail@plt+0x1f700>
   31574:	movw	r0, #30202	; 0x75fa
   31578:	movw	r1, #30218	; 0x760a
   3157c:	movw	r3, #30229	; 0x7615
   31580:	mov	r2, #41	; 0x29
   31584:	movt	r0, #3
   31588:	movt	r1, #3
   3158c:	movt	r3, #3
   31590:	bl	11e94 <__assert_fail@plt>
   31594:	bl	31508 <__assert_fail@plt+0x1f674>
   31598:	ldr	r0, [r0, #48]	; 0x30
   3159c:	and	r0, r0, #17
   315a0:	cmp	r0, #16
   315a4:	moveq	r0, #1
   315a8:	bxeq	lr
   315ac:	cmp	r0, #17
   315b0:	movne	r0, #0
   315b4:	bxne	lr
   315b8:	ldr	r0, [r1, #48]	; 0x30
   315bc:	cmp	r0, #0
   315c0:	movwne	r0, #1
   315c4:	bx	lr
   315c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   315cc:	add	fp, sp, #28
   315d0:	sub	sp, sp, #36	; 0x24
   315d4:	cmp	r2, #37	; 0x25
   315d8:	bcs	32ec0 <__assert_fail@plt+0x2102c>
   315dc:	ldr	r8, [fp, #8]
   315e0:	mov	r9, r3
   315e4:	mov	r6, r2
   315e8:	mov	r7, r1
   315ec:	mov	r4, r0
   315f0:	bl	11ca8 <__errno_location@plt>
   315f4:	add	sl, sp, #32
   315f8:	cmp	r7, #0
   315fc:	mov	r5, r0
   31600:	mov	r0, #0
   31604:	mov	r2, r6
   31608:	mov	r3, #0
   3160c:	movne	sl, r7
   31610:	str	r0, [r5]
   31614:	mov	r0, r4
   31618:	mov	r1, sl
   3161c:	bl	11de0 <__strtoll_internal@plt>
   31620:	mov	r7, r1
   31624:	ldr	r1, [sl]
   31628:	cmp	r1, r4
   3162c:	beq	3165c <__assert_fail@plt+0x1f7c8>
   31630:	mov	r6, r0
   31634:	ldr	r0, [r5]
   31638:	cmp	r0, #0
   3163c:	beq	3169c <__assert_fail@plt+0x1f808>
   31640:	mov	r5, #4
   31644:	cmp	r0, #34	; 0x22
   31648:	bne	32ad0 <__assert_fail@plt+0x20c3c>
   3164c:	mov	r5, #1
   31650:	cmp	r8, #0
   31654:	bne	316a8 <__assert_fail@plt+0x1f814>
   31658:	b	32acc <__assert_fail@plt+0x20c38>
   3165c:	mov	r5, #4
   31660:	cmp	r8, #0
   31664:	beq	32ad0 <__assert_fail@plt+0x20c3c>
   31668:	mov	r6, r1
   3166c:	ldrb	r1, [r4]
   31670:	cmp	r1, #0
   31674:	beq	32ad0 <__assert_fail@plt+0x20c3c>
   31678:	mov	r0, r8
   3167c:	bl	11c84 <strchr@plt>
   31680:	cmp	r0, #0
   31684:	beq	32ad0 <__assert_fail@plt+0x20c3c>
   31688:	mov	r1, r6
   3168c:	mov	r5, #0
   31690:	mov	r6, #1
   31694:	mov	r7, #0
   31698:	b	316a8 <__assert_fail@plt+0x1f814>
   3169c:	mov	r5, r0
   316a0:	cmp	r8, #0
   316a4:	beq	32acc <__assert_fail@plt+0x20c38>
   316a8:	ldrb	r4, [r1]
   316ac:	cmp	r4, #0
   316b0:	beq	32acc <__assert_fail@plt+0x20c38>
   316b4:	str	r1, [sp, #20]
   316b8:	mov	r0, r8
   316bc:	mov	r1, r4
   316c0:	bl	11c84 <strchr@plt>
   316c4:	cmp	r0, #0
   316c8:	beq	31954 <__assert_fail@plt+0x1fac0>
   316cc:	sub	r0, r4, #69	; 0x45
   316d0:	mov	r1, #1
   316d4:	mov	r3, #0
   316d8:	mov	r2, #1024	; 0x400
   316dc:	cmp	r0, #47	; 0x2f
   316e0:	str	r1, [sp, #16]
   316e4:	bhi	31820 <__assert_fail@plt+0x1f98c>
   316e8:	add	r1, pc, #0
   316ec:	ldr	pc, [r1, r0, lsl #2]
   316f0:			; <UNDEFINED> instruction: 0x000317b0
   316f4:	andeq	r1, r3, r0, lsr #16
   316f8:			; <UNDEFINED> instruction: 0x000317b0
   316fc:	andeq	r1, r3, r0, lsr #16
   31700:	andeq	r1, r3, r0, lsr #16
   31704:	andeq	r1, r3, r0, lsr #16
   31708:			; <UNDEFINED> instruction: 0x000317b0
   3170c:	andeq	r1, r3, r0, lsr #16
   31710:			; <UNDEFINED> instruction: 0x000317b0
   31714:	andeq	r1, r3, r0, lsr #16
   31718:	andeq	r1, r3, r0, lsr #16
   3171c:			; <UNDEFINED> instruction: 0x000317b0
   31720:	andeq	r1, r3, r0, lsr #16
   31724:	andeq	r1, r3, r0, lsr #16
   31728:	andeq	r1, r3, r0, lsr #16
   3172c:			; <UNDEFINED> instruction: 0x000317b0
   31730:	andeq	r1, r3, r0, lsr #16
   31734:	andeq	r1, r3, r0, lsr #16
   31738:	andeq	r1, r3, r0, lsr #16
   3173c:	andeq	r1, r3, r0, lsr #16
   31740:			; <UNDEFINED> instruction: 0x000317b0
   31744:			; <UNDEFINED> instruction: 0x000317b0
   31748:	andeq	r1, r3, r0, lsr #16
   3174c:	andeq	r1, r3, r0, lsr #16
   31750:	andeq	r1, r3, r0, lsr #16
   31754:	andeq	r1, r3, r0, lsr #16
   31758:	andeq	r1, r3, r0, lsr #16
   3175c:	andeq	r1, r3, r0, lsr #16
   31760:	andeq	r1, r3, r0, lsr #16
   31764:	andeq	r1, r3, r0, lsr #16
   31768:	andeq	r1, r3, r0, lsr #16
   3176c:	andeq	r1, r3, r0, lsr #16
   31770:	andeq	r1, r3, r0, lsr #16
   31774:	andeq	r1, r3, r0, lsr #16
   31778:			; <UNDEFINED> instruction: 0x000317b0
   3177c:	andeq	r1, r3, r0, lsr #16
   31780:	andeq	r1, r3, r0, lsr #16
   31784:	andeq	r1, r3, r0, lsr #16
   31788:			; <UNDEFINED> instruction: 0x000317b0
   3178c:	andeq	r1, r3, r0, lsr #16
   31790:			; <UNDEFINED> instruction: 0x000317b0
   31794:	andeq	r1, r3, r0, lsr #16
   31798:	andeq	r1, r3, r0, lsr #16
   3179c:	andeq	r1, r3, r0, lsr #16
   317a0:	andeq	r1, r3, r0, lsr #16
   317a4:	andeq	r1, r3, r0, lsr #16
   317a8:	andeq	r1, r3, r0, lsr #16
   317ac:			; <UNDEFINED> instruction: 0x000317b0
   317b0:	mov	r0, r8
   317b4:	mov	r1, #48	; 0x30
   317b8:	bl	11c84 <strchr@plt>
   317bc:	cmp	r0, #0
   317c0:	beq	317ec <__assert_fail@plt+0x1f958>
   317c4:	ldr	r1, [sp, #20]
   317c8:	ldrb	r0, [r1, #1]
   317cc:	cmp	r0, #66	; 0x42
   317d0:	cmpne	r0, #68	; 0x44
   317d4:	bne	317f4 <__assert_fail@plt+0x1f960>
   317d8:	mov	r0, #2
   317dc:	mov	r2, #1000	; 0x3e8
   317e0:	mov	r3, #0
   317e4:	str	r0, [sp, #16]
   317e8:	b	31820 <__assert_fail@plt+0x1f98c>
   317ec:	mov	r3, #0
   317f0:	b	3181c <__assert_fail@plt+0x1f988>
   317f4:	cmp	r0, #105	; 0x69
   317f8:	mov	r3, #0
   317fc:	bne	3181c <__assert_fail@plt+0x1f988>
   31800:	ldrb	r0, [r1, #2]
   31804:	mov	r1, #1
   31808:	mov	r2, #1024	; 0x400
   3180c:	cmp	r0, #66	; 0x42
   31810:	movweq	r1, #3
   31814:	str	r1, [sp, #16]
   31818:	b	31820 <__assert_fail@plt+0x1f98c>
   3181c:	mov	r2, #1024	; 0x400
   31820:	sub	r0, r4, #66	; 0x42
   31824:	cmp	r0, #53	; 0x35
   31828:	bhi	31954 <__assert_fail@plt+0x1fac0>
   3182c:	add	r1, pc, #8
   31830:	str	r3, [sp, #28]
   31834:	str	r2, [sp, #24]
   31838:	ldr	pc, [r1, r0, lsl #2]
   3183c:	andeq	r1, r3, r4, asr sl
   31840:	andeq	r1, r3, r4, asr r9
   31844:	andeq	r1, r3, r4, asr r9
   31848:	andeq	r1, r3, r8, ror #20
   3184c:	andeq	r1, r3, r4, asr r9
   31850:	andeq	r1, r3, r4, lsl r9
   31854:	andeq	r1, r3, r4, asr r9
   31858:	andeq	r1, r3, r4, asr r9
   3185c:	andeq	r1, r3, r4, asr r9
   31860:	andeq	r1, r3, ip, asr r9
   31864:	andeq	r1, r3, r4, asr r9
   31868:	andeq	r1, r3, ip, lsl #19
   3186c:	andeq	r1, r3, r4, asr r9
   31870:	andeq	r1, r3, r4, asr r9
   31874:	andeq	r1, r3, ip, lsr #21
   31878:	andeq	r1, r3, r4, asr r9
   3187c:	andeq	r1, r3, r4, asr r9
   31880:	andeq	r1, r3, r4, asr r9
   31884:	andeq	r1, r3, ip, asr #19
   31888:	andeq	r1, r3, r4, asr r9
   3188c:	andeq	r1, r3, r4, asr r9
   31890:	andeq	r1, r3, r4, asr r9
   31894:	andeq	r1, r3, r4, asr r9
   31898:	strdeq	r1, [r3], -r0
   3189c:	andeq	r1, r3, r0, lsl sl
   318a0:	andeq	r1, r3, r4, asr r9
   318a4:	andeq	r1, r3, r4, asr r9
   318a8:	andeq	r1, r3, r4, asr r9
   318ac:	andeq	r1, r3, r4, asr r9
   318b0:	andeq	r1, r3, r4, asr r9
   318b4:	andeq	r1, r3, r4, asr r9
   318b8:	andeq	r1, r3, r4, asr r9
   318bc:	andeq	r1, r3, r4, lsr fp
   318c0:	andeq	r2, r3, ip, lsr #21
   318c4:	andeq	r1, r3, r4, asr r9
   318c8:	andeq	r1, r3, r4, asr r9
   318cc:	andeq	r1, r3, r4, asr r9
   318d0:	andeq	r1, r3, r4, lsl r9
   318d4:	andeq	r1, r3, r4, asr r9
   318d8:	andeq	r1, r3, r4, asr r9
   318dc:	andeq	r1, r3, r4, asr r9
   318e0:	andeq	r1, r3, ip, asr r9
   318e4:	andeq	r1, r3, r4, asr r9
   318e8:	andeq	r1, r3, ip, lsl #19
   318ec:	andeq	r1, r3, r4, asr r9
   318f0:	andeq	r1, r3, r4, asr r9
   318f4:	andeq	r1, r3, r4, asr r9
   318f8:	andeq	r1, r3, r4, asr r9
   318fc:	andeq	r1, r3, r4, asr r9
   31900:	andeq	r1, r3, r4, asr r9
   31904:	andeq	r1, r3, ip, asr #19
   31908:	andeq	r1, r3, r4, asr r9
   3190c:	andeq	r1, r3, r4, asr r9
   31910:	andeq	r1, r3, r8, asr #22
   31914:	cmn	r7, #1
   31918:	str	r9, [sp, #12]
   3191c:	ble	31b5c <__assert_fail@plt+0x1fcc8>
   31920:	ldr	r3, [sp, #28]
   31924:	mvn	r0, #0
   31928:	mvn	r1, #-2147483648	; 0x80000000
   3192c:	mvn	r8, #0
   31930:	mvn	r9, #-2147483648	; 0x80000000
   31934:	bl	352f0 <__assert_fail@plt+0x2345c>
   31938:	ldr	r2, [sp, #24]
   3193c:	ldr	r3, [sp, #28]
   31940:	subs	r0, r0, r6
   31944:	mov	r4, #1
   31948:	sbcs	r0, r1, r7
   3194c:	bge	31b9c <__assert_fail@plt+0x1fd08>
   31950:	b	31bb4 <__assert_fail@plt+0x1fd20>
   31954:	orr	r5, r5, #2
   31958:	b	32acc <__assert_fail@plt+0x20c38>
   3195c:	cmn	r7, #1
   31960:	ble	31bf0 <__assert_fail@plt+0x1fd5c>
   31964:	ldr	r3, [sp, #28]
   31968:	mvn	r0, #0
   3196c:	mvn	r1, #-2147483648	; 0x80000000
   31970:	bl	352f0 <__assert_fail@plt+0x2345c>
   31974:	ldr	r2, [sp, #24]
   31978:	ldr	r3, [sp, #28]
   3197c:	subs	r0, r0, r6
   31980:	sbcs	r0, r1, r7
   31984:	bge	31c24 <__assert_fail@plt+0x1fd90>
   31988:	b	32334 <__assert_fail@plt+0x204a0>
   3198c:	cmn	r7, #1
   31990:	str	r9, [sp, #12]
   31994:	ble	31c38 <__assert_fail@plt+0x1fda4>
   31998:	ldr	r3, [sp, #28]
   3199c:	mvn	r0, #0
   319a0:	mvn	r1, #-2147483648	; 0x80000000
   319a4:	mvn	r8, #0
   319a8:	mvn	r9, #-2147483648	; 0x80000000
   319ac:	bl	352f0 <__assert_fail@plt+0x2345c>
   319b0:	ldr	r2, [sp, #24]
   319b4:	ldr	r3, [sp, #28]
   319b8:	subs	r0, r0, r6
   319bc:	mov	r4, #1
   319c0:	sbcs	r0, r1, r7
   319c4:	bge	31c78 <__assert_fail@plt+0x1fde4>
   319c8:	b	31c90 <__assert_fail@plt+0x1fdfc>
   319cc:	cmn	r7, #1
   319d0:	str	r9, [sp, #12]
   319d4:	ble	31cc8 <__assert_fail@plt+0x1fe34>
   319d8:	ldr	r3, [sp, #28]
   319dc:	mvn	r0, #0
   319e0:	mvn	r1, #-2147483648	; 0x80000000
   319e4:	mvn	r9, #-2147483648	; 0x80000000
   319e8:	str	r0, [sp, #8]
   319ec:	mvn	r0, #0
   319f0:	bl	352f0 <__assert_fail@plt+0x2345c>
   319f4:	ldr	r2, [sp, #24]
   319f8:	ldr	r3, [sp, #28]
   319fc:	subs	r0, r0, r6
   31a00:	mov	r4, #1
   31a04:	sbcs	r0, r1, r7
   31a08:	bge	31d0c <__assert_fail@plt+0x1fe78>
   31a0c:	b	31d28 <__assert_fail@plt+0x1fe94>
   31a10:	cmp	r7, #0
   31a14:	str	r9, [sp, #12]
   31a18:	blt	32010 <__assert_fail@plt+0x2017c>
   31a1c:	ldr	r3, [sp, #28]
   31a20:	mvn	r0, #0
   31a24:	mvn	r1, #-2147483648	; 0x80000000
   31a28:	mvn	r9, #-2147483648	; 0x80000000
   31a2c:	str	r0, [sp, #8]
   31a30:	mvn	r0, #0
   31a34:	bl	352f0 <__assert_fail@plt+0x2345c>
   31a38:	ldr	r2, [sp, #24]
   31a3c:	ldr	r3, [sp, #28]
   31a40:	subs	r0, r0, r6
   31a44:	mov	r4, #1
   31a48:	sbcs	r0, r1, r7
   31a4c:	bge	32054 <__assert_fail@plt+0x201c0>
   31a50:	b	32070 <__assert_fail@plt+0x201dc>
   31a54:	cmn	r7, #1
   31a58:	ble	320ac <__assert_fail@plt+0x20218>
   31a5c:	cmp	r7, #2097152	; 0x200000
   31a60:	blt	320dc <__assert_fail@plt+0x20248>
   31a64:	b	32334 <__assert_fail@plt+0x204a0>
   31a68:	cmp	r7, #0
   31a6c:	str	r9, [sp, #12]
   31a70:	blt	320ec <__assert_fail@plt+0x20258>
   31a74:	ldr	r3, [sp, #28]
   31a78:	mvn	r0, #0
   31a7c:	mvn	r1, #-2147483648	; 0x80000000
   31a80:	mvn	r9, #-2147483648	; 0x80000000
   31a84:	str	r0, [sp, #8]
   31a88:	mvn	r0, #0
   31a8c:	bl	352f0 <__assert_fail@plt+0x2345c>
   31a90:	ldr	r2, [sp, #24]
   31a94:	ldr	r3, [sp, #28]
   31a98:	subs	r0, r0, r6
   31a9c:	mov	r4, #1
   31aa0:	sbcs	r0, r1, r7
   31aa4:	bge	32130 <__assert_fail@plt+0x2029c>
   31aa8:	b	3214c <__assert_fail@plt+0x202b8>
   31aac:	cmp	r7, #0
   31ab0:	str	r9, [sp, #12]
   31ab4:	blt	32188 <__assert_fail@plt+0x202f4>
   31ab8:	ldr	r3, [sp, #28]
   31abc:	mvn	r0, #0
   31ac0:	mvn	r1, #-2147483648	; 0x80000000
   31ac4:	mvn	r8, #-2147483648	; 0x80000000
   31ac8:	str	r0, [sp, #8]
   31acc:	mvn	r0, #0
   31ad0:	bl	352f0 <__assert_fail@plt+0x2345c>
   31ad4:	ldr	r2, [sp, #24]
   31ad8:	ldr	r3, [sp, #28]
   31adc:	subs	r0, r0, r6
   31ae0:	mov	r4, #1
   31ae4:	sbcs	r0, r1, r7
   31ae8:	bge	321cc <__assert_fail@plt+0x20338>
   31aec:	b	321e8 <__assert_fail@plt+0x20354>
   31af0:	cmp	r7, #0
   31af4:	str	r9, [sp, #12]
   31af8:	blt	32224 <__assert_fail@plt+0x20390>
   31afc:	ldr	r3, [sp, #28]
   31b00:	mvn	r0, #0
   31b04:	mvn	r1, #-2147483648	; 0x80000000
   31b08:	mvn	r9, #-2147483648	; 0x80000000
   31b0c:	str	r0, [sp, #8]
   31b10:	mvn	r0, #0
   31b14:	bl	352f0 <__assert_fail@plt+0x2345c>
   31b18:	ldr	r2, [sp, #24]
   31b1c:	ldr	r3, [sp, #28]
   31b20:	subs	r0, r0, r6
   31b24:	mov	r4, #1
   31b28:	sbcs	r0, r1, r7
   31b2c:	bge	32268 <__assert_fail@plt+0x203d4>
   31b30:	b	32284 <__assert_fail@plt+0x203f0>
   31b34:	cmn	r7, #1
   31b38:	ble	322c4 <__assert_fail@plt+0x20430>
   31b3c:	cmp	r7, #4194304	; 0x400000
   31b40:	blt	322f4 <__assert_fail@plt+0x20460>
   31b44:	b	32334 <__assert_fail@plt+0x204a0>
   31b48:	cmn	r7, #1
   31b4c:	ble	32304 <__assert_fail@plt+0x20470>
   31b50:	cmp	r7, #1073741824	; 0x40000000
   31b54:	bge	32334 <__assert_fail@plt+0x204a0>
   31b58:	b	32354 <__assert_fail@plt+0x204c0>
   31b5c:	and	r0, r6, r7
   31b60:	cmn	r0, #1
   31b64:	beq	31b9c <__assert_fail@plt+0x1fd08>
   31b68:	mov	r0, #0
   31b6c:	mov	r1, #-2147483648	; 0x80000000
   31b70:	mov	r2, r6
   31b74:	mov	r3, r7
   31b78:	mov	r8, #0
   31b7c:	mov	r9, #-2147483648	; 0x80000000
   31b80:	bl	3521c <__assert_fail@plt+0x23388>
   31b84:	ldr	r2, [sp, #24]
   31b88:	ldr	r3, [sp, #28]
   31b8c:	mov	r4, #1
   31b90:	subs	r0, r0, r2
   31b94:	sbcs	r0, r1, r3
   31b98:	blt	31d64 <__assert_fail@plt+0x1fed0>
   31b9c:	umull	r8, r0, r6, r2
   31ba0:	mov	r4, #0
   31ba4:	mla	r0, r6, r3, r0
   31ba8:	mla	r9, r7, r2, r0
   31bac:	cmp	r9, #0
   31bb0:	blt	31d64 <__assert_fail@plt+0x1fed0>
   31bb4:	ldr	r3, [sp, #28]
   31bb8:	mvn	r0, #-2147483648	; 0x80000000
   31bbc:	mvn	r1, #-2147483648	; 0x80000000
   31bc0:	mov	r6, r4
   31bc4:	mvn	r4, #0
   31bc8:	str	r0, [sp, #8]
   31bcc:	mvn	r0, #0
   31bd0:	bl	352f0 <__assert_fail@plt+0x2345c>
   31bd4:	ldr	r2, [sp, #24]
   31bd8:	ldr	r3, [sp, #28]
   31bdc:	subs	r0, r0, r8
   31be0:	mov	r7, #1
   31be4:	sbcs	r0, r1, r9
   31be8:	bge	31da0 <__assert_fail@plt+0x1ff0c>
   31bec:	b	31dbc <__assert_fail@plt+0x1ff28>
   31bf0:	and	r0, r6, r7
   31bf4:	cmn	r0, #1
   31bf8:	beq	31c24 <__assert_fail@plt+0x1fd90>
   31bfc:	mov	r0, #0
   31c00:	mov	r1, #-2147483648	; 0x80000000
   31c04:	mov	r2, r6
   31c08:	mov	r3, r7
   31c0c:	bl	3521c <__assert_fail@plt+0x23388>
   31c10:	ldr	r2, [sp, #24]
   31c14:	ldr	r3, [sp, #28]
   31c18:	subs	r0, r0, r2
   31c1c:	sbcs	r0, r1, r3
   31c20:	blt	32334 <__assert_fail@plt+0x204a0>
   31c24:	umull	r0, r1, r6, r2
   31c28:	mla	r1, r6, r3, r1
   31c2c:	mov	r6, r0
   31c30:	mla	r7, r7, r2, r1
   31c34:	b	32aac <__assert_fail@plt+0x20c18>
   31c38:	and	r0, r6, r7
   31c3c:	cmn	r0, #1
   31c40:	beq	31c78 <__assert_fail@plt+0x1fde4>
   31c44:	mov	r0, #0
   31c48:	mov	r1, #-2147483648	; 0x80000000
   31c4c:	mov	r2, r6
   31c50:	mov	r3, r7
   31c54:	mov	r8, #0
   31c58:	mov	r9, #-2147483648	; 0x80000000
   31c5c:	bl	3521c <__assert_fail@plt+0x23388>
   31c60:	ldr	r2, [sp, #24]
   31c64:	ldr	r3, [sp, #28]
   31c68:	mov	r4, #1
   31c6c:	subs	r0, r0, r2
   31c70:	sbcs	r0, r1, r3
   31c74:	blt	31e50 <__assert_fail@plt+0x1ffbc>
   31c78:	umull	r8, r0, r6, r2
   31c7c:	mov	r4, #0
   31c80:	mla	r0, r6, r3, r0
   31c84:	mla	r9, r7, r2, r0
   31c88:	cmp	r9, #0
   31c8c:	blt	31e50 <__assert_fail@plt+0x1ffbc>
   31c90:	ldr	r3, [sp, #28]
   31c94:	mvn	r0, #0
   31c98:	mvn	r1, #-2147483648	; 0x80000000
   31c9c:	str	r4, [sp, #8]
   31ca0:	mvn	r6, #0
   31ca4:	mvn	r7, #-2147483648	; 0x80000000
   31ca8:	bl	352f0 <__assert_fail@plt+0x2345c>
   31cac:	ldr	r4, [sp, #24]
   31cb0:	ldr	r3, [sp, #28]
   31cb4:	subs	r0, r0, r8
   31cb8:	mov	r2, #1
   31cbc:	sbcs	r0, r1, r9
   31cc0:	bge	31e88 <__assert_fail@plt+0x1fff4>
   31cc4:	b	31fc0 <__assert_fail@plt+0x2012c>
   31cc8:	and	r0, r6, r7
   31ccc:	cmn	r0, #1
   31cd0:	beq	31d0c <__assert_fail@plt+0x1fe78>
   31cd4:	mov	r0, #0
   31cd8:	mov	r1, #-2147483648	; 0x80000000
   31cdc:	mov	r2, r6
   31ce0:	mov	r3, r7
   31ce4:	bl	3521c <__assert_fail@plt+0x23388>
   31ce8:	ldr	r2, [sp, #24]
   31cec:	ldr	r3, [sp, #28]
   31cf0:	mov	r4, #1
   31cf4:	mov	r9, #-2147483648	; 0x80000000
   31cf8:	subs	r0, r0, r2
   31cfc:	sbcs	r0, r1, r3
   31d00:	mov	r0, #0
   31d04:	str	r0, [sp, #8]
   31d08:	blt	31e9c <__assert_fail@plt+0x20008>
   31d0c:	umull	r1, r0, r6, r2
   31d10:	mov	r4, #0
   31d14:	mla	r0, r6, r3, r0
   31d18:	str	r1, [sp, #8]
   31d1c:	mla	r9, r7, r2, r0
   31d20:	cmp	r9, #0
   31d24:	blt	31e9c <__assert_fail@plt+0x20008>
   31d28:	ldr	r3, [sp, #28]
   31d2c:	mvn	r0, #0
   31d30:	mvn	r1, #-2147483648	; 0x80000000
   31d34:	str	r4, [sp, #4]
   31d38:	mvn	r6, #0
   31d3c:	mvn	r8, #-2147483648	; 0x80000000
   31d40:	bl	352f0 <__assert_fail@plt+0x2345c>
   31d44:	ldr	r4, [sp, #8]
   31d48:	ldr	r2, [sp, #24]
   31d4c:	ldr	r3, [sp, #28]
   31d50:	mov	r7, #1
   31d54:	subs	r0, r0, r4
   31d58:	sbcs	r0, r1, r9
   31d5c:	bge	31ed8 <__assert_fail@plt+0x20044>
   31d60:	b	31ef0 <__assert_fail@plt+0x2005c>
   31d64:	mov	r0, #-2147483648	; 0x80000000
   31d68:	mov	r1, #-2147483648	; 0x80000000
   31d6c:	mov	r2, r8
   31d70:	mov	r3, r9
   31d74:	mov	r6, r4
   31d78:	mov	r4, #0
   31d7c:	str	r0, [sp, #8]
   31d80:	mov	r0, #0
   31d84:	bl	3521c <__assert_fail@plt+0x23388>
   31d88:	ldr	r2, [sp, #24]
   31d8c:	ldr	r3, [sp, #28]
   31d90:	mov	r7, #1
   31d94:	subs	r0, r0, r2
   31d98:	sbcs	r0, r1, r3
   31d9c:	blt	31e10 <__assert_fail@plt+0x1ff7c>
   31da0:	umull	r4, r0, r8, r2
   31da4:	mov	r7, r6
   31da8:	mla	r0, r8, r3, r0
   31dac:	mla	r0, r9, r2, r0
   31db0:	cmp	r0, #0
   31db4:	str	r0, [sp, #8]
   31db8:	blt	31e10 <__assert_fail@plt+0x1ff7c>
   31dbc:	ldr	r3, [sp, #28]
   31dc0:	mvn	r0, #0
   31dc4:	mvn	r1, #-2147483648	; 0x80000000
   31dc8:	mov	r9, r7
   31dcc:	mvn	r6, #0
   31dd0:	mvn	r7, #-2147483648	; 0x80000000
   31dd4:	bl	352f0 <__assert_fail@plt+0x2345c>
   31dd8:	ldr	r8, [sp, #8]
   31ddc:	ldr	r3, [sp, #24]
   31de0:	ldr	ip, [sp, #28]
   31de4:	subs	r0, r0, r4
   31de8:	mov	r2, #1
   31dec:	sbcs	r0, r1, r8
   31df0:	blt	31e04 <__assert_fail@plt+0x1ff70>
   31df4:	umull	r6, r0, r4, r3
   31df8:	mov	r2, #0
   31dfc:	mla	r0, r4, ip, r0
   31e00:	mla	r7, r8, r3, r0
   31e04:	orr	r3, r2, r9
   31e08:	ldr	r9, [sp, #12]
   31e0c:	b	32aac <__assert_fail@plt+0x20c18>
   31e10:	ldr	r8, [sp, #8]
   31e14:	mov	r0, #0
   31e18:	mov	r1, #-2147483648	; 0x80000000
   31e1c:	mov	r2, r4
   31e20:	mov	r9, r7
   31e24:	mov	r6, #0
   31e28:	mov	r7, #-2147483648	; 0x80000000
   31e2c:	mov	r3, r8
   31e30:	bl	3521c <__assert_fail@plt+0x23388>
   31e34:	ldr	r3, [sp, #24]
   31e38:	ldr	ip, [sp, #28]
   31e3c:	mov	r2, #1
   31e40:	subs	r0, r0, r3
   31e44:	sbcs	r0, r1, ip
   31e48:	bge	31df4 <__assert_fail@plt+0x1ff60>
   31e4c:	b	31e04 <__assert_fail@plt+0x1ff70>
   31e50:	mov	r0, #0
   31e54:	mov	r1, #-2147483648	; 0x80000000
   31e58:	mov	r2, r8
   31e5c:	mov	r3, r9
   31e60:	str	r4, [sp, #8]
   31e64:	mov	r6, #0
   31e68:	mov	r7, #-2147483648	; 0x80000000
   31e6c:	bl	3521c <__assert_fail@plt+0x23388>
   31e70:	ldr	r4, [sp, #24]
   31e74:	ldr	r3, [sp, #28]
   31e78:	mov	r2, #1
   31e7c:	subs	r0, r0, r4
   31e80:	sbcs	r0, r1, r3
   31e84:	blt	31fc0 <__assert_fail@plt+0x2012c>
   31e88:	umull	r6, r0, r8, r4
   31e8c:	mov	r2, #0
   31e90:	mla	r0, r8, r3, r0
   31e94:	mla	r7, r9, r4, r0
   31e98:	b	31fc0 <__assert_fail@plt+0x2012c>
   31e9c:	str	r4, [sp, #4]
   31ea0:	ldr	r4, [sp, #8]
   31ea4:	mov	r0, #0
   31ea8:	mov	r1, #-2147483648	; 0x80000000
   31eac:	mov	r3, r9
   31eb0:	mov	r2, r4
   31eb4:	bl	3521c <__assert_fail@plt+0x23388>
   31eb8:	ldr	r2, [sp, #24]
   31ebc:	ldr	r3, [sp, #28]
   31ec0:	mov	r7, #1
   31ec4:	mov	r6, #0
   31ec8:	mov	r8, #-2147483648	; 0x80000000
   31ecc:	subs	r0, r0, r2
   31ed0:	sbcs	r0, r1, r3
   31ed4:	blt	31f28 <__assert_fail@plt+0x20094>
   31ed8:	umull	r6, r0, r4, r2
   31edc:	ldr	r7, [sp, #4]
   31ee0:	mla	r0, r4, r3, r0
   31ee4:	mla	r8, r9, r2, r0
   31ee8:	cmp	r8, #0
   31eec:	blt	31f28 <__assert_fail@plt+0x20094>
   31ef0:	ldr	r3, [sp, #28]
   31ef4:	mvn	r0, #0
   31ef8:	mvn	r1, #-2147483648	; 0x80000000
   31efc:	str	r7, [sp, #8]
   31f00:	mvn	r4, #0
   31f04:	mvn	r9, #-2147483648	; 0x80000000
   31f08:	bl	352f0 <__assert_fail@plt+0x2345c>
   31f0c:	ldr	r2, [sp, #24]
   31f10:	ldr	r3, [sp, #28]
   31f14:	subs	r0, r0, r6
   31f18:	mov	r7, #1
   31f1c:	sbcs	r0, r1, r8
   31f20:	bge	31f60 <__assert_fail@plt+0x200cc>
   31f24:	b	31f78 <__assert_fail@plt+0x200e4>
   31f28:	mov	r0, #0
   31f2c:	mov	r1, #-2147483648	; 0x80000000
   31f30:	mov	r2, r6
   31f34:	mov	r3, r8
   31f38:	str	r7, [sp, #8]
   31f3c:	bl	3521c <__assert_fail@plt+0x23388>
   31f40:	ldr	r2, [sp, #24]
   31f44:	ldr	r3, [sp, #28]
   31f48:	mov	r7, #1
   31f4c:	mov	r4, #0
   31f50:	mov	r9, #-2147483648	; 0x80000000
   31f54:	subs	r0, r0, r2
   31f58:	sbcs	r0, r1, r3
   31f5c:	blt	31fd0 <__assert_fail@plt+0x2013c>
   31f60:	umull	r4, r0, r6, r2
   31f64:	ldr	r7, [sp, #8]
   31f68:	mla	r0, r6, r3, r0
   31f6c:	mla	r9, r8, r2, r0
   31f70:	cmp	r9, #0
   31f74:	blt	31fd0 <__assert_fail@plt+0x2013c>
   31f78:	ldr	r3, [sp, #28]
   31f7c:	mvn	r0, #0
   31f80:	mvn	r1, #-2147483648	; 0x80000000
   31f84:	str	r7, [sp, #8]
   31f88:	mvn	r6, #0
   31f8c:	mvn	r7, #-2147483648	; 0x80000000
   31f90:	bl	352f0 <__assert_fail@plt+0x2345c>
   31f94:	ldr	r3, [sp, #24]
   31f98:	ldr	ip, [sp, #28]
   31f9c:	subs	r0, r0, r4
   31fa0:	mov	r2, #1
   31fa4:	mov	r8, r4
   31fa8:	sbcs	r0, r1, r9
   31fac:	blt	31fc0 <__assert_fail@plt+0x2012c>
   31fb0:	umull	r6, r0, r8, r3
   31fb4:	mov	r2, #0
   31fb8:	mla	r0, r8, ip, r0
   31fbc:	mla	r7, r9, r3, r0
   31fc0:	ldr	r0, [sp, #8]
   31fc4:	ldr	r9, [sp, #12]
   31fc8:	orr	r3, r2, r0
   31fcc:	b	32aac <__assert_fail@plt+0x20c18>
   31fd0:	mov	r0, #0
   31fd4:	mov	r1, #-2147483648	; 0x80000000
   31fd8:	mov	r2, r4
   31fdc:	mov	r3, r9
   31fe0:	str	r7, [sp, #8]
   31fe4:	mov	r8, r4
   31fe8:	bl	3521c <__assert_fail@plt+0x23388>
   31fec:	ldr	r3, [sp, #24]
   31ff0:	ldr	ip, [sp, #28]
   31ff4:	mov	r2, #1
   31ff8:	mov	r6, #0
   31ffc:	mov	r7, #-2147483648	; 0x80000000
   32000:	subs	r0, r0, r3
   32004:	sbcs	r0, r1, ip
   32008:	bge	31fb0 <__assert_fail@plt+0x2011c>
   3200c:	b	31fc0 <__assert_fail@plt+0x2012c>
   32010:	and	r0, r6, r7
   32014:	cmn	r0, #1
   32018:	beq	32054 <__assert_fail@plt+0x201c0>
   3201c:	mov	r0, #0
   32020:	mov	r1, #-2147483648	; 0x80000000
   32024:	mov	r2, r6
   32028:	mov	r3, r7
   3202c:	bl	3521c <__assert_fail@plt+0x23388>
   32030:	ldr	r2, [sp, #24]
   32034:	ldr	r3, [sp, #28]
   32038:	mov	r4, #1
   3203c:	mov	r9, #-2147483648	; 0x80000000
   32040:	subs	r0, r0, r2
   32044:	sbcs	r0, r1, r3
   32048:	mov	r0, #0
   3204c:	str	r0, [sp, #8]
   32050:	blt	32364 <__assert_fail@plt+0x204d0>
   32054:	umull	r1, r0, r6, r2
   32058:	mov	r4, #0
   3205c:	mla	r0, r6, r3, r0
   32060:	str	r1, [sp, #8]
   32064:	mla	r9, r7, r2, r0
   32068:	cmp	r9, #0
   3206c:	blt	32364 <__assert_fail@plt+0x204d0>
   32070:	ldr	r3, [sp, #28]
   32074:	mvn	r0, #0
   32078:	mvn	r1, #-2147483648	; 0x80000000
   3207c:	str	r4, [sp, #4]
   32080:	mvn	r8, #0
   32084:	mvn	r4, #-2147483648	; 0x80000000
   32088:	bl	352f0 <__assert_fail@plt+0x2345c>
   3208c:	ldr	r6, [sp, #8]
   32090:	ldr	r2, [sp, #24]
   32094:	ldr	r3, [sp, #28]
   32098:	mov	r7, #1
   3209c:	subs	r0, r0, r6
   320a0:	sbcs	r0, r1, r9
   320a4:	bge	323a0 <__assert_fail@plt+0x2050c>
   320a8:	b	323b8 <__assert_fail@plt+0x20524>
   320ac:	and	r0, r6, r7
   320b0:	cmn	r0, #1
   320b4:	beq	320dc <__assert_fail@plt+0x20248>
   320b8:	mov	r0, #0
   320bc:	mov	r1, #-2147483648	; 0x80000000
   320c0:	mov	r2, r6
   320c4:	mov	r3, r7
   320c8:	bl	3521c <__assert_fail@plt+0x23388>
   320cc:	ldr	r3, [sp, #28]
   320d0:	subs	r0, r0, #1024	; 0x400
   320d4:	sbcs	r0, r1, #0
   320d8:	blt	32334 <__assert_fail@plt+0x204a0>
   320dc:	lsl	r0, r7, #10
   320e0:	orr	r7, r0, r6, lsr #22
   320e4:	lsl	r6, r6, #10
   320e8:	b	32aac <__assert_fail@plt+0x20c18>
   320ec:	and	r0, r6, r7
   320f0:	cmn	r0, #1
   320f4:	beq	32130 <__assert_fail@plt+0x2029c>
   320f8:	mov	r0, #0
   320fc:	mov	r1, #-2147483648	; 0x80000000
   32100:	mov	r2, r6
   32104:	mov	r3, r7
   32108:	bl	3521c <__assert_fail@plt+0x23388>
   3210c:	ldr	r2, [sp, #24]
   32110:	ldr	r3, [sp, #28]
   32114:	mov	r4, #1
   32118:	mov	r9, #-2147483648	; 0x80000000
   3211c:	subs	r0, r0, r2
   32120:	sbcs	r0, r1, r3
   32124:	mov	r0, #0
   32128:	str	r0, [sp, #8]
   3212c:	blt	3267c <__assert_fail@plt+0x207e8>
   32130:	umull	r1, r0, r6, r2
   32134:	mov	r4, #0
   32138:	mla	r0, r6, r3, r0
   3213c:	str	r1, [sp, #8]
   32140:	mla	r9, r7, r2, r0
   32144:	cmp	r9, #0
   32148:	blt	3267c <__assert_fail@plt+0x207e8>
   3214c:	ldr	r3, [sp, #28]
   32150:	mvn	r0, #0
   32154:	mvn	r1, #-2147483648	; 0x80000000
   32158:	str	r4, [sp, #4]
   3215c:	mvn	r8, #0
   32160:	mvn	r4, #-2147483648	; 0x80000000
   32164:	bl	352f0 <__assert_fail@plt+0x2345c>
   32168:	ldr	r6, [sp, #8]
   3216c:	ldr	r2, [sp, #24]
   32170:	ldr	r3, [sp, #28]
   32174:	mov	r7, #1
   32178:	subs	r0, r0, r6
   3217c:	sbcs	r0, r1, r9
   32180:	bge	326b8 <__assert_fail@plt+0x20824>
   32184:	b	326d0 <__assert_fail@plt+0x2083c>
   32188:	and	r0, r6, r7
   3218c:	cmn	r0, #1
   32190:	beq	321cc <__assert_fail@plt+0x20338>
   32194:	mov	r0, #0
   32198:	mov	r1, #-2147483648	; 0x80000000
   3219c:	mov	r2, r6
   321a0:	mov	r3, r7
   321a4:	bl	3521c <__assert_fail@plt+0x23388>
   321a8:	ldr	r2, [sp, #24]
   321ac:	ldr	r3, [sp, #28]
   321b0:	mov	r4, #1
   321b4:	mov	r8, #-2147483648	; 0x80000000
   321b8:	subs	r0, r0, r2
   321bc:	sbcs	r0, r1, r3
   321c0:	mov	r0, #0
   321c4:	str	r0, [sp, #8]
   321c8:	blt	328f8 <__assert_fail@plt+0x20a64>
   321cc:	umull	r1, r0, r6, r2
   321d0:	mov	r4, #0
   321d4:	mla	r0, r6, r3, r0
   321d8:	str	r1, [sp, #8]
   321dc:	mla	r8, r7, r2, r0
   321e0:	cmp	r8, #0
   321e4:	blt	328f8 <__assert_fail@plt+0x20a64>
   321e8:	ldr	r3, [sp, #28]
   321ec:	mvn	r0, #0
   321f0:	mvn	r1, #-2147483648	; 0x80000000
   321f4:	str	r4, [sp, #4]
   321f8:	mvn	r9, #0
   321fc:	mvn	r4, #-2147483648	; 0x80000000
   32200:	bl	352f0 <__assert_fail@plt+0x2345c>
   32204:	ldr	r6, [sp, #8]
   32208:	ldr	r2, [sp, #24]
   3220c:	ldr	r3, [sp, #28]
   32210:	mov	r7, #1
   32214:	subs	r0, r0, r6
   32218:	sbcs	r0, r1, r8
   3221c:	bge	32934 <__assert_fail@plt+0x20aa0>
   32220:	b	3294c <__assert_fail@plt+0x20ab8>
   32224:	and	r0, r6, r7
   32228:	cmn	r0, #1
   3222c:	beq	32268 <__assert_fail@plt+0x203d4>
   32230:	mov	r0, #0
   32234:	mov	r1, #-2147483648	; 0x80000000
   32238:	mov	r2, r6
   3223c:	mov	r3, r7
   32240:	bl	3521c <__assert_fail@plt+0x23388>
   32244:	ldr	r2, [sp, #24]
   32248:	ldr	r3, [sp, #28]
   3224c:	mov	r4, #1
   32250:	mov	r9, #-2147483648	; 0x80000000
   32254:	subs	r0, r0, r2
   32258:	sbcs	r0, r1, r3
   3225c:	mov	r0, #0
   32260:	str	r0, [sp, #8]
   32264:	blt	32b14 <__assert_fail@plt+0x20c80>
   32268:	umull	r1, r0, r6, r2
   3226c:	mov	r4, #0
   32270:	mla	r0, r6, r3, r0
   32274:	str	r1, [sp, #8]
   32278:	mla	r9, r7, r2, r0
   3227c:	cmp	r9, #0
   32280:	blt	32b14 <__assert_fail@plt+0x20c80>
   32284:	ldr	r3, [sp, #28]
   32288:	mvn	r0, #0
   3228c:	mvn	r1, #-2147483648	; 0x80000000
   32290:	str	r4, [sp]
   32294:	mvn	r8, #-2147483648	; 0x80000000
   32298:	str	r0, [sp, #4]
   3229c:	mvn	r0, #0
   322a0:	bl	352f0 <__assert_fail@plt+0x2345c>
   322a4:	ldr	r6, [sp, #8]
   322a8:	ldr	r2, [sp, #24]
   322ac:	ldr	r3, [sp, #28]
   322b0:	mov	r7, #1
   322b4:	subs	r0, r0, r6
   322b8:	sbcs	r0, r1, r9
   322bc:	bge	32b54 <__assert_fail@plt+0x20cc0>
   322c0:	b	32b70 <__assert_fail@plt+0x20cdc>
   322c4:	and	r0, r6, r7
   322c8:	cmn	r0, #1
   322cc:	beq	322f4 <__assert_fail@plt+0x20460>
   322d0:	mov	r0, #0
   322d4:	mov	r1, #-2147483648	; 0x80000000
   322d8:	mov	r2, r6
   322dc:	mov	r3, r7
   322e0:	bl	3521c <__assert_fail@plt+0x23388>
   322e4:	ldr	r3, [sp, #28]
   322e8:	subs	r0, r0, #512	; 0x200
   322ec:	sbcs	r0, r1, #0
   322f0:	blt	32334 <__assert_fail@plt+0x204a0>
   322f4:	lsl	r0, r7, #9
   322f8:	orr	r7, r0, r6, lsr #23
   322fc:	lsl	r6, r6, #9
   32300:	b	32aac <__assert_fail@plt+0x20c18>
   32304:	and	r0, r6, r7
   32308:	cmn	r0, #1
   3230c:	beq	32354 <__assert_fail@plt+0x204c0>
   32310:	mov	r0, #0
   32314:	mov	r1, #-2147483648	; 0x80000000
   32318:	mov	r2, r6
   3231c:	mov	r3, r7
   32320:	bl	3521c <__assert_fail@plt+0x23388>
   32324:	ldr	r3, [sp, #28]
   32328:	subs	r0, r0, #2
   3232c:	sbcs	r0, r1, #0
   32330:	bge	32354 <__assert_fail@plt+0x204c0>
   32334:	mvn	r0, #-2147483648	; 0x80000000
   32338:	cmp	r7, #0
   3233c:	mvn	r6, #0
   32340:	mov	r3, #1
   32344:	movlt	r0, #-2147483648	; 0x80000000
   32348:	movwlt	r6, #0
   3234c:	mov	r7, r0
   32350:	b	32aac <__assert_fail@plt+0x20c18>
   32354:	lsl	r0, r7, #1
   32358:	orr	r7, r0, r6, lsr #31
   3235c:	lsl	r6, r6, #1
   32360:	b	32aac <__assert_fail@plt+0x20c18>
   32364:	ldr	r6, [sp, #8]
   32368:	mov	r0, #0
   3236c:	mov	r1, #-2147483648	; 0x80000000
   32370:	mov	r3, r9
   32374:	str	r4, [sp, #4]
   32378:	mov	r2, r6
   3237c:	bl	3521c <__assert_fail@plt+0x23388>
   32380:	ldr	r2, [sp, #24]
   32384:	ldr	r3, [sp, #28]
   32388:	mov	r7, #1
   3238c:	mov	r8, #0
   32390:	mov	r4, #-2147483648	; 0x80000000
   32394:	subs	r0, r0, r2
   32398:	sbcs	r0, r1, r3
   3239c:	blt	323f0 <__assert_fail@plt+0x2055c>
   323a0:	umull	r8, r0, r6, r2
   323a4:	ldr	r7, [sp, #4]
   323a8:	mla	r0, r6, r3, r0
   323ac:	mla	r4, r9, r2, r0
   323b0:	cmp	r4, #0
   323b4:	blt	323f0 <__assert_fail@plt+0x2055c>
   323b8:	ldr	r3, [sp, #28]
   323bc:	mvn	r0, #0
   323c0:	mvn	r1, #-2147483648	; 0x80000000
   323c4:	str	r7, [sp, #8]
   323c8:	mvn	r7, #0
   323cc:	mvn	r9, #-2147483648	; 0x80000000
   323d0:	bl	352f0 <__assert_fail@plt+0x2345c>
   323d4:	ldr	r2, [sp, #24]
   323d8:	ldr	r3, [sp, #28]
   323dc:	subs	r0, r0, r8
   323e0:	mov	r6, #1
   323e4:	sbcs	r0, r1, r4
   323e8:	bge	32428 <__assert_fail@plt+0x20594>
   323ec:	b	32440 <__assert_fail@plt+0x205ac>
   323f0:	mov	r0, #0
   323f4:	mov	r1, #-2147483648	; 0x80000000
   323f8:	mov	r2, r8
   323fc:	mov	r3, r4
   32400:	str	r7, [sp, #8]
   32404:	bl	3521c <__assert_fail@plt+0x23388>
   32408:	ldr	r2, [sp, #24]
   3240c:	ldr	r3, [sp, #28]
   32410:	mov	r6, #1
   32414:	mov	r7, #0
   32418:	mov	r9, #-2147483648	; 0x80000000
   3241c:	subs	r0, r0, r2
   32420:	sbcs	r0, r1, r3
   32424:	blt	32480 <__assert_fail@plt+0x205ec>
   32428:	umull	r7, r0, r8, r2
   3242c:	ldr	r6, [sp, #8]
   32430:	mla	r0, r8, r3, r0
   32434:	mla	r9, r4, r2, r0
   32438:	cmp	r9, #0
   3243c:	blt	32480 <__assert_fail@plt+0x205ec>
   32440:	ldr	r3, [sp, #28]
   32444:	mvn	r0, #0
   32448:	mvn	r1, #-2147483648	; 0x80000000
   3244c:	str	r6, [sp, #8]
   32450:	mvn	r8, #0
   32454:	mvn	r4, #-2147483648	; 0x80000000
   32458:	bl	352f0 <__assert_fail@plt+0x2345c>
   3245c:	ldr	r2, [sp, #24]
   32460:	ldr	r3, [sp, #28]
   32464:	subs	r0, r0, r7
   32468:	sbcs	r0, r1, r9
   3246c:	bge	324c4 <__assert_fail@plt+0x20630>
   32470:	mov	r0, #1
   32474:	mov	r6, #0
   32478:	str	r0, [sp, #8]
   3247c:	b	324dc <__assert_fail@plt+0x20648>
   32480:	mov	r0, #0
   32484:	mov	r1, #-2147483648	; 0x80000000
   32488:	mov	r2, r7
   3248c:	mov	r3, r9
   32490:	str	r6, [sp, #8]
   32494:	bl	3521c <__assert_fail@plt+0x23388>
   32498:	ldr	r2, [sp, #24]
   3249c:	ldr	r3, [sp, #28]
   324a0:	subs	r0, r0, r2
   324a4:	sbcs	r0, r1, r3
   324a8:	bge	324c4 <__assert_fail@plt+0x20630>
   324ac:	mov	r0, #1
   324b0:	mov	r8, #0
   324b4:	mov	r4, #-2147483648	; 0x80000000
   324b8:	mov	r6, #0
   324bc:	str	r0, [sp, #8]
   324c0:	b	32514 <__assert_fail@plt+0x20680>
   324c4:	umull	r8, r0, r7, r2
   324c8:	mov	r6, #0
   324cc:	mla	r0, r7, r3, r0
   324d0:	mla	r4, r9, r2, r0
   324d4:	cmp	r4, #0
   324d8:	blt	32514 <__assert_fail@plt+0x20680>
   324dc:	ldr	r3, [sp, #28]
   324e0:	mvn	r0, #0
   324e4:	mvn	r1, #-2147483648	; 0x80000000
   324e8:	mvn	r9, #0
   324ec:	mvn	r7, #-2147483648	; 0x80000000
   324f0:	bl	352f0 <__assert_fail@plt+0x2345c>
   324f4:	ldr	r2, [sp, #24]
   324f8:	ldr	r3, [sp, #28]
   324fc:	subs	r0, r0, r8
   32500:	sbcs	r0, r1, r4
   32504:	bge	32550 <__assert_fail@plt+0x206bc>
   32508:	mov	r0, #1
   3250c:	str	r0, [sp, #8]
   32510:	b	32564 <__assert_fail@plt+0x206d0>
   32514:	mov	r0, #0
   32518:	mov	r1, #-2147483648	; 0x80000000
   3251c:	mov	r2, r8
   32520:	mov	r3, r4
   32524:	bl	3521c <__assert_fail@plt+0x23388>
   32528:	ldr	r2, [sp, #24]
   3252c:	ldr	r3, [sp, #28]
   32530:	subs	r0, r0, r2
   32534:	sbcs	r0, r1, r3
   32538:	bge	32550 <__assert_fail@plt+0x206bc>
   3253c:	mov	r0, #1
   32540:	mov	r9, #0
   32544:	mov	r7, #-2147483648	; 0x80000000
   32548:	str	r0, [sp, #8]
   3254c:	b	325a0 <__assert_fail@plt+0x2070c>
   32550:	umull	r9, r0, r8, r2
   32554:	mla	r0, r8, r3, r0
   32558:	mla	r7, r4, r2, r0
   3255c:	cmp	r7, #0
   32560:	blt	325a0 <__assert_fail@plt+0x2070c>
   32564:	ldr	r3, [sp, #28]
   32568:	mvn	r0, #0
   3256c:	mvn	r1, #-2147483648	; 0x80000000
   32570:	mvn	r8, #0
   32574:	mvn	r4, #-2147483648	; 0x80000000
   32578:	bl	352f0 <__assert_fail@plt+0x2345c>
   3257c:	ldr	r2, [sp, #24]
   32580:	ldr	r3, [sp, #28]
   32584:	subs	r0, r0, r9
   32588:	sbcs	r0, r1, r7
   3258c:	bge	325e0 <__assert_fail@plt+0x2074c>
   32590:	ldr	r9, [sp, #12]
   32594:	mov	r0, #1
   32598:	str	r0, [sp, #8]
   3259c:	b	325f8 <__assert_fail@plt+0x20764>
   325a0:	mov	r0, #0
   325a4:	mov	r1, #-2147483648	; 0x80000000
   325a8:	mov	r2, r9
   325ac:	mov	r3, r7
   325b0:	bl	3521c <__assert_fail@plt+0x23388>
   325b4:	ldr	r2, [sp, #24]
   325b8:	ldr	r3, [sp, #28]
   325bc:	subs	r0, r0, r2
   325c0:	sbcs	r0, r1, r3
   325c4:	bge	325e0 <__assert_fail@plt+0x2074c>
   325c8:	ldr	r9, [sp, #12]
   325cc:	mov	r0, #1
   325d0:	mov	r8, #0
   325d4:	mov	r4, #-2147483648	; 0x80000000
   325d8:	str	r0, [sp, #8]
   325dc:	b	32648 <__assert_fail@plt+0x207b4>
   325e0:	umull	r8, r0, r9, r2
   325e4:	mla	r0, r9, r3, r0
   325e8:	ldr	r9, [sp, #12]
   325ec:	mla	r4, r7, r2, r0
   325f0:	cmp	r4, #0
   325f4:	blt	32648 <__assert_fail@plt+0x207b4>
   325f8:	ldr	r3, [sp, #28]
   325fc:	mvn	r0, #0
   32600:	mvn	r1, #-2147483648	; 0x80000000
   32604:	mvn	r6, #0
   32608:	bl	352f0 <__assert_fail@plt+0x2345c>
   3260c:	ldr	r7, [sp, #24]
   32610:	ldr	r3, [sp, #28]
   32614:	subs	r0, r0, r8
   32618:	mov	r2, #1
   3261c:	sbcs	r0, r1, r4
   32620:	mvn	r0, #-2147483648	; 0x80000000
   32624:	blt	32638 <__assert_fail@plt+0x207a4>
   32628:	umull	r6, r0, r8, r7
   3262c:	mov	r2, #0
   32630:	mla	r0, r8, r3, r0
   32634:	mla	r0, r4, r7, r0
   32638:	ldr	r1, [sp, #8]
   3263c:	mov	r7, r0
   32640:	orr	r3, r2, r1
   32644:	b	32aac <__assert_fail@plt+0x20c18>
   32648:	mov	r0, #0
   3264c:	mov	r1, #-2147483648	; 0x80000000
   32650:	mov	r2, r8
   32654:	mov	r3, r4
   32658:	bl	3521c <__assert_fail@plt+0x23388>
   3265c:	ldr	r7, [sp, #24]
   32660:	ldr	r3, [sp, #28]
   32664:	mov	r2, #1
   32668:	subs	r0, r0, r7
   3266c:	sbcs	r0, r1, r3
   32670:	mov	r0, #-2147483648	; 0x80000000
   32674:	bge	32628 <__assert_fail@plt+0x20794>
   32678:	b	32638 <__assert_fail@plt+0x207a4>
   3267c:	ldr	r6, [sp, #8]
   32680:	mov	r0, #0
   32684:	mov	r1, #-2147483648	; 0x80000000
   32688:	mov	r3, r9
   3268c:	str	r4, [sp, #4]
   32690:	mov	r2, r6
   32694:	bl	3521c <__assert_fail@plt+0x23388>
   32698:	ldr	r2, [sp, #24]
   3269c:	ldr	r3, [sp, #28]
   326a0:	mov	r7, #1
   326a4:	mov	r8, #0
   326a8:	mov	r4, #-2147483648	; 0x80000000
   326ac:	subs	r0, r0, r2
   326b0:	sbcs	r0, r1, r3
   326b4:	blt	3270c <__assert_fail@plt+0x20878>
   326b8:	umull	r8, r0, r6, r2
   326bc:	ldr	r7, [sp, #4]
   326c0:	mla	r0, r6, r3, r0
   326c4:	mla	r4, r9, r2, r0
   326c8:	cmp	r4, #0
   326cc:	blt	3270c <__assert_fail@plt+0x20878>
   326d0:	ldr	r3, [sp, #28]
   326d4:	mvn	r0, #0
   326d8:	mvn	r1, #-2147483648	; 0x80000000
   326dc:	str	r7, [sp, #4]
   326e0:	mvn	r7, #0
   326e4:	mvn	r9, #-2147483648	; 0x80000000
   326e8:	bl	352f0 <__assert_fail@plt+0x2345c>
   326ec:	ldr	r2, [sp, #24]
   326f0:	ldr	r3, [sp, #28]
   326f4:	subs	r0, r0, r8
   326f8:	mov	r6, #1
   326fc:	sbcs	r0, r1, r4
   32700:	str	r6, [sp, #8]
   32704:	bge	32748 <__assert_fail@plt+0x208b4>
   32708:	b	32764 <__assert_fail@plt+0x208d0>
   3270c:	mov	r0, #0
   32710:	mov	r1, #-2147483648	; 0x80000000
   32714:	mov	r2, r8
   32718:	mov	r3, r4
   3271c:	str	r7, [sp, #4]
   32720:	bl	3521c <__assert_fail@plt+0x23388>
   32724:	ldr	r2, [sp, #24]
   32728:	ldr	r3, [sp, #28]
   3272c:	mov	r7, #1
   32730:	mov	r9, #-2147483648	; 0x80000000
   32734:	str	r7, [sp, #8]
   32738:	mov	r7, #0
   3273c:	subs	r0, r0, r2
   32740:	sbcs	r0, r1, r3
   32744:	blt	3279c <__assert_fail@plt+0x20908>
   32748:	umull	r7, r0, r8, r2
   3274c:	mla	r0, r8, r3, r0
   32750:	mla	r9, r4, r2, r0
   32754:	ldr	r0, [sp, #4]
   32758:	cmp	r9, #0
   3275c:	str	r0, [sp, #8]
   32760:	blt	3279c <__assert_fail@plt+0x20908>
   32764:	ldr	r3, [sp, #28]
   32768:	mvn	r0, #0
   3276c:	mvn	r1, #-2147483648	; 0x80000000
   32770:	mvn	r4, #0
   32774:	mvn	r8, #-2147483648	; 0x80000000
   32778:	bl	352f0 <__assert_fail@plt+0x2345c>
   3277c:	ldr	r2, [sp, #24]
   32780:	ldr	r3, [sp, #28]
   32784:	subs	r0, r0, r7
   32788:	sbcs	r0, r1, r9
   3278c:	bge	327d8 <__assert_fail@plt+0x20944>
   32790:	mov	r0, #1
   32794:	str	r0, [sp, #8]
   32798:	b	327ec <__assert_fail@plt+0x20958>
   3279c:	mov	r0, #0
   327a0:	mov	r1, #-2147483648	; 0x80000000
   327a4:	mov	r2, r7
   327a8:	mov	r3, r9
   327ac:	bl	3521c <__assert_fail@plt+0x23388>
   327b0:	ldr	r2, [sp, #24]
   327b4:	ldr	r3, [sp, #28]
   327b8:	subs	r0, r0, r2
   327bc:	sbcs	r0, r1, r3
   327c0:	bge	327d8 <__assert_fail@plt+0x20944>
   327c4:	mov	r0, #1
   327c8:	mov	r4, #0
   327cc:	mov	r8, #-2147483648	; 0x80000000
   327d0:	str	r0, [sp, #8]
   327d4:	b	32820 <__assert_fail@plt+0x2098c>
   327d8:	umull	r4, r0, r7, r2
   327dc:	mla	r0, r7, r3, r0
   327e0:	mla	r8, r9, r2, r0
   327e4:	cmp	r8, #0
   327e8:	blt	32820 <__assert_fail@plt+0x2098c>
   327ec:	ldr	r3, [sp, #28]
   327f0:	mvn	r0, #0
   327f4:	mvn	r1, #-2147483648	; 0x80000000
   327f8:	mvn	r6, #0
   327fc:	mvn	r9, #-2147483648	; 0x80000000
   32800:	bl	352f0 <__assert_fail@plt+0x2345c>
   32804:	ldr	r2, [sp, #24]
   32808:	ldr	r3, [sp, #28]
   3280c:	subs	r0, r0, r4
   32810:	sbcs	r0, r1, r8
   32814:	bge	32858 <__assert_fail@plt+0x209c4>
   32818:	mov	r8, #1
   3281c:	b	32870 <__assert_fail@plt+0x209dc>
   32820:	mov	r0, #0
   32824:	mov	r1, #-2147483648	; 0x80000000
   32828:	mov	r2, r4
   3282c:	mov	r3, r8
   32830:	bl	3521c <__assert_fail@plt+0x23388>
   32834:	ldr	r2, [sp, #24]
   32838:	ldr	r3, [sp, #28]
   3283c:	subs	r0, r0, r2
   32840:	sbcs	r0, r1, r3
   32844:	bge	32858 <__assert_fail@plt+0x209c4>
   32848:	mov	r8, #1
   3284c:	mov	r6, #0
   32850:	mov	r9, #-2147483648	; 0x80000000
   32854:	b	328c0 <__assert_fail@plt+0x20a2c>
   32858:	umull	r6, r0, r4, r2
   3285c:	mla	r0, r4, r3, r0
   32860:	mla	r9, r8, r2, r0
   32864:	ldr	r8, [sp, #8]
   32868:	cmp	r9, #0
   3286c:	blt	328c0 <__assert_fail@plt+0x20a2c>
   32870:	ldr	r3, [sp, #28]
   32874:	mvn	r0, #0
   32878:	mvn	r1, #-2147483648	; 0x80000000
   3287c:	mvn	r4, #0
   32880:	mvn	r7, #-2147483648	; 0x80000000
   32884:	bl	352f0 <__assert_fail@plt+0x2345c>
   32888:	ldr	r3, [sp, #24]
   3288c:	ldr	ip, [sp, #28]
   32890:	subs	r0, r0, r6
   32894:	mov	r2, #1
   32898:	sbcs	r0, r1, r9
   3289c:	blt	328b0 <__assert_fail@plt+0x20a1c>
   328a0:	umull	r4, r0, r6, r3
   328a4:	mov	r2, #0
   328a8:	mla	r0, r6, ip, r0
   328ac:	mla	r7, r9, r3, r0
   328b0:	ldr	r9, [sp, #12]
   328b4:	orr	r3, r2, r8
   328b8:	mov	r6, r4
   328bc:	b	32aac <__assert_fail@plt+0x20c18>
   328c0:	mov	r0, #0
   328c4:	mov	r1, #-2147483648	; 0x80000000
   328c8:	mov	r2, r6
   328cc:	mov	r3, r9
   328d0:	bl	3521c <__assert_fail@plt+0x23388>
   328d4:	ldr	r3, [sp, #24]
   328d8:	ldr	ip, [sp, #28]
   328dc:	mov	r2, #1
   328e0:	mov	r4, #0
   328e4:	mov	r7, #-2147483648	; 0x80000000
   328e8:	subs	r0, r0, r3
   328ec:	sbcs	r0, r1, ip
   328f0:	bge	328a0 <__assert_fail@plt+0x20a0c>
   328f4:	b	328b0 <__assert_fail@plt+0x20a1c>
   328f8:	ldr	r6, [sp, #8]
   328fc:	mov	r0, #0
   32900:	mov	r1, #-2147483648	; 0x80000000
   32904:	mov	r3, r8
   32908:	str	r4, [sp, #4]
   3290c:	mov	r2, r6
   32910:	bl	3521c <__assert_fail@plt+0x23388>
   32914:	ldr	r2, [sp, #24]
   32918:	ldr	r3, [sp, #28]
   3291c:	mov	r7, #1
   32920:	mov	r9, #0
   32924:	mov	r4, #-2147483648	; 0x80000000
   32928:	subs	r0, r0, r2
   3292c:	sbcs	r0, r1, r3
   32930:	blt	32988 <__assert_fail@plt+0x20af4>
   32934:	umull	r9, r0, r6, r2
   32938:	ldr	r7, [sp, #4]
   3293c:	mla	r0, r6, r3, r0
   32940:	mla	r4, r8, r2, r0
   32944:	cmp	r4, #0
   32948:	blt	32988 <__assert_fail@plt+0x20af4>
   3294c:	ldr	r3, [sp, #28]
   32950:	mvn	r0, #0
   32954:	mvn	r1, #-2147483648	; 0x80000000
   32958:	str	r7, [sp, #4]
   3295c:	mvn	r8, #0
   32960:	mvn	r7, #-2147483648	; 0x80000000
   32964:	bl	352f0 <__assert_fail@plt+0x2345c>
   32968:	ldr	r2, [sp, #24]
   3296c:	ldr	r3, [sp, #28]
   32970:	subs	r0, r0, r9
   32974:	mov	r6, #1
   32978:	sbcs	r0, r1, r4
   3297c:	str	r6, [sp, #8]
   32980:	bge	329c4 <__assert_fail@plt+0x20b30>
   32984:	b	329e0 <__assert_fail@plt+0x20b4c>
   32988:	mov	r0, #0
   3298c:	mov	r1, #-2147483648	; 0x80000000
   32990:	mov	r2, r9
   32994:	mov	r3, r4
   32998:	str	r7, [sp, #4]
   3299c:	bl	3521c <__assert_fail@plt+0x23388>
   329a0:	ldr	r2, [sp, #24]
   329a4:	ldr	r3, [sp, #28]
   329a8:	mov	r7, #1
   329ac:	mov	r8, #0
   329b0:	str	r7, [sp, #8]
   329b4:	mov	r7, #-2147483648	; 0x80000000
   329b8:	subs	r0, r0, r2
   329bc:	sbcs	r0, r1, r3
   329c0:	blt	32a14 <__assert_fail@plt+0x20b80>
   329c4:	umull	r8, r0, r9, r2
   329c8:	mla	r0, r9, r3, r0
   329cc:	mla	r7, r4, r2, r0
   329d0:	ldr	r0, [sp, #4]
   329d4:	cmp	r7, #0
   329d8:	str	r0, [sp, #8]
   329dc:	blt	32a14 <__assert_fail@plt+0x20b80>
   329e0:	ldr	r3, [sp, #28]
   329e4:	mvn	r0, #0
   329e8:	mvn	r1, #-2147483648	; 0x80000000
   329ec:	mvn	r4, #0
   329f0:	mvn	r9, #-2147483648	; 0x80000000
   329f4:	bl	352f0 <__assert_fail@plt+0x2345c>
   329f8:	ldr	r2, [sp, #24]
   329fc:	ldr	r3, [sp, #28]
   32a00:	subs	r0, r0, r8
   32a04:	sbcs	r0, r1, r7
   32a08:	bge	32a4c <__assert_fail@plt+0x20bb8>
   32a0c:	mov	r8, #1
   32a10:	b	32a64 <__assert_fail@plt+0x20bd0>
   32a14:	mov	r0, #0
   32a18:	mov	r1, #-2147483648	; 0x80000000
   32a1c:	mov	r2, r8
   32a20:	mov	r3, r7
   32a24:	bl	3521c <__assert_fail@plt+0x23388>
   32a28:	ldr	r2, [sp, #24]
   32a2c:	ldr	r3, [sp, #28]
   32a30:	subs	r0, r0, r2
   32a34:	sbcs	r0, r1, r3
   32a38:	bge	32a4c <__assert_fail@plt+0x20bb8>
   32a3c:	mov	r8, #1
   32a40:	mov	r4, #0
   32a44:	mov	r9, #-2147483648	; 0x80000000
   32a48:	b	32adc <__assert_fail@plt+0x20c48>
   32a4c:	umull	r4, r0, r8, r2
   32a50:	mla	r0, r8, r3, r0
   32a54:	ldr	r8, [sp, #8]
   32a58:	mla	r9, r7, r2, r0
   32a5c:	cmp	r9, #0
   32a60:	blt	32adc <__assert_fail@plt+0x20c48>
   32a64:	ldr	r3, [sp, #28]
   32a68:	mvn	r0, #0
   32a6c:	mvn	r1, #-2147483648	; 0x80000000
   32a70:	mvn	r6, #0
   32a74:	mvn	r7, #-2147483648	; 0x80000000
   32a78:	bl	352f0 <__assert_fail@plt+0x2345c>
   32a7c:	ldr	r3, [sp, #24]
   32a80:	ldr	ip, [sp, #28]
   32a84:	subs	r0, r0, r4
   32a88:	mov	r2, #1
   32a8c:	sbcs	r0, r1, r9
   32a90:	blt	32aa4 <__assert_fail@plt+0x20c10>
   32a94:	umull	r6, r0, r4, r3
   32a98:	mov	r2, #0
   32a9c:	mla	r0, r4, ip, r0
   32aa0:	mla	r7, r9, r3, r0
   32aa4:	ldr	r9, [sp, #12]
   32aa8:	orr	r3, r2, r8
   32aac:	ldr	r1, [sp, #20]
   32ab0:	ldr	r2, [sp, #16]
   32ab4:	orr	r5, r3, r5
   32ab8:	add	r0, r1, r2
   32abc:	str	r0, [sl]
   32ac0:	ldrb	r0, [r1, r2]
   32ac4:	cmp	r0, #0
   32ac8:	orrne	r5, r5, #2
   32acc:	strd	r6, [r9]
   32ad0:	mov	r0, r5
   32ad4:	sub	sp, fp, #28
   32ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32adc:	mov	r0, #0
   32ae0:	mov	r1, #-2147483648	; 0x80000000
   32ae4:	mov	r2, r4
   32ae8:	mov	r3, r9
   32aec:	bl	3521c <__assert_fail@plt+0x23388>
   32af0:	ldr	r3, [sp, #24]
   32af4:	ldr	ip, [sp, #28]
   32af8:	mov	r2, #1
   32afc:	mov	r6, #0
   32b00:	mov	r7, #-2147483648	; 0x80000000
   32b04:	subs	r0, r0, r3
   32b08:	sbcs	r0, r1, ip
   32b0c:	bge	32a94 <__assert_fail@plt+0x20c00>
   32b10:	b	32aa4 <__assert_fail@plt+0x20c10>
   32b14:	ldr	r6, [sp, #8]
   32b18:	mov	r0, #0
   32b1c:	mov	r1, #-2147483648	; 0x80000000
   32b20:	mov	r3, r9
   32b24:	str	r4, [sp]
   32b28:	mov	r2, r6
   32b2c:	bl	3521c <__assert_fail@plt+0x23388>
   32b30:	ldr	r2, [sp, #24]
   32b34:	ldr	r3, [sp, #28]
   32b38:	mov	r7, #1
   32b3c:	mov	r8, #-2147483648	; 0x80000000
   32b40:	subs	r0, r0, r2
   32b44:	sbcs	r0, r1, r3
   32b48:	mov	r0, #0
   32b4c:	str	r0, [sp, #4]
   32b50:	blt	32bb0 <__assert_fail@plt+0x20d1c>
   32b54:	umull	r1, r0, r6, r2
   32b58:	ldr	r7, [sp]
   32b5c:	mla	r0, r6, r3, r0
   32b60:	str	r1, [sp, #4]
   32b64:	mla	r8, r9, r2, r0
   32b68:	cmp	r8, #0
   32b6c:	blt	32bb0 <__assert_fail@plt+0x20d1c>
   32b70:	ldr	r3, [sp, #28]
   32b74:	mvn	r0, #0
   32b78:	mvn	r1, #-2147483648	; 0x80000000
   32b7c:	str	r7, [sp]
   32b80:	mvn	r7, #0
   32b84:	mvn	r4, #-2147483648	; 0x80000000
   32b88:	bl	352f0 <__assert_fail@plt+0x2345c>
   32b8c:	mov	r6, #1
   32b90:	ldr	r2, [sp, #24]
   32b94:	ldr	r3, [sp, #28]
   32b98:	str	r6, [sp, #8]
   32b9c:	ldr	r6, [sp, #4]
   32ba0:	subs	r0, r0, r6
   32ba4:	sbcs	r0, r1, r8
   32ba8:	bge	32bf0 <__assert_fail@plt+0x20d5c>
   32bac:	b	32c0c <__assert_fail@plt+0x20d78>
   32bb0:	ldr	r6, [sp, #4]
   32bb4:	mov	r0, #0
   32bb8:	mov	r1, #-2147483648	; 0x80000000
   32bbc:	mov	r3, r8
   32bc0:	str	r7, [sp]
   32bc4:	mov	r2, r6
   32bc8:	bl	3521c <__assert_fail@plt+0x23388>
   32bcc:	ldr	r2, [sp, #24]
   32bd0:	ldr	r3, [sp, #28]
   32bd4:	mov	r7, #1
   32bd8:	mov	r4, #-2147483648	; 0x80000000
   32bdc:	str	r7, [sp, #8]
   32be0:	mov	r7, #0
   32be4:	subs	r0, r0, r2
   32be8:	sbcs	r0, r1, r3
   32bec:	blt	32c44 <__assert_fail@plt+0x20db0>
   32bf0:	umull	r7, r0, r6, r2
   32bf4:	mla	r0, r6, r3, r0
   32bf8:	mla	r4, r8, r2, r0
   32bfc:	ldr	r0, [sp]
   32c00:	cmp	r4, #0
   32c04:	str	r0, [sp, #8]
   32c08:	blt	32c44 <__assert_fail@plt+0x20db0>
   32c0c:	ldr	r3, [sp, #28]
   32c10:	mvn	r0, #0
   32c14:	mvn	r1, #-2147483648	; 0x80000000
   32c18:	mvn	r9, #0
   32c1c:	mvn	r8, #-2147483648	; 0x80000000
   32c20:	bl	352f0 <__assert_fail@plt+0x2345c>
   32c24:	ldr	r2, [sp, #24]
   32c28:	ldr	r3, [sp, #28]
   32c2c:	subs	r0, r0, r7
   32c30:	sbcs	r0, r1, r4
   32c34:	bge	32c80 <__assert_fail@plt+0x20dec>
   32c38:	mov	r0, #1
   32c3c:	str	r0, [sp, #8]
   32c40:	b	32c94 <__assert_fail@plt+0x20e00>
   32c44:	mov	r0, #0
   32c48:	mov	r1, #-2147483648	; 0x80000000
   32c4c:	mov	r2, r7
   32c50:	mov	r3, r4
   32c54:	bl	3521c <__assert_fail@plt+0x23388>
   32c58:	ldr	r2, [sp, #24]
   32c5c:	ldr	r3, [sp, #28]
   32c60:	subs	r0, r0, r2
   32c64:	sbcs	r0, r1, r3
   32c68:	bge	32c80 <__assert_fail@plt+0x20dec>
   32c6c:	mov	r0, #1
   32c70:	mov	r9, #0
   32c74:	mov	r8, #-2147483648	; 0x80000000
   32c78:	str	r0, [sp, #8]
   32c7c:	b	32ccc <__assert_fail@plt+0x20e38>
   32c80:	umull	r9, r0, r7, r2
   32c84:	mla	r0, r7, r3, r0
   32c88:	mla	r8, r4, r2, r0
   32c8c:	cmp	r8, #0
   32c90:	blt	32ccc <__assert_fail@plt+0x20e38>
   32c94:	ldr	r3, [sp, #28]
   32c98:	mvn	r0, #0
   32c9c:	mvn	r1, #-2147483648	; 0x80000000
   32ca0:	mvn	r4, #0
   32ca4:	mvn	r7, #-2147483648	; 0x80000000
   32ca8:	bl	352f0 <__assert_fail@plt+0x2345c>
   32cac:	ldr	r2, [sp, #24]
   32cb0:	ldr	r3, [sp, #28]
   32cb4:	subs	r0, r0, r9
   32cb8:	sbcs	r0, r1, r8
   32cbc:	bge	32d08 <__assert_fail@plt+0x20e74>
   32cc0:	mov	r0, #1
   32cc4:	str	r0, [sp, #8]
   32cc8:	b	32d1c <__assert_fail@plt+0x20e88>
   32ccc:	mov	r0, #0
   32cd0:	mov	r1, #-2147483648	; 0x80000000
   32cd4:	mov	r2, r9
   32cd8:	mov	r3, r8
   32cdc:	bl	3521c <__assert_fail@plt+0x23388>
   32ce0:	ldr	r2, [sp, #24]
   32ce4:	ldr	r3, [sp, #28]
   32ce8:	subs	r0, r0, r2
   32cec:	sbcs	r0, r1, r3
   32cf0:	bge	32d08 <__assert_fail@plt+0x20e74>
   32cf4:	mov	r0, #1
   32cf8:	mov	r4, #0
   32cfc:	mov	r7, #-2147483648	; 0x80000000
   32d00:	str	r0, [sp, #8]
   32d04:	b	32d54 <__assert_fail@plt+0x20ec0>
   32d08:	umull	r4, r0, r9, r2
   32d0c:	mla	r0, r9, r3, r0
   32d10:	mla	r7, r8, r2, r0
   32d14:	cmp	r7, #0
   32d18:	blt	32d54 <__assert_fail@plt+0x20ec0>
   32d1c:	ldr	r3, [sp, #28]
   32d20:	mvn	r0, #0
   32d24:	mvn	r1, #-2147483648	; 0x80000000
   32d28:	mvn	r8, #0
   32d2c:	mvn	r9, #-2147483648	; 0x80000000
   32d30:	bl	352f0 <__assert_fail@plt+0x2345c>
   32d34:	ldr	r2, [sp, #24]
   32d38:	ldr	r3, [sp, #28]
   32d3c:	subs	r0, r0, r4
   32d40:	sbcs	r0, r1, r7
   32d44:	bge	32d90 <__assert_fail@plt+0x20efc>
   32d48:	mov	r0, #1
   32d4c:	str	r0, [sp, #8]
   32d50:	b	32da4 <__assert_fail@plt+0x20f10>
   32d54:	mov	r0, #0
   32d58:	mov	r1, #-2147483648	; 0x80000000
   32d5c:	mov	r2, r4
   32d60:	mov	r3, r7
   32d64:	bl	3521c <__assert_fail@plt+0x23388>
   32d68:	ldr	r2, [sp, #24]
   32d6c:	ldr	r3, [sp, #28]
   32d70:	subs	r0, r0, r2
   32d74:	sbcs	r0, r1, r3
   32d78:	bge	32d90 <__assert_fail@plt+0x20efc>
   32d7c:	mov	r0, #1
   32d80:	mov	r8, #0
   32d84:	mov	r9, #-2147483648	; 0x80000000
   32d88:	str	r0, [sp, #8]
   32d8c:	b	32de0 <__assert_fail@plt+0x20f4c>
   32d90:	umull	r8, r0, r4, r2
   32d94:	mla	r0, r4, r3, r0
   32d98:	mla	r9, r7, r2, r0
   32d9c:	cmp	r9, #0
   32da0:	blt	32de0 <__assert_fail@plt+0x20f4c>
   32da4:	ldr	r3, [sp, #28]
   32da8:	mvn	r0, #0
   32dac:	mvn	r1, #-2147483648	; 0x80000000
   32db0:	mvn	r4, #0
   32db4:	mvn	r6, #-2147483648	; 0x80000000
   32db8:	bl	352f0 <__assert_fail@plt+0x2345c>
   32dbc:	ldr	r2, [sp, #24]
   32dc0:	ldr	r3, [sp, #28]
   32dc4:	subs	r0, r0, r8
   32dc8:	sbcs	r0, r1, r9
   32dcc:	bge	32e20 <__assert_fail@plt+0x20f8c>
   32dd0:	ldr	r9, [sp, #12]
   32dd4:	mov	r0, #1
   32dd8:	str	r0, [sp, #8]
   32ddc:	b	32e38 <__assert_fail@plt+0x20fa4>
   32de0:	mov	r0, #0
   32de4:	mov	r1, #-2147483648	; 0x80000000
   32de8:	mov	r2, r8
   32dec:	mov	r3, r9
   32df0:	bl	3521c <__assert_fail@plt+0x23388>
   32df4:	ldr	r2, [sp, #24]
   32df8:	ldr	r3, [sp, #28]
   32dfc:	subs	r0, r0, r2
   32e00:	sbcs	r0, r1, r3
   32e04:	bge	32e20 <__assert_fail@plt+0x20f8c>
   32e08:	ldr	r9, [sp, #12]
   32e0c:	mov	r0, #1
   32e10:	mov	r4, #0
   32e14:	mov	r6, #-2147483648	; 0x80000000
   32e18:	str	r0, [sp, #8]
   32e1c:	b	32e84 <__assert_fail@plt+0x20ff0>
   32e20:	umull	r4, r0, r8, r2
   32e24:	mla	r0, r8, r3, r0
   32e28:	mla	r6, r9, r2, r0
   32e2c:	ldr	r9, [sp, #12]
   32e30:	cmp	r6, #0
   32e34:	blt	32e84 <__assert_fail@plt+0x20ff0>
   32e38:	ldr	r3, [sp, #28]
   32e3c:	mvn	r0, #0
   32e40:	mvn	r1, #-2147483648	; 0x80000000
   32e44:	mov	r8, r6
   32e48:	mvn	r6, #0
   32e4c:	mvn	r7, #-2147483648	; 0x80000000
   32e50:	bl	352f0 <__assert_fail@plt+0x2345c>
   32e54:	ldr	r3, [sp, #24]
   32e58:	ldr	ip, [sp, #28]
   32e5c:	subs	r0, r0, r4
   32e60:	mov	r2, #1
   32e64:	sbcs	r0, r1, r8
   32e68:	blt	32e7c <__assert_fail@plt+0x20fe8>
   32e6c:	umull	r6, r0, r4, r3
   32e70:	mov	r2, #0
   32e74:	mla	r0, r4, ip, r0
   32e78:	mla	r7, r8, r3, r0
   32e7c:	ldr	r0, [sp, #8]
   32e80:	b	31fc8 <__assert_fail@plt+0x20134>
   32e84:	mov	r0, #0
   32e88:	mov	r1, #-2147483648	; 0x80000000
   32e8c:	mov	r2, r4
   32e90:	mov	r3, r6
   32e94:	bl	3521c <__assert_fail@plt+0x23388>
   32e98:	ldr	r3, [sp, #24]
   32e9c:	ldr	ip, [sp, #28]
   32ea0:	mov	r8, r6
   32ea4:	mov	r2, #1
   32ea8:	mov	r6, #0
   32eac:	mov	r7, #-2147483648	; 0x80000000
   32eb0:	subs	r0, r0, r3
   32eb4:	sbcs	r0, r1, ip
   32eb8:	bge	32e6c <__assert_fail@plt+0x20fd8>
   32ebc:	b	32e7c <__assert_fail@plt+0x20fe8>
   32ec0:	movw	r0, #30307	; 0x7663
   32ec4:	movw	r1, #30345	; 0x7689
   32ec8:	movw	r3, #30361	; 0x7699
   32ecc:	mov	r2, #85	; 0x55
   32ed0:	movt	r0, #3
   32ed4:	movt	r1, #3
   32ed8:	movt	r3, #3
   32edc:	bl	11e94 <__assert_fail@plt>
   32ee0:	push	{fp, lr}
   32ee4:	mov	fp, sp
   32ee8:	sub	sp, sp, #8
   32eec:	movw	ip, #33236	; 0x81d4
   32ef0:	movt	ip, #4
   32ef4:	ldr	ip, [ip]
   32ef8:	str	ip, [sp, #4]
   32efc:	ldr	ip, [fp, #8]
   32f00:	str	ip, [sp]
   32f04:	bl	32f0c <__assert_fail@plt+0x21078>
   32f08:	bl	11e58 <abort@plt>
   32f0c:	push	{r4, r5, r6, r7, fp, lr}
   32f10:	add	fp, sp, #16
   32f14:	sub	sp, sp, #16
   32f18:	sub	r0, r0, #1
   32f1c:	cmp	r0, #4
   32f20:	bcs	32fa0 <__assert_fail@plt+0x2110c>
   32f24:	mov	r5, r1
   32f28:	movw	r1, #30536	; 0x7748
   32f2c:	ldr	r4, [fp, #12]
   32f30:	ldr	r6, [fp, #8]
   32f34:	movt	r1, #3
   32f38:	cmn	r5, #1
   32f3c:	ldr	r1, [r1, r0, lsl #2]
   32f40:	ble	32f54 <__assert_fail@plt+0x210c0>
   32f44:	ldr	r7, [r3, r5, lsl #4]
   32f48:	movw	r5, #30439	; 0x76e7
   32f4c:	movt	r5, #3
   32f50:	b	32f70 <__assert_fail@plt+0x210dc>
   32f54:	mov	r0, #0
   32f58:	add	r7, sp, #14
   32f5c:	strb	r0, [sp, #15]
   32f60:	movw	r0, #30439	; 0x76e7
   32f64:	strb	r2, [sp, #14]
   32f68:	movt	r0, #3
   32f6c:	sub	r5, r0, r5
   32f70:	mov	r0, #0
   32f74:	mov	r2, #5
   32f78:	bl	11ad4 <dcgettext@plt>
   32f7c:	mov	r2, r0
   32f80:	mov	r0, r4
   32f84:	mov	r1, #0
   32f88:	mov	r3, r5
   32f8c:	str	r7, [sp]
   32f90:	str	r6, [sp, #4]
   32f94:	bl	11bac <error@plt>
   32f98:	sub	sp, fp, #16
   32f9c:	pop	{r4, r5, r6, r7, fp, pc}
   32fa0:	bl	11e58 <abort@plt>
   32fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32fa8:	add	fp, sp, #28
   32fac:	sub	sp, sp, #44	; 0x2c
   32fb0:	cmp	r2, #37	; 0x25
   32fb4:	bcs	33c24 <__assert_fail@plt+0x21d90>
   32fb8:	ldr	sl, [fp, #8]
   32fbc:	mov	r6, r2
   32fc0:	mov	r7, r1
   32fc4:	mov	r4, r0
   32fc8:	str	r3, [sp, #36]	; 0x24
   32fcc:	bl	11ca8 <__errno_location@plt>
   32fd0:	mov	r5, r0
   32fd4:	mov	r0, #0
   32fd8:	str	r0, [r5]
   32fdc:	bl	11c54 <__ctype_b_loc@plt>
   32fe0:	ldr	r1, [r0]
   32fe4:	mov	r2, r4
   32fe8:	ldrb	r0, [r2], #1
   32fec:	add	r3, r1, r0, lsl #1
   32ff0:	ldrb	r3, [r3, #1]
   32ff4:	tst	r3, #32
   32ff8:	bne	32fe8 <__assert_fail@plt+0x21154>
   32ffc:	sub	r9, fp, #32
   33000:	cmp	r7, #0
   33004:	mov	r8, #4
   33008:	movne	r9, r7
   3300c:	cmp	r0, #45	; 0x2d
   33010:	beq	33c18 <__assert_fail@plt+0x21d84>
   33014:	mov	r0, r4
   33018:	mov	r1, r9
   3301c:	mov	r2, r6
   33020:	mov	r3, #0
   33024:	bl	11aa4 <__strtoull_internal@plt>
   33028:	mov	r7, r1
   3302c:	ldr	r1, [r9]
   33030:	cmp	r1, r4
   33034:	beq	33060 <__assert_fail@plt+0x211cc>
   33038:	mov	r6, r0
   3303c:	ldr	r0, [r5]
   33040:	cmp	r0, #0
   33044:	beq	3309c <__assert_fail@plt+0x21208>
   33048:	cmp	r0, #34	; 0x22
   3304c:	bne	33c18 <__assert_fail@plt+0x21d84>
   33050:	mov	r8, #1
   33054:	cmp	sl, #0
   33058:	bne	330a8 <__assert_fail@plt+0x21214>
   3305c:	b	33c10 <__assert_fail@plt+0x21d7c>
   33060:	cmp	sl, #0
   33064:	beq	33c18 <__assert_fail@plt+0x21d84>
   33068:	mov	r5, r1
   3306c:	ldrb	r1, [r4]
   33070:	cmp	r1, #0
   33074:	beq	33c18 <__assert_fail@plt+0x21d84>
   33078:	mov	r0, sl
   3307c:	bl	11c84 <strchr@plt>
   33080:	cmp	r0, #0
   33084:	beq	33c18 <__assert_fail@plt+0x21d84>
   33088:	mov	r1, r5
   3308c:	mov	r8, #0
   33090:	mov	r6, #1
   33094:	mov	r7, #0
   33098:	b	330a8 <__assert_fail@plt+0x21214>
   3309c:	mov	r8, r0
   330a0:	cmp	sl, #0
   330a4:	beq	33c10 <__assert_fail@plt+0x21d7c>
   330a8:	ldrb	r4, [r1]
   330ac:	cmp	r4, #0
   330b0:	beq	33c10 <__assert_fail@plt+0x21d7c>
   330b4:	str	r1, [sp, #32]
   330b8:	mov	r0, sl
   330bc:	mov	r1, r4
   330c0:	bl	11c84 <strchr@plt>
   330c4:	cmp	r0, #0
   330c8:	beq	33390 <__assert_fail@plt+0x214fc>
   330cc:	sub	r0, r4, #69	; 0x45
   330d0:	mov	r1, #1
   330d4:	mov	r3, #0
   330d8:	mov	r5, #1024	; 0x400
   330dc:	cmp	r0, #47	; 0x2f
   330e0:	str	r1, [sp, #28]
   330e4:	bhi	331e8 <__assert_fail@plt+0x21354>
   330e8:	add	r1, pc, #0
   330ec:	ldr	pc, [r1, r0, lsl #2]
   330f0:			; <UNDEFINED> instruction: 0x000331b0
   330f4:	andeq	r3, r3, r8, ror #3
   330f8:			; <UNDEFINED> instruction: 0x000331b0
   330fc:	andeq	r3, r3, r8, ror #3
   33100:	andeq	r3, r3, r8, ror #3
   33104:	andeq	r3, r3, r8, ror #3
   33108:			; <UNDEFINED> instruction: 0x000331b0
   3310c:	andeq	r3, r3, r8, ror #3
   33110:			; <UNDEFINED> instruction: 0x000331b0
   33114:	andeq	r3, r3, r8, ror #3
   33118:	andeq	r3, r3, r8, ror #3
   3311c:			; <UNDEFINED> instruction: 0x000331b0
   33120:	andeq	r3, r3, r8, ror #3
   33124:	andeq	r3, r3, r8, ror #3
   33128:	andeq	r3, r3, r8, ror #3
   3312c:			; <UNDEFINED> instruction: 0x000331b0
   33130:	andeq	r3, r3, r8, ror #3
   33134:	andeq	r3, r3, r8, ror #3
   33138:	andeq	r3, r3, r8, ror #3
   3313c:	andeq	r3, r3, r8, ror #3
   33140:			; <UNDEFINED> instruction: 0x000331b0
   33144:			; <UNDEFINED> instruction: 0x000331b0
   33148:	andeq	r3, r3, r8, ror #3
   3314c:	andeq	r3, r3, r8, ror #3
   33150:	andeq	r3, r3, r8, ror #3
   33154:	andeq	r3, r3, r8, ror #3
   33158:	andeq	r3, r3, r8, ror #3
   3315c:	andeq	r3, r3, r8, ror #3
   33160:	andeq	r3, r3, r8, ror #3
   33164:	andeq	r3, r3, r8, ror #3
   33168:	andeq	r3, r3, r8, ror #3
   3316c:	andeq	r3, r3, r8, ror #3
   33170:	andeq	r3, r3, r8, ror #3
   33174:	andeq	r3, r3, r8, ror #3
   33178:			; <UNDEFINED> instruction: 0x000331b0
   3317c:	andeq	r3, r3, r8, ror #3
   33180:	andeq	r3, r3, r8, ror #3
   33184:	andeq	r3, r3, r8, ror #3
   33188:			; <UNDEFINED> instruction: 0x000331b0
   3318c:	andeq	r3, r3, r8, ror #3
   33190:			; <UNDEFINED> instruction: 0x000331b0
   33194:	andeq	r3, r3, r8, ror #3
   33198:	andeq	r3, r3, r8, ror #3
   3319c:	andeq	r3, r3, r8, ror #3
   331a0:	andeq	r3, r3, r8, ror #3
   331a4:	andeq	r3, r3, r8, ror #3
   331a8:	andeq	r3, r3, r8, ror #3
   331ac:			; <UNDEFINED> instruction: 0x000331b0
   331b0:	mov	r0, sl
   331b4:	mov	r1, #48	; 0x30
   331b8:	bl	11c84 <strchr@plt>
   331bc:	cmp	r0, #0
   331c0:	beq	331e4 <__assert_fail@plt+0x21350>
   331c4:	ldr	r1, [sp, #32]
   331c8:	ldrb	r0, [r1, #1]
   331cc:	cmp	r0, #66	; 0x42
   331d0:	cmpne	r0, #68	; 0x44
   331d4:	bne	3339c <__assert_fail@plt+0x21508>
   331d8:	mov	r5, #1000	; 0x3e8
   331dc:	mov	r0, #2
   331e0:	str	r0, [sp, #28]
   331e4:	mov	r3, #0
   331e8:	sub	r0, r4, #66	; 0x42
   331ec:	cmp	r0, #53	; 0x35
   331f0:	bhi	33390 <__assert_fail@plt+0x214fc>
   331f4:	add	r1, pc, #0
   331f8:	ldr	pc, [r1, r0, lsl #2]
   331fc:	andeq	r3, r3, r8, lsl r7
   33200:	muleq	r3, r0, r3
   33204:	muleq	r3, r0, r3
   33208:	andeq	r3, r3, r0, asr #14
   3320c:	muleq	r3, r0, r3
   33210:	ldrdeq	r3, [r3], -r4
   33214:	muleq	r3, r0, r3
   33218:	muleq	r3, r0, r3
   3321c:	muleq	r3, r0, r3
   33220:	andeq	r3, r3, r0, asr #7
   33224:	muleq	r3, r0, r3
   33228:	andeq	r3, r3, r8, lsl #8
   3322c:	muleq	r3, r0, r3
   33230:	muleq	r3, r0, r3
   33234:	muleq	r3, r8, r8
   33238:	muleq	r3, r0, r3
   3323c:	muleq	r3, r0, r3
   33240:	muleq	r3, r0, r3
   33244:	muleq	r3, r4, r4
   33248:	muleq	r3, r0, r3
   3324c:	muleq	r3, r0, r3
   33250:	muleq	r3, r0, r3
   33254:	muleq	r3, r0, r3
   33258:	andeq	r3, r3, r0, asr #19
   3325c:	andeq	r3, r3, ip, ror r5
   33260:	muleq	r3, r0, r3
   33264:	muleq	r3, r0, r3
   33268:	muleq	r3, r0, r3
   3326c:	muleq	r3, r0, r3
   33270:	muleq	r3, r0, r3
   33274:	muleq	r3, r0, r3
   33278:	muleq	r3, r0, r3
   3327c:	muleq	r3, r8, fp
   33280:	strdeq	r3, [r3], -r0
   33284:	muleq	r3, r0, r3
   33288:	muleq	r3, r0, r3
   3328c:	muleq	r3, r0, r3
   33290:	ldrdeq	r3, [r3], -r4
   33294:	muleq	r3, r0, r3
   33298:	muleq	r3, r0, r3
   3329c:	muleq	r3, r0, r3
   332a0:	andeq	r3, r3, r0, asr #7
   332a4:	muleq	r3, r0, r3
   332a8:	andeq	r3, r3, r8, lsl #8
   332ac:	muleq	r3, r0, r3
   332b0:	muleq	r3, r0, r3
   332b4:	muleq	r3, r0, r3
   332b8:	muleq	r3, r0, r3
   332bc:	muleq	r3, r0, r3
   332c0:	muleq	r3, r0, r3
   332c4:	muleq	r3, r4, r4
   332c8:	muleq	r3, r0, r3
   332cc:	muleq	r3, r0, r3
   332d0:	andeq	r3, r3, ip, asr #23
   332d4:	mvn	r0, #0
   332d8:	mvn	r1, #0
   332dc:	mov	r2, r5
   332e0:	mov	sl, r3
   332e4:	bl	352f0 <__assert_fail@plt+0x2345c>
   332e8:	subs	r3, r0, r6
   332ec:	mov	lr, #0
   332f0:	umull	r4, r2, r6, r5
   332f4:	str	r1, [sp, #20]
   332f8:	sbcs	r3, r1, r7
   332fc:	mla	ip, r6, sl, r2
   33300:	mov	r2, r1
   33304:	movwcc	lr, #1
   33308:	mla	r7, r7, r5, ip
   3330c:	mov	r2, #0
   33310:	cmp	lr, #0
   33314:	mvnne	r4, #0
   33318:	mvnne	r7, #0
   3331c:	subs	r6, r0, r4
   33320:	sbcs	r6, r1, r7
   33324:	movwcc	r2, #1
   33328:	umull	r3, r6, r4, r5
   3332c:	cmp	r2, #0
   33330:	str	r6, [sp, #16]
   33334:	mvnne	r3, #0
   33338:	cmp	r2, #0
   3333c:	umull	r6, ip, r3, r5
   33340:	mla	r1, r3, sl, ip
   33344:	ldr	ip, [sp, #16]
   33348:	str	r1, [sp, #12]
   3334c:	mla	r4, r4, sl, ip
   33350:	mla	r4, r7, r5, r4
   33354:	ldr	r7, [sp, #12]
   33358:	mvnne	r4, #0
   3335c:	subs	r0, r0, r3
   33360:	ldr	r0, [sp, #20]
   33364:	mla	r7, r4, r5, r7
   33368:	sbcs	r0, r0, r4
   3336c:	mov	r0, #0
   33370:	movwcc	r0, #1
   33374:	cmp	r0, #0
   33378:	mov	r1, r0
   3337c:	orr	r0, lr, r2
   33380:	mvnne	r7, #0
   33384:	mvnne	r6, #0
   33388:	orr	r3, r0, r1
   3338c:	b	33bf0 <__assert_fail@plt+0x21d5c>
   33390:	ldr	r0, [sp, #36]	; 0x24
   33394:	orr	r8, r8, #2
   33398:	b	33c14 <__assert_fail@plt+0x21d80>
   3339c:	cmp	r0, #105	; 0x69
   333a0:	mov	r3, #0
   333a4:	bne	331e8 <__assert_fail@plt+0x21354>
   333a8:	ldrb	r0, [r1, #2]
   333ac:	mov	r1, #1
   333b0:	cmp	r0, #66	; 0x42
   333b4:	movweq	r1, #3
   333b8:	str	r1, [sp, #28]
   333bc:	b	331e8 <__assert_fail@plt+0x21354>
   333c0:	mvn	r0, #0
   333c4:	mvn	r1, #0
   333c8:	mov	r2, r5
   333cc:	mov	r4, r3
   333d0:	bl	352f0 <__assert_fail@plt+0x2345c>
   333d4:	subs	r0, r0, r6
   333d8:	mov	r2, #0
   333dc:	sbcs	r0, r1, r7
   333e0:	movwcc	r2, #1
   333e4:	umull	r0, r1, r6, r5
   333e8:	mla	r1, r6, r4, r1
   333ec:	cmp	r2, #0
   333f0:	mov	r3, r2
   333f4:	mla	r7, r7, r5, r1
   333f8:	mvnne	r0, #0
   333fc:	mvnne	r7, #0
   33400:	mov	r6, r0
   33404:	b	33bf0 <__assert_fail@plt+0x21d5c>
   33408:	mvn	r0, #0
   3340c:	mvn	r1, #0
   33410:	mov	r2, r5
   33414:	str	r3, [sp, #24]
   33418:	bl	352f0 <__assert_fail@plt+0x2345c>
   3341c:	subs	r3, r0, r6
   33420:	mov	ip, r0
   33424:	umull	r4, r0, r6, r5
   33428:	mov	sl, #0
   3342c:	sbcs	r3, r1, r7
   33430:	str	r0, [sp, #20]
   33434:	ldr	r0, [sp, #24]
   33438:	mov	r3, #0
   3343c:	movwcc	r3, #1
   33440:	cmp	r3, #0
   33444:	mvnne	r4, #0
   33448:	cmp	r3, #0
   3344c:	umull	lr, r2, r4, r5
   33450:	mla	r2, r4, r0, r2
   33454:	str	r2, [sp, #16]
   33458:	ldr	r2, [sp, #20]
   3345c:	mla	r6, r6, r0, r2
   33460:	ldr	r0, [sp, #16]
   33464:	mla	r6, r7, r5, r6
   33468:	mvnne	r6, #0
   3346c:	mla	r7, r6, r5, r0
   33470:	subs	r0, ip, r4
   33474:	sbcs	r0, r1, r6
   33478:	movwcc	sl, #1
   3347c:	cmp	sl, #0
   33480:	orr	r3, r3, sl
   33484:	mvnne	lr, #0
   33488:	mvnne	r7, #0
   3348c:	mov	r6, lr
   33490:	b	33bf0 <__assert_fail@plt+0x21d5c>
   33494:	mvn	r0, #0
   33498:	mvn	r1, #0
   3349c:	mov	r2, r5
   334a0:	mov	sl, r3
   334a4:	bl	352f0 <__assert_fail@plt+0x2345c>
   334a8:	subs	r3, r0, r6
   334ac:	mov	ip, r1
   334b0:	umull	r2, lr, r6, r5
   334b4:	str	r0, [sp, #20]
   334b8:	sbcs	r3, r1, r7
   334bc:	mov	r1, #0
   334c0:	mla	r6, r6, sl, lr
   334c4:	mov	lr, #0
   334c8:	str	ip, [sp, #16]
   334cc:	movwcc	r1, #1
   334d0:	mla	r7, r7, r5, r6
   334d4:	cmp	r1, #0
   334d8:	mvnne	r2, #0
   334dc:	cmp	r1, #0
   334e0:	umull	r3, r4, r2, r5
   334e4:	mvnne	r7, #0
   334e8:	mla	r4, r2, sl, r4
   334ec:	subs	r2, r0, r2
   334f0:	sbcs	r2, ip, r7
   334f4:	mla	r4, r7, r5, r4
   334f8:	movwcc	lr, #1
   334fc:	mov	r2, #0
   33500:	cmp	lr, #0
   33504:	mvnne	r3, #0
   33508:	mvnne	r4, #0
   3350c:	subs	r7, r0, r3
   33510:	mov	r0, r5
   33514:	sbcs	r7, ip, r4
   33518:	movwcc	r2, #1
   3351c:	umull	r5, r7, r3, r5
   33520:	cmp	r2, #0
   33524:	mla	r3, r3, sl, r7
   33528:	mvnne	r5, #0
   3352c:	mla	r3, r4, r0, r3
   33530:	cmp	r2, #0
   33534:	umull	r6, ip, r5, r0
   33538:	mvnne	r3, #0
   3353c:	mla	ip, r5, sl, ip
   33540:	mla	r7, r3, r0, ip
   33544:	ldr	r0, [sp, #20]
   33548:	subs	r0, r0, r5
   3354c:	ldr	r0, [sp, #16]
   33550:	sbcs	r0, r0, r3
   33554:	mov	r0, #0
   33558:	movwcc	r0, #1
   3355c:	cmp	r0, #0
   33560:	mov	r3, r0
   33564:	orr	r0, r1, lr
   33568:	orr	r0, r0, r2
   3356c:	mvnne	r7, #0
   33570:	mvnne	r6, #0
   33574:	orr	r3, r0, r3
   33578:	b	33bf0 <__assert_fail@plt+0x21d5c>
   3357c:	mvn	r0, #0
   33580:	mvn	r1, #0
   33584:	mov	r2, r5
   33588:	mov	r4, r3
   3358c:	str	r3, [sp, #24]
   33590:	bl	352f0 <__assert_fail@plt+0x2345c>
   33594:	umull	r3, r2, r6, r5
   33598:	mla	r2, r6, r4, r2
   3359c:	subs	r6, r0, r6
   335a0:	sbcs	r6, r1, r7
   335a4:	mla	ip, r7, r5, r2
   335a8:	ldr	r2, [sp, #24]
   335ac:	mov	r6, #0
   335b0:	movwcc	r6, #1
   335b4:	cmp	r6, #0
   335b8:	str	r6, [sp, #20]
   335bc:	mov	r6, #0
   335c0:	mvnne	r3, #0
   335c4:	mvnne	ip, #0
   335c8:	subs	r4, r0, r3
   335cc:	umull	r7, lr, r3, r5
   335d0:	sbcs	r4, r1, ip
   335d4:	mla	r3, r3, r2, lr
   335d8:	movwcc	r6, #1
   335dc:	cmp	r6, #0
   335e0:	str	r6, [sp, #16]
   335e4:	mvnne	r7, #0
   335e8:	cmp	r6, #0
   335ec:	umull	sl, r4, r7, r5
   335f0:	mla	r4, r7, r2, r4
   335f4:	mla	r2, ip, r5, r3
   335f8:	mov	ip, #0
   335fc:	mvnne	r2, #0
   33600:	subs	r3, r0, r7
   33604:	mla	r6, r2, r5, r4
   33608:	mov	r4, r0
   3360c:	sbcs	r2, r1, r2
   33610:	mov	r0, #0
   33614:	movwcc	r0, #1
   33618:	mov	r3, r4
   3361c:	cmp	r0, #0
   33620:	str	r0, [sp, #12]
   33624:	mov	r0, r1
   33628:	str	r3, [sp, #4]
   3362c:	mvnne	sl, #0
   33630:	mvnne	r6, #0
   33634:	str	r0, [sp, #8]
   33638:	subs	r2, r4, sl
   3363c:	ldr	r4, [sp, #24]
   33640:	sbcs	r2, r1, r6
   33644:	movwcc	ip, #1
   33648:	umull	r7, r2, sl, r5
   3364c:	cmp	ip, #0
   33650:	mla	r2, sl, r4, r2
   33654:	mvnne	r7, #0
   33658:	cmp	ip, #0
   3365c:	mov	sl, #0
   33660:	umull	r1, lr, r7, r5
   33664:	mla	r2, r6, r5, r2
   33668:	mvnne	r2, #0
   3366c:	mla	lr, r7, r4, lr
   33670:	subs	r6, r3, r7
   33674:	mla	lr, r2, r5, lr
   33678:	sbcs	r2, r0, r2
   3367c:	movwcc	sl, #1
   33680:	mov	r2, #0
   33684:	cmp	sl, #0
   33688:	mvnne	r1, #0
   3368c:	mvnne	lr, #0
   33690:	subs	r6, r3, r1
   33694:	ldr	r3, [sp, #24]
   33698:	sbcs	r6, r0, lr
   3369c:	umull	r0, r7, r1, r5
   336a0:	movwcc	r2, #1
   336a4:	cmp	r2, #0
   336a8:	mvnne	r0, #0
   336ac:	mla	r1, r1, r3, r7
   336b0:	cmp	r2, #0
   336b4:	umull	r6, r4, r0, r5
   336b8:	mla	r1, lr, r5, r1
   336bc:	mla	r4, r0, r3, r4
   336c0:	ldr	r3, [sp, #4]
   336c4:	mvnne	r1, #0
   336c8:	mla	r7, r1, r5, r4
   336cc:	ldr	r5, [sp, #16]
   336d0:	subs	r0, r3, r0
   336d4:	ldr	r0, [sp, #8]
   336d8:	sbcs	r0, r0, r1
   336dc:	mov	r0, #0
   336e0:	movwcc	r0, #1
   336e4:	cmp	r0, #0
   336e8:	mov	r1, r0
   336ec:	ldr	r0, [sp, #20]
   336f0:	mvnne	r7, #0
   336f4:	mvnne	r6, #0
   336f8:	orr	r0, r0, r5
   336fc:	ldr	r5, [sp, #12]
   33700:	orr	r0, r0, r5
   33704:	orr	r0, r0, ip
   33708:	orr	r0, r0, sl
   3370c:	orr	r0, r0, r2
   33710:	orr	r0, r0, r1
   33714:	b	33b90 <__assert_fail@plt+0x21cfc>
   33718:	mov	r1, #0
   3371c:	lsl	r2, r7, #10
   33720:	lsl	r0, r6, #10
   33724:	lsr	r3, r7, #22
   33728:	cmp	r1, r7, lsr #22
   3372c:	orr	r2, r2, r6, lsr #22
   33730:	mvnne	r0, #0
   33734:	movwne	r3, #1
   33738:	cmp	r1, r7, lsr #22
   3373c:	b	33bbc <__assert_fail@plt+0x21d28>
   33740:	mvn	r0, #0
   33744:	mvn	r1, #0
   33748:	mov	r2, r5
   3374c:	mov	sl, r3
   33750:	bl	352f0 <__assert_fail@plt+0x2345c>
   33754:	subs	r2, r0, r6
   33758:	mov	ip, r0
   3375c:	mov	r0, #0
   33760:	sbcs	r2, r1, r7
   33764:	movwcc	r0, #1
   33768:	umull	r4, r2, r6, r5
   3376c:	cmp	r0, #0
   33770:	mla	r2, r6, sl, r2
   33774:	str	r0, [sp, #20]
   33778:	mvnne	r4, #0
   3377c:	cmp	r0, #0
   33780:	mla	r2, r7, r5, r2
   33784:	mov	r0, #0
   33788:	umull	lr, r3, r4, r5
   3378c:	mvnne	r2, #0
   33790:	mla	r3, r4, sl, r3
   33794:	mla	r6, r2, r5, r3
   33798:	subs	r3, ip, r4
   3379c:	sbcs	r2, r1, r2
   337a0:	mov	r3, r1
   337a4:	movwcc	r0, #1
   337a8:	str	r3, [sp, #8]
   337ac:	cmp	r0, #0
   337b0:	str	r0, [sp, #16]
   337b4:	mov	r0, ip
   337b8:	mvnne	lr, #0
   337bc:	mvnne	r6, #0
   337c0:	str	r0, [sp, #12]
   337c4:	subs	r2, ip, lr
   337c8:	umull	r7, r4, lr, r5
   337cc:	sbcs	r2, r1, r6
   337d0:	mla	r4, lr, sl, r4
   337d4:	mov	r2, #0
   337d8:	mla	r6, r6, r5, r4
   337dc:	mov	r4, #0
   337e0:	movwcc	r2, #1
   337e4:	cmp	r2, #0
   337e8:	mvnne	r7, #0
   337ec:	cmp	r2, #0
   337f0:	umull	r1, ip, r7, r5
   337f4:	mvnne	r6, #0
   337f8:	mla	ip, r7, sl, ip
   337fc:	subs	r7, r0, r7
   33800:	mla	lr, r6, r5, ip
   33804:	sbcs	r7, r3, r6
   33808:	mov	ip, #0
   3380c:	movwcc	ip, #1
   33810:	cmp	ip, #0
   33814:	mvnne	r1, #0
   33818:	mvnne	lr, #0
   3381c:	subs	r7, r0, r1
   33820:	sbcs	r7, r3, lr
   33824:	movwcc	r4, #1
   33828:	umull	r0, r7, r1, r5
   3382c:	cmp	r4, #0
   33830:	mla	r1, r1, sl, r7
   33834:	mvnne	r0, #0
   33838:	mla	r1, lr, r5, r1
   3383c:	cmp	r4, #0
   33840:	umull	r6, r3, r0, r5
   33844:	mvnne	r1, #0
   33848:	mla	r3, r0, sl, r3
   3384c:	mla	r7, r1, r5, r3
   33850:	ldr	r3, [sp, #12]
   33854:	subs	r0, r3, r0
   33858:	ldr	r3, [sp, #16]
   3385c:	ldr	r0, [sp, #8]
   33860:	sbcs	r0, r0, r1
   33864:	mov	r0, #0
   33868:	movwcc	r0, #1
   3386c:	cmp	r0, #0
   33870:	mov	r1, r0
   33874:	ldr	r0, [sp, #20]
   33878:	mvnne	r7, #0
   3387c:	mvnne	r6, #0
   33880:	orr	r0, r0, r3
   33884:	orr	r0, r0, r2
   33888:	orr	r0, r0, ip
   3388c:	orr	r0, r0, r4
   33890:	orr	r3, r0, r1
   33894:	b	33bf0 <__assert_fail@plt+0x21d5c>
   33898:	mvn	r0, #0
   3389c:	mvn	r1, #0
   338a0:	mov	r2, r5
   338a4:	mov	sl, r3
   338a8:	bl	352f0 <__assert_fail@plt+0x2345c>
   338ac:	umull	r3, r2, r6, r5
   338b0:	mov	lr, r1
   338b4:	mov	r1, r0
   338b8:	mla	r2, r6, sl, r2
   338bc:	subs	r6, r0, r6
   338c0:	mov	r0, #0
   338c4:	sbcs	r6, lr, r7
   338c8:	mla	r2, r7, r5, r2
   338cc:	movwcc	r0, #1
   338d0:	cmp	r0, #0
   338d4:	str	r0, [sp, #20]
   338d8:	mov	r0, r1
   338dc:	mvnne	r3, #0
   338e0:	mvnne	r2, #0
   338e4:	str	r0, [sp, #16]
   338e8:	subs	r4, r1, r3
   338ec:	umull	r7, ip, r3, r5
   338f0:	sbcs	r4, lr, r2
   338f4:	mla	r3, r3, sl, ip
   338f8:	mov	ip, #0
   338fc:	mov	r4, #0
   33900:	mla	r2, r2, r5, r3
   33904:	movwcc	r4, #1
   33908:	cmp	r4, #0
   3390c:	mvnne	r7, #0
   33910:	cmp	r4, #0
   33914:	umull	r1, r6, r7, r5
   33918:	mvnne	r2, #0
   3391c:	mla	r6, r7, sl, r6
   33920:	mla	r3, r2, r5, r6
   33924:	subs	r6, r0, r7
   33928:	sbcs	r2, lr, r2
   3392c:	movwcc	ip, #1
   33930:	mov	r2, #0
   33934:	cmp	ip, #0
   33938:	mvnne	r1, #0
   3393c:	mvnne	r3, #0
   33940:	subs	r6, r0, r1
   33944:	sbcs	r6, lr, r3
   33948:	movwcc	r2, #1
   3394c:	umull	r0, r6, r1, r5
   33950:	cmp	r2, #0
   33954:	str	r6, [sp, #12]
   33958:	mvnne	r0, #0
   3395c:	cmp	r2, #0
   33960:	umull	r6, r7, r0, r5
   33964:	mla	r7, r0, sl, r7
   33968:	str	r7, [sp, #8]
   3396c:	ldr	r7, [sp, #12]
   33970:	mla	r1, r1, sl, r7
   33974:	mla	r1, r3, r5, r1
   33978:	ldr	r3, [sp, #8]
   3397c:	mvnne	r1, #0
   33980:	mla	r7, r1, r5, r3
   33984:	ldr	r3, [sp, #16]
   33988:	subs	r0, r3, r0
   3398c:	sbcs	r0, lr, r1
   33990:	mov	r0, #0
   33994:	movwcc	r0, #1
   33998:	cmp	r0, #0
   3399c:	mov	r1, r0
   339a0:	ldr	r0, [sp, #20]
   339a4:	mvnne	r7, #0
   339a8:	mvnne	r6, #0
   339ac:	orr	r0, r0, r4
   339b0:	orr	r0, r0, ip
   339b4:	orr	r0, r0, r2
   339b8:	orr	r3, r0, r1
   339bc:	b	33bf0 <__assert_fail@plt+0x21d5c>
   339c0:	mvn	r0, #0
   339c4:	mvn	r1, #0
   339c8:	mov	r2, r5
   339cc:	mov	sl, r3
   339d0:	bl	352f0 <__assert_fail@plt+0x2345c>
   339d4:	mov	lr, r0
   339d8:	subs	r0, r0, r6
   339dc:	mov	r2, #0
   339e0:	mov	ip, r1
   339e4:	str	sl, [sp, #24]
   339e8:	sbcs	r0, r1, r7
   339ec:	umull	r3, r1, r6, r5
   339f0:	str	lr, [sp, #4]
   339f4:	movwcc	r2, #1
   339f8:	mla	r6, r6, sl, r1
   339fc:	mov	r1, #0
   33a00:	cmp	r2, #0
   33a04:	mla	r7, r7, r5, r6
   33a08:	str	r2, [sp, #20]
   33a0c:	mvnne	r3, #0
   33a10:	cmp	r2, #0
   33a14:	mov	r2, #0
   33a18:	umull	r0, r4, r3, r5
   33a1c:	mvnne	r7, #0
   33a20:	mla	r4, r3, sl, r4
   33a24:	subs	r3, lr, r3
   33a28:	sbcs	r3, ip, r7
   33a2c:	mla	r4, r7, r5, r4
   33a30:	movwcc	r1, #1
   33a34:	cmp	r1, #0
   33a38:	str	r1, [sp, #16]
   33a3c:	mvnne	r0, #0
   33a40:	mvnne	r4, #0
   33a44:	subs	r3, lr, r0
   33a48:	sbcs	r3, ip, r4
   33a4c:	movwcc	r2, #1
   33a50:	umull	r6, r3, r0, r5
   33a54:	cmp	r2, #0
   33a58:	mla	r0, r0, sl, r3
   33a5c:	str	r2, [sp, #12]
   33a60:	mvnne	r6, #0
   33a64:	mla	r0, r4, r5, r0
   33a68:	cmp	r2, #0
   33a6c:	ldr	r4, [sp, #24]
   33a70:	umull	r1, r7, r6, r5
   33a74:	mvnne	r0, #0
   33a78:	subs	r3, lr, r6
   33a7c:	mla	r7, r6, sl, r7
   33a80:	mov	r3, ip
   33a84:	mla	r7, r0, r5, r7
   33a88:	sbcs	r0, ip, r0
   33a8c:	str	r3, [sp]
   33a90:	mov	r0, #0
   33a94:	movwcc	r0, #1
   33a98:	cmp	r0, #0
   33a9c:	str	r0, [sp, #8]
   33aa0:	mvnne	r1, #0
   33aa4:	mvnne	r7, #0
   33aa8:	subs	r0, lr, r1
   33aac:	sbcs	r0, ip, r7
   33ab0:	mov	ip, #0
   33ab4:	movwcc	ip, #1
   33ab8:	umull	r6, r0, r1, r5
   33abc:	cmp	ip, #0
   33ac0:	mla	r1, r1, r4, r0
   33ac4:	mov	r0, lr
   33ac8:	mvnne	r6, #0
   33acc:	mla	r1, r7, r5, r1
   33ad0:	cmp	ip, #0
   33ad4:	umull	r2, sl, r6, r5
   33ad8:	mvnne	r1, #0
   33adc:	mla	sl, r6, r4, sl
   33ae0:	subs	r6, lr, r6
   33ae4:	mov	lr, #0
   33ae8:	mla	r7, r1, r5, sl
   33aec:	sbcs	r1, r3, r1
   33af0:	movwcc	lr, #1
   33af4:	ldr	r1, [sp, #24]
   33af8:	cmp	lr, #0
   33afc:	mvnne	r2, #0
   33b00:	mvnne	r7, #0
   33b04:	subs	r6, r0, r2
   33b08:	umull	r0, sl, r2, r5
   33b0c:	sbcs	r6, r3, r7
   33b10:	mov	r3, #0
   33b14:	mla	r2, r2, r1, sl
   33b18:	movwcc	r3, #1
   33b1c:	mla	r2, r7, r5, r2
   33b20:	cmp	r3, #0
   33b24:	mvnne	r0, #0
   33b28:	cmp	r3, #0
   33b2c:	umull	r6, r4, r0, r5
   33b30:	mvnne	r2, #0
   33b34:	mla	r4, r0, r1, r4
   33b38:	ldr	r1, [sp, #4]
   33b3c:	mla	r7, r2, r5, r4
   33b40:	ldr	r5, [sp, #16]
   33b44:	subs	r0, r1, r0
   33b48:	ldr	r0, [sp]
   33b4c:	sbcs	r0, r0, r2
   33b50:	mov	r0, #0
   33b54:	movwcc	r0, #1
   33b58:	cmp	r0, #0
   33b5c:	mov	r2, r0
   33b60:	ldr	r0, [sp, #20]
   33b64:	mvnne	r7, #0
   33b68:	mvnne	r6, #0
   33b6c:	orr	r0, r0, r5
   33b70:	ldr	r5, [sp, #12]
   33b74:	orr	r0, r0, r5
   33b78:	ldr	r5, [sp, #8]
   33b7c:	orr	r0, r0, r5
   33b80:	orr	r0, r0, ip
   33b84:	orr	r0, r0, lr
   33b88:	orr	r0, r0, r3
   33b8c:	orr	r0, r0, r2
   33b90:	and	r3, r0, #1
   33b94:	b	33bf0 <__assert_fail@plt+0x21d5c>
   33b98:	mov	r1, #0
   33b9c:	lsl	r2, r7, #9
   33ba0:	lsl	r0, r6, #9
   33ba4:	lsr	r3, r7, #23
   33ba8:	cmp	r1, r7, lsr #23
   33bac:	orr	r2, r2, r6, lsr #23
   33bb0:	mvnne	r0, #0
   33bb4:	movwne	r3, #1
   33bb8:	cmp	r1, r7, lsr #23
   33bbc:	mvnne	r2, #0
   33bc0:	mov	r6, r0
   33bc4:	mov	r7, r2
   33bc8:	b	33bf0 <__assert_fail@plt+0x21d5c>
   33bcc:	lsl	r1, r7, #1
   33bd0:	lsl	r0, r6, #1
   33bd4:	cmp	r7, #0
   33bd8:	lsr	r3, r7, #31
   33bdc:	orr	r1, r1, r6, lsr #31
   33be0:	mvnlt	r0, #0
   33be4:	mvnlt	r1, #0
   33be8:	mov	r6, r0
   33bec:	mov	r7, r1
   33bf0:	ldr	r1, [sp, #32]
   33bf4:	ldr	r2, [sp, #28]
   33bf8:	orr	r8, r3, r8
   33bfc:	add	r0, r1, r2
   33c00:	str	r0, [r9]
   33c04:	ldrb	r0, [r1, r2]
   33c08:	cmp	r0, #0
   33c0c:	orrne	r8, r8, #2
   33c10:	ldr	r0, [sp, #36]	; 0x24
   33c14:	strd	r6, [r0]
   33c18:	mov	r0, r8
   33c1c:	sub	sp, fp, #28
   33c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c24:	movw	r0, #30307	; 0x7663
   33c28:	movw	r1, #30345	; 0x7689
   33c2c:	movw	r3, #30552	; 0x7758
   33c30:	mov	r2, #85	; 0x55
   33c34:	movt	r0, #3
   33c38:	movt	r1, #3
   33c3c:	movt	r3, #3
   33c40:	bl	11e94 <__assert_fail@plt>
   33c44:	clz	r2, r1
   33c48:	clz	r3, r0
   33c4c:	lsr	r2, r2, #5
   33c50:	lsr	r3, r3, #5
   33c54:	orrs	r2, r3, r2
   33c58:	movwne	r1, #1
   33c5c:	movwne	r0, #1
   33c60:	cmp	r1, #0
   33c64:	beq	33c94 <__assert_fail@plt+0x21e00>
   33c68:	mvn	r2, #-2147483648	; 0x80000000
   33c6c:	udiv	r2, r2, r1
   33c70:	cmp	r2, r0
   33c74:	bcs	33c94 <__assert_fail@plt+0x21e00>
   33c78:	push	{fp, lr}
   33c7c:	mov	fp, sp
   33c80:	bl	11ca8 <__errno_location@plt>
   33c84:	mov	r1, #12
   33c88:	str	r1, [r0]
   33c8c:	mov	r0, #0
   33c90:	pop	{fp, pc}
   33c94:	b	119b4 <calloc@plt>
   33c98:	cmp	r0, #0
   33c9c:	movweq	r0, #1
   33ca0:	cmn	r0, #1
   33ca4:	ble	33cac <__assert_fail@plt+0x21e18>
   33ca8:	b	11be8 <malloc@plt>
   33cac:	push	{fp, lr}
   33cb0:	mov	fp, sp
   33cb4:	bl	11ca8 <__errno_location@plt>
   33cb8:	mov	r1, #12
   33cbc:	str	r1, [r0]
   33cc0:	mov	r0, #0
   33cc4:	pop	{fp, pc}
   33cc8:	push	{fp, lr}
   33ccc:	mov	fp, sp
   33cd0:	cmp	r0, #0
   33cd4:	beq	33cf0 <__assert_fail@plt+0x21e5c>
   33cd8:	cmp	r1, #0
   33cdc:	beq	33cfc <__assert_fail@plt+0x21e68>
   33ce0:	cmn	r1, #1
   33ce4:	ble	33d08 <__assert_fail@plt+0x21e74>
   33ce8:	pop	{fp, lr}
   33cec:	b	11aec <realloc@plt>
   33cf0:	mov	r0, r1
   33cf4:	pop	{fp, lr}
   33cf8:	b	33c98 <__assert_fail@plt+0x21e04>
   33cfc:	bl	17754 <__assert_fail@plt+0x58c0>
   33d00:	mov	r0, #0
   33d04:	pop	{fp, pc}
   33d08:	bl	11ca8 <__errno_location@plt>
   33d0c:	mov	r1, #12
   33d10:	str	r1, [r0]
   33d14:	mov	r0, #0
   33d18:	pop	{fp, pc}
   33d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d20:	add	fp, sp, #28
   33d24:	sub	sp, sp, #36	; 0x24
   33d28:	sub	sp, sp, #1024	; 0x400
   33d2c:	ldrb	r3, [r0]
   33d30:	mov	r5, r0
   33d34:	cmp	r3, #0
   33d38:	beq	33dec <__assert_fail@plt+0x21f58>
   33d3c:	mov	r0, #1
   33d40:	mov	r2, #0
   33d44:	ldrb	r7, [r1, r2]
   33d48:	cmp	r7, #0
   33d4c:	uxtbne	r3, r3
   33d50:	subne	r3, r3, r7
   33d54:	clzne	r3, r3
   33d58:	lsrne	r3, r3, #5
   33d5c:	andne	r0, r0, r3
   33d60:	addne	r3, r5, r2
   33d64:	addne	r2, r2, #1
   33d68:	ldrbne	r3, [r3, #1]
   33d6c:	cmpne	r3, #0
   33d70:	bne	33d44 <__assert_fail@plt+0x21eb0>
   33d74:	add	r8, r1, r2
   33d78:	mov	r7, r5
   33d7c:	ldrb	r2, [r8]
   33d80:	cmp	r2, #0
   33d84:	movwne	r7, #0
   33d88:	tst	r0, #1
   33d8c:	cmpeq	r2, #0
   33d90:	bne	33dfc <__assert_fail@plt+0x21f68>
   33d94:	sub	r4, r8, r1
   33d98:	ldrb	r1, [r1]
   33d9c:	add	r0, r5, #1
   33da0:	bl	11c84 <strchr@plt>
   33da4:	cmp	r4, #1
   33da8:	beq	33e08 <__assert_fail@plt+0x21f74>
   33dac:	cmp	r0, #0
   33db0:	mov	r7, r0
   33db4:	beq	33dfc <__assert_fail@plt+0x21f68>
   33db8:	add	r1, r5, r4
   33dbc:	sub	r5, r8, r4
   33dc0:	str	r0, [sp, #24]
   33dc4:	str	r4, [sp, #28]
   33dc8:	subs	r9, r1, r0
   33dcc:	movwcc	r9, #1
   33dd0:	cmp	r4, #31
   33dd4:	bhi	33e10 <__assert_fail@plt+0x21f7c>
   33dd8:	cmp	r4, #3
   33ddc:	bcs	33f14 <__assert_fail@plt+0x22080>
   33de0:	sub	r6, r4, #1
   33de4:	mov	r4, #1
   33de8:	b	34528 <__assert_fail@plt+0x22694>
   33dec:	ldrb	r0, [r1]
   33df0:	cmp	r0, #0
   33df4:	movne	r5, #0
   33df8:	mov	r7, r5
   33dfc:	mov	r0, r7
   33e00:	sub	sp, fp, #28
   33e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e08:	mov	r7, r0
   33e0c:	b	33dfc <__assert_fail@plt+0x21f68>
   33e10:	mvn	r1, #0
   33e14:	mov	r0, #0
   33e18:	mov	r2, #1
   33e1c:	mov	ip, #1
   33e20:	mov	r3, #1
   33e24:	add	r6, r1, r3
   33e28:	ldrb	r7, [r5, r2]
   33e2c:	ldrb	r6, [r5, r6]
   33e30:	cmp	r7, r6
   33e34:	bcs	33e48 <__assert_fail@plt+0x21fb4>
   33e38:	sub	ip, r2, r1
   33e3c:	mov	r3, #1
   33e40:	mov	r0, r2
   33e44:	b	33e7c <__assert_fail@plt+0x21fe8>
   33e48:	bne	33e60 <__assert_fail@plt+0x21fcc>
   33e4c:	cmp	r3, ip
   33e50:	bne	33e78 <__assert_fail@plt+0x21fe4>
   33e54:	add	r0, r0, ip
   33e58:	mov	r3, #1
   33e5c:	b	33e7c <__assert_fail@plt+0x21fe8>
   33e60:	add	r2, r0, #1
   33e64:	mov	r1, r0
   33e68:	mov	r3, #1
   33e6c:	mov	ip, #1
   33e70:	mov	r0, r2
   33e74:	b	33e7c <__assert_fail@plt+0x21fe8>
   33e78:	add	r3, r3, #1
   33e7c:	add	r2, r3, r0
   33e80:	cmp	r2, r4
   33e84:	bcc	33e24 <__assert_fail@plt+0x21f90>
   33e88:	cmp	r4, #2
   33e8c:	bcc	34018 <__assert_fail@plt+0x22184>
   33e90:	mvn	lr, #0
   33e94:	mov	r2, #0
   33e98:	mov	r3, #1
   33e9c:	mov	sl, #1
   33ea0:	mov	r6, #1
   33ea4:	add	r7, lr, r6
   33ea8:	ldrb	r0, [r5, r3]
   33eac:	ldrb	r7, [r5, r7]
   33eb0:	cmp	r7, r0
   33eb4:	bcs	33ec8 <__assert_fail@plt+0x22034>
   33eb8:	sub	sl, r3, lr
   33ebc:	mov	r6, #1
   33ec0:	mov	r2, r3
   33ec4:	b	33f00 <__assert_fail@plt+0x2206c>
   33ec8:	cmp	r0, r7
   33ecc:	bne	33ee4 <__assert_fail@plt+0x22050>
   33ed0:	cmp	r6, sl
   33ed4:	bne	33efc <__assert_fail@plt+0x22068>
   33ed8:	add	r2, r2, sl
   33edc:	mov	r6, #1
   33ee0:	b	33f00 <__assert_fail@plt+0x2206c>
   33ee4:	add	r0, r2, #1
   33ee8:	mov	lr, r2
   33eec:	mov	r6, #1
   33ef0:	mov	sl, #1
   33ef4:	mov	r2, r0
   33ef8:	b	33f00 <__assert_fail@plt+0x2206c>
   33efc:	add	r6, r6, #1
   33f00:	ldr	r0, [sp, #28]
   33f04:	add	r3, r6, r2
   33f08:	cmp	r3, r0
   33f0c:	bcc	33ea4 <__assert_fail@plt+0x22010>
   33f10:	b	34020 <__assert_fail@plt+0x2218c>
   33f14:	mvn	r1, #0
   33f18:	mov	r0, #0
   33f1c:	mov	r2, #1
   33f20:	mov	ip, #1
   33f24:	mov	r3, #1
   33f28:	add	r6, r1, r3
   33f2c:	ldrb	r7, [r5, r2]
   33f30:	ldrb	r6, [r5, r6]
   33f34:	cmp	r7, r6
   33f38:	bcs	33f4c <__assert_fail@plt+0x220b8>
   33f3c:	sub	ip, r2, r1
   33f40:	mov	r3, #1
   33f44:	mov	r0, r2
   33f48:	b	33f80 <__assert_fail@plt+0x220ec>
   33f4c:	bne	33f64 <__assert_fail@plt+0x220d0>
   33f50:	cmp	r3, ip
   33f54:	bne	33f7c <__assert_fail@plt+0x220e8>
   33f58:	add	r0, r0, ip
   33f5c:	mov	r3, #1
   33f60:	b	33f80 <__assert_fail@plt+0x220ec>
   33f64:	add	r2, r0, #1
   33f68:	mov	r1, r0
   33f6c:	mov	r3, #1
   33f70:	mov	ip, #1
   33f74:	mov	r0, r2
   33f78:	b	33f80 <__assert_fail@plt+0x220ec>
   33f7c:	add	r3, r3, #1
   33f80:	add	r2, r3, r0
   33f84:	cmp	r2, r4
   33f88:	bcc	33f28 <__assert_fail@plt+0x22094>
   33f8c:	cmp	r4, #2
   33f90:	bcc	3450c <__assert_fail@plt+0x22678>
   33f94:	mvn	lr, #0
   33f98:	mov	r2, #0
   33f9c:	mov	r3, #1
   33fa0:	mov	r4, #1
   33fa4:	mov	r6, #1
   33fa8:	add	r7, lr, r6
   33fac:	ldrb	r0, [r5, r3]
   33fb0:	ldrb	r7, [r5, r7]
   33fb4:	cmp	r7, r0
   33fb8:	bcs	33fcc <__assert_fail@plt+0x22138>
   33fbc:	sub	r4, r3, lr
   33fc0:	mov	r6, #1
   33fc4:	mov	r2, r3
   33fc8:	b	34004 <__assert_fail@plt+0x22170>
   33fcc:	cmp	r0, r7
   33fd0:	bne	33fe8 <__assert_fail@plt+0x22154>
   33fd4:	cmp	r6, r4
   33fd8:	bne	34000 <__assert_fail@plt+0x2216c>
   33fdc:	add	r2, r2, r4
   33fe0:	mov	r6, #1
   33fe4:	b	34004 <__assert_fail@plt+0x22170>
   33fe8:	add	r0, r2, #1
   33fec:	mov	lr, r2
   33ff0:	mov	r6, #1
   33ff4:	mov	r4, #1
   33ff8:	mov	r2, r0
   33ffc:	b	34004 <__assert_fail@plt+0x22170>
   34000:	add	r6, r6, #1
   34004:	ldr	r0, [sp, #28]
   34008:	add	r3, r6, r2
   3400c:	cmp	r3, r0
   34010:	bcc	33fa8 <__assert_fail@plt+0x22114>
   34014:	b	34514 <__assert_fail@plt+0x22680>
   34018:	mov	sl, #1
   3401c:	mvn	lr, #0
   34020:	ldr	r2, [sp, #28]
   34024:	add	r6, sp, #32
   34028:	add	r0, r6, #16
   3402c:	mov	r3, r6
   34030:	vdup.32	q8, r2
   34034:	vst1.32	{d16-d17}, [r0]
   34038:	add	r0, r6, #32
   3403c:	vst1.32	{d16-d17}, [r0]
   34040:	add	r0, r6, #48	; 0x30
   34044:	vst1.32	{d16-d17}, [r0]
   34048:	add	r0, r6, #64	; 0x40
   3404c:	vst1.32	{d16-d17}, [r0]
   34050:	add	r0, r6, #80	; 0x50
   34054:	vst1.32	{d16-d17}, [r0]
   34058:	add	r0, r6, #96	; 0x60
   3405c:	vst1.32	{d16-d17}, [r0]
   34060:	add	r0, r6, #112	; 0x70
   34064:	vst1.32	{d16-d17}, [r0]
   34068:	add	r0, r6, #128	; 0x80
   3406c:	vst1.32	{d16-d17}, [r0]
   34070:	add	r0, r6, #144	; 0x90
   34074:	vst1.32	{d16-d17}, [r0]
   34078:	add	r0, r6, #160	; 0xa0
   3407c:	vst1.32	{d16-d17}, [r0]
   34080:	add	r0, r6, #176	; 0xb0
   34084:	vst1.32	{d16-d17}, [r0]
   34088:	add	r0, r6, #192	; 0xc0
   3408c:	vst1.32	{d16-d17}, [r0]
   34090:	add	r0, r6, #208	; 0xd0
   34094:	vst1.32	{d16-d17}, [r0]
   34098:	add	r0, r6, #224	; 0xe0
   3409c:	vst1.32	{d16-d17}, [r0]
   340a0:	add	r0, r6, #240	; 0xf0
   340a4:	vst1.32	{d16-d17}, [r0]
   340a8:	add	r0, r6, #256	; 0x100
   340ac:	vst1.32	{d16-d17}, [r0]
   340b0:	add	r0, r6, #272	; 0x110
   340b4:	vst1.32	{d16-d17}, [r0]
   340b8:	add	r0, r6, #288	; 0x120
   340bc:	vst1.32	{d16-d17}, [r0]
   340c0:	mov	r0, #1008	; 0x3f0
   340c4:	vst1.32	{d16-d17}, [r3], r0
   340c8:	add	r0, r6, #320	; 0x140
   340cc:	vst1.32	{d16-d17}, [r0]
   340d0:	add	r0, r6, #304	; 0x130
   340d4:	vst1.32	{d16-d17}, [r0]
   340d8:	add	r0, r6, #336	; 0x150
   340dc:	vst1.32	{d16-d17}, [r0]
   340e0:	add	r0, r6, #352	; 0x160
   340e4:	vst1.32	{d16-d17}, [r0]
   340e8:	add	r0, r6, #368	; 0x170
   340ec:	vst1.32	{d16-d17}, [r0]
   340f0:	add	r0, r6, #384	; 0x180
   340f4:	vst1.32	{d16-d17}, [r0]
   340f8:	add	r0, r6, #400	; 0x190
   340fc:	vst1.32	{d16-d17}, [r0]
   34100:	add	r0, r6, #416	; 0x1a0
   34104:	vst1.32	{d16-d17}, [r0]
   34108:	add	r0, r6, #432	; 0x1b0
   3410c:	vst1.32	{d16-d17}, [r0]
   34110:	add	r0, r6, #448	; 0x1c0
   34114:	vst1.32	{d16-d17}, [r0]
   34118:	add	r0, r6, #464	; 0x1d0
   3411c:	vst1.32	{d16-d17}, [r0]
   34120:	add	r0, r6, #480	; 0x1e0
   34124:	vst1.32	{d16-d17}, [r0]
   34128:	add	r0, r6, #496	; 0x1f0
   3412c:	vst1.32	{d16-d17}, [r0]
   34130:	add	r0, r6, #512	; 0x200
   34134:	vst1.32	{d16-d17}, [r0]
   34138:	add	r0, r6, #528	; 0x210
   3413c:	vst1.32	{d16-d17}, [r0]
   34140:	add	r0, r6, #544	; 0x220
   34144:	vst1.32	{d16-d17}, [r0]
   34148:	add	r0, r6, #560	; 0x230
   3414c:	vst1.32	{d16-d17}, [r0]
   34150:	add	r0, r6, #576	; 0x240
   34154:	vst1.32	{d16-d17}, [r0]
   34158:	add	r0, r6, #592	; 0x250
   3415c:	vst1.32	{d16-d17}, [r0]
   34160:	add	r0, r6, #624	; 0x270
   34164:	vst1.32	{d16-d17}, [r0]
   34168:	add	r0, r6, #608	; 0x260
   3416c:	vst1.32	{d16-d17}, [r0]
   34170:	add	r0, r6, #640	; 0x280
   34174:	vst1.32	{d16-d17}, [r0]
   34178:	add	r0, r6, #656	; 0x290
   3417c:	vst1.32	{d16-d17}, [r0]
   34180:	add	r0, r6, #672	; 0x2a0
   34184:	vst1.32	{d16-d17}, [r0]
   34188:	add	r0, r6, #688	; 0x2b0
   3418c:	vst1.32	{d16-d17}, [r0]
   34190:	add	r0, r6, #704	; 0x2c0
   34194:	vst1.32	{d16-d17}, [r0]
   34198:	add	r0, r6, #720	; 0x2d0
   3419c:	vst1.32	{d16-d17}, [r0]
   341a0:	add	r0, r6, #736	; 0x2e0
   341a4:	vst1.32	{d16-d17}, [r0]
   341a8:	add	r0, r6, #752	; 0x2f0
   341ac:	vst1.32	{d16-d17}, [r0]
   341b0:	add	r0, r6, #768	; 0x300
   341b4:	vst1.32	{d16-d17}, [r0]
   341b8:	add	r0, r6, #784	; 0x310
   341bc:	vst1.32	{d16-d17}, [r0]
   341c0:	add	r0, r6, #800	; 0x320
   341c4:	vst1.32	{d16-d17}, [r0]
   341c8:	add	r0, r6, #816	; 0x330
   341cc:	vst1.32	{d16-d17}, [r0]
   341d0:	add	r0, r6, #832	; 0x340
   341d4:	vst1.32	{d16-d17}, [r0]
   341d8:	add	r0, r6, #848	; 0x350
   341dc:	vst1.32	{d16-d17}, [r0]
   341e0:	add	r0, r6, #864	; 0x360
   341e4:	vst1.32	{d16-d17}, [r0]
   341e8:	add	r0, r6, #880	; 0x370
   341ec:	vst1.32	{d16-d17}, [r0]
   341f0:	add	r0, r6, #896	; 0x380
   341f4:	vst1.32	{d16-d17}, [r0]
   341f8:	add	r0, r6, #928	; 0x3a0
   341fc:	vst1.32	{d16-d17}, [r0]
   34200:	add	r0, r6, #912	; 0x390
   34204:	vst1.32	{d16-d17}, [r0]
   34208:	add	r0, r6, #944	; 0x3b0
   3420c:	vst1.32	{d16-d17}, [r0]
   34210:	add	r0, r6, #960	; 0x3c0
   34214:	vst1.32	{d16-d17}, [r0]
   34218:	add	r0, r6, #976	; 0x3d0
   3421c:	vst1.32	{d16-d17}, [r0]
   34220:	add	r0, r6, #992	; 0x3e0
   34224:	vst1.32	{d16-d17}, [r0]
   34228:	vst1.32	{d16-d17}, [r3]
   3422c:	add	r0, r1, #1
   34230:	add	r3, lr, #1
   34234:	cmp	r3, r0
   34238:	movcc	sl, ip
   3423c:	movcc	r3, r0
   34240:	cmp	r2, #0
   34244:	beq	3425c <__assert_fail@plt+0x223c8>
   34248:	mov	r0, r2
   3424c:	ldrb	r1, [r8, -r0]
   34250:	subs	r0, r0, #1
   34254:	str	r0, [r6, r1, lsl #2]
   34258:	bne	3424c <__assert_fail@plt+0x223b8>
   3425c:	add	r1, r5, sl
   34260:	mov	r0, r5
   34264:	mov	r2, r3
   34268:	mov	r4, r3
   3426c:	bl	11ac8 <memcmp@plt>
   34270:	cmp	r0, #0
   34274:	str	r4, [sp, #20]
   34278:	beq	343a0 <__assert_fail@plt+0x2250c>
   3427c:	ldr	r0, [sp, #24]
   34280:	ldr	r8, [sp, #28]
   34284:	mov	r1, #0
   34288:	mov	r7, #0
   3428c:	add	r0, r0, r9
   34290:	sub	r2, r8, r9
   34294:	bl	11d14 <memchr@plt>
   34298:	sub	r1, r8, r4
   3429c:	cmp	r4, r1
   342a0:	movcs	r1, r4
   342a4:	cmp	r8, #0
   342a8:	str	r1, [sp, #16]
   342ac:	beq	33dfc <__assert_fail@plt+0x21f68>
   342b0:	mov	r1, r4
   342b4:	ldr	r4, [sp, #24]
   342b8:	cmp	r0, #0
   342bc:	bne	33dfc <__assert_fail@plt+0x21f68>
   342c0:	mov	ip, r8
   342c4:	add	r0, r4, r1
   342c8:	sub	sl, r8, #1
   342cc:	add	r9, r5, r1
   342d0:	mov	r8, #0
   342d4:	str	r0, [sp, #8]
   342d8:	rsb	r0, r1, #1
   342dc:	mov	lr, ip
   342e0:	str	r0, [sp, #12]
   342e4:	add	r0, r4, lr
   342e8:	ldrb	r2, [r0, #-1]
   342ec:	ldr	r2, [r6, r2, lsl #2]
   342f0:	cmp	r2, #0
   342f4:	beq	34300 <__assert_fail@plt+0x2246c>
   342f8:	add	r8, r2, r8
   342fc:	b	34364 <__assert_fail@plt+0x224d0>
   34300:	cmp	r1, sl
   34304:	bcs	34334 <__assert_fail@plt+0x224a0>
   34308:	ldr	r2, [sp, #8]
   3430c:	add	r3, r2, r8
   34310:	mov	r2, #0
   34314:	ldrb	r7, [r3, r2]
   34318:	ldrb	r6, [r9, r2]
   3431c:	cmp	r6, r7
   34320:	bne	3435c <__assert_fail@plt+0x224c8>
   34324:	add	r2, r2, #1
   34328:	add	r7, r1, r2
   3432c:	cmp	r7, sl
   34330:	bcc	34314 <__assert_fail@plt+0x22480>
   34334:	ldr	r2, [sp, #12]
   34338:	add	r7, r4, r8
   3433c:	cmp	r2, #1
   34340:	beq	33dfc <__assert_fail@plt+0x21f68>
   34344:	ldrb	r3, [r7, -r2]
   34348:	ldrb	r6, [r5, -r2]
   3434c:	add	r2, r2, #1
   34350:	cmp	r6, r3
   34354:	beq	3433c <__assert_fail@plt+0x224a8>
   34358:	ldr	r2, [sp, #16]
   3435c:	add	r2, r8, r2
   34360:	add	r8, r2, #1
   34364:	add	r6, r8, ip
   34368:	mov	r1, #0
   3436c:	mov	r7, #0
   34370:	sub	r2, r6, lr
   34374:	bl	11d14 <memchr@plt>
   34378:	cmp	r6, #0
   3437c:	beq	33dfc <__assert_fail@plt+0x21f68>
   34380:	ldr	r4, [sp, #24]
   34384:	ldr	ip, [sp, #28]
   34388:	ldr	r1, [sp, #20]
   3438c:	mov	lr, r6
   34390:	cmp	r0, #0
   34394:	add	r6, sp, #32
   34398:	beq	342e4 <__assert_fail@plt+0x22450>
   3439c:	b	33dfc <__assert_fail@plt+0x21f68>
   343a0:	ldr	r0, [sp, #24]
   343a4:	ldr	r8, [sp, #28]
   343a8:	mov	r1, #0
   343ac:	mov	r7, #0
   343b0:	add	r0, r0, r9
   343b4:	sub	r2, r8, r9
   343b8:	bl	11d14 <memchr@plt>
   343bc:	cmp	r8, #0
   343c0:	beq	33dfc <__assert_fail@plt+0x21f68>
   343c4:	ldr	r4, [sp, #24]
   343c8:	ldr	r1, [sp, #20]
   343cc:	cmp	r0, #0
   343d0:	str	sl, [sp, #16]
   343d4:	bne	33dfc <__assert_fail@plt+0x21f68>
   343d8:	ldr	r0, [sp, #16]
   343dc:	mov	ip, r8
   343e0:	mov	sl, #0
   343e4:	mov	lr, r8
   343e8:	mov	r9, #0
   343ec:	sub	r0, r8, r0
   343f0:	str	r0, [sp, #12]
   343f4:	sub	r0, r1, #1
   343f8:	str	r0, [sp, #4]
   343fc:	rsb	r0, r1, #0
   34400:	str	r0, [sp]
   34404:	sub	r0, r8, #1
   34408:	str	r0, [sp, #8]
   3440c:	add	r0, r4, lr
   34410:	ldrb	r2, [r0, #-1]
   34414:	ldr	r3, [r6, r2, lsl #2]
   34418:	cmp	r3, #0
   3441c:	beq	34444 <__assert_fail@plt+0x225b0>
   34420:	ldr	r2, [sp, #16]
   34424:	ldr	r1, [sp, #12]
   34428:	cmp	r3, r2
   3442c:	mov	r2, r3
   34430:	movcc	r2, r1
   34434:	cmp	sl, #0
   34438:	moveq	r2, r3
   3443c:	mov	sl, #0
   34440:	b	344b8 <__assert_fail@plt+0x22624>
   34444:	cmp	r1, sl
   34448:	mov	r2, r1
   3444c:	ldr	r1, [sp, #8]
   34450:	movcc	r2, sl
   34454:	cmp	r2, r1
   34458:	bcs	3447c <__assert_fail@plt+0x225e8>
   3445c:	add	r3, r4, r9
   34460:	ldrb	r7, [r3, r2]
   34464:	ldrb	r6, [r5, r2]
   34468:	cmp	r6, r7
   3446c:	bne	344fc <__assert_fail@plt+0x22668>
   34470:	add	r2, r2, #1
   34474:	cmp	r2, r1
   34478:	bcc	34460 <__assert_fail@plt+0x225cc>
   3447c:	ldr	r2, [sp, #4]
   34480:	add	r7, r4, r9
   34484:	add	r3, r2, #1
   34488:	cmp	sl, r3
   3448c:	bcs	344a4 <__assert_fail@plt+0x22610>
   34490:	ldrb	r6, [r7, r2]
   34494:	ldrb	r4, [r5, r2]
   34498:	sub	r2, r2, #1
   3449c:	cmp	r4, r6
   344a0:	beq	34484 <__assert_fail@plt+0x225f0>
   344a4:	add	r2, sl, #1
   344a8:	ldr	sl, [sp, #12]
   344ac:	cmp	r3, r2
   344b0:	ldr	r2, [sp, #16]
   344b4:	bcc	33dfc <__assert_fail@plt+0x21f68>
   344b8:	add	r9, r2, r9
   344bc:	mov	r1, #0
   344c0:	mov	r8, ip
   344c4:	mov	r7, #0
   344c8:	add	r6, r9, ip
   344cc:	sub	r2, r6, lr
   344d0:	bl	11d14 <memchr@plt>
   344d4:	cmp	r6, #0
   344d8:	beq	33dfc <__assert_fail@plt+0x21f68>
   344dc:	ldr	r4, [sp, #24]
   344e0:	ldr	r1, [sp, #20]
   344e4:	mov	lr, r6
   344e8:	cmp	r0, #0
   344ec:	mov	ip, r8
   344f0:	add	r6, sp, #32
   344f4:	beq	3440c <__assert_fail@plt+0x22578>
   344f8:	b	33dfc <__assert_fail@plt+0x21f68>
   344fc:	ldr	r1, [sp]
   34500:	add	r2, r1, r2
   34504:	add	r2, r2, #1
   34508:	b	3443c <__assert_fail@plt+0x225a8>
   3450c:	mov	r4, #1
   34510:	mvn	lr, #0
   34514:	add	r0, r1, #1
   34518:	add	r6, lr, #1
   3451c:	cmp	r6, r0
   34520:	movcc	r4, ip
   34524:	movcc	r6, r0
   34528:	add	r1, r5, r4
   3452c:	mov	r0, r5
   34530:	mov	r2, r6
   34534:	bl	11ac8 <memcmp@plt>
   34538:	cmp	r0, #0
   3453c:	str	r6, [sp, #20]
   34540:	beq	34644 <__assert_fail@plt+0x227b0>
   34544:	ldr	r0, [sp, #24]
   34548:	ldr	r4, [sp, #28]
   3454c:	mov	r1, #0
   34550:	mov	r7, #0
   34554:	add	r0, r0, r9
   34558:	sub	r2, r4, r9
   3455c:	bl	11d14 <memchr@plt>
   34560:	sub	r2, r4, r6
   34564:	cmp	r6, r2
   34568:	movcs	r2, r6
   3456c:	cmp	r4, #0
   34570:	str	r2, [sp, #16]
   34574:	beq	33dfc <__assert_fail@plt+0x21f68>
   34578:	mov	r1, r4
   3457c:	ldr	r4, [sp, #24]
   34580:	cmp	r0, #0
   34584:	bne	33dfc <__assert_fail@plt+0x21f68>
   34588:	add	r0, r4, r6
   3458c:	add	r9, r5, r6
   34590:	mov	sl, #0
   34594:	mov	ip, r1
   34598:	str	r0, [sp, #8]
   3459c:	rsb	r0, r6, #1
   345a0:	str	r0, [sp, #12]
   345a4:	cmp	r1, r6
   345a8:	bls	345d8 <__assert_fail@plt+0x22744>
   345ac:	ldr	r0, [sp, #8]
   345b0:	mov	r2, #0
   345b4:	add	r0, r0, sl
   345b8:	ldrb	r3, [r0, r2]
   345bc:	ldrb	r7, [r9, r2]
   345c0:	cmp	r7, r3
   345c4:	bne	34600 <__assert_fail@plt+0x2276c>
   345c8:	add	r2, r2, #1
   345cc:	add	r3, r6, r2
   345d0:	cmp	r3, r1
   345d4:	bcc	345b8 <__assert_fail@plt+0x22724>
   345d8:	ldr	r0, [sp, #12]
   345dc:	add	r7, r4, sl
   345e0:	cmp	r0, #1
   345e4:	beq	33dfc <__assert_fail@plt+0x21f68>
   345e8:	ldrb	r2, [r7, -r0]
   345ec:	ldrb	r3, [r5, -r0]
   345f0:	add	r0, r0, #1
   345f4:	cmp	r3, r2
   345f8:	beq	345e0 <__assert_fail@plt+0x2274c>
   345fc:	ldr	r2, [sp, #16]
   34600:	add	r2, sl, r2
   34604:	add	r0, r4, ip
   34608:	mov	r7, #0
   3460c:	add	sl, r2, #1
   34610:	add	r8, sl, r1
   34614:	mov	r1, #0
   34618:	sub	r2, r8, ip
   3461c:	bl	11d14 <memchr@plt>
   34620:	cmp	r0, #0
   34624:	bne	33dfc <__assert_fail@plt+0x21f68>
   34628:	ldr	r4, [sp, #24]
   3462c:	ldr	r1, [sp, #28]
   34630:	ldr	r6, [sp, #20]
   34634:	cmp	r8, #0
   34638:	mov	ip, r8
   3463c:	bne	345a4 <__assert_fail@plt+0x22710>
   34640:	b	33dfc <__assert_fail@plt+0x21f68>
   34644:	ldr	r0, [sp, #24]
   34648:	ldr	r8, [sp, #28]
   3464c:	mov	r1, #0
   34650:	mov	r7, #0
   34654:	add	r0, r0, r9
   34658:	sub	r2, r8, r9
   3465c:	bl	11d14 <memchr@plt>
   34660:	cmp	r8, #0
   34664:	beq	33dfc <__assert_fail@plt+0x21f68>
   34668:	str	r4, [sp, #16]
   3466c:	ldr	r4, [sp, #24]
   34670:	cmp	r0, #0
   34674:	bne	33dfc <__assert_fail@plt+0x21f68>
   34678:	ldr	r0, [sp, #16]
   3467c:	mov	r1, r8
   34680:	mov	sl, #0
   34684:	mov	ip, r8
   34688:	mov	r9, #0
   3468c:	sub	r0, r8, r0
   34690:	str	r0, [sp, #12]
   34694:	sub	r0, r6, #1
   34698:	str	r0, [sp, #8]
   3469c:	rsb	r0, r6, #0
   346a0:	str	r0, [sp, #4]
   346a4:	cmp	r6, sl
   346a8:	movcc	r6, sl
   346ac:	cmp	r6, r1
   346b0:	bcs	346d4 <__assert_fail@plt+0x22840>
   346b4:	add	r2, r4, r9
   346b8:	ldrb	r3, [r2, r6]
   346bc:	ldrb	r7, [r5, r6]
   346c0:	cmp	r7, r3
   346c4:	bne	34714 <__assert_fail@plt+0x22880>
   346c8:	add	r6, r6, #1
   346cc:	cmp	r6, r1
   346d0:	bcc	346b8 <__assert_fail@plt+0x22824>
   346d4:	ldr	r0, [sp, #8]
   346d8:	add	r7, r4, r9
   346dc:	add	r2, r0, #1
   346e0:	cmp	sl, r2
   346e4:	bcs	346fc <__assert_fail@plt+0x22868>
   346e8:	ldrb	r3, [r7, r0]
   346ec:	ldrb	r6, [r5, r0]
   346f0:	sub	r0, r0, #1
   346f4:	cmp	r6, r3
   346f8:	beq	346dc <__assert_fail@plt+0x22848>
   346fc:	add	r0, sl, #1
   34700:	ldr	sl, [sp, #12]
   34704:	cmp	r2, r0
   34708:	ldr	r2, [sp, #16]
   3470c:	bcs	34724 <__assert_fail@plt+0x22890>
   34710:	b	33dfc <__assert_fail@plt+0x21f68>
   34714:	ldr	r2, [sp, #4]
   34718:	mov	sl, #0
   3471c:	add	r0, r2, r6
   34720:	add	r2, r0, #1
   34724:	add	r9, r2, r9
   34728:	add	r0, r4, ip
   3472c:	mov	r7, #0
   34730:	add	r8, r9, r1
   34734:	mov	r1, #0
   34738:	sub	r2, r8, ip
   3473c:	bl	11d14 <memchr@plt>
   34740:	cmp	r8, #0
   34744:	beq	33dfc <__assert_fail@plt+0x21f68>
   34748:	ldr	r4, [sp, #24]
   3474c:	ldr	r1, [sp, #28]
   34750:	ldr	r6, [sp, #20]
   34754:	cmp	r0, #0
   34758:	mov	ip, r8
   3475c:	beq	346a4 <__assert_fail@plt+0x22810>
   34760:	b	33dfc <__assert_fail@plt+0x21f68>
   34764:	push	{r4, r5, r6, sl, fp, lr}
   34768:	add	fp, sp, #16
   3476c:	mov	r4, r0
   34770:	bl	11b94 <__fpending@plt>
   34774:	ldr	r6, [r4]
   34778:	mov	r5, r0
   3477c:	mov	r0, r4
   34780:	bl	15cb4 <__assert_fail@plt+0x3e20>
   34784:	tst	r6, #32
   34788:	bne	347c0 <__assert_fail@plt+0x2292c>
   3478c:	cmp	r0, #0
   34790:	mov	r4, r0
   34794:	mvnne	r4, #0
   34798:	cmp	r5, #0
   3479c:	bne	347cc <__assert_fail@plt+0x22938>
   347a0:	cmp	r0, #0
   347a4:	beq	347cc <__assert_fail@plt+0x22938>
   347a8:	bl	11ca8 <__errno_location@plt>
   347ac:	ldr	r0, [r0]
   347b0:	subs	r4, r0, #9
   347b4:	mvnne	r4, #0
   347b8:	mov	r0, r4
   347bc:	pop	{r4, r5, r6, sl, fp, pc}
   347c0:	mvn	r4, #0
   347c4:	cmp	r0, #0
   347c8:	beq	347d4 <__assert_fail@plt+0x22940>
   347cc:	mov	r0, r4
   347d0:	pop	{r4, r5, r6, sl, fp, pc}
   347d4:	bl	11ca8 <__errno_location@plt>
   347d8:	mov	r1, #0
   347dc:	str	r1, [r0]
   347e0:	mov	r0, r4
   347e4:	pop	{r4, r5, r6, sl, fp, pc}
   347e8:	movw	r2, #62998	; 0xf616
   347ec:	mov	r1, #0
   347f0:	movt	r2, #149	; 0x95
   347f4:	str	r1, [r0, #16]
   347f8:	str	r1, [r0, #20]
   347fc:	str	r2, [r0, #24]
   34800:	bx	lr
   34804:	push	{r4, r5, r6, r7, fp, lr}
   34808:	add	fp, sp, #16
   3480c:	ldr	r2, [r0, #24]
   34810:	movw	r3, #62998	; 0xf616
   34814:	movt	r3, #149	; 0x95
   34818:	cmp	r2, r3
   3481c:	bne	348bc <__assert_fail@plt+0x22a28>
   34820:	mov	r3, r0
   34824:	ldr	r2, [r3, #16]!
   34828:	ldr	lr, [r3, #4]
   3482c:	orrs	r5, r2, lr
   34830:	beq	34868 <__assert_fail@plt+0x229d4>
   34834:	ldrd	r4, [r0]
   34838:	ldrd	r6, [r1, #96]	; 0x60
   3483c:	eor	r7, r7, r5
   34840:	eor	r6, r6, r4
   34844:	orrs	r7, r6, r7
   34848:	bne	34868 <__assert_fail@plt+0x229d4>
   3484c:	ldrd	r4, [r0, #8]
   34850:	ldrd	r6, [r1]
   34854:	mov	ip, #1
   34858:	eor	r7, r7, r5
   3485c:	eor	r6, r6, r4
   34860:	orrs	r7, r6, r7
   34864:	beq	34888 <__assert_fail@plt+0x229f4>
   34868:	adds	r4, r2, #1
   3486c:	mov	ip, #0
   34870:	adc	r5, lr, #0
   34874:	and	r2, r4, r2
   34878:	strd	r4, [r3]
   3487c:	and	r3, r5, lr
   34880:	orrs	r2, r2, r3
   34884:	beq	34890 <__assert_fail@plt+0x229fc>
   34888:	mov	r0, ip
   3488c:	pop	{r4, r5, r6, r7, fp, pc}
   34890:	orrs	r2, r4, r5
   34894:	moveq	ip, #1
   34898:	moveq	r0, ip
   3489c:	popeq	{r4, r5, r6, r7, fp, pc}
   348a0:	ldrd	r2, [r1]
   348a4:	str	r3, [r0, #12]
   348a8:	str	r2, [r0, #8]
   348ac:	ldrd	r2, [r1, #96]	; 0x60
   348b0:	stm	r0, {r2, r3}
   348b4:	mov	r0, ip
   348b8:	pop	{r4, r5, r6, r7, fp, pc}
   348bc:	movw	r0, #30631	; 0x77a7
   348c0:	movw	r1, #30655	; 0x77bf
   348c4:	movw	r3, #30673	; 0x77d1
   348c8:	mov	r2, #60	; 0x3c
   348cc:	movt	r0, #3
   348d0:	movt	r1, #3
   348d4:	movt	r3, #3
   348d8:	bl	11e94 <__assert_fail@plt>
   348dc:	push	{r4, r5, r6, r7, fp, lr}
   348e0:	add	fp, sp, #16
   348e4:	mov	r4, r0
   348e8:	ldr	r0, [r0, #4]
   348ec:	mov	r5, r1
   348f0:	cmp	r0, r1
   348f4:	movcs	r0, #1
   348f8:	strcs	r5, [r4]
   348fc:	popcs	{r4, r5, r6, r7, fp, pc}
   34900:	mov	r6, r3
   34904:	cmp	r3, #0
   34908:	beq	34930 <__assert_fail@plt+0x22a9c>
   3490c:	mvn	r0, #0
   34910:	udiv	r0, r0, r6
   34914:	cmp	r0, r5
   34918:	bcs	34930 <__assert_fail@plt+0x22a9c>
   3491c:	bl	11ca8 <__errno_location@plt>
   34920:	mov	r1, #12
   34924:	str	r1, [r0]
   34928:	mov	r0, #0
   3492c:	pop	{r4, r5, r6, r7, fp, pc}
   34930:	ldr	r0, [r4, #8]
   34934:	mul	r1, r6, r5
   34938:	cmp	r0, r2
   3493c:	beq	34954 <__assert_fail@plt+0x22ac0>
   34940:	bl	33cc8 <__assert_fail@plt+0x21e34>
   34944:	mov	r7, r0
   34948:	cmp	r0, #0
   3494c:	bne	34984 <__assert_fail@plt+0x22af0>
   34950:	b	34994 <__assert_fail@plt+0x22b00>
   34954:	mov	r0, r1
   34958:	bl	33c98 <__assert_fail@plt+0x21e04>
   3495c:	cmp	r0, #0
   34960:	beq	34994 <__assert_fail@plt+0x22b00>
   34964:	ldr	r1, [r4, #8]
   34968:	mov	r7, r0
   3496c:	cmp	r1, #0
   34970:	beq	34984 <__assert_fail@plt+0x22af0>
   34974:	ldr	r0, [r4]
   34978:	mul	r2, r0, r6
   3497c:	mov	r0, r7
   34980:	bl	11a8c <memcpy@plt>
   34984:	mov	r0, #1
   34988:	str	r5, [r4]
   3498c:	stmib	r4, {r5, r7}
   34990:	pop	{r4, r5, r6, r7, fp, pc}
   34994:	mov	r0, #0
   34998:	pop	{r4, r5, r6, r7, fp, pc}
   3499c:	sub	sp, sp, #8
   349a0:	push	{r4, r5, r6, r7, fp, lr}
   349a4:	add	fp, sp, #16
   349a8:	sub	sp, sp, #8
   349ac:	mov	r5, r0
   349b0:	add	r0, fp, #8
   349b4:	cmp	r1, #11
   349b8:	str	r3, [fp, #12]
   349bc:	str	r2, [fp, #8]
   349c0:	str	r0, [sp, #4]
   349c4:	bhi	34a00 <__assert_fail@plt+0x22b6c>
   349c8:	mov	r0, #1
   349cc:	movw	r2, #1300	; 0x514
   349d0:	tst	r2, r0, lsl r1
   349d4:	bne	34ac0 <__assert_fail@plt+0x22c2c>
   349d8:	movw	r2, #2570	; 0xa0a
   349dc:	tst	r2, r0, lsl r1
   349e0:	bne	34a28 <__assert_fail@plt+0x22b94>
   349e4:	cmp	r1, #0
   349e8:	bne	34a00 <__assert_fail@plt+0x22b6c>
   349ec:	ldr	r0, [sp, #4]
   349f0:	add	r1, r0, #4
   349f4:	str	r1, [sp, #4]
   349f8:	mov	r1, #0
   349fc:	b	34acc <__assert_fail@plt+0x22c38>
   34a00:	sub	r0, r1, #1024	; 0x400
   34a04:	cmp	r0, #10
   34a08:	bhi	34ac0 <__assert_fail@plt+0x22c2c>
   34a0c:	mov	r2, #1
   34a10:	movw	r3, #645	; 0x285
   34a14:	tst	r3, r2, lsl r0
   34a18:	bne	34ac0 <__assert_fail@plt+0x22c2c>
   34a1c:	movw	r3, #1282	; 0x502
   34a20:	tst	r3, r2, lsl r0
   34a24:	beq	34a34 <__assert_fail@plt+0x22ba0>
   34a28:	mov	r0, r5
   34a2c:	bl	11d44 <fcntl64@plt>
   34a30:	b	34ad8 <__assert_fail@plt+0x22c44>
   34a34:	cmp	r0, #6
   34a38:	bne	34ac0 <__assert_fail@plt+0x22c2c>
   34a3c:	ldr	r0, [sp, #4]
   34a40:	movw	r7, #33768	; 0x83e8
   34a44:	movt	r7, #4
   34a48:	add	r1, r0, #4
   34a4c:	str	r1, [sp, #4]
   34a50:	ldr	r6, [r0]
   34a54:	ldr	r0, [r7]
   34a58:	cmp	r0, #0
   34a5c:	blt	34afc <__assert_fail@plt+0x22c68>
   34a60:	mov	r0, r5
   34a64:	movw	r1, #1030	; 0x406
   34a68:	mov	r2, r6
   34a6c:	bl	11d44 <fcntl64@plt>
   34a70:	mov	r4, r0
   34a74:	cmn	r0, #1
   34a78:	bgt	34af0 <__assert_fail@plt+0x22c5c>
   34a7c:	bl	11ca8 <__errno_location@plt>
   34a80:	ldr	r0, [r0]
   34a84:	cmp	r0, #22
   34a88:	bne	34af0 <__assert_fail@plt+0x22c5c>
   34a8c:	mov	r0, r5
   34a90:	mov	r1, #0
   34a94:	mov	r2, r6
   34a98:	bl	11d44 <fcntl64@plt>
   34a9c:	mov	r4, r0
   34aa0:	cmp	r0, #0
   34aa4:	blt	34adc <__assert_fail@plt+0x22c48>
   34aa8:	mvn	r0, #0
   34aac:	str	r0, [r7]
   34ab0:	mov	r0, #1
   34ab4:	cmp	r0, #0
   34ab8:	bne	34b28 <__assert_fail@plt+0x22c94>
   34abc:	b	34adc <__assert_fail@plt+0x22c48>
   34ac0:	ldr	r0, [sp, #4]
   34ac4:	add	r2, r0, #4
   34ac8:	str	r2, [sp, #4]
   34acc:	ldr	r2, [r0]
   34ad0:	mov	r0, r5
   34ad4:	bl	11d44 <fcntl64@plt>
   34ad8:	mov	r4, r0
   34adc:	mov	r0, r4
   34ae0:	sub	sp, fp, #16
   34ae4:	pop	{r4, r5, r6, r7, fp, lr}
   34ae8:	add	sp, sp, #8
   34aec:	bx	lr
   34af0:	mov	r0, #1
   34af4:	str	r0, [r7]
   34af8:	b	34adc <__assert_fail@plt+0x22c48>
   34afc:	mov	r0, r5
   34b00:	mov	r1, #0
   34b04:	mov	r2, r6
   34b08:	bl	11d44 <fcntl64@plt>
   34b0c:	mov	r4, r0
   34b10:	ldr	r0, [r7]
   34b14:	add	r0, r0, #1
   34b18:	clz	r0, r0
   34b1c:	lsr	r0, r0, #5
   34b20:	cmp	r0, #0
   34b24:	beq	34adc <__assert_fail@plt+0x22c48>
   34b28:	cmp	r4, #0
   34b2c:	blt	34adc <__assert_fail@plt+0x22c48>
   34b30:	mov	r0, r4
   34b34:	mov	r1, #1
   34b38:	bl	11d44 <fcntl64@plt>
   34b3c:	cmp	r0, #0
   34b40:	blt	34b5c <__assert_fail@plt+0x22cc8>
   34b44:	orr	r2, r0, #1
   34b48:	mov	r0, r4
   34b4c:	mov	r1, #2
   34b50:	bl	11d44 <fcntl64@plt>
   34b54:	cmn	r0, #1
   34b58:	bne	34adc <__assert_fail@plt+0x22c48>
   34b5c:	bl	11ca8 <__errno_location@plt>
   34b60:	ldr	r6, [r0]
   34b64:	mov	r5, r0
   34b68:	mov	r0, r4
   34b6c:	bl	11e70 <close@plt>
   34b70:	str	r6, [r5]
   34b74:	mvn	r4, #0
   34b78:	b	34adc <__assert_fail@plt+0x22c48>
   34b7c:	sub	sp, sp, #8
   34b80:	push	{fp, lr}
   34b84:	mov	fp, sp
   34b88:	sub	sp, sp, #8
   34b8c:	str	r2, [fp, #8]
   34b90:	mov	r2, #0
   34b94:	tst	r1, #64	; 0x40
   34b98:	str	r3, [fp, #12]
   34b9c:	addne	r2, fp, #8
   34ba0:	orrne	r2, r2, #4
   34ba4:	strne	r2, [sp, #4]
   34ba8:	ldrne	r2, [fp, #8]
   34bac:	bl	11bd0 <open64@plt>
   34bb0:	bl	308ac <__assert_fail@plt+0x1ea18>
   34bb4:	mov	sp, fp
   34bb8:	pop	{fp, lr}
   34bbc:	add	sp, sp, #8
   34bc0:	bx	lr
   34bc4:	push	{fp, lr}
   34bc8:	mov	fp, sp
   34bcc:	mov	r0, #14
   34bd0:	bl	11d74 <nl_langinfo@plt>
   34bd4:	movw	r1, #24652	; 0x604c
   34bd8:	cmp	r0, #0
   34bdc:	movt	r1, #3
   34be0:	movne	r1, r0
   34be4:	movw	r0, #30740	; 0x7814
   34be8:	ldrb	r2, [r1]
   34bec:	movt	r0, #3
   34bf0:	cmp	r2, #0
   34bf4:	movne	r0, r1
   34bf8:	pop	{fp, pc}
   34bfc:	push	{r4, sl, fp, lr}
   34c00:	add	fp, sp, #8
   34c04:	mov	r4, r0
   34c08:	bl	11a44 <wcwidth@plt>
   34c0c:	cmn	r0, #1
   34c10:	popgt	{r4, sl, fp, pc}
   34c14:	mov	r0, r4
   34c18:	bl	11b10 <iswcntrl@plt>
   34c1c:	clz	r0, r0
   34c20:	lsr	r0, r0, #5
   34c24:	pop	{r4, sl, fp, pc}
   34c28:	push	{r4, r5, r6, sl, fp, lr}
   34c2c:	add	fp, sp, #16
   34c30:	mov	r4, r0
   34c34:	mov	r0, r1
   34c38:	mov	r5, r1
   34c3c:	ldr	r1, [r0], #16
   34c40:	cmp	r1, r0
   34c44:	beq	34c50 <__assert_fail@plt+0x22dbc>
   34c48:	mov	r6, r1
   34c4c:	b	34c60 <__assert_fail@plt+0x22dcc>
   34c50:	ldr	r2, [r5, #4]
   34c54:	add	r6, r4, #16
   34c58:	mov	r0, r6
   34c5c:	bl	11a8c <memcpy@plt>
   34c60:	str	r6, [r4]
   34c64:	ldr	r0, [r5, #4]
   34c68:	str	r0, [r4, #4]
   34c6c:	ldrb	r0, [r5, #8]
   34c70:	strb	r0, [r4, #8]
   34c74:	cmp	r0, #0
   34c78:	ldrne	r0, [r5, #12]
   34c7c:	strne	r0, [r4, #12]
   34c80:	pop	{r4, r5, r6, sl, fp, pc}
   34c84:	movw	r2, #30748	; 0x781c
   34c88:	ubfx	r1, r0, #5, #3
   34c8c:	and	r0, r0, #31
   34c90:	movt	r2, #3
   34c94:	ldr	r1, [r2, r1, lsl #2]
   34c98:	mov	r2, #1
   34c9c:	and	r0, r1, r2, lsl r0
   34ca0:	cmp	r0, #0
   34ca4:	movwne	r0, #1
   34ca8:	bx	lr
   34cac:	push	{r4, r5, r6, r7, fp, lr}
   34cb0:	add	fp, sp, #16
   34cb4:	sub	sp, sp, #8
   34cb8:	add	r5, sp, #4
   34cbc:	cmp	r0, #0
   34cc0:	mov	r7, r2
   34cc4:	mov	r4, r1
   34cc8:	movne	r5, r0
   34ccc:	mov	r0, r5
   34cd0:	bl	11ba0 <mbrtowc@plt>
   34cd4:	mov	r6, r0
   34cd8:	cmp	r7, #0
   34cdc:	beq	34d00 <__assert_fail@plt+0x22e6c>
   34ce0:	cmn	r6, #2
   34ce4:	bcc	34d00 <__assert_fail@plt+0x22e6c>
   34ce8:	mov	r0, #0
   34cec:	bl	34d54 <__assert_fail@plt+0x22ec0>
   34cf0:	cmp	r0, #0
   34cf4:	ldrbeq	r0, [r4]
   34cf8:	moveq	r6, #1
   34cfc:	streq	r0, [r5]
   34d00:	mov	r0, r6
   34d04:	sub	sp, fp, #16
   34d08:	pop	{r4, r5, r6, r7, fp, pc}
   34d0c:	cmp	r2, #0
   34d10:	beq	34d40 <__assert_fail@plt+0x22eac>
   34d14:	mvn	r3, #0
   34d18:	udiv	r3, r3, r2
   34d1c:	cmp	r3, r1
   34d20:	bcs	34d40 <__assert_fail@plt+0x22eac>
   34d24:	push	{fp, lr}
   34d28:	mov	fp, sp
   34d2c:	bl	11ca8 <__errno_location@plt>
   34d30:	mov	r1, #12
   34d34:	str	r1, [r0]
   34d38:	mov	r0, #0
   34d3c:	pop	{fp, pc}
   34d40:	mul	r1, r2, r1
   34d44:	b	33cc8 <__assert_fail@plt+0x21e34>
   34d48:	mov	r1, #0
   34d4c:	mov	r2, #3
   34d50:	b	3499c <__assert_fail@plt+0x22b08>
   34d54:	push	{r4, sl, fp, lr}
   34d58:	add	fp, sp, #8
   34d5c:	sub	sp, sp, #264	; 0x108
   34d60:	add	r1, sp, #7
   34d64:	movw	r2, #257	; 0x101
   34d68:	bl	34db8 <__assert_fail@plt+0x22f24>
   34d6c:	mov	r4, #0
   34d70:	cmp	r0, #0
   34d74:	bne	34dac <__assert_fail@plt+0x22f18>
   34d78:	movw	r1, #30780	; 0x783c
   34d7c:	add	r0, sp, #7
   34d80:	movt	r1, #3
   34d84:	bl	11a14 <strcmp@plt>
   34d88:	cmp	r0, #0
   34d8c:	beq	34dac <__assert_fail@plt+0x22f18>
   34d90:	movw	r1, #30782	; 0x783e
   34d94:	add	r0, sp, #7
   34d98:	movt	r1, #3
   34d9c:	bl	11a14 <strcmp@plt>
   34da0:	mov	r4, r0
   34da4:	cmp	r0, #0
   34da8:	movwne	r4, #1
   34dac:	mov	r0, r4
   34db0:	sub	sp, fp, #8
   34db4:	pop	{r4, sl, fp, pc}
   34db8:	push	{r4, r5, r6, r7, fp, lr}
   34dbc:	add	fp, sp, #16
   34dc0:	mov	r4, r1
   34dc4:	mov	r1, #0
   34dc8:	mov	r6, r2
   34dcc:	bl	11d5c <setlocale@plt>
   34dd0:	cmp	r0, #0
   34dd4:	beq	34e04 <__assert_fail@plt+0x22f70>
   34dd8:	mov	r7, r0
   34ddc:	bl	11c78 <strlen@plt>
   34de0:	cmp	r0, r6
   34de4:	bcs	34e24 <__assert_fail@plt+0x22f90>
   34de8:	add	r2, r0, #1
   34dec:	mov	r0, r4
   34df0:	mov	r1, r7
   34df4:	bl	11a8c <memcpy@plt>
   34df8:	mov	r5, #0
   34dfc:	mov	r0, r5
   34e00:	pop	{r4, r5, r6, r7, fp, pc}
   34e04:	cmp	r6, #0
   34e08:	mov	r5, #22
   34e0c:	movne	r0, #0
   34e10:	strbne	r0, [r4]
   34e14:	movne	r0, r5
   34e18:	popne	{r4, r5, r6, r7, fp, pc}
   34e1c:	mov	r0, r5
   34e20:	pop	{r4, r5, r6, r7, fp, pc}
   34e24:	mov	r5, #34	; 0x22
   34e28:	cmp	r6, #0
   34e2c:	beq	34e4c <__assert_fail@plt+0x22fb8>
   34e30:	sub	r6, r6, #1
   34e34:	mov	r0, r4
   34e38:	mov	r1, r7
   34e3c:	mov	r2, r6
   34e40:	bl	11a8c <memcpy@plt>
   34e44:	mov	r0, #0
   34e48:	strb	r0, [r4, r6]
   34e4c:	mov	r0, r5
   34e50:	pop	{r4, r5, r6, r7, fp, pc}
   34e54:	mov	r1, #0
   34e58:	b	11d5c <setlocale@plt>
   34e5c:	eor	r1, r1, #-2147483648	; 0x80000000
   34e60:	b	34e68 <__assert_fail@plt+0x22fd4>
   34e64:	eor	r3, r3, #-2147483648	; 0x80000000
   34e68:	push	{r4, r5, lr}
   34e6c:	lsl	r4, r1, #1
   34e70:	lsl	r5, r3, #1
   34e74:	teq	r4, r5
   34e78:	teqeq	r0, r2
   34e7c:	orrsne	ip, r4, r0
   34e80:	orrsne	ip, r5, r2
   34e84:	mvnsne	ip, r4, asr #21
   34e88:	mvnsne	ip, r5, asr #21
   34e8c:	beq	35078 <__assert_fail@plt+0x231e4>
   34e90:	lsr	r4, r4, #21
   34e94:	rsbs	r5, r4, r5, lsr #21
   34e98:	rsblt	r5, r5, #0
   34e9c:	ble	34ebc <__assert_fail@plt+0x23028>
   34ea0:	add	r4, r4, r5
   34ea4:	eor	r2, r0, r2
   34ea8:	eor	r3, r1, r3
   34eac:	eor	r0, r2, r0
   34eb0:	eor	r1, r3, r1
   34eb4:	eor	r2, r0, r2
   34eb8:	eor	r3, r1, r3
   34ebc:	cmp	r5, #54	; 0x36
   34ec0:	pophi	{r4, r5, pc}
   34ec4:	tst	r1, #-2147483648	; 0x80000000
   34ec8:	lsl	r1, r1, #12
   34ecc:	mov	ip, #1048576	; 0x100000
   34ed0:	orr	r1, ip, r1, lsr #12
   34ed4:	beq	34ee0 <__assert_fail@plt+0x2304c>
   34ed8:	rsbs	r0, r0, #0
   34edc:	rsc	r1, r1, #0
   34ee0:	tst	r3, #-2147483648	; 0x80000000
   34ee4:	lsl	r3, r3, #12
   34ee8:	orr	r3, ip, r3, lsr #12
   34eec:	beq	34ef8 <__assert_fail@plt+0x23064>
   34ef0:	rsbs	r2, r2, #0
   34ef4:	rsc	r3, r3, #0
   34ef8:	teq	r4, r5
   34efc:	beq	35060 <__assert_fail@plt+0x231cc>
   34f00:	sub	r4, r4, #1
   34f04:	rsbs	lr, r5, #32
   34f08:	blt	34f24 <__assert_fail@plt+0x23090>
   34f0c:	lsl	ip, r2, lr
   34f10:	adds	r0, r0, r2, lsr r5
   34f14:	adc	r1, r1, #0
   34f18:	adds	r0, r0, r3, lsl lr
   34f1c:	adcs	r1, r1, r3, asr r5
   34f20:	b	34f40 <__assert_fail@plt+0x230ac>
   34f24:	sub	r5, r5, #32
   34f28:	add	lr, lr, #32
   34f2c:	cmp	r2, #1
   34f30:	lsl	ip, r3, lr
   34f34:	orrcs	ip, ip, #2
   34f38:	adds	r0, r0, r3, asr r5
   34f3c:	adcs	r1, r1, r3, asr #31
   34f40:	and	r5, r1, #-2147483648	; 0x80000000
   34f44:	bpl	34f54 <__assert_fail@plt+0x230c0>
   34f48:	rsbs	ip, ip, #0
   34f4c:	rscs	r0, r0, #0
   34f50:	rsc	r1, r1, #0
   34f54:	cmp	r1, #1048576	; 0x100000
   34f58:	bcc	34f98 <__assert_fail@plt+0x23104>
   34f5c:	cmp	r1, #2097152	; 0x200000
   34f60:	bcc	34f80 <__assert_fail@plt+0x230ec>
   34f64:	lsrs	r1, r1, #1
   34f68:	rrxs	r0, r0
   34f6c:	rrx	ip, ip
   34f70:	add	r4, r4, #1
   34f74:	lsl	r2, r4, #21
   34f78:	cmn	r2, #4194304	; 0x400000
   34f7c:	bcs	350d8 <__assert_fail@plt+0x23244>
   34f80:	cmp	ip, #-2147483648	; 0x80000000
   34f84:	lsrseq	ip, r0, #1
   34f88:	adcs	r0, r0, #0
   34f8c:	adc	r1, r1, r4, lsl #20
   34f90:	orr	r1, r1, r5
   34f94:	pop	{r4, r5, pc}
   34f98:	lsls	ip, ip, #1
   34f9c:	adcs	r0, r0, r0
   34fa0:	adc	r1, r1, r1
   34fa4:	tst	r1, #1048576	; 0x100000
   34fa8:	sub	r4, r4, #1
   34fac:	bne	34f80 <__assert_fail@plt+0x230ec>
   34fb0:	teq	r1, #0
   34fb4:	moveq	r1, r0
   34fb8:	moveq	r0, #0
   34fbc:	clz	r3, r1
   34fc0:	addeq	r3, r3, #32
   34fc4:	sub	r3, r3, #11
   34fc8:	subs	r2, r3, #32
   34fcc:	bge	34ff0 <__assert_fail@plt+0x2315c>
   34fd0:	adds	r2, r2, #12
   34fd4:	ble	34fec <__assert_fail@plt+0x23158>
   34fd8:	add	ip, r2, #20
   34fdc:	rsb	r2, r2, #12
   34fe0:	lsl	r0, r1, ip
   34fe4:	lsr	r1, r1, r2
   34fe8:	b	35000 <__assert_fail@plt+0x2316c>
   34fec:	add	r2, r2, #20
   34ff0:	rsble	ip, r2, #32
   34ff4:	lsl	r1, r1, r2
   34ff8:	orrle	r1, r1, r0, lsr ip
   34ffc:	lslle	r0, r0, r2
   35000:	subs	r4, r4, r3
   35004:	addge	r1, r1, r4, lsl #20
   35008:	orrge	r1, r1, r5
   3500c:	popge	{r4, r5, pc}
   35010:	mvn	r4, r4
   35014:	subs	r4, r4, #31
   35018:	bge	35054 <__assert_fail@plt+0x231c0>
   3501c:	adds	r4, r4, #12
   35020:	bgt	3503c <__assert_fail@plt+0x231a8>
   35024:	add	r4, r4, #20
   35028:	rsb	r2, r4, #32
   3502c:	lsr	r0, r0, r4
   35030:	orr	r0, r0, r1, lsl r2
   35034:	orr	r1, r5, r1, lsr r4
   35038:	pop	{r4, r5, pc}
   3503c:	rsb	r4, r4, #12
   35040:	rsb	r2, r4, #32
   35044:	lsr	r0, r0, r2
   35048:	orr	r0, r0, r1, lsl r4
   3504c:	mov	r1, r5
   35050:	pop	{r4, r5, pc}
   35054:	lsr	r0, r1, r4
   35058:	mov	r1, r5
   3505c:	pop	{r4, r5, pc}
   35060:	teq	r4, #0
   35064:	eor	r3, r3, #1048576	; 0x100000
   35068:	eoreq	r1, r1, #1048576	; 0x100000
   3506c:	addeq	r4, r4, #1
   35070:	subne	r5, r5, #1
   35074:	b	34f00 <__assert_fail@plt+0x2306c>
   35078:	mvns	ip, r4, asr #21
   3507c:	mvnsne	ip, r5, asr #21
   35080:	beq	350e8 <__assert_fail@plt+0x23254>
   35084:	teq	r4, r5
   35088:	teqeq	r0, r2
   3508c:	beq	350a0 <__assert_fail@plt+0x2320c>
   35090:	orrs	ip, r4, r0
   35094:	moveq	r1, r3
   35098:	moveq	r0, r2
   3509c:	pop	{r4, r5, pc}
   350a0:	teq	r1, r3
   350a4:	movne	r1, #0
   350a8:	movne	r0, #0
   350ac:	popne	{r4, r5, pc}
   350b0:	lsrs	ip, r4, #21
   350b4:	bne	350c8 <__assert_fail@plt+0x23234>
   350b8:	lsls	r0, r0, #1
   350bc:	adcs	r1, r1, r1
   350c0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   350c4:	pop	{r4, r5, pc}
   350c8:	adds	r4, r4, #4194304	; 0x400000
   350cc:	addcc	r1, r1, #1048576	; 0x100000
   350d0:	popcc	{r4, r5, pc}
   350d4:	and	r5, r1, #-2147483648	; 0x80000000
   350d8:	orr	r1, r5, #2130706432	; 0x7f000000
   350dc:	orr	r1, r1, #15728640	; 0xf00000
   350e0:	mov	r0, #0
   350e4:	pop	{r4, r5, pc}
   350e8:	mvns	ip, r4, asr #21
   350ec:	movne	r1, r3
   350f0:	movne	r0, r2
   350f4:	mvnseq	ip, r5, asr #21
   350f8:	movne	r3, r1
   350fc:	movne	r2, r0
   35100:	orrs	r4, r0, r1, lsl #12
   35104:	orrseq	r5, r2, r3, lsl #12
   35108:	teqeq	r1, r3
   3510c:	orrne	r1, r1, #524288	; 0x80000
   35110:	pop	{r4, r5, pc}
   35114:	teq	r0, #0
   35118:	moveq	r1, #0
   3511c:	bxeq	lr
   35120:	push	{r4, r5, lr}
   35124:	mov	r4, #1024	; 0x400
   35128:	add	r4, r4, #50	; 0x32
   3512c:	mov	r5, #0
   35130:	mov	r1, #0
   35134:	b	34fb0 <__assert_fail@plt+0x2311c>
   35138:	teq	r0, #0
   3513c:	moveq	r1, #0
   35140:	bxeq	lr
   35144:	push	{r4, r5, lr}
   35148:	mov	r4, #1024	; 0x400
   3514c:	add	r4, r4, #50	; 0x32
   35150:	ands	r5, r0, #-2147483648	; 0x80000000
   35154:	rsbmi	r0, r0, #0
   35158:	mov	r1, #0
   3515c:	b	34fb0 <__assert_fail@plt+0x2311c>
   35160:	lsls	r2, r0, #1
   35164:	asr	r1, r2, #3
   35168:	rrx	r1, r1
   3516c:	lsl	r0, r2, #28
   35170:	andsne	r3, r2, #-16777216	; 0xff000000
   35174:	teqne	r3, #-16777216	; 0xff000000
   35178:	eorne	r1, r1, #939524096	; 0x38000000
   3517c:	bxne	lr
   35180:	bics	r2, r2, #-16777216	; 0xff000000
   35184:	bxeq	lr
   35188:	teq	r3, #-16777216	; 0xff000000
   3518c:	orreq	r1, r1, #524288	; 0x80000
   35190:	bxeq	lr
   35194:	push	{r4, r5, lr}
   35198:	mov	r4, #896	; 0x380
   3519c:	and	r5, r1, #-2147483648	; 0x80000000
   351a0:	bic	r1, r1, #-2147483648	; 0x80000000
   351a4:	b	34fb0 <__assert_fail@plt+0x2311c>
   351a8:	orrs	r2, r0, r1
   351ac:	bxeq	lr
   351b0:	push	{r4, r5, lr}
   351b4:	mov	r5, #0
   351b8:	b	351d8 <__assert_fail@plt+0x23344>
   351bc:	orrs	r2, r0, r1
   351c0:	bxeq	lr
   351c4:	push	{r4, r5, lr}
   351c8:	ands	r5, r1, #-2147483648	; 0x80000000
   351cc:	bpl	351d8 <__assert_fail@plt+0x23344>
   351d0:	rsbs	r0, r0, #0
   351d4:	rsc	r1, r1, #0
   351d8:	mov	r4, #1024	; 0x400
   351dc:	add	r4, r4, #50	; 0x32
   351e0:	lsrs	ip, r1, #22
   351e4:	beq	34f54 <__assert_fail@plt+0x230c0>
   351e8:	mov	r2, #3
   351ec:	lsrs	ip, ip, #3
   351f0:	addne	r2, r2, #3
   351f4:	lsrs	ip, ip, #3
   351f8:	addne	r2, r2, #3
   351fc:	add	r2, r2, ip, lsr #3
   35200:	rsb	r3, r2, #32
   35204:	lsl	ip, r0, r3
   35208:	lsr	r0, r0, r2
   3520c:	orr	r0, r0, r1, lsl r3
   35210:	lsr	r1, r1, r2
   35214:	add	r4, r4, r2
   35218:	b	34f54 <__assert_fail@plt+0x230c0>
   3521c:	cmp	r3, #0
   35220:	cmpeq	r2, #0
   35224:	bne	35248 <__assert_fail@plt+0x233b4>
   35228:	cmp	r1, #0
   3522c:	movlt	r1, #-2147483648	; 0x80000000
   35230:	movlt	r0, #0
   35234:	blt	35244 <__assert_fail@plt+0x233b0>
   35238:	cmpeq	r0, #0
   3523c:	mvnne	r1, #-2147483648	; 0x80000000
   35240:	mvnne	r0, #0
   35244:	b	3532c <__assert_fail@plt+0x23498>
   35248:	sub	sp, sp, #8
   3524c:	push	{sp, lr}
   35250:	cmp	r1, #0
   35254:	blt	35274 <__assert_fail@plt+0x233e0>
   35258:	cmp	r3, #0
   3525c:	blt	352a8 <__assert_fail@plt+0x23414>
   35260:	bl	35380 <__assert_fail@plt+0x234ec>
   35264:	ldr	lr, [sp, #4]
   35268:	add	sp, sp, #8
   3526c:	pop	{r2, r3}
   35270:	bx	lr
   35274:	rsbs	r0, r0, #0
   35278:	sbc	r1, r1, r1, lsl #1
   3527c:	cmp	r3, #0
   35280:	blt	352cc <__assert_fail@plt+0x23438>
   35284:	bl	35380 <__assert_fail@plt+0x234ec>
   35288:	ldr	lr, [sp, #4]
   3528c:	add	sp, sp, #8
   35290:	pop	{r2, r3}
   35294:	rsbs	r0, r0, #0
   35298:	sbc	r1, r1, r1, lsl #1
   3529c:	rsbs	r2, r2, #0
   352a0:	sbc	r3, r3, r3, lsl #1
   352a4:	bx	lr
   352a8:	rsbs	r2, r2, #0
   352ac:	sbc	r3, r3, r3, lsl #1
   352b0:	bl	35380 <__assert_fail@plt+0x234ec>
   352b4:	ldr	lr, [sp, #4]
   352b8:	add	sp, sp, #8
   352bc:	pop	{r2, r3}
   352c0:	rsbs	r0, r0, #0
   352c4:	sbc	r1, r1, r1, lsl #1
   352c8:	bx	lr
   352cc:	rsbs	r2, r2, #0
   352d0:	sbc	r3, r3, r3, lsl #1
   352d4:	bl	35380 <__assert_fail@plt+0x234ec>
   352d8:	ldr	lr, [sp, #4]
   352dc:	add	sp, sp, #8
   352e0:	pop	{r2, r3}
   352e4:	rsbs	r2, r2, #0
   352e8:	sbc	r3, r3, r3, lsl #1
   352ec:	bx	lr
   352f0:	cmp	r3, #0
   352f4:	cmpeq	r2, #0
   352f8:	bne	35310 <__assert_fail@plt+0x2347c>
   352fc:	cmp	r1, #0
   35300:	cmpeq	r0, #0
   35304:	mvnne	r1, #0
   35308:	mvnne	r0, #0
   3530c:	b	3532c <__assert_fail@plt+0x23498>
   35310:	sub	sp, sp, #8
   35314:	push	{sp, lr}
   35318:	bl	35380 <__assert_fail@plt+0x234ec>
   3531c:	ldr	lr, [sp, #4]
   35320:	add	sp, sp, #8
   35324:	pop	{r2, r3}
   35328:	bx	lr
   3532c:	push	{r1, lr}
   35330:	mov	r0, #8
   35334:	bl	119d8 <raise@plt>
   35338:	pop	{r1, pc}
   3533c:	andeq	r0, r0, r0
   35340:	vmov	d6, r0, r1
   35344:	vldr	d7, [pc, #36]	; 35370 <__assert_fail@plt+0x234dc>
   35348:	vldr	d5, [pc, #40]	; 35378 <__assert_fail@plt+0x234e4>
   3534c:	vmul.f64	d7, d6, d7
   35350:	vcvt.u32.f64	s14, d7
   35354:	vcvt.f64.u32	d4, s14
   35358:	vmov	r1, s14
   3535c:	vmls.f64	d6, d4, d5
   35360:	vcvt.u32.f64	s15, d6
   35364:	vmov	r0, s15
   35368:	bx	lr
   3536c:	nop			; (mov r0, r0)
   35370:	andeq	r0, r0, r0
   35374:	ldclcc	0, cr0, [r0]
   35378:	andeq	r0, r0, r0
   3537c:	mvnsmi	r0, r0
   35380:	cmp	r1, r3
   35384:	cmpeq	r0, r2
   35388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3538c:	mov	r4, r0
   35390:	movcc	r0, #0
   35394:	mov	r5, r1
   35398:	ldr	lr, [sp, #36]	; 0x24
   3539c:	movcc	r1, r0
   353a0:	bcc	3549c <__assert_fail@plt+0x23608>
   353a4:	cmp	r3, #0
   353a8:	clzeq	ip, r2
   353ac:	clzne	ip, r3
   353b0:	addeq	ip, ip, #32
   353b4:	cmp	r5, #0
   353b8:	clzeq	r1, r4
   353bc:	addeq	r1, r1, #32
   353c0:	clzne	r1, r5
   353c4:	sub	ip, ip, r1
   353c8:	sub	sl, ip, #32
   353cc:	lsl	r9, r3, ip
   353d0:	rsb	fp, ip, #32
   353d4:	orr	r9, r9, r2, lsl sl
   353d8:	orr	r9, r9, r2, lsr fp
   353dc:	lsl	r8, r2, ip
   353e0:	cmp	r5, r9
   353e4:	cmpeq	r4, r8
   353e8:	movcc	r0, #0
   353ec:	movcc	r1, r0
   353f0:	bcc	3540c <__assert_fail@plt+0x23578>
   353f4:	mov	r0, #1
   353f8:	subs	r4, r4, r8
   353fc:	lsl	r1, r0, sl
   35400:	orr	r1, r1, r0, lsr fp
   35404:	lsl	r0, r0, ip
   35408:	sbc	r5, r5, r9
   3540c:	cmp	ip, #0
   35410:	beq	3549c <__assert_fail@plt+0x23608>
   35414:	lsr	r6, r8, #1
   35418:	orr	r6, r6, r9, lsl #31
   3541c:	lsr	r7, r9, #1
   35420:	mov	r2, ip
   35424:	b	35448 <__assert_fail@plt+0x235b4>
   35428:	subs	r3, r4, r6
   3542c:	sbc	r8, r5, r7
   35430:	adds	r3, r3, r3
   35434:	adc	r8, r8, r8
   35438:	adds	r4, r3, #1
   3543c:	adc	r5, r8, #0
   35440:	subs	r2, r2, #1
   35444:	beq	35464 <__assert_fail@plt+0x235d0>
   35448:	cmp	r5, r7
   3544c:	cmpeq	r4, r6
   35450:	bcs	35428 <__assert_fail@plt+0x23594>
   35454:	adds	r4, r4, r4
   35458:	adc	r5, r5, r5
   3545c:	subs	r2, r2, #1
   35460:	bne	35448 <__assert_fail@plt+0x235b4>
   35464:	lsr	r3, r4, ip
   35468:	orr	r3, r3, r5, lsl fp
   3546c:	lsr	r2, r5, ip
   35470:	orr	r3, r3, r5, lsr sl
   35474:	adds	r0, r0, r4
   35478:	mov	r4, r3
   3547c:	lsl	r3, r2, ip
   35480:	orr	r3, r3, r4, lsl sl
   35484:	lsl	ip, r4, ip
   35488:	orr	r3, r3, r4, lsr fp
   3548c:	adc	r1, r1, r5
   35490:	subs	r0, r0, ip
   35494:	mov	r5, r2
   35498:	sbc	r1, r1, r3
   3549c:	cmp	lr, #0
   354a0:	strdne	r4, [lr]
   354a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   354a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   354ac:	mov	r7, r0
   354b0:	ldr	r6, [pc, #72]	; 35500 <__assert_fail@plt+0x2366c>
   354b4:	ldr	r5, [pc, #72]	; 35504 <__assert_fail@plt+0x23670>
   354b8:	add	r6, pc, r6
   354bc:	add	r5, pc, r5
   354c0:	sub	r6, r6, r5
   354c4:	mov	r8, r1
   354c8:	mov	r9, r2
   354cc:	bl	1197c <pthread_mutex_unlock@plt-0x20>
   354d0:	asrs	r6, r6, #2
   354d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   354d8:	mov	r4, #0
   354dc:	add	r4, r4, #1
   354e0:	ldr	r3, [r5], #4
   354e4:	mov	r2, r9
   354e8:	mov	r1, r8
   354ec:	mov	r0, r7
   354f0:	blx	r3
   354f4:	cmp	r6, r4
   354f8:	bne	354dc <__assert_fail@plt+0x23648>
   354fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35500:	andeq	r2, r1, ip, asr #20
   35504:	andeq	r2, r1, r4, asr #20
   35508:	bx	lr
   3550c:	ldr	r3, [pc, #12]	; 35520 <__assert_fail@plt+0x2368c>
   35510:	mov	r1, #0
   35514:	add	r3, pc, r3
   35518:	ldr	r2, [r3]
   3551c:	b	11ccc <__cxa_atexit@plt>
   35520:	andeq	r2, r1, r8, lsr #25

Disassembly of section .fini:

00035524 <.fini>:
   35524:	push	{r3, lr}
   35528:	pop	{r3, pc}
