
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

0000055c <.init>:
 55c:	push	{r3, lr}
 560:	bl	5e0 <memset@plt+0x10>
 564:	pop	{r3, pc}

Disassembly of section .plt:

00000568 <calloc@plt-0x14>:
 568:	push	{lr}		; (str lr, [sp, #-4]!)
 56c:	ldr	lr, [pc, #4]	; 578 <calloc@plt-0x4>
 570:	add	lr, pc, lr
 574:	ldr	pc, [lr, #8]!
 578:	andeq	r0, r1, r8, lsl #21

0000057c <calloc@plt>:
 57c:	add	ip, pc, #0, 12
 580:	add	ip, ip, #16, 20	; 0x10000
 584:	ldr	pc, [ip, #2696]!	; 0xa88

00000588 <log@plt>:
 588:	add	ip, pc, #0, 12
 58c:	add	ip, ip, #16, 20	; 0x10000
 590:	ldr	pc, [ip, #2688]!	; 0xa80

00000594 <__cxa_finalize@plt>:
 594:	add	ip, pc, #0, 12
 598:	add	ip, ip, #16, 20	; 0x10000
 59c:	ldr	pc, [ip, #2680]!	; 0xa78

000005a0 <printf@plt>:
 5a0:	add	ip, pc, #0, 12
 5a4:	add	ip, ip, #16, 20	; 0x10000
 5a8:	ldr	pc, [ip, #2672]!	; 0xa70

000005ac <murmurhash2@plt>:
 5ac:	add	ip, pc, #0, 12
 5b0:	add	ip, ip, #16, 20	; 0x10000
 5b4:	ldr	pc, [ip, #2664]!	; 0xa68

000005b8 <free@plt>:
 5b8:	add	ip, pc, #0, 12
 5bc:	add	ip, ip, #16, 20	; 0x10000
 5c0:	ldr	pc, [ip, #2656]!	; 0xa60

000005c4 <__gmon_start__@plt>:
 5c4:	add	ip, pc, #0, 12
 5c8:	add	ip, ip, #16, 20	; 0x10000
 5cc:	ldr	pc, [ip, #2648]!	; 0xa58

000005d0 <memset@plt>:
 5d0:	add	ip, pc, #0, 12
 5d4:	add	ip, ip, #16, 20	; 0x10000
 5d8:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000005e0 <bloom_init_size@@Base-0x128>:
 5e0:	ldr	r3, [pc, #20]	; 5fc <memset@plt+0x2c>
 5e4:	ldr	r2, [pc, #20]	; 600 <memset@plt+0x30>
 5e8:	add	r3, pc, r3
 5ec:	ldr	r2, [r3, r2]
 5f0:	cmp	r2, #0
 5f4:	bxeq	lr
 5f8:	b	5c4 <__gmon_start__@plt>
 5fc:	andeq	r0, r1, r0, lsl sl
 600:	andeq	r0, r0, r4, lsr r0
 604:	ldr	r0, [pc, #44]	; 638 <memset@plt+0x68>
 608:	ldr	r3, [pc, #44]	; 63c <memset@plt+0x6c>
 60c:	add	r0, pc, r0
 610:	add	r3, pc, r3
 614:	cmp	r3, r0
 618:	ldr	r3, [pc, #32]	; 640 <memset@plt+0x70>
 61c:	add	r3, pc, r3
 620:	bxeq	lr
 624:	ldr	r2, [pc, #24]	; 644 <memset@plt+0x74>
 628:	ldr	r3, [r3, r2]
 62c:	cmp	r3, #0
 630:	bxeq	lr
 634:	bx	r3
 638:	andeq	r0, r1, ip, lsr #20
 63c:	andeq	r0, r1, r8, lsr #20
 640:	ldrdeq	r0, [r1], -ip
 644:	andeq	r0, r0, r0, lsr r0
 648:	ldr	r0, [pc, #56]	; 688 <memset@plt+0xb8>
 64c:	ldr	r3, [pc, #56]	; 68c <memset@plt+0xbc>
 650:	add	r0, pc, r0
 654:	add	r3, pc, r3
 658:	sub	r1, r3, r0
 65c:	ldr	r3, [pc, #44]	; 690 <memset@plt+0xc0>
 660:	asr	r1, r1, #2
 664:	add	r3, pc, r3
 668:	add	r1, r1, r1, lsr #31
 66c:	asrs	r1, r1, #1
 670:	bxeq	lr
 674:	ldr	r2, [pc, #24]	; 694 <memset@plt+0xc4>
 678:	ldr	r3, [r3, r2]
 67c:	cmp	r3, #0
 680:	bxeq	lr
 684:	bx	r3
 688:	andeq	r0, r1, r8, ror #19
 68c:	andeq	r0, r1, r4, ror #19
 690:	muleq	r1, r4, r9
 694:	andeq	r0, r0, r8, lsr r0
 698:	ldr	r3, [pc, #76]	; 6ec <memset@plt+0x11c>
 69c:	ldr	r2, [pc, #76]	; 6f0 <memset@plt+0x120>
 6a0:	add	r3, pc, r3
 6a4:	add	r2, pc, r2
 6a8:	ldrb	r3, [r3]
 6ac:	cmp	r3, #0
 6b0:	bxne	lr
 6b4:	ldr	r3, [pc, #56]	; 6f4 <memset@plt+0x124>
 6b8:	push	{r4, lr}
 6bc:	ldr	r3, [r2, r3]
 6c0:	cmp	r3, #0
 6c4:	beq	6d4 <memset@plt+0x104>
 6c8:	ldr	r3, [pc, #40]	; 6f8 <memset@plt+0x128>
 6cc:	ldr	r0, [pc, r3]
 6d0:	bl	594 <__cxa_finalize@plt>
 6d4:	bl	604 <memset@plt+0x34>
 6d8:	ldr	r3, [pc, #28]	; 6fc <memset@plt+0x12c>
 6dc:	mov	r2, #1
 6e0:	add	r3, pc, r3
 6e4:	strb	r2, [r3]
 6e8:	pop	{r4, pc}
 6ec:	muleq	r1, r8, r9
 6f0:	andeq	r0, r1, r4, asr r9
 6f4:	andeq	r0, r0, ip, lsr #32
 6f8:	andeq	r0, r1, r8, ror #18
 6fc:	andeq	r0, r1, r8, asr r9
 700:	b	648 <memset@plt+0x78>
 704:	andeq	r0, r0, r0

00000708 <bloom_init_size@@Base>:
 708:	b	710 <bloom_init@@Base>
 70c:	nop	{0}

00000710 <bloom_init@@Base>:
 710:	push	{r4, r5, r6, sl, fp, lr}
 714:	add	fp, sp, #16
 718:	mov	r4, r0
 71c:	mov	r0, #0
 720:	mov	r5, #1
 724:	cmp	r1, #1000	; 0x3e8
 728:	str	r0, [r4, #44]	; 0x2c
 72c:	blt	7c0 <bloom_init@@Base+0xb0>
 730:	vcmp.f64	d0, #0.0
 734:	vmrs	APSR_nzcv, fpscr
 738:	beq	7c0 <bloom_init@@Base+0xb0>
 73c:	vstr	d0, [r4, #8]
 740:	mov	r6, r1
 744:	str	r1, [r4]
 748:	bl	588 <log@plt>
 74c:	vldr	d16, [pc, #116]	; 7c8 <bloom_init@@Base+0xb8>
 750:	vmov	s2, r6
 754:	vldr	d17, [pc, #116]	; 7d0 <bloom_init@@Base+0xc0>
 758:	mov	r5, #1
 75c:	vdiv.f64	d16, d0, d16
 760:	vcvt.f64.s32	d18, s2
 764:	vmul.f64	d17, d16, d17
 768:	vmul.f64	d18, d16, d18
 76c:	vrintp.f64	d17, d17
 770:	vcvt.s32.f64	s0, d18
 774:	vcvt.s32.f64	s2, d17
 778:	vcvt.s32.f64	s4, d18
 77c:	vstr	d16, [r4, #32]
 780:	vstr	s0, [r4, #16]
 784:	vmov	r1, s4
 788:	vstr	s2, [r4, #24]
 78c:	asr	r0, r1, #31
 790:	tst	r1, #7
 794:	add	r2, r1, r0, lsr #29
 798:	mov	r1, #1
 79c:	asr	r0, r2, #3
 7a0:	addne	r0, r5, r2, asr #3
 7a4:	str	r0, [r4, #20]
 7a8:	bl	57c <calloc@plt>
 7ac:	cmp	r0, #0
 7b0:	str	r0, [r4, #40]	; 0x28
 7b4:	movne	r0, #1
 7b8:	movne	r5, #0
 7bc:	strne	r0, [r4, #44]	; 0x2c
 7c0:	mov	r0, r5
 7c4:	pop	{r4, r5, r6, sl, fp, pc}
 7c8:			; <UNDEFINED> instruction: 0xff82c587
 7cc:	svclt	0x00debfbd
 7d0:			; <UNDEFINED> instruction: 0xfefa39ec
 7d4:	svccc	0x00e62e42

000007d8 <bloom_check@@Base>:
 7d8:	mov	r3, #0
 7dc:	b	7e0 <bloom_check@@Base+0x8>
 7e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 7e4:	add	fp, sp, #24
 7e8:	mov	r4, r0
 7ec:	ldr	r0, [r0, #44]	; 0x2c
 7f0:	cmp	r0, #0
 7f4:	beq	89c <bloom_check@@Base+0xc4>
 7f8:	mov	r7, r2
 7fc:	movw	r2, #45708	; 0xb28c
 800:	mov	r5, r1
 804:	mov	r0, r1
 808:	mov	r8, r3
 80c:	movt	r2, #38727	; 0x9747
 810:	mov	r1, r7
 814:	bl	5ac <murmurhash2@plt>
 818:	mov	r6, r0
 81c:	mov	r0, r5
 820:	mov	r1, r7
 824:	mov	r2, r6
 828:	bl	5ac <murmurhash2@plt>
 82c:	ldr	r9, [r4, #24]
 830:	cmp	r9, #0
 834:	beq	8b4 <bloom_check@@Base+0xdc>
 838:	mov	r3, #0
 83c:	mov	ip, #1
 840:	mov	lr, #0
 844:	ldr	r1, [r4, #16]
 848:	ldr	r5, [r4, #40]	; 0x28
 84c:	udiv	r2, r6, r1
 850:	mls	r7, r2, r1, r6
 854:	ldrb	r1, [r5, r7, lsr #3]
 858:	and	r2, r7, #7
 85c:	tst	r1, ip, lsl r2
 860:	beq	86c <bloom_check@@Base+0x94>
 864:	add	lr, lr, #1
 868:	b	888 <bloom_check@@Base+0xb0>
 86c:	cmp	r8, #0
 870:	beq	8cc <bloom_check@@Base+0xf4>
 874:	lsl	r2, ip, r2
 878:	lsr	r7, r7, #3
 87c:	orr	r1, r1, r2
 880:	strb	r1, [r5, r7]
 884:	ldr	r9, [r4, #24]
 888:	add	r3, r3, #1
 88c:	add	r6, r6, r0
 890:	cmp	r3, r9
 894:	bcc	844 <bloom_check@@Base+0x6c>
 898:	b	8bc <bloom_check@@Base+0xe4>
 89c:	ldr	r0, [pc, #48]	; 8d4 <bloom_check@@Base+0xfc>
 8a0:	mov	r1, r4
 8a4:	add	r0, pc, r0
 8a8:	bl	5a0 <printf@plt>
 8ac:	mvn	r0, #0
 8b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 8b4:	mov	lr, #0
 8b8:	mov	r9, #0
 8bc:	sub	r0, lr, r9
 8c0:	clz	r0, r0
 8c4:	lsr	r0, r0, #5
 8c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 8cc:	mov	r0, #0
 8d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 8d4:	andeq	r0, r0, sp, ror #4

000008d8 <bloom_add@@Base>:
 8d8:	mov	r3, #1
 8dc:	b	7e0 <bloom_check@@Base+0x8>

000008e0 <bloom_print@@Base>:
 8e0:	push	{r4, sl, fp, lr}
 8e4:	add	fp, sp, #8
 8e8:	mov	r4, r0
 8ec:	ldr	r0, [pc, #116]	; 968 <bloom_print@@Base+0x88>
 8f0:	mov	r1, r4
 8f4:	add	r0, pc, r0
 8f8:	bl	5a0 <printf@plt>
 8fc:	ldr	r1, [r4]
 900:	ldr	r0, [pc, #100]	; 96c <bloom_print@@Base+0x8c>
 904:	add	r0, pc, r0
 908:	bl	5a0 <printf@plt>
 90c:	vldr	d16, [r4, #8]
 910:	ldr	r0, [pc, #88]	; 970 <bloom_print@@Base+0x90>
 914:	add	r0, pc, r0
 918:	vmov	r2, r3, d16
 91c:	bl	5a0 <printf@plt>
 920:	ldr	r1, [r4, #16]
 924:	ldr	r0, [pc, #72]	; 974 <bloom_print@@Base+0x94>
 928:	add	r0, pc, r0
 92c:	bl	5a0 <printf@plt>
 930:	vldr	d16, [r4, #32]
 934:	ldr	r0, [pc, #60]	; 978 <bloom_print@@Base+0x98>
 938:	add	r0, pc, r0
 93c:	vmov	r2, r3, d16
 940:	bl	5a0 <printf@plt>
 944:	ldr	r1, [r4, #20]
 948:	ldr	r0, [pc, #44]	; 97c <bloom_print@@Base+0x9c>
 94c:	add	r0, pc, r0
 950:	bl	5a0 <printf@plt>
 954:	ldr	r1, [r4, #24]
 958:	ldr	r0, [pc, #32]	; 980 <bloom_print@@Base+0xa0>
 95c:	add	r0, pc, r0
 960:	pop	{r4, sl, fp, lr}
 964:	b	5a0 <printf@plt>
 968:	andeq	r0, r0, r0, lsr #3
 96c:	muleq	r0, sp, r1
 970:	muleq	r0, lr, r1
 974:	muleq	r0, r9, r1
 978:	muleq	r0, r7, r1
 97c:	muleq	r0, sl, r1
 980:	muleq	r0, r9, r1

00000984 <bloom_free@@Base>:
 984:	push	{r4, sl, fp, lr}
 988:	add	fp, sp, #8
 98c:	mov	r4, r0
 990:	ldr	r0, [r0, #44]	; 0x2c
 994:	cmp	r0, #0
 998:	beq	9a4 <bloom_free@@Base+0x20>
 99c:	ldr	r0, [r4, #40]	; 0x28
 9a0:	bl	5b8 <free@plt>
 9a4:	mov	r0, #0
 9a8:	str	r0, [r4, #44]	; 0x2c
 9ac:	pop	{r4, sl, fp, pc}

000009b0 <bloom_reset@@Base>:
 9b0:	push	{r4, sl, fp, lr}
 9b4:	add	fp, sp, #8
 9b8:	ldr	r1, [r0, #44]	; 0x2c
 9bc:	cmp	r1, #0
 9c0:	beq	9dc <bloom_reset@@Base+0x2c>
 9c4:	ldr	r2, [r0, #20]
 9c8:	ldr	r0, [r0, #40]	; 0x28
 9cc:	mov	r1, #0
 9d0:	mov	r4, #0
 9d4:	bl	5d0 <memset@plt>
 9d8:	b	9e0 <bloom_reset@@Base+0x30>
 9dc:	mov	r4, #1
 9e0:	mov	r0, r4
 9e4:	pop	{r4, sl, fp, pc}

000009e8 <bloom_version@@Base>:
 9e8:	ldr	r0, [pc, #4]	; 9f4 <bloom_version@@Base+0xc>
 9ec:	add	r0, pc, r0
 9f0:	bx	lr
 9f4:	andeq	r0, r0, r1, lsr #2

000009f8 <murmurhash2@@Base>:
 9f8:	push	{r4, r5, r6, sl, fp, lr}
 9fc:	add	fp, sp, #16
 a00:	eor	r3, r2, r1
 a04:	movw	r2, #59797	; 0xe995
 a08:	cmp	r1, #4
 a0c:	movt	r2, #23505	; 0x5bd1
 a10:	blt	a50 <murmurhash2@@Base+0x58>
 a14:	sub	ip, r1, #4
 a18:	mov	r5, r0
 a1c:	bic	lr, ip, #3
 a20:	add	r4, lr, #4
 a24:	ldr	r6, [r5], #4
 a28:	mul	r3, r3, r2
 a2c:	sub	r1, r1, #4
 a30:	cmp	r1, #3
 a34:	mul	r6, r6, r2
 a38:	eor	r6, r6, r6, lsr #24
 a3c:	mul	r6, r6, r2
 a40:	eor	r3, r6, r3
 a44:	bgt	a24 <murmurhash2@@Base+0x2c>
 a48:	sub	r1, ip, lr
 a4c:	add	r0, r0, r4
 a50:	cmp	r1, #1
 a54:	beq	a78 <murmurhash2@@Base+0x80>
 a58:	cmp	r1, #2
 a5c:	beq	a70 <murmurhash2@@Base+0x78>
 a60:	cmp	r1, #3
 a64:	bne	a84 <murmurhash2@@Base+0x8c>
 a68:	ldrb	r1, [r0, #2]
 a6c:	eor	r3, r3, r1, lsl #16
 a70:	ldrb	r1, [r0, #1]
 a74:	eor	r3, r3, r1, lsl #8
 a78:	ldrb	r0, [r0]
 a7c:	eor	r0, r3, r0
 a80:	mul	r3, r0, r2
 a84:	eor	r0, r3, r3, lsr #13
 a88:	mul	r0, r0, r2
 a8c:	eor	r0, r0, r0, lsr #15
 a90:	pop	{r4, r5, r6, sl, fp, pc}

Disassembly of section .fini:

00000a94 <.fini>:
 a94:	push	{r3, lr}
 a98:	pop	{r3, pc}
